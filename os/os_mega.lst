# File debug_level2.asm
0000			 
0000			; DEBUG Level 2 - All useful debug on and memory courruption guards 
0000			 
0000			; Odd specific debug points for testing hardware dev 
0000			 
0000			;DEBUG_LEVEL0: equ 0 
0000			;DEBUG_LEVEL0: equ 0 
0000			;DEBUG_LEVEL2: equ 1 
0000			DEBUG_LEVEL: equ '2' 
0000			 
0000			DEBUG_SOUND: equ 0      
0000			DEBUG_STK_FAULT: equ 0 
0000			DEBUG_INPUT: equ 0     ; Debug input entry code 
0000			DEBUG_INPUTV2: equ 0     ; Debug input entry code 
0000			DEBUG_KEYCINWAIT: equ 0 
0000			DEBUG_KEYCIN: equ 0 
0000			DEBUG_KEY: equ 0 
0000			DEBUG_KEY_MATRIX: equ 0 
0000			DEBUG_STORECF: equ 0 
0000			DEBUG_STORESE: equ 1        ; TODO  w locks up, r returns.  
0000			DEBUG_SPI_HARD_CE0: equ 0    ; only handshake on CE0 on port A 
0000			DEBUG_SPI: equ 0    ; low level spi tests 
0000			 
0000			; Enable many break points 
0000			 
0000			DEBUG_FORTH_PARSE_EXEC: equ 0     ; 6 
0000			DEBUG_FORTH_PARSE_EXEC_SLOW: equ 0     ; 6 
0000			DEBUG_FORTH_PARSE_NEXTWORD: equ 0 
0000			DEBUG_FORTH_JP: equ 0    ; 4 
0000			DEBUG_FORTH_MALLOC: equ 0 
0000			DEBUG_FORTH_MALLOC_INT: equ 0 
0000			DEBUG_FORTH_DOT: equ 1 
0000			DEBUG_FORTH_DOT_WAIT: equ 0 
0000			DEBUG_FORTH_MATHS: equ 0 
0000			DEBUG_FORTH_TOK: equ 0    ; 4 
0000			DEBUG_FORTH_PARSE: equ 0    ; 3 
0000			DEBUG_FORTH: equ 0  ;2 
0000			DEBUG_FORTH_WORDS: equ 1   ; 1 
0000			DEBUG_FORTH_PUSH: equ 1   ; 1 
0000			DEBUG_FORTH_UWORD: equ 1   ; 1 
0000			 
0000			; Enable key point breakpoints 
0000			 
0000			DEBUG_FORTH_DOT_KEY: equ 0 
0000			DEBUG_FORTH_PARSE_KEY: equ 0   ; 5 
0000			DEBUG_FORTH_WORDS_KEY: equ 1   ; 1 
0000			 
0000			; Debug stack imbalances 
0000			 
0000			ON: equ 1 
0000			OFF: equ 0 
0000			 
0000			DEBUG_STACK_IMB: equ 0 
0000			STACK_IMB_STORE: equ 20 
0000			 
0000			; House keeping and protections 
0000			 
0000			DEBUG_FORTH_STACK_GUARD: equ 1    ; under/over flows 
0000			DEBUG_FORTH_MALLOC_GUARD: equ 1 
0000			DEBUG_FORTH_MALLOC_HIGH: equ 0     ; warn only if more than 255 chars being allocated. would be highly unusual! 
0000			FORTH_ENABLE_FREE: equ 0 
0000			FORTH_ENABLE_MALLOCFREE: equ 1 
0000			FORTH_ENABLE_DSPPOPFREE: equ 1    ; TODO BUG Seems to be OK in some situations but with SW it crashes straight away 
0000			FORTH_ENABLE_FLOATMATH: equ 0 
0000			; eof 
# End of file debug_level2.asm
# File os_mega.asm
0000			 
0000			; Hardware Platform 
0000			 
0000			BASE_SC114: equ 0 
0000			BASE_KEV: equ 1 
0000			BASE_CPM: equ 0 
0000			 
0000			ENABLE_BASIC: equ 0 
0000			 
0000			STARTUP_V1: equ 0 
0000			STARTUP_V2: equ 1 
0000			 
0000			tos:	equ 0fffdh 
0000			; 
0000			; 
0000			; CPU clock 
0000			; 
0000			CPU_CLOCK_4MHZ: equ 1 
0000			CPU_CLOCK_8MHZ: equ  0 
0000			CPU_CLOCK_10MHZ: equ  0 
0000			 
0000			; use microchip serial eeprom for storage 
0000			 
0000			STORAGE_SE: equ 1 
0000			  
0000			; now handled by SPI support 
0000			SOUND_ENABLE: equ 0    
0000			 
0000			; Number of bytes available in heap   TODO make all of user ram 
0000			baseram: equ 08000h 
0000			endofcode: equ 08000h 
0000			heap_start: equ 0800eh  ; Starting address of heap 
0000			free_list:  equ 0800ah      ; Block struct for start of free list (MUST be 4 bytes) 
0000			 
0000			; Full OS but with the 5x10 fullsized keyboard 
0000			 
0000			display_rows: equ 4     
0000			;display_cols: equ 20 
0000			display_cols: equ 40 
0000			 
0000			key_rows: equ 5      
0000			key_cols: equ 10    
0000			 
0000			include "main.asm" 
0000			; z80 homebrew opperating system 
0000			; 
0000			 
0000			STARTUP_ENABLE: equ 1 
0000			 
0000			 
0000			; bios jump points via rst 
0000			 
0000			if BASE_SC114 = 1  
0000			 
0000				org 8000h 
0000			endif 
0000			 
0000			if BASE_KEV = 1  
0000			 
0000				org 0h 
0000			endif 
0000			 
0000			if BASE_CPM = 1  
0000			 
0000				org 100h 
0000			endif 
0000 c3 34 1c			jp coldstart     ; rst 0 - cold boot 
0003			 
0003			 
0003 ..			buildtime: db   "Build: " 
000a					include "romtimestamp.asm" 
000a ..			db '2025-09-05 21:42' 
# End of file romtimestamp.asm
001a 00				   db 0 
001b .. 32 00		debuglevel: db   "DL",DEBUG_LEVEL, 0 
001f			 
001f			 
001f			 
001f			;        nop  
001f			;        nop 
001f			;;	org 05h		; null out bdos call 
001f			; 
001f			;        nop  
001f			;        nop  
001f			;        nop 
001f			;;	org 08h 
001f			;;; 
001f			;;	jp cin		; rst 8 - char in 
001f			;;; 
001f			; 
001f			;        nop 
001f			;        nop 
001f			;        nop 
001f			;        nop 
001f			;        nop 
001f			;        nop 
001f			;        nop 
001f			;        nop 
001f			;	org 010h 
001f			;; 
001f			;	jp cout		; rest 010h  - char out 
001f			;; 
001f			;	org 01bh   
001f			; 
001f			;	;jp  		; rst 01bh   - write string to display 
001f			;	jp str_at_display 
001f			; 
001f			; 
001f			;	org 020h 
001f			; 
001f			;	; jp		 ; rst 020h - read char at screen location 
001f			; 
001f			;	org 028h 
001f			 
001f				; jp		 ; rst 028h  - storage i/o 
001f			 
001f			; 	org 030h 
001f			;	jp break_point_state 
001f			  
001f			; $30  
001f			; org 038h 
001f			; $38 
001f			 
001f			; TODO any more important entry points to add to jump table for easier coding use? 
001f			 
001f			if BASE_KEV = 1  
001f			 
001f				; need to be at $66 for nmi support 
001f 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0025 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
002b 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0031 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0037 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
003d 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0043 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0049 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
004f 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0055 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
005b 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0061 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0067 00 ff			db 0,255 
0069 c3 0d 72			jp nmi 
006c			endif 
006c			 
006c			include "firmware.asm" 
006c			  
006c			; main constants (used here and in firmware)  
006c			  
006c			; TODO have page 0 of storage as bios  
006c			  
006c			Device_A: equ 0h  
006c			Device_B: equ 040h          ; Sound  
006c			  
006c			if BASE_KEV  
006c			Device_C: equ 080h          ; Storage and ext cart devices  
006c			endif  
006c			  
006c			if BASE_SC114  
006c			Device_C: equ  SC103_PIO          ; Storage and ext cart devices  
006c			endif  
006c			  
006c			if BASE_CPM  
006c			; TODO fixup for CPM  
006c			Device_C: equ 080h          ; Storage and ext cart devices  
006c			endif  
006c			  
006c			Device_D: equ 0c0h             ; Keyboard and LCD  
006c			  
006c			; Odd specific debug points for testing hardware dev  
006c			  
006c			;if DEBUG_LEVEL0  
006c			;	include "debug_level0.asm"  
006c			;endif  
006c			;if DEBUG_LEVEL1  
006c			;	include "debug_level1.asm"  
006c			;endif  
006c			;if DEBUG_LEVEL2  
006c			;	include "debug_level2.asm"  
006c			;endif  
006c			  
006c			  
006c			CALLMONITOR: macro  
006c			;	call break_point_state  
006c			; now use the break point debug vector  
006c				call debug_vector  
006c				endm  
006c			  
006c			MALLOC_1: equ 1        ; from dk88   
006c			MALLOC_2: equ 0           ; broke  
006c			MALLOC_3: equ 0           ; really broke  
006c			MALLOC_4: equ 0              ; mine pretty basic reuse and max of 250 chars  
006c			  
006c			if BASE_KEV   
006c			;stacksize: equ 256  
006c			; each stack entry is three bytes (type + word)  
006c			stacksize: equ 3*150  
006c			  
006c			STACK_RET_SIZE: equ 64  
006c			STACK_LOOP_SIZE: equ 128  
006c			STACK_DATA_SIZE: equ 512  
006c			endif  
006c			if BASE_SC114  
006c			;tos:	equ 0f000h  
006c			stacksize: equ 256  
006c			STACK_RET_SIZE: equ 64  
006c			STACK_LOOP_SIZE: equ 128  
006c			STACK_DATA_SIZE: equ 256  
006c			endif  
006c			  
006c			if BASE_CPM  
006c			;tos:	equ 0f000h  
006c			stacksize: equ 256  
006c			STACK_RET_SIZE: equ 64  
006c			STACK_LOOP_SIZE: equ 128  
006c			STACK_DATA_SIZE: equ 256  
006c			endif  
006c			  
006c			;if STORAGE_SE == 0  
006c			STORE_BLOCK_PHY:   equ 64    ; physical block size on storage   64byte on 256k eeprom  
006c			STORE_DEVICE_MAXBLOCKS:  equ  255*2 ; how many blocks are there on this storage device  
006c			;endif  
006c			  
006c			; Block 0 at offset $3b is a flag to decide to offer auto start up - 0 = prompt 1-auto run no prompt 2 - dont run  
006c			  
006c			STORE_0_AUTORUN: equ $20  
006c			  
006c			; Block 0 at offset $20+ holds the file number to run at system startup after the display  
006c			  
006c			STORE_0_AUTOFILE: equ $21  
006c			STORE_0_BANKRUN: equ $23  
006c			STORE_0_FILERUN: equ $24  
006c			  
006c			; Block 0 offsets for settings  
006c			  
006c			; if set then skip prompt for start up and accept all  
006c			  
006c			STORE_0_QUICKSTART: equ $25  
006c			  
006c			; Blocks where directory table is held  
006c			  
006c			; Reducing the number of entries increases the max file size  
006c			  
006c			;STORE_DIR_START: equ 1  
006c			;STORE_DIR_END: equ 33  
006c			  
006c			; Blocks from where file data is stored  
006c			  
006c			;STORE_DATA_START: equ STORE_DIR_END + 1  
006c			  
006c			; Block indicators (<32 are data files)  
006c			  
006c			;STORE_BLOCK_CFG: equ $8f       ; config block  
006c			;STORE_BLOCK_DIRF: equ $8e       ; directory block free  
006c			;STORE_BLOCK_DIRU: equ $8d       ; directory block free  
006c			;STORE_BLOCK_FREE: equ $85       ; data block free  
006c			;STORE_BLOCK_AUTO: equ $89       ; auto start code  
006c			  
006c			  
006c			  
006c			; Directory entry flags  
006c			  
006c			;STORE_DIR_FREE: equ 0  
006c			;STORE_DIR_FILE:  equ 1  
006c			  
006c			; Structure offsets to directory entries  
006c			;STORE_DE_FLAG: equ 0  
006c			;STORE_DE_MAXEXT: equ 1  
006c			;STORE_DE_FILENAME: equ 2  
006c			  
006c			; Structure offsets to block 0  
006c			  
006c			;STORE_BK0_ISFOR: equ 1  
006c			;STORE_BK0_LABEL: equ 3  
006c			  
006c			; memory allocation   
006c			  
006c			chk_stund: equ tos+2           ; underflow check word  
006c			chk_stovr: equ chk_stund-stacksize -2; overflow check word  
006c			  
006c			; keyscan table needs rows x cols buffer  
006c			;key_rows: equ 5     ; TODO move out to mini and maxi + 1 null  
006c			;key_cols: equ 10    ; TODO move out to mini and maxi + 1 null  
006c			  
006c			keyscan_table_row1: equ chk_stovr -key_cols-1  
006c			keyscan_table_row2: equ keyscan_table_row1-key_cols-1  
006c			keyscan_table_row3: equ keyscan_table_row2-key_cols-1  
006c			keyscan_table_row4: equ keyscan_table_row3-key_cols-1  
006c			keyscan_table_row5: equ keyscan_table_row4-key_cols-1  
006c			keyscan_table: equ keyscan_table_row5-(key_cols*key_rows)-1  
006c			keyscan_scancol: equ keyscan_table-key_cols  
006c			;keyscan_table_len: equ key_rows*key_cols  
006c			;keybufptr: equ keyscan_table - 2  
006c			;keysymbol: equ keybufptr - 1  
006c			key_held: equ keyscan_scancol-1	; currently held  
006c			key_held_prev: equ key_held - 1   ; previously held (to detect bounce and cycle of key if required)  
006c			key_repeat_ct: equ key_held_prev - 4 ; timers (two words)  
006c			key_fa: equ key_repeat_ct -1 ;  
006c			key_fb: equ key_fa -1 ;  
006c			key_fc: equ key_fb -1 ;  
006c			key_fd: equ key_fc -1 ;  
006c			key_face_held: equ key_fd - 1   
006c			; flag for enabling/disabling various hardware diag loading via block 0 on bank 1  
006c			  
006c			hardware_config: equ key_face_held - 10  
006c			  
006c			; hardware config switches  
006c			; TODO add bitmasks on includes for hardware  
006c			; high byte for expansion ids  
006c			;     0000 0000  no card inserted  
006c			;     0000 0001  storage card inserted  
006c			;     0000 0010  spi sd card active  
006c			  
006c			;       
006c			; low byte:  
006c			;     0000 0001   4x4 keypad  
006c			;     0000 0010   full keyboard  
006c			;     0000 0011   spi/ext keyboard  
006c			;     0000 0100   20x4 lcd  
006c			;     0000 1000   40x4 lcd  
006c			;     0000 1100   spi/ext display  
006c			;     0001 0000   ide interface available  
006c			  
006c			hardware_word: equ hardware_config - 2  
006c			  
006c			; debug marker - optional display of debug point on the debug screens  
006c			  
006c			nmi_vector:  equ hardware_word - 3   ; vector to the nmi handler  
006c			debug_vector:  equ nmi_vector - 3   ; vector to the debug handler  
006c			  
006c			debug_umark: equ debug_vector - 6  ; current user mark  
006c			debug_mark: equ debug_umark - 4    ; internal word debug points  
006c			  
006c			; input_str vars  
006c			input_ptr:  equ debug_mark - 2    ; ptr to the current cursor position of string currently being edited  on entry starting   
006c			input_start:  equ input_ptr - 2    ; ptr to the start of string   
006c			input_size: equ input_start -1  ; number of chars  
006c			input_display_size: equ input_size -1  ; TODO number of chars that are displayable. if < input_size then scroll   
006c			input_at_pos: equ input_display_size - 1 ; frame buffer offset for start of input  
006c			input_under_cursor: equ input_at_pos - 1 ; char under the cursor so we can blink it  
006c			input_at_cursor: equ input_under_cursor - 1 ; offset of cursor to current start of string  
006c			input_cur_flash: equ input_at_cursor - 2 ;  timeout for cursor flash  
006c			input_cur_onoff: equ input_cur_flash - 1 ;  cursor blink on or off  
006c			input_len: equ input_cur_onoff - 5 ; length of current input  
006c			input_cursor: equ input_len - 5 ; offset of cursor to current start of string  
006c			  
006c			; cursor blink rate  
006c			CUR_BLINK_RATE: equ $09  
006c			;CUR_BLINK_RATE: equ 15  
006c			  
006c			key_actual_pressed: equ input_cursor - 1   
006c			key_symbol: equ key_actual_pressed - 1   
006c			key_shift: equ key_symbol - 1   
006c			  
006c			; Display allocation  
006c			  
006c			;display_rows: equ 4     ; move out to mini and mega files  
006c			;display_cols: equ 20  
006c			  
006c			display_fb_len: equ display_rows*display_cols  
006c			  
006c			; primary frame buffer     
006c			display_fb0: equ  key_shift-display_fb_len -1 ; -display_fb_len-1          ; cli input     TODO why is that doubling up?  
006c			; working frame buffers  
006c			display_fb1: equ  display_fb0-display_fb_len -1 ; -display_fb_len-1          ; default running program  
006c			display_fb3: equ  display_fb1-display_fb_len - 1  
006c			display_fb2: equ  display_fb3-display_fb_len - 1  
006c			;  
006c			; pointer to active frame buffer  
006c			display_fb_active: equ display_fb2 - 2  
006c			display_lcde1e2: equ display_fb_active - 1         ; 0=e1, 1=e2   For E1/E2 selection when using the lcd 4x40 display  
006c			display_write_tmp: equ display_lcde1e2 - 2  
006c			display_active:  equ display_write_tmp-3   ; current state of activity char (plus room to write string)  
006c			  
006c			;  
006c			  
006c			;; can load into de directory  
006c			cursor_col: equ display_active-1  
006c			cursor_row: equ cursor_col-1  
006c			cursor_ptr: equ cursor_row - 1     ;  actual offset into lcd memory for row and col combo  
006c			cursor_shape: equ cursor_ptr - 2   ; char used for the current cursor   
006c			  
006c			; maths vars  
006c			  
006c			LFSRSeed: equ cursor_shape -20   
006c			randData: equ LFSRSeed - 2  
006c			xrandc: equ randData - 2  
006c			stackstore: equ xrandc - 2  
006c			seed1: equ  stackstore -2   
006c			seed2: equ seed1 - 2  
006c			  
006c			; cf storage vars  
006c			  
006c			iErrorNum:  equ seed2-1         ;Error number  
006c			iErrorReg:  equ iErrorNum -1              ;Error register  
006c			iErrorVer:  equ iErrorReg - 1              ;Verify error flag  
006c			  
006c			store_bank_active: equ iErrorVer - (5 + 8 ) 		; TODO not used.  indicator of which storage banks are available to use 5 on board and 8 in cart  
006c			  
006c			STORE_BLOCK_LOG:  equ   280      ; TODO remove.... Logical block size     
006c			  
006c			store_page: equ store_bank_active-STORE_BLOCK_LOG-1            ; bigger than page size for eeprom so we can join multiple blocks if they are continuation records  
006c			;?????store_ffpage: equ store_page-STORE_BLOCK_LOG            ; page size for eeprom?????  
006c			store_readptr: equ store_page-2       ; tracks the file extent during storage_read of continuation blocks  
006c			store_readbuf: equ store_readptr-2       ; tracks the position for the buffer during storage_read of continuation blocks  
006c			store_longread: equ store_readbuf -1 ;   if zero then only read one block. If not zero then do a read for as long as required  
006c			store_tmp1: equ store_longread - 2      ; temp pointer holders during ops  
006c			store_tmp2: equ store_tmp1 - 2        ; temp pointer holders during ops  
006c			store_tmp3: equ store_tmp2 - 2        ; temp pointer holders during ops  
006c			store_tmpid: equ store_tmp3 - 1		; page temp id  
006c			store_tmpext: equ store_tmpid - 1		; file extent temp  
006c			store_readcont: equ store_tmpid - 1		; If current read results in an overflow buffer to next record flag it up  
006c			store_openaddr: equ store_readcont - 2		; file block address of current opened file for read  
006c			store_openext: equ store_openaddr - 1		; file extent of current opened file for read  
006c			store_openmaxext: equ store_openext - 1		; max extent of current opened file for read  
006c			store_filecache: equ store_openmaxext-2   ;  TODO (using just one for now)  file id + extent count cache * 5  
006c			store_tmppageid: equ store_filecache-2    ; phyical page id temp  
006c			;  
006c			; spi vars  
006c			  
006c			  
006c			spi_clktime: equ store_tmppageid - 1      ; holds the number of ms that happens between spi clock pulses  
006c			spi_cartdev: equ spi_clktime - 1      ; holds bit mask to send to portb (ext spi) devices  
006c			spi_cartdev2: equ spi_cartdev - 1      ; holds bit mask to send to portb's shift reg devices  
006c			spi_portbyte: equ spi_cartdev2 - 1      ; holds bit mask to send to spi bus   
006c			spi_device: equ spi_portbyte - 1    ; bit mask to send to porta (eeproms) devices  
006c			spi_device_id: equ spi_device - 1    ; human readable bank number  
006c			  
006c			;;;;; forth cli params  
006c			  
006c			; TODO use a different frame buffer for forth???  
006c			  
006c			f_cursor_ptr:  equ spi_device_id - 1  ; offset into frame buffer for any . or EMIT output  
006c			cli_buffer: equ f_cursor_ptr - 20     ; temp hold - maybe not needed  
006c			cli_origtoken: equ cli_buffer - 2     ; pointer to the text of token for this word being checked  
006c			cli_token: equ cli_origtoken - 2     ; pointer to the text of token for this word being checked  
006c			cli_execword: equ cli_token - 2      ; pointer to start of code for this word  
006c			cli_nextword: equ cli_execword - 2      ; pointer to start of next word in dict  
006c			cli_ptr: equ cli_nextword - 2           ; pointer to start of word to parse by forth kernel (working)  
006c			cli_origptr: equ cli_ptr - 2           ; pointer to start of word to parse which resets cli_ptr on each word test  
006c			  
006c			cli_mvdot: equ cli_origptr - 1 ;     ; true will move the cursor once something is displayed  
006c			cli_autodisplay: equ cli_mvdot - 1 ;     ; true will auto update the display (slow) otherwise need to use DRAW  
006c			cli_var_array: equ cli_autodisplay - ( 10 * 2 ) ; word or string pointer variables using V@0-V@9  
006c			cli_var_array2: equ cli_var_array - ( 26 * 2 ) ; word or string pointer variables using VAR word  
006c			cli_ret_sp: equ cli_var_array2 - 2    ; ret stack pointer  
006c			cli_loop_sp: equ cli_ret_sp - 2   ; data stack pointer  
006c			cli_data_sp: equ cli_loop_sp - 2   ; data stack pointer  
006c			  
006c			chk_ret_und: equ cli_data_sp-2           ; underflow check word  
006c			cli_ret_stack: equ chk_ret_und - STACK_RET_SIZE      ; TODO could I just use normal stack for this? - use linked list for looping  
006c			chk_ret_ovr: equ cli_ret_stack -2; overflow check word  
006c			cli_loop_stack: equ chk_ret_ovr - STACK_LOOP_SIZE      ; TODO could I just use normal stack for this? - use linked list for looping  
006c			chk_loop_ovr: equ cli_loop_stack -2; overflow check word  
006c			cli_data_stack: equ chk_loop_ovr - STACK_DATA_SIZE		 ;   
006c			chk_data_ovr: equ cli_data_stack -2; overflow check word  
006c			  
006c			os_var_array: equ chk_data_ovr - (32 * 2)      ;   32 word array for use using the SCRATCH word  
006c			  
006c			; os/forth token vars  
006c			  
006c			os_last_cmd: equ os_var_array-255  
006c			os_cli_cmd: equ os_last_cmd-255              ; cli command entry line  
006c			os_current_i: equ os_cli_cmd-2  
006c			os_cur_ptr: equ os_current_i-2  
006c			os_word_scratch: equ os_cur_ptr-30  
006c			os_tok_len: equ os_word_scratch - 2  
006c			os_tok_ptr: equ os_tok_len - 2               ; our current PC ptr  
006c			os_tok_malloc: equ os_tok_ptr - 2  
006c			os_last_new_uword: equ os_tok_malloc - 2    ; hold start of last user word added  
006c			os_input: equ os_last_new_uword-255    ; buffer for EDIT word  
006c			execscratch: equ os_input-255        ; exec cmd eval buffer  
006c			scratch: equ execscratch-255  
006c			  
006c			os_stack_1: equ scratch - 3       ; stack holding area 1  
006c			os_stack_2: equ os_stack_1 - 3       ; stack holding area 2  
006c			os_stack_3: equ os_stack_2 - 3       ; stack holding area 3  
006c			os_stack_4: equ os_stack_3 - 3       ; stack holding area 4  
006c			  
006c			  
006c			; temp locations for new word processing to save on adding more   
006c			  
006c			os_new_malloc: equ os_stack_4-2  
006c			os_new_parse_len: equ os_new_malloc - 2  
006c			os_new_word_len: equ os_new_parse_len - 2  
006c			os_new_work_ptr: equ os_new_word_len - 2  
006c			os_new_src_ptr: equ os_new_work_ptr - 2  
006c			os_new_exec: equ os_new_src_ptr - 2  
006c			os_new_exec_ptr: equ os_new_exec - 2  
006c			  
006c			; resume memory alloocations....  
006c			  
006c			;os_view_disable: equ os_new_exec_ptr - 1  
006c			os_view_af: equ os_new_exec_ptr - 2  
006c			os_view_hl: equ os_view_af -2  
006c			os_view_de: equ os_view_hl - 2  
006c			os_view_bc: equ os_view_de - 2  
006c			  
006c			; stack checksum word  
006c			if DEBUG_STACK_IMB  
006c				curframe: equ  os_view_de - 5  
006c				store_sp: equ curframe - (STACK_IMB_STORE*4)  
006c				chk_word: equ store_sp - 2		 ; this is the word to init and then check against to detect stack corruption. Held far away from all stacks  
006c			else  
006c				chk_word: equ os_view_bc - 2		 ; this is the word to init and then check against to detect stack corruption. Held far away from all stacks  
006c			endif  
006c			  
006c			; with data stack could see memory filled with junk. need some memory management   
006c			; malloc and free entry points added  
006c			  
006c			;free_list:  equ chk_word - 4     ; Block struct for start of free list (MUST be 4 bytes)  
006c			;heap_size: equ  (free_list-08100h)      ; Number of bytes available in heap   TODO make all of user ram  
006c			;;heap_start: equ free_list - heap_size  ; Starting address of heap  
006c			;heap_end: equ free_list-1  ; Starting address of heap  
006c			;heap_start: equ free_list - heap_size  ; Starting address of heap  
006c			  
006c			;heap_start: equ free_list - heap_size  ; Starting address of heap  
006c			heap_end: equ chk_word-1  ; Starting address of heap  
006c			  
006c			  
006c			;if BASE_KEV   
006c			;heap_start: equ 0800eh  ; Starting address of heap  
006c			;free_list:  equ 0800ah      ; Block struct for start of free list (MUST be 4 bytes)  
006c			;heap_size: equ  heap_end-heap_start      ; Number of bytes available in heap   TODO make all of user ram  
006c			;endif  
006c			  
006c			;if BASE_SC114  
006c			;heap_start: equ baseram+15  ; Starting address of heap  
006c			;free_list:  equ baseram+10      ; Block struct for start of free list (MUST be 4 bytes)  
006c			;endif  
006c			  
006c			  
006c			;;;;  
006c			  
006c			  
006c			; change below to point to last memory alloc above  
006c			topusermem:  equ   heap_start  
006c			  
006c			;if BASE_KEV   
006c			;baseusermem: equ 08000h  
006c			;endif  
006c			  
006c			;if BASE_SC114  
006c			;;aseusermem:     equ    12  
006c			;baseusermem:     equ    prompt  
006c			;;baseusermem:     equ    endofcode  
006c			;endif  
006c			  
006c			  
006c			; **********************************************************************  
006c			; **  Constants  
006c			; **********************************************************************  
006c			  
006c			; Constants used by this code module  
006c			kDataReg:   EQU Device_D           ;PIO port A data register  
006c			kContReg:   EQU Device_D+2           ;PIO port A control register  
006c			  
006c			  
006c			portbdata:  equ Device_D+1    ; port b data  
006c			portbctl:   equ Device_D+3    ; port b control  
006c			  
006c			  
006c			;KEY_SHIFT:   equ 5  
006c			;KEY_SYMBOLSHIFT:  equ 6  
006c			  
006c			KEY_SHIFTLOCK: equ 4  
006c			  
006c			  
006c			KEY_UP: equ 5  
006c			KEY_NEXTWORD: equ 6  
006c			KEY_PREVWORD: equ 7  
006c			KEY_BS: equ 8  
006c			KEY_TAB:  equ 9  
006c			KEY_DOWN: equ 10  
006c			KEY_LEFT: equ 11  
006c			KEY_RIGHT: equ 12  
006c			KEY_CR:   equ 13  
006c			KEY_HOME: equ 14  
006c			KEY_END: equ 15  
006c			  
006c			KEY_F1: equ 16  
006c			KEY_F2: equ 17  
006c			KEY_F3: equ 18  
006c			KEY_F4: equ 19  
006c			  
006c			KEY_F5: equ 20  
006c			KEY_F6: equ 21  
006c			KEY_F7: equ 22  
006c			KEY_F8: equ 23  
006c			  
006c			KEY_F9: equ 24  
006c			KEY_F10: equ 25  
006c			KEY_F11: equ 26  
006c			KEY_F12: equ 27  
006c			  
006c			;if DEBUG_KEY  
006c			;	KEY_MATRIX_NO_PRESS: equ '.'  
006c			;	KEY_SHIFT:   equ '.'  
006c			;	KEY_SYMBOLSHIFT:  equ '.'  
006c			;else  
006c				KEY_SHIFT:   equ '~'  
006c				KEY_SYMBOLSHIFT:  equ '~'  
006c				KEY_MATRIX_NO_PRESS: equ '~'  
006c			;endi  
006c			  
006c			  
006c			  
006c			  
006c			; Macro to make adding debug marks easier  
006c			  
006c			DMARK: macro str  
006c				push af  
006c				ld a, (.dmark)  
006c				ld (debug_mark),a  
006c				ld a, (.dmark+1)  
006c				ld (debug_mark+1),a  
006c				ld a, (.dmark+2)  
006c				ld (debug_mark+2),a  
006c				jr .pastdmark  
006c			.dmark: db str  
006c			.pastdmark: pop af  
006c			  
006c			endm  
006c			  
006c			  
006c			; macro to detect for stack imbalances  
006c			  
006c			include "stackimbal.asm"  
006c			; Macro and code to detect stock imbalances 
006c			 
006c			SPPUSH: equ 0 
006c			 
006c			; Add a stack frame which can be checked before return 
006c			 
006c			STACKFRAME: macro onoff frame1 frame2 
006c			 
006c				if DEBUG_STACK_IMB 
006c					if onoff 
006c						; save current SP 
006c						exx 
006c			 
006c						ld de, frame1 
006c						ld a, d 
006c						ld hl, curframe 
006c						call hexout 
006c						ld a, e 
006c						ld hl, curframe+2 
006c						call hexout 
006c			  
006c						ld hl, frame1 
006c						push hl 
006c						ld hl, frame2 
006c						push hl 
006c						exx 
006c					endif 
006c					 
006c				endif 
006c			endm 
006c			 
006c			STACKFRAMECHK: macro onoff frame1 frame2 
006c			 
006c					 
006c				if DEBUG_STACK_IMB 
006c					if onoff 
006c						exx 
006c						; check stack frame SP 
006c			 
006c						ld hl, frame2 
006c						pop de   ; frame2 
006c			 
006c						call cmp16 
006c						jr nz, .spnosame 
006c						 
006c			 
006c						ld hl, frame1 
006c						pop de   ; frame1 
006c			 
006c						call cmp16 
006c						jr z, .spfrsame 
006c			 
006c						.spnosame: call showsperror 
006c			 
006c						.spfrsame: nop 
006c			 
006c						exx 
006c					endif 
006c					 
006c				endif 
006c			 
006c			 
006c			endm 
006c			 
006c			 
006c			; for a sub routine, wrap SP collection and comparisons 
006c			 
006c			; Usage: 
006c			; 
006c			; SAVESP ON/OFF 0-STACK_IMB_STORE/4 
006c			; CHECKSP ON/OFF 0-STACK_IMB_STORE/4 
006c			 
006c			SAVESP: macro onoff storeword 
006c			 
006c				if DEBUG_STACK_IMB 
006c					if onoff 
006c						; save current SP 
006c			 
006c						ld (store_sp+(storeword*4)), sp 
006c			 
006c					endif 
006c					 
006c				endif 
006c			 
006c			endm 
006c			 
006c			CHECKSP: macro onoff storeword 
006c			 
006c				if DEBUG_STACK_IMB 
006c					if onoff 
006c			 
006c						; save SP after last save 
006c				 
006c						ld (store_sp+(storeword*4)+2), sp 
006c			 
006c						push hl 
006c						ld hl, store_sp+(storeword*4) 
006c						call check_stack_sp  
006c						pop hl 
006c			 
006c			 
006c					endif 
006c					 
006c				endif 
006c			 
006c			endm 
006c			 
006c			if DEBUG_STACK_IMB 
006c			 
006c			check_stack_sp: 
006c					push de 
006c			 
006c					ld e, (hl) 
006c					inc hl 
006c					ld d, (hl) 
006c					inc hl 
006c			 
006c					push de 
006c			 
006c			 
006c					ld e, (hl) 
006c					inc hl 
006c					ld d, (hl) 
006c					inc hl 
006c			 
006c					pop hl 
006c			 
006c			 
006c					; check to see if the same 
006c			 
006c					call cmp16 
006c					jr z, .spsame 
006c			 
006c					; not same 
006c			 
006c					call showsperror 
006c			.spsame: 
006c			 
006c					pop de 
006c			 
006c					ret 
006c			 
006c			.sperr:  db "Stack imbalance",0 
006c			 
006c			 
006c			showsperror: 
006c			 
006c			 
006c				push hl 
006c				push af 
006c				push de 
006c				call clear_display 
006c				ld de, .sperr 
006c				ld a,0 
006c			;	ld de,os_word_scratch 
006c				call str_at_display 
006c				ld a, display_row_1+17 
006c				ld de, debug_mark 
006c				call str_at_display 
006c				ld a, 0 
006c				ld (curframe+4),a 
006c				ld hl, curframe 
006c				ld de, os_word_scratch 
006c				ld a, display_row_4 
006c				call str_at_display 
006c				call update_display 
006c				;call break_point_state 
006c				call cin_wait 
006c			 
006c			;	ld a, ' ' 
006c			;	ld (os_view_disable), a 
006c				call bp_on 
006c				pop de	 
006c				pop af 
006c				pop hl 
006c				CALLMONITOR 
006c				ret 
006c			 
006c			endif 
006c			 
006c			 
006c			 
006c			; eof 
# End of file stackimbal.asm
006c			  
006c			;TODO macro to calc col and row offset into screen  
006c			  
006c			  
006c			  
006c			hardware_init:  
006c			  
006c				  
006c			  
006c					;ld a, 0  
006c					;ld (hardware_diag), a  
006c			  
006c					; clear all the buffers  
006c			  
006c 21 45 fc				ld hl, display_fb1  
006f 22 01 fb				ld (display_fb_active), hl  
0072			  
0072 cd aa 0d				call clear_display  
0075			  
0075 21 03 fb				ld hl, display_fb2  
0078 22 01 fb				ld (display_fb_active), hl  
007b			  
007b cd aa 0d				call clear_display  
007e			  
007e					; init primary frame buffer area  
007e 21 e6 fc				ld hl, display_fb0  
0081 22 01 fb				ld (display_fb_active), hl  
0084			  
0084 cd aa 0d				call clear_display  
0087			  
0087			  
0087 cd 1a 72				call lcd_init		; lcd hardware first as some screen functions called during key_init e.g. cursor shapes  
008a			  
008a cd b1 74			call key_init  
008d cd 56 02			call storage_init  
0090			  
0090				; setup malloc functions  
0090			  
0090				if MALLOC_1  
0090 cd 95 13				call  heap_init  
0093				endif  
0093				if MALLOC_4  
0093					call  heap_init  
0093				endif  
0093			  
0093				; init sound hardware if present  
0093			  
0093				if SOUND_ENABLE  
0093					call sound_init  
0093				endif  
0093			  
0093				; lcd test sequence  
0093					  
0093 cd cd 0d			call update_display  
0096 cd ed 0c			call delay1s  
0099 3e 2b			ld a,'+'  
009b cd af 0d			call fill_display  
009e cd cd 0d			call update_display  
00a1 cd ed 0c			call delay1s  
00a4 3e 2a			ld a,'*'  
00a6 cd af 0d			call fill_display  
00a9 cd cd 0d			call update_display  
00ac cd ed 0c			call delay1s  
00af 3e 2d			ld a,'-'  
00b1 cd af 0d			call fill_display  
00b4 cd cd 0d			call update_display  
00b7 cd ed 0c			call delay1s  
00ba			  
00ba			; boot splash screen  
00ba			if display_cols == 20	  
00ba			        ld a, display_row_1    
00ba			else  
00ba 3e 0a		        ld a, display_row_1 +10   
00bc			endif  
00bc 11 24 1b			ld de, prom_bootmsg  
00bf cd bd 0d			call str_at_display  
00c2 cd cd 0d			call update_display  
00c5			  
00c5			  
00c5 cd ed 0c			call delay1s  
00c8 cd ed 0c			call delay1s  
00cb			if display_cols == 20	  
00cb			            LD   A, display_row_3+2  
00cb			else  
00cb 3e 5c		            LD   A, display_row_3+12  
00cd			endif  
00cd 11 39 1b			ld de, prom_bootmsg1  
00d0 cd bd 0d			call str_at_display  
00d3			; display debug level  
00d3 3e 78		            LD   A, display_row_4  
00d5 11 1b 00			ld de, debuglevel  
00d8 cd bd 0d			call str_at_display  
00db			  
00db cd cd 0d			call update_display  
00de cd ed 0c			call delay1s  
00e1 cd ed 0c			call delay1s  
00e4			  
00e4			;	ld a, display_row_4+3  
00e4			;	ld de, bootmsg2  
00e4			;	call str_at_display  
00e4			;	call update_display  
00e4			;	call delay1s  
00e4			;	call delay1s  
00e4			  
00e4			; debug mark setup  
00e4			  
00e4 3e 5f		ld a, '_'  
00e6 32 a0 fd		ld (debug_mark),a  
00e9 32 a1 fd		ld (debug_mark+1),a  
00ec 32 a2 fd		ld (debug_mark+2),a  
00ef 3e 00		ld a,0  
00f1 32 a3 fd		ld (debug_mark+3),a  
00f4 32 a4 fd		ld (debug_umark),a  
00f7			  
00f7 c9					ret  
00f8			  
00f8			  
00f8			;bootmsg2:	db "Firmware v0.1",0  
00f8			  
00f8			; a 4x20 lcd  
00f8			; cout for display, low level positioning and writing functions (TODO) for hardware abstraction  
00f8			  
00f8			;if display_cols == 20  
00f8			;	include "firmware_lcd_4x20.asm"  
00f8			;endif  
00f8			  
00f8			;if display_cols == 40  
00f8			;	include "firmware_lcd_4x40.asm"  
00f8			;endif  
00f8			  
00f8			;  
00f8			; TODO use the low spare two pins on port a of display pio to bit bang a serial out video display to an esp  
00f8			; TODO abstract the bit bang video out interface for dual display  
00f8			; TODO wire video out to tx pin on rc2014 bus  
00f8			  
00f8			; must supply cin, and cin_wait for low level hardware abstraction   
00f8			; moved text_input entry points to here and leave the firmware hardware modules as abstraction layer  
00f8			; test scancode  
00f8			  
00f8			;;;;;  
00f8			;;;  
00f8			; Moved out to mini and maxi versions  
00f8			;  
00f8			; include "firmware_key_4x4.asm"  
00f8			; using existing 4 wire x 4 resistor array for input  
00f8			;include "firmware_key_4x10.asm"  
00f8			; need to mod the board for 5 rows due to resistor array  
00f8			;include "firmware_key_5x10.asm"  
00f8			  
00f8			; storage hardware interface  
00f8			  
00f8			; use microchip serial eeprom for storage  
00f8			  
00f8			  
00f8			if STORAGE_SE  
00f8				include "firmware_spi.asm"  
00f8			; my spi protocol (used by storage) 
00f8			 
00f8			; SPI pins 
00f8			 
00f8			SPI_DI: equ 7       ; chip pin 5 - port a7   pin pin 7 
00f8			SPI_DO: equ 6      ; chip pin 2 - port a6   pin 8 
00f8			SPI_SCLK: equ 5      ; chip pin 6 - port a5  - pin 9 
00f8			 
00f8			; chip pin 3 (WP), 7 (HOLD) and 8 (VCC) +5v 
00f8			; chip pin 4 gnd 
00f8			 
00f8			 
00f8			SPI_CE0: equ 0      ; chip pin 1 - port a3 - pin 15 
00f8			SPI_CE1: equ 1      ;    port a1 pin 14  
00f8			SPI_CE2: equ 2      ;    port a2 pin pin 13 
00f8			SPI_CE3: equ 3      ; port    a3 pin pin 12 
00f8			SPI_CE4: equ 4      ; port a4     pin 10 
00f8			 
00f8			; active low AND masks 
00f8			 
00f8			;SPI_CE0_MASK: equ    255-1 
00f8			;SPI_CE1_MASK: equ   255-2 
00f8			;SPI_CE2_MASK: equ   255-4 
00f8			;SPI_CE3_MASK: equ   255-8 
00f8			;SPI_CE4_MASK: equ   255-16 
00f8			SPI_CE_HIGH:  equ 255 
00f8			 
00f8			 
00f8			 
00f8			;  Perform SCLK wait pulse 
00f8			 
00f8			spi_clk: 
00f8 f5				push af 
00f9 3a 99 f9			ld a, (spi_clktime) 
00fc fe 00			cp 0 
00fe 28 03			jr z, .scskip 
0100 cd d2 0c			call aDelayInMS 
0103			.scskip: 
0103 f1				pop af 
0104 c9				ret 
0105			 
0105			 
0105			 
0105			; TODO store port id for spi device ie dev c 
0105			; TODO store pin for SO 
0105			; TODO store pin for SI 
0105			; TODO store pin for SCLK 
0105			 
0105			; 
0105			 
0105			; ensure that spi bus is in a stable state with default pins  
0105			 
0105			se_stable_spi:   
0105			 
0105				 ; set DI high, CE high , SCLK low 
0105				;ld a, SPI_DI | SPI_CE0 
0105 3e 07			ld a, SPI_DI  
0107 cd 11 02			call spi_ce_high 
010a d3 80			 out (storage_adata),a 
010c 32 96 f9			ld (spi_portbyte),a 
010f			 
010f				if DEBUG_SPI 
010f					push hl 
010f					ld l, a 
010f					DMARK "SPI" 
010f					CALLMONITOR 
010f					pop hl 
010f				endif 
010f c9				ret 
0110			 
0110			; byte to send in a 
0110			 
0110			spi_send_byte: 
0110				; save byte to send for bit mask shift out 
0110 4f			        ld c,a 
0111 3a 96 f9			ld a,(spi_portbyte) 
0114				  
0114				; clock out	each bit of the byte msb first 
0114			 
0114 06 08			ld b, 8 
0116			.ssb1: 
0116				; clear so bit  
0116 cb bf			res SPI_DI, a 
0118 cb 11			rl c 
011a				; if bit 7 is set then carry is set 
011a 30 02			jr nc, .ssb2 
011c cb ff			set SPI_DI,a 
011e			.ssb2:  ; output bit to ensure it is stable 
011e d3 80			out (storage_adata),a 
0120 00				nop 
0121				; clock bit high 
0121 cb ef			set SPI_SCLK,a 
0123 d3 80			out (storage_adata),a 
0125 00				nop 
0126 cd f8 00			call spi_clk 
0129				; then low 
0129 cb af			res SPI_SCLK,a 
012b d3 80			out (storage_adata),a 
012d 00				nop 
012e cd f8 00			call spi_clk 
0131 10 e3			djnz .ssb1 
0133			 
0133 32 96 f9			ld (spi_portbyte),a 
0136 c9				ret 
0137			 
0137			; TODO low level get byte into A on spi 
0137			 
0137			spi_read_byte:  
0137			 
0137				; save byte to send for bit mask shift out 
0137 0e 00		    ld c,0 
0139 3a 96 f9			ld a,(spi_portbyte) 
013c				  
013c				; clock out	each bit of the byte msb first 
013c			 
013c			 
013c				; clock bit high 
013c cb ef			set SPI_SCLK,a 
013e d3 80			out (storage_adata),a 
0140 00				nop 
0141 cd f8 00			call spi_clk 
0144			 
0144			    ; read DO  
0144			 
0144 cb f9		    set 7,c 
0146 db 80			in a,(storage_adata) 
0148 cb 77		    bit SPI_DO,a 
014a 20 02		    jr nz, .b7 
014c cb b9		    res 7,c 
014e			.b7: 
014e				; then low 
014e cb af			res SPI_SCLK,a 
0150 d3 80			out (storage_adata),a 
0152 00				nop 
0153 cd f8 00			call spi_clk 
0156			     
0156			 
0156				; clock bit high 
0156 cb ef			set SPI_SCLK,a 
0158 d3 80			out (storage_adata),a 
015a 00				nop 
015b cd f8 00			call spi_clk 
015e			 
015e			    ; read DO  
015e			 
015e cb f1		    set 6,c 
0160 db 80			in a,(storage_adata) 
0162 cb 77		    bit SPI_DO,a 
0164 20 02		    jr nz, .b6 
0166 cb b1		    res 6,c 
0168			.b6: 
0168				; then low 
0168 cb af			res SPI_SCLK,a 
016a d3 80			out (storage_adata),a 
016c 00				nop 
016d cd f8 00			call spi_clk 
0170			 
0170				; clock bit high 
0170 cb ef			set SPI_SCLK,a 
0172 d3 80			out (storage_adata),a 
0174 00				nop 
0175 cd f8 00			call spi_clk 
0178			 
0178			 
0178			    ; read DO  
0178			 
0178 cb e9		    set 5,c 
017a db 80			in a,(storage_adata) 
017c cb 77		    bit SPI_DO,a 
017e 20 02		    jr nz, .b5 
0180 cb a9		    res 5,c 
0182			.b5: 
0182				; then low 
0182 cb af			res SPI_SCLK,a 
0184 d3 80			out (storage_adata),a 
0186 00				nop 
0187 cd f8 00			call spi_clk 
018a				; clock bit high 
018a cb ef			set SPI_SCLK,a 
018c d3 80			out (storage_adata),a 
018e 00				nop 
018f cd f8 00			call spi_clk 
0192			 
0192			    ; read DO  
0192			 
0192 cb e1		    set 4,c 
0194 db 80			in a,(storage_adata) 
0196 cb 77		    bit SPI_DO,a 
0198 20 02		    jr nz, .b4 
019a cb a1		    res 4,c 
019c			.b4: 
019c				; then low 
019c cb af			res SPI_SCLK,a 
019e d3 80			out (storage_adata),a 
01a0 00				nop 
01a1 cd f8 00			call spi_clk 
01a4				; clock bit high 
01a4 cb ef			set SPI_SCLK,a 
01a6 d3 80			out (storage_adata),a 
01a8 00				nop 
01a9 cd f8 00			call spi_clk 
01ac			 
01ac			    ; read DO  
01ac			 
01ac cb d9		    set 3,c 
01ae db 80			in a,(storage_adata) 
01b0 cb 77		    bit SPI_DO,a 
01b2 20 02		    jr nz, .b3 
01b4 cb 99		    res 3,c 
01b6			.b3: 
01b6				; then low 
01b6 cb af			res SPI_SCLK,a 
01b8 d3 80			out (storage_adata),a 
01ba 00				nop 
01bb cd f8 00			call spi_clk 
01be				; clock bit high 
01be cb ef			set SPI_SCLK,a 
01c0 d3 80			out (storage_adata),a 
01c2 00				nop 
01c3 cd f8 00			call spi_clk 
01c6			 
01c6			    ; read DO  
01c6			 
01c6 cb d1		    set 2,c 
01c8 db 80			in a,(storage_adata) 
01ca cb 77		    bit SPI_DO,a 
01cc 20 02		    jr nz, .b2 
01ce cb 91		    res 2,c 
01d0			.b2: 
01d0				; then low 
01d0 cb af			res SPI_SCLK,a 
01d2 d3 80			out (storage_adata),a 
01d4 00				nop 
01d5 cd f8 00			call spi_clk 
01d8				; clock bit high 
01d8 cb ef			set SPI_SCLK,a 
01da d3 80			out (storage_adata),a 
01dc 00				nop 
01dd cd f8 00			call spi_clk 
01e0			 
01e0			    ; read DO  
01e0			 
01e0 cb c9		    set 1,c 
01e2 db 80			in a,(storage_adata) 
01e4 cb 77		    bit SPI_DO,a 
01e6 20 02		    jr nz, .b1 
01e8 cb 89		    res 1,c 
01ea			.b1: 
01ea				; then low 
01ea cb af			res SPI_SCLK,a 
01ec d3 80			out (storage_adata),a 
01ee 00				nop 
01ef cd f8 00			call spi_clk 
01f2				; clock bit high 
01f2 cb ef			set SPI_SCLK,a 
01f4 d3 80			out (storage_adata),a 
01f6 00				nop 
01f7 cd f8 00			call spi_clk 
01fa			 
01fa			    ; read DO  
01fa			 
01fa cb c1		    set 0,c 
01fc db 80			in a,(storage_adata) 
01fe cb 77		    bit SPI_DO,a 
0200 20 02		    jr nz, .b0 
0202 cb 81		    res 0,c 
0204			.b0: 
0204				; then low 
0204 cb af			res SPI_SCLK,a 
0206 d3 80			out (storage_adata),a 
0208 00				nop 
0209 cd f8 00			call spi_clk 
020c			 
020c			 
020c 32 96 f9			ld (spi_portbyte),a 
020f			 
020f			    ; return byte 
020f 79			    ld a,c 
0210			 
0210			 
0210 c9				ret 
0211			 
0211			 
0211			 
0211			spi_ce_high: 
0211			 
0211				if DEBUG_SPI_HARD_CE0 
0211			       set SPI_CE0,a           ; TODO pass the ce bank bit mask 
0211					ret 
0211			 
0211				endif 
0211			 
0211			 
0211 f5				push af 
0212			 
0212				; send direct ce to port b 
0212 3e ff			ld a, 255 
0214 d3 81			out (storage_bdata), a 
0216			 
0216 f1				pop af 
0217			 
0217				; for port a that shares with spi lines AND the mask 
0217			  
0217				if DEBUG_SPI 
0217					push hl 
0217					ld h, a 
0217				endif 
0217			;	ld c, SPI_CE_HIGH 
0217			;	and c 
0217 cb c7			set SPI_CE0, a 
0219 cb cf			set SPI_CE1, a 
021b cb d7			set SPI_CE2, a 
021d cb df			set SPI_CE3, a 
021f cb e7			set SPI_CE4, a 
0221			 
0221				if DEBUG_SPI 
0221					ld l, a 
0221					DMARK "CEh" 
0221					CALLMONITOR 
0221					pop hl 
0221				endif 
0221 c9				ret 
0222			 
0222			 
0222			spi_ce_low: 
0222			 
0222				if DEBUG_SPI_HARD_CE0 
0222			       res SPI_CE0,a           ; TODO pass the ce bank bit mask 
0222					ret 
0222			 
0222				endif 
0222			 
0222 c5				push bc 
0223 f5				push af 
0224			 
0224				; send direct ce to port b 
0224 3a 98 f9			ld a, (spi_cartdev) 
0227 d3 81			out (storage_bdata), a 
0229			 
0229			 
0229			 
0229				; for port a that shares with spi lines AND the mask 
0229			 
0229 3a 95 f9			ld a, (spi_device)  
022c 4f				ld c, a 
022d			 
022d f1				pop af 
022e			 
022e				; detect CEx 
022e			 
022e				if DEBUG_SPI 
022e					push hl 
022e					ld h, a 
022e				endif 
022e			 
022e cb 41			bit SPI_CE0, c 
0230 20 04			jr nz, .cel1 
0232 cb 87			res SPI_CE0, a 
0234 18 1e			jr .celn 
0236			.cel1: 
0236 cb 49			bit SPI_CE1, c 
0238 20 04			jr nz, .cel2 
023a cb 8f			res SPI_CE1, a 
023c 18 16			jr .celn 
023e			.cel2: 
023e cb 51			bit SPI_CE2, c 
0240 20 04			jr nz, .cel3 
0242 cb 97			res SPI_CE2, a 
0244 18 0e			jr .celn 
0246			.cel3: 
0246 cb 59			bit SPI_CE3, c 
0248 20 04			jr nz, .cel4 
024a cb 9f			res SPI_CE3, a 
024c 18 06			jr .celn 
024e			.cel4: 
024e cb 61			bit SPI_CE4, c 
0250 20 02			jr nz, .celn 
0252 cb a7			res SPI_CE4, a 
0254			.celn: 
0254			 
0254			 
0254			 
0254			;	add c 
0254			 
0254				if DEBUG_SPI 
0254					ld l, a 
0254					DMARK "CEl" 
0254					CALLMONITOR 
0254					pop hl 
0254				endif 
0254 c1				pop bc 
0255 c9				ret 
0256			 
0256			 
0256			 
0256			; eof 
0256			 
0256			 
0256			 
0256			 
0256			 
# End of file firmware_spi.asm
0256				include "firmware_seeprom.asm"  
0256			; 
0256			; persisent storage interface via microchip serial eeprom 
0256			 
0256			; port a pio 2 
0256			; pa 7 - si 
0256			; pa 6 - sclk  
0256			; pa 5 - so 
0256			; pa 4 - cs 
0256			; pa 3 - cs 
0256			; pa 2 - cs 
0256			; pa 1 - cs 
0256			; pa 0 - cs 
0256			; 
0256			; TODO get block 
0256			; TODO save block 
0256			; TODO load file 
0256			; TODO save file 
0256			; TODO get dir  
0256			 
0256			;  
0256			storage_adata: equ Device_C    ; device c port a - onboard storage 
0256			storage_actl: equ Device_C+2     ; device c port a 
0256			storage_bdata: equ Device_C+1    ; device c port b - ext storage cart 
0256			storage_bctl: equ Device_C+3     ; device c port b 
0256			 
0256			 
0256			; TODO move these to hardware driver file 
0256			 
0256			;STORE_BLOCK_PHY:   equ 64    ; physical block size on storage   64byte on 256k eeprom 
0256			;STORE_DEVICE_MAXBLOCKS:  equ  512 ; how many blocks are there on this storage device 
0256			; storage bank file system format 
0256			; 
0256			; first page of bank: 
0256			; 	addr 0 - status check 
0256			;       addr 1 - write protect flag 
0256			;       addr 2 - zero if all data is held on this device. >0 - next device number (not used right now) 
0256			;       addr 3 - last file id (to save on scanning for spare file id). or could have bit mask of file ids in use????  
0256			;         TODO see if scanning whole of for available next file id is fast enough 
0256			;	addr 4 > zero term string of bank label 
0256			; 
0256			;        
0256			;  
0256			; first page of any file: 
0256			;      byte 0 - file id  
0256			;      byte 1-17 - fixed file name  
0256			;      byte 18-end of page - extra meta data tba (date? description? keywords?) 
0256			; 
0256			; other pages of any file: 
0256			;      byte 0 - file id 
0256			;      byte 1> - file data 
0256			; 
0256			; TODO depending on how long it takes to load a file in if scanning the whole bank for the file id, could speed it up by having last file page flag??? high bit? that would max 127 files 
0256			;  
0256			; TODO need a bank format which places a 0 in each of the first byte of every page and updates the meta in page 0 
0256			 
0256			 
0256			;storage_so_bit: 5 
0256			;storage_si_bit: 7 
0256			;storage_sclk_bit: 6 
0256			  
0256			 
0256			; init storage pio 
0256			 
0256			storage_init: 
0256			 
0256			 
0256					; set default SPI clk pulse time as disabled 
0256			 
0256 3e 00				ld a, 0 
0258 32 99 f9				ld (spi_clktime), a 
025b			 
025b					; init hardware 
025b			 
025b 3e cf		            LD   A, 11001111b 
025d d3 82		            OUT  (storage_actl), A  ;Port A = PIO 'control' mode 
025f 3e 00		            LD   A, 00000000b 
0261 cb f7			set SPI_DO,a 
0263			;            LD   A, SPI_DO      ; only one input line  the rest are outputs 
0263 d3 82		            OUT  (storage_actl),A   ;Port A = all lines are outputs 
0265			 
0265 3e cf		            LD   A, 11001111b 
0267 d3 83		            OUT  (storage_bctl), A  ;Port A = PIO 'control' mode 
0269 3e 00		            LD   A, 00000000b 
026b d3 83		            OUT  (storage_bctl),A   ;Port A = all lines are outputs 
026d			 
026d				; set all external spi devices off  
026d 3e ff			ld a, 255 
026f 32 95 f9			ld (spi_device), a 
0272 32 98 f9			ld (spi_cartdev), a 
0275			 
0275					; ensure the spi bus is in a default stable state 
0275 cd 05 01				call se_stable_spi 
0278			 
0278			; TODO scan spi bus and gather which storage banks are present 
0278			 
0278			; populate store_bank_active  
0278			; for each ce line activate and attempt to write first byte of bank and read back 
0278			; if zero is returned then bank is empty 
0278			;   
0278			; 
0278			 
0278					; init file extent cache to save on slow reads 
0278			 
0278			;	ld hl, store_filecache 
0278			;	ld de, 0 
0278			;	ld hl,(de)	 
0278			 
0278			 
0278 c9			    ret 
0279			 
0279			store_read_ins: equ 000000011b   ; Read data from memory array beginning at selected address 
0279			store_write_ins: equ 000000010b  ;  Write data to memory array beginning at selected address 
0279			store_wren_ins: equ 000000110b   ;  Set the write enable latch (enable write operations) 
0279			 
0279			; INSTRUCTION SET 
0279			; READ 0000 0011 Read data from memory array beginning at selected address 
0279			; WRITE 0000 0010 Write data to memory array beginning at selected address 
0279			; WREN 0000 0110 Set the write enable latch (enable write operations) 
0279			; WRDI 0000 0100 Reset the write enable latch (disable write operations) 
0279			; RDSR 0000 0101 Read STATUS register 
0279			; WRSR 0000 0001 Write STATUS register 
0279			; PE 0100 0010 Page Erase – erase one page in memory array 
0279			; SE 1101 1000 Sector Erase – erase one sector in memory array 
0279			; CE 1100 0111 Chip Erase – erase all sectors in memory array 
0279			; RDID 1010 1011 Release from Deep power-down and read electronic signature 
0279			 
0279			; TODO send byte steam for page without setting the address for every single byte 
0279			; TODO read byte  
0279			 
0279			; byte in a 
0279			; address in hl  
0279			se_writebyte: 
0279			        
0279			    ;   ld c, a 
0279 f5			        push af 
027a e5			        push hl 
027b			 
027b			    ; initi write mode 
027b			    ; 
027b			    ;CS low 
027b			 
027b 3a 96 f9		       ld a,(spi_portbyte) 
027e cd 22 02			call spi_ce_low 
0281			       ;res SPI_CE0,a           ; TODO pass the ce bank bit mask 
0281 d3 80		       out (storage_adata),a 
0283 32 96 f9		       ld (spi_portbyte), a 
0286			 
0286			    ;clock out wren instruction 
0286			 
0286 3e 06		    ld a, store_wren_ins 
0288 cd 10 01		    call spi_send_byte  
028b			 
028b			    ;cs high to enable write latch 
028b			 
028b 3a 96 f9		       ld a,(spi_portbyte) 
028e cd 11 02			call spi_ce_high 
0291			;       set SPI_CE0,a           ; TODO pass the ce bank bit mask 
0291 d3 80		       out (storage_adata),a 
0293 32 96 f9		       ld (spi_portbyte), a 
0296			 
0296 00				nop 
0297			    ; 
0297			    ; intial write data 
0297			    ; 
0297			    ; cs low 
0297			     
0297 3a 96 f9		       ld a,(spi_portbyte) 
029a cd 22 02			call spi_ce_low 
029d			       ;res SPI_CE0,a           ; TODO pass the ce bank bit mask 
029d d3 80		       out (storage_adata),a 
029f 32 96 f9		       ld (spi_portbyte), a 
02a2			 
02a2			    ; clock out write instruction 
02a2			     
02a2 3e 02		    ld a, store_write_ins  
02a4 cd 10 01		    call spi_send_byte  
02a7			 
02a7			    ; clock out address (depending on address size) 
02a7			     
02a7 e1			    pop hl 
02a8 7c			    ld a,h    ; address out msb first 
02a9 cd 10 01		    call spi_send_byte  
02ac 7d			    ld a,l 
02ad cd 10 01		    call spi_send_byte  
02b0			 
02b0			    ; clock out byte(s) for page 
02b0			 
02b0 f1			    pop af 
02b1 cd 10 01		    call spi_send_byte  
02b4			 
02b4			    ; end write with ce high 
02b4 3a 96 f9		       ld a,(spi_portbyte) 
02b7			;       set SPI_CE0,a           ; TODO pass the ce bank bit mask - perhaps have a call that sets it 
02b7 cd 11 02			call spi_ce_high 
02ba d3 80		       out (storage_adata),a 
02bc 32 96 f9		       ld (spi_portbyte), a 
02bf			 
02bf				; pause for internal write cycle 
02bf 3e 0a			ld a, 10 
02c1 cd d2 0c			call aDelayInMS 
02c4 c9			    ret 
02c5			 
02c5			; buffer to write in de 
02c5			; address in hl  
02c5			se_writepage: 
02c5			        
02c5			    ;   ld c, a 
02c5 d5				push de 
02c6 e5			        push hl 
02c7			 
02c7			    ; initi write mode 
02c7			    ; 
02c7			    ;CS low 
02c7			 
02c7 3a 96 f9		       ld a,(spi_portbyte) 
02ca cd 22 02			call spi_ce_low 
02cd			       ;res SPI_CE0,a           ; TODO pass the ce bank bit mask 
02cd d3 80		       out (storage_adata),a 
02cf 32 96 f9		       ld (spi_portbyte), a 
02d2			 
02d2			    ;clock out wren instruction 
02d2			 
02d2 3e 06		    ld a, store_wren_ins 
02d4 cd 10 01		    call spi_send_byte  
02d7			 
02d7			    ;cs high to enable write latch 
02d7			 
02d7 3a 96 f9		       ld a,(spi_portbyte) 
02da cd 11 02			call spi_ce_high 
02dd			       ;set SPI_CE0,a           ; TODO pass the ce bank bit mask 
02dd d3 80		       out (storage_adata),a 
02df 32 96 f9		       ld (spi_portbyte), a 
02e2			 
02e2 00				nop 
02e3			    ; 
02e3			    ; intial write data 
02e3			    ; 
02e3			    ; cs low 
02e3			     
02e3 3a 96 f9		       ld a,(spi_portbyte) 
02e6			       ;res SPI_CE0,a           ; TODO pass the ce bank bit mask 
02e6 cd 22 02			call spi_ce_low 
02e9 d3 80		       out (storage_adata),a 
02eb 32 96 f9		       ld (spi_portbyte), a 
02ee			 
02ee			    ; clock out write instruction 
02ee			     
02ee 3e 02		    ld a, store_write_ins  
02f0 cd 10 01		    call spi_send_byte  
02f3			 
02f3			    ; clock out address (depending on address size) 
02f3			     
02f3 e1			    pop hl 
02f4 7c			    ld a,h    ; address out msb first 
02f5 cd 10 01		    call spi_send_byte  
02f8 7d			    ld a,l 
02f9 cd 10 01		    call spi_send_byte  
02fc			 
02fc			    ; clock out byte(s) for page 
02fc			 
02fc e1				pop hl 
02fd 06 40			ld b, STORE_BLOCK_PHY 
02ff			.bytewrite: 
02ff			 
02ff 7e				ld a,(hl) 
0300 e5			    push hl 
0301 c5				push bc 
0302 cd 10 01		    call spi_send_byte  
0305 c1				pop bc 
0306 e1				pop hl 
0307			 
0307			    ; end write with ce high 
0307 3a 96 f9		       ld a,(spi_portbyte) 
030a cd 11 02			call spi_ce_high 
030d			;       set SPI_CE0,a           ; TODO pass the ce bank bit mask - perhaps have a call that sets it 
030d d3 80		       out (storage_adata),a 
030f 32 96 f9		       ld (spi_portbyte), a 
0312			 
0312 23				inc hl 
0313 10 ea			djnz .bytewrite 
0315			 
0315				; pause for internal write cycle 
0315 3e 64			ld a, 100 
0317 cd d2 0c			call aDelayInMS 
031a c9			    ret 
031b			; returns byte in a 
031b			; address in hl  
031b			se_readbyte: 
031b d5				push de 
031c c5				push bc 
031d			 
031d			    ;   ld c, a 
031d e5			        push hl 
031e			 
031e			    ; initi write mode 
031e			    ; 
031e			    ;CS low 
031e			 
031e 3a 96 f9		       ld a,(spi_portbyte) 
0321 cd 22 02			call spi_ce_low 
0324			       ;res SPI_CE0,a           ; TODO pass the ce bank bit mask 
0324 d3 80		       out (storage_adata),a 
0326 32 96 f9		       ld (spi_portbyte), a 
0329			 
0329			    ;clock out wren instruction 
0329			 
0329 3e 03		    ld a, store_read_ins 
032b cd 10 01		    call spi_send_byte  
032e			 
032e			 
032e			    ; clock out address (depending on address size) 
032e			     
032e e1			    pop hl 
032f 7c			    ld a,h    ; address out msb first 
0330 cd 10 01		    call spi_send_byte  
0333 7d			    ld a,l 
0334 cd 10 01		    call spi_send_byte  
0337			 
0337			    ; clock in byte(s) for page 
0337			 
0337 cd 37 01		    call spi_read_byte  
033a f5				push af 
033b			 
033b			    ; end write with ce high 
033b 3a 96 f9		       ld a,(spi_portbyte) 
033e			;       set SPI_CE0,a           ; TODO pass the ce bank bit mask - perhaps have a call that sets it 
033e cd 11 02			call spi_ce_high 
0341 d3 80		       out (storage_adata),a 
0343 32 96 f9		       ld (spi_portbyte), a 
0346			 
0346 f1				pop af 
0347			 
0347 c1				pop bc 
0348 d1				pop de 
0349			 
0349 c9			    ret 
034a			 
034a			if DEBUG_STORESE 
034a			 
034a			storageput:  
034a			 
034a			; get address (so long as it is in first page due to reload otherwise use prom programmer to see if) 
034a			 
034a 21 f8 f0			ld hl,scratch+2 
034d cd 9d 12			call get_word_hl 
0350			 
0350				; stuff it here for the moment as it will be overwritten later anyway 
0350			 
0350 22 19 f4			ld (os_cur_ptr),hl	 
0353			 
0353			 
0353			; get pointer to start of string 
0353			 
0353 21 fd f0			ld hl, scratch+7 
0356			 
0356			; loop writing char of string to eeprom 
0356			 
0356 7e			.writestr:	ld a,(hl) 
0357 fe 00				cp 0 
0359 28 12				jr z, .wsdone		; done writing 
035b e5					push hl 
035c 2a 19 f4				ld hl,(os_cur_ptr) 
035f cd 79 02				call se_writebyte 
0362			 
0362 2a 19 f4				ld hl,(os_cur_ptr)	 ; save next eeprom address 
0365 23					inc hl 
0366 22 19 f4				ld (os_cur_ptr),hl 
0369			 
0369					; restore string pointer and get next char 
0369			 
0369 e1					pop hl 
036a 23					inc hl 
036b 18 e9				jr .writestr 
036d			 
036d			 
036d			 
036d			.wsdone: 
036d			 
036d			 
036d			; when done load first page into a buffer  
036d			 
036d 21 00 80				ld hl,08000h		; start in ram 
0370 22 19 f4				ld (os_cur_ptr),hl 
0373 21 00 00				ld hl, 0		 ; start of page 
0376 22 1e f1				ld (scratch+40),hl	; hang on to it 
0379			 
0379 06 80				ld b, 128		; actually get more then one page 
037b c5			.wsload:	push bc 
037c 2a 1e f1				ld hl,(scratch+40) 
037f e5					push hl 
0380 cd 1b 03				call se_readbyte 
0383			 
0383					; a now as the byte 
0383			 
0383 2a 19 f4				ld hl,(os_cur_ptr) 
0386 77					ld (hl),a 
0387					; inc next buffer area 
0387 23					inc hl 
0388 22 19 f4				ld (os_cur_ptr),hl 
038b			 
038b					; get eeprom position, inc and save for next round 
038b e1					pop hl		 
038c 23					inc hl 
038d 22 1e f1				ld (scratch+40),hl 
0390 c1					pop bc 
0391 10 e8				djnz .wsload 
0393			 
0393			; set 'd' pointer to start of buffer 
0393			 
0393 21 00 80				ld hl,08000h 
0396 22 19 f4				ld (os_cur_ptr),hl 
0399			 
0399			 
0399 c9			ret 
039a			 
039a			 
039a c9			storageread: ret 
039b			 
039b			 
039b			 
039b			 
039b			 
039b			 
039b			endif 
039b			 
039b			 
039b			 
# End of file firmware_seeprom.asm
039b			else  
039b			   ; create some stubs for the labels  
039b			se_readbyte: ret  
039b			se_writebyte: ret  
039b			storage_init: ret  
039b			  
039b			endif  
039b			  
039b			; use cf card for storage - throwing timeout errors. Hardware or software?????  
039b			;include "firmware_cf.asm"  
039b			  
039b			; load up high level storage hardward abstractions  
039b			include "firmware_storage.asm"  
039b			 
039b			; persisent storage hardware abstraction layer  
039b			 
039b			 
039b			 
039b			; Block 0 on storage is a config state 
039b			 
039b			 
039b			 
039b			; TODO add read phy block and write phy block functions 
039b			; TODO add presence check (i.e. read write byte 0 of block 0 for eeprom) 
039b			 
039b			; Abstraction layer  
039b			 
039b			; Logocial block size is same size as physical size - using tape concept 
039b			 
039b			;STORE_BLOCK_PHY2LOG: equ (STORE_BLOCK_LOG/STORE_BLOCK_PHY)       ; How many physical blocks make up a logical block 
039b			;STORE_BLOCK_MAX: equ (STORE_BLOCK_PHY*STORE_DEVICE_MAXBLOCKS)/255    ; Max number of logical blocks on the device 
039b			 
039b			 
039b			 
039b			; Filesystem layout (Logical layout) 
039b			; 
039b			; Block 0 - Bank config  
039b			; 
039b			;      Byte - 0 file id counter 
039b			;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
039b			;      Byte - 3-20 zero terminated bank label 
039b			; 
039b			; Block 1 > File storage 
039b			; 
039b			;      Byte 0 file id    - block 0 file details 
039b			;      Byte 1 block id - block 0 is file  
039b			;            Byte 2-15 - File name 
039b			; 
039b			;       - to end of block data 
039b			; 
039b			 
039b			; Get ID for the file named in pointer held HL 
039b			; Returns ID in HL = 255 if no file found 
039b			 
039b			storage_getid: 
039b			 
039b 22 a8 f9			ld (store_tmp1), hl 
039e			 
039e				if DEBUG_STORESE 
039e					DMARK "SGI" 
039e f5				push af  
039f 3a b3 03			ld a, (.dmark)  
03a2 32 a0 fd			ld (debug_mark),a  
03a5 3a b4 03			ld a, (.dmark+1)  
03a8 32 a1 fd			ld (debug_mark+1),a  
03ab 3a b5 03			ld a, (.dmark+2)  
03ae 32 a2 fd			ld (debug_mark+2),a  
03b1 18 03			jr .pastdmark  
03b3 ..			.dmark: db "SGI"  
03b6 f1			.pastdmark: pop af  
03b7			endm  
# End of macro DMARK
03b7					CALLMONITOR 
03b7 cd aa fd			call debug_vector  
03ba				endm  
# End of macro CALLMONITOR
03ba				endif 
03ba				; get block 0 and set counter for number of files to scan 
03ba			 
03ba cd 25 05			call storage_get_block_0 
03bd			 
03bd 3a af f9			ld a, (store_page) 
03c0 47				ld b, a 
03c1			 
03c1				; get extent 0 of each file id 
03c1			 
03c1				if DEBUG_STORESE 
03c1					DMARK "SGc" 
03c1 f5				push af  
03c2 3a d6 03			ld a, (.dmark)  
03c5 32 a0 fd			ld (debug_mark),a  
03c8 3a d7 03			ld a, (.dmark+1)  
03cb 32 a1 fd			ld (debug_mark+1),a  
03ce 3a d8 03			ld a, (.dmark+2)  
03d1 32 a2 fd			ld (debug_mark+2),a  
03d4 18 03			jr .pastdmark  
03d6 ..			.dmark: db "SGc"  
03d9 f1			.pastdmark: pop af  
03da			endm  
# End of macro DMARK
03da					CALLMONITOR 
03da cd aa fd			call debug_vector  
03dd				endm  
# End of macro CALLMONITOR
03dd				endif 
03dd 60			.getloop:	ld h, b 
03de 2e 00				ld l, 0 
03e0 c5					push bc 
03e1			 
03e1 11 af f9				ld de, store_page 
03e4				if DEBUG_STORESE 
03e4					DMARK "SGr" 
03e4 f5				push af  
03e5 3a f9 03			ld a, (.dmark)  
03e8 32 a0 fd			ld (debug_mark),a  
03eb 3a fa 03			ld a, (.dmark+1)  
03ee 32 a1 fd			ld (debug_mark+1),a  
03f1 3a fb 03			ld a, (.dmark+2)  
03f4 32 a2 fd			ld (debug_mark+2),a  
03f7 18 03			jr .pastdmark  
03f9 ..			.dmark: db "SGr"  
03fc f1			.pastdmark: pop af  
03fd			endm  
# End of macro DMARK
03fd					CALLMONITOR 
03fd cd aa fd			call debug_vector  
0400				endm  
# End of macro CALLMONITOR
0400				endif 
0400 cd cd 09				call storage_read 
0403 cd 07 10				call ishlzero 
0406 28 2d				jr z, .gap 
0408					 
0408					; have a file name read. Is it one we want. 
0408			 
0408 2a a8 f9				ld hl, (store_tmp1) 
040b 11 b2 f9				ld de, store_page+3   ; file name 
040e			 
040e				if DEBUG_STORESE 
040e					DMARK "SGc" 
040e f5				push af  
040f 3a 23 04			ld a, (.dmark)  
0412 32 a0 fd			ld (debug_mark),a  
0415 3a 24 04			ld a, (.dmark+1)  
0418 32 a1 fd			ld (debug_mark+1),a  
041b 3a 25 04			ld a, (.dmark+2)  
041e 32 a2 fd			ld (debug_mark+2),a  
0421 18 03			jr .pastdmark  
0423 ..			.dmark: db "SGc"  
0426 f1			.pastdmark: pop af  
0427			endm  
# End of macro DMARK
0427					CALLMONITOR 
0427 cd aa fd			call debug_vector  
042a				endm  
# End of macro CALLMONITOR
042a				endif 
042a cd 7c 13				call strcmp 
042d 20 06				jr nz, .gap   ; not this one 
042f			 
042f c1				        pop bc 
0430			 
0430 26 00				ld h, 0 
0432 68					ld l, b 
0433 18 22				jr .getdone 
0435						 
0435			 
0435			 
0435			 
0435			.gap: 
0435				if DEBUG_STORESE 
0435					DMARK "SGg" 
0435 f5				push af  
0436 3a 4a 04			ld a, (.dmark)  
0439 32 a0 fd			ld (debug_mark),a  
043c 3a 4b 04			ld a, (.dmark+1)  
043f 32 a1 fd			ld (debug_mark+1),a  
0442 3a 4c 04			ld a, (.dmark+2)  
0445 32 a2 fd			ld (debug_mark+2),a  
0448 18 03			jr .pastdmark  
044a ..			.dmark: db "SGg"  
044d f1			.pastdmark: pop af  
044e			endm  
# End of macro DMARK
044e					CALLMONITOR 
044e cd aa fd			call debug_vector  
0451				endm  
# End of macro CALLMONITOR
0451				endif 
0451			 
0451 c1					pop bc 
0452 10 89				djnz .getloop 
0454 21 ff 00				ld hl, 255 
0457			.getdone: 
0457			 
0457				if DEBUG_STORESE 
0457					DMARK "SGe" 
0457 f5				push af  
0458 3a 6c 04			ld a, (.dmark)  
045b 32 a0 fd			ld (debug_mark),a  
045e 3a 6d 04			ld a, (.dmark+1)  
0461 32 a1 fd			ld (debug_mark+1),a  
0464 3a 6e 04			ld a, (.dmark+2)  
0467 32 a2 fd			ld (debug_mark+2),a  
046a 18 03			jr .pastdmark  
046c ..			.dmark: db "SGe"  
046f f1			.pastdmark: pop af  
0470			endm  
# End of macro DMARK
0470					CALLMONITOR 
0470 cd aa fd			call debug_vector  
0473				endm  
# End of macro CALLMONITOR
0473				endif 
0473			 
0473 c9				ret 
0474			 
0474			 
0474			 
0474			 
0474			 
0474			 
0474			 
0474			 
0474			; Read Block 
0474			; ---------- 
0474			; 
0474			; With current bank 
0474			;  
0474			; Get block number to read 
0474			; Load physical blocks starting at start block into buffer 
0474			 
0474			; de points to buffer to use 
0474			; hl holds logical block number  
0474			 
0474			storage_read_block: 
0474			 
0474				; TODO bank selection 
0474			 
0474				; for each of the physical blocks read it into the buffer 
0474 06 40			ld b, STORE_BLOCK_PHY 
0476			 
0476				if DEBUG_STORESE 
0476 d5					push de 
0477				endif 
0477				 
0477			.rl1:    
0477			 
0477				; read physical block at hl into de 
0477			        ; increment hl and de to next read position on exit 
0477			 
0477 e5				push hl 
0478 d5				push de	 
0479 c5				push bc 
047a			;	if DEBUG_STORESE 
047a			;		push af 
047a			;		ld a, 'R' 
047a			;		ld (debug_mark),a 
047a			;		pop af 
047a			;		CALLMONITOR 
047a			;	endif 
047a cd 1b 03			call se_readbyte 
047d			;	if DEBUG_STORESE 
047d			;		ld a,(spi_portbyte) 
047d			;		ld l, a 
047d			;		push af 
047d			;		ld a, '1' 
047d			;		ld (debug_mark),a 
047d			;		pop af 
047d			;		CALLMONITOR 
047d			;	endif 
047d c1				pop bc 
047e d1				pop de 
047f e1				pop hl 
0480 12				ld (de),a 
0481 23				inc hl 
0482 13				inc de 
0483			 
0483			;	if DEBUG_STORESE 
0483			;		push af 
0483			;		ld a, 'r' 
0483			;		ld (debug_mark),a 
0483			;		pop af 
0483			;		CALLMONITOR 
0483			;	endif 
0483			 
0483 10 f2			djnz .rl1 
0485			 
0485				if DEBUG_STORESE 
0485					DMARK "SRB" 
0485 f5				push af  
0486 3a 9a 04			ld a, (.dmark)  
0489 32 a0 fd			ld (debug_mark),a  
048c 3a 9b 04			ld a, (.dmark+1)  
048f 32 a1 fd			ld (debug_mark+1),a  
0492 3a 9c 04			ld a, (.dmark+2)  
0495 32 a2 fd			ld (debug_mark+2),a  
0498 18 03			jr .pastdmark  
049a ..			.dmark: db "SRB"  
049d f1			.pastdmark: pop af  
049e			endm  
# End of macro DMARK
049e d1					pop de 
049f			; 
049f			;		push af 
049f			;		ld a, 'R' 
049f			;		ld (debug_mark),a 
049f			;		pop af 
049f					CALLMONITOR 
049f cd aa fd			call debug_vector  
04a2				endm  
# End of macro CALLMONITOR
04a2				endif 
04a2 c9				ret	 
04a3				 
04a3			 
04a3			; File Size 
04a3			; --------- 
04a3			; 
04a3			;   hl file id 
04a3			; 
04a3			;  returns in hl the number of blocks 
04a3			 
04a3			storage_file_size: 
04a3 5d				ld e, l 
04a4 16 00			ld d, 0 
04a6 21 40 00			ld hl, STORE_BLOCK_PHY 
04a9					if DEBUG_FORTH_WORDS 
04a9						DMARK "SIZ" 
04a9 f5				push af  
04aa 3a be 04			ld a, (.dmark)  
04ad 32 a0 fd			ld (debug_mark),a  
04b0 3a bf 04			ld a, (.dmark+1)  
04b3 32 a1 fd			ld (debug_mark+1),a  
04b6 3a c0 04			ld a, (.dmark+2)  
04b9 32 a2 fd			ld (debug_mark+2),a  
04bc 18 03			jr .pastdmark  
04be ..			.dmark: db "SIZ"  
04c1 f1			.pastdmark: pop af  
04c2			endm  
# End of macro DMARK
04c2						CALLMONITOR 
04c2 cd aa fd			call debug_vector  
04c5				endm  
# End of macro CALLMONITOR
04c5					endif 
04c5 cd a7 07			call storage_findnextid 
04c8			 
04c8 cd 07 10			call ishlzero 
04cb			;	ld a, l 
04cb			;	add h 
04cb			;	cp 0 
04cb c8				ret z			; block not found so EOF 
04cc			 
04cc 11 af f9			ld de, store_page 
04cf cd 74 04			call storage_read_block 
04d2			 
04d2 3a b1 f9			ld a, (store_page+2)	 ; get extent count 
04d5 6f				ld l, a 
04d6 26 00			ld h, 0 
04d8 c9			 	ret 
04d9			 
04d9			 
04d9			; Write Block 
04d9			; ----------- 
04d9			; 
04d9			; With current bank 
04d9			;  
04d9			; Get block number to write 
04d9			; Write physical blocks starting at start block from buffer 
04d9			  
04d9			storage_write_block: 
04d9				; TODO bank selection 
04d9			 
04d9				; for each of the physical blocks read it into the buffer 
04d9 06 40			ld b, STORE_BLOCK_PHY 
04db			 
04db				if DEBUG_STORESE 
04db					DMARK "SWB" 
04db f5				push af  
04dc 3a f0 04			ld a, (.dmark)  
04df 32 a0 fd			ld (debug_mark),a  
04e2 3a f1 04			ld a, (.dmark+1)  
04e5 32 a1 fd			ld (debug_mark+1),a  
04e8 3a f2 04			ld a, (.dmark+2)  
04eb 32 a2 fd			ld (debug_mark+2),a  
04ee 18 03			jr .pastdmark  
04f0 ..			.dmark: db "SWB"  
04f3 f1			.pastdmark: pop af  
04f4			endm  
# End of macro DMARK
04f4			 
04f4					;push af 
04f4					;ld a, 'W' 
04f4					;ld (debug_mark),a 
04f4					;pop af 
04f4					CALLMONITOR 
04f4 cd aa fd			call debug_vector  
04f7				endm  
# End of macro CALLMONITOR
04f7				endif 
04f7			 
04f7			; might not be working 
04f7			;	call se_writepage 
04f7			 
04f7			;	ret 
04f7			; 
04f7			 
04f7			 
04f7			 
04f7			.wl1:    
04f7			 
04f7				; read physical block at hl into de 
04f7			        ; increment hl and de to next read position on exit 
04f7			 
04f7 e5				push hl 
04f8 d5				push de	 
04f9 c5				push bc 
04fa 1a				ld a,(de) 
04fb				;if DEBUG_STORESE 
04fb			;		push af 
04fb			;		ld a, 'W' 
04fb			;		ld (debug_mark),a 
04fb			;		pop af 
04fb			;		CALLMONITOR 
04fb			;	endif 
04fb cd 79 02			call se_writebyte 
04fe			;	call delay250ms 
04fe 00				nop 
04ff 00				nop 
0500 00				nop 
0501			;	if DEBUG_STORESE 
0501			;		push af 
0501			;		ld a, 'w' 
0501			;		ld (debug_mark),a 
0501			;		pop af 
0501			;		CALLMONITOR 
0501			;	endif 
0501 c1				pop bc 
0502 d1				pop de 
0503 e1				pop hl 
0504 23				inc hl 
0505 13				inc de 
0506			 
0506			 
0506 10 ef			djnz .wl1 
0508			 
0508				if DEBUG_STORESE 
0508					DMARK "SW2" 
0508 f5				push af  
0509 3a 1d 05			ld a, (.dmark)  
050c 32 a0 fd			ld (debug_mark),a  
050f 3a 1e 05			ld a, (.dmark+1)  
0512 32 a1 fd			ld (debug_mark+1),a  
0515 3a 1f 05			ld a, (.dmark+2)  
0518 32 a2 fd			ld (debug_mark+2),a  
051b 18 03			jr .pastdmark  
051d ..			.dmark: db "SW2"  
0520 f1			.pastdmark: pop af  
0521			endm  
# End of macro DMARK
0521			 
0521					;push af 
0521					;ld a, 'W' 
0521					;ld (debug_mark),a 
0521					;pop af 
0521					CALLMONITOR 
0521 cd aa fd			call debug_vector  
0524				endm  
# End of macro CALLMONITOR
0524				endif 
0524 c9				ret	 
0525			 
0525			; Init bank 
0525			; --------- 
0525			; 
0525			; With current bank 
0525			; 
0525			; Setup block 0 config 
0525			;     Set 0 file id counter 
0525			;     Set formatted byte pattern 
0525			;     Zero out bank label 
0525			;      
0525			; For every logical block write 0-1 byte as null 
0525			 
0525			storage_get_block_0: 
0525			 
0525				; TODO check presence 
0525			 
0525				; get block 0 config 
0525			 
0525 21 00 00			ld hl, 0 
0528 11 af f9			ld de, store_page 
052b cd 74 04			call storage_read_block 
052e			 
052e				if DEBUG_STORESE 
052e					DMARK "SB0" 
052e f5				push af  
052f 3a 43 05			ld a, (.dmark)  
0532 32 a0 fd			ld (debug_mark),a  
0535 3a 44 05			ld a, (.dmark+1)  
0538 32 a1 fd			ld (debug_mark+1),a  
053b 3a 45 05			ld a, (.dmark+2)  
053e 32 a2 fd			ld (debug_mark+2),a  
0541 18 03			jr .pastdmark  
0543 ..			.dmark: db "SB0"  
0546 f1			.pastdmark: pop af  
0547			endm  
# End of macro DMARK
0547 11 af f9				ld de, store_page 
054a			;		push af 
054a			;		ld a, 'i' 
054a			;		ld (debug_mark),a 
054a			;		pop af 
054a					CALLMONITOR 
054a cd aa fd			call debug_vector  
054d				endm  
# End of macro CALLMONITOR
054d				endif 
054d			 
054d				; is this area formatted? 
054d			 
054d			;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
054d 2a b0 f9			ld hl, (store_page+1) 
0550 3e 80			ld a,0x80 
0552 bd				cp l 
0553 20 22			jr nz, .ininotformatted 
0555				; do a double check 
0555 3e 27			ld a, 0x27 
0557 bc				cp h 
0558 20 1d			jr nz, .ininotformatted 
055a			 
055a				; formatted then 
055a			 
055a				if DEBUG_STORESE 
055a					DMARK "SB1" 
055a f5				push af  
055b 3a 6f 05			ld a, (.dmark)  
055e 32 a0 fd			ld (debug_mark),a  
0561 3a 70 05			ld a, (.dmark+1)  
0564 32 a1 fd			ld (debug_mark+1),a  
0567 3a 71 05			ld a, (.dmark+2)  
056a 32 a2 fd			ld (debug_mark+2),a  
056d 18 03			jr .pastdmark  
056f ..			.dmark: db "SB1"  
0572 f1			.pastdmark: pop af  
0573			endm  
# End of macro DMARK
0573					;push af 
0573					;ld a, 'I' 
0573					;ld (debug_mark),a 
0573					;pop af 
0573					CALLMONITOR 
0573 cd aa fd			call debug_vector  
0576				endm  
# End of macro CALLMONITOR
0576				endif 
0576 c9				ret 
0577			 
0577			.ininotformatted: 
0577				; bank not formatted so poke various bits to make sure 
0577			 
0577				if DEBUG_STORESE 
0577					DMARK "SB2" 
0577 f5				push af  
0578 3a 8c 05			ld a, (.dmark)  
057b 32 a0 fd			ld (debug_mark),a  
057e 3a 8d 05			ld a, (.dmark+1)  
0581 32 a1 fd			ld (debug_mark+1),a  
0584 3a 8e 05			ld a, (.dmark+2)  
0587 32 a2 fd			ld (debug_mark+2),a  
058a 18 03			jr .pastdmark  
058c ..			.dmark: db "SB2"  
058f f1			.pastdmark: pop af  
0590			endm  
# End of macro DMARK
0590					;push af 
0590					;ld a, 'f' 
0590					;ld (debug_mark),a 
0590					;pop af 
0590					CALLMONITOR 
0590 cd aa fd			call debug_vector  
0593				endm  
# End of macro CALLMONITOR
0593				endif 
0593			 
0593 cd b0 0c			call storage_clear_page 
0596			 
0596 21 af f9			ld hl, store_page 
0599 3e 00			ld a, 0 
059b				 
059b 77				ld (hl),a   ; reset file counter 
059c			 
059c 21 80 27			ld hl, 0x2780     ;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
059f 22 b0 f9		 	ld (store_page+1), hl	 
05a2			 
05a2				; set default label 
05a2			 
05a2 21 3e 06			ld hl, .defaultbanklabl 
05a5 11 b2 f9		 	ld de, store_page+3 
05a8 01 0f 00			ld bc, 15 
05ab ed b0			ldir 
05ad			 
05ad				; Append the current bank id 
05ad 21 bb f9			ld hl, store_page+3+9 
05b0 3a 94 f9			ld a, (spi_device_id) 
05b3 77				ld (hl), a 
05b4			 
05b4				; save default page 0 
05b4			 
05b4 21 00 00			ld hl, 0 
05b7 11 af f9			ld de, store_page 
05ba				if DEBUG_STORESE 
05ba					DMARK "SB3" 
05ba f5				push af  
05bb 3a cf 05			ld a, (.dmark)  
05be 32 a0 fd			ld (debug_mark),a  
05c1 3a d0 05			ld a, (.dmark+1)  
05c4 32 a1 fd			ld (debug_mark+1),a  
05c7 3a d1 05			ld a, (.dmark+2)  
05ca 32 a2 fd			ld (debug_mark+2),a  
05cd 18 03			jr .pastdmark  
05cf ..			.dmark: db "SB3"  
05d2 f1			.pastdmark: pop af  
05d3			endm  
# End of macro DMARK
05d3			;		push af 
05d3			;		ld a, 'F' 
05d3			;		ld (debug_mark),a 
05d3			;		pop af 
05d3					CALLMONITOR 
05d3 cd aa fd			call debug_vector  
05d6				endm  
# End of macro CALLMONITOR
05d6				endif 
05d6 cd d9 04			call storage_write_block 
05d9				if DEBUG_STORESE 
05d9					DMARK "SB4" 
05d9 f5				push af  
05da 3a ee 05			ld a, (.dmark)  
05dd 32 a0 fd			ld (debug_mark),a  
05e0 3a ef 05			ld a, (.dmark+1)  
05e3 32 a1 fd			ld (debug_mark+1),a  
05e6 3a f0 05			ld a, (.dmark+2)  
05e9 32 a2 fd			ld (debug_mark+2),a  
05ec 18 03			jr .pastdmark  
05ee ..			.dmark: db "SB4"  
05f1 f1			.pastdmark: pop af  
05f2			endm  
# End of macro DMARK
05f2			;		push af 
05f2			;		ld a, '>' 
05f2			;		ld (debug_mark),a 
05f2			;		pop af 
05f2					CALLMONITOR 
05f2 cd aa fd			call debug_vector  
05f5				endm  
# End of macro CALLMONITOR
05f5				endif 
05f5			 
05f5 00				nop 
05f6 00				nop 
05f7 00				nop 
05f8			 
05f8				; now set 0 in every page to mark as a free block 
05f8			 
05f8 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
05fa 21 40 00			ld hl, STORE_BLOCK_PHY 
05fd			 
05fd 3e 00		.setmark1:   	ld a,0 
05ff e5					push hl 
0600 c5					push bc 
0601 cd 79 02				call se_writebyte 
0604 3e 0a			ld a, 10 
0606 cd d2 0c			call aDelayInMS 
0609 23				inc hl 
060a cd 79 02				call se_writebyte 
060d 3e 0a			ld a, 10 
060f cd d2 0c			call aDelayInMS 
0612 2b				dec hl 
0613 c1					pop bc 
0614 e1					pop hl 
0615 3e 40				ld a, STORE_BLOCK_PHY 
0617 cd de 0f				call addatohl 
061a 10 e1				djnz .setmark1 
061c			 
061c 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
061e 3e 00		.setmark2:   	ld a,0 
0620 e5					push hl 
0621 c5					push bc 
0622 cd 79 02				call se_writebyte 
0625 3e 0a			ld a, 10 
0627 cd d2 0c			call aDelayInMS 
062a 23				inc hl 
062b cd 79 02				call se_writebyte 
062e 3e 0a			ld a, 10 
0630 cd d2 0c			call aDelayInMS 
0633 2b				dec hl 
0634 c1					pop bc 
0635 e1					pop hl 
0636 3e 40				ld a, STORE_BLOCK_PHY 
0638 cd de 0f				call addatohl 
063b 10 e1				djnz .setmark2 
063d			 
063d					 
063d			 
063d			 
063d c9				ret 
063e			 
063e			 
063e			 
063e			 
063e .. 00		.defaultbanklabl:   db "BankLabel_",0 
0649			 
0649			 
0649			 
0649			; Label Bank 
0649			; ---------- 
0649			; 
0649			; With current bank 
0649			; Read block 0 
0649			; Set label 
0649			; Write block 0 
0649			 
0649			; label str pointer in hl 
0649			 
0649			storage_label:     
0649			 
0649				if DEBUG_STORESE 
0649					DMARK "LBL" 
0649 f5				push af  
064a 3a 5e 06			ld a, (.dmark)  
064d 32 a0 fd			ld (debug_mark),a  
0650 3a 5f 06			ld a, (.dmark+1)  
0653 32 a1 fd			ld (debug_mark+1),a  
0656 3a 60 06			ld a, (.dmark+2)  
0659 32 a2 fd			ld (debug_mark+2),a  
065c 18 03			jr .pastdmark  
065e ..			.dmark: db "LBL"  
0661 f1			.pastdmark: pop af  
0662			endm  
# End of macro DMARK
0662					CALLMONITOR 
0662 cd aa fd			call debug_vector  
0665				endm  
# End of macro CALLMONITOR
0665				endif 
0665			 
0665 e5				push hl 
0666			 
0666 cd 25 05			call storage_get_block_0 
0669			 
0669				; set default label 
0669			 
0669 e1				pop hl 
066a			 
066a 11 b2 f9		 	ld de, store_page+3 
066d 01 0f 00			ld bc, 15 
0670				if DEBUG_STORESE 
0670					DMARK "LB3" 
0670 f5				push af  
0671 3a 85 06			ld a, (.dmark)  
0674 32 a0 fd			ld (debug_mark),a  
0677 3a 86 06			ld a, (.dmark+1)  
067a 32 a1 fd			ld (debug_mark+1),a  
067d 3a 87 06			ld a, (.dmark+2)  
0680 32 a2 fd			ld (debug_mark+2),a  
0683 18 03			jr .pastdmark  
0685 ..			.dmark: db "LB3"  
0688 f1			.pastdmark: pop af  
0689			endm  
# End of macro DMARK
0689					CALLMONITOR 
0689 cd aa fd			call debug_vector  
068c				endm  
# End of macro CALLMONITOR
068c				endif 
068c ed b0			ldir 
068e				; save default page 0 
068e			 
068e 21 00 00			ld hl, 0 
0691 11 af f9			ld de, store_page 
0694				if DEBUG_STORESE 
0694					DMARK "LBW" 
0694 f5				push af  
0695 3a a9 06			ld a, (.dmark)  
0698 32 a0 fd			ld (debug_mark),a  
069b 3a aa 06			ld a, (.dmark+1)  
069e 32 a1 fd			ld (debug_mark+1),a  
06a1 3a ab 06			ld a, (.dmark+2)  
06a4 32 a2 fd			ld (debug_mark+2),a  
06a7 18 03			jr .pastdmark  
06a9 ..			.dmark: db "LBW"  
06ac f1			.pastdmark: pop af  
06ad			endm  
# End of macro DMARK
06ad					CALLMONITOR 
06ad cd aa fd			call debug_vector  
06b0				endm  
# End of macro CALLMONITOR
06b0				endif 
06b0 cd d9 04			call storage_write_block 
06b3			 
06b3 c9				ret 
06b4			 
06b4			 
06b4			 
06b4			; Read Block 0 - Config 
06b4			; --------------------- 
06b4			; 
06b4			; With current bank 
06b4			; Call presence test 
06b4			;    If not present format/init bank  
06b4			; Read block 0  
06b4			;  
06b4			 
06b4			 
06b4			; Dir 
06b4			; --- 
06b4			; 
06b4			; With current bank 
06b4			; Load Block 0 Config 
06b4			; Get max file id number 
06b4			; For each logical block 
06b4			;    Read block read byte 2 
06b4			;      if first block of file 
06b4			;         Display file name 
06b4			;         Display type flags for file 
06b4			;        
06b4			 
06b4			; moving to words as this requires stack control 
06b4			 
06b4			 
06b4			; Delete File 
06b4			; ----------- 
06b4			; 
06b4			; With current bank 
06b4			; 
06b4			; Load Block 0 Config 
06b4			; Get max file id number 
06b4			; For each logical block 
06b4			;    Read block file id 
06b4			;      If first block of file and dont have file id 
06b4			;         if file to delete 
06b4			;         Save file id 
06b4			;         Null file id 
06b4			;         Write this block back 
06b4			;      If file id is one saved 
06b4			;         Null file id 
06b4			;         Write this block back 
06b4			 
06b4			 
06b4			.se_done: 
06b4 e1				pop hl 
06b5 c9				ret 
06b6			 
06b6			storage_erase: 
06b6			 
06b6				; hl contains the file id 
06b6			 
06b6 5d				ld e, l 
06b7 16 00			ld d, 0 
06b9 21 40 00			ld hl, STORE_BLOCK_PHY 
06bc					if DEBUG_FORTH_WORDS 
06bc						DMARK "ERA" 
06bc f5				push af  
06bd 3a d1 06			ld a, (.dmark)  
06c0 32 a0 fd			ld (debug_mark),a  
06c3 3a d2 06			ld a, (.dmark+1)  
06c6 32 a1 fd			ld (debug_mark+1),a  
06c9 3a d3 06			ld a, (.dmark+2)  
06cc 32 a2 fd			ld (debug_mark+2),a  
06cf 18 03			jr .pastdmark  
06d1 ..			.dmark: db "ERA"  
06d4 f1			.pastdmark: pop af  
06d5			endm  
# End of macro DMARK
06d5						CALLMONITOR 
06d5 cd aa fd			call debug_vector  
06d8				endm  
# End of macro CALLMONITOR
06d8					endif 
06d8 cd a7 07			call storage_findnextid 
06db cd 07 10			call ishlzero 
06de c8				ret z 
06df			 
06df e5				push hl 
06e0			 
06e0				; TODO check file not found 
06e0			 
06e0 11 af f9			ld de, store_page 
06e3 cd 74 04			call storage_read_block 
06e6			 
06e6 cd 07 10			call ishlzero 
06e9 ca b4 06			jp z,.se_done 
06ec			 
06ec					if DEBUG_FORTH_WORDS 
06ec						DMARK "ER1" 
06ec f5				push af  
06ed 3a 01 07			ld a, (.dmark)  
06f0 32 a0 fd			ld (debug_mark),a  
06f3 3a 02 07			ld a, (.dmark+1)  
06f6 32 a1 fd			ld (debug_mark+1),a  
06f9 3a 03 07			ld a, (.dmark+2)  
06fc 32 a2 fd			ld (debug_mark+2),a  
06ff 18 03			jr .pastdmark  
0701 ..			.dmark: db "ER1"  
0704 f1			.pastdmark: pop af  
0705			endm  
# End of macro DMARK
0705						CALLMONITOR 
0705 cd aa fd			call debug_vector  
0708				endm  
# End of macro CALLMONITOR
0708					endif 
0708 3a af f9			ld a, (store_page)	; get file id 
070b 32 a3 f9			ld (store_tmpid), a 
070e			 
070e 3a b1 f9			ld a, (store_page+2)    ; get count of extends 
0711 32 a2 f9			ld (store_tmpext), a 
0714			 
0714				; wipe file header 
0714			 
0714 e1				pop hl 
0715 3e 00			ld a, 0 
0717 32 af f9			ld (store_page), a 
071a 32 b0 f9			ld (store_page+1),a 
071d 11 af f9			ld de, store_page 
0720					if DEBUG_FORTH_WORDS 
0720						DMARK "ER2" 
0720 f5				push af  
0721 3a 35 07			ld a, (.dmark)  
0724 32 a0 fd			ld (debug_mark),a  
0727 3a 36 07			ld a, (.dmark+1)  
072a 32 a1 fd			ld (debug_mark+1),a  
072d 3a 37 07			ld a, (.dmark+2)  
0730 32 a2 fd			ld (debug_mark+2),a  
0733 18 03			jr .pastdmark  
0735 ..			.dmark: db "ER2"  
0738 f1			.pastdmark: pop af  
0739			endm  
# End of macro DMARK
0739						CALLMONITOR 
0739 cd aa fd			call debug_vector  
073c				endm  
# End of macro CALLMONITOR
073c					endif 
073c cd d9 04			call storage_write_block 
073f			 
073f			 
073f				; wipe file extents 
073f			 
073f 3a a2 f9			ld a, (store_tmpext) 
0742 47				ld b, a 
0743			 
0743			.eraext:	  
0743 c5				push bc 
0744			 
0744 21 40 00			ld hl, STORE_BLOCK_PHY 
0747 3a a3 f9			ld a,(store_tmpid) 
074a 5f				ld e, a 
074b 50				ld d, b	 
074c					if DEBUG_FORTH_WORDS 
074c						DMARK "ER3" 
074c f5				push af  
074d 3a 61 07			ld a, (.dmark)  
0750 32 a0 fd			ld (debug_mark),a  
0753 3a 62 07			ld a, (.dmark+1)  
0756 32 a1 fd			ld (debug_mark+1),a  
0759 3a 63 07			ld a, (.dmark+2)  
075c 32 a2 fd			ld (debug_mark+2),a  
075f 18 03			jr .pastdmark  
0761 ..			.dmark: db "ER3"  
0764 f1			.pastdmark: pop af  
0765			endm  
# End of macro DMARK
0765						CALLMONITOR 
0765 cd aa fd			call debug_vector  
0768				endm  
# End of macro CALLMONITOR
0768					endif 
0768 cd a7 07			call storage_findnextid 
076b cd 07 10			call ishlzero 
076e ca b4 06			jp z,.se_done 
0771			 
0771 e5				push hl 
0772 11 af f9			ld de, store_page 
0775 cd 74 04			call storage_read_block 
0778			 
0778				; free block	 
0778			 
0778 3e 00			ld a, 0 
077a 32 af f9			ld (store_page), a 
077d 32 b0 f9			ld (store_page+1),a 
0780 11 af f9			ld de, store_page 
0783 e1				pop hl 
0784					if DEBUG_FORTH_WORDS 
0784						DMARK "ER4" 
0784 f5				push af  
0785 3a 99 07			ld a, (.dmark)  
0788 32 a0 fd			ld (debug_mark),a  
078b 3a 9a 07			ld a, (.dmark+1)  
078e 32 a1 fd			ld (debug_mark+1),a  
0791 3a 9b 07			ld a, (.dmark+2)  
0794 32 a2 fd			ld (debug_mark+2),a  
0797 18 03			jr .pastdmark  
0799 ..			.dmark: db "ER4"  
079c f1			.pastdmark: pop af  
079d			endm  
# End of macro DMARK
079d						CALLMONITOR 
079d cd aa fd			call debug_vector  
07a0				endm  
# End of macro CALLMONITOR
07a0					endif 
07a0 cd d9 04			call storage_write_block 
07a3			 
07a3 c1				pop bc 
07a4 10 9d			djnz .eraext 
07a6			 
07a6 c9				ret 
07a7			 
07a7			 
07a7			; Find Free Block 
07a7			; --------------- 
07a7			; 
07a7			; With current bank 
07a7			;  
07a7			; From given starting logical block 
07a7			;    Read block  
07a7			;    If no file id 
07a7			;         Return block id 
07a7			 
07a7			 
07a7			; hl starting page number 
07a7			; hl contains free page number or zero if no pages free 
07a7			; e contains the file id to locate 
07a7			; d contains the block number 
07a7			 
07a7			; TODO change to find file id and use zero for free block 
07a7			 
07a7			storage_findnextid: 
07a7			 
07a7				; now locate first 0 page to mark as a free block 
07a7			 
07a7 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
07a9			;	ld hl, STORE_BLOCK_PHY 
07a9			 
07a9					if DEBUG_FORTH_WORDS 
07a9					DMARK "FNI" 
07a9 f5				push af  
07aa 3a be 07			ld a, (.dmark)  
07ad 32 a0 fd			ld (debug_mark),a  
07b0 3a bf 07			ld a, (.dmark+1)  
07b3 32 a1 fd			ld (debug_mark+1),a  
07b6 3a c0 07			ld a, (.dmark+2)  
07b9 32 a2 fd			ld (debug_mark+2),a  
07bc 18 03			jr .pastdmark  
07be ..			.dmark: db "FNI"  
07c1 f1			.pastdmark: pop af  
07c2			endm  
# End of macro DMARK
07c2						CALLMONITOR 
07c2 cd aa fd			call debug_vector  
07c5				endm  
# End of macro CALLMONITOR
07c5					endif 
07c5			.ff1:   	 
07c5 e5					push hl 
07c6 c5					push bc 
07c7 d5					push de 
07c8 cd 1b 03				call se_readbyte 
07cb 5f					ld e,a 
07cc 23					inc hl 
07cd cd 1b 03				call se_readbyte 
07d0 57					ld d, a 
07d1 e1					pop hl 
07d2 e5					push hl 
07d3 cd fc 0f				call cmp16 
07d6 28 49				jr z, .fffound 
07d8			 
07d8 d1					pop de 
07d9 c1					pop bc 
07da e1					pop hl 
07db			 
07db					; is found? 
07db					;cp e 
07db					;ret z 
07db			 
07db 3e 40				ld a, STORE_BLOCK_PHY 
07dd cd de 0f				call addatohl 
07e0 10 e3				djnz .ff1 
07e2			 
07e2 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
07e4			.ff2:   	 
07e4			 
07e4 e5					push hl 
07e5 c5					push bc 
07e6 d5					push de 
07e7 cd 1b 03				call se_readbyte 
07ea 5f					ld e,a 
07eb 23					inc hl 
07ec cd 1b 03				call se_readbyte 
07ef 57					ld d, a 
07f0			 
07f0 e1					pop hl 
07f1 e5					push hl 
07f2 cd fc 0f				call cmp16 
07f5 28 2a				jr z, .fffound 
07f7			 
07f7 d1					pop de 
07f8 c1					pop bc 
07f9 e1					pop hl 
07fa					; is found? 
07fa					;cp e 
07fa					;ret z 
07fa			 
07fa 3e 40				ld a, STORE_BLOCK_PHY 
07fc cd de 0f				call addatohl 
07ff 10 e3				djnz .ff2 
0801			 
0801			 
0801					if DEBUG_FORTH_WORDS 
0801					DMARK "FN-" 
0801 f5				push af  
0802 3a 16 08			ld a, (.dmark)  
0805 32 a0 fd			ld (debug_mark),a  
0808 3a 17 08			ld a, (.dmark+1)  
080b 32 a1 fd			ld (debug_mark+1),a  
080e 3a 18 08			ld a, (.dmark+2)  
0811 32 a2 fd			ld (debug_mark+2),a  
0814 18 03			jr .pastdmark  
0816 ..			.dmark: db "FN-"  
0819 f1			.pastdmark: pop af  
081a			endm  
# End of macro DMARK
081a					;	push af 
081a					;	ld a, 'n' 
081a					;	ld (debug_mark),a 
081a					;	pop af 
081a						CALLMONITOR 
081a cd aa fd			call debug_vector  
081d				endm  
# End of macro CALLMONITOR
081d					endif 
081d				; no free marks! 
081d 21 00 00				ld hl, 0 
0820 c9				ret 
0821			.fffound: 
0821				 
0821			 
0821 d1					pop de 
0822 c1					pop bc 
0823 e1					pop hl 
0824					if DEBUG_FORTH_WORDS 
0824					DMARK "FNF" 
0824 f5				push af  
0825 3a 39 08			ld a, (.dmark)  
0828 32 a0 fd			ld (debug_mark),a  
082b 3a 3a 08			ld a, (.dmark+1)  
082e 32 a1 fd			ld (debug_mark+1),a  
0831 3a 3b 08			ld a, (.dmark+2)  
0834 32 a2 fd			ld (debug_mark+2),a  
0837 18 03			jr .pastdmark  
0839 ..			.dmark: db "FNF"  
083c f1			.pastdmark: pop af  
083d			endm  
# End of macro DMARK
083d					;	push af 
083d					;	ld a, 'n' 
083d					;	ld (debug_mark),a 
083d					;	pop af 
083d						CALLMONITOR 
083d cd aa fd			call debug_vector  
0840				endm  
# End of macro CALLMONITOR
0840					endif 
0840 c9				ret 
0841			 
0841			 
0841			 
0841			; Free Space 
0841			; ---------- 
0841			; 
0841			; With current bank 
0841			; 
0841			; Set block count to zero 
0841			; Starting with first logical block 
0841			;      Find free block  
0841			;      If block id given, increment block count 
0841			; 
0841			;  
0841			 
0841			 
0841			; hl contains count of free blocks 
0841			 
0841			storage_freeblocks: 
0841			 
0841				; now locate first 0 page to mark as a free block 
0841			 
0841 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
0843 21 40 00			ld hl, STORE_BLOCK_PHY 
0846 11 00 00			ld de, 0 
0849			 
0849			.fb1:   	 
0849 e5					push hl 
084a c5					push bc 
084b d5					push de 
084c cd 1b 03				call se_readbyte 
084f d1					pop de 
0850 c1					pop bc 
0851 e1					pop hl 
0852			 
0852					; is free? 
0852 fe 00				cp 0 
0854 20 01				jr nz, .ff1cont 
0856 13					inc de 
0857			 
0857			.ff1cont: 
0857			 
0857			 
0857 3e 40				ld a, STORE_BLOCK_PHY 
0859 cd de 0f				call addatohl 
085c 10 eb				djnz .fb1 
085e			 
085e 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
0860			.fb2:   	 
0860 e5					push hl 
0861 c5					push bc 
0862 d5					push de 
0863 cd 1b 03				call se_readbyte 
0866 d1					pop de 
0867 c1					pop bc 
0868 e1					pop hl 
0869			 
0869					; is free? 
0869 fe 00				cp 0 
086b 20 01				jr nz, .ff2cont 
086d 13					inc de 
086e			 
086e			.ff2cont: 
086e			 
086e 3e 40				ld a, STORE_BLOCK_PHY 
0870 cd de 0f				call addatohl 
0873 10 eb				djnz .fb2 
0875			 
0875 eb				ex de, hl 
0876 c9				ret 
0877			 
0877			; Get File ID 
0877			; ----------- 
0877			; 
0877			; With current bank 
0877			;  
0877			; Load Block 0 Config 
0877			; Get max file id number 
0877			; For each logical block 
0877			;    Read block file id 
0877			;      If first block of file and dont have file id 
0877			;         if file get id and exit 
0877			 
0877			 
0877			 
0877			 
0877			; Create File 
0877			; ----------- 
0877			; 
0877			; With current bank  
0877			; Load Block 0 Config 
0877			; Get max file id number 
0877			; Increment file id number 
0877			; Save Config 
0877			; Find free block 
0877			; Set buffer with file name and file id 
0877			; Write buffer to free block  
0877			 
0877			 
0877			; hl point to file name 
0877			; hl returns file id 
0877			 
0877			; file format: 
0877			; byte 0 - file id 
0877			; byte 1 - extent number 
0877			; byte 2-> data 
0877			 
0877			; format for extent number 0: 
0877			; 
0877			; byte 0 - file id 
0877			; byte 1 - extent 0 
0877			; byte 2 - extent count 
0877			; byte 3 -> file name and meta data 
0877			 
0877			 
0877			storage_create: 
0877				if DEBUG_STORESE 
0877					DMARK "SCR" 
0877 f5				push af  
0878 3a 8c 08			ld a, (.dmark)  
087b 32 a0 fd			ld (debug_mark),a  
087e 3a 8d 08			ld a, (.dmark+1)  
0881 32 a1 fd			ld (debug_mark+1),a  
0884 3a 8e 08			ld a, (.dmark+2)  
0887 32 a2 fd			ld (debug_mark+2),a  
088a 18 03			jr .pastdmark  
088c ..			.dmark: db "SCR"  
088f f1			.pastdmark: pop af  
0890			endm  
# End of macro DMARK
0890					CALLMONITOR 
0890 cd aa fd			call debug_vector  
0893				endm  
# End of macro CALLMONITOR
0893				endif 
0893			 
0893 e5				push hl		; save file name pointer 
0894			 
0894 cd 25 05			call storage_get_block_0 
0897			 
0897 3a af f9			ld a,(store_page)	; get current file id 
089a 3c				inc a 
089b 32 af f9			ld (store_page),a 
089e				 
089e 32 a3 f9			ld (store_tmpid),a			; save id 
08a1			 
08a1 21 00 00			ld hl, 0 
08a4 11 af f9			ld de, store_page 
08a7				if DEBUG_STORESE 
08a7					DMARK "SCw" 
08a7 f5				push af  
08a8 3a bc 08			ld a, (.dmark)  
08ab 32 a0 fd			ld (debug_mark),a  
08ae 3a bd 08			ld a, (.dmark+1)  
08b1 32 a1 fd			ld (debug_mark+1),a  
08b4 3a be 08			ld a, (.dmark+2)  
08b7 32 a2 fd			ld (debug_mark+2),a  
08ba 18 03			jr .pastdmark  
08bc ..			.dmark: db "SCw"  
08bf f1			.pastdmark: pop af  
08c0			endm  
# End of macro DMARK
08c0					CALLMONITOR 
08c0 cd aa fd			call debug_vector  
08c3				endm  
# End of macro CALLMONITOR
08c3				endif 
08c3 cd d9 04			call storage_write_block	 ; save update 
08c6			 
08c6				if DEBUG_STORESE 
08c6 11 af f9				ld de, store_page 
08c9					DMARK "SCC" 
08c9 f5				push af  
08ca 3a de 08			ld a, (.dmark)  
08cd 32 a0 fd			ld (debug_mark),a  
08d0 3a df 08			ld a, (.dmark+1)  
08d3 32 a1 fd			ld (debug_mark+1),a  
08d6 3a e0 08			ld a, (.dmark+2)  
08d9 32 a2 fd			ld (debug_mark+2),a  
08dc 18 03			jr .pastdmark  
08de ..			.dmark: db "SCC"  
08e1 f1			.pastdmark: pop af  
08e2			endm  
# End of macro DMARK
08e2					CALLMONITOR 
08e2 cd aa fd			call debug_vector  
08e5				endm  
# End of macro CALLMONITOR
08e5				endif 
08e5				;  
08e5				 
08e5 21 40 00			ld hl, STORE_BLOCK_PHY 
08e8 11 00 00			ld de, 0 
08eb cd a7 07			call storage_findnextid 
08ee			 
08ee 22 9a f9			ld (store_tmppageid), hl    ; save page to use  
08f1			 
08f1				; TODO detect 0 = no spare blocks 
08f1			 
08f1				; hl now contains the free page to use for the file header page 
08f1			 
08f1				if DEBUG_STORESE 
08f1				DMARK "SCF" 
08f1 f5				push af  
08f2 3a 06 09			ld a, (.dmark)  
08f5 32 a0 fd			ld (debug_mark),a  
08f8 3a 07 09			ld a, (.dmark+1)  
08fb 32 a1 fd			ld (debug_mark+1),a  
08fe 3a 08 09			ld a, (.dmark+2)  
0901 32 a2 fd			ld (debug_mark+2),a  
0904 18 03			jr .pastdmark  
0906 ..			.dmark: db "SCF"  
0909 f1			.pastdmark: pop af  
090a			endm  
# End of macro DMARK
090a					CALLMONITOR 
090a cd aa fd			call debug_vector  
090d				endm  
# End of macro CALLMONITOR
090d				endif 
090d			 
090d 22 9a f9			ld (store_tmppageid), hl 
0910				 
0910 3a a3 f9			ld a,(store_tmpid)    ; get file id 
0913			;	ld a, (store_filecache)			; save to cache 
0913			 
0913 32 af f9			ld (store_page),a    ; set page id 
0916 3e 00			ld a, 0			 ; extent 0 is file header 
0918 32 b0 f9			ld (store_page+1), a   ; set file extent 
091b			 
091b 32 b1 f9			ld (store_page+2), a   ; extent count for the file 
091e			 
091e			;	inc hl 		; init block 0 of file 
091e			;	inc hl   		; skip file and extent id 
091e			 ;       ld a, 0 
091e			;	ld (hl),a 
091e			;	ld a, (store_filecache+1)  	; save to cache 
091e			 
091e			;	inc hl    ; file name 
091e				 
091e				 
091e 11 b2 f9			ld de, store_page+3    ; get buffer for term string to use as file name 
0921				if DEBUG_STORESE 
0921					DMARK "SCc" 
0921 f5				push af  
0922 3a 36 09			ld a, (.dmark)  
0925 32 a0 fd			ld (debug_mark),a  
0928 3a 37 09			ld a, (.dmark+1)  
092b 32 a1 fd			ld (debug_mark+1),a  
092e 3a 38 09			ld a, (.dmark+2)  
0931 32 a2 fd			ld (debug_mark+2),a  
0934 18 03			jr .pastdmark  
0936 ..			.dmark: db "SCc"  
0939 f1			.pastdmark: pop af  
093a			endm  
# End of macro DMARK
093a					CALLMONITOR 
093a cd aa fd			call debug_vector  
093d				endm  
# End of macro CALLMONITOR
093d				endif 
093d e1				pop hl    ; get zero term string 
093e e5				push hl 
093f 3e 00			ld a, 0 
0941 cd 4f 13			call strlent 
0944 23				inc hl   ; cover zero term 
0945 06 00			ld b,0 
0947 4d				ld c,l 
0948 e1				pop hl 
0949				;ex de, hl 
0949				if DEBUG_STORESE 
0949					DMARK "SCa" 
0949 f5				push af  
094a 3a 5e 09			ld a, (.dmark)  
094d 32 a0 fd			ld (debug_mark),a  
0950 3a 5f 09			ld a, (.dmark+1)  
0953 32 a1 fd			ld (debug_mark+1),a  
0956 3a 60 09			ld a, (.dmark+2)  
0959 32 a2 fd			ld (debug_mark+2),a  
095c 18 03			jr .pastdmark  
095e ..			.dmark: db "SCa"  
0961 f1			.pastdmark: pop af  
0962			endm  
# End of macro DMARK
0962					;push af 
0962					;ld a, 'a' 
0962					;ld (debug_mark),a 
0962					;pop af 
0962					CALLMONITOR 
0962 cd aa fd			call debug_vector  
0965				endm  
# End of macro CALLMONITOR
0965				endif 
0965 ed b0			ldir    ; copy zero term string 
0967				if DEBUG_STORESE 
0967					DMARK "SCA" 
0967 f5				push af  
0968 3a 7c 09			ld a, (.dmark)  
096b 32 a0 fd			ld (debug_mark),a  
096e 3a 7d 09			ld a, (.dmark+1)  
0971 32 a1 fd			ld (debug_mark+1),a  
0974 3a 7e 09			ld a, (.dmark+2)  
0977 32 a2 fd			ld (debug_mark+2),a  
097a 18 03			jr .pastdmark  
097c ..			.dmark: db "SCA"  
097f f1			.pastdmark: pop af  
0980			endm  
# End of macro DMARK
0980					CALLMONITOR 
0980 cd aa fd			call debug_vector  
0983				endm  
# End of macro CALLMONITOR
0983				endif 
0983			 
0983				; write file header page 
0983			 
0983 2a 9a f9			ld hl,(store_tmppageid) 
0986 11 af f9			ld de, store_page 
0989				if DEBUG_STORESE 
0989					DMARK "SCb" 
0989 f5				push af  
098a 3a 9e 09			ld a, (.dmark)  
098d 32 a0 fd			ld (debug_mark),a  
0990 3a 9f 09			ld a, (.dmark+1)  
0993 32 a1 fd			ld (debug_mark+1),a  
0996 3a a0 09			ld a, (.dmark+2)  
0999 32 a2 fd			ld (debug_mark+2),a  
099c 18 03			jr .pastdmark  
099e ..			.dmark: db "SCb"  
09a1 f1			.pastdmark: pop af  
09a2			endm  
# End of macro DMARK
09a2					;push af 
09a2					;ld a, 'b' 
09a2					;ld (debug_mark),a 
09a2					;pop af 
09a2					CALLMONITOR 
09a2 cd aa fd			call debug_vector  
09a5				endm  
# End of macro CALLMONITOR
09a5				endif 
09a5 cd d9 04			call storage_write_block 
09a8			 
09a8 3a a3 f9			ld a, (store_tmpid) 
09ab 6f				ld l, a 
09ac 26 00			ld h,0 
09ae				if DEBUG_STORESE 
09ae					DMARK "SCz" 
09ae f5				push af  
09af 3a c3 09			ld a, (.dmark)  
09b2 32 a0 fd			ld (debug_mark),a  
09b5 3a c4 09			ld a, (.dmark+1)  
09b8 32 a1 fd			ld (debug_mark+1),a  
09bb 3a c5 09			ld a, (.dmark+2)  
09be 32 a2 fd			ld (debug_mark+2),a  
09c1 18 03			jr .pastdmark  
09c3 ..			.dmark: db "SCz"  
09c6 f1			.pastdmark: pop af  
09c7			endm  
# End of macro DMARK
09c7					CALLMONITOR 
09c7 cd aa fd			call debug_vector  
09ca				endm  
# End of macro CALLMONITOR
09ca				endif 
09ca c9				ret 
09cb				 
09cb			 
09cb			 
09cb			; 
09cb			; Read File 
09cb			; 
09cb			; h - file id to locate 
09cb			; l - extent to locate 
09cb			; de - pointer to string to read into 
09cb			; 
09cb			; returns hl is 0 if block not found ie end of file or pointer to start of data read 
09cb			 
09cb			.sr_fail: 
09cb d1				pop de 
09cc c9				ret 
09cd			 
09cd			storage_read: 
09cd			 
09cd			 
09cd d5				push de 
09ce			 
09ce			; TODO BUG the above push is it popped before the RET Z? 
09ce			 
09ce			; TODO how to handle multiple part blocks 
09ce			 
09ce				; locate file extent to read 
09ce			 
09ce 5c				ld e, h 
09cf 55				ld d, l 
09d0			 
09d0			.srext: 
09d0 22 ad f9			ld (store_readptr), hl     ; save the current extent to load 
09d3 ed 53 ab f9		ld (store_readbuf), de     ; save the current buffer to load in to 
09d7			 
09d7 21 40 00			ld hl, STORE_BLOCK_PHY 
09da				if DEBUG_STORESE 
09da					DMARK "sre" 
09da f5				push af  
09db 3a ef 09			ld a, (.dmark)  
09de 32 a0 fd			ld (debug_mark),a  
09e1 3a f0 09			ld a, (.dmark+1)  
09e4 32 a1 fd			ld (debug_mark+1),a  
09e7 3a f1 09			ld a, (.dmark+2)  
09ea 32 a2 fd			ld (debug_mark+2),a  
09ed 18 03			jr .pastdmark  
09ef ..			.dmark: db "sre"  
09f2 f1			.pastdmark: pop af  
09f3			endm  
# End of macro DMARK
09f3					CALLMONITOR 
09f3 cd aa fd			call debug_vector  
09f6				endm  
# End of macro CALLMONITOR
09f6				endif 
09f6 cd a7 07			call storage_findnextid 
09f9			 
09f9				if DEBUG_STORESE 
09f9					DMARK "srf" 
09f9 f5				push af  
09fa 3a 0e 0a			ld a, (.dmark)  
09fd 32 a0 fd			ld (debug_mark),a  
0a00 3a 0f 0a			ld a, (.dmark+1)  
0a03 32 a1 fd			ld (debug_mark+1),a  
0a06 3a 10 0a			ld a, (.dmark+2)  
0a09 32 a2 fd			ld (debug_mark+2),a  
0a0c 18 03			jr .pastdmark  
0a0e ..			.dmark: db "srf"  
0a11 f1			.pastdmark: pop af  
0a12			endm  
# End of macro DMARK
0a12					CALLMONITOR 
0a12 cd aa fd			call debug_vector  
0a15				endm  
# End of macro CALLMONITOR
0a15				endif 
0a15 cd 07 10			call ishlzero 
0a18			;	ld a, l 
0a18			;	add h 
0a18			;	cp 0 
0a18 28 b1			jr z,.sr_fail			; block not found so EOF 
0a1a			 
0a1a				; save current address for use by higher level words etc 
0a1a			 
0a1a 22 a0 f9			ld (store_openaddr),hl 
0a1d			 
0a1d			 
0a1d				; hl contains page number to load 
0a1d d1				pop de   ; get storage 
0a1e ed 53 ab f9		ld (store_readbuf), de     ; current buffer to load in to 
0a22 d5				push de 
0a23				if DEBUG_STORESE 
0a23					DMARK "srg" 
0a23 f5				push af  
0a24 3a 38 0a			ld a, (.dmark)  
0a27 32 a0 fd			ld (debug_mark),a  
0a2a 3a 39 0a			ld a, (.dmark+1)  
0a2d 32 a1 fd			ld (debug_mark+1),a  
0a30 3a 3a 0a			ld a, (.dmark+2)  
0a33 32 a2 fd			ld (debug_mark+2),a  
0a36 18 03			jr .pastdmark  
0a38 ..			.dmark: db "srg"  
0a3b f1			.pastdmark: pop af  
0a3c			endm  
# End of macro DMARK
0a3c					CALLMONITOR 
0a3c cd aa fd			call debug_vector  
0a3f				endm  
# End of macro CALLMONITOR
0a3f				endif 
0a3f cd 74 04			call storage_read_block 
0a42			 
0a42				; if this a continuation read??? 
0a42			 
0a42 2a ab f9			ld hl, (store_readbuf)     ; current buffer to load in to 
0a45			 
0a45 3e 3f			ld a, STORE_BLOCK_PHY-1 
0a47 cd de 0f			call addatohl 
0a4a 7e				ld a,(hl) 
0a4b fe 00			cp 0 
0a4d 28 02			jr z, .markiscont 
0a4f 3e ff			ld a, 255 
0a51			 
0a51			.markiscont: 
0a51 32 a2 f9			ld (store_readcont), a 
0a54			 
0a54				if DEBUG_STORESE 
0a54					DMARK "srC" 
0a54 f5				push af  
0a55 3a 69 0a			ld a, (.dmark)  
0a58 32 a0 fd			ld (debug_mark),a  
0a5b 3a 6a 0a			ld a, (.dmark+1)  
0a5e 32 a1 fd			ld (debug_mark+1),a  
0a61 3a 6b 0a			ld a, (.dmark+2)  
0a64 32 a2 fd			ld (debug_mark+2),a  
0a67 18 03			jr .pastdmark  
0a69 ..			.dmark: db "srC"  
0a6c f1			.pastdmark: pop af  
0a6d			endm  
# End of macro DMARK
0a6d					CALLMONITOR 
0a6d cd aa fd			call debug_vector  
0a70				endm  
# End of macro CALLMONITOR
0a70				endif 
0a70				; only short reads enabled 
0a70			 
0a70 3a aa f9			ld a, (store_longread) 
0a73 fe 00			cp 0 
0a75 ca 42 0b			jp z, .readdone 
0a78			 
0a78			; TODO if block has no zeros then need to read next block  
0a78			; this code appears to be very buggy. Have added above a flag to disable/enable the following code for later debug 
0a78			; check last byte of physical block. 
0a78			; if not zero then the next block needs to be loaded 
0a78			 
0a78			 
0a78 2a ab f9			ld hl, (store_readbuf)     ; current buffer to load in to 
0a7b			 
0a7b 3e 3f			ld a, STORE_BLOCK_PHY-1 
0a7d cd de 0f			call addatohl 
0a80				;dec hl 
0a80 7e				ld a,(hl) 
0a81				if DEBUG_STORESE 
0a81					DMARK "sr?" 
0a81 f5				push af  
0a82 3a 96 0a			ld a, (.dmark)  
0a85 32 a0 fd			ld (debug_mark),a  
0a88 3a 97 0a			ld a, (.dmark+1)  
0a8b 32 a1 fd			ld (debug_mark+1),a  
0a8e 3a 98 0a			ld a, (.dmark+2)  
0a91 32 a2 fd			ld (debug_mark+2),a  
0a94 18 03			jr .pastdmark  
0a96 ..			.dmark: db "sr?"  
0a99 f1			.pastdmark: pop af  
0a9a			endm  
# End of macro DMARK
0a9a					CALLMONITOR 
0a9a cd aa fd			call debug_vector  
0a9d				endm  
# End of macro CALLMONITOR
0a9d				endif 
0a9d fe 00			cp 0 
0a9f ca 42 0b			jp z, .readdone 
0aa2			 
0aa2				; last byte is not zero so there is more in the next extent. Load it on the end.	 
0aa2			 
0aa2 23				inc hl 
0aa3			 
0aa3 22 ab f9			ld (store_readbuf), hl     ; save the current buffer to load in to 
0aa6			 
0aa6 ed 5b ad f9		ld de, (store_readptr)     ; save the current extent to load 
0aaa			 
0aaa eb				ex de, hl 
0aab			 
0aab				; next ext 
0aab			 
0aab 23				inc hl 
0aac 22 ad f9			ld  (store_readptr), hl     ; save the current extent to load 
0aaf			 
0aaf				if DEBUG_STORESE 
0aaf					DMARK "sF2" 
0aaf f5				push af  
0ab0 3a c4 0a			ld a, (.dmark)  
0ab3 32 a0 fd			ld (debug_mark),a  
0ab6 3a c5 0a			ld a, (.dmark+1)  
0ab9 32 a1 fd			ld (debug_mark+1),a  
0abc 3a c6 0a			ld a, (.dmark+2)  
0abf 32 a2 fd			ld (debug_mark+2),a  
0ac2 18 03			jr .pastdmark  
0ac4 ..			.dmark: db "sF2"  
0ac7 f1			.pastdmark: pop af  
0ac8			endm  
# End of macro DMARK
0ac8					CALLMONITOR 
0ac8 cd aa fd			call debug_vector  
0acb				endm  
# End of macro CALLMONITOR
0acb				endif 
0acb			 
0acb				; get and load block 
0acb			 
0acb cd a7 07			call storage_findnextid 
0ace			 
0ace				if DEBUG_STORESE 
0ace					DMARK "sf2" 
0ace f5				push af  
0acf 3a e3 0a			ld a, (.dmark)  
0ad2 32 a0 fd			ld (debug_mark),a  
0ad5 3a e4 0a			ld a, (.dmark+1)  
0ad8 32 a1 fd			ld (debug_mark+1),a  
0adb 3a e5 0a			ld a, (.dmark+2)  
0ade 32 a2 fd			ld (debug_mark+2),a  
0ae1 18 03			jr .pastdmark  
0ae3 ..			.dmark: db "sf2"  
0ae6 f1			.pastdmark: pop af  
0ae7			endm  
# End of macro DMARK
0ae7					CALLMONITOR 
0ae7 cd aa fd			call debug_vector  
0aea				endm  
# End of macro CALLMONITOR
0aea				endif 
0aea cd 07 10			call ishlzero 
0aed			;	ld a, l 
0aed			;	add h 
0aed			;	cp 0 
0aed ca cb 09			jp z,.sr_fail			; block not found so EOF 
0af0				 
0af0				; save current address for use by higher level words etc 
0af0			 
0af0 22 a0 f9			ld (store_openaddr),hl 
0af3			 
0af3 cd 74 04			call storage_read_block 
0af6			 
0af6				; on a continuation block, we now have the file id and ext in the middle of the block 
0af6				; we need to pull everything back  
0af6			 
0af6 ed 5b ab f9		ld de, (store_readbuf)     ; current buffer to nudge into 
0afa 2a ab f9			ld hl, (store_readbuf)     ; current buffer where data actually exists 
0afd 23				inc hl 
0afe 23				inc hl     ; skip id and ext 
0aff 01 40 00			ld bc, STORE_BLOCK_PHY 
0b02				if DEBUG_STORESE 
0b02					DMARK "SR<" 
0b02 f5				push af  
0b03 3a 17 0b			ld a, (.dmark)  
0b06 32 a0 fd			ld (debug_mark),a  
0b09 3a 18 0b			ld a, (.dmark+1)  
0b0c 32 a1 fd			ld (debug_mark+1),a  
0b0f 3a 19 0b			ld a, (.dmark+2)  
0b12 32 a2 fd			ld (debug_mark+2),a  
0b15 18 03			jr .pastdmark  
0b17 ..			.dmark: db "SR<"  
0b1a f1			.pastdmark: pop af  
0b1b			endm  
# End of macro DMARK
0b1b					CALLMONITOR 
0b1b cd aa fd			call debug_vector  
0b1e				endm  
# End of macro CALLMONITOR
0b1e				endif 
0b1e ed b0			ldir     ; copy data 
0b20			 
0b20				; move the pointer back and pretend we have a full buffer for next recheck 
0b20			 
0b20 1b				dec de 
0b21 1b				dec de 
0b22			 
0b22			; TODO do pop below now short circuit loop????? 
0b22 c1				pop bc     ; get rid of spare de on stack 
0b23				if DEBUG_STORESE 
0b23					DMARK "SR>" 
0b23 f5				push af  
0b24 3a 38 0b			ld a, (.dmark)  
0b27 32 a0 fd			ld (debug_mark),a  
0b2a 3a 39 0b			ld a, (.dmark+1)  
0b2d 32 a1 fd			ld (debug_mark+1),a  
0b30 3a 3a 0b			ld a, (.dmark+2)  
0b33 32 a2 fd			ld (debug_mark+2),a  
0b36 18 03			jr .pastdmark  
0b38 ..			.dmark: db "SR>"  
0b3b f1			.pastdmark: pop af  
0b3c			endm  
# End of macro DMARK
0b3c					CALLMONITOR 
0b3c cd aa fd			call debug_vector  
0b3f				endm  
# End of macro CALLMONITOR
0b3f				endif 
0b3f c3 d0 09			jp .srext 
0b42			 
0b42			 
0b42			 
0b42			 
0b42			 
0b42			.readdone:		 
0b42 e1				pop hl 		 ; return start of data to show as not EOF 
0b43 23				inc hl   ; past file id 
0b44 23				inc hl   ; past ext 
0b45				if DEBUG_STORESE 
0b45					DMARK "SRe" 
0b45 f5				push af  
0b46 3a 5a 0b			ld a, (.dmark)  
0b49 32 a0 fd			ld (debug_mark),a  
0b4c 3a 5b 0b			ld a, (.dmark+1)  
0b4f 32 a1 fd			ld (debug_mark+1),a  
0b52 3a 5c 0b			ld a, (.dmark+2)  
0b55 32 a2 fd			ld (debug_mark+2),a  
0b58 18 03			jr .pastdmark  
0b5a ..			.dmark: db "SRe"  
0b5d f1			.pastdmark: pop af  
0b5e			endm  
# End of macro DMARK
0b5e					CALLMONITOR 
0b5e cd aa fd			call debug_vector  
0b61				endm  
# End of macro CALLMONITOR
0b61				endif 
0b61 c9					ret 
0b62			 
0b62			 
0b62			 
0b62			; 
0b62			; Append File 
0b62			; 
0b62			; hl - file id to locate 
0b62			; de - pointer to (multi block) string to write 
0b62			 
0b62			.sa_notfound: 
0b62 d1				pop de 
0b63 c9				ret 
0b64			 
0b64			 
0b64			storage_append: 
0b64				; hl -  file id to append to 
0b64				; de - string to append 
0b64			 
0b64 d5				push de 
0b65				 
0b65				if DEBUG_STORESE 
0b65					DMARK "AP1" 
0b65 f5				push af  
0b66 3a 7a 0b			ld a, (.dmark)  
0b69 32 a0 fd			ld (debug_mark),a  
0b6c 3a 7b 0b			ld a, (.dmark+1)  
0b6f 32 a1 fd			ld (debug_mark+1),a  
0b72 3a 7c 0b			ld a, (.dmark+2)  
0b75 32 a2 fd			ld (debug_mark+2),a  
0b78 18 03			jr .pastdmark  
0b7a ..			.dmark: db "AP1"  
0b7d f1			.pastdmark: pop af  
0b7e			endm  
# End of macro DMARK
0b7e					CALLMONITOR 
0b7e cd aa fd			call debug_vector  
0b81				endm  
# End of macro CALLMONITOR
0b81				endif 
0b81			 
0b81 7d				ld a, l 
0b82 32 a3 f9			ld (store_tmpid), a 
0b85			 
0b85				; get file header  
0b85			 
0b85 16 00			ld d, 0			 ; file extent to locate - file name details at item 0 
0b87 3a a3 f9			ld a, (store_tmpid) 
0b8a 5f				ld e, a 
0b8b			 
0b8b 21 40 00				ld hl, STORE_BLOCK_PHY 
0b8e cd a7 07				call storage_findnextid 
0b91			 
0b91 cd 07 10			call ishlzero 
0b94 28 cc			jr z, .sa_notfound 
0b96			 
0b96 22 9a f9			ld (store_tmppageid), hl 
0b99			 
0b99				; TODO handle file id not found 
0b99			 
0b99				if DEBUG_STORESE 
0b99					DMARK "AP2" 
0b99 f5				push af  
0b9a 3a ae 0b			ld a, (.dmark)  
0b9d 32 a0 fd			ld (debug_mark),a  
0ba0 3a af 0b			ld a, (.dmark+1)  
0ba3 32 a1 fd			ld (debug_mark+1),a  
0ba6 3a b0 0b			ld a, (.dmark+2)  
0ba9 32 a2 fd			ld (debug_mark+2),a  
0bac 18 03			jr .pastdmark  
0bae ..			.dmark: db "AP2"  
0bb1 f1			.pastdmark: pop af  
0bb2			endm  
# End of macro DMARK
0bb2					CALLMONITOR 
0bb2 cd aa fd			call debug_vector  
0bb5				endm  
# End of macro CALLMONITOR
0bb5				endif 
0bb5			 
0bb5				; update file extent count 
0bb5			 
0bb5 11 af f9			ld de, store_page 
0bb8			 
0bb8 cd 74 04			call storage_read_block 
0bbb			 
0bbb				if DEBUG_STORESE 
0bbb					DMARK "AP3" 
0bbb f5				push af  
0bbc 3a d0 0b			ld a, (.dmark)  
0bbf 32 a0 fd			ld (debug_mark),a  
0bc2 3a d1 0b			ld a, (.dmark+1)  
0bc5 32 a1 fd			ld (debug_mark+1),a  
0bc8 3a d2 0b			ld a, (.dmark+2)  
0bcb 32 a2 fd			ld (debug_mark+2),a  
0bce 18 03			jr .pastdmark  
0bd0 ..			.dmark: db "AP3"  
0bd3 f1			.pastdmark: pop af  
0bd4			endm  
# End of macro DMARK
0bd4					CALLMONITOR 
0bd4 cd aa fd			call debug_vector  
0bd7				endm  
# End of macro CALLMONITOR
0bd7				endif 
0bd7			;	ld (store_tmppageid), hl 
0bd7			 
0bd7 3a b1 f9			ld a, (store_page+2) 
0bda 3c				inc a 
0bdb 32 b1 f9			ld (store_page+2), a 
0bde 32 a2 f9			ld (store_tmpext), a 
0be1				 
0be1				if DEBUG_STORESE 
0be1					DMARK "AP3" 
0be1 f5				push af  
0be2 3a f6 0b			ld a, (.dmark)  
0be5 32 a0 fd			ld (debug_mark),a  
0be8 3a f7 0b			ld a, (.dmark+1)  
0beb 32 a1 fd			ld (debug_mark+1),a  
0bee 3a f8 0b			ld a, (.dmark+2)  
0bf1 32 a2 fd			ld (debug_mark+2),a  
0bf4 18 03			jr .pastdmark  
0bf6 ..			.dmark: db "AP3"  
0bf9 f1			.pastdmark: pop af  
0bfa			endm  
# End of macro DMARK
0bfa					CALLMONITOR 
0bfa cd aa fd			call debug_vector  
0bfd				endm  
# End of macro CALLMONITOR
0bfd				endif 
0bfd 2a 9a f9			ld hl, (store_tmppageid) 
0c00 11 af f9			ld de, store_page 
0c03 cd d9 04			call storage_write_block 
0c06			 
0c06				; find free block 
0c06			 
0c06 11 00 00			ld de, 0			 ; file extent to locate 
0c09			 
0c09 21 40 00				ld hl, STORE_BLOCK_PHY 
0c0c cd a7 07				call storage_findnextid 
0c0f cd 07 10			call ishlzero 
0c12 ca 62 0b			jp z, .sa_notfound 
0c15			 
0c15					; TODO handle no space left 
0c15					 
0c15 22 9a f9				ld (store_tmppageid), hl 
0c18			 
0c18				if DEBUG_STORESE 
0c18					DMARK "AP4" 
0c18 f5				push af  
0c19 3a 2d 0c			ld a, (.dmark)  
0c1c 32 a0 fd			ld (debug_mark),a  
0c1f 3a 2e 0c			ld a, (.dmark+1)  
0c22 32 a1 fd			ld (debug_mark+1),a  
0c25 3a 2f 0c			ld a, (.dmark+2)  
0c28 32 a2 fd			ld (debug_mark+2),a  
0c2b 18 03			jr .pastdmark  
0c2d ..			.dmark: db "AP4"  
0c30 f1			.pastdmark: pop af  
0c31			endm  
# End of macro DMARK
0c31					CALLMONITOR 
0c31 cd aa fd			call debug_vector  
0c34				endm  
# End of macro CALLMONITOR
0c34				endif 
0c34					; init the buffer with zeros so we can id if the buffer is full or not 
0c34			 
0c34 e5					push hl 
0c35 c5					push bc 
0c36			 
0c36 21 af f9				ld hl, store_page 
0c39 06 40				ld b, STORE_BLOCK_PHY 
0c3b 3e 00				ld a, 0 
0c3d 77			.zeroblock:	ld (hl), a 
0c3e 23					inc hl 
0c3f 10 fc				djnz .zeroblock 
0c41			 
0c41 c1					pop bc 
0c42 e1					pop hl 
0c43			 
0c43					; construct block 
0c43			 
0c43 3a a3 f9				ld a, (store_tmpid) 
0c46 32 af f9				ld (store_page), a   ; file id 
0c49 3a a2 f9				ld a, (store_tmpext)   ; extent for this block 
0c4c 32 b0 f9				ld (store_page+1), a 
0c4f			 
0c4f e1					pop hl    ; get string to write 
0c50 06 3e				ld b, STORE_BLOCK_PHY-2       ; exclude count of file id and extent 
0c52 11 b1 f9				ld de, store_page+2 
0c55			 
0c55				if DEBUG_STORESE 
0c55					DMARK "AP5" 
0c55 f5				push af  
0c56 3a 6a 0c			ld a, (.dmark)  
0c59 32 a0 fd			ld (debug_mark),a  
0c5c 3a 6b 0c			ld a, (.dmark+1)  
0c5f 32 a1 fd			ld (debug_mark+1),a  
0c62 3a 6c 0c			ld a, (.dmark+2)  
0c65 32 a2 fd			ld (debug_mark+2),a  
0c68 18 03			jr .pastdmark  
0c6a ..			.dmark: db "AP5"  
0c6d f1			.pastdmark: pop af  
0c6e			endm  
# End of macro DMARK
0c6e					CALLMONITOR 
0c6e cd aa fd			call debug_vector  
0c71				endm  
# End of macro CALLMONITOR
0c71				endif 
0c71			 
0c71			 
0c71			 
0c71					; fill buffer with data until end of string or full block 
0c71			 
0c71 7e			.appd:		ld a, (hl) 
0c72 12					ld (de), a 
0c73 fe 00				cp 0 
0c75 28 04				jr z, .appdone 
0c77 23					inc hl 
0c78 13					inc de 
0c79 10 f6				djnz .appd 
0c7b			 
0c7b e5			.appdone:	push hl		 	; save current source in case we need to go around again 
0c7c f5					push af   		; save last byte dumped 
0c7d			 
0c7d			 
0c7d 2a 9a f9			ld hl, (store_tmppageid) 
0c80 11 af f9			ld de, store_page 
0c83				if DEBUG_STORESE 
0c83					DMARK "AP6" 
0c83 f5				push af  
0c84 3a 98 0c			ld a, (.dmark)  
0c87 32 a0 fd			ld (debug_mark),a  
0c8a 3a 99 0c			ld a, (.dmark+1)  
0c8d 32 a1 fd			ld (debug_mark+1),a  
0c90 3a 9a 0c			ld a, (.dmark+2)  
0c93 32 a2 fd			ld (debug_mark+2),a  
0c96 18 03			jr .pastdmark  
0c98 ..			.dmark: db "AP6"  
0c9b f1			.pastdmark: pop af  
0c9c			endm  
# End of macro DMARK
0c9c					CALLMONITOR 
0c9c cd aa fd			call debug_vector  
0c9f				endm  
# End of macro CALLMONITOR
0c9f				endif 
0c9f cd d9 04				call storage_write_block 
0ca2			 
0ca2			 
0ca2				; was that a full block of data written? 
0ca2				; any more to write out? 
0ca2			 
0ca2				; if yes then set vars and jump to start of function again 
0ca2			 
0ca2 f1					pop af 
0ca3 d1					pop de 
0ca4			 
0ca4 fe 00				cp 0		 ; no, string was fully written 
0ca6 c8					ret z 
0ca7			 
0ca7					; setup vars for next cycle 
0ca7			 
0ca7 3a a3 f9				ld a, (store_tmpid) 
0caa 6f					ld l, a 
0cab 26 00				ld h, 0 
0cad			 
0cad c3 64 0b			 	jp storage_append	 ; yes, need to write out some more 
0cb0			 
0cb0			 
0cb0			 
0cb0			 
0cb0			 
0cb0			 
0cb0			 
0cb0			if DEBUG_STORECF 
0cb0			storageput:	 
0cb0					ret 
0cb0			storageread: 
0cb0					ld hl, store_page 
0cb0					ld b, 200 
0cb0					ld a,0 
0cb0			.src:		ld (hl),a 
0cb0					inc hl 
0cb0					djnz .src 
0cb0					 
0cb0			 
0cb0					ld de, 0 
0cb0					ld bc, 1 
0cb0					ld hl, store_page 
0cb0					call cfRead 
0cb0			 
0cb0				call cfGetError 
0cb0				ld hl,scratch 
0cb0				call hexout 
0cb0				ld hl, scratch+2 
0cb0				ld a, 0 
0cb0				ld (hl),a 
0cb0				ld de, scratch 
0cb0				ld a,display_row_1 
0cb0				call str_at_display 
0cb0				call update_display 
0cb0			 
0cb0					ld hl, store_page 
0cb0					ld (os_cur_ptr),hl 
0cb0			 
0cb0					ret 
0cb0			endif 
0cb0			 
0cb0			 
0cb0			; Clear out the main buffer store (used to remove junk before writing a new block) 
0cb0			 
0cb0			storage_clear_page: 
0cb0 e5				push hl 
0cb1 d5				push de 
0cb2 c5				push bc 
0cb3 21 af f9			ld hl, store_page 
0cb6 3e 00			ld a, 0 
0cb8 77				ld (hl), a 
0cb9			 
0cb9 11 b0 f9			ld de, store_page+1 
0cbc 01 19 01			ld bc, STORE_BLOCK_LOG+1 
0cbf			 
0cbf ed b0			ldir 
0cc1				 
0cc1 c1				pop bc 
0cc2 d1				pop de 
0cc3 e1				pop hl 
0cc4 c9				ret 
0cc5			 
0cc5			; eof 
# End of file firmware_storage.asm
0cc5			  
0cc5			; support routines for above hardware abstraction layer  
0cc5			  
0cc5			include "firmware_general.asm"        ; general support functions  
0cc5			 
0cc5			; word look up 
0cc5			 
0cc5			; in 
0cc5			; a is the index 
0cc5			; hl is pointer start of array 
0cc5			; 
0cc5			; returns 
0cc5			; hl to the word 
0cc5			; 
0cc5			 
0cc5			table_lookup:  
0cc5 d5					push de 
0cc6 eb					ex de, hl 
0cc7			 
0cc7 6f					ld l, a 
0cc8 26 00				ld h, 0 
0cca 29					add hl, hl 
0ccb 19					add hl, de 
0ccc 7e					ld a, (hl) 
0ccd 23					inc hl 
0cce 66					ld h,(hl) 
0ccf 6f					ld l, a 
0cd0			 
0cd0 d1					pop de 
0cd1 c9					ret 
0cd2			 
0cd2			; Delay loops 
0cd2			 
0cd2			 
0cd2			 
0cd2			aDelayInMS: 
0cd2 c5				push bc 
0cd3 47				ld b,a 
0cd4			msdelay: 
0cd4 c5				push bc 
0cd5				 
0cd5			 
0cd5 01 41 00			ld bc,041h 
0cd8 cd f0 0c			call delayloop 
0cdb c1				pop bc 
0cdc 05				dec b 
0cdd 20 f5			jr nz,msdelay 
0cdf			 
0cdf			;if CPU_CLOCK_8MHZ 
0cdf			;msdelay8: 
0cdf			;	push bc 
0cdf			;	 
0cdf			; 
0cdf			;	ld bc,041h 
0cdf			;	call delayloop 
0cdf			;	pop bc 
0cdf			;	dec b 
0cdf			;	jr nz,msdelay8 
0cdf			;endif 
0cdf			 
0cdf			 
0cdf c1				pop bc 
0ce0 c9				ret 
0ce1			 
0ce1			 
0ce1			delay250ms: 
0ce1				;push de 
0ce1 01 00 40			ld bc, 04000h 
0ce4 c3 f0 0c			jp delayloop 
0ce7			delay500ms: 
0ce7				;push de 
0ce7 01 00 80			ld bc, 08000h 
0cea c3 f0 0c			jp delayloop 
0ced			delay1s: 
0ced				;push bc 
0ced			   ; Clobbers A, d and e 
0ced 01 00 00		    ld      bc,0      ; # 0ffffh = approx 1s 
0cf0			delayloop: 
0cf0 c5			    push bc 
0cf1			 
0cf1			if BASE_CPM 
0cf1				ld bc, CPM_DELAY_TUNE 
0cf1			.cpmloop: 
0cf1				push bc 
0cf1			 
0cf1			endif 
0cf1			 
0cf1			 
0cf1			 
0cf1			delayloopi: 
0cf1			;	push bc 
0cf1			;.dl: 
0cf1 cb 47		    bit     0,a    	; 8 
0cf3 cb 47		    bit     0,a    	; 8 
0cf5 cb 47		    bit     0,a    	; 8 
0cf7 e6 ff		    and     255  	; 7 
0cf9 0b			    dec     bc      	; 6 
0cfa 79			    ld      a,c     	; 4 
0cfb b0			    or      b     	; 4 
0cfc c2 f1 0c		    jp      nz,delayloopi   	; 10, total = 55 states/iteration 
0cff			    ; 65536 iterations * 55 states = 3604480 states = 2.00248 seconds 
0cff				;pop de 
0cff			;pop bc 
0cff			 
0cff			if BASE_CPM 
0cff				pop bc 
0cff				 
0cff			    dec     bc      	; 6 
0cff			    ld      a,c     	; 4 
0cff			    or      b     	; 4 
0cff			    jp      nz,.cpmloop   	; 10, total = 55 states/iteration 
0cff				 
0cff			 
0cff			endif 
0cff			;if CPU_CLOCK_8MHZ 
0cff			;    pop bc 
0cff			;    push bc 
0cff			;.dl8: 
0cff			;    bit     0,a    	; 8 
0cff			;    bit     0,a    	; 8 
0cff			;    bit     0,a    	; 8 
0cff			;    and     255  	; 7 
0cff			;    dec     bc      	; 6 
0cff			;    ld      a,c     	; 4 
0cff			;    or      b     	; 4 
0cff			;    jp      nz,.dl8   	; 10, total = 55 states/iteration 
0cff			;endif 
0cff			 
0cff			;if CPU_CLOCK_10MHZ 
0cff			;    pop bc 
0cff			;    push bc 
0cff			;.dl8: 
0cff			;    bit     0,a    	; 8 
0cff			;    bit     0,a    	; 8 
0cff			;    bit     0,a    	; 8 
0cff			;    and     255  	; 7 
0cff			;    dec     bc      	; 6 
0cff			;    ld      a,c     	; 4 
0cff			;    or      b     	; 4 
0cff			;    jp      nz,.dl8   	; 10, total = 55 states/iteration 
0cff			;endif 
0cff c1			    pop bc 
0d00			 
0d00 c9				ret 
0d01			 
0d01			 
0d01			 
0d01			; eof 
# End of file firmware_general.asm
0d01			include "firmware_display.asm"      ; frame buffer screen abstraction layer  
0d01			; display routines that use the physical hardware abstraction layer 
0d01			 
0d01			 
0d01			; Display an activity indicator 
0d01			; Each call returns the new char pointed to in hl 
0d01			 
0d01			active: 
0d01 3a fb fa			ld a, (display_active) 
0d04 fe 06			cp 6 
0d06			 
0d06 20 02			jr nz, .sne 
0d08				; gone past the last one reset sequence 
0d08 3e ff			ld a, 255 
0d0a			 
0d0a			.sne:   
0d0a				; get the next char in seq 
0d0a 3c				inc a 
0d0b 32 fb fa			ld (display_active), a 
0d0e			 
0d0e				; look up the string in the table 
0d0e 21 25 0d			ld hl, actseq 
0d11 cb 27			sla a 
0d13 cd de 0f			call addatohl 
0d16 cd bb 23			call loadwordinhl 
0d19			 
0d19				; forth will write the to string when pushing so move from rom to ram 
0d19			 
0d19 11 fc fa			ld de, display_active+1 
0d1c 01 02 00			ld bc, 2 
0d1f ed b0			ldir 
0d21			 
0d21 21 fc fa			ld hl, display_active+1 
0d24 c9				ret 
0d25				 
0d25				 
0d25			 
0d25			 
0d25			;db "|/-\|-\" 
0d25			 
0d25			actseq: 
0d25			 
0d25 33 0d		dw spin0 
0d27 35 0d		dw spin1 
0d29 37 0d		dw spin2 
0d2b 39 0d		dw spin3 
0d2d 37 0d		dw spin2 
0d2f 35 0d		dw spin1 
0d31 33 0d		dw spin0 
0d33			 
0d33 .. 00		spin0: db " ", 0 
0d35 .. 00		spin1: db "-", 0 
0d37 .. 00		spin2: db "+", 0 
0d39 .. 00		spin3: db "#", 0 
0d3b			 
0d3b			 
0d3b			; information window 
0d3b			 
0d3b			; pass hl with 1st string to display 
0d3b			; pass de with 2nd string to display 
0d3b			 
0d3b			info_panel: 
0d3b e5				push hl 
0d3c			 
0d3c 2a 01 fb			ld hl, (display_fb_active) 
0d3f e5				push hl    ; future de destination 
0d40 21 e6 fc				ld hl, display_fb0 
0d43 22 01 fb				ld (display_fb_active), hl 
0d46			 
0d46			;	call clear_display 
0d46			 
0d46				if BASE_CPM 
0d46				ld a, '.' 
0d46				else 
0d46 3e a5			ld a, 165 
0d48				endif 
0d48 cd af 0d			call fill_display 
0d4b			 
0d4b			 
0d4b 3e 55			ld a, display_row_3 + 5 
0d4d cd bd 0d			call str_at_display 
0d50			 
0d50 e1				pop hl 
0d51 d1				pop de 
0d52			 
0d52 e5				push hl 
0d53			 
0d53			 
0d53 3e 2d			ld a, display_row_2 + 5 
0d55 cd bd 0d			call str_at_display 
0d58			 
0d58			 
0d58 cd cd 0d			call update_display 
0d5b cd c0 1f			call next_page_prompt 
0d5e cd aa 0d			call clear_display 
0d61			 
0d61				 
0d61 21 45 fc				ld hl, display_fb1 
0d64 22 01 fb				ld (display_fb_active), hl 
0d67 cd cd 0d			call update_display 
0d6a			 
0d6a e1				pop hl 
0d6b			 
0d6b c9				ret 
0d6c			 
0d6c			 
0d6c			 
0d6c			 
0d6c			; TODO windowing? 
0d6c			 
0d6c			; TODO scroll line up 
0d6c			 
0d6c			scroll_up: 
0d6c			 
0d6c e5				push hl 
0d6d d5				push de 
0d6e c5				push bc 
0d6f			 
0d6f				; get frame buffer  
0d6f			 
0d6f 2a 01 fb			ld hl, (display_fb_active) 
0d72 e5				push hl    ; future de destination 
0d73			 
0d73 11 28 00			ld  de, display_cols 
0d76 19				add hl, de 
0d77			 
0d77 d1				pop de 
0d78			 
0d78				;ex de, hl 
0d78 01 9f 00			ld bc, display_fb_len -1  
0d7b			;if DEBUG_FORTH_WORDS 
0d7b			;	DMARK "SCL" 
0d7b			;	CALLMONITOR 
0d7b			;endif	 
0d7b ed b0			ldir 
0d7d			 
0d7d				; wipe bottom row 
0d7d			 
0d7d			 
0d7d 2a 01 fb			ld hl, (display_fb_active) 
0d80 11 a0 00			ld de, display_cols*display_rows 
0d83 19				add hl, de 
0d84 06 28			ld b, display_cols 
0d86 3e 20			ld a, ' ' 
0d88			.scwipe: 
0d88 77				ld (hl), a 
0d89 2b				dec hl 
0d8a 10 fc			djnz .scwipe 
0d8c			 
0d8c				;pop hl 
0d8c			 
0d8c c1				pop bc 
0d8d d1				pop de 
0d8e e1				pop hl 
0d8f			 
0d8f c9				ret 
0d90			 
0d90			 
0d90			;scroll_upo: 
0d90			;	ld de, display_row_1 
0d90			 ;	ld hl, display_row_2 
0d90			;	ld bc, display_cols 
0d90			;	ldir 
0d90			;	ld de, display_row_2 
0d90			 ;	ld hl, display_row_3 
0d90			;	ld bc, display_cols 
0d90			;	ldir 
0d90			;	ld de, display_row_3 
0d90			 ;	ld hl, display_row_4 
0d90			;	ld bc, display_cols 
0d90			;	ldir 
0d90			 
0d90			; TODO clear row 4 
0d90			 
0d90			;	ret 
0d90			 
0d90				 
0d90			scroll_down: 
0d90			 
0d90 e5				push hl 
0d91 d5				push de 
0d92 c5				push bc 
0d93			 
0d93				; get frame buffer  
0d93			 
0d93 2a 01 fb			ld hl, (display_fb_active) 
0d96			 
0d96 11 9f 00			ld de, display_fb_len - 1 
0d99 19				add hl, de 
0d9a			 
0d9a e5			push hl    ; future de destination 
0d9b			 
0d9b 11 28 00			ld  de, display_cols 
0d9e ed 52			sbc hl, de 
0da0			 
0da0			 
0da0 d1				pop de 
0da1			 
0da1			;	ex de, hl 
0da1 01 9f 00			ld bc, display_fb_len -1  
0da4			 
0da4			 
0da4				 
0da4			 
0da4 ed b0			ldir 
0da6			 
0da6				; wipe bottom row 
0da6			 
0da6			 
0da6			;	ld hl, (display_fb_active) 
0da6			;;	ld de, display_cols*display_rows 
0da6			;;	add hl, de 
0da6			;	ld b, display_cols 
0da6			;	ld a, ' ' 
0da6			;.scwiped: 
0da6			;	ld (hl), a 
0da6			;	dec hl 
0da6			;	djnz .scwiped 
0da6			 
0da6				;pop hl 
0da6			 
0da6 c1				pop bc 
0da7 d1				pop de 
0da8 e1				pop hl 
0da9			 
0da9 c9				ret 
0daa			;scroll_down: 
0daa			;	ld de, display_row_4 
0daa			;	ld hl, display_row_3 
0daa			;	ld bc, display_cols 
0daa			;	ldir 
0daa			;	ld de, display_row_3 
0daa			; 	ld hl, display_row_2 
0daa			;	ld bc, display_cols 
0daa			;	ldir 
0daa			;	ld de, display_row_2 
0daa			;	ld hl, display_row_1 
0daa			;	ld bc, display_cols 
0daa			;	ldir 
0daa			;;; TODO clear row 1 
0daa			;	ret 
0daa			 
0daa			 
0daa			 
0daa			 
0daa			 
0daa			; clear active frame buffer 
0daa			 
0daa			clear_display: 
0daa 3e 20			ld a, ' ' 
0dac c3 af 0d			jp fill_display 
0daf			 
0daf			; fill active frame buffer with a char in A 
0daf			 
0daf			fill_display: 
0daf 06 a0			ld b,display_fb_len 
0db1 2a 01 fb			ld hl, (display_fb_active) 
0db4 77			.fd1:	ld (hl),a 
0db5 23				inc hl 
0db6 10 fc			djnz .fd1 
0db8 23				inc hl 
0db9 3e 00			ld a,0 
0dbb 77				ld (hl),a 
0dbc			 
0dbc			 
0dbc c9				ret 
0dbd			; Write string (DE) at pos (A) to active frame buffer 
0dbd			 
0dbd 2a 01 fb		str_at_display:    ld hl,(display_fb_active) 
0dc0 06 00					ld b,0 
0dc2 4f					ld c,a 
0dc3 09					add hl,bc 
0dc4 1a			.sad1: 		LD   A, (DE)        ;Get character from string 
0dc5 b7			            OR   A              ;Null terminator? 
0dc6 c8			            RET  Z              ;Yes, so finished 
0dc7 77					ld (hl),a 
0dc8 23				inc hl 
0dc9 13			            INC  DE             ;Point to next character 
0dca 18 f8		            JR   .sad1     ;Repeat 
0dcc c9					ret 
0dcd			 
0dcd			; using current frame buffer write to physical display 
0dcd			 
0dcd			update_display: 
0dcd e5				push hl 
0dce 2a 01 fb			ld hl, (display_fb_active) 
0dd1 cd 46 72			call write_display 
0dd4 e1				pop hl 
0dd5 c9				ret 
0dd6			 
0dd6			; TODO scrolling 
0dd6			 
0dd6			 
0dd6			; move cursor right one char 
0dd6			cursor_right: 
0dd6			 
0dd6				; TODO shift right 
0dd6				; TODO if beyond max col 
0dd6				; TODO       cursor_next_line 
0dd6			 
0dd6 c9				ret 
0dd7			 
0dd7			 
0dd7			cursor_next_line: 
0dd7				; TODO first char 
0dd7				; TODO line down 
0dd7				; TODO if past last row 
0dd7				; TODO    scroll up 
0dd7			 
0dd7 c9				ret 
0dd8			 
0dd8			cursor_left: 
0dd8				; TODO shift left 
0dd8				; TODO if beyond left  
0dd8				; TODO     cursor prev line 
0dd8				 
0dd8 c9				ret 
0dd9			 
0dd9			cursor_prev_line: 
0dd9				; TODO last char 
0dd9				; TODO line up 
0dd9				; TODO if past first row 
0dd9				; TODO   scroll down 
0dd9			 
0dd9 c9				ret 
0dda			 
0dda			 
0dda			cout: 
0dda				; A - char 
0dda c9				ret 
0ddb			 
0ddb			 
0ddb			; Display a menu and allow item selection (optional toggle items) 
0ddb			; 
0ddb			; format: 
0ddb			; hl pointer to word array with zero term for items 
0ddb			; e.g.    db item1 
0ddb			;         db .... 
0ddb			;         db 0 
0ddb			; 
0ddb			; a = starting menu item  
0ddb			; 
0ddb			; de = pointer item toggle array   (todo) 
0ddb			; 
0ddb			; returns item selected in a 1-... 
0ddb			; returns 0 if back button pressed 
0ddb			; 
0ddb			; NOTE: Uses system frame buffer to display 
0ddb			; 
0ddb			; LEFT, Q = go back 
0ddb			; RIGHT, SPACE, CR = select 
0ddb			; UP, A - Up 
0ddb			; DOWN, Z - Down 
0ddb			 
0ddb			 
0ddb			 
0ddb			 
0ddb			 
0ddb			menu: 
0ddb			 
0ddb					; keep array pointer 
0ddb			 
0ddb 22 a8 f9				ld (store_tmp1), hl 
0dde 32 a6 f9				ld (store_tmp2), a 
0de1			 
0de1					; check for key bounce 
0de1			 
0de1			if BASE_KEV 
0de1			 
0de1 cd 91 75		.mbounce:	call cin 
0de4 fe 00				cp 0 
0de6 20 f9				jr nz, .mbounce 
0de8			endif 
0de8					; for ease use ex 
0de8			 
0de8					; use menu on fb0 so as not to disrupt user screens ie a menu popup 
0de8 21 e6 fc				ld hl, display_fb0 
0deb 22 01 fb				ld (display_fb_active), hl 
0dee			 
0dee cd aa 0d		.mloop:		call clear_display 
0df1 cd cd 0d				call update_display 
0df4			 
0df4					; draw selection id '>' at 1 
0df4			 
0df4					; init start of list display 
0df4			 
0df4 3e 05				ld a, 5 
0df6 32 a4 f9				ld (store_tmp3), a   ; display row count 
0df9 3a a6 f9				ld a,( store_tmp2) 
0dfc 32 a7 f9				ld (store_tmp2+1), a   ; display item count 
0dff			 
0dff					 
0dff			.mitem:	 
0dff			 
0dff			 
0dff 3a a7 f9				ld a,(store_tmp2+1) 
0e02 6f					ld l, a 
0e03 26 00				ld h, 0 
0e05 29					add hl, hl 
0e06 ed 5b a8 f9			ld de, (store_tmp1) 
0e0a 19					add hl, de 
0e0b 7e					ld a, (hl) 
0e0c 23					inc hl 
0e0d 66					ld h,(hl) 
0e0e 6f					ld l, a 
0e0f			 
0e0f cd 07 10				call ishlzero 
0e12 28 1a				jr z, .mdone 
0e14			 
0e14 eb					ex de, hl 
0e15 3a a4 f9				ld a, (store_tmp3) 
0e18 cd bd 0d				call str_at_display 
0e1b					 
0e1b			 
0e1b					; next item 
0e1b 3a a7 f9				ld a, (store_tmp2+1) 
0e1e 3c					inc a 
0e1f 32 a7 f9				ld (store_tmp2+1), a   ; display item count 
0e22			 
0e22			 		; next row 
0e22			 
0e22 3a a4 f9				ld a, (store_tmp3) 
0e25 c6 28				add display_cols 
0e27 32 a4 f9				ld (store_tmp3), a 
0e2a			 
0e2a					; at end of screen? 
0e2a			 
0e2a fe 10				cp display_rows*4 
0e2c 20 d1				jr nz, .mitem 
0e2e			 
0e2e			 
0e2e			.mdone: 
0e2e cd 07 10				call ishlzero 
0e31 28 08				jr z, .nodn 
0e33			 
0e33 3e 78				ld a, display_row_4 
0e35 11 b4 0e				ld de, .mdown 
0e38 cd bd 0d				call str_at_display 
0e3b			 
0e3b					; draw options to fill the screens with active item on line 1 
0e3b					; if current option is 2 or more then display ^ in top 
0e3b			 
0e3b 3a a6 f9		.nodn:		ld a, (store_tmp2) 
0e3e fe 00				cp 0 
0e40 28 08				jr z, .noup 
0e42			 
0e42 3e 00				ld a, 0 
0e44 11 b2 0e				ld de, .mup 
0e47 cd bd 0d				call str_at_display 
0e4a			 
0e4a 3e 02		.noup:		ld a, 2 
0e4c 11 b0 0e				ld de, .msel 
0e4f cd bd 0d				call str_at_display 
0e52			 
0e52					; if current option + 1 is not null then display V in bottom 
0e52					; get key 
0e52 cd cd 0d				call update_display 
0e55			 
0e55			 
0e55					; handle key 
0e55			 
0e55 cd 80 75				call cin_wait 
0e58			 
0e58 fe 05				cp KEY_UP 
0e5a 28 2b				jr z, .mgoup 
0e5c fe 61				cp 'a' 
0e5e 28 27				jr z, .mgoup 
0e60 fe 0a				cp KEY_DOWN 
0e62 28 32				jr z, .mgod 
0e64 fe 7a				cp 'z' 
0e66 28 2e				jr z, .mgod 
0e68 fe 20				cp ' ' 
0e6a 28 34				jr z, .goend 
0e6c fe 0c				cp KEY_RIGHT 
0e6e 28 30				jr z, .goend 
0e70 fe 0d				cp KEY_CR 
0e72 28 2c				jr z, .goend 
0e74 fe 71				cp 'q' 
0e76 28 0b				jr z, .goback 
0e78			 
0e78 fe 0b				cp KEY_LEFT 
0e7a 28 07				jr z, .goback 
0e7c fe 08				cp KEY_BS 
0e7e 28 03				jr z, .goback 
0e80 c3 ee 0d				jp .mloop 
0e83			 
0e83			.goback: 
0e83 3e 00			ld a, 0 
0e85 18 1d			jr .goend2 
0e87			 
0e87				; move up one 
0e87			.mgoup: 
0e87 3a a6 f9				ld a, (store_tmp2) 
0e8a fe 00				cp 0 
0e8c ca ee 0d				jp z, .mloop 
0e8f 3d					dec a 
0e90 32 a6 f9				ld (store_tmp2), a 
0e93 c3 ee 0d				jp .mloop 
0e96			 
0e96				; move down one 
0e96			.mgod: 
0e96 3a a6 f9				ld a, (store_tmp2) 
0e99 3c					inc a 
0e9a 32 a6 f9				ld (store_tmp2), a 
0e9d c3 ee 0d				jp .mloop 
0ea0			 
0ea0			 
0ea0			.goend: 
0ea0					; get selected item number 
0ea0			 
0ea0 3a a6 f9				ld a, (store_tmp2) 
0ea3 3c					inc a 
0ea4			 
0ea4			.goend2: 
0ea4 f5					push af 
0ea5			 
0ea5					; restore active fb 
0ea5					; TODO BUG assumes fb1 
0ea5			 
0ea5 21 45 fc				ld hl, display_fb1 
0ea8 22 01 fb				ld (display_fb_active), hl 
0eab			 
0eab					; restore main regs 
0eab			 
0eab			 
0eab cd cd 0d				call update_display 
0eae			 
0eae f1					pop af 
0eaf			 
0eaf c9				ret 
0eb0			 
0eb0 .. 00		.msel:   db ">",0 
0eb2 .. 00		.mup:   db "^",0 
0eb4 .. 00		.mdown:   db "v",0 
0eb6			 
0eb6			 
0eb6			; eof 
0eb6			 
# End of file firmware_display.asm
0eb6			include "firmware_maths.asm"     ; any odd maths stuff   TODO removed until I fix up the rng code  
0eb6			; random number generators 
0eb6			 
0eb6			 
0eb6			; https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random 
0eb6			 
0eb6			 
0eb6			;-----> Generate a random number 
0eb6			; output a=answer 0<=a<=255 
0eb6			; all registers are preserved except: af 
0eb6			random: 
0eb6 e5			        push    hl 
0eb7 d5			        push    de 
0eb8 2a e0 fa		        ld      hl,(randData) 
0ebb ed 5f		        ld      a,r 
0ebd 57			        ld      d,a 
0ebe 5e			        ld      e,(hl) 
0ebf 19			        add     hl,de 
0ec0 85			        add     a,l 
0ec1 ac			        xor     h 
0ec2 22 e0 fa		        ld      (randData),hl 
0ec5 d1			        pop     de 
0ec6 e1			        pop     hl 
0ec7 c9			        ret 
0ec8			 
0ec8			 
0ec8			; randData here must be a 2 byte seed located in ram. While this is a fast generator, it's generally not considered very good in terms of randomness. 
0ec8			 
0ec8			 
0ec8			 
0ec8			;------LFSR------ 
0ec8			;James Montelongo 
0ec8			;optimized by Spencer Putt 
0ec8			;out: 
0ec8			; a = 8 bit random number 
0ec8			RandLFSR: 
0ec8 21 e6 fa		        ld hl,LFSRSeed+4 
0ecb 5e			        ld e,(hl) 
0ecc 23			        inc hl 
0ecd 56			        ld d,(hl) 
0ece 23			        inc hl 
0ecf 4e			        ld c,(hl) 
0ed0 23			        inc hl 
0ed1 7e			        ld a,(hl) 
0ed2 47			        ld b,a 
0ed3 cb 13		        rl e  
0ed5 cb 12			rl d 
0ed7 cb 11		        rl c  
0ed9 17				rla 
0eda cb 13		        rl e  
0edc cb 12			rl d 
0ede cb 11		        rl c  
0ee0 17				rla 
0ee1 cb 13		        rl e  
0ee3 cb 12			rl d 
0ee5 cb 11		        rl c  
0ee7 17				rla 
0ee8 67			        ld h,a 
0ee9 cb 13		        rl e  
0eeb cb 12			rl d 
0eed cb 11		        rl c  
0eef 17				rla 
0ef0 a8			        xor b 
0ef1 cb 13		        rl e  
0ef3 cb 12			rl d 
0ef5 ac			        xor h 
0ef6 a9			        xor c 
0ef7 aa			        xor d 
0ef8 21 e8 fa		        ld hl,LFSRSeed+6 
0efb 11 e9 fa		        ld de,LFSRSeed+7 
0efe 01 07 00		        ld bc,7 
0f01 ed b8		        lddr 
0f03 12			        ld (de),a 
0f04 c9			        ret 
0f05			 
0f05			;While this may produces better numbers, it is slower, larger and requires a bigger seed than ionrandom. Assuming theres is a good seed to start, it should generate ~2^56 bytes before repeating. However if there is not a good seed(0 for example), then the numbers created will not be adequate. Unlike Ionrandom and its use of the r register, starting with the same seed the same numbers will be generated. With Ionrandom the code running may have an impact on the number generated. This means this method requires more initialization. 
0f05			 
0f05			;You can initialize with TI-OS's seeds, stored at seed1 and seed2, both are ti-floats but will serve the purpose.  
0f05			 
0f05			 
0f05			;This is a very fast, quality pseudo-random number generator. It combines a 16-bit Linear Feedback Shift Register and a 16-bit LCG. 
0f05			 
0f05			prng16: 
0f05			;Inputs: 
0f05			;   (seed1) contains a 16-bit seed value 
0f05			;   (seed2) contains a NON-ZERO 16-bit seed value 
0f05			;Outputs: 
0f05			;   HL is the result 
0f05			;   BC is the result of the LCG, so not that great of quality 
0f05			;   DE is preserved 
0f05			;Destroys: 
0f05			;   AF 
0f05			;cycle: 4,294,901,760 (almost 4.3 billion) 
0f05			;160cc 
0f05			;26 bytes 
0f05 2a da fa		    ld hl,(seed1) 
0f08 44			    ld b,h 
0f09 4d			    ld c,l 
0f0a 29			    add hl,hl 
0f0b 29			    add hl,hl 
0f0c 2c			    inc l 
0f0d 09			    add hl,bc 
0f0e 22 da fa		    ld (seed1),hl 
0f11 2a d8 fa		    ld hl,(seed2) 
0f14 29			    add hl,hl 
0f15 9f			    sbc a,a 
0f16 e6 2d		    and %00101101 
0f18 ad			    xor l 
0f19 6f			    ld l,a 
0f1a 22 d8 fa		    ld (seed2),hl 
0f1d 09			    add hl,bc 
0f1e c9			    ret 
0f1f			 
0f1f			;On their own, LCGs and LFSRs don't produce great results and are generally very cyclical, but they are very fast to compute. The 16-bit LCG in the above example will bounce around and reach each number from 0 to 65535, but the lower bits are far more predictable than the upper bits. The LFSR mixes up the predictability of a given bit's state, but it hits every number except 0, meaning there is a slightly higher chance of any given bit in the result being a 1 instead of a 0. It turns out that by adding together the outputs of these two generators, we can lose the predictability of a bit's state, while ensuring it has a 50% chance of being 0 or 1. As well, since the periods, 65536 and 65535 are coprime, then the overall period of the generator is 65535*65536, which is over 4 billion.  
0f1f			 
0f1f			rand32: 
0f1f			;Inputs: 
0f1f			;   (seed1_0) holds the lower 16 bits of the first seed 
0f1f			;   (seed1_1) holds the upper 16 bits of the first seed 
0f1f			;   (seed2_0) holds the lower 16 bits of the second seed 
0f1f			;   (seed2_1) holds the upper 16 bits of the second seed 
0f1f			;   **NOTE: seed2 must be non-zero 
0f1f			;Outputs: 
0f1f			;   HL is the result 
0f1f			;   BC,DE can be used as lower quality values, but are not independent of HL. 
0f1f			;Destroys: 
0f1f			;   AF 
0f1f			;Tested and passes all CAcert tests 
0f1f			;Uses a very simple 32-bit LCG and 32-bit LFSR 
0f1f			;it has a period of 18,446,744,069,414,584,320 
0f1f			;roughly 18.4 quintillion. 
0f1f			;LFSR taps: 0,2,6,7  = 11000101 
0f1f			;291cc 
0f1f			;seed1_0=$+1 
0f1f			;    ld hl,12345 
0f1f			;seed1_1=$+1 
0f1f			;    ld de,6789 
0f1f			;    ld b,h 
0f1f			;    ld c,l 
0f1f			;    add hl,hl \ rl e \ rl d 
0f1f			;    add hl,hl \ rl e \ rl d 
0f1f			;    inc l 
0f1f			;    add hl,bc 
0f1f			;    ld (seed1_0),hl 
0f1f			;    ld hl,(seed1_1) 
0f1f			;    adc hl,de 
0f1f			;    ld (seed1_1),hl 
0f1f			;    ex de,hl 
0f1f			;seed2_0=$+1 
0f1f			;    ld hl,9876 
0f1f			;seed2_1=$+1 
0f1f			;    ld bc,54321 
0f1f			;    add hl,hl \ rl c \ rl b 
0f1f			;    ld (seed2_1),bc 
0f1f			;    sbc a,a 
0f1f			;    and %11000101 
0f1f			;    xor l 
0f1f			;    ld l,a 
0f1f			;    ld (seed2_0),hl 
0f1f			;    ex de,hl 
0f1f			;    add hl,bc 
0f1f			;    ret 
0f1f			; 
0f1f			 
0f1f			; 16-bit xorshift pseudorandom number generator by John Metcalf 
0f1f			; 20 bytes, 86 cycles (excluding ret) 
0f1f			 
0f1f			; returns   hl = pseudorandom number 
0f1f			; corrupts   a 
0f1f			 
0f1f			; generates 16-bit pseudorandom numbers with a period of 65535 
0f1f			; using the xorshift method: 
0f1f			 
0f1f			; hl ^= hl << 7 
0f1f			; hl ^= hl >> 9 
0f1f			; hl ^= hl << 8 
0f1f			 
0f1f			; some alternative shift triplets which also perform well are: 
0f1f			; 6, 7, 13; 7, 9, 13; 9, 7, 13. 
0f1f			 
0f1f			;  org 32768 
0f1f			 
0f1f			xrnd: 
0f1f 2a de fa		  ld hl,(xrandc)       ; seed must not be 0 
0f22 3e 00		  ld a,0 
0f24 bd			  cp l 
0f25 20 02		  jr nz, .xrnd1 
0f27 2e 01		  ld l, 1 
0f29			.xrnd1: 
0f29			 
0f29 7c			  ld a,h 
0f2a 1f			  rra 
0f2b 7d			  ld a,l 
0f2c 1f			  rra 
0f2d ac			  xor h 
0f2e 67			  ld h,a 
0f2f 7d			  ld a,l 
0f30 1f			  rra 
0f31 7c			  ld a,h 
0f32 1f			  rra 
0f33 ad			  xor l 
0f34 6f			  ld l,a 
0f35 ac			  xor h 
0f36 67			  ld h,a 
0f37			 
0f37 22 de fa		  ld (xrandc),hl 
0f3a			 
0f3a c9			  ret 
0f3b			;  
0f3b			 
0f3b			 
0f3b			;;;; int maths 
0f3b			 
0f3b			; https://map.grauw.nl/articles/mult_div_shifts.php 
0f3b			; Divide 16-bit values (with 16-bit result) 
0f3b			; In: Divide BC by divider DE 
0f3b			; Out: BC = result, HL = rest 
0f3b			; 
0f3b			Div16: 
0f3b 21 00 00		    ld hl,0 
0f3e 78			    ld a,b 
0f3f 06 08		    ld b,8 
0f41			Div16_Loop1: 
0f41 17			    rla 
0f42 ed 6a		    adc hl,hl 
0f44 ed 52		    sbc hl,de 
0f46 30 01		    jr nc,Div16_NoAdd1 
0f48 19			    add hl,de 
0f49			Div16_NoAdd1: 
0f49 10 f6		    djnz Div16_Loop1 
0f4b 17			    rla 
0f4c 2f			    cpl 
0f4d 47			    ld b,a 
0f4e 79			    ld a,c 
0f4f 48			    ld c,b 
0f50 06 08		    ld b,8 
0f52			Div16_Loop2: 
0f52 17			    rla 
0f53 ed 6a		    adc hl,hl 
0f55 ed 52		    sbc hl,de 
0f57 30 01		    jr nc,Div16_NoAdd2 
0f59 19			    add hl,de 
0f5a			Div16_NoAdd2: 
0f5a 10 f6		    djnz Div16_Loop2 
0f5c 17			    rla 
0f5d 2f			    cpl 
0f5e 41			    ld b,c 
0f5f 4f			    ld c,a 
0f60 c9			ret 
0f61			 
0f61			 
0f61			;http://z80-heaven.wikidot.com/math 
0f61			; 
0f61			;Inputs: 
0f61			;     DE and A are factors 
0f61			;Outputs: 
0f61			;     A is not changed 
0f61			;     B is 0 
0f61			;     C is not changed 
0f61			;     DE is not changed 
0f61			;     HL is the product 
0f61			;Time: 
0f61			;     342+6x 
0f61			; 
0f61			Mult16: 
0f61			 
0f61 06 08		     ld b,8          ;7           7 
0f63 21 00 00		     ld hl,0         ;10         10 
0f66 29			       add hl,hl     ;11*8       88 
0f67 07			       rlca          ;4*8        32 
0f68 30 01		       jr nc,$+3     ;(12|18)*8  96+6x 
0f6a 19			         add hl,de   ;--         -- 
0f6b 10 f9		       djnz $-5      ;13*7+8     99 
0f6d c9			ret 
0f6e			 
0f6e			; 
0f6e			; Square root of 16-bit value 
0f6e			; In:  HL = value 
0f6e			; Out:  D = result (rounded down) 
0f6e			; 
0f6e			;Sqr16: 
0f6e			;    ld de,#0040 
0f6e			;    ld a,l 
0f6e			;    ld l,h 
0f6e			;    ld h,d 
0f6e			;    or a 
0f6e			;    ld b,8 
0f6e			;Sqr16_Loop: 
0f6e			;    sbc hl,de 
0f6e			;    jr nc,Sqr16_Skip 
0f6e			;    add hl,de 
0f6e			;Sqr16_Skip: 
0f6e			;    ccf 
0f6e			;    rl d 
0f6e			;    add a,a 
0f6e			;    adc hl,hl 
0f6e			;    add a,a 
0f6e			;    adc hl,hl 
0f6e			;    djnz Sqr16_Loop 
0f6e			;    ret 
0f6e			; 
0f6e			; 
0f6e			; Divide 8-bit values 
0f6e			; In: Divide E by divider C 
0f6e			; Out: A = result, B = rest 
0f6e			; 
0f6e			Div8: 
0f6e af			    xor a 
0f6f 06 08		    ld b,8 
0f71			Div8_Loop: 
0f71 cb 13		    rl e 
0f73 17			    rla 
0f74 91			    sub c 
0f75 30 01		    jr nc,Div8_NoAdd 
0f77 81			    add a,c 
0f78			Div8_NoAdd: 
0f78 10 f7		    djnz Div8_Loop 
0f7a 47			    ld b,a 
0f7b 7b			    ld a,e 
0f7c 17			    rla 
0f7d 2f			    cpl 
0f7e c9			    ret 
0f7f			 
0f7f			; 
0f7f			; Multiply 8-bit value with a 16-bit value (unrolled) 
0f7f			; In: Multiply A with DE 
0f7f			; Out: HL = result 
0f7f			; 
0f7f			Mult12U: 
0f7f 2e 00		    ld l,0 
0f81 87			    add a,a 
0f82 30 01		    jr nc,Mult12U_NoAdd0 
0f84 19			    add hl,de 
0f85			Mult12U_NoAdd0: 
0f85 29			    add hl,hl 
0f86 87			    add a,a 
0f87 30 01		    jr nc,Mult12U_NoAdd1 
0f89 19			    add hl,de 
0f8a			Mult12U_NoAdd1: 
0f8a 29			    add hl,hl 
0f8b 87			    add a,a 
0f8c 30 01		    jr nc,Mult12U_NoAdd2 
0f8e 19			    add hl,de 
0f8f			Mult12U_NoAdd2: 
0f8f 29			    add hl,hl 
0f90 87			    add a,a 
0f91 30 01		    jr nc,Mult12U_NoAdd3 
0f93 19			    add hl,de 
0f94			Mult12U_NoAdd3: 
0f94 29			    add hl,hl 
0f95 87			    add a,a 
0f96 30 01		    jr nc,Mult12U_NoAdd4 
0f98 19			    add hl,de 
0f99			Mult12U_NoAdd4: 
0f99 29			    add hl,hl 
0f9a 87			    add a,a 
0f9b 30 01		    jr nc,Mult12U_NoAdd5 
0f9d 19			    add hl,de 
0f9e			Mult12U_NoAdd5: 
0f9e 29			    add hl,hl 
0f9f 87			    add a,a 
0fa0 30 01		    jr nc,Mult12U_NoAdd6 
0fa2 19			    add hl,de 
0fa3			Mult12U_NoAdd6: 
0fa3 29			    add hl,hl 
0fa4 87			    add a,a 
0fa5 d0			    ret nc 
0fa6 19			    add hl,de 
0fa7 c9			    ret 
0fa8			 
0fa8			; 
0fa8			; Multiply 8-bit value with a 16-bit value (right rotating) 
0fa8			; In: Multiply A with DE 
0fa8			;      Put lowest value in A for most efficient calculation 
0fa8			; Out: HL = result 
0fa8			; 
0fa8			Mult12R: 
0fa8 21 00 00		    ld hl,0 
0fab			Mult12R_Loop: 
0fab cb 3f		    srl a 
0fad 30 01		    jr nc,Mult12R_NoAdd 
0faf 19			    add hl,de 
0fb0			Mult12R_NoAdd: 
0fb0 cb 23		    sla e 
0fb2 cb 12		    rl d 
0fb4 b7			    or a 
0fb5 c2 ab 0f		    jp nz,Mult12R_Loop 
0fb8 c9			    ret 
0fb9			 
0fb9			; 
0fb9			; Multiply 16-bit values (with 32-bit result) 
0fb9			; In: Multiply BC with DE 
0fb9			; Out: BCHL = result 
0fb9			; 
0fb9			Mult32: 
0fb9 79			    ld a,c 
0fba 48			    ld c,b 
0fbb 21 00 00		    ld hl,0 
0fbe 06 10		    ld b,16 
0fc0			Mult32_Loop: 
0fc0 29			    add hl,hl 
0fc1 17			    rla 
0fc2 cb 11		    rl c 
0fc4 30 07		    jr nc,Mult32_NoAdd 
0fc6 19			    add hl,de 
0fc7 ce 00		    adc a,0 
0fc9 d2 cd 0f		    jp nc,Mult32_NoAdd 
0fcc 0c			    inc c 
0fcd			Mult32_NoAdd: 
0fcd 10 f1		    djnz Mult32_Loop 
0fcf 41			    ld b,c 
0fd0 4f			    ld c,a 
0fd1 c9			    ret 
0fd2			 
0fd2			 
0fd2			 
0fd2			; 
0fd2			; Multiply 8-bit values 
0fd2			; In:  Multiply H with E 
0fd2			; Out: HL = result 
0fd2			; 
0fd2			Mult8: 
0fd2 16 00		    ld d,0 
0fd4 6a			    ld l,d 
0fd5 06 08		    ld b,8 
0fd7			Mult8_Loop: 
0fd7 29			    add hl,hl 
0fd8 30 01		    jr nc,Mult8_NoAdd 
0fda 19			    add hl,de 
0fdb			Mult8_NoAdd: 
0fdb 10 fa		    djnz Mult8_Loop 
0fdd c9			    ret 
0fde			 
0fde			 
0fde			 
0fde			 
0fde			 
0fde			 
0fde			 
0fde			 
0fde			;;http://z80-heaven.wikidot.com/math 
0fde			;;This divides DE by BC, storing the result in DE, remainder in HL 
0fde			; 
0fde			;DE_Div_BC:          ;1281-2x, x is at most 16 
0fde			;     ld a,16        ;7 
0fde			;     ld hl,0        ;10 
0fde			;     jp $+5         ;10 
0fde			;.DivLoop: 
0fde			;       add hl,bc    ;-- 
0fde			;       dec a        ;64 
0fde			;       jr z,.DivLoopEnd        ;86 
0fde			; 
0fde			;       sla e        ;128 
0fde			;       rl d         ;128 
0fde			;       adc hl,hl    ;240 
0fde			;       sbc hl,bc    ;240 
0fde			;       jr nc,.DivLoop ;23|21 
0fde			;       inc e        ;-- 
0fde			;       jp .DivLoop+1 
0fde			; 
0fde			;.DivLoopEnd: 
0fde			 
0fde			;HL_Div_C: 
0fde			;Inputs: 
0fde			;     HL is the numerator 
0fde			;     C is the denominator 
0fde			;Outputs: 
0fde			;     A is the remainder 
0fde			;     B is 0 
0fde			;     C is not changed 
0fde			;     DE is not changed 
0fde			;     HL is the quotient 
0fde			; 
0fde			;       ld b,16 
0fde			;       xor a 
0fde			;         add hl,hl 
0fde			;         rla 
0fde			;         cp c 
0fde			;         jr c,$+4 
0fde			;           inc l 
0fde			;           sub c 
0fde			;         djnz $-7 
0fde			 
0fde			; https://plutiedev.com/z80-add-8bit-to-16bit 
0fde			 
0fde			addatohl: 
0fde 85			    add   a, l    ; A = A+L 
0fdf 6f			    ld    l, a    ; L = A+L 
0fe0 8c			    adc   a, h    ; A = A+L+H+carry 
0fe1 95			    sub   l       ; A = H+carry 
0fe2 67			    ld    h, a    ; H = H+carry 
0fe3 c9			ret 
0fe4			 
0fe4			addatode: 
0fe4 83			    add   a, e    ; A = A+L 
0fe5 5f			    ld    e, a    ; L = A+L 
0fe6 8a			    adc   a, d    ; A = A+L+H+carry 
0fe7 93			    sub   e       ; A = H+carry 
0fe8 57			    ld    d, a    ; H = H+carry 
0fe9 c9			ret 
0fea			 
0fea			 
0fea			addatobc: 
0fea 81			    add   a, c    ; A = A+L 
0feb 4f			    ld    c, a    ; L = A+L 
0fec 88			    adc   a, b    ; A = A+L+H+carry 
0fed 91			    sub   c       ; A = H+carry 
0fee 47			    ld    b, a    ; H = H+carry 
0fef c9			ret 
0ff0			 
0ff0			subafromhl: 
0ff0			   ; If A=0 do nothing 
0ff0			    ; Otherwise flip A's sign. Since 
0ff0			    ; the upper byte becomes -1, also 
0ff0			    ; substract 1 from H. 
0ff0 ed 44		    neg 
0ff2 ca fb 0f		    jp    z, Skip 
0ff5 25			    dec   h 
0ff6			     
0ff6			    ; Now add the low byte as usual 
0ff6			    ; Two's complement takes care of 
0ff6			    ; ensuring the result is correct 
0ff6 85			    add   a, l 
0ff7 6f			    ld    l, a 
0ff8 8c			    adc   a, h 
0ff9 95			    sub   l 
0ffa 67			    ld    h, a 
0ffb			Skip: 
0ffb c9				ret 
0ffc			 
0ffc			 
0ffc			; compare hl and de 
0ffc			; returns:  
0ffc			; if hl = de, z=1, s=0, c0=0 
0ffc			; if hl > de, z=0, s=0, c=0 
0ffc			; if hl < de, z=0, s=1, c=1 
0ffc			cmp16:	 
0ffc b7				or a 
0ffd ed 52			sbc hl,de 
0fff e0				ret po 
1000 7c				ld a,h 
1001 1f				rra 
1002 ee 40			xor 01000000B 
1004 37				scf 
1005 8f				adc a,a 
1006 c9				ret 
1007			 
1007			 
1007			; test if hl contains zero   - A is destroyed 
1007			 
1007			ishlzero:    
1007 b7				or a     ; reset flags 
1008 7c				ld a, h 
1009 b5				or l        	 
100a			 
100a c9				ret 
100b			 
100b			 
100b			 
100b			 
100b			if FORTH_ENABLE_FLOATMATH 
100b			;include "float/bbcmath.z80" 
100b			include "float/lpfpcalc.asm" 
100b			endif 
100b			 
100b			 
100b			; eof 
100b			 
# End of file firmware_maths.asm
100b			include "firmware_strings.asm"   ; string handling  
100b			 
100b			 
100b			; TODO string len 
100b			; input text string, end on cr with zero term 
100b			; a offset into frame buffer to start prompt 
100b			; d is max length 
100b			; e is display size TODO 
100b			; c is current cursor position 
100b			; hl is ptr to where string will be stored and edited directly 
100b			 
100b			 
100b			; TODO check limit of buffer for new inserts 
100b			; TODO check insert does not push beyond buffer 
100b			; TODO scroll in a limited display area 
100b			; TODO scroll whole screen on page wrap 
100b			 
100b			 
100b			; TODO use LCD cursor? 
100b			 
100b			EDIT_V1: equ 0 
100b			EDIT_V2: equ 1 
100b			 
100b			 
100b			 
100b			if EDIT_V2 
100b			input_str: 
100b			 
100b 32 99 fd			    	ld (input_at_pos),a      ; save display position to start 
100e			;		ld (input_at_cursor),a	; save draw pos of cursor relative to start 
100e 22 9c fd				ld (input_start), hl     ; save ptr to buffer 
1011			;		ld a, c 
1011			;		call addatohl 
1011			;		ld (input_ptr), hl     ; save ptr to point under the cursor 
1011 7a					ld a,d 
1012 32 9b fd			        ld (input_size), a       ; save length of input area 
1015 79					ld a, c 
1016 32 8a fd				ld (input_cursor),a      ; init cursor start position relative to start of string 
1019 7b					ld a,e 
101a 32 9a fd			        ld (input_display_size), a       ; save length of input area that is displayed TODO 
101d			 
101d			 
101d					; add a trailing space to make screen refresh nicer 
101d			 
101d					;ld hl, (input_start) 
101d					;push hl 
101d					;ld a, 0 
101d					;call strlent 
101d					;ld a, l 
101d					;pop hl 
101d					;call addatohl 
101d					;dec hl 
101d					;ld a, ' ' 
101d					;ld (hl), a 
101d					;inc hl 
101d					;ld (hl), a 
101d					;inc hl 
101d					;ld a, 0 
101d					;ld (hl), a 
101d			 
101d			; TODO move out to cin as cursor shape is used by the 4x4 ??? 
101d					; init cursor shape if not set by the cin routines 
101d 21 f6 fa				ld hl, cursor_shape 
1020			if BASE_KEV 
1020 3e ff				ld a, 255 
1022			else 
1022					ld a, '#' 
1022			endif 
1022 77					ld (hl), a 
1023 23					inc hl 
1024 3e 00				ld a, 0 
1026 77					ld (hl), a 
1027			 
1027 3e 09				ld a, CUR_BLINK_RATE 
1029 32 95 fd				ld (input_cur_flash), a 
102c 3e 01				ld a, 1 
102e 32 94 fd				ld (input_cur_onoff),a 
1031			.inmain:	 
1031			 
1031 cd 59 11				call input_disp_ref 
1034			 
1034					; save current length of string 
1034			 
1034 2a 9c fd				ld hl, (input_start) 
1037 3e 00				ld a, 0 
1039 cd 4f 13				call strlent 
103c 7d					ld a,l 
103d 32 8f fd				ld (input_len), a 
1040			 
1040					;call input_disp_oncur 
1040			 
1040					; display current state of input buffer 
1040			 
1040					; clean any backspace chars 
1040			 
1040 3e 20				ld a, " " 
1042 32 f6 f0				ld (scratch),a 
1045 3e 00				ld a, 0 
1047 32 f7 f0				ld (scratch+1),a 
104a 3a 99 fd				ld a,(input_at_pos) 
104d 85					add l 
104e 11 f6 f0				ld de, scratch 
1051 cd bd 0d				call str_at_display 
1054			 
1054					; pause 1ms 
1054			 
1054 3e 01				ld a, 1 
1056 cd d2 0c				call aDelayInMS 
1059			 
1059			; display cursor if visible on this cycle 
1059			 
1059					; dec flash counter 
1059 3a 95 fd				ld a, (input_cur_flash) 
105c 3d					dec a 
105d 32 95 fd				ld (input_cur_flash), a 
1060 fe 00				cp 0 
1062 20 0d				jr nz, .inochgstate 
1064			 
1064			 
1064					; reset on change of state 
1064 3e 09				ld a, CUR_BLINK_RATE 
1066 32 95 fd				ld (input_cur_flash), a 
1069			 
1069					; change state 
1069 3a 94 fd				ld a,(input_cur_onoff) 
106c ed 44				neg 
106e 32 94 fd				ld (input_cur_onoff),a 
1071			 
1071			 
1071			 
1071			 
1071					; TODO is cursor visible? 
1071					; TODO if so then over write the char at curspos pos with the cursor shape 
1071			 
1071								 
1071			 
1071			.inochgstate: 
1071 3a 94 fd				ld a,(input_cur_onoff) 
1074 fe ff				cp 255 
1076 28 0e				jr z, .skipcursor 
1078 3a 99 fd				ld a, (input_at_pos) 
107b 47					ld b, a 
107c 3a 8a fd				ld a, (input_cursor) 
107f 80					add b 
1080 11 f6 fa				ld de, cursor_shape 
1083					 
1083 cd bd 0d				call str_at_display 
1086			 
1086			.skipcursor: 
1086				if DEBUG_INPUTV2 
1086			 
1086					ld a,(input_at_pos) 
1086					ld hl, LFSRSeed 
1086					call hexout 
1086					ld a, (input_cursor) 
1086					ld hl, LFSRSeed+2 
1086					call hexout 
1086					ld a,(input_size) 
1086					ld hl, LFSRSeed+4 
1086					call hexout 
1086			 
1086					ld a,(input_cur_onoff) 
1086					ld hl, LFSRSeed+6 
1086					call hexout 
1086			 
1086					ld a,(input_cur_flash) 
1086					ld hl, LFSRSeed+8 
1086					call hexout 
1086			 
1086					ld a,(input_len) 
1086					ld hl, LFSRSeed+10 
1086					call hexout 
1086					ld hl, LFSRSeed+12 
1086					ld a, 0 
1086					ld (hl),a 
1086					ld a, display_row_4 
1086					ld de, LFSRSeed 
1086					call str_at_display 
1086				endif 
1086 cd cd 0d				call update_display 
1089			 
1089					; TODO keyboard processing 
1089			 
1089			if BASE_CPM 
1089					call cin_wait 
1089			else 
1089 cd 91 75				call cin    ; _wait 
108c			endif 
108c fe 00				cp 0 
108e ca 31 10				jp z, .inmain 
1091			 
1091 fe 0b				cp KEY_LEFT    ; cursor left 
1093 ca 4b 11				jp z, input_left 
1096				 
1096 fe 0c				cp KEY_RIGHT      ; cursor right 
1098 ca 52 11				jp z, input_right 
109b			 
109b fe 0d				cp KEY_CR 
109d c8					ret z 
109e			 
109e fe 08				cp KEY_BS 
10a0 ca c0 11				jp z, input_delchar 
10a3			 
10a3 fe 06				cp KEY_NEXTWORD 
10a5 ca cc 10				jp z, input_nxtword 
10a8			 
10a8 fe 07				cp KEY_PREVWORD 
10aa ca f3 10				jp z, input_prvword 
10ad			 
10ad fe 0e				cp KEY_HOME    ; jump to start of line 
10af 20 08				jr nz, .ikh 
10b1 3e 00				ld a, 0 
10b3 32 8a fd				ld (input_cursor), a 
10b6 ca 31 10				jp z, .inmain 
10b9			.ikh: 
10b9			 
10b9 fe 0f				cp KEY_END     ; jump to end of line 
10bb 20 09				jr nz, .ike 
10bd 3a 8f fd				ld a, (input_len) 
10c0 32 8a fd				ld (input_cursor),a 
10c3 ca 31 10				jp z, .inmain 
10c6			.ike: 
10c6 fe 05			        cp KEY_UP      ; recall last command 
10c8 c8					ret z 
10c9			;jr nz, .irec 
10c9			; TODO next word 
10c9			; TODO prev word 
10c9			;  
10c9			; 
10c9			;	ld hl, scratch 
10c9			;	ld de, os_last_cmd 
10c9			;	call strcpy 
10c9			;		jp  .inmain 
10c9			.irec: 
10c9			;		jr .instr1 
10c9			 
10c9			 
10c9			 
10c9					; if any keys not intercepted by above but are special keys like function keys then return them to the program 
10c9			 
10c9			; TODO return if any special keys are given 
10c9			;		ld l, a 
10c9			;		ld a, 28 ; KEY_F12   ; 27 
10c9			;		sub l 
10c9			;		ret m 
10c9			;		ld a, l 
10c9					; if no special key then insert as a char 
10c9			 
10c9 c3 92 11				jp input_inschr 
10cc			 
10cc				 
10cc			input_nxtword: 
10cc				; jump to start next word after the cursor 
10cc			 
10cc			.insknwn:	 
10cc cd 88 11				call input_curptr	 
10cf 7e					ld a,(hl)	 
10d0 fe 00				cp 0 
10d2 ca 31 10				jp z, .inmain    ; end of string 
10d5			 
10d5			; if we are on a word, then move off of it 
10d5			 
10d5 fe 20				cp ' ' 
10d7 28 06				jr z, .inspace     ; we are on space so eat the space until we hit non-space 
10d9 21 8a fd				ld hl, input_cursor 
10dc 34					inc (hl) 
10dd 18 ed				jr .insknwn 
10df			 
10df			.inspace: 
10df			 
10df cd 88 11				call input_curptr	 
10e2 7e					ld a,(hl)	 
10e3 fe 00				cp 0 
10e5 ca 31 10				jp z, .inmain    ; end of string 
10e8			 
10e8			; if we are on a word, then move off of it 
10e8			 
10e8 fe 20				cp ' ' 
10ea c2 31 10				jp nz, .inmain     ; we are on non space so at next word 
10ed 21 8a fd				ld hl, input_cursor 
10f0 34					inc (hl) 
10f1 18 ec				jr .inspace 
10f3			 
10f3			 
10f3			 
10f3			 
10f3			input_prvword: 
10f3				; jump to the start of previous word before the cursor 
10f3			 
10f3			; where are we to start with currently? 
10f3			 
10f3 cd 88 11				call input_curptr	 
10f6 7e					ld a, (hl) 
10f7 fe 20				cp ' ' 
10f9 28 1d				jr z, .inspacep     ; we are on space so eat the space until we hit non-space 
10fb			 
10fb			 
10fb			 
10fb			.inskpwn:	 
10fb 3a 8a fd				ld a,(input_cursor) 
10fe fe 00				cp 0 
1100 ca 31 10				jp z, .inmain    ; start of string 
1103			 
1103			;if we are on a word, then move off of it 
1103			 
1103 cd 88 11				call input_curptr	 
1106 7e					ld a, (hl) 
1107 fe 20				cp ' ' 
1109 28 06				jr z, .iwstart     ; we are on space so eat the space until we hit non-space 
110b					;jp z, .inmain    ; start of string 
110b 21 8a fd				ld hl, input_cursor 
110e 35					dec (hl) 
110f 18 ea				jr .inskpwn 
1111			.iwstart: 
1111 21 8a fd				ld hl, input_cursor 
1114 34					inc (hl) 
1115 c3 31 10				jp .inmain 
1118					 
1118			 
1118			.inspacep: 
1118			 
1118					;jp .inmain    ; start of string 
1118			 
1118			 
1118			 
1118 3a 8a fd				ld a,(input_cursor) 
111b fe 00				cp 0 
111d ca 31 10				jp z, .inmain    ; start of string 
1120			 
1120			; if we are on a word, then move off of it 
1120			 
1120 cd 88 11				call input_curptr	 
1123 7e					ld a, (hl) 
1124 fe 20				cp ' ' 
1126 c2 2f 11				jp nz, .incharp     ; we are on non space so at end of prev word 
1129 21 8a fd				ld hl, input_cursor 
112c 35					dec (hl) 
112d 18 e9				jr .inspacep 
112f			 
112f			 
112f			.incharp:	 
112f					; eat the word to get to the start 
112f 3a 8a fd				ld a,(input_cursor) 
1132 fe 00				cp 0 
1134 ca 31 10				jp z, .inmain    ; start of string 
1137			 
1137			; if we are on a word, then move off of it 
1137			 
1137 cd 88 11				call input_curptr	 
113a 7e					ld a, (hl) 
113b fe 20				cp ' ' 
113d 28 06				jr z, .ipwordst     ; we are on space so eat the space until we hit non-space 
113f 21 8a fd				ld hl, input_cursor 
1142 35					dec (hl) 
1143 18 ea				jr .incharp 
1145			.ipwordst: 
1145					; at space before the prev word so reposition over it 
1145 21 8a fd				ld hl, input_cursor 
1148 34					inc (hl) 
1149 18 b0				jr .inskpwn 
114b					 
114b			 
114b			 
114b			input_left: 
114b				; move cursor left 
114b 21 8a fd			ld hl, input_cursor 
114e 35				dec (hl) 
114f			;	cp 0 
114f			;	jp z, .inmain    ; ignore left as at the start of the string 
114f c3 31 10			jp .inmain 
1152			 
1152			input_right: 
1152				; move cursor right 
1152				 
1152				;ld a, (input_size) 
1152				;ld b, a 
1152 21 8a fd			ld hl, input_cursor 
1155 34				inc (hl) 
1156				;dec b 
1156				;cp 0 
1156				;jp z, .inmain   ; ignore as at end of the string buffer 
1156				;ld a, b 
1156				;inc a 
1156				;ld (input_cursor), a 
1156 c3 31 10			jp .inmain 
1159			 
1159			 
1159			 
1159			input_disp_ref: 
1159				; display the text from start of buffer (ie full refresh) 
1159 3a 99 fd			ld a, (input_at_pos) 
115c 2a 9c fd			ld hl,(input_start) 
115f eb				ex de, hl 
1160 cd bd 0d			call str_at_display  
1163 c9				ret 
1164			input_disp_oncur: 
1164				; display the text from cursor position to end of buffer 
1164				; TODO position start of string at cursor position on screen 
1164				; TODO draw from that point on 
1164 3a 8a fd			ld a, (input_cursor) 
1167 47				ld b, a 
1168 3a 99 fd			ld a, (input_at_pos) 
116b 80				add b 
116c 48				ld c, b     ; save a 
116d 78				ld a, b     ; inc string start for cursor 
116e 2a 9c fd			ld hl,(input_start) 
1171 cd de 0f			call addatohl 
1174 eb				ex de, hl 
1175 79				ld a, c 
1176 cd bd 0d			call str_at_display  
1179 c9				ret 
117a			 
117a			input_nxtw: 
117a				; Find next word 
117a c9				ret 
117b			 
117b			input_prvw: 
117b				; Find previous word 
117b c9				ret 
117c			 
117c			input_lenrem:   
117c				; Calculate the length of string remaining from current cursor 
117c				; position to end of buffer (exc null term) 
117c				 
117c 3a 8a fd			ld a, (input_cursor) 
117f 4f				ld c, a 
1180 3a 9b fd			ld a, (input_size) 
1183 91				sub c 
1184 06 00			ld b, 0 
1186 0d				dec c 
1187 c9				ret	 
1188			 
1188			input_curptr: 
1188				; calc address of the character under the cursor 
1188				 
1188 2a 9c fd			ld hl, (input_start) 
118b 3a 8a fd			ld a, (input_cursor) 
118e cd de 0f			call addatohl 
1191 c9				ret 
1192			 
1192			input_inschr: 
1192				; Insert char at cursor position 
1192 f5				push af   ; save char 
1193				;call input_lenrem    ; get bc length of remaining string 
1193			 
1193				 
1193 cd 88 11			call input_curptr 
1196			;	ld hl, (input_start) 
1196			;	ld a, (input_cursor) 
1196			;	call addatohl 
1196				;push hl   ; save to come back to 
1196			 
1196				; shift everything up one to end of buffer 
1196			 
1196				;push hl 
1196				;dec de 
1196				;inc de 
1196			;	ldir 
1196				 
1196				;pop hl 
1196			 
1196				; are we adding to the end of line? 
1196			 
1196 3a 8a fd			ld a, (input_cursor) 
1199 47				ld b, a 
119a 3a 8f fd			ld a, (input_len) 
119d b8				cp b 
119e 20 09			jr nz, .insmid   ; no, insert in middle of text 
11a0			 
11a0				; tack on the end of the line 
11a0 f1				pop af 
11a1 77				ld (hl), a   ; save new char 
11a2 23				inc hl 
11a3 3e 00			ld a, 0 
11a5 77				ld (hl), a 
11a6 c3 52 11			jp input_right 
11a9				 
11a9			.insmid: 
11a9				; hl has insertion point so move everything up one to allow for insertion 
11a9				;call input_shiftright 
11a9 f1				pop af 
11aa			 
11aa			.shufinsmid: 
11aa 47				ld b, a     ; b contains new char, c prev char at this position  
11ab 7e				ld a, (hl) 
11ac			 
11ac fe 00			cp 0    ; at end of string need to then dump new char and add term 
11ae 28 07			jr z, .endinsmid 
11b0 4f				ld c, a 
11b1 78				ld a, b 
11b2 77				ld (hl), a 
11b3 23				inc hl 
11b4 79				ld a, c 
11b5 18 f3			jr .shufinsmid 
11b7				 
11b7			 
11b7			 
11b7			 
11b7			.endinsmid: 
11b7 78				ld a, b 
11b8 77				ld (hl), a 
11b9 23				inc hl 
11ba 3e 00			ld a, 0 
11bc 77				ld (hl), a 
11bd			 
11bd			 
11bd			;	ld (hl), a   ; save new char 
11bd			 
11bd c3 52 11			jp input_right 
11c0			 
11c0			;input_shiftright: 
11c0			;	; shift text right at cursor, hl has shift start 
11c0			;	push hl 
11c0			;	push de 
11c0			;	push bc 
11c0			; 
11c0			; 
11c0			;	; move to end of string past zero term 
11c0			;	ld hl,(input_start) 
11c0			;	ld a, (input_len) 
11c0			;	call addatohl 
11c0			;	inc hl 
11c0			;;	inc hl 
11c0			;;	inc hl 
11c0			;	ld a, 0 
11c0			;	ld (hl), a 
11c0			;;	dec hl 
11c0			;	 
11c0			;;	ld (hl), a 
11c0			;;	dec hl 
11c0			; 
11c0			;	push hl 
11c0			;	pop de 
11c0			;	inc de 
11c0			;	 
11c0			; 
11c0			;;	ld hl,(input_start) 
11c0			;;	ld a, (input_cursor) 
11c0			;;	call addatohl 
11c0			; 
11c0			; 
11c0			;	; calc how many bytes from cursor pos to end of string we need to shift 
11c0			;	call input_lenrem    ; get bc length of remaining string 
11c0			;	;ld a, (input_cursor) 
11c0			;	;ld c, a 
11c0			;	ld a, (input_len) 
11c0			;	cp 2 
11c0			;	jr z, .iskipzero	 
11c0			;	;sub c 
11c0			;	;inc a 
11c0			;	;ld c, a 
11c0			;	;ld b, 0 
11c0			;	inc c 
11c0			;	inc c 
11c0			;	; move data 
11c0			;	lddr 
11c0			;.iskipzero: 
11c0			; 
11c0			;	pop bc 
11c0			;	pop de 
11c0			;	pop hl 
11c0			;	ret	 
11c0			 
11c0			input_delchar: 
11c0				; Delete char at cursor position 
11c0 cd 7c 11			call input_lenrem    ; get bc length of remaining string 
11c3 2a 9c fd			ld hl, (input_start) 
11c6 3a 8a fd			ld a, (input_cursor) 
11c9 cd de 0f			call addatohl 
11cc			 
11cc e5				push hl 
11cd d1				pop de 
11ce 1b				dec de 
11cf			 
11cf			.dl:	 
11cf ed a0			ldi  
11d1 7e				ld a, (hl) 
11d2 fe 00			cp 0 
11d4 28 02			jr z, .dldone 
11d6 18 f7			jr .dl 
11d8			.dldone: 
11d8 ed a0			ldi 
11da			 
11da c3 4b 11			jp input_left 
11dd			 
11dd			 
11dd			endif 
11dd			 
11dd			 
11dd			 
11dd			if EDIT_V1 
11dd			input_str: 
11dd			 
11dd				    	ld (input_at_pos),a      ; save display position to start 
11dd					add c 
11dd					ld (input_at_cursor),a	; save draw pos of cursor 
11dd					ld (input_start), hl     ; save ptr to buffer 
11dd					ld a, c 
11dd					call addatohl 
11dd					ld (input_ptr), hl     ; save ptr to point under the cursor 
11dd					ld a,d 
11dd				        ld (input_size), a       ; save length of input area 
11dd					ld a, c 
11dd					ld (input_cursor),a      ; init cursor start position  
11dd					ld a,e 
11dd				        ld (input_display_size), a       ; save length of input area that is displayed TODO 
11dd					 
11dd					 
11dd			 
11dd			;		ld a,(input_ptr) 
11dd			;		ld (input_under_cursor),a 	; save what is under the cursor 
11dd			 
11dd			; TODO move out to cin as cursor shape is used by the 4x4 ??? 
11dd					; init cursor shape if not set by the cin routines 
11dd					ld hl, cursor_shape 
11dd			if BASE_KEV 
11dd					ld a, 255 
11dd			else 
11dd					ld a, '#' 
11dd			endif 
11dd					ld (hl), a 
11dd					inc hl 
11dd					ld a, 0 
11dd					ld (hl), a 
11dd			 
11dd					ld a, CUR_BLINK_RATE 
11dd					ld (input_cur_flash), a 
11dd					ld a, 1 
11dd					ld (input_cur_onoff),a 
11dd			 
11dd			;	if DEBUG_INPUT 
11dd			;		push af 
11dd			;		ld a, 'I' 
11dd			;		ld (debug_mark),a 
11dd			;		pop af 
11dd			;		CALLMONITOR 
11dd			;	endif 
11dd			.is1:		; main entry loop 
11dd			 
11dd			 
11dd			 
11dd					; pause 1ms 
11dd			 
11dd					ld a, 1 
11dd					call aDelayInMS 
11dd			 
11dd					; dec flash counter 
11dd					ld a, (input_cur_flash) 
11dd					dec a 
11dd					ld (input_cur_flash), a 
11dd					cp 0 
11dd					jr nz, .nochgstate 
11dd			 
11dd			 
11dd					; change state 
11dd					ld a,(input_cur_onoff) 
11dd					neg 
11dd					ld (input_cur_onoff),a 
11dd			 
11dd			 
11dd					; reset on change of state 
11dd					ld a, CUR_BLINK_RATE 
11dd					ld (input_cur_flash), a 
11dd			 
11dd			.nochgstate: 
11dd					 
11dd					 
11dd			 
11dd					; display cursor  
11dd			 
11dd			;		ld hl, (input_start) 
11dd			;		ld a, (input_cursor) 
11dd			;		call addatohl 
11dd			 
11dd					; get char under cursor and replace with cursor 
11dd			ld hl, (input_ptr) 
11dd			;		ld a, (hl) 
11dd			;		ld (input_under_cursor),a 
11dd			;		ld a, '_' 
11dd			;		ld (hl), a 
11dd			 
11dd					; display string 
11dd			 
11dd					ld de, (input_start) 
11dd					ld a, (input_at_pos) 
11dd					call str_at_display 
11dd			;	        call update_display 
11dd			 
11dd					; find place to put the cursor 
11dd			;		add h 
11dd			;		ld l, display_row_1 
11dd			;		sub l 
11dd			; (input_at_pos) 
11dd					;ld c, a 
11dd			;		ld a, (input_cursor) 
11dd			;		ld l, (input_at_pos) 
11dd			;		;ld b, h 
11dd			;		add l 
11dd			;		ld (input_at_cursor),a 
11dd					;ld l,h 
11dd			 
11dd			;		ld h, 0 
11dd			;		ld l,(input_at_pos) 
11dd			;		ld a, (input_cursor) 
11dd			;		call addatohl 
11dd			;		ld a, 074H-19			; TODO BUG I dont know why offset is showing 74H 
11dd			;		call subafromhl 
11dd			;		ld a,l 
11dd			;		ld (input_at_cursor), a 
11dd			 
11dd				if DEBUG_INPUT 
11dd					ld a, (hardware_diag) 
11dd					cp 0 
11dd					jr z, .skip_input_diag 
11dd			 
11dd					ld a,(input_at_pos) 
11dd					ld hl, LFSRSeed 
11dd					call hexout 
11dd					ld a, (input_cursor) 
11dd					ld hl, LFSRSeed+2 
11dd					call hexout 
11dd					ld a,(input_at_cursor) 
11dd					ld hl, LFSRSeed+4 
11dd					call hexout 
11dd			 
11dd					ld a,(input_cur_onoff) 
11dd					ld hl, LFSRSeed+6 
11dd					call hexout 
11dd			 
11dd					ld a,(input_cur_flash) 
11dd					ld hl, LFSRSeed+8 
11dd					call hexout 
11dd			 
11dd					ld a,(input_len) 
11dd					ld hl, LFSRSeed+10 
11dd					call hexout 
11dd					ld hl, LFSRSeed+12 
11dd					ld a, 0 
11dd					ld (hl),a 
11dd					ld a, display_row_4 
11dd					ld de, LFSRSeed 
11dd					call str_at_display 
11dd					.skip_input_diag: 
11dd				endif 
11dd			 
11dd					; decide on if we are showing the cursor this time round 
11dd			 
11dd					ld a, (input_cur_onoff) 
11dd					cp 255 
11dd					jr z, .skipcur 
11dd			 
11dd			 
11dd					ld a,(input_at_cursor) 
11dd					ld de, cursor_shape 
11dd					call str_at_display 
11dd			 
11dd					; save length of current input string 
11dd					ld hl, (input_start) 
11dd					ld a, 0 
11dd					call strlent 
11dd					ld a,l 
11dd					ld (input_len),a 
11dd			 
11dd			.skipcur: 
11dd			 
11dd				        call update_display 
11dd					 
11dd			 
11dd			 
11dd					; wait 
11dd				 
11dd					; TODO loop without wait to flash the cursor and char under cursor	 
11dd					call cin    ; _wait 
11dd			 
11dd					cp 0 
11dd					jp z, .is1 
11dd			 
11dd					; get ptr to char to input into 
11dd			 
11dd					ld c,a 
11dd					ld hl, (input_start) 
11dd					ld a, (input_cursor) 
11dd					call addatohl 
11dd					ld (input_ptr), hl 
11dd					ld a,c 
11dd			 
11dd					; replace char under cursor 
11dd			 
11dd			;		ld hl, (input_ptr) 
11dd			;		ld a, (input_under_cursor) 	; get what is under the cursor 
11dd			;		ld (hl), a 
11dd			 
11dd			;	if DEBUG_INPUT 
11dd			;		push af 
11dd			;		ld a, 'i' 
11dd			;		ld (debug_mark),a 
11dd			;		pop af 
11dd			;		CALLMONITOR 
11dd			;	endif 
11dd					cp KEY_HOME 
11dd					jr nz, .iske 
11dd			 
11dd					ld a, (input_at_pos) 
11dd					ld (input_at_cursor),a 
11dd					ld a, 0 
11dd					ld (input_cursor), a 
11dd					jp .is1 
11dd					 
11dd			.iske:		cp KEY_END 
11dd					jr nz, .isknw 
11dd					jp .is1 
11dd			 
11dd			.isknw:		cp KEY_NEXTWORD 
11dd					jr nz, .iskpw 
11dd			 
11dd			.isknwm:	ld hl, (input_ptr) 
11dd					ld a,(hl)	 
11dd					cp 0 
11dd					jp z, .is1    ; end of string 
11dd					cp ' ' 
11dd					jp z, .is1    ; end of word 
11dd					inc hl 
11dd					ld (input_ptr), hl 
11dd					ld a, (input_at_cursor) 
11dd					inc a 
11dd					ld (input_at_cursor), a 
11dd					jr .isknwm 
11dd			 
11dd			.iskpw:		cp KEY_PREVWORD 
11dd					jr nz, .iskl 
11dd			.iskpwm:	 
11dd					ld hl, (input_ptr) 
11dd					ld a,(hl)	 
11dd					cp 0  
11dd					jp z, .is1    ; end of string 
11dd					cp ' ' 
11dd					jp z, .is1    ; end of word 
11dd					dec hl 
11dd					ld (input_ptr), hl 
11dd					ld a, (input_at_cursor) 
11dd					dec a 
11dd					ld (input_at_cursor), a 
11dd					jr .iskpwm 
11dd			 
11dd			 
11dd			.iskl:		cp KEY_LEFT 
11dd					jr nz, .isk1 
11dd			 
11dd					ld a, (input_cursor) 
11dd			 
11dd					cp 0 
11dd					jp z, .is1 		; at start of line to ignore  
11dd			 
11dd					dec  a 		; TODO check underflow 
11dd					ld (input_cursor), a 
11dd			 
11dd					ld hl, (input_ptr) 
11dd					dec hl 
11dd					ld (input_ptr), hl 
11dd					 
11dd					ld a, (input_at_cursor) 
11dd					dec a 
11dd					ld (input_at_cursor), a 
11dd			 
11dd					ld a, 1		; show cursor moving 
11dd					ld (input_cur_onoff),a 
11dd					ld a, CUR_BLINK_RATE 
11dd					ld (input_cur_flash), a 
11dd			 
11dd					jp .is1 
11dd			 
11dd			.isk1:		cp KEY_RIGHT 
11dd					jr nz, .isk2 
11dd			 
11dd					ld a,(input_len)		; TODO BUG why cant i load e direct? 
11dd					ld e,a 
11dd					ld a, (input_cursor) 
11dd					cp e 
11dd					jp z, .is1		; at the end of string so dont go right 
11dd			 
11dd					inc  a 		; TODO check overflow 
11dd					ld (input_cursor), a 
11dd			 
11dd					ld a, (input_at_cursor) 
11dd					inc a 
11dd					ld (input_at_cursor), a 
11dd			 
11dd					ld hl, (input_ptr) 
11dd					inc hl 
11dd					ld (input_ptr), hl 
11dd			 
11dd					ld a, 1		; show cursor moving 
11dd					ld (input_cur_onoff),a 
11dd					ld a, CUR_BLINK_RATE 
11dd					ld (input_cur_flash), a 
11dd			 
11dd					jp .is1 
11dd			 
11dd			.isk2:		cp KEY_UP 
11dd			 
11dd					jr nz, .isk3 
11dd			 
11dd					; swap last command with the current on 
11dd			 
11dd					; move cursor to start of string 
11dd					ld hl, (input_start) 
11dd					ld (input_ptr), hl 
11dd			 
11dd					ld a, (input_at_pos) 
11dd					ld (input_at_cursor), a 
11dd			 
11dd					ld a, 0 
11dd					ld (input_cursor), a 
11dd					 
11dd					; swap input and last command buffers 
11dd			 
11dd					ld hl, os_cli_cmd 
11dd					ld de, os_last_cmd 
11dd					ld b, 255 
11dd			.swap1:		ld a, (hl) 
11dd					ld c,a 
11dd					ld a, (de) 
11dd					ld (hl), a 
11dd					ld a,c 
11dd					ld (de),a 
11dd					inc hl 
11dd					inc de 
11dd					djnz .swap1 
11dd			 
11dd			 
11dd			 
11dd			 
11dd			 
11dd					jp .is1 
11dd			 
11dd			.isk3:		cp KEY_BS 
11dd					jr nz, .isk4 
11dd			 
11dd					ld a, (input_cursor) 
11dd			 
11dd					cp 0 
11dd					jp z, .is1 		; at start of line to ignore  
11dd			 
11dd					dec  a 		; TODO check underflow 
11dd					ld (input_cursor), a 
11dd			 
11dd					; hl is source 
11dd					; de needs to be source - 1 
11dd			 
11dd			;		ld a, 0 
11dd			;		dec hl 
11dd			;		ld (hl), a 
11dd			 
11dd					ld hl, (input_ptr) 
11dd					dec hl 
11dd					ld (input_ptr), hl 
11dd			 
11dd					; shift all data 
11dd			 
11dd					push hl 
11dd					inc hl 
11dd					pop de 
11dd					ld a, (input_len)		; TODO BUG WAS ld c, (input... 
11dd					ld c,a 
11dd					ld b,0 
11dd					ldir  
11dd			 
11dd			 
11dd			 
11dd			 
11dd					ld a, (input_at_cursor) 
11dd					dec a 
11dd					ld (input_at_cursor), a 
11dd			 
11dd			 
11dd					ld a, 1		; show cursor moving 
11dd					ld (input_cur_onoff),a 
11dd					ld a, CUR_BLINK_RATE 
11dd					ld (input_cur_flash), a 
11dd			 
11dd					; remove char 
11dd					ld a, (input_at_cursor) 
11dd					inc a 
11dd					ld de,.iblank 
11dd					call str_at_display 
11dd			 
11dd					jp .is1 
11dd			 
11dd			.isk4:		cp KEY_CR 
11dd					jr z, .endinput 
11dd			 
11dd					; else add the key press to the end 
11dd			 
11dd					ld c, a			; save key pressed 
11dd			 
11dd					ld a,(hl)		; get what is currently under char 
11dd			 
11dd					cp 0			; we are at the end of the string 
11dd					jr nz, .onchar 
11dd					 
11dd					; add a char to the end of the string 
11dd				 
11dd					ld (hl),c 
11dd					inc hl 
11dd			;		ld a,' ' 
11dd			;		ld (hl),a 
11dd			;		inc hl 
11dd					ld a,0 
11dd					ld (hl),a 
11dd					dec hl 
11dd			 
11dd					ld a, (input_cursor) 
11dd					inc a				; TODO check max string length and scroll  
11dd					ld (input_cursor), a		; inc cursor pos 
11dd							 
11dd					ld a, (input_at_cursor) 
11dd					inc a 
11dd					ld (input_at_cursor), a 
11dd			 
11dd					ld hl, (input_ptr) 
11dd					inc hl 
11dd					ld (input_ptr), hl 
11dd			 
11dd					ld hl, (input_ptr) 
11dd					inc hl 
11dd					ld (input_ptr), hl 
11dd			;	if DEBUG_INPUT 
11dd			;		push af 
11dd			;		ld a, '+' 
11dd			;		ld (debug_mark),a 
11dd			;		pop af 
11dd			;		CALLMONITOR 
11dd			;	endif 
11dd					ld a, 1		; show cursor moving 
11dd					ld (input_cur_onoff),a 
11dd					ld a, CUR_BLINK_RATE 
11dd					ld (input_cur_flash), a 
11dd					jp .is1 
11dd					 
11dd			 
11dd			 
11dd					; if on a char then insert 
11dd			.onchar: 
11dd			 
11dd					; TODO over flow check: make sure insert does not blow out buffer 
11dd			 
11dd					; need to do some maths to use lddr 
11dd			 
11dd					push hl   ; save char pos 
11dd					push bc 
11dd			 
11dd					ld hl, (input_start) 
11dd					ld a, (input_len) 
11dd					call addatohl  		; end of string 
11dd					inc hl 
11dd					inc hl		; past zero term 
11dd					push hl 
11dd					inc hl 
11dd					push hl  
11dd			 
11dd								; start and end of lddr set, now how much to move? 
11dd			 
11dd							 
11dd					ld a, (input_cursor)		; BUG TODO why cant i load directly into b??? 
11dd					ld b,a 
11dd					ld a,(input_len) 
11dd					ld e,a 
11dd					sub b 
11dd					inc a		;?? 
11dd					inc a		;?? 
11dd					inc a		;?? 
11dd			 
11dd					ld b,0 
11dd					ld c,a 
11dd			 
11dd				if DEBUG_INPUT 
11dd					push af 
11dd					ld a, 'i' 
11dd					ld (debug_mark),a 
11dd					pop af 
11dd			;		CALLMONITOR 
11dd				endif 
11dd					pop de 
11dd					pop hl 
11dd				if DEBUG_INPUT 
11dd					push af 
11dd					ld a, 'I' 
11dd					ld (debug_mark),a 
11dd					pop af 
11dd			;		CALLMONITOR 
11dd				endif 
11dd					lddr 
11dd				 
11dd			 
11dd			 
11dd					; TODO have a key for insert/overwrite mode???? 
11dd					pop bc 
11dd					pop hl 
11dd					ld (hl), c		; otherwise overwrite current char 
11dd					 
11dd			 
11dd			 
11dd			 
11dd					ld a, (input_cursor) 
11dd					inc  a 		; TODO check overflow 
11dd					ld (input_cursor), a 
11dd			 
11dd					ld a, (input_at_cursor) 
11dd					inc a 
11dd					ld (input_at_cursor), a 
11dd			 
11dd					jp .is1 
11dd			 
11dd			.endinput:	; TODO look for end of string 
11dd			 
11dd					; add trailing space for end of token 
11dd			 
11dd					ld hl, (input_start) 
11dd					ld a,(input_len) 
11dd					call addatohl 
11dd					ld a, ' ' 
11dd					ld (hl),a 
11dd					; TODO eof of parse marker 
11dd			 
11dd					inc hl 
11dd					ld a, 0 
11dd					ld (hl),a 
11dd			 
11dd			 
11dd					ret 
11dd			 
11dd			.iblank: db " ",0 
11dd			 
11dd			 
11dd			input_str_prev:	ld (input_at_pos), a 
11dd					ld (input_start), hl 
11dd					ld a,1			; add cursor 
11dd					ld (hl),a 
11dd					inc hl 
11dd					ld a,0 
11dd					ld (hl),a 
11dd					ld (input_ptr), hl 
11dd					ld a,d 
11dd					ld (input_size), a 
11dd					ld a,0 
11dd					ld (input_cursor),a 
11dd			.instr1:	 
11dd			 
11dd					; TODO do block cursor 
11dd					; TODO switch cursor depending on the modifer key 
11dd			 
11dd					; update cursor shape change on key hold 
11dd			 
11dd					ld hl, (input_ptr) 
11dd					dec hl 
11dd					ld a,(cursor_shape) 
11dd					ld (hl), a 
11dd			 
11dd					; display entered text 
11dd					ld a,(input_at_pos) 
11dd			            	CALL fLCD_Pos       ;Position cursor to location in A 
11dd			            	LD   de, (input_start) 
11dd			            	CALL fLCD_Str       ;Display string pointed to by DE 
11dd			 
11dd					call cin 
11dd					cp 0 
11dd					jr z, .instr1 
11dd			 
11dd					; proecess keyboard controls first 
11dd			 
11dd					ld hl,(input_ptr) 
11dd			 
11dd					cp KEY_CR	 ; pressing enter ends input 
11dd					jr z, .instrcr 
11dd			 
11dd					cp KEY_BS 	; back space 
11dd					jr nz, .instr2 
11dd					; process back space 
11dd			 
11dd					; TODO stop back space if at start of string 
11dd					dec hl 
11dd					dec hl ; to over write cursor 
11dd					ld a,(cursor_shape) 
11dd					;ld a,0 
11dd					ld (hl),a 
11dd					inc hl 
11dd					ld a," " 
11dd					ld (hl),a 
11dd					ld (input_ptr),hl 
11dd					 
11dd			 
11dd					jr .instr1 
11dd			 
11dd			.instr2:	cp KEY_LEFT    ; cursor left 
11dd					jr nz, .instr3 
11dd					dec hl 
11dd					ld (input_ptr),hl 
11dd					jr .instr1 
11dd				 
11dd			.instr3:	cp KEY_RIGHT      ; cursor right 
11dd					jr nz, .instr4 
11dd					inc hl 
11dd					ld (input_ptr),hl 
11dd					jr .instr1 
11dd			 
11dd			.instr4:	cp KEY_HOME    ; jump to start of line 
11dd					jr nz, .instr5 
11dd					dec hl 
11dd					ld (input_ptr),hl 
11dd					jr .instr1 
11dd			 
11dd			.instr5:	cp KEY_END     ; jump to end of line 
11dd					jr nz, .instr6 
11dd					dec hl 
11dd					ld (input_ptr),hl 
11dd					jr .instr1 
11dd			.instr6:        cp KEY_UP      ; recall last command 
11dd					jr nz, .instrnew 
11dd			 
11dd				ld hl, scratch 
11dd				ld de, os_last_cmd 
11dd				call strcpy 
11dd					jr .instr1 
11dd			 
11dd			 
11dd			.instrnew:	; no special key pressed to see if we have room to store it 
11dd			 
11dd					; TODO do string size test 
11dd			 
11dd					dec hl ; to over write cursor 
11dd					ld (hl),a 
11dd					inc hl 
11dd					ld a,(cursor_shape) 
11dd					ld (hl),a 
11dd					inc hl 
11dd					ld a,0 
11dd					ld (hl),a 
11dd			 
11dd					ld (input_ptr),hl 
11dd					 
11dd					jr .instr1 
11dd			.instrcr:	dec hl		; remove cursor 
11dd					ld a,' '	; TODO add a trailing space for safety 
11dd					ld (hl),a 
11dd					inc hl 
11dd					ld a,0 
11dd					ld (hl),a 
11dd			 
11dd			 
11dd					; if at end of line scroll up    
11dd					; TODO detecting only end of line 4 for scroll up  
11dd			 
11dd					;ld   
11dd			 
11dd					ret 
11dd			 
11dd			 
11dd			endif 
11dd			; strcpy hl = dest, de source 
11dd			 
11dd 1a			strcpy:   LD   A, (DE)        ;Get character from string 
11de b7			            OR   A              ;Null terminator? 
11df c8			            RET  Z              ;Yes, so finished 
11e0 1a					ld a,(de) 
11e1 77					ld (hl),a 
11e2 13			            INC  DE             ;Point to next character 
11e3 23					inc hl 
11e4 18 f7		            JR   strcpy       ;Repeat 
11e6 c9					ret 
11e7			 
11e7			 
11e7			; TODO string_at  
11e7			; pass string which starts with lcd offset address and then null term string 
11e7			 
11e7			; TODO string to dec 
11e7			; TODO string to hex 
11e7			; TODO byte to string hex 
11e7			; TODO byte to string dec 
11e7			 
11e7			 
11e7			 
11e7			; from z80uartmonitor 
11e7			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
11e7			; OUTPUT VALUE OF A IN HEX ONE NYBBLE AT A TIME 
11e7			; pass hl for where to put the text 
11e7			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
11e7 c5			hexout:	PUSH BC 
11e8 f5					PUSH AF 
11e9 47					LD B, A 
11ea					; Upper nybble 
11ea cb 3f				SRL A 
11ec cb 3f				SRL A 
11ee cb 3f				SRL A 
11f0 cb 3f				SRL A 
11f2 cd 02 12				CALL tohex 
11f5 77					ld (hl),a 
11f6 23					inc hl	 
11f7					 
11f7					; Lower nybble 
11f7 78					LD A, B 
11f8 e6 0f				AND 0FH 
11fa cd 02 12				CALL tohex 
11fd 77					ld (hl),a 
11fe 23					inc hl	 
11ff					 
11ff f1					POP AF 
1200 c1					POP BC 
1201 c9					RET 
1202					 
1202			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
1202			; TRANSLATE value in lower A TO 2 HEX CHAR CODES FOR DISPLAY 
1202			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
1202			tohex: 
1202 e5					PUSH HL 
1203 d5					PUSH DE 
1204 16 00				LD D, 0 
1206 5f					LD E, A 
1207 21 0f 12				LD HL, .DATA 
120a 19					ADD HL, DE 
120b 7e					LD A, (HL) 
120c d1					POP DE 
120d e1					POP HL 
120e c9					RET 
120f			 
120f			.DATA: 
120f 30					DEFB	30h	; 0 
1210 31					DEFB	31h	; 1 
1211 32					DEFB	32h	; 2 
1212 33					DEFB	33h	; 3 
1213 34					DEFB	34h	; 4 
1214 35					DEFB	35h	; 5 
1215 36					DEFB	36h	; 6 
1216 37					DEFB	37h	; 7 
1217 38					DEFB	38h	; 8 
1218 39					DEFB	39h	; 9 
1219 41					DEFB	41h	; A 
121a 42					DEFB	42h	; B 
121b 43					DEFB	43h	; C 
121c 44					DEFB	44h	; D 
121d 45					DEFB	45h	; E 
121e 46					DEFB	46h	; F 
121f			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
121f			;; 	ASCII char code for 0-9,A-F in A to single hex digit 
121f			;;    subtract $30, if result > 9 then subtract $7 more 
121f			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
121f			atohex: 
121f d6 30				SUB $30 
1221 fe 0a				CP 10 
1223 f8					RET M		; If result negative it was 0-9 so we're done 
1224 d6 07				SUB $7		; otherwise, subtract $7 more to get to $0A-$0F 
1226 c9					RET		 
1227			 
1227			 
1227			 
1227			 
1227			; Get 2 ASCII characters as hex byte from pointer in hl 
1227			 
1227			BYTERD: 
1227 16 00			LD	D,00h		;Set up 
1229 cd 31 12			CALL	HEXCON		;Get byte and convert to hex 
122c 87				ADD	A,A		;First nibble so 
122d 87				ADD	A,A		;multiply by 16 
122e 87				ADD	A,A		; 
122f 87				ADD	A,A		; 
1230 57				LD	D,A		;Save hi nibble in D 
1231			HEXCON: 
1231 7e				ld a, (hl)		;Get next chr 
1232 23				inc hl 
1233 d6 30			SUB	030h		;Makes '0'-'9' equal 0-9 
1235 fe 0a			CP	00Ah		;Is it 0-9 ? 
1237 38 02			JR	C,NALPHA	;If so miss next bit 
1239 d6 07			SUB	007h		;Else convert alpha 
123b			NALPHA: 
123b b2				OR	D		;Add hi nibble back 
123c c9				RET			; 
123d			 
123d			 
123d			; 
123d			; Get a word (16 bit) in hexadecimal notation. The result is returned in HL. 
123d			; Since the routines get_byte and therefore get_nibble are called, only valid 
123d			; characters (0-9a-f) are accepted. 
123d			; 
123d			;get_word        push    af 
123d			;                call    get_byte        ; Get the upper byte 
123d			;                ld      h, a 
123d			;                call    get_byte        ; Get the lower byte 
123d			;                ld      l, a 
123d			;                pop     af 
123d			;                ret 
123d			; 
123d			; Get a byte in hexadecimal notation. The result is returned in A. Since 
123d			; the routine get_nibble is used only valid characters are accepted - the  
123d			; input routine only accepts characters 0-9a-f. 
123d			; 
123d c5			get_byte:        push    bc              ; Save contents of B (and C) 
123e 7e					ld a,(hl) 
123f 23					inc hl 
1240 cd 65 12		                call    nibble2val      ; Get upper nibble 
1243 cb 07		                rlc     a 
1245 cb 07		                rlc     a 
1247 cb 07		                rlc     a 
1249 cb 07		                rlc     a 
124b 47			                ld      b, a            ; Save upper four bits 
124c 7e					ld a,(hl) 
124d cd 65 12		                call    nibble2val      ; Get lower nibble 
1250 b0			                or      b               ; Combine both nibbles 
1251 c1			                pop     bc              ; Restore B (and C) 
1252 c9			                ret 
1253			; 
1253			; Get a hexadecimal digit from the serial line. This routine blocks until 
1253			; a valid character (0-9a-f) has been entered. A valid digit will be echoed 
1253			; to the serial line interface. The lower 4 bits of A contain the value of  
1253			; that particular digit. 
1253			; 
1253			;get_nibble      ld a,(hl)           ; Read a character 
1253			;                call    to_upper        ; Convert to upper case 
1253			;                call    is_hex          ; Was it a hex digit? 
1253			;                jr      nc, get_nibble  ; No, get another character 
1253			 ;               call    nibble2val      ; Convert nibble to value 
1253			 ;               call    print_nibble 
1253			 ;               ret 
1253			; 
1253			; is_hex checks a character stored in A for being a valid hexadecimal digit. 
1253			; A valid hexadecimal digit is denoted by a set C flag. 
1253			; 
1253			;is_hex          cp      'F' + 1         ; Greater than 'F'? 
1253			;                ret     nc              ; Yes 
1253			;                cp      '0'             ; Less than '0'? 
1253			;                jr      nc, is_hex_1    ; No, continue 
1253			;                ccf                     ; Complement carry (i.e. clear it) 
1253			;                ret 
1253			;is_hex_1        cp      '9' + 1         ; Less or equal '9*? 
1253			;                ret     c               ; Yes 
1253			;                cp      'A'             ; Less than 'A'? 
1253			;                jr      nc, is_hex_2    ; No, continue 
1253			;                ccf                     ; Yes - clear carry and return 
1253			;                ret 
1253			;is_hex_2        scf                     ; Set carry 
1253			;                ret 
1253			; 
1253			; Convert a single character contained in A to upper case: 
1253			; 
1253 fe 61		to_upper:        cp      'a'             ; Nothing to do if not lower case 
1255 d8			                ret     c 
1256 fe 7b		                cp      'z' + 1         ; > 'z'? 
1258 d0			                ret     nc              ; Nothing to do, either 
1259 e6 5f		                and     $5f             ; Convert to upper case 
125b c9			                ret 
125c			 
125c			 
125c			to_lower: 
125c			 
125c			   ; if char is in [A-Z] make it lower case 
125c			 
125c			   ; enter : a = char 
125c			   ; exit  : a = lower case char 
125c			   ; uses  : af 
125c			 
125c fe 41		   cp 'A' 
125e d8			   ret c 
125f			    
125f fe 5b		   cp 'Z'+1 
1261 d0			   ret nc 
1262			    
1262 f6 20		   or $20 
1264 c9			   ret 
1265			 
1265			; 
1265			; Expects a hexadecimal digit (upper case!) in A and returns the 
1265			; corresponding value in A. 
1265			; 
1265 fe 3a		nibble2val:      cp      '9' + 1         ; Is it a digit (less or equal '9')? 
1267 38 02		                jr      c, nibble2val_1 ; Yes 
1269 d6 07		                sub     7               ; Adjust for A-F 
126b d6 30		nibble2val_1:    sub     '0'             ; Fold back to 0..15 
126d e6 0f		                and     $f              ; Only return lower 4 bits 
126f c9			                ret 
1270			; 
1270			; Print_nibble prints a single hex nibble which is contained in the lower  
1270			; four bits of A: 
1270			; 
1270			;print_nibble    push    af              ; We won't destroy the contents of A 
1270			;                and     $f              ; Just in case... 
1270			;                add     a, '0'             ; If we have a digit we are done here. 
1270			;                cp      '9' + 1         ; Is the result > 9? 
1270			;                jr      c, print_nibble_1 
1270			;                add     a, 'A' - '0' - $a  ; Take care of A-F 
1270			;print_nibble_1  call    putc            ; Print the nibble and 
1270			;                pop     af              ; restore the original value of A 
1270			;                ret 
1270			;; 
1270			;; Send a CR/LF pair: 
1270			; 
1270			;crlf            push    af 
1270			;                ld      a, cr 
1270			;                call    putc 
1270			;                ld      a, lf 
1270			;                call    putc 
1270			;                pop     af 
1270			;                ret 
1270			; 
1270			; Print_word prints the four hex digits of a word to the serial line. The  
1270			; word is expected to be in HL. 
1270			; 
1270			;print_word      push    hl 
1270			;                push    af 
1270			;                ld      a, h 
1270			;                call    print_byte 
1270			;                ld      a, l 
1270			;                call    print_byte 
1270			;                pop     af 
1270			;                pop     hl 
1270			;                ret 
1270			; 
1270			; Print_byte prints a single byte in hexadecimal notation to the serial line. 
1270			; The byte to be printed is expected to be in A. 
1270			; 
1270			;print_byte      push    af              ; Save the contents of the registers 
1270			;                push    bc 
1270			;                ld      b, a 
1270			;                rrca 
1270			;                rrca 
1270			;                rrca 
1270			;                rrca 
1270			;                call    print_nibble    ; Print high nibble 
1270			;                ld      a, b 
1270			;                call    print_nibble    ; Print low nibble 
1270			;                pop     bc              ; Restore original register contents 
1270			;                pop     af 
1270			;                ret 
1270			 
1270			 
1270			 
1270			 
1270			 
1270			fourehexhl:  
1270 7e				ld a,(hl) 
1271 cd 1f 12			call atohex 
1274 cb 3f				SRL A 
1276 cb 3f				SRL A 
1278 cb 3f				SRL A 
127a cb 3f				SRL A 
127c 47				ld b, a 
127d 23				inc hl 
127e 7e				ld a,(hl) 
127f 23				inc hl 
1280 cd 1f 12			call atohex 
1283 80				add b 
1284 57				ld d,a 
1285 7e				ld a,(hl) 
1286 cd 1f 12			call atohex 
1289 cb 3f				SRL A 
128b cb 3f				SRL A 
128d cb 3f				SRL A 
128f cb 3f				SRL A 
1291 47				ld b, a 
1292 23				inc hl 
1293 7e				ld a,(hl) 
1294 23				inc hl 
1295 cd 1f 12			call atohex 
1298 80				add b 
1299 5f				ld e, a 
129a d5				push de 
129b e1				pop hl 
129c c9				ret 
129d			 
129d			; pass hl. returns z set if the byte at hl is a digit 
129d			;isdigithl:  
129d			;	push bc 
129d			;	ld a,(hl) 
129d			;	cp ':' 
129d			;	jr nc, .isdf 		; > 
129d			;	cp '0' 
129d			;	jr c, .isdf		; < 
129d			; 
129d			;	; TODO find a better way to set z 
129d			; 
129d			;	ld b,a 
129d			;	cp b 
129d			;	pop bc 
129d			;	ret 
129d			; 
129d			;.isdf:	; not digit so clear z 
129d			; 
129d			;	; TODO find a better way to unset z 
129d			; 
129d			;	ld b,a 
129d			;	inc b 
129d			;	cp b 
129d			; 
129d			;	pop bc 
129d			;	ret 
129d				 
129d				 
129d			 
129d			 
129d			; pass hl as the four byte address to load 
129d			 
129d			get_word_hl:  
129d e5				push hl 
129e cd 3d 12			call get_byte 
12a1				 
12a1 47				ld b, a 
12a2			 
12a2 e1				pop hl 
12a3 23				inc hl 
12a4 23				inc hl 
12a5			 
12a5			; TODO not able to handle a-f  
12a5 7e				ld a,(hl) 
12a6			;	;cp ':' 
12a6			;	cp 'g' 
12a6			;	jr nc, .single_byte_hl 		; > 
12a6			;	cp 'G' 
12a6			;	jr nc, .single_byte_hl 		; > 
12a6			;	cp '0' 
12a6			;	jr c, .single_byte_hl		; < 
12a6			 
12a6				;call isdigithl 
12a6 fe 00			cp 0 
12a8 28 06			jr z, .single_byte_hl 
12aa			 
12aa			.getwhln:   ; hex word so get next byte 
12aa			 
12aa cd 3d 12			call get_byte 
12ad 6f				ld l, a 
12ae 60				ld h,b 
12af c9				ret 
12b0 68			.single_byte_hl:   ld l,b 
12b1 26 00				ld h,0 
12b3 c9					ret 
12b4			 
12b4			 
12b4			 
12b4			 
12b4 21 23 1d			ld hl,asc+1 
12b7			;	ld a, (hl) 
12b7			;	call nibble2val 
12b7 cd 3d 12			call get_byte 
12ba			 
12ba			;	call fourehexhl 
12ba 32 2a f1			ld (scratch+52),a 
12bd				 
12bd 21 28 f1			ld hl,scratch+50 
12c0 22 19 f4			ld (os_cur_ptr),hl 
12c3			 
12c3 c9				ret 
12c4			 
12c4			 
12c4			; from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Other:DispA 
12c4			 
12c4			; Decimal Unsigned Version 
12c4			 
12c4			;Number in a to decimal ASCII 
12c4			;adapted from 16 bit found in z80 Bits to 8 bit by Galandros 
12c4			;Example: display a=56 as "056" 
12c4			;input: a = number 
12c4			;Output: a=0,value of a in the screen 
12c4			;destroys af,bc (don't know about hl and de) 
12c4			DispAToASCII: 
12c4 0e 9c			ld	c,-100 
12c6 cd d0 12			call	.Na1 
12c9 0e f6			ld	c,-10 
12cb cd d0 12			call	.Na1 
12ce 0e ff			ld	c,-1 
12d0 06 2f		.Na1:	ld	b,'0'-1 
12d2 04			.Na2:	inc	b 
12d3 81				add	a,c 
12d4 38 fc			jr	c,.Na2 
12d6 91				sub	c		;works as add 100/10/1 
12d7 f5				push af		;safer than ld c,a 
12d8 78				ld	a,b		;char is in b 
12d9			;TODO	CALL	PUTCHAR	;plot a char. Replace with bcall(_PutC) or similar. 
12d9 f1				pop af		;safer than ld a,c 
12da c9				ret 
12db			 
12db			; Decimal Signed Version 
12db			 
12db			; DispA 
12db			; -------------------------------------------------------------- 
12db			; Converts a signed integer value to a zero-terminated ASCII 
12db			; string representative of that value (using radix 10). 
12db			; -------------------------------------------------------------- 
12db			; INPUTS: 
12db			;     HL     Value to convert (two's complement integer). 
12db			;     DE     Base address of string destination. (pointer). 
12db			; -------------------------------------------------------------- 
12db			; OUTPUTS: 
12db			;     None 
12db			; -------------------------------------------------------------- 
12db			; REGISTERS/MEMORY DESTROYED 
12db			; AF HL 
12db			; -------------------------------------------------------------- 
12db			 
12db			;DispHLToASCII: 
12db			;   push    de 
12db			;   push    bc 
12db			; 
12db			;; Detect sign of HL. 
12db			;    bit    7, h 
12db			;    jr     z, ._DoConvert 
12db			; 
12db			;; HL is negative. Output '-' to string and negate HL. 
12db			;    ld     a, '-' 
12db			;    ld     (de), a 
12db			;    inc    de 
12db			; 
12db			;; Negate HL (using two's complement) 
12db			;    xor    a 
12db			;    sub    l 
12db			;    ld     l, a 
12db			;    ld     a, 0     ; Note that XOR A or SUB A would disturb CF 
12db			;    sbc    a, h 
12db			;    ld     h, a 
12db			; 
12db			;; Convert HL to digit characters 
12db			;._DoConvert: 
12db			;    ld     b, 0     ; B will count character length of number 
12db			;-   ld     a, 10 
12db			;    syscall  .DivHLByA  ; HL = HL / A, A = remainder 
12db			;    push   af 
12db			;    inc    b 
12db			;    ld     a, h 
12db			;    or     l 
12db			;    jr     nz, - 
12db			; 
12db			;; Retrieve digits from stack 
12db			;-   pop    af 
12db			;    or     $30 
12db			;    ld     (de), a 
12db			;    inc    de 
12db			;    djnz   - 
12db			; 
12db			;; Terminate string with NULL 
12db			;    xor    a 
12db			;    ld     (de), a 
12db			; 
12db			;    pop    bc 
12db			;    pop    de 
12db			;    ret 
12db			 
12db			;Comments 
12db			; 
12db			;    This routine uses the common positive-integer radix conversion algorithm of repeatedly dividing a value by the desired radix (base case: the value is zero) and saving the remainders of each division. 
12db			;    As this algorithm gives the digits in reverse order, they are pushed onto the hardware stack so that subsequently popping them yields the correct order. 
12db			;    Note that the output string will not be fixed-width. 
12db			; 
12db			;Example Usage 
12db			; 
12db			;    ld    hl, -1004 
12db			;    ld    de, OP1 
12db			;    call  DispA 
12db			;    ld    hl, OP1 
12db			;    syscall  PutS 
12db			 
12db			 
12db			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/string_to_uint16.z80 
12db			 
12db			 
12db			;Converts an ASCII string to an unsigned 16-bit integer 
12db			;Quits when it reaches a non-decimal digit 
12db			 
12db			string_to_uint16: 
12db			atoui_16: 
12db			;Input: 
12db			;     DE points to the string 
12db			;Outputs: 
12db			;     HL is the result 
12db			;     A is the 8-bit value of the number 
12db			;     DE points to the byte after the number 
12db			;Destroys: 
12db			;     BC 
12db			;       if the string is non-empty, BC is HL/10 
12db			;Size:  24 bytes 
12db			;Speed: 42+d(104+{0,9}) 
12db			;       d is the number of digits in the number 
12db			;       max is 640 cycles for a 5 digit number 
12db			;Assuming no leading zeros: 
12db			;1 digit:  146cc 
12db			;2 digit:  250cc 
12db			;3 digit:  354cc or 363cc (avg: 354.126cc) 
12db			;4 digit:  458cc or 467cc (avg: 458.27cc) 
12db			;5 digit:  562cc or 571cc or 580cc (avg: 562.4104cc) 
12db			;avg: 544.81158447265625cc (544+13297/16384) 
12db			;=============================================================== 
12db 21 00 00		  ld hl,0 
12de			.u16a: 
12de 1a			  ld a,(de) 
12df d6 30		  sub 30h 
12e1 fe 0a		  cp 10 
12e3 d0			  ret nc 
12e4 13			  inc de 
12e5 44			  ld b,h 
12e6 4d			  ld c,l 
12e7 29			  add hl,hl 
12e8 29			  add hl,hl 
12e9 09			  add hl,bc 
12ea 29			  add hl,hl 
12eb 85			  add a,l 
12ec 6f			  ld l,a 
12ed 30 ef		  jr nc,.u16a 
12ef 24			  inc h 
12f0 c3 de 12		  jp .u16a 
12f3			 
12f3			 
12f3			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/string_to_uint16.z80 
12f3			 
12f3			;written by Zeda 
12f3			;Converts a 16-bit unsigned integer to an ASCII string. 
12f3			 
12f3			uitoa_16: 
12f3			;Input: 
12f3			;   DE is the number to convert 
12f3			;   HL points to where to write the ASCII string (up to 6 bytes needed). 
12f3			;Output: 
12f3			;   HL points to the null-terminated ASCII string 
12f3			;      NOTE: This isn't necessarily the same as the input HL. 
12f3 d5			  push de 
12f4 c5			  push bc 
12f5 f5			  push af 
12f6 eb			  ex de,hl 
12f7			 
12f7 01 f0 d8		  ld bc,-10000 
12fa 3e 2f		  ld a,'0'-1 
12fc 3c			  inc a 
12fd 09			  add hl,bc  
12fe 38 fc		   jr c,$-2 
1300 12			  ld (de),a 
1301 13			  inc de 
1302			 
1302 01 e8 03		  ld bc,1000 
1305 3e 3a		  ld a,'9'+1 
1307 3d			  dec a  
1308 09			  add hl,bc  
1309 30 fc		   jr nc,$-2 
130b 12			  ld (de),a 
130c 13			  inc de 
130d			 
130d 01 9c ff		  ld bc,-100 
1310 3e 2f		  ld a,'0'-1 
1312 3c			  inc a  
1313 09			  add hl,bc  
1314 38 fc		   jr c,$-2 
1316 12			  ld (de),a 
1317 13			  inc de 
1318			 
1318 7d			  ld a,l 
1319 26 3a		  ld h,'9'+1 
131b 25			  dec h  
131c c6 0a		  add a,10  
131e 30 fb		   jr nc,$-3 
1320 c6 30		  add a,'0' 
1322 eb			  ex de,hl 
1323 72			  ld (hl),d 
1324 23			  inc hl 
1325 77			  ld (hl),a 
1326 23			  inc hl 
1327 36 00		  ld (hl),0 
1329			 
1329			;Now strip the leading zeros 
1329 0e fa		  ld c,-6 
132b 09			  add hl,bc 
132c 3e 30		  ld a,'0' 
132e 23			  inc hl  
132f be			  cp (hl)  
1330 28 fc		  jr z,$-2 
1332			 
1332			;Make sure that the string is non-empty! 
1332 7e			  ld a,(hl) 
1333 b7			  or a 
1334 20 01		  jr nz,.atoub 
1336 2b			  dec hl 
1337			.atoub: 
1337			 
1337 f1			  pop af 
1338 c1			  pop bc 
1339 d1			  pop de 
133a c9			  ret 
133b			 
133b			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/toUpper.z80 
133b			 
133b			toUpper: 
133b			;A is the char. 
133b			;If A is a lowercase letter, this sets it to the matching uppercase 
133b			;18cc or 30cc or 41cc 
133b			;avg: 26.75cc 
133b fe 61		  cp 'a' 
133d d8			  ret c 
133e fe 7b		  cp 'z'+1 
1340 d0			  ret nc 
1341 d6 20		  sub 'a'-'A' 
1343 c9			  ret 
1344			 
1344			; https://tutorials.eeems.ca/ASMin28Days/lesson/day16.html#cmp 
1344			 
1344			; String Length 
1344			;With a length-prefixed string, finding the length is trivial. For a null-terminated string, the process is decidedly more involved. This is where CPIR comes in. 
1344			 
1344			; Get the length of the null-terminated string starting at $8000 hl 
1344			;    LD     HL, $8000 
1344			 
1344			strlenz: 
1344			 
1344 af			    XOR    A               ; Zero is the value we are looking for. 
1345 47			    LD     B, A             ; Since we haven't the slightest clue as to the  
1346 4f			    LD     C, A             ; actual size of the string, put 0 in BC to search 
1347			                           ; 65, 536 bytes (the entire addressable memory space). 
1347 ed b1		    CPIR                   ; Begin search for a byte equalling zero. 
1349			 
1349			; BC has been decremented so that it holds -length. Now need to synthesize a NEG BC. 
1349 67			    LD     H, A             ; Zero HL (basically set it to 65, 536) to get the 
134a 6f			    LD     L, A             ; number of bytes 
134b ed 42		    SBC    HL, BC           ; Find the size. CPIR doesn't affect carry. 
134d 2b			    DEC    HL              ; Compensate for null. 
134e c9				ret 
134f			 
134f			; Get the length of the A terminated string starting at $8000 hl 
134f			;    LD     HL, $8000 
134f			 
134f			strlent: 
134f			 
134f			                  ; A is the value we are looking for. 
134f 06 00		    LD     B, 0             ; Since we haven't the slightest clue as to the  
1351 0e 00		    LD     C, 0             ; actual size of the string, put 0 in BC to search 
1353			                           ; 65, 536 bytes (the entire addressable memory space). 
1353 ed b1		    CPIR                   ; Begin search for a byte equalling zero. 
1355			 
1355			; BC has been decremented so that it holds -length. Now need to synthesize a NEG BC. 
1355 26 00		    LD     H, 0             ; Zero HL (basically set it to 65, 536) to get the 
1357 2e 00		    LD     L, 0             ; number of bytes 
1359 ed 42		    SBC    HL, BC           ; Find the size. CPIR doesn't affect carry. 
135b 2b			    DEC    HL              ; Compensate for null. 
135c c9				ret 
135d			 
135d			 
135d			;Comparing Strings 
135d			 
135d			;IN    HL     Address of string1. 
135d			;      DE     Address of string2. 
135d			 
135d			; doc given but wrong??? 
135d			;OUT   zero   Set if string1 = string2, reset if string1 != string2. 
135d			;      carry  Set if string1 > string2, reset if string1 <= string2. 
135d			; tested 
135d			;OUT   carry set  if string1 = string2, carry  reset if string1 != string2. 
135d			 
135d			strcmp_old: 
135d e5			    PUSH   HL 
135e d5			    PUSH   DE 
135f			 
135f 1a			    LD     A, (DE)          ; Compare lengths to determine smaller string 
1360 be			    CP     (HL)            ; (want to minimize work). 
1361 38 01		    JR     C, Str1IsBigger 
1363 7e			    LD     A, (HL) 
1364			 
1364			Str1IsBigger: 
1364 4f			    LD     C, A             ; Put length in BC 
1365 06 00		    LD     B, 0 
1367 13			    INC    DE              ; Increment pointers to meat of string. 
1368 23			    INC    HL 
1369			 
1369			CmpLoop: 
1369 1a			    LD     A, (DE)          ; Compare bytes. 
136a ed a1		    CPI 
136c 20 09		    JR     NZ, NoMatch      ; If (HL) != (DE), abort. 
136e 13			    INC    DE              ; Update pointer. 
136f ea 69 13		    JP     PE, CmpLoop 
1372			 
1372 d1			    POP    DE 
1373 e1			    POP    HL 
1374 1a			    LD     A, (DE)          ; Check string lengths to see if really equal. 
1375 be			    CP     (HL) 
1376 c9			    RET 
1377			 
1377			NoMatch: 
1377 2b			    DEC    HL 
1378 be			    CP     (HL)            ; Compare again to affect carry. 
1379 d1			    POP    DE 
137a e1			    POP    HL 
137b c9			    RET 
137c			 
137c			;; test strmp 
137c			; 
137c			;ld de, .str1 
137c			;ld hl, .str2 
137c			;call strcmp 
137c			;jr z, .z1 
137c			;;this 
137c			;	if DEBUG_FORTH_WORDS 
137c			;		DMARK "NZ1" 
137c			;		CALLMONITOR 
137c			;	endif 
137c			;.z1: 
137c			; 
137c			;	if DEBUG_FORTH_WORDS 
137c			;		DMARK "ZZ1" 
137c			;		CALLMONITOR 
137c			;	endif 
137c			; 
137c			;ld de, .str1 
137c			;ld hl, .str1 
137c			;call strcmp 
137c			;jr z, .z2 
137c			;;this 
137c			;	if DEBUG_FORTH_WORDS 
137c			;		DMARK "NZ2" 
137c			;		CALLMONITOR 
137c			;	endif 
137c			;.z2: 
137c			; 
137c			;	if DEBUG_FORTH_WORDS 
137c			;		DMARK "ZZ2" 
137c			;		CALLMONITOR 
137c			;	endif 
137c			; 
137c			;ld de, .str1 
137c			;ld hl, .str2 
137c			;call strcmp 
137c			;jr c, .c1 
137c			; 
137c			;	if DEBUG_FORTH_WORDS 
137c			;		DMARK "Nc1" 
137c			;		CALLMONITOR 
137c			;	endif 
137c			;.c1: 
137c			;;this 
137c			;	if DEBUG_FORTH_WORDS 
137c			;		DMARK "cc1" 
137c			;		CALLMONITOR 
137c			;	endif 
137c			; 
137c			;ld de, .str1 
137c			;ld hl, .str1 
137c			;call strcmp 
137c			;jr c, .c2 
137c			;;this 
137c			;	if DEBUG_FORTH_WORDS 
137c			;		DMARK "Nc2" 
137c			;		CALLMONITOR 
137c			;	endif 
137c			;.c2: 
137c			; 
137c			;	if DEBUG_FORTH_WORDS 
137c			;		DMARK "cc2" 
137c			;		CALLMONITOR 
137c			;	endif 
137c			;	NEXTW 
137c			;.str1:   db "string1",0 
137c			;.str2:   db "string2",0 
137c			 
137c			; only care about direct match or not 
137c			; hl and de strings 
137c			; zero set if the same 
137c			 
137c			strcmp: 
137c 1a				ld a, (de) 
137d be				cp (hl) 
137e 28 02			jr z, .ssame 
1380 b7				or a 
1381 c9				ret 
1382			 
1382			.ssame:  
1382 fe 00			cp 0 
1384 c8				ret z 
1385			 
1385 23				inc hl 
1386 13				inc de 
1387 18 f3			jr strcmp 
1389				 
1389				 
1389			 
1389			;Copyright (c) 2014, Luke Maurits 
1389			;All rights reserved. 
1389			; 
1389			;Redistribution and use in source and binary forms, with or without 
1389			;modification, are permitted provided that the following conditions are met: 
1389			; 
1389			;* Redistributions of source code must retain the above copyright notice, this 
1389			;  list of conditions and the following disclaimer. 
1389			; 
1389			;* Redistributions in binary form must reproduce the above copyright notice, 
1389			;  this list of conditions and the following disclaimer in the documentation 
1389			;  and/or other materials provided with the distribution. 
1389			; 
1389			;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
1389			;AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
1389			;IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
1389			;DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE 
1389			;FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
1389			;DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
1389			;SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
1389			;CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
1389			;OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
1389			;OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
1389			 
1389			; https://github.com/lmaurits/lm512/blob/master/string.z80 
1389			 
1389			StrictStrCmp: 
1389				; Load next chars of each string 
1389 1a				ld a, (de) 
138a 47				ld b, a 
138b 7e				ld a, (hl) 
138c				; Compare 
138c b8				cp b 
138d				; Return non-zero if chars don't match 
138d c0				ret nz 
138e				; Check for end of both strings 
138e fe 00			cp "\0" 
1390				; Return if strings have ended 
1390 c8				ret z 
1391				; Otherwise, advance to next chars 
1391 23				inc hl 
1392 13				inc de 
1393 18 f4			jr StrictStrCmp 
1395			 
1395			;end 
1395			; eof 
1395			 
1395			 
1395			 
1395			 
1395			 
1395			 
# End of file firmware_strings.asm
1395			include "firmware_memory.asm"   ; malloc and free  
1395			 
1395			if DEBUG_FORTH_MALLOC_HIGH 
1395			.mallocsize: db "Wants malloc >256",0 
1395			.mallocasize: db "MALLOC gives >256",0 
1395			.malloczero: db "MALLOC gives zero",0 
1395			 
1395			malloc_guard_zerolen: 
1395				push hl 
1395				push de 
1395				push af 
1395			 
1395				ld de, 0 
1395			        call cmp16 
1395				jr nz, .lowalloz 
1395			 
1395				push hl 
1395				push de 
1395					ld hl, display_fb0 
1395					ld (display_fb_active), hl 
1395				call clear_display 
1395				ld a, 0 
1395				ld de, .malloczero 
1395				call str_at_display 
1395				call update_display 
1395				call delay1s 
1395				call delay1s 
1395				call bp_on 
1395			;	ld a, 0 
1395			;	ld (os_view_disable), a 
1395			 
1395				pop de 
1395				pop hl 
1395			 
1395				 
1395			 
1395				CALLMONITOR 
1395			.lowalloz: 
1395			 
1395			 
1395				pop af 
1395				pop de 
1395				pop hl 
1395			ret 
1395			 
1395			malloc_guard_entry: 
1395				push hl 
1395				push de 
1395				push af 
1395			 
1395			 	or a      ;clear carry flag 
1395				push hl 
1395				ld de, 255 
1395				sbc hl, de 
1395				jr c, .lowalloc 
1395			 
1395				push de 
1395					ld hl, display_fb0 
1395					ld (display_fb_active), hl 
1395				call clear_display 
1395				ld a, 0 
1395				ld de, .mallocsize 
1395				call str_at_display 
1395				call update_display 
1395				call delay1s 
1395				call delay1s 
1395			;	ld a, 0 
1395			;	ld (os_view_disable), a 
1395				call bp_on 
1395			 
1395				pop de 
1395				pop hl 
1395			 
1395				 
1395			 
1395				CALLMONITOR 
1395				jr .lowdone 
1395			.lowalloc: 
1395			 
1395			 
1395				pop hl 
1395			.lowdone:	pop af 
1395				pop de 
1395				pop hl 
1395			ret 
1395			 
1395			malloc_guard_exit: 
1395				push hl 
1395				push de 
1395				push af 
1395			 
1395			 	or a      ;clear carry flag 
1395				push hl 
1395				ld de, 255 
1395				sbc hl, de 
1395				jr c, .lowallocx 
1395			 
1395				push de 
1395					ld hl, display_fb0 
1395					ld (display_fb_active), hl 
1395				call clear_display 
1395				ld a, 0 
1395				ld de, .mallocasize 
1395				call str_at_display 
1395				call update_display 
1395				call delay1s 
1395				call delay1s 
1395			;	ld a, 0 
1395			;	ld (os_view_disable), a 
1395				call bp_on 
1395				pop de 
1395				pop hl 
1395			 
1395				CALLMONITOR 
1395				jr .lowdonex 
1395			.lowallocx: 
1395			 
1395				pop hl 
1395			.lowdonex:	pop af 
1395				pop de 
1395				pop hl 
1395			ret 
1395			endif 
1395			 
1395			if MALLOC_2 
1395			; Z80 Malloc and Free Functions 
1395			 
1395			; Malloc Function: 
1395			; Input: 
1395			;   HL: Size of block to allocate 
1395			; Output: 
1395			;   HL: Pointer to allocated memory block (NULL if allocation fails) 
1395			 
1395			malloc: 
1395				 
1395			if DEBUG_FORTH_MALLOC_HIGH 
1395			call malloc_guard_entry 
1395			endif 
1395			 
1395			 
1395			 
1395			 
1395					if DEBUG_FORTH_MALLOC 
1395						DMARK "mal" 
1395						CALLMONITOR 
1395					endif 
1395			    push af            ; Save AF register 
1395			    ld a, l            ; Load low byte of size into A 
1395			    or h               ; Check if size is zero 
1395			    jp z, malloc_exit  ; If size is zero, exit with NULL pointer 
1395			 
1395			    ; Allocate memory 
1395			    ld hl, (heap_start) ; Load start of heap into HL 
1395					if DEBUG_FORTH_MALLOC 
1395						DMARK "ma1" 
1395						CALLMONITOR 
1395					endif 
1395			    call malloc_internal ; Call internal malloc function 
1395			    pop af             ; Restore AF register 
1395			if DEBUG_FORTH_MALLOC_HIGH 
1395			call malloc_guard_exit 
1395			call malloc_guard_zerolen 
1395			endif 
1395			    ret                ; Return 
1395			 
1395			; Free Function: 
1395			; Input: 
1395			;   HL: Pointer to memory block to free 
1395			; Output: 
1395			;   None 
1395			 
1395			free: 
1395			    push af            ; Save AF register 
1395			    ld a, l            ; Load low byte of pointer into A 
1395			    or h               ; Check if pointer is NULL 
1395			    jp z, free_exit    ; If pointer is NULL, exit 
1395			 
1395			    ; Free memory 
1395			    ld hl, (heap_start) ; Load start of heap into HL 
1395			    call free_internal  ; Call internal free function 
1395			    pop af             ; Restore AF register 
1395			    ret                ; Return 
1395			 
1395			; Internal Malloc Function: 
1395			; Input: 
1395			;   HL: Size of block to allocate 
1395			; Output: 
1395			;   HL: Pointer to allocated memory block (NULL if allocation fails) 
1395			 
1395			malloc_internal: 
1395			    ld bc, 2           ; Number of bytes to allocate for management overhead 
1395			    add hl, bc         ; Add management overhead to requested size 
1395			    ex de, hl          ; Save total size in DE, and keep it in HL 
1395					if DEBUG_FORTH_MALLOC 
1395						DMARK "ma2" 
1395						CALLMONITOR 
1395					endif 
1395			 
1395			    ; Search for free memory block 
1395			    ld de, (heap_end)  ; Load end of heap into DE 
1395			    ld bc, 0           ; Initialize counter 
1395			 
1395					if DEBUG_FORTH_MALLOC 
1395						DMARK "ma2" 
1395						CALLMONITOR 
1395					endif 
1395			malloc_search_loop: 
1395			    ; Check if current block is free 
1395			    ld a, (hl)         ; Load current block's status (free or used) 
1395			    cp 0               ; Compare with zero (free) 
1395			    jr nz, malloc_skip_block_check  ; If not free, skip to the next block 
1395			 
1395			    ; Check if current block is large enough 
1395			    ld a, (hl+1)       ; Load high byte of block size 
1395			    cp l               ; Compare with low byte of requested size 
1395			    jr nz, malloc_skip_block_check  ; If not large enough, skip to the next block 
1395			 
1395			    ld a, (hl+2)       ; Load low byte of block size 
1395			    cp h               ; Compare with high byte of requested size 
1395			    jr c, malloc_skip_block_check   ; If not large enough, skip to the next block 
1395			 
1395			    ; Mark block as used 
1395			    ld (hl), 0xFF      ; Set status byte to indicate used block 
1395			 
1395			    ; Calculate remaining space in block 
1395			    ld bc, 0           ; Clear BC 
1395			    add hl, bc         ; Increment HL to point to start of data block 
1395			    add hl, de         ; HL = HL + DE (total size) 
1395			    ld bc, 1           ; Number of bytes to allocate for management overhead 
1395			    add hl, bc         ; Add management overhead to start of data block 
1395			 
1395			    ; Save pointer to allocated block in HL 
1395			if DEBUG_FORTH_MALLOC_HIGH 
1395						DMARK "ma5" 
1395			call malloc_guard_exit 
1395			call malloc_guard_zerolen 
1395			endif 
1395			    ret 
1395			 
1395			malloc_skip_block_check: 
1395			    ; Move to the next block 
1395			    ld bc, 3           ; Size of management overhead 
1395			    add hl, bc         ; Move to the next block 
1395			    inc de             ; Increment counter 
1395			 
1395			    ; Check if we have reached the end of heap 
1395			    ld a, e            ; Load low byte of heap end address 
1395			    cp (hl)            ; Compare with low byte of current address 
1395			    jr nz, malloc_search_loop  ; If not equal, continue searching 
1395			    ld a, d            ; Load high byte of heap end address 
1395			    cp 0               ; Check if it's zero (end of memory) 
1395			    jr nz, malloc_search_loop  ; If not zero, continue searching 
1395			 
1395			    ; If we reached here, allocation failed 
1395			    xor a              ; Set result to NULL 
1395			if DEBUG_FORTH_MALLOC_HIGH 
1395						DMARK "ma6" 
1395			call malloc_guard_exit 
1395			call malloc_guard_zerolen 
1395			endif 
1395			    ret 
1395			malloc_exit: 
1395			if DEBUG_FORTH_MALLOC_HIGH 
1395						DMARK "ma7" 
1395			call malloc_guard_exit 
1395			call malloc_guard_zerolen 
1395			endif 
1395			    ret 
1395			 
1395			; Internal Free Function: 
1395			; Input: 
1395			;   HL: Pointer to memory block to free 
1395			; Output: 
1395			;   None 
1395			 
1395			free_internal: 
1395			    ld de, (heap_start) ; Load start of heap into DE 
1395			    ld bc, 0            ; Initialize counter 
1395			 
1395			free_search_loop: 
1395			    ; Check if current block contains the pointer 
1395			    ld a, l             ; Load low byte of pointer 
1395			    cp (hl+1)           ; Compare with high byte of current block's address 
1395			    jr nz, free_skip_block_check  ; If not equal, skip to the next block 
1395			    ld a, h             ; Load high byte of pointer 
1395			    cp (hl+2)           ; Compare with low byte of current block's address 
1395			    jr nz, free_skip_block_check  ; If not equal, skip to the next block 
1395			 
1395			    ; Mark block as free 
1395			    ld (hl), 0          ; Set status byte to indicate free block 
1395			    ret                 ; Return 
1395			 
1395			free_skip_block_check: 
1395			    ; Move to the next block 
1395			    ld bc, 3            ; Size of management overhead 
1395			    add hl, bc          ; Move to the next block 
1395			    inc de              ; Increment counter 
1395			 
1395			    ; Check if we have reached the end of heap 
1395			    ld a, e             ; Load low byte of heap end address 
1395			    cp (hl)             ; Compare with low byte of current address 
1395			    jr nz, free_search_loop  ; If not equal, continue searching 
1395			    ld a, d             ; Load high byte of heap end address 
1395			    cp 0                ; Check if it's zero (end of memory) 
1395			    jr nz, free_search_loop  ; If not zero, continue searching 
1395			 
1395			    ; If we reached here, pointer is not found in heap 
1395			    ret 
1395			 
1395			free_exit: 
1395			    ret                 ; Return 
1395			 
1395			; Define heap start and end addresses 
1395			;heap_start:    .dw 0xC000   ; Start of heap 
1395			;heap_end:      .dw 0xE000   ; End of heap 
1395			 
1395			endif 
1395			 
1395			 
1395			if MALLOC_1 
1395			 
1395			 
1395			 
1395			; from https://gist.github.com/tomstorey/947a8b084bad69391a4b2a1c5b6d69ca 
1395			 
1395			;moved to firmware.asm 
1395			;heap_start        .equ  0x9000      ; Starting address of heap 
1395			;heap_size         .equ  0x0100      ; Number of bytes available in heap 
1395			 
1395			;      .org 0 
1395			;      jp    main 
1395			 
1395			 
1395			;      .org  0x100 
1395			;main: 
1395			;      ld    HL, 0x8100 
1395			;      ld    SP, HL 
1395			; 
1395			;      call  heap_init 
1395			; 
1395			;      ; Make some allocations 
1395			;      ld    HL, 12 
1395			;      call  malloc            ; Allocates 0x9004 
1395			; 
1395			;      ld    HL, 12 
1395			;      call  malloc            ; Allocates 0x9014 
1395			; 
1395			;      ld    HL, 12 
1395			;      call  malloc            ; Allocates 0x9024 
1395			; 
1395			;      ; Free some allocations 
1395			;      ld    HL, 0x9014 
1395			;      call  free 
1395			; 
1395			;      ld    HL, 0x9004 
1395			;      call  free 
1395			; 
1395			;      ld    HL, 0x9024 
1395			;      call  free 
1395			; 
1395			; 
1395			;      halt 
1395			 
1395			 
1395			;------------------------------------------------------------------------------ 
1395			;     heap_init                                                               : 
1395			;                                                                             : 
1395			; Description                                                                 : 
1395			;     Initialise the heap and make it ready for malloc and free operations.   : 
1395			;                                                                             : 
1395			;     The heap is maintained as a linked list, starting with an initial       : 
1395			;     "dummy block" of zero size which is mainly used to hold a pointer to    : 
1395			;     the first free block in the heap. Each block then points to the next    : 
1395			;     free block within the heap, and the free list ends at the first block   : 
1395			;     with a null pointer to the next free block.                             : 
1395			;                                                                             : 
1395			; Parameters                                                                  : 
1395			;     Inputs are compile-time only. Two defines which specify the starting    : 
1395			;     address of the heap and its size are required, along with a memory      : 
1395			;     allocation of 4 consecutive bytes which is used for a dummy block which : 
1395			;     principally stores a pointer to the first free block in the heap.       : 
1395			;                                                                             : 
1395			; Returns                                                                     : 
1395			;     Nothing                                                                 : 
1395			;------------------------------------------------------------------------------ 
1395			heap_init: 
1395 e5			      push  HL 
1396			 
1396			      ; Initialise free list struct 
1396 21 0e 80		      ld    HL, heap_start 
1399 22 0a 80		      ld    (free_list), HL 
139c 21 00 00		      ld    HL, 0 
139f 22 0c 80		      ld    (free_list+2), HL 
13a2			 
13a2			      ; Insert first free block at bottom of heap, consumes entire heap 
13a2 21 cd f0		      ld    HL, heap_start+heap_size-4 
13a5 22 0e 80		      ld    (heap_start), HL        ; Next block (end of free list) 
13a8 21 bf 70		      ld    HL, heap_size-4 
13ab 22 10 80		      ld    (heap_start+2), HL      ; Block size 
13ae			 
13ae			      ; Insert end of free list block at top of heap - two null words will 
13ae			      ; terminate the free list 
13ae 21 00 00		      ld    HL, 0 
13b1 22 cf f0		      ld    (heap_start+heap_size-2), HL 
13b4 22 cd f0		      ld    (heap_start+heap_size-4), HL 
13b7			 
13b7 e1			      pop   HL 
13b8			 
13b8 c9			      ret 
13b9			 
13b9			 
13b9			;------------------------------------------------------------------------------ 
13b9			;     malloc                                                                  : 
13b9			;                                                                             : 
13b9			; Description                                                                 : 
13b9			;     Allocates the wanted space from the heap and returns the address of the : 
13b9			;     first useable byte of the allocation.                                   : 
13b9			;                                                                             : 
13b9			;     Allocations can happen in one of two ways:                              : 
13b9			;                                                                             : 
13b9			;     1. A free block may be found which is the exact size wanted. In this    : 
13b9			;        case the block is removed from the free list and retuedn to the      : 
13b9			;        caller.                                                              : 
13b9			;     2. A free block may be found which is larger than the size wanted. In   : 
13b9			;        this case, the larger block is split into two. The first portion of  : 
13b9			;        this block will become the requested space by the malloc call and    : 
13b9			;        is returned to the caller. The second portion becomes a new free     : 
13b9			;        block, and the free list is adjusted to maintain continuity via this : 
13b9			;        newly created block.                                                 : 
13b9			;                                                                             : 
13b9			;     malloc does not set any initial value in the allocated space, the       : 
13b9			;     caller is required to do this as required.                              : 
13b9			;                                                                             : 
13b9			;     This implementation of malloc uses the stack exclusively, and is        : 
13b9			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
13b9			;     advisable to disable interrupts before calling malloc, and recommended  : 
13b9			;     to avoid the use of malloc inside ISRs in general.                      : 
13b9			;                                                                             : 
13b9			;     NOTE: heap_init must be called before malloc and free can be used.      : 
13b9			;                                                                             : 
13b9			; Parameters                                                                  : 
13b9			;     HL  Number of bytes wanted                                              : 
13b9			;                                                                             : 
13b9			; Returns                                                                     : 
13b9			;     HL  Address of the first useable byte of the allocation                 : 
13b9			;                                                                             : 
13b9			; Flags                                                                       : 
13b9			;     Z   Set if the allocation did not succeed, clear otherwise              : 
13b9			;                                                                             : 
13b9			; Stack frame                                                                 : 
13b9			;       |             |                                                       : 
13b9			;       +-------------+                                                       : 
13b9			;       |     BC      |                                                       : 
13b9			;       +-------------+                                                       : 
13b9			;       |     DE      |                                                       : 
13b9			;       +-------------+                                                       : 
13b9			;       |     IX      |                                                       : 
13b9			;       +-------------+                                                       : 
13b9			;       |  prev_free  |                                                       : 
13b9			;   +4  +-------------+                                                       : 
13b9			;       |  this_free  |                                                       : 
13b9			;   +2  +-------------+                                                       : 
13b9			;       |  next_free  |                                                       : 
13b9			;   +0  +-------------+                                                       : 
13b9			;       |             |                                                       : 
13b9			;                                                                             : 
13b9			;------------------------------------------------------------------------------ 
13b9			 
13b9			 
13b9			;malloc: 
13b9			; 
13b9			;	SAVESP ON 1 
13b9			; 
13b9			;	call malloc_code 
13b9			; 
13b9			;	CHECKSP ON 1 
13b9			;	ret 
13b9			 
13b9			 
13b9			malloc: 
13b9 c5			      push  BC 
13ba d5			      push  DE 
13bb dd e5		      push  IX 
13bd			if DEBUG_FORTH_MALLOC_HIGH 
13bd			call malloc_guard_entry 
13bd			endif 
13bd			 
13bd					if DEBUG_FORTH_MALLOC 
13bd						DMARK "mal" 
13bd						CALLMONITOR 
13bd					endif 
13bd 7c			      ld    A, H                    ; Exit if no space requested 
13be b5			      or    L 
13bf ca 7e 14		      jp    Z, malloc_early_exit 
13c2			 
13c2			;inc hl 
13c2			;inc hl 
13c2			;inc hl 
13c2			; 
13c2			;inc hl 
13c2			;inc hl 
13c2			;inc hl 
13c2			;inc hl 
13c2			;inc hl 
13c2			;inc hl 
13c2			;inc hl 
13c2			;inc hl 
13c2			;inc hl 
13c2			 
13c2			 
13c2			 
13c2			 
13c2					if DEBUG_FORTH_MALLOC 
13c2						DMARK "maA" 
13c2						CALLMONITOR 
13c2					endif 
13c2			      ; Set up stack frame 
13c2 eb			      ex    DE, HL 
13c3 21 fa ff		      ld    HL, -6                  ; Reserve 6 bytes for stack frame 
13c6 39			      add   HL, SP 
13c7 f9			      ld    SP, HL 
13c8 dd 21 00 00	      ld    IX, 0                   ; Use IX as a frame pointer 
13cc dd 39		      add   IX, SP 
13ce			 
13ce			      ; Setup initial state 
13ce 21 04 00		      ld    HL, 4                   ; want must also include space used by block struct 
13d1 19			      add   HL, DE 
13d2			 
13d2 44			      ld    B, H                    ; Move want to BC 
13d3 4d			      ld    C, L 
13d4			 
13d4 21 0a 80		      ld    HL, free_list           ; Store prev_free ptr to stack 
13d7 dd 75 04		      ld    (IX+4), L 
13da dd 74 05		      ld    (IX+5), H 
13dd			 
13dd 5e			      ld    E, (HL)                 ; Store this_free ptr to stack 
13de 23			      inc   HL 
13df 56			      ld    D, (HL) 
13e0 dd 73 02		      ld    (IX+2), E 
13e3 dd 72 03		      ld    (IX+3), D 
13e6 eb			      ex    DE, HL                  ; this_free ptr into HL 
13e7			 
13e7					if DEBUG_FORTH_MALLOC 
13e7						DMARK "maB" 
13e7						CALLMONITOR 
13e7					endif 
13e7			      ; Loop through free block list to find some space 
13e7			malloc_find_space: 
13e7 5e			      ld    E, (HL)                 ; Load next_free ptr into DE 
13e8 23			      inc   HL 
13e9 56			      ld    D, (HL) 
13ea			 
13ea 7a			      ld    A, D                    ; Check for null next_free ptr - end of free list 
13eb b3			      or    E 
13ec ca 78 14		      jp    Z, malloc_no_space 
13ef			 
13ef dd 73 00		      ld    (IX+0), E               ; Store next_free ptr to stack 
13f2 dd 72 01		      ld    (IX+1), D 
13f5			 
13f5			      ; Does this block have enough space to make the allocation? 
13f5 23			      inc   HL                      ; Load free block size into DE 
13f6 5e			      ld    E, (HL) 
13f7 23			      inc   HL 
13f8 56			      ld    D, (HL) 
13f9			 
13f9 eb			      ex    DE, HL                  ; Check size of block against want 
13fa b7			      or    A                       ; Ensure carry flag clear 
13fb ed 42		      sbc   HL, BC 
13fd e5			      push  HL                      ; Store the result for later (new block size) 
13fe			 
13fe ca 4d 14		      jp   Z, malloc_alloc_fit     ; Z means block size matches want - can allocate 
1401 30 1b		      jr    NC, malloc_alloc_split  ; NC means block is bigger than want - can allocate 
1403			 
1403			      ; this_free block is not big enough, setup ptrs to test next free block 
1403 e1			      pop   HL                      ; Discard previous result 
1404			 
1404 dd 6e 02		      ld    L, (IX+2)               ; Move this_free ptr into prev_free 
1407 dd 66 03		      ld    H, (IX+3) 
140a dd 75 04		      ld    (IX+4), L 
140d dd 74 05		      ld    (IX+5), H 
1410			 
1410 dd 6e 00		      ld    L, (IX+0)               ; Move next_free ptr into this_free 
1413 dd 66 01		      ld    H, (IX+1) 
1416 dd 75 02		      ld    (IX+2), L 
1419 dd 74 03		      ld    (IX+3), H 
141c			 
141c					if DEBUG_FORTH_MALLOC 
141c						DMARK "MA>" 
141c						CALLMONITOR 
141c					endif 
141c 18 c9		      jr    malloc_find_space 
141e			 
141e			      ; split a bigger block into two - requested size and remaining size 
141e			malloc_alloc_split: 
141e					if DEBUG_FORTH_MALLOC 
141e						DMARK "MAs" 
141e						CALLMONITOR 
141e					endif 
141e eb			      ex    DE, HL                  ; Calculate address of new free block 
141f 2b			      dec   HL 
1420 2b			      dec   HL 
1421 2b			      dec   HL 
1422 09			      add   HL, BC 
1423			 
1423			      ; Create a new block and point it at next_free 
1423 dd 5e 00		      ld    E, (IX+0)               ; Load next_free ptr into DE 
1426 dd 56 01		      ld    D, (IX+1) 
1429			 
1429 73			      ld    (HL), E                 ; Store next_free ptr into new block 
142a 23			      inc   HL 
142b 72			      ld    (HL), D 
142c			 
142c d1			      pop   DE                      ; Store size of new block into new block 
142d 23			      inc   HL 
142e 73			      ld    (HL), E 
142f 23			      inc   HL 
1430 72			      ld    (HL), D 
1431			 
1431			      ; Update this_free ptr to point to new block 
1431 2b			      dec   HL 
1432 2b			      dec   HL 
1433 2b			      dec   HL 
1434			 
1434 dd 5e 02		      ld    E, (IX+2)               ; Take a copy of current this_free ptr 
1437 dd 56 03		      ld    D, (IX+3) 
143a			 
143a dd 75 02		      ld    (IX+2), L               ; Store new block addr as this_free ptr 
143d dd 74 03		      ld    (IX+3), H 
1440			 
1440			      ; Modify this_free block to be allocation 
1440 eb			      ex    DE, HL 
1441 af			      xor   A                       ; Null the next block ptr of allocated block 
1442 77			      ld    (HL), A 
1443 23			      inc   HL 
1444 77			      ld    (HL), A 
1445			 
1445 23			      inc   HL                      ; Store want size into allocated block 
1446 71			      ld    (HL), C 
1447 23			      inc   HL 
1448 70			      ld    (HL), B 
1449 23			      inc   HL 
144a e5			      push  HL                      ; Address of allocation to return 
144b			 
144b 18 19		      jr    malloc_update_links 
144d			 
144d			malloc_alloc_fit: 
144d e1			      pop   HL                      ; Dont need new block size, want is exact fit 
144e			 
144e					if DEBUG_FORTH_MALLOC 
144e						DMARK "MAf" 
144e						CALLMONITOR 
144e					endif 
144e			      ; Modify this_free block to be allocation 
144e eb			      ex    DE, HL 
144f 2b			      dec   HL 
1450 2b			      dec   HL 
1451 2b			      dec   HL 
1452			 
1452 af			      xor   A                       ; Null the next block ptr of allocated block 
1453 77			      ld    (HL), A 
1454 23			      inc   HL 
1455 77			      ld    (HL), A 
1456			 
1456 23			      inc   HL                      ; Store address of allocation to return 
1457 23			      inc   HL 
1458 23			      inc   HL 
1459 e5			      push  HL 
145a			 
145a			      ; Copy next_free ptr to this_free, remove allocated block from free list 
145a dd 6e 00		      ld    L, (IX+0)               ; next_free to HL 
145d dd 66 01		      ld    H, (IX+1) 
1460			 
1460 dd 75 02		      ld    (IX+2), L               ; HL to this_free 
1463 dd 74 03		      ld    (IX+3), H 
1466			 
1466			 
1466			malloc_update_links: 
1466			      ; Update prev_free ptr to point to this_free 
1466 dd 6e 04		      ld    L, (IX+4)               ; prev_free ptr to HL 
1469 dd 66 05		      ld    H, (IX+5) 
146c			 
146c dd 5e 02		      ld    E, (IX+2)               ; this_free ptr to DE 
146f dd 56 03		      ld    D, (IX+3) 
1472			 
1472 73			      ld    (HL), E                 ; this_free ptr into prev_free 
1473 23			      inc   HL 
1474 72			      ld    (HL), D 
1475			 
1475					if DEBUG_FORTH_MALLOC 
1475						DMARK "Mul" 
1475						CALLMONITOR 
1475					endif 
1475			      ; Clear the Z flag to indicate successful allocation 
1475 7a			      ld    A, D 
1476 b3			      or    E 
1477			 
1477 d1			      pop   DE                      ; Address of allocation 
1478					if DEBUG_FORTH_MALLOC 
1478						DMARK "MAu" 
1478						CALLMONITOR 
1478					endif 
1478			 
1478			malloc_no_space: 
1478 21 06 00		      ld    HL, 6                   ; Clean up stack frame 
147b 39			      add   HL, SP 
147c f9			      ld    SP, HL 
147d			 
147d eb			      ex    DE, HL                  ; Alloc addr into HL for return 
147e					if DEBUG_FORTH_MALLOC 
147e						DMARK "MAN" 
147e						CALLMONITOR 
147e					endif 
147e			 
147e			malloc_early_exit: 
147e					if DEBUG_FORTH_MALLOC 
147e						DMARK "MAx" 
147e						CALLMONITOR 
147e					endif 
147e dd e1		      pop   IX 
1480 d1			      pop   DE 
1481 c1			      pop   BC 
1482			 
1482			if DEBUG_FORTH_MALLOC_HIGH 
1482			call malloc_guard_exit 
1482			call malloc_guard_zerolen 
1482			endif 
1482 c9			      ret 
1483			 
1483			 
1483			;------------------------------------------------------------------------------ 
1483			;     free                                                                    : 
1483			;                                                                             : 
1483			; Description                                                                 : 
1483			;     Return the space pointed to by HL to the heap. HL must be an address as : 
1483			;     returned by malloc, otherwise the behaviour is undefined.               : 
1483			;                                                                             : 
1483			;     Where possible, directly adjacent free blocks will be merged together   : 
1483			;     into larger blocks to help ensure that the heap does not become         : 
1483			;     excessively fragmented.                                                 : 
1483			;                                                                             : 
1483			;     free does not clear or set any other value into the freed space, and    : 
1483			;     therefore its contents may be visible through subsequent malloc's. The  : 
1483			;     caller should clear the freed space as required.                        : 
1483			;                                                                             : 
1483			;     This implementation of free uses the stack exclusively, and is          : 
1483			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
1483			;     advisable to disable interrupts before calling free, and recommended    : 
1483			;     to avoid the use of free inside ISRs in general.                        : 
1483			;                                                                             : 
1483			;     NOTE: heap_init must be called before malloc and free can be used.      : 
1483			;                                                                             : 
1483			; Parameters                                                                  : 
1483			;     HL  Pointer to address of first byte of allocation to be freed          : 
1483			;                                                                             : 
1483			; Returns                                                                     : 
1483			;     Nothing                                                                 : 
1483			;                                                                             : 
1483			; Stack frame                                                                 : 
1483			;       |             |                                                       : 
1483			;       +-------------+                                                       : 
1483			;       |     BC      |                                                       : 
1483			;       +-------------+                                                       : 
1483			;       |     DE      |                                                       : 
1483			;       +-------------+                                                       : 
1483			;       |     IX      |                                                       : 
1483			;       +-------------+                                                       : 
1483			;       |  prev_free  |                                                       : 
1483			;   +2  +-------------+                                                       : 
1483			;       |  next_free  |                                                       : 
1483			;   +0  +-------------+                                                       : 
1483			;       |             |                                                       : 
1483			;                                                                             : 
1483			;------------------------------------------------------------------------------ 
1483			free: 
1483 c5			      push  BC 
1484 d5			      push  DE 
1485 dd e5		      push  IX 
1487			 
1487 7c			      ld    A, H                    ; Exit if ptr is null 
1488 b5			      or    L 
1489 ca 4d 15		      jp    Z, free_early_exit 
148c			 
148c			      ; Set up stack frame 
148c eb			      ex    DE, HL 
148d 21 fc ff		      ld    HL, -4                  ; Reserve 4 bytes for stack frame 
1490 39			      add   HL, SP 
1491 f9			      ld    SP, HL 
1492 dd 21 00 00	      ld    IX, 0                   ; Use IX as a frame pointer 
1496 dd 39		      add   IX, SP 
1498			 
1498			      ; The address in HL points to the start of the useable allocated space, 
1498			      ; but the block struct starts 4 bytes before this. Sub 4 to get the 
1498			      ; address of the block itself. 
1498 eb			      ex    DE, HL 
1499 11 fc ff		      ld    DE, -4 
149c 19			      add   HL, DE 
149d			 
149d			      ; An allocated block must have a null next block pointer in it 
149d 7e			      ld    A, (HL) 
149e 23			      inc   HL 
149f b6			      or    (HL) 
14a0 c2 48 15		      jp    NZ, free_done 
14a3			 
14a3 2b			      dec   HL 
14a4			 
14a4 44			      ld    B, H                    ; Copy HL to BC 
14a5 4d			      ld    C, L 
14a6			 
14a6			      ; Loop through the free list to find the first block with an address 
14a6			      ; higher than the block being freed 
14a6 21 0a 80		      ld    HL, free_list 
14a9			 
14a9			free_find_higher_block: 
14a9 5e			      ld    E, (HL)                 ; Load next ptr from free block 
14aa 23			      inc   HL 
14ab 56			      ld    D, (HL) 
14ac 2b			      dec   HL 
14ad			 
14ad dd 73 00		      ld    (IX+0), E               ; Save ptr to next free block 
14b0 dd 72 01		      ld    (IX+1), D 
14b3 dd 75 02		      ld    (IX+2), L               ; Save ptr to prev free block 
14b6 dd 74 03		      ld    (IX+3), H 
14b9			 
14b9 78			      ld    A, B                    ; Check if DE is greater than BC 
14ba ba			      cp    D                       ; Compare MSB first 
14bb 28 02		      jr    Z, $+4                  ; MSB the same, compare LSB 
14bd 30 04		      jr    NC, free_find_higher_block_skip 
14bf 79			      ld    A, C 
14c0 bb			      cp    E                       ; Then compare LSB 
14c1 38 08		      jr    C, free_found_higher_block 
14c3			 
14c3			free_find_higher_block_skip: 
14c3 7a			      ld    A, D                    ; Reached the end of the free list? 
14c4 b3			      or    E 
14c5 ca 48 15		      jp    Z, free_done 
14c8			 
14c8 eb			      ex    DE, HL 
14c9			 
14c9 18 de		      jr    free_find_higher_block 
14cb			 
14cb			free_found_higher_block: 
14cb			      ; Insert freed block between prev and next free blocks 
14cb 71			      ld    (HL), C                 ; Point prev free block to freed block 
14cc 23			      inc   HL 
14cd 70			      ld    (HL), B 
14ce			 
14ce 60			      ld    H, B                    ; Point freed block at next free block 
14cf 69			      ld    L, C 
14d0 73			      ld    (HL), E 
14d1 23			      inc   HL 
14d2 72			      ld    (HL), D 
14d3			 
14d3			      ; Check if the freed block is adjacent to the next free block 
14d3 23			      inc   HL                      ; Load size of freed block into HL 
14d4 5e			      ld    E, (HL) 
14d5 23			      inc   HL 
14d6 56			      ld    D, (HL) 
14d7 eb			      ex    DE, HL 
14d8			 
14d8 09			      add   HL, BC                  ; Add addr of freed block and its size 
14d9			 
14d9 dd 5e 00		      ld    E, (IX+0)               ; Load addr of next free block into DE 
14dc dd 56 01		      ld    D, (IX+1) 
14df			 
14df b7			      or    A                       ; Clear the carry flag 
14e0 ed 52		      sbc   HL, DE                  ; Subtract addrs to compare adjacency 
14e2 20 22		      jr    NZ, free_check_adjacent_to_prev 
14e4			 
14e4			      ; Freed block is adjacent to next, merge into one bigger block 
14e4 eb			      ex    DE, HL                  ; Load next ptr from next block into DE 
14e5 5e			      ld    E, (HL) 
14e6 23			      inc   HL 
14e7 56			      ld    D, (HL) 
14e8 e5			      push  HL                      ; Save ptr to next block for later 
14e9			 
14e9 60			      ld    H, B                    ; Store ptr from next block into freed block 
14ea 69			      ld    L, C 
14eb 73			      ld    (HL), E 
14ec 23			      inc   HL 
14ed 72			      ld    (HL), D 
14ee			 
14ee e1			      pop   HL                      ; Restore ptr to next block 
14ef 23			      inc   HL                      ; Load size of next block into DE 
14f0 5e			      ld    E, (HL) 
14f1 23			      inc   HL 
14f2 56			      ld    D, (HL) 
14f3 d5			      push  DE                      ; Save next block size for later 
14f4			 
14f4 60			      ld    H, B                    ; Load size of freed block into HL 
14f5 69			      ld    L, C 
14f6 23			      inc   HL 
14f7 23			      inc   HL 
14f8 5e			      ld    E, (HL) 
14f9 23			      inc   HL 
14fa 56			      ld    D, (HL) 
14fb eb			      ex    DE, HL 
14fc			 
14fc d1			      pop   DE                      ; Restore size of next block 
14fd 19			      add   HL, DE                  ; Add sizes of both blocks 
14fe eb			      ex    DE, HL 
14ff			 
14ff 60			      ld    H, B                    ; Store new bigger size into freed block 
1500 69			      ld    L, C 
1501 23			      inc   HL 
1502 23			      inc   HL 
1503 73			      ld    (HL), E 
1504 23			      inc   HL 
1505 72			      ld    (HL), D 
1506			 
1506			free_check_adjacent_to_prev: 
1506			      ; Check if the freed block is adjacent to the prev free block 
1506 dd 6e 02		      ld    L, (IX+2)               ; Prev free block ptr into HL 
1509 dd 66 03		      ld    H, (IX+3) 
150c			 
150c 23			      inc   HL                      ; Size of prev free block into DE 
150d 23			      inc   HL 
150e 5e			      ld    E, (HL) 
150f 23			      inc   HL 
1510 56			      ld    D, (HL) 
1511 2b			      dec   HL 
1512 2b			      dec   HL 
1513 2b			      dec   HL 
1514			 
1514 19			      add   HL, DE                  ; Add prev block addr and size 
1515			 
1515 b7			      or    A                       ; Clear the carry flag 
1516 ed 42		      sbc   HL, BC                  ; Subtract addrs to compare adjacency 
1518 20 2e		      jr    NZ, free_done 
151a			 
151a			      ; Freed block is adjacent to prev, merge into one bigger block 
151a 60			      ld    H, B                    ; Load next ptr from freed block into DE 
151b 69			      ld    L, C 
151c 5e			      ld    E, (HL) 
151d 23			      inc   HL 
151e 56			      ld    D, (HL) 
151f e5			      push  HL                      ; Save freed block ptr for later 
1520			 
1520 dd 6e 02		      ld    L, (IX+2)               ; Store freed block ptr into prev block 
1523 dd 66 03		      ld    H, (IX+3) 
1526 73			      ld    (HL), E 
1527 23			      inc   HL 
1528 72			      ld    (HL), D 
1529			 
1529 e1			      pop   HL                      ; Restore freed block ptr 
152a 23			      inc   HL                      ; Load size of freed block into DE 
152b 5e			      ld    E, (HL) 
152c 23			      inc   HL 
152d 56			      ld    D, (HL) 
152e d5			      push  DE                      ; Save freed block size for later 
152f			 
152f dd 6e 02		      ld    L, (IX+2)               ; Load size of prev block into DE 
1532 dd 66 03		      ld    H, (IX+3) 
1535 23			      inc   HL 
1536 23			      inc   HL 
1537 5e			      ld    E, (HL) 
1538 23			      inc   HL 
1539 56			      ld    D, (HL) 
153a			 
153a e1			      pop   HL                      ; Add sizes of both blocks 
153b 19			      add   HL, DE 
153c eb			      ex    DE, HL 
153d			 
153d dd 6e 02		      ld    L, (IX+2)               ; Store new bigger size into prev block 
1540 dd 66 03		      ld    H, (IX+3) 
1543 23			      inc   HL 
1544 23			      inc   HL 
1545 73			      ld    (HL), E 
1546 23			      inc   HL 
1547 72			      ld    (HL), D 
1548			 
1548			free_done: 
1548 21 04 00		      ld    HL, 4                   ; Clean up stack frame 
154b 39			      add   HL, SP 
154c f9			      ld    SP, HL 
154d			 
154d			free_early_exit: 
154d dd e1		      pop   IX 
154f d1			      pop   DE 
1550 c1			      pop   BC 
1551			 
1551 c9			      ret 
1552			 
1552			; moved to firmware.asm 
1552			; 
1552			;free_list         .dw   0     ; Block struct for start of free list (MUST be 4 bytes) 
1552			;                  .dw   0 
1552			 
1552			 
1552			endif 
1552			 
1552			 
1552			if MALLOC_3 
1552			; https://gist.githubusercontent.com/tomstorey/947a8b084bad69391a4b2a1c5b6d69ca/raw/5a08fb30a480d98c0deb4a6afe2d48961cc8e9d9/z80_malloc.s 
1552			;heap_start        .equ  0x9000      ; Starting address of heap 
1552			;heap_size         .equ  0x0100      ; Number of bytes available in heap 
1552			; 
1552			 ;     .org 0 
1552			  ;    jp    main 
1552			; 
1552			; 
1552			 ;     .org  0x100 
1552			;main: 
1552			 ;     ld    HL, 0x8100 
1552			  ;    ld    SP, HL 
1552			; 
1552			;      call  heap_init 
1552			 
1552			      ; Make some allocations 
1552			;      ld    HL, 12 
1552			;      call  malloc            ; Allocates 0x9004 
1552			; 
1552			 ;     ld    HL, 12 
1552			;      call  malloc            ; Allocates 0x9014 
1552			 
1552			;      ld    HL, 12 
1552			;      call  malloc            ; Allocates 0x9024 
1552			 
1552			      ; Free some allocations 
1552			;      ld    HL, 0x9014 
1552			;      call  free 
1552			 
1552			;      ld    HL, 0x9004 
1552			;      call  free 
1552			; 
1552			;      ld    HL, 0x9024 
1552			;      call  free 
1552			 
1552			 
1552			 ;     halt 
1552			 
1552			 
1552			;------------------------------------------------------------------------------ 
1552			;     heap_init                                                               : 
1552			;                                                                             : 
1552			; Description                                                                 : 
1552			;     Initialise the heap and make it ready for malloc and free operations.   : 
1552			;                                                                             : 
1552			;     The heap is maintained as a linked list, starting with an initial       : 
1552			;     "dummy block" of zero size which is mainly used to hold a pointer to    : 
1552			;     the first free block in the heap. Each block then points to the next    : 
1552			;     free block within the heap, and the free list ends at the first block   : 
1552			;     with a null pointer to the next free block.                             : 
1552			;                                                                             : 
1552			; Parameters                                                                  : 
1552			;     Inputs are compile-time only. Two defines which specify the starting    : 
1552			;     address of the heap and its size are required, along with a memory      : 
1552			;     allocation of 4 consecutive bytes which is used for a dummy block which : 
1552			;     principally stores a pointer to the first free block in the heap.       : 
1552			;                                                                             : 
1552			; Returns                                                                     : 
1552			;     Nothing                                                                 : 
1552			;------------------------------------------------------------------------------ 
1552			heap_init: 
1552			      push  HL 
1552			 
1552			      ; Initialise free list struct 
1552			      ld    HL, heap_start 
1552			      ld    (free_list), HL 
1552			      ld    HL, 0 
1552			      ld    (free_list+2), HL 
1552			 
1552			      ; Insert first free block at bottom of heap, consumes entire heap 
1552			      ld    HL, heap_start+heap_size-4 
1552			      ld    (heap_start), HL        ; Next block (end of free list) 
1552			      ld    HL, heap_size-4 
1552			      ld    (heap_start+2), HL      ; Block size 
1552			 
1552			      ; Insert end of free list block at top of heap - two null words will 
1552			      ; terminate the free list 
1552			      ld    HL, 0 
1552			      ld    (heap_start+heap_size-2), HL 
1552			      ld    (heap_start+heap_size-4), HL 
1552			 
1552			      pop   HL 
1552			 
1552			      ret 
1552			 
1552			 
1552			;------------------------------------------------------------------------------ 
1552			;     malloc                                                                  : 
1552			;                                                                             : 
1552			; Description                                                                 : 
1552			;     Allocates the wanted space from the heap and returns the address of the : 
1552			;     first useable byte of the allocation.                                   : 
1552			;                                                                             : 
1552			;     Allocations can happen in one of two ways:                              : 
1552			;                                                                             : 
1552			;     1. A free block may be found which is the exact size wanted. In this    : 
1552			;        case the block is removed from the free list and retuedn to the      : 
1552			;        caller.                                                              : 
1552			;     2. A free block may be found which is larger than the size wanted. In   : 
1552			;        this case, the larger block is split into two. The first portion of  : 
1552			;        this block will become the requested space by the malloc call and    : 
1552			;        is returned to the caller. The second portion becomes a new free     : 
1552			;        block, and the free list is adjusted to maintain continuity via this : 
1552			;        newly created block.                                                 : 
1552			;                                                                             : 
1552			;     malloc does not set any initial value in the allocated space, the       : 
1552			;     caller is required to do this as required.                              : 
1552			;                                                                             : 
1552			;     This implementation of malloc uses the stack exclusively, and is        : 
1552			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
1552			;     advisable to disable interrupts before calling malloc, and recommended  : 
1552			;     to avoid the use of malloc inside ISRs in general.                      : 
1552			;                                                                             : 
1552			;     NOTE: heap_init must be called before malloc and free can be used.      : 
1552			;                                                                             : 
1552			; Parameters                                                                  : 
1552			;     HL  Number of bytes wanted                                              : 
1552			;                                                                             : 
1552			; Returns                                                                     : 
1552			;     HL  Address of the first useable byte of the allocation                 : 
1552			;                                                                             : 
1552			; Flags                                                                       : 
1552			;     Z   Set if the allocation did not succeed, clear otherwise              : 
1552			;                                                                             : 
1552			; Stack frame                                                                 : 
1552			;       |             |                                                       : 
1552			;       +-------------+                                                       : 
1552			;       |     BC      |                                                       : 
1552			;       +-------------+                                                       : 
1552			;       |     DE      |                                                       : 
1552			;       +-------------+                                                       : 
1552			;       |     IX      |                                                       : 
1552			;       +-------------+                                                       : 
1552			;       |  prev_free  |                                                       : 
1552			;   +4  +-------------+                                                       : 
1552			;       |  this_free  |                                                       : 
1552			;   +2  +-------------+                                                       : 
1552			;       |  next_free  |                                                       : 
1552			;   +0  +-------------+                                                       : 
1552			;       |             |                                                       : 
1552			;                                                                             : 
1552			;------------------------------------------------------------------------------ 
1552			malloc: 
1552			      push  BC 
1552			      push  DE 
1552			      push  IX 
1552			 
1552			      ld    A, H                    ; Exit if no space requested 
1552			      or    L 
1552			      jp    Z, malloc_early_exit 
1552			 
1552			      ; Set up stack frame 
1552			      ex    DE, HL 
1552			      ld    HL, -6                  ; Reserve 6 bytes for stack frame 
1552			      add   HL, SP 
1552			      ld    SP, HL 
1552			      ld    IX, 0                   ; Use IX as a frame pointer 
1552			      add   IX, SP 
1552			 
1552			      ; Setup initial state 
1552			      ld    HL, 4                   ; want must also include space used by block struct 
1552			      add   HL, DE 
1552			 
1552			      ld    B, H                    ; Move want to BC 
1552			      ld    C, L 
1552			 
1552			      ld    HL, free_list           ; Store prev_free ptr to stack 
1552			      ld    (IX+4), L 
1552			      ld    (IX+5), H 
1552			 
1552			      ld    E, (HL)                 ; Store this_free ptr to stack 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			      ld    (IX+2), E 
1552			      ld    (IX+3), D 
1552			      ex    DE, HL                  ; this_free ptr into HL 
1552			 
1552			      ; Loop through free block list to find some space 
1552			malloc_find_space: 
1552			      ld    E, (HL)                 ; Load next_free ptr into DE 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			 
1552			      ld    A, D                    ; Check for null next_free ptr - end of free list 
1552			      or    E 
1552			      jp    Z, malloc_no_space 
1552			 
1552			      ld    (IX+0), E               ; Store next_free ptr to stack 
1552			      ld    (IX+1), D 
1552			 
1552			      ; Does this block have enough space to make the allocation? 
1552			      inc   HL                      ; Load free block size into DE 
1552			      ld    E, (HL) 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			 
1552			      ex    DE, HL                  ; Check size of block against want 
1552			      or    A                       ; Ensure carry flag clear 
1552			      sbc   HL, BC 
1552			      push  HL                      ; Store the result for later (new block size) 
1552			 
1552			      jr    Z, malloc_alloc_fit     ; Z means block size matches want - can allocate 
1552			      jr    NC, malloc_alloc_split  ; NC means block is bigger than want - can allocate 
1552			 
1552			      ; this_free block is not big enough, setup ptrs to test next free block 
1552			      pop   HL                      ; Discard previous result 
1552			 
1552			      ld    L, (IX+2)               ; Move this_free ptr into prev_free 
1552			      ld    H, (IX+3) 
1552			      ld    (IX+4), L 
1552			      ld    (IX+5), H 
1552			 
1552			      ld    L, (IX+0)               ; Move next_free ptr into this_free 
1552			      ld    H, (IX+1) 
1552			      ld    (IX+2), L 
1552			      ld    (IX+3), H 
1552			 
1552			      jr    malloc_find_space 
1552			 
1552			      ; split a bigger block into two - requested size and remaining size 
1552			malloc_alloc_split: 
1552			      ex    DE, HL                  ; Calculate address of new free block 
1552			      dec   HL 
1552			      dec   HL 
1552			      dec   HL 
1552			      add   HL, BC 
1552			 
1552			      ; Create a new block and point it at next_free 
1552			      ld    E, (IX+0)               ; Load next_free ptr into DE 
1552			      ld    D, (IX+1) 
1552			 
1552			      ld    (HL), E                 ; Store next_free ptr into new block 
1552			      inc   HL 
1552			      ld    (HL), D 
1552			 
1552			      pop   DE                      ; Store size of new block into new block 
1552			      inc   HL 
1552			      ld    (HL), E 
1552			      inc   HL 
1552			      ld    (HL), D 
1552			 
1552			      ; Update this_free ptr to point to new block 
1552			      dec   HL 
1552			      dec   HL 
1552			      dec   HL 
1552			 
1552			      ld    E, (IX+2)               ; Take a copy of current this_free ptr 
1552			      ld    D, (IX+3) 
1552			 
1552			      ld    (IX+2), L               ; Store new block addr as this_free ptr 
1552			      ld    (IX+3), H 
1552			 
1552			      ; Modify this_free block to be allocation 
1552			      ex    DE, HL 
1552			      xor   A                       ; Null the next block ptr of allocated block 
1552			      ld    (HL), A 
1552			      inc   HL 
1552			      ld    (HL), A 
1552			 
1552			      inc   HL                      ; Store want size into allocated block 
1552			      ld    (HL), C 
1552			      inc   HL 
1552			      ld    (HL), B 
1552			      inc   HL 
1552			      push  HL                      ; Address of allocation to return 
1552			 
1552			      jr    malloc_update_links 
1552			 
1552			malloc_alloc_fit: 
1552			      pop   HL                      ; Dont need new block size, want is exact fit 
1552			 
1552			      ; Modify this_free block to be allocation 
1552			      ex    DE, HL 
1552			      dec   HL 
1552			      dec   HL 
1552			      dec   HL 
1552			 
1552			      xor   A                       ; Null the next block ptr of allocated block 
1552			      ld    (HL), A 
1552			      inc   HL 
1552			      ld    (HL), A 
1552			 
1552			      inc   HL                      ; Store address of allocation to return 
1552			      inc   HL 
1552			      inc   HL 
1552			      push  HL 
1552			 
1552			      ; Copy next_free ptr to this_free, remove allocated block from free list 
1552			      ld    L, (IX+0)               ; next_free to HL 
1552			      ld    H, (IX+1) 
1552			 
1552			      ld    (IX+2), L               ; HL to this_free 
1552			      ld    (IX+3), H 
1552			 
1552			 
1552			malloc_update_links: 
1552			      ; Update prev_free ptr to point to this_free 
1552			      ld    L, (IX+4)               ; prev_free ptr to HL 
1552			      ld    H, (IX+5) 
1552			 
1552			      ld    E, (IX+2)               ; this_free ptr to DE 
1552			      ld    D, (IX+3) 
1552			 
1552			      ld    (HL), E                 ; this_free ptr into prev_free 
1552			      inc   HL 
1552			      ld    (HL), D 
1552			 
1552			      ; Clear the Z flag to indicate successful allocation 
1552			      ld    A, D 
1552			      or    E 
1552			 
1552			      pop   DE                      ; Address of allocation 
1552			 
1552			malloc_no_space: 
1552			      ld    HL, 6                   ; Clean up stack frame 
1552			      add   HL, SP 
1552			      ld    SP, HL 
1552			 
1552			      ex    DE, HL                  ; Alloc addr into HL for return 
1552			 
1552			malloc_early_exit: 
1552			      pop   IX 
1552			      pop   DE 
1552			      pop   BC 
1552			 
1552			      ret 
1552			 
1552			 
1552			;------------------------------------------------------------------------------ 
1552			;     free                                                                    : 
1552			;                                                                             : 
1552			; Description                                                                 : 
1552			;     Return the space pointed to by HL to the heap. HL must be an address as : 
1552			;     returned by malloc, otherwise the behaviour is undefined.               : 
1552			;                                                                             : 
1552			;     Where possible, directly adjacent free blocks will be merged together   : 
1552			;     into larger blocks to help ensure that the heap does not become         : 
1552			;     excessively fragmented.                                                 : 
1552			;                                                                             : 
1552			;     free does not clear or set any other value into the freed space, and    : 
1552			;     therefore its contents may be visible through subsequent malloc's. The  : 
1552			;     caller should clear the freed space as required.                        : 
1552			;                                                                             : 
1552			;     This implementation of free uses the stack exclusively, and is          : 
1552			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
1552			;     advisable to disable interrupts before calling free, and recommended    : 
1552			;     to avoid the use of free inside ISRs in general.                        : 
1552			;                                                                             : 
1552			;     NOTE: heap_init must be called before malloc and free can be used.      : 
1552			;                                                                             : 
1552			; Parameters                                                                  : 
1552			;     HL  Pointer to address of first byte of allocation to be freed          : 
1552			;                                                                             : 
1552			; Returns                                                                     : 
1552			;     Nothing                                                                 : 
1552			;                                                                             : 
1552			; Stack frame                                                                 : 
1552			;       |             |                                                       : 
1552			;       +-------------+                                                       : 
1552			;       |     BC      |                                                       : 
1552			;       +-------------+                                                       : 
1552			;       |     DE      |                                                       : 
1552			;       +-------------+                                                       : 
1552			;       |     IX      |                                                       : 
1552			;       +-------------+                                                       : 
1552			;       |  prev_free  |                                                       : 
1552			;   +2  +-------------+                                                       : 
1552			;       |  next_free  |                                                       : 
1552			;   +0  +-------------+                                                       : 
1552			;       |             |                                                       : 
1552			;                                                                             : 
1552			;------------------------------------------------------------------------------ 
1552			free: 
1552			      push  BC 
1552			      push  DE 
1552			      push  IX 
1552			 
1552			      ld    A, H                    ; Exit if ptr is null 
1552			      or    L 
1552			      jp    Z, free_early_exit 
1552			 
1552			      ; Set up stack frame 
1552			      ex    DE, HL 
1552			      ld    HL, -4                  ; Reserve 4 bytes for stack frame 
1552			      add   HL, SP 
1552			      ld    SP, HL 
1552			      ld    IX, 0                   ; Use IX as a frame pointer 
1552			      add   IX, SP 
1552			 
1552			      ; The address in HL points to the start of the useable allocated space, 
1552			      ; but the block struct starts 4 bytes before this. Sub 4 to get the 
1552			      ; address of the block itself. 
1552			      ex    DE, HL 
1552			      ld    DE, -4 
1552			      add   HL, DE 
1552			 
1552			      ; An allocated block must have a null next block pointer in it 
1552			      ld    A, (HL) 
1552			      inc   HL 
1552			      or    (HL) 
1552			      jp    NZ, free_done 
1552			 
1552			      dec   HL 
1552			 
1552			      ld    B, H                    ; Copy HL to BC 
1552			      ld    C, L 
1552			 
1552			      ; Loop through the free list to find the first block with an address 
1552			      ; higher than the block being freed 
1552			      ld    HL, free_list 
1552			 
1552			free_find_higher_block: 
1552			      ld    E, (HL)                 ; Load next ptr from free block 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			      dec   HL 
1552			 
1552			      ld    (IX+0), E               ; Save ptr to next free block 
1552			      ld    (IX+1), D 
1552			      ld    (IX+2), L               ; Save ptr to prev free block 
1552			      ld    (IX+3), H 
1552			 
1552			      ld    A, B                    ; Check if DE is greater than BC 
1552			      cp    D                       ; Compare MSB first 
1552			      jr    Z, $+4                  ; MSB the same, compare LSB 
1552			      jr    NC, free_find_higher_block_skip 
1552			      ld    A, C 
1552			      cp    E                       ; Then compare LSB 
1552			      jr    C, free_found_higher_block 
1552			 
1552			free_find_higher_block_skip: 
1552			      ld    A, D                    ; Reached the end of the free list? 
1552			      or    E 
1552			      jp    Z, free_done 
1552			 
1552			      ex    DE, HL 
1552			 
1552			      jr    free_find_higher_block 
1552			 
1552			free_found_higher_block: 
1552			      ; Insert freed block between prev and next free blocks 
1552			      ld    (HL), C                 ; Point prev free block to freed block 
1552			      inc   HL 
1552			      ld    (HL), B 
1552			 
1552			      ld    H, B                    ; Point freed block at next free block 
1552			      ld    L, C 
1552			      ld    (HL), E 
1552			      inc   HL 
1552			      ld    (HL), D 
1552			 
1552			      ; Check if the freed block is adjacent to the next free block 
1552			      inc   HL                      ; Load size of freed block into HL 
1552			      ld    E, (HL) 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			      ex    DE, HL 
1552			 
1552			      add   HL, BC                  ; Add addr of freed block and its size 
1552			 
1552			      ld    E, (IX+0)               ; Load addr of next free block into DE 
1552			      ld    D, (IX+1) 
1552			 
1552			      or    A                       ; Clear the carry flag 
1552			      sbc   HL, DE                  ; Subtract addrs to compare adjacency 
1552			      jr    NZ, free_check_adjacent_to_prev 
1552			 
1552			      ; Freed block is adjacent to next, merge into one bigger block 
1552			      ex    DE, HL                  ; Load next ptr from next block into DE 
1552			      ld    E, (HL) 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			      push  HL                      ; Save ptr to next block for later 
1552			 
1552			      ld    H, B                    ; Store ptr from next block into freed block 
1552			      ld    L, C 
1552			      ld    (HL), E 
1552			      inc   HL 
1552			      ld    (HL), D 
1552			 
1552			      pop   HL                      ; Restore ptr to next block 
1552			      inc   HL                      ; Load size of next block into DE 
1552			      ld    E, (HL) 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			      push  DE                      ; Save next block size for later 
1552			 
1552			      ld    H, B                    ; Load size of freed block into HL 
1552			      ld    L, C 
1552			      inc   HL 
1552			      inc   HL 
1552			      ld    E, (HL) 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			      ex    DE, HL 
1552			 
1552			      pop   DE                      ; Restore size of next block 
1552			      add   HL, DE                  ; Add sizes of both blocks 
1552			      ex    DE, HL 
1552			 
1552			      ld    H, B                    ; Store new bigger size into freed block 
1552			      ld    L, C 
1552			      inc   HL 
1552			      inc   HL 
1552			      ld    (HL), E 
1552			      inc   HL 
1552			      ld    (HL), D 
1552			 
1552			free_check_adjacent_to_prev: 
1552			      ; Check if the freed block is adjacent to the prev free block 
1552			      ld    L, (IX+2)               ; Prev free block ptr into HL 
1552			      ld    H, (IX+3) 
1552			 
1552			      inc   HL                      ; Size of prev free block into DE 
1552			      inc   HL 
1552			      ld    E, (HL) 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			      dec   HL 
1552			      dec   HL 
1552			      dec   HL 
1552			 
1552			      add   HL, DE                  ; Add prev block addr and size 
1552			 
1552			      or    A                       ; Clear the carry flag 
1552			      sbc   HL, BC                  ; Subtract addrs to compare adjacency 
1552			      jr    NZ, free_done 
1552			 
1552			      ; Freed block is adjacent to prev, merge into one bigger block 
1552			      ld    H, B                    ; Load next ptr from freed block into DE 
1552			      ld    L, C 
1552			      ld    E, (HL) 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			      push  HL                      ; Save freed block ptr for later 
1552			 
1552			      ld    L, (IX+2)               ; Store freed block ptr into prev block 
1552			      ld    H, (IX+3) 
1552			      ld    (HL), E 
1552			      inc   HL 
1552			      ld    (HL), D 
1552			 
1552			      pop   HL                      ; Restore freed block ptr 
1552			      inc   HL                      ; Load size of freed block into DE 
1552			      ld    E, (HL) 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			      push  DE                      ; Save freed block size for later 
1552			 
1552			      ld    L, (IX+2)               ; Load size of prev block into DE 
1552			      ld    H, (IX+3) 
1552			      inc   HL 
1552			      inc   HL 
1552			      ld    E, (HL) 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			 
1552			      pop   HL                      ; Add sizes of both blocks 
1552			      add   HL, DE 
1552			      ex    DE, HL 
1552			 
1552			      ld    L, (IX+2)               ; Store new bigger size into prev block 
1552			      ld    H, (IX+3) 
1552			      inc   HL 
1552			      inc   HL 
1552			      ld    (HL), E 
1552			      inc   HL 
1552			      ld    (HL), D 
1552			 
1552			free_done: 
1552			      ld    HL, 4                   ; Clean up stack frame 
1552			      add   HL, SP 
1552			      ld    SP, HL 
1552			 
1552			free_early_exit: 
1552			      pop   IX 
1552			      pop   DE 
1552			      pop   BC 
1552			 
1552			      ret 
1552			 
1552			 
1552			;      .org 0x8000 
1552			; 
1552			;free_list         .dw   0     ; Block struct for start of free list (MUST be 4 bytes) 
1552			 ;                 .dw   0 
1552			 
1552			endif 
1552			 
1552			 
1552			if MALLOC_4 
1552			 
1552			; My memory allocation code. Very very simple.... 
1552			; allocate space under 250 chars 
1552			 
1552			heap_init: 
1552				; init start of heap as zero 
1552				;  
1552			 
1552				ld hl, heap_start 
1552				ld a, 0 
1552				ld (hl), a      ; empty block 
1552				inc hl 
1552				ld a, 0 
1552				ld (hl), a      ; length of block 
1552				; write end of list 
1552				inc hl 
1552				ld a,(hl) 
1552				inc hl 
1552				ld a,(hl) 
1552				 
1552			 
1552				; init some malloc vars 
1552			 
1552				ld hl, 0 
1552				ld (free_list), hl       ; store last malloc location 
1552			 
1552				ld hl, free_list+3      ; flag for 'free' being used and force a rescan for reuse of block  
1552				ld a, 0 
1552				ld (hl), a 
1552			 
1552			 
1552				ld hl, heap_start 
1552				;  
1552				  
1552				ret 
1552			 
1552			 
1552			;    free block marker 
1552			;    requested size  
1552			;    pointer to next block 
1552			;    .... 
1552			;    next block marker 
1552			 
1552			 
1552			; TODO add a flag that is reset on use of free. if flag is reset then start scan from start of heap otherwise use last location 
1552			; 
1552			 
1552			 
1552			malloc:  
1552				push de 
1552				push bc 
1552				push af 
1552			 
1552				; hl space required 
1552				 
1552				ld c, l    ; hold space   (TODO only a max of 255) 
1552			 
1552			;	inc c     ; TODO BUG need to fix memory leak on push str 
1552			;	inc c 
1552			;	inc c 
1552			;	inc c 
1552			;	inc c 
1552			;	inc c 
1552			;	inc c 
1552			 
1552			 
1552			 
1552				; start at heap if a free has been issued so we can reclaim it otherwise continue from last time 
1552			 
1552				ld a, (free_list+3) 
1552				cp 0 
1552				jr z, .contheap 
1552			 
1552				ld hl, (free_list)     ; get last alloc 
1552					if DEBUG_FORTH_MALLOC_INT 
1552						DMARK "mrs" 
1552						CALLMONITOR 
1552					endif 
1552				jr .startalloc 
1552			 
1552			.contheap: 
1552				ld hl, heap_start 
1552			 
1552			.startalloc: 
1552			 
1552					if DEBUG_FORTH_MALLOC_INT 
1552						DMARK "mym" 
1552						CALLMONITOR 
1552					endif 
1552			.findblock: 
1552					if DEBUG_FORTH_MALLOC_INT 
1552						DMARK "mmf" 
1552						CALLMONITOR 
1552					endif 
1552			 
1552				ld a,(hl)  
1552				; if byte is zero then clear to use 
1552			 
1552				cp 0 
1552				jr z, .foundemptyblock 
1552			 
1552				; if byte is not clear 
1552				;     then byte is offset to next block 
1552			 
1552				inc hl 
1552				ld a, (hl) ; get size 
1552			.nextblock:	inc hl 
1552					ld e, (hl) 
1552					inc hl 
1552					ld d, (hl) 
1552					ex de, hl 
1552			;	inc hl  ; move past the store space 
1552			;	inc hl  ; move past zero index  
1552			 
1552				; TODO detect no more space 
1552			 
1552				push hl 
1552				ld de, heap_end 
1552				call cmp16 
1552				pop hl 
1552				jr nc, .nospace 
1552			 
1552				jr .findblock 
1552			 
1552			.nospace: ld hl, 0 
1552				jp .exit 
1552			 
1552			 
1552			.foundemptyblock:	 
1552					if DEBUG_FORTH_MALLOC_INT 
1552						DMARK "mme" 
1552						CALLMONITOR 
1552					endif 
1552			 
1552			; TODO has block enough space if reusing??? 
1552			 
1552				;  
1552			 
1552			; see if this block has been previously used 
1552				inc hl 
1552				ld a, (hl) 
1552				dec hl 
1552				cp 0 
1552				jr z, .newblock 
1552			 
1552					if DEBUG_FORTH_MALLOC_INT 
1552						DMARK "meR" 
1552						CALLMONITOR 
1552					endif 
1552			 
1552			; no reusing previously allocated block 
1552			 
1552			; is it smaller than previously used? 
1552				 
1552				inc hl    ; move to size 
1552				ld a, c 
1552				sub (hl)        ; we want c < (hl) 
1552				dec hl    ; move back to marker 
1552			        jr z, .findblock 
1552			 
1552				; update with the new size which should be lower 
1552			 
1552			        ;inc  hl   ; negate next move. move back to size  
1552			 
1552			.newblock: 
1552				; need to be at marker here 
1552			 
1552					if DEBUG_FORTH_MALLOC_INT 
1552						DMARK "meN" 
1552						CALLMONITOR 
1552					endif 
1552			 
1552			 
1552				ld a, c 
1552			 
1552				ld (free_list+3), a	 ; flag resume from last malloc  
1552				ld (free_list), hl    ; save out last location 
1552			 
1552			 
1552				;inc a     ; space for length byte 
1552				ld (hl), a     ; save block in use marker 
1552			 
1552				inc hl   ; move to space marker 
1552				ld (hl), a    ; save new space 
1552			 
1552				inc hl   ; move to start of allocated area 
1552				 
1552			;	push hl     ; save where we are - 1  
1552			 
1552			;	inc hl  ; move past zero index  
1552				; skip space to set down new marker 
1552			 
1552				; provide some extra space for now 
1552			 
1552				inc a    ; actual is one fewer than bytes requested. correct if zero index is taken into account 
1552				inc a 
1552				inc a 
1552			 
1552				push hl   ; save where we are in the node block 
1552			 
1552				call addatohl 
1552			 
1552				; write linked list point 
1552			 
1552				pop de     ; get our node position 
1552				ex de, hl 
1552			 
1552				ld (hl), e 
1552				inc hl 
1552				ld (hl), d 
1552			 
1552				inc hl 
1552			 
1552				; now at start of allocated data so save pointer 
1552			 
1552				push hl 
1552			 
1552				; jump to position of next node and setup empty header in DE 
1552			 
1552				ex de, hl 
1552			 
1552			;	inc hl ; move past end of block 
1552			 
1552				ld a, 0 
1552				ld (hl), a   ; empty marker 
1552				inc hl 
1552				ld (hl), a   ; size 
1552				inc hl  
1552				ld (hl), a   ; ptr 
1552				inc hl 
1552				ld (hl), a   ; ptr 
1552			 
1552			 
1552				pop hl 
1552			 
1552					if DEBUG_FORTH_MALLOC_INT 
1552						DMARK "mmr" 
1552						CALLMONITOR 
1552					endif 
1552			 
1552			.exit: 
1552				pop af 
1552				pop bc 
1552				pop de  
1552				ret 
1552			 
1552			 
1552			 
1552			 
1552			free:  
1552				push hl 
1552				push af 
1552				; get address in hl 
1552			 
1552					if DEBUG_FORTH_MALLOC_INT 
1552						DMARK "fre" 
1552						CALLMONITOR 
1552					endif 
1552				; data is at hl - move to block count 
1552				dec hl 
1552				dec hl    ; get past pointer 
1552				dec hl 
1552			 
1552				ld a, (hl)    ; need this for a validation check 
1552			 
1552				dec hl    ; move to block marker 
1552			 
1552				; now check that the block count and block marker are the same  
1552			        ; this checks that we are on a malloc node and not random memory 
1552			        ; OK a faint chance this could be a problem but rare - famous last words! 
1552			 
1552				ld c, a 
1552				ld a, (hl)    
1552			 
1552				cp c 
1552				jr nz, .freeignore      ; not a valid malloc node in use so dont break anything 
1552			 
1552				; yes good chance we are on a malloc node 
1552			 
1552				ld a, 0      
1552				ld (hl), a   ; mark as free 
1552			 
1552				ld (free_list+3), a	 ; flag reuse of existing block on next malloc 
1552			 
1552			.freeignore:  
1552			 
1552				pop af 
1552				pop hl 
1552			 
1552				ret 
1552			 
1552			 
1552			 
1552			endif 
1552			 
1552			; eof 
# End of file firmware_memory.asm
1552			  
1552			; device C  
1552			; Now handled by SPI  
1552			;if SOUND_ENABLE  
1552			;	include "firmware_sound.asm"  
1552			;endif  
1552			  
1552			include "firmware_diags.asm"  
1552			; Hardware diags menu 
1552			 
1552			 
1552			config: 
1552			 
1552 3e 00			ld a, 0 
1554 21 7d 15			ld hl, .configmn 
1557 cd db 0d			call menu 
155a			 
155a fe 00			cp 0 
155c c8				ret z 
155d			 
155d			;	cp 1 
155d			;	call z, .savetostore 
155d			 
155d fe 01			cp 1 
155f			if STARTUP_V1 
155f				call z, .selautoload 
155f			endif 
155f			 
155f			if STARTUP_V2 
155f cc 8b 15			call z, .enautoload 
1562			endif 
1562 fe 02			cp 2 
1564 cc a2 15			call z, .disautoload 
1567			;	cp 3 
1567			;	call z, .selbank 
1567 fe 03			cp 3 
1569 cc 0d 18			call z, .debug_tog 
156c fe 04			cp 4 
156e cc 5b 19			call z, .bpsgo 
1571 fe 05			cp 5 
1573 cc 36 18			call z, hardware_diags 
1576			if STARTUP_V2 
1576 fe 06			cp 6 
1578 cc ce 15			call z, create_startup 
157b			endif 
157b 18 d5			jr config 
157d			 
157d			.configmn: 
157d			;	dw prom_c3 
157d 49 1b			dw prom_c2 
157f 5f 1b			dw prom_c2a 
1581			;	dw prom_c2b 
1581			;	dw prom_c4 
1581 d6 1b			dw prom_m4 
1583 f1 1b			dw prom_m4b 
1585 f9 1b			dw prom_c1 
1587			if STARTUP_V2 
1587 08 1c			dw prom_c9 
1589			endif 
1589 00 00			dw 0 
158b				 
158b			 
158b			if STARTUP_V2 
158b			.enautoload: 
158b				if STORAGE_SE 
158b 3e fe			ld a, $fe      ; bit 0 clear 
158d 32 95 f9			ld (spi_device), a 
1590			 
1590 cd 25 05			call storage_get_block_0 
1593			 
1593 3e 01			ld a, 1 
1595 32 d0 f9			ld (store_page+STORE_0_AUTOFILE), a 
1598			 
1598 21 00 00				ld hl, 0 
159b 11 af f9				ld de, store_page 
159e cd d9 04			call storage_write_block	 ; save update 
15a1				else 
15a1			 
15a1				ld hl, prom_notav 
15a1				ld de, prom_empty 
15a1				call info_panel 
15a1				endif 
15a1			 
15a1			 
15a1 c9				ret 
15a2			endif 
15a2			 
15a2			.disautoload: 
15a2				if STORAGE_SE 
15a2 3e fe			ld a, $fe      ; bit 0 clear 
15a4 32 95 f9			ld (spi_device), a 
15a7			 
15a7 cd 25 05			call storage_get_block_0 
15aa			 
15aa 3e 00			ld a, 0 
15ac 32 d0 f9			ld (store_page+STORE_0_AUTOFILE), a 
15af			 
15af 21 00 00				ld hl, 0 
15b2 11 af f9				ld de, store_page 
15b5 cd d9 04			call storage_write_block	 ; save update 
15b8				else 
15b8			 
15b8				ld hl, prom_notav 
15b8				ld de, prom_empty 
15b8				call info_panel 
15b8				endif 
15b8			 
15b8			 
15b8 c9				ret 
15b9			 
15b9			if STARTUP_V1 
15b9			 
15b9			; Select auto start 
15b9			 
15b9			.selautoload: 
15b9			 
15b9				 
15b9				if STORAGE_SE 
15b9			 
15b9					call config_dir 
15b9				        ld hl, scratch 
15b9					ld a, 0 
15b9					call menu 
15b9			 
15b9					cp 0 
15b9					ret z 
15b9			 
15b9					dec a 
15b9			 
15b9			 
15b9					; locate menu option 
15b9			 
15b9					ld hl, scratch 
15b9					call table_lookup 
15b9			 
15b9					if DEBUG_FORTH_WORDS 
15b9						DMARK "ALl" 
15b9						CALLMONITOR 
15b9					endif 
15b9					; with the pointer to the menu it, the byte following the zero term is the file id 
15b9			 
15b9					ld a, 0 
15b9					ld bc, 50   ; max of bytes to look at 
15b9					cpir  
15b9			 
15b9					if DEBUG_FORTH_WORDS 
15b9						DMARK "ALb" 
15b9						CALLMONITOR 
15b9					endif 
15b9					;inc hl 
15b9			 
15b9					ld a, (hl)   ; file id 
15b9					 
15b9				        ; save bank and file ids 
15b9			 
15b9					push af 
15b9			 
15b9			; TODO need to save to block 0 on bank 1	 
15b9			 
15b9					call storage_get_block_0 
15b9			 
15b9					if DEBUG_FORTH_WORDS 
15b9						DMARK "AL0" 
15b9						CALLMONITOR 
15b9					endif 
15b9					pop af 
15b9			 
15b9					ld (store_page+STORE_0_FILERUN),a 
15b9					 
15b9					; save bank id 
15b9			 
15b9					ld a,(spi_device) 
15b9					ld (store_page+STORE_0_BANKRUN),a 
15b9			 
15b9					; enable auto run of store file 
15b9			 
15b9					ld a, 1 
15b9					ld (store_page+STORE_0_AUTOFILE),a 
15b9			 
15b9					; save buffer 
15b9			 
15b9					ld hl, 0 
15b9					ld de, store_page 
15b9					if DEBUG_FORTH_WORDS 
15b9						DMARK "ALw" 
15b9						CALLMONITOR 
15b9					endif 
15b9				call storage_write_block	 ; save update 
15b9			  
15b9			 
15b9			 
15b9			 
15b9					ld hl, scratch 
15b9					call config_fdir 
15b9			 
15b9				else 
15b9			 
15b9				ld hl, prom_notav 
15b9				ld de, prom_empty 
15b9				call info_panel 
15b9			 
15b9				endif 
15b9				ret 
15b9			endif 
15b9			 
15b9			 
15b9			; Select storage bank 
15b9			 
15b9			.selbank: 
15b9			 
15b9			;	if STORAGE_SE 
15b9			;	else 
15b9			 
15b9 21 1d 1c			ld hl, prom_notav 
15bc 11 33 1c			ld de, prom_empty 
15bf cd 3b 0d			call info_panel 
15c2			;	endif 
15c2				 
15c2 c9				ret 
15c3			 
15c3			if STORAGE_SE 
15c3			 
15c3			.config_ldir:   
15c3				; Load storage bank labels into menu array 
15c3			 
15c3				 
15c3			 
15c3			 
15c3 c9				ret 
15c4			 
15c4			 
15c4			endif 
15c4			 
15c4			 
15c4			; Save user words to storage 
15c4			 
15c4			.savetostore: 
15c4			 
15c4			;	if STORAGE_SE 
15c4			; 
15c4			;		call config_dir 
15c4			;	        ld hl, scratch 
15c4			;		ld a, 0 
15c4			;		call menu 
15c4			;		 
15c4			;		ld hl, scratch 
15c4			;		call config_fdir 
15c4			; 
15c4			;	else 
15c4			 
15c4 21 1d 1c			ld hl, prom_notav 
15c7 11 33 1c			ld de, prom_empty 
15ca cd 3b 0d			call info_panel 
15cd			 
15cd			;	endif 
15cd			 
15cd c9				ret 
15ce			 
15ce			if STARTUP_V2 
15ce			 
15ce			create_startup: 
15ce			 
15ce 3e 00			ld a, 0 
15d0 21 32 17			ld hl, .crstart 
15d3 cd db 0d			call menu 
15d6			 
15d6 fe 00			cp 0 
15d8 c8				ret z 
15d9			 
15d9 fe 01			cp 1 
15db cc 17 16			call z, .genlsword 
15de fe 02			cp 2 
15e0 cc 21 16			call z, .genedword 
15e3			 
15e3 fe 03			cp 3 
15e5 cc 2b 16			call z, .gendemword 
15e8			 
15e8 fe 04			cp 4 
15ea cc 35 16			call z, .genutlword 
15ed fe 05			cp 5 
15ef cc 3f 16			call z, .genspiword 
15f2 fe 06			cp 6 
15f4 cc 49 16			call z, .genkeyword 
15f7 fe 07			cp 7 
15f9 cc 0d 16			call z, .gensoundword 
15fc fe 08			cp 8 
15fe cc 03 16			call z, .genhwword 
1601 18 cb			jr create_startup 
1603			 
1603			.genhwword: 
1603 21 c0 1b			ld hl, crs_hw 
1606 11 96 16			ld de, .hwworddef 
1609 cd 53 16			call .genfile 
160c c9				ret 
160d			.gensoundword: 
160d 21 b4 1b			ld hl, crs_sound 
1610 11 a4 16			ld de, .soundworddef 
1613 cd 53 16			call .genfile 
1616 c9				ret 
1617			.genlsword: 
1617 21 76 1b			ld hl, crs_s1 
161a 11 ca 16			ld de, .lsworddef 
161d cd 53 16			call .genfile 
1620 c9				ret 
1621			 
1621			.genedword: 
1621 11 ce 16			ld de, .edworddef 
1624 21 7f 1b			ld hl, crs_s2 
1627 cd 53 16			call .genfile 
162a c9				ret 
162b			 
162b			.gendemword: 
162b 11 d6 16			ld de, .demoworddef 
162e 21 88 1b			ld hl, crs_s3 
1631 cd 53 16			call .genfile 
1634 c9				ret 
1635			 
1635			.genutlword: 
1635 21 94 1b			ld hl, crs_s4 
1638 11 b8 16			ld de, .utilwordef 
163b cd 53 16			call .genfile 
163e c9				ret 
163f			.genspiword: 
163f 21 9b 1b			ld hl, crs_s5 
1642 11 f8 16			ld de, .spiworddef 
1645 cd 53 16			call .genfile 
1648 c9				ret 
1649			.genkeyword: 
1649 21 a5 1b			ld hl, crs_s6 
164c 11 06 17			ld de, .keyworddef 
164f cd 53 16			call .genfile 
1652 c9				ret 
1653			 
1653			; hl - points to file name 
1653			; de - points to strings to add to file 
1653			 
1653			.genfile: 
1653 e5				push hl 
1654 d5				push de 
1655			 
1655 cd aa 0d			call clear_display 
1658 3e 00			ld a, display_row_1 
165a 11 85 16			ld de, .genfiletxt 
165d cd bd 0d			call str_at_display 
1660 cd cd 0d			call update_display 
1663			 
1663 d1				pop de 
1664 e1				pop hl 
1665			 
1665			 
1665 d5				push de 
1666 cd 77 08			call storage_create 
1669				; id in hl 
1669 d1				pop de   ; table of strings to add 
166a			 
166a			.genloop: 
166a			 
166a e5				push hl ; save id for next time around 
166b d5				push de ; save de for next time around 
166c			 
166c eb				ex de, hl 
166d cd bb 23			call loadwordinhl 
1670 eb				ex de, hl 
1671			 
1671				; need hl to be the id 
1671				; need de to be the string ptr 
1671				 
1671 cd 64 0b			call storage_append 
1674			 
1674 d1				pop de 
1675 e1				pop hl 
1676			 
1676 13				inc de 
1677 13				inc de 
1678			 
1678 1a				ld a,(de) 
1679 fe 00			cp 0 
167b 20 ed			jr nz, .genloop 
167d 13				inc de 
167e 1a				ld a, (de) 
167f 1b				dec de 
1680 fe 00			cp 0 
1682 20 e6			jr nz, .genloop	 
1684			 
1684 c9				ret 
1685			 
1685 .. 00		.genfiletxt:  db "Creating file...",0 
1696			 
1696			.hwworddef: 
1696 d0 67			dw test5 
1698 08 68			dw test6 
169a 40 68			dw test7 
169c 54 68			dw test8 
169e 80 68			dw test9 
16a0 96 68			dw test10 
16a2 00 00			dw 0 
16a4			 
16a4			.soundworddef: 
16a4 bb 68			dw sound1 
16a6 df 68			dw sound2 
16a8 0f 69			dw sound3 
16aa 34 69			dw sound4 
16ac 41 69			dw sound5 
16ae 4e 69			dw sound6 
16b0 5b 69			dw sound7 
16b2 68 69			dw sound8 
16b4 80 69			dw sound9 
16b6 00 00			dw 0 
16b8			 
16b8			.utilwordef: 
16b8 f6 65			dw strncpy 
16ba d1 65			dw type 
16bc 53 67			dw tuck 
16be 9d 65			dw clrstack 
16c0 56 65			dw longread 
16c2 57 66			dw start1 
16c4 67 66			dw start2 
16c6			; duplicated 
16c6			;	dw start3b 
16c6			;	dw start3c 
16c6 66 67			dw list 
16c8 00 00			dw 0 
16ca			 
16ca			.lsworddef: 
16ca 78 66			dw start3b 
16cc 00 00			dw 0 
16ce			 
16ce			.edworddef: 
16ce b5 61			dw edit1 
16d0 d6 61			dw edit2 
16d2 0b 62			dw edit3 
16d4 00 00			dw 0 
16d6			 
16d6			.demoworddef: 
16d6 97 69			dw game1 
16d8 a8 69			dw game1a 
16da 0a 6a			dw game1b 
16dc 3f 6a			dw game1c 
16de 75 6a			dw game1d 
16e0 a6 6a			dw game1s 
16e2 ba 6a			dw game1t 
16e4 cf 6a			dw game1f 
16e6 03 6b			dw game1z 
16e8 47 6b			dw game1zz 
16ea b0 6b			dw ssv2 
16ec e6 6b			dw ssv3 
16ee 02 6c			dw ssv4 
16f0 1e 6c			dw ssv5 
16f2 37 6c			dw ssv1 
16f4 7f 6c			dw ssv1cpm	 
16f6			;	dw game2b 
16f6			;	dw game2bf 
16f6			;	dw game2mba 
16f6			;	dw game2mbas	 
16f6			;	dw game2mbht 
16f6			;	dw game2mbms 
16f6			;	dw game2mb 
16f6			;	dw game3w 
16f6			;	dw game3p 
16f6			;	dw game3sc 
16f6			;	dw game3vsi 
16f6			;	dw game3vs 
16f6 00 00			dw 0 
16f8			 
16f8			 
16f8			.spiworddef: 
16f8			 
16f8 43 62		    dw spi1 
16fa 9c 62		    dw spi2 
16fc d0 62		    dw spi2b 
16fe 54 63		    dw spi3 
1700 fe 62		    dw spi4 
1702 27 63		    dw spi5 
1704			;    dw spi6 
1704			;    dw spi7 
1704			 
1704			;    dw spi8 
1704			;    dw spi9 
1704			;    dw spi10 
1704 00 00		    dw 0 
1706			 
1706			.keyworddef: 
1706			 
1706 d6 6c			dw keyup 
1708 e4 6c			dw keydown 
170a f4 6c			dw keyleft 
170c 04 6d			dw keyright 
170e 15 6d			dw 	keyf1 
1710 23 6d			dw keyf2 
1712 31 6d			dw keyf3 
1714 3f 6d			dw keyf4 
1716 4d 6d			dw keyf5 
1718 5b 6d			dw keyf6 
171a 69 6d			dw keyf7 
171c 77 6d			dw keyf8 
171e 85 6d			dw keyf9 
1720 93 6d			dw keyf10 
1722 a2 6d			dw keyf11 
1724 b1 6d			dw keyf12 
1726 c0 6d			dw keytab 
1728 cf 6d			dw keycr 
172a dd 6d			dw keyhome 
172c ed 6d			dw keyend 
172e fc 6d			dw keybs 
1730 00 00			dw 0 
1732			 
1732			.crstart: 
1732 76 1b			dw crs_s1 
1734 7f 1b			dw crs_s2 
1736 88 1b			dw crs_s3 
1738 94 1b			dw crs_s4 
173a 9b 1b			dw crs_s5 
173c a5 1b			dw crs_s6 
173e b4 1b			dw crs_sound 
1740 c0 1b			dw crs_hw 
1742 00 00			dw 0 
1744			 
1744			endif 
1744			 
1744			 
1744			if STORAGE_SE 
1744			 
1744			config_fdir: 
1744				; using the scratch dir go through and release the memory allocated for each string 
1744				 
1744 21 f6 f0			ld hl, scratch 
1747 5e			.cfdir:	ld e,(hl) 
1748 23				inc hl 
1749 56				ld d,(hl) 
174a 23				inc hl 
174b			 
174b eb				ex de, hl 
174c cd 07 10			call ishlzero 
174f c8				ret z     ; return on null pointer 
1750 cd 83 14			call free 
1753 eb				ex de, hl 
1754 18 f1			jr .cfdir 
1756			 
1756			 
1756 c9				ret 
1757			 
1757			 
1757			config_dir: 
1757			 
1757				; for the config menus that need to build a directory of storage call this routine 
1757				; it will construct a menu in scratch to pass to menu 
1757			 
1757				; open storage device 
1757			 
1757				; execute DIR to build a list of files and their ids into scratch in menu format 
1757				; once the menu has finished then will need to call config_fdir to release the strings 
1757				 
1757				; c = number items 
1757			 
1757				 
1757 cd 25 05			call storage_get_block_0 
175a			 
175a 21 af f9			ld hl, store_page     ; get current id count 
175d 46				ld b, (hl) 
175e 0e 00			ld c, 0    ; count of files   
1760			 
1760			 
1760 21 f6 f0			ld hl, scratch 
1763 22 a6 f9			ld (store_tmp2), hl    ; location to poke strings 
1766			 
1766				; check for empty drive 
1766			 
1766 3e 00			ld a, 0 
1768 b8				cp b 
1769 ca 03 18			jp z, .dirdone 
176c			 
176c				 
176c					if DEBUG_FORTH_WORDS 
176c						DMARK "Cdc" 
176c f5				push af  
176d 3a 81 17			ld a, (.dmark)  
1770 32 a0 fd			ld (debug_mark),a  
1773 3a 82 17			ld a, (.dmark+1)  
1776 32 a1 fd			ld (debug_mark+1),a  
1779 3a 83 17			ld a, (.dmark+2)  
177c 32 a2 fd			ld (debug_mark+2),a  
177f 18 03			jr .pastdmark  
1781 ..			.dmark: db "Cdc"  
1784 f1			.pastdmark: pop af  
1785			endm  
# End of macro DMARK
1785						CALLMONITOR 
1785 cd aa fd			call debug_vector  
1788				endm  
# End of macro CALLMONITOR
1788					endif 
1788			 
1788			 
1788			.diritem:	 
1788 c5				push bc 
1789				; for each of the current ids do a search for them and if found push to stack 
1789			 
1789 21 40 00				ld hl, STORE_BLOCK_PHY 
178c 16 00				ld d, 0		 ; look for extent 0 of block id as this contains file name 
178e 58					ld e,b 
178f			 
178f cd a7 07				call storage_findnextid 
1792			 
1792			 
1792					; if found hl will be non zero 
1792			 
1792 cd 07 10				call ishlzero 
1795 28 69				jr z, .dirnotfound 
1797			 
1797					; increase count 
1797			 
1797 c1					pop bc	 
1798 0c					inc c 
1799 c5					push bc 
179a					 
179a			 
179a					; get file header and push the file name 
179a			 
179a 11 af f9				ld de, store_page 
179d cd 74 04				call storage_read_block 
17a0			 
17a0					; push file id to stack 
17a0				 
17a0 3a af f9				ld a, (store_page) 
17a3 26 00				ld h, 0 
17a5 6f					ld l, a 
17a6			 
17a6					;call forth_push_numhl 
17a6					; TODO store id 
17a6			 
17a6 e5					push hl 
17a7			 
17a7					; push extent count to stack  
17a7				 
17a7 21 b2 f9				ld hl, store_page+3 
17aa			 
17aa					; get file name length 
17aa			 
17aa cd 44 13				call strlenz   
17ad			 
17ad 23					inc hl   ; cover zero term 
17ae 23					inc hl  ; stick the id at the end of the area 
17af			 
17af e5					push hl 
17b0 c1					pop bc    ; move length to bc 
17b1			 
17b1 cd b9 13				call malloc 
17b4			 
17b4					; TODO save malloc area to scratch 
17b4			 
17b4 eb					ex de, hl 
17b5 2a a6 f9				ld hl, (store_tmp2) 
17b8 73					ld (hl), e 
17b9 23					inc hl 
17ba 72					ld (hl), d 
17bb 23					inc hl 
17bc 22 a6 f9				ld (store_tmp2), hl 
17bf			 
17bf					 
17bf			 
17bf					;pop hl   ; get source 
17bf			;		ex de, hl    ; swap aronund	 
17bf			 
17bf 21 b2 f9				ld hl, store_page+3 
17c2					if DEBUG_FORTH_WORDS 
17c2						DMARK "CFd" 
17c2 f5				push af  
17c3 3a d7 17			ld a, (.dmark)  
17c6 32 a0 fd			ld (debug_mark),a  
17c9 3a d8 17			ld a, (.dmark+1)  
17cc 32 a1 fd			ld (debug_mark+1),a  
17cf 3a d9 17			ld a, (.dmark+2)  
17d2 32 a2 fd			ld (debug_mark+2),a  
17d5 18 03			jr .pastdmark  
17d7 ..			.dmark: db "CFd"  
17da f1			.pastdmark: pop af  
17db			endm  
# End of macro DMARK
17db						CALLMONITOR 
17db cd aa fd			call debug_vector  
17de				endm  
# End of macro CALLMONITOR
17de					endif 
17de ed b0				ldir 
17e0			 
17e0					; de is past string, move back one and store id 
17e0					 
17e0 1b					dec de 
17e1			 
17e1					; store file id 
17e1			 
17e1 e1					pop hl 
17e2 eb					ex de,hl 
17e3 73					ld (hl), e 
17e4			 
17e4					if DEBUG_FORTH_WORDS 
17e4						DMARK "Cdi" 
17e4 f5				push af  
17e5 3a f9 17			ld a, (.dmark)  
17e8 32 a0 fd			ld (debug_mark),a  
17eb 3a fa 17			ld a, (.dmark+1)  
17ee 32 a1 fd			ld (debug_mark+1),a  
17f1 3a fb 17			ld a, (.dmark+2)  
17f4 32 a2 fd			ld (debug_mark+2),a  
17f7 18 03			jr .pastdmark  
17f9 ..			.dmark: db "Cdi"  
17fc f1			.pastdmark: pop af  
17fd			endm  
# End of macro DMARK
17fd						CALLMONITOR 
17fd cd aa fd			call debug_vector  
1800				endm  
# End of macro CALLMONITOR
1800					endif 
1800					 
1800			.dirnotfound: 
1800 c1					pop bc     
1801 10 85				djnz .diritem 
1803				 
1803			.dirdone:	 
1803			 
1803 3e 00				ld a, 0 
1805 2a a6 f9				ld hl, (store_tmp2) 
1808 77					ld (hl), a 
1809 23					inc hl 
180a 77					ld (hl), a 
180b 23					inc hl 
180c					; push a count of the dir items found 
180c			 
180c			;		ld h, 0 
180c			;		ld l, c 
180c			 
180c c9				ret 
180d			 
180d			endif 
180d			 
180d			 
180d			; Settings 
180d			; Run  
180d			 
180d			 
180d			 
180d			;hd_menu1:   db "Diags:  1: Key Matrix   5: Sound",0 
180d			;;hd_menu2:   db "        2: Editor",0   
180d			;hd_menu2:   db "        2: Editor       6: Menu",0   
180d			;hd_menu3:   db "        3: Storage",0 
180d			;hd_menu4:   db "0=quit  4: Debug",0 
180d			;hd_don:     db "ON",0 
180d			;hd_doff:     db "OFF",0 
180d			; 
180d			; 
180d			; 
180d			;hardware_diags_old:       
180d			; 
180d			;.diagmenu: 
180d			;	call clear_display 
180d			;	ld a, display_row_1 
180d			;	ld de, hd_menu1 
180d			;	call str_at_display 
180d			; 
180d			;	ld a, display_row_2 
180d			;	ld de, hd_menu2 
180d			;	call str_at_display 
180d			; 
180d			;	ld a, display_row_3 
180d			;	ld de, hd_menu3 
180d			;	call str_at_display 
180d			; 
180d			;	ld a,  display_row_4 
180d			;	ld de, hd_menu4 
180d			;	call str_at_display 
180d			; 
180d			;	; display debug state 
180d			; 
180d			;	ld de, hd_don 
180d			;	ld a, (os_view_disable) 
180d			;	cp 0 
180d			;	jr z, .distog 
180d			;	ld de, hd_doff 
180d			;.distog: ld a, display_row_4+17 
180d			;	call str_at_display 
180d			; 
180d			;	call update_display 
180d			; 
180d			;	call cin_wait 
180d			; 
180d			; 
180d			; 
180d			;	cp '4' 
180d			;	jr nz, .diagn1 
180d			; 
180d			;	; debug toggle 
180d			; 
180d			;	ld a, (os_view_disable) 
180d			;	ld b, '*' 
180d			;	cp 0 
180d			;	jr z, .debtog 
180d			;	ld b, 0 
180d			;.debtog:	 
180d			;	ld a,b 
180d			;	ld (os_view_disable),a 
180d			; 
180d			;.diagn1: cp '0' 
180d			;	 ret z 
180d			; 
180d			;;	cp '1' 
180d			;;       jp z, matrix	 
180d			;;   TODO keyboard matrix test 
180d			; 
180d			;	cp '2' 
180d			;	jp z, .diagedit 
180d			; 
180d			;;	cp '6' 
180d			;;	jp z, .menutest 
180d			;;if ENABLE_BASIC 
180d			;;	cp '6' 
180d			;;	jp z, basic 
180d			;;endif 
180d			 ; 
180d			;	jp .diagmenu 
180d			; 
180d			; 
180d			;	ret 
180d			 
180d			 
180d			.debug_tog: 
180d 21 57 18			ld hl, .menudebug 
1810				 
1810			;	ld a, (os_view_disable) 
1810			;	cp '*' 
1810 3a aa fd			ld a,(debug_vector) 
1813 fe c9			cp $C9   ; RET 
1815 20 04			jr nz,.tdon  
1817 3e 01			ld a, 1 
1819 18 02			jr .tog1 
181b 3e 00		.tdon: ld a, 0 
181d			 
181d			.tog1: 
181d cd db 0d			call menu 
1820 fe 00			cp 0 
1822 c8				ret z 
1823 fe 01			cp 1    ; disable debug 
1825 28 04			jr z, .dtog0 
1827 3e 2a			ld a, '*' 
1829 18 05			jr .dtogset 
182b			.dtog0:  
182b				;ld a, 0 
182b cd 49 19			call bp_on 
182e 18 dd			jr .debug_tog 
1830			.dtogset:  
1830				; ld (os_view_disable), a 
1830 cd 55 19			call bp_off 
1833 c3 0d 18			jp .debug_tog 
1836			 
1836			 
1836			hardware_diags:       
1836			 
1836			.diagm: 
1836 21 49 18			ld hl, .menuitems 
1839 3e 00			ld a, 0 
183b cd db 0d			call menu 
183e			 
183e fe 00		         cp 0 
1840 c8				 ret z 
1841			 
1841 fe 02			cp 2 
1843 ca a2 18			jp z, .diagedit 
1846			 
1846			;	cp '6' 
1846			;	jp z, .menutest 
1846			;if ENABLE_BASIC 
1846			;	cp '6' 
1846			;	jp z, basic 
1846			;endif 
1846			  
1846 c3 36 18			jp .diagm 
1849			 
1849				 
1849 5d 18		.menuitems:   	dw .m1 
184b 68 18				dw .m2 
184d 6f 18				dw .m3 
184f 77 18				dw .m5 
1851 7d 18				dw .m5a 
1853 86 18				dw .m5b 
1855 00 00				dw 0 
1857			 
1857			.menudebug: 
1857 8f 18				dw .m6 
1859 98 18				dw .m7 
185b 00 00				dw 0 
185d			 
185d .. 00		.m1:   db "Key Matrix",0 
1868 .. 00		.m2:   db "Editor",0 
186f .. 00		.m3:   db "Storage",0 
1877 .. 00		.m5:   db "Sound",0 
187d .. 00		.m5a:  db "RAM Test",0 
1886 .. 00		.m5b:  db "LCD Test",0 
188f			 
188f .. 00		.m6:   db "Debug ON",0 
1898 .. 00		.m7:   db "Debug OFF",0 
18a2			 
18a2			; debug editor 
18a2			 
18a2			.diagedit: 
18a2			 
18a2 21 f6 f0			ld hl, scratch 
18a5			;	ld bc, 250 
18a5			;	ldir 
18a5				; TODO ldir is not working strcpy may not get all the terms on the input line???? 
18a5 3e 00			ld a, 0 
18a7 77				ld (hl), a 
18a8 23				inc hl 
18a9 77				ld (hl), a 
18aa 23				inc hl 
18ab 77				ld (hl), a 
18ac			 
18ac cd aa 0d		        call clear_display 
18af cd cd 0d			call update_display 
18b2				;ld a, 1 
18b2				;ld (hardware_diag), a 
18b2			.diloop: 
18b2 3e 00			ld a, display_row_1 
18b4 0e 00			ld c, 0 
18b6 16 ff			ld d, 255    ; TODO fix input_str to actually take note of max string input length 
18b8 1e 28			ld e, 40 
18ba			 
18ba 21 f6 f0			ld hl, scratch	 
18bd cd 0b 10			call input_str 
18c0			 
18c0 3e 28			ld a, display_row_2 
18c2 11 f6 f0			ld de, scratch 
18c5 cd bd 0d			call str_at_display 
18c8 cd cd 0d			call update_display 
18cb			 
18cb c3 b2 18			jp .diloop 
18ce			 
18ce			 
18ce			; pass word in hl 
18ce			; a has display location 
18ce			display_word_at: 
18ce f5				push af 
18cf e5				push hl 
18d0 7c				ld a,h 
18d1 21 fb f3			ld hl, os_word_scratch 
18d4 cd e7 11			call hexout 
18d7 e1				pop hl 
18d8 7d				ld a,l 
18d9 21 fd f3			ld hl, os_word_scratch+2 
18dc cd e7 11			call hexout 
18df 21 ff f3			ld hl, os_word_scratch+4 
18e2 3e 00			ld a,0 
18e4 77				ld (hl),a 
18e5 11 fb f3			ld de,os_word_scratch 
18e8 f1				pop af 
18e9 cd bd 0d				call str_at_display 
18ec c9				ret 
18ed			 
18ed			display_ptr_state: 
18ed			 
18ed				; to restore afterwards 
18ed			 
18ed d5				push de 
18ee c5				push bc 
18ef e5				push hl 
18f0 f5				push af 
18f1			 
18f1				; for use in here 
18f1			 
18f1			;	push bc 
18f1			;	push de 
18f1			;	push hl 
18f1			;	push af 
18f1			 
18f1 cd aa 0d			call clear_display 
18f4			 
18f4 11 cc 1a			ld de, .ptrstate 
18f7 3e 00			ld a, display_row_1 
18f9 cd bd 0d			call str_at_display 
18fc			 
18fc				; display debug step 
18fc			 
18fc			 
18fc 11 a0 fd			ld de, debug_mark 
18ff 3e 26			ld a, display_row_1+display_cols-2 
1901 cd bd 0d			call str_at_display 
1904			 
1904				; display a 
1904 11 d6 1a			ld de, .ptrcliptr 
1907 3e 28			ld a, display_row_2 
1909 cd bd 0d			call str_at_display 
190c			 
190c f1				pop af 
190d 2a 75 f9			ld hl,(cli_ptr) 
1910 3e 30			ld a, display_row_2+8 
1912 cd ce 18			call display_word_at 
1915			 
1915			 
1915				; display hl 
1915			 
1915			 
1915 11 de 1a			ld de, .ptrclioptr 
1918 3e 32			ld a, display_row_2+10 
191a cd bd 0d			call str_at_display 
191d			; 
191d			;	pop hl 
191d 3e 35			ld a, display_row_2+13 
191f 2a 73 f9			ld hl,(cli_origptr) 
1922 cd ce 18			call display_word_at 
1925			; 
1925			;	 
1925			;	; display de 
1925			 
1925			;	ld de, .regstatede 
1925			;	ld a, display_row_3 
1925			;	call str_at_display 
1925			 
1925			;	pop de 
1925			;	ld h,d 
1925			;	ld l, e 
1925			;	ld a, display_row_3+3 
1925			;	call display_word_at 
1925			 
1925			 
1925				; display bc 
1925			 
1925			;	ld de, .regstatebc 
1925			;	ld a, display_row_3+10 
1925			;	call str_at_display 
1925			 
1925			;	pop bc 
1925			;	ld h,b 
1925			;	ld l, c 
1925			;	ld a, display_row_3+13 
1925			;	call display_word_at 
1925			 
1925			 
1925				; display dsp 
1925			 
1925			;	ld de, .regstatedsp 
1925			;	ld a, display_row_4 
1925			;	call str_at_display 
1925			 
1925				 
1925			;	ld hl,(cli_data_sp) 
1925			;	ld a, display_row_4+4 
1925			;	call display_word_at 
1925			 
1925				; display rsp 
1925			 
1925 11 0d 1b			ld de, .regstatersp 
1928 3e 82			ld a, display_row_4+10 
192a cd bd 0d			call str_at_display 
192d			 
192d				 
192d 2a 27 f9			ld hl,(cli_ret_sp) 
1930 3e 86			ld a, display_row_4+14 
1932 cd ce 18			call display_word_at 
1935			 
1935 cd cd 0d			call update_display 
1938			 
1938 cd ed 0c			call delay1s 
193b cd ed 0c			call delay1s 
193e cd ed 0c			call delay1s 
1941			 
1941			 
1941 cd c0 1f			call next_page_prompt 
1944			 
1944				; restore  
1944			 
1944 f1				pop af 
1945 e1				pop hl 
1946 c1				pop bc 
1947 d1				pop de 
1948 c9				ret 
1949			 
1949			; Update the break point vector so that the user can hook a new routine 
1949			 
1949			bp_on: 
1949 3e c3			ld a, $c3    ; JP 
194b 32 aa fd			ld (debug_vector), a 
194e 21 5b 19			ld hl, break_point_state 
1951 22 ab fd			ld (debug_vector+1), hl 
1954 c9				ret 
1955			 
1955			bp_off: 
1955 3e c9			ld a, $c9    ; RET 
1957 32 aa fd			ld (debug_vector), a 
195a c9				ret 
195b			 
195b			 
195b			break_point_state: 
195b			;	push af 
195b			; 
195b			;	; see if disabled 
195b			; 
195b			;	ld a, (os_view_disable) 
195b			;	cp '*' 
195b			;	jr nz, .bpsgo 
195b			;	pop af 
195b			;	ret 
195b			 
195b			.bpsgo: 
195b			;	pop af 
195b f5				push af 
195c 22 d8 f0			ld (os_view_hl), hl 
195f ed 53 d6 f0		ld (os_view_de), de 
1963 ed 43 d4 f0		ld (os_view_bc), bc 
1967 e5				push hl 
1968 6f				ld l, a 
1969 26 00			ld h, 0 
196b 22 da f0			ld (os_view_af),hl 
196e			 
196e 21 e6 fc				ld hl, display_fb0 
1971 22 01 fb				ld (display_fb_active), hl 
1974 e1				pop hl	 
1975			 
1975 3e 31			ld a, '1' 
1977 fe 2a		.bps1:  cp '*' 
1979 cc 55 19			call z, bp_off 
197c			;	jr nz, .bps1b 
197c			;	ld (os_view_disable),a 
197c fe 31		.bps1b:  cp '1' 
197e 20 14			jr nz, .bps2 
1980			 
1980				; display reg 
1980			 
1980				 
1980			 
1980 3a da f0			ld a, (os_view_af) 
1983 2a d8 f0			ld hl, (os_view_hl) 
1986 ed 5b d6 f0		ld de, (os_view_de) 
198a ed 4b d4 f0		ld bc, (os_view_bc) 
198e cd 28 1a			call display_reg_state 
1991 c3 14 1a			jp .bpschk 
1994			 
1994 fe 32		.bps2:  cp '2' 
1996 20 08			jr nz, .bps3 
1998				 
1998				; display hl 
1998 2a d8 f0			ld hl, (os_view_hl) 
199b cd 12 1b			call display_dump_at_hl 
199e			 
199e 18 74			jr .bpschk 
19a0			 
19a0 fe 33		.bps3:  cp '3' 
19a2 20 08			jr nz, .bps4 
19a4			 
19a4			        ; display de 
19a4 2a d6 f0			ld hl, (os_view_de) 
19a7 cd 12 1b			call display_dump_at_hl 
19aa			 
19aa 18 68			jr .bpschk 
19ac fe 34		.bps4:  cp '4' 
19ae 20 08			jr nz, .bps5 
19b0			 
19b0			        ; display bc 
19b0 2a d4 f0			ld hl, (os_view_bc) 
19b3 cd 12 1b			call display_dump_at_hl 
19b6			 
19b6 18 5c			jr .bpschk 
19b8 fe 35		.bps5:  cp '5' 
19ba 20 08		        jr nz, .bps7 
19bc			 
19bc				; display cur ptr 
19bc 2a 75 f9			ld hl, (cli_ptr) 
19bf cd 12 1b			call display_dump_at_hl 
19c2			 
19c2 18 50			jr .bpschk 
19c4 fe 36		.bps7:  cp '6' 
19c6 20 08			jr nz, .bps8b 
19c8				 
19c8				; display cur orig ptr 
19c8 2a 73 f9			ld hl, (cli_origptr) 
19cb cd 12 1b			call display_dump_at_hl 
19ce 18 44			jr .bpschk 
19d0 fe 37		.bps8b:  cp '7' 
19d2 20 08			jr nz, .bps9 
19d4				 
19d4				; display dsp 
19d4 2a 23 f9			ld hl, (cli_data_sp) 
19d7 cd 12 1b			call display_dump_at_hl 
19da			 
19da 18 38			jr .bpschk 
19dc fe 39		.bps9:  cp '9' 
19de 20 05			jr nz, .bps8c 
19e0				 
19e0				; display SP 
19e0			;	ld hl, sp 
19e0 cd 12 1b			call display_dump_at_hl 
19e3			 
19e3 18 2f			jr .bpschk 
19e5 fe 38		.bps8c:  cp '8' 
19e7 20 08			jr nz, .bps8d 
19e9				 
19e9				; display rsp 
19e9 2a 27 f9			ld hl, (cli_ret_sp) 
19ec cd 12 1b			call display_dump_at_hl 
19ef			 
19ef 18 23			jr .bpschk 
19f1 fe 23		.bps8d:  cp '#'     ; access monitor sub system 
19f3 20 05			jr nz, .bps8 
19f5 cd 7a 1d			call monitor 
19f8			 
19f8 18 1a			jr .bpschk 
19fa fe 30		.bps8:  cp '0' 
19fc 20 16			jr nz, .bpschk 
19fe			 
19fe 21 45 fc				ld hl, display_fb1 
1a01 22 01 fb				ld (display_fb_active), hl 
1a04 cd cd 0d				call update_display 
1a07			 
1a07				;ld a, (os_view_af) 
1a07 2a d8 f0			ld hl, (os_view_hl) 
1a0a ed 5b d6 f0		ld de, (os_view_de) 
1a0e ed 4b d4 f0		ld bc, (os_view_bc) 
1a12 f1				pop af 
1a13 c9				ret 
1a14			 
1a14			.bpschk:   
1a14 cd ed 0c			call delay1s 
1a17 3e 9f		ld a,display_row_4 + display_cols - 1 
1a19 11 be 1f		        ld de, endprg 
1a1c cd bd 0d			call str_at_display 
1a1f cd cd 0d			call update_display 
1a22 cd 80 75			call cin_wait 
1a25			 
1a25 c3 77 19			jp .bps1 
1a28			 
1a28			 
1a28			display_reg_state: 
1a28			 
1a28				; to restore afterwards 
1a28			 
1a28 d5				push de 
1a29 c5				push bc 
1a2a e5				push hl 
1a2b f5				push af 
1a2c			 
1a2c				; for use in here 
1a2c			 
1a2c c5				push bc 
1a2d d5				push de 
1a2e e5				push hl 
1a2f f5				push af 
1a30			 
1a30 cd aa 0d			call clear_display 
1a33			 
1a33 11 e8 1a			ld de, .regstate 
1a36 3e 00			ld a, display_row_1 
1a38 cd bd 0d			call str_at_display 
1a3b			 
1a3b				; display debug step 
1a3b			 
1a3b			 
1a3b 11 a0 fd			ld de, debug_mark 
1a3e 3e 25			ld a, display_row_1+display_cols-3 
1a40 cd bd 0d			call str_at_display 
1a43			 
1a43				; display a 
1a43 11 04 1b			ld de, .regstatea 
1a46 3e 28			ld a, display_row_2 
1a48 cd bd 0d			call str_at_display 
1a4b			 
1a4b e1				pop hl 
1a4c			;	ld h,0 
1a4c			;	ld l, a 
1a4c 3e 2b			ld a, display_row_2+3 
1a4e cd ce 18			call display_word_at 
1a51			 
1a51			 
1a51				; display hl 
1a51			 
1a51			 
1a51 11 f8 1a			ld de, .regstatehl 
1a54 3e 32			ld a, display_row_2+10 
1a56 cd bd 0d			call str_at_display 
1a59			 
1a59 e1				pop hl 
1a5a 3e 35			ld a, display_row_2+13 
1a5c cd ce 18			call display_word_at 
1a5f			 
1a5f				 
1a5f				; display de 
1a5f			 
1a5f 11 fc 1a			ld de, .regstatede 
1a62 3e 50			ld a, display_row_3 
1a64 cd bd 0d			call str_at_display 
1a67			 
1a67 e1				pop hl 
1a68			;	ld h,d 
1a68			;	ld l, e 
1a68 3e 53			ld a, display_row_3+3 
1a6a cd ce 18			call display_word_at 
1a6d			 
1a6d			 
1a6d				; display bc 
1a6d			 
1a6d 11 00 1b			ld de, .regstatebc 
1a70 3e 5a			ld a, display_row_3+10 
1a72 cd bd 0d			call str_at_display 
1a75			 
1a75 e1				pop hl 
1a76			;	ld h,b 
1a76			;	ld l, c 
1a76 3e 5d			ld a, display_row_3+13 
1a78 cd ce 18			call display_word_at 
1a7b			 
1a7b			 
1a7b				; display dsp 
1a7b			 
1a7b 11 08 1b			ld de, .regstatedsp 
1a7e 3e 78			ld a, display_row_4 
1a80 cd bd 0d			call str_at_display 
1a83			 
1a83				 
1a83 2a 23 f9			ld hl,(cli_data_sp) 
1a86 3e 7c			ld a, display_row_4+4 
1a88 cd ce 18			call display_word_at 
1a8b			 
1a8b				; display rsp 
1a8b			 
1a8b 11 0d 1b			ld de, .regstatersp 
1a8e 3e 82			ld a, display_row_4+10 
1a90 cd bd 0d			call str_at_display 
1a93			 
1a93				 
1a93 2a 27 f9			ld hl,(cli_ret_sp) 
1a96 3e 86			ld a, display_row_4+14 
1a98 cd ce 18			call display_word_at 
1a9b			 
1a9b cd cd 0d			call update_display 
1a9e			 
1a9e			;	call delay1s 
1a9e			;	call delay1s 
1a9e			;	call delay1s 
1a9e			 
1a9e			 
1a9e			;	call next_page_prompt 
1a9e			 
1a9e				; restore  
1a9e			 
1a9e f1				pop af 
1a9f e1				pop hl 
1aa0 c1				pop bc 
1aa1 d1				pop de 
1aa2 c9				ret 
1aa3			 
1aa3 .. 00		.wordincurptr:  db "Word in cur_ptr (5)",0 
1ab7 .. 00		.wordincuroptr:  db "Word in cur_optr (6)",0 
1acc .. 00		.ptrstate:	db "Ptr State",0 
1ad6 .. 00		.ptrcliptr:     db "cli_ptr",0 
1ade .. 00		.ptrclioptr:     db "cli_o_ptr",0 
1ae8 .. 00		.regstate:	db "Reg State (1/0)",0 
1af8 .. 00		.regstatehl:	db "HL:",0 
1afc .. 00		.regstatede:	db "DE:",0 
1b00 .. 00		.regstatebc:	db "BC:",0 
1b04 .. 00		.regstatea:	db "A :",0 
1b08 .. 00		.regstatedsp:	db "DSP:",0 
1b0d .. 00		.regstatersp:	db "RSP:",0 
1b12			 
1b12			display_dump_at_hl: 
1b12 e5				push hl 
1b13 d5				push de 
1b14 c5				push bc 
1b15 f5				push af 
1b16			 
1b16 22 19 f4			ld (os_cur_ptr),hl	 
1b19 cd aa 0d			call clear_display 
1b1c cd c8 1e			call dumpcont 
1b1f			;	call delay1s 
1b1f			;	call next_page_prompt 
1b1f			 
1b1f			 
1b1f f1				pop af 
1b20 c1				pop bc 
1b21 d1				pop de 
1b22 e1				pop hl 
1b23 c9				ret 
1b24			 
1b24			;if ENABLE_BASIC 
1b24			;	include "nascombasic.asm" 
1b24			;	basic: 
1b24			;	include "forth/FORTH.ASM" 
1b24			;endif 
1b24			 
1b24			; eof 
1b24			 
1b24			 
# End of file firmware_diags.asm
1b24			  
1b24			include "firmware_prompts.asm"  
1b24			; Prompts  
1b24			 
1b24			; boot messages 
1b24			 
1b24 .. 00		prom_bootmsg:	db "z80-homebrew OS v1.7",0 
1b39 .. 00		prom_bootmsg1:	db "by Kevin Groves",0 
1b49			 
1b49			 
1b49			; config menus 
1b49			 
1b49			;prom_c3: db "Add Dictionary To File",0 
1b49			 
1b49			if STARTUP_V1 
1b49			prom_c2: db "Select Autoload File",0 
1b49			prom_c2a: db "Disable Autoload File", 0 
1b49			endif 
1b49			 
1b49			if STARTUP_V2 
1b49 .. 00		prom_c2: db "Enable Autoload Files",0 
1b5f .. 00		prom_c2a: db "Disable Autoload Files", 0 
1b76			 
1b76 .. 00		crs_s1: db "*ls-word", 0 
1b7f .. 00		crs_s2: db "*ed-word", 0 
1b88 .. 00		crs_s3: db "*Demo-Games", 0 
1b94 .. 00		crs_s4: db "*Utils", 0 
1b9b .. 00		crs_s5: db "*SPI-Util", 0 
1ba5 .. 00		crs_s6: db "*Key-Constants", 0 
1bb4 .. 00		crs_sound: db "*Sound-Util", 0 
1bc0 .. 00		crs_hw: db "*Hello-World",0 
1bcd			 
1bcd			 
1bcd			 
1bcd			endif 
1bcd			;prom_c2b: db "Select Storage Bank",0 
1bcd .. 00		prom_c4: db "Settings",0 
1bd6 .. 00		prom_m4:   db "Debug & Breakpoints On/Off",0 
1bf1 .. 00		prom_m4b:   db "Monitor",0 
1bf9 .. 00		prom_c1: db "Hardware Diags",0 
1c08			 
1c08			 
1c08			if STARTUP_V2 
1c08 .. 00		prom_c9: db "Create Startup Files",0 
1c1d			endif 
1c1d			 
1c1d .. 00		prom_notav:    db "Feature not available",0 
1c33 .. 00		prom_empty:    db "",0 
1c34			 
1c34			; eof 
1c34			 
# End of file firmware_prompts.asm
1c34			  
1c34			  
1c34			; eof  
1c34			  
# End of file firmware.asm
1c34			 
1c34			;; below moved from firmware.asm for strange zero calc of baseusermem label. Scope issue on multipass???? 
1c34			;if BASE_KEV  
1c34			;baseram: equ 08000h 
1c34			;endif 
1c34			 
1c34			;if BASE_SC114 
1c34			;baseram:     equ    endofcode 
1c34			;endif 
1c34			 
1c34			 
1c34			; Add NMI support. A rst 066h when r15z goes neg on clock side of resist. needs to do retn when exiting 
1c34			 
1c34			; start system 
1c34			 
1c34			coldstart: 
1c34				; set sp 
1c34				; di/ei 
1c34			 
1c34 f3				di 
1c35 31 fd ff			ld sp, tos 
1c38 cd 07 72			call init_nmi 
1c3b			;	ei 
1c3b			 
1c3b				; init spinner 
1c3b 3e 00			ld a,0 
1c3d 32 fb fa			ld (display_active), a 
1c40			 
1c40				; disable breakpoint by default 
1c40			 
1c40				;ld a,'*' 
1c40			;	ld a,' ' 
1c40			;	ld (os_view_disable),a 
1c40			 
1c40				; set break point vector as new break point on or off 
1c40 cd 55 19			call bp_off 
1c43			 
1c43				; init hardware 
1c43			 
1c43				; init keyboard and screen hardware 
1c43			 
1c43 cd 6c 00			call hardware_init 
1c46			 
1c46			 
1c46 cd ed 0c			call delay1s 
1c49 3e 58			ld a, display_row_3+8 
1c4b 11 03 00			ld de, buildtime 
1c4e cd bd 0d			call str_at_display 
1c51 cd cd 0d			call update_display 
1c54			 
1c54 cd ed 0c			call delay1s 
1c57 cd ed 0c			call delay1s 
1c5a cd ed 0c			call delay1s 
1c5d			 
1c5d				; detect if any keys are held down to enable breakpoints at start up 
1c5d			 
1c5d cd 91 75			call cin  
1c60 fe 00			cp 0 
1c62 28 03			jr z, .nokeys 
1c64			 
1c64				;call hardware_diags 
1c64 cd 52 15			call config 
1c67			 
1c67			;	ld de, .bpen 
1c67			;	ld a, display_row_4 
1c67			;	call str_at_display 
1c67			;	call update_display 
1c67			; 
1c67			;	ld a,0 
1c67			;	ld (os_view_disable),a 
1c67			; 
1c67			;.bpwait: 
1c67			;	call cin 
1c67			;	cp 0 
1c67			;	jr z, .bpwait 
1c67			;	jr .nokeys 
1c67			; 
1c67			; 
1c67			;.bpen:  db "Break points enabled!",0 
1c67			 
1c67			 
1c67			 
1c67			 
1c67			 
1c67			 
1c67			.nokeys: 
1c67			 
1c67			 
1c67				 
1c67			 
1c67			;jp  testkey 
1c67			 
1c67			;call storage_get_block_0 
1c67			; 
1c67			;ld hl, 0 
1c67			;ld de, store_page 
1c67			;call storage_read_block 
1c67			 
1c67				 
1c67			;ld hl, 10 
1c67			;ld de, store_page 
1c67			;call storage_read_block 
1c67			 
1c67			 
1c67			 
1c67			 
1c67			 
1c67			;stop:	nop 
1c67			;	jp stop 
1c67			 
1c67			 
1c67			 
1c67			main: 
1c67 cd aa 0d			call clear_display 
1c6a cd cd 0d			call update_display 
1c6d			 
1c6d			 
1c6d			 
1c6d			;	call testlcd 
1c6d			 
1c6d			 
1c6d			 
1c6d cd 09 24			call forth_init 
1c70			 
1c70			 
1c70			warmstart: 
1c70 cd df 23			call forth_warmstart 
1c73			 
1c73				; run startup word load 
1c73			        ; TODO prevent this running at warmstart after crash  
1c73			 
1c73				if STARTUP_ENABLE 
1c73			 
1c73					if STARTUP_V1 
1c73			 
1c73						if STORAGE_SE 
1c73							call forth_autoload 
1c73						endif 
1c73						call forth_startup 
1c73					endif 
1c73			 
1c73					if STARTUP_V2 
1c73			 
1c73						if STORAGE_SE 
1c73 cd 35 70						call forth_autoload 
1c76						else 
1c76							call forth_startup 
1c76						endif 
1c76			 
1c76			 
1c76					endif 
1c76			 
1c76				endif 
1c76			 
1c76			warmstart_afterauto: 
1c76			 
1c76				; show free memory after boot 
1c76 11 15 1d			ld de, freeram 
1c79 3e 00			ld a, display_row_1 
1c7b cd bd 0d			call str_at_display 
1c7e			 
1c7e				; get current heap start after loading any uwords 
1c7e			 
1c7e				;ld de, (os_last_new_uword) 
1c7e				;ex de, hl 
1c7e			 
1c7e			; Or use heap_size word???? 
1c7e				;ld hl, heap_end 
1c7e				;ld hl, heap_size 
1c7e				;ld de, topusermem 
1c7e				;ld de, heap_start 
1c7e ed 5b 0a 80			ld de, (free_list )      
1c82 21 d1 f0				ld hl, heap_end 
1c85 ed 52			sbc hl, de 
1c87				;push hl 
1c87				;ld a,h	         	 
1c87				;ld hl, os_word_scratch		; TODO do direct write to frame buffer instead and drop the str_at_display 
1c87				;call hexout 
1c87			   	;pop hl 
1c87			; 
1c87			;	ld a,l 
1c87			;	ld hl, os_word_scratch+2 
1c87			;	call hexout 
1c87			;	ld hl, os_word_scratch+4 
1c87			;	ld a, 0 
1c87			;	ld (hl),a 
1c87 eb				ex de, hl 
1c88 21 fb f3			ld hl, os_word_scratch 
1c8b cd f3 12			call uitoa_16 
1c8e			 
1c8e			 
1c8e 11 fb f3			ld de, os_word_scratch 
1c91 3e 0d			ld a, display_row_1 + 13 
1c93 cd bd 0d			call str_at_display 
1c96 cd cd 0d			call update_display 
1c99			 
1c99			 
1c99				;call demo 
1c99			 
1c99			 
1c99				; init scratch input area for cli commands 
1c99			 
1c99 21 1d f4			ld hl, os_cli_cmd 
1c9c 3e 00			ld a,0 
1c9e 77				ld (hl),a 
1c9f 23				inc hl 
1ca0 77				ld (hl),a 
1ca1			 
1ca1 3e 00			ld a,0 
1ca3 32 1c f5			ld (os_last_cmd),a	; current command in use to enable repeated use with an enter etc 
1ca6			 
1ca6 32 19 f4			ld (os_cur_ptr),a	; ptr to whatever is needed for this command 
1ca9 32 1a f4			ld (os_cur_ptr+1),a	 
1cac			 
1cac 32 fb f3			ld (os_word_scratch),a	; byte or word being used in parsing for this command 
1caf 32 fc f3			ld (os_word_scratch+1),a	 
1cb2				 
1cb2			 
1cb2				;ld a, kLCD_Line2        ; TODO prompt using direct screen line address. Correct this to frame buffer 
1cb2 21 1d f4			ld hl, os_cli_cmd 
1cb5			 
1cb5 3e 00			ld a, 0		 ; init cli input 
1cb7 77				ld (hl), a 
1cb8 3e 28			ld a, display_row_2        ; TODO prompt using direct screen line address. Correct this to frame buffer 
1cba			cli: 
1cba				; show cli prompt 
1cba				;push af 
1cba				;ld a, 0 
1cba				;ld de, prompt 
1cba				;call str_at_display 
1cba			 
1cba				;call update_display 
1cba				;pop af 
1cba				;inc a 
1cba				;ld a, kLCD_Line4+1	 ; TODO using direct screen line writes. Correct this to frame buffer 
1cba			 
1cba			.lastrecall: 
1cba			 
1cba 0e 00			ld c, 0 
1cbc 16 ff			ld d, 255    ; TODO fix input_str to actually take note of max string input length 
1cbe 1e 28			ld e, 40 
1cc0			 
1cc0 21 1d f4			ld hl, os_cli_cmd 
1cc3			 
1cc3				STACKFRAME OFF $fefe $9f9f 
1cc3				if DEBUG_STACK_IMB 
1cc3					if OFF 
1cc3						exx 
1cc3						ld de, $fefe 
1cc3						ld a, d 
1cc3						ld hl, curframe 
1cc3						call hexout 
1cc3						ld a, e 
1cc3						ld hl, curframe+2 
1cc3						call hexout 
1cc3						ld hl, $fefe 
1cc3						push hl 
1cc3						ld hl, $9f9f 
1cc3						push hl 
1cc3						exx 
1cc3					endif 
1cc3				endif 
1cc3			endm 
# End of macro STACKFRAME
1cc3			 
1cc3 cd 0b 10			call input_str 
1cc6			 
1cc6				STACKFRAMECHK OFF $fefe $9f9f 
1cc6				if DEBUG_STACK_IMB 
1cc6					if OFF 
1cc6						exx 
1cc6						ld hl, $9f9f 
1cc6						pop de   ; $9f9f 
1cc6						call cmp16 
1cc6						jr nz, .spnosame 
1cc6						ld hl, $fefe 
1cc6						pop de   ; $fefe 
1cc6						call cmp16 
1cc6						jr z, .spfrsame 
1cc6						.spnosame: call showsperror 
1cc6						.spfrsame: nop 
1cc6						exx 
1cc6					endif 
1cc6				endif 
1cc6			endm 
# End of macro STACKFRAMECHK
1cc6			 
1cc6			 
1cc6				; check to see if last line recall has been requested 
1cc6			 
1cc6			if EDIT_V2 
1cc6 fe 05			cp KEY_UP 
1cc8 20 0f			jr nz, .noexecline 
1cca			 
1cca 11 1d f4			ld de, os_cli_cmd 
1ccd 21 1c f5			ld hl, os_last_cmd 
1cd0 01 ff 00			ld bc, 255 
1cd3 ed b0			ldir 
1cd5 3e 00			ld a, 0 
1cd7 18 e1			jr .lastrecall 
1cd9			endif 
1cd9			 
1cd9			.noexecline: 
1cd9				; no so exec the line		 
1cd9			 
1cd9				; copy input to last command 
1cd9			 
1cd9 21 1d f4			ld hl, os_cli_cmd 
1cdc 11 1c f5			ld de, os_last_cmd 
1cdf 01 ff 00			ld bc, 255 
1ce2 ed b0			ldir 
1ce4			 
1ce4				; wipe current buffer 
1ce4			 
1ce4			;	ld a, 0 
1ce4			;	ld hl, os_cli_cmd 
1ce4			;	ld de, os_cli_cmd+1 
1ce4			;	ld bc, 254 
1ce4			;	ldir 
1ce4				; TODO ldir is not working strcpy may not get all the terms on the input line???? 
1ce4			;	call strcpy 
1ce4			;	ld a, 0 
1ce4			;	ld (hl), a 
1ce4			;	inc hl 
1ce4			;	ld (hl), a 
1ce4			;	inc hl 
1ce4			;	ld (hl), a 
1ce4			 
1ce4				; switch frame buffer to program  
1ce4			 
1ce4 21 45 fc				ld hl, display_fb1 
1ce7 22 01 fb				ld (display_fb_active), hl 
1cea			 
1cea			;	nop 
1cea				STACKFRAME ON $fbfe $8f9f 
1cea				if DEBUG_STACK_IMB 
1cea					if ON 
1cea						exx 
1cea						ld de, $fbfe 
1cea						ld a, d 
1cea						ld hl, curframe 
1cea						call hexout 
1cea						ld a, e 
1cea						ld hl, curframe+2 
1cea						call hexout 
1cea						ld hl, $fbfe 
1cea						push hl 
1cea						ld hl, $8f9f 
1cea						push hl 
1cea						exx 
1cea					endif 
1cea				endif 
1cea			endm 
# End of macro STACKFRAME
1cea				; first time into the parser so pass over the current scratch pad 
1cea 21 1d f4			ld hl,os_cli_cmd 
1ced				; tokenise the entered statement(s) in HL 
1ced cd 83 24			call forthparse 
1cf0			        ; exec forth statements in top of return stack 
1cf0 cd bf 24			call forthexec 
1cf3				;call forthexec_cleanup 
1cf3			;	call parsenext 
1cf3			 
1cf3				STACKFRAMECHK ON $fbfe $8f9f 
1cf3				if DEBUG_STACK_IMB 
1cf3					if ON 
1cf3						exx 
1cf3						ld hl, $8f9f 
1cf3						pop de   ; $8f9f 
1cf3						call cmp16 
1cf3						jr nz, .spnosame 
1cf3						ld hl, $fbfe 
1cf3						pop de   ; $fbfe 
1cf3						call cmp16 
1cf3						jr z, .spfrsame 
1cf3						.spnosame: call showsperror 
1cf3						.spfrsame: nop 
1cf3						exx 
1cf3					endif 
1cf3				endif 
1cf3			endm 
# End of macro STACKFRAMECHK
1cf3				; TODO on return from forth parsing should there be a prompt to return to system? but already in system. 
1cf3			 
1cf3 3e 78			ld a, display_row_4 
1cf5 11 26 1d			ld de, endprog 
1cf8			 
1cf8 cd cd 0d			call update_display		 
1cfb			 
1cfb cd c0 1f			call next_page_prompt 
1cfe			 
1cfe				; switch frame buffer to cli 
1cfe			 
1cfe 21 e6 fc				ld hl, display_fb0 
1d01 22 01 fb				ld (display_fb_active), hl 
1d04			 
1d04			 
1d04 cd aa 0d		        call clear_display 
1d07 cd cd 0d			call update_display		 
1d0a			 
1d0a 21 1d f4			ld hl, os_cli_cmd 
1d0d			 
1d0d 3e 00			ld a, 0		 ; init cli input 
1d0f 77				ld (hl), a 
1d10			 
1d10				; TODO f_cursor_ptr should inc row (scroll if required) and set start of row for next input  
1d10			 
1d10				; now on last line 
1d10			 
1d10				; TODO scroll screen up 
1d10			 
1d10				; TODO instead just clear screen and place at top of screen 
1d10			 
1d10			;	ld a, 0 
1d10			;	ld (f_cursor_ptr),a 
1d10			 
1d10				;call clear_display 
1d10				;call update_display 
1d10			 
1d10				;ld a, kLCD_Line1        ; TODO prompt using direct screen line address. Correct this to frame buffer 
1d10 3e 00			ld a, display_row_1        ; TODO prompt using direct screen line address. Correct this to frame buffer 
1d12 c3 ba 1c			jp cli 
1d15			 
1d15 .. 00		freeram: db "Free bytes: ",0 
1d22 ..			asc: db "1A2F" 
1d26 .. 00		endprog: db "End prog...",0 
1d32			 
1d32			testenter2:   
1d32 21 28 f1			ld hl,scratch+50 
1d35 22 19 f4			ld (os_cur_ptr),hl 
1d38 c3 ba 1c			jp cli 
1d3b			 
1d3b			testenter:  
1d3b			 
1d3b 21 22 1d			ld hl,asc 
1d3e			;	ld a,(hl) 
1d3e			;	call nibble2val 
1d3e cd 3d 12			call get_byte 
1d41			 
1d41			 
1d41			;	ld a,(hl) 
1d41			;	call atohex 
1d41			 
1d41			;	call fourehexhl 
1d41 32 28 f1			ld (scratch+50),a 
1d44			 
1d44			 
1d44			 
1d44 21 24 1d			ld hl,asc+2 
1d47			;	ld a, (hl) 
1d47			;	call nibble2val 
1d47 cd 3d 12			call get_byte 
1d4a			 
1d4a			;	call fourehexhl 
1d4a 32 2a f1			ld (scratch+52),a 
1d4d				 
1d4d 21 28 f1			ld hl,scratch+50 
1d50 22 19 f4			ld (os_cur_ptr),hl 
1d53 c3 ba 1c			jp cli 
1d56			 
1d56			enter:	 
1d56 3a fa f0			ld a,(scratch+4) 
1d59 fe 00			cp 0 
1d5b 28 0c			jr z, .entercont 
1d5d				; no, not a null term line so has an address to work out.... 
1d5d			 
1d5d 21 f8 f0			ld hl,scratch+2 
1d60 cd 9d 12			call get_word_hl 
1d63			 
1d63 22 19 f4			ld (os_cur_ptr),hl	 
1d66 c3 ba 1c			jp cli 
1d69			 
1d69			 
1d69			.entercont:  
1d69			 
1d69 21 f8 f0			ld hl, scratch+2 
1d6c cd 3d 12			call get_byte 
1d6f			 
1d6f 2a 19 f4		   	ld hl,(os_cur_ptr) 
1d72 77					ld (hl),a 
1d73 23					inc hl 
1d74 22 19 f4				ld (os_cur_ptr),hl 
1d77				 
1d77			; get byte  
1d77			 
1d77			 
1d77 c3 ba 1c			jp cli 
1d7a			 
1d7a			 
1d7a			; basic monitor support 
1d7a			 
1d7a			monitor: 
1d7a				;  
1d7a cd aa 0d			call clear_display 
1d7d 3e 00			ld a, 0 
1d7f 11 d3 1d			ld de, .monprompt 
1d82 cd bd 0d			call str_at_display 
1d85 cd cd 0d			call update_display 
1d88			 
1d88				; get a monitor command 
1d88			 
1d88 0e 00			ld c, 0     ; entry at top left 
1d8a 16 64			ld d, 100   ; max buffer size 
1d8c 1e 0f			ld e, 15    ; input scroll area 
1d8e 3e 00			ld a, 0     ; init string 
1d90 21 f4 f2			ld hl, os_input 
1d93 77				ld (hl), a 
1d94 23				inc hl 
1d95 77				ld (hl), a 
1d96 21 f4 f2			ld hl, os_input 
1d99 3e 01			ld a, 1     ; init string 
1d9b cd 0b 10			call input_str 
1d9e			 
1d9e cd aa 0d		        call clear_display 
1da1 cd cd 0d			call update_display		 
1da4			 
1da4 3a f4 f2			ld a, (os_input) 
1da7 cd 3b 13			call toUpper 
1daa fe 48		        cp 'H' 
1dac ca 47 1e		        jp z, .monhelp 
1daf fe 44			cp 'D'		; dump 
1db1 ca 7a 1e			jp z, .mondump	 
1db4 fe 43			cp 'C'		; dump 
1db6 ca 94 1e			jp z, .moncdump	 
1db9 fe 4d			cp 'M'		; dump 
1dbb ca d5 1d			jp z, .moneditstart 
1dbe fe 55			cp 'U'		; dump 
1dc0 ca e1 1d			jp z, .monedit	 
1dc3 fe 47			cp 'G'		; dump 
1dc5 ca 70 1e			jp z, .monjump 
1dc8 fe 42			cp 'B'		; forth breakpoint 
1dca cc 5b 19			call z, break_point_state 
1dcd fe 51			cp 'Q'		; dump 
1dcf c8				ret z	 
1dd0			 
1dd0			 
1dd0				; TODO "S" to access symbol by name and not need the address 
1dd0				; TODO "F" to find a string in memory 
1dd0			 
1dd0 c3 7a 1d			jp monitor 
1dd3			 
1dd3 .. 00		.monprompt: db ">", 0 
1dd5			 
1dd5			.moneditstart: 
1dd5				; get starting address 
1dd5			 
1dd5 21 f6 f2			ld hl,os_input+2 
1dd8 cd 9d 12			call get_word_hl 
1ddb			 
1ddb 22 19 f4			ld (os_cur_ptr),hl	 
1dde			 
1dde c3 7a 1d			jp monitor 
1de1			 
1de1			.monedit: 
1de1				; get byte to load 
1de1			 
1de1 21 f6 f2			ld hl,os_input+2 
1de4 cd 3d 12			call get_byte 
1de7			 
1de7				; get address to update 
1de7 2a 19 f4			ld hl, (os_cur_ptr) 
1dea			 
1dea				; update byte 
1dea			 
1dea 77				ld (hl), a 
1deb			 
1deb				; move to next address and save it 
1deb			 
1deb 23				inc hl 
1dec 22 19 f4			ld (os_cur_ptr),hl	 
1def			 
1def c3 7a 1d			jp monitor 
1df2			 
1df2			 
1df2 .. 00		.monhelptext1: 	db "D-Dump, C-Cont Dump",0 
1e06 .. 00		.monhelptext2:  db "M-Edit Start, U-Update Byte",0 
1e22 .. 00		.monhelptext3:  db "G-Call address, B-Breakpoints",0 
1e40 .. 00		.monhelptext4:  db "Q-Quit",0 
1e47			        
1e47			.monhelp: 
1e47 3e 00			ld a, display_row_1 
1e49 11 f2 1d		        ld de, .monhelptext1 
1e4c			 
1e4c cd bd 0d			call str_at_display 
1e4f 3e 28			ld a, display_row_2 
1e51 11 06 1e		        ld de, .monhelptext2 
1e54					 
1e54 cd bd 0d			call str_at_display 
1e57 3e 50			ld a, display_row_3 
1e59 11 22 1e		        ld de, .monhelptext3 
1e5c					 
1e5c cd bd 0d			call str_at_display 
1e5f 3e 78			ld a, display_row_4 
1e61 11 40 1e		        ld de, .monhelptext4 
1e64 cd bd 0d			call str_at_display 
1e67			 
1e67 cd cd 0d			call update_display		 
1e6a			 
1e6a cd c0 1f			call next_page_prompt 
1e6d c3 7a 1d			jp monitor 
1e70			 
1e70			.monjump:    
1e70 21 f6 f2			ld hl,os_input+2 
1e73 cd 9d 12			call get_word_hl 
1e76			 
1e76 e9				jp (hl) 
1e77 c3 7a 1d			jp monitor 
1e7a			 
1e7a			.mondump:    
1e7a 21 f6 f2			ld hl,os_input+2 
1e7d cd 9d 12			call get_word_hl 
1e80			 
1e80 22 19 f4			ld (os_cur_ptr),hl	 
1e83 cd c8 1e			call dumpcont 
1e86 3e 78			ld a, display_row_4 
1e88 11 26 1d			ld de, endprog 
1e8b			 
1e8b cd cd 0d			call update_display		 
1e8e			 
1e8e cd c0 1f			call next_page_prompt 
1e91 c3 7a 1d			jp monitor 
1e94			.moncdump: 
1e94 cd c8 1e			call dumpcont 
1e97 3e 78			ld a, display_row_4 
1e99 11 26 1d			ld de, endprog 
1e9c			 
1e9c cd cd 0d			call update_display		 
1e9f			 
1e9f cd c0 1f			call next_page_prompt 
1ea2 c3 7a 1d			jp monitor 
1ea5			 
1ea5			 
1ea5			; TODO symbol access  
1ea5			 
1ea5			.symbols:     ;; A list of symbols that can be called up  
1ea5 e6 fc			dw display_fb0 
1ea7 .. 00			db "fb0",0  
1eab af f9		     	dw store_page 
1ead .. 00			db "store_page",0 
1eb8			 
1eb8			 
1eb8			dump:	; see if we are cotinuing on from the last command by not uncluding any address 
1eb8			 
1eb8 3a f7 f0			ld a,(scratch+1) 
1ebb fe 00			cp 0 
1ebd 28 09			jr z, dumpcont 
1ebf			 
1ebf				; no, not a null term line so has an address to work out.... 
1ebf			 
1ebf 21 f8 f0			ld hl,scratch+2 
1ec2 cd 9d 12			call get_word_hl 
1ec5			 
1ec5 22 19 f4			ld (os_cur_ptr),hl	 
1ec8			 
1ec8			 
1ec8			 
1ec8			dumpcont: 
1ec8			 
1ec8				; dump bytes at ptr 
1ec8			 
1ec8			 
1ec8 3e 00			ld a, display_row_1 
1eca 2a 01 fb			ld hl, (display_fb_active) 
1ecd cd de 0f			call addatohl 
1ed0 cd f8 1e			call .dumpbyterow 
1ed3			 
1ed3 3e 28			ld a, display_row_2 
1ed5 2a 01 fb			ld hl, (display_fb_active) 
1ed8 cd de 0f			call addatohl 
1edb cd f8 1e			call .dumpbyterow 
1ede			 
1ede			 
1ede 3e 50			ld a, display_row_3 
1ee0 2a 01 fb			ld hl, (display_fb_active) 
1ee3 cd de 0f			call addatohl 
1ee6 cd f8 1e			call .dumpbyterow 
1ee9			 
1ee9 3e 78			ld a, display_row_4 
1eeb 2a 01 fb			ld hl, (display_fb_active) 
1eee cd de 0f			call addatohl 
1ef1 cd f8 1e			call .dumpbyterow 
1ef4			 
1ef4 cd cd 0d			call update_display 
1ef7			;		jp cli 
1ef7 c9				ret 
1ef8			 
1ef8			.dumpbyterow: 
1ef8			 
1ef8				;push af 
1ef8			 
1ef8 e5				push hl 
1ef9			 
1ef9				; calc where to poke the ascii 
1ef9			if display_cols == 20 
1ef9				ld a, 16 
1ef9			else 
1ef9 3e 1f			ld a, 31 
1efb			endif 
1efb			 
1efb cd de 0f			call addatohl 
1efe 22 fb f3			ld (os_word_scratch),hl  		; save pos for later 
1f01			 
1f01			 
1f01			; display decoding address 
1f01 2a 19 f4		   	ld hl,(os_cur_ptr) 
1f04			 
1f04 7c				ld a,h 
1f05 e1				pop hl 
1f06 e5				push hl 
1f07			;	ld hl, os_word_scratch		; TODO do direct write to frame buffer instead and drop the str_at_display 
1f07 cd e7 11			call hexout 
1f0a 2a 19 f4		   	ld hl,(os_cur_ptr) 
1f0d			 
1f0d 7d				ld a,l 
1f0e e1				pop hl 
1f0f 23				inc hl 
1f10 23				inc hl 
1f11 e5				push hl 
1f12			;	ld hl, os_word_scratch+2 
1f12 cd e7 11			call hexout 
1f15 e1				pop hl 
1f16 23				inc hl 
1f17 23				inc hl 
1f18				;ld hl, os_word_scratch+4 
1f18 3e 3a			ld a, ':' 
1f1a 77				ld (hl),a 
1f1b 23				inc hl 
1f1c				;ld a, 0 
1f1c				;ld (hl),a 
1f1c				;ld de, os_word_scratch 
1f1c				;pop af 
1f1c				;push af 
1f1c			;		ld a, display_row_2 
1f1c			;		call str_at_display 
1f1c			;		call update_display 
1f1c			 
1f1c			 
1f1c			;pop af 
1f1c			;	add 5 
1f1c			 
1f1c			if display_cols == 20 
1f1c				ld b, 4 
1f1c			else 
1f1c 06 08			ld b, 8 
1f1e			endif	 
1f1e			 
1f1e			.dumpbyte: 
1f1e c5				push bc 
1f1f e5				push hl 
1f20			 
1f20			 
1f20 2a 19 f4		   	ld hl,(os_cur_ptr) 
1f23 7e					ld a,(hl) 
1f24			 
1f24					; poke the ascii to display 
1f24 2a fb f3				ld hl,(os_word_scratch) 
1f27 77					ld (hl),a 
1f28 23					inc hl 
1f29 22 fb f3				ld (os_word_scratch),hl 
1f2c			 
1f2c					 
1f2c			 
1f2c			 
1f2c e1					pop hl 
1f2d e5					push hl 
1f2e			 
1f2e cd e7 11				call hexout 
1f31			 
1f31					 
1f31 2a 19 f4		   	ld hl,(os_cur_ptr) 
1f34 23				inc hl 
1f35 22 19 f4		   	ld (os_cur_ptr),hl 
1f38			 
1f38 e1					pop hl 
1f39 23					inc hl 
1f3a 23					inc hl 
1f3b 23					inc hl 
1f3c			 
1f3c			 
1f3c			 
1f3c					;ld a,0 
1f3c					;ld (os_word_scratch+2),a 
1f3c					;pop af 
1f3c					;push af 
1f3c			 
1f3c					;ld de, os_word_scratch 
1f3c					;call str_at_display 
1f3c			;		call update_display 
1f3c			;		pop af 
1f3c c1					pop bc 
1f3d c6 03				add 3 
1f3f 10 dd			djnz .dumpbyte 
1f41			 
1f41				 
1f41			 
1f41 c9				ret 
1f42			 
1f42			jump:	 
1f42			 
1f42 21 f8 f0			ld hl,scratch+2 
1f45 cd 9d 12			call get_word_hl 
1f48				;ld hl,(scratch+2) 
1f48				;call fourehexhl 
1f48			 
1f48 22 19 f4			ld (os_cur_ptr),hl	 
1f4b			 
1f4b e9				jp (hl) 
1f4c			 
1f4c			 
1f4c			 
1f4c			; TODO implement a basic monitor mode to start with 
1f4c			 
1f4c			 
1f4c			 
1f4c			 
1f4c			 
1f4c			 
1f4c			 
1f4c			 
1f4c			 
1f4c			; testing and demo code during development 
1f4c			 
1f4c			 
1f4c .. 00		str1: db "Enter some text...",0 
1f5f .. 00		clear: db "                    ",0 
1f74			 
1f74			demo: 
1f74			 
1f74			 
1f74			 
1f74			;	call update_display 
1f74			 
1f74				; init scratch input area for testing 
1f74 21 f6 f0			ld hl, scratch	 
1f77 3e 00			ld a,0 
1f79 77				ld (hl),a 
1f7a			 
1f7a			 
1f7a 3e 28		            LD   A, display_row_2 
1f7c			;            CALL fLCD_Pos       ;Position cursor to location in A 
1f7c 11 4c 1f		            LD   DE, str1 
1f7f cd bd 0d			call str_at_display 
1f82			 
1f82			;            CALL fLCD_Str       ;Display string pointed to by DE 
1f82			cloop:	 
1f82 3e 50		            LD   A, display_row_3 
1f84			;            CALL fLCD_Pos       ;Position cursor to location in A 
1f84 11 5f 1f		            LD   DE, clear 
1f87			 ;           CALL fLCD_Str       ;Display string pointed to by DE 
1f87 cd bd 0d				call str_at_display 
1f8a 3e 78			ld a, display_row_4 
1f8c 11 bc 1f			ld de, prompt 
1f8f			 
1f8f cd bd 0d				call str_at_display 
1f92 cd cd 0d			call update_display 
1f95			 
1f95 3e 79			ld a, kLCD_Line4+1	 ; TODO using direct screen line writes. Correct this to frame buffer 
1f97 16 0a			ld d, 10 
1f99 21 f6 f0			ld hl, scratch	 
1f9c cd 0b 10			call input_str 
1f9f			 
1f9f			;	call clear_display 
1f9f			;'	call update_display 
1f9f			 
1f9f 3e 00		            LD   A, display_row_1 
1fa1			;            CALL fLCD_Pos       ;Position cursor to location in A 
1fa1 11 5f 1f		            LD   DE, clear 
1fa4 cd bd 0d				call str_at_display 
1fa7			;            CALL fLCD_Str       ;Display string pointed to by DE 
1fa7 3e 00		            LD   A, display_row_1 
1fa9			;            CALL fLCD_Pos       ;Position cursor to location in A 
1fa9 11 f6 f0		            LD   DE, scratch 
1fac			;            CALL fLCD_Str       ;Display string pointed to by DE 
1fac cd bd 0d				call str_at_display 
1faf cd cd 0d			call update_display 
1fb2			 
1fb2 3e 00				ld a,0 
1fb4 21 f6 f0			ld hl, scratch 
1fb7 77				ld (hl),a 
1fb8			 
1fb8 00				nop 
1fb9 c3 82 1f			jp cloop 
1fbc			 
1fbc			 
1fbc			 
1fbc			; OS Prompt 
1fbc			 
1fbc .. 00		prompt: db ">",0 
1fbe .. 00		endprg: db "?",0 
1fc0			 
1fc0			 
1fc0			; handy next page prompt 
1fc0			next_page_prompt: 
1fc0 e5				push hl 
1fc1 d5				push de 
1fc2 f5				push af 
1fc3 c5				push bc 
1fc4			 
1fc4 3e 9f			ld a,display_row_4 + display_cols - 1 
1fc6 11 be 1f		        ld de, endprg 
1fc9 cd bd 0d			call str_at_display 
1fcc cd cd 0d			call update_display 
1fcf cd 80 75			call cin_wait 
1fd2 c1				pop bc 
1fd3 f1				pop af 
1fd4 d1				pop de 
1fd5 e1				pop hl 
1fd6			 
1fd6			 
1fd6 c9				ret 
1fd7			 
1fd7			 
1fd7			; forth parser 
1fd7			 
1fd7			; My forth kernel 
1fd7			include "forth_kernel.asm" 
1fd7			; 
1fd7			; kernel to the forth OS 
1fd7			 
1fd7			DS_TYPE_STR: equ 1     ; string type 
1fd7			DS_TYPE_INUM: equ 2     ; $ 16 bit unsigned int usually a hex address 
1fd7			DS_TYPE_SNUM: equ 3     ; $ 16 bit signed int  
1fd7			;DS_TYPE_FNUM: equ 3      ; 24/32 bit floating point  do string conversion instead of a new type 
1fd7			 
1fd7			FORTH_PARSEV1: equ 0 
1fd7			FORTH_PARSEV2: equ 0 
1fd7			FORTH_PARSEV3: equ 0 
1fd7			FORTH_PARSEV4: equ 0 
1fd7			FORTH_PARSEV5: equ 0 
1fd7			FORTH_PARSEV6: equ 1 
1fd7			 
1fd7			;if FORTH_PARSEV5 
1fd7			;	FORTH_END_BUFFER: equ 0 
1fd7			;else 
1fd7			FORTH_END_BUFFER: equ 127 
1fd7			;endif 
1fd7			 
1fd7			FORTH_TRUE: equ 1 
1fd7			FORTH_FALSE: equ 0 
1fd7			 
1fd7			if FORTH_PARSEV4 
1fd7			include "forth_stackops.asm" 
1fd7			endif 
1fd7			 
1fd7			if FORTH_PARSEV5 
1fd7			include "forth_stackopsv5.asm" 
1fd7			endif 
1fd7			 
1fd7			if FORTH_PARSEV6 
1fd7			include "forth_stackopsv5.asm" 
1fd7			 
1fd7			; Stack operations for v5 parser on wards 
1fd7			; * DATA stack 
1fd7			; * LOOP stack 
1fd7			; * RETURN stack 
1fd7			 
1fd7			 
1fd7			 
1fd7			FORTH_CHK_DSP_UNDER: macro 
1fd7				push hl 
1fd7				push de 
1fd7				ld hl,(cli_data_sp) 
1fd7				ld de, cli_data_stack 
1fd7				call cmp16 
1fd7				jp c, fault_dsp_under 
1fd7				pop de 
1fd7				pop hl 
1fd7				endm 
1fd7			 
1fd7			 
1fd7			FORTH_CHK_RSP_UNDER: macro 
1fd7				push hl 
1fd7				push de 
1fd7				ld hl,(cli_ret_sp) 
1fd7				ld de, cli_ret_stack 
1fd7				call cmp16 
1fd7				jp c, fault_rsp_under 
1fd7				pop de 
1fd7				pop hl 
1fd7				endm 
1fd7			 
1fd7			FORTH_CHK_LOOP_UNDER: macro 
1fd7				push hl 
1fd7				push de 
1fd7				ld hl,(cli_loop_sp) 
1fd7				ld de, cli_loop_stack 
1fd7				call cmp16 
1fd7				jp c, fault_loop_under 
1fd7				pop de 
1fd7				pop hl 
1fd7				endm 
1fd7			 
1fd7			FORTH_ERR_TOS_NOTSTR: macro 
1fd7				; TOSO might need more for checks when used 
1fd7				push af 
1fd7				ld a,(hl) 
1fd7				cp DS_TYPE_STR 
1fd7				jp nz, type_faultn   
1fd7				pop af 
1fd7				endm 
1fd7			 
1fd7			FORTH_ERR_TOS_NOTNUM: macro 
1fd7				push af 
1fd7				ld a,(hl) 
1fd7				cp DS_TYPE_INUM 
1fd7				jp nz, type_faultn   
1fd7				pop af 
1fd7				endm 
1fd7			 
1fd7			 
1fd7			; increase data stack pointer and save hl to it 
1fd7				 
1fd7			FORTH_DSP_NEXT: macro 
1fd7				call macro_forth_dsp_next 
1fd7				endm 
1fd7			 
1fd7			 
1fd7			macro_forth_dsp_next: 
1fd7				if DEBUG_FORTH_STACK_GUARD 
1fd7 cd 24 6e				call check_stacks 
1fda				endif 
1fda e5				push hl 
1fdb d5				push de 
1fdc eb				ex de,hl 
1fdd 2a 23 f9			ld hl,(cli_data_sp) 
1fe0 23				inc hl 
1fe1 23				inc hl 
1fe2			 
1fe2			; PARSEV5 
1fe2 23				inc hl 
1fe3 22 23 f9			ld (cli_data_sp),hl 
1fe6 73				ld (hl), e 
1fe7 23				inc hl 
1fe8 72				ld (hl), d 
1fe9 d1				pop de 
1fea e1				pop hl 
1feb				if DEBUG_FORTH_STACK_GUARD 
1feb cd 24 6e				call check_stacks 
1fee				endif 
1fee c9				ret 
1fef			 
1fef			 
1fef			; increase ret stack pointer and save hl to it 
1fef				 
1fef			FORTH_RSP_NEXT: macro 
1fef				call macro_forth_rsp_next 
1fef				endm 
1fef			 
1fef			macro_forth_rsp_next: 
1fef				if DEBUG_FORTH_STACK_GUARD 
1fef cd 24 6e				call check_stacks 
1ff2				endif 
1ff2 e5				push hl 
1ff3 d5				push de 
1ff4 eb				ex de,hl 
1ff5 2a 27 f9			ld hl,(cli_ret_sp) 
1ff8 23				inc hl 
1ff9 23				inc hl 
1ffa 22 27 f9			ld (cli_ret_sp),hl 
1ffd 73				ld (hl), e 
1ffe 23				inc hl 
1fff 72				ld (hl), d 
2000 d1				pop de 
2001 e1				pop hl 
2002				if DEBUG_FORTH_STACK_GUARD 
2002 cd 24 6e				call check_stacks 
2005				endif 
2005 c9				ret 
2006			 
2006			; get current ret stack pointer and save to hl  
2006				 
2006			FORTH_RSP_TOS: macro 
2006				call macro_forth_rsp_tos 
2006				endm 
2006			 
2006			macro_forth_rsp_tos: 
2006				;push de 
2006 2a 27 f9			ld hl,(cli_ret_sp) 
2009 cd 41 20			call loadhlptrtohl 
200c				;ld e, (hl) 
200c				;inc hl 
200c				;ld d, (hl) 
200c				;ex de, hl 
200c					if DEBUG_FORTH_WORDS 
200c			;			DMARK "RST" 
200c						CALLMONITOR 
200c cd aa fd			call debug_vector  
200f				endm  
# End of macro CALLMONITOR
200f					endif 
200f				;pop de 
200f c9				ret 
2010			 
2010			; pop ret stack pointer 
2010				 
2010			FORTH_RSP_POP: macro 
2010				call macro_forth_rsp_pop 
2010				endm 
2010			 
2010			 
2010			macro_forth_rsp_pop: 
2010				if DEBUG_FORTH_STACK_GUARD 
2010			;		DMARK "RPP" 
2010 cd 24 6e				call check_stacks 
2013					FORTH_CHK_RSP_UNDER 
2013 e5				push hl 
2014 d5				push de 
2015 2a 27 f9			ld hl,(cli_ret_sp) 
2018 11 e1 f8			ld de, cli_ret_stack 
201b cd fc 0f			call cmp16 
201e da 3b 6f			jp c, fault_rsp_under 
2021 d1				pop de 
2022 e1				pop hl 
2023				endm 
# End of macro FORTH_CHK_RSP_UNDER
2023				endif 
2023 e5				push hl 
2024 2a 27 f9			ld hl,(cli_ret_sp) 
2027			 
2027			 
2027				if FORTH_ENABLE_FREE 
2027			 
2027					; get pointer 
2027			 
2027					push de 
2027					push hl 
2027			 
2027					ld e, (hl) 
2027					inc hl 
2027					ld d, (hl) 
2027			 
2027					ex de, hl 
2027					call free 
2027			 
2027					pop hl 
2027					pop de 
2027			 
2027			 
2027				endif 
2027			 
2027			 
2027 2b				dec hl 
2028 2b				dec hl 
2029 22 27 f9			ld (cli_ret_sp), hl 
202c				; do stack underflow checks 
202c e1				pop hl 
202d				if DEBUG_FORTH_STACK_GUARD 
202d cd 24 6e				call check_stacks 
2030					FORTH_CHK_RSP_UNDER 
2030 e5				push hl 
2031 d5				push de 
2032 2a 27 f9			ld hl,(cli_ret_sp) 
2035 11 e1 f8			ld de, cli_ret_stack 
2038 cd fc 0f			call cmp16 
203b da 3b 6f			jp c, fault_rsp_under 
203e d1				pop de 
203f e1				pop hl 
2040				endm 
# End of macro FORTH_CHK_RSP_UNDER
2040				endif 
2040 c9				ret 
2041			 
2041			 
2041			 
2041			; routine to load word pointed to by hl into hl 
2041			 
2041			loadhlptrtohl: 
2041			 
2041 d5				push de 
2042 5e				ld e, (hl) 
2043 23				inc hl 
2044 56				ld d, (hl) 
2045 eb				ex de, hl 
2046 d1				pop de 
2047			 
2047 c9				ret 
2048			 
2048			 
2048			 
2048			 
2048			 
2048			; push a number held in HL onto the data stack 
2048			; entry point for pushing a value when already in hl used in function above 
2048			 
2048			forth_push_numhl: 
2048			 
2048 e5				push hl    ; save value to push 
2049			 
2049			if DEBUG_FORTH_PUSH 
2049				; see if disabled 
2049			 
2049			 
2049 f5				push af 
204a 3a aa fd			ld a,(debug_vector) 
204d fe c9			cp $c9   ; ret 
204f			;	ld a, (os_view_disable) 
204f			;	cp '*' 
204f 28 34			jr z, .pskip2 
2051 e5				push hl 
2052 e5			push hl 
2053 cd aa 0d			call clear_display 
2056 e1			pop hl 
2057 7c				ld a,h 
2058 21 fb f3			ld hl, os_word_scratch 
205b cd e7 11			call hexout 
205e e1				pop hl 
205f 7d				ld a,l 
2060 21 fd f3			ld hl, os_word_scratch+2 
2063 cd e7 11			call hexout 
2066			 
2066 21 ff f3			ld hl, os_word_scratch+4 
2069 3e 00			ld a,0 
206b 77				ld (hl),a 
206c 11 fb f3			ld de,os_word_scratch 
206f 3e 28				ld a, display_row_2 
2071 cd bd 0d				call str_at_display 
2074 11 1d 60			ld de, .push_num 
2077 3e 00			ld a, display_row_1 
2079			 
2079 cd bd 0d				call str_at_display 
207c			 
207c			 
207c cd cd 0d			call update_display 
207f cd ed 0c			call delay1s 
2082 cd ed 0c			call delay1s 
2085			.pskip2:  
2085			 
2085 f1				pop af 
2086			endif	 
2086			 
2086			 
2086				FORTH_DSP_NEXT 
2086 cd d7 1f			call macro_forth_dsp_next 
2089				endm 
# End of macro FORTH_DSP_NEXT
2089			 
2089 2a 23 f9			ld hl, (cli_data_sp) 
208c			 
208c				; save item type 
208c 3e 02			ld a,  DS_TYPE_INUM 
208e 77				ld (hl), a 
208f 23				inc hl 
2090			 
2090				; get word off stack 
2090 d1				pop de 
2091 7b				ld a,e 
2092 77				ld (hl), a 
2093 23				inc hl 
2094 7a				ld a,d 
2095 77				ld (hl), a 
2096			 
2096			if DEBUG_FORTH_PUSH 
2096 2b				dec hl 
2097 2b				dec hl 
2098 2b				dec hl 
2099						DMARK "PH5" 
2099 f5				push af  
209a 3a ae 20			ld a, (.dmark)  
209d 32 a0 fd			ld (debug_mark),a  
20a0 3a af 20			ld a, (.dmark+1)  
20a3 32 a1 fd			ld (debug_mark+1),a  
20a6 3a b0 20			ld a, (.dmark+2)  
20a9 32 a2 fd			ld (debug_mark+2),a  
20ac 18 03			jr .pastdmark  
20ae ..			.dmark: db "PH5"  
20b1 f1			.pastdmark: pop af  
20b2			endm  
# End of macro DMARK
20b2				CALLMONITOR 
20b2 cd aa fd			call debug_vector  
20b5				endm  
# End of macro CALLMONITOR
20b5			endif	 
20b5			 
20b5 c9				ret 
20b6			 
20b6			 
20b6			; Push a string to stack pointed to by hl 
20b6			 
20b6			forth_push_str: 
20b6			 
20b6			if DEBUG_FORTH_PUSH 
20b6						DMARK "PSQ" 
20b6 f5				push af  
20b7 3a cb 20			ld a, (.dmark)  
20ba 32 a0 fd			ld (debug_mark),a  
20bd 3a cc 20			ld a, (.dmark+1)  
20c0 32 a1 fd			ld (debug_mark+1),a  
20c3 3a cd 20			ld a, (.dmark+2)  
20c6 32 a2 fd			ld (debug_mark+2),a  
20c9 18 03			jr .pastdmark  
20cb ..			.dmark: db "PSQ"  
20ce f1			.pastdmark: pop af  
20cf			endm  
# End of macro DMARK
20cf				CALLMONITOR 
20cf cd aa fd			call debug_vector  
20d2				endm  
# End of macro CALLMONITOR
20d2			endif	 
20d2			 
20d2			 
20d2			    
20d2 e5				push hl 
20d3 e5				push hl 
20d4			 
20d4			;	ld a, 0   ; find end of string 
20d4 cd 44 13			call strlenz 
20d7			if DEBUG_FORTH_PUSH 
20d7						DMARK "PQ2" 
20d7 f5				push af  
20d8 3a ec 20			ld a, (.dmark)  
20db 32 a0 fd			ld (debug_mark),a  
20de 3a ed 20			ld a, (.dmark+1)  
20e1 32 a1 fd			ld (debug_mark+1),a  
20e4 3a ee 20			ld a, (.dmark+2)  
20e7 32 a2 fd			ld (debug_mark+2),a  
20ea 18 03			jr .pastdmark  
20ec ..			.dmark: db "PQ2"  
20ef f1			.pastdmark: pop af  
20f0			endm  
# End of macro DMARK
20f0				CALLMONITOR 
20f0 cd aa fd			call debug_vector  
20f3				endm  
# End of macro CALLMONITOR
20f3			endif	 
20f3 eb				ex de, hl 
20f4 e1				pop hl   ; get ptr to start of string 
20f5			if DEBUG_FORTH_PUSH 
20f5						DMARK "PQ3" 
20f5 f5				push af  
20f6 3a 0a 21			ld a, (.dmark)  
20f9 32 a0 fd			ld (debug_mark),a  
20fc 3a 0b 21			ld a, (.dmark+1)  
20ff 32 a1 fd			ld (debug_mark+1),a  
2102 3a 0c 21			ld a, (.dmark+2)  
2105 32 a2 fd			ld (debug_mark+2),a  
2108 18 03			jr .pastdmark  
210a ..			.dmark: db "PQ3"  
210d f1			.pastdmark: pop af  
210e			endm  
# End of macro DMARK
210e				CALLMONITOR 
210e cd aa fd			call debug_vector  
2111				endm  
# End of macro CALLMONITOR
2111			endif	 
2111 19				add hl,de 
2112			if DEBUG_FORTH_PUSH 
2112						DMARK "PQE" 
2112 f5				push af  
2113 3a 27 21			ld a, (.dmark)  
2116 32 a0 fd			ld (debug_mark),a  
2119 3a 28 21			ld a, (.dmark+1)  
211c 32 a1 fd			ld (debug_mark+1),a  
211f 3a 29 21			ld a, (.dmark+2)  
2122 32 a2 fd			ld (debug_mark+2),a  
2125 18 03			jr .pastdmark  
2127 ..			.dmark: db "PQE"  
212a f1			.pastdmark: pop af  
212b			endm  
# End of macro DMARK
212b				CALLMONITOR 
212b cd aa fd			call debug_vector  
212e				endm  
# End of macro CALLMONITOR
212e			endif	 
212e			 
212e 2b				dec hl    ; see if there is an optional trailing double quote 
212f 7e				ld a,(hl) 
2130 fe 22			cp '"' 
2132 20 03			jr nz, .strnoq 
2134 3e 00			ld a, 0      ; get rid of double quote 
2136 77				ld (hl), a 
2137 23			.strnoq: inc hl 
2138			 
2138 3e 00			ld a, 0 
213a 77				ld (hl), a     ; add null term and get rid of trailing double quote 
213b			 
213b 13				inc de ; add one for the type string 
213c 13				inc de ; add one for null term??? 
213d			 
213d				; tos is get string pointer again 
213d				; de contains space to allocate 
213d				 
213d d5				push de 
213e			 
213e eb				ex de, hl 
213f			 
213f				;push af 
213f			 
213f			if DEBUG_FORTH_PUSH 
213f						DMARK "PHm" 
213f f5				push af  
2140 3a 54 21			ld a, (.dmark)  
2143 32 a0 fd			ld (debug_mark),a  
2146 3a 55 21			ld a, (.dmark+1)  
2149 32 a1 fd			ld (debug_mark+1),a  
214c 3a 56 21			ld a, (.dmark+2)  
214f 32 a2 fd			ld (debug_mark+2),a  
2152 18 03			jr .pastdmark  
2154 ..			.dmark: db "PHm"  
2157 f1			.pastdmark: pop af  
2158			endm  
# End of macro DMARK
2158				CALLMONITOR 
2158 cd aa fd			call debug_vector  
215b				endm  
# End of macro CALLMONITOR
215b			endif	 
215b cd b9 13			call malloc	; on ret hl now contains allocated memory 
215e				if DEBUG_FORTH_MALLOC_GUARD 
215e cc 75 60				call z,malloc_error 
2161				endif 
2161			 
2161				 
2161 c1				pop bc    ; get length 
2162 d1				pop de   ;  get string start    
2163			 
2163				; hl has destination from malloc 
2163			 
2163 eb				ex de, hl    ; prep for ldir 
2164			 
2164 d5				push de   ; save malloc area for DSP later 
2165				;push hl   ; save malloc area for DSP later 
2165			 
2165			if DEBUG_FORTH_PUSH 
2165						DMARK "PHc" 
2165 f5				push af  
2166 3a 7a 21			ld a, (.dmark)  
2169 32 a0 fd			ld (debug_mark),a  
216c 3a 7b 21			ld a, (.dmark+1)  
216f 32 a1 fd			ld (debug_mark+1),a  
2172 3a 7c 21			ld a, (.dmark+2)  
2175 32 a2 fd			ld (debug_mark+2),a  
2178 18 03			jr .pastdmark  
217a ..			.dmark: db "PHc"  
217d f1			.pastdmark: pop af  
217e			endm  
# End of macro DMARK
217e				CALLMONITOR 
217e cd aa fd			call debug_vector  
2181				endm  
# End of macro CALLMONITOR
2181			endif	 
2181			 
2181			 
2181 ed b0			ldir 
2183			 
2183			 
2183				; push malloc to data stack     macro?????  
2183			 
2183				FORTH_DSP_NEXT 
2183 cd d7 1f			call macro_forth_dsp_next 
2186				endm 
# End of macro FORTH_DSP_NEXT
2186			 
2186				; save value and type 
2186			 
2186 2a 23 f9			ld hl, (cli_data_sp) 
2189			 
2189				; save item type 
2189 3e 01			ld a,  DS_TYPE_STR 
218b 77				ld (hl), a 
218c 23				inc hl 
218d			 
218d				; get malloc word off stack 
218d d1				pop de 
218e 73				ld (hl), e 
218f 23				inc hl 
2190 72				ld (hl), d 
2191			 
2191			 
2191			 
2191			if DEBUG_FORTH_PUSH 
2191 2a 23 f9			ld hl, (cli_data_sp) 
2194						DMARK "PHS" 
2194 f5				push af  
2195 3a a9 21			ld a, (.dmark)  
2198 32 a0 fd			ld (debug_mark),a  
219b 3a aa 21			ld a, (.dmark+1)  
219e 32 a1 fd			ld (debug_mark+1),a  
21a1 3a ab 21			ld a, (.dmark+2)  
21a4 32 a2 fd			ld (debug_mark+2),a  
21a7 18 03			jr .pastdmark  
21a9 ..			.dmark: db "PHS"  
21ac f1			.pastdmark: pop af  
21ad			endm  
# End of macro DMARK
21ad				CALLMONITOR 
21ad cd aa fd			call debug_vector  
21b0				endm  
# End of macro CALLMONITOR
21b0			;	ex de,hl 
21b0			endif	 
21b0				; in case of spaces, skip the ptr past the copied string 
21b0				;pop af 
21b0				;ld (cli_origptr),hl 
21b0			 
21b0 c9				ret 
21b1			 
21b1			 
21b1			 
21b1			; TODO ascii push input onto stack given hl to start of input 
21b1			 
21b1			; identify type 
21b1			; if starts with a " then a string 
21b1			; otherwise it is a number 
21b1			;  
21b1			; if a string 
21b1			;     scan for ending " to get length of string to malloc for + 1 
21b1			;     malloc 
21b1			;     put pointer to string on stack first byte flags as string 
21b1			; 
21b1			; else a number 
21b1			;    look for number format identifier 
21b1			;    $xx hex 
21b1			;    %xxxxx bin 
21b1			;    xxxxx decimal 
21b1			;    convert number to 16bit word.  
21b1			;    malloc word + 1 with flag to identiy as num 
21b1			;    put pointer to number on stack 
21b1			;   
21b1			;  
21b1			  
21b1			forth_apush: 
21b1				; kernel push 
21b1			 
21b1			if DEBUG_FORTH_PUSH 
21b1						DMARK "PSH" 
21b1 f5				push af  
21b2 3a c6 21			ld a, (.dmark)  
21b5 32 a0 fd			ld (debug_mark),a  
21b8 3a c7 21			ld a, (.dmark+1)  
21bb 32 a1 fd			ld (debug_mark+1),a  
21be 3a c8 21			ld a, (.dmark+2)  
21c1 32 a2 fd			ld (debug_mark+2),a  
21c4 18 03			jr .pastdmark  
21c6 ..			.dmark: db "PSH"  
21c9 f1			.pastdmark: pop af  
21ca			endm  
# End of macro DMARK
21ca				CALLMONITOR 
21ca cd aa fd			call debug_vector  
21cd				endm  
# End of macro CALLMONITOR
21cd			endif	 
21cd				; identify input type 
21cd			 
21cd 7e				ld a,(hl) 
21ce			 
21ce fe 23			cp '#' 
21d0 ca 0a 22			jp z, .fapdec 
21d3			 
21d3			 
21d3 fe 22			cp '"' 
21d5 28 0a			jr z, .fapstr 
21d7 fe 24			cp '$' 
21d9 ca 01 22			jp z, .faphex 
21dc fe 25			cp '%' 
21de ca e9 21			jp z, .fapbin 
21e1			;	cp 'b' 
21e1			;	jp z, .fabin 
21e1				; else decimal 
21e1			 
21e1				; TODO do decimal conversion 
21e1				; decimal is stored as a 16bit word 
21e1			 
21e1				; by default everything is a string if type is not detected 
21e1			.fapstr: ; 
21e1 fe 22			cp '"' 
21e3 20 01			jr nz, .strnoqu 
21e5 23				inc hl 
21e6			.strnoqu: 
21e6 c3 b6 20			jp forth_push_str 
21e9			 
21e9			 
21e9			 
21e9			.fapbin:    ; push a binary string.  
21e9 11 00 00			ld de, 0   ; hold a 16bit value 
21ec			 
21ec 23			.fapbinshift:	inc hl  
21ed 7e				ld a,(hl) 
21ee fe 00			cp 0     ; done scanning  
21f0 28 0b			jr z, .fapbdone  	; got it in HL so push  
21f2			 
21f2				; left shift de 
21f2 eb				ex de, hl	 
21f3 29				add hl, hl 
21f4			 
21f4				; is 1 
21f4 fe 31			cp '1' 
21f6 20 02			jr nz, .binzero 
21f8 cb 4d			bit 1, l 
21fa			.binzero: 
21fa eb				ex de, hl	 ; save current de 
21fb 18 ef			jr .fapbinshift 
21fd			 
21fd			.fapbdone: 
21fd eb				ex de, hl 
21fe c3 48 20			jp forth_push_numhl 
2201			 
2201			 
2201			.faphex:   ; hex is always stored as a 16bit word 
2201				; skip number prefix 
2201 23				inc hl 
2202				; turn ascii into number 
2202 cd 9d 12			call get_word_hl	; ret 16bit word in hl 
2205			 
2205 c3 48 20			jp forth_push_numhl 
2208			 
2208 00				 nop 
2209			 
2209			.fabin:   ; TODO bin conversion 
2209			 
2209			 
2209 c9				ret 
220a			.fapdec:	 
220a				; string to dec conversion 
220a 23				inc hl 
220b eb				ex de, hl 
220c cd db 12			call string_to_uint16 
220f c3 48 20			jp forth_push_numhl 
2212 c9				ret 
2213				 
2213			;atoui_16: 
2213			 
2213			; get either a string ptr or a 16bit word from the data stack 
2213			 
2213			FORTH_DSP: macro 
2213				call macro_forth_dsp 
2213				endm 
2213			 
2213			macro_forth_dsp: 
2213				; data stack pointer points to current word on tos 
2213			 
2213 2a 23 f9			ld hl,(cli_data_sp) 
2216			 
2216				if DEBUG_FORTH_PUSH 
2216						DMARK "DSP" 
2216 f5				push af  
2217 3a 2b 22			ld a, (.dmark)  
221a 32 a0 fd			ld (debug_mark),a  
221d 3a 2c 22			ld a, (.dmark+1)  
2220 32 a1 fd			ld (debug_mark+1),a  
2223 3a 2d 22			ld a, (.dmark+2)  
2226 32 a2 fd			ld (debug_mark+2),a  
2229 18 03			jr .pastdmark  
222b ..			.dmark: db "DSP"  
222e f1			.pastdmark: pop af  
222f			endm  
# End of macro DMARK
222f			 
222f cd a8 60				call display_data_sp 
2232				;call break_point_state 
2232				;rst 030h 
2232				CALLMONITOR 
2232 cd aa fd			call debug_vector  
2235				endm  
# End of macro CALLMONITOR
2235				endif 
2235			 
2235 c9				ret 
2236			 
2236			; return hl to start of value on stack 
2236			 
2236			FORTH_DSP_VALUE: macro 
2236				call macro_forth_dsp_value 
2236				endm 
2236			 
2236			macro_forth_dsp_value: 
2236			 
2236				FORTH_DSP 
2236 cd 13 22			call macro_forth_dsp 
2239				endm 
# End of macro FORTH_DSP
2239			 
2239 d5				push de 
223a			 
223a 23				inc hl ; skip type 
223b			 
223b 5e				ld e, (hl) 
223c 23				inc hl 
223d 56				ld d, (hl) 
223e eb				ex de,hl  
223f			 
223f d1				pop de 
2240			 
2240 c9				ret 
2241			 
2241			; return hl to start of value to second item on stack 
2241			 
2241			FORTH_DSP_VALUEM1: macro 
2241				call macro_forth_dsp_value_m1 
2241				endm 
2241			 
2241			macro_forth_dsp_value_m1: 
2241			 
2241				FORTH_DSP 
2241 cd 13 22			call macro_forth_dsp 
2244				endm 
# End of macro FORTH_DSP
2244			 
2244 2b				dec hl 
2245 2b				dec hl 
2246			;	dec hl 
2246			 
2246 d5				push de 
2247			 
2247 5e				ld e, (hl) 
2248 23				inc hl 
2249 56				ld d, (hl) 
224a eb				ex de,hl  
224b			 
224b d1				pop de 
224c			 
224c c9				ret 
224d			 
224d				 
224d			 
224d			; whatever the current top os stack points to, we are now done with it so return memory to malloc 
224d			 
224d			FORTH_DSP_POP: macro 
224d				call macro_forth_dsp_pop 
224d				endm 
224d			 
224d			 
224d			; get the tos data type 
224d			 
224d			FORTH_DSP_TYPE:   macro 
224d			 
224d				;FORTH_DSP_VALUE 
224d				FORTH_DSP 
224d				 
224d				; hl points to value 
224d				; check type 
224d			 
224d				ld a,(hl) 
224d			 
224d				endm 
224d			 
224d			; load the tos value into hl 
224d			 
224d			 
224d			FORTH_DSP_VALUEHL:  macro 
224d				call macro_dsp_valuehl 
224d				endm 
224d			 
224d			 
224d			 
224d			macro_dsp_valuehl: 
224d				FORTH_DSP_VALUE 
224d cd 36 22			call macro_forth_dsp_value 
2250				endm 
# End of macro FORTH_DSP_VALUE
2250			 
2250				;FORTH_ERR_TOS_NOTNUM 
2250			 
2250				;inc hl   ; skip type id 
2250			 
2250			;	push de 
2250			; 
2250			;	ld e, (hl) 
2250			;	inc hl 
2250			;	ld d, (hl) 
2250			;	ex de,hl  
2250			 
2250			;	pop de 
2250			 
2250				if DEBUG_FORTH_PUSH 
2250						DMARK "DVL" 
2250 f5				push af  
2251 3a 65 22			ld a, (.dmark)  
2254 32 a0 fd			ld (debug_mark),a  
2257 3a 66 22			ld a, (.dmark+1)  
225a 32 a1 fd			ld (debug_mark+1),a  
225d 3a 67 22			ld a, (.dmark+2)  
2260 32 a2 fd			ld (debug_mark+2),a  
2263 18 03			jr .pastdmark  
2265 ..			.dmark: db "DVL"  
2268 f1			.pastdmark: pop af  
2269			endm  
# End of macro DMARK
2269				CALLMONITOR 
2269 cd aa fd			call debug_vector  
226c				endm  
# End of macro CALLMONITOR
226c				endif 
226c c9				ret 
226d			 
226d			forth_apushstrhl:      
226d				; push of string requires use of cli_origptr 
226d				; bodge use 
226d			 
226d				; get current cli_origptr, save, update with temp pointer  
226d ed 5b 73 f9		ld de, (cli_origptr) 
2271 22 73 f9			ld (cli_origptr), hl 
2274 d5				push de 
2275 cd b1 21			call forth_apush 
2278 d1				pop de 
2279 ed 53 73 f9		ld (cli_origptr), de 
227d c9			        ret	 
227e			 
227e			 
227e			; increase loop stack pointer and save hl to it 
227e				 
227e			FORTH_LOOP_NEXT: macro 
227e				call macro_forth_loop_next 
227e				;nop 
227e				endm 
227e			 
227e			macro_forth_loop_next: 
227e				if DEBUG_FORTH_STACK_GUARD 
227e cd 24 6e				call check_stacks 
2281				endif 
2281 e5				push hl 
2282 d5				push de 
2283 eb				ex de,hl 
2284 2a 25 f9			ld hl,(cli_loop_sp) 
2287 23				inc hl 
2288 23				inc hl 
2289					if DEBUG_FORTH_WORDS 
2289						DMARK "LNX" 
2289 f5				push af  
228a 3a 9e 22			ld a, (.dmark)  
228d 32 a0 fd			ld (debug_mark),a  
2290 3a 9f 22			ld a, (.dmark+1)  
2293 32 a1 fd			ld (debug_mark+1),a  
2296 3a a0 22			ld a, (.dmark+2)  
2299 32 a2 fd			ld (debug_mark+2),a  
229c 18 03			jr .pastdmark  
229e ..			.dmark: db "LNX"  
22a1 f1			.pastdmark: pop af  
22a2			endm  
# End of macro DMARK
22a2						CALLMONITOR 
22a2 cd aa fd			call debug_vector  
22a5				endm  
# End of macro CALLMONITOR
22a5					endif 
22a5 22 25 f9			ld (cli_loop_sp),hl 
22a8 73				ld (hl), e 
22a9 23				inc hl 
22aa 72				ld (hl), d 
22ab d1				pop de    ; been reversed so save a swap on restore 
22ac e1				pop hl 
22ad				if DEBUG_FORTH_STACK_GUARD 
22ad cd 24 6e				call check_stacks 
22b0				endif 
22b0 c9				ret 
22b1			 
22b1			; get current ret stack pointer and save to hl  
22b1				 
22b1			FORTH_LOOP_TOS: macro 
22b1				call macro_forth_loop_tos 
22b1				endm 
22b1			 
22b1			macro_forth_loop_tos: 
22b1 d5				push de 
22b2 2a 25 f9			ld hl,(cli_loop_sp) 
22b5 5e				ld e, (hl) 
22b6 23				inc hl 
22b7 56				ld d, (hl) 
22b8 eb				ex de, hl 
22b9 d1				pop de 
22ba c9				ret 
22bb			 
22bb			; pop loop stack pointer 
22bb				 
22bb			FORTH_LOOP_POP: macro 
22bb				call macro_forth_loop_pop 
22bb				endm 
22bb			 
22bb			 
22bb			macro_forth_loop_pop: 
22bb				if DEBUG_FORTH_STACK_GUARD 
22bb					DMARK "LPP" 
22bb f5				push af  
22bc 3a d0 22			ld a, (.dmark)  
22bf 32 a0 fd			ld (debug_mark),a  
22c2 3a d1 22			ld a, (.dmark+1)  
22c5 32 a1 fd			ld (debug_mark+1),a  
22c8 3a d2 22			ld a, (.dmark+2)  
22cb 32 a2 fd			ld (debug_mark+2),a  
22ce 18 03			jr .pastdmark  
22d0 ..			.dmark: db "LPP"  
22d3 f1			.pastdmark: pop af  
22d4			endm  
# End of macro DMARK
22d4 cd 24 6e				call check_stacks 
22d7					FORTH_CHK_LOOP_UNDER 
22d7 e5				push hl 
22d8 d5				push de 
22d9 2a 25 f9			ld hl,(cli_loop_sp) 
22dc 11 5f f8			ld de, cli_loop_stack 
22df cd fc 0f			call cmp16 
22e2 da 41 6f			jp c, fault_loop_under 
22e5 d1				pop de 
22e6 e1				pop hl 
22e7				endm 
# End of macro FORTH_CHK_LOOP_UNDER
22e7				endif 
22e7 e5				push hl 
22e8 2a 25 f9			ld hl,(cli_loop_sp) 
22eb 2b				dec hl 
22ec 2b				dec hl 
22ed 22 25 f9			ld (cli_loop_sp), hl 
22f0				; TODO do stack underflow checks 
22f0 e1				pop hl 
22f1				if DEBUG_FORTH_STACK_GUARD 
22f1 cd 24 6e				call check_stacks 
22f4					FORTH_CHK_LOOP_UNDER 
22f4 e5				push hl 
22f5 d5				push de 
22f6 2a 25 f9			ld hl,(cli_loop_sp) 
22f9 11 5f f8			ld de, cli_loop_stack 
22fc cd fc 0f			call cmp16 
22ff da 41 6f			jp c, fault_loop_under 
2302 d1				pop de 
2303 e1				pop hl 
2304				endm 
# End of macro FORTH_CHK_LOOP_UNDER
2304				endif 
2304 c9				ret 
2305			 
2305			macro_forth_dsp_pop: 
2305			 
2305 e5				push hl 
2306			 
2306				; release malloc data 
2306			 
2306				if DEBUG_FORTH_STACK_GUARD 
2306 cd 24 6e				call check_stacks 
2309					FORTH_CHK_DSP_UNDER 
2309 e5				push hl 
230a d5				push de 
230b 2a 23 f9			ld hl,(cli_data_sp) 
230e 11 5d f6			ld de, cli_data_stack 
2311 cd fc 0f			call cmp16 
2314 da 35 6f			jp c, fault_dsp_under 
2317 d1				pop de 
2318 e1				pop hl 
2319				endm 
# End of macro FORTH_CHK_DSP_UNDER
2319				endif 
2319				;ld hl,(cli_data_sp) 
2319			if DEBUG_FORTH_DOT 
2319				DMARK "DPP" 
2319 f5				push af  
231a 3a 2e 23			ld a, (.dmark)  
231d 32 a0 fd			ld (debug_mark),a  
2320 3a 2f 23			ld a, (.dmark+1)  
2323 32 a1 fd			ld (debug_mark+1),a  
2326 3a 30 23			ld a, (.dmark+2)  
2329 32 a2 fd			ld (debug_mark+2),a  
232c 18 03			jr .pastdmark  
232e ..			.dmark: db "DPP"  
2331 f1			.pastdmark: pop af  
2332			endm  
# End of macro DMARK
2332				CALLMONITOR 
2332 cd aa fd			call debug_vector  
2335				endm  
# End of macro CALLMONITOR
2335			endif	 
2335			 
2335			 
2335			if FORTH_ENABLE_DSPPOPFREE 
2335			 
2335				FORTH_DSP 
2335 cd 13 22			call macro_forth_dsp 
2338				endm 
# End of macro FORTH_DSP
2338			 
2338 7e				ld a, (hl) 
2339 fe 01			cp DS_TYPE_STR 
233b 20 23			jr nz, .skippopfree 
233d			 
233d				FORTH_DSP_VALUEHL 
233d cd 4d 22			call macro_dsp_valuehl 
2340				endm 
# End of macro FORTH_DSP_VALUEHL
2340 00				nop 
2341			if DEBUG_FORTH_DOT 
2341				DMARK "DPf" 
2341 f5				push af  
2342 3a 56 23			ld a, (.dmark)  
2345 32 a0 fd			ld (debug_mark),a  
2348 3a 57 23			ld a, (.dmark+1)  
234b 32 a1 fd			ld (debug_mark+1),a  
234e 3a 58 23			ld a, (.dmark+2)  
2351 32 a2 fd			ld (debug_mark+2),a  
2354 18 03			jr .pastdmark  
2356 ..			.dmark: db "DPf"  
2359 f1			.pastdmark: pop af  
235a			endm  
# End of macro DMARK
235a				CALLMONITOR 
235a cd aa fd			call debug_vector  
235d				endm  
# End of macro CALLMONITOR
235d			endif	 
235d cd 83 14			call free 
2360			.skippopfree: 
2360				 
2360			 
2360			endif 
2360			 
2360			if DEBUG_FORTH_DOT_KEY 
2360				DMARK "DP2" 
2360				CALLMONITOR 
2360			endif	 
2360			 
2360				; move pointer down 
2360			 
2360 2a 23 f9			ld hl,(cli_data_sp) 
2363 2b				dec hl 
2364 2b				dec hl 
2365			; PARSEV5 
2365 2b				dec hl 
2366 22 23 f9			ld (cli_data_sp), hl 
2369			 
2369				if DEBUG_FORTH_STACK_GUARD 
2369 cd 24 6e				call check_stacks 
236c					FORTH_CHK_DSP_UNDER 
236c e5				push hl 
236d d5				push de 
236e 2a 23 f9			ld hl,(cli_data_sp) 
2371 11 5d f6			ld de, cli_data_stack 
2374 cd fc 0f			call cmp16 
2377 da 35 6f			jp c, fault_dsp_under 
237a d1				pop de 
237b e1				pop hl 
237c				endm 
# End of macro FORTH_CHK_DSP_UNDER
237c				endif 
237c			 
237c e1				pop hl 
237d			 
237d c9				ret 
237e			 
237e			getwordathl: 
237e				; hl points to an address 
237e				; load hl with the word at that address 
237e			 
237e d5				push de 
237f			 
237f 5e				ld e, (hl) 
2380 23				inc hl 
2381 56				ld d, (hl) 
2382 eb				ex de, hl 
2383			 
2383 d1				pop de 
2384 c9				ret 
2385			 
2385			 
2385			; functions to manuplite stack pointers 
2385			 
2385			; generate fragment to set hl to be pointer to a stack item 
2385			 
2385			FORTH_DSP_PTR: macro  x 
2385				ld hl,(cli_data_sp) 
2385				ld de, x * 3 
2385				sbc hl, de 
2385				endm 
2385			 
2385			 
2385			 
2385			; copy point in hl to stack tmp storage slots 1-4 
2385			hltostack1: 
2385 11 f3 f0			ld de, os_stack_1  
2388 c3 b3 23			jp hltostackmv 
238b			 
238b			hltostack2:  
238b 11 f0 f0			ld de, os_stack_2 
238e c3 b3 23			jp hltostackmv 
2391			 
2391			hltostack3:  
2391 11 ed f0			ld de, os_stack_3 
2394 c3 b3 23			jp hltostackmv 
2397			 
2397			hltostack4:  
2397 11 ea f0			ld de, os_stack_4  
239a c3 b3 23			jp hltostackmv 
239d			 
239d			; copy to point in hl from stack tmp storage slots 1-4 
239d			hlfromstack1: 
239d 11 f3 f0			ld de, os_stack_1 
23a0 c3 b2 23			jp hlfromsttackmv 
23a3			 
23a3			hlfromstack2:  
23a3 11 f0 f0			ld de, os_stack_2 
23a6 c3 b2 23			jp hlfromsttackmv 
23a9			 
23a9			hlfromstack3:  
23a9 11 ed f0			ld de, os_stack_3 
23ac c3 b2 23			jp hlfromsttackmv 
23af			 
23af			hlfromstack4:  
23af 11 ea f0			ld de, os_stack_4 
23b2			 
23b2			hlfromsttackmv: 
23b2 eb				ex de, hl 
23b3			 
23b3			hltostackmv: 
23b3			 
23b3				; do stack move 
23b3 c5				push bc 
23b4 01 03 00			ld bc, 3 
23b7 ed b0			ldir  
23b9 c1				pop bc	 
23ba c9				ret 
23bb			 
23bb			; eof 
23bb			 
# End of file forth_stackopsv5.asm
23bb			endif 
23bb			loadwordinhl:	 
23bb			 
23bb d5				push de 
23bc			 
23bc 5e				ld e, (hl) 
23bd 23				inc hl 
23be 56				ld d, (hl) 
23bf eb				ex de,hl  
23c0			 
23c0 d1				pop de 
23c1			 
23c1 c9				ret 
23c2			 
23c2			user_word_eol:  
23c2				; hl contains the pointer to where to create a linked list item from the end 
23c2				; of the user dict to continue on at the system word dict 
23c2				 
23c2				; poke the stub of the word list linked list to repoint to rom words 
23c2			 
23c2				; stub format 
23c2				; db   word id 
23c2				; dw    link to next word 
23c2			        ; db char length of token 
23c2				; db string + 0 term 
23c2				; db exec code....  
23c2			 
23c2 3e 00			ld a, WORD_SYS_ROOT     ; root word 
23c4 77				ld (hl), a		; word id 
23c5 23				inc hl 
23c6			 
23c6 11 7d 25			ld de, sysdict 
23c9 73				ld (hl), e		; next word link ie system dict 
23ca 23				inc hl 
23cb 72				ld (hl), d		; next word link ie system dict 
23cc 23				inc hl	 
23cd			 
23cd			;	ld (hl), sysdict		; next word link ie system dict 
23cd			;	inc hl 
23cd			;	inc hl 
23cd			 
23cd			;	inc hl 
23cd			;	inc hl 
23cd			 
23cd 3e 02			ld a, 2			; word length is 0 
23cf 77				ld (hl), a	 
23d0 23				inc hl 
23d1			 
23d1 3e 7e			ld a, '~'			; word length is 0 
23d3 77				ld (hl), a	 
23d4 23				inc hl 
23d5 3e 00			ld a, 0			; save empty word 
23d7 77				ld (hl), a 
23d8			 
23d8 c9				ret 
23d9			 
23d9				 
23d9			 
23d9			forthexec_cleanup: 
23d9				FORTH_RSP_POP 
23d9 cd 10 20			call macro_forth_rsp_pop 
23dc				endm 
# End of macro FORTH_RSP_POP
23dc c9				ret 
23dd			 
23dd			forth_call_hl: 
23dd				; taking hl 
23dd e5				push hl 
23de c9				ret 
23df			 
23df			; this is called to reset Forth system but keep existing uwords etc 
23df			 
23df			forth_warmstart: 
23df				; setup stack over/under flow checks 
23df				if DEBUG_FORTH_STACK_GUARD 
23df cd 0a 6e				call chk_stk_init 
23e2				endif 
23e2			 
23e2				; init stack pointers  - * these stacks go upwards *  
23e2 21 e1 f8			ld hl, cli_ret_stack 
23e5 22 27 f9			ld (cli_ret_sp), hl	 
23e8				; set bottom of stack 
23e8 3e 00			ld a,0 
23ea 77				ld (hl),a 
23eb 23				inc hl 
23ec 77				ld (hl),a 
23ed			 
23ed 21 5d f6			ld hl, cli_data_stack 
23f0 22 23 f9			ld (cli_data_sp), hl	 
23f3				; set bottom of stack 
23f3 3e 00			ld a,0 
23f5 77				ld (hl),a 
23f6 23				inc hl 
23f7 77				ld (hl),a 
23f8			 
23f8 21 5f f8			ld hl, cli_loop_stack 
23fb 22 25 f9			ld (cli_loop_sp), hl	 
23fe				; set bottom of stack 
23fe 3e 00			ld a,0 
2400 77				ld (hl),a 
2401 23				inc hl 
2402 77				ld (hl),a 
2403			 
2403				; init extent of current open file 
2403			 
2403 3e 00			ld a, 0 
2405 32 9f f9			ld (store_openext), a 
2408			 
2408 c9				ret 
2409			 
2409			 
2409			 
2409			; Cold Start - this is called to setup the whole Forth system 
2409			 
2409			forth_init: 
2409			 
2409				; setup stack over/under flow checks 
2409			 
2409			;	if DEBUG_FORTH_STACK_GUARD 
2409			;		call chk_stk_init 
2409			;	endif 
2409			 
2409				; enable auto display updates (slow.....) 
2409			 
2409 3e 01			ld a, 1 
240b 32 71 f9			ld (cli_autodisplay), a 
240e			 
240e				; if storage is in use disable long reads for now 
240e 3e 00			ld a, 0 
2410 32 aa f9			ld (store_longread), a 
2413			 
2413			 
2413				; show start up screen 
2413			 
2413 cd aa 0d			call clear_display 
2416			 
2416 3e 00			ld a,0 
2418 32 93 f9			ld (f_cursor_ptr), a 
241b			 
241b				; set start of word list in start of ram - for use when creating user words 
241b			 
241b 21 00 80			ld hl, baseram 
241e 22 f3 f3			ld (os_last_new_uword), hl 
2421 cd c2 23			call user_word_eol 
2424				 
2424			;		call display_data_sp 
2424			;		call next_page_prompt 
2424			 
2424			 
2424			 
2424			 
2424 c9				ret 
2425			 
2425 .. 00		.bootforth: db " Forth Kernel Init ",0 
2439			 
2439			; TODO push to stack 
2439			 
2439			;  
2439			 
2439			if FORTH_PARSEV2 
2439			 
2439			 
2439				include "forth_parserv2.asm" 
2439			 
2439			endif 
2439			 
2439			 
2439			; parse cli version 1 
2439			 
2439			if FORTH_PARSEV1 
2439			 
2439			 
2439			 
2439			      include "forth_parserv1.asm" 
2439			endif 
2439				 
2439			if FORTH_PARSEV3 
2439			      include "forth_parserv3.asm" 
2439				include "forth_wordsv3.asm" 
2439			endif 
2439			 
2439			if FORTH_PARSEV4 
2439			      include "forth_parserv4.asm" 
2439				include "forth_wordsv4.asm" 
2439			endif 
2439			 
2439			if FORTH_PARSEV5 
2439			      include "forth_parserv5.asm" 
2439				include "forth_wordsv4.asm" 
2439			endif 
2439			 
2439			if FORTH_PARSEV6 
2439			      include "forth_parserv6.asm" 
2439			 
2439			 
2439			; A better parser without using malloc and string copies all over the place.  
2439			; Exec in situ should be faster 
2439			 
2439			;WORD_SYS_LOWPRIM: equ 4    ; Offset for low level prim words opcode 
2439			;WORD_SYS_BRANCH: equ 10    ; Offset for branching and loop words opcode 
2439			WORD_SYS_UWORD: equ 1   ; Opcode for all user words 
2439			WORD_SYS_DELETED: equ 3 ; Op code for a deleted UWORD 
2439			WORD_SYS_ROOT: equ 0   ; Opcode for all user words 
2439			WORD_SYS_END: equ 0   ; Opcode for all user words 
2439			WORD_SYS_CORE: equ 20    ; Offset for dict core words opcode 
2439			WORD_FLAG_CODE: equ 0	   ; opcodeflag to exec pure code for this word 
2439			WORD_FLAG_JP: equ 1	   ; opcodeflag to list zero term jump table words 
2439			 
2439			; Core word preamble macro 
2439			 
2439			CWHEAD:   macro nxtword opcode lit len opflags 
2439				db WORD_SYS_CORE+opcode             
2439				; internal op code number 
2439				dw nxtword            
2439				; link to next dict word block 
2439				db len + 1 
2439				; literal length of dict word inc zero term 
2439				db lit,0              
2439				; literal dict word 
2439			        ; TODO db opflags        
2439				endm 
2439			 
2439			 
2439			NEXTW: macro  
2439				jp macro_next 
2439				endm 
2439			 
2439			macro_next: 
2439			if DEBUG_FORTH_PARSE_EXEC 
2439				DMARK "NXT" 
2439				CALLMONITOR 
2439			endif	 
2439			;	inc hl  ; skip token null term  
2439 ed 4b 75 f9		ld bc,(cli_ptr)   ; move to next token to parse in the input stream 
243d ed 5b 73 f9		ld de,(cli_origptr)   ; move to next token to parse in the input stream 
2441 2a f7 f3			ld hl,(os_tok_ptr)   ; move to next token to parse in the input stream 
2444			if DEBUG_FORTH_PARSE_EXEC 
2444				DMARK "}AA" 
2444				CALLMONITOR 
2444			endif	 
2444 c3 33 25			jp execnext 
2447				;jp exec1 
2447			       
2447			 
2447			 
2447			; Another go at the parser to compile  
2447			 
2447			 
2447			; TODO rework parser to change all of the string words to byte tokens 
2447			; TODO do a search for  
2447			 
2447			; TODO first run normal parser to zero term sections 
2447			; TODO for each word do a token look up to get the op code 
2447			; TODO need some means to flag to the exec that this is a byte code form    
2447			 
2447			 
2447			forthcompile: 
2447			 
2447			; 
2447			; line parse: 
2447			;       parse raw input buffer 
2447			;       tokenise the words 
2447			;       malloc new copy (for looping etc) 
2447			;       copy to malloc + current pc in line to start of string and add line term 
2447			;       save on new rsp 
2447			; 
2447			 
2447			; hl to point to the line to tokenise 
2447			 
2447			;	push hl 
2447 22 f7 f3			ld (os_tok_ptr), hl  ; save ptr to string 
244a			 
244a			;	ld a,0		; string term on input 
244a			;	call strlent 
244a			 
244a			;	ld (os_tok_len), hl	 ; save string length 
244a			 
244a			;if DEBUG_FORTH_TOK 
244a			;	ex de,hl		 
244a			;endif 
244a			 
244a			;	pop hl 		; get back string pointer 
244a			 
244a			if DEBUG_FORTH_TOK 
244a						DMARK "TOc" 
244a				CALLMONITOR 
244a			endif 
244a 7e			.cptoken2:    ld a,(hl) 
244b 23				inc hl 
244c fe 7f			cp FORTH_END_BUFFER 
244e 28 29			jr z, .cptokendone2 
2450 fe 00			cp 0 
2452 28 25			jr z, .cptokendone2 
2454 fe 22			cp '"' 
2456 28 0b			jr z, .cptokenstr2     ; will want to skip until end of string delim 
2458 fe 20			cp ' ' 
245a 20 ee			jr nz,  .cptoken2 
245c			 
245c			; TODO consume comments held between ( and ) 
245c			 
245c				; we have a space so change to zero term for dict match later 
245c 2b				dec hl 
245d 3e 00			ld a,0 
245f 77				ld (hl), a 
2460 23				inc hl 
2461 18 e7			jr .cptoken2 
2463				 
2463			 
2463			.cptokenstr2: 
2463				; skip all white space until either eol (because forgot to term) or end double quote 
2463			        ;   if double quotes spotted ensure to skip any space sep until matched doble quote 
2463				;inc hl ; skip current double quote 
2463 7e				ld a,(hl) 
2464 23				inc hl 
2465 fe 22			cp '"' 
2467 28 e1			jr z, .cptoken2 
2469 fe 7f			cp FORTH_END_BUFFER 
246b 28 0c			jr z, .cptokendone2 
246d fe 00			cp 0 
246f 28 08			jr z, .cptokendone2 
2471 fe 20			cp ' ' 
2473 28 02			jr z, .cptmp2 
2475 18 ec			jr .cptokenstr2 
2477			 
2477			.cptmp2:	; we have a space so change to zero term for dict match later 
2477				;dec hl 
2477				;ld a,"-"	; TODO remove this when working 
2477				;ld (hl), a 
2477				;inc hl 
2477 18 ea			jr .cptokenstr2 
2479			 
2479			.cptokendone2: 
2479				;inc hl 
2479 3e 7f			ld a, FORTH_END_BUFFER 
247b 77				ld (hl),a 
247c			;	inc hl 
247c			;	ld a, '!' 
247c			;	ld (hl),a 
247c			 
247c 2a f7 f3			ld hl,(os_tok_ptr) 
247f			         
247f			if DEBUG_FORTH_TOK 
247f						DMARK "Tc1" 
247f				CALLMONITOR 
247f			endif 
247f			 
247f				; push exec string to top of return stack 
247f				FORTH_RSP_NEXT 
247f cd ef 1f			call macro_forth_rsp_next 
2482				endm 
# End of macro FORTH_RSP_NEXT
2482 c9				ret 
2483			 
2483			; Another go at the parser need to simplify the process 
2483			 
2483			forthparse: 
2483			 
2483			; 
2483			; line parse: 
2483			;       parse raw input buffer 
2483			;       tokenise the words 
2483			;       malloc new copy (for looping etc) 
2483			;       copy to malloc + current pc in line to start of string and add line term 
2483			;       save on new rsp 
2483			; 
2483			 
2483			; hl to point to the line to tokenise 
2483			 
2483			;	push hl 
2483 22 f7 f3			ld (os_tok_ptr), hl  ; save ptr to string 
2486			 
2486			;	ld a,0		; string term on input 
2486			;	call strlent 
2486			 
2486			;	ld (os_tok_len), hl	 ; save string length 
2486			 
2486			;if DEBUG_FORTH_TOK 
2486			;	ex de,hl		 
2486			;endif 
2486			 
2486			;	pop hl 		; get back string pointer 
2486			 
2486			if DEBUG_FORTH_TOK 
2486						DMARK "TOK" 
2486				CALLMONITOR 
2486			endif 
2486 7e			.ptoken2:    ld a,(hl) 
2487 23				inc hl 
2488 fe 7f			cp FORTH_END_BUFFER 
248a 28 29			jr z, .ptokendone2 
248c fe 00			cp 0 
248e 28 25			jr z, .ptokendone2 
2490 fe 22			cp '"' 
2492 28 0b			jr z, .ptokenstr2     ; will want to skip until end of string delim 
2494 fe 20			cp ' ' 
2496 20 ee			jr nz,  .ptoken2 
2498			 
2498			; TODO consume comments held between ( and ) 
2498			 
2498				; we have a space so change to zero term for dict match later 
2498 2b				dec hl 
2499 3e 00			ld a,0 
249b 77				ld (hl), a 
249c 23				inc hl 
249d 18 e7			jr .ptoken2 
249f				 
249f			 
249f			.ptokenstr2: 
249f				; skip all white space until either eol (because forgot to term) or end double quote 
249f			        ;   if double quotes spotted ensure to skip any space sep until matched doble quote 
249f				;inc hl ; skip current double quote 
249f 7e				ld a,(hl) 
24a0 23				inc hl 
24a1 fe 22			cp '"' 
24a3 28 e1			jr z, .ptoken2 
24a5 fe 7f			cp FORTH_END_BUFFER 
24a7 28 0c			jr z, .ptokendone2 
24a9 fe 00			cp 0 
24ab 28 08			jr z, .ptokendone2 
24ad fe 20			cp ' ' 
24af 28 02			jr z, .ptmp2 
24b1 18 ec			jr .ptokenstr2 
24b3			 
24b3			.ptmp2:	; we have a space so change to zero term for dict match later 
24b3				;dec hl 
24b3				;ld a,"-"	; TODO remove this when working 
24b3				;ld (hl), a 
24b3				;inc hl 
24b3 18 ea			jr .ptokenstr2 
24b5			 
24b5			.ptokendone2: 
24b5				;inc hl 
24b5 3e 7f			ld a, FORTH_END_BUFFER 
24b7 77				ld (hl),a 
24b8			;	inc hl 
24b8			;	ld a, '!' 
24b8			;	ld (hl),a 
24b8			 
24b8 2a f7 f3			ld hl,(os_tok_ptr) 
24bb			         
24bb			if DEBUG_FORTH_TOK 
24bb						DMARK "TK1" 
24bb				CALLMONITOR 
24bb			endif 
24bb			 
24bb				; push exec string to top of return stack 
24bb				FORTH_RSP_NEXT 
24bb cd ef 1f			call macro_forth_rsp_next 
24be				endm 
# End of macro FORTH_RSP_NEXT
24be c9				ret 
24bf			 
24bf			; 
24bf			;	; malloc size + buffer pointer + if is loop flag 
24bf			;	ld hl,(os_tok_len) 		 ; get string length 
24bf			; 
24bf			;	ld a,l 
24bf			; 
24bf			;	cp 0			; we dont want to use a null string 
24bf			;	ret z 
24bf			; 
24bf			;;	add 3    ; prefix malloc with buffer for current word ptr 
24bf			; 
24bf			;	add 5     ; TODO when certain not over writing memory remove 
24bf			; 
24bf			;		 
24bf			; 
24bf			;if DEBUG_FORTH_TOK 
24bf			;			DMARK "TKE" 
24bf			;	CALLMONITOR 
24bf			;endif 
24bf			; 
24bf			;	ld l,a 
24bf			;	ld h,0 
24bf			;;	push hl   ; save required space for the copy later 
24bf			;	call malloc 
24bf			;if DEBUG_FORTH_TOK 
24bf			;			DMARK "TKM" 
24bf			;	CALLMONITOR 
24bf			;endif 
24bf			;	if DEBUG_FORTH_MALLOC_GUARD 
24bf			;		push af 
24bf			;		call ishlzero 
24bf			;;		ld a, l 
24bf			;;		add h 
24bf			;;		cp 0 
24bf			;		pop af 
24bf			;		 
24bf			;		call z,malloc_error 
24bf			;	endif 
24bf			;	ld (os_tok_malloc), hl	 ; save malloc ptr 
24bf			; 
24bf			; 
24bf			;if DEBUG_FORTH_TOK 
24bf			;			DMARK "TKR" 
24bf			;	CALLMONITOR 
24bf			;endif 
24bf			; 
24bf			;	FORTH_RSP_NEXT 
24bf			; 
24bf			;	;inc hl	 ; go past current buffer pointer 
24bf			;	;inc hl 
24bf			;	;inc hl   ; and past if loop flag 
24bf			;		; TODO Need to set flag  
24bf			; 
24bf			;	 
24bf			;	 
24bf			;	ex de,hl	; malloc is dest 
24bf			;	ld hl, (os_tok_len) 
24bf			;;	pop bc 
24bf			;	ld c, l                
24bf			;	ld b,0 
24bf			;	ld hl, (os_tok_ptr) 
24bf			; 
24bf			;if DEBUG_FORTH_TOK 
24bf			;			DMARK "TKT" 
24bf			;	CALLMONITOR 
24bf			;endif 
24bf			; 
24bf			;	; do str cpy 
24bf			; 
24bf			;	ldir      ; copy byte in hl to de 
24bf			; 
24bf			;	; set end of buffer to high bit on zero term and use that for end of buffer scan 
24bf			; 
24bf			;if DEBUG_FORTH_TOK 
24bf			; 
24bf			;			DMARK "TKY" 
24bf			;	CALLMONITOR 
24bf			;endif 
24bf			;	;ld a,0 
24bf			;	;ld a,FORTH_END_BUFFER 
24bf			;	ex de, hl 
24bf			;	;dec hl			 ; go back over the space delim at the end of word 
24bf			;	;ld (hl),a 
24bf			;	;inc hl                    ;  TODO double check this. Going past the end of string to make sure end of processing buffer is marked 
24bf			;	ld a,FORTH_END_BUFFER 
24bf			;	ld (hl),a 
24bf			;	inc hl 
24bf			;	ld a,FORTH_END_BUFFER 
24bf			;	ld (hl),a 
24bf			; 
24bf			;	; init the malloc area data 
24bf			;	; set pc for in current area 
24bf			;	;ld hl, (os_tok_malloc) 
24bf			;	;inc hl 
24bf			;	;inc hl 
24bf			;	;inc hl 
24bf			;	;ex de,hl 
24bf			;	;ld hl, (os_tok_malloc) 
24bf			;	;ld (hl),e 
24bf			;	;inc hl 
24bf			;	;ld (hl),d 
24bf			; 
24bf			; 
24bf			;	ld hl,(os_tok_malloc) 
24bf			;if DEBUG_FORTH_PARSE_KEY 
24bf			;			DMARK "TKU" 
24bf			;	CALLMONITOR 
24bf			;endif 
24bf			; 
24bf			;	ret 
24bf			 
24bf			forthexec: 
24bf			 
24bf			; line exec: 
24bf			; forth parser 
24bf			 
24bf			; 
24bf			;       get current exec line on rsp 
24bf			 
24bf				FORTH_RSP_TOS 
24bf cd 06 20			call macro_forth_rsp_tos 
24c2				endm 
# End of macro FORTH_RSP_TOS
24c2			 
24c2			;       restore current pc - hl points to malloc of data 
24c2			 
24c2				;ld e, (hl) 
24c2				;inc hl 
24c2				;ld d, (hl) 
24c2				;ex de,hl 
24c2			 
24c2			 
24c2			exec1: 
24c2 22 f7 f3			ld (os_tok_ptr), hl                 ; here move out of repeated saving in this tight loop 
24c5			 
24c5				; copy our PC to working vars  
24c5 22 75 f9			ld (cli_ptr), hl                    ; here 
24c8 22 73 f9			ld (cli_origptr), hl                ; here 
24cb			 
24cb 7e				ld a,(hl)                           ; here make hl be the ram ptr 
24cc fe 7f			cp FORTH_END_BUFFER 
24ce c8				ret z 
24cf			 
24cf				; skip any nulls 
24cf			 
24cf fe 00			cp 0 
24d1 20 03			jr nz, .execword 
24d3 23				inc hl 
24d4 18 ec			jr exec1 
24d6			 
24d6			 
24d6			.execword: 
24d6			 
24d6			 
24d6			 
24d6			if DEBUG_FORTH_PARSE_EXEC 
24d6						DMARK "KYQ" 
24d6				CALLMONITOR 
24d6			endif 
24d6			;       while at start of word: 
24d6			; get start of dict (in user area first) 
24d6			 
24d6 21 00 80		ld hl, baseram 
24d9			;ld hl, sysdict 
24d9 22 77 f9		ld (cli_nextword),hl                            ; here do we need to do this? 
24dc			;           match word at pc 
24dc			;           exec word 
24dc			;           or push to dsp 
24dc			;           forward to next token 
24dc			;           if line term pop rsp and exit 
24dc			;        
24dc			 
24dc			if DEBUG_FORTH_PARSE_EXEC 
24dc						DMARK "KYq" 
24dc				CALLMONITOR 
24dc			endif 
24dc			 
24dc			; 
24dc			; word comp 
24dc			;    get compiled byte and save it (need to decide if code is compiled or not for comparison) 
24dc			;    if byte is 0 then end parsing and report failed lookup (or could be something to add to stack etc) 
24dc			;    move to start of word  
24dc			;    compare word to cli_token 
24dc			 
24dc			.execpnword:	; HL at start of a word in the dictionary to check 
24dc			 
24dc 2a 77 f9			ld hl,(cli_nextword)                  ; here remove the need to store???? 
24df			 
24df cd 76 25			call forth_tok_next 
24e2			; tok next end here 
24e2 22 77 f9			ld (cli_nextword), hl     ; save for next check if no match on this word 
24e5 eb				ex de, hl 
24e6			 
24e6			 
24e6				; save the pointer of the current token - 1 to check against 
24e6				 
24e6 22 7b f9			ld (cli_token), hl   
24e9				; TODO maybe remove below save if no debug 
24e9				; save token string ptr for any debug later 
24e9 23				inc hl  
24ea 22 7d f9			ld (cli_origtoken), hl 
24ed 2b				dec hl 
24ee				; save pointer to the start of the next dictionay word 
24ee 7e				ld a,(hl)   ; get string length 
24ef 47				ld b,a 
24f0			.execpnwordinc:  
24f0 23				inc hl 
24f1 10 fd			djnz .execpnwordinc 
24f3 22 79 f9			ld (cli_execword), hl      ; save start of this words code 
24f6			 
24f6				; now check the word token against the string being parsed 
24f6			 
24f6 2a 7b f9			ld hl,(cli_token) 
24f9 23				inc hl     ; skip string length (use zero term instead to end) 
24fa				;ld (cli_token), hl 
24fa			 
24fa			.execpnchar:    ; compare char between token and string to parse 
24fa			 
24fa			 
24fa				;ld hl, (cli_token)     ; the dict word  
24fa ed 5b 75 f9		ld de, (cli_ptr)     ; cli to parse 
24fe			 
24fe			 
24fe			.execpncharl:    ; compare char between token and string to parse (loop) 
24fe			 
24fe 1a				ld a,(de) 
24ff cd 3b 13			call toUpper 		; make sure the input string matches case 
2502 be				cp (hl) 
2503			 
2503 c2 1c 25			jp nz, .execpnskipword	 ; no match so move to next word 
2506				 
2506			;    if same 
2506			;       scan for string terms 0 for token and 32 for input 
2506 46				ld b,(hl) 
2507 80				add b			 
2508 23				inc hl 
2509 13				inc de 
250a fe 00			cp 0			 ; add both chars together, if 32 then other must be 0 so at end of string we are parsing? 
250c							; TODO need to make sure last word in zero term string is accounted for 
250c 20 f0			jr nz, .execpncharl 		 ; not at end of strings yet 
250e			 
250e			 
250e				; at end of both strings so both are exact match 
250e			 
250e			;       skip ptr for next word 
250e			 
250e 2a 75 f9			ld hl,(cli_ptr) 	; at input string term 
2511 23				inc hl			 ; at next char 
2512 22 75 f9			ld (cli_ptr), hl     ; save for next round of the parser 
2515 22 73 f9			ld (cli_origptr), hl     ; save for any restart of current string ie a number or string to push to data stack 
2518				 
2518				 
2518			 
2518			 
2518			 
2518			;       exec code block 
2518			if DEBUG_FORTH_JP 
2518				call clear_display 
2518				call update_display 
2518				call delay1s 
2518				ld hl, (cli_execword)     ; save for next check if no match on this word 
2518				ld a,h 
2518				ld hl, os_word_scratch 
2518				call hexout 
2518				ld hl, (cli_execword)     ; save for next check if no match on this word 
2518				ld a,l 
2518				ld hl, os_word_scratch+2 
2518				call hexout 
2518				ld hl, os_word_scratch+4 
2518				ld a,0 
2518				ld (hl),a 
2518				ld de,os_word_scratch 
2518				call str_at_display 
2518					ld a, display_row_2 
2518					call str_at_display 
2518				ld de, (cli_origtoken) 
2518				ld a, display_row_1+10 
2518					call str_at_display 
2518			 
2518				ld a,display_row_1 
2518				ld de, .foundword 
2518				ld a, display_row_3 
2518				call str_at_display 
2518				call update_display 
2518				call delay1s 
2518				call delay1s 
2518				call delay1s 
2518			endif 
2518			 
2518			if DEBUG_FORTH_PARSE_EXEC 
2518						DMARK "KYj" 
2518			endif 
2518				; TODO save the word pointer in this exec 
2518			 
2518 2a 79 f9			ld hl,(cli_execword) 
251b e9				jp (hl) 
251c			 
251c			 
251c			;    if not same 
251c			;	scan for zero term 
251c			;	get ptr for next word 
251c			;	goto word comp 
251c			 
251c			.execpnskipword:	; get pointer to next word 
251c 2a 77 f9			ld hl,(cli_nextword) 
251f			 
251f 7e				ld a,(hl) 
2520 fe 00			cp WORD_SYS_END 
2522			;	cp 0 
2522 28 09			jr z, .execendofdict			 ; at end of words 
2524			 
2524			if DEBUG_FORTH_PARSE_EXEC 
2524						DMARK "KY4" 
2524			endif 
2524			if DEBUG_FORTH_PARSE_EXEC 
2524			 
2524				; see if disabled 
2524			 
2524			;	ld a, (os_view_disable) 
2524			;	cp '*' 
2524				ld a,(debug_vector) 
2524				cp $c9   ; RET 
2524				jr z, .noskip 
2524			 
2524			 
2524				ld de, .nowordfound 
2524				ld a, display_row_3 
2524				call str_at_display 
2524				call update_display 
2524				ld a, 100 
2524				call aDelayInMS 
2524				 
2524				if DEBUG_FORTH_PARSE_EXEC_SLOW 
2524					call delay250ms 
2524				endif 
2524			.noskip:  
2524			 
2524			endif	 
2524			 
2524 2a 73 f9			ld hl,(cli_origptr) 
2527 22 75 f9			ld (cli_ptr),hl 
252a			 
252a			if DEBUG_FORTH_PARSE_EXEC 
252a						DMARK "KY5" 
252a			endif 
252a c3 dc 24			jp .execpnword			; else go to next word 
252d			 
252d			.execendofdict:  
252d			 
252d			if DEBUG_FORTH_PARSE_EXEC 
252d						DMARK "KYe" 
252d			endif 
252d			if DEBUG_FORTH_PARSE_EXEC 
252d				; see if disabled 
252d			 
252d			;	ld a, (os_view_disable) 
252d			;	cp '*' 
252d				ld a,(debug_vector) 
252d				cp $c9   ; ret 
252d				jr z, .ispskip 
252d			 
252d				call clear_display 
252d				call update_display 
252d				call delay1s 
252d				ld de, (cli_origptr) 
252d				ld a, display_row_1 
252d				call str_at_display 
252d				 
252d				ld de, .enddict 
252d				ld a, display_row_3 
252d				call str_at_display 
252d				call update_display 
252d				ld a, 100 
252d				call aDelayInMS 
252d				if DEBUG_FORTH_PARSE_EXEC_SLOW 
252d				call delay1s 
252d				call delay1s 
252d				call delay1s 
252d				endif 
252d			.ispskip:  
252d				 
252d			endif	 
252d			 
252d			 
252d			 
252d				; if the word is not a keyword then must be a literal so push it to stack 
252d			 
252d			; push token to stack to end of word 
252d			 
252d				STACKFRAME ON $1efe $2f9f 
252d				if DEBUG_STACK_IMB 
252d					if ON 
252d						exx 
252d						ld de, $1efe 
252d						ld a, d 
252d						ld hl, curframe 
252d						call hexout 
252d						ld a, e 
252d						ld hl, curframe+2 
252d						call hexout 
252d						ld hl, $1efe 
252d						push hl 
252d						ld hl, $2f9f 
252d						push hl 
252d						exx 
252d					endif 
252d				endif 
252d			endm 
# End of macro STACKFRAME
252d			 
252d 2a f7 f3		ld hl,(os_tok_ptr) 
2530 cd b1 21		call forth_apush 
2533			 
2533				STACKFRAMECHK ON $1efe $2f9f 
2533				if DEBUG_STACK_IMB 
2533					if ON 
2533						exx 
2533						ld hl, $2f9f 
2533						pop de   ; $2f9f 
2533						call cmp16 
2533						jr nz, .spnosame 
2533						ld hl, $1efe 
2533						pop de   ; $1efe 
2533						call cmp16 
2533						jr z, .spfrsame 
2533						.spnosame: call showsperror 
2533						.spfrsame: nop 
2533						exx 
2533					endif 
2533				endif 
2533			endm 
# End of macro STACKFRAMECHK
2533			 
2533			execnext: 
2533			 
2533			if DEBUG_FORTH_PARSE_EXEC 
2533						DMARK "KY>" 
2533			endif 
2533			; move past token to next word 
2533			 
2533 2a f7 f3		ld hl, (os_tok_ptr) 
2536 3e 00		ld a, 0 
2538 01 ff 00		ld bc, 255     ; input buffer size 
253b ed b1		cpir 
253d			 
253d			if DEBUG_FORTH_PARSE_EXEC 
253d						DMARK "KY!" 
253d				CALLMONITOR 
253d			endif	 
253d			; TODO this might place hl on the null, so will need to forward on??? 
253d			;inc hl   ; see if this gets onto the next item 
253d			 
253d			 
253d			; TODO pass a pointer to the buffer to push 
253d			; TODO call function to push 
253d			 
253d			; look for end of input 
253d			 
253d			;inc hl 
253d			;ld a,(hl) 
253d			;cp FORTH_END_BUFFER 
253d			;ret z 
253d			 
253d			 
253d c3 c2 24		jp exec1 
2540			 
2540			 
2540			 
2540			 
2540			 
2540			 
2540			 
2540			 
2540			 
2540			findnexttok: 
2540			 
2540				; hl is pointer to move 
2540				; de is the token to locate 
2540			 
2540					if DEBUG_FORTH 
2540						DMARK "NTK" 
2540						CALLMONITOR 
2540					endif 
2540 d5				push de 
2541			 
2541			.fnt1:	 
2541				; find first char of token to locate 
2541			 
2541 1a				ld a, (de) 
2542 4f				ld c,a 
2543 7e				ld a,(hl) 
2544 cd 3b 13			call toUpper 
2547					if DEBUG_FORTH 
2547						DMARK "NT1" 
2547						CALLMONITOR 
2547					endif 
2547 b9				cp c 
2548			 
2548 28 03			jr z, .fnt2cmpmorefirst	 
254a			 
254a				; first char not found move to next char 
254a			 
254a 23				inc hl 
254b 18 f4			jr .fnt1 
254d			 
254d			.fnt2cmpmorefirst:	 
254d				; first char of token found.  
254d			 
254d e5				push hl     ; save start of token just in case it is the right one 
254e d9				exx 
254f e1				pop hl        ; save it to hl' 
2550 d9				exx 
2551			 
2551			 
2551			.fnt2cmpmore:	 
2551				; compare the rest 
2551				 
2551 23				inc hl 
2552 13				inc de 
2553				 
2553 1a				ld a, (de) 
2554 4f				ld c,a 
2555 7e				ld a,(hl) 
2556 cd 3b 13			call toUpper 
2559			 
2559					if DEBUG_FORTH 
2559						DMARK "NT2" 
2559						CALLMONITOR 
2559					endif 
2559				; c has the token to find char 
2559				; a has the mem to scan char 
2559			 
2559 b9				cp c 
255a 28 04			jr z,.fntmatch1 
255c			 
255c				; they are not the same 
255c			 
255c					if DEBUG_FORTH 
255c						DMARK "NT3" 
255c						CALLMONITOR 
255c					endif 
255c d1				pop de	; reset de token to look for 
255d d5				push de 
255e 18 e1			jr .fnt1 
2560				 
2560			.fntmatch1: 
2560			 
2560				; is the same char a null which means we might have a full hit? 
2560					if DEBUG_FORTH 
2560						DMARK "NT4" 
2560						CALLMONITOR 
2560					endif 
2560			 
2560 fe 00			cp 0 
2562 28 0b			jr z, .fntmatchyes 
2564			 
2564				; are we at the end of the token to find? 
2564			 
2564					if DEBUG_FORTH 
2564						DMARK "NT5" 
2564						CALLMONITOR 
2564					endif 
2564 3e 00			ld a, 0 
2566 b9				cp c 
2567			 
2567 c2 51 25			jp nz, .fnt2cmpmore    ; no, so keep going to a direct hit 
256a			 
256a					if DEBUG_FORTH 
256a						DMARK "NT6" 
256a						CALLMONITOR 
256a					endif 
256a				; token to find is exhusted but no match to stream 
256a			 
256a				; restore tok pointer and continue on 
256a d1				pop de 
256b d5				push de 
256c c3 41 25			jp .fnt1 
256f			 
256f			 
256f			.fntmatchyes: 
256f			 
256f				; hl now contains the end of the found token 
256f			 
256f				; get rid of saved token pointer to find 
256f			 
256f d1				pop de 
2570			 
2570					if DEBUG_FORTH 
2570						DMARK "NT9" 
2570						CALLMONITOR 
2570					endif 
2570			 
2570				; hl will be on the null term so forward on 
2570			 
2570				; get back the saved start of the token 
2570			 
2570 d9				exx 
2571 e5				push hl     ; save start of token just in case it is the right one 
2572 d9				exx 
2573 e1				pop hl        ; save it to hl 
2574			 
2574 c9				ret 
2575			 
2575			 
2575			; LIST needs to find a specific token   
2575			; FORGET needs to find a spefici token 
2575			 
2575			; SAVE needs to find all tokens by flag 
2575			; WORDS just needs to scan through all  by flag 
2575			; UWORDS needs to scan through all by flag 
2575			 
2575			 
2575			; given hl as pointer to start of dict look up string 
2575			; return hl as pointer to start of word block 
2575			; or 0 if not found 
2575			 
2575			forth_find_tok: 
2575 c9				ret 
2576			 
2576			; given hl as pointer to dict structure 
2576			; move to the next dict block structure 
2576			 
2576			forth_tok_next: 
2576				; hl now points to the address of the next word pointer  
2576				; TODO skip compiled symbol for now 
2576			;	push de 
2576 23				inc hl 
2577 5e				ld e, (hl) 
2578 23				inc hl 
2579 56				ld d, (hl) 
257a 23				inc hl 
257b			 
257b eb				ex de,hl 
257c			if DEBUG_FORTH_PARSE_NEXTWORD 
257c				push bc 
257c				ld bc, (cli_nextword) 
257c						DMARK "NXW" 
257c				CALLMONITOR 
257c				pop bc 
257c			endif 
257c			;	pop de	 
257c c9				ret 
257d			 
257d			 
257d			 
257d			; eof 
# End of file forth_parserv6.asm
257d				include "forth_wordsv4.asm" 
257d			 
257d			; the core word dictionary v4 
257d			; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Notation.html#Notation 
257d			 
257d			; this is a linked list for each of the system words used 
257d			; user defined words will follow the same format but will be in ram 
257d			 
257d			 
257d			; 
257d			; 
257d			; define linked list: 
257d			; 
257d			; 1. compiled byte op code 
257d			; 2. len of text word 
257d			; 3. text word 
257d			; 4. ptr to next dictionary word 
257d			; 5. asm, calls etc for the word 
257d			; 
257d			;  if 1 == 0 then last word in dict  
257d			;   
257d			; set the start of dictionary scanning to be in ram and the last word point to the system dict 
257d			;  
257d			;  
257d			; create basic standard set of words 
257d			; 
257d			;  
257d			; + - / * DUP EMIT . SWAP IF..THEN..ELSE DO..LOOP  : ; DROP  
257d			; 2DUP 2DROP 2SWAP  
257d			; @ C@ - get byte  
257d			; ! C! - store byte 
257d			; 0< true if less than zero 
257d			; 0= true if zero 
257d			; < >  
257d			; = true if same 
257d			; variables 
257d			 
257d			 
257d			; Hardware specific words I may need 
257d			; 
257d			; IN OUT  
257d			; calls to key util functions 
257d			; calls to hardward abstraction stuff 
257d			; easy control of frame buffers and lcd i/o 
257d			; keyboard  
257d			 
257d			 
257d			;DICT: macro 
257d			; op_code, len, word, next 
257d			;    word: 
257d			;    db op_code 
257d			;    ds word zero term 
257d			;    dw next 
257d			;    endm 
257d			 
257d			 
257d			 
257d			 
257d			; op code 1 is a flag for user define words which are to be handled differently 
257d			 
257d			 
257d			; 
257d			; 
257d			;    TODO on entry to a word this should be the expected environment 
257d			;    hl - tos value if number then held, if string this is the ptr 
257d			;    de -  
257d			 
257d			 
257d			; opcode ranges 
257d			; 0 - end of word dict 
257d			; 255 - user define words 
257d			 
257d			sysdict: 
257d			include "forth_opcodes.asm" 
257d			; op codes for forth keywords 
257d			 
257d			; Changing use of opcodes to flag is the word exists in compiled form or not.  
257d			; This provides a means to compile uwords if required for higher performance 
257d			; by avoiding the use of the keyword parser and just jumping directly to the code 
257d			; Actually there is already a flag for if the code exists as binary thinking about it... 
257d			 
257d			 
257d			 
257d			 
257d			 
257d			; free to use code 0  
257d				OPCODE_HEAP: equ  1 
257d				OPCODE_EXEC: equ 2 
257d				OPCODE_DUP: equ 3 
257d				OPCODE_SWAP: equ 4 
257d				OPCODE_COLN: equ 5 
257d				OPCODE_SCOLN: equ 6 
257d				OPCODE_DROP: equ 7 
257d				OPCODE_DUP2: equ 8 
257d				OPCODE_DROP2: equ 9 
257d				OPCODE_SWAP2: equ 10 
257d				OPCODE_AT: equ 11 
257d				OPCODE_CAT: equ 12 
257d				OPCODE_BANG: equ 13 
257d				OPCODE_CBANG: equ 14 
257d				OPCODE_SCALL: equ 15 
257d				OPCODE_DEPTH: equ 16 
257d				OPCODE_OVER: equ 17 
257d				OPCODE_PAUSE: equ 18 
257d				OPCODE_PAUSES: equ 19 
257d				OPCODE_ROT: equ 20 
257d			;free to reuse	OPCODE_WORDS: equ 21 
257d			        OPCODE_NOT: equ 21 
257d				OPCODE_UWORDS: equ 22 
257d				OPCODE_BP: equ 23 
257d				OPCODE_MONITOR: equ 24  
257d				OPCODE_MALLOC: equ 25 
257d				OPCODE_FREE: equ 26 
257d				OPCODE_LIST: equ 27 
257d				OPCODE_FORGET: equ 28 
257d				OPCODE_NOP: equ 29 
257d				OPCODE_COMO: equ 30 
257d				OPCODE_COMC: equ 31 
257d			;free to reuse	OPCODE_ENDCORE: equ 32 
257d				OPCODE_AFTERSOUND: equ 33 
257d				OPCODE_GP2: equ 34 
257d				OPCODE_GP3: equ 35 
257d				OPCODE_GP4: equ 36 
257d				OPCODE_SIN: equ 37 
257d				OPCODE_SOUT: equ 38 
257d				OPCODE_SPIO: equ 39 
257d				OPCODE_SPICEH: equ 40 
257d				OPCODE_SPIOb: equ 41 
257d				OPCODE_SPII: equ 42 
257d				OPCODE_SESEL: equ 43 
257d				OPCODE_CARTDEV: equ 44 
257d			; free to reuse	OPCODE_ENDDEVICE: equ 45 
257d				OPCODE_FB: equ 46 
257d				OPCODE_EMIT: equ 47 
257d				OPCODE_DOTH: equ 48 
257d				OPCODE_DOTF: equ 49 
257d				OPCODE_DOT: equ 50 
257d				OPCODE_CLS: equ 51 
257d				OPCODE_DRAW: equ 52 
257d				OPCODE_DUMP: equ 53 
257d				OPCODE_CDUMP: equ 54 
257d				OPCODE_DAT: equ 55 
257d				OPCODE_HOME: equ 56 
257d				OPCODE_SPACE: equ 57 
257d				OPCODE_SPACES: equ 58 
257d				OPCODE_SCROLL: equ 59 
257d				OPCODE_ATQ: equ 60 
257d				OPCODE_AUTODSP: equ 61 
257d				OPCODE_MENU: equ 62 
257d			; free to reuse	OPCODE_ENDDISPLAY: equ 63  
257d				OPCODE_THEN: equ 64 
257d				OPCODE_ELSE: equ 65 
257d				OPCODE_DO: equ 66 
257d				OPCODE_LOOP: equ 67 
257d				OPCODE_I: equ 68 
257d				OPCODE_DLOOP: equ 69  
257d				OPCODE_REPEAT: equ 70  
257d				OPCODE_UNTIL: equ 71 
257d				OPCODE_ENDFLOW: equ 72 
257d				OPCODE_WAITK: equ 73 
257d				OPCODE_ACCEPT: equ 74 
257d				OPCODE_EDIT: equ 75 
257d			;free to reuse	OPCODE_ENDKEY: equ 76 
257d				OPCODE_LZERO: equ 77 
257d				OPCODE_TZERO: equ 78 
257d				OPCODE_LESS: equ 79 
257d				OPCODE_GT: equ 80 
257d				OPCODE_EQUAL: equ 81  
257d			;free to reuse	OPCODE_ENDLOGIC: equ 82 
257d				OPCODE_NEG: equ 83 
257d				OPCODE_DIV: equ 84 
257d				OPCODE_MUL: equ 85 
257d				OPCODE_MIN: equ 86 
257d				OPCODE_MAX: equ 87 
257d				OPCODE_RND16: equ 88 
257d				OPCODE_RND8: equ 89 
257d				OPCODE_RND: equ 90 
257d			;free to reuse	OPCODE_ENDMATHS: equ 91  
257d				OPCODE_BYNAME: equ 92 
257d				OPCODE_DIR: equ 93 
257d				OPCODE_SAVE: equ 94 
257d				OPCODE_LOAD: equ 95 
257d				OPCODE_BSAVE: equ 96 
257d				OPCODE_BLOAD: equ 97 
257d				OPCODE_SEO: equ 98  
257d				OPCODE_SEI: equ 99 
257d				OPCODE_SFREE: equ 100 
257d				OPCODE_SIZE: equ 101 
257d				OPCODE_CREATE: equ 102 
257d				OPCODE_APPEND: equ 103 
257d				OPCODE_SDEL: equ 104 
257d				OPCODE_OPEN: equ 105 
257d				OPCODE_READ: equ 106 
257d				OPCODE_EOF: equ 106 
257d				OPCODE_FORMAT: equ 107 
257d				OPCODE_LABEL: equ 108 
257d				OPCODE_LABELS: equ 109 
257d			;free to reuse	OPCODE_ENDSTORAGE: equ 110  
257d				OPCODE_UPPER: equ 111 
257d				OPCODE_LOWER: equ 112 
257d				OPCODE_SUBSTR: equ 113 
257d				OPCODE_LEFT: equ 114 
257d				OPCODE_RIGHT: equ 115 
257d				OPCODE_STR2NUM: equ 116 
257d				OPCODE_NUM2STR: equ 117 
257d				OPCODE_CONCAT: equ 118 
257d				OPCODE_FIND: equ 119 
257d				OPCODE_LEN: equ 120 
257d				OPCODE_CHAR: equ 121 
257d			; free to reuse	OPCODE_STRLEN: equ 122 
257d			; free to reuse	OPCODE_ENDSTR: equ 123 
257d				OPCODE_V0S: equ 124 
257d				OPCODE_V0Q: equ 125 
257d				OPCODE_V1S: equ 126 
257d				OPCODE_V1Q: equ 127 
257d				OPCODE_V2S: equ 128 
257d				OPCODE_V2Q: equ 129 
257d				OPCODE_V3S: equ 130 
257d				OPCODE_V3Q: equ 131 
257d			;free to reuse	OPCODE_END: equ 132 
257d				OPCODE_ZDUP: equ 133 
257d			 
257d			; eof 
# End of file forth_opcodes.asm
257d			 
257d			include "forth_words_core.asm" 
257d			 
257d			; | ## Core Words 
257d			 
257d			;if MALLOC_4 
257d			 
257d			.HEAP: 
257d			CWHEAD .EXEC OPCODE_HEAP "HEAP" 4 WORD_FLAG_CODE 
257d 15				db WORD_SYS_CORE+OPCODE_HEAP             
257e bc 25			dw .EXEC            
2580 05				db 4 + 1 
2581 .. 00			db "HEAP",0              
2586				endm 
# End of macro CWHEAD
2586			; | HEAP ( -- u1 u2 )   Pushes u1 the current number of bytes in the heap and u2 the remaining bytes - Only present if using my MALLOC | DONE 
2586			; | | u1 - Current number of bytes in the heap 
2586			; | | u2 - Remaining bytes left on the heap 
2586			; | |  
2586			; | | The heap is used for storing user defined words as well as any values pushed to stack. 
2586			 
2586			 
2586				if DEBUG_FORTH_WORDS_KEY 
2586					DMARK "HEP" 
2586 f5				push af  
2587 3a 9b 25			ld a, (.dmark)  
258a 32 a0 fd			ld (debug_mark),a  
258d 3a 9c 25			ld a, (.dmark+1)  
2590 32 a1 fd			ld (debug_mark+1),a  
2593 3a 9d 25			ld a, (.dmark+2)  
2596 32 a2 fd			ld (debug_mark+2),a  
2599 18 03			jr .pastdmark  
259b ..			.dmark: db "HEP"  
259e f1			.pastdmark: pop af  
259f			endm  
# End of macro DMARK
259f					CALLMONITOR 
259f cd aa fd			call debug_vector  
25a2				endm  
# End of macro CALLMONITOR
25a2				endif 
25a2 2a 0a 80			ld hl, (free_list )      
25a5 11 0e 80			ld de, heap_start 
25a8			 
25a8 ed 52			sbc hl, de  
25aa			 
25aa cd 48 20			call forth_push_numhl 
25ad			 
25ad			 
25ad ed 5b 0a 80		ld de, (free_list )      
25b1 21 d1 f0			ld hl, heap_end 
25b4			 
25b4 ed 52			sbc hl, de 
25b6			 
25b6 cd 48 20			call forth_push_numhl 
25b9				 
25b9			 
25b9				 
25b9			 
25b9			 
25b9			 
25b9				NEXTW 
25b9 c3 39 24			jp macro_next 
25bc				endm 
# End of macro NEXTW
25bc			;endif 
25bc			 
25bc			.EXEC: 
25bc			;	CWHEAD .STKEXEC OPCODE_EXEC "EXEC" 4 WORD_FLAG_CODE 
25bc			;; > EXEC ( u -- )    Execs the string on TOS as a FORTH expression > CRASHES ON NEXTW 
25bc			;; > > u - A qutoed string which can consist of any valid Forth expression excluding : defintions (use LOAD instead) 
25bc			;; > > 
25bc			;; > >   
25bc			;	STACKFRAME OFF $5efe $5f9f 
25bc			; 
25bc			;		if DEBUG_FORTH_WORDS_KEY 
25bc			;			DMARK "EXE" 
25bc			;			CALLMONITOR 
25bc			;		endif 
25bc			; 
25bc			;	FORTH_DSP_VALUEHL 
25bc			; 
25bc			;	FORTH_DSP_POP 
25bc			; 
25bc			;		if DEBUG_FORTH_WORDS 
25bc			;			DMARK "EX1" 
25bc			;			CALLMONITOR 
25bc			;		endif 
25bc			;;	ld e,(hl) 
25bc			;;	inc hl 
25bc			;;	ld d,(hl) 
25bc			;;	ex de,hl 
25bc			; 
25bc			;;		if DEBUG_FORTH_WORDS 
25bc			;;			DMARK "EX2" 
25bc			;;			CALLMONITOR 
25bc			;;		endif 
25bc			;	push hl 
25bc			; 
25bc			;	;ld a, 0 
25bc			;	;ld a, FORTH_END_BUFFER 
25bc			;	call strlenz 
25bc			;	inc hl   ; include zero term to copy 
25bc			;	inc hl   ; include term 
25bc			;	inc hl   ; include term 
25bc			;	ld b,0 
25bc			;	ld c,l 
25bc			;	pop hl 
25bc			;	ld de, execscratch 
25bc			;		if DEBUG_FORTH_WORDS 
25bc			;			DMARK "EX3" 
25bc			;			CALLMONITOR 
25bc			;		endif 
25bc			;	ldir 
25bc			; 
25bc			; 
25bc			;	ld hl, execscratch 
25bc			; 
25bc			;		if DEBUG_FORTH_WORDS 
25bc			;			DMARK "EXe" 
25bc			;			CALLMONITOR 
25bc			;		endif 
25bc			; 
25bc			;	call forthparse 
25bc			;	call forthexec 
25bc			;;	call forthexec_cleanup 
25bc			;;	call forthparse 
25bc			;;	call forthexec 
25bc			; 
25bc			;	STACKFRAMECHK OFF $5efe $5f9f 
25bc			; 
25bc			;	; an immediate word so no need to process any more words 
25bc			;	ret 
25bc			;	NEXTW 
25bc			 
25bc			; dead code - old version  
25bc			;	FORTH_RSP_NEXT 
25bc			 
25bc			;  
25bc			;	ld bc,(cli_ptr)   ; move to next token to parse in the input stream 
25bc			;	ld de,(cli_origptr)   ; move to next token to parse in the input stream 
25bc			;	ld hl,(os_tok_ptr)   ; move to next token to parse in the input stream 
25bc			;	push hl 
25bc			;	push de 
25bc			;	push bc 
25bc			; 
25bc			; 
25bc			;		if DEBUG_FORTH_WORDS_KEY 
25bc			;			DMARK "EXR" 
25bc			;			CALLMONITOR 
25bc			;		endif 
25bc			; 
25bc			; 
25bc			; 
25bc			;	;v5 FORTH_DSP_VALUE 
25bc			;	FORTH_DSP_VALUEHL 
25bc			; 
25bc			;	; TODO do string type checks 
25bc			; 
25bc			;;v5	inc hl   ; skip type 
25bc			; 
25bc			;	push hl  ; source code  
25bc			;		if DEBUG_FORTH_WORDS 
25bc			;			DMARK "EX1" 
25bc			;			CALLMONITOR 
25bc			;		endif 
25bc			;	ld a, 0 
25bc			;	call strlent 
25bc			; 
25bc			;	inc hl 
25bc			;	inc hl 
25bc			;	inc hl 
25bc			;	inc hl 
25bc			; 
25bc			;	push hl    ; size 
25bc			; 
25bc			;		if DEBUG_FORTH_WORDS 
25bc			;			DMARK "EX2" 
25bc			;			CALLMONITOR 
25bc			;		endif 
25bc			;	call malloc 
25bc			; 
25bc			;	ex de, hl    ; de now contains malloc area 
25bc			;	pop bc   	; get byte count 
25bc			;	pop hl      ; get string to copy 
25bc			; 
25bc			;	push de     ; save malloc for free later 
25bc			; 
25bc			;		if DEBUG_FORTH_WORDS 
25bc			;			DMARK "EX3" 
25bc			;			CALLMONITOR 
25bc			;		endif 
25bc			;	ldir       ; duplicate string 
25bc			; 
25bc			;	; at the end of the string so go back the three extra spaces and fill in with extra terms 
25bc			;	 
25bc			;	; TODO fix the parse would be better than this...  
25bc			;	ex de, hl 
25bc			;	dec hl 
25bc			;	ld a, 0 
25bc			;	ld (hl), a 
25bc			;	dec hl 
25bc			;	ld a, ' ' 
25bc			;	ld (hl), a 
25bc			;	dec hl 
25bc			;	ld (hl), a 
25bc			; 
25bc			;	dec hl 
25bc			;	ld (hl), a 
25bc			; 
25bc			; 
25bc			;	FORTH_DSP_POP  
25bc			; 
25bc			;	pop hl     
25bc			;	push hl    ; save malloc area 
25bc			; 
25bc			;		if DEBUG_FORTH_WORDS 
25bc			;			DMARK "EX4" 
25bc			;			CALLMONITOR 
25bc			;		endif 
25bc			; 
25bc			;	call forthparse 
25bc			;	call forthexec 
25bc			;	 
25bc			;	pop hl 
25bc			;	if DEBUG_FORTH_WORDS 
25bc			;		DMARK "EX5" 
25bc			;		CALLMONITOR 
25bc			;	endif 
25bc			; 
25bc			;	if FORTH_ENABLE_FREE 
25bc			;	call free 
25bc			;	endif 
25bc			; 
25bc			;	if DEBUG_FORTH_WORDS 
25bc			;		DMARK "EX6" 
25bc			;		CALLMONITOR 
25bc			;	endif 
25bc			; 
25bc			;	pop bc 
25bc			;	pop de 
25bc			;	pop hl 
25bc			;;	FORTH_RSP_POP	  
25bc			;	ld (cli_ptr),bc   ; move to next token to parse in the input stream 
25bc			;	ld (cli_origptr),de   ; move to next token to parse in the input stream 
25bc			;	ld (os_tok_ptr),hl   ; move to next token to parse in the input stream 
25bc			; 
25bc			;	if DEBUG_FORTH_WORDS 
25bc			;		DMARK "EX7" 
25bc			;		CALLMONITOR 
25bc			;	endif 
25bc			;	NEXTW 
25bc			 
25bc			;.STKEXEC: 
25bc			;	CWHEAD .ZDUP 43 "STKEXEC" 7 WORD_FLAG_CODE 
25bc			;; > STKEXEC ( u .. u c -- ) Taking c count of strings off of the stack the strings are evaluated as code > TO TEST 
25bc			; 
25bc			; 
25bc			;		if DEBUG_FORTH_WORDS_KEY 
25bc			;			DMARK "STX" 
25bc			;			CALLMONITOR 
25bc			;		endif 
25bc			; 
25bc			;	FORTH_DSP_VALUEHL 
25bc			; 
25bc			;	ld (store_tmp1), hl    ; count 
25bc			; 
25bc			;	FORTH_DSP_POP 
25bc			;.stkexec1: 
25bc			;	ld hl, (store_tmp1)   ; count 
25bc			;	ld a, 0 
25bc			;	cp l 
25bc			;	ret z 
25bc			; 
25bc			;	dec hl 
25bc			;	ld (store_tmp1), hl    ; count 
25bc			;	 
25bc			;	FORTH_DSP_VALUEHL 
25bc			;	push hl 
25bc			;	 
25bc			;		if DEBUG_FORTH_WORDS 
25bc			;			DMARK "EXp" 
25bc			;			CALLMONITOR 
25bc			;		endif 
25bc			;	FORTH_DSP_POP 
25bc			; 
25bc			;	call strlenz 
25bc			;	inc hl   ; include zero term to copy 
25bc			;	inc hl   ; include zero term to copy 
25bc			;	inc hl   ; include zero term to copy 
25bc			;	ld b,0 
25bc			;	ld c,l 
25bc			;	pop hl 
25bc			;	ld de, execscratch 
25bc			;		if DEBUG_FORTH_WORDS 
25bc			;			DMARK "EX3" 
25bc			;			CALLMONITOR 
25bc			;		endif 
25bc			;	ldir 
25bc			; 
25bc			; 
25bc			;	ld hl, execscratch 
25bc			; 
25bc			;		if DEBUG_FORTH_WORDS 
25bc			;			DMARK "EXP" 
25bc			;			CALLMONITOR 
25bc			;		endif 
25bc			; 
25bc			;	call forthparse 
25bc			;	ld hl, execscratch 
25bc			;		if DEBUG_FORTH_WORDS 
25bc			;			DMARK "EXx" 
25bc			;			CALLMONITOR 
25bc			;		endif 
25bc			;	call forthexec 
25bc			; 
25bc			;	jp .stkexec1 
25bc			; 
25bc			;	ret 
25bc			 
25bc			 
25bc			.DUP: 
25bc			CWHEAD .ZDUP OPCODE_DUP "DUP" 3 WORD_FLAG_CODE 
25bc 17				db WORD_SYS_CORE+OPCODE_DUP             
25bd 32 26			dw .ZDUP            
25bf 04				db 3 + 1 
25c0 .. 00			db "DUP",0              
25c4				endm 
# End of macro CWHEAD
25c4			; | DUP ( u -- u u )     Duplicate whatever item is on TOS | DONE 
25c4			 
25c4				if DEBUG_FORTH_WORDS_KEY 
25c4					DMARK "DUP" 
25c4 f5				push af  
25c5 3a d9 25			ld a, (.dmark)  
25c8 32 a0 fd			ld (debug_mark),a  
25cb 3a da 25			ld a, (.dmark+1)  
25ce 32 a1 fd			ld (debug_mark+1),a  
25d1 3a db 25			ld a, (.dmark+2)  
25d4 32 a2 fd			ld (debug_mark+2),a  
25d7 18 03			jr .pastdmark  
25d9 ..			.dmark: db "DUP"  
25dc f1			.pastdmark: pop af  
25dd			endm  
# End of macro DMARK
25dd					CALLMONITOR 
25dd cd aa fd			call debug_vector  
25e0				endm  
# End of macro CALLMONITOR
25e0				endif 
25e0			 
25e0				FORTH_DSP 
25e0 cd 13 22			call macro_forth_dsp 
25e3				endm 
# End of macro FORTH_DSP
25e3			 
25e3 7e				ld a, (HL) 
25e4 fe 01			cp DS_TYPE_STR 
25e6 20 25			jr nz, .dupinum 
25e8			 
25e8				; push another string 
25e8			 
25e8				FORTH_DSP_VALUEHL     		 
25e8 cd 4d 22			call macro_dsp_valuehl 
25eb				endm 
# End of macro FORTH_DSP_VALUEHL
25eb			 
25eb			if DEBUG_FORTH_WORDS 
25eb				DMARK "DUs" 
25eb f5				push af  
25ec 3a 00 26			ld a, (.dmark)  
25ef 32 a0 fd			ld (debug_mark),a  
25f2 3a 01 26			ld a, (.dmark+1)  
25f5 32 a1 fd			ld (debug_mark+1),a  
25f8 3a 02 26			ld a, (.dmark+2)  
25fb 32 a2 fd			ld (debug_mark+2),a  
25fe 18 03			jr .pastdmark  
2600 ..			.dmark: db "DUs"  
2603 f1			.pastdmark: pop af  
2604			endm  
# End of macro DMARK
2604				CALLMONITOR 
2604 cd aa fd			call debug_vector  
2607				endm  
# End of macro CALLMONITOR
2607			endif 
2607 cd b6 20			call forth_push_str 
260a			 
260a				NEXTW 
260a c3 39 24			jp macro_next 
260d				endm 
# End of macro NEXTW
260d			 
260d			 
260d			.dupinum: 
260d				 
260d			 
260d			 
260d				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
260d cd 4d 22			call macro_dsp_valuehl 
2610				endm 
# End of macro FORTH_DSP_VALUEHL
2610			 
2610			; TODO add floating point number detection 
2610			 
2610			if DEBUG_FORTH_WORDS 
2610				DMARK "DUi" 
2610 f5				push af  
2611 3a 25 26			ld a, (.dmark)  
2614 32 a0 fd			ld (debug_mark),a  
2617 3a 26 26			ld a, (.dmark+1)  
261a 32 a1 fd			ld (debug_mark+1),a  
261d 3a 27 26			ld a, (.dmark+2)  
2620 32 a2 fd			ld (debug_mark+2),a  
2623 18 03			jr .pastdmark  
2625 ..			.dmark: db "DUi"  
2628 f1			.pastdmark: pop af  
2629			endm  
# End of macro DMARK
2629				CALLMONITOR 
2629 cd aa fd			call debug_vector  
262c				endm  
# End of macro CALLMONITOR
262c			endif 
262c			 
262c cd 48 20			call forth_push_numhl 
262f				NEXTW 
262f c3 39 24			jp macro_next 
2632				endm 
# End of macro NEXTW
2632			.ZDUP: 
2632			CWHEAD .SWAP OPCODE_ZDUP "?DUP" 4 WORD_FLAG_CODE 
2632 99				db WORD_SYS_CORE+OPCODE_ZDUP             
2633 6a 26			dw .SWAP            
2635 05				db 4 + 1 
2636 .. 00			db "?DUP",0              
263b				endm 
# End of macro CWHEAD
263b			; | ?DUP ( u -- u u )     Duplicate item on TOS if the item is non-zero (Only works for numerics) | DONE 
263b			 
263b				if DEBUG_FORTH_WORDS_KEY 
263b					DMARK "qDU" 
263b f5				push af  
263c 3a 50 26			ld a, (.dmark)  
263f 32 a0 fd			ld (debug_mark),a  
2642 3a 51 26			ld a, (.dmark+1)  
2645 32 a1 fd			ld (debug_mark+1),a  
2648 3a 52 26			ld a, (.dmark+2)  
264b 32 a2 fd			ld (debug_mark+2),a  
264e 18 03			jr .pastdmark  
2650 ..			.dmark: db "qDU"  
2653 f1			.pastdmark: pop af  
2654			endm  
# End of macro DMARK
2654					CALLMONITOR 
2654 cd aa fd			call debug_vector  
2657				endm  
# End of macro CALLMONITOR
2657				endif 
2657				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2657 cd 4d 22			call macro_dsp_valuehl 
265a				endm 
# End of macro FORTH_DSP_VALUEHL
265a			 
265a e5				push hl 
265b			 
265b				; is it a zero? 
265b			 
265b 3e 00			ld a, 0 
265d 84				add h 
265e 85				add l 
265f			 
265f e1				pop hl 
2660			 
2660 fe 00			cp 0 
2662 28 03			jr z, .dup2orig 
2664			 
2664			 
2664 cd 48 20			call forth_push_numhl 
2667			 
2667			 
2667			; TODO add floating point number detection 
2667			 
2667			.dup2orig: 
2667			 
2667				NEXTW 
2667 c3 39 24			jp macro_next 
266a				endm 
# End of macro NEXTW
266a			.SWAP: 
266a			CWHEAD .COLN OPCODE_SWAP "SWAP" 4 WORD_FLAG_CODE 
266a 18				db WORD_SYS_CORE+OPCODE_SWAP             
266b be 26			dw .COLN            
266d 05				db 4 + 1 
266e .. 00			db "SWAP",0              
2673				endm 
# End of macro CWHEAD
2673			; | SWAP ( w1 w2 -- w2 w1 )    Swap top two items on TOS | DONE 
2673				if DEBUG_FORTH_WORDS_KEY 
2673					DMARK "SWP" 
2673 f5				push af  
2674 3a 88 26			ld a, (.dmark)  
2677 32 a0 fd			ld (debug_mark),a  
267a 3a 89 26			ld a, (.dmark+1)  
267d 32 a1 fd			ld (debug_mark+1),a  
2680 3a 8a 26			ld a, (.dmark+2)  
2683 32 a2 fd			ld (debug_mark+2),a  
2686 18 03			jr .pastdmark  
2688 ..			.dmark: db "SWP"  
268b f1			.pastdmark: pop af  
268c			endm  
# End of macro DMARK
268c					CALLMONITOR 
268c cd aa fd			call debug_vector  
268f				endm  
# End of macro CALLMONITOR
268f				endif 
268f			 
268f			; DONE Use os stack swap memory 
268f			 
268f				FORTH_DSP_PTR 0     ; TOS 
268f 2a 23 f9			ld hl,(cli_data_sp) 
2692 11 00 00			ld de, 0 * 3 
2695 ed 52			sbc hl, de 
2697				endm 
# End of macro FORTH_DSP_PTR
2697 cd 85 23			call hltostack1 
269a			  
269a				FORTH_DSP_PTR 1     ; TOS 
269a 2a 23 f9			ld hl,(cli_data_sp) 
269d 11 03 00			ld de, 1 * 3 
26a0 ed 52			sbc hl, de 
26a2				endm 
# End of macro FORTH_DSP_PTR
26a2 cd 8b 23			call hltostack2 
26a5			 
26a5				FORTH_DSP_PTR 0     ; TOS 
26a5 2a 23 f9			ld hl,(cli_data_sp) 
26a8 11 00 00			ld de, 0 * 3 
26ab ed 52			sbc hl, de 
26ad				endm 
# End of macro FORTH_DSP_PTR
26ad cd a3 23			call hlfromstack2 
26b0			 
26b0				FORTH_DSP_PTR 1     ; TOS 
26b0 2a 23 f9			ld hl,(cli_data_sp) 
26b3 11 03 00			ld de, 1 * 3 
26b6 ed 52			sbc hl, de 
26b8				endm 
# End of macro FORTH_DSP_PTR
26b8 cd 9d 23			call hlfromstack1 
26bb			;	FORTH_DSP_VALUEHL 
26bb			;	push hl     ; w2 
26bb			; 
26bb			;	FORTH_DSP_POP 
26bb			; 
26bb			;	FORTH_DSP_VALUEHL 
26bb			; 
26bb			;	FORTH_DSP_POP 
26bb			; 
26bb			;	pop de     ; w2	, hl = w1 
26bb			; 
26bb			;	ex de, hl 
26bb			;	push de 
26bb			; 
26bb			;	call forth_push_numhl 
26bb			; 
26bb			;	pop hl 
26bb			; 
26bb			;	call forth_push_numhl 
26bb				 
26bb			 
26bb				NEXTW 
26bb c3 39 24			jp macro_next 
26be				endm 
# End of macro NEXTW
26be			.COLN: 
26be			CWHEAD .SCOLN OPCODE_COLN ":" 1 WORD_FLAG_CODE 
26be 19				db WORD_SYS_CORE+OPCODE_COLN             
26bf 4a 28			dw .SCOLN            
26c1 02				db 1 + 1 
26c2 .. 00			db ":",0              
26c4				endm 
# End of macro CWHEAD
26c4			; | : ( -- )         Create new word | DONE 
26c4			 
26c4				if DEBUG_FORTH_WORDS_KEY 
26c4					DMARK "CLN" 
26c4 f5				push af  
26c5 3a d9 26			ld a, (.dmark)  
26c8 32 a0 fd			ld (debug_mark),a  
26cb 3a da 26			ld a, (.dmark+1)  
26ce 32 a1 fd			ld (debug_mark+1),a  
26d1 3a db 26			ld a, (.dmark+2)  
26d4 32 a2 fd			ld (debug_mark+2),a  
26d7 18 03			jr .pastdmark  
26d9 ..			.dmark: db "CLN"  
26dc f1			.pastdmark: pop af  
26dd			endm  
# End of macro DMARK
26dd					CALLMONITOR 
26dd cd aa fd			call debug_vector  
26e0				endm  
# End of macro CALLMONITOR
26e0				endif 
26e0			STACKFRAME OFF $8efe $989f 
26e0				if DEBUG_STACK_IMB 
26e0					if OFF 
26e0						exx 
26e0						ld de, $8efe 
26e0						ld a, d 
26e0						ld hl, curframe 
26e0						call hexout 
26e0						ld a, e 
26e0						ld hl, curframe+2 
26e0						call hexout 
26e0						ld hl, $8efe 
26e0						push hl 
26e0						ld hl, $989f 
26e0						push hl 
26e0						exx 
26e0					endif 
26e0				endif 
26e0			endm 
# End of macro STACKFRAME
26e0			; get parser buffer length  of new word 
26e0			 
26e0			 
26e0			 
26e0				; move tok past this to start of name defintition 
26e0				; TODO get word to define 
26e0				; TODO Move past word token 
26e0				; TODO get length of string up to the ';' 
26e0			 
26e0 2a f7 f3		ld hl, (os_tok_ptr) 
26e3 23			inc hl 
26e4 23			inc hl 
26e5			 
26e5 3e 3b		ld a, ';' 
26e7 cd 4f 13		call strlent 
26ea			 
26ea 7d			ld a,l 
26eb 32 e6 f0		ld (os_new_parse_len), a 
26ee			 
26ee			 
26ee			if DEBUG_FORTH_UWORD 
26ee ed 5b f7 f3	ld de, (os_tok_ptr) 
26f2					DMARK ":01" 
26f2 f5				push af  
26f3 3a 07 27			ld a, (.dmark)  
26f6 32 a0 fd			ld (debug_mark),a  
26f9 3a 08 27			ld a, (.dmark+1)  
26fc 32 a1 fd			ld (debug_mark+1),a  
26ff 3a 09 27			ld a, (.dmark+2)  
2702 32 a2 fd			ld (debug_mark+2),a  
2705 18 03			jr .pastdmark  
2707 ..			.dmark: db ":01"  
270a f1			.pastdmark: pop af  
270b			endm  
# End of macro DMARK
270b			CALLMONITOR 
270b cd aa fd			call debug_vector  
270e				endm  
# End of macro CALLMONITOR
270e			endif 
270e			 
270e			; 
270e			;  new word memory layout: 
270e			;  
270e			;    : adg 6666 ;  
270e			; 
270e			;    db   1     ; user defined word  
270e 23			inc hl    
270f			;    dw   sysdict 
270f 23			inc hl 
2710 23			inc hl 
2711			;    db <word len>+1 (for null) 
2711 23			inc hl 
2712			;    db .... <word> 
2712			; 
2712			 
2712 23			inc hl    ; some extras for the word preamble before the above 
2713 23			inc hl 
2714 23			inc hl 
2715 23			inc hl 
2716 23			inc hl 
2717 23			inc hl 
2718 23			inc hl  
2719 23			inc hl 
271a 23			inc hl 
271b 23			inc hl 
271c 23			inc hl 
271d 23			inc hl 
271e 23			inc hl 
271f 23			inc hl     ; TODO how many do we really need?     maybe only 6 
2720			;       exec word buffer 
2720			;	<ptr word>   
2720 23			inc hl 
2721 23			inc hl 
2722			;       <word list><null term> 7F final term 
2722			 
2722			 
2722			if DEBUG_FORTH_UWORD 
2722					DMARK ":02" 
2722 f5				push af  
2723 3a 37 27			ld a, (.dmark)  
2726 32 a0 fd			ld (debug_mark),a  
2729 3a 38 27			ld a, (.dmark+1)  
272c 32 a1 fd			ld (debug_mark+1),a  
272f 3a 39 27			ld a, (.dmark+2)  
2732 32 a2 fd			ld (debug_mark+2),a  
2735 18 03			jr .pastdmark  
2737 ..			.dmark: db ":02"  
273a f1			.pastdmark: pop af  
273b			endm  
# End of macro DMARK
273b			CALLMONITOR 
273b cd aa fd			call debug_vector  
273e				endm  
# End of macro CALLMONITOR
273e			endif 
273e			 
273e			 
273e				; malloc the size 
273e			 
273e cd b9 13			call malloc 
2741 22 e8 f0			ld (os_new_malloc), hl     ; save malloc start 
2744			 
2744			;    db   1     ; user defined word  
2744 3e 01			ld a, WORD_SYS_UWORD  
2746 77				ld (hl), a 
2747			 
2747 23			inc hl    
2748			;    dw   sysdict 
2748 11 7d 25		ld de, sysdict       ; continue on with the scan to the system dict 
274b 73			ld (hl), e 
274c 23			inc hl 
274d 72			ld (hl), d 
274e 23			inc hl 
274f			 
274f			 
274f			;    Setup dict word 
274f			 
274f 23			inc hl 
2750 22 e2 f0		ld (os_new_work_ptr), hl     ; save start of dict word  
2753			 
2753			; 1. get length of dict word 
2753			 
2753			 
2753 2a f7 f3		ld hl, (os_tok_ptr) 
2756 23			inc hl 
2757 23			inc hl    ; position to start of dict word 
2758 3e 00		ld a, 0 
275a cd 4f 13		call strlent 
275d			 
275d			 
275d 23			inc hl    ; to include null??? 
275e			 
275e			; write length of dict word 
275e			 
275e ed 5b e2 f0	ld de, (os_new_work_ptr)   ; get dest for copy of word 
2762 1b			dec de 
2763 eb			ex de, hl 
2764 73			ld (hl), e 
2765 eb			ex de, hl 
2766			 
2766			 
2766			 
2766			; copy  
2766 4d			ld c, l 
2767 06 00		ld b, 0 
2769 ed 5b e2 f0	ld de, (os_new_work_ptr)   ; get dest for copy of word 
276d 2a f7 f3		ld hl, (os_tok_ptr) 
2770 23			inc hl 
2771 23			inc hl    ; position to start of dict word 
2772			 
2772			;	ldir       ; copy word - HL now is where we need to be for copy of the line 
2772			 
2772			; TODO need to convert word to upper case 
2772			 
2772			ucasetok:	 
2772 7e			ld a,(hl) 
2773 cd 3b 13		call toUpper 
2776 77			ld (hl),a 
2777 ed a0		ldi 
2779 f2 72 27		jp p, ucasetok 
277c			 
277c			 
277c			 
277c			; de now points to start of where the word body code should be placed 
277c ed 53 e2 f0	ld (os_new_work_ptr), de 
2780			; hl now points to the words to throw at forthexec which needs to be copied 
2780 22 e0 f0		ld (os_new_src_ptr), hl 
2783			 
2783			; TODO add 'call to forthexec' 
2783			 
2783			if DEBUG_FORTH_UWORD 
2783 c5			push bc 
2784 ed 4b e8 f0	ld bc, (os_new_malloc) 
2788					DMARK ":0x" 
2788 f5				push af  
2789 3a 9d 27			ld a, (.dmark)  
278c 32 a0 fd			ld (debug_mark),a  
278f 3a 9e 27			ld a, (.dmark+1)  
2792 32 a1 fd			ld (debug_mark+1),a  
2795 3a 9f 27			ld a, (.dmark+2)  
2798 32 a2 fd			ld (debug_mark+2),a  
279b 18 03			jr .pastdmark  
279d ..			.dmark: db ":0x"  
27a0 f1			.pastdmark: pop af  
27a1			endm  
# End of macro DMARK
27a1			CALLMONITOR 
27a1 cd aa fd			call debug_vector  
27a4				endm  
# End of macro CALLMONITOR
27a4 c1			pop bc 
27a5			endif 
27a5			 
27a5			 
27a5			; create word preamble which should be: 
27a5			 
27a5			; TODO possibly push the current os_tok_ptr to rsp and the current rsp will be the start of the string and not current pc???? 
27a5			 
27a5			;    ld hl, <word code> 
27a5			;    jp user_exec 
27a5			;    <word code bytes> 
27a5			 
27a5			 
27a5			;	inc de     ; TODO ??? or are we already past the word's null 
27a5 eb			ex de, hl 
27a6			 
27a6 36 21		ld (hl), 021h     ; TODO get bytes poke "ld hl, " 
27a8			 
27a8 23			inc hl 
27a9 22 dc f0		ld (os_new_exec_ptr),hl     ; save this location to poke with the address of the word buffer 
27ac 23			inc hl 
27ad			 
27ad 23			inc hl 
27ae 36 c3		ld (hl), 0c3h     ; TODO get bytes poke "jp xx  " 
27b0			 
27b0 01 a3 5f		ld bc, user_exec 
27b3 23			inc hl 
27b4 71			ld (hl), c     ; poke address of user_exec 
27b5 23			inc hl 
27b6 70			ld (hl), b     
27b7			; 
27b7			;	inc hl 
27b7			;	ld (hl), 0cdh     ; TODO get bytes poke "call  " 
27b7			; 
27b7			; 
27b7			;	ld bc, macro_forth_rsp_next 
27b7			;	inc hl 
27b7			;	ld (hl), c     ; poke address of FORTH_RSP_NEXT 
27b7			;	inc hl 
27b7			;	ld (hl), b     
27b7			; 
27b7			;	inc hl 
27b7			;	ld (hl), 0cdh     ; TODO get bytes poke "call  " 
27b7			; 
27b7			; 
27b7			;	inc hl 
27b7			;	ld bc, forthexec 
27b7			;	ld (hl), c     ; poke address of forthexec 
27b7			;	inc hl 
27b7			;	ld (hl), b      
27b7			; 
27b7			;	inc hl 
27b7			;	ld (hl), 0c3h     ; TODO get bytes poke "jp  " 
27b7			; 
27b7			;	ld bc, user_dict_next 
27b7			;	inc hl 
27b7			;	ld (hl), c     ; poke address of forthexec 
27b7			;	inc hl 
27b7			;	ld (hl), b      
27b7			 
27b7			; hl is now where we need to copy the word byte data to save this 
27b7			 
27b7 23			inc hl 
27b8 22 de f0		ld (os_new_exec), hl 
27bb			 
27bb			; copy definition 
27bb			 
27bb eb			ex de, hl 
27bc			;	inc de    ; TODO BUG It appears the exec of a uword requires pc to be set 
27bc			;	inc de    ; skip the PC for this parse 
27bc 3a e6 f0		ld a, (os_new_parse_len) 
27bf 4f			ld c, a 
27c0 06 00		ld b, 0 
27c2 ed b0		ldir		 ; copy defintion 
27c4			 
27c4			 
27c4			; poke the address of where the new word bytes live for forthexec 
27c4			 
27c4 2a dc f0		ld hl, (os_new_exec_ptr)     ; TODO this isnt correct 
27c7			 
27c7 ed 5b de f0	ld de, (os_new_exec)      
27cb			 
27cb 73			ld (hl), e 
27cc 23			inc hl 
27cd 72			ld (hl), d 
27ce			 
27ce				; TODO copy last user dict word next link to this word 
27ce				; TODO update last user dict word to point to this word 
27ce			; 
27ce			; hl f923 de 812a ; bc 811a 
27ce			 
27ce			if DEBUG_FORTH_UWORD 
27ce c5			push bc 
27cf ed 4b e8 f0	ld bc, (os_new_malloc) 
27d3					DMARK ":0A" 
27d3 f5				push af  
27d4 3a e8 27			ld a, (.dmark)  
27d7 32 a0 fd			ld (debug_mark),a  
27da 3a e9 27			ld a, (.dmark+1)  
27dd 32 a1 fd			ld (debug_mark+1),a  
27e0 3a ea 27			ld a, (.dmark+2)  
27e3 32 a2 fd			ld (debug_mark+2),a  
27e6 18 03			jr .pastdmark  
27e8 ..			.dmark: db ":0A"  
27eb f1			.pastdmark: pop af  
27ec			endm  
# End of macro DMARK
27ec			CALLMONITOR 
27ec cd aa fd			call debug_vector  
27ef				endm  
# End of macro CALLMONITOR
27ef c1			pop bc 
27f0			endif 
27f0			if DEBUG_FORTH_UWORD 
27f0 c5			push bc 
27f1 ed 4b e8 f0	ld bc, (os_new_malloc) 
27f5 03			inc bc 
27f6 03			inc bc 
27f7 03			inc bc 
27f8 03			inc bc 
27f9 03			inc bc 
27fa 03			inc bc 
27fb 03			inc bc 
27fc 03			inc bc 
27fd			 
27fd					DMARK ":0B" 
27fd f5				push af  
27fe 3a 12 28			ld a, (.dmark)  
2801 32 a0 fd			ld (debug_mark),a  
2804 3a 13 28			ld a, (.dmark+1)  
2807 32 a1 fd			ld (debug_mark+1),a  
280a 3a 14 28			ld a, (.dmark+2)  
280d 32 a2 fd			ld (debug_mark+2),a  
2810 18 03			jr .pastdmark  
2812 ..			.dmark: db ":0B"  
2815 f1			.pastdmark: pop af  
2816			endm  
# End of macro DMARK
2816			CALLMONITOR 
2816 cd aa fd			call debug_vector  
2819				endm  
# End of macro CALLMONITOR
2819 c1			pop bc 
281a			endif 
281a			 
281a			; update word dict linked list for new word 
281a			 
281a			 
281a 2a f3 f3		ld hl, (os_last_new_uword)		; get the start of the last added uword 
281d 23			inc hl     ; move to next work linked list ptr 
281e			 
281e ed 5b e8 f0	ld de, (os_new_malloc)		 ; new next word 
2822 73			ld (hl), e 
2823 23			inc hl 
2824 72			ld (hl), d 
2825			 
2825			if DEBUG_FORTH_UWORD 
2825 ed 4b f3 f3	ld bc, (os_last_new_uword)		; get the last word so we can check it worked in debug 
2829			endif 
2829			 
2829 ed 53 f3 f3	ld (os_last_new_uword), de      ; update last new uword ptr 
282d			 
282d			 
282d			if DEBUG_FORTH_UWORD 
282d					DMARK ":0+" 
282d f5				push af  
282e 3a 42 28			ld a, (.dmark)  
2831 32 a0 fd			ld (debug_mark),a  
2834 3a 43 28			ld a, (.dmark+1)  
2837 32 a1 fd			ld (debug_mark+1),a  
283a 3a 44 28			ld a, (.dmark+2)  
283d 32 a2 fd			ld (debug_mark+2),a  
2840 18 03			jr .pastdmark  
2842 ..			.dmark: db ":0+"  
2845 f1			.pastdmark: pop af  
2846			endm  
# End of macro DMARK
2846			CALLMONITOR 
2846 cd aa fd			call debug_vector  
2849				endm  
# End of macro CALLMONITOR
2849			endif 
2849			 
2849			STACKFRAMECHK OFF $8efe $989f 
2849				if DEBUG_STACK_IMB 
2849					if OFF 
2849						exx 
2849						ld hl, $989f 
2849						pop de   ; $989f 
2849						call cmp16 
2849						jr nz, .spnosame 
2849						ld hl, $8efe 
2849						pop de   ; $8efe 
2849						call cmp16 
2849						jr z, .spfrsame 
2849						.spnosame: call showsperror 
2849						.spfrsame: nop 
2849						exx 
2849					endif 
2849				endif 
2849			endm 
# End of macro STACKFRAMECHK
2849			 
2849 c9			ret    ; dont process any remaining parser tokens as they form new word 
284a			 
284a			 
284a			 
284a			 
284a			;		NEXT 
284a			.SCOLN: 
284a			;	CWHEAD .DROP 17 '\;' 1 WORD_FLAG_CODE 
284a 06			db OPCODE_SCOLN 
284b 96 28		dw .DROP 
284d 02			db 2 
284e .. 00		db ";",0           
2850			; | ; ( -- )     Terminate new word and return exec to previous exec level | DONE 
2850				if DEBUG_FORTH_WORDS_KEY 
2850					DMARK "SCN" 
2850 f5				push af  
2851 3a 65 28			ld a, (.dmark)  
2854 32 a0 fd			ld (debug_mark),a  
2857 3a 66 28			ld a, (.dmark+1)  
285a 32 a1 fd			ld (debug_mark+1),a  
285d 3a 67 28			ld a, (.dmark+2)  
2860 32 a2 fd			ld (debug_mark+2),a  
2863 18 03			jr .pastdmark  
2865 ..			.dmark: db "SCN"  
2868 f1			.pastdmark: pop af  
2869			endm  
# End of macro DMARK
2869					CALLMONITOR 
2869 cd aa fd			call debug_vector  
286c				endm  
# End of macro CALLMONITOR
286c				endif 
286c				FORTH_RSP_TOS 
286c cd 06 20			call macro_forth_rsp_tos 
286f				endm 
# End of macro FORTH_RSP_TOS
286f e5				push hl 
2870				FORTH_RSP_POP 
2870 cd 10 20			call macro_forth_rsp_pop 
2873				endm 
# End of macro FORTH_RSP_POP
2873 e1				pop hl 
2874			;		ex de,hl 
2874 22 f7 f3			ld (os_tok_ptr),hl 
2877			 
2877			if DEBUG_FORTH_UWORD 
2877					DMARK "SCL" 
2877 f5				push af  
2878 3a 8c 28			ld a, (.dmark)  
287b 32 a0 fd			ld (debug_mark),a  
287e 3a 8d 28			ld a, (.dmark+1)  
2881 32 a1 fd			ld (debug_mark+1),a  
2884 3a 8e 28			ld a, (.dmark+2)  
2887 32 a2 fd			ld (debug_mark+2),a  
288a 18 03			jr .pastdmark  
288c ..			.dmark: db "SCL"  
288f f1			.pastdmark: pop af  
2890			endm  
# End of macro DMARK
2890			CALLMONITOR 
2890 cd aa fd			call debug_vector  
2893				endm  
# End of macro CALLMONITOR
2893			endif 
2893				NEXTW 
2893 c3 39 24			jp macro_next 
2896				endm 
# End of macro NEXTW
2896			 
2896			.DROP: 
2896			CWHEAD .DUP2 OPCODE_DROP "DROP" 4 WORD_FLAG_CODE 
2896 1b				db WORD_SYS_CORE+OPCODE_DROP             
2897 c1 28			dw .DUP2            
2899 05				db 4 + 1 
289a .. 00			db "DROP",0              
289f				endm 
# End of macro CWHEAD
289f			; | DROP ( w -- )   drop the TOS item   | DONE 
289f				if DEBUG_FORTH_WORDS_KEY 
289f					DMARK "DRP" 
289f f5				push af  
28a0 3a b4 28			ld a, (.dmark)  
28a3 32 a0 fd			ld (debug_mark),a  
28a6 3a b5 28			ld a, (.dmark+1)  
28a9 32 a1 fd			ld (debug_mark+1),a  
28ac 3a b6 28			ld a, (.dmark+2)  
28af 32 a2 fd			ld (debug_mark+2),a  
28b2 18 03			jr .pastdmark  
28b4 ..			.dmark: db "DRP"  
28b7 f1			.pastdmark: pop af  
28b8			endm  
# End of macro DMARK
28b8					CALLMONITOR 
28b8 cd aa fd			call debug_vector  
28bb				endm  
# End of macro CALLMONITOR
28bb				endif 
28bb				FORTH_DSP_POP 
28bb cd 05 23			call macro_forth_dsp_pop 
28be				endm 
# End of macro FORTH_DSP_POP
28be				NEXTW 
28be c3 39 24			jp macro_next 
28c1				endm 
# End of macro NEXTW
28c1			.DUP2: 
28c1			CWHEAD .DROP2 OPCODE_DUP2 "2DUP" 4 WORD_FLAG_CODE 
28c1 1c				db WORD_SYS_CORE+OPCODE_DUP2             
28c2 06 29			dw .DROP2            
28c4 05				db 4 + 1 
28c5 .. 00			db "2DUP",0              
28ca				endm 
# End of macro CWHEAD
28ca			; | 2DUP ( w1 w2 -- w1 w2 w1 w2 ) Duplicate the top two items on TOS  (Only works for numerics) | DONE 
28ca				if DEBUG_FORTH_WORDS_KEY 
28ca					DMARK "2DU" 
28ca f5				push af  
28cb 3a df 28			ld a, (.dmark)  
28ce 32 a0 fd			ld (debug_mark),a  
28d1 3a e0 28			ld a, (.dmark+1)  
28d4 32 a1 fd			ld (debug_mark+1),a  
28d7 3a e1 28			ld a, (.dmark+2)  
28da 32 a2 fd			ld (debug_mark+2),a  
28dd 18 03			jr .pastdmark  
28df ..			.dmark: db "2DU"  
28e2 f1			.pastdmark: pop af  
28e3			endm  
# End of macro DMARK
28e3					CALLMONITOR 
28e3 cd aa fd			call debug_vector  
28e6				endm  
# End of macro CALLMONITOR
28e6				endif 
28e6				FORTH_DSP_VALUEHL 
28e6 cd 4d 22			call macro_dsp_valuehl 
28e9				endm 
# End of macro FORTH_DSP_VALUEHL
28e9 e5				push hl      ; 2 
28ea			 
28ea				FORTH_DSP_POP 
28ea cd 05 23			call macro_forth_dsp_pop 
28ed				endm 
# End of macro FORTH_DSP_POP
28ed				 
28ed				FORTH_DSP_VALUEHL 
28ed cd 4d 22			call macro_dsp_valuehl 
28f0				endm 
# End of macro FORTH_DSP_VALUEHL
28f0			;		push hl      ; 1 
28f0			 
28f0				FORTH_DSP_POP 
28f0 cd 05 23			call macro_forth_dsp_pop 
28f3				endm 
# End of macro FORTH_DSP_POP
28f3			 
28f3			;		pop hl       ; 1 
28f3 d1				pop de       ; 2 
28f4			 
28f4 cd 48 20			call forth_push_numhl 
28f7 eb				ex de, hl 
28f8 cd 48 20			call forth_push_numhl 
28fb			 
28fb				 
28fb eb				ex de, hl 
28fc			 
28fc cd 48 20			call forth_push_numhl 
28ff eb				ex de, hl 
2900 cd 48 20			call forth_push_numhl 
2903			 
2903			 
2903				NEXTW 
2903 c3 39 24			jp macro_next 
2906				endm 
# End of macro NEXTW
2906			.DROP2: 
2906			CWHEAD .PICK OPCODE_DROP2 "2DROP" 5 WORD_FLAG_CODE 
2906 1d				db WORD_SYS_CORE+OPCODE_DROP2             
2907 35 29			dw .PICK            
2909 06				db 5 + 1 
290a .. 00			db "2DROP",0              
2910				endm 
# End of macro CWHEAD
2910			; | 2DROP ( w w -- )    Double drop | DONE 
2910				if DEBUG_FORTH_WORDS_KEY 
2910					DMARK "2DR" 
2910 f5				push af  
2911 3a 25 29			ld a, (.dmark)  
2914 32 a0 fd			ld (debug_mark),a  
2917 3a 26 29			ld a, (.dmark+1)  
291a 32 a1 fd			ld (debug_mark+1),a  
291d 3a 27 29			ld a, (.dmark+2)  
2920 32 a2 fd			ld (debug_mark+2),a  
2923 18 03			jr .pastdmark  
2925 ..			.dmark: db "2DR"  
2928 f1			.pastdmark: pop af  
2929			endm  
# End of macro DMARK
2929					CALLMONITOR 
2929 cd aa fd			call debug_vector  
292c				endm  
# End of macro CALLMONITOR
292c				endif 
292c				FORTH_DSP_POP 
292c cd 05 23			call macro_forth_dsp_pop 
292f				endm 
# End of macro FORTH_DSP_POP
292f				FORTH_DSP_POP 
292f cd 05 23			call macro_forth_dsp_pop 
2932				endm 
# End of macro FORTH_DSP_POP
2932				NEXTW 
2932 c3 39 24			jp macro_next 
2935				endm 
# End of macro NEXTW
2935			.PICK: 
2935			CWHEAD .SWAP2 99 "PICK" 4 WORD_FLAG_CODE 
2935 77				db WORD_SYS_CORE+99             
2936 74 29			dw .SWAP2            
2938 05				db 4 + 1 
2939 .. 00			db "PICK",0              
293e				endm 
# End of macro CWHEAD
293e			; | PICK ( ux ... u x -- ux ... u n )    Replace x on stack with the item from position x on stack  | TODO 
293e				if DEBUG_FORTH_WORDS_KEY 
293e					DMARK "PIK" 
293e f5				push af  
293f 3a 53 29			ld a, (.dmark)  
2942 32 a0 fd			ld (debug_mark),a  
2945 3a 54 29			ld a, (.dmark+1)  
2948 32 a1 fd			ld (debug_mark+1),a  
294b 3a 55 29			ld a, (.dmark+2)  
294e 32 a2 fd			ld (debug_mark+2),a  
2951 18 03			jr .pastdmark  
2953 ..			.dmark: db "PIK"  
2956 f1			.pastdmark: pop af  
2957			endm  
# End of macro DMARK
2957					CALLMONITOR 
2957 cd aa fd			call debug_vector  
295a				endm  
# End of macro CALLMONITOR
295a				endif 
295a			 
295a				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
295a cd 4d 22			call macro_dsp_valuehl 
295d				endm 
# End of macro FORTH_DSP_VALUEHL
295d				 
295d				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
295d cd 05 23			call macro_forth_dsp_pop 
2960				endm 
# End of macro FORTH_DSP_POP
2960			 
2960				; init from TOS 
2960 45				ld b, l 
2961 21 23 f9			ld hl, cli_data_sp 
2964			.pkl: 
2964 2b				dec hl 
2965 2b				dec hl 
2966 2b				dec hl 
2967			 
2967 10 fb			djnz .pkl 
2969			 
2969				 
2969				; TODO do type check with correct push 
2969			 
2969 23				inc hl 
296a				;call loadwordinhl 
296a 5e				ld e, (hl) 
296b 23				inc hl 
296c 56				ld d, (hl) 
296d eb				ex de,hl 
296e cd 48 20			call forth_push_numhl 
2971			 
2971				NEXTW 
2971 c3 39 24			jp macro_next 
2974				endm 
# End of macro NEXTW
2974			.SWAP2: 
2974			CWHEAD .AT OPCODE_SWAP2 "2SWAP" 5 WORD_FLAG_CODE 
2974 1e				db WORD_SYS_CORE+OPCODE_SWAP2             
2975 f5 29			dw .AT            
2977 06				db 5 + 1 
2978 .. 00			db "2SWAP",0              
297e				endm 
# End of macro CWHEAD
297e			; | 2SWAP ( w1 w2 w3 w4 -- w3 w4 w1 w2 ) Swap top pair of items | TODO 
297e				if DEBUG_FORTH_WORDS_KEY 
297e					DMARK "2SW" 
297e f5				push af  
297f 3a 93 29			ld a, (.dmark)  
2982 32 a0 fd			ld (debug_mark),a  
2985 3a 94 29			ld a, (.dmark+1)  
2988 32 a1 fd			ld (debug_mark+1),a  
298b 3a 95 29			ld a, (.dmark+2)  
298e 32 a2 fd			ld (debug_mark+2),a  
2991 18 03			jr .pastdmark  
2993 ..			.dmark: db "2SW"  
2996 f1			.pastdmark: pop af  
2997			endm  
# End of macro DMARK
2997					CALLMONITOR 
2997 cd aa fd			call debug_vector  
299a				endm  
# End of macro CALLMONITOR
299a				endif 
299a			; TODO Use os stack swap memory 
299a			 
299a				FORTH_DSP_PTR 0     ; TOS    w4 
299a 2a 23 f9			ld hl,(cli_data_sp) 
299d 11 00 00			ld de, 0 * 3 
29a0 ed 52			sbc hl, de 
29a2				endm 
# End of macro FORTH_DSP_PTR
29a2 cd 85 23			call hltostack1 
29a5			  
29a5				FORTH_DSP_PTR 1     ; TOS    w3 
29a5 2a 23 f9			ld hl,(cli_data_sp) 
29a8 11 03 00			ld de, 1 * 3 
29ab ed 52			sbc hl, de 
29ad				endm 
# End of macro FORTH_DSP_PTR
29ad cd 8b 23			call hltostack2 
29b0			 
29b0			 
29b0			 
29b0				FORTH_DSP_PTR 2     ; TOS    w2 
29b0 2a 23 f9			ld hl,(cli_data_sp) 
29b3 11 06 00			ld de, 2 * 3 
29b6 ed 52			sbc hl, de 
29b8				endm 
# End of macro FORTH_DSP_PTR
29b8 cd 91 23			call hltostack3 
29bb			 
29bb				FORTH_DSP_PTR 3     ; TOS   w1 
29bb 2a 23 f9			ld hl,(cli_data_sp) 
29be 11 09 00			ld de, 3 * 3 
29c1 ed 52			sbc hl, de 
29c3				endm 
# End of macro FORTH_DSP_PTR
29c3 cd 97 23			call hltostack4 
29c6			 
29c6			 
29c6			 
29c6			 
29c6				FORTH_DSP_PTR 0     ; TOS 
29c6 2a 23 f9			ld hl,(cli_data_sp) 
29c9 11 00 00			ld de, 0 * 3 
29cc ed 52			sbc hl, de 
29ce				endm 
# End of macro FORTH_DSP_PTR
29ce cd a9 23			call hlfromstack3 
29d1			 
29d1				FORTH_DSP_PTR 1     ; TOS 
29d1 2a 23 f9			ld hl,(cli_data_sp) 
29d4 11 03 00			ld de, 1 * 3 
29d7 ed 52			sbc hl, de 
29d9				endm 
# End of macro FORTH_DSP_PTR
29d9 cd af 23			call hlfromstack4 
29dc			 
29dc			 
29dc			 
29dc				FORTH_DSP_PTR 2     ; TOS 
29dc 2a 23 f9			ld hl,(cli_data_sp) 
29df 11 06 00			ld de, 2 * 3 
29e2 ed 52			sbc hl, de 
29e4				endm 
# End of macro FORTH_DSP_PTR
29e4 cd 9d 23			call hlfromstack1 
29e7			 
29e7				FORTH_DSP_PTR 3     ; TOS 
29e7 2a 23 f9			ld hl,(cli_data_sp) 
29ea 11 09 00			ld de, 3 * 3 
29ed ed 52			sbc hl, de 
29ef				endm 
# End of macro FORTH_DSP_PTR
29ef cd a3 23			call hlfromstack2 
29f2			 
29f2				NEXTW 
29f2 c3 39 24			jp macro_next 
29f5				endm 
# End of macro NEXTW
29f5			.AT: 
29f5			CWHEAD .CAT OPCODE_AT "@" 1 WORD_FLAG_CODE 
29f5 1f				db WORD_SYS_CORE+OPCODE_AT             
29f6 27 2a			dw .CAT            
29f8 02				db 1 + 1 
29f9 .. 00			db "@",0              
29fb				endm 
# End of macro CWHEAD
29fb			; | @ ( w -- ) Push onto TOS byte stored at address   | DONE 
29fb			 
29fb				if DEBUG_FORTH_WORDS_KEY 
29fb					DMARK "AT." 
29fb f5				push af  
29fc 3a 10 2a			ld a, (.dmark)  
29ff 32 a0 fd			ld (debug_mark),a  
2a02 3a 11 2a			ld a, (.dmark+1)  
2a05 32 a1 fd			ld (debug_mark+1),a  
2a08 3a 12 2a			ld a, (.dmark+2)  
2a0b 32 a2 fd			ld (debug_mark+2),a  
2a0e 18 03			jr .pastdmark  
2a10 ..			.dmark: db "AT."  
2a13 f1			.pastdmark: pop af  
2a14			endm  
# End of macro DMARK
2a14					CALLMONITOR 
2a14 cd aa fd			call debug_vector  
2a17				endm  
# End of macro CALLMONITOR
2a17				endif 
2a17			.getbyteat:	 
2a17				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2a17 cd 4d 22			call macro_dsp_valuehl 
2a1a				endm 
# End of macro FORTH_DSP_VALUEHL
2a1a				 
2a1a			;		push hl 
2a1a			 
2a1a				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2a1a cd 05 23			call macro_forth_dsp_pop 
2a1d				endm 
# End of macro FORTH_DSP_POP
2a1d			 
2a1d			;		pop hl 
2a1d			 
2a1d 7e				ld a, (hl) 
2a1e			 
2a1e 6f				ld l, a 
2a1f 26 00			ld h, 0 
2a21 cd 48 20			call forth_push_numhl 
2a24			 
2a24				NEXTW 
2a24 c3 39 24			jp macro_next 
2a27				endm 
# End of macro NEXTW
2a27			.CAT: 
2a27			CWHEAD .BANG OPCODE_CAT "C@" 2 WORD_FLAG_CODE 
2a27 20				db WORD_SYS_CORE+OPCODE_CAT             
2a28 50 2a			dw .BANG            
2a2a 03				db 2 + 1 
2a2b .. 00			db "C@",0              
2a2e				endm 
# End of macro CWHEAD
2a2e			; | C@  ( w -- ) Push onto TOS byte stored at address   | DONE 
2a2e				if DEBUG_FORTH_WORDS_KEY 
2a2e					DMARK "CAA" 
2a2e f5				push af  
2a2f 3a 43 2a			ld a, (.dmark)  
2a32 32 a0 fd			ld (debug_mark),a  
2a35 3a 44 2a			ld a, (.dmark+1)  
2a38 32 a1 fd			ld (debug_mark+1),a  
2a3b 3a 45 2a			ld a, (.dmark+2)  
2a3e 32 a2 fd			ld (debug_mark+2),a  
2a41 18 03			jr .pastdmark  
2a43 ..			.dmark: db "CAA"  
2a46 f1			.pastdmark: pop af  
2a47			endm  
# End of macro DMARK
2a47					CALLMONITOR 
2a47 cd aa fd			call debug_vector  
2a4a				endm  
# End of macro CALLMONITOR
2a4a				endif 
2a4a c3 17 2a			jp .getbyteat 
2a4d				NEXTW 
2a4d c3 39 24			jp macro_next 
2a50				endm 
# End of macro NEXTW
2a50			.BANG: 
2a50			CWHEAD .CBANG OPCODE_BANG "!" 1 WORD_FLAG_CODE 
2a50 21				db WORD_SYS_CORE+OPCODE_BANG             
2a51 86 2a			dw .CBANG            
2a53 02				db 1 + 1 
2a54 .. 00			db "!",0              
2a56				endm 
# End of macro CWHEAD
2a56			; | ! ( x w -- ) Store x at address w      | DONE 
2a56				if DEBUG_FORTH_WORDS_KEY 
2a56					DMARK "BNG" 
2a56 f5				push af  
2a57 3a 6b 2a			ld a, (.dmark)  
2a5a 32 a0 fd			ld (debug_mark),a  
2a5d 3a 6c 2a			ld a, (.dmark+1)  
2a60 32 a1 fd			ld (debug_mark+1),a  
2a63 3a 6d 2a			ld a, (.dmark+2)  
2a66 32 a2 fd			ld (debug_mark+2),a  
2a69 18 03			jr .pastdmark  
2a6b ..			.dmark: db "BNG"  
2a6e f1			.pastdmark: pop af  
2a6f			endm  
# End of macro DMARK
2a6f					CALLMONITOR 
2a6f cd aa fd			call debug_vector  
2a72				endm  
# End of macro CALLMONITOR
2a72				endif 
2a72			 
2a72			.storebyteat:		 
2a72				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2a72 cd 4d 22			call macro_dsp_valuehl 
2a75				endm 
# End of macro FORTH_DSP_VALUEHL
2a75				 
2a75 e5				push hl 
2a76			 
2a76				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2a76 cd 05 23			call macro_forth_dsp_pop 
2a79				endm 
# End of macro FORTH_DSP_POP
2a79			 
2a79				; get byte to poke 
2a79			 
2a79				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2a79 cd 4d 22			call macro_dsp_valuehl 
2a7c				endm 
# End of macro FORTH_DSP_VALUEHL
2a7c e5				push hl 
2a7d			 
2a7d			 
2a7d				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2a7d cd 05 23			call macro_forth_dsp_pop 
2a80				endm 
# End of macro FORTH_DSP_POP
2a80			 
2a80			 
2a80 d1				pop de 
2a81 e1				pop hl 
2a82			 
2a82 73				ld (hl),e 
2a83			 
2a83			 
2a83				NEXTW 
2a83 c3 39 24			jp macro_next 
2a86				endm 
# End of macro NEXTW
2a86			.CBANG: 
2a86			CWHEAD .SCALL OPCODE_CBANG "C!" 2 WORD_FLAG_CODE 
2a86 22				db WORD_SYS_CORE+OPCODE_CBANG             
2a87 af 2a			dw .SCALL            
2a89 03				db 2 + 1 
2a8a .. 00			db "C!",0              
2a8d				endm 
# End of macro CWHEAD
2a8d			; | C!  ( x w -- ) Store x at address w  | DONE 
2a8d				if DEBUG_FORTH_WORDS_KEY 
2a8d					DMARK "CBA" 
2a8d f5				push af  
2a8e 3a a2 2a			ld a, (.dmark)  
2a91 32 a0 fd			ld (debug_mark),a  
2a94 3a a3 2a			ld a, (.dmark+1)  
2a97 32 a1 fd			ld (debug_mark+1),a  
2a9a 3a a4 2a			ld a, (.dmark+2)  
2a9d 32 a2 fd			ld (debug_mark+2),a  
2aa0 18 03			jr .pastdmark  
2aa2 ..			.dmark: db "CBA"  
2aa5 f1			.pastdmark: pop af  
2aa6			endm  
# End of macro DMARK
2aa6					CALLMONITOR 
2aa6 cd aa fd			call debug_vector  
2aa9				endm  
# End of macro CALLMONITOR
2aa9				endif 
2aa9 c3 72 2a			jp .storebyteat 
2aac				NEXTW 
2aac c3 39 24			jp macro_next 
2aaf				endm 
# End of macro NEXTW
2aaf			.SCALL: 
2aaf			CWHEAD .DEPTH OPCODE_SCALL "CALL" 4 WORD_FLAG_CODE 
2aaf 23				db WORD_SYS_CORE+OPCODE_SCALL             
2ab0 e3 2a			dw .DEPTH            
2ab2 05				db 4 + 1 
2ab3 .. 00			db "CALL",0              
2ab8				endm 
# End of macro CWHEAD
2ab8			; | CALL ( w -- w  ) machine code call to address w  push the result of hl to stack | DONE 
2ab8				if DEBUG_FORTH_WORDS_KEY 
2ab8					DMARK "CLL" 
2ab8 f5				push af  
2ab9 3a cd 2a			ld a, (.dmark)  
2abc 32 a0 fd			ld (debug_mark),a  
2abf 3a ce 2a			ld a, (.dmark+1)  
2ac2 32 a1 fd			ld (debug_mark+1),a  
2ac5 3a cf 2a			ld a, (.dmark+2)  
2ac8 32 a2 fd			ld (debug_mark+2),a  
2acb 18 03			jr .pastdmark  
2acd ..			.dmark: db "CLL"  
2ad0 f1			.pastdmark: pop af  
2ad1			endm  
# End of macro DMARK
2ad1					CALLMONITOR 
2ad1 cd aa fd			call debug_vector  
2ad4				endm  
# End of macro CALLMONITOR
2ad4				endif 
2ad4			 
2ad4				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2ad4 cd 4d 22			call macro_dsp_valuehl 
2ad7				endm 
# End of macro FORTH_DSP_VALUEHL
2ad7			 
2ad7			;		push hl 
2ad7			 
2ad7				; destroy value TOS 
2ad7			 
2ad7				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2ad7 cd 05 23			call macro_forth_dsp_pop 
2ada				endm 
# End of macro FORTH_DSP_POP
2ada			 
2ada					 
2ada			;		pop hl 
2ada			 
2ada				; how to do a call with hl???? save SP? 
2ada cd dd 23			call forth_call_hl 
2add			 
2add			 
2add				; TODO push value back onto stack for another op etc 
2add			 
2add cd 48 20			call forth_push_numhl 
2ae0				NEXTW 
2ae0 c3 39 24			jp macro_next 
2ae3				endm 
# End of macro NEXTW
2ae3			.DEPTH: 
2ae3			CWHEAD .OVER OPCODE_DEPTH "DEPTH" 5 WORD_FLAG_CODE 
2ae3 24				db WORD_SYS_CORE+OPCODE_DEPTH             
2ae4 20 2b			dw .OVER            
2ae6 06				db 5 + 1 
2ae7 .. 00			db "DEPTH",0              
2aed				endm 
# End of macro CWHEAD
2aed			; | DEPTH ( -- u ) Push count of stack | DONE 
2aed				; take current TOS and remove from base value div by two to get count 
2aed				if DEBUG_FORTH_WORDS_KEY 
2aed					DMARK "DEP" 
2aed f5				push af  
2aee 3a 02 2b			ld a, (.dmark)  
2af1 32 a0 fd			ld (debug_mark),a  
2af4 3a 03 2b			ld a, (.dmark+1)  
2af7 32 a1 fd			ld (debug_mark+1),a  
2afa 3a 04 2b			ld a, (.dmark+2)  
2afd 32 a2 fd			ld (debug_mark+2),a  
2b00 18 03			jr .pastdmark  
2b02 ..			.dmark: db "DEP"  
2b05 f1			.pastdmark: pop af  
2b06			endm  
# End of macro DMARK
2b06					CALLMONITOR 
2b06 cd aa fd			call debug_vector  
2b09				endm  
# End of macro CALLMONITOR
2b09				endif 
2b09			 
2b09			 
2b09 2a 23 f9		ld hl, (cli_data_sp) 
2b0c 11 5d f6		ld de, cli_data_stack 
2b0f ed 52		sbc hl,de 
2b11			 
2b11			; div by size of stack item 
2b11			 
2b11 5d			ld e,l 
2b12 0e 03		ld c, 3 
2b14 cd 6e 0f		call Div8 
2b17			 
2b17 6f			ld l,a 
2b18 26 00		ld h,0 
2b1a			 
2b1a			;srl h 
2b1a			;rr l 
2b1a			 
2b1a cd 48 20			call forth_push_numhl 
2b1d				NEXTW 
2b1d c3 39 24			jp macro_next 
2b20				endm 
# End of macro NEXTW
2b20			.OVER: 
2b20			CWHEAD .PAUSE 46 "OVER" 4 WORD_FLAG_CODE 
2b20 42				db WORD_SYS_CORE+46             
2b21 67 2b			dw .PAUSE            
2b23 05				db 4 + 1 
2b24 .. 00			db "OVER",0              
2b29				endm 
# End of macro CWHEAD
2b29			; | OVER ( n1 n2 -- n1 n2 n1 )  Copy one below TOS onto TOS | TOFIX 
2b29				if DEBUG_FORTH_WORDS_KEY 
2b29					DMARK "OVR" 
2b29 f5				push af  
2b2a 3a 3e 2b			ld a, (.dmark)  
2b2d 32 a0 fd			ld (debug_mark),a  
2b30 3a 3f 2b			ld a, (.dmark+1)  
2b33 32 a1 fd			ld (debug_mark+1),a  
2b36 3a 40 2b			ld a, (.dmark+2)  
2b39 32 a2 fd			ld (debug_mark+2),a  
2b3c 18 03			jr .pastdmark  
2b3e ..			.dmark: db "OVR"  
2b41 f1			.pastdmark: pop af  
2b42			endm  
# End of macro DMARK
2b42					CALLMONITOR 
2b42 cd aa fd			call debug_vector  
2b45				endm  
# End of macro CALLMONITOR
2b45				endif 
2b45			 
2b45			; TODO Use os stack swap memory 
2b45			 
2b45				; work out what type we are looking at 
2b45			 
2b45				FORTH_DSP_PTR 1 
2b45 2a 23 f9			ld hl,(cli_data_sp) 
2b48 11 03 00			ld de, 1 * 3 
2b4b ed 52			sbc hl, de 
2b4d				endm 
# End of macro FORTH_DSP_PTR
2b4d			 
2b4d 7e				ld a, (hl) 
2b4e				 
2b4e f5				push af 
2b4f				; whatever the type lets get the pointer or word 
2b4f 23				inc hl 
2b50			;; 
2b50			 
2b50				; type check now to decide on how to push  
2b50			 
2b50 cd bb 23			call loadwordinhl 
2b53 f1				pop af 
2b54 fe 01			cp DS_TYPE_STR 
2b56 28 06			jr z, .ovstr 
2b58			 
2b58				; we have a numeric so load the word and push 
2b58			;	ld e, (hl) 
2b58			;	inc hl 
2b58			;	ld d, (hl) 
2b58			;	ex de, hl 
2b58 cd 48 20			call forth_push_numhl 
2b5b				NEXTW 
2b5b c3 39 24			jp macro_next 
2b5e				endm 
# End of macro NEXTW
2b5e			 
2b5e			.ovstr: 
2b5e				; ok, a string so get the pointer and push as a string 
2b5e			 
2b5e			;	call loadwordinhl 
2b5e cd b6 20			call forth_push_str 
2b61				NEXTW 
2b61 c3 39 24			jp macro_next 
2b64				endm 
# End of macro NEXTW
2b64			 
2b64			;	FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2b64			;	push hl    ; n2 
2b64			;	FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2b64			; 
2b64			;	FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2b64			;	push hl    ; n1 
2b64			;	FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2b64			; 
2b64			;	pop de     ; n1 
2b64			;	pop hl     ; n2 
2b64			; 
2b64			;	push de 
2b64			;	push hl 
2b64			;	push de 
2b64			 
2b64				; push back  
2b64			 
2b64			;	pop hl 
2b64			;	call forth_push_numhl 
2b64			;	pop hl 
2b64			;	call forth_push_numhl 
2b64			;	pop hl 
2b64			;	call forth_push_numhl 
2b64				NEXTW 
2b64 c3 39 24			jp macro_next 
2b67				endm 
# End of macro NEXTW
2b67			 
2b67			.PAUSE: 
2b67			CWHEAD .PAUSES 47 "PAUSEMS" 7 WORD_FLAG_CODE 
2b67 43				db WORD_SYS_CORE+47             
2b68 9c 2b			dw .PAUSES            
2b6a 08				db 7 + 1 
2b6b .. 00			db "PAUSEMS",0              
2b73				endm 
# End of macro CWHEAD
2b73			; | PAUSEMS ( n -- )  Pause for n millisconds | DONE 
2b73				if DEBUG_FORTH_WORDS_KEY 
2b73					DMARK "PMS" 
2b73 f5				push af  
2b74 3a 88 2b			ld a, (.dmark)  
2b77 32 a0 fd			ld (debug_mark),a  
2b7a 3a 89 2b			ld a, (.dmark+1)  
2b7d 32 a1 fd			ld (debug_mark+1),a  
2b80 3a 8a 2b			ld a, (.dmark+2)  
2b83 32 a2 fd			ld (debug_mark+2),a  
2b86 18 03			jr .pastdmark  
2b88 ..			.dmark: db "PMS"  
2b8b f1			.pastdmark: pop af  
2b8c			endm  
# End of macro DMARK
2b8c					CALLMONITOR 
2b8c cd aa fd			call debug_vector  
2b8f				endm  
# End of macro CALLMONITOR
2b8f				endif 
2b8f				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2b8f cd 4d 22			call macro_dsp_valuehl 
2b92				endm 
# End of macro FORTH_DSP_VALUEHL
2b92			;		push hl    ; n2 
2b92				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2b92 cd 05 23			call macro_forth_dsp_pop 
2b95				endm 
# End of macro FORTH_DSP_POP
2b95			;		pop hl 
2b95			 
2b95 7d				ld a, l 
2b96 cd d2 0c			call aDelayInMS 
2b99			       NEXTW 
2b99 c3 39 24			jp macro_next 
2b9c				endm 
# End of macro NEXTW
2b9c			.PAUSES:  
2b9c			CWHEAD .ROT 48 "PAUSE" 5 WORD_FLAG_CODE 
2b9c 44				db WORD_SYS_CORE+48             
2b9d 0b 2c			dw .ROT            
2b9f 06				db 5 + 1 
2ba0 .. 00			db "PAUSE",0              
2ba6				endm 
# End of macro CWHEAD
2ba6			; | PAUSE ( n -- )  Pause for n seconds | DONE 
2ba6				if DEBUG_FORTH_WORDS_KEY 
2ba6					DMARK "PAU" 
2ba6 f5				push af  
2ba7 3a bb 2b			ld a, (.dmark)  
2baa 32 a0 fd			ld (debug_mark),a  
2bad 3a bc 2b			ld a, (.dmark+1)  
2bb0 32 a1 fd			ld (debug_mark+1),a  
2bb3 3a bd 2b			ld a, (.dmark+2)  
2bb6 32 a2 fd			ld (debug_mark+2),a  
2bb9 18 03			jr .pastdmark  
2bbb ..			.dmark: db "PAU"  
2bbe f1			.pastdmark: pop af  
2bbf			endm  
# End of macro DMARK
2bbf					CALLMONITOR 
2bbf cd aa fd			call debug_vector  
2bc2				endm  
# End of macro CALLMONITOR
2bc2				endif 
2bc2				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2bc2 cd 4d 22			call macro_dsp_valuehl 
2bc5				endm 
# End of macro FORTH_DSP_VALUEHL
2bc5			;		push hl    ; n2 
2bc5				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2bc5 cd 05 23			call macro_forth_dsp_pop 
2bc8				endm 
# End of macro FORTH_DSP_POP
2bc8			;		pop hl 
2bc8 45				ld b, l 
2bc9				if DEBUG_FORTH_WORDS 
2bc9					DMARK "PAU" 
2bc9 f5				push af  
2bca 3a de 2b			ld a, (.dmark)  
2bcd 32 a0 fd			ld (debug_mark),a  
2bd0 3a df 2b			ld a, (.dmark+1)  
2bd3 32 a1 fd			ld (debug_mark+1),a  
2bd6 3a e0 2b			ld a, (.dmark+2)  
2bd9 32 a2 fd			ld (debug_mark+2),a  
2bdc 18 03			jr .pastdmark  
2bde ..			.dmark: db "PAU"  
2be1 f1			.pastdmark: pop af  
2be2			endm  
# End of macro DMARK
2be2					CALLMONITOR 
2be2 cd aa fd			call debug_vector  
2be5				endm  
# End of macro CALLMONITOR
2be5				endif 
2be5 c5			.pauses1:	push bc 
2be6 cd ed 0c			call delay1s 
2be9 c1				pop bc 
2bea				if DEBUG_FORTH_WORDS 
2bea					DMARK "PA1" 
2bea f5				push af  
2beb 3a ff 2b			ld a, (.dmark)  
2bee 32 a0 fd			ld (debug_mark),a  
2bf1 3a 00 2c			ld a, (.dmark+1)  
2bf4 32 a1 fd			ld (debug_mark+1),a  
2bf7 3a 01 2c			ld a, (.dmark+2)  
2bfa 32 a2 fd			ld (debug_mark+2),a  
2bfd 18 03			jr .pastdmark  
2bff ..			.dmark: db "PA1"  
2c02 f1			.pastdmark: pop af  
2c03			endm  
# End of macro DMARK
2c03					CALLMONITOR 
2c03 cd aa fd			call debug_vector  
2c06				endm  
# End of macro CALLMONITOR
2c06				endif 
2c06 10 dd			djnz .pauses1 
2c08			 
2c08			       NEXTW 
2c08 c3 39 24			jp macro_next 
2c0b				endm 
# End of macro NEXTW
2c0b			.ROT: 
2c0b			CWHEAD .UWORDS 49 "ROT" 3 WORD_FLAG_CODE 
2c0b 45				db WORD_SYS_CORE+49             
2c0c 74 2c			dw .UWORDS            
2c0e 04				db 3 + 1 
2c0f .. 00			db "ROT",0              
2c13				endm 
# End of macro CWHEAD
2c13			; | ROT ( u1 u2 u3 -- u2 u3 u1 ) Rotate top three items on stack | TOFIX 
2c13				if DEBUG_FORTH_WORDS_KEY 
2c13					DMARK "ROT" 
2c13 f5				push af  
2c14 3a 28 2c			ld a, (.dmark)  
2c17 32 a0 fd			ld (debug_mark),a  
2c1a 3a 29 2c			ld a, (.dmark+1)  
2c1d 32 a1 fd			ld (debug_mark+1),a  
2c20 3a 2a 2c			ld a, (.dmark+2)  
2c23 32 a2 fd			ld (debug_mark+2),a  
2c26 18 03			jr .pastdmark  
2c28 ..			.dmark: db "ROT"  
2c2b f1			.pastdmark: pop af  
2c2c			endm  
# End of macro DMARK
2c2c					CALLMONITOR 
2c2c cd aa fd			call debug_vector  
2c2f				endm  
# End of macro CALLMONITOR
2c2f				endif 
2c2f			 
2c2f			; DONE Use os stack swap memory 
2c2f			 
2c2f				FORTH_DSP_PTR 0     ; u3 
2c2f 2a 23 f9			ld hl,(cli_data_sp) 
2c32 11 00 00			ld de, 0 * 3 
2c35 ed 52			sbc hl, de 
2c37				endm 
# End of macro FORTH_DSP_PTR
2c37 cd 85 23			call hltostack1     
2c3a			  
2c3a				FORTH_DSP_PTR 1     ; u2 
2c3a 2a 23 f9			ld hl,(cli_data_sp) 
2c3d 11 03 00			ld de, 1 * 3 
2c40 ed 52			sbc hl, de 
2c42				endm 
# End of macro FORTH_DSP_PTR
2c42 cd 8b 23			call hltostack2      
2c45			 
2c45				FORTH_DSP_PTR 2     ; u1 
2c45 2a 23 f9			ld hl,(cli_data_sp) 
2c48 11 06 00			ld de, 2 * 3 
2c4b ed 52			sbc hl, de 
2c4d				endm 
# End of macro FORTH_DSP_PTR
2c4d cd 91 23			call hltostack3 
2c50			 
2c50			 
2c50				FORTH_DSP_PTR 0     ;  
2c50 2a 23 f9			ld hl,(cli_data_sp) 
2c53 11 00 00			ld de, 0 * 3 
2c56 ed 52			sbc hl, de 
2c58				endm 
# End of macro FORTH_DSP_PTR
2c58 cd a9 23			call hlfromstack3 
2c5b			 
2c5b				FORTH_DSP_PTR 1     ; TOS 
2c5b 2a 23 f9			ld hl,(cli_data_sp) 
2c5e 11 03 00			ld de, 1 * 3 
2c61 ed 52			sbc hl, de 
2c63				endm 
# End of macro FORTH_DSP_PTR
2c63 cd 9d 23			call hlfromstack1 
2c66			 
2c66				FORTH_DSP_PTR 2     ; TOS 
2c66 2a 23 f9			ld hl,(cli_data_sp) 
2c69 11 06 00			ld de, 2 * 3 
2c6c ed 52			sbc hl, de 
2c6e				endm 
# End of macro FORTH_DSP_PTR
2c6e cd a3 23			call hlfromstack2 
2c71			 
2c71			 
2c71			;	FORTH_DSP_VALUEHL 
2c71			;	push hl    ; u3  
2c71			; 
2c71			;	FORTH_DSP_POP 
2c71			; 
2c71			;	FORTH_DSP_VALUEHL 
2c71			;	push hl     ; u2 
2c71			; 
2c71			;	FORTH_DSP_POP 
2c71			; 
2c71			;	FORTH_DSP_VALUEHL 
2c71			;	push hl     ; u1 
2c71			; 
2c71			;	FORTH_DSP_POP 
2c71			; 
2c71			;	pop bc      ; u1 
2c71			;	pop hl      ; u2 
2c71			;	pop de      ; u3 
2c71			; 
2c71			; 
2c71			;	push bc 
2c71			;	push de 
2c71			;	push hl 
2c71			; 
2c71			; 
2c71			;	pop hl 
2c71			;	call forth_push_numhl 
2c71			; 
2c71			;	pop hl 
2c71			;	call forth_push_numhl 
2c71			; 
2c71			;	pop hl 
2c71			;	call forth_push_numhl 
2c71				 
2c71			 
2c71			 
2c71			 
2c71			 
2c71			 
2c71			       NEXTW 
2c71 c3 39 24			jp macro_next 
2c74				endm 
# End of macro NEXTW
2c74			 
2c74			.UWORDS: 
2c74			CWHEAD .BP 60 "UWORDS" 6 WORD_FLAG_CODE 
2c74 50				db WORD_SYS_CORE+60             
2c75 36 2d			dw .BP            
2c77 07				db 6 + 1 
2c78 .. 00			db "UWORDS",0              
2c7f				endm 
# End of macro CWHEAD
2c7f			; | UWORDS (  -- s1 ... sn u )   List user word dict | DONE 
2c7f			; | | After use the TOS will have a count of the number of user words that have been pushed to stack. 
2c7f			; | | Following the count are the individual words. 
2c7f			; | | 
2c7f			; | | e.g. UWORDS 
2c7f			; | | BOX DIRLIST 2 
2c7f			; | |  
2c7f			; | | Can be used to save the words to storage via: 
2c7f			; | | UWORDS $01 DO $01 APPEND LOOP 
2c7f			if DEBUG_FORTH_WORDS_KEY 
2c7f				DMARK "UWR" 
2c7f f5				push af  
2c80 3a 94 2c			ld a, (.dmark)  
2c83 32 a0 fd			ld (debug_mark),a  
2c86 3a 95 2c			ld a, (.dmark+1)  
2c89 32 a1 fd			ld (debug_mark+1),a  
2c8c 3a 96 2c			ld a, (.dmark+2)  
2c8f 32 a2 fd			ld (debug_mark+2),a  
2c92 18 03			jr .pastdmark  
2c94 ..			.dmark: db "UWR"  
2c97 f1			.pastdmark: pop af  
2c98			endm  
# End of macro DMARK
2c98				CALLMONITOR 
2c98 cd aa fd			call debug_vector  
2c9b				endm  
# End of macro CALLMONITOR
2c9b			endif 
2c9b 21 00 80			ld hl, baseram 
2c9e				;ld hl, baseusermem 
2c9e 01 00 00			ld bc, 0    ; start a counter 
2ca1			 
2ca1			; skip dict stub 
2ca1			 
2ca1 cd 76 25			call forth_tok_next 
2ca4			 
2ca4			 
2ca4			; while we have words to look for 
2ca4			 
2ca4 7e			.douscan:	ld a, (hl)      
2ca5			if DEBUG_FORTH_WORDS 
2ca5				DMARK "UWs" 
2ca5 f5				push af  
2ca6 3a ba 2c			ld a, (.dmark)  
2ca9 32 a0 fd			ld (debug_mark),a  
2cac 3a bb 2c			ld a, (.dmark+1)  
2caf 32 a1 fd			ld (debug_mark+1),a  
2cb2 3a bc 2c			ld a, (.dmark+2)  
2cb5 32 a2 fd			ld (debug_mark+2),a  
2cb8 18 03			jr .pastdmark  
2cba ..			.dmark: db "UWs"  
2cbd f1			.pastdmark: pop af  
2cbe			endm  
# End of macro DMARK
2cbe				CALLMONITOR 
2cbe cd aa fd			call debug_vector  
2cc1				endm  
# End of macro CALLMONITOR
2cc1			endif 
2cc1 fe 00			cp WORD_SYS_END 
2cc3 28 4d			jr z, .udone 
2cc5 fe 01			cp WORD_SYS_UWORD 
2cc7 20 44			jr nz, .nuword 
2cc9			 
2cc9			if DEBUG_FORTH_WORDS 
2cc9				DMARK "UWu" 
2cc9 f5				push af  
2cca 3a de 2c			ld a, (.dmark)  
2ccd 32 a0 fd			ld (debug_mark),a  
2cd0 3a df 2c			ld a, (.dmark+1)  
2cd3 32 a1 fd			ld (debug_mark+1),a  
2cd6 3a e0 2c			ld a, (.dmark+2)  
2cd9 32 a2 fd			ld (debug_mark+2),a  
2cdc 18 03			jr .pastdmark  
2cde ..			.dmark: db "UWu"  
2ce1 f1			.pastdmark: pop af  
2ce2			endm  
# End of macro DMARK
2ce2				CALLMONITOR 
2ce2 cd aa fd			call debug_vector  
2ce5				endm  
# End of macro CALLMONITOR
2ce5			endif 
2ce5				; we have a uword so push its name to the stack 
2ce5			 
2ce5 e5				push hl  ; save so we can move to next dict block 
2ce6			 
2ce6				; skip opcode 
2ce6 23				inc hl  
2ce7				; skip next ptr 
2ce7 23				inc hl  
2ce8 23				inc hl 
2ce9				; skip len 
2ce9 23				inc hl 
2cea			if DEBUG_FORTH_WORDS 
2cea				DMARK "UWt" 
2cea f5				push af  
2ceb 3a ff 2c			ld a, (.dmark)  
2cee 32 a0 fd			ld (debug_mark),a  
2cf1 3a 00 2d			ld a, (.dmark+1)  
2cf4 32 a1 fd			ld (debug_mark+1),a  
2cf7 3a 01 2d			ld a, (.dmark+2)  
2cfa 32 a2 fd			ld (debug_mark+2),a  
2cfd 18 03			jr .pastdmark  
2cff ..			.dmark: db "UWt"  
2d02 f1			.pastdmark: pop af  
2d03			endm  
# End of macro DMARK
2d03				CALLMONITOR 
2d03 cd aa fd			call debug_vector  
2d06				endm  
# End of macro CALLMONITOR
2d06			endif 
2d06 03				inc bc 
2d07			 
2d07 c5				push bc 
2d08 cd b6 20			call forth_push_str 
2d0b c1				pop bc 
2d0c			 
2d0c e1				pop hl 	 
2d0d			 
2d0d cd 76 25		.nuword:	call forth_tok_next 
2d10 18 92			jr .douscan  
2d12			 
2d12			.udone:		 ; push count of uwords found 
2d12 c5				push bc 
2d13 e1				pop hl 
2d14			 
2d14			if DEBUG_FORTH_WORDS 
2d14				DMARK "UWc" 
2d14 f5				push af  
2d15 3a 29 2d			ld a, (.dmark)  
2d18 32 a0 fd			ld (debug_mark),a  
2d1b 3a 2a 2d			ld a, (.dmark+1)  
2d1e 32 a1 fd			ld (debug_mark+1),a  
2d21 3a 2b 2d			ld a, (.dmark+2)  
2d24 32 a2 fd			ld (debug_mark+2),a  
2d27 18 03			jr .pastdmark  
2d29 ..			.dmark: db "UWc"  
2d2c f1			.pastdmark: pop af  
2d2d			endm  
# End of macro DMARK
2d2d				CALLMONITOR 
2d2d cd aa fd			call debug_vector  
2d30				endm  
# End of macro CALLMONITOR
2d30			endif 
2d30 cd 48 20			call forth_push_numhl 
2d33			 
2d33			 
2d33			       NEXTW 
2d33 c3 39 24			jp macro_next 
2d36				endm 
# End of macro NEXTW
2d36			 
2d36			.BP: 
2d36			CWHEAD .MONITOR 64 "BP" 2 WORD_FLAG_CODE 
2d36 54				db WORD_SYS_CORE+64             
2d37 70 2d			dw .MONITOR            
2d39 03				db 2 + 1 
2d3a .. 00			db "BP",0              
2d3d				endm 
# End of macro CWHEAD
2d3d			; | BP ( u1 -- ) Enable or disable break point monitoring | DONE 
2d3d			; | | $00 Will enable the break points within specific code paths 
2d3d			; | | $01 Will disable break points 
2d3d			; | |  
2d3d			; | | By default break points are off. Either the above can be used to enable them 
2d3d			; | | or if a key is held down during start up the spashscreen will appear to freeze 
2d3d			; | | and on release of the pressed key the CONFIG menu will be displayed where you 
2d3d			; | | can disable break points. Exiting will then continue boot process. 
2d3d				; get byte count 
2d3d				if DEBUG_FORTH_WORDS_KEY 
2d3d					DMARK "BP." 
2d3d f5				push af  
2d3e 3a 52 2d			ld a, (.dmark)  
2d41 32 a0 fd			ld (debug_mark),a  
2d44 3a 53 2d			ld a, (.dmark+1)  
2d47 32 a1 fd			ld (debug_mark+1),a  
2d4a 3a 54 2d			ld a, (.dmark+2)  
2d4d 32 a2 fd			ld (debug_mark+2),a  
2d50 18 03			jr .pastdmark  
2d52 ..			.dmark: db "BP."  
2d55 f1			.pastdmark: pop af  
2d56			endm  
# End of macro DMARK
2d56					CALLMONITOR 
2d56 cd aa fd			call debug_vector  
2d59				endm  
# End of macro CALLMONITOR
2d59				endif 
2d59			 
2d59				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2d59 cd 4d 22			call macro_dsp_valuehl 
2d5c				endm 
# End of macro FORTH_DSP_VALUEHL
2d5c			 
2d5c			;		push hl 
2d5c			 
2d5c				; destroy value TOS 
2d5c			 
2d5c				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2d5c cd 05 23			call macro_forth_dsp_pop 
2d5f				endm 
# End of macro FORTH_DSP_POP
2d5f			 
2d5f			;		pop hl 
2d5f			 
2d5f 3e 00			ld a,0 
2d61 bd				cp l 
2d62 28 06			jr z, .bpset 
2d64			;		ld a, '*' 
2d64 cd 55 19			call bp_off 
2d67				NEXTW 
2d67 c3 39 24			jp macro_next 
2d6a				endm 
# End of macro NEXTW
2d6a			 
2d6a			.bpset:	 
2d6a				;	ld (os_view_disable), a 
2d6a cd 49 19			call bp_on 
2d6d			 
2d6d			 
2d6d				NEXTW 
2d6d c3 39 24			jp macro_next 
2d70				endm 
# End of macro NEXTW
2d70			 
2d70			 
2d70			.MONITOR: 
2d70			CWHEAD .MALLOC 65 "MONITOR" 7 WORD_FLAG_CODE 
2d70 55				db WORD_SYS_CORE+65             
2d71 a1 2d			dw .MALLOC            
2d73 08				db 7 + 1 
2d74 .. 00			db "MONITOR",0              
2d7c				endm 
# End of macro CWHEAD
2d7c			; | MONITOR ( -- ) Display system breakpoint/monitor | DONE 
2d7c			; | | At start the current various registers will be displayed with contents. 
2d7c			; | | Top right corner will show the most recent debug marker seen. 
2d7c			; | | The bottom of the screen will also show the values of the data stack pointer (DSP) 
2d7c			; | | and the return stack pointer (RSP). 
2d7c			; | | Pressing: 
2d7c			; | |    1 - Initial screen 
2d7c			; | |    2 - Display a data dump of HL 
2d7c			; | |    3 - Display a data dump of DE 
2d7c			; | |    4 - Display a data dump of BC 
2d7c			; | |    5 - Display a data dump of HL 
2d7c			; | |    6 - Display a data dump of DSP 
2d7c			; | |    7 - Display a data dump of RSP 
2d7c			; | |    8 - Display a data dump of what is at DSP 
2d7c			; | |    9 - Display a data dump of what is at RSP 
2d7c			; | |    0 - Exit monitor and continue running. This will also enable break points 
2d7c			; | |    * - Disable break points 
2d7c			; | |    # - Enter traditional monitor mode 
2d7c			; | | 
2d7c			; | | Monitor Mode 
2d7c			; | | ------------ 
2d7c			; | | A prompt of '>' will be shown for various commands: 
2d7c			; | |    D xxxx - Display a data dump starting from hex address xxxx 
2d7c			; | |    C - Continue display a data dump from the last set address 
2d7c			; | |    M xxxx - Set start of memory edit at address xx 
2d7c			; | |    U xx - Poke the hex byte xx into the address set by M and increment the address to the next location 
2d7c			; | |    G xxxx - Exec code at specific address 
2d7c			; | |    Q - Return to previous 
2d7c				if DEBUG_FORTH_WORDS_KEY 
2d7c					DMARK "MON" 
2d7c f5				push af  
2d7d 3a 91 2d			ld a, (.dmark)  
2d80 32 a0 fd			ld (debug_mark),a  
2d83 3a 92 2d			ld a, (.dmark+1)  
2d86 32 a1 fd			ld (debug_mark+1),a  
2d89 3a 93 2d			ld a, (.dmark+2)  
2d8c 32 a2 fd			ld (debug_mark+2),a  
2d8f 18 03			jr .pastdmark  
2d91 ..			.dmark: db "MON"  
2d94 f1			.pastdmark: pop af  
2d95			endm  
# End of macro DMARK
2d95					CALLMONITOR 
2d95 cd aa fd			call debug_vector  
2d98				endm  
# End of macro CALLMONITOR
2d98				endif 
2d98			;		ld a, 0 
2d98			;		ld (os_view_disable), a 
2d98 cd 49 19			call bp_on 
2d9b			 
2d9b				CALLMONITOR 
2d9b cd aa fd			call debug_vector  
2d9e				endm  
# End of macro CALLMONITOR
2d9e			 
2d9e			;	call monitor 
2d9e			 
2d9e				NEXTW 
2d9e c3 39 24			jp macro_next 
2da1				endm 
# End of macro NEXTW
2da1			 
2da1			 
2da1			.MALLOC: 
2da1			CWHEAD .MALLOC2 66 "ALLOT" 5 WORD_FLAG_CODE 
2da1 56				db WORD_SYS_CORE+66             
2da2 ca 2d			dw .MALLOC2            
2da4 06				db 5 + 1 
2da5 .. 00			db "ALLOT",0              
2dab				endm 
# End of macro CWHEAD
2dab			; | ALLOT ( u -- u ) Allocate u bytes of memory space and push the pointer TOS  | DONE 
2dab				if DEBUG_FORTH_WORDS_KEY 
2dab					DMARK "ALL" 
2dab f5				push af  
2dac 3a c0 2d			ld a, (.dmark)  
2daf 32 a0 fd			ld (debug_mark),a  
2db2 3a c1 2d			ld a, (.dmark+1)  
2db5 32 a1 fd			ld (debug_mark+1),a  
2db8 3a c2 2d			ld a, (.dmark+2)  
2dbb 32 a2 fd			ld (debug_mark+2),a  
2dbe 18 03			jr .pastdmark  
2dc0 ..			.dmark: db "ALL"  
2dc3 f1			.pastdmark: pop af  
2dc4			endm  
# End of macro DMARK
2dc4					CALLMONITOR 
2dc4 cd aa fd			call debug_vector  
2dc7				endm  
# End of macro CALLMONITOR
2dc7				endif 
2dc7 c3 f1 2d			jp .mallocc 
2dca			.MALLOC2: 
2dca			CWHEAD .FREE 66 "MALLOC" 6 WORD_FLAG_CODE 
2dca 56				db WORD_SYS_CORE+66             
2dcb 08 2e			dw .FREE            
2dcd 07				db 6 + 1 
2dce .. 00			db "MALLOC",0              
2dd5				endm 
# End of macro CWHEAD
2dd5			; | MALLOC ( u -- u ) Allocate u bytes of memory space and push the pointer TOS  | DONE 
2dd5				; get byte count 
2dd5				if DEBUG_FORTH_WORDS_KEY 
2dd5					DMARK "MAL" 
2dd5 f5				push af  
2dd6 3a ea 2d			ld a, (.dmark)  
2dd9 32 a0 fd			ld (debug_mark),a  
2ddc 3a eb 2d			ld a, (.dmark+1)  
2ddf 32 a1 fd			ld (debug_mark+1),a  
2de2 3a ec 2d			ld a, (.dmark+2)  
2de5 32 a2 fd			ld (debug_mark+2),a  
2de8 18 03			jr .pastdmark  
2dea ..			.dmark: db "MAL"  
2ded f1			.pastdmark: pop af  
2dee			endm  
# End of macro DMARK
2dee					CALLMONITOR 
2dee cd aa fd			call debug_vector  
2df1				endm  
# End of macro CALLMONITOR
2df1				endif 
2df1			.mallocc: 
2df1				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2df1 cd 4d 22			call macro_dsp_valuehl 
2df4				endm 
# End of macro FORTH_DSP_VALUEHL
2df4			 
2df4			;		push hl 
2df4			 
2df4				; destroy value TOS 
2df4			 
2df4				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2df4 cd 05 23			call macro_forth_dsp_pop 
2df7				endm 
# End of macro FORTH_DSP_POP
2df7			 
2df7			;		pop hl 
2df7 cd b9 13			call malloc 
2dfa			if DEBUG_FORTH_MALLOC_GUARD 
2dfa f5				push af 
2dfb cd 07 10			call ishlzero 
2dfe			;		ld a, l 
2dfe			;		add h 
2dfe			;		cp 0 
2dfe f1				pop af 
2dff				 
2dff cc 75 60			call z,malloc_error 
2e02			endif 
2e02			 
2e02 cd 48 20			call forth_push_numhl 
2e05				NEXTW 
2e05 c3 39 24			jp macro_next 
2e08				endm 
# End of macro NEXTW
2e08			 
2e08			.FREE: 
2e08			CWHEAD .LIST 67 "FREE" 4 WORD_FLAG_CODE 
2e08 57				db WORD_SYS_CORE+67             
2e09 39 2e			dw .LIST            
2e0b 05				db 4 + 1 
2e0c .. 00			db "FREE",0              
2e11				endm 
# End of macro CWHEAD
2e11			; | FREE ( u --  ) Free memory block from malloc given u address  | DONE 
2e11				if DEBUG_FORTH_WORDS_KEY 
2e11					DMARK "FRE" 
2e11 f5				push af  
2e12 3a 26 2e			ld a, (.dmark)  
2e15 32 a0 fd			ld (debug_mark),a  
2e18 3a 27 2e			ld a, (.dmark+1)  
2e1b 32 a1 fd			ld (debug_mark+1),a  
2e1e 3a 28 2e			ld a, (.dmark+2)  
2e21 32 a2 fd			ld (debug_mark+2),a  
2e24 18 03			jr .pastdmark  
2e26 ..			.dmark: db "FRE"  
2e29 f1			.pastdmark: pop af  
2e2a			endm  
# End of macro DMARK
2e2a					CALLMONITOR 
2e2a cd aa fd			call debug_vector  
2e2d				endm  
# End of macro CALLMONITOR
2e2d				endif 
2e2d				; get address 
2e2d			 
2e2d				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2e2d cd 4d 22			call macro_dsp_valuehl 
2e30				endm 
# End of macro FORTH_DSP_VALUEHL
2e30			 
2e30			;		push hl 
2e30			 
2e30				; destroy value TOS 
2e30			 
2e30				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2e30 cd 05 23			call macro_forth_dsp_pop 
2e33				endm 
# End of macro FORTH_DSP_POP
2e33			 
2e33			;		pop hl 
2e33			if FORTH_ENABLE_MALLOCFREE 
2e33 cd 83 14			call free 
2e36			endif 
2e36				NEXTW 
2e36 c3 39 24			jp macro_next 
2e39				endm 
# End of macro NEXTW
2e39			.LIST: 
2e39			CWHEAD .FORGET 72 "LIST" 4 WORD_FLAG_CODE 
2e39 5c				db WORD_SYS_CORE+72             
2e3a 35 30			dw .FORGET            
2e3c 05				db 4 + 1 
2e3d .. 00			db "LIST",0              
2e42				endm 
# End of macro CWHEAD
2e42			; | LIST ( uword -- u )    List the code to the word that is quoted (so as not to exec) on TOS | DONE 
2e42			; | | The quoted word must be in upper case. 
2e42			if DEBUG_FORTH_WORDS_KEY 
2e42				DMARK "LST" 
2e42 f5				push af  
2e43 3a 57 2e			ld a, (.dmark)  
2e46 32 a0 fd			ld (debug_mark),a  
2e49 3a 58 2e			ld a, (.dmark+1)  
2e4c 32 a1 fd			ld (debug_mark+1),a  
2e4f 3a 59 2e			ld a, (.dmark+2)  
2e52 32 a2 fd			ld (debug_mark+2),a  
2e55 18 03			jr .pastdmark  
2e57 ..			.dmark: db "LST"  
2e5a f1			.pastdmark: pop af  
2e5b			endm  
# End of macro DMARK
2e5b				CALLMONITOR 
2e5b cd aa fd			call debug_vector  
2e5e				endm  
# End of macro CALLMONITOR
2e5e			endif 
2e5e			 
2e5e				FORTH_DSP_VALUEHL 
2e5e cd 4d 22			call macro_dsp_valuehl 
2e61				endm 
# End of macro FORTH_DSP_VALUEHL
2e61			 
2e61 e5				push hl 
2e62				FORTH_DSP_POP 
2e62 cd 05 23			call macro_forth_dsp_pop 
2e65				endm 
# End of macro FORTH_DSP_POP
2e65 c1				pop bc 
2e66			 
2e66			; Start format of scratch string 
2e66			 
2e66 21 f6 f0			ld hl, scratch 
2e69			 
2e69 3e 3a			ld a, ':' 
2e6b 77				ld (hl),a 
2e6c 23				inc hl 
2e6d 3e 20			ld a, ' ' 
2e6f 77				ld (hl), a 
2e70			 
2e70				; Get ptr to the word we need to look up 
2e70			 
2e70			;		FORTH_DSP_VALUEHL 
2e70				;v5 FORTH_DSP_VALUE 
2e70			; TODO type check 
2e70			;		inc hl    ; Skip type check  
2e70			;		push hl 
2e70			;		ex de, hl    ; put into DE 
2e70			 
2e70			 
2e70 21 00 80			ld hl, baseram 
2e73				;ld hl, baseusermem 
2e73			 
2e73 e5			push hl   ; sacreifical push 
2e74			 
2e74			.ldouscanm: 
2e74 e1			pop hl 
2e75			.ldouscan: 
2e75			if DEBUG_FORTH_WORDS 
2e75				DMARK "LSs" 
2e75 f5				push af  
2e76 3a 8a 2e			ld a, (.dmark)  
2e79 32 a0 fd			ld (debug_mark),a  
2e7c 3a 8b 2e			ld a, (.dmark+1)  
2e7f 32 a1 fd			ld (debug_mark+1),a  
2e82 3a 8c 2e			ld a, (.dmark+2)  
2e85 32 a2 fd			ld (debug_mark+2),a  
2e88 18 03			jr .pastdmark  
2e8a ..			.dmark: db "LSs"  
2e8d f1			.pastdmark: pop af  
2e8e			endm  
# End of macro DMARK
2e8e				CALLMONITOR 
2e8e cd aa fd			call debug_vector  
2e91				endm  
# End of macro CALLMONITOR
2e91			endif 
2e91			; skip dict stub 
2e91 cd 76 25			call forth_tok_next 
2e94			 
2e94			 
2e94			; while we have words to look for 
2e94			 
2e94 7e			ld a, (hl)      
2e95			if DEBUG_FORTH_WORDS 
2e95				DMARK "LSk" 
2e95 f5				push af  
2e96 3a aa 2e			ld a, (.dmark)  
2e99 32 a0 fd			ld (debug_mark),a  
2e9c 3a ab 2e			ld a, (.dmark+1)  
2e9f 32 a1 fd			ld (debug_mark+1),a  
2ea2 3a ac 2e			ld a, (.dmark+2)  
2ea5 32 a2 fd			ld (debug_mark+2),a  
2ea8 18 03			jr .pastdmark  
2eaa ..			.dmark: db "LSk"  
2ead f1			.pastdmark: pop af  
2eae			endm  
# End of macro DMARK
2eae				CALLMONITOR 
2eae cd aa fd			call debug_vector  
2eb1				endm  
# End of macro CALLMONITOR
2eb1			endif 
2eb1				;cp WORD_SYS_END 
2eb1				;jp z, .lunotfound 
2eb1			 
2eb1					; if we hit non uwords then gone too far 
2eb1 fe 01				cp WORD_SYS_UWORD 
2eb3 c2 f1 2f				jp nz, .lunotfound 
2eb6			 
2eb6				if DEBUG_FORTH_WORDS 
2eb6					DMARK "LSu" 
2eb6 f5				push af  
2eb7 3a cb 2e			ld a, (.dmark)  
2eba 32 a0 fd			ld (debug_mark),a  
2ebd 3a cc 2e			ld a, (.dmark+1)  
2ec0 32 a1 fd			ld (debug_mark+1),a  
2ec3 3a cd 2e			ld a, (.dmark+2)  
2ec6 32 a2 fd			ld (debug_mark+2),a  
2ec9 18 03			jr .pastdmark  
2ecb ..			.dmark: db "LSu"  
2ece f1			.pastdmark: pop af  
2ecf			endm  
# End of macro DMARK
2ecf					CALLMONITOR 
2ecf cd aa fd			call debug_vector  
2ed2				endm  
# End of macro CALLMONITOR
2ed2				endif 
2ed2			 
2ed2					; found a uword but is it the one we want... 
2ed2			 
2ed2 c5					push bc     ; uword to find is on bc 
2ed3 d1					pop de 
2ed4			 
2ed4 e5					push hl  ; to save the ptr 
2ed5			 
2ed5					; skip opcode 
2ed5 23					inc hl  
2ed6					; skip next ptr 
2ed6 23					inc hl  
2ed7 23					inc hl 
2ed8					; skip len 
2ed8 23					inc hl 
2ed9			 
2ed9				if DEBUG_FORTH_WORDS 
2ed9					DMARK "LSc" 
2ed9 f5				push af  
2eda 3a ee 2e			ld a, (.dmark)  
2edd 32 a0 fd			ld (debug_mark),a  
2ee0 3a ef 2e			ld a, (.dmark+1)  
2ee3 32 a1 fd			ld (debug_mark+1),a  
2ee6 3a f0 2e			ld a, (.dmark+2)  
2ee9 32 a2 fd			ld (debug_mark+2),a  
2eec 18 03			jr .pastdmark  
2eee ..			.dmark: db "LSc"  
2ef1 f1			.pastdmark: pop af  
2ef2			endm  
# End of macro DMARK
2ef2					CALLMONITOR 
2ef2 cd aa fd			call debug_vector  
2ef5				endm  
# End of macro CALLMONITOR
2ef5				endif 
2ef5			; was exiting on the shorter of the words. swap and test is in favour of the longer word. 
2ef5			; ie. If WOO is defined first and then WO. Couldnt list WO. 
2ef5			; Nope that has gone the other way. It needs to be exact not on first zero 
2ef5			;		call strcmp 
2ef5 c5					push bc 
2ef6 cd 89 13				call StrictStrCmp 
2ef9 c1					pop bc 
2efa c2 74 2e				jp nz, .ldouscanm 
2efd				 
2efd			 
2efd			 
2efd					; we have a uword so push its name to the stack 
2efd			 
2efd			;	   	push hl  ; save so we can move to next dict block 
2efd e1			pop hl 
2efe			 
2efe				if DEBUG_FORTH_WORDS 
2efe					DMARK "LSm" 
2efe f5				push af  
2eff 3a 13 2f			ld a, (.dmark)  
2f02 32 a0 fd			ld (debug_mark),a  
2f05 3a 14 2f			ld a, (.dmark+1)  
2f08 32 a1 fd			ld (debug_mark+1),a  
2f0b 3a 15 2f			ld a, (.dmark+2)  
2f0e 32 a2 fd			ld (debug_mark+2),a  
2f11 18 03			jr .pastdmark  
2f13 ..			.dmark: db "LSm"  
2f16 f1			.pastdmark: pop af  
2f17			endm  
# End of macro DMARK
2f17					CALLMONITOR 
2f17 cd aa fd			call debug_vector  
2f1a				endm  
# End of macro CALLMONITOR
2f1a				endif 
2f1a			 
2f1a					; skip opcode 
2f1a 23					inc hl  
2f1b					; skip next ptr 
2f1b 23					inc hl  
2f1c 23					inc hl 
2f1d					; skip len 
2f1d 7e					ld a, (hl)   ; save length to add 
2f1e				if DEBUG_FORTH_WORDS 
2f1e					DMARK "LS2" 
2f1e f5				push af  
2f1f 3a 33 2f			ld a, (.dmark)  
2f22 32 a0 fd			ld (debug_mark),a  
2f25 3a 34 2f			ld a, (.dmark+1)  
2f28 32 a1 fd			ld (debug_mark+1),a  
2f2b 3a 35 2f			ld a, (.dmark+2)  
2f2e 32 a2 fd			ld (debug_mark+2),a  
2f31 18 03			jr .pastdmark  
2f33 ..			.dmark: db "LS2"  
2f36 f1			.pastdmark: pop af  
2f37			endm  
# End of macro DMARK
2f37					CALLMONITOR 
2f37 cd aa fd			call debug_vector  
2f3a				endm  
# End of macro CALLMONITOR
2f3a				endif 
2f3a			 
2f3a					; save this location 
2f3a				 
2f3a e5					push hl 
2f3b			 
2f3b 23					inc hl 
2f3c 11 f8 f0				ld de, scratch+2 
2f3f 4f					ld c, a 
2f40 06 00				ld b, 0 
2f42			 
2f42				if DEBUG_FORTH_WORDS 
2f42					DMARK "LSn" 
2f42 f5				push af  
2f43 3a 57 2f			ld a, (.dmark)  
2f46 32 a0 fd			ld (debug_mark),a  
2f49 3a 58 2f			ld a, (.dmark+1)  
2f4c 32 a1 fd			ld (debug_mark+1),a  
2f4f 3a 59 2f			ld a, (.dmark+2)  
2f52 32 a2 fd			ld (debug_mark+2),a  
2f55 18 03			jr .pastdmark  
2f57 ..			.dmark: db "LSn"  
2f5a f1			.pastdmark: pop af  
2f5b			endm  
# End of macro DMARK
2f5b					CALLMONITOR 
2f5b cd aa fd			call debug_vector  
2f5e				endm  
# End of macro CALLMONITOR
2f5e				endif 
2f5e			 
2f5e					; copy uword name to scratch 
2f5e			 
2f5e			;		ldir 
2f5e			.licplw:	; copy uword name to scratch converting to lower case as we go 
2f5e ed a0				ldi 
2f60 1b					dec de 
2f61 1a					ld a, (de) 
2f62 cd 5c 12				call to_lower 
2f65 12					ld (de),a 
2f66 13					inc de 
2f67 3e 00				ld a, 0 
2f69 b9					cp c 
2f6a 20 f2				jr nz, .licplw 
2f6c			 
2f6c			 
2f6c			 
2f6c 1b					dec de 
2f6d 3e 20				ld a, ' '    ; change null to space 
2f6f 12					ld (de), a 
2f70			 
2f70 13					inc de 
2f71			 
2f71 d5					push de 
2f72 c1					pop bc     ; move scratch pointer to end of word name and save it 
2f73			 
2f73 e1					pop hl 
2f74 7e					ld a, (hl) 
2f75					;inc hl 
2f75					; skip word string 
2f75 cd de 0f				call addatohl 
2f78			 
2f78 23					inc hl 
2f79			 
2f79				if DEBUG_FORTH_WORDS 
2f79					DMARK "LS3" 
2f79 f5				push af  
2f7a 3a 8e 2f			ld a, (.dmark)  
2f7d 32 a0 fd			ld (debug_mark),a  
2f80 3a 8f 2f			ld a, (.dmark+1)  
2f83 32 a1 fd			ld (debug_mark+1),a  
2f86 3a 90 2f			ld a, (.dmark+2)  
2f89 32 a2 fd			ld (debug_mark+2),a  
2f8c 18 03			jr .pastdmark  
2f8e ..			.dmark: db "LS3"  
2f91 f1			.pastdmark: pop af  
2f92			endm  
# End of macro DMARK
2f92					CALLMONITOR 
2f92 cd aa fd			call debug_vector  
2f95				endm  
# End of macro CALLMONITOR
2f95				endif 
2f95					; should now be at the start of the machine code to setup the eval of the uword 
2f95					; now locate the ptr to the string defintion 
2f95			 
2f95					; skip ld hl, 
2f95					; then load the ptr 
2f95			; TODO use get from hl ptr 
2f95 23					inc hl 
2f96 5e					ld e, (hl) 
2f97 23					inc hl 
2f98 56					ld d, (hl) 
2f99 eb					ex de, hl 
2f9a			 
2f9a			 
2f9a				if DEBUG_FORTH_WORDS 
2f9a					DMARK "LSt" 
2f9a f5				push af  
2f9b 3a af 2f			ld a, (.dmark)  
2f9e 32 a0 fd			ld (debug_mark),a  
2fa1 3a b0 2f			ld a, (.dmark+1)  
2fa4 32 a1 fd			ld (debug_mark+1),a  
2fa7 3a b1 2f			ld a, (.dmark+2)  
2faa 32 a2 fd			ld (debug_mark+2),a  
2fad 18 03			jr .pastdmark  
2faf ..			.dmark: db "LSt"  
2fb2 f1			.pastdmark: pop af  
2fb3			endm  
# End of macro DMARK
2fb3					CALLMONITOR 
2fb3 cd aa fd			call debug_vector  
2fb6				endm  
# End of macro CALLMONITOR
2fb6				endif 
2fb6			 
2fb6			; cant push right now due to tokenised strings  
2fb6			 
2fb6			; get the destination of where to copy this definition to. 
2fb6			 
2fb6 c5					push bc 
2fb7 d1					pop de 
2fb8			 
2fb8 7e			.listl:         ld a,(hl) 
2fb9 fe 00				cp 0 
2fbb 28 09				jr z, .lreplsp     ; replace zero with space 
2fbd					;cp FORTH_END_BUFFER 
2fbd fe 3b				cp ';'    ; No end buffer flag but the ';' will be a good sign of the end of definition 
2fbf 28 0a				jr z, .listdone    ; at end of uword defination to close of scratch and finish 
2fc1				 
2fc1					; just copy this char as is then 
2fc1			 
2fc1 12					ld (de), a 
2fc2			 
2fc2 23			.listnxt:	inc hl 
2fc3 13					inc de 
2fc4 18 f2				jr .listl 
2fc6			 
2fc6 3e 20		.lreplsp:	ld a,' ' 
2fc8 12					ld (de), a 
2fc9 18 f7				jr .listnxt 
2fcb			 
2fcb			; close up uword def 
2fcb			 
2fcb			.listdone: 
2fcb 12					ld (de), a 
2fcc 13					inc de 
2fcd 3e 00				ld a, 0 
2fcf 12					ld (de), a 
2fd0			 
2fd0			; now have def so clean up and push to stack 
2fd0			 
2fd0 21 f6 f0				ld hl, scratch 
2fd3				if DEBUG_FORTH_WORDS 
2fd3					DMARK "Ltp" 
2fd3 f5				push af  
2fd4 3a e8 2f			ld a, (.dmark)  
2fd7 32 a0 fd			ld (debug_mark),a  
2fda 3a e9 2f			ld a, (.dmark+1)  
2fdd 32 a1 fd			ld (debug_mark+1),a  
2fe0 3a ea 2f			ld a, (.dmark+2)  
2fe3 32 a2 fd			ld (debug_mark+2),a  
2fe6 18 03			jr .pastdmark  
2fe8 ..			.dmark: db "Ltp"  
2feb f1			.pastdmark: pop af  
2fec			endm  
# End of macro DMARK
2fec					CALLMONITOR 
2fec cd aa fd			call debug_vector  
2fef				endm  
# End of macro CALLMONITOR
2fef				endif 
2fef			 
2fef 18 1f			jr .listpush 
2ff1			 
2ff1			;.lnuword:	pop hl 
2ff1			;		call forth_tok_next 
2ff1			;		jp .ldouscan  
2ff1			 
2ff1			.lunotfound:		  
2ff1			 
2ff1				if DEBUG_FORTH_WORDS 
2ff1					DMARK "LSn" 
2ff1 f5				push af  
2ff2 3a 06 30			ld a, (.dmark)  
2ff5 32 a0 fd			ld (debug_mark),a  
2ff8 3a 07 30			ld a, (.dmark+1)  
2ffb 32 a1 fd			ld (debug_mark+1),a  
2ffe 3a 08 30			ld a, (.dmark+2)  
3001 32 a2 fd			ld (debug_mark+2),a  
3004 18 03			jr .pastdmark  
3006 ..			.dmark: db "LSn"  
3009 f1			.pastdmark: pop af  
300a			endm  
# End of macro DMARK
300a					CALLMONITOR 
300a cd aa fd			call debug_vector  
300d				endm  
# End of macro CALLMONITOR
300d				endif 
300d			 
300d					 
300d			;		FORTH_DSP_POP 
300d			;		ld hl, .luno 
300d			 
300d					NEXTW			 
300d c3 39 24			jp macro_next 
3010				endm 
# End of macro NEXTW
3010			 
3010			.listpush: 
3010				if DEBUG_FORTH_WORDS 
3010					DMARK "LS>" 
3010 f5				push af  
3011 3a 25 30			ld a, (.dmark)  
3014 32 a0 fd			ld (debug_mark),a  
3017 3a 26 30			ld a, (.dmark+1)  
301a 32 a1 fd			ld (debug_mark+1),a  
301d 3a 27 30			ld a, (.dmark+2)  
3020 32 a2 fd			ld (debug_mark+2),a  
3023 18 03			jr .pastdmark  
3025 ..			.dmark: db "LS>"  
3028 f1			.pastdmark: pop af  
3029			endm  
# End of macro DMARK
3029					CALLMONITOR 
3029 cd aa fd			call debug_vector  
302c				endm  
# End of macro CALLMONITOR
302c				endif 
302c cd b6 20				call forth_push_str 
302f			 
302f			 
302f			 
302f					NEXTW 
302f c3 39 24			jp macro_next 
3032				endm 
# End of macro NEXTW
3032			 
3032			;.luno:    db "Word not found",0 
3032			 
3032			 
3032			 
3032			 
3032			 
3032			;		push hl   ; save pointer to start of uword def string 
3032			; 
3032			;; look for FORTH_EOL_LINE 
3032			;		ld a, FORTH_END_BUFFER 
3032			;		call strlent 
3032			; 
3032			;		inc hl		 ; space for coln def 
3032			;		inc hl 
3032			;		inc hl          ; space for terms 
3032			;		inc hl 
3032			; 
3032			;		ld a, 20   ; TODO get actual length 
3032			;		call addatohl    ; include a random amount of room for the uword name 
3032			; 
3032			;		 
3032			;	if DEBUG_FORTH_WORDS 
3032			;		DMARK "Lt1" 
3032			;		CALLMONITOR 
3032			;	endif 
3032			;		 
3032			; 
3032			;; malloc space for the string because we cant change it 
3032			; 
3032			;		call malloc 
3032			;	if DEBUG_FORTH_MALLOC_GUARD 
3032			;		push af 
3032			;		call ishlzero 
3032			;		pop af 
3032			;		 
3032			;		call z,malloc_error 
3032			;	endif 
3032			; 
3032			;	if DEBUG_FORTH_WORDS 
3032			;		DMARK "Lt2" 
3032			;		CALLMONITOR 
3032			;	endif 
3032			;		pop de 
3032			;		push hl    ; push the malloc to release later 
3032			;		push hl   ;  push back a copy for the later stack push 
3032			;		 
3032			;; copy the string swapping out the zero terms for spaces 
3032			; 
3032			;		; de has our source 
3032			;		; hl has our dest 
3032			; 
3032			;; add the coln def 
3032			; 
3032			;		ld a, ':' 
3032			;		ld (hl), a 
3032			;		inc hl 
3032			;		ld a, ' ' 
3032			;		ld (hl), a 
3032			;		inc hl 
3032			; 
3032			;; add the uname word 
3032			;		push de   ; save our string for now 
3032			;		ex de, hl 
3032			; 
3032			;		FORTH_DSP_VALUE 
3032			;		;v5 FORTH_DSP_VALUE 
3032			; 
3032			;		inc hl   ; skip type but we know by now this is OK 
3032			; 
3032			;.luword:	ld a,(hl) 
3032			;		cp 0 
3032			;		jr z, .luword2 
3032			;		ld (de), a 
3032			;		inc de 
3032			;		inc hl 
3032			;		jr .luword 
3032			; 
3032			;.luword2:	ld a, ' ' 
3032			;		ld (de), a 
3032			;;		inc hl 
3032			;;		inc de 
3032			;;		ld (de), a 
3032			;;		inc hl 
3032			;		inc de 
3032			; 
3032			;		ex de, hl 
3032			;		pop de 
3032			;		 
3032			;		 
3032			; 
3032			;; detoken that string and copy it 
3032			; 
3032			;	if DEBUG_FORTH_WORDS 
3032			;		DMARK "Lt2" 
3032			;		CALLMONITOR 
3032			;	endif 
3032			;.ldetok:	ld a, (de) 
3032			;		cp FORTH_END_BUFFER 
3032			;		jr z, .ldetokend 
3032			;		; swap out any zero term for space 
3032			;		cp 0 
3032			;		jr nz, .ldetoknext 
3032			;		ld a, ' ' 
3032			; 
3032			;	if DEBUG_FORTH_WORDS 
3032			;		DMARK "LtS" 
3032			;		CALLMONITOR 
3032			;	endif 
3032			;.ldetoknext:	ld (hl), a 
3032			;		inc de 
3032			;		inc hl 
3032			;		jr .ldetok 
3032			; 
3032			;.ldetokend:	ld a, 0    ; replace forth eol with string term for pushing 
3032			;		ld (hl), a  
3032			; 
3032			;; free that temp malloc 
3032			; 
3032			;		pop hl    
3032			; 
3032			;	if DEBUG_FORTH_WORDS 
3032			;		DMARK "Lt4" 
3032			;		CALLMONITOR 
3032			;	endif 
3032			;		call forth_apushstrhl 
3032			; 
3032			;		; get rid of temp malloc area 
3032			; 
3032			;		pop hl 
3032			;		call free 
3032			; 
3032			;		jr .ludone 
3032			; 
3032			;.lnuword:	pop hl 
3032			;		call forth_tok_next 
3032			;		jp .ldouscan  
3032			; 
3032			;.ludone:		 pop hl 
3032			; 
3032					NEXTW 
3032 c3 39 24			jp macro_next 
3035				endm 
# End of macro NEXTW
3035			 
3035			.FORGET: 
3035				CWHEAD .NOP 73 "FORGET" 6 WORD_FLAG_CODE 
3035 5d				db WORD_SYS_CORE+73             
3036 ae 30			dw .NOP            
3038 07				db 6 + 1 
3039 .. 00			db "FORGET",0              
3040				endm 
# End of macro CWHEAD
3040			; | FORGET ( uword -- )    Forget the uword on TOS | DONE 
3040			; | | Will flag the word's op code to be deleted as well as replace the first char of the word with '_'. Quoted uword name must be in caps. 
3040			; | |  
3040			; | | e.g. "MORE" forget 
3040					if DEBUG_FORTH_WORDS_KEY 
3040						DMARK "FRG" 
3040 f5				push af  
3041 3a 55 30			ld a, (.dmark)  
3044 32 a0 fd			ld (debug_mark),a  
3047 3a 56 30			ld a, (.dmark+1)  
304a 32 a1 fd			ld (debug_mark+1),a  
304d 3a 57 30			ld a, (.dmark+2)  
3050 32 a2 fd			ld (debug_mark+2),a  
3053 18 03			jr .pastdmark  
3055 ..			.dmark: db "FRG"  
3058 f1			.pastdmark: pop af  
3059			endm  
# End of macro DMARK
3059						CALLMONITOR 
3059 cd aa fd			call debug_vector  
305c				endm  
# End of macro CALLMONITOR
305c					endif 
305c			 
305c				; find uword 
305c			        ; update start of word with "_" 
305c				; replace uword with deleted flag 
305c			 
305c			 
305c			;	if DEBUG_FORTH_WORDS 
305c			;		DMARK "FOG" 
305c			;		CALLMONITOR 
305c			;	endif 
305c			 
305c			 
305c					; Get ptr to the word we need to look up 
305c			 
305c					FORTH_DSP_VALUEHL 
305c cd 4d 22			call macro_dsp_valuehl 
305f				endm 
# End of macro FORTH_DSP_VALUEHL
305f					;v5 FORTH_DSP_VALUE 
305f				; TODO type check 
305f			;		inc hl    ; Skip type check  
305f e5					push hl 
3060 c1					pop bc 
3061			;		ex de, hl    ; put into DE 
3061			 
3061			 
3061 21 00 80				ld hl, baseram 
3064					;ld hl, baseusermem 
3064			 
3064				; skip dict stub 
3064			;	call forth_tok_next 
3064 e5			push hl   ; sacreifical push 
3065			 
3065			.fldouscanm: 
3065 e1				pop hl 
3066			.fldouscan: 
3066			;	if DEBUG_FORTH_WORDS 
3066			;		DMARK "LSs" 
3066			;		CALLMONITOR 
3066			;	endif 
3066				; skip dict stub 
3066 cd 76 25				call forth_tok_next 
3069			 
3069			 
3069			; while we have words to look for 
3069			 
3069 7e				ld a, (hl)      
306a			;	if DEBUG_FORTH_WORDS 
306a			;		DMARK "LSk" 
306a			;		CALLMONITOR 
306a			;	endif 
306a fe 00				cp WORD_SYS_END 
306c ca a8 30				jp z, .flunotfound 
306f fe 01				cp WORD_SYS_UWORD 
3071 c2 66 30				jp nz, .fldouscan 
3074			 
3074			;	if DEBUG_FORTH_WORDS 
3074			;		DMARK "LSu" 
3074			;		CALLMONITOR 
3074			;	endif 
3074			 
3074					; found a uword but is it the one we want... 
3074			 
3074 c5					push bc     ; uword to find is on bc 
3075 d1					pop de 
3076			 
3076 e5					push hl  ; to save the ptr 
3077			 
3077					; skip opcode 
3077 23					inc hl  
3078					; skip next ptr 
3078 23					inc hl  
3079 23					inc hl 
307a					; skip len 
307a 23					inc hl 
307b			 
307b			;	if DEBUG_FORTH_WORDS 
307b			;		DMARK "LSc" 
307b			;		CALLMONITOR 
307b			;	endif 
307b cd 7c 13				call strcmp 
307e c2 65 30				jp nz, .fldouscanm 
3081			; 
3081			; 
3081			;; while we have words to look for 
3081			; 
3081			;.fdouscan:	ld a, (hl)      
3081			;	if DEBUG_FORTH_WORDS 
3081			;		DMARK "LSs" 
3081			;		CALLMONITOR 
3081			;	endif 
3081			;		cp WORD_SYS_END 
3081			;		jp z, .fudone 
3081			;		cp WORD_SYS_UWORD 
3081			;		jp nz, .fnuword 
3081			; 
3081			;	if DEBUG_FORTH_WORDS 
3081			;		DMARK "FGu" 
3081			;		CALLMONITOR 
3081			;	endif 
3081			; 
3081			;		; found a uword but is it the one we want... 
3081			; 
3081			; 
3081			;	        pop de   ; get back the dsp name 
3081			;		push de 
3081			; 
3081			;		push hl  ; to save the ptr 
3081			; 
3081			;		; skip opcode 
3081			;		inc hl  
3081			;		; skip next ptr 
3081			;		inc hl  
3081			;		inc hl 
3081			;		; skip len 
3081			;		inc hl 
3081			; 
3081			;	if DEBUG_FORTH_WORDS 
3081			;		DMARK "FGc" 
3081			;		CALLMONITOR 
3081			;	endif 
3081			;		call strcmp 
3081			;		jp nz, .fnuword 
3081			 
3081			 
3081 e1			pop hl 
3082			 
3082				 
3082				if DEBUG_FORTH_WORDS 
3082					DMARK "FGm" 
3082 f5				push af  
3083 3a 97 30			ld a, (.dmark)  
3086 32 a0 fd			ld (debug_mark),a  
3089 3a 98 30			ld a, (.dmark+1)  
308c 32 a1 fd			ld (debug_mark+1),a  
308f 3a 99 30			ld a, (.dmark+2)  
3092 32 a2 fd			ld (debug_mark+2),a  
3095 18 03			jr .pastdmark  
3097 ..			.dmark: db "FGm"  
309a f1			.pastdmark: pop af  
309b			endm  
# End of macro DMARK
309b					CALLMONITOR 
309b cd aa fd			call debug_vector  
309e				endm  
# End of macro CALLMONITOR
309e				endif 
309e			 
309e			 
309e			 
309e					; we have a uword so push its name to the stack 
309e			 
309e			;	   	push hl  ; save so we can move to next dict block 
309e			;pop hl 
309e			 
309e					; update opcode to deleted 
309e 3e 03				ld a, WORD_SYS_DELETED 
30a0 77					ld (hl), a 
30a1			 
30a1 23					inc hl  
30a2					; skip next ptr 
30a2 23					inc hl  
30a3 23					inc hl 
30a4					; skip len 
30a4 23					inc hl 
30a5			 
30a5					; TODO change parser to skip deleted words but for now mark it out 
30a5 3e 5f				ld a, "_" 
30a7 77					ld  (hl),a 
30a8			 
30a8			;		jr .fudone 
30a8			; 
30a8			;.fnuword:	pop hl 
30a8			;		call forth_tok_next 
30a8			;		jp .fdouscan  
30a8			 
30a8			.flunotfound:		  
30a8			 
30a8			 
30a8					 
30a8					FORTH_DSP_POP 
30a8 cd 05 23			call macro_forth_dsp_pop 
30ab				endm 
# End of macro FORTH_DSP_POP
30ab			;		ld hl, .luno 
30ab			;.fudone:		 pop hl 
30ab					NEXTW 
30ab c3 39 24			jp macro_next 
30ae				endm 
# End of macro NEXTW
30ae			.NOP: 
30ae				CWHEAD .COMO 77 "NOP" 3 WORD_FLAG_CODE 
30ae 61				db WORD_SYS_CORE+77             
30af d5 30			dw .COMO            
30b1 04				db 3 + 1 
30b2 .. 00			db "NOP",0              
30b6				endm 
# End of macro CWHEAD
30b6			; | NOP (  --  ) Do nothing | DONE 
30b6					if DEBUG_FORTH_WORDS_KEY 
30b6						DMARK "NOP" 
30b6 f5				push af  
30b7 3a cb 30			ld a, (.dmark)  
30ba 32 a0 fd			ld (debug_mark),a  
30bd 3a cc 30			ld a, (.dmark+1)  
30c0 32 a1 fd			ld (debug_mark+1),a  
30c3 3a cd 30			ld a, (.dmark+2)  
30c6 32 a2 fd			ld (debug_mark+2),a  
30c9 18 03			jr .pastdmark  
30cb ..			.dmark: db "NOP"  
30ce f1			.pastdmark: pop af  
30cf			endm  
# End of macro DMARK
30cf						CALLMONITOR 
30cf cd aa fd			call debug_vector  
30d2				endm  
# End of macro CALLMONITOR
30d2					endif 
30d2				       NEXTW 
30d2 c3 39 24			jp macro_next 
30d5				endm 
# End of macro NEXTW
30d5			.COMO: 
30d5				CWHEAD .COMC 90 "(" 1 WORD_FLAG_CODE 
30d5 6e				db WORD_SYS_CORE+90             
30d6 27 31			dw .COMC            
30d8 02				db 1 + 1 
30d9 .. 00			db "(",0              
30db				endm 
# End of macro CWHEAD
30db			; | ( ( -- )  Start of comment | DONE 
30db			 
30db			 
30db 2a f7 f3				ld hl, ( os_tok_ptr) 
30de 11 22 31			ld de, .closepar 
30e1					 
30e1					if DEBUG_FORTH_WORDS 
30e1						DMARK ").." 
30e1 f5				push af  
30e2 3a f6 30			ld a, (.dmark)  
30e5 32 a0 fd			ld (debug_mark),a  
30e8 3a f7 30			ld a, (.dmark+1)  
30eb 32 a1 fd			ld (debug_mark+1),a  
30ee 3a f8 30			ld a, (.dmark+2)  
30f1 32 a2 fd			ld (debug_mark+2),a  
30f4 18 03			jr .pastdmark  
30f6 ..			.dmark: db ").."  
30f9 f1			.pastdmark: pop af  
30fa			endm  
# End of macro DMARK
30fa						CALLMONITOR 
30fa cd aa fd			call debug_vector  
30fd				endm  
# End of macro CALLMONITOR
30fd					endif 
30fd cd 40 25			call findnexttok  
3100			 
3100					if DEBUG_FORTH_WORDS 
3100						DMARK "IF5" 
3100 f5				push af  
3101 3a 15 31			ld a, (.dmark)  
3104 32 a0 fd			ld (debug_mark),a  
3107 3a 16 31			ld a, (.dmark+1)  
310a 32 a1 fd			ld (debug_mark+1),a  
310d 3a 17 31			ld a, (.dmark+2)  
3110 32 a2 fd			ld (debug_mark+2),a  
3113 18 03			jr .pastdmark  
3115 ..			.dmark: db "IF5"  
3118 f1			.pastdmark: pop af  
3119			endm  
# End of macro DMARK
3119						CALLMONITOR 
3119 cd aa fd			call debug_vector  
311c				endm  
# End of macro CALLMONITOR
311c					endif 
311c				; replace below with ) exec using tok_ptr 
311c 22 f7 f3			ld (os_tok_ptr), hl 
311f c3 c2 24			jp exec1 
3122			 
3122 .. 00			.closepar:   db ")",0 
3124			 
3124				       NEXTW 
3124 c3 39 24			jp macro_next 
3127				endm 
# End of macro NEXTW
3127			.COMC: 
3127				CWHEAD .SCRATCH 91 ")" 1 WORD_FLAG_CODE 
3127 6f				db WORD_SYS_CORE+91             
3128 30 31			dw .SCRATCH            
312a 02				db 1 + 1 
312b .. 00			db ")",0              
312d				endm 
# End of macro CWHEAD
312d			; | ) ( -- )  End of comment |  DONE  
312d				       NEXTW 
312d c3 39 24			jp macro_next 
3130				endm 
# End of macro NEXTW
3130			 
3130			.SCRATCH: 
3130				CWHEAD .INC 91 "SCRATCH" 7 WORD_FLAG_CODE 
3130 6f				db WORD_SYS_CORE+91             
3131 6b 31			dw .INC            
3133 08				db 7 + 1 
3134 .. 00			db "SCRATCH",0              
313c				endm 
# End of macro CWHEAD
313c			; | SCRATCH ( u -- addr ) Pushes address of offset u to stack | DONE 
313c			; | | The scratch area provides 32 word array. Can be used as single byte or as a word by passing the offset on stack. Pushes the resulting address to stack.  
313c			; | | When used with the direct storage writing/malloc and the !@ or word versions it is possible to construct an expanded and flexible variable system 
313c			; | |  
313c			; | | e.g.    : score $00 scratch ; 
313c			; | |  
313c			; | | $00 score ! 
313c			; | | $01 score +! 
313c			; | |  
313c			; | | e.g.   : varword $0a scratch ;  
313c			; | | 
313c			; | | $8000 varword ! 
313c					if DEBUG_FORTH_WORDS_KEY 
313c						DMARK "SCR" 
313c f5				push af  
313d 3a 51 31			ld a, (.dmark)  
3140 32 a0 fd			ld (debug_mark),a  
3143 3a 52 31			ld a, (.dmark+1)  
3146 32 a1 fd			ld (debug_mark+1),a  
3149 3a 53 31			ld a, (.dmark+2)  
314c 32 a2 fd			ld (debug_mark+2),a  
314f 18 03			jr .pastdmark  
3151 ..			.dmark: db "SCR"  
3154 f1			.pastdmark: pop af  
3155			endm  
# End of macro DMARK
3155						CALLMONITOR 
3155 cd aa fd			call debug_vector  
3158				endm  
# End of macro CALLMONITOR
3158					endif 
3158			 
3158					FORTH_DSP_VALUEHL 
3158 cd 4d 22			call macro_dsp_valuehl 
315b				endm 
# End of macro FORTH_DSP_VALUEHL
315b				 
315b					FORTH_DSP_POP 
315b cd 05 23			call macro_forth_dsp_pop 
315e				endm 
# End of macro FORTH_DSP_POP
315e			 
315e 7d					ld a, l 
315f 21 1b f6				ld hl, os_var_array 
3162 cd de 0f				call addatohl 
3165			 
3165 cd 48 20				call forth_push_numhl 
3168			 
3168				       NEXTW 
3168 c3 39 24			jp macro_next 
316b				endm 
# End of macro NEXTW
316b			 
316b			.INC: 
316b				CWHEAD .DEC 91 "+!" 2 WORD_FLAG_CODE 
316b 6f				db WORD_SYS_CORE+91             
316c c1 31			dw .DEC            
316e 03				db 2 + 1 
316f .. 00			db "+!",0              
3172				endm 
# End of macro CWHEAD
3172			; | +! ( u a -- )  Increment byte at address a by the value u | DONE 
3172					if DEBUG_FORTH_WORDS_KEY 
3172						DMARK "+s_" 
3172 f5				push af  
3173 3a 87 31			ld a, (.dmark)  
3176 32 a0 fd			ld (debug_mark),a  
3179 3a 88 31			ld a, (.dmark+1)  
317c 32 a1 fd			ld (debug_mark+1),a  
317f 3a 89 31			ld a, (.dmark+2)  
3182 32 a2 fd			ld (debug_mark+2),a  
3185 18 03			jr .pastdmark  
3187 ..			.dmark: db "+s_"  
318a f1			.pastdmark: pop af  
318b			endm  
# End of macro DMARK
318b						CALLMONITOR 
318b cd aa fd			call debug_vector  
318e				endm  
# End of macro CALLMONITOR
318e					endif 
318e			 
318e					FORTH_DSP_VALUEHL 
318e cd 4d 22			call macro_dsp_valuehl 
3191				endm 
# End of macro FORTH_DSP_VALUEHL
3191			 
3191 e5					push hl   ; save address 
3192			 
3192					FORTH_DSP_POP 
3192 cd 05 23			call macro_forth_dsp_pop 
3195				endm 
# End of macro FORTH_DSP_POP
3195			 
3195					FORTH_DSP_VALUEHL 
3195 cd 4d 22			call macro_dsp_valuehl 
3198				endm 
# End of macro FORTH_DSP_VALUEHL
3198			 
3198 e5					push hl 
3199					FORTH_DSP_POP 
3199 cd 05 23			call macro_forth_dsp_pop 
319c				endm 
# End of macro FORTH_DSP_POP
319c e1					pop hl 
319d			 
319d					; hl contains value to add to byte at a 
319d				 
319d eb					ex de, hl 
319e			 
319e e1					pop hl 
319f			 
319f					if DEBUG_FORTH_WORDS 
319f						DMARK "INC" 
319f f5				push af  
31a0 3a b4 31			ld a, (.dmark)  
31a3 32 a0 fd			ld (debug_mark),a  
31a6 3a b5 31			ld a, (.dmark+1)  
31a9 32 a1 fd			ld (debug_mark+1),a  
31ac 3a b6 31			ld a, (.dmark+2)  
31af 32 a2 fd			ld (debug_mark+2),a  
31b2 18 03			jr .pastdmark  
31b4 ..			.dmark: db "INC"  
31b7 f1			.pastdmark: pop af  
31b8			endm  
# End of macro DMARK
31b8						CALLMONITOR 
31b8 cd aa fd			call debug_vector  
31bb				endm  
# End of macro CALLMONITOR
31bb					endif 
31bb			 
31bb 7e					ld a,(hl) 
31bc 83					add e 
31bd 77					ld (hl),a 
31be			 
31be			 
31be			 
31be				       NEXTW 
31be c3 39 24			jp macro_next 
31c1				endm 
# End of macro NEXTW
31c1			 
31c1			.DEC: 
31c1				CWHEAD .INC2 91 "-!" 2 WORD_FLAG_CODE 
31c1 6f				db WORD_SYS_CORE+91             
31c2 15 32			dw .INC2            
31c4 03				db 2 + 1 
31c5 .. 00			db "-!",0              
31c8				endm 
# End of macro CWHEAD
31c8			; | -! ( u a -- )  Decrement byte at address a by the value u | DONE 
31c8					if DEBUG_FORTH_WORDS_KEY 
31c8						DMARK "-s_" 
31c8 f5				push af  
31c9 3a dd 31			ld a, (.dmark)  
31cc 32 a0 fd			ld (debug_mark),a  
31cf 3a de 31			ld a, (.dmark+1)  
31d2 32 a1 fd			ld (debug_mark+1),a  
31d5 3a df 31			ld a, (.dmark+2)  
31d8 32 a2 fd			ld (debug_mark+2),a  
31db 18 03			jr .pastdmark  
31dd ..			.dmark: db "-s_"  
31e0 f1			.pastdmark: pop af  
31e1			endm  
# End of macro DMARK
31e1						CALLMONITOR 
31e1 cd aa fd			call debug_vector  
31e4				endm  
# End of macro CALLMONITOR
31e4					endif 
31e4			 
31e4					FORTH_DSP_VALUEHL 
31e4 cd 4d 22			call macro_dsp_valuehl 
31e7				endm 
# End of macro FORTH_DSP_VALUEHL
31e7			 
31e7 e5					push hl   ; save address 
31e8			 
31e8					FORTH_DSP_POP 
31e8 cd 05 23			call macro_forth_dsp_pop 
31eb				endm 
# End of macro FORTH_DSP_POP
31eb			 
31eb					FORTH_DSP_VALUEHL 
31eb cd 4d 22			call macro_dsp_valuehl 
31ee				endm 
# End of macro FORTH_DSP_VALUEHL
31ee			 
31ee					; hl contains value to add to byte at a 
31ee				 
31ee eb					ex de, hl 
31ef			 
31ef e1					pop hl 
31f0			 
31f0					if DEBUG_FORTH_WORDS 
31f0						DMARK "DEC" 
31f0 f5				push af  
31f1 3a 05 32			ld a, (.dmark)  
31f4 32 a0 fd			ld (debug_mark),a  
31f7 3a 06 32			ld a, (.dmark+1)  
31fa 32 a1 fd			ld (debug_mark+1),a  
31fd 3a 07 32			ld a, (.dmark+2)  
3200 32 a2 fd			ld (debug_mark+2),a  
3203 18 03			jr .pastdmark  
3205 ..			.dmark: db "DEC"  
3208 f1			.pastdmark: pop af  
3209			endm  
# End of macro DMARK
3209						CALLMONITOR 
3209 cd aa fd			call debug_vector  
320c				endm  
# End of macro CALLMONITOR
320c					endif 
320c			 
320c 7e					ld a,(hl) 
320d 93					sub e 
320e 77					ld (hl),a 
320f			 
320f			 
320f					FORTH_DSP_POP 
320f cd 05 23			call macro_forth_dsp_pop 
3212				endm 
# End of macro FORTH_DSP_POP
3212			 
3212				       NEXTW 
3212 c3 39 24			jp macro_next 
3215				endm 
# End of macro NEXTW
3215			 
3215			.INC2: 
3215				CWHEAD .DEC2 91 "+2!" 3 WORD_FLAG_CODE 
3215 6f				db WORD_SYS_CORE+91             
3216 c2 32			dw .DEC2            
3218 04				db 3 + 1 
3219 .. 00			db "+2!",0              
321d				endm 
# End of macro CWHEAD
321d			; | +2! ( u a -- )  Increment word at address a by the value u | DONE 
321d			 
321d					if DEBUG_FORTH_WORDS_KEY 
321d						DMARK "+2s" 
321d f5				push af  
321e 3a 32 32			ld a, (.dmark)  
3221 32 a0 fd			ld (debug_mark),a  
3224 3a 33 32			ld a, (.dmark+1)  
3227 32 a1 fd			ld (debug_mark+1),a  
322a 3a 34 32			ld a, (.dmark+2)  
322d 32 a2 fd			ld (debug_mark+2),a  
3230 18 03			jr .pastdmark  
3232 ..			.dmark: db "+2s"  
3235 f1			.pastdmark: pop af  
3236			endm  
# End of macro DMARK
3236						CALLMONITOR 
3236 cd aa fd			call debug_vector  
3239				endm  
# End of macro CALLMONITOR
3239					endif 
3239			 
3239					; Address 
3239			 
3239					FORTH_DSP_VALUEHL 
3239 cd 4d 22			call macro_dsp_valuehl 
323c				endm 
# End of macro FORTH_DSP_VALUEHL
323c			 
323c e5					push hl    ; save address 
323d			 
323d					; load content into de 
323d			 
323d 5e					ld e,(hl) 
323e 23					inc hl 
323f 56					ld d, (hl) 
3240			 
3240					if DEBUG_FORTH_WORDS 
3240						DMARK "+2a" 
3240 f5				push af  
3241 3a 55 32			ld a, (.dmark)  
3244 32 a0 fd			ld (debug_mark),a  
3247 3a 56 32			ld a, (.dmark+1)  
324a 32 a1 fd			ld (debug_mark+1),a  
324d 3a 57 32			ld a, (.dmark+2)  
3250 32 a2 fd			ld (debug_mark+2),a  
3253 18 03			jr .pastdmark  
3255 ..			.dmark: db "+2a"  
3258 f1			.pastdmark: pop af  
3259			endm  
# End of macro DMARK
3259						CALLMONITOR 
3259 cd aa fd			call debug_vector  
325c				endm  
# End of macro CALLMONITOR
325c					endif 
325c			 
325c					FORTH_DSP_POP 
325c cd 05 23			call macro_forth_dsp_pop 
325f				endm 
# End of macro FORTH_DSP_POP
325f			 
325f					; Get value to add 
325f			 
325f					FORTH_DSP_VALUE 
325f cd 36 22			call macro_forth_dsp_value 
3262				endm 
# End of macro FORTH_DSP_VALUE
3262			 
3262					if DEBUG_FORTH_WORDS 
3262						DMARK "+2v" 
3262 f5				push af  
3263 3a 77 32			ld a, (.dmark)  
3266 32 a0 fd			ld (debug_mark),a  
3269 3a 78 32			ld a, (.dmark+1)  
326c 32 a1 fd			ld (debug_mark+1),a  
326f 3a 79 32			ld a, (.dmark+2)  
3272 32 a2 fd			ld (debug_mark+2),a  
3275 18 03			jr .pastdmark  
3277 ..			.dmark: db "+2v"  
327a f1			.pastdmark: pop af  
327b			endm  
# End of macro DMARK
327b						CALLMONITOR 
327b cd aa fd			call debug_vector  
327e				endm  
# End of macro CALLMONITOR
327e					endif 
327e			 
327e 19					add hl, de 
327f			 
327f					if DEBUG_FORTH_WORDS 
327f						DMARK "+2+" 
327f f5				push af  
3280 3a 94 32			ld a, (.dmark)  
3283 32 a0 fd			ld (debug_mark),a  
3286 3a 95 32			ld a, (.dmark+1)  
3289 32 a1 fd			ld (debug_mark+1),a  
328c 3a 96 32			ld a, (.dmark+2)  
328f 32 a2 fd			ld (debug_mark+2),a  
3292 18 03			jr .pastdmark  
3294 ..			.dmark: db "+2+"  
3297 f1			.pastdmark: pop af  
3298			endm  
# End of macro DMARK
3298						CALLMONITOR 
3298 cd aa fd			call debug_vector  
329b				endm  
# End of macro CALLMONITOR
329b					endif 
329b			 
329b					; move result to de 
329b			 
329b eb					ex de, hl 
329c			 
329c					; Address 
329c			 
329c e1					pop hl 
329d			 
329d					; save it back 
329d			 
329d 73					ld (hl), e 
329e 23					inc hl 
329f 72					ld (hl), d 
32a0			 
32a0					if DEBUG_FORTH_WORDS 
32a0						DMARK "+2e" 
32a0 f5				push af  
32a1 3a b5 32			ld a, (.dmark)  
32a4 32 a0 fd			ld (debug_mark),a  
32a7 3a b6 32			ld a, (.dmark+1)  
32aa 32 a1 fd			ld (debug_mark+1),a  
32ad 3a b7 32			ld a, (.dmark+2)  
32b0 32 a2 fd			ld (debug_mark+2),a  
32b3 18 03			jr .pastdmark  
32b5 ..			.dmark: db "+2e"  
32b8 f1			.pastdmark: pop af  
32b9			endm  
# End of macro DMARK
32b9						CALLMONITOR 
32b9 cd aa fd			call debug_vector  
32bc				endm  
# End of macro CALLMONITOR
32bc					endif 
32bc			 
32bc			 
32bc			 
32bc					FORTH_DSP_POP 
32bc cd 05 23			call macro_forth_dsp_pop 
32bf				endm 
# End of macro FORTH_DSP_POP
32bf			 
32bf			 
32bf				       NEXTW 
32bf c3 39 24			jp macro_next 
32c2				endm 
# End of macro NEXTW
32c2			 
32c2			.DEC2: 
32c2				CWHEAD .GET2 91 "-2!" 3 WORD_FLAG_CODE 
32c2 6f				db WORD_SYS_CORE+91             
32c3 71 33			dw .GET2            
32c5 04				db 3 + 1 
32c6 .. 00			db "-2!",0              
32ca				endm 
# End of macro CWHEAD
32ca			; | -2! ( u a -- )  Decrement word at address a by the value u | DONE 
32ca			 
32ca			 
32ca					if DEBUG_FORTH_WORDS_KEY 
32ca						DMARK "-2s" 
32ca f5				push af  
32cb 3a df 32			ld a, (.dmark)  
32ce 32 a0 fd			ld (debug_mark),a  
32d1 3a e0 32			ld a, (.dmark+1)  
32d4 32 a1 fd			ld (debug_mark+1),a  
32d7 3a e1 32			ld a, (.dmark+2)  
32da 32 a2 fd			ld (debug_mark+2),a  
32dd 18 03			jr .pastdmark  
32df ..			.dmark: db "-2s"  
32e2 f1			.pastdmark: pop af  
32e3			endm  
# End of macro DMARK
32e3						CALLMONITOR 
32e3 cd aa fd			call debug_vector  
32e6				endm  
# End of macro CALLMONITOR
32e6					endif 
32e6			 
32e6					; Address 
32e6			 
32e6					FORTH_DSP_VALUEHL 
32e6 cd 4d 22			call macro_dsp_valuehl 
32e9				endm 
# End of macro FORTH_DSP_VALUEHL
32e9			 
32e9 e5					push hl    ; save address 
32ea			 
32ea					; load content into de 
32ea			 
32ea 5e					ld e,(hl) 
32eb 23					inc hl 
32ec 56					ld d, (hl) 
32ed			 
32ed					if DEBUG_FORTH_WORDS 
32ed						DMARK "-2a" 
32ed f5				push af  
32ee 3a 02 33			ld a, (.dmark)  
32f1 32 a0 fd			ld (debug_mark),a  
32f4 3a 03 33			ld a, (.dmark+1)  
32f7 32 a1 fd			ld (debug_mark+1),a  
32fa 3a 04 33			ld a, (.dmark+2)  
32fd 32 a2 fd			ld (debug_mark+2),a  
3300 18 03			jr .pastdmark  
3302 ..			.dmark: db "-2a"  
3305 f1			.pastdmark: pop af  
3306			endm  
# End of macro DMARK
3306						CALLMONITOR 
3306 cd aa fd			call debug_vector  
3309				endm  
# End of macro CALLMONITOR
3309					endif 
3309			 
3309					FORTH_DSP_POP 
3309 cd 05 23			call macro_forth_dsp_pop 
330c				endm 
# End of macro FORTH_DSP_POP
330c			 
330c					; Get value to remove 
330c			 
330c					FORTH_DSP_VALUE 
330c cd 36 22			call macro_forth_dsp_value 
330f				endm 
# End of macro FORTH_DSP_VALUE
330f			 
330f					if DEBUG_FORTH_WORDS 
330f						DMARK "-2v" 
330f f5				push af  
3310 3a 24 33			ld a, (.dmark)  
3313 32 a0 fd			ld (debug_mark),a  
3316 3a 25 33			ld a, (.dmark+1)  
3319 32 a1 fd			ld (debug_mark+1),a  
331c 3a 26 33			ld a, (.dmark+2)  
331f 32 a2 fd			ld (debug_mark+2),a  
3322 18 03			jr .pastdmark  
3324 ..			.dmark: db "-2v"  
3327 f1			.pastdmark: pop af  
3328			endm  
# End of macro DMARK
3328						CALLMONITOR 
3328 cd aa fd			call debug_vector  
332b				endm  
# End of macro CALLMONITOR
332b					endif 
332b			 
332b eb					ex de, hl 
332c ed 52				sbc hl, de 
332e			 
332e					if DEBUG_FORTH_WORDS 
332e						DMARK "-2d" 
332e f5				push af  
332f 3a 43 33			ld a, (.dmark)  
3332 32 a0 fd			ld (debug_mark),a  
3335 3a 44 33			ld a, (.dmark+1)  
3338 32 a1 fd			ld (debug_mark+1),a  
333b 3a 45 33			ld a, (.dmark+2)  
333e 32 a2 fd			ld (debug_mark+2),a  
3341 18 03			jr .pastdmark  
3343 ..			.dmark: db "-2d"  
3346 f1			.pastdmark: pop af  
3347			endm  
# End of macro DMARK
3347						CALLMONITOR 
3347 cd aa fd			call debug_vector  
334a				endm  
# End of macro CALLMONITOR
334a					endif 
334a			 
334a					; move result to de 
334a			 
334a eb					ex de, hl 
334b			 
334b					; Address 
334b			 
334b e1					pop hl 
334c			 
334c					; save it back 
334c			 
334c 73					ld (hl), e 
334d 23					inc hl 
334e 72					ld (hl), d 
334f			 
334f					if DEBUG_FORTH_WORDS 
334f						DMARK "-2e" 
334f f5				push af  
3350 3a 64 33			ld a, (.dmark)  
3353 32 a0 fd			ld (debug_mark),a  
3356 3a 65 33			ld a, (.dmark+1)  
3359 32 a1 fd			ld (debug_mark+1),a  
335c 3a 66 33			ld a, (.dmark+2)  
335f 32 a2 fd			ld (debug_mark+2),a  
3362 18 03			jr .pastdmark  
3364 ..			.dmark: db "-2e"  
3367 f1			.pastdmark: pop af  
3368			endm  
# End of macro DMARK
3368						CALLMONITOR 
3368 cd aa fd			call debug_vector  
336b				endm  
# End of macro CALLMONITOR
336b					endif 
336b			 
336b			 
336b					FORTH_DSP_POP 
336b cd 05 23			call macro_forth_dsp_pop 
336e				endm 
# End of macro FORTH_DSP_POP
336e			 
336e			 
336e			 
336e				       NEXTW 
336e c3 39 24			jp macro_next 
3371				endm 
# End of macro NEXTW
3371			.GET2: 
3371				CWHEAD .BANG2 91 "2@" 2 WORD_FLAG_CODE 
3371 6f				db WORD_SYS_CORE+91             
3372 a6 33			dw .BANG2            
3374 03				db 2 + 1 
3375 .. 00			db "2@",0              
3378				endm 
# End of macro CWHEAD
3378			; | 2@ ( a -- u )  Push word at address a onto stack | DONE 
3378					if DEBUG_FORTH_WORDS_KEY 
3378						DMARK "2A_" 
3378 f5				push af  
3379 3a 8d 33			ld a, (.dmark)  
337c 32 a0 fd			ld (debug_mark),a  
337f 3a 8e 33			ld a, (.dmark+1)  
3382 32 a1 fd			ld (debug_mark+1),a  
3385 3a 8f 33			ld a, (.dmark+2)  
3388 32 a2 fd			ld (debug_mark+2),a  
338b 18 03			jr .pastdmark  
338d ..			.dmark: db "2A_"  
3390 f1			.pastdmark: pop af  
3391			endm  
# End of macro DMARK
3391						CALLMONITOR 
3391 cd aa fd			call debug_vector  
3394				endm  
# End of macro CALLMONITOR
3394					endif 
3394			 
3394					FORTH_DSP_VALUEHL 
3394 cd 4d 22			call macro_dsp_valuehl 
3397				endm 
# End of macro FORTH_DSP_VALUEHL
3397			 
3397 e5					push hl   ; save address 
3398			 
3398					FORTH_DSP_POP 
3398 cd 05 23			call macro_forth_dsp_pop 
339b				endm 
# End of macro FORTH_DSP_POP
339b			 
339b e1					pop hl 
339c			 
339c 5e					ld e, (hl) 
339d 23					inc hl 
339e 56					ld d, (hl) 
339f			 
339f eb					ex de, hl 
33a0			 
33a0 cd 48 20				call forth_push_numhl 
33a3			 
33a3				       NEXTW 
33a3 c3 39 24			jp macro_next 
33a6				endm 
# End of macro NEXTW
33a6			.BANG2: 
33a6				CWHEAD .CONFIG 91 "2!" 2 WORD_FLAG_CODE 
33a6 6f				db WORD_SYS_CORE+91             
33a7 de 33			dw .CONFIG            
33a9 03				db 2 + 1 
33aa .. 00			db "2!",0              
33ad				endm 
# End of macro CWHEAD
33ad			; | 2! ( u a -- )  Store value u as a word at address a | DONE 
33ad					if DEBUG_FORTH_WORDS_KEY 
33ad						DMARK "2S_" 
33ad f5				push af  
33ae 3a c2 33			ld a, (.dmark)  
33b1 32 a0 fd			ld (debug_mark),a  
33b4 3a c3 33			ld a, (.dmark+1)  
33b7 32 a1 fd			ld (debug_mark+1),a  
33ba 3a c4 33			ld a, (.dmark+2)  
33bd 32 a2 fd			ld (debug_mark+2),a  
33c0 18 03			jr .pastdmark  
33c2 ..			.dmark: db "2S_"  
33c5 f1			.pastdmark: pop af  
33c6			endm  
# End of macro DMARK
33c6						CALLMONITOR 
33c6 cd aa fd			call debug_vector  
33c9				endm  
# End of macro CALLMONITOR
33c9					endif 
33c9			 
33c9					FORTH_DSP_VALUEHL 
33c9 cd 4d 22			call macro_dsp_valuehl 
33cc				endm 
# End of macro FORTH_DSP_VALUEHL
33cc			 
33cc e5					push hl   ; save address 
33cd			 
33cd			 
33cd					FORTH_DSP_POP 
33cd cd 05 23			call macro_forth_dsp_pop 
33d0				endm 
# End of macro FORTH_DSP_POP
33d0			 
33d0					 
33d0					FORTH_DSP_VALUEHL 
33d0 cd 4d 22			call macro_dsp_valuehl 
33d3				endm 
# End of macro FORTH_DSP_VALUEHL
33d3			 
33d3					FORTH_DSP_POP 
33d3 cd 05 23			call macro_forth_dsp_pop 
33d6				endm 
# End of macro FORTH_DSP_POP
33d6			 
33d6 eb					ex de, hl    ; value now in de 
33d7			 
33d7 e1					pop hl 
33d8			 
33d8 73					ld (hl), e 
33d9			 
33d9 23					inc hl 
33da			 
33da 72					ld (hl), d 
33db			 
33db			 
33db				       NEXTW 
33db c3 39 24			jp macro_next 
33de				endm 
# End of macro NEXTW
33de			.CONFIG: 
33de				CWHEAD .ADTOS 91 "CONFIG" 6 WORD_FLAG_CODE 
33de 6f				db WORD_SYS_CORE+91             
33df ef 33			dw .ADTOS            
33e1 07				db 6 + 1 
33e2 .. 00			db "CONFIG",0              
33e9				endm 
# End of macro CWHEAD
33e9			; | CONFIG ( -- )  Access the system configuration menu. Set boot from file, hardware diags, and more! | DONE 
33e9			 
33e9 cd 52 15				call config 
33ec					NEXTW 
33ec c3 39 24			jp macro_next 
33ef				endm 
# End of macro NEXTW
33ef			 
33ef			.ADTOS: 
33ef				CWHEAD .SBTOS 91 "1+" 2 WORD_FLAG_CODE 
33ef 6f				db WORD_SYS_CORE+91             
33f0 05 34			dw .SBTOS            
33f2 03				db 2 + 1 
33f3 .. 00			db "1+",0              
33f6				endm 
# End of macro CWHEAD
33f6			; | 1+ ( u -- u )  Increment value on TOS | DONE 
33f6			 
33f6					FORTH_DSP_VALUEHL 
33f6 cd 4d 22			call macro_dsp_valuehl 
33f9				endm 
# End of macro FORTH_DSP_VALUEHL
33f9 e5					push hl 
33fa			 
33fa					FORTH_DSP_POP 
33fa cd 05 23			call macro_forth_dsp_pop 
33fd				endm 
# End of macro FORTH_DSP_POP
33fd e1					pop hl 
33fe			 
33fe 23					inc hl 
33ff cd 48 20				call forth_push_numhl 
3402					 
3402					NEXTW 
3402 c3 39 24			jp macro_next 
3405				endm 
# End of macro NEXTW
3405			.SBTOS: 
3405				CWHEAD .ADSTORE 91 "1-" 2 WORD_FLAG_CODE 
3405 6f				db WORD_SYS_CORE+91             
3406 1b 34			dw .ADSTORE            
3408 03				db 2 + 1 
3409 .. 00			db "1-",0              
340c				endm 
# End of macro CWHEAD
340c			; | 1- ( u -- u )  Decrement value on TOS | DONE 
340c			 
340c					FORTH_DSP_VALUEHL 
340c cd 4d 22			call macro_dsp_valuehl 
340f				endm 
# End of macro FORTH_DSP_VALUEHL
340f e5					push hl 
3410			 
3410					FORTH_DSP_POP 
3410 cd 05 23			call macro_forth_dsp_pop 
3413				endm 
# End of macro FORTH_DSP_POP
3413 e1					pop hl 
3414			 
3414 2b					dec hl 
3415 cd 48 20				call forth_push_numhl 
3418					 
3418					NEXTW 
3418 c3 39 24			jp macro_next 
341b				endm 
# End of macro NEXTW
341b			.ADSTORE: 
341b				CWHEAD .ADWSTORE 91 "1+!" 3 WORD_FLAG_CODE 
341b 6f				db WORD_SYS_CORE+91             
341c 31 34			dw .ADWSTORE            
341e 04				db 3 + 1 
341f .. 00			db "1+!",0              
3423				endm 
# End of macro CWHEAD
3423			; | 1+! ( addr -- )  Increment byte at address addr | DONE 
3423			 
3423					FORTH_DSP_VALUEHL 
3423 cd 4d 22			call macro_dsp_valuehl 
3426				endm 
# End of macro FORTH_DSP_VALUEHL
3426 e5					push hl 
3427			 
3427					FORTH_DSP_POP 
3427 cd 05 23			call macro_forth_dsp_pop 
342a				endm 
# End of macro FORTH_DSP_POP
342a e1					pop hl 
342b			 
342b 7e					ld a, (hl) 
342c 3c					inc a 
342d 77					ld (hl), a 
342e					 
342e					NEXTW 
342e c3 39 24			jp macro_next 
3431				endm 
# End of macro NEXTW
3431			.ADWSTORE: 
3431				CWHEAD .SBSTORE 91 "1+2!" 4 WORD_FLAG_CODE 
3431 6f				db WORD_SYS_CORE+91             
3432 4f 34			dw .SBSTORE            
3434 05				db 4 + 1 
3435 .. 00			db "1+2!",0              
343a				endm 
# End of macro CWHEAD
343a			; | 1+2! ( addr -- )  Increment word at address addr | DONE 
343a			 
343a					FORTH_DSP_VALUEHL 
343a cd 4d 22			call macro_dsp_valuehl 
343d				endm 
# End of macro FORTH_DSP_VALUEHL
343d e5					push hl 
343e			 
343e					FORTH_DSP_POP 
343e cd 05 23			call macro_forth_dsp_pop 
3441				endm 
# End of macro FORTH_DSP_POP
3441 e1					pop hl 
3442			 
3442 e5					push hl 
3443			 
3443 cd bb 23				call loadwordinhl 
3446 23					inc hl 
3447			 
3447 d1					pop de 
3448 eb					ex de, hl 
3449 73					ld (hl), e 
344a 23					inc hl 
344b 72					ld (hl), d 
344c					 
344c					NEXTW 
344c c3 39 24			jp macro_next 
344f				endm 
# End of macro NEXTW
344f			.SBSTORE: 
344f				CWHEAD .SBWSTORE 91 "1-!" 3 WORD_FLAG_CODE 
344f 6f				db WORD_SYS_CORE+91             
3450 65 34			dw .SBWSTORE            
3452 04				db 3 + 1 
3453 .. 00			db "1-!",0              
3457				endm 
# End of macro CWHEAD
3457			; | 1-! ( addr -- )  Decrement byte at address addr | DONE 
3457			 
3457					FORTH_DSP_VALUEHL 
3457 cd 4d 22			call macro_dsp_valuehl 
345a				endm 
# End of macro FORTH_DSP_VALUEHL
345a e5					push hl 
345b			 
345b					FORTH_DSP_POP 
345b cd 05 23			call macro_forth_dsp_pop 
345e				endm 
# End of macro FORTH_DSP_POP
345e e1					pop hl 
345f			 
345f 7e					ld a, (hl) 
3460 3d					dec a 
3461 77					ld (hl), a 
3462					 
3462					NEXTW 
3462 c3 39 24			jp macro_next 
3465				endm 
# End of macro NEXTW
3465			.SBWSTORE: 
3465				CWHEAD .ENDCORE 91 "1-2!" 4 WORD_FLAG_CODE 
3465 6f				db WORD_SYS_CORE+91             
3466 83 34			dw .ENDCORE            
3468 05				db 4 + 1 
3469 .. 00			db "1-2!",0              
346e				endm 
# End of macro CWHEAD
346e			; | 1-2! ( addr -- )  Decrement word at address addr | DONE 
346e			 
346e					FORTH_DSP_VALUEHL 
346e cd 4d 22			call macro_dsp_valuehl 
3471				endm 
# End of macro FORTH_DSP_VALUEHL
3471 e5					push hl 
3472			 
3472					FORTH_DSP_POP 
3472 cd 05 23			call macro_forth_dsp_pop 
3475				endm 
# End of macro FORTH_DSP_POP
3475 e1					pop hl 
3476			 
3476 e5					push hl 
3477			 
3477 cd bb 23				call loadwordinhl 
347a 2b					dec hl 
347b			 
347b d1					pop de 
347c eb					ex de, hl 
347d 73					ld (hl), e 
347e 23					inc hl 
347f 72					ld (hl), d 
3480					 
3480					NEXTW 
3480 c3 39 24			jp macro_next 
3483				endm 
# End of macro NEXTW
3483			.ENDCORE: 
3483			 
3483			; eof 
3483			 
3483			 
# End of file forth_words_core.asm
3483			include "forth_words_flow.asm" 
3483			 
3483			; | ## Program Flow Words 
3483			 
3483			.IF: 
3483				CWHEAD .THEN 10 "IF" 2 WORD_FLAG_CODE 
3483 1e				db WORD_SYS_CORE+10             
3484 78 35			dw .THEN            
3486 03				db 2 + 1 
3487 .. 00			db "IF",0              
348a				endm 
# End of macro CWHEAD
348a			; | IF ( w -- f ) If TOS is true exec code following up to THEN - Note: currently not supporting ELSE or nested IF | DONE 
348a			; 
348a					if DEBUG_FORTH_WORDS_KEY 
348a						DMARK "IF." 
348a f5				push af  
348b 3a 9f 34			ld a, (.dmark)  
348e 32 a0 fd			ld (debug_mark),a  
3491 3a a0 34			ld a, (.dmark+1)  
3494 32 a1 fd			ld (debug_mark+1),a  
3497 3a a1 34			ld a, (.dmark+2)  
349a 32 a2 fd			ld (debug_mark+2),a  
349d 18 03			jr .pastdmark  
349f ..			.dmark: db "IF."  
34a2 f1			.pastdmark: pop af  
34a3			endm  
# End of macro DMARK
34a3						CALLMONITOR 
34a3 cd aa fd			call debug_vector  
34a6				endm  
# End of macro CALLMONITOR
34a6					endif 
34a6			; eval TOS 
34a6			 
34a6				FORTH_DSP_VALUEHL 
34a6 cd 4d 22			call macro_dsp_valuehl 
34a9				endm 
# End of macro FORTH_DSP_VALUEHL
34a9			 
34a9			;	push hl 
34a9				FORTH_DSP_POP 
34a9 cd 05 23			call macro_forth_dsp_pop 
34ac				endm 
# End of macro FORTH_DSP_POP
34ac			;	pop hl 
34ac			 
34ac					if DEBUG_FORTH_WORDS 
34ac						DMARK "IF1" 
34ac f5				push af  
34ad 3a c1 34			ld a, (.dmark)  
34b0 32 a0 fd			ld (debug_mark),a  
34b3 3a c2 34			ld a, (.dmark+1)  
34b6 32 a1 fd			ld (debug_mark+1),a  
34b9 3a c3 34			ld a, (.dmark+2)  
34bc 32 a2 fd			ld (debug_mark+2),a  
34bf 18 03			jr .pastdmark  
34c1 ..			.dmark: db "IF1"  
34c4 f1			.pastdmark: pop af  
34c5			endm  
# End of macro DMARK
34c5						CALLMONITOR 
34c5 cd aa fd			call debug_vector  
34c8				endm  
# End of macro CALLMONITOR
34c8					endif 
34c8 b7				or a        ; clear carry flag 
34c9 11 00 00			ld de, 0 
34cc eb				ex de,hl 
34cd ed 52			sbc hl, de 
34cf c2 59 35			jp nz, .iftrue 
34d2			 
34d2					if DEBUG_FORTH_WORDS 
34d2						DMARK "IF2" 
34d2 f5				push af  
34d3 3a e7 34			ld a, (.dmark)  
34d6 32 a0 fd			ld (debug_mark),a  
34d9 3a e8 34			ld a, (.dmark+1)  
34dc 32 a1 fd			ld (debug_mark+1),a  
34df 3a e9 34			ld a, (.dmark+2)  
34e2 32 a2 fd			ld (debug_mark+2),a  
34e5 18 03			jr .pastdmark  
34e7 ..			.dmark: db "IF2"  
34ea f1			.pastdmark: pop af  
34eb			endm  
# End of macro DMARK
34eb						CALLMONITOR 
34eb cd aa fd			call debug_vector  
34ee				endm  
# End of macro CALLMONITOR
34ee					endif 
34ee			 
34ee			; if not true then skip to THEN 
34ee			 
34ee				; TODO get tok_ptr 
34ee				; TODO consume toks until we get to THEN 
34ee			 
34ee 2a f7 f3			ld hl, (os_tok_ptr) 
34f1					if DEBUG_FORTH_WORDS 
34f1						DMARK "IF3" 
34f1 f5				push af  
34f2 3a 06 35			ld a, (.dmark)  
34f5 32 a0 fd			ld (debug_mark),a  
34f8 3a 07 35			ld a, (.dmark+1)  
34fb 32 a1 fd			ld (debug_mark+1),a  
34fe 3a 08 35			ld a, (.dmark+2)  
3501 32 a2 fd			ld (debug_mark+2),a  
3504 18 03			jr .pastdmark  
3506 ..			.dmark: db "IF3"  
3509 f1			.pastdmark: pop af  
350a			endm  
# End of macro DMARK
350a						CALLMONITOR 
350a cd aa fd			call debug_vector  
350d				endm  
# End of macro CALLMONITOR
350d						 
350d					endif 
350d 11 54 35			ld de, .ifthen 
3510					if DEBUG_FORTH_WORDS 
3510						DMARK "IF4" 
3510 f5				push af  
3511 3a 25 35			ld a, (.dmark)  
3514 32 a0 fd			ld (debug_mark),a  
3517 3a 26 35			ld a, (.dmark+1)  
351a 32 a1 fd			ld (debug_mark+1),a  
351d 3a 27 35			ld a, (.dmark+2)  
3520 32 a2 fd			ld (debug_mark+2),a  
3523 18 03			jr .pastdmark  
3525 ..			.dmark: db "IF4"  
3528 f1			.pastdmark: pop af  
3529			endm  
# End of macro DMARK
3529						CALLMONITOR 
3529 cd aa fd			call debug_vector  
352c				endm  
# End of macro CALLMONITOR
352c					endif 
352c cd 40 25			call findnexttok  
352f			 
352f					if DEBUG_FORTH_WORDS 
352f						DMARK "IF5" 
352f f5				push af  
3530 3a 44 35			ld a, (.dmark)  
3533 32 a0 fd			ld (debug_mark),a  
3536 3a 45 35			ld a, (.dmark+1)  
3539 32 a1 fd			ld (debug_mark+1),a  
353c 3a 46 35			ld a, (.dmark+2)  
353f 32 a2 fd			ld (debug_mark+2),a  
3542 18 03			jr .pastdmark  
3544 ..			.dmark: db "IF5"  
3547 f1			.pastdmark: pop af  
3548			endm  
# End of macro DMARK
3548						CALLMONITOR 
3548 cd aa fd			call debug_vector  
354b				endm  
# End of macro CALLMONITOR
354b					endif 
354b				; TODO replace below with ; exec using tok_ptr 
354b 22 f7 f3			ld (os_tok_ptr), hl 
354e c3 c2 24			jp exec1 
3551				NEXTW 
3551 c3 39 24			jp macro_next 
3554				endm 
# End of macro NEXTW
3554			 
3554 .. 00		.ifthen:  db "THEN",0 
3559			 
3559			.iftrue:		 
3559				; Exec next words normally 
3559			 
3559				; if true then exec following IF as normal 
3559					if DEBUG_FORTH_WORDS 
3559						DMARK "IFT" 
3559 f5				push af  
355a 3a 6e 35			ld a, (.dmark)  
355d 32 a0 fd			ld (debug_mark),a  
3560 3a 6f 35			ld a, (.dmark+1)  
3563 32 a1 fd			ld (debug_mark+1),a  
3566 3a 70 35			ld a, (.dmark+2)  
3569 32 a2 fd			ld (debug_mark+2),a  
356c 18 03			jr .pastdmark  
356e ..			.dmark: db "IFT"  
3571 f1			.pastdmark: pop af  
3572			endm  
# End of macro DMARK
3572						CALLMONITOR 
3572 cd aa fd			call debug_vector  
3575				endm  
# End of macro CALLMONITOR
3575					endif 
3575			 
3575					NEXTW 
3575 c3 39 24			jp macro_next 
3578				endm 
# End of macro NEXTW
3578			.THEN: 
3578				CWHEAD .ELSE 11 "THEN" 4 WORD_FLAG_CODE 
3578 1f				db WORD_SYS_CORE+11             
3579 a0 35			dw .ELSE            
357b 05				db 4 + 1 
357c .. 00			db "THEN",0              
3581				endm 
# End of macro CWHEAD
3581			; | THEN ( -- ) Does nothing. It is a marker for the end of an IF block | DONE 
3581					if DEBUG_FORTH_WORDS_KEY 
3581						DMARK "THN" 
3581 f5				push af  
3582 3a 96 35			ld a, (.dmark)  
3585 32 a0 fd			ld (debug_mark),a  
3588 3a 97 35			ld a, (.dmark+1)  
358b 32 a1 fd			ld (debug_mark+1),a  
358e 3a 98 35			ld a, (.dmark+2)  
3591 32 a2 fd			ld (debug_mark+2),a  
3594 18 03			jr .pastdmark  
3596 ..			.dmark: db "THN"  
3599 f1			.pastdmark: pop af  
359a			endm  
# End of macro DMARK
359a						CALLMONITOR 
359a cd aa fd			call debug_vector  
359d				endm  
# End of macro CALLMONITOR
359d					endif 
359d					NEXTW 
359d c3 39 24			jp macro_next 
35a0				endm 
# End of macro NEXTW
35a0			.ELSE: 
35a0				CWHEAD .DO 12 "ELSE" 2 WORD_FLAG_CODE 
35a0 20				db WORD_SYS_CORE+12             
35a1 c8 35			dw .DO            
35a3 03				db 2 + 1 
35a4 .. 00			db "ELSE",0              
35a9				endm 
# End of macro CWHEAD
35a9			; | ELSE ( -- ) Not supported - does nothing | TODO 
35a9			 
35a9					if DEBUG_FORTH_WORDS_KEY 
35a9						DMARK "ELS" 
35a9 f5				push af  
35aa 3a be 35			ld a, (.dmark)  
35ad 32 a0 fd			ld (debug_mark),a  
35b0 3a bf 35			ld a, (.dmark+1)  
35b3 32 a1 fd			ld (debug_mark+1),a  
35b6 3a c0 35			ld a, (.dmark+2)  
35b9 32 a2 fd			ld (debug_mark+2),a  
35bc 18 03			jr .pastdmark  
35be ..			.dmark: db "ELS"  
35c1 f1			.pastdmark: pop af  
35c2			endm  
# End of macro DMARK
35c2						CALLMONITOR 
35c2 cd aa fd			call debug_vector  
35c5				endm  
# End of macro CALLMONITOR
35c5					endif 
35c5			 
35c5			 
35c5					NEXTW 
35c5 c3 39 24			jp macro_next 
35c8				endm 
# End of macro NEXTW
35c8			.DO: 
35c8				CWHEAD .LOOP 13 "DO" 2 WORD_FLAG_CODE 
35c8 21				db WORD_SYS_CORE+13             
35c9 ef 36			dw .LOOP            
35cb 03				db 2 + 1 
35cc .. 00			db "DO",0              
35cf				endm 
# End of macro CWHEAD
35cf			; | DO ( u1 u2 -- ) Loop starting at u2 with a limit of u1 | DONE 
35cf			 
35cf					if DEBUG_FORTH_WORDS_KEY 
35cf						DMARK "DO." 
35cf f5				push af  
35d0 3a e4 35			ld a, (.dmark)  
35d3 32 a0 fd			ld (debug_mark),a  
35d6 3a e5 35			ld a, (.dmark+1)  
35d9 32 a1 fd			ld (debug_mark+1),a  
35dc 3a e6 35			ld a, (.dmark+2)  
35df 32 a2 fd			ld (debug_mark+2),a  
35e2 18 03			jr .pastdmark  
35e4 ..			.dmark: db "DO."  
35e7 f1			.pastdmark: pop af  
35e8			endm  
# End of macro DMARK
35e8						CALLMONITOR 
35e8 cd aa fd			call debug_vector  
35eb				endm  
# End of macro CALLMONITOR
35eb					endif 
35eb			;  push pc to rsp stack past the DO 
35eb			 
35eb 2a f7 f3				ld hl, (os_tok_ptr) 
35ee 23					inc hl   ; D 
35ef 23					inc hl  ; O 
35f0 23					inc hl   ; null 
35f1					if DEBUG_FORTH_WORDS 
35f1						DMARK "DO2" 
35f1 f5				push af  
35f2 3a 06 36			ld a, (.dmark)  
35f5 32 a0 fd			ld (debug_mark),a  
35f8 3a 07 36			ld a, (.dmark+1)  
35fb 32 a1 fd			ld (debug_mark+1),a  
35fe 3a 08 36			ld a, (.dmark+2)  
3601 32 a2 fd			ld (debug_mark+2),a  
3604 18 03			jr .pastdmark  
3606 ..			.dmark: db "DO2"  
3609 f1			.pastdmark: pop af  
360a			endm  
# End of macro DMARK
360a						CALLMONITOR 
360a cd aa fd			call debug_vector  
360d				endm  
# End of macro CALLMONITOR
360d					endif 
360d					FORTH_RSP_NEXT 
360d cd ef 1f			call macro_forth_rsp_next 
3610				endm 
# End of macro FORTH_RSP_NEXT
3610					if DEBUG_FORTH_WORDS 
3610						DMARK "DO3" 
3610 f5				push af  
3611 3a 25 36			ld a, (.dmark)  
3614 32 a0 fd			ld (debug_mark),a  
3617 3a 26 36			ld a, (.dmark+1)  
361a 32 a1 fd			ld (debug_mark+1),a  
361d 3a 27 36			ld a, (.dmark+2)  
3620 32 a2 fd			ld (debug_mark+2),a  
3623 18 03			jr .pastdmark  
3625 ..			.dmark: db "DO3"  
3628 f1			.pastdmark: pop af  
3629			endm  
# End of macro DMARK
3629						CALLMONITOR 
3629 cd aa fd			call debug_vector  
362c				endm  
# End of macro CALLMONITOR
362c					endif 
362c			 
362c					;if DEBUG_FORTH_WORDS 
362c				;		push hl 
362c			;		endif  
362c			 
362c			; get counters from data stack 
362c			 
362c			 
362c					FORTH_DSP_VALUEHL 
362c cd 4d 22			call macro_dsp_valuehl 
362f				endm 
# End of macro FORTH_DSP_VALUEHL
362f e5					push hl		 ; hl now has starting counter which needs to be tos 
3630			 
3630					if DEBUG_FORTH_WORDS 
3630						DMARK "DO4" 
3630 f5				push af  
3631 3a 45 36			ld a, (.dmark)  
3634 32 a0 fd			ld (debug_mark),a  
3637 3a 46 36			ld a, (.dmark+1)  
363a 32 a1 fd			ld (debug_mark+1),a  
363d 3a 47 36			ld a, (.dmark+2)  
3640 32 a2 fd			ld (debug_mark+2),a  
3643 18 03			jr .pastdmark  
3645 ..			.dmark: db "DO4"  
3648 f1			.pastdmark: pop af  
3649			endm  
# End of macro DMARK
3649						CALLMONITOR 
3649 cd aa fd			call debug_vector  
364c				endm  
# End of macro CALLMONITOR
364c					endif 
364c					FORTH_DSP_POP 
364c cd 05 23			call macro_forth_dsp_pop 
364f				endm 
# End of macro FORTH_DSP_POP
364f			 
364f					if DEBUG_FORTH_WORDS 
364f						DMARK "DO5" 
364f f5				push af  
3650 3a 64 36			ld a, (.dmark)  
3653 32 a0 fd			ld (debug_mark),a  
3656 3a 65 36			ld a, (.dmark+1)  
3659 32 a1 fd			ld (debug_mark+1),a  
365c 3a 66 36			ld a, (.dmark+2)  
365f 32 a2 fd			ld (debug_mark+2),a  
3662 18 03			jr .pastdmark  
3664 ..			.dmark: db "DO5"  
3667 f1			.pastdmark: pop af  
3668			endm  
# End of macro DMARK
3668						CALLMONITOR 
3668 cd aa fd			call debug_vector  
366b				endm  
# End of macro CALLMONITOR
366b					endif 
366b			 
366b					FORTH_DSP_VALUEHL 
366b cd 4d 22			call macro_dsp_valuehl 
366e				endm 
# End of macro FORTH_DSP_VALUEHL
366e			;		push hl		 ; hl now has starting limit counter 
366e			 
366e					if DEBUG_FORTH_WORDS 
366e						DMARK "DO6" 
366e f5				push af  
366f 3a 83 36			ld a, (.dmark)  
3672 32 a0 fd			ld (debug_mark),a  
3675 3a 84 36			ld a, (.dmark+1)  
3678 32 a1 fd			ld (debug_mark+1),a  
367b 3a 85 36			ld a, (.dmark+2)  
367e 32 a2 fd			ld (debug_mark+2),a  
3681 18 03			jr .pastdmark  
3683 ..			.dmark: db "DO6"  
3686 f1			.pastdmark: pop af  
3687			endm  
# End of macro DMARK
3687						CALLMONITOR 
3687 cd aa fd			call debug_vector  
368a				endm  
# End of macro CALLMONITOR
368a					endif 
368a					FORTH_DSP_POP 
368a cd 05 23			call macro_forth_dsp_pop 
368d				endm 
# End of macro FORTH_DSP_POP
368d			 
368d			; put counters on the loop stack 
368d			 
368d			;		pop hl			 ; limit counter 
368d d1					pop de			; start counter 
368e			 
368e					; push limit counter 
368e			 
368e					if DEBUG_FORTH_WORDS 
368e						DMARK "DO7" 
368e f5				push af  
368f 3a a3 36			ld a, (.dmark)  
3692 32 a0 fd			ld (debug_mark),a  
3695 3a a4 36			ld a, (.dmark+1)  
3698 32 a1 fd			ld (debug_mark+1),a  
369b 3a a5 36			ld a, (.dmark+2)  
369e 32 a2 fd			ld (debug_mark+2),a  
36a1 18 03			jr .pastdmark  
36a3 ..			.dmark: db "DO7"  
36a6 f1			.pastdmark: pop af  
36a7			endm  
# End of macro DMARK
36a7						CALLMONITOR 
36a7 cd aa fd			call debug_vector  
36aa				endm  
# End of macro CALLMONITOR
36aa					endif 
36aa					FORTH_LOOP_NEXT 
36aa cd 7e 22			call macro_forth_loop_next 
36ad				endm 
# End of macro FORTH_LOOP_NEXT
36ad			 
36ad					; push start counter 
36ad			 
36ad eb					ex de, hl 
36ae					if DEBUG_FORTH_WORDS 
36ae						DMARK "DO7" 
36ae f5				push af  
36af 3a c3 36			ld a, (.dmark)  
36b2 32 a0 fd			ld (debug_mark),a  
36b5 3a c4 36			ld a, (.dmark+1)  
36b8 32 a1 fd			ld (debug_mark+1),a  
36bb 3a c5 36			ld a, (.dmark+2)  
36be 32 a2 fd			ld (debug_mark+2),a  
36c1 18 03			jr .pastdmark  
36c3 ..			.dmark: db "DO7"  
36c6 f1			.pastdmark: pop af  
36c7			endm  
# End of macro DMARK
36c7						CALLMONITOR 
36c7 cd aa fd			call debug_vector  
36ca				endm  
# End of macro CALLMONITOR
36ca					endif 
36ca					FORTH_LOOP_NEXT 
36ca cd 7e 22			call macro_forth_loop_next 
36cd				endm 
# End of macro FORTH_LOOP_NEXT
36cd			 
36cd			 
36cd					; init first round of I counter 
36cd			 
36cd 22 1b f4				ld (os_current_i), hl 
36d0			 
36d0					if DEBUG_FORTH_WORDS 
36d0						DMARK "DO8" 
36d0 f5				push af  
36d1 3a e5 36			ld a, (.dmark)  
36d4 32 a0 fd			ld (debug_mark),a  
36d7 3a e6 36			ld a, (.dmark+1)  
36da 32 a1 fd			ld (debug_mark+1),a  
36dd 3a e7 36			ld a, (.dmark+2)  
36e0 32 a2 fd			ld (debug_mark+2),a  
36e3 18 03			jr .pastdmark  
36e5 ..			.dmark: db "DO8"  
36e8 f1			.pastdmark: pop af  
36e9			endm  
# End of macro DMARK
36e9						CALLMONITOR 
36e9 cd aa fd			call debug_vector  
36ec				endm  
# End of macro CALLMONITOR
36ec					endif 
36ec			 
36ec					NEXTW 
36ec c3 39 24			jp macro_next 
36ef				endm 
# End of macro NEXTW
36ef			.LOOP: 
36ef				CWHEAD .I 14 "LOOP" 4 WORD_FLAG_CODE 
36ef 22				db WORD_SYS_CORE+14             
36f0 07 38			dw .I            
36f2 05				db 4 + 1 
36f3 .. 00			db "LOOP",0              
36f8				endm 
# End of macro CWHEAD
36f8			; | LOOP ( -- ) Increment and test loop counter  | DONE 
36f8			 
36f8				; pop tos as current loop count to hl 
36f8			 
36f8				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
36f8			 
36f8				FORTH_LOOP_TOS 
36f8 cd b1 22			call macro_forth_loop_tos 
36fb				endm 
# End of macro FORTH_LOOP_TOS
36fb e5				push hl 
36fc			 
36fc					if DEBUG_FORTH_WORDS_KEY 
36fc						DMARK "LOP" 
36fc f5				push af  
36fd 3a 11 37			ld a, (.dmark)  
3700 32 a0 fd			ld (debug_mark),a  
3703 3a 12 37			ld a, (.dmark+1)  
3706 32 a1 fd			ld (debug_mark+1),a  
3709 3a 13 37			ld a, (.dmark+2)  
370c 32 a2 fd			ld (debug_mark+2),a  
370f 18 03			jr .pastdmark  
3711 ..			.dmark: db "LOP"  
3714 f1			.pastdmark: pop af  
3715			endm  
# End of macro DMARK
3715						CALLMONITOR 
3715 cd aa fd			call debug_vector  
3718				endm  
# End of macro CALLMONITOR
3718					endif 
3718				; next item on the stack is the limit. get it 
3718			 
3718			 
3718				FORTH_LOOP_POP 
3718 cd bb 22			call macro_forth_loop_pop 
371b				endm 
# End of macro FORTH_LOOP_POP
371b			 
371b				FORTH_LOOP_TOS 
371b cd b1 22			call macro_forth_loop_tos 
371e				endm 
# End of macro FORTH_LOOP_TOS
371e			 
371e d1				pop de		 ; de = i, hl = limit 
371f			 
371f					if DEBUG_FORTH_WORDS 
371f						DMARK "LP1" 
371f f5				push af  
3720 3a 34 37			ld a, (.dmark)  
3723 32 a0 fd			ld (debug_mark),a  
3726 3a 35 37			ld a, (.dmark+1)  
3729 32 a1 fd			ld (debug_mark+1),a  
372c 3a 36 37			ld a, (.dmark+2)  
372f 32 a2 fd			ld (debug_mark+2),a  
3732 18 03			jr .pastdmark  
3734 ..			.dmark: db "LP1"  
3737 f1			.pastdmark: pop af  
3738			endm  
# End of macro DMARK
3738						CALLMONITOR 
3738 cd aa fd			call debug_vector  
373b				endm  
# End of macro CALLMONITOR
373b					endif 
373b			 
373b				; go back to previous word 
373b			 
373b d5				push de    ; save I for inc later 
373c			 
373c			 
373c				; get limit 
373c				;  is I at limit? 
373c			 
373c			 
373c					if DEBUG_FORTH_WORDS 
373c						DMARK "LP1" 
373c f5				push af  
373d 3a 51 37			ld a, (.dmark)  
3740 32 a0 fd			ld (debug_mark),a  
3743 3a 52 37			ld a, (.dmark+1)  
3746 32 a1 fd			ld (debug_mark+1),a  
3749 3a 53 37			ld a, (.dmark+2)  
374c 32 a2 fd			ld (debug_mark+2),a  
374f 18 03			jr .pastdmark  
3751 ..			.dmark: db "LP1"  
3754 f1			.pastdmark: pop af  
3755			endm  
# End of macro DMARK
3755						CALLMONITOR 
3755 cd aa fd			call debug_vector  
3758				endm  
# End of macro CALLMONITOR
3758					endif 
3758			 
3758 ed 52			sbc hl, de 
375a			 
375a			 
375a				;  if at limit pop both limit and current off stack do NEXT and get rid of saved DO 
375a			 
375a 20 26				jr nz, .loopnotdone 
375c			 
375c e1				pop hl   ; get rid of saved I 
375d				FORTH_LOOP_POP     ; get rid of limit 
375d cd bb 22			call macro_forth_loop_pop 
3760				endm 
# End of macro FORTH_LOOP_POP
3760			 
3760				FORTH_RSP_POP     ; get rid of DO ptr 
3760 cd 10 20			call macro_forth_rsp_pop 
3763				endm 
# End of macro FORTH_RSP_POP
3763			 
3763			if DEBUG_FORTH_WORDS 
3763						DMARK "LP>" 
3763 f5				push af  
3764 3a 78 37			ld a, (.dmark)  
3767 32 a0 fd			ld (debug_mark),a  
376a 3a 79 37			ld a, (.dmark+1)  
376d 32 a1 fd			ld (debug_mark+1),a  
3770 3a 7a 37			ld a, (.dmark+2)  
3773 32 a2 fd			ld (debug_mark+2),a  
3776 18 03			jr .pastdmark  
3778 ..			.dmark: db "LP>"  
377b f1			.pastdmark: pop af  
377c			endm  
# End of macro DMARK
377c				CALLMONITOR 
377c cd aa fd			call debug_vector  
377f				endm  
# End of macro CALLMONITOR
377f			endif 
377f			 
377f					NEXTW 
377f c3 39 24			jp macro_next 
3782				endm 
# End of macro NEXTW
3782				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
3782			 
3782			.loopnotdone: 
3782			 
3782 e1				pop hl    ; get I 
3783 23				inc hl 
3784			 
3784			   	; save new I 
3784			 
3784			 
3784					; set I counter 
3784			 
3784 22 1b f4				ld (os_current_i), hl 
3787			 
3787					if DEBUG_FORTH_WORDS 
3787						DMARK "LPN" 
3787 f5				push af  
3788 3a 9c 37			ld a, (.dmark)  
378b 32 a0 fd			ld (debug_mark),a  
378e 3a 9d 37			ld a, (.dmark+1)  
3791 32 a1 fd			ld (debug_mark+1),a  
3794 3a 9e 37			ld a, (.dmark+2)  
3797 32 a2 fd			ld (debug_mark+2),a  
379a 18 03			jr .pastdmark  
379c ..			.dmark: db "LPN"  
379f f1			.pastdmark: pop af  
37a0			endm  
# End of macro DMARK
37a0					CALLMONITOR 
37a0 cd aa fd			call debug_vector  
37a3				endm  
# End of macro CALLMONITOR
37a3					endif 
37a3					 
37a3				FORTH_LOOP_NEXT 
37a3 cd 7e 22			call macro_forth_loop_next 
37a6				endm 
# End of macro FORTH_LOOP_NEXT
37a6			 
37a6			 
37a6					if DEBUG_FORTH_WORDS 
37a6 eb						ex de,hl 
37a7					endif 
37a7			 
37a7			;	; get DO ptr 
37a7			; 
37a7					if DEBUG_FORTH_WORDS 
37a7						DMARK "LP7" 
37a7 f5				push af  
37a8 3a bc 37			ld a, (.dmark)  
37ab 32 a0 fd			ld (debug_mark),a  
37ae 3a bd 37			ld a, (.dmark+1)  
37b1 32 a1 fd			ld (debug_mark+1),a  
37b4 3a be 37			ld a, (.dmark+2)  
37b7 32 a2 fd			ld (debug_mark+2),a  
37ba 18 03			jr .pastdmark  
37bc ..			.dmark: db "LP7"  
37bf f1			.pastdmark: pop af  
37c0			endm  
# End of macro DMARK
37c0					CALLMONITOR 
37c0 cd aa fd			call debug_vector  
37c3				endm  
# End of macro CALLMONITOR
37c3					endif 
37c3				FORTH_RSP_TOS 
37c3 cd 06 20			call macro_forth_rsp_tos 
37c6				endm 
# End of macro FORTH_RSP_TOS
37c6			 
37c6					if DEBUG_FORTH_WORDS 
37c6						DMARK "LP8" 
37c6 f5				push af  
37c7 3a db 37			ld a, (.dmark)  
37ca 32 a0 fd			ld (debug_mark),a  
37cd 3a dc 37			ld a, (.dmark+1)  
37d0 32 a1 fd			ld (debug_mark+1),a  
37d3 3a dd 37			ld a, (.dmark+2)  
37d6 32 a2 fd			ld (debug_mark+2),a  
37d9 18 03			jr .pastdmark  
37db ..			.dmark: db "LP8"  
37de f1			.pastdmark: pop af  
37df			endm  
# End of macro DMARK
37df					CALLMONITOR 
37df cd aa fd			call debug_vector  
37e2				endm  
# End of macro CALLMONITOR
37e2					endif 
37e2				;push hl 
37e2			 
37e2				; not going to DO any more 
37e2				; get rid of the RSP pointer as DO will add it back in 
37e2				;FORTH_RSP_POP 
37e2				;pop hl 
37e2			 
37e2				;ld hl,(cli_ret_sp) 
37e2				;ld e, (hl) 
37e2				;inc hl 
37e2				;ld d, (hl) 
37e2				;ex de,hl 
37e2 22 f7 f3			ld (os_tok_ptr), hl 
37e5					if DEBUG_FORTH_WORDS 
37e5						DMARK "LP<" 
37e5 f5				push af  
37e6 3a fa 37			ld a, (.dmark)  
37e9 32 a0 fd			ld (debug_mark),a  
37ec 3a fb 37			ld a, (.dmark+1)  
37ef 32 a1 fd			ld (debug_mark+1),a  
37f2 3a fc 37			ld a, (.dmark+2)  
37f5 32 a2 fd			ld (debug_mark+2),a  
37f8 18 03			jr .pastdmark  
37fa ..			.dmark: db "LP<"  
37fd f1			.pastdmark: pop af  
37fe			endm  
# End of macro DMARK
37fe					CALLMONITOR 
37fe cd aa fd			call debug_vector  
3801				endm  
# End of macro CALLMONITOR
3801				endif 
3801 c3 c2 24			jp exec1 
3804			 
3804					 
3804			 
3804			 
3804					NEXTW 
3804 c3 39 24			jp macro_next 
3807				endm 
# End of macro NEXTW
3807			.I:  
3807			 
3807				CWHEAD .DLOOP 74 "I" 1 WORD_FLAG_CODE 
3807 5e				db WORD_SYS_CORE+74             
3808 32 38			dw .DLOOP            
380a 02				db 1 + 1 
380b .. 00			db "I",0              
380d				endm 
# End of macro CWHEAD
380d			; | I ( -- ) Current loop counter | DONE 
380d					if DEBUG_FORTH_WORDS_KEY 
380d						DMARK "I.." 
380d f5				push af  
380e 3a 22 38			ld a, (.dmark)  
3811 32 a0 fd			ld (debug_mark),a  
3814 3a 23 38			ld a, (.dmark+1)  
3817 32 a1 fd			ld (debug_mark+1),a  
381a 3a 24 38			ld a, (.dmark+2)  
381d 32 a2 fd			ld (debug_mark+2),a  
3820 18 03			jr .pastdmark  
3822 ..			.dmark: db "I.."  
3825 f1			.pastdmark: pop af  
3826			endm  
# End of macro DMARK
3826						CALLMONITOR 
3826 cd aa fd			call debug_vector  
3829				endm  
# End of macro CALLMONITOR
3829					endif 
3829			 
3829 2a 1b f4				ld hl,(os_current_i) 
382c cd 48 20				call forth_push_numhl 
382f			 
382f					NEXTW 
382f c3 39 24			jp macro_next 
3832				endm 
# End of macro NEXTW
3832			.DLOOP: 
3832				CWHEAD .REPEAT 75 "-LOOP" 5 WORD_FLAG_CODE 
3832 5f				db WORD_SYS_CORE+75             
3833 13 39			dw .REPEAT            
3835 06				db 5 + 1 
3836 .. 00			db "-LOOP",0              
383c				endm 
# End of macro CWHEAD
383c			; | -LOOP ( -- ) Decrement and test loop counter  | DONE 
383c				; pop tos as current loop count to hl 
383c					if DEBUG_FORTH_WORDS_KEY 
383c						DMARK "-LP" 
383c f5				push af  
383d 3a 51 38			ld a, (.dmark)  
3840 32 a0 fd			ld (debug_mark),a  
3843 3a 52 38			ld a, (.dmark+1)  
3846 32 a1 fd			ld (debug_mark+1),a  
3849 3a 53 38			ld a, (.dmark+2)  
384c 32 a2 fd			ld (debug_mark+2),a  
384f 18 03			jr .pastdmark  
3851 ..			.dmark: db "-LP"  
3854 f1			.pastdmark: pop af  
3855			endm  
# End of macro DMARK
3855						CALLMONITOR 
3855 cd aa fd			call debug_vector  
3858				endm  
# End of macro CALLMONITOR
3858					endif 
3858			 
3858				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
3858			 
3858				FORTH_LOOP_TOS 
3858 cd b1 22			call macro_forth_loop_tos 
385b				endm 
# End of macro FORTH_LOOP_TOS
385b e5				push hl 
385c			 
385c					if DEBUG_FORTH_WORDS 
385c						DMARK "-LP" 
385c f5				push af  
385d 3a 71 38			ld a, (.dmark)  
3860 32 a0 fd			ld (debug_mark),a  
3863 3a 72 38			ld a, (.dmark+1)  
3866 32 a1 fd			ld (debug_mark+1),a  
3869 3a 73 38			ld a, (.dmark+2)  
386c 32 a2 fd			ld (debug_mark+2),a  
386f 18 03			jr .pastdmark  
3871 ..			.dmark: db "-LP"  
3874 f1			.pastdmark: pop af  
3875			endm  
# End of macro DMARK
3875						CALLMONITOR 
3875 cd aa fd			call debug_vector  
3878				endm  
# End of macro CALLMONITOR
3878					endif 
3878				; next item on the stack is the limit. get it 
3878			 
3878			 
3878				FORTH_LOOP_POP 
3878 cd bb 22			call macro_forth_loop_pop 
387b				endm 
# End of macro FORTH_LOOP_POP
387b			 
387b				FORTH_LOOP_TOS 
387b cd b1 22			call macro_forth_loop_tos 
387e				endm 
# End of macro FORTH_LOOP_TOS
387e			 
387e d1				pop de		 ; de = i, hl = limit 
387f			 
387f					if DEBUG_FORTH_WORDS 
387f						DMARK "-L1" 
387f f5				push af  
3880 3a 94 38			ld a, (.dmark)  
3883 32 a0 fd			ld (debug_mark),a  
3886 3a 95 38			ld a, (.dmark+1)  
3889 32 a1 fd			ld (debug_mark+1),a  
388c 3a 96 38			ld a, (.dmark+2)  
388f 32 a2 fd			ld (debug_mark+2),a  
3892 18 03			jr .pastdmark  
3894 ..			.dmark: db "-L1"  
3897 f1			.pastdmark: pop af  
3898			endm  
# End of macro DMARK
3898						CALLMONITOR 
3898 cd aa fd			call debug_vector  
389b				endm  
# End of macro CALLMONITOR
389b					endif 
389b			 
389b				; go back to previous word 
389b			 
389b d5				push de    ; save I for inc later 
389c			 
389c			 
389c				; get limit 
389c				;  is I at limit? 
389c			 
389c			 
389c					if DEBUG_FORTH_WORDS 
389c						DMARK "-L1" 
389c f5				push af  
389d 3a b1 38			ld a, (.dmark)  
38a0 32 a0 fd			ld (debug_mark),a  
38a3 3a b2 38			ld a, (.dmark+1)  
38a6 32 a1 fd			ld (debug_mark+1),a  
38a9 3a b3 38			ld a, (.dmark+2)  
38ac 32 a2 fd			ld (debug_mark+2),a  
38af 18 03			jr .pastdmark  
38b1 ..			.dmark: db "-L1"  
38b4 f1			.pastdmark: pop af  
38b5			endm  
# End of macro DMARK
38b5						CALLMONITOR 
38b5 cd aa fd			call debug_vector  
38b8				endm  
# End of macro CALLMONITOR
38b8					endif 
38b8			 
38b8 ed 52			sbc hl, de 
38ba			 
38ba			 
38ba				;  if at limit pop both limit and current off stack do NEXT and get rid of saved DO 
38ba			 
38ba 20 26				jr nz, .mloopnotdone 
38bc			 
38bc e1				pop hl   ; get rid of saved I 
38bd				FORTH_LOOP_POP     ; get rid of limit 
38bd cd bb 22			call macro_forth_loop_pop 
38c0				endm 
# End of macro FORTH_LOOP_POP
38c0			 
38c0				FORTH_RSP_POP     ; get rid of DO ptr 
38c0 cd 10 20			call macro_forth_rsp_pop 
38c3				endm 
# End of macro FORTH_RSP_POP
38c3			 
38c3			if DEBUG_FORTH_WORDS 
38c3						DMARK "-L>" 
38c3 f5				push af  
38c4 3a d8 38			ld a, (.dmark)  
38c7 32 a0 fd			ld (debug_mark),a  
38ca 3a d9 38			ld a, (.dmark+1)  
38cd 32 a1 fd			ld (debug_mark+1),a  
38d0 3a da 38			ld a, (.dmark+2)  
38d3 32 a2 fd			ld (debug_mark+2),a  
38d6 18 03			jr .pastdmark  
38d8 ..			.dmark: db "-L>"  
38db f1			.pastdmark: pop af  
38dc			endm  
# End of macro DMARK
38dc				CALLMONITOR 
38dc cd aa fd			call debug_vector  
38df				endm  
# End of macro CALLMONITOR
38df			endif 
38df			 
38df					NEXTW 
38df c3 39 24			jp macro_next 
38e2				endm 
# End of macro NEXTW
38e2				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
38e2			 
38e2			.mloopnotdone: 
38e2			 
38e2 e1				pop hl    ; get I 
38e3 2b				dec hl 
38e4			 
38e4			   	; save new I 
38e4			 
38e4			 
38e4					; set I counter 
38e4			 
38e4 22 1b f4				ld (os_current_i), hl 
38e7			 
38e7					 
38e7				FORTH_LOOP_NEXT 
38e7 cd 7e 22			call macro_forth_loop_next 
38ea				endm 
# End of macro FORTH_LOOP_NEXT
38ea			 
38ea			 
38ea					if DEBUG_FORTH_WORDS 
38ea eb						ex de,hl 
38eb					endif 
38eb			 
38eb			;	; get DO ptr 
38eb			; 
38eb				FORTH_RSP_TOS 
38eb cd 06 20			call macro_forth_rsp_tos 
38ee				endm 
# End of macro FORTH_RSP_TOS
38ee			 
38ee				;push hl 
38ee			 
38ee				; not going to DO any more 
38ee				; get rid of the RSP pointer as DO will add it back in 
38ee				;FORTH_RSP_POP 
38ee				;pop hl 
38ee			 
38ee			 
38ee 22 f7 f3			ld (os_tok_ptr), hl 
38f1					if DEBUG_FORTH_WORDS 
38f1						DMARK "-L<" 
38f1 f5				push af  
38f2 3a 06 39			ld a, (.dmark)  
38f5 32 a0 fd			ld (debug_mark),a  
38f8 3a 07 39			ld a, (.dmark+1)  
38fb 32 a1 fd			ld (debug_mark+1),a  
38fe 3a 08 39			ld a, (.dmark+2)  
3901 32 a2 fd			ld (debug_mark+2),a  
3904 18 03			jr .pastdmark  
3906 ..			.dmark: db "-L<"  
3909 f1			.pastdmark: pop af  
390a			endm  
# End of macro DMARK
390a					CALLMONITOR 
390a cd aa fd			call debug_vector  
390d				endm  
# End of macro CALLMONITOR
390d				endif 
390d c3 c2 24			jp exec1 
3910			 
3910					 
3910			 
3910			 
3910			 
3910				NEXTW 
3910 c3 39 24			jp macro_next 
3913				endm 
# End of macro NEXTW
3913			 
3913			 
3913			 
3913			 
3913			.REPEAT: 
3913				CWHEAD .UNTIL 93 "REPEAT" 5 WORD_FLAG_CODE 
3913 71				db WORD_SYS_CORE+93             
3914 66 39			dw .UNTIL            
3916 06				db 5 + 1 
3917 .. 00			db "REPEAT",0              
391e				endm 
# End of macro CWHEAD
391e			; | REPEAT ( --  ) Start REPEAT...UNTIL loop  | DONE 
391e			;  push pc to rsp stack past the REPEAT 
391e					if DEBUG_FORTH_WORDS_KEY 
391e						DMARK "REP" 
391e f5				push af  
391f 3a 33 39			ld a, (.dmark)  
3922 32 a0 fd			ld (debug_mark),a  
3925 3a 34 39			ld a, (.dmark+1)  
3928 32 a1 fd			ld (debug_mark+1),a  
392b 3a 35 39			ld a, (.dmark+2)  
392e 32 a2 fd			ld (debug_mark+2),a  
3931 18 03			jr .pastdmark  
3933 ..			.dmark: db "REP"  
3936 f1			.pastdmark: pop af  
3937			endm  
# End of macro DMARK
3937						CALLMONITOR 
3937 cd aa fd			call debug_vector  
393a				endm  
# End of macro CALLMONITOR
393a					endif 
393a			 
393a 2a f7 f3				ld hl, (os_tok_ptr) 
393d 23					inc hl   ; R 
393e 23					inc hl  ; E 
393f 23					inc hl   ; P 
3940 23					inc hl   ; E 
3941 23					inc hl   ; A 
3942 23					inc hl   ; T 
3943 23					inc hl   ; zero 
3944					FORTH_RSP_NEXT 
3944 cd ef 1f			call macro_forth_rsp_next 
3947				endm 
# End of macro FORTH_RSP_NEXT
3947			 
3947			 
3947					if DEBUG_FORTH_WORDS 
3947						DMARK "REP" 
3947 f5				push af  
3948 3a 5c 39			ld a, (.dmark)  
394b 32 a0 fd			ld (debug_mark),a  
394e 3a 5d 39			ld a, (.dmark+1)  
3951 32 a1 fd			ld (debug_mark+1),a  
3954 3a 5e 39			ld a, (.dmark+2)  
3957 32 a2 fd			ld (debug_mark+2),a  
395a 18 03			jr .pastdmark  
395c ..			.dmark: db "REP"  
395f f1			.pastdmark: pop af  
3960			endm  
# End of macro DMARK
3960						;pop bc    ; TODO BUG ?????? what is this for???? 
3960						CALLMONITOR 
3960 cd aa fd			call debug_vector  
3963				endm  
# End of macro CALLMONITOR
3963					endif 
3963			 
3963					NEXTW 
3963 c3 39 24			jp macro_next 
3966				endm 
# End of macro NEXTW
3966			;	       NEXTW 
3966			 
3966			.UNTIL: 
3966				CWHEAD .ENDFLOW 94 "UNTIL" 5 WORD_FLAG_CODE 
3966 72				db WORD_SYS_CORE+94             
3967 fd 39			dw .ENDFLOW            
3969 06				db 5 + 1 
396a .. 00			db "UNTIL",0              
3970				endm 
# End of macro CWHEAD
3970			; | UNTIL ( u -- ) Exit REPEAT...UNTIL loop if TOS is false  | DONE 
3970			 
3970				; pop tos as check 
3970			 
3970				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
3970			 
3970				FORTH_DSP_VALUEHL 
3970 cd 4d 22			call macro_dsp_valuehl 
3973				endm 
# End of macro FORTH_DSP_VALUEHL
3973			 
3973					if DEBUG_FORTH_WORDS_KEY 
3973						DMARK "UNT" 
3973 f5				push af  
3974 3a 88 39			ld a, (.dmark)  
3977 32 a0 fd			ld (debug_mark),a  
397a 3a 89 39			ld a, (.dmark+1)  
397d 32 a1 fd			ld (debug_mark+1),a  
3980 3a 8a 39			ld a, (.dmark+2)  
3983 32 a2 fd			ld (debug_mark+2),a  
3986 18 03			jr .pastdmark  
3988 ..			.dmark: db "UNT"  
398b f1			.pastdmark: pop af  
398c			endm  
# End of macro DMARK
398c						CALLMONITOR 
398c cd aa fd			call debug_vector  
398f				endm  
# End of macro CALLMONITOR
398f					endif 
398f			 
398f			;	push hl 
398f				FORTH_DSP_POP 
398f cd 05 23			call macro_forth_dsp_pop 
3992				endm 
# End of macro FORTH_DSP_POP
3992			 
3992			;	pop hl 
3992			 
3992				; test if true 
3992			 
3992 cd 07 10			call ishlzero 
3995			;	ld a,l 
3995			;	add h 
3995			; 
3995			;	cp 0 
3995			 
3995 20 3e			jr nz, .untilnotdone 
3997			 
3997					if DEBUG_FORTH_WORDS 
3997						DMARK "UNf" 
3997 f5				push af  
3998 3a ac 39			ld a, (.dmark)  
399b 32 a0 fd			ld (debug_mark),a  
399e 3a ad 39			ld a, (.dmark+1)  
39a1 32 a1 fd			ld (debug_mark+1),a  
39a4 3a ae 39			ld a, (.dmark+2)  
39a7 32 a2 fd			ld (debug_mark+2),a  
39aa 18 03			jr .pastdmark  
39ac ..			.dmark: db "UNf"  
39af f1			.pastdmark: pop af  
39b0			endm  
# End of macro DMARK
39b0						CALLMONITOR 
39b0 cd aa fd			call debug_vector  
39b3				endm  
# End of macro CALLMONITOR
39b3					endif 
39b3			 
39b3			 
39b3			 
39b3				FORTH_RSP_POP     ; get rid of DO ptr 
39b3 cd 10 20			call macro_forth_rsp_pop 
39b6				endm 
# End of macro FORTH_RSP_POP
39b6			 
39b6			if DEBUG_FORTH_WORDS 
39b6						DMARK "UN>" 
39b6 f5				push af  
39b7 3a cb 39			ld a, (.dmark)  
39ba 32 a0 fd			ld (debug_mark),a  
39bd 3a cc 39			ld a, (.dmark+1)  
39c0 32 a1 fd			ld (debug_mark+1),a  
39c3 3a cd 39			ld a, (.dmark+2)  
39c6 32 a2 fd			ld (debug_mark+2),a  
39c9 18 03			jr .pastdmark  
39cb ..			.dmark: db "UN>"  
39ce f1			.pastdmark: pop af  
39cf			endm  
# End of macro DMARK
39cf				CALLMONITOR 
39cf cd aa fd			call debug_vector  
39d2				endm  
# End of macro CALLMONITOR
39d2			endif 
39d2			 
39d2					NEXTW 
39d2 c3 39 24			jp macro_next 
39d5				endm 
# End of macro NEXTW
39d5				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
39d5			 
39d5			.untilnotdone: 
39d5			 
39d5			 
39d5			;	; get DO ptr 
39d5			; 
39d5				FORTH_RSP_TOS 
39d5 cd 06 20			call macro_forth_rsp_tos 
39d8				endm 
# End of macro FORTH_RSP_TOS
39d8			 
39d8				;push hl 
39d8			 
39d8				; not going to DO any more 
39d8				; get rid of the RSP pointer as DO will add it back in 
39d8				;FORTH_RSP_POP 
39d8				;pop hl 
39d8			 
39d8			 
39d8 22 f7 f3			ld (os_tok_ptr), hl 
39db					if DEBUG_FORTH_WORDS 
39db						DMARK "UN<" 
39db f5				push af  
39dc 3a f0 39			ld a, (.dmark)  
39df 32 a0 fd			ld (debug_mark),a  
39e2 3a f1 39			ld a, (.dmark+1)  
39e5 32 a1 fd			ld (debug_mark+1),a  
39e8 3a f2 39			ld a, (.dmark+2)  
39eb 32 a2 fd			ld (debug_mark+2),a  
39ee 18 03			jr .pastdmark  
39f0 ..			.dmark: db "UN<"  
39f3 f1			.pastdmark: pop af  
39f4			endm  
# End of macro DMARK
39f4					CALLMONITOR 
39f4 cd aa fd			call debug_vector  
39f7				endm  
# End of macro CALLMONITOR
39f7				endif 
39f7 c3 c2 24			jp exec1 
39fa			 
39fa					 
39fa			 
39fa			 
39fa					NEXTW 
39fa c3 39 24			jp macro_next 
39fd				endm 
# End of macro NEXTW
39fd			 
39fd			 
39fd			.ENDFLOW: 
39fd			 
39fd			; eof 
39fd			 
# End of file forth_words_flow.asm
39fd			; TODO something wrong with the first word of the next word group. no matter which group applies. On device, sc114 is fine. bad memory? 
39fd			include "forth_words_logic.asm" 
39fd			 
39fd			; | ## Logic Words 
39fd			 
39fd			.NOT: 
39fd				CWHEAD .IS 25 "NOT" 3 WORD_FLAG_CODE 
39fd 2d				db WORD_SYS_CORE+25             
39fe 45 3a			dw .IS            
3a00 04				db 3 + 1 
3a01 .. 00			db "NOT",0              
3a05				endm 
# End of macro CWHEAD
3a05			; | NOT ( u  -- u ) Inverse true/false on stack | DONE 
3a05					if DEBUG_FORTH_WORDS_KEY 
3a05						DMARK "NOT" 
3a05 f5				push af  
3a06 3a 1a 3a			ld a, (.dmark)  
3a09 32 a0 fd			ld (debug_mark),a  
3a0c 3a 1b 3a			ld a, (.dmark+1)  
3a0f 32 a1 fd			ld (debug_mark+1),a  
3a12 3a 1c 3a			ld a, (.dmark+2)  
3a15 32 a2 fd			ld (debug_mark+2),a  
3a18 18 03			jr .pastdmark  
3a1a ..			.dmark: db "NOT"  
3a1d f1			.pastdmark: pop af  
3a1e			endm  
# End of macro DMARK
3a1e						CALLMONITOR 
3a1e cd aa fd			call debug_vector  
3a21				endm  
# End of macro CALLMONITOR
3a21					endif 
3a21					FORTH_DSP 
3a21 cd 13 22			call macro_forth_dsp 
3a24				endm 
# End of macro FORTH_DSP
3a24 7e					ld a,(hl)	; get type of value on TOS 
3a25 fe 02				cp DS_TYPE_INUM  
3a27 28 03				jr z, .noti 
3a29					NEXTW 
3a29 c3 39 24			jp macro_next 
3a2c				endm 
# End of macro NEXTW
3a2c			.noti:          FORTH_DSP_VALUEHL 
3a2c cd 4d 22			call macro_dsp_valuehl 
3a2f				endm 
# End of macro FORTH_DSP_VALUEHL
3a2f			;		push hl 
3a2f					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3a2f cd 05 23			call macro_forth_dsp_pop 
3a32				endm 
# End of macro FORTH_DSP_POP
3a32			;		pop hl 
3a32 3e 00				ld a,0 
3a34 bd					cp l 
3a35 28 04				jr z, .not2t 
3a37 2e 00				ld l, 0 
3a39 18 02				jr .notip 
3a3b			 
3a3b 2e ff		.not2t:		ld l, 255 
3a3d			 
3a3d 26 00		.notip:		ld h, 0	 
3a3f			 
3a3f cd 48 20				call forth_push_numhl 
3a42					NEXTW 
3a42 c3 39 24			jp macro_next 
3a45				endm 
# End of macro NEXTW
3a45			 
3a45			.IS: 
3a45				CWHEAD .LZERO 25 "IS" 2 WORD_FLAG_CODE 
3a45 2d				db WORD_SYS_CORE+25             
3a46 6b 3a			dw .LZERO            
3a48 03				db 2 + 1 
3a49 .. 00			db "IS",0              
3a4c				endm 
# End of macro CWHEAD
3a4c			; | IS ( s1 s2  -- f ) Push true if string s1 is the same as s2 | TODO 
3a4c					if DEBUG_FORTH_WORDS_KEY 
3a4c						DMARK "IS." 
3a4c f5				push af  
3a4d 3a 61 3a			ld a, (.dmark)  
3a50 32 a0 fd			ld (debug_mark),a  
3a53 3a 62 3a			ld a, (.dmark+1)  
3a56 32 a1 fd			ld (debug_mark+1),a  
3a59 3a 63 3a			ld a, (.dmark+2)  
3a5c 32 a2 fd			ld (debug_mark+2),a  
3a5f 18 03			jr .pastdmark  
3a61 ..			.dmark: db "IS."  
3a64 f1			.pastdmark: pop af  
3a65			endm  
# End of macro DMARK
3a65						CALLMONITOR 
3a65 cd aa fd			call debug_vector  
3a68				endm  
# End of macro CALLMONITOR
3a68					endif 
3a68					NEXTW 
3a68 c3 39 24			jp macro_next 
3a6b				endm 
# End of macro NEXTW
3a6b			.LZERO: 
3a6b				CWHEAD .TZERO 25 "0<" 2 WORD_FLAG_CODE 
3a6b 2d				db WORD_SYS_CORE+25             
3a6c 75 3a			dw .TZERO            
3a6e 03				db 2 + 1 
3a6f .. 00			db "0<",0              
3a72				endm 
# End of macro CWHEAD
3a72			; | 0< ( u -- f ) Push true if u is less than o | CANT DO UNTIL FLOAT 
3a72					NEXTW 
3a72 c3 39 24			jp macro_next 
3a75				endm 
# End of macro NEXTW
3a75			.TZERO: 
3a75				CWHEAD .LESS 26 "0=" 2 WORD_FLAG_CODE 
3a75 2e				db WORD_SYS_CORE+26             
3a76 bc 3a			dw .LESS            
3a78 03				db 2 + 1 
3a79 .. 00			db "0=",0              
3a7c				endm 
# End of macro CWHEAD
3a7c			; | 0= ( u -- f ) Push true if u equals 0 | DONE 
3a7c				; TODO add floating point number detection 
3a7c					;v5 FORTH_DSP_VALUE 
3a7c					if DEBUG_FORTH_WORDS_KEY 
3a7c						DMARK "0=." 
3a7c f5				push af  
3a7d 3a 91 3a			ld a, (.dmark)  
3a80 32 a0 fd			ld (debug_mark),a  
3a83 3a 92 3a			ld a, (.dmark+1)  
3a86 32 a1 fd			ld (debug_mark+1),a  
3a89 3a 93 3a			ld a, (.dmark+2)  
3a8c 32 a2 fd			ld (debug_mark+2),a  
3a8f 18 03			jr .pastdmark  
3a91 ..			.dmark: db "0=."  
3a94 f1			.pastdmark: pop af  
3a95			endm  
# End of macro DMARK
3a95						CALLMONITOR 
3a95 cd aa fd			call debug_vector  
3a98				endm  
# End of macro CALLMONITOR
3a98					endif 
3a98					FORTH_DSP 
3a98 cd 13 22			call macro_forth_dsp 
3a9b				endm 
# End of macro FORTH_DSP
3a9b 7e					ld a,(hl)	; get type of value on TOS 
3a9c fe 02				cp DS_TYPE_INUM  
3a9e 28 00				jr z, .tz_inum 
3aa0			 
3aa0				if FORTH_ENABLE_FLOATMATH 
3aa0					jr .tz_done 
3aa0			 
3aa0				endif 
3aa0					 
3aa0			 
3aa0			.tz_inum: 
3aa0					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3aa0 cd 4d 22			call macro_dsp_valuehl 
3aa3				endm 
# End of macro FORTH_DSP_VALUEHL
3aa3			 
3aa3			;		push hl 
3aa3			 
3aa3					; destroy value TOS 
3aa3			 
3aa3					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3aa3 cd 05 23			call macro_forth_dsp_pop 
3aa6				endm 
# End of macro FORTH_DSP_POP
3aa6			 
3aa6			;		pop hl 
3aa6			 
3aa6 3e 00				ld a,0 
3aa8			 
3aa8 bd					cp l 
3aa9 20 08				jr nz, .tz_notzero 
3aab			 
3aab bc					cp h 
3aac			 
3aac 20 05				jr nz, .tz_notzero 
3aae			 
3aae			 
3aae 21 01 00				ld hl, FORTH_TRUE 
3ab1 18 03				jr .tz_done 
3ab3			 
3ab3 21 00 00		.tz_notzero:	ld hl, FORTH_FALSE 
3ab6			 
3ab6					; push value back onto stack for another op etc 
3ab6			 
3ab6			.tz_done: 
3ab6 cd 48 20				call forth_push_numhl 
3ab9			 
3ab9					NEXTW 
3ab9 c3 39 24			jp macro_next 
3abc				endm 
# End of macro NEXTW
3abc			.LESS: 
3abc				CWHEAD .GT 27 "<" 1 WORD_FLAG_CODE 
3abc 2f				db WORD_SYS_CORE+27             
3abd 25 3b			dw .GT            
3abf 02				db 1 + 1 
3ac0 .. 00			db "<",0              
3ac2				endm 
# End of macro CWHEAD
3ac2			; | < ( u1 u2 -- f ) True if u1 is less than u2 | DONE 
3ac2				; TODO add floating point number detection 
3ac2					if DEBUG_FORTH_WORDS_KEY 
3ac2						DMARK "LES" 
3ac2 f5				push af  
3ac3 3a d7 3a			ld a, (.dmark)  
3ac6 32 a0 fd			ld (debug_mark),a  
3ac9 3a d8 3a			ld a, (.dmark+1)  
3acc 32 a1 fd			ld (debug_mark+1),a  
3acf 3a d9 3a			ld a, (.dmark+2)  
3ad2 32 a2 fd			ld (debug_mark+2),a  
3ad5 18 03			jr .pastdmark  
3ad7 ..			.dmark: db "LES"  
3ada f1			.pastdmark: pop af  
3adb			endm  
# End of macro DMARK
3adb						CALLMONITOR 
3adb cd aa fd			call debug_vector  
3ade				endm  
# End of macro CALLMONITOR
3ade					endif 
3ade					FORTH_DSP 
3ade cd 13 22			call macro_forth_dsp 
3ae1				endm 
# End of macro FORTH_DSP
3ae1					;v5 FORTH_DSP_VALUE 
3ae1 7e					ld a,(hl)	; get type of value on TOS 
3ae2 fe 02				cp DS_TYPE_INUM  
3ae4 28 00				jr z, .less_inum 
3ae6			 
3ae6				if FORTH_ENABLE_FLOATMATH 
3ae6					jr .less_done 
3ae6			 
3ae6				endif 
3ae6					 
3ae6			 
3ae6			.less_inum: 
3ae6					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3ae6 cd 4d 22			call macro_dsp_valuehl 
3ae9				endm 
# End of macro FORTH_DSP_VALUEHL
3ae9			 
3ae9 e5					push hl  ; u2 
3aea			 
3aea					; destroy value TOS 
3aea			 
3aea					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3aea cd 05 23			call macro_forth_dsp_pop 
3aed				endm 
# End of macro FORTH_DSP_POP
3aed			 
3aed			 
3aed					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3aed cd 4d 22			call macro_dsp_valuehl 
3af0				endm 
# End of macro FORTH_DSP_VALUEHL
3af0			 
3af0 e5					push hl    ; u1 
3af1			 
3af1					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3af1 cd 05 23			call macro_forth_dsp_pop 
3af4				endm 
# End of macro FORTH_DSP_POP
3af4			 
3af4			 
3af4 b7			 or a      ;clear carry flag 
3af5 01 00 00		 ld bc, FORTH_FALSE 
3af8 e1			  pop hl    ; u1 
3af9 d1			  pop de    ; u2 
3afa ed 52		  sbc hl,de 
3afc 30 03		  jr nc,.lscont   	;	if hl >= de, carry flag will be cleared 
3afe			 
3afe 01 01 00		 ld bc, FORTH_TRUE 
3b01			.lscont:  
3b01 c5					push bc 
3b02 e1					pop hl 
3b03			 
3b03					if DEBUG_FORTH_WORDS 
3b03						DMARK "LT1" 
3b03 f5				push af  
3b04 3a 18 3b			ld a, (.dmark)  
3b07 32 a0 fd			ld (debug_mark),a  
3b0a 3a 19 3b			ld a, (.dmark+1)  
3b0d 32 a1 fd			ld (debug_mark+1),a  
3b10 3a 1a 3b			ld a, (.dmark+2)  
3b13 32 a2 fd			ld (debug_mark+2),a  
3b16 18 03			jr .pastdmark  
3b18 ..			.dmark: db "LT1"  
3b1b f1			.pastdmark: pop af  
3b1c			endm  
# End of macro DMARK
3b1c						CALLMONITOR 
3b1c cd aa fd			call debug_vector  
3b1f				endm  
# End of macro CALLMONITOR
3b1f					endif 
3b1f cd 48 20				call forth_push_numhl 
3b22			 
3b22					NEXTW 
3b22 c3 39 24			jp macro_next 
3b25				endm 
# End of macro NEXTW
3b25			.GT: 
3b25				CWHEAD .EQUAL 28 ">" 1 WORD_FLAG_CODE 
3b25 30				db WORD_SYS_CORE+28             
3b26 8e 3b			dw .EQUAL            
3b28 02				db 1 + 1 
3b29 .. 00			db ">",0              
3b2b				endm 
# End of macro CWHEAD
3b2b			; | > ( u1 u2 -- f ) True if u1 is greater than u2 | DONE 
3b2b				; TODO add floating point number detection 
3b2b					if DEBUG_FORTH_WORDS_KEY 
3b2b						DMARK "GRT" 
3b2b f5				push af  
3b2c 3a 40 3b			ld a, (.dmark)  
3b2f 32 a0 fd			ld (debug_mark),a  
3b32 3a 41 3b			ld a, (.dmark+1)  
3b35 32 a1 fd			ld (debug_mark+1),a  
3b38 3a 42 3b			ld a, (.dmark+2)  
3b3b 32 a2 fd			ld (debug_mark+2),a  
3b3e 18 03			jr .pastdmark  
3b40 ..			.dmark: db "GRT"  
3b43 f1			.pastdmark: pop af  
3b44			endm  
# End of macro DMARK
3b44						CALLMONITOR 
3b44 cd aa fd			call debug_vector  
3b47				endm  
# End of macro CALLMONITOR
3b47					endif 
3b47					FORTH_DSP 
3b47 cd 13 22			call macro_forth_dsp 
3b4a				endm 
# End of macro FORTH_DSP
3b4a					;FORTH_DSP_VALUE 
3b4a 7e					ld a,(hl)	; get type of value on TOS 
3b4b fe 02				cp DS_TYPE_INUM  
3b4d 28 00				jr z, .gt_inum 
3b4f			 
3b4f				if FORTH_ENABLE_FLOATMATH 
3b4f					jr .gt_done 
3b4f			 
3b4f				endif 
3b4f					 
3b4f			 
3b4f			.gt_inum: 
3b4f					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3b4f cd 4d 22			call macro_dsp_valuehl 
3b52				endm 
# End of macro FORTH_DSP_VALUEHL
3b52			 
3b52 e5					push hl  ; u2 
3b53			 
3b53					; destroy value TOS 
3b53			 
3b53					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3b53 cd 05 23			call macro_forth_dsp_pop 
3b56				endm 
# End of macro FORTH_DSP_POP
3b56			 
3b56			 
3b56					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3b56 cd 4d 22			call macro_dsp_valuehl 
3b59				endm 
# End of macro FORTH_DSP_VALUEHL
3b59			 
3b59 e5					push hl    ; u1 
3b5a			 
3b5a					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3b5a cd 05 23			call macro_forth_dsp_pop 
3b5d				endm 
# End of macro FORTH_DSP_POP
3b5d			 
3b5d			 
3b5d b7			 or a      ;clear carry flag 
3b5e 01 00 00		 ld bc, FORTH_FALSE 
3b61 e1			  pop hl    ; u1 
3b62 d1			  pop de    ; u2 
3b63 ed 52		  sbc hl,de 
3b65 38 03		  jr c,.gtcont   	;	if hl >= de, carry flag will be cleared 
3b67			 
3b67 01 01 00		 ld bc, FORTH_TRUE 
3b6a			.gtcont:  
3b6a c5					push bc 
3b6b e1					pop hl 
3b6c			 
3b6c					if DEBUG_FORTH_WORDS 
3b6c						DMARK "GT1" 
3b6c f5				push af  
3b6d 3a 81 3b			ld a, (.dmark)  
3b70 32 a0 fd			ld (debug_mark),a  
3b73 3a 82 3b			ld a, (.dmark+1)  
3b76 32 a1 fd			ld (debug_mark+1),a  
3b79 3a 83 3b			ld a, (.dmark+2)  
3b7c 32 a2 fd			ld (debug_mark+2),a  
3b7f 18 03			jr .pastdmark  
3b81 ..			.dmark: db "GT1"  
3b84 f1			.pastdmark: pop af  
3b85			endm  
# End of macro DMARK
3b85						CALLMONITOR 
3b85 cd aa fd			call debug_vector  
3b88				endm  
# End of macro CALLMONITOR
3b88					endif 
3b88 cd 48 20				call forth_push_numhl 
3b8b			 
3b8b					NEXTW 
3b8b c3 39 24			jp macro_next 
3b8e				endm 
# End of macro NEXTW
3b8e			.EQUAL: 
3b8e				CWHEAD .ENDLOGIC 29 "=" 1 WORD_FLAG_CODE 
3b8e 31				db WORD_SYS_CORE+29             
3b8f f9 3b			dw .ENDLOGIC            
3b91 02				db 1 + 1 
3b92 .. 00			db "=",0              
3b94				endm 
# End of macro CWHEAD
3b94			; | = ( u1 u2 -- f ) True if u1 equals u2 | DONE 
3b94				; TODO add floating point number detection 
3b94					if DEBUG_FORTH_WORDS_KEY 
3b94						DMARK "EQ." 
3b94 f5				push af  
3b95 3a a9 3b			ld a, (.dmark)  
3b98 32 a0 fd			ld (debug_mark),a  
3b9b 3a aa 3b			ld a, (.dmark+1)  
3b9e 32 a1 fd			ld (debug_mark+1),a  
3ba1 3a ab 3b			ld a, (.dmark+2)  
3ba4 32 a2 fd			ld (debug_mark+2),a  
3ba7 18 03			jr .pastdmark  
3ba9 ..			.dmark: db "EQ."  
3bac f1			.pastdmark: pop af  
3bad			endm  
# End of macro DMARK
3bad						CALLMONITOR 
3bad cd aa fd			call debug_vector  
3bb0				endm  
# End of macro CALLMONITOR
3bb0					endif 
3bb0					FORTH_DSP 
3bb0 cd 13 22			call macro_forth_dsp 
3bb3				endm 
# End of macro FORTH_DSP
3bb3					;v5 FORTH_DSP_VALUE 
3bb3 7e					ld a,(hl)	; get type of value on TOS 
3bb4 fe 02				cp DS_TYPE_INUM  
3bb6 28 00				jr z, .eq_inum 
3bb8			 
3bb8				if FORTH_ENABLE_FLOATMATH 
3bb8					jr .eq_done 
3bb8			 
3bb8				endif 
3bb8					 
3bb8			 
3bb8			.eq_inum: 
3bb8					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3bb8 cd 4d 22			call macro_dsp_valuehl 
3bbb				endm 
# End of macro FORTH_DSP_VALUEHL
3bbb			 
3bbb e5					push hl 
3bbc			 
3bbc					; destroy value TOS 
3bbc			 
3bbc					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3bbc cd 05 23			call macro_forth_dsp_pop 
3bbf				endm 
# End of macro FORTH_DSP_POP
3bbf			 
3bbf			 
3bbf					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3bbf cd 4d 22			call macro_dsp_valuehl 
3bc2				endm 
# End of macro FORTH_DSP_VALUEHL
3bc2			 
3bc2					; one value on hl get other one back 
3bc2			 
3bc2 e5					push hl 
3bc3			 
3bc3					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3bc3 cd 05 23			call macro_forth_dsp_pop 
3bc6				endm 
# End of macro FORTH_DSP_POP
3bc6			 
3bc6 0e 00				ld c, FORTH_FALSE 
3bc8			 
3bc8 e1					pop hl 
3bc9 d1					pop de 
3bca			 
3bca 7b					ld a, e 
3bcb bd					cp l 
3bcc			 
3bcc 20 06				jr nz, .eq_done 
3bce			 
3bce 7a					ld a, d 
3bcf bc					cp h 
3bd0			 
3bd0 20 02				jr nz, .eq_done 
3bd2			 
3bd2 0e 01				ld c, FORTH_TRUE 
3bd4					 
3bd4			 
3bd4			 
3bd4			.eq_done: 
3bd4			 
3bd4					; TODO push value back onto stack for another op etc 
3bd4			 
3bd4 26 00				ld h, 0 
3bd6 69					ld l, c 
3bd7					if DEBUG_FORTH_WORDS 
3bd7						DMARK "EQ1" 
3bd7 f5				push af  
3bd8 3a ec 3b			ld a, (.dmark)  
3bdb 32 a0 fd			ld (debug_mark),a  
3bde 3a ed 3b			ld a, (.dmark+1)  
3be1 32 a1 fd			ld (debug_mark+1),a  
3be4 3a ee 3b			ld a, (.dmark+2)  
3be7 32 a2 fd			ld (debug_mark+2),a  
3bea 18 03			jr .pastdmark  
3bec ..			.dmark: db "EQ1"  
3bef f1			.pastdmark: pop af  
3bf0			endm  
# End of macro DMARK
3bf0						CALLMONITOR 
3bf0 cd aa fd			call debug_vector  
3bf3				endm  
# End of macro CALLMONITOR
3bf3					endif 
3bf3 cd 48 20				call forth_push_numhl 
3bf6			 
3bf6					NEXTW 
3bf6 c3 39 24			jp macro_next 
3bf9				endm 
# End of macro NEXTW
3bf9			 
3bf9			 
3bf9			.ENDLOGIC: 
3bf9			; eof 
3bf9			 
3bf9			 
# End of file forth_words_logic.asm
3bf9			include "forth_words_maths.asm" 
3bf9			 
3bf9			; | ## Maths Words 
3bf9			 
3bf9			.PLUS:	 
3bf9				CWHEAD .NEG 1 "+" 1 WORD_FLAG_CODE 
3bf9 15				db WORD_SYS_CORE+1             
3bfa 57 3c			dw .NEG            
3bfc 02				db 1 + 1 
3bfd .. 00			db "+",0              
3bff				endm 
# End of macro CWHEAD
3bff			; | + ( u u -- u )    Add two numbers and push result   | INT DONE 
3bff					if DEBUG_FORTH_WORDS_KEY 
3bff						DMARK "PLU" 
3bff f5				push af  
3c00 3a 14 3c			ld a, (.dmark)  
3c03 32 a0 fd			ld (debug_mark),a  
3c06 3a 15 3c			ld a, (.dmark+1)  
3c09 32 a1 fd			ld (debug_mark+1),a  
3c0c 3a 16 3c			ld a, (.dmark+2)  
3c0f 32 a2 fd			ld (debug_mark+2),a  
3c12 18 03			jr .pastdmark  
3c14 ..			.dmark: db "PLU"  
3c17 f1			.pastdmark: pop af  
3c18			endm  
# End of macro DMARK
3c18						CALLMONITOR 
3c18 cd aa fd			call debug_vector  
3c1b				endm  
# End of macro CALLMONITOR
3c1b					endif 
3c1b					; add top two values and push back result 
3c1b			 
3c1b					;for v5 FORTH_DSP_VALUE 
3c1b					FORTH_DSP 
3c1b cd 13 22			call macro_forth_dsp 
3c1e				endm 
# End of macro FORTH_DSP
3c1e 7e					ld a,(hl)	; get type of value on TOS 
3c1f fe 02				cp DS_TYPE_INUM  
3c21 28 03				jr z, .dot_inum 
3c23			 
3c23					NEXTW 
3c23 c3 39 24			jp macro_next 
3c26				endm 
# End of macro NEXTW
3c26			 
3c26			; float maths 
3c26			 
3c26				if FORTH_ENABLE_FLOATMATH 
3c26						inc hl      ; now at start of numeric as string 
3c26			 
3c26					if DEBUG_FORTH_MATHS 
3c26						DMARK "ADD" 
3c26				CALLMONITOR 
3c26					endif 
3c26			 
3c26					;ld ix, hl 
3c26					call CON 
3c26			 
3c26			 
3c26					push hl 
3c26					 
3c26					 
3c26			 
3c26						FORTH_DSP_POP      ; TODO add stock underflow checks and throws  
3c26			 
3c26					; get next number 
3c26			 
3c26						FORTH_DSP_VALUE 
3c26			 
3c26						inc hl      ; now at start of numeric as string 
3c26			 
3c26					;ld ix, hl 
3c26					call CON 
3c26			 
3c26					push hl 
3c26			 
3c26			 
3c26						FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3c26			 
3c26						; TODO do add 
3c26			 
3c26						call IADD 
3c26			 
3c26						; TODO get result back as ascii 
3c26			 
3c26						; TODO push result  
3c26			 
3c26			 
3c26			 
3c26						jr .dot_done 
3c26				endif 
3c26			 
3c26			.dot_inum: 
3c26			 
3c26			 
3c26					if DEBUG_FORTH_DOT 
3c26						DMARK "+IT" 
3c26 f5				push af  
3c27 3a 3b 3c			ld a, (.dmark)  
3c2a 32 a0 fd			ld (debug_mark),a  
3c2d 3a 3c 3c			ld a, (.dmark+1)  
3c30 32 a1 fd			ld (debug_mark+1),a  
3c33 3a 3d 3c			ld a, (.dmark+2)  
3c36 32 a2 fd			ld (debug_mark+2),a  
3c39 18 03			jr .pastdmark  
3c3b ..			.dmark: db "+IT"  
3c3e f1			.pastdmark: pop af  
3c3f			endm  
# End of macro DMARK
3c3f				CALLMONITOR 
3c3f cd aa fd			call debug_vector  
3c42				endm  
# End of macro CALLMONITOR
3c42					endif 
3c42			 
3c42					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3c42 cd 4d 22			call macro_dsp_valuehl 
3c45				endm 
# End of macro FORTH_DSP_VALUEHL
3c45			 
3c45				; TODO add floating point number detection 
3c45			 
3c45 e5					push hl 
3c46			 
3c46					; destroy value TOS 
3c46			 
3c46					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3c46 cd 05 23			call macro_forth_dsp_pop 
3c49				endm 
# End of macro FORTH_DSP_POP
3c49			 
3c49			 
3c49					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3c49 cd 4d 22			call macro_dsp_valuehl 
3c4c				endm 
# End of macro FORTH_DSP_VALUEHL
3c4c			 
3c4c					; one value on hl get other one back 
3c4c			 
3c4c d1					pop de 
3c4d			 
3c4d					; do the add 
3c4d			 
3c4d 19					add hl,de 
3c4e			 
3c4e					; save it 
3c4e			 
3c4e			;		push hl	 
3c4e			 
3c4e					; 
3c4e			 
3c4e					; destroy value TOS 
3c4e			 
3c4e					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3c4e cd 05 23			call macro_forth_dsp_pop 
3c51				endm 
# End of macro FORTH_DSP_POP
3c51			 
3c51					; TODO push value back onto stack for another op etc 
3c51			 
3c51			;		pop hl 
3c51			 
3c51			.dot_done: 
3c51 cd 48 20				call forth_push_numhl 
3c54			 
3c54					NEXTW 
3c54 c3 39 24			jp macro_next 
3c57				endm 
# End of macro NEXTW
3c57			.NEG: 
3c57			 
3c57				CWHEAD .DIV 3 "-" 1 WORD_FLAG_CODE 
3c57 17				db WORD_SYS_CORE+3             
3c58 9a 3c			dw .DIV            
3c5a 02				db 1 + 1 
3c5b .. 00			db "-",0              
3c5d				endm 
# End of macro CWHEAD
3c5d			; | - ( u1 u2 -- u )    Subtract u2 from u1 and push result  | INT DONE 
3c5d					if DEBUG_FORTH_WORDS_KEY 
3c5d						DMARK "SUB" 
3c5d f5				push af  
3c5e 3a 72 3c			ld a, (.dmark)  
3c61 32 a0 fd			ld (debug_mark),a  
3c64 3a 73 3c			ld a, (.dmark+1)  
3c67 32 a1 fd			ld (debug_mark+1),a  
3c6a 3a 74 3c			ld a, (.dmark+2)  
3c6d 32 a2 fd			ld (debug_mark+2),a  
3c70 18 03			jr .pastdmark  
3c72 ..			.dmark: db "SUB"  
3c75 f1			.pastdmark: pop af  
3c76			endm  
# End of macro DMARK
3c76						CALLMONITOR 
3c76 cd aa fd			call debug_vector  
3c79				endm  
# End of macro CALLMONITOR
3c79					endif 
3c79			 
3c79			 
3c79				; TODO add floating point number detection 
3c79					; v5 FORTH_DSP_VALUE 
3c79					FORTH_DSP 
3c79 cd 13 22			call macro_forth_dsp 
3c7c				endm 
# End of macro FORTH_DSP
3c7c 7e					ld a,(hl)	; get type of value on TOS 
3c7d fe 02				cp DS_TYPE_INUM  
3c7f 28 03				jr z, .neg_inum 
3c81			 
3c81					NEXTW 
3c81 c3 39 24			jp macro_next 
3c84				endm 
# End of macro NEXTW
3c84			 
3c84			; float maths 
3c84			 
3c84				if FORTH_ENABLE_FLOATMATH 
3c84					jr .neg_done 
3c84			 
3c84				endif 
3c84					 
3c84			 
3c84			.neg_inum: 
3c84					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3c84 cd 4d 22			call macro_dsp_valuehl 
3c87				endm 
# End of macro FORTH_DSP_VALUEHL
3c87			 
3c87 e5					push hl 
3c88			 
3c88					; destroy value TOS 
3c88			 
3c88					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3c88 cd 05 23			call macro_forth_dsp_pop 
3c8b				endm 
# End of macro FORTH_DSP_POP
3c8b			 
3c8b			 
3c8b					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3c8b cd 4d 22			call macro_dsp_valuehl 
3c8e				endm 
# End of macro FORTH_DSP_VALUEHL
3c8e			 
3c8e					; one value on hl get other one back 
3c8e			 
3c8e d1					pop de 
3c8f			 
3c8f					; do the sub 
3c8f			;		ex de, hl 
3c8f			 
3c8f ed 52				sbc hl,de 
3c91			 
3c91					; save it 
3c91			 
3c91			;		push hl	 
3c91			 
3c91					; 
3c91			 
3c91					; destroy value TOS 
3c91			 
3c91					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3c91 cd 05 23			call macro_forth_dsp_pop 
3c94				endm 
# End of macro FORTH_DSP_POP
3c94			 
3c94					; TODO push value back onto stack for another op etc 
3c94			 
3c94			;		pop hl 
3c94			 
3c94 cd 48 20				call forth_push_numhl 
3c97			.neg_done: 
3c97			 
3c97					NEXTW 
3c97 c3 39 24			jp macro_next 
3c9a				endm 
# End of macro NEXTW
3c9a			.DIV: 
3c9a				CWHEAD .MUL 4 "/" 1 WORD_FLAG_CODE 
3c9a 18				db WORD_SYS_CORE+4             
3c9b e7 3c			dw .MUL            
3c9d 02				db 1 + 1 
3c9e .. 00			db "/",0              
3ca0				endm 
# End of macro CWHEAD
3ca0			; | / ( u1 u2 -- result remainder )     Divide u1 by u2 and push result | INT DONE 
3ca0					if DEBUG_FORTH_WORDS_KEY 
3ca0						DMARK "DIV" 
3ca0 f5				push af  
3ca1 3a b5 3c			ld a, (.dmark)  
3ca4 32 a0 fd			ld (debug_mark),a  
3ca7 3a b6 3c			ld a, (.dmark+1)  
3caa 32 a1 fd			ld (debug_mark+1),a  
3cad 3a b7 3c			ld a, (.dmark+2)  
3cb0 32 a2 fd			ld (debug_mark+2),a  
3cb3 18 03			jr .pastdmark  
3cb5 ..			.dmark: db "DIV"  
3cb8 f1			.pastdmark: pop af  
3cb9			endm  
# End of macro DMARK
3cb9						CALLMONITOR 
3cb9 cd aa fd			call debug_vector  
3cbc				endm  
# End of macro CALLMONITOR
3cbc					endif 
3cbc				; TODO add floating point number detection 
3cbc					; v5 FORTH_DSP_VALUE 
3cbc					FORTH_DSP 
3cbc cd 13 22			call macro_forth_dsp 
3cbf				endm 
# End of macro FORTH_DSP
3cbf 7e					ld a,(hl)	; get type of value on TOS 
3cc0 fe 02				cp DS_TYPE_INUM  
3cc2 28 03				jr z, .div_inum 
3cc4			 
3cc4				if FORTH_ENABLE_FLOATMATH 
3cc4					jr .div_done 
3cc4			 
3cc4				endif 
3cc4					NEXTW 
3cc4 c3 39 24			jp macro_next 
3cc7				endm 
# End of macro NEXTW
3cc7			.div_inum: 
3cc7			 
3cc7					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3cc7 cd 4d 22			call macro_dsp_valuehl 
3cca				endm 
# End of macro FORTH_DSP_VALUEHL
3cca			 
3cca e5					push hl    ; to go to bc 
3ccb			 
3ccb					; destroy value TOS 
3ccb			 
3ccb					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3ccb cd 05 23			call macro_forth_dsp_pop 
3cce				endm 
# End of macro FORTH_DSP_POP
3cce			 
3cce			 
3cce					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3cce cd 4d 22			call macro_dsp_valuehl 
3cd1				endm 
# End of macro FORTH_DSP_VALUEHL
3cd1			 
3cd1					; hl to go to de 
3cd1			 
3cd1 e5					push hl 
3cd2			 
3cd2 c1					pop bc 
3cd3 d1					pop de		 
3cd4			 
3cd4			 
3cd4					if DEBUG_FORTH_MATHS 
3cd4						DMARK "DIV" 
3cd4				CALLMONITOR 
3cd4					endif 
3cd4					; one value on hl but move to a get other one back 
3cd4			 
3cd4			        
3cd4 cd 3b 0f			call Div16 
3cd7			 
3cd7			;	push af	 
3cd7 e5				push hl 
3cd8 c5				push bc 
3cd9			 
3cd9					if DEBUG_FORTH_MATHS 
3cd9						DMARK "DI1" 
3cd9				CALLMONITOR 
3cd9					endif 
3cd9			 
3cd9					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3cd9 cd 05 23			call macro_forth_dsp_pop 
3cdc				endm 
# End of macro FORTH_DSP_POP
3cdc			 
3cdc			 
3cdc			 
3cdc e1					pop hl    ; result 
3cdd			 
3cdd cd 48 20				call forth_push_numhl 
3ce0			 
3ce0 e1					pop hl    ; reminder 
3ce1			;		ld h,0 
3ce1			;		ld l,d 
3ce1			 
3ce1 cd 48 20				call forth_push_numhl 
3ce4			.div_done: 
3ce4					NEXTW 
3ce4 c3 39 24			jp macro_next 
3ce7				endm 
# End of macro NEXTW
3ce7			.MUL: 
3ce7				CWHEAD .MIN 5 "*" 1 WORD_FLAG_CODE 
3ce7 19				db WORD_SYS_CORE+5             
3ce8 2c 3d			dw .MIN            
3cea 02				db 1 + 1 
3ceb .. 00			db "*",0              
3ced				endm 
# End of macro CWHEAD
3ced			; | * ( u1 u2 -- u )     Multiply TOS and push result | INT DONE 
3ced				; TODO add floating point number detection 
3ced					if DEBUG_FORTH_WORDS_KEY 
3ced						DMARK "MUL" 
3ced f5				push af  
3cee 3a 02 3d			ld a, (.dmark)  
3cf1 32 a0 fd			ld (debug_mark),a  
3cf4 3a 03 3d			ld a, (.dmark+1)  
3cf7 32 a1 fd			ld (debug_mark+1),a  
3cfa 3a 04 3d			ld a, (.dmark+2)  
3cfd 32 a2 fd			ld (debug_mark+2),a  
3d00 18 03			jr .pastdmark  
3d02 ..			.dmark: db "MUL"  
3d05 f1			.pastdmark: pop af  
3d06			endm  
# End of macro DMARK
3d06						CALLMONITOR 
3d06 cd aa fd			call debug_vector  
3d09				endm  
# End of macro CALLMONITOR
3d09					endif 
3d09					FORTH_DSP 
3d09 cd 13 22			call macro_forth_dsp 
3d0c				endm 
# End of macro FORTH_DSP
3d0c					; v5 FORTH_DSP_VALUE 
3d0c 7e					ld a,(hl)	; get type of value on TOS 
3d0d fe 02				cp DS_TYPE_INUM  
3d0f 28 03				jr z, .mul_inum 
3d11			 
3d11				if FORTH_ENABLE_FLOATMATH 
3d11					jr .mul_done 
3d11			 
3d11				endif 
3d11			 
3d11					NEXTW 
3d11 c3 39 24			jp macro_next 
3d14				endm 
# End of macro NEXTW
3d14			.mul_inum:	 
3d14			 
3d14					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3d14 cd 4d 22			call macro_dsp_valuehl 
3d17				endm 
# End of macro FORTH_DSP_VALUEHL
3d17			 
3d17 e5					push hl 
3d18			 
3d18					; destroy value TOS 
3d18			 
3d18					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3d18 cd 05 23			call macro_forth_dsp_pop 
3d1b				endm 
# End of macro FORTH_DSP_POP
3d1b			 
3d1b			 
3d1b					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3d1b cd 4d 22			call macro_dsp_valuehl 
3d1e				endm 
# End of macro FORTH_DSP_VALUEHL
3d1e			 
3d1e					; one value on hl but move to a get other one back 
3d1e			 
3d1e 7d					ld a, l 
3d1f			 
3d1f d1					pop de 
3d20			 
3d20					; do the mull 
3d20			;		ex de, hl 
3d20			 
3d20 cd 61 0f				call Mult16 
3d23					; save it 
3d23			 
3d23			;		push hl	 
3d23			 
3d23					; 
3d23			 
3d23					; destroy value TOS 
3d23			 
3d23					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3d23 cd 05 23			call macro_forth_dsp_pop 
3d26				endm 
# End of macro FORTH_DSP_POP
3d26			 
3d26					; TODO push value back onto stack for another op etc 
3d26			 
3d26			;		pop hl 
3d26			 
3d26 cd 48 20				call forth_push_numhl 
3d29			 
3d29			.mul_done: 
3d29					NEXTW 
3d29 c3 39 24			jp macro_next 
3d2c				endm 
# End of macro NEXTW
3d2c			 
3d2c			 
3d2c			 
3d2c			 
3d2c			.MIN: 
3d2c				CWHEAD .MAX 53 "MIN" 3 WORD_FLAG_CODE 
3d2c 49				db WORD_SYS_CORE+53             
3d2d ad 3d			dw .MAX            
3d2f 04				db 3 + 1 
3d30 .. 00			db "MIN",0              
3d34				endm 
# End of macro CWHEAD
3d34			; | MIN (  u1 u2 -- u3 ) Whichever is the smallest value is pushed back onto the stack | DONE 
3d34					if DEBUG_FORTH_WORDS_KEY 
3d34						DMARK "MIN" 
3d34 f5				push af  
3d35 3a 49 3d			ld a, (.dmark)  
3d38 32 a0 fd			ld (debug_mark),a  
3d3b 3a 4a 3d			ld a, (.dmark+1)  
3d3e 32 a1 fd			ld (debug_mark+1),a  
3d41 3a 4b 3d			ld a, (.dmark+2)  
3d44 32 a2 fd			ld (debug_mark+2),a  
3d47 18 03			jr .pastdmark  
3d49 ..			.dmark: db "MIN"  
3d4c f1			.pastdmark: pop af  
3d4d			endm  
# End of macro DMARK
3d4d						CALLMONITOR 
3d4d cd aa fd			call debug_vector  
3d50				endm  
# End of macro CALLMONITOR
3d50					endif 
3d50					; get u2 
3d50			 
3d50					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3d50 cd 4d 22			call macro_dsp_valuehl 
3d53				endm 
# End of macro FORTH_DSP_VALUEHL
3d53			 
3d53 e5					push hl   ; u2 
3d54			 
3d54					; destroy value TOS 
3d54			 
3d54					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3d54 cd 05 23			call macro_forth_dsp_pop 
3d57				endm 
# End of macro FORTH_DSP_POP
3d57			 
3d57					; get u1 
3d57			 
3d57					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3d57 cd 4d 22			call macro_dsp_valuehl 
3d5a				endm 
# End of macro FORTH_DSP_VALUEHL
3d5a			 
3d5a e5					push hl  ; u1 
3d5b			 
3d5b					; destroy value TOS 
3d5b			 
3d5b					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3d5b cd 05 23			call macro_forth_dsp_pop 
3d5e				endm 
# End of macro FORTH_DSP_POP
3d5e			 
3d5e b7			 or a      ;clear carry flag 
3d5f e1			  pop hl    ; u1 
3d60 d1			  pop de    ; u2 
3d61 e5				push hl   ; saved in case hl is lowest 
3d62 ed 52		  sbc hl,de 
3d64 30 23		  jr nc,.mincont   	;	if hl >= de, carry flag will be cleared 
3d66			 
3d66 e1				pop hl 
3d67					if DEBUG_FORTH_WORDS 
3d67						DMARK "MIN" 
3d67 f5				push af  
3d68 3a 7c 3d			ld a, (.dmark)  
3d6b 32 a0 fd			ld (debug_mark),a  
3d6e 3a 7d 3d			ld a, (.dmark+1)  
3d71 32 a1 fd			ld (debug_mark+1),a  
3d74 3a 7e 3d			ld a, (.dmark+2)  
3d77 32 a2 fd			ld (debug_mark+2),a  
3d7a 18 03			jr .pastdmark  
3d7c ..			.dmark: db "MIN"  
3d7f f1			.pastdmark: pop af  
3d80			endm  
# End of macro DMARK
3d80						CALLMONITOR 
3d80 cd aa fd			call debug_vector  
3d83				endm  
# End of macro CALLMONITOR
3d83					endif 
3d83 cd 48 20				call forth_push_numhl 
3d86			 
3d86				       NEXTW 
3d86 c3 39 24			jp macro_next 
3d89				endm 
# End of macro NEXTW
3d89			 
3d89			.mincont:  
3d89 c1				pop bc   ; tidy up 
3d8a eb				ex de , hl  
3d8b					if DEBUG_FORTH_WORDS 
3d8b						DMARK "MI1" 
3d8b f5				push af  
3d8c 3a a0 3d			ld a, (.dmark)  
3d8f 32 a0 fd			ld (debug_mark),a  
3d92 3a a1 3d			ld a, (.dmark+1)  
3d95 32 a1 fd			ld (debug_mark+1),a  
3d98 3a a2 3d			ld a, (.dmark+2)  
3d9b 32 a2 fd			ld (debug_mark+2),a  
3d9e 18 03			jr .pastdmark  
3da0 ..			.dmark: db "MI1"  
3da3 f1			.pastdmark: pop af  
3da4			endm  
# End of macro DMARK
3da4						CALLMONITOR 
3da4 cd aa fd			call debug_vector  
3da7				endm  
# End of macro CALLMONITOR
3da7					endif 
3da7 cd 48 20				call forth_push_numhl 
3daa			 
3daa				       NEXTW 
3daa c3 39 24			jp macro_next 
3dad				endm 
# End of macro NEXTW
3dad			.MAX: 
3dad				CWHEAD .RND16 54 "MAX" 3 WORD_FLAG_CODE 
3dad 4a				db WORD_SYS_CORE+54             
3dae 2e 3e			dw .RND16            
3db0 04				db 3 + 1 
3db1 .. 00			db "MAX",0              
3db5				endm 
# End of macro CWHEAD
3db5			; | MAX (  u1 u2 -- u3 )  Whichever is the largest value is pushed back onto the stack | DONE 
3db5					if DEBUG_FORTH_WORDS_KEY 
3db5						DMARK "MAX" 
3db5 f5				push af  
3db6 3a ca 3d			ld a, (.dmark)  
3db9 32 a0 fd			ld (debug_mark),a  
3dbc 3a cb 3d			ld a, (.dmark+1)  
3dbf 32 a1 fd			ld (debug_mark+1),a  
3dc2 3a cc 3d			ld a, (.dmark+2)  
3dc5 32 a2 fd			ld (debug_mark+2),a  
3dc8 18 03			jr .pastdmark  
3dca ..			.dmark: db "MAX"  
3dcd f1			.pastdmark: pop af  
3dce			endm  
# End of macro DMARK
3dce						CALLMONITOR 
3dce cd aa fd			call debug_vector  
3dd1				endm  
# End of macro CALLMONITOR
3dd1					endif 
3dd1					; get u2 
3dd1			 
3dd1					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3dd1 cd 4d 22			call macro_dsp_valuehl 
3dd4				endm 
# End of macro FORTH_DSP_VALUEHL
3dd4			 
3dd4 e5					push hl   ; u2 
3dd5			 
3dd5					; destroy value TOS 
3dd5			 
3dd5					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3dd5 cd 05 23			call macro_forth_dsp_pop 
3dd8				endm 
# End of macro FORTH_DSP_POP
3dd8			 
3dd8					; get u1 
3dd8			 
3dd8					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3dd8 cd 4d 22			call macro_dsp_valuehl 
3ddb				endm 
# End of macro FORTH_DSP_VALUEHL
3ddb			 
3ddb e5					push hl  ; u1 
3ddc			 
3ddc					; destroy value TOS 
3ddc			 
3ddc					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3ddc cd 05 23			call macro_forth_dsp_pop 
3ddf				endm 
# End of macro FORTH_DSP_POP
3ddf			 
3ddf b7			 or a      ;clear carry flag 
3de0 e1			  pop hl    ; u1 
3de1 d1			  pop de    ; u2 
3de2 e5				push hl   ; saved in case hl is lowest 
3de3 ed 52		  sbc hl,de 
3de5 38 23		  jr c,.maxcont   	;	if hl <= de, carry flag will be cleared 
3de7			 
3de7 e1				pop hl 
3de8					if DEBUG_FORTH_WORDS 
3de8						DMARK "MAX" 
3de8 f5				push af  
3de9 3a fd 3d			ld a, (.dmark)  
3dec 32 a0 fd			ld (debug_mark),a  
3def 3a fe 3d			ld a, (.dmark+1)  
3df2 32 a1 fd			ld (debug_mark+1),a  
3df5 3a ff 3d			ld a, (.dmark+2)  
3df8 32 a2 fd			ld (debug_mark+2),a  
3dfb 18 03			jr .pastdmark  
3dfd ..			.dmark: db "MAX"  
3e00 f1			.pastdmark: pop af  
3e01			endm  
# End of macro DMARK
3e01						CALLMONITOR 
3e01 cd aa fd			call debug_vector  
3e04				endm  
# End of macro CALLMONITOR
3e04					endif 
3e04 cd 48 20				call forth_push_numhl 
3e07			 
3e07				       NEXTW 
3e07 c3 39 24			jp macro_next 
3e0a				endm 
# End of macro NEXTW
3e0a			 
3e0a			.maxcont:  
3e0a c1				pop bc   ; tidy up 
3e0b eb				ex de , hl  
3e0c					if DEBUG_FORTH_WORDS 
3e0c						DMARK "MA1" 
3e0c f5				push af  
3e0d 3a 21 3e			ld a, (.dmark)  
3e10 32 a0 fd			ld (debug_mark),a  
3e13 3a 22 3e			ld a, (.dmark+1)  
3e16 32 a1 fd			ld (debug_mark+1),a  
3e19 3a 23 3e			ld a, (.dmark+2)  
3e1c 32 a2 fd			ld (debug_mark+2),a  
3e1f 18 03			jr .pastdmark  
3e21 ..			.dmark: db "MA1"  
3e24 f1			.pastdmark: pop af  
3e25			endm  
# End of macro DMARK
3e25						CALLMONITOR 
3e25 cd aa fd			call debug_vector  
3e28				endm  
# End of macro CALLMONITOR
3e28					endif 
3e28 cd 48 20				call forth_push_numhl 
3e2b				       NEXTW 
3e2b c3 39 24			jp macro_next 
3e2e				endm 
# End of macro NEXTW
3e2e			 
3e2e			.RND16: 
3e2e				CWHEAD .RND8 58 "RND16" 5 WORD_FLAG_CODE 
3e2e 4e				db WORD_SYS_CORE+58             
3e2f 5d 3e			dw .RND8            
3e31 06				db 5 + 1 
3e32 .. 00			db "RND16",0              
3e38				endm 
# End of macro CWHEAD
3e38			; | RND16 (  -- n ) Generate a random 16bit number and push to stack | DONE 
3e38					if DEBUG_FORTH_WORDS_KEY 
3e38						DMARK "R16" 
3e38 f5				push af  
3e39 3a 4d 3e			ld a, (.dmark)  
3e3c 32 a0 fd			ld (debug_mark),a  
3e3f 3a 4e 3e			ld a, (.dmark+1)  
3e42 32 a1 fd			ld (debug_mark+1),a  
3e45 3a 4f 3e			ld a, (.dmark+2)  
3e48 32 a2 fd			ld (debug_mark+2),a  
3e4b 18 03			jr .pastdmark  
3e4d ..			.dmark: db "R16"  
3e50 f1			.pastdmark: pop af  
3e51			endm  
# End of macro DMARK
3e51						CALLMONITOR 
3e51 cd aa fd			call debug_vector  
3e54				endm  
# End of macro CALLMONITOR
3e54					endif 
3e54 cd 05 0f				call prng16  
3e57 cd 48 20				call forth_push_numhl 
3e5a				       NEXTW 
3e5a c3 39 24			jp macro_next 
3e5d				endm 
# End of macro NEXTW
3e5d			.RND8: 
3e5d				CWHEAD .RND 76 "RND8" 4 WORD_FLAG_CODE 
3e5d 60				db WORD_SYS_CORE+76             
3e5e 92 3e			dw .RND            
3e60 05				db 4 + 1 
3e61 .. 00			db "RND8",0              
3e66				endm 
# End of macro CWHEAD
3e66			; | RND8 (  -- n ) Generate a random 8bit number and push to stack | DONE 
3e66					if DEBUG_FORTH_WORDS_KEY 
3e66						DMARK "RN8" 
3e66 f5				push af  
3e67 3a 7b 3e			ld a, (.dmark)  
3e6a 32 a0 fd			ld (debug_mark),a  
3e6d 3a 7c 3e			ld a, (.dmark+1)  
3e70 32 a1 fd			ld (debug_mark+1),a  
3e73 3a 7d 3e			ld a, (.dmark+2)  
3e76 32 a2 fd			ld (debug_mark+2),a  
3e79 18 03			jr .pastdmark  
3e7b ..			.dmark: db "RN8"  
3e7e f1			.pastdmark: pop af  
3e7f			endm  
# End of macro DMARK
3e7f						CALLMONITOR 
3e7f cd aa fd			call debug_vector  
3e82				endm  
# End of macro CALLMONITOR
3e82					endif 
3e82 2a de fa				ld hl,(xrandc) 
3e85 23					inc hl 
3e86 cd 1f 0f				call xrnd 
3e89 6f					ld l,a	 
3e8a 26 00				ld h,0 
3e8c cd 48 20				call forth_push_numhl 
3e8f				       NEXTW 
3e8f c3 39 24			jp macro_next 
3e92				endm 
# End of macro NEXTW
3e92			.RND: 
3e92				CWHEAD .ENDMATHS 76 "RND" 3 WORD_FLAG_CODE 
3e92 60				db WORD_SYS_CORE+76             
3e93 98 3f			dw .ENDMATHS            
3e95 04				db 3 + 1 
3e96 .. 00			db "RND",0              
3e9a				endm 
# End of macro CWHEAD
3e9a			; | RND ( u1 u2 -- u ) Generate a random number no lower than u1 and no higher than u2 and push to stack | DONE 
3e9a			 
3e9a					if DEBUG_FORTH_WORDS_KEY 
3e9a						DMARK "RND" 
3e9a f5				push af  
3e9b 3a af 3e			ld a, (.dmark)  
3e9e 32 a0 fd			ld (debug_mark),a  
3ea1 3a b0 3e			ld a, (.dmark+1)  
3ea4 32 a1 fd			ld (debug_mark+1),a  
3ea7 3a b1 3e			ld a, (.dmark+2)  
3eaa 32 a2 fd			ld (debug_mark+2),a  
3ead 18 03			jr .pastdmark  
3eaf ..			.dmark: db "RND"  
3eb2 f1			.pastdmark: pop af  
3eb3			endm  
# End of macro DMARK
3eb3						CALLMONITOR 
3eb3 cd aa fd			call debug_vector  
3eb6				endm  
# End of macro CALLMONITOR
3eb6					endif 
3eb6					 
3eb6					FORTH_DSP_VALUEHL    ; upper range 
3eb6 cd 4d 22			call macro_dsp_valuehl 
3eb9				endm 
# End of macro FORTH_DSP_VALUEHL
3eb9			 
3eb9 22 e2 fa				ld (LFSRSeed), hl	 
3ebc			 
3ebc					if DEBUG_FORTH_WORDS 
3ebc						DMARK "RN1" 
3ebc f5				push af  
3ebd 3a d1 3e			ld a, (.dmark)  
3ec0 32 a0 fd			ld (debug_mark),a  
3ec3 3a d2 3e			ld a, (.dmark+1)  
3ec6 32 a1 fd			ld (debug_mark+1),a  
3ec9 3a d3 3e			ld a, (.dmark+2)  
3ecc 32 a2 fd			ld (debug_mark+2),a  
3ecf 18 03			jr .pastdmark  
3ed1 ..			.dmark: db "RN1"  
3ed4 f1			.pastdmark: pop af  
3ed5			endm  
# End of macro DMARK
3ed5						CALLMONITOR 
3ed5 cd aa fd			call debug_vector  
3ed8				endm  
# End of macro CALLMONITOR
3ed8					endif 
3ed8					FORTH_DSP_POP 
3ed8 cd 05 23			call macro_forth_dsp_pop 
3edb				endm 
# End of macro FORTH_DSP_POP
3edb			 
3edb					FORTH_DSP_VALUEHL    ; low range 
3edb cd 4d 22			call macro_dsp_valuehl 
3ede				endm 
# End of macro FORTH_DSP_VALUEHL
3ede			 
3ede					if DEBUG_FORTH_WORDS 
3ede						DMARK "RN2" 
3ede f5				push af  
3edf 3a f3 3e			ld a, (.dmark)  
3ee2 32 a0 fd			ld (debug_mark),a  
3ee5 3a f4 3e			ld a, (.dmark+1)  
3ee8 32 a1 fd			ld (debug_mark+1),a  
3eeb 3a f5 3e			ld a, (.dmark+2)  
3eee 32 a2 fd			ld (debug_mark+2),a  
3ef1 18 03			jr .pastdmark  
3ef3 ..			.dmark: db "RN2"  
3ef6 f1			.pastdmark: pop af  
3ef7			endm  
# End of macro DMARK
3ef7						CALLMONITOR 
3ef7 cd aa fd			call debug_vector  
3efa				endm  
# End of macro CALLMONITOR
3efa					endif 
3efa 22 e4 fa				ld (LFSRSeed+2), hl 
3efd			 
3efd					FORTH_DSP_POP 
3efd cd 05 23			call macro_forth_dsp_pop 
3f00				endm 
# End of macro FORTH_DSP_POP
3f00			 
3f00 e5					push hl 
3f01			 
3f01 e1			.inrange:	pop hl 
3f02 cd 05 0f				call prng16  
3f05					if DEBUG_FORTH_WORDS 
3f05						DMARK "RN3" 
3f05 f5				push af  
3f06 3a 1a 3f			ld a, (.dmark)  
3f09 32 a0 fd			ld (debug_mark),a  
3f0c 3a 1b 3f			ld a, (.dmark+1)  
3f0f 32 a1 fd			ld (debug_mark+1),a  
3f12 3a 1c 3f			ld a, (.dmark+2)  
3f15 32 a2 fd			ld (debug_mark+2),a  
3f18 18 03			jr .pastdmark  
3f1a ..			.dmark: db "RN3"  
3f1d f1			.pastdmark: pop af  
3f1e			endm  
# End of macro DMARK
3f1e						CALLMONITOR 
3f1e cd aa fd			call debug_vector  
3f21				endm  
# End of macro CALLMONITOR
3f21					endif 
3f21					 
3f21					; if the range is 8bit knock out the high byte 
3f21			 
3f21 ed 5b e2 fa			ld de, (LFSRSeed)     ; check high level 
3f25			 
3f25 3e 00				ld a, 0 
3f27 ba					cp d  
3f28 20 1e				jr nz, .hirange 
3f2a 26 00				ld h, 0   ; knock it down to 8bit 
3f2c			 
3f2c					if DEBUG_FORTH_WORDS 
3f2c						DMARK "RNk" 
3f2c f5				push af  
3f2d 3a 41 3f			ld a, (.dmark)  
3f30 32 a0 fd			ld (debug_mark),a  
3f33 3a 42 3f			ld a, (.dmark+1)  
3f36 32 a1 fd			ld (debug_mark+1),a  
3f39 3a 43 3f			ld a, (.dmark+2)  
3f3c 32 a2 fd			ld (debug_mark+2),a  
3f3f 18 03			jr .pastdmark  
3f41 ..			.dmark: db "RNk"  
3f44 f1			.pastdmark: pop af  
3f45			endm  
# End of macro DMARK
3f45						CALLMONITOR 
3f45 cd aa fd			call debug_vector  
3f48				endm  
# End of macro CALLMONITOR
3f48					endif 
3f48			.hirange:   
3f48 e5					push hl  
3f49 b7					or a  
3f4a ed 52		                sbc hl, de 
3f4c			 
3f4c					;call cmp16 
3f4c			 
3f4c 30 b3				jr nc, .inrange      ; if hl >= de, carry flag is cleared 
3f4e e1					pop hl 
3f4f e5					push hl 
3f50			 
3f50					if DEBUG_FORTH_WORDS 
3f50						DMARK "RN4" 
3f50 f5				push af  
3f51 3a 65 3f			ld a, (.dmark)  
3f54 32 a0 fd			ld (debug_mark),a  
3f57 3a 66 3f			ld a, (.dmark+1)  
3f5a 32 a1 fd			ld (debug_mark+1),a  
3f5d 3a 67 3f			ld a, (.dmark+2)  
3f60 32 a2 fd			ld (debug_mark+2),a  
3f63 18 03			jr .pastdmark  
3f65 ..			.dmark: db "RN4"  
3f68 f1			.pastdmark: pop af  
3f69			endm  
# End of macro DMARK
3f69						CALLMONITOR 
3f69 cd aa fd			call debug_vector  
3f6c				endm  
# End of macro CALLMONITOR
3f6c					endif 
3f6c ed 5b e4 fa			ld de, (LFSRSeed+2)   ; check low range 
3f70					;call cmp16 
3f70				 
3f70 b7					or a  
3f71 ed 52		                sbc hl, de 
3f73 38 8c				jr c, .inrange 
3f75			 
3f75 e1					pop hl 
3f76					 
3f76					if DEBUG_FORTH_WORDS 
3f76						DMARK "RNd" 
3f76 f5				push af  
3f77 3a 8b 3f			ld a, (.dmark)  
3f7a 32 a0 fd			ld (debug_mark),a  
3f7d 3a 8c 3f			ld a, (.dmark+1)  
3f80 32 a1 fd			ld (debug_mark+1),a  
3f83 3a 8d 3f			ld a, (.dmark+2)  
3f86 32 a2 fd			ld (debug_mark+2),a  
3f89 18 03			jr .pastdmark  
3f8b ..			.dmark: db "RNd"  
3f8e f1			.pastdmark: pop af  
3f8f			endm  
# End of macro DMARK
3f8f						CALLMONITOR 
3f8f cd aa fd			call debug_vector  
3f92				endm  
# End of macro CALLMONITOR
3f92					endif 
3f92			 
3f92			 
3f92 cd 48 20				call forth_push_numhl 
3f95				       NEXTW 
3f95 c3 39 24			jp macro_next 
3f98				endm 
# End of macro NEXTW
3f98			 
3f98			.ENDMATHS: 
3f98			 
3f98			; eof 
3f98			 
# End of file forth_words_maths.asm
3f98			include "forth_words_display.asm" 
3f98			 
3f98			; | ## Display Words 
3f98			 
3f98			.ACT: 
3f98			 
3f98				CWHEAD .INFO 78 "ACTIVE" 6 WORD_FLAG_CODE 
3f98 62				db WORD_SYS_CORE+78             
3f99 e4 3f			dw .INFO            
3f9b 07				db 6 + 1 
3f9c .. 00			db "ACTIVE",0              
3fa3				endm 
# End of macro CWHEAD
3fa3			; | ACTIVE ( -- s ) Push the next char for an activity indicator to TOS | DONE 
3fa3			;  
3fa3			; | | To display a pulsing activity indicator in a processing loop do this... 
3fa3			; | | e.g. $ff $00 do active . ..... Your code ..... loop 
3fa3			 
3fa3					if DEBUG_FORTH_WORDS_KEY 
3fa3						DMARK "ACT" 
3fa3 f5				push af  
3fa4 3a b8 3f			ld a, (.dmark)  
3fa7 32 a0 fd			ld (debug_mark),a  
3faa 3a b9 3f			ld a, (.dmark+1)  
3fad 32 a1 fd			ld (debug_mark+1),a  
3fb0 3a ba 3f			ld a, (.dmark+2)  
3fb3 32 a2 fd			ld (debug_mark+2),a  
3fb6 18 03			jr .pastdmark  
3fb8 ..			.dmark: db "ACT"  
3fbb f1			.pastdmark: pop af  
3fbc			endm  
# End of macro DMARK
3fbc						CALLMONITOR 
3fbc cd aa fd			call debug_vector  
3fbf				endm  
# End of macro CALLMONITOR
3fbf					endif 
3fbf cd 01 0d				call active 
3fc2					if DEBUG_FORTH_WORDS 
3fc2						DMARK "ACp" 
3fc2 f5				push af  
3fc3 3a d7 3f			ld a, (.dmark)  
3fc6 32 a0 fd			ld (debug_mark),a  
3fc9 3a d8 3f			ld a, (.dmark+1)  
3fcc 32 a1 fd			ld (debug_mark+1),a  
3fcf 3a d9 3f			ld a, (.dmark+2)  
3fd2 32 a2 fd			ld (debug_mark+2),a  
3fd5 18 03			jr .pastdmark  
3fd7 ..			.dmark: db "ACp"  
3fda f1			.pastdmark: pop af  
3fdb			endm  
# End of macro DMARK
3fdb						CALLMONITOR 
3fdb cd aa fd			call debug_vector  
3fde				endm  
# End of macro CALLMONITOR
3fde					endif 
3fde cd b6 20				call forth_push_str 
3fe1			 
3fe1					NEXTW 
3fe1 c3 39 24			jp macro_next 
3fe4				endm 
# End of macro NEXTW
3fe4			.INFO: 
3fe4			 
3fe4				CWHEAD .ATP 78 "INFO" 4 WORD_FLAG_CODE 
3fe4 62				db WORD_SYS_CORE+78             
3fe5 01 40			dw .ATP            
3fe7 05				db 4 + 1 
3fe8 .. 00			db "INFO",0              
3fed				endm 
# End of macro CWHEAD
3fed			; | INFO ( u1 u2 -- )  Use the top two strings on stack to fill in an info window over two lines. Causes a wait for key press to continue. | DONE 
3fed					FORTH_DSP_VALUEHL 
3fed cd 4d 22			call macro_dsp_valuehl 
3ff0				endm 
# End of macro FORTH_DSP_VALUEHL
3ff0			 
3ff0					FORTH_DSP_POP 
3ff0 cd 05 23			call macro_forth_dsp_pop 
3ff3				endm 
# End of macro FORTH_DSP_POP
3ff3			 
3ff3 e5					push hl 
3ff4			 
3ff4					FORTH_DSP_VALUEHL 
3ff4 cd 4d 22			call macro_dsp_valuehl 
3ff7				endm 
# End of macro FORTH_DSP_VALUEHL
3ff7			 
3ff7					FORTH_DSP_POP 
3ff7 cd 05 23			call macro_forth_dsp_pop 
3ffa				endm 
# End of macro FORTH_DSP_POP
3ffa			 
3ffa d1					pop de 
3ffb			 
3ffb cd 3b 0d				call info_panel 
3ffe			 
3ffe			 
3ffe					NEXTW 
3ffe c3 39 24			jp macro_next 
4001				endm 
# End of macro NEXTW
4001			.ATP: 
4001				CWHEAD .FB 78 "AT?" 3 WORD_FLAG_CODE 
4001 62				db WORD_SYS_CORE+78             
4002 78 40			dw .FB            
4004 04				db 3 + 1 
4005 .. 00			db "AT?",0              
4009				endm 
# End of macro CWHEAD
4009			; | AT? ( -- c r )  Push to stack the current position of the next print | TO TEST 
4009					if DEBUG_FORTH_WORDS_KEY 
4009						DMARK "AT?" 
4009 f5				push af  
400a 3a 1e 40			ld a, (.dmark)  
400d 32 a0 fd			ld (debug_mark),a  
4010 3a 1f 40			ld a, (.dmark+1)  
4013 32 a1 fd			ld (debug_mark+1),a  
4016 3a 20 40			ld a, (.dmark+2)  
4019 32 a2 fd			ld (debug_mark+2),a  
401c 18 03			jr .pastdmark  
401e ..			.dmark: db "AT?"  
4021 f1			.pastdmark: pop af  
4022			endm  
# End of macro DMARK
4022						CALLMONITOR 
4022 cd aa fd			call debug_vector  
4025				endm  
# End of macro CALLMONITOR
4025					endif 
4025 3a 93 f9				ld a, (f_cursor_ptr) 
4028			 
4028			if DEBUG_FORTH_WORDS 
4028				DMARK "AT?" 
4028 f5				push af  
4029 3a 3d 40			ld a, (.dmark)  
402c 32 a0 fd			ld (debug_mark),a  
402f 3a 3e 40			ld a, (.dmark+1)  
4032 32 a1 fd			ld (debug_mark+1),a  
4035 3a 3f 40			ld a, (.dmark+2)  
4038 32 a2 fd			ld (debug_mark+2),a  
403b 18 03			jr .pastdmark  
403d ..			.dmark: db "AT?"  
4040 f1			.pastdmark: pop af  
4041			endm  
# End of macro DMARK
4041				CALLMONITOR 
4041 cd aa fd			call debug_vector  
4044				endm  
# End of macro CALLMONITOR
4044			endif	 
4044					; count the number of rows 
4044			 
4044 06 00				ld b, 0 
4046 4f			.atpr:		ld c, a    ; save in case we go below zero 
4047 d6 28				sub display_cols 
4049 f2 4f 40				jp p, .atprunder 
404c 04					inc b 
404d 18 f7				jr .atpr 
404f			.atprunder:	 
404f			if DEBUG_FORTH_WORDS 
404f				DMARK "A?2" 
404f f5				push af  
4050 3a 64 40			ld a, (.dmark)  
4053 32 a0 fd			ld (debug_mark),a  
4056 3a 65 40			ld a, (.dmark+1)  
4059 32 a1 fd			ld (debug_mark+1),a  
405c 3a 66 40			ld a, (.dmark+2)  
405f 32 a2 fd			ld (debug_mark+2),a  
4062 18 03			jr .pastdmark  
4064 ..			.dmark: db "A?2"  
4067 f1			.pastdmark: pop af  
4068			endm  
# End of macro DMARK
4068				CALLMONITOR 
4068 cd aa fd			call debug_vector  
406b				endm  
# End of macro CALLMONITOR
406b			endif	 
406b 26 00				ld h, 0 
406d 69					ld l, c 
406e cd 48 20				call forth_push_numhl 
4071 68					ld l, b  
4072 cd 48 20				call forth_push_numhl 
4075			 
4075			 
4075				NEXTW 
4075 c3 39 24			jp macro_next 
4078				endm 
# End of macro NEXTW
4078			 
4078			.FB: 
4078				CWHEAD .EMIT 7 "FB" 2 WORD_FLAG_CODE 
4078 1b				db WORD_SYS_CORE+7             
4079 c6 40			dw .EMIT            
407b 03				db 2 + 1 
407c .. 00			db "FB",0              
407f				endm 
# End of macro CWHEAD
407f			; | FB ( u -- ) Select frame buffer ID u (1-3)  |  DONE 
407f			; | | Default frame buffer is 1. System uses 0 which can't be selected for system messages etc. 
407f			; | | Selecting the frame buffer wont display unless automatic display is setup (default). 
407f			; | | If automatic display is off then updates will not be shown until DRAW is used. 
407f					if DEBUG_FORTH_WORDS_KEY 
407f						DMARK "FB." 
407f f5				push af  
4080 3a 94 40			ld a, (.dmark)  
4083 32 a0 fd			ld (debug_mark),a  
4086 3a 95 40			ld a, (.dmark+1)  
4089 32 a1 fd			ld (debug_mark+1),a  
408c 3a 96 40			ld a, (.dmark+2)  
408f 32 a2 fd			ld (debug_mark+2),a  
4092 18 03			jr .pastdmark  
4094 ..			.dmark: db "FB."  
4097 f1			.pastdmark: pop af  
4098			endm  
# End of macro DMARK
4098						CALLMONITOR 
4098 cd aa fd			call debug_vector  
409b				endm  
# End of macro CALLMONITOR
409b					endif 
409b			 
409b					FORTH_DSP_VALUEHL 
409b cd 4d 22			call macro_dsp_valuehl 
409e				endm 
# End of macro FORTH_DSP_VALUEHL
409e			 
409e 7d					ld a, l 
409f fe 01				cp 1 
40a1 20 05				jr nz, .fbn1 
40a3 21 45 fc				ld hl, display_fb1 
40a6 18 15				jr .fbset 
40a8 fe 02		.fbn1:		cp 2 
40aa 20 05				jr nz, .fbn2 
40ac 21 03 fb				ld hl, display_fb2 
40af 18 0c				jr .fbset 
40b1 fe 03		.fbn2:		cp 3 
40b3 20 05				jr nz, .fbn3 
40b5 21 a4 fb				ld hl, display_fb3 
40b8 18 03				jr .fbset 
40ba			.fbn3:		 ; if invalid number select first 
40ba 21 45 fc				ld hl, display_fb1 
40bd 22 01 fb		.fbset:		ld (display_fb_active), hl 
40c0			 
40c0					FORTH_DSP_POP 
40c0 cd 05 23			call macro_forth_dsp_pop 
40c3				endm 
# End of macro FORTH_DSP_POP
40c3			 
40c3					NEXTW 
40c3 c3 39 24			jp macro_next 
40c6				endm 
# End of macro NEXTW
40c6			 
40c6			 
40c6			.EMIT: 
40c6				CWHEAD .DOTH 7 "EMIT" 4 WORD_FLAG_CODE 
40c6 1b				db WORD_SYS_CORE+7             
40c7 17 41			dw .DOTH            
40c9 05				db 4 + 1 
40ca .. 00			db "EMIT",0              
40cf				endm 
# End of macro CWHEAD
40cf			; |  EMIT ( u -- ) Display ascii character  TOS   | DONE 
40cf					; get value off TOS and display it 
40cf			 
40cf					if DEBUG_FORTH_WORDS_KEY 
40cf						DMARK "EMT" 
40cf f5				push af  
40d0 3a e4 40			ld a, (.dmark)  
40d3 32 a0 fd			ld (debug_mark),a  
40d6 3a e5 40			ld a, (.dmark+1)  
40d9 32 a1 fd			ld (debug_mark+1),a  
40dc 3a e6 40			ld a, (.dmark+2)  
40df 32 a2 fd			ld (debug_mark+2),a  
40e2 18 03			jr .pastdmark  
40e4 ..			.dmark: db "EMT"  
40e7 f1			.pastdmark: pop af  
40e8			endm  
# End of macro DMARK
40e8						CALLMONITOR 
40e8 cd aa fd			call debug_vector  
40eb				endm  
# End of macro CALLMONITOR
40eb					endif 
40eb			 
40eb					FORTH_DSP_VALUEHL 
40eb cd 4d 22			call macro_dsp_valuehl 
40ee				endm 
# End of macro FORTH_DSP_VALUEHL
40ee			 
40ee 7d					ld a,l 
40ef			 
40ef					; TODO write to display 
40ef			 
40ef 32 f4 f2				ld (os_input), a 
40f2 3e 00				ld a, 0 
40f4 32 f5 f2				ld (os_input+1), a 
40f7					 
40f7 3a 93 f9				ld a, (f_cursor_ptr) 
40fa 11 f4 f2				ld de, os_input 
40fd cd bd 0d				call str_at_display 
4100			 
4100			 
4100 3a 71 f9				ld a,(cli_autodisplay) 
4103 fe 00				cp 0 
4105 28 03				jr z, .enoupdate 
4107 cd cd 0d						call update_display 
410a					.enoupdate: 
410a			 
410a 3a 93 f9				ld a, (f_cursor_ptr) 
410d 3c					inc a 
410e 32 93 f9				ld (f_cursor_ptr), a   ; save new pos 
4111			 
4111			 
4111					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4111 cd 05 23			call macro_forth_dsp_pop 
4114				endm 
# End of macro FORTH_DSP_POP
4114			  
4114			 
4114					NEXTW 
4114 c3 39 24			jp macro_next 
4117				endm 
# End of macro NEXTW
4117			.DOTH: 
4117				CWHEAD .DOTF 8 ".-" 2 WORD_FLAG_CODE 
4117 1c				db WORD_SYS_CORE+8             
4118 47 41			dw .DOTF            
411a 03				db 2 + 1 
411b .. 00			db ".-",0              
411e				endm 
# End of macro CWHEAD
411e			        ; | .- ( u -- ) Display TOS replacing any dashes with spaces. Means you dont need to wrap strings in double quotes!   | DONE 
411e					; get value off TOS and display it 
411e					if DEBUG_FORTH_WORDS_KEY 
411e						DMARK "DTD" 
411e f5				push af  
411f 3a 33 41			ld a, (.dmark)  
4122 32 a0 fd			ld (debug_mark),a  
4125 3a 34 41			ld a, (.dmark+1)  
4128 32 a1 fd			ld (debug_mark+1),a  
412b 3a 35 41			ld a, (.dmark+2)  
412e 32 a2 fd			ld (debug_mark+2),a  
4131 18 03			jr .pastdmark  
4133 ..			.dmark: db "DTD"  
4136 f1			.pastdmark: pop af  
4137			endm  
# End of macro DMARK
4137						CALLMONITOR 
4137 cd aa fd			call debug_vector  
413a				endm  
# End of macro CALLMONITOR
413a					endif 
413a 0e 01			ld c, 1	  ; flag for removal of '-' enabled 
413c 3e 00			ld a, 0 
413e 32 72 f9			ld (cli_mvdot), a 
4141 c3 9e 41			jp .dotgo 
4144				NEXTW 
4144 c3 39 24			jp macro_next 
4147				endm 
# End of macro NEXTW
4147			.DOTF: 
4147				CWHEAD .DOT 8 ".>" 2 WORD_FLAG_CODE 
4147 1c				db WORD_SYS_CORE+8             
4148 75 41			dw .DOT            
414a 03				db 2 + 1 
414b .. 00			db ".>",0              
414e				endm 
# End of macro CWHEAD
414e			        ; | .> ( u -- ) Display TOS and move the next display point with display  | DONE 
414e					; get value off TOS and display it 
414e			        ; TODO BUG adds extra spaces 
414e			        ; TODO BUG handle numerics? 
414e					if DEBUG_FORTH_WORDS_KEY 
414e						DMARK "DTC" 
414e f5				push af  
414f 3a 63 41			ld a, (.dmark)  
4152 32 a0 fd			ld (debug_mark),a  
4155 3a 64 41			ld a, (.dmark+1)  
4158 32 a1 fd			ld (debug_mark+1),a  
415b 3a 65 41			ld a, (.dmark+2)  
415e 32 a2 fd			ld (debug_mark+2),a  
4161 18 03			jr .pastdmark  
4163 ..			.dmark: db "DTC"  
4166 f1			.pastdmark: pop af  
4167			endm  
# End of macro DMARK
4167						CALLMONITOR 
4167 cd aa fd			call debug_vector  
416a				endm  
# End of macro CALLMONITOR
416a					endif 
416a 3e 01			ld a, 1 
416c 32 72 f9			ld (cli_mvdot), a 
416f c3 9e 41			jp .dotgo 
4172				NEXTW 
4172 c3 39 24			jp macro_next 
4175				endm 
# End of macro NEXTW
4175			 
4175			.DOT: 
4175				CWHEAD .CLS 8 "." 1 WORD_FLAG_CODE 
4175 1c				db WORD_SYS_CORE+8             
4176 51 43			dw .CLS            
4178 02				db 1 + 1 
4179 .. 00			db ".",0              
417b				endm 
# End of macro CWHEAD
417b			        ; | . ( u -- ) Display TOS. Does not move next print position. Use .> if you want that. | DONE 
417b					; get value off TOS and display it 
417b			 
417b					if DEBUG_FORTH_WORDS_KEY 
417b						DMARK "DOT" 
417b f5				push af  
417c 3a 90 41			ld a, (.dmark)  
417f 32 a0 fd			ld (debug_mark),a  
4182 3a 91 41			ld a, (.dmark+1)  
4185 32 a1 fd			ld (debug_mark+1),a  
4188 3a 92 41			ld a, (.dmark+2)  
418b 32 a2 fd			ld (debug_mark+2),a  
418e 18 03			jr .pastdmark  
4190 ..			.dmark: db "DOT"  
4193 f1			.pastdmark: pop af  
4194			endm  
# End of macro DMARK
4194						CALLMONITOR 
4194 cd aa fd			call debug_vector  
4197				endm  
# End of macro CALLMONITOR
4197					endif 
4197 3e 00			ld a, 0 
4199 32 72 f9			ld (cli_mvdot), a 
419c 0e 00		ld c, 0	  ; flag for removal of '-' disabled 
419e				 
419e			 
419e			.dotgo: 
419e			 
419e			; move up type to on stack for parserv5 
419e					FORTH_DSP 
419e cd 13 22			call macro_forth_dsp 
41a1				endm 
# End of macro FORTH_DSP
41a1				;FORTH_DSP_VALUE  
41a1			 
41a1			if DEBUG_FORTH_DOT 
41a1				DMARK "DOT" 
41a1 f5				push af  
41a2 3a b6 41			ld a, (.dmark)  
41a5 32 a0 fd			ld (debug_mark),a  
41a8 3a b7 41			ld a, (.dmark+1)  
41ab 32 a1 fd			ld (debug_mark+1),a  
41ae 3a b8 41			ld a, (.dmark+2)  
41b1 32 a2 fd			ld (debug_mark+2),a  
41b4 18 03			jr .pastdmark  
41b6 ..			.dmark: db "DOT"  
41b9 f1			.pastdmark: pop af  
41ba			endm  
# End of macro DMARK
41ba				CALLMONITOR 
41ba cd aa fd			call debug_vector  
41bd				endm  
# End of macro CALLMONITOR
41bd			endif	 
41bd			;		.print: 
41bd			 
41bd 7e				ld a,(hl)  ; work out what type of value is on the TOS 
41be 23				inc hl   ; position to the actual value 
41bf fe 01			cp DS_TYPE_STR 
41c1 20 06			jr nz, .dotnum1  
41c3			 
41c3			; display string 
41c3				FORTH_DSP_VALUE  
41c3 cd 36 22			call macro_forth_dsp_value 
41c6				endm 
# End of macro FORTH_DSP_VALUE
41c6 eb				ex de,hl 
41c7 18 49			jr .dotwrite 
41c9			 
41c9			.dotnum1: 
41c9 fe 02			cp DS_TYPE_INUM 
41cb 20 44			jr nz, .dotflot 
41cd			 
41cd			 
41cd			; display number 
41cd			 
41cd			;	push hl 
41cd			;	call clear_display 
41cd			;	pop hl 
41cd			 
41cd 5e				ld e, (hl) 
41ce 23				inc hl 
41cf 56				ld d, (hl) 
41d0 21 f6 f0			ld hl, scratch 
41d3			if DEBUG_FORTH_DOT 
41d3				DMARK "DT1" 
41d3 f5				push af  
41d4 3a e8 41			ld a, (.dmark)  
41d7 32 a0 fd			ld (debug_mark),a  
41da 3a e9 41			ld a, (.dmark+1)  
41dd 32 a1 fd			ld (debug_mark+1),a  
41e0 3a ea 41			ld a, (.dmark+2)  
41e3 32 a2 fd			ld (debug_mark+2),a  
41e6 18 03			jr .pastdmark  
41e8 ..			.dmark: db "DT1"  
41eb f1			.pastdmark: pop af  
41ec			endm  
# End of macro DMARK
41ec				CALLMONITOR 
41ec cd aa fd			call debug_vector  
41ef				endm  
# End of macro CALLMONITOR
41ef			endif	 
41ef			 
41ef cd f3 12			call uitoa_16 
41f2 eb				ex de,hl 
41f3			 
41f3			if DEBUG_FORTH_DOT 
41f3				DMARK "DT2" 
41f3 f5				push af  
41f4 3a 08 42			ld a, (.dmark)  
41f7 32 a0 fd			ld (debug_mark),a  
41fa 3a 09 42			ld a, (.dmark+1)  
41fd 32 a1 fd			ld (debug_mark+1),a  
4200 3a 0a 42			ld a, (.dmark+2)  
4203 32 a2 fd			ld (debug_mark+2),a  
4206 18 03			jr .pastdmark  
4208 ..			.dmark: db "DT2"  
420b f1			.pastdmark: pop af  
420c			endm  
# End of macro DMARK
420c				CALLMONITOR 
420c cd aa fd			call debug_vector  
420f				endm  
# End of macro CALLMONITOR
420f			endif	 
420f			 
420f			;	ld de, os_word_scratch 
420f 18 01			jr .dotwrite 
4211			 
4211 00			.dotflot:   nop 
4212			; TODO print floating point number 
4212			 
4212			.dotwrite:		 
4212			 
4212					; if c is set then set all '-' to spaces 
4212					; need to also take into account .>  
4212			 
4212 3e 01				ld a, 1 
4214 b9					cp c 
4215 20 67				jr nz, .nodashswap 
4217			 
4217					; DE has the string to write, working with HL 
4217			 
4217 06 ff				ld b, 255 
4219 d5					push de 
421a e1					pop hl 
421b			 
421b			if DEBUG_FORTH_DOT 
421b				DMARK "DT-" 
421b f5				push af  
421c 3a 30 42			ld a, (.dmark)  
421f 32 a0 fd			ld (debug_mark),a  
4222 3a 31 42			ld a, (.dmark+1)  
4225 32 a1 fd			ld (debug_mark+1),a  
4228 3a 32 42			ld a, (.dmark+2)  
422b 32 a2 fd			ld (debug_mark+2),a  
422e 18 03			jr .pastdmark  
4230 ..			.dmark: db "DT-"  
4233 f1			.pastdmark: pop af  
4234			endm  
# End of macro DMARK
4234				CALLMONITOR 
4234 cd aa fd			call debug_vector  
4237				endm  
# End of macro CALLMONITOR
4237			endif	 
4237 7e			.dashscan:	ld a, (hl) 
4238 fe 00				cp 0 
423a 28 42				jr z, .nodashswap 
423c fe 2d				cp '-' 
423e 20 03				jr nz, .dashskip 
4240 3e 20				ld a, ' ' 
4242 77					ld (hl), a 
4243 23			.dashskip:	inc hl 
4244			if DEBUG_FORTH_DOT 
4244				DMARK "D-2" 
4244 f5				push af  
4245 3a 59 42			ld a, (.dmark)  
4248 32 a0 fd			ld (debug_mark),a  
424b 3a 5a 42			ld a, (.dmark+1)  
424e 32 a1 fd			ld (debug_mark+1),a  
4251 3a 5b 42			ld a, (.dmark+2)  
4254 32 a2 fd			ld (debug_mark+2),a  
4257 18 03			jr .pastdmark  
4259 ..			.dmark: db "D-2"  
425c f1			.pastdmark: pop af  
425d			endm  
# End of macro DMARK
425d				CALLMONITOR 
425d cd aa fd			call debug_vector  
4260				endm  
# End of macro CALLMONITOR
4260			endif	 
4260 10 d5				djnz .dashscan 
4262			 
4262			if DEBUG_FORTH_DOT 
4262				DMARK "D-1" 
4262 f5				push af  
4263 3a 77 42			ld a, (.dmark)  
4266 32 a0 fd			ld (debug_mark),a  
4269 3a 78 42			ld a, (.dmark+1)  
426c 32 a1 fd			ld (debug_mark+1),a  
426f 3a 79 42			ld a, (.dmark+2)  
4272 32 a2 fd			ld (debug_mark+2),a  
4275 18 03			jr .pastdmark  
4277 ..			.dmark: db "D-1"  
427a f1			.pastdmark: pop af  
427b			endm  
# End of macro DMARK
427b				CALLMONITOR 
427b cd aa fd			call debug_vector  
427e				endm  
# End of macro CALLMONITOR
427e			endif	 
427e			 
427e			.nodashswap: 
427e			 
427e			if DEBUG_FORTH_DOT 
427e				DMARK "D-o" 
427e f5				push af  
427f 3a 93 42			ld a, (.dmark)  
4282 32 a0 fd			ld (debug_mark),a  
4285 3a 94 42			ld a, (.dmark+1)  
4288 32 a1 fd			ld (debug_mark+1),a  
428b 3a 95 42			ld a, (.dmark+2)  
428e 32 a2 fd			ld (debug_mark+2),a  
4291 18 03			jr .pastdmark  
4293 ..			.dmark: db "D-o"  
4296 f1			.pastdmark: pop af  
4297			endm  
# End of macro DMARK
4297				CALLMONITOR 
4297 cd aa fd			call debug_vector  
429a				endm  
# End of macro CALLMONITOR
429a			endif	 
429a			 
429a d5					push de   ; save string start in case we need to advance print 
429b			 
429b 3a 93 f9				ld a, (f_cursor_ptr) 
429e cd bd 0d				call str_at_display 
42a1 3a 71 f9				ld a,(cli_autodisplay) 
42a4 fe 00				cp 0 
42a6 28 03				jr z, .noupdate 
42a8 cd cd 0d						call update_display 
42ab					.noupdate: 
42ab			 
42ab			 
42ab					; see if we need to advance the print position 
42ab			 
42ab e1					pop hl   ; get back string 
42ac			;		ex de,hl 
42ac			 
42ac 3a 72 f9				ld a, (cli_mvdot) 
42af			if DEBUG_FORTH_DOT 
42af			;		ld e,a 
42af				DMARK "D>1" 
42af f5				push af  
42b0 3a c4 42			ld a, (.dmark)  
42b3 32 a0 fd			ld (debug_mark),a  
42b6 3a c5 42			ld a, (.dmark+1)  
42b9 32 a1 fd			ld (debug_mark+1),a  
42bc 3a c6 42			ld a, (.dmark+2)  
42bf 32 a2 fd			ld (debug_mark+2),a  
42c2 18 03			jr .pastdmark  
42c4 ..			.dmark: db "D>1"  
42c7 f1			.pastdmark: pop af  
42c8			endm  
# End of macro DMARK
42c8				CALLMONITOR 
42c8 cd aa fd			call debug_vector  
42cb				endm  
# End of macro CALLMONITOR
42cb			endif	 
42cb fe 00				cp 0 
42cd 28 44				jr z, .noadv 
42cf					; yes, lets advance the print position 
42cf 3e 00				ld a, 0 
42d1 cd 4f 13				call strlent 
42d4			if DEBUG_FORTH_DOT 
42d4				DMARK "D-?" 
42d4 f5				push af  
42d5 3a e9 42			ld a, (.dmark)  
42d8 32 a0 fd			ld (debug_mark),a  
42db 3a ea 42			ld a, (.dmark+1)  
42de 32 a1 fd			ld (debug_mark+1),a  
42e1 3a eb 42			ld a, (.dmark+2)  
42e4 32 a2 fd			ld (debug_mark+2),a  
42e7 18 03			jr .pastdmark  
42e9 ..			.dmark: db "D-?"  
42ec f1			.pastdmark: pop af  
42ed			endm  
# End of macro DMARK
42ed				CALLMONITOR 
42ed cd aa fd			call debug_vector  
42f0				endm  
# End of macro CALLMONITOR
42f0			endif	 
42f0 3a 93 f9				ld a, (f_cursor_ptr) 
42f3 85					add a,l 
42f4					;call addatohl 
42f4					;ld a, l 
42f4 32 93 f9				ld (f_cursor_ptr), a   ; save new pos 
42f7			 
42f7			if DEBUG_FORTH_DOT 
42f7				DMARK "D->" 
42f7 f5				push af  
42f8 3a 0c 43			ld a, (.dmark)  
42fb 32 a0 fd			ld (debug_mark),a  
42fe 3a 0d 43			ld a, (.dmark+1)  
4301 32 a1 fd			ld (debug_mark+1),a  
4304 3a 0e 43			ld a, (.dmark+2)  
4307 32 a2 fd			ld (debug_mark+2),a  
430a 18 03			jr .pastdmark  
430c ..			.dmark: db "D->"  
430f f1			.pastdmark: pop af  
4310			endm  
# End of macro DMARK
4310				CALLMONITOR 
4310 cd aa fd			call debug_vector  
4313				endm  
# End of macro CALLMONITOR
4313			endif	 
4313			 
4313			.noadv:	 
4313			 
4313					if DEBUG_FORTH_DOT_WAIT 
4313							call next_page_prompt 
4313					endif	 
4313			; TODO this pop off the stack causes a crash. i dont know why 
4313			 
4313			 
4313			if DEBUG_FORTH_DOT 
4313				DMARK "DTh" 
4313 f5				push af  
4314 3a 28 43			ld a, (.dmark)  
4317 32 a0 fd			ld (debug_mark),a  
431a 3a 29 43			ld a, (.dmark+1)  
431d 32 a1 fd			ld (debug_mark+1),a  
4320 3a 2a 43			ld a, (.dmark+2)  
4323 32 a2 fd			ld (debug_mark+2),a  
4326 18 03			jr .pastdmark  
4328 ..			.dmark: db "DTh"  
432b f1			.pastdmark: pop af  
432c			endm  
# End of macro DMARK
432c				CALLMONITOR 
432c cd aa fd			call debug_vector  
432f				endm  
# End of macro CALLMONITOR
432f			endif	 
432f			 
432f					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
432f cd 05 23			call macro_forth_dsp_pop 
4332				endm 
# End of macro FORTH_DSP_POP
4332			 
4332			if DEBUG_FORTH_DOT 
4332				DMARK "DTi" 
4332 f5				push af  
4333 3a 47 43			ld a, (.dmark)  
4336 32 a0 fd			ld (debug_mark),a  
4339 3a 48 43			ld a, (.dmark+1)  
433c 32 a1 fd			ld (debug_mark+1),a  
433f 3a 49 43			ld a, (.dmark+2)  
4342 32 a2 fd			ld (debug_mark+2),a  
4345 18 03			jr .pastdmark  
4347 ..			.dmark: db "DTi"  
434a f1			.pastdmark: pop af  
434b			endm  
# End of macro DMARK
434b				CALLMONITOR 
434b cd aa fd			call debug_vector  
434e				endm  
# End of macro CALLMONITOR
434e			endif	 
434e			 
434e			 
434e					NEXTW 
434e c3 39 24			jp macro_next 
4351				endm 
# End of macro NEXTW
4351			 
4351			.CLS: 
4351				CWHEAD .DRAW 33 "CLS" 3 WORD_FLAG_CODE 
4351 35				db WORD_SYS_CORE+33             
4352 7e 43			dw .DRAW            
4354 04				db 3 + 1 
4355 .. 00			db "CLS",0              
4359				endm 
# End of macro CWHEAD
4359			; | CLS ( -- ) Clear current frame buffer and set next print position to top left corner  | DONE 
4359					if DEBUG_FORTH_WORDS_KEY 
4359						DMARK "CLS" 
4359 f5				push af  
435a 3a 6e 43			ld a, (.dmark)  
435d 32 a0 fd			ld (debug_mark),a  
4360 3a 6f 43			ld a, (.dmark+1)  
4363 32 a1 fd			ld (debug_mark+1),a  
4366 3a 70 43			ld a, (.dmark+2)  
4369 32 a2 fd			ld (debug_mark+2),a  
436c 18 03			jr .pastdmark  
436e ..			.dmark: db "CLS"  
4371 f1			.pastdmark: pop af  
4372			endm  
# End of macro DMARK
4372						CALLMONITOR 
4372 cd aa fd			call debug_vector  
4375				endm  
# End of macro CALLMONITOR
4375					endif 
4375 cd aa 0d				call clear_display 
4378 c3 8c 44				jp .home		; and home cursor 
437b					NEXTW 
437b c3 39 24			jp macro_next 
437e				endm 
# End of macro NEXTW
437e			 
437e			.DRAW: 
437e				CWHEAD .DUMP 34 "DRAW" 4 WORD_FLAG_CODE 
437e 36				db WORD_SYS_CORE+34             
437f a9 43			dw .DUMP            
4381 05				db 4 + 1 
4382 .. 00			db "DRAW",0              
4387				endm 
# End of macro CWHEAD
4387			; | DRAW ( -- ) Draw contents of current frame buffer  | DONE 
4387					if DEBUG_FORTH_WORDS_KEY 
4387						DMARK "DRW" 
4387 f5				push af  
4388 3a 9c 43			ld a, (.dmark)  
438b 32 a0 fd			ld (debug_mark),a  
438e 3a 9d 43			ld a, (.dmark+1)  
4391 32 a1 fd			ld (debug_mark+1),a  
4394 3a 9e 43			ld a, (.dmark+2)  
4397 32 a2 fd			ld (debug_mark+2),a  
439a 18 03			jr .pastdmark  
439c ..			.dmark: db "DRW"  
439f f1			.pastdmark: pop af  
43a0			endm  
# End of macro DMARK
43a0						CALLMONITOR 
43a0 cd aa fd			call debug_vector  
43a3				endm  
# End of macro CALLMONITOR
43a3					endif 
43a3 cd cd 0d				call update_display 
43a6					NEXTW 
43a6 c3 39 24			jp macro_next 
43a9				endm 
# End of macro NEXTW
43a9			 
43a9			.DUMP: 
43a9				CWHEAD .CDUMP 35 "DUMP" 4 WORD_FLAG_CODE 
43a9 37				db WORD_SYS_CORE+35             
43aa e1 43			dw .CDUMP            
43ac 05				db 4 + 1 
43ad .. 00			db "DUMP",0              
43b2				endm 
# End of macro CWHEAD
43b2			; | DUMP ( x -- ) With address x display dump   | DONE 
43b2			; TODO pop address to use off of the stack 
43b2					if DEBUG_FORTH_WORDS_KEY 
43b2						DMARK "DUM" 
43b2 f5				push af  
43b3 3a c7 43			ld a, (.dmark)  
43b6 32 a0 fd			ld (debug_mark),a  
43b9 3a c8 43			ld a, (.dmark+1)  
43bc 32 a1 fd			ld (debug_mark+1),a  
43bf 3a c9 43			ld a, (.dmark+2)  
43c2 32 a2 fd			ld (debug_mark+2),a  
43c5 18 03			jr .pastdmark  
43c7 ..			.dmark: db "DUM"  
43ca f1			.pastdmark: pop af  
43cb			endm  
# End of macro DMARK
43cb						CALLMONITOR 
43cb cd aa fd			call debug_vector  
43ce				endm  
# End of macro CALLMONITOR
43ce					endif 
43ce cd aa 0d				call clear_display 
43d1			 
43d1					; get address 
43d1			 
43d1					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
43d1 cd 4d 22			call macro_dsp_valuehl 
43d4				endm 
# End of macro FORTH_DSP_VALUEHL
43d4				 
43d4					; save it for cdump 
43d4			 
43d4 22 19 f4				ld (os_cur_ptr),hl 
43d7			 
43d7					; destroy value TOS 
43d7			 
43d7					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
43d7 cd 05 23			call macro_forth_dsp_pop 
43da				endm 
# End of macro FORTH_DSP_POP
43da			 
43da cd c8 1e				call dumpcont	; skip old style of param parsing	 
43dd c9					ret			; TODO command causes end of remaining parsing so cant do: $0000 DUMP $8000 DUMP 
43de					NEXTW 
43de c3 39 24			jp macro_next 
43e1				endm 
# End of macro NEXTW
43e1			.CDUMP: 
43e1				CWHEAD .DAT 36 "CDUMP" 5 WORD_FLAG_CODE 
43e1 38				db WORD_SYS_CORE+36             
43e2 11 44			dw .DAT            
43e4 06				db 5 + 1 
43e5 .. 00			db "CDUMP",0              
43eb				endm 
# End of macro CWHEAD
43eb			; | CDUMP ( -- ) Continue dump of memory from DUMP | DONE 
43eb					if DEBUG_FORTH_WORDS_KEY 
43eb						DMARK "CDP" 
43eb f5				push af  
43ec 3a 00 44			ld a, (.dmark)  
43ef 32 a0 fd			ld (debug_mark),a  
43f2 3a 01 44			ld a, (.dmark+1)  
43f5 32 a1 fd			ld (debug_mark+1),a  
43f8 3a 02 44			ld a, (.dmark+2)  
43fb 32 a2 fd			ld (debug_mark+2),a  
43fe 18 03			jr .pastdmark  
4400 ..			.dmark: db "CDP"  
4403 f1			.pastdmark: pop af  
4404			endm  
# End of macro DMARK
4404						CALLMONITOR 
4404 cd aa fd			call debug_vector  
4407				endm  
# End of macro CALLMONITOR
4407					endif 
4407 cd aa 0d				call clear_display 
440a cd c8 1e				call dumpcont	 
440d c9					ret			; TODO command causes end of remaining parsing so cant do: $0000 DUMP CDUMP $8000 DUMP 
440e					NEXTW 
440e c3 39 24			jp macro_next 
4411				endm 
# End of macro NEXTW
4411			 
4411			 
4411			 
4411			 
4411			.DAT: 
4411				CWHEAD .HOME 41 "AT" 2 WORD_FLAG_CODE 
4411 3d				db WORD_SYS_CORE+41             
4412 67 44			dw .HOME            
4414 03				db 2 + 1 
4415 .. 00			db "AT",0              
4418				endm 
# End of macro CWHEAD
4418			; | AT ( u1 u2 -- ) Set next output via . or emit at row u2 col u1 | DONE 
4418					if DEBUG_FORTH_WORDS_KEY 
4418						DMARK "AT." 
4418 f5				push af  
4419 3a 2d 44			ld a, (.dmark)  
441c 32 a0 fd			ld (debug_mark),a  
441f 3a 2e 44			ld a, (.dmark+1)  
4422 32 a1 fd			ld (debug_mark+1),a  
4425 3a 2f 44			ld a, (.dmark+2)  
4428 32 a2 fd			ld (debug_mark+2),a  
442b 18 03			jr .pastdmark  
442d ..			.dmark: db "AT."  
4430 f1			.pastdmark: pop af  
4431			endm  
# End of macro DMARK
4431						CALLMONITOR 
4431 cd aa fd			call debug_vector  
4434				endm  
# End of macro CALLMONITOR
4434					endif 
4434					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4434 cd 4d 22			call macro_dsp_valuehl 
4437				endm 
# End of macro FORTH_DSP_VALUEHL
4437			 
4437			 
4437					; TODO save cursor row 
4437 7d					ld a,l 
4438 fe 02				cp 2 
443a 20 04				jr nz, .crow3 
443c 3e 28				ld a, display_row_2 
443e 18 12				jr .ccol1 
4440 fe 03		.crow3:		cp 3 
4442 20 04				jr nz, .crow4 
4444 3e 50				ld a, display_row_3 
4446 18 0a				jr .ccol1 
4448 fe 04		.crow4:		cp 4 
444a 20 04				jr nz, .crow1 
444c 3e 78				ld a, display_row_4 
444e 18 02				jr .ccol1 
4450 3e 00		.crow1:		ld a,display_row_1 
4452 f5			.ccol1:		push af			; got row offset 
4453 6f					ld l,a 
4454 26 00				ld h,0 
4456					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4456 cd 05 23			call macro_forth_dsp_pop 
4459				endm 
# End of macro FORTH_DSP_POP
4459					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4459 cd 4d 22			call macro_dsp_valuehl 
445c				endm 
# End of macro FORTH_DSP_VALUEHL
445c					; TODO save cursor col 
445c f1					pop af 
445d 85					add l		; add col offset 
445e 32 93 f9				ld (f_cursor_ptr), a 
4461					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4461 cd 05 23			call macro_forth_dsp_pop 
4464				endm 
# End of macro FORTH_DSP_POP
4464			 
4464					; calculate  
4464			 
4464					NEXTW 
4464 c3 39 24			jp macro_next 
4467				endm 
# End of macro NEXTW
4467			 
4467			 
4467			.HOME: 
4467				CWHEAD .CR 45 "HOME" 4 WORD_FLAG_CODE 
4467 41				db WORD_SYS_CORE+45             
4468 94 44			dw .CR            
446a 05				db 4 + 1 
446b .. 00			db "HOME",0              
4470				endm 
# End of macro CWHEAD
4470			; | HOME ( -- ) Reset the current cursor for output to home | DONE 
4470					if DEBUG_FORTH_WORDS_KEY 
4470						DMARK "HOM" 
4470 f5				push af  
4471 3a 85 44			ld a, (.dmark)  
4474 32 a0 fd			ld (debug_mark),a  
4477 3a 86 44			ld a, (.dmark+1)  
447a 32 a1 fd			ld (debug_mark+1),a  
447d 3a 87 44			ld a, (.dmark+2)  
4480 32 a2 fd			ld (debug_mark+2),a  
4483 18 03			jr .pastdmark  
4485 ..			.dmark: db "HOM"  
4488 f1			.pastdmark: pop af  
4489			endm  
# End of macro DMARK
4489						CALLMONITOR 
4489 cd aa fd			call debug_vector  
448c				endm  
# End of macro CALLMONITOR
448c					endif 
448c 3e 00		.home:		ld a, 0		; and home cursor 
448e 32 93 f9				ld (f_cursor_ptr), a 
4491					NEXTW 
4491 c3 39 24			jp macro_next 
4494				endm 
# End of macro NEXTW
4494			 
4494			 
4494			.CR: 
4494				CWHEAD .SPACE 50 "CR" 2 WORD_FLAG_CODE 
4494 46				db WORD_SYS_CORE+50             
4495 cf 44			dw .SPACE            
4497 03				db 2 + 1 
4498 .. 00			db "CR",0              
449b				endm 
# End of macro CWHEAD
449b			; | CR (  -- s ) Push CR/LF pair onto the stack as a string  | DONE 
449b					if DEBUG_FORTH_WORDS_KEY 
449b						DMARK "CR." 
449b f5				push af  
449c 3a b0 44			ld a, (.dmark)  
449f 32 a0 fd			ld (debug_mark),a  
44a2 3a b1 44			ld a, (.dmark+1)  
44a5 32 a1 fd			ld (debug_mark+1),a  
44a8 3a b2 44			ld a, (.dmark+2)  
44ab 32 a2 fd			ld (debug_mark+2),a  
44ae 18 03			jr .pastdmark  
44b0 ..			.dmark: db "CR."  
44b3 f1			.pastdmark: pop af  
44b4			endm  
# End of macro DMARK
44b4						CALLMONITOR 
44b4 cd aa fd			call debug_vector  
44b7				endm  
# End of macro CALLMONITOR
44b7					endif 
44b7 3e 0d				ld a, 13 
44b9 32 f6 f0				ld (scratch),a 
44bc 3e 0a				ld a, 10 
44be 32 f7 f0				ld (scratch+1),a 
44c1 3e 00				ld a, 0 
44c3 32 f8 f0				ld (scratch+2),a 
44c6 21 f6 f0				ld hl, scratch 
44c9 cd b6 20				call forth_push_str 
44cc					 
44cc				       NEXTW 
44cc c3 39 24			jp macro_next 
44cf				endm 
# End of macro NEXTW
44cf			.SPACE: 
44cf				CWHEAD .SPACES 50 "BL" 2 WORD_FLAG_CODE 
44cf 46				db WORD_SYS_CORE+50             
44d0 05 45			dw .SPACES            
44d2 03				db 2 + 1 
44d3 .. 00			db "BL",0              
44d6				endm 
# End of macro CWHEAD
44d6			; | BL (  -- c ) Push the value of space onto the stack as a string  | DONE 
44d6					if DEBUG_FORTH_WORDS_KEY 
44d6						DMARK "BL." 
44d6 f5				push af  
44d7 3a eb 44			ld a, (.dmark)  
44da 32 a0 fd			ld (debug_mark),a  
44dd 3a ec 44			ld a, (.dmark+1)  
44e0 32 a1 fd			ld (debug_mark+1),a  
44e3 3a ed 44			ld a, (.dmark+2)  
44e6 32 a2 fd			ld (debug_mark+2),a  
44e9 18 03			jr .pastdmark  
44eb ..			.dmark: db "BL."  
44ee f1			.pastdmark: pop af  
44ef			endm  
# End of macro DMARK
44ef						CALLMONITOR 
44ef cd aa fd			call debug_vector  
44f2				endm  
# End of macro CALLMONITOR
44f2					endif 
44f2 3e 20				ld a, " " 
44f4 32 f6 f0				ld (scratch),a 
44f7 3e 00				ld a, 0 
44f9 32 f7 f0				ld (scratch+1),a 
44fc 21 f6 f0				ld hl, scratch 
44ff cd b6 20				call forth_push_str 
4502					 
4502				       NEXTW 
4502 c3 39 24			jp macro_next 
4505				endm 
# End of macro NEXTW
4505			 
4505			;.blstr: db " ", 0 
4505			 
4505			.SPACES: 
4505				CWHEAD .SCROLL 51 "SPACES" 6 WORD_FLAG_CODE 
4505 47				db WORD_SYS_CORE+51             
4506 a0 45			dw .SCROLL            
4508 07				db 6 + 1 
4509 .. 00			db "SPACES",0              
4510				endm 
# End of macro CWHEAD
4510			; | SPACES ( u -- str ) A string of u spaces is pushed onto the stack | DONE 
4510					if DEBUG_FORTH_WORDS_KEY 
4510						DMARK "SPS" 
4510 f5				push af  
4511 3a 25 45			ld a, (.dmark)  
4514 32 a0 fd			ld (debug_mark),a  
4517 3a 26 45			ld a, (.dmark+1)  
451a 32 a1 fd			ld (debug_mark+1),a  
451d 3a 27 45			ld a, (.dmark+2)  
4520 32 a2 fd			ld (debug_mark+2),a  
4523 18 03			jr .pastdmark  
4525 ..			.dmark: db "SPS"  
4528 f1			.pastdmark: pop af  
4529			endm  
# End of macro DMARK
4529						CALLMONITOR 
4529 cd aa fd			call debug_vector  
452c				endm  
# End of macro CALLMONITOR
452c					endif 
452c			 
452c			 
452c					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
452c cd 4d 22			call macro_dsp_valuehl 
452f				endm 
# End of macro FORTH_DSP_VALUEHL
452f			 
452f e5					push hl    ; u 
4530					if DEBUG_FORTH_WORDS 
4530						DMARK "SPA" 
4530 f5				push af  
4531 3a 45 45			ld a, (.dmark)  
4534 32 a0 fd			ld (debug_mark),a  
4537 3a 46 45			ld a, (.dmark+1)  
453a 32 a1 fd			ld (debug_mark+1),a  
453d 3a 47 45			ld a, (.dmark+2)  
4540 32 a2 fd			ld (debug_mark+2),a  
4543 18 03			jr .pastdmark  
4545 ..			.dmark: db "SPA"  
4548 f1			.pastdmark: pop af  
4549			endm  
# End of macro DMARK
4549						CALLMONITOR 
4549 cd aa fd			call debug_vector  
454c				endm  
# End of macro CALLMONITOR
454c					endif 
454c			 
454c					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
454c cd 05 23			call macro_forth_dsp_pop 
454f				endm 
# End of macro FORTH_DSP_POP
454f e1					pop hl 
4550 0e 00				ld c, 0 
4552 45					ld b, l 
4553 21 f6 f0				ld hl, scratch  
4556			 
4556					if DEBUG_FORTH_WORDS 
4556						DMARK "SP2" 
4556 f5				push af  
4557 3a 6b 45			ld a, (.dmark)  
455a 32 a0 fd			ld (debug_mark),a  
455d 3a 6c 45			ld a, (.dmark+1)  
4560 32 a1 fd			ld (debug_mark+1),a  
4563 3a 6d 45			ld a, (.dmark+2)  
4566 32 a2 fd			ld (debug_mark+2),a  
4569 18 03			jr .pastdmark  
456b ..			.dmark: db "SP2"  
456e f1			.pastdmark: pop af  
456f			endm  
# End of macro DMARK
456f						CALLMONITOR 
456f cd aa fd			call debug_vector  
4572				endm  
# End of macro CALLMONITOR
4572					endif 
4572 3e 20				ld a, ' ' 
4574			.spaces1:	 
4574 77					ld (hl),a 
4575 23					inc hl 
4576					 
4576 10 fc				djnz .spaces1 
4578 3e 00				ld a,0 
457a 77					ld (hl),a 
457b 21 f6 f0				ld hl, scratch 
457e					if DEBUG_FORTH_WORDS 
457e						DMARK "SP3" 
457e f5				push af  
457f 3a 93 45			ld a, (.dmark)  
4582 32 a0 fd			ld (debug_mark),a  
4585 3a 94 45			ld a, (.dmark+1)  
4588 32 a1 fd			ld (debug_mark+1),a  
458b 3a 95 45			ld a, (.dmark+2)  
458e 32 a2 fd			ld (debug_mark+2),a  
4591 18 03			jr .pastdmark  
4593 ..			.dmark: db "SP3"  
4596 f1			.pastdmark: pop af  
4597			endm  
# End of macro DMARK
4597						CALLMONITOR 
4597 cd aa fd			call debug_vector  
459a				endm  
# End of macro CALLMONITOR
459a					endif 
459a cd b6 20				call forth_push_str 
459d			 
459d				       NEXTW 
459d c3 39 24			jp macro_next 
45a0				endm 
# End of macro NEXTW
45a0			 
45a0			 
45a0			 
45a0			.SCROLL: 
45a0				CWHEAD .SCROLLD 63 "SCROLL" 6 WORD_FLAG_CODE 
45a0 53				db WORD_SYS_CORE+63             
45a1 cd 45			dw .SCROLLD            
45a3 07				db 6 + 1 
45a4 .. 00			db "SCROLL",0              
45ab				endm 
# End of macro CWHEAD
45ab			; | SCROLL ( -- ) Scroll up one line - next write will update if required | DONE 
45ab					if DEBUG_FORTH_WORDS_KEY 
45ab						DMARK "SCR" 
45ab f5				push af  
45ac 3a c0 45			ld a, (.dmark)  
45af 32 a0 fd			ld (debug_mark),a  
45b2 3a c1 45			ld a, (.dmark+1)  
45b5 32 a1 fd			ld (debug_mark+1),a  
45b8 3a c2 45			ld a, (.dmark+2)  
45bb 32 a2 fd			ld (debug_mark+2),a  
45be 18 03			jr .pastdmark  
45c0 ..			.dmark: db "SCR"  
45c3 f1			.pastdmark: pop af  
45c4			endm  
# End of macro DMARK
45c4						CALLMONITOR 
45c4 cd aa fd			call debug_vector  
45c7				endm  
# End of macro CALLMONITOR
45c7					endif 
45c7			 
45c7 cd 6c 0d			call scroll_up 
45ca			;	call update_display 
45ca			 
45ca					NEXTW 
45ca c3 39 24			jp macro_next 
45cd				endm 
# End of macro NEXTW
45cd			 
45cd			 
45cd			 
45cd			;		; get dir 
45cd			; 
45cd			;		FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
45cd			; 
45cd			;		push hl 
45cd			; 
45cd			;		; destroy value TOS 
45cd			; 
45cd			;		FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
45cd			; 
45cd			;		; get count 
45cd			; 
45cd			;		FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
45cd			; 
45cd			;		push hl 
45cd			; 
45cd			;		; destroy value TOS 
45cd			; 
45cd			;		FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
45cd			; 
45cd			;		; one value on hl get other one back 
45cd			; 
45cd			;		pop bc    ; count 
45cd			; 
45cd			;		pop de   ; dir 
45cd			; 
45cd			; 
45cd			;		ld b, c 
45cd			; 
45cd			;.scrolldir:     push bc 
45cd			;		push de 
45cd			; 
45cd			;		ld a, 0 
45cd			;		cp e 
45cd			;		jr z, .scrollup  
45cd			;		call scroll_down 
45cd			;		jr .scrollnext 
45cd			;.scrollup:	call scroll_up 
45cd			; 
45cd			;		 
45cd			;.scrollnext: 
45cd			;		pop de 
45cd			;		pop bc 
45cd			;		djnz .scrolldir 
45cd			; 
45cd			; 
45cd			; 
45cd			; 
45cd			; 
45cd			;		NEXTW 
45cd			 
45cd			.SCROLLD: 
45cd				CWHEAD .ATQ 63 "SCROLLD" 7 WORD_FLAG_CODE 
45cd 53				db WORD_SYS_CORE+63             
45ce fb 45			dw .ATQ            
45d0 08				db 7 + 1 
45d1 .. 00			db "SCROLLD",0              
45d9				endm 
# End of macro CWHEAD
45d9			; | SCROLLD ( -- ) Scroll down one line - next write will update if required | TO DO 
45d9					if DEBUG_FORTH_WORDS_KEY 
45d9						DMARK "SCD" 
45d9 f5				push af  
45da 3a ee 45			ld a, (.dmark)  
45dd 32 a0 fd			ld (debug_mark),a  
45e0 3a ef 45			ld a, (.dmark+1)  
45e3 32 a1 fd			ld (debug_mark+1),a  
45e6 3a f0 45			ld a, (.dmark+2)  
45e9 32 a2 fd			ld (debug_mark+2),a  
45ec 18 03			jr .pastdmark  
45ee ..			.dmark: db "SCD"  
45f1 f1			.pastdmark: pop af  
45f2			endm  
# End of macro DMARK
45f2						CALLMONITOR 
45f2 cd aa fd			call debug_vector  
45f5				endm  
# End of macro CALLMONITOR
45f5					endif 
45f5			 
45f5 cd 90 0d			call scroll_down 
45f8			;	call update_display 
45f8			 
45f8					NEXTW 
45f8 c3 39 24			jp macro_next 
45fb				endm 
# End of macro NEXTW
45fb			 
45fb			 
45fb			.ATQ: 
45fb				CWHEAD .AUTODSP 78 "AT@" 3 WORD_FLAG_CODE 
45fb 62				db WORD_SYS_CORE+78             
45fc 59 46			dw .AUTODSP            
45fe 04				db 3 + 1 
45ff .. 00			db "AT@",0              
4603				endm 
# End of macro CWHEAD
4603			; | AT@ ( u1 u2 -- n ) Push to stack ASCII value at row u2 col u1 | DONE 
4603					if DEBUG_FORTH_WORDS_KEY 
4603						DMARK "ATA" 
4603 f5				push af  
4604 3a 18 46			ld a, (.dmark)  
4607 32 a0 fd			ld (debug_mark),a  
460a 3a 19 46			ld a, (.dmark+1)  
460d 32 a1 fd			ld (debug_mark+1),a  
4610 3a 1a 46			ld a, (.dmark+2)  
4613 32 a2 fd			ld (debug_mark+2),a  
4616 18 03			jr .pastdmark  
4618 ..			.dmark: db "ATA"  
461b f1			.pastdmark: pop af  
461c			endm  
# End of macro DMARK
461c						CALLMONITOR 
461c cd aa fd			call debug_vector  
461f				endm  
# End of macro CALLMONITOR
461f					endif 
461f			 
461f			 
461f					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
461f cd 4d 22			call macro_dsp_valuehl 
4622				endm 
# End of macro FORTH_DSP_VALUEHL
4622			 
4622					; TODO save cursor row 
4622 7d					ld a,l 
4623 fe 02				cp 2 
4625 20 04				jr nz, .crow3aq 
4627 3e 28				ld a, display_row_2 
4629 18 12				jr .ccol1aq 
462b fe 03		.crow3aq:		cp 3 
462d 20 04				jr nz, .crow4aq 
462f 3e 50				ld a, display_row_3 
4631 18 0a				jr .ccol1aq 
4633 fe 04		.crow4aq:		cp 4 
4635 20 04				jr nz, .crow1aq 
4637 3e 78				ld a, display_row_4 
4639 18 02				jr .ccol1aq 
463b 3e 00		.crow1aq:		ld a,display_row_1 
463d f5			.ccol1aq:		push af			; got row offset 
463e 6f					ld l,a 
463f 26 00				ld h,0 
4641					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4641 cd 05 23			call macro_forth_dsp_pop 
4644				endm 
# End of macro FORTH_DSP_POP
4644					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4644 cd 4d 22			call macro_dsp_valuehl 
4647				endm 
# End of macro FORTH_DSP_VALUEHL
4647					; TODO save cursor col 
4647 f1					pop af 
4648 85					add l		; add col offset 
4649			 
4649					; add current frame buffer address 
4649 2a 01 fb				ld hl, (display_fb_active) 
464c cd de 0f				call addatohl 
464f			 
464f			 
464f			 
464f			 
464f					; get char frame buffer location offset in hl 
464f			 
464f 7e					ld a,(hl) 
4650 26 00				ld h, 0 
4652 6f					ld l, a 
4653			 
4653 cd 48 20				call forth_push_numhl 
4656			 
4656			 
4656					NEXTW 
4656 c3 39 24			jp macro_next 
4659				endm 
# End of macro NEXTW
4659			 
4659			.AUTODSP: 
4659				CWHEAD .MENU 79 "ADSP" 4 WORD_FLAG_CODE 
4659 63				db WORD_SYS_CORE+79             
465a 6f 46			dw .MENU            
465c 05				db 4 + 1 
465d .. 00			db "ADSP",0              
4662				endm 
# End of macro CWHEAD
4662			; | ADSP ( u1 --  ) Enable/Disable Auto screen updates (SLOW). | DONE 
4662			; | | If off, use DRAW to refresh. Default is on. $0003 will enable direct screen writes (TODO)  
4662			 
4662					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4662 cd 4d 22			call macro_dsp_valuehl 
4665				endm 
# End of macro FORTH_DSP_VALUEHL
4665			 
4665			;		push hl 
4665			 
4665					; destroy value TOS 
4665			 
4665					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4665 cd 05 23			call macro_forth_dsp_pop 
4668				endm 
# End of macro FORTH_DSP_POP
4668			 
4668			;		pop hl 
4668			 
4668 7d					ld a,l 
4669 32 71 f9				ld (cli_autodisplay), a 
466c				       NEXTW 
466c c3 39 24			jp macro_next 
466f				endm 
# End of macro NEXTW
466f			 
466f			.MENU: 
466f				CWHEAD .ENDDISPLAY 92 "MENU" 4 WORD_FLAG_CODE 
466f 70				db WORD_SYS_CORE+92             
4670 18 47			dw .ENDDISPLAY            
4672 05				db 4 + 1 
4673 .. 00			db "MENU",0              
4678				endm 
# End of macro CWHEAD
4678			; | MENU ( u1....ux n -- n ) Create a menu. n is the number of menu items on stack. Push number selection to TOS | DONE 
4678			 
4678			;		; get number of items on the stack 
4678			; 
4678				 
4678					FORTH_DSP_VALUEHL 
4678 cd 4d 22			call macro_dsp_valuehl 
467b				endm 
# End of macro FORTH_DSP_VALUEHL
467b				 
467b					if DEBUG_FORTH_WORDS_KEY 
467b						DMARK "MNU" 
467b f5				push af  
467c 3a 90 46			ld a, (.dmark)  
467f 32 a0 fd			ld (debug_mark),a  
4682 3a 91 46			ld a, (.dmark+1)  
4685 32 a1 fd			ld (debug_mark+1),a  
4688 3a 92 46			ld a, (.dmark+2)  
468b 32 a2 fd			ld (debug_mark+2),a  
468e 18 03			jr .pastdmark  
4690 ..			.dmark: db "MNU"  
4693 f1			.pastdmark: pop af  
4694			endm  
# End of macro DMARK
4694						CALLMONITOR 
4694 cd aa fd			call debug_vector  
4697				endm  
# End of macro CALLMONITOR
4697					endif 
4697			 
4697 45					ld b, l	 
4698 05					dec b 
4699			 
4699					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4699 cd 05 23			call macro_forth_dsp_pop 
469c				endm 
# End of macro FORTH_DSP_POP
469c			 
469c			 
469c					; go directly through the stack to pluck out the string pointers and build an array 
469c			 
469c			;		FORTH_DSP 
469c			 
469c					; hl contains top most stack item 
469c				 
469c 11 f6 f0				ld de, scratch 
469f			 
469f			.mbuild: 
469f			 
469f					FORTH_DSP_VALUEHL 
469f cd 4d 22			call macro_dsp_valuehl 
46a2				endm 
# End of macro FORTH_DSP_VALUEHL
46a2			 
46a2					if DEBUG_FORTH_WORDS 
46a2						DMARK "MN3" 
46a2 f5				push af  
46a3 3a b7 46			ld a, (.dmark)  
46a6 32 a0 fd			ld (debug_mark),a  
46a9 3a b8 46			ld a, (.dmark+1)  
46ac 32 a1 fd			ld (debug_mark+1),a  
46af 3a b9 46			ld a, (.dmark+2)  
46b2 32 a2 fd			ld (debug_mark+2),a  
46b5 18 03			jr .pastdmark  
46b7 ..			.dmark: db "MN3"  
46ba f1			.pastdmark: pop af  
46bb			endm  
# End of macro DMARK
46bb						CALLMONITOR 
46bb cd aa fd			call debug_vector  
46be				endm  
# End of macro CALLMONITOR
46be					endif 
46be eb					ex de, hl 
46bf 73					ld (hl), e 
46c0 23					inc hl 
46c1 72					ld (hl), d 
46c2 23					inc hl 
46c3 eb					ex de, hl 
46c4			 
46c4					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
46c4 cd 05 23			call macro_forth_dsp_pop 
46c7				endm 
# End of macro FORTH_DSP_POP
46c7			 
46c7 10 d6				djnz .mbuild 
46c9			 
46c9					; done add term 
46c9			 
46c9 eb					ex de, hl 
46ca 36 00				ld (hl), 0 
46cc 23					inc hl 
46cd 36 00				ld (hl), 0 
46cf			 
46cf				 
46cf					 
46cf 21 f6 f0				ld hl, scratch 
46d2			 
46d2					if DEBUG_FORTH_WORDS 
46d2						DMARK "MNx" 
46d2 f5				push af  
46d3 3a e7 46			ld a, (.dmark)  
46d6 32 a0 fd			ld (debug_mark),a  
46d9 3a e8 46			ld a, (.dmark+1)  
46dc 32 a1 fd			ld (debug_mark+1),a  
46df 3a e9 46			ld a, (.dmark+2)  
46e2 32 a2 fd			ld (debug_mark+2),a  
46e5 18 03			jr .pastdmark  
46e7 ..			.dmark: db "MNx"  
46ea f1			.pastdmark: pop af  
46eb			endm  
# End of macro DMARK
46eb						CALLMONITOR 
46eb cd aa fd			call debug_vector  
46ee				endm  
# End of macro CALLMONITOR
46ee					endif 
46ee			 
46ee			 
46ee			 
46ee 3e 00				ld a, 0 
46f0 cd db 0d				call menu 
46f3			 
46f3			 
46f3 6f					ld l, a 
46f4 26 00				ld h, 0 
46f6			 
46f6					if DEBUG_FORTH_WORDS 
46f6						DMARK "MNr" 
46f6 f5				push af  
46f7 3a 0b 47			ld a, (.dmark)  
46fa 32 a0 fd			ld (debug_mark),a  
46fd 3a 0c 47			ld a, (.dmark+1)  
4700 32 a1 fd			ld (debug_mark+1),a  
4703 3a 0d 47			ld a, (.dmark+2)  
4706 32 a2 fd			ld (debug_mark+2),a  
4709 18 03			jr .pastdmark  
470b ..			.dmark: db "MNr"  
470e f1			.pastdmark: pop af  
470f			endm  
# End of macro DMARK
470f						CALLMONITOR 
470f cd aa fd			call debug_vector  
4712				endm  
# End of macro CALLMONITOR
4712					endif 
4712			 
4712 cd 48 20				call forth_push_numhl 
4715			 
4715			 
4715			 
4715			 
4715				       NEXTW 
4715 c3 39 24			jp macro_next 
4718				endm 
# End of macro NEXTW
4718			 
4718			 
4718			.ENDDISPLAY: 
4718			 
4718			; eof 
# End of file forth_words_display.asm
4718			include "forth_words_str.asm" 
4718			 
4718			; | ## String Words 
4718			 
4718			.SPLIT:   
4718			 
4718				CWHEAD .PTR 52 "SPLIT" 5 WORD_FLAG_CODE 
4718 48				db WORD_SYS_CORE+52             
4719 0d 48			dw .PTR            
471b 06				db 5 + 1 
471c .. 00			db "SPLIT",0              
4722				endm 
# End of macro CWHEAD
4722			; | SPLIT ( s d -- s s...sn c ) Using delimter d, add strings found in s to stack pushing item count c | DONE 
4722					if DEBUG_FORTH_WORDS_KEY 
4722						DMARK "SPT" 
4722 f5				push af  
4723 3a 37 47			ld a, (.dmark)  
4726 32 a0 fd			ld (debug_mark),a  
4729 3a 38 47			ld a, (.dmark+1)  
472c 32 a1 fd			ld (debug_mark+1),a  
472f 3a 39 47			ld a, (.dmark+2)  
4732 32 a2 fd			ld (debug_mark+2),a  
4735 18 03			jr .pastdmark  
4737 ..			.dmark: db "SPT"  
473a f1			.pastdmark: pop af  
473b			endm  
# End of macro DMARK
473b						CALLMONITOR 
473b cd aa fd			call debug_vector  
473e				endm  
# End of macro CALLMONITOR
473e					endif 
473e			 
473e					; get delim 
473e					FORTH_DSP_VALUEHL 
473e cd 4d 22			call macro_dsp_valuehl 
4741				endm 
# End of macro FORTH_DSP_VALUEHL
4741			 
4741					FORTH_DSP_POP 
4741 cd 05 23			call macro_forth_dsp_pop 
4744				endm 
# End of macro FORTH_DSP_POP
4744					 
4744			 
4744 45					ld b, l    ; move delim to b 
4745 0e 01				ld c, 1   ; count of poritions 
4747			 
4747 c5					push bc 
4748			 
4748					if DEBUG_FORTH_WORDS 
4748						DMARK "SPa" 
4748 f5				push af  
4749 3a 5d 47			ld a, (.dmark)  
474c 32 a0 fd			ld (debug_mark),a  
474f 3a 5e 47			ld a, (.dmark+1)  
4752 32 a1 fd			ld (debug_mark+1),a  
4755 3a 5f 47			ld a, (.dmark+2)  
4758 32 a2 fd			ld (debug_mark+2),a  
475b 18 03			jr .pastdmark  
475d ..			.dmark: db "SPa"  
4760 f1			.pastdmark: pop af  
4761			endm  
# End of macro DMARK
4761						CALLMONITOR 
4761 cd aa fd			call debug_vector  
4764				endm  
# End of macro CALLMONITOR
4764					endif 
4764					; get pointer to string to chop up 
4764					FORTH_DSP_VALUEHL 
4764 cd 4d 22			call macro_dsp_valuehl 
4767				endm 
# End of macro FORTH_DSP_VALUEHL
4767			 
4767			;		push hl 
4767 11 f6 f0				ld de, scratch 
476a			.spllop: 
476a c1					pop bc 
476b c5					push bc 
476c			;		pop hl 
476c					if DEBUG_FORTH_WORDS 
476c						DMARK "SPl" 
476c f5				push af  
476d 3a 81 47			ld a, (.dmark)  
4770 32 a0 fd			ld (debug_mark),a  
4773 3a 82 47			ld a, (.dmark+1)  
4776 32 a1 fd			ld (debug_mark+1),a  
4779 3a 83 47			ld a, (.dmark+2)  
477c 32 a2 fd			ld (debug_mark+2),a  
477f 18 03			jr .pastdmark  
4781 ..			.dmark: db "SPl"  
4784 f1			.pastdmark: pop af  
4785			endm  
# End of macro DMARK
4785						CALLMONITOR 
4785 cd aa fd			call debug_vector  
4788				endm  
# End of macro CALLMONITOR
4788					endif 
4788 7e					ld a, (hl) 
4789 b8					cp b 
478a 28 08				jr z, .splnxt 
478c fe 00				cp 0 
478e 28 34				jr z, .splend 
4790 ed a0				ldi 
4792 18 d6				jr .spllop 
4794			 
4794					; hit dlim 
4794			 
4794			.splnxt: 
4794					if DEBUG_FORTH_WORDS 
4794						DMARK "SPx" 
4794 f5				push af  
4795 3a a9 47			ld a, (.dmark)  
4798 32 a0 fd			ld (debug_mark),a  
479b 3a aa 47			ld a, (.dmark+1)  
479e 32 a1 fd			ld (debug_mark+1),a  
47a1 3a ab 47			ld a, (.dmark+2)  
47a4 32 a2 fd			ld (debug_mark+2),a  
47a7 18 03			jr .pastdmark  
47a9 ..			.dmark: db "SPx"  
47ac f1			.pastdmark: pop af  
47ad			endm  
# End of macro DMARK
47ad						CALLMONITOR 
47ad cd aa fd			call debug_vector  
47b0				endm  
# End of macro CALLMONITOR
47b0					endif 
47b0 3e 00				ld a, 0 
47b2 12					ld (de), a 
47b3					;ex de, hl 
47b3 e5					push hl 
47b4 21 f6 f0				ld hl, scratch 
47b7 cd b6 20				call forth_push_str 
47ba e1					pop hl 
47bb					;ex de, hl 
47bb 23					inc hl 
47bc c1					pop bc 
47bd 0c					inc c 
47be c5					push bc 
47bf 11 f6 f0				ld de, scratch 
47c2 18 a6				jr .spllop 
47c4			 
47c4			.splend:		 
47c4					if DEBUG_FORTH_WORDS 
47c4						DMARK "SPe" 
47c4 f5				push af  
47c5 3a d9 47			ld a, (.dmark)  
47c8 32 a0 fd			ld (debug_mark),a  
47cb 3a da 47			ld a, (.dmark+1)  
47ce 32 a1 fd			ld (debug_mark+1),a  
47d1 3a db 47			ld a, (.dmark+2)  
47d4 32 a2 fd			ld (debug_mark+2),a  
47d7 18 03			jr .pastdmark  
47d9 ..			.dmark: db "SPe"  
47dc f1			.pastdmark: pop af  
47dd			endm  
# End of macro DMARK
47dd						CALLMONITOR 
47dd cd aa fd			call debug_vector  
47e0				endm  
# End of macro CALLMONITOR
47e0					endif 
47e0 12					ld (de), a 
47e1 eb					ex de, hl 
47e2			;		push hl 
47e2 21 f6 f0				ld hl, scratch 
47e5 cd b6 20				call forth_push_str 
47e8					 
47e8					if DEBUG_FORTH_WORDS 
47e8						DMARK "SPc" 
47e8 f5				push af  
47e9 3a fd 47			ld a, (.dmark)  
47ec 32 a0 fd			ld (debug_mark),a  
47ef 3a fe 47			ld a, (.dmark+1)  
47f2 32 a1 fd			ld (debug_mark+1),a  
47f5 3a ff 47			ld a, (.dmark+2)  
47f8 32 a2 fd			ld (debug_mark+2),a  
47fb 18 03			jr .pastdmark  
47fd ..			.dmark: db "SPc"  
4800 f1			.pastdmark: pop af  
4801			endm  
# End of macro DMARK
4801						CALLMONITOR 
4801 cd aa fd			call debug_vector  
4804				endm  
# End of macro CALLMONITOR
4804					endif 
4804			 
4804 e1					pop hl    ; get counter from bc which has been push 
4805 26 00				ld h, 0 
4807			;		ld l, c 
4807 cd 48 20				call forth_push_numhl 
480a			 
480a			 
480a				NEXTW 
480a c3 39 24			jp macro_next 
480d				endm 
# End of macro NEXTW
480d			.PTR:   
480d			 
480d				CWHEAD .STYPE 52 "PTR" 3 WORD_FLAG_CODE 
480d 48				db WORD_SYS_CORE+52             
480e 3a 48			dw .STYPE            
4810 04				db 3 + 1 
4811 .. 00			db "PTR",0              
4815				endm 
# End of macro CWHEAD
4815			; | PTR ( -- addr ) Low level push pointer to the value on TOS | DONE 
4815			; | | If a string will give the address of the string without dropping it. Handy for direct string access 
4815			; | | If a number can then use 2@ and 2! for direct value update without using stack words  
4815			 
4815					if DEBUG_FORTH_WORDS_KEY 
4815						DMARK "PTR" 
4815 f5				push af  
4816 3a 2a 48			ld a, (.dmark)  
4819 32 a0 fd			ld (debug_mark),a  
481c 3a 2b 48			ld a, (.dmark+1)  
481f 32 a1 fd			ld (debug_mark+1),a  
4822 3a 2c 48			ld a, (.dmark+2)  
4825 32 a2 fd			ld (debug_mark+2),a  
4828 18 03			jr .pastdmark  
482a ..			.dmark: db "PTR"  
482d f1			.pastdmark: pop af  
482e			endm  
# End of macro DMARK
482e						CALLMONITOR 
482e cd aa fd			call debug_vector  
4831				endm  
# End of macro CALLMONITOR
4831					endif 
4831					FORTH_DSP_VALUEHL 
4831 cd 4d 22			call macro_dsp_valuehl 
4834				endm 
# End of macro FORTH_DSP_VALUEHL
4834 cd 48 20				call forth_push_numhl 
4837			 
4837			 
4837					NEXTW 
4837 c3 39 24			jp macro_next 
483a				endm 
# End of macro NEXTW
483a			.STYPE: 
483a				CWHEAD .UPPER 52 "STYPE" 5 WORD_FLAG_CODE 
483a 48				db WORD_SYS_CORE+52             
483b 89 48			dw .UPPER            
483d 06				db 5 + 1 
483e .. 00			db "STYPE",0              
4844				endm 
# End of macro CWHEAD
4844			; | STYPE ( u -- u type ) Push type of value on TOS - 's' string, 'i' integer...   | DONE 
4844					if DEBUG_FORTH_WORDS_KEY 
4844						DMARK "STY" 
4844 f5				push af  
4845 3a 59 48			ld a, (.dmark)  
4848 32 a0 fd			ld (debug_mark),a  
484b 3a 5a 48			ld a, (.dmark+1)  
484e 32 a1 fd			ld (debug_mark+1),a  
4851 3a 5b 48			ld a, (.dmark+2)  
4854 32 a2 fd			ld (debug_mark+2),a  
4857 18 03			jr .pastdmark  
4859 ..			.dmark: db "STY"  
485c f1			.pastdmark: pop af  
485d			endm  
# End of macro DMARK
485d						CALLMONITOR 
485d cd aa fd			call debug_vector  
4860				endm  
# End of macro CALLMONITOR
4860					endif 
4860					FORTH_DSP 
4860 cd 13 22			call macro_forth_dsp 
4863				endm 
# End of macro FORTH_DSP
4863					;v5 FORTH_DSP_VALUE 
4863			 
4863 7e					ld a, (hl) 
4864			 
4864 f5					push af 
4865			 
4865			; Dont destroy TOS		FORTH_DSP_POP 
4865			 
4865 f1					pop af 
4866			 
4866 fe 01				cp DS_TYPE_STR 
4868 28 09				jr z, .typestr 
486a			 
486a fe 02				cp DS_TYPE_INUM 
486c 28 0a				jr z, .typeinum 
486e			 
486e 21 87 48				ld hl, .tna 
4871 18 0a				jr .tpush 
4873			 
4873 21 83 48		.typestr:	ld hl, .tstr 
4876 18 05				jr .tpush 
4878 21 85 48		.typeinum:	ld hl, .tinum 
487b 18 00				jr .tpush 
487d			 
487d			.tpush: 
487d			 
487d cd b6 20				call forth_push_str 
4880			 
4880					NEXTW 
4880 c3 39 24			jp macro_next 
4883				endm 
# End of macro NEXTW
4883 .. 00		.tstr:	db "s",0 
4885 .. 00		.tinum:  db "i",0 
4887 .. 00		.tna:   db "?", 0 
4889			 
4889			 
4889			.UPPER: 
4889				CWHEAD .LOWER 52 "UPPER" 5 WORD_FLAG_CODE 
4889 48				db WORD_SYS_CORE+52             
488a c4 48			dw .LOWER            
488c 06				db 5 + 1 
488d .. 00			db "UPPER",0              
4893				endm 
# End of macro CWHEAD
4893			; | UPPER ( s -- s ) Upper case string s  | DONE 
4893					if DEBUG_FORTH_WORDS_KEY 
4893						DMARK "UPR" 
4893 f5				push af  
4894 3a a8 48			ld a, (.dmark)  
4897 32 a0 fd			ld (debug_mark),a  
489a 3a a9 48			ld a, (.dmark+1)  
489d 32 a1 fd			ld (debug_mark+1),a  
48a0 3a aa 48			ld a, (.dmark+2)  
48a3 32 a2 fd			ld (debug_mark+2),a  
48a6 18 03			jr .pastdmark  
48a8 ..			.dmark: db "UPR"  
48ab f1			.pastdmark: pop af  
48ac			endm  
# End of macro DMARK
48ac						CALLMONITOR 
48ac cd aa fd			call debug_vector  
48af				endm  
# End of macro CALLMONITOR
48af					endif 
48af			 
48af					FORTH_DSP 
48af cd 13 22			call macro_forth_dsp 
48b2				endm 
# End of macro FORTH_DSP
48b2					 
48b2			; TODO check is string type 
48b2			 
48b2					FORTH_DSP_VALUEHL 
48b2 cd 4d 22			call macro_dsp_valuehl 
48b5				endm 
# End of macro FORTH_DSP_VALUEHL
48b5			; get pointer to string in hl 
48b5			 
48b5 7e			.toup:		ld a, (hl) 
48b6 fe 00				cp 0 
48b8 28 07				jr z, .toupdone 
48ba			 
48ba cd 53 12				call to_upper 
48bd			 
48bd 77					ld (hl), a 
48be 23					inc hl 
48bf 18 f4				jr .toup 
48c1			 
48c1					 
48c1			 
48c1			 
48c1			; for each char convert to upper 
48c1					 
48c1			.toupdone: 
48c1			 
48c1			 
48c1					NEXTW 
48c1 c3 39 24			jp macro_next 
48c4				endm 
# End of macro NEXTW
48c4			.LOWER: 
48c4				CWHEAD .TCASE 52 "LOWER" 5 WORD_FLAG_CODE 
48c4 48				db WORD_SYS_CORE+52             
48c5 ff 48			dw .TCASE            
48c7 06				db 5 + 1 
48c8 .. 00			db "LOWER",0              
48ce				endm 
# End of macro CWHEAD
48ce			; | LOWER ( s -- s ) Lower case string s  | DONE 
48ce					if DEBUG_FORTH_WORDS_KEY 
48ce						DMARK "LWR" 
48ce f5				push af  
48cf 3a e3 48			ld a, (.dmark)  
48d2 32 a0 fd			ld (debug_mark),a  
48d5 3a e4 48			ld a, (.dmark+1)  
48d8 32 a1 fd			ld (debug_mark+1),a  
48db 3a e5 48			ld a, (.dmark+2)  
48de 32 a2 fd			ld (debug_mark+2),a  
48e1 18 03			jr .pastdmark  
48e3 ..			.dmark: db "LWR"  
48e6 f1			.pastdmark: pop af  
48e7			endm  
# End of macro DMARK
48e7						CALLMONITOR 
48e7 cd aa fd			call debug_vector  
48ea				endm  
# End of macro CALLMONITOR
48ea					endif 
48ea			 
48ea					FORTH_DSP 
48ea cd 13 22			call macro_forth_dsp 
48ed				endm 
# End of macro FORTH_DSP
48ed					 
48ed			; TODO check is string type 
48ed			 
48ed					FORTH_DSP_VALUEHL 
48ed cd 4d 22			call macro_dsp_valuehl 
48f0				endm 
# End of macro FORTH_DSP_VALUEHL
48f0			; get pointer to string in hl 
48f0			 
48f0 7e			.tolow:		ld a, (hl) 
48f1 fe 00				cp 0 
48f3 28 07				jr z, .tolowdone 
48f5			 
48f5 cd 5c 12				call to_lower 
48f8			 
48f8 77					ld (hl), a 
48f9 23					inc hl 
48fa 18 f4				jr .tolow 
48fc			 
48fc					 
48fc			 
48fc			 
48fc			; for each char convert to low 
48fc					 
48fc			.tolowdone: 
48fc					NEXTW 
48fc c3 39 24			jp macro_next 
48ff				endm 
# End of macro NEXTW
48ff			.TCASE: 
48ff				CWHEAD .SUBSTR 52 "TCASE" 5 WORD_FLAG_CODE 
48ff 48				db WORD_SYS_CORE+52             
4900 35 4a			dw .SUBSTR            
4902 06				db 5 + 1 
4903 .. 00			db "TCASE",0              
4909				endm 
# End of macro CWHEAD
4909			; | TCASE ( s -- s ) Title case string s  | DONE 
4909					if DEBUG_FORTH_WORDS_KEY 
4909						DMARK "TCS" 
4909 f5				push af  
490a 3a 1e 49			ld a, (.dmark)  
490d 32 a0 fd			ld (debug_mark),a  
4910 3a 1f 49			ld a, (.dmark+1)  
4913 32 a1 fd			ld (debug_mark+1),a  
4916 3a 20 49			ld a, (.dmark+2)  
4919 32 a2 fd			ld (debug_mark+2),a  
491c 18 03			jr .pastdmark  
491e ..			.dmark: db "TCS"  
4921 f1			.pastdmark: pop af  
4922			endm  
# End of macro DMARK
4922						CALLMONITOR 
4922 cd aa fd			call debug_vector  
4925				endm  
# End of macro CALLMONITOR
4925					endif 
4925			 
4925					FORTH_DSP 
4925 cd 13 22			call macro_forth_dsp 
4928				endm 
# End of macro FORTH_DSP
4928					 
4928			; TODO check is string type 
4928			 
4928					FORTH_DSP_VALUEHL 
4928 cd 4d 22			call macro_dsp_valuehl 
492b				endm 
# End of macro FORTH_DSP_VALUEHL
492b			; get pointer to string in hl 
492b			 
492b					if DEBUG_FORTH_WORDS 
492b						DMARK "TC1" 
492b f5				push af  
492c 3a 40 49			ld a, (.dmark)  
492f 32 a0 fd			ld (debug_mark),a  
4932 3a 41 49			ld a, (.dmark+1)  
4935 32 a1 fd			ld (debug_mark+1),a  
4938 3a 42 49			ld a, (.dmark+2)  
493b 32 a2 fd			ld (debug_mark+2),a  
493e 18 03			jr .pastdmark  
4940 ..			.dmark: db "TC1"  
4943 f1			.pastdmark: pop af  
4944			endm  
# End of macro DMARK
4944						CALLMONITOR 
4944 cd aa fd			call debug_vector  
4947				endm  
# End of macro CALLMONITOR
4947					endif 
4947			 
4947					; first time in turn to upper case first char 
4947			 
4947 7e					ld a, (hl) 
4948 c3 d2 49				jp .totsiptou 
494b			 
494b			 
494b 7e			.tot:		ld a, (hl) 
494c fe 00				cp 0 
494e ca 16 4a				jp z, .totdone 
4951			 
4951					if DEBUG_FORTH_WORDS 
4951						DMARK "TC2" 
4951 f5				push af  
4952 3a 66 49			ld a, (.dmark)  
4955 32 a0 fd			ld (debug_mark),a  
4958 3a 67 49			ld a, (.dmark+1)  
495b 32 a1 fd			ld (debug_mark+1),a  
495e 3a 68 49			ld a, (.dmark+2)  
4961 32 a2 fd			ld (debug_mark+2),a  
4964 18 03			jr .pastdmark  
4966 ..			.dmark: db "TC2"  
4969 f1			.pastdmark: pop af  
496a			endm  
# End of macro DMARK
496a						CALLMONITOR 
496a cd aa fd			call debug_vector  
496d				endm  
# End of macro CALLMONITOR
496d					endif 
496d					; check to see if current char is a space 
496d			 
496d fe 20				cp ' ' 
496f 28 21				jr z, .totsp 
4971 cd 5c 12				call to_lower 
4974					if DEBUG_FORTH_WORDS 
4974						DMARK "TC3" 
4974 f5				push af  
4975 3a 89 49			ld a, (.dmark)  
4978 32 a0 fd			ld (debug_mark),a  
497b 3a 8a 49			ld a, (.dmark+1)  
497e 32 a1 fd			ld (debug_mark+1),a  
4981 3a 8b 49			ld a, (.dmark+2)  
4984 32 a2 fd			ld (debug_mark+2),a  
4987 18 03			jr .pastdmark  
4989 ..			.dmark: db "TC3"  
498c f1			.pastdmark: pop af  
498d			endm  
# End of macro DMARK
498d						CALLMONITOR 
498d cd aa fd			call debug_vector  
4990				endm  
# End of macro CALLMONITOR
4990					endif 
4990 18 63				jr .totnxt 
4992			 
4992			.totsp:         ; on a space, find next char which should be upper 
4992			 
4992					if DEBUG_FORTH_WORDS 
4992						DMARK "TC4" 
4992 f5				push af  
4993 3a a7 49			ld a, (.dmark)  
4996 32 a0 fd			ld (debug_mark),a  
4999 3a a8 49			ld a, (.dmark+1)  
499c 32 a1 fd			ld (debug_mark+1),a  
499f 3a a9 49			ld a, (.dmark+2)  
49a2 32 a2 fd			ld (debug_mark+2),a  
49a5 18 03			jr .pastdmark  
49a7 ..			.dmark: db "TC4"  
49aa f1			.pastdmark: pop af  
49ab			endm  
# End of macro DMARK
49ab						CALLMONITOR 
49ab cd aa fd			call debug_vector  
49ae				endm  
# End of macro CALLMONITOR
49ae					endif 
49ae					;; 
49ae			 
49ae fe 20				cp ' ' 
49b0 20 20				jr nz, .totsiptou 
49b2 23					inc hl 
49b3 7e					ld a, (hl) 
49b4					if DEBUG_FORTH_WORDS 
49b4						DMARK "TC5" 
49b4 f5				push af  
49b5 3a c9 49			ld a, (.dmark)  
49b8 32 a0 fd			ld (debug_mark),a  
49bb 3a ca 49			ld a, (.dmark+1)  
49be 32 a1 fd			ld (debug_mark+1),a  
49c1 3a cb 49			ld a, (.dmark+2)  
49c4 32 a2 fd			ld (debug_mark+2),a  
49c7 18 03			jr .pastdmark  
49c9 ..			.dmark: db "TC5"  
49cc f1			.pastdmark: pop af  
49cd			endm  
# End of macro DMARK
49cd						CALLMONITOR 
49cd cd aa fd			call debug_vector  
49d0				endm  
# End of macro CALLMONITOR
49d0					endif 
49d0 18 c0				jr .totsp 
49d2 fe 00		.totsiptou:    cp 0 
49d4 28 40				jr z, .totdone 
49d6					; not space and not zero term so upper case it 
49d6 cd 53 12				call to_upper 
49d9			 
49d9					if DEBUG_FORTH_WORDS 
49d9						DMARK "TC6" 
49d9 f5				push af  
49da 3a ee 49			ld a, (.dmark)  
49dd 32 a0 fd			ld (debug_mark),a  
49e0 3a ef 49			ld a, (.dmark+1)  
49e3 32 a1 fd			ld (debug_mark+1),a  
49e6 3a f0 49			ld a, (.dmark+2)  
49e9 32 a2 fd			ld (debug_mark+2),a  
49ec 18 03			jr .pastdmark  
49ee ..			.dmark: db "TC6"  
49f1 f1			.pastdmark: pop af  
49f2			endm  
# End of macro DMARK
49f2						CALLMONITOR 
49f2 cd aa fd			call debug_vector  
49f5				endm  
# End of macro CALLMONITOR
49f5					endif 
49f5			 
49f5			 
49f5			.totnxt: 
49f5			 
49f5 77					ld (hl), a 
49f6 23					inc hl 
49f7					if DEBUG_FORTH_WORDS 
49f7						DMARK "TC7" 
49f7 f5				push af  
49f8 3a 0c 4a			ld a, (.dmark)  
49fb 32 a0 fd			ld (debug_mark),a  
49fe 3a 0d 4a			ld a, (.dmark+1)  
4a01 32 a1 fd			ld (debug_mark+1),a  
4a04 3a 0e 4a			ld a, (.dmark+2)  
4a07 32 a2 fd			ld (debug_mark+2),a  
4a0a 18 03			jr .pastdmark  
4a0c ..			.dmark: db "TC7"  
4a0f f1			.pastdmark: pop af  
4a10			endm  
# End of macro DMARK
4a10						CALLMONITOR 
4a10 cd aa fd			call debug_vector  
4a13				endm  
# End of macro CALLMONITOR
4a13					endif 
4a13 c3 4b 49				jp .tot 
4a16			 
4a16					 
4a16			 
4a16			 
4a16			; for each char convert to low 
4a16					 
4a16			.totdone: 
4a16					if DEBUG_FORTH_WORDS 
4a16						DMARK "TCd" 
4a16 f5				push af  
4a17 3a 2b 4a			ld a, (.dmark)  
4a1a 32 a0 fd			ld (debug_mark),a  
4a1d 3a 2c 4a			ld a, (.dmark+1)  
4a20 32 a1 fd			ld (debug_mark+1),a  
4a23 3a 2d 4a			ld a, (.dmark+2)  
4a26 32 a2 fd			ld (debug_mark+2),a  
4a29 18 03			jr .pastdmark  
4a2b ..			.dmark: db "TCd"  
4a2e f1			.pastdmark: pop af  
4a2f			endm  
# End of macro DMARK
4a2f						CALLMONITOR 
4a2f cd aa fd			call debug_vector  
4a32				endm  
# End of macro CALLMONITOR
4a32					endif 
4a32					NEXTW 
4a32 c3 39 24			jp macro_next 
4a35				endm 
# End of macro NEXTW
4a35			 
4a35			.SUBSTR: 
4a35				CWHEAD .LEFT 52 "SUBSTR" 6 WORD_FLAG_CODE 
4a35 48				db WORD_SYS_CORE+52             
4a36 93 4a			dw .LEFT            
4a38 07				db 6 + 1 
4a39 .. 00			db "SUBSTR",0              
4a40				endm 
# End of macro CWHEAD
4a40			; | SUBSTR ( s u1 u2 -- s sb ) Push to TOS chars starting at position u1 and with length u2 from string s  | DONE 
4a40			 
4a40					if DEBUG_FORTH_WORDS_KEY 
4a40						DMARK "SST" 
4a40 f5				push af  
4a41 3a 55 4a			ld a, (.dmark)  
4a44 32 a0 fd			ld (debug_mark),a  
4a47 3a 56 4a			ld a, (.dmark+1)  
4a4a 32 a1 fd			ld (debug_mark+1),a  
4a4d 3a 57 4a			ld a, (.dmark+2)  
4a50 32 a2 fd			ld (debug_mark+2),a  
4a53 18 03			jr .pastdmark  
4a55 ..			.dmark: db "SST"  
4a58 f1			.pastdmark: pop af  
4a59			endm  
# End of macro DMARK
4a59						CALLMONITOR 
4a59 cd aa fd			call debug_vector  
4a5c				endm  
# End of macro CALLMONITOR
4a5c					endif 
4a5c			; TODO check string type 
4a5c					FORTH_DSP_VALUEHL 
4a5c cd 4d 22			call macro_dsp_valuehl 
4a5f				endm 
# End of macro FORTH_DSP_VALUEHL
4a5f			 
4a5f e5					push hl      ; string length 
4a60			 
4a60					FORTH_DSP_POP 
4a60 cd 05 23			call macro_forth_dsp_pop 
4a63				endm 
# End of macro FORTH_DSP_POP
4a63			 
4a63					FORTH_DSP_VALUEHL 
4a63 cd 4d 22			call macro_dsp_valuehl 
4a66				endm 
# End of macro FORTH_DSP_VALUEHL
4a66			 
4a66 e5					push hl     ; start char 
4a67			 
4a67					FORTH_DSP_POP 
4a67 cd 05 23			call macro_forth_dsp_pop 
4a6a				endm 
# End of macro FORTH_DSP_POP
4a6a			 
4a6a			 
4a6a					FORTH_DSP_VALUE 
4a6a cd 36 22			call macro_forth_dsp_value 
4a6d				endm 
# End of macro FORTH_DSP_VALUE
4a6d			 
4a6d d1					pop de    ; get start post offset 
4a6e			 
4a6e 19					add hl, de    ; starting offset 
4a6f			 
4a6f c1					pop bc 
4a70 c5					push bc      ; grab size of string 
4a71			 
4a71 e5					push hl    ; save string start  
4a72			 
4a72 26 00				ld h, 0 
4a74 69					ld l, c 
4a75 23					inc hl 
4a76 23					inc hl 
4a77			 
4a77 cd b9 13				call malloc 
4a7a				if DEBUG_FORTH_MALLOC_GUARD 
4a7a cc 75 60				call z,malloc_error 
4a7d				endif 
4a7d			 
4a7d eb					ex de, hl      ; save malloc area for string copy 
4a7e e1					pop hl    ; get back source 
4a7f c1					pop bc    ; get length of string back 
4a80			 
4a80 d5					push de    ; save malloc area for after we push 
4a81 ed b0				ldir     ; copy substr 
4a83			 
4a83			 
4a83 eb					ex de, hl 
4a84 3e 00				ld a, 0 
4a86 77					ld (hl), a   ; term substr 
4a87			 
4a87					 
4a87 e1					pop hl    ; get malloc so we can push it 
4a88 e5					push hl   ; save so we can free it afterwards 
4a89			 
4a89 cd b6 20				call forth_push_str 
4a8c			 
4a8c e1					pop hl 
4a8d cd 83 14				call free 
4a90			 
4a90					 
4a90					 
4a90			 
4a90			 
4a90					NEXTW 
4a90 c3 39 24			jp macro_next 
4a93				endm 
# End of macro NEXTW
4a93			 
4a93			.LEFT: 
4a93				CWHEAD .RIGHT 52 "LEFT" 4 WORD_FLAG_CODE 
4a93 48				db WORD_SYS_CORE+52             
4a94 bb 4a			dw .RIGHT            
4a96 05				db 4 + 1 
4a97 .. 00			db "LEFT",0              
4a9c				endm 
# End of macro CWHEAD
4a9c			; | LEFT ( s u -- s sub ) Push to TOS string u long starting from left of s  | TODO 
4a9c					if DEBUG_FORTH_WORDS_KEY 
4a9c						DMARK "LEF" 
4a9c f5				push af  
4a9d 3a b1 4a			ld a, (.dmark)  
4aa0 32 a0 fd			ld (debug_mark),a  
4aa3 3a b2 4a			ld a, (.dmark+1)  
4aa6 32 a1 fd			ld (debug_mark+1),a  
4aa9 3a b3 4a			ld a, (.dmark+2)  
4aac 32 a2 fd			ld (debug_mark+2),a  
4aaf 18 03			jr .pastdmark  
4ab1 ..			.dmark: db "LEF"  
4ab4 f1			.pastdmark: pop af  
4ab5			endm  
# End of macro DMARK
4ab5						CALLMONITOR 
4ab5 cd aa fd			call debug_vector  
4ab8				endm  
# End of macro CALLMONITOR
4ab8					endif 
4ab8			 
4ab8					NEXTW 
4ab8 c3 39 24			jp macro_next 
4abb				endm 
# End of macro NEXTW
4abb			.RIGHT: 
4abb				CWHEAD .STR2NUM 52 "RIGHT" 5 WORD_FLAG_CODE 
4abb 48				db WORD_SYS_CORE+52             
4abc e4 4a			dw .STR2NUM            
4abe 06				db 5 + 1 
4abf .. 00			db "RIGHT",0              
4ac5				endm 
# End of macro CWHEAD
4ac5			; | RIGHT ( s u -- s sub ) Push to TOS string u long starting from right of s  | TODO 
4ac5					if DEBUG_FORTH_WORDS_KEY 
4ac5						DMARK "RIG" 
4ac5 f5				push af  
4ac6 3a da 4a			ld a, (.dmark)  
4ac9 32 a0 fd			ld (debug_mark),a  
4acc 3a db 4a			ld a, (.dmark+1)  
4acf 32 a1 fd			ld (debug_mark+1),a  
4ad2 3a dc 4a			ld a, (.dmark+2)  
4ad5 32 a2 fd			ld (debug_mark+2),a  
4ad8 18 03			jr .pastdmark  
4ada ..			.dmark: db "RIG"  
4add f1			.pastdmark: pop af  
4ade			endm  
# End of macro DMARK
4ade						CALLMONITOR 
4ade cd aa fd			call debug_vector  
4ae1				endm  
# End of macro CALLMONITOR
4ae1					endif 
4ae1			 
4ae1					NEXTW 
4ae1 c3 39 24			jp macro_next 
4ae4				endm 
# End of macro NEXTW
4ae4			 
4ae4			 
4ae4			.STR2NUM: 
4ae4				CWHEAD .NUM2STR 52 "STR2NUM" 7 WORD_FLAG_CODE 
4ae4 48				db WORD_SYS_CORE+52             
4ae5 70 4b			dw .NUM2STR            
4ae7 08				db 7 + 1 
4ae8 .. 00			db "STR2NUM",0              
4af0				endm 
# End of macro CWHEAD
4af0			; | STR2NUM ( s -- n ) Convert a string on TOS to number | DONE 
4af0			 
4af0			 
4af0			; TODO STR type check to do 
4af0					if DEBUG_FORTH_WORDS_KEY 
4af0						DMARK "S2N" 
4af0 f5				push af  
4af1 3a 05 4b			ld a, (.dmark)  
4af4 32 a0 fd			ld (debug_mark),a  
4af7 3a 06 4b			ld a, (.dmark+1)  
4afa 32 a1 fd			ld (debug_mark+1),a  
4afd 3a 07 4b			ld a, (.dmark+2)  
4b00 32 a2 fd			ld (debug_mark+2),a  
4b03 18 03			jr .pastdmark  
4b05 ..			.dmark: db "S2N"  
4b08 f1			.pastdmark: pop af  
4b09			endm  
# End of macro DMARK
4b09						CALLMONITOR 
4b09 cd aa fd			call debug_vector  
4b0c				endm  
# End of macro CALLMONITOR
4b0c					endif 
4b0c			 
4b0c					;FORTH_DSP 
4b0c					FORTH_DSP_VALUE 
4b0c cd 36 22			call macro_forth_dsp_value 
4b0f				endm 
# End of macro FORTH_DSP_VALUE
4b0f					;inc hl 
4b0f			 
4b0f eb					ex de, hl 
4b10					if DEBUG_FORTH_WORDS 
4b10						DMARK "S2a" 
4b10 f5				push af  
4b11 3a 25 4b			ld a, (.dmark)  
4b14 32 a0 fd			ld (debug_mark),a  
4b17 3a 26 4b			ld a, (.dmark+1)  
4b1a 32 a1 fd			ld (debug_mark+1),a  
4b1d 3a 27 4b			ld a, (.dmark+2)  
4b20 32 a2 fd			ld (debug_mark+2),a  
4b23 18 03			jr .pastdmark  
4b25 ..			.dmark: db "S2a"  
4b28 f1			.pastdmark: pop af  
4b29			endm  
# End of macro DMARK
4b29						CALLMONITOR 
4b29 cd aa fd			call debug_vector  
4b2c				endm  
# End of macro CALLMONITOR
4b2c					endif 
4b2c cd db 12				call string_to_uint16 
4b2f			 
4b2f					if DEBUG_FORTH_WORDS 
4b2f						DMARK "S2b" 
4b2f f5				push af  
4b30 3a 44 4b			ld a, (.dmark)  
4b33 32 a0 fd			ld (debug_mark),a  
4b36 3a 45 4b			ld a, (.dmark+1)  
4b39 32 a1 fd			ld (debug_mark+1),a  
4b3c 3a 46 4b			ld a, (.dmark+2)  
4b3f 32 a2 fd			ld (debug_mark+2),a  
4b42 18 03			jr .pastdmark  
4b44 ..			.dmark: db "S2b"  
4b47 f1			.pastdmark: pop af  
4b48			endm  
# End of macro DMARK
4b48						CALLMONITOR 
4b48 cd aa fd			call debug_vector  
4b4b				endm  
# End of macro CALLMONITOR
4b4b					endif 
4b4b			;		push hl 
4b4b					FORTH_DSP_POP 
4b4b cd 05 23			call macro_forth_dsp_pop 
4b4e				endm 
# End of macro FORTH_DSP_POP
4b4e			;		pop hl 
4b4e					 
4b4e					if DEBUG_FORTH_WORDS 
4b4e						DMARK "S2b" 
4b4e f5				push af  
4b4f 3a 63 4b			ld a, (.dmark)  
4b52 32 a0 fd			ld (debug_mark),a  
4b55 3a 64 4b			ld a, (.dmark+1)  
4b58 32 a1 fd			ld (debug_mark+1),a  
4b5b 3a 65 4b			ld a, (.dmark+2)  
4b5e 32 a2 fd			ld (debug_mark+2),a  
4b61 18 03			jr .pastdmark  
4b63 ..			.dmark: db "S2b"  
4b66 f1			.pastdmark: pop af  
4b67			endm  
# End of macro DMARK
4b67						CALLMONITOR 
4b67 cd aa fd			call debug_vector  
4b6a				endm  
# End of macro CALLMONITOR
4b6a					endif 
4b6a cd 48 20				call forth_push_numhl	 
4b6d			 
4b6d				 
4b6d				       NEXTW 
4b6d c3 39 24			jp macro_next 
4b70				endm 
# End of macro NEXTW
4b70			.NUM2STR: 
4b70				CWHEAD .CONCAT 52 "NUM2STR" 7 WORD_FLAG_CODE 
4b70 48				db WORD_SYS_CORE+52             
4b71 02 4c			dw .CONCAT            
4b73 08				db 7 + 1 
4b74 .. 00			db "NUM2STR",0              
4b7c				endm 
# End of macro CWHEAD
4b7c			; | NUM2STR ( n -- s ) Convert a number on TOS to zero padded string | DONE 
4b7c			 
4b7c			;		; malloc a string to target 
4b7c			;		ld hl, 10     ; TODO max string size should be fine 
4b7c			;		call malloc 
4b7c			;		push hl    ; save malloc location 
4b7c			; 
4b7c			; 
4b7c			;; TODO check int type 
4b7c					if DEBUG_FORTH_WORDS_KEY 
4b7c						DMARK "N2S" 
4b7c f5				push af  
4b7d 3a 91 4b			ld a, (.dmark)  
4b80 32 a0 fd			ld (debug_mark),a  
4b83 3a 92 4b			ld a, (.dmark+1)  
4b86 32 a1 fd			ld (debug_mark+1),a  
4b89 3a 93 4b			ld a, (.dmark+2)  
4b8c 32 a2 fd			ld (debug_mark+2),a  
4b8f 18 03			jr .pastdmark  
4b91 ..			.dmark: db "N2S"  
4b94 f1			.pastdmark: pop af  
4b95			endm  
# End of macro DMARK
4b95						CALLMONITOR 
4b95 cd aa fd			call debug_vector  
4b98				endm  
# End of macro CALLMONITOR
4b98					endif 
4b98			 
4b98					FORTH_DSP_VALUEHL 
4b98 cd 4d 22			call macro_dsp_valuehl 
4b9b				endm 
# End of macro FORTH_DSP_VALUEHL
4b9b			 
4b9b					if DEBUG_FORTH_WORDS 
4b9b						DMARK "NS1" 
4b9b f5				push af  
4b9c 3a b0 4b			ld a, (.dmark)  
4b9f 32 a0 fd			ld (debug_mark),a  
4ba2 3a b1 4b			ld a, (.dmark+1)  
4ba5 32 a1 fd			ld (debug_mark+1),a  
4ba8 3a b2 4b			ld a, (.dmark+2)  
4bab 32 a2 fd			ld (debug_mark+2),a  
4bae 18 03			jr .pastdmark  
4bb0 ..			.dmark: db "NS1"  
4bb3 f1			.pastdmark: pop af  
4bb4			endm  
# End of macro DMARK
4bb4						CALLMONITOR 
4bb4 cd aa fd			call debug_vector  
4bb7				endm  
# End of macro CALLMONITOR
4bb7					endif 
4bb7					FORTH_DSP_POP 
4bb7 cd 05 23			call macro_forth_dsp_pop 
4bba				endm 
# End of macro FORTH_DSP_POP
4bba			 
4bba eb					ex de, hl 
4bbb 21 f6 f0				ld hl, scratch 
4bbe					if DEBUG_FORTH_WORDS 
4bbe						DMARK "NS2" 
4bbe f5				push af  
4bbf 3a d3 4b			ld a, (.dmark)  
4bc2 32 a0 fd			ld (debug_mark),a  
4bc5 3a d4 4b			ld a, (.dmark+1)  
4bc8 32 a1 fd			ld (debug_mark+1),a  
4bcb 3a d5 4b			ld a, (.dmark+2)  
4bce 32 a2 fd			ld (debug_mark+2),a  
4bd1 18 03			jr .pastdmark  
4bd3 ..			.dmark: db "NS2"  
4bd6 f1			.pastdmark: pop af  
4bd7			endm  
# End of macro DMARK
4bd7						CALLMONITOR 
4bd7 cd aa fd			call debug_vector  
4bda				endm  
# End of macro CALLMONITOR
4bda					endif 
4bda cd f3 12				call uitoa_16 
4bdd 21 f6 f0				ld hl, scratch 
4be0					if DEBUG_FORTH_WORDS 
4be0						DMARK "NS3" 
4be0 f5				push af  
4be1 3a f5 4b			ld a, (.dmark)  
4be4 32 a0 fd			ld (debug_mark),a  
4be7 3a f6 4b			ld a, (.dmark+1)  
4bea 32 a1 fd			ld (debug_mark+1),a  
4bed 3a f7 4b			ld a, (.dmark+2)  
4bf0 32 a2 fd			ld (debug_mark+2),a  
4bf3 18 03			jr .pastdmark  
4bf5 ..			.dmark: db "NS3"  
4bf8 f1			.pastdmark: pop af  
4bf9			endm  
# End of macro DMARK
4bf9						CALLMONITOR 
4bf9 cd aa fd			call debug_vector  
4bfc				endm  
# End of macro CALLMONITOR
4bfc					endif 
4bfc cd b6 20				call forth_push_str 
4bff			;		ld a, l 
4bff			;		call DispAToASCII   
4bff			;;TODO need to chage above call to dump into string 
4bff			; 
4bff			; 
4bff			 
4bff				       NEXTW 
4bff c3 39 24			jp macro_next 
4c02				endm 
# End of macro NEXTW
4c02			 
4c02			.CONCAT: 
4c02				CWHEAD .FIND 52 "CONCAT" 6 WORD_FLAG_CODE 
4c02 48				db WORD_SYS_CORE+52             
4c03 b5 4c			dw .FIND            
4c05 07				db 6 + 1 
4c06 .. 00			db "CONCAT",0              
4c0d				endm 
# End of macro CWHEAD
4c0d			; | CONCAT ( s1 s2 -- s3 ) A s1 + s2 is pushed onto the stack | DONE 
4c0d			 
4c0d			; TODO check string type 
4c0d			; TODO create macro to get pointer for next item on stack. Handy for lots of things 
4c0d			 
4c0d					if DEBUG_FORTH_WORDS_KEY 
4c0d						DMARK "CON" 
4c0d f5				push af  
4c0e 3a 22 4c			ld a, (.dmark)  
4c11 32 a0 fd			ld (debug_mark),a  
4c14 3a 23 4c			ld a, (.dmark+1)  
4c17 32 a1 fd			ld (debug_mark+1),a  
4c1a 3a 24 4c			ld a, (.dmark+2)  
4c1d 32 a2 fd			ld (debug_mark+2),a  
4c20 18 03			jr .pastdmark  
4c22 ..			.dmark: db "CON"  
4c25 f1			.pastdmark: pop af  
4c26			endm  
# End of macro DMARK
4c26						CALLMONITOR 
4c26 cd aa fd			call debug_vector  
4c29				endm  
# End of macro CALLMONITOR
4c29					endif 
4c29			 
4c29			 
4c29					FORTH_DSP_VALUE 
4c29 cd 36 22			call macro_forth_dsp_value 
4c2c				endm 
# End of macro FORTH_DSP_VALUE
4c2c e5					push hl   ; s2 
4c2d			 
4c2d					FORTH_DSP_POP 
4c2d cd 05 23			call macro_forth_dsp_pop 
4c30				endm 
# End of macro FORTH_DSP_POP
4c30			 
4c30					FORTH_DSP_VALUE 
4c30 cd 36 22			call macro_forth_dsp_value 
4c33				endm 
# End of macro FORTH_DSP_VALUE
4c33			 
4c33 e5					push hl   ; s1 
4c34			 
4c34					FORTH_DSP_POP 
4c34 cd 05 23			call macro_forth_dsp_pop 
4c37				endm 
# End of macro FORTH_DSP_POP
4c37					 
4c37			 
4c37					; copy s1 
4c37			 
4c37				 
4c37					; save ptr 
4c37 e1					pop hl  
4c38 e5					push hl 
4c39 3e 00				ld a, 0 
4c3b cd 4f 13				call strlent 
4c3e					;inc hl    ; zer0 
4c3e 06 00				ld b, 0 
4c40 4d					ld c, l 
4c41 e1					pop hl		 
4c42 11 f6 f0				ld de, scratch	 
4c45					if DEBUG_FORTH_WORDS 
4c45						DMARK "CO1" 
4c45 f5				push af  
4c46 3a 5a 4c			ld a, (.dmark)  
4c49 32 a0 fd			ld (debug_mark),a  
4c4c 3a 5b 4c			ld a, (.dmark+1)  
4c4f 32 a1 fd			ld (debug_mark+1),a  
4c52 3a 5c 4c			ld a, (.dmark+2)  
4c55 32 a2 fd			ld (debug_mark+2),a  
4c58 18 03			jr .pastdmark  
4c5a ..			.dmark: db "CO1"  
4c5d f1			.pastdmark: pop af  
4c5e			endm  
# End of macro DMARK
4c5e						CALLMONITOR 
4c5e cd aa fd			call debug_vector  
4c61				endm  
# End of macro CALLMONITOR
4c61					endif 
4c61 ed b0				ldir 
4c63			 
4c63 e1					pop hl 
4c64 e5					push hl 
4c65 d5					push de 
4c66			 
4c66			 
4c66 3e 00				ld a, 0 
4c68 cd 4f 13				call strlent 
4c6b 23					inc hl    ; zer0 
4c6c 23					inc hl 
4c6d 06 00				ld b, 0 
4c6f 4d					ld c, l 
4c70 d1					pop de 
4c71 e1					pop hl		 
4c72					if DEBUG_FORTH_WORDS 
4c72						DMARK "CO2" 
4c72 f5				push af  
4c73 3a 87 4c			ld a, (.dmark)  
4c76 32 a0 fd			ld (debug_mark),a  
4c79 3a 88 4c			ld a, (.dmark+1)  
4c7c 32 a1 fd			ld (debug_mark+1),a  
4c7f 3a 89 4c			ld a, (.dmark+2)  
4c82 32 a2 fd			ld (debug_mark+2),a  
4c85 18 03			jr .pastdmark  
4c87 ..			.dmark: db "CO2"  
4c8a f1			.pastdmark: pop af  
4c8b			endm  
# End of macro DMARK
4c8b						CALLMONITOR 
4c8b cd aa fd			call debug_vector  
4c8e				endm  
# End of macro CALLMONITOR
4c8e					endif 
4c8e ed b0				ldir 
4c90			 
4c90			 
4c90			 
4c90 21 f6 f0				ld hl, scratch 
4c93					if DEBUG_FORTH_WORDS 
4c93						DMARK "CO5" 
4c93 f5				push af  
4c94 3a a8 4c			ld a, (.dmark)  
4c97 32 a0 fd			ld (debug_mark),a  
4c9a 3a a9 4c			ld a, (.dmark+1)  
4c9d 32 a1 fd			ld (debug_mark+1),a  
4ca0 3a aa 4c			ld a, (.dmark+2)  
4ca3 32 a2 fd			ld (debug_mark+2),a  
4ca6 18 03			jr .pastdmark  
4ca8 ..			.dmark: db "CO5"  
4cab f1			.pastdmark: pop af  
4cac			endm  
# End of macro DMARK
4cac						CALLMONITOR 
4cac cd aa fd			call debug_vector  
4caf				endm  
# End of macro CALLMONITOR
4caf					endif 
4caf			 
4caf cd b6 20				call forth_push_str 
4cb2			 
4cb2			 
4cb2			 
4cb2			 
4cb2				       NEXTW 
4cb2 c3 39 24			jp macro_next 
4cb5				endm 
# End of macro NEXTW
4cb5			 
4cb5			 
4cb5			.FIND: 
4cb5				CWHEAD .LEN 55 "FIND" 4 WORD_FLAG_CODE 
4cb5 4b				db WORD_SYS_CORE+55             
4cb6 73 4d			dw .LEN            
4cb8 05				db 4 + 1 
4cb9 .. 00			db "FIND",0              
4cbe				endm 
# End of macro CWHEAD
4cbe			; | FIND ( s c -- s u ) Search the string s for the char c and push the position of the first occurance to TOS | DONE 
4cbe			 
4cbe					if DEBUG_FORTH_WORDS_KEY 
4cbe						DMARK "FND" 
4cbe f5				push af  
4cbf 3a d3 4c			ld a, (.dmark)  
4cc2 32 a0 fd			ld (debug_mark),a  
4cc5 3a d4 4c			ld a, (.dmark+1)  
4cc8 32 a1 fd			ld (debug_mark+1),a  
4ccb 3a d5 4c			ld a, (.dmark+2)  
4cce 32 a2 fd			ld (debug_mark+2),a  
4cd1 18 03			jr .pastdmark  
4cd3 ..			.dmark: db "FND"  
4cd6 f1			.pastdmark: pop af  
4cd7			endm  
# End of macro DMARK
4cd7						CALLMONITOR 
4cd7 cd aa fd			call debug_vector  
4cda				endm  
# End of macro CALLMONITOR
4cda					endif 
4cda			 
4cda			; TODO check string type 
4cda					FORTH_DSP_VALUE 
4cda cd 36 22			call macro_forth_dsp_value 
4cdd				endm 
# End of macro FORTH_DSP_VALUE
4cdd			 
4cdd e5					push hl    
4cde 7e					ld a,(hl)    ; char to find   
4cdf			; TODO change char to substr 
4cdf			 
4cdf f5					push af 
4ce0					 
4ce0			 
4ce0			 
4ce0					if DEBUG_FORTH_WORDS 
4ce0						DMARK "FN1" 
4ce0 f5				push af  
4ce1 3a f5 4c			ld a, (.dmark)  
4ce4 32 a0 fd			ld (debug_mark),a  
4ce7 3a f6 4c			ld a, (.dmark+1)  
4cea 32 a1 fd			ld (debug_mark+1),a  
4ced 3a f7 4c			ld a, (.dmark+2)  
4cf0 32 a2 fd			ld (debug_mark+2),a  
4cf3 18 03			jr .pastdmark  
4cf5 ..			.dmark: db "FN1"  
4cf8 f1			.pastdmark: pop af  
4cf9			endm  
# End of macro DMARK
4cf9						CALLMONITOR 
4cf9 cd aa fd			call debug_vector  
4cfc				endm  
# End of macro CALLMONITOR
4cfc					endif 
4cfc			 
4cfc					FORTH_DSP_POP 
4cfc cd 05 23			call macro_forth_dsp_pop 
4cff				endm 
# End of macro FORTH_DSP_POP
4cff			 
4cff					; string to search 
4cff			 
4cff					FORTH_DSP_VALUE 
4cff cd 36 22			call macro_forth_dsp_value 
4d02				endm 
# End of macro FORTH_DSP_VALUE
4d02			 
4d02 d1					pop de  ; d is char to find  
4d03			 
4d03					if DEBUG_FORTH_WORDS 
4d03						DMARK "FN2" 
4d03 f5				push af  
4d04 3a 18 4d			ld a, (.dmark)  
4d07 32 a0 fd			ld (debug_mark),a  
4d0a 3a 19 4d			ld a, (.dmark+1)  
4d0d 32 a1 fd			ld (debug_mark+1),a  
4d10 3a 1a 4d			ld a, (.dmark+2)  
4d13 32 a2 fd			ld (debug_mark+2),a  
4d16 18 03			jr .pastdmark  
4d18 ..			.dmark: db "FN2"  
4d1b f1			.pastdmark: pop af  
4d1c			endm  
# End of macro DMARK
4d1c						CALLMONITOR 
4d1c cd aa fd			call debug_vector  
4d1f				endm  
# End of macro CALLMONITOR
4d1f					endif 
4d1f					 
4d1f 01 00 00				ld bc, 0 
4d22 7e			.findchar:      ld a,(hl) 
4d23 fe 00				cp 0   		 
4d25 28 27				jr z, .finddone     
4d27 ba					cp d 
4d28 28 20				jr z, .foundchar 
4d2a 03					inc bc 
4d2b 23					inc hl 
4d2c					if DEBUG_FORTH_WORDS 
4d2c						DMARK "FN3" 
4d2c f5				push af  
4d2d 3a 41 4d			ld a, (.dmark)  
4d30 32 a0 fd			ld (debug_mark),a  
4d33 3a 42 4d			ld a, (.dmark+1)  
4d36 32 a1 fd			ld (debug_mark+1),a  
4d39 3a 43 4d			ld a, (.dmark+2)  
4d3c 32 a2 fd			ld (debug_mark+2),a  
4d3f 18 03			jr .pastdmark  
4d41 ..			.dmark: db "FN3"  
4d44 f1			.pastdmark: pop af  
4d45			endm  
# End of macro DMARK
4d45						CALLMONITOR 
4d45 cd aa fd			call debug_vector  
4d48				endm  
# End of macro CALLMONITOR
4d48					endif 
4d48 18 d8				jr .findchar 
4d4a			 
4d4a			 
4d4a c5			.foundchar:	push bc 
4d4b e1					pop hl 
4d4c 18 03				jr .findexit 
4d4e			 
4d4e			 
4d4e							 
4d4e			 
4d4e			.finddone:     ; got to end of string with no find 
4d4e 21 00 00				ld hl, 0 
4d51			.findexit: 
4d51			 
4d51					if DEBUG_FORTH_WORDS 
4d51						DMARK "FNd" 
4d51 f5				push af  
4d52 3a 66 4d			ld a, (.dmark)  
4d55 32 a0 fd			ld (debug_mark),a  
4d58 3a 67 4d			ld a, (.dmark+1)  
4d5b 32 a1 fd			ld (debug_mark+1),a  
4d5e 3a 68 4d			ld a, (.dmark+2)  
4d61 32 a2 fd			ld (debug_mark+2),a  
4d64 18 03			jr .pastdmark  
4d66 ..			.dmark: db "FNd"  
4d69 f1			.pastdmark: pop af  
4d6a			endm  
# End of macro DMARK
4d6a						CALLMONITOR 
4d6a cd aa fd			call debug_vector  
4d6d				endm  
# End of macro CALLMONITOR
4d6d					endif 
4d6d cd 48 20			call forth_push_numhl 
4d70			 
4d70				       NEXTW 
4d70 c3 39 24			jp macro_next 
4d73				endm 
# End of macro NEXTW
4d73			 
4d73			.LEN: 
4d73				CWHEAD .ASC 56 "COUNT" 5 WORD_FLAG_CODE 
4d73 4c				db WORD_SYS_CORE+56             
4d74 dd 4d			dw .ASC            
4d76 06				db 5 + 1 
4d77 .. 00			db "COUNT",0              
4d7d				endm 
# End of macro CWHEAD
4d7d			; | COUNT (  str -- str u1 ) Push the length of the string str on TOS as u1 | DONE 
4d7d			 
4d7d					if DEBUG_FORTH_WORDS_KEY 
4d7d						DMARK "CNT" 
4d7d f5				push af  
4d7e 3a 92 4d			ld a, (.dmark)  
4d81 32 a0 fd			ld (debug_mark),a  
4d84 3a 93 4d			ld a, (.dmark+1)  
4d87 32 a1 fd			ld (debug_mark+1),a  
4d8a 3a 94 4d			ld a, (.dmark+2)  
4d8d 32 a2 fd			ld (debug_mark+2),a  
4d90 18 03			jr .pastdmark  
4d92 ..			.dmark: db "CNT"  
4d95 f1			.pastdmark: pop af  
4d96			endm  
# End of macro DMARK
4d96						CALLMONITOR 
4d96 cd aa fd			call debug_vector  
4d99				endm  
# End of macro CALLMONITOR
4d99					endif 
4d99			; TODO check string type 
4d99					FORTH_DSP_VALUE 
4d99 cd 36 22			call macro_forth_dsp_value 
4d9c				endm 
# End of macro FORTH_DSP_VALUE
4d9c			 
4d9c			 
4d9c					if DEBUG_FORTH_WORDS 
4d9c						DMARK "CN?" 
4d9c f5				push af  
4d9d 3a b1 4d			ld a, (.dmark)  
4da0 32 a0 fd			ld (debug_mark),a  
4da3 3a b2 4d			ld a, (.dmark+1)  
4da6 32 a1 fd			ld (debug_mark+1),a  
4da9 3a b3 4d			ld a, (.dmark+2)  
4dac 32 a2 fd			ld (debug_mark+2),a  
4daf 18 03			jr .pastdmark  
4db1 ..			.dmark: db "CN?"  
4db4 f1			.pastdmark: pop af  
4db5			endm  
# End of macro DMARK
4db5						CALLMONITOR 
4db5 cd aa fd			call debug_vector  
4db8				endm  
# End of macro CALLMONITOR
4db8					endif 
4db8 cd 44 13				call strlenz 
4dbb					if DEBUG_FORTH_WORDS 
4dbb						DMARK "CNl" 
4dbb f5				push af  
4dbc 3a d0 4d			ld a, (.dmark)  
4dbf 32 a0 fd			ld (debug_mark),a  
4dc2 3a d1 4d			ld a, (.dmark+1)  
4dc5 32 a1 fd			ld (debug_mark+1),a  
4dc8 3a d2 4d			ld a, (.dmark+2)  
4dcb 32 a2 fd			ld (debug_mark+2),a  
4dce 18 03			jr .pastdmark  
4dd0 ..			.dmark: db "CNl"  
4dd3 f1			.pastdmark: pop af  
4dd4			endm  
# End of macro DMARK
4dd4						CALLMONITOR 
4dd4 cd aa fd			call debug_vector  
4dd7				endm  
# End of macro CALLMONITOR
4dd7					endif 
4dd7			 
4dd7 cd 48 20				call forth_push_numhl 
4dda			 
4dda			 
4dda			 
4dda				       NEXTW 
4dda c3 39 24			jp macro_next 
4ddd				endm 
# End of macro NEXTW
4ddd			.ASC: 
4ddd				CWHEAD .CHR 57 "ASC" 3 WORD_FLAG_CODE 
4ddd 4d				db WORD_SYS_CORE+57             
4dde 4b 4e			dw .CHR            
4de0 04				db 3 + 1 
4de1 .. 00			db "ASC",0              
4de5				endm 
# End of macro CWHEAD
4de5			; | ASC ( u -- n ) Get the ASCII value of the first character of the string on TOS | DONE 
4de5					if DEBUG_FORTH_WORDS_KEY 
4de5						DMARK "ASC" 
4de5 f5				push af  
4de6 3a fa 4d			ld a, (.dmark)  
4de9 32 a0 fd			ld (debug_mark),a  
4dec 3a fb 4d			ld a, (.dmark+1)  
4def 32 a1 fd			ld (debug_mark+1),a  
4df2 3a fc 4d			ld a, (.dmark+2)  
4df5 32 a2 fd			ld (debug_mark+2),a  
4df8 18 03			jr .pastdmark  
4dfa ..			.dmark: db "ASC"  
4dfd f1			.pastdmark: pop af  
4dfe			endm  
# End of macro DMARK
4dfe						CALLMONITOR 
4dfe cd aa fd			call debug_vector  
4e01				endm  
# End of macro CALLMONITOR
4e01					endif 
4e01					FORTH_DSP_VALUE 
4e01 cd 36 22			call macro_forth_dsp_value 
4e04				endm 
# End of macro FORTH_DSP_VALUE
4e04					;v5 FORTH_DSP_VALUE 
4e04			;		inc hl      ; now at start of numeric as string 
4e04			 
4e04 e5					push hl 
4e05			 
4e05					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4e05 cd 05 23			call macro_forth_dsp_pop 
4e08				endm 
# End of macro FORTH_DSP_POP
4e08			 
4e08 e1					pop hl 
4e09			 
4e09					if DEBUG_FORTH_WORDS 
4e09						DMARK "AS1" 
4e09 f5				push af  
4e0a 3a 1e 4e			ld a, (.dmark)  
4e0d 32 a0 fd			ld (debug_mark),a  
4e10 3a 1f 4e			ld a, (.dmark+1)  
4e13 32 a1 fd			ld (debug_mark+1),a  
4e16 3a 20 4e			ld a, (.dmark+2)  
4e19 32 a2 fd			ld (debug_mark+2),a  
4e1c 18 03			jr .pastdmark  
4e1e ..			.dmark: db "AS1"  
4e21 f1			.pastdmark: pop af  
4e22			endm  
# End of macro DMARK
4e22						CALLMONITOR 
4e22 cd aa fd			call debug_vector  
4e25				endm  
# End of macro CALLMONITOR
4e25					endif 
4e25					; push the content of a onto the stack as a value 
4e25			 
4e25 7e					ld a,(hl)   ; get char 
4e26 26 00				ld h,0 
4e28 6f					ld l,a 
4e29					if DEBUG_FORTH_WORDS 
4e29						DMARK "AS2" 
4e29 f5				push af  
4e2a 3a 3e 4e			ld a, (.dmark)  
4e2d 32 a0 fd			ld (debug_mark),a  
4e30 3a 3f 4e			ld a, (.dmark+1)  
4e33 32 a1 fd			ld (debug_mark+1),a  
4e36 3a 40 4e			ld a, (.dmark+2)  
4e39 32 a2 fd			ld (debug_mark+2),a  
4e3c 18 03			jr .pastdmark  
4e3e ..			.dmark: db "AS2"  
4e41 f1			.pastdmark: pop af  
4e42			endm  
# End of macro DMARK
4e42						CALLMONITOR 
4e42 cd aa fd			call debug_vector  
4e45				endm  
# End of macro CALLMONITOR
4e45					endif 
4e45 cd 48 20				call forth_push_numhl 
4e48			 
4e48				       NEXTW 
4e48 c3 39 24			jp macro_next 
4e4b				endm 
# End of macro NEXTW
4e4b			 
4e4b			.CHR: 
4e4b				CWHEAD .ENDSTR 57 "CHR" 3 WORD_FLAG_CODE 
4e4b 4d				db WORD_SYS_CORE+57             
4e4c 87 4e			dw .ENDSTR            
4e4e 04				db 3 + 1 
4e4f .. 00			db "CHR",0              
4e53				endm 
# End of macro CWHEAD
4e53			; | CHR ( u -- n ) The ASCII character value of u is turned into a string n on the stack | DONE 
4e53					if DEBUG_FORTH_WORDS_KEY 
4e53						DMARK "CHR" 
4e53 f5				push af  
4e54 3a 68 4e			ld a, (.dmark)  
4e57 32 a0 fd			ld (debug_mark),a  
4e5a 3a 69 4e			ld a, (.dmark+1)  
4e5d 32 a1 fd			ld (debug_mark+1),a  
4e60 3a 6a 4e			ld a, (.dmark+2)  
4e63 32 a2 fd			ld (debug_mark+2),a  
4e66 18 03			jr .pastdmark  
4e68 ..			.dmark: db "CHR"  
4e6b f1			.pastdmark: pop af  
4e6c			endm  
# End of macro DMARK
4e6c						CALLMONITOR 
4e6c cd aa fd			call debug_vector  
4e6f				endm  
# End of macro CALLMONITOR
4e6f					endif 
4e6f					FORTH_DSP_VALUEHL 
4e6f cd 4d 22			call macro_dsp_valuehl 
4e72				endm 
# End of macro FORTH_DSP_VALUEHL
4e72			 
4e72					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4e72 cd 05 23			call macro_forth_dsp_pop 
4e75				endm 
# End of macro FORTH_DSP_POP
4e75			 
4e75					; save asci byte as a zero term string and push string 
4e75			 
4e75 7d					ld a,l 
4e76 32 f6 f0				ld (scratch), a 
4e79			 
4e79 3e 00				ld a, 0 
4e7b 32 f7 f0				ld (scratch+1), a 
4e7e			 
4e7e 21 f6 f0				ld hl, scratch 
4e81 cd b6 20				call forth_push_str 
4e84			 
4e84			 
4e84				       NEXTW 
4e84 c3 39 24			jp macro_next 
4e87				endm 
# End of macro NEXTW
4e87			 
4e87			 
4e87			 
4e87			 
4e87			.ENDSTR: 
4e87			; eof 
4e87			 
# End of file forth_words_str.asm
4e87			include "forth_words_key.asm" 
4e87			 
4e87			; | ## Keyboard Words 
4e87			 
4e87			.KEY: 
4e87				CWHEAD .KEYDB 42 "KEY" 3 WORD_FLAG_CODE 
4e87 3e				db WORD_SYS_CORE+42             
4e88 b7 4e			dw .KEYDB            
4e8a 04				db 3 + 1 
4e8b .. 00			db "KEY",0              
4e8f				endm 
# End of macro CWHEAD
4e8f			; | KEY ( -- u ) A non-blocking read of keypress | DONE 
4e8f			; | | The ASCII key (or key code) is pushed to stack. If no key is currently held down then push a 0 
4e8f			; | | Can use something like this to process: 
4e8f			; | | > repeat active . key ?dup if emit then #1 until  
4e8f			 
4e8f					if DEBUG_FORTH_WORDS_KEY 
4e8f						DMARK "KEY" 
4e8f f5				push af  
4e90 3a a4 4e			ld a, (.dmark)  
4e93 32 a0 fd			ld (debug_mark),a  
4e96 3a a5 4e			ld a, (.dmark+1)  
4e99 32 a1 fd			ld (debug_mark+1),a  
4e9c 3a a6 4e			ld a, (.dmark+2)  
4e9f 32 a2 fd			ld (debug_mark+2),a  
4ea2 18 03			jr .pastdmark  
4ea4 ..			.dmark: db "KEY"  
4ea7 f1			.pastdmark: pop af  
4ea8			endm  
# End of macro DMARK
4ea8						CALLMONITOR 
4ea8 cd aa fd			call debug_vector  
4eab				endm  
# End of macro CALLMONITOR
4eab					endif 
4eab			; TODO currently waits 
4eab cd a5 75				call cinndb 
4eae					;call cin_wait 
4eae 6f					ld l, a 
4eaf 26 00				ld h, 0 
4eb1 cd 48 20				call forth_push_numhl 
4eb4					NEXTW 
4eb4 c3 39 24			jp macro_next 
4eb7				endm 
# End of macro NEXTW
4eb7			.KEYDB: 
4eb7				CWHEAD .WAITK 42 "KEYDB" 5 WORD_FLAG_CODE 
4eb7 3e				db WORD_SYS_CORE+42             
4eb8 e9 4e			dw .WAITK            
4eba 06				db 5 + 1 
4ebb .. 00			db "KEYDB",0              
4ec1				endm 
# End of macro CWHEAD
4ec1			; | KEYDB ( -- u ) A non-blocking read of keypress with key release debounce | DONE 
4ec1			; | | The ASCII key (or key code) is pushed to stack. If no key is currently held down then push a 0 
4ec1			; | | Can use something like this to process: 
4ec1			; | | > repeat active . key ?dup if emit then #1 until  
4ec1			 
4ec1					if DEBUG_FORTH_WORDS_KEY 
4ec1						DMARK "KEB" 
4ec1 f5				push af  
4ec2 3a d6 4e			ld a, (.dmark)  
4ec5 32 a0 fd			ld (debug_mark),a  
4ec8 3a d7 4e			ld a, (.dmark+1)  
4ecb 32 a1 fd			ld (debug_mark+1),a  
4ece 3a d8 4e			ld a, (.dmark+2)  
4ed1 32 a2 fd			ld (debug_mark+2),a  
4ed4 18 03			jr .pastdmark  
4ed6 ..			.dmark: db "KEB"  
4ed9 f1			.pastdmark: pop af  
4eda			endm  
# End of macro DMARK
4eda						CALLMONITOR 
4eda cd aa fd			call debug_vector  
4edd				endm  
# End of macro CALLMONITOR
4edd					endif 
4edd			; TODO currently waits 
4edd cd 91 75				call cin 
4ee0					;call cin_wait 
4ee0 6f					ld l, a 
4ee1 26 00				ld h, 0 
4ee3 cd 48 20				call forth_push_numhl 
4ee6					NEXTW 
4ee6 c3 39 24			jp macro_next 
4ee9				endm 
# End of macro NEXTW
4ee9			.WAITK: 
4ee9				CWHEAD .ACCEPT 43 "WAITK" 5 WORD_FLAG_CODE 
4ee9 3f				db WORD_SYS_CORE+43             
4eea 1b 4f			dw .ACCEPT            
4eec 06				db 5 + 1 
4eed .. 00			db "WAITK",0              
4ef3				endm 
# End of macro CWHEAD
4ef3			; | WAITK ( -- w ) Wait for keypress TOS is key press | DONE 
4ef3					if DEBUG_FORTH_WORDS_KEY 
4ef3						DMARK "WAI" 
4ef3 f5				push af  
4ef4 3a 08 4f			ld a, (.dmark)  
4ef7 32 a0 fd			ld (debug_mark),a  
4efa 3a 09 4f			ld a, (.dmark+1)  
4efd 32 a1 fd			ld (debug_mark+1),a  
4f00 3a 0a 4f			ld a, (.dmark+2)  
4f03 32 a2 fd			ld (debug_mark+2),a  
4f06 18 03			jr .pastdmark  
4f08 ..			.dmark: db "WAI"  
4f0b f1			.pastdmark: pop af  
4f0c			endm  
# End of macro DMARK
4f0c						CALLMONITOR 
4f0c cd aa fd			call debug_vector  
4f0f				endm  
# End of macro CALLMONITOR
4f0f					endif 
4f0f cd 80 75				call cin_wait 
4f12 6f					ld l, a 
4f13 26 00				ld h, 0 
4f15 cd 48 20				call forth_push_numhl 
4f18					NEXTW 
4f18 c3 39 24			jp macro_next 
4f1b				endm 
# End of macro NEXTW
4f1b			.ACCEPT: 
4f1b				CWHEAD .EDIT 44 "ACCEPT" 6 WORD_FLAG_CODE 
4f1b 40				db WORD_SYS_CORE+44             
4f1c 79 4f			dw .EDIT            
4f1e 07				db 6 + 1 
4f1f .. 00			db "ACCEPT",0              
4f26				endm 
# End of macro CWHEAD
4f26			; | ACCEPT ( -- w ) Prompt for text input and push pointer to string | DONE 
4f26					; TODO crashes on push 
4f26					if DEBUG_FORTH_WORDS_KEY 
4f26						DMARK "ACC" 
4f26 f5				push af  
4f27 3a 3b 4f			ld a, (.dmark)  
4f2a 32 a0 fd			ld (debug_mark),a  
4f2d 3a 3c 4f			ld a, (.dmark+1)  
4f30 32 a1 fd			ld (debug_mark+1),a  
4f33 3a 3d 4f			ld a, (.dmark+2)  
4f36 32 a2 fd			ld (debug_mark+2),a  
4f39 18 03			jr .pastdmark  
4f3b ..			.dmark: db "ACC"  
4f3e f1			.pastdmark: pop af  
4f3f			endm  
# End of macro DMARK
4f3f						CALLMONITOR 
4f3f cd aa fd			call debug_vector  
4f42				endm  
# End of macro CALLMONITOR
4f42					endif 
4f42 21 f4 f2				ld hl, os_input 
4f45 3e 00				ld a, 0 
4f47 77					ld (hl),a 
4f48 3a 93 f9				ld a,(f_cursor_ptr) 
4f4b 16 64				ld d, 100 
4f4d 0e 00				ld c, 0 
4f4f 1e 28				ld e, 40 
4f51 cd 0b 10				call input_str 
4f54					; TODO perhaps do a type check and wrap in quotes if not a number 
4f54 21 f4 f2				ld hl, os_input 
4f57					if DEBUG_FORTH_WORDS 
4f57						DMARK "AC1" 
4f57 f5				push af  
4f58 3a 6c 4f			ld a, (.dmark)  
4f5b 32 a0 fd			ld (debug_mark),a  
4f5e 3a 6d 4f			ld a, (.dmark+1)  
4f61 32 a1 fd			ld (debug_mark+1),a  
4f64 3a 6e 4f			ld a, (.dmark+2)  
4f67 32 a2 fd			ld (debug_mark+2),a  
4f6a 18 03			jr .pastdmark  
4f6c ..			.dmark: db "AC1"  
4f6f f1			.pastdmark: pop af  
4f70			endm  
# End of macro DMARK
4f70						CALLMONITOR 
4f70 cd aa fd			call debug_vector  
4f73				endm  
# End of macro CALLMONITOR
4f73					endif 
4f73 cd b6 20				call forth_push_str 
4f76					NEXTW 
4f76 c3 39 24			jp macro_next 
4f79				endm 
# End of macro NEXTW
4f79			 
4f79			.EDIT: 
4f79				CWHEAD .DEDIT 44 "EDIT" 4 WORD_FLAG_CODE 
4f79 40				db WORD_SYS_CORE+44             
4f7a 1b 50			dw .DEDIT            
4f7c 05				db 4 + 1 
4f7d .. 00			db "EDIT",0              
4f82				endm 
# End of macro CWHEAD
4f82			; | EDIT ( u -- u ) Takes string on TOS and allows editing of it. Pushes it back once done. | DONE 
4f82			 
4f82					; TODO does not copy from stack 
4f82					if DEBUG_FORTH_WORDS_KEY 
4f82						DMARK "EDT" 
4f82 f5				push af  
4f83 3a 97 4f			ld a, (.dmark)  
4f86 32 a0 fd			ld (debug_mark),a  
4f89 3a 98 4f			ld a, (.dmark+1)  
4f8c 32 a1 fd			ld (debug_mark+1),a  
4f8f 3a 99 4f			ld a, (.dmark+2)  
4f92 32 a2 fd			ld (debug_mark+2),a  
4f95 18 03			jr .pastdmark  
4f97 ..			.dmark: db "EDT"  
4f9a f1			.pastdmark: pop af  
4f9b			endm  
# End of macro DMARK
4f9b						CALLMONITOR 
4f9b cd aa fd			call debug_vector  
4f9e				endm  
# End of macro CALLMONITOR
4f9e					endif 
4f9e			 
4f9e					;FORTH_DSP 
4f9e					FORTH_DSP_VALUEHL 
4f9e cd 4d 22			call macro_dsp_valuehl 
4fa1				endm 
# End of macro FORTH_DSP_VALUEHL
4fa1			;		inc hl    ; TODO do type check 
4fa1			 
4fa1			;		call get_word_hl 
4fa1 e5					push hl 
4fa2					if DEBUG_FORTH_WORDS 
4fa2						DMARK "EDp" 
4fa2 f5				push af  
4fa3 3a b7 4f			ld a, (.dmark)  
4fa6 32 a0 fd			ld (debug_mark),a  
4fa9 3a b8 4f			ld a, (.dmark+1)  
4fac 32 a1 fd			ld (debug_mark+1),a  
4faf 3a b9 4f			ld a, (.dmark+2)  
4fb2 32 a2 fd			ld (debug_mark+2),a  
4fb5 18 03			jr .pastdmark  
4fb7 ..			.dmark: db "EDp"  
4fba f1			.pastdmark: pop af  
4fbb			endm  
# End of macro DMARK
4fbb						CALLMONITOR 
4fbb cd aa fd			call debug_vector  
4fbe				endm  
# End of macro CALLMONITOR
4fbe					endif 
4fbe				;	ld a, 0 
4fbe cd 44 13				call strlenz 
4fc1 23					inc hl 
4fc2			 
4fc2 06 00				ld b, 0 
4fc4 4d					ld c, l 
4fc5			 
4fc5 e1					pop hl 
4fc6 11 f4 f2				ld de, os_input 
4fc9					if DEBUG_FORTH_WORDS_KEY 
4fc9						DMARK "EDc" 
4fc9 f5				push af  
4fca 3a de 4f			ld a, (.dmark)  
4fcd 32 a0 fd			ld (debug_mark),a  
4fd0 3a df 4f			ld a, (.dmark+1)  
4fd3 32 a1 fd			ld (debug_mark+1),a  
4fd6 3a e0 4f			ld a, (.dmark+2)  
4fd9 32 a2 fd			ld (debug_mark+2),a  
4fdc 18 03			jr .pastdmark  
4fde ..			.dmark: db "EDc"  
4fe1 f1			.pastdmark: pop af  
4fe2			endm  
# End of macro DMARK
4fe2						CALLMONITOR 
4fe2 cd aa fd			call debug_vector  
4fe5				endm  
# End of macro CALLMONITOR
4fe5					endif 
4fe5 ed b0				ldir 
4fe7			 
4fe7			 
4fe7 21 f4 f2				ld hl, os_input 
4fea					;ld a, 0 
4fea					;ld (hl),a 
4fea 3a 93 f9				ld a,(f_cursor_ptr) 
4fed 16 64				ld d, 100 
4fef 0e 00				ld c, 0 
4ff1 1e 28				ld e, 40 
4ff3 cd 0b 10				call input_str 
4ff6					; TODO perhaps do a type check and wrap in quotes if not a number 
4ff6 21 f4 f2				ld hl, os_input 
4ff9					if DEBUG_FORTH_WORDS 
4ff9						DMARK "ED1" 
4ff9 f5				push af  
4ffa 3a 0e 50			ld a, (.dmark)  
4ffd 32 a0 fd			ld (debug_mark),a  
5000 3a 0f 50			ld a, (.dmark+1)  
5003 32 a1 fd			ld (debug_mark+1),a  
5006 3a 10 50			ld a, (.dmark+2)  
5009 32 a2 fd			ld (debug_mark+2),a  
500c 18 03			jr .pastdmark  
500e ..			.dmark: db "ED1"  
5011 f1			.pastdmark: pop af  
5012			endm  
# End of macro DMARK
5012						CALLMONITOR 
5012 cd aa fd			call debug_vector  
5015				endm  
# End of macro CALLMONITOR
5015					endif 
5015 cd b6 20				call forth_push_str 
5018					NEXTW 
5018 c3 39 24			jp macro_next 
501b				endm 
# End of macro NEXTW
501b			 
501b			.DEDIT: 
501b				CWHEAD .ENDKEY 44 "DEDIT" 5 WORD_FLAG_CODE 
501b 40				db WORD_SYS_CORE+44             
501c 7d 50			dw .ENDKEY            
501e 06				db 5 + 1 
501f .. 00			db "DEDIT",0              
5025				endm 
# End of macro CWHEAD
5025			; | DEDIT ( ptr --  ) Takes an address for direct editing in memory. | DONE 
5025			 
5025					; TODO does not copy from stack 
5025					if DEBUG_FORTH_WORDS_KEY 
5025						DMARK "DED" 
5025 f5				push af  
5026 3a 3a 50			ld a, (.dmark)  
5029 32 a0 fd			ld (debug_mark),a  
502c 3a 3b 50			ld a, (.dmark+1)  
502f 32 a1 fd			ld (debug_mark+1),a  
5032 3a 3c 50			ld a, (.dmark+2)  
5035 32 a2 fd			ld (debug_mark+2),a  
5038 18 03			jr .pastdmark  
503a ..			.dmark: db "DED"  
503d f1			.pastdmark: pop af  
503e			endm  
# End of macro DMARK
503e						CALLMONITOR 
503e cd aa fd			call debug_vector  
5041				endm  
# End of macro CALLMONITOR
5041					endif 
5041			 
5041					;FORTH_DSP 
5041					FORTH_DSP_VALUEHL 
5041 cd 4d 22			call macro_dsp_valuehl 
5044				endm 
# End of macro FORTH_DSP_VALUEHL
5044			;		inc hl    ; TODO do type check 
5044			 
5044			;		call get_word_hl 
5044 e5					push hl 
5045 e5					push hl 
5046					FORTH_DSP_POP 
5046 cd 05 23			call macro_forth_dsp_pop 
5049				endm 
# End of macro FORTH_DSP_POP
5049 e1					pop hl 
504a					if DEBUG_FORTH_WORDS 
504a						DMARK "EDp" 
504a f5				push af  
504b 3a 5f 50			ld a, (.dmark)  
504e 32 a0 fd			ld (debug_mark),a  
5051 3a 60 50			ld a, (.dmark+1)  
5054 32 a1 fd			ld (debug_mark+1),a  
5057 3a 61 50			ld a, (.dmark+2)  
505a 32 a2 fd			ld (debug_mark+2),a  
505d 18 03			jr .pastdmark  
505f ..			.dmark: db "EDp"  
5062 f1			.pastdmark: pop af  
5063			endm  
# End of macro DMARK
5063						CALLMONITOR 
5063 cd aa fd			call debug_vector  
5066				endm  
# End of macro CALLMONITOR
5066					endif 
5066				;	ld a, 0 
5066 cd 44 13				call strlenz 
5069 23					inc hl 
506a			 
506a 06 00				ld b, 0 
506c 4d					ld c, l 
506d			 
506d e1					pop hl 
506e			 
506e					;ld a, 0 
506e					;ld (hl),a 
506e 3a 93 f9				ld a,(f_cursor_ptr) 
5071 16 64				ld d, 100 
5073 0e 00				ld c, 0 
5075 1e 28				ld e, 40 
5077 cd 0b 10				call input_str 
507a					; TODO perhaps do a type check and wrap in quotes if not a number 
507a					NEXTW 
507a c3 39 24			jp macro_next 
507d				endm 
# End of macro NEXTW
507d			 
507d			 
507d			.ENDKEY: 
507d			; eof 
507d			 
# End of file forth_words_key.asm
507d			include "forth_words_const.asm" 
507d			 
507d			; | ## Constants (i.e. Useful memory addresses that can set or get features) 
507d			 
507d			 
507d			.SPITIME: 
507d				CWHEAD .VA 99 "SPITIME" 7 WORD_FLAG_CODE 
507d 77				db WORD_SYS_CORE+99             
507e 92 50			dw .VA            
5080 08				db 7 + 1 
5081 .. 00			db "SPITIME",0              
5089				endm 
# End of macro CWHEAD
5089			; | SPITIME ( -- u1 )   Pushes address of the SPI pulse counter/delay to stack | DONE 
5089			; 
5089			; | | If using BANK devices then leave as is. 
5089			; | | Only really useful for the CARTDEV where other devices may be far too slow. In particular 
5089			; | | the multiplexing of the PicoSPINet addon which might not be running fast enough for all of the nodes 
5089			 
5089 21 99 f9				ld hl, spi_clktime  
508c cd 48 20				call forth_push_numhl 
508f			 
508f					NEXTW 
508f c3 39 24			jp macro_next 
5092				endm 
# End of macro NEXTW
5092			 
5092			 
5092			.VA: 
5092				CWHEAD .SYMBOL 99 "VA" 2 WORD_FLAG_CODE 
5092 77				db WORD_SYS_CORE+99             
5093 a2 50			dw .SYMBOL            
5095 03				db 2 + 1 
5096 .. 00			db "VA",0              
5099				endm 
# End of macro CWHEAD
5099			; | VA ( -- u1 )   Pushes address of block of memory used for v1..5 | DONE 
5099 21 5d f9				ld hl, cli_var_array 
509c cd 48 20				call forth_push_numhl 
509f			 
509f					NEXTW 
509f c3 39 24			jp macro_next 
50a2				endm 
# End of macro NEXTW
50a2			 
50a2			.SYMBOL: 
50a2				CWHEAD .ENDCONST 99 "SYMBOL" 6 WORD_FLAG_CODE 
50a2 77				db WORD_SYS_CORE+99             
50a3 ac 51			dw .ENDCONST            
50a5 07				db 6 + 1 
50a6 .. 00			db "SYMBOL",0              
50ad				endm 
# End of macro CWHEAD
50ad			; | SYMBOL ( u1 -- )  Get the address of a system symbol from a look up table to TOS  | DONE 
50ad			; | 
50ad			; | | The value is the number reference and the final address is pushed to stack 
50ad			 
50ad			; | | ``` 
50ad			; | | dw sym_table 
50ad			; | | dw nmi_vector 
50ad			; | | dw cli_autodisplay 
50ad			; | | dw cli_data_sp 
50ad			; | | dw cli_data_stack 
50ad			; | | dw cli_loop_sp 
50ad			; | | dw cli_loop_stack 
50ad			; | | dw cli_var_array 
50ad			; | | dw cursor_col 
50ad			; | | dw cursor_ptr 
50ad			; | | ; 10 
50ad			; | | dw cursor_row 
50ad			; | | dw debug_mark 
50ad			; | | dw display_fb0 
50ad			; | | dw display_fb1 
50ad			; | | dw display_fb2 
50ad			; | | dw display_fb3 
50ad			; | | dw display_fb_active 
50ad			; | | dw execscratch 
50ad			; | | dw f_cursor_ptr 
50ad			; | | dw hardware_word 
50ad			; | | ;20 
50ad			; | | dw input_at_cursor 
50ad			; | | dw input_at_pos 
50ad			; | | dw input_cur_flash 
50ad			; | | dw input_cur_onoff 
50ad			; | | dw input_cursor 
50ad			; | | dw input_display_size 
50ad			; | | dw input_len 
50ad			; | | dw input_ptr 
50ad			; | | dw input_size 
50ad			; | | dw input_start 
50ad			; | | ; 30 
50ad			; | | dw input_str 
50ad			; | | dw input_under_cursor 
50ad			; | | dw os_cli_cmd 
50ad			; | | dw os_cur_ptr 
50ad			; | | dw os_current_i 
50ad			; | | dw os_input 
50ad			; | | dw os_last_cmd 
50ad			; | | dw os_last_new_uword 
50ad			; | | dw debug_vector 
50ad			; | | dw os_view_hl 
50ad			; | | ;40 
50ad			; | | dw os_word_scratch 
50ad			; | | dw portbctl 
50ad			; | | dw portbdata 
50ad			; | | dw spi_cartdev 
50ad			; | | dw spi_cartdev2 
50ad			; | | dw spi_clktime 
50ad			; | | dw spi_device 
50ad			; | | dw spi_device_id 
50ad			; | | dw spi_portbyte 
50ad			; | | dw stackstore 
50ad			; | | ; 50 
50ad			; | | if STORAGE_SE 
50ad			; | | dw storage_actl 
50ad			; | | dw storage_adata 
50ad			; | | else 
50ad			; | | dw 0 
50ad			; | | dw 0 
50ad			; | | endif 
50ad			; | | dw storage_append 
50ad			; | | if STORAGE_SE 
50ad			; | | dw storage_bctl 
50ad			; | | else 
50ad			; | | dw 0 
50ad			; | | endif 
50ad			; | | dw store_bank_active 
50ad			; | | dw store_filecache 
50ad			; | | dw store_longread 
50ad			; | | dw store_openaddr 
50ad			; | | dw store_openext 
50ad			; | | dw store_openmaxext 
50ad			; | | ; 60 
50ad			; | | dw store_page 
50ad			; | | dw store_readbuf 
50ad			; | | dw store_readcont 
50ad			; | | dw store_readptr 
50ad			; | | dw store_tmpext 
50ad			; | | dw store_tmpid 
50ad			; | | dw store_tmppageid 
50ad			; | | dw malloc 
50ad			; | | dw free 
50ad			; | | dw cin 
50ad			; | | ; 70 
50ad			; | | dw cin_wait 
50ad			; | | dw forth_push_numhl 
50ad			; | | dw forth_push_str 
50ad			; | | ``` 
50ad			 
50ad					if DEBUG_FORTH_WORDS_KEY 
50ad						DMARK "SYM" 
50ad f5				push af  
50ae 3a c2 50			ld a, (.dmark)  
50b1 32 a0 fd			ld (debug_mark),a  
50b4 3a c3 50			ld a, (.dmark+1)  
50b7 32 a1 fd			ld (debug_mark+1),a  
50ba 3a c4 50			ld a, (.dmark+2)  
50bd 32 a2 fd			ld (debug_mark+2),a  
50c0 18 03			jr .pastdmark  
50c2 ..			.dmark: db "SYM"  
50c5 f1			.pastdmark: pop af  
50c6			endm  
# End of macro DMARK
50c6						CALLMONITOR 
50c6 cd aa fd			call debug_vector  
50c9				endm  
# End of macro CALLMONITOR
50c9					endif 
50c9			 
50c9					FORTH_DSP_VALUEHL 
50c9 cd 4d 22			call macro_dsp_valuehl 
50cc				endm 
# End of macro FORTH_DSP_VALUEHL
50cc			 
50cc 7d					ld a, l     
50cd			 
50cd			 
50cd					if DEBUG_FORTH_WORDS 
50cd						DMARK "SY1" 
50cd f5				push af  
50ce 3a e2 50			ld a, (.dmark)  
50d1 32 a0 fd			ld (debug_mark),a  
50d4 3a e3 50			ld a, (.dmark+1)  
50d7 32 a1 fd			ld (debug_mark+1),a  
50da 3a e4 50			ld a, (.dmark+2)  
50dd 32 a2 fd			ld (debug_mark+2),a  
50e0 18 03			jr .pastdmark  
50e2 ..			.dmark: db "SY1"  
50e5 f1			.pastdmark: pop af  
50e6			endm  
# End of macro DMARK
50e6						CALLMONITOR 
50e6 cd aa fd			call debug_vector  
50e9				endm  
# End of macro CALLMONITOR
50e9					endif 
50e9					 
50e9 f5					push af	 
50ea					FORTH_DSP_POP 
50ea cd 05 23			call macro_forth_dsp_pop 
50ed				endm 
# End of macro FORTH_DSP_POP
50ed f1					pop af 
50ee			 
50ee cb 27				sla a  
50f0				 
50f0					 
50f0					if DEBUG_FORTH_WORDS 
50f0						DMARK "SY" 
50f0 f5				push af  
50f1 3a 05 51			ld a, (.dmark)  
50f4 32 a0 fd			ld (debug_mark),a  
50f7 3a 06 51			ld a, (.dmark+1)  
50fa 32 a1 fd			ld (debug_mark+1),a  
50fd 3a 07 51			ld a, (.dmark+2)  
5100 32 a2 fd			ld (debug_mark+2),a  
5103 18 02			jr .pastdmark  
5105 ..			.dmark: db "SY"  
5107 f1			.pastdmark: pop af  
5108			endm  
# End of macro DMARK
5108						CALLMONITOR 
5108 cd aa fd			call debug_vector  
510b				endm  
# End of macro CALLMONITOR
510b					endif 
510b			 
510b 21 1a 51				ld hl, sym_table 
510e cd de 0f				call addatohl 
5111 cd bb 23				call loadwordinhl 
5114 cd 48 20				call forth_push_numhl 
5117			 
5117			 
5117				       NEXTW 
5117 c3 39 24			jp macro_next 
511a				endm 
# End of macro NEXTW
511a			 
511a			sym_table: 
511a			 
511a			; 0 
511a 1a 51		dw sym_table 
511c ad fd		dw nmi_vector 
511e 71 f9		dw cli_autodisplay 
5120 23 f9		dw cli_data_sp 
5122 5d f6		dw cli_data_stack 
5124 25 f9		dw cli_loop_sp 
5126 5f f8		dw cli_loop_stack 
5128 5d f9		dw cli_var_array 
512a fa fa		dw cursor_col 
512c f8 fa		dw cursor_ptr 
512e			; 10 
512e f9 fa		dw cursor_row 
5130 a0 fd		dw debug_mark 
5132 e6 fc		dw display_fb0 
5134 45 fc		dw display_fb1 
5136 03 fb		dw display_fb2 
5138 a4 fb		dw display_fb3 
513a 01 fb		dw display_fb_active 
513c f5 f1		dw execscratch 
513e 93 f9		dw f_cursor_ptr 
5140 b0 fd		dw hardware_word 
5142			;20 
5142 97 fd		dw input_at_cursor 
5144 99 fd		dw input_at_pos 
5146 95 fd		dw input_cur_flash 
5148 94 fd		dw input_cur_onoff 
514a 8a fd		dw input_cursor 
514c 9a fd		dw input_display_size 
514e 8f fd		dw input_len 
5150 9e fd		dw input_ptr 
5152 9b fd		dw input_size 
5154 9c fd		dw input_start 
5156			; 30 
5156 0b 10		dw input_str 
5158 98 fd		dw input_under_cursor 
515a 1d f4		dw os_cli_cmd 
515c 19 f4		dw os_cur_ptr 
515e 1b f4		dw os_current_i 
5160 f4 f2		dw os_input 
5162 1c f5		dw os_last_cmd 
5164 f3 f3		dw os_last_new_uword 
5166 aa fd		dw debug_vector 
5168 d8 f0		dw os_view_hl 
516a			;40 
516a fb f3		dw os_word_scratch 
516c c3 00		dw portbctl 
516e c1 00		dw portbdata 
5170 98 f9		dw spi_cartdev 
5172 97 f9		dw spi_cartdev2 
5174 99 f9		dw spi_clktime 
5176 95 f9		dw spi_device 
5178 94 f9		dw spi_device_id 
517a 96 f9		dw spi_portbyte 
517c dc fa		dw stackstore 
517e			; 50 
517e			if STORAGE_SE 
517e 82 00		dw storage_actl 
5180 80 00		dw storage_adata 
5182			else 
5182			dw 0 
5182			dw 0 
5182			endif 
5182 64 0b		dw storage_append 
5184			if STORAGE_SE 
5184 83 00		dw storage_bctl 
5186			else 
5186			dw 0 
5186			endif 
5186 c8 fa		dw store_bank_active 
5188 9c f9		dw store_filecache 
518a aa f9		dw store_longread 
518c a0 f9		dw store_openaddr 
518e 9f f9		dw store_openext 
5190 9e f9		dw store_openmaxext 
5192			; 60 
5192 af f9		dw store_page 
5194 ab f9		dw store_readbuf 
5196 a2 f9		dw store_readcont 
5198 ad f9		dw store_readptr 
519a a2 f9		dw store_tmpext 
519c a3 f9		dw store_tmpid 
519e 9a f9		dw store_tmppageid 
51a0 b9 13		dw malloc 
51a2 83 14		dw free 
51a4 91 75		dw cin 
51a6			; 70 
51a6 80 75		dw cin_wait 
51a8 48 20		dw forth_push_numhl 
51aa b6 20		dw forth_push_str 
51ac			 
51ac			 
51ac			.ENDCONST: 
51ac			 
51ac			; eof 
51ac			 
51ac			 
# End of file forth_words_const.asm
51ac			 
51ac			if STORAGE_SE 
51ac			   	include "forth_words_storage.asm" 
51ac			 
51ac			; | ## Fixed Storage Words 
51ac			 
51ac			.RENAME: 
51ac			  
51ac				CWHEAD .RECORD 38 "RENAME" 6 WORD_FLAG_CODE 
51ac 3a				db WORD_SYS_CORE+38             
51ad a2 52			dw .RECORD            
51af 07				db 6 + 1 
51b0 .. 00			db "RENAME",0              
51b7				endm 
# End of macro CWHEAD
51b7			; | RENAME ( s id -- ) With the current bank, rename the file id with the new label s  | DONE 
51b7			; | | > [!NOTE] 
51b7			; | | > Compatible with PicoSPINet  
51b7					if DEBUG_FORTH_WORDS_KEY 
51b7						DMARK "REN" 
51b7 f5				push af  
51b8 3a cc 51			ld a, (.dmark)  
51bb 32 a0 fd			ld (debug_mark),a  
51be 3a cd 51			ld a, (.dmark+1)  
51c1 32 a1 fd			ld (debug_mark+1),a  
51c4 3a ce 51			ld a, (.dmark+2)  
51c7 32 a2 fd			ld (debug_mark+2),a  
51ca 18 03			jr .pastdmark  
51cc ..			.dmark: db "REN"  
51cf f1			.pastdmark: pop af  
51d0			endm  
# End of macro DMARK
51d0						CALLMONITOR 
51d0 cd aa fd			call debug_vector  
51d3				endm  
# End of macro CALLMONITOR
51d3					endif 
51d3			 
51d3			 
51d3					; preserve some internal vars used by other file handing routines 
51d3			 
51d3 2a a0 f9				ld hl, (store_openaddr) 
51d6 e5					push hl 
51d7 3a a2 f9				ld a, (store_readcont) 
51da f5					push af 
51db			 
51db					FORTH_DSP_VALUEHL 
51db cd 4d 22			call macro_dsp_valuehl 
51de				endm 
# End of macro FORTH_DSP_VALUEHL
51de			 
51de					; move ext and id around for the file header 
51de			 
51de 65					ld h, l 
51df 2e 00				ld l, 0 
51e1			 
51e1 e5					push hl    ; id 
51e2			 
51e2					FORTH_DSP_POP 
51e2 cd 05 23			call macro_forth_dsp_pop 
51e5				endm 
# End of macro FORTH_DSP_POP
51e5			 
51e5					; Locate the file header 
51e5			 
51e5 e1					pop hl 
51e6 e5					push hl 
51e7 11 af f9				ld de, store_page      ; get block zero of file 
51ea					if DEBUG_FORTH_WORDS 
51ea						DMARK "REr" 
51ea f5				push af  
51eb 3a ff 51			ld a, (.dmark)  
51ee 32 a0 fd			ld (debug_mark),a  
51f1 3a 00 52			ld a, (.dmark+1)  
51f4 32 a1 fd			ld (debug_mark+1),a  
51f7 3a 01 52			ld a, (.dmark+2)  
51fa 32 a2 fd			ld (debug_mark+2),a  
51fd 18 03			jr .pastdmark  
51ff ..			.dmark: db "REr"  
5202 f1			.pastdmark: pop af  
5203			endm  
# End of macro DMARK
5203						CALLMONITOR 
5203 cd aa fd			call debug_vector  
5206				endm  
# End of macro CALLMONITOR
5206					endif 
5206 cd cd 09				call storage_read 
5209			 
5209 cd 07 10			call ishlzero 
520c 20 05			jr nz, .rnfound 
520e			 
520e				; file does not exist so indicate with 255 extents in use 
520e			 
520e 3e ff			ld a, 255 
5210 e1				pop hl ; clear dup hl 
5211 18 7b			jr .skiprneof 
5213			 
5213			 
5213			.rnfound: 
5213					; file found so rename 
5213			 
5213					FORTH_DSP_VALUEHL 
5213 cd 4d 22			call macro_dsp_valuehl 
5216				endm 
# End of macro FORTH_DSP_VALUEHL
5216			 
5216 e5				push hl 
5217 3e 00			ld a, 0 
5219 cd 4f 13			call strlent 
521c 23				inc hl   ; cover zero term 
521d 06 00			ld b,0 
521f 4d				ld c,l 
5220 e1				pop hl 
5221 11 b2 f9				ld de, store_page + 3 
5224 ed b0				ldir 
5226			 
5226 11 af f9				ld de, store_page 
5229					if DEBUG_FORTH_WORDS 
5229						DMARK "RER" 
5229 f5				push af  
522a 3a 3e 52			ld a, (.dmark)  
522d 32 a0 fd			ld (debug_mark),a  
5230 3a 3f 52			ld a, (.dmark+1)  
5233 32 a1 fd			ld (debug_mark+1),a  
5236 3a 40 52			ld a, (.dmark+2)  
5239 32 a2 fd			ld (debug_mark+2),a  
523c 18 03			jr .pastdmark  
523e ..			.dmark: db "RER"  
5241 f1			.pastdmark: pop af  
5242			endm  
# End of macro DMARK
5242						CALLMONITOR 
5242 cd aa fd			call debug_vector  
5245				endm  
# End of macro CALLMONITOR
5245					endif 
5245			 
5245 e1					pop hl    ; get orig file id and mangle it for find id 
5246 55					ld d, l 
5247 5c					ld e, h 
5248			 
5248 21 00 00				ld hl, 0 
524b					if DEBUG_FORTH_WORDS 
524b						DMARK "REf" 
524b f5				push af  
524c 3a 60 52			ld a, (.dmark)  
524f 32 a0 fd			ld (debug_mark),a  
5252 3a 61 52			ld a, (.dmark+1)  
5255 32 a1 fd			ld (debug_mark+1),a  
5258 3a 62 52			ld a, (.dmark+2)  
525b 32 a2 fd			ld (debug_mark+2),a  
525e 18 03			jr .pastdmark  
5260 ..			.dmark: db "REf"  
5263 f1			.pastdmark: pop af  
5264			endm  
# End of macro DMARK
5264						CALLMONITOR 
5264 cd aa fd			call debug_vector  
5267				endm  
# End of macro CALLMONITOR
5267					endif 
5267 cd a7 07				call storage_findnextid 
526a 11 af f9				ld de, store_page 
526d					if DEBUG_FORTH_WORDS 
526d						DMARK "REw" 
526d f5				push af  
526e 3a 82 52			ld a, (.dmark)  
5271 32 a0 fd			ld (debug_mark),a  
5274 3a 83 52			ld a, (.dmark+1)  
5277 32 a1 fd			ld (debug_mark+1),a  
527a 3a 84 52			ld a, (.dmark+2)  
527d 32 a2 fd			ld (debug_mark+2),a  
5280 18 03			jr .pastdmark  
5282 ..			.dmark: db "REw"  
5285 f1			.pastdmark: pop af  
5286			endm  
# End of macro DMARK
5286						CALLMONITOR 
5286 cd aa fd			call debug_vector  
5289				endm  
# End of macro CALLMONITOR
5289					endif 
5289 cd d9 04				call storage_write_block 
528c			 
528c 3e 00				ld a, 0 
528e			.skiprneof: 
528e					; drop file name 
528e					FORTH_DSP_POP 
528e cd 05 23			call macro_forth_dsp_pop 
5291				endm 
# End of macro FORTH_DSP_POP
5291			 
5291 6f					ld l, a 
5292 26 00				ld h, 0 
5294 cd 48 20				call forth_push_numhl 
5297			 
5297			 
5297 f1					pop af 
5298 32 a2 f9				ld (store_readcont),a 
529b e1					pop hl 
529c 22 a0 f9				ld (store_openaddr), hl 
529f						 
529f				NEXTW 
529f c3 39 24			jp macro_next 
52a2				endm 
# End of macro NEXTW
52a2			.RECORD: 
52a2			  
52a2				CWHEAD .BREAD 38 "RECORD" 6 WORD_FLAG_CODE 
52a2 3a				db WORD_SYS_CORE+38             
52a3 46 53			dw .BREAD            
52a5 07				db 6 + 1 
52a6 .. 00			db "RECORD",0              
52ad				endm 
# End of macro CWHEAD
52ad			; | RECORD ( u id -- s ) With the current bank, read record number u from file id and push to stack  | DONE 
52ad			; | | > [!NOTE] 
52ad			; | | > Compatible with PicoSPINet  
52ad			 
52ad					if DEBUG_FORTH_WORDS_KEY 
52ad						DMARK "REC" 
52ad f5				push af  
52ae 3a c2 52			ld a, (.dmark)  
52b1 32 a0 fd			ld (debug_mark),a  
52b4 3a c3 52			ld a, (.dmark+1)  
52b7 32 a1 fd			ld (debug_mark+1),a  
52ba 3a c4 52			ld a, (.dmark+2)  
52bd 32 a2 fd			ld (debug_mark+2),a  
52c0 18 03			jr .pastdmark  
52c2 ..			.dmark: db "REC"  
52c5 f1			.pastdmark: pop af  
52c6			endm  
# End of macro DMARK
52c6						CALLMONITOR 
52c6 cd aa fd			call debug_vector  
52c9				endm  
# End of macro CALLMONITOR
52c9					endif 
52c9			 
52c9					FORTH_DSP_VALUEHL 
52c9 cd 4d 22			call macro_dsp_valuehl 
52cc				endm 
# End of macro FORTH_DSP_VALUEHL
52cc			 
52cc e5					push hl    ; id 
52cd			 
52cd					FORTH_DSP_POP 
52cd cd 05 23			call macro_forth_dsp_pop 
52d0				endm 
# End of macro FORTH_DSP_POP
52d0			 
52d0					FORTH_DSP_VALUEHL 
52d0 cd 4d 22			call macro_dsp_valuehl 
52d3				endm 
# End of macro FORTH_DSP_VALUEHL
52d3			 
52d3					FORTH_DSP_POP 
52d3 cd 05 23			call macro_forth_dsp_pop 
52d6				endm 
# End of macro FORTH_DSP_POP
52d6			 
52d6 d1					pop de     ; get file id 
52d7			 
52d7					; e = file id 
52d7					; l = file extent 
52d7			 
52d7			 
52d7					; construct request to access file extent 
52d7			 
52d7			;		ld a, e 
52d7 63					ld h, e 
52d8					 
52d8					 
52d8					 
52d8			 
52d8					; e has id 
52d8			 
52d8 11 af f9			ld de, store_page 
52db					if DEBUG_FORTH_WORDS 
52db						DMARK "REr" 
52db f5				push af  
52dc 3a f0 52			ld a, (.dmark)  
52df 32 a0 fd			ld (debug_mark),a  
52e2 3a f1 52			ld a, (.dmark+1)  
52e5 32 a1 fd			ld (debug_mark+1),a  
52e8 3a f2 52			ld a, (.dmark+2)  
52eb 32 a2 fd			ld (debug_mark+2),a  
52ee 18 03			jr .pastdmark  
52f0 ..			.dmark: db "REr"  
52f3 f1			.pastdmark: pop af  
52f4			endm  
# End of macro DMARK
52f4						CALLMONITOR 
52f4 cd aa fd			call debug_vector  
52f7				endm  
# End of macro CALLMONITOR
52f7					endif 
52f7 cd cd 09				call storage_read 
52fa cd 07 10			call ishlzero 
52fd 28 22			jr z, .recnotfound 
52ff			 
52ff			 
52ff					if DEBUG_FORTH_WORDS 
52ff						DMARK "REe" 
52ff f5				push af  
5300 3a 14 53			ld a, (.dmark)  
5303 32 a0 fd			ld (debug_mark),a  
5306 3a 15 53			ld a, (.dmark+1)  
5309 32 a1 fd			ld (debug_mark+1),a  
530c 3a 16 53			ld a, (.dmark+2)  
530f 32 a2 fd			ld (debug_mark+2),a  
5312 18 03			jr .pastdmark  
5314 ..			.dmark: db "REe"  
5317 f1			.pastdmark: pop af  
5318			endm  
# End of macro DMARK
5318						CALLMONITOR 
5318 cd aa fd			call debug_vector  
531b				endm  
# End of macro CALLMONITOR
531b					endif 
531b cd b6 20			call forth_push_str 
531e			 
531e					NEXTW 
531e c3 39 24			jp macro_next 
5321				endm 
# End of macro NEXTW
5321			 
5321			.recnotfound: 
5321					if DEBUG_FORTH_WORDS 
5321						DMARK "REf" 
5321 f5				push af  
5322 3a 36 53			ld a, (.dmark)  
5325 32 a0 fd			ld (debug_mark),a  
5328 3a 37 53			ld a, (.dmark+1)  
532b 32 a1 fd			ld (debug_mark+1),a  
532e 3a 38 53			ld a, (.dmark+2)  
5331 32 a2 fd			ld (debug_mark+2),a  
5334 18 03			jr .pastdmark  
5336 ..			.dmark: db "REf"  
5339 f1			.pastdmark: pop af  
533a			endm  
# End of macro DMARK
533a						CALLMONITOR 
533a cd aa fd			call debug_vector  
533d				endm  
# End of macro CALLMONITOR
533d					endif 
533d 21 ff 00			ld hl, 255 
5340 cd 48 20			call forth_push_numhl 
5343				NEXTW 
5343 c3 39 24			jp macro_next 
5346				endm 
# End of macro NEXTW
5346			 
5346			 
5346			.BREAD: 
5346			  
5346				CWHEAD .BWRITE 38 "BREAD" 5 WORD_FLAG_CODE 
5346 3a				db WORD_SYS_CORE+38             
5347 c9 53			dw .BWRITE            
5349 06				db 5 + 1 
534a .. 00			db "BREAD",0              
5350				endm 
# End of macro CWHEAD
5350			; | BREAD ( u -- u ) Lowlevel storage word. With the current bank, read a block from page id u (1-512) and push to stack  | DONE 
5350			; | | > [!NOTE] 
5350			; | | > Compatible with PicoSPINet  
5350				 
5350					if DEBUG_FORTH_WORDS_KEY 
5350						DMARK "BRD" 
5350 f5				push af  
5351 3a 65 53			ld a, (.dmark)  
5354 32 a0 fd			ld (debug_mark),a  
5357 3a 66 53			ld a, (.dmark+1)  
535a 32 a1 fd			ld (debug_mark+1),a  
535d 3a 67 53			ld a, (.dmark+2)  
5360 32 a2 fd			ld (debug_mark+2),a  
5363 18 03			jr .pastdmark  
5365 ..			.dmark: db "BRD"  
5368 f1			.pastdmark: pop af  
5369			endm  
# End of macro DMARK
5369						CALLMONITOR 
5369 cd aa fd			call debug_vector  
536c				endm  
# End of macro CALLMONITOR
536c					endif 
536c			 
536c				FORTH_DSP_VALUEHL 
536c cd 4d 22			call macro_dsp_valuehl 
536f				endm 
# End of macro FORTH_DSP_VALUEHL
536f			 
536f				FORTH_DSP_POP 
536f cd 05 23			call macro_forth_dsp_pop 
5372				endm 
# End of macro FORTH_DSP_POP
5372			 
5372				; calc block address 
5372			 
5372 eb				ex de, hl 
5373 3e 40			ld a, STORE_BLOCK_PHY 
5375 cd 61 0f			call Mult16 
5378			 
5378			 
5378 11 af f9			ld de, store_page 
537b			 
537b					if DEBUG_FORTH_WORDS 
537b						DMARK "BR1" 
537b f5				push af  
537c 3a 90 53			ld a, (.dmark)  
537f 32 a0 fd			ld (debug_mark),a  
5382 3a 91 53			ld a, (.dmark+1)  
5385 32 a1 fd			ld (debug_mark+1),a  
5388 3a 92 53			ld a, (.dmark+2)  
538b 32 a2 fd			ld (debug_mark+2),a  
538e 18 03			jr .pastdmark  
5390 ..			.dmark: db "BR1"  
5393 f1			.pastdmark: pop af  
5394			endm  
# End of macro DMARK
5394						CALLMONITOR 
5394 cd aa fd			call debug_vector  
5397				endm  
# End of macro CALLMONITOR
5397					endif 
5397			 
5397 cd 74 04			call storage_read_block 
539a			 
539a cd 07 10			call ishlzero 
539d 20 05			jr nz, .brfound 
539f			 
539f cd 48 20			call forth_push_numhl 
53a2 18 22			jr .brdone 
53a4			 
53a4			 
53a4			.brfound: 
53a4 21 b1 f9		        ld hl, store_page+2 
53a7			 
53a7					if DEBUG_FORTH_WORDS 
53a7						DMARK "BR2" 
53a7 f5				push af  
53a8 3a bc 53			ld a, (.dmark)  
53ab 32 a0 fd			ld (debug_mark),a  
53ae 3a bd 53			ld a, (.dmark+1)  
53b1 32 a1 fd			ld (debug_mark+1),a  
53b4 3a be 53			ld a, (.dmark+2)  
53b7 32 a2 fd			ld (debug_mark+2),a  
53ba 18 03			jr .pastdmark  
53bc ..			.dmark: db "BR2"  
53bf f1			.pastdmark: pop af  
53c0			endm  
# End of macro DMARK
53c0						CALLMONITOR 
53c0 cd aa fd			call debug_vector  
53c3				endm  
# End of macro CALLMONITOR
53c3					endif 
53c3			 
53c3 cd b6 20			call forth_push_str 
53c6			 
53c6			 
53c6			.brdone: 
53c6			 
53c6					NEXTW 
53c6 c3 39 24			jp macro_next 
53c9				endm 
# End of macro NEXTW
53c9			.BWRITE: 
53c9				CWHEAD .BUPD 38 "BWRITE" 6 WORD_FLAG_CODE 
53c9 3a				db WORD_SYS_CORE+38             
53ca 5e 54			dw .BUPD            
53cc 07				db 6 + 1 
53cd .. 00			db "BWRITE",0              
53d4				endm 
# End of macro CWHEAD
53d4			; | BWRITE ( s u -- ) Lowlevel storage word. With the current bank, write the string s to page id u | DONE 
53d4			; | | > [!NOTE] 
53d4			; | | > Compatible with PicoSPINet  
53d4			 
53d4					if DEBUG_FORTH_WORDS_KEY 
53d4						DMARK "BWR" 
53d4 f5				push af  
53d5 3a e9 53			ld a, (.dmark)  
53d8 32 a0 fd			ld (debug_mark),a  
53db 3a ea 53			ld a, (.dmark+1)  
53de 32 a1 fd			ld (debug_mark+1),a  
53e1 3a eb 53			ld a, (.dmark+2)  
53e4 32 a2 fd			ld (debug_mark+2),a  
53e7 18 03			jr .pastdmark  
53e9 ..			.dmark: db "BWR"  
53ec f1			.pastdmark: pop af  
53ed			endm  
# End of macro DMARK
53ed						CALLMONITOR 
53ed cd aa fd			call debug_vector  
53f0				endm  
# End of macro CALLMONITOR
53f0					endif 
53f0			 
53f0				FORTH_DSP_VALUEHL 
53f0 cd 4d 22			call macro_dsp_valuehl 
53f3				endm 
# End of macro FORTH_DSP_VALUEHL
53f3			 
53f3				; calc block address 
53f3			 
53f3 eb				ex de, hl 
53f4 3e 40			ld a, STORE_BLOCK_PHY 
53f6 cd 61 0f			call Mult16 
53f9			 
53f9 e5				push hl         ; address 
53fa			 
53fa				FORTH_DSP_POP 
53fa cd 05 23			call macro_forth_dsp_pop 
53fd				endm 
# End of macro FORTH_DSP_POP
53fd			 
53fd				FORTH_DSP_VALUEHL 
53fd cd 4d 22			call macro_dsp_valuehl 
5400				endm 
# End of macro FORTH_DSP_VALUEHL
5400			 
5400				FORTH_DSP_POP 
5400 cd 05 23			call macro_forth_dsp_pop 
5403				endm 
# End of macro FORTH_DSP_POP
5403			 
5403 cd b0 0c			call storage_clear_page 
5406			 
5406				; copy string to store page 
5406			 
5406 e5				push hl     ; save string address 
5407			 
5407 3e 00			ld a, 0 
5409 cd 4f 13			call strlent 
540c			 
540c 23				inc hl 
540d			 
540d 4d				ld c, l 
540e 06 00			ld b, 0 
5410			 
5410 e1				pop hl 
5411 11 b1 f9			ld de, store_page + 2 
5414					if DEBUG_FORTH_WORDS 
5414						DMARK "BW1" 
5414 f5				push af  
5415 3a 29 54			ld a, (.dmark)  
5418 32 a0 fd			ld (debug_mark),a  
541b 3a 2a 54			ld a, (.dmark+1)  
541e 32 a1 fd			ld (debug_mark+1),a  
5421 3a 2b 54			ld a, (.dmark+2)  
5424 32 a2 fd			ld (debug_mark+2),a  
5427 18 03			jr .pastdmark  
5429 ..			.dmark: db "BW1"  
542c f1			.pastdmark: pop af  
542d			endm  
# End of macro DMARK
542d						CALLMONITOR 
542d cd aa fd			call debug_vector  
5430				endm  
# End of macro CALLMONITOR
5430					endif 
5430 ed b0			ldir 
5432			 
5432			 
5432				; poke the start of the block with flags to prevent high level file ops hitting the block 
5432			 
5432 21 ff ff			ld hl, $ffff 
5435			 
5435 22 af f9			ld (store_page), hl	 
5438				 
5438 e1				pop hl    ; get address 
5439 11 af f9			ld de, store_page 
543c			 
543c					if DEBUG_FORTH_WORDS 
543c						DMARK "BW2" 
543c f5				push af  
543d 3a 51 54			ld a, (.dmark)  
5440 32 a0 fd			ld (debug_mark),a  
5443 3a 52 54			ld a, (.dmark+1)  
5446 32 a1 fd			ld (debug_mark+1),a  
5449 3a 53 54			ld a, (.dmark+2)  
544c 32 a2 fd			ld (debug_mark+2),a  
544f 18 03			jr .pastdmark  
5451 ..			.dmark: db "BW2"  
5454 f1			.pastdmark: pop af  
5455			endm  
# End of macro DMARK
5455						CALLMONITOR 
5455 cd aa fd			call debug_vector  
5458				endm  
# End of macro CALLMONITOR
5458					endif 
5458			 
5458 cd d9 04			call storage_write_block 
545b			 
545b					NEXTW 
545b c3 39 24			jp macro_next 
545e				endm 
# End of macro NEXTW
545e			 
545e			.BUPD: 
545e				CWHEAD .BYID 38 "BUPD" 4 WORD_FLAG_CODE 
545e 3a				db WORD_SYS_CORE+38             
545f b4 54			dw .BYID            
5461 05				db 4 + 1 
5462 .. 00			db "BUPD",0              
5467				endm 
# End of macro CWHEAD
5467			; | BUPD ( u -- ) Lowlevel storage word. Write the contents of the current file system storage buffer directly to page id u | DONE 
5467			; | | Coupled with the use of the BREAD, BWRITE and STOREPAGE words it is possible to implement a direct 
5467			; | | or completely different file system structure. 
5467			; | | > [!NOTE] 
5467			; | | > Compatible with PicoSPINet  
5467			 
5467					if DEBUG_FORTH_WORDS_KEY 
5467						DMARK "BUD" 
5467 f5				push af  
5468 3a 7c 54			ld a, (.dmark)  
546b 32 a0 fd			ld (debug_mark),a  
546e 3a 7d 54			ld a, (.dmark+1)  
5471 32 a1 fd			ld (debug_mark+1),a  
5474 3a 7e 54			ld a, (.dmark+2)  
5477 32 a2 fd			ld (debug_mark+2),a  
547a 18 03			jr .pastdmark  
547c ..			.dmark: db "BUD"  
547f f1			.pastdmark: pop af  
5480			endm  
# End of macro DMARK
5480						CALLMONITOR 
5480 cd aa fd			call debug_vector  
5483				endm  
# End of macro CALLMONITOR
5483					endif 
5483			 
5483				FORTH_DSP_VALUEHL 
5483 cd 4d 22			call macro_dsp_valuehl 
5486				endm 
# End of macro FORTH_DSP_VALUEHL
5486			 
5486				; calc block address 
5486			 
5486 eb				ex de, hl 
5487 3e 40			ld a, STORE_BLOCK_PHY 
5489 cd 61 0f			call Mult16 
548c			 
548c				FORTH_DSP_POP 
548c cd 05 23			call macro_forth_dsp_pop 
548f				endm 
# End of macro FORTH_DSP_POP
548f			 
548f			 
548f 11 af f9			ld de, store_page 
5492			 
5492					if DEBUG_FORTH_WORDS 
5492						DMARK "BUe" 
5492 f5				push af  
5493 3a a7 54			ld a, (.dmark)  
5496 32 a0 fd			ld (debug_mark),a  
5499 3a a8 54			ld a, (.dmark+1)  
549c 32 a1 fd			ld (debug_mark+1),a  
549f 3a a9 54			ld a, (.dmark+2)  
54a2 32 a2 fd			ld (debug_mark+2),a  
54a5 18 03			jr .pastdmark  
54a7 ..			.dmark: db "BUe"  
54aa f1			.pastdmark: pop af  
54ab			endm  
# End of macro DMARK
54ab						CALLMONITOR 
54ab cd aa fd			call debug_vector  
54ae				endm  
# End of macro CALLMONITOR
54ae					endif 
54ae			 
54ae cd d9 04			call storage_write_block 
54b1			 
54b1					NEXTW 
54b1 c3 39 24			jp macro_next 
54b4				endm 
# End of macro NEXTW
54b4			 
54b4			.BYID: 
54b4			;	CWHEAD .BYNAME 38 "BYID" 4 WORD_FLAG_CODE 
54b4			;; > BYID ( u -- s ) Get the name of the file in the current BANK using the file ID u > TODO 
54b4			; 
54b4			;		 
54b4			;		if DEBUG_FORTH_WORDS_KEY 
54b4			;			DMARK "BYID" 
54b4			;			CALLMONITOR 
54b4			;		endif 
54b4			; 
54b4			;		; get direct address 
54b4			; 
54b4			;		FORTH_DSP_VALUEHL 
54b4			; 
54b4			;		FORTH_DSP_POP 
54b4			; 
54b4			;	; calc block address 
54b4			; 
54b4			;	ex de, hl 
54b4			;	ld a, STORE_BLOCK_PHY 
54b4			;	call Mult16 
54b4			;	;	do BREAD with number as param 
54b4			;	; push the file name	 
54b4			;	ld de, store_page 
54b4			;	call storage_read_block 
54b4			 ;       ld hl, store_page+2 
54b4			; 
54b4			; 
54b4			;		NEXTW 
54b4			;.BYNAME: 
54b4				CWHEAD .DIR 38 "GETID" 5 WORD_FLAG_CODE 
54b4 3a				db WORD_SYS_CORE+38             
54b5 cd 54			dw .DIR            
54b7 06				db 5 + 1 
54b8 .. 00			db "GETID",0              
54be				endm 
# End of macro CWHEAD
54be			; | GETID ( s -- u ) Get the file ID in the current BANK of the file named s | DONE 
54be			; | | > [!NOTE] 
54be			; | | > Compatible with PicoSPINet  
54be			 
54be					; get pointer to file name to seek 
54be			 
54be					FORTH_DSP_VALUEHL 
54be cd 4d 22			call macro_dsp_valuehl 
54c1				endm 
# End of macro FORTH_DSP_VALUEHL
54c1			 
54c1			 
54c1 cd 9b 03				call storage_getid  
54c4			 
54c4					FORTH_DSP_POP 
54c4 cd 05 23			call macro_forth_dsp_pop 
54c7				endm 
# End of macro FORTH_DSP_POP
54c7			 
54c7 cd 48 20				call forth_push_numhl 
54ca			 
54ca					NEXTW 
54ca c3 39 24			jp macro_next 
54cd				endm 
# End of macro NEXTW
54cd			; 
54cd			.DIR: 
54cd				CWHEAD .SAVE 38 "DIR" 3 WORD_FLAG_CODE 
54cd 3a				db WORD_SYS_CORE+38             
54ce d1 55			dw .SAVE            
54d0 04				db 3 + 1 
54d1 .. 00			db "DIR",0              
54d5				endm 
# End of macro CWHEAD
54d5			; | DIR ( u -- lab id ... c t ) Using bank number u push directory entries from persistent storage as w with count u  | DONE 
54d5			; | | > [!NOTE] 
54d5			; | | > Compatible with PicoSPINet  
54d5			 
54d5					if DEBUG_FORTH_WORDS_KEY 
54d5						DMARK "DIR" 
54d5 f5				push af  
54d6 3a ea 54			ld a, (.dmark)  
54d9 32 a0 fd			ld (debug_mark),a  
54dc 3a eb 54			ld a, (.dmark+1)  
54df 32 a1 fd			ld (debug_mark+1),a  
54e2 3a ec 54			ld a, (.dmark+2)  
54e5 32 a2 fd			ld (debug_mark+2),a  
54e8 18 03			jr .pastdmark  
54ea ..			.dmark: db "DIR"  
54ed f1			.pastdmark: pop af  
54ee			endm  
# End of macro DMARK
54ee						CALLMONITOR 
54ee cd aa fd			call debug_vector  
54f1				endm  
# End of macro CALLMONITOR
54f1					endif 
54f1 cd 25 05			call storage_get_block_0 
54f4			 
54f4 21 af f9			ld hl, store_page     ; get current id count 
54f7 46				ld b, (hl) 
54f8 0e 00			ld c, 0    ; count of files   
54fa					if DEBUG_FORTH_WORDS 
54fa						DMARK "DI1" 
54fa f5				push af  
54fb 3a 0f 55			ld a, (.dmark)  
54fe 32 a0 fd			ld (debug_mark),a  
5501 3a 10 55			ld a, (.dmark+1)  
5504 32 a1 fd			ld (debug_mark+1),a  
5507 3a 11 55			ld a, (.dmark+2)  
550a 32 a2 fd			ld (debug_mark+2),a  
550d 18 03			jr .pastdmark  
550f ..			.dmark: db "DI1"  
5512 f1			.pastdmark: pop af  
5513			endm  
# End of macro DMARK
5513						CALLMONITOR 
5513 cd aa fd			call debug_vector  
5516				endm  
# End of macro CALLMONITOR
5516					endif 
5516			 
5516				; check for empty drive 
5516			 
5516 3e 00			ld a, 0 
5518 b8				cp b 
5519 ca 87 55			jp z, .dirdone 
551c			 
551c				; for each of the current ids do a search for them and if found push to stack 
551c			 
551c c5			.diritem:	push bc 
551d 21 40 00				ld hl, STORE_BLOCK_PHY 
5520 16 00				ld d, 0		 ; look for extent 0 of block id as this contains file name 
5522 58					ld e,b 
5523			 
5523			;		if DEBUG_FORTH_WORDS 
5523			;			DMARK "DI2" 
5523			;			CALLMONITOR 
5523			;		endif 
5523			 
5523 cd a7 07				call storage_findnextid 
5526			 
5526			;		if DEBUG_FORTH_WORDS 
5526			;			DMARK "DI3" 
5526			;			CALLMONITOR 
5526			;		endif 
5526			 
5526					; if found hl will be non zero 
5526			 
5526 cd 07 10				call ishlzero 
5529			;		ld a, l 
5529			;		add h 
5529			; 
5529			;		cp 0 
5529 28 59				jr z, .dirnotfound 
552b			 
552b					; increase count 
552b			 
552b c1					pop bc	 
552c 0c					inc c 
552d c5					push bc 
552e					 
552e			 
552e					; get file header and push the file name 
552e			 
552e 11 af f9				ld de, store_page 
5531 cd 74 04				call storage_read_block 
5534			 
5534					; push file id to stack 
5534				 
5534 3a af f9				ld a, (store_page) 
5537 26 00				ld h, 0 
5539 6f					ld l, a 
553a cd 48 20				call forth_push_numhl 
553d			 
553d					; push extent count to stack  
553d				 
553d 3a b1 f9				ld a, (store_page+2) 
5540 26 00				ld h, 0 
5542 6f					ld l, a 
5543 cd 48 20				call forth_push_numhl 
5546			 
5546					; push file name 
5546			 
5546 21 b2 f9				ld hl, store_page+3 
5549					if DEBUG_FORTH_WORDS 
5549						DMARK "DI5" 
5549 f5				push af  
554a 3a 5e 55			ld a, (.dmark)  
554d 32 a0 fd			ld (debug_mark),a  
5550 3a 5f 55			ld a, (.dmark+1)  
5553 32 a1 fd			ld (debug_mark+1),a  
5556 3a 60 55			ld a, (.dmark+2)  
5559 32 a2 fd			ld (debug_mark+2),a  
555c 18 03			jr .pastdmark  
555e ..			.dmark: db "DI5"  
5561 f1			.pastdmark: pop af  
5562			endm  
# End of macro DMARK
5562						CALLMONITOR 
5562 cd aa fd			call debug_vector  
5565				endm  
# End of macro CALLMONITOR
5565					endif 
5565 cd b6 20				call forth_push_str 
5568					if DEBUG_FORTH_WORDS 
5568						DMARK "DI6" 
5568 f5				push af  
5569 3a 7d 55			ld a, (.dmark)  
556c 32 a0 fd			ld (debug_mark),a  
556f 3a 7e 55			ld a, (.dmark+1)  
5572 32 a1 fd			ld (debug_mark+1),a  
5575 3a 7f 55			ld a, (.dmark+2)  
5578 32 a2 fd			ld (debug_mark+2),a  
557b 18 03			jr .pastdmark  
557d ..			.dmark: db "DI6"  
5580 f1			.pastdmark: pop af  
5581			endm  
# End of macro DMARK
5581						CALLMONITOR 
5581 cd aa fd			call debug_vector  
5584				endm  
# End of macro CALLMONITOR
5584					endif 
5584			.dirnotfound: 
5584 c1					pop bc     
5585 10 95				djnz .diritem 
5587				 
5587			.dirdone:	 
5587					if DEBUG_FORTH_WORDS 
5587						DMARK "DI7" 
5587 f5				push af  
5588 3a 9c 55			ld a, (.dmark)  
558b 32 a0 fd			ld (debug_mark),a  
558e 3a 9d 55			ld a, (.dmark+1)  
5591 32 a1 fd			ld (debug_mark+1),a  
5594 3a 9e 55			ld a, (.dmark+2)  
5597 32 a2 fd			ld (debug_mark+2),a  
559a 18 03			jr .pastdmark  
559c ..			.dmark: db "DI7"  
559f f1			.pastdmark: pop af  
55a0			endm  
# End of macro DMARK
55a0						CALLMONITOR 
55a0 cd aa fd			call debug_vector  
55a3				endm  
# End of macro CALLMONITOR
55a3					endif 
55a3			 
55a3					; push a count of the dir items found 
55a3			 
55a3 26 00				ld h, 0 
55a5 69					ld l, c 
55a6 cd 48 20				call forth_push_numhl 
55a9			 
55a9					; push the bank label 
55a9			 
55a9 cd 25 05				call storage_get_block_0 
55ac			 
55ac				 
55ac 21 b2 f9		 		ld hl, store_page+3 
55af			 
55af					if DEBUG_FORTH_WORDS 
55af						DMARK "DI8" 
55af f5				push af  
55b0 3a c4 55			ld a, (.dmark)  
55b3 32 a0 fd			ld (debug_mark),a  
55b6 3a c5 55			ld a, (.dmark+1)  
55b9 32 a1 fd			ld (debug_mark+1),a  
55bc 3a c6 55			ld a, (.dmark+2)  
55bf 32 a2 fd			ld (debug_mark+2),a  
55c2 18 03			jr .pastdmark  
55c4 ..			.dmark: db "DI8"  
55c7 f1			.pastdmark: pop af  
55c8			endm  
# End of macro DMARK
55c8						CALLMONITOR 
55c8 cd aa fd			call debug_vector  
55cb				endm  
# End of macro CALLMONITOR
55cb					endif 
55cb cd b6 20				call forth_push_str 
55ce			 
55ce			 
55ce				 
55ce					NEXTW 
55ce c3 39 24			jp macro_next 
55d1				endm 
# End of macro NEXTW
55d1			.SAVE: 
55d1			;	CWHEAD .LOAD 39 "SAVE" 4 WORD_FLAG_CODE 
55d1			;; > SAVE  ( w u -- )    Save user word memory to file name w on bank u > TODO 
55d1			;		NEXTW 
55d1			;.LOAD: 
55d1			;	CWHEAD .BSAVE 40 "LOAD" 4 WORD_FLAG_CODE 
55d1			;; > LOAD ( u -- )    Load user word memory from file id on current bank > TODO 
55d1			;; > > The indivdual records being loaded can be both uword word difintions or interactive commands. 
55d1			;; > > The LOAD command can not be used in any user words or compound lines. 
55d1			; 
55d1			;		; store_openext use it. If zero it is EOF 
55d1			; 
55d1			;		; read block from current stream id 
55d1			;		; if the block does not contain zero term keep reading blocks until zero found 
55d1			;		; push the block to stack 
55d1			;		; save the block id to stream 
55d1			; 
55d1			; 
55d1			;		FORTH_DSP_VALUEHL 
55d1			; 
55d1			;;		push hl 
55d1			; 
55d1			;	if DEBUG_STORESE 
55d1			;		DMARK "LOA" 
55d1			;		CALLMONITOR 
55d1			;	endif 
55d1			;		FORTH_DSP_POP 
55d1			; 
55d1			;;		pop hl 
55d1			; 
55d1			;		ld h, l 
55d1			;		ld l, 0 
55d1			; 
55d1			;		push hl     ; stack holds current file id and extent to work with 
55d1			; 
55d1			; 
55d1			;		ld de, store_page      ; get block zero of file 
55d1			;	if DEBUG_STORESE 
55d1			;		DMARK "LO0" 
55d1			;		CALLMONITOR 
55d1			;	endif 
55d1			;		call storage_read 
55d1			; 
55d1			;		ld a, (store_page+2)    ; max extents for this file 
55d1			;		ld  (store_openmaxext),a   ; get our limit 
55d1			; 
55d1			;	if DEBUG_STORESE 
55d1			;		DMARK "LOE" 
55d1			;		CALLMONITOR 
55d1			;	endif 
55d1			; 
55d1			;; TODO dont know why max extents are not present 
55d1			;;		cp 0 
55d1			;;		jp z, .loadeof     ; dont read past eof 
55d1			; 
55d1			;;		ld a, 1   ; start from the head of the file 
55d1			; 
55d1			;.loadline:	pop hl 
55d1			;		inc hl 
55d1			;		ld  a, (store_openmaxext)   ; get our limit 
55d1			;	if DEBUG_STORESE 
55d1			;		DMARK "LOx" 
55d1			;		CALLMONITOR 
55d1			;	endif 
55d1			;		inc a 
55d1			;		cp l 
55d1			;		jp z, .loadeof 
55d1			;		push hl    ; save current extent 
55d1			; 
55d1			;		ld de, store_page 
55d1			; 
55d1			;	if DEBUG_STORESE 
55d1			;		DMARK "LO1" 
55d1			;		CALLMONITOR 
55d1			;	endif 
55d1			;		call storage_read 
55d1			; 
55d1			;	if DEBUG_STORESE 
55d1			;		DMARK "LO2" 
55d1			;		CALLMONITOR 
55d1			;	endif 
55d1			;	call ishlzero 
55d1			;	ld a, l 
55d1			;	add h 
55d1			;	cp 0 
55d1			;	jr z, .loadeof 
55d1			; 
55d1			;	; not eof so hl should point to data to exec 
55d1			; 
55d1			;	; will need to add the FORTH_END_BUFFER flag 
55d1			 ; 
55d1			;	ld hl, store_page+2 
55d1			;	ld bc, 255 
55d1			;	ld a, 0 
55d1			;	cpir 
55d1			;	if DEBUG_STORESE 
55d1			;		DMARK "LOt" 
55d1			;		CALLMONITOR 
55d1			;	endif 
55d1			;	dec hl 
55d1			;	ld a, ' ' 
55d1			;	ld (hl), a 
55d1			;	inc hl 
55d1			;	ld (hl), a 
55d1			;	inc hl 
55d1			;	ld (hl), a 
55d1			;	inc hl 
55d1			;	ld a, FORTH_END_BUFFER 
55d1			;	ld (hl), a 
55d1			; 
55d1			;	; TODO handle more than a single block read 
55d1			; 
55d1			; 
55d1			;	ld hl, store_page+2 
55d1			; 
55d1			;	ld (os_tok_ptr), hl 
55d1			; 
55d1			;	if DEBUG_STORESE 
55d1			;		DMARK "LO3" 
55d1			;		CALLMONITOR 
55d1			;	endif 
55d1			; 
55d1			;	call forthparse 
55d1			;	call forthexec 
55d1			;	call forthexec_cleanup 
55d1			; 
55d1			;	; go to next extent 
55d1			; 
55d1			;	; get next block  or mark as eof 
55d1			;	jp .loadline 
55d1			; 
55d1			; 
55d1			; 
55d1			;	       NEXTW 
55d1			;.loadeof:	ld a, 0 
55d1			;		ld (store_openext), a 
55d1			; 
55d1			;	if DEBUG_STORESE 
55d1			;		DMARK "LOF" 
55d1			;		CALLMONITOR 
55d1			;	endif 
55d1			;		ret 
55d1			;		;NEXTW 
55d1			;.BSAVE:   
55d1			; 
55d1			;	CWHEAD .BLOAD 70 "BSAVE" 5 WORD_FLAG_CODE 
55d1			;; > BSAVE  ( w u a s -- )    Save binary file to file name w on bank u starting at address a for s bytes > TODO 
55d1			;		NEXTW 
55d1			;.BLOAD: 
55d1			;	CWHEAD .SEO 71 "BLOAD" 5 WORD_FLAG_CODE 
55d1			;; > BLOAD ( w u a -- )    Load binary file from file name w on bank u into address u > TODO 
55d1			;		NEXTW 
55d1			;;;; counter gap 
55d1			 
55d1			 
55d1			.SEO: 
55d1				CWHEAD .SEI 80 "SEO" 3 WORD_FLAG_CODE 
55d1 64				db WORD_SYS_CORE+80             
55d2 f0 55			dw .SEI            
55d4 04				db 3 + 1 
55d5 .. 00			db "SEO",0              
55d9				endm 
# End of macro CWHEAD
55d9			; | SEO ( u1 u2 -- ) Send byte u1 to Serial EEPROM device at address u2 | DONE 
55d9			 
55d9					; get port 
55d9			 
55d9					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
55d9 cd 4d 22			call macro_dsp_valuehl 
55dc				endm 
# End of macro FORTH_DSP_VALUEHL
55dc			 
55dc e5					push hl    ; u2 - byte 
55dd			 
55dd					; destroy value TOS 
55dd			 
55dd					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
55dd cd 05 23			call macro_forth_dsp_pop 
55e0				endm 
# End of macro FORTH_DSP_POP
55e0			 
55e0					; get byte to send 
55e0			 
55e0					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
55e0 cd 4d 22			call macro_dsp_valuehl 
55e3				endm 
# End of macro FORTH_DSP_VALUEHL
55e3			 
55e3 e5					push hl    ; u1 - addr 
55e4			 
55e4					; destroy value TOS 
55e4			 
55e4					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
55e4 cd 05 23			call macro_forth_dsp_pop 
55e7				endm 
# End of macro FORTH_DSP_POP
55e7			 
55e7					; one value on hl get other one back 
55e7			 
55e7 d1					pop de   ; u1 - byte 
55e8			 
55e8 e1					pop hl   ; u2 - addr 
55e9			 
55e9					; TODO Send SPI byte 
55e9			 
55e9			 
55e9 7b					ld a, e 
55ea cd 79 02				call se_writebyte 
55ed			 
55ed					 
55ed			 
55ed					NEXTW 
55ed c3 39 24			jp macro_next 
55f0				endm 
# End of macro NEXTW
55f0			 
55f0			.SEI: 
55f0				CWHEAD .SFREE 81 "SEI" 3 WORD_FLAG_CODE 
55f0 65				db WORD_SYS_CORE+81             
55f1 0a 56			dw .SFREE            
55f3 04				db 3 + 1 
55f4 .. 00			db "SEI",0              
55f8				endm 
# End of macro CWHEAD
55f8			; | SEI ( u2 -- u1 ) Get a byte from Serial EEPROM device at address u2 | DONE 
55f8			 
55f8					; get port 
55f8			 
55f8					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
55f8 cd 4d 22			call macro_dsp_valuehl 
55fb				endm 
# End of macro FORTH_DSP_VALUEHL
55fb			 
55fb			;		push hl 
55fb			 
55fb					; destroy value TOS 
55fb			 
55fb					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
55fb cd 05 23			call macro_forth_dsp_pop 
55fe				endm 
# End of macro FORTH_DSP_POP
55fe			 
55fe					; one value on hl get other one back 
55fe			 
55fe			;		pop hl 
55fe			 
55fe			 
55fe					; TODO Get SPI byte 
55fe			 
55fe cd 1b 03				call se_readbyte 
5601			 
5601 26 00				ld h, 0 
5603 6f					ld l, a 
5604 cd 48 20				call forth_push_numhl 
5607			 
5607					NEXTW 
5607 c3 39 24			jp macro_next 
560a				endm 
# End of macro NEXTW
560a			 
560a			.SFREE: 
560a				CWHEAD .SIZE 83 "FFREE" 5 WORD_FLAG_CODE 
560a 67				db WORD_SYS_CORE+83             
560b 39 56			dw .SIZE            
560d 06				db 5 + 1 
560e .. 00			db "FFREE",0              
5614				endm 
# End of macro CWHEAD
5614			; | FFREE ( -- n )  Gets number of free file blocks on current storage bank | DONE 
5614			; | | > [!NOTE] 
5614			; | | > Compatible with PicoSPINet  
5614					if DEBUG_FORTH_WORDS_KEY 
5614						DMARK "FFR" 
5614 f5				push af  
5615 3a 29 56			ld a, (.dmark)  
5618 32 a0 fd			ld (debug_mark),a  
561b 3a 2a 56			ld a, (.dmark+1)  
561e 32 a1 fd			ld (debug_mark+1),a  
5621 3a 2b 56			ld a, (.dmark+2)  
5624 32 a2 fd			ld (debug_mark+2),a  
5627 18 03			jr .pastdmark  
5629 ..			.dmark: db "FFR"  
562c f1			.pastdmark: pop af  
562d			endm  
# End of macro DMARK
562d						CALLMONITOR 
562d cd aa fd			call debug_vector  
5630				endm  
# End of macro CALLMONITOR
5630					endif 
5630			 
5630 cd 41 08				call storage_freeblocks 
5633			 
5633 cd 48 20				call forth_push_numhl 
5636			 
5636				       NEXTW 
5636 c3 39 24			jp macro_next 
5639				endm 
# End of macro NEXTW
5639			.SIZE: 
5639				CWHEAD .CREATE 83 "SIZE" 4 WORD_FLAG_CODE 
5639 67				db WORD_SYS_CORE+83             
563a 6d 56			dw .CREATE            
563c 05				db 4 + 1 
563d .. 00			db "SIZE",0              
5642				endm 
# End of macro CWHEAD
5642			; | SIZE ( u -- n )  Gets number of blocks used by file id u and push to stack | DONE 
5642			; | | > [!NOTE] 
5642			; | | > Compatible with PicoSPINet  
5642					if DEBUG_FORTH_WORDS_KEY 
5642						DMARK "SIZ" 
5642 f5				push af  
5643 3a 57 56			ld a, (.dmark)  
5646 32 a0 fd			ld (debug_mark),a  
5649 3a 58 56			ld a, (.dmark+1)  
564c 32 a1 fd			ld (debug_mark+1),a  
564f 3a 59 56			ld a, (.dmark+2)  
5652 32 a2 fd			ld (debug_mark+2),a  
5655 18 03			jr .pastdmark  
5657 ..			.dmark: db "SIZ"  
565a f1			.pastdmark: pop af  
565b			endm  
# End of macro DMARK
565b						CALLMONITOR 
565b cd aa fd			call debug_vector  
565e				endm  
# End of macro CALLMONITOR
565e					endif 
565e			 
565e					FORTH_DSP_VALUEHL 
565e cd 4d 22			call macro_dsp_valuehl 
5661				endm 
# End of macro FORTH_DSP_VALUEHL
5661			;		push hl 
5661					FORTH_DSP_POP 
5661 cd 05 23			call macro_forth_dsp_pop 
5664				endm 
# End of macro FORTH_DSP_POP
5664			;		pop hl 
5664 cd a3 04				call storage_file_size 
5667			 
5667 cd 48 20				call forth_push_numhl 
566a			  
566a			 
566a				       NEXTW 
566a c3 39 24			jp macro_next 
566d				endm 
# End of macro NEXTW
566d			 
566d			.CREATE: 
566d				CWHEAD .APPEND 84 "CREATE" 6 WORD_FLAG_CODE 
566d 68				db WORD_SYS_CORE+84             
566e db 56			dw .APPEND            
5670 07				db 6 + 1 
5671 .. 00			db "CREATE",0              
5678				endm 
# End of macro CWHEAD
5678			; | CREATE ( u -- n )  Creates a file with name u on current storage bank and pushes the file id number to TOS | DONE 
5678			; | | e.g.  
5678			; | | TestProgram CREATE 
5678			; | | Top of stack will then be the file ID which needs to be used in all file handling words 
5678			; | |  
5678			; | | Max file IDs are 255. 
5678			; | |  
5678			; | | > [!NOTE] 
5678			; | | > Compatible with PicoSPINet  
5678					 
5678					if DEBUG_FORTH_WORDS_KEY 
5678						DMARK "CRT" 
5678 f5				push af  
5679 3a 8d 56			ld a, (.dmark)  
567c 32 a0 fd			ld (debug_mark),a  
567f 3a 8e 56			ld a, (.dmark+1)  
5682 32 a1 fd			ld (debug_mark+1),a  
5685 3a 8f 56			ld a, (.dmark+2)  
5688 32 a2 fd			ld (debug_mark+2),a  
568b 18 03			jr .pastdmark  
568d ..			.dmark: db "CRT"  
5690 f1			.pastdmark: pop af  
5691			endm  
# End of macro DMARK
5691						CALLMONITOR 
5691 cd aa fd			call debug_vector  
5694				endm  
# End of macro CALLMONITOR
5694					endif 
5694			;		call storage_get_block_0 
5694			 
5694					; TODO pop hl 
5694			 
5694					;v5 FORTH_DSP_VALUE 
5694					FORTH_DSP_VALUE 
5694 cd 36 22			call macro_forth_dsp_value 
5697				endm 
# End of macro FORTH_DSP_VALUE
5697			 
5697				if DEBUG_STORESE 
5697					DMARK "CR1" 
5697 f5				push af  
5698 3a ac 56			ld a, (.dmark)  
569b 32 a0 fd			ld (debug_mark),a  
569e 3a ad 56			ld a, (.dmark+1)  
56a1 32 a1 fd			ld (debug_mark+1),a  
56a4 3a ae 56			ld a, (.dmark+2)  
56a7 32 a2 fd			ld (debug_mark+2),a  
56aa 18 03			jr .pastdmark  
56ac ..			.dmark: db "CR1"  
56af f1			.pastdmark: pop af  
56b0			endm  
# End of macro DMARK
56b0					CALLMONITOR 
56b0 cd aa fd			call debug_vector  
56b3				endm  
# End of macro CALLMONITOR
56b3				endif 
56b3			;		push hl 
56b3			;		FORTH_DSP_POP 
56b3			;		pop hl 
56b3			 
56b3			;		inc hl   ; move past the type marker 
56b3			 
56b3 cd 77 08				call storage_create 
56b6			 
56b6				if DEBUG_STORESE 
56b6					DMARK "CT1" 
56b6 f5				push af  
56b7 3a cb 56			ld a, (.dmark)  
56ba 32 a0 fd			ld (debug_mark),a  
56bd 3a cc 56			ld a, (.dmark+1)  
56c0 32 a1 fd			ld (debug_mark+1),a  
56c3 3a cd 56			ld a, (.dmark+2)  
56c6 32 a2 fd			ld (debug_mark+2),a  
56c9 18 03			jr .pastdmark  
56cb ..			.dmark: db "CT1"  
56ce f1			.pastdmark: pop af  
56cf			endm  
# End of macro DMARK
56cf					CALLMONITOR 
56cf cd aa fd			call debug_vector  
56d2				endm  
# End of macro CALLMONITOR
56d2				endif 
56d2			;		push hl 
56d2					FORTH_DSP_POP 
56d2 cd 05 23			call macro_forth_dsp_pop 
56d5				endm 
# End of macro FORTH_DSP_POP
56d5			;		pop hl 
56d5					; push file id to stack 
56d5 cd 48 20				call forth_push_numhl 
56d8			 
56d8			 
56d8			 
56d8				       NEXTW 
56d8 c3 39 24			jp macro_next 
56db				endm 
# End of macro NEXTW
56db			 
56db			.APPEND: 
56db				CWHEAD .SDEL 85 "APPEND" 6 WORD_FLAG_CODE 
56db 69				db WORD_SYS_CORE+85             
56dc 6c 57			dw .SDEL            
56de 07				db 6 + 1 
56df .. 00			db "APPEND",0              
56e6				endm 
# End of macro CWHEAD
56e6			; | APPEND ( u n --  )  Appends data u to file id on current storage bank | DONE 
56e6			; | | e.g. 
56e6			; | | Test CREATE      -> $01 
56e6			; | | "A string to add to file" $01 APPEND 
56e6			; | |  
56e6			; | | The maximum file size currently using 32k serial EEPROMS using 64 byte blocks is 15k. 
56e6			; | | > [!NOTE] 
56e6			; | | > Compatible with PicoSPINet  
56e6					if DEBUG_FORTH_WORDS_KEY 
56e6						DMARK "APP" 
56e6 f5				push af  
56e7 3a fb 56			ld a, (.dmark)  
56ea 32 a0 fd			ld (debug_mark),a  
56ed 3a fc 56			ld a, (.dmark+1)  
56f0 32 a1 fd			ld (debug_mark+1),a  
56f3 3a fd 56			ld a, (.dmark+2)  
56f6 32 a2 fd			ld (debug_mark+2),a  
56f9 18 03			jr .pastdmark  
56fb ..			.dmark: db "APP"  
56fe f1			.pastdmark: pop af  
56ff			endm  
# End of macro DMARK
56ff						CALLMONITOR 
56ff cd aa fd			call debug_vector  
5702				endm  
# End of macro CALLMONITOR
5702					endif 
5702			 
5702					FORTH_DSP_VALUEHL 
5702 cd 4d 22			call macro_dsp_valuehl 
5705				endm 
# End of macro FORTH_DSP_VALUEHL
5705 e5					push hl 	; save file id 
5706			 
5706				if DEBUG_STORESE 
5706					DMARK "AP1" 
5706 f5				push af  
5707 3a 1b 57			ld a, (.dmark)  
570a 32 a0 fd			ld (debug_mark),a  
570d 3a 1c 57			ld a, (.dmark+1)  
5710 32 a1 fd			ld (debug_mark+1),a  
5713 3a 1d 57			ld a, (.dmark+2)  
5716 32 a2 fd			ld (debug_mark+2),a  
5719 18 03			jr .pastdmark  
571b ..			.dmark: db "AP1"  
571e f1			.pastdmark: pop af  
571f			endm  
# End of macro DMARK
571f					CALLMONITOR 
571f cd aa fd			call debug_vector  
5722				endm  
# End of macro CALLMONITOR
5722				endif 
5722					FORTH_DSP_POP 
5722 cd 05 23			call macro_forth_dsp_pop 
5725				endm 
# End of macro FORTH_DSP_POP
5725			 
5725					FORTH_DSP_VALUEHL 
5725 cd 4d 22			call macro_dsp_valuehl 
5728				endm 
# End of macro FORTH_DSP_VALUEHL
5728					;v5 FORTH_DSP_VALUE 
5728 e5					push hl 	; save ptr to string to save 
5729			 
5729				if DEBUG_STORESE 
5729					DMARK "AP1" 
5729 f5				push af  
572a 3a 3e 57			ld a, (.dmark)  
572d 32 a0 fd			ld (debug_mark),a  
5730 3a 3f 57			ld a, (.dmark+1)  
5733 32 a1 fd			ld (debug_mark+1),a  
5736 3a 40 57			ld a, (.dmark+2)  
5739 32 a2 fd			ld (debug_mark+2),a  
573c 18 03			jr .pastdmark  
573e ..			.dmark: db "AP1"  
5741 f1			.pastdmark: pop af  
5742			endm  
# End of macro DMARK
5742					CALLMONITOR 
5742 cd aa fd			call debug_vector  
5745				endm  
# End of macro CALLMONITOR
5745				endif 
5745					FORTH_DSP_POP 
5745 cd 05 23			call macro_forth_dsp_pop 
5748				endm 
# End of macro FORTH_DSP_POP
5748			 
5748 d1					pop de 
5749 e1					pop hl 
574a				if DEBUG_STORESE 
574a					DMARK "AP2" 
574a f5				push af  
574b 3a 5f 57			ld a, (.dmark)  
574e 32 a0 fd			ld (debug_mark),a  
5751 3a 60 57			ld a, (.dmark+1)  
5754 32 a1 fd			ld (debug_mark+1),a  
5757 3a 61 57			ld a, (.dmark+2)  
575a 32 a2 fd			ld (debug_mark+2),a  
575d 18 03			jr .pastdmark  
575f ..			.dmark: db "AP2"  
5762 f1			.pastdmark: pop af  
5763			endm  
# End of macro DMARK
5763					CALLMONITOR 
5763 cd aa fd			call debug_vector  
5766				endm  
# End of macro CALLMONITOR
5766				endif 
5766					;inc de ; skip var type indicator 
5766			 
5766					; TODO how to append numerics???? 
5766			 
5766 cd 64 0b				call storage_append		 
5769			 
5769				       NEXTW 
5769 c3 39 24			jp macro_next 
576c				endm 
# End of macro NEXTW
576c			.SDEL: 
576c				CWHEAD .OPEN 86 "ERA" 4 WORD_FLAG_CODE 
576c 6a				db WORD_SYS_CORE+86             
576d b8 57			dw .OPEN            
576f 05				db 4 + 1 
5770 .. 00			db "ERA",0              
5774				endm 
# End of macro CWHEAD
5774			; | ERA ( n --  )  Deletes all data for file id n on current storage bank | DONE 
5774			; | | > [!NOTE] 
5774			; | | > Compatible with PicoSPINet  
5774					FORTH_DSP_VALUEHL 
5774 cd 4d 22			call macro_dsp_valuehl 
5777				endm 
# End of macro FORTH_DSP_VALUEHL
5777			;		push hl 	; save file id 
5777			 
5777					if DEBUG_FORTH_WORDS_KEY 
5777						DMARK "ERA" 
5777 f5				push af  
5778 3a 8c 57			ld a, (.dmark)  
577b 32 a0 fd			ld (debug_mark),a  
577e 3a 8d 57			ld a, (.dmark+1)  
5781 32 a1 fd			ld (debug_mark+1),a  
5784 3a 8e 57			ld a, (.dmark+2)  
5787 32 a2 fd			ld (debug_mark+2),a  
578a 18 03			jr .pastdmark  
578c ..			.dmark: db "ERA"  
578f f1			.pastdmark: pop af  
5790			endm  
# End of macro DMARK
5790						CALLMONITOR 
5790 cd aa fd			call debug_vector  
5793				endm  
# End of macro CALLMONITOR
5793					endif 
5793				if DEBUG_STORESE 
5793					DMARK "ER1" 
5793 f5				push af  
5794 3a a8 57			ld a, (.dmark)  
5797 32 a0 fd			ld (debug_mark),a  
579a 3a a9 57			ld a, (.dmark+1)  
579d 32 a1 fd			ld (debug_mark+1),a  
57a0 3a aa 57			ld a, (.dmark+2)  
57a3 32 a2 fd			ld (debug_mark+2),a  
57a6 18 03			jr .pastdmark  
57a8 ..			.dmark: db "ER1"  
57ab f1			.pastdmark: pop af  
57ac			endm  
# End of macro DMARK
57ac					CALLMONITOR 
57ac cd aa fd			call debug_vector  
57af				endm  
# End of macro CALLMONITOR
57af				endif 
57af					FORTH_DSP_POP 
57af cd 05 23			call macro_forth_dsp_pop 
57b2				endm 
# End of macro FORTH_DSP_POP
57b2			 
57b2			;		pop hl 
57b2			 
57b2 cd b6 06				call storage_erase 
57b5				       NEXTW 
57b5 c3 39 24			jp macro_next 
57b8				endm 
# End of macro NEXTW
57b8			 
57b8			.OPEN: 
57b8				CWHEAD .READ 87 "OPEN" 4 WORD_FLAG_CODE 
57b8 6b				db WORD_SYS_CORE+87             
57b9 4c 58			dw .READ            
57bb 05				db 4 + 1 
57bc .. 00			db "OPEN",0              
57c1				endm 
# End of macro CWHEAD
57c1			; | OPEN ( n -- n )  Sets file id to point to first data page for subsequent READs. Pushes the max number of blocks for this file | DONE 
57c1			; | | e.g. 
57c1			; | | $01 OPEN $01 DO $01 READ . LOOP 
57c1			; | | 
57c1			; | | Will return with 255 blocks if the file does not exist 
57c1			; | | > [!NOTE] 
57c1			; | | > Compatible with PicoSPINet  
57c1			 
57c1					if DEBUG_FORTH_WORDS_KEY 
57c1						DMARK "OPN" 
57c1 f5				push af  
57c2 3a d6 57			ld a, (.dmark)  
57c5 32 a0 fd			ld (debug_mark),a  
57c8 3a d7 57			ld a, (.dmark+1)  
57cb 32 a1 fd			ld (debug_mark+1),a  
57ce 3a d8 57			ld a, (.dmark+2)  
57d1 32 a2 fd			ld (debug_mark+2),a  
57d4 18 03			jr .pastdmark  
57d6 ..			.dmark: db "OPN"  
57d9 f1			.pastdmark: pop af  
57da			endm  
# End of macro DMARK
57da						CALLMONITOR 
57da cd aa fd			call debug_vector  
57dd				endm  
# End of macro CALLMONITOR
57dd					endif 
57dd					; TODO handle multiple file opens 
57dd			 
57dd 3e 01			       	ld a, 1 
57df 32 9f f9				ld (store_openext), a 
57e2			 
57e2					; get max extents for this file 
57e2				 
57e2								 
57e2					FORTH_DSP_VALUEHL 
57e2 cd 4d 22			call macro_dsp_valuehl 
57e5				endm 
# End of macro FORTH_DSP_VALUEHL
57e5			 
57e5 65					ld h, l 
57e6 2e 00				ld l, 0 
57e8			 
57e8					; store file id 
57e8			 
57e8 7c					ld a, h 
57e9 32 9c f9				ld (store_filecache), a 
57ec			 
57ec				if DEBUG_STORESE 
57ec					DMARK "OPN" 
57ec f5				push af  
57ed 3a 01 58			ld a, (.dmark)  
57f0 32 a0 fd			ld (debug_mark),a  
57f3 3a 02 58			ld a, (.dmark+1)  
57f6 32 a1 fd			ld (debug_mark+1),a  
57f9 3a 03 58			ld a, (.dmark+2)  
57fc 32 a2 fd			ld (debug_mark+2),a  
57ff 18 03			jr .pastdmark  
5801 ..			.dmark: db "OPN"  
5804 f1			.pastdmark: pop af  
5805			endm  
# End of macro DMARK
5805					CALLMONITOR 
5805 cd aa fd			call debug_vector  
5808				endm  
# End of macro CALLMONITOR
5808				endif 
5808			;		push hl 
5808					FORTH_DSP_POP     ; TODO for now just get rid of stream id 
5808 cd 05 23			call macro_forth_dsp_pop 
580b				endm 
# End of macro FORTH_DSP_POP
580b			;		pop hl 
580b						 
580b 11 af f9				ld de, store_page      ; get block zero of file 
580e cd cd 09				call storage_read 
5811 cd 07 10			call ishlzero 
5814 20 04			jr nz, .opfound 
5816			 
5816				; file does not exist so indicate with 255 extents in use 
5816			 
5816 3e ff			ld a, 255 
5818 18 29			jr .skipopeneof 
581a			 
581a			 
581a			.opfound: 
581a			 
581a			 
581a 3a b1 f9				ld a, (store_page+2)    ; max extents for this file 
581d 32 9e f9				ld  (store_openmaxext), a   ; get our limit and push 
5820					 
5820				if DEBUG_STORESE 
5820					DMARK "OPx" 
5820 f5				push af  
5821 3a 35 58			ld a, (.dmark)  
5824 32 a0 fd			ld (debug_mark),a  
5827 3a 36 58			ld a, (.dmark+1)  
582a 32 a1 fd			ld (debug_mark+1),a  
582d 3a 37 58			ld a, (.dmark+2)  
5830 32 a2 fd			ld (debug_mark+2),a  
5833 18 03			jr .pastdmark  
5835 ..			.dmark: db "OPx"  
5838 f1			.pastdmark: pop af  
5839			endm  
# End of macro DMARK
5839					CALLMONITOR 
5839 cd aa fd			call debug_vector  
583c				endm  
# End of macro CALLMONITOR
583c				endif 
583c fe 00				cp 0 
583e 20 03				jr nz, .skipopeneof 
5840					; have opened an empty file 
5840					 
5840 32 9f f9				ld (store_openext), a 
5843			 
5843			.skipopeneof: 
5843			 
5843 6f					ld l, a 
5844 26 00				ld h, 0 
5846 cd 48 20				call forth_push_numhl 
5849			 
5849			 
5849				       NEXTW 
5849 c3 39 24			jp macro_next 
584c				endm 
# End of macro NEXTW
584c			.READ: 
584c				CWHEAD .EOF 88 "READ" 4 WORD_FLAG_CODE 
584c 6c				db WORD_SYS_CORE+88             
584d 76 59			dw .EOF            
584f 05				db 4 + 1 
5850 .. 00			db "READ",0              
5855				endm 
# End of macro CWHEAD
5855			; | READ ( -- n  )  Reads next page of current file id and push to stack | DONE 
5855			; | | e.g. 
5855			; | | $01 OPEN $01 DO READ . LOOP 
5855			; | | 
5855			; | | As this word only reads one 64 byte block in at a time, if the APPEND word has created extra blocks for the excess, this READ 
5855			; | | word is unaware so the long string needs to be joined if the string is a full. A single block read might be what you want, 
5855			; | | but if not then writing a word to join blocks will be required. The upshot is a full string will be 62 bytes as the first 
5855			; | | two bytes contain the file id and extent. 
5855			; | |  
5855			; | | Note: There is a flag that enables/disables long block reads called 'store_longread' and a poke of a non-zero value will 
5855			; | | enable the code to automatically read futher blocks if full. It is BUGGY so don't use for now. 
5855			; | | > [!NOTE] 
5855			; | | > Compatible with PicoSPINet  
5855			 
5855					if DEBUG_FORTH_WORDS_KEY 
5855						DMARK "REA" 
5855 f5				push af  
5856 3a 6a 58			ld a, (.dmark)  
5859 32 a0 fd			ld (debug_mark),a  
585c 3a 6b 58			ld a, (.dmark+1)  
585f 32 a1 fd			ld (debug_mark+1),a  
5862 3a 6c 58			ld a, (.dmark+2)  
5865 32 a2 fd			ld (debug_mark+2),a  
5868 18 03			jr .pastdmark  
586a ..			.dmark: db "REA"  
586d f1			.pastdmark: pop af  
586e			endm  
# End of macro DMARK
586e						CALLMONITOR 
586e cd aa fd			call debug_vector  
5871				endm  
# End of macro CALLMONITOR
5871					endif 
5871					; store_openext use it. If zero it is EOF 
5871			 
5871					; read block from current stream id 
5871					; if the block does not contain zero term keep reading blocks until zero found 
5871					; push the block to stack 
5871					; save the block id to stream 
5871			 
5871			 
5871 cd a3 59				call .testeof 
5874 3e 01				ld a, 1 
5876 bd					cp l 
5877 ca 52 59				jp z, .ateof 
587a			 
587a			 
587a			;		FORTH_DSP_VALUEHL 
587a			 
587a			;		push hl 
587a			 
587a			;	if DEBUG_STORESE 
587a			;		DMARK "REA" 
587a			;		CALLMONITOR 
587a			;	endif 
587a			;		FORTH_DSP_POP 
587a			 
587a			;		pop hl 
587a				 
587a 3a 9c f9				ld a, (store_filecache) 
587d 67					ld h,a 
587e			 
587e 3a 9f f9				ld a, (store_openext) 
5881 6f					ld l, a 
5882					 
5882 fe 00				cp 0 
5884 ca 52 59				jp z, .ateof     ; dont read past eof 
5887			 
5887 cd b0 0c				call storage_clear_page 
588a			 
588a 11 af f9				ld de, store_page 
588d				if DEBUG_STORESE 
588d					DMARK "RE1" 
588d f5				push af  
588e 3a a2 58			ld a, (.dmark)  
5891 32 a0 fd			ld (debug_mark),a  
5894 3a a3 58			ld a, (.dmark+1)  
5897 32 a1 fd			ld (debug_mark+1),a  
589a 3a a4 58			ld a, (.dmark+2)  
589d 32 a2 fd			ld (debug_mark+2),a  
58a0 18 03			jr .pastdmark  
58a2 ..			.dmark: db "RE1"  
58a5 f1			.pastdmark: pop af  
58a6			endm  
# End of macro DMARK
58a6					CALLMONITOR 
58a6 cd aa fd			call debug_vector  
58a9				endm  
# End of macro CALLMONITOR
58a9				endif 
58a9 cd cd 09				call storage_read 
58ac			 
58ac				if DEBUG_STORESE 
58ac					DMARK "RE2" 
58ac f5				push af  
58ad 3a c1 58			ld a, (.dmark)  
58b0 32 a0 fd			ld (debug_mark),a  
58b3 3a c2 58			ld a, (.dmark+1)  
58b6 32 a1 fd			ld (debug_mark+1),a  
58b9 3a c3 58			ld a, (.dmark+2)  
58bc 32 a2 fd			ld (debug_mark+2),a  
58bf 18 03			jr .pastdmark  
58c1 ..			.dmark: db "RE2"  
58c4 f1			.pastdmark: pop af  
58c5			endm  
# End of macro DMARK
58c5					CALLMONITOR 
58c5 cd aa fd			call debug_vector  
58c8				endm  
# End of macro CALLMONITOR
58c8				endif 
58c8 cd 07 10			call ishlzero 
58cb			;	ld a, l 
58cb			;	add h 
58cb			;	cp 0 
58cb ca 52 59			jp z, .readeof 
58ce			 
58ce				; not eof so hl should point to data to push to stack 
58ce			 
58ce				if DEBUG_STORESE 
58ce					DMARK "RE3" 
58ce f5				push af  
58cf 3a e3 58			ld a, (.dmark)  
58d2 32 a0 fd			ld (debug_mark),a  
58d5 3a e4 58			ld a, (.dmark+1)  
58d8 32 a1 fd			ld (debug_mark+1),a  
58db 3a e5 58			ld a, (.dmark+2)  
58de 32 a2 fd			ld (debug_mark+2),a  
58e1 18 03			jr .pastdmark  
58e3 ..			.dmark: db "RE3"  
58e6 f1			.pastdmark: pop af  
58e7			endm  
# End of macro DMARK
58e7					CALLMONITOR 
58e7 cd aa fd			call debug_vector  
58ea				endm  
# End of macro CALLMONITOR
58ea				endif 
58ea cd b6 20			call forth_push_str 
58ed			 
58ed				if DEBUG_STORESE 
58ed					DMARK "RE4" 
58ed f5				push af  
58ee 3a 02 59			ld a, (.dmark)  
58f1 32 a0 fd			ld (debug_mark),a  
58f4 3a 03 59			ld a, (.dmark+1)  
58f7 32 a1 fd			ld (debug_mark+1),a  
58fa 3a 04 59			ld a, (.dmark+2)  
58fd 32 a2 fd			ld (debug_mark+2),a  
5900 18 03			jr .pastdmark  
5902 ..			.dmark: db "RE4"  
5905 f1			.pastdmark: pop af  
5906			endm  
# End of macro DMARK
5906					CALLMONITOR 
5906 cd aa fd			call debug_vector  
5909				endm  
# End of macro CALLMONITOR
5909				endif 
5909				; get next block  or mark as eof 
5909			 
5909 3a 9e f9			ld a, (store_openmaxext)   ; get our limit 
590c 4f				ld c, a	 
590d 3a 9f f9			ld a, (store_openext) 
5910			 
5910				if DEBUG_STORESE 
5910					DMARK "RE5" 
5910 f5				push af  
5911 3a 25 59			ld a, (.dmark)  
5914 32 a0 fd			ld (debug_mark),a  
5917 3a 26 59			ld a, (.dmark+1)  
591a 32 a1 fd			ld (debug_mark+1),a  
591d 3a 27 59			ld a, (.dmark+2)  
5920 32 a2 fd			ld (debug_mark+2),a  
5923 18 03			jr .pastdmark  
5925 ..			.dmark: db "RE5"  
5928 f1			.pastdmark: pop af  
5929			endm  
# End of macro DMARK
5929					CALLMONITOR 
5929 cd aa fd			call debug_vector  
592c				endm  
# End of macro CALLMONITOR
592c				endif 
592c b9				cp c 
592d 28 23			jr z, .readeof     ; at last extent 
592f			 
592f 3c					inc a 
5930 32 9f f9				ld (store_openext), a 
5933			 
5933				if DEBUG_STORESE 
5933					DMARK "RE6" 
5933 f5				push af  
5934 3a 48 59			ld a, (.dmark)  
5937 32 a0 fd			ld (debug_mark),a  
593a 3a 49 59			ld a, (.dmark+1)  
593d 32 a1 fd			ld (debug_mark+1),a  
5940 3a 4a 59			ld a, (.dmark+2)  
5943 32 a2 fd			ld (debug_mark+2),a  
5946 18 03			jr .pastdmark  
5948 ..			.dmark: db "RE6"  
594b f1			.pastdmark: pop af  
594c			endm  
# End of macro DMARK
594c					CALLMONITOR 
594c cd aa fd			call debug_vector  
594f				endm  
# End of macro CALLMONITOR
594f				endif 
594f			 
594f			 
594f				       NEXTW 
594f c3 39 24			jp macro_next 
5952				endm 
# End of macro NEXTW
5952			.ateof: 
5952				;	ld hl, .showeof 
5952				;	call forth_push_str 
5952 3e 00		.readeof:	ld a, 0 
5954 32 9f f9				ld (store_openext), a 
5957			 
5957					 
5957				if DEBUG_STORESE 
5957					DMARK "REF" 
5957 f5				push af  
5958 3a 6c 59			ld a, (.dmark)  
595b 32 a0 fd			ld (debug_mark),a  
595e 3a 6d 59			ld a, (.dmark+1)  
5961 32 a1 fd			ld (debug_mark+1),a  
5964 3a 6e 59			ld a, (.dmark+2)  
5967 32 a2 fd			ld (debug_mark+2),a  
596a 18 03			jr .pastdmark  
596c ..			.dmark: db "REF"  
596f f1			.pastdmark: pop af  
5970			endm  
# End of macro DMARK
5970					CALLMONITOR 
5970 cd aa fd			call debug_vector  
5973				endm  
# End of macro CALLMONITOR
5973				endif 
5973				       NEXTW 
5973 c3 39 24			jp macro_next 
5976				endm 
# End of macro NEXTW
5976			 
5976			;.showeof:   db "eof", 0 
5976			 
5976			 
5976			.EOF: 
5976				CWHEAD .FORMAT 89 "EOF" 3 WORD_FLAG_CODE 
5976 6d				db WORD_SYS_CORE+89             
5977 b8 59			dw .FORMAT            
5979 04				db 3 + 1 
597a .. 00			db "EOF",0              
597e				endm 
# End of macro CWHEAD
597e			; | EOF ( -- u )  Returns EOF logical state of current open file id | DONE 
597e			; | | e.g. 
597e			; | | $01 OPEN REPEAT READ EOF $00 IF LOOP 
597e			; | | > [!NOTE] 
597e			; | | > Compatible with PicoSPINet  
597e					; TODO if current block id for stream is zero then push true else false 
597e			 
597e					if DEBUG_FORTH_WORDS_KEY 
597e						DMARK "EOF" 
597e f5				push af  
597f 3a 93 59			ld a, (.dmark)  
5982 32 a0 fd			ld (debug_mark),a  
5985 3a 94 59			ld a, (.dmark+1)  
5988 32 a1 fd			ld (debug_mark+1),a  
598b 3a 95 59			ld a, (.dmark+2)  
598e 32 a2 fd			ld (debug_mark+2),a  
5991 18 03			jr .pastdmark  
5993 ..			.dmark: db "EOF"  
5996 f1			.pastdmark: pop af  
5997			endm  
# End of macro DMARK
5997						CALLMONITOR 
5997 cd aa fd			call debug_vector  
599a				endm  
# End of macro CALLMONITOR
599a					endif 
599a			 
599a					; TODO handlue multiple file streams 
599a			 
599a			;		FORTH_iDSP_POP     ; for now just get rid of stream id 
599a cd a3 59				call .testeof 
599d cd 48 20				call forth_push_numhl 
59a0			 
59a0			 
59a0				       NEXTW 
59a0 c3 39 24			jp macro_next 
59a3				endm 
# End of macro NEXTW
59a3			 
59a3			.testeof: 
59a3 2e 01				ld l, 1 
59a5 3a 9e f9				ld a, (store_openmaxext) 
59a8 fe 00				cp 0 
59aa 28 09				jr  z, .eofdone   ; empty file 
59ac 3a 9f f9				ld a, (store_openext) 
59af fe 00				cp 0 
59b1 28 02				jr  z, .eofdone 
59b3 2e 00				ld l, 0 
59b5 26 00		.eofdone:	ld h, 0 
59b7 c9					ret 
59b8			 
59b8			 
59b8			 
59b8			 
59b8			.FORMAT: 
59b8				CWHEAD .LABEL 89 "FORMAT" 6 WORD_FLAG_CODE 
59b8 6d				db WORD_SYS_CORE+89             
59b9 09 5a			dw .LABEL            
59bb 07				db 6 + 1 
59bc .. 00			db "FORMAT",0              
59c3				endm 
# End of macro CWHEAD
59c3			; | FORMAT (  --  )  Formats the current bank selected (NO PROMPT!) | DONE 
59c3			; | | > [!NOTE] 
59c3			; | | > Compatible with PicoSPINet  
59c3					; TODO if current block id for stream is zero then push true else false 
59c3				 
59c3				if DEBUG_STORESE 
59c3					DMARK "FOR" 
59c3 f5				push af  
59c4 3a d8 59			ld a, (.dmark)  
59c7 32 a0 fd			ld (debug_mark),a  
59ca 3a d9 59			ld a, (.dmark+1)  
59cd 32 a1 fd			ld (debug_mark+1),a  
59d0 3a da 59			ld a, (.dmark+2)  
59d3 32 a2 fd			ld (debug_mark+2),a  
59d6 18 03			jr .pastdmark  
59d8 ..			.dmark: db "FOR"  
59db f1			.pastdmark: pop af  
59dc			endm  
# End of macro DMARK
59dc					CALLMONITOR 
59dc cd aa fd			call debug_vector  
59df				endm  
# End of macro CALLMONITOR
59df				endif 
59df					; Wipes the bank check flags to cause a reformat on next block 0 read 
59df			 
59df 21 01 00				ld hl, 1 
59e2 3e 00				ld a, 0 
59e4 cd 79 02				call se_writebyte 
59e7			 
59e7				if DEBUG_STORESE 
59e7					DMARK "FO0" 
59e7 f5				push af  
59e8 3a fc 59			ld a, (.dmark)  
59eb 32 a0 fd			ld (debug_mark),a  
59ee 3a fd 59			ld a, (.dmark+1)  
59f1 32 a1 fd			ld (debug_mark+1),a  
59f4 3a fe 59			ld a, (.dmark+2)  
59f7 32 a2 fd			ld (debug_mark+2),a  
59fa 18 03			jr .pastdmark  
59fc ..			.dmark: db "FO0"  
59ff f1			.pastdmark: pop af  
5a00			endm  
# End of macro DMARK
5a00					CALLMONITOR 
5a00 cd aa fd			call debug_vector  
5a03				endm  
# End of macro CALLMONITOR
5a03				endif 
5a03					; force bank init 
5a03			 
5a03 cd 25 05				call storage_get_block_0 
5a06					 
5a06				       NEXTW 
5a06 c3 39 24			jp macro_next 
5a09				endm 
# End of macro NEXTW
5a09			.LABEL: 
5a09				CWHEAD .STOREPAGE 89 "LABEL" 5 WORD_FLAG_CODE 
5a09 6d				db WORD_SYS_CORE+89             
5a0a 57 5a			dw .STOREPAGE            
5a0c 06				db 5 + 1 
5a0d .. 00			db "LABEL",0              
5a13				endm 
# End of macro CWHEAD
5a13			; | LABEL ( u --  )  Sets the storage bank label to string on top of stack  | DONE 
5a13			; | | > [!NOTE] 
5a13			; | | > Compatible with PicoSPINet  
5a13					; TODO test to see if bank is selected 
5a13				 
5a13					if DEBUG_FORTH_WORDS_KEY 
5a13						DMARK "LBL" 
5a13 f5				push af  
5a14 3a 28 5a			ld a, (.dmark)  
5a17 32 a0 fd			ld (debug_mark),a  
5a1a 3a 29 5a			ld a, (.dmark+1)  
5a1d 32 a1 fd			ld (debug_mark+1),a  
5a20 3a 2a 5a			ld a, (.dmark+2)  
5a23 32 a2 fd			ld (debug_mark+2),a  
5a26 18 03			jr .pastdmark  
5a28 ..			.dmark: db "LBL"  
5a2b f1			.pastdmark: pop af  
5a2c			endm  
# End of macro DMARK
5a2c						CALLMONITOR 
5a2c cd aa fd			call debug_vector  
5a2f				endm  
# End of macro CALLMONITOR
5a2f					endif 
5a2f			;	if DEBUG_STORESE 
5a2f			;		DMARK "LBL" 
5a2f			;		CALLMONITOR 
5a2f			;	endif 
5a2f					FORTH_DSP_VALUEHL 
5a2f cd 4d 22			call macro_dsp_valuehl 
5a32				endm 
# End of macro FORTH_DSP_VALUEHL
5a32					;v5FORTH_DSP_VALUE 
5a32					 
5a32			;		push hl 
5a32					FORTH_DSP_POP 
5a32 cd 05 23			call macro_forth_dsp_pop 
5a35				endm 
# End of macro FORTH_DSP_POP
5a35			;		pop hl 
5a35			 
5a35			;v5		inc hl   ; move past the type marker 
5a35			 
5a35				if DEBUG_STORESE 
5a35					DMARK "LBl" 
5a35 f5				push af  
5a36 3a 4a 5a			ld a, (.dmark)  
5a39 32 a0 fd			ld (debug_mark),a  
5a3c 3a 4b 5a			ld a, (.dmark+1)  
5a3f 32 a1 fd			ld (debug_mark+1),a  
5a42 3a 4c 5a			ld a, (.dmark+2)  
5a45 32 a2 fd			ld (debug_mark+2),a  
5a48 18 03			jr .pastdmark  
5a4a ..			.dmark: db "LBl"  
5a4d f1			.pastdmark: pop af  
5a4e			endm  
# End of macro DMARK
5a4e					CALLMONITOR 
5a4e cd aa fd			call debug_vector  
5a51				endm  
# End of macro CALLMONITOR
5a51				endif 
5a51 cd 49 06				call storage_label 
5a54			 
5a54				       NEXTW 
5a54 c3 39 24			jp macro_next 
5a57				endm 
# End of macro NEXTW
5a57			.STOREPAGE: 
5a57				CWHEAD .LABELS 89 "STOREPAGE" 9 WORD_FLAG_CODE 
5a57 6d				db WORD_SYS_CORE+89             
5a58 8a 5a			dw .LABELS            
5a5a 0a				db 9 + 1 
5a5b .. 00			db "STOREPAGE",0              
5a65				endm 
# End of macro CWHEAD
5a65			; | STOREPAGE ( -- addr )  Pushes the address of the file system record buffer to stack for direct access  | DONE 
5a65			; | | > [!NOTE] 
5a65			; | | > Compatible with PicoSPINet  
5a65					; TODO test to see if bank is selected 
5a65				 
5a65					if DEBUG_FORTH_WORDS_KEY 
5a65						DMARK "STP" 
5a65 f5				push af  
5a66 3a 7a 5a			ld a, (.dmark)  
5a69 32 a0 fd			ld (debug_mark),a  
5a6c 3a 7b 5a			ld a, (.dmark+1)  
5a6f 32 a1 fd			ld (debug_mark+1),a  
5a72 3a 7c 5a			ld a, (.dmark+2)  
5a75 32 a2 fd			ld (debug_mark+2),a  
5a78 18 03			jr .pastdmark  
5a7a ..			.dmark: db "STP"  
5a7d f1			.pastdmark: pop af  
5a7e			endm  
# End of macro DMARK
5a7e						CALLMONITOR 
5a7e cd aa fd			call debug_vector  
5a81				endm  
# End of macro CALLMONITOR
5a81					endif 
5a81			;	if DEBUG_STORESE 
5a81			;		DMARK "STP" 
5a81			;		CALLMONITOR 
5a81			;	endif 
5a81			 
5a81 21 af f9			ld hl, store_page 
5a84 cd 48 20			call forth_push_numhl 
5a87			 
5a87			 
5a87				       NEXTW 
5a87 c3 39 24			jp macro_next 
5a8a				endm 
# End of macro NEXTW
5a8a			.LABELS: 
5a8a				CWHEAD .SCONST1 89 "LABELS" 6 WORD_FLAG_CODE 
5a8a 6d				db WORD_SYS_CORE+89             
5a8b 14 5b			dw .SCONST1            
5a8d 07				db 6 + 1 
5a8e .. 00			db "LABELS",0              
5a95				endm 
# End of macro CWHEAD
5a95			; | LABELS (  -- b n .... c  )  Pushes each storage bank labels (n) along with id (b) onto the stack giving count (c) of banks  | DONE 
5a95			; | | > [!CAUTION] 
5a95			; | | > *NOT* Compatible with PicoSPINet  
5a95					;  
5a95			 
5a95					; save the current device selected to restore afterwards 
5a95				 
5a95 3a 95 f9				ld a, (spi_device) 
5a98 f5					push af 
5a99			 
5a99			 
5a99					; run through each of the banks 
5a99			 
5a99 21 01 00				ld hl, 1 
5a9c cd 48 20				call forth_push_numhl 
5a9f 3e ff				ld a, SPI_CE_HIGH 
5aa1 cb 87				res SPI_CE0, a 
5aa3 32 95 f9				ld (spi_device), a 
5aa6 cd 25 05				call storage_get_block_0 
5aa9 21 b2 f9				ld hl, store_page+3 
5aac cd b6 20				call forth_push_str 
5aaf			 
5aaf					 
5aaf 21 02 00				ld hl, 2 
5ab2 cd 48 20				call forth_push_numhl 
5ab5 3e ff				ld a, SPI_CE_HIGH 
5ab7 cb 8f				res SPI_CE1, a 
5ab9 32 95 f9				ld (spi_device), a 
5abc cd 25 05				call storage_get_block_0 
5abf 21 b2 f9				ld hl, store_page+3 
5ac2 cd b6 20				call forth_push_str 
5ac5			 
5ac5					 
5ac5 21 03 00				ld hl, 3 
5ac8 cd 48 20				call forth_push_numhl 
5acb 3e ff				ld a, SPI_CE_HIGH 
5acd cb 97				res SPI_CE2, a 
5acf 32 95 f9				ld (spi_device), a 
5ad2 cd 25 05				call storage_get_block_0 
5ad5 21 b2 f9				ld hl, store_page+3 
5ad8 cd b6 20				call forth_push_str 
5adb			 
5adb			 
5adb 21 04 00				ld hl, 4 
5ade cd 48 20				call forth_push_numhl 
5ae1 3e ff				ld a, SPI_CE_HIGH 
5ae3 cb 9f				res SPI_CE3, a 
5ae5 32 95 f9				ld (spi_device), a 
5ae8 cd 25 05				call storage_get_block_0 
5aeb 21 b2 f9				ld hl, store_page+3 
5aee cd b6 20				call forth_push_str 
5af1			 
5af1					 
5af1			 
5af1 21 05 00				ld hl, 5 
5af4 cd 48 20				call forth_push_numhl 
5af7 3e ff				ld a, SPI_CE_HIGH 
5af9 cb a7				res SPI_CE4, a 
5afb 32 95 f9				ld (spi_device), a 
5afe cd 25 05				call storage_get_block_0 
5b01 21 b2 f9				ld hl, store_page+3 
5b04 cd b6 20				call forth_push_str 
5b07			 
5b07					 
5b07					; push fixed count of storage devices (on board) for now 
5b07			 
5b07 21 05 00				ld hl, 5 
5b0a cd 48 20				call forth_push_numhl 
5b0d			 
5b0d					; restore selected device  
5b0d				 
5b0d f1					pop af 
5b0e 32 95 f9				ld (spi_device), a 
5b11			 
5b11				       NEXTW 
5b11 c3 39 24			jp macro_next 
5b14				endm 
# End of macro NEXTW
5b14			 
5b14			.SCONST1: 
5b14				CWHEAD .SCONST2 89 "FILEID" 6 WORD_FLAG_CODE 
5b14 6d				db WORD_SYS_CORE+89             
5b15 2b 5b			dw .SCONST2            
5b17 07				db 6 + 1 
5b18 .. 00			db "FILEID",0              
5b1f				endm 
# End of macro CWHEAD
5b1f			; | FILEID (  -- u1  )  Pushes currently open file ID to stack | DONE 
5b1f			; | | > [!NOTE] 
5b1f			; | | > Compatible with PicoSPINet  
5b1f 3a 9c f9				ld a, (store_filecache) 
5b22 26 00				ld h, 0 
5b24 6f					ld l, a 
5b25 cd 48 20				call forth_push_numhl 
5b28					NEXTW 
5b28 c3 39 24			jp macro_next 
5b2b				endm 
# End of macro NEXTW
5b2b			.SCONST2: 
5b2b				CWHEAD .SCONST3 89 "FILEEXT" 7 WORD_FLAG_CODE 
5b2b 6d				db WORD_SYS_CORE+89             
5b2c 43 5b			dw .SCONST3            
5b2e 08				db 7 + 1 
5b2f .. 00			db "FILEEXT",0              
5b37				endm 
# End of macro CWHEAD
5b37			; | FILEEXT (  -- u1  )  Pushes the currently read file extent of the file to stack | DONE 
5b37			; | | > [!NOTE] 
5b37			; | | > Compatible with PicoSPINet  
5b37 3a 9f f9				ld a, (store_openext) 
5b3a 26 00				ld h, 0 
5b3c 6f					ld l, a 
5b3d cd 48 20				call forth_push_numhl 
5b40					NEXTW 
5b40 c3 39 24			jp macro_next 
5b43				endm 
# End of macro NEXTW
5b43			.SCONST3: 
5b43				CWHEAD .SCONST4 89 "FILEMAX" 7 WORD_FLAG_CODE 
5b43 6d				db WORD_SYS_CORE+89             
5b44 5b 5b			dw .SCONST4            
5b46 08				db 7 + 1 
5b47 .. 00			db "FILEMAX",0              
5b4f				endm 
# End of macro CWHEAD
5b4f			; | FILEMAXEXT (  -- u1  )  Pushes the maximum file extent of the currenlty open file to stack | DONE 
5b4f			; | | > [!NOTE] 
5b4f			; | | > Compatible with PicoSPINet  
5b4f 3a 9e f9				ld a, (store_openmaxext) 
5b52 26 00				ld h, 0 
5b54 6f					ld l, a 
5b55 cd 48 20				call forth_push_numhl 
5b58					NEXTW 
5b58 c3 39 24			jp macro_next 
5b5b				endm 
# End of macro NEXTW
5b5b			.SCONST4: 
5b5b				CWHEAD .SCONST5 89 "FILEADDR" 8 WORD_FLAG_CODE 
5b5b 6d				db WORD_SYS_CORE+89             
5b5c 71 5b			dw .SCONST5            
5b5e 09				db 8 + 1 
5b5f .. 00			db "FILEADDR",0              
5b68				endm 
# End of macro CWHEAD
5b68			; | FILEADDR (  -- u1  )  Pushes the address of the block accessed for the currently open file to stack | DONE 
5b68			; | | > [!NOTE] 
5b68			; | | > Compatible with PicoSPINet  
5b68 2a a0 f9				ld hl, (store_openaddr) 
5b6b cd 48 20				call forth_push_numhl 
5b6e					NEXTW 
5b6e c3 39 24			jp macro_next 
5b71				endm 
# End of macro NEXTW
5b71			.SCONST5: 
5b71				CWHEAD .SCONST6 89 "FILEPAGE" 8 WORD_FLAG_CODE 
5b71 6d				db WORD_SYS_CORE+89             
5b72 92 5b			dw .SCONST6            
5b74 09				db 8 + 1 
5b75 .. 00			db "FILEPAGE",0              
5b7e				endm 
# End of macro CWHEAD
5b7e			; | FILEPAGE (  -- u1  )  Pushes the page id block accessed for the currenlty open file to stack | DONE 
5b7e			; | | > [!NOTE] 
5b7e			; | | > Compatible with PicoSPINet  
5b7e 2a a0 f9				ld hl, (store_openaddr) 
5b81 e5					push hl 
5b82 c1					pop bc 
5b83 16 00				ld d, 0 
5b85 1e 40				ld e, STORE_BLOCK_PHY 
5b87 cd 3b 0f				call Div16 
5b8a c5					push bc 
5b8b e1					pop hl 
5b8c cd 48 20				call forth_push_numhl 
5b8f					NEXTW 
5b8f c3 39 24			jp macro_next 
5b92				endm 
# End of macro NEXTW
5b92			.SCONST6: 
5b92				CWHEAD .ENDSTORAGE 89 "READCONT" 8 WORD_FLAG_CODE 
5b92 6d				db WORD_SYS_CORE+89             
5b93 ab 5b			dw .ENDSTORAGE            
5b95 09				db 8 + 1 
5b96 .. 00			db "READCONT",0              
5b9f				endm 
# End of macro CWHEAD
5b9f			; | READCONT (  -- u1  )  Pushes the READ continuation flag to stack | DONE 
5b9f			; | | If the most recent READ results in a full buffer load then this flag is set and will indicate that 
5b9f			; | | a further read should, if applicable, be CONCAT to the previous read. 
5b9f			; | | > [!NOTE] 
5b9f			; | | > Compatible with PicoSPINet  
5b9f 3a a2 f9				ld a, (store_readcont) 
5ba2 26 00				ld h, 0 
5ba4 6f					ld l, a 
5ba5 cd 48 20				call forth_push_numhl 
5ba8					NEXTW 
5ba8 c3 39 24			jp macro_next 
5bab				endm 
# End of macro NEXTW
5bab			.ENDSTORAGE: 
5bab			; eof 
# End of file forth_words_storage.asm
5bab			endif 
5bab				include "forth_words_device.asm" 
5bab			; Device related words 
5bab			 
5bab			; | ## Device Words 
5bab			 
5bab			;if SOUND_ENABLE 
5bab			;.NOTE: 
5bab			;	CWHEAD .AFTERSOUND 31 "NOTE" 4 WORD_FLAG_CODE 
5bab			;; NOTE ( ud uf --  )  Plays a note of frequency uf for the duration of ud millseconds  TODO 
5bab			;		if DEBUG_FORTH_WORDS_KEY 
5bab			;			DMARK "NTE" 
5bab			;			CALLMONITOR 
5bab			;		endif 
5bab			; 
5bab			;	 
5bab			; 
5bab			;		NEXTW 
5bab			;.AFTERSOUND: 
5bab			;endif 
5bab			 
5bab			 
5bab			USE_GPIO: equ 0 
5bab			 
5bab			if USE_GPIO 
5bab			.GP1: 
5bab				CWHEAD .GP2 31 "IOIN" 4 WORD_FLAG_CODE 
5bab			;  IOIN ( u1 -- u )    Perform a GPIO read of pin u1 and push result   
5bab					NEXTW 
5bab			.GP2: 
5bab				CWHEAD .GP3 31 "IOOUT" 5 WORD_FLAG_CODE 
5bab			;  IOOUT ( u1 u2 --  )    Perform a GPIO write of pin u1 with pin set to 0 or 1 in u2   
5bab			 
5bab					NEXTW 
5bab			 
5bab			.GP3: 
5bab				CWHEAD .GP4 31 "IOBYTE" 5 WORD_FLAG_CODE 
5bab			;  IOBYTE ( u1 --  )    Perform a GPIO write of byte u1   
5bab			 
5bab					NEXTW 
5bab			 
5bab			.GP4: 
5bab				CWHEAD .SIN 31 "IOSET" 5 WORD_FLAG_CODE 
5bab			;  IOSET ( u1 --  )    Setup GPIO pins for I/O direction. Bit is set for write else read pin   
5bab			 
5bab					NEXTW 
5bab			.SIN: 
5bab			 
5bab			 
5bab			endif 
5bab			 
5bab			 
5bab				CWHEAD .SOUT 31 "IN" 2 WORD_FLAG_CODE 
5bab 33				db WORD_SYS_CORE+31             
5bac e0 5b			dw .SOUT            
5bae 03				db 2 + 1 
5baf .. 00			db "IN",0              
5bb2				endm 
# End of macro CWHEAD
5bb2			; | IN ( u1 -- u )    Perform Z80 IN with u1 being the port number. Push result to TOS | TO TEST 
5bb2					if DEBUG_FORTH_WORDS_KEY 
5bb2						DMARK "IN." 
5bb2 f5				push af  
5bb3 3a c7 5b			ld a, (.dmark)  
5bb6 32 a0 fd			ld (debug_mark),a  
5bb9 3a c8 5b			ld a, (.dmark+1)  
5bbc 32 a1 fd			ld (debug_mark+1),a  
5bbf 3a c9 5b			ld a, (.dmark+2)  
5bc2 32 a2 fd			ld (debug_mark+2),a  
5bc5 18 03			jr .pastdmark  
5bc7 ..			.dmark: db "IN."  
5bca f1			.pastdmark: pop af  
5bcb			endm  
# End of macro DMARK
5bcb						CALLMONITOR 
5bcb cd aa fd			call debug_vector  
5bce				endm  
# End of macro CALLMONITOR
5bce					endif 
5bce					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5bce cd 4d 22			call macro_dsp_valuehl 
5bd1				endm 
# End of macro FORTH_DSP_VALUEHL
5bd1			 
5bd1 e5					push hl 
5bd2			 
5bd2					; destroy value TOS 
5bd2			 
5bd2					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5bd2 cd 05 23			call macro_forth_dsp_pop 
5bd5				endm 
# End of macro FORTH_DSP_POP
5bd5			 
5bd5					; one value on hl get other one back 
5bd5			 
5bd5 c1					pop bc 
5bd6			 
5bd6					; do the sub 
5bd6			;		ex de, hl 
5bd6			 
5bd6 ed 68				in l,(c) 
5bd8			 
5bd8					; save it 
5bd8			 
5bd8 26 00				ld h,0 
5bda			 
5bda					; TODO push value back onto stack for another op etc 
5bda			 
5bda cd 48 20				call forth_push_numhl 
5bdd					NEXTW 
5bdd c3 39 24			jp macro_next 
5be0				endm 
# End of macro NEXTW
5be0			.SOUT: 
5be0				CWHEAD .SPIO 32 "OUT" 3 WORD_FLAG_CODE 
5be0 34				db WORD_SYS_CORE+32             
5be1 33 5c			dw .SPIO            
5be3 04				db 3 + 1 
5be4 .. 00			db "OUT",0              
5be8				endm 
# End of macro CWHEAD
5be8			; | OUT ( u1 u2 -- ) Perform Z80 OUT to port u2 sending byte u1 | DONE 
5be8					if DEBUG_FORTH_WORDS_KEY 
5be8						DMARK "OUT" 
5be8 f5				push af  
5be9 3a fd 5b			ld a, (.dmark)  
5bec 32 a0 fd			ld (debug_mark),a  
5bef 3a fe 5b			ld a, (.dmark+1)  
5bf2 32 a1 fd			ld (debug_mark+1),a  
5bf5 3a ff 5b			ld a, (.dmark+2)  
5bf8 32 a2 fd			ld (debug_mark+2),a  
5bfb 18 03			jr .pastdmark  
5bfd ..			.dmark: db "OUT"  
5c00 f1			.pastdmark: pop af  
5c01			endm  
# End of macro DMARK
5c01						CALLMONITOR 
5c01 cd aa fd			call debug_vector  
5c04				endm  
# End of macro CALLMONITOR
5c04					endif 
5c04			 
5c04					; get port 
5c04			 
5c04					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5c04 cd 4d 22			call macro_dsp_valuehl 
5c07				endm 
# End of macro FORTH_DSP_VALUEHL
5c07			 
5c07 e5					push hl 
5c08			 
5c08					; destroy value TOS 
5c08			 
5c08					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5c08 cd 05 23			call macro_forth_dsp_pop 
5c0b				endm 
# End of macro FORTH_DSP_POP
5c0b			 
5c0b					; get byte to send 
5c0b			 
5c0b					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5c0b cd 4d 22			call macro_dsp_valuehl 
5c0e				endm 
# End of macro FORTH_DSP_VALUEHL
5c0e			 
5c0e			;		push hl 
5c0e			 
5c0e					; destroy value TOS 
5c0e			 
5c0e					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5c0e cd 05 23			call macro_forth_dsp_pop 
5c11				endm 
# End of macro FORTH_DSP_POP
5c11			 
5c11					; one value on hl get other one back 
5c11			 
5c11			;		pop hl 
5c11			 
5c11 c1					pop bc 
5c12			 
5c12					if DEBUG_FORTH_WORDS 
5c12						DMARK "OUT" 
5c12 f5				push af  
5c13 3a 27 5c			ld a, (.dmark)  
5c16 32 a0 fd			ld (debug_mark),a  
5c19 3a 28 5c			ld a, (.dmark+1)  
5c1c 32 a1 fd			ld (debug_mark+1),a  
5c1f 3a 29 5c			ld a, (.dmark+2)  
5c22 32 a2 fd			ld (debug_mark+2),a  
5c25 18 03			jr .pastdmark  
5c27 ..			.dmark: db "OUT"  
5c2a f1			.pastdmark: pop af  
5c2b			endm  
# End of macro DMARK
5c2b						CALLMONITOR 
5c2b cd aa fd			call debug_vector  
5c2e				endm  
# End of macro CALLMONITOR
5c2e					endif 
5c2e			 
5c2e ed 69				out (c), l 
5c30			 
5c30					NEXTW 
5c30 c3 39 24			jp macro_next 
5c33				endm 
# End of macro NEXTW
5c33			 
5c33			 
5c33			.SPIO: 
5c33			 
5c33			if STORAGE_SE 
5c33				CWHEAD .SPICEH 61 "SPICEL" 6 WORD_FLAG_CODE 
5c33 51				db WORD_SYS_CORE+61             
5c34 44 5c			dw .SPICEH            
5c36 07				db 6 + 1 
5c37 .. 00			db "SPICEL",0              
5c3e				endm 
# End of macro CWHEAD
5c3e			; | SPICEL ( -- ) Set SPI CE low for the currently selected device |  DONE 
5c3e			 
5c3e cd 22 02				call spi_ce_low 
5c41			    NEXTW 
5c41 c3 39 24			jp macro_next 
5c44				endm 
# End of macro NEXTW
5c44			 
5c44			.SPICEH: 
5c44				CWHEAD .SPIOb 61 "SPICEH" 6 WORD_FLAG_CODE 
5c44 51				db WORD_SYS_CORE+61             
5c45 55 5c			dw .SPIOb            
5c47 07				db 6 + 1 
5c48 .. 00			db "SPICEH",0              
5c4f				endm 
# End of macro CWHEAD
5c4f			; | SPICEH ( -- ) Set SPI CE high for the currently selected device |  DONE 
5c4f			 
5c4f cd 11 02				call spi_ce_high 
5c52			    NEXTW 
5c52 c3 39 24			jp macro_next 
5c55				endm 
# End of macro NEXTW
5c55			 
5c55			 
5c55			.SPIOb: 
5c55			 
5c55				CWHEAD .SPII 61 "SPIO" 4 WORD_FLAG_CODE 
5c55 51				db WORD_SYS_CORE+61             
5c56 87 5c			dw .SPII            
5c58 05				db 4 + 1 
5c59 .. 00			db "SPIO",0              
5c5e				endm 
# End of macro CWHEAD
5c5e			; | SPIO ( u1 -- ) Send byte u1 to SPI  |  DONE 
5c5e			 
5c5e					if DEBUG_FORTH_WORDS_KEY 
5c5e						DMARK "SPo" 
5c5e f5				push af  
5c5f 3a 73 5c			ld a, (.dmark)  
5c62 32 a0 fd			ld (debug_mark),a  
5c65 3a 74 5c			ld a, (.dmark+1)  
5c68 32 a1 fd			ld (debug_mark+1),a  
5c6b 3a 75 5c			ld a, (.dmark+2)  
5c6e 32 a2 fd			ld (debug_mark+2),a  
5c71 18 03			jr .pastdmark  
5c73 ..			.dmark: db "SPo"  
5c76 f1			.pastdmark: pop af  
5c77			endm  
# End of macro DMARK
5c77						CALLMONITOR 
5c77 cd aa fd			call debug_vector  
5c7a				endm  
# End of macro CALLMONITOR
5c7a					endif 
5c7a					; get port 
5c7a			 
5c7a			 
5c7a					; get byte to send 
5c7a			 
5c7a					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5c7a cd 4d 22			call macro_dsp_valuehl 
5c7d				endm 
# End of macro FORTH_DSP_VALUEHL
5c7d			 
5c7d			;		push hl    ; u1  
5c7d			 
5c7d					; destroy value TOS 
5c7d			 
5c7d					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5c7d cd 05 23			call macro_forth_dsp_pop 
5c80				endm 
# End of macro FORTH_DSP_POP
5c80			 
5c80					; one value on hl get other one back 
5c80			 
5c80			;		pop hl   ; u2 - addr 
5c80			 
5c80					; TODO Send SPI byte 
5c80			 
5c80			;		push hl 
5c80			;		call spi_ce_low 
5c80			;		pop hl 
5c80 7d					ld a, l 
5c81 cd 10 01				call spi_send_byte 
5c84			;		call spi_ce_high 
5c84			 
5c84					NEXTW 
5c84 c3 39 24			jp macro_next 
5c87				endm 
# End of macro NEXTW
5c87			 
5c87			.SPII: 
5c87				CWHEAD .SESEL 62 "SPII" 5 WORD_FLAG_CODE 
5c87 52				db WORD_SYS_CORE+62             
5c88 f0 5c			dw .SESEL            
5c8a 06				db 5 + 1 
5c8b .. 00			db "SPII",0              
5c90				endm 
# End of macro CWHEAD
5c90			; | SPII ( -- u1 ) Get a byte from SPI  | DONE 
5c90					if DEBUG_FORTH_WORDS_KEY 
5c90						DMARK "SPi" 
5c90 f5				push af  
5c91 3a a5 5c			ld a, (.dmark)  
5c94 32 a0 fd			ld (debug_mark),a  
5c97 3a a6 5c			ld a, (.dmark+1)  
5c9a 32 a1 fd			ld (debug_mark+1),a  
5c9d 3a a7 5c			ld a, (.dmark+2)  
5ca0 32 a2 fd			ld (debug_mark+2),a  
5ca3 18 03			jr .pastdmark  
5ca5 ..			.dmark: db "SPi"  
5ca8 f1			.pastdmark: pop af  
5ca9			endm  
# End of macro DMARK
5ca9						CALLMONITOR 
5ca9 cd aa fd			call debug_vector  
5cac				endm  
# End of macro CALLMONITOR
5cac					endif 
5cac			 
5cac					; TODO Get SPI byte 
5cac			 
5cac cd 37 01				call spi_read_byte 
5caf			 
5caf					if DEBUG_FORTH_WORDS 
5caf						DMARK "Si2" 
5caf f5				push af  
5cb0 3a c4 5c			ld a, (.dmark)  
5cb3 32 a0 fd			ld (debug_mark),a  
5cb6 3a c5 5c			ld a, (.dmark+1)  
5cb9 32 a1 fd			ld (debug_mark+1),a  
5cbc 3a c6 5c			ld a, (.dmark+2)  
5cbf 32 a2 fd			ld (debug_mark+2),a  
5cc2 18 03			jr .pastdmark  
5cc4 ..			.dmark: db "Si2"  
5cc7 f1			.pastdmark: pop af  
5cc8			endm  
# End of macro DMARK
5cc8						CALLMONITOR 
5cc8 cd aa fd			call debug_vector  
5ccb				endm  
# End of macro CALLMONITOR
5ccb					endif 
5ccb 26 00				ld h, 0 
5ccd 6f					ld l, a 
5cce					if DEBUG_FORTH_WORDS 
5cce						DMARK "Si3" 
5cce f5				push af  
5ccf 3a e3 5c			ld a, (.dmark)  
5cd2 32 a0 fd			ld (debug_mark),a  
5cd5 3a e4 5c			ld a, (.dmark+1)  
5cd8 32 a1 fd			ld (debug_mark+1),a  
5cdb 3a e5 5c			ld a, (.dmark+2)  
5cde 32 a2 fd			ld (debug_mark+2),a  
5ce1 18 03			jr .pastdmark  
5ce3 ..			.dmark: db "Si3"  
5ce6 f1			.pastdmark: pop af  
5ce7			endm  
# End of macro DMARK
5ce7						CALLMONITOR 
5ce7 cd aa fd			call debug_vector  
5cea				endm  
# End of macro CALLMONITOR
5cea					endif 
5cea cd 48 20				call forth_push_numhl 
5ced			 
5ced					NEXTW 
5ced c3 39 24			jp macro_next 
5cf0				endm 
# End of macro NEXTW
5cf0			 
5cf0			 
5cf0			 
5cf0			.SESEL: 
5cf0				CWHEAD .CARTDEV 82 "BANK" 4 WORD_FLAG_CODE 
5cf0 66				db WORD_SYS_CORE+82             
5cf1 99 5d			dw .CARTDEV            
5cf3 05				db 4 + 1 
5cf4 .. 00			db "BANK",0              
5cf9				endm 
# End of macro CWHEAD
5cf9			; | BANK ( u1 -- ) Select Serial EEPROM Bank Device at bank address u1 1-5 (disables CARTDEV). Set to zero to disable storage. | DONE 
5cf9					if DEBUG_FORTH_WORDS_KEY 
5cf9						DMARK "BNK" 
5cf9 f5				push af  
5cfa 3a 0e 5d			ld a, (.dmark)  
5cfd 32 a0 fd			ld (debug_mark),a  
5d00 3a 0f 5d			ld a, (.dmark+1)  
5d03 32 a1 fd			ld (debug_mark+1),a  
5d06 3a 10 5d			ld a, (.dmark+2)  
5d09 32 a2 fd			ld (debug_mark+2),a  
5d0c 18 03			jr .pastdmark  
5d0e ..			.dmark: db "BNK"  
5d11 f1			.pastdmark: pop af  
5d12			endm  
# End of macro DMARK
5d12						CALLMONITOR 
5d12 cd aa fd			call debug_vector  
5d15				endm  
# End of macro CALLMONITOR
5d15					endif 
5d15			 
5d15 3e ff				ld a, 255 
5d17 32 98 f9				ld (spi_cartdev), a 
5d1a			 
5d1a					; get bank 
5d1a			 
5d1a					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5d1a cd 4d 22			call macro_dsp_valuehl 
5d1d				endm 
# End of macro FORTH_DSP_VALUEHL
5d1d			 
5d1d			;		push hl 
5d1d			 
5d1d					; destroy value TOS 
5d1d			 
5d1d					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5d1d cd 05 23			call macro_forth_dsp_pop 
5d20				endm 
# End of macro FORTH_DSP_POP
5d20			 
5d20					; one value on hl get other one back 
5d20			 
5d20			;		pop hl 
5d20			 
5d20			 
5d20 0e ff				ld c, SPI_CE_HIGH 
5d22 06 30				ld b, '0'    ; human readable bank number 
5d24			 
5d24 7d					ld a, l 
5d25			 
5d25					if DEBUG_FORTH_WORDS 
5d25						DMARK "BNK" 
5d25 f5				push af  
5d26 3a 3a 5d			ld a, (.dmark)  
5d29 32 a0 fd			ld (debug_mark),a  
5d2c 3a 3b 5d			ld a, (.dmark+1)  
5d2f 32 a1 fd			ld (debug_mark+1),a  
5d32 3a 3c 5d			ld a, (.dmark+2)  
5d35 32 a2 fd			ld (debug_mark+2),a  
5d38 18 03			jr .pastdmark  
5d3a ..			.dmark: db "BNK"  
5d3d f1			.pastdmark: pop af  
5d3e			endm  
# End of macro DMARK
5d3e						CALLMONITOR 
5d3e cd aa fd			call debug_vector  
5d41				endm  
# End of macro CALLMONITOR
5d41					endif 
5d41			 
5d41					; active low 
5d41			 
5d41 fe 00				cp 0 
5d43 28 28				jr z, .bset 
5d45 fe 01				cp 1 
5d47 20 04				jr nz, .b2 
5d49 cb 81				res 0, c 
5d4b 06 31				ld b, '1'    ; human readable bank number 
5d4d fe 02		.b2:		cp 2 
5d4f 20 04				jr nz, .b3 
5d51 cb 89				res 1, c 
5d53 06 32				ld b, '2'    ; human readable bank number 
5d55 fe 03		.b3:		cp 3 
5d57 20 04				jr nz, .b4 
5d59 cb 91				res 2, c 
5d5b 06 33				ld b, '3'    ; human readable bank number 
5d5d fe 04		.b4:		cp 4 
5d5f 20 04				jr nz, .b5 
5d61 cb 99				res 3, c 
5d63 06 34				ld b, '4'    ; human readable bank number 
5d65 fe 05		.b5:		cp 5 
5d67 20 04				jr nz, .bset 
5d69 cb a1				res 4, c 
5d6b 06 35				ld b, '5'    ; human readable bank number 
5d6d			 
5d6d			.bset: 
5d6d 79					ld a, c 
5d6e 32 95 f9				ld (spi_device),a 
5d71 78					ld a, b 
5d72 32 94 f9				ld (spi_device_id),a 
5d75					if DEBUG_FORTH_WORDS 
5d75						DMARK "BN2" 
5d75 f5				push af  
5d76 3a 8a 5d			ld a, (.dmark)  
5d79 32 a0 fd			ld (debug_mark),a  
5d7c 3a 8b 5d			ld a, (.dmark+1)  
5d7f 32 a1 fd			ld (debug_mark+1),a  
5d82 3a 8c 5d			ld a, (.dmark+2)  
5d85 32 a2 fd			ld (debug_mark+2),a  
5d88 18 03			jr .pastdmark  
5d8a ..			.dmark: db "BN2"  
5d8d f1			.pastdmark: pop af  
5d8e			endm  
# End of macro DMARK
5d8e						CALLMONITOR 
5d8e cd aa fd			call debug_vector  
5d91				endm  
# End of macro CALLMONITOR
5d91					endif 
5d91			 
5d91					; set default SPI clk pulse time as disabled for BANK use 
5d91			 
5d91 3e 00				ld a, 0 
5d93 32 99 f9				ld (spi_clktime), a 
5d96			 
5d96					NEXTW 
5d96 c3 39 24			jp macro_next 
5d99				endm 
# End of macro NEXTW
5d99			 
5d99			.CARTDEV: 
5d99				CWHEAD .ENDDEVICE 82 "CARTDEV" 7 WORD_FLAG_CODE 
5d99 66				db WORD_SYS_CORE+82             
5d9a 47 5e			dw .ENDDEVICE            
5d9c 08				db 7 + 1 
5d9d .. 00			db "CARTDEV",0              
5da5				endm 
# End of macro CWHEAD
5da5			; | CARTDEV ( u1 -- ) Select cart device 1-8 (Disables BANK). Set to zero to disable devices. |  DONE 
5da5					if DEBUG_FORTH_WORDS_KEY 
5da5						DMARK "CDV" 
5da5 f5				push af  
5da6 3a ba 5d			ld a, (.dmark)  
5da9 32 a0 fd			ld (debug_mark),a  
5dac 3a bb 5d			ld a, (.dmark+1)  
5daf 32 a1 fd			ld (debug_mark+1),a  
5db2 3a bc 5d			ld a, (.dmark+2)  
5db5 32 a2 fd			ld (debug_mark+2),a  
5db8 18 03			jr .pastdmark  
5dba ..			.dmark: db "CDV"  
5dbd f1			.pastdmark: pop af  
5dbe			endm  
# End of macro DMARK
5dbe						CALLMONITOR 
5dbe cd aa fd			call debug_vector  
5dc1				endm  
# End of macro CALLMONITOR
5dc1					endif 
5dc1			 
5dc1					; disable se storage bank selection 
5dc1			 
5dc1 3e ff				ld a, SPI_CE_HIGH		; ce high 
5dc3 32 95 f9				ld (spi_device), a 
5dc6			 
5dc6					; get bank 
5dc6			 
5dc6					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5dc6 cd 4d 22			call macro_dsp_valuehl 
5dc9				endm 
# End of macro FORTH_DSP_VALUEHL
5dc9			 
5dc9			;		push hl 
5dc9			 
5dc9					; destroy value TOS 
5dc9			 
5dc9					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5dc9 cd 05 23			call macro_forth_dsp_pop 
5dcc				endm 
# End of macro FORTH_DSP_POP
5dcc			 
5dcc					; one value on hl get other one back 
5dcc			 
5dcc			;		pop hl 
5dcc			 
5dcc					; active low 
5dcc			 
5dcc 0e ff				ld c, 255 
5dce			 
5dce 7d					ld a, l 
5dcf					if DEBUG_FORTH_WORDS 
5dcf						DMARK "CDV" 
5dcf f5				push af  
5dd0 3a e4 5d			ld a, (.dmark)  
5dd3 32 a0 fd			ld (debug_mark),a  
5dd6 3a e5 5d			ld a, (.dmark+1)  
5dd9 32 a1 fd			ld (debug_mark+1),a  
5ddc 3a e6 5d			ld a, (.dmark+2)  
5ddf 32 a2 fd			ld (debug_mark+2),a  
5de2 18 03			jr .pastdmark  
5de4 ..			.dmark: db "CDV"  
5de7 f1			.pastdmark: pop af  
5de8			endm  
# End of macro DMARK
5de8						CALLMONITOR 
5de8 cd aa fd			call debug_vector  
5deb				endm  
# End of macro CALLMONITOR
5deb					endif 
5deb fe 00				cp 0 
5ded 28 30				jr z, .cset 
5def fe 01				cp 1 
5df1 20 02				jr nz, .c2 
5df3 cb 81				res 0, c 
5df5 fe 02		.c2:		cp 2 
5df7 20 02				jr nz, .c3 
5df9 cb 89				res 1, c 
5dfb fe 03		.c3:		cp 3 
5dfd 20 02				jr nz, .c4 
5dff cb 91				res 2, c 
5e01 fe 04		.c4:		cp 4 
5e03 20 02				jr nz, .c5 
5e05 cb 99				res 3, c 
5e07 fe 05		.c5:		cp 5 
5e09 20 02				jr nz, .c6 
5e0b cb a1				res 4, c 
5e0d fe 06		.c6:		cp 6 
5e0f 20 02				jr nz, .c7 
5e11 cb a9				res 5, c 
5e13 fe 07		.c7:		cp 7 
5e15 20 02				jr nz, .c8 
5e17 cb b1				res 6, c 
5e19 fe 08		.c8:		cp 8 
5e1b 20 02				jr nz, .cset 
5e1d cb b9				res 7, c 
5e1f 79			.cset:		ld a, c 
5e20 32 98 f9				ld (spi_cartdev),a 
5e23			 
5e23					if DEBUG_FORTH_WORDS 
5e23						DMARK "CD2" 
5e23 f5				push af  
5e24 3a 38 5e			ld a, (.dmark)  
5e27 32 a0 fd			ld (debug_mark),a  
5e2a 3a 39 5e			ld a, (.dmark+1)  
5e2d 32 a1 fd			ld (debug_mark+1),a  
5e30 3a 3a 5e			ld a, (.dmark+2)  
5e33 32 a2 fd			ld (debug_mark+2),a  
5e36 18 03			jr .pastdmark  
5e38 ..			.dmark: db "CD2"  
5e3b f1			.pastdmark: pop af  
5e3c			endm  
# End of macro DMARK
5e3c						CALLMONITOR 
5e3c cd aa fd			call debug_vector  
5e3f				endm  
# End of macro CALLMONITOR
5e3f					endif 
5e3f			 
5e3f					; set default SPI clk pulse time as 10ms for CARTDEV use 
5e3f			 
5e3f 3e 0a				ld a, $0a 
5e41 32 99 f9				ld (spi_clktime), a 
5e44					NEXTW 
5e44 c3 39 24			jp macro_next 
5e47				endm 
# End of macro NEXTW
5e47			endif 
5e47			 
5e47			.ENDDEVICE: 
5e47			; eof 
5e47			 
# End of file forth_words_device.asm
5e47			 
5e47			; var handler 
5e47			 
5e47			 
5e47			.VARS: 
5e47				CWHEAD .V0 99 "VAR" 3 WORD_FLAG_CODE 
5e47 77				db WORD_SYS_CORE+99             
5e48 f8 5e			dw .V0            
5e4a 04				db 3 + 1 
5e4b .. 00			db "VAR",0              
5e4f				endm 
# End of macro CWHEAD
5e4f			;| VAR ( u1 -- )  Get the address of the variable referenced on TOS  | TO TEST 
5e4f			;| 
5e4f			;| The variable name should consist of a single letter. e.g. "a" 
5e4f			;! If a full string is passed then only the first char is looked at 
5e4f			;| Any other char could exceed bounds checks!  
5e4f			 
5e4f					if DEBUG_FORTH_WORDS_KEY 
5e4f						DMARK "VAR" 
5e4f f5				push af  
5e50 3a 64 5e			ld a, (.dmark)  
5e53 32 a0 fd			ld (debug_mark),a  
5e56 3a 65 5e			ld a, (.dmark+1)  
5e59 32 a1 fd			ld (debug_mark+1),a  
5e5c 3a 66 5e			ld a, (.dmark+2)  
5e5f 32 a2 fd			ld (debug_mark+2),a  
5e62 18 03			jr .pastdmark  
5e64 ..			.dmark: db "VAR"  
5e67 f1			.pastdmark: pop af  
5e68			endm  
# End of macro DMARK
5e68						CALLMONITOR 
5e68 cd aa fd			call debug_vector  
5e6b				endm  
# End of macro CALLMONITOR
5e6b					endif 
5e6b			 
5e6b					FORTH_DSP_VALUEHL 
5e6b cd 4d 22			call macro_dsp_valuehl 
5e6e				endm 
# End of macro FORTH_DSP_VALUEHL
5e6e			 
5e6e 7e					ld a, (hl)    ; get first char on of the string 
5e6f			 
5e6f			 
5e6f					if DEBUG_FORTH_WORDS 
5e6f						DMARK "VR1" 
5e6f f5				push af  
5e70 3a 84 5e			ld a, (.dmark)  
5e73 32 a0 fd			ld (debug_mark),a  
5e76 3a 85 5e			ld a, (.dmark+1)  
5e79 32 a1 fd			ld (debug_mark+1),a  
5e7c 3a 86 5e			ld a, (.dmark+2)  
5e7f 32 a2 fd			ld (debug_mark+2),a  
5e82 18 03			jr .pastdmark  
5e84 ..			.dmark: db "VR1"  
5e87 f1			.pastdmark: pop af  
5e88			endm  
# End of macro DMARK
5e88						CALLMONITOR 
5e88 cd aa fd			call debug_vector  
5e8b				endm  
# End of macro CALLMONITOR
5e8b					endif 
5e8b					 
5e8b f5					push af	 
5e8c					FORTH_DSP_POP 
5e8c cd 05 23			call macro_forth_dsp_pop 
5e8f				endm 
# End of macro FORTH_DSP_POP
5e8f f1					pop af 
5e90			 
5e90					; convert to upper 
5e90			 
5e90 cd 53 12				call to_upper 
5e93					if DEBUG_FORTH_WORDS 
5e93						DMARK "Vaa" 
5e93 f5				push af  
5e94 3a a8 5e			ld a, (.dmark)  
5e97 32 a0 fd			ld (debug_mark),a  
5e9a 3a a9 5e			ld a, (.dmark+1)  
5e9d 32 a1 fd			ld (debug_mark+1),a  
5ea0 3a aa 5e			ld a, (.dmark+2)  
5ea3 32 a2 fd			ld (debug_mark+2),a  
5ea6 18 03			jr .pastdmark  
5ea8 ..			.dmark: db "Vaa"  
5eab f1			.pastdmark: pop af  
5eac			endm  
# End of macro DMARK
5eac						CALLMONITOR 
5eac cd aa fd			call debug_vector  
5eaf				endm  
# End of macro CALLMONITOR
5eaf					endif 
5eaf 06 41				ld b, 'A' 
5eb1 90					sub b			; set offset 
5eb2					if DEBUG_FORTH_WORDS 
5eb2						DMARK "Vbb" 
5eb2 f5				push af  
5eb3 3a c7 5e			ld a, (.dmark)  
5eb6 32 a0 fd			ld (debug_mark),a  
5eb9 3a c8 5e			ld a, (.dmark+1)  
5ebc 32 a1 fd			ld (debug_mark+1),a  
5ebf 3a c9 5e			ld a, (.dmark+2)  
5ec2 32 a2 fd			ld (debug_mark+2),a  
5ec5 18 03			jr .pastdmark  
5ec7 ..			.dmark: db "Vbb"  
5eca f1			.pastdmark: pop af  
5ecb			endm  
# End of macro DMARK
5ecb						CALLMONITOR 
5ecb cd aa fd			call debug_vector  
5ece				endm  
# End of macro CALLMONITOR
5ece					endif 
5ece cb 27				sla a  
5ed0				 
5ed0					 
5ed0					if DEBUG_FORTH_WORDS 
5ed0						DMARK "VR2" 
5ed0 f5				push af  
5ed1 3a e5 5e			ld a, (.dmark)  
5ed4 32 a0 fd			ld (debug_mark),a  
5ed7 3a e6 5e			ld a, (.dmark+1)  
5eda 32 a1 fd			ld (debug_mark+1),a  
5edd 3a e7 5e			ld a, (.dmark+2)  
5ee0 32 a2 fd			ld (debug_mark+2),a  
5ee3 18 03			jr .pastdmark  
5ee5 ..			.dmark: db "VR2"  
5ee8 f1			.pastdmark: pop af  
5ee9			endm  
# End of macro DMARK
5ee9						CALLMONITOR 
5ee9 cd aa fd			call debug_vector  
5eec				endm  
# End of macro CALLMONITOR
5eec					endif 
5eec			 
5eec 21 29 f9				ld hl, cli_var_array2 
5eef cd de 0f				call addatohl 
5ef2 cd 48 20				call forth_push_numhl 
5ef5			 
5ef5			 
5ef5				       NEXTW 
5ef5 c3 39 24			jp macro_next 
5ef8				endm 
# End of macro NEXTW
5ef8			.V0: 
5ef8				CWHEAD .V0Q 100 "V0!" 3 WORD_FLAG_CODE 
5ef8 78				db WORD_SYS_CORE+100             
5ef9 10 5f			dw .V0Q            
5efb 04				db 3 + 1 
5efc .. 00			db "V0!",0              
5f00				endm 
# End of macro CWHEAD
5f00			;| V0! ( u1 -- )  Store value to v0  | DONE 
5f00			 
5f00					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5f00 cd 4d 22			call macro_dsp_valuehl 
5f03				endm 
# End of macro FORTH_DSP_VALUEHL
5f03			 
5f03 11 5d f9				ld de, cli_var_array 
5f06			 
5f06 eb					ex de, hl 
5f07 73					ld (hl), e 
5f08 23					inc hl 
5f09 72					ld (hl), d 
5f0a			 
5f0a					; destroy value TOS 
5f0a			 
5f0a					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5f0a cd 05 23			call macro_forth_dsp_pop 
5f0d				endm 
# End of macro FORTH_DSP_POP
5f0d			 
5f0d				       NEXTW 
5f0d c3 39 24			jp macro_next 
5f10				endm 
# End of macro NEXTW
5f10			.V0Q: 
5f10				CWHEAD .V1S 101 "V0@" 3 WORD_FLAG_CODE 
5f10 79				db WORD_SYS_CORE+101             
5f11 21 5f			dw .V1S            
5f13 04				db 3 + 1 
5f14 .. 00			db "V0@",0              
5f18				endm 
# End of macro CWHEAD
5f18			;| V0@ ( --u )  Put value of v0 onto stack | DONE 
5f18 2a 5d f9				ld hl, (cli_var_array) 
5f1b cd 48 20				call forth_push_numhl 
5f1e			 
5f1e				       NEXTW 
5f1e c3 39 24			jp macro_next 
5f21				endm 
# End of macro NEXTW
5f21			.V1S: 
5f21				CWHEAD .V1Q 102 "V1!" 3 WORD_FLAG_CODE 
5f21 7a				db WORD_SYS_CORE+102             
5f22 39 5f			dw .V1Q            
5f24 04				db 3 + 1 
5f25 .. 00			db "V1!",0              
5f29				endm 
# End of macro CWHEAD
5f29			;| V1! ( u1 -- )  Store value to v1 | DONE 
5f29					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5f29 cd 4d 22			call macro_dsp_valuehl 
5f2c				endm 
# End of macro FORTH_DSP_VALUEHL
5f2c			 
5f2c 11 5f f9				ld de, cli_var_array+2 
5f2f				 
5f2f eb					ex de, hl 
5f30 73					ld (hl), e 
5f31 23					inc hl 
5f32 72					ld (hl), d 
5f33			 
5f33					; destroy value TOS 
5f33			 
5f33					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5f33 cd 05 23			call macro_forth_dsp_pop 
5f36				endm 
# End of macro FORTH_DSP_POP
5f36				       NEXTW 
5f36 c3 39 24			jp macro_next 
5f39				endm 
# End of macro NEXTW
5f39			.V1Q: 
5f39				CWHEAD .V2S 103 "V1@" 3 WORD_FLAG_CODE 
5f39 7b				db WORD_SYS_CORE+103             
5f3a 4a 5f			dw .V2S            
5f3c 04				db 3 + 1 
5f3d .. 00			db "V1@",0              
5f41				endm 
# End of macro CWHEAD
5f41			;| V1@ ( --u )  Put value of v1 onto stack | DONE 
5f41 2a 5f f9				ld hl, (cli_var_array+2) 
5f44 cd 48 20				call forth_push_numhl 
5f47				       NEXTW 
5f47 c3 39 24			jp macro_next 
5f4a				endm 
# End of macro NEXTW
5f4a			.V2S: 
5f4a				CWHEAD .V2Q 104 "V2!" 3 WORD_FLAG_CODE 
5f4a 7c				db WORD_SYS_CORE+104             
5f4b 62 5f			dw .V2Q            
5f4d 04				db 3 + 1 
5f4e .. 00			db "V2!",0              
5f52				endm 
# End of macro CWHEAD
5f52			;| V2! ( u1 -- )  Store value to v2 | DONE 
5f52					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5f52 cd 4d 22			call macro_dsp_valuehl 
5f55				endm 
# End of macro FORTH_DSP_VALUEHL
5f55			 
5f55 11 61 f9				ld de, cli_var_array+4 
5f58				 
5f58 eb					ex de, hl 
5f59 73					ld (hl), e 
5f5a 23					inc hl 
5f5b 72					ld (hl), d 
5f5c			 
5f5c					; destroy value TOS 
5f5c			 
5f5c					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5f5c cd 05 23			call macro_forth_dsp_pop 
5f5f				endm 
# End of macro FORTH_DSP_POP
5f5f				       NEXTW 
5f5f c3 39 24			jp macro_next 
5f62				endm 
# End of macro NEXTW
5f62			.V2Q: 
5f62				CWHEAD .V3S 105 "V2@" 3 WORD_FLAG_CODE 
5f62 7d				db WORD_SYS_CORE+105             
5f63 73 5f			dw .V3S            
5f65 04				db 3 + 1 
5f66 .. 00			db "V2@",0              
5f6a				endm 
# End of macro CWHEAD
5f6a			;| V2@ ( --u )  Put value of v2 onto stack | DONE 
5f6a 2a 61 f9				ld hl, (cli_var_array+4) 
5f6d cd 48 20				call forth_push_numhl 
5f70				       NEXTW 
5f70 c3 39 24			jp macro_next 
5f73				endm 
# End of macro NEXTW
5f73			.V3S: 
5f73				CWHEAD .V3Q 104 "V3!" 3 WORD_FLAG_CODE 
5f73 7c				db WORD_SYS_CORE+104             
5f74 8b 5f			dw .V3Q            
5f76 04				db 3 + 1 
5f77 .. 00			db "V3!",0              
5f7b				endm 
# End of macro CWHEAD
5f7b			;| V3! ( u1 -- )  Store value to v3 | DONE 
5f7b					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5f7b cd 4d 22			call macro_dsp_valuehl 
5f7e				endm 
# End of macro FORTH_DSP_VALUEHL
5f7e			 
5f7e 11 63 f9				ld de, cli_var_array+6 
5f81				 
5f81 eb					ex de, hl 
5f82 73					ld (hl), e 
5f83 23					inc hl 
5f84 72					ld (hl), d 
5f85			 
5f85					; destroy value TOS 
5f85			 
5f85					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5f85 cd 05 23			call macro_forth_dsp_pop 
5f88				endm 
# End of macro FORTH_DSP_POP
5f88				       NEXTW 
5f88 c3 39 24			jp macro_next 
5f8b				endm 
# End of macro NEXTW
5f8b			.V3Q: 
5f8b				CWHEAD .END 105 "V3@" 3 WORD_FLAG_CODE 
5f8b 7d				db WORD_SYS_CORE+105             
5f8c 9c 5f			dw .END            
5f8e 04				db 3 + 1 
5f8f .. 00			db "V3@",0              
5f93				endm 
# End of macro CWHEAD
5f93			;| V3@ ( --u )  Put value of v3 onto stack | DONE 
5f93 2a 63 f9				ld hl, (cli_var_array+6) 
5f96 cd 48 20				call forth_push_numhl 
5f99				       NEXTW 
5f99 c3 39 24			jp macro_next 
5f9c				endm 
# End of macro NEXTW
5f9c			 
5f9c			 
5f9c			 
5f9c			 
5f9c			 
5f9c			; end of dict marker 
5f9c			 
5f9c 00			.END:    db WORD_SYS_END 
5f9d 00 00			dw 0 
5f9f 00				db 0 
5fa0			 
5fa0			; use to jp here for user dict words to save on macro expansion  
5fa0			 
5fa0			user_dict_next: 
5fa0				NEXTW 
5fa0 c3 39 24			jp macro_next 
5fa3				endm 
# End of macro NEXTW
5fa3			 
5fa3			 
5fa3			user_exec: 
5fa3				;    ld hl, <word code> 
5fa3				;    FORTH_RSP_NEXT - call macro_forth_rsp_next 
5fa3				;    call forthexec 
5fa3				;    jp user_dict_next   (NEXT) 
5fa3			        ;    <word code bytes> 
5fa3 eb				ex de, hl 
5fa4 2a f7 f3			ld hl,(os_tok_ptr) 
5fa7				 
5fa7				FORTH_RSP_NEXT 
5fa7 cd ef 1f			call macro_forth_rsp_next 
5faa				endm 
# End of macro FORTH_RSP_NEXT
5faa			 
5faa			if DEBUG_FORTH_UWORD 
5faa						DMARK "UEX" 
5faa f5				push af  
5fab 3a bf 5f			ld a, (.dmark)  
5fae 32 a0 fd			ld (debug_mark),a  
5fb1 3a c0 5f			ld a, (.dmark+1)  
5fb4 32 a1 fd			ld (debug_mark+1),a  
5fb7 3a c1 5f			ld a, (.dmark+2)  
5fba 32 a2 fd			ld (debug_mark+2),a  
5fbd 18 03			jr .pastdmark  
5fbf ..			.dmark: db "UEX"  
5fc2 f1			.pastdmark: pop af  
5fc3			endm  
# End of macro DMARK
5fc3				CALLMONITOR 
5fc3 cd aa fd			call debug_vector  
5fc6				endm  
# End of macro CALLMONITOR
5fc6			endif 
5fc6			 
5fc6			 
5fc6			 
5fc6 eb				ex de, hl 
5fc7 22 f7 f3			ld (os_tok_ptr), hl 
5fca				 
5fca				; Don't use next - Skips the first word in uword. 
5fca			 
5fca c3 c2 24			jp exec1 
5fcd			;	NEXT 
5fcd			 
5fcd			 
5fcd			; eof 
# End of file forth_wordsv4.asm
5fcd			endif 
5fcd			;;;;;;;;;;;;;; Debug code 
5fcd			 
5fcd			 
5fcd			;if DEBUG_FORTH_PARSE 
5fcd .. 00		.nowordfound: db "No match",0 
5fd6 .. 00		.compword:	db "Comparing word ",0 
5fe6 .. 00		.nextwordat:	db "Next word at",0 
5ff3 .. 00		.charmatch:	db "Char match",0 
5ffe			;endif 
5ffe			if DEBUG_FORTH_JP 
5ffe			.foundword:	db "Word match. Exec..",0 
5ffe			endif 
5ffe			;if DEBUG_FORTH_PUSH 
5ffe .. 00		.enddict:	db "Dict end. Push.",0 
600e .. 00		.push_str:	db "Pushing string",0 
601d .. 00		.push_num:	db "Pushing number",0 
602c .. 00		.data_sp:	db "SP:",0 
6030 .. 00		.wordinhl:	db "Word in HL (2/0):",0 
6042 .. 00		.wordinde:	db "Word in DE (3/0):",0 
6054 .. 00		.wordinbc:	db "Word in BC (4/0):",0 
6066			;endif 
6066			;if DEBUG_FORTH_MALLOC 
6066 .. 00		.push_malloc:	db "Malloc address",0 
6075			;endif 
6075			 
6075			 
6075			 
6075			; display malloc address and current data stack pointer  
6075			 
6075			malloc_error: 
6075 d5				push de 
6076 f5				push af 
6077 e5				push hl 
6078 cd aa 0d			call clear_display 
607b 11 9b 60			ld de, .mallocerr 
607e 3e 00			ld a,0 
6080			;	ld de,os_word_scratch 
6080 cd bd 0d			call str_at_display 
6083 3e 11			ld a, display_row_1+17 
6085 11 a0 fd			ld de, debug_mark 
6088 cd bd 0d			call str_at_display 
608b cd cd 0d			call update_display 
608e				;call break_point_state 
608e cd 80 75			call cin_wait 
6091			 
6091			;	ld a, ' ' 
6091			;	ld (os_view_disable), a 
6091 cd 49 19			call bp_on 
6094 e1				pop hl 
6095 f1				pop af 
6096 d1				pop de	 
6097				CALLMONITOR 
6097 cd aa fd			call debug_vector  
609a				endm  
# End of macro CALLMONITOR
609a c9				ret 
609b			 
609b .. 00		.mallocerr: 	db "Malloc Error",0 
60a8			;if DEBUG_FORTH_PUSH 
60a8			display_data_sp: 
60a8 f5				push af 
60a9			 
60a9				; see if disabled 
60a9			 
60a9			 
60a9 3a aa fd			ld a, (debug_vector) 
60ac fe c9			cp $C9  ; RET 
60ae				;ld a, (os_view_disable) 
60ae				;cp '*' 
60ae 28 67			jr z, .skipdsp 
60b0			 
60b0 e5				push hl 
60b1 e5				push hl 
60b2 e5			push hl 
60b3 cd aa 0d			call clear_display 
60b6 e1			pop hl 
60b7 7c				ld a,h 
60b8 21 fb f3			ld hl, os_word_scratch 
60bb cd e7 11			call hexout 
60be e1				pop hl 
60bf 7d				ld a,l 
60c0 21 fd f3			ld hl, os_word_scratch+2 
60c3 cd e7 11			call hexout 
60c6 21 ff f3			ld hl, os_word_scratch+4 
60c9 3e 00			ld a,0 
60cb 77				ld (hl),a 
60cc 11 fb f3			ld de,os_word_scratch 
60cf 3e 28				ld a, display_row_2 
60d1 cd bd 0d				call str_at_display 
60d4 11 30 60			ld de, .wordinhl 
60d7 3e 00			ld a, display_row_1 
60d9			 
60d9 cd bd 0d				call str_at_display 
60dc 11 a0 fd			ld de, debug_mark 
60df 3e 11			ld a, display_row_1+17 
60e1			 
60e1 cd bd 0d				call str_at_display 
60e4			 
60e4				; display current data stack pointer 
60e4 11 2c 60			ld de,.data_sp 
60e7 3e 30				ld a, display_row_2 + 8 
60e9 cd bd 0d				call str_at_display 
60ec			 
60ec 2a 23 f9			ld hl,(cli_data_sp) 
60ef e5				push hl 
60f0 7c				ld a,h 
60f1 21 fb f3			ld hl, os_word_scratch 
60f4 cd e7 11			call hexout 
60f7 e1				pop hl 
60f8 7d				ld a,l 
60f9 21 fd f3			ld hl, os_word_scratch+2 
60fc cd e7 11			call hexout 
60ff 21 ff f3			ld hl, os_word_scratch+4 
6102 3e 00			ld a,0 
6104 77				ld (hl),a 
6105 11 fb f3			ld de,os_word_scratch 
6108 3e 33				ld a, display_row_2 + 11 
610a cd bd 0d				call str_at_display 
610d			 
610d			 
610d cd cd 0d			call update_display 
6110 cd ed 0c			call delay1s 
6113 cd ed 0c			call delay1s 
6116 e1				pop hl 
6117			.skipdsp: 
6117 f1				pop af 
6118 c9				ret 
6119			 
6119			display_data_malloc: 
6119			 
6119 f5				push af 
611a e5				push hl 
611b e5				push hl 
611c e5			push hl 
611d cd aa 0d			call clear_display 
6120 e1			pop hl 
6121 7c				ld a,h 
6122 21 fb f3			ld hl, os_word_scratch 
6125 cd e7 11			call hexout 
6128 e1				pop hl 
6129 7d				ld a,l 
612a 21 fd f3			ld hl, os_word_scratch+2 
612d cd e7 11			call hexout 
6130 21 ff f3			ld hl, os_word_scratch+4 
6133 3e 00			ld a,0 
6135 77				ld (hl),a 
6136 11 fb f3			ld de,os_word_scratch 
6139 3e 28				ld a, display_row_2 
613b cd bd 0d				call str_at_display 
613e 11 66 60			ld de, .push_malloc 
6141 3e 00			ld a, display_row_1 
6143			 
6143 cd bd 0d				call str_at_display 
6146			 
6146				; display current data stack pointer 
6146 11 2c 60			ld de,.data_sp 
6149 3e 30				ld a, display_row_2 + 8 
614b cd bd 0d				call str_at_display 
614e			 
614e 2a 23 f9			ld hl,(cli_data_sp) 
6151 e5				push hl 
6152 7c				ld a,h 
6153 21 fb f3			ld hl, os_word_scratch 
6156 cd e7 11			call hexout 
6159 e1				pop hl 
615a 7d				ld a,l 
615b 21 fd f3			ld hl, os_word_scratch+2 
615e cd e7 11			call hexout 
6161 21 ff f3			ld hl, os_word_scratch+4 
6164 3e 00			ld a,0 
6166 77				ld (hl),a 
6167 11 fb f3			ld de,os_word_scratch 
616a 3e 33				ld a, display_row_2 + 11 
616c cd bd 0d				call str_at_display 
616f			 
616f cd cd 0d			call update_display 
6172 cd ed 0c			call delay1s 
6175 cd ed 0c			call delay1s 
6178 e1				pop hl 
6179 f1				pop af 
617a c9				ret 
617b			;endif 
617b			 
617b			include "forth_autostart.asm" 
617b			; list of commands to perform at system start up 
617b			 
617b			startcmds: 
617b			;	dw test11 
617b			;	dw test12 
617b			;	dw test13 
617b			;	dw test14 
617b			;	dw test15 
617b			;	dw test16 
617b			;	dw test17 
617b			;	dw ifthtest1 
617b			;	dw ifthtest2 
617b			;	dw ifthtest3 
617b			;	dw mmtest1 
617b			;	dw mmtest2 
617b			;	dw mmtest3 
617b			;	dw mmtest4 
617b			;	dw mmtest5 
617b			;	dw mmtest6 
617b			;	dw iftest1 
617b			;	dw iftest2 
617b			;	dw iftest3 
617b			;	dw looptest1 
617b			;	dw looptest2 
617b			;	dw test1 
617b			;	dw test2 
617b			;	dw test3 
617b			;	dw test4 
617b			;	dw game2r 
617b			;	dw game2b1 
617b			;	dw game2b2 
617b			 
617b				; start up words that are actually useful 
617b			 
617b			;    dw spi1 
617b			;    dw spi2 
617b			;    dw spi3 
617b			;    dw spi4 
617b			;    dw spi5 
617b			;    dw spi6 
617b			;    dw spi7 
617b			; 
617b			;    dw spi8 
617b			;    dw spi9 
617b			;    dw spi10 
617b			 
617b			; file editor 
617b			;	dw edit1 
617b			;	dw edit2 
617b			;	dw edit3 
617b			 
617b			;	dw longread 
617b 9d 65			dw clrstack 
617d d1 65			dw type 
617f			;	dw stest 
617f f6 65			dw strncpy 
6181 66 67			dw list 
6183 57 66			dw start1 
6185 67 66			dw start2 
6187			;	dw start3 
6187			;	dw start3b 
6187			;	dw start3c 
6187			 
6187				; (unit) testing words 
6187			 
6187			;	dw mtesta 
6187			;	dw mtestb 
6187			;	dw mtestc 
6187			;	dw mtestd 
6187			;	dw mteste 
6187			 
6187				; demo/game words 
6187			 
6187			;        dw game3w 
6187			;        dw game3p 
6187			;        dw game3sc 
6187			;        dw game3vsi 
6187			;        dw game3vs 
6187				 
6187			;	dw game2b 
6187			;	dw game2bf 
6187			;	dw game2mba 
6187			;	dw game2mbas 
6187			;	dw game2mb 
6187			 
6187 97 69			dw game1 
6189 a8 69			dw game1a 
618b 0a 6a			dw game1b 
618d 3f 6a			dw game1c 
618f 75 6a			dw game1d 
6191 a6 6a			dw game1s 
6193 ba 6a			dw game1t 
6195 cf 6a			dw game1f 
6197 03 6b			dw game1z 
6199 47 6b			dw game1zz 
619b			 
619b d0 67			dw test5 
619d 08 68			dw test6 
619f 40 68			dw test7 
61a1 54 68			dw test8 
61a3 80 68			dw test9 
61a5 96 68			dw test10 
61a7				 
61a7 1e 6c		        dw ssv5 
61a9 02 6c		        dw ssv4 
61ab e6 6b		        dw ssv3 
61ad b0 6b		        dw ssv2 
61af 37 6c		        dw ssv1 
61b1 7f 6c		        dw ssv1cpm 
61b3			;	dw keyup 
61b3			;	dw keydown 
61b3			;	dw keyleft 
61b3			;	dw keyright 
61b3			;	dw 	keyf1 
61b3			;	dw keyf2 
61b3			;	dw keyf3 
61b3			;	dw keyf4 
61b3			;	dw keyf5 
61b3			;	dw keyf6 
61b3			;	dw keyf7 
61b3			;	dw keyf8 
61b3			;	dw keyf9 
61b3			;	dw keyf10 
61b3			;	dw keyf11 
61b3			;	dw keyf12 
61b3			;	dw keytab 
61b3			;	dw keycr 
61b3			;	dw keyhome 
61b3			;	dw keyend 
61b3			;	dw keybs 
61b3 00 00			db 0, 0	 
61b5			 
61b5			 
61b5			; File Editor 
61b5			 
61b5			; ( id - ) use 'e' to edit the displayed line 
61b5 .. 00		edit1: db ": edc waitk $65 = if ede then ; ", 0 
61d6 .. 00		edit2: db ": ede storepage ptr $02 + cls dedit filepage bupd ; ", 0 
620b			;edit2: db ": ede v1@ v0@ record drop storepage ptr $02 + cls dedit filepage bupd ; ", 0 
620b .. 00		edit3: db ": ed dup v0! open $01 do i v0@ record cls . edc loop ; ",0 
6243			;edit3: db ": ed dup v0! open $01 do i v0@ record cls . i v1! edc loop ; ",0 
6243			 
6243			; SPI Net support words 
6243			 
6243			; v0! = node to send to 
6243			; ( str count - ) 
6243 .. 00		spi1:       db ": spitype spiceh $00 do dup i + @ v0@ spicel $10 spio spio spio spiceh $01 pause loop ; ",0 
629c			 
629c			; spiputc ( char node - ) 
629c .. 00		spi2:       db ": spiputc spicel $10 spio spio ptr @ spio spiceh ; ",0 
62d0			; spiputc ( u node - ) 
62d0 .. 00		spi2b:       db ": spiputb spicel $10 spio spio spio spiceh ; ",0 
62fe			 
62fe			; spigetc ( - n ) 
62fe .. 00		spi4:       db ": spigetc spicel $11 spio spii spiceh ; ", 0 
6327			 
6327			; getnode ( - n ) 
6327 .. 00		spi5:       db ": getnode spicel $18 spio spii nop spiceh ; ", 0 
6354			 
6354			; ( str node - )  
6354 .. 00		spi3:       db ": sendnode v0! count spiceh $00 do dup i + @ v0@ spicel $10 spio spio spio spiceh $01 pause loop ; ; ",0 
63ba			; store string ( str i - ) 
63ba			 
63ba			;spi3:       db ": storestrold spicel $03 spio spio ptr count clkstro spiceh ; ", 0 
63ba .. 00		spi6:       db ": storestr spicel $12 spio spio count $00 do dup i + @ spio $01 pause loop spiceh ; ", 0 
640f			 
640f			; get string ( addr i -  )    TO FIX 
640f			 
640f .. 00		spi7:       db ": getstorestr spicel $13 spio spio \" \" repeat spii dup concat $00 = not until spiceh ; ", 0 
6467			 
6467			 
6467			; NETCHAT (TODO) 
6467			; Program to allow two nodes to chat with eachother 
6467			; 
6467			; v0 - target node 
6467			;  
6467			; accept input at 0,0 
6467			; if input is string send spitype to target node 
6467			; starting at row 2,0 , while spigetchr is not zero ->  
6467			; 
6467			; 
6467			; TODO add paging of get request 
6467			 
6467			; ( node - ) 
6467 .. 00		spi8:		db ": netchatp $00 $00 at accept ;", 0 
6486 .. 00		spi9: 		db ": netchatr repeat spigetchr dup dup $00 = not if emit then $00 = not until $02 pause ; ",0 
64de .. 00		spi10:		db ": netchat v0! repeat netchatp count dup $00 > if spitype $01 pause then cls $00 $03 at \">\" . netchatr true until nop ; ", 0 
6556			 
6556			 
6556			; Long read of currently open file 
6556 .. 00		longread:   db ": lread read repeat readcont if read concat then readcont until nop ; ", 0 
659d			 
659d			; clear stack  
659d			 
659d .. 00		clrstack:  db ": clrstk depth ?dup if $01 do drop loop then nop ; ", 0 
65d1			 
65d1			; type ( addr count - ) 
65d1 .. 00		type:     db ": type $00 do dup i + @ emit loop ; ", 0 
65f6			 
65f6			; some direct memory words 
65f6			; strncpy ( len t f -- t ) 
65f6			 
65f6 .. 00		strncpy:   db ": strncpy $00 scratch 2! $02 scratch 2! do $00 scratch 2@ i + @ $02 scratch 2@ i + ! loop nop  ;",0 
6657			 
6657 .. 00		start1:     	db ": bpon $00 bp ;",0 
6667 .. 00		start2:     	db ": bpoff $01 bp ;",0 
6678 .. 00		start3b:         db ": ls dir cls drop dup $00 > if $01 do $08 $04 at . $01 $04 at . $04 $04 at . $23 $04 at accept drop scroll loop then nop ;",0 
66f3 .. 00		start3c:         db ": dirlist dir cls drop dup $00 > if $01 do \"/\" .> .> \"Ext:\" .> .> \"Id: \" .> .>  loop then nop ;",0 
6753			 
6753 .. 00		tuck:         db ": tuck swap over ;", 0 
6766			 
6766			; a handy word to list items on the stack 
6766			 
6766 .. 00		list:            db ": more cls repeat scroll $01 $04 at depth . $0a $04 at .> $01 $01 at accept drop depth 0= not until nop ;",0 
67d0			 
67d0			 
67d0			; test stack  
67d0			; rnd8 stest 
67d0			 
67d0			;stest:   db ": stest cls  v0! v0@ $00 do rnd8 $01 $01 at i . $01 pause loop v0@ $00 do drop $12 $01 at depth . $01 pause loop nop ;",0  
67d0			 
67d0			; random malloc and free cycles 
67d0			 
67d0			;mtesta:      db ": mtesta $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . rnd8 dup $13 $01 at . malloc heap $1f $01 at . $1f $02 at . $01 pause free $01 until nop ;", 0 
67d0			 
67d0			; fixed malloc and free cycles 
67d0			 
67d0			;mtestb:      db ": mtestb $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 malloc heap $1f $01 at . $1f $02 at . $01 pause free $01 until nop ;", 0 
67d0			 
67d0			; fixed double string push and drop cycle  
67d0			 
67d0			;mtestc:      db ": mtestc $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 spaces $2f spaces  heap $1f $01 at . $1f $02 at . $01 pause drop drop $01 until nop ; ", 0 
67d0			 
67d0			; consistent fixed string push and drop cycle  
67d0			 
67d0			;mtestd:      db ": mtestd $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 spaces heap $1f $01 at . $1f $02 at . $01 pause drop $01 until nop ; ", 0 
67d0			 
67d0			;mteste:      db ": mteste $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . rnd8 dup spaces $0f $02 at . heap $1f $01 at . $1f $02 at . $01 pause drop $01 until nop ; ", 0 
67d0			 
67d0			;test1:		db ": aa 1 2 3 ;", 0 
67d0			;test2:     	db "111 aa 888 999",0 
67d0			;test3:     	db ": bb 77 ;",0 
67d0			;test4:     	db "$02 $01 do i . loop bb",0 
67d0			 
67d0 .. 00		test5:     	db ": hline $13 $00 do i $01 at 1 . i $04 at 1 . loop nop ;",0 
6808 .. 00		test6:     	db ": vline $04 $01 do $00 i at 1 . $13 i at 1 . loop nop ;",0 
6840 .. 00		test7:     	db ": box hline vline ;",0 
6854 .. 00		test8:     	db ": world cls box $03 $03 at Hello-World! . ;",0 
6880 .. 00		test9:     	db ": sw $01 adsp world ;",0 
6896 .. 00		test10:     	db ": fw $00 adsp world draw $05 pause ;",0 
68bb			;test11:     	db "hello create .",0 
68bb			;test12:     	db "hello2 create .",0 
68bb			 
68bb			;mmtest1:     	db "cls $0001 $0008 MIN . $0002 pause",0 
68bb			;mmtest2:     	db "cls $0101 $0008 MIN . $0002 pause",0 
68bb			;mmtest3:     	db "cls $0001 $0008 MAX . $0002 pause",0 
68bb			;mmtest4:     	db "cls $0101 $0008 MAX . $0002 pause",0 
68bb			;mmtest5:     	db "cls $0001 $0001 MIN . $0002 pause",0 
68bb			;mmtest6:     	db "cls $0001 $0001 MAX . $0002 pause",0 
68bb			 
68bb			;iftest1:     	db "$0001 IF cls .",0 
68bb			;iftest2:     	db "$0000 IF cls .",0 
68bb			;iftest3:     	db "$0002 $0003 - IF cls .",0 
68bb			;looptest1:     	db "$0003 $0001 do i . loop 8",0 
68bb			;looptest2:     	db "$0003 $0001 do i . $0001 pause loop 8",0 
68bb			 
68bb			;ifthtest1:     	db "$0001 IF is-true . $0005 pause THEN next-word . $0005 pause",0 
68bb			;ifthtest2:     	db "$0000 IF is-true . $0005 pause THEN next-word . $0005 pause",0 
68bb			;ifthtest3:     	db "$0002 $0003 - IF is-true . $0005 pause THEN next-word . $0005 pause",0 
68bb			 
68bb			 
68bb .. 00		sound1: db ": note spicel spio spiceh spicel ; ",0 
68df .. 00		sound2: db ": slient $9f note $bf note $df note $ff note ; ", 0 
690f .. 00		sound3: db ": sound $01 cartdev $00 spitime ! ; ",0 
6934 .. 00		sound4: db ": cha $00 ; ",0 
6941 .. 00		sound5: db ": chb $20 ; ",0 
694e .. 00		sound6: db ": chc $40 ; ",0 
695b .. 00		sound7: db ": chd $60 ; ",0 
6968 .. 00		sound8: db ": cnote $80 + + note ; ", 0 
6980 .. 00		sound9: db ": cvol $90 + + note ; ", 0 
6997			 
6997			 
6997			 
6997			 
6997			; a small guess the number game 
6997			 
6997 .. 00		game1:          db ": gsn rnd8 v1! ;",0 
69a8 .. 00		game1a:          db ": gs $00 $00 at Enter-a-number .- $00 $02 at between-1-and-255 .- $00 $03 at accept str2num v2! ;",0 
6a0a			 
6a0a .. 00		game1b:          db ": gcb v2@ v1@ < if $00 $00 at Too-low! .- $01 then ;",0 
6a3f .. 00		game1c:          db ": gcc v2@ v1@ > if $00 $00 at Too-high! .- $01 then ;",0 
6a75 .. 00		game1d:          db ": gcd v2@ v1@ = if $00 $00 at Yes! .- $00 then ;",0 
6aa6 .. 00		game1s:          db ": gck gcb gcc gcd ;",0 
6aba .. 00		game1t:          db ": sc v3@ $01 + v3! ;",0 
6acf .. 00		game1f:          db ": fsc v3@ cls $01 $01 at You-Took .- $02 $03 at . ;",0 
6b03 .. 00		game1z:         db ": ga $00 v3! gsn repeat cls gs cls gck $02 pause sc until fsc nop ;",0 
6b47			 
6b47			; Using 'ga' save a high score across multiple runs using external storage 
6b47			 
6b47 .. 00		game1zz:         db ": gas ga $01 bank $80 bread $01 $04 at Prev-Score .> storepage ptr $02 + dup 2@ . v3@ swap 2! $80 bupd ;",0 
6bb0			 
6bb0			 
6bb0			;game2r:          db ": m2r rnd8 v1! ;  ",0, 0, 0, FORTH_END_BUFFER 
6bb0			;game2b1:          db ": m2b1 $1f $00 do i v2@ at rnd8 $30 < if A . then loop nop ;  ",0, 0, 0, FORTH_END_BUFFER 
6bb0			;game2b2:          db ": m2b cls $04 $01 do i v2! m2b1 loop ;  ",0, 0, 0, FORTH_END_BUFFER 
6bb0			 
6bb0			; simple screen saver to test code memory reuse to destruction 
6bb0			 
6bb0 .. 00		ssv2:            db ": ssvchr $2a $2d rnd dup $2c = if drop $20 then nop ;",0 
6be6 .. 00		ssv3:            db ": ssvposx $01 $27 rnd v0! ;",0 
6c02 .. 00		ssv4:            db ": ssvposy $01 $05 rnd v1! ;",0 
6c1e .. 00		ssv5:            db ": ssvt ssvposx ssvposy ;",0 
6c37 .. 00		ssv1:          db ": ssv cls repeat ssvposx ssvposy v0@ v1@ at ssvchr emit $01 until nop ;",0 
6c7f .. 00		ssv1cpm:          db ": ssvcpm cls repeat ssvposx ssvposy v0@ v1@ at ssvchr emit $01 pausems $01 until nop ;",0 
6cd6			;ssv1:          db ": ssv cls repeat ssvt v0@ v1@ at ssvchr emit $01 until nop ;",0 
6cd6			;ssv1:          db ": ssv ssvposx ssvposy at ssvchr ;",0 
6cd6			;ssv1:            db ": ssv repeat ssvpos rnd8 $10 if               $01 until nop ;",0 
6cd6			;ssv2:            db ": ssvchr v0! v1! at? ;",0 
6cd6			;ssv5:            db ": ssvt ssvposx ssvposy v0@ .> v1@ .> ;",0 
6cd6			;ssv2:            db ": ssvchr $2a $2d rnd  ;",0 
6cd6			 
6cd6			 
6cd6			 
6cd6			; minesweeper/battleship finding game 
6cd6			; draws a game board of random ship/mine positions 
6cd6			; user enters coords to see if it hits on 
6cd6			; game ends when all are hit 
6cd6			; when hit or miss says how many may be in the area 
6cd6			 
6cd6			; setup the game board and then hide it 
6cd6			;game2b:          db ": mbsetup $02 fb cls $04 $01 do i v2! $10 $01 do i v2@ at rnd8 $30 < if A . then loop loop $05 pause $01 fb ;",0 
6cd6			;game2bf:         db ": mbsetupf cls $04 $01 do i v2! $10 $01 do i v2@ at \"+\" . loop loop nop ;",0 
6cd6			;; prompt for where to target 
6cd6			;game2mba:        db ": mbp $12 $04 at Turns .> v3@ . $12 $03 at Score .> v0@ . $12 $01 at Enter-X-__ .- $1a $01 at accept $12 $02 at Enter-Y-__ .- $1a $02 at accept nop ;", 0  
6cd6			;game2mbas:        db ": mbsv str2num v2! str2num v1! nop ;", 0  
6cd6			;; TODO see if the entered coords hits or misses pushes char hit of miss 
6cd6			;game2mbht:      db ": mbckht nop ;",0 
6cd6			;game2mbms:      db ": mbcms nop ;",0 
6cd6			; TODO how many might be near by 
6cd6			;game2mb:          db ": mb $00 v0! $00 v3! mbsetup mbsetupf repeat mbp mbsv $02 fb mbckht mbcms v1@ v2@ at@ $01 fb v1@ v2@ at emit $01 until nop ;",0 
6cd6			 
6cd6			; Game 3 
6cd6			 
6cd6			; Vert scroller ski game - avoid the trees! 
6cd6			 
6cd6			; v0 score (ie turns) 
6cd6			; v1 player pos 
6cd6			; v2 left wall 
6cd6			; v3 right wall 
6cd6			 
6cd6			; Draw side walls randomly 
6cd6			 
6cd6			;game3w:   db ": vsw v2@ $04 at \"|\" . v3@ $04 at \"|\" . nop ;", 0 
6cd6			 
6cd6			; Draw player 
6cd6			;game3p:   db ": vsp v1@ $01 at \"V\" . nop ; ", 0 
6cd6			 
6cd6			; TODO Get Key 
6cd6			 
6cd6			; TODO Move left right 
6cd6			 
6cd6			; scroll and move walls a bit 
6cd6			 
6cd6			;game3sc:  db ": vsscl v2@ $01 + v2! v3@ $01 - v3! scroll nop ;", 0 
6cd6			 
6cd6			; main game loop 
6cd6			 
6cd6			;game3vsi:    db ": vsi $00 v0! $01 v2! $12 v3! $06 v1! nop ;",0 
6cd6			;game3vs:    db ": vs vsi repeat vsw vsp vsscl $05 pause scroll $01 until nop ;",0 
6cd6			 
6cd6			; key board defs 
6cd6			 
6cd6 .. 00		keyup:       db ": keyup $05 ;",0 
6ce4 .. 00		keydown:       db ": keydown $0a ;",0 
6cf4 .. 00		keyleft:       db ": keyleft $0b ;",0 
6d04 .. 00		keyright:       db ": keyright $0c ;",0 
6d15 .. 00		keyf1:       db ": keyf1 $10 ;",0 
6d23 .. 00		keyf2:       db ": keyf2 $11 ;",0 
6d31 .. 00		keyf3:       db ": keyf3 $12 ;",0 
6d3f .. 00		keyf4:       db ": keyf4 $13 ;",0 
6d4d .. 00		keyf5:       db ": keyf5 $14 ;",0 
6d5b .. 00		keyf6:       db ": keyf6 $15 ;",0 
6d69 .. 00		keyf7:       db ": keyf7 $16 ;",0 
6d77 .. 00		keyf8:       db ": keyf8 $17 ;",0 
6d85 .. 00		keyf9:       db ": keyf9 $18 ;",0 
6d93 .. 00		keyf10:       db ": keyf10 $19 ;",0 
6da2 .. 00		keyf11:       db ": keyf11 $1a ;",0 
6db1 .. 00		keyf12:       db ": keyf12 $1b ;",0 
6dc0			 
6dc0 .. 00		keytab:       db ": keytab $09 ;",0 
6dcf .. 00		keycr:       db ": keycr $0d ;",0 
6ddd .. 00		keyhome:       db ": keyhome $0e ;",0 
6ded .. 00		keyend:       db ": keyend $0f ;",0 
6dfc .. 00		keybs:       db ": keybs $08 ;",0 
6e0a			 
6e0a			   
6e0a			 
6e0a			 
6e0a			 
6e0a			; eof 
# End of file forth_autostart.asm
6e0a			 
6e0a			 
6e0a			 
6e0a			; stack over and underflow checks 
6e0a			 
6e0a			; init the words to detect the under/overflow 
6e0a			 
6e0a			chk_stk_init: 
6e0a				; a vague random number to check so we dont get any "lucky" hits 
6e0a 3e 2d			ld a, 45 
6e0c 6f				ld l, a 
6e0d 00				nop 
6e0e 3e 17			ld a, 23 
6e10 67				ld h, a 
6e11			 
6e11 22 d2 f0			ld (chk_word), hl     ; the word we need to check against 
6e14			 
6e14			;	ld (chk_stund), hl	; stack points.... 
6e14 22 3b fe			ld (chk_stovr), hl 
6e17 22 21 f9			ld (chk_ret_und), hl 
6e1a 22 df f8			ld (chk_ret_ovr), hl 
6e1d 22 5d f8			ld (chk_loop_ovr), hl 
6e20 22 5b f6			ld (chk_data_ovr), hl 
6e23 c9				ret 
6e24				 
6e24			check_stacks: 
6e24				; check all stack words 
6e24			 
6e24 e5				push hl 
6e25 d5				push de 
6e26			 
6e26			;	ld de,(chk_word) 
6e26			;	ld hl, (chk_stund)	; stack points.... 
6e26			;	if DEBUG_STK_FAULT 
6e26			;		DMARK "FAa" 
6e26			;		CALLMONITOR 
6e26			;	endif 
6e26			;	call cmp16 
6e26			;	jp z, .chk_faulta 
6e26			; 
6e26			;	ld de, sfaultsu 
6e26			;	jp .chk_fault 
6e26			 
6e26 2a 3b fe		.chk_faulta: ld hl, (chk_stovr) 
6e29 ed 5b d2 f0		ld de,(chk_word) 
6e2d				if DEBUG_STK_FAULT 
6e2d					DMARK "FAb" 
6e2d					CALLMONITOR 
6e2d				endif 
6e2d cd fc 0f			call cmp16 
6e30 28 06			jr z, .chk_fault1 
6e32 11 d6 6e			ld de, sfaultso 
6e35 c3 87 6e			jp .chk_fault 
6e38			.chk_fault1:  
6e38 2a 21 f9			ld hl, (chk_ret_und) 
6e3b ed 5b d2 f0		ld de,(chk_word) 
6e3f				if DEBUG_STK_FAULT 
6e3f					DMARK "FAU" 
6e3f					CALLMONITOR 
6e3f				endif 
6e3f cd fc 0f			call cmp16 
6e42 ca 4b 6e			jp z, .chk_fault2 
6e45 11 e6 6e			ld de, sfaultru 
6e48 c3 87 6e			jp .chk_fault 
6e4b			.chk_fault2:  
6e4b 2a df f8			ld hl, (chk_ret_ovr) 
6e4e ed 5b d2 f0		ld de,(chk_word) 
6e52				if DEBUG_STK_FAULT 
6e52					DMARK "FA1" 
6e52					CALLMONITOR 
6e52				endif 
6e52 cd fc 0f			call cmp16 
6e55 ca 5e 6e			jp z, .chk_fault3 
6e58 11 f4 6e			ld de, sfaultro 
6e5b c3 87 6e			jp .chk_fault 
6e5e			.chk_fault3:  
6e5e 2a 5d f8			ld hl, (chk_loop_ovr) 
6e61 ed 5b d2 f0		ld de,(chk_word) 
6e65				if DEBUG_STK_FAULT 
6e65					DMARK "FA2" 
6e65					CALLMONITOR 
6e65				endif 
6e65 cd fc 0f			call cmp16 
6e68 ca 71 6e			jp z, .chk_fault4 
6e6b 11 0e 6f			ld de, sfaultlo 
6e6e c3 87 6e			jp .chk_fault 
6e71			.chk_fault4:  
6e71 2a 5b f6			ld hl, (chk_data_ovr) 
6e74 ed 5b d2 f0		ld de,(chk_word) 
6e78				if DEBUG_STK_FAULT 
6e78					DMARK "FA3" 
6e78					CALLMONITOR 
6e78				endif 
6e78 cd fc 0f			call cmp16 
6e7b ca 84 6e			jp z, .chk_fault5 
6e7e 11 28 6f			ld de, sfaultdo 
6e81 c3 87 6e			jp .chk_fault 
6e84			 
6e84			 
6e84			.chk_fault5:  
6e84 d1				pop de 
6e85 e1				pop hl 
6e86			 
6e86 c9				ret 
6e87			 
6e87 cd aa 0d		.chk_fault: 	call clear_display 
6e8a 3e 28				ld a, display_row_2 
6e8c cd bd 0d				call str_at_display 
6e8f 11 b8 6e				   ld de, .stackfault 
6e92 3e 00				ld a, display_row_1 
6e94 cd bd 0d				call str_at_display 
6e97 11 a0 fd				    ld de, debug_mark 
6e9a 3e 11				ld a, display_row_1+17 
6e9c cd bd 0d				call str_at_display 
6e9f cd cd 0d				call update_display 
6ea2			 
6ea2				; prompt before entering montior for investigating issue 
6ea2			 
6ea2 3e 78			ld a, display_row_4 
6ea4 11 26 1d			ld de, endprog 
6ea7			 
6ea7 cd cd 0d			call update_display		 
6eaa			 
6eaa cd c0 1f			call next_page_prompt 
6ead			 
6ead d1				pop de 
6eae e1				pop hl 
6eaf cd 7a 1d				call monitor 
6eb2 cd df 23				call forth_warmstart 
6eb5 c3 76 1c				jp warmstart_afterauto 
6eb8					;jp 0 
6eb8					;halt 
6eb8			 
6eb8			 
6eb8			 
6eb8 .. 00		.stackfault: 	db "Stack fault:",0 
6ec5			 
6ec5 .. 00		sfaultsu: 	db	"Stack under flow",0 
6ed6 .. 00		sfaultso: 	db	"Stack over flow",0 
6ee6 .. 00		sfaultru:	db "RTS underflow",0 
6ef4 .. 00		sfaultro:	db "RTS overflow/LS underflow", 0 
6f0e .. 00		sfaultlo:	db "LS overflow/DTS underflow", 0 
6f28 .. 00		sfaultdo:	db "DTS overflow", 0 
6f35			 
6f35			 
6f35			fault_dsp_under: 
6f35 11 47 6f			ld de, .dsp_under 
6f38 c3 fd 6f			jp .show_fault 
6f3b			 
6f3b			fault_rsp_under: 
6f3b 11 55 6f			ld de, .rsp_under 
6f3e c3 fd 6f			jp .show_fault 
6f41			fault_loop_under: 
6f41 11 63 6f			ld de, .loop_under 
6f44 c3 fd 6f			jp .show_fault 
6f47			 
6f47 .. 00		.dsp_under: db "DSP Underflow",0 
6f55 .. 00		.rsp_under: db "RSP Underflow",0 
6f63 .. 00		.loop_under: db "LOOP Underflow",0 
6f72			 
6f72			 
6f72 d5			type_faultn: 	push de 
6f73 e5					push hl 
6f74 cd aa 0d				call clear_display 
6f77 11 a1 6f				   ld de, .typefaultn 
6f7a 3e 00				ld a, display_row_1 
6f7c cd bd 0d				call str_at_display 
6f7f 11 a0 fd				    ld de, debug_mark 
6f82 3e 11				ld a, display_row_1+17 
6f84 cd bd 0d				call str_at_display 
6f87 cd cd 0d				call update_display 
6f8a			 
6f8a				; prompt before entering montior for investigating issue 
6f8a			 
6f8a 3e 78			ld a, display_row_4 
6f8c 11 26 1d			ld de, endprog 
6f8f			 
6f8f cd cd 0d			call update_display		 
6f92			 
6f92 cd c0 1f			call next_page_prompt 
6f95			 
6f95 e5					push hl 
6f96 d5					push de 
6f97 cd 7a 1d				call monitor 
6f9a cd df 23				call forth_warmstart 
6f9d c3 76 1c				jp warmstart_afterauto 
6fa0 76					halt 
6fa1			 
6fa1			 
6fa1 .. 00		.typefaultn: db "NUM Type Expected TOS!",0 
6fb8			 
6fb8 d5			type_faults: 	push de 
6fb9 e5					push hl 
6fba cd aa 0d				call clear_display 
6fbd 11 e6 6f				   ld de, .typefaults 
6fc0 3e 00				ld a, display_row_1 
6fc2 cd bd 0d				call str_at_display 
6fc5 11 a0 fd				    ld de, debug_mark 
6fc8 3e 11				ld a, display_row_1+17 
6fca cd bd 0d				call str_at_display 
6fcd cd cd 0d				call update_display 
6fd0			 
6fd0				; prompt before entering montior for investigating issue 
6fd0			 
6fd0 3e 78			ld a, display_row_4 
6fd2 11 26 1d			ld de, endprog 
6fd5			 
6fd5 cd cd 0d			call update_display		 
6fd8			 
6fd8 cd c0 1f			call next_page_prompt 
6fdb			 
6fdb e1					pop hl 
6fdc d1					pop de 
6fdd cd 7a 1d				call monitor 
6fe0 cd df 23				call forth_warmstart 
6fe3 c3 76 1c				jp warmstart_afterauto 
6fe6			 
6fe6			 
6fe6 .. 00		.typefaults: db "STR Type Expected TOS!",0 
6ffd			 
6ffd			.show_fault: 	 
6ffd d5					push de 
6ffe cd aa 0d				call clear_display 
7001 d1					pop de 
7002 3e 00				ld a, display_row_1 
7004 cd bd 0d				call str_at_display 
7007 11 a0 fd				    ld de, debug_mark 
700a 3e 11				ld a, display_row_1+17 
700c cd bd 0d				call str_at_display 
700f cd cd 0d				call update_display 
7012			 
7012				; prompt before entering montior for investigating issue 
7012			 
7012 3e 78			ld a, display_row_4 
7014 11 26 1d			ld de, endprog 
7017			 
7017 cd cd 0d			call update_display		 
701a			 
701a cd c0 1f			call next_page_prompt 
701d			 
701d e1					pop hl 
701e d1					pop de 
701f cd 7a 1d				call monitor 
7022			; do a dump to cli and not warmstart so we preserve all of the uwords.  
7022			; TODO Make optional fault restart to cli or warm boot? 
7022					;jp warmstart 
7022 c3 ba 1c				jp cli 
7025 76					halt 
7026			 
7026			 
7026			; handle the auto run of code from files in storage 
7026			 
7026			 
7026			include "forth_startup.asm" 
7026			; Which startup method to use? 
7026			; 
7026			; version 1 - allows for a single stored file to be selected to run at start up (if se storage is enabled) 
7026			; followed by loading of a list of scripts in eeprom 
7026			 
7026			; version 2 - if se storage is enabled then auto load all files which begin with a '*' else use loading 
7026			; from eeprom 
7026			 
7026			; Select with define in main stubs 
7026			 
7026			if STARTUP_V1 
7026				include "forth_startupv1.asm" 
7026			endif 
7026			if STARTUP_V2 
7026				include "forth_startupv2.asm" 
7026			; Version 2 of the startup  
7026			;  
7026			; Auto load any files in bank 1 that start with a '*' 
7026			; If no se storage then revert to using eprom 
7026			 
7026			 
7026			if STORAGE_SE = 0 
7026			 
7026			sprompt1: db "Startup load...",0 
7026			sprompt2: db "Run? 1=No *=End #=All",0 
7026			 
7026			 
7026			 
7026			 
7026			forth_startup: 
7026				ld hl, startcmds 
7026				ld a, 0 
7026				ld (os_last_cmd), a    ; tmp var to skip prompts if doing all 
7026			 
7026			.start1:	push hl 
7026				call clear_display 
7026				ld de, sprompt1 
7026			        ld a, display_row_1 
7026				call str_at_display 
7026				ld de, sprompt2 
7026			        ld a, display_row_2 
7026				call str_at_display 
7026				pop hl 
7026				push hl 
7026				ld e,(hl) 
7026				inc hl 
7026				ld d,(hl) 
7026			        ld a, display_row_3 
7026				call str_at_display 
7026				call update_display 
7026			 
7026			 
7026				ld a, (os_last_cmd) 
7026				cp 0 
7026				jr z, .startprompt 
7026				call delay250ms 
7026				jr .startdo 
7026				 
7026				 
7026			 
7026			.startprompt: 
7026			 
7026				ld a,display_row_4 + display_cols - 1 
7026			        ld de, endprg 
7026				call str_at_display 
7026				call update_display 
7026				call delay1s 
7026				call cin_wait 
7026						 
7026				cp '*' 
7026				jr z, .startupend1 
7026				cp '#' 
7026				jr nz, .startno 
7026				ld a, 1 
7026				ld (os_last_cmd),a 
7026				jr .startdo 
7026			.startno:	cp '1' 
7026				jr z,.startnxt  
7026			 
7026				; exec startup line 
7026			.startdo:	 
7026				pop hl 
7026				push hl 
7026				 
7026				ld e,(hl) 
7026				inc hl 
7026				ld d,(hl) 
7026				ex de,hl 
7026			 
7026				push hl 
7026			 
7026				ld a, 0 
7026				;ld a, FORTH_END_BUFFER 
7026				call strlent 
7026				inc hl   ; include zero term to copy 
7026				ld b,0 
7026				ld c,l 
7026				pop hl 
7026				ld de, scratch 
7026				ldir 
7026			 
7026			 
7026				ld hl, scratch 
7026				call forthparse 
7026				call forthexec 
7026				call forthexec_cleanup 
7026			 
7026				ld a, display_row_4 
7026				ld de, endprog 
7026			 
7026				call update_display		 
7026			 
7026				ld a, (os_last_cmd) 
7026				cp 0 
7026				jr nz, .startnxt 
7026				call next_page_prompt 
7026			        call clear_display 
7026				call update_display		 
7026			 
7026				; move onto next startup line? 
7026			.startnxt: 
7026			 
7026				call delay250ms 
7026				pop hl 
7026			 
7026				inc hl 
7026				inc hl 
7026			 
7026				push hl 
7026				ld e, (hl) 
7026				inc hl 
7026				ld d, (hl) 
7026				pop hl 
7026				; TODO replace 0 test 
7026			 
7026				ex de, hl 
7026				call ishlzero 
7026			;	ld a,e 
7026			;	add d 
7026			;	cp 0    ; any left to do? 
7026				ex de, hl 
7026				jp nz, .start1 
7026				jr .startupend 
7026			 
7026			.startupend1: pop hl 
7026			.startupend: 
7026			 
7026				call clear_display 
7026				call update_display 
7026				ret 
7026			endif 
7026			 
7026			 
7026			if STORAGE_SE 
7026			 
7026			;sprompt3: db "Loading from start-up file:",0 
7026 .. 00		sprompt3: db "  Searching...",0 
7035			;sprompt4: db "(Any key to stop)",0 
7035			 
7035			 
7035			forth_autoload: 
7035			 
7035				; load block 0 of store 1 
7035				 
7035 3e fe			ld a, $fe      ; bit 0 clear 
7037 32 95 f9			ld (spi_device), a 
703a			 
703a cd 25 05			call storage_get_block_0 
703d			 
703d 3a d0 f9			ld a, (store_page+STORE_0_AUTOFILE) 
7040			 
7040 fe 00			cp 0 
7042 c8				ret z     ; auto start not enabled 
7043			 
7043 cd aa 0d			call clear_display 
7046			 
7046				; set bank 
7046			 
7046 3a d2 f9				ld a, (store_page+STORE_0_BANKRUN) 
7049 32 95 f9				ld (spi_device), a 
704c			 
704c			 
704c				; generate a directory of bank 1 and search for flagged files 
704c			 
704c					if DEBUG_FORTH_WORDS_KEY 
704c						DMARK "DIR" 
704c f5				push af  
704d 3a 61 70			ld a, (.dmark)  
7050 32 a0 fd			ld (debug_mark),a  
7053 3a 62 70			ld a, (.dmark+1)  
7056 32 a1 fd			ld (debug_mark+1),a  
7059 3a 63 70			ld a, (.dmark+2)  
705c 32 a2 fd			ld (debug_mark+2),a  
705f 18 03			jr .pastdmark  
7061 ..			.dmark: db "DIR"  
7064 f1			.pastdmark: pop af  
7065			endm  
# End of macro DMARK
7065						CALLMONITOR 
7065 cd aa fd			call debug_vector  
7068				endm  
# End of macro CALLMONITOR
7068					endif 
7068			 
7068 cd 25 05			call storage_get_block_0 
706b			 
706b 21 af f9			ld hl, store_page     ; get current id count 
706e 46				ld b, (hl) 
706f 0e 00			ld c, 0    ; count of files   
7071					if DEBUG_FORTH_WORDS 
7071						DMARK "DI1" 
7071 f5				push af  
7072 3a 86 70			ld a, (.dmark)  
7075 32 a0 fd			ld (debug_mark),a  
7078 3a 87 70			ld a, (.dmark+1)  
707b 32 a1 fd			ld (debug_mark+1),a  
707e 3a 88 70			ld a, (.dmark+2)  
7081 32 a2 fd			ld (debug_mark+2),a  
7084 18 03			jr .pastdmark  
7086 ..			.dmark: db "DI1"  
7089 f1			.pastdmark: pop af  
708a			endm  
# End of macro DMARK
708a						CALLMONITOR 
708a cd aa fd			call debug_vector  
708d				endm  
# End of macro CALLMONITOR
708d					endif 
708d			 
708d				; check for empty drive 
708d			 
708d 3e 00			ld a, 0 
708f b8				cp b 
7090 ca dd 70			jp z, .dirdone 
7093			 
7093				; for each of the current ids do a search for them and if found push to stack 
7093			 
7093 c5			.diritem:	push bc 
7094 21 40 00				ld hl, STORE_BLOCK_PHY 
7097 16 00				ld d, 0		 ; look for extent 0 of block id as this contains file name 
7099 58					ld e,b 
709a			 
709a d5					push de 
709b e5					push hl 
709c cd aa 0d			call clear_display 
709f 3e 32			ld a, display_row_2 + 10 
70a1 11 26 70			ld de, sprompt3 
70a4 cd bd 0d			call str_at_display 
70a7 cd 01 0d			call active 
70aa eb				ex de, hl 
70ab 3e 2f			ld a, display_row_2 + 7 
70ad cd bd 0d			call str_at_display 
70b0 cd cd 0d			call update_display 
70b3 e1				pop hl 
70b4 d1				pop de 
70b5			 
70b5			;		if DEBUG_FORTH_WORDS 
70b5			;			DMARK "DI2" 
70b5			;			CALLMONITOR 
70b5			;		endif 
70b5			 
70b5 cd a7 07				call storage_findnextid 
70b8			 
70b8			;		if DEBUG_FORTH_WORDS 
70b8			;			DMARK "DI3" 
70b8			;			CALLMONITOR 
70b8			;		endif 
70b8			 
70b8					; if found hl will be non zero 
70b8			 
70b8 cd 07 10				call ishlzero 
70bb			;		ld a, l 
70bb			;		add h 
70bb			; 
70bb			;		cp 0 
70bb 28 1d				jr z, .dirnotfound 
70bd			 
70bd					; increase count 
70bd			 
70bd c1					pop bc	 
70be 0c					inc c 
70bf c5					push bc 
70c0					 
70c0			 
70c0					; get file header and push the file name 
70c0			 
70c0 11 af f9				ld de, store_page 
70c3 cd 74 04				call storage_read_block 
70c6			 
70c6					; push file id to stack 
70c6				 
70c6			 
70c6					; is this a file we want to run? 
70c6			 
70c6 21 b2 f9				ld hl, store_page+3 
70c9 7e					ld a,(hl) 
70ca fe 2a				cp '*' 
70cc 20 0c				jr nz,  .dirnotfound 
70ce					 
70ce			 
70ce			 
70ce 3a af f9				ld a, (store_page) 
70d1 d5					push de 
70d2 e5					push hl 
70d3 c5					push bc 
70d4 cd 00 71				call .autorunf 
70d7 c1					pop bc 
70d8 e1					pop hl 
70d9 d1					pop de 
70da			 
70da			 
70da			 
70da				; save this extent 
70da			 
70da					; push file name 
70da			;display file name to run 
70da			 
70da			;		ld hl, store_page+3 
70da			;		if DEBUG_FORTH_WORDS 
70da			;			DMARK "DI5" 
70da			;			CALLMONITOR 
70da			;		endif 
70da			; 
70da			;		 
70da			; 
70da			;		call forth_push_str 
70da			;		if DEBUG_FORTH_WORDS 
70da			;			DMARK "DI6" 
70da			;			CALLMONITOR 
70da			;		endif 
70da			.dirnotfound: 
70da c1					pop bc     
70db 10 b6				djnz .diritem 
70dd				 
70dd			.dirdone:	 
70dd					if DEBUG_FORTH_WORDS 
70dd						DMARK "DI7" 
70dd f5				push af  
70de 3a f2 70			ld a, (.dmark)  
70e1 32 a0 fd			ld (debug_mark),a  
70e4 3a f3 70			ld a, (.dmark+1)  
70e7 32 a1 fd			ld (debug_mark+1),a  
70ea 3a f4 70			ld a, (.dmark+2)  
70ed 32 a2 fd			ld (debug_mark+2),a  
70f0 18 03			jr .pastdmark  
70f2 ..			.dmark: db "DI7"  
70f5 f1			.pastdmark: pop af  
70f6			endm  
# End of macro DMARK
70f6						CALLMONITOR 
70f6 cd aa fd			call debug_vector  
70f9				endm  
# End of macro CALLMONITOR
70f9					endif 
70f9			 
70f9 cd aa 0d				call clear_display 
70fc cd cd 0d				call update_display 
70ff			 
70ff c9					ret 
7100			 
7100			 
7100			 
7100			 
7100			 
7100			.autorunf: 
7100			 
7100			 
7100				; get file id to load from and get the file name to display 
7100			 
7100			;		ld a, (store_page+STORE_0_FILERUN) 
7100			 
7100 2e 00				ld l, 0 
7102 67					ld h, a 
7103 11 af f9				ld de, store_page 
7106			 
7106					if DEBUG_FORTH_WORDS 
7106						DMARK "ASp" 
7106 f5				push af  
7107 3a 1b 71			ld a, (.dmark)  
710a 32 a0 fd			ld (debug_mark),a  
710d 3a 1c 71			ld a, (.dmark+1)  
7110 32 a1 fd			ld (debug_mark+1),a  
7113 3a 1d 71			ld a, (.dmark+2)  
7116 32 a2 fd			ld (debug_mark+2),a  
7119 18 03			jr .pastdmark  
711b ..			.dmark: db "ASp"  
711e f1			.pastdmark: pop af  
711f			endm  
# End of macro DMARK
711f						CALLMONITOR 
711f cd aa fd			call debug_vector  
7122				endm  
# End of macro CALLMONITOR
7122					endif 
7122 cd cd 09				call storage_read 
7125			 
7125					if DEBUG_FORTH_WORDS 
7125						DMARK "ASr" 
7125 f5				push af  
7126 3a 3a 71			ld a, (.dmark)  
7129 32 a0 fd			ld (debug_mark),a  
712c 3a 3b 71			ld a, (.dmark+1)  
712f 32 a1 fd			ld (debug_mark+1),a  
7132 3a 3c 71			ld a, (.dmark+2)  
7135 32 a2 fd			ld (debug_mark+2),a  
7138 18 03			jr .pastdmark  
713a ..			.dmark: db "ASr"  
713d f1			.pastdmark: pop af  
713e			endm  
# End of macro DMARK
713e						CALLMONITOR 
713e cd aa fd			call debug_vector  
7141				endm  
# End of macro CALLMONITOR
7141					endif 
7141			 
7141 cd 07 10				call ishlzero 
7144 c8					ret z             ; file not found 
7145			 
7145					; display file name we are loading 
7145			 
7145 cd aa 0d				call clear_display 
7148			 
7148 3e 32				ld a, display_row_2 + 10 
714a 11 b2 f9				ld de, store_page+3 
714d cd bd 0d				call str_at_display 
7150				 
7150			; 
7150			 
7150			;	ld a, display_row_1+5 
7150			;	ld de, sprompt3 
7150			;	call str_at_display 
7150			;	ld a, display_row_2+7 
7150			;	call active 
7150			;	ex de, hl 
7150			;;	ld de, sprompt4 
7150			;	call str_at_display 
7150			; 
7150 cd cd 0d			call update_display 
7153			 
7153			;	call cin_wait 
7153			;	cp 'n' 
7153			;	ret z 
7153			;	cp 'N' 
7153			;	ret z 
7153			 
7153			;	call delay1s 
7153			 
7153 3a b1 f9			ld a, (store_page+2) 
7156 32 9e f9			ld (store_openmaxext), a    ; save count of ext 
7159 3e 01			ld a, 1  
715b 32 9f f9			ld (store_openext), a    ; save count of ext 
715e			 
715e			.autof: 
715e				; begin to read a line from file 
715e			 
715e 21 1d f4			ld hl, os_cli_cmd 
7161 22 1b f6			ld (os_var_array), hl     ; somewhere to hold the line construction pointer 
7164			  
7164			.readext: 
7164 3a 9f f9			ld a, (store_openext) 
7167 6f				ld l , a 
7168				 
7168 3a af f9			ld a, (store_page) 
716b 67				ld h, a	 
716c 11 af f9			ld de, store_page 
716f					if DEBUG_FORTH_WORDS 
716f						DMARK "ASl" 
716f f5				push af  
7170 3a 84 71			ld a, (.dmark)  
7173 32 a0 fd			ld (debug_mark),a  
7176 3a 85 71			ld a, (.dmark+1)  
7179 32 a1 fd			ld (debug_mark+1),a  
717c 3a 86 71			ld a, (.dmark+2)  
717f 32 a2 fd			ld (debug_mark+2),a  
7182 18 03			jr .pastdmark  
7184 ..			.dmark: db "ASl"  
7187 f1			.pastdmark: pop af  
7188			endm  
# End of macro DMARK
7188						CALLMONITOR 
7188 cd aa fd			call debug_vector  
718b				endm  
# End of macro CALLMONITOR
718b					endif 
718b cd cd 09				call storage_read 
718e cd 07 10			call ishlzero 
7191 c8				ret z 
7192			 
7192			; TODO copy to exec buffer 
7192			; check (store_readcont) if 0 then exec, if not then load on the end of the exec buffer until 0 
7192			 
7192				; copy the record buffer to the cli buffer 
7192			 
7192 ed 5b 1b f6		ld de, (os_var_array) 
7196 21 b1 f9			ld hl, store_page+2 
7199			;	ex de, hl 
7199 01 3e 00			ld bc, STORE_BLOCK_PHY-2   ; two for the file ids 
719c ed b0			ldir 
719e ed 53 1b f6		ld (os_var_array), de 
71a2				 
71a2 3a 9f f9			ld a, (store_openext) 
71a5 3c				inc a 
71a6 32 9f f9			ld (store_openext), a    ; save count of ext 
71a9			 
71a9			 
71a9			; check (store_readcont) if 0 then exec, if not then load on the end of the exec buffer until 0 
71a9				 
71a9 3a a2 f9			ld a, (store_readcont) 
71ac fe 00			cp 0 
71ae 20 b4			jr nz, .readext 
71b0			 
71b0			;	jr z, .autoend 
71b0			 
71b0					if DEBUG_FORTH_WORDS 
71b0						DMARK "ASc" 
71b0 f5				push af  
71b1 3a c5 71			ld a, (.dmark)  
71b4 32 a0 fd			ld (debug_mark),a  
71b7 3a c6 71			ld a, (.dmark+1)  
71ba 32 a1 fd			ld (debug_mark+1),a  
71bd 3a c7 71			ld a, (.dmark+2)  
71c0 32 a2 fd			ld (debug_mark+2),a  
71c3 18 03			jr .pastdmark  
71c5 ..			.dmark: db "ASc"  
71c8 f1			.pastdmark: pop af  
71c9			endm  
# End of macro DMARK
71c9						CALLMONITOR 
71c9 cd aa fd			call debug_vector  
71cc				endm  
# End of macro CALLMONITOR
71cc					endif 
71cc e5				push hl	 
71cd d5				push de 
71ce cd 01 0d			call active 
71d1 eb				ex de, hl 
71d2 3e 2f			ld a, display_row_2 + 7 
71d4 cd bd 0d			call str_at_display 
71d7			 
71d7 cd cd 0d			call update_display 
71da d1				pop de  
71db e1				pop hl 
71dc			;	call delay250ms 
71dc			 
71dc			 
71dc			 
71dc			 
71dc			.autoexec: 
71dc			 
71dc			 
71dc 21 1d f4			ld hl, os_cli_cmd 
71df					if DEBUG_FORTH_WORDS 
71df						DMARK "ASx" 
71df f5				push af  
71e0 3a f4 71			ld a, (.dmark)  
71e3 32 a0 fd			ld (debug_mark),a  
71e6 3a f5 71			ld a, (.dmark+1)  
71e9 32 a1 fd			ld (debug_mark+1),a  
71ec 3a f6 71			ld a, (.dmark+2)  
71ef 32 a2 fd			ld (debug_mark+2),a  
71f2 18 03			jr .pastdmark  
71f4 ..			.dmark: db "ASx"  
71f7 f1			.pastdmark: pop af  
71f8			endm  
# End of macro DMARK
71f8						CALLMONITOR 
71f8 cd aa fd			call debug_vector  
71fb				endm  
# End of macro CALLMONITOR
71fb					endif 
71fb cd 83 24			call forthparse 
71fe cd bf 24			call forthexec 
7201 cd d9 23			call forthexec_cleanup 
7204			 
7204			 
7204			 
7204 c3 5e 71			jp .autof 
7207			;.autofdone: 
7207			; 
7207			;		if DEBUG_FORTH_WORDS 
7207			;			DMARK "ASx" 
7207			;			CALLMONITOR 
7207			;		endif 
7207			;;	call clear_display 
7207			;	ret 
7207			 
7207			 
7207			 
7207			endif 
# End of file forth_startupv2.asm
7207			endif 
7207			 
# End of file forth_startup.asm
7207			 
7207			; eof 
# End of file forth_kernel.asm
7207			;include "nascombasic.asm" 
7207			 
7207			 
7207			; find out where the code ends if loaded into RAM (for SC114) 
7207			;endofcode:  
7207			;	nop 
7207			 
7207			 
7207			; jump to nmi vector 
7207			 
7207			init_nmi: 
7207 3e c9			ld a, $c9   ; RET 
7209 32 ad fd			ld (nmi_vector), a 
720c c9				ret 
720d			nmi: 
720d e5				push hl 
720e d5				push de 
720f c5				push bc 
7210 f5				push af 
7211 cd ad fd			call nmi_vector 
7214 f5				push af 
7215 c5				push bc 
7216 d5				push de 
7217 e5				push hl 
7218 ed 4d			reti 
721a			 
721a			 
721a			; eof 
721a			 
# End of file main.asm
721a			include "firmware_lcd_4x40.asm" 
721a			; **********************************************************************  
721a			; **  Alphanumeric LCD example                  by Stephen C Cousins  **  
721a			; **********************************************************************  
721a			;  
721a			; **  Written as a Small Computer Monitor App  
721a			; **  www.scc.me.uk  
721a			;  
721a			; History  
721a			; 2018-05-20  v0.2.0  SCC  Example for LiNC80 SBC1 only  
721a			; 2018-06-28  v0.3.0  SCC  Added support for RC2014 and Z280RC  
721a			; 2019-09-14  v0.4.0  SCC  Added support for SC129 digital I/O module  
721a			;  
721a			; **********************************************************************  
721a			;  
721a			; This program is an example of one of the methods of interfacing an   
721a			; alphanumeric LCD module.   
721a			;  
721a			; In this example the display is connected to either a Z80 PIO or a   
721a			; simple 8-bit output port.   
721a			;  
721a			; This interfacing method uses 4-bit data mode and uses time delays  
721a			; rather than polling the display's ready status. As a result the   
721a			; interface only requires 6 simple output lines:  
721a			;   Output bit 0 = not used  
721a			;   Output bit 1 = not used  
721a			;   Output bit 2 = RS         High = data, Low = instruction  
721a			;   Output bit 3 = E          Active high  
721a			;   Output bit 4 = DB4  
721a			;   Output bit 5 = DB5  
721a			;   Output bit 6 = DB6  
721a			;   Output bit 7 = DB7  
721a			; Display's R/W is connected to 0v so it is always in write mode  
721a			;  
721a			; This set up should work with any system supporting the RC2014 bus  
721a			  
721a			; To set up PIO port A in mode 3 (control) using LiNC80 as example  
721a			;   I/O address 0x1A = 0b11001111 (0xCF)   Select mode 3 (control)  
721a			;   I/O address 0x1A = 0b00000000 (0x00)   All pins are output  
721a			;  
721a			; **********************************************************************  
721a			  
721a			; Additonal for 4x40. E1 and E2 instead of just E   
721a			; TODO swipe vidout signal on port a to activate E2  
721a			  
721a			; **********************************************************************  
721a			; **  Constants  
721a			; **********************************************************************  
721a			; LCD constants required by LCD support module  
721a			kLCDPrt:    EQU kDataReg       ;LCD port is the PIO port A data reg  
721a			kLCDBitRS:  EQU 2              ;Port bit for LCD RS signal  
721a			kLCDBitE:   EQU 3              ;Port bit for LCD E signal             
721a			kLCDBitE2:   EQU 0              ;Port bit for LCD E2 signal            VIDOUT  
721a			; TODO Decide which E is being set  
721a			kLCDWidth:  EQU display_cols             ;Width in characters  
721a			  
721a			; **********************************************************************  
721a			; **  Code library usage  
721a			; **********************************************************************  
721a			  
721a			; send character to current cursor position  
721a			; wraps and/or scrolls screen automatically  
721a			  
721a			  
721a			  
721a			lcd_init:  
721a			  
721a			; SCMonAPI functions used  
721a			  
721a			; Alphanumeric LCD functions used  
721a			; no need to specify specific functions for this module  
721a			  
721a 3e cf		            LD   A, 11001111b  
721c d3 c2		            OUT  (kContReg), A  ;Port A = PIO 'control' mode  
721e 3e 00		            LD   A, 00000000b  
7220 d3 c2		            OUT  (kContReg),A   ;Port A = all lines are outputs  
7222			  
7222			; Initialise alphanumeric LCD module  
7222 3e 00				ld a, 0  
7224 32 00 fb				ld (display_lcde1e2), a  
7227 cd a8 72		            CALL fLCD_Init      ;Initialise LCD module  
722a 3e 01				ld a, 1  
722c 32 00 fb				ld (display_lcde1e2), a  
722f cd a8 72		            CALL fLCD_Init      ;Initialise LCD module  
7232			  
7232 c9				ret  
7233			  
7233			;  
7233			;;  
7233			; lcd functions  
7233			;  
7233			;  
7233			  
7233			; what is at cursor position   
7233			  
7233			;get_cursor:	ld de, (cursor_row)   ;  row + col  
7233			;		call curptr  
7233			;		ret  
7233			  
7233			  
7233			; take current custor pos in de (d=row,e=col) and return a pointer to the frame buffer  
7233			  
7233			curptr:  
7233 c5				push bc  
7234 21 e6 fc			ld hl, display_fb0  
7237			cpr:	  
7237				; loop for cursor whole row  
7237 0e 28			ld c, display_cols  
7239 23			cpr1:	inc hl  
723a 0d				dec c  
723b 20 fc			jr nz, cpr1  
723d 05				dec b  
723e 20 f7			jr nz, cpr  
7240			  
7240				; add col	  
7240			  
7240 23			cpr2:	inc hl  
7241 1d				dec e  
7242 20 fc			jr nz, cpr2  
7244			  
7244 c1				pop bc  
7245 c9				ret  
7246				  
7246			  
7246			  
7246			  
7246			  
7246			; write the frame buffer given in hl to hardware   
7246 22 fe fa		write_display: ld (display_write_tmp), hl 	   
7249 3e 00			ld a, kLCD_Line1  
724b cd 55 73		            CALL fLCD_Pos       ;Position cursor to location in A  
724e 06 28			ld b, display_cols  
7250 ed 5b fe fa		ld de, (display_write_tmp)  
7254 cd a0 72			call write_len_string  
7257				  
7257				  
7257 2a fe fa			ld hl, (display_write_tmp)  
725a 11 28 00			ld de, display_cols  
725d 19				add hl,de  
725e 22 fe fa			ld (display_write_tmp),hl  
7261			  
7261				  
7261 3e 28			ld a, kLCD_Line2  
7263 cd 55 73		            CALL fLCD_Pos       ;Position cursor to location in A  
7266 06 28			ld b, display_cols  
7268 ed 5b fe fa		ld de, (display_write_tmp)  
726c cd a0 72			call write_len_string  
726f				  
726f 2a fe fa			ld hl, (display_write_tmp)  
7272 11 28 00			ld de, display_cols  
7275 19				add hl,de  
7276 22 fe fa			ld (display_write_tmp),hl  
7279			  
7279				  
7279 3e 50			ld a, kLCD_Line3  
727b cd 55 73		            CALL fLCD_Pos       ;Position cursor to location in A  
727e 06 28			ld b, display_cols  
7280 ed 5b fe fa		ld de, (display_write_tmp)  
7284 cd a0 72			call write_len_string  
7287				  
7287 2a fe fa			ld hl, (display_write_tmp)  
728a 11 28 00			ld de, display_cols  
728d 19				add hl,de  
728e 22 fe fa			ld (display_write_tmp),hl  
7291			  
7291				  
7291 3e 78			ld a, kLCD_Line4  
7293 cd 55 73		            CALL fLCD_Pos       ;Position cursor to location in A  
7296 06 28			ld b, display_cols  
7298 ed 5b fe fa		ld de, (display_write_tmp)  
729c cd a0 72			call write_len_string  
729f c9					ret  
72a0				  
72a0				; write out a fixed length string given in b from de  
72a0			  
72a0 1a			write_len_string:   LD   A, (DE)        ;Get character from string  
72a1 cd 0d 73		            CALL fLCD_Data      ;Write character to display  
72a4 13				inc de  
72a5 10 f9			djnz write_len_string  
72a7 c9				ret  
72a8			  
72a8			; Some other things to do  
72a8			;            LD   A, kLCD_Clear ;Display clear  
72a8			;            LD   A, kLCD_Blink ;Display on with blinking block cursor  
72a8			;            LD   A, kLCD_Under ;Display on with underscore cursor  
72a8			;            LD   A, kLCD_On     ;Display on with no cursor  
72a8			;            ;LD   A, kLCD_Off   ;Display off  
72a8			;            CALL fLCD_Inst      ;Send instruction to display  
72a8			;  
72a8			;  
72a8			;            halt  
72a8			;  
72a8			;  
72a8			;MsgHello:   DB  "Hello World!",0  
72a8			;MsgLiNC80:   DB  "From my Z80-homebrew",0  
72a8			  
72a8			; Custom characters 5 pixels wide by 8 pixels high  
72a8			; Up to 8 custom characters can be defined  
72a8			;BitMaps:      
72a8			;; Character 0x00 = Battery icon  
72a8			;            DB  01110b  
72a8			;            DB  11011b  
72a8			;            DB  10001b  
72a8			;            DB  10001b  
72a8			;            DB  11111b  
72a8			;            DB  11111b  
72a8			;            DB  11111b  
72a8			;            DB  11111b  
72a8			;; Character 0x01 = Bluetooth icon  
72a8			;            DB  01100b  
72a8			;            DB  01010b  
72a8			;            DB  11100b  
72a8			;            DB  01000b  
72a8			;            DB  11100b  
72a8			;            DB  01010b  
72a8			;            DB  01100b  
72a8			;            DB  00000b  
72a8			;  
72a8			  
72a8			  
72a8			; **********************************************************************  
72a8			; **  Alphanumeric LCD support                  by Stephen C Cousins  **  
72a8			; **********************************************************************  
72a8			;  
72a8			; **  Written as a Small Computer Monitor App   
72a8			; **  Version 0.1 SCC 2018-05-16  
72a8			; **  www.scc.me.uk  
72a8			;  
72a8			; **********************************************************************  
72a8			;  
72a8			; This module provides support for alphanumeric LCD modules using with  
72a8			; *  HD44780 (or compatible) controller  
72a8			; *  5 x 7 pixel fonts  
72a8			; *  Up to 80 characters in total (eg. 4 lines of 20 characters)  
72a8			; *  Interface via six digital outputs to the display (see below)  
72a8			;  
72a8			; LCD module pinout:  
72a8			;   1  Vss   0v supply  
72a8			;   2  Vdd   5v supply  
72a8			;   3  Vo    LCD input voltage (near zero volts via potentiometer)  
72a8			;   4  RS    High = data, Low = instruction  
72a8			;   5  R/W   High = Read, Low = Write  
72a8			;   6  E     Enable signal (active high)  
72a8			;   7  DB0   Data bit 0  
72a8			;   8  DB1   Data bit 1  
72a8			;   9  DB2   Data bit 2  
72a8			;  10  DB3   Data bit 3  
72a8			;  11  DB4   Data bit 4  
72a8			;  12  DB5   Data bit 5  
72a8			;  13  DB6   Data bit 6  
72a8			;  14  DB7   Data bit 7  
72a8			;  15  A     Backlight anode (+)  
72a8			;  16  K     Backlight cathode (-)  
72a8			;  
72a8			; This interfacing method uses 4-bit data mode and uses time delays  
72a8			; rather than polling the display's ready status. As a result the   
72a8			; interface only requires 6 simple output lines:  
72a8			;   LCD E   = Microcomputer output port bit <kLCDBitE>  
72a8			;   LCD RS  = Microcomputer output port bit <kLCDBitRS>  
72a8			;   LCD DB4 = Microcomputer output port bit 4  
72a8			;   LCD DB5 = Microcomputer output port bit 5  
72a8			;   LCD DB6 = Microcomputer output port bit 6  
72a8			;   LCD DB7 = Microcomputer output port bit 7  
72a8			; Display's R/W is connected to 0v so it is always in write mode  
72a8			; All 6 connections must be on the same port address <kLCDPrt>  
72a8			; This method also allows a decent length of cable from micro to LCD  
72a8			;  
72a8			; **********************************************************************  
72a8			;  
72a8			; To include the code for any given function provided by this module,   
72a8			; add the appropriate #REQUIRES <FunctionName> statement at the top of   
72a8			; the parent source file.  
72a8			; For example:  #REQUIRES   uHexPrefix  
72a8			;  
72a8			; Also #INCLUDE this file at some point after the #REQUIRES statements  
72a8			; in the parent source file.  
72a8			; For example:  #INCLUDE    ..\_CodeLibrary\Utilities.asm  
72a8			;  
72a8			; These are the function names provided by this module:  
72a8			; fLCD_Init                     ;Initialise LCD  
72a8			; fLCD_Inst                     ;Send instruction to LCD  
72a8			; fLCD_Data                     ;Send data byte to LCD  
72a8			; fLCD_Pos                      ;Position cursor  
72a8			; fLCD_Str                      ;Display string  
72a8			; fLCD_Def                      ;Define custom character  
72a8			;  
72a8			; **********************************************************************  
72a8			;  
72a8			; Requires SCMonAPI.asm to also be included in the project  
72a8			;  
72a8			  
72a8			  
72a8			; **********************************************************************  
72a8			; **  Constants  
72a8			; **********************************************************************  
72a8			  
72a8			; Constants that must be defined externally  
72a8			;kLCDPrt:   EQU 0xc0           ;Port address used for LCD  
72a8			;kLCDBitRS: EQU 2              ;Port bit for LCD RS signal  
72a8			;kLCDBitE:  EQU 3              ;Port bit for LCD E signal  
72a8			;kLCDWidth: EQU 20             ;Width in characters  
72a8			  
72a8			; general line offsets in any frame buffer  
72a8			  
72a8			  
72a8			display_row_1: equ 0  
72a8			display_row_2: equ display_row_1+display_cols  
72a8			display_row_3: equ display_row_2 + display_cols  
72a8			display_row_4: equ display_row_3 + display_cols  
72a8			;display_row_4_eol:   
72a8			  
72a8			  
72a8			; Cursor position values for the start of each line  
72a8			  
72a8			; E  
72a8			kLCD_Line1: EQU 0x00   
72a8			kLCD_Line2: EQU kLCD_Line1+kLCDWidth  
72a8			; E1  
72a8			kLCD_Line3: EQU kLCD_Line2+kLCDWidth  
72a8			kLCD_Line4: EQU kLCD_Line3+kLCDWidth   
72a8			  
72a8			; Instructions to send as A register to fLCD_Inst  
72a8			kLCD_Clear: EQU 00000001b     ;LCD clear  
72a8			kLCD_Off:   EQU 00001000b     ;LCD off  
72a8			kLCD_On:    EQU 00001100b     ;LCD on, no cursor or blink  
72a8			kLCD_Under: EQU 00001110b     ;LCD on, cursor = underscore  
72a8			kLCD_Blink: EQU 00001101b     ;LCD on, cursor = blink block  
72a8			kLCD_Both:  EQU 00001111b     ;LCD on, cursor = under+blink  
72a8			  
72a8			; Constants used by this code module  
72a8			kLCD_Clr:   EQU 00000001b     ;LCD command: Clear display  
72a8			kLCD_Pos:   EQU 10000000b     ;LCD command: Position cursor  
72a8			kLCD_Def:   EQU 01000000b     ;LCD command: Define character  
72a8			  
72a8			  
72a8			  
72a8			; **********************************************************************  
72a8			; **  LCD support functions  
72a8			; **********************************************************************  
72a8			  
72a8			; Initialise alphanumeric LCD module  
72a8			; LCD control register codes:  
72a8			;   DL   0 = 4-bit mode        1 = 8-bit mode  
72a8			;   N    0 = 1-line mode       1 = 2-line mode  
72a8			;   F    0 = Font 5 x 8        1 = Font 5 x 11  
72a8			;   D    0 = Display off       1 = Display on  
72a8			;   C    0 = Cursor off        1 = Cursor on  
72a8			;   B    0 = Blinking off      1 = Blinking on  
72a8			;   ID   0 = Decrement mode    1 = Increment mode  
72a8			;   SH   0 = Entire shift off  1 = Entire shift on  
72a8 3e 28		fLCD_Init:  LD   A, 40  
72aa cd cf 73		            CALL LCDDelay       ;Delay 40ms after power up  
72ad			; For reliable reset set 8-bit mode - 3 times  
72ad cd 9f 73		            CALL WrFn8bit       ;Function = 8-bit mode  
72b0 cd 9f 73		            CALL WrFn8bit       ;Function = 8-bit mode  
72b3 cd 9f 73		            CALL WrFn8bit       ;Function = 8-bit mode  
72b6			; Set 4-bit mode  
72b6 cd 9b 73		            CALL WrFn4bit       ;Function = 4-bit mode  
72b9 cd cd 73		            CALL LCDDelay1      ;Delay 37 us or more  
72bc			; Function set  
72bc 3e 28		            LD   A, 00101000b  ;Control reg:  0  0  1  DL N  F  x  x  
72be cd d1 72		            CALL fLCD_Inst      ;2 line, display on  
72c1			; Display On/Off control  
72c1 3e 0c		            LD   A, 00001100b  ;Control reg:  0  0  0  0  1  D  C  B   
72c3 cd d1 72		            CALL fLCD_Inst      ;Display on, cursor on, blink off  
72c6			; Display Clear  
72c6 3e 01		            LD   A, 00000001b  ;Control reg:  0  0  0  0  0  0  0  1  
72c8 cd d1 72		            CALL fLCD_Inst      ;Clear display  
72cb			; Entry mode  
72cb 3e 06		            LD   A, 00000110b  ;Control reg:  0  0  0  0  0  1  ID SH  
72cd cd d1 72		            CALL fLCD_Inst      ;Increment mode, shift off  
72d0			; Display module now initialised  
72d0 c9			            RET  
72d1			; ok to here  
72d1			  
72d1			; Write instruction to LCD  
72d1			;   On entry: A = Instruction byte to be written  
72d1			;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved  
72d1 f5			fLCD_Inst:  PUSH AF  
72d2 f5			            PUSH AF  
72d3 cd e5 72		            CALL Wr4bits       ;Write bits 4 to 7 of instruction  
72d6 f1			            POP  AF  
72d7 17			            RLA                 ;Rotate bits 0-3 into bits 4-7...  
72d8 17			            RLA  
72d9 17			            RLA  
72da 17			            RLA  
72db cd e5 72		            CALL Wr4bits       ;Write bits 0 to 3 of instruction  
72de 3e 02		            LD   A, 2  
72e0 cd cf 73		            CALL LCDDelay       ;Delay 2 ms to complete   
72e3 f1			            POP  AF  
72e4 c9			            RET  
72e5			Wr4bits:   
72e5 f5					push af  
72e6 3a 00 fb				ld a, (display_lcde1e2)  
72e9 fe 00				cp 0     ; e  
72eb 20 10				jr nz, .wea2	  
72ed f1					pop af  
72ee e6 f0			    AND  0xF0           ;Mask so we only have D4 to D7  
72f0 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
72f2 cb df		            SET  kLCDBitE, A	    ; TODO decide which E is being set  
72f4 cb 87		            res  kLCDBitE2, A	    ; TODO decide which E is being set  
72f6 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=Low  
72f8 cb 9f		            RES  kLCDBitE, A        ; TODO decide which E is being set  
72fa d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
72fc c9			            RET  
72fd f1			.wea2:		pop af  
72fe e6 f0			    AND  0xF0           ;Mask so we only have D4 to D7  
7300 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
7302 cb c7		            SET  kLCDBitE2, A	    ; TODO decide which E is being set  
7304 cb 9f		            res  kLCDBitE, A	    ; TODO decide which E is being set  
7306 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=Low  
7308 cb 87		            RES  kLCDBitE2, A        ; TODO decide which E is being set  
730a d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
730c c9			            RET  
730d			  
730d			  
730d			; Write data to LCD  
730d			;   On entry: A = Data byte to be written  
730d			;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved  
730d f5			fLCD_Data:  PUSH AF  
730e f5			            PUSH AF  
730f cd 21 73		            CALL Wr4bitsa       ;Write bits 4 to 7 of data byte  
7312 f1			            POP  AF  
7313 17			            RLA                 ;Rotate bits 0-3 into bits 4-7...  
7314 17			            RLA  
7315 17			            RLA  
7316 17			            RLA  
7317 cd 21 73		            CALL Wr4bitsa       ;Write bits 0 to 3 of data byte  
731a 3e 96		            LD   A, 150  
731c 3d			Wait:      DEC  A              ;Wait a while to allow data   
731d 20 fd		            JR   NZ, Wait      ;  write to complete  
731f f1			            POP  AF  
7320 c9			            RET  
7321			Wr4bitsa:     
7321 f5					push af  
7322 3a 00 fb				ld a, (display_lcde1e2)  
7325 fe 00				cp 0     ; e1  
7327 20 16				jr nz, .we2	  
7329 f1					pop af  
732a e6 f0			    AND  0xF0           ;Mask so we only have D4 to D7  
732c cb d7		            SET  kLCDBitRS, A  
732e d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=High  
7330 cb df		            SET  kLCDBitE, A      ; TODO Decide which E is being set  
7332 cb 87		            res  kLCDBitE2, A      ; TODO Decide which E is being set  
7334 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=High  
7336 cb 9f		            RES  kLCDBitE, A       ; TODO Decide which E is being set  
7338 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=High  
733a cb 97		            RES  kLCDBitRS, A  
733c d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
733e c9			            RET  
733f f1			.we2:		pop af  
7340 e6 f0			    AND  0xF0           ;Mask so we only have D4 to D7  
7342 cb d7		            SET  kLCDBitRS, A  
7344 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=High  
7346 cb c7		            SET  kLCDBitE2, A      ; TODO Decide which E is being set  
7348 cb 9f		            res  kLCDBitE, A      ; TODO Decide which E is being set  
734a d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=High  
734c cb 87		            RES  kLCDBitE2, A       ; TODO Decide which E is being set  
734e d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=High  
7350 cb 97		            RES  kLCDBitRS, A  
7352 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
7354 c9			            RET  
7355			  
7355			  
7355			; Position cursor to specified location  
7355			;   On entry: A = Cursor position  
7355			;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved  
7355 f5			fLCD_Pos:   PUSH AF  
7356					; at this point set the E1 or E2 flag depending on position  
7356			  
7356 c5					push bc  
7357			;		push af  
7357 06 00				ld b, 0  
7359 4f					ld c, a  
735a 3e 4f				ld a, kLCD_Line3-1  
735c b7			 		or a      ;clear carry flag  
735d 99					sbc a,c    ; TODO may need to sub 80 from a to put in context of current frame    
735e 38 04				jr c, .pe1  
7360			  
7360					; E selection  
7360 cb 80				res 0, b         ; bit 0 unset e  
7362			;		pop af    ; before line 3 so recover orig pos  
7362			;		ld c, a    ; save for poking back  
7362 18 06				jr .peset	          
7364			.pe1:          	; E2 selection  
7364 cb c0				set 0, b         ; bit 0 set e1  
7366 79					ld a, c  
7367 de 4f				sbc a, kLCD_Line3-1  
7369 4f					ld c, a	         ; save caculated offset  
736a			;		pop af     ; bin this original value now we have calculated form  
736a			  
736a			.peset:		; set bit  
736a 78					ld a, b  
736b 32 00 fb				ld (display_lcde1e2), a 	  
736e 79					ld a, c  
736f c1					pop bc  
7370			  
7370 f6 80		            OR   kLCD_Pos       ;Prepare position cursor instruction  
7372 cd d1 72		            CALL fLCD_Inst      ;Write instruction to LCD  
7375 f1			            POP  AF  
7376 c9			            RET  
7377			  
7377			  
7377			; Output text string to LCD  
7377			;   On entry: DE = Pointer to null terminated text string  
7377			;   On exit:  BC HL IX IY I AF' BC' DE' HL' preserved  
7377 1a			fLCD_Str:   LD   A, (DE)        ;Get character from string  
7378 b7			            OR   A              ;Null terminator?  
7379 c8			            RET  Z              ;Yes, so finished  
737a cd 0d 73		            CALL fLCD_Data      ;Write character to display  
737d 13			            INC  DE             ;Point to next character  
737e 18 f7		            JR   fLCD_Str       ;Repeat  
7380 c9					ret  
7381			  
7381			; Define custom character  
7381			;   On entry: A = Character number (0 to 7)  
7381			;             DE = Pointer to character bitmap data  
7381			;   On exit:  A = Next character number  
7381			;             DE = Next location following bitmap  
7381			;             BC HL IX IY I AF' BC' DE' HL' preserved  
7381			; Character is   
7381 c5			fLCD_Def:   PUSH BC  
7382 f5			            PUSH AF  
7383 07			            RLCA                ;Calculate location  
7384 07			            RLCA                ;  for bitmap data  
7385 07			            RLCA                ;  = 8 x CharacterNumber  
7386 f6 40		            OR   kLCD_Def       ;Prepare define character instruction  
7388 cd d1 72		            CALL fLCD_Inst      ;Write instruction to LCD  
738b 06 00		            LD   B, 0  
738d 1a			Loop:      LD   A, (DE)        ;Get byte from bitmap  
738e cd 0d 73		            CALL fLCD_Data      ;Write byte to display  
7391 13			            INC  DE             ;Point to next byte  
7392 04			            INC  B              ;Count bytes  
7393 cb 58		            BIT  3, B           ;Finish all 8 bytes?  
7395 28 f6		            JR   Z, Loop       ;No, so repeat  
7397 f1			            POP  AF  
7398 3c			            INC  A              ;Increment character number  
7399 c1			            POP  BC  
739a c9			            RET  
739b			  
739b			  
739b			; **********************************************************************  
739b			; **  Private functions  
739b			; **********************************************************************  
739b			  
739b			; Write function to LCD  
739b			;   On entry: A = Function byte to be written  
739b			;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved  
739b 3e 20		WrFn4bit:   LD   A, 00100000b  ;4-bit mode  
739d 18 02		            JR   WrFunc  
739f 3e 30		WrFn8bit:   LD   A, 00110000b  ;8-bit mode  
73a1 f5			WrFunc:     PUSH AF  
73a2 f5					push af  
73a3 3a 00 fb				ld a, (display_lcde1e2)  
73a6 fe 00				cp 0     ; e1  
73a8 20 0f				jr nz, .wfea2	  
73aa f1					pop af  
73ab d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
73ad cb df		            SET  kLCDBitE, A     ; TODO Decide which E is being set  
73af cb 87		            RES  kLCDBitE2, A      ; TODO Decide which E is being set  
73b1 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=Low  
73b3 cb 9f		            RES  kLCDBitE, A      ; TODO Decide which E is being set  
73b5 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
73b7 18 0d			jr .wfskip  
73b9 f1			.wfea2:		pop af  
73ba d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
73bc cb c7		            SET  kLCDBitE2, A     ; TODO Decide which E is being set  
73be cb 9f		            RES  kLCDBitE, A      ; TODO Decide which E is being set  
73c0 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=Low  
73c2 cb 87		            RES  kLCDBitE2, A      ; TODO Decide which E is being set  
73c4 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
73c6 3e 05		.wfskip:            LD  A, 5  
73c8 cd cf 73		            CALL LCDDelay       ;Delay 5 ms to complete  
73cb f1			            POP  AF  
73cc c9			            RET  
73cd			  
73cd			  
73cd			; Delay in milliseconds  
73cd			;   On entry: A = Number of milliseconds delay  
73cd			;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved  
73cd 3e 01		LCDDelay1:  LD   A, 1           ;Delay by 1 ms  
73cf d5			LCDDelay:   PUSH DE  
73d0 5f			            LD   E, A           ;Delay by 'A' ms  
73d1 16 00		            LD   D, 0  
73d3 cd d2 0c		            CALL aDelayInMS  
73d6 d1			            POP  DE  
73d7 c9			            RET  
73d8			  
73d8			  
73d8			testlcd:  
73d8 3e 00			ld a, kLCD_Line1  
73da cd 55 73			call fLCD_Pos  
73dd 06 28			ld b, 40  
73df 11 0d 74			ld de, .ttext1  
73e2 cd a0 72			call write_len_string  
73e5			  
73e5 3e 28			ld a, kLCD_Line2  
73e7 cd 55 73			call fLCD_Pos  
73ea 06 28			ld b, 40  
73ec 11 36 74			ld de, .ttext2  
73ef cd a0 72			call write_len_string  
73f2 3e 50			ld a, kLCD_Line3  
73f4 cd 55 73			call fLCD_Pos  
73f7 06 28			ld b, 40  
73f9 11 5f 74			ld de, .ttext3  
73fc cd a0 72			call write_len_string  
73ff 3e 78			ld a, kLCD_Line4  
7401 cd 55 73			call fLCD_Pos  
7404 06 28			ld b, 40  
7406 11 88 74			ld de, .ttext4  
7409 cd a0 72			call write_len_string  
740c			  
740c 76				halt  
740d			  
740d			  
740d .. 00		.ttext1: db "A234567890123456789012345678901234567890",0  
7436 .. 00		.ttext2: db "B234567890123456789012345678901234567890",0  
745f .. 00		.ttext3: db "C234567890123456789012345678901234567890",0  
7488 .. 00		.ttext4: db "D234567890123456789012345678901234567890",0  
74b1			   
74b1			  
74b1			  
74b1			; eof  
74b1			  
# End of file firmware_lcd_4x40.asm
74b1			;include "firmware_lcd_4x20.asm" 
74b1			include "firmware_key_5x10.asm" 
74b1			; 5 x 10 decade counter scanner  
74b1			  
74b1			  
74b1			; TODO do cursor shape change for shift keys  
74b1			; TODO hard coded positions for the shift keys. Change to work like 4x4 and detect and then hide them  
74b1			  
74b1			  
74b1			; bit mask for each scan column and row for teing the matrix  
74b1			  
74b1			  
74b1			key_init:  
74b1			  
74b1			; SCMonAPI functions used  
74b1			  
74b1			; Alphanumeric LCD functions used  
74b1			; no need to specify specific functions for this module  
74b1			  
74b1			  
74b1 3e cf		            LD   A, 11001111b  
74b3 d3 c3		            OUT  (portbctl), A  ;Port A = PIO 'control' mode  
74b5			;            LD   A, 00000000b  
74b5 3e 1f		            LD   A, 00011111b  
74b7 d3 c3		            OUT  (portbctl),A   ;Port A = all lines are outputs  
74b9			  
74b9			  
74b9				; TODO Configure cursor shapes  
74b9			  
74b9				; Load cursor shapes   
74b9 3e 01		            LD   A, 1           ;First character to define (0 to 7)  
74bb 11 cb 74		            LD   DE, .cursor_shapes    ;Pointer to start of bitmap data  
74be 06 02		            LD   B, 2           ;Number of characters to define  
74c0 cd 81 73		.DefLoop:   CALL fLCD_Def       ;Define custom character  
74c3 10 fb		            DJNZ .DefLoop       ;Repeat for each character  
74c5			  
74c5 3e 01				ld a, 1  
74c7 32 f6 fa			ld (cursor_shape),a  
74ca c9				ret  
74cb			  
74cb			; Custom characters for cursor shapes 5 pixels wide by 8 pixels high  
74cb			; Up to 8 custom characters can be defined  
74cb			.cursor_shapes:      
74cb			;; Character 0x00 = Normal  
74cb 1f			            DB  11111b  
74cc 1f			            DB  11111b  
74cd 1f			            DB  11111b  
74ce 1f			            DB  11111b  
74cf 1f			            DB  11111b  
74d0 1f			            DB  11111b  
74d1 1f			            DB  11111b  
74d2 1f			            DB  11111b  
74d3			;; Character 0x01 = Modifier  
74d3 1f			            DB  11111b  
74d4 1b			            DB  11011b  
74d5 1b			            DB  11011b  
74d6 1b			            DB  11011b  
74d7 1b			            DB  11011b  
74d8 1f			            DB  11111b  
74d9 1b			            DB  11011b  
74da 1f			            DB  11111b  
74db			  
74db			  
74db			  
74db			  
74db			; Display custom character 0  
74db			;            LD   A, kLCD_Line1+14  
74db			;            CALL fLCD_Pos       ;Position cursor to location in A  
74db			;            LD   A, 0  
74db			;            CALL fLCD_Data      ;Write character in A at cursor  
74db			  
74db			; Display custom character 1  
74db			;            LD   A, kLCD_Line2+14  
74db			;            CALL fLCD_Pos      ;Position cursor to location in A  
74db			;            LD   A, 1  
74db			;            CALL fLCD_Data     ;Write character in A at cursor  
74db			  
74db			; keyboard scanning   
74db			  
74db			; character in from keyboard  
74db			  
74db			; mapping for the pcb layout  
74db			  
74db			.matrix_to_char:  
74db .. 08 05 0a 00			db "1357890",KEY_BS,KEY_UP,KEY_DOWN,0  
74e6 .. 0b 0c 00			db "qweryiop",KEY_LEFT,KEY_RIGHT,0  
74f1 7e .. 0d 00			db KEY_SYMBOLSHIFT,"asdfghjk",KEY_CR,0  
74fc 7e .. 7e 00			db KEY_SHIFT,"zxcvbnm ",KEY_SHIFT,0  
7507 .. 10 11 12 .. 13 00			db "246tu",KEY_F1,KEY_F2,KEY_F3,"l",KEY_F4,0  
7512			.matrix_to_shift:  
7512			  
7512 .. 08 05 0a 00			db "!#%&*()",KEY_BS,KEY_UP,KEY_DOWN,0  
751d .. 07 06 00			db "QWERYIOP",KEY_PREVWORD,KEY_NEXTWORD,0  
7528 7e .. 0d 00			db KEY_SYMBOLSHIFT,"ASDFGHJK",KEY_CR,0  
7533 7e .. 7e 00			db KEY_SHIFT,"ZXCVBNM|",KEY_SHIFT,0  
753e .. .. 14 15 16 .. 17 00			db '"',"$^TU",KEY_F5,KEY_F6,KEY_F7,"L",KEY_F8,0  
7549			  
7549			.matrix_to_symbolshift:  
7549			  
7549 fc ed .. f7 08 05 0a 00			db 252,237,"5789",247,KEY_BS,KEY_UP,KEY_DOWN,0  
7554 .. b0 0e 0f 00			db "-+/=_?~",176,KEY_HOME,KEY_END,0  
755f 7e .. a5 7c db ff 0d 00			db KEY_SYMBOLSHIFT,"[]{}",165,124,219,255,KEY_CR,0  
756a			;		db KEY_SHIFT,"<>,.:;'\\",KEY_SHIFT,0  
756a 7e .. 5c 7e 00	    	 	db KEY_SHIFT,"<>,.:;'",92, KEY_SHIFT,0  
7575 .. f6 eb 7d 7e 18 19 1a df 1b 00			db "@",246,235,125,126,KEY_F9,KEY_F10,KEY_F11,223,KEY_F12,0  
7580			  
7580			  
7580			  
7580			; mapping for a simple straight through breadboard layout  
7580			  
7580			;.matrix_to_char:  
7580			;		db KEY_SHIFT,"zxcv",KEY_UP,KEY_DOWN,"m",KEY_LEFT, KEY_RIGHT,0  
7580			;		db KEY_SHIFT,"zxcvbnm ",KEY_SYMBOLSHIFT,0  
7580			;		db "asdfghjkl",KEY_CR,0  
7580			;		db "qwertyuiop",0  
7580			;		 db "1234567890",0  
7580			;.matrix_to_shift:  
7580			;		db KEY_SHIFT,"zxcv",KEY_UP,KEY_DOWN,"m",KEY_HOME, KEY_END,0  
7580			;		db KEY_SHIFT,"ZXCVBNM",KEY_BS,KEY_SYMBOLSHIFT,0  
7580			;		db "ASDFGHJKL",KEY_CR,0  
7580			;		db "QWERTYUIOP",0  
7580			;		 db "!",'"',"#$%^&*()",0  
7580			;.matrix_to_symbolshift:  
7580			;		db KEY_SHIFT,"zxcv",KEY_UP,KEY_DOWN,"m",KEY_LEFT, KEY_RIGHT,0  
7580			;		db KEY_SHIFT,"<>:;b,.",KEY_BS,KEY_SYMBOLSHIFT,0  
7580			;		db "_?*fghjk=",KEY_CR,0  
7580			;		db "-/+*[]{}@#",0  
7580			;		 db "1234567890",0  
7580			  
7580			;.matrix_to_char: db "D#0*C987B654A321"  
7580			  
7580			  
7580				  
7580			  
7580			; add cin and cin_wait  
7580			  
7580 cd 91 75		cin_wait: 	call cin  
7583						if DEBUG_KEYCINWAIT  
7583							push af  
7583							  
7583							ld hl,key_repeat_ct  
7583							ld (hl),a  
7583							inc hl  
7583							call hexout  
7583							ld hl,key_repeat_ct+3  
7583							ld a,0  
7583							ld (hl),a  
7583			  
7583							    LD   A, kLCD_Line1+11  
7583							    CALL fLCD_Pos       ;Position cursor to location in A  
7583							    LD   DE, key_repeat_ct  
7583							    ;LD   DE, MsgHello  
7583							    CALL fLCD_Str       ;Display string pointed to by DE  
7583			  
7583			  
7583			  
7583							pop af  
7583						endif  
7583 fe 00			cp 0  
7585 28 f9			jr z, cin_wait   ; block until key press  
7587			  
7587							if DEBUG_KEYCINWAIT  
7587								push af  
7587			  
7587								ld a, 'A'	  
7587								ld hl,key_repeat_ct  
7587								ld (hl),a  
7587								inc hl  
7587								ld a,0  
7587								ld (hl),a  
7587			  
7587								    LD   A, kLCD_Line2+11  
7587								    CALL fLCD_Pos       ;Position cursor to location in A  
7587								    LD   DE, key_repeat_ct  
7587								    ;LD   DE, MsgHello  
7587								    CALL fLCD_Str       ;Display string pointed to by DE  
7587			  
7587							call delay500ms  
7587			  
7587								pop af  
7587							endif  
7587 f5				push af   ; save key pressed  
7588			  
7588			.cin_wait1:	  
7588							if DEBUG_KEYCINWAIT  
7588								push af  
7588			  
7588								ld a, 'b'	  
7588								ld hl,key_repeat_ct  
7588								ld (hl),a  
7588								inc hl  
7588								ld a,0  
7588								ld (hl),a  
7588			  
7588								    LD   A, kLCD_Line2+11  
7588								    CALL fLCD_Pos       ;Position cursor to location in A  
7588								    LD   DE, key_repeat_ct  
7588								    ;LD   DE, MsgHello  
7588								    CALL fLCD_Str       ;Display string pointed to by DE  
7588			  
7588			  
7588							call delay500ms  
7588			  
7588								pop af  
7588							endif  
7588			  
7588 cd 91 75		call cin  
758b fe 00			cp 0  
758d 20 f9			jr nz, .cin_wait1  	; wait for key release  
758f			if DEBUG_KEYCINWAIT  
758f				push af  
758f			  
758f				ld a, '3'	  
758f				ld hl,key_repeat_ct  
758f				ld (hl),a  
758f				inc hl  
758f				ld a,0  
758f				ld (hl),a  
758f			  
758f			            LD   A, kLCD_Line2+11  
758f			            CALL fLCD_Pos       ;Position cursor to location in A  
758f			            LD   DE, key_repeat_ct  
758f			            ;LD   DE, MsgHello  
758f			            CALL fLCD_Str       ;Display string pointed to by DE  
758f			  
758f			  
758f			call delay500ms  
758f			  
758f				pop af  
758f			endif  
758f			  
758f f1				pop af   ; get key  
7590 c9				ret  
7591			  
7591			  
7591			; cin - key non-blocking except for keybounce release  
7591			  
7591 cd af 75		cin: 	call .mtoc  
7594			  
7594			if DEBUG_KEYCIN  
7594				push af  
7594				  
7594				ld hl,key_repeat_ct  
7594				ld (hl),a  
7594				inc hl  
7594				call hexout  
7594				ld hl,key_repeat_ct+3  
7594				ld a,0  
7594				ld (hl),a  
7594			  
7594			            LD   A, kLCD_Line3+15  
7594			            CALL fLCD_Pos       ;Position cursor to location in A  
7594			            LD   DE, key_repeat_ct  
7594			            ;LD   DE, MsgHello  
7594			            CALL fLCD_Str       ;Display string pointed to by DE  
7594			  
7594			  
7594			call delay500ms  
7594			  
7594				pop af  
7594			endif  
7594			  
7594			  
7594				; no key held  
7594 fe 00			cp 0  
7596 c8				ret z  
7597			  
7597			if DEBUG_KEYCIN  
7597				push af  
7597			  
7597				ld a, '1'	  
7597				ld hl,key_repeat_ct  
7597				ld (hl),a  
7597				inc hl  
7597				ld a,0  
7597				ld (hl),a  
7597			  
7597			            LD   A, kLCD_Line4+15  
7597			            CALL fLCD_Pos       ;Position cursor to location in A  
7597			            LD   DE, key_repeat_ct  
7597			            ;LD   DE, MsgHello  
7597			            CALL fLCD_Str       ;Display string pointed to by DE  
7597			  
7597			  
7597			call delay500ms  
7597			  
7597				pop af  
7597			endif  
7597			  
7597				; stop key bounce  
7597			  
7597 32 c6 fd			ld (key_held),a		 ; save it  
759a 47				ld b, a  
759b			  
759b c5			.cina1:	push bc  
759c			if DEBUG_KEYCIN  
759c				push af  
759c			  
759c				ld hl,key_repeat_ct  
759c				inc hl  
759c				call hexout  
759c				ld hl,key_repeat_ct+3  
759c				ld a,0  
759c				ld (hl),a  
759c				ld hl,key_repeat_ct  
759c				ld a, '2'	  
759c				ld (hl),a  
759c			  
759c			            LD   A, kLCD_Line4+15  
759c			            CALL fLCD_Pos       ;Position cursor to location in A  
759c			            LD   DE, key_repeat_ct  
759c			            ;LD   DE, MsgHello  
759c			            CALL fLCD_Str       ;Display string pointed to by DE  
759c			  
759c				pop af  
759c			endif  
759c cd af 75			call .mtoc  
759f c1				pop bc  
75a0 b8				cp b  
75a1 28 f8			jr z, .cina1  
75a3 78				ld a,b		  
75a4			if DEBUG_KEYCIN  
75a4				push af  
75a4			  
75a4				ld hl,key_repeat_ct  
75a4				inc hl  
75a4				call hexout  
75a4				ld hl,key_repeat_ct+3  
75a4				ld a,0  
75a4				ld (hl),a  
75a4				ld hl,key_repeat_ct  
75a4				ld a, '3'	  
75a4				ld (hl),a  
75a4			  
75a4			            LD   A, kLCD_Line4+15  
75a4			            CALL fLCD_Pos       ;Position cursor to location in A  
75a4			            LD   DE, key_repeat_ct  
75a4			            ;LD   DE, MsgHello  
75a4			            CALL fLCD_Str       ;Display string pointed to by DE  
75a4			  
75a4				pop af  
75a4			endif  
75a4 c9				ret  
75a5			  
75a5			; cinndb - key non-blocking without keybounce release  
75a5			  
75a5 cd af 75		cinndb: 	call .mtoc  
75a8			  
75a8			if DEBUG_KEYCIN  
75a8				push af  
75a8				  
75a8				ld hl,key_repeat_ct  
75a8				ld (hl),a  
75a8				inc hl  
75a8				call hexout  
75a8				ld hl,key_repeat_ct+3  
75a8				ld a,0  
75a8				ld (hl),a  
75a8			  
75a8			            LD   A, kLCD_Line3+15  
75a8			            CALL fLCD_Pos       ;Position cursor to location in A  
75a8			            LD   DE, key_repeat_ct  
75a8			            ;LD   DE, MsgHello  
75a8			            CALL fLCD_Str       ;Display string pointed to by DE  
75a8			  
75a8			  
75a8			call delay500ms  
75a8			  
75a8				pop af  
75a8			endif  
75a8			  
75a8			  
75a8				; no key held  
75a8 fe 00			cp 0  
75aa c8				ret z  
75ab			  
75ab			if DEBUG_KEYCIN  
75ab				push af  
75ab			  
75ab				ld a, '1'	  
75ab				ld hl,key_repeat_ct  
75ab				ld (hl),a  
75ab				inc hl  
75ab				ld a,0  
75ab				ld (hl),a  
75ab			  
75ab			            LD   A, kLCD_Line4+15  
75ab			            CALL fLCD_Pos       ;Position cursor to location in A  
75ab			            LD   DE, key_repeat_ct  
75ab			            ;LD   DE, MsgHello  
75ab			            CALL fLCD_Str       ;Display string pointed to by DE  
75ab			  
75ab			  
75ab			call delay500ms  
75ab			  
75ab				pop af  
75ab			endif  
75ab			  
75ab 32 c6 fd			ld (key_held),a		 ; save it  
75ae			  
75ae			if DEBUG_KEYCIN  
75ae				push af  
75ae			  
75ae				ld hl,key_repeat_ct  
75ae				inc hl  
75ae				call hexout  
75ae				ld hl,key_repeat_ct+3  
75ae				ld a,0  
75ae				ld (hl),a  
75ae				ld hl,key_repeat_ct  
75ae				ld a, '3'	  
75ae				ld (hl),a  
75ae			  
75ae			            LD   A, kLCD_Line4+15  
75ae			            CALL fLCD_Pos       ;Position cursor to location in A  
75ae			            LD   DE, key_repeat_ct  
75ae			            ;LD   DE, MsgHello  
75ae			            CALL fLCD_Str       ;Display string pointed to by DE  
75ae			  
75ae				pop af  
75ae			endif  
75ae c9				ret  
75af			; detect keyboard modifier key press and apply new overlay to the face key held  
75af			; hl is the key modifer flag, de map to apply to key_face_held and store in key_actual_pressed  
75af			  
75af			;.cin_map_modifier:   
75af			;	ld a, (hl)  
75af			;	and 255  
75af			;	ret NZ		; modifier key not flagged  
75af			;  
75af			;	; get key face  
75af			;  
75af			;	ld b,(key_face_held)  
75af			;  
75af			;	ld b, key_cols * key_rows  
75af			;  
75af			;	push de  
75af			;	pop hl  
75af			;  
75af			;.mmod1: ld a,(hl)   ; get map test  
75af			;	cp b  
75af			;	jr z, .mmod2  
75af			;  
75af			;  
75af			;  
75af			;.mmod2: inc hl    ;   
75af			;  
75af			;	  
75af			;  
75af			;	  
75af			;  
75af			;	ld hl,key_actual_pressed  
75af			;	ld (hl),a,  
75af			;	ret  
75af			  
75af			; map matrix key held to char on face of key  
75af			  
75af			.mtoc:  
75af			  
75af			; test decade counter strobes  
75af			  
75af			;.decadetest1:  
75af			  
75af			; reset counter  
75af			;ld a, 128  
75af			;out (portbdata),a  
75af			  
75af			  
75af			;ld b, 5  
75af			;.dec1:  
75af			;ld a, 0  
75af			;out (portbdata),a  
75af			;call delay1s  
75af			  
75af			;ld a, 32  
75af			;out (portbdata),a  
75af			;call delay1s  
75af			;call delay1s  
75af			;call delay1s  
75af			;  
75af			;ld a, 64+32  
75af			;out (portbdata),a  
75af			;call delay1s  
75af			;;djnz .dec1  
75af			;  
75af			;jp .decadetest1  
75af			  
75af			  
75af			  
75af			  
75af			  
75af			  
75af			  
75af			  
75af			  
75af			  
75af				; scan keyboard matrix and generate raw scan map  
75af cd 42 76			call matrix  
75b2			  
75b2				; reuse c bit 0 left modifer button - ie shift  
75b2			        ; reuse c bit 1 for right modifer button - ie symbol shift  
75b2				; both can be used with their other mappings and if seen together can do extra mappings (forth keywords????)  
75b2			  
75b2 0e 00			ld c, 0  
75b4			  
75b4				; TODO set flags for modifer key presses   
75b4				; TODO do a search for modifer key...  
75b4			  
75b4				;ld hl,keyscan_table_row4  
75b4 21 25 fe			ld hl,keyscan_table_row2  
75b7			  
75b7 7e				ld a, (hl)  
75b8 fe 23			cp '#'  
75ba 20 07			jr nz, .nextmodcheck  
75bc cb c1			set 0, c  
75be 21 12 75			ld hl, .matrix_to_shift  
75c1 18 21			jr .dokeymap  
75c3				; TODO for now igonre  
75c3			.nextmodcheck:  
75c3 21 1a fe			ld hl,keyscan_table_row3  
75c6			  
75c6 7e				ld a, (hl)  
75c7 fe 23			cp '#'  
75c9 20 07			jr nz, .nextmodcheck2  
75cb cb c9			set 1, c   
75cd 21 49 75			ld hl, .matrix_to_symbolshift  
75d0 18 12			jr .dokeymap  
75d2			.nextmodcheck2:  
75d2 21 2e fe			ld hl,keyscan_table_row2+9    ; right shift  
75d5			  
75d5 7e				ld a, (hl)  
75d6 fe 23			cp '#'  
75d8 20 07			jr nz, .donemodcheck  
75da cb c9			set 1, c   
75dc 21 12 75			ld hl, .matrix_to_shift  
75df 18 03			jr .dokeymap  
75e1			  
75e1				; no modifer found so just map to normal keys  
75e1				; get mtoc map matrix to respective keys  
75e1			;	ld hl, .matrix_to_char  
75e1			;	ld hl, .matrix_to_char  
75e1			;	ld b, ((key_cols+1)*key_rows)    ; 30 keys to remap + 8 nulls   
75e1			;	ld a, KEY_SHIFT  
75e1			;	call findchar  
75e1			;  
75e1			;	; got offset to key modifer in b  
75e1			;  
75e1			;	ld hl,keyscan_table_row5  
75e1			;  
75e1			;	ld a,b  
75e1			;	call addatohl  
75e1			;	ld a,(hl)  
75e1			;  
75e1			;	cp '#'  
75e1			;	jr nz, .nextmodcheck  
75e1			;	set 0, c  
75e1			;	ld hl, .matrix_to_char  
75e1			;	jr .dokeymap  
75e1			;	; TODO for now igonre  
75e1			;.nextmodcheck:  
75e1			;	ld hl, .matrix_to_symbolshift  
75e1			;	ld b, ((key_cols+1)*key_rows)    ; 30 keys to remap + 8 nulls   
75e1			;	ld a, KEY_SYMBOLSHIFT  
75e1			;	call findchar  
75e1			;  
75e1			;  
75e1			;	; got offset to key modifer in b  
75e1			;  
75e1			;	ld hl,keyscan_table_row5  
75e1			;  
75e1			;	ld a,b  
75e1			;	call addatohl  
75e1			;	ld a,(hl)  
75e1			;  
75e1			;	cp '#'  
75e1			;	jr nz, .donemodcheck  
75e1			;	set 1, c   
75e1			;	ld hl, .matrix_to_symbolshift  
75e1			;	jr .dokeymap  
75e1			  
75e1			  
75e1			  
75e1			.donemodcheck:  
75e1				; no modifer found so just map to normal keys  
75e1				; get mtoc map matrix to respective keys  
75e1 21 db 74			ld hl, .matrix_to_char  
75e4			  
75e4			.dokeymap:  
75e4				;ld (key_fa), c   
75e4 cd fd 75			call .mapkeys  
75e7			  
75e7			  
75e7			if DEBUG_KEY  
75e7			  
75e7			; Display text on first line  
75e7			            LD   A, kLCD_Line1  
75e7			            CALL fLCD_Pos       ;Position cursor to location in A  
75e7			            LD   DE, keyscan_table_row1  
75e7			            ;LD   DE, MsgHello  
75e7			            CALL fLCD_Str       ;Display string pointed to by DE  
75e7			  
75e7			; Display text on second line  
75e7			            LD   A, kLCD_Line2  
75e7			            CALL fLCD_Pos       ;Position cursor to location in A  
75e7			            LD   DE, keyscan_table_row2  
75e7			            CALL fLCD_Str       ;Display string pointed to by DE  
75e7			            LD   A, kLCD_Line3  
75e7			            CALL fLCD_Pos       ;Position cursor to location in A  
75e7			            LD   DE, keyscan_table_row3  
75e7			            CALL fLCD_Str       ;Display string pointed to by DE  
75e7			            LD   A, kLCD_Line4  
75e7			            CALL fLCD_Pos       ;Position cursor to location in A  
75e7			            LD   DE, keyscan_table_row4  
75e7			            CALL fLCD_Str       ;Display string pointed to by DE  
75e7			            LD   A, kLCD_Line1+10  
75e7			            CALL fLCD_Pos       ;Position cursor to location in A  
75e7			            LD   DE, keyscan_table_row5  
75e7			            CALL fLCD_Str       ;Display string pointed to by DE  
75e7			  
75e7				;call delay250ms  
75e7			endif  
75e7			;	jp testkey  
75e7			  
75e7			; get first char reported  
75e7			  
75e7 21 04 fe			ld hl,keyscan_table_row5  
75ea			  
75ea				;ld b, 46   ; 30 keys to remap + 8 nulls   
75ea 06 37			ld b, (key_cols+1)*key_rows    ; 30 keys to remap + 8 nulls   
75ec			.findkey:  
75ec 7e				ld a,(hl)  
75ed fe 00			cp 0  
75ef 28 04			jr z, .nextkey  
75f1 fe 7e			cp KEY_MATRIX_NO_PRESS  
75f3 20 06			jr nz, .foundkey  
75f5			.nextkey:  
75f5 23				inc hl  
75f6 10 f4			djnz .findkey  
75f8 3e 00			ld a,0  
75fa c9				ret  
75fb			.foundkey:  
75fb 7e				ld a,(hl)  
75fc c9				ret  
75fd				  
75fd			  
75fd			; convert the raw key map given hl for destination key  
75fd			.mapkeys:  
75fd 11 04 fe			ld de,keyscan_table_row5  
7600			  
7600 06 37			ld b, (key_cols+1)*key_rows    ; 30 keys to remap + 8 nulls   
7602			.remap:  
7602 1a				ld a,(de)  
7603 fe 23			cp '#'  
7605 20 02			jr nz, .remapnext  
7607				;CALLMONITOR  
7607 7e				ld a,(hl)  
7608 12				ld (de),a  
7609			  
7609			  
7609			  
7609			.remapnext:  
7609 23				inc hl  
760a 13				inc de  
760b 10 f5			djnz .remap  
760d				  
760d c9				ret  
760e			  
760e			  
760e			  
760e			.mtocold2:  
760e			  
760e			;	; flag if key D is held down and remove from reporting  
760e			;	ld bc, .key_map_fd    
760e			;	ld hl, keyscan_table  
760e			;	ld de, key_fd  
760e			;	call .key_shift_hold  
760e			;	cp 255  
760e			;	jr z, .cinmap  
760e			;	; flag if key C is held down and remove from reporting  
760e			;	ld bc, .key_map_fc    
760e			;	ld hl, keyscan_table+key_cols  
760e			;	ld de, key_fc  
760e			;	call .key_shift_hold  
760e			;	cp 255  
760e			;	jr z, .cinmap  
760e			;	; flag if key B is held down and remove from reporting  
760e			;	ld bc, .key_map_fb    
760e			;	ld hl, keyscan_table+(key_cols*2)  
760e			;	ld de, key_fb  
760e			;	call .key_shift_hold  
760e			;	cp 255  
760e			;	jr z, .cinmap  
760e			;	; flag if key A is held down and remove from reporting  
760e			;	ld bc, .key_map_fa    
760e			;	ld hl, keyscan_table+(key_cols*3)  
760e			;	ld de, key_fa  
760e			;	call .key_shift_hold  
760e			;	cp 255  
760e			;	jr z, .cinmap  
760e			  
760e 11 db 74			ld de, .matrix_to_char  
7611			  
7611			  
7611			.cinmap1:   
7611				if DEBUG_KEY  
7611			            LD   A, kLCD_Line4  
7611			            CALL fLCD_Pos       ;Position cursor to location in A  
7611					push de  
7611			            LD   DE, keyscan_table  
7611			            CALL fLCD_Str       ;Display string pointed to by DE  
7611					pop de  
7611				endif  
7611			  
7611				; scan key matrix table for any held key  
7611			  
7611				; de holds either the default matrix or one selected above  
7611			  
7611 21 d1 fd			ld hl, keyscan_table  
7614 06 32			ld b,key_cols*key_rows  
7616			  
7616 7e			.cin11:	ld a,(hl)  
7617 fe 23			cp '#'  
7619 28 08			jr z, .cinhit1  
761b 23				inc hl  
761c 13				inc de  
761d 05				dec b  
761e 20 f6			jr nz, .cin11  
7620				; no key found held  
7620 3e 00			ld a,0  
7622 c9				ret  
7623 d5			.cinhit1: push de  
7624 e1				pop hl  
7625 7e				ld a,(hl)  
7626 c9				ret  
7627			  
7627			; flag a control key is held   
7627			; hl is key pin, de is flag indicator  
7627			  
7627			.key_shift_hold1:  
7627 c5				push bc  
7628 3e 01			ld a, 1  
762a 32 f6 fa			ld (cursor_shape),a  
762d 06 00			ld b, 0  
762f 7e				ld a, (hl)  
7630 fe 2e			cp '.'  
7632 28 0a			jr z, .key_shift11  
7634 06 ff			ld b, 255  
7636 3e 2b			ld a, '+'    ; hide key from later scans  
7638 77				ld (hl),a  
7639 3e 02			ld a, 2  
763b 32 f6 fa			ld (cursor_shape),a  
763e			.key_shift11:  
763e				; write flag indicator  
763e 78				ld a,b  
763f 12				ld (de),a  
7640			  
7640 d1				pop de    ; de now holds the key map ptr  
7641 c9				ret  
7642			  
7642				  
7642			  
7642			; scans keyboard matrix and flags key press in memory array	  
7642				  
7642			matrix:  
7642				;call matrix  
7642				; TODO optimise the code....  
7642			  
7642			  
7642			;ld hl, keyscan_table_row1  
7642			;ld de, keyscan_table_row1+1  
7642			;ld bc,46  
7642			;ld a,KEY_MATRIX_NO_PRESS  
7642			;ldir  
7642			  
7642			  
7642			  
7642			; reset counter  
7642 3e 80		ld a, 128  
7644 d3 c1		out (portbdata),a  
7646			  
7646 06 0a		ld b, 10  
7648 0e 00		ld c, 0       ; current clock toggle  
764a			  
764a			.colscan:  
764a			  
764a			; set current column  
764a			; disable clock enable and set clock low  
764a			  
764a			;ld a, 0  
764a			;out (portbdata),a  
764a			  
764a			; For each column scan for switches  
764a			  
764a c5			push bc  
764b 21 c7 fd		ld hl, keyscan_scancol  
764e cd 57 77		call .rowscan  
7651 c1			pop bc  
7652			  
7652			  
7652			; get back current column  
7652			  
7652			; translate the row scan  
7652			  
7652			;   
7652			; row 1  
7652			  
7652 78			ld a,b  
7653			  
7653 21 3a fe		LD   hl, keyscan_table_row1+10  
7656			  
7656 cd f0 0f		call subafromhl  
7659			;call addatohl  
7659			  
7659 11 c7 fd		ld de, keyscan_scancol  
765c			  
765c 1a			ld a,(de)  
765d 77			ld (hl),a  
765e			  
765e			  
765e			  
765e			  
765e			; row 2  
765e			  
765e 78			ld a,b  
765f			  
765f 21 2f fe		LD   hl, keyscan_table_row2+10  
7662			  
7662			;call addatohl  
7662 cd f0 0f		call subafromhl  
7665			  
7665			  
7665 11 c8 fd		ld de, keyscan_scancol+1  
7668			  
7668 1a			ld a,(de)  
7669 77			ld (hl),a  
766a			  
766a			  
766a			; row 3  
766a			  
766a 78			ld a,b  
766b			  
766b 21 24 fe		LD   hl, keyscan_table_row3+10  
766e			  
766e			;call addatohl  
766e cd f0 0f		call subafromhl  
7671			  
7671 11 c9 fd		ld de, keyscan_scancol+2  
7674			  
7674 1a			ld a,(de)  
7675 77			ld (hl),a  
7676			  
7676			  
7676			  
7676			; row 4  
7676			  
7676 78			ld a,b  
7677			  
7677 21 19 fe		LD   hl, keyscan_table_row4+10  
767a			  
767a			;call addatohl  
767a cd f0 0f		call subafromhl  
767d			  
767d 11 ca fd		ld de, keyscan_scancol+3  
7680			  
7680 1a			ld a,(de)  
7681 77			ld (hl),a  
7682			  
7682			; row 5  
7682			  
7682 78			ld a,b  
7683			  
7683 21 0e fe		LD   hl, keyscan_table_row5+10  
7686			  
7686			;call addatohl  
7686 cd f0 0f		call subafromhl  
7689			  
7689 11 cb fd		ld de, keyscan_scancol+4  
768c			  
768c 1a			ld a,(de)  
768d 77			ld (hl),a  
768e			  
768e			; handshake next column  
768e			  
768e			  
768e 3e 40		ld a, 64  
7690 d3 c1		out (portbdata),a  
7692			  
7692 3e 00		ld a, 0  
7694 d3 c1		out (portbdata),a  
7696			  
7696			; toggle clk and move to next column  
7696			;ld a, 64  
7696			;cp c  
7696			;  
7696			;jr z, .coltoglow  
7696			;ld c, a  
7696			;jr .coltog  
7696			;.coltoglow:  
7696			;ld c, 0  
7696			;.coltog:  
7696			;ld a, c  
7696			;out (portbdata),a  
7696			  
7696 10 b2		djnz .colscan  
7698			  
7698 3e 0a		ld a,10  
769a 21 30 fe		LD   hl, keyscan_table_row1  
769d cd de 0f		call addatohl  
76a0 3e 00		ld a, 0  
76a2 77			ld (hl), a  
76a3			  
76a3			  
76a3 3e 0a		ld a,10  
76a5 21 25 fe		LD   hl, keyscan_table_row2  
76a8 cd de 0f		call addatohl  
76ab 3e 00		ld a, 0  
76ad 77			ld (hl), a  
76ae			  
76ae 3e 0a		ld a,10  
76b0 21 1a fe		LD   hl, keyscan_table_row3  
76b3 cd de 0f		call addatohl  
76b6 3e 00		ld a, 0  
76b8 77			ld (hl), a  
76b9			  
76b9 3e 0a		ld a,10  
76bb 21 0f fe		LD   hl, keyscan_table_row4  
76be cd de 0f		call addatohl  
76c1 3e 00		ld a, 0  
76c3 77			ld (hl), a  
76c4			  
76c4 3e 0a		ld a,10  
76c6 21 04 fe		LD   hl, keyscan_table_row5  
76c9 cd de 0f		call addatohl  
76cc 3e 00		ld a, 0  
76ce 77			ld (hl), a  
76cf			  
76cf			if DEBUG_KEY_MATRIX  
76cf			  
76cf			; Display text on first line  
76cf			            LD   A, kLCD_Line1  
76cf			            CALL fLCD_Pos       ;Position cursor to location in A  
76cf			            LD   DE, keyscan_table_row1  
76cf			            ;LD   DE, MsgHello  
76cf			            CALL fLCD_Str       ;Display string pointed to by DE  
76cf			  
76cf			; Display text on second line  
76cf			            LD   A, kLCD_Line2  
76cf			            CALL fLCD_Pos       ;Position cursor to location in A  
76cf			            LD   DE, keyscan_table_row2  
76cf			            CALL fLCD_Str       ;Display string pointed to by DE  
76cf			            LD   A, kLCD_Line3  
76cf			            CALL fLCD_Pos       ;Position cursor to location in A  
76cf			            LD   DE, keyscan_table_row3  
76cf			            CALL fLCD_Str       ;Display string pointed to by DE  
76cf			            LD   A, kLCD_Line4  
76cf			            CALL fLCD_Pos       ;Position cursor to location in A  
76cf			            LD   DE, keyscan_table_row4  
76cf			            CALL fLCD_Str       ;Display string pointed to by DE  
76cf			            LD   A, kLCD_Line4+10  
76cf			            CALL fLCD_Pos       ;Position cursor to location in A  
76cf			            LD   DE, keyscan_table_row5  
76cf			            CALL fLCD_Str       ;Display string pointed to by DE  
76cf			  
76cf			;call delay250ms  
76cf				jp matrix  
76cf			endif  
76cf c9			ret  
76d0			  
76d0			; using decade counter....  
76d0			  
76d0			  
76d0			; TODO reset decade counter to start of scan  
76d0			  
76d0			; reset 15  
76d0			; clock 14  
76d0			; ce 13  
76d0			  
76d0			; 1 - q5  
76d0			; 2 - q1  
76d0			; 3 - q0  
76d0			; 4 - q2  
76d0			; 5 - q6  
76d0			; 6 - q7  
76d0			; 7 - q3  
76d0			; 8 - vss  
76d0			; 9 - q8  
76d0			; 10 - q4  
76d0			; 11 - q9  
76d0			; 12 - cout  
76d0			; 16 - vdd  
76d0			  
76d0			; clock      ce       reset     output  
76d0			; 0          x        0         n  
76d0			; x          1        0         n  
76d0			; x          x        1         q0  
76d0			; rising     0        0         n+1  
76d0			; falling    x        0         n  
76d0			; x          rising   0         n  
76d0			; 1          falling  0         x+1  
76d0			;  
76d0			; x = dont care, if n < 5 carry = 1 otherwise 0  
76d0			  
76d0			;   
76d0			; reset   
76d0			; 13=0, 14=0, 15=1 .. 15=0  
76d0			;  
76d0			; handshake line  
76d0			; 14=1.... read line 14=0  
76d0			  
76d0			  
76d0			  
76d0			  
76d0			  
76d0			; TODO hand shake clock for next column scan  
76d0			; TODO detect each row  
76d0			  
76d0			  
76d0			  
76d0			  
76d0			; reset 128  
76d0			; clock 64  
76d0			; ce 32  
76d0			  
76d0			  
76d0			.cyclestart:  
76d0			  
76d0			; reset counter  
76d0 3e 80		ld a, 128  
76d2 d3 c1		out (portbdata),a  
76d4			  
76d4			; loop leds  
76d4 06 0a		ld b,10  
76d6			  
76d6			.cycle1:  
76d6 c5			push bc  
76d7 3e 00		ld a, 0  
76d9 d3 c1		out (portbdata),a  
76db cd e1 0c		call delay250ms  
76de			  
76de 3e 40		ld a, 64  
76e0 d3 c1		out (portbdata),a  
76e2 cd e1 0c		call delay250ms  
76e5			  
76e5 3e 00		ld a, 0  
76e7 d3 c1		out (portbdata),a  
76e9 cd e1 0c		call delay250ms  
76ec			  
76ec c1			pop bc  
76ed 10 e7		djnz .cycle1  
76ef			  
76ef			  
76ef 18 df		jr .cyclestart  
76f1			  
76f1			  
76f1			  
76f1			  
76f1			  
76f1			  
76f1			  
76f1			  
76f1			  
76f1			; map matrix key held to char on face of key  
76f1			  
76f1			;.mtocold:  
76f1			;  
76f1			;  
76f1			;; reset counter  
76f1			;ld a, 128  
76f1			;out (portbdata),a  
76f1			;  
76f1			;  
76f1			;; scan keyboard row 1  
76f1			;ld a, 0  
76f1			;out (portbdata),a  
76f1			;;ld a, 64  
76f1			;;out (portbdata),a  
76f1			;  
76f1			;  
76f1			;	ld a, 128  
76f1			;	ld hl, keyscan_table  
76f1			;	call .rowscan  
76f1			;  
76f1			;;ld a, 0  
76f1			;;out (portbdata),a  
76f1			;ld a, 64  
76f1			;out (portbdata),a  
76f1			;  
76f1			;	ld a, 64  
76f1			;	ld hl, keyscan_table+key_cols  
76f1			;	call .rowscan  
76f1			;  
76f1			;ld a, 0  
76f1			;out (portbdata),a  
76f1			;;ld a, 64  
76f1			;;out (portbdata),a  
76f1			;	ld a, 32  
76f1			;	ld hl, keyscan_table+(key_cols*2)  
76f1			;	call .rowscan  
76f1			;  
76f1			;  
76f1			;;ld a, 0  
76f1			;;out (portbdata),a  
76f1			;ld a, 64  
76f1			;out (portbdata),a  
76f1			;  
76f1			;	ld a, 16  
76f1			;	ld hl, keyscan_table+(key_cols*3)  
76f1			;	call .rowscan  
76f1			;  
76f1			;  
76f1			;	; flag if key D is held down and remove from reporting  
76f1			;	ld bc, .key_map_fd    
76f1			;	ld hl, keyscan_table  
76f1			;	ld de, key_fd  
76f1			;	call .key_shift_hold  
76f1			;	cp 255  
76f1			;	jr z, .cinmap  
76f1			;	; flag if key C is held down and remove from reporting  
76f1			;	ld bc, .key_map_fc    
76f1			;	ld hl, keyscan_table+key_cols  
76f1			;	ld de, key_fc  
76f1			;	call .key_shift_hold  
76f1			;	cp 255  
76f1			;	jr z, .cinmap  
76f1			;	; flag if key B is held down and remove from reporting  
76f1			;	ld bc, .key_map_fb    
76f1			;	ld hl, keyscan_table+(key_cols*2)  
76f1			;	ld de, key_fb  
76f1			;	call .key_shift_hold  
76f1			;	cp 255  
76f1			;	jr z, .cinmap  
76f1			;	; flag if key A is held down and remove from reporting  
76f1			;	ld bc, .key_map_fa    
76f1			;	ld hl, keyscan_table+(key_cols*3)  
76f1			;	ld de, key_fa  
76f1			;	call .key_shift_hold  
76f1			;	cp 255  
76f1			;	jr z, .cinmap  
76f1			;  
76f1			;	ld de, .matrix_to_char  
76f1			;  
76f1			;  
76f1			;.cinmap:   
76f1			;	if DEBUG_KEY  
76f1			;            LD   A, kLCD_Line4  
76f1			;            CALL fLCD_Pos       ;Position cursor to location in A  
76f1			;		push de  
76f1			;            LD   DE, keyscan_table  
76f1			;            CALL fLCD_Str       ;Display string pointed to by DE  
76f1			;		pop de  
76f1			;	endif  
76f1			  
76f1				; scan key matrix table for any held key  
76f1			  
76f1				; de holds either the default matrix or one selected above  
76f1			  
76f1			;	ld hl, keyscan_table  
76f1			;	ld b,key_cols*key_rows  
76f1			;  
76f1			;.cin1:	ld a,(hl)  
76f1			;	cp '#'  
76f1			;	jr z, .cinhit  
76f1			;	inc hl  
76f1			;	inc de  
76f1			;	dec b  
76f1			;	jr nz, .cin1  
76f1			;	; no key found held  
76f1			;	ld a,0  
76f1			;	ret  
76f1			;.cinhit: push de  
76f1			;	pop hl  
76f1			;	ld a,(hl)  
76f1			;	ret  
76f1			  
76f1			; flag a control key is held   
76f1			; hl is key pin, de is flag indicator  
76f1			  
76f1			;.key_shift_hold:  
76f1			;	push bc  
76f1			;	ld a, 1  
76f1			;	ld (cursor_shape),a  
76f1			;	ld b, 0  
76f1			;	ld a, (hl)  
76f1			;	cp '.'  
76f1			;	jr z, .key_shift1  
76f1			;	ld b, 255  
76f1			;	ld a, '+'    ; hide key from later scans  
76f1			;	ld (hl),a  
76f1			;	ld a, 2  
76f1			;	ld (cursor_shape),a  
76f1			;.key_shift1:  
76f1			;	; write flag indicator  
76f1			;	ld a,b  
76f1			;	ld (de),a  
76f1			;  
76f1			;	pop de    ; de now holds the key map ptr  
76f1			;	ret  
76f1			  
76f1				  
76f1				  
76f1			  
76f1			  
76f1			  
76f1			  
76f1			  
76f1			  
76f1			  
76f1			  
76f1			  
76f1			  
76f1			  
76f1			;	push hl  
76f1			;	push de  
76f1			;	push bc  
76f1			;	call keyscan  
76f1			;	; map key matrix to ascii value of key face  
76f1			;  
76f1			;	ld hl, key_face_map  
76f1			;	ld de, keyscan_table  
76f1			;  
76f1			;	; get how many keys to look at  
76f1			;	ld b, keyscan_table_len  
76f1			;	  
76f1			;  
76f1			;	; at this stage fall out on first key hit  
76f1			;	; TODO handle multiple key press  
76f1			;  
76f1			;map1:	ld a,(hl)  
76f1			;	cp '#'  
76f1			;	jr z, keyhit  
76f1			;	inc hl  
76f1			;	inc de  
76f1			;	dec b  
76f1			;	jr nz, map1  
76f1			;nohit:	ld a, 0  
76f1			;	jr keydone  
76f1			;keyhit: push de  
76f1			;	pop hl  
76f1			;	ld a,(hl)  
76f1			;keydone:  
76f1			;	push bc  
76f1			;	push de  
76f1			; 	push hl  
76f1			;	ret   
76f1			;  
76f1			  
76f1			  
76f1			  
76f1			  
76f1			; scan physical key matrix  
76f1			  
76f1			  
76f1			;keyscan:  
76f1			;  
76f1			;; for each key_row use keyscanr bit mask for out  
76f1			;; then read in for keyscanc bitmask  
76f1			;; save result of row scan to keyscantable  
76f1			;  
76f1			;; scan keyboard row 1  
76f1			;  
76f1			;	ld b, key_rows  
76f1			;	ld hl, key_scanr  
76f1			;	ld de, keyscan_table  
76f1			;  
76f1			;rowloop:  
76f1			;  
76f1			;	ld a,(hl)		; out bit mask to energise keyboard row  
76f1			;	call rowscan  
76f1			;	inc hl  
76f1			;	dec b  
76f1			;	jr nz, rowloop  
76f1			;  
76f1			;	ret  
76f1			;  
76f1			;  
76f1			;; pass a out bitmask, b row number  
76f1			;arowscan:   
76f1			;	push bc  
76f1			;  
76f1			;	ld d, b  
76f1			;  
76f1			;	; calculate buffer location for this row  
76f1			;  
76f1			;	ld hl, keyscan_table	  
76f1			;kbufr:  ld e, key_cols  
76f1			;kbufc:	inc hl  
76f1			;	dec e  
76f1			;	jr nz, kbufc  
76f1			;	dec d  
76f1			;	jr nz, kbufr  
76f1			;  
76f1			;	; energise row and read columns  
76f1			;  
76f1			;	out (portbdata),a  
76f1			;	in a,(portbdata)  
76f1			;	ld c,a  
76f1			;  
76f1			;  
76f1			;	; save buffer loc  
76f1			;  
76f1			;	ld (keybufptr), hl  
76f1			;  
76f1			;	ld hl, key_scanc  
76f1			;	ld d, key_cols  
76f1			;  
76f1			;	; for each column check each bit mask  
76f1			;  
76f1			;colloop:  
76f1			;	  
76f1			;  
76f1			;	; reset flags for the row   
76f1			;  
76f1			;	ld b,'.'  
76f1			;	and (hl)  
76f1			;	jr z, maskskip  
76f1			;	ld b,'#'  
76f1			;maskskip:  
76f1			;	; save  key state  
76f1			;	push hl  
76f1			;	ld hl, (keybufptr)  
76f1			;	ld (hl), b  
76f1			;	inc hl  
76f1			;	ld (keybufptr), hl  
76f1			;  
76f1			;	; move to next bit mask  
76f1			;	pop hl  
76f1			;	inc hl  
76f1			;  
76f1			;	dec d  
76f1			;	jr nz, colloop  
76f1			;  
76f1			;	ret  
76f1			;  
76f1			;  
76f1			;;  
76f1			; lcd functions  
76f1			;  
76f1			;  
76f1			  
76f1			;if DEBUG_KEY_MATRIX  
76f1			  
76f1			; test function to display hardware view of matrix state  
76f1			  
76f1			matrixold:  
76f1			  
76f1			  
76f1			  
76f1			; reset counter  
76f1 3e 80		ld a, 128  
76f3 d3 c1		out (portbdata),a  
76f5			; scan keyboard row 1  
76f5 3e 00		ld a, 0  
76f7 d3 c1		out (portbdata),a  
76f9			;ld a, 64  
76f9			;out (portbdata),a  
76f9 3e 80			ld a, 128  
76fb 21 30 fe			ld hl, keyscan_table_row1  
76fe cd 57 77			call .rowscan  
7701			  
7701			;ld a, 0  
7701			;out (portbdata),a  
7701 3e 40		ld a, 64  
7703 d3 c1		out (portbdata),a  
7705 3e 40			ld a, 64  
7707 21 25 fe			ld hl, keyscan_table_row2  
770a cd 57 77			call .rowscan  
770d			  
770d 3e 00		ld a, 0  
770f d3 c1		out (portbdata),a  
7711			;ld a, 64  
7711			;out (portbdata),a  
7711 3e 20			ld a, 32  
7713 21 1a fe			ld hl, keyscan_table_row3  
7716 cd 57 77			call .rowscan  
7719			  
7719			;ld a, 0  
7719			;out (portbdata),a  
7719 3e 40		ld a, 64  
771b d3 c1		out (portbdata),a  
771d 3e 10			ld a, 16  
771f 21 0f fe			ld hl, keyscan_table_row4  
7722 cd 57 77			call .rowscan  
7725			  
7725			; Display text on first line  
7725 3e 00		            LD   A, kLCD_Line1  
7727 cd 55 73		            CALL fLCD_Pos       ;Position cursor to location in A  
772a 11 30 fe		            LD   DE, keyscan_table_row1  
772d			            ;LD   DE, MsgHello  
772d cd 77 73		            CALL fLCD_Str       ;Display string pointed to by DE  
7730			  
7730			; Display text on second line  
7730 3e 28		            LD   A, kLCD_Line2  
7732 cd 55 73		            CALL fLCD_Pos       ;Position cursor to location in A  
7735 11 25 fe		            LD   DE, keyscan_table_row2  
7738 cd 77 73		            CALL fLCD_Str       ;Display string pointed to by DE  
773b 3e 50		            LD   A, kLCD_Line3  
773d cd 55 73		            CALL fLCD_Pos       ;Position cursor to location in A  
7740 11 1a fe		            LD   DE, keyscan_table_row3  
7743 cd 77 73		            CALL fLCD_Str       ;Display string pointed to by DE  
7746 3e 78		            LD   A, kLCD_Line4  
7748 cd 55 73		            CALL fLCD_Pos       ;Position cursor to location in A  
774b 11 0f fe		            LD   DE, keyscan_table_row4  
774e cd 77 73		            CALL fLCD_Str       ;Display string pointed to by DE  
7751			  
7751 cd e1 0c			call delay250ms  
7754 c3 42 76			jp matrix  
7757			  
7757			; pass de as row display flags  
7757			.rowscan:   
7757			;	out (portbdata),a  
7757 db c1			in a,(portbdata)  
7759 4f				ld c,a  
775a				; reset flags for the row   
775a 06 7e			ld b,KEY_MATRIX_NO_PRESS  
775c e6 01			and 1  
775e 28 02			jr z, .p1on  
7760 06 23			ld b,'#'  
7762			.p1on:  
7762 70				ld (hl), b  
7763 23				inc hl  
7764			  
7764 06 7e			ld b,KEY_MATRIX_NO_PRESS  
7766 79				ld a,c  
7767 e6 02			and 2  
7769			;	bit 0,a  
7769 28 02			jr z, .p2on  
776b 06 23			ld b,'#'  
776d			.p2on:  
776d 70				ld (hl), b  
776e 23				inc hl  
776f			;  
776f 06 7e			ld b,KEY_MATRIX_NO_PRESS  
7771 79				ld a,c  
7772 e6 04			and 4  
7774			;;	bit 0,a  
7774 28 02			jr z, .p3on  
7776 06 23			ld b,'#'  
7778			.p3on:  
7778 70				ld (hl), b  
7779 23				inc hl  
777a			;;  
777a 06 7e			ld b,KEY_MATRIX_NO_PRESS  
777c			;;	bit 0,a  
777c 79				ld a,c  
777d e6 08			and 8  
777f 28 02			jr z, .p4on  
7781 06 23			ld b,'#'  
7783			.p4on:  
7783 70				ld (hl), b  
7784 23				inc hl  
7785			  
7785 06 7e			ld b,KEY_MATRIX_NO_PRESS  
7787			;;	bit 0,a  
7787 79				ld a,c  
7788 e6 10			and 16  
778a 28 02			jr z, .p5on  
778c 06 23			ld b,'#'  
778e			.p5on:  
778e 70				ld (hl), b  
778f 23				inc hl  
7790			; zero term  
7790 06 00			ld b,0  
7792 70				ld (hl), b  
7793			  
7793 c9			.rscandone: ret  
7794			  
7794			;addatohl:  
7794			;  
7794			 ;add   a, l    ; A = A+L  
7794			  ;  ld    l, a    ; L = A+L  
7794			   ; adc   a, h    ; A = A+L+H+carry  
7794			   ; sub   l       ; A = H+carry  
7794			   ; ld    h, a    ; H = H+carry  
7794			  
7794			;ret  
7794			; eof  
# End of file firmware_key_5x10.asm
7794			;include "firmware_key_4x10.asm" 
7794			 
7794			heap_size:    equ heap_end - heap_start 
7794			;eof 
# End of file os_mega.asm
7794
