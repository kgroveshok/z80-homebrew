# File debug_level2.asm
0000			 
0000			; DEBUG Level 2 - All useful debug on and memory courruption guards 
0000			 
0000			; Odd specific debug points for testing hardware dev 
0000			 
0000			;DEBUG_LEVEL0: equ 0 
0000			;DEBUG_LEVEL0: equ 0 
0000			;DEBUG_LEVEL2: equ 1 
0000			DEBUG_LEVEL: equ '2' 
0000			 
0000			DEBUG_SOUND: equ 0      
0000			DEBUG_STK_FAULT: equ 0 
0000			DEBUG_INPUT: equ 0     ; Debug input entry code 
0000			DEBUG_INPUTV2: equ 0     ; Debug input entry code 
0000			DEBUG_KEYCINWAIT: equ 0 
0000			DEBUG_KEYCIN: equ 0 
0000			DEBUG_KEY: equ 0 
0000			DEBUG_KEY_MATRIX: equ 0 
0000			DEBUG_STORECF: equ 0 
0000			DEBUG_STORESE: equ 1        ; TODO  w locks up, r returns.  
0000			DEBUG_SPI_HARD_CE0: equ 0    ; only handshake on CE0 on port A 
0000			DEBUG_SPI: equ 0    ; low level spi tests 
0000			 
0000			; Enable many break points 
0000			 
0000			DEBUG_FORTH_PARSE_EXEC: equ 0     ; 6 
0000			DEBUG_FORTH_PARSE_EXEC_SLOW: equ 0     ; 6 
0000			DEBUG_FORTH_PARSE_NEXTWORD: equ 0 
0000			DEBUG_FORTH_JP: equ 0    ; 4 
0000			DEBUG_FORTH_MALLOC: equ 0 
0000			DEBUG_FORTH_MALLOC_INT: equ 0 
0000			DEBUG_FORTH_DOT: equ 1 
0000			DEBUG_FORTH_DOT_WAIT: equ 0 
0000			DEBUG_FORTH_MATHS: equ 0 
0000			DEBUG_FORTH_TOK: equ 0    ; 4 
0000			DEBUG_FORTH_PARSE: equ 0    ; 3 
0000			DEBUG_FORTH: equ 0  ;2 
0000			DEBUG_FORTH_WORDS: equ 1   ; 1 
0000			DEBUG_FORTH_PUSH: equ 1   ; 1 
0000			DEBUG_FORTH_UWORD: equ 1   ; 1 
0000			 
0000			; Enable key point breakpoints 
0000			 
0000			DEBUG_FORTH_DOT_KEY: equ 0 
0000			DEBUG_FORTH_PARSE_KEY: equ 0   ; 5 
0000			DEBUG_FORTH_WORDS_KEY: equ 1   ; 1 
0000			 
0000			; Debug stack imbalances 
0000			 
0000			ON: equ 1 
0000			OFF: equ 0 
0000			 
0000			DEBUG_STACK_IMB: equ 0 
0000			STACK_IMB_STORE: equ 20 
0000			 
0000			; House keeping and protections 
0000			 
0000			DEBUG_FORTH_STACK_GUARD: equ 1    ; under/over flows 
0000			DEBUG_FORTH_MALLOC_GUARD: equ 1 
0000			DEBUG_FORTH_MALLOC_HIGH: equ 0     ; warn only if more than 255 chars being allocated. would be highly unusual! 
0000			FORTH_ENABLE_FREE: equ 0 
0000			FORTH_ENABLE_MALLOCFREE: equ 1 
0000			FORTH_ENABLE_DSPPOPFREE: equ 1    ; TODO BUG Seems to be OK in some situations but with SW it crashes straight away 
0000			FORTH_ENABLE_FLOATMATH: equ 0 
0000			; eof 
# End of file debug_level2.asm
# File os_mega_cpm.asm
0000			 
0000			; Hardware Platform 
0000			 
0000			BASE_SC114: equ 0 
0000			BASE_KEV: equ 0 
0000			BASE_CPM: equ 1 
0000			 
0000			ENABLE_BASIC: equ 0 
0000			 
0000			STARTUP_V1: equ 1 
0000			STARTUP_V2: equ 0 
0000			 
0000			tos:	equ 0f000h 
0000			; Using SCM API instead 
0000			;SC114_SIO_1_OUT: equ 81 
0000			;SC114_SIO_1_IN: equ 80 
0000			; 
0000			; 
0000			; CPU clock 
0000			; 
0000			CPU_CLOCK_4MHZ: equ 1 
0000			CPU_CLOCK_8MHZ: equ  0 
0000			CPU_CLOCK_10MHZ: equ  0 
0000			 
0000			; Use this to tune the delay functions if your CPU is a bit quick. i.e. RunCPM on a PC 
0000			 
0000			CPM_DELAY_TUNE: equ 4000 
0000			 
0000			; use microchip serial eeprom for storage 
0000			 
0000			STORAGE_SE: equ 0 
0000			SOUND_ENABLE: equ 0 
0000			 
0000			; the port where the PIO using the SC103 card is located 
0000			 
0000			SC103_PIO: equ 068h 
0000			 
0000			; Full OS but with the 5x10 fullsized keyboard 
0000			 
0000			display_rows: equ 4     
0000			;display_cols: equ 20 
0000			display_cols: equ 40 
0000			 
0000			key_rows: equ 5      
0000			key_cols: equ 10    
0000			 
0000			 
0000			include "main.asm" 
0000			; z80 homebrew opperating system 
0000			; 
0000			 
0000			STARTUP_ENABLE: equ 1 
0000			 
0000			 
0000			; bios jump points via rst 
0000			 
0000			if BASE_SC114 = 1  
0000			 
0000				org 8000h 
0000			endif 
0000			 
0000			if BASE_KEV = 1  
0000			 
0000				org 0h 
0000			endif 
0000			 
0000			if BASE_CPM = 1  
0000			 
0000				org 100h 
0100			endif 
0100 c3 7c 17			jp coldstart     ; rst 0 - cold boot 
0103			 
0103			 
0103 ..			buildtime: db   "Build: " 
010a					include "romtimestamp.asm" 
010a ..			db '2025-09-05 22:22' 
# End of file romtimestamp.asm
011a 00				   db 0 
011b .. 32 00		debuglevel: db   "DL",DEBUG_LEVEL, 0 
011f			 
011f			 
011f			 
011f			;        nop  
011f			;        nop 
011f			;;	org 05h		; null out bdos call 
011f			; 
011f			;        nop  
011f			;        nop  
011f			;        nop 
011f			;;	org 08h 
011f			;;; 
011f			;;	jp cin		; rst 8 - char in 
011f			;;; 
011f			; 
011f			;        nop 
011f			;        nop 
011f			;        nop 
011f			;        nop 
011f			;        nop 
011f			;        nop 
011f			;        nop 
011f			;        nop 
011f			;	org 010h 
011f			;; 
011f			;	jp cout		; rest 010h  - char out 
011f			;; 
011f			;	org 01bh   
011f			; 
011f			;	;jp  		; rst 01bh   - write string to display 
011f			;	jp str_at_display 
011f			; 
011f			; 
011f			;	org 020h 
011f			; 
011f			;	; jp		 ; rst 020h - read char at screen location 
011f			; 
011f			;	org 028h 
011f			 
011f				; jp		 ; rst 028h  - storage i/o 
011f			 
011f			; 	org 030h 
011f			;	jp break_point_state 
011f			  
011f			; $30  
011f			; org 038h 
011f			; $38 
011f			 
011f			; TODO any more important entry points to add to jump table for easier coding use? 
011f			 
011f			if BASE_KEV = 1  
011f			 
011f				; need to be at $66 for nmi support 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255 
011f				jp nmi 
011f			endif 
011f			 
011f			include "firmware.asm" 
011f			  
011f			; main constants (used here and in firmware)  
011f			  
011f			; TODO have page 0 of storage as bios  
011f			  
011f			Device_A: equ 0h  
011f			Device_B: equ 040h          ; Sound  
011f			  
011f			if BASE_KEV  
011f			Device_C: equ 080h          ; Storage and ext cart devices  
011f			endif  
011f			  
011f			if BASE_SC114  
011f			Device_C: equ  SC103_PIO          ; Storage and ext cart devices  
011f			endif  
011f			  
011f			if BASE_CPM  
011f			; TODO fixup for CPM  
011f			Device_C: equ 080h          ; Storage and ext cart devices  
011f			endif  
011f			  
011f			Device_D: equ 0c0h             ; Keyboard and LCD  
011f			  
011f			; Odd specific debug points for testing hardware dev  
011f			  
011f			;if DEBUG_LEVEL0  
011f			;	include "debug_level0.asm"  
011f			;endif  
011f			;if DEBUG_LEVEL1  
011f			;	include "debug_level1.asm"  
011f			;endif  
011f			;if DEBUG_LEVEL2  
011f			;	include "debug_level2.asm"  
011f			;endif  
011f			  
011f			  
011f			CALLMONITOR: macro  
011f			;	call break_point_state  
011f			; now use the break point debug vector  
011f				call debug_vector  
011f				endm  
011f			  
011f			MALLOC_1: equ 1        ; from dk88   
011f			MALLOC_2: equ 0           ; broke  
011f			MALLOC_3: equ 0           ; really broke  
011f			MALLOC_4: equ 0              ; mine pretty basic reuse and max of 250 chars  
011f			  
011f			if BASE_KEV   
011f			;stacksize: equ 256  
011f			; each stack entry is three bytes (type + word)  
011f			stacksize: equ 3*150  
011f			  
011f			STACK_RET_SIZE: equ 64  
011f			STACK_LOOP_SIZE: equ 128  
011f			STACK_DATA_SIZE: equ 512  
011f			endif  
011f			if BASE_SC114  
011f			;tos:	equ 0f000h  
011f			stacksize: equ 256  
011f			STACK_RET_SIZE: equ 64  
011f			STACK_LOOP_SIZE: equ 128  
011f			STACK_DATA_SIZE: equ 256  
011f			endif  
011f			  
011f			if BASE_CPM  
011f			;tos:	equ 0f000h  
011f			stacksize: equ 256  
011f			STACK_RET_SIZE: equ 64  
011f			STACK_LOOP_SIZE: equ 128  
011f			STACK_DATA_SIZE: equ 256  
011f			endif  
011f			  
011f			;if STORAGE_SE == 0  
011f			STORE_BLOCK_PHY:   equ 64    ; physical block size on storage   64byte on 256k eeprom  
011f			STORE_DEVICE_MAXBLOCKS:  equ  255*2 ; how many blocks are there on this storage device  
011f			;endif  
011f			  
011f			; Block 0 at offset $3b is a flag to decide to offer auto start up - 0 = prompt 1-auto run no prompt 2 - dont run  
011f			  
011f			STORE_0_AUTORUN: equ $20  
011f			  
011f			; Block 0 at offset $20+ holds the file number to run at system startup after the display  
011f			  
011f			STORE_0_AUTOFILE: equ $21  
011f			STORE_0_BANKRUN: equ $23  
011f			STORE_0_FILERUN: equ $24  
011f			  
011f			; Block 0 offsets for settings  
011f			  
011f			; if set then skip prompt for start up and accept all  
011f			  
011f			STORE_0_QUICKSTART: equ $25  
011f			  
011f			; Blocks where directory table is held  
011f			  
011f			; Reducing the number of entries increases the max file size  
011f			  
011f			;STORE_DIR_START: equ 1  
011f			;STORE_DIR_END: equ 33  
011f			  
011f			; Blocks from where file data is stored  
011f			  
011f			;STORE_DATA_START: equ STORE_DIR_END + 1  
011f			  
011f			; Block indicators (<32 are data files)  
011f			  
011f			;STORE_BLOCK_CFG: equ $8f       ; config block  
011f			;STORE_BLOCK_DIRF: equ $8e       ; directory block free  
011f			;STORE_BLOCK_DIRU: equ $8d       ; directory block free  
011f			;STORE_BLOCK_FREE: equ $85       ; data block free  
011f			;STORE_BLOCK_AUTO: equ $89       ; auto start code  
011f			  
011f			  
011f			  
011f			; Directory entry flags  
011f			  
011f			;STORE_DIR_FREE: equ 0  
011f			;STORE_DIR_FILE:  equ 1  
011f			  
011f			; Structure offsets to directory entries  
011f			;STORE_DE_FLAG: equ 0  
011f			;STORE_DE_MAXEXT: equ 1  
011f			;STORE_DE_FILENAME: equ 2  
011f			  
011f			; Structure offsets to block 0  
011f			  
011f			;STORE_BK0_ISFOR: equ 1  
011f			;STORE_BK0_LABEL: equ 3  
011f			  
011f			; memory allocation   
011f			  
011f			chk_stund: equ tos+2           ; underflow check word  
011f			chk_stovr: equ chk_stund-stacksize -2; overflow check word  
011f			  
011f			; keyscan table needs rows x cols buffer  
011f			;key_rows: equ 5     ; TODO move out to mini and maxi + 1 null  
011f			;key_cols: equ 10    ; TODO move out to mini and maxi + 1 null  
011f			  
011f			keyscan_table_row1: equ chk_stovr -key_cols-1  
011f			keyscan_table_row2: equ keyscan_table_row1-key_cols-1  
011f			keyscan_table_row3: equ keyscan_table_row2-key_cols-1  
011f			keyscan_table_row4: equ keyscan_table_row3-key_cols-1  
011f			keyscan_table_row5: equ keyscan_table_row4-key_cols-1  
011f			keyscan_table: equ keyscan_table_row5-(key_cols*key_rows)-1  
011f			keyscan_scancol: equ keyscan_table-key_cols  
011f			;keyscan_table_len: equ key_rows*key_cols  
011f			;keybufptr: equ keyscan_table - 2  
011f			;keysymbol: equ keybufptr - 1  
011f			key_held: equ keyscan_scancol-1	; currently held  
011f			key_held_prev: equ key_held - 1   ; previously held (to detect bounce and cycle of key if required)  
011f			key_repeat_ct: equ key_held_prev - 4 ; timers (two words)  
011f			key_fa: equ key_repeat_ct -1 ;  
011f			key_fb: equ key_fa -1 ;  
011f			key_fc: equ key_fb -1 ;  
011f			key_fd: equ key_fc -1 ;  
011f			key_face_held: equ key_fd - 1   
011f			; flag for enabling/disabling various hardware diag loading via block 0 on bank 1  
011f			  
011f			hardware_config: equ key_face_held - 10  
011f			  
011f			; hardware config switches  
011f			; TODO add bitmasks on includes for hardware  
011f			; high byte for expansion ids  
011f			;     0000 0000  no card inserted  
011f			;     0000 0001  storage card inserted  
011f			;     0000 0010  spi sd card active  
011f			  
011f			;       
011f			; low byte:  
011f			;     0000 0001   4x4 keypad  
011f			;     0000 0010   full keyboard  
011f			;     0000 0011   spi/ext keyboard  
011f			;     0000 0100   20x4 lcd  
011f			;     0000 1000   40x4 lcd  
011f			;     0000 1100   spi/ext display  
011f			;     0001 0000   ide interface available  
011f			  
011f			hardware_word: equ hardware_config - 2  
011f			  
011f			; debug marker - optional display of debug point on the debug screens  
011f			  
011f			nmi_vector:  equ hardware_word - 3   ; vector to the nmi handler  
011f			debug_vector:  equ nmi_vector - 3   ; vector to the debug handler  
011f			  
011f			debug_umark: equ debug_vector - 6  ; current user mark  
011f			debug_mark: equ debug_umark - 4    ; internal word debug points  
011f			  
011f			; input_str vars  
011f			input_ptr:  equ debug_mark - 2    ; ptr to the current cursor position of string currently being edited  on entry starting   
011f			input_start:  equ input_ptr - 2    ; ptr to the start of string   
011f			input_size: equ input_start -1  ; number of chars  
011f			input_display_size: equ input_size -1  ; TODO number of chars that are displayable. if < input_size then scroll   
011f			input_at_pos: equ input_display_size - 1 ; frame buffer offset for start of input  
011f			input_under_cursor: equ input_at_pos - 1 ; char under the cursor so we can blink it  
011f			input_at_cursor: equ input_under_cursor - 1 ; offset of cursor to current start of string  
011f			input_cur_flash: equ input_at_cursor - 2 ;  timeout for cursor flash  
011f			input_cur_onoff: equ input_cur_flash - 1 ;  cursor blink on or off  
011f			input_len: equ input_cur_onoff - 5 ; length of current input  
011f			input_cursor: equ input_len - 5 ; offset of cursor to current start of string  
011f			  
011f			; cursor blink rate  
011f			CUR_BLINK_RATE: equ $09  
011f			;CUR_BLINK_RATE: equ 15  
011f			  
011f			key_actual_pressed: equ input_cursor - 1   
011f			key_symbol: equ key_actual_pressed - 1   
011f			key_shift: equ key_symbol - 1   
011f			  
011f			; Display allocation  
011f			  
011f			;display_rows: equ 4     ; move out to mini and mega files  
011f			;display_cols: equ 20  
011f			  
011f			display_fb_len: equ display_rows*display_cols  
011f			  
011f			; primary frame buffer     
011f			display_fb0: equ  key_shift-display_fb_len -1 ; -display_fb_len-1          ; cli input     TODO why is that doubling up?  
011f			; working frame buffers  
011f			display_fb1: equ  display_fb0-display_fb_len -1 ; -display_fb_len-1          ; default running program  
011f			display_fb3: equ  display_fb1-display_fb_len - 1  
011f			display_fb2: equ  display_fb3-display_fb_len - 1  
011f			;  
011f			; pointer to active frame buffer  
011f			display_fb_active: equ display_fb2 - 2  
011f			display_lcde1e2: equ display_fb_active - 1         ; 0=e1, 1=e2   For E1/E2 selection when using the lcd 4x40 display  
011f			display_write_tmp: equ display_lcde1e2 - 2  
011f			display_active:  equ display_write_tmp-3   ; current state of activity char (plus room to write string)  
011f			  
011f			;  
011f			  
011f			;; can load into de directory  
011f			cursor_col: equ display_active-1  
011f			cursor_row: equ cursor_col-1  
011f			cursor_ptr: equ cursor_row - 1     ;  actual offset into lcd memory for row and col combo  
011f			cursor_shape: equ cursor_ptr - 2   ; char used for the current cursor   
011f			  
011f			; maths vars  
011f			  
011f			LFSRSeed: equ cursor_shape -20   
011f			randData: equ LFSRSeed - 2  
011f			xrandc: equ randData - 2  
011f			stackstore: equ xrandc - 2  
011f			seed1: equ  stackstore -2   
011f			seed2: equ seed1 - 2  
011f			  
011f			; cf storage vars  
011f			  
011f			iErrorNum:  equ seed2-1         ;Error number  
011f			iErrorReg:  equ iErrorNum -1              ;Error register  
011f			iErrorVer:  equ iErrorReg - 1              ;Verify error flag  
011f			  
011f			store_bank_active: equ iErrorVer - (5 + 8 ) 		; TODO not used.  indicator of which storage banks are available to use 5 on board and 8 in cart  
011f			  
011f			STORE_BLOCK_LOG:  equ   280      ; TODO remove.... Logical block size     
011f			  
011f			store_page: equ store_bank_active-STORE_BLOCK_LOG-1            ; bigger than page size for eeprom so we can join multiple blocks if they are continuation records  
011f			;?????store_ffpage: equ store_page-STORE_BLOCK_LOG            ; page size for eeprom?????  
011f			store_readptr: equ store_page-2       ; tracks the file extent during storage_read of continuation blocks  
011f			store_readbuf: equ store_readptr-2       ; tracks the position for the buffer during storage_read of continuation blocks  
011f			store_longread: equ store_readbuf -1 ;   if zero then only read one block. If not zero then do a read for as long as required  
011f			store_tmp1: equ store_longread - 2      ; temp pointer holders during ops  
011f			store_tmp2: equ store_tmp1 - 2        ; temp pointer holders during ops  
011f			store_tmp3: equ store_tmp2 - 2        ; temp pointer holders during ops  
011f			store_tmpid: equ store_tmp3 - 1		; page temp id  
011f			store_tmpext: equ store_tmpid - 1		; file extent temp  
011f			store_readcont: equ store_tmpid - 1		; If current read results in an overflow buffer to next record flag it up  
011f			store_openaddr: equ store_readcont - 2		; file block address of current opened file for read  
011f			store_openext: equ store_openaddr - 1		; file extent of current opened file for read  
011f			store_openmaxext: equ store_openext - 1		; max extent of current opened file for read  
011f			store_filecache: equ store_openmaxext-2   ;  TODO (using just one for now)  file id + extent count cache * 5  
011f			store_tmppageid: equ store_filecache-2    ; phyical page id temp  
011f			;  
011f			; spi vars  
011f			  
011f			  
011f			spi_clktime: equ store_tmppageid - 1      ; holds the number of ms that happens between spi clock pulses  
011f			spi_cartdev: equ spi_clktime - 1      ; holds bit mask to send to portb (ext spi) devices  
011f			spi_cartdev2: equ spi_cartdev - 1      ; holds bit mask to send to portb's shift reg devices  
011f			spi_portbyte: equ spi_cartdev2 - 1      ; holds bit mask to send to spi bus   
011f			spi_device: equ spi_portbyte - 1    ; bit mask to send to porta (eeproms) devices  
011f			spi_device_id: equ spi_device - 1    ; human readable bank number  
011f			  
011f			;;;;; forth cli params  
011f			  
011f			; TODO use a different frame buffer for forth???  
011f			  
011f			f_cursor_ptr:  equ spi_device_id - 1  ; offset into frame buffer for any . or EMIT output  
011f			cli_buffer: equ f_cursor_ptr - 20     ; temp hold - maybe not needed  
011f			cli_origtoken: equ cli_buffer - 2     ; pointer to the text of token for this word being checked  
011f			cli_token: equ cli_origtoken - 2     ; pointer to the text of token for this word being checked  
011f			cli_execword: equ cli_token - 2      ; pointer to start of code for this word  
011f			cli_nextword: equ cli_execword - 2      ; pointer to start of next word in dict  
011f			cli_ptr: equ cli_nextword - 2           ; pointer to start of word to parse by forth kernel (working)  
011f			cli_origptr: equ cli_ptr - 2           ; pointer to start of word to parse which resets cli_ptr on each word test  
011f			  
011f			cli_mvdot: equ cli_origptr - 1 ;     ; true will move the cursor once something is displayed  
011f			cli_autodisplay: equ cli_mvdot - 1 ;     ; true will auto update the display (slow) otherwise need to use DRAW  
011f			cli_var_array: equ cli_autodisplay - ( 10 * 2 ) ; word or string pointer variables using V@0-V@9  
011f			cli_var_array2: equ cli_var_array - ( 26 * 2 ) ; word or string pointer variables using VAR word  
011f			cli_ret_sp: equ cli_var_array2 - 2    ; ret stack pointer  
011f			cli_loop_sp: equ cli_ret_sp - 2   ; data stack pointer  
011f			cli_data_sp: equ cli_loop_sp - 2   ; data stack pointer  
011f			  
011f			chk_ret_und: equ cli_data_sp-2           ; underflow check word  
011f			cli_ret_stack: equ chk_ret_und - STACK_RET_SIZE      ; TODO could I just use normal stack for this? - use linked list for looping  
011f			chk_ret_ovr: equ cli_ret_stack -2; overflow check word  
011f			cli_loop_stack: equ chk_ret_ovr - STACK_LOOP_SIZE      ; TODO could I just use normal stack for this? - use linked list for looping  
011f			chk_loop_ovr: equ cli_loop_stack -2; overflow check word  
011f			cli_data_stack: equ chk_loop_ovr - STACK_DATA_SIZE		 ;   
011f			chk_data_ovr: equ cli_data_stack -2; overflow check word  
011f			  
011f			os_var_array: equ chk_data_ovr - (32 * 2)      ;   32 word array for use using the SCRATCH word  
011f			  
011f			; os/forth token vars  
011f			  
011f			os_last_cmd: equ os_var_array-255  
011f			os_cli_cmd: equ os_last_cmd-255              ; cli command entry line  
011f			os_current_i: equ os_cli_cmd-2  
011f			os_cur_ptr: equ os_current_i-2  
011f			os_word_scratch: equ os_cur_ptr-30  
011f			os_tok_len: equ os_word_scratch - 2  
011f			os_tok_ptr: equ os_tok_len - 2               ; our current PC ptr  
011f			os_tok_malloc: equ os_tok_ptr - 2  
011f			os_last_new_uword: equ os_tok_malloc - 2    ; hold start of last user word added  
011f			os_input: equ os_last_new_uword-255    ; buffer for EDIT word  
011f			execscratch: equ os_input-255        ; exec cmd eval buffer  
011f			scratch: equ execscratch-255  
011f			  
011f			os_stack_1: equ scratch - 3       ; stack holding area 1  
011f			os_stack_2: equ os_stack_1 - 3       ; stack holding area 2  
011f			os_stack_3: equ os_stack_2 - 3       ; stack holding area 3  
011f			os_stack_4: equ os_stack_3 - 3       ; stack holding area 4  
011f			  
011f			  
011f			; temp locations for new word processing to save on adding more   
011f			  
011f			os_new_malloc: equ os_stack_4-2  
011f			os_new_parse_len: equ os_new_malloc - 2  
011f			os_new_word_len: equ os_new_parse_len - 2  
011f			os_new_work_ptr: equ os_new_word_len - 2  
011f			os_new_src_ptr: equ os_new_work_ptr - 2  
011f			os_new_exec: equ os_new_src_ptr - 2  
011f			os_new_exec_ptr: equ os_new_exec - 2  
011f			  
011f			; resume memory alloocations....  
011f			  
011f			;os_view_disable: equ os_new_exec_ptr - 1  
011f			os_view_af: equ os_new_exec_ptr - 2  
011f			os_view_hl: equ os_view_af -2  
011f			os_view_de: equ os_view_hl - 2  
011f			os_view_bc: equ os_view_de - 2  
011f			  
011f			; stack checksum word  
011f			if DEBUG_STACK_IMB  
011f				curframe: equ  os_view_de - 5  
011f				store_sp: equ curframe - (STACK_IMB_STORE*4)  
011f				chk_word: equ store_sp - 2		 ; this is the word to init and then check against to detect stack corruption. Held far away from all stacks  
011f			else  
011f				chk_word: equ os_view_bc - 2		 ; this is the word to init and then check against to detect stack corruption. Held far away from all stacks  
011f			endif  
011f			  
011f			; with data stack could see memory filled with junk. need some memory management   
011f			; malloc and free entry points added  
011f			  
011f			;free_list:  equ chk_word - 4     ; Block struct for start of free list (MUST be 4 bytes)  
011f			;heap_size: equ  (free_list-08100h)      ; Number of bytes available in heap   TODO make all of user ram  
011f			;;heap_start: equ free_list - heap_size  ; Starting address of heap  
011f			;heap_end: equ free_list-1  ; Starting address of heap  
011f			;heap_start: equ free_list - heap_size  ; Starting address of heap  
011f			  
011f			;heap_start: equ free_list - heap_size  ; Starting address of heap  
011f			heap_end: equ chk_word-1  ; Starting address of heap  
011f			  
011f			  
011f			;if BASE_KEV   
011f			;heap_start: equ 0800eh  ; Starting address of heap  
011f			;free_list:  equ 0800ah      ; Block struct for start of free list (MUST be 4 bytes)  
011f			;heap_size: equ  heap_end-heap_start      ; Number of bytes available in heap   TODO make all of user ram  
011f			;endif  
011f			  
011f			;if BASE_SC114  
011f			;heap_start: equ baseram+15  ; Starting address of heap  
011f			;free_list:  equ baseram+10      ; Block struct for start of free list (MUST be 4 bytes)  
011f			;endif  
011f			  
011f			  
011f			;;;;  
011f			  
011f			  
011f			; change below to point to last memory alloc above  
011f			topusermem:  equ   heap_start  
011f			  
011f			;if BASE_KEV   
011f			;baseusermem: equ 08000h  
011f			;endif  
011f			  
011f			;if BASE_SC114  
011f			;;aseusermem:     equ    12  
011f			;baseusermem:     equ    prompt  
011f			;;baseusermem:     equ    endofcode  
011f			;endif  
011f			  
011f			  
011f			; **********************************************************************  
011f			; **  Constants  
011f			; **********************************************************************  
011f			  
011f			; Constants used by this code module  
011f			kDataReg:   EQU Device_D           ;PIO port A data register  
011f			kContReg:   EQU Device_D+2           ;PIO port A control register  
011f			  
011f			  
011f			portbdata:  equ Device_D+1    ; port b data  
011f			portbctl:   equ Device_D+3    ; port b control  
011f			  
011f			  
011f			;KEY_SHIFT:   equ 5  
011f			;KEY_SYMBOLSHIFT:  equ 6  
011f			  
011f			KEY_SHIFTLOCK: equ 4  
011f			  
011f			  
011f			KEY_UP: equ 5  
011f			KEY_NEXTWORD: equ 6  
011f			KEY_PREVWORD: equ 7  
011f			KEY_BS: equ 8  
011f			KEY_TAB:  equ 9  
011f			KEY_DOWN: equ 10  
011f			KEY_LEFT: equ 11  
011f			KEY_RIGHT: equ 12  
011f			KEY_CR:   equ 13  
011f			KEY_HOME: equ 14  
011f			KEY_END: equ 15  
011f			  
011f			KEY_F1: equ 16  
011f			KEY_F2: equ 17  
011f			KEY_F3: equ 18  
011f			KEY_F4: equ 19  
011f			  
011f			KEY_F5: equ 20  
011f			KEY_F6: equ 21  
011f			KEY_F7: equ 22  
011f			KEY_F8: equ 23  
011f			  
011f			KEY_F9: equ 24  
011f			KEY_F10: equ 25  
011f			KEY_F11: equ 26  
011f			KEY_F12: equ 27  
011f			  
011f			;if DEBUG_KEY  
011f			;	KEY_MATRIX_NO_PRESS: equ '.'  
011f			;	KEY_SHIFT:   equ '.'  
011f			;	KEY_SYMBOLSHIFT:  equ '.'  
011f			;else  
011f				KEY_SHIFT:   equ '~'  
011f				KEY_SYMBOLSHIFT:  equ '~'  
011f				KEY_MATRIX_NO_PRESS: equ '~'  
011f			;endi  
011f			  
011f			  
011f			  
011f			  
011f			; Macro to make adding debug marks easier  
011f			  
011f			DMARK: macro str  
011f				push af  
011f				ld a, (.dmark)  
011f				ld (debug_mark),a  
011f				ld a, (.dmark+1)  
011f				ld (debug_mark+1),a  
011f				ld a, (.dmark+2)  
011f				ld (debug_mark+2),a  
011f				jr .pastdmark  
011f			.dmark: db str  
011f			.pastdmark: pop af  
011f			  
011f			endm  
011f			  
011f			  
011f			; macro to detect for stack imbalances  
011f			  
011f			include "stackimbal.asm"  
011f			; Macro and code to detect stock imbalances 
011f			 
011f			SPPUSH: equ 0 
011f			 
011f			; Add a stack frame which can be checked before return 
011f			 
011f			STACKFRAME: macro onoff frame1 frame2 
011f			 
011f				if DEBUG_STACK_IMB 
011f					if onoff 
011f						; save current SP 
011f						exx 
011f			 
011f						ld de, frame1 
011f						ld a, d 
011f						ld hl, curframe 
011f						call hexout 
011f						ld a, e 
011f						ld hl, curframe+2 
011f						call hexout 
011f			  
011f						ld hl, frame1 
011f						push hl 
011f						ld hl, frame2 
011f						push hl 
011f						exx 
011f					endif 
011f					 
011f				endif 
011f			endm 
011f			 
011f			STACKFRAMECHK: macro onoff frame1 frame2 
011f			 
011f					 
011f				if DEBUG_STACK_IMB 
011f					if onoff 
011f						exx 
011f						; check stack frame SP 
011f			 
011f						ld hl, frame2 
011f						pop de   ; frame2 
011f			 
011f						call cmp16 
011f						jr nz, .spnosame 
011f						 
011f			 
011f						ld hl, frame1 
011f						pop de   ; frame1 
011f			 
011f						call cmp16 
011f						jr z, .spfrsame 
011f			 
011f						.spnosame: call showsperror 
011f			 
011f						.spfrsame: nop 
011f			 
011f						exx 
011f					endif 
011f					 
011f				endif 
011f			 
011f			 
011f			endm 
011f			 
011f			 
011f			; for a sub routine, wrap SP collection and comparisons 
011f			 
011f			; Usage: 
011f			; 
011f			; SAVESP ON/OFF 0-STACK_IMB_STORE/4 
011f			; CHECKSP ON/OFF 0-STACK_IMB_STORE/4 
011f			 
011f			SAVESP: macro onoff storeword 
011f			 
011f				if DEBUG_STACK_IMB 
011f					if onoff 
011f						; save current SP 
011f			 
011f						ld (store_sp+(storeword*4)), sp 
011f			 
011f					endif 
011f					 
011f				endif 
011f			 
011f			endm 
011f			 
011f			CHECKSP: macro onoff storeword 
011f			 
011f				if DEBUG_STACK_IMB 
011f					if onoff 
011f			 
011f						; save SP after last save 
011f				 
011f						ld (store_sp+(storeword*4)+2), sp 
011f			 
011f						push hl 
011f						ld hl, store_sp+(storeword*4) 
011f						call check_stack_sp  
011f						pop hl 
011f			 
011f			 
011f					endif 
011f					 
011f				endif 
011f			 
011f			endm 
011f			 
011f			if DEBUG_STACK_IMB 
011f			 
011f			check_stack_sp: 
011f					push de 
011f			 
011f					ld e, (hl) 
011f					inc hl 
011f					ld d, (hl) 
011f					inc hl 
011f			 
011f					push de 
011f			 
011f			 
011f					ld e, (hl) 
011f					inc hl 
011f					ld d, (hl) 
011f					inc hl 
011f			 
011f					pop hl 
011f			 
011f			 
011f					; check to see if the same 
011f			 
011f					call cmp16 
011f					jr z, .spsame 
011f			 
011f					; not same 
011f			 
011f					call showsperror 
011f			.spsame: 
011f			 
011f					pop de 
011f			 
011f					ret 
011f			 
011f			.sperr:  db "Stack imbalance",0 
011f			 
011f			 
011f			showsperror: 
011f			 
011f			 
011f				push hl 
011f				push af 
011f				push de 
011f				call clear_display 
011f				ld de, .sperr 
011f				ld a,0 
011f			;	ld de,os_word_scratch 
011f				call str_at_display 
011f				ld a, display_row_1+17 
011f				ld de, debug_mark 
011f				call str_at_display 
011f				ld a, 0 
011f				ld (curframe+4),a 
011f				ld hl, curframe 
011f				ld de, os_word_scratch 
011f				ld a, display_row_4 
011f				call str_at_display 
011f				call update_display 
011f				;call break_point_state 
011f				call cin_wait 
011f			 
011f			;	ld a, ' ' 
011f			;	ld (os_view_disable), a 
011f				call bp_on 
011f				pop de	 
011f				pop af 
011f				pop hl 
011f				CALLMONITOR 
011f				ret 
011f			 
011f			endif 
011f			 
011f			 
011f			 
011f			; eof 
# End of file stackimbal.asm
011f			  
011f			;TODO macro to calc col and row offset into screen  
011f			  
011f			  
011f			  
011f			hardware_init:  
011f			  
011f				  
011f			  
011f					;ld a, 0  
011f					;ld (hardware_diag), a  
011f			  
011f					; clear all the buffers  
011f			  
011f 21 0a ed				ld hl, display_fb1  
0122 22 c6 eb				ld (display_fb_active), hl  
0125			  
0125 cd c8 0b				call clear_display  
0128			  
0128 21 c8 eb				ld hl, display_fb2  
012b 22 c6 eb				ld (display_fb_active), hl  
012e			  
012e cd c8 0b				call clear_display  
0131			  
0131					; init primary frame buffer area  
0131 21 ab ed				ld hl, display_fb0  
0134 22 c6 eb				ld (display_fb_active), hl  
0137			  
0137 cd c8 0b				call clear_display  
013a			  
013a			  
013a cd 09 61				call lcd_init		; lcd hardware first as some screen functions called during key_init e.g. cursor shapes  
013d			  
013d cd f7 61			call key_init  
0140 cd ad 01			call storage_init  
0143			  
0143				; setup malloc functions  
0143			  
0143				if MALLOC_1  
0143 cd ac 11				call  heap_init  
0146				endif  
0146				if MALLOC_4  
0146					call  heap_init  
0146				endif  
0146			  
0146				; init sound hardware if present  
0146			  
0146				if SOUND_ENABLE  
0146					call sound_init  
0146				endif  
0146			  
0146				; lcd test sequence  
0146					  
0146 cd eb 0b			call update_display  
0149 cd 00 0b			call delay1s  
014c 3e 2b			ld a,'+'  
014e cd cd 0b			call fill_display  
0151 cd eb 0b			call update_display  
0154 cd 00 0b			call delay1s  
0157 3e 2a			ld a,'*'  
0159 cd cd 0b			call fill_display  
015c cd eb 0b			call update_display  
015f cd 00 0b			call delay1s  
0162 3e 2d			ld a,'-'  
0164 cd cd 0b			call fill_display  
0167 cd eb 0b			call update_display  
016a cd 00 0b			call delay1s  
016d			  
016d			; boot splash screen  
016d			if display_cols == 20	  
016d			        ld a, display_row_1    
016d			else  
016d 3e 0a		        ld a, display_row_1 +10   
016f			endif  
016f 11 da 16			ld de, prom_bootmsg  
0172 cd db 0b			call str_at_display  
0175 cd eb 0b			call update_display  
0178			  
0178			  
0178 cd 00 0b			call delay1s  
017b cd 00 0b			call delay1s  
017e			if display_cols == 20	  
017e			            LD   A, display_row_3+2  
017e			else  
017e 3e 5c		            LD   A, display_row_3+12  
0180			endif  
0180 11 ef 16			ld de, prom_bootmsg1  
0183 cd db 0b			call str_at_display  
0186			; display debug level  
0186 3e 78		            LD   A, display_row_4  
0188 11 1b 01			ld de, debuglevel  
018b cd db 0b			call str_at_display  
018e			  
018e cd eb 0b			call update_display  
0191 cd 00 0b			call delay1s  
0194 cd 00 0b			call delay1s  
0197			  
0197			;	ld a, display_row_4+3  
0197			;	ld de, bootmsg2  
0197			;	call str_at_display  
0197			;	call update_display  
0197			;	call delay1s  
0197			;	call delay1s  
0197			  
0197			; debug mark setup  
0197			  
0197 3e 5f		ld a, '_'  
0199 32 65 ee		ld (debug_mark),a  
019c 32 66 ee		ld (debug_mark+1),a  
019f 32 67 ee		ld (debug_mark+2),a  
01a2 3e 00		ld a,0  
01a4 32 68 ee		ld (debug_mark+3),a  
01a7 32 69 ee		ld (debug_umark),a  
01aa			  
01aa c9					ret  
01ab			  
01ab			  
01ab			;bootmsg2:	db "Firmware v0.1",0  
01ab			  
01ab			; a 4x20 lcd  
01ab			; cout for display, low level positioning and writing functions (TODO) for hardware abstraction  
01ab			  
01ab			;if display_cols == 20  
01ab			;	include "firmware_lcd_4x20.asm"  
01ab			;endif  
01ab			  
01ab			;if display_cols == 40  
01ab			;	include "firmware_lcd_4x40.asm"  
01ab			;endif  
01ab			  
01ab			;  
01ab			; TODO use the low spare two pins on port a of display pio to bit bang a serial out video display to an esp  
01ab			; TODO abstract the bit bang video out interface for dual display  
01ab			; TODO wire video out to tx pin on rc2014 bus  
01ab			  
01ab			; must supply cin, and cin_wait for low level hardware abstraction   
01ab			; moved text_input entry points to here and leave the firmware hardware modules as abstraction layer  
01ab			; test scancode  
01ab			  
01ab			;;;;;  
01ab			;;;  
01ab			; Moved out to mini and maxi versions  
01ab			;  
01ab			; include "firmware_key_4x4.asm"  
01ab			; using existing 4 wire x 4 resistor array for input  
01ab			;include "firmware_key_4x10.asm"  
01ab			; need to mod the board for 5 rows due to resistor array  
01ab			;include "firmware_key_5x10.asm"  
01ab			  
01ab			; storage hardware interface  
01ab			  
01ab			; use microchip serial eeprom for storage  
01ab			  
01ab			  
01ab			if STORAGE_SE  
01ab				include "firmware_spi.asm"  
01ab				include "firmware_seeprom.asm"  
01ab			else  
01ab			   ; create some stubs for the labels  
01ab c9			se_readbyte: ret  
01ac c9			se_writebyte: ret  
01ad c9			storage_init: ret  
01ae			  
01ae			endif  
01ae			  
01ae			; use cf card for storage - throwing timeout errors. Hardware or software?????  
01ae			;include "firmware_cf.asm"  
01ae			  
01ae			; load up high level storage hardward abstractions  
01ae			include "firmware_storage.asm"  
01ae			 
01ae			; persisent storage hardware abstraction layer  
01ae			 
01ae			 
01ae			 
01ae			; Block 0 on storage is a config state 
01ae			 
01ae			 
01ae			 
01ae			; TODO add read phy block and write phy block functions 
01ae			; TODO add presence check (i.e. read write byte 0 of block 0 for eeprom) 
01ae			 
01ae			; Abstraction layer  
01ae			 
01ae			; Logocial block size is same size as physical size - using tape concept 
01ae			 
01ae			;STORE_BLOCK_PHY2LOG: equ (STORE_BLOCK_LOG/STORE_BLOCK_PHY)       ; How many physical blocks make up a logical block 
01ae			;STORE_BLOCK_MAX: equ (STORE_BLOCK_PHY*STORE_DEVICE_MAXBLOCKS)/255    ; Max number of logical blocks on the device 
01ae			 
01ae			 
01ae			 
01ae			; Filesystem layout (Logical layout) 
01ae			; 
01ae			; Block 0 - Bank config  
01ae			; 
01ae			;      Byte - 0 file id counter 
01ae			;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
01ae			;      Byte - 3-20 zero terminated bank label 
01ae			; 
01ae			; Block 1 > File storage 
01ae			; 
01ae			;      Byte 0 file id    - block 0 file details 
01ae			;      Byte 1 block id - block 0 is file  
01ae			;            Byte 2-15 - File name 
01ae			; 
01ae			;       - to end of block data 
01ae			; 
01ae			 
01ae			; Get ID for the file named in pointer held HL 
01ae			; Returns ID in HL = 255 if no file found 
01ae			 
01ae			storage_getid: 
01ae			 
01ae 22 6d ea			ld (store_tmp1), hl 
01b1			 
01b1				if DEBUG_STORESE 
01b1					DMARK "SGI" 
01b1 f5				push af  
01b2 3a c6 01			ld a, (.dmark)  
01b5 32 65 ee			ld (debug_mark),a  
01b8 3a c7 01			ld a, (.dmark+1)  
01bb 32 66 ee			ld (debug_mark+1),a  
01be 3a c8 01			ld a, (.dmark+2)  
01c1 32 67 ee			ld (debug_mark+2),a  
01c4 18 03			jr .pastdmark  
01c6 ..			.dmark: db "SGI"  
01c9 f1			.pastdmark: pop af  
01ca			endm  
# End of macro DMARK
01ca					CALLMONITOR 
01ca cd 6f ee			call debug_vector  
01cd				endm  
# End of macro CALLMONITOR
01cd				endif 
01cd				; get block 0 and set counter for number of files to scan 
01cd			 
01cd cd 38 03			call storage_get_block_0 
01d0			 
01d0 3a 74 ea			ld a, (store_page) 
01d3 47				ld b, a 
01d4			 
01d4				; get extent 0 of each file id 
01d4			 
01d4				if DEBUG_STORESE 
01d4					DMARK "SGc" 
01d4 f5				push af  
01d5 3a e9 01			ld a, (.dmark)  
01d8 32 65 ee			ld (debug_mark),a  
01db 3a ea 01			ld a, (.dmark+1)  
01de 32 66 ee			ld (debug_mark+1),a  
01e1 3a eb 01			ld a, (.dmark+2)  
01e4 32 67 ee			ld (debug_mark+2),a  
01e7 18 03			jr .pastdmark  
01e9 ..			.dmark: db "SGc"  
01ec f1			.pastdmark: pop af  
01ed			endm  
# End of macro DMARK
01ed					CALLMONITOR 
01ed cd 6f ee			call debug_vector  
01f0				endm  
# End of macro CALLMONITOR
01f0				endif 
01f0 60			.getloop:	ld h, b 
01f1 2e 00				ld l, 0 
01f3 c5					push bc 
01f4			 
01f4 11 74 ea				ld de, store_page 
01f7				if DEBUG_STORESE 
01f7					DMARK "SGr" 
01f7 f5				push af  
01f8 3a 0c 02			ld a, (.dmark)  
01fb 32 65 ee			ld (debug_mark),a  
01fe 3a 0d 02			ld a, (.dmark+1)  
0201 32 66 ee			ld (debug_mark+1),a  
0204 3a 0e 02			ld a, (.dmark+2)  
0207 32 67 ee			ld (debug_mark+2),a  
020a 18 03			jr .pastdmark  
020c ..			.dmark: db "SGr"  
020f f1			.pastdmark: pop af  
0210			endm  
# End of macro DMARK
0210					CALLMONITOR 
0210 cd 6f ee			call debug_vector  
0213				endm  
# End of macro CALLMONITOR
0213				endif 
0213 cd e0 07				call storage_read 
0216 cd 1e 0e				call ishlzero 
0219 28 2d				jr z, .gap 
021b					 
021b					; have a file name read. Is it one we want. 
021b			 
021b 2a 6d ea				ld hl, (store_tmp1) 
021e 11 77 ea				ld de, store_page+3   ; file name 
0221			 
0221				if DEBUG_STORESE 
0221					DMARK "SGc" 
0221 f5				push af  
0222 3a 36 02			ld a, (.dmark)  
0225 32 65 ee			ld (debug_mark),a  
0228 3a 37 02			ld a, (.dmark+1)  
022b 32 66 ee			ld (debug_mark+1),a  
022e 3a 38 02			ld a, (.dmark+2)  
0231 32 67 ee			ld (debug_mark+2),a  
0234 18 03			jr .pastdmark  
0236 ..			.dmark: db "SGc"  
0239 f1			.pastdmark: pop af  
023a			endm  
# End of macro DMARK
023a					CALLMONITOR 
023a cd 6f ee			call debug_vector  
023d				endm  
# End of macro CALLMONITOR
023d				endif 
023d cd 93 11				call strcmp 
0240 20 06				jr nz, .gap   ; not this one 
0242			 
0242 c1				        pop bc 
0243			 
0243 26 00				ld h, 0 
0245 68					ld l, b 
0246 18 22				jr .getdone 
0248						 
0248			 
0248			 
0248			 
0248			.gap: 
0248				if DEBUG_STORESE 
0248					DMARK "SGg" 
0248 f5				push af  
0249 3a 5d 02			ld a, (.dmark)  
024c 32 65 ee			ld (debug_mark),a  
024f 3a 5e 02			ld a, (.dmark+1)  
0252 32 66 ee			ld (debug_mark+1),a  
0255 3a 5f 02			ld a, (.dmark+2)  
0258 32 67 ee			ld (debug_mark+2),a  
025b 18 03			jr .pastdmark  
025d ..			.dmark: db "SGg"  
0260 f1			.pastdmark: pop af  
0261			endm  
# End of macro DMARK
0261					CALLMONITOR 
0261 cd 6f ee			call debug_vector  
0264				endm  
# End of macro CALLMONITOR
0264				endif 
0264			 
0264 c1					pop bc 
0265 10 89				djnz .getloop 
0267 21 ff 00				ld hl, 255 
026a			.getdone: 
026a			 
026a				if DEBUG_STORESE 
026a					DMARK "SGe" 
026a f5				push af  
026b 3a 7f 02			ld a, (.dmark)  
026e 32 65 ee			ld (debug_mark),a  
0271 3a 80 02			ld a, (.dmark+1)  
0274 32 66 ee			ld (debug_mark+1),a  
0277 3a 81 02			ld a, (.dmark+2)  
027a 32 67 ee			ld (debug_mark+2),a  
027d 18 03			jr .pastdmark  
027f ..			.dmark: db "SGe"  
0282 f1			.pastdmark: pop af  
0283			endm  
# End of macro DMARK
0283					CALLMONITOR 
0283 cd 6f ee			call debug_vector  
0286				endm  
# End of macro CALLMONITOR
0286				endif 
0286			 
0286 c9				ret 
0287			 
0287			 
0287			 
0287			 
0287			 
0287			 
0287			 
0287			 
0287			; Read Block 
0287			; ---------- 
0287			; 
0287			; With current bank 
0287			;  
0287			; Get block number to read 
0287			; Load physical blocks starting at start block into buffer 
0287			 
0287			; de points to buffer to use 
0287			; hl holds logical block number  
0287			 
0287			storage_read_block: 
0287			 
0287				; TODO bank selection 
0287			 
0287				; for each of the physical blocks read it into the buffer 
0287 06 40			ld b, STORE_BLOCK_PHY 
0289			 
0289				if DEBUG_STORESE 
0289 d5					push de 
028a				endif 
028a				 
028a			.rl1:    
028a			 
028a				; read physical block at hl into de 
028a			        ; increment hl and de to next read position on exit 
028a			 
028a e5				push hl 
028b d5				push de	 
028c c5				push bc 
028d			;	if DEBUG_STORESE 
028d			;		push af 
028d			;		ld a, 'R' 
028d			;		ld (debug_mark),a 
028d			;		pop af 
028d			;		CALLMONITOR 
028d			;	endif 
028d cd ab 01			call se_readbyte 
0290			;	if DEBUG_STORESE 
0290			;		ld a,(spi_portbyte) 
0290			;		ld l, a 
0290			;		push af 
0290			;		ld a, '1' 
0290			;		ld (debug_mark),a 
0290			;		pop af 
0290			;		CALLMONITOR 
0290			;	endif 
0290 c1				pop bc 
0291 d1				pop de 
0292 e1				pop hl 
0293 12				ld (de),a 
0294 23				inc hl 
0295 13				inc de 
0296			 
0296			;	if DEBUG_STORESE 
0296			;		push af 
0296			;		ld a, 'r' 
0296			;		ld (debug_mark),a 
0296			;		pop af 
0296			;		CALLMONITOR 
0296			;	endif 
0296			 
0296 10 f2			djnz .rl1 
0298			 
0298				if DEBUG_STORESE 
0298					DMARK "SRB" 
0298 f5				push af  
0299 3a ad 02			ld a, (.dmark)  
029c 32 65 ee			ld (debug_mark),a  
029f 3a ae 02			ld a, (.dmark+1)  
02a2 32 66 ee			ld (debug_mark+1),a  
02a5 3a af 02			ld a, (.dmark+2)  
02a8 32 67 ee			ld (debug_mark+2),a  
02ab 18 03			jr .pastdmark  
02ad ..			.dmark: db "SRB"  
02b0 f1			.pastdmark: pop af  
02b1			endm  
# End of macro DMARK
02b1 d1					pop de 
02b2			; 
02b2			;		push af 
02b2			;		ld a, 'R' 
02b2			;		ld (debug_mark),a 
02b2			;		pop af 
02b2					CALLMONITOR 
02b2 cd 6f ee			call debug_vector  
02b5				endm  
# End of macro CALLMONITOR
02b5				endif 
02b5 c9				ret	 
02b6				 
02b6			 
02b6			; File Size 
02b6			; --------- 
02b6			; 
02b6			;   hl file id 
02b6			; 
02b6			;  returns in hl the number of blocks 
02b6			 
02b6			storage_file_size: 
02b6 5d				ld e, l 
02b7 16 00			ld d, 0 
02b9 21 40 00			ld hl, STORE_BLOCK_PHY 
02bc					if DEBUG_FORTH_WORDS 
02bc						DMARK "SIZ" 
02bc f5				push af  
02bd 3a d1 02			ld a, (.dmark)  
02c0 32 65 ee			ld (debug_mark),a  
02c3 3a d2 02			ld a, (.dmark+1)  
02c6 32 66 ee			ld (debug_mark+1),a  
02c9 3a d3 02			ld a, (.dmark+2)  
02cc 32 67 ee			ld (debug_mark+2),a  
02cf 18 03			jr .pastdmark  
02d1 ..			.dmark: db "SIZ"  
02d4 f1			.pastdmark: pop af  
02d5			endm  
# End of macro DMARK
02d5						CALLMONITOR 
02d5 cd 6f ee			call debug_vector  
02d8				endm  
# End of macro CALLMONITOR
02d8					endif 
02d8 cd ba 05			call storage_findnextid 
02db			 
02db cd 1e 0e			call ishlzero 
02de			;	ld a, l 
02de			;	add h 
02de			;	cp 0 
02de c8				ret z			; block not found so EOF 
02df			 
02df 11 74 ea			ld de, store_page 
02e2 cd 87 02			call storage_read_block 
02e5			 
02e5 3a 76 ea			ld a, (store_page+2)	 ; get extent count 
02e8 6f				ld l, a 
02e9 26 00			ld h, 0 
02eb c9			 	ret 
02ec			 
02ec			 
02ec			; Write Block 
02ec			; ----------- 
02ec			; 
02ec			; With current bank 
02ec			;  
02ec			; Get block number to write 
02ec			; Write physical blocks starting at start block from buffer 
02ec			  
02ec			storage_write_block: 
02ec				; TODO bank selection 
02ec			 
02ec				; for each of the physical blocks read it into the buffer 
02ec 06 40			ld b, STORE_BLOCK_PHY 
02ee			 
02ee				if DEBUG_STORESE 
02ee					DMARK "SWB" 
02ee f5				push af  
02ef 3a 03 03			ld a, (.dmark)  
02f2 32 65 ee			ld (debug_mark),a  
02f5 3a 04 03			ld a, (.dmark+1)  
02f8 32 66 ee			ld (debug_mark+1),a  
02fb 3a 05 03			ld a, (.dmark+2)  
02fe 32 67 ee			ld (debug_mark+2),a  
0301 18 03			jr .pastdmark  
0303 ..			.dmark: db "SWB"  
0306 f1			.pastdmark: pop af  
0307			endm  
# End of macro DMARK
0307			 
0307					;push af 
0307					;ld a, 'W' 
0307					;ld (debug_mark),a 
0307					;pop af 
0307					CALLMONITOR 
0307 cd 6f ee			call debug_vector  
030a				endm  
# End of macro CALLMONITOR
030a				endif 
030a			 
030a			; might not be working 
030a			;	call se_writepage 
030a			 
030a			;	ret 
030a			; 
030a			 
030a			 
030a			 
030a			.wl1:    
030a			 
030a				; read physical block at hl into de 
030a			        ; increment hl and de to next read position on exit 
030a			 
030a e5				push hl 
030b d5				push de	 
030c c5				push bc 
030d 1a				ld a,(de) 
030e				;if DEBUG_STORESE 
030e			;		push af 
030e			;		ld a, 'W' 
030e			;		ld (debug_mark),a 
030e			;		pop af 
030e			;		CALLMONITOR 
030e			;	endif 
030e cd ac 01			call se_writebyte 
0311			;	call delay250ms 
0311 00				nop 
0312 00				nop 
0313 00				nop 
0314			;	if DEBUG_STORESE 
0314			;		push af 
0314			;		ld a, 'w' 
0314			;		ld (debug_mark),a 
0314			;		pop af 
0314			;		CALLMONITOR 
0314			;	endif 
0314 c1				pop bc 
0315 d1				pop de 
0316 e1				pop hl 
0317 23				inc hl 
0318 13				inc de 
0319			 
0319			 
0319 10 ef			djnz .wl1 
031b			 
031b				if DEBUG_STORESE 
031b					DMARK "SW2" 
031b f5				push af  
031c 3a 30 03			ld a, (.dmark)  
031f 32 65 ee			ld (debug_mark),a  
0322 3a 31 03			ld a, (.dmark+1)  
0325 32 66 ee			ld (debug_mark+1),a  
0328 3a 32 03			ld a, (.dmark+2)  
032b 32 67 ee			ld (debug_mark+2),a  
032e 18 03			jr .pastdmark  
0330 ..			.dmark: db "SW2"  
0333 f1			.pastdmark: pop af  
0334			endm  
# End of macro DMARK
0334			 
0334					;push af 
0334					;ld a, 'W' 
0334					;ld (debug_mark),a 
0334					;pop af 
0334					CALLMONITOR 
0334 cd 6f ee			call debug_vector  
0337				endm  
# End of macro CALLMONITOR
0337				endif 
0337 c9				ret	 
0338			 
0338			; Init bank 
0338			; --------- 
0338			; 
0338			; With current bank 
0338			; 
0338			; Setup block 0 config 
0338			;     Set 0 file id counter 
0338			;     Set formatted byte pattern 
0338			;     Zero out bank label 
0338			;      
0338			; For every logical block write 0-1 byte as null 
0338			 
0338			storage_get_block_0: 
0338			 
0338				; TODO check presence 
0338			 
0338				; get block 0 config 
0338			 
0338 21 00 00			ld hl, 0 
033b 11 74 ea			ld de, store_page 
033e cd 87 02			call storage_read_block 
0341			 
0341				if DEBUG_STORESE 
0341					DMARK "SB0" 
0341 f5				push af  
0342 3a 56 03			ld a, (.dmark)  
0345 32 65 ee			ld (debug_mark),a  
0348 3a 57 03			ld a, (.dmark+1)  
034b 32 66 ee			ld (debug_mark+1),a  
034e 3a 58 03			ld a, (.dmark+2)  
0351 32 67 ee			ld (debug_mark+2),a  
0354 18 03			jr .pastdmark  
0356 ..			.dmark: db "SB0"  
0359 f1			.pastdmark: pop af  
035a			endm  
# End of macro DMARK
035a 11 74 ea				ld de, store_page 
035d			;		push af 
035d			;		ld a, 'i' 
035d			;		ld (debug_mark),a 
035d			;		pop af 
035d					CALLMONITOR 
035d cd 6f ee			call debug_vector  
0360				endm  
# End of macro CALLMONITOR
0360				endif 
0360			 
0360				; is this area formatted? 
0360			 
0360			;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
0360 2a 75 ea			ld hl, (store_page+1) 
0363 3e 80			ld a,0x80 
0365 bd				cp l 
0366 20 22			jr nz, .ininotformatted 
0368				; do a double check 
0368 3e 27			ld a, 0x27 
036a bc				cp h 
036b 20 1d			jr nz, .ininotformatted 
036d			 
036d				; formatted then 
036d			 
036d				if DEBUG_STORESE 
036d					DMARK "SB1" 
036d f5				push af  
036e 3a 82 03			ld a, (.dmark)  
0371 32 65 ee			ld (debug_mark),a  
0374 3a 83 03			ld a, (.dmark+1)  
0377 32 66 ee			ld (debug_mark+1),a  
037a 3a 84 03			ld a, (.dmark+2)  
037d 32 67 ee			ld (debug_mark+2),a  
0380 18 03			jr .pastdmark  
0382 ..			.dmark: db "SB1"  
0385 f1			.pastdmark: pop af  
0386			endm  
# End of macro DMARK
0386					;push af 
0386					;ld a, 'I' 
0386					;ld (debug_mark),a 
0386					;pop af 
0386					CALLMONITOR 
0386 cd 6f ee			call debug_vector  
0389				endm  
# End of macro CALLMONITOR
0389				endif 
0389 c9				ret 
038a			 
038a			.ininotformatted: 
038a				; bank not formatted so poke various bits to make sure 
038a			 
038a				if DEBUG_STORESE 
038a					DMARK "SB2" 
038a f5				push af  
038b 3a 9f 03			ld a, (.dmark)  
038e 32 65 ee			ld (debug_mark),a  
0391 3a a0 03			ld a, (.dmark+1)  
0394 32 66 ee			ld (debug_mark+1),a  
0397 3a a1 03			ld a, (.dmark+2)  
039a 32 67 ee			ld (debug_mark+2),a  
039d 18 03			jr .pastdmark  
039f ..			.dmark: db "SB2"  
03a2 f1			.pastdmark: pop af  
03a3			endm  
# End of macro DMARK
03a3					;push af 
03a3					;ld a, 'f' 
03a3					;ld (debug_mark),a 
03a3					;pop af 
03a3					CALLMONITOR 
03a3 cd 6f ee			call debug_vector  
03a6				endm  
# End of macro CALLMONITOR
03a6				endif 
03a6			 
03a6 cd c3 0a			call storage_clear_page 
03a9			 
03a9 21 74 ea			ld hl, store_page 
03ac 3e 00			ld a, 0 
03ae				 
03ae 77				ld (hl),a   ; reset file counter 
03af			 
03af 21 80 27			ld hl, 0x2780     ;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
03b2 22 75 ea		 	ld (store_page+1), hl	 
03b5			 
03b5				; set default label 
03b5			 
03b5 21 51 04			ld hl, .defaultbanklabl 
03b8 11 77 ea		 	ld de, store_page+3 
03bb 01 0f 00			ld bc, 15 
03be ed b0			ldir 
03c0			 
03c0				; Append the current bank id 
03c0 21 80 ea			ld hl, store_page+3+9 
03c3 3a 59 ea			ld a, (spi_device_id) 
03c6 77				ld (hl), a 
03c7			 
03c7				; save default page 0 
03c7			 
03c7 21 00 00			ld hl, 0 
03ca 11 74 ea			ld de, store_page 
03cd				if DEBUG_STORESE 
03cd					DMARK "SB3" 
03cd f5				push af  
03ce 3a e2 03			ld a, (.dmark)  
03d1 32 65 ee			ld (debug_mark),a  
03d4 3a e3 03			ld a, (.dmark+1)  
03d7 32 66 ee			ld (debug_mark+1),a  
03da 3a e4 03			ld a, (.dmark+2)  
03dd 32 67 ee			ld (debug_mark+2),a  
03e0 18 03			jr .pastdmark  
03e2 ..			.dmark: db "SB3"  
03e5 f1			.pastdmark: pop af  
03e6			endm  
# End of macro DMARK
03e6			;		push af 
03e6			;		ld a, 'F' 
03e6			;		ld (debug_mark),a 
03e6			;		pop af 
03e6					CALLMONITOR 
03e6 cd 6f ee			call debug_vector  
03e9				endm  
# End of macro CALLMONITOR
03e9				endif 
03e9 cd ec 02			call storage_write_block 
03ec				if DEBUG_STORESE 
03ec					DMARK "SB4" 
03ec f5				push af  
03ed 3a 01 04			ld a, (.dmark)  
03f0 32 65 ee			ld (debug_mark),a  
03f3 3a 02 04			ld a, (.dmark+1)  
03f6 32 66 ee			ld (debug_mark+1),a  
03f9 3a 03 04			ld a, (.dmark+2)  
03fc 32 67 ee			ld (debug_mark+2),a  
03ff 18 03			jr .pastdmark  
0401 ..			.dmark: db "SB4"  
0404 f1			.pastdmark: pop af  
0405			endm  
# End of macro DMARK
0405			;		push af 
0405			;		ld a, '>' 
0405			;		ld (debug_mark),a 
0405			;		pop af 
0405					CALLMONITOR 
0405 cd 6f ee			call debug_vector  
0408				endm  
# End of macro CALLMONITOR
0408				endif 
0408			 
0408 00				nop 
0409 00				nop 
040a 00				nop 
040b			 
040b				; now set 0 in every page to mark as a free block 
040b			 
040b 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
040d 21 40 00			ld hl, STORE_BLOCK_PHY 
0410			 
0410 3e 00		.setmark1:   	ld a,0 
0412 e5					push hl 
0413 c5					push bc 
0414 cd ac 01				call se_writebyte 
0417 3e 0a			ld a, 10 
0419 cd e5 0a			call aDelayInMS 
041c 23				inc hl 
041d cd ac 01				call se_writebyte 
0420 3e 0a			ld a, 10 
0422 cd e5 0a			call aDelayInMS 
0425 2b				dec hl 
0426 c1					pop bc 
0427 e1					pop hl 
0428 3e 40				ld a, STORE_BLOCK_PHY 
042a cd f5 0d				call addatohl 
042d 10 e1				djnz .setmark1 
042f			 
042f 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
0431 3e 00		.setmark2:   	ld a,0 
0433 e5					push hl 
0434 c5					push bc 
0435 cd ac 01				call se_writebyte 
0438 3e 0a			ld a, 10 
043a cd e5 0a			call aDelayInMS 
043d 23				inc hl 
043e cd ac 01				call se_writebyte 
0441 3e 0a			ld a, 10 
0443 cd e5 0a			call aDelayInMS 
0446 2b				dec hl 
0447 c1					pop bc 
0448 e1					pop hl 
0449 3e 40				ld a, STORE_BLOCK_PHY 
044b cd f5 0d				call addatohl 
044e 10 e1				djnz .setmark2 
0450			 
0450					 
0450			 
0450			 
0450 c9				ret 
0451			 
0451			 
0451			 
0451			 
0451 .. 00		.defaultbanklabl:   db "BankLabel_",0 
045c			 
045c			 
045c			 
045c			; Label Bank 
045c			; ---------- 
045c			; 
045c			; With current bank 
045c			; Read block 0 
045c			; Set label 
045c			; Write block 0 
045c			 
045c			; label str pointer in hl 
045c			 
045c			storage_label:     
045c			 
045c				if DEBUG_STORESE 
045c					DMARK "LBL" 
045c f5				push af  
045d 3a 71 04			ld a, (.dmark)  
0460 32 65 ee			ld (debug_mark),a  
0463 3a 72 04			ld a, (.dmark+1)  
0466 32 66 ee			ld (debug_mark+1),a  
0469 3a 73 04			ld a, (.dmark+2)  
046c 32 67 ee			ld (debug_mark+2),a  
046f 18 03			jr .pastdmark  
0471 ..			.dmark: db "LBL"  
0474 f1			.pastdmark: pop af  
0475			endm  
# End of macro DMARK
0475					CALLMONITOR 
0475 cd 6f ee			call debug_vector  
0478				endm  
# End of macro CALLMONITOR
0478				endif 
0478			 
0478 e5				push hl 
0479			 
0479 cd 38 03			call storage_get_block_0 
047c			 
047c				; set default label 
047c			 
047c e1				pop hl 
047d			 
047d 11 77 ea		 	ld de, store_page+3 
0480 01 0f 00			ld bc, 15 
0483				if DEBUG_STORESE 
0483					DMARK "LB3" 
0483 f5				push af  
0484 3a 98 04			ld a, (.dmark)  
0487 32 65 ee			ld (debug_mark),a  
048a 3a 99 04			ld a, (.dmark+1)  
048d 32 66 ee			ld (debug_mark+1),a  
0490 3a 9a 04			ld a, (.dmark+2)  
0493 32 67 ee			ld (debug_mark+2),a  
0496 18 03			jr .pastdmark  
0498 ..			.dmark: db "LB3"  
049b f1			.pastdmark: pop af  
049c			endm  
# End of macro DMARK
049c					CALLMONITOR 
049c cd 6f ee			call debug_vector  
049f				endm  
# End of macro CALLMONITOR
049f				endif 
049f ed b0			ldir 
04a1				; save default page 0 
04a1			 
04a1 21 00 00			ld hl, 0 
04a4 11 74 ea			ld de, store_page 
04a7				if DEBUG_STORESE 
04a7					DMARK "LBW" 
04a7 f5				push af  
04a8 3a bc 04			ld a, (.dmark)  
04ab 32 65 ee			ld (debug_mark),a  
04ae 3a bd 04			ld a, (.dmark+1)  
04b1 32 66 ee			ld (debug_mark+1),a  
04b4 3a be 04			ld a, (.dmark+2)  
04b7 32 67 ee			ld (debug_mark+2),a  
04ba 18 03			jr .pastdmark  
04bc ..			.dmark: db "LBW"  
04bf f1			.pastdmark: pop af  
04c0			endm  
# End of macro DMARK
04c0					CALLMONITOR 
04c0 cd 6f ee			call debug_vector  
04c3				endm  
# End of macro CALLMONITOR
04c3				endif 
04c3 cd ec 02			call storage_write_block 
04c6			 
04c6 c9				ret 
04c7			 
04c7			 
04c7			 
04c7			; Read Block 0 - Config 
04c7			; --------------------- 
04c7			; 
04c7			; With current bank 
04c7			; Call presence test 
04c7			;    If not present format/init bank  
04c7			; Read block 0  
04c7			;  
04c7			 
04c7			 
04c7			; Dir 
04c7			; --- 
04c7			; 
04c7			; With current bank 
04c7			; Load Block 0 Config 
04c7			; Get max file id number 
04c7			; For each logical block 
04c7			;    Read block read byte 2 
04c7			;      if first block of file 
04c7			;         Display file name 
04c7			;         Display type flags for file 
04c7			;        
04c7			 
04c7			; moving to words as this requires stack control 
04c7			 
04c7			 
04c7			; Delete File 
04c7			; ----------- 
04c7			; 
04c7			; With current bank 
04c7			; 
04c7			; Load Block 0 Config 
04c7			; Get max file id number 
04c7			; For each logical block 
04c7			;    Read block file id 
04c7			;      If first block of file and dont have file id 
04c7			;         if file to delete 
04c7			;         Save file id 
04c7			;         Null file id 
04c7			;         Write this block back 
04c7			;      If file id is one saved 
04c7			;         Null file id 
04c7			;         Write this block back 
04c7			 
04c7			 
04c7			.se_done: 
04c7 e1				pop hl 
04c8 c9				ret 
04c9			 
04c9			storage_erase: 
04c9			 
04c9				; hl contains the file id 
04c9			 
04c9 5d				ld e, l 
04ca 16 00			ld d, 0 
04cc 21 40 00			ld hl, STORE_BLOCK_PHY 
04cf					if DEBUG_FORTH_WORDS 
04cf						DMARK "ERA" 
04cf f5				push af  
04d0 3a e4 04			ld a, (.dmark)  
04d3 32 65 ee			ld (debug_mark),a  
04d6 3a e5 04			ld a, (.dmark+1)  
04d9 32 66 ee			ld (debug_mark+1),a  
04dc 3a e6 04			ld a, (.dmark+2)  
04df 32 67 ee			ld (debug_mark+2),a  
04e2 18 03			jr .pastdmark  
04e4 ..			.dmark: db "ERA"  
04e7 f1			.pastdmark: pop af  
04e8			endm  
# End of macro DMARK
04e8						CALLMONITOR 
04e8 cd 6f ee			call debug_vector  
04eb				endm  
# End of macro CALLMONITOR
04eb					endif 
04eb cd ba 05			call storage_findnextid 
04ee cd 1e 0e			call ishlzero 
04f1 c8				ret z 
04f2			 
04f2 e5				push hl 
04f3			 
04f3				; TODO check file not found 
04f3			 
04f3 11 74 ea			ld de, store_page 
04f6 cd 87 02			call storage_read_block 
04f9			 
04f9 cd 1e 0e			call ishlzero 
04fc ca c7 04			jp z,.se_done 
04ff			 
04ff					if DEBUG_FORTH_WORDS 
04ff						DMARK "ER1" 
04ff f5				push af  
0500 3a 14 05			ld a, (.dmark)  
0503 32 65 ee			ld (debug_mark),a  
0506 3a 15 05			ld a, (.dmark+1)  
0509 32 66 ee			ld (debug_mark+1),a  
050c 3a 16 05			ld a, (.dmark+2)  
050f 32 67 ee			ld (debug_mark+2),a  
0512 18 03			jr .pastdmark  
0514 ..			.dmark: db "ER1"  
0517 f1			.pastdmark: pop af  
0518			endm  
# End of macro DMARK
0518						CALLMONITOR 
0518 cd 6f ee			call debug_vector  
051b				endm  
# End of macro CALLMONITOR
051b					endif 
051b 3a 74 ea			ld a, (store_page)	; get file id 
051e 32 68 ea			ld (store_tmpid), a 
0521			 
0521 3a 76 ea			ld a, (store_page+2)    ; get count of extends 
0524 32 67 ea			ld (store_tmpext), a 
0527			 
0527				; wipe file header 
0527			 
0527 e1				pop hl 
0528 3e 00			ld a, 0 
052a 32 74 ea			ld (store_page), a 
052d 32 75 ea			ld (store_page+1),a 
0530 11 74 ea			ld de, store_page 
0533					if DEBUG_FORTH_WORDS 
0533						DMARK "ER2" 
0533 f5				push af  
0534 3a 48 05			ld a, (.dmark)  
0537 32 65 ee			ld (debug_mark),a  
053a 3a 49 05			ld a, (.dmark+1)  
053d 32 66 ee			ld (debug_mark+1),a  
0540 3a 4a 05			ld a, (.dmark+2)  
0543 32 67 ee			ld (debug_mark+2),a  
0546 18 03			jr .pastdmark  
0548 ..			.dmark: db "ER2"  
054b f1			.pastdmark: pop af  
054c			endm  
# End of macro DMARK
054c						CALLMONITOR 
054c cd 6f ee			call debug_vector  
054f				endm  
# End of macro CALLMONITOR
054f					endif 
054f cd ec 02			call storage_write_block 
0552			 
0552			 
0552				; wipe file extents 
0552			 
0552 3a 67 ea			ld a, (store_tmpext) 
0555 47				ld b, a 
0556			 
0556			.eraext:	  
0556 c5				push bc 
0557			 
0557 21 40 00			ld hl, STORE_BLOCK_PHY 
055a 3a 68 ea			ld a,(store_tmpid) 
055d 5f				ld e, a 
055e 50				ld d, b	 
055f					if DEBUG_FORTH_WORDS 
055f						DMARK "ER3" 
055f f5				push af  
0560 3a 74 05			ld a, (.dmark)  
0563 32 65 ee			ld (debug_mark),a  
0566 3a 75 05			ld a, (.dmark+1)  
0569 32 66 ee			ld (debug_mark+1),a  
056c 3a 76 05			ld a, (.dmark+2)  
056f 32 67 ee			ld (debug_mark+2),a  
0572 18 03			jr .pastdmark  
0574 ..			.dmark: db "ER3"  
0577 f1			.pastdmark: pop af  
0578			endm  
# End of macro DMARK
0578						CALLMONITOR 
0578 cd 6f ee			call debug_vector  
057b				endm  
# End of macro CALLMONITOR
057b					endif 
057b cd ba 05			call storage_findnextid 
057e cd 1e 0e			call ishlzero 
0581 ca c7 04			jp z,.se_done 
0584			 
0584 e5				push hl 
0585 11 74 ea			ld de, store_page 
0588 cd 87 02			call storage_read_block 
058b			 
058b				; free block	 
058b			 
058b 3e 00			ld a, 0 
058d 32 74 ea			ld (store_page), a 
0590 32 75 ea			ld (store_page+1),a 
0593 11 74 ea			ld de, store_page 
0596 e1				pop hl 
0597					if DEBUG_FORTH_WORDS 
0597						DMARK "ER4" 
0597 f5				push af  
0598 3a ac 05			ld a, (.dmark)  
059b 32 65 ee			ld (debug_mark),a  
059e 3a ad 05			ld a, (.dmark+1)  
05a1 32 66 ee			ld (debug_mark+1),a  
05a4 3a ae 05			ld a, (.dmark+2)  
05a7 32 67 ee			ld (debug_mark+2),a  
05aa 18 03			jr .pastdmark  
05ac ..			.dmark: db "ER4"  
05af f1			.pastdmark: pop af  
05b0			endm  
# End of macro DMARK
05b0						CALLMONITOR 
05b0 cd 6f ee			call debug_vector  
05b3				endm  
# End of macro CALLMONITOR
05b3					endif 
05b3 cd ec 02			call storage_write_block 
05b6			 
05b6 c1				pop bc 
05b7 10 9d			djnz .eraext 
05b9			 
05b9 c9				ret 
05ba			 
05ba			 
05ba			; Find Free Block 
05ba			; --------------- 
05ba			; 
05ba			; With current bank 
05ba			;  
05ba			; From given starting logical block 
05ba			;    Read block  
05ba			;    If no file id 
05ba			;         Return block id 
05ba			 
05ba			 
05ba			; hl starting page number 
05ba			; hl contains free page number or zero if no pages free 
05ba			; e contains the file id to locate 
05ba			; d contains the block number 
05ba			 
05ba			; TODO change to find file id and use zero for free block 
05ba			 
05ba			storage_findnextid: 
05ba			 
05ba				; now locate first 0 page to mark as a free block 
05ba			 
05ba 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
05bc			;	ld hl, STORE_BLOCK_PHY 
05bc			 
05bc					if DEBUG_FORTH_WORDS 
05bc					DMARK "FNI" 
05bc f5				push af  
05bd 3a d1 05			ld a, (.dmark)  
05c0 32 65 ee			ld (debug_mark),a  
05c3 3a d2 05			ld a, (.dmark+1)  
05c6 32 66 ee			ld (debug_mark+1),a  
05c9 3a d3 05			ld a, (.dmark+2)  
05cc 32 67 ee			ld (debug_mark+2),a  
05cf 18 03			jr .pastdmark  
05d1 ..			.dmark: db "FNI"  
05d4 f1			.pastdmark: pop af  
05d5			endm  
# End of macro DMARK
05d5						CALLMONITOR 
05d5 cd 6f ee			call debug_vector  
05d8				endm  
# End of macro CALLMONITOR
05d8					endif 
05d8			.ff1:   	 
05d8 e5					push hl 
05d9 c5					push bc 
05da d5					push de 
05db cd ab 01				call se_readbyte 
05de 5f					ld e,a 
05df 23					inc hl 
05e0 cd ab 01				call se_readbyte 
05e3 57					ld d, a 
05e4 e1					pop hl 
05e5 e5					push hl 
05e6 cd 13 0e				call cmp16 
05e9 28 49				jr z, .fffound 
05eb			 
05eb d1					pop de 
05ec c1					pop bc 
05ed e1					pop hl 
05ee			 
05ee					; is found? 
05ee					;cp e 
05ee					;ret z 
05ee			 
05ee 3e 40				ld a, STORE_BLOCK_PHY 
05f0 cd f5 0d				call addatohl 
05f3 10 e3				djnz .ff1 
05f5			 
05f5 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
05f7			.ff2:   	 
05f7			 
05f7 e5					push hl 
05f8 c5					push bc 
05f9 d5					push de 
05fa cd ab 01				call se_readbyte 
05fd 5f					ld e,a 
05fe 23					inc hl 
05ff cd ab 01				call se_readbyte 
0602 57					ld d, a 
0603			 
0603 e1					pop hl 
0604 e5					push hl 
0605 cd 13 0e				call cmp16 
0608 28 2a				jr z, .fffound 
060a			 
060a d1					pop de 
060b c1					pop bc 
060c e1					pop hl 
060d					; is found? 
060d					;cp e 
060d					;ret z 
060d			 
060d 3e 40				ld a, STORE_BLOCK_PHY 
060f cd f5 0d				call addatohl 
0612 10 e3				djnz .ff2 
0614			 
0614			 
0614					if DEBUG_FORTH_WORDS 
0614					DMARK "FN-" 
0614 f5				push af  
0615 3a 29 06			ld a, (.dmark)  
0618 32 65 ee			ld (debug_mark),a  
061b 3a 2a 06			ld a, (.dmark+1)  
061e 32 66 ee			ld (debug_mark+1),a  
0621 3a 2b 06			ld a, (.dmark+2)  
0624 32 67 ee			ld (debug_mark+2),a  
0627 18 03			jr .pastdmark  
0629 ..			.dmark: db "FN-"  
062c f1			.pastdmark: pop af  
062d			endm  
# End of macro DMARK
062d					;	push af 
062d					;	ld a, 'n' 
062d					;	ld (debug_mark),a 
062d					;	pop af 
062d						CALLMONITOR 
062d cd 6f ee			call debug_vector  
0630				endm  
# End of macro CALLMONITOR
0630					endif 
0630				; no free marks! 
0630 21 00 00				ld hl, 0 
0633 c9				ret 
0634			.fffound: 
0634				 
0634			 
0634 d1					pop de 
0635 c1					pop bc 
0636 e1					pop hl 
0637					if DEBUG_FORTH_WORDS 
0637					DMARK "FNF" 
0637 f5				push af  
0638 3a 4c 06			ld a, (.dmark)  
063b 32 65 ee			ld (debug_mark),a  
063e 3a 4d 06			ld a, (.dmark+1)  
0641 32 66 ee			ld (debug_mark+1),a  
0644 3a 4e 06			ld a, (.dmark+2)  
0647 32 67 ee			ld (debug_mark+2),a  
064a 18 03			jr .pastdmark  
064c ..			.dmark: db "FNF"  
064f f1			.pastdmark: pop af  
0650			endm  
# End of macro DMARK
0650					;	push af 
0650					;	ld a, 'n' 
0650					;	ld (debug_mark),a 
0650					;	pop af 
0650						CALLMONITOR 
0650 cd 6f ee			call debug_vector  
0653				endm  
# End of macro CALLMONITOR
0653					endif 
0653 c9				ret 
0654			 
0654			 
0654			 
0654			; Free Space 
0654			; ---------- 
0654			; 
0654			; With current bank 
0654			; 
0654			; Set block count to zero 
0654			; Starting with first logical block 
0654			;      Find free block  
0654			;      If block id given, increment block count 
0654			; 
0654			;  
0654			 
0654			 
0654			; hl contains count of free blocks 
0654			 
0654			storage_freeblocks: 
0654			 
0654				; now locate first 0 page to mark as a free block 
0654			 
0654 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
0656 21 40 00			ld hl, STORE_BLOCK_PHY 
0659 11 00 00			ld de, 0 
065c			 
065c			.fb1:   	 
065c e5					push hl 
065d c5					push bc 
065e d5					push de 
065f cd ab 01				call se_readbyte 
0662 d1					pop de 
0663 c1					pop bc 
0664 e1					pop hl 
0665			 
0665					; is free? 
0665 fe 00				cp 0 
0667 20 01				jr nz, .ff1cont 
0669 13					inc de 
066a			 
066a			.ff1cont: 
066a			 
066a			 
066a 3e 40				ld a, STORE_BLOCK_PHY 
066c cd f5 0d				call addatohl 
066f 10 eb				djnz .fb1 
0671			 
0671 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
0673			.fb2:   	 
0673 e5					push hl 
0674 c5					push bc 
0675 d5					push de 
0676 cd ab 01				call se_readbyte 
0679 d1					pop de 
067a c1					pop bc 
067b e1					pop hl 
067c			 
067c					; is free? 
067c fe 00				cp 0 
067e 20 01				jr nz, .ff2cont 
0680 13					inc de 
0681			 
0681			.ff2cont: 
0681			 
0681 3e 40				ld a, STORE_BLOCK_PHY 
0683 cd f5 0d				call addatohl 
0686 10 eb				djnz .fb2 
0688			 
0688 eb				ex de, hl 
0689 c9				ret 
068a			 
068a			; Get File ID 
068a			; ----------- 
068a			; 
068a			; With current bank 
068a			;  
068a			; Load Block 0 Config 
068a			; Get max file id number 
068a			; For each logical block 
068a			;    Read block file id 
068a			;      If first block of file and dont have file id 
068a			;         if file get id and exit 
068a			 
068a			 
068a			 
068a			 
068a			; Create File 
068a			; ----------- 
068a			; 
068a			; With current bank  
068a			; Load Block 0 Config 
068a			; Get max file id number 
068a			; Increment file id number 
068a			; Save Config 
068a			; Find free block 
068a			; Set buffer with file name and file id 
068a			; Write buffer to free block  
068a			 
068a			 
068a			; hl point to file name 
068a			; hl returns file id 
068a			 
068a			; file format: 
068a			; byte 0 - file id 
068a			; byte 1 - extent number 
068a			; byte 2-> data 
068a			 
068a			; format for extent number 0: 
068a			; 
068a			; byte 0 - file id 
068a			; byte 1 - extent 0 
068a			; byte 2 - extent count 
068a			; byte 3 -> file name and meta data 
068a			 
068a			 
068a			storage_create: 
068a				if DEBUG_STORESE 
068a					DMARK "SCR" 
068a f5				push af  
068b 3a 9f 06			ld a, (.dmark)  
068e 32 65 ee			ld (debug_mark),a  
0691 3a a0 06			ld a, (.dmark+1)  
0694 32 66 ee			ld (debug_mark+1),a  
0697 3a a1 06			ld a, (.dmark+2)  
069a 32 67 ee			ld (debug_mark+2),a  
069d 18 03			jr .pastdmark  
069f ..			.dmark: db "SCR"  
06a2 f1			.pastdmark: pop af  
06a3			endm  
# End of macro DMARK
06a3					CALLMONITOR 
06a3 cd 6f ee			call debug_vector  
06a6				endm  
# End of macro CALLMONITOR
06a6				endif 
06a6			 
06a6 e5				push hl		; save file name pointer 
06a7			 
06a7 cd 38 03			call storage_get_block_0 
06aa			 
06aa 3a 74 ea			ld a,(store_page)	; get current file id 
06ad 3c				inc a 
06ae 32 74 ea			ld (store_page),a 
06b1				 
06b1 32 68 ea			ld (store_tmpid),a			; save id 
06b4			 
06b4 21 00 00			ld hl, 0 
06b7 11 74 ea			ld de, store_page 
06ba				if DEBUG_STORESE 
06ba					DMARK "SCw" 
06ba f5				push af  
06bb 3a cf 06			ld a, (.dmark)  
06be 32 65 ee			ld (debug_mark),a  
06c1 3a d0 06			ld a, (.dmark+1)  
06c4 32 66 ee			ld (debug_mark+1),a  
06c7 3a d1 06			ld a, (.dmark+2)  
06ca 32 67 ee			ld (debug_mark+2),a  
06cd 18 03			jr .pastdmark  
06cf ..			.dmark: db "SCw"  
06d2 f1			.pastdmark: pop af  
06d3			endm  
# End of macro DMARK
06d3					CALLMONITOR 
06d3 cd 6f ee			call debug_vector  
06d6				endm  
# End of macro CALLMONITOR
06d6				endif 
06d6 cd ec 02			call storage_write_block	 ; save update 
06d9			 
06d9				if DEBUG_STORESE 
06d9 11 74 ea				ld de, store_page 
06dc					DMARK "SCC" 
06dc f5				push af  
06dd 3a f1 06			ld a, (.dmark)  
06e0 32 65 ee			ld (debug_mark),a  
06e3 3a f2 06			ld a, (.dmark+1)  
06e6 32 66 ee			ld (debug_mark+1),a  
06e9 3a f3 06			ld a, (.dmark+2)  
06ec 32 67 ee			ld (debug_mark+2),a  
06ef 18 03			jr .pastdmark  
06f1 ..			.dmark: db "SCC"  
06f4 f1			.pastdmark: pop af  
06f5			endm  
# End of macro DMARK
06f5					CALLMONITOR 
06f5 cd 6f ee			call debug_vector  
06f8				endm  
# End of macro CALLMONITOR
06f8				endif 
06f8				;  
06f8				 
06f8 21 40 00			ld hl, STORE_BLOCK_PHY 
06fb 11 00 00			ld de, 0 
06fe cd ba 05			call storage_findnextid 
0701			 
0701 22 5f ea			ld (store_tmppageid), hl    ; save page to use  
0704			 
0704				; TODO detect 0 = no spare blocks 
0704			 
0704				; hl now contains the free page to use for the file header page 
0704			 
0704				if DEBUG_STORESE 
0704				DMARK "SCF" 
0704 f5				push af  
0705 3a 19 07			ld a, (.dmark)  
0708 32 65 ee			ld (debug_mark),a  
070b 3a 1a 07			ld a, (.dmark+1)  
070e 32 66 ee			ld (debug_mark+1),a  
0711 3a 1b 07			ld a, (.dmark+2)  
0714 32 67 ee			ld (debug_mark+2),a  
0717 18 03			jr .pastdmark  
0719 ..			.dmark: db "SCF"  
071c f1			.pastdmark: pop af  
071d			endm  
# End of macro DMARK
071d					CALLMONITOR 
071d cd 6f ee			call debug_vector  
0720				endm  
# End of macro CALLMONITOR
0720				endif 
0720			 
0720 22 5f ea			ld (store_tmppageid), hl 
0723				 
0723 3a 68 ea			ld a,(store_tmpid)    ; get file id 
0726			;	ld a, (store_filecache)			; save to cache 
0726			 
0726 32 74 ea			ld (store_page),a    ; set page id 
0729 3e 00			ld a, 0			 ; extent 0 is file header 
072b 32 75 ea			ld (store_page+1), a   ; set file extent 
072e			 
072e 32 76 ea			ld (store_page+2), a   ; extent count for the file 
0731			 
0731			;	inc hl 		; init block 0 of file 
0731			;	inc hl   		; skip file and extent id 
0731			 ;       ld a, 0 
0731			;	ld (hl),a 
0731			;	ld a, (store_filecache+1)  	; save to cache 
0731			 
0731			;	inc hl    ; file name 
0731				 
0731				 
0731 11 77 ea			ld de, store_page+3    ; get buffer for term string to use as file name 
0734				if DEBUG_STORESE 
0734					DMARK "SCc" 
0734 f5				push af  
0735 3a 49 07			ld a, (.dmark)  
0738 32 65 ee			ld (debug_mark),a  
073b 3a 4a 07			ld a, (.dmark+1)  
073e 32 66 ee			ld (debug_mark+1),a  
0741 3a 4b 07			ld a, (.dmark+2)  
0744 32 67 ee			ld (debug_mark+2),a  
0747 18 03			jr .pastdmark  
0749 ..			.dmark: db "SCc"  
074c f1			.pastdmark: pop af  
074d			endm  
# End of macro DMARK
074d					CALLMONITOR 
074d cd 6f ee			call debug_vector  
0750				endm  
# End of macro CALLMONITOR
0750				endif 
0750 e1				pop hl    ; get zero term string 
0751 e5				push hl 
0752 3e 00			ld a, 0 
0754 cd 66 11			call strlent 
0757 23				inc hl   ; cover zero term 
0758 06 00			ld b,0 
075a 4d				ld c,l 
075b e1				pop hl 
075c				;ex de, hl 
075c				if DEBUG_STORESE 
075c					DMARK "SCa" 
075c f5				push af  
075d 3a 71 07			ld a, (.dmark)  
0760 32 65 ee			ld (debug_mark),a  
0763 3a 72 07			ld a, (.dmark+1)  
0766 32 66 ee			ld (debug_mark+1),a  
0769 3a 73 07			ld a, (.dmark+2)  
076c 32 67 ee			ld (debug_mark+2),a  
076f 18 03			jr .pastdmark  
0771 ..			.dmark: db "SCa"  
0774 f1			.pastdmark: pop af  
0775			endm  
# End of macro DMARK
0775					;push af 
0775					;ld a, 'a' 
0775					;ld (debug_mark),a 
0775					;pop af 
0775					CALLMONITOR 
0775 cd 6f ee			call debug_vector  
0778				endm  
# End of macro CALLMONITOR
0778				endif 
0778 ed b0			ldir    ; copy zero term string 
077a				if DEBUG_STORESE 
077a					DMARK "SCA" 
077a f5				push af  
077b 3a 8f 07			ld a, (.dmark)  
077e 32 65 ee			ld (debug_mark),a  
0781 3a 90 07			ld a, (.dmark+1)  
0784 32 66 ee			ld (debug_mark+1),a  
0787 3a 91 07			ld a, (.dmark+2)  
078a 32 67 ee			ld (debug_mark+2),a  
078d 18 03			jr .pastdmark  
078f ..			.dmark: db "SCA"  
0792 f1			.pastdmark: pop af  
0793			endm  
# End of macro DMARK
0793					CALLMONITOR 
0793 cd 6f ee			call debug_vector  
0796				endm  
# End of macro CALLMONITOR
0796				endif 
0796			 
0796				; write file header page 
0796			 
0796 2a 5f ea			ld hl,(store_tmppageid) 
0799 11 74 ea			ld de, store_page 
079c				if DEBUG_STORESE 
079c					DMARK "SCb" 
079c f5				push af  
079d 3a b1 07			ld a, (.dmark)  
07a0 32 65 ee			ld (debug_mark),a  
07a3 3a b2 07			ld a, (.dmark+1)  
07a6 32 66 ee			ld (debug_mark+1),a  
07a9 3a b3 07			ld a, (.dmark+2)  
07ac 32 67 ee			ld (debug_mark+2),a  
07af 18 03			jr .pastdmark  
07b1 ..			.dmark: db "SCb"  
07b4 f1			.pastdmark: pop af  
07b5			endm  
# End of macro DMARK
07b5					;push af 
07b5					;ld a, 'b' 
07b5					;ld (debug_mark),a 
07b5					;pop af 
07b5					CALLMONITOR 
07b5 cd 6f ee			call debug_vector  
07b8				endm  
# End of macro CALLMONITOR
07b8				endif 
07b8 cd ec 02			call storage_write_block 
07bb			 
07bb 3a 68 ea			ld a, (store_tmpid) 
07be 6f				ld l, a 
07bf 26 00			ld h,0 
07c1				if DEBUG_STORESE 
07c1					DMARK "SCz" 
07c1 f5				push af  
07c2 3a d6 07			ld a, (.dmark)  
07c5 32 65 ee			ld (debug_mark),a  
07c8 3a d7 07			ld a, (.dmark+1)  
07cb 32 66 ee			ld (debug_mark+1),a  
07ce 3a d8 07			ld a, (.dmark+2)  
07d1 32 67 ee			ld (debug_mark+2),a  
07d4 18 03			jr .pastdmark  
07d6 ..			.dmark: db "SCz"  
07d9 f1			.pastdmark: pop af  
07da			endm  
# End of macro DMARK
07da					CALLMONITOR 
07da cd 6f ee			call debug_vector  
07dd				endm  
# End of macro CALLMONITOR
07dd				endif 
07dd c9				ret 
07de				 
07de			 
07de			 
07de			; 
07de			; Read File 
07de			; 
07de			; h - file id to locate 
07de			; l - extent to locate 
07de			; de - pointer to string to read into 
07de			; 
07de			; returns hl is 0 if block not found ie end of file or pointer to start of data read 
07de			 
07de			.sr_fail: 
07de d1				pop de 
07df c9				ret 
07e0			 
07e0			storage_read: 
07e0			 
07e0			 
07e0 d5				push de 
07e1			 
07e1			; TODO BUG the above push is it popped before the RET Z? 
07e1			 
07e1			; TODO how to handle multiple part blocks 
07e1			 
07e1				; locate file extent to read 
07e1			 
07e1 5c				ld e, h 
07e2 55				ld d, l 
07e3			 
07e3			.srext: 
07e3 22 72 ea			ld (store_readptr), hl     ; save the current extent to load 
07e6 ed 53 70 ea		ld (store_readbuf), de     ; save the current buffer to load in to 
07ea			 
07ea 21 40 00			ld hl, STORE_BLOCK_PHY 
07ed				if DEBUG_STORESE 
07ed					DMARK "sre" 
07ed f5				push af  
07ee 3a 02 08			ld a, (.dmark)  
07f1 32 65 ee			ld (debug_mark),a  
07f4 3a 03 08			ld a, (.dmark+1)  
07f7 32 66 ee			ld (debug_mark+1),a  
07fa 3a 04 08			ld a, (.dmark+2)  
07fd 32 67 ee			ld (debug_mark+2),a  
0800 18 03			jr .pastdmark  
0802 ..			.dmark: db "sre"  
0805 f1			.pastdmark: pop af  
0806			endm  
# End of macro DMARK
0806					CALLMONITOR 
0806 cd 6f ee			call debug_vector  
0809				endm  
# End of macro CALLMONITOR
0809				endif 
0809 cd ba 05			call storage_findnextid 
080c			 
080c				if DEBUG_STORESE 
080c					DMARK "srf" 
080c f5				push af  
080d 3a 21 08			ld a, (.dmark)  
0810 32 65 ee			ld (debug_mark),a  
0813 3a 22 08			ld a, (.dmark+1)  
0816 32 66 ee			ld (debug_mark+1),a  
0819 3a 23 08			ld a, (.dmark+2)  
081c 32 67 ee			ld (debug_mark+2),a  
081f 18 03			jr .pastdmark  
0821 ..			.dmark: db "srf"  
0824 f1			.pastdmark: pop af  
0825			endm  
# End of macro DMARK
0825					CALLMONITOR 
0825 cd 6f ee			call debug_vector  
0828				endm  
# End of macro CALLMONITOR
0828				endif 
0828 cd 1e 0e			call ishlzero 
082b			;	ld a, l 
082b			;	add h 
082b			;	cp 0 
082b 28 b1			jr z,.sr_fail			; block not found so EOF 
082d			 
082d				; save current address for use by higher level words etc 
082d			 
082d 22 65 ea			ld (store_openaddr),hl 
0830			 
0830			 
0830				; hl contains page number to load 
0830 d1				pop de   ; get storage 
0831 ed 53 70 ea		ld (store_readbuf), de     ; current buffer to load in to 
0835 d5				push de 
0836				if DEBUG_STORESE 
0836					DMARK "srg" 
0836 f5				push af  
0837 3a 4b 08			ld a, (.dmark)  
083a 32 65 ee			ld (debug_mark),a  
083d 3a 4c 08			ld a, (.dmark+1)  
0840 32 66 ee			ld (debug_mark+1),a  
0843 3a 4d 08			ld a, (.dmark+2)  
0846 32 67 ee			ld (debug_mark+2),a  
0849 18 03			jr .pastdmark  
084b ..			.dmark: db "srg"  
084e f1			.pastdmark: pop af  
084f			endm  
# End of macro DMARK
084f					CALLMONITOR 
084f cd 6f ee			call debug_vector  
0852				endm  
# End of macro CALLMONITOR
0852				endif 
0852 cd 87 02			call storage_read_block 
0855			 
0855				; if this a continuation read??? 
0855			 
0855 2a 70 ea			ld hl, (store_readbuf)     ; current buffer to load in to 
0858			 
0858 3e 3f			ld a, STORE_BLOCK_PHY-1 
085a cd f5 0d			call addatohl 
085d 7e				ld a,(hl) 
085e fe 00			cp 0 
0860 28 02			jr z, .markiscont 
0862 3e ff			ld a, 255 
0864			 
0864			.markiscont: 
0864 32 67 ea			ld (store_readcont), a 
0867			 
0867				if DEBUG_STORESE 
0867					DMARK "srC" 
0867 f5				push af  
0868 3a 7c 08			ld a, (.dmark)  
086b 32 65 ee			ld (debug_mark),a  
086e 3a 7d 08			ld a, (.dmark+1)  
0871 32 66 ee			ld (debug_mark+1),a  
0874 3a 7e 08			ld a, (.dmark+2)  
0877 32 67 ee			ld (debug_mark+2),a  
087a 18 03			jr .pastdmark  
087c ..			.dmark: db "srC"  
087f f1			.pastdmark: pop af  
0880			endm  
# End of macro DMARK
0880					CALLMONITOR 
0880 cd 6f ee			call debug_vector  
0883				endm  
# End of macro CALLMONITOR
0883				endif 
0883				; only short reads enabled 
0883			 
0883 3a 6f ea			ld a, (store_longread) 
0886 fe 00			cp 0 
0888 ca 55 09			jp z, .readdone 
088b			 
088b			; TODO if block has no zeros then need to read next block  
088b			; this code appears to be very buggy. Have added above a flag to disable/enable the following code for later debug 
088b			; check last byte of physical block. 
088b			; if not zero then the next block needs to be loaded 
088b			 
088b			 
088b 2a 70 ea			ld hl, (store_readbuf)     ; current buffer to load in to 
088e			 
088e 3e 3f			ld a, STORE_BLOCK_PHY-1 
0890 cd f5 0d			call addatohl 
0893				;dec hl 
0893 7e				ld a,(hl) 
0894				if DEBUG_STORESE 
0894					DMARK "sr?" 
0894 f5				push af  
0895 3a a9 08			ld a, (.dmark)  
0898 32 65 ee			ld (debug_mark),a  
089b 3a aa 08			ld a, (.dmark+1)  
089e 32 66 ee			ld (debug_mark+1),a  
08a1 3a ab 08			ld a, (.dmark+2)  
08a4 32 67 ee			ld (debug_mark+2),a  
08a7 18 03			jr .pastdmark  
08a9 ..			.dmark: db "sr?"  
08ac f1			.pastdmark: pop af  
08ad			endm  
# End of macro DMARK
08ad					CALLMONITOR 
08ad cd 6f ee			call debug_vector  
08b0				endm  
# End of macro CALLMONITOR
08b0				endif 
08b0 fe 00			cp 0 
08b2 ca 55 09			jp z, .readdone 
08b5			 
08b5				; last byte is not zero so there is more in the next extent. Load it on the end.	 
08b5			 
08b5 23				inc hl 
08b6			 
08b6 22 70 ea			ld (store_readbuf), hl     ; save the current buffer to load in to 
08b9			 
08b9 ed 5b 72 ea		ld de, (store_readptr)     ; save the current extent to load 
08bd			 
08bd eb				ex de, hl 
08be			 
08be				; next ext 
08be			 
08be 23				inc hl 
08bf 22 72 ea			ld  (store_readptr), hl     ; save the current extent to load 
08c2			 
08c2				if DEBUG_STORESE 
08c2					DMARK "sF2" 
08c2 f5				push af  
08c3 3a d7 08			ld a, (.dmark)  
08c6 32 65 ee			ld (debug_mark),a  
08c9 3a d8 08			ld a, (.dmark+1)  
08cc 32 66 ee			ld (debug_mark+1),a  
08cf 3a d9 08			ld a, (.dmark+2)  
08d2 32 67 ee			ld (debug_mark+2),a  
08d5 18 03			jr .pastdmark  
08d7 ..			.dmark: db "sF2"  
08da f1			.pastdmark: pop af  
08db			endm  
# End of macro DMARK
08db					CALLMONITOR 
08db cd 6f ee			call debug_vector  
08de				endm  
# End of macro CALLMONITOR
08de				endif 
08de			 
08de				; get and load block 
08de			 
08de cd ba 05			call storage_findnextid 
08e1			 
08e1				if DEBUG_STORESE 
08e1					DMARK "sf2" 
08e1 f5				push af  
08e2 3a f6 08			ld a, (.dmark)  
08e5 32 65 ee			ld (debug_mark),a  
08e8 3a f7 08			ld a, (.dmark+1)  
08eb 32 66 ee			ld (debug_mark+1),a  
08ee 3a f8 08			ld a, (.dmark+2)  
08f1 32 67 ee			ld (debug_mark+2),a  
08f4 18 03			jr .pastdmark  
08f6 ..			.dmark: db "sf2"  
08f9 f1			.pastdmark: pop af  
08fa			endm  
# End of macro DMARK
08fa					CALLMONITOR 
08fa cd 6f ee			call debug_vector  
08fd				endm  
# End of macro CALLMONITOR
08fd				endif 
08fd cd 1e 0e			call ishlzero 
0900			;	ld a, l 
0900			;	add h 
0900			;	cp 0 
0900 ca de 07			jp z,.sr_fail			; block not found so EOF 
0903				 
0903				; save current address for use by higher level words etc 
0903			 
0903 22 65 ea			ld (store_openaddr),hl 
0906			 
0906 cd 87 02			call storage_read_block 
0909			 
0909				; on a continuation block, we now have the file id and ext in the middle of the block 
0909				; we need to pull everything back  
0909			 
0909 ed 5b 70 ea		ld de, (store_readbuf)     ; current buffer to nudge into 
090d 2a 70 ea			ld hl, (store_readbuf)     ; current buffer where data actually exists 
0910 23				inc hl 
0911 23				inc hl     ; skip id and ext 
0912 01 40 00			ld bc, STORE_BLOCK_PHY 
0915				if DEBUG_STORESE 
0915					DMARK "SR<" 
0915 f5				push af  
0916 3a 2a 09			ld a, (.dmark)  
0919 32 65 ee			ld (debug_mark),a  
091c 3a 2b 09			ld a, (.dmark+1)  
091f 32 66 ee			ld (debug_mark+1),a  
0922 3a 2c 09			ld a, (.dmark+2)  
0925 32 67 ee			ld (debug_mark+2),a  
0928 18 03			jr .pastdmark  
092a ..			.dmark: db "SR<"  
092d f1			.pastdmark: pop af  
092e			endm  
# End of macro DMARK
092e					CALLMONITOR 
092e cd 6f ee			call debug_vector  
0931				endm  
# End of macro CALLMONITOR
0931				endif 
0931 ed b0			ldir     ; copy data 
0933			 
0933				; move the pointer back and pretend we have a full buffer for next recheck 
0933			 
0933 1b				dec de 
0934 1b				dec de 
0935			 
0935			; TODO do pop below now short circuit loop????? 
0935 c1				pop bc     ; get rid of spare de on stack 
0936				if DEBUG_STORESE 
0936					DMARK "SR>" 
0936 f5				push af  
0937 3a 4b 09			ld a, (.dmark)  
093a 32 65 ee			ld (debug_mark),a  
093d 3a 4c 09			ld a, (.dmark+1)  
0940 32 66 ee			ld (debug_mark+1),a  
0943 3a 4d 09			ld a, (.dmark+2)  
0946 32 67 ee			ld (debug_mark+2),a  
0949 18 03			jr .pastdmark  
094b ..			.dmark: db "SR>"  
094e f1			.pastdmark: pop af  
094f			endm  
# End of macro DMARK
094f					CALLMONITOR 
094f cd 6f ee			call debug_vector  
0952				endm  
# End of macro CALLMONITOR
0952				endif 
0952 c3 e3 07			jp .srext 
0955			 
0955			 
0955			 
0955			 
0955			 
0955			.readdone:		 
0955 e1				pop hl 		 ; return start of data to show as not EOF 
0956 23				inc hl   ; past file id 
0957 23				inc hl   ; past ext 
0958				if DEBUG_STORESE 
0958					DMARK "SRe" 
0958 f5				push af  
0959 3a 6d 09			ld a, (.dmark)  
095c 32 65 ee			ld (debug_mark),a  
095f 3a 6e 09			ld a, (.dmark+1)  
0962 32 66 ee			ld (debug_mark+1),a  
0965 3a 6f 09			ld a, (.dmark+2)  
0968 32 67 ee			ld (debug_mark+2),a  
096b 18 03			jr .pastdmark  
096d ..			.dmark: db "SRe"  
0970 f1			.pastdmark: pop af  
0971			endm  
# End of macro DMARK
0971					CALLMONITOR 
0971 cd 6f ee			call debug_vector  
0974				endm  
# End of macro CALLMONITOR
0974				endif 
0974 c9					ret 
0975			 
0975			 
0975			 
0975			; 
0975			; Append File 
0975			; 
0975			; hl - file id to locate 
0975			; de - pointer to (multi block) string to write 
0975			 
0975			.sa_notfound: 
0975 d1				pop de 
0976 c9				ret 
0977			 
0977			 
0977			storage_append: 
0977				; hl -  file id to append to 
0977				; de - string to append 
0977			 
0977 d5				push de 
0978				 
0978				if DEBUG_STORESE 
0978					DMARK "AP1" 
0978 f5				push af  
0979 3a 8d 09			ld a, (.dmark)  
097c 32 65 ee			ld (debug_mark),a  
097f 3a 8e 09			ld a, (.dmark+1)  
0982 32 66 ee			ld (debug_mark+1),a  
0985 3a 8f 09			ld a, (.dmark+2)  
0988 32 67 ee			ld (debug_mark+2),a  
098b 18 03			jr .pastdmark  
098d ..			.dmark: db "AP1"  
0990 f1			.pastdmark: pop af  
0991			endm  
# End of macro DMARK
0991					CALLMONITOR 
0991 cd 6f ee			call debug_vector  
0994				endm  
# End of macro CALLMONITOR
0994				endif 
0994			 
0994 7d				ld a, l 
0995 32 68 ea			ld (store_tmpid), a 
0998			 
0998				; get file header  
0998			 
0998 16 00			ld d, 0			 ; file extent to locate - file name details at item 0 
099a 3a 68 ea			ld a, (store_tmpid) 
099d 5f				ld e, a 
099e			 
099e 21 40 00				ld hl, STORE_BLOCK_PHY 
09a1 cd ba 05				call storage_findnextid 
09a4			 
09a4 cd 1e 0e			call ishlzero 
09a7 28 cc			jr z, .sa_notfound 
09a9			 
09a9 22 5f ea			ld (store_tmppageid), hl 
09ac			 
09ac				; TODO handle file id not found 
09ac			 
09ac				if DEBUG_STORESE 
09ac					DMARK "AP2" 
09ac f5				push af  
09ad 3a c1 09			ld a, (.dmark)  
09b0 32 65 ee			ld (debug_mark),a  
09b3 3a c2 09			ld a, (.dmark+1)  
09b6 32 66 ee			ld (debug_mark+1),a  
09b9 3a c3 09			ld a, (.dmark+2)  
09bc 32 67 ee			ld (debug_mark+2),a  
09bf 18 03			jr .pastdmark  
09c1 ..			.dmark: db "AP2"  
09c4 f1			.pastdmark: pop af  
09c5			endm  
# End of macro DMARK
09c5					CALLMONITOR 
09c5 cd 6f ee			call debug_vector  
09c8				endm  
# End of macro CALLMONITOR
09c8				endif 
09c8			 
09c8				; update file extent count 
09c8			 
09c8 11 74 ea			ld de, store_page 
09cb			 
09cb cd 87 02			call storage_read_block 
09ce			 
09ce				if DEBUG_STORESE 
09ce					DMARK "AP3" 
09ce f5				push af  
09cf 3a e3 09			ld a, (.dmark)  
09d2 32 65 ee			ld (debug_mark),a  
09d5 3a e4 09			ld a, (.dmark+1)  
09d8 32 66 ee			ld (debug_mark+1),a  
09db 3a e5 09			ld a, (.dmark+2)  
09de 32 67 ee			ld (debug_mark+2),a  
09e1 18 03			jr .pastdmark  
09e3 ..			.dmark: db "AP3"  
09e6 f1			.pastdmark: pop af  
09e7			endm  
# End of macro DMARK
09e7					CALLMONITOR 
09e7 cd 6f ee			call debug_vector  
09ea				endm  
# End of macro CALLMONITOR
09ea				endif 
09ea			;	ld (store_tmppageid), hl 
09ea			 
09ea 3a 76 ea			ld a, (store_page+2) 
09ed 3c				inc a 
09ee 32 76 ea			ld (store_page+2), a 
09f1 32 67 ea			ld (store_tmpext), a 
09f4				 
09f4				if DEBUG_STORESE 
09f4					DMARK "AP3" 
09f4 f5				push af  
09f5 3a 09 0a			ld a, (.dmark)  
09f8 32 65 ee			ld (debug_mark),a  
09fb 3a 0a 0a			ld a, (.dmark+1)  
09fe 32 66 ee			ld (debug_mark+1),a  
0a01 3a 0b 0a			ld a, (.dmark+2)  
0a04 32 67 ee			ld (debug_mark+2),a  
0a07 18 03			jr .pastdmark  
0a09 ..			.dmark: db "AP3"  
0a0c f1			.pastdmark: pop af  
0a0d			endm  
# End of macro DMARK
0a0d					CALLMONITOR 
0a0d cd 6f ee			call debug_vector  
0a10				endm  
# End of macro CALLMONITOR
0a10				endif 
0a10 2a 5f ea			ld hl, (store_tmppageid) 
0a13 11 74 ea			ld de, store_page 
0a16 cd ec 02			call storage_write_block 
0a19			 
0a19				; find free block 
0a19			 
0a19 11 00 00			ld de, 0			 ; file extent to locate 
0a1c			 
0a1c 21 40 00				ld hl, STORE_BLOCK_PHY 
0a1f cd ba 05				call storage_findnextid 
0a22 cd 1e 0e			call ishlzero 
0a25 ca 75 09			jp z, .sa_notfound 
0a28			 
0a28					; TODO handle no space left 
0a28					 
0a28 22 5f ea				ld (store_tmppageid), hl 
0a2b			 
0a2b				if DEBUG_STORESE 
0a2b					DMARK "AP4" 
0a2b f5				push af  
0a2c 3a 40 0a			ld a, (.dmark)  
0a2f 32 65 ee			ld (debug_mark),a  
0a32 3a 41 0a			ld a, (.dmark+1)  
0a35 32 66 ee			ld (debug_mark+1),a  
0a38 3a 42 0a			ld a, (.dmark+2)  
0a3b 32 67 ee			ld (debug_mark+2),a  
0a3e 18 03			jr .pastdmark  
0a40 ..			.dmark: db "AP4"  
0a43 f1			.pastdmark: pop af  
0a44			endm  
# End of macro DMARK
0a44					CALLMONITOR 
0a44 cd 6f ee			call debug_vector  
0a47				endm  
# End of macro CALLMONITOR
0a47				endif 
0a47					; init the buffer with zeros so we can id if the buffer is full or not 
0a47			 
0a47 e5					push hl 
0a48 c5					push bc 
0a49			 
0a49 21 74 ea				ld hl, store_page 
0a4c 06 40				ld b, STORE_BLOCK_PHY 
0a4e 3e 00				ld a, 0 
0a50 77			.zeroblock:	ld (hl), a 
0a51 23					inc hl 
0a52 10 fc				djnz .zeroblock 
0a54			 
0a54 c1					pop bc 
0a55 e1					pop hl 
0a56			 
0a56					; construct block 
0a56			 
0a56 3a 68 ea				ld a, (store_tmpid) 
0a59 32 74 ea				ld (store_page), a   ; file id 
0a5c 3a 67 ea				ld a, (store_tmpext)   ; extent for this block 
0a5f 32 75 ea				ld (store_page+1), a 
0a62			 
0a62 e1					pop hl    ; get string to write 
0a63 06 3e				ld b, STORE_BLOCK_PHY-2       ; exclude count of file id and extent 
0a65 11 76 ea				ld de, store_page+2 
0a68			 
0a68				if DEBUG_STORESE 
0a68					DMARK "AP5" 
0a68 f5				push af  
0a69 3a 7d 0a			ld a, (.dmark)  
0a6c 32 65 ee			ld (debug_mark),a  
0a6f 3a 7e 0a			ld a, (.dmark+1)  
0a72 32 66 ee			ld (debug_mark+1),a  
0a75 3a 7f 0a			ld a, (.dmark+2)  
0a78 32 67 ee			ld (debug_mark+2),a  
0a7b 18 03			jr .pastdmark  
0a7d ..			.dmark: db "AP5"  
0a80 f1			.pastdmark: pop af  
0a81			endm  
# End of macro DMARK
0a81					CALLMONITOR 
0a81 cd 6f ee			call debug_vector  
0a84				endm  
# End of macro CALLMONITOR
0a84				endif 
0a84			 
0a84			 
0a84			 
0a84					; fill buffer with data until end of string or full block 
0a84			 
0a84 7e			.appd:		ld a, (hl) 
0a85 12					ld (de), a 
0a86 fe 00				cp 0 
0a88 28 04				jr z, .appdone 
0a8a 23					inc hl 
0a8b 13					inc de 
0a8c 10 f6				djnz .appd 
0a8e			 
0a8e e5			.appdone:	push hl		 	; save current source in case we need to go around again 
0a8f f5					push af   		; save last byte dumped 
0a90			 
0a90			 
0a90 2a 5f ea			ld hl, (store_tmppageid) 
0a93 11 74 ea			ld de, store_page 
0a96				if DEBUG_STORESE 
0a96					DMARK "AP6" 
0a96 f5				push af  
0a97 3a ab 0a			ld a, (.dmark)  
0a9a 32 65 ee			ld (debug_mark),a  
0a9d 3a ac 0a			ld a, (.dmark+1)  
0aa0 32 66 ee			ld (debug_mark+1),a  
0aa3 3a ad 0a			ld a, (.dmark+2)  
0aa6 32 67 ee			ld (debug_mark+2),a  
0aa9 18 03			jr .pastdmark  
0aab ..			.dmark: db "AP6"  
0aae f1			.pastdmark: pop af  
0aaf			endm  
# End of macro DMARK
0aaf					CALLMONITOR 
0aaf cd 6f ee			call debug_vector  
0ab2				endm  
# End of macro CALLMONITOR
0ab2				endif 
0ab2 cd ec 02				call storage_write_block 
0ab5			 
0ab5			 
0ab5				; was that a full block of data written? 
0ab5				; any more to write out? 
0ab5			 
0ab5				; if yes then set vars and jump to start of function again 
0ab5			 
0ab5 f1					pop af 
0ab6 d1					pop de 
0ab7			 
0ab7 fe 00				cp 0		 ; no, string was fully written 
0ab9 c8					ret z 
0aba			 
0aba					; setup vars for next cycle 
0aba			 
0aba 3a 68 ea				ld a, (store_tmpid) 
0abd 6f					ld l, a 
0abe 26 00				ld h, 0 
0ac0			 
0ac0 c3 77 09			 	jp storage_append	 ; yes, need to write out some more 
0ac3			 
0ac3			 
0ac3			 
0ac3			 
0ac3			 
0ac3			 
0ac3			 
0ac3			if DEBUG_STORECF 
0ac3			storageput:	 
0ac3					ret 
0ac3			storageread: 
0ac3					ld hl, store_page 
0ac3					ld b, 200 
0ac3					ld a,0 
0ac3			.src:		ld (hl),a 
0ac3					inc hl 
0ac3					djnz .src 
0ac3					 
0ac3			 
0ac3					ld de, 0 
0ac3					ld bc, 1 
0ac3					ld hl, store_page 
0ac3					call cfRead 
0ac3			 
0ac3				call cfGetError 
0ac3				ld hl,scratch 
0ac3				call hexout 
0ac3				ld hl, scratch+2 
0ac3				ld a, 0 
0ac3				ld (hl),a 
0ac3				ld de, scratch 
0ac3				ld a,display_row_1 
0ac3				call str_at_display 
0ac3				call update_display 
0ac3			 
0ac3					ld hl, store_page 
0ac3					ld (os_cur_ptr),hl 
0ac3			 
0ac3					ret 
0ac3			endif 
0ac3			 
0ac3			 
0ac3			; Clear out the main buffer store (used to remove junk before writing a new block) 
0ac3			 
0ac3			storage_clear_page: 
0ac3 e5				push hl 
0ac4 d5				push de 
0ac5 c5				push bc 
0ac6 21 74 ea			ld hl, store_page 
0ac9 3e 00			ld a, 0 
0acb 77				ld (hl), a 
0acc			 
0acc 11 75 ea			ld de, store_page+1 
0acf 01 19 01			ld bc, STORE_BLOCK_LOG+1 
0ad2			 
0ad2 ed b0			ldir 
0ad4				 
0ad4 c1				pop bc 
0ad5 d1				pop de 
0ad6 e1				pop hl 
0ad7 c9				ret 
0ad8			 
0ad8			; eof 
# End of file firmware_storage.asm
0ad8			  
0ad8			; support routines for above hardware abstraction layer  
0ad8			  
0ad8			include "firmware_general.asm"        ; general support functions  
0ad8			 
0ad8			; word look up 
0ad8			 
0ad8			; in 
0ad8			; a is the index 
0ad8			; hl is pointer start of array 
0ad8			; 
0ad8			; returns 
0ad8			; hl to the word 
0ad8			; 
0ad8			 
0ad8			table_lookup:  
0ad8 d5					push de 
0ad9 eb					ex de, hl 
0ada			 
0ada 6f					ld l, a 
0adb 26 00				ld h, 0 
0add 29					add hl, hl 
0ade 19					add hl, de 
0adf 7e					ld a, (hl) 
0ae0 23					inc hl 
0ae1 66					ld h,(hl) 
0ae2 6f					ld l, a 
0ae3			 
0ae3 d1					pop de 
0ae4 c9					ret 
0ae5			 
0ae5			; Delay loops 
0ae5			 
0ae5			 
0ae5			 
0ae5			aDelayInMS: 
0ae5 c5				push bc 
0ae6 47				ld b,a 
0ae7			msdelay: 
0ae7 c5				push bc 
0ae8				 
0ae8			 
0ae8 01 41 00			ld bc,041h 
0aeb cd 03 0b			call delayloop 
0aee c1				pop bc 
0aef 05				dec b 
0af0 20 f5			jr nz,msdelay 
0af2			 
0af2			;if CPU_CLOCK_8MHZ 
0af2			;msdelay8: 
0af2			;	push bc 
0af2			;	 
0af2			; 
0af2			;	ld bc,041h 
0af2			;	call delayloop 
0af2			;	pop bc 
0af2			;	dec b 
0af2			;	jr nz,msdelay8 
0af2			;endif 
0af2			 
0af2			 
0af2 c1				pop bc 
0af3 c9				ret 
0af4			 
0af4			 
0af4			delay250ms: 
0af4				;push de 
0af4 01 00 40			ld bc, 04000h 
0af7 c3 03 0b			jp delayloop 
0afa			delay500ms: 
0afa				;push de 
0afa 01 00 80			ld bc, 08000h 
0afd c3 03 0b			jp delayloop 
0b00			delay1s: 
0b00				;push bc 
0b00			   ; Clobbers A, d and e 
0b00 01 00 00		    ld      bc,0      ; # 0ffffh = approx 1s 
0b03			delayloop: 
0b03 c5			    push bc 
0b04			 
0b04			if BASE_CPM 
0b04 01 a0 0f			ld bc, CPM_DELAY_TUNE 
0b07			.cpmloop: 
0b07 c5				push bc 
0b08			 
0b08			endif 
0b08			 
0b08			 
0b08			 
0b08			delayloopi: 
0b08			;	push bc 
0b08			;.dl: 
0b08 cb 47		    bit     0,a    	; 8 
0b0a cb 47		    bit     0,a    	; 8 
0b0c cb 47		    bit     0,a    	; 8 
0b0e e6 ff		    and     255  	; 7 
0b10 0b			    dec     bc      	; 6 
0b11 79			    ld      a,c     	; 4 
0b12 b0			    or      b     	; 4 
0b13 c2 08 0b		    jp      nz,delayloopi   	; 10, total = 55 states/iteration 
0b16			    ; 65536 iterations * 55 states = 3604480 states = 2.00248 seconds 
0b16				;pop de 
0b16			;pop bc 
0b16			 
0b16			if BASE_CPM 
0b16 c1				pop bc 
0b17				 
0b17 0b			    dec     bc      	; 6 
0b18 79			    ld      a,c     	; 4 
0b19 b0			    or      b     	; 4 
0b1a c2 07 0b		    jp      nz,.cpmloop   	; 10, total = 55 states/iteration 
0b1d				 
0b1d			 
0b1d			endif 
0b1d			;if CPU_CLOCK_8MHZ 
0b1d			;    pop bc 
0b1d			;    push bc 
0b1d			;.dl8: 
0b1d			;    bit     0,a    	; 8 
0b1d			;    bit     0,a    	; 8 
0b1d			;    bit     0,a    	; 8 
0b1d			;    and     255  	; 7 
0b1d			;    dec     bc      	; 6 
0b1d			;    ld      a,c     	; 4 
0b1d			;    or      b     	; 4 
0b1d			;    jp      nz,.dl8   	; 10, total = 55 states/iteration 
0b1d			;endif 
0b1d			 
0b1d			;if CPU_CLOCK_10MHZ 
0b1d			;    pop bc 
0b1d			;    push bc 
0b1d			;.dl8: 
0b1d			;    bit     0,a    	; 8 
0b1d			;    bit     0,a    	; 8 
0b1d			;    bit     0,a    	; 8 
0b1d			;    and     255  	; 7 
0b1d			;    dec     bc      	; 6 
0b1d			;    ld      a,c     	; 4 
0b1d			;    or      b     	; 4 
0b1d			;    jp      nz,.dl8   	; 10, total = 55 states/iteration 
0b1d			;endif 
0b1d c1			    pop bc 
0b1e			 
0b1e c9				ret 
0b1f			 
0b1f			 
0b1f			 
0b1f			; eof 
# End of file firmware_general.asm
0b1f			include "firmware_display.asm"      ; frame buffer screen abstraction layer  
0b1f			; display routines that use the physical hardware abstraction layer 
0b1f			 
0b1f			 
0b1f			; Display an activity indicator 
0b1f			; Each call returns the new char pointed to in hl 
0b1f			 
0b1f			active: 
0b1f 3a c0 eb			ld a, (display_active) 
0b22 fe 06			cp 6 
0b24			 
0b24 20 02			jr nz, .sne 
0b26				; gone past the last one reset sequence 
0b26 3e ff			ld a, 255 
0b28			 
0b28			.sne:   
0b28				; get the next char in seq 
0b28 3c				inc a 
0b29 32 c0 eb			ld (display_active), a 
0b2c			 
0b2c				; look up the string in the table 
0b2c 21 43 0b			ld hl, actseq 
0b2f cb 27			sla a 
0b31 cd f5 0d			call addatohl 
0b34 cd 02 1f			call loadwordinhl 
0b37			 
0b37				; forth will write the to string when pushing so move from rom to ram 
0b37			 
0b37 11 c1 eb			ld de, display_active+1 
0b3a 01 02 00			ld bc, 2 
0b3d ed b0			ldir 
0b3f			 
0b3f 21 c1 eb			ld hl, display_active+1 
0b42 c9				ret 
0b43				 
0b43				 
0b43			 
0b43			 
0b43			;db "|/-\|-\" 
0b43			 
0b43			actseq: 
0b43			 
0b43 51 0b		dw spin0 
0b45 53 0b		dw spin1 
0b47 55 0b		dw spin2 
0b49 57 0b		dw spin3 
0b4b 55 0b		dw spin2 
0b4d 53 0b		dw spin1 
0b4f 51 0b		dw spin0 
0b51			 
0b51 .. 00		spin0: db " ", 0 
0b53 .. 00		spin1: db "-", 0 
0b55 .. 00		spin2: db "+", 0 
0b57 .. 00		spin3: db "#", 0 
0b59			 
0b59			 
0b59			; information window 
0b59			 
0b59			; pass hl with 1st string to display 
0b59			; pass de with 2nd string to display 
0b59			 
0b59			info_panel: 
0b59 e5				push hl 
0b5a			 
0b5a 2a c6 eb			ld hl, (display_fb_active) 
0b5d e5				push hl    ; future de destination 
0b5e 21 ab ed				ld hl, display_fb0 
0b61 22 c6 eb				ld (display_fb_active), hl 
0b64			 
0b64			;	call clear_display 
0b64			 
0b64				if BASE_CPM 
0b64 3e 2e			ld a, '.' 
0b66				else 
0b66				ld a, 165 
0b66				endif 
0b66 cd cd 0b			call fill_display 
0b69			 
0b69			 
0b69 3e 55			ld a, display_row_3 + 5 
0b6b cd db 0b			call str_at_display 
0b6e			 
0b6e e1				pop hl 
0b6f d1				pop de 
0b70			 
0b70 e5				push hl 
0b71			 
0b71			 
0b71 3e 2d			ld a, display_row_2 + 5 
0b73 cd db 0b			call str_at_display 
0b76			 
0b76			 
0b76 cd eb 0b			call update_display 
0b79 cd 08 1b			call next_page_prompt 
0b7c cd c8 0b			call clear_display 
0b7f			 
0b7f				 
0b7f 21 0a ed				ld hl, display_fb1 
0b82 22 c6 eb				ld (display_fb_active), hl 
0b85 cd eb 0b			call update_display 
0b88			 
0b88 e1				pop hl 
0b89			 
0b89 c9				ret 
0b8a			 
0b8a			 
0b8a			 
0b8a			 
0b8a			; TODO windowing? 
0b8a			 
0b8a			; TODO scroll line up 
0b8a			 
0b8a			scroll_up: 
0b8a			 
0b8a e5				push hl 
0b8b d5				push de 
0b8c c5				push bc 
0b8d			 
0b8d				; get frame buffer  
0b8d			 
0b8d 2a c6 eb			ld hl, (display_fb_active) 
0b90 e5				push hl    ; future de destination 
0b91			 
0b91 11 28 00			ld  de, display_cols 
0b94 19				add hl, de 
0b95			 
0b95 d1				pop de 
0b96			 
0b96				;ex de, hl 
0b96 01 9f 00			ld bc, display_fb_len -1  
0b99			;if DEBUG_FORTH_WORDS 
0b99			;	DMARK "SCL" 
0b99			;	CALLMONITOR 
0b99			;endif	 
0b99 ed b0			ldir 
0b9b			 
0b9b				; wipe bottom row 
0b9b			 
0b9b			 
0b9b 2a c6 eb			ld hl, (display_fb_active) 
0b9e 11 a0 00			ld de, display_cols*display_rows 
0ba1 19				add hl, de 
0ba2 06 28			ld b, display_cols 
0ba4 3e 20			ld a, ' ' 
0ba6			.scwipe: 
0ba6 77				ld (hl), a 
0ba7 2b				dec hl 
0ba8 10 fc			djnz .scwipe 
0baa			 
0baa				;pop hl 
0baa			 
0baa c1				pop bc 
0bab d1				pop de 
0bac e1				pop hl 
0bad			 
0bad c9				ret 
0bae			 
0bae			 
0bae			;scroll_upo: 
0bae			;	ld de, display_row_1 
0bae			 ;	ld hl, display_row_2 
0bae			;	ld bc, display_cols 
0bae			;	ldir 
0bae			;	ld de, display_row_2 
0bae			 ;	ld hl, display_row_3 
0bae			;	ld bc, display_cols 
0bae			;	ldir 
0bae			;	ld de, display_row_3 
0bae			 ;	ld hl, display_row_4 
0bae			;	ld bc, display_cols 
0bae			;	ldir 
0bae			 
0bae			; TODO clear row 4 
0bae			 
0bae			;	ret 
0bae			 
0bae				 
0bae			scroll_down: 
0bae			 
0bae e5				push hl 
0baf d5				push de 
0bb0 c5				push bc 
0bb1			 
0bb1				; get frame buffer  
0bb1			 
0bb1 2a c6 eb			ld hl, (display_fb_active) 
0bb4			 
0bb4 11 9f 00			ld de, display_fb_len - 1 
0bb7 19				add hl, de 
0bb8			 
0bb8 e5			push hl    ; future de destination 
0bb9			 
0bb9 11 28 00			ld  de, display_cols 
0bbc ed 52			sbc hl, de 
0bbe			 
0bbe			 
0bbe d1				pop de 
0bbf			 
0bbf			;	ex de, hl 
0bbf 01 9f 00			ld bc, display_fb_len -1  
0bc2			 
0bc2			 
0bc2				 
0bc2			 
0bc2 ed b0			ldir 
0bc4			 
0bc4				; wipe bottom row 
0bc4			 
0bc4			 
0bc4			;	ld hl, (display_fb_active) 
0bc4			;;	ld de, display_cols*display_rows 
0bc4			;;	add hl, de 
0bc4			;	ld b, display_cols 
0bc4			;	ld a, ' ' 
0bc4			;.scwiped: 
0bc4			;	ld (hl), a 
0bc4			;	dec hl 
0bc4			;	djnz .scwiped 
0bc4			 
0bc4				;pop hl 
0bc4			 
0bc4 c1				pop bc 
0bc5 d1				pop de 
0bc6 e1				pop hl 
0bc7			 
0bc7 c9				ret 
0bc8			;scroll_down: 
0bc8			;	ld de, display_row_4 
0bc8			;	ld hl, display_row_3 
0bc8			;	ld bc, display_cols 
0bc8			;	ldir 
0bc8			;	ld de, display_row_3 
0bc8			; 	ld hl, display_row_2 
0bc8			;	ld bc, display_cols 
0bc8			;	ldir 
0bc8			;	ld de, display_row_2 
0bc8			;	ld hl, display_row_1 
0bc8			;	ld bc, display_cols 
0bc8			;	ldir 
0bc8			;;; TODO clear row 1 
0bc8			;	ret 
0bc8			 
0bc8			 
0bc8			 
0bc8			 
0bc8			 
0bc8			; clear active frame buffer 
0bc8			 
0bc8			clear_display: 
0bc8 3e 20			ld a, ' ' 
0bca c3 cd 0b			jp fill_display 
0bcd			 
0bcd			; fill active frame buffer with a char in A 
0bcd			 
0bcd			fill_display: 
0bcd 06 a0			ld b,display_fb_len 
0bcf 2a c6 eb			ld hl, (display_fb_active) 
0bd2 77			.fd1:	ld (hl),a 
0bd3 23				inc hl 
0bd4 10 fc			djnz .fd1 
0bd6 23				inc hl 
0bd7 3e 00			ld a,0 
0bd9 77				ld (hl),a 
0bda			 
0bda			 
0bda c9				ret 
0bdb			; Write string (DE) at pos (A) to active frame buffer 
0bdb			 
0bdb 2a c6 eb		str_at_display:    ld hl,(display_fb_active) 
0bde 06 00					ld b,0 
0be0 4f					ld c,a 
0be1 09					add hl,bc 
0be2 1a			.sad1: 		LD   A, (DE)        ;Get character from string 
0be3 b7			            OR   A              ;Null terminator? 
0be4 c8			            RET  Z              ;Yes, so finished 
0be5 77					ld (hl),a 
0be6 23				inc hl 
0be7 13			            INC  DE             ;Point to next character 
0be8 18 f8		            JR   .sad1     ;Repeat 
0bea c9					ret 
0beb			 
0beb			; using current frame buffer write to physical display 
0beb			 
0beb			update_display: 
0beb e5				push hl 
0bec 2a c6 eb			ld hl, (display_fb_active) 
0bef cd 46 61			call write_display 
0bf2 e1				pop hl 
0bf3 c9				ret 
0bf4			 
0bf4			; TODO scrolling 
0bf4			 
0bf4			 
0bf4			; move cursor right one char 
0bf4			cursor_right: 
0bf4			 
0bf4				; TODO shift right 
0bf4				; TODO if beyond max col 
0bf4				; TODO       cursor_next_line 
0bf4			 
0bf4 c9				ret 
0bf5			 
0bf5			 
0bf5			cursor_next_line: 
0bf5				; TODO first char 
0bf5				; TODO line down 
0bf5				; TODO if past last row 
0bf5				; TODO    scroll up 
0bf5			 
0bf5 c9				ret 
0bf6			 
0bf6			cursor_left: 
0bf6				; TODO shift left 
0bf6				; TODO if beyond left  
0bf6				; TODO     cursor prev line 
0bf6				 
0bf6 c9				ret 
0bf7			 
0bf7			cursor_prev_line: 
0bf7				; TODO last char 
0bf7				; TODO line up 
0bf7				; TODO if past first row 
0bf7				; TODO   scroll down 
0bf7			 
0bf7 c9				ret 
0bf8			 
0bf8			 
0bf8			cout: 
0bf8				; A - char 
0bf8 c9				ret 
0bf9			 
0bf9			 
0bf9			; Display a menu and allow item selection (optional toggle items) 
0bf9			; 
0bf9			; format: 
0bf9			; hl pointer to word array with zero term for items 
0bf9			; e.g.    db item1 
0bf9			;         db .... 
0bf9			;         db 0 
0bf9			; 
0bf9			; a = starting menu item  
0bf9			; 
0bf9			; de = pointer item toggle array   (todo) 
0bf9			; 
0bf9			; returns item selected in a 1-... 
0bf9			; returns 0 if back button pressed 
0bf9			; 
0bf9			; NOTE: Uses system frame buffer to display 
0bf9			; 
0bf9			; LEFT, Q = go back 
0bf9			; RIGHT, SPACE, CR = select 
0bf9			; UP, A - Up 
0bf9			; DOWN, Z - Down 
0bf9			 
0bf9			 
0bf9			 
0bf9			 
0bf9			 
0bf9			menu: 
0bf9			 
0bf9					; keep array pointer 
0bf9			 
0bf9 22 6d ea				ld (store_tmp1), hl 
0bfc 32 6b ea				ld (store_tmp2), a 
0bff			 
0bff					; check for key bounce 
0bff			 
0bff			if BASE_KEV 
0bff			 
0bff			.mbounce:	call cin 
0bff					cp 0 
0bff					jr nz, .mbounce 
0bff			endif 
0bff					; for ease use ex 
0bff			 
0bff					; use menu on fb0 so as not to disrupt user screens ie a menu popup 
0bff 21 ab ed				ld hl, display_fb0 
0c02 22 c6 eb				ld (display_fb_active), hl 
0c05			 
0c05 cd c8 0b		.mloop:		call clear_display 
0c08 cd eb 0b				call update_display 
0c0b			 
0c0b					; draw selection id '>' at 1 
0c0b			 
0c0b					; init start of list display 
0c0b			 
0c0b 3e 05				ld a, 5 
0c0d 32 69 ea				ld (store_tmp3), a   ; display row count 
0c10 3a 6b ea				ld a,( store_tmp2) 
0c13 32 6c ea				ld (store_tmp2+1), a   ; display item count 
0c16			 
0c16					 
0c16			.mitem:	 
0c16			 
0c16			 
0c16 3a 6c ea				ld a,(store_tmp2+1) 
0c19 6f					ld l, a 
0c1a 26 00				ld h, 0 
0c1c 29					add hl, hl 
0c1d ed 5b 6d ea			ld de, (store_tmp1) 
0c21 19					add hl, de 
0c22 7e					ld a, (hl) 
0c23 23					inc hl 
0c24 66					ld h,(hl) 
0c25 6f					ld l, a 
0c26			 
0c26 cd 1e 0e				call ishlzero 
0c29 28 1a				jr z, .mdone 
0c2b			 
0c2b eb					ex de, hl 
0c2c 3a 69 ea				ld a, (store_tmp3) 
0c2f cd db 0b				call str_at_display 
0c32					 
0c32			 
0c32					; next item 
0c32 3a 6c ea				ld a, (store_tmp2+1) 
0c35 3c					inc a 
0c36 32 6c ea				ld (store_tmp2+1), a   ; display item count 
0c39			 
0c39			 		; next row 
0c39			 
0c39 3a 69 ea				ld a, (store_tmp3) 
0c3c c6 28				add display_cols 
0c3e 32 69 ea				ld (store_tmp3), a 
0c41			 
0c41					; at end of screen? 
0c41			 
0c41 fe 10				cp display_rows*4 
0c43 20 d1				jr nz, .mitem 
0c45			 
0c45			 
0c45			.mdone: 
0c45 cd 1e 0e				call ishlzero 
0c48 28 08				jr z, .nodn 
0c4a			 
0c4a 3e 78				ld a, display_row_4 
0c4c 11 cb 0c				ld de, .mdown 
0c4f cd db 0b				call str_at_display 
0c52			 
0c52					; draw options to fill the screens with active item on line 1 
0c52					; if current option is 2 or more then display ^ in top 
0c52			 
0c52 3a 6b ea		.nodn:		ld a, (store_tmp2) 
0c55 fe 00				cp 0 
0c57 28 08				jr z, .noup 
0c59			 
0c59 3e 00				ld a, 0 
0c5b 11 c9 0c				ld de, .mup 
0c5e cd db 0b				call str_at_display 
0c61			 
0c61 3e 02		.noup:		ld a, 2 
0c63 11 c7 0c				ld de, .msel 
0c66 cd db 0b				call str_at_display 
0c69			 
0c69					; if current option + 1 is not null then display V in bottom 
0c69					; get key 
0c69 cd eb 0b				call update_display 
0c6c			 
0c6c			 
0c6c					; handle key 
0c6c			 
0c6c cd f8 61				call cin_wait 
0c6f			 
0c6f fe 05				cp KEY_UP 
0c71 28 2b				jr z, .mgoup 
0c73 fe 61				cp 'a' 
0c75 28 27				jr z, .mgoup 
0c77 fe 0a				cp KEY_DOWN 
0c79 28 32				jr z, .mgod 
0c7b fe 7a				cp 'z' 
0c7d 28 2e				jr z, .mgod 
0c7f fe 20				cp ' ' 
0c81 28 34				jr z, .goend 
0c83 fe 0c				cp KEY_RIGHT 
0c85 28 30				jr z, .goend 
0c87 fe 0d				cp KEY_CR 
0c89 28 2c				jr z, .goend 
0c8b fe 71				cp 'q' 
0c8d 28 0b				jr z, .goback 
0c8f			 
0c8f fe 0b				cp KEY_LEFT 
0c91 28 07				jr z, .goback 
0c93 fe 08				cp KEY_BS 
0c95 28 03				jr z, .goback 
0c97 c3 05 0c				jp .mloop 
0c9a			 
0c9a			.goback: 
0c9a 3e 00			ld a, 0 
0c9c 18 1d			jr .goend2 
0c9e			 
0c9e				; move up one 
0c9e			.mgoup: 
0c9e 3a 6b ea				ld a, (store_tmp2) 
0ca1 fe 00				cp 0 
0ca3 ca 05 0c				jp z, .mloop 
0ca6 3d					dec a 
0ca7 32 6b ea				ld (store_tmp2), a 
0caa c3 05 0c				jp .mloop 
0cad			 
0cad				; move down one 
0cad			.mgod: 
0cad 3a 6b ea				ld a, (store_tmp2) 
0cb0 3c					inc a 
0cb1 32 6b ea				ld (store_tmp2), a 
0cb4 c3 05 0c				jp .mloop 
0cb7			 
0cb7			 
0cb7			.goend: 
0cb7					; get selected item number 
0cb7			 
0cb7 3a 6b ea				ld a, (store_tmp2) 
0cba 3c					inc a 
0cbb			 
0cbb			.goend2: 
0cbb f5					push af 
0cbc			 
0cbc					; restore active fb 
0cbc					; TODO BUG assumes fb1 
0cbc			 
0cbc 21 0a ed				ld hl, display_fb1 
0cbf 22 c6 eb				ld (display_fb_active), hl 
0cc2			 
0cc2					; restore main regs 
0cc2			 
0cc2			 
0cc2 cd eb 0b				call update_display 
0cc5			 
0cc5 f1					pop af 
0cc6			 
0cc6 c9				ret 
0cc7			 
0cc7 .. 00		.msel:   db ">",0 
0cc9 .. 00		.mup:   db "^",0 
0ccb .. 00		.mdown:   db "v",0 
0ccd			 
0ccd			 
0ccd			; eof 
0ccd			 
# End of file firmware_display.asm
0ccd			include "firmware_maths.asm"     ; any odd maths stuff   TODO removed until I fix up the rng code  
0ccd			; random number generators 
0ccd			 
0ccd			 
0ccd			; https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random 
0ccd			 
0ccd			 
0ccd			;-----> Generate a random number 
0ccd			; output a=answer 0<=a<=255 
0ccd			; all registers are preserved except: af 
0ccd			random: 
0ccd e5			        push    hl 
0cce d5			        push    de 
0ccf 2a a5 eb		        ld      hl,(randData) 
0cd2 ed 5f		        ld      a,r 
0cd4 57			        ld      d,a 
0cd5 5e			        ld      e,(hl) 
0cd6 19			        add     hl,de 
0cd7 85			        add     a,l 
0cd8 ac			        xor     h 
0cd9 22 a5 eb		        ld      (randData),hl 
0cdc d1			        pop     de 
0cdd e1			        pop     hl 
0cde c9			        ret 
0cdf			 
0cdf			 
0cdf			; randData here must be a 2 byte seed located in ram. While this is a fast generator, it's generally not considered very good in terms of randomness. 
0cdf			 
0cdf			 
0cdf			 
0cdf			;------LFSR------ 
0cdf			;James Montelongo 
0cdf			;optimized by Spencer Putt 
0cdf			;out: 
0cdf			; a = 8 bit random number 
0cdf			RandLFSR: 
0cdf 21 ab eb		        ld hl,LFSRSeed+4 
0ce2 5e			        ld e,(hl) 
0ce3 23			        inc hl 
0ce4 56			        ld d,(hl) 
0ce5 23			        inc hl 
0ce6 4e			        ld c,(hl) 
0ce7 23			        inc hl 
0ce8 7e			        ld a,(hl) 
0ce9 47			        ld b,a 
0cea cb 13		        rl e  
0cec cb 12			rl d 
0cee cb 11		        rl c  
0cf0 17				rla 
0cf1 cb 13		        rl e  
0cf3 cb 12			rl d 
0cf5 cb 11		        rl c  
0cf7 17				rla 
0cf8 cb 13		        rl e  
0cfa cb 12			rl d 
0cfc cb 11		        rl c  
0cfe 17				rla 
0cff 67			        ld h,a 
0d00 cb 13		        rl e  
0d02 cb 12			rl d 
0d04 cb 11		        rl c  
0d06 17				rla 
0d07 a8			        xor b 
0d08 cb 13		        rl e  
0d0a cb 12			rl d 
0d0c ac			        xor h 
0d0d a9			        xor c 
0d0e aa			        xor d 
0d0f 21 ad eb		        ld hl,LFSRSeed+6 
0d12 11 ae eb		        ld de,LFSRSeed+7 
0d15 01 07 00		        ld bc,7 
0d18 ed b8		        lddr 
0d1a 12			        ld (de),a 
0d1b c9			        ret 
0d1c			 
0d1c			;While this may produces better numbers, it is slower, larger and requires a bigger seed than ionrandom. Assuming theres is a good seed to start, it should generate ~2^56 bytes before repeating. However if there is not a good seed(0 for example), then the numbers created will not be adequate. Unlike Ionrandom and its use of the r register, starting with the same seed the same numbers will be generated. With Ionrandom the code running may have an impact on the number generated. This means this method requires more initialization. 
0d1c			 
0d1c			;You can initialize with TI-OS's seeds, stored at seed1 and seed2, both are ti-floats but will serve the purpose.  
0d1c			 
0d1c			 
0d1c			;This is a very fast, quality pseudo-random number generator. It combines a 16-bit Linear Feedback Shift Register and a 16-bit LCG. 
0d1c			 
0d1c			prng16: 
0d1c			;Inputs: 
0d1c			;   (seed1) contains a 16-bit seed value 
0d1c			;   (seed2) contains a NON-ZERO 16-bit seed value 
0d1c			;Outputs: 
0d1c			;   HL is the result 
0d1c			;   BC is the result of the LCG, so not that great of quality 
0d1c			;   DE is preserved 
0d1c			;Destroys: 
0d1c			;   AF 
0d1c			;cycle: 4,294,901,760 (almost 4.3 billion) 
0d1c			;160cc 
0d1c			;26 bytes 
0d1c 2a 9f eb		    ld hl,(seed1) 
0d1f 44			    ld b,h 
0d20 4d			    ld c,l 
0d21 29			    add hl,hl 
0d22 29			    add hl,hl 
0d23 2c			    inc l 
0d24 09			    add hl,bc 
0d25 22 9f eb		    ld (seed1),hl 
0d28 2a 9d eb		    ld hl,(seed2) 
0d2b 29			    add hl,hl 
0d2c 9f			    sbc a,a 
0d2d e6 2d		    and %00101101 
0d2f ad			    xor l 
0d30 6f			    ld l,a 
0d31 22 9d eb		    ld (seed2),hl 
0d34 09			    add hl,bc 
0d35 c9			    ret 
0d36			 
0d36			;On their own, LCGs and LFSRs don't produce great results and are generally very cyclical, but they are very fast to compute. The 16-bit LCG in the above example will bounce around and reach each number from 0 to 65535, but the lower bits are far more predictable than the upper bits. The LFSR mixes up the predictability of a given bit's state, but it hits every number except 0, meaning there is a slightly higher chance of any given bit in the result being a 1 instead of a 0. It turns out that by adding together the outputs of these two generators, we can lose the predictability of a bit's state, while ensuring it has a 50% chance of being 0 or 1. As well, since the periods, 65536 and 65535 are coprime, then the overall period of the generator is 65535*65536, which is over 4 billion.  
0d36			 
0d36			rand32: 
0d36			;Inputs: 
0d36			;   (seed1_0) holds the lower 16 bits of the first seed 
0d36			;   (seed1_1) holds the upper 16 bits of the first seed 
0d36			;   (seed2_0) holds the lower 16 bits of the second seed 
0d36			;   (seed2_1) holds the upper 16 bits of the second seed 
0d36			;   **NOTE: seed2 must be non-zero 
0d36			;Outputs: 
0d36			;   HL is the result 
0d36			;   BC,DE can be used as lower quality values, but are not independent of HL. 
0d36			;Destroys: 
0d36			;   AF 
0d36			;Tested and passes all CAcert tests 
0d36			;Uses a very simple 32-bit LCG and 32-bit LFSR 
0d36			;it has a period of 18,446,744,069,414,584,320 
0d36			;roughly 18.4 quintillion. 
0d36			;LFSR taps: 0,2,6,7  = 11000101 
0d36			;291cc 
0d36			;seed1_0=$+1 
0d36			;    ld hl,12345 
0d36			;seed1_1=$+1 
0d36			;    ld de,6789 
0d36			;    ld b,h 
0d36			;    ld c,l 
0d36			;    add hl,hl \ rl e \ rl d 
0d36			;    add hl,hl \ rl e \ rl d 
0d36			;    inc l 
0d36			;    add hl,bc 
0d36			;    ld (seed1_0),hl 
0d36			;    ld hl,(seed1_1) 
0d36			;    adc hl,de 
0d36			;    ld (seed1_1),hl 
0d36			;    ex de,hl 
0d36			;seed2_0=$+1 
0d36			;    ld hl,9876 
0d36			;seed2_1=$+1 
0d36			;    ld bc,54321 
0d36			;    add hl,hl \ rl c \ rl b 
0d36			;    ld (seed2_1),bc 
0d36			;    sbc a,a 
0d36			;    and %11000101 
0d36			;    xor l 
0d36			;    ld l,a 
0d36			;    ld (seed2_0),hl 
0d36			;    ex de,hl 
0d36			;    add hl,bc 
0d36			;    ret 
0d36			; 
0d36			 
0d36			; 16-bit xorshift pseudorandom number generator by John Metcalf 
0d36			; 20 bytes, 86 cycles (excluding ret) 
0d36			 
0d36			; returns   hl = pseudorandom number 
0d36			; corrupts   a 
0d36			 
0d36			; generates 16-bit pseudorandom numbers with a period of 65535 
0d36			; using the xorshift method: 
0d36			 
0d36			; hl ^= hl << 7 
0d36			; hl ^= hl >> 9 
0d36			; hl ^= hl << 8 
0d36			 
0d36			; some alternative shift triplets which also perform well are: 
0d36			; 6, 7, 13; 7, 9, 13; 9, 7, 13. 
0d36			 
0d36			;  org 32768 
0d36			 
0d36			xrnd: 
0d36 2a a3 eb		  ld hl,(xrandc)       ; seed must not be 0 
0d39 3e 00		  ld a,0 
0d3b bd			  cp l 
0d3c 20 02		  jr nz, .xrnd1 
0d3e 2e 01		  ld l, 1 
0d40			.xrnd1: 
0d40			 
0d40 7c			  ld a,h 
0d41 1f			  rra 
0d42 7d			  ld a,l 
0d43 1f			  rra 
0d44 ac			  xor h 
0d45 67			  ld h,a 
0d46 7d			  ld a,l 
0d47 1f			  rra 
0d48 7c			  ld a,h 
0d49 1f			  rra 
0d4a ad			  xor l 
0d4b 6f			  ld l,a 
0d4c ac			  xor h 
0d4d 67			  ld h,a 
0d4e			 
0d4e 22 a3 eb		  ld (xrandc),hl 
0d51			 
0d51 c9			  ret 
0d52			;  
0d52			 
0d52			 
0d52			;;;; int maths 
0d52			 
0d52			; https://map.grauw.nl/articles/mult_div_shifts.php 
0d52			; Divide 16-bit values (with 16-bit result) 
0d52			; In: Divide BC by divider DE 
0d52			; Out: BC = result, HL = rest 
0d52			; 
0d52			Div16: 
0d52 21 00 00		    ld hl,0 
0d55 78			    ld a,b 
0d56 06 08		    ld b,8 
0d58			Div16_Loop1: 
0d58 17			    rla 
0d59 ed 6a		    adc hl,hl 
0d5b ed 52		    sbc hl,de 
0d5d 30 01		    jr nc,Div16_NoAdd1 
0d5f 19			    add hl,de 
0d60			Div16_NoAdd1: 
0d60 10 f6		    djnz Div16_Loop1 
0d62 17			    rla 
0d63 2f			    cpl 
0d64 47			    ld b,a 
0d65 79			    ld a,c 
0d66 48			    ld c,b 
0d67 06 08		    ld b,8 
0d69			Div16_Loop2: 
0d69 17			    rla 
0d6a ed 6a		    adc hl,hl 
0d6c ed 52		    sbc hl,de 
0d6e 30 01		    jr nc,Div16_NoAdd2 
0d70 19			    add hl,de 
0d71			Div16_NoAdd2: 
0d71 10 f6		    djnz Div16_Loop2 
0d73 17			    rla 
0d74 2f			    cpl 
0d75 41			    ld b,c 
0d76 4f			    ld c,a 
0d77 c9			ret 
0d78			 
0d78			 
0d78			;http://z80-heaven.wikidot.com/math 
0d78			; 
0d78			;Inputs: 
0d78			;     DE and A are factors 
0d78			;Outputs: 
0d78			;     A is not changed 
0d78			;     B is 0 
0d78			;     C is not changed 
0d78			;     DE is not changed 
0d78			;     HL is the product 
0d78			;Time: 
0d78			;     342+6x 
0d78			; 
0d78			Mult16: 
0d78			 
0d78 06 08		     ld b,8          ;7           7 
0d7a 21 00 00		     ld hl,0         ;10         10 
0d7d 29			       add hl,hl     ;11*8       88 
0d7e 07			       rlca          ;4*8        32 
0d7f 30 01		       jr nc,$+3     ;(12|18)*8  96+6x 
0d81 19			         add hl,de   ;--         -- 
0d82 10 f9		       djnz $-5      ;13*7+8     99 
0d84 c9			ret 
0d85			 
0d85			; 
0d85			; Square root of 16-bit value 
0d85			; In:  HL = value 
0d85			; Out:  D = result (rounded down) 
0d85			; 
0d85			;Sqr16: 
0d85			;    ld de,#0040 
0d85			;    ld a,l 
0d85			;    ld l,h 
0d85			;    ld h,d 
0d85			;    or a 
0d85			;    ld b,8 
0d85			;Sqr16_Loop: 
0d85			;    sbc hl,de 
0d85			;    jr nc,Sqr16_Skip 
0d85			;    add hl,de 
0d85			;Sqr16_Skip: 
0d85			;    ccf 
0d85			;    rl d 
0d85			;    add a,a 
0d85			;    adc hl,hl 
0d85			;    add a,a 
0d85			;    adc hl,hl 
0d85			;    djnz Sqr16_Loop 
0d85			;    ret 
0d85			; 
0d85			; 
0d85			; Divide 8-bit values 
0d85			; In: Divide E by divider C 
0d85			; Out: A = result, B = rest 
0d85			; 
0d85			Div8: 
0d85 af			    xor a 
0d86 06 08		    ld b,8 
0d88			Div8_Loop: 
0d88 cb 13		    rl e 
0d8a 17			    rla 
0d8b 91			    sub c 
0d8c 30 01		    jr nc,Div8_NoAdd 
0d8e 81			    add a,c 
0d8f			Div8_NoAdd: 
0d8f 10 f7		    djnz Div8_Loop 
0d91 47			    ld b,a 
0d92 7b			    ld a,e 
0d93 17			    rla 
0d94 2f			    cpl 
0d95 c9			    ret 
0d96			 
0d96			; 
0d96			; Multiply 8-bit value with a 16-bit value (unrolled) 
0d96			; In: Multiply A with DE 
0d96			; Out: HL = result 
0d96			; 
0d96			Mult12U: 
0d96 2e 00		    ld l,0 
0d98 87			    add a,a 
0d99 30 01		    jr nc,Mult12U_NoAdd0 
0d9b 19			    add hl,de 
0d9c			Mult12U_NoAdd0: 
0d9c 29			    add hl,hl 
0d9d 87			    add a,a 
0d9e 30 01		    jr nc,Mult12U_NoAdd1 
0da0 19			    add hl,de 
0da1			Mult12U_NoAdd1: 
0da1 29			    add hl,hl 
0da2 87			    add a,a 
0da3 30 01		    jr nc,Mult12U_NoAdd2 
0da5 19			    add hl,de 
0da6			Mult12U_NoAdd2: 
0da6 29			    add hl,hl 
0da7 87			    add a,a 
0da8 30 01		    jr nc,Mult12U_NoAdd3 
0daa 19			    add hl,de 
0dab			Mult12U_NoAdd3: 
0dab 29			    add hl,hl 
0dac 87			    add a,a 
0dad 30 01		    jr nc,Mult12U_NoAdd4 
0daf 19			    add hl,de 
0db0			Mult12U_NoAdd4: 
0db0 29			    add hl,hl 
0db1 87			    add a,a 
0db2 30 01		    jr nc,Mult12U_NoAdd5 
0db4 19			    add hl,de 
0db5			Mult12U_NoAdd5: 
0db5 29			    add hl,hl 
0db6 87			    add a,a 
0db7 30 01		    jr nc,Mult12U_NoAdd6 
0db9 19			    add hl,de 
0dba			Mult12U_NoAdd6: 
0dba 29			    add hl,hl 
0dbb 87			    add a,a 
0dbc d0			    ret nc 
0dbd 19			    add hl,de 
0dbe c9			    ret 
0dbf			 
0dbf			; 
0dbf			; Multiply 8-bit value with a 16-bit value (right rotating) 
0dbf			; In: Multiply A with DE 
0dbf			;      Put lowest value in A for most efficient calculation 
0dbf			; Out: HL = result 
0dbf			; 
0dbf			Mult12R: 
0dbf 21 00 00		    ld hl,0 
0dc2			Mult12R_Loop: 
0dc2 cb 3f		    srl a 
0dc4 30 01		    jr nc,Mult12R_NoAdd 
0dc6 19			    add hl,de 
0dc7			Mult12R_NoAdd: 
0dc7 cb 23		    sla e 
0dc9 cb 12		    rl d 
0dcb b7			    or a 
0dcc c2 c2 0d		    jp nz,Mult12R_Loop 
0dcf c9			    ret 
0dd0			 
0dd0			; 
0dd0			; Multiply 16-bit values (with 32-bit result) 
0dd0			; In: Multiply BC with DE 
0dd0			; Out: BCHL = result 
0dd0			; 
0dd0			Mult32: 
0dd0 79			    ld a,c 
0dd1 48			    ld c,b 
0dd2 21 00 00		    ld hl,0 
0dd5 06 10		    ld b,16 
0dd7			Mult32_Loop: 
0dd7 29			    add hl,hl 
0dd8 17			    rla 
0dd9 cb 11		    rl c 
0ddb 30 07		    jr nc,Mult32_NoAdd 
0ddd 19			    add hl,de 
0dde ce 00		    adc a,0 
0de0 d2 e4 0d		    jp nc,Mult32_NoAdd 
0de3 0c			    inc c 
0de4			Mult32_NoAdd: 
0de4 10 f1		    djnz Mult32_Loop 
0de6 41			    ld b,c 
0de7 4f			    ld c,a 
0de8 c9			    ret 
0de9			 
0de9			 
0de9			 
0de9			; 
0de9			; Multiply 8-bit values 
0de9			; In:  Multiply H with E 
0de9			; Out: HL = result 
0de9			; 
0de9			Mult8: 
0de9 16 00		    ld d,0 
0deb 6a			    ld l,d 
0dec 06 08		    ld b,8 
0dee			Mult8_Loop: 
0dee 29			    add hl,hl 
0def 30 01		    jr nc,Mult8_NoAdd 
0df1 19			    add hl,de 
0df2			Mult8_NoAdd: 
0df2 10 fa		    djnz Mult8_Loop 
0df4 c9			    ret 
0df5			 
0df5			 
0df5			 
0df5			 
0df5			 
0df5			 
0df5			 
0df5			 
0df5			;;http://z80-heaven.wikidot.com/math 
0df5			;;This divides DE by BC, storing the result in DE, remainder in HL 
0df5			; 
0df5			;DE_Div_BC:          ;1281-2x, x is at most 16 
0df5			;     ld a,16        ;7 
0df5			;     ld hl,0        ;10 
0df5			;     jp $+5         ;10 
0df5			;.DivLoop: 
0df5			;       add hl,bc    ;-- 
0df5			;       dec a        ;64 
0df5			;       jr z,.DivLoopEnd        ;86 
0df5			; 
0df5			;       sla e        ;128 
0df5			;       rl d         ;128 
0df5			;       adc hl,hl    ;240 
0df5			;       sbc hl,bc    ;240 
0df5			;       jr nc,.DivLoop ;23|21 
0df5			;       inc e        ;-- 
0df5			;       jp .DivLoop+1 
0df5			; 
0df5			;.DivLoopEnd: 
0df5			 
0df5			;HL_Div_C: 
0df5			;Inputs: 
0df5			;     HL is the numerator 
0df5			;     C is the denominator 
0df5			;Outputs: 
0df5			;     A is the remainder 
0df5			;     B is 0 
0df5			;     C is not changed 
0df5			;     DE is not changed 
0df5			;     HL is the quotient 
0df5			; 
0df5			;       ld b,16 
0df5			;       xor a 
0df5			;         add hl,hl 
0df5			;         rla 
0df5			;         cp c 
0df5			;         jr c,$+4 
0df5			;           inc l 
0df5			;           sub c 
0df5			;         djnz $-7 
0df5			 
0df5			; https://plutiedev.com/z80-add-8bit-to-16bit 
0df5			 
0df5			addatohl: 
0df5 85			    add   a, l    ; A = A+L 
0df6 6f			    ld    l, a    ; L = A+L 
0df7 8c			    adc   a, h    ; A = A+L+H+carry 
0df8 95			    sub   l       ; A = H+carry 
0df9 67			    ld    h, a    ; H = H+carry 
0dfa c9			ret 
0dfb			 
0dfb			addatode: 
0dfb 83			    add   a, e    ; A = A+L 
0dfc 5f			    ld    e, a    ; L = A+L 
0dfd 8a			    adc   a, d    ; A = A+L+H+carry 
0dfe 93			    sub   e       ; A = H+carry 
0dff 57			    ld    d, a    ; H = H+carry 
0e00 c9			ret 
0e01			 
0e01			 
0e01			addatobc: 
0e01 81			    add   a, c    ; A = A+L 
0e02 4f			    ld    c, a    ; L = A+L 
0e03 88			    adc   a, b    ; A = A+L+H+carry 
0e04 91			    sub   c       ; A = H+carry 
0e05 47			    ld    b, a    ; H = H+carry 
0e06 c9			ret 
0e07			 
0e07			subafromhl: 
0e07			   ; If A=0 do nothing 
0e07			    ; Otherwise flip A's sign. Since 
0e07			    ; the upper byte becomes -1, also 
0e07			    ; substract 1 from H. 
0e07 ed 44		    neg 
0e09 ca 12 0e		    jp    z, Skip 
0e0c 25			    dec   h 
0e0d			     
0e0d			    ; Now add the low byte as usual 
0e0d			    ; Two's complement takes care of 
0e0d			    ; ensuring the result is correct 
0e0d 85			    add   a, l 
0e0e 6f			    ld    l, a 
0e0f 8c			    adc   a, h 
0e10 95			    sub   l 
0e11 67			    ld    h, a 
0e12			Skip: 
0e12 c9				ret 
0e13			 
0e13			 
0e13			; compare hl and de 
0e13			; returns:  
0e13			; if hl = de, z=1, s=0, c0=0 
0e13			; if hl > de, z=0, s=0, c=0 
0e13			; if hl < de, z=0, s=1, c=1 
0e13			cmp16:	 
0e13 b7				or a 
0e14 ed 52			sbc hl,de 
0e16 e0				ret po 
0e17 7c				ld a,h 
0e18 1f				rra 
0e19 ee 40			xor 01000000B 
0e1b 37				scf 
0e1c 8f				adc a,a 
0e1d c9				ret 
0e1e			 
0e1e			 
0e1e			; test if hl contains zero   - A is destroyed 
0e1e			 
0e1e			ishlzero:    
0e1e b7				or a     ; reset flags 
0e1f 7c				ld a, h 
0e20 b5				or l        	 
0e21			 
0e21 c9				ret 
0e22			 
0e22			 
0e22			 
0e22			 
0e22			if FORTH_ENABLE_FLOATMATH 
0e22			;include "float/bbcmath.z80" 
0e22			include "float/lpfpcalc.asm" 
0e22			endif 
0e22			 
0e22			 
0e22			; eof 
0e22			 
# End of file firmware_maths.asm
0e22			include "firmware_strings.asm"   ; string handling  
0e22			 
0e22			 
0e22			; TODO string len 
0e22			; input text string, end on cr with zero term 
0e22			; a offset into frame buffer to start prompt 
0e22			; d is max length 
0e22			; e is display size TODO 
0e22			; c is current cursor position 
0e22			; hl is ptr to where string will be stored and edited directly 
0e22			 
0e22			 
0e22			; TODO check limit of buffer for new inserts 
0e22			; TODO check insert does not push beyond buffer 
0e22			; TODO scroll in a limited display area 
0e22			; TODO scroll whole screen on page wrap 
0e22			 
0e22			 
0e22			; TODO use LCD cursor? 
0e22			 
0e22			EDIT_V1: equ 0 
0e22			EDIT_V2: equ 1 
0e22			 
0e22			 
0e22			 
0e22			if EDIT_V2 
0e22			input_str: 
0e22			 
0e22 32 5e ee			    	ld (input_at_pos),a      ; save display position to start 
0e25			;		ld (input_at_cursor),a	; save draw pos of cursor relative to start 
0e25 22 61 ee				ld (input_start), hl     ; save ptr to buffer 
0e28			;		ld a, c 
0e28			;		call addatohl 
0e28			;		ld (input_ptr), hl     ; save ptr to point under the cursor 
0e28 7a					ld a,d 
0e29 32 60 ee			        ld (input_size), a       ; save length of input area 
0e2c 79					ld a, c 
0e2d 32 4f ee				ld (input_cursor),a      ; init cursor start position relative to start of string 
0e30 7b					ld a,e 
0e31 32 5f ee			        ld (input_display_size), a       ; save length of input area that is displayed TODO 
0e34			 
0e34			 
0e34					; add a trailing space to make screen refresh nicer 
0e34			 
0e34					;ld hl, (input_start) 
0e34					;push hl 
0e34					;ld a, 0 
0e34					;call strlent 
0e34					;ld a, l 
0e34					;pop hl 
0e34					;call addatohl 
0e34					;dec hl 
0e34					;ld a, ' ' 
0e34					;ld (hl), a 
0e34					;inc hl 
0e34					;ld (hl), a 
0e34					;inc hl 
0e34					;ld a, 0 
0e34					;ld (hl), a 
0e34			 
0e34			; TODO move out to cin as cursor shape is used by the 4x4 ??? 
0e34					; init cursor shape if not set by the cin routines 
0e34 21 bb eb				ld hl, cursor_shape 
0e37			if BASE_KEV 
0e37					ld a, 255 
0e37			else 
0e37 3e 23				ld a, '#' 
0e39			endif 
0e39 77					ld (hl), a 
0e3a 23					inc hl 
0e3b 3e 00				ld a, 0 
0e3d 77					ld (hl), a 
0e3e			 
0e3e 3e 09				ld a, CUR_BLINK_RATE 
0e40 32 5a ee				ld (input_cur_flash), a 
0e43 3e 01				ld a, 1 
0e45 32 59 ee				ld (input_cur_onoff),a 
0e48			.inmain:	 
0e48			 
0e48 cd 70 0f				call input_disp_ref 
0e4b			 
0e4b					; save current length of string 
0e4b			 
0e4b 2a 61 ee				ld hl, (input_start) 
0e4e 3e 00				ld a, 0 
0e50 cd 66 11				call strlent 
0e53 7d					ld a,l 
0e54 32 54 ee				ld (input_len), a 
0e57			 
0e57					;call input_disp_oncur 
0e57			 
0e57					; display current state of input buffer 
0e57			 
0e57					; clean any backspace chars 
0e57			 
0e57 3e 20				ld a, " " 
0e59 32 bb e2				ld (scratch),a 
0e5c 3e 00				ld a, 0 
0e5e 32 bc e2				ld (scratch+1),a 
0e61 3a 5e ee				ld a,(input_at_pos) 
0e64 85					add l 
0e65 11 bb e2				ld de, scratch 
0e68 cd db 0b				call str_at_display 
0e6b			 
0e6b					; pause 1ms 
0e6b			 
0e6b 3e 01				ld a, 1 
0e6d cd e5 0a				call aDelayInMS 
0e70			 
0e70			; display cursor if visible on this cycle 
0e70			 
0e70					; dec flash counter 
0e70 3a 5a ee				ld a, (input_cur_flash) 
0e73 3d					dec a 
0e74 32 5a ee				ld (input_cur_flash), a 
0e77 fe 00				cp 0 
0e79 20 0d				jr nz, .inochgstate 
0e7b			 
0e7b			 
0e7b					; reset on change of state 
0e7b 3e 09				ld a, CUR_BLINK_RATE 
0e7d 32 5a ee				ld (input_cur_flash), a 
0e80			 
0e80					; change state 
0e80 3a 59 ee				ld a,(input_cur_onoff) 
0e83 ed 44				neg 
0e85 32 59 ee				ld (input_cur_onoff),a 
0e88			 
0e88			 
0e88			 
0e88			 
0e88					; TODO is cursor visible? 
0e88					; TODO if so then over write the char at curspos pos with the cursor shape 
0e88			 
0e88								 
0e88			 
0e88			.inochgstate: 
0e88 3a 59 ee				ld a,(input_cur_onoff) 
0e8b fe ff				cp 255 
0e8d 28 0e				jr z, .skipcursor 
0e8f 3a 5e ee				ld a, (input_at_pos) 
0e92 47					ld b, a 
0e93 3a 4f ee				ld a, (input_cursor) 
0e96 80					add b 
0e97 11 bb eb				ld de, cursor_shape 
0e9a					 
0e9a cd db 0b				call str_at_display 
0e9d			 
0e9d			.skipcursor: 
0e9d				if DEBUG_INPUTV2 
0e9d			 
0e9d					ld a,(input_at_pos) 
0e9d					ld hl, LFSRSeed 
0e9d					call hexout 
0e9d					ld a, (input_cursor) 
0e9d					ld hl, LFSRSeed+2 
0e9d					call hexout 
0e9d					ld a,(input_size) 
0e9d					ld hl, LFSRSeed+4 
0e9d					call hexout 
0e9d			 
0e9d					ld a,(input_cur_onoff) 
0e9d					ld hl, LFSRSeed+6 
0e9d					call hexout 
0e9d			 
0e9d					ld a,(input_cur_flash) 
0e9d					ld hl, LFSRSeed+8 
0e9d					call hexout 
0e9d			 
0e9d					ld a,(input_len) 
0e9d					ld hl, LFSRSeed+10 
0e9d					call hexout 
0e9d					ld hl, LFSRSeed+12 
0e9d					ld a, 0 
0e9d					ld (hl),a 
0e9d					ld a, display_row_4 
0e9d					ld de, LFSRSeed 
0e9d					call str_at_display 
0e9d				endif 
0e9d cd eb 0b				call update_display 
0ea0			 
0ea0					; TODO keyboard processing 
0ea0			 
0ea0			if BASE_CPM 
0ea0 cd f8 61				call cin_wait 
0ea3			else 
0ea3					call cin    ; _wait 
0ea3			endif 
0ea3 fe 00				cp 0 
0ea5 ca 48 0e				jp z, .inmain 
0ea8			 
0ea8 fe 0b				cp KEY_LEFT    ; cursor left 
0eaa ca 62 0f				jp z, input_left 
0ead				 
0ead fe 0c				cp KEY_RIGHT      ; cursor right 
0eaf ca 69 0f				jp z, input_right 
0eb2			 
0eb2 fe 0d				cp KEY_CR 
0eb4 c8					ret z 
0eb5			 
0eb5 fe 08				cp KEY_BS 
0eb7 ca d7 0f				jp z, input_delchar 
0eba			 
0eba fe 06				cp KEY_NEXTWORD 
0ebc ca e3 0e				jp z, input_nxtword 
0ebf			 
0ebf fe 07				cp KEY_PREVWORD 
0ec1 ca 0a 0f				jp z, input_prvword 
0ec4			 
0ec4 fe 0e				cp KEY_HOME    ; jump to start of line 
0ec6 20 08				jr nz, .ikh 
0ec8 3e 00				ld a, 0 
0eca 32 4f ee				ld (input_cursor), a 
0ecd ca 48 0e				jp z, .inmain 
0ed0			.ikh: 
0ed0			 
0ed0 fe 0f				cp KEY_END     ; jump to end of line 
0ed2 20 09				jr nz, .ike 
0ed4 3a 54 ee				ld a, (input_len) 
0ed7 32 4f ee				ld (input_cursor),a 
0eda ca 48 0e				jp z, .inmain 
0edd			.ike: 
0edd fe 05			        cp KEY_UP      ; recall last command 
0edf c8					ret z 
0ee0			;jr nz, .irec 
0ee0			; TODO next word 
0ee0			; TODO prev word 
0ee0			;  
0ee0			; 
0ee0			;	ld hl, scratch 
0ee0			;	ld de, os_last_cmd 
0ee0			;	call strcpy 
0ee0			;		jp  .inmain 
0ee0			.irec: 
0ee0			;		jr .instr1 
0ee0			 
0ee0			 
0ee0			 
0ee0					; if any keys not intercepted by above but are special keys like function keys then return them to the program 
0ee0			 
0ee0			; TODO return if any special keys are given 
0ee0			;		ld l, a 
0ee0			;		ld a, 28 ; KEY_F12   ; 27 
0ee0			;		sub l 
0ee0			;		ret m 
0ee0			;		ld a, l 
0ee0					; if no special key then insert as a char 
0ee0			 
0ee0 c3 a9 0f				jp input_inschr 
0ee3			 
0ee3				 
0ee3			input_nxtword: 
0ee3				; jump to start next word after the cursor 
0ee3			 
0ee3			.insknwn:	 
0ee3 cd 9f 0f				call input_curptr	 
0ee6 7e					ld a,(hl)	 
0ee7 fe 00				cp 0 
0ee9 ca 48 0e				jp z, .inmain    ; end of string 
0eec			 
0eec			; if we are on a word, then move off of it 
0eec			 
0eec fe 20				cp ' ' 
0eee 28 06				jr z, .inspace     ; we are on space so eat the space until we hit non-space 
0ef0 21 4f ee				ld hl, input_cursor 
0ef3 34					inc (hl) 
0ef4 18 ed				jr .insknwn 
0ef6			 
0ef6			.inspace: 
0ef6			 
0ef6 cd 9f 0f				call input_curptr	 
0ef9 7e					ld a,(hl)	 
0efa fe 00				cp 0 
0efc ca 48 0e				jp z, .inmain    ; end of string 
0eff			 
0eff			; if we are on a word, then move off of it 
0eff			 
0eff fe 20				cp ' ' 
0f01 c2 48 0e				jp nz, .inmain     ; we are on non space so at next word 
0f04 21 4f ee				ld hl, input_cursor 
0f07 34					inc (hl) 
0f08 18 ec				jr .inspace 
0f0a			 
0f0a			 
0f0a			 
0f0a			 
0f0a			input_prvword: 
0f0a				; jump to the start of previous word before the cursor 
0f0a			 
0f0a			; where are we to start with currently? 
0f0a			 
0f0a cd 9f 0f				call input_curptr	 
0f0d 7e					ld a, (hl) 
0f0e fe 20				cp ' ' 
0f10 28 1d				jr z, .inspacep     ; we are on space so eat the space until we hit non-space 
0f12			 
0f12			 
0f12			 
0f12			.inskpwn:	 
0f12 3a 4f ee				ld a,(input_cursor) 
0f15 fe 00				cp 0 
0f17 ca 48 0e				jp z, .inmain    ; start of string 
0f1a			 
0f1a			;if we are on a word, then move off of it 
0f1a			 
0f1a cd 9f 0f				call input_curptr	 
0f1d 7e					ld a, (hl) 
0f1e fe 20				cp ' ' 
0f20 28 06				jr z, .iwstart     ; we are on space so eat the space until we hit non-space 
0f22					;jp z, .inmain    ; start of string 
0f22 21 4f ee				ld hl, input_cursor 
0f25 35					dec (hl) 
0f26 18 ea				jr .inskpwn 
0f28			.iwstart: 
0f28 21 4f ee				ld hl, input_cursor 
0f2b 34					inc (hl) 
0f2c c3 48 0e				jp .inmain 
0f2f					 
0f2f			 
0f2f			.inspacep: 
0f2f			 
0f2f					;jp .inmain    ; start of string 
0f2f			 
0f2f			 
0f2f			 
0f2f 3a 4f ee				ld a,(input_cursor) 
0f32 fe 00				cp 0 
0f34 ca 48 0e				jp z, .inmain    ; start of string 
0f37			 
0f37			; if we are on a word, then move off of it 
0f37			 
0f37 cd 9f 0f				call input_curptr	 
0f3a 7e					ld a, (hl) 
0f3b fe 20				cp ' ' 
0f3d c2 46 0f				jp nz, .incharp     ; we are on non space so at end of prev word 
0f40 21 4f ee				ld hl, input_cursor 
0f43 35					dec (hl) 
0f44 18 e9				jr .inspacep 
0f46			 
0f46			 
0f46			.incharp:	 
0f46					; eat the word to get to the start 
0f46 3a 4f ee				ld a,(input_cursor) 
0f49 fe 00				cp 0 
0f4b ca 48 0e				jp z, .inmain    ; start of string 
0f4e			 
0f4e			; if we are on a word, then move off of it 
0f4e			 
0f4e cd 9f 0f				call input_curptr	 
0f51 7e					ld a, (hl) 
0f52 fe 20				cp ' ' 
0f54 28 06				jr z, .ipwordst     ; we are on space so eat the space until we hit non-space 
0f56 21 4f ee				ld hl, input_cursor 
0f59 35					dec (hl) 
0f5a 18 ea				jr .incharp 
0f5c			.ipwordst: 
0f5c					; at space before the prev word so reposition over it 
0f5c 21 4f ee				ld hl, input_cursor 
0f5f 34					inc (hl) 
0f60 18 b0				jr .inskpwn 
0f62					 
0f62			 
0f62			 
0f62			input_left: 
0f62				; move cursor left 
0f62 21 4f ee			ld hl, input_cursor 
0f65 35				dec (hl) 
0f66			;	cp 0 
0f66			;	jp z, .inmain    ; ignore left as at the start of the string 
0f66 c3 48 0e			jp .inmain 
0f69			 
0f69			input_right: 
0f69				; move cursor right 
0f69				 
0f69				;ld a, (input_size) 
0f69				;ld b, a 
0f69 21 4f ee			ld hl, input_cursor 
0f6c 34				inc (hl) 
0f6d				;dec b 
0f6d				;cp 0 
0f6d				;jp z, .inmain   ; ignore as at end of the string buffer 
0f6d				;ld a, b 
0f6d				;inc a 
0f6d				;ld (input_cursor), a 
0f6d c3 48 0e			jp .inmain 
0f70			 
0f70			 
0f70			 
0f70			input_disp_ref: 
0f70				; display the text from start of buffer (ie full refresh) 
0f70 3a 5e ee			ld a, (input_at_pos) 
0f73 2a 61 ee			ld hl,(input_start) 
0f76 eb				ex de, hl 
0f77 cd db 0b			call str_at_display  
0f7a c9				ret 
0f7b			input_disp_oncur: 
0f7b				; display the text from cursor position to end of buffer 
0f7b				; TODO position start of string at cursor position on screen 
0f7b				; TODO draw from that point on 
0f7b 3a 4f ee			ld a, (input_cursor) 
0f7e 47				ld b, a 
0f7f 3a 5e ee			ld a, (input_at_pos) 
0f82 80				add b 
0f83 48				ld c, b     ; save a 
0f84 78				ld a, b     ; inc string start for cursor 
0f85 2a 61 ee			ld hl,(input_start) 
0f88 cd f5 0d			call addatohl 
0f8b eb				ex de, hl 
0f8c 79				ld a, c 
0f8d cd db 0b			call str_at_display  
0f90 c9				ret 
0f91			 
0f91			input_nxtw: 
0f91				; Find next word 
0f91 c9				ret 
0f92			 
0f92			input_prvw: 
0f92				; Find previous word 
0f92 c9				ret 
0f93			 
0f93			input_lenrem:   
0f93				; Calculate the length of string remaining from current cursor 
0f93				; position to end of buffer (exc null term) 
0f93				 
0f93 3a 4f ee			ld a, (input_cursor) 
0f96 4f				ld c, a 
0f97 3a 60 ee			ld a, (input_size) 
0f9a 91				sub c 
0f9b 06 00			ld b, 0 
0f9d 0d				dec c 
0f9e c9				ret	 
0f9f			 
0f9f			input_curptr: 
0f9f				; calc address of the character under the cursor 
0f9f				 
0f9f 2a 61 ee			ld hl, (input_start) 
0fa2 3a 4f ee			ld a, (input_cursor) 
0fa5 cd f5 0d			call addatohl 
0fa8 c9				ret 
0fa9			 
0fa9			input_inschr: 
0fa9				; Insert char at cursor position 
0fa9 f5				push af   ; save char 
0faa				;call input_lenrem    ; get bc length of remaining string 
0faa			 
0faa				 
0faa cd 9f 0f			call input_curptr 
0fad			;	ld hl, (input_start) 
0fad			;	ld a, (input_cursor) 
0fad			;	call addatohl 
0fad				;push hl   ; save to come back to 
0fad			 
0fad				; shift everything up one to end of buffer 
0fad			 
0fad				;push hl 
0fad				;dec de 
0fad				;inc de 
0fad			;	ldir 
0fad				 
0fad				;pop hl 
0fad			 
0fad				; are we adding to the end of line? 
0fad			 
0fad 3a 4f ee			ld a, (input_cursor) 
0fb0 47				ld b, a 
0fb1 3a 54 ee			ld a, (input_len) 
0fb4 b8				cp b 
0fb5 20 09			jr nz, .insmid   ; no, insert in middle of text 
0fb7			 
0fb7				; tack on the end of the line 
0fb7 f1				pop af 
0fb8 77				ld (hl), a   ; save new char 
0fb9 23				inc hl 
0fba 3e 00			ld a, 0 
0fbc 77				ld (hl), a 
0fbd c3 69 0f			jp input_right 
0fc0				 
0fc0			.insmid: 
0fc0				; hl has insertion point so move everything up one to allow for insertion 
0fc0				;call input_shiftright 
0fc0 f1				pop af 
0fc1			 
0fc1			.shufinsmid: 
0fc1 47				ld b, a     ; b contains new char, c prev char at this position  
0fc2 7e				ld a, (hl) 
0fc3			 
0fc3 fe 00			cp 0    ; at end of string need to then dump new char and add term 
0fc5 28 07			jr z, .endinsmid 
0fc7 4f				ld c, a 
0fc8 78				ld a, b 
0fc9 77				ld (hl), a 
0fca 23				inc hl 
0fcb 79				ld a, c 
0fcc 18 f3			jr .shufinsmid 
0fce				 
0fce			 
0fce			 
0fce			 
0fce			.endinsmid: 
0fce 78				ld a, b 
0fcf 77				ld (hl), a 
0fd0 23				inc hl 
0fd1 3e 00			ld a, 0 
0fd3 77				ld (hl), a 
0fd4			 
0fd4			 
0fd4			;	ld (hl), a   ; save new char 
0fd4			 
0fd4 c3 69 0f			jp input_right 
0fd7			 
0fd7			;input_shiftright: 
0fd7			;	; shift text right at cursor, hl has shift start 
0fd7			;	push hl 
0fd7			;	push de 
0fd7			;	push bc 
0fd7			; 
0fd7			; 
0fd7			;	; move to end of string past zero term 
0fd7			;	ld hl,(input_start) 
0fd7			;	ld a, (input_len) 
0fd7			;	call addatohl 
0fd7			;	inc hl 
0fd7			;;	inc hl 
0fd7			;;	inc hl 
0fd7			;	ld a, 0 
0fd7			;	ld (hl), a 
0fd7			;;	dec hl 
0fd7			;	 
0fd7			;;	ld (hl), a 
0fd7			;;	dec hl 
0fd7			; 
0fd7			;	push hl 
0fd7			;	pop de 
0fd7			;	inc de 
0fd7			;	 
0fd7			; 
0fd7			;;	ld hl,(input_start) 
0fd7			;;	ld a, (input_cursor) 
0fd7			;;	call addatohl 
0fd7			; 
0fd7			; 
0fd7			;	; calc how many bytes from cursor pos to end of string we need to shift 
0fd7			;	call input_lenrem    ; get bc length of remaining string 
0fd7			;	;ld a, (input_cursor) 
0fd7			;	;ld c, a 
0fd7			;	ld a, (input_len) 
0fd7			;	cp 2 
0fd7			;	jr z, .iskipzero	 
0fd7			;	;sub c 
0fd7			;	;inc a 
0fd7			;	;ld c, a 
0fd7			;	;ld b, 0 
0fd7			;	inc c 
0fd7			;	inc c 
0fd7			;	; move data 
0fd7			;	lddr 
0fd7			;.iskipzero: 
0fd7			; 
0fd7			;	pop bc 
0fd7			;	pop de 
0fd7			;	pop hl 
0fd7			;	ret	 
0fd7			 
0fd7			input_delchar: 
0fd7				; Delete char at cursor position 
0fd7 cd 93 0f			call input_lenrem    ; get bc length of remaining string 
0fda 2a 61 ee			ld hl, (input_start) 
0fdd 3a 4f ee			ld a, (input_cursor) 
0fe0 cd f5 0d			call addatohl 
0fe3			 
0fe3 e5				push hl 
0fe4 d1				pop de 
0fe5 1b				dec de 
0fe6			 
0fe6			.dl:	 
0fe6 ed a0			ldi  
0fe8 7e				ld a, (hl) 
0fe9 fe 00			cp 0 
0feb 28 02			jr z, .dldone 
0fed 18 f7			jr .dl 
0fef			.dldone: 
0fef ed a0			ldi 
0ff1			 
0ff1 c3 62 0f			jp input_left 
0ff4			 
0ff4			 
0ff4			endif 
0ff4			 
0ff4			 
0ff4			 
0ff4			if EDIT_V1 
0ff4			input_str: 
0ff4			 
0ff4				    	ld (input_at_pos),a      ; save display position to start 
0ff4					add c 
0ff4					ld (input_at_cursor),a	; save draw pos of cursor 
0ff4					ld (input_start), hl     ; save ptr to buffer 
0ff4					ld a, c 
0ff4					call addatohl 
0ff4					ld (input_ptr), hl     ; save ptr to point under the cursor 
0ff4					ld a,d 
0ff4				        ld (input_size), a       ; save length of input area 
0ff4					ld a, c 
0ff4					ld (input_cursor),a      ; init cursor start position  
0ff4					ld a,e 
0ff4				        ld (input_display_size), a       ; save length of input area that is displayed TODO 
0ff4					 
0ff4					 
0ff4			 
0ff4			;		ld a,(input_ptr) 
0ff4			;		ld (input_under_cursor),a 	; save what is under the cursor 
0ff4			 
0ff4			; TODO move out to cin as cursor shape is used by the 4x4 ??? 
0ff4					; init cursor shape if not set by the cin routines 
0ff4					ld hl, cursor_shape 
0ff4			if BASE_KEV 
0ff4					ld a, 255 
0ff4			else 
0ff4					ld a, '#' 
0ff4			endif 
0ff4					ld (hl), a 
0ff4					inc hl 
0ff4					ld a, 0 
0ff4					ld (hl), a 
0ff4			 
0ff4					ld a, CUR_BLINK_RATE 
0ff4					ld (input_cur_flash), a 
0ff4					ld a, 1 
0ff4					ld (input_cur_onoff),a 
0ff4			 
0ff4			;	if DEBUG_INPUT 
0ff4			;		push af 
0ff4			;		ld a, 'I' 
0ff4			;		ld (debug_mark),a 
0ff4			;		pop af 
0ff4			;		CALLMONITOR 
0ff4			;	endif 
0ff4			.is1:		; main entry loop 
0ff4			 
0ff4			 
0ff4			 
0ff4					; pause 1ms 
0ff4			 
0ff4					ld a, 1 
0ff4					call aDelayInMS 
0ff4			 
0ff4					; dec flash counter 
0ff4					ld a, (input_cur_flash) 
0ff4					dec a 
0ff4					ld (input_cur_flash), a 
0ff4					cp 0 
0ff4					jr nz, .nochgstate 
0ff4			 
0ff4			 
0ff4					; change state 
0ff4					ld a,(input_cur_onoff) 
0ff4					neg 
0ff4					ld (input_cur_onoff),a 
0ff4			 
0ff4			 
0ff4					; reset on change of state 
0ff4					ld a, CUR_BLINK_RATE 
0ff4					ld (input_cur_flash), a 
0ff4			 
0ff4			.nochgstate: 
0ff4					 
0ff4					 
0ff4			 
0ff4					; display cursor  
0ff4			 
0ff4			;		ld hl, (input_start) 
0ff4			;		ld a, (input_cursor) 
0ff4			;		call addatohl 
0ff4			 
0ff4					; get char under cursor and replace with cursor 
0ff4			ld hl, (input_ptr) 
0ff4			;		ld a, (hl) 
0ff4			;		ld (input_under_cursor),a 
0ff4			;		ld a, '_' 
0ff4			;		ld (hl), a 
0ff4			 
0ff4					; display string 
0ff4			 
0ff4					ld de, (input_start) 
0ff4					ld a, (input_at_pos) 
0ff4					call str_at_display 
0ff4			;	        call update_display 
0ff4			 
0ff4					; find place to put the cursor 
0ff4			;		add h 
0ff4			;		ld l, display_row_1 
0ff4			;		sub l 
0ff4			; (input_at_pos) 
0ff4					;ld c, a 
0ff4			;		ld a, (input_cursor) 
0ff4			;		ld l, (input_at_pos) 
0ff4			;		;ld b, h 
0ff4			;		add l 
0ff4			;		ld (input_at_cursor),a 
0ff4					;ld l,h 
0ff4			 
0ff4			;		ld h, 0 
0ff4			;		ld l,(input_at_pos) 
0ff4			;		ld a, (input_cursor) 
0ff4			;		call addatohl 
0ff4			;		ld a, 074H-19			; TODO BUG I dont know why offset is showing 74H 
0ff4			;		call subafromhl 
0ff4			;		ld a,l 
0ff4			;		ld (input_at_cursor), a 
0ff4			 
0ff4				if DEBUG_INPUT 
0ff4					ld a, (hardware_diag) 
0ff4					cp 0 
0ff4					jr z, .skip_input_diag 
0ff4			 
0ff4					ld a,(input_at_pos) 
0ff4					ld hl, LFSRSeed 
0ff4					call hexout 
0ff4					ld a, (input_cursor) 
0ff4					ld hl, LFSRSeed+2 
0ff4					call hexout 
0ff4					ld a,(input_at_cursor) 
0ff4					ld hl, LFSRSeed+4 
0ff4					call hexout 
0ff4			 
0ff4					ld a,(input_cur_onoff) 
0ff4					ld hl, LFSRSeed+6 
0ff4					call hexout 
0ff4			 
0ff4					ld a,(input_cur_flash) 
0ff4					ld hl, LFSRSeed+8 
0ff4					call hexout 
0ff4			 
0ff4					ld a,(input_len) 
0ff4					ld hl, LFSRSeed+10 
0ff4					call hexout 
0ff4					ld hl, LFSRSeed+12 
0ff4					ld a, 0 
0ff4					ld (hl),a 
0ff4					ld a, display_row_4 
0ff4					ld de, LFSRSeed 
0ff4					call str_at_display 
0ff4					.skip_input_diag: 
0ff4				endif 
0ff4			 
0ff4					; decide on if we are showing the cursor this time round 
0ff4			 
0ff4					ld a, (input_cur_onoff) 
0ff4					cp 255 
0ff4					jr z, .skipcur 
0ff4			 
0ff4			 
0ff4					ld a,(input_at_cursor) 
0ff4					ld de, cursor_shape 
0ff4					call str_at_display 
0ff4			 
0ff4					; save length of current input string 
0ff4					ld hl, (input_start) 
0ff4					ld a, 0 
0ff4					call strlent 
0ff4					ld a,l 
0ff4					ld (input_len),a 
0ff4			 
0ff4			.skipcur: 
0ff4			 
0ff4				        call update_display 
0ff4					 
0ff4			 
0ff4			 
0ff4					; wait 
0ff4				 
0ff4					; TODO loop without wait to flash the cursor and char under cursor	 
0ff4					call cin    ; _wait 
0ff4			 
0ff4					cp 0 
0ff4					jp z, .is1 
0ff4			 
0ff4					; get ptr to char to input into 
0ff4			 
0ff4					ld c,a 
0ff4					ld hl, (input_start) 
0ff4					ld a, (input_cursor) 
0ff4					call addatohl 
0ff4					ld (input_ptr), hl 
0ff4					ld a,c 
0ff4			 
0ff4					; replace char under cursor 
0ff4			 
0ff4			;		ld hl, (input_ptr) 
0ff4			;		ld a, (input_under_cursor) 	; get what is under the cursor 
0ff4			;		ld (hl), a 
0ff4			 
0ff4			;	if DEBUG_INPUT 
0ff4			;		push af 
0ff4			;		ld a, 'i' 
0ff4			;		ld (debug_mark),a 
0ff4			;		pop af 
0ff4			;		CALLMONITOR 
0ff4			;	endif 
0ff4					cp KEY_HOME 
0ff4					jr nz, .iske 
0ff4			 
0ff4					ld a, (input_at_pos) 
0ff4					ld (input_at_cursor),a 
0ff4					ld a, 0 
0ff4					ld (input_cursor), a 
0ff4					jp .is1 
0ff4					 
0ff4			.iske:		cp KEY_END 
0ff4					jr nz, .isknw 
0ff4					jp .is1 
0ff4			 
0ff4			.isknw:		cp KEY_NEXTWORD 
0ff4					jr nz, .iskpw 
0ff4			 
0ff4			.isknwm:	ld hl, (input_ptr) 
0ff4					ld a,(hl)	 
0ff4					cp 0 
0ff4					jp z, .is1    ; end of string 
0ff4					cp ' ' 
0ff4					jp z, .is1    ; end of word 
0ff4					inc hl 
0ff4					ld (input_ptr), hl 
0ff4					ld a, (input_at_cursor) 
0ff4					inc a 
0ff4					ld (input_at_cursor), a 
0ff4					jr .isknwm 
0ff4			 
0ff4			.iskpw:		cp KEY_PREVWORD 
0ff4					jr nz, .iskl 
0ff4			.iskpwm:	 
0ff4					ld hl, (input_ptr) 
0ff4					ld a,(hl)	 
0ff4					cp 0  
0ff4					jp z, .is1    ; end of string 
0ff4					cp ' ' 
0ff4					jp z, .is1    ; end of word 
0ff4					dec hl 
0ff4					ld (input_ptr), hl 
0ff4					ld a, (input_at_cursor) 
0ff4					dec a 
0ff4					ld (input_at_cursor), a 
0ff4					jr .iskpwm 
0ff4			 
0ff4			 
0ff4			.iskl:		cp KEY_LEFT 
0ff4					jr nz, .isk1 
0ff4			 
0ff4					ld a, (input_cursor) 
0ff4			 
0ff4					cp 0 
0ff4					jp z, .is1 		; at start of line to ignore  
0ff4			 
0ff4					dec  a 		; TODO check underflow 
0ff4					ld (input_cursor), a 
0ff4			 
0ff4					ld hl, (input_ptr) 
0ff4					dec hl 
0ff4					ld (input_ptr), hl 
0ff4					 
0ff4					ld a, (input_at_cursor) 
0ff4					dec a 
0ff4					ld (input_at_cursor), a 
0ff4			 
0ff4					ld a, 1		; show cursor moving 
0ff4					ld (input_cur_onoff),a 
0ff4					ld a, CUR_BLINK_RATE 
0ff4					ld (input_cur_flash), a 
0ff4			 
0ff4					jp .is1 
0ff4			 
0ff4			.isk1:		cp KEY_RIGHT 
0ff4					jr nz, .isk2 
0ff4			 
0ff4					ld a,(input_len)		; TODO BUG why cant i load e direct? 
0ff4					ld e,a 
0ff4					ld a, (input_cursor) 
0ff4					cp e 
0ff4					jp z, .is1		; at the end of string so dont go right 
0ff4			 
0ff4					inc  a 		; TODO check overflow 
0ff4					ld (input_cursor), a 
0ff4			 
0ff4					ld a, (input_at_cursor) 
0ff4					inc a 
0ff4					ld (input_at_cursor), a 
0ff4			 
0ff4					ld hl, (input_ptr) 
0ff4					inc hl 
0ff4					ld (input_ptr), hl 
0ff4			 
0ff4					ld a, 1		; show cursor moving 
0ff4					ld (input_cur_onoff),a 
0ff4					ld a, CUR_BLINK_RATE 
0ff4					ld (input_cur_flash), a 
0ff4			 
0ff4					jp .is1 
0ff4			 
0ff4			.isk2:		cp KEY_UP 
0ff4			 
0ff4					jr nz, .isk3 
0ff4			 
0ff4					; swap last command with the current on 
0ff4			 
0ff4					; move cursor to start of string 
0ff4					ld hl, (input_start) 
0ff4					ld (input_ptr), hl 
0ff4			 
0ff4					ld a, (input_at_pos) 
0ff4					ld (input_at_cursor), a 
0ff4			 
0ff4					ld a, 0 
0ff4					ld (input_cursor), a 
0ff4					 
0ff4					; swap input and last command buffers 
0ff4			 
0ff4					ld hl, os_cli_cmd 
0ff4					ld de, os_last_cmd 
0ff4					ld b, 255 
0ff4			.swap1:		ld a, (hl) 
0ff4					ld c,a 
0ff4					ld a, (de) 
0ff4					ld (hl), a 
0ff4					ld a,c 
0ff4					ld (de),a 
0ff4					inc hl 
0ff4					inc de 
0ff4					djnz .swap1 
0ff4			 
0ff4			 
0ff4			 
0ff4			 
0ff4			 
0ff4					jp .is1 
0ff4			 
0ff4			.isk3:		cp KEY_BS 
0ff4					jr nz, .isk4 
0ff4			 
0ff4					ld a, (input_cursor) 
0ff4			 
0ff4					cp 0 
0ff4					jp z, .is1 		; at start of line to ignore  
0ff4			 
0ff4					dec  a 		; TODO check underflow 
0ff4					ld (input_cursor), a 
0ff4			 
0ff4					; hl is source 
0ff4					; de needs to be source - 1 
0ff4			 
0ff4			;		ld a, 0 
0ff4			;		dec hl 
0ff4			;		ld (hl), a 
0ff4			 
0ff4					ld hl, (input_ptr) 
0ff4					dec hl 
0ff4					ld (input_ptr), hl 
0ff4			 
0ff4					; shift all data 
0ff4			 
0ff4					push hl 
0ff4					inc hl 
0ff4					pop de 
0ff4					ld a, (input_len)		; TODO BUG WAS ld c, (input... 
0ff4					ld c,a 
0ff4					ld b,0 
0ff4					ldir  
0ff4			 
0ff4			 
0ff4			 
0ff4			 
0ff4					ld a, (input_at_cursor) 
0ff4					dec a 
0ff4					ld (input_at_cursor), a 
0ff4			 
0ff4			 
0ff4					ld a, 1		; show cursor moving 
0ff4					ld (input_cur_onoff),a 
0ff4					ld a, CUR_BLINK_RATE 
0ff4					ld (input_cur_flash), a 
0ff4			 
0ff4					; remove char 
0ff4					ld a, (input_at_cursor) 
0ff4					inc a 
0ff4					ld de,.iblank 
0ff4					call str_at_display 
0ff4			 
0ff4					jp .is1 
0ff4			 
0ff4			.isk4:		cp KEY_CR 
0ff4					jr z, .endinput 
0ff4			 
0ff4					; else add the key press to the end 
0ff4			 
0ff4					ld c, a			; save key pressed 
0ff4			 
0ff4					ld a,(hl)		; get what is currently under char 
0ff4			 
0ff4					cp 0			; we are at the end of the string 
0ff4					jr nz, .onchar 
0ff4					 
0ff4					; add a char to the end of the string 
0ff4				 
0ff4					ld (hl),c 
0ff4					inc hl 
0ff4			;		ld a,' ' 
0ff4			;		ld (hl),a 
0ff4			;		inc hl 
0ff4					ld a,0 
0ff4					ld (hl),a 
0ff4					dec hl 
0ff4			 
0ff4					ld a, (input_cursor) 
0ff4					inc a				; TODO check max string length and scroll  
0ff4					ld (input_cursor), a		; inc cursor pos 
0ff4							 
0ff4					ld a, (input_at_cursor) 
0ff4					inc a 
0ff4					ld (input_at_cursor), a 
0ff4			 
0ff4					ld hl, (input_ptr) 
0ff4					inc hl 
0ff4					ld (input_ptr), hl 
0ff4			 
0ff4					ld hl, (input_ptr) 
0ff4					inc hl 
0ff4					ld (input_ptr), hl 
0ff4			;	if DEBUG_INPUT 
0ff4			;		push af 
0ff4			;		ld a, '+' 
0ff4			;		ld (debug_mark),a 
0ff4			;		pop af 
0ff4			;		CALLMONITOR 
0ff4			;	endif 
0ff4					ld a, 1		; show cursor moving 
0ff4					ld (input_cur_onoff),a 
0ff4					ld a, CUR_BLINK_RATE 
0ff4					ld (input_cur_flash), a 
0ff4					jp .is1 
0ff4					 
0ff4			 
0ff4			 
0ff4					; if on a char then insert 
0ff4			.onchar: 
0ff4			 
0ff4					; TODO over flow check: make sure insert does not blow out buffer 
0ff4			 
0ff4					; need to do some maths to use lddr 
0ff4			 
0ff4					push hl   ; save char pos 
0ff4					push bc 
0ff4			 
0ff4					ld hl, (input_start) 
0ff4					ld a, (input_len) 
0ff4					call addatohl  		; end of string 
0ff4					inc hl 
0ff4					inc hl		; past zero term 
0ff4					push hl 
0ff4					inc hl 
0ff4					push hl  
0ff4			 
0ff4								; start and end of lddr set, now how much to move? 
0ff4			 
0ff4							 
0ff4					ld a, (input_cursor)		; BUG TODO why cant i load directly into b??? 
0ff4					ld b,a 
0ff4					ld a,(input_len) 
0ff4					ld e,a 
0ff4					sub b 
0ff4					inc a		;?? 
0ff4					inc a		;?? 
0ff4					inc a		;?? 
0ff4			 
0ff4					ld b,0 
0ff4					ld c,a 
0ff4			 
0ff4				if DEBUG_INPUT 
0ff4					push af 
0ff4					ld a, 'i' 
0ff4					ld (debug_mark),a 
0ff4					pop af 
0ff4			;		CALLMONITOR 
0ff4				endif 
0ff4					pop de 
0ff4					pop hl 
0ff4				if DEBUG_INPUT 
0ff4					push af 
0ff4					ld a, 'I' 
0ff4					ld (debug_mark),a 
0ff4					pop af 
0ff4			;		CALLMONITOR 
0ff4				endif 
0ff4					lddr 
0ff4				 
0ff4			 
0ff4			 
0ff4					; TODO have a key for insert/overwrite mode???? 
0ff4					pop bc 
0ff4					pop hl 
0ff4					ld (hl), c		; otherwise overwrite current char 
0ff4					 
0ff4			 
0ff4			 
0ff4			 
0ff4					ld a, (input_cursor) 
0ff4					inc  a 		; TODO check overflow 
0ff4					ld (input_cursor), a 
0ff4			 
0ff4					ld a, (input_at_cursor) 
0ff4					inc a 
0ff4					ld (input_at_cursor), a 
0ff4			 
0ff4					jp .is1 
0ff4			 
0ff4			.endinput:	; TODO look for end of string 
0ff4			 
0ff4					; add trailing space for end of token 
0ff4			 
0ff4					ld hl, (input_start) 
0ff4					ld a,(input_len) 
0ff4					call addatohl 
0ff4					ld a, ' ' 
0ff4					ld (hl),a 
0ff4					; TODO eof of parse marker 
0ff4			 
0ff4					inc hl 
0ff4					ld a, 0 
0ff4					ld (hl),a 
0ff4			 
0ff4			 
0ff4					ret 
0ff4			 
0ff4			.iblank: db " ",0 
0ff4			 
0ff4			 
0ff4			input_str_prev:	ld (input_at_pos), a 
0ff4					ld (input_start), hl 
0ff4					ld a,1			; add cursor 
0ff4					ld (hl),a 
0ff4					inc hl 
0ff4					ld a,0 
0ff4					ld (hl),a 
0ff4					ld (input_ptr), hl 
0ff4					ld a,d 
0ff4					ld (input_size), a 
0ff4					ld a,0 
0ff4					ld (input_cursor),a 
0ff4			.instr1:	 
0ff4			 
0ff4					; TODO do block cursor 
0ff4					; TODO switch cursor depending on the modifer key 
0ff4			 
0ff4					; update cursor shape change on key hold 
0ff4			 
0ff4					ld hl, (input_ptr) 
0ff4					dec hl 
0ff4					ld a,(cursor_shape) 
0ff4					ld (hl), a 
0ff4			 
0ff4					; display entered text 
0ff4					ld a,(input_at_pos) 
0ff4			            	CALL fLCD_Pos       ;Position cursor to location in A 
0ff4			            	LD   de, (input_start) 
0ff4			            	CALL fLCD_Str       ;Display string pointed to by DE 
0ff4			 
0ff4					call cin 
0ff4					cp 0 
0ff4					jr z, .instr1 
0ff4			 
0ff4					; proecess keyboard controls first 
0ff4			 
0ff4					ld hl,(input_ptr) 
0ff4			 
0ff4					cp KEY_CR	 ; pressing enter ends input 
0ff4					jr z, .instrcr 
0ff4			 
0ff4					cp KEY_BS 	; back space 
0ff4					jr nz, .instr2 
0ff4					; process back space 
0ff4			 
0ff4					; TODO stop back space if at start of string 
0ff4					dec hl 
0ff4					dec hl ; to over write cursor 
0ff4					ld a,(cursor_shape) 
0ff4					;ld a,0 
0ff4					ld (hl),a 
0ff4					inc hl 
0ff4					ld a," " 
0ff4					ld (hl),a 
0ff4					ld (input_ptr),hl 
0ff4					 
0ff4			 
0ff4					jr .instr1 
0ff4			 
0ff4			.instr2:	cp KEY_LEFT    ; cursor left 
0ff4					jr nz, .instr3 
0ff4					dec hl 
0ff4					ld (input_ptr),hl 
0ff4					jr .instr1 
0ff4				 
0ff4			.instr3:	cp KEY_RIGHT      ; cursor right 
0ff4					jr nz, .instr4 
0ff4					inc hl 
0ff4					ld (input_ptr),hl 
0ff4					jr .instr1 
0ff4			 
0ff4			.instr4:	cp KEY_HOME    ; jump to start of line 
0ff4					jr nz, .instr5 
0ff4					dec hl 
0ff4					ld (input_ptr),hl 
0ff4					jr .instr1 
0ff4			 
0ff4			.instr5:	cp KEY_END     ; jump to end of line 
0ff4					jr nz, .instr6 
0ff4					dec hl 
0ff4					ld (input_ptr),hl 
0ff4					jr .instr1 
0ff4			.instr6:        cp KEY_UP      ; recall last command 
0ff4					jr nz, .instrnew 
0ff4			 
0ff4				ld hl, scratch 
0ff4				ld de, os_last_cmd 
0ff4				call strcpy 
0ff4					jr .instr1 
0ff4			 
0ff4			 
0ff4			.instrnew:	; no special key pressed to see if we have room to store it 
0ff4			 
0ff4					; TODO do string size test 
0ff4			 
0ff4					dec hl ; to over write cursor 
0ff4					ld (hl),a 
0ff4					inc hl 
0ff4					ld a,(cursor_shape) 
0ff4					ld (hl),a 
0ff4					inc hl 
0ff4					ld a,0 
0ff4					ld (hl),a 
0ff4			 
0ff4					ld (input_ptr),hl 
0ff4					 
0ff4					jr .instr1 
0ff4			.instrcr:	dec hl		; remove cursor 
0ff4					ld a,' '	; TODO add a trailing space for safety 
0ff4					ld (hl),a 
0ff4					inc hl 
0ff4					ld a,0 
0ff4					ld (hl),a 
0ff4			 
0ff4			 
0ff4					; if at end of line scroll up    
0ff4					; TODO detecting only end of line 4 for scroll up  
0ff4			 
0ff4					;ld   
0ff4			 
0ff4					ret 
0ff4			 
0ff4			 
0ff4			endif 
0ff4			; strcpy hl = dest, de source 
0ff4			 
0ff4 1a			strcpy:   LD   A, (DE)        ;Get character from string 
0ff5 b7			            OR   A              ;Null terminator? 
0ff6 c8			            RET  Z              ;Yes, so finished 
0ff7 1a					ld a,(de) 
0ff8 77					ld (hl),a 
0ff9 13			            INC  DE             ;Point to next character 
0ffa 23					inc hl 
0ffb 18 f7		            JR   strcpy       ;Repeat 
0ffd c9					ret 
0ffe			 
0ffe			 
0ffe			; TODO string_at  
0ffe			; pass string which starts with lcd offset address and then null term string 
0ffe			 
0ffe			; TODO string to dec 
0ffe			; TODO string to hex 
0ffe			; TODO byte to string hex 
0ffe			; TODO byte to string dec 
0ffe			 
0ffe			 
0ffe			 
0ffe			; from z80uartmonitor 
0ffe			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
0ffe			; OUTPUT VALUE OF A IN HEX ONE NYBBLE AT A TIME 
0ffe			; pass hl for where to put the text 
0ffe			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
0ffe c5			hexout:	PUSH BC 
0fff f5					PUSH AF 
1000 47					LD B, A 
1001					; Upper nybble 
1001 cb 3f				SRL A 
1003 cb 3f				SRL A 
1005 cb 3f				SRL A 
1007 cb 3f				SRL A 
1009 cd 19 10				CALL tohex 
100c 77					ld (hl),a 
100d 23					inc hl	 
100e					 
100e					; Lower nybble 
100e 78					LD A, B 
100f e6 0f				AND 0FH 
1011 cd 19 10				CALL tohex 
1014 77					ld (hl),a 
1015 23					inc hl	 
1016					 
1016 f1					POP AF 
1017 c1					POP BC 
1018 c9					RET 
1019					 
1019			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
1019			; TRANSLATE value in lower A TO 2 HEX CHAR CODES FOR DISPLAY 
1019			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
1019			tohex: 
1019 e5					PUSH HL 
101a d5					PUSH DE 
101b 16 00				LD D, 0 
101d 5f					LD E, A 
101e 21 26 10				LD HL, .DATA 
1021 19					ADD HL, DE 
1022 7e					LD A, (HL) 
1023 d1					POP DE 
1024 e1					POP HL 
1025 c9					RET 
1026			 
1026			.DATA: 
1026 30					DEFB	30h	; 0 
1027 31					DEFB	31h	; 1 
1028 32					DEFB	32h	; 2 
1029 33					DEFB	33h	; 3 
102a 34					DEFB	34h	; 4 
102b 35					DEFB	35h	; 5 
102c 36					DEFB	36h	; 6 
102d 37					DEFB	37h	; 7 
102e 38					DEFB	38h	; 8 
102f 39					DEFB	39h	; 9 
1030 41					DEFB	41h	; A 
1031 42					DEFB	42h	; B 
1032 43					DEFB	43h	; C 
1033 44					DEFB	44h	; D 
1034 45					DEFB	45h	; E 
1035 46					DEFB	46h	; F 
1036			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
1036			;; 	ASCII char code for 0-9,A-F in A to single hex digit 
1036			;;    subtract $30, if result > 9 then subtract $7 more 
1036			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
1036			atohex: 
1036 d6 30				SUB $30 
1038 fe 0a				CP 10 
103a f8					RET M		; If result negative it was 0-9 so we're done 
103b d6 07				SUB $7		; otherwise, subtract $7 more to get to $0A-$0F 
103d c9					RET		 
103e			 
103e			 
103e			 
103e			 
103e			; Get 2 ASCII characters as hex byte from pointer in hl 
103e			 
103e			BYTERD: 
103e 16 00			LD	D,00h		;Set up 
1040 cd 48 10			CALL	HEXCON		;Get byte and convert to hex 
1043 87				ADD	A,A		;First nibble so 
1044 87				ADD	A,A		;multiply by 16 
1045 87				ADD	A,A		; 
1046 87				ADD	A,A		; 
1047 57				LD	D,A		;Save hi nibble in D 
1048			HEXCON: 
1048 7e				ld a, (hl)		;Get next chr 
1049 23				inc hl 
104a d6 30			SUB	030h		;Makes '0'-'9' equal 0-9 
104c fe 0a			CP	00Ah		;Is it 0-9 ? 
104e 38 02			JR	C,NALPHA	;If so miss next bit 
1050 d6 07			SUB	007h		;Else convert alpha 
1052			NALPHA: 
1052 b2				OR	D		;Add hi nibble back 
1053 c9				RET			; 
1054			 
1054			 
1054			; 
1054			; Get a word (16 bit) in hexadecimal notation. The result is returned in HL. 
1054			; Since the routines get_byte and therefore get_nibble are called, only valid 
1054			; characters (0-9a-f) are accepted. 
1054			; 
1054			;get_word        push    af 
1054			;                call    get_byte        ; Get the upper byte 
1054			;                ld      h, a 
1054			;                call    get_byte        ; Get the lower byte 
1054			;                ld      l, a 
1054			;                pop     af 
1054			;                ret 
1054			; 
1054			; Get a byte in hexadecimal notation. The result is returned in A. Since 
1054			; the routine get_nibble is used only valid characters are accepted - the  
1054			; input routine only accepts characters 0-9a-f. 
1054			; 
1054 c5			get_byte:        push    bc              ; Save contents of B (and C) 
1055 7e					ld a,(hl) 
1056 23					inc hl 
1057 cd 7c 10		                call    nibble2val      ; Get upper nibble 
105a cb 07		                rlc     a 
105c cb 07		                rlc     a 
105e cb 07		                rlc     a 
1060 cb 07		                rlc     a 
1062 47			                ld      b, a            ; Save upper four bits 
1063 7e					ld a,(hl) 
1064 cd 7c 10		                call    nibble2val      ; Get lower nibble 
1067 b0			                or      b               ; Combine both nibbles 
1068 c1			                pop     bc              ; Restore B (and C) 
1069 c9			                ret 
106a			; 
106a			; Get a hexadecimal digit from the serial line. This routine blocks until 
106a			; a valid character (0-9a-f) has been entered. A valid digit will be echoed 
106a			; to the serial line interface. The lower 4 bits of A contain the value of  
106a			; that particular digit. 
106a			; 
106a			;get_nibble      ld a,(hl)           ; Read a character 
106a			;                call    to_upper        ; Convert to upper case 
106a			;                call    is_hex          ; Was it a hex digit? 
106a			;                jr      nc, get_nibble  ; No, get another character 
106a			 ;               call    nibble2val      ; Convert nibble to value 
106a			 ;               call    print_nibble 
106a			 ;               ret 
106a			; 
106a			; is_hex checks a character stored in A for being a valid hexadecimal digit. 
106a			; A valid hexadecimal digit is denoted by a set C flag. 
106a			; 
106a			;is_hex          cp      'F' + 1         ; Greater than 'F'? 
106a			;                ret     nc              ; Yes 
106a			;                cp      '0'             ; Less than '0'? 
106a			;                jr      nc, is_hex_1    ; No, continue 
106a			;                ccf                     ; Complement carry (i.e. clear it) 
106a			;                ret 
106a			;is_hex_1        cp      '9' + 1         ; Less or equal '9*? 
106a			;                ret     c               ; Yes 
106a			;                cp      'A'             ; Less than 'A'? 
106a			;                jr      nc, is_hex_2    ; No, continue 
106a			;                ccf                     ; Yes - clear carry and return 
106a			;                ret 
106a			;is_hex_2        scf                     ; Set carry 
106a			;                ret 
106a			; 
106a			; Convert a single character contained in A to upper case: 
106a			; 
106a fe 61		to_upper:        cp      'a'             ; Nothing to do if not lower case 
106c d8			                ret     c 
106d fe 7b		                cp      'z' + 1         ; > 'z'? 
106f d0			                ret     nc              ; Nothing to do, either 
1070 e6 5f		                and     $5f             ; Convert to upper case 
1072 c9			                ret 
1073			 
1073			 
1073			to_lower: 
1073			 
1073			   ; if char is in [A-Z] make it lower case 
1073			 
1073			   ; enter : a = char 
1073			   ; exit  : a = lower case char 
1073			   ; uses  : af 
1073			 
1073 fe 41		   cp 'A' 
1075 d8			   ret c 
1076			    
1076 fe 5b		   cp 'Z'+1 
1078 d0			   ret nc 
1079			    
1079 f6 20		   or $20 
107b c9			   ret 
107c			 
107c			; 
107c			; Expects a hexadecimal digit (upper case!) in A and returns the 
107c			; corresponding value in A. 
107c			; 
107c fe 3a		nibble2val:      cp      '9' + 1         ; Is it a digit (less or equal '9')? 
107e 38 02		                jr      c, nibble2val_1 ; Yes 
1080 d6 07		                sub     7               ; Adjust for A-F 
1082 d6 30		nibble2val_1:    sub     '0'             ; Fold back to 0..15 
1084 e6 0f		                and     $f              ; Only return lower 4 bits 
1086 c9			                ret 
1087			; 
1087			; Print_nibble prints a single hex nibble which is contained in the lower  
1087			; four bits of A: 
1087			; 
1087			;print_nibble    push    af              ; We won't destroy the contents of A 
1087			;                and     $f              ; Just in case... 
1087			;                add     a, '0'             ; If we have a digit we are done here. 
1087			;                cp      '9' + 1         ; Is the result > 9? 
1087			;                jr      c, print_nibble_1 
1087			;                add     a, 'A' - '0' - $a  ; Take care of A-F 
1087			;print_nibble_1  call    putc            ; Print the nibble and 
1087			;                pop     af              ; restore the original value of A 
1087			;                ret 
1087			;; 
1087			;; Send a CR/LF pair: 
1087			; 
1087			;crlf            push    af 
1087			;                ld      a, cr 
1087			;                call    putc 
1087			;                ld      a, lf 
1087			;                call    putc 
1087			;                pop     af 
1087			;                ret 
1087			; 
1087			; Print_word prints the four hex digits of a word to the serial line. The  
1087			; word is expected to be in HL. 
1087			; 
1087			;print_word      push    hl 
1087			;                push    af 
1087			;                ld      a, h 
1087			;                call    print_byte 
1087			;                ld      a, l 
1087			;                call    print_byte 
1087			;                pop     af 
1087			;                pop     hl 
1087			;                ret 
1087			; 
1087			; Print_byte prints a single byte in hexadecimal notation to the serial line. 
1087			; The byte to be printed is expected to be in A. 
1087			; 
1087			;print_byte      push    af              ; Save the contents of the registers 
1087			;                push    bc 
1087			;                ld      b, a 
1087			;                rrca 
1087			;                rrca 
1087			;                rrca 
1087			;                rrca 
1087			;                call    print_nibble    ; Print high nibble 
1087			;                ld      a, b 
1087			;                call    print_nibble    ; Print low nibble 
1087			;                pop     bc              ; Restore original register contents 
1087			;                pop     af 
1087			;                ret 
1087			 
1087			 
1087			 
1087			 
1087			 
1087			fourehexhl:  
1087 7e				ld a,(hl) 
1088 cd 36 10			call atohex 
108b cb 3f				SRL A 
108d cb 3f				SRL A 
108f cb 3f				SRL A 
1091 cb 3f				SRL A 
1093 47				ld b, a 
1094 23				inc hl 
1095 7e				ld a,(hl) 
1096 23				inc hl 
1097 cd 36 10			call atohex 
109a 80				add b 
109b 57				ld d,a 
109c 7e				ld a,(hl) 
109d cd 36 10			call atohex 
10a0 cb 3f				SRL A 
10a2 cb 3f				SRL A 
10a4 cb 3f				SRL A 
10a6 cb 3f				SRL A 
10a8 47				ld b, a 
10a9 23				inc hl 
10aa 7e				ld a,(hl) 
10ab 23				inc hl 
10ac cd 36 10			call atohex 
10af 80				add b 
10b0 5f				ld e, a 
10b1 d5				push de 
10b2 e1				pop hl 
10b3 c9				ret 
10b4			 
10b4			; pass hl. returns z set if the byte at hl is a digit 
10b4			;isdigithl:  
10b4			;	push bc 
10b4			;	ld a,(hl) 
10b4			;	cp ':' 
10b4			;	jr nc, .isdf 		; > 
10b4			;	cp '0' 
10b4			;	jr c, .isdf		; < 
10b4			; 
10b4			;	; TODO find a better way to set z 
10b4			; 
10b4			;	ld b,a 
10b4			;	cp b 
10b4			;	pop bc 
10b4			;	ret 
10b4			; 
10b4			;.isdf:	; not digit so clear z 
10b4			; 
10b4			;	; TODO find a better way to unset z 
10b4			; 
10b4			;	ld b,a 
10b4			;	inc b 
10b4			;	cp b 
10b4			; 
10b4			;	pop bc 
10b4			;	ret 
10b4				 
10b4				 
10b4			 
10b4			 
10b4			; pass hl as the four byte address to load 
10b4			 
10b4			get_word_hl:  
10b4 e5				push hl 
10b5 cd 54 10			call get_byte 
10b8				 
10b8 47				ld b, a 
10b9			 
10b9 e1				pop hl 
10ba 23				inc hl 
10bb 23				inc hl 
10bc			 
10bc			; TODO not able to handle a-f  
10bc 7e				ld a,(hl) 
10bd			;	;cp ':' 
10bd			;	cp 'g' 
10bd			;	jr nc, .single_byte_hl 		; > 
10bd			;	cp 'G' 
10bd			;	jr nc, .single_byte_hl 		; > 
10bd			;	cp '0' 
10bd			;	jr c, .single_byte_hl		; < 
10bd			 
10bd				;call isdigithl 
10bd fe 00			cp 0 
10bf 28 06			jr z, .single_byte_hl 
10c1			 
10c1			.getwhln:   ; hex word so get next byte 
10c1			 
10c1 cd 54 10			call get_byte 
10c4 6f				ld l, a 
10c5 60				ld h,b 
10c6 c9				ret 
10c7 68			.single_byte_hl:   ld l,b 
10c8 26 00				ld h,0 
10ca c9					ret 
10cb			 
10cb			 
10cb			 
10cb			 
10cb 21 6b 18			ld hl,asc+1 
10ce			;	ld a, (hl) 
10ce			;	call nibble2val 
10ce cd 54 10			call get_byte 
10d1			 
10d1			;	call fourehexhl 
10d1 32 ef e2			ld (scratch+52),a 
10d4				 
10d4 21 ed e2			ld hl,scratch+50 
10d7 22 de e5			ld (os_cur_ptr),hl 
10da			 
10da c9				ret 
10db			 
10db			 
10db			; from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Other:DispA 
10db			 
10db			; Decimal Unsigned Version 
10db			 
10db			;Number in a to decimal ASCII 
10db			;adapted from 16 bit found in z80 Bits to 8 bit by Galandros 
10db			;Example: display a=56 as "056" 
10db			;input: a = number 
10db			;Output: a=0,value of a in the screen 
10db			;destroys af,bc (don't know about hl and de) 
10db			DispAToASCII: 
10db 0e 9c			ld	c,-100 
10dd cd e7 10			call	.Na1 
10e0 0e f6			ld	c,-10 
10e2 cd e7 10			call	.Na1 
10e5 0e ff			ld	c,-1 
10e7 06 2f		.Na1:	ld	b,'0'-1 
10e9 04			.Na2:	inc	b 
10ea 81				add	a,c 
10eb 38 fc			jr	c,.Na2 
10ed 91				sub	c		;works as add 100/10/1 
10ee f5				push af		;safer than ld c,a 
10ef 78				ld	a,b		;char is in b 
10f0			;TODO	CALL	PUTCHAR	;plot a char. Replace with bcall(_PutC) or similar. 
10f0 f1				pop af		;safer than ld a,c 
10f1 c9				ret 
10f2			 
10f2			; Decimal Signed Version 
10f2			 
10f2			; DispA 
10f2			; -------------------------------------------------------------- 
10f2			; Converts a signed integer value to a zero-terminated ASCII 
10f2			; string representative of that value (using radix 10). 
10f2			; -------------------------------------------------------------- 
10f2			; INPUTS: 
10f2			;     HL     Value to convert (two's complement integer). 
10f2			;     DE     Base address of string destination. (pointer). 
10f2			; -------------------------------------------------------------- 
10f2			; OUTPUTS: 
10f2			;     None 
10f2			; -------------------------------------------------------------- 
10f2			; REGISTERS/MEMORY DESTROYED 
10f2			; AF HL 
10f2			; -------------------------------------------------------------- 
10f2			 
10f2			;DispHLToASCII: 
10f2			;   push    de 
10f2			;   push    bc 
10f2			; 
10f2			;; Detect sign of HL. 
10f2			;    bit    7, h 
10f2			;    jr     z, ._DoConvert 
10f2			; 
10f2			;; HL is negative. Output '-' to string and negate HL. 
10f2			;    ld     a, '-' 
10f2			;    ld     (de), a 
10f2			;    inc    de 
10f2			; 
10f2			;; Negate HL (using two's complement) 
10f2			;    xor    a 
10f2			;    sub    l 
10f2			;    ld     l, a 
10f2			;    ld     a, 0     ; Note that XOR A or SUB A would disturb CF 
10f2			;    sbc    a, h 
10f2			;    ld     h, a 
10f2			; 
10f2			;; Convert HL to digit characters 
10f2			;._DoConvert: 
10f2			;    ld     b, 0     ; B will count character length of number 
10f2			;-   ld     a, 10 
10f2			;    syscall  .DivHLByA  ; HL = HL / A, A = remainder 
10f2			;    push   af 
10f2			;    inc    b 
10f2			;    ld     a, h 
10f2			;    or     l 
10f2			;    jr     nz, - 
10f2			; 
10f2			;; Retrieve digits from stack 
10f2			;-   pop    af 
10f2			;    or     $30 
10f2			;    ld     (de), a 
10f2			;    inc    de 
10f2			;    djnz   - 
10f2			; 
10f2			;; Terminate string with NULL 
10f2			;    xor    a 
10f2			;    ld     (de), a 
10f2			; 
10f2			;    pop    bc 
10f2			;    pop    de 
10f2			;    ret 
10f2			 
10f2			;Comments 
10f2			; 
10f2			;    This routine uses the common positive-integer radix conversion algorithm of repeatedly dividing a value by the desired radix (base case: the value is zero) and saving the remainders of each division. 
10f2			;    As this algorithm gives the digits in reverse order, they are pushed onto the hardware stack so that subsequently popping them yields the correct order. 
10f2			;    Note that the output string will not be fixed-width. 
10f2			; 
10f2			;Example Usage 
10f2			; 
10f2			;    ld    hl, -1004 
10f2			;    ld    de, OP1 
10f2			;    call  DispA 
10f2			;    ld    hl, OP1 
10f2			;    syscall  PutS 
10f2			 
10f2			 
10f2			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/string_to_uint16.z80 
10f2			 
10f2			 
10f2			;Converts an ASCII string to an unsigned 16-bit integer 
10f2			;Quits when it reaches a non-decimal digit 
10f2			 
10f2			string_to_uint16: 
10f2			atoui_16: 
10f2			;Input: 
10f2			;     DE points to the string 
10f2			;Outputs: 
10f2			;     HL is the result 
10f2			;     A is the 8-bit value of the number 
10f2			;     DE points to the byte after the number 
10f2			;Destroys: 
10f2			;     BC 
10f2			;       if the string is non-empty, BC is HL/10 
10f2			;Size:  24 bytes 
10f2			;Speed: 42+d(104+{0,9}) 
10f2			;       d is the number of digits in the number 
10f2			;       max is 640 cycles for a 5 digit number 
10f2			;Assuming no leading zeros: 
10f2			;1 digit:  146cc 
10f2			;2 digit:  250cc 
10f2			;3 digit:  354cc or 363cc (avg: 354.126cc) 
10f2			;4 digit:  458cc or 467cc (avg: 458.27cc) 
10f2			;5 digit:  562cc or 571cc or 580cc (avg: 562.4104cc) 
10f2			;avg: 544.81158447265625cc (544+13297/16384) 
10f2			;=============================================================== 
10f2 21 00 00		  ld hl,0 
10f5			.u16a: 
10f5 1a			  ld a,(de) 
10f6 d6 30		  sub 30h 
10f8 fe 0a		  cp 10 
10fa d0			  ret nc 
10fb 13			  inc de 
10fc 44			  ld b,h 
10fd 4d			  ld c,l 
10fe 29			  add hl,hl 
10ff 29			  add hl,hl 
1100 09			  add hl,bc 
1101 29			  add hl,hl 
1102 85			  add a,l 
1103 6f			  ld l,a 
1104 30 ef		  jr nc,.u16a 
1106 24			  inc h 
1107 c3 f5 10		  jp .u16a 
110a			 
110a			 
110a			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/string_to_uint16.z80 
110a			 
110a			;written by Zeda 
110a			;Converts a 16-bit unsigned integer to an ASCII string. 
110a			 
110a			uitoa_16: 
110a			;Input: 
110a			;   DE is the number to convert 
110a			;   HL points to where to write the ASCII string (up to 6 bytes needed). 
110a			;Output: 
110a			;   HL points to the null-terminated ASCII string 
110a			;      NOTE: This isn't necessarily the same as the input HL. 
110a d5			  push de 
110b c5			  push bc 
110c f5			  push af 
110d eb			  ex de,hl 
110e			 
110e 01 f0 d8		  ld bc,-10000 
1111 3e 2f		  ld a,'0'-1 
1113 3c			  inc a 
1114 09			  add hl,bc  
1115 38 fc		   jr c,$-2 
1117 12			  ld (de),a 
1118 13			  inc de 
1119			 
1119 01 e8 03		  ld bc,1000 
111c 3e 3a		  ld a,'9'+1 
111e 3d			  dec a  
111f 09			  add hl,bc  
1120 30 fc		   jr nc,$-2 
1122 12			  ld (de),a 
1123 13			  inc de 
1124			 
1124 01 9c ff		  ld bc,-100 
1127 3e 2f		  ld a,'0'-1 
1129 3c			  inc a  
112a 09			  add hl,bc  
112b 38 fc		   jr c,$-2 
112d 12			  ld (de),a 
112e 13			  inc de 
112f			 
112f 7d			  ld a,l 
1130 26 3a		  ld h,'9'+1 
1132 25			  dec h  
1133 c6 0a		  add a,10  
1135 30 fb		   jr nc,$-3 
1137 c6 30		  add a,'0' 
1139 eb			  ex de,hl 
113a 72			  ld (hl),d 
113b 23			  inc hl 
113c 77			  ld (hl),a 
113d 23			  inc hl 
113e 36 00		  ld (hl),0 
1140			 
1140			;Now strip the leading zeros 
1140 0e fa		  ld c,-6 
1142 09			  add hl,bc 
1143 3e 30		  ld a,'0' 
1145 23			  inc hl  
1146 be			  cp (hl)  
1147 28 fc		  jr z,$-2 
1149			 
1149			;Make sure that the string is non-empty! 
1149 7e			  ld a,(hl) 
114a b7			  or a 
114b 20 01		  jr nz,.atoub 
114d 2b			  dec hl 
114e			.atoub: 
114e			 
114e f1			  pop af 
114f c1			  pop bc 
1150 d1			  pop de 
1151 c9			  ret 
1152			 
1152			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/toUpper.z80 
1152			 
1152			toUpper: 
1152			;A is the char. 
1152			;If A is a lowercase letter, this sets it to the matching uppercase 
1152			;18cc or 30cc or 41cc 
1152			;avg: 26.75cc 
1152 fe 61		  cp 'a' 
1154 d8			  ret c 
1155 fe 7b		  cp 'z'+1 
1157 d0			  ret nc 
1158 d6 20		  sub 'a'-'A' 
115a c9			  ret 
115b			 
115b			; https://tutorials.eeems.ca/ASMin28Days/lesson/day16.html#cmp 
115b			 
115b			; String Length 
115b			;With a length-prefixed string, finding the length is trivial. For a null-terminated string, the process is decidedly more involved. This is where CPIR comes in. 
115b			 
115b			; Get the length of the null-terminated string starting at $8000 hl 
115b			;    LD     HL, $8000 
115b			 
115b			strlenz: 
115b			 
115b af			    XOR    A               ; Zero is the value we are looking for. 
115c 47			    LD     B, A             ; Since we haven't the slightest clue as to the  
115d 4f			    LD     C, A             ; actual size of the string, put 0 in BC to search 
115e			                           ; 65, 536 bytes (the entire addressable memory space). 
115e ed b1		    CPIR                   ; Begin search for a byte equalling zero. 
1160			 
1160			; BC has been decremented so that it holds -length. Now need to synthesize a NEG BC. 
1160 67			    LD     H, A             ; Zero HL (basically set it to 65, 536) to get the 
1161 6f			    LD     L, A             ; number of bytes 
1162 ed 42		    SBC    HL, BC           ; Find the size. CPIR doesn't affect carry. 
1164 2b			    DEC    HL              ; Compensate for null. 
1165 c9				ret 
1166			 
1166			; Get the length of the A terminated string starting at $8000 hl 
1166			;    LD     HL, $8000 
1166			 
1166			strlent: 
1166			 
1166			                  ; A is the value we are looking for. 
1166 06 00		    LD     B, 0             ; Since we haven't the slightest clue as to the  
1168 0e 00		    LD     C, 0             ; actual size of the string, put 0 in BC to search 
116a			                           ; 65, 536 bytes (the entire addressable memory space). 
116a ed b1		    CPIR                   ; Begin search for a byte equalling zero. 
116c			 
116c			; BC has been decremented so that it holds -length. Now need to synthesize a NEG BC. 
116c 26 00		    LD     H, 0             ; Zero HL (basically set it to 65, 536) to get the 
116e 2e 00		    LD     L, 0             ; number of bytes 
1170 ed 42		    SBC    HL, BC           ; Find the size. CPIR doesn't affect carry. 
1172 2b			    DEC    HL              ; Compensate for null. 
1173 c9				ret 
1174			 
1174			 
1174			;Comparing Strings 
1174			 
1174			;IN    HL     Address of string1. 
1174			;      DE     Address of string2. 
1174			 
1174			; doc given but wrong??? 
1174			;OUT   zero   Set if string1 = string2, reset if string1 != string2. 
1174			;      carry  Set if string1 > string2, reset if string1 <= string2. 
1174			; tested 
1174			;OUT   carry set  if string1 = string2, carry  reset if string1 != string2. 
1174			 
1174			strcmp_old: 
1174 e5			    PUSH   HL 
1175 d5			    PUSH   DE 
1176			 
1176 1a			    LD     A, (DE)          ; Compare lengths to determine smaller string 
1177 be			    CP     (HL)            ; (want to minimize work). 
1178 38 01		    JR     C, Str1IsBigger 
117a 7e			    LD     A, (HL) 
117b			 
117b			Str1IsBigger: 
117b 4f			    LD     C, A             ; Put length in BC 
117c 06 00		    LD     B, 0 
117e 13			    INC    DE              ; Increment pointers to meat of string. 
117f 23			    INC    HL 
1180			 
1180			CmpLoop: 
1180 1a			    LD     A, (DE)          ; Compare bytes. 
1181 ed a1		    CPI 
1183 20 09		    JR     NZ, NoMatch      ; If (HL) != (DE), abort. 
1185 13			    INC    DE              ; Update pointer. 
1186 ea 80 11		    JP     PE, CmpLoop 
1189			 
1189 d1			    POP    DE 
118a e1			    POP    HL 
118b 1a			    LD     A, (DE)          ; Check string lengths to see if really equal. 
118c be			    CP     (HL) 
118d c9			    RET 
118e			 
118e			NoMatch: 
118e 2b			    DEC    HL 
118f be			    CP     (HL)            ; Compare again to affect carry. 
1190 d1			    POP    DE 
1191 e1			    POP    HL 
1192 c9			    RET 
1193			 
1193			;; test strmp 
1193			; 
1193			;ld de, .str1 
1193			;ld hl, .str2 
1193			;call strcmp 
1193			;jr z, .z1 
1193			;;this 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "NZ1" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			;.z1: 
1193			; 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "ZZ1" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			; 
1193			;ld de, .str1 
1193			;ld hl, .str1 
1193			;call strcmp 
1193			;jr z, .z2 
1193			;;this 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "NZ2" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			;.z2: 
1193			; 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "ZZ2" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			; 
1193			;ld de, .str1 
1193			;ld hl, .str2 
1193			;call strcmp 
1193			;jr c, .c1 
1193			; 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "Nc1" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			;.c1: 
1193			;;this 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "cc1" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			; 
1193			;ld de, .str1 
1193			;ld hl, .str1 
1193			;call strcmp 
1193			;jr c, .c2 
1193			;;this 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "Nc2" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			;.c2: 
1193			; 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "cc2" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			;	NEXTW 
1193			;.str1:   db "string1",0 
1193			;.str2:   db "string2",0 
1193			 
1193			; only care about direct match or not 
1193			; hl and de strings 
1193			; zero set if the same 
1193			 
1193			strcmp: 
1193 1a				ld a, (de) 
1194 be				cp (hl) 
1195 28 02			jr z, .ssame 
1197 b7				or a 
1198 c9				ret 
1199			 
1199			.ssame:  
1199 fe 00			cp 0 
119b c8				ret z 
119c			 
119c 23				inc hl 
119d 13				inc de 
119e 18 f3			jr strcmp 
11a0				 
11a0				 
11a0			 
11a0			;Copyright (c) 2014, Luke Maurits 
11a0			;All rights reserved. 
11a0			; 
11a0			;Redistribution and use in source and binary forms, with or without 
11a0			;modification, are permitted provided that the following conditions are met: 
11a0			; 
11a0			;* Redistributions of source code must retain the above copyright notice, this 
11a0			;  list of conditions and the following disclaimer. 
11a0			; 
11a0			;* Redistributions in binary form must reproduce the above copyright notice, 
11a0			;  this list of conditions and the following disclaimer in the documentation 
11a0			;  and/or other materials provided with the distribution. 
11a0			; 
11a0			;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
11a0			;AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
11a0			;IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
11a0			;DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE 
11a0			;FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
11a0			;DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
11a0			;SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
11a0			;CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
11a0			;OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
11a0			;OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
11a0			 
11a0			; https://github.com/lmaurits/lm512/blob/master/string.z80 
11a0			 
11a0			StrictStrCmp: 
11a0				; Load next chars of each string 
11a0 1a				ld a, (de) 
11a1 47				ld b, a 
11a2 7e				ld a, (hl) 
11a3				; Compare 
11a3 b8				cp b 
11a4				; Return non-zero if chars don't match 
11a4 c0				ret nz 
11a5				; Check for end of both strings 
11a5 fe 00			cp "\0" 
11a7				; Return if strings have ended 
11a7 c8				ret z 
11a8				; Otherwise, advance to next chars 
11a8 23				inc hl 
11a9 13				inc de 
11aa 18 f4			jr StrictStrCmp 
11ac			 
11ac			;end 
11ac			; eof 
11ac			 
11ac			 
11ac			 
11ac			 
11ac			 
11ac			 
# End of file firmware_strings.asm
11ac			include "firmware_memory.asm"   ; malloc and free  
11ac			 
11ac			if DEBUG_FORTH_MALLOC_HIGH 
11ac			.mallocsize: db "Wants malloc >256",0 
11ac			.mallocasize: db "MALLOC gives >256",0 
11ac			.malloczero: db "MALLOC gives zero",0 
11ac			 
11ac			malloc_guard_zerolen: 
11ac				push hl 
11ac				push de 
11ac				push af 
11ac			 
11ac				ld de, 0 
11ac			        call cmp16 
11ac				jr nz, .lowalloz 
11ac			 
11ac				push hl 
11ac				push de 
11ac					ld hl, display_fb0 
11ac					ld (display_fb_active), hl 
11ac				call clear_display 
11ac				ld a, 0 
11ac				ld de, .malloczero 
11ac				call str_at_display 
11ac				call update_display 
11ac				call delay1s 
11ac				call delay1s 
11ac				call bp_on 
11ac			;	ld a, 0 
11ac			;	ld (os_view_disable), a 
11ac			 
11ac				pop de 
11ac				pop hl 
11ac			 
11ac				 
11ac			 
11ac				CALLMONITOR 
11ac			.lowalloz: 
11ac			 
11ac			 
11ac				pop af 
11ac				pop de 
11ac				pop hl 
11ac			ret 
11ac			 
11ac			malloc_guard_entry: 
11ac				push hl 
11ac				push de 
11ac				push af 
11ac			 
11ac			 	or a      ;clear carry flag 
11ac				push hl 
11ac				ld de, 255 
11ac				sbc hl, de 
11ac				jr c, .lowalloc 
11ac			 
11ac				push de 
11ac					ld hl, display_fb0 
11ac					ld (display_fb_active), hl 
11ac				call clear_display 
11ac				ld a, 0 
11ac				ld de, .mallocsize 
11ac				call str_at_display 
11ac				call update_display 
11ac				call delay1s 
11ac				call delay1s 
11ac			;	ld a, 0 
11ac			;	ld (os_view_disable), a 
11ac				call bp_on 
11ac			 
11ac				pop de 
11ac				pop hl 
11ac			 
11ac				 
11ac			 
11ac				CALLMONITOR 
11ac				jr .lowdone 
11ac			.lowalloc: 
11ac			 
11ac			 
11ac				pop hl 
11ac			.lowdone:	pop af 
11ac				pop de 
11ac				pop hl 
11ac			ret 
11ac			 
11ac			malloc_guard_exit: 
11ac				push hl 
11ac				push de 
11ac				push af 
11ac			 
11ac			 	or a      ;clear carry flag 
11ac				push hl 
11ac				ld de, 255 
11ac				sbc hl, de 
11ac				jr c, .lowallocx 
11ac			 
11ac				push de 
11ac					ld hl, display_fb0 
11ac					ld (display_fb_active), hl 
11ac				call clear_display 
11ac				ld a, 0 
11ac				ld de, .mallocasize 
11ac				call str_at_display 
11ac				call update_display 
11ac				call delay1s 
11ac				call delay1s 
11ac			;	ld a, 0 
11ac			;	ld (os_view_disable), a 
11ac				call bp_on 
11ac				pop de 
11ac				pop hl 
11ac			 
11ac				CALLMONITOR 
11ac				jr .lowdonex 
11ac			.lowallocx: 
11ac			 
11ac				pop hl 
11ac			.lowdonex:	pop af 
11ac				pop de 
11ac				pop hl 
11ac			ret 
11ac			endif 
11ac			 
11ac			if MALLOC_2 
11ac			; Z80 Malloc and Free Functions 
11ac			 
11ac			; Malloc Function: 
11ac			; Input: 
11ac			;   HL: Size of block to allocate 
11ac			; Output: 
11ac			;   HL: Pointer to allocated memory block (NULL if allocation fails) 
11ac			 
11ac			malloc: 
11ac				 
11ac			if DEBUG_FORTH_MALLOC_HIGH 
11ac			call malloc_guard_entry 
11ac			endif 
11ac			 
11ac			 
11ac			 
11ac			 
11ac					if DEBUG_FORTH_MALLOC 
11ac						DMARK "mal" 
11ac						CALLMONITOR 
11ac					endif 
11ac			    push af            ; Save AF register 
11ac			    ld a, l            ; Load low byte of size into A 
11ac			    or h               ; Check if size is zero 
11ac			    jp z, malloc_exit  ; If size is zero, exit with NULL pointer 
11ac			 
11ac			    ; Allocate memory 
11ac			    ld hl, (heap_start) ; Load start of heap into HL 
11ac					if DEBUG_FORTH_MALLOC 
11ac						DMARK "ma1" 
11ac						CALLMONITOR 
11ac					endif 
11ac			    call malloc_internal ; Call internal malloc function 
11ac			    pop af             ; Restore AF register 
11ac			if DEBUG_FORTH_MALLOC_HIGH 
11ac			call malloc_guard_exit 
11ac			call malloc_guard_zerolen 
11ac			endif 
11ac			    ret                ; Return 
11ac			 
11ac			; Free Function: 
11ac			; Input: 
11ac			;   HL: Pointer to memory block to free 
11ac			; Output: 
11ac			;   None 
11ac			 
11ac			free: 
11ac			    push af            ; Save AF register 
11ac			    ld a, l            ; Load low byte of pointer into A 
11ac			    or h               ; Check if pointer is NULL 
11ac			    jp z, free_exit    ; If pointer is NULL, exit 
11ac			 
11ac			    ; Free memory 
11ac			    ld hl, (heap_start) ; Load start of heap into HL 
11ac			    call free_internal  ; Call internal free function 
11ac			    pop af             ; Restore AF register 
11ac			    ret                ; Return 
11ac			 
11ac			; Internal Malloc Function: 
11ac			; Input: 
11ac			;   HL: Size of block to allocate 
11ac			; Output: 
11ac			;   HL: Pointer to allocated memory block (NULL if allocation fails) 
11ac			 
11ac			malloc_internal: 
11ac			    ld bc, 2           ; Number of bytes to allocate for management overhead 
11ac			    add hl, bc         ; Add management overhead to requested size 
11ac			    ex de, hl          ; Save total size in DE, and keep it in HL 
11ac					if DEBUG_FORTH_MALLOC 
11ac						DMARK "ma2" 
11ac						CALLMONITOR 
11ac					endif 
11ac			 
11ac			    ; Search for free memory block 
11ac			    ld de, (heap_end)  ; Load end of heap into DE 
11ac			    ld bc, 0           ; Initialize counter 
11ac			 
11ac					if DEBUG_FORTH_MALLOC 
11ac						DMARK "ma2" 
11ac						CALLMONITOR 
11ac					endif 
11ac			malloc_search_loop: 
11ac			    ; Check if current block is free 
11ac			    ld a, (hl)         ; Load current block's status (free or used) 
11ac			    cp 0               ; Compare with zero (free) 
11ac			    jr nz, malloc_skip_block_check  ; If not free, skip to the next block 
11ac			 
11ac			    ; Check if current block is large enough 
11ac			    ld a, (hl+1)       ; Load high byte of block size 
11ac			    cp l               ; Compare with low byte of requested size 
11ac			    jr nz, malloc_skip_block_check  ; If not large enough, skip to the next block 
11ac			 
11ac			    ld a, (hl+2)       ; Load low byte of block size 
11ac			    cp h               ; Compare with high byte of requested size 
11ac			    jr c, malloc_skip_block_check   ; If not large enough, skip to the next block 
11ac			 
11ac			    ; Mark block as used 
11ac			    ld (hl), 0xFF      ; Set status byte to indicate used block 
11ac			 
11ac			    ; Calculate remaining space in block 
11ac			    ld bc, 0           ; Clear BC 
11ac			    add hl, bc         ; Increment HL to point to start of data block 
11ac			    add hl, de         ; HL = HL + DE (total size) 
11ac			    ld bc, 1           ; Number of bytes to allocate for management overhead 
11ac			    add hl, bc         ; Add management overhead to start of data block 
11ac			 
11ac			    ; Save pointer to allocated block in HL 
11ac			if DEBUG_FORTH_MALLOC_HIGH 
11ac						DMARK "ma5" 
11ac			call malloc_guard_exit 
11ac			call malloc_guard_zerolen 
11ac			endif 
11ac			    ret 
11ac			 
11ac			malloc_skip_block_check: 
11ac			    ; Move to the next block 
11ac			    ld bc, 3           ; Size of management overhead 
11ac			    add hl, bc         ; Move to the next block 
11ac			    inc de             ; Increment counter 
11ac			 
11ac			    ; Check if we have reached the end of heap 
11ac			    ld a, e            ; Load low byte of heap end address 
11ac			    cp (hl)            ; Compare with low byte of current address 
11ac			    jr nz, malloc_search_loop  ; If not equal, continue searching 
11ac			    ld a, d            ; Load high byte of heap end address 
11ac			    cp 0               ; Check if it's zero (end of memory) 
11ac			    jr nz, malloc_search_loop  ; If not zero, continue searching 
11ac			 
11ac			    ; If we reached here, allocation failed 
11ac			    xor a              ; Set result to NULL 
11ac			if DEBUG_FORTH_MALLOC_HIGH 
11ac						DMARK "ma6" 
11ac			call malloc_guard_exit 
11ac			call malloc_guard_zerolen 
11ac			endif 
11ac			    ret 
11ac			malloc_exit: 
11ac			if DEBUG_FORTH_MALLOC_HIGH 
11ac						DMARK "ma7" 
11ac			call malloc_guard_exit 
11ac			call malloc_guard_zerolen 
11ac			endif 
11ac			    ret 
11ac			 
11ac			; Internal Free Function: 
11ac			; Input: 
11ac			;   HL: Pointer to memory block to free 
11ac			; Output: 
11ac			;   None 
11ac			 
11ac			free_internal: 
11ac			    ld de, (heap_start) ; Load start of heap into DE 
11ac			    ld bc, 0            ; Initialize counter 
11ac			 
11ac			free_search_loop: 
11ac			    ; Check if current block contains the pointer 
11ac			    ld a, l             ; Load low byte of pointer 
11ac			    cp (hl+1)           ; Compare with high byte of current block's address 
11ac			    jr nz, free_skip_block_check  ; If not equal, skip to the next block 
11ac			    ld a, h             ; Load high byte of pointer 
11ac			    cp (hl+2)           ; Compare with low byte of current block's address 
11ac			    jr nz, free_skip_block_check  ; If not equal, skip to the next block 
11ac			 
11ac			    ; Mark block as free 
11ac			    ld (hl), 0          ; Set status byte to indicate free block 
11ac			    ret                 ; Return 
11ac			 
11ac			free_skip_block_check: 
11ac			    ; Move to the next block 
11ac			    ld bc, 3            ; Size of management overhead 
11ac			    add hl, bc          ; Move to the next block 
11ac			    inc de              ; Increment counter 
11ac			 
11ac			    ; Check if we have reached the end of heap 
11ac			    ld a, e             ; Load low byte of heap end address 
11ac			    cp (hl)             ; Compare with low byte of current address 
11ac			    jr nz, free_search_loop  ; If not equal, continue searching 
11ac			    ld a, d             ; Load high byte of heap end address 
11ac			    cp 0                ; Check if it's zero (end of memory) 
11ac			    jr nz, free_search_loop  ; If not zero, continue searching 
11ac			 
11ac			    ; If we reached here, pointer is not found in heap 
11ac			    ret 
11ac			 
11ac			free_exit: 
11ac			    ret                 ; Return 
11ac			 
11ac			; Define heap start and end addresses 
11ac			;heap_start:    .dw 0xC000   ; Start of heap 
11ac			;heap_end:      .dw 0xE000   ; End of heap 
11ac			 
11ac			endif 
11ac			 
11ac			 
11ac			if MALLOC_1 
11ac			 
11ac			 
11ac			 
11ac			; from https://gist.github.com/tomstorey/947a8b084bad69391a4b2a1c5b6d69ca 
11ac			 
11ac			;moved to firmware.asm 
11ac			;heap_start        .equ  0x9000      ; Starting address of heap 
11ac			;heap_size         .equ  0x0100      ; Number of bytes available in heap 
11ac			 
11ac			;      .org 0 
11ac			;      jp    main 
11ac			 
11ac			 
11ac			;      .org  0x100 
11ac			;main: 
11ac			;      ld    HL, 0x8100 
11ac			;      ld    SP, HL 
11ac			; 
11ac			;      call  heap_init 
11ac			; 
11ac			;      ; Make some allocations 
11ac			;      ld    HL, 12 
11ac			;      call  malloc            ; Allocates 0x9004 
11ac			; 
11ac			;      ld    HL, 12 
11ac			;      call  malloc            ; Allocates 0x9014 
11ac			; 
11ac			;      ld    HL, 12 
11ac			;      call  malloc            ; Allocates 0x9024 
11ac			; 
11ac			;      ; Free some allocations 
11ac			;      ld    HL, 0x9014 
11ac			;      call  free 
11ac			; 
11ac			;      ld    HL, 0x9004 
11ac			;      call  free 
11ac			; 
11ac			;      ld    HL, 0x9024 
11ac			;      call  free 
11ac			; 
11ac			; 
11ac			;      halt 
11ac			 
11ac			 
11ac			;------------------------------------------------------------------------------ 
11ac			;     heap_init                                                               : 
11ac			;                                                                             : 
11ac			; Description                                                                 : 
11ac			;     Initialise the heap and make it ready for malloc and free operations.   : 
11ac			;                                                                             : 
11ac			;     The heap is maintained as a linked list, starting with an initial       : 
11ac			;     "dummy block" of zero size which is mainly used to hold a pointer to    : 
11ac			;     the first free block in the heap. Each block then points to the next    : 
11ac			;     free block within the heap, and the free list ends at the first block   : 
11ac			;     with a null pointer to the next free block.                             : 
11ac			;                                                                             : 
11ac			; Parameters                                                                  : 
11ac			;     Inputs are compile-time only. Two defines which specify the starting    : 
11ac			;     address of the heap and its size are required, along with a memory      : 
11ac			;     allocation of 4 consecutive bytes which is used for a dummy block which : 
11ac			;     principally stores a pointer to the first free block in the heap.       : 
11ac			;                                                                             : 
11ac			; Returns                                                                     : 
11ac			;     Nothing                                                                 : 
11ac			;------------------------------------------------------------------------------ 
11ac			heap_init: 
11ac e5			      push  HL 
11ad			 
11ad			      ; Initialise free list struct 
11ad 21 28 62		      ld    HL, heap_start 
11b0 22 23 62		      ld    (free_list), HL 
11b3 21 00 00		      ld    HL, 0 
11b6 22 25 62		      ld    (free_list+2), HL 
11b9			 
11b9			      ; Insert first free block at bottom of heap, consumes entire heap 
11b9 21 92 e2		      ld    HL, heap_start+heap_size-4 
11bc 22 28 62		      ld    (heap_start), HL        ; Next block (end of free list) 
11bf 21 6a 80		      ld    HL, heap_size-4 
11c2 22 2a 62		      ld    (heap_start+2), HL      ; Block size 
11c5			 
11c5			      ; Insert end of free list block at top of heap - two null words will 
11c5			      ; terminate the free list 
11c5 21 00 00		      ld    HL, 0 
11c8 22 94 e2		      ld    (heap_start+heap_size-2), HL 
11cb 22 92 e2		      ld    (heap_start+heap_size-4), HL 
11ce			 
11ce e1			      pop   HL 
11cf			 
11cf c9			      ret 
11d0			 
11d0			 
11d0			;------------------------------------------------------------------------------ 
11d0			;     malloc                                                                  : 
11d0			;                                                                             : 
11d0			; Description                                                                 : 
11d0			;     Allocates the wanted space from the heap and returns the address of the : 
11d0			;     first useable byte of the allocation.                                   : 
11d0			;                                                                             : 
11d0			;     Allocations can happen in one of two ways:                              : 
11d0			;                                                                             : 
11d0			;     1. A free block may be found which is the exact size wanted. In this    : 
11d0			;        case the block is removed from the free list and retuedn to the      : 
11d0			;        caller.                                                              : 
11d0			;     2. A free block may be found which is larger than the size wanted. In   : 
11d0			;        this case, the larger block is split into two. The first portion of  : 
11d0			;        this block will become the requested space by the malloc call and    : 
11d0			;        is returned to the caller. The second portion becomes a new free     : 
11d0			;        block, and the free list is adjusted to maintain continuity via this : 
11d0			;        newly created block.                                                 : 
11d0			;                                                                             : 
11d0			;     malloc does not set any initial value in the allocated space, the       : 
11d0			;     caller is required to do this as required.                              : 
11d0			;                                                                             : 
11d0			;     This implementation of malloc uses the stack exclusively, and is        : 
11d0			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
11d0			;     advisable to disable interrupts before calling malloc, and recommended  : 
11d0			;     to avoid the use of malloc inside ISRs in general.                      : 
11d0			;                                                                             : 
11d0			;     NOTE: heap_init must be called before malloc and free can be used.      : 
11d0			;                                                                             : 
11d0			; Parameters                                                                  : 
11d0			;     HL  Number of bytes wanted                                              : 
11d0			;                                                                             : 
11d0			; Returns                                                                     : 
11d0			;     HL  Address of the first useable byte of the allocation                 : 
11d0			;                                                                             : 
11d0			; Flags                                                                       : 
11d0			;     Z   Set if the allocation did not succeed, clear otherwise              : 
11d0			;                                                                             : 
11d0			; Stack frame                                                                 : 
11d0			;       |             |                                                       : 
11d0			;       +-------------+                                                       : 
11d0			;       |     BC      |                                                       : 
11d0			;       +-------------+                                                       : 
11d0			;       |     DE      |                                                       : 
11d0			;       +-------------+                                                       : 
11d0			;       |     IX      |                                                       : 
11d0			;       +-------------+                                                       : 
11d0			;       |  prev_free  |                                                       : 
11d0			;   +4  +-------------+                                                       : 
11d0			;       |  this_free  |                                                       : 
11d0			;   +2  +-------------+                                                       : 
11d0			;       |  next_free  |                                                       : 
11d0			;   +0  +-------------+                                                       : 
11d0			;       |             |                                                       : 
11d0			;                                                                             : 
11d0			;------------------------------------------------------------------------------ 
11d0			 
11d0			 
11d0			;malloc: 
11d0			; 
11d0			;	SAVESP ON 1 
11d0			; 
11d0			;	call malloc_code 
11d0			; 
11d0			;	CHECKSP ON 1 
11d0			;	ret 
11d0			 
11d0			 
11d0			malloc: 
11d0 c5			      push  BC 
11d1 d5			      push  DE 
11d2 dd e5		      push  IX 
11d4			if DEBUG_FORTH_MALLOC_HIGH 
11d4			call malloc_guard_entry 
11d4			endif 
11d4			 
11d4					if DEBUG_FORTH_MALLOC 
11d4						DMARK "mal" 
11d4						CALLMONITOR 
11d4					endif 
11d4 7c			      ld    A, H                    ; Exit if no space requested 
11d5 b5			      or    L 
11d6 ca 95 12		      jp    Z, malloc_early_exit 
11d9			 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			; 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			 
11d9			 
11d9			 
11d9			 
11d9					if DEBUG_FORTH_MALLOC 
11d9						DMARK "maA" 
11d9						CALLMONITOR 
11d9					endif 
11d9			      ; Set up stack frame 
11d9 eb			      ex    DE, HL 
11da 21 fa ff		      ld    HL, -6                  ; Reserve 6 bytes for stack frame 
11dd 39			      add   HL, SP 
11de f9			      ld    SP, HL 
11df dd 21 00 00	      ld    IX, 0                   ; Use IX as a frame pointer 
11e3 dd 39		      add   IX, SP 
11e5			 
11e5			      ; Setup initial state 
11e5 21 04 00		      ld    HL, 4                   ; want must also include space used by block struct 
11e8 19			      add   HL, DE 
11e9			 
11e9 44			      ld    B, H                    ; Move want to BC 
11ea 4d			      ld    C, L 
11eb			 
11eb 21 23 62		      ld    HL, free_list           ; Store prev_free ptr to stack 
11ee dd 75 04		      ld    (IX+4), L 
11f1 dd 74 05		      ld    (IX+5), H 
11f4			 
11f4 5e			      ld    E, (HL)                 ; Store this_free ptr to stack 
11f5 23			      inc   HL 
11f6 56			      ld    D, (HL) 
11f7 dd 73 02		      ld    (IX+2), E 
11fa dd 72 03		      ld    (IX+3), D 
11fd eb			      ex    DE, HL                  ; this_free ptr into HL 
11fe			 
11fe					if DEBUG_FORTH_MALLOC 
11fe						DMARK "maB" 
11fe						CALLMONITOR 
11fe					endif 
11fe			      ; Loop through free block list to find some space 
11fe			malloc_find_space: 
11fe 5e			      ld    E, (HL)                 ; Load next_free ptr into DE 
11ff 23			      inc   HL 
1200 56			      ld    D, (HL) 
1201			 
1201 7a			      ld    A, D                    ; Check for null next_free ptr - end of free list 
1202 b3			      or    E 
1203 ca 8f 12		      jp    Z, malloc_no_space 
1206			 
1206 dd 73 00		      ld    (IX+0), E               ; Store next_free ptr to stack 
1209 dd 72 01		      ld    (IX+1), D 
120c			 
120c			      ; Does this block have enough space to make the allocation? 
120c 23			      inc   HL                      ; Load free block size into DE 
120d 5e			      ld    E, (HL) 
120e 23			      inc   HL 
120f 56			      ld    D, (HL) 
1210			 
1210 eb			      ex    DE, HL                  ; Check size of block against want 
1211 b7			      or    A                       ; Ensure carry flag clear 
1212 ed 42		      sbc   HL, BC 
1214 e5			      push  HL                      ; Store the result for later (new block size) 
1215			 
1215 ca 64 12		      jp   Z, malloc_alloc_fit     ; Z means block size matches want - can allocate 
1218 30 1b		      jr    NC, malloc_alloc_split  ; NC means block is bigger than want - can allocate 
121a			 
121a			      ; this_free block is not big enough, setup ptrs to test next free block 
121a e1			      pop   HL                      ; Discard previous result 
121b			 
121b dd 6e 02		      ld    L, (IX+2)               ; Move this_free ptr into prev_free 
121e dd 66 03		      ld    H, (IX+3) 
1221 dd 75 04		      ld    (IX+4), L 
1224 dd 74 05		      ld    (IX+5), H 
1227			 
1227 dd 6e 00		      ld    L, (IX+0)               ; Move next_free ptr into this_free 
122a dd 66 01		      ld    H, (IX+1) 
122d dd 75 02		      ld    (IX+2), L 
1230 dd 74 03		      ld    (IX+3), H 
1233			 
1233					if DEBUG_FORTH_MALLOC 
1233						DMARK "MA>" 
1233						CALLMONITOR 
1233					endif 
1233 18 c9		      jr    malloc_find_space 
1235			 
1235			      ; split a bigger block into two - requested size and remaining size 
1235			malloc_alloc_split: 
1235					if DEBUG_FORTH_MALLOC 
1235						DMARK "MAs" 
1235						CALLMONITOR 
1235					endif 
1235 eb			      ex    DE, HL                  ; Calculate address of new free block 
1236 2b			      dec   HL 
1237 2b			      dec   HL 
1238 2b			      dec   HL 
1239 09			      add   HL, BC 
123a			 
123a			      ; Create a new block and point it at next_free 
123a dd 5e 00		      ld    E, (IX+0)               ; Load next_free ptr into DE 
123d dd 56 01		      ld    D, (IX+1) 
1240			 
1240 73			      ld    (HL), E                 ; Store next_free ptr into new block 
1241 23			      inc   HL 
1242 72			      ld    (HL), D 
1243			 
1243 d1			      pop   DE                      ; Store size of new block into new block 
1244 23			      inc   HL 
1245 73			      ld    (HL), E 
1246 23			      inc   HL 
1247 72			      ld    (HL), D 
1248			 
1248			      ; Update this_free ptr to point to new block 
1248 2b			      dec   HL 
1249 2b			      dec   HL 
124a 2b			      dec   HL 
124b			 
124b dd 5e 02		      ld    E, (IX+2)               ; Take a copy of current this_free ptr 
124e dd 56 03		      ld    D, (IX+3) 
1251			 
1251 dd 75 02		      ld    (IX+2), L               ; Store new block addr as this_free ptr 
1254 dd 74 03		      ld    (IX+3), H 
1257			 
1257			      ; Modify this_free block to be allocation 
1257 eb			      ex    DE, HL 
1258 af			      xor   A                       ; Null the next block ptr of allocated block 
1259 77			      ld    (HL), A 
125a 23			      inc   HL 
125b 77			      ld    (HL), A 
125c			 
125c 23			      inc   HL                      ; Store want size into allocated block 
125d 71			      ld    (HL), C 
125e 23			      inc   HL 
125f 70			      ld    (HL), B 
1260 23			      inc   HL 
1261 e5			      push  HL                      ; Address of allocation to return 
1262			 
1262 18 19		      jr    malloc_update_links 
1264			 
1264			malloc_alloc_fit: 
1264 e1			      pop   HL                      ; Dont need new block size, want is exact fit 
1265			 
1265					if DEBUG_FORTH_MALLOC 
1265						DMARK "MAf" 
1265						CALLMONITOR 
1265					endif 
1265			      ; Modify this_free block to be allocation 
1265 eb			      ex    DE, HL 
1266 2b			      dec   HL 
1267 2b			      dec   HL 
1268 2b			      dec   HL 
1269			 
1269 af			      xor   A                       ; Null the next block ptr of allocated block 
126a 77			      ld    (HL), A 
126b 23			      inc   HL 
126c 77			      ld    (HL), A 
126d			 
126d 23			      inc   HL                      ; Store address of allocation to return 
126e 23			      inc   HL 
126f 23			      inc   HL 
1270 e5			      push  HL 
1271			 
1271			      ; Copy next_free ptr to this_free, remove allocated block from free list 
1271 dd 6e 00		      ld    L, (IX+0)               ; next_free to HL 
1274 dd 66 01		      ld    H, (IX+1) 
1277			 
1277 dd 75 02		      ld    (IX+2), L               ; HL to this_free 
127a dd 74 03		      ld    (IX+3), H 
127d			 
127d			 
127d			malloc_update_links: 
127d			      ; Update prev_free ptr to point to this_free 
127d dd 6e 04		      ld    L, (IX+4)               ; prev_free ptr to HL 
1280 dd 66 05		      ld    H, (IX+5) 
1283			 
1283 dd 5e 02		      ld    E, (IX+2)               ; this_free ptr to DE 
1286 dd 56 03		      ld    D, (IX+3) 
1289			 
1289 73			      ld    (HL), E                 ; this_free ptr into prev_free 
128a 23			      inc   HL 
128b 72			      ld    (HL), D 
128c			 
128c					if DEBUG_FORTH_MALLOC 
128c						DMARK "Mul" 
128c						CALLMONITOR 
128c					endif 
128c			      ; Clear the Z flag to indicate successful allocation 
128c 7a			      ld    A, D 
128d b3			      or    E 
128e			 
128e d1			      pop   DE                      ; Address of allocation 
128f					if DEBUG_FORTH_MALLOC 
128f						DMARK "MAu" 
128f						CALLMONITOR 
128f					endif 
128f			 
128f			malloc_no_space: 
128f 21 06 00		      ld    HL, 6                   ; Clean up stack frame 
1292 39			      add   HL, SP 
1293 f9			      ld    SP, HL 
1294			 
1294 eb			      ex    DE, HL                  ; Alloc addr into HL for return 
1295					if DEBUG_FORTH_MALLOC 
1295						DMARK "MAN" 
1295						CALLMONITOR 
1295					endif 
1295			 
1295			malloc_early_exit: 
1295					if DEBUG_FORTH_MALLOC 
1295						DMARK "MAx" 
1295						CALLMONITOR 
1295					endif 
1295 dd e1		      pop   IX 
1297 d1			      pop   DE 
1298 c1			      pop   BC 
1299			 
1299			if DEBUG_FORTH_MALLOC_HIGH 
1299			call malloc_guard_exit 
1299			call malloc_guard_zerolen 
1299			endif 
1299 c9			      ret 
129a			 
129a			 
129a			;------------------------------------------------------------------------------ 
129a			;     free                                                                    : 
129a			;                                                                             : 
129a			; Description                                                                 : 
129a			;     Return the space pointed to by HL to the heap. HL must be an address as : 
129a			;     returned by malloc, otherwise the behaviour is undefined.               : 
129a			;                                                                             : 
129a			;     Where possible, directly adjacent free blocks will be merged together   : 
129a			;     into larger blocks to help ensure that the heap does not become         : 
129a			;     excessively fragmented.                                                 : 
129a			;                                                                             : 
129a			;     free does not clear or set any other value into the freed space, and    : 
129a			;     therefore its contents may be visible through subsequent malloc's. The  : 
129a			;     caller should clear the freed space as required.                        : 
129a			;                                                                             : 
129a			;     This implementation of free uses the stack exclusively, and is          : 
129a			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
129a			;     advisable to disable interrupts before calling free, and recommended    : 
129a			;     to avoid the use of free inside ISRs in general.                        : 
129a			;                                                                             : 
129a			;     NOTE: heap_init must be called before malloc and free can be used.      : 
129a			;                                                                             : 
129a			; Parameters                                                                  : 
129a			;     HL  Pointer to address of first byte of allocation to be freed          : 
129a			;                                                                             : 
129a			; Returns                                                                     : 
129a			;     Nothing                                                                 : 
129a			;                                                                             : 
129a			; Stack frame                                                                 : 
129a			;       |             |                                                       : 
129a			;       +-------------+                                                       : 
129a			;       |     BC      |                                                       : 
129a			;       +-------------+                                                       : 
129a			;       |     DE      |                                                       : 
129a			;       +-------------+                                                       : 
129a			;       |     IX      |                                                       : 
129a			;       +-------------+                                                       : 
129a			;       |  prev_free  |                                                       : 
129a			;   +2  +-------------+                                                       : 
129a			;       |  next_free  |                                                       : 
129a			;   +0  +-------------+                                                       : 
129a			;       |             |                                                       : 
129a			;                                                                             : 
129a			;------------------------------------------------------------------------------ 
129a			free: 
129a c5			      push  BC 
129b d5			      push  DE 
129c dd e5		      push  IX 
129e			 
129e 7c			      ld    A, H                    ; Exit if ptr is null 
129f b5			      or    L 
12a0 ca 64 13		      jp    Z, free_early_exit 
12a3			 
12a3			      ; Set up stack frame 
12a3 eb			      ex    DE, HL 
12a4 21 fc ff		      ld    HL, -4                  ; Reserve 4 bytes for stack frame 
12a7 39			      add   HL, SP 
12a8 f9			      ld    SP, HL 
12a9 dd 21 00 00	      ld    IX, 0                   ; Use IX as a frame pointer 
12ad dd 39		      add   IX, SP 
12af			 
12af			      ; The address in HL points to the start of the useable allocated space, 
12af			      ; but the block struct starts 4 bytes before this. Sub 4 to get the 
12af			      ; address of the block itself. 
12af eb			      ex    DE, HL 
12b0 11 fc ff		      ld    DE, -4 
12b3 19			      add   HL, DE 
12b4			 
12b4			      ; An allocated block must have a null next block pointer in it 
12b4 7e			      ld    A, (HL) 
12b5 23			      inc   HL 
12b6 b6			      or    (HL) 
12b7 c2 5f 13		      jp    NZ, free_done 
12ba			 
12ba 2b			      dec   HL 
12bb			 
12bb 44			      ld    B, H                    ; Copy HL to BC 
12bc 4d			      ld    C, L 
12bd			 
12bd			      ; Loop through the free list to find the first block with an address 
12bd			      ; higher than the block being freed 
12bd 21 23 62		      ld    HL, free_list 
12c0			 
12c0			free_find_higher_block: 
12c0 5e			      ld    E, (HL)                 ; Load next ptr from free block 
12c1 23			      inc   HL 
12c2 56			      ld    D, (HL) 
12c3 2b			      dec   HL 
12c4			 
12c4 dd 73 00		      ld    (IX+0), E               ; Save ptr to next free block 
12c7 dd 72 01		      ld    (IX+1), D 
12ca dd 75 02		      ld    (IX+2), L               ; Save ptr to prev free block 
12cd dd 74 03		      ld    (IX+3), H 
12d0			 
12d0 78			      ld    A, B                    ; Check if DE is greater than BC 
12d1 ba			      cp    D                       ; Compare MSB first 
12d2 28 02		      jr    Z, $+4                  ; MSB the same, compare LSB 
12d4 30 04		      jr    NC, free_find_higher_block_skip 
12d6 79			      ld    A, C 
12d7 bb			      cp    E                       ; Then compare LSB 
12d8 38 08		      jr    C, free_found_higher_block 
12da			 
12da			free_find_higher_block_skip: 
12da 7a			      ld    A, D                    ; Reached the end of the free list? 
12db b3			      or    E 
12dc ca 5f 13		      jp    Z, free_done 
12df			 
12df eb			      ex    DE, HL 
12e0			 
12e0 18 de		      jr    free_find_higher_block 
12e2			 
12e2			free_found_higher_block: 
12e2			      ; Insert freed block between prev and next free blocks 
12e2 71			      ld    (HL), C                 ; Point prev free block to freed block 
12e3 23			      inc   HL 
12e4 70			      ld    (HL), B 
12e5			 
12e5 60			      ld    H, B                    ; Point freed block at next free block 
12e6 69			      ld    L, C 
12e7 73			      ld    (HL), E 
12e8 23			      inc   HL 
12e9 72			      ld    (HL), D 
12ea			 
12ea			      ; Check if the freed block is adjacent to the next free block 
12ea 23			      inc   HL                      ; Load size of freed block into HL 
12eb 5e			      ld    E, (HL) 
12ec 23			      inc   HL 
12ed 56			      ld    D, (HL) 
12ee eb			      ex    DE, HL 
12ef			 
12ef 09			      add   HL, BC                  ; Add addr of freed block and its size 
12f0			 
12f0 dd 5e 00		      ld    E, (IX+0)               ; Load addr of next free block into DE 
12f3 dd 56 01		      ld    D, (IX+1) 
12f6			 
12f6 b7			      or    A                       ; Clear the carry flag 
12f7 ed 52		      sbc   HL, DE                  ; Subtract addrs to compare adjacency 
12f9 20 22		      jr    NZ, free_check_adjacent_to_prev 
12fb			 
12fb			      ; Freed block is adjacent to next, merge into one bigger block 
12fb eb			      ex    DE, HL                  ; Load next ptr from next block into DE 
12fc 5e			      ld    E, (HL) 
12fd 23			      inc   HL 
12fe 56			      ld    D, (HL) 
12ff e5			      push  HL                      ; Save ptr to next block for later 
1300			 
1300 60			      ld    H, B                    ; Store ptr from next block into freed block 
1301 69			      ld    L, C 
1302 73			      ld    (HL), E 
1303 23			      inc   HL 
1304 72			      ld    (HL), D 
1305			 
1305 e1			      pop   HL                      ; Restore ptr to next block 
1306 23			      inc   HL                      ; Load size of next block into DE 
1307 5e			      ld    E, (HL) 
1308 23			      inc   HL 
1309 56			      ld    D, (HL) 
130a d5			      push  DE                      ; Save next block size for later 
130b			 
130b 60			      ld    H, B                    ; Load size of freed block into HL 
130c 69			      ld    L, C 
130d 23			      inc   HL 
130e 23			      inc   HL 
130f 5e			      ld    E, (HL) 
1310 23			      inc   HL 
1311 56			      ld    D, (HL) 
1312 eb			      ex    DE, HL 
1313			 
1313 d1			      pop   DE                      ; Restore size of next block 
1314 19			      add   HL, DE                  ; Add sizes of both blocks 
1315 eb			      ex    DE, HL 
1316			 
1316 60			      ld    H, B                    ; Store new bigger size into freed block 
1317 69			      ld    L, C 
1318 23			      inc   HL 
1319 23			      inc   HL 
131a 73			      ld    (HL), E 
131b 23			      inc   HL 
131c 72			      ld    (HL), D 
131d			 
131d			free_check_adjacent_to_prev: 
131d			      ; Check if the freed block is adjacent to the prev free block 
131d dd 6e 02		      ld    L, (IX+2)               ; Prev free block ptr into HL 
1320 dd 66 03		      ld    H, (IX+3) 
1323			 
1323 23			      inc   HL                      ; Size of prev free block into DE 
1324 23			      inc   HL 
1325 5e			      ld    E, (HL) 
1326 23			      inc   HL 
1327 56			      ld    D, (HL) 
1328 2b			      dec   HL 
1329 2b			      dec   HL 
132a 2b			      dec   HL 
132b			 
132b 19			      add   HL, DE                  ; Add prev block addr and size 
132c			 
132c b7			      or    A                       ; Clear the carry flag 
132d ed 42		      sbc   HL, BC                  ; Subtract addrs to compare adjacency 
132f 20 2e		      jr    NZ, free_done 
1331			 
1331			      ; Freed block is adjacent to prev, merge into one bigger block 
1331 60			      ld    H, B                    ; Load next ptr from freed block into DE 
1332 69			      ld    L, C 
1333 5e			      ld    E, (HL) 
1334 23			      inc   HL 
1335 56			      ld    D, (HL) 
1336 e5			      push  HL                      ; Save freed block ptr for later 
1337			 
1337 dd 6e 02		      ld    L, (IX+2)               ; Store freed block ptr into prev block 
133a dd 66 03		      ld    H, (IX+3) 
133d 73			      ld    (HL), E 
133e 23			      inc   HL 
133f 72			      ld    (HL), D 
1340			 
1340 e1			      pop   HL                      ; Restore freed block ptr 
1341 23			      inc   HL                      ; Load size of freed block into DE 
1342 5e			      ld    E, (HL) 
1343 23			      inc   HL 
1344 56			      ld    D, (HL) 
1345 d5			      push  DE                      ; Save freed block size for later 
1346			 
1346 dd 6e 02		      ld    L, (IX+2)               ; Load size of prev block into DE 
1349 dd 66 03		      ld    H, (IX+3) 
134c 23			      inc   HL 
134d 23			      inc   HL 
134e 5e			      ld    E, (HL) 
134f 23			      inc   HL 
1350 56			      ld    D, (HL) 
1351			 
1351 e1			      pop   HL                      ; Add sizes of both blocks 
1352 19			      add   HL, DE 
1353 eb			      ex    DE, HL 
1354			 
1354 dd 6e 02		      ld    L, (IX+2)               ; Store new bigger size into prev block 
1357 dd 66 03		      ld    H, (IX+3) 
135a 23			      inc   HL 
135b 23			      inc   HL 
135c 73			      ld    (HL), E 
135d 23			      inc   HL 
135e 72			      ld    (HL), D 
135f			 
135f			free_done: 
135f 21 04 00		      ld    HL, 4                   ; Clean up stack frame 
1362 39			      add   HL, SP 
1363 f9			      ld    SP, HL 
1364			 
1364			free_early_exit: 
1364 dd e1		      pop   IX 
1366 d1			      pop   DE 
1367 c1			      pop   BC 
1368			 
1368 c9			      ret 
1369			 
1369			; moved to firmware.asm 
1369			; 
1369			;free_list         .dw   0     ; Block struct for start of free list (MUST be 4 bytes) 
1369			;                  .dw   0 
1369			 
1369			 
1369			endif 
1369			 
1369			 
1369			if MALLOC_3 
1369			; https://gist.githubusercontent.com/tomstorey/947a8b084bad69391a4b2a1c5b6d69ca/raw/5a08fb30a480d98c0deb4a6afe2d48961cc8e9d9/z80_malloc.s 
1369			;heap_start        .equ  0x9000      ; Starting address of heap 
1369			;heap_size         .equ  0x0100      ; Number of bytes available in heap 
1369			; 
1369			 ;     .org 0 
1369			  ;    jp    main 
1369			; 
1369			; 
1369			 ;     .org  0x100 
1369			;main: 
1369			 ;     ld    HL, 0x8100 
1369			  ;    ld    SP, HL 
1369			; 
1369			;      call  heap_init 
1369			 
1369			      ; Make some allocations 
1369			;      ld    HL, 12 
1369			;      call  malloc            ; Allocates 0x9004 
1369			; 
1369			 ;     ld    HL, 12 
1369			;      call  malloc            ; Allocates 0x9014 
1369			 
1369			;      ld    HL, 12 
1369			;      call  malloc            ; Allocates 0x9024 
1369			 
1369			      ; Free some allocations 
1369			;      ld    HL, 0x9014 
1369			;      call  free 
1369			 
1369			;      ld    HL, 0x9004 
1369			;      call  free 
1369			; 
1369			;      ld    HL, 0x9024 
1369			;      call  free 
1369			 
1369			 
1369			 ;     halt 
1369			 
1369			 
1369			;------------------------------------------------------------------------------ 
1369			;     heap_init                                                               : 
1369			;                                                                             : 
1369			; Description                                                                 : 
1369			;     Initialise the heap and make it ready for malloc and free operations.   : 
1369			;                                                                             : 
1369			;     The heap is maintained as a linked list, starting with an initial       : 
1369			;     "dummy block" of zero size which is mainly used to hold a pointer to    : 
1369			;     the first free block in the heap. Each block then points to the next    : 
1369			;     free block within the heap, and the free list ends at the first block   : 
1369			;     with a null pointer to the next free block.                             : 
1369			;                                                                             : 
1369			; Parameters                                                                  : 
1369			;     Inputs are compile-time only. Two defines which specify the starting    : 
1369			;     address of the heap and its size are required, along with a memory      : 
1369			;     allocation of 4 consecutive bytes which is used for a dummy block which : 
1369			;     principally stores a pointer to the first free block in the heap.       : 
1369			;                                                                             : 
1369			; Returns                                                                     : 
1369			;     Nothing                                                                 : 
1369			;------------------------------------------------------------------------------ 
1369			heap_init: 
1369			      push  HL 
1369			 
1369			      ; Initialise free list struct 
1369			      ld    HL, heap_start 
1369			      ld    (free_list), HL 
1369			      ld    HL, 0 
1369			      ld    (free_list+2), HL 
1369			 
1369			      ; Insert first free block at bottom of heap, consumes entire heap 
1369			      ld    HL, heap_start+heap_size-4 
1369			      ld    (heap_start), HL        ; Next block (end of free list) 
1369			      ld    HL, heap_size-4 
1369			      ld    (heap_start+2), HL      ; Block size 
1369			 
1369			      ; Insert end of free list block at top of heap - two null words will 
1369			      ; terminate the free list 
1369			      ld    HL, 0 
1369			      ld    (heap_start+heap_size-2), HL 
1369			      ld    (heap_start+heap_size-4), HL 
1369			 
1369			      pop   HL 
1369			 
1369			      ret 
1369			 
1369			 
1369			;------------------------------------------------------------------------------ 
1369			;     malloc                                                                  : 
1369			;                                                                             : 
1369			; Description                                                                 : 
1369			;     Allocates the wanted space from the heap and returns the address of the : 
1369			;     first useable byte of the allocation.                                   : 
1369			;                                                                             : 
1369			;     Allocations can happen in one of two ways:                              : 
1369			;                                                                             : 
1369			;     1. A free block may be found which is the exact size wanted. In this    : 
1369			;        case the block is removed from the free list and retuedn to the      : 
1369			;        caller.                                                              : 
1369			;     2. A free block may be found which is larger than the size wanted. In   : 
1369			;        this case, the larger block is split into two. The first portion of  : 
1369			;        this block will become the requested space by the malloc call and    : 
1369			;        is returned to the caller. The second portion becomes a new free     : 
1369			;        block, and the free list is adjusted to maintain continuity via this : 
1369			;        newly created block.                                                 : 
1369			;                                                                             : 
1369			;     malloc does not set any initial value in the allocated space, the       : 
1369			;     caller is required to do this as required.                              : 
1369			;                                                                             : 
1369			;     This implementation of malloc uses the stack exclusively, and is        : 
1369			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
1369			;     advisable to disable interrupts before calling malloc, and recommended  : 
1369			;     to avoid the use of malloc inside ISRs in general.                      : 
1369			;                                                                             : 
1369			;     NOTE: heap_init must be called before malloc and free can be used.      : 
1369			;                                                                             : 
1369			; Parameters                                                                  : 
1369			;     HL  Number of bytes wanted                                              : 
1369			;                                                                             : 
1369			; Returns                                                                     : 
1369			;     HL  Address of the first useable byte of the allocation                 : 
1369			;                                                                             : 
1369			; Flags                                                                       : 
1369			;     Z   Set if the allocation did not succeed, clear otherwise              : 
1369			;                                                                             : 
1369			; Stack frame                                                                 : 
1369			;       |             |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |     BC      |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |     DE      |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |     IX      |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |  prev_free  |                                                       : 
1369			;   +4  +-------------+                                                       : 
1369			;       |  this_free  |                                                       : 
1369			;   +2  +-------------+                                                       : 
1369			;       |  next_free  |                                                       : 
1369			;   +0  +-------------+                                                       : 
1369			;       |             |                                                       : 
1369			;                                                                             : 
1369			;------------------------------------------------------------------------------ 
1369			malloc: 
1369			      push  BC 
1369			      push  DE 
1369			      push  IX 
1369			 
1369			      ld    A, H                    ; Exit if no space requested 
1369			      or    L 
1369			      jp    Z, malloc_early_exit 
1369			 
1369			      ; Set up stack frame 
1369			      ex    DE, HL 
1369			      ld    HL, -6                  ; Reserve 6 bytes for stack frame 
1369			      add   HL, SP 
1369			      ld    SP, HL 
1369			      ld    IX, 0                   ; Use IX as a frame pointer 
1369			      add   IX, SP 
1369			 
1369			      ; Setup initial state 
1369			      ld    HL, 4                   ; want must also include space used by block struct 
1369			      add   HL, DE 
1369			 
1369			      ld    B, H                    ; Move want to BC 
1369			      ld    C, L 
1369			 
1369			      ld    HL, free_list           ; Store prev_free ptr to stack 
1369			      ld    (IX+4), L 
1369			      ld    (IX+5), H 
1369			 
1369			      ld    E, (HL)                 ; Store this_free ptr to stack 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      ld    (IX+2), E 
1369			      ld    (IX+3), D 
1369			      ex    DE, HL                  ; this_free ptr into HL 
1369			 
1369			      ; Loop through free block list to find some space 
1369			malloc_find_space: 
1369			      ld    E, (HL)                 ; Load next_free ptr into DE 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			 
1369			      ld    A, D                    ; Check for null next_free ptr - end of free list 
1369			      or    E 
1369			      jp    Z, malloc_no_space 
1369			 
1369			      ld    (IX+0), E               ; Store next_free ptr to stack 
1369			      ld    (IX+1), D 
1369			 
1369			      ; Does this block have enough space to make the allocation? 
1369			      inc   HL                      ; Load free block size into DE 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			 
1369			      ex    DE, HL                  ; Check size of block against want 
1369			      or    A                       ; Ensure carry flag clear 
1369			      sbc   HL, BC 
1369			      push  HL                      ; Store the result for later (new block size) 
1369			 
1369			      jr    Z, malloc_alloc_fit     ; Z means block size matches want - can allocate 
1369			      jr    NC, malloc_alloc_split  ; NC means block is bigger than want - can allocate 
1369			 
1369			      ; this_free block is not big enough, setup ptrs to test next free block 
1369			      pop   HL                      ; Discard previous result 
1369			 
1369			      ld    L, (IX+2)               ; Move this_free ptr into prev_free 
1369			      ld    H, (IX+3) 
1369			      ld    (IX+4), L 
1369			      ld    (IX+5), H 
1369			 
1369			      ld    L, (IX+0)               ; Move next_free ptr into this_free 
1369			      ld    H, (IX+1) 
1369			      ld    (IX+2), L 
1369			      ld    (IX+3), H 
1369			 
1369			      jr    malloc_find_space 
1369			 
1369			      ; split a bigger block into two - requested size and remaining size 
1369			malloc_alloc_split: 
1369			      ex    DE, HL                  ; Calculate address of new free block 
1369			      dec   HL 
1369			      dec   HL 
1369			      dec   HL 
1369			      add   HL, BC 
1369			 
1369			      ; Create a new block and point it at next_free 
1369			      ld    E, (IX+0)               ; Load next_free ptr into DE 
1369			      ld    D, (IX+1) 
1369			 
1369			      ld    (HL), E                 ; Store next_free ptr into new block 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			      pop   DE                      ; Store size of new block into new block 
1369			      inc   HL 
1369			      ld    (HL), E 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			      ; Update this_free ptr to point to new block 
1369			      dec   HL 
1369			      dec   HL 
1369			      dec   HL 
1369			 
1369			      ld    E, (IX+2)               ; Take a copy of current this_free ptr 
1369			      ld    D, (IX+3) 
1369			 
1369			      ld    (IX+2), L               ; Store new block addr as this_free ptr 
1369			      ld    (IX+3), H 
1369			 
1369			      ; Modify this_free block to be allocation 
1369			      ex    DE, HL 
1369			      xor   A                       ; Null the next block ptr of allocated block 
1369			      ld    (HL), A 
1369			      inc   HL 
1369			      ld    (HL), A 
1369			 
1369			      inc   HL                      ; Store want size into allocated block 
1369			      ld    (HL), C 
1369			      inc   HL 
1369			      ld    (HL), B 
1369			      inc   HL 
1369			      push  HL                      ; Address of allocation to return 
1369			 
1369			      jr    malloc_update_links 
1369			 
1369			malloc_alloc_fit: 
1369			      pop   HL                      ; Dont need new block size, want is exact fit 
1369			 
1369			      ; Modify this_free block to be allocation 
1369			      ex    DE, HL 
1369			      dec   HL 
1369			      dec   HL 
1369			      dec   HL 
1369			 
1369			      xor   A                       ; Null the next block ptr of allocated block 
1369			      ld    (HL), A 
1369			      inc   HL 
1369			      ld    (HL), A 
1369			 
1369			      inc   HL                      ; Store address of allocation to return 
1369			      inc   HL 
1369			      inc   HL 
1369			      push  HL 
1369			 
1369			      ; Copy next_free ptr to this_free, remove allocated block from free list 
1369			      ld    L, (IX+0)               ; next_free to HL 
1369			      ld    H, (IX+1) 
1369			 
1369			      ld    (IX+2), L               ; HL to this_free 
1369			      ld    (IX+3), H 
1369			 
1369			 
1369			malloc_update_links: 
1369			      ; Update prev_free ptr to point to this_free 
1369			      ld    L, (IX+4)               ; prev_free ptr to HL 
1369			      ld    H, (IX+5) 
1369			 
1369			      ld    E, (IX+2)               ; this_free ptr to DE 
1369			      ld    D, (IX+3) 
1369			 
1369			      ld    (HL), E                 ; this_free ptr into prev_free 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			      ; Clear the Z flag to indicate successful allocation 
1369			      ld    A, D 
1369			      or    E 
1369			 
1369			      pop   DE                      ; Address of allocation 
1369			 
1369			malloc_no_space: 
1369			      ld    HL, 6                   ; Clean up stack frame 
1369			      add   HL, SP 
1369			      ld    SP, HL 
1369			 
1369			      ex    DE, HL                  ; Alloc addr into HL for return 
1369			 
1369			malloc_early_exit: 
1369			      pop   IX 
1369			      pop   DE 
1369			      pop   BC 
1369			 
1369			      ret 
1369			 
1369			 
1369			;------------------------------------------------------------------------------ 
1369			;     free                                                                    : 
1369			;                                                                             : 
1369			; Description                                                                 : 
1369			;     Return the space pointed to by HL to the heap. HL must be an address as : 
1369			;     returned by malloc, otherwise the behaviour is undefined.               : 
1369			;                                                                             : 
1369			;     Where possible, directly adjacent free blocks will be merged together   : 
1369			;     into larger blocks to help ensure that the heap does not become         : 
1369			;     excessively fragmented.                                                 : 
1369			;                                                                             : 
1369			;     free does not clear or set any other value into the freed space, and    : 
1369			;     therefore its contents may be visible through subsequent malloc's. The  : 
1369			;     caller should clear the freed space as required.                        : 
1369			;                                                                             : 
1369			;     This implementation of free uses the stack exclusively, and is          : 
1369			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
1369			;     advisable to disable interrupts before calling free, and recommended    : 
1369			;     to avoid the use of free inside ISRs in general.                        : 
1369			;                                                                             : 
1369			;     NOTE: heap_init must be called before malloc and free can be used.      : 
1369			;                                                                             : 
1369			; Parameters                                                                  : 
1369			;     HL  Pointer to address of first byte of allocation to be freed          : 
1369			;                                                                             : 
1369			; Returns                                                                     : 
1369			;     Nothing                                                                 : 
1369			;                                                                             : 
1369			; Stack frame                                                                 : 
1369			;       |             |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |     BC      |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |     DE      |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |     IX      |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |  prev_free  |                                                       : 
1369			;   +2  +-------------+                                                       : 
1369			;       |  next_free  |                                                       : 
1369			;   +0  +-------------+                                                       : 
1369			;       |             |                                                       : 
1369			;                                                                             : 
1369			;------------------------------------------------------------------------------ 
1369			free: 
1369			      push  BC 
1369			      push  DE 
1369			      push  IX 
1369			 
1369			      ld    A, H                    ; Exit if ptr is null 
1369			      or    L 
1369			      jp    Z, free_early_exit 
1369			 
1369			      ; Set up stack frame 
1369			      ex    DE, HL 
1369			      ld    HL, -4                  ; Reserve 4 bytes for stack frame 
1369			      add   HL, SP 
1369			      ld    SP, HL 
1369			      ld    IX, 0                   ; Use IX as a frame pointer 
1369			      add   IX, SP 
1369			 
1369			      ; The address in HL points to the start of the useable allocated space, 
1369			      ; but the block struct starts 4 bytes before this. Sub 4 to get the 
1369			      ; address of the block itself. 
1369			      ex    DE, HL 
1369			      ld    DE, -4 
1369			      add   HL, DE 
1369			 
1369			      ; An allocated block must have a null next block pointer in it 
1369			      ld    A, (HL) 
1369			      inc   HL 
1369			      or    (HL) 
1369			      jp    NZ, free_done 
1369			 
1369			      dec   HL 
1369			 
1369			      ld    B, H                    ; Copy HL to BC 
1369			      ld    C, L 
1369			 
1369			      ; Loop through the free list to find the first block with an address 
1369			      ; higher than the block being freed 
1369			      ld    HL, free_list 
1369			 
1369			free_find_higher_block: 
1369			      ld    E, (HL)                 ; Load next ptr from free block 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      dec   HL 
1369			 
1369			      ld    (IX+0), E               ; Save ptr to next free block 
1369			      ld    (IX+1), D 
1369			      ld    (IX+2), L               ; Save ptr to prev free block 
1369			      ld    (IX+3), H 
1369			 
1369			      ld    A, B                    ; Check if DE is greater than BC 
1369			      cp    D                       ; Compare MSB first 
1369			      jr    Z, $+4                  ; MSB the same, compare LSB 
1369			      jr    NC, free_find_higher_block_skip 
1369			      ld    A, C 
1369			      cp    E                       ; Then compare LSB 
1369			      jr    C, free_found_higher_block 
1369			 
1369			free_find_higher_block_skip: 
1369			      ld    A, D                    ; Reached the end of the free list? 
1369			      or    E 
1369			      jp    Z, free_done 
1369			 
1369			      ex    DE, HL 
1369			 
1369			      jr    free_find_higher_block 
1369			 
1369			free_found_higher_block: 
1369			      ; Insert freed block between prev and next free blocks 
1369			      ld    (HL), C                 ; Point prev free block to freed block 
1369			      inc   HL 
1369			      ld    (HL), B 
1369			 
1369			      ld    H, B                    ; Point freed block at next free block 
1369			      ld    L, C 
1369			      ld    (HL), E 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			      ; Check if the freed block is adjacent to the next free block 
1369			      inc   HL                      ; Load size of freed block into HL 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      ex    DE, HL 
1369			 
1369			      add   HL, BC                  ; Add addr of freed block and its size 
1369			 
1369			      ld    E, (IX+0)               ; Load addr of next free block into DE 
1369			      ld    D, (IX+1) 
1369			 
1369			      or    A                       ; Clear the carry flag 
1369			      sbc   HL, DE                  ; Subtract addrs to compare adjacency 
1369			      jr    NZ, free_check_adjacent_to_prev 
1369			 
1369			      ; Freed block is adjacent to next, merge into one bigger block 
1369			      ex    DE, HL                  ; Load next ptr from next block into DE 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      push  HL                      ; Save ptr to next block for later 
1369			 
1369			      ld    H, B                    ; Store ptr from next block into freed block 
1369			      ld    L, C 
1369			      ld    (HL), E 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			      pop   HL                      ; Restore ptr to next block 
1369			      inc   HL                      ; Load size of next block into DE 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      push  DE                      ; Save next block size for later 
1369			 
1369			      ld    H, B                    ; Load size of freed block into HL 
1369			      ld    L, C 
1369			      inc   HL 
1369			      inc   HL 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      ex    DE, HL 
1369			 
1369			      pop   DE                      ; Restore size of next block 
1369			      add   HL, DE                  ; Add sizes of both blocks 
1369			      ex    DE, HL 
1369			 
1369			      ld    H, B                    ; Store new bigger size into freed block 
1369			      ld    L, C 
1369			      inc   HL 
1369			      inc   HL 
1369			      ld    (HL), E 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			free_check_adjacent_to_prev: 
1369			      ; Check if the freed block is adjacent to the prev free block 
1369			      ld    L, (IX+2)               ; Prev free block ptr into HL 
1369			      ld    H, (IX+3) 
1369			 
1369			      inc   HL                      ; Size of prev free block into DE 
1369			      inc   HL 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      dec   HL 
1369			      dec   HL 
1369			      dec   HL 
1369			 
1369			      add   HL, DE                  ; Add prev block addr and size 
1369			 
1369			      or    A                       ; Clear the carry flag 
1369			      sbc   HL, BC                  ; Subtract addrs to compare adjacency 
1369			      jr    NZ, free_done 
1369			 
1369			      ; Freed block is adjacent to prev, merge into one bigger block 
1369			      ld    H, B                    ; Load next ptr from freed block into DE 
1369			      ld    L, C 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      push  HL                      ; Save freed block ptr for later 
1369			 
1369			      ld    L, (IX+2)               ; Store freed block ptr into prev block 
1369			      ld    H, (IX+3) 
1369			      ld    (HL), E 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			      pop   HL                      ; Restore freed block ptr 
1369			      inc   HL                      ; Load size of freed block into DE 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      push  DE                      ; Save freed block size for later 
1369			 
1369			      ld    L, (IX+2)               ; Load size of prev block into DE 
1369			      ld    H, (IX+3) 
1369			      inc   HL 
1369			      inc   HL 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			 
1369			      pop   HL                      ; Add sizes of both blocks 
1369			      add   HL, DE 
1369			      ex    DE, HL 
1369			 
1369			      ld    L, (IX+2)               ; Store new bigger size into prev block 
1369			      ld    H, (IX+3) 
1369			      inc   HL 
1369			      inc   HL 
1369			      ld    (HL), E 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			free_done: 
1369			      ld    HL, 4                   ; Clean up stack frame 
1369			      add   HL, SP 
1369			      ld    SP, HL 
1369			 
1369			free_early_exit: 
1369			      pop   IX 
1369			      pop   DE 
1369			      pop   BC 
1369			 
1369			      ret 
1369			 
1369			 
1369			;      .org 0x8000 
1369			; 
1369			;free_list         .dw   0     ; Block struct for start of free list (MUST be 4 bytes) 
1369			 ;                 .dw   0 
1369			 
1369			endif 
1369			 
1369			 
1369			if MALLOC_4 
1369			 
1369			; My memory allocation code. Very very simple.... 
1369			; allocate space under 250 chars 
1369			 
1369			heap_init: 
1369				; init start of heap as zero 
1369				;  
1369			 
1369				ld hl, heap_start 
1369				ld a, 0 
1369				ld (hl), a      ; empty block 
1369				inc hl 
1369				ld a, 0 
1369				ld (hl), a      ; length of block 
1369				; write end of list 
1369				inc hl 
1369				ld a,(hl) 
1369				inc hl 
1369				ld a,(hl) 
1369				 
1369			 
1369				; init some malloc vars 
1369			 
1369				ld hl, 0 
1369				ld (free_list), hl       ; store last malloc location 
1369			 
1369				ld hl, free_list+3      ; flag for 'free' being used and force a rescan for reuse of block  
1369				ld a, 0 
1369				ld (hl), a 
1369			 
1369			 
1369				ld hl, heap_start 
1369				;  
1369				  
1369				ret 
1369			 
1369			 
1369			;    free block marker 
1369			;    requested size  
1369			;    pointer to next block 
1369			;    .... 
1369			;    next block marker 
1369			 
1369			 
1369			; TODO add a flag that is reset on use of free. if flag is reset then start scan from start of heap otherwise use last location 
1369			; 
1369			 
1369			 
1369			malloc:  
1369				push de 
1369				push bc 
1369				push af 
1369			 
1369				; hl space required 
1369				 
1369				ld c, l    ; hold space   (TODO only a max of 255) 
1369			 
1369			;	inc c     ; TODO BUG need to fix memory leak on push str 
1369			;	inc c 
1369			;	inc c 
1369			;	inc c 
1369			;	inc c 
1369			;	inc c 
1369			;	inc c 
1369			 
1369			 
1369			 
1369				; start at heap if a free has been issued so we can reclaim it otherwise continue from last time 
1369			 
1369				ld a, (free_list+3) 
1369				cp 0 
1369				jr z, .contheap 
1369			 
1369				ld hl, (free_list)     ; get last alloc 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "mrs" 
1369						CALLMONITOR 
1369					endif 
1369				jr .startalloc 
1369			 
1369			.contheap: 
1369				ld hl, heap_start 
1369			 
1369			.startalloc: 
1369			 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "mym" 
1369						CALLMONITOR 
1369					endif 
1369			.findblock: 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "mmf" 
1369						CALLMONITOR 
1369					endif 
1369			 
1369				ld a,(hl)  
1369				; if byte is zero then clear to use 
1369			 
1369				cp 0 
1369				jr z, .foundemptyblock 
1369			 
1369				; if byte is not clear 
1369				;     then byte is offset to next block 
1369			 
1369				inc hl 
1369				ld a, (hl) ; get size 
1369			.nextblock:	inc hl 
1369					ld e, (hl) 
1369					inc hl 
1369					ld d, (hl) 
1369					ex de, hl 
1369			;	inc hl  ; move past the store space 
1369			;	inc hl  ; move past zero index  
1369			 
1369				; TODO detect no more space 
1369			 
1369				push hl 
1369				ld de, heap_end 
1369				call cmp16 
1369				pop hl 
1369				jr nc, .nospace 
1369			 
1369				jr .findblock 
1369			 
1369			.nospace: ld hl, 0 
1369				jp .exit 
1369			 
1369			 
1369			.foundemptyblock:	 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "mme" 
1369						CALLMONITOR 
1369					endif 
1369			 
1369			; TODO has block enough space if reusing??? 
1369			 
1369				;  
1369			 
1369			; see if this block has been previously used 
1369				inc hl 
1369				ld a, (hl) 
1369				dec hl 
1369				cp 0 
1369				jr z, .newblock 
1369			 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "meR" 
1369						CALLMONITOR 
1369					endif 
1369			 
1369			; no reusing previously allocated block 
1369			 
1369			; is it smaller than previously used? 
1369				 
1369				inc hl    ; move to size 
1369				ld a, c 
1369				sub (hl)        ; we want c < (hl) 
1369				dec hl    ; move back to marker 
1369			        jr z, .findblock 
1369			 
1369				; update with the new size which should be lower 
1369			 
1369			        ;inc  hl   ; negate next move. move back to size  
1369			 
1369			.newblock: 
1369				; need to be at marker here 
1369			 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "meN" 
1369						CALLMONITOR 
1369					endif 
1369			 
1369			 
1369				ld a, c 
1369			 
1369				ld (free_list+3), a	 ; flag resume from last malloc  
1369				ld (free_list), hl    ; save out last location 
1369			 
1369			 
1369				;inc a     ; space for length byte 
1369				ld (hl), a     ; save block in use marker 
1369			 
1369				inc hl   ; move to space marker 
1369				ld (hl), a    ; save new space 
1369			 
1369				inc hl   ; move to start of allocated area 
1369				 
1369			;	push hl     ; save where we are - 1  
1369			 
1369			;	inc hl  ; move past zero index  
1369				; skip space to set down new marker 
1369			 
1369				; provide some extra space for now 
1369			 
1369				inc a    ; actual is one fewer than bytes requested. correct if zero index is taken into account 
1369				inc a 
1369				inc a 
1369			 
1369				push hl   ; save where we are in the node block 
1369			 
1369				call addatohl 
1369			 
1369				; write linked list point 
1369			 
1369				pop de     ; get our node position 
1369				ex de, hl 
1369			 
1369				ld (hl), e 
1369				inc hl 
1369				ld (hl), d 
1369			 
1369				inc hl 
1369			 
1369				; now at start of allocated data so save pointer 
1369			 
1369				push hl 
1369			 
1369				; jump to position of next node and setup empty header in DE 
1369			 
1369				ex de, hl 
1369			 
1369			;	inc hl ; move past end of block 
1369			 
1369				ld a, 0 
1369				ld (hl), a   ; empty marker 
1369				inc hl 
1369				ld (hl), a   ; size 
1369				inc hl  
1369				ld (hl), a   ; ptr 
1369				inc hl 
1369				ld (hl), a   ; ptr 
1369			 
1369			 
1369				pop hl 
1369			 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "mmr" 
1369						CALLMONITOR 
1369					endif 
1369			 
1369			.exit: 
1369				pop af 
1369				pop bc 
1369				pop de  
1369				ret 
1369			 
1369			 
1369			 
1369			 
1369			free:  
1369				push hl 
1369				push af 
1369				; get address in hl 
1369			 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "fre" 
1369						CALLMONITOR 
1369					endif 
1369				; data is at hl - move to block count 
1369				dec hl 
1369				dec hl    ; get past pointer 
1369				dec hl 
1369			 
1369				ld a, (hl)    ; need this for a validation check 
1369			 
1369				dec hl    ; move to block marker 
1369			 
1369				; now check that the block count and block marker are the same  
1369			        ; this checks that we are on a malloc node and not random memory 
1369			        ; OK a faint chance this could be a problem but rare - famous last words! 
1369			 
1369				ld c, a 
1369				ld a, (hl)    
1369			 
1369				cp c 
1369				jr nz, .freeignore      ; not a valid malloc node in use so dont break anything 
1369			 
1369				; yes good chance we are on a malloc node 
1369			 
1369				ld a, 0      
1369				ld (hl), a   ; mark as free 
1369			 
1369				ld (free_list+3), a	 ; flag reuse of existing block on next malloc 
1369			 
1369			.freeignore:  
1369			 
1369				pop af 
1369				pop hl 
1369			 
1369				ret 
1369			 
1369			 
1369			 
1369			endif 
1369			 
1369			; eof 
# End of file firmware_memory.asm
1369			  
1369			; device C  
1369			; Now handled by SPI  
1369			;if SOUND_ENABLE  
1369			;	include "firmware_sound.asm"  
1369			;endif  
1369			  
1369			include "firmware_diags.asm"  
1369			; Hardware diags menu 
1369			 
1369			 
1369			config: 
1369			 
1369 3e 00			ld a, 0 
136b 21 8f 13			ld hl, .configmn 
136e cd f9 0b			call menu 
1371			 
1371 fe 00			cp 0 
1373 c8				ret z 
1374			 
1374			;	cp 1 
1374			;	call z, .savetostore 
1374			 
1374 fe 01			cp 1 
1376			if STARTUP_V1 
1376 cc a5 13			call z, .selautoload 
1379			endif 
1379			 
1379			if STARTUP_V2 
1379				call z, .enautoload 
1379			endif 
1379 fe 02			cp 2 
137b cc 9b 13			call z, .disautoload 
137e			;	cp 3 
137e			;	call z, .selbank 
137e fe 03			cp 3 
1380 cc c3 13			call z, .debug_tog 
1383 fe 04			cp 4 
1385 cc 11 15			call z, .bpsgo 
1388 fe 05			cp 5 
138a cc ec 13			call z, hardware_diags 
138d			if STARTUP_V2 
138d				cp 6 
138d				call z, create_startup 
138d			endif 
138d 18 da			jr config 
138f			 
138f			.configmn: 
138f			;	dw prom_c3 
138f ff 16			dw prom_c2 
1391 14 17			dw prom_c2a 
1393			;	dw prom_c2b 
1393			;	dw prom_c4 
1393 33 17			dw prom_m4 
1395 4e 17			dw prom_m4b 
1397 56 17			dw prom_c1 
1399			if STARTUP_V2 
1399				dw prom_c9 
1399			endif 
1399 00 00			dw 0 
139b				 
139b			 
139b			if STARTUP_V2 
139b			.enautoload: 
139b				if STORAGE_SE 
139b				ld a, $fe      ; bit 0 clear 
139b				ld (spi_device), a 
139b			 
139b				call storage_get_block_0 
139b			 
139b				ld a, 1 
139b				ld (store_page+STORE_0_AUTOFILE), a 
139b			 
139b					ld hl, 0 
139b					ld de, store_page 
139b				call storage_write_block	 ; save update 
139b				else 
139b			 
139b				ld hl, prom_notav 
139b				ld de, prom_empty 
139b				call info_panel 
139b				endif 
139b			 
139b			 
139b				ret 
139b			endif 
139b			 
139b			.disautoload: 
139b				if STORAGE_SE 
139b				ld a, $fe      ; bit 0 clear 
139b				ld (spi_device), a 
139b			 
139b				call storage_get_block_0 
139b			 
139b				ld a, 0 
139b				ld (store_page+STORE_0_AUTOFILE), a 
139b			 
139b					ld hl, 0 
139b					ld de, store_page 
139b				call storage_write_block	 ; save update 
139b				else 
139b			 
139b 21 65 17			ld hl, prom_notav 
139e 11 7b 17			ld de, prom_empty 
13a1 cd 59 0b			call info_panel 
13a4				endif 
13a4			 
13a4			 
13a4 c9				ret 
13a5			 
13a5			if STARTUP_V1 
13a5			 
13a5			; Select auto start 
13a5			 
13a5			.selautoload: 
13a5			 
13a5				 
13a5				if STORAGE_SE 
13a5			 
13a5					call config_dir 
13a5				        ld hl, scratch 
13a5					ld a, 0 
13a5					call menu 
13a5			 
13a5					cp 0 
13a5					ret z 
13a5			 
13a5					dec a 
13a5			 
13a5			 
13a5					; locate menu option 
13a5			 
13a5					ld hl, scratch 
13a5					call table_lookup 
13a5			 
13a5					if DEBUG_FORTH_WORDS 
13a5						DMARK "ALl" 
13a5						CALLMONITOR 
13a5					endif 
13a5					; with the pointer to the menu it, the byte following the zero term is the file id 
13a5			 
13a5					ld a, 0 
13a5					ld bc, 50   ; max of bytes to look at 
13a5					cpir  
13a5			 
13a5					if DEBUG_FORTH_WORDS 
13a5						DMARK "ALb" 
13a5						CALLMONITOR 
13a5					endif 
13a5					;inc hl 
13a5			 
13a5					ld a, (hl)   ; file id 
13a5					 
13a5				        ; save bank and file ids 
13a5			 
13a5					push af 
13a5			 
13a5			; TODO need to save to block 0 on bank 1	 
13a5			 
13a5					call storage_get_block_0 
13a5			 
13a5					if DEBUG_FORTH_WORDS 
13a5						DMARK "AL0" 
13a5						CALLMONITOR 
13a5					endif 
13a5					pop af 
13a5			 
13a5					ld (store_page+STORE_0_FILERUN),a 
13a5					 
13a5					; save bank id 
13a5			 
13a5					ld a,(spi_device) 
13a5					ld (store_page+STORE_0_BANKRUN),a 
13a5			 
13a5					; enable auto run of store file 
13a5			 
13a5					ld a, 1 
13a5					ld (store_page+STORE_0_AUTOFILE),a 
13a5			 
13a5					; save buffer 
13a5			 
13a5					ld hl, 0 
13a5					ld de, store_page 
13a5					if DEBUG_FORTH_WORDS 
13a5						DMARK "ALw" 
13a5						CALLMONITOR 
13a5					endif 
13a5				call storage_write_block	 ; save update 
13a5			  
13a5			 
13a5			 
13a5			 
13a5					ld hl, scratch 
13a5					call config_fdir 
13a5			 
13a5				else 
13a5			 
13a5 21 65 17			ld hl, prom_notav 
13a8 11 7b 17			ld de, prom_empty 
13ab cd 59 0b			call info_panel 
13ae			 
13ae				endif 
13ae c9				ret 
13af			endif 
13af			 
13af			 
13af			; Select storage bank 
13af			 
13af			.selbank: 
13af			 
13af			;	if STORAGE_SE 
13af			;	else 
13af			 
13af 21 65 17			ld hl, prom_notav 
13b2 11 7b 17			ld de, prom_empty 
13b5 cd 59 0b			call info_panel 
13b8			;	endif 
13b8				 
13b8 c9				ret 
13b9			 
13b9			if STORAGE_SE 
13b9			 
13b9			.config_ldir:   
13b9				; Load storage bank labels into menu array 
13b9			 
13b9				 
13b9			 
13b9			 
13b9				ret 
13b9			 
13b9			 
13b9			endif 
13b9			 
13b9			 
13b9			; Save user words to storage 
13b9			 
13b9			.savetostore: 
13b9			 
13b9			;	if STORAGE_SE 
13b9			; 
13b9			;		call config_dir 
13b9			;	        ld hl, scratch 
13b9			;		ld a, 0 
13b9			;		call menu 
13b9			;		 
13b9			;		ld hl, scratch 
13b9			;		call config_fdir 
13b9			; 
13b9			;	else 
13b9			 
13b9 21 65 17			ld hl, prom_notav 
13bc 11 7b 17			ld de, prom_empty 
13bf cd 59 0b			call info_panel 
13c2			 
13c2			;	endif 
13c2			 
13c2 c9				ret 
13c3			 
13c3			if STARTUP_V2 
13c3			 
13c3			create_startup: 
13c3			 
13c3				ld a, 0 
13c3				ld hl, .crstart 
13c3				call menu 
13c3			 
13c3				cp 0 
13c3				ret z 
13c3			 
13c3				cp 1 
13c3				call z, .genlsword 
13c3				cp 2 
13c3				call z, .genedword 
13c3			 
13c3				cp 3 
13c3				call z, .gendemword 
13c3			 
13c3				cp 4 
13c3				call z, .genutlword 
13c3				cp 5 
13c3				call z, .genspiword 
13c3				cp 6 
13c3				call z, .genkeyword 
13c3				cp 7 
13c3				call z, .gensoundword 
13c3				cp 8 
13c3				call z, .genhwword 
13c3				jr create_startup 
13c3			 
13c3			.genhwword: 
13c3				ld hl, crs_hw 
13c3				ld de, .hwworddef 
13c3				call .genfile 
13c3				ret 
13c3			.gensoundword: 
13c3				ld hl, crs_sound 
13c3				ld de, .soundworddef 
13c3				call .genfile 
13c3				ret 
13c3			.genlsword: 
13c3				ld hl, crs_s1 
13c3				ld de, .lsworddef 
13c3				call .genfile 
13c3				ret 
13c3			 
13c3			.genedword: 
13c3				ld de, .edworddef 
13c3				ld hl, crs_s2 
13c3				call .genfile 
13c3				ret 
13c3			 
13c3			.gendemword: 
13c3				ld de, .demoworddef 
13c3				ld hl, crs_s3 
13c3				call .genfile 
13c3				ret 
13c3			 
13c3			.genutlword: 
13c3				ld hl, crs_s4 
13c3				ld de, .utilwordef 
13c3				call .genfile 
13c3				ret 
13c3			.genspiword: 
13c3				ld hl, crs_s5 
13c3				ld de, .spiworddef 
13c3				call .genfile 
13c3				ret 
13c3			.genkeyword: 
13c3				ld hl, crs_s6 
13c3				ld de, .keyworddef 
13c3				call .genfile 
13c3				ret 
13c3			 
13c3			; hl - points to file name 
13c3			; de - points to strings to add to file 
13c3			 
13c3			.genfile: 
13c3				push hl 
13c3				push de 
13c3			 
13c3				call clear_display 
13c3				ld a, display_row_1 
13c3				ld de, .genfiletxt 
13c3				call str_at_display 
13c3				call update_display 
13c3			 
13c3				pop de 
13c3				pop hl 
13c3			 
13c3			 
13c3				push de 
13c3				call storage_create 
13c3				; id in hl 
13c3				pop de   ; table of strings to add 
13c3			 
13c3			.genloop: 
13c3			 
13c3				push hl ; save id for next time around 
13c3				push de ; save de for next time around 
13c3			 
13c3				ex de, hl 
13c3				call loadwordinhl 
13c3				ex de, hl 
13c3			 
13c3				; need hl to be the id 
13c3				; need de to be the string ptr 
13c3				 
13c3				call storage_append 
13c3			 
13c3				pop de 
13c3				pop hl 
13c3			 
13c3				inc de 
13c3				inc de 
13c3			 
13c3				ld a,(de) 
13c3				cp 0 
13c3				jr nz, .genloop 
13c3				inc de 
13c3				ld a, (de) 
13c3				dec de 
13c3				cp 0 
13c3				jr nz, .genloop	 
13c3			 
13c3				ret 
13c3			 
13c3			.genfiletxt:  db "Creating file...",0 
13c3			 
13c3			.hwworddef: 
13c3				dw test5 
13c3				dw test6 
13c3				dw test7 
13c3				dw test8 
13c3				dw test9 
13c3				dw test10 
13c3				dw 0 
13c3			 
13c3			.soundworddef: 
13c3				dw sound1 
13c3				dw sound2 
13c3				dw sound3 
13c3				dw sound4 
13c3				dw sound5 
13c3				dw sound6 
13c3				dw sound7 
13c3				dw sound8 
13c3				dw sound9 
13c3				dw 0 
13c3			 
13c3			.utilwordef: 
13c3				dw strncpy 
13c3				dw type 
13c3				dw tuck 
13c3				dw clrstack 
13c3				dw longread 
13c3				dw start1 
13c3				dw start2 
13c3			; duplicated 
13c3			;	dw start3b 
13c3			;	dw start3c 
13c3				dw list 
13c3				dw 0 
13c3			 
13c3			.lsworddef: 
13c3				dw start3b 
13c3				dw 0 
13c3			 
13c3			.edworddef: 
13c3				dw edit1 
13c3				dw edit2 
13c3				dw edit3 
13c3				dw 0 
13c3			 
13c3			.demoworddef: 
13c3				dw game1 
13c3				dw game1a 
13c3				dw game1b 
13c3				dw game1c 
13c3				dw game1d 
13c3				dw game1s 
13c3				dw game1t 
13c3				dw game1f 
13c3				dw game1z 
13c3				dw game1zz 
13c3				dw ssv2 
13c3				dw ssv3 
13c3				dw ssv4 
13c3				dw ssv5 
13c3				dw ssv1 
13c3				dw ssv1cpm	 
13c3			;	dw game2b 
13c3			;	dw game2bf 
13c3			;	dw game2mba 
13c3			;	dw game2mbas	 
13c3			;	dw game2mbht 
13c3			;	dw game2mbms 
13c3			;	dw game2mb 
13c3			;	dw game3w 
13c3			;	dw game3p 
13c3			;	dw game3sc 
13c3			;	dw game3vsi 
13c3			;	dw game3vs 
13c3				dw 0 
13c3			 
13c3			 
13c3			.spiworddef: 
13c3			 
13c3			    dw spi1 
13c3			    dw spi2 
13c3			    dw spi2b 
13c3			    dw spi3 
13c3			    dw spi4 
13c3			    dw spi5 
13c3			;    dw spi6 
13c3			;    dw spi7 
13c3			 
13c3			;    dw spi8 
13c3			;    dw spi9 
13c3			;    dw spi10 
13c3			    dw 0 
13c3			 
13c3			.keyworddef: 
13c3			 
13c3				dw keyup 
13c3				dw keydown 
13c3				dw keyleft 
13c3				dw keyright 
13c3				dw 	keyf1 
13c3				dw keyf2 
13c3				dw keyf3 
13c3				dw keyf4 
13c3				dw keyf5 
13c3				dw keyf6 
13c3				dw keyf7 
13c3				dw keyf8 
13c3				dw keyf9 
13c3				dw keyf10 
13c3				dw keyf11 
13c3				dw keyf12 
13c3				dw keytab 
13c3				dw keycr 
13c3				dw keyhome 
13c3				dw keyend 
13c3				dw keybs 
13c3				dw 0 
13c3			 
13c3			.crstart: 
13c3				dw crs_s1 
13c3				dw crs_s2 
13c3				dw crs_s3 
13c3				dw crs_s4 
13c3				dw crs_s5 
13c3				dw crs_s6 
13c3				dw crs_sound 
13c3				dw crs_hw 
13c3				dw 0 
13c3			 
13c3			endif 
13c3			 
13c3			 
13c3			if STORAGE_SE 
13c3			 
13c3			config_fdir: 
13c3				; using the scratch dir go through and release the memory allocated for each string 
13c3				 
13c3				ld hl, scratch 
13c3			.cfdir:	ld e,(hl) 
13c3				inc hl 
13c3				ld d,(hl) 
13c3				inc hl 
13c3			 
13c3				ex de, hl 
13c3				call ishlzero 
13c3				ret z     ; return on null pointer 
13c3				call free 
13c3				ex de, hl 
13c3				jr .cfdir 
13c3			 
13c3			 
13c3				ret 
13c3			 
13c3			 
13c3			config_dir: 
13c3			 
13c3				; for the config menus that need to build a directory of storage call this routine 
13c3				; it will construct a menu in scratch to pass to menu 
13c3			 
13c3				; open storage device 
13c3			 
13c3				; execute DIR to build a list of files and their ids into scratch in menu format 
13c3				; once the menu has finished then will need to call config_fdir to release the strings 
13c3				 
13c3				; c = number items 
13c3			 
13c3				 
13c3				call storage_get_block_0 
13c3			 
13c3				ld hl, store_page     ; get current id count 
13c3				ld b, (hl) 
13c3				ld c, 0    ; count of files   
13c3			 
13c3			 
13c3				ld hl, scratch 
13c3				ld (store_tmp2), hl    ; location to poke strings 
13c3			 
13c3				; check for empty drive 
13c3			 
13c3				ld a, 0 
13c3				cp b 
13c3				jp z, .dirdone 
13c3			 
13c3				 
13c3					if DEBUG_FORTH_WORDS 
13c3						DMARK "Cdc" 
13c3						CALLMONITOR 
13c3					endif 
13c3			 
13c3			 
13c3			.diritem:	 
13c3				push bc 
13c3				; for each of the current ids do a search for them and if found push to stack 
13c3			 
13c3					ld hl, STORE_BLOCK_PHY 
13c3					ld d, 0		 ; look for extent 0 of block id as this contains file name 
13c3					ld e,b 
13c3			 
13c3					call storage_findnextid 
13c3			 
13c3			 
13c3					; if found hl will be non zero 
13c3			 
13c3					call ishlzero 
13c3					jr z, .dirnotfound 
13c3			 
13c3					; increase count 
13c3			 
13c3					pop bc	 
13c3					inc c 
13c3					push bc 
13c3					 
13c3			 
13c3					; get file header and push the file name 
13c3			 
13c3					ld de, store_page 
13c3					call storage_read_block 
13c3			 
13c3					; push file id to stack 
13c3				 
13c3					ld a, (store_page) 
13c3					ld h, 0 
13c3					ld l, a 
13c3			 
13c3					;call forth_push_numhl 
13c3					; TODO store id 
13c3			 
13c3					push hl 
13c3			 
13c3					; push extent count to stack  
13c3				 
13c3					ld hl, store_page+3 
13c3			 
13c3					; get file name length 
13c3			 
13c3					call strlenz   
13c3			 
13c3					inc hl   ; cover zero term 
13c3					inc hl  ; stick the id at the end of the area 
13c3			 
13c3					push hl 
13c3					pop bc    ; move length to bc 
13c3			 
13c3					call malloc 
13c3			 
13c3					; TODO save malloc area to scratch 
13c3			 
13c3					ex de, hl 
13c3					ld hl, (store_tmp2) 
13c3					ld (hl), e 
13c3					inc hl 
13c3					ld (hl), d 
13c3					inc hl 
13c3					ld (store_tmp2), hl 
13c3			 
13c3					 
13c3			 
13c3					;pop hl   ; get source 
13c3			;		ex de, hl    ; swap aronund	 
13c3			 
13c3					ld hl, store_page+3 
13c3					if DEBUG_FORTH_WORDS 
13c3						DMARK "CFd" 
13c3						CALLMONITOR 
13c3					endif 
13c3					ldir 
13c3			 
13c3					; de is past string, move back one and store id 
13c3					 
13c3					dec de 
13c3			 
13c3					; store file id 
13c3			 
13c3					pop hl 
13c3					ex de,hl 
13c3					ld (hl), e 
13c3			 
13c3					if DEBUG_FORTH_WORDS 
13c3						DMARK "Cdi" 
13c3						CALLMONITOR 
13c3					endif 
13c3					 
13c3			.dirnotfound: 
13c3					pop bc     
13c3					djnz .diritem 
13c3				 
13c3			.dirdone:	 
13c3			 
13c3					ld a, 0 
13c3					ld hl, (store_tmp2) 
13c3					ld (hl), a 
13c3					inc hl 
13c3					ld (hl), a 
13c3					inc hl 
13c3					; push a count of the dir items found 
13c3			 
13c3			;		ld h, 0 
13c3			;		ld l, c 
13c3			 
13c3				ret 
13c3			 
13c3			endif 
13c3			 
13c3			 
13c3			; Settings 
13c3			; Run  
13c3			 
13c3			 
13c3			 
13c3			;hd_menu1:   db "Diags:  1: Key Matrix   5: Sound",0 
13c3			;;hd_menu2:   db "        2: Editor",0   
13c3			;hd_menu2:   db "        2: Editor       6: Menu",0   
13c3			;hd_menu3:   db "        3: Storage",0 
13c3			;hd_menu4:   db "0=quit  4: Debug",0 
13c3			;hd_don:     db "ON",0 
13c3			;hd_doff:     db "OFF",0 
13c3			; 
13c3			; 
13c3			; 
13c3			;hardware_diags_old:       
13c3			; 
13c3			;.diagmenu: 
13c3			;	call clear_display 
13c3			;	ld a, display_row_1 
13c3			;	ld de, hd_menu1 
13c3			;	call str_at_display 
13c3			; 
13c3			;	ld a, display_row_2 
13c3			;	ld de, hd_menu2 
13c3			;	call str_at_display 
13c3			; 
13c3			;	ld a, display_row_3 
13c3			;	ld de, hd_menu3 
13c3			;	call str_at_display 
13c3			; 
13c3			;	ld a,  display_row_4 
13c3			;	ld de, hd_menu4 
13c3			;	call str_at_display 
13c3			; 
13c3			;	; display debug state 
13c3			; 
13c3			;	ld de, hd_don 
13c3			;	ld a, (os_view_disable) 
13c3			;	cp 0 
13c3			;	jr z, .distog 
13c3			;	ld de, hd_doff 
13c3			;.distog: ld a, display_row_4+17 
13c3			;	call str_at_display 
13c3			; 
13c3			;	call update_display 
13c3			; 
13c3			;	call cin_wait 
13c3			; 
13c3			; 
13c3			; 
13c3			;	cp '4' 
13c3			;	jr nz, .diagn1 
13c3			; 
13c3			;	; debug toggle 
13c3			; 
13c3			;	ld a, (os_view_disable) 
13c3			;	ld b, '*' 
13c3			;	cp 0 
13c3			;	jr z, .debtog 
13c3			;	ld b, 0 
13c3			;.debtog:	 
13c3			;	ld a,b 
13c3			;	ld (os_view_disable),a 
13c3			; 
13c3			;.diagn1: cp '0' 
13c3			;	 ret z 
13c3			; 
13c3			;;	cp '1' 
13c3			;;       jp z, matrix	 
13c3			;;   TODO keyboard matrix test 
13c3			; 
13c3			;	cp '2' 
13c3			;	jp z, .diagedit 
13c3			; 
13c3			;;	cp '6' 
13c3			;;	jp z, .menutest 
13c3			;;if ENABLE_BASIC 
13c3			;;	cp '6' 
13c3			;;	jp z, basic 
13c3			;;endif 
13c3			 ; 
13c3			;	jp .diagmenu 
13c3			; 
13c3			; 
13c3			;	ret 
13c3			 
13c3			 
13c3			.debug_tog: 
13c3 21 0d 14			ld hl, .menudebug 
13c6				 
13c6			;	ld a, (os_view_disable) 
13c6			;	cp '*' 
13c6 3a 6f ee			ld a,(debug_vector) 
13c9 fe c9			cp $C9   ; RET 
13cb 20 04			jr nz,.tdon  
13cd 3e 01			ld a, 1 
13cf 18 02			jr .tog1 
13d1 3e 00		.tdon: ld a, 0 
13d3			 
13d3			.tog1: 
13d3 cd f9 0b			call menu 
13d6 fe 00			cp 0 
13d8 c8				ret z 
13d9 fe 01			cp 1    ; disable debug 
13db 28 04			jr z, .dtog0 
13dd 3e 2a			ld a, '*' 
13df 18 05			jr .dtogset 
13e1			.dtog0:  
13e1				;ld a, 0 
13e1 cd ff 14			call bp_on 
13e4 18 dd			jr .debug_tog 
13e6			.dtogset:  
13e6				; ld (os_view_disable), a 
13e6 cd 0b 15			call bp_off 
13e9 c3 c3 13			jp .debug_tog 
13ec			 
13ec			 
13ec			hardware_diags:       
13ec			 
13ec			.diagm: 
13ec 21 ff 13			ld hl, .menuitems 
13ef 3e 00			ld a, 0 
13f1 cd f9 0b			call menu 
13f4			 
13f4 fe 00		         cp 0 
13f6 c8				 ret z 
13f7			 
13f7 fe 02			cp 2 
13f9 ca 58 14			jp z, .diagedit 
13fc			 
13fc			;	cp '6' 
13fc			;	jp z, .menutest 
13fc			;if ENABLE_BASIC 
13fc			;	cp '6' 
13fc			;	jp z, basic 
13fc			;endif 
13fc			  
13fc c3 ec 13			jp .diagm 
13ff			 
13ff				 
13ff 13 14		.menuitems:   	dw .m1 
1401 1e 14				dw .m2 
1403 25 14				dw .m3 
1405 2d 14				dw .m5 
1407 33 14				dw .m5a 
1409 3c 14				dw .m5b 
140b 00 00				dw 0 
140d			 
140d			.menudebug: 
140d 45 14				dw .m6 
140f 4e 14				dw .m7 
1411 00 00				dw 0 
1413			 
1413 .. 00		.m1:   db "Key Matrix",0 
141e .. 00		.m2:   db "Editor",0 
1425 .. 00		.m3:   db "Storage",0 
142d .. 00		.m5:   db "Sound",0 
1433 .. 00		.m5a:  db "RAM Test",0 
143c .. 00		.m5b:  db "LCD Test",0 
1445			 
1445 .. 00		.m6:   db "Debug ON",0 
144e .. 00		.m7:   db "Debug OFF",0 
1458			 
1458			; debug editor 
1458			 
1458			.diagedit: 
1458			 
1458 21 bb e2			ld hl, scratch 
145b			;	ld bc, 250 
145b			;	ldir 
145b				; TODO ldir is not working strcpy may not get all the terms on the input line???? 
145b 3e 00			ld a, 0 
145d 77				ld (hl), a 
145e 23				inc hl 
145f 77				ld (hl), a 
1460 23				inc hl 
1461 77				ld (hl), a 
1462			 
1462 cd c8 0b		        call clear_display 
1465 cd eb 0b			call update_display 
1468				;ld a, 1 
1468				;ld (hardware_diag), a 
1468			.diloop: 
1468 3e 00			ld a, display_row_1 
146a 0e 00			ld c, 0 
146c 16 ff			ld d, 255    ; TODO fix input_str to actually take note of max string input length 
146e 1e 28			ld e, 40 
1470			 
1470 21 bb e2			ld hl, scratch	 
1473 cd 22 0e			call input_str 
1476			 
1476 3e 28			ld a, display_row_2 
1478 11 bb e2			ld de, scratch 
147b cd db 0b			call str_at_display 
147e cd eb 0b			call update_display 
1481			 
1481 c3 68 14			jp .diloop 
1484			 
1484			 
1484			; pass word in hl 
1484			; a has display location 
1484			display_word_at: 
1484 f5				push af 
1485 e5				push hl 
1486 7c				ld a,h 
1487 21 c0 e5			ld hl, os_word_scratch 
148a cd fe 0f			call hexout 
148d e1				pop hl 
148e 7d				ld a,l 
148f 21 c2 e5			ld hl, os_word_scratch+2 
1492 cd fe 0f			call hexout 
1495 21 c4 e5			ld hl, os_word_scratch+4 
1498 3e 00			ld a,0 
149a 77				ld (hl),a 
149b 11 c0 e5			ld de,os_word_scratch 
149e f1				pop af 
149f cd db 0b				call str_at_display 
14a2 c9				ret 
14a3			 
14a3			display_ptr_state: 
14a3			 
14a3				; to restore afterwards 
14a3			 
14a3 d5				push de 
14a4 c5				push bc 
14a5 e5				push hl 
14a6 f5				push af 
14a7			 
14a7				; for use in here 
14a7			 
14a7			;	push bc 
14a7			;	push de 
14a7			;	push hl 
14a7			;	push af 
14a7			 
14a7 cd c8 0b			call clear_display 
14aa			 
14aa 11 82 16			ld de, .ptrstate 
14ad 3e 00			ld a, display_row_1 
14af cd db 0b			call str_at_display 
14b2			 
14b2				; display debug step 
14b2			 
14b2			 
14b2 11 65 ee			ld de, debug_mark 
14b5 3e 26			ld a, display_row_1+display_cols-2 
14b7 cd db 0b			call str_at_display 
14ba			 
14ba				; display a 
14ba 11 8c 16			ld de, .ptrcliptr 
14bd 3e 28			ld a, display_row_2 
14bf cd db 0b			call str_at_display 
14c2			 
14c2 f1				pop af 
14c3 2a 3a ea			ld hl,(cli_ptr) 
14c6 3e 30			ld a, display_row_2+8 
14c8 cd 84 14			call display_word_at 
14cb			 
14cb			 
14cb				; display hl 
14cb			 
14cb			 
14cb 11 94 16			ld de, .ptrclioptr 
14ce 3e 32			ld a, display_row_2+10 
14d0 cd db 0b			call str_at_display 
14d3			; 
14d3			;	pop hl 
14d3 3e 35			ld a, display_row_2+13 
14d5 2a 38 ea			ld hl,(cli_origptr) 
14d8 cd 84 14			call display_word_at 
14db			; 
14db			;	 
14db			;	; display de 
14db			 
14db			;	ld de, .regstatede 
14db			;	ld a, display_row_3 
14db			;	call str_at_display 
14db			 
14db			;	pop de 
14db			;	ld h,d 
14db			;	ld l, e 
14db			;	ld a, display_row_3+3 
14db			;	call display_word_at 
14db			 
14db			 
14db				; display bc 
14db			 
14db			;	ld de, .regstatebc 
14db			;	ld a, display_row_3+10 
14db			;	call str_at_display 
14db			 
14db			;	pop bc 
14db			;	ld h,b 
14db			;	ld l, c 
14db			;	ld a, display_row_3+13 
14db			;	call display_word_at 
14db			 
14db			 
14db				; display dsp 
14db			 
14db			;	ld de, .regstatedsp 
14db			;	ld a, display_row_4 
14db			;	call str_at_display 
14db			 
14db				 
14db			;	ld hl,(cli_data_sp) 
14db			;	ld a, display_row_4+4 
14db			;	call display_word_at 
14db			 
14db				; display rsp 
14db			 
14db 11 c3 16			ld de, .regstatersp 
14de 3e 82			ld a, display_row_4+10 
14e0 cd db 0b			call str_at_display 
14e3			 
14e3				 
14e3 2a ec e9			ld hl,(cli_ret_sp) 
14e6 3e 86			ld a, display_row_4+14 
14e8 cd 84 14			call display_word_at 
14eb			 
14eb cd eb 0b			call update_display 
14ee			 
14ee cd 00 0b			call delay1s 
14f1 cd 00 0b			call delay1s 
14f4 cd 00 0b			call delay1s 
14f7			 
14f7			 
14f7 cd 08 1b			call next_page_prompt 
14fa			 
14fa				; restore  
14fa			 
14fa f1				pop af 
14fb e1				pop hl 
14fc c1				pop bc 
14fd d1				pop de 
14fe c9				ret 
14ff			 
14ff			; Update the break point vector so that the user can hook a new routine 
14ff			 
14ff			bp_on: 
14ff 3e c3			ld a, $c3    ; JP 
1501 32 6f ee			ld (debug_vector), a 
1504 21 11 15			ld hl, break_point_state 
1507 22 70 ee			ld (debug_vector+1), hl 
150a c9				ret 
150b			 
150b			bp_off: 
150b 3e c9			ld a, $c9    ; RET 
150d 32 6f ee			ld (debug_vector), a 
1510 c9				ret 
1511			 
1511			 
1511			break_point_state: 
1511			;	push af 
1511			; 
1511			;	; see if disabled 
1511			; 
1511			;	ld a, (os_view_disable) 
1511			;	cp '*' 
1511			;	jr nz, .bpsgo 
1511			;	pop af 
1511			;	ret 
1511			 
1511			.bpsgo: 
1511			;	pop af 
1511 f5				push af 
1512 22 9d e2			ld (os_view_hl), hl 
1515 ed 53 9b e2		ld (os_view_de), de 
1519 ed 43 99 e2		ld (os_view_bc), bc 
151d e5				push hl 
151e 6f				ld l, a 
151f 26 00			ld h, 0 
1521 22 9f e2			ld (os_view_af),hl 
1524			 
1524 21 ab ed				ld hl, display_fb0 
1527 22 c6 eb				ld (display_fb_active), hl 
152a e1				pop hl	 
152b			 
152b 3e 31			ld a, '1' 
152d fe 2a		.bps1:  cp '*' 
152f cc 0b 15			call z, bp_off 
1532			;	jr nz, .bps1b 
1532			;	ld (os_view_disable),a 
1532 fe 31		.bps1b:  cp '1' 
1534 20 14			jr nz, .bps2 
1536			 
1536				; display reg 
1536			 
1536				 
1536			 
1536 3a 9f e2			ld a, (os_view_af) 
1539 2a 9d e2			ld hl, (os_view_hl) 
153c ed 5b 9b e2		ld de, (os_view_de) 
1540 ed 4b 99 e2		ld bc, (os_view_bc) 
1544 cd de 15			call display_reg_state 
1547 c3 ca 15			jp .bpschk 
154a			 
154a fe 32		.bps2:  cp '2' 
154c 20 08			jr nz, .bps3 
154e				 
154e				; display hl 
154e 2a 9d e2			ld hl, (os_view_hl) 
1551 cd c8 16			call display_dump_at_hl 
1554			 
1554 18 74			jr .bpschk 
1556			 
1556 fe 33		.bps3:  cp '3' 
1558 20 08			jr nz, .bps4 
155a			 
155a			        ; display de 
155a 2a 9b e2			ld hl, (os_view_de) 
155d cd c8 16			call display_dump_at_hl 
1560			 
1560 18 68			jr .bpschk 
1562 fe 34		.bps4:  cp '4' 
1564 20 08			jr nz, .bps5 
1566			 
1566			        ; display bc 
1566 2a 99 e2			ld hl, (os_view_bc) 
1569 cd c8 16			call display_dump_at_hl 
156c			 
156c 18 5c			jr .bpschk 
156e fe 35		.bps5:  cp '5' 
1570 20 08		        jr nz, .bps7 
1572			 
1572				; display cur ptr 
1572 2a 3a ea			ld hl, (cli_ptr) 
1575 cd c8 16			call display_dump_at_hl 
1578			 
1578 18 50			jr .bpschk 
157a fe 36		.bps7:  cp '6' 
157c 20 08			jr nz, .bps8b 
157e				 
157e				; display cur orig ptr 
157e 2a 38 ea			ld hl, (cli_origptr) 
1581 cd c8 16			call display_dump_at_hl 
1584 18 44			jr .bpschk 
1586 fe 37		.bps8b:  cp '7' 
1588 20 08			jr nz, .bps9 
158a				 
158a				; display dsp 
158a 2a e8 e9			ld hl, (cli_data_sp) 
158d cd c8 16			call display_dump_at_hl 
1590			 
1590 18 38			jr .bpschk 
1592 fe 39		.bps9:  cp '9' 
1594 20 05			jr nz, .bps8c 
1596				 
1596				; display SP 
1596			;	ld hl, sp 
1596 cd c8 16			call display_dump_at_hl 
1599			 
1599 18 2f			jr .bpschk 
159b fe 38		.bps8c:  cp '8' 
159d 20 08			jr nz, .bps8d 
159f				 
159f				; display rsp 
159f 2a ec e9			ld hl, (cli_ret_sp) 
15a2 cd c8 16			call display_dump_at_hl 
15a5			 
15a5 18 23			jr .bpschk 
15a7 fe 23		.bps8d:  cp '#'     ; access monitor sub system 
15a9 20 05			jr nz, .bps8 
15ab cd c2 18			call monitor 
15ae			 
15ae 18 1a			jr .bpschk 
15b0 fe 30		.bps8:  cp '0' 
15b2 20 16			jr nz, .bpschk 
15b4			 
15b4 21 0a ed				ld hl, display_fb1 
15b7 22 c6 eb				ld (display_fb_active), hl 
15ba cd eb 0b				call update_display 
15bd			 
15bd				;ld a, (os_view_af) 
15bd 2a 9d e2			ld hl, (os_view_hl) 
15c0 ed 5b 9b e2		ld de, (os_view_de) 
15c4 ed 4b 99 e2		ld bc, (os_view_bc) 
15c8 f1				pop af 
15c9 c9				ret 
15ca			 
15ca			.bpschk:   
15ca cd 00 0b			call delay1s 
15cd 3e 9f		ld a,display_row_4 + display_cols - 1 
15cf 11 06 1b		        ld de, endprg 
15d2 cd db 0b			call str_at_display 
15d5 cd eb 0b			call update_display 
15d8 cd f8 61			call cin_wait 
15db			 
15db c3 2d 15			jp .bps1 
15de			 
15de			 
15de			display_reg_state: 
15de			 
15de				; to restore afterwards 
15de			 
15de d5				push de 
15df c5				push bc 
15e0 e5				push hl 
15e1 f5				push af 
15e2			 
15e2				; for use in here 
15e2			 
15e2 c5				push bc 
15e3 d5				push de 
15e4 e5				push hl 
15e5 f5				push af 
15e6			 
15e6 cd c8 0b			call clear_display 
15e9			 
15e9 11 9e 16			ld de, .regstate 
15ec 3e 00			ld a, display_row_1 
15ee cd db 0b			call str_at_display 
15f1			 
15f1				; display debug step 
15f1			 
15f1			 
15f1 11 65 ee			ld de, debug_mark 
15f4 3e 25			ld a, display_row_1+display_cols-3 
15f6 cd db 0b			call str_at_display 
15f9			 
15f9				; display a 
15f9 11 ba 16			ld de, .regstatea 
15fc 3e 28			ld a, display_row_2 
15fe cd db 0b			call str_at_display 
1601			 
1601 e1				pop hl 
1602			;	ld h,0 
1602			;	ld l, a 
1602 3e 2b			ld a, display_row_2+3 
1604 cd 84 14			call display_word_at 
1607			 
1607			 
1607				; display hl 
1607			 
1607			 
1607 11 ae 16			ld de, .regstatehl 
160a 3e 32			ld a, display_row_2+10 
160c cd db 0b			call str_at_display 
160f			 
160f e1				pop hl 
1610 3e 35			ld a, display_row_2+13 
1612 cd 84 14			call display_word_at 
1615			 
1615				 
1615				; display de 
1615			 
1615 11 b2 16			ld de, .regstatede 
1618 3e 50			ld a, display_row_3 
161a cd db 0b			call str_at_display 
161d			 
161d e1				pop hl 
161e			;	ld h,d 
161e			;	ld l, e 
161e 3e 53			ld a, display_row_3+3 
1620 cd 84 14			call display_word_at 
1623			 
1623			 
1623				; display bc 
1623			 
1623 11 b6 16			ld de, .regstatebc 
1626 3e 5a			ld a, display_row_3+10 
1628 cd db 0b			call str_at_display 
162b			 
162b e1				pop hl 
162c			;	ld h,b 
162c			;	ld l, c 
162c 3e 5d			ld a, display_row_3+13 
162e cd 84 14			call display_word_at 
1631			 
1631			 
1631				; display dsp 
1631			 
1631 11 be 16			ld de, .regstatedsp 
1634 3e 78			ld a, display_row_4 
1636 cd db 0b			call str_at_display 
1639			 
1639				 
1639 2a e8 e9			ld hl,(cli_data_sp) 
163c 3e 7c			ld a, display_row_4+4 
163e cd 84 14			call display_word_at 
1641			 
1641				; display rsp 
1641			 
1641 11 c3 16			ld de, .regstatersp 
1644 3e 82			ld a, display_row_4+10 
1646 cd db 0b			call str_at_display 
1649			 
1649				 
1649 2a ec e9			ld hl,(cli_ret_sp) 
164c 3e 86			ld a, display_row_4+14 
164e cd 84 14			call display_word_at 
1651			 
1651 cd eb 0b			call update_display 
1654			 
1654			;	call delay1s 
1654			;	call delay1s 
1654			;	call delay1s 
1654			 
1654			 
1654			;	call next_page_prompt 
1654			 
1654				; restore  
1654			 
1654 f1				pop af 
1655 e1				pop hl 
1656 c1				pop bc 
1657 d1				pop de 
1658 c9				ret 
1659			 
1659 .. 00		.wordincurptr:  db "Word in cur_ptr (5)",0 
166d .. 00		.wordincuroptr:  db "Word in cur_optr (6)",0 
1682 .. 00		.ptrstate:	db "Ptr State",0 
168c .. 00		.ptrcliptr:     db "cli_ptr",0 
1694 .. 00		.ptrclioptr:     db "cli_o_ptr",0 
169e .. 00		.regstate:	db "Reg State (1/0)",0 
16ae .. 00		.regstatehl:	db "HL:",0 
16b2 .. 00		.regstatede:	db "DE:",0 
16b6 .. 00		.regstatebc:	db "BC:",0 
16ba .. 00		.regstatea:	db "A :",0 
16be .. 00		.regstatedsp:	db "DSP:",0 
16c3 .. 00		.regstatersp:	db "RSP:",0 
16c8			 
16c8			display_dump_at_hl: 
16c8 e5				push hl 
16c9 d5				push de 
16ca c5				push bc 
16cb f5				push af 
16cc			 
16cc 22 de e5			ld (os_cur_ptr),hl	 
16cf cd c8 0b			call clear_display 
16d2 cd 10 1a			call dumpcont 
16d5			;	call delay1s 
16d5			;	call next_page_prompt 
16d5			 
16d5			 
16d5 f1				pop af 
16d6 c1				pop bc 
16d7 d1				pop de 
16d8 e1				pop hl 
16d9 c9				ret 
16da			 
16da			;if ENABLE_BASIC 
16da			;	include "nascombasic.asm" 
16da			;	basic: 
16da			;	include "forth/FORTH.ASM" 
16da			;endif 
16da			 
16da			; eof 
16da			 
16da			 
# End of file firmware_diags.asm
16da			  
16da			include "firmware_prompts.asm"  
16da			; Prompts  
16da			 
16da			; boot messages 
16da			 
16da .. 00		prom_bootmsg:	db "z80-homebrew OS v1.7",0 
16ef .. 00		prom_bootmsg1:	db "by Kevin Groves",0 
16ff			 
16ff			 
16ff			; config menus 
16ff			 
16ff			;prom_c3: db "Add Dictionary To File",0 
16ff			 
16ff			if STARTUP_V1 
16ff .. 00		prom_c2: db "Select Autoload File",0 
1714 .. 00		prom_c2a: db "Disable Autoload File", 0 
172a			endif 
172a			 
172a			if STARTUP_V2 
172a			prom_c2: db "Enable Autoload Files",0 
172a			prom_c2a: db "Disable Autoload Files", 0 
172a			 
172a			crs_s1: db "*ls-word", 0 
172a			crs_s2: db "*ed-word", 0 
172a			crs_s3: db "*Demo-Games", 0 
172a			crs_s4: db "*Utils", 0 
172a			crs_s5: db "*SPI-Util", 0 
172a			crs_s6: db "*Key-Constants", 0 
172a			crs_sound: db "*Sound-Util", 0 
172a			crs_hw: db "*Hello-World",0 
172a			 
172a			 
172a			 
172a			endif 
172a			;prom_c2b: db "Select Storage Bank",0 
172a .. 00		prom_c4: db "Settings",0 
1733 .. 00		prom_m4:   db "Debug & Breakpoints On/Off",0 
174e .. 00		prom_m4b:   db "Monitor",0 
1756 .. 00		prom_c1: db "Hardware Diags",0 
1765			 
1765			 
1765			if STARTUP_V2 
1765			prom_c9: db "Create Startup Files",0 
1765			endif 
1765			 
1765 .. 00		prom_notav:    db "Feature not available",0 
177b .. 00		prom_empty:    db "",0 
177c			 
177c			; eof 
177c			 
# End of file firmware_prompts.asm
177c			  
177c			  
177c			; eof  
177c			  
# End of file firmware.asm
177c			 
177c			;; below moved from firmware.asm for strange zero calc of baseusermem label. Scope issue on multipass???? 
177c			;if BASE_KEV  
177c			;baseram: equ 08000h 
177c			;endif 
177c			 
177c			;if BASE_SC114 
177c			;baseram:     equ    endofcode 
177c			;endif 
177c			 
177c			 
177c			; Add NMI support. A rst 066h when r15z goes neg on clock side of resist. needs to do retn when exiting 
177c			 
177c			; start system 
177c			 
177c			coldstart: 
177c				; set sp 
177c				; di/ei 
177c			 
177c f3				di 
177d 31 00 f0			ld sp, tos 
1780 cd f6 60			call init_nmi 
1783			;	ei 
1783			 
1783				; init spinner 
1783 3e 00			ld a,0 
1785 32 c0 eb			ld (display_active), a 
1788			 
1788				; disable breakpoint by default 
1788			 
1788				;ld a,'*' 
1788			;	ld a,' ' 
1788			;	ld (os_view_disable),a 
1788			 
1788				; set break point vector as new break point on or off 
1788 cd 0b 15			call bp_off 
178b			 
178b				; init hardware 
178b			 
178b				; init keyboard and screen hardware 
178b			 
178b cd 1f 01			call hardware_init 
178e			 
178e			 
178e cd 00 0b			call delay1s 
1791 3e 58			ld a, display_row_3+8 
1793 11 03 01			ld de, buildtime 
1796 cd db 0b			call str_at_display 
1799 cd eb 0b			call update_display 
179c			 
179c cd 00 0b			call delay1s 
179f cd 00 0b			call delay1s 
17a2 cd 00 0b			call delay1s 
17a5			 
17a5				; detect if any keys are held down to enable breakpoints at start up 
17a5			 
17a5 cd 00 62			call cin  
17a8 fe 00			cp 0 
17aa 28 03			jr z, .nokeys 
17ac			 
17ac				;call hardware_diags 
17ac cd 69 13			call config 
17af			 
17af			;	ld de, .bpen 
17af			;	ld a, display_row_4 
17af			;	call str_at_display 
17af			;	call update_display 
17af			; 
17af			;	ld a,0 
17af			;	ld (os_view_disable),a 
17af			; 
17af			;.bpwait: 
17af			;	call cin 
17af			;	cp 0 
17af			;	jr z, .bpwait 
17af			;	jr .nokeys 
17af			; 
17af			; 
17af			;.bpen:  db "Break points enabled!",0 
17af			 
17af			 
17af			 
17af			 
17af			 
17af			 
17af			.nokeys: 
17af			 
17af			 
17af				 
17af			 
17af			;jp  testkey 
17af			 
17af			;call storage_get_block_0 
17af			; 
17af			;ld hl, 0 
17af			;ld de, store_page 
17af			;call storage_read_block 
17af			 
17af				 
17af			;ld hl, 10 
17af			;ld de, store_page 
17af			;call storage_read_block 
17af			 
17af			 
17af			 
17af			 
17af			 
17af			;stop:	nop 
17af			;	jp stop 
17af			 
17af			 
17af			 
17af			main: 
17af cd c8 0b			call clear_display 
17b2 cd eb 0b			call update_display 
17b5			 
17b5			 
17b5			 
17b5			;	call testlcd 
17b5			 
17b5			 
17b5			 
17b5 cd 50 1f			call forth_init 
17b8			 
17b8			 
17b8			warmstart: 
17b8 cd 26 1f			call forth_warmstart 
17bb			 
17bb				; run startup word load 
17bb			        ; TODO prevent this running at warmstart after crash  
17bb			 
17bb				if STARTUP_ENABLE 
17bb			 
17bb					if STARTUP_V1 
17bb			 
17bb						if STORAGE_SE 
17bb							call forth_autoload 
17bb						endif 
17bb cd 46 60					call forth_startup 
17be					endif 
17be			 
17be					if STARTUP_V2 
17be			 
17be						if STORAGE_SE 
17be							call forth_autoload 
17be						else 
17be							call forth_startup 
17be						endif 
17be			 
17be			 
17be					endif 
17be			 
17be				endif 
17be			 
17be			warmstart_afterauto: 
17be			 
17be				; show free memory after boot 
17be 11 5d 18			ld de, freeram 
17c1 3e 00			ld a, display_row_1 
17c3 cd db 0b			call str_at_display 
17c6			 
17c6				; get current heap start after loading any uwords 
17c6			 
17c6				;ld de, (os_last_new_uword) 
17c6				;ex de, hl 
17c6			 
17c6			; Or use heap_size word???? 
17c6				;ld hl, heap_end 
17c6				;ld hl, heap_size 
17c6				;ld de, topusermem 
17c6				;ld de, heap_start 
17c6 ed 5b 23 62			ld de, (free_list )      
17ca 21 96 e2				ld hl, heap_end 
17cd ed 52			sbc hl, de 
17cf				;push hl 
17cf				;ld a,h	         	 
17cf				;ld hl, os_word_scratch		; TODO do direct write to frame buffer instead and drop the str_at_display 
17cf				;call hexout 
17cf			   	;pop hl 
17cf			; 
17cf			;	ld a,l 
17cf			;	ld hl, os_word_scratch+2 
17cf			;	call hexout 
17cf			;	ld hl, os_word_scratch+4 
17cf			;	ld a, 0 
17cf			;	ld (hl),a 
17cf eb				ex de, hl 
17d0 21 c0 e5			ld hl, os_word_scratch 
17d3 cd 0a 11			call uitoa_16 
17d6			 
17d6			 
17d6 11 c0 e5			ld de, os_word_scratch 
17d9 3e 0d			ld a, display_row_1 + 13 
17db cd db 0b			call str_at_display 
17de cd eb 0b			call update_display 
17e1			 
17e1			 
17e1				;call demo 
17e1			 
17e1			 
17e1				; init scratch input area for cli commands 
17e1			 
17e1 21 e2 e5			ld hl, os_cli_cmd 
17e4 3e 00			ld a,0 
17e6 77				ld (hl),a 
17e7 23				inc hl 
17e8 77				ld (hl),a 
17e9			 
17e9 3e 00			ld a,0 
17eb 32 e1 e6			ld (os_last_cmd),a	; current command in use to enable repeated use with an enter etc 
17ee			 
17ee 32 de e5			ld (os_cur_ptr),a	; ptr to whatever is needed for this command 
17f1 32 df e5			ld (os_cur_ptr+1),a	 
17f4			 
17f4 32 c0 e5			ld (os_word_scratch),a	; byte or word being used in parsing for this command 
17f7 32 c1 e5			ld (os_word_scratch+1),a	 
17fa				 
17fa			 
17fa				;ld a, kLCD_Line2        ; TODO prompt using direct screen line address. Correct this to frame buffer 
17fa 21 e2 e5			ld hl, os_cli_cmd 
17fd			 
17fd 3e 00			ld a, 0		 ; init cli input 
17ff 77				ld (hl), a 
1800 3e 28			ld a, display_row_2        ; TODO prompt using direct screen line address. Correct this to frame buffer 
1802			cli: 
1802				; show cli prompt 
1802				;push af 
1802				;ld a, 0 
1802				;ld de, prompt 
1802				;call str_at_display 
1802			 
1802				;call update_display 
1802				;pop af 
1802				;inc a 
1802				;ld a, kLCD_Line4+1	 ; TODO using direct screen line writes. Correct this to frame buffer 
1802			 
1802			.lastrecall: 
1802			 
1802 0e 00			ld c, 0 
1804 16 ff			ld d, 255    ; TODO fix input_str to actually take note of max string input length 
1806 1e 28			ld e, 40 
1808			 
1808 21 e2 e5			ld hl, os_cli_cmd 
180b			 
180b				STACKFRAME OFF $fefe $9f9f 
180b				if DEBUG_STACK_IMB 
180b					if OFF 
180b						exx 
180b						ld de, $fefe 
180b						ld a, d 
180b						ld hl, curframe 
180b						call hexout 
180b						ld a, e 
180b						ld hl, curframe+2 
180b						call hexout 
180b						ld hl, $fefe 
180b						push hl 
180b						ld hl, $9f9f 
180b						push hl 
180b						exx 
180b					endif 
180b				endif 
180b			endm 
# End of macro STACKFRAME
180b			 
180b cd 22 0e			call input_str 
180e			 
180e				STACKFRAMECHK OFF $fefe $9f9f 
180e				if DEBUG_STACK_IMB 
180e					if OFF 
180e						exx 
180e						ld hl, $9f9f 
180e						pop de   ; $9f9f 
180e						call cmp16 
180e						jr nz, .spnosame 
180e						ld hl, $fefe 
180e						pop de   ; $fefe 
180e						call cmp16 
180e						jr z, .spfrsame 
180e						.spnosame: call showsperror 
180e						.spfrsame: nop 
180e						exx 
180e					endif 
180e				endif 
180e			endm 
# End of macro STACKFRAMECHK
180e			 
180e			 
180e				; check to see if last line recall has been requested 
180e			 
180e			if EDIT_V2 
180e fe 05			cp KEY_UP 
1810 20 0f			jr nz, .noexecline 
1812			 
1812 11 e2 e5			ld de, os_cli_cmd 
1815 21 e1 e6			ld hl, os_last_cmd 
1818 01 ff 00			ld bc, 255 
181b ed b0			ldir 
181d 3e 00			ld a, 0 
181f 18 e1			jr .lastrecall 
1821			endif 
1821			 
1821			.noexecline: 
1821				; no so exec the line		 
1821			 
1821				; copy input to last command 
1821			 
1821 21 e2 e5			ld hl, os_cli_cmd 
1824 11 e1 e6			ld de, os_last_cmd 
1827 01 ff 00			ld bc, 255 
182a ed b0			ldir 
182c			 
182c				; wipe current buffer 
182c			 
182c			;	ld a, 0 
182c			;	ld hl, os_cli_cmd 
182c			;	ld de, os_cli_cmd+1 
182c			;	ld bc, 254 
182c			;	ldir 
182c				; TODO ldir is not working strcpy may not get all the terms on the input line???? 
182c			;	call strcpy 
182c			;	ld a, 0 
182c			;	ld (hl), a 
182c			;	inc hl 
182c			;	ld (hl), a 
182c			;	inc hl 
182c			;	ld (hl), a 
182c			 
182c				; switch frame buffer to program  
182c			 
182c 21 0a ed				ld hl, display_fb1 
182f 22 c6 eb				ld (display_fb_active), hl 
1832			 
1832			;	nop 
1832				STACKFRAME ON $fbfe $8f9f 
1832				if DEBUG_STACK_IMB 
1832					if ON 
1832						exx 
1832						ld de, $fbfe 
1832						ld a, d 
1832						ld hl, curframe 
1832						call hexout 
1832						ld a, e 
1832						ld hl, curframe+2 
1832						call hexout 
1832						ld hl, $fbfe 
1832						push hl 
1832						ld hl, $8f9f 
1832						push hl 
1832						exx 
1832					endif 
1832				endif 
1832			endm 
# End of macro STACKFRAME
1832				; first time into the parser so pass over the current scratch pad 
1832 21 e2 e5			ld hl,os_cli_cmd 
1835				; tokenise the entered statement(s) in HL 
1835 cd ca 1f			call forthparse 
1838			        ; exec forth statements in top of return stack 
1838 cd 06 20			call forthexec 
183b				;call forthexec_cleanup 
183b			;	call parsenext 
183b			 
183b				STACKFRAMECHK ON $fbfe $8f9f 
183b				if DEBUG_STACK_IMB 
183b					if ON 
183b						exx 
183b						ld hl, $8f9f 
183b						pop de   ; $8f9f 
183b						call cmp16 
183b						jr nz, .spnosame 
183b						ld hl, $fbfe 
183b						pop de   ; $fbfe 
183b						call cmp16 
183b						jr z, .spfrsame 
183b						.spnosame: call showsperror 
183b						.spfrsame: nop 
183b						exx 
183b					endif 
183b				endif 
183b			endm 
# End of macro STACKFRAMECHK
183b				; TODO on return from forth parsing should there be a prompt to return to system? but already in system. 
183b			 
183b 3e 78			ld a, display_row_4 
183d 11 6e 18			ld de, endprog 
1840			 
1840 cd eb 0b			call update_display		 
1843			 
1843 cd 08 1b			call next_page_prompt 
1846			 
1846				; switch frame buffer to cli 
1846			 
1846 21 ab ed				ld hl, display_fb0 
1849 22 c6 eb				ld (display_fb_active), hl 
184c			 
184c			 
184c cd c8 0b		        call clear_display 
184f cd eb 0b			call update_display		 
1852			 
1852 21 e2 e5			ld hl, os_cli_cmd 
1855			 
1855 3e 00			ld a, 0		 ; init cli input 
1857 77				ld (hl), a 
1858			 
1858				; TODO f_cursor_ptr should inc row (scroll if required) and set start of row for next input  
1858			 
1858				; now on last line 
1858			 
1858				; TODO scroll screen up 
1858			 
1858				; TODO instead just clear screen and place at top of screen 
1858			 
1858			;	ld a, 0 
1858			;	ld (f_cursor_ptr),a 
1858			 
1858				;call clear_display 
1858				;call update_display 
1858			 
1858				;ld a, kLCD_Line1        ; TODO prompt using direct screen line address. Correct this to frame buffer 
1858 3e 00			ld a, display_row_1        ; TODO prompt using direct screen line address. Correct this to frame buffer 
185a c3 02 18			jp cli 
185d			 
185d .. 00		freeram: db "Free bytes: ",0 
186a ..			asc: db "1A2F" 
186e .. 00		endprog: db "End prog...",0 
187a			 
187a			testenter2:   
187a 21 ed e2			ld hl,scratch+50 
187d 22 de e5			ld (os_cur_ptr),hl 
1880 c3 02 18			jp cli 
1883			 
1883			testenter:  
1883			 
1883 21 6a 18			ld hl,asc 
1886			;	ld a,(hl) 
1886			;	call nibble2val 
1886 cd 54 10			call get_byte 
1889			 
1889			 
1889			;	ld a,(hl) 
1889			;	call atohex 
1889			 
1889			;	call fourehexhl 
1889 32 ed e2			ld (scratch+50),a 
188c			 
188c			 
188c			 
188c 21 6c 18			ld hl,asc+2 
188f			;	ld a, (hl) 
188f			;	call nibble2val 
188f cd 54 10			call get_byte 
1892			 
1892			;	call fourehexhl 
1892 32 ef e2			ld (scratch+52),a 
1895				 
1895 21 ed e2			ld hl,scratch+50 
1898 22 de e5			ld (os_cur_ptr),hl 
189b c3 02 18			jp cli 
189e			 
189e			enter:	 
189e 3a bf e2			ld a,(scratch+4) 
18a1 fe 00			cp 0 
18a3 28 0c			jr z, .entercont 
18a5				; no, not a null term line so has an address to work out.... 
18a5			 
18a5 21 bd e2			ld hl,scratch+2 
18a8 cd b4 10			call get_word_hl 
18ab			 
18ab 22 de e5			ld (os_cur_ptr),hl	 
18ae c3 02 18			jp cli 
18b1			 
18b1			 
18b1			.entercont:  
18b1			 
18b1 21 bd e2			ld hl, scratch+2 
18b4 cd 54 10			call get_byte 
18b7			 
18b7 2a de e5		   	ld hl,(os_cur_ptr) 
18ba 77					ld (hl),a 
18bb 23					inc hl 
18bc 22 de e5				ld (os_cur_ptr),hl 
18bf				 
18bf			; get byte  
18bf			 
18bf			 
18bf c3 02 18			jp cli 
18c2			 
18c2			 
18c2			; basic monitor support 
18c2			 
18c2			monitor: 
18c2				;  
18c2 cd c8 0b			call clear_display 
18c5 3e 00			ld a, 0 
18c7 11 1b 19			ld de, .monprompt 
18ca cd db 0b			call str_at_display 
18cd cd eb 0b			call update_display 
18d0			 
18d0				; get a monitor command 
18d0			 
18d0 0e 00			ld c, 0     ; entry at top left 
18d2 16 64			ld d, 100   ; max buffer size 
18d4 1e 0f			ld e, 15    ; input scroll area 
18d6 3e 00			ld a, 0     ; init string 
18d8 21 b9 e4			ld hl, os_input 
18db 77				ld (hl), a 
18dc 23				inc hl 
18dd 77				ld (hl), a 
18de 21 b9 e4			ld hl, os_input 
18e1 3e 01			ld a, 1     ; init string 
18e3 cd 22 0e			call input_str 
18e6			 
18e6 cd c8 0b		        call clear_display 
18e9 cd eb 0b			call update_display		 
18ec			 
18ec 3a b9 e4			ld a, (os_input) 
18ef cd 52 11			call toUpper 
18f2 fe 48		        cp 'H' 
18f4 ca 8f 19		        jp z, .monhelp 
18f7 fe 44			cp 'D'		; dump 
18f9 ca c2 19			jp z, .mondump	 
18fc fe 43			cp 'C'		; dump 
18fe ca dc 19			jp z, .moncdump	 
1901 fe 4d			cp 'M'		; dump 
1903 ca 1d 19			jp z, .moneditstart 
1906 fe 55			cp 'U'		; dump 
1908 ca 29 19			jp z, .monedit	 
190b fe 47			cp 'G'		; dump 
190d ca b8 19			jp z, .monjump 
1910 fe 42			cp 'B'		; forth breakpoint 
1912 cc 11 15			call z, break_point_state 
1915 fe 51			cp 'Q'		; dump 
1917 c8				ret z	 
1918			 
1918			 
1918				; TODO "S" to access symbol by name and not need the address 
1918				; TODO "F" to find a string in memory 
1918			 
1918 c3 c2 18			jp monitor 
191b			 
191b .. 00		.monprompt: db ">", 0 
191d			 
191d			.moneditstart: 
191d				; get starting address 
191d			 
191d 21 bb e4			ld hl,os_input+2 
1920 cd b4 10			call get_word_hl 
1923			 
1923 22 de e5			ld (os_cur_ptr),hl	 
1926			 
1926 c3 c2 18			jp monitor 
1929			 
1929			.monedit: 
1929				; get byte to load 
1929			 
1929 21 bb e4			ld hl,os_input+2 
192c cd 54 10			call get_byte 
192f			 
192f				; get address to update 
192f 2a de e5			ld hl, (os_cur_ptr) 
1932			 
1932				; update byte 
1932			 
1932 77				ld (hl), a 
1933			 
1933				; move to next address and save it 
1933			 
1933 23				inc hl 
1934 22 de e5			ld (os_cur_ptr),hl	 
1937			 
1937 c3 c2 18			jp monitor 
193a			 
193a			 
193a .. 00		.monhelptext1: 	db "D-Dump, C-Cont Dump",0 
194e .. 00		.monhelptext2:  db "M-Edit Start, U-Update Byte",0 
196a .. 00		.monhelptext3:  db "G-Call address, B-Breakpoints",0 
1988 .. 00		.monhelptext4:  db "Q-Quit",0 
198f			        
198f			.monhelp: 
198f 3e 00			ld a, display_row_1 
1991 11 3a 19		        ld de, .monhelptext1 
1994			 
1994 cd db 0b			call str_at_display 
1997 3e 28			ld a, display_row_2 
1999 11 4e 19		        ld de, .monhelptext2 
199c					 
199c cd db 0b			call str_at_display 
199f 3e 50			ld a, display_row_3 
19a1 11 6a 19		        ld de, .monhelptext3 
19a4					 
19a4 cd db 0b			call str_at_display 
19a7 3e 78			ld a, display_row_4 
19a9 11 88 19		        ld de, .monhelptext4 
19ac cd db 0b			call str_at_display 
19af			 
19af cd eb 0b			call update_display		 
19b2			 
19b2 cd 08 1b			call next_page_prompt 
19b5 c3 c2 18			jp monitor 
19b8			 
19b8			.monjump:    
19b8 21 bb e4			ld hl,os_input+2 
19bb cd b4 10			call get_word_hl 
19be			 
19be e9				jp (hl) 
19bf c3 c2 18			jp monitor 
19c2			 
19c2			.mondump:    
19c2 21 bb e4			ld hl,os_input+2 
19c5 cd b4 10			call get_word_hl 
19c8			 
19c8 22 de e5			ld (os_cur_ptr),hl	 
19cb cd 10 1a			call dumpcont 
19ce 3e 78			ld a, display_row_4 
19d0 11 6e 18			ld de, endprog 
19d3			 
19d3 cd eb 0b			call update_display		 
19d6			 
19d6 cd 08 1b			call next_page_prompt 
19d9 c3 c2 18			jp monitor 
19dc			.moncdump: 
19dc cd 10 1a			call dumpcont 
19df 3e 78			ld a, display_row_4 
19e1 11 6e 18			ld de, endprog 
19e4			 
19e4 cd eb 0b			call update_display		 
19e7			 
19e7 cd 08 1b			call next_page_prompt 
19ea c3 c2 18			jp monitor 
19ed			 
19ed			 
19ed			; TODO symbol access  
19ed			 
19ed			.symbols:     ;; A list of symbols that can be called up  
19ed ab ed			dw display_fb0 
19ef .. 00			db "fb0",0  
19f3 74 ea		     	dw store_page 
19f5 .. 00			db "store_page",0 
1a00			 
1a00			 
1a00			dump:	; see if we are cotinuing on from the last command by not uncluding any address 
1a00			 
1a00 3a bc e2			ld a,(scratch+1) 
1a03 fe 00			cp 0 
1a05 28 09			jr z, dumpcont 
1a07			 
1a07				; no, not a null term line so has an address to work out.... 
1a07			 
1a07 21 bd e2			ld hl,scratch+2 
1a0a cd b4 10			call get_word_hl 
1a0d			 
1a0d 22 de e5			ld (os_cur_ptr),hl	 
1a10			 
1a10			 
1a10			 
1a10			dumpcont: 
1a10			 
1a10				; dump bytes at ptr 
1a10			 
1a10			 
1a10 3e 00			ld a, display_row_1 
1a12 2a c6 eb			ld hl, (display_fb_active) 
1a15 cd f5 0d			call addatohl 
1a18 cd 40 1a			call .dumpbyterow 
1a1b			 
1a1b 3e 28			ld a, display_row_2 
1a1d 2a c6 eb			ld hl, (display_fb_active) 
1a20 cd f5 0d			call addatohl 
1a23 cd 40 1a			call .dumpbyterow 
1a26			 
1a26			 
1a26 3e 50			ld a, display_row_3 
1a28 2a c6 eb			ld hl, (display_fb_active) 
1a2b cd f5 0d			call addatohl 
1a2e cd 40 1a			call .dumpbyterow 
1a31			 
1a31 3e 78			ld a, display_row_4 
1a33 2a c6 eb			ld hl, (display_fb_active) 
1a36 cd f5 0d			call addatohl 
1a39 cd 40 1a			call .dumpbyterow 
1a3c			 
1a3c cd eb 0b			call update_display 
1a3f			;		jp cli 
1a3f c9				ret 
1a40			 
1a40			.dumpbyterow: 
1a40			 
1a40				;push af 
1a40			 
1a40 e5				push hl 
1a41			 
1a41				; calc where to poke the ascii 
1a41			if display_cols == 20 
1a41				ld a, 16 
1a41			else 
1a41 3e 1f			ld a, 31 
1a43			endif 
1a43			 
1a43 cd f5 0d			call addatohl 
1a46 22 c0 e5			ld (os_word_scratch),hl  		; save pos for later 
1a49			 
1a49			 
1a49			; display decoding address 
1a49 2a de e5		   	ld hl,(os_cur_ptr) 
1a4c			 
1a4c 7c				ld a,h 
1a4d e1				pop hl 
1a4e e5				push hl 
1a4f			;	ld hl, os_word_scratch		; TODO do direct write to frame buffer instead and drop the str_at_display 
1a4f cd fe 0f			call hexout 
1a52 2a de e5		   	ld hl,(os_cur_ptr) 
1a55			 
1a55 7d				ld a,l 
1a56 e1				pop hl 
1a57 23				inc hl 
1a58 23				inc hl 
1a59 e5				push hl 
1a5a			;	ld hl, os_word_scratch+2 
1a5a cd fe 0f			call hexout 
1a5d e1				pop hl 
1a5e 23				inc hl 
1a5f 23				inc hl 
1a60				;ld hl, os_word_scratch+4 
1a60 3e 3a			ld a, ':' 
1a62 77				ld (hl),a 
1a63 23				inc hl 
1a64				;ld a, 0 
1a64				;ld (hl),a 
1a64				;ld de, os_word_scratch 
1a64				;pop af 
1a64				;push af 
1a64			;		ld a, display_row_2 
1a64			;		call str_at_display 
1a64			;		call update_display 
1a64			 
1a64			 
1a64			;pop af 
1a64			;	add 5 
1a64			 
1a64			if display_cols == 20 
1a64				ld b, 4 
1a64			else 
1a64 06 08			ld b, 8 
1a66			endif	 
1a66			 
1a66			.dumpbyte: 
1a66 c5				push bc 
1a67 e5				push hl 
1a68			 
1a68			 
1a68 2a de e5		   	ld hl,(os_cur_ptr) 
1a6b 7e					ld a,(hl) 
1a6c			 
1a6c					; poke the ascii to display 
1a6c 2a c0 e5				ld hl,(os_word_scratch) 
1a6f 77					ld (hl),a 
1a70 23					inc hl 
1a71 22 c0 e5				ld (os_word_scratch),hl 
1a74			 
1a74					 
1a74			 
1a74			 
1a74 e1					pop hl 
1a75 e5					push hl 
1a76			 
1a76 cd fe 0f				call hexout 
1a79			 
1a79					 
1a79 2a de e5		   	ld hl,(os_cur_ptr) 
1a7c 23				inc hl 
1a7d 22 de e5		   	ld (os_cur_ptr),hl 
1a80			 
1a80 e1					pop hl 
1a81 23					inc hl 
1a82 23					inc hl 
1a83 23					inc hl 
1a84			 
1a84			 
1a84			 
1a84					;ld a,0 
1a84					;ld (os_word_scratch+2),a 
1a84					;pop af 
1a84					;push af 
1a84			 
1a84					;ld de, os_word_scratch 
1a84					;call str_at_display 
1a84			;		call update_display 
1a84			;		pop af 
1a84 c1					pop bc 
1a85 c6 03				add 3 
1a87 10 dd			djnz .dumpbyte 
1a89			 
1a89				 
1a89			 
1a89 c9				ret 
1a8a			 
1a8a			jump:	 
1a8a			 
1a8a 21 bd e2			ld hl,scratch+2 
1a8d cd b4 10			call get_word_hl 
1a90				;ld hl,(scratch+2) 
1a90				;call fourehexhl 
1a90			 
1a90 22 de e5			ld (os_cur_ptr),hl	 
1a93			 
1a93 e9				jp (hl) 
1a94			 
1a94			 
1a94			 
1a94			; TODO implement a basic monitor mode to start with 
1a94			 
1a94			 
1a94			 
1a94			 
1a94			 
1a94			 
1a94			 
1a94			 
1a94			 
1a94			; testing and demo code during development 
1a94			 
1a94			 
1a94 .. 00		str1: db "Enter some text...",0 
1aa7 .. 00		clear: db "                    ",0 
1abc			 
1abc			demo: 
1abc			 
1abc			 
1abc			 
1abc			;	call update_display 
1abc			 
1abc				; init scratch input area for testing 
1abc 21 bb e2			ld hl, scratch	 
1abf 3e 00			ld a,0 
1ac1 77				ld (hl),a 
1ac2			 
1ac2			 
1ac2 3e 28		            LD   A, display_row_2 
1ac4			;            CALL fLCD_Pos       ;Position cursor to location in A 
1ac4 11 94 1a		            LD   DE, str1 
1ac7 cd db 0b			call str_at_display 
1aca			 
1aca			;            CALL fLCD_Str       ;Display string pointed to by DE 
1aca			cloop:	 
1aca 3e 50		            LD   A, display_row_3 
1acc			;            CALL fLCD_Pos       ;Position cursor to location in A 
1acc 11 a7 1a		            LD   DE, clear 
1acf			 ;           CALL fLCD_Str       ;Display string pointed to by DE 
1acf cd db 0b				call str_at_display 
1ad2 3e 78			ld a, display_row_4 
1ad4 11 04 1b			ld de, prompt 
1ad7			 
1ad7 cd db 0b				call str_at_display 
1ada cd eb 0b			call update_display 
1add			 
1add 3e 79			ld a, kLCD_Line4+1	 ; TODO using direct screen line writes. Correct this to frame buffer 
1adf 16 0a			ld d, 10 
1ae1 21 bb e2			ld hl, scratch	 
1ae4 cd 22 0e			call input_str 
1ae7			 
1ae7			;	call clear_display 
1ae7			;'	call update_display 
1ae7			 
1ae7 3e 00		            LD   A, display_row_1 
1ae9			;            CALL fLCD_Pos       ;Position cursor to location in A 
1ae9 11 a7 1a		            LD   DE, clear 
1aec cd db 0b				call str_at_display 
1aef			;            CALL fLCD_Str       ;Display string pointed to by DE 
1aef 3e 00		            LD   A, display_row_1 
1af1			;            CALL fLCD_Pos       ;Position cursor to location in A 
1af1 11 bb e2		            LD   DE, scratch 
1af4			;            CALL fLCD_Str       ;Display string pointed to by DE 
1af4 cd db 0b				call str_at_display 
1af7 cd eb 0b			call update_display 
1afa			 
1afa 3e 00				ld a,0 
1afc 21 bb e2			ld hl, scratch 
1aff 77				ld (hl),a 
1b00			 
1b00 00				nop 
1b01 c3 ca 1a			jp cloop 
1b04			 
1b04			 
1b04			 
1b04			; OS Prompt 
1b04			 
1b04 .. 00		prompt: db ">",0 
1b06 .. 00		endprg: db "?",0 
1b08			 
1b08			 
1b08			; handy next page prompt 
1b08			next_page_prompt: 
1b08 e5				push hl 
1b09 d5				push de 
1b0a f5				push af 
1b0b c5				push bc 
1b0c			 
1b0c 3e 9f			ld a,display_row_4 + display_cols - 1 
1b0e 11 06 1b		        ld de, endprg 
1b11 cd db 0b			call str_at_display 
1b14 cd eb 0b			call update_display 
1b17 cd f8 61			call cin_wait 
1b1a c1				pop bc 
1b1b f1				pop af 
1b1c d1				pop de 
1b1d e1				pop hl 
1b1e			 
1b1e			 
1b1e c9				ret 
1b1f			 
1b1f			 
1b1f			; forth parser 
1b1f			 
1b1f			; My forth kernel 
1b1f			include "forth_kernel.asm" 
1b1f			; 
1b1f			; kernel to the forth OS 
1b1f			 
1b1f			DS_TYPE_STR: equ 1     ; string type 
1b1f			DS_TYPE_INUM: equ 2     ; $ 16 bit unsigned int usually a hex address 
1b1f			DS_TYPE_SNUM: equ 3     ; $ 16 bit signed int  
1b1f			;DS_TYPE_FNUM: equ 3      ; 24/32 bit floating point  do string conversion instead of a new type 
1b1f			 
1b1f			FORTH_PARSEV1: equ 0 
1b1f			FORTH_PARSEV2: equ 0 
1b1f			FORTH_PARSEV3: equ 0 
1b1f			FORTH_PARSEV4: equ 0 
1b1f			FORTH_PARSEV5: equ 0 
1b1f			FORTH_PARSEV6: equ 1 
1b1f			 
1b1f			;if FORTH_PARSEV5 
1b1f			;	FORTH_END_BUFFER: equ 0 
1b1f			;else 
1b1f			FORTH_END_BUFFER: equ 127 
1b1f			;endif 
1b1f			 
1b1f			FORTH_TRUE: equ 1 
1b1f			FORTH_FALSE: equ 0 
1b1f			 
1b1f			if FORTH_PARSEV4 
1b1f			include "forth_stackops.asm" 
1b1f			endif 
1b1f			 
1b1f			if FORTH_PARSEV5 
1b1f			include "forth_stackopsv5.asm" 
1b1f			endif 
1b1f			 
1b1f			if FORTH_PARSEV6 
1b1f			include "forth_stackopsv5.asm" 
1b1f			 
1b1f			; Stack operations for v5 parser on wards 
1b1f			; * DATA stack 
1b1f			; * LOOP stack 
1b1f			; * RETURN stack 
1b1f			 
1b1f			 
1b1f			 
1b1f			FORTH_CHK_DSP_UNDER: macro 
1b1f				push hl 
1b1f				push de 
1b1f				ld hl,(cli_data_sp) 
1b1f				ld de, cli_data_stack 
1b1f				call cmp16 
1b1f				jp c, fault_dsp_under 
1b1f				pop de 
1b1f				pop hl 
1b1f				endm 
1b1f			 
1b1f			 
1b1f			FORTH_CHK_RSP_UNDER: macro 
1b1f				push hl 
1b1f				push de 
1b1f				ld hl,(cli_ret_sp) 
1b1f				ld de, cli_ret_stack 
1b1f				call cmp16 
1b1f				jp c, fault_rsp_under 
1b1f				pop de 
1b1f				pop hl 
1b1f				endm 
1b1f			 
1b1f			FORTH_CHK_LOOP_UNDER: macro 
1b1f				push hl 
1b1f				push de 
1b1f				ld hl,(cli_loop_sp) 
1b1f				ld de, cli_loop_stack 
1b1f				call cmp16 
1b1f				jp c, fault_loop_under 
1b1f				pop de 
1b1f				pop hl 
1b1f				endm 
1b1f			 
1b1f			FORTH_ERR_TOS_NOTSTR: macro 
1b1f				; TOSO might need more for checks when used 
1b1f				push af 
1b1f				ld a,(hl) 
1b1f				cp DS_TYPE_STR 
1b1f				jp nz, type_faultn   
1b1f				pop af 
1b1f				endm 
1b1f			 
1b1f			FORTH_ERR_TOS_NOTNUM: macro 
1b1f				push af 
1b1f				ld a,(hl) 
1b1f				cp DS_TYPE_INUM 
1b1f				jp nz, type_faultn   
1b1f				pop af 
1b1f				endm 
1b1f			 
1b1f			 
1b1f			; increase data stack pointer and save hl to it 
1b1f				 
1b1f			FORTH_DSP_NEXT: macro 
1b1f				call macro_forth_dsp_next 
1b1f				endm 
1b1f			 
1b1f			 
1b1f			macro_forth_dsp_next: 
1b1f				if DEBUG_FORTH_STACK_GUARD 
1b1f cd 1e 5e				call check_stacks 
1b22				endif 
1b22 e5				push hl 
1b23 d5				push de 
1b24 eb				ex de,hl 
1b25 2a e8 e9			ld hl,(cli_data_sp) 
1b28 23				inc hl 
1b29 23				inc hl 
1b2a			 
1b2a			; PARSEV5 
1b2a 23				inc hl 
1b2b 22 e8 e9			ld (cli_data_sp),hl 
1b2e 73				ld (hl), e 
1b2f 23				inc hl 
1b30 72				ld (hl), d 
1b31 d1				pop de 
1b32 e1				pop hl 
1b33				if DEBUG_FORTH_STACK_GUARD 
1b33 cd 1e 5e				call check_stacks 
1b36				endif 
1b36 c9				ret 
1b37			 
1b37			 
1b37			; increase ret stack pointer and save hl to it 
1b37				 
1b37			FORTH_RSP_NEXT: macro 
1b37				call macro_forth_rsp_next 
1b37				endm 
1b37			 
1b37			macro_forth_rsp_next: 
1b37				if DEBUG_FORTH_STACK_GUARD 
1b37 cd 1e 5e				call check_stacks 
1b3a				endif 
1b3a e5				push hl 
1b3b d5				push de 
1b3c eb				ex de,hl 
1b3d 2a ec e9			ld hl,(cli_ret_sp) 
1b40 23				inc hl 
1b41 23				inc hl 
1b42 22 ec e9			ld (cli_ret_sp),hl 
1b45 73				ld (hl), e 
1b46 23				inc hl 
1b47 72				ld (hl), d 
1b48 d1				pop de 
1b49 e1				pop hl 
1b4a				if DEBUG_FORTH_STACK_GUARD 
1b4a cd 1e 5e				call check_stacks 
1b4d				endif 
1b4d c9				ret 
1b4e			 
1b4e			; get current ret stack pointer and save to hl  
1b4e				 
1b4e			FORTH_RSP_TOS: macro 
1b4e				call macro_forth_rsp_tos 
1b4e				endm 
1b4e			 
1b4e			macro_forth_rsp_tos: 
1b4e				;push de 
1b4e 2a ec e9			ld hl,(cli_ret_sp) 
1b51 cd 89 1b			call loadhlptrtohl 
1b54				;ld e, (hl) 
1b54				;inc hl 
1b54				;ld d, (hl) 
1b54				;ex de, hl 
1b54					if DEBUG_FORTH_WORDS 
1b54			;			DMARK "RST" 
1b54						CALLMONITOR 
1b54 cd 6f ee			call debug_vector  
1b57				endm  
# End of macro CALLMONITOR
1b57					endif 
1b57				;pop de 
1b57 c9				ret 
1b58			 
1b58			; pop ret stack pointer 
1b58				 
1b58			FORTH_RSP_POP: macro 
1b58				call macro_forth_rsp_pop 
1b58				endm 
1b58			 
1b58			 
1b58			macro_forth_rsp_pop: 
1b58				if DEBUG_FORTH_STACK_GUARD 
1b58			;		DMARK "RPP" 
1b58 cd 1e 5e				call check_stacks 
1b5b					FORTH_CHK_RSP_UNDER 
1b5b e5				push hl 
1b5c d5				push de 
1b5d 2a ec e9			ld hl,(cli_ret_sp) 
1b60 11 a6 e9			ld de, cli_ret_stack 
1b63 cd 13 0e			call cmp16 
1b66 da 35 5f			jp c, fault_rsp_under 
1b69 d1				pop de 
1b6a e1				pop hl 
1b6b				endm 
# End of macro FORTH_CHK_RSP_UNDER
1b6b				endif 
1b6b e5				push hl 
1b6c 2a ec e9			ld hl,(cli_ret_sp) 
1b6f			 
1b6f			 
1b6f				if FORTH_ENABLE_FREE 
1b6f			 
1b6f					; get pointer 
1b6f			 
1b6f					push de 
1b6f					push hl 
1b6f			 
1b6f					ld e, (hl) 
1b6f					inc hl 
1b6f					ld d, (hl) 
1b6f			 
1b6f					ex de, hl 
1b6f					call free 
1b6f			 
1b6f					pop hl 
1b6f					pop de 
1b6f			 
1b6f			 
1b6f				endif 
1b6f			 
1b6f			 
1b6f 2b				dec hl 
1b70 2b				dec hl 
1b71 22 ec e9			ld (cli_ret_sp), hl 
1b74				; do stack underflow checks 
1b74 e1				pop hl 
1b75				if DEBUG_FORTH_STACK_GUARD 
1b75 cd 1e 5e				call check_stacks 
1b78					FORTH_CHK_RSP_UNDER 
1b78 e5				push hl 
1b79 d5				push de 
1b7a 2a ec e9			ld hl,(cli_ret_sp) 
1b7d 11 a6 e9			ld de, cli_ret_stack 
1b80 cd 13 0e			call cmp16 
1b83 da 35 5f			jp c, fault_rsp_under 
1b86 d1				pop de 
1b87 e1				pop hl 
1b88				endm 
# End of macro FORTH_CHK_RSP_UNDER
1b88				endif 
1b88 c9				ret 
1b89			 
1b89			 
1b89			 
1b89			; routine to load word pointed to by hl into hl 
1b89			 
1b89			loadhlptrtohl: 
1b89			 
1b89 d5				push de 
1b8a 5e				ld e, (hl) 
1b8b 23				inc hl 
1b8c 56				ld d, (hl) 
1b8d eb				ex de, hl 
1b8e d1				pop de 
1b8f			 
1b8f c9				ret 
1b90			 
1b90			 
1b90			 
1b90			 
1b90			 
1b90			; push a number held in HL onto the data stack 
1b90			; entry point for pushing a value when already in hl used in function above 
1b90			 
1b90			forth_push_numhl: 
1b90			 
1b90 e5				push hl    ; save value to push 
1b91			 
1b91			if DEBUG_FORTH_PUSH 
1b91				; see if disabled 
1b91			 
1b91			 
1b91 f5				push af 
1b92 3a 6f ee			ld a,(debug_vector) 
1b95 fe c9			cp $c9   ; ret 
1b97			;	ld a, (os_view_disable) 
1b97			;	cp '*' 
1b97 28 34			jr z, .pskip2 
1b99 e5				push hl 
1b9a e5			push hl 
1b9b cd c8 0b			call clear_display 
1b9e e1			pop hl 
1b9f 7c				ld a,h 
1ba0 21 c0 e5			ld hl, os_word_scratch 
1ba3 cd fe 0f			call hexout 
1ba6 e1				pop hl 
1ba7 7d				ld a,l 
1ba8 21 c2 e5			ld hl, os_word_scratch+2 
1bab cd fe 0f			call hexout 
1bae			 
1bae 21 c4 e5			ld hl, os_word_scratch+4 
1bb1 3e 00			ld a,0 
1bb3 77				ld (hl),a 
1bb4 11 c0 e5			ld de,os_word_scratch 
1bb7 3e 28				ld a, display_row_2 
1bb9 cd db 0b				call str_at_display 
1bbc 11 17 50			ld de, .push_num 
1bbf 3e 00			ld a, display_row_1 
1bc1			 
1bc1 cd db 0b				call str_at_display 
1bc4			 
1bc4			 
1bc4 cd eb 0b			call update_display 
1bc7 cd 00 0b			call delay1s 
1bca cd 00 0b			call delay1s 
1bcd			.pskip2:  
1bcd			 
1bcd f1				pop af 
1bce			endif	 
1bce			 
1bce			 
1bce				FORTH_DSP_NEXT 
1bce cd 1f 1b			call macro_forth_dsp_next 
1bd1				endm 
# End of macro FORTH_DSP_NEXT
1bd1			 
1bd1 2a e8 e9			ld hl, (cli_data_sp) 
1bd4			 
1bd4				; save item type 
1bd4 3e 02			ld a,  DS_TYPE_INUM 
1bd6 77				ld (hl), a 
1bd7 23				inc hl 
1bd8			 
1bd8				; get word off stack 
1bd8 d1				pop de 
1bd9 7b				ld a,e 
1bda 77				ld (hl), a 
1bdb 23				inc hl 
1bdc 7a				ld a,d 
1bdd 77				ld (hl), a 
1bde			 
1bde			if DEBUG_FORTH_PUSH 
1bde 2b				dec hl 
1bdf 2b				dec hl 
1be0 2b				dec hl 
1be1						DMARK "PH5" 
1be1 f5				push af  
1be2 3a f6 1b			ld a, (.dmark)  
1be5 32 65 ee			ld (debug_mark),a  
1be8 3a f7 1b			ld a, (.dmark+1)  
1beb 32 66 ee			ld (debug_mark+1),a  
1bee 3a f8 1b			ld a, (.dmark+2)  
1bf1 32 67 ee			ld (debug_mark+2),a  
1bf4 18 03			jr .pastdmark  
1bf6 ..			.dmark: db "PH5"  
1bf9 f1			.pastdmark: pop af  
1bfa			endm  
# End of macro DMARK
1bfa				CALLMONITOR 
1bfa cd 6f ee			call debug_vector  
1bfd				endm  
# End of macro CALLMONITOR
1bfd			endif	 
1bfd			 
1bfd c9				ret 
1bfe			 
1bfe			 
1bfe			; Push a string to stack pointed to by hl 
1bfe			 
1bfe			forth_push_str: 
1bfe			 
1bfe			if DEBUG_FORTH_PUSH 
1bfe						DMARK "PSQ" 
1bfe f5				push af  
1bff 3a 13 1c			ld a, (.dmark)  
1c02 32 65 ee			ld (debug_mark),a  
1c05 3a 14 1c			ld a, (.dmark+1)  
1c08 32 66 ee			ld (debug_mark+1),a  
1c0b 3a 15 1c			ld a, (.dmark+2)  
1c0e 32 67 ee			ld (debug_mark+2),a  
1c11 18 03			jr .pastdmark  
1c13 ..			.dmark: db "PSQ"  
1c16 f1			.pastdmark: pop af  
1c17			endm  
# End of macro DMARK
1c17				CALLMONITOR 
1c17 cd 6f ee			call debug_vector  
1c1a				endm  
# End of macro CALLMONITOR
1c1a			endif	 
1c1a			 
1c1a			 
1c1a			    
1c1a e5				push hl 
1c1b e5				push hl 
1c1c			 
1c1c			;	ld a, 0   ; find end of string 
1c1c cd 5b 11			call strlenz 
1c1f			if DEBUG_FORTH_PUSH 
1c1f						DMARK "PQ2" 
1c1f f5				push af  
1c20 3a 34 1c			ld a, (.dmark)  
1c23 32 65 ee			ld (debug_mark),a  
1c26 3a 35 1c			ld a, (.dmark+1)  
1c29 32 66 ee			ld (debug_mark+1),a  
1c2c 3a 36 1c			ld a, (.dmark+2)  
1c2f 32 67 ee			ld (debug_mark+2),a  
1c32 18 03			jr .pastdmark  
1c34 ..			.dmark: db "PQ2"  
1c37 f1			.pastdmark: pop af  
1c38			endm  
# End of macro DMARK
1c38				CALLMONITOR 
1c38 cd 6f ee			call debug_vector  
1c3b				endm  
# End of macro CALLMONITOR
1c3b			endif	 
1c3b eb				ex de, hl 
1c3c e1				pop hl   ; get ptr to start of string 
1c3d			if DEBUG_FORTH_PUSH 
1c3d						DMARK "PQ3" 
1c3d f5				push af  
1c3e 3a 52 1c			ld a, (.dmark)  
1c41 32 65 ee			ld (debug_mark),a  
1c44 3a 53 1c			ld a, (.dmark+1)  
1c47 32 66 ee			ld (debug_mark+1),a  
1c4a 3a 54 1c			ld a, (.dmark+2)  
1c4d 32 67 ee			ld (debug_mark+2),a  
1c50 18 03			jr .pastdmark  
1c52 ..			.dmark: db "PQ3"  
1c55 f1			.pastdmark: pop af  
1c56			endm  
# End of macro DMARK
1c56				CALLMONITOR 
1c56 cd 6f ee			call debug_vector  
1c59				endm  
# End of macro CALLMONITOR
1c59			endif	 
1c59 19				add hl,de 
1c5a			if DEBUG_FORTH_PUSH 
1c5a						DMARK "PQE" 
1c5a f5				push af  
1c5b 3a 6f 1c			ld a, (.dmark)  
1c5e 32 65 ee			ld (debug_mark),a  
1c61 3a 70 1c			ld a, (.dmark+1)  
1c64 32 66 ee			ld (debug_mark+1),a  
1c67 3a 71 1c			ld a, (.dmark+2)  
1c6a 32 67 ee			ld (debug_mark+2),a  
1c6d 18 03			jr .pastdmark  
1c6f ..			.dmark: db "PQE"  
1c72 f1			.pastdmark: pop af  
1c73			endm  
# End of macro DMARK
1c73				CALLMONITOR 
1c73 cd 6f ee			call debug_vector  
1c76				endm  
# End of macro CALLMONITOR
1c76			endif	 
1c76			 
1c76 2b				dec hl    ; see if there is an optional trailing double quote 
1c77 7e				ld a,(hl) 
1c78 fe 22			cp '"' 
1c7a 20 03			jr nz, .strnoq 
1c7c 3e 00			ld a, 0      ; get rid of double quote 
1c7e 77				ld (hl), a 
1c7f 23			.strnoq: inc hl 
1c80			 
1c80 3e 00			ld a, 0 
1c82 77				ld (hl), a     ; add null term and get rid of trailing double quote 
1c83			 
1c83 13				inc de ; add one for the type string 
1c84 13				inc de ; add one for null term??? 
1c85			 
1c85				; tos is get string pointer again 
1c85				; de contains space to allocate 
1c85				 
1c85 d5				push de 
1c86			 
1c86 eb				ex de, hl 
1c87			 
1c87				;push af 
1c87			 
1c87			if DEBUG_FORTH_PUSH 
1c87						DMARK "PHm" 
1c87 f5				push af  
1c88 3a 9c 1c			ld a, (.dmark)  
1c8b 32 65 ee			ld (debug_mark),a  
1c8e 3a 9d 1c			ld a, (.dmark+1)  
1c91 32 66 ee			ld (debug_mark+1),a  
1c94 3a 9e 1c			ld a, (.dmark+2)  
1c97 32 67 ee			ld (debug_mark+2),a  
1c9a 18 03			jr .pastdmark  
1c9c ..			.dmark: db "PHm"  
1c9f f1			.pastdmark: pop af  
1ca0			endm  
# End of macro DMARK
1ca0				CALLMONITOR 
1ca0 cd 6f ee			call debug_vector  
1ca3				endm  
# End of macro CALLMONITOR
1ca3			endif	 
1ca3 cd d0 11			call malloc	; on ret hl now contains allocated memory 
1ca6				if DEBUG_FORTH_MALLOC_GUARD 
1ca6 cc 6f 50				call z,malloc_error 
1ca9				endif 
1ca9			 
1ca9				 
1ca9 c1				pop bc    ; get length 
1caa d1				pop de   ;  get string start    
1cab			 
1cab				; hl has destination from malloc 
1cab			 
1cab eb				ex de, hl    ; prep for ldir 
1cac			 
1cac d5				push de   ; save malloc area for DSP later 
1cad				;push hl   ; save malloc area for DSP later 
1cad			 
1cad			if DEBUG_FORTH_PUSH 
1cad						DMARK "PHc" 
1cad f5				push af  
1cae 3a c2 1c			ld a, (.dmark)  
1cb1 32 65 ee			ld (debug_mark),a  
1cb4 3a c3 1c			ld a, (.dmark+1)  
1cb7 32 66 ee			ld (debug_mark+1),a  
1cba 3a c4 1c			ld a, (.dmark+2)  
1cbd 32 67 ee			ld (debug_mark+2),a  
1cc0 18 03			jr .pastdmark  
1cc2 ..			.dmark: db "PHc"  
1cc5 f1			.pastdmark: pop af  
1cc6			endm  
# End of macro DMARK
1cc6				CALLMONITOR 
1cc6 cd 6f ee			call debug_vector  
1cc9				endm  
# End of macro CALLMONITOR
1cc9			endif	 
1cc9			 
1cc9			 
1cc9 ed b0			ldir 
1ccb			 
1ccb			 
1ccb				; push malloc to data stack     macro?????  
1ccb			 
1ccb				FORTH_DSP_NEXT 
1ccb cd 1f 1b			call macro_forth_dsp_next 
1cce				endm 
# End of macro FORTH_DSP_NEXT
1cce			 
1cce				; save value and type 
1cce			 
1cce 2a e8 e9			ld hl, (cli_data_sp) 
1cd1			 
1cd1				; save item type 
1cd1 3e 01			ld a,  DS_TYPE_STR 
1cd3 77				ld (hl), a 
1cd4 23				inc hl 
1cd5			 
1cd5				; get malloc word off stack 
1cd5 d1				pop de 
1cd6 73				ld (hl), e 
1cd7 23				inc hl 
1cd8 72				ld (hl), d 
1cd9			 
1cd9			 
1cd9			 
1cd9			if DEBUG_FORTH_PUSH 
1cd9 2a e8 e9			ld hl, (cli_data_sp) 
1cdc						DMARK "PHS" 
1cdc f5				push af  
1cdd 3a f1 1c			ld a, (.dmark)  
1ce0 32 65 ee			ld (debug_mark),a  
1ce3 3a f2 1c			ld a, (.dmark+1)  
1ce6 32 66 ee			ld (debug_mark+1),a  
1ce9 3a f3 1c			ld a, (.dmark+2)  
1cec 32 67 ee			ld (debug_mark+2),a  
1cef 18 03			jr .pastdmark  
1cf1 ..			.dmark: db "PHS"  
1cf4 f1			.pastdmark: pop af  
1cf5			endm  
# End of macro DMARK
1cf5				CALLMONITOR 
1cf5 cd 6f ee			call debug_vector  
1cf8				endm  
# End of macro CALLMONITOR
1cf8			;	ex de,hl 
1cf8			endif	 
1cf8				; in case of spaces, skip the ptr past the copied string 
1cf8				;pop af 
1cf8				;ld (cli_origptr),hl 
1cf8			 
1cf8 c9				ret 
1cf9			 
1cf9			 
1cf9			 
1cf9			; TODO ascii push input onto stack given hl to start of input 
1cf9			 
1cf9			; identify type 
1cf9			; if starts with a " then a string 
1cf9			; otherwise it is a number 
1cf9			;  
1cf9			; if a string 
1cf9			;     scan for ending " to get length of string to malloc for + 1 
1cf9			;     malloc 
1cf9			;     put pointer to string on stack first byte flags as string 
1cf9			; 
1cf9			; else a number 
1cf9			;    look for number format identifier 
1cf9			;    $xx hex 
1cf9			;    %xxxxx bin 
1cf9			;    xxxxx decimal 
1cf9			;    convert number to 16bit word.  
1cf9			;    malloc word + 1 with flag to identiy as num 
1cf9			;    put pointer to number on stack 
1cf9			;   
1cf9			;  
1cf9			  
1cf9			forth_apush: 
1cf9				; kernel push 
1cf9			 
1cf9			if DEBUG_FORTH_PUSH 
1cf9						DMARK "PSH" 
1cf9 f5				push af  
1cfa 3a 0e 1d			ld a, (.dmark)  
1cfd 32 65 ee			ld (debug_mark),a  
1d00 3a 0f 1d			ld a, (.dmark+1)  
1d03 32 66 ee			ld (debug_mark+1),a  
1d06 3a 10 1d			ld a, (.dmark+2)  
1d09 32 67 ee			ld (debug_mark+2),a  
1d0c 18 03			jr .pastdmark  
1d0e ..			.dmark: db "PSH"  
1d11 f1			.pastdmark: pop af  
1d12			endm  
# End of macro DMARK
1d12				CALLMONITOR 
1d12 cd 6f ee			call debug_vector  
1d15				endm  
# End of macro CALLMONITOR
1d15			endif	 
1d15				; identify input type 
1d15			 
1d15 7e				ld a,(hl) 
1d16			 
1d16 fe 23			cp '#' 
1d18 ca 52 1d			jp z, .fapdec 
1d1b			 
1d1b			 
1d1b fe 22			cp '"' 
1d1d 28 0a			jr z, .fapstr 
1d1f fe 24			cp '$' 
1d21 ca 49 1d			jp z, .faphex 
1d24 fe 25			cp '%' 
1d26 ca 31 1d			jp z, .fapbin 
1d29			;	cp 'b' 
1d29			;	jp z, .fabin 
1d29				; else decimal 
1d29			 
1d29				; TODO do decimal conversion 
1d29				; decimal is stored as a 16bit word 
1d29			 
1d29				; by default everything is a string if type is not detected 
1d29			.fapstr: ; 
1d29 fe 22			cp '"' 
1d2b 20 01			jr nz, .strnoqu 
1d2d 23				inc hl 
1d2e			.strnoqu: 
1d2e c3 fe 1b			jp forth_push_str 
1d31			 
1d31			 
1d31			 
1d31			.fapbin:    ; push a binary string.  
1d31 11 00 00			ld de, 0   ; hold a 16bit value 
1d34			 
1d34 23			.fapbinshift:	inc hl  
1d35 7e				ld a,(hl) 
1d36 fe 00			cp 0     ; done scanning  
1d38 28 0b			jr z, .fapbdone  	; got it in HL so push  
1d3a			 
1d3a				; left shift de 
1d3a eb				ex de, hl	 
1d3b 29				add hl, hl 
1d3c			 
1d3c				; is 1 
1d3c fe 31			cp '1' 
1d3e 20 02			jr nz, .binzero 
1d40 cb 4d			bit 1, l 
1d42			.binzero: 
1d42 eb				ex de, hl	 ; save current de 
1d43 18 ef			jr .fapbinshift 
1d45			 
1d45			.fapbdone: 
1d45 eb				ex de, hl 
1d46 c3 90 1b			jp forth_push_numhl 
1d49			 
1d49			 
1d49			.faphex:   ; hex is always stored as a 16bit word 
1d49				; skip number prefix 
1d49 23				inc hl 
1d4a				; turn ascii into number 
1d4a cd b4 10			call get_word_hl	; ret 16bit word in hl 
1d4d			 
1d4d c3 90 1b			jp forth_push_numhl 
1d50			 
1d50 00				 nop 
1d51			 
1d51			.fabin:   ; TODO bin conversion 
1d51			 
1d51			 
1d51 c9				ret 
1d52			.fapdec:	 
1d52				; string to dec conversion 
1d52 23				inc hl 
1d53 eb				ex de, hl 
1d54 cd f2 10			call string_to_uint16 
1d57 c3 90 1b			jp forth_push_numhl 
1d5a c9				ret 
1d5b				 
1d5b			;atoui_16: 
1d5b			 
1d5b			; get either a string ptr or a 16bit word from the data stack 
1d5b			 
1d5b			FORTH_DSP: macro 
1d5b				call macro_forth_dsp 
1d5b				endm 
1d5b			 
1d5b			macro_forth_dsp: 
1d5b				; data stack pointer points to current word on tos 
1d5b			 
1d5b 2a e8 e9			ld hl,(cli_data_sp) 
1d5e			 
1d5e				if DEBUG_FORTH_PUSH 
1d5e						DMARK "DSP" 
1d5e f5				push af  
1d5f 3a 73 1d			ld a, (.dmark)  
1d62 32 65 ee			ld (debug_mark),a  
1d65 3a 74 1d			ld a, (.dmark+1)  
1d68 32 66 ee			ld (debug_mark+1),a  
1d6b 3a 75 1d			ld a, (.dmark+2)  
1d6e 32 67 ee			ld (debug_mark+2),a  
1d71 18 03			jr .pastdmark  
1d73 ..			.dmark: db "DSP"  
1d76 f1			.pastdmark: pop af  
1d77			endm  
# End of macro DMARK
1d77			 
1d77 cd a2 50				call display_data_sp 
1d7a				;call break_point_state 
1d7a				;rst 030h 
1d7a				CALLMONITOR 
1d7a cd 6f ee			call debug_vector  
1d7d				endm  
# End of macro CALLMONITOR
1d7d				endif 
1d7d			 
1d7d c9				ret 
1d7e			 
1d7e			; return hl to start of value on stack 
1d7e			 
1d7e			FORTH_DSP_VALUE: macro 
1d7e				call macro_forth_dsp_value 
1d7e				endm 
1d7e			 
1d7e			macro_forth_dsp_value: 
1d7e			 
1d7e				FORTH_DSP 
1d7e cd 5b 1d			call macro_forth_dsp 
1d81				endm 
# End of macro FORTH_DSP
1d81			 
1d81 d5				push de 
1d82			 
1d82 23				inc hl ; skip type 
1d83			 
1d83 5e				ld e, (hl) 
1d84 23				inc hl 
1d85 56				ld d, (hl) 
1d86 eb				ex de,hl  
1d87			 
1d87 d1				pop de 
1d88			 
1d88 c9				ret 
1d89			 
1d89			; return hl to start of value to second item on stack 
1d89			 
1d89			FORTH_DSP_VALUEM1: macro 
1d89				call macro_forth_dsp_value_m1 
1d89				endm 
1d89			 
1d89			macro_forth_dsp_value_m1: 
1d89			 
1d89				FORTH_DSP 
1d89 cd 5b 1d			call macro_forth_dsp 
1d8c				endm 
# End of macro FORTH_DSP
1d8c			 
1d8c 2b				dec hl 
1d8d 2b				dec hl 
1d8e			;	dec hl 
1d8e			 
1d8e d5				push de 
1d8f			 
1d8f 5e				ld e, (hl) 
1d90 23				inc hl 
1d91 56				ld d, (hl) 
1d92 eb				ex de,hl  
1d93			 
1d93 d1				pop de 
1d94			 
1d94 c9				ret 
1d95			 
1d95				 
1d95			 
1d95			; whatever the current top os stack points to, we are now done with it so return memory to malloc 
1d95			 
1d95			FORTH_DSP_POP: macro 
1d95				call macro_forth_dsp_pop 
1d95				endm 
1d95			 
1d95			 
1d95			; get the tos data type 
1d95			 
1d95			FORTH_DSP_TYPE:   macro 
1d95			 
1d95				;FORTH_DSP_VALUE 
1d95				FORTH_DSP 
1d95				 
1d95				; hl points to value 
1d95				; check type 
1d95			 
1d95				ld a,(hl) 
1d95			 
1d95				endm 
1d95			 
1d95			; load the tos value into hl 
1d95			 
1d95			 
1d95			FORTH_DSP_VALUEHL:  macro 
1d95				call macro_dsp_valuehl 
1d95				endm 
1d95			 
1d95			 
1d95			 
1d95			macro_dsp_valuehl: 
1d95				FORTH_DSP_VALUE 
1d95 cd 7e 1d			call macro_forth_dsp_value 
1d98				endm 
# End of macro FORTH_DSP_VALUE
1d98			 
1d98				;FORTH_ERR_TOS_NOTNUM 
1d98			 
1d98				;inc hl   ; skip type id 
1d98			 
1d98			;	push de 
1d98			; 
1d98			;	ld e, (hl) 
1d98			;	inc hl 
1d98			;	ld d, (hl) 
1d98			;	ex de,hl  
1d98			 
1d98			;	pop de 
1d98			 
1d98				if DEBUG_FORTH_PUSH 
1d98						DMARK "DVL" 
1d98 f5				push af  
1d99 3a ad 1d			ld a, (.dmark)  
1d9c 32 65 ee			ld (debug_mark),a  
1d9f 3a ae 1d			ld a, (.dmark+1)  
1da2 32 66 ee			ld (debug_mark+1),a  
1da5 3a af 1d			ld a, (.dmark+2)  
1da8 32 67 ee			ld (debug_mark+2),a  
1dab 18 03			jr .pastdmark  
1dad ..			.dmark: db "DVL"  
1db0 f1			.pastdmark: pop af  
1db1			endm  
# End of macro DMARK
1db1				CALLMONITOR 
1db1 cd 6f ee			call debug_vector  
1db4				endm  
# End of macro CALLMONITOR
1db4				endif 
1db4 c9				ret 
1db5			 
1db5			forth_apushstrhl:      
1db5				; push of string requires use of cli_origptr 
1db5				; bodge use 
1db5			 
1db5				; get current cli_origptr, save, update with temp pointer  
1db5 ed 5b 38 ea		ld de, (cli_origptr) 
1db9 22 38 ea			ld (cli_origptr), hl 
1dbc d5				push de 
1dbd cd f9 1c			call forth_apush 
1dc0 d1				pop de 
1dc1 ed 53 38 ea		ld (cli_origptr), de 
1dc5 c9			        ret	 
1dc6			 
1dc6			 
1dc6			; increase loop stack pointer and save hl to it 
1dc6				 
1dc6			FORTH_LOOP_NEXT: macro 
1dc6				call macro_forth_loop_next 
1dc6				;nop 
1dc6				endm 
1dc6			 
1dc6			macro_forth_loop_next: 
1dc6				if DEBUG_FORTH_STACK_GUARD 
1dc6 cd 1e 5e				call check_stacks 
1dc9				endif 
1dc9 e5				push hl 
1dca d5				push de 
1dcb eb				ex de,hl 
1dcc 2a ea e9			ld hl,(cli_loop_sp) 
1dcf 23				inc hl 
1dd0 23				inc hl 
1dd1					if DEBUG_FORTH_WORDS 
1dd1						DMARK "LNX" 
1dd1 f5				push af  
1dd2 3a e6 1d			ld a, (.dmark)  
1dd5 32 65 ee			ld (debug_mark),a  
1dd8 3a e7 1d			ld a, (.dmark+1)  
1ddb 32 66 ee			ld (debug_mark+1),a  
1dde 3a e8 1d			ld a, (.dmark+2)  
1de1 32 67 ee			ld (debug_mark+2),a  
1de4 18 03			jr .pastdmark  
1de6 ..			.dmark: db "LNX"  
1de9 f1			.pastdmark: pop af  
1dea			endm  
# End of macro DMARK
1dea						CALLMONITOR 
1dea cd 6f ee			call debug_vector  
1ded				endm  
# End of macro CALLMONITOR
1ded					endif 
1ded 22 ea e9			ld (cli_loop_sp),hl 
1df0 73				ld (hl), e 
1df1 23				inc hl 
1df2 72				ld (hl), d 
1df3 d1				pop de    ; been reversed so save a swap on restore 
1df4 e1				pop hl 
1df5				if DEBUG_FORTH_STACK_GUARD 
1df5 cd 1e 5e				call check_stacks 
1df8				endif 
1df8 c9				ret 
1df9			 
1df9			; get current ret stack pointer and save to hl  
1df9				 
1df9			FORTH_LOOP_TOS: macro 
1df9				call macro_forth_loop_tos 
1df9				endm 
1df9			 
1df9			macro_forth_loop_tos: 
1df9 d5				push de 
1dfa 2a ea e9			ld hl,(cli_loop_sp) 
1dfd 5e				ld e, (hl) 
1dfe 23				inc hl 
1dff 56				ld d, (hl) 
1e00 eb				ex de, hl 
1e01 d1				pop de 
1e02 c9				ret 
1e03			 
1e03			; pop loop stack pointer 
1e03				 
1e03			FORTH_LOOP_POP: macro 
1e03				call macro_forth_loop_pop 
1e03				endm 
1e03			 
1e03			 
1e03			macro_forth_loop_pop: 
1e03				if DEBUG_FORTH_STACK_GUARD 
1e03					DMARK "LPP" 
1e03 f5				push af  
1e04 3a 18 1e			ld a, (.dmark)  
1e07 32 65 ee			ld (debug_mark),a  
1e0a 3a 19 1e			ld a, (.dmark+1)  
1e0d 32 66 ee			ld (debug_mark+1),a  
1e10 3a 1a 1e			ld a, (.dmark+2)  
1e13 32 67 ee			ld (debug_mark+2),a  
1e16 18 03			jr .pastdmark  
1e18 ..			.dmark: db "LPP"  
1e1b f1			.pastdmark: pop af  
1e1c			endm  
# End of macro DMARK
1e1c cd 1e 5e				call check_stacks 
1e1f					FORTH_CHK_LOOP_UNDER 
1e1f e5				push hl 
1e20 d5				push de 
1e21 2a ea e9			ld hl,(cli_loop_sp) 
1e24 11 24 e9			ld de, cli_loop_stack 
1e27 cd 13 0e			call cmp16 
1e2a da 3b 5f			jp c, fault_loop_under 
1e2d d1				pop de 
1e2e e1				pop hl 
1e2f				endm 
# End of macro FORTH_CHK_LOOP_UNDER
1e2f				endif 
1e2f e5				push hl 
1e30 2a ea e9			ld hl,(cli_loop_sp) 
1e33 2b				dec hl 
1e34 2b				dec hl 
1e35 22 ea e9			ld (cli_loop_sp), hl 
1e38				; TODO do stack underflow checks 
1e38 e1				pop hl 
1e39				if DEBUG_FORTH_STACK_GUARD 
1e39 cd 1e 5e				call check_stacks 
1e3c					FORTH_CHK_LOOP_UNDER 
1e3c e5				push hl 
1e3d d5				push de 
1e3e 2a ea e9			ld hl,(cli_loop_sp) 
1e41 11 24 e9			ld de, cli_loop_stack 
1e44 cd 13 0e			call cmp16 
1e47 da 3b 5f			jp c, fault_loop_under 
1e4a d1				pop de 
1e4b e1				pop hl 
1e4c				endm 
# End of macro FORTH_CHK_LOOP_UNDER
1e4c				endif 
1e4c c9				ret 
1e4d			 
1e4d			macro_forth_dsp_pop: 
1e4d			 
1e4d e5				push hl 
1e4e			 
1e4e				; release malloc data 
1e4e			 
1e4e				if DEBUG_FORTH_STACK_GUARD 
1e4e cd 1e 5e				call check_stacks 
1e51					FORTH_CHK_DSP_UNDER 
1e51 e5				push hl 
1e52 d5				push de 
1e53 2a e8 e9			ld hl,(cli_data_sp) 
1e56 11 22 e8			ld de, cli_data_stack 
1e59 cd 13 0e			call cmp16 
1e5c da 2f 5f			jp c, fault_dsp_under 
1e5f d1				pop de 
1e60 e1				pop hl 
1e61				endm 
# End of macro FORTH_CHK_DSP_UNDER
1e61				endif 
1e61				;ld hl,(cli_data_sp) 
1e61			if DEBUG_FORTH_DOT 
1e61				DMARK "DPP" 
1e61 f5				push af  
1e62 3a 76 1e			ld a, (.dmark)  
1e65 32 65 ee			ld (debug_mark),a  
1e68 3a 77 1e			ld a, (.dmark+1)  
1e6b 32 66 ee			ld (debug_mark+1),a  
1e6e 3a 78 1e			ld a, (.dmark+2)  
1e71 32 67 ee			ld (debug_mark+2),a  
1e74 18 03			jr .pastdmark  
1e76 ..			.dmark: db "DPP"  
1e79 f1			.pastdmark: pop af  
1e7a			endm  
# End of macro DMARK
1e7a				CALLMONITOR 
1e7a cd 6f ee			call debug_vector  
1e7d				endm  
# End of macro CALLMONITOR
1e7d			endif	 
1e7d			 
1e7d			 
1e7d			if FORTH_ENABLE_DSPPOPFREE 
1e7d			 
1e7d				FORTH_DSP 
1e7d cd 5b 1d			call macro_forth_dsp 
1e80				endm 
# End of macro FORTH_DSP
1e80			 
1e80 7e				ld a, (hl) 
1e81 fe 01			cp DS_TYPE_STR 
1e83 20 22			jr nz, .skippopfree 
1e85			 
1e85				FORTH_DSP_VALUEHL 
1e85 cd 95 1d			call macro_dsp_valuehl 
1e88				endm 
# End of macro FORTH_DSP_VALUEHL
1e88			;	nop 
1e88			if DEBUG_FORTH_DOT 
1e88				DMARK "DPf" 
1e88 f5				push af  
1e89 3a 9d 1e			ld a, (.dmark)  
1e8c 32 65 ee			ld (debug_mark),a  
1e8f 3a 9e 1e			ld a, (.dmark+1)  
1e92 32 66 ee			ld (debug_mark+1),a  
1e95 3a 9f 1e			ld a, (.dmark+2)  
1e98 32 67 ee			ld (debug_mark+2),a  
1e9b 18 03			jr .pastdmark  
1e9d ..			.dmark: db "DPf"  
1ea0 f1			.pastdmark: pop af  
1ea1			endm  
# End of macro DMARK
1ea1				CALLMONITOR 
1ea1 cd 6f ee			call debug_vector  
1ea4				endm  
# End of macro CALLMONITOR
1ea4			endif	 
1ea4 cd 9a 12			call free 
1ea7			.skippopfree: 
1ea7				 
1ea7			 
1ea7			endif 
1ea7			 
1ea7			if DEBUG_FORTH_DOT_KEY 
1ea7				DMARK "DP2" 
1ea7				CALLMONITOR 
1ea7			endif	 
1ea7			 
1ea7				; move pointer down 
1ea7			 
1ea7 2a e8 e9			ld hl,(cli_data_sp) 
1eaa 2b				dec hl 
1eab 2b				dec hl 
1eac			; PARSEV5 
1eac 2b				dec hl 
1ead 22 e8 e9			ld (cli_data_sp), hl 
1eb0			 
1eb0				if DEBUG_FORTH_STACK_GUARD 
1eb0 cd 1e 5e				call check_stacks 
1eb3					FORTH_CHK_DSP_UNDER 
1eb3 e5				push hl 
1eb4 d5				push de 
1eb5 2a e8 e9			ld hl,(cli_data_sp) 
1eb8 11 22 e8			ld de, cli_data_stack 
1ebb cd 13 0e			call cmp16 
1ebe da 2f 5f			jp c, fault_dsp_under 
1ec1 d1				pop de 
1ec2 e1				pop hl 
1ec3				endm 
# End of macro FORTH_CHK_DSP_UNDER
1ec3				endif 
1ec3			 
1ec3 e1				pop hl 
1ec4			 
1ec4 c9				ret 
1ec5			 
1ec5			getwordathl: 
1ec5				; hl points to an address 
1ec5				; load hl with the word at that address 
1ec5			 
1ec5 d5				push de 
1ec6			 
1ec6 5e				ld e, (hl) 
1ec7 23				inc hl 
1ec8 56				ld d, (hl) 
1ec9 eb				ex de, hl 
1eca			 
1eca d1				pop de 
1ecb c9				ret 
1ecc			 
1ecc			 
1ecc			; functions to manuplite stack pointers 
1ecc			 
1ecc			; generate fragment to set hl to be pointer to a stack item 
1ecc			 
1ecc			FORTH_DSP_PTR: macro  x 
1ecc				ld hl,(cli_data_sp) 
1ecc				ld de, x * 3 
1ecc				sbc hl, de 
1ecc				endm 
1ecc			 
1ecc			 
1ecc			 
1ecc			; copy point in hl to stack tmp storage slots 1-4 
1ecc			hltostack1: 
1ecc 11 b8 e2			ld de, os_stack_1  
1ecf c3 fa 1e			jp hltostackmv 
1ed2			 
1ed2			hltostack2:  
1ed2 11 b5 e2			ld de, os_stack_2 
1ed5 c3 fa 1e			jp hltostackmv 
1ed8			 
1ed8			hltostack3:  
1ed8 11 b2 e2			ld de, os_stack_3 
1edb c3 fa 1e			jp hltostackmv 
1ede			 
1ede			hltostack4:  
1ede 11 af e2			ld de, os_stack_4  
1ee1 c3 fa 1e			jp hltostackmv 
1ee4			 
1ee4			; copy to point in hl from stack tmp storage slots 1-4 
1ee4			hlfromstack1: 
1ee4 11 b8 e2			ld de, os_stack_1 
1ee7 c3 f9 1e			jp hlfromsttackmv 
1eea			 
1eea			hlfromstack2:  
1eea 11 b5 e2			ld de, os_stack_2 
1eed c3 f9 1e			jp hlfromsttackmv 
1ef0			 
1ef0			hlfromstack3:  
1ef0 11 b2 e2			ld de, os_stack_3 
1ef3 c3 f9 1e			jp hlfromsttackmv 
1ef6			 
1ef6			hlfromstack4:  
1ef6 11 af e2			ld de, os_stack_4 
1ef9			 
1ef9			hlfromsttackmv: 
1ef9 eb				ex de, hl 
1efa			 
1efa			hltostackmv: 
1efa			 
1efa				; do stack move 
1efa c5				push bc 
1efb 01 03 00			ld bc, 3 
1efe ed b0			ldir  
1f00 c1				pop bc	 
1f01 c9				ret 
1f02			 
1f02			; eof 
1f02			 
# End of file forth_stackopsv5.asm
1f02			endif 
1f02			loadwordinhl:	 
1f02			 
1f02 d5				push de 
1f03			 
1f03 5e				ld e, (hl) 
1f04 23				inc hl 
1f05 56				ld d, (hl) 
1f06 eb				ex de,hl  
1f07			 
1f07 d1				pop de 
1f08			 
1f08 c9				ret 
1f09			 
1f09			user_word_eol:  
1f09				; hl contains the pointer to where to create a linked list item from the end 
1f09				; of the user dict to continue on at the system word dict 
1f09				 
1f09				; poke the stub of the word list linked list to repoint to rom words 
1f09			 
1f09				; stub format 
1f09				; db   word id 
1f09				; dw    link to next word 
1f09			        ; db char length of token 
1f09				; db string + 0 term 
1f09				; db exec code....  
1f09			 
1f09 3e 00			ld a, WORD_SYS_ROOT     ; root word 
1f0b 77				ld (hl), a		; word id 
1f0c 23				inc hl 
1f0d			 
1f0d 11 c4 20			ld de, sysdict 
1f10 73				ld (hl), e		; next word link ie system dict 
1f11 23				inc hl 
1f12 72				ld (hl), d		; next word link ie system dict 
1f13 23				inc hl	 
1f14			 
1f14			;	ld (hl), sysdict		; next word link ie system dict 
1f14			;	inc hl 
1f14			;	inc hl 
1f14			 
1f14			;	inc hl 
1f14			;	inc hl 
1f14			 
1f14 3e 02			ld a, 2			; word length is 0 
1f16 77				ld (hl), a	 
1f17 23				inc hl 
1f18			 
1f18 3e 7e			ld a, '~'			; word length is 0 
1f1a 77				ld (hl), a	 
1f1b 23				inc hl 
1f1c 3e 00			ld a, 0			; save empty word 
1f1e 77				ld (hl), a 
1f1f			 
1f1f c9				ret 
1f20			 
1f20				 
1f20			 
1f20			forthexec_cleanup: 
1f20				FORTH_RSP_POP 
1f20 cd 58 1b			call macro_forth_rsp_pop 
1f23				endm 
# End of macro FORTH_RSP_POP
1f23 c9				ret 
1f24			 
1f24			forth_call_hl: 
1f24				; taking hl 
1f24 e5				push hl 
1f25 c9				ret 
1f26			 
1f26			; this is called to reset Forth system but keep existing uwords etc 
1f26			 
1f26			forth_warmstart: 
1f26				; setup stack over/under flow checks 
1f26				if DEBUG_FORTH_STACK_GUARD 
1f26 cd 04 5e				call chk_stk_init 
1f29				endif 
1f29			 
1f29				; init stack pointers  - * these stacks go upwards *  
1f29 21 a6 e9			ld hl, cli_ret_stack 
1f2c 22 ec e9			ld (cli_ret_sp), hl	 
1f2f				; set bottom of stack 
1f2f 3e 00			ld a,0 
1f31 77				ld (hl),a 
1f32 23				inc hl 
1f33 77				ld (hl),a 
1f34			 
1f34 21 22 e8			ld hl, cli_data_stack 
1f37 22 e8 e9			ld (cli_data_sp), hl	 
1f3a				; set bottom of stack 
1f3a 3e 00			ld a,0 
1f3c 77				ld (hl),a 
1f3d 23				inc hl 
1f3e 77				ld (hl),a 
1f3f			 
1f3f 21 24 e9			ld hl, cli_loop_stack 
1f42 22 ea e9			ld (cli_loop_sp), hl	 
1f45				; set bottom of stack 
1f45 3e 00			ld a,0 
1f47 77				ld (hl),a 
1f48 23				inc hl 
1f49 77				ld (hl),a 
1f4a			 
1f4a				; init extent of current open file 
1f4a			 
1f4a 3e 00			ld a, 0 
1f4c 32 64 ea			ld (store_openext), a 
1f4f			 
1f4f c9				ret 
1f50			 
1f50			 
1f50			 
1f50			; Cold Start - this is called to setup the whole Forth system 
1f50			 
1f50			forth_init: 
1f50			 
1f50				; setup stack over/under flow checks 
1f50			 
1f50			;	if DEBUG_FORTH_STACK_GUARD 
1f50			;		call chk_stk_init 
1f50			;	endif 
1f50			 
1f50				; enable auto display updates (slow.....) 
1f50			 
1f50 3e 01			ld a, 1 
1f52 32 36 ea			ld (cli_autodisplay), a 
1f55			 
1f55				; if storage is in use disable long reads for now 
1f55 3e 00			ld a, 0 
1f57 32 6f ea			ld (store_longread), a 
1f5a			 
1f5a			 
1f5a				; show start up screen 
1f5a			 
1f5a cd c8 0b			call clear_display 
1f5d			 
1f5d 3e 00			ld a,0 
1f5f 32 58 ea			ld (f_cursor_ptr), a 
1f62			 
1f62				; set start of word list in start of ram - for use when creating user words 
1f62			 
1f62 21 19 62			ld hl, baseram 
1f65 22 b8 e5			ld (os_last_new_uword), hl 
1f68 cd 09 1f			call user_word_eol 
1f6b				 
1f6b			;		call display_data_sp 
1f6b			;		call next_page_prompt 
1f6b			 
1f6b			 
1f6b			 
1f6b			 
1f6b c9				ret 
1f6c			 
1f6c .. 00		.bootforth: db " Forth Kernel Init ",0 
1f80			 
1f80			; TODO push to stack 
1f80			 
1f80			;  
1f80			 
1f80			if FORTH_PARSEV2 
1f80			 
1f80			 
1f80				include "forth_parserv2.asm" 
1f80			 
1f80			endif 
1f80			 
1f80			 
1f80			; parse cli version 1 
1f80			 
1f80			if FORTH_PARSEV1 
1f80			 
1f80			 
1f80			 
1f80			      include "forth_parserv1.asm" 
1f80			endif 
1f80				 
1f80			if FORTH_PARSEV3 
1f80			      include "forth_parserv3.asm" 
1f80				include "forth_wordsv3.asm" 
1f80			endif 
1f80			 
1f80			if FORTH_PARSEV4 
1f80			      include "forth_parserv4.asm" 
1f80				include "forth_wordsv4.asm" 
1f80			endif 
1f80			 
1f80			if FORTH_PARSEV5 
1f80			      include "forth_parserv5.asm" 
1f80				include "forth_wordsv4.asm" 
1f80			endif 
1f80			 
1f80			if FORTH_PARSEV6 
1f80			      include "forth_parserv6.asm" 
1f80			 
1f80			 
1f80			; A better parser without using malloc and string copies all over the place.  
1f80			; Exec in situ should be faster 
1f80			 
1f80			;WORD_SYS_LOWPRIM: equ 4    ; Offset for low level prim words opcode 
1f80			;WORD_SYS_BRANCH: equ 10    ; Offset for branching and loop words opcode 
1f80			WORD_SYS_UWORD: equ 1   ; Opcode for all user words 
1f80			WORD_SYS_DELETED: equ 3 ; Op code for a deleted UWORD 
1f80			WORD_SYS_ROOT: equ 0   ; Opcode for all user words 
1f80			WORD_SYS_END: equ 0   ; Opcode for all user words 
1f80			WORD_SYS_CORE: equ 20    ; Offset for dict core words opcode 
1f80			WORD_FLAG_CODE: equ 0	   ; opcodeflag to exec pure code for this word 
1f80			WORD_FLAG_JP: equ 1	   ; opcodeflag to list zero term jump table words 
1f80			 
1f80			; Core word preamble macro 
1f80			 
1f80			CWHEAD:   macro nxtword opcode lit len opflags 
1f80				db WORD_SYS_CORE+opcode             
1f80				; internal op code number 
1f80				dw nxtword            
1f80				; link to next dict word block 
1f80				db len + 1 
1f80				; literal length of dict word inc zero term 
1f80				db lit,0              
1f80				; literal dict word 
1f80			        ; TODO db opflags        
1f80				endm 
1f80			 
1f80			 
1f80			NEXTW: macro  
1f80				jp macro_next 
1f80				endm 
1f80			 
1f80			macro_next: 
1f80			if DEBUG_FORTH_PARSE_EXEC 
1f80				DMARK "NXT" 
1f80				CALLMONITOR 
1f80			endif	 
1f80			;	inc hl  ; skip token null term  
1f80 ed 4b 3a ea		ld bc,(cli_ptr)   ; move to next token to parse in the input stream 
1f84 ed 5b 38 ea		ld de,(cli_origptr)   ; move to next token to parse in the input stream 
1f88 2a bc e5			ld hl,(os_tok_ptr)   ; move to next token to parse in the input stream 
1f8b			if DEBUG_FORTH_PARSE_EXEC 
1f8b				DMARK "}AA" 
1f8b				CALLMONITOR 
1f8b			endif	 
1f8b c3 7a 20			jp execnext 
1f8e				;jp exec1 
1f8e			       
1f8e			 
1f8e			 
1f8e			; Another go at the parser to compile  
1f8e			 
1f8e			 
1f8e			; TODO rework parser to change all of the string words to byte tokens 
1f8e			; TODO do a search for  
1f8e			 
1f8e			; TODO first run normal parser to zero term sections 
1f8e			; TODO for each word do a token look up to get the op code 
1f8e			; TODO need some means to flag to the exec that this is a byte code form    
1f8e			 
1f8e			 
1f8e			forthcompile: 
1f8e			 
1f8e			; 
1f8e			; line parse: 
1f8e			;       parse raw input buffer 
1f8e			;       tokenise the words 
1f8e			;       malloc new copy (for looping etc) 
1f8e			;       copy to malloc + current pc in line to start of string and add line term 
1f8e			;       save on new rsp 
1f8e			; 
1f8e			 
1f8e			; hl to point to the line to tokenise 
1f8e			 
1f8e			;	push hl 
1f8e 22 bc e5			ld (os_tok_ptr), hl  ; save ptr to string 
1f91			 
1f91			;	ld a,0		; string term on input 
1f91			;	call strlent 
1f91			 
1f91			;	ld (os_tok_len), hl	 ; save string length 
1f91			 
1f91			;if DEBUG_FORTH_TOK 
1f91			;	ex de,hl		 
1f91			;endif 
1f91			 
1f91			;	pop hl 		; get back string pointer 
1f91			 
1f91			if DEBUG_FORTH_TOK 
1f91						DMARK "TOc" 
1f91				CALLMONITOR 
1f91			endif 
1f91 7e			.cptoken2:    ld a,(hl) 
1f92 23				inc hl 
1f93 fe 7f			cp FORTH_END_BUFFER 
1f95 28 29			jr z, .cptokendone2 
1f97 fe 00			cp 0 
1f99 28 25			jr z, .cptokendone2 
1f9b fe 22			cp '"' 
1f9d 28 0b			jr z, .cptokenstr2     ; will want to skip until end of string delim 
1f9f fe 20			cp ' ' 
1fa1 20 ee			jr nz,  .cptoken2 
1fa3			 
1fa3			; TODO consume comments held between ( and ) 
1fa3			 
1fa3				; we have a space so change to zero term for dict match later 
1fa3 2b				dec hl 
1fa4 3e 00			ld a,0 
1fa6 77				ld (hl), a 
1fa7 23				inc hl 
1fa8 18 e7			jr .cptoken2 
1faa				 
1faa			 
1faa			.cptokenstr2: 
1faa				; skip all white space until either eol (because forgot to term) or end double quote 
1faa			        ;   if double quotes spotted ensure to skip any space sep until matched doble quote 
1faa				;inc hl ; skip current double quote 
1faa 7e				ld a,(hl) 
1fab 23				inc hl 
1fac fe 22			cp '"' 
1fae 28 e1			jr z, .cptoken2 
1fb0 fe 7f			cp FORTH_END_BUFFER 
1fb2 28 0c			jr z, .cptokendone2 
1fb4 fe 00			cp 0 
1fb6 28 08			jr z, .cptokendone2 
1fb8 fe 20			cp ' ' 
1fba 28 02			jr z, .cptmp2 
1fbc 18 ec			jr .cptokenstr2 
1fbe			 
1fbe			.cptmp2:	; we have a space so change to zero term for dict match later 
1fbe				;dec hl 
1fbe				;ld a,"-"	; TODO remove this when working 
1fbe				;ld (hl), a 
1fbe				;inc hl 
1fbe 18 ea			jr .cptokenstr2 
1fc0			 
1fc0			.cptokendone2: 
1fc0				;inc hl 
1fc0 3e 7f			ld a, FORTH_END_BUFFER 
1fc2 77				ld (hl),a 
1fc3			;	inc hl 
1fc3			;	ld a, '!' 
1fc3			;	ld (hl),a 
1fc3			 
1fc3 2a bc e5			ld hl,(os_tok_ptr) 
1fc6			         
1fc6			if DEBUG_FORTH_TOK 
1fc6						DMARK "Tc1" 
1fc6				CALLMONITOR 
1fc6			endif 
1fc6			 
1fc6				; push exec string to top of return stack 
1fc6				FORTH_RSP_NEXT 
1fc6 cd 37 1b			call macro_forth_rsp_next 
1fc9				endm 
# End of macro FORTH_RSP_NEXT
1fc9 c9				ret 
1fca			 
1fca			; Another go at the parser need to simplify the process 
1fca			 
1fca			forthparse: 
1fca			 
1fca			; 
1fca			; line parse: 
1fca			;       parse raw input buffer 
1fca			;       tokenise the words 
1fca			;       malloc new copy (for looping etc) 
1fca			;       copy to malloc + current pc in line to start of string and add line term 
1fca			;       save on new rsp 
1fca			; 
1fca			 
1fca			; hl to point to the line to tokenise 
1fca			 
1fca			;	push hl 
1fca 22 bc e5			ld (os_tok_ptr), hl  ; save ptr to string 
1fcd			 
1fcd			;	ld a,0		; string term on input 
1fcd			;	call strlent 
1fcd			 
1fcd			;	ld (os_tok_len), hl	 ; save string length 
1fcd			 
1fcd			;if DEBUG_FORTH_TOK 
1fcd			;	ex de,hl		 
1fcd			;endif 
1fcd			 
1fcd			;	pop hl 		; get back string pointer 
1fcd			 
1fcd			if DEBUG_FORTH_TOK 
1fcd						DMARK "TOK" 
1fcd				CALLMONITOR 
1fcd			endif 
1fcd 7e			.ptoken2:    ld a,(hl) 
1fce 23				inc hl 
1fcf fe 7f			cp FORTH_END_BUFFER 
1fd1 28 29			jr z, .ptokendone2 
1fd3 fe 00			cp 0 
1fd5 28 25			jr z, .ptokendone2 
1fd7 fe 22			cp '"' 
1fd9 28 0b			jr z, .ptokenstr2     ; will want to skip until end of string delim 
1fdb fe 20			cp ' ' 
1fdd 20 ee			jr nz,  .ptoken2 
1fdf			 
1fdf			; TODO consume comments held between ( and ) 
1fdf			 
1fdf				; we have a space so change to zero term for dict match later 
1fdf 2b				dec hl 
1fe0 3e 00			ld a,0 
1fe2 77				ld (hl), a 
1fe3 23				inc hl 
1fe4 18 e7			jr .ptoken2 
1fe6				 
1fe6			 
1fe6			.ptokenstr2: 
1fe6				; skip all white space until either eol (because forgot to term) or end double quote 
1fe6			        ;   if double quotes spotted ensure to skip any space sep until matched doble quote 
1fe6				;inc hl ; skip current double quote 
1fe6 7e				ld a,(hl) 
1fe7 23				inc hl 
1fe8 fe 22			cp '"' 
1fea 28 e1			jr z, .ptoken2 
1fec fe 7f			cp FORTH_END_BUFFER 
1fee 28 0c			jr z, .ptokendone2 
1ff0 fe 00			cp 0 
1ff2 28 08			jr z, .ptokendone2 
1ff4 fe 20			cp ' ' 
1ff6 28 02			jr z, .ptmp2 
1ff8 18 ec			jr .ptokenstr2 
1ffa			 
1ffa			.ptmp2:	; we have a space so change to zero term for dict match later 
1ffa				;dec hl 
1ffa				;ld a,"-"	; TODO remove this when working 
1ffa				;ld (hl), a 
1ffa				;inc hl 
1ffa 18 ea			jr .ptokenstr2 
1ffc			 
1ffc			.ptokendone2: 
1ffc				;inc hl 
1ffc 3e 7f			ld a, FORTH_END_BUFFER 
1ffe 77				ld (hl),a 
1fff			;	inc hl 
1fff			;	ld a, '!' 
1fff			;	ld (hl),a 
1fff			 
1fff 2a bc e5			ld hl,(os_tok_ptr) 
2002			         
2002			if DEBUG_FORTH_TOK 
2002						DMARK "TK1" 
2002				CALLMONITOR 
2002			endif 
2002			 
2002				; push exec string to top of return stack 
2002				FORTH_RSP_NEXT 
2002 cd 37 1b			call macro_forth_rsp_next 
2005				endm 
# End of macro FORTH_RSP_NEXT
2005 c9				ret 
2006			 
2006			; 
2006			;	; malloc size + buffer pointer + if is loop flag 
2006			;	ld hl,(os_tok_len) 		 ; get string length 
2006			; 
2006			;	ld a,l 
2006			; 
2006			;	cp 0			; we dont want to use a null string 
2006			;	ret z 
2006			; 
2006			;;	add 3    ; prefix malloc with buffer for current word ptr 
2006			; 
2006			;	add 5     ; TODO when certain not over writing memory remove 
2006			; 
2006			;		 
2006			; 
2006			;if DEBUG_FORTH_TOK 
2006			;			DMARK "TKE" 
2006			;	CALLMONITOR 
2006			;endif 
2006			; 
2006			;	ld l,a 
2006			;	ld h,0 
2006			;;	push hl   ; save required space for the copy later 
2006			;	call malloc 
2006			;if DEBUG_FORTH_TOK 
2006			;			DMARK "TKM" 
2006			;	CALLMONITOR 
2006			;endif 
2006			;	if DEBUG_FORTH_MALLOC_GUARD 
2006			;		push af 
2006			;		call ishlzero 
2006			;;		ld a, l 
2006			;;		add h 
2006			;;		cp 0 
2006			;		pop af 
2006			;		 
2006			;		call z,malloc_error 
2006			;	endif 
2006			;	ld (os_tok_malloc), hl	 ; save malloc ptr 
2006			; 
2006			; 
2006			;if DEBUG_FORTH_TOK 
2006			;			DMARK "TKR" 
2006			;	CALLMONITOR 
2006			;endif 
2006			; 
2006			;	FORTH_RSP_NEXT 
2006			; 
2006			;	;inc hl	 ; go past current buffer pointer 
2006			;	;inc hl 
2006			;	;inc hl   ; and past if loop flag 
2006			;		; TODO Need to set flag  
2006			; 
2006			;	 
2006			;	 
2006			;	ex de,hl	; malloc is dest 
2006			;	ld hl, (os_tok_len) 
2006			;;	pop bc 
2006			;	ld c, l                
2006			;	ld b,0 
2006			;	ld hl, (os_tok_ptr) 
2006			; 
2006			;if DEBUG_FORTH_TOK 
2006			;			DMARK "TKT" 
2006			;	CALLMONITOR 
2006			;endif 
2006			; 
2006			;	; do str cpy 
2006			; 
2006			;	ldir      ; copy byte in hl to de 
2006			; 
2006			;	; set end of buffer to high bit on zero term and use that for end of buffer scan 
2006			; 
2006			;if DEBUG_FORTH_TOK 
2006			; 
2006			;			DMARK "TKY" 
2006			;	CALLMONITOR 
2006			;endif 
2006			;	;ld a,0 
2006			;	;ld a,FORTH_END_BUFFER 
2006			;	ex de, hl 
2006			;	;dec hl			 ; go back over the space delim at the end of word 
2006			;	;ld (hl),a 
2006			;	;inc hl                    ;  TODO double check this. Going past the end of string to make sure end of processing buffer is marked 
2006			;	ld a,FORTH_END_BUFFER 
2006			;	ld (hl),a 
2006			;	inc hl 
2006			;	ld a,FORTH_END_BUFFER 
2006			;	ld (hl),a 
2006			; 
2006			;	; init the malloc area data 
2006			;	; set pc for in current area 
2006			;	;ld hl, (os_tok_malloc) 
2006			;	;inc hl 
2006			;	;inc hl 
2006			;	;inc hl 
2006			;	;ex de,hl 
2006			;	;ld hl, (os_tok_malloc) 
2006			;	;ld (hl),e 
2006			;	;inc hl 
2006			;	;ld (hl),d 
2006			; 
2006			; 
2006			;	ld hl,(os_tok_malloc) 
2006			;if DEBUG_FORTH_PARSE_KEY 
2006			;			DMARK "TKU" 
2006			;	CALLMONITOR 
2006			;endif 
2006			; 
2006			;	ret 
2006			 
2006			forthexec: 
2006			 
2006			; line exec: 
2006			; forth parser 
2006			 
2006			; 
2006			;       get current exec line on rsp 
2006			 
2006				FORTH_RSP_TOS 
2006 cd 4e 1b			call macro_forth_rsp_tos 
2009				endm 
# End of macro FORTH_RSP_TOS
2009			 
2009			;       restore current pc - hl points to malloc of data 
2009			 
2009				;ld e, (hl) 
2009				;inc hl 
2009				;ld d, (hl) 
2009				;ex de,hl 
2009			 
2009			 
2009			exec1: 
2009 22 bc e5			ld (os_tok_ptr), hl                 ; here move out of repeated saving in this tight loop 
200c			 
200c				; copy our PC to working vars  
200c 22 3a ea			ld (cli_ptr), hl                    ; here 
200f 22 38 ea			ld (cli_origptr), hl                ; here 
2012			 
2012 7e				ld a,(hl)                           ; here make hl be the ram ptr 
2013 fe 7f			cp FORTH_END_BUFFER 
2015 c8				ret z 
2016			 
2016				; skip any nulls 
2016			 
2016 fe 00			cp 0 
2018 20 03			jr nz, .execword 
201a 23				inc hl 
201b 18 ec			jr exec1 
201d			 
201d			 
201d			.execword: 
201d			 
201d			 
201d			 
201d			if DEBUG_FORTH_PARSE_EXEC 
201d						DMARK "KYQ" 
201d				CALLMONITOR 
201d			endif 
201d			;       while at start of word: 
201d			; get start of dict (in user area first) 
201d			 
201d 21 19 62		ld hl, baseram 
2020			;ld hl, sysdict 
2020 22 3c ea		ld (cli_nextword),hl                            ; here do we need to do this? 
2023			;           match word at pc 
2023			;           exec word 
2023			;           or push to dsp 
2023			;           forward to next token 
2023			;           if line term pop rsp and exit 
2023			;        
2023			 
2023			if DEBUG_FORTH_PARSE_EXEC 
2023						DMARK "KYq" 
2023				CALLMONITOR 
2023			endif 
2023			 
2023			; 
2023			; word comp 
2023			;    get compiled byte and save it (need to decide if code is compiled or not for comparison) 
2023			;    if byte is 0 then end parsing and report failed lookup (or could be something to add to stack etc) 
2023			;    move to start of word  
2023			;    compare word to cli_token 
2023			 
2023			.execpnword:	; HL at start of a word in the dictionary to check 
2023			 
2023 2a 3c ea			ld hl,(cli_nextword)                  ; here remove the need to store???? 
2026			 
2026 cd bd 20			call forth_tok_next 
2029			; tok next end here 
2029 22 3c ea			ld (cli_nextword), hl     ; save for next check if no match on this word 
202c eb				ex de, hl 
202d			 
202d			 
202d				; save the pointer of the current token - 1 to check against 
202d				 
202d 22 40 ea			ld (cli_token), hl   
2030				; TODO maybe remove below save if no debug 
2030				; save token string ptr for any debug later 
2030 23				inc hl  
2031 22 42 ea			ld (cli_origtoken), hl 
2034 2b				dec hl 
2035				; save pointer to the start of the next dictionay word 
2035 7e				ld a,(hl)   ; get string length 
2036 47				ld b,a 
2037			.execpnwordinc:  
2037 23				inc hl 
2038 10 fd			djnz .execpnwordinc 
203a 22 3e ea			ld (cli_execword), hl      ; save start of this words code 
203d			 
203d				; now check the word token against the string being parsed 
203d			 
203d 2a 40 ea			ld hl,(cli_token) 
2040 23				inc hl     ; skip string length (use zero term instead to end) 
2041				;ld (cli_token), hl 
2041			 
2041			.execpnchar:    ; compare char between token and string to parse 
2041			 
2041			 
2041				;ld hl, (cli_token)     ; the dict word  
2041 ed 5b 3a ea		ld de, (cli_ptr)     ; cli to parse 
2045			 
2045			 
2045			.execpncharl:    ; compare char between token and string to parse (loop) 
2045			 
2045 1a				ld a,(de) 
2046 cd 52 11			call toUpper 		; make sure the input string matches case 
2049 be				cp (hl) 
204a			 
204a c2 63 20			jp nz, .execpnskipword	 ; no match so move to next word 
204d				 
204d			;    if same 
204d			;       scan for string terms 0 for token and 32 for input 
204d 46				ld b,(hl) 
204e 80				add b			 
204f 23				inc hl 
2050 13				inc de 
2051 fe 00			cp 0			 ; add both chars together, if 32 then other must be 0 so at end of string we are parsing? 
2053							; TODO need to make sure last word in zero term string is accounted for 
2053 20 f0			jr nz, .execpncharl 		 ; not at end of strings yet 
2055			 
2055			 
2055				; at end of both strings so both are exact match 
2055			 
2055			;       skip ptr for next word 
2055			 
2055 2a 3a ea			ld hl,(cli_ptr) 	; at input string term 
2058 23				inc hl			 ; at next char 
2059 22 3a ea			ld (cli_ptr), hl     ; save for next round of the parser 
205c 22 38 ea			ld (cli_origptr), hl     ; save for any restart of current string ie a number or string to push to data stack 
205f				 
205f				 
205f			 
205f			 
205f			 
205f			;       exec code block 
205f			if DEBUG_FORTH_JP 
205f				call clear_display 
205f				call update_display 
205f				call delay1s 
205f				ld hl, (cli_execword)     ; save for next check if no match on this word 
205f				ld a,h 
205f				ld hl, os_word_scratch 
205f				call hexout 
205f				ld hl, (cli_execword)     ; save for next check if no match on this word 
205f				ld a,l 
205f				ld hl, os_word_scratch+2 
205f				call hexout 
205f				ld hl, os_word_scratch+4 
205f				ld a,0 
205f				ld (hl),a 
205f				ld de,os_word_scratch 
205f				call str_at_display 
205f					ld a, display_row_2 
205f					call str_at_display 
205f				ld de, (cli_origtoken) 
205f				ld a, display_row_1+10 
205f					call str_at_display 
205f			 
205f				ld a,display_row_1 
205f				ld de, .foundword 
205f				ld a, display_row_3 
205f				call str_at_display 
205f				call update_display 
205f				call delay1s 
205f				call delay1s 
205f				call delay1s 
205f			endif 
205f			 
205f			if DEBUG_FORTH_PARSE_EXEC 
205f						DMARK "KYj" 
205f			endif 
205f				; TODO save the word pointer in this exec 
205f			 
205f 2a 3e ea			ld hl,(cli_execword) 
2062 e9				jp (hl) 
2063			 
2063			 
2063			;    if not same 
2063			;	scan for zero term 
2063			;	get ptr for next word 
2063			;	goto word comp 
2063			 
2063			.execpnskipword:	; get pointer to next word 
2063 2a 3c ea			ld hl,(cli_nextword) 
2066			 
2066 7e				ld a,(hl) 
2067 fe 00			cp WORD_SYS_END 
2069			;	cp 0 
2069 28 09			jr z, .execendofdict			 ; at end of words 
206b			 
206b			if DEBUG_FORTH_PARSE_EXEC 
206b						DMARK "KY4" 
206b			endif 
206b			if DEBUG_FORTH_PARSE_EXEC 
206b			 
206b				; see if disabled 
206b			 
206b			;	ld a, (os_view_disable) 
206b			;	cp '*' 
206b				ld a,(debug_vector) 
206b				cp $c9   ; RET 
206b				jr z, .noskip 
206b			 
206b			 
206b				ld de, .nowordfound 
206b				ld a, display_row_3 
206b				call str_at_display 
206b				call update_display 
206b				ld a, 100 
206b				call aDelayInMS 
206b				 
206b				if DEBUG_FORTH_PARSE_EXEC_SLOW 
206b					call delay250ms 
206b				endif 
206b			.noskip:  
206b			 
206b			endif	 
206b			 
206b 2a 38 ea			ld hl,(cli_origptr) 
206e 22 3a ea			ld (cli_ptr),hl 
2071			 
2071			if DEBUG_FORTH_PARSE_EXEC 
2071						DMARK "KY5" 
2071			endif 
2071 c3 23 20			jp .execpnword			; else go to next word 
2074			 
2074			.execendofdict:  
2074			 
2074			if DEBUG_FORTH_PARSE_EXEC 
2074						DMARK "KYe" 
2074			endif 
2074			if DEBUG_FORTH_PARSE_EXEC 
2074				; see if disabled 
2074			 
2074			;	ld a, (os_view_disable) 
2074			;	cp '*' 
2074				ld a,(debug_vector) 
2074				cp $c9   ; ret 
2074				jr z, .ispskip 
2074			 
2074				call clear_display 
2074				call update_display 
2074				call delay1s 
2074				ld de, (cli_origptr) 
2074				ld a, display_row_1 
2074				call str_at_display 
2074				 
2074				ld de, .enddict 
2074				ld a, display_row_3 
2074				call str_at_display 
2074				call update_display 
2074				ld a, 100 
2074				call aDelayInMS 
2074				if DEBUG_FORTH_PARSE_EXEC_SLOW 
2074				call delay1s 
2074				call delay1s 
2074				call delay1s 
2074				endif 
2074			.ispskip:  
2074				 
2074			endif	 
2074			 
2074			 
2074			 
2074				; if the word is not a keyword then must be a literal so push it to stack 
2074			 
2074			; push token to stack to end of word 
2074			 
2074				STACKFRAME ON $1efe $2f9f 
2074				if DEBUG_STACK_IMB 
2074					if ON 
2074						exx 
2074						ld de, $1efe 
2074						ld a, d 
2074						ld hl, curframe 
2074						call hexout 
2074						ld a, e 
2074						ld hl, curframe+2 
2074						call hexout 
2074						ld hl, $1efe 
2074						push hl 
2074						ld hl, $2f9f 
2074						push hl 
2074						exx 
2074					endif 
2074				endif 
2074			endm 
# End of macro STACKFRAME
2074			 
2074 2a bc e5		ld hl,(os_tok_ptr) 
2077 cd f9 1c		call forth_apush 
207a			 
207a				STACKFRAMECHK ON $1efe $2f9f 
207a				if DEBUG_STACK_IMB 
207a					if ON 
207a						exx 
207a						ld hl, $2f9f 
207a						pop de   ; $2f9f 
207a						call cmp16 
207a						jr nz, .spnosame 
207a						ld hl, $1efe 
207a						pop de   ; $1efe 
207a						call cmp16 
207a						jr z, .spfrsame 
207a						.spnosame: call showsperror 
207a						.spfrsame: nop 
207a						exx 
207a					endif 
207a				endif 
207a			endm 
# End of macro STACKFRAMECHK
207a			 
207a			execnext: 
207a			 
207a			if DEBUG_FORTH_PARSE_EXEC 
207a						DMARK "KY>" 
207a			endif 
207a			; move past token to next word 
207a			 
207a 2a bc e5		ld hl, (os_tok_ptr) 
207d 3e 00		ld a, 0 
207f 01 ff 00		ld bc, 255     ; input buffer size 
2082 ed b1		cpir 
2084			 
2084			if DEBUG_FORTH_PARSE_EXEC 
2084						DMARK "KY!" 
2084				CALLMONITOR 
2084			endif	 
2084			; TODO this might place hl on the null, so will need to forward on??? 
2084			;inc hl   ; see if this gets onto the next item 
2084			 
2084			 
2084			; TODO pass a pointer to the buffer to push 
2084			; TODO call function to push 
2084			 
2084			; look for end of input 
2084			 
2084			;inc hl 
2084			;ld a,(hl) 
2084			;cp FORTH_END_BUFFER 
2084			;ret z 
2084			 
2084			 
2084 c3 09 20		jp exec1 
2087			 
2087			 
2087			 
2087			 
2087			 
2087			 
2087			 
2087			 
2087			 
2087			findnexttok: 
2087			 
2087				; hl is pointer to move 
2087				; de is the token to locate 
2087			 
2087					if DEBUG_FORTH 
2087						DMARK "NTK" 
2087						CALLMONITOR 
2087					endif 
2087 d5				push de 
2088			 
2088			.fnt1:	 
2088				; find first char of token to locate 
2088			 
2088 1a				ld a, (de) 
2089 4f				ld c,a 
208a 7e				ld a,(hl) 
208b cd 52 11			call toUpper 
208e					if DEBUG_FORTH 
208e						DMARK "NT1" 
208e						CALLMONITOR 
208e					endif 
208e b9				cp c 
208f			 
208f 28 03			jr z, .fnt2cmpmorefirst	 
2091			 
2091				; first char not found move to next char 
2091			 
2091 23				inc hl 
2092 18 f4			jr .fnt1 
2094			 
2094			.fnt2cmpmorefirst:	 
2094				; first char of token found.  
2094			 
2094 e5				push hl     ; save start of token just in case it is the right one 
2095 d9				exx 
2096 e1				pop hl        ; save it to hl' 
2097 d9				exx 
2098			 
2098			 
2098			.fnt2cmpmore:	 
2098				; compare the rest 
2098				 
2098 23				inc hl 
2099 13				inc de 
209a				 
209a 1a				ld a, (de) 
209b 4f				ld c,a 
209c 7e				ld a,(hl) 
209d cd 52 11			call toUpper 
20a0			 
20a0					if DEBUG_FORTH 
20a0						DMARK "NT2" 
20a0						CALLMONITOR 
20a0					endif 
20a0				; c has the token to find char 
20a0				; a has the mem to scan char 
20a0			 
20a0 b9				cp c 
20a1 28 04			jr z,.fntmatch1 
20a3			 
20a3				; they are not the same 
20a3			 
20a3					if DEBUG_FORTH 
20a3						DMARK "NT3" 
20a3						CALLMONITOR 
20a3					endif 
20a3 d1				pop de	; reset de token to look for 
20a4 d5				push de 
20a5 18 e1			jr .fnt1 
20a7				 
20a7			.fntmatch1: 
20a7			 
20a7				; is the same char a null which means we might have a full hit? 
20a7					if DEBUG_FORTH 
20a7						DMARK "NT4" 
20a7						CALLMONITOR 
20a7					endif 
20a7			 
20a7 fe 00			cp 0 
20a9 28 0b			jr z, .fntmatchyes 
20ab			 
20ab				; are we at the end of the token to find? 
20ab			 
20ab					if DEBUG_FORTH 
20ab						DMARK "NT5" 
20ab						CALLMONITOR 
20ab					endif 
20ab 3e 00			ld a, 0 
20ad b9				cp c 
20ae			 
20ae c2 98 20			jp nz, .fnt2cmpmore    ; no, so keep going to a direct hit 
20b1			 
20b1					if DEBUG_FORTH 
20b1						DMARK "NT6" 
20b1						CALLMONITOR 
20b1					endif 
20b1				; token to find is exhusted but no match to stream 
20b1			 
20b1				; restore tok pointer and continue on 
20b1 d1				pop de 
20b2 d5				push de 
20b3 c3 88 20			jp .fnt1 
20b6			 
20b6			 
20b6			.fntmatchyes: 
20b6			 
20b6				; hl now contains the end of the found token 
20b6			 
20b6				; get rid of saved token pointer to find 
20b6			 
20b6 d1				pop de 
20b7			 
20b7					if DEBUG_FORTH 
20b7						DMARK "NT9" 
20b7						CALLMONITOR 
20b7					endif 
20b7			 
20b7				; hl will be on the null term so forward on 
20b7			 
20b7				; get back the saved start of the token 
20b7			 
20b7 d9				exx 
20b8 e5				push hl     ; save start of token just in case it is the right one 
20b9 d9				exx 
20ba e1				pop hl        ; save it to hl 
20bb			 
20bb c9				ret 
20bc			 
20bc			 
20bc			; LIST needs to find a specific token   
20bc			; FORGET needs to find a spefici token 
20bc			 
20bc			; SAVE needs to find all tokens by flag 
20bc			; WORDS just needs to scan through all  by flag 
20bc			; UWORDS needs to scan through all by flag 
20bc			 
20bc			 
20bc			; given hl as pointer to start of dict look up string 
20bc			; return hl as pointer to start of word block 
20bc			; or 0 if not found 
20bc			 
20bc			forth_find_tok: 
20bc c9				ret 
20bd			 
20bd			; given hl as pointer to dict structure 
20bd			; move to the next dict block structure 
20bd			 
20bd			forth_tok_next: 
20bd				; hl now points to the address of the next word pointer  
20bd				; TODO skip compiled symbol for now 
20bd			;	push de 
20bd 23				inc hl 
20be 5e				ld e, (hl) 
20bf 23				inc hl 
20c0 56				ld d, (hl) 
20c1 23				inc hl 
20c2			 
20c2 eb				ex de,hl 
20c3			if DEBUG_FORTH_PARSE_NEXTWORD 
20c3				push bc 
20c3				ld bc, (cli_nextword) 
20c3						DMARK "NXW" 
20c3				CALLMONITOR 
20c3				pop bc 
20c3			endif 
20c3			;	pop de	 
20c3 c9				ret 
20c4			 
20c4			 
20c4			 
20c4			; eof 
# End of file forth_parserv6.asm
20c4				include "forth_wordsv4.asm" 
20c4			 
20c4			; the core word dictionary v4 
20c4			; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Notation.html#Notation 
20c4			 
20c4			; this is a linked list for each of the system words used 
20c4			; user defined words will follow the same format but will be in ram 
20c4			 
20c4			 
20c4			; 
20c4			; 
20c4			; define linked list: 
20c4			; 
20c4			; 1. compiled byte op code 
20c4			; 2. len of text word 
20c4			; 3. text word 
20c4			; 4. ptr to next dictionary word 
20c4			; 5. asm, calls etc for the word 
20c4			; 
20c4			;  if 1 == 0 then last word in dict  
20c4			;   
20c4			; set the start of dictionary scanning to be in ram and the last word point to the system dict 
20c4			;  
20c4			;  
20c4			; create basic standard set of words 
20c4			; 
20c4			;  
20c4			; + - / * DUP EMIT . SWAP IF..THEN..ELSE DO..LOOP  : ; DROP  
20c4			; 2DUP 2DROP 2SWAP  
20c4			; @ C@ - get byte  
20c4			; ! C! - store byte 
20c4			; 0< true if less than zero 
20c4			; 0= true if zero 
20c4			; < >  
20c4			; = true if same 
20c4			; variables 
20c4			 
20c4			 
20c4			; Hardware specific words I may need 
20c4			; 
20c4			; IN OUT  
20c4			; calls to key util functions 
20c4			; calls to hardward abstraction stuff 
20c4			; easy control of frame buffers and lcd i/o 
20c4			; keyboard  
20c4			 
20c4			 
20c4			;DICT: macro 
20c4			; op_code, len, word, next 
20c4			;    word: 
20c4			;    db op_code 
20c4			;    ds word zero term 
20c4			;    dw next 
20c4			;    endm 
20c4			 
20c4			 
20c4			 
20c4			 
20c4			; op code 1 is a flag for user define words which are to be handled differently 
20c4			 
20c4			 
20c4			; 
20c4			; 
20c4			;    TODO on entry to a word this should be the expected environment 
20c4			;    hl - tos value if number then held, if string this is the ptr 
20c4			;    de -  
20c4			 
20c4			 
20c4			; opcode ranges 
20c4			; 0 - end of word dict 
20c4			; 255 - user define words 
20c4			 
20c4			sysdict: 
20c4			include "forth_opcodes.asm" 
20c4			; op codes for forth keywords 
20c4			 
20c4			; Changing use of opcodes to flag is the word exists in compiled form or not.  
20c4			; This provides a means to compile uwords if required for higher performance 
20c4			; by avoiding the use of the keyword parser and just jumping directly to the code 
20c4			; Actually there is already a flag for if the code exists as binary thinking about it... 
20c4			 
20c4			 
20c4			 
20c4			 
20c4			 
20c4			; free to use code 0  
20c4				OPCODE_HEAP: equ  1 
20c4				OPCODE_EXEC: equ 2 
20c4				OPCODE_DUP: equ 3 
20c4				OPCODE_SWAP: equ 4 
20c4				OPCODE_COLN: equ 5 
20c4				OPCODE_SCOLN: equ 6 
20c4				OPCODE_DROP: equ 7 
20c4				OPCODE_DUP2: equ 8 
20c4				OPCODE_DROP2: equ 9 
20c4				OPCODE_SWAP2: equ 10 
20c4				OPCODE_AT: equ 11 
20c4				OPCODE_CAT: equ 12 
20c4				OPCODE_BANG: equ 13 
20c4				OPCODE_CBANG: equ 14 
20c4				OPCODE_SCALL: equ 15 
20c4				OPCODE_DEPTH: equ 16 
20c4				OPCODE_OVER: equ 17 
20c4				OPCODE_PAUSE: equ 18 
20c4				OPCODE_PAUSES: equ 19 
20c4				OPCODE_ROT: equ 20 
20c4			;free to reuse	OPCODE_WORDS: equ 21 
20c4			        OPCODE_NOT: equ 21 
20c4				OPCODE_UWORDS: equ 22 
20c4				OPCODE_BP: equ 23 
20c4				OPCODE_MONITOR: equ 24  
20c4				OPCODE_MALLOC: equ 25 
20c4				OPCODE_FREE: equ 26 
20c4				OPCODE_LIST: equ 27 
20c4				OPCODE_FORGET: equ 28 
20c4				OPCODE_NOP: equ 29 
20c4				OPCODE_COMO: equ 30 
20c4				OPCODE_COMC: equ 31 
20c4			;free to reuse	OPCODE_ENDCORE: equ 32 
20c4				OPCODE_AFTERSOUND: equ 33 
20c4				OPCODE_GP2: equ 34 
20c4				OPCODE_GP3: equ 35 
20c4				OPCODE_GP4: equ 36 
20c4				OPCODE_SIN: equ 37 
20c4				OPCODE_SOUT: equ 38 
20c4				OPCODE_SPIO: equ 39 
20c4				OPCODE_SPICEH: equ 40 
20c4				OPCODE_SPIOb: equ 41 
20c4				OPCODE_SPII: equ 42 
20c4				OPCODE_SESEL: equ 43 
20c4				OPCODE_CARTDEV: equ 44 
20c4			; free to reuse	OPCODE_ENDDEVICE: equ 45 
20c4				OPCODE_FB: equ 46 
20c4				OPCODE_EMIT: equ 47 
20c4				OPCODE_DOTH: equ 48 
20c4				OPCODE_DOTF: equ 49 
20c4				OPCODE_DOT: equ 50 
20c4				OPCODE_CLS: equ 51 
20c4				OPCODE_DRAW: equ 52 
20c4				OPCODE_DUMP: equ 53 
20c4				OPCODE_CDUMP: equ 54 
20c4				OPCODE_DAT: equ 55 
20c4				OPCODE_HOME: equ 56 
20c4				OPCODE_SPACE: equ 57 
20c4				OPCODE_SPACES: equ 58 
20c4				OPCODE_SCROLL: equ 59 
20c4				OPCODE_ATQ: equ 60 
20c4				OPCODE_AUTODSP: equ 61 
20c4				OPCODE_MENU: equ 62 
20c4			; free to reuse	OPCODE_ENDDISPLAY: equ 63  
20c4				OPCODE_THEN: equ 64 
20c4				OPCODE_ELSE: equ 65 
20c4				OPCODE_DO: equ 66 
20c4				OPCODE_LOOP: equ 67 
20c4				OPCODE_I: equ 68 
20c4				OPCODE_DLOOP: equ 69  
20c4				OPCODE_REPEAT: equ 70  
20c4				OPCODE_UNTIL: equ 71 
20c4				OPCODE_ENDFLOW: equ 72 
20c4				OPCODE_WAITK: equ 73 
20c4				OPCODE_ACCEPT: equ 74 
20c4				OPCODE_EDIT: equ 75 
20c4			;free to reuse	OPCODE_ENDKEY: equ 76 
20c4				OPCODE_LZERO: equ 77 
20c4				OPCODE_TZERO: equ 78 
20c4				OPCODE_LESS: equ 79 
20c4				OPCODE_GT: equ 80 
20c4				OPCODE_EQUAL: equ 81  
20c4			;free to reuse	OPCODE_ENDLOGIC: equ 82 
20c4				OPCODE_NEG: equ 83 
20c4				OPCODE_DIV: equ 84 
20c4				OPCODE_MUL: equ 85 
20c4				OPCODE_MIN: equ 86 
20c4				OPCODE_MAX: equ 87 
20c4				OPCODE_RND16: equ 88 
20c4				OPCODE_RND8: equ 89 
20c4				OPCODE_RND: equ 90 
20c4			;free to reuse	OPCODE_ENDMATHS: equ 91  
20c4				OPCODE_BYNAME: equ 92 
20c4				OPCODE_DIR: equ 93 
20c4				OPCODE_SAVE: equ 94 
20c4				OPCODE_LOAD: equ 95 
20c4				OPCODE_BSAVE: equ 96 
20c4				OPCODE_BLOAD: equ 97 
20c4				OPCODE_SEO: equ 98  
20c4				OPCODE_SEI: equ 99 
20c4				OPCODE_SFREE: equ 100 
20c4				OPCODE_SIZE: equ 101 
20c4				OPCODE_CREATE: equ 102 
20c4				OPCODE_APPEND: equ 103 
20c4				OPCODE_SDEL: equ 104 
20c4				OPCODE_OPEN: equ 105 
20c4				OPCODE_READ: equ 106 
20c4				OPCODE_EOF: equ 106 
20c4				OPCODE_FORMAT: equ 107 
20c4				OPCODE_LABEL: equ 108 
20c4				OPCODE_LABELS: equ 109 
20c4			;free to reuse	OPCODE_ENDSTORAGE: equ 110  
20c4				OPCODE_UPPER: equ 111 
20c4				OPCODE_LOWER: equ 112 
20c4				OPCODE_SUBSTR: equ 113 
20c4				OPCODE_LEFT: equ 114 
20c4				OPCODE_RIGHT: equ 115 
20c4				OPCODE_STR2NUM: equ 116 
20c4				OPCODE_NUM2STR: equ 117 
20c4				OPCODE_CONCAT: equ 118 
20c4				OPCODE_FIND: equ 119 
20c4				OPCODE_LEN: equ 120 
20c4				OPCODE_CHAR: equ 121 
20c4			; free to reuse	OPCODE_STRLEN: equ 122 
20c4			; free to reuse	OPCODE_ENDSTR: equ 123 
20c4				OPCODE_V0S: equ 124 
20c4				OPCODE_V0Q: equ 125 
20c4				OPCODE_V1S: equ 126 
20c4				OPCODE_V1Q: equ 127 
20c4				OPCODE_V2S: equ 128 
20c4				OPCODE_V2Q: equ 129 
20c4				OPCODE_V3S: equ 130 
20c4				OPCODE_V3Q: equ 131 
20c4			;free to reuse	OPCODE_END: equ 132 
20c4				OPCODE_ZDUP: equ 133 
20c4			 
20c4			; eof 
# End of file forth_opcodes.asm
20c4			 
20c4			include "forth_words_core.asm" 
20c4			 
20c4			; | ## Core Words 
20c4			 
20c4			;if MALLOC_4 
20c4			 
20c4			.HEAP: 
20c4			CWHEAD .EXEC OPCODE_HEAP "HEAP" 4 WORD_FLAG_CODE 
20c4 15				db WORD_SYS_CORE+OPCODE_HEAP             
20c5 03 21			dw .EXEC            
20c7 05				db 4 + 1 
20c8 .. 00			db "HEAP",0              
20cd				endm 
# End of macro CWHEAD
20cd			; | HEAP ( -- u1 u2 )   Pushes u1 the current number of bytes in the heap and u2 the remaining bytes - Only present if using my MALLOC | DONE 
20cd			; | | u1 - Current number of bytes in the heap 
20cd			; | | u2 - Remaining bytes left on the heap 
20cd			; | |  
20cd			; | | The heap is used for storing user defined words as well as any values pushed to stack. 
20cd			 
20cd			 
20cd				if DEBUG_FORTH_WORDS_KEY 
20cd					DMARK "HEP" 
20cd f5				push af  
20ce 3a e2 20			ld a, (.dmark)  
20d1 32 65 ee			ld (debug_mark),a  
20d4 3a e3 20			ld a, (.dmark+1)  
20d7 32 66 ee			ld (debug_mark+1),a  
20da 3a e4 20			ld a, (.dmark+2)  
20dd 32 67 ee			ld (debug_mark+2),a  
20e0 18 03			jr .pastdmark  
20e2 ..			.dmark: db "HEP"  
20e5 f1			.pastdmark: pop af  
20e6			endm  
# End of macro DMARK
20e6					CALLMONITOR 
20e6 cd 6f ee			call debug_vector  
20e9				endm  
# End of macro CALLMONITOR
20e9				endif 
20e9 2a 23 62			ld hl, (free_list )      
20ec 11 28 62			ld de, heap_start 
20ef			 
20ef ed 52			sbc hl, de  
20f1			 
20f1 cd 90 1b			call forth_push_numhl 
20f4			 
20f4			 
20f4 ed 5b 23 62		ld de, (free_list )      
20f8 21 96 e2			ld hl, heap_end 
20fb			 
20fb ed 52			sbc hl, de 
20fd			 
20fd cd 90 1b			call forth_push_numhl 
2100				 
2100			 
2100				 
2100			 
2100			 
2100			 
2100				NEXTW 
2100 c3 80 1f			jp macro_next 
2103				endm 
# End of macro NEXTW
2103			;endif 
2103			 
2103			.EXEC: 
2103			;	CWHEAD .STKEXEC OPCODE_EXEC "EXEC" 4 WORD_FLAG_CODE 
2103			;; > EXEC ( u -- )    Execs the string on TOS as a FORTH expression > CRASHES ON NEXTW 
2103			;; > > u - A qutoed string which can consist of any valid Forth expression excluding : defintions (use LOAD instead) 
2103			;; > > 
2103			;; > >   
2103			;	STACKFRAME OFF $5efe $5f9f 
2103			; 
2103			;		if DEBUG_FORTH_WORDS_KEY 
2103			;			DMARK "EXE" 
2103			;			CALLMONITOR 
2103			;		endif 
2103			; 
2103			;	FORTH_DSP_VALUEHL 
2103			; 
2103			;	FORTH_DSP_POP 
2103			; 
2103			;		if DEBUG_FORTH_WORDS 
2103			;			DMARK "EX1" 
2103			;			CALLMONITOR 
2103			;		endif 
2103			;;	ld e,(hl) 
2103			;;	inc hl 
2103			;;	ld d,(hl) 
2103			;;	ex de,hl 
2103			; 
2103			;;		if DEBUG_FORTH_WORDS 
2103			;;			DMARK "EX2" 
2103			;;			CALLMONITOR 
2103			;;		endif 
2103			;	push hl 
2103			; 
2103			;	;ld a, 0 
2103			;	;ld a, FORTH_END_BUFFER 
2103			;	call strlenz 
2103			;	inc hl   ; include zero term to copy 
2103			;	inc hl   ; include term 
2103			;	inc hl   ; include term 
2103			;	ld b,0 
2103			;	ld c,l 
2103			;	pop hl 
2103			;	ld de, execscratch 
2103			;		if DEBUG_FORTH_WORDS 
2103			;			DMARK "EX3" 
2103			;			CALLMONITOR 
2103			;		endif 
2103			;	ldir 
2103			; 
2103			; 
2103			;	ld hl, execscratch 
2103			; 
2103			;		if DEBUG_FORTH_WORDS 
2103			;			DMARK "EXe" 
2103			;			CALLMONITOR 
2103			;		endif 
2103			; 
2103			;	call forthparse 
2103			;	call forthexec 
2103			;;	call forthexec_cleanup 
2103			;;	call forthparse 
2103			;;	call forthexec 
2103			; 
2103			;	STACKFRAMECHK OFF $5efe $5f9f 
2103			; 
2103			;	; an immediate word so no need to process any more words 
2103			;	ret 
2103			;	NEXTW 
2103			 
2103			; dead code - old version  
2103			;	FORTH_RSP_NEXT 
2103			 
2103			;  
2103			;	ld bc,(cli_ptr)   ; move to next token to parse in the input stream 
2103			;	ld de,(cli_origptr)   ; move to next token to parse in the input stream 
2103			;	ld hl,(os_tok_ptr)   ; move to next token to parse in the input stream 
2103			;	push hl 
2103			;	push de 
2103			;	push bc 
2103			; 
2103			; 
2103			;		if DEBUG_FORTH_WORDS_KEY 
2103			;			DMARK "EXR" 
2103			;			CALLMONITOR 
2103			;		endif 
2103			; 
2103			; 
2103			; 
2103			;	;v5 FORTH_DSP_VALUE 
2103			;	FORTH_DSP_VALUEHL 
2103			; 
2103			;	; TODO do string type checks 
2103			; 
2103			;;v5	inc hl   ; skip type 
2103			; 
2103			;	push hl  ; source code  
2103			;		if DEBUG_FORTH_WORDS 
2103			;			DMARK "EX1" 
2103			;			CALLMONITOR 
2103			;		endif 
2103			;	ld a, 0 
2103			;	call strlent 
2103			; 
2103			;	inc hl 
2103			;	inc hl 
2103			;	inc hl 
2103			;	inc hl 
2103			; 
2103			;	push hl    ; size 
2103			; 
2103			;		if DEBUG_FORTH_WORDS 
2103			;			DMARK "EX2" 
2103			;			CALLMONITOR 
2103			;		endif 
2103			;	call malloc 
2103			; 
2103			;	ex de, hl    ; de now contains malloc area 
2103			;	pop bc   	; get byte count 
2103			;	pop hl      ; get string to copy 
2103			; 
2103			;	push de     ; save malloc for free later 
2103			; 
2103			;		if DEBUG_FORTH_WORDS 
2103			;			DMARK "EX3" 
2103			;			CALLMONITOR 
2103			;		endif 
2103			;	ldir       ; duplicate string 
2103			; 
2103			;	; at the end of the string so go back the three extra spaces and fill in with extra terms 
2103			;	 
2103			;	; TODO fix the parse would be better than this...  
2103			;	ex de, hl 
2103			;	dec hl 
2103			;	ld a, 0 
2103			;	ld (hl), a 
2103			;	dec hl 
2103			;	ld a, ' ' 
2103			;	ld (hl), a 
2103			;	dec hl 
2103			;	ld (hl), a 
2103			; 
2103			;	dec hl 
2103			;	ld (hl), a 
2103			; 
2103			; 
2103			;	FORTH_DSP_POP  
2103			; 
2103			;	pop hl     
2103			;	push hl    ; save malloc area 
2103			; 
2103			;		if DEBUG_FORTH_WORDS 
2103			;			DMARK "EX4" 
2103			;			CALLMONITOR 
2103			;		endif 
2103			; 
2103			;	call forthparse 
2103			;	call forthexec 
2103			;	 
2103			;	pop hl 
2103			;	if DEBUG_FORTH_WORDS 
2103			;		DMARK "EX5" 
2103			;		CALLMONITOR 
2103			;	endif 
2103			; 
2103			;	if FORTH_ENABLE_FREE 
2103			;	call free 
2103			;	endif 
2103			; 
2103			;	if DEBUG_FORTH_WORDS 
2103			;		DMARK "EX6" 
2103			;		CALLMONITOR 
2103			;	endif 
2103			; 
2103			;	pop bc 
2103			;	pop de 
2103			;	pop hl 
2103			;;	FORTH_RSP_POP	  
2103			;	ld (cli_ptr),bc   ; move to next token to parse in the input stream 
2103			;	ld (cli_origptr),de   ; move to next token to parse in the input stream 
2103			;	ld (os_tok_ptr),hl   ; move to next token to parse in the input stream 
2103			; 
2103			;	if DEBUG_FORTH_WORDS 
2103			;		DMARK "EX7" 
2103			;		CALLMONITOR 
2103			;	endif 
2103			;	NEXTW 
2103			 
2103			;.STKEXEC: 
2103			;	CWHEAD .ZDUP 43 "STKEXEC" 7 WORD_FLAG_CODE 
2103			;; > STKEXEC ( u .. u c -- ) Taking c count of strings off of the stack the strings are evaluated as code > TO TEST 
2103			; 
2103			; 
2103			;		if DEBUG_FORTH_WORDS_KEY 
2103			;			DMARK "STX" 
2103			;			CALLMONITOR 
2103			;		endif 
2103			; 
2103			;	FORTH_DSP_VALUEHL 
2103			; 
2103			;	ld (store_tmp1), hl    ; count 
2103			; 
2103			;	FORTH_DSP_POP 
2103			;.stkexec1: 
2103			;	ld hl, (store_tmp1)   ; count 
2103			;	ld a, 0 
2103			;	cp l 
2103			;	ret z 
2103			; 
2103			;	dec hl 
2103			;	ld (store_tmp1), hl    ; count 
2103			;	 
2103			;	FORTH_DSP_VALUEHL 
2103			;	push hl 
2103			;	 
2103			;		if DEBUG_FORTH_WORDS 
2103			;			DMARK "EXp" 
2103			;			CALLMONITOR 
2103			;		endif 
2103			;	FORTH_DSP_POP 
2103			; 
2103			;	call strlenz 
2103			;	inc hl   ; include zero term to copy 
2103			;	inc hl   ; include zero term to copy 
2103			;	inc hl   ; include zero term to copy 
2103			;	ld b,0 
2103			;	ld c,l 
2103			;	pop hl 
2103			;	ld de, execscratch 
2103			;		if DEBUG_FORTH_WORDS 
2103			;			DMARK "EX3" 
2103			;			CALLMONITOR 
2103			;		endif 
2103			;	ldir 
2103			; 
2103			; 
2103			;	ld hl, execscratch 
2103			; 
2103			;		if DEBUG_FORTH_WORDS 
2103			;			DMARK "EXP" 
2103			;			CALLMONITOR 
2103			;		endif 
2103			; 
2103			;	call forthparse 
2103			;	ld hl, execscratch 
2103			;		if DEBUG_FORTH_WORDS 
2103			;			DMARK "EXx" 
2103			;			CALLMONITOR 
2103			;		endif 
2103			;	call forthexec 
2103			; 
2103			;	jp .stkexec1 
2103			; 
2103			;	ret 
2103			 
2103			 
2103			.DUP: 
2103			CWHEAD .ZDUP OPCODE_DUP "DUP" 3 WORD_FLAG_CODE 
2103 17				db WORD_SYS_CORE+OPCODE_DUP             
2104 79 21			dw .ZDUP            
2106 04				db 3 + 1 
2107 .. 00			db "DUP",0              
210b				endm 
# End of macro CWHEAD
210b			; | DUP ( u -- u u )     Duplicate whatever item is on TOS | DONE 
210b			 
210b				if DEBUG_FORTH_WORDS_KEY 
210b					DMARK "DUP" 
210b f5				push af  
210c 3a 20 21			ld a, (.dmark)  
210f 32 65 ee			ld (debug_mark),a  
2112 3a 21 21			ld a, (.dmark+1)  
2115 32 66 ee			ld (debug_mark+1),a  
2118 3a 22 21			ld a, (.dmark+2)  
211b 32 67 ee			ld (debug_mark+2),a  
211e 18 03			jr .pastdmark  
2120 ..			.dmark: db "DUP"  
2123 f1			.pastdmark: pop af  
2124			endm  
# End of macro DMARK
2124					CALLMONITOR 
2124 cd 6f ee			call debug_vector  
2127				endm  
# End of macro CALLMONITOR
2127				endif 
2127			 
2127				FORTH_DSP 
2127 cd 5b 1d			call macro_forth_dsp 
212a				endm 
# End of macro FORTH_DSP
212a			 
212a 7e				ld a, (HL) 
212b fe 01			cp DS_TYPE_STR 
212d 20 25			jr nz, .dupinum 
212f			 
212f				; push another string 
212f			 
212f				FORTH_DSP_VALUEHL     		 
212f cd 95 1d			call macro_dsp_valuehl 
2132				endm 
# End of macro FORTH_DSP_VALUEHL
2132			 
2132			if DEBUG_FORTH_WORDS 
2132				DMARK "DUs" 
2132 f5				push af  
2133 3a 47 21			ld a, (.dmark)  
2136 32 65 ee			ld (debug_mark),a  
2139 3a 48 21			ld a, (.dmark+1)  
213c 32 66 ee			ld (debug_mark+1),a  
213f 3a 49 21			ld a, (.dmark+2)  
2142 32 67 ee			ld (debug_mark+2),a  
2145 18 03			jr .pastdmark  
2147 ..			.dmark: db "DUs"  
214a f1			.pastdmark: pop af  
214b			endm  
# End of macro DMARK
214b				CALLMONITOR 
214b cd 6f ee			call debug_vector  
214e				endm  
# End of macro CALLMONITOR
214e			endif 
214e cd fe 1b			call forth_push_str 
2151			 
2151				NEXTW 
2151 c3 80 1f			jp macro_next 
2154				endm 
# End of macro NEXTW
2154			 
2154			 
2154			.dupinum: 
2154				 
2154			 
2154			 
2154				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2154 cd 95 1d			call macro_dsp_valuehl 
2157				endm 
# End of macro FORTH_DSP_VALUEHL
2157			 
2157			; TODO add floating point number detection 
2157			 
2157			if DEBUG_FORTH_WORDS 
2157				DMARK "DUi" 
2157 f5				push af  
2158 3a 6c 21			ld a, (.dmark)  
215b 32 65 ee			ld (debug_mark),a  
215e 3a 6d 21			ld a, (.dmark+1)  
2161 32 66 ee			ld (debug_mark+1),a  
2164 3a 6e 21			ld a, (.dmark+2)  
2167 32 67 ee			ld (debug_mark+2),a  
216a 18 03			jr .pastdmark  
216c ..			.dmark: db "DUi"  
216f f1			.pastdmark: pop af  
2170			endm  
# End of macro DMARK
2170				CALLMONITOR 
2170 cd 6f ee			call debug_vector  
2173				endm  
# End of macro CALLMONITOR
2173			endif 
2173			 
2173 cd 90 1b			call forth_push_numhl 
2176				NEXTW 
2176 c3 80 1f			jp macro_next 
2179				endm 
# End of macro NEXTW
2179			.ZDUP: 
2179			CWHEAD .LSHIFT OPCODE_ZDUP "?DUP" 4 WORD_FLAG_CODE 
2179 99				db WORD_SYS_CORE+OPCODE_ZDUP             
217a b1 21			dw .LSHIFT            
217c 05				db 4 + 1 
217d .. 00			db "?DUP",0              
2182				endm 
# End of macro CWHEAD
2182			; | ?DUP ( u -- u u )     Duplicate item on TOS if the item is non-zero (Only works for numerics) | DONE 
2182			 
2182				if DEBUG_FORTH_WORDS_KEY 
2182					DMARK "qDU" 
2182 f5				push af  
2183 3a 97 21			ld a, (.dmark)  
2186 32 65 ee			ld (debug_mark),a  
2189 3a 98 21			ld a, (.dmark+1)  
218c 32 66 ee			ld (debug_mark+1),a  
218f 3a 99 21			ld a, (.dmark+2)  
2192 32 67 ee			ld (debug_mark+2),a  
2195 18 03			jr .pastdmark  
2197 ..			.dmark: db "qDU"  
219a f1			.pastdmark: pop af  
219b			endm  
# End of macro DMARK
219b					CALLMONITOR 
219b cd 6f ee			call debug_vector  
219e				endm  
# End of macro CALLMONITOR
219e				endif 
219e				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
219e cd 95 1d			call macro_dsp_valuehl 
21a1				endm 
# End of macro FORTH_DSP_VALUEHL
21a1			 
21a1 e5				push hl 
21a2			 
21a2				; is it a zero? 
21a2			 
21a2 3e 00			ld a, 0 
21a4 84				add h 
21a5 85				add l 
21a6			 
21a6 e1				pop hl 
21a7			 
21a7 fe 00			cp 0 
21a9 28 03			jr z, .dup2orig 
21ab			 
21ab			 
21ab cd 90 1b			call forth_push_numhl 
21ae			 
21ae			 
21ae			; TODO add floating point number detection 
21ae			 
21ae			.dup2orig: 
21ae			 
21ae				NEXTW 
21ae c3 80 1f			jp macro_next 
21b1				endm 
# End of macro NEXTW
21b1			.LSHIFT: 
21b1			CWHEAD .RSHIFT OPCODE_ZDUP "LSHIFT" 6 WORD_FLAG_CODE 
21b1 99				db WORD_SYS_CORE+OPCODE_ZDUP             
21b2 e5 21			dw .RSHIFT            
21b4 07				db 6 + 1 
21b5 .. 00			db "LSHIFT",0              
21bc				endm 
# End of macro CWHEAD
21bc			; | LSHIFT ( w -- w )    16 bit left shift | DONE 
21bc				if DEBUG_FORTH_WORDS_KEY 
21bc					DMARK "LSH" 
21bc f5				push af  
21bd 3a d1 21			ld a, (.dmark)  
21c0 32 65 ee			ld (debug_mark),a  
21c3 3a d2 21			ld a, (.dmark+1)  
21c6 32 66 ee			ld (debug_mark+1),a  
21c9 3a d3 21			ld a, (.dmark+2)  
21cc 32 67 ee			ld (debug_mark+2),a  
21cf 18 03			jr .pastdmark  
21d1 ..			.dmark: db "LSH"  
21d4 f1			.pastdmark: pop af  
21d5			endm  
# End of macro DMARK
21d5					CALLMONITOR 
21d5 cd 6f ee			call debug_vector  
21d8				endm  
# End of macro CALLMONITOR
21d8				endif 
21d8				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
21d8 cd 95 1d			call macro_dsp_valuehl 
21db				endm 
# End of macro FORTH_DSP_VALUEHL
21db				FORTH_DSP_POP 
21db cd 4d 1e			call macro_forth_dsp_pop 
21de				endm 
# End of macro FORTH_DSP_POP
21de			 
21de 29				add hl, hl 
21df cd 90 1b			call forth_push_numhl 
21e2				NEXTW 
21e2 c3 80 1f			jp macro_next 
21e5				endm 
# End of macro NEXTW
21e5			.RSHIFT: 
21e5			CWHEAD .SWAP OPCODE_ZDUP "RSHIFT" 6 WORD_FLAG_CODE 
21e5 99				db WORD_SYS_CORE+OPCODE_ZDUP             
21e6 1c 22			dw .SWAP            
21e8 07				db 6 + 1 
21e9 .. 00			db "RSHIFT",0              
21f0				endm 
# End of macro CWHEAD
21f0			; | RSHIFT ( w -- w )    16 bit right shift | DONE 
21f0				if DEBUG_FORTH_WORDS_KEY 
21f0					DMARK "RSH" 
21f0 f5				push af  
21f1 3a 05 22			ld a, (.dmark)  
21f4 32 65 ee			ld (debug_mark),a  
21f7 3a 06 22			ld a, (.dmark+1)  
21fa 32 66 ee			ld (debug_mark+1),a  
21fd 3a 07 22			ld a, (.dmark+2)  
2200 32 67 ee			ld (debug_mark+2),a  
2203 18 03			jr .pastdmark  
2205 ..			.dmark: db "RSH"  
2208 f1			.pastdmark: pop af  
2209			endm  
# End of macro DMARK
2209					CALLMONITOR 
2209 cd 6f ee			call debug_vector  
220c				endm  
# End of macro CALLMONITOR
220c				endif 
220c				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
220c cd 95 1d			call macro_dsp_valuehl 
220f				endm 
# End of macro FORTH_DSP_VALUEHL
220f				FORTH_DSP_POP 
220f cd 4d 1e			call macro_forth_dsp_pop 
2212				endm 
# End of macro FORTH_DSP_POP
2212 cb 3c			srl h 
2214 cb 1d			rr l 
2216 cd 90 1b			call forth_push_numhl 
2219				NEXTW 
2219 c3 80 1f			jp macro_next 
221c				endm 
# End of macro NEXTW
221c			.SWAP: 
221c			CWHEAD .COLN OPCODE_SWAP "SWAP" 4 WORD_FLAG_CODE 
221c 18				db WORD_SYS_CORE+OPCODE_SWAP             
221d 70 22			dw .COLN            
221f 05				db 4 + 1 
2220 .. 00			db "SWAP",0              
2225				endm 
# End of macro CWHEAD
2225			; | SWAP ( w1 w2 -- w2 w1 )    Swap top two items on TOS | DONE 
2225				if DEBUG_FORTH_WORDS_KEY 
2225					DMARK "SWP" 
2225 f5				push af  
2226 3a 3a 22			ld a, (.dmark)  
2229 32 65 ee			ld (debug_mark),a  
222c 3a 3b 22			ld a, (.dmark+1)  
222f 32 66 ee			ld (debug_mark+1),a  
2232 3a 3c 22			ld a, (.dmark+2)  
2235 32 67 ee			ld (debug_mark+2),a  
2238 18 03			jr .pastdmark  
223a ..			.dmark: db "SWP"  
223d f1			.pastdmark: pop af  
223e			endm  
# End of macro DMARK
223e					CALLMONITOR 
223e cd 6f ee			call debug_vector  
2241				endm  
# End of macro CALLMONITOR
2241				endif 
2241			 
2241			; DONE Use os stack swap memory 
2241			 
2241				FORTH_DSP_PTR 0     ; TOS 
2241 2a e8 e9			ld hl,(cli_data_sp) 
2244 11 00 00			ld de, 0 * 3 
2247 ed 52			sbc hl, de 
2249				endm 
# End of macro FORTH_DSP_PTR
2249 cd cc 1e			call hltostack1 
224c			  
224c				FORTH_DSP_PTR 1     ; TOS 
224c 2a e8 e9			ld hl,(cli_data_sp) 
224f 11 03 00			ld de, 1 * 3 
2252 ed 52			sbc hl, de 
2254				endm 
# End of macro FORTH_DSP_PTR
2254 cd d2 1e			call hltostack2 
2257			 
2257				FORTH_DSP_PTR 0     ; TOS 
2257 2a e8 e9			ld hl,(cli_data_sp) 
225a 11 00 00			ld de, 0 * 3 
225d ed 52			sbc hl, de 
225f				endm 
# End of macro FORTH_DSP_PTR
225f cd ea 1e			call hlfromstack2 
2262			 
2262				FORTH_DSP_PTR 1     ; TOS 
2262 2a e8 e9			ld hl,(cli_data_sp) 
2265 11 03 00			ld de, 1 * 3 
2268 ed 52			sbc hl, de 
226a				endm 
# End of macro FORTH_DSP_PTR
226a cd e4 1e			call hlfromstack1 
226d			;	FORTH_DSP_VALUEHL 
226d			;	push hl     ; w2 
226d			; 
226d			;	FORTH_DSP_POP 
226d			; 
226d			;	FORTH_DSP_VALUEHL 
226d			; 
226d			;	FORTH_DSP_POP 
226d			; 
226d			;	pop de     ; w2	, hl = w1 
226d			; 
226d			;	ex de, hl 
226d			;	push de 
226d			; 
226d			;	call forth_push_numhl 
226d			; 
226d			;	pop hl 
226d			; 
226d			;	call forth_push_numhl 
226d				 
226d			 
226d				NEXTW 
226d c3 80 1f			jp macro_next 
2270				endm 
# End of macro NEXTW
2270			.COLN: 
2270			CWHEAD .SCOLN OPCODE_COLN ":" 1 WORD_FLAG_CODE 
2270 19				db WORD_SYS_CORE+OPCODE_COLN             
2271 fc 23			dw .SCOLN            
2273 02				db 1 + 1 
2274 .. 00			db ":",0              
2276				endm 
# End of macro CWHEAD
2276			; | : ( -- )         Create new word | DONE 
2276			 
2276				if DEBUG_FORTH_WORDS_KEY 
2276					DMARK "CLN" 
2276 f5				push af  
2277 3a 8b 22			ld a, (.dmark)  
227a 32 65 ee			ld (debug_mark),a  
227d 3a 8c 22			ld a, (.dmark+1)  
2280 32 66 ee			ld (debug_mark+1),a  
2283 3a 8d 22			ld a, (.dmark+2)  
2286 32 67 ee			ld (debug_mark+2),a  
2289 18 03			jr .pastdmark  
228b ..			.dmark: db "CLN"  
228e f1			.pastdmark: pop af  
228f			endm  
# End of macro DMARK
228f					CALLMONITOR 
228f cd 6f ee			call debug_vector  
2292				endm  
# End of macro CALLMONITOR
2292				endif 
2292			STACKFRAME OFF $8efe $989f 
2292				if DEBUG_STACK_IMB 
2292					if OFF 
2292						exx 
2292						ld de, $8efe 
2292						ld a, d 
2292						ld hl, curframe 
2292						call hexout 
2292						ld a, e 
2292						ld hl, curframe+2 
2292						call hexout 
2292						ld hl, $8efe 
2292						push hl 
2292						ld hl, $989f 
2292						push hl 
2292						exx 
2292					endif 
2292				endif 
2292			endm 
# End of macro STACKFRAME
2292			; get parser buffer length  of new word 
2292			 
2292			 
2292			 
2292				; move tok past this to start of name defintition 
2292				; TODO get word to define 
2292				; TODO Move past word token 
2292				; TODO get length of string up to the ';' 
2292			 
2292 2a bc e5		ld hl, (os_tok_ptr) 
2295 23			inc hl 
2296 23			inc hl 
2297			 
2297 3e 3b		ld a, ';' 
2299 cd 66 11		call strlent 
229c			 
229c 7d			ld a,l 
229d 32 ab e2		ld (os_new_parse_len), a 
22a0			 
22a0			 
22a0			if DEBUG_FORTH_UWORD 
22a0 ed 5b bc e5	ld de, (os_tok_ptr) 
22a4					DMARK ":01" 
22a4 f5				push af  
22a5 3a b9 22			ld a, (.dmark)  
22a8 32 65 ee			ld (debug_mark),a  
22ab 3a ba 22			ld a, (.dmark+1)  
22ae 32 66 ee			ld (debug_mark+1),a  
22b1 3a bb 22			ld a, (.dmark+2)  
22b4 32 67 ee			ld (debug_mark+2),a  
22b7 18 03			jr .pastdmark  
22b9 ..			.dmark: db ":01"  
22bc f1			.pastdmark: pop af  
22bd			endm  
# End of macro DMARK
22bd			CALLMONITOR 
22bd cd 6f ee			call debug_vector  
22c0				endm  
# End of macro CALLMONITOR
22c0			endif 
22c0			 
22c0			; 
22c0			;  new word memory layout: 
22c0			;  
22c0			;    : adg 6666 ;  
22c0			; 
22c0			;    db   1     ; user defined word  
22c0 23			inc hl    
22c1			;    dw   sysdict 
22c1 23			inc hl 
22c2 23			inc hl 
22c3			;    db <word len>+1 (for null) 
22c3 23			inc hl 
22c4			;    db .... <word> 
22c4			; 
22c4			 
22c4 23			inc hl    ; some extras for the word preamble before the above 
22c5 23			inc hl 
22c6 23			inc hl 
22c7 23			inc hl 
22c8 23			inc hl 
22c9 23			inc hl 
22ca 23			inc hl  
22cb 23			inc hl 
22cc 23			inc hl 
22cd 23			inc hl 
22ce 23			inc hl 
22cf 23			inc hl 
22d0 23			inc hl 
22d1 23			inc hl     ; TODO how many do we really need?     maybe only 6 
22d2			;       exec word buffer 
22d2			;	<ptr word>   
22d2 23			inc hl 
22d3 23			inc hl 
22d4			;       <word list><null term> 7F final term 
22d4			 
22d4			 
22d4			if DEBUG_FORTH_UWORD 
22d4					DMARK ":02" 
22d4 f5				push af  
22d5 3a e9 22			ld a, (.dmark)  
22d8 32 65 ee			ld (debug_mark),a  
22db 3a ea 22			ld a, (.dmark+1)  
22de 32 66 ee			ld (debug_mark+1),a  
22e1 3a eb 22			ld a, (.dmark+2)  
22e4 32 67 ee			ld (debug_mark+2),a  
22e7 18 03			jr .pastdmark  
22e9 ..			.dmark: db ":02"  
22ec f1			.pastdmark: pop af  
22ed			endm  
# End of macro DMARK
22ed			CALLMONITOR 
22ed cd 6f ee			call debug_vector  
22f0				endm  
# End of macro CALLMONITOR
22f0			endif 
22f0			 
22f0			 
22f0				; malloc the size 
22f0			 
22f0 cd d0 11			call malloc 
22f3 22 ad e2			ld (os_new_malloc), hl     ; save malloc start 
22f6			 
22f6			;    db   1     ; user defined word  
22f6 3e 01			ld a, WORD_SYS_UWORD  
22f8 77				ld (hl), a 
22f9			 
22f9 23			inc hl    
22fa			;    dw   sysdict 
22fa 11 c4 20		ld de, sysdict       ; continue on with the scan to the system dict 
22fd 73			ld (hl), e 
22fe 23			inc hl 
22ff 72			ld (hl), d 
2300 23			inc hl 
2301			 
2301			 
2301			;    Setup dict word 
2301			 
2301 23			inc hl 
2302 22 a7 e2		ld (os_new_work_ptr), hl     ; save start of dict word  
2305			 
2305			; 1. get length of dict word 
2305			 
2305			 
2305 2a bc e5		ld hl, (os_tok_ptr) 
2308 23			inc hl 
2309 23			inc hl    ; position to start of dict word 
230a 3e 00		ld a, 0 
230c cd 66 11		call strlent 
230f			 
230f			 
230f 23			inc hl    ; to include null??? 
2310			 
2310			; write length of dict word 
2310			 
2310 ed 5b a7 e2	ld de, (os_new_work_ptr)   ; get dest for copy of word 
2314 1b			dec de 
2315 eb			ex de, hl 
2316 73			ld (hl), e 
2317 eb			ex de, hl 
2318			 
2318			 
2318			 
2318			; copy  
2318 4d			ld c, l 
2319 06 00		ld b, 0 
231b ed 5b a7 e2	ld de, (os_new_work_ptr)   ; get dest for copy of word 
231f 2a bc e5		ld hl, (os_tok_ptr) 
2322 23			inc hl 
2323 23			inc hl    ; position to start of dict word 
2324			 
2324			;	ldir       ; copy word - HL now is where we need to be for copy of the line 
2324			 
2324			; TODO need to convert word to upper case 
2324			 
2324			ucasetok:	 
2324 7e			ld a,(hl) 
2325 cd 52 11		call toUpper 
2328 77			ld (hl),a 
2329 ed a0		ldi 
232b f2 24 23		jp p, ucasetok 
232e			 
232e			 
232e			 
232e			; de now points to start of where the word body code should be placed 
232e ed 53 a7 e2	ld (os_new_work_ptr), de 
2332			; hl now points to the words to throw at forthexec which needs to be copied 
2332 22 a5 e2		ld (os_new_src_ptr), hl 
2335			 
2335			; TODO add 'call to forthexec' 
2335			 
2335			if DEBUG_FORTH_UWORD 
2335 c5			push bc 
2336 ed 4b ad e2	ld bc, (os_new_malloc) 
233a					DMARK ":0x" 
233a f5				push af  
233b 3a 4f 23			ld a, (.dmark)  
233e 32 65 ee			ld (debug_mark),a  
2341 3a 50 23			ld a, (.dmark+1)  
2344 32 66 ee			ld (debug_mark+1),a  
2347 3a 51 23			ld a, (.dmark+2)  
234a 32 67 ee			ld (debug_mark+2),a  
234d 18 03			jr .pastdmark  
234f ..			.dmark: db ":0x"  
2352 f1			.pastdmark: pop af  
2353			endm  
# End of macro DMARK
2353			CALLMONITOR 
2353 cd 6f ee			call debug_vector  
2356				endm  
# End of macro CALLMONITOR
2356 c1			pop bc 
2357			endif 
2357			 
2357			 
2357			; create word preamble which should be: 
2357			 
2357			; TODO possibly push the current os_tok_ptr to rsp and the current rsp will be the start of the string and not current pc???? 
2357			 
2357			;    ld hl, <word code> 
2357			;    jp user_exec 
2357			;    <word code bytes> 
2357			 
2357			 
2357			;	inc de     ; TODO ??? or are we already past the word's null 
2357 eb			ex de, hl 
2358			 
2358 36 21		ld (hl), 021h     ; TODO get bytes poke "ld hl, " 
235a			 
235a 23			inc hl 
235b 22 a1 e2		ld (os_new_exec_ptr),hl     ; save this location to poke with the address of the word buffer 
235e 23			inc hl 
235f			 
235f 23			inc hl 
2360 36 c3		ld (hl), 0c3h     ; TODO get bytes poke "jp xx  " 
2362			 
2362 01 9d 4f		ld bc, user_exec 
2365 23			inc hl 
2366 71			ld (hl), c     ; poke address of user_exec 
2367 23			inc hl 
2368 70			ld (hl), b     
2369			; 
2369			;	inc hl 
2369			;	ld (hl), 0cdh     ; TODO get bytes poke "call  " 
2369			; 
2369			; 
2369			;	ld bc, macro_forth_rsp_next 
2369			;	inc hl 
2369			;	ld (hl), c     ; poke address of FORTH_RSP_NEXT 
2369			;	inc hl 
2369			;	ld (hl), b     
2369			; 
2369			;	inc hl 
2369			;	ld (hl), 0cdh     ; TODO get bytes poke "call  " 
2369			; 
2369			; 
2369			;	inc hl 
2369			;	ld bc, forthexec 
2369			;	ld (hl), c     ; poke address of forthexec 
2369			;	inc hl 
2369			;	ld (hl), b      
2369			; 
2369			;	inc hl 
2369			;	ld (hl), 0c3h     ; TODO get bytes poke "jp  " 
2369			; 
2369			;	ld bc, user_dict_next 
2369			;	inc hl 
2369			;	ld (hl), c     ; poke address of forthexec 
2369			;	inc hl 
2369			;	ld (hl), b      
2369			 
2369			; hl is now where we need to copy the word byte data to save this 
2369			 
2369 23			inc hl 
236a 22 a3 e2		ld (os_new_exec), hl 
236d			 
236d			; copy definition 
236d			 
236d eb			ex de, hl 
236e			;	inc de    ; TODO BUG It appears the exec of a uword requires pc to be set 
236e			;	inc de    ; skip the PC for this parse 
236e 3a ab e2		ld a, (os_new_parse_len) 
2371 4f			ld c, a 
2372 06 00		ld b, 0 
2374 ed b0		ldir		 ; copy defintion 
2376			 
2376			 
2376			; poke the address of where the new word bytes live for forthexec 
2376			 
2376 2a a1 e2		ld hl, (os_new_exec_ptr)     ; TODO this isnt correct 
2379			 
2379 ed 5b a3 e2	ld de, (os_new_exec)      
237d			 
237d 73			ld (hl), e 
237e 23			inc hl 
237f 72			ld (hl), d 
2380			 
2380				; TODO copy last user dict word next link to this word 
2380				; TODO update last user dict word to point to this word 
2380			; 
2380			; hl f923 de 812a ; bc 811a 
2380			 
2380			if DEBUG_FORTH_UWORD 
2380 c5			push bc 
2381 ed 4b ad e2	ld bc, (os_new_malloc) 
2385					DMARK ":0A" 
2385 f5				push af  
2386 3a 9a 23			ld a, (.dmark)  
2389 32 65 ee			ld (debug_mark),a  
238c 3a 9b 23			ld a, (.dmark+1)  
238f 32 66 ee			ld (debug_mark+1),a  
2392 3a 9c 23			ld a, (.dmark+2)  
2395 32 67 ee			ld (debug_mark+2),a  
2398 18 03			jr .pastdmark  
239a ..			.dmark: db ":0A"  
239d f1			.pastdmark: pop af  
239e			endm  
# End of macro DMARK
239e			CALLMONITOR 
239e cd 6f ee			call debug_vector  
23a1				endm  
# End of macro CALLMONITOR
23a1 c1			pop bc 
23a2			endif 
23a2			if DEBUG_FORTH_UWORD 
23a2 c5			push bc 
23a3 ed 4b ad e2	ld bc, (os_new_malloc) 
23a7 03			inc bc 
23a8 03			inc bc 
23a9 03			inc bc 
23aa 03			inc bc 
23ab 03			inc bc 
23ac 03			inc bc 
23ad 03			inc bc 
23ae 03			inc bc 
23af			 
23af					DMARK ":0B" 
23af f5				push af  
23b0 3a c4 23			ld a, (.dmark)  
23b3 32 65 ee			ld (debug_mark),a  
23b6 3a c5 23			ld a, (.dmark+1)  
23b9 32 66 ee			ld (debug_mark+1),a  
23bc 3a c6 23			ld a, (.dmark+2)  
23bf 32 67 ee			ld (debug_mark+2),a  
23c2 18 03			jr .pastdmark  
23c4 ..			.dmark: db ":0B"  
23c7 f1			.pastdmark: pop af  
23c8			endm  
# End of macro DMARK
23c8			CALLMONITOR 
23c8 cd 6f ee			call debug_vector  
23cb				endm  
# End of macro CALLMONITOR
23cb c1			pop bc 
23cc			endif 
23cc			 
23cc			; update word dict linked list for new word 
23cc			 
23cc			 
23cc 2a b8 e5		ld hl, (os_last_new_uword)		; get the start of the last added uword 
23cf 23			inc hl     ; move to next work linked list ptr 
23d0			 
23d0 ed 5b ad e2	ld de, (os_new_malloc)		 ; new next word 
23d4 73			ld (hl), e 
23d5 23			inc hl 
23d6 72			ld (hl), d 
23d7			 
23d7			if DEBUG_FORTH_UWORD 
23d7 ed 4b b8 e5	ld bc, (os_last_new_uword)		; get the last word so we can check it worked in debug 
23db			endif 
23db			 
23db ed 53 b8 e5	ld (os_last_new_uword), de      ; update last new uword ptr 
23df			 
23df			 
23df			if DEBUG_FORTH_UWORD 
23df					DMARK ":0+" 
23df f5				push af  
23e0 3a f4 23			ld a, (.dmark)  
23e3 32 65 ee			ld (debug_mark),a  
23e6 3a f5 23			ld a, (.dmark+1)  
23e9 32 66 ee			ld (debug_mark+1),a  
23ec 3a f6 23			ld a, (.dmark+2)  
23ef 32 67 ee			ld (debug_mark+2),a  
23f2 18 03			jr .pastdmark  
23f4 ..			.dmark: db ":0+"  
23f7 f1			.pastdmark: pop af  
23f8			endm  
# End of macro DMARK
23f8			CALLMONITOR 
23f8 cd 6f ee			call debug_vector  
23fb				endm  
# End of macro CALLMONITOR
23fb			endif 
23fb			 
23fb			STACKFRAMECHK OFF $8efe $989f 
23fb				if DEBUG_STACK_IMB 
23fb					if OFF 
23fb						exx 
23fb						ld hl, $989f 
23fb						pop de   ; $989f 
23fb						call cmp16 
23fb						jr nz, .spnosame 
23fb						ld hl, $8efe 
23fb						pop de   ; $8efe 
23fb						call cmp16 
23fb						jr z, .spfrsame 
23fb						.spnosame: call showsperror 
23fb						.spfrsame: nop 
23fb						exx 
23fb					endif 
23fb				endif 
23fb			endm 
# End of macro STACKFRAMECHK
23fb			 
23fb c9			ret    ; dont process any remaining parser tokens as they form new word 
23fc			 
23fc			 
23fc			 
23fc			 
23fc			;		NEXT 
23fc			.SCOLN: 
23fc			;	CWHEAD .DROP 17 '\;' 1 WORD_FLAG_CODE 
23fc 06			db OPCODE_SCOLN 
23fd 48 24		dw .DROP 
23ff 02			db 2 
2400 .. 00		db ";",0           
2402			; | ; ( -- )     Terminate new word and return exec to previous exec level | DONE 
2402				if DEBUG_FORTH_WORDS_KEY 
2402					DMARK "SCN" 
2402 f5				push af  
2403 3a 17 24			ld a, (.dmark)  
2406 32 65 ee			ld (debug_mark),a  
2409 3a 18 24			ld a, (.dmark+1)  
240c 32 66 ee			ld (debug_mark+1),a  
240f 3a 19 24			ld a, (.dmark+2)  
2412 32 67 ee			ld (debug_mark+2),a  
2415 18 03			jr .pastdmark  
2417 ..			.dmark: db "SCN"  
241a f1			.pastdmark: pop af  
241b			endm  
# End of macro DMARK
241b					CALLMONITOR 
241b cd 6f ee			call debug_vector  
241e				endm  
# End of macro CALLMONITOR
241e				endif 
241e				FORTH_RSP_TOS 
241e cd 4e 1b			call macro_forth_rsp_tos 
2421				endm 
# End of macro FORTH_RSP_TOS
2421 e5				push hl 
2422				FORTH_RSP_POP 
2422 cd 58 1b			call macro_forth_rsp_pop 
2425				endm 
# End of macro FORTH_RSP_POP
2425 e1				pop hl 
2426			;		ex de,hl 
2426 22 bc e5			ld (os_tok_ptr),hl 
2429			 
2429			if DEBUG_FORTH_UWORD 
2429					DMARK "SCL" 
2429 f5				push af  
242a 3a 3e 24			ld a, (.dmark)  
242d 32 65 ee			ld (debug_mark),a  
2430 3a 3f 24			ld a, (.dmark+1)  
2433 32 66 ee			ld (debug_mark+1),a  
2436 3a 40 24			ld a, (.dmark+2)  
2439 32 67 ee			ld (debug_mark+2),a  
243c 18 03			jr .pastdmark  
243e ..			.dmark: db "SCL"  
2441 f1			.pastdmark: pop af  
2442			endm  
# End of macro DMARK
2442			CALLMONITOR 
2442 cd 6f ee			call debug_vector  
2445				endm  
# End of macro CALLMONITOR
2445			endif 
2445				NEXTW 
2445 c3 80 1f			jp macro_next 
2448				endm 
# End of macro NEXTW
2448			 
2448			.DROP: 
2448			CWHEAD .DUP2 OPCODE_DROP "DROP" 4 WORD_FLAG_CODE 
2448 1b				db WORD_SYS_CORE+OPCODE_DROP             
2449 73 24			dw .DUP2            
244b 05				db 4 + 1 
244c .. 00			db "DROP",0              
2451				endm 
# End of macro CWHEAD
2451			; | DROP ( w -- )   drop the TOS item   | DONE 
2451				if DEBUG_FORTH_WORDS_KEY 
2451					DMARK "DRP" 
2451 f5				push af  
2452 3a 66 24			ld a, (.dmark)  
2455 32 65 ee			ld (debug_mark),a  
2458 3a 67 24			ld a, (.dmark+1)  
245b 32 66 ee			ld (debug_mark+1),a  
245e 3a 68 24			ld a, (.dmark+2)  
2461 32 67 ee			ld (debug_mark+2),a  
2464 18 03			jr .pastdmark  
2466 ..			.dmark: db "DRP"  
2469 f1			.pastdmark: pop af  
246a			endm  
# End of macro DMARK
246a					CALLMONITOR 
246a cd 6f ee			call debug_vector  
246d				endm  
# End of macro CALLMONITOR
246d				endif 
246d				FORTH_DSP_POP 
246d cd 4d 1e			call macro_forth_dsp_pop 
2470				endm 
# End of macro FORTH_DSP_POP
2470				NEXTW 
2470 c3 80 1f			jp macro_next 
2473				endm 
# End of macro NEXTW
2473			.DUP2: 
2473			CWHEAD .DROP2 OPCODE_DUP2 "2DUP" 4 WORD_FLAG_CODE 
2473 1c				db WORD_SYS_CORE+OPCODE_DUP2             
2474 b8 24			dw .DROP2            
2476 05				db 4 + 1 
2477 .. 00			db "2DUP",0              
247c				endm 
# End of macro CWHEAD
247c			; | 2DUP ( w1 w2 -- w1 w2 w1 w2 ) Duplicate the top two items on TOS  (Only works for numerics) | DONE 
247c				if DEBUG_FORTH_WORDS_KEY 
247c					DMARK "2DU" 
247c f5				push af  
247d 3a 91 24			ld a, (.dmark)  
2480 32 65 ee			ld (debug_mark),a  
2483 3a 92 24			ld a, (.dmark+1)  
2486 32 66 ee			ld (debug_mark+1),a  
2489 3a 93 24			ld a, (.dmark+2)  
248c 32 67 ee			ld (debug_mark+2),a  
248f 18 03			jr .pastdmark  
2491 ..			.dmark: db "2DU"  
2494 f1			.pastdmark: pop af  
2495			endm  
# End of macro DMARK
2495					CALLMONITOR 
2495 cd 6f ee			call debug_vector  
2498				endm  
# End of macro CALLMONITOR
2498				endif 
2498				FORTH_DSP_VALUEHL 
2498 cd 95 1d			call macro_dsp_valuehl 
249b				endm 
# End of macro FORTH_DSP_VALUEHL
249b e5				push hl      ; 2 
249c			 
249c				FORTH_DSP_POP 
249c cd 4d 1e			call macro_forth_dsp_pop 
249f				endm 
# End of macro FORTH_DSP_POP
249f				 
249f				FORTH_DSP_VALUEHL 
249f cd 95 1d			call macro_dsp_valuehl 
24a2				endm 
# End of macro FORTH_DSP_VALUEHL
24a2			;		push hl      ; 1 
24a2			 
24a2				FORTH_DSP_POP 
24a2 cd 4d 1e			call macro_forth_dsp_pop 
24a5				endm 
# End of macro FORTH_DSP_POP
24a5			 
24a5			;		pop hl       ; 1 
24a5 d1				pop de       ; 2 
24a6			 
24a6 cd 90 1b			call forth_push_numhl 
24a9 eb				ex de, hl 
24aa cd 90 1b			call forth_push_numhl 
24ad			 
24ad				 
24ad eb				ex de, hl 
24ae			 
24ae cd 90 1b			call forth_push_numhl 
24b1 eb				ex de, hl 
24b2 cd 90 1b			call forth_push_numhl 
24b5			 
24b5			 
24b5				NEXTW 
24b5 c3 80 1f			jp macro_next 
24b8				endm 
# End of macro NEXTW
24b8			.DROP2: 
24b8			CWHEAD .PICK OPCODE_DROP2 "2DROP" 5 WORD_FLAG_CODE 
24b8 1d				db WORD_SYS_CORE+OPCODE_DROP2             
24b9 e7 24			dw .PICK            
24bb 06				db 5 + 1 
24bc .. 00			db "2DROP",0              
24c2				endm 
# End of macro CWHEAD
24c2			; | 2DROP ( w w -- )    Double drop | DONE 
24c2				if DEBUG_FORTH_WORDS_KEY 
24c2					DMARK "2DR" 
24c2 f5				push af  
24c3 3a d7 24			ld a, (.dmark)  
24c6 32 65 ee			ld (debug_mark),a  
24c9 3a d8 24			ld a, (.dmark+1)  
24cc 32 66 ee			ld (debug_mark+1),a  
24cf 3a d9 24			ld a, (.dmark+2)  
24d2 32 67 ee			ld (debug_mark+2),a  
24d5 18 03			jr .pastdmark  
24d7 ..			.dmark: db "2DR"  
24da f1			.pastdmark: pop af  
24db			endm  
# End of macro DMARK
24db					CALLMONITOR 
24db cd 6f ee			call debug_vector  
24de				endm  
# End of macro CALLMONITOR
24de				endif 
24de				FORTH_DSP_POP 
24de cd 4d 1e			call macro_forth_dsp_pop 
24e1				endm 
# End of macro FORTH_DSP_POP
24e1				FORTH_DSP_POP 
24e1 cd 4d 1e			call macro_forth_dsp_pop 
24e4				endm 
# End of macro FORTH_DSP_POP
24e4				NEXTW 
24e4 c3 80 1f			jp macro_next 
24e7				endm 
# End of macro NEXTW
24e7			.PICK: 
24e7			CWHEAD .SWAP2 99 "PICK" 4 WORD_FLAG_CODE 
24e7 77				db WORD_SYS_CORE+99             
24e8 81 25			dw .SWAP2            
24ea 05				db 4 + 1 
24eb .. 00			db "PICK",0              
24f0				endm 
# End of macro CWHEAD
24f0			; | PICK ( ux ... u x -- ux ... u n )    Replace x on stack with the item from position x on stack  | TODO 
24f0				if DEBUG_FORTH_WORDS_KEY 
24f0					DMARK "PIK" 
24f0 f5				push af  
24f1 3a 05 25			ld a, (.dmark)  
24f4 32 65 ee			ld (debug_mark),a  
24f7 3a 06 25			ld a, (.dmark+1)  
24fa 32 66 ee			ld (debug_mark+1),a  
24fd 3a 07 25			ld a, (.dmark+2)  
2500 32 67 ee			ld (debug_mark+2),a  
2503 18 03			jr .pastdmark  
2505 ..			.dmark: db "PIK"  
2508 f1			.pastdmark: pop af  
2509			endm  
# End of macro DMARK
2509					CALLMONITOR 
2509 cd 6f ee			call debug_vector  
250c				endm  
# End of macro CALLMONITOR
250c				endif 
250c			 
250c				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
250c cd 95 1d			call macro_dsp_valuehl 
250f				endm 
# End of macro FORTH_DSP_VALUEHL
250f				 
250f				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
250f cd 4d 1e			call macro_forth_dsp_pop 
2512				endm 
# End of macro FORTH_DSP_POP
2512			 
2512				; init from TOS 
2512 e5				push hl 
2513				FORTH_DSP 
2513 cd 5b 1d			call macro_forth_dsp 
2516				endm 
# End of macro FORTH_DSP
2516			;	ld hl, cli_data_sp 
2516				if DEBUG_FORTH_WORDS 
2516					DMARK "PK1" 
2516 f5				push af  
2517 3a 2b 25			ld a, (.dmark)  
251a 32 65 ee			ld (debug_mark),a  
251d 3a 2c 25			ld a, (.dmark+1)  
2520 32 66 ee			ld (debug_mark+1),a  
2523 3a 2d 25			ld a, (.dmark+2)  
2526 32 67 ee			ld (debug_mark+2),a  
2529 18 03			jr .pastdmark  
252b ..			.dmark: db "PK1"  
252e f1			.pastdmark: pop af  
252f			endm  
# End of macro DMARK
252f					CALLMONITOR 
252f cd 6f ee			call debug_vector  
2532				endm  
# End of macro CALLMONITOR
2532				endif 
2532 c1				pop bc 
2533 41				ld b,c 
2534 3e 00			ld a, 0 
2536 b8				cp b 
2537 28 21			jr z, .pdone	 
2539			.pkl: 
2539 2b				dec hl 
253a 2b				dec hl 
253b 2b				dec hl 
253c			 
253c				if DEBUG_FORTH_WORDS 
253c					DMARK "PKl" 
253c f5				push af  
253d 3a 51 25			ld a, (.dmark)  
2540 32 65 ee			ld (debug_mark),a  
2543 3a 52 25			ld a, (.dmark+1)  
2546 32 66 ee			ld (debug_mark+1),a  
2549 3a 53 25			ld a, (.dmark+2)  
254c 32 67 ee			ld (debug_mark+2),a  
254f 18 03			jr .pastdmark  
2551 ..			.dmark: db "PKl"  
2554 f1			.pastdmark: pop af  
2555			endm  
# End of macro DMARK
2555					CALLMONITOR 
2555 cd 6f ee			call debug_vector  
2558				endm  
# End of macro CALLMONITOR
2558				endif 
2558 10 df			djnz .pkl 
255a			.pdone: 
255a				 
255a				; TODO do type check with correct push 
255a			 
255a 23				inc hl 
255b				;call loadwordinhl 
255b 5e				ld e, (hl) 
255c 23				inc hl 
255d 56				ld d, (hl) 
255e eb				ex de,hl 
255f				if DEBUG_FORTH_WORDS 
255f					DMARK "PKp" 
255f f5				push af  
2560 3a 74 25			ld a, (.dmark)  
2563 32 65 ee			ld (debug_mark),a  
2566 3a 75 25			ld a, (.dmark+1)  
2569 32 66 ee			ld (debug_mark+1),a  
256c 3a 76 25			ld a, (.dmark+2)  
256f 32 67 ee			ld (debug_mark+2),a  
2572 18 03			jr .pastdmark  
2574 ..			.dmark: db "PKp"  
2577 f1			.pastdmark: pop af  
2578			endm  
# End of macro DMARK
2578					CALLMONITOR 
2578 cd 6f ee			call debug_vector  
257b				endm  
# End of macro CALLMONITOR
257b				endif 
257b cd 90 1b			call forth_push_numhl 
257e			 
257e				NEXTW 
257e c3 80 1f			jp macro_next 
2581				endm 
# End of macro NEXTW
2581			.SWAP2: 
2581			CWHEAD .AT OPCODE_SWAP2 "2SWAP" 5 WORD_FLAG_CODE 
2581 1e				db WORD_SYS_CORE+OPCODE_SWAP2             
2582 02 26			dw .AT            
2584 06				db 5 + 1 
2585 .. 00			db "2SWAP",0              
258b				endm 
# End of macro CWHEAD
258b			; | 2SWAP ( w1 w2 w3 w4 -- w3 w4 w1 w2 ) Swap top pair of items | TODO 
258b				if DEBUG_FORTH_WORDS_KEY 
258b					DMARK "2SW" 
258b f5				push af  
258c 3a a0 25			ld a, (.dmark)  
258f 32 65 ee			ld (debug_mark),a  
2592 3a a1 25			ld a, (.dmark+1)  
2595 32 66 ee			ld (debug_mark+1),a  
2598 3a a2 25			ld a, (.dmark+2)  
259b 32 67 ee			ld (debug_mark+2),a  
259e 18 03			jr .pastdmark  
25a0 ..			.dmark: db "2SW"  
25a3 f1			.pastdmark: pop af  
25a4			endm  
# End of macro DMARK
25a4					CALLMONITOR 
25a4 cd 6f ee			call debug_vector  
25a7				endm  
# End of macro CALLMONITOR
25a7				endif 
25a7			; TODO Use os stack swap memory 
25a7			 
25a7				FORTH_DSP_PTR 0     ; TOS    w4 
25a7 2a e8 e9			ld hl,(cli_data_sp) 
25aa 11 00 00			ld de, 0 * 3 
25ad ed 52			sbc hl, de 
25af				endm 
# End of macro FORTH_DSP_PTR
25af cd cc 1e			call hltostack1 
25b2			  
25b2				FORTH_DSP_PTR 1     ; TOS    w3 
25b2 2a e8 e9			ld hl,(cli_data_sp) 
25b5 11 03 00			ld de, 1 * 3 
25b8 ed 52			sbc hl, de 
25ba				endm 
# End of macro FORTH_DSP_PTR
25ba cd d2 1e			call hltostack2 
25bd			 
25bd			 
25bd			 
25bd				FORTH_DSP_PTR 2     ; TOS    w2 
25bd 2a e8 e9			ld hl,(cli_data_sp) 
25c0 11 06 00			ld de, 2 * 3 
25c3 ed 52			sbc hl, de 
25c5				endm 
# End of macro FORTH_DSP_PTR
25c5 cd d8 1e			call hltostack3 
25c8			 
25c8				FORTH_DSP_PTR 3     ; TOS   w1 
25c8 2a e8 e9			ld hl,(cli_data_sp) 
25cb 11 09 00			ld de, 3 * 3 
25ce ed 52			sbc hl, de 
25d0				endm 
# End of macro FORTH_DSP_PTR
25d0 cd de 1e			call hltostack4 
25d3			 
25d3			 
25d3			 
25d3			 
25d3				FORTH_DSP_PTR 0     ; TOS 
25d3 2a e8 e9			ld hl,(cli_data_sp) 
25d6 11 00 00			ld de, 0 * 3 
25d9 ed 52			sbc hl, de 
25db				endm 
# End of macro FORTH_DSP_PTR
25db cd f0 1e			call hlfromstack3 
25de			 
25de				FORTH_DSP_PTR 1     ; TOS 
25de 2a e8 e9			ld hl,(cli_data_sp) 
25e1 11 03 00			ld de, 1 * 3 
25e4 ed 52			sbc hl, de 
25e6				endm 
# End of macro FORTH_DSP_PTR
25e6 cd f6 1e			call hlfromstack4 
25e9			 
25e9			 
25e9			 
25e9				FORTH_DSP_PTR 2     ; TOS 
25e9 2a e8 e9			ld hl,(cli_data_sp) 
25ec 11 06 00			ld de, 2 * 3 
25ef ed 52			sbc hl, de 
25f1				endm 
# End of macro FORTH_DSP_PTR
25f1 cd e4 1e			call hlfromstack1 
25f4			 
25f4				FORTH_DSP_PTR 3     ; TOS 
25f4 2a e8 e9			ld hl,(cli_data_sp) 
25f7 11 09 00			ld de, 3 * 3 
25fa ed 52			sbc hl, de 
25fc				endm 
# End of macro FORTH_DSP_PTR
25fc cd ea 1e			call hlfromstack2 
25ff			 
25ff				NEXTW 
25ff c3 80 1f			jp macro_next 
2602				endm 
# End of macro NEXTW
2602			.AT: 
2602			CWHEAD .CAT OPCODE_AT "@" 1 WORD_FLAG_CODE 
2602 1f				db WORD_SYS_CORE+OPCODE_AT             
2603 34 26			dw .CAT            
2605 02				db 1 + 1 
2606 .. 00			db "@",0              
2608				endm 
# End of macro CWHEAD
2608			; | @ ( w -- ) Push onto TOS byte stored at address   | DONE 
2608			 
2608				if DEBUG_FORTH_WORDS_KEY 
2608					DMARK "AT." 
2608 f5				push af  
2609 3a 1d 26			ld a, (.dmark)  
260c 32 65 ee			ld (debug_mark),a  
260f 3a 1e 26			ld a, (.dmark+1)  
2612 32 66 ee			ld (debug_mark+1),a  
2615 3a 1f 26			ld a, (.dmark+2)  
2618 32 67 ee			ld (debug_mark+2),a  
261b 18 03			jr .pastdmark  
261d ..			.dmark: db "AT."  
2620 f1			.pastdmark: pop af  
2621			endm  
# End of macro DMARK
2621					CALLMONITOR 
2621 cd 6f ee			call debug_vector  
2624				endm  
# End of macro CALLMONITOR
2624				endif 
2624			.getbyteat:	 
2624				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2624 cd 95 1d			call macro_dsp_valuehl 
2627				endm 
# End of macro FORTH_DSP_VALUEHL
2627				 
2627			;		push hl 
2627			 
2627				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2627 cd 4d 1e			call macro_forth_dsp_pop 
262a				endm 
# End of macro FORTH_DSP_POP
262a			 
262a			;		pop hl 
262a			 
262a 7e				ld a, (hl) 
262b			 
262b 6f				ld l, a 
262c 26 00			ld h, 0 
262e cd 90 1b			call forth_push_numhl 
2631			 
2631				NEXTW 
2631 c3 80 1f			jp macro_next 
2634				endm 
# End of macro NEXTW
2634			.CAT: 
2634			CWHEAD .BANG OPCODE_CAT "C@" 2 WORD_FLAG_CODE 
2634 20				db WORD_SYS_CORE+OPCODE_CAT             
2635 5d 26			dw .BANG            
2637 03				db 2 + 1 
2638 .. 00			db "C@",0              
263b				endm 
# End of macro CWHEAD
263b			; | C@  ( w -- ) Push onto TOS byte stored at address   | DONE 
263b				if DEBUG_FORTH_WORDS_KEY 
263b					DMARK "CAA" 
263b f5				push af  
263c 3a 50 26			ld a, (.dmark)  
263f 32 65 ee			ld (debug_mark),a  
2642 3a 51 26			ld a, (.dmark+1)  
2645 32 66 ee			ld (debug_mark+1),a  
2648 3a 52 26			ld a, (.dmark+2)  
264b 32 67 ee			ld (debug_mark+2),a  
264e 18 03			jr .pastdmark  
2650 ..			.dmark: db "CAA"  
2653 f1			.pastdmark: pop af  
2654			endm  
# End of macro DMARK
2654					CALLMONITOR 
2654 cd 6f ee			call debug_vector  
2657				endm  
# End of macro CALLMONITOR
2657				endif 
2657 c3 24 26			jp .getbyteat 
265a				NEXTW 
265a c3 80 1f			jp macro_next 
265d				endm 
# End of macro NEXTW
265d			.BANG: 
265d			CWHEAD .CBANG OPCODE_BANG "!" 1 WORD_FLAG_CODE 
265d 21				db WORD_SYS_CORE+OPCODE_BANG             
265e 93 26			dw .CBANG            
2660 02				db 1 + 1 
2661 .. 00			db "!",0              
2663				endm 
# End of macro CWHEAD
2663			; | ! ( x w -- ) Store x at address w      | DONE 
2663				if DEBUG_FORTH_WORDS_KEY 
2663					DMARK "BNG" 
2663 f5				push af  
2664 3a 78 26			ld a, (.dmark)  
2667 32 65 ee			ld (debug_mark),a  
266a 3a 79 26			ld a, (.dmark+1)  
266d 32 66 ee			ld (debug_mark+1),a  
2670 3a 7a 26			ld a, (.dmark+2)  
2673 32 67 ee			ld (debug_mark+2),a  
2676 18 03			jr .pastdmark  
2678 ..			.dmark: db "BNG"  
267b f1			.pastdmark: pop af  
267c			endm  
# End of macro DMARK
267c					CALLMONITOR 
267c cd 6f ee			call debug_vector  
267f				endm  
# End of macro CALLMONITOR
267f				endif 
267f			 
267f			.storebyteat:		 
267f				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
267f cd 95 1d			call macro_dsp_valuehl 
2682				endm 
# End of macro FORTH_DSP_VALUEHL
2682				 
2682 e5				push hl 
2683			 
2683				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2683 cd 4d 1e			call macro_forth_dsp_pop 
2686				endm 
# End of macro FORTH_DSP_POP
2686			 
2686				; get byte to poke 
2686			 
2686				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2686 cd 95 1d			call macro_dsp_valuehl 
2689				endm 
# End of macro FORTH_DSP_VALUEHL
2689 e5				push hl 
268a			 
268a			 
268a				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
268a cd 4d 1e			call macro_forth_dsp_pop 
268d				endm 
# End of macro FORTH_DSP_POP
268d			 
268d			 
268d d1				pop de 
268e e1				pop hl 
268f			 
268f 73				ld (hl),e 
2690			 
2690			 
2690				NEXTW 
2690 c3 80 1f			jp macro_next 
2693				endm 
# End of macro NEXTW
2693			.CBANG: 
2693			CWHEAD .SCALL OPCODE_CBANG "C!" 2 WORD_FLAG_CODE 
2693 22				db WORD_SYS_CORE+OPCODE_CBANG             
2694 bc 26			dw .SCALL            
2696 03				db 2 + 1 
2697 .. 00			db "C!",0              
269a				endm 
# End of macro CWHEAD
269a			; | C!  ( x w -- ) Store x at address w  | DONE 
269a				if DEBUG_FORTH_WORDS_KEY 
269a					DMARK "CBA" 
269a f5				push af  
269b 3a af 26			ld a, (.dmark)  
269e 32 65 ee			ld (debug_mark),a  
26a1 3a b0 26			ld a, (.dmark+1)  
26a4 32 66 ee			ld (debug_mark+1),a  
26a7 3a b1 26			ld a, (.dmark+2)  
26aa 32 67 ee			ld (debug_mark+2),a  
26ad 18 03			jr .pastdmark  
26af ..			.dmark: db "CBA"  
26b2 f1			.pastdmark: pop af  
26b3			endm  
# End of macro DMARK
26b3					CALLMONITOR 
26b3 cd 6f ee			call debug_vector  
26b6				endm  
# End of macro CALLMONITOR
26b6				endif 
26b6 c3 7f 26			jp .storebyteat 
26b9				NEXTW 
26b9 c3 80 1f			jp macro_next 
26bc				endm 
# End of macro NEXTW
26bc			.SCALL: 
26bc			CWHEAD .DEPTH OPCODE_SCALL "CALL" 4 WORD_FLAG_CODE 
26bc 23				db WORD_SYS_CORE+OPCODE_SCALL             
26bd f0 26			dw .DEPTH            
26bf 05				db 4 + 1 
26c0 .. 00			db "CALL",0              
26c5				endm 
# End of macro CWHEAD
26c5			; | CALL ( w -- w  ) machine code call to address w  push the result of hl to stack | DONE 
26c5				if DEBUG_FORTH_WORDS_KEY 
26c5					DMARK "CLL" 
26c5 f5				push af  
26c6 3a da 26			ld a, (.dmark)  
26c9 32 65 ee			ld (debug_mark),a  
26cc 3a db 26			ld a, (.dmark+1)  
26cf 32 66 ee			ld (debug_mark+1),a  
26d2 3a dc 26			ld a, (.dmark+2)  
26d5 32 67 ee			ld (debug_mark+2),a  
26d8 18 03			jr .pastdmark  
26da ..			.dmark: db "CLL"  
26dd f1			.pastdmark: pop af  
26de			endm  
# End of macro DMARK
26de					CALLMONITOR 
26de cd 6f ee			call debug_vector  
26e1				endm  
# End of macro CALLMONITOR
26e1				endif 
26e1			 
26e1				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
26e1 cd 95 1d			call macro_dsp_valuehl 
26e4				endm 
# End of macro FORTH_DSP_VALUEHL
26e4			 
26e4			;		push hl 
26e4			 
26e4				; destroy value TOS 
26e4			 
26e4				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
26e4 cd 4d 1e			call macro_forth_dsp_pop 
26e7				endm 
# End of macro FORTH_DSP_POP
26e7			 
26e7					 
26e7			;		pop hl 
26e7			 
26e7				; how to do a call with hl???? save SP? 
26e7 cd 24 1f			call forth_call_hl 
26ea			 
26ea			 
26ea				; TODO push value back onto stack for another op etc 
26ea			 
26ea cd 90 1b			call forth_push_numhl 
26ed				NEXTW 
26ed c3 80 1f			jp macro_next 
26f0				endm 
# End of macro NEXTW
26f0			.DEPTH: 
26f0			CWHEAD .OVER OPCODE_DEPTH "DEPTH" 5 WORD_FLAG_CODE 
26f0 24				db WORD_SYS_CORE+OPCODE_DEPTH             
26f1 2d 27			dw .OVER            
26f3 06				db 5 + 1 
26f4 .. 00			db "DEPTH",0              
26fa				endm 
# End of macro CWHEAD
26fa			; | DEPTH ( -- u ) Push count of stack | DONE 
26fa				; take current TOS and remove from base value div by two to get count 
26fa				if DEBUG_FORTH_WORDS_KEY 
26fa					DMARK "DEP" 
26fa f5				push af  
26fb 3a 0f 27			ld a, (.dmark)  
26fe 32 65 ee			ld (debug_mark),a  
2701 3a 10 27			ld a, (.dmark+1)  
2704 32 66 ee			ld (debug_mark+1),a  
2707 3a 11 27			ld a, (.dmark+2)  
270a 32 67 ee			ld (debug_mark+2),a  
270d 18 03			jr .pastdmark  
270f ..			.dmark: db "DEP"  
2712 f1			.pastdmark: pop af  
2713			endm  
# End of macro DMARK
2713					CALLMONITOR 
2713 cd 6f ee			call debug_vector  
2716				endm  
# End of macro CALLMONITOR
2716				endif 
2716			 
2716			 
2716 2a e8 e9		ld hl, (cli_data_sp) 
2719 11 22 e8		ld de, cli_data_stack 
271c ed 52		sbc hl,de 
271e			 
271e			; div by size of stack item 
271e			 
271e 5d			ld e,l 
271f 0e 03		ld c, 3 
2721 cd 85 0d		call Div8 
2724			 
2724 6f			ld l,a 
2725 26 00		ld h,0 
2727			 
2727			;srl h 
2727			;rr l 
2727			 
2727 cd 90 1b			call forth_push_numhl 
272a				NEXTW 
272a c3 80 1f			jp macro_next 
272d				endm 
# End of macro NEXTW
272d			.OVER: 
272d			CWHEAD .PAUSE 46 "OVER" 4 WORD_FLAG_CODE 
272d 42				db WORD_SYS_CORE+46             
272e 74 27			dw .PAUSE            
2730 05				db 4 + 1 
2731 .. 00			db "OVER",0              
2736				endm 
# End of macro CWHEAD
2736			; | OVER ( n1 n2 -- n1 n2 n1 )  Copy one below TOS onto TOS | TOFIX 
2736				if DEBUG_FORTH_WORDS_KEY 
2736					DMARK "OVR" 
2736 f5				push af  
2737 3a 4b 27			ld a, (.dmark)  
273a 32 65 ee			ld (debug_mark),a  
273d 3a 4c 27			ld a, (.dmark+1)  
2740 32 66 ee			ld (debug_mark+1),a  
2743 3a 4d 27			ld a, (.dmark+2)  
2746 32 67 ee			ld (debug_mark+2),a  
2749 18 03			jr .pastdmark  
274b ..			.dmark: db "OVR"  
274e f1			.pastdmark: pop af  
274f			endm  
# End of macro DMARK
274f					CALLMONITOR 
274f cd 6f ee			call debug_vector  
2752				endm  
# End of macro CALLMONITOR
2752				endif 
2752			 
2752			; TODO Use os stack swap memory 
2752			 
2752				; work out what type we are looking at 
2752			 
2752				FORTH_DSP_PTR 1 
2752 2a e8 e9			ld hl,(cli_data_sp) 
2755 11 03 00			ld de, 1 * 3 
2758 ed 52			sbc hl, de 
275a				endm 
# End of macro FORTH_DSP_PTR
275a			 
275a 7e				ld a, (hl) 
275b				 
275b f5				push af 
275c				; whatever the type lets get the pointer or word 
275c 23				inc hl 
275d			;; 
275d			 
275d				; type check now to decide on how to push  
275d			 
275d cd 02 1f			call loadwordinhl 
2760 f1				pop af 
2761 fe 01			cp DS_TYPE_STR 
2763 28 06			jr z, .ovstr 
2765			 
2765				; we have a numeric so load the word and push 
2765			;	ld e, (hl) 
2765			;	inc hl 
2765			;	ld d, (hl) 
2765			;	ex de, hl 
2765 cd 90 1b			call forth_push_numhl 
2768				NEXTW 
2768 c3 80 1f			jp macro_next 
276b				endm 
# End of macro NEXTW
276b			 
276b			.ovstr: 
276b				; ok, a string so get the pointer and push as a string 
276b			 
276b			;	call loadwordinhl 
276b cd fe 1b			call forth_push_str 
276e				NEXTW 
276e c3 80 1f			jp macro_next 
2771				endm 
# End of macro NEXTW
2771			 
2771			;	FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2771			;	push hl    ; n2 
2771			;	FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2771			; 
2771			;	FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2771			;	push hl    ; n1 
2771			;	FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2771			; 
2771			;	pop de     ; n1 
2771			;	pop hl     ; n2 
2771			; 
2771			;	push de 
2771			;	push hl 
2771			;	push de 
2771			 
2771				; push back  
2771			 
2771			;	pop hl 
2771			;	call forth_push_numhl 
2771			;	pop hl 
2771			;	call forth_push_numhl 
2771			;	pop hl 
2771			;	call forth_push_numhl 
2771				NEXTW 
2771 c3 80 1f			jp macro_next 
2774				endm 
# End of macro NEXTW
2774			 
2774			.PAUSE: 
2774			CWHEAD .PAUSES 47 "PAUSEMS" 7 WORD_FLAG_CODE 
2774 43				db WORD_SYS_CORE+47             
2775 a9 27			dw .PAUSES            
2777 08				db 7 + 1 
2778 .. 00			db "PAUSEMS",0              
2780				endm 
# End of macro CWHEAD
2780			; | PAUSEMS ( n -- )  Pause for n millisconds | DONE 
2780				if DEBUG_FORTH_WORDS_KEY 
2780					DMARK "PMS" 
2780 f5				push af  
2781 3a 95 27			ld a, (.dmark)  
2784 32 65 ee			ld (debug_mark),a  
2787 3a 96 27			ld a, (.dmark+1)  
278a 32 66 ee			ld (debug_mark+1),a  
278d 3a 97 27			ld a, (.dmark+2)  
2790 32 67 ee			ld (debug_mark+2),a  
2793 18 03			jr .pastdmark  
2795 ..			.dmark: db "PMS"  
2798 f1			.pastdmark: pop af  
2799			endm  
# End of macro DMARK
2799					CALLMONITOR 
2799 cd 6f ee			call debug_vector  
279c				endm  
# End of macro CALLMONITOR
279c				endif 
279c				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
279c cd 95 1d			call macro_dsp_valuehl 
279f				endm 
# End of macro FORTH_DSP_VALUEHL
279f			;		push hl    ; n2 
279f				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
279f cd 4d 1e			call macro_forth_dsp_pop 
27a2				endm 
# End of macro FORTH_DSP_POP
27a2			;		pop hl 
27a2			 
27a2 7d				ld a, l 
27a3 cd e5 0a			call aDelayInMS 
27a6			       NEXTW 
27a6 c3 80 1f			jp macro_next 
27a9				endm 
# End of macro NEXTW
27a9			.PAUSES:  
27a9			CWHEAD .ROT 48 "PAUSE" 5 WORD_FLAG_CODE 
27a9 44				db WORD_SYS_CORE+48             
27aa 18 28			dw .ROT            
27ac 06				db 5 + 1 
27ad .. 00			db "PAUSE",0              
27b3				endm 
# End of macro CWHEAD
27b3			; | PAUSE ( n -- )  Pause for n seconds | DONE 
27b3				if DEBUG_FORTH_WORDS_KEY 
27b3					DMARK "PAU" 
27b3 f5				push af  
27b4 3a c8 27			ld a, (.dmark)  
27b7 32 65 ee			ld (debug_mark),a  
27ba 3a c9 27			ld a, (.dmark+1)  
27bd 32 66 ee			ld (debug_mark+1),a  
27c0 3a ca 27			ld a, (.dmark+2)  
27c3 32 67 ee			ld (debug_mark+2),a  
27c6 18 03			jr .pastdmark  
27c8 ..			.dmark: db "PAU"  
27cb f1			.pastdmark: pop af  
27cc			endm  
# End of macro DMARK
27cc					CALLMONITOR 
27cc cd 6f ee			call debug_vector  
27cf				endm  
# End of macro CALLMONITOR
27cf				endif 
27cf				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
27cf cd 95 1d			call macro_dsp_valuehl 
27d2				endm 
# End of macro FORTH_DSP_VALUEHL
27d2			;		push hl    ; n2 
27d2				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
27d2 cd 4d 1e			call macro_forth_dsp_pop 
27d5				endm 
# End of macro FORTH_DSP_POP
27d5			;		pop hl 
27d5 45				ld b, l 
27d6				if DEBUG_FORTH_WORDS 
27d6					DMARK "PAU" 
27d6 f5				push af  
27d7 3a eb 27			ld a, (.dmark)  
27da 32 65 ee			ld (debug_mark),a  
27dd 3a ec 27			ld a, (.dmark+1)  
27e0 32 66 ee			ld (debug_mark+1),a  
27e3 3a ed 27			ld a, (.dmark+2)  
27e6 32 67 ee			ld (debug_mark+2),a  
27e9 18 03			jr .pastdmark  
27eb ..			.dmark: db "PAU"  
27ee f1			.pastdmark: pop af  
27ef			endm  
# End of macro DMARK
27ef					CALLMONITOR 
27ef cd 6f ee			call debug_vector  
27f2				endm  
# End of macro CALLMONITOR
27f2				endif 
27f2 c5			.pauses1:	push bc 
27f3 cd 00 0b			call delay1s 
27f6 c1				pop bc 
27f7				if DEBUG_FORTH_WORDS 
27f7					DMARK "PA1" 
27f7 f5				push af  
27f8 3a 0c 28			ld a, (.dmark)  
27fb 32 65 ee			ld (debug_mark),a  
27fe 3a 0d 28			ld a, (.dmark+1)  
2801 32 66 ee			ld (debug_mark+1),a  
2804 3a 0e 28			ld a, (.dmark+2)  
2807 32 67 ee			ld (debug_mark+2),a  
280a 18 03			jr .pastdmark  
280c ..			.dmark: db "PA1"  
280f f1			.pastdmark: pop af  
2810			endm  
# End of macro DMARK
2810					CALLMONITOR 
2810 cd 6f ee			call debug_vector  
2813				endm  
# End of macro CALLMONITOR
2813				endif 
2813 10 dd			djnz .pauses1 
2815			 
2815			       NEXTW 
2815 c3 80 1f			jp macro_next 
2818				endm 
# End of macro NEXTW
2818			.ROT: 
2818			CWHEAD .UWORDS 49 "ROT" 3 WORD_FLAG_CODE 
2818 45				db WORD_SYS_CORE+49             
2819 81 28			dw .UWORDS            
281b 04				db 3 + 1 
281c .. 00			db "ROT",0              
2820				endm 
# End of macro CWHEAD
2820			; | ROT ( u1 u2 u3 -- u2 u3 u1 ) Rotate top three items on stack | TOFIX 
2820				if DEBUG_FORTH_WORDS_KEY 
2820					DMARK "ROT" 
2820 f5				push af  
2821 3a 35 28			ld a, (.dmark)  
2824 32 65 ee			ld (debug_mark),a  
2827 3a 36 28			ld a, (.dmark+1)  
282a 32 66 ee			ld (debug_mark+1),a  
282d 3a 37 28			ld a, (.dmark+2)  
2830 32 67 ee			ld (debug_mark+2),a  
2833 18 03			jr .pastdmark  
2835 ..			.dmark: db "ROT"  
2838 f1			.pastdmark: pop af  
2839			endm  
# End of macro DMARK
2839					CALLMONITOR 
2839 cd 6f ee			call debug_vector  
283c				endm  
# End of macro CALLMONITOR
283c				endif 
283c			 
283c			; DONE Use os stack swap memory 
283c			 
283c				FORTH_DSP_PTR 0     ; u3 
283c 2a e8 e9			ld hl,(cli_data_sp) 
283f 11 00 00			ld de, 0 * 3 
2842 ed 52			sbc hl, de 
2844				endm 
# End of macro FORTH_DSP_PTR
2844 cd cc 1e			call hltostack1     
2847			  
2847				FORTH_DSP_PTR 1     ; u2 
2847 2a e8 e9			ld hl,(cli_data_sp) 
284a 11 03 00			ld de, 1 * 3 
284d ed 52			sbc hl, de 
284f				endm 
# End of macro FORTH_DSP_PTR
284f cd d2 1e			call hltostack2      
2852			 
2852				FORTH_DSP_PTR 2     ; u1 
2852 2a e8 e9			ld hl,(cli_data_sp) 
2855 11 06 00			ld de, 2 * 3 
2858 ed 52			sbc hl, de 
285a				endm 
# End of macro FORTH_DSP_PTR
285a cd d8 1e			call hltostack3 
285d			 
285d			 
285d				FORTH_DSP_PTR 0     ;  
285d 2a e8 e9			ld hl,(cli_data_sp) 
2860 11 00 00			ld de, 0 * 3 
2863 ed 52			sbc hl, de 
2865				endm 
# End of macro FORTH_DSP_PTR
2865 cd f0 1e			call hlfromstack3 
2868			 
2868				FORTH_DSP_PTR 1     ; TOS 
2868 2a e8 e9			ld hl,(cli_data_sp) 
286b 11 03 00			ld de, 1 * 3 
286e ed 52			sbc hl, de 
2870				endm 
# End of macro FORTH_DSP_PTR
2870 cd e4 1e			call hlfromstack1 
2873			 
2873				FORTH_DSP_PTR 2     ; TOS 
2873 2a e8 e9			ld hl,(cli_data_sp) 
2876 11 06 00			ld de, 2 * 3 
2879 ed 52			sbc hl, de 
287b				endm 
# End of macro FORTH_DSP_PTR
287b cd ea 1e			call hlfromstack2 
287e			 
287e			 
287e			;	FORTH_DSP_VALUEHL 
287e			;	push hl    ; u3  
287e			; 
287e			;	FORTH_DSP_POP 
287e			; 
287e			;	FORTH_DSP_VALUEHL 
287e			;	push hl     ; u2 
287e			; 
287e			;	FORTH_DSP_POP 
287e			; 
287e			;	FORTH_DSP_VALUEHL 
287e			;	push hl     ; u1 
287e			; 
287e			;	FORTH_DSP_POP 
287e			; 
287e			;	pop bc      ; u1 
287e			;	pop hl      ; u2 
287e			;	pop de      ; u3 
287e			; 
287e			; 
287e			;	push bc 
287e			;	push de 
287e			;	push hl 
287e			; 
287e			; 
287e			;	pop hl 
287e			;	call forth_push_numhl 
287e			; 
287e			;	pop hl 
287e			;	call forth_push_numhl 
287e			; 
287e			;	pop hl 
287e			;	call forth_push_numhl 
287e				 
287e			 
287e			 
287e			 
287e			 
287e			 
287e			       NEXTW 
287e c3 80 1f			jp macro_next 
2881				endm 
# End of macro NEXTW
2881			 
2881			.UWORDS: 
2881			CWHEAD .BP 60 "UWORDS" 6 WORD_FLAG_CODE 
2881 50				db WORD_SYS_CORE+60             
2882 43 29			dw .BP            
2884 07				db 6 + 1 
2885 .. 00			db "UWORDS",0              
288c				endm 
# End of macro CWHEAD
288c			; | UWORDS (  -- s1 ... sn u )   List user word dict | DONE 
288c			; | | After use the TOS will have a count of the number of user words that have been pushed to stack. 
288c			; | | Following the count are the individual words. 
288c			; | | 
288c			; | | e.g. UWORDS 
288c			; | | BOX DIRLIST 2 
288c			; | |  
288c			; | | Can be used to save the words to storage via: 
288c			; | | UWORDS $01 DO $01 APPEND LOOP 
288c			if DEBUG_FORTH_WORDS_KEY 
288c				DMARK "UWR" 
288c f5				push af  
288d 3a a1 28			ld a, (.dmark)  
2890 32 65 ee			ld (debug_mark),a  
2893 3a a2 28			ld a, (.dmark+1)  
2896 32 66 ee			ld (debug_mark+1),a  
2899 3a a3 28			ld a, (.dmark+2)  
289c 32 67 ee			ld (debug_mark+2),a  
289f 18 03			jr .pastdmark  
28a1 ..			.dmark: db "UWR"  
28a4 f1			.pastdmark: pop af  
28a5			endm  
# End of macro DMARK
28a5				CALLMONITOR 
28a5 cd 6f ee			call debug_vector  
28a8				endm  
# End of macro CALLMONITOR
28a8			endif 
28a8 21 19 62			ld hl, baseram 
28ab				;ld hl, baseusermem 
28ab 01 00 00			ld bc, 0    ; start a counter 
28ae			 
28ae			; skip dict stub 
28ae			 
28ae cd bd 20			call forth_tok_next 
28b1			 
28b1			 
28b1			; while we have words to look for 
28b1			 
28b1 7e			.douscan:	ld a, (hl)      
28b2			if DEBUG_FORTH_WORDS 
28b2				DMARK "UWs" 
28b2 f5				push af  
28b3 3a c7 28			ld a, (.dmark)  
28b6 32 65 ee			ld (debug_mark),a  
28b9 3a c8 28			ld a, (.dmark+1)  
28bc 32 66 ee			ld (debug_mark+1),a  
28bf 3a c9 28			ld a, (.dmark+2)  
28c2 32 67 ee			ld (debug_mark+2),a  
28c5 18 03			jr .pastdmark  
28c7 ..			.dmark: db "UWs"  
28ca f1			.pastdmark: pop af  
28cb			endm  
# End of macro DMARK
28cb				CALLMONITOR 
28cb cd 6f ee			call debug_vector  
28ce				endm  
# End of macro CALLMONITOR
28ce			endif 
28ce fe 00			cp WORD_SYS_END 
28d0 28 4d			jr z, .udone 
28d2 fe 01			cp WORD_SYS_UWORD 
28d4 20 44			jr nz, .nuword 
28d6			 
28d6			if DEBUG_FORTH_WORDS 
28d6				DMARK "UWu" 
28d6 f5				push af  
28d7 3a eb 28			ld a, (.dmark)  
28da 32 65 ee			ld (debug_mark),a  
28dd 3a ec 28			ld a, (.dmark+1)  
28e0 32 66 ee			ld (debug_mark+1),a  
28e3 3a ed 28			ld a, (.dmark+2)  
28e6 32 67 ee			ld (debug_mark+2),a  
28e9 18 03			jr .pastdmark  
28eb ..			.dmark: db "UWu"  
28ee f1			.pastdmark: pop af  
28ef			endm  
# End of macro DMARK
28ef				CALLMONITOR 
28ef cd 6f ee			call debug_vector  
28f2				endm  
# End of macro CALLMONITOR
28f2			endif 
28f2				; we have a uword so push its name to the stack 
28f2			 
28f2 e5				push hl  ; save so we can move to next dict block 
28f3			 
28f3				; skip opcode 
28f3 23				inc hl  
28f4				; skip next ptr 
28f4 23				inc hl  
28f5 23				inc hl 
28f6				; skip len 
28f6 23				inc hl 
28f7			if DEBUG_FORTH_WORDS 
28f7				DMARK "UWt" 
28f7 f5				push af  
28f8 3a 0c 29			ld a, (.dmark)  
28fb 32 65 ee			ld (debug_mark),a  
28fe 3a 0d 29			ld a, (.dmark+1)  
2901 32 66 ee			ld (debug_mark+1),a  
2904 3a 0e 29			ld a, (.dmark+2)  
2907 32 67 ee			ld (debug_mark+2),a  
290a 18 03			jr .pastdmark  
290c ..			.dmark: db "UWt"  
290f f1			.pastdmark: pop af  
2910			endm  
# End of macro DMARK
2910				CALLMONITOR 
2910 cd 6f ee			call debug_vector  
2913				endm  
# End of macro CALLMONITOR
2913			endif 
2913 03				inc bc 
2914			 
2914 c5				push bc 
2915 cd fe 1b			call forth_push_str 
2918 c1				pop bc 
2919			 
2919 e1				pop hl 	 
291a			 
291a cd bd 20		.nuword:	call forth_tok_next 
291d 18 92			jr .douscan  
291f			 
291f			.udone:		 ; push count of uwords found 
291f c5				push bc 
2920 e1				pop hl 
2921			 
2921			if DEBUG_FORTH_WORDS 
2921				DMARK "UWc" 
2921 f5				push af  
2922 3a 36 29			ld a, (.dmark)  
2925 32 65 ee			ld (debug_mark),a  
2928 3a 37 29			ld a, (.dmark+1)  
292b 32 66 ee			ld (debug_mark+1),a  
292e 3a 38 29			ld a, (.dmark+2)  
2931 32 67 ee			ld (debug_mark+2),a  
2934 18 03			jr .pastdmark  
2936 ..			.dmark: db "UWc"  
2939 f1			.pastdmark: pop af  
293a			endm  
# End of macro DMARK
293a				CALLMONITOR 
293a cd 6f ee			call debug_vector  
293d				endm  
# End of macro CALLMONITOR
293d			endif 
293d cd 90 1b			call forth_push_numhl 
2940			 
2940			 
2940			       NEXTW 
2940 c3 80 1f			jp macro_next 
2943				endm 
# End of macro NEXTW
2943			 
2943			.BP: 
2943			CWHEAD .MONITOR 64 "BP" 2 WORD_FLAG_CODE 
2943 54				db WORD_SYS_CORE+64             
2944 7d 29			dw .MONITOR            
2946 03				db 2 + 1 
2947 .. 00			db "BP",0              
294a				endm 
# End of macro CWHEAD
294a			; | BP ( u1 -- ) Enable or disable break point monitoring | DONE 
294a			; | | $00 Will enable the break points within specific code paths 
294a			; | | $01 Will disable break points 
294a			; | |  
294a			; | | By default break points are off. Either the above can be used to enable them 
294a			; | | or if a key is held down during start up the spashscreen will appear to freeze 
294a			; | | and on release of the pressed key the CONFIG menu will be displayed where you 
294a			; | | can disable break points. Exiting will then continue boot process. 
294a				; get byte count 
294a				if DEBUG_FORTH_WORDS_KEY 
294a					DMARK "BP." 
294a f5				push af  
294b 3a 5f 29			ld a, (.dmark)  
294e 32 65 ee			ld (debug_mark),a  
2951 3a 60 29			ld a, (.dmark+1)  
2954 32 66 ee			ld (debug_mark+1),a  
2957 3a 61 29			ld a, (.dmark+2)  
295a 32 67 ee			ld (debug_mark+2),a  
295d 18 03			jr .pastdmark  
295f ..			.dmark: db "BP."  
2962 f1			.pastdmark: pop af  
2963			endm  
# End of macro DMARK
2963					CALLMONITOR 
2963 cd 6f ee			call debug_vector  
2966				endm  
# End of macro CALLMONITOR
2966				endif 
2966			 
2966				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2966 cd 95 1d			call macro_dsp_valuehl 
2969				endm 
# End of macro FORTH_DSP_VALUEHL
2969			 
2969			;		push hl 
2969			 
2969				; destroy value TOS 
2969			 
2969				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2969 cd 4d 1e			call macro_forth_dsp_pop 
296c				endm 
# End of macro FORTH_DSP_POP
296c			 
296c			;		pop hl 
296c			 
296c 3e 00			ld a,0 
296e bd				cp l 
296f 28 06			jr z, .bpset 
2971			;		ld a, '*' 
2971 cd 0b 15			call bp_off 
2974				NEXTW 
2974 c3 80 1f			jp macro_next 
2977				endm 
# End of macro NEXTW
2977			 
2977			.bpset:	 
2977				;	ld (os_view_disable), a 
2977 cd ff 14			call bp_on 
297a			 
297a			 
297a				NEXTW 
297a c3 80 1f			jp macro_next 
297d				endm 
# End of macro NEXTW
297d			 
297d			 
297d			.MONITOR: 
297d			CWHEAD .MALLOC 65 "MONITOR" 7 WORD_FLAG_CODE 
297d 55				db WORD_SYS_CORE+65             
297e ae 29			dw .MALLOC            
2980 08				db 7 + 1 
2981 .. 00			db "MONITOR",0              
2989				endm 
# End of macro CWHEAD
2989			; | MONITOR ( -- ) Display system breakpoint/monitor | DONE 
2989			; | | At start the current various registers will be displayed with contents. 
2989			; | | Top right corner will show the most recent debug marker seen. 
2989			; | | The bottom of the screen will also show the values of the data stack pointer (DSP) 
2989			; | | and the return stack pointer (RSP). 
2989			; | | Pressing: 
2989			; | |    1 - Initial screen 
2989			; | |    2 - Display a data dump of HL 
2989			; | |    3 - Display a data dump of DE 
2989			; | |    4 - Display a data dump of BC 
2989			; | |    5 - Display a data dump of HL 
2989			; | |    6 - Display a data dump of DSP 
2989			; | |    7 - Display a data dump of RSP 
2989			; | |    8 - Display a data dump of what is at DSP 
2989			; | |    9 - Display a data dump of what is at RSP 
2989			; | |    0 - Exit monitor and continue running. This will also enable break points 
2989			; | |    * - Disable break points 
2989			; | |    # - Enter traditional monitor mode 
2989			; | | 
2989			; | | Monitor Mode 
2989			; | | ------------ 
2989			; | | A prompt of '>' will be shown for various commands: 
2989			; | |    D xxxx - Display a data dump starting from hex address xxxx 
2989			; | |    C - Continue display a data dump from the last set address 
2989			; | |    M xxxx - Set start of memory edit at address xx 
2989			; | |    U xx - Poke the hex byte xx into the address set by M and increment the address to the next location 
2989			; | |    G xxxx - Exec code at specific address 
2989			; | |    Q - Return to previous 
2989				if DEBUG_FORTH_WORDS_KEY 
2989					DMARK "MON" 
2989 f5				push af  
298a 3a 9e 29			ld a, (.dmark)  
298d 32 65 ee			ld (debug_mark),a  
2990 3a 9f 29			ld a, (.dmark+1)  
2993 32 66 ee			ld (debug_mark+1),a  
2996 3a a0 29			ld a, (.dmark+2)  
2999 32 67 ee			ld (debug_mark+2),a  
299c 18 03			jr .pastdmark  
299e ..			.dmark: db "MON"  
29a1 f1			.pastdmark: pop af  
29a2			endm  
# End of macro DMARK
29a2					CALLMONITOR 
29a2 cd 6f ee			call debug_vector  
29a5				endm  
# End of macro CALLMONITOR
29a5				endif 
29a5			;		ld a, 0 
29a5			;		ld (os_view_disable), a 
29a5 cd ff 14			call bp_on 
29a8			 
29a8				CALLMONITOR 
29a8 cd 6f ee			call debug_vector  
29ab				endm  
# End of macro CALLMONITOR
29ab			 
29ab			;	call monitor 
29ab			 
29ab				NEXTW 
29ab c3 80 1f			jp macro_next 
29ae				endm 
# End of macro NEXTW
29ae			 
29ae			 
29ae			.MALLOC: 
29ae			CWHEAD .MALLOC2 66 "ALLOT" 5 WORD_FLAG_CODE 
29ae 56				db WORD_SYS_CORE+66             
29af d7 29			dw .MALLOC2            
29b1 06				db 5 + 1 
29b2 .. 00			db "ALLOT",0              
29b8				endm 
# End of macro CWHEAD
29b8			; | ALLOT ( u -- u ) Allocate u bytes of memory space and push the pointer TOS  | DONE 
29b8				if DEBUG_FORTH_WORDS_KEY 
29b8					DMARK "ALL" 
29b8 f5				push af  
29b9 3a cd 29			ld a, (.dmark)  
29bc 32 65 ee			ld (debug_mark),a  
29bf 3a ce 29			ld a, (.dmark+1)  
29c2 32 66 ee			ld (debug_mark+1),a  
29c5 3a cf 29			ld a, (.dmark+2)  
29c8 32 67 ee			ld (debug_mark+2),a  
29cb 18 03			jr .pastdmark  
29cd ..			.dmark: db "ALL"  
29d0 f1			.pastdmark: pop af  
29d1			endm  
# End of macro DMARK
29d1					CALLMONITOR 
29d1 cd 6f ee			call debug_vector  
29d4				endm  
# End of macro CALLMONITOR
29d4				endif 
29d4 c3 fe 29			jp .mallocc 
29d7			.MALLOC2: 
29d7			CWHEAD .FREE 66 "MALLOC" 6 WORD_FLAG_CODE 
29d7 56				db WORD_SYS_CORE+66             
29d8 15 2a			dw .FREE            
29da 07				db 6 + 1 
29db .. 00			db "MALLOC",0              
29e2				endm 
# End of macro CWHEAD
29e2			; | MALLOC ( u -- u ) Allocate u bytes of memory space and push the pointer TOS  | DONE 
29e2				; get byte count 
29e2				if DEBUG_FORTH_WORDS_KEY 
29e2					DMARK "MAL" 
29e2 f5				push af  
29e3 3a f7 29			ld a, (.dmark)  
29e6 32 65 ee			ld (debug_mark),a  
29e9 3a f8 29			ld a, (.dmark+1)  
29ec 32 66 ee			ld (debug_mark+1),a  
29ef 3a f9 29			ld a, (.dmark+2)  
29f2 32 67 ee			ld (debug_mark+2),a  
29f5 18 03			jr .pastdmark  
29f7 ..			.dmark: db "MAL"  
29fa f1			.pastdmark: pop af  
29fb			endm  
# End of macro DMARK
29fb					CALLMONITOR 
29fb cd 6f ee			call debug_vector  
29fe				endm  
# End of macro CALLMONITOR
29fe				endif 
29fe			.mallocc: 
29fe				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
29fe cd 95 1d			call macro_dsp_valuehl 
2a01				endm 
# End of macro FORTH_DSP_VALUEHL
2a01			 
2a01			;		push hl 
2a01			 
2a01				; destroy value TOS 
2a01			 
2a01				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2a01 cd 4d 1e			call macro_forth_dsp_pop 
2a04				endm 
# End of macro FORTH_DSP_POP
2a04			 
2a04			;		pop hl 
2a04 cd d0 11			call malloc 
2a07			if DEBUG_FORTH_MALLOC_GUARD 
2a07 f5				push af 
2a08 cd 1e 0e			call ishlzero 
2a0b			;		ld a, l 
2a0b			;		add h 
2a0b			;		cp 0 
2a0b f1				pop af 
2a0c				 
2a0c cc 6f 50			call z,malloc_error 
2a0f			endif 
2a0f			 
2a0f cd 90 1b			call forth_push_numhl 
2a12				NEXTW 
2a12 c3 80 1f			jp macro_next 
2a15				endm 
# End of macro NEXTW
2a15			 
2a15			.FREE: 
2a15			CWHEAD .LIST 67 "FREE" 4 WORD_FLAG_CODE 
2a15 57				db WORD_SYS_CORE+67             
2a16 46 2a			dw .LIST            
2a18 05				db 4 + 1 
2a19 .. 00			db "FREE",0              
2a1e				endm 
# End of macro CWHEAD
2a1e			; | FREE ( u --  ) Free memory block from malloc given u address  | DONE 
2a1e				if DEBUG_FORTH_WORDS_KEY 
2a1e					DMARK "FRE" 
2a1e f5				push af  
2a1f 3a 33 2a			ld a, (.dmark)  
2a22 32 65 ee			ld (debug_mark),a  
2a25 3a 34 2a			ld a, (.dmark+1)  
2a28 32 66 ee			ld (debug_mark+1),a  
2a2b 3a 35 2a			ld a, (.dmark+2)  
2a2e 32 67 ee			ld (debug_mark+2),a  
2a31 18 03			jr .pastdmark  
2a33 ..			.dmark: db "FRE"  
2a36 f1			.pastdmark: pop af  
2a37			endm  
# End of macro DMARK
2a37					CALLMONITOR 
2a37 cd 6f ee			call debug_vector  
2a3a				endm  
# End of macro CALLMONITOR
2a3a				endif 
2a3a				; get address 
2a3a			 
2a3a				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2a3a cd 95 1d			call macro_dsp_valuehl 
2a3d				endm 
# End of macro FORTH_DSP_VALUEHL
2a3d			 
2a3d			;		push hl 
2a3d			 
2a3d				; destroy value TOS 
2a3d			 
2a3d				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2a3d cd 4d 1e			call macro_forth_dsp_pop 
2a40				endm 
# End of macro FORTH_DSP_POP
2a40			 
2a40			;		pop hl 
2a40			if FORTH_ENABLE_MALLOCFREE 
2a40 cd 9a 12			call free 
2a43			endif 
2a43				NEXTW 
2a43 c3 80 1f			jp macro_next 
2a46				endm 
# End of macro NEXTW
2a46			.LIST: 
2a46			CWHEAD .FORGET 72 "LIST" 4 WORD_FLAG_CODE 
2a46 5c				db WORD_SYS_CORE+72             
2a47 42 2c			dw .FORGET            
2a49 05				db 4 + 1 
2a4a .. 00			db "LIST",0              
2a4f				endm 
# End of macro CWHEAD
2a4f			; | LIST ( uword -- u )    List the code to the word that is quoted (so as not to exec) on TOS | DONE 
2a4f			; | | The quoted word must be in upper case. 
2a4f			if DEBUG_FORTH_WORDS_KEY 
2a4f				DMARK "LST" 
2a4f f5				push af  
2a50 3a 64 2a			ld a, (.dmark)  
2a53 32 65 ee			ld (debug_mark),a  
2a56 3a 65 2a			ld a, (.dmark+1)  
2a59 32 66 ee			ld (debug_mark+1),a  
2a5c 3a 66 2a			ld a, (.dmark+2)  
2a5f 32 67 ee			ld (debug_mark+2),a  
2a62 18 03			jr .pastdmark  
2a64 ..			.dmark: db "LST"  
2a67 f1			.pastdmark: pop af  
2a68			endm  
# End of macro DMARK
2a68				CALLMONITOR 
2a68 cd 6f ee			call debug_vector  
2a6b				endm  
# End of macro CALLMONITOR
2a6b			endif 
2a6b			 
2a6b				FORTH_DSP_VALUEHL 
2a6b cd 95 1d			call macro_dsp_valuehl 
2a6e				endm 
# End of macro FORTH_DSP_VALUEHL
2a6e			 
2a6e e5				push hl 
2a6f				FORTH_DSP_POP 
2a6f cd 4d 1e			call macro_forth_dsp_pop 
2a72				endm 
# End of macro FORTH_DSP_POP
2a72 c1				pop bc 
2a73			 
2a73			; Start format of scratch string 
2a73			 
2a73 21 bb e2			ld hl, scratch 
2a76			 
2a76 3e 3a			ld a, ':' 
2a78 77				ld (hl),a 
2a79 23				inc hl 
2a7a 3e 20			ld a, ' ' 
2a7c 77				ld (hl), a 
2a7d			 
2a7d				; Get ptr to the word we need to look up 
2a7d			 
2a7d			;		FORTH_DSP_VALUEHL 
2a7d				;v5 FORTH_DSP_VALUE 
2a7d			; TODO type check 
2a7d			;		inc hl    ; Skip type check  
2a7d			;		push hl 
2a7d			;		ex de, hl    ; put into DE 
2a7d			 
2a7d			 
2a7d 21 19 62			ld hl, baseram 
2a80				;ld hl, baseusermem 
2a80			 
2a80 e5			push hl   ; sacreifical push 
2a81			 
2a81			.ldouscanm: 
2a81 e1			pop hl 
2a82			.ldouscan: 
2a82			if DEBUG_FORTH_WORDS 
2a82				DMARK "LSs" 
2a82 f5				push af  
2a83 3a 97 2a			ld a, (.dmark)  
2a86 32 65 ee			ld (debug_mark),a  
2a89 3a 98 2a			ld a, (.dmark+1)  
2a8c 32 66 ee			ld (debug_mark+1),a  
2a8f 3a 99 2a			ld a, (.dmark+2)  
2a92 32 67 ee			ld (debug_mark+2),a  
2a95 18 03			jr .pastdmark  
2a97 ..			.dmark: db "LSs"  
2a9a f1			.pastdmark: pop af  
2a9b			endm  
# End of macro DMARK
2a9b				CALLMONITOR 
2a9b cd 6f ee			call debug_vector  
2a9e				endm  
# End of macro CALLMONITOR
2a9e			endif 
2a9e			; skip dict stub 
2a9e cd bd 20			call forth_tok_next 
2aa1			 
2aa1			 
2aa1			; while we have words to look for 
2aa1			 
2aa1 7e			ld a, (hl)      
2aa2			if DEBUG_FORTH_WORDS 
2aa2				DMARK "LSk" 
2aa2 f5				push af  
2aa3 3a b7 2a			ld a, (.dmark)  
2aa6 32 65 ee			ld (debug_mark),a  
2aa9 3a b8 2a			ld a, (.dmark+1)  
2aac 32 66 ee			ld (debug_mark+1),a  
2aaf 3a b9 2a			ld a, (.dmark+2)  
2ab2 32 67 ee			ld (debug_mark+2),a  
2ab5 18 03			jr .pastdmark  
2ab7 ..			.dmark: db "LSk"  
2aba f1			.pastdmark: pop af  
2abb			endm  
# End of macro DMARK
2abb				CALLMONITOR 
2abb cd 6f ee			call debug_vector  
2abe				endm  
# End of macro CALLMONITOR
2abe			endif 
2abe				;cp WORD_SYS_END 
2abe				;jp z, .lunotfound 
2abe			 
2abe					; if we hit non uwords then gone too far 
2abe fe 01				cp WORD_SYS_UWORD 
2ac0 c2 fe 2b				jp nz, .lunotfound 
2ac3			 
2ac3				if DEBUG_FORTH_WORDS 
2ac3					DMARK "LSu" 
2ac3 f5				push af  
2ac4 3a d8 2a			ld a, (.dmark)  
2ac7 32 65 ee			ld (debug_mark),a  
2aca 3a d9 2a			ld a, (.dmark+1)  
2acd 32 66 ee			ld (debug_mark+1),a  
2ad0 3a da 2a			ld a, (.dmark+2)  
2ad3 32 67 ee			ld (debug_mark+2),a  
2ad6 18 03			jr .pastdmark  
2ad8 ..			.dmark: db "LSu"  
2adb f1			.pastdmark: pop af  
2adc			endm  
# End of macro DMARK
2adc					CALLMONITOR 
2adc cd 6f ee			call debug_vector  
2adf				endm  
# End of macro CALLMONITOR
2adf				endif 
2adf			 
2adf					; found a uword but is it the one we want... 
2adf			 
2adf c5					push bc     ; uword to find is on bc 
2ae0 d1					pop de 
2ae1			 
2ae1 e5					push hl  ; to save the ptr 
2ae2			 
2ae2					; skip opcode 
2ae2 23					inc hl  
2ae3					; skip next ptr 
2ae3 23					inc hl  
2ae4 23					inc hl 
2ae5					; skip len 
2ae5 23					inc hl 
2ae6			 
2ae6				if DEBUG_FORTH_WORDS 
2ae6					DMARK "LSc" 
2ae6 f5				push af  
2ae7 3a fb 2a			ld a, (.dmark)  
2aea 32 65 ee			ld (debug_mark),a  
2aed 3a fc 2a			ld a, (.dmark+1)  
2af0 32 66 ee			ld (debug_mark+1),a  
2af3 3a fd 2a			ld a, (.dmark+2)  
2af6 32 67 ee			ld (debug_mark+2),a  
2af9 18 03			jr .pastdmark  
2afb ..			.dmark: db "LSc"  
2afe f1			.pastdmark: pop af  
2aff			endm  
# End of macro DMARK
2aff					CALLMONITOR 
2aff cd 6f ee			call debug_vector  
2b02				endm  
# End of macro CALLMONITOR
2b02				endif 
2b02			; was exiting on the shorter of the words. swap and test is in favour of the longer word. 
2b02			; ie. If WOO is defined first and then WO. Couldnt list WO. 
2b02			; Nope that has gone the other way. It needs to be exact not on first zero 
2b02			;		call strcmp 
2b02 c5					push bc 
2b03 cd a0 11				call StrictStrCmp 
2b06 c1					pop bc 
2b07 c2 81 2a				jp nz, .ldouscanm 
2b0a				 
2b0a			 
2b0a			 
2b0a					; we have a uword so push its name to the stack 
2b0a			 
2b0a			;	   	push hl  ; save so we can move to next dict block 
2b0a e1			pop hl 
2b0b			 
2b0b				if DEBUG_FORTH_WORDS 
2b0b					DMARK "LSm" 
2b0b f5				push af  
2b0c 3a 20 2b			ld a, (.dmark)  
2b0f 32 65 ee			ld (debug_mark),a  
2b12 3a 21 2b			ld a, (.dmark+1)  
2b15 32 66 ee			ld (debug_mark+1),a  
2b18 3a 22 2b			ld a, (.dmark+2)  
2b1b 32 67 ee			ld (debug_mark+2),a  
2b1e 18 03			jr .pastdmark  
2b20 ..			.dmark: db "LSm"  
2b23 f1			.pastdmark: pop af  
2b24			endm  
# End of macro DMARK
2b24					CALLMONITOR 
2b24 cd 6f ee			call debug_vector  
2b27				endm  
# End of macro CALLMONITOR
2b27				endif 
2b27			 
2b27					; skip opcode 
2b27 23					inc hl  
2b28					; skip next ptr 
2b28 23					inc hl  
2b29 23					inc hl 
2b2a					; skip len 
2b2a 7e					ld a, (hl)   ; save length to add 
2b2b				if DEBUG_FORTH_WORDS 
2b2b					DMARK "LS2" 
2b2b f5				push af  
2b2c 3a 40 2b			ld a, (.dmark)  
2b2f 32 65 ee			ld (debug_mark),a  
2b32 3a 41 2b			ld a, (.dmark+1)  
2b35 32 66 ee			ld (debug_mark+1),a  
2b38 3a 42 2b			ld a, (.dmark+2)  
2b3b 32 67 ee			ld (debug_mark+2),a  
2b3e 18 03			jr .pastdmark  
2b40 ..			.dmark: db "LS2"  
2b43 f1			.pastdmark: pop af  
2b44			endm  
# End of macro DMARK
2b44					CALLMONITOR 
2b44 cd 6f ee			call debug_vector  
2b47				endm  
# End of macro CALLMONITOR
2b47				endif 
2b47			 
2b47					; save this location 
2b47				 
2b47 e5					push hl 
2b48			 
2b48 23					inc hl 
2b49 11 bd e2				ld de, scratch+2 
2b4c 4f					ld c, a 
2b4d 06 00				ld b, 0 
2b4f			 
2b4f				if DEBUG_FORTH_WORDS 
2b4f					DMARK "LSn" 
2b4f f5				push af  
2b50 3a 64 2b			ld a, (.dmark)  
2b53 32 65 ee			ld (debug_mark),a  
2b56 3a 65 2b			ld a, (.dmark+1)  
2b59 32 66 ee			ld (debug_mark+1),a  
2b5c 3a 66 2b			ld a, (.dmark+2)  
2b5f 32 67 ee			ld (debug_mark+2),a  
2b62 18 03			jr .pastdmark  
2b64 ..			.dmark: db "LSn"  
2b67 f1			.pastdmark: pop af  
2b68			endm  
# End of macro DMARK
2b68					CALLMONITOR 
2b68 cd 6f ee			call debug_vector  
2b6b				endm  
# End of macro CALLMONITOR
2b6b				endif 
2b6b			 
2b6b					; copy uword name to scratch 
2b6b			 
2b6b			;		ldir 
2b6b			.licplw:	; copy uword name to scratch converting to lower case as we go 
2b6b ed a0				ldi 
2b6d 1b					dec de 
2b6e 1a					ld a, (de) 
2b6f cd 73 10				call to_lower 
2b72 12					ld (de),a 
2b73 13					inc de 
2b74 3e 00				ld a, 0 
2b76 b9					cp c 
2b77 20 f2				jr nz, .licplw 
2b79			 
2b79			 
2b79			 
2b79 1b					dec de 
2b7a 3e 20				ld a, ' '    ; change null to space 
2b7c 12					ld (de), a 
2b7d			 
2b7d 13					inc de 
2b7e			 
2b7e d5					push de 
2b7f c1					pop bc     ; move scratch pointer to end of word name and save it 
2b80			 
2b80 e1					pop hl 
2b81 7e					ld a, (hl) 
2b82					;inc hl 
2b82					; skip word string 
2b82 cd f5 0d				call addatohl 
2b85			 
2b85 23					inc hl 
2b86			 
2b86				if DEBUG_FORTH_WORDS 
2b86					DMARK "LS3" 
2b86 f5				push af  
2b87 3a 9b 2b			ld a, (.dmark)  
2b8a 32 65 ee			ld (debug_mark),a  
2b8d 3a 9c 2b			ld a, (.dmark+1)  
2b90 32 66 ee			ld (debug_mark+1),a  
2b93 3a 9d 2b			ld a, (.dmark+2)  
2b96 32 67 ee			ld (debug_mark+2),a  
2b99 18 03			jr .pastdmark  
2b9b ..			.dmark: db "LS3"  
2b9e f1			.pastdmark: pop af  
2b9f			endm  
# End of macro DMARK
2b9f					CALLMONITOR 
2b9f cd 6f ee			call debug_vector  
2ba2				endm  
# End of macro CALLMONITOR
2ba2				endif 
2ba2					; should now be at the start of the machine code to setup the eval of the uword 
2ba2					; now locate the ptr to the string defintion 
2ba2			 
2ba2					; skip ld hl, 
2ba2					; then load the ptr 
2ba2			; TODO use get from hl ptr 
2ba2 23					inc hl 
2ba3 5e					ld e, (hl) 
2ba4 23					inc hl 
2ba5 56					ld d, (hl) 
2ba6 eb					ex de, hl 
2ba7			 
2ba7			 
2ba7				if DEBUG_FORTH_WORDS 
2ba7					DMARK "LSt" 
2ba7 f5				push af  
2ba8 3a bc 2b			ld a, (.dmark)  
2bab 32 65 ee			ld (debug_mark),a  
2bae 3a bd 2b			ld a, (.dmark+1)  
2bb1 32 66 ee			ld (debug_mark+1),a  
2bb4 3a be 2b			ld a, (.dmark+2)  
2bb7 32 67 ee			ld (debug_mark+2),a  
2bba 18 03			jr .pastdmark  
2bbc ..			.dmark: db "LSt"  
2bbf f1			.pastdmark: pop af  
2bc0			endm  
# End of macro DMARK
2bc0					CALLMONITOR 
2bc0 cd 6f ee			call debug_vector  
2bc3				endm  
# End of macro CALLMONITOR
2bc3				endif 
2bc3			 
2bc3			; cant push right now due to tokenised strings  
2bc3			 
2bc3			; get the destination of where to copy this definition to. 
2bc3			 
2bc3 c5					push bc 
2bc4 d1					pop de 
2bc5			 
2bc5 7e			.listl:         ld a,(hl) 
2bc6 fe 00				cp 0 
2bc8 28 09				jr z, .lreplsp     ; replace zero with space 
2bca					;cp FORTH_END_BUFFER 
2bca fe 3b				cp ';'    ; No end buffer flag but the ';' will be a good sign of the end of definition 
2bcc 28 0a				jr z, .listdone    ; at end of uword defination to close of scratch and finish 
2bce				 
2bce					; just copy this char as is then 
2bce			 
2bce 12					ld (de), a 
2bcf			 
2bcf 23			.listnxt:	inc hl 
2bd0 13					inc de 
2bd1 18 f2				jr .listl 
2bd3			 
2bd3 3e 20		.lreplsp:	ld a,' ' 
2bd5 12					ld (de), a 
2bd6 18 f7				jr .listnxt 
2bd8			 
2bd8			; close up uword def 
2bd8			 
2bd8			.listdone: 
2bd8 12					ld (de), a 
2bd9 13					inc de 
2bda 3e 00				ld a, 0 
2bdc 12					ld (de), a 
2bdd			 
2bdd			; now have def so clean up and push to stack 
2bdd			 
2bdd 21 bb e2				ld hl, scratch 
2be0				if DEBUG_FORTH_WORDS 
2be0					DMARK "Ltp" 
2be0 f5				push af  
2be1 3a f5 2b			ld a, (.dmark)  
2be4 32 65 ee			ld (debug_mark),a  
2be7 3a f6 2b			ld a, (.dmark+1)  
2bea 32 66 ee			ld (debug_mark+1),a  
2bed 3a f7 2b			ld a, (.dmark+2)  
2bf0 32 67 ee			ld (debug_mark+2),a  
2bf3 18 03			jr .pastdmark  
2bf5 ..			.dmark: db "Ltp"  
2bf8 f1			.pastdmark: pop af  
2bf9			endm  
# End of macro DMARK
2bf9					CALLMONITOR 
2bf9 cd 6f ee			call debug_vector  
2bfc				endm  
# End of macro CALLMONITOR
2bfc				endif 
2bfc			 
2bfc 18 1f			jr .listpush 
2bfe			 
2bfe			;.lnuword:	pop hl 
2bfe			;		call forth_tok_next 
2bfe			;		jp .ldouscan  
2bfe			 
2bfe			.lunotfound:		  
2bfe			 
2bfe				if DEBUG_FORTH_WORDS 
2bfe					DMARK "LSn" 
2bfe f5				push af  
2bff 3a 13 2c			ld a, (.dmark)  
2c02 32 65 ee			ld (debug_mark),a  
2c05 3a 14 2c			ld a, (.dmark+1)  
2c08 32 66 ee			ld (debug_mark+1),a  
2c0b 3a 15 2c			ld a, (.dmark+2)  
2c0e 32 67 ee			ld (debug_mark+2),a  
2c11 18 03			jr .pastdmark  
2c13 ..			.dmark: db "LSn"  
2c16 f1			.pastdmark: pop af  
2c17			endm  
# End of macro DMARK
2c17					CALLMONITOR 
2c17 cd 6f ee			call debug_vector  
2c1a				endm  
# End of macro CALLMONITOR
2c1a				endif 
2c1a			 
2c1a					 
2c1a			;		FORTH_DSP_POP 
2c1a			;		ld hl, .luno 
2c1a			 
2c1a					NEXTW			 
2c1a c3 80 1f			jp macro_next 
2c1d				endm 
# End of macro NEXTW
2c1d			 
2c1d			.listpush: 
2c1d				if DEBUG_FORTH_WORDS 
2c1d					DMARK "LS>" 
2c1d f5				push af  
2c1e 3a 32 2c			ld a, (.dmark)  
2c21 32 65 ee			ld (debug_mark),a  
2c24 3a 33 2c			ld a, (.dmark+1)  
2c27 32 66 ee			ld (debug_mark+1),a  
2c2a 3a 34 2c			ld a, (.dmark+2)  
2c2d 32 67 ee			ld (debug_mark+2),a  
2c30 18 03			jr .pastdmark  
2c32 ..			.dmark: db "LS>"  
2c35 f1			.pastdmark: pop af  
2c36			endm  
# End of macro DMARK
2c36					CALLMONITOR 
2c36 cd 6f ee			call debug_vector  
2c39				endm  
# End of macro CALLMONITOR
2c39				endif 
2c39 cd fe 1b				call forth_push_str 
2c3c			 
2c3c			 
2c3c			 
2c3c					NEXTW 
2c3c c3 80 1f			jp macro_next 
2c3f				endm 
# End of macro NEXTW
2c3f			 
2c3f			;.luno:    db "Word not found",0 
2c3f			 
2c3f			 
2c3f			 
2c3f			 
2c3f			 
2c3f			;		push hl   ; save pointer to start of uword def string 
2c3f			; 
2c3f			;; look for FORTH_EOL_LINE 
2c3f			;		ld a, FORTH_END_BUFFER 
2c3f			;		call strlent 
2c3f			; 
2c3f			;		inc hl		 ; space for coln def 
2c3f			;		inc hl 
2c3f			;		inc hl          ; space for terms 
2c3f			;		inc hl 
2c3f			; 
2c3f			;		ld a, 20   ; TODO get actual length 
2c3f			;		call addatohl    ; include a random amount of room for the uword name 
2c3f			; 
2c3f			;		 
2c3f			;	if DEBUG_FORTH_WORDS 
2c3f			;		DMARK "Lt1" 
2c3f			;		CALLMONITOR 
2c3f			;	endif 
2c3f			;		 
2c3f			; 
2c3f			;; malloc space for the string because we cant change it 
2c3f			; 
2c3f			;		call malloc 
2c3f			;	if DEBUG_FORTH_MALLOC_GUARD 
2c3f			;		push af 
2c3f			;		call ishlzero 
2c3f			;		pop af 
2c3f			;		 
2c3f			;		call z,malloc_error 
2c3f			;	endif 
2c3f			; 
2c3f			;	if DEBUG_FORTH_WORDS 
2c3f			;		DMARK "Lt2" 
2c3f			;		CALLMONITOR 
2c3f			;	endif 
2c3f			;		pop de 
2c3f			;		push hl    ; push the malloc to release later 
2c3f			;		push hl   ;  push back a copy for the later stack push 
2c3f			;		 
2c3f			;; copy the string swapping out the zero terms for spaces 
2c3f			; 
2c3f			;		; de has our source 
2c3f			;		; hl has our dest 
2c3f			; 
2c3f			;; add the coln def 
2c3f			; 
2c3f			;		ld a, ':' 
2c3f			;		ld (hl), a 
2c3f			;		inc hl 
2c3f			;		ld a, ' ' 
2c3f			;		ld (hl), a 
2c3f			;		inc hl 
2c3f			; 
2c3f			;; add the uname word 
2c3f			;		push de   ; save our string for now 
2c3f			;		ex de, hl 
2c3f			; 
2c3f			;		FORTH_DSP_VALUE 
2c3f			;		;v5 FORTH_DSP_VALUE 
2c3f			; 
2c3f			;		inc hl   ; skip type but we know by now this is OK 
2c3f			; 
2c3f			;.luword:	ld a,(hl) 
2c3f			;		cp 0 
2c3f			;		jr z, .luword2 
2c3f			;		ld (de), a 
2c3f			;		inc de 
2c3f			;		inc hl 
2c3f			;		jr .luword 
2c3f			; 
2c3f			;.luword2:	ld a, ' ' 
2c3f			;		ld (de), a 
2c3f			;;		inc hl 
2c3f			;;		inc de 
2c3f			;;		ld (de), a 
2c3f			;;		inc hl 
2c3f			;		inc de 
2c3f			; 
2c3f			;		ex de, hl 
2c3f			;		pop de 
2c3f			;		 
2c3f			;		 
2c3f			; 
2c3f			;; detoken that string and copy it 
2c3f			; 
2c3f			;	if DEBUG_FORTH_WORDS 
2c3f			;		DMARK "Lt2" 
2c3f			;		CALLMONITOR 
2c3f			;	endif 
2c3f			;.ldetok:	ld a, (de) 
2c3f			;		cp FORTH_END_BUFFER 
2c3f			;		jr z, .ldetokend 
2c3f			;		; swap out any zero term for space 
2c3f			;		cp 0 
2c3f			;		jr nz, .ldetoknext 
2c3f			;		ld a, ' ' 
2c3f			; 
2c3f			;	if DEBUG_FORTH_WORDS 
2c3f			;		DMARK "LtS" 
2c3f			;		CALLMONITOR 
2c3f			;	endif 
2c3f			;.ldetoknext:	ld (hl), a 
2c3f			;		inc de 
2c3f			;		inc hl 
2c3f			;		jr .ldetok 
2c3f			; 
2c3f			;.ldetokend:	ld a, 0    ; replace forth eol with string term for pushing 
2c3f			;		ld (hl), a  
2c3f			; 
2c3f			;; free that temp malloc 
2c3f			; 
2c3f			;		pop hl    
2c3f			; 
2c3f			;	if DEBUG_FORTH_WORDS 
2c3f			;		DMARK "Lt4" 
2c3f			;		CALLMONITOR 
2c3f			;	endif 
2c3f			;		call forth_apushstrhl 
2c3f			; 
2c3f			;		; get rid of temp malloc area 
2c3f			; 
2c3f			;		pop hl 
2c3f			;		call free 
2c3f			; 
2c3f			;		jr .ludone 
2c3f			; 
2c3f			;.lnuword:	pop hl 
2c3f			;		call forth_tok_next 
2c3f			;		jp .ldouscan  
2c3f			; 
2c3f			;.ludone:		 pop hl 
2c3f			; 
2c3f					NEXTW 
2c3f c3 80 1f			jp macro_next 
2c42				endm 
# End of macro NEXTW
2c42			 
2c42			.FORGET: 
2c42				CWHEAD .NOP 73 "FORGET" 6 WORD_FLAG_CODE 
2c42 5d				db WORD_SYS_CORE+73             
2c43 bb 2c			dw .NOP            
2c45 07				db 6 + 1 
2c46 .. 00			db "FORGET",0              
2c4d				endm 
# End of macro CWHEAD
2c4d			; | FORGET ( uword -- )    Forget the uword on TOS | DONE 
2c4d			; | | Will flag the word's op code to be deleted as well as replace the first char of the word with '_'. Quoted uword name must be in caps. 
2c4d			; | |  
2c4d			; | | e.g. "MORE" forget 
2c4d					if DEBUG_FORTH_WORDS_KEY 
2c4d						DMARK "FRG" 
2c4d f5				push af  
2c4e 3a 62 2c			ld a, (.dmark)  
2c51 32 65 ee			ld (debug_mark),a  
2c54 3a 63 2c			ld a, (.dmark+1)  
2c57 32 66 ee			ld (debug_mark+1),a  
2c5a 3a 64 2c			ld a, (.dmark+2)  
2c5d 32 67 ee			ld (debug_mark+2),a  
2c60 18 03			jr .pastdmark  
2c62 ..			.dmark: db "FRG"  
2c65 f1			.pastdmark: pop af  
2c66			endm  
# End of macro DMARK
2c66						CALLMONITOR 
2c66 cd 6f ee			call debug_vector  
2c69				endm  
# End of macro CALLMONITOR
2c69					endif 
2c69			 
2c69				; find uword 
2c69			        ; update start of word with "_" 
2c69				; replace uword with deleted flag 
2c69			 
2c69			 
2c69			;	if DEBUG_FORTH_WORDS 
2c69			;		DMARK "FOG" 
2c69			;		CALLMONITOR 
2c69			;	endif 
2c69			 
2c69			 
2c69					; Get ptr to the word we need to look up 
2c69			 
2c69					FORTH_DSP_VALUEHL 
2c69 cd 95 1d			call macro_dsp_valuehl 
2c6c				endm 
# End of macro FORTH_DSP_VALUEHL
2c6c					;v5 FORTH_DSP_VALUE 
2c6c				; TODO type check 
2c6c			;		inc hl    ; Skip type check  
2c6c e5					push hl 
2c6d c1					pop bc 
2c6e			;		ex de, hl    ; put into DE 
2c6e			 
2c6e			 
2c6e 21 19 62				ld hl, baseram 
2c71					;ld hl, baseusermem 
2c71			 
2c71				; skip dict stub 
2c71			;	call forth_tok_next 
2c71 e5			push hl   ; sacreifical push 
2c72			 
2c72			.fldouscanm: 
2c72 e1				pop hl 
2c73			.fldouscan: 
2c73			;	if DEBUG_FORTH_WORDS 
2c73			;		DMARK "LSs" 
2c73			;		CALLMONITOR 
2c73			;	endif 
2c73				; skip dict stub 
2c73 cd bd 20				call forth_tok_next 
2c76			 
2c76			 
2c76			; while we have words to look for 
2c76			 
2c76 7e				ld a, (hl)      
2c77			;	if DEBUG_FORTH_WORDS 
2c77			;		DMARK "LSk" 
2c77			;		CALLMONITOR 
2c77			;	endif 
2c77 fe 00				cp WORD_SYS_END 
2c79 ca b5 2c				jp z, .flunotfound 
2c7c fe 01				cp WORD_SYS_UWORD 
2c7e c2 73 2c				jp nz, .fldouscan 
2c81			 
2c81			;	if DEBUG_FORTH_WORDS 
2c81			;		DMARK "LSu" 
2c81			;		CALLMONITOR 
2c81			;	endif 
2c81			 
2c81					; found a uword but is it the one we want... 
2c81			 
2c81 c5					push bc     ; uword to find is on bc 
2c82 d1					pop de 
2c83			 
2c83 e5					push hl  ; to save the ptr 
2c84			 
2c84					; skip opcode 
2c84 23					inc hl  
2c85					; skip next ptr 
2c85 23					inc hl  
2c86 23					inc hl 
2c87					; skip len 
2c87 23					inc hl 
2c88			 
2c88			;	if DEBUG_FORTH_WORDS 
2c88			;		DMARK "LSc" 
2c88			;		CALLMONITOR 
2c88			;	endif 
2c88 cd 93 11				call strcmp 
2c8b c2 72 2c				jp nz, .fldouscanm 
2c8e			; 
2c8e			; 
2c8e			;; while we have words to look for 
2c8e			; 
2c8e			;.fdouscan:	ld a, (hl)      
2c8e			;	if DEBUG_FORTH_WORDS 
2c8e			;		DMARK "LSs" 
2c8e			;		CALLMONITOR 
2c8e			;	endif 
2c8e			;		cp WORD_SYS_END 
2c8e			;		jp z, .fudone 
2c8e			;		cp WORD_SYS_UWORD 
2c8e			;		jp nz, .fnuword 
2c8e			; 
2c8e			;	if DEBUG_FORTH_WORDS 
2c8e			;		DMARK "FGu" 
2c8e			;		CALLMONITOR 
2c8e			;	endif 
2c8e			; 
2c8e			;		; found a uword but is it the one we want... 
2c8e			; 
2c8e			; 
2c8e			;	        pop de   ; get back the dsp name 
2c8e			;		push de 
2c8e			; 
2c8e			;		push hl  ; to save the ptr 
2c8e			; 
2c8e			;		; skip opcode 
2c8e			;		inc hl  
2c8e			;		; skip next ptr 
2c8e			;		inc hl  
2c8e			;		inc hl 
2c8e			;		; skip len 
2c8e			;		inc hl 
2c8e			; 
2c8e			;	if DEBUG_FORTH_WORDS 
2c8e			;		DMARK "FGc" 
2c8e			;		CALLMONITOR 
2c8e			;	endif 
2c8e			;		call strcmp 
2c8e			;		jp nz, .fnuword 
2c8e			 
2c8e			 
2c8e e1			pop hl 
2c8f			 
2c8f				 
2c8f				if DEBUG_FORTH_WORDS 
2c8f					DMARK "FGm" 
2c8f f5				push af  
2c90 3a a4 2c			ld a, (.dmark)  
2c93 32 65 ee			ld (debug_mark),a  
2c96 3a a5 2c			ld a, (.dmark+1)  
2c99 32 66 ee			ld (debug_mark+1),a  
2c9c 3a a6 2c			ld a, (.dmark+2)  
2c9f 32 67 ee			ld (debug_mark+2),a  
2ca2 18 03			jr .pastdmark  
2ca4 ..			.dmark: db "FGm"  
2ca7 f1			.pastdmark: pop af  
2ca8			endm  
# End of macro DMARK
2ca8					CALLMONITOR 
2ca8 cd 6f ee			call debug_vector  
2cab				endm  
# End of macro CALLMONITOR
2cab				endif 
2cab			 
2cab			 
2cab			 
2cab					; we have a uword so push its name to the stack 
2cab			 
2cab			;	   	push hl  ; save so we can move to next dict block 
2cab			;pop hl 
2cab			 
2cab					; update opcode to deleted 
2cab 3e 03				ld a, WORD_SYS_DELETED 
2cad 77					ld (hl), a 
2cae			 
2cae 23					inc hl  
2caf					; skip next ptr 
2caf 23					inc hl  
2cb0 23					inc hl 
2cb1					; skip len 
2cb1 23					inc hl 
2cb2			 
2cb2					; TODO change parser to skip deleted words but for now mark it out 
2cb2 3e 5f				ld a, "_" 
2cb4 77					ld  (hl),a 
2cb5			 
2cb5			;		jr .fudone 
2cb5			; 
2cb5			;.fnuword:	pop hl 
2cb5			;		call forth_tok_next 
2cb5			;		jp .fdouscan  
2cb5			 
2cb5			.flunotfound:		  
2cb5			 
2cb5			 
2cb5					 
2cb5					FORTH_DSP_POP 
2cb5 cd 4d 1e			call macro_forth_dsp_pop 
2cb8				endm 
# End of macro FORTH_DSP_POP
2cb8			;		ld hl, .luno 
2cb8			;.fudone:		 pop hl 
2cb8					NEXTW 
2cb8 c3 80 1f			jp macro_next 
2cbb				endm 
# End of macro NEXTW
2cbb			.NOP: 
2cbb				CWHEAD .COMO 77 "NOP" 3 WORD_FLAG_CODE 
2cbb 61				db WORD_SYS_CORE+77             
2cbc e2 2c			dw .COMO            
2cbe 04				db 3 + 1 
2cbf .. 00			db "NOP",0              
2cc3				endm 
# End of macro CWHEAD
2cc3			; | NOP (  --  ) Do nothing | DONE 
2cc3					if DEBUG_FORTH_WORDS_KEY 
2cc3						DMARK "NOP" 
2cc3 f5				push af  
2cc4 3a d8 2c			ld a, (.dmark)  
2cc7 32 65 ee			ld (debug_mark),a  
2cca 3a d9 2c			ld a, (.dmark+1)  
2ccd 32 66 ee			ld (debug_mark+1),a  
2cd0 3a da 2c			ld a, (.dmark+2)  
2cd3 32 67 ee			ld (debug_mark+2),a  
2cd6 18 03			jr .pastdmark  
2cd8 ..			.dmark: db "NOP"  
2cdb f1			.pastdmark: pop af  
2cdc			endm  
# End of macro DMARK
2cdc						CALLMONITOR 
2cdc cd 6f ee			call debug_vector  
2cdf				endm  
# End of macro CALLMONITOR
2cdf					endif 
2cdf				       NEXTW 
2cdf c3 80 1f			jp macro_next 
2ce2				endm 
# End of macro NEXTW
2ce2			.COMO: 
2ce2				CWHEAD .COMC 90 "(" 1 WORD_FLAG_CODE 
2ce2 6e				db WORD_SYS_CORE+90             
2ce3 34 2d			dw .COMC            
2ce5 02				db 1 + 1 
2ce6 .. 00			db "(",0              
2ce8				endm 
# End of macro CWHEAD
2ce8			; | ( ( -- )  Start of comment | DONE 
2ce8			 
2ce8			 
2ce8 2a bc e5				ld hl, ( os_tok_ptr) 
2ceb 11 2f 2d			ld de, .closepar 
2cee					 
2cee					if DEBUG_FORTH_WORDS 
2cee						DMARK ").." 
2cee f5				push af  
2cef 3a 03 2d			ld a, (.dmark)  
2cf2 32 65 ee			ld (debug_mark),a  
2cf5 3a 04 2d			ld a, (.dmark+1)  
2cf8 32 66 ee			ld (debug_mark+1),a  
2cfb 3a 05 2d			ld a, (.dmark+2)  
2cfe 32 67 ee			ld (debug_mark+2),a  
2d01 18 03			jr .pastdmark  
2d03 ..			.dmark: db ").."  
2d06 f1			.pastdmark: pop af  
2d07			endm  
# End of macro DMARK
2d07						CALLMONITOR 
2d07 cd 6f ee			call debug_vector  
2d0a				endm  
# End of macro CALLMONITOR
2d0a					endif 
2d0a cd 87 20			call findnexttok  
2d0d			 
2d0d					if DEBUG_FORTH_WORDS 
2d0d						DMARK "IF5" 
2d0d f5				push af  
2d0e 3a 22 2d			ld a, (.dmark)  
2d11 32 65 ee			ld (debug_mark),a  
2d14 3a 23 2d			ld a, (.dmark+1)  
2d17 32 66 ee			ld (debug_mark+1),a  
2d1a 3a 24 2d			ld a, (.dmark+2)  
2d1d 32 67 ee			ld (debug_mark+2),a  
2d20 18 03			jr .pastdmark  
2d22 ..			.dmark: db "IF5"  
2d25 f1			.pastdmark: pop af  
2d26			endm  
# End of macro DMARK
2d26						CALLMONITOR 
2d26 cd 6f ee			call debug_vector  
2d29				endm  
# End of macro CALLMONITOR
2d29					endif 
2d29				; replace below with ) exec using tok_ptr 
2d29 22 bc e5			ld (os_tok_ptr), hl 
2d2c c3 09 20			jp exec1 
2d2f			 
2d2f .. 00			.closepar:   db ")",0 
2d31			 
2d31				       NEXTW 
2d31 c3 80 1f			jp macro_next 
2d34				endm 
# End of macro NEXTW
2d34			.COMC: 
2d34				CWHEAD .SCRATCH 91 ")" 1 WORD_FLAG_CODE 
2d34 6f				db WORD_SYS_CORE+91             
2d35 3d 2d			dw .SCRATCH            
2d37 02				db 1 + 1 
2d38 .. 00			db ")",0              
2d3a				endm 
# End of macro CWHEAD
2d3a			; | ) ( -- )  End of comment |  DONE  
2d3a				       NEXTW 
2d3a c3 80 1f			jp macro_next 
2d3d				endm 
# End of macro NEXTW
2d3d			 
2d3d			.SCRATCH: 
2d3d				CWHEAD .INC 91 "SCRATCH" 7 WORD_FLAG_CODE 
2d3d 6f				db WORD_SYS_CORE+91             
2d3e 78 2d			dw .INC            
2d40 08				db 7 + 1 
2d41 .. 00			db "SCRATCH",0              
2d49				endm 
# End of macro CWHEAD
2d49			; | SCRATCH ( u -- addr ) Pushes address of offset u to stack | DONE 
2d49			; | | The scratch area provides 32 word array. Can be used as single byte or as a word by passing the offset on stack. Pushes the resulting address to stack.  
2d49			; | | When used with the direct storage writing/malloc and the !@ or word versions it is possible to construct an expanded and flexible variable system 
2d49			; | |  
2d49			; | | e.g.    : score $00 scratch ; 
2d49			; | |  
2d49			; | | $00 score ! 
2d49			; | | $01 score +! 
2d49			; | |  
2d49			; | | e.g.   : varword $0a scratch ;  
2d49			; | | 
2d49			; | | $8000 varword ! 
2d49					if DEBUG_FORTH_WORDS_KEY 
2d49						DMARK "SCR" 
2d49 f5				push af  
2d4a 3a 5e 2d			ld a, (.dmark)  
2d4d 32 65 ee			ld (debug_mark),a  
2d50 3a 5f 2d			ld a, (.dmark+1)  
2d53 32 66 ee			ld (debug_mark+1),a  
2d56 3a 60 2d			ld a, (.dmark+2)  
2d59 32 67 ee			ld (debug_mark+2),a  
2d5c 18 03			jr .pastdmark  
2d5e ..			.dmark: db "SCR"  
2d61 f1			.pastdmark: pop af  
2d62			endm  
# End of macro DMARK
2d62						CALLMONITOR 
2d62 cd 6f ee			call debug_vector  
2d65				endm  
# End of macro CALLMONITOR
2d65					endif 
2d65			 
2d65					FORTH_DSP_VALUEHL 
2d65 cd 95 1d			call macro_dsp_valuehl 
2d68				endm 
# End of macro FORTH_DSP_VALUEHL
2d68				 
2d68					FORTH_DSP_POP 
2d68 cd 4d 1e			call macro_forth_dsp_pop 
2d6b				endm 
# End of macro FORTH_DSP_POP
2d6b			 
2d6b 7d					ld a, l 
2d6c 21 e0 e7				ld hl, os_var_array 
2d6f cd f5 0d				call addatohl 
2d72			 
2d72 cd 90 1b				call forth_push_numhl 
2d75			 
2d75				       NEXTW 
2d75 c3 80 1f			jp macro_next 
2d78				endm 
# End of macro NEXTW
2d78			 
2d78			.INC: 
2d78				CWHEAD .DEC 91 "+!" 2 WORD_FLAG_CODE 
2d78 6f				db WORD_SYS_CORE+91             
2d79 ce 2d			dw .DEC            
2d7b 03				db 2 + 1 
2d7c .. 00			db "+!",0              
2d7f				endm 
# End of macro CWHEAD
2d7f			; | +! ( u a -- )  Increment byte at address a by the value u | DONE 
2d7f					if DEBUG_FORTH_WORDS_KEY 
2d7f						DMARK "+s_" 
2d7f f5				push af  
2d80 3a 94 2d			ld a, (.dmark)  
2d83 32 65 ee			ld (debug_mark),a  
2d86 3a 95 2d			ld a, (.dmark+1)  
2d89 32 66 ee			ld (debug_mark+1),a  
2d8c 3a 96 2d			ld a, (.dmark+2)  
2d8f 32 67 ee			ld (debug_mark+2),a  
2d92 18 03			jr .pastdmark  
2d94 ..			.dmark: db "+s_"  
2d97 f1			.pastdmark: pop af  
2d98			endm  
# End of macro DMARK
2d98						CALLMONITOR 
2d98 cd 6f ee			call debug_vector  
2d9b				endm  
# End of macro CALLMONITOR
2d9b					endif 
2d9b			 
2d9b					FORTH_DSP_VALUEHL 
2d9b cd 95 1d			call macro_dsp_valuehl 
2d9e				endm 
# End of macro FORTH_DSP_VALUEHL
2d9e			 
2d9e e5					push hl   ; save address 
2d9f			 
2d9f					FORTH_DSP_POP 
2d9f cd 4d 1e			call macro_forth_dsp_pop 
2da2				endm 
# End of macro FORTH_DSP_POP
2da2			 
2da2					FORTH_DSP_VALUEHL 
2da2 cd 95 1d			call macro_dsp_valuehl 
2da5				endm 
# End of macro FORTH_DSP_VALUEHL
2da5			 
2da5 e5					push hl 
2da6					FORTH_DSP_POP 
2da6 cd 4d 1e			call macro_forth_dsp_pop 
2da9				endm 
# End of macro FORTH_DSP_POP
2da9 e1					pop hl 
2daa			 
2daa					; hl contains value to add to byte at a 
2daa				 
2daa eb					ex de, hl 
2dab			 
2dab e1					pop hl 
2dac			 
2dac					if DEBUG_FORTH_WORDS 
2dac						DMARK "INC" 
2dac f5				push af  
2dad 3a c1 2d			ld a, (.dmark)  
2db0 32 65 ee			ld (debug_mark),a  
2db3 3a c2 2d			ld a, (.dmark+1)  
2db6 32 66 ee			ld (debug_mark+1),a  
2db9 3a c3 2d			ld a, (.dmark+2)  
2dbc 32 67 ee			ld (debug_mark+2),a  
2dbf 18 03			jr .pastdmark  
2dc1 ..			.dmark: db "INC"  
2dc4 f1			.pastdmark: pop af  
2dc5			endm  
# End of macro DMARK
2dc5						CALLMONITOR 
2dc5 cd 6f ee			call debug_vector  
2dc8				endm  
# End of macro CALLMONITOR
2dc8					endif 
2dc8			 
2dc8 7e					ld a,(hl) 
2dc9 83					add e 
2dca 77					ld (hl),a 
2dcb			 
2dcb			 
2dcb			 
2dcb				       NEXTW 
2dcb c3 80 1f			jp macro_next 
2dce				endm 
# End of macro NEXTW
2dce			 
2dce			.DEC: 
2dce				CWHEAD .INC2 91 "-!" 2 WORD_FLAG_CODE 
2dce 6f				db WORD_SYS_CORE+91             
2dcf 22 2e			dw .INC2            
2dd1 03				db 2 + 1 
2dd2 .. 00			db "-!",0              
2dd5				endm 
# End of macro CWHEAD
2dd5			; | -! ( u a -- )  Decrement byte at address a by the value u | DONE 
2dd5					if DEBUG_FORTH_WORDS_KEY 
2dd5						DMARK "-s_" 
2dd5 f5				push af  
2dd6 3a ea 2d			ld a, (.dmark)  
2dd9 32 65 ee			ld (debug_mark),a  
2ddc 3a eb 2d			ld a, (.dmark+1)  
2ddf 32 66 ee			ld (debug_mark+1),a  
2de2 3a ec 2d			ld a, (.dmark+2)  
2de5 32 67 ee			ld (debug_mark+2),a  
2de8 18 03			jr .pastdmark  
2dea ..			.dmark: db "-s_"  
2ded f1			.pastdmark: pop af  
2dee			endm  
# End of macro DMARK
2dee						CALLMONITOR 
2dee cd 6f ee			call debug_vector  
2df1				endm  
# End of macro CALLMONITOR
2df1					endif 
2df1			 
2df1					FORTH_DSP_VALUEHL 
2df1 cd 95 1d			call macro_dsp_valuehl 
2df4				endm 
# End of macro FORTH_DSP_VALUEHL
2df4			 
2df4 e5					push hl   ; save address 
2df5			 
2df5					FORTH_DSP_POP 
2df5 cd 4d 1e			call macro_forth_dsp_pop 
2df8				endm 
# End of macro FORTH_DSP_POP
2df8			 
2df8					FORTH_DSP_VALUEHL 
2df8 cd 95 1d			call macro_dsp_valuehl 
2dfb				endm 
# End of macro FORTH_DSP_VALUEHL
2dfb			 
2dfb					; hl contains value to add to byte at a 
2dfb				 
2dfb eb					ex de, hl 
2dfc			 
2dfc e1					pop hl 
2dfd			 
2dfd					if DEBUG_FORTH_WORDS 
2dfd						DMARK "DEC" 
2dfd f5				push af  
2dfe 3a 12 2e			ld a, (.dmark)  
2e01 32 65 ee			ld (debug_mark),a  
2e04 3a 13 2e			ld a, (.dmark+1)  
2e07 32 66 ee			ld (debug_mark+1),a  
2e0a 3a 14 2e			ld a, (.dmark+2)  
2e0d 32 67 ee			ld (debug_mark+2),a  
2e10 18 03			jr .pastdmark  
2e12 ..			.dmark: db "DEC"  
2e15 f1			.pastdmark: pop af  
2e16			endm  
# End of macro DMARK
2e16						CALLMONITOR 
2e16 cd 6f ee			call debug_vector  
2e19				endm  
# End of macro CALLMONITOR
2e19					endif 
2e19			 
2e19 7e					ld a,(hl) 
2e1a 93					sub e 
2e1b 77					ld (hl),a 
2e1c			 
2e1c			 
2e1c					FORTH_DSP_POP 
2e1c cd 4d 1e			call macro_forth_dsp_pop 
2e1f				endm 
# End of macro FORTH_DSP_POP
2e1f			 
2e1f				       NEXTW 
2e1f c3 80 1f			jp macro_next 
2e22				endm 
# End of macro NEXTW
2e22			 
2e22			.INC2: 
2e22				CWHEAD .DEC2 91 "+2!" 3 WORD_FLAG_CODE 
2e22 6f				db WORD_SYS_CORE+91             
2e23 cf 2e			dw .DEC2            
2e25 04				db 3 + 1 
2e26 .. 00			db "+2!",0              
2e2a				endm 
# End of macro CWHEAD
2e2a			; | +2! ( u a -- )  Increment word at address a by the value u | DONE 
2e2a			 
2e2a					if DEBUG_FORTH_WORDS_KEY 
2e2a						DMARK "+2s" 
2e2a f5				push af  
2e2b 3a 3f 2e			ld a, (.dmark)  
2e2e 32 65 ee			ld (debug_mark),a  
2e31 3a 40 2e			ld a, (.dmark+1)  
2e34 32 66 ee			ld (debug_mark+1),a  
2e37 3a 41 2e			ld a, (.dmark+2)  
2e3a 32 67 ee			ld (debug_mark+2),a  
2e3d 18 03			jr .pastdmark  
2e3f ..			.dmark: db "+2s"  
2e42 f1			.pastdmark: pop af  
2e43			endm  
# End of macro DMARK
2e43						CALLMONITOR 
2e43 cd 6f ee			call debug_vector  
2e46				endm  
# End of macro CALLMONITOR
2e46					endif 
2e46			 
2e46					; Address 
2e46			 
2e46					FORTH_DSP_VALUEHL 
2e46 cd 95 1d			call macro_dsp_valuehl 
2e49				endm 
# End of macro FORTH_DSP_VALUEHL
2e49			 
2e49 e5					push hl    ; save address 
2e4a			 
2e4a					; load content into de 
2e4a			 
2e4a 5e					ld e,(hl) 
2e4b 23					inc hl 
2e4c 56					ld d, (hl) 
2e4d			 
2e4d					if DEBUG_FORTH_WORDS 
2e4d						DMARK "+2a" 
2e4d f5				push af  
2e4e 3a 62 2e			ld a, (.dmark)  
2e51 32 65 ee			ld (debug_mark),a  
2e54 3a 63 2e			ld a, (.dmark+1)  
2e57 32 66 ee			ld (debug_mark+1),a  
2e5a 3a 64 2e			ld a, (.dmark+2)  
2e5d 32 67 ee			ld (debug_mark+2),a  
2e60 18 03			jr .pastdmark  
2e62 ..			.dmark: db "+2a"  
2e65 f1			.pastdmark: pop af  
2e66			endm  
# End of macro DMARK
2e66						CALLMONITOR 
2e66 cd 6f ee			call debug_vector  
2e69				endm  
# End of macro CALLMONITOR
2e69					endif 
2e69			 
2e69					FORTH_DSP_POP 
2e69 cd 4d 1e			call macro_forth_dsp_pop 
2e6c				endm 
# End of macro FORTH_DSP_POP
2e6c			 
2e6c					; Get value to add 
2e6c			 
2e6c					FORTH_DSP_VALUE 
2e6c cd 7e 1d			call macro_forth_dsp_value 
2e6f				endm 
# End of macro FORTH_DSP_VALUE
2e6f			 
2e6f					if DEBUG_FORTH_WORDS 
2e6f						DMARK "+2v" 
2e6f f5				push af  
2e70 3a 84 2e			ld a, (.dmark)  
2e73 32 65 ee			ld (debug_mark),a  
2e76 3a 85 2e			ld a, (.dmark+1)  
2e79 32 66 ee			ld (debug_mark+1),a  
2e7c 3a 86 2e			ld a, (.dmark+2)  
2e7f 32 67 ee			ld (debug_mark+2),a  
2e82 18 03			jr .pastdmark  
2e84 ..			.dmark: db "+2v"  
2e87 f1			.pastdmark: pop af  
2e88			endm  
# End of macro DMARK
2e88						CALLMONITOR 
2e88 cd 6f ee			call debug_vector  
2e8b				endm  
# End of macro CALLMONITOR
2e8b					endif 
2e8b			 
2e8b 19					add hl, de 
2e8c			 
2e8c					if DEBUG_FORTH_WORDS 
2e8c						DMARK "+2+" 
2e8c f5				push af  
2e8d 3a a1 2e			ld a, (.dmark)  
2e90 32 65 ee			ld (debug_mark),a  
2e93 3a a2 2e			ld a, (.dmark+1)  
2e96 32 66 ee			ld (debug_mark+1),a  
2e99 3a a3 2e			ld a, (.dmark+2)  
2e9c 32 67 ee			ld (debug_mark+2),a  
2e9f 18 03			jr .pastdmark  
2ea1 ..			.dmark: db "+2+"  
2ea4 f1			.pastdmark: pop af  
2ea5			endm  
# End of macro DMARK
2ea5						CALLMONITOR 
2ea5 cd 6f ee			call debug_vector  
2ea8				endm  
# End of macro CALLMONITOR
2ea8					endif 
2ea8			 
2ea8					; move result to de 
2ea8			 
2ea8 eb					ex de, hl 
2ea9			 
2ea9					; Address 
2ea9			 
2ea9 e1					pop hl 
2eaa			 
2eaa					; save it back 
2eaa			 
2eaa 73					ld (hl), e 
2eab 23					inc hl 
2eac 72					ld (hl), d 
2ead			 
2ead					if DEBUG_FORTH_WORDS 
2ead						DMARK "+2e" 
2ead f5				push af  
2eae 3a c2 2e			ld a, (.dmark)  
2eb1 32 65 ee			ld (debug_mark),a  
2eb4 3a c3 2e			ld a, (.dmark+1)  
2eb7 32 66 ee			ld (debug_mark+1),a  
2eba 3a c4 2e			ld a, (.dmark+2)  
2ebd 32 67 ee			ld (debug_mark+2),a  
2ec0 18 03			jr .pastdmark  
2ec2 ..			.dmark: db "+2e"  
2ec5 f1			.pastdmark: pop af  
2ec6			endm  
# End of macro DMARK
2ec6						CALLMONITOR 
2ec6 cd 6f ee			call debug_vector  
2ec9				endm  
# End of macro CALLMONITOR
2ec9					endif 
2ec9			 
2ec9			 
2ec9			 
2ec9					FORTH_DSP_POP 
2ec9 cd 4d 1e			call macro_forth_dsp_pop 
2ecc				endm 
# End of macro FORTH_DSP_POP
2ecc			 
2ecc			 
2ecc				       NEXTW 
2ecc c3 80 1f			jp macro_next 
2ecf				endm 
# End of macro NEXTW
2ecf			 
2ecf			.DEC2: 
2ecf				CWHEAD .GET2 91 "-2!" 3 WORD_FLAG_CODE 
2ecf 6f				db WORD_SYS_CORE+91             
2ed0 7e 2f			dw .GET2            
2ed2 04				db 3 + 1 
2ed3 .. 00			db "-2!",0              
2ed7				endm 
# End of macro CWHEAD
2ed7			; | -2! ( u a -- )  Decrement word at address a by the value u | DONE 
2ed7			 
2ed7			 
2ed7					if DEBUG_FORTH_WORDS_KEY 
2ed7						DMARK "-2s" 
2ed7 f5				push af  
2ed8 3a ec 2e			ld a, (.dmark)  
2edb 32 65 ee			ld (debug_mark),a  
2ede 3a ed 2e			ld a, (.dmark+1)  
2ee1 32 66 ee			ld (debug_mark+1),a  
2ee4 3a ee 2e			ld a, (.dmark+2)  
2ee7 32 67 ee			ld (debug_mark+2),a  
2eea 18 03			jr .pastdmark  
2eec ..			.dmark: db "-2s"  
2eef f1			.pastdmark: pop af  
2ef0			endm  
# End of macro DMARK
2ef0						CALLMONITOR 
2ef0 cd 6f ee			call debug_vector  
2ef3				endm  
# End of macro CALLMONITOR
2ef3					endif 
2ef3			 
2ef3					; Address 
2ef3			 
2ef3					FORTH_DSP_VALUEHL 
2ef3 cd 95 1d			call macro_dsp_valuehl 
2ef6				endm 
# End of macro FORTH_DSP_VALUEHL
2ef6			 
2ef6 e5					push hl    ; save address 
2ef7			 
2ef7					; load content into de 
2ef7			 
2ef7 5e					ld e,(hl) 
2ef8 23					inc hl 
2ef9 56					ld d, (hl) 
2efa			 
2efa					if DEBUG_FORTH_WORDS 
2efa						DMARK "-2a" 
2efa f5				push af  
2efb 3a 0f 2f			ld a, (.dmark)  
2efe 32 65 ee			ld (debug_mark),a  
2f01 3a 10 2f			ld a, (.dmark+1)  
2f04 32 66 ee			ld (debug_mark+1),a  
2f07 3a 11 2f			ld a, (.dmark+2)  
2f0a 32 67 ee			ld (debug_mark+2),a  
2f0d 18 03			jr .pastdmark  
2f0f ..			.dmark: db "-2a"  
2f12 f1			.pastdmark: pop af  
2f13			endm  
# End of macro DMARK
2f13						CALLMONITOR 
2f13 cd 6f ee			call debug_vector  
2f16				endm  
# End of macro CALLMONITOR
2f16					endif 
2f16			 
2f16					FORTH_DSP_POP 
2f16 cd 4d 1e			call macro_forth_dsp_pop 
2f19				endm 
# End of macro FORTH_DSP_POP
2f19			 
2f19					; Get value to remove 
2f19			 
2f19					FORTH_DSP_VALUE 
2f19 cd 7e 1d			call macro_forth_dsp_value 
2f1c				endm 
# End of macro FORTH_DSP_VALUE
2f1c			 
2f1c					if DEBUG_FORTH_WORDS 
2f1c						DMARK "-2v" 
2f1c f5				push af  
2f1d 3a 31 2f			ld a, (.dmark)  
2f20 32 65 ee			ld (debug_mark),a  
2f23 3a 32 2f			ld a, (.dmark+1)  
2f26 32 66 ee			ld (debug_mark+1),a  
2f29 3a 33 2f			ld a, (.dmark+2)  
2f2c 32 67 ee			ld (debug_mark+2),a  
2f2f 18 03			jr .pastdmark  
2f31 ..			.dmark: db "-2v"  
2f34 f1			.pastdmark: pop af  
2f35			endm  
# End of macro DMARK
2f35						CALLMONITOR 
2f35 cd 6f ee			call debug_vector  
2f38				endm  
# End of macro CALLMONITOR
2f38					endif 
2f38			 
2f38 eb					ex de, hl 
2f39 ed 52				sbc hl, de 
2f3b			 
2f3b					if DEBUG_FORTH_WORDS 
2f3b						DMARK "-2d" 
2f3b f5				push af  
2f3c 3a 50 2f			ld a, (.dmark)  
2f3f 32 65 ee			ld (debug_mark),a  
2f42 3a 51 2f			ld a, (.dmark+1)  
2f45 32 66 ee			ld (debug_mark+1),a  
2f48 3a 52 2f			ld a, (.dmark+2)  
2f4b 32 67 ee			ld (debug_mark+2),a  
2f4e 18 03			jr .pastdmark  
2f50 ..			.dmark: db "-2d"  
2f53 f1			.pastdmark: pop af  
2f54			endm  
# End of macro DMARK
2f54						CALLMONITOR 
2f54 cd 6f ee			call debug_vector  
2f57				endm  
# End of macro CALLMONITOR
2f57					endif 
2f57			 
2f57					; move result to de 
2f57			 
2f57 eb					ex de, hl 
2f58			 
2f58					; Address 
2f58			 
2f58 e1					pop hl 
2f59			 
2f59					; save it back 
2f59			 
2f59 73					ld (hl), e 
2f5a 23					inc hl 
2f5b 72					ld (hl), d 
2f5c			 
2f5c					if DEBUG_FORTH_WORDS 
2f5c						DMARK "-2e" 
2f5c f5				push af  
2f5d 3a 71 2f			ld a, (.dmark)  
2f60 32 65 ee			ld (debug_mark),a  
2f63 3a 72 2f			ld a, (.dmark+1)  
2f66 32 66 ee			ld (debug_mark+1),a  
2f69 3a 73 2f			ld a, (.dmark+2)  
2f6c 32 67 ee			ld (debug_mark+2),a  
2f6f 18 03			jr .pastdmark  
2f71 ..			.dmark: db "-2e"  
2f74 f1			.pastdmark: pop af  
2f75			endm  
# End of macro DMARK
2f75						CALLMONITOR 
2f75 cd 6f ee			call debug_vector  
2f78				endm  
# End of macro CALLMONITOR
2f78					endif 
2f78			 
2f78			 
2f78					FORTH_DSP_POP 
2f78 cd 4d 1e			call macro_forth_dsp_pop 
2f7b				endm 
# End of macro FORTH_DSP_POP
2f7b			 
2f7b			 
2f7b			 
2f7b				       NEXTW 
2f7b c3 80 1f			jp macro_next 
2f7e				endm 
# End of macro NEXTW
2f7e			.GET2: 
2f7e				CWHEAD .BANG2 91 "2@" 2 WORD_FLAG_CODE 
2f7e 6f				db WORD_SYS_CORE+91             
2f7f b3 2f			dw .BANG2            
2f81 03				db 2 + 1 
2f82 .. 00			db "2@",0              
2f85				endm 
# End of macro CWHEAD
2f85			; | 2@ ( a -- u )  Push word at address a onto stack | DONE 
2f85					if DEBUG_FORTH_WORDS_KEY 
2f85						DMARK "2A_" 
2f85 f5				push af  
2f86 3a 9a 2f			ld a, (.dmark)  
2f89 32 65 ee			ld (debug_mark),a  
2f8c 3a 9b 2f			ld a, (.dmark+1)  
2f8f 32 66 ee			ld (debug_mark+1),a  
2f92 3a 9c 2f			ld a, (.dmark+2)  
2f95 32 67 ee			ld (debug_mark+2),a  
2f98 18 03			jr .pastdmark  
2f9a ..			.dmark: db "2A_"  
2f9d f1			.pastdmark: pop af  
2f9e			endm  
# End of macro DMARK
2f9e						CALLMONITOR 
2f9e cd 6f ee			call debug_vector  
2fa1				endm  
# End of macro CALLMONITOR
2fa1					endif 
2fa1			 
2fa1					FORTH_DSP_VALUEHL 
2fa1 cd 95 1d			call macro_dsp_valuehl 
2fa4				endm 
# End of macro FORTH_DSP_VALUEHL
2fa4			 
2fa4 e5					push hl   ; save address 
2fa5			 
2fa5					FORTH_DSP_POP 
2fa5 cd 4d 1e			call macro_forth_dsp_pop 
2fa8				endm 
# End of macro FORTH_DSP_POP
2fa8			 
2fa8 e1					pop hl 
2fa9			 
2fa9 5e					ld e, (hl) 
2faa 23					inc hl 
2fab 56					ld d, (hl) 
2fac			 
2fac eb					ex de, hl 
2fad			 
2fad cd 90 1b				call forth_push_numhl 
2fb0			 
2fb0				       NEXTW 
2fb0 c3 80 1f			jp macro_next 
2fb3				endm 
# End of macro NEXTW
2fb3			.BANG2: 
2fb3				CWHEAD .CONFIG 91 "2!" 2 WORD_FLAG_CODE 
2fb3 6f				db WORD_SYS_CORE+91             
2fb4 eb 2f			dw .CONFIG            
2fb6 03				db 2 + 1 
2fb7 .. 00			db "2!",0              
2fba				endm 
# End of macro CWHEAD
2fba			; | 2! ( u a -- )  Store value u as a word at address a | DONE 
2fba					if DEBUG_FORTH_WORDS_KEY 
2fba						DMARK "2S_" 
2fba f5				push af  
2fbb 3a cf 2f			ld a, (.dmark)  
2fbe 32 65 ee			ld (debug_mark),a  
2fc1 3a d0 2f			ld a, (.dmark+1)  
2fc4 32 66 ee			ld (debug_mark+1),a  
2fc7 3a d1 2f			ld a, (.dmark+2)  
2fca 32 67 ee			ld (debug_mark+2),a  
2fcd 18 03			jr .pastdmark  
2fcf ..			.dmark: db "2S_"  
2fd2 f1			.pastdmark: pop af  
2fd3			endm  
# End of macro DMARK
2fd3						CALLMONITOR 
2fd3 cd 6f ee			call debug_vector  
2fd6				endm  
# End of macro CALLMONITOR
2fd6					endif 
2fd6			 
2fd6					FORTH_DSP_VALUEHL 
2fd6 cd 95 1d			call macro_dsp_valuehl 
2fd9				endm 
# End of macro FORTH_DSP_VALUEHL
2fd9			 
2fd9 e5					push hl   ; save address 
2fda			 
2fda			 
2fda					FORTH_DSP_POP 
2fda cd 4d 1e			call macro_forth_dsp_pop 
2fdd				endm 
# End of macro FORTH_DSP_POP
2fdd			 
2fdd					 
2fdd					FORTH_DSP_VALUEHL 
2fdd cd 95 1d			call macro_dsp_valuehl 
2fe0				endm 
# End of macro FORTH_DSP_VALUEHL
2fe0			 
2fe0					FORTH_DSP_POP 
2fe0 cd 4d 1e			call macro_forth_dsp_pop 
2fe3				endm 
# End of macro FORTH_DSP_POP
2fe3			 
2fe3 eb					ex de, hl    ; value now in de 
2fe4			 
2fe4 e1					pop hl 
2fe5			 
2fe5 73					ld (hl), e 
2fe6			 
2fe6 23					inc hl 
2fe7			 
2fe7 72					ld (hl), d 
2fe8			 
2fe8			 
2fe8				       NEXTW 
2fe8 c3 80 1f			jp macro_next 
2feb				endm 
# End of macro NEXTW
2feb			.CONFIG: 
2feb				CWHEAD .ADTOS 91 "CONFIG" 6 WORD_FLAG_CODE 
2feb 6f				db WORD_SYS_CORE+91             
2fec fc 2f			dw .ADTOS            
2fee 07				db 6 + 1 
2fef .. 00			db "CONFIG",0              
2ff6				endm 
# End of macro CWHEAD
2ff6			; | CONFIG ( -- )  Access the system configuration menu. Set boot from file, hardware diags, and more! | DONE 
2ff6			 
2ff6 cd 69 13				call config 
2ff9					NEXTW 
2ff9 c3 80 1f			jp macro_next 
2ffc				endm 
# End of macro NEXTW
2ffc			 
2ffc			.ADTOS: 
2ffc				CWHEAD .SBTOS 91 "1+" 2 WORD_FLAG_CODE 
2ffc 6f				db WORD_SYS_CORE+91             
2ffd 12 30			dw .SBTOS            
2fff 03				db 2 + 1 
3000 .. 00			db "1+",0              
3003				endm 
# End of macro CWHEAD
3003			; | 1+ ( u -- u )  Increment value on TOS | DONE 
3003			 
3003					FORTH_DSP_VALUEHL 
3003 cd 95 1d			call macro_dsp_valuehl 
3006				endm 
# End of macro FORTH_DSP_VALUEHL
3006 e5					push hl 
3007			 
3007					FORTH_DSP_POP 
3007 cd 4d 1e			call macro_forth_dsp_pop 
300a				endm 
# End of macro FORTH_DSP_POP
300a e1					pop hl 
300b			 
300b 23					inc hl 
300c cd 90 1b				call forth_push_numhl 
300f					 
300f					NEXTW 
300f c3 80 1f			jp macro_next 
3012				endm 
# End of macro NEXTW
3012			.SBTOS: 
3012				CWHEAD .ADSTORE 91 "1-" 2 WORD_FLAG_CODE 
3012 6f				db WORD_SYS_CORE+91             
3013 28 30			dw .ADSTORE            
3015 03				db 2 + 1 
3016 .. 00			db "1-",0              
3019				endm 
# End of macro CWHEAD
3019			; | 1- ( u -- u )  Decrement value on TOS | DONE 
3019			 
3019					FORTH_DSP_VALUEHL 
3019 cd 95 1d			call macro_dsp_valuehl 
301c				endm 
# End of macro FORTH_DSP_VALUEHL
301c e5					push hl 
301d			 
301d					FORTH_DSP_POP 
301d cd 4d 1e			call macro_forth_dsp_pop 
3020				endm 
# End of macro FORTH_DSP_POP
3020 e1					pop hl 
3021			 
3021 2b					dec hl 
3022 cd 90 1b				call forth_push_numhl 
3025					 
3025					NEXTW 
3025 c3 80 1f			jp macro_next 
3028				endm 
# End of macro NEXTW
3028			.ADSTORE: 
3028				CWHEAD .ADWSTORE 91 "1+!" 3 WORD_FLAG_CODE 
3028 6f				db WORD_SYS_CORE+91             
3029 3e 30			dw .ADWSTORE            
302b 04				db 3 + 1 
302c .. 00			db "1+!",0              
3030				endm 
# End of macro CWHEAD
3030			; | 1+! ( addr -- )  Increment byte at address addr | DONE 
3030			 
3030					FORTH_DSP_VALUEHL 
3030 cd 95 1d			call macro_dsp_valuehl 
3033				endm 
# End of macro FORTH_DSP_VALUEHL
3033 e5					push hl 
3034			 
3034					FORTH_DSP_POP 
3034 cd 4d 1e			call macro_forth_dsp_pop 
3037				endm 
# End of macro FORTH_DSP_POP
3037 e1					pop hl 
3038			 
3038 7e					ld a, (hl) 
3039 3c					inc a 
303a 77					ld (hl), a 
303b					 
303b					NEXTW 
303b c3 80 1f			jp macro_next 
303e				endm 
# End of macro NEXTW
303e			.ADWSTORE: 
303e				CWHEAD .SBSTORE 91 "1+2!" 4 WORD_FLAG_CODE 
303e 6f				db WORD_SYS_CORE+91             
303f 5c 30			dw .SBSTORE            
3041 05				db 4 + 1 
3042 .. 00			db "1+2!",0              
3047				endm 
# End of macro CWHEAD
3047			; | 1+2! ( addr -- )  Increment word at address addr | DONE 
3047			 
3047					FORTH_DSP_VALUEHL 
3047 cd 95 1d			call macro_dsp_valuehl 
304a				endm 
# End of macro FORTH_DSP_VALUEHL
304a e5					push hl 
304b			 
304b					FORTH_DSP_POP 
304b cd 4d 1e			call macro_forth_dsp_pop 
304e				endm 
# End of macro FORTH_DSP_POP
304e e1					pop hl 
304f			 
304f e5					push hl 
3050			 
3050 cd 02 1f				call loadwordinhl 
3053 23					inc hl 
3054			 
3054 d1					pop de 
3055 eb					ex de, hl 
3056 73					ld (hl), e 
3057 23					inc hl 
3058 72					ld (hl), d 
3059					 
3059					NEXTW 
3059 c3 80 1f			jp macro_next 
305c				endm 
# End of macro NEXTW
305c			.SBSTORE: 
305c				CWHEAD .SBWSTORE 91 "1-!" 3 WORD_FLAG_CODE 
305c 6f				db WORD_SYS_CORE+91             
305d 72 30			dw .SBWSTORE            
305f 04				db 3 + 1 
3060 .. 00			db "1-!",0              
3064				endm 
# End of macro CWHEAD
3064			; | 1-! ( addr -- )  Decrement byte at address addr | DONE 
3064			 
3064					FORTH_DSP_VALUEHL 
3064 cd 95 1d			call macro_dsp_valuehl 
3067				endm 
# End of macro FORTH_DSP_VALUEHL
3067 e5					push hl 
3068			 
3068					FORTH_DSP_POP 
3068 cd 4d 1e			call macro_forth_dsp_pop 
306b				endm 
# End of macro FORTH_DSP_POP
306b e1					pop hl 
306c			 
306c 7e					ld a, (hl) 
306d 3d					dec a 
306e 77					ld (hl), a 
306f					 
306f					NEXTW 
306f c3 80 1f			jp macro_next 
3072				endm 
# End of macro NEXTW
3072			.SBWSTORE: 
3072				CWHEAD .ENDCORE 91 "1-2!" 4 WORD_FLAG_CODE 
3072 6f				db WORD_SYS_CORE+91             
3073 90 30			dw .ENDCORE            
3075 05				db 4 + 1 
3076 .. 00			db "1-2!",0              
307b				endm 
# End of macro CWHEAD
307b			; | 1-2! ( addr -- )  Decrement word at address addr | DONE 
307b			 
307b					FORTH_DSP_VALUEHL 
307b cd 95 1d			call macro_dsp_valuehl 
307e				endm 
# End of macro FORTH_DSP_VALUEHL
307e e5					push hl 
307f			 
307f					FORTH_DSP_POP 
307f cd 4d 1e			call macro_forth_dsp_pop 
3082				endm 
# End of macro FORTH_DSP_POP
3082 e1					pop hl 
3083			 
3083 e5					push hl 
3084			 
3084 cd 02 1f				call loadwordinhl 
3087 2b					dec hl 
3088			 
3088 d1					pop de 
3089 eb					ex de, hl 
308a 73					ld (hl), e 
308b 23					inc hl 
308c 72					ld (hl), d 
308d					 
308d					NEXTW 
308d c3 80 1f			jp macro_next 
3090				endm 
# End of macro NEXTW
3090			.ENDCORE: 
3090			 
3090			; eof 
3090			 
3090			 
# End of file forth_words_core.asm
3090			include "forth_words_flow.asm" 
3090			 
3090			; | ## Program Flow Words 
3090			 
3090			.IF: 
3090				CWHEAD .THEN 10 "IF" 2 WORD_FLAG_CODE 
3090 1e				db WORD_SYS_CORE+10             
3091 85 31			dw .THEN            
3093 03				db 2 + 1 
3094 .. 00			db "IF",0              
3097				endm 
# End of macro CWHEAD
3097			; | IF ( w -- f ) If TOS is true exec code following up to THEN - Note: currently not supporting ELSE or nested IF | DONE 
3097			; 
3097					if DEBUG_FORTH_WORDS_KEY 
3097						DMARK "IF." 
3097 f5				push af  
3098 3a ac 30			ld a, (.dmark)  
309b 32 65 ee			ld (debug_mark),a  
309e 3a ad 30			ld a, (.dmark+1)  
30a1 32 66 ee			ld (debug_mark+1),a  
30a4 3a ae 30			ld a, (.dmark+2)  
30a7 32 67 ee			ld (debug_mark+2),a  
30aa 18 03			jr .pastdmark  
30ac ..			.dmark: db "IF."  
30af f1			.pastdmark: pop af  
30b0			endm  
# End of macro DMARK
30b0						CALLMONITOR 
30b0 cd 6f ee			call debug_vector  
30b3				endm  
# End of macro CALLMONITOR
30b3					endif 
30b3			; eval TOS 
30b3			 
30b3				FORTH_DSP_VALUEHL 
30b3 cd 95 1d			call macro_dsp_valuehl 
30b6				endm 
# End of macro FORTH_DSP_VALUEHL
30b6			 
30b6			;	push hl 
30b6				FORTH_DSP_POP 
30b6 cd 4d 1e			call macro_forth_dsp_pop 
30b9				endm 
# End of macro FORTH_DSP_POP
30b9			;	pop hl 
30b9			 
30b9					if DEBUG_FORTH_WORDS 
30b9						DMARK "IF1" 
30b9 f5				push af  
30ba 3a ce 30			ld a, (.dmark)  
30bd 32 65 ee			ld (debug_mark),a  
30c0 3a cf 30			ld a, (.dmark+1)  
30c3 32 66 ee			ld (debug_mark+1),a  
30c6 3a d0 30			ld a, (.dmark+2)  
30c9 32 67 ee			ld (debug_mark+2),a  
30cc 18 03			jr .pastdmark  
30ce ..			.dmark: db "IF1"  
30d1 f1			.pastdmark: pop af  
30d2			endm  
# End of macro DMARK
30d2						CALLMONITOR 
30d2 cd 6f ee			call debug_vector  
30d5				endm  
# End of macro CALLMONITOR
30d5					endif 
30d5 b7				or a        ; clear carry flag 
30d6 11 00 00			ld de, 0 
30d9 eb				ex de,hl 
30da ed 52			sbc hl, de 
30dc c2 66 31			jp nz, .iftrue 
30df			 
30df					if DEBUG_FORTH_WORDS 
30df						DMARK "IF2" 
30df f5				push af  
30e0 3a f4 30			ld a, (.dmark)  
30e3 32 65 ee			ld (debug_mark),a  
30e6 3a f5 30			ld a, (.dmark+1)  
30e9 32 66 ee			ld (debug_mark+1),a  
30ec 3a f6 30			ld a, (.dmark+2)  
30ef 32 67 ee			ld (debug_mark+2),a  
30f2 18 03			jr .pastdmark  
30f4 ..			.dmark: db "IF2"  
30f7 f1			.pastdmark: pop af  
30f8			endm  
# End of macro DMARK
30f8						CALLMONITOR 
30f8 cd 6f ee			call debug_vector  
30fb				endm  
# End of macro CALLMONITOR
30fb					endif 
30fb			 
30fb			; if not true then skip to THEN 
30fb			 
30fb				; TODO get tok_ptr 
30fb				; TODO consume toks until we get to THEN 
30fb			 
30fb 2a bc e5			ld hl, (os_tok_ptr) 
30fe					if DEBUG_FORTH_WORDS 
30fe						DMARK "IF3" 
30fe f5				push af  
30ff 3a 13 31			ld a, (.dmark)  
3102 32 65 ee			ld (debug_mark),a  
3105 3a 14 31			ld a, (.dmark+1)  
3108 32 66 ee			ld (debug_mark+1),a  
310b 3a 15 31			ld a, (.dmark+2)  
310e 32 67 ee			ld (debug_mark+2),a  
3111 18 03			jr .pastdmark  
3113 ..			.dmark: db "IF3"  
3116 f1			.pastdmark: pop af  
3117			endm  
# End of macro DMARK
3117						CALLMONITOR 
3117 cd 6f ee			call debug_vector  
311a				endm  
# End of macro CALLMONITOR
311a						 
311a					endif 
311a 11 61 31			ld de, .ifthen 
311d					if DEBUG_FORTH_WORDS 
311d						DMARK "IF4" 
311d f5				push af  
311e 3a 32 31			ld a, (.dmark)  
3121 32 65 ee			ld (debug_mark),a  
3124 3a 33 31			ld a, (.dmark+1)  
3127 32 66 ee			ld (debug_mark+1),a  
312a 3a 34 31			ld a, (.dmark+2)  
312d 32 67 ee			ld (debug_mark+2),a  
3130 18 03			jr .pastdmark  
3132 ..			.dmark: db "IF4"  
3135 f1			.pastdmark: pop af  
3136			endm  
# End of macro DMARK
3136						CALLMONITOR 
3136 cd 6f ee			call debug_vector  
3139				endm  
# End of macro CALLMONITOR
3139					endif 
3139 cd 87 20			call findnexttok  
313c			 
313c					if DEBUG_FORTH_WORDS 
313c						DMARK "IF5" 
313c f5				push af  
313d 3a 51 31			ld a, (.dmark)  
3140 32 65 ee			ld (debug_mark),a  
3143 3a 52 31			ld a, (.dmark+1)  
3146 32 66 ee			ld (debug_mark+1),a  
3149 3a 53 31			ld a, (.dmark+2)  
314c 32 67 ee			ld (debug_mark+2),a  
314f 18 03			jr .pastdmark  
3151 ..			.dmark: db "IF5"  
3154 f1			.pastdmark: pop af  
3155			endm  
# End of macro DMARK
3155						CALLMONITOR 
3155 cd 6f ee			call debug_vector  
3158				endm  
# End of macro CALLMONITOR
3158					endif 
3158				; TODO replace below with ; exec using tok_ptr 
3158 22 bc e5			ld (os_tok_ptr), hl 
315b c3 09 20			jp exec1 
315e				NEXTW 
315e c3 80 1f			jp macro_next 
3161				endm 
# End of macro NEXTW
3161			 
3161 .. 00		.ifthen:  db "THEN",0 
3166			 
3166			.iftrue:		 
3166				; Exec next words normally 
3166			 
3166				; if true then exec following IF as normal 
3166					if DEBUG_FORTH_WORDS 
3166						DMARK "IFT" 
3166 f5				push af  
3167 3a 7b 31			ld a, (.dmark)  
316a 32 65 ee			ld (debug_mark),a  
316d 3a 7c 31			ld a, (.dmark+1)  
3170 32 66 ee			ld (debug_mark+1),a  
3173 3a 7d 31			ld a, (.dmark+2)  
3176 32 67 ee			ld (debug_mark+2),a  
3179 18 03			jr .pastdmark  
317b ..			.dmark: db "IFT"  
317e f1			.pastdmark: pop af  
317f			endm  
# End of macro DMARK
317f						CALLMONITOR 
317f cd 6f ee			call debug_vector  
3182				endm  
# End of macro CALLMONITOR
3182					endif 
3182			 
3182					NEXTW 
3182 c3 80 1f			jp macro_next 
3185				endm 
# End of macro NEXTW
3185			.THEN: 
3185				CWHEAD .ELSE 11 "THEN" 4 WORD_FLAG_CODE 
3185 1f				db WORD_SYS_CORE+11             
3186 ad 31			dw .ELSE            
3188 05				db 4 + 1 
3189 .. 00			db "THEN",0              
318e				endm 
# End of macro CWHEAD
318e			; | THEN ( -- ) Does nothing. It is a marker for the end of an IF block | DONE 
318e					if DEBUG_FORTH_WORDS_KEY 
318e						DMARK "THN" 
318e f5				push af  
318f 3a a3 31			ld a, (.dmark)  
3192 32 65 ee			ld (debug_mark),a  
3195 3a a4 31			ld a, (.dmark+1)  
3198 32 66 ee			ld (debug_mark+1),a  
319b 3a a5 31			ld a, (.dmark+2)  
319e 32 67 ee			ld (debug_mark+2),a  
31a1 18 03			jr .pastdmark  
31a3 ..			.dmark: db "THN"  
31a6 f1			.pastdmark: pop af  
31a7			endm  
# End of macro DMARK
31a7						CALLMONITOR 
31a7 cd 6f ee			call debug_vector  
31aa				endm  
# End of macro CALLMONITOR
31aa					endif 
31aa					NEXTW 
31aa c3 80 1f			jp macro_next 
31ad				endm 
# End of macro NEXTW
31ad			.ELSE: 
31ad				CWHEAD .DO 12 "ELSE" 2 WORD_FLAG_CODE 
31ad 20				db WORD_SYS_CORE+12             
31ae d5 31			dw .DO            
31b0 03				db 2 + 1 
31b1 .. 00			db "ELSE",0              
31b6				endm 
# End of macro CWHEAD
31b6			; | ELSE ( -- ) Not supported - does nothing | TODO 
31b6			 
31b6					if DEBUG_FORTH_WORDS_KEY 
31b6						DMARK "ELS" 
31b6 f5				push af  
31b7 3a cb 31			ld a, (.dmark)  
31ba 32 65 ee			ld (debug_mark),a  
31bd 3a cc 31			ld a, (.dmark+1)  
31c0 32 66 ee			ld (debug_mark+1),a  
31c3 3a cd 31			ld a, (.dmark+2)  
31c6 32 67 ee			ld (debug_mark+2),a  
31c9 18 03			jr .pastdmark  
31cb ..			.dmark: db "ELS"  
31ce f1			.pastdmark: pop af  
31cf			endm  
# End of macro DMARK
31cf						CALLMONITOR 
31cf cd 6f ee			call debug_vector  
31d2				endm  
# End of macro CALLMONITOR
31d2					endif 
31d2			 
31d2			 
31d2					NEXTW 
31d2 c3 80 1f			jp macro_next 
31d5				endm 
# End of macro NEXTW
31d5			.DO: 
31d5				CWHEAD .LOOP 13 "DO" 2 WORD_FLAG_CODE 
31d5 21				db WORD_SYS_CORE+13             
31d6 fc 32			dw .LOOP            
31d8 03				db 2 + 1 
31d9 .. 00			db "DO",0              
31dc				endm 
# End of macro CWHEAD
31dc			; | DO ( u1 u2 -- ) Loop starting at u2 with a limit of u1 | DONE 
31dc			 
31dc					if DEBUG_FORTH_WORDS_KEY 
31dc						DMARK "DO." 
31dc f5				push af  
31dd 3a f1 31			ld a, (.dmark)  
31e0 32 65 ee			ld (debug_mark),a  
31e3 3a f2 31			ld a, (.dmark+1)  
31e6 32 66 ee			ld (debug_mark+1),a  
31e9 3a f3 31			ld a, (.dmark+2)  
31ec 32 67 ee			ld (debug_mark+2),a  
31ef 18 03			jr .pastdmark  
31f1 ..			.dmark: db "DO."  
31f4 f1			.pastdmark: pop af  
31f5			endm  
# End of macro DMARK
31f5						CALLMONITOR 
31f5 cd 6f ee			call debug_vector  
31f8				endm  
# End of macro CALLMONITOR
31f8					endif 
31f8			;  push pc to rsp stack past the DO 
31f8			 
31f8 2a bc e5				ld hl, (os_tok_ptr) 
31fb 23					inc hl   ; D 
31fc 23					inc hl  ; O 
31fd 23					inc hl   ; null 
31fe					if DEBUG_FORTH_WORDS 
31fe						DMARK "DO2" 
31fe f5				push af  
31ff 3a 13 32			ld a, (.dmark)  
3202 32 65 ee			ld (debug_mark),a  
3205 3a 14 32			ld a, (.dmark+1)  
3208 32 66 ee			ld (debug_mark+1),a  
320b 3a 15 32			ld a, (.dmark+2)  
320e 32 67 ee			ld (debug_mark+2),a  
3211 18 03			jr .pastdmark  
3213 ..			.dmark: db "DO2"  
3216 f1			.pastdmark: pop af  
3217			endm  
# End of macro DMARK
3217						CALLMONITOR 
3217 cd 6f ee			call debug_vector  
321a				endm  
# End of macro CALLMONITOR
321a					endif 
321a					FORTH_RSP_NEXT 
321a cd 37 1b			call macro_forth_rsp_next 
321d				endm 
# End of macro FORTH_RSP_NEXT
321d					if DEBUG_FORTH_WORDS 
321d						DMARK "DO3" 
321d f5				push af  
321e 3a 32 32			ld a, (.dmark)  
3221 32 65 ee			ld (debug_mark),a  
3224 3a 33 32			ld a, (.dmark+1)  
3227 32 66 ee			ld (debug_mark+1),a  
322a 3a 34 32			ld a, (.dmark+2)  
322d 32 67 ee			ld (debug_mark+2),a  
3230 18 03			jr .pastdmark  
3232 ..			.dmark: db "DO3"  
3235 f1			.pastdmark: pop af  
3236			endm  
# End of macro DMARK
3236						CALLMONITOR 
3236 cd 6f ee			call debug_vector  
3239				endm  
# End of macro CALLMONITOR
3239					endif 
3239			 
3239					;if DEBUG_FORTH_WORDS 
3239				;		push hl 
3239			;		endif  
3239			 
3239			; get counters from data stack 
3239			 
3239			 
3239					FORTH_DSP_VALUEHL 
3239 cd 95 1d			call macro_dsp_valuehl 
323c				endm 
# End of macro FORTH_DSP_VALUEHL
323c e5					push hl		 ; hl now has starting counter which needs to be tos 
323d			 
323d					if DEBUG_FORTH_WORDS 
323d						DMARK "DO4" 
323d f5				push af  
323e 3a 52 32			ld a, (.dmark)  
3241 32 65 ee			ld (debug_mark),a  
3244 3a 53 32			ld a, (.dmark+1)  
3247 32 66 ee			ld (debug_mark+1),a  
324a 3a 54 32			ld a, (.dmark+2)  
324d 32 67 ee			ld (debug_mark+2),a  
3250 18 03			jr .pastdmark  
3252 ..			.dmark: db "DO4"  
3255 f1			.pastdmark: pop af  
3256			endm  
# End of macro DMARK
3256						CALLMONITOR 
3256 cd 6f ee			call debug_vector  
3259				endm  
# End of macro CALLMONITOR
3259					endif 
3259					FORTH_DSP_POP 
3259 cd 4d 1e			call macro_forth_dsp_pop 
325c				endm 
# End of macro FORTH_DSP_POP
325c			 
325c					if DEBUG_FORTH_WORDS 
325c						DMARK "DO5" 
325c f5				push af  
325d 3a 71 32			ld a, (.dmark)  
3260 32 65 ee			ld (debug_mark),a  
3263 3a 72 32			ld a, (.dmark+1)  
3266 32 66 ee			ld (debug_mark+1),a  
3269 3a 73 32			ld a, (.dmark+2)  
326c 32 67 ee			ld (debug_mark+2),a  
326f 18 03			jr .pastdmark  
3271 ..			.dmark: db "DO5"  
3274 f1			.pastdmark: pop af  
3275			endm  
# End of macro DMARK
3275						CALLMONITOR 
3275 cd 6f ee			call debug_vector  
3278				endm  
# End of macro CALLMONITOR
3278					endif 
3278			 
3278					FORTH_DSP_VALUEHL 
3278 cd 95 1d			call macro_dsp_valuehl 
327b				endm 
# End of macro FORTH_DSP_VALUEHL
327b			;		push hl		 ; hl now has starting limit counter 
327b			 
327b					if DEBUG_FORTH_WORDS 
327b						DMARK "DO6" 
327b f5				push af  
327c 3a 90 32			ld a, (.dmark)  
327f 32 65 ee			ld (debug_mark),a  
3282 3a 91 32			ld a, (.dmark+1)  
3285 32 66 ee			ld (debug_mark+1),a  
3288 3a 92 32			ld a, (.dmark+2)  
328b 32 67 ee			ld (debug_mark+2),a  
328e 18 03			jr .pastdmark  
3290 ..			.dmark: db "DO6"  
3293 f1			.pastdmark: pop af  
3294			endm  
# End of macro DMARK
3294						CALLMONITOR 
3294 cd 6f ee			call debug_vector  
3297				endm  
# End of macro CALLMONITOR
3297					endif 
3297					FORTH_DSP_POP 
3297 cd 4d 1e			call macro_forth_dsp_pop 
329a				endm 
# End of macro FORTH_DSP_POP
329a			 
329a			; put counters on the loop stack 
329a			 
329a			;		pop hl			 ; limit counter 
329a d1					pop de			; start counter 
329b			 
329b					; push limit counter 
329b			 
329b					if DEBUG_FORTH_WORDS 
329b						DMARK "DO7" 
329b f5				push af  
329c 3a b0 32			ld a, (.dmark)  
329f 32 65 ee			ld (debug_mark),a  
32a2 3a b1 32			ld a, (.dmark+1)  
32a5 32 66 ee			ld (debug_mark+1),a  
32a8 3a b2 32			ld a, (.dmark+2)  
32ab 32 67 ee			ld (debug_mark+2),a  
32ae 18 03			jr .pastdmark  
32b0 ..			.dmark: db "DO7"  
32b3 f1			.pastdmark: pop af  
32b4			endm  
# End of macro DMARK
32b4						CALLMONITOR 
32b4 cd 6f ee			call debug_vector  
32b7				endm  
# End of macro CALLMONITOR
32b7					endif 
32b7					FORTH_LOOP_NEXT 
32b7 cd c6 1d			call macro_forth_loop_next 
32ba				endm 
# End of macro FORTH_LOOP_NEXT
32ba			 
32ba					; push start counter 
32ba			 
32ba eb					ex de, hl 
32bb					if DEBUG_FORTH_WORDS 
32bb						DMARK "DO7" 
32bb f5				push af  
32bc 3a d0 32			ld a, (.dmark)  
32bf 32 65 ee			ld (debug_mark),a  
32c2 3a d1 32			ld a, (.dmark+1)  
32c5 32 66 ee			ld (debug_mark+1),a  
32c8 3a d2 32			ld a, (.dmark+2)  
32cb 32 67 ee			ld (debug_mark+2),a  
32ce 18 03			jr .pastdmark  
32d0 ..			.dmark: db "DO7"  
32d3 f1			.pastdmark: pop af  
32d4			endm  
# End of macro DMARK
32d4						CALLMONITOR 
32d4 cd 6f ee			call debug_vector  
32d7				endm  
# End of macro CALLMONITOR
32d7					endif 
32d7					FORTH_LOOP_NEXT 
32d7 cd c6 1d			call macro_forth_loop_next 
32da				endm 
# End of macro FORTH_LOOP_NEXT
32da			 
32da			 
32da					; init first round of I counter 
32da			 
32da 22 e0 e5				ld (os_current_i), hl 
32dd			 
32dd					if DEBUG_FORTH_WORDS 
32dd						DMARK "DO8" 
32dd f5				push af  
32de 3a f2 32			ld a, (.dmark)  
32e1 32 65 ee			ld (debug_mark),a  
32e4 3a f3 32			ld a, (.dmark+1)  
32e7 32 66 ee			ld (debug_mark+1),a  
32ea 3a f4 32			ld a, (.dmark+2)  
32ed 32 67 ee			ld (debug_mark+2),a  
32f0 18 03			jr .pastdmark  
32f2 ..			.dmark: db "DO8"  
32f5 f1			.pastdmark: pop af  
32f6			endm  
# End of macro DMARK
32f6						CALLMONITOR 
32f6 cd 6f ee			call debug_vector  
32f9				endm  
# End of macro CALLMONITOR
32f9					endif 
32f9			 
32f9					NEXTW 
32f9 c3 80 1f			jp macro_next 
32fc				endm 
# End of macro NEXTW
32fc			.LOOP: 
32fc				CWHEAD .I 14 "LOOP" 4 WORD_FLAG_CODE 
32fc 22				db WORD_SYS_CORE+14             
32fd 14 34			dw .I            
32ff 05				db 4 + 1 
3300 .. 00			db "LOOP",0              
3305				endm 
# End of macro CWHEAD
3305			; | LOOP ( -- ) Increment and test loop counter  | DONE 
3305			 
3305				; pop tos as current loop count to hl 
3305			 
3305				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
3305			 
3305				FORTH_LOOP_TOS 
3305 cd f9 1d			call macro_forth_loop_tos 
3308				endm 
# End of macro FORTH_LOOP_TOS
3308 e5				push hl 
3309			 
3309					if DEBUG_FORTH_WORDS_KEY 
3309						DMARK "LOP" 
3309 f5				push af  
330a 3a 1e 33			ld a, (.dmark)  
330d 32 65 ee			ld (debug_mark),a  
3310 3a 1f 33			ld a, (.dmark+1)  
3313 32 66 ee			ld (debug_mark+1),a  
3316 3a 20 33			ld a, (.dmark+2)  
3319 32 67 ee			ld (debug_mark+2),a  
331c 18 03			jr .pastdmark  
331e ..			.dmark: db "LOP"  
3321 f1			.pastdmark: pop af  
3322			endm  
# End of macro DMARK
3322						CALLMONITOR 
3322 cd 6f ee			call debug_vector  
3325				endm  
# End of macro CALLMONITOR
3325					endif 
3325				; next item on the stack is the limit. get it 
3325			 
3325			 
3325				FORTH_LOOP_POP 
3325 cd 03 1e			call macro_forth_loop_pop 
3328				endm 
# End of macro FORTH_LOOP_POP
3328			 
3328				FORTH_LOOP_TOS 
3328 cd f9 1d			call macro_forth_loop_tos 
332b				endm 
# End of macro FORTH_LOOP_TOS
332b			 
332b d1				pop de		 ; de = i, hl = limit 
332c			 
332c					if DEBUG_FORTH_WORDS 
332c						DMARK "LP1" 
332c f5				push af  
332d 3a 41 33			ld a, (.dmark)  
3330 32 65 ee			ld (debug_mark),a  
3333 3a 42 33			ld a, (.dmark+1)  
3336 32 66 ee			ld (debug_mark+1),a  
3339 3a 43 33			ld a, (.dmark+2)  
333c 32 67 ee			ld (debug_mark+2),a  
333f 18 03			jr .pastdmark  
3341 ..			.dmark: db "LP1"  
3344 f1			.pastdmark: pop af  
3345			endm  
# End of macro DMARK
3345						CALLMONITOR 
3345 cd 6f ee			call debug_vector  
3348				endm  
# End of macro CALLMONITOR
3348					endif 
3348			 
3348				; go back to previous word 
3348			 
3348 d5				push de    ; save I for inc later 
3349			 
3349			 
3349				; get limit 
3349				;  is I at limit? 
3349			 
3349			 
3349					if DEBUG_FORTH_WORDS 
3349						DMARK "LP1" 
3349 f5				push af  
334a 3a 5e 33			ld a, (.dmark)  
334d 32 65 ee			ld (debug_mark),a  
3350 3a 5f 33			ld a, (.dmark+1)  
3353 32 66 ee			ld (debug_mark+1),a  
3356 3a 60 33			ld a, (.dmark+2)  
3359 32 67 ee			ld (debug_mark+2),a  
335c 18 03			jr .pastdmark  
335e ..			.dmark: db "LP1"  
3361 f1			.pastdmark: pop af  
3362			endm  
# End of macro DMARK
3362						CALLMONITOR 
3362 cd 6f ee			call debug_vector  
3365				endm  
# End of macro CALLMONITOR
3365					endif 
3365			 
3365 ed 52			sbc hl, de 
3367			 
3367			 
3367				;  if at limit pop both limit and current off stack do NEXT and get rid of saved DO 
3367			 
3367 20 26				jr nz, .loopnotdone 
3369			 
3369 e1				pop hl   ; get rid of saved I 
336a				FORTH_LOOP_POP     ; get rid of limit 
336a cd 03 1e			call macro_forth_loop_pop 
336d				endm 
# End of macro FORTH_LOOP_POP
336d			 
336d				FORTH_RSP_POP     ; get rid of DO ptr 
336d cd 58 1b			call macro_forth_rsp_pop 
3370				endm 
# End of macro FORTH_RSP_POP
3370			 
3370			if DEBUG_FORTH_WORDS 
3370						DMARK "LP>" 
3370 f5				push af  
3371 3a 85 33			ld a, (.dmark)  
3374 32 65 ee			ld (debug_mark),a  
3377 3a 86 33			ld a, (.dmark+1)  
337a 32 66 ee			ld (debug_mark+1),a  
337d 3a 87 33			ld a, (.dmark+2)  
3380 32 67 ee			ld (debug_mark+2),a  
3383 18 03			jr .pastdmark  
3385 ..			.dmark: db "LP>"  
3388 f1			.pastdmark: pop af  
3389			endm  
# End of macro DMARK
3389				CALLMONITOR 
3389 cd 6f ee			call debug_vector  
338c				endm  
# End of macro CALLMONITOR
338c			endif 
338c			 
338c					NEXTW 
338c c3 80 1f			jp macro_next 
338f				endm 
# End of macro NEXTW
338f				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
338f			 
338f			.loopnotdone: 
338f			 
338f e1				pop hl    ; get I 
3390 23				inc hl 
3391			 
3391			   	; save new I 
3391			 
3391			 
3391					; set I counter 
3391			 
3391 22 e0 e5				ld (os_current_i), hl 
3394			 
3394					if DEBUG_FORTH_WORDS 
3394						DMARK "LPN" 
3394 f5				push af  
3395 3a a9 33			ld a, (.dmark)  
3398 32 65 ee			ld (debug_mark),a  
339b 3a aa 33			ld a, (.dmark+1)  
339e 32 66 ee			ld (debug_mark+1),a  
33a1 3a ab 33			ld a, (.dmark+2)  
33a4 32 67 ee			ld (debug_mark+2),a  
33a7 18 03			jr .pastdmark  
33a9 ..			.dmark: db "LPN"  
33ac f1			.pastdmark: pop af  
33ad			endm  
# End of macro DMARK
33ad					CALLMONITOR 
33ad cd 6f ee			call debug_vector  
33b0				endm  
# End of macro CALLMONITOR
33b0					endif 
33b0					 
33b0				FORTH_LOOP_NEXT 
33b0 cd c6 1d			call macro_forth_loop_next 
33b3				endm 
# End of macro FORTH_LOOP_NEXT
33b3			 
33b3			 
33b3					if DEBUG_FORTH_WORDS 
33b3 eb						ex de,hl 
33b4					endif 
33b4			 
33b4			;	; get DO ptr 
33b4			; 
33b4					if DEBUG_FORTH_WORDS 
33b4						DMARK "LP7" 
33b4 f5				push af  
33b5 3a c9 33			ld a, (.dmark)  
33b8 32 65 ee			ld (debug_mark),a  
33bb 3a ca 33			ld a, (.dmark+1)  
33be 32 66 ee			ld (debug_mark+1),a  
33c1 3a cb 33			ld a, (.dmark+2)  
33c4 32 67 ee			ld (debug_mark+2),a  
33c7 18 03			jr .pastdmark  
33c9 ..			.dmark: db "LP7"  
33cc f1			.pastdmark: pop af  
33cd			endm  
# End of macro DMARK
33cd					CALLMONITOR 
33cd cd 6f ee			call debug_vector  
33d0				endm  
# End of macro CALLMONITOR
33d0					endif 
33d0				FORTH_RSP_TOS 
33d0 cd 4e 1b			call macro_forth_rsp_tos 
33d3				endm 
# End of macro FORTH_RSP_TOS
33d3			 
33d3					if DEBUG_FORTH_WORDS 
33d3						DMARK "LP8" 
33d3 f5				push af  
33d4 3a e8 33			ld a, (.dmark)  
33d7 32 65 ee			ld (debug_mark),a  
33da 3a e9 33			ld a, (.dmark+1)  
33dd 32 66 ee			ld (debug_mark+1),a  
33e0 3a ea 33			ld a, (.dmark+2)  
33e3 32 67 ee			ld (debug_mark+2),a  
33e6 18 03			jr .pastdmark  
33e8 ..			.dmark: db "LP8"  
33eb f1			.pastdmark: pop af  
33ec			endm  
# End of macro DMARK
33ec					CALLMONITOR 
33ec cd 6f ee			call debug_vector  
33ef				endm  
# End of macro CALLMONITOR
33ef					endif 
33ef				;push hl 
33ef			 
33ef				; not going to DO any more 
33ef				; get rid of the RSP pointer as DO will add it back in 
33ef				;FORTH_RSP_POP 
33ef				;pop hl 
33ef			 
33ef				;ld hl,(cli_ret_sp) 
33ef				;ld e, (hl) 
33ef				;inc hl 
33ef				;ld d, (hl) 
33ef				;ex de,hl 
33ef 22 bc e5			ld (os_tok_ptr), hl 
33f2					if DEBUG_FORTH_WORDS 
33f2						DMARK "LP<" 
33f2 f5				push af  
33f3 3a 07 34			ld a, (.dmark)  
33f6 32 65 ee			ld (debug_mark),a  
33f9 3a 08 34			ld a, (.dmark+1)  
33fc 32 66 ee			ld (debug_mark+1),a  
33ff 3a 09 34			ld a, (.dmark+2)  
3402 32 67 ee			ld (debug_mark+2),a  
3405 18 03			jr .pastdmark  
3407 ..			.dmark: db "LP<"  
340a f1			.pastdmark: pop af  
340b			endm  
# End of macro DMARK
340b					CALLMONITOR 
340b cd 6f ee			call debug_vector  
340e				endm  
# End of macro CALLMONITOR
340e				endif 
340e c3 09 20			jp exec1 
3411			 
3411					 
3411			 
3411			 
3411					NEXTW 
3411 c3 80 1f			jp macro_next 
3414				endm 
# End of macro NEXTW
3414			.I:  
3414			 
3414				CWHEAD .DLOOP 74 "I" 1 WORD_FLAG_CODE 
3414 5e				db WORD_SYS_CORE+74             
3415 3f 34			dw .DLOOP            
3417 02				db 1 + 1 
3418 .. 00			db "I",0              
341a				endm 
# End of macro CWHEAD
341a			; | I ( -- ) Current loop counter | DONE 
341a					if DEBUG_FORTH_WORDS_KEY 
341a						DMARK "I.." 
341a f5				push af  
341b 3a 2f 34			ld a, (.dmark)  
341e 32 65 ee			ld (debug_mark),a  
3421 3a 30 34			ld a, (.dmark+1)  
3424 32 66 ee			ld (debug_mark+1),a  
3427 3a 31 34			ld a, (.dmark+2)  
342a 32 67 ee			ld (debug_mark+2),a  
342d 18 03			jr .pastdmark  
342f ..			.dmark: db "I.."  
3432 f1			.pastdmark: pop af  
3433			endm  
# End of macro DMARK
3433						CALLMONITOR 
3433 cd 6f ee			call debug_vector  
3436				endm  
# End of macro CALLMONITOR
3436					endif 
3436			 
3436 2a e0 e5				ld hl,(os_current_i) 
3439 cd 90 1b				call forth_push_numhl 
343c			 
343c					NEXTW 
343c c3 80 1f			jp macro_next 
343f				endm 
# End of macro NEXTW
343f			.DLOOP: 
343f				CWHEAD .REPEAT 75 "-LOOP" 5 WORD_FLAG_CODE 
343f 5f				db WORD_SYS_CORE+75             
3440 20 35			dw .REPEAT            
3442 06				db 5 + 1 
3443 .. 00			db "-LOOP",0              
3449				endm 
# End of macro CWHEAD
3449			; | -LOOP ( -- ) Decrement and test loop counter  | DONE 
3449				; pop tos as current loop count to hl 
3449					if DEBUG_FORTH_WORDS_KEY 
3449						DMARK "-LP" 
3449 f5				push af  
344a 3a 5e 34			ld a, (.dmark)  
344d 32 65 ee			ld (debug_mark),a  
3450 3a 5f 34			ld a, (.dmark+1)  
3453 32 66 ee			ld (debug_mark+1),a  
3456 3a 60 34			ld a, (.dmark+2)  
3459 32 67 ee			ld (debug_mark+2),a  
345c 18 03			jr .pastdmark  
345e ..			.dmark: db "-LP"  
3461 f1			.pastdmark: pop af  
3462			endm  
# End of macro DMARK
3462						CALLMONITOR 
3462 cd 6f ee			call debug_vector  
3465				endm  
# End of macro CALLMONITOR
3465					endif 
3465			 
3465				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
3465			 
3465				FORTH_LOOP_TOS 
3465 cd f9 1d			call macro_forth_loop_tos 
3468				endm 
# End of macro FORTH_LOOP_TOS
3468 e5				push hl 
3469			 
3469					if DEBUG_FORTH_WORDS 
3469						DMARK "-LP" 
3469 f5				push af  
346a 3a 7e 34			ld a, (.dmark)  
346d 32 65 ee			ld (debug_mark),a  
3470 3a 7f 34			ld a, (.dmark+1)  
3473 32 66 ee			ld (debug_mark+1),a  
3476 3a 80 34			ld a, (.dmark+2)  
3479 32 67 ee			ld (debug_mark+2),a  
347c 18 03			jr .pastdmark  
347e ..			.dmark: db "-LP"  
3481 f1			.pastdmark: pop af  
3482			endm  
# End of macro DMARK
3482						CALLMONITOR 
3482 cd 6f ee			call debug_vector  
3485				endm  
# End of macro CALLMONITOR
3485					endif 
3485				; next item on the stack is the limit. get it 
3485			 
3485			 
3485				FORTH_LOOP_POP 
3485 cd 03 1e			call macro_forth_loop_pop 
3488				endm 
# End of macro FORTH_LOOP_POP
3488			 
3488				FORTH_LOOP_TOS 
3488 cd f9 1d			call macro_forth_loop_tos 
348b				endm 
# End of macro FORTH_LOOP_TOS
348b			 
348b d1				pop de		 ; de = i, hl = limit 
348c			 
348c					if DEBUG_FORTH_WORDS 
348c						DMARK "-L1" 
348c f5				push af  
348d 3a a1 34			ld a, (.dmark)  
3490 32 65 ee			ld (debug_mark),a  
3493 3a a2 34			ld a, (.dmark+1)  
3496 32 66 ee			ld (debug_mark+1),a  
3499 3a a3 34			ld a, (.dmark+2)  
349c 32 67 ee			ld (debug_mark+2),a  
349f 18 03			jr .pastdmark  
34a1 ..			.dmark: db "-L1"  
34a4 f1			.pastdmark: pop af  
34a5			endm  
# End of macro DMARK
34a5						CALLMONITOR 
34a5 cd 6f ee			call debug_vector  
34a8				endm  
# End of macro CALLMONITOR
34a8					endif 
34a8			 
34a8				; go back to previous word 
34a8			 
34a8 d5				push de    ; save I for inc later 
34a9			 
34a9			 
34a9				; get limit 
34a9				;  is I at limit? 
34a9			 
34a9			 
34a9					if DEBUG_FORTH_WORDS 
34a9						DMARK "-L1" 
34a9 f5				push af  
34aa 3a be 34			ld a, (.dmark)  
34ad 32 65 ee			ld (debug_mark),a  
34b0 3a bf 34			ld a, (.dmark+1)  
34b3 32 66 ee			ld (debug_mark+1),a  
34b6 3a c0 34			ld a, (.dmark+2)  
34b9 32 67 ee			ld (debug_mark+2),a  
34bc 18 03			jr .pastdmark  
34be ..			.dmark: db "-L1"  
34c1 f1			.pastdmark: pop af  
34c2			endm  
# End of macro DMARK
34c2						CALLMONITOR 
34c2 cd 6f ee			call debug_vector  
34c5				endm  
# End of macro CALLMONITOR
34c5					endif 
34c5			 
34c5 ed 52			sbc hl, de 
34c7			 
34c7			 
34c7				;  if at limit pop both limit and current off stack do NEXT and get rid of saved DO 
34c7			 
34c7 20 26				jr nz, .mloopnotdone 
34c9			 
34c9 e1				pop hl   ; get rid of saved I 
34ca				FORTH_LOOP_POP     ; get rid of limit 
34ca cd 03 1e			call macro_forth_loop_pop 
34cd				endm 
# End of macro FORTH_LOOP_POP
34cd			 
34cd				FORTH_RSP_POP     ; get rid of DO ptr 
34cd cd 58 1b			call macro_forth_rsp_pop 
34d0				endm 
# End of macro FORTH_RSP_POP
34d0			 
34d0			if DEBUG_FORTH_WORDS 
34d0						DMARK "-L>" 
34d0 f5				push af  
34d1 3a e5 34			ld a, (.dmark)  
34d4 32 65 ee			ld (debug_mark),a  
34d7 3a e6 34			ld a, (.dmark+1)  
34da 32 66 ee			ld (debug_mark+1),a  
34dd 3a e7 34			ld a, (.dmark+2)  
34e0 32 67 ee			ld (debug_mark+2),a  
34e3 18 03			jr .pastdmark  
34e5 ..			.dmark: db "-L>"  
34e8 f1			.pastdmark: pop af  
34e9			endm  
# End of macro DMARK
34e9				CALLMONITOR 
34e9 cd 6f ee			call debug_vector  
34ec				endm  
# End of macro CALLMONITOR
34ec			endif 
34ec			 
34ec					NEXTW 
34ec c3 80 1f			jp macro_next 
34ef				endm 
# End of macro NEXTW
34ef				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
34ef			 
34ef			.mloopnotdone: 
34ef			 
34ef e1				pop hl    ; get I 
34f0 2b				dec hl 
34f1			 
34f1			   	; save new I 
34f1			 
34f1			 
34f1					; set I counter 
34f1			 
34f1 22 e0 e5				ld (os_current_i), hl 
34f4			 
34f4					 
34f4				FORTH_LOOP_NEXT 
34f4 cd c6 1d			call macro_forth_loop_next 
34f7				endm 
# End of macro FORTH_LOOP_NEXT
34f7			 
34f7			 
34f7					if DEBUG_FORTH_WORDS 
34f7 eb						ex de,hl 
34f8					endif 
34f8			 
34f8			;	; get DO ptr 
34f8			; 
34f8				FORTH_RSP_TOS 
34f8 cd 4e 1b			call macro_forth_rsp_tos 
34fb				endm 
# End of macro FORTH_RSP_TOS
34fb			 
34fb				;push hl 
34fb			 
34fb				; not going to DO any more 
34fb				; get rid of the RSP pointer as DO will add it back in 
34fb				;FORTH_RSP_POP 
34fb				;pop hl 
34fb			 
34fb			 
34fb 22 bc e5			ld (os_tok_ptr), hl 
34fe					if DEBUG_FORTH_WORDS 
34fe						DMARK "-L<" 
34fe f5				push af  
34ff 3a 13 35			ld a, (.dmark)  
3502 32 65 ee			ld (debug_mark),a  
3505 3a 14 35			ld a, (.dmark+1)  
3508 32 66 ee			ld (debug_mark+1),a  
350b 3a 15 35			ld a, (.dmark+2)  
350e 32 67 ee			ld (debug_mark+2),a  
3511 18 03			jr .pastdmark  
3513 ..			.dmark: db "-L<"  
3516 f1			.pastdmark: pop af  
3517			endm  
# End of macro DMARK
3517					CALLMONITOR 
3517 cd 6f ee			call debug_vector  
351a				endm  
# End of macro CALLMONITOR
351a				endif 
351a c3 09 20			jp exec1 
351d			 
351d					 
351d			 
351d			 
351d			 
351d				NEXTW 
351d c3 80 1f			jp macro_next 
3520				endm 
# End of macro NEXTW
3520			 
3520			 
3520			 
3520			 
3520			.REPEAT: 
3520				CWHEAD .UNTIL 93 "REPEAT" 5 WORD_FLAG_CODE 
3520 71				db WORD_SYS_CORE+93             
3521 73 35			dw .UNTIL            
3523 06				db 5 + 1 
3524 .. 00			db "REPEAT",0              
352b				endm 
# End of macro CWHEAD
352b			; | REPEAT ( --  ) Start REPEAT...UNTIL loop  | DONE 
352b			;  push pc to rsp stack past the REPEAT 
352b					if DEBUG_FORTH_WORDS_KEY 
352b						DMARK "REP" 
352b f5				push af  
352c 3a 40 35			ld a, (.dmark)  
352f 32 65 ee			ld (debug_mark),a  
3532 3a 41 35			ld a, (.dmark+1)  
3535 32 66 ee			ld (debug_mark+1),a  
3538 3a 42 35			ld a, (.dmark+2)  
353b 32 67 ee			ld (debug_mark+2),a  
353e 18 03			jr .pastdmark  
3540 ..			.dmark: db "REP"  
3543 f1			.pastdmark: pop af  
3544			endm  
# End of macro DMARK
3544						CALLMONITOR 
3544 cd 6f ee			call debug_vector  
3547				endm  
# End of macro CALLMONITOR
3547					endif 
3547			 
3547 2a bc e5				ld hl, (os_tok_ptr) 
354a 23					inc hl   ; R 
354b 23					inc hl  ; E 
354c 23					inc hl   ; P 
354d 23					inc hl   ; E 
354e 23					inc hl   ; A 
354f 23					inc hl   ; T 
3550 23					inc hl   ; zero 
3551					FORTH_RSP_NEXT 
3551 cd 37 1b			call macro_forth_rsp_next 
3554				endm 
# End of macro FORTH_RSP_NEXT
3554			 
3554			 
3554					if DEBUG_FORTH_WORDS 
3554						DMARK "REP" 
3554 f5				push af  
3555 3a 69 35			ld a, (.dmark)  
3558 32 65 ee			ld (debug_mark),a  
355b 3a 6a 35			ld a, (.dmark+1)  
355e 32 66 ee			ld (debug_mark+1),a  
3561 3a 6b 35			ld a, (.dmark+2)  
3564 32 67 ee			ld (debug_mark+2),a  
3567 18 03			jr .pastdmark  
3569 ..			.dmark: db "REP"  
356c f1			.pastdmark: pop af  
356d			endm  
# End of macro DMARK
356d						;pop bc    ; TODO BUG ?????? what is this for???? 
356d						CALLMONITOR 
356d cd 6f ee			call debug_vector  
3570				endm  
# End of macro CALLMONITOR
3570					endif 
3570			 
3570					NEXTW 
3570 c3 80 1f			jp macro_next 
3573				endm 
# End of macro NEXTW
3573			;	       NEXTW 
3573			 
3573			.UNTIL: 
3573				CWHEAD .ENDFLOW 94 "UNTIL" 5 WORD_FLAG_CODE 
3573 72				db WORD_SYS_CORE+94             
3574 0a 36			dw .ENDFLOW            
3576 06				db 5 + 1 
3577 .. 00			db "UNTIL",0              
357d				endm 
# End of macro CWHEAD
357d			; | UNTIL ( u -- ) Exit REPEAT...UNTIL loop if TOS is false  | DONE 
357d			 
357d				; pop tos as check 
357d			 
357d				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
357d			 
357d				FORTH_DSP_VALUEHL 
357d cd 95 1d			call macro_dsp_valuehl 
3580				endm 
# End of macro FORTH_DSP_VALUEHL
3580			 
3580					if DEBUG_FORTH_WORDS_KEY 
3580						DMARK "UNT" 
3580 f5				push af  
3581 3a 95 35			ld a, (.dmark)  
3584 32 65 ee			ld (debug_mark),a  
3587 3a 96 35			ld a, (.dmark+1)  
358a 32 66 ee			ld (debug_mark+1),a  
358d 3a 97 35			ld a, (.dmark+2)  
3590 32 67 ee			ld (debug_mark+2),a  
3593 18 03			jr .pastdmark  
3595 ..			.dmark: db "UNT"  
3598 f1			.pastdmark: pop af  
3599			endm  
# End of macro DMARK
3599						CALLMONITOR 
3599 cd 6f ee			call debug_vector  
359c				endm  
# End of macro CALLMONITOR
359c					endif 
359c			 
359c			;	push hl 
359c				FORTH_DSP_POP 
359c cd 4d 1e			call macro_forth_dsp_pop 
359f				endm 
# End of macro FORTH_DSP_POP
359f			 
359f			;	pop hl 
359f			 
359f				; test if true 
359f			 
359f cd 1e 0e			call ishlzero 
35a2			;	ld a,l 
35a2			;	add h 
35a2			; 
35a2			;	cp 0 
35a2			 
35a2 20 3e			jr nz, .untilnotdone 
35a4			 
35a4					if DEBUG_FORTH_WORDS 
35a4						DMARK "UNf" 
35a4 f5				push af  
35a5 3a b9 35			ld a, (.dmark)  
35a8 32 65 ee			ld (debug_mark),a  
35ab 3a ba 35			ld a, (.dmark+1)  
35ae 32 66 ee			ld (debug_mark+1),a  
35b1 3a bb 35			ld a, (.dmark+2)  
35b4 32 67 ee			ld (debug_mark+2),a  
35b7 18 03			jr .pastdmark  
35b9 ..			.dmark: db "UNf"  
35bc f1			.pastdmark: pop af  
35bd			endm  
# End of macro DMARK
35bd						CALLMONITOR 
35bd cd 6f ee			call debug_vector  
35c0				endm  
# End of macro CALLMONITOR
35c0					endif 
35c0			 
35c0			 
35c0			 
35c0				FORTH_RSP_POP     ; get rid of DO ptr 
35c0 cd 58 1b			call macro_forth_rsp_pop 
35c3				endm 
# End of macro FORTH_RSP_POP
35c3			 
35c3			if DEBUG_FORTH_WORDS 
35c3						DMARK "UN>" 
35c3 f5				push af  
35c4 3a d8 35			ld a, (.dmark)  
35c7 32 65 ee			ld (debug_mark),a  
35ca 3a d9 35			ld a, (.dmark+1)  
35cd 32 66 ee			ld (debug_mark+1),a  
35d0 3a da 35			ld a, (.dmark+2)  
35d3 32 67 ee			ld (debug_mark+2),a  
35d6 18 03			jr .pastdmark  
35d8 ..			.dmark: db "UN>"  
35db f1			.pastdmark: pop af  
35dc			endm  
# End of macro DMARK
35dc				CALLMONITOR 
35dc cd 6f ee			call debug_vector  
35df				endm  
# End of macro CALLMONITOR
35df			endif 
35df			 
35df					NEXTW 
35df c3 80 1f			jp macro_next 
35e2				endm 
# End of macro NEXTW
35e2				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
35e2			 
35e2			.untilnotdone: 
35e2			 
35e2			 
35e2			;	; get DO ptr 
35e2			; 
35e2				FORTH_RSP_TOS 
35e2 cd 4e 1b			call macro_forth_rsp_tos 
35e5				endm 
# End of macro FORTH_RSP_TOS
35e5			 
35e5				;push hl 
35e5			 
35e5				; not going to DO any more 
35e5				; get rid of the RSP pointer as DO will add it back in 
35e5				;FORTH_RSP_POP 
35e5				;pop hl 
35e5			 
35e5			 
35e5 22 bc e5			ld (os_tok_ptr), hl 
35e8					if DEBUG_FORTH_WORDS 
35e8						DMARK "UN<" 
35e8 f5				push af  
35e9 3a fd 35			ld a, (.dmark)  
35ec 32 65 ee			ld (debug_mark),a  
35ef 3a fe 35			ld a, (.dmark+1)  
35f2 32 66 ee			ld (debug_mark+1),a  
35f5 3a ff 35			ld a, (.dmark+2)  
35f8 32 67 ee			ld (debug_mark+2),a  
35fb 18 03			jr .pastdmark  
35fd ..			.dmark: db "UN<"  
3600 f1			.pastdmark: pop af  
3601			endm  
# End of macro DMARK
3601					CALLMONITOR 
3601 cd 6f ee			call debug_vector  
3604				endm  
# End of macro CALLMONITOR
3604				endif 
3604 c3 09 20			jp exec1 
3607			 
3607					 
3607			 
3607			 
3607					NEXTW 
3607 c3 80 1f			jp macro_next 
360a				endm 
# End of macro NEXTW
360a			 
360a			 
360a			.ENDFLOW: 
360a			 
360a			; eof 
360a			 
# End of file forth_words_flow.asm
360a			; TODO something wrong with the first word of the next word group. no matter which group applies. On device, sc114 is fine. bad memory? 
360a			include "forth_words_logic.asm" 
360a			 
360a			; | ## Logic Words 
360a			 
360a			.NOT: 
360a				CWHEAD .IS 25 "NOT" 3 WORD_FLAG_CODE 
360a 2d				db WORD_SYS_CORE+25             
360b 52 36			dw .IS            
360d 04				db 3 + 1 
360e .. 00			db "NOT",0              
3612				endm 
# End of macro CWHEAD
3612			; | NOT ( u  -- u ) Inverse true/false on stack | DONE 
3612					if DEBUG_FORTH_WORDS_KEY 
3612						DMARK "NOT" 
3612 f5				push af  
3613 3a 27 36			ld a, (.dmark)  
3616 32 65 ee			ld (debug_mark),a  
3619 3a 28 36			ld a, (.dmark+1)  
361c 32 66 ee			ld (debug_mark+1),a  
361f 3a 29 36			ld a, (.dmark+2)  
3622 32 67 ee			ld (debug_mark+2),a  
3625 18 03			jr .pastdmark  
3627 ..			.dmark: db "NOT"  
362a f1			.pastdmark: pop af  
362b			endm  
# End of macro DMARK
362b						CALLMONITOR 
362b cd 6f ee			call debug_vector  
362e				endm  
# End of macro CALLMONITOR
362e					endif 
362e					FORTH_DSP 
362e cd 5b 1d			call macro_forth_dsp 
3631				endm 
# End of macro FORTH_DSP
3631 7e					ld a,(hl)	; get type of value on TOS 
3632 fe 02				cp DS_TYPE_INUM  
3634 28 03				jr z, .noti 
3636					NEXTW 
3636 c3 80 1f			jp macro_next 
3639				endm 
# End of macro NEXTW
3639			.noti:          FORTH_DSP_VALUEHL 
3639 cd 95 1d			call macro_dsp_valuehl 
363c				endm 
# End of macro FORTH_DSP_VALUEHL
363c			;		push hl 
363c					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
363c cd 4d 1e			call macro_forth_dsp_pop 
363f				endm 
# End of macro FORTH_DSP_POP
363f			;		pop hl 
363f 3e 00				ld a,0 
3641 bd					cp l 
3642 28 04				jr z, .not2t 
3644 2e 00				ld l, 0 
3646 18 02				jr .notip 
3648			 
3648 2e ff		.not2t:		ld l, 255 
364a			 
364a 26 00		.notip:		ld h, 0	 
364c			 
364c cd 90 1b				call forth_push_numhl 
364f					NEXTW 
364f c3 80 1f			jp macro_next 
3652				endm 
# End of macro NEXTW
3652			 
3652			.IS: 
3652				CWHEAD .LZERO 25 "IS" 2 WORD_FLAG_CODE 
3652 2d				db WORD_SYS_CORE+25             
3653 78 36			dw .LZERO            
3655 03				db 2 + 1 
3656 .. 00			db "IS",0              
3659				endm 
# End of macro CWHEAD
3659			; | IS ( s1 s2  -- f ) Push true if string s1 is the same as s2 | TODO 
3659					if DEBUG_FORTH_WORDS_KEY 
3659						DMARK "IS." 
3659 f5				push af  
365a 3a 6e 36			ld a, (.dmark)  
365d 32 65 ee			ld (debug_mark),a  
3660 3a 6f 36			ld a, (.dmark+1)  
3663 32 66 ee			ld (debug_mark+1),a  
3666 3a 70 36			ld a, (.dmark+2)  
3669 32 67 ee			ld (debug_mark+2),a  
366c 18 03			jr .pastdmark  
366e ..			.dmark: db "IS."  
3671 f1			.pastdmark: pop af  
3672			endm  
# End of macro DMARK
3672						CALLMONITOR 
3672 cd 6f ee			call debug_vector  
3675				endm  
# End of macro CALLMONITOR
3675					endif 
3675					NEXTW 
3675 c3 80 1f			jp macro_next 
3678				endm 
# End of macro NEXTW
3678			.LZERO: 
3678				CWHEAD .TZERO 25 "0<" 2 WORD_FLAG_CODE 
3678 2d				db WORD_SYS_CORE+25             
3679 82 36			dw .TZERO            
367b 03				db 2 + 1 
367c .. 00			db "0<",0              
367f				endm 
# End of macro CWHEAD
367f			; | 0< ( u -- f ) Push true if u is less than o | CANT DO UNTIL FLOAT 
367f					NEXTW 
367f c3 80 1f			jp macro_next 
3682				endm 
# End of macro NEXTW
3682			.TZERO: 
3682				CWHEAD .LESS 26 "0=" 2 WORD_FLAG_CODE 
3682 2e				db WORD_SYS_CORE+26             
3683 c9 36			dw .LESS            
3685 03				db 2 + 1 
3686 .. 00			db "0=",0              
3689				endm 
# End of macro CWHEAD
3689			; | 0= ( u -- f ) Push true if u equals 0 | DONE 
3689				; TODO add floating point number detection 
3689					;v5 FORTH_DSP_VALUE 
3689					if DEBUG_FORTH_WORDS_KEY 
3689						DMARK "0=." 
3689 f5				push af  
368a 3a 9e 36			ld a, (.dmark)  
368d 32 65 ee			ld (debug_mark),a  
3690 3a 9f 36			ld a, (.dmark+1)  
3693 32 66 ee			ld (debug_mark+1),a  
3696 3a a0 36			ld a, (.dmark+2)  
3699 32 67 ee			ld (debug_mark+2),a  
369c 18 03			jr .pastdmark  
369e ..			.dmark: db "0=."  
36a1 f1			.pastdmark: pop af  
36a2			endm  
# End of macro DMARK
36a2						CALLMONITOR 
36a2 cd 6f ee			call debug_vector  
36a5				endm  
# End of macro CALLMONITOR
36a5					endif 
36a5					FORTH_DSP 
36a5 cd 5b 1d			call macro_forth_dsp 
36a8				endm 
# End of macro FORTH_DSP
36a8 7e					ld a,(hl)	; get type of value on TOS 
36a9 fe 02				cp DS_TYPE_INUM  
36ab 28 00				jr z, .tz_inum 
36ad			 
36ad				if FORTH_ENABLE_FLOATMATH 
36ad					jr .tz_done 
36ad			 
36ad				endif 
36ad					 
36ad			 
36ad			.tz_inum: 
36ad					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
36ad cd 95 1d			call macro_dsp_valuehl 
36b0				endm 
# End of macro FORTH_DSP_VALUEHL
36b0			 
36b0			;		push hl 
36b0			 
36b0					; destroy value TOS 
36b0			 
36b0					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
36b0 cd 4d 1e			call macro_forth_dsp_pop 
36b3				endm 
# End of macro FORTH_DSP_POP
36b3			 
36b3			;		pop hl 
36b3			 
36b3 3e 00				ld a,0 
36b5			 
36b5 bd					cp l 
36b6 20 08				jr nz, .tz_notzero 
36b8			 
36b8 bc					cp h 
36b9			 
36b9 20 05				jr nz, .tz_notzero 
36bb			 
36bb			 
36bb 21 01 00				ld hl, FORTH_TRUE 
36be 18 03				jr .tz_done 
36c0			 
36c0 21 00 00		.tz_notzero:	ld hl, FORTH_FALSE 
36c3			 
36c3					; push value back onto stack for another op etc 
36c3			 
36c3			.tz_done: 
36c3 cd 90 1b				call forth_push_numhl 
36c6			 
36c6					NEXTW 
36c6 c3 80 1f			jp macro_next 
36c9				endm 
# End of macro NEXTW
36c9			.LESS: 
36c9				CWHEAD .GT 27 "<" 1 WORD_FLAG_CODE 
36c9 2f				db WORD_SYS_CORE+27             
36ca 32 37			dw .GT            
36cc 02				db 1 + 1 
36cd .. 00			db "<",0              
36cf				endm 
# End of macro CWHEAD
36cf			; | < ( u1 u2 -- f ) True if u1 is less than u2 | DONE 
36cf				; TODO add floating point number detection 
36cf					if DEBUG_FORTH_WORDS_KEY 
36cf						DMARK "LES" 
36cf f5				push af  
36d0 3a e4 36			ld a, (.dmark)  
36d3 32 65 ee			ld (debug_mark),a  
36d6 3a e5 36			ld a, (.dmark+1)  
36d9 32 66 ee			ld (debug_mark+1),a  
36dc 3a e6 36			ld a, (.dmark+2)  
36df 32 67 ee			ld (debug_mark+2),a  
36e2 18 03			jr .pastdmark  
36e4 ..			.dmark: db "LES"  
36e7 f1			.pastdmark: pop af  
36e8			endm  
# End of macro DMARK
36e8						CALLMONITOR 
36e8 cd 6f ee			call debug_vector  
36eb				endm  
# End of macro CALLMONITOR
36eb					endif 
36eb					FORTH_DSP 
36eb cd 5b 1d			call macro_forth_dsp 
36ee				endm 
# End of macro FORTH_DSP
36ee					;v5 FORTH_DSP_VALUE 
36ee 7e					ld a,(hl)	; get type of value on TOS 
36ef fe 02				cp DS_TYPE_INUM  
36f1 28 00				jr z, .less_inum 
36f3			 
36f3				if FORTH_ENABLE_FLOATMATH 
36f3					jr .less_done 
36f3			 
36f3				endif 
36f3					 
36f3			 
36f3			.less_inum: 
36f3					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
36f3 cd 95 1d			call macro_dsp_valuehl 
36f6				endm 
# End of macro FORTH_DSP_VALUEHL
36f6			 
36f6 e5					push hl  ; u2 
36f7			 
36f7					; destroy value TOS 
36f7			 
36f7					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
36f7 cd 4d 1e			call macro_forth_dsp_pop 
36fa				endm 
# End of macro FORTH_DSP_POP
36fa			 
36fa			 
36fa					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
36fa cd 95 1d			call macro_dsp_valuehl 
36fd				endm 
# End of macro FORTH_DSP_VALUEHL
36fd			 
36fd e5					push hl    ; u1 
36fe			 
36fe					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
36fe cd 4d 1e			call macro_forth_dsp_pop 
3701				endm 
# End of macro FORTH_DSP_POP
3701			 
3701			 
3701 b7			 or a      ;clear carry flag 
3702 01 00 00		 ld bc, FORTH_FALSE 
3705 e1			  pop hl    ; u1 
3706 d1			  pop de    ; u2 
3707 ed 52		  sbc hl,de 
3709 30 03		  jr nc,.lscont   	;	if hl >= de, carry flag will be cleared 
370b			 
370b 01 01 00		 ld bc, FORTH_TRUE 
370e			.lscont:  
370e c5					push bc 
370f e1					pop hl 
3710			 
3710					if DEBUG_FORTH_WORDS 
3710						DMARK "LT1" 
3710 f5				push af  
3711 3a 25 37			ld a, (.dmark)  
3714 32 65 ee			ld (debug_mark),a  
3717 3a 26 37			ld a, (.dmark+1)  
371a 32 66 ee			ld (debug_mark+1),a  
371d 3a 27 37			ld a, (.dmark+2)  
3720 32 67 ee			ld (debug_mark+2),a  
3723 18 03			jr .pastdmark  
3725 ..			.dmark: db "LT1"  
3728 f1			.pastdmark: pop af  
3729			endm  
# End of macro DMARK
3729						CALLMONITOR 
3729 cd 6f ee			call debug_vector  
372c				endm  
# End of macro CALLMONITOR
372c					endif 
372c cd 90 1b				call forth_push_numhl 
372f			 
372f					NEXTW 
372f c3 80 1f			jp macro_next 
3732				endm 
# End of macro NEXTW
3732			.GT: 
3732				CWHEAD .EQUAL 28 ">" 1 WORD_FLAG_CODE 
3732 30				db WORD_SYS_CORE+28             
3733 9b 37			dw .EQUAL            
3735 02				db 1 + 1 
3736 .. 00			db ">",0              
3738				endm 
# End of macro CWHEAD
3738			; | > ( u1 u2 -- f ) True if u1 is greater than u2 | DONE 
3738				; TODO add floating point number detection 
3738					if DEBUG_FORTH_WORDS_KEY 
3738						DMARK "GRT" 
3738 f5				push af  
3739 3a 4d 37			ld a, (.dmark)  
373c 32 65 ee			ld (debug_mark),a  
373f 3a 4e 37			ld a, (.dmark+1)  
3742 32 66 ee			ld (debug_mark+1),a  
3745 3a 4f 37			ld a, (.dmark+2)  
3748 32 67 ee			ld (debug_mark+2),a  
374b 18 03			jr .pastdmark  
374d ..			.dmark: db "GRT"  
3750 f1			.pastdmark: pop af  
3751			endm  
# End of macro DMARK
3751						CALLMONITOR 
3751 cd 6f ee			call debug_vector  
3754				endm  
# End of macro CALLMONITOR
3754					endif 
3754					FORTH_DSP 
3754 cd 5b 1d			call macro_forth_dsp 
3757				endm 
# End of macro FORTH_DSP
3757					;FORTH_DSP_VALUE 
3757 7e					ld a,(hl)	; get type of value on TOS 
3758 fe 02				cp DS_TYPE_INUM  
375a 28 00				jr z, .gt_inum 
375c			 
375c				if FORTH_ENABLE_FLOATMATH 
375c					jr .gt_done 
375c			 
375c				endif 
375c					 
375c			 
375c			.gt_inum: 
375c					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
375c cd 95 1d			call macro_dsp_valuehl 
375f				endm 
# End of macro FORTH_DSP_VALUEHL
375f			 
375f e5					push hl  ; u2 
3760			 
3760					; destroy value TOS 
3760			 
3760					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3760 cd 4d 1e			call macro_forth_dsp_pop 
3763				endm 
# End of macro FORTH_DSP_POP
3763			 
3763			 
3763					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3763 cd 95 1d			call macro_dsp_valuehl 
3766				endm 
# End of macro FORTH_DSP_VALUEHL
3766			 
3766 e5					push hl    ; u1 
3767			 
3767					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3767 cd 4d 1e			call macro_forth_dsp_pop 
376a				endm 
# End of macro FORTH_DSP_POP
376a			 
376a			 
376a b7			 or a      ;clear carry flag 
376b 01 00 00		 ld bc, FORTH_FALSE 
376e e1			  pop hl    ; u1 
376f d1			  pop de    ; u2 
3770 ed 52		  sbc hl,de 
3772 38 03		  jr c,.gtcont   	;	if hl >= de, carry flag will be cleared 
3774			 
3774 01 01 00		 ld bc, FORTH_TRUE 
3777			.gtcont:  
3777 c5					push bc 
3778 e1					pop hl 
3779			 
3779					if DEBUG_FORTH_WORDS 
3779						DMARK "GT1" 
3779 f5				push af  
377a 3a 8e 37			ld a, (.dmark)  
377d 32 65 ee			ld (debug_mark),a  
3780 3a 8f 37			ld a, (.dmark+1)  
3783 32 66 ee			ld (debug_mark+1),a  
3786 3a 90 37			ld a, (.dmark+2)  
3789 32 67 ee			ld (debug_mark+2),a  
378c 18 03			jr .pastdmark  
378e ..			.dmark: db "GT1"  
3791 f1			.pastdmark: pop af  
3792			endm  
# End of macro DMARK
3792						CALLMONITOR 
3792 cd 6f ee			call debug_vector  
3795				endm  
# End of macro CALLMONITOR
3795					endif 
3795 cd 90 1b				call forth_push_numhl 
3798			 
3798					NEXTW 
3798 c3 80 1f			jp macro_next 
379b				endm 
# End of macro NEXTW
379b			.EQUAL: 
379b				CWHEAD .ENDLOGIC 29 "=" 1 WORD_FLAG_CODE 
379b 31				db WORD_SYS_CORE+29             
379c 06 38			dw .ENDLOGIC            
379e 02				db 1 + 1 
379f .. 00			db "=",0              
37a1				endm 
# End of macro CWHEAD
37a1			; | = ( u1 u2 -- f ) True if u1 equals u2 | DONE 
37a1				; TODO add floating point number detection 
37a1					if DEBUG_FORTH_WORDS_KEY 
37a1						DMARK "EQ." 
37a1 f5				push af  
37a2 3a b6 37			ld a, (.dmark)  
37a5 32 65 ee			ld (debug_mark),a  
37a8 3a b7 37			ld a, (.dmark+1)  
37ab 32 66 ee			ld (debug_mark+1),a  
37ae 3a b8 37			ld a, (.dmark+2)  
37b1 32 67 ee			ld (debug_mark+2),a  
37b4 18 03			jr .pastdmark  
37b6 ..			.dmark: db "EQ."  
37b9 f1			.pastdmark: pop af  
37ba			endm  
# End of macro DMARK
37ba						CALLMONITOR 
37ba cd 6f ee			call debug_vector  
37bd				endm  
# End of macro CALLMONITOR
37bd					endif 
37bd					FORTH_DSP 
37bd cd 5b 1d			call macro_forth_dsp 
37c0				endm 
# End of macro FORTH_DSP
37c0					;v5 FORTH_DSP_VALUE 
37c0 7e					ld a,(hl)	; get type of value on TOS 
37c1 fe 02				cp DS_TYPE_INUM  
37c3 28 00				jr z, .eq_inum 
37c5			 
37c5				if FORTH_ENABLE_FLOATMATH 
37c5					jr .eq_done 
37c5			 
37c5				endif 
37c5					 
37c5			 
37c5			.eq_inum: 
37c5					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
37c5 cd 95 1d			call macro_dsp_valuehl 
37c8				endm 
# End of macro FORTH_DSP_VALUEHL
37c8			 
37c8 e5					push hl 
37c9			 
37c9					; destroy value TOS 
37c9			 
37c9					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
37c9 cd 4d 1e			call macro_forth_dsp_pop 
37cc				endm 
# End of macro FORTH_DSP_POP
37cc			 
37cc			 
37cc					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
37cc cd 95 1d			call macro_dsp_valuehl 
37cf				endm 
# End of macro FORTH_DSP_VALUEHL
37cf			 
37cf					; one value on hl get other one back 
37cf			 
37cf e5					push hl 
37d0			 
37d0					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
37d0 cd 4d 1e			call macro_forth_dsp_pop 
37d3				endm 
# End of macro FORTH_DSP_POP
37d3			 
37d3 0e 00				ld c, FORTH_FALSE 
37d5			 
37d5 e1					pop hl 
37d6 d1					pop de 
37d7			 
37d7 7b					ld a, e 
37d8 bd					cp l 
37d9			 
37d9 20 06				jr nz, .eq_done 
37db			 
37db 7a					ld a, d 
37dc bc					cp h 
37dd			 
37dd 20 02				jr nz, .eq_done 
37df			 
37df 0e 01				ld c, FORTH_TRUE 
37e1					 
37e1			 
37e1			 
37e1			.eq_done: 
37e1			 
37e1					; TODO push value back onto stack for another op etc 
37e1			 
37e1 26 00				ld h, 0 
37e3 69					ld l, c 
37e4					if DEBUG_FORTH_WORDS 
37e4						DMARK "EQ1" 
37e4 f5				push af  
37e5 3a f9 37			ld a, (.dmark)  
37e8 32 65 ee			ld (debug_mark),a  
37eb 3a fa 37			ld a, (.dmark+1)  
37ee 32 66 ee			ld (debug_mark+1),a  
37f1 3a fb 37			ld a, (.dmark+2)  
37f4 32 67 ee			ld (debug_mark+2),a  
37f7 18 03			jr .pastdmark  
37f9 ..			.dmark: db "EQ1"  
37fc f1			.pastdmark: pop af  
37fd			endm  
# End of macro DMARK
37fd						CALLMONITOR 
37fd cd 6f ee			call debug_vector  
3800				endm  
# End of macro CALLMONITOR
3800					endif 
3800 cd 90 1b				call forth_push_numhl 
3803			 
3803					NEXTW 
3803 c3 80 1f			jp macro_next 
3806				endm 
# End of macro NEXTW
3806			 
3806			 
3806			.ENDLOGIC: 
3806			; eof 
3806			 
3806			 
# End of file forth_words_logic.asm
3806			include "forth_words_maths.asm" 
3806			 
3806			; | ## Maths Words 
3806			 
3806			.PLUS:	 
3806				CWHEAD .NEG 1 "+" 1 WORD_FLAG_CODE 
3806 15				db WORD_SYS_CORE+1             
3807 64 38			dw .NEG            
3809 02				db 1 + 1 
380a .. 00			db "+",0              
380c				endm 
# End of macro CWHEAD
380c			; | + ( u u -- u )    Add two numbers and push result   | INT DONE 
380c					if DEBUG_FORTH_WORDS_KEY 
380c						DMARK "PLU" 
380c f5				push af  
380d 3a 21 38			ld a, (.dmark)  
3810 32 65 ee			ld (debug_mark),a  
3813 3a 22 38			ld a, (.dmark+1)  
3816 32 66 ee			ld (debug_mark+1),a  
3819 3a 23 38			ld a, (.dmark+2)  
381c 32 67 ee			ld (debug_mark+2),a  
381f 18 03			jr .pastdmark  
3821 ..			.dmark: db "PLU"  
3824 f1			.pastdmark: pop af  
3825			endm  
# End of macro DMARK
3825						CALLMONITOR 
3825 cd 6f ee			call debug_vector  
3828				endm  
# End of macro CALLMONITOR
3828					endif 
3828					; add top two values and push back result 
3828			 
3828					;for v5 FORTH_DSP_VALUE 
3828					FORTH_DSP 
3828 cd 5b 1d			call macro_forth_dsp 
382b				endm 
# End of macro FORTH_DSP
382b 7e					ld a,(hl)	; get type of value on TOS 
382c fe 02				cp DS_TYPE_INUM  
382e 28 03				jr z, .dot_inum 
3830			 
3830					NEXTW 
3830 c3 80 1f			jp macro_next 
3833				endm 
# End of macro NEXTW
3833			 
3833			; float maths 
3833			 
3833				if FORTH_ENABLE_FLOATMATH 
3833						inc hl      ; now at start of numeric as string 
3833			 
3833					if DEBUG_FORTH_MATHS 
3833						DMARK "ADD" 
3833				CALLMONITOR 
3833					endif 
3833			 
3833					;ld ix, hl 
3833					call CON 
3833			 
3833			 
3833					push hl 
3833					 
3833					 
3833			 
3833						FORTH_DSP_POP      ; TODO add stock underflow checks and throws  
3833			 
3833					; get next number 
3833			 
3833						FORTH_DSP_VALUE 
3833			 
3833						inc hl      ; now at start of numeric as string 
3833			 
3833					;ld ix, hl 
3833					call CON 
3833			 
3833					push hl 
3833			 
3833			 
3833						FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3833			 
3833						; TODO do add 
3833			 
3833						call IADD 
3833			 
3833						; TODO get result back as ascii 
3833			 
3833						; TODO push result  
3833			 
3833			 
3833			 
3833						jr .dot_done 
3833				endif 
3833			 
3833			.dot_inum: 
3833			 
3833			 
3833					if DEBUG_FORTH_DOT 
3833						DMARK "+IT" 
3833 f5				push af  
3834 3a 48 38			ld a, (.dmark)  
3837 32 65 ee			ld (debug_mark),a  
383a 3a 49 38			ld a, (.dmark+1)  
383d 32 66 ee			ld (debug_mark+1),a  
3840 3a 4a 38			ld a, (.dmark+2)  
3843 32 67 ee			ld (debug_mark+2),a  
3846 18 03			jr .pastdmark  
3848 ..			.dmark: db "+IT"  
384b f1			.pastdmark: pop af  
384c			endm  
# End of macro DMARK
384c				CALLMONITOR 
384c cd 6f ee			call debug_vector  
384f				endm  
# End of macro CALLMONITOR
384f					endif 
384f			 
384f					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
384f cd 95 1d			call macro_dsp_valuehl 
3852				endm 
# End of macro FORTH_DSP_VALUEHL
3852			 
3852				; TODO add floating point number detection 
3852			 
3852 e5					push hl 
3853			 
3853					; destroy value TOS 
3853			 
3853					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3853 cd 4d 1e			call macro_forth_dsp_pop 
3856				endm 
# End of macro FORTH_DSP_POP
3856			 
3856			 
3856					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3856 cd 95 1d			call macro_dsp_valuehl 
3859				endm 
# End of macro FORTH_DSP_VALUEHL
3859			 
3859					; one value on hl get other one back 
3859			 
3859 d1					pop de 
385a			 
385a					; do the add 
385a			 
385a 19					add hl,de 
385b			 
385b					; save it 
385b			 
385b			;		push hl	 
385b			 
385b					; 
385b			 
385b					; destroy value TOS 
385b			 
385b					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
385b cd 4d 1e			call macro_forth_dsp_pop 
385e				endm 
# End of macro FORTH_DSP_POP
385e			 
385e					; TODO push value back onto stack for another op etc 
385e			 
385e			;		pop hl 
385e			 
385e			.dot_done: 
385e cd 90 1b				call forth_push_numhl 
3861			 
3861					NEXTW 
3861 c3 80 1f			jp macro_next 
3864				endm 
# End of macro NEXTW
3864			.NEG: 
3864			 
3864				CWHEAD .DIV 3 "-" 1 WORD_FLAG_CODE 
3864 17				db WORD_SYS_CORE+3             
3865 a7 38			dw .DIV            
3867 02				db 1 + 1 
3868 .. 00			db "-",0              
386a				endm 
# End of macro CWHEAD
386a			; | - ( u1 u2 -- u )    Subtract u2 from u1 and push result  | INT DONE 
386a					if DEBUG_FORTH_WORDS_KEY 
386a						DMARK "SUB" 
386a f5				push af  
386b 3a 7f 38			ld a, (.dmark)  
386e 32 65 ee			ld (debug_mark),a  
3871 3a 80 38			ld a, (.dmark+1)  
3874 32 66 ee			ld (debug_mark+1),a  
3877 3a 81 38			ld a, (.dmark+2)  
387a 32 67 ee			ld (debug_mark+2),a  
387d 18 03			jr .pastdmark  
387f ..			.dmark: db "SUB"  
3882 f1			.pastdmark: pop af  
3883			endm  
# End of macro DMARK
3883						CALLMONITOR 
3883 cd 6f ee			call debug_vector  
3886				endm  
# End of macro CALLMONITOR
3886					endif 
3886			 
3886			 
3886				; TODO add floating point number detection 
3886					; v5 FORTH_DSP_VALUE 
3886					FORTH_DSP 
3886 cd 5b 1d			call macro_forth_dsp 
3889				endm 
# End of macro FORTH_DSP
3889 7e					ld a,(hl)	; get type of value on TOS 
388a fe 02				cp DS_TYPE_INUM  
388c 28 03				jr z, .neg_inum 
388e			 
388e					NEXTW 
388e c3 80 1f			jp macro_next 
3891				endm 
# End of macro NEXTW
3891			 
3891			; float maths 
3891			 
3891				if FORTH_ENABLE_FLOATMATH 
3891					jr .neg_done 
3891			 
3891				endif 
3891					 
3891			 
3891			.neg_inum: 
3891					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3891 cd 95 1d			call macro_dsp_valuehl 
3894				endm 
# End of macro FORTH_DSP_VALUEHL
3894			 
3894 e5					push hl 
3895			 
3895					; destroy value TOS 
3895			 
3895					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3895 cd 4d 1e			call macro_forth_dsp_pop 
3898				endm 
# End of macro FORTH_DSP_POP
3898			 
3898			 
3898					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3898 cd 95 1d			call macro_dsp_valuehl 
389b				endm 
# End of macro FORTH_DSP_VALUEHL
389b			 
389b					; one value on hl get other one back 
389b			 
389b d1					pop de 
389c			 
389c					; do the sub 
389c			;		ex de, hl 
389c			 
389c ed 52				sbc hl,de 
389e			 
389e					; save it 
389e			 
389e			;		push hl	 
389e			 
389e					; 
389e			 
389e					; destroy value TOS 
389e			 
389e					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
389e cd 4d 1e			call macro_forth_dsp_pop 
38a1				endm 
# End of macro FORTH_DSP_POP
38a1			 
38a1					; TODO push value back onto stack for another op etc 
38a1			 
38a1			;		pop hl 
38a1			 
38a1 cd 90 1b				call forth_push_numhl 
38a4			.neg_done: 
38a4			 
38a4					NEXTW 
38a4 c3 80 1f			jp macro_next 
38a7				endm 
# End of macro NEXTW
38a7			.DIV: 
38a7				CWHEAD .MUL 4 "/" 1 WORD_FLAG_CODE 
38a7 18				db WORD_SYS_CORE+4             
38a8 f4 38			dw .MUL            
38aa 02				db 1 + 1 
38ab .. 00			db "/",0              
38ad				endm 
# End of macro CWHEAD
38ad			; | / ( u1 u2 -- result remainder )     Divide u1 by u2 and push result | INT DONE 
38ad					if DEBUG_FORTH_WORDS_KEY 
38ad						DMARK "DIV" 
38ad f5				push af  
38ae 3a c2 38			ld a, (.dmark)  
38b1 32 65 ee			ld (debug_mark),a  
38b4 3a c3 38			ld a, (.dmark+1)  
38b7 32 66 ee			ld (debug_mark+1),a  
38ba 3a c4 38			ld a, (.dmark+2)  
38bd 32 67 ee			ld (debug_mark+2),a  
38c0 18 03			jr .pastdmark  
38c2 ..			.dmark: db "DIV"  
38c5 f1			.pastdmark: pop af  
38c6			endm  
# End of macro DMARK
38c6						CALLMONITOR 
38c6 cd 6f ee			call debug_vector  
38c9				endm  
# End of macro CALLMONITOR
38c9					endif 
38c9				; TODO add floating point number detection 
38c9					; v5 FORTH_DSP_VALUE 
38c9					FORTH_DSP 
38c9 cd 5b 1d			call macro_forth_dsp 
38cc				endm 
# End of macro FORTH_DSP
38cc 7e					ld a,(hl)	; get type of value on TOS 
38cd fe 02				cp DS_TYPE_INUM  
38cf 28 03				jr z, .div_inum 
38d1			 
38d1				if FORTH_ENABLE_FLOATMATH 
38d1					jr .div_done 
38d1			 
38d1				endif 
38d1					NEXTW 
38d1 c3 80 1f			jp macro_next 
38d4				endm 
# End of macro NEXTW
38d4			.div_inum: 
38d4			 
38d4					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
38d4 cd 95 1d			call macro_dsp_valuehl 
38d7				endm 
# End of macro FORTH_DSP_VALUEHL
38d7			 
38d7 e5					push hl    ; to go to bc 
38d8			 
38d8					; destroy value TOS 
38d8			 
38d8					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
38d8 cd 4d 1e			call macro_forth_dsp_pop 
38db				endm 
# End of macro FORTH_DSP_POP
38db			 
38db			 
38db					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
38db cd 95 1d			call macro_dsp_valuehl 
38de				endm 
# End of macro FORTH_DSP_VALUEHL
38de			 
38de					; hl to go to de 
38de			 
38de e5					push hl 
38df			 
38df c1					pop bc 
38e0 d1					pop de		 
38e1			 
38e1			 
38e1					if DEBUG_FORTH_MATHS 
38e1						DMARK "DIV" 
38e1				CALLMONITOR 
38e1					endif 
38e1					; one value on hl but move to a get other one back 
38e1			 
38e1			        
38e1 cd 52 0d			call Div16 
38e4			 
38e4			;	push af	 
38e4 e5				push hl 
38e5 c5				push bc 
38e6			 
38e6					if DEBUG_FORTH_MATHS 
38e6						DMARK "DI1" 
38e6				CALLMONITOR 
38e6					endif 
38e6			 
38e6					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
38e6 cd 4d 1e			call macro_forth_dsp_pop 
38e9				endm 
# End of macro FORTH_DSP_POP
38e9			 
38e9			 
38e9			 
38e9 e1					pop hl    ; result 
38ea			 
38ea cd 90 1b				call forth_push_numhl 
38ed			 
38ed e1					pop hl    ; reminder 
38ee			;		ld h,0 
38ee			;		ld l,d 
38ee			 
38ee cd 90 1b				call forth_push_numhl 
38f1			.div_done: 
38f1					NEXTW 
38f1 c3 80 1f			jp macro_next 
38f4				endm 
# End of macro NEXTW
38f4			.MUL: 
38f4				CWHEAD .MIN 5 "*" 1 WORD_FLAG_CODE 
38f4 19				db WORD_SYS_CORE+5             
38f5 39 39			dw .MIN            
38f7 02				db 1 + 1 
38f8 .. 00			db "*",0              
38fa				endm 
# End of macro CWHEAD
38fa			; | * ( u1 u2 -- u )     Multiply TOS and push result | INT DONE 
38fa				; TODO add floating point number detection 
38fa					if DEBUG_FORTH_WORDS_KEY 
38fa						DMARK "MUL" 
38fa f5				push af  
38fb 3a 0f 39			ld a, (.dmark)  
38fe 32 65 ee			ld (debug_mark),a  
3901 3a 10 39			ld a, (.dmark+1)  
3904 32 66 ee			ld (debug_mark+1),a  
3907 3a 11 39			ld a, (.dmark+2)  
390a 32 67 ee			ld (debug_mark+2),a  
390d 18 03			jr .pastdmark  
390f ..			.dmark: db "MUL"  
3912 f1			.pastdmark: pop af  
3913			endm  
# End of macro DMARK
3913						CALLMONITOR 
3913 cd 6f ee			call debug_vector  
3916				endm  
# End of macro CALLMONITOR
3916					endif 
3916					FORTH_DSP 
3916 cd 5b 1d			call macro_forth_dsp 
3919				endm 
# End of macro FORTH_DSP
3919					; v5 FORTH_DSP_VALUE 
3919 7e					ld a,(hl)	; get type of value on TOS 
391a fe 02				cp DS_TYPE_INUM  
391c 28 03				jr z, .mul_inum 
391e			 
391e				if FORTH_ENABLE_FLOATMATH 
391e					jr .mul_done 
391e			 
391e				endif 
391e			 
391e					NEXTW 
391e c3 80 1f			jp macro_next 
3921				endm 
# End of macro NEXTW
3921			.mul_inum:	 
3921			 
3921					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3921 cd 95 1d			call macro_dsp_valuehl 
3924				endm 
# End of macro FORTH_DSP_VALUEHL
3924			 
3924 e5					push hl 
3925			 
3925					; destroy value TOS 
3925			 
3925					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3925 cd 4d 1e			call macro_forth_dsp_pop 
3928				endm 
# End of macro FORTH_DSP_POP
3928			 
3928			 
3928					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3928 cd 95 1d			call macro_dsp_valuehl 
392b				endm 
# End of macro FORTH_DSP_VALUEHL
392b			 
392b					; one value on hl but move to a get other one back 
392b			 
392b 7d					ld a, l 
392c			 
392c d1					pop de 
392d			 
392d					; do the mull 
392d			;		ex de, hl 
392d			 
392d cd 78 0d				call Mult16 
3930					; save it 
3930			 
3930			;		push hl	 
3930			 
3930					; 
3930			 
3930					; destroy value TOS 
3930			 
3930					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3930 cd 4d 1e			call macro_forth_dsp_pop 
3933				endm 
# End of macro FORTH_DSP_POP
3933			 
3933					; TODO push value back onto stack for another op etc 
3933			 
3933			;		pop hl 
3933			 
3933 cd 90 1b				call forth_push_numhl 
3936			 
3936			.mul_done: 
3936					NEXTW 
3936 c3 80 1f			jp macro_next 
3939				endm 
# End of macro NEXTW
3939			 
3939			 
3939			 
3939			 
3939			.MIN: 
3939				CWHEAD .MAX 53 "MIN" 3 WORD_FLAG_CODE 
3939 49				db WORD_SYS_CORE+53             
393a ba 39			dw .MAX            
393c 04				db 3 + 1 
393d .. 00			db "MIN",0              
3941				endm 
# End of macro CWHEAD
3941			; | MIN (  u1 u2 -- u3 ) Whichever is the smallest value is pushed back onto the stack | DONE 
3941					if DEBUG_FORTH_WORDS_KEY 
3941						DMARK "MIN" 
3941 f5				push af  
3942 3a 56 39			ld a, (.dmark)  
3945 32 65 ee			ld (debug_mark),a  
3948 3a 57 39			ld a, (.dmark+1)  
394b 32 66 ee			ld (debug_mark+1),a  
394e 3a 58 39			ld a, (.dmark+2)  
3951 32 67 ee			ld (debug_mark+2),a  
3954 18 03			jr .pastdmark  
3956 ..			.dmark: db "MIN"  
3959 f1			.pastdmark: pop af  
395a			endm  
# End of macro DMARK
395a						CALLMONITOR 
395a cd 6f ee			call debug_vector  
395d				endm  
# End of macro CALLMONITOR
395d					endif 
395d					; get u2 
395d			 
395d					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
395d cd 95 1d			call macro_dsp_valuehl 
3960				endm 
# End of macro FORTH_DSP_VALUEHL
3960			 
3960 e5					push hl   ; u2 
3961			 
3961					; destroy value TOS 
3961			 
3961					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3961 cd 4d 1e			call macro_forth_dsp_pop 
3964				endm 
# End of macro FORTH_DSP_POP
3964			 
3964					; get u1 
3964			 
3964					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3964 cd 95 1d			call macro_dsp_valuehl 
3967				endm 
# End of macro FORTH_DSP_VALUEHL
3967			 
3967 e5					push hl  ; u1 
3968			 
3968					; destroy value TOS 
3968			 
3968					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3968 cd 4d 1e			call macro_forth_dsp_pop 
396b				endm 
# End of macro FORTH_DSP_POP
396b			 
396b b7			 or a      ;clear carry flag 
396c e1			  pop hl    ; u1 
396d d1			  pop de    ; u2 
396e e5				push hl   ; saved in case hl is lowest 
396f ed 52		  sbc hl,de 
3971 30 23		  jr nc,.mincont   	;	if hl >= de, carry flag will be cleared 
3973			 
3973 e1				pop hl 
3974					if DEBUG_FORTH_WORDS 
3974						DMARK "MIN" 
3974 f5				push af  
3975 3a 89 39			ld a, (.dmark)  
3978 32 65 ee			ld (debug_mark),a  
397b 3a 8a 39			ld a, (.dmark+1)  
397e 32 66 ee			ld (debug_mark+1),a  
3981 3a 8b 39			ld a, (.dmark+2)  
3984 32 67 ee			ld (debug_mark+2),a  
3987 18 03			jr .pastdmark  
3989 ..			.dmark: db "MIN"  
398c f1			.pastdmark: pop af  
398d			endm  
# End of macro DMARK
398d						CALLMONITOR 
398d cd 6f ee			call debug_vector  
3990				endm  
# End of macro CALLMONITOR
3990					endif 
3990 cd 90 1b				call forth_push_numhl 
3993			 
3993				       NEXTW 
3993 c3 80 1f			jp macro_next 
3996				endm 
# End of macro NEXTW
3996			 
3996			.mincont:  
3996 c1				pop bc   ; tidy up 
3997 eb				ex de , hl  
3998					if DEBUG_FORTH_WORDS 
3998						DMARK "MI1" 
3998 f5				push af  
3999 3a ad 39			ld a, (.dmark)  
399c 32 65 ee			ld (debug_mark),a  
399f 3a ae 39			ld a, (.dmark+1)  
39a2 32 66 ee			ld (debug_mark+1),a  
39a5 3a af 39			ld a, (.dmark+2)  
39a8 32 67 ee			ld (debug_mark+2),a  
39ab 18 03			jr .pastdmark  
39ad ..			.dmark: db "MI1"  
39b0 f1			.pastdmark: pop af  
39b1			endm  
# End of macro DMARK
39b1						CALLMONITOR 
39b1 cd 6f ee			call debug_vector  
39b4				endm  
# End of macro CALLMONITOR
39b4					endif 
39b4 cd 90 1b				call forth_push_numhl 
39b7			 
39b7				       NEXTW 
39b7 c3 80 1f			jp macro_next 
39ba				endm 
# End of macro NEXTW
39ba			.MAX: 
39ba				CWHEAD .RND16 54 "MAX" 3 WORD_FLAG_CODE 
39ba 4a				db WORD_SYS_CORE+54             
39bb 3b 3a			dw .RND16            
39bd 04				db 3 + 1 
39be .. 00			db "MAX",0              
39c2				endm 
# End of macro CWHEAD
39c2			; | MAX (  u1 u2 -- u3 )  Whichever is the largest value is pushed back onto the stack | DONE 
39c2					if DEBUG_FORTH_WORDS_KEY 
39c2						DMARK "MAX" 
39c2 f5				push af  
39c3 3a d7 39			ld a, (.dmark)  
39c6 32 65 ee			ld (debug_mark),a  
39c9 3a d8 39			ld a, (.dmark+1)  
39cc 32 66 ee			ld (debug_mark+1),a  
39cf 3a d9 39			ld a, (.dmark+2)  
39d2 32 67 ee			ld (debug_mark+2),a  
39d5 18 03			jr .pastdmark  
39d7 ..			.dmark: db "MAX"  
39da f1			.pastdmark: pop af  
39db			endm  
# End of macro DMARK
39db						CALLMONITOR 
39db cd 6f ee			call debug_vector  
39de				endm  
# End of macro CALLMONITOR
39de					endif 
39de					; get u2 
39de			 
39de					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
39de cd 95 1d			call macro_dsp_valuehl 
39e1				endm 
# End of macro FORTH_DSP_VALUEHL
39e1			 
39e1 e5					push hl   ; u2 
39e2			 
39e2					; destroy value TOS 
39e2			 
39e2					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
39e2 cd 4d 1e			call macro_forth_dsp_pop 
39e5				endm 
# End of macro FORTH_DSP_POP
39e5			 
39e5					; get u1 
39e5			 
39e5					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
39e5 cd 95 1d			call macro_dsp_valuehl 
39e8				endm 
# End of macro FORTH_DSP_VALUEHL
39e8			 
39e8 e5					push hl  ; u1 
39e9			 
39e9					; destroy value TOS 
39e9			 
39e9					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
39e9 cd 4d 1e			call macro_forth_dsp_pop 
39ec				endm 
# End of macro FORTH_DSP_POP
39ec			 
39ec b7			 or a      ;clear carry flag 
39ed e1			  pop hl    ; u1 
39ee d1			  pop de    ; u2 
39ef e5				push hl   ; saved in case hl is lowest 
39f0 ed 52		  sbc hl,de 
39f2 38 23		  jr c,.maxcont   	;	if hl <= de, carry flag will be cleared 
39f4			 
39f4 e1				pop hl 
39f5					if DEBUG_FORTH_WORDS 
39f5						DMARK "MAX" 
39f5 f5				push af  
39f6 3a 0a 3a			ld a, (.dmark)  
39f9 32 65 ee			ld (debug_mark),a  
39fc 3a 0b 3a			ld a, (.dmark+1)  
39ff 32 66 ee			ld (debug_mark+1),a  
3a02 3a 0c 3a			ld a, (.dmark+2)  
3a05 32 67 ee			ld (debug_mark+2),a  
3a08 18 03			jr .pastdmark  
3a0a ..			.dmark: db "MAX"  
3a0d f1			.pastdmark: pop af  
3a0e			endm  
# End of macro DMARK
3a0e						CALLMONITOR 
3a0e cd 6f ee			call debug_vector  
3a11				endm  
# End of macro CALLMONITOR
3a11					endif 
3a11 cd 90 1b				call forth_push_numhl 
3a14			 
3a14				       NEXTW 
3a14 c3 80 1f			jp macro_next 
3a17				endm 
# End of macro NEXTW
3a17			 
3a17			.maxcont:  
3a17 c1				pop bc   ; tidy up 
3a18 eb				ex de , hl  
3a19					if DEBUG_FORTH_WORDS 
3a19						DMARK "MA1" 
3a19 f5				push af  
3a1a 3a 2e 3a			ld a, (.dmark)  
3a1d 32 65 ee			ld (debug_mark),a  
3a20 3a 2f 3a			ld a, (.dmark+1)  
3a23 32 66 ee			ld (debug_mark+1),a  
3a26 3a 30 3a			ld a, (.dmark+2)  
3a29 32 67 ee			ld (debug_mark+2),a  
3a2c 18 03			jr .pastdmark  
3a2e ..			.dmark: db "MA1"  
3a31 f1			.pastdmark: pop af  
3a32			endm  
# End of macro DMARK
3a32						CALLMONITOR 
3a32 cd 6f ee			call debug_vector  
3a35				endm  
# End of macro CALLMONITOR
3a35					endif 
3a35 cd 90 1b				call forth_push_numhl 
3a38				       NEXTW 
3a38 c3 80 1f			jp macro_next 
3a3b				endm 
# End of macro NEXTW
3a3b			 
3a3b			.RND16: 
3a3b				CWHEAD .RND8 58 "RND16" 5 WORD_FLAG_CODE 
3a3b 4e				db WORD_SYS_CORE+58             
3a3c 6a 3a			dw .RND8            
3a3e 06				db 5 + 1 
3a3f .. 00			db "RND16",0              
3a45				endm 
# End of macro CWHEAD
3a45			; | RND16 (  -- n ) Generate a random 16bit number and push to stack | DONE 
3a45					if DEBUG_FORTH_WORDS_KEY 
3a45						DMARK "R16" 
3a45 f5				push af  
3a46 3a 5a 3a			ld a, (.dmark)  
3a49 32 65 ee			ld (debug_mark),a  
3a4c 3a 5b 3a			ld a, (.dmark+1)  
3a4f 32 66 ee			ld (debug_mark+1),a  
3a52 3a 5c 3a			ld a, (.dmark+2)  
3a55 32 67 ee			ld (debug_mark+2),a  
3a58 18 03			jr .pastdmark  
3a5a ..			.dmark: db "R16"  
3a5d f1			.pastdmark: pop af  
3a5e			endm  
# End of macro DMARK
3a5e						CALLMONITOR 
3a5e cd 6f ee			call debug_vector  
3a61				endm  
# End of macro CALLMONITOR
3a61					endif 
3a61 cd 1c 0d				call prng16  
3a64 cd 90 1b				call forth_push_numhl 
3a67				       NEXTW 
3a67 c3 80 1f			jp macro_next 
3a6a				endm 
# End of macro NEXTW
3a6a			.RND8: 
3a6a				CWHEAD .RND 76 "RND8" 4 WORD_FLAG_CODE 
3a6a 60				db WORD_SYS_CORE+76             
3a6b 9f 3a			dw .RND            
3a6d 05				db 4 + 1 
3a6e .. 00			db "RND8",0              
3a73				endm 
# End of macro CWHEAD
3a73			; | RND8 (  -- n ) Generate a random 8bit number and push to stack | DONE 
3a73					if DEBUG_FORTH_WORDS_KEY 
3a73						DMARK "RN8" 
3a73 f5				push af  
3a74 3a 88 3a			ld a, (.dmark)  
3a77 32 65 ee			ld (debug_mark),a  
3a7a 3a 89 3a			ld a, (.dmark+1)  
3a7d 32 66 ee			ld (debug_mark+1),a  
3a80 3a 8a 3a			ld a, (.dmark+2)  
3a83 32 67 ee			ld (debug_mark+2),a  
3a86 18 03			jr .pastdmark  
3a88 ..			.dmark: db "RN8"  
3a8b f1			.pastdmark: pop af  
3a8c			endm  
# End of macro DMARK
3a8c						CALLMONITOR 
3a8c cd 6f ee			call debug_vector  
3a8f				endm  
# End of macro CALLMONITOR
3a8f					endif 
3a8f 2a a3 eb				ld hl,(xrandc) 
3a92 23					inc hl 
3a93 cd 36 0d				call xrnd 
3a96 6f					ld l,a	 
3a97 26 00				ld h,0 
3a99 cd 90 1b				call forth_push_numhl 
3a9c				       NEXTW 
3a9c c3 80 1f			jp macro_next 
3a9f				endm 
# End of macro NEXTW
3a9f			.RND: 
3a9f				CWHEAD .ENDMATHS 76 "RND" 3 WORD_FLAG_CODE 
3a9f 60				db WORD_SYS_CORE+76             
3aa0 a5 3b			dw .ENDMATHS            
3aa2 04				db 3 + 1 
3aa3 .. 00			db "RND",0              
3aa7				endm 
# End of macro CWHEAD
3aa7			; | RND ( u1 u2 -- u ) Generate a random number no lower than u1 and no higher than u2 and push to stack | DONE 
3aa7			 
3aa7					if DEBUG_FORTH_WORDS_KEY 
3aa7						DMARK "RND" 
3aa7 f5				push af  
3aa8 3a bc 3a			ld a, (.dmark)  
3aab 32 65 ee			ld (debug_mark),a  
3aae 3a bd 3a			ld a, (.dmark+1)  
3ab1 32 66 ee			ld (debug_mark+1),a  
3ab4 3a be 3a			ld a, (.dmark+2)  
3ab7 32 67 ee			ld (debug_mark+2),a  
3aba 18 03			jr .pastdmark  
3abc ..			.dmark: db "RND"  
3abf f1			.pastdmark: pop af  
3ac0			endm  
# End of macro DMARK
3ac0						CALLMONITOR 
3ac0 cd 6f ee			call debug_vector  
3ac3				endm  
# End of macro CALLMONITOR
3ac3					endif 
3ac3					 
3ac3					FORTH_DSP_VALUEHL    ; upper range 
3ac3 cd 95 1d			call macro_dsp_valuehl 
3ac6				endm 
# End of macro FORTH_DSP_VALUEHL
3ac6			 
3ac6 22 a7 eb				ld (LFSRSeed), hl	 
3ac9			 
3ac9					if DEBUG_FORTH_WORDS 
3ac9						DMARK "RN1" 
3ac9 f5				push af  
3aca 3a de 3a			ld a, (.dmark)  
3acd 32 65 ee			ld (debug_mark),a  
3ad0 3a df 3a			ld a, (.dmark+1)  
3ad3 32 66 ee			ld (debug_mark+1),a  
3ad6 3a e0 3a			ld a, (.dmark+2)  
3ad9 32 67 ee			ld (debug_mark+2),a  
3adc 18 03			jr .pastdmark  
3ade ..			.dmark: db "RN1"  
3ae1 f1			.pastdmark: pop af  
3ae2			endm  
# End of macro DMARK
3ae2						CALLMONITOR 
3ae2 cd 6f ee			call debug_vector  
3ae5				endm  
# End of macro CALLMONITOR
3ae5					endif 
3ae5					FORTH_DSP_POP 
3ae5 cd 4d 1e			call macro_forth_dsp_pop 
3ae8				endm 
# End of macro FORTH_DSP_POP
3ae8			 
3ae8					FORTH_DSP_VALUEHL    ; low range 
3ae8 cd 95 1d			call macro_dsp_valuehl 
3aeb				endm 
# End of macro FORTH_DSP_VALUEHL
3aeb			 
3aeb					if DEBUG_FORTH_WORDS 
3aeb						DMARK "RN2" 
3aeb f5				push af  
3aec 3a 00 3b			ld a, (.dmark)  
3aef 32 65 ee			ld (debug_mark),a  
3af2 3a 01 3b			ld a, (.dmark+1)  
3af5 32 66 ee			ld (debug_mark+1),a  
3af8 3a 02 3b			ld a, (.dmark+2)  
3afb 32 67 ee			ld (debug_mark+2),a  
3afe 18 03			jr .pastdmark  
3b00 ..			.dmark: db "RN2"  
3b03 f1			.pastdmark: pop af  
3b04			endm  
# End of macro DMARK
3b04						CALLMONITOR 
3b04 cd 6f ee			call debug_vector  
3b07				endm  
# End of macro CALLMONITOR
3b07					endif 
3b07 22 a9 eb				ld (LFSRSeed+2), hl 
3b0a			 
3b0a					FORTH_DSP_POP 
3b0a cd 4d 1e			call macro_forth_dsp_pop 
3b0d				endm 
# End of macro FORTH_DSP_POP
3b0d			 
3b0d e5					push hl 
3b0e			 
3b0e e1			.inrange:	pop hl 
3b0f cd 1c 0d				call prng16  
3b12					if DEBUG_FORTH_WORDS 
3b12						DMARK "RN3" 
3b12 f5				push af  
3b13 3a 27 3b			ld a, (.dmark)  
3b16 32 65 ee			ld (debug_mark),a  
3b19 3a 28 3b			ld a, (.dmark+1)  
3b1c 32 66 ee			ld (debug_mark+1),a  
3b1f 3a 29 3b			ld a, (.dmark+2)  
3b22 32 67 ee			ld (debug_mark+2),a  
3b25 18 03			jr .pastdmark  
3b27 ..			.dmark: db "RN3"  
3b2a f1			.pastdmark: pop af  
3b2b			endm  
# End of macro DMARK
3b2b						CALLMONITOR 
3b2b cd 6f ee			call debug_vector  
3b2e				endm  
# End of macro CALLMONITOR
3b2e					endif 
3b2e					 
3b2e					; if the range is 8bit knock out the high byte 
3b2e			 
3b2e ed 5b a7 eb			ld de, (LFSRSeed)     ; check high level 
3b32			 
3b32 3e 00				ld a, 0 
3b34 ba					cp d  
3b35 20 1e				jr nz, .hirange 
3b37 26 00				ld h, 0   ; knock it down to 8bit 
3b39			 
3b39					if DEBUG_FORTH_WORDS 
3b39						DMARK "RNk" 
3b39 f5				push af  
3b3a 3a 4e 3b			ld a, (.dmark)  
3b3d 32 65 ee			ld (debug_mark),a  
3b40 3a 4f 3b			ld a, (.dmark+1)  
3b43 32 66 ee			ld (debug_mark+1),a  
3b46 3a 50 3b			ld a, (.dmark+2)  
3b49 32 67 ee			ld (debug_mark+2),a  
3b4c 18 03			jr .pastdmark  
3b4e ..			.dmark: db "RNk"  
3b51 f1			.pastdmark: pop af  
3b52			endm  
# End of macro DMARK
3b52						CALLMONITOR 
3b52 cd 6f ee			call debug_vector  
3b55				endm  
# End of macro CALLMONITOR
3b55					endif 
3b55			.hirange:   
3b55 e5					push hl  
3b56 b7					or a  
3b57 ed 52		                sbc hl, de 
3b59			 
3b59					;call cmp16 
3b59			 
3b59 30 b3				jr nc, .inrange      ; if hl >= de, carry flag is cleared 
3b5b e1					pop hl 
3b5c e5					push hl 
3b5d			 
3b5d					if DEBUG_FORTH_WORDS 
3b5d						DMARK "RN4" 
3b5d f5				push af  
3b5e 3a 72 3b			ld a, (.dmark)  
3b61 32 65 ee			ld (debug_mark),a  
3b64 3a 73 3b			ld a, (.dmark+1)  
3b67 32 66 ee			ld (debug_mark+1),a  
3b6a 3a 74 3b			ld a, (.dmark+2)  
3b6d 32 67 ee			ld (debug_mark+2),a  
3b70 18 03			jr .pastdmark  
3b72 ..			.dmark: db "RN4"  
3b75 f1			.pastdmark: pop af  
3b76			endm  
# End of macro DMARK
3b76						CALLMONITOR 
3b76 cd 6f ee			call debug_vector  
3b79				endm  
# End of macro CALLMONITOR
3b79					endif 
3b79 ed 5b a9 eb			ld de, (LFSRSeed+2)   ; check low range 
3b7d					;call cmp16 
3b7d				 
3b7d b7					or a  
3b7e ed 52		                sbc hl, de 
3b80 38 8c				jr c, .inrange 
3b82			 
3b82 e1					pop hl 
3b83					 
3b83					if DEBUG_FORTH_WORDS 
3b83						DMARK "RNd" 
3b83 f5				push af  
3b84 3a 98 3b			ld a, (.dmark)  
3b87 32 65 ee			ld (debug_mark),a  
3b8a 3a 99 3b			ld a, (.dmark+1)  
3b8d 32 66 ee			ld (debug_mark+1),a  
3b90 3a 9a 3b			ld a, (.dmark+2)  
3b93 32 67 ee			ld (debug_mark+2),a  
3b96 18 03			jr .pastdmark  
3b98 ..			.dmark: db "RNd"  
3b9b f1			.pastdmark: pop af  
3b9c			endm  
# End of macro DMARK
3b9c						CALLMONITOR 
3b9c cd 6f ee			call debug_vector  
3b9f				endm  
# End of macro CALLMONITOR
3b9f					endif 
3b9f			 
3b9f			 
3b9f cd 90 1b				call forth_push_numhl 
3ba2				       NEXTW 
3ba2 c3 80 1f			jp macro_next 
3ba5				endm 
# End of macro NEXTW
3ba5			 
3ba5			.ENDMATHS: 
3ba5			 
3ba5			; eof 
3ba5			 
# End of file forth_words_maths.asm
3ba5			include "forth_words_display.asm" 
3ba5			 
3ba5			; | ## Display Words 
3ba5			 
3ba5			.ACT: 
3ba5			 
3ba5				CWHEAD .INFO 78 "ACTIVE" 6 WORD_FLAG_CODE 
3ba5 62				db WORD_SYS_CORE+78             
3ba6 f1 3b			dw .INFO            
3ba8 07				db 6 + 1 
3ba9 .. 00			db "ACTIVE",0              
3bb0				endm 
# End of macro CWHEAD
3bb0			; | ACTIVE ( -- s ) Push the next char for an activity indicator to TOS | DONE 
3bb0			;  
3bb0			; | | To display a pulsing activity indicator in a processing loop do this... 
3bb0			; | | e.g. $ff $00 do active . ..... Your code ..... loop 
3bb0			 
3bb0					if DEBUG_FORTH_WORDS_KEY 
3bb0						DMARK "ACT" 
3bb0 f5				push af  
3bb1 3a c5 3b			ld a, (.dmark)  
3bb4 32 65 ee			ld (debug_mark),a  
3bb7 3a c6 3b			ld a, (.dmark+1)  
3bba 32 66 ee			ld (debug_mark+1),a  
3bbd 3a c7 3b			ld a, (.dmark+2)  
3bc0 32 67 ee			ld (debug_mark+2),a  
3bc3 18 03			jr .pastdmark  
3bc5 ..			.dmark: db "ACT"  
3bc8 f1			.pastdmark: pop af  
3bc9			endm  
# End of macro DMARK
3bc9						CALLMONITOR 
3bc9 cd 6f ee			call debug_vector  
3bcc				endm  
# End of macro CALLMONITOR
3bcc					endif 
3bcc cd 1f 0b				call active 
3bcf					if DEBUG_FORTH_WORDS 
3bcf						DMARK "ACp" 
3bcf f5				push af  
3bd0 3a e4 3b			ld a, (.dmark)  
3bd3 32 65 ee			ld (debug_mark),a  
3bd6 3a e5 3b			ld a, (.dmark+1)  
3bd9 32 66 ee			ld (debug_mark+1),a  
3bdc 3a e6 3b			ld a, (.dmark+2)  
3bdf 32 67 ee			ld (debug_mark+2),a  
3be2 18 03			jr .pastdmark  
3be4 ..			.dmark: db "ACp"  
3be7 f1			.pastdmark: pop af  
3be8			endm  
# End of macro DMARK
3be8						CALLMONITOR 
3be8 cd 6f ee			call debug_vector  
3beb				endm  
# End of macro CALLMONITOR
3beb					endif 
3beb cd fe 1b				call forth_push_str 
3bee			 
3bee					NEXTW 
3bee c3 80 1f			jp macro_next 
3bf1				endm 
# End of macro NEXTW
3bf1			.INFO: 
3bf1			 
3bf1				CWHEAD .ATP 78 "INFO" 4 WORD_FLAG_CODE 
3bf1 62				db WORD_SYS_CORE+78             
3bf2 0e 3c			dw .ATP            
3bf4 05				db 4 + 1 
3bf5 .. 00			db "INFO",0              
3bfa				endm 
# End of macro CWHEAD
3bfa			; | INFO ( u1 u2 -- )  Use the top two strings on stack to fill in an info window over two lines. Causes a wait for key press to continue. | DONE 
3bfa					FORTH_DSP_VALUEHL 
3bfa cd 95 1d			call macro_dsp_valuehl 
3bfd				endm 
# End of macro FORTH_DSP_VALUEHL
3bfd			 
3bfd					FORTH_DSP_POP 
3bfd cd 4d 1e			call macro_forth_dsp_pop 
3c00				endm 
# End of macro FORTH_DSP_POP
3c00			 
3c00 e5					push hl 
3c01			 
3c01					FORTH_DSP_VALUEHL 
3c01 cd 95 1d			call macro_dsp_valuehl 
3c04				endm 
# End of macro FORTH_DSP_VALUEHL
3c04			 
3c04					FORTH_DSP_POP 
3c04 cd 4d 1e			call macro_forth_dsp_pop 
3c07				endm 
# End of macro FORTH_DSP_POP
3c07			 
3c07 d1					pop de 
3c08			 
3c08 cd 59 0b				call info_panel 
3c0b			 
3c0b			 
3c0b					NEXTW 
3c0b c3 80 1f			jp macro_next 
3c0e				endm 
# End of macro NEXTW
3c0e			.ATP: 
3c0e				CWHEAD .FB 78 "AT?" 3 WORD_FLAG_CODE 
3c0e 62				db WORD_SYS_CORE+78             
3c0f 85 3c			dw .FB            
3c11 04				db 3 + 1 
3c12 .. 00			db "AT?",0              
3c16				endm 
# End of macro CWHEAD
3c16			; | AT? ( -- c r )  Push to stack the current position of the next print | TO TEST 
3c16					if DEBUG_FORTH_WORDS_KEY 
3c16						DMARK "AT?" 
3c16 f5				push af  
3c17 3a 2b 3c			ld a, (.dmark)  
3c1a 32 65 ee			ld (debug_mark),a  
3c1d 3a 2c 3c			ld a, (.dmark+1)  
3c20 32 66 ee			ld (debug_mark+1),a  
3c23 3a 2d 3c			ld a, (.dmark+2)  
3c26 32 67 ee			ld (debug_mark+2),a  
3c29 18 03			jr .pastdmark  
3c2b ..			.dmark: db "AT?"  
3c2e f1			.pastdmark: pop af  
3c2f			endm  
# End of macro DMARK
3c2f						CALLMONITOR 
3c2f cd 6f ee			call debug_vector  
3c32				endm  
# End of macro CALLMONITOR
3c32					endif 
3c32 3a 58 ea				ld a, (f_cursor_ptr) 
3c35			 
3c35			if DEBUG_FORTH_WORDS 
3c35				DMARK "AT?" 
3c35 f5				push af  
3c36 3a 4a 3c			ld a, (.dmark)  
3c39 32 65 ee			ld (debug_mark),a  
3c3c 3a 4b 3c			ld a, (.dmark+1)  
3c3f 32 66 ee			ld (debug_mark+1),a  
3c42 3a 4c 3c			ld a, (.dmark+2)  
3c45 32 67 ee			ld (debug_mark+2),a  
3c48 18 03			jr .pastdmark  
3c4a ..			.dmark: db "AT?"  
3c4d f1			.pastdmark: pop af  
3c4e			endm  
# End of macro DMARK
3c4e				CALLMONITOR 
3c4e cd 6f ee			call debug_vector  
3c51				endm  
# End of macro CALLMONITOR
3c51			endif	 
3c51					; count the number of rows 
3c51			 
3c51 06 00				ld b, 0 
3c53 4f			.atpr:		ld c, a    ; save in case we go below zero 
3c54 d6 28				sub display_cols 
3c56 f2 5c 3c				jp p, .atprunder 
3c59 04					inc b 
3c5a 18 f7				jr .atpr 
3c5c			.atprunder:	 
3c5c			if DEBUG_FORTH_WORDS 
3c5c				DMARK "A?2" 
3c5c f5				push af  
3c5d 3a 71 3c			ld a, (.dmark)  
3c60 32 65 ee			ld (debug_mark),a  
3c63 3a 72 3c			ld a, (.dmark+1)  
3c66 32 66 ee			ld (debug_mark+1),a  
3c69 3a 73 3c			ld a, (.dmark+2)  
3c6c 32 67 ee			ld (debug_mark+2),a  
3c6f 18 03			jr .pastdmark  
3c71 ..			.dmark: db "A?2"  
3c74 f1			.pastdmark: pop af  
3c75			endm  
# End of macro DMARK
3c75				CALLMONITOR 
3c75 cd 6f ee			call debug_vector  
3c78				endm  
# End of macro CALLMONITOR
3c78			endif	 
3c78 26 00				ld h, 0 
3c7a 69					ld l, c 
3c7b cd 90 1b				call forth_push_numhl 
3c7e 68					ld l, b  
3c7f cd 90 1b				call forth_push_numhl 
3c82			 
3c82			 
3c82				NEXTW 
3c82 c3 80 1f			jp macro_next 
3c85				endm 
# End of macro NEXTW
3c85			 
3c85			.FB: 
3c85				CWHEAD .EMIT 7 "FB" 2 WORD_FLAG_CODE 
3c85 1b				db WORD_SYS_CORE+7             
3c86 d3 3c			dw .EMIT            
3c88 03				db 2 + 1 
3c89 .. 00			db "FB",0              
3c8c				endm 
# End of macro CWHEAD
3c8c			; | FB ( u -- ) Select frame buffer ID u (1-3)  |  DONE 
3c8c			; | | Default frame buffer is 1. System uses 0 which can't be selected for system messages etc. 
3c8c			; | | Selecting the frame buffer wont display unless automatic display is setup (default). 
3c8c			; | | If automatic display is off then updates will not be shown until DRAW is used. 
3c8c					if DEBUG_FORTH_WORDS_KEY 
3c8c						DMARK "FB." 
3c8c f5				push af  
3c8d 3a a1 3c			ld a, (.dmark)  
3c90 32 65 ee			ld (debug_mark),a  
3c93 3a a2 3c			ld a, (.dmark+1)  
3c96 32 66 ee			ld (debug_mark+1),a  
3c99 3a a3 3c			ld a, (.dmark+2)  
3c9c 32 67 ee			ld (debug_mark+2),a  
3c9f 18 03			jr .pastdmark  
3ca1 ..			.dmark: db "FB."  
3ca4 f1			.pastdmark: pop af  
3ca5			endm  
# End of macro DMARK
3ca5						CALLMONITOR 
3ca5 cd 6f ee			call debug_vector  
3ca8				endm  
# End of macro CALLMONITOR
3ca8					endif 
3ca8			 
3ca8					FORTH_DSP_VALUEHL 
3ca8 cd 95 1d			call macro_dsp_valuehl 
3cab				endm 
# End of macro FORTH_DSP_VALUEHL
3cab			 
3cab 7d					ld a, l 
3cac fe 01				cp 1 
3cae 20 05				jr nz, .fbn1 
3cb0 21 0a ed				ld hl, display_fb1 
3cb3 18 15				jr .fbset 
3cb5 fe 02		.fbn1:		cp 2 
3cb7 20 05				jr nz, .fbn2 
3cb9 21 c8 eb				ld hl, display_fb2 
3cbc 18 0c				jr .fbset 
3cbe fe 03		.fbn2:		cp 3 
3cc0 20 05				jr nz, .fbn3 
3cc2 21 69 ec				ld hl, display_fb3 
3cc5 18 03				jr .fbset 
3cc7			.fbn3:		 ; if invalid number select first 
3cc7 21 0a ed				ld hl, display_fb1 
3cca 22 c6 eb		.fbset:		ld (display_fb_active), hl 
3ccd			 
3ccd					FORTH_DSP_POP 
3ccd cd 4d 1e			call macro_forth_dsp_pop 
3cd0				endm 
# End of macro FORTH_DSP_POP
3cd0			 
3cd0					NEXTW 
3cd0 c3 80 1f			jp macro_next 
3cd3				endm 
# End of macro NEXTW
3cd3			 
3cd3			 
3cd3			.EMIT: 
3cd3				CWHEAD .DOTH 7 "EMIT" 4 WORD_FLAG_CODE 
3cd3 1b				db WORD_SYS_CORE+7             
3cd4 24 3d			dw .DOTH            
3cd6 05				db 4 + 1 
3cd7 .. 00			db "EMIT",0              
3cdc				endm 
# End of macro CWHEAD
3cdc			; |  EMIT ( u -- ) Display ascii character  TOS   | DONE 
3cdc					; get value off TOS and display it 
3cdc			 
3cdc					if DEBUG_FORTH_WORDS_KEY 
3cdc						DMARK "EMT" 
3cdc f5				push af  
3cdd 3a f1 3c			ld a, (.dmark)  
3ce0 32 65 ee			ld (debug_mark),a  
3ce3 3a f2 3c			ld a, (.dmark+1)  
3ce6 32 66 ee			ld (debug_mark+1),a  
3ce9 3a f3 3c			ld a, (.dmark+2)  
3cec 32 67 ee			ld (debug_mark+2),a  
3cef 18 03			jr .pastdmark  
3cf1 ..			.dmark: db "EMT"  
3cf4 f1			.pastdmark: pop af  
3cf5			endm  
# End of macro DMARK
3cf5						CALLMONITOR 
3cf5 cd 6f ee			call debug_vector  
3cf8				endm  
# End of macro CALLMONITOR
3cf8					endif 
3cf8			 
3cf8					FORTH_DSP_VALUEHL 
3cf8 cd 95 1d			call macro_dsp_valuehl 
3cfb				endm 
# End of macro FORTH_DSP_VALUEHL
3cfb			 
3cfb 7d					ld a,l 
3cfc			 
3cfc					; TODO write to display 
3cfc			 
3cfc 32 b9 e4				ld (os_input), a 
3cff 3e 00				ld a, 0 
3d01 32 ba e4				ld (os_input+1), a 
3d04					 
3d04 3a 58 ea				ld a, (f_cursor_ptr) 
3d07 11 b9 e4				ld de, os_input 
3d0a cd db 0b				call str_at_display 
3d0d			 
3d0d			 
3d0d 3a 36 ea				ld a,(cli_autodisplay) 
3d10 fe 00				cp 0 
3d12 28 03				jr z, .enoupdate 
3d14 cd eb 0b						call update_display 
3d17					.enoupdate: 
3d17			 
3d17 3a 58 ea				ld a, (f_cursor_ptr) 
3d1a 3c					inc a 
3d1b 32 58 ea				ld (f_cursor_ptr), a   ; save new pos 
3d1e			 
3d1e			 
3d1e					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3d1e cd 4d 1e			call macro_forth_dsp_pop 
3d21				endm 
# End of macro FORTH_DSP_POP
3d21			  
3d21			 
3d21					NEXTW 
3d21 c3 80 1f			jp macro_next 
3d24				endm 
# End of macro NEXTW
3d24			.DOTH: 
3d24				CWHEAD .DOTF 8 ".-" 2 WORD_FLAG_CODE 
3d24 1c				db WORD_SYS_CORE+8             
3d25 54 3d			dw .DOTF            
3d27 03				db 2 + 1 
3d28 .. 00			db ".-",0              
3d2b				endm 
# End of macro CWHEAD
3d2b			        ; | .- ( u -- ) Display TOS replacing any dashes with spaces. Means you dont need to wrap strings in double quotes!   | DONE 
3d2b					; get value off TOS and display it 
3d2b					if DEBUG_FORTH_WORDS_KEY 
3d2b						DMARK "DTD" 
3d2b f5				push af  
3d2c 3a 40 3d			ld a, (.dmark)  
3d2f 32 65 ee			ld (debug_mark),a  
3d32 3a 41 3d			ld a, (.dmark+1)  
3d35 32 66 ee			ld (debug_mark+1),a  
3d38 3a 42 3d			ld a, (.dmark+2)  
3d3b 32 67 ee			ld (debug_mark+2),a  
3d3e 18 03			jr .pastdmark  
3d40 ..			.dmark: db "DTD"  
3d43 f1			.pastdmark: pop af  
3d44			endm  
# End of macro DMARK
3d44						CALLMONITOR 
3d44 cd 6f ee			call debug_vector  
3d47				endm  
# End of macro CALLMONITOR
3d47					endif 
3d47 0e 01			ld c, 1	  ; flag for removal of '-' enabled 
3d49 3e 00			ld a, 0 
3d4b 32 37 ea			ld (cli_mvdot), a 
3d4e c3 ab 3d			jp .dotgo 
3d51				NEXTW 
3d51 c3 80 1f			jp macro_next 
3d54				endm 
# End of macro NEXTW
3d54			.DOTF: 
3d54				CWHEAD .DOT 8 ".>" 2 WORD_FLAG_CODE 
3d54 1c				db WORD_SYS_CORE+8             
3d55 82 3d			dw .DOT            
3d57 03				db 2 + 1 
3d58 .. 00			db ".>",0              
3d5b				endm 
# End of macro CWHEAD
3d5b			        ; | .> ( u -- ) Display TOS and move the next display point with display  | DONE 
3d5b					; get value off TOS and display it 
3d5b			        ; TODO BUG adds extra spaces 
3d5b			        ; TODO BUG handle numerics? 
3d5b					if DEBUG_FORTH_WORDS_KEY 
3d5b						DMARK "DTC" 
3d5b f5				push af  
3d5c 3a 70 3d			ld a, (.dmark)  
3d5f 32 65 ee			ld (debug_mark),a  
3d62 3a 71 3d			ld a, (.dmark+1)  
3d65 32 66 ee			ld (debug_mark+1),a  
3d68 3a 72 3d			ld a, (.dmark+2)  
3d6b 32 67 ee			ld (debug_mark+2),a  
3d6e 18 03			jr .pastdmark  
3d70 ..			.dmark: db "DTC"  
3d73 f1			.pastdmark: pop af  
3d74			endm  
# End of macro DMARK
3d74						CALLMONITOR 
3d74 cd 6f ee			call debug_vector  
3d77				endm  
# End of macro CALLMONITOR
3d77					endif 
3d77 3e 01			ld a, 1 
3d79 32 37 ea			ld (cli_mvdot), a 
3d7c c3 ab 3d			jp .dotgo 
3d7f				NEXTW 
3d7f c3 80 1f			jp macro_next 
3d82				endm 
# End of macro NEXTW
3d82			 
3d82			.DOT: 
3d82				CWHEAD .CLS 8 "." 1 WORD_FLAG_CODE 
3d82 1c				db WORD_SYS_CORE+8             
3d83 5e 3f			dw .CLS            
3d85 02				db 1 + 1 
3d86 .. 00			db ".",0              
3d88				endm 
# End of macro CWHEAD
3d88			        ; | . ( u -- ) Display TOS. Does not move next print position. Use .> if you want that. | DONE 
3d88					; get value off TOS and display it 
3d88			 
3d88					if DEBUG_FORTH_WORDS_KEY 
3d88						DMARK "DOT" 
3d88 f5				push af  
3d89 3a 9d 3d			ld a, (.dmark)  
3d8c 32 65 ee			ld (debug_mark),a  
3d8f 3a 9e 3d			ld a, (.dmark+1)  
3d92 32 66 ee			ld (debug_mark+1),a  
3d95 3a 9f 3d			ld a, (.dmark+2)  
3d98 32 67 ee			ld (debug_mark+2),a  
3d9b 18 03			jr .pastdmark  
3d9d ..			.dmark: db "DOT"  
3da0 f1			.pastdmark: pop af  
3da1			endm  
# End of macro DMARK
3da1						CALLMONITOR 
3da1 cd 6f ee			call debug_vector  
3da4				endm  
# End of macro CALLMONITOR
3da4					endif 
3da4 3e 00			ld a, 0 
3da6 32 37 ea			ld (cli_mvdot), a 
3da9 0e 00		ld c, 0	  ; flag for removal of '-' disabled 
3dab				 
3dab			 
3dab			.dotgo: 
3dab			 
3dab			; move up type to on stack for parserv5 
3dab					FORTH_DSP 
3dab cd 5b 1d			call macro_forth_dsp 
3dae				endm 
# End of macro FORTH_DSP
3dae				;FORTH_DSP_VALUE  
3dae			 
3dae			if DEBUG_FORTH_DOT 
3dae				DMARK "DOT" 
3dae f5				push af  
3daf 3a c3 3d			ld a, (.dmark)  
3db2 32 65 ee			ld (debug_mark),a  
3db5 3a c4 3d			ld a, (.dmark+1)  
3db8 32 66 ee			ld (debug_mark+1),a  
3dbb 3a c5 3d			ld a, (.dmark+2)  
3dbe 32 67 ee			ld (debug_mark+2),a  
3dc1 18 03			jr .pastdmark  
3dc3 ..			.dmark: db "DOT"  
3dc6 f1			.pastdmark: pop af  
3dc7			endm  
# End of macro DMARK
3dc7				CALLMONITOR 
3dc7 cd 6f ee			call debug_vector  
3dca				endm  
# End of macro CALLMONITOR
3dca			endif	 
3dca			;		.print: 
3dca			 
3dca 7e				ld a,(hl)  ; work out what type of value is on the TOS 
3dcb 23				inc hl   ; position to the actual value 
3dcc fe 01			cp DS_TYPE_STR 
3dce 20 06			jr nz, .dotnum1  
3dd0			 
3dd0			; display string 
3dd0				FORTH_DSP_VALUE  
3dd0 cd 7e 1d			call macro_forth_dsp_value 
3dd3				endm 
# End of macro FORTH_DSP_VALUE
3dd3 eb				ex de,hl 
3dd4 18 49			jr .dotwrite 
3dd6			 
3dd6			.dotnum1: 
3dd6 fe 02			cp DS_TYPE_INUM 
3dd8 20 44			jr nz, .dotflot 
3dda			 
3dda			 
3dda			; display number 
3dda			 
3dda			;	push hl 
3dda			;	call clear_display 
3dda			;	pop hl 
3dda			 
3dda 5e				ld e, (hl) 
3ddb 23				inc hl 
3ddc 56				ld d, (hl) 
3ddd 21 bb e2			ld hl, scratch 
3de0			if DEBUG_FORTH_DOT 
3de0				DMARK "DT1" 
3de0 f5				push af  
3de1 3a f5 3d			ld a, (.dmark)  
3de4 32 65 ee			ld (debug_mark),a  
3de7 3a f6 3d			ld a, (.dmark+1)  
3dea 32 66 ee			ld (debug_mark+1),a  
3ded 3a f7 3d			ld a, (.dmark+2)  
3df0 32 67 ee			ld (debug_mark+2),a  
3df3 18 03			jr .pastdmark  
3df5 ..			.dmark: db "DT1"  
3df8 f1			.pastdmark: pop af  
3df9			endm  
# End of macro DMARK
3df9				CALLMONITOR 
3df9 cd 6f ee			call debug_vector  
3dfc				endm  
# End of macro CALLMONITOR
3dfc			endif	 
3dfc			 
3dfc cd 0a 11			call uitoa_16 
3dff eb				ex de,hl 
3e00			 
3e00			if DEBUG_FORTH_DOT 
3e00				DMARK "DT2" 
3e00 f5				push af  
3e01 3a 15 3e			ld a, (.dmark)  
3e04 32 65 ee			ld (debug_mark),a  
3e07 3a 16 3e			ld a, (.dmark+1)  
3e0a 32 66 ee			ld (debug_mark+1),a  
3e0d 3a 17 3e			ld a, (.dmark+2)  
3e10 32 67 ee			ld (debug_mark+2),a  
3e13 18 03			jr .pastdmark  
3e15 ..			.dmark: db "DT2"  
3e18 f1			.pastdmark: pop af  
3e19			endm  
# End of macro DMARK
3e19				CALLMONITOR 
3e19 cd 6f ee			call debug_vector  
3e1c				endm  
# End of macro CALLMONITOR
3e1c			endif	 
3e1c			 
3e1c			;	ld de, os_word_scratch 
3e1c 18 01			jr .dotwrite 
3e1e			 
3e1e 00			.dotflot:   nop 
3e1f			; TODO print floating point number 
3e1f			 
3e1f			.dotwrite:		 
3e1f			 
3e1f					; if c is set then set all '-' to spaces 
3e1f					; need to also take into account .>  
3e1f			 
3e1f 3e 01				ld a, 1 
3e21 b9					cp c 
3e22 20 67				jr nz, .nodashswap 
3e24			 
3e24					; DE has the string to write, working with HL 
3e24			 
3e24 06 ff				ld b, 255 
3e26 d5					push de 
3e27 e1					pop hl 
3e28			 
3e28			if DEBUG_FORTH_DOT 
3e28				DMARK "DT-" 
3e28 f5				push af  
3e29 3a 3d 3e			ld a, (.dmark)  
3e2c 32 65 ee			ld (debug_mark),a  
3e2f 3a 3e 3e			ld a, (.dmark+1)  
3e32 32 66 ee			ld (debug_mark+1),a  
3e35 3a 3f 3e			ld a, (.dmark+2)  
3e38 32 67 ee			ld (debug_mark+2),a  
3e3b 18 03			jr .pastdmark  
3e3d ..			.dmark: db "DT-"  
3e40 f1			.pastdmark: pop af  
3e41			endm  
# End of macro DMARK
3e41				CALLMONITOR 
3e41 cd 6f ee			call debug_vector  
3e44				endm  
# End of macro CALLMONITOR
3e44			endif	 
3e44 7e			.dashscan:	ld a, (hl) 
3e45 fe 00				cp 0 
3e47 28 42				jr z, .nodashswap 
3e49 fe 2d				cp '-' 
3e4b 20 03				jr nz, .dashskip 
3e4d 3e 20				ld a, ' ' 
3e4f 77					ld (hl), a 
3e50 23			.dashskip:	inc hl 
3e51			if DEBUG_FORTH_DOT 
3e51				DMARK "D-2" 
3e51 f5				push af  
3e52 3a 66 3e			ld a, (.dmark)  
3e55 32 65 ee			ld (debug_mark),a  
3e58 3a 67 3e			ld a, (.dmark+1)  
3e5b 32 66 ee			ld (debug_mark+1),a  
3e5e 3a 68 3e			ld a, (.dmark+2)  
3e61 32 67 ee			ld (debug_mark+2),a  
3e64 18 03			jr .pastdmark  
3e66 ..			.dmark: db "D-2"  
3e69 f1			.pastdmark: pop af  
3e6a			endm  
# End of macro DMARK
3e6a				CALLMONITOR 
3e6a cd 6f ee			call debug_vector  
3e6d				endm  
# End of macro CALLMONITOR
3e6d			endif	 
3e6d 10 d5				djnz .dashscan 
3e6f			 
3e6f			if DEBUG_FORTH_DOT 
3e6f				DMARK "D-1" 
3e6f f5				push af  
3e70 3a 84 3e			ld a, (.dmark)  
3e73 32 65 ee			ld (debug_mark),a  
3e76 3a 85 3e			ld a, (.dmark+1)  
3e79 32 66 ee			ld (debug_mark+1),a  
3e7c 3a 86 3e			ld a, (.dmark+2)  
3e7f 32 67 ee			ld (debug_mark+2),a  
3e82 18 03			jr .pastdmark  
3e84 ..			.dmark: db "D-1"  
3e87 f1			.pastdmark: pop af  
3e88			endm  
# End of macro DMARK
3e88				CALLMONITOR 
3e88 cd 6f ee			call debug_vector  
3e8b				endm  
# End of macro CALLMONITOR
3e8b			endif	 
3e8b			 
3e8b			.nodashswap: 
3e8b			 
3e8b			if DEBUG_FORTH_DOT 
3e8b				DMARK "D-o" 
3e8b f5				push af  
3e8c 3a a0 3e			ld a, (.dmark)  
3e8f 32 65 ee			ld (debug_mark),a  
3e92 3a a1 3e			ld a, (.dmark+1)  
3e95 32 66 ee			ld (debug_mark+1),a  
3e98 3a a2 3e			ld a, (.dmark+2)  
3e9b 32 67 ee			ld (debug_mark+2),a  
3e9e 18 03			jr .pastdmark  
3ea0 ..			.dmark: db "D-o"  
3ea3 f1			.pastdmark: pop af  
3ea4			endm  
# End of macro DMARK
3ea4				CALLMONITOR 
3ea4 cd 6f ee			call debug_vector  
3ea7				endm  
# End of macro CALLMONITOR
3ea7			endif	 
3ea7			 
3ea7 d5					push de   ; save string start in case we need to advance print 
3ea8			 
3ea8 3a 58 ea				ld a, (f_cursor_ptr) 
3eab cd db 0b				call str_at_display 
3eae 3a 36 ea				ld a,(cli_autodisplay) 
3eb1 fe 00				cp 0 
3eb3 28 03				jr z, .noupdate 
3eb5 cd eb 0b						call update_display 
3eb8					.noupdate: 
3eb8			 
3eb8			 
3eb8					; see if we need to advance the print position 
3eb8			 
3eb8 e1					pop hl   ; get back string 
3eb9			;		ex de,hl 
3eb9			 
3eb9 3a 37 ea				ld a, (cli_mvdot) 
3ebc			if DEBUG_FORTH_DOT 
3ebc			;		ld e,a 
3ebc				DMARK "D>1" 
3ebc f5				push af  
3ebd 3a d1 3e			ld a, (.dmark)  
3ec0 32 65 ee			ld (debug_mark),a  
3ec3 3a d2 3e			ld a, (.dmark+1)  
3ec6 32 66 ee			ld (debug_mark+1),a  
3ec9 3a d3 3e			ld a, (.dmark+2)  
3ecc 32 67 ee			ld (debug_mark+2),a  
3ecf 18 03			jr .pastdmark  
3ed1 ..			.dmark: db "D>1"  
3ed4 f1			.pastdmark: pop af  
3ed5			endm  
# End of macro DMARK
3ed5				CALLMONITOR 
3ed5 cd 6f ee			call debug_vector  
3ed8				endm  
# End of macro CALLMONITOR
3ed8			endif	 
3ed8 fe 00				cp 0 
3eda 28 44				jr z, .noadv 
3edc					; yes, lets advance the print position 
3edc 3e 00				ld a, 0 
3ede cd 66 11				call strlent 
3ee1			if DEBUG_FORTH_DOT 
3ee1				DMARK "D-?" 
3ee1 f5				push af  
3ee2 3a f6 3e			ld a, (.dmark)  
3ee5 32 65 ee			ld (debug_mark),a  
3ee8 3a f7 3e			ld a, (.dmark+1)  
3eeb 32 66 ee			ld (debug_mark+1),a  
3eee 3a f8 3e			ld a, (.dmark+2)  
3ef1 32 67 ee			ld (debug_mark+2),a  
3ef4 18 03			jr .pastdmark  
3ef6 ..			.dmark: db "D-?"  
3ef9 f1			.pastdmark: pop af  
3efa			endm  
# End of macro DMARK
3efa				CALLMONITOR 
3efa cd 6f ee			call debug_vector  
3efd				endm  
# End of macro CALLMONITOR
3efd			endif	 
3efd 3a 58 ea				ld a, (f_cursor_ptr) 
3f00 85					add a,l 
3f01					;call addatohl 
3f01					;ld a, l 
3f01 32 58 ea				ld (f_cursor_ptr), a   ; save new pos 
3f04			 
3f04			if DEBUG_FORTH_DOT 
3f04				DMARK "D->" 
3f04 f5				push af  
3f05 3a 19 3f			ld a, (.dmark)  
3f08 32 65 ee			ld (debug_mark),a  
3f0b 3a 1a 3f			ld a, (.dmark+1)  
3f0e 32 66 ee			ld (debug_mark+1),a  
3f11 3a 1b 3f			ld a, (.dmark+2)  
3f14 32 67 ee			ld (debug_mark+2),a  
3f17 18 03			jr .pastdmark  
3f19 ..			.dmark: db "D->"  
3f1c f1			.pastdmark: pop af  
3f1d			endm  
# End of macro DMARK
3f1d				CALLMONITOR 
3f1d cd 6f ee			call debug_vector  
3f20				endm  
# End of macro CALLMONITOR
3f20			endif	 
3f20			 
3f20			.noadv:	 
3f20			 
3f20					if DEBUG_FORTH_DOT_WAIT 
3f20							call next_page_prompt 
3f20					endif	 
3f20			; TODO this pop off the stack causes a crash. i dont know why 
3f20			 
3f20			 
3f20			if DEBUG_FORTH_DOT 
3f20				DMARK "DTh" 
3f20 f5				push af  
3f21 3a 35 3f			ld a, (.dmark)  
3f24 32 65 ee			ld (debug_mark),a  
3f27 3a 36 3f			ld a, (.dmark+1)  
3f2a 32 66 ee			ld (debug_mark+1),a  
3f2d 3a 37 3f			ld a, (.dmark+2)  
3f30 32 67 ee			ld (debug_mark+2),a  
3f33 18 03			jr .pastdmark  
3f35 ..			.dmark: db "DTh"  
3f38 f1			.pastdmark: pop af  
3f39			endm  
# End of macro DMARK
3f39				CALLMONITOR 
3f39 cd 6f ee			call debug_vector  
3f3c				endm  
# End of macro CALLMONITOR
3f3c			endif	 
3f3c			 
3f3c					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3f3c cd 4d 1e			call macro_forth_dsp_pop 
3f3f				endm 
# End of macro FORTH_DSP_POP
3f3f			 
3f3f			if DEBUG_FORTH_DOT 
3f3f				DMARK "DTi" 
3f3f f5				push af  
3f40 3a 54 3f			ld a, (.dmark)  
3f43 32 65 ee			ld (debug_mark),a  
3f46 3a 55 3f			ld a, (.dmark+1)  
3f49 32 66 ee			ld (debug_mark+1),a  
3f4c 3a 56 3f			ld a, (.dmark+2)  
3f4f 32 67 ee			ld (debug_mark+2),a  
3f52 18 03			jr .pastdmark  
3f54 ..			.dmark: db "DTi"  
3f57 f1			.pastdmark: pop af  
3f58			endm  
# End of macro DMARK
3f58				CALLMONITOR 
3f58 cd 6f ee			call debug_vector  
3f5b				endm  
# End of macro CALLMONITOR
3f5b			endif	 
3f5b			 
3f5b			 
3f5b					NEXTW 
3f5b c3 80 1f			jp macro_next 
3f5e				endm 
# End of macro NEXTW
3f5e			 
3f5e			.CLS: 
3f5e				CWHEAD .DRAW 33 "CLS" 3 WORD_FLAG_CODE 
3f5e 35				db WORD_SYS_CORE+33             
3f5f 8b 3f			dw .DRAW            
3f61 04				db 3 + 1 
3f62 .. 00			db "CLS",0              
3f66				endm 
# End of macro CWHEAD
3f66			; | CLS ( -- ) Clear current frame buffer and set next print position to top left corner  | DONE 
3f66					if DEBUG_FORTH_WORDS_KEY 
3f66						DMARK "CLS" 
3f66 f5				push af  
3f67 3a 7b 3f			ld a, (.dmark)  
3f6a 32 65 ee			ld (debug_mark),a  
3f6d 3a 7c 3f			ld a, (.dmark+1)  
3f70 32 66 ee			ld (debug_mark+1),a  
3f73 3a 7d 3f			ld a, (.dmark+2)  
3f76 32 67 ee			ld (debug_mark+2),a  
3f79 18 03			jr .pastdmark  
3f7b ..			.dmark: db "CLS"  
3f7e f1			.pastdmark: pop af  
3f7f			endm  
# End of macro DMARK
3f7f						CALLMONITOR 
3f7f cd 6f ee			call debug_vector  
3f82				endm  
# End of macro CALLMONITOR
3f82					endif 
3f82 cd c8 0b				call clear_display 
3f85 c3 99 40				jp .home		; and home cursor 
3f88					NEXTW 
3f88 c3 80 1f			jp macro_next 
3f8b				endm 
# End of macro NEXTW
3f8b			 
3f8b			.DRAW: 
3f8b				CWHEAD .DUMP 34 "DRAW" 4 WORD_FLAG_CODE 
3f8b 36				db WORD_SYS_CORE+34             
3f8c b6 3f			dw .DUMP            
3f8e 05				db 4 + 1 
3f8f .. 00			db "DRAW",0              
3f94				endm 
# End of macro CWHEAD
3f94			; | DRAW ( -- ) Draw contents of current frame buffer  | DONE 
3f94					if DEBUG_FORTH_WORDS_KEY 
3f94						DMARK "DRW" 
3f94 f5				push af  
3f95 3a a9 3f			ld a, (.dmark)  
3f98 32 65 ee			ld (debug_mark),a  
3f9b 3a aa 3f			ld a, (.dmark+1)  
3f9e 32 66 ee			ld (debug_mark+1),a  
3fa1 3a ab 3f			ld a, (.dmark+2)  
3fa4 32 67 ee			ld (debug_mark+2),a  
3fa7 18 03			jr .pastdmark  
3fa9 ..			.dmark: db "DRW"  
3fac f1			.pastdmark: pop af  
3fad			endm  
# End of macro DMARK
3fad						CALLMONITOR 
3fad cd 6f ee			call debug_vector  
3fb0				endm  
# End of macro CALLMONITOR
3fb0					endif 
3fb0 cd eb 0b				call update_display 
3fb3					NEXTW 
3fb3 c3 80 1f			jp macro_next 
3fb6				endm 
# End of macro NEXTW
3fb6			 
3fb6			.DUMP: 
3fb6				CWHEAD .CDUMP 35 "DUMP" 4 WORD_FLAG_CODE 
3fb6 37				db WORD_SYS_CORE+35             
3fb7 ee 3f			dw .CDUMP            
3fb9 05				db 4 + 1 
3fba .. 00			db "DUMP",0              
3fbf				endm 
# End of macro CWHEAD
3fbf			; | DUMP ( x -- ) With address x display dump   | DONE 
3fbf			; TODO pop address to use off of the stack 
3fbf					if DEBUG_FORTH_WORDS_KEY 
3fbf						DMARK "DUM" 
3fbf f5				push af  
3fc0 3a d4 3f			ld a, (.dmark)  
3fc3 32 65 ee			ld (debug_mark),a  
3fc6 3a d5 3f			ld a, (.dmark+1)  
3fc9 32 66 ee			ld (debug_mark+1),a  
3fcc 3a d6 3f			ld a, (.dmark+2)  
3fcf 32 67 ee			ld (debug_mark+2),a  
3fd2 18 03			jr .pastdmark  
3fd4 ..			.dmark: db "DUM"  
3fd7 f1			.pastdmark: pop af  
3fd8			endm  
# End of macro DMARK
3fd8						CALLMONITOR 
3fd8 cd 6f ee			call debug_vector  
3fdb				endm  
# End of macro CALLMONITOR
3fdb					endif 
3fdb cd c8 0b				call clear_display 
3fde			 
3fde					; get address 
3fde			 
3fde					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3fde cd 95 1d			call macro_dsp_valuehl 
3fe1				endm 
# End of macro FORTH_DSP_VALUEHL
3fe1				 
3fe1					; save it for cdump 
3fe1			 
3fe1 22 de e5				ld (os_cur_ptr),hl 
3fe4			 
3fe4					; destroy value TOS 
3fe4			 
3fe4					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3fe4 cd 4d 1e			call macro_forth_dsp_pop 
3fe7				endm 
# End of macro FORTH_DSP_POP
3fe7			 
3fe7 cd 10 1a				call dumpcont	; skip old style of param parsing	 
3fea c9					ret			; TODO command causes end of remaining parsing so cant do: $0000 DUMP $8000 DUMP 
3feb					NEXTW 
3feb c3 80 1f			jp macro_next 
3fee				endm 
# End of macro NEXTW
3fee			.CDUMP: 
3fee				CWHEAD .DAT 36 "CDUMP" 5 WORD_FLAG_CODE 
3fee 38				db WORD_SYS_CORE+36             
3fef 1e 40			dw .DAT            
3ff1 06				db 5 + 1 
3ff2 .. 00			db "CDUMP",0              
3ff8				endm 
# End of macro CWHEAD
3ff8			; | CDUMP ( -- ) Continue dump of memory from DUMP | DONE 
3ff8					if DEBUG_FORTH_WORDS_KEY 
3ff8						DMARK "CDP" 
3ff8 f5				push af  
3ff9 3a 0d 40			ld a, (.dmark)  
3ffc 32 65 ee			ld (debug_mark),a  
3fff 3a 0e 40			ld a, (.dmark+1)  
4002 32 66 ee			ld (debug_mark+1),a  
4005 3a 0f 40			ld a, (.dmark+2)  
4008 32 67 ee			ld (debug_mark+2),a  
400b 18 03			jr .pastdmark  
400d ..			.dmark: db "CDP"  
4010 f1			.pastdmark: pop af  
4011			endm  
# End of macro DMARK
4011						CALLMONITOR 
4011 cd 6f ee			call debug_vector  
4014				endm  
# End of macro CALLMONITOR
4014					endif 
4014 cd c8 0b				call clear_display 
4017 cd 10 1a				call dumpcont	 
401a c9					ret			; TODO command causes end of remaining parsing so cant do: $0000 DUMP CDUMP $8000 DUMP 
401b					NEXTW 
401b c3 80 1f			jp macro_next 
401e				endm 
# End of macro NEXTW
401e			 
401e			 
401e			 
401e			 
401e			.DAT: 
401e				CWHEAD .HOME 41 "AT" 2 WORD_FLAG_CODE 
401e 3d				db WORD_SYS_CORE+41             
401f 74 40			dw .HOME            
4021 03				db 2 + 1 
4022 .. 00			db "AT",0              
4025				endm 
# End of macro CWHEAD
4025			; | AT ( u1 u2 -- ) Set next output via . or emit at row u2 col u1 | DONE 
4025					if DEBUG_FORTH_WORDS_KEY 
4025						DMARK "AT." 
4025 f5				push af  
4026 3a 3a 40			ld a, (.dmark)  
4029 32 65 ee			ld (debug_mark),a  
402c 3a 3b 40			ld a, (.dmark+1)  
402f 32 66 ee			ld (debug_mark+1),a  
4032 3a 3c 40			ld a, (.dmark+2)  
4035 32 67 ee			ld (debug_mark+2),a  
4038 18 03			jr .pastdmark  
403a ..			.dmark: db "AT."  
403d f1			.pastdmark: pop af  
403e			endm  
# End of macro DMARK
403e						CALLMONITOR 
403e cd 6f ee			call debug_vector  
4041				endm  
# End of macro CALLMONITOR
4041					endif 
4041					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4041 cd 95 1d			call macro_dsp_valuehl 
4044				endm 
# End of macro FORTH_DSP_VALUEHL
4044			 
4044			 
4044					; TODO save cursor row 
4044 7d					ld a,l 
4045 fe 02				cp 2 
4047 20 04				jr nz, .crow3 
4049 3e 28				ld a, display_row_2 
404b 18 12				jr .ccol1 
404d fe 03		.crow3:		cp 3 
404f 20 04				jr nz, .crow4 
4051 3e 50				ld a, display_row_3 
4053 18 0a				jr .ccol1 
4055 fe 04		.crow4:		cp 4 
4057 20 04				jr nz, .crow1 
4059 3e 78				ld a, display_row_4 
405b 18 02				jr .ccol1 
405d 3e 00		.crow1:		ld a,display_row_1 
405f f5			.ccol1:		push af			; got row offset 
4060 6f					ld l,a 
4061 26 00				ld h,0 
4063					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4063 cd 4d 1e			call macro_forth_dsp_pop 
4066				endm 
# End of macro FORTH_DSP_POP
4066					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4066 cd 95 1d			call macro_dsp_valuehl 
4069				endm 
# End of macro FORTH_DSP_VALUEHL
4069					; TODO save cursor col 
4069 f1					pop af 
406a 85					add l		; add col offset 
406b 32 58 ea				ld (f_cursor_ptr), a 
406e					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
406e cd 4d 1e			call macro_forth_dsp_pop 
4071				endm 
# End of macro FORTH_DSP_POP
4071			 
4071					; calculate  
4071			 
4071					NEXTW 
4071 c3 80 1f			jp macro_next 
4074				endm 
# End of macro NEXTW
4074			 
4074			 
4074			.HOME: 
4074				CWHEAD .CR 45 "HOME" 4 WORD_FLAG_CODE 
4074 41				db WORD_SYS_CORE+45             
4075 a1 40			dw .CR            
4077 05				db 4 + 1 
4078 .. 00			db "HOME",0              
407d				endm 
# End of macro CWHEAD
407d			; | HOME ( -- ) Reset the current cursor for output to home | DONE 
407d					if DEBUG_FORTH_WORDS_KEY 
407d						DMARK "HOM" 
407d f5				push af  
407e 3a 92 40			ld a, (.dmark)  
4081 32 65 ee			ld (debug_mark),a  
4084 3a 93 40			ld a, (.dmark+1)  
4087 32 66 ee			ld (debug_mark+1),a  
408a 3a 94 40			ld a, (.dmark+2)  
408d 32 67 ee			ld (debug_mark+2),a  
4090 18 03			jr .pastdmark  
4092 ..			.dmark: db "HOM"  
4095 f1			.pastdmark: pop af  
4096			endm  
# End of macro DMARK
4096						CALLMONITOR 
4096 cd 6f ee			call debug_vector  
4099				endm  
# End of macro CALLMONITOR
4099					endif 
4099 3e 00		.home:		ld a, 0		; and home cursor 
409b 32 58 ea				ld (f_cursor_ptr), a 
409e					NEXTW 
409e c3 80 1f			jp macro_next 
40a1				endm 
# End of macro NEXTW
40a1			 
40a1			 
40a1			.CR: 
40a1				CWHEAD .SPACE 50 "CR" 2 WORD_FLAG_CODE 
40a1 46				db WORD_SYS_CORE+50             
40a2 dc 40			dw .SPACE            
40a4 03				db 2 + 1 
40a5 .. 00			db "CR",0              
40a8				endm 
# End of macro CWHEAD
40a8			; | CR (  -- s ) Push CR/LF pair onto the stack as a string  | DONE 
40a8					if DEBUG_FORTH_WORDS_KEY 
40a8						DMARK "CR." 
40a8 f5				push af  
40a9 3a bd 40			ld a, (.dmark)  
40ac 32 65 ee			ld (debug_mark),a  
40af 3a be 40			ld a, (.dmark+1)  
40b2 32 66 ee			ld (debug_mark+1),a  
40b5 3a bf 40			ld a, (.dmark+2)  
40b8 32 67 ee			ld (debug_mark+2),a  
40bb 18 03			jr .pastdmark  
40bd ..			.dmark: db "CR."  
40c0 f1			.pastdmark: pop af  
40c1			endm  
# End of macro DMARK
40c1						CALLMONITOR 
40c1 cd 6f ee			call debug_vector  
40c4				endm  
# End of macro CALLMONITOR
40c4					endif 
40c4 3e 0d				ld a, 13 
40c6 32 bb e2				ld (scratch),a 
40c9 3e 0a				ld a, 10 
40cb 32 bc e2				ld (scratch+1),a 
40ce 3e 00				ld a, 0 
40d0 32 bd e2				ld (scratch+2),a 
40d3 21 bb e2				ld hl, scratch 
40d6 cd fe 1b				call forth_push_str 
40d9					 
40d9				       NEXTW 
40d9 c3 80 1f			jp macro_next 
40dc				endm 
# End of macro NEXTW
40dc			.SPACE: 
40dc				CWHEAD .SPACES 50 "BL" 2 WORD_FLAG_CODE 
40dc 46				db WORD_SYS_CORE+50             
40dd 12 41			dw .SPACES            
40df 03				db 2 + 1 
40e0 .. 00			db "BL",0              
40e3				endm 
# End of macro CWHEAD
40e3			; | BL (  -- c ) Push the value of space onto the stack as a string  | DONE 
40e3					if DEBUG_FORTH_WORDS_KEY 
40e3						DMARK "BL." 
40e3 f5				push af  
40e4 3a f8 40			ld a, (.dmark)  
40e7 32 65 ee			ld (debug_mark),a  
40ea 3a f9 40			ld a, (.dmark+1)  
40ed 32 66 ee			ld (debug_mark+1),a  
40f0 3a fa 40			ld a, (.dmark+2)  
40f3 32 67 ee			ld (debug_mark+2),a  
40f6 18 03			jr .pastdmark  
40f8 ..			.dmark: db "BL."  
40fb f1			.pastdmark: pop af  
40fc			endm  
# End of macro DMARK
40fc						CALLMONITOR 
40fc cd 6f ee			call debug_vector  
40ff				endm  
# End of macro CALLMONITOR
40ff					endif 
40ff 3e 20				ld a, " " 
4101 32 bb e2				ld (scratch),a 
4104 3e 00				ld a, 0 
4106 32 bc e2				ld (scratch+1),a 
4109 21 bb e2				ld hl, scratch 
410c cd fe 1b				call forth_push_str 
410f					 
410f				       NEXTW 
410f c3 80 1f			jp macro_next 
4112				endm 
# End of macro NEXTW
4112			 
4112			;.blstr: db " ", 0 
4112			 
4112			.SPACES: 
4112				CWHEAD .SCROLL 51 "SPACES" 6 WORD_FLAG_CODE 
4112 47				db WORD_SYS_CORE+51             
4113 ad 41			dw .SCROLL            
4115 07				db 6 + 1 
4116 .. 00			db "SPACES",0              
411d				endm 
# End of macro CWHEAD
411d			; | SPACES ( u -- str ) A string of u spaces is pushed onto the stack | DONE 
411d					if DEBUG_FORTH_WORDS_KEY 
411d						DMARK "SPS" 
411d f5				push af  
411e 3a 32 41			ld a, (.dmark)  
4121 32 65 ee			ld (debug_mark),a  
4124 3a 33 41			ld a, (.dmark+1)  
4127 32 66 ee			ld (debug_mark+1),a  
412a 3a 34 41			ld a, (.dmark+2)  
412d 32 67 ee			ld (debug_mark+2),a  
4130 18 03			jr .pastdmark  
4132 ..			.dmark: db "SPS"  
4135 f1			.pastdmark: pop af  
4136			endm  
# End of macro DMARK
4136						CALLMONITOR 
4136 cd 6f ee			call debug_vector  
4139				endm  
# End of macro CALLMONITOR
4139					endif 
4139			 
4139			 
4139					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4139 cd 95 1d			call macro_dsp_valuehl 
413c				endm 
# End of macro FORTH_DSP_VALUEHL
413c			 
413c e5					push hl    ; u 
413d					if DEBUG_FORTH_WORDS 
413d						DMARK "SPA" 
413d f5				push af  
413e 3a 52 41			ld a, (.dmark)  
4141 32 65 ee			ld (debug_mark),a  
4144 3a 53 41			ld a, (.dmark+1)  
4147 32 66 ee			ld (debug_mark+1),a  
414a 3a 54 41			ld a, (.dmark+2)  
414d 32 67 ee			ld (debug_mark+2),a  
4150 18 03			jr .pastdmark  
4152 ..			.dmark: db "SPA"  
4155 f1			.pastdmark: pop af  
4156			endm  
# End of macro DMARK
4156						CALLMONITOR 
4156 cd 6f ee			call debug_vector  
4159				endm  
# End of macro CALLMONITOR
4159					endif 
4159			 
4159					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4159 cd 4d 1e			call macro_forth_dsp_pop 
415c				endm 
# End of macro FORTH_DSP_POP
415c e1					pop hl 
415d 0e 00				ld c, 0 
415f 45					ld b, l 
4160 21 bb e2				ld hl, scratch  
4163			 
4163					if DEBUG_FORTH_WORDS 
4163						DMARK "SP2" 
4163 f5				push af  
4164 3a 78 41			ld a, (.dmark)  
4167 32 65 ee			ld (debug_mark),a  
416a 3a 79 41			ld a, (.dmark+1)  
416d 32 66 ee			ld (debug_mark+1),a  
4170 3a 7a 41			ld a, (.dmark+2)  
4173 32 67 ee			ld (debug_mark+2),a  
4176 18 03			jr .pastdmark  
4178 ..			.dmark: db "SP2"  
417b f1			.pastdmark: pop af  
417c			endm  
# End of macro DMARK
417c						CALLMONITOR 
417c cd 6f ee			call debug_vector  
417f				endm  
# End of macro CALLMONITOR
417f					endif 
417f 3e 20				ld a, ' ' 
4181			.spaces1:	 
4181 77					ld (hl),a 
4182 23					inc hl 
4183					 
4183 10 fc				djnz .spaces1 
4185 3e 00				ld a,0 
4187 77					ld (hl),a 
4188 21 bb e2				ld hl, scratch 
418b					if DEBUG_FORTH_WORDS 
418b						DMARK "SP3" 
418b f5				push af  
418c 3a a0 41			ld a, (.dmark)  
418f 32 65 ee			ld (debug_mark),a  
4192 3a a1 41			ld a, (.dmark+1)  
4195 32 66 ee			ld (debug_mark+1),a  
4198 3a a2 41			ld a, (.dmark+2)  
419b 32 67 ee			ld (debug_mark+2),a  
419e 18 03			jr .pastdmark  
41a0 ..			.dmark: db "SP3"  
41a3 f1			.pastdmark: pop af  
41a4			endm  
# End of macro DMARK
41a4						CALLMONITOR 
41a4 cd 6f ee			call debug_vector  
41a7				endm  
# End of macro CALLMONITOR
41a7					endif 
41a7 cd fe 1b				call forth_push_str 
41aa			 
41aa				       NEXTW 
41aa c3 80 1f			jp macro_next 
41ad				endm 
# End of macro NEXTW
41ad			 
41ad			 
41ad			 
41ad			.SCROLL: 
41ad				CWHEAD .SCROLLD 63 "SCROLL" 6 WORD_FLAG_CODE 
41ad 53				db WORD_SYS_CORE+63             
41ae da 41			dw .SCROLLD            
41b0 07				db 6 + 1 
41b1 .. 00			db "SCROLL",0              
41b8				endm 
# End of macro CWHEAD
41b8			; | SCROLL ( -- ) Scroll up one line - next write will update if required | DONE 
41b8					if DEBUG_FORTH_WORDS_KEY 
41b8						DMARK "SCR" 
41b8 f5				push af  
41b9 3a cd 41			ld a, (.dmark)  
41bc 32 65 ee			ld (debug_mark),a  
41bf 3a ce 41			ld a, (.dmark+1)  
41c2 32 66 ee			ld (debug_mark+1),a  
41c5 3a cf 41			ld a, (.dmark+2)  
41c8 32 67 ee			ld (debug_mark+2),a  
41cb 18 03			jr .pastdmark  
41cd ..			.dmark: db "SCR"  
41d0 f1			.pastdmark: pop af  
41d1			endm  
# End of macro DMARK
41d1						CALLMONITOR 
41d1 cd 6f ee			call debug_vector  
41d4				endm  
# End of macro CALLMONITOR
41d4					endif 
41d4			 
41d4 cd 8a 0b			call scroll_up 
41d7			;	call update_display 
41d7			 
41d7					NEXTW 
41d7 c3 80 1f			jp macro_next 
41da				endm 
# End of macro NEXTW
41da			 
41da			 
41da			 
41da			;		; get dir 
41da			; 
41da			;		FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
41da			; 
41da			;		push hl 
41da			; 
41da			;		; destroy value TOS 
41da			; 
41da			;		FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
41da			; 
41da			;		; get count 
41da			; 
41da			;		FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
41da			; 
41da			;		push hl 
41da			; 
41da			;		; destroy value TOS 
41da			; 
41da			;		FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
41da			; 
41da			;		; one value on hl get other one back 
41da			; 
41da			;		pop bc    ; count 
41da			; 
41da			;		pop de   ; dir 
41da			; 
41da			; 
41da			;		ld b, c 
41da			; 
41da			;.scrolldir:     push bc 
41da			;		push de 
41da			; 
41da			;		ld a, 0 
41da			;		cp e 
41da			;		jr z, .scrollup  
41da			;		call scroll_down 
41da			;		jr .scrollnext 
41da			;.scrollup:	call scroll_up 
41da			; 
41da			;		 
41da			;.scrollnext: 
41da			;		pop de 
41da			;		pop bc 
41da			;		djnz .scrolldir 
41da			; 
41da			; 
41da			; 
41da			; 
41da			; 
41da			;		NEXTW 
41da			 
41da			.SCROLLD: 
41da				CWHEAD .ATQ 63 "SCROLLD" 7 WORD_FLAG_CODE 
41da 53				db WORD_SYS_CORE+63             
41db 08 42			dw .ATQ            
41dd 08				db 7 + 1 
41de .. 00			db "SCROLLD",0              
41e6				endm 
# End of macro CWHEAD
41e6			; | SCROLLD ( -- ) Scroll down one line - next write will update if required | TO DO 
41e6					if DEBUG_FORTH_WORDS_KEY 
41e6						DMARK "SCD" 
41e6 f5				push af  
41e7 3a fb 41			ld a, (.dmark)  
41ea 32 65 ee			ld (debug_mark),a  
41ed 3a fc 41			ld a, (.dmark+1)  
41f0 32 66 ee			ld (debug_mark+1),a  
41f3 3a fd 41			ld a, (.dmark+2)  
41f6 32 67 ee			ld (debug_mark+2),a  
41f9 18 03			jr .pastdmark  
41fb ..			.dmark: db "SCD"  
41fe f1			.pastdmark: pop af  
41ff			endm  
# End of macro DMARK
41ff						CALLMONITOR 
41ff cd 6f ee			call debug_vector  
4202				endm  
# End of macro CALLMONITOR
4202					endif 
4202			 
4202 cd ae 0b			call scroll_down 
4205			;	call update_display 
4205			 
4205					NEXTW 
4205 c3 80 1f			jp macro_next 
4208				endm 
# End of macro NEXTW
4208			 
4208			 
4208			.ATQ: 
4208				CWHEAD .AUTODSP 78 "AT@" 3 WORD_FLAG_CODE 
4208 62				db WORD_SYS_CORE+78             
4209 66 42			dw .AUTODSP            
420b 04				db 3 + 1 
420c .. 00			db "AT@",0              
4210				endm 
# End of macro CWHEAD
4210			; | AT@ ( u1 u2 -- n ) Push to stack ASCII value at row u2 col u1 | DONE 
4210					if DEBUG_FORTH_WORDS_KEY 
4210						DMARK "ATA" 
4210 f5				push af  
4211 3a 25 42			ld a, (.dmark)  
4214 32 65 ee			ld (debug_mark),a  
4217 3a 26 42			ld a, (.dmark+1)  
421a 32 66 ee			ld (debug_mark+1),a  
421d 3a 27 42			ld a, (.dmark+2)  
4220 32 67 ee			ld (debug_mark+2),a  
4223 18 03			jr .pastdmark  
4225 ..			.dmark: db "ATA"  
4228 f1			.pastdmark: pop af  
4229			endm  
# End of macro DMARK
4229						CALLMONITOR 
4229 cd 6f ee			call debug_vector  
422c				endm  
# End of macro CALLMONITOR
422c					endif 
422c			 
422c			 
422c					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
422c cd 95 1d			call macro_dsp_valuehl 
422f				endm 
# End of macro FORTH_DSP_VALUEHL
422f			 
422f					; TODO save cursor row 
422f 7d					ld a,l 
4230 fe 02				cp 2 
4232 20 04				jr nz, .crow3aq 
4234 3e 28				ld a, display_row_2 
4236 18 12				jr .ccol1aq 
4238 fe 03		.crow3aq:		cp 3 
423a 20 04				jr nz, .crow4aq 
423c 3e 50				ld a, display_row_3 
423e 18 0a				jr .ccol1aq 
4240 fe 04		.crow4aq:		cp 4 
4242 20 04				jr nz, .crow1aq 
4244 3e 78				ld a, display_row_4 
4246 18 02				jr .ccol1aq 
4248 3e 00		.crow1aq:		ld a,display_row_1 
424a f5			.ccol1aq:		push af			; got row offset 
424b 6f					ld l,a 
424c 26 00				ld h,0 
424e					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
424e cd 4d 1e			call macro_forth_dsp_pop 
4251				endm 
# End of macro FORTH_DSP_POP
4251					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4251 cd 95 1d			call macro_dsp_valuehl 
4254				endm 
# End of macro FORTH_DSP_VALUEHL
4254					; TODO save cursor col 
4254 f1					pop af 
4255 85					add l		; add col offset 
4256			 
4256					; add current frame buffer address 
4256 2a c6 eb				ld hl, (display_fb_active) 
4259 cd f5 0d				call addatohl 
425c			 
425c			 
425c			 
425c			 
425c					; get char frame buffer location offset in hl 
425c			 
425c 7e					ld a,(hl) 
425d 26 00				ld h, 0 
425f 6f					ld l, a 
4260			 
4260 cd 90 1b				call forth_push_numhl 
4263			 
4263			 
4263					NEXTW 
4263 c3 80 1f			jp macro_next 
4266				endm 
# End of macro NEXTW
4266			 
4266			.AUTODSP: 
4266				CWHEAD .MENU 79 "ADSP" 4 WORD_FLAG_CODE 
4266 63				db WORD_SYS_CORE+79             
4267 7c 42			dw .MENU            
4269 05				db 4 + 1 
426a .. 00			db "ADSP",0              
426f				endm 
# End of macro CWHEAD
426f			; | ADSP ( u1 --  ) Enable/Disable Auto screen updates (SLOW). | DONE 
426f			; | | If off, use DRAW to refresh. Default is on. $0003 will enable direct screen writes (TODO)  
426f			 
426f					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
426f cd 95 1d			call macro_dsp_valuehl 
4272				endm 
# End of macro FORTH_DSP_VALUEHL
4272			 
4272			;		push hl 
4272			 
4272					; destroy value TOS 
4272			 
4272					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4272 cd 4d 1e			call macro_forth_dsp_pop 
4275				endm 
# End of macro FORTH_DSP_POP
4275			 
4275			;		pop hl 
4275			 
4275 7d					ld a,l 
4276 32 36 ea				ld (cli_autodisplay), a 
4279				       NEXTW 
4279 c3 80 1f			jp macro_next 
427c				endm 
# End of macro NEXTW
427c			 
427c			.MENU: 
427c				CWHEAD .ENDDISPLAY 92 "MENU" 4 WORD_FLAG_CODE 
427c 70				db WORD_SYS_CORE+92             
427d 25 43			dw .ENDDISPLAY            
427f 05				db 4 + 1 
4280 .. 00			db "MENU",0              
4285				endm 
# End of macro CWHEAD
4285			; | MENU ( u1....ux n -- n ) Create a menu. n is the number of menu items on stack. Push number selection to TOS | DONE 
4285			 
4285			;		; get number of items on the stack 
4285			; 
4285				 
4285					FORTH_DSP_VALUEHL 
4285 cd 95 1d			call macro_dsp_valuehl 
4288				endm 
# End of macro FORTH_DSP_VALUEHL
4288				 
4288					if DEBUG_FORTH_WORDS_KEY 
4288						DMARK "MNU" 
4288 f5				push af  
4289 3a 9d 42			ld a, (.dmark)  
428c 32 65 ee			ld (debug_mark),a  
428f 3a 9e 42			ld a, (.dmark+1)  
4292 32 66 ee			ld (debug_mark+1),a  
4295 3a 9f 42			ld a, (.dmark+2)  
4298 32 67 ee			ld (debug_mark+2),a  
429b 18 03			jr .pastdmark  
429d ..			.dmark: db "MNU"  
42a0 f1			.pastdmark: pop af  
42a1			endm  
# End of macro DMARK
42a1						CALLMONITOR 
42a1 cd 6f ee			call debug_vector  
42a4				endm  
# End of macro CALLMONITOR
42a4					endif 
42a4			 
42a4 45					ld b, l	 
42a5 05					dec b 
42a6			 
42a6					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
42a6 cd 4d 1e			call macro_forth_dsp_pop 
42a9				endm 
# End of macro FORTH_DSP_POP
42a9			 
42a9			 
42a9					; go directly through the stack to pluck out the string pointers and build an array 
42a9			 
42a9			;		FORTH_DSP 
42a9			 
42a9					; hl contains top most stack item 
42a9				 
42a9 11 bb e2				ld de, scratch 
42ac			 
42ac			.mbuild: 
42ac			 
42ac					FORTH_DSP_VALUEHL 
42ac cd 95 1d			call macro_dsp_valuehl 
42af				endm 
# End of macro FORTH_DSP_VALUEHL
42af			 
42af					if DEBUG_FORTH_WORDS 
42af						DMARK "MN3" 
42af f5				push af  
42b0 3a c4 42			ld a, (.dmark)  
42b3 32 65 ee			ld (debug_mark),a  
42b6 3a c5 42			ld a, (.dmark+1)  
42b9 32 66 ee			ld (debug_mark+1),a  
42bc 3a c6 42			ld a, (.dmark+2)  
42bf 32 67 ee			ld (debug_mark+2),a  
42c2 18 03			jr .pastdmark  
42c4 ..			.dmark: db "MN3"  
42c7 f1			.pastdmark: pop af  
42c8			endm  
# End of macro DMARK
42c8						CALLMONITOR 
42c8 cd 6f ee			call debug_vector  
42cb				endm  
# End of macro CALLMONITOR
42cb					endif 
42cb eb					ex de, hl 
42cc 73					ld (hl), e 
42cd 23					inc hl 
42ce 72					ld (hl), d 
42cf 23					inc hl 
42d0 eb					ex de, hl 
42d1			 
42d1					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
42d1 cd 4d 1e			call macro_forth_dsp_pop 
42d4				endm 
# End of macro FORTH_DSP_POP
42d4			 
42d4 10 d6				djnz .mbuild 
42d6			 
42d6					; done add term 
42d6			 
42d6 eb					ex de, hl 
42d7 36 00				ld (hl), 0 
42d9 23					inc hl 
42da 36 00				ld (hl), 0 
42dc			 
42dc				 
42dc					 
42dc 21 bb e2				ld hl, scratch 
42df			 
42df					if DEBUG_FORTH_WORDS 
42df						DMARK "MNx" 
42df f5				push af  
42e0 3a f4 42			ld a, (.dmark)  
42e3 32 65 ee			ld (debug_mark),a  
42e6 3a f5 42			ld a, (.dmark+1)  
42e9 32 66 ee			ld (debug_mark+1),a  
42ec 3a f6 42			ld a, (.dmark+2)  
42ef 32 67 ee			ld (debug_mark+2),a  
42f2 18 03			jr .pastdmark  
42f4 ..			.dmark: db "MNx"  
42f7 f1			.pastdmark: pop af  
42f8			endm  
# End of macro DMARK
42f8						CALLMONITOR 
42f8 cd 6f ee			call debug_vector  
42fb				endm  
# End of macro CALLMONITOR
42fb					endif 
42fb			 
42fb			 
42fb			 
42fb 3e 00				ld a, 0 
42fd cd f9 0b				call menu 
4300			 
4300			 
4300 6f					ld l, a 
4301 26 00				ld h, 0 
4303			 
4303					if DEBUG_FORTH_WORDS 
4303						DMARK "MNr" 
4303 f5				push af  
4304 3a 18 43			ld a, (.dmark)  
4307 32 65 ee			ld (debug_mark),a  
430a 3a 19 43			ld a, (.dmark+1)  
430d 32 66 ee			ld (debug_mark+1),a  
4310 3a 1a 43			ld a, (.dmark+2)  
4313 32 67 ee			ld (debug_mark+2),a  
4316 18 03			jr .pastdmark  
4318 ..			.dmark: db "MNr"  
431b f1			.pastdmark: pop af  
431c			endm  
# End of macro DMARK
431c						CALLMONITOR 
431c cd 6f ee			call debug_vector  
431f				endm  
# End of macro CALLMONITOR
431f					endif 
431f			 
431f cd 90 1b				call forth_push_numhl 
4322			 
4322			 
4322			 
4322			 
4322				       NEXTW 
4322 c3 80 1f			jp macro_next 
4325				endm 
# End of macro NEXTW
4325			 
4325			 
4325			.ENDDISPLAY: 
4325			 
4325			; eof 
# End of file forth_words_display.asm
4325			include "forth_words_str.asm" 
4325			 
4325			; | ## String Words 
4325			 
4325			.SPLIT:   
4325			 
4325				CWHEAD .PTR 52 "SPLIT" 5 WORD_FLAG_CODE 
4325 48				db WORD_SYS_CORE+52             
4326 1a 44			dw .PTR            
4328 06				db 5 + 1 
4329 .. 00			db "SPLIT",0              
432f				endm 
# End of macro CWHEAD
432f			; | SPLIT ( s d -- s s...sn c ) Using delimter d, add strings found in s to stack pushing item count c | DONE 
432f					if DEBUG_FORTH_WORDS_KEY 
432f						DMARK "SPT" 
432f f5				push af  
4330 3a 44 43			ld a, (.dmark)  
4333 32 65 ee			ld (debug_mark),a  
4336 3a 45 43			ld a, (.dmark+1)  
4339 32 66 ee			ld (debug_mark+1),a  
433c 3a 46 43			ld a, (.dmark+2)  
433f 32 67 ee			ld (debug_mark+2),a  
4342 18 03			jr .pastdmark  
4344 ..			.dmark: db "SPT"  
4347 f1			.pastdmark: pop af  
4348			endm  
# End of macro DMARK
4348						CALLMONITOR 
4348 cd 6f ee			call debug_vector  
434b				endm  
# End of macro CALLMONITOR
434b					endif 
434b			 
434b					; get delim 
434b					FORTH_DSP_VALUEHL 
434b cd 95 1d			call macro_dsp_valuehl 
434e				endm 
# End of macro FORTH_DSP_VALUEHL
434e			 
434e					FORTH_DSP_POP 
434e cd 4d 1e			call macro_forth_dsp_pop 
4351				endm 
# End of macro FORTH_DSP_POP
4351					 
4351			 
4351 45					ld b, l    ; move delim to b 
4352 0e 01				ld c, 1   ; count of poritions 
4354			 
4354 c5					push bc 
4355			 
4355					if DEBUG_FORTH_WORDS 
4355						DMARK "SPa" 
4355 f5				push af  
4356 3a 6a 43			ld a, (.dmark)  
4359 32 65 ee			ld (debug_mark),a  
435c 3a 6b 43			ld a, (.dmark+1)  
435f 32 66 ee			ld (debug_mark+1),a  
4362 3a 6c 43			ld a, (.dmark+2)  
4365 32 67 ee			ld (debug_mark+2),a  
4368 18 03			jr .pastdmark  
436a ..			.dmark: db "SPa"  
436d f1			.pastdmark: pop af  
436e			endm  
# End of macro DMARK
436e						CALLMONITOR 
436e cd 6f ee			call debug_vector  
4371				endm  
# End of macro CALLMONITOR
4371					endif 
4371					; get pointer to string to chop up 
4371					FORTH_DSP_VALUEHL 
4371 cd 95 1d			call macro_dsp_valuehl 
4374				endm 
# End of macro FORTH_DSP_VALUEHL
4374			 
4374			;		push hl 
4374 11 bb e2				ld de, scratch 
4377			.spllop: 
4377 c1					pop bc 
4378 c5					push bc 
4379			;		pop hl 
4379					if DEBUG_FORTH_WORDS 
4379						DMARK "SPl" 
4379 f5				push af  
437a 3a 8e 43			ld a, (.dmark)  
437d 32 65 ee			ld (debug_mark),a  
4380 3a 8f 43			ld a, (.dmark+1)  
4383 32 66 ee			ld (debug_mark+1),a  
4386 3a 90 43			ld a, (.dmark+2)  
4389 32 67 ee			ld (debug_mark+2),a  
438c 18 03			jr .pastdmark  
438e ..			.dmark: db "SPl"  
4391 f1			.pastdmark: pop af  
4392			endm  
# End of macro DMARK
4392						CALLMONITOR 
4392 cd 6f ee			call debug_vector  
4395				endm  
# End of macro CALLMONITOR
4395					endif 
4395 7e					ld a, (hl) 
4396 b8					cp b 
4397 28 08				jr z, .splnxt 
4399 fe 00				cp 0 
439b 28 34				jr z, .splend 
439d ed a0				ldi 
439f 18 d6				jr .spllop 
43a1			 
43a1					; hit dlim 
43a1			 
43a1			.splnxt: 
43a1					if DEBUG_FORTH_WORDS 
43a1						DMARK "SPx" 
43a1 f5				push af  
43a2 3a b6 43			ld a, (.dmark)  
43a5 32 65 ee			ld (debug_mark),a  
43a8 3a b7 43			ld a, (.dmark+1)  
43ab 32 66 ee			ld (debug_mark+1),a  
43ae 3a b8 43			ld a, (.dmark+2)  
43b1 32 67 ee			ld (debug_mark+2),a  
43b4 18 03			jr .pastdmark  
43b6 ..			.dmark: db "SPx"  
43b9 f1			.pastdmark: pop af  
43ba			endm  
# End of macro DMARK
43ba						CALLMONITOR 
43ba cd 6f ee			call debug_vector  
43bd				endm  
# End of macro CALLMONITOR
43bd					endif 
43bd 3e 00				ld a, 0 
43bf 12					ld (de), a 
43c0					;ex de, hl 
43c0 e5					push hl 
43c1 21 bb e2				ld hl, scratch 
43c4 cd fe 1b				call forth_push_str 
43c7 e1					pop hl 
43c8					;ex de, hl 
43c8 23					inc hl 
43c9 c1					pop bc 
43ca 0c					inc c 
43cb c5					push bc 
43cc 11 bb e2				ld de, scratch 
43cf 18 a6				jr .spllop 
43d1			 
43d1			.splend:		 
43d1					if DEBUG_FORTH_WORDS 
43d1						DMARK "SPe" 
43d1 f5				push af  
43d2 3a e6 43			ld a, (.dmark)  
43d5 32 65 ee			ld (debug_mark),a  
43d8 3a e7 43			ld a, (.dmark+1)  
43db 32 66 ee			ld (debug_mark+1),a  
43de 3a e8 43			ld a, (.dmark+2)  
43e1 32 67 ee			ld (debug_mark+2),a  
43e4 18 03			jr .pastdmark  
43e6 ..			.dmark: db "SPe"  
43e9 f1			.pastdmark: pop af  
43ea			endm  
# End of macro DMARK
43ea						CALLMONITOR 
43ea cd 6f ee			call debug_vector  
43ed				endm  
# End of macro CALLMONITOR
43ed					endif 
43ed 12					ld (de), a 
43ee eb					ex de, hl 
43ef			;		push hl 
43ef 21 bb e2				ld hl, scratch 
43f2 cd fe 1b				call forth_push_str 
43f5					 
43f5					if DEBUG_FORTH_WORDS 
43f5						DMARK "SPc" 
43f5 f5				push af  
43f6 3a 0a 44			ld a, (.dmark)  
43f9 32 65 ee			ld (debug_mark),a  
43fc 3a 0b 44			ld a, (.dmark+1)  
43ff 32 66 ee			ld (debug_mark+1),a  
4402 3a 0c 44			ld a, (.dmark+2)  
4405 32 67 ee			ld (debug_mark+2),a  
4408 18 03			jr .pastdmark  
440a ..			.dmark: db "SPc"  
440d f1			.pastdmark: pop af  
440e			endm  
# End of macro DMARK
440e						CALLMONITOR 
440e cd 6f ee			call debug_vector  
4411				endm  
# End of macro CALLMONITOR
4411					endif 
4411			 
4411 e1					pop hl    ; get counter from bc which has been push 
4412 26 00				ld h, 0 
4414			;		ld l, c 
4414 cd 90 1b				call forth_push_numhl 
4417			 
4417			 
4417				NEXTW 
4417 c3 80 1f			jp macro_next 
441a				endm 
# End of macro NEXTW
441a			.PTR:   
441a			 
441a				CWHEAD .STYPE 52 "PTR" 3 WORD_FLAG_CODE 
441a 48				db WORD_SYS_CORE+52             
441b 47 44			dw .STYPE            
441d 04				db 3 + 1 
441e .. 00			db "PTR",0              
4422				endm 
# End of macro CWHEAD
4422			; | PTR ( -- addr ) Low level push pointer to the value on TOS | DONE 
4422			; | | If a string will give the address of the string without dropping it. Handy for direct string access 
4422			; | | If a number can then use 2@ and 2! for direct value update without using stack words  
4422			 
4422					if DEBUG_FORTH_WORDS_KEY 
4422						DMARK "PTR" 
4422 f5				push af  
4423 3a 37 44			ld a, (.dmark)  
4426 32 65 ee			ld (debug_mark),a  
4429 3a 38 44			ld a, (.dmark+1)  
442c 32 66 ee			ld (debug_mark+1),a  
442f 3a 39 44			ld a, (.dmark+2)  
4432 32 67 ee			ld (debug_mark+2),a  
4435 18 03			jr .pastdmark  
4437 ..			.dmark: db "PTR"  
443a f1			.pastdmark: pop af  
443b			endm  
# End of macro DMARK
443b						CALLMONITOR 
443b cd 6f ee			call debug_vector  
443e				endm  
# End of macro CALLMONITOR
443e					endif 
443e					FORTH_DSP_VALUEHL 
443e cd 95 1d			call macro_dsp_valuehl 
4441				endm 
# End of macro FORTH_DSP_VALUEHL
4441 cd 90 1b				call forth_push_numhl 
4444			 
4444			 
4444					NEXTW 
4444 c3 80 1f			jp macro_next 
4447				endm 
# End of macro NEXTW
4447			.STYPE: 
4447				CWHEAD .UPPER 52 "STYPE" 5 WORD_FLAG_CODE 
4447 48				db WORD_SYS_CORE+52             
4448 96 44			dw .UPPER            
444a 06				db 5 + 1 
444b .. 00			db "STYPE",0              
4451				endm 
# End of macro CWHEAD
4451			; | STYPE ( u -- u type ) Push type of value on TOS - 's' string, 'i' integer...   | DONE 
4451					if DEBUG_FORTH_WORDS_KEY 
4451						DMARK "STY" 
4451 f5				push af  
4452 3a 66 44			ld a, (.dmark)  
4455 32 65 ee			ld (debug_mark),a  
4458 3a 67 44			ld a, (.dmark+1)  
445b 32 66 ee			ld (debug_mark+1),a  
445e 3a 68 44			ld a, (.dmark+2)  
4461 32 67 ee			ld (debug_mark+2),a  
4464 18 03			jr .pastdmark  
4466 ..			.dmark: db "STY"  
4469 f1			.pastdmark: pop af  
446a			endm  
# End of macro DMARK
446a						CALLMONITOR 
446a cd 6f ee			call debug_vector  
446d				endm  
# End of macro CALLMONITOR
446d					endif 
446d					FORTH_DSP 
446d cd 5b 1d			call macro_forth_dsp 
4470				endm 
# End of macro FORTH_DSP
4470					;v5 FORTH_DSP_VALUE 
4470			 
4470 7e					ld a, (hl) 
4471			 
4471 f5					push af 
4472			 
4472			; Dont destroy TOS		FORTH_DSP_POP 
4472			 
4472 f1					pop af 
4473			 
4473 fe 01				cp DS_TYPE_STR 
4475 28 09				jr z, .typestr 
4477			 
4477 fe 02				cp DS_TYPE_INUM 
4479 28 0a				jr z, .typeinum 
447b			 
447b 21 94 44				ld hl, .tna 
447e 18 0a				jr .tpush 
4480			 
4480 21 90 44		.typestr:	ld hl, .tstr 
4483 18 05				jr .tpush 
4485 21 92 44		.typeinum:	ld hl, .tinum 
4488 18 00				jr .tpush 
448a			 
448a			.tpush: 
448a			 
448a cd fe 1b				call forth_push_str 
448d			 
448d					NEXTW 
448d c3 80 1f			jp macro_next 
4490				endm 
# End of macro NEXTW
4490 .. 00		.tstr:	db "s",0 
4492 .. 00		.tinum:  db "i",0 
4494 .. 00		.tna:   db "?", 0 
4496			 
4496			 
4496			.UPPER: 
4496				CWHEAD .LOWER 52 "UPPER" 5 WORD_FLAG_CODE 
4496 48				db WORD_SYS_CORE+52             
4497 d1 44			dw .LOWER            
4499 06				db 5 + 1 
449a .. 00			db "UPPER",0              
44a0				endm 
# End of macro CWHEAD
44a0			; | UPPER ( s -- s ) Upper case string s  | DONE 
44a0					if DEBUG_FORTH_WORDS_KEY 
44a0						DMARK "UPR" 
44a0 f5				push af  
44a1 3a b5 44			ld a, (.dmark)  
44a4 32 65 ee			ld (debug_mark),a  
44a7 3a b6 44			ld a, (.dmark+1)  
44aa 32 66 ee			ld (debug_mark+1),a  
44ad 3a b7 44			ld a, (.dmark+2)  
44b0 32 67 ee			ld (debug_mark+2),a  
44b3 18 03			jr .pastdmark  
44b5 ..			.dmark: db "UPR"  
44b8 f1			.pastdmark: pop af  
44b9			endm  
# End of macro DMARK
44b9						CALLMONITOR 
44b9 cd 6f ee			call debug_vector  
44bc				endm  
# End of macro CALLMONITOR
44bc					endif 
44bc			 
44bc					FORTH_DSP 
44bc cd 5b 1d			call macro_forth_dsp 
44bf				endm 
# End of macro FORTH_DSP
44bf					 
44bf			; TODO check is string type 
44bf			 
44bf					FORTH_DSP_VALUEHL 
44bf cd 95 1d			call macro_dsp_valuehl 
44c2				endm 
# End of macro FORTH_DSP_VALUEHL
44c2			; get pointer to string in hl 
44c2			 
44c2 7e			.toup:		ld a, (hl) 
44c3 fe 00				cp 0 
44c5 28 07				jr z, .toupdone 
44c7			 
44c7 cd 6a 10				call to_upper 
44ca			 
44ca 77					ld (hl), a 
44cb 23					inc hl 
44cc 18 f4				jr .toup 
44ce			 
44ce					 
44ce			 
44ce			 
44ce			; for each char convert to upper 
44ce					 
44ce			.toupdone: 
44ce			 
44ce			 
44ce					NEXTW 
44ce c3 80 1f			jp macro_next 
44d1				endm 
# End of macro NEXTW
44d1			.LOWER: 
44d1				CWHEAD .TCASE 52 "LOWER" 5 WORD_FLAG_CODE 
44d1 48				db WORD_SYS_CORE+52             
44d2 0c 45			dw .TCASE            
44d4 06				db 5 + 1 
44d5 .. 00			db "LOWER",0              
44db				endm 
# End of macro CWHEAD
44db			; | LOWER ( s -- s ) Lower case string s  | DONE 
44db					if DEBUG_FORTH_WORDS_KEY 
44db						DMARK "LWR" 
44db f5				push af  
44dc 3a f0 44			ld a, (.dmark)  
44df 32 65 ee			ld (debug_mark),a  
44e2 3a f1 44			ld a, (.dmark+1)  
44e5 32 66 ee			ld (debug_mark+1),a  
44e8 3a f2 44			ld a, (.dmark+2)  
44eb 32 67 ee			ld (debug_mark+2),a  
44ee 18 03			jr .pastdmark  
44f0 ..			.dmark: db "LWR"  
44f3 f1			.pastdmark: pop af  
44f4			endm  
# End of macro DMARK
44f4						CALLMONITOR 
44f4 cd 6f ee			call debug_vector  
44f7				endm  
# End of macro CALLMONITOR
44f7					endif 
44f7			 
44f7					FORTH_DSP 
44f7 cd 5b 1d			call macro_forth_dsp 
44fa				endm 
# End of macro FORTH_DSP
44fa					 
44fa			; TODO check is string type 
44fa			 
44fa					FORTH_DSP_VALUEHL 
44fa cd 95 1d			call macro_dsp_valuehl 
44fd				endm 
# End of macro FORTH_DSP_VALUEHL
44fd			; get pointer to string in hl 
44fd			 
44fd 7e			.tolow:		ld a, (hl) 
44fe fe 00				cp 0 
4500 28 07				jr z, .tolowdone 
4502			 
4502 cd 73 10				call to_lower 
4505			 
4505 77					ld (hl), a 
4506 23					inc hl 
4507 18 f4				jr .tolow 
4509			 
4509					 
4509			 
4509			 
4509			; for each char convert to low 
4509					 
4509			.tolowdone: 
4509					NEXTW 
4509 c3 80 1f			jp macro_next 
450c				endm 
# End of macro NEXTW
450c			.TCASE: 
450c				CWHEAD .SUBSTR 52 "TCASE" 5 WORD_FLAG_CODE 
450c 48				db WORD_SYS_CORE+52             
450d 42 46			dw .SUBSTR            
450f 06				db 5 + 1 
4510 .. 00			db "TCASE",0              
4516				endm 
# End of macro CWHEAD
4516			; | TCASE ( s -- s ) Title case string s  | DONE 
4516					if DEBUG_FORTH_WORDS_KEY 
4516						DMARK "TCS" 
4516 f5				push af  
4517 3a 2b 45			ld a, (.dmark)  
451a 32 65 ee			ld (debug_mark),a  
451d 3a 2c 45			ld a, (.dmark+1)  
4520 32 66 ee			ld (debug_mark+1),a  
4523 3a 2d 45			ld a, (.dmark+2)  
4526 32 67 ee			ld (debug_mark+2),a  
4529 18 03			jr .pastdmark  
452b ..			.dmark: db "TCS"  
452e f1			.pastdmark: pop af  
452f			endm  
# End of macro DMARK
452f						CALLMONITOR 
452f cd 6f ee			call debug_vector  
4532				endm  
# End of macro CALLMONITOR
4532					endif 
4532			 
4532					FORTH_DSP 
4532 cd 5b 1d			call macro_forth_dsp 
4535				endm 
# End of macro FORTH_DSP
4535					 
4535			; TODO check is string type 
4535			 
4535					FORTH_DSP_VALUEHL 
4535 cd 95 1d			call macro_dsp_valuehl 
4538				endm 
# End of macro FORTH_DSP_VALUEHL
4538			; get pointer to string in hl 
4538			 
4538					if DEBUG_FORTH_WORDS 
4538						DMARK "TC1" 
4538 f5				push af  
4539 3a 4d 45			ld a, (.dmark)  
453c 32 65 ee			ld (debug_mark),a  
453f 3a 4e 45			ld a, (.dmark+1)  
4542 32 66 ee			ld (debug_mark+1),a  
4545 3a 4f 45			ld a, (.dmark+2)  
4548 32 67 ee			ld (debug_mark+2),a  
454b 18 03			jr .pastdmark  
454d ..			.dmark: db "TC1"  
4550 f1			.pastdmark: pop af  
4551			endm  
# End of macro DMARK
4551						CALLMONITOR 
4551 cd 6f ee			call debug_vector  
4554				endm  
# End of macro CALLMONITOR
4554					endif 
4554			 
4554					; first time in turn to upper case first char 
4554			 
4554 7e					ld a, (hl) 
4555 c3 df 45				jp .totsiptou 
4558			 
4558			 
4558 7e			.tot:		ld a, (hl) 
4559 fe 00				cp 0 
455b ca 23 46				jp z, .totdone 
455e			 
455e					if DEBUG_FORTH_WORDS 
455e						DMARK "TC2" 
455e f5				push af  
455f 3a 73 45			ld a, (.dmark)  
4562 32 65 ee			ld (debug_mark),a  
4565 3a 74 45			ld a, (.dmark+1)  
4568 32 66 ee			ld (debug_mark+1),a  
456b 3a 75 45			ld a, (.dmark+2)  
456e 32 67 ee			ld (debug_mark+2),a  
4571 18 03			jr .pastdmark  
4573 ..			.dmark: db "TC2"  
4576 f1			.pastdmark: pop af  
4577			endm  
# End of macro DMARK
4577						CALLMONITOR 
4577 cd 6f ee			call debug_vector  
457a				endm  
# End of macro CALLMONITOR
457a					endif 
457a					; check to see if current char is a space 
457a			 
457a fe 20				cp ' ' 
457c 28 21				jr z, .totsp 
457e cd 73 10				call to_lower 
4581					if DEBUG_FORTH_WORDS 
4581						DMARK "TC3" 
4581 f5				push af  
4582 3a 96 45			ld a, (.dmark)  
4585 32 65 ee			ld (debug_mark),a  
4588 3a 97 45			ld a, (.dmark+1)  
458b 32 66 ee			ld (debug_mark+1),a  
458e 3a 98 45			ld a, (.dmark+2)  
4591 32 67 ee			ld (debug_mark+2),a  
4594 18 03			jr .pastdmark  
4596 ..			.dmark: db "TC3"  
4599 f1			.pastdmark: pop af  
459a			endm  
# End of macro DMARK
459a						CALLMONITOR 
459a cd 6f ee			call debug_vector  
459d				endm  
# End of macro CALLMONITOR
459d					endif 
459d 18 63				jr .totnxt 
459f			 
459f			.totsp:         ; on a space, find next char which should be upper 
459f			 
459f					if DEBUG_FORTH_WORDS 
459f						DMARK "TC4" 
459f f5				push af  
45a0 3a b4 45			ld a, (.dmark)  
45a3 32 65 ee			ld (debug_mark),a  
45a6 3a b5 45			ld a, (.dmark+1)  
45a9 32 66 ee			ld (debug_mark+1),a  
45ac 3a b6 45			ld a, (.dmark+2)  
45af 32 67 ee			ld (debug_mark+2),a  
45b2 18 03			jr .pastdmark  
45b4 ..			.dmark: db "TC4"  
45b7 f1			.pastdmark: pop af  
45b8			endm  
# End of macro DMARK
45b8						CALLMONITOR 
45b8 cd 6f ee			call debug_vector  
45bb				endm  
# End of macro CALLMONITOR
45bb					endif 
45bb					;; 
45bb			 
45bb fe 20				cp ' ' 
45bd 20 20				jr nz, .totsiptou 
45bf 23					inc hl 
45c0 7e					ld a, (hl) 
45c1					if DEBUG_FORTH_WORDS 
45c1						DMARK "TC5" 
45c1 f5				push af  
45c2 3a d6 45			ld a, (.dmark)  
45c5 32 65 ee			ld (debug_mark),a  
45c8 3a d7 45			ld a, (.dmark+1)  
45cb 32 66 ee			ld (debug_mark+1),a  
45ce 3a d8 45			ld a, (.dmark+2)  
45d1 32 67 ee			ld (debug_mark+2),a  
45d4 18 03			jr .pastdmark  
45d6 ..			.dmark: db "TC5"  
45d9 f1			.pastdmark: pop af  
45da			endm  
# End of macro DMARK
45da						CALLMONITOR 
45da cd 6f ee			call debug_vector  
45dd				endm  
# End of macro CALLMONITOR
45dd					endif 
45dd 18 c0				jr .totsp 
45df fe 00		.totsiptou:    cp 0 
45e1 28 40				jr z, .totdone 
45e3					; not space and not zero term so upper case it 
45e3 cd 6a 10				call to_upper 
45e6			 
45e6					if DEBUG_FORTH_WORDS 
45e6						DMARK "TC6" 
45e6 f5				push af  
45e7 3a fb 45			ld a, (.dmark)  
45ea 32 65 ee			ld (debug_mark),a  
45ed 3a fc 45			ld a, (.dmark+1)  
45f0 32 66 ee			ld (debug_mark+1),a  
45f3 3a fd 45			ld a, (.dmark+2)  
45f6 32 67 ee			ld (debug_mark+2),a  
45f9 18 03			jr .pastdmark  
45fb ..			.dmark: db "TC6"  
45fe f1			.pastdmark: pop af  
45ff			endm  
# End of macro DMARK
45ff						CALLMONITOR 
45ff cd 6f ee			call debug_vector  
4602				endm  
# End of macro CALLMONITOR
4602					endif 
4602			 
4602			 
4602			.totnxt: 
4602			 
4602 77					ld (hl), a 
4603 23					inc hl 
4604					if DEBUG_FORTH_WORDS 
4604						DMARK "TC7" 
4604 f5				push af  
4605 3a 19 46			ld a, (.dmark)  
4608 32 65 ee			ld (debug_mark),a  
460b 3a 1a 46			ld a, (.dmark+1)  
460e 32 66 ee			ld (debug_mark+1),a  
4611 3a 1b 46			ld a, (.dmark+2)  
4614 32 67 ee			ld (debug_mark+2),a  
4617 18 03			jr .pastdmark  
4619 ..			.dmark: db "TC7"  
461c f1			.pastdmark: pop af  
461d			endm  
# End of macro DMARK
461d						CALLMONITOR 
461d cd 6f ee			call debug_vector  
4620				endm  
# End of macro CALLMONITOR
4620					endif 
4620 c3 58 45				jp .tot 
4623			 
4623					 
4623			 
4623			 
4623			; for each char convert to low 
4623					 
4623			.totdone: 
4623					if DEBUG_FORTH_WORDS 
4623						DMARK "TCd" 
4623 f5				push af  
4624 3a 38 46			ld a, (.dmark)  
4627 32 65 ee			ld (debug_mark),a  
462a 3a 39 46			ld a, (.dmark+1)  
462d 32 66 ee			ld (debug_mark+1),a  
4630 3a 3a 46			ld a, (.dmark+2)  
4633 32 67 ee			ld (debug_mark+2),a  
4636 18 03			jr .pastdmark  
4638 ..			.dmark: db "TCd"  
463b f1			.pastdmark: pop af  
463c			endm  
# End of macro DMARK
463c						CALLMONITOR 
463c cd 6f ee			call debug_vector  
463f				endm  
# End of macro CALLMONITOR
463f					endif 
463f					NEXTW 
463f c3 80 1f			jp macro_next 
4642				endm 
# End of macro NEXTW
4642			 
4642			.SUBSTR: 
4642				CWHEAD .LEFT 52 "SUBSTR" 6 WORD_FLAG_CODE 
4642 48				db WORD_SYS_CORE+52             
4643 a0 46			dw .LEFT            
4645 07				db 6 + 1 
4646 .. 00			db "SUBSTR",0              
464d				endm 
# End of macro CWHEAD
464d			; | SUBSTR ( s u1 u2 -- s sb ) Push to TOS chars starting at position u1 and with length u2 from string s  | DONE 
464d			 
464d					if DEBUG_FORTH_WORDS_KEY 
464d						DMARK "SST" 
464d f5				push af  
464e 3a 62 46			ld a, (.dmark)  
4651 32 65 ee			ld (debug_mark),a  
4654 3a 63 46			ld a, (.dmark+1)  
4657 32 66 ee			ld (debug_mark+1),a  
465a 3a 64 46			ld a, (.dmark+2)  
465d 32 67 ee			ld (debug_mark+2),a  
4660 18 03			jr .pastdmark  
4662 ..			.dmark: db "SST"  
4665 f1			.pastdmark: pop af  
4666			endm  
# End of macro DMARK
4666						CALLMONITOR 
4666 cd 6f ee			call debug_vector  
4669				endm  
# End of macro CALLMONITOR
4669					endif 
4669			; TODO check string type 
4669					FORTH_DSP_VALUEHL 
4669 cd 95 1d			call macro_dsp_valuehl 
466c				endm 
# End of macro FORTH_DSP_VALUEHL
466c			 
466c e5					push hl      ; string length 
466d			 
466d					FORTH_DSP_POP 
466d cd 4d 1e			call macro_forth_dsp_pop 
4670				endm 
# End of macro FORTH_DSP_POP
4670			 
4670					FORTH_DSP_VALUEHL 
4670 cd 95 1d			call macro_dsp_valuehl 
4673				endm 
# End of macro FORTH_DSP_VALUEHL
4673			 
4673 e5					push hl     ; start char 
4674			 
4674					FORTH_DSP_POP 
4674 cd 4d 1e			call macro_forth_dsp_pop 
4677				endm 
# End of macro FORTH_DSP_POP
4677			 
4677			 
4677					FORTH_DSP_VALUE 
4677 cd 7e 1d			call macro_forth_dsp_value 
467a				endm 
# End of macro FORTH_DSP_VALUE
467a			 
467a d1					pop de    ; get start post offset 
467b			 
467b 19					add hl, de    ; starting offset 
467c			 
467c c1					pop bc 
467d c5					push bc      ; grab size of string 
467e			 
467e e5					push hl    ; save string start  
467f			 
467f 26 00				ld h, 0 
4681 69					ld l, c 
4682 23					inc hl 
4683 23					inc hl 
4684			 
4684 cd d0 11				call malloc 
4687				if DEBUG_FORTH_MALLOC_GUARD 
4687 cc 6f 50				call z,malloc_error 
468a				endif 
468a			 
468a eb					ex de, hl      ; save malloc area for string copy 
468b e1					pop hl    ; get back source 
468c c1					pop bc    ; get length of string back 
468d			 
468d d5					push de    ; save malloc area for after we push 
468e ed b0				ldir     ; copy substr 
4690			 
4690			 
4690 eb					ex de, hl 
4691 3e 00				ld a, 0 
4693 77					ld (hl), a   ; term substr 
4694			 
4694					 
4694 e1					pop hl    ; get malloc so we can push it 
4695 e5					push hl   ; save so we can free it afterwards 
4696			 
4696 cd fe 1b				call forth_push_str 
4699			 
4699 e1					pop hl 
469a cd 9a 12				call free 
469d			 
469d					 
469d					 
469d			 
469d			 
469d					NEXTW 
469d c3 80 1f			jp macro_next 
46a0				endm 
# End of macro NEXTW
46a0			 
46a0			.LEFT: 
46a0				CWHEAD .RIGHT 52 "LEFT" 4 WORD_FLAG_CODE 
46a0 48				db WORD_SYS_CORE+52             
46a1 c8 46			dw .RIGHT            
46a3 05				db 4 + 1 
46a4 .. 00			db "LEFT",0              
46a9				endm 
# End of macro CWHEAD
46a9			; | LEFT ( s u -- s sub ) Push to TOS string u long starting from left of s  | TODO 
46a9					if DEBUG_FORTH_WORDS_KEY 
46a9						DMARK "LEF" 
46a9 f5				push af  
46aa 3a be 46			ld a, (.dmark)  
46ad 32 65 ee			ld (debug_mark),a  
46b0 3a bf 46			ld a, (.dmark+1)  
46b3 32 66 ee			ld (debug_mark+1),a  
46b6 3a c0 46			ld a, (.dmark+2)  
46b9 32 67 ee			ld (debug_mark+2),a  
46bc 18 03			jr .pastdmark  
46be ..			.dmark: db "LEF"  
46c1 f1			.pastdmark: pop af  
46c2			endm  
# End of macro DMARK
46c2						CALLMONITOR 
46c2 cd 6f ee			call debug_vector  
46c5				endm  
# End of macro CALLMONITOR
46c5					endif 
46c5			 
46c5					NEXTW 
46c5 c3 80 1f			jp macro_next 
46c8				endm 
# End of macro NEXTW
46c8			.RIGHT: 
46c8				CWHEAD .STR2NUM 52 "RIGHT" 5 WORD_FLAG_CODE 
46c8 48				db WORD_SYS_CORE+52             
46c9 f1 46			dw .STR2NUM            
46cb 06				db 5 + 1 
46cc .. 00			db "RIGHT",0              
46d2				endm 
# End of macro CWHEAD
46d2			; | RIGHT ( s u -- s sub ) Push to TOS string u long starting from right of s  | TODO 
46d2					if DEBUG_FORTH_WORDS_KEY 
46d2						DMARK "RIG" 
46d2 f5				push af  
46d3 3a e7 46			ld a, (.dmark)  
46d6 32 65 ee			ld (debug_mark),a  
46d9 3a e8 46			ld a, (.dmark+1)  
46dc 32 66 ee			ld (debug_mark+1),a  
46df 3a e9 46			ld a, (.dmark+2)  
46e2 32 67 ee			ld (debug_mark+2),a  
46e5 18 03			jr .pastdmark  
46e7 ..			.dmark: db "RIG"  
46ea f1			.pastdmark: pop af  
46eb			endm  
# End of macro DMARK
46eb						CALLMONITOR 
46eb cd 6f ee			call debug_vector  
46ee				endm  
# End of macro CALLMONITOR
46ee					endif 
46ee			 
46ee					NEXTW 
46ee c3 80 1f			jp macro_next 
46f1				endm 
# End of macro NEXTW
46f1			 
46f1			 
46f1			.STR2NUM: 
46f1				CWHEAD .NUM2STR 52 "STR2NUM" 7 WORD_FLAG_CODE 
46f1 48				db WORD_SYS_CORE+52             
46f2 7d 47			dw .NUM2STR            
46f4 08				db 7 + 1 
46f5 .. 00			db "STR2NUM",0              
46fd				endm 
# End of macro CWHEAD
46fd			; | STR2NUM ( s -- n ) Convert a string on TOS to number | DONE 
46fd			 
46fd			 
46fd			; TODO STR type check to do 
46fd					if DEBUG_FORTH_WORDS_KEY 
46fd						DMARK "S2N" 
46fd f5				push af  
46fe 3a 12 47			ld a, (.dmark)  
4701 32 65 ee			ld (debug_mark),a  
4704 3a 13 47			ld a, (.dmark+1)  
4707 32 66 ee			ld (debug_mark+1),a  
470a 3a 14 47			ld a, (.dmark+2)  
470d 32 67 ee			ld (debug_mark+2),a  
4710 18 03			jr .pastdmark  
4712 ..			.dmark: db "S2N"  
4715 f1			.pastdmark: pop af  
4716			endm  
# End of macro DMARK
4716						CALLMONITOR 
4716 cd 6f ee			call debug_vector  
4719				endm  
# End of macro CALLMONITOR
4719					endif 
4719			 
4719					;FORTH_DSP 
4719					FORTH_DSP_VALUE 
4719 cd 7e 1d			call macro_forth_dsp_value 
471c				endm 
# End of macro FORTH_DSP_VALUE
471c					;inc hl 
471c			 
471c eb					ex de, hl 
471d					if DEBUG_FORTH_WORDS 
471d						DMARK "S2a" 
471d f5				push af  
471e 3a 32 47			ld a, (.dmark)  
4721 32 65 ee			ld (debug_mark),a  
4724 3a 33 47			ld a, (.dmark+1)  
4727 32 66 ee			ld (debug_mark+1),a  
472a 3a 34 47			ld a, (.dmark+2)  
472d 32 67 ee			ld (debug_mark+2),a  
4730 18 03			jr .pastdmark  
4732 ..			.dmark: db "S2a"  
4735 f1			.pastdmark: pop af  
4736			endm  
# End of macro DMARK
4736						CALLMONITOR 
4736 cd 6f ee			call debug_vector  
4739				endm  
# End of macro CALLMONITOR
4739					endif 
4739 cd f2 10				call string_to_uint16 
473c			 
473c					if DEBUG_FORTH_WORDS 
473c						DMARK "S2b" 
473c f5				push af  
473d 3a 51 47			ld a, (.dmark)  
4740 32 65 ee			ld (debug_mark),a  
4743 3a 52 47			ld a, (.dmark+1)  
4746 32 66 ee			ld (debug_mark+1),a  
4749 3a 53 47			ld a, (.dmark+2)  
474c 32 67 ee			ld (debug_mark+2),a  
474f 18 03			jr .pastdmark  
4751 ..			.dmark: db "S2b"  
4754 f1			.pastdmark: pop af  
4755			endm  
# End of macro DMARK
4755						CALLMONITOR 
4755 cd 6f ee			call debug_vector  
4758				endm  
# End of macro CALLMONITOR
4758					endif 
4758			;		push hl 
4758					FORTH_DSP_POP 
4758 cd 4d 1e			call macro_forth_dsp_pop 
475b				endm 
# End of macro FORTH_DSP_POP
475b			;		pop hl 
475b					 
475b					if DEBUG_FORTH_WORDS 
475b						DMARK "S2b" 
475b f5				push af  
475c 3a 70 47			ld a, (.dmark)  
475f 32 65 ee			ld (debug_mark),a  
4762 3a 71 47			ld a, (.dmark+1)  
4765 32 66 ee			ld (debug_mark+1),a  
4768 3a 72 47			ld a, (.dmark+2)  
476b 32 67 ee			ld (debug_mark+2),a  
476e 18 03			jr .pastdmark  
4770 ..			.dmark: db "S2b"  
4773 f1			.pastdmark: pop af  
4774			endm  
# End of macro DMARK
4774						CALLMONITOR 
4774 cd 6f ee			call debug_vector  
4777				endm  
# End of macro CALLMONITOR
4777					endif 
4777 cd 90 1b				call forth_push_numhl	 
477a			 
477a				 
477a				       NEXTW 
477a c3 80 1f			jp macro_next 
477d				endm 
# End of macro NEXTW
477d			.NUM2STR: 
477d				CWHEAD .CONCAT 52 "NUM2STR" 7 WORD_FLAG_CODE 
477d 48				db WORD_SYS_CORE+52             
477e 0f 48			dw .CONCAT            
4780 08				db 7 + 1 
4781 .. 00			db "NUM2STR",0              
4789				endm 
# End of macro CWHEAD
4789			; | NUM2STR ( n -- s ) Convert a number on TOS to zero padded string | DONE 
4789			 
4789			;		; malloc a string to target 
4789			;		ld hl, 10     ; TODO max string size should be fine 
4789			;		call malloc 
4789			;		push hl    ; save malloc location 
4789			; 
4789			; 
4789			;; TODO check int type 
4789					if DEBUG_FORTH_WORDS_KEY 
4789						DMARK "N2S" 
4789 f5				push af  
478a 3a 9e 47			ld a, (.dmark)  
478d 32 65 ee			ld (debug_mark),a  
4790 3a 9f 47			ld a, (.dmark+1)  
4793 32 66 ee			ld (debug_mark+1),a  
4796 3a a0 47			ld a, (.dmark+2)  
4799 32 67 ee			ld (debug_mark+2),a  
479c 18 03			jr .pastdmark  
479e ..			.dmark: db "N2S"  
47a1 f1			.pastdmark: pop af  
47a2			endm  
# End of macro DMARK
47a2						CALLMONITOR 
47a2 cd 6f ee			call debug_vector  
47a5				endm  
# End of macro CALLMONITOR
47a5					endif 
47a5			 
47a5					FORTH_DSP_VALUEHL 
47a5 cd 95 1d			call macro_dsp_valuehl 
47a8				endm 
# End of macro FORTH_DSP_VALUEHL
47a8			 
47a8					if DEBUG_FORTH_WORDS 
47a8						DMARK "NS1" 
47a8 f5				push af  
47a9 3a bd 47			ld a, (.dmark)  
47ac 32 65 ee			ld (debug_mark),a  
47af 3a be 47			ld a, (.dmark+1)  
47b2 32 66 ee			ld (debug_mark+1),a  
47b5 3a bf 47			ld a, (.dmark+2)  
47b8 32 67 ee			ld (debug_mark+2),a  
47bb 18 03			jr .pastdmark  
47bd ..			.dmark: db "NS1"  
47c0 f1			.pastdmark: pop af  
47c1			endm  
# End of macro DMARK
47c1						CALLMONITOR 
47c1 cd 6f ee			call debug_vector  
47c4				endm  
# End of macro CALLMONITOR
47c4					endif 
47c4					FORTH_DSP_POP 
47c4 cd 4d 1e			call macro_forth_dsp_pop 
47c7				endm 
# End of macro FORTH_DSP_POP
47c7			 
47c7 eb					ex de, hl 
47c8 21 bb e2				ld hl, scratch 
47cb					if DEBUG_FORTH_WORDS 
47cb						DMARK "NS2" 
47cb f5				push af  
47cc 3a e0 47			ld a, (.dmark)  
47cf 32 65 ee			ld (debug_mark),a  
47d2 3a e1 47			ld a, (.dmark+1)  
47d5 32 66 ee			ld (debug_mark+1),a  
47d8 3a e2 47			ld a, (.dmark+2)  
47db 32 67 ee			ld (debug_mark+2),a  
47de 18 03			jr .pastdmark  
47e0 ..			.dmark: db "NS2"  
47e3 f1			.pastdmark: pop af  
47e4			endm  
# End of macro DMARK
47e4						CALLMONITOR 
47e4 cd 6f ee			call debug_vector  
47e7				endm  
# End of macro CALLMONITOR
47e7					endif 
47e7 cd 0a 11				call uitoa_16 
47ea 21 bb e2				ld hl, scratch 
47ed					if DEBUG_FORTH_WORDS 
47ed						DMARK "NS3" 
47ed f5				push af  
47ee 3a 02 48			ld a, (.dmark)  
47f1 32 65 ee			ld (debug_mark),a  
47f4 3a 03 48			ld a, (.dmark+1)  
47f7 32 66 ee			ld (debug_mark+1),a  
47fa 3a 04 48			ld a, (.dmark+2)  
47fd 32 67 ee			ld (debug_mark+2),a  
4800 18 03			jr .pastdmark  
4802 ..			.dmark: db "NS3"  
4805 f1			.pastdmark: pop af  
4806			endm  
# End of macro DMARK
4806						CALLMONITOR 
4806 cd 6f ee			call debug_vector  
4809				endm  
# End of macro CALLMONITOR
4809					endif 
4809 cd fe 1b				call forth_push_str 
480c			;		ld a, l 
480c			;		call DispAToASCII   
480c			;;TODO need to chage above call to dump into string 
480c			; 
480c			; 
480c			 
480c				       NEXTW 
480c c3 80 1f			jp macro_next 
480f				endm 
# End of macro NEXTW
480f			 
480f			.CONCAT: 
480f				CWHEAD .FIND 52 "CONCAT" 6 WORD_FLAG_CODE 
480f 48				db WORD_SYS_CORE+52             
4810 c2 48			dw .FIND            
4812 07				db 6 + 1 
4813 .. 00			db "CONCAT",0              
481a				endm 
# End of macro CWHEAD
481a			; | CONCAT ( s1 s2 -- s3 ) A s1 + s2 is pushed onto the stack | DONE 
481a			 
481a			; TODO check string type 
481a			; TODO create macro to get pointer for next item on stack. Handy for lots of things 
481a			 
481a					if DEBUG_FORTH_WORDS_KEY 
481a						DMARK "CON" 
481a f5				push af  
481b 3a 2f 48			ld a, (.dmark)  
481e 32 65 ee			ld (debug_mark),a  
4821 3a 30 48			ld a, (.dmark+1)  
4824 32 66 ee			ld (debug_mark+1),a  
4827 3a 31 48			ld a, (.dmark+2)  
482a 32 67 ee			ld (debug_mark+2),a  
482d 18 03			jr .pastdmark  
482f ..			.dmark: db "CON"  
4832 f1			.pastdmark: pop af  
4833			endm  
# End of macro DMARK
4833						CALLMONITOR 
4833 cd 6f ee			call debug_vector  
4836				endm  
# End of macro CALLMONITOR
4836					endif 
4836			 
4836			 
4836					FORTH_DSP_VALUE 
4836 cd 7e 1d			call macro_forth_dsp_value 
4839				endm 
# End of macro FORTH_DSP_VALUE
4839 e5					push hl   ; s2 
483a			 
483a					FORTH_DSP_POP 
483a cd 4d 1e			call macro_forth_dsp_pop 
483d				endm 
# End of macro FORTH_DSP_POP
483d			 
483d					FORTH_DSP_VALUE 
483d cd 7e 1d			call macro_forth_dsp_value 
4840				endm 
# End of macro FORTH_DSP_VALUE
4840			 
4840 e5					push hl   ; s1 
4841			 
4841					FORTH_DSP_POP 
4841 cd 4d 1e			call macro_forth_dsp_pop 
4844				endm 
# End of macro FORTH_DSP_POP
4844					 
4844			 
4844					; copy s1 
4844			 
4844				 
4844					; save ptr 
4844 e1					pop hl  
4845 e5					push hl 
4846 3e 00				ld a, 0 
4848 cd 66 11				call strlent 
484b					;inc hl    ; zer0 
484b 06 00				ld b, 0 
484d 4d					ld c, l 
484e e1					pop hl		 
484f 11 bb e2				ld de, scratch	 
4852					if DEBUG_FORTH_WORDS 
4852						DMARK "CO1" 
4852 f5				push af  
4853 3a 67 48			ld a, (.dmark)  
4856 32 65 ee			ld (debug_mark),a  
4859 3a 68 48			ld a, (.dmark+1)  
485c 32 66 ee			ld (debug_mark+1),a  
485f 3a 69 48			ld a, (.dmark+2)  
4862 32 67 ee			ld (debug_mark+2),a  
4865 18 03			jr .pastdmark  
4867 ..			.dmark: db "CO1"  
486a f1			.pastdmark: pop af  
486b			endm  
# End of macro DMARK
486b						CALLMONITOR 
486b cd 6f ee			call debug_vector  
486e				endm  
# End of macro CALLMONITOR
486e					endif 
486e ed b0				ldir 
4870			 
4870 e1					pop hl 
4871 e5					push hl 
4872 d5					push de 
4873			 
4873			 
4873 3e 00				ld a, 0 
4875 cd 66 11				call strlent 
4878 23					inc hl    ; zer0 
4879 23					inc hl 
487a 06 00				ld b, 0 
487c 4d					ld c, l 
487d d1					pop de 
487e e1					pop hl		 
487f					if DEBUG_FORTH_WORDS 
487f						DMARK "CO2" 
487f f5				push af  
4880 3a 94 48			ld a, (.dmark)  
4883 32 65 ee			ld (debug_mark),a  
4886 3a 95 48			ld a, (.dmark+1)  
4889 32 66 ee			ld (debug_mark+1),a  
488c 3a 96 48			ld a, (.dmark+2)  
488f 32 67 ee			ld (debug_mark+2),a  
4892 18 03			jr .pastdmark  
4894 ..			.dmark: db "CO2"  
4897 f1			.pastdmark: pop af  
4898			endm  
# End of macro DMARK
4898						CALLMONITOR 
4898 cd 6f ee			call debug_vector  
489b				endm  
# End of macro CALLMONITOR
489b					endif 
489b ed b0				ldir 
489d			 
489d			 
489d			 
489d 21 bb e2				ld hl, scratch 
48a0					if DEBUG_FORTH_WORDS 
48a0						DMARK "CO5" 
48a0 f5				push af  
48a1 3a b5 48			ld a, (.dmark)  
48a4 32 65 ee			ld (debug_mark),a  
48a7 3a b6 48			ld a, (.dmark+1)  
48aa 32 66 ee			ld (debug_mark+1),a  
48ad 3a b7 48			ld a, (.dmark+2)  
48b0 32 67 ee			ld (debug_mark+2),a  
48b3 18 03			jr .pastdmark  
48b5 ..			.dmark: db "CO5"  
48b8 f1			.pastdmark: pop af  
48b9			endm  
# End of macro DMARK
48b9						CALLMONITOR 
48b9 cd 6f ee			call debug_vector  
48bc				endm  
# End of macro CALLMONITOR
48bc					endif 
48bc			 
48bc cd fe 1b				call forth_push_str 
48bf			 
48bf			 
48bf			 
48bf			 
48bf				       NEXTW 
48bf c3 80 1f			jp macro_next 
48c2				endm 
# End of macro NEXTW
48c2			 
48c2			 
48c2			.FIND: 
48c2				CWHEAD .LEN 55 "FIND" 4 WORD_FLAG_CODE 
48c2 4b				db WORD_SYS_CORE+55             
48c3 80 49			dw .LEN            
48c5 05				db 4 + 1 
48c6 .. 00			db "FIND",0              
48cb				endm 
# End of macro CWHEAD
48cb			; | FIND ( s c -- s u ) Search the string s for the char c and push the position of the first occurance to TOS | DONE 
48cb			 
48cb					if DEBUG_FORTH_WORDS_KEY 
48cb						DMARK "FND" 
48cb f5				push af  
48cc 3a e0 48			ld a, (.dmark)  
48cf 32 65 ee			ld (debug_mark),a  
48d2 3a e1 48			ld a, (.dmark+1)  
48d5 32 66 ee			ld (debug_mark+1),a  
48d8 3a e2 48			ld a, (.dmark+2)  
48db 32 67 ee			ld (debug_mark+2),a  
48de 18 03			jr .pastdmark  
48e0 ..			.dmark: db "FND"  
48e3 f1			.pastdmark: pop af  
48e4			endm  
# End of macro DMARK
48e4						CALLMONITOR 
48e4 cd 6f ee			call debug_vector  
48e7				endm  
# End of macro CALLMONITOR
48e7					endif 
48e7			 
48e7			; TODO check string type 
48e7					FORTH_DSP_VALUE 
48e7 cd 7e 1d			call macro_forth_dsp_value 
48ea				endm 
# End of macro FORTH_DSP_VALUE
48ea			 
48ea e5					push hl    
48eb 7e					ld a,(hl)    ; char to find   
48ec			; TODO change char to substr 
48ec			 
48ec f5					push af 
48ed					 
48ed			 
48ed			 
48ed					if DEBUG_FORTH_WORDS 
48ed						DMARK "FN1" 
48ed f5				push af  
48ee 3a 02 49			ld a, (.dmark)  
48f1 32 65 ee			ld (debug_mark),a  
48f4 3a 03 49			ld a, (.dmark+1)  
48f7 32 66 ee			ld (debug_mark+1),a  
48fa 3a 04 49			ld a, (.dmark+2)  
48fd 32 67 ee			ld (debug_mark+2),a  
4900 18 03			jr .pastdmark  
4902 ..			.dmark: db "FN1"  
4905 f1			.pastdmark: pop af  
4906			endm  
# End of macro DMARK
4906						CALLMONITOR 
4906 cd 6f ee			call debug_vector  
4909				endm  
# End of macro CALLMONITOR
4909					endif 
4909			 
4909					FORTH_DSP_POP 
4909 cd 4d 1e			call macro_forth_dsp_pop 
490c				endm 
# End of macro FORTH_DSP_POP
490c			 
490c					; string to search 
490c			 
490c					FORTH_DSP_VALUE 
490c cd 7e 1d			call macro_forth_dsp_value 
490f				endm 
# End of macro FORTH_DSP_VALUE
490f			 
490f d1					pop de  ; d is char to find  
4910			 
4910					if DEBUG_FORTH_WORDS 
4910						DMARK "FN2" 
4910 f5				push af  
4911 3a 25 49			ld a, (.dmark)  
4914 32 65 ee			ld (debug_mark),a  
4917 3a 26 49			ld a, (.dmark+1)  
491a 32 66 ee			ld (debug_mark+1),a  
491d 3a 27 49			ld a, (.dmark+2)  
4920 32 67 ee			ld (debug_mark+2),a  
4923 18 03			jr .pastdmark  
4925 ..			.dmark: db "FN2"  
4928 f1			.pastdmark: pop af  
4929			endm  
# End of macro DMARK
4929						CALLMONITOR 
4929 cd 6f ee			call debug_vector  
492c				endm  
# End of macro CALLMONITOR
492c					endif 
492c					 
492c 01 00 00				ld bc, 0 
492f 7e			.findchar:      ld a,(hl) 
4930 fe 00				cp 0   		 
4932 28 27				jr z, .finddone     
4934 ba					cp d 
4935 28 20				jr z, .foundchar 
4937 03					inc bc 
4938 23					inc hl 
4939					if DEBUG_FORTH_WORDS 
4939						DMARK "FN3" 
4939 f5				push af  
493a 3a 4e 49			ld a, (.dmark)  
493d 32 65 ee			ld (debug_mark),a  
4940 3a 4f 49			ld a, (.dmark+1)  
4943 32 66 ee			ld (debug_mark+1),a  
4946 3a 50 49			ld a, (.dmark+2)  
4949 32 67 ee			ld (debug_mark+2),a  
494c 18 03			jr .pastdmark  
494e ..			.dmark: db "FN3"  
4951 f1			.pastdmark: pop af  
4952			endm  
# End of macro DMARK
4952						CALLMONITOR 
4952 cd 6f ee			call debug_vector  
4955				endm  
# End of macro CALLMONITOR
4955					endif 
4955 18 d8				jr .findchar 
4957			 
4957			 
4957 c5			.foundchar:	push bc 
4958 e1					pop hl 
4959 18 03				jr .findexit 
495b			 
495b			 
495b							 
495b			 
495b			.finddone:     ; got to end of string with no find 
495b 21 00 00				ld hl, 0 
495e			.findexit: 
495e			 
495e					if DEBUG_FORTH_WORDS 
495e						DMARK "FNd" 
495e f5				push af  
495f 3a 73 49			ld a, (.dmark)  
4962 32 65 ee			ld (debug_mark),a  
4965 3a 74 49			ld a, (.dmark+1)  
4968 32 66 ee			ld (debug_mark+1),a  
496b 3a 75 49			ld a, (.dmark+2)  
496e 32 67 ee			ld (debug_mark+2),a  
4971 18 03			jr .pastdmark  
4973 ..			.dmark: db "FNd"  
4976 f1			.pastdmark: pop af  
4977			endm  
# End of macro DMARK
4977						CALLMONITOR 
4977 cd 6f ee			call debug_vector  
497a				endm  
# End of macro CALLMONITOR
497a					endif 
497a cd 90 1b			call forth_push_numhl 
497d			 
497d				       NEXTW 
497d c3 80 1f			jp macro_next 
4980				endm 
# End of macro NEXTW
4980			 
4980			.LEN: 
4980				CWHEAD .ASC 56 "COUNT" 5 WORD_FLAG_CODE 
4980 4c				db WORD_SYS_CORE+56             
4981 ea 49			dw .ASC            
4983 06				db 5 + 1 
4984 .. 00			db "COUNT",0              
498a				endm 
# End of macro CWHEAD
498a			; | COUNT (  str -- str u1 ) Push the length of the string str on TOS as u1 | DONE 
498a			 
498a					if DEBUG_FORTH_WORDS_KEY 
498a						DMARK "CNT" 
498a f5				push af  
498b 3a 9f 49			ld a, (.dmark)  
498e 32 65 ee			ld (debug_mark),a  
4991 3a a0 49			ld a, (.dmark+1)  
4994 32 66 ee			ld (debug_mark+1),a  
4997 3a a1 49			ld a, (.dmark+2)  
499a 32 67 ee			ld (debug_mark+2),a  
499d 18 03			jr .pastdmark  
499f ..			.dmark: db "CNT"  
49a2 f1			.pastdmark: pop af  
49a3			endm  
# End of macro DMARK
49a3						CALLMONITOR 
49a3 cd 6f ee			call debug_vector  
49a6				endm  
# End of macro CALLMONITOR
49a6					endif 
49a6			; TODO check string type 
49a6					FORTH_DSP_VALUE 
49a6 cd 7e 1d			call macro_forth_dsp_value 
49a9				endm 
# End of macro FORTH_DSP_VALUE
49a9			 
49a9			 
49a9					if DEBUG_FORTH_WORDS 
49a9						DMARK "CN?" 
49a9 f5				push af  
49aa 3a be 49			ld a, (.dmark)  
49ad 32 65 ee			ld (debug_mark),a  
49b0 3a bf 49			ld a, (.dmark+1)  
49b3 32 66 ee			ld (debug_mark+1),a  
49b6 3a c0 49			ld a, (.dmark+2)  
49b9 32 67 ee			ld (debug_mark+2),a  
49bc 18 03			jr .pastdmark  
49be ..			.dmark: db "CN?"  
49c1 f1			.pastdmark: pop af  
49c2			endm  
# End of macro DMARK
49c2						CALLMONITOR 
49c2 cd 6f ee			call debug_vector  
49c5				endm  
# End of macro CALLMONITOR
49c5					endif 
49c5 cd 5b 11				call strlenz 
49c8					if DEBUG_FORTH_WORDS 
49c8						DMARK "CNl" 
49c8 f5				push af  
49c9 3a dd 49			ld a, (.dmark)  
49cc 32 65 ee			ld (debug_mark),a  
49cf 3a de 49			ld a, (.dmark+1)  
49d2 32 66 ee			ld (debug_mark+1),a  
49d5 3a df 49			ld a, (.dmark+2)  
49d8 32 67 ee			ld (debug_mark+2),a  
49db 18 03			jr .pastdmark  
49dd ..			.dmark: db "CNl"  
49e0 f1			.pastdmark: pop af  
49e1			endm  
# End of macro DMARK
49e1						CALLMONITOR 
49e1 cd 6f ee			call debug_vector  
49e4				endm  
# End of macro CALLMONITOR
49e4					endif 
49e4			 
49e4 cd 90 1b				call forth_push_numhl 
49e7			 
49e7			 
49e7			 
49e7				       NEXTW 
49e7 c3 80 1f			jp macro_next 
49ea				endm 
# End of macro NEXTW
49ea			.ASC: 
49ea				CWHEAD .CHR 57 "ASC" 3 WORD_FLAG_CODE 
49ea 4d				db WORD_SYS_CORE+57             
49eb 58 4a			dw .CHR            
49ed 04				db 3 + 1 
49ee .. 00			db "ASC",0              
49f2				endm 
# End of macro CWHEAD
49f2			; | ASC ( u -- n ) Get the ASCII value of the first character of the string on TOS | DONE 
49f2					if DEBUG_FORTH_WORDS_KEY 
49f2						DMARK "ASC" 
49f2 f5				push af  
49f3 3a 07 4a			ld a, (.dmark)  
49f6 32 65 ee			ld (debug_mark),a  
49f9 3a 08 4a			ld a, (.dmark+1)  
49fc 32 66 ee			ld (debug_mark+1),a  
49ff 3a 09 4a			ld a, (.dmark+2)  
4a02 32 67 ee			ld (debug_mark+2),a  
4a05 18 03			jr .pastdmark  
4a07 ..			.dmark: db "ASC"  
4a0a f1			.pastdmark: pop af  
4a0b			endm  
# End of macro DMARK
4a0b						CALLMONITOR 
4a0b cd 6f ee			call debug_vector  
4a0e				endm  
# End of macro CALLMONITOR
4a0e					endif 
4a0e					FORTH_DSP_VALUE 
4a0e cd 7e 1d			call macro_forth_dsp_value 
4a11				endm 
# End of macro FORTH_DSP_VALUE
4a11					;v5 FORTH_DSP_VALUE 
4a11			;		inc hl      ; now at start of numeric as string 
4a11			 
4a11 e5					push hl 
4a12			 
4a12					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4a12 cd 4d 1e			call macro_forth_dsp_pop 
4a15				endm 
# End of macro FORTH_DSP_POP
4a15			 
4a15 e1					pop hl 
4a16			 
4a16					if DEBUG_FORTH_WORDS 
4a16						DMARK "AS1" 
4a16 f5				push af  
4a17 3a 2b 4a			ld a, (.dmark)  
4a1a 32 65 ee			ld (debug_mark),a  
4a1d 3a 2c 4a			ld a, (.dmark+1)  
4a20 32 66 ee			ld (debug_mark+1),a  
4a23 3a 2d 4a			ld a, (.dmark+2)  
4a26 32 67 ee			ld (debug_mark+2),a  
4a29 18 03			jr .pastdmark  
4a2b ..			.dmark: db "AS1"  
4a2e f1			.pastdmark: pop af  
4a2f			endm  
# End of macro DMARK
4a2f						CALLMONITOR 
4a2f cd 6f ee			call debug_vector  
4a32				endm  
# End of macro CALLMONITOR
4a32					endif 
4a32					; push the content of a onto the stack as a value 
4a32			 
4a32 7e					ld a,(hl)   ; get char 
4a33 26 00				ld h,0 
4a35 6f					ld l,a 
4a36					if DEBUG_FORTH_WORDS 
4a36						DMARK "AS2" 
4a36 f5				push af  
4a37 3a 4b 4a			ld a, (.dmark)  
4a3a 32 65 ee			ld (debug_mark),a  
4a3d 3a 4c 4a			ld a, (.dmark+1)  
4a40 32 66 ee			ld (debug_mark+1),a  
4a43 3a 4d 4a			ld a, (.dmark+2)  
4a46 32 67 ee			ld (debug_mark+2),a  
4a49 18 03			jr .pastdmark  
4a4b ..			.dmark: db "AS2"  
4a4e f1			.pastdmark: pop af  
4a4f			endm  
# End of macro DMARK
4a4f						CALLMONITOR 
4a4f cd 6f ee			call debug_vector  
4a52				endm  
# End of macro CALLMONITOR
4a52					endif 
4a52 cd 90 1b				call forth_push_numhl 
4a55			 
4a55				       NEXTW 
4a55 c3 80 1f			jp macro_next 
4a58				endm 
# End of macro NEXTW
4a58			 
4a58			.CHR: 
4a58				CWHEAD .ENDSTR 57 "CHR" 3 WORD_FLAG_CODE 
4a58 4d				db WORD_SYS_CORE+57             
4a59 94 4a			dw .ENDSTR            
4a5b 04				db 3 + 1 
4a5c .. 00			db "CHR",0              
4a60				endm 
# End of macro CWHEAD
4a60			; | CHR ( u -- n ) The ASCII character value of u is turned into a string n on the stack | DONE 
4a60					if DEBUG_FORTH_WORDS_KEY 
4a60						DMARK "CHR" 
4a60 f5				push af  
4a61 3a 75 4a			ld a, (.dmark)  
4a64 32 65 ee			ld (debug_mark),a  
4a67 3a 76 4a			ld a, (.dmark+1)  
4a6a 32 66 ee			ld (debug_mark+1),a  
4a6d 3a 77 4a			ld a, (.dmark+2)  
4a70 32 67 ee			ld (debug_mark+2),a  
4a73 18 03			jr .pastdmark  
4a75 ..			.dmark: db "CHR"  
4a78 f1			.pastdmark: pop af  
4a79			endm  
# End of macro DMARK
4a79						CALLMONITOR 
4a79 cd 6f ee			call debug_vector  
4a7c				endm  
# End of macro CALLMONITOR
4a7c					endif 
4a7c					FORTH_DSP_VALUEHL 
4a7c cd 95 1d			call macro_dsp_valuehl 
4a7f				endm 
# End of macro FORTH_DSP_VALUEHL
4a7f			 
4a7f					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4a7f cd 4d 1e			call macro_forth_dsp_pop 
4a82				endm 
# End of macro FORTH_DSP_POP
4a82			 
4a82					; save asci byte as a zero term string and push string 
4a82			 
4a82 7d					ld a,l 
4a83 32 bb e2				ld (scratch), a 
4a86			 
4a86 3e 00				ld a, 0 
4a88 32 bc e2				ld (scratch+1), a 
4a8b			 
4a8b 21 bb e2				ld hl, scratch 
4a8e cd fe 1b				call forth_push_str 
4a91			 
4a91			 
4a91				       NEXTW 
4a91 c3 80 1f			jp macro_next 
4a94				endm 
# End of macro NEXTW
4a94			 
4a94			 
4a94			 
4a94			 
4a94			.ENDSTR: 
4a94			; eof 
4a94			 
# End of file forth_words_str.asm
4a94			include "forth_words_key.asm" 
4a94			 
4a94			; | ## Keyboard Words 
4a94			 
4a94			.KEY: 
4a94				CWHEAD .KEYDB 42 "KEY" 3 WORD_FLAG_CODE 
4a94 3e				db WORD_SYS_CORE+42             
4a95 c4 4a			dw .KEYDB            
4a97 04				db 3 + 1 
4a98 .. 00			db "KEY",0              
4a9c				endm 
# End of macro CWHEAD
4a9c			; | KEY ( -- u ) A non-blocking read of keypress | DONE 
4a9c			; | | The ASCII key (or key code) is pushed to stack. If no key is currently held down then push a 0 
4a9c			; | | Can use something like this to process: 
4a9c			; | | > repeat active . key ?dup if emit then #1 until  
4a9c			 
4a9c					if DEBUG_FORTH_WORDS_KEY 
4a9c						DMARK "KEY" 
4a9c f5				push af  
4a9d 3a b1 4a			ld a, (.dmark)  
4aa0 32 65 ee			ld (debug_mark),a  
4aa3 3a b2 4a			ld a, (.dmark+1)  
4aa6 32 66 ee			ld (debug_mark+1),a  
4aa9 3a b3 4a			ld a, (.dmark+2)  
4aac 32 67 ee			ld (debug_mark+2),a  
4aaf 18 03			jr .pastdmark  
4ab1 ..			.dmark: db "KEY"  
4ab4 f1			.pastdmark: pop af  
4ab5			endm  
# End of macro DMARK
4ab5						CALLMONITOR 
4ab5 cd 6f ee			call debug_vector  
4ab8				endm  
# End of macro CALLMONITOR
4ab8					endif 
4ab8			; TODO currently waits 
4ab8 cd 00 62				call cinndb 
4abb					;call cin_wait 
4abb 6f					ld l, a 
4abc 26 00				ld h, 0 
4abe cd 90 1b				call forth_push_numhl 
4ac1					NEXTW 
4ac1 c3 80 1f			jp macro_next 
4ac4				endm 
# End of macro NEXTW
4ac4			.KEYDB: 
4ac4				CWHEAD .WAITK 42 "KEYDB" 5 WORD_FLAG_CODE 
4ac4 3e				db WORD_SYS_CORE+42             
4ac5 f6 4a			dw .WAITK            
4ac7 06				db 5 + 1 
4ac8 .. 00			db "KEYDB",0              
4ace				endm 
# End of macro CWHEAD
4ace			; | KEYDB ( -- u ) A non-blocking read of keypress with key release debounce | DONE 
4ace			; | | The ASCII key (or key code) is pushed to stack. If no key is currently held down then push a 0 
4ace			; | | Can use something like this to process: 
4ace			; | | > repeat active . key ?dup if emit then #1 until  
4ace			 
4ace					if DEBUG_FORTH_WORDS_KEY 
4ace						DMARK "KEB" 
4ace f5				push af  
4acf 3a e3 4a			ld a, (.dmark)  
4ad2 32 65 ee			ld (debug_mark),a  
4ad5 3a e4 4a			ld a, (.dmark+1)  
4ad8 32 66 ee			ld (debug_mark+1),a  
4adb 3a e5 4a			ld a, (.dmark+2)  
4ade 32 67 ee			ld (debug_mark+2),a  
4ae1 18 03			jr .pastdmark  
4ae3 ..			.dmark: db "KEB"  
4ae6 f1			.pastdmark: pop af  
4ae7			endm  
# End of macro DMARK
4ae7						CALLMONITOR 
4ae7 cd 6f ee			call debug_vector  
4aea				endm  
# End of macro CALLMONITOR
4aea					endif 
4aea			; TODO currently waits 
4aea cd 00 62				call cin 
4aed					;call cin_wait 
4aed 6f					ld l, a 
4aee 26 00				ld h, 0 
4af0 cd 90 1b				call forth_push_numhl 
4af3					NEXTW 
4af3 c3 80 1f			jp macro_next 
4af6				endm 
# End of macro NEXTW
4af6			.WAITK: 
4af6				CWHEAD .ACCEPT 43 "WAITK" 5 WORD_FLAG_CODE 
4af6 3f				db WORD_SYS_CORE+43             
4af7 28 4b			dw .ACCEPT            
4af9 06				db 5 + 1 
4afa .. 00			db "WAITK",0              
4b00				endm 
# End of macro CWHEAD
4b00			; | WAITK ( -- w ) Wait for keypress TOS is key press | DONE 
4b00					if DEBUG_FORTH_WORDS_KEY 
4b00						DMARK "WAI" 
4b00 f5				push af  
4b01 3a 15 4b			ld a, (.dmark)  
4b04 32 65 ee			ld (debug_mark),a  
4b07 3a 16 4b			ld a, (.dmark+1)  
4b0a 32 66 ee			ld (debug_mark+1),a  
4b0d 3a 17 4b			ld a, (.dmark+2)  
4b10 32 67 ee			ld (debug_mark+2),a  
4b13 18 03			jr .pastdmark  
4b15 ..			.dmark: db "WAI"  
4b18 f1			.pastdmark: pop af  
4b19			endm  
# End of macro DMARK
4b19						CALLMONITOR 
4b19 cd 6f ee			call debug_vector  
4b1c				endm  
# End of macro CALLMONITOR
4b1c					endif 
4b1c cd f8 61				call cin_wait 
4b1f 6f					ld l, a 
4b20 26 00				ld h, 0 
4b22 cd 90 1b				call forth_push_numhl 
4b25					NEXTW 
4b25 c3 80 1f			jp macro_next 
4b28				endm 
# End of macro NEXTW
4b28			.ACCEPT: 
4b28				CWHEAD .EDIT 44 "ACCEPT" 6 WORD_FLAG_CODE 
4b28 40				db WORD_SYS_CORE+44             
4b29 86 4b			dw .EDIT            
4b2b 07				db 6 + 1 
4b2c .. 00			db "ACCEPT",0              
4b33				endm 
# End of macro CWHEAD
4b33			; | ACCEPT ( -- w ) Prompt for text input and push pointer to string | DONE 
4b33					; TODO crashes on push 
4b33					if DEBUG_FORTH_WORDS_KEY 
4b33						DMARK "ACC" 
4b33 f5				push af  
4b34 3a 48 4b			ld a, (.dmark)  
4b37 32 65 ee			ld (debug_mark),a  
4b3a 3a 49 4b			ld a, (.dmark+1)  
4b3d 32 66 ee			ld (debug_mark+1),a  
4b40 3a 4a 4b			ld a, (.dmark+2)  
4b43 32 67 ee			ld (debug_mark+2),a  
4b46 18 03			jr .pastdmark  
4b48 ..			.dmark: db "ACC"  
4b4b f1			.pastdmark: pop af  
4b4c			endm  
# End of macro DMARK
4b4c						CALLMONITOR 
4b4c cd 6f ee			call debug_vector  
4b4f				endm  
# End of macro CALLMONITOR
4b4f					endif 
4b4f 21 b9 e4				ld hl, os_input 
4b52 3e 00				ld a, 0 
4b54 77					ld (hl),a 
4b55 3a 58 ea				ld a,(f_cursor_ptr) 
4b58 16 64				ld d, 100 
4b5a 0e 00				ld c, 0 
4b5c 1e 28				ld e, 40 
4b5e cd 22 0e				call input_str 
4b61					; TODO perhaps do a type check and wrap in quotes if not a number 
4b61 21 b9 e4				ld hl, os_input 
4b64					if DEBUG_FORTH_WORDS 
4b64						DMARK "AC1" 
4b64 f5				push af  
4b65 3a 79 4b			ld a, (.dmark)  
4b68 32 65 ee			ld (debug_mark),a  
4b6b 3a 7a 4b			ld a, (.dmark+1)  
4b6e 32 66 ee			ld (debug_mark+1),a  
4b71 3a 7b 4b			ld a, (.dmark+2)  
4b74 32 67 ee			ld (debug_mark+2),a  
4b77 18 03			jr .pastdmark  
4b79 ..			.dmark: db "AC1"  
4b7c f1			.pastdmark: pop af  
4b7d			endm  
# End of macro DMARK
4b7d						CALLMONITOR 
4b7d cd 6f ee			call debug_vector  
4b80				endm  
# End of macro CALLMONITOR
4b80					endif 
4b80 cd fe 1b				call forth_push_str 
4b83					NEXTW 
4b83 c3 80 1f			jp macro_next 
4b86				endm 
# End of macro NEXTW
4b86			 
4b86			.EDIT: 
4b86				CWHEAD .DEDIT 44 "EDIT" 4 WORD_FLAG_CODE 
4b86 40				db WORD_SYS_CORE+44             
4b87 28 4c			dw .DEDIT            
4b89 05				db 4 + 1 
4b8a .. 00			db "EDIT",0              
4b8f				endm 
# End of macro CWHEAD
4b8f			; | EDIT ( u -- u ) Takes string on TOS and allows editing of it. Pushes it back once done. | DONE 
4b8f			 
4b8f					; TODO does not copy from stack 
4b8f					if DEBUG_FORTH_WORDS_KEY 
4b8f						DMARK "EDT" 
4b8f f5				push af  
4b90 3a a4 4b			ld a, (.dmark)  
4b93 32 65 ee			ld (debug_mark),a  
4b96 3a a5 4b			ld a, (.dmark+1)  
4b99 32 66 ee			ld (debug_mark+1),a  
4b9c 3a a6 4b			ld a, (.dmark+2)  
4b9f 32 67 ee			ld (debug_mark+2),a  
4ba2 18 03			jr .pastdmark  
4ba4 ..			.dmark: db "EDT"  
4ba7 f1			.pastdmark: pop af  
4ba8			endm  
# End of macro DMARK
4ba8						CALLMONITOR 
4ba8 cd 6f ee			call debug_vector  
4bab				endm  
# End of macro CALLMONITOR
4bab					endif 
4bab			 
4bab					;FORTH_DSP 
4bab					FORTH_DSP_VALUEHL 
4bab cd 95 1d			call macro_dsp_valuehl 
4bae				endm 
# End of macro FORTH_DSP_VALUEHL
4bae			;		inc hl    ; TODO do type check 
4bae			 
4bae			;		call get_word_hl 
4bae e5					push hl 
4baf					if DEBUG_FORTH_WORDS 
4baf						DMARK "EDp" 
4baf f5				push af  
4bb0 3a c4 4b			ld a, (.dmark)  
4bb3 32 65 ee			ld (debug_mark),a  
4bb6 3a c5 4b			ld a, (.dmark+1)  
4bb9 32 66 ee			ld (debug_mark+1),a  
4bbc 3a c6 4b			ld a, (.dmark+2)  
4bbf 32 67 ee			ld (debug_mark+2),a  
4bc2 18 03			jr .pastdmark  
4bc4 ..			.dmark: db "EDp"  
4bc7 f1			.pastdmark: pop af  
4bc8			endm  
# End of macro DMARK
4bc8						CALLMONITOR 
4bc8 cd 6f ee			call debug_vector  
4bcb				endm  
# End of macro CALLMONITOR
4bcb					endif 
4bcb				;	ld a, 0 
4bcb cd 5b 11				call strlenz 
4bce 23					inc hl 
4bcf			 
4bcf 06 00				ld b, 0 
4bd1 4d					ld c, l 
4bd2			 
4bd2 e1					pop hl 
4bd3 11 b9 e4				ld de, os_input 
4bd6					if DEBUG_FORTH_WORDS_KEY 
4bd6						DMARK "EDc" 
4bd6 f5				push af  
4bd7 3a eb 4b			ld a, (.dmark)  
4bda 32 65 ee			ld (debug_mark),a  
4bdd 3a ec 4b			ld a, (.dmark+1)  
4be0 32 66 ee			ld (debug_mark+1),a  
4be3 3a ed 4b			ld a, (.dmark+2)  
4be6 32 67 ee			ld (debug_mark+2),a  
4be9 18 03			jr .pastdmark  
4beb ..			.dmark: db "EDc"  
4bee f1			.pastdmark: pop af  
4bef			endm  
# End of macro DMARK
4bef						CALLMONITOR 
4bef cd 6f ee			call debug_vector  
4bf2				endm  
# End of macro CALLMONITOR
4bf2					endif 
4bf2 ed b0				ldir 
4bf4			 
4bf4			 
4bf4 21 b9 e4				ld hl, os_input 
4bf7					;ld a, 0 
4bf7					;ld (hl),a 
4bf7 3a 58 ea				ld a,(f_cursor_ptr) 
4bfa 16 64				ld d, 100 
4bfc 0e 00				ld c, 0 
4bfe 1e 28				ld e, 40 
4c00 cd 22 0e				call input_str 
4c03					; TODO perhaps do a type check and wrap in quotes if not a number 
4c03 21 b9 e4				ld hl, os_input 
4c06					if DEBUG_FORTH_WORDS 
4c06						DMARK "ED1" 
4c06 f5				push af  
4c07 3a 1b 4c			ld a, (.dmark)  
4c0a 32 65 ee			ld (debug_mark),a  
4c0d 3a 1c 4c			ld a, (.dmark+1)  
4c10 32 66 ee			ld (debug_mark+1),a  
4c13 3a 1d 4c			ld a, (.dmark+2)  
4c16 32 67 ee			ld (debug_mark+2),a  
4c19 18 03			jr .pastdmark  
4c1b ..			.dmark: db "ED1"  
4c1e f1			.pastdmark: pop af  
4c1f			endm  
# End of macro DMARK
4c1f						CALLMONITOR 
4c1f cd 6f ee			call debug_vector  
4c22				endm  
# End of macro CALLMONITOR
4c22					endif 
4c22 cd fe 1b				call forth_push_str 
4c25					NEXTW 
4c25 c3 80 1f			jp macro_next 
4c28				endm 
# End of macro NEXTW
4c28			 
4c28			.DEDIT: 
4c28				CWHEAD .ENDKEY 44 "DEDIT" 5 WORD_FLAG_CODE 
4c28 40				db WORD_SYS_CORE+44             
4c29 8a 4c			dw .ENDKEY            
4c2b 06				db 5 + 1 
4c2c .. 00			db "DEDIT",0              
4c32				endm 
# End of macro CWHEAD
4c32			; | DEDIT ( ptr --  ) Takes an address for direct editing in memory. | DONE 
4c32			 
4c32					; TODO does not copy from stack 
4c32					if DEBUG_FORTH_WORDS_KEY 
4c32						DMARK "DED" 
4c32 f5				push af  
4c33 3a 47 4c			ld a, (.dmark)  
4c36 32 65 ee			ld (debug_mark),a  
4c39 3a 48 4c			ld a, (.dmark+1)  
4c3c 32 66 ee			ld (debug_mark+1),a  
4c3f 3a 49 4c			ld a, (.dmark+2)  
4c42 32 67 ee			ld (debug_mark+2),a  
4c45 18 03			jr .pastdmark  
4c47 ..			.dmark: db "DED"  
4c4a f1			.pastdmark: pop af  
4c4b			endm  
# End of macro DMARK
4c4b						CALLMONITOR 
4c4b cd 6f ee			call debug_vector  
4c4e				endm  
# End of macro CALLMONITOR
4c4e					endif 
4c4e			 
4c4e					;FORTH_DSP 
4c4e					FORTH_DSP_VALUEHL 
4c4e cd 95 1d			call macro_dsp_valuehl 
4c51				endm 
# End of macro FORTH_DSP_VALUEHL
4c51			;		inc hl    ; TODO do type check 
4c51			 
4c51			;		call get_word_hl 
4c51 e5					push hl 
4c52 e5					push hl 
4c53					FORTH_DSP_POP 
4c53 cd 4d 1e			call macro_forth_dsp_pop 
4c56				endm 
# End of macro FORTH_DSP_POP
4c56 e1					pop hl 
4c57					if DEBUG_FORTH_WORDS 
4c57						DMARK "EDp" 
4c57 f5				push af  
4c58 3a 6c 4c			ld a, (.dmark)  
4c5b 32 65 ee			ld (debug_mark),a  
4c5e 3a 6d 4c			ld a, (.dmark+1)  
4c61 32 66 ee			ld (debug_mark+1),a  
4c64 3a 6e 4c			ld a, (.dmark+2)  
4c67 32 67 ee			ld (debug_mark+2),a  
4c6a 18 03			jr .pastdmark  
4c6c ..			.dmark: db "EDp"  
4c6f f1			.pastdmark: pop af  
4c70			endm  
# End of macro DMARK
4c70						CALLMONITOR 
4c70 cd 6f ee			call debug_vector  
4c73				endm  
# End of macro CALLMONITOR
4c73					endif 
4c73				;	ld a, 0 
4c73 cd 5b 11				call strlenz 
4c76 23					inc hl 
4c77			 
4c77 06 00				ld b, 0 
4c79 4d					ld c, l 
4c7a			 
4c7a e1					pop hl 
4c7b			 
4c7b					;ld a, 0 
4c7b					;ld (hl),a 
4c7b 3a 58 ea				ld a,(f_cursor_ptr) 
4c7e 16 64				ld d, 100 
4c80 0e 00				ld c, 0 
4c82 1e 28				ld e, 40 
4c84 cd 22 0e				call input_str 
4c87					; TODO perhaps do a type check and wrap in quotes if not a number 
4c87					NEXTW 
4c87 c3 80 1f			jp macro_next 
4c8a				endm 
# End of macro NEXTW
4c8a			 
4c8a			 
4c8a			.ENDKEY: 
4c8a			; eof 
4c8a			 
# End of file forth_words_key.asm
4c8a			include "forth_words_const.asm" 
4c8a			 
4c8a			; | ## Constants (i.e. Useful memory addresses that can set or get features) 
4c8a			 
4c8a			 
4c8a			.SPITIME: 
4c8a				CWHEAD .VA 99 "SPITIME" 7 WORD_FLAG_CODE 
4c8a 77				db WORD_SYS_CORE+99             
4c8b 9f 4c			dw .VA            
4c8d 08				db 7 + 1 
4c8e .. 00			db "SPITIME",0              
4c96				endm 
# End of macro CWHEAD
4c96			; | SPITIME ( -- u1 )   Pushes address of the SPI pulse counter/delay to stack | DONE 
4c96			; 
4c96			; | | If using BANK devices then leave as is. 
4c96			; | | Only really useful for the CARTDEV where other devices may be far too slow. In particular 
4c96			; | | the multiplexing of the PicoSPINet addon which might not be running fast enough for all of the nodes 
4c96			 
4c96 21 5e ea				ld hl, spi_clktime  
4c99 cd 90 1b				call forth_push_numhl 
4c9c			 
4c9c					NEXTW 
4c9c c3 80 1f			jp macro_next 
4c9f				endm 
# End of macro NEXTW
4c9f			 
4c9f			 
4c9f			.VA: 
4c9f				CWHEAD .SYMBOL 99 "VA" 2 WORD_FLAG_CODE 
4c9f 77				db WORD_SYS_CORE+99             
4ca0 af 4c			dw .SYMBOL            
4ca2 03				db 2 + 1 
4ca3 .. 00			db "VA",0              
4ca6				endm 
# End of macro CWHEAD
4ca6			; | VA ( -- u1 )   Pushes address of block of memory used for v1..5 | DONE 
4ca6 21 22 ea				ld hl, cli_var_array 
4ca9 cd 90 1b				call forth_push_numhl 
4cac			 
4cac					NEXTW 
4cac c3 80 1f			jp macro_next 
4caf				endm 
# End of macro NEXTW
4caf			 
4caf			.SYMBOL: 
4caf				CWHEAD .ENDCONST 99 "SYMBOL" 6 WORD_FLAG_CODE 
4caf 77				db WORD_SYS_CORE+99             
4cb0 b9 4d			dw .ENDCONST            
4cb2 07				db 6 + 1 
4cb3 .. 00			db "SYMBOL",0              
4cba				endm 
# End of macro CWHEAD
4cba			; | SYMBOL ( u1 -- )  Get the address of a system symbol from a look up table to TOS  | DONE 
4cba			; | 
4cba			; | | The value is the number reference and the final address is pushed to stack 
4cba			 
4cba			; | | ``` 
4cba			; | | dw sym_table 
4cba			; | | dw nmi_vector 
4cba			; | | dw cli_autodisplay 
4cba			; | | dw cli_data_sp 
4cba			; | | dw cli_data_stack 
4cba			; | | dw cli_loop_sp 
4cba			; | | dw cli_loop_stack 
4cba			; | | dw cli_var_array 
4cba			; | | dw cursor_col 
4cba			; | | dw cursor_ptr 
4cba			; | | ; 10 
4cba			; | | dw cursor_row 
4cba			; | | dw debug_mark 
4cba			; | | dw display_fb0 
4cba			; | | dw display_fb1 
4cba			; | | dw display_fb2 
4cba			; | | dw display_fb3 
4cba			; | | dw display_fb_active 
4cba			; | | dw execscratch 
4cba			; | | dw f_cursor_ptr 
4cba			; | | dw hardware_word 
4cba			; | | ;20 
4cba			; | | dw input_at_cursor 
4cba			; | | dw input_at_pos 
4cba			; | | dw input_cur_flash 
4cba			; | | dw input_cur_onoff 
4cba			; | | dw input_cursor 
4cba			; | | dw input_display_size 
4cba			; | | dw input_len 
4cba			; | | dw input_ptr 
4cba			; | | dw input_size 
4cba			; | | dw input_start 
4cba			; | | ; 30 
4cba			; | | dw input_str 
4cba			; | | dw input_under_cursor 
4cba			; | | dw os_cli_cmd 
4cba			; | | dw os_cur_ptr 
4cba			; | | dw os_current_i 
4cba			; | | dw os_input 
4cba			; | | dw os_last_cmd 
4cba			; | | dw os_last_new_uword 
4cba			; | | dw debug_vector 
4cba			; | | dw os_view_hl 
4cba			; | | ;40 
4cba			; | | dw os_word_scratch 
4cba			; | | dw portbctl 
4cba			; | | dw portbdata 
4cba			; | | dw spi_cartdev 
4cba			; | | dw spi_cartdev2 
4cba			; | | dw spi_clktime 
4cba			; | | dw spi_device 
4cba			; | | dw spi_device_id 
4cba			; | | dw spi_portbyte 
4cba			; | | dw stackstore 
4cba			; | | ; 50 
4cba			; | | if STORAGE_SE 
4cba			; | | dw storage_actl 
4cba			; | | dw storage_adata 
4cba			; | | else 
4cba			; | | dw 0 
4cba			; | | dw 0 
4cba			; | | endif 
4cba			; | | dw storage_append 
4cba			; | | if STORAGE_SE 
4cba			; | | dw storage_bctl 
4cba			; | | else 
4cba			; | | dw 0 
4cba			; | | endif 
4cba			; | | dw store_bank_active 
4cba			; | | dw store_filecache 
4cba			; | | dw store_longread 
4cba			; | | dw store_openaddr 
4cba			; | | dw store_openext 
4cba			; | | dw store_openmaxext 
4cba			; | | ; 60 
4cba			; | | dw store_page 
4cba			; | | dw store_readbuf 
4cba			; | | dw store_readcont 
4cba			; | | dw store_readptr 
4cba			; | | dw store_tmpext 
4cba			; | | dw store_tmpid 
4cba			; | | dw store_tmppageid 
4cba			; | | dw malloc 
4cba			; | | dw free 
4cba			; | | dw cin 
4cba			; | | ; 70 
4cba			; | | dw cin_wait 
4cba			; | | dw forth_push_numhl 
4cba			; | | dw forth_push_str 
4cba			; | | ``` 
4cba			 
4cba					if DEBUG_FORTH_WORDS_KEY 
4cba						DMARK "SYM" 
4cba f5				push af  
4cbb 3a cf 4c			ld a, (.dmark)  
4cbe 32 65 ee			ld (debug_mark),a  
4cc1 3a d0 4c			ld a, (.dmark+1)  
4cc4 32 66 ee			ld (debug_mark+1),a  
4cc7 3a d1 4c			ld a, (.dmark+2)  
4cca 32 67 ee			ld (debug_mark+2),a  
4ccd 18 03			jr .pastdmark  
4ccf ..			.dmark: db "SYM"  
4cd2 f1			.pastdmark: pop af  
4cd3			endm  
# End of macro DMARK
4cd3						CALLMONITOR 
4cd3 cd 6f ee			call debug_vector  
4cd6				endm  
# End of macro CALLMONITOR
4cd6					endif 
4cd6			 
4cd6					FORTH_DSP_VALUEHL 
4cd6 cd 95 1d			call macro_dsp_valuehl 
4cd9				endm 
# End of macro FORTH_DSP_VALUEHL
4cd9			 
4cd9 7d					ld a, l     
4cda			 
4cda			 
4cda					if DEBUG_FORTH_WORDS 
4cda						DMARK "SY1" 
4cda f5				push af  
4cdb 3a ef 4c			ld a, (.dmark)  
4cde 32 65 ee			ld (debug_mark),a  
4ce1 3a f0 4c			ld a, (.dmark+1)  
4ce4 32 66 ee			ld (debug_mark+1),a  
4ce7 3a f1 4c			ld a, (.dmark+2)  
4cea 32 67 ee			ld (debug_mark+2),a  
4ced 18 03			jr .pastdmark  
4cef ..			.dmark: db "SY1"  
4cf2 f1			.pastdmark: pop af  
4cf3			endm  
# End of macro DMARK
4cf3						CALLMONITOR 
4cf3 cd 6f ee			call debug_vector  
4cf6				endm  
# End of macro CALLMONITOR
4cf6					endif 
4cf6					 
4cf6 f5					push af	 
4cf7					FORTH_DSP_POP 
4cf7 cd 4d 1e			call macro_forth_dsp_pop 
4cfa				endm 
# End of macro FORTH_DSP_POP
4cfa f1					pop af 
4cfb			 
4cfb cb 27				sla a  
4cfd				 
4cfd					 
4cfd					if DEBUG_FORTH_WORDS 
4cfd						DMARK "SY" 
4cfd f5				push af  
4cfe 3a 12 4d			ld a, (.dmark)  
4d01 32 65 ee			ld (debug_mark),a  
4d04 3a 13 4d			ld a, (.dmark+1)  
4d07 32 66 ee			ld (debug_mark+1),a  
4d0a 3a 14 4d			ld a, (.dmark+2)  
4d0d 32 67 ee			ld (debug_mark+2),a  
4d10 18 02			jr .pastdmark  
4d12 ..			.dmark: db "SY"  
4d14 f1			.pastdmark: pop af  
4d15			endm  
# End of macro DMARK
4d15						CALLMONITOR 
4d15 cd 6f ee			call debug_vector  
4d18				endm  
# End of macro CALLMONITOR
4d18					endif 
4d18			 
4d18 21 27 4d				ld hl, sym_table 
4d1b cd f5 0d				call addatohl 
4d1e cd 02 1f				call loadwordinhl 
4d21 cd 90 1b				call forth_push_numhl 
4d24			 
4d24			 
4d24				       NEXTW 
4d24 c3 80 1f			jp macro_next 
4d27				endm 
# End of macro NEXTW
4d27			 
4d27			sym_table: 
4d27			 
4d27			; 0 
4d27 27 4d		dw sym_table 
4d29 72 ee		dw nmi_vector 
4d2b 36 ea		dw cli_autodisplay 
4d2d e8 e9		dw cli_data_sp 
4d2f 22 e8		dw cli_data_stack 
4d31 ea e9		dw cli_loop_sp 
4d33 24 e9		dw cli_loop_stack 
4d35 22 ea		dw cli_var_array 
4d37 bf eb		dw cursor_col 
4d39 bd eb		dw cursor_ptr 
4d3b			; 10 
4d3b be eb		dw cursor_row 
4d3d 65 ee		dw debug_mark 
4d3f ab ed		dw display_fb0 
4d41 0a ed		dw display_fb1 
4d43 c8 eb		dw display_fb2 
4d45 69 ec		dw display_fb3 
4d47 c6 eb		dw display_fb_active 
4d49 ba e3		dw execscratch 
4d4b 58 ea		dw f_cursor_ptr 
4d4d 75 ee		dw hardware_word 
4d4f			;20 
4d4f 5c ee		dw input_at_cursor 
4d51 5e ee		dw input_at_pos 
4d53 5a ee		dw input_cur_flash 
4d55 59 ee		dw input_cur_onoff 
4d57 4f ee		dw input_cursor 
4d59 5f ee		dw input_display_size 
4d5b 54 ee		dw input_len 
4d5d 63 ee		dw input_ptr 
4d5f 60 ee		dw input_size 
4d61 61 ee		dw input_start 
4d63			; 30 
4d63 22 0e		dw input_str 
4d65 5d ee		dw input_under_cursor 
4d67 e2 e5		dw os_cli_cmd 
4d69 de e5		dw os_cur_ptr 
4d6b e0 e5		dw os_current_i 
4d6d b9 e4		dw os_input 
4d6f e1 e6		dw os_last_cmd 
4d71 b8 e5		dw os_last_new_uword 
4d73 6f ee		dw debug_vector 
4d75 9d e2		dw os_view_hl 
4d77			;40 
4d77 c0 e5		dw os_word_scratch 
4d79 c3 00		dw portbctl 
4d7b c1 00		dw portbdata 
4d7d 5d ea		dw spi_cartdev 
4d7f 5c ea		dw spi_cartdev2 
4d81 5e ea		dw spi_clktime 
4d83 5a ea		dw spi_device 
4d85 59 ea		dw spi_device_id 
4d87 5b ea		dw spi_portbyte 
4d89 a1 eb		dw stackstore 
4d8b			; 50 
4d8b			if STORAGE_SE 
4d8b			dw storage_actl 
4d8b			dw storage_adata 
4d8b			else 
4d8b 00 00		dw 0 
4d8d 00 00		dw 0 
4d8f			endif 
4d8f 77 09		dw storage_append 
4d91			if STORAGE_SE 
4d91			dw storage_bctl 
4d91			else 
4d91 00 00		dw 0 
4d93			endif 
4d93 8d eb		dw store_bank_active 
4d95 61 ea		dw store_filecache 
4d97 6f ea		dw store_longread 
4d99 65 ea		dw store_openaddr 
4d9b 64 ea		dw store_openext 
4d9d 63 ea		dw store_openmaxext 
4d9f			; 60 
4d9f 74 ea		dw store_page 
4da1 70 ea		dw store_readbuf 
4da3 67 ea		dw store_readcont 
4da5 72 ea		dw store_readptr 
4da7 67 ea		dw store_tmpext 
4da9 68 ea		dw store_tmpid 
4dab 5f ea		dw store_tmppageid 
4dad d0 11		dw malloc 
4daf 9a 12		dw free 
4db1 00 62		dw cin 
4db3			; 70 
4db3 f8 61		dw cin_wait 
4db5 90 1b		dw forth_push_numhl 
4db7 fe 1b		dw forth_push_str 
4db9			 
4db9			 
4db9			.ENDCONST: 
4db9			 
4db9			; eof 
4db9			 
4db9			 
# End of file forth_words_const.asm
4db9			 
4db9			if STORAGE_SE 
4db9			   	include "forth_words_storage.asm" 
4db9			endif 
4db9				include "forth_words_device.asm" 
4db9			; Device related words 
4db9			 
4db9			; | ## Device Words 
4db9			 
4db9			;if SOUND_ENABLE 
4db9			;.NOTE: 
4db9			;	CWHEAD .AFTERSOUND 31 "NOTE" 4 WORD_FLAG_CODE 
4db9			;; NOTE ( ud uf --  )  Plays a note of frequency uf for the duration of ud millseconds  TODO 
4db9			;		if DEBUG_FORTH_WORDS_KEY 
4db9			;			DMARK "NTE" 
4db9			;			CALLMONITOR 
4db9			;		endif 
4db9			; 
4db9			;	 
4db9			; 
4db9			;		NEXTW 
4db9			;.AFTERSOUND: 
4db9			;endif 
4db9			 
4db9			 
4db9			USE_GPIO: equ 0 
4db9			 
4db9			if USE_GPIO 
4db9			.GP1: 
4db9				CWHEAD .GP2 31 "IOIN" 4 WORD_FLAG_CODE 
4db9			;  IOIN ( u1 -- u )    Perform a GPIO read of pin u1 and push result   
4db9					NEXTW 
4db9			.GP2: 
4db9				CWHEAD .GP3 31 "IOOUT" 5 WORD_FLAG_CODE 
4db9			;  IOOUT ( u1 u2 --  )    Perform a GPIO write of pin u1 with pin set to 0 or 1 in u2   
4db9			 
4db9					NEXTW 
4db9			 
4db9			.GP3: 
4db9				CWHEAD .GP4 31 "IOBYTE" 5 WORD_FLAG_CODE 
4db9			;  IOBYTE ( u1 --  )    Perform a GPIO write of byte u1   
4db9			 
4db9					NEXTW 
4db9			 
4db9			.GP4: 
4db9				CWHEAD .SIN 31 "IOSET" 5 WORD_FLAG_CODE 
4db9			;  IOSET ( u1 --  )    Setup GPIO pins for I/O direction. Bit is set for write else read pin   
4db9			 
4db9					NEXTW 
4db9			.SIN: 
4db9			 
4db9			 
4db9			endif 
4db9			 
4db9			 
4db9				CWHEAD .SOUT 31 "IN" 2 WORD_FLAG_CODE 
4db9 33				db WORD_SYS_CORE+31             
4dba ee 4d			dw .SOUT            
4dbc 03				db 2 + 1 
4dbd .. 00			db "IN",0              
4dc0				endm 
# End of macro CWHEAD
4dc0			; | IN ( u1 -- u )    Perform Z80 IN with u1 being the port number. Push result to TOS | TO TEST 
4dc0					if DEBUG_FORTH_WORDS_KEY 
4dc0						DMARK "IN." 
4dc0 f5				push af  
4dc1 3a d5 4d			ld a, (.dmark)  
4dc4 32 65 ee			ld (debug_mark),a  
4dc7 3a d6 4d			ld a, (.dmark+1)  
4dca 32 66 ee			ld (debug_mark+1),a  
4dcd 3a d7 4d			ld a, (.dmark+2)  
4dd0 32 67 ee			ld (debug_mark+2),a  
4dd3 18 03			jr .pastdmark  
4dd5 ..			.dmark: db "IN."  
4dd8 f1			.pastdmark: pop af  
4dd9			endm  
# End of macro DMARK
4dd9						CALLMONITOR 
4dd9 cd 6f ee			call debug_vector  
4ddc				endm  
# End of macro CALLMONITOR
4ddc					endif 
4ddc					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4ddc cd 95 1d			call macro_dsp_valuehl 
4ddf				endm 
# End of macro FORTH_DSP_VALUEHL
4ddf			 
4ddf e5					push hl 
4de0			 
4de0					; destroy value TOS 
4de0			 
4de0					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4de0 cd 4d 1e			call macro_forth_dsp_pop 
4de3				endm 
# End of macro FORTH_DSP_POP
4de3			 
4de3					; one value on hl get other one back 
4de3			 
4de3 c1					pop bc 
4de4			 
4de4					; do the sub 
4de4			;		ex de, hl 
4de4			 
4de4 ed 68				in l,(c) 
4de6			 
4de6					; save it 
4de6			 
4de6 26 00				ld h,0 
4de8			 
4de8					; TODO push value back onto stack for another op etc 
4de8			 
4de8 cd 90 1b				call forth_push_numhl 
4deb					NEXTW 
4deb c3 80 1f			jp macro_next 
4dee				endm 
# End of macro NEXTW
4dee			.SOUT: 
4dee				CWHEAD .SPIO 32 "OUT" 3 WORD_FLAG_CODE 
4dee 34				db WORD_SYS_CORE+32             
4def 41 4e			dw .SPIO            
4df1 04				db 3 + 1 
4df2 .. 00			db "OUT",0              
4df6				endm 
# End of macro CWHEAD
4df6			; | OUT ( u1 u2 -- ) Perform Z80 OUT to port u2 sending byte u1 | DONE 
4df6					if DEBUG_FORTH_WORDS_KEY 
4df6						DMARK "OUT" 
4df6 f5				push af  
4df7 3a 0b 4e			ld a, (.dmark)  
4dfa 32 65 ee			ld (debug_mark),a  
4dfd 3a 0c 4e			ld a, (.dmark+1)  
4e00 32 66 ee			ld (debug_mark+1),a  
4e03 3a 0d 4e			ld a, (.dmark+2)  
4e06 32 67 ee			ld (debug_mark+2),a  
4e09 18 03			jr .pastdmark  
4e0b ..			.dmark: db "OUT"  
4e0e f1			.pastdmark: pop af  
4e0f			endm  
# End of macro DMARK
4e0f						CALLMONITOR 
4e0f cd 6f ee			call debug_vector  
4e12				endm  
# End of macro CALLMONITOR
4e12					endif 
4e12			 
4e12					; get port 
4e12			 
4e12					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4e12 cd 95 1d			call macro_dsp_valuehl 
4e15				endm 
# End of macro FORTH_DSP_VALUEHL
4e15			 
4e15 e5					push hl 
4e16			 
4e16					; destroy value TOS 
4e16			 
4e16					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4e16 cd 4d 1e			call macro_forth_dsp_pop 
4e19				endm 
# End of macro FORTH_DSP_POP
4e19			 
4e19					; get byte to send 
4e19			 
4e19					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4e19 cd 95 1d			call macro_dsp_valuehl 
4e1c				endm 
# End of macro FORTH_DSP_VALUEHL
4e1c			 
4e1c			;		push hl 
4e1c			 
4e1c					; destroy value TOS 
4e1c			 
4e1c					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4e1c cd 4d 1e			call macro_forth_dsp_pop 
4e1f				endm 
# End of macro FORTH_DSP_POP
4e1f			 
4e1f					; one value on hl get other one back 
4e1f			 
4e1f			;		pop hl 
4e1f			 
4e1f c1					pop bc 
4e20			 
4e20					if DEBUG_FORTH_WORDS 
4e20						DMARK "OUT" 
4e20 f5				push af  
4e21 3a 35 4e			ld a, (.dmark)  
4e24 32 65 ee			ld (debug_mark),a  
4e27 3a 36 4e			ld a, (.dmark+1)  
4e2a 32 66 ee			ld (debug_mark+1),a  
4e2d 3a 37 4e			ld a, (.dmark+2)  
4e30 32 67 ee			ld (debug_mark+2),a  
4e33 18 03			jr .pastdmark  
4e35 ..			.dmark: db "OUT"  
4e38 f1			.pastdmark: pop af  
4e39			endm  
# End of macro DMARK
4e39						CALLMONITOR 
4e39 cd 6f ee			call debug_vector  
4e3c				endm  
# End of macro CALLMONITOR
4e3c					endif 
4e3c			 
4e3c ed 69				out (c), l 
4e3e			 
4e3e					NEXTW 
4e3e c3 80 1f			jp macro_next 
4e41				endm 
# End of macro NEXTW
4e41			 
4e41			 
4e41			.SPIO: 
4e41			 
4e41			if STORAGE_SE 
4e41				CWHEAD .SPICEH 61 "SPICEL" 6 WORD_FLAG_CODE 
4e41			; | SPICEL ( -- ) Set SPI CE low for the currently selected device |  DONE 
4e41			 
4e41					call spi_ce_low 
4e41			    NEXTW 
4e41			 
4e41			.SPICEH: 
4e41				CWHEAD .SPIOb 61 "SPICEH" 6 WORD_FLAG_CODE 
4e41			; | SPICEH ( -- ) Set SPI CE high for the currently selected device |  DONE 
4e41			 
4e41					call spi_ce_high 
4e41			    NEXTW 
4e41			 
4e41			 
4e41			.SPIOb: 
4e41			 
4e41				CWHEAD .SPII 61 "SPIO" 4 WORD_FLAG_CODE 
4e41			; | SPIO ( u1 -- ) Send byte u1 to SPI  |  DONE 
4e41			 
4e41					if DEBUG_FORTH_WORDS_KEY 
4e41						DMARK "SPo" 
4e41						CALLMONITOR 
4e41					endif 
4e41					; get port 
4e41			 
4e41			 
4e41					; get byte to send 
4e41			 
4e41					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4e41			 
4e41			;		push hl    ; u1  
4e41			 
4e41					; destroy value TOS 
4e41			 
4e41					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4e41			 
4e41					; one value on hl get other one back 
4e41			 
4e41			;		pop hl   ; u2 - addr 
4e41			 
4e41					; TODO Send SPI byte 
4e41			 
4e41			;		push hl 
4e41			;		call spi_ce_low 
4e41			;		pop hl 
4e41					ld a, l 
4e41					call spi_send_byte 
4e41			;		call spi_ce_high 
4e41			 
4e41					NEXTW 
4e41			 
4e41			.SPII: 
4e41				CWHEAD .SESEL 62 "SPII" 5 WORD_FLAG_CODE 
4e41			; | SPII ( -- u1 ) Get a byte from SPI  | DONE 
4e41					if DEBUG_FORTH_WORDS_KEY 
4e41						DMARK "SPi" 
4e41						CALLMONITOR 
4e41					endif 
4e41			 
4e41					; TODO Get SPI byte 
4e41			 
4e41					call spi_read_byte 
4e41			 
4e41					if DEBUG_FORTH_WORDS 
4e41						DMARK "Si2" 
4e41						CALLMONITOR 
4e41					endif 
4e41					ld h, 0 
4e41					ld l, a 
4e41					if DEBUG_FORTH_WORDS 
4e41						DMARK "Si3" 
4e41						CALLMONITOR 
4e41					endif 
4e41					call forth_push_numhl 
4e41			 
4e41					NEXTW 
4e41			 
4e41			 
4e41			 
4e41			.SESEL: 
4e41				CWHEAD .CARTDEV 82 "BANK" 4 WORD_FLAG_CODE 
4e41			; | BANK ( u1 -- ) Select Serial EEPROM Bank Device at bank address u1 1-5 (disables CARTDEV). Set to zero to disable storage. | DONE 
4e41					if DEBUG_FORTH_WORDS_KEY 
4e41						DMARK "BNK" 
4e41						CALLMONITOR 
4e41					endif 
4e41			 
4e41					ld a, 255 
4e41					ld (spi_cartdev), a 
4e41			 
4e41					; get bank 
4e41			 
4e41					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4e41			 
4e41			;		push hl 
4e41			 
4e41					; destroy value TOS 
4e41			 
4e41					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4e41			 
4e41					; one value on hl get other one back 
4e41			 
4e41			;		pop hl 
4e41			 
4e41			 
4e41					ld c, SPI_CE_HIGH 
4e41					ld b, '0'    ; human readable bank number 
4e41			 
4e41					ld a, l 
4e41			 
4e41					if DEBUG_FORTH_WORDS 
4e41						DMARK "BNK" 
4e41						CALLMONITOR 
4e41					endif 
4e41			 
4e41					; active low 
4e41			 
4e41					cp 0 
4e41					jr z, .bset 
4e41					cp 1 
4e41					jr nz, .b2 
4e41					res 0, c 
4e41					ld b, '1'    ; human readable bank number 
4e41			.b2:		cp 2 
4e41					jr nz, .b3 
4e41					res 1, c 
4e41					ld b, '2'    ; human readable bank number 
4e41			.b3:		cp 3 
4e41					jr nz, .b4 
4e41					res 2, c 
4e41					ld b, '3'    ; human readable bank number 
4e41			.b4:		cp 4 
4e41					jr nz, .b5 
4e41					res 3, c 
4e41					ld b, '4'    ; human readable bank number 
4e41			.b5:		cp 5 
4e41					jr nz, .bset 
4e41					res 4, c 
4e41					ld b, '5'    ; human readable bank number 
4e41			 
4e41			.bset: 
4e41					ld a, c 
4e41					ld (spi_device),a 
4e41					ld a, b 
4e41					ld (spi_device_id),a 
4e41					if DEBUG_FORTH_WORDS 
4e41						DMARK "BN2" 
4e41						CALLMONITOR 
4e41					endif 
4e41			 
4e41					; set default SPI clk pulse time as disabled for BANK use 
4e41			 
4e41					ld a, 0 
4e41					ld (spi_clktime), a 
4e41			 
4e41					NEXTW 
4e41			 
4e41			.CARTDEV: 
4e41				CWHEAD .ENDDEVICE 82 "CARTDEV" 7 WORD_FLAG_CODE 
4e41			; | CARTDEV ( u1 -- ) Select cart device 1-8 (Disables BANK). Set to zero to disable devices. |  DONE 
4e41					if DEBUG_FORTH_WORDS_KEY 
4e41						DMARK "CDV" 
4e41						CALLMONITOR 
4e41					endif 
4e41			 
4e41					; disable se storage bank selection 
4e41			 
4e41					ld a, SPI_CE_HIGH		; ce high 
4e41					ld (spi_device), a 
4e41			 
4e41					; get bank 
4e41			 
4e41					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4e41			 
4e41			;		push hl 
4e41			 
4e41					; destroy value TOS 
4e41			 
4e41					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4e41			 
4e41					; one value on hl get other one back 
4e41			 
4e41			;		pop hl 
4e41			 
4e41					; active low 
4e41			 
4e41					ld c, 255 
4e41			 
4e41					ld a, l 
4e41					if DEBUG_FORTH_WORDS 
4e41						DMARK "CDV" 
4e41						CALLMONITOR 
4e41					endif 
4e41					cp 0 
4e41					jr z, .cset 
4e41					cp 1 
4e41					jr nz, .c2 
4e41					res 0, c 
4e41			.c2:		cp 2 
4e41					jr nz, .c3 
4e41					res 1, c 
4e41			.c3:		cp 3 
4e41					jr nz, .c4 
4e41					res 2, c 
4e41			.c4:		cp 4 
4e41					jr nz, .c5 
4e41					res 3, c 
4e41			.c5:		cp 5 
4e41					jr nz, .c6 
4e41					res 4, c 
4e41			.c6:		cp 6 
4e41					jr nz, .c7 
4e41					res 5, c 
4e41			.c7:		cp 7 
4e41					jr nz, .c8 
4e41					res 6, c 
4e41			.c8:		cp 8 
4e41					jr nz, .cset 
4e41					res 7, c 
4e41			.cset:		ld a, c 
4e41					ld (spi_cartdev),a 
4e41			 
4e41					if DEBUG_FORTH_WORDS 
4e41						DMARK "CD2" 
4e41						CALLMONITOR 
4e41					endif 
4e41			 
4e41					; set default SPI clk pulse time as 10ms for CARTDEV use 
4e41			 
4e41					ld a, $0a 
4e41					ld (spi_clktime), a 
4e41					NEXTW 
4e41			endif 
4e41			 
4e41			.ENDDEVICE: 
4e41			; eof 
4e41			 
# End of file forth_words_device.asm
4e41			 
4e41			; var handler 
4e41			 
4e41			 
4e41			.VARS: 
4e41				CWHEAD .V0 99 "VAR" 3 WORD_FLAG_CODE 
4e41 77				db WORD_SYS_CORE+99             
4e42 f2 4e			dw .V0            
4e44 04				db 3 + 1 
4e45 .. 00			db "VAR",0              
4e49				endm 
# End of macro CWHEAD
4e49			;| VAR ( u1 -- )  Get the address of the variable referenced on TOS  | TO TEST 
4e49			;| 
4e49			;| The variable name should consist of a single letter. e.g. "a" 
4e49			;! If a full string is passed then only the first char is looked at 
4e49			;| Any other char could exceed bounds checks!  
4e49			 
4e49					if DEBUG_FORTH_WORDS_KEY 
4e49						DMARK "VAR" 
4e49 f5				push af  
4e4a 3a 5e 4e			ld a, (.dmark)  
4e4d 32 65 ee			ld (debug_mark),a  
4e50 3a 5f 4e			ld a, (.dmark+1)  
4e53 32 66 ee			ld (debug_mark+1),a  
4e56 3a 60 4e			ld a, (.dmark+2)  
4e59 32 67 ee			ld (debug_mark+2),a  
4e5c 18 03			jr .pastdmark  
4e5e ..			.dmark: db "VAR"  
4e61 f1			.pastdmark: pop af  
4e62			endm  
# End of macro DMARK
4e62						CALLMONITOR 
4e62 cd 6f ee			call debug_vector  
4e65				endm  
# End of macro CALLMONITOR
4e65					endif 
4e65			 
4e65					FORTH_DSP_VALUEHL 
4e65 cd 95 1d			call macro_dsp_valuehl 
4e68				endm 
# End of macro FORTH_DSP_VALUEHL
4e68			 
4e68 7e					ld a, (hl)    ; get first char on of the string 
4e69			 
4e69			 
4e69					if DEBUG_FORTH_WORDS 
4e69						DMARK "VR1" 
4e69 f5				push af  
4e6a 3a 7e 4e			ld a, (.dmark)  
4e6d 32 65 ee			ld (debug_mark),a  
4e70 3a 7f 4e			ld a, (.dmark+1)  
4e73 32 66 ee			ld (debug_mark+1),a  
4e76 3a 80 4e			ld a, (.dmark+2)  
4e79 32 67 ee			ld (debug_mark+2),a  
4e7c 18 03			jr .pastdmark  
4e7e ..			.dmark: db "VR1"  
4e81 f1			.pastdmark: pop af  
4e82			endm  
# End of macro DMARK
4e82						CALLMONITOR 
4e82 cd 6f ee			call debug_vector  
4e85				endm  
# End of macro CALLMONITOR
4e85					endif 
4e85					 
4e85 f5					push af	 
4e86					FORTH_DSP_POP 
4e86 cd 4d 1e			call macro_forth_dsp_pop 
4e89				endm 
# End of macro FORTH_DSP_POP
4e89 f1					pop af 
4e8a			 
4e8a					; convert to upper 
4e8a			 
4e8a cd 6a 10				call to_upper 
4e8d					if DEBUG_FORTH_WORDS 
4e8d						DMARK "Vaa" 
4e8d f5				push af  
4e8e 3a a2 4e			ld a, (.dmark)  
4e91 32 65 ee			ld (debug_mark),a  
4e94 3a a3 4e			ld a, (.dmark+1)  
4e97 32 66 ee			ld (debug_mark+1),a  
4e9a 3a a4 4e			ld a, (.dmark+2)  
4e9d 32 67 ee			ld (debug_mark+2),a  
4ea0 18 03			jr .pastdmark  
4ea2 ..			.dmark: db "Vaa"  
4ea5 f1			.pastdmark: pop af  
4ea6			endm  
# End of macro DMARK
4ea6						CALLMONITOR 
4ea6 cd 6f ee			call debug_vector  
4ea9				endm  
# End of macro CALLMONITOR
4ea9					endif 
4ea9 06 41				ld b, 'A' 
4eab 90					sub b			; set offset 
4eac					if DEBUG_FORTH_WORDS 
4eac						DMARK "Vbb" 
4eac f5				push af  
4ead 3a c1 4e			ld a, (.dmark)  
4eb0 32 65 ee			ld (debug_mark),a  
4eb3 3a c2 4e			ld a, (.dmark+1)  
4eb6 32 66 ee			ld (debug_mark+1),a  
4eb9 3a c3 4e			ld a, (.dmark+2)  
4ebc 32 67 ee			ld (debug_mark+2),a  
4ebf 18 03			jr .pastdmark  
4ec1 ..			.dmark: db "Vbb"  
4ec4 f1			.pastdmark: pop af  
4ec5			endm  
# End of macro DMARK
4ec5						CALLMONITOR 
4ec5 cd 6f ee			call debug_vector  
4ec8				endm  
# End of macro CALLMONITOR
4ec8					endif 
4ec8 cb 27				sla a  
4eca				 
4eca					 
4eca					if DEBUG_FORTH_WORDS 
4eca						DMARK "VR2" 
4eca f5				push af  
4ecb 3a df 4e			ld a, (.dmark)  
4ece 32 65 ee			ld (debug_mark),a  
4ed1 3a e0 4e			ld a, (.dmark+1)  
4ed4 32 66 ee			ld (debug_mark+1),a  
4ed7 3a e1 4e			ld a, (.dmark+2)  
4eda 32 67 ee			ld (debug_mark+2),a  
4edd 18 03			jr .pastdmark  
4edf ..			.dmark: db "VR2"  
4ee2 f1			.pastdmark: pop af  
4ee3			endm  
# End of macro DMARK
4ee3						CALLMONITOR 
4ee3 cd 6f ee			call debug_vector  
4ee6				endm  
# End of macro CALLMONITOR
4ee6					endif 
4ee6			 
4ee6 21 ee e9				ld hl, cli_var_array2 
4ee9 cd f5 0d				call addatohl 
4eec cd 90 1b				call forth_push_numhl 
4eef			 
4eef			 
4eef				       NEXTW 
4eef c3 80 1f			jp macro_next 
4ef2				endm 
# End of macro NEXTW
4ef2			.V0: 
4ef2				CWHEAD .V0Q 100 "V0!" 3 WORD_FLAG_CODE 
4ef2 78				db WORD_SYS_CORE+100             
4ef3 0a 4f			dw .V0Q            
4ef5 04				db 3 + 1 
4ef6 .. 00			db "V0!",0              
4efa				endm 
# End of macro CWHEAD
4efa			;| V0! ( u1 -- )  Store value to v0  | DONE 
4efa			 
4efa					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4efa cd 95 1d			call macro_dsp_valuehl 
4efd				endm 
# End of macro FORTH_DSP_VALUEHL
4efd			 
4efd 11 22 ea				ld de, cli_var_array 
4f00			 
4f00 eb					ex de, hl 
4f01 73					ld (hl), e 
4f02 23					inc hl 
4f03 72					ld (hl), d 
4f04			 
4f04					; destroy value TOS 
4f04			 
4f04					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4f04 cd 4d 1e			call macro_forth_dsp_pop 
4f07				endm 
# End of macro FORTH_DSP_POP
4f07			 
4f07				       NEXTW 
4f07 c3 80 1f			jp macro_next 
4f0a				endm 
# End of macro NEXTW
4f0a			.V0Q: 
4f0a				CWHEAD .V1S 101 "V0@" 3 WORD_FLAG_CODE 
4f0a 79				db WORD_SYS_CORE+101             
4f0b 1b 4f			dw .V1S            
4f0d 04				db 3 + 1 
4f0e .. 00			db "V0@",0              
4f12				endm 
# End of macro CWHEAD
4f12			;| V0@ ( --u )  Put value of v0 onto stack | DONE 
4f12 2a 22 ea				ld hl, (cli_var_array) 
4f15 cd 90 1b				call forth_push_numhl 
4f18			 
4f18				       NEXTW 
4f18 c3 80 1f			jp macro_next 
4f1b				endm 
# End of macro NEXTW
4f1b			.V1S: 
4f1b				CWHEAD .V1Q 102 "V1!" 3 WORD_FLAG_CODE 
4f1b 7a				db WORD_SYS_CORE+102             
4f1c 33 4f			dw .V1Q            
4f1e 04				db 3 + 1 
4f1f .. 00			db "V1!",0              
4f23				endm 
# End of macro CWHEAD
4f23			;| V1! ( u1 -- )  Store value to v1 | DONE 
4f23					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4f23 cd 95 1d			call macro_dsp_valuehl 
4f26				endm 
# End of macro FORTH_DSP_VALUEHL
4f26			 
4f26 11 24 ea				ld de, cli_var_array+2 
4f29				 
4f29 eb					ex de, hl 
4f2a 73					ld (hl), e 
4f2b 23					inc hl 
4f2c 72					ld (hl), d 
4f2d			 
4f2d					; destroy value TOS 
4f2d			 
4f2d					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4f2d cd 4d 1e			call macro_forth_dsp_pop 
4f30				endm 
# End of macro FORTH_DSP_POP
4f30				       NEXTW 
4f30 c3 80 1f			jp macro_next 
4f33				endm 
# End of macro NEXTW
4f33			.V1Q: 
4f33				CWHEAD .V2S 103 "V1@" 3 WORD_FLAG_CODE 
4f33 7b				db WORD_SYS_CORE+103             
4f34 44 4f			dw .V2S            
4f36 04				db 3 + 1 
4f37 .. 00			db "V1@",0              
4f3b				endm 
# End of macro CWHEAD
4f3b			;| V1@ ( --u )  Put value of v1 onto stack | DONE 
4f3b 2a 24 ea				ld hl, (cli_var_array+2) 
4f3e cd 90 1b				call forth_push_numhl 
4f41				       NEXTW 
4f41 c3 80 1f			jp macro_next 
4f44				endm 
# End of macro NEXTW
4f44			.V2S: 
4f44				CWHEAD .V2Q 104 "V2!" 3 WORD_FLAG_CODE 
4f44 7c				db WORD_SYS_CORE+104             
4f45 5c 4f			dw .V2Q            
4f47 04				db 3 + 1 
4f48 .. 00			db "V2!",0              
4f4c				endm 
# End of macro CWHEAD
4f4c			;| V2! ( u1 -- )  Store value to v2 | DONE 
4f4c					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4f4c cd 95 1d			call macro_dsp_valuehl 
4f4f				endm 
# End of macro FORTH_DSP_VALUEHL
4f4f			 
4f4f 11 26 ea				ld de, cli_var_array+4 
4f52				 
4f52 eb					ex de, hl 
4f53 73					ld (hl), e 
4f54 23					inc hl 
4f55 72					ld (hl), d 
4f56			 
4f56					; destroy value TOS 
4f56			 
4f56					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4f56 cd 4d 1e			call macro_forth_dsp_pop 
4f59				endm 
# End of macro FORTH_DSP_POP
4f59				       NEXTW 
4f59 c3 80 1f			jp macro_next 
4f5c				endm 
# End of macro NEXTW
4f5c			.V2Q: 
4f5c				CWHEAD .V3S 105 "V2@" 3 WORD_FLAG_CODE 
4f5c 7d				db WORD_SYS_CORE+105             
4f5d 6d 4f			dw .V3S            
4f5f 04				db 3 + 1 
4f60 .. 00			db "V2@",0              
4f64				endm 
# End of macro CWHEAD
4f64			;| V2@ ( --u )  Put value of v2 onto stack | DONE 
4f64 2a 26 ea				ld hl, (cli_var_array+4) 
4f67 cd 90 1b				call forth_push_numhl 
4f6a				       NEXTW 
4f6a c3 80 1f			jp macro_next 
4f6d				endm 
# End of macro NEXTW
4f6d			.V3S: 
4f6d				CWHEAD .V3Q 104 "V3!" 3 WORD_FLAG_CODE 
4f6d 7c				db WORD_SYS_CORE+104             
4f6e 85 4f			dw .V3Q            
4f70 04				db 3 + 1 
4f71 .. 00			db "V3!",0              
4f75				endm 
# End of macro CWHEAD
4f75			;| V3! ( u1 -- )  Store value to v3 | DONE 
4f75					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4f75 cd 95 1d			call macro_dsp_valuehl 
4f78				endm 
# End of macro FORTH_DSP_VALUEHL
4f78			 
4f78 11 28 ea				ld de, cli_var_array+6 
4f7b				 
4f7b eb					ex de, hl 
4f7c 73					ld (hl), e 
4f7d 23					inc hl 
4f7e 72					ld (hl), d 
4f7f			 
4f7f					; destroy value TOS 
4f7f			 
4f7f					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4f7f cd 4d 1e			call macro_forth_dsp_pop 
4f82				endm 
# End of macro FORTH_DSP_POP
4f82				       NEXTW 
4f82 c3 80 1f			jp macro_next 
4f85				endm 
# End of macro NEXTW
4f85			.V3Q: 
4f85				CWHEAD .END 105 "V3@" 3 WORD_FLAG_CODE 
4f85 7d				db WORD_SYS_CORE+105             
4f86 96 4f			dw .END            
4f88 04				db 3 + 1 
4f89 .. 00			db "V3@",0              
4f8d				endm 
# End of macro CWHEAD
4f8d			;| V3@ ( --u )  Put value of v3 onto stack | DONE 
4f8d 2a 28 ea				ld hl, (cli_var_array+6) 
4f90 cd 90 1b				call forth_push_numhl 
4f93				       NEXTW 
4f93 c3 80 1f			jp macro_next 
4f96				endm 
# End of macro NEXTW
4f96			 
4f96			 
4f96			 
4f96			 
4f96			 
4f96			; end of dict marker 
4f96			 
4f96 00			.END:    db WORD_SYS_END 
4f97 00 00			dw 0 
4f99 00				db 0 
4f9a			 
4f9a			; use to jp here for user dict words to save on macro expansion  
4f9a			 
4f9a			user_dict_next: 
4f9a				NEXTW 
4f9a c3 80 1f			jp macro_next 
4f9d				endm 
# End of macro NEXTW
4f9d			 
4f9d			 
4f9d			user_exec: 
4f9d				;    ld hl, <word code> 
4f9d				;    FORTH_RSP_NEXT - call macro_forth_rsp_next 
4f9d				;    call forthexec 
4f9d				;    jp user_dict_next   (NEXT) 
4f9d			        ;    <word code bytes> 
4f9d eb				ex de, hl 
4f9e 2a bc e5			ld hl,(os_tok_ptr) 
4fa1				 
4fa1				FORTH_RSP_NEXT 
4fa1 cd 37 1b			call macro_forth_rsp_next 
4fa4				endm 
# End of macro FORTH_RSP_NEXT
4fa4			 
4fa4			if DEBUG_FORTH_UWORD 
4fa4						DMARK "UEX" 
4fa4 f5				push af  
4fa5 3a b9 4f			ld a, (.dmark)  
4fa8 32 65 ee			ld (debug_mark),a  
4fab 3a ba 4f			ld a, (.dmark+1)  
4fae 32 66 ee			ld (debug_mark+1),a  
4fb1 3a bb 4f			ld a, (.dmark+2)  
4fb4 32 67 ee			ld (debug_mark+2),a  
4fb7 18 03			jr .pastdmark  
4fb9 ..			.dmark: db "UEX"  
4fbc f1			.pastdmark: pop af  
4fbd			endm  
# End of macro DMARK
4fbd				CALLMONITOR 
4fbd cd 6f ee			call debug_vector  
4fc0				endm  
# End of macro CALLMONITOR
4fc0			endif 
4fc0			 
4fc0			 
4fc0			 
4fc0 eb				ex de, hl 
4fc1 22 bc e5			ld (os_tok_ptr), hl 
4fc4				 
4fc4				; Don't use next - Skips the first word in uword. 
4fc4			 
4fc4 c3 09 20			jp exec1 
4fc7			;	NEXT 
4fc7			 
4fc7			 
4fc7			; eof 
# End of file forth_wordsv4.asm
4fc7			endif 
4fc7			;;;;;;;;;;;;;; Debug code 
4fc7			 
4fc7			 
4fc7			;if DEBUG_FORTH_PARSE 
4fc7 .. 00		.nowordfound: db "No match",0 
4fd0 .. 00		.compword:	db "Comparing word ",0 
4fe0 .. 00		.nextwordat:	db "Next word at",0 
4fed .. 00		.charmatch:	db "Char match",0 
4ff8			;endif 
4ff8			if DEBUG_FORTH_JP 
4ff8			.foundword:	db "Word match. Exec..",0 
4ff8			endif 
4ff8			;if DEBUG_FORTH_PUSH 
4ff8 .. 00		.enddict:	db "Dict end. Push.",0 
5008 .. 00		.push_str:	db "Pushing string",0 
5017 .. 00		.push_num:	db "Pushing number",0 
5026 .. 00		.data_sp:	db "SP:",0 
502a .. 00		.wordinhl:	db "Word in HL (2/0):",0 
503c .. 00		.wordinde:	db "Word in DE (3/0):",0 
504e .. 00		.wordinbc:	db "Word in BC (4/0):",0 
5060			;endif 
5060			;if DEBUG_FORTH_MALLOC 
5060 .. 00		.push_malloc:	db "Malloc address",0 
506f			;endif 
506f			 
506f			 
506f			 
506f			; display malloc address and current data stack pointer  
506f			 
506f			malloc_error: 
506f d5				push de 
5070 f5				push af 
5071 e5				push hl 
5072 cd c8 0b			call clear_display 
5075 11 95 50			ld de, .mallocerr 
5078 3e 00			ld a,0 
507a			;	ld de,os_word_scratch 
507a cd db 0b			call str_at_display 
507d 3e 11			ld a, display_row_1+17 
507f 11 65 ee			ld de, debug_mark 
5082 cd db 0b			call str_at_display 
5085 cd eb 0b			call update_display 
5088				;call break_point_state 
5088 cd f8 61			call cin_wait 
508b			 
508b			;	ld a, ' ' 
508b			;	ld (os_view_disable), a 
508b cd ff 14			call bp_on 
508e e1				pop hl 
508f f1				pop af 
5090 d1				pop de	 
5091				CALLMONITOR 
5091 cd 6f ee			call debug_vector  
5094				endm  
# End of macro CALLMONITOR
5094 c9				ret 
5095			 
5095 .. 00		.mallocerr: 	db "Malloc Error",0 
50a2			;if DEBUG_FORTH_PUSH 
50a2			display_data_sp: 
50a2 f5				push af 
50a3			 
50a3				; see if disabled 
50a3			 
50a3			 
50a3 3a 6f ee			ld a, (debug_vector) 
50a6 fe c9			cp $C9  ; RET 
50a8				;ld a, (os_view_disable) 
50a8				;cp '*' 
50a8 28 67			jr z, .skipdsp 
50aa			 
50aa e5				push hl 
50ab e5				push hl 
50ac e5			push hl 
50ad cd c8 0b			call clear_display 
50b0 e1			pop hl 
50b1 7c				ld a,h 
50b2 21 c0 e5			ld hl, os_word_scratch 
50b5 cd fe 0f			call hexout 
50b8 e1				pop hl 
50b9 7d				ld a,l 
50ba 21 c2 e5			ld hl, os_word_scratch+2 
50bd cd fe 0f			call hexout 
50c0 21 c4 e5			ld hl, os_word_scratch+4 
50c3 3e 00			ld a,0 
50c5 77				ld (hl),a 
50c6 11 c0 e5			ld de,os_word_scratch 
50c9 3e 28				ld a, display_row_2 
50cb cd db 0b				call str_at_display 
50ce 11 2a 50			ld de, .wordinhl 
50d1 3e 00			ld a, display_row_1 
50d3			 
50d3 cd db 0b				call str_at_display 
50d6 11 65 ee			ld de, debug_mark 
50d9 3e 11			ld a, display_row_1+17 
50db			 
50db cd db 0b				call str_at_display 
50de			 
50de				; display current data stack pointer 
50de 11 26 50			ld de,.data_sp 
50e1 3e 30				ld a, display_row_2 + 8 
50e3 cd db 0b				call str_at_display 
50e6			 
50e6 2a e8 e9			ld hl,(cli_data_sp) 
50e9 e5				push hl 
50ea 7c				ld a,h 
50eb 21 c0 e5			ld hl, os_word_scratch 
50ee cd fe 0f			call hexout 
50f1 e1				pop hl 
50f2 7d				ld a,l 
50f3 21 c2 e5			ld hl, os_word_scratch+2 
50f6 cd fe 0f			call hexout 
50f9 21 c4 e5			ld hl, os_word_scratch+4 
50fc 3e 00			ld a,0 
50fe 77				ld (hl),a 
50ff 11 c0 e5			ld de,os_word_scratch 
5102 3e 33				ld a, display_row_2 + 11 
5104 cd db 0b				call str_at_display 
5107			 
5107			 
5107 cd eb 0b			call update_display 
510a cd 00 0b			call delay1s 
510d cd 00 0b			call delay1s 
5110 e1				pop hl 
5111			.skipdsp: 
5111 f1				pop af 
5112 c9				ret 
5113			 
5113			display_data_malloc: 
5113			 
5113 f5				push af 
5114 e5				push hl 
5115 e5				push hl 
5116 e5			push hl 
5117 cd c8 0b			call clear_display 
511a e1			pop hl 
511b 7c				ld a,h 
511c 21 c0 e5			ld hl, os_word_scratch 
511f cd fe 0f			call hexout 
5122 e1				pop hl 
5123 7d				ld a,l 
5124 21 c2 e5			ld hl, os_word_scratch+2 
5127 cd fe 0f			call hexout 
512a 21 c4 e5			ld hl, os_word_scratch+4 
512d 3e 00			ld a,0 
512f 77				ld (hl),a 
5130 11 c0 e5			ld de,os_word_scratch 
5133 3e 28				ld a, display_row_2 
5135 cd db 0b				call str_at_display 
5138 11 60 50			ld de, .push_malloc 
513b 3e 00			ld a, display_row_1 
513d			 
513d cd db 0b				call str_at_display 
5140			 
5140				; display current data stack pointer 
5140 11 26 50			ld de,.data_sp 
5143 3e 30				ld a, display_row_2 + 8 
5145 cd db 0b				call str_at_display 
5148			 
5148 2a e8 e9			ld hl,(cli_data_sp) 
514b e5				push hl 
514c 7c				ld a,h 
514d 21 c0 e5			ld hl, os_word_scratch 
5150 cd fe 0f			call hexout 
5153 e1				pop hl 
5154 7d				ld a,l 
5155 21 c2 e5			ld hl, os_word_scratch+2 
5158 cd fe 0f			call hexout 
515b 21 c4 e5			ld hl, os_word_scratch+4 
515e 3e 00			ld a,0 
5160 77				ld (hl),a 
5161 11 c0 e5			ld de,os_word_scratch 
5164 3e 33				ld a, display_row_2 + 11 
5166 cd db 0b				call str_at_display 
5169			 
5169 cd eb 0b			call update_display 
516c cd 00 0b			call delay1s 
516f cd 00 0b			call delay1s 
5172 e1				pop hl 
5173 f1				pop af 
5174 c9				ret 
5175			;endif 
5175			 
5175			include "forth_autostart.asm" 
5175			; list of commands to perform at system start up 
5175			 
5175			startcmds: 
5175			;	dw test11 
5175			;	dw test12 
5175			;	dw test13 
5175			;	dw test14 
5175			;	dw test15 
5175			;	dw test16 
5175			;	dw test17 
5175			;	dw ifthtest1 
5175			;	dw ifthtest2 
5175			;	dw ifthtest3 
5175			;	dw mmtest1 
5175			;	dw mmtest2 
5175			;	dw mmtest3 
5175			;	dw mmtest4 
5175			;	dw mmtest5 
5175			;	dw mmtest6 
5175			;	dw iftest1 
5175			;	dw iftest2 
5175			;	dw iftest3 
5175			;	dw looptest1 
5175			;	dw looptest2 
5175			;	dw test1 
5175			;	dw test2 
5175			;	dw test3 
5175			;	dw test4 
5175			;	dw game2r 
5175			;	dw game2b1 
5175			;	dw game2b2 
5175			 
5175				; start up words that are actually useful 
5175			 
5175			;    dw spi1 
5175			;    dw spi2 
5175			;    dw spi3 
5175			;    dw spi4 
5175			;    dw spi5 
5175			;    dw spi6 
5175			;    dw spi7 
5175			; 
5175			;    dw spi8 
5175			;    dw spi9 
5175			;    dw spi10 
5175			 
5175			; file editor 
5175			;	dw edit1 
5175			;	dw edit2 
5175			;	dw edit3 
5175			 
5175			;	dw longread 
5175 97 55			dw clrstack 
5177 cb 55			dw type 
5179			;	dw stest 
5179 f0 55			dw strncpy 
517b 60 57			dw list 
517d 51 56			dw start1 
517f 61 56			dw start2 
5181			;	dw start3 
5181			;	dw start3b 
5181			;	dw start3c 
5181			 
5181				; (unit) testing words 
5181			 
5181			;	dw mtesta 
5181			;	dw mtestb 
5181			;	dw mtestc 
5181			;	dw mtestd 
5181			;	dw mteste 
5181			 
5181				; demo/game words 
5181			 
5181			;        dw game3w 
5181			;        dw game3p 
5181			;        dw game3sc 
5181			;        dw game3vsi 
5181			;        dw game3vs 
5181				 
5181			;	dw game2b 
5181			;	dw game2bf 
5181			;	dw game2mba 
5181			;	dw game2mbas 
5181			;	dw game2mb 
5181			 
5181 91 59			dw game1 
5183 a2 59			dw game1a 
5185 04 5a			dw game1b 
5187 39 5a			dw game1c 
5189 6f 5a			dw game1d 
518b a0 5a			dw game1s 
518d b4 5a			dw game1t 
518f c9 5a			dw game1f 
5191 fd 5a			dw game1z 
5193 41 5b			dw game1zz 
5195			 
5195 ca 57			dw test5 
5197 02 58			dw test6 
5199 3a 58			dw test7 
519b 4e 58			dw test8 
519d 7a 58			dw test9 
519f 90 58			dw test10 
51a1				 
51a1 18 5c		        dw ssv5 
51a3 fc 5b		        dw ssv4 
51a5 e0 5b		        dw ssv3 
51a7 aa 5b		        dw ssv2 
51a9 31 5c		        dw ssv1 
51ab 79 5c		        dw ssv1cpm 
51ad			;	dw keyup 
51ad			;	dw keydown 
51ad			;	dw keyleft 
51ad			;	dw keyright 
51ad			;	dw 	keyf1 
51ad			;	dw keyf2 
51ad			;	dw keyf3 
51ad			;	dw keyf4 
51ad			;	dw keyf5 
51ad			;	dw keyf6 
51ad			;	dw keyf7 
51ad			;	dw keyf8 
51ad			;	dw keyf9 
51ad			;	dw keyf10 
51ad			;	dw keyf11 
51ad			;	dw keyf12 
51ad			;	dw keytab 
51ad			;	dw keycr 
51ad			;	dw keyhome 
51ad			;	dw keyend 
51ad			;	dw keybs 
51ad 00 00			db 0, 0	 
51af			 
51af			 
51af			; File Editor 
51af			 
51af			; ( id - ) use 'e' to edit the displayed line 
51af .. 00		edit1: db ": edc waitk $65 = if ede then ; ", 0 
51d0 .. 00		edit2: db ": ede storepage ptr $02 + cls dedit filepage bupd ; ", 0 
5205			;edit2: db ": ede v1@ v0@ record drop storepage ptr $02 + cls dedit filepage bupd ; ", 0 
5205 .. 00		edit3: db ": ed dup v0! open $01 do i v0@ record cls . edc loop ; ",0 
523d			;edit3: db ": ed dup v0! open $01 do i v0@ record cls . i v1! edc loop ; ",0 
523d			 
523d			; SPI Net support words 
523d			 
523d			; v0! = node to send to 
523d			; ( str count - ) 
523d .. 00		spi1:       db ": spitype spiceh $00 do dup i + @ v0@ spicel $10 spio spio spio spiceh $01 pause loop ; ",0 
5296			 
5296			; spiputc ( char node - ) 
5296 .. 00		spi2:       db ": spiputc spicel $10 spio spio ptr @ spio spiceh ; ",0 
52ca			; spiputc ( u node - ) 
52ca .. 00		spi2b:       db ": spiputb spicel $10 spio spio spio spiceh ; ",0 
52f8			 
52f8			; spigetc ( - n ) 
52f8 .. 00		spi4:       db ": spigetc spicel $11 spio spii spiceh ; ", 0 
5321			 
5321			; getnode ( - n ) 
5321 .. 00		spi5:       db ": getnode spicel $18 spio spii nop spiceh ; ", 0 
534e			 
534e			; ( str node - )  
534e .. 00		spi3:       db ": sendnode v0! count spiceh $00 do dup i + @ v0@ spicel $10 spio spio spio spiceh $01 pause loop ; ; ",0 
53b4			; store string ( str i - ) 
53b4			 
53b4			;spi3:       db ": storestrold spicel $03 spio spio ptr count clkstro spiceh ; ", 0 
53b4 .. 00		spi6:       db ": storestr spicel $12 spio spio count $00 do dup i + @ spio $01 pause loop spiceh ; ", 0 
5409			 
5409			; get string ( addr i -  )    TO FIX 
5409			 
5409 .. 00		spi7:       db ": getstorestr spicel $13 spio spio \" \" repeat spii dup concat $00 = not until spiceh ; ", 0 
5461			 
5461			 
5461			; NETCHAT (TODO) 
5461			; Program to allow two nodes to chat with eachother 
5461			; 
5461			; v0 - target node 
5461			;  
5461			; accept input at 0,0 
5461			; if input is string send spitype to target node 
5461			; starting at row 2,0 , while spigetchr is not zero ->  
5461			; 
5461			; 
5461			; TODO add paging of get request 
5461			 
5461			; ( node - ) 
5461 .. 00		spi8:		db ": netchatp $00 $00 at accept ;", 0 
5480 .. 00		spi9: 		db ": netchatr repeat spigetchr dup dup $00 = not if emit then $00 = not until $02 pause ; ",0 
54d8 .. 00		spi10:		db ": netchat v0! repeat netchatp count dup $00 > if spitype $01 pause then cls $00 $03 at \">\" . netchatr true until nop ; ", 0 
5550			 
5550			 
5550			; Long read of currently open file 
5550 .. 00		longread:   db ": lread read repeat readcont if read concat then readcont until nop ; ", 0 
5597			 
5597			; clear stack  
5597			 
5597 .. 00		clrstack:  db ": clrstk depth ?dup if $01 do drop loop then nop ; ", 0 
55cb			 
55cb			; type ( addr count - ) 
55cb .. 00		type:     db ": type $00 do dup i + @ emit loop ; ", 0 
55f0			 
55f0			; some direct memory words 
55f0			; strncpy ( len t f -- t ) 
55f0			 
55f0 .. 00		strncpy:   db ": strncpy $00 scratch 2! $02 scratch 2! do $00 scratch 2@ i + @ $02 scratch 2@ i + ! loop nop  ;",0 
5651			 
5651 .. 00		start1:     	db ": bpon $00 bp ;",0 
5661 .. 00		start2:     	db ": bpoff $01 bp ;",0 
5672 .. 00		start3b:         db ": ls dir cls drop dup $00 > if $01 do $08 $04 at . $01 $04 at . $04 $04 at . $23 $04 at accept drop scroll loop then nop ;",0 
56ed .. 00		start3c:         db ": dirlist dir cls drop dup $00 > if $01 do \"/\" .> .> \"Ext:\" .> .> \"Id: \" .> .>  loop then nop ;",0 
574d			 
574d .. 00		tuck:         db ": tuck swap over ;", 0 
5760			 
5760			; a handy word to list items on the stack 
5760			 
5760 .. 00		list:            db ": more cls repeat scroll $01 $04 at depth . $0a $04 at .> $01 $01 at accept drop depth 0= not until nop ;",0 
57ca			 
57ca			 
57ca			; test stack  
57ca			; rnd8 stest 
57ca			 
57ca			;stest:   db ": stest cls  v0! v0@ $00 do rnd8 $01 $01 at i . $01 pause loop v0@ $00 do drop $12 $01 at depth . $01 pause loop nop ;",0  
57ca			 
57ca			; random malloc and free cycles 
57ca			 
57ca			;mtesta:      db ": mtesta $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . rnd8 dup $13 $01 at . malloc heap $1f $01 at . $1f $02 at . $01 pause free $01 until nop ;", 0 
57ca			 
57ca			; fixed malloc and free cycles 
57ca			 
57ca			;mtestb:      db ": mtestb $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 malloc heap $1f $01 at . $1f $02 at . $01 pause free $01 until nop ;", 0 
57ca			 
57ca			; fixed double string push and drop cycle  
57ca			 
57ca			;mtestc:      db ": mtestc $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 spaces $2f spaces  heap $1f $01 at . $1f $02 at . $01 pause drop drop $01 until nop ; ", 0 
57ca			 
57ca			; consistent fixed string push and drop cycle  
57ca			 
57ca			;mtestd:      db ": mtestd $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 spaces heap $1f $01 at . $1f $02 at . $01 pause drop $01 until nop ; ", 0 
57ca			 
57ca			;mteste:      db ": mteste $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . rnd8 dup spaces $0f $02 at . heap $1f $01 at . $1f $02 at . $01 pause drop $01 until nop ; ", 0 
57ca			 
57ca			;test1:		db ": aa 1 2 3 ;", 0 
57ca			;test2:     	db "111 aa 888 999",0 
57ca			;test3:     	db ": bb 77 ;",0 
57ca			;test4:     	db "$02 $01 do i . loop bb",0 
57ca			 
57ca .. 00		test5:     	db ": hline $13 $00 do i $01 at 1 . i $04 at 1 . loop nop ;",0 
5802 .. 00		test6:     	db ": vline $04 $01 do $00 i at 1 . $13 i at 1 . loop nop ;",0 
583a .. 00		test7:     	db ": box hline vline ;",0 
584e .. 00		test8:     	db ": world cls box $03 $03 at Hello-World! . ;",0 
587a .. 00		test9:     	db ": sw $01 adsp world ;",0 
5890 .. 00		test10:     	db ": fw $00 adsp world draw $05 pause ;",0 
58b5			;test11:     	db "hello create .",0 
58b5			;test12:     	db "hello2 create .",0 
58b5			 
58b5			;mmtest1:     	db "cls $0001 $0008 MIN . $0002 pause",0 
58b5			;mmtest2:     	db "cls $0101 $0008 MIN . $0002 pause",0 
58b5			;mmtest3:     	db "cls $0001 $0008 MAX . $0002 pause",0 
58b5			;mmtest4:     	db "cls $0101 $0008 MAX . $0002 pause",0 
58b5			;mmtest5:     	db "cls $0001 $0001 MIN . $0002 pause",0 
58b5			;mmtest6:     	db "cls $0001 $0001 MAX . $0002 pause",0 
58b5			 
58b5			;iftest1:     	db "$0001 IF cls .",0 
58b5			;iftest2:     	db "$0000 IF cls .",0 
58b5			;iftest3:     	db "$0002 $0003 - IF cls .",0 
58b5			;looptest1:     	db "$0003 $0001 do i . loop 8",0 
58b5			;looptest2:     	db "$0003 $0001 do i . $0001 pause loop 8",0 
58b5			 
58b5			;ifthtest1:     	db "$0001 IF is-true . $0005 pause THEN next-word . $0005 pause",0 
58b5			;ifthtest2:     	db "$0000 IF is-true . $0005 pause THEN next-word . $0005 pause",0 
58b5			;ifthtest3:     	db "$0002 $0003 - IF is-true . $0005 pause THEN next-word . $0005 pause",0 
58b5			 
58b5			 
58b5 .. 00		sound1: db ": note spicel spio spiceh spicel ; ",0 
58d9 .. 00		sound2: db ": slient $9f note $bf note $df note $ff note ; ", 0 
5909 .. 00		sound3: db ": sound $01 cartdev $00 spitime ! ; ",0 
592e .. 00		sound4: db ": cha $00 ; ",0 
593b .. 00		sound5: db ": chb $20 ; ",0 
5948 .. 00		sound6: db ": chc $40 ; ",0 
5955 .. 00		sound7: db ": chd $60 ; ",0 
5962 .. 00		sound8: db ": cnote $80 + + note ; ", 0 
597a .. 00		sound9: db ": cvol $90 + + note ; ", 0 
5991			 
5991			 
5991			 
5991			 
5991			; a small guess the number game 
5991			 
5991 .. 00		game1:          db ": gsn rnd8 v1! ;",0 
59a2 .. 00		game1a:          db ": gs $00 $00 at Enter-a-number .- $00 $02 at between-1-and-255 .- $00 $03 at accept str2num v2! ;",0 
5a04			 
5a04 .. 00		game1b:          db ": gcb v2@ v1@ < if $00 $00 at Too-low! .- $01 then ;",0 
5a39 .. 00		game1c:          db ": gcc v2@ v1@ > if $00 $00 at Too-high! .- $01 then ;",0 
5a6f .. 00		game1d:          db ": gcd v2@ v1@ = if $00 $00 at Yes! .- $00 then ;",0 
5aa0 .. 00		game1s:          db ": gck gcb gcc gcd ;",0 
5ab4 .. 00		game1t:          db ": sc v3@ $01 + v3! ;",0 
5ac9 .. 00		game1f:          db ": fsc v3@ cls $01 $01 at You-Took .- $02 $03 at . ;",0 
5afd .. 00		game1z:         db ": ga $00 v3! gsn repeat cls gs cls gck $02 pause sc until fsc nop ;",0 
5b41			 
5b41			; Using 'ga' save a high score across multiple runs using external storage 
5b41			 
5b41 .. 00		game1zz:         db ": gas ga $01 bank $80 bread $01 $04 at Prev-Score .> storepage ptr $02 + dup 2@ . v3@ swap 2! $80 bupd ;",0 
5baa			 
5baa			 
5baa			;game2r:          db ": m2r rnd8 v1! ;  ",0, 0, 0, FORTH_END_BUFFER 
5baa			;game2b1:          db ": m2b1 $1f $00 do i v2@ at rnd8 $30 < if A . then loop nop ;  ",0, 0, 0, FORTH_END_BUFFER 
5baa			;game2b2:          db ": m2b cls $04 $01 do i v2! m2b1 loop ;  ",0, 0, 0, FORTH_END_BUFFER 
5baa			 
5baa			; simple screen saver to test code memory reuse to destruction 
5baa			 
5baa .. 00		ssv2:            db ": ssvchr $2a $2d rnd dup $2c = if drop $20 then nop ;",0 
5be0 .. 00		ssv3:            db ": ssvposx $01 $27 rnd v0! ;",0 
5bfc .. 00		ssv4:            db ": ssvposy $01 $05 rnd v1! ;",0 
5c18 .. 00		ssv5:            db ": ssvt ssvposx ssvposy ;",0 
5c31 .. 00		ssv1:          db ": ssv cls repeat ssvposx ssvposy v0@ v1@ at ssvchr emit $01 until nop ;",0 
5c79 .. 00		ssv1cpm:          db ": ssvcpm cls repeat ssvposx ssvposy v0@ v1@ at ssvchr emit $01 pausems $01 until nop ;",0 
5cd0			;ssv1:          db ": ssv cls repeat ssvt v0@ v1@ at ssvchr emit $01 until nop ;",0 
5cd0			;ssv1:          db ": ssv ssvposx ssvposy at ssvchr ;",0 
5cd0			;ssv1:            db ": ssv repeat ssvpos rnd8 $10 if               $01 until nop ;",0 
5cd0			;ssv2:            db ": ssvchr v0! v1! at? ;",0 
5cd0			;ssv5:            db ": ssvt ssvposx ssvposy v0@ .> v1@ .> ;",0 
5cd0			;ssv2:            db ": ssvchr $2a $2d rnd  ;",0 
5cd0			 
5cd0			 
5cd0			 
5cd0			; minesweeper/battleship finding game 
5cd0			; draws a game board of random ship/mine positions 
5cd0			; user enters coords to see if it hits on 
5cd0			; game ends when all are hit 
5cd0			; when hit or miss says how many may be in the area 
5cd0			 
5cd0			; setup the game board and then hide it 
5cd0			;game2b:          db ": mbsetup $02 fb cls $04 $01 do i v2! $10 $01 do i v2@ at rnd8 $30 < if A . then loop loop $05 pause $01 fb ;",0 
5cd0			;game2bf:         db ": mbsetupf cls $04 $01 do i v2! $10 $01 do i v2@ at \"+\" . loop loop nop ;",0 
5cd0			;; prompt for where to target 
5cd0			;game2mba:        db ": mbp $12 $04 at Turns .> v3@ . $12 $03 at Score .> v0@ . $12 $01 at Enter-X-__ .- $1a $01 at accept $12 $02 at Enter-Y-__ .- $1a $02 at accept nop ;", 0  
5cd0			;game2mbas:        db ": mbsv str2num v2! str2num v1! nop ;", 0  
5cd0			;; TODO see if the entered coords hits or misses pushes char hit of miss 
5cd0			;game2mbht:      db ": mbckht nop ;",0 
5cd0			;game2mbms:      db ": mbcms nop ;",0 
5cd0			; TODO how many might be near by 
5cd0			;game2mb:          db ": mb $00 v0! $00 v3! mbsetup mbsetupf repeat mbp mbsv $02 fb mbckht mbcms v1@ v2@ at@ $01 fb v1@ v2@ at emit $01 until nop ;",0 
5cd0			 
5cd0			; Game 3 
5cd0			 
5cd0			; Vert scroller ski game - avoid the trees! 
5cd0			 
5cd0			; v0 score (ie turns) 
5cd0			; v1 player pos 
5cd0			; v2 left wall 
5cd0			; v3 right wall 
5cd0			 
5cd0			; Draw side walls randomly 
5cd0			 
5cd0			;game3w:   db ": vsw v2@ $04 at \"|\" . v3@ $04 at \"|\" . nop ;", 0 
5cd0			 
5cd0			; Draw player 
5cd0			;game3p:   db ": vsp v1@ $01 at \"V\" . nop ; ", 0 
5cd0			 
5cd0			; TODO Get Key 
5cd0			 
5cd0			; TODO Move left right 
5cd0			 
5cd0			; scroll and move walls a bit 
5cd0			 
5cd0			;game3sc:  db ": vsscl v2@ $01 + v2! v3@ $01 - v3! scroll nop ;", 0 
5cd0			 
5cd0			; main game loop 
5cd0			 
5cd0			;game3vsi:    db ": vsi $00 v0! $01 v2! $12 v3! $06 v1! nop ;",0 
5cd0			;game3vs:    db ": vs vsi repeat vsw vsp vsscl $05 pause scroll $01 until nop ;",0 
5cd0			 
5cd0			; key board defs 
5cd0			 
5cd0 .. 00		keyup:       db ": keyup $05 ;",0 
5cde .. 00		keydown:       db ": keydown $0a ;",0 
5cee .. 00		keyleft:       db ": keyleft $0b ;",0 
5cfe .. 00		keyright:       db ": keyright $0c ;",0 
5d0f .. 00		keyf1:       db ": keyf1 $10 ;",0 
5d1d .. 00		keyf2:       db ": keyf2 $11 ;",0 
5d2b .. 00		keyf3:       db ": keyf3 $12 ;",0 
5d39 .. 00		keyf4:       db ": keyf4 $13 ;",0 
5d47 .. 00		keyf5:       db ": keyf5 $14 ;",0 
5d55 .. 00		keyf6:       db ": keyf6 $15 ;",0 
5d63 .. 00		keyf7:       db ": keyf7 $16 ;",0 
5d71 .. 00		keyf8:       db ": keyf8 $17 ;",0 
5d7f .. 00		keyf9:       db ": keyf9 $18 ;",0 
5d8d .. 00		keyf10:       db ": keyf10 $19 ;",0 
5d9c .. 00		keyf11:       db ": keyf11 $1a ;",0 
5dab .. 00		keyf12:       db ": keyf12 $1b ;",0 
5dba			 
5dba .. 00		keytab:       db ": keytab $09 ;",0 
5dc9 .. 00		keycr:       db ": keycr $0d ;",0 
5dd7 .. 00		keyhome:       db ": keyhome $0e ;",0 
5de7 .. 00		keyend:       db ": keyend $0f ;",0 
5df6 .. 00		keybs:       db ": keybs $08 ;",0 
5e04			 
5e04			   
5e04			 
5e04			 
5e04			 
5e04			; eof 
# End of file forth_autostart.asm
5e04			 
5e04			 
5e04			 
5e04			; stack over and underflow checks 
5e04			 
5e04			; init the words to detect the under/overflow 
5e04			 
5e04			chk_stk_init: 
5e04				; a vague random number to check so we dont get any "lucky" hits 
5e04 3e 2d			ld a, 45 
5e06 6f				ld l, a 
5e07 00				nop 
5e08 3e 17			ld a, 23 
5e0a 67				ld h, a 
5e0b			 
5e0b 22 97 e2			ld (chk_word), hl     ; the word we need to check against 
5e0e			 
5e0e			;	ld (chk_stund), hl	; stack points.... 
5e0e 22 00 ef			ld (chk_stovr), hl 
5e11 22 e6 e9			ld (chk_ret_und), hl 
5e14 22 a4 e9			ld (chk_ret_ovr), hl 
5e17 22 22 e9			ld (chk_loop_ovr), hl 
5e1a 22 20 e8			ld (chk_data_ovr), hl 
5e1d c9				ret 
5e1e				 
5e1e			check_stacks: 
5e1e				; check all stack words 
5e1e			 
5e1e e5				push hl 
5e1f d5				push de 
5e20			 
5e20			;	ld de,(chk_word) 
5e20			;	ld hl, (chk_stund)	; stack points.... 
5e20			;	if DEBUG_STK_FAULT 
5e20			;		DMARK "FAa" 
5e20			;		CALLMONITOR 
5e20			;	endif 
5e20			;	call cmp16 
5e20			;	jp z, .chk_faulta 
5e20			; 
5e20			;	ld de, sfaultsu 
5e20			;	jp .chk_fault 
5e20			 
5e20 2a 00 ef		.chk_faulta: ld hl, (chk_stovr) 
5e23 ed 5b 97 e2		ld de,(chk_word) 
5e27				if DEBUG_STK_FAULT 
5e27					DMARK "FAb" 
5e27					CALLMONITOR 
5e27				endif 
5e27 cd 13 0e			call cmp16 
5e2a 28 06			jr z, .chk_fault1 
5e2c 11 d0 5e			ld de, sfaultso 
5e2f c3 81 5e			jp .chk_fault 
5e32			.chk_fault1:  
5e32 2a e6 e9			ld hl, (chk_ret_und) 
5e35 ed 5b 97 e2		ld de,(chk_word) 
5e39				if DEBUG_STK_FAULT 
5e39					DMARK "FAU" 
5e39					CALLMONITOR 
5e39				endif 
5e39 cd 13 0e			call cmp16 
5e3c ca 45 5e			jp z, .chk_fault2 
5e3f 11 e0 5e			ld de, sfaultru 
5e42 c3 81 5e			jp .chk_fault 
5e45			.chk_fault2:  
5e45 2a a4 e9			ld hl, (chk_ret_ovr) 
5e48 ed 5b 97 e2		ld de,(chk_word) 
5e4c				if DEBUG_STK_FAULT 
5e4c					DMARK "FA1" 
5e4c					CALLMONITOR 
5e4c				endif 
5e4c cd 13 0e			call cmp16 
5e4f ca 58 5e			jp z, .chk_fault3 
5e52 11 ee 5e			ld de, sfaultro 
5e55 c3 81 5e			jp .chk_fault 
5e58			.chk_fault3:  
5e58 2a 22 e9			ld hl, (chk_loop_ovr) 
5e5b ed 5b 97 e2		ld de,(chk_word) 
5e5f				if DEBUG_STK_FAULT 
5e5f					DMARK "FA2" 
5e5f					CALLMONITOR 
5e5f				endif 
5e5f cd 13 0e			call cmp16 
5e62 ca 6b 5e			jp z, .chk_fault4 
5e65 11 08 5f			ld de, sfaultlo 
5e68 c3 81 5e			jp .chk_fault 
5e6b			.chk_fault4:  
5e6b 2a 20 e8			ld hl, (chk_data_ovr) 
5e6e ed 5b 97 e2		ld de,(chk_word) 
5e72				if DEBUG_STK_FAULT 
5e72					DMARK "FA3" 
5e72					CALLMONITOR 
5e72				endif 
5e72 cd 13 0e			call cmp16 
5e75 ca 7e 5e			jp z, .chk_fault5 
5e78 11 22 5f			ld de, sfaultdo 
5e7b c3 81 5e			jp .chk_fault 
5e7e			 
5e7e			 
5e7e			.chk_fault5:  
5e7e d1				pop de 
5e7f e1				pop hl 
5e80			 
5e80 c9				ret 
5e81			 
5e81 cd c8 0b		.chk_fault: 	call clear_display 
5e84 3e 28				ld a, display_row_2 
5e86 cd db 0b				call str_at_display 
5e89 11 b2 5e				   ld de, .stackfault 
5e8c 3e 00				ld a, display_row_1 
5e8e cd db 0b				call str_at_display 
5e91 11 65 ee				    ld de, debug_mark 
5e94 3e 11				ld a, display_row_1+17 
5e96 cd db 0b				call str_at_display 
5e99 cd eb 0b				call update_display 
5e9c			 
5e9c				; prompt before entering montior for investigating issue 
5e9c			 
5e9c 3e 78			ld a, display_row_4 
5e9e 11 6e 18			ld de, endprog 
5ea1			 
5ea1 cd eb 0b			call update_display		 
5ea4			 
5ea4 cd 08 1b			call next_page_prompt 
5ea7			 
5ea7 d1				pop de 
5ea8 e1				pop hl 
5ea9 cd c2 18				call monitor 
5eac cd 26 1f				call forth_warmstart 
5eaf c3 be 17				jp warmstart_afterauto 
5eb2					;jp 0 
5eb2					;halt 
5eb2			 
5eb2			 
5eb2			 
5eb2 .. 00		.stackfault: 	db "Stack fault:",0 
5ebf			 
5ebf .. 00		sfaultsu: 	db	"Stack under flow",0 
5ed0 .. 00		sfaultso: 	db	"Stack over flow",0 
5ee0 .. 00		sfaultru:	db "RTS underflow",0 
5eee .. 00		sfaultro:	db "RTS overflow/LS underflow", 0 
5f08 .. 00		sfaultlo:	db "LS overflow/DTS underflow", 0 
5f22 .. 00		sfaultdo:	db "DTS overflow", 0 
5f2f			 
5f2f			 
5f2f			fault_dsp_under: 
5f2f 11 41 5f			ld de, .dsp_under 
5f32 c3 f7 5f			jp .show_fault 
5f35			 
5f35			fault_rsp_under: 
5f35 11 4f 5f			ld de, .rsp_under 
5f38 c3 f7 5f			jp .show_fault 
5f3b			fault_loop_under: 
5f3b 11 5d 5f			ld de, .loop_under 
5f3e c3 f7 5f			jp .show_fault 
5f41			 
5f41 .. 00		.dsp_under: db "DSP Underflow",0 
5f4f .. 00		.rsp_under: db "RSP Underflow",0 
5f5d .. 00		.loop_under: db "LOOP Underflow",0 
5f6c			 
5f6c			 
5f6c d5			type_faultn: 	push de 
5f6d e5					push hl 
5f6e cd c8 0b				call clear_display 
5f71 11 9b 5f				   ld de, .typefaultn 
5f74 3e 00				ld a, display_row_1 
5f76 cd db 0b				call str_at_display 
5f79 11 65 ee				    ld de, debug_mark 
5f7c 3e 11				ld a, display_row_1+17 
5f7e cd db 0b				call str_at_display 
5f81 cd eb 0b				call update_display 
5f84			 
5f84				; prompt before entering montior for investigating issue 
5f84			 
5f84 3e 78			ld a, display_row_4 
5f86 11 6e 18			ld de, endprog 
5f89			 
5f89 cd eb 0b			call update_display		 
5f8c			 
5f8c cd 08 1b			call next_page_prompt 
5f8f			 
5f8f e5					push hl 
5f90 d5					push de 
5f91 cd c2 18				call monitor 
5f94 cd 26 1f				call forth_warmstart 
5f97 c3 be 17				jp warmstart_afterauto 
5f9a 76					halt 
5f9b			 
5f9b			 
5f9b .. 00		.typefaultn: db "NUM Type Expected TOS!",0 
5fb2			 
5fb2 d5			type_faults: 	push de 
5fb3 e5					push hl 
5fb4 cd c8 0b				call clear_display 
5fb7 11 e0 5f				   ld de, .typefaults 
5fba 3e 00				ld a, display_row_1 
5fbc cd db 0b				call str_at_display 
5fbf 11 65 ee				    ld de, debug_mark 
5fc2 3e 11				ld a, display_row_1+17 
5fc4 cd db 0b				call str_at_display 
5fc7 cd eb 0b				call update_display 
5fca			 
5fca				; prompt before entering montior for investigating issue 
5fca			 
5fca 3e 78			ld a, display_row_4 
5fcc 11 6e 18			ld de, endprog 
5fcf			 
5fcf cd eb 0b			call update_display		 
5fd2			 
5fd2 cd 08 1b			call next_page_prompt 
5fd5			 
5fd5 e1					pop hl 
5fd6 d1					pop de 
5fd7 cd c2 18				call monitor 
5fda cd 26 1f				call forth_warmstart 
5fdd c3 be 17				jp warmstart_afterauto 
5fe0			 
5fe0			 
5fe0 .. 00		.typefaults: db "STR Type Expected TOS!",0 
5ff7			 
5ff7			.show_fault: 	 
5ff7 d5					push de 
5ff8 cd c8 0b				call clear_display 
5ffb d1					pop de 
5ffc 3e 00				ld a, display_row_1 
5ffe cd db 0b				call str_at_display 
6001 11 65 ee				    ld de, debug_mark 
6004 3e 11				ld a, display_row_1+17 
6006 cd db 0b				call str_at_display 
6009 cd eb 0b				call update_display 
600c			 
600c				; prompt before entering montior for investigating issue 
600c			 
600c 3e 78			ld a, display_row_4 
600e 11 6e 18			ld de, endprog 
6011			 
6011 cd eb 0b			call update_display		 
6014			 
6014 cd 08 1b			call next_page_prompt 
6017			 
6017 e1					pop hl 
6018 d1					pop de 
6019 cd c2 18				call monitor 
601c			; do a dump to cli and not warmstart so we preserve all of the uwords.  
601c			; TODO Make optional fault restart to cli or warm boot? 
601c					;jp warmstart 
601c c3 02 18				jp cli 
601f 76					halt 
6020			 
6020			 
6020			; handle the auto run of code from files in storage 
6020			 
6020			 
6020			include "forth_startup.asm" 
6020			; Which startup method to use? 
6020			; 
6020			; version 1 - allows for a single stored file to be selected to run at start up (if se storage is enabled) 
6020			; followed by loading of a list of scripts in eeprom 
6020			 
6020			; version 2 - if se storage is enabled then auto load all files which begin with a '*' else use loading 
6020			; from eeprom 
6020			 
6020			; Select with define in main stubs 
6020			 
6020			if STARTUP_V1 
6020				include "forth_startupv1.asm" 
6020			; Startup script loading version 1 
6020			 
6020			; If SE storage is available first stage is to use the selected file 
6020			; then go through the eeprom list 
6020			 
6020 .. 00		sprompt1: db "Startup load...",0 
6030 .. 00		sprompt2: db "Run? 1=No *=End #=All",0 
6046			 
6046			 
6046			 
6046			 
6046			forth_startup: 
6046 21 75 51			ld hl, startcmds 
6049 3e 00			ld a, 0 
604b 32 e1 e6			ld (os_last_cmd), a    ; tmp var to skip prompts if doing all 
604e			 
604e e5			.start1:	push hl 
604f cd c8 0b			call clear_display 
6052 11 20 60			ld de, sprompt1 
6055 3e 00		        ld a, display_row_1 
6057 cd db 0b			call str_at_display 
605a 11 30 60			ld de, sprompt2 
605d 3e 28		        ld a, display_row_2 
605f cd db 0b			call str_at_display 
6062 e1				pop hl 
6063 e5				push hl 
6064 5e				ld e,(hl) 
6065 23				inc hl 
6066 56				ld d,(hl) 
6067 3e 50		        ld a, display_row_3 
6069 cd db 0b			call str_at_display 
606c cd eb 0b			call update_display 
606f			 
606f			 
606f 3a e1 e6			ld a, (os_last_cmd) 
6072 fe 00			cp 0 
6074 28 05			jr z, .startprompt 
6076 cd f4 0a			call delay250ms 
6079 18 24			jr .startdo 
607b				 
607b				 
607b			 
607b			.startprompt: 
607b			 
607b 3e 9f			ld a,display_row_4 + display_cols - 1 
607d 11 06 1b		        ld de, endprg 
6080 cd db 0b			call str_at_display 
6083 cd eb 0b			call update_display 
6086 cd 00 0b			call delay1s 
6089 cd f8 61			call cin_wait 
608c						 
608c fe 2a			cp '*' 
608e 28 5e			jr z, .startupend1 
6090 fe 23			cp '#' 
6092 20 07			jr nz, .startno 
6094 3e 01			ld a, 1 
6096 32 e1 e6			ld (os_last_cmd),a 
6099 18 04			jr .startdo 
609b fe 31		.startno:	cp '1' 
609d 28 3a			jr z,.startnxt  
609f			 
609f				; exec startup line 
609f			.startdo:	 
609f e1				pop hl 
60a0 e5				push hl 
60a1				 
60a1 5e				ld e,(hl) 
60a2 23				inc hl 
60a3 56				ld d,(hl) 
60a4 eb				ex de,hl 
60a5			 
60a5 e5				push hl 
60a6			 
60a6 3e 00			ld a, 0 
60a8				;ld a, FORTH_END_BUFFER 
60a8 cd 66 11			call strlent 
60ab 23				inc hl   ; include zero term to copy 
60ac 06 00			ld b,0 
60ae 4d				ld c,l 
60af e1				pop hl 
60b0 11 bb e2			ld de, scratch 
60b3 ed b0			ldir 
60b5			 
60b5			 
60b5 21 bb e2			ld hl, scratch 
60b8 cd ca 1f			call forthparse 
60bb cd 06 20			call forthexec 
60be cd 20 1f			call forthexec_cleanup 
60c1			 
60c1 3e 78			ld a, display_row_4 
60c3 11 6e 18			ld de, endprog 
60c6			 
60c6 cd eb 0b			call update_display		 
60c9			 
60c9 3a e1 e6			ld a, (os_last_cmd) 
60cc fe 00			cp 0 
60ce 20 09			jr nz, .startnxt 
60d0 cd 08 1b			call next_page_prompt 
60d3 cd c8 0b		        call clear_display 
60d6 cd eb 0b			call update_display		 
60d9			 
60d9				; move onto next startup line? 
60d9			.startnxt: 
60d9			 
60d9 cd f4 0a			call delay250ms 
60dc e1				pop hl 
60dd			 
60dd 23				inc hl 
60de 23				inc hl 
60df			 
60df e5				push hl 
60e0 5e				ld e, (hl) 
60e1 23				inc hl 
60e2 56				ld d, (hl) 
60e3 e1				pop hl 
60e4				; TODO replace 0 test 
60e4			 
60e4 eb				ex de, hl 
60e5 cd 1e 0e			call ishlzero 
60e8			;	ld a,e 
60e8			;	add d 
60e8			;	cp 0    ; any left to do? 
60e8 eb				ex de, hl 
60e9 c2 4e 60			jp nz, .start1 
60ec 18 01			jr .startupend 
60ee			 
60ee e1			.startupend1: pop hl 
60ef			.startupend: 
60ef			 
60ef cd c8 0b			call clear_display 
60f2 cd eb 0b			call update_display 
60f5 c9				ret 
60f6			if STORAGE_SE 
60f6			 
60f6			sprompt3: db "Loading from start-up file?:",0 
60f6			sprompt4: db "(Y=Any key/N=No)",0 
60f6			 
60f6			 
60f6			forth_autoload: 
60f6			 
60f6				; load block 0 of store 1 
60f6				 
60f6				ld a, $fe      ; bit 0 clear 
60f6				ld (spi_device), a 
60f6			 
60f6				call storage_get_block_0 
60f6			 
60f6				ld a, (store_page+STORE_0_AUTOFILE) 
60f6			 
60f6				cp 0 
60f6				ret z     ; auto start not enabled 
60f6			 
60f6				call clear_display 
60f6			 
60f6				; set bank 
60f6			 
60f6					ld a, (store_page+STORE_0_BANKRUN) 
60f6					ld (spi_device), a 
60f6			 
60f6				; get file id to load from and get the file name to display 
60f6			 
60f6					ld a, (store_page+STORE_0_FILERUN) 
60f6			 
60f6					ld l, 0 
60f6					ld h, a 
60f6					ld de, store_page 
60f6			 
60f6					if DEBUG_FORTH_WORDS 
60f6						DMARK "ASp" 
60f6						CALLMONITOR 
60f6					endif 
60f6					call storage_read 
60f6			 
60f6					if DEBUG_FORTH_WORDS 
60f6						DMARK "ASr" 
60f6						CALLMONITOR 
60f6					endif 
60f6			 
60f6					call ishlzero 
60f6					ret z             ; file not found 
60f6			 
60f6					ld a, display_row_2 + 10 
60f6					ld de, store_page+3 
60f6					call str_at_display 
60f6				 
60f6			; 
60f6			 
60f6				ld a, display_row_1+5 
60f6				ld de, sprompt3 
60f6				call str_at_display 
60f6				ld a, display_row_3+15 
60f6				ld de, sprompt4 
60f6				call str_at_display 
60f6			 
60f6				call update_display 
60f6			 
60f6				call cin_wait 
60f6				cp 'n' 
60f6				ret z 
60f6				cp 'N' 
60f6				ret z 
60f6			 
60f6				call delay1s 
60f6			 
60f6				ld a, (store_page+2) 
60f6				ld (store_openmaxext), a    ; save count of ext 
60f6				ld a, 1  
60f6				ld (store_openext), a    ; save count of ext 
60f6			 
60f6			.autof:  
60f6				ld l , a 
60f6				 
60f6				ld a, (store_page) 
60f6				ld h, a	 
60f6				ld de, store_page 
60f6					if DEBUG_FORTH_WORDS 
60f6						DMARK "ASl" 
60f6						CALLMONITOR 
60f6					endif 
60f6					call storage_read 
60f6				call ishlzero 
60f6				ret z 
60f6			;	jr z, .autoend 
60f6			 
60f6					if DEBUG_FORTH_WORDS 
60f6						DMARK "ASc" 
60f6						CALLMONITOR 
60f6					endif 
60f6				ld de, store_page+2 
60f6				ld a, display_row_4 
60f6				call str_at_display 
60f6			 
60f6				call update_display 
60f6				call delay250ms 
60f6			 
60f6			 
60f6			 
60f6				ld hl, store_page+2 
60f6				call forthparse 
60f6				call forthexec 
60f6				call forthexec_cleanup 
60f6			 
60f6				 
60f6				ld a, (store_openext) 
60f6				inc a 
60f6				ld (store_openext), a    ; save count of ext 
60f6			 
60f6				jr .autof 
60f6			;.autofdone: 
60f6			; 
60f6			;		if DEBUG_FORTH_WORDS 
60f6			;			DMARK "ASx" 
60f6			;			CALLMONITOR 
60f6			;		endif 
60f6			;;	call clear_display 
60f6			;	ret 
60f6			 
60f6			 
60f6			 
60f6			endif 
# End of file forth_startupv1.asm
60f6			endif 
60f6			if STARTUP_V2 
60f6				include "forth_startupv2.asm" 
60f6			endif 
60f6			 
# End of file forth_startup.asm
60f6			 
60f6			; eof 
# End of file forth_kernel.asm
60f6			;include "nascombasic.asm" 
60f6			 
60f6			 
60f6			; find out where the code ends if loaded into RAM (for SC114) 
60f6			;endofcode:  
60f6			;	nop 
60f6			 
60f6			 
60f6			; jump to nmi vector 
60f6			 
60f6			init_nmi: 
60f6 3e c9			ld a, $c9   ; RET 
60f8 32 72 ee			ld (nmi_vector), a 
60fb c9				ret 
60fc			nmi: 
60fc e5				push hl 
60fd d5				push de 
60fe c5				push bc 
60ff f5				push af 
6100 cd 72 ee			call nmi_vector 
6103 f5				push af 
6104 c5				push bc 
6105 d5				push de 
6106 e5				push hl 
6107 ed 4d			reti 
6109			 
6109			 
6109			; eof 
6109			 
# End of file main.asm
6109			;include "firmware_lcd_4x40.asm" 
6109			;;include "firmware_lcd_4x20.asm" 
6109			include "firmware_cpm_display.asm" 
6109			 
6109			; Serial display interface for SC114 
6109			 
6109			 
6109			display_row_1: equ 0 
6109			display_row_2: equ display_row_1+display_cols 
6109			display_row_3: equ display_row_2 + display_cols 
6109			display_row_4: equ display_row_3 + display_cols 
6109			 
6109			kLCDWidth:  EQU display_cols             ;Width in characters 
6109			kLCD_Line1: EQU 0x00  
6109			kLCD_Line2: EQU kLCD_Line1+kLCDWidth 
6109			; E1 
6109			kLCD_Line3: EQU kLCD_Line2+kLCDWidth 
6109			kLCD_Line4: EQU kLCD_Line3+kLCDWidth  
6109			 
6109			lcd_init: 
6109				; no init as handled by the SCM bios 
6109 c9				ret 
610a			 
610a			 
610a			; low level functions for direct screen writes 
610a			 
610a			; output char at pos? 
610a			fLCD_Str: 
610a			        ;out (SC114_SIO_1_OUT),a 
610a c5				push bc 
610b d5				push de 
610c 5f				ld e, a 
610d			; TODO Replace with CP/M BIOS call 
610d 0e 02			ld c, $02 
610f cd 05 00			call 5 
6112 d1				pop de 
6113 c1				pop bc 
6114 c9				ret 
6115			 
6115			; position the cursor on the screen using A as realtive point in screen buffer (i.e. A=(x+(width/y))) 
6115			fLCD_Pos: 
6115				; use ASCII escape to position 
6115			        ;out (SC114_SIO_1_OUT),a 
6115 c5				push bc 
6116 d5				push de 
6117 5f				ld e, a 
6118 0e 02			ld c, $02 
611a			; TODO Replace with CP/M BIOS call 
611a cd 05 00			call 5 
611d d1				pop de 
611e c1				pop bc 
611f			 
611f c9				ret 
6120			 
6120			; output char at pos 
6120			fLCD_Data: 
6120			      ;  out (SC114_SIO_1_OUT),a 
6120 c5				push bc 
6121 d5				push de 
6122 0e 02			ld c, $02 
6124 5f				ld e, a 
6125			; TODO Replace with CP/M BIOS call 
6125 cd 05 00			call 5 
6128 d1				pop de 
6129 c1				pop bc 
612a			 
612a c9				ret 
612b			 
612b			; ascii cls  
612b			 
612b 1b 5b 48 24	.cls:   db 27, '[', 'H', "$" 
612f			 
612f 0d 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a ..	.clscpm: db 13, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,10,10,10,10,10,"$" 
6146			;.clscpm: db 3, $3c,"$" 
6146			 
6146			; write the frame buffer given in hl to hardware  
6146			write_display: 
6146			 
6146			API: equ 0 
6146			 
6146			if API 
6146				push bc 
6146				ld b, 4 
6146			 
6146			        ld (display_write_tmp), hl 	  
6146			 
6146				; clear and home cursor 
6146			 
6146				ld c, 9 
6146				ld de, .cls 
6146			; TODO Replace with CP/M BIOS call 
6146				call 5 
6146			 
6146			 
6146			.writeln: 
6146			 
6146				ld de, (display_write_tmp) 
6146				ld c, 6 
6146			; TODO Replace with CP/M BIOS call 
6146				rst $30 
6146				ld c, 7 
6146				rst $30 
6146			 
6146				ld hl, (display_write_tmp) 
6146				ld de, display_cols 
6146				add hl,de 
6146				ld (display_write_tmp),hl 
6146			 
6146				djnz  .writeln 
6146			 
6146				pop bc 
6146			 
6146			 
6146				ret 
6146			endif 
6146 e5				push hl 
6147 c5				push bc 
6148 d5				push de 
6149			 
6149			;	ld c, 2 
6149			;	;ld de, .cls 
6149			;	ld a, 27 
6149			;	rst $30 
6149			;	ld c, 2 
6149			;	;ld de, .cls 
6149			;	ld a, '[' 
6149			;	rst $30 
6149			; 
6149			;	ld c, 2 
6149			;	;ld de, .cls 
6149			;	ld a, 'H' 
6149			;	rst $30 
6149			; 
6149			 
6149			 
6149			; lots of CR/LF 
6149			;	ld c, 9 
6149			;	ld de, .clscpm 
6149			;	call 5 
6149			 
6149			; xterm cls 
6149 0e 02			ld c, 2 
614b 1e 1b			ld e, 27 
614d cd 05 00			call 5 
6150			; cls causes too much flicker 
6150			;	ld c, 2 
6150			;	ld e, 'c' 
6150			;	call 5 
6150			 
6150			; use xterm home instead 
6150 0e 02			ld c, 2 
6152 1e 5b			ld e, '[' 
6154 cd 05 00			call 5 
6157 0e 02			ld c, 2 
6159 1e 48			ld e, 'H' 
615b cd 05 00			call 5 
615e			LLL: equ 0 
615e			 
615e			if LLL 
615e			 
615e				ld c, 2 
615e				;ld de, .cls 
615e				ld e, 27 
615e			; TODO Replace with CP/M BIOS call 
615e				call 5 
615e			 
615e			 
615e				ld c, 2 
615e				;ld de, .cls 
615e				ld e, '[' 
615e			; TODO Replace with CP/M BIOS call 
615e				call 5 
615e				ld c, 2 
615e				;ld de, .cls 
615e				ld e, '2' 
615e			; TODO Replace with CP/M BIOS call 
615e				call 5 
615e				ld c, 2 
615e				;ld de, .cls 
615e				ld e, 'J' 
615e			; TODO Replace with CP/M BIOS call 
615e				call 5 
615e			 
615e			endif 
615e			 
615e d1				pop de 
615f c1				pop bc 
6160 e1				pop hl 
6161			 
6161			 
6161 22 c3 eb		        ld (display_write_tmp), hl 	  
6164 3e 00			ld a, kLCD_Line1 
6166			        ;    CALL fLCD_Pos       ;Position cursor to location in A 
6166 06 28			ld b, display_cols 
6168 ed 5b c3 eb		ld de, (display_write_tmp) 
616c cd ef 61			call write_len_string 
616f				 
616f			 
616f e5			push hl 
6170 d5			push de 
6171 c5			push bc 
6172 0e 02			ld c, 2 
6174 1e 0a			ld e, 10 
6176 cd 05 00			call 5 
6179 0e 02			ld c, 2 
617b 1e 0d			ld e, 13 
617d cd 05 00			call 5 
6180			; TODO Replace with CP/M BIOS call 
6180				;rst $30 
6180 c1			pop bc 
6181 d1			pop de 
6182 e1			pop hl 
6183			 
6183				 
6183 2a c3 eb			ld hl, (display_write_tmp) 
6186 11 28 00			ld de, display_cols 
6189 19				add hl,de 
618a 22 c3 eb			ld (display_write_tmp),hl 
618d			 
618d				 
618d 3e 28			ld a, kLCD_Line2 
618f			        ;    CALL fLCD_Pos       ;Position cursor to location in A 
618f 06 28			ld b, display_cols 
6191 ed 5b c3 eb		ld de, (display_write_tmp) 
6195 cd ef 61			call write_len_string 
6198				 
6198 2a c3 eb			ld hl, (display_write_tmp) 
619b 11 28 00			ld de, display_cols 
619e 19				add hl,de 
619f 22 c3 eb			ld (display_write_tmp),hl 
61a2			 
61a2 e5			push hl 
61a3 d5			push de 
61a4 c5			push bc 
61a5 0e 07			ld c, 7 
61a7			; TODO Replace with CP/M BIOS call 
61a7				;rst $30 
61a7 0e 02			ld c, 2 
61a9 1e 0a			ld e, 10 
61ab cd 05 00			call 5 
61ae 0e 02			ld c, 2 
61b0 1e 0d			ld e, 13 
61b2 cd 05 00			call 5 
61b5 c1			pop bc 
61b6 d1			pop de 
61b7 e1			pop hl 
61b8			 
61b8				 
61b8 3e 50			ld a, kLCD_Line3 
61ba			         ;   CALL fLCD_Pos       ;Position cursor to location in A 
61ba 06 28			ld b, display_cols 
61bc ed 5b c3 eb		ld de, (display_write_tmp) 
61c0 cd ef 61			call write_len_string 
61c3				 
61c3 2a c3 eb			ld hl, (display_write_tmp) 
61c6 11 28 00			ld de, display_cols 
61c9 19				add hl,de 
61ca 22 c3 eb			ld (display_write_tmp),hl 
61cd			 
61cd e5			push hl 
61ce d5			push de 
61cf c5			push bc 
61d0 0e 07			ld c, 7 
61d2			; TODO Replace with CP/M BIOS call 
61d2				;rst $30 
61d2 0e 02			ld c, 2 
61d4 1e 0a			ld e, 10 
61d6 cd 05 00			call 5 
61d9 0e 02			ld c, 2 
61db 1e 0d			ld e, 13 
61dd cd 05 00			call 5 
61e0 c1			pop bc 
61e1 d1			pop de 
61e2 e1			pop hl 
61e3			 
61e3				 
61e3 3e 78			ld a, kLCD_Line4 
61e5			          ;  CALL fLCD_Pos       ;Position cursor to location in A 
61e5 06 28			ld b, display_cols 
61e7 ed 5b c3 eb		ld de, (display_write_tmp) 
61eb cd ef 61			call write_len_string 
61ee c9					ret 
61ef			 
61ef			 
61ef				; write out a fixed length string given in b from de 
61ef			 
61ef 1a			write_len_string:   LD   A, (DE)        ;Get character from string 
61f0 cd 20 61		            CALL fLCD_Data      ;Write character to display 
61f3 13				inc de 
61f4 10 f9			djnz write_len_string 
61f6 c9				ret 
61f7			 
61f7			 
61f7			; eof 
# End of file firmware_cpm_display.asm
61f7			;include "firmware_key_5x10.asm" 
61f7			;;include "firmware_key_4x10.asm" 
61f7			include "firmware_key_cpm.asm" 
61f7			; Serial keyboard interface for SC114 
61f7			 
61f7			 
61f7			key_init: 
61f7				; no init as handled by the SCM bios 
61f7 c9				ret 
61f8			 
61f8			 
61f8			cin_wait: 
61f8			;	ld a, 0 
61f8			;	ret 
61f8			 
61f8				;in a,(SC114_SIO_1_IN) 
61f8			        ; Use SCM API to get from whatever console device we are using 
61f8			 
61f8			; TODO Replace with CP/M BIOS call 
61f8 c5				push bc 
61f9 0e 01			ld c, $01 
61fb cd 05 00			call 5 
61fe c1				pop bc 
61ff c9				ret 
6200			 
6200			cinndb:  
6200			cin: 
6200			 
6200			 
6200 c5				push bc 
6201			 
6201				; any key waiting to process? 
6201			; TODO Replace with CP/M BIOS call 
6201 0e 06			ld c, $06 
6203 cd 05 00			call 5 
6206 28 0d			jr z, .cin_skip 
6208			 
6208				; yep, get it 
6208			 
6208 0e 01			ld c, $01 
620a			; TODO Replace with CP/M BIOS call 
620a cd 05 00			call 5 
620d			 
620d fe 7f			cp $7f     ; back space 
620f 20 02			jr nz, .skipbs 
6211 3e 08			ld a, KEY_BS 
6213			.skipbs: 
6213			 
6213 c1				pop bc 
6214 c9				ret 
6215			.cin_skip: 
6215 3e 00			ld a, 0 
6217 c1				pop bc 
6218 c9				ret 
6219			 
6219			 
6219			 
6219			 
# End of file firmware_key_cpm.asm
6219			endofcode:  
6219			baseram:  
6219 00				nop 
621a			 
621a			heap_start: equ baseram+15  ; Starting address of heap 
621a			free_list:  equ baseram+10      ; Block struct for start of free list (MUST be 4 bytes) 
621a			heap_size: equ  heap_end-heap_start      ; Number of bytes available in heap   TODO make all of user ram 
621a			;VDU:  EQU     endofcode           ; BASIC Work space 
621a			; eof 
621a			 
# End of file os_mega_cpm.asm
621a
