# File debug_level2.asm
0000			 
0000			; DEBUG Level 2 - All useful debug on and memory courruption guards 
0000			 
0000			; Odd specific debug points for testing hardware dev 
0000			 
0000			;DEBUG_LEVEL0: equ 0 
0000			;DEBUG_LEVEL0: equ 0 
0000			;DEBUG_LEVEL2: equ 1 
0000			DEBUG_LEVEL: equ '2' 
0000			 
0000			DEBUG_SOUND: equ 0      
0000			DEBUG_STK_FAULT: equ 0 
0000			DEBUG_INPUT: equ 0     ; Debug input entry code 
0000			DEBUG_INPUTV2: equ 0     ; Debug input entry code 
0000			DEBUG_KEYCINWAIT: equ 0 
0000			DEBUG_KEYCIN: equ 0 
0000			DEBUG_KEY: equ 0 
0000			DEBUG_KEY_MATRIX: equ 0 
0000			DEBUG_STORECF: equ 0 
0000			DEBUG_STORESE: equ 1        ; TODO  w locks up, r returns.  
0000			DEBUG_SPI_HARD_CE0: equ 0    ; only handshake on CE0 on port A 
0000			DEBUG_SPI: equ 0    ; low level spi tests 
0000			 
0000			; Enable many break points 
0000			 
0000			DEBUG_FORTH_PARSE_EXEC: equ 0     ; 6 
0000			DEBUG_FORTH_PARSE_EXEC_SLOW: equ 0     ; 6 
0000			DEBUG_FORTH_PARSE_NEXTWORD: equ 0 
0000			DEBUG_FORTH_JP: equ 0    ; 4 
0000			DEBUG_FORTH_MALLOC: equ 0 
0000			DEBUG_FORTH_MALLOC_INT: equ 0 
0000			DEBUG_FORTH_DOT: equ 1 
0000			DEBUG_FORTH_DOT_WAIT: equ 0 
0000			DEBUG_FORTH_MATHS: equ 0 
0000			DEBUG_FORTH_TOK: equ 0    ; 4 
0000			DEBUG_FORTH_PARSE: equ 0    ; 3 
0000			DEBUG_FORTH: equ 0  ;2 
0000			DEBUG_FORTH_WORDS: equ 1   ; 1 
0000			DEBUG_FORTH_PUSH: equ 1   ; 1 
0000			DEBUG_FORTH_UWORD: equ 1   ; 1 
0000			 
0000			; Enable key point breakpoints 
0000			 
0000			DEBUG_FORTH_DOT_KEY: equ 0 
0000			DEBUG_FORTH_PARSE_KEY: equ 0   ; 5 
0000			DEBUG_FORTH_WORDS_KEY: equ 1   ; 1 
0000			 
0000			; Debug stack imbalances 
0000			 
0000			ON: equ 1 
0000			OFF: equ 0 
0000			 
0000			DEBUG_STACK_IMB: equ 0 
0000			STACK_IMB_STORE: equ 20 
0000			 
0000			; House keeping and protections 
0000			 
0000			DEBUG_FORTH_STACK_GUARD: equ 1    ; under/over flows 
0000			DEBUG_FORTH_MALLOC_GUARD: equ 1 
0000			DEBUG_FORTH_MALLOC_HIGH: equ 0     ; warn only if more than 255 chars being allocated. would be highly unusual! 
0000			FORTH_ENABLE_FREE: equ 0 
0000			FORTH_ENABLE_MALLOCFREE: equ 1 
0000			FORTH_ENABLE_DSPPOPFREE: equ 1    ; TODO BUG Seems to be OK in some situations but with SW it crashes straight away 
0000			FORTH_ENABLE_FLOATMATH: equ 0 
0000			; eof 
# End of file debug_level2.asm
# File os_mega_sc114.asm
0000			 
0000			; Hardware Platform 
0000			 
0000			BASE_SC114: equ 1 
0000			BASE_KEV: equ 0 
0000			BASE_CPM: equ 0 
0000			 
0000			ENABLE_BASIC: equ 0 
0000			 
0000			STARTUP_V1: equ 1 
0000			STARTUP_V2: equ 0 
0000			 
0000			tos:	equ 0f000h 
0000			; Using SCM API instead 
0000			;SC114_SIO_1_OUT: equ 81 
0000			;SC114_SIO_1_IN: equ 80 
0000			; 
0000			; 
0000			; CPU clock 
0000			; 
0000			CPU_CLOCK_4MHZ: equ 1 
0000			CPU_CLOCK_8MHZ: equ  0 
0000			CPU_CLOCK_10MHZ: equ  0 
0000			 
0000			; use microchip serial eeprom for storage 
0000			 
0000			STORAGE_SE: equ 0 
0000			SOUND_ENABLE: equ 0 
0000			 
0000			; the port where the PIO using the SC103 card is located 
0000			 
0000			SC103_PIO: equ 068h 
0000			 
0000			; Full OS but with the 5x10 fullsized keyboard 
0000			 
0000			display_rows: equ 4     
0000			;display_cols: equ 20 
0000			display_cols: equ 40 
0000			 
0000			key_rows: equ 5      
0000			key_cols: equ 10    
0000			 
0000			 
0000			include "main.asm" 
0000			; z80 homebrew opperating system 
0000			; 
0000			 
0000			STARTUP_ENABLE: equ 1 
0000			 
0000			 
0000			; bios jump points via rst 
0000			 
0000			if BASE_SC114 = 1  
0000			 
0000				org 8000h 
8000			endif 
8000			 
8000			if BASE_KEV = 1  
8000			 
8000				org 0h 
8000			endif 
8000			 
8000			if BASE_CPM = 1  
8000			 
8000				org 100h 
8000			endif 
8000 c3 71 96			jp coldstart     ; rst 0 - cold boot 
8003			 
8003			 
8003 ..			buildtime: db   "Build: " 
800a					include "romtimestamp.asm" 
800a ..			db '2025-08-31 17:28' 
# End of file romtimestamp.asm
801a 00				   db 0 
801b .. 32 00		debuglevel: db   "DL",DEBUG_LEVEL, 0 
801f			 
801f			 
801f			 
801f			;        nop  
801f			;        nop 
801f			;;	org 05h		; null out bdos call 
801f			; 
801f			;        nop  
801f			;        nop  
801f			;        nop 
801f			;;	org 08h 
801f			;;; 
801f			;;	jp cin		; rst 8 - char in 
801f			;;; 
801f			; 
801f			;        nop 
801f			;        nop 
801f			;        nop 
801f			;        nop 
801f			;        nop 
801f			;        nop 
801f			;        nop 
801f			;        nop 
801f			;	org 010h 
801f			;; 
801f			;	jp cout		; rest 010h  - char out 
801f			;; 
801f			;	org 01bh   
801f			; 
801f			;	;jp  		; rst 01bh   - write string to display 
801f			;	jp str_at_display 
801f			; 
801f			; 
801f			;	org 020h 
801f			; 
801f			;	; jp		 ; rst 020h - read char at screen location 
801f			; 
801f			;	org 028h 
801f			 
801f				; jp		 ; rst 028h  - storage i/o 
801f			 
801f			; 	org 030h 
801f			;	jp break_point_state 
801f			  
801f			; $30  
801f			; org 038h 
801f			; $38 
801f			 
801f			; TODO any more important entry points to add to jump table for easier coding use? 
801f			 
801f			if BASE_KEV = 1  
801f			 
801f				; need to be at $66 for nmi support 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255 
801f				jp nmi 
801f			endif 
801f			 
801f			include "firmware.asm" 
801f			  
801f			; main constants (used here and in firmware)  
801f			  
801f			; TODO have page 0 of storage as bios  
801f			  
801f			Device_A: equ 0h  
801f			Device_B: equ 040h          ; Sound  
801f			  
801f			if BASE_KEV  
801f			Device_C: equ 080h          ; Storage and ext cart devices  
801f			endif  
801f			  
801f			if BASE_SC114  
801f			Device_C: equ  SC103_PIO          ; Storage and ext cart devices  
801f			endif  
801f			  
801f			if BASE_CPM  
801f			; TODO fixup for CPM  
801f			Device_C: equ 080h          ; Storage and ext cart devices  
801f			endif  
801f			  
801f			Device_D: equ 0c0h             ; Keyboard and LCD  
801f			  
801f			; Odd specific debug points for testing hardware dev  
801f			  
801f			;if DEBUG_LEVEL0  
801f			;	include "debug_level0.asm"  
801f			;endif  
801f			;if DEBUG_LEVEL1  
801f			;	include "debug_level1.asm"  
801f			;endif  
801f			;if DEBUG_LEVEL2  
801f			;	include "debug_level2.asm"  
801f			;endif  
801f			  
801f			  
801f			CALLMONITOR: macro  
801f			;	call break_point_state  
801f			; now use the break point debug vector  
801f				call debug_vector  
801f				endm  
801f			  
801f			MALLOC_1: equ 1        ; from dk88   
801f			MALLOC_2: equ 0           ; broke  
801f			MALLOC_3: equ 0           ; really broke  
801f			MALLOC_4: equ 0              ; mine pretty basic reuse and max of 250 chars  
801f			  
801f			if BASE_KEV   
801f			;stacksize: equ 256  
801f			; each stack entry is three bytes (type + word)  
801f			stacksize: equ 3*150  
801f			  
801f			STACK_RET_SIZE: equ 64  
801f			STACK_LOOP_SIZE: equ 128  
801f			STACK_DATA_SIZE: equ 512  
801f			endif  
801f			if BASE_SC114  
801f			;tos:	equ 0f000h  
801f			stacksize: equ 256  
801f			STACK_RET_SIZE: equ 64  
801f			STACK_LOOP_SIZE: equ 128  
801f			STACK_DATA_SIZE: equ 256  
801f			endif  
801f			  
801f			if BASE_CPM  
801f			;tos:	equ 0f000h  
801f			stacksize: equ 256  
801f			STACK_RET_SIZE: equ 64  
801f			STACK_LOOP_SIZE: equ 128  
801f			STACK_DATA_SIZE: equ 256  
801f			endif  
801f			  
801f			;if STORAGE_SE == 0  
801f			STORE_BLOCK_PHY:   equ 64    ; physical block size on storage   64byte on 256k eeprom  
801f			STORE_DEVICE_MAXBLOCKS:  equ  255*2 ; how many blocks are there on this storage device  
801f			;endif  
801f			  
801f			; Block 0 at offset $3b is a flag to decide to offer auto start up - 0 = prompt 1-auto run no prompt 2 - dont run  
801f			  
801f			STORE_0_AUTORUN: equ $20  
801f			  
801f			; Block 0 at offset $20+ holds the file number to run at system startup after the display  
801f			  
801f			STORE_0_AUTOFILE: equ $21  
801f			STORE_0_BANKRUN: equ $23  
801f			STORE_0_FILERUN: equ $24  
801f			  
801f			; Block 0 offsets for settings  
801f			  
801f			; if set then skip prompt for start up and accept all  
801f			  
801f			STORE_0_QUICKSTART: equ $25  
801f			  
801f			; Blocks where directory table is held  
801f			  
801f			; Reducing the number of entries increases the max file size  
801f			  
801f			;STORE_DIR_START: equ 1  
801f			;STORE_DIR_END: equ 33  
801f			  
801f			; Blocks from where file data is stored  
801f			  
801f			;STORE_DATA_START: equ STORE_DIR_END + 1  
801f			  
801f			; Block indicators (<32 are data files)  
801f			  
801f			;STORE_BLOCK_CFG: equ $8f       ; config block  
801f			;STORE_BLOCK_DIRF: equ $8e       ; directory block free  
801f			;STORE_BLOCK_DIRU: equ $8d       ; directory block free  
801f			;STORE_BLOCK_FREE: equ $85       ; data block free  
801f			;STORE_BLOCK_AUTO: equ $89       ; auto start code  
801f			  
801f			  
801f			  
801f			; Directory entry flags  
801f			  
801f			;STORE_DIR_FREE: equ 0  
801f			;STORE_DIR_FILE:  equ 1  
801f			  
801f			; Structure offsets to directory entries  
801f			;STORE_DE_FLAG: equ 0  
801f			;STORE_DE_MAXEXT: equ 1  
801f			;STORE_DE_FILENAME: equ 2  
801f			  
801f			; Structure offsets to block 0  
801f			  
801f			;STORE_BK0_ISFOR: equ 1  
801f			;STORE_BK0_LABEL: equ 3  
801f			  
801f			; memory allocation   
801f			  
801f			chk_stund: equ tos+2           ; underflow check word  
801f			chk_stovr: equ chk_stund-stacksize -2; overflow check word  
801f			  
801f			; keyscan table needs rows x cols buffer  
801f			;key_rows: equ 5     ; TODO move out to mini and maxi + 1 null  
801f			;key_cols: equ 10    ; TODO move out to mini and maxi + 1 null  
801f			  
801f			keyscan_table_row1: equ chk_stovr -key_cols-1  
801f			keyscan_table_row2: equ keyscan_table_row1-key_cols-1  
801f			keyscan_table_row3: equ keyscan_table_row2-key_cols-1  
801f			keyscan_table_row4: equ keyscan_table_row3-key_cols-1  
801f			keyscan_table_row5: equ keyscan_table_row4-key_cols-1  
801f			keyscan_table: equ keyscan_table_row5-(key_cols*key_rows)-1  
801f			keyscan_scancol: equ keyscan_table-key_cols  
801f			;keyscan_table_len: equ key_rows*key_cols  
801f			;keybufptr: equ keyscan_table - 2  
801f			;keysymbol: equ keybufptr - 1  
801f			key_held: equ keyscan_scancol-1	; currently held  
801f			key_held_prev: equ key_held - 1   ; previously held (to detect bounce and cycle of key if required)  
801f			key_repeat_ct: equ key_held_prev - 4 ; timers (two words)  
801f			key_fa: equ key_repeat_ct -1 ;  
801f			key_fb: equ key_fa -1 ;  
801f			key_fc: equ key_fb -1 ;  
801f			key_fd: equ key_fc -1 ;  
801f			key_face_held: equ key_fd - 1   
801f			; flag for enabling/disabling various hardware diag loading via block 0 on bank 1  
801f			  
801f			hardware_config: equ key_face_held - 10  
801f			  
801f			; hardware config switches  
801f			; TODO add bitmasks on includes for hardware  
801f			; high byte for expansion ids  
801f			;     0000 0000  no card inserted  
801f			;     0000 0001  storage card inserted  
801f			;     0000 0010  spi sd card active  
801f			  
801f			;       
801f			; low byte:  
801f			;     0000 0001   4x4 keypad  
801f			;     0000 0010   full keyboard  
801f			;     0000 0011   spi/ext keyboard  
801f			;     0000 0100   20x4 lcd  
801f			;     0000 1000   40x4 lcd  
801f			;     0000 1100   spi/ext display  
801f			;     0001 0000   ide interface available  
801f			  
801f			hardware_word: equ hardware_config - 2  
801f			  
801f			; debug marker - optional display of debug point on the debug screens  
801f			  
801f			nmi_vector:  equ hardware_word - 3   ; vector to the nmi handler  
801f			debug_vector:  equ nmi_vector - 3   ; vector to the debug handler  
801f			  
801f			debug_umark: equ debug_vector - 6  ; current user mark  
801f			debug_mark: equ debug_umark - 4    ; internal word debug points  
801f			  
801f			; input_str vars  
801f			input_ptr:  equ debug_mark - 2    ; ptr to the current cursor position of string currently being edited  on entry starting   
801f			input_start:  equ input_ptr - 2    ; ptr to the start of string   
801f			input_size: equ input_start -1  ; number of chars  
801f			input_display_size: equ input_size -1  ; TODO number of chars that are displayable. if < input_size then scroll   
801f			input_at_pos: equ input_display_size - 1 ; frame buffer offset for start of input  
801f			input_under_cursor: equ input_at_pos - 1 ; char under the cursor so we can blink it  
801f			input_at_cursor: equ input_under_cursor - 1 ; offset of cursor to current start of string  
801f			input_cur_flash: equ input_at_cursor - 2 ;  timeout for cursor flash  
801f			input_cur_onoff: equ input_cur_flash - 1 ;  cursor blink on or off  
801f			input_len: equ input_cur_onoff - 5 ; length of current input  
801f			input_cursor: equ input_len - 5 ; offset of cursor to current start of string  
801f			  
801f			; cursor blink rate  
801f			CUR_BLINK_RATE: equ $09  
801f			;CUR_BLINK_RATE: equ 15  
801f			  
801f			key_actual_pressed: equ input_cursor - 1   
801f			key_symbol: equ key_actual_pressed - 1   
801f			key_shift: equ key_symbol - 1   
801f			  
801f			; Display allocation  
801f			  
801f			;display_rows: equ 4     ; move out to mini and mega files  
801f			;display_cols: equ 20  
801f			  
801f			display_fb_len: equ display_rows*display_cols  
801f			  
801f			; primary frame buffer     
801f			display_fb0: equ  key_shift-display_fb_len -1 ; -display_fb_len-1          ; cli input     TODO why is that doubling up?  
801f			; working frame buffers  
801f			display_fb1: equ  display_fb0-display_fb_len -1 ; -display_fb_len-1          ; default running program  
801f			display_fb3: equ  display_fb1-display_fb_len - 1  
801f			display_fb2: equ  display_fb3-display_fb_len - 1  
801f			;  
801f			; pointer to active frame buffer  
801f			display_fb_active: equ display_fb2 - 2  
801f			display_lcde1e2: equ display_fb_active - 1         ; 0=e1, 1=e2   For E1/E2 selection when using the lcd 4x40 display  
801f			display_write_tmp: equ display_lcde1e2 - 2  
801f			display_active:  equ display_write_tmp-3   ; current state of activity char (plus room to write string)  
801f			  
801f			;  
801f			  
801f			;; can load into de directory  
801f			cursor_col: equ display_active-1  
801f			cursor_row: equ cursor_col-1  
801f			cursor_ptr: equ cursor_row - 1     ;  actual offset into lcd memory for row and col combo  
801f			cursor_shape: equ cursor_ptr - 2   ; char used for the current cursor   
801f			  
801f			; maths vars  
801f			  
801f			LFSRSeed: equ cursor_shape -20   
801f			randData: equ LFSRSeed - 2  
801f			xrandc: equ randData - 2  
801f			stackstore: equ xrandc - 2  
801f			seed1: equ  stackstore -2   
801f			seed2: equ seed1 - 2  
801f			  
801f			; cf storage vars  
801f			  
801f			iErrorNum:  equ seed2-1         ;Error number  
801f			iErrorReg:  equ iErrorNum -1              ;Error register  
801f			iErrorVer:  equ iErrorReg - 1              ;Verify error flag  
801f			  
801f			store_bank_active: equ iErrorVer - (5 + 8 ) 		; TODO not used.  indicator of which storage banks are available to use 5 on board and 8 in cart  
801f			  
801f			STORE_BLOCK_LOG:  equ   280      ; TODO remove.... Logical block size     
801f			  
801f			store_page: equ store_bank_active-STORE_BLOCK_LOG-1            ; bigger than page size for eeprom so we can join multiple blocks if they are continuation records  
801f			;?????store_ffpage: equ store_page-STORE_BLOCK_LOG            ; page size for eeprom?????  
801f			store_readptr: equ store_page-2       ; tracks the file extent during storage_read of continuation blocks  
801f			store_readbuf: equ store_readptr-2       ; tracks the position for the buffer during storage_read of continuation blocks  
801f			store_longread: equ store_readbuf -1 ;   if zero then only read one block. If not zero then do a read for as long as required  
801f			store_tmp1: equ store_longread - 2      ; temp pointer holders during ops  
801f			store_tmp2: equ store_tmp1 - 2        ; temp pointer holders during ops  
801f			store_tmp3: equ store_tmp2 - 2        ; temp pointer holders during ops  
801f			store_tmpid: equ store_tmp3 - 1		; page temp id  
801f			store_tmpext: equ store_tmpid - 1		; file extent temp  
801f			store_readcont: equ store_tmpid - 1		; If current read results in an overflow buffer to next record flag it up  
801f			store_openaddr: equ store_readcont - 2		; file block address of current opened file for read  
801f			store_openext: equ store_openaddr - 1		; file extent of current opened file for read  
801f			store_openmaxext: equ store_openext - 1		; max extent of current opened file for read  
801f			store_filecache: equ store_openmaxext-2   ;  TODO (using just one for now)  file id + extent count cache * 5  
801f			store_tmppageid: equ store_filecache-2    ; phyical page id temp  
801f			;  
801f			; spi vars  
801f			  
801f			  
801f			spi_clktime: equ store_tmppageid - 1      ; holds the number of ms that happens between spi clock pulses  
801f			spi_cartdev: equ spi_clktime - 1      ; holds bit mask to send to portb (ext spi) devices  
801f			spi_cartdev2: equ spi_cartdev - 1      ; holds bit mask to send to portb's shift reg devices  
801f			spi_portbyte: equ spi_cartdev2 - 1      ; holds bit mask to send to spi bus   
801f			spi_device: equ spi_portbyte - 1    ; bit mask to send to porta (eeproms) devices  
801f			spi_device_id: equ spi_device - 1    ; human readable bank number  
801f			  
801f			;;;;; forth cli params  
801f			  
801f			; TODO use a different frame buffer for forth???  
801f			  
801f			f_cursor_ptr:  equ spi_device_id - 1  ; offset into frame buffer for any . or EMIT output  
801f			cli_buffer: equ f_cursor_ptr - 20     ; temp hold - maybe not needed  
801f			cli_origtoken: equ cli_buffer - 2     ; pointer to the text of token for this word being checked  
801f			cli_token: equ cli_origtoken - 2     ; pointer to the text of token for this word being checked  
801f			cli_execword: equ cli_token - 2      ; pointer to start of code for this word  
801f			cli_nextword: equ cli_execword - 2      ; pointer to start of next word in dict  
801f			cli_ptr: equ cli_nextword - 2           ; pointer to start of word to parse by forth kernel (working)  
801f			cli_origptr: equ cli_ptr - 2           ; pointer to start of word to parse which resets cli_ptr on each word test  
801f			  
801f			cli_mvdot: equ cli_origptr - 1 ;     ; true will move the cursor once something is displayed  
801f			cli_autodisplay: equ cli_mvdot - 1 ;     ; true will auto update the display (slow) otherwise need to use DRAW  
801f			cli_var_array: equ cli_autodisplay - ( 10 * 2 ) ; word or string pointer variables using V@0-V@9  
801f			cli_var_array2: equ cli_var_array - ( 26 * 2 ) ; word or string pointer variables using VAR word  
801f			cli_ret_sp: equ cli_var_array2 - 2    ; ret stack pointer  
801f			cli_loop_sp: equ cli_ret_sp - 2   ; data stack pointer  
801f			cli_data_sp: equ cli_loop_sp - 2   ; data stack pointer  
801f			  
801f			chk_ret_und: equ cli_data_sp-2           ; underflow check word  
801f			cli_ret_stack: equ chk_ret_und - STACK_RET_SIZE      ; TODO could I just use normal stack for this? - use linked list for looping  
801f			chk_ret_ovr: equ cli_ret_stack -2; overflow check word  
801f			cli_loop_stack: equ chk_ret_ovr - STACK_LOOP_SIZE      ; TODO could I just use normal stack for this? - use linked list for looping  
801f			chk_loop_ovr: equ cli_loop_stack -2; overflow check word  
801f			cli_data_stack: equ chk_loop_ovr - STACK_DATA_SIZE		 ;   
801f			chk_data_ovr: equ cli_data_stack -2; overflow check word  
801f			  
801f			os_var_array: equ chk_data_ovr - (32 * 2)      ;   32 word array for use using the SCRATCH word  
801f			  
801f			; os/forth token vars  
801f			  
801f			os_last_cmd: equ os_var_array-255  
801f			os_cli_cmd: equ os_last_cmd-255              ; cli command entry line  
801f			os_current_i: equ os_cli_cmd-2  
801f			os_cur_ptr: equ os_current_i-2  
801f			os_word_scratch: equ os_cur_ptr-30  
801f			os_tok_len: equ os_word_scratch - 2  
801f			os_tok_ptr: equ os_tok_len - 2               ; our current PC ptr  
801f			os_tok_malloc: equ os_tok_ptr - 2  
801f			os_last_new_uword: equ os_tok_malloc - 2    ; hold start of last user word added  
801f			os_input: equ os_last_new_uword-255    ; buffer for EDIT word  
801f			execscratch: equ os_input-255        ; exec cmd eval buffer  
801f			scratch: equ execscratch-255  
801f			  
801f			os_stack_1: equ scratch - 3       ; stack holding area 1  
801f			os_stack_2: equ os_stack_1 - 3       ; stack holding area 2  
801f			os_stack_3: equ os_stack_2 - 3       ; stack holding area 3  
801f			os_stack_4: equ os_stack_3 - 3       ; stack holding area 4  
801f			  
801f			  
801f			; temp locations for new word processing to save on adding more   
801f			  
801f			os_new_malloc: equ os_stack_4-2  
801f			os_new_parse_len: equ os_new_malloc - 2  
801f			os_new_word_len: equ os_new_parse_len - 2  
801f			os_new_work_ptr: equ os_new_word_len - 2  
801f			os_new_src_ptr: equ os_new_work_ptr - 2  
801f			os_new_exec: equ os_new_src_ptr - 2  
801f			os_new_exec_ptr: equ os_new_exec - 2  
801f			  
801f			; resume memory alloocations....  
801f			  
801f			;os_view_disable: equ os_new_exec_ptr - 1  
801f			os_view_af: equ os_new_exec_ptr - 2  
801f			os_view_hl: equ os_view_af -2  
801f			os_view_de: equ os_view_hl - 2  
801f			os_view_bc: equ os_view_de - 2  
801f			  
801f			; stack checksum word  
801f			if DEBUG_STACK_IMB  
801f				curframe: equ  os_view_de - 5  
801f				store_sp: equ curframe - (STACK_IMB_STORE*4)  
801f				chk_word: equ store_sp - 2		 ; this is the word to init and then check against to detect stack corruption. Held far away from all stacks  
801f			else  
801f				chk_word: equ os_view_bc - 2		 ; this is the word to init and then check against to detect stack corruption. Held far away from all stacks  
801f			endif  
801f			  
801f			; with data stack could see memory filled with junk. need some memory management   
801f			; malloc and free entry points added  
801f			  
801f			;free_list:  equ chk_word - 4     ; Block struct for start of free list (MUST be 4 bytes)  
801f			;heap_size: equ  (free_list-08100h)      ; Number of bytes available in heap   TODO make all of user ram  
801f			;;heap_start: equ free_list - heap_size  ; Starting address of heap  
801f			;heap_end: equ free_list-1  ; Starting address of heap  
801f			;heap_start: equ free_list - heap_size  ; Starting address of heap  
801f			  
801f			;heap_start: equ free_list - heap_size  ; Starting address of heap  
801f			heap_end: equ chk_word-1  ; Starting address of heap  
801f			  
801f			  
801f			;if BASE_KEV   
801f			;heap_start: equ 0800eh  ; Starting address of heap  
801f			;free_list:  equ 0800ah      ; Block struct for start of free list (MUST be 4 bytes)  
801f			;heap_size: equ  heap_end-heap_start      ; Number of bytes available in heap   TODO make all of user ram  
801f			;endif  
801f			  
801f			;if BASE_SC114  
801f			;heap_start: equ baseram+15  ; Starting address of heap  
801f			;free_list:  equ baseram+10      ; Block struct for start of free list (MUST be 4 bytes)  
801f			;endif  
801f			  
801f			  
801f			;;;;  
801f			  
801f			  
801f			; change below to point to last memory alloc above  
801f			topusermem:  equ   heap_start  
801f			  
801f			;if BASE_KEV   
801f			;baseusermem: equ 08000h  
801f			;endif  
801f			  
801f			;if BASE_SC114  
801f			;;aseusermem:     equ    12  
801f			;baseusermem:     equ    prompt  
801f			;;baseusermem:     equ    endofcode  
801f			;endif  
801f			  
801f			  
801f			; **********************************************************************  
801f			; **  Constants  
801f			; **********************************************************************  
801f			  
801f			; Constants used by this code module  
801f			kDataReg:   EQU Device_D           ;PIO port A data register  
801f			kContReg:   EQU Device_D+2           ;PIO port A control register  
801f			  
801f			  
801f			portbdata:  equ Device_D+1    ; port b data  
801f			portbctl:   equ Device_D+3    ; port b control  
801f			  
801f			  
801f			;KEY_SHIFT:   equ 5  
801f			;KEY_SYMBOLSHIFT:  equ 6  
801f			  
801f			KEY_SHIFTLOCK: equ 4  
801f			  
801f			  
801f			KEY_UP: equ 5  
801f			KEY_NEXTWORD: equ 6  
801f			KEY_PREVWORD: equ 7  
801f			KEY_BS: equ 8  
801f			KEY_TAB:  equ 9  
801f			KEY_DOWN: equ 10  
801f			KEY_LEFT: equ 11  
801f			KEY_RIGHT: equ 12  
801f			KEY_CR:   equ 13  
801f			KEY_HOME: equ 14  
801f			KEY_END: equ 15  
801f			  
801f			KEY_F1: equ 16  
801f			KEY_F2: equ 17  
801f			KEY_F3: equ 18  
801f			KEY_F4: equ 19  
801f			  
801f			KEY_F5: equ 20  
801f			KEY_F6: equ 21  
801f			KEY_F7: equ 22  
801f			KEY_F8: equ 23  
801f			  
801f			KEY_F9: equ 24  
801f			KEY_F10: equ 25  
801f			KEY_F11: equ 26  
801f			KEY_F12: equ 27  
801f			  
801f			;if DEBUG_KEY  
801f			;	KEY_MATRIX_NO_PRESS: equ '.'  
801f			;	KEY_SHIFT:   equ '.'  
801f			;	KEY_SYMBOLSHIFT:  equ '.'  
801f			;else  
801f				KEY_SHIFT:   equ '~'  
801f				KEY_SYMBOLSHIFT:  equ '~'  
801f				KEY_MATRIX_NO_PRESS: equ '~'  
801f			;endi  
801f			  
801f			  
801f			  
801f			  
801f			; Macro to make adding debug marks easier  
801f			  
801f			DMARK: macro str  
801f				push af  
801f				ld a, (.dmark)  
801f				ld (debug_mark),a  
801f				ld a, (.dmark+1)  
801f				ld (debug_mark+1),a  
801f				ld a, (.dmark+2)  
801f				ld (debug_mark+2),a  
801f				jr .pastdmark  
801f			.dmark: db str  
801f			.pastdmark: pop af  
801f			  
801f			endm  
801f			  
801f			  
801f			; macro to detect for stack imbalances  
801f			  
801f			include "stackimbal.asm"  
801f			; Macro and code to detect stock imbalances 
801f			 
801f			SPPUSH: equ 0 
801f			 
801f			; Add a stack frame which can be checked before return 
801f			 
801f			STACKFRAME: macro onoff frame1 frame2 
801f			 
801f				if DEBUG_STACK_IMB 
801f					if onoff 
801f						; save current SP 
801f						exx 
801f			 
801f						ld de, frame1 
801f						ld a, d 
801f						ld hl, curframe 
801f						call hexout 
801f						ld a, e 
801f						ld hl, curframe+2 
801f						call hexout 
801f			  
801f						ld hl, frame1 
801f						push hl 
801f						ld hl, frame2 
801f						push hl 
801f						exx 
801f					endif 
801f					 
801f				endif 
801f			endm 
801f			 
801f			STACKFRAMECHK: macro onoff frame1 frame2 
801f			 
801f					 
801f				if DEBUG_STACK_IMB 
801f					if onoff 
801f						exx 
801f						; check stack frame SP 
801f			 
801f						ld hl, frame2 
801f						pop de   ; frame2 
801f			 
801f						call cmp16 
801f						jr nz, .spnosame 
801f						 
801f			 
801f						ld hl, frame1 
801f						pop de   ; frame1 
801f			 
801f						call cmp16 
801f						jr z, .spfrsame 
801f			 
801f						.spnosame: call showsperror 
801f			 
801f						.spfrsame: nop 
801f			 
801f						exx 
801f					endif 
801f					 
801f				endif 
801f			 
801f			 
801f			endm 
801f			 
801f			 
801f			; for a sub routine, wrap SP collection and comparisons 
801f			 
801f			; Usage: 
801f			; 
801f			; SAVESP ON/OFF 0-STACK_IMB_STORE/4 
801f			; CHECKSP ON/OFF 0-STACK_IMB_STORE/4 
801f			 
801f			SAVESP: macro onoff storeword 
801f			 
801f				if DEBUG_STACK_IMB 
801f					if onoff 
801f						; save current SP 
801f			 
801f						ld (store_sp+(storeword*4)), sp 
801f			 
801f					endif 
801f					 
801f				endif 
801f			 
801f			endm 
801f			 
801f			CHECKSP: macro onoff storeword 
801f			 
801f				if DEBUG_STACK_IMB 
801f					if onoff 
801f			 
801f						; save SP after last save 
801f				 
801f						ld (store_sp+(storeword*4)+2), sp 
801f			 
801f						push hl 
801f						ld hl, store_sp+(storeword*4) 
801f						call check_stack_sp  
801f						pop hl 
801f			 
801f			 
801f					endif 
801f					 
801f				endif 
801f			 
801f			endm 
801f			 
801f			if DEBUG_STACK_IMB 
801f			 
801f			check_stack_sp: 
801f					push de 
801f			 
801f					ld e, (hl) 
801f					inc hl 
801f					ld d, (hl) 
801f					inc hl 
801f			 
801f					push de 
801f			 
801f			 
801f					ld e, (hl) 
801f					inc hl 
801f					ld d, (hl) 
801f					inc hl 
801f			 
801f					pop hl 
801f			 
801f			 
801f					; check to see if the same 
801f			 
801f					call cmp16 
801f					jr z, .spsame 
801f			 
801f					; not same 
801f			 
801f					call showsperror 
801f			.spsame: 
801f			 
801f					pop de 
801f			 
801f					ret 
801f			 
801f			.sperr:  db "Stack imbalance",0 
801f			 
801f			 
801f			showsperror: 
801f			 
801f			 
801f				push hl 
801f				push af 
801f				push de 
801f				call clear_display 
801f				ld de, .sperr 
801f				ld a,0 
801f			;	ld de,os_word_scratch 
801f				call str_at_display 
801f				ld a, display_row_1+17 
801f				ld de, debug_mark 
801f				call str_at_display 
801f				ld a, 0 
801f				ld (curframe+4),a 
801f				ld hl, curframe 
801f				ld de, os_word_scratch 
801f				ld a, display_row_4 
801f				call str_at_display 
801f				call update_display 
801f				;call break_point_state 
801f				call cin_wait 
801f			 
801f			;	ld a, ' ' 
801f			;	ld (os_view_disable), a 
801f				call bp_on 
801f				pop de	 
801f				pop af 
801f				pop hl 
801f				CALLMONITOR 
801f				ret 
801f			 
801f			endif 
801f			 
801f			 
801f			 
801f			; eof 
# End of file stackimbal.asm
801f			  
801f			;TODO macro to calc col and row offset into screen  
801f			  
801f			  
801f			  
801f			hardware_init:  
801f			  
801f				  
801f			  
801f					;ld a, 0  
801f					;ld (hardware_diag), a  
801f			  
801f					; clear all the buffers  
801f			  
801f 21 0a ed				ld hl, display_fb1  
8022 22 c6 eb				ld (display_fb_active), hl  
8025			  
8025 cd bd 8a				call clear_display  
8028			  
8028 21 c8 eb				ld hl, display_fb2  
802b 22 c6 eb				ld (display_fb_active), hl  
802e			  
802e cd bd 8a				call clear_display  
8031			  
8031					; init primary frame buffer area  
8031 21 ab ed				ld hl, display_fb0  
8034 22 c6 eb				ld (display_fb_active), hl  
8037			  
8037 cd bd 8a				call clear_display  
803a			  
803a			  
803a cd 3b de				call lcd_init		; lcd hardware first as some screen functions called during key_init e.g. cursor shapes  
803d			  
803d cd dd de			call key_init  
8040 cd ad 80			call storage_init  
8043			  
8043				; setup malloc functions  
8043			  
8043				if MALLOC_1  
8043 cd a1 90				call  heap_init  
8046				endif  
8046				if MALLOC_4  
8046					call  heap_init  
8046				endif  
8046			  
8046				; init sound hardware if present  
8046			  
8046				if SOUND_ENABLE  
8046					call sound_init  
8046				endif  
8046			  
8046				; lcd test sequence  
8046					  
8046 cd e0 8a			call update_display  
8049 cd 00 8a			call delay1s  
804c 3e 2b			ld a,'+'  
804e cd c2 8a			call fill_display  
8051 cd e0 8a			call update_display  
8054 cd 00 8a			call delay1s  
8057 3e 2a			ld a,'*'  
8059 cd c2 8a			call fill_display  
805c cd e0 8a			call update_display  
805f cd 00 8a			call delay1s  
8062 3e 2d			ld a,'-'  
8064 cd c2 8a			call fill_display  
8067 cd e0 8a			call update_display  
806a cd 00 8a			call delay1s  
806d			  
806d			; boot splash screen  
806d			if display_cols == 20	  
806d			        ld a, display_row_1    
806d			else  
806d 3e 0a		        ld a, display_row_1 +10   
806f			endif  
806f 11 cf 95			ld de, prom_bootmsg  
8072 cd d0 8a			call str_at_display  
8075 cd e0 8a			call update_display  
8078			  
8078			  
8078 cd 00 8a			call delay1s  
807b cd 00 8a			call delay1s  
807e			if display_cols == 20	  
807e			            LD   A, display_row_3+2  
807e			else  
807e 3e 5c		            LD   A, display_row_3+12  
8080			endif  
8080 11 e4 95			ld de, prom_bootmsg1  
8083 cd d0 8a			call str_at_display  
8086			; display debug level  
8086 3e 78		            LD   A, display_row_4  
8088 11 1b 80			ld de, debuglevel  
808b cd d0 8a			call str_at_display  
808e			  
808e cd e0 8a			call update_display  
8091 cd 00 8a			call delay1s  
8094 cd 00 8a			call delay1s  
8097			  
8097			;	ld a, display_row_4+3  
8097			;	ld de, bootmsg2  
8097			;	call str_at_display  
8097			;	call update_display  
8097			;	call delay1s  
8097			;	call delay1s  
8097			  
8097			; debug mark setup  
8097			  
8097 3e 5f		ld a, '_'  
8099 32 65 ee		ld (debug_mark),a  
809c 32 66 ee		ld (debug_mark+1),a  
809f 32 67 ee		ld (debug_mark+2),a  
80a2 3e 00		ld a,0  
80a4 32 68 ee		ld (debug_mark+3),a  
80a7 32 69 ee		ld (debug_umark),a  
80aa			  
80aa c9					ret  
80ab			  
80ab			  
80ab			;bootmsg2:	db "Firmware v0.1",0  
80ab			  
80ab			; a 4x20 lcd  
80ab			; cout for display, low level positioning and writing functions (TODO) for hardware abstraction  
80ab			  
80ab			;if display_cols == 20  
80ab			;	include "firmware_lcd_4x20.asm"  
80ab			;endif  
80ab			  
80ab			;if display_cols == 40  
80ab			;	include "firmware_lcd_4x40.asm"  
80ab			;endif  
80ab			  
80ab			;  
80ab			; TODO use the low spare two pins on port a of display pio to bit bang a serial out video display to an esp  
80ab			; TODO abstract the bit bang video out interface for dual display  
80ab			; TODO wire video out to tx pin on rc2014 bus  
80ab			  
80ab			; must supply cin, and cin_wait for low level hardware abstraction   
80ab			; moved text_input entry points to here and leave the firmware hardware modules as abstraction layer  
80ab			; test scancode  
80ab			  
80ab			;;;;;  
80ab			;;;  
80ab			; Moved out to mini and maxi versions  
80ab			;  
80ab			; include "firmware_key_4x4.asm"  
80ab			; using existing 4 wire x 4 resistor array for input  
80ab			;include "firmware_key_4x10.asm"  
80ab			; need to mod the board for 5 rows due to resistor array  
80ab			;include "firmware_key_5x10.asm"  
80ab			  
80ab			; storage hardware interface  
80ab			  
80ab			; use microchip serial eeprom for storage  
80ab			  
80ab			  
80ab			if STORAGE_SE  
80ab				include "firmware_spi.asm"  
80ab				include "firmware_seeprom.asm"  
80ab			else  
80ab			   ; create some stubs for the labels  
80ab c9			se_readbyte: ret  
80ac c9			se_writebyte: ret  
80ad c9			storage_init: ret  
80ae			  
80ae			endif  
80ae			  
80ae			; use cf card for storage - throwing timeout errors. Hardware or software?????  
80ae			;include "firmware_cf.asm"  
80ae			  
80ae			; load up high level storage hardward abstractions  
80ae			include "firmware_storage.asm"  
80ae			 
80ae			; persisent storage hardware abstraction layer  
80ae			 
80ae			 
80ae			 
80ae			; Block 0 on storage is a config state 
80ae			 
80ae			 
80ae			 
80ae			; TODO add read phy block and write phy block functions 
80ae			; TODO add presence check (i.e. read write byte 0 of block 0 for eeprom) 
80ae			 
80ae			; Abstraction layer  
80ae			 
80ae			; Logocial block size is same size as physical size - using tape concept 
80ae			 
80ae			;STORE_BLOCK_PHY2LOG: equ (STORE_BLOCK_LOG/STORE_BLOCK_PHY)       ; How many physical blocks make up a logical block 
80ae			;STORE_BLOCK_MAX: equ (STORE_BLOCK_PHY*STORE_DEVICE_MAXBLOCKS)/255    ; Max number of logical blocks on the device 
80ae			 
80ae			 
80ae			 
80ae			; Filesystem layout (Logical layout) 
80ae			; 
80ae			; Block 0 - Bank config  
80ae			; 
80ae			;      Byte - 0 file id counter 
80ae			;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
80ae			;      Byte - 3-20 zero terminated bank label 
80ae			; 
80ae			; Block 1 > File storage 
80ae			; 
80ae			;      Byte 0 file id    - block 0 file details 
80ae			;      Byte 1 block id - block 0 is file  
80ae			;            Byte 2-15 - File name 
80ae			; 
80ae			;       - to end of block data 
80ae			; 
80ae			 
80ae			; Get ID for the file named in pointer held HL 
80ae			; Returns ID in HL = 255 if no file found 
80ae			 
80ae			storage_getid: 
80ae			 
80ae 22 6d ea			ld (store_tmp1), hl 
80b1			 
80b1				if DEBUG_STORESE 
80b1					DMARK "SGI" 
80b1 f5				push af  
80b2 3a c6 80			ld a, (.dmark)  
80b5 32 65 ee			ld (debug_mark),a  
80b8 3a c7 80			ld a, (.dmark+1)  
80bb 32 66 ee			ld (debug_mark+1),a  
80be 3a c8 80			ld a, (.dmark+2)  
80c1 32 67 ee			ld (debug_mark+2),a  
80c4 18 03			jr .pastdmark  
80c6 ..			.dmark: db "SGI"  
80c9 f1			.pastdmark: pop af  
80ca			endm  
# End of macro DMARK
80ca					CALLMONITOR 
80ca cd 6f ee			call debug_vector  
80cd				endm  
# End of macro CALLMONITOR
80cd				endif 
80cd				; get block 0 and set counter for number of files to scan 
80cd			 
80cd cd 38 82			call storage_get_block_0 
80d0			 
80d0 3a 74 ea			ld a, (store_page) 
80d3 47				ld b, a 
80d4			 
80d4				; get extent 0 of each file id 
80d4			 
80d4				if DEBUG_STORESE 
80d4					DMARK "SGc" 
80d4 f5				push af  
80d5 3a e9 80			ld a, (.dmark)  
80d8 32 65 ee			ld (debug_mark),a  
80db 3a ea 80			ld a, (.dmark+1)  
80de 32 66 ee			ld (debug_mark+1),a  
80e1 3a eb 80			ld a, (.dmark+2)  
80e4 32 67 ee			ld (debug_mark+2),a  
80e7 18 03			jr .pastdmark  
80e9 ..			.dmark: db "SGc"  
80ec f1			.pastdmark: pop af  
80ed			endm  
# End of macro DMARK
80ed					CALLMONITOR 
80ed cd 6f ee			call debug_vector  
80f0				endm  
# End of macro CALLMONITOR
80f0				endif 
80f0 60			.getloop:	ld h, b 
80f1 2e 00				ld l, 0 
80f3 c5					push bc 
80f4			 
80f4 11 74 ea				ld de, store_page 
80f7				if DEBUG_STORESE 
80f7					DMARK "SGr" 
80f7 f5				push af  
80f8 3a 0c 81			ld a, (.dmark)  
80fb 32 65 ee			ld (debug_mark),a  
80fe 3a 0d 81			ld a, (.dmark+1)  
8101 32 66 ee			ld (debug_mark+1),a  
8104 3a 0e 81			ld a, (.dmark+2)  
8107 32 67 ee			ld (debug_mark+2),a  
810a 18 03			jr .pastdmark  
810c ..			.dmark: db "SGr"  
810f f1			.pastdmark: pop af  
8110			endm  
# End of macro DMARK
8110					CALLMONITOR 
8110 cd 6f ee			call debug_vector  
8113				endm  
# End of macro CALLMONITOR
8113				endif 
8113 cd e0 86				call storage_read 
8116 cd 13 8d				call ishlzero 
8119 28 2d				jr z, .gap 
811b					 
811b					; have a file name read. Is it one we want. 
811b			 
811b 2a 6d ea				ld hl, (store_tmp1) 
811e 11 77 ea				ld de, store_page+3   ; file name 
8121			 
8121				if DEBUG_STORESE 
8121					DMARK "SGc" 
8121 f5				push af  
8122 3a 36 81			ld a, (.dmark)  
8125 32 65 ee			ld (debug_mark),a  
8128 3a 37 81			ld a, (.dmark+1)  
812b 32 66 ee			ld (debug_mark+1),a  
812e 3a 38 81			ld a, (.dmark+2)  
8131 32 67 ee			ld (debug_mark+2),a  
8134 18 03			jr .pastdmark  
8136 ..			.dmark: db "SGc"  
8139 f1			.pastdmark: pop af  
813a			endm  
# End of macro DMARK
813a					CALLMONITOR 
813a cd 6f ee			call debug_vector  
813d				endm  
# End of macro CALLMONITOR
813d				endif 
813d cd 88 90				call strcmp 
8140 20 06				jr nz, .gap   ; not this one 
8142			 
8142 c1				        pop bc 
8143			 
8143 26 00				ld h, 0 
8145 68					ld l, b 
8146 18 22				jr .getdone 
8148						 
8148			 
8148			 
8148			 
8148			.gap: 
8148				if DEBUG_STORESE 
8148					DMARK "SGg" 
8148 f5				push af  
8149 3a 5d 81			ld a, (.dmark)  
814c 32 65 ee			ld (debug_mark),a  
814f 3a 5e 81			ld a, (.dmark+1)  
8152 32 66 ee			ld (debug_mark+1),a  
8155 3a 5f 81			ld a, (.dmark+2)  
8158 32 67 ee			ld (debug_mark+2),a  
815b 18 03			jr .pastdmark  
815d ..			.dmark: db "SGg"  
8160 f1			.pastdmark: pop af  
8161			endm  
# End of macro DMARK
8161					CALLMONITOR 
8161 cd 6f ee			call debug_vector  
8164				endm  
# End of macro CALLMONITOR
8164				endif 
8164			 
8164 c1					pop bc 
8165 10 89				djnz .getloop 
8167 21 ff 00				ld hl, 255 
816a			.getdone: 
816a			 
816a				if DEBUG_STORESE 
816a					DMARK "SGe" 
816a f5				push af  
816b 3a 7f 81			ld a, (.dmark)  
816e 32 65 ee			ld (debug_mark),a  
8171 3a 80 81			ld a, (.dmark+1)  
8174 32 66 ee			ld (debug_mark+1),a  
8177 3a 81 81			ld a, (.dmark+2)  
817a 32 67 ee			ld (debug_mark+2),a  
817d 18 03			jr .pastdmark  
817f ..			.dmark: db "SGe"  
8182 f1			.pastdmark: pop af  
8183			endm  
# End of macro DMARK
8183					CALLMONITOR 
8183 cd 6f ee			call debug_vector  
8186				endm  
# End of macro CALLMONITOR
8186				endif 
8186			 
8186 c9				ret 
8187			 
8187			 
8187			 
8187			 
8187			 
8187			 
8187			 
8187			 
8187			; Read Block 
8187			; ---------- 
8187			; 
8187			; With current bank 
8187			;  
8187			; Get block number to read 
8187			; Load physical blocks starting at start block into buffer 
8187			 
8187			; de points to buffer to use 
8187			; hl holds logical block number  
8187			 
8187			storage_read_block: 
8187			 
8187				; TODO bank selection 
8187			 
8187				; for each of the physical blocks read it into the buffer 
8187 06 40			ld b, STORE_BLOCK_PHY 
8189			 
8189				if DEBUG_STORESE 
8189 d5					push de 
818a				endif 
818a				 
818a			.rl1:    
818a			 
818a				; read physical block at hl into de 
818a			        ; increment hl and de to next read position on exit 
818a			 
818a e5				push hl 
818b d5				push de	 
818c c5				push bc 
818d			;	if DEBUG_STORESE 
818d			;		push af 
818d			;		ld a, 'R' 
818d			;		ld (debug_mark),a 
818d			;		pop af 
818d			;		CALLMONITOR 
818d			;	endif 
818d cd ab 80			call se_readbyte 
8190			;	if DEBUG_STORESE 
8190			;		ld a,(spi_portbyte) 
8190			;		ld l, a 
8190			;		push af 
8190			;		ld a, '1' 
8190			;		ld (debug_mark),a 
8190			;		pop af 
8190			;		CALLMONITOR 
8190			;	endif 
8190 c1				pop bc 
8191 d1				pop de 
8192 e1				pop hl 
8193 12				ld (de),a 
8194 23				inc hl 
8195 13				inc de 
8196			 
8196			;	if DEBUG_STORESE 
8196			;		push af 
8196			;		ld a, 'r' 
8196			;		ld (debug_mark),a 
8196			;		pop af 
8196			;		CALLMONITOR 
8196			;	endif 
8196			 
8196 10 f2			djnz .rl1 
8198			 
8198				if DEBUG_STORESE 
8198					DMARK "SRB" 
8198 f5				push af  
8199 3a ad 81			ld a, (.dmark)  
819c 32 65 ee			ld (debug_mark),a  
819f 3a ae 81			ld a, (.dmark+1)  
81a2 32 66 ee			ld (debug_mark+1),a  
81a5 3a af 81			ld a, (.dmark+2)  
81a8 32 67 ee			ld (debug_mark+2),a  
81ab 18 03			jr .pastdmark  
81ad ..			.dmark: db "SRB"  
81b0 f1			.pastdmark: pop af  
81b1			endm  
# End of macro DMARK
81b1 d1					pop de 
81b2			; 
81b2			;		push af 
81b2			;		ld a, 'R' 
81b2			;		ld (debug_mark),a 
81b2			;		pop af 
81b2					CALLMONITOR 
81b2 cd 6f ee			call debug_vector  
81b5				endm  
# End of macro CALLMONITOR
81b5				endif 
81b5 c9				ret	 
81b6				 
81b6			 
81b6			; File Size 
81b6			; --------- 
81b6			; 
81b6			;   hl file id 
81b6			; 
81b6			;  returns in hl the number of blocks 
81b6			 
81b6			storage_file_size: 
81b6 5d				ld e, l 
81b7 16 00			ld d, 0 
81b9 21 40 00			ld hl, STORE_BLOCK_PHY 
81bc					if DEBUG_FORTH_WORDS 
81bc						DMARK "SIZ" 
81bc f5				push af  
81bd 3a d1 81			ld a, (.dmark)  
81c0 32 65 ee			ld (debug_mark),a  
81c3 3a d2 81			ld a, (.dmark+1)  
81c6 32 66 ee			ld (debug_mark+1),a  
81c9 3a d3 81			ld a, (.dmark+2)  
81cc 32 67 ee			ld (debug_mark+2),a  
81cf 18 03			jr .pastdmark  
81d1 ..			.dmark: db "SIZ"  
81d4 f1			.pastdmark: pop af  
81d5			endm  
# End of macro DMARK
81d5						CALLMONITOR 
81d5 cd 6f ee			call debug_vector  
81d8				endm  
# End of macro CALLMONITOR
81d8					endif 
81d8 cd ba 84			call storage_findnextid 
81db			 
81db cd 13 8d			call ishlzero 
81de			;	ld a, l 
81de			;	add h 
81de			;	cp 0 
81de c8				ret z			; block not found so EOF 
81df			 
81df 11 74 ea			ld de, store_page 
81e2 cd 87 81			call storage_read_block 
81e5			 
81e5 3a 76 ea			ld a, (store_page+2)	 ; get extent count 
81e8 6f				ld l, a 
81e9 26 00			ld h, 0 
81eb c9			 	ret 
81ec			 
81ec			 
81ec			; Write Block 
81ec			; ----------- 
81ec			; 
81ec			; With current bank 
81ec			;  
81ec			; Get block number to write 
81ec			; Write physical blocks starting at start block from buffer 
81ec			  
81ec			storage_write_block: 
81ec				; TODO bank selection 
81ec			 
81ec				; for each of the physical blocks read it into the buffer 
81ec 06 40			ld b, STORE_BLOCK_PHY 
81ee			 
81ee				if DEBUG_STORESE 
81ee					DMARK "SWB" 
81ee f5				push af  
81ef 3a 03 82			ld a, (.dmark)  
81f2 32 65 ee			ld (debug_mark),a  
81f5 3a 04 82			ld a, (.dmark+1)  
81f8 32 66 ee			ld (debug_mark+1),a  
81fb 3a 05 82			ld a, (.dmark+2)  
81fe 32 67 ee			ld (debug_mark+2),a  
8201 18 03			jr .pastdmark  
8203 ..			.dmark: db "SWB"  
8206 f1			.pastdmark: pop af  
8207			endm  
# End of macro DMARK
8207			 
8207					;push af 
8207					;ld a, 'W' 
8207					;ld (debug_mark),a 
8207					;pop af 
8207					CALLMONITOR 
8207 cd 6f ee			call debug_vector  
820a				endm  
# End of macro CALLMONITOR
820a				endif 
820a			 
820a			; might not be working 
820a			;	call se_writepage 
820a			 
820a			;	ret 
820a			; 
820a			 
820a			 
820a			 
820a			.wl1:    
820a			 
820a				; read physical block at hl into de 
820a			        ; increment hl and de to next read position on exit 
820a			 
820a e5				push hl 
820b d5				push de	 
820c c5				push bc 
820d 1a				ld a,(de) 
820e				;if DEBUG_STORESE 
820e			;		push af 
820e			;		ld a, 'W' 
820e			;		ld (debug_mark),a 
820e			;		pop af 
820e			;		CALLMONITOR 
820e			;	endif 
820e cd ac 80			call se_writebyte 
8211			;	call delay250ms 
8211 00				nop 
8212 00				nop 
8213 00				nop 
8214			;	if DEBUG_STORESE 
8214			;		push af 
8214			;		ld a, 'w' 
8214			;		ld (debug_mark),a 
8214			;		pop af 
8214			;		CALLMONITOR 
8214			;	endif 
8214 c1				pop bc 
8215 d1				pop de 
8216 e1				pop hl 
8217 23				inc hl 
8218 13				inc de 
8219			 
8219			 
8219 10 ef			djnz .wl1 
821b			 
821b				if DEBUG_STORESE 
821b					DMARK "SW2" 
821b f5				push af  
821c 3a 30 82			ld a, (.dmark)  
821f 32 65 ee			ld (debug_mark),a  
8222 3a 31 82			ld a, (.dmark+1)  
8225 32 66 ee			ld (debug_mark+1),a  
8228 3a 32 82			ld a, (.dmark+2)  
822b 32 67 ee			ld (debug_mark+2),a  
822e 18 03			jr .pastdmark  
8230 ..			.dmark: db "SW2"  
8233 f1			.pastdmark: pop af  
8234			endm  
# End of macro DMARK
8234			 
8234					;push af 
8234					;ld a, 'W' 
8234					;ld (debug_mark),a 
8234					;pop af 
8234					CALLMONITOR 
8234 cd 6f ee			call debug_vector  
8237				endm  
# End of macro CALLMONITOR
8237				endif 
8237 c9				ret	 
8238			 
8238			; Init bank 
8238			; --------- 
8238			; 
8238			; With current bank 
8238			; 
8238			; Setup block 0 config 
8238			;     Set 0 file id counter 
8238			;     Set formatted byte pattern 
8238			;     Zero out bank label 
8238			;      
8238			; For every logical block write 0-1 byte as null 
8238			 
8238			storage_get_block_0: 
8238			 
8238				; TODO check presence 
8238			 
8238				; get block 0 config 
8238			 
8238 21 00 00			ld hl, 0 
823b 11 74 ea			ld de, store_page 
823e cd 87 81			call storage_read_block 
8241			 
8241				if DEBUG_STORESE 
8241					DMARK "SB0" 
8241 f5				push af  
8242 3a 56 82			ld a, (.dmark)  
8245 32 65 ee			ld (debug_mark),a  
8248 3a 57 82			ld a, (.dmark+1)  
824b 32 66 ee			ld (debug_mark+1),a  
824e 3a 58 82			ld a, (.dmark+2)  
8251 32 67 ee			ld (debug_mark+2),a  
8254 18 03			jr .pastdmark  
8256 ..			.dmark: db "SB0"  
8259 f1			.pastdmark: pop af  
825a			endm  
# End of macro DMARK
825a 11 74 ea				ld de, store_page 
825d			;		push af 
825d			;		ld a, 'i' 
825d			;		ld (debug_mark),a 
825d			;		pop af 
825d					CALLMONITOR 
825d cd 6f ee			call debug_vector  
8260				endm  
# End of macro CALLMONITOR
8260				endif 
8260			 
8260				; is this area formatted? 
8260			 
8260			;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
8260 2a 75 ea			ld hl, (store_page+1) 
8263 3e 80			ld a,0x80 
8265 bd				cp l 
8266 20 22			jr nz, .ininotformatted 
8268				; do a double check 
8268 3e 27			ld a, 0x27 
826a bc				cp h 
826b 20 1d			jr nz, .ininotformatted 
826d			 
826d				; formatted then 
826d			 
826d				if DEBUG_STORESE 
826d					DMARK "SB1" 
826d f5				push af  
826e 3a 82 82			ld a, (.dmark)  
8271 32 65 ee			ld (debug_mark),a  
8274 3a 83 82			ld a, (.dmark+1)  
8277 32 66 ee			ld (debug_mark+1),a  
827a 3a 84 82			ld a, (.dmark+2)  
827d 32 67 ee			ld (debug_mark+2),a  
8280 18 03			jr .pastdmark  
8282 ..			.dmark: db "SB1"  
8285 f1			.pastdmark: pop af  
8286			endm  
# End of macro DMARK
8286					;push af 
8286					;ld a, 'I' 
8286					;ld (debug_mark),a 
8286					;pop af 
8286					CALLMONITOR 
8286 cd 6f ee			call debug_vector  
8289				endm  
# End of macro CALLMONITOR
8289				endif 
8289 c9				ret 
828a			 
828a			.ininotformatted: 
828a				; bank not formatted so poke various bits to make sure 
828a			 
828a				if DEBUG_STORESE 
828a					DMARK "SB2" 
828a f5				push af  
828b 3a 9f 82			ld a, (.dmark)  
828e 32 65 ee			ld (debug_mark),a  
8291 3a a0 82			ld a, (.dmark+1)  
8294 32 66 ee			ld (debug_mark+1),a  
8297 3a a1 82			ld a, (.dmark+2)  
829a 32 67 ee			ld (debug_mark+2),a  
829d 18 03			jr .pastdmark  
829f ..			.dmark: db "SB2"  
82a2 f1			.pastdmark: pop af  
82a3			endm  
# End of macro DMARK
82a3					;push af 
82a3					;ld a, 'f' 
82a3					;ld (debug_mark),a 
82a3					;pop af 
82a3					CALLMONITOR 
82a3 cd 6f ee			call debug_vector  
82a6				endm  
# End of macro CALLMONITOR
82a6				endif 
82a6			 
82a6 cd c3 89			call storage_clear_page 
82a9			 
82a9 21 74 ea			ld hl, store_page 
82ac 3e 00			ld a, 0 
82ae				 
82ae 77				ld (hl),a   ; reset file counter 
82af			 
82af 21 80 27			ld hl, 0x2780     ;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
82b2 22 75 ea		 	ld (store_page+1), hl	 
82b5			 
82b5				; set default label 
82b5			 
82b5 21 51 83			ld hl, .defaultbanklabl 
82b8 11 77 ea		 	ld de, store_page+3 
82bb 01 0f 00			ld bc, 15 
82be ed b0			ldir 
82c0			 
82c0				; Append the current bank id 
82c0 21 80 ea			ld hl, store_page+3+9 
82c3 3a 59 ea			ld a, (spi_device_id) 
82c6 77				ld (hl), a 
82c7			 
82c7				; save default page 0 
82c7			 
82c7 21 00 00			ld hl, 0 
82ca 11 74 ea			ld de, store_page 
82cd				if DEBUG_STORESE 
82cd					DMARK "SB3" 
82cd f5				push af  
82ce 3a e2 82			ld a, (.dmark)  
82d1 32 65 ee			ld (debug_mark),a  
82d4 3a e3 82			ld a, (.dmark+1)  
82d7 32 66 ee			ld (debug_mark+1),a  
82da 3a e4 82			ld a, (.dmark+2)  
82dd 32 67 ee			ld (debug_mark+2),a  
82e0 18 03			jr .pastdmark  
82e2 ..			.dmark: db "SB3"  
82e5 f1			.pastdmark: pop af  
82e6			endm  
# End of macro DMARK
82e6			;		push af 
82e6			;		ld a, 'F' 
82e6			;		ld (debug_mark),a 
82e6			;		pop af 
82e6					CALLMONITOR 
82e6 cd 6f ee			call debug_vector  
82e9				endm  
# End of macro CALLMONITOR
82e9				endif 
82e9 cd ec 81			call storage_write_block 
82ec				if DEBUG_STORESE 
82ec					DMARK "SB4" 
82ec f5				push af  
82ed 3a 01 83			ld a, (.dmark)  
82f0 32 65 ee			ld (debug_mark),a  
82f3 3a 02 83			ld a, (.dmark+1)  
82f6 32 66 ee			ld (debug_mark+1),a  
82f9 3a 03 83			ld a, (.dmark+2)  
82fc 32 67 ee			ld (debug_mark+2),a  
82ff 18 03			jr .pastdmark  
8301 ..			.dmark: db "SB4"  
8304 f1			.pastdmark: pop af  
8305			endm  
# End of macro DMARK
8305			;		push af 
8305			;		ld a, '>' 
8305			;		ld (debug_mark),a 
8305			;		pop af 
8305					CALLMONITOR 
8305 cd 6f ee			call debug_vector  
8308				endm  
# End of macro CALLMONITOR
8308				endif 
8308			 
8308 00				nop 
8309 00				nop 
830a 00				nop 
830b			 
830b				; now set 0 in every page to mark as a free block 
830b			 
830b 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
830d 21 40 00			ld hl, STORE_BLOCK_PHY 
8310			 
8310 3e 00		.setmark1:   	ld a,0 
8312 e5					push hl 
8313 c5					push bc 
8314 cd ac 80				call se_writebyte 
8317 3e 0a			ld a, 10 
8319 cd e5 89			call aDelayInMS 
831c 23				inc hl 
831d cd ac 80				call se_writebyte 
8320 3e 0a			ld a, 10 
8322 cd e5 89			call aDelayInMS 
8325 2b				dec hl 
8326 c1					pop bc 
8327 e1					pop hl 
8328 3e 40				ld a, STORE_BLOCK_PHY 
832a cd ea 8c				call addatohl 
832d 10 e1				djnz .setmark1 
832f			 
832f 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
8331 3e 00		.setmark2:   	ld a,0 
8333 e5					push hl 
8334 c5					push bc 
8335 cd ac 80				call se_writebyte 
8338 3e 0a			ld a, 10 
833a cd e5 89			call aDelayInMS 
833d 23				inc hl 
833e cd ac 80				call se_writebyte 
8341 3e 0a			ld a, 10 
8343 cd e5 89			call aDelayInMS 
8346 2b				dec hl 
8347 c1					pop bc 
8348 e1					pop hl 
8349 3e 40				ld a, STORE_BLOCK_PHY 
834b cd ea 8c				call addatohl 
834e 10 e1				djnz .setmark2 
8350			 
8350					 
8350			 
8350			 
8350 c9				ret 
8351			 
8351			 
8351			 
8351			 
8351 .. 00		.defaultbanklabl:   db "BankLabel_",0 
835c			 
835c			 
835c			 
835c			; Label Bank 
835c			; ---------- 
835c			; 
835c			; With current bank 
835c			; Read block 0 
835c			; Set label 
835c			; Write block 0 
835c			 
835c			; label str pointer in hl 
835c			 
835c			storage_label:     
835c			 
835c				if DEBUG_STORESE 
835c					DMARK "LBL" 
835c f5				push af  
835d 3a 71 83			ld a, (.dmark)  
8360 32 65 ee			ld (debug_mark),a  
8363 3a 72 83			ld a, (.dmark+1)  
8366 32 66 ee			ld (debug_mark+1),a  
8369 3a 73 83			ld a, (.dmark+2)  
836c 32 67 ee			ld (debug_mark+2),a  
836f 18 03			jr .pastdmark  
8371 ..			.dmark: db "LBL"  
8374 f1			.pastdmark: pop af  
8375			endm  
# End of macro DMARK
8375					CALLMONITOR 
8375 cd 6f ee			call debug_vector  
8378				endm  
# End of macro CALLMONITOR
8378				endif 
8378			 
8378 e5				push hl 
8379			 
8379 cd 38 82			call storage_get_block_0 
837c			 
837c				; set default label 
837c			 
837c e1				pop hl 
837d			 
837d 11 77 ea		 	ld de, store_page+3 
8380 01 0f 00			ld bc, 15 
8383				if DEBUG_STORESE 
8383					DMARK "LB3" 
8383 f5				push af  
8384 3a 98 83			ld a, (.dmark)  
8387 32 65 ee			ld (debug_mark),a  
838a 3a 99 83			ld a, (.dmark+1)  
838d 32 66 ee			ld (debug_mark+1),a  
8390 3a 9a 83			ld a, (.dmark+2)  
8393 32 67 ee			ld (debug_mark+2),a  
8396 18 03			jr .pastdmark  
8398 ..			.dmark: db "LB3"  
839b f1			.pastdmark: pop af  
839c			endm  
# End of macro DMARK
839c					CALLMONITOR 
839c cd 6f ee			call debug_vector  
839f				endm  
# End of macro CALLMONITOR
839f				endif 
839f ed b0			ldir 
83a1				; save default page 0 
83a1			 
83a1 21 00 00			ld hl, 0 
83a4 11 74 ea			ld de, store_page 
83a7				if DEBUG_STORESE 
83a7					DMARK "LBW" 
83a7 f5				push af  
83a8 3a bc 83			ld a, (.dmark)  
83ab 32 65 ee			ld (debug_mark),a  
83ae 3a bd 83			ld a, (.dmark+1)  
83b1 32 66 ee			ld (debug_mark+1),a  
83b4 3a be 83			ld a, (.dmark+2)  
83b7 32 67 ee			ld (debug_mark+2),a  
83ba 18 03			jr .pastdmark  
83bc ..			.dmark: db "LBW"  
83bf f1			.pastdmark: pop af  
83c0			endm  
# End of macro DMARK
83c0					CALLMONITOR 
83c0 cd 6f ee			call debug_vector  
83c3				endm  
# End of macro CALLMONITOR
83c3				endif 
83c3 cd ec 81			call storage_write_block 
83c6			 
83c6 c9				ret 
83c7			 
83c7			 
83c7			 
83c7			; Read Block 0 - Config 
83c7			; --------------------- 
83c7			; 
83c7			; With current bank 
83c7			; Call presence test 
83c7			;    If not present format/init bank  
83c7			; Read block 0  
83c7			;  
83c7			 
83c7			 
83c7			; Dir 
83c7			; --- 
83c7			; 
83c7			; With current bank 
83c7			; Load Block 0 Config 
83c7			; Get max file id number 
83c7			; For each logical block 
83c7			;    Read block read byte 2 
83c7			;      if first block of file 
83c7			;         Display file name 
83c7			;         Display type flags for file 
83c7			;        
83c7			 
83c7			; moving to words as this requires stack control 
83c7			 
83c7			 
83c7			; Delete File 
83c7			; ----------- 
83c7			; 
83c7			; With current bank 
83c7			; 
83c7			; Load Block 0 Config 
83c7			; Get max file id number 
83c7			; For each logical block 
83c7			;    Read block file id 
83c7			;      If first block of file and dont have file id 
83c7			;         if file to delete 
83c7			;         Save file id 
83c7			;         Null file id 
83c7			;         Write this block back 
83c7			;      If file id is one saved 
83c7			;         Null file id 
83c7			;         Write this block back 
83c7			 
83c7			 
83c7			.se_done: 
83c7 e1				pop hl 
83c8 c9				ret 
83c9			 
83c9			storage_erase: 
83c9			 
83c9				; hl contains the file id 
83c9			 
83c9 5d				ld e, l 
83ca 16 00			ld d, 0 
83cc 21 40 00			ld hl, STORE_BLOCK_PHY 
83cf					if DEBUG_FORTH_WORDS 
83cf						DMARK "ERA" 
83cf f5				push af  
83d0 3a e4 83			ld a, (.dmark)  
83d3 32 65 ee			ld (debug_mark),a  
83d6 3a e5 83			ld a, (.dmark+1)  
83d9 32 66 ee			ld (debug_mark+1),a  
83dc 3a e6 83			ld a, (.dmark+2)  
83df 32 67 ee			ld (debug_mark+2),a  
83e2 18 03			jr .pastdmark  
83e4 ..			.dmark: db "ERA"  
83e7 f1			.pastdmark: pop af  
83e8			endm  
# End of macro DMARK
83e8						CALLMONITOR 
83e8 cd 6f ee			call debug_vector  
83eb				endm  
# End of macro CALLMONITOR
83eb					endif 
83eb cd ba 84			call storage_findnextid 
83ee cd 13 8d			call ishlzero 
83f1 c8				ret z 
83f2			 
83f2 e5				push hl 
83f3			 
83f3				; TODO check file not found 
83f3			 
83f3 11 74 ea			ld de, store_page 
83f6 cd 87 81			call storage_read_block 
83f9			 
83f9 cd 13 8d			call ishlzero 
83fc ca c7 83			jp z,.se_done 
83ff			 
83ff					if DEBUG_FORTH_WORDS 
83ff						DMARK "ER1" 
83ff f5				push af  
8400 3a 14 84			ld a, (.dmark)  
8403 32 65 ee			ld (debug_mark),a  
8406 3a 15 84			ld a, (.dmark+1)  
8409 32 66 ee			ld (debug_mark+1),a  
840c 3a 16 84			ld a, (.dmark+2)  
840f 32 67 ee			ld (debug_mark+2),a  
8412 18 03			jr .pastdmark  
8414 ..			.dmark: db "ER1"  
8417 f1			.pastdmark: pop af  
8418			endm  
# End of macro DMARK
8418						CALLMONITOR 
8418 cd 6f ee			call debug_vector  
841b				endm  
# End of macro CALLMONITOR
841b					endif 
841b 3a 74 ea			ld a, (store_page)	; get file id 
841e 32 68 ea			ld (store_tmpid), a 
8421			 
8421 3a 76 ea			ld a, (store_page+2)    ; get count of extends 
8424 32 67 ea			ld (store_tmpext), a 
8427			 
8427				; wipe file header 
8427			 
8427 e1				pop hl 
8428 3e 00			ld a, 0 
842a 32 74 ea			ld (store_page), a 
842d 32 75 ea			ld (store_page+1),a 
8430 11 74 ea			ld de, store_page 
8433					if DEBUG_FORTH_WORDS 
8433						DMARK "ER2" 
8433 f5				push af  
8434 3a 48 84			ld a, (.dmark)  
8437 32 65 ee			ld (debug_mark),a  
843a 3a 49 84			ld a, (.dmark+1)  
843d 32 66 ee			ld (debug_mark+1),a  
8440 3a 4a 84			ld a, (.dmark+2)  
8443 32 67 ee			ld (debug_mark+2),a  
8446 18 03			jr .pastdmark  
8448 ..			.dmark: db "ER2"  
844b f1			.pastdmark: pop af  
844c			endm  
# End of macro DMARK
844c						CALLMONITOR 
844c cd 6f ee			call debug_vector  
844f				endm  
# End of macro CALLMONITOR
844f					endif 
844f cd ec 81			call storage_write_block 
8452			 
8452			 
8452				; wipe file extents 
8452			 
8452 3a 67 ea			ld a, (store_tmpext) 
8455 47				ld b, a 
8456			 
8456			.eraext:	  
8456 c5				push bc 
8457			 
8457 21 40 00			ld hl, STORE_BLOCK_PHY 
845a 3a 68 ea			ld a,(store_tmpid) 
845d 5f				ld e, a 
845e 50				ld d, b	 
845f					if DEBUG_FORTH_WORDS 
845f						DMARK "ER3" 
845f f5				push af  
8460 3a 74 84			ld a, (.dmark)  
8463 32 65 ee			ld (debug_mark),a  
8466 3a 75 84			ld a, (.dmark+1)  
8469 32 66 ee			ld (debug_mark+1),a  
846c 3a 76 84			ld a, (.dmark+2)  
846f 32 67 ee			ld (debug_mark+2),a  
8472 18 03			jr .pastdmark  
8474 ..			.dmark: db "ER3"  
8477 f1			.pastdmark: pop af  
8478			endm  
# End of macro DMARK
8478						CALLMONITOR 
8478 cd 6f ee			call debug_vector  
847b				endm  
# End of macro CALLMONITOR
847b					endif 
847b cd ba 84			call storage_findnextid 
847e cd 13 8d			call ishlzero 
8481 ca c7 83			jp z,.se_done 
8484			 
8484 e5				push hl 
8485 11 74 ea			ld de, store_page 
8488 cd 87 81			call storage_read_block 
848b			 
848b				; free block	 
848b			 
848b 3e 00			ld a, 0 
848d 32 74 ea			ld (store_page), a 
8490 32 75 ea			ld (store_page+1),a 
8493 11 74 ea			ld de, store_page 
8496 e1				pop hl 
8497					if DEBUG_FORTH_WORDS 
8497						DMARK "ER4" 
8497 f5				push af  
8498 3a ac 84			ld a, (.dmark)  
849b 32 65 ee			ld (debug_mark),a  
849e 3a ad 84			ld a, (.dmark+1)  
84a1 32 66 ee			ld (debug_mark+1),a  
84a4 3a ae 84			ld a, (.dmark+2)  
84a7 32 67 ee			ld (debug_mark+2),a  
84aa 18 03			jr .pastdmark  
84ac ..			.dmark: db "ER4"  
84af f1			.pastdmark: pop af  
84b0			endm  
# End of macro DMARK
84b0						CALLMONITOR 
84b0 cd 6f ee			call debug_vector  
84b3				endm  
# End of macro CALLMONITOR
84b3					endif 
84b3 cd ec 81			call storage_write_block 
84b6			 
84b6 c1				pop bc 
84b7 10 9d			djnz .eraext 
84b9			 
84b9 c9				ret 
84ba			 
84ba			 
84ba			; Find Free Block 
84ba			; --------------- 
84ba			; 
84ba			; With current bank 
84ba			;  
84ba			; From given starting logical block 
84ba			;    Read block  
84ba			;    If no file id 
84ba			;         Return block id 
84ba			 
84ba			 
84ba			; hl starting page number 
84ba			; hl contains free page number or zero if no pages free 
84ba			; e contains the file id to locate 
84ba			; d contains the block number 
84ba			 
84ba			; TODO change to find file id and use zero for free block 
84ba			 
84ba			storage_findnextid: 
84ba			 
84ba				; now locate first 0 page to mark as a free block 
84ba			 
84ba 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
84bc			;	ld hl, STORE_BLOCK_PHY 
84bc			 
84bc					if DEBUG_FORTH_WORDS 
84bc					DMARK "FNI" 
84bc f5				push af  
84bd 3a d1 84			ld a, (.dmark)  
84c0 32 65 ee			ld (debug_mark),a  
84c3 3a d2 84			ld a, (.dmark+1)  
84c6 32 66 ee			ld (debug_mark+1),a  
84c9 3a d3 84			ld a, (.dmark+2)  
84cc 32 67 ee			ld (debug_mark+2),a  
84cf 18 03			jr .pastdmark  
84d1 ..			.dmark: db "FNI"  
84d4 f1			.pastdmark: pop af  
84d5			endm  
# End of macro DMARK
84d5						CALLMONITOR 
84d5 cd 6f ee			call debug_vector  
84d8				endm  
# End of macro CALLMONITOR
84d8					endif 
84d8			.ff1:   	 
84d8 e5					push hl 
84d9 c5					push bc 
84da d5					push de 
84db cd ab 80				call se_readbyte 
84de 5f					ld e,a 
84df 23					inc hl 
84e0 cd ab 80				call se_readbyte 
84e3 57					ld d, a 
84e4 e1					pop hl 
84e5 e5					push hl 
84e6 cd 08 8d				call cmp16 
84e9 28 49				jr z, .fffound 
84eb			 
84eb d1					pop de 
84ec c1					pop bc 
84ed e1					pop hl 
84ee			 
84ee					; is found? 
84ee					;cp e 
84ee					;ret z 
84ee			 
84ee 3e 40				ld a, STORE_BLOCK_PHY 
84f0 cd ea 8c				call addatohl 
84f3 10 e3				djnz .ff1 
84f5			 
84f5 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
84f7			.ff2:   	 
84f7			 
84f7 e5					push hl 
84f8 c5					push bc 
84f9 d5					push de 
84fa cd ab 80				call se_readbyte 
84fd 5f					ld e,a 
84fe 23					inc hl 
84ff cd ab 80				call se_readbyte 
8502 57					ld d, a 
8503			 
8503 e1					pop hl 
8504 e5					push hl 
8505 cd 08 8d				call cmp16 
8508 28 2a				jr z, .fffound 
850a			 
850a d1					pop de 
850b c1					pop bc 
850c e1					pop hl 
850d					; is found? 
850d					;cp e 
850d					;ret z 
850d			 
850d 3e 40				ld a, STORE_BLOCK_PHY 
850f cd ea 8c				call addatohl 
8512 10 e3				djnz .ff2 
8514			 
8514			 
8514					if DEBUG_FORTH_WORDS 
8514					DMARK "FN-" 
8514 f5				push af  
8515 3a 29 85			ld a, (.dmark)  
8518 32 65 ee			ld (debug_mark),a  
851b 3a 2a 85			ld a, (.dmark+1)  
851e 32 66 ee			ld (debug_mark+1),a  
8521 3a 2b 85			ld a, (.dmark+2)  
8524 32 67 ee			ld (debug_mark+2),a  
8527 18 03			jr .pastdmark  
8529 ..			.dmark: db "FN-"  
852c f1			.pastdmark: pop af  
852d			endm  
# End of macro DMARK
852d					;	push af 
852d					;	ld a, 'n' 
852d					;	ld (debug_mark),a 
852d					;	pop af 
852d						CALLMONITOR 
852d cd 6f ee			call debug_vector  
8530				endm  
# End of macro CALLMONITOR
8530					endif 
8530				; no free marks! 
8530 21 00 00				ld hl, 0 
8533 c9				ret 
8534			.fffound: 
8534				 
8534			 
8534 d1					pop de 
8535 c1					pop bc 
8536 e1					pop hl 
8537					if DEBUG_FORTH_WORDS 
8537					DMARK "FNF" 
8537 f5				push af  
8538 3a 4c 85			ld a, (.dmark)  
853b 32 65 ee			ld (debug_mark),a  
853e 3a 4d 85			ld a, (.dmark+1)  
8541 32 66 ee			ld (debug_mark+1),a  
8544 3a 4e 85			ld a, (.dmark+2)  
8547 32 67 ee			ld (debug_mark+2),a  
854a 18 03			jr .pastdmark  
854c ..			.dmark: db "FNF"  
854f f1			.pastdmark: pop af  
8550			endm  
# End of macro DMARK
8550					;	push af 
8550					;	ld a, 'n' 
8550					;	ld (debug_mark),a 
8550					;	pop af 
8550						CALLMONITOR 
8550 cd 6f ee			call debug_vector  
8553				endm  
# End of macro CALLMONITOR
8553					endif 
8553 c9				ret 
8554			 
8554			 
8554			 
8554			; Free Space 
8554			; ---------- 
8554			; 
8554			; With current bank 
8554			; 
8554			; Set block count to zero 
8554			; Starting with first logical block 
8554			;      Find free block  
8554			;      If block id given, increment block count 
8554			; 
8554			;  
8554			 
8554			 
8554			; hl contains count of free blocks 
8554			 
8554			storage_freeblocks: 
8554			 
8554				; now locate first 0 page to mark as a free block 
8554			 
8554 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
8556 21 40 00			ld hl, STORE_BLOCK_PHY 
8559 11 00 00			ld de, 0 
855c			 
855c			.fb1:   	 
855c e5					push hl 
855d c5					push bc 
855e d5					push de 
855f cd ab 80				call se_readbyte 
8562 d1					pop de 
8563 c1					pop bc 
8564 e1					pop hl 
8565			 
8565					; is free? 
8565 fe 00				cp 0 
8567 20 01				jr nz, .ff1cont 
8569 13					inc de 
856a			 
856a			.ff1cont: 
856a			 
856a			 
856a 3e 40				ld a, STORE_BLOCK_PHY 
856c cd ea 8c				call addatohl 
856f 10 eb				djnz .fb1 
8571			 
8571 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
8573			.fb2:   	 
8573 e5					push hl 
8574 c5					push bc 
8575 d5					push de 
8576 cd ab 80				call se_readbyte 
8579 d1					pop de 
857a c1					pop bc 
857b e1					pop hl 
857c			 
857c					; is free? 
857c fe 00				cp 0 
857e 20 01				jr nz, .ff2cont 
8580 13					inc de 
8581			 
8581			.ff2cont: 
8581			 
8581 3e 40				ld a, STORE_BLOCK_PHY 
8583 cd ea 8c				call addatohl 
8586 10 eb				djnz .fb2 
8588			 
8588 eb				ex de, hl 
8589 c9				ret 
858a			 
858a			; Get File ID 
858a			; ----------- 
858a			; 
858a			; With current bank 
858a			;  
858a			; Load Block 0 Config 
858a			; Get max file id number 
858a			; For each logical block 
858a			;    Read block file id 
858a			;      If first block of file and dont have file id 
858a			;         if file get id and exit 
858a			 
858a			 
858a			 
858a			 
858a			; Create File 
858a			; ----------- 
858a			; 
858a			; With current bank  
858a			; Load Block 0 Config 
858a			; Get max file id number 
858a			; Increment file id number 
858a			; Save Config 
858a			; Find free block 
858a			; Set buffer with file name and file id 
858a			; Write buffer to free block  
858a			 
858a			 
858a			; hl point to file name 
858a			; hl returns file id 
858a			 
858a			; file format: 
858a			; byte 0 - file id 
858a			; byte 1 - extent number 
858a			; byte 2-> data 
858a			 
858a			; format for extent number 0: 
858a			; 
858a			; byte 0 - file id 
858a			; byte 1 - extent 0 
858a			; byte 2 - extent count 
858a			; byte 3 -> file name and meta data 
858a			 
858a			 
858a			storage_create: 
858a				if DEBUG_STORESE 
858a					DMARK "SCR" 
858a f5				push af  
858b 3a 9f 85			ld a, (.dmark)  
858e 32 65 ee			ld (debug_mark),a  
8591 3a a0 85			ld a, (.dmark+1)  
8594 32 66 ee			ld (debug_mark+1),a  
8597 3a a1 85			ld a, (.dmark+2)  
859a 32 67 ee			ld (debug_mark+2),a  
859d 18 03			jr .pastdmark  
859f ..			.dmark: db "SCR"  
85a2 f1			.pastdmark: pop af  
85a3			endm  
# End of macro DMARK
85a3					CALLMONITOR 
85a3 cd 6f ee			call debug_vector  
85a6				endm  
# End of macro CALLMONITOR
85a6				endif 
85a6			 
85a6 e5				push hl		; save file name pointer 
85a7			 
85a7 cd 38 82			call storage_get_block_0 
85aa			 
85aa 3a 74 ea			ld a,(store_page)	; get current file id 
85ad 3c				inc a 
85ae 32 74 ea			ld (store_page),a 
85b1				 
85b1 32 68 ea			ld (store_tmpid),a			; save id 
85b4			 
85b4 21 00 00			ld hl, 0 
85b7 11 74 ea			ld de, store_page 
85ba				if DEBUG_STORESE 
85ba					DMARK "SCw" 
85ba f5				push af  
85bb 3a cf 85			ld a, (.dmark)  
85be 32 65 ee			ld (debug_mark),a  
85c1 3a d0 85			ld a, (.dmark+1)  
85c4 32 66 ee			ld (debug_mark+1),a  
85c7 3a d1 85			ld a, (.dmark+2)  
85ca 32 67 ee			ld (debug_mark+2),a  
85cd 18 03			jr .pastdmark  
85cf ..			.dmark: db "SCw"  
85d2 f1			.pastdmark: pop af  
85d3			endm  
# End of macro DMARK
85d3					CALLMONITOR 
85d3 cd 6f ee			call debug_vector  
85d6				endm  
# End of macro CALLMONITOR
85d6				endif 
85d6 cd ec 81			call storage_write_block	 ; save update 
85d9			 
85d9				if DEBUG_STORESE 
85d9 11 74 ea				ld de, store_page 
85dc					DMARK "SCC" 
85dc f5				push af  
85dd 3a f1 85			ld a, (.dmark)  
85e0 32 65 ee			ld (debug_mark),a  
85e3 3a f2 85			ld a, (.dmark+1)  
85e6 32 66 ee			ld (debug_mark+1),a  
85e9 3a f3 85			ld a, (.dmark+2)  
85ec 32 67 ee			ld (debug_mark+2),a  
85ef 18 03			jr .pastdmark  
85f1 ..			.dmark: db "SCC"  
85f4 f1			.pastdmark: pop af  
85f5			endm  
# End of macro DMARK
85f5					CALLMONITOR 
85f5 cd 6f ee			call debug_vector  
85f8				endm  
# End of macro CALLMONITOR
85f8				endif 
85f8				;  
85f8				 
85f8 21 40 00			ld hl, STORE_BLOCK_PHY 
85fb 11 00 00			ld de, 0 
85fe cd ba 84			call storage_findnextid 
8601			 
8601 22 5f ea			ld (store_tmppageid), hl    ; save page to use  
8604			 
8604				; TODO detect 0 = no spare blocks 
8604			 
8604				; hl now contains the free page to use for the file header page 
8604			 
8604				if DEBUG_STORESE 
8604				DMARK "SCF" 
8604 f5				push af  
8605 3a 19 86			ld a, (.dmark)  
8608 32 65 ee			ld (debug_mark),a  
860b 3a 1a 86			ld a, (.dmark+1)  
860e 32 66 ee			ld (debug_mark+1),a  
8611 3a 1b 86			ld a, (.dmark+2)  
8614 32 67 ee			ld (debug_mark+2),a  
8617 18 03			jr .pastdmark  
8619 ..			.dmark: db "SCF"  
861c f1			.pastdmark: pop af  
861d			endm  
# End of macro DMARK
861d					CALLMONITOR 
861d cd 6f ee			call debug_vector  
8620				endm  
# End of macro CALLMONITOR
8620				endif 
8620			 
8620 22 5f ea			ld (store_tmppageid), hl 
8623				 
8623 3a 68 ea			ld a,(store_tmpid)    ; get file id 
8626			;	ld a, (store_filecache)			; save to cache 
8626			 
8626 32 74 ea			ld (store_page),a    ; set page id 
8629 3e 00			ld a, 0			 ; extent 0 is file header 
862b 32 75 ea			ld (store_page+1), a   ; set file extent 
862e			 
862e 32 76 ea			ld (store_page+2), a   ; extent count for the file 
8631			 
8631			;	inc hl 		; init block 0 of file 
8631			;	inc hl   		; skip file and extent id 
8631			 ;       ld a, 0 
8631			;	ld (hl),a 
8631			;	ld a, (store_filecache+1)  	; save to cache 
8631			 
8631			;	inc hl    ; file name 
8631				 
8631				 
8631 11 77 ea			ld de, store_page+3    ; get buffer for term string to use as file name 
8634				if DEBUG_STORESE 
8634					DMARK "SCc" 
8634 f5				push af  
8635 3a 49 86			ld a, (.dmark)  
8638 32 65 ee			ld (debug_mark),a  
863b 3a 4a 86			ld a, (.dmark+1)  
863e 32 66 ee			ld (debug_mark+1),a  
8641 3a 4b 86			ld a, (.dmark+2)  
8644 32 67 ee			ld (debug_mark+2),a  
8647 18 03			jr .pastdmark  
8649 ..			.dmark: db "SCc"  
864c f1			.pastdmark: pop af  
864d			endm  
# End of macro DMARK
864d					CALLMONITOR 
864d cd 6f ee			call debug_vector  
8650				endm  
# End of macro CALLMONITOR
8650				endif 
8650 e1				pop hl    ; get zero term string 
8651 e5				push hl 
8652 3e 00			ld a, 0 
8654 cd 5b 90			call strlent 
8657 23				inc hl   ; cover zero term 
8658 06 00			ld b,0 
865a 4d				ld c,l 
865b e1				pop hl 
865c				;ex de, hl 
865c				if DEBUG_STORESE 
865c					DMARK "SCa" 
865c f5				push af  
865d 3a 71 86			ld a, (.dmark)  
8660 32 65 ee			ld (debug_mark),a  
8663 3a 72 86			ld a, (.dmark+1)  
8666 32 66 ee			ld (debug_mark+1),a  
8669 3a 73 86			ld a, (.dmark+2)  
866c 32 67 ee			ld (debug_mark+2),a  
866f 18 03			jr .pastdmark  
8671 ..			.dmark: db "SCa"  
8674 f1			.pastdmark: pop af  
8675			endm  
# End of macro DMARK
8675					;push af 
8675					;ld a, 'a' 
8675					;ld (debug_mark),a 
8675					;pop af 
8675					CALLMONITOR 
8675 cd 6f ee			call debug_vector  
8678				endm  
# End of macro CALLMONITOR
8678				endif 
8678 ed b0			ldir    ; copy zero term string 
867a				if DEBUG_STORESE 
867a					DMARK "SCA" 
867a f5				push af  
867b 3a 8f 86			ld a, (.dmark)  
867e 32 65 ee			ld (debug_mark),a  
8681 3a 90 86			ld a, (.dmark+1)  
8684 32 66 ee			ld (debug_mark+1),a  
8687 3a 91 86			ld a, (.dmark+2)  
868a 32 67 ee			ld (debug_mark+2),a  
868d 18 03			jr .pastdmark  
868f ..			.dmark: db "SCA"  
8692 f1			.pastdmark: pop af  
8693			endm  
# End of macro DMARK
8693					CALLMONITOR 
8693 cd 6f ee			call debug_vector  
8696				endm  
# End of macro CALLMONITOR
8696				endif 
8696			 
8696				; write file header page 
8696			 
8696 2a 5f ea			ld hl,(store_tmppageid) 
8699 11 74 ea			ld de, store_page 
869c				if DEBUG_STORESE 
869c					DMARK "SCb" 
869c f5				push af  
869d 3a b1 86			ld a, (.dmark)  
86a0 32 65 ee			ld (debug_mark),a  
86a3 3a b2 86			ld a, (.dmark+1)  
86a6 32 66 ee			ld (debug_mark+1),a  
86a9 3a b3 86			ld a, (.dmark+2)  
86ac 32 67 ee			ld (debug_mark+2),a  
86af 18 03			jr .pastdmark  
86b1 ..			.dmark: db "SCb"  
86b4 f1			.pastdmark: pop af  
86b5			endm  
# End of macro DMARK
86b5					;push af 
86b5					;ld a, 'b' 
86b5					;ld (debug_mark),a 
86b5					;pop af 
86b5					CALLMONITOR 
86b5 cd 6f ee			call debug_vector  
86b8				endm  
# End of macro CALLMONITOR
86b8				endif 
86b8 cd ec 81			call storage_write_block 
86bb			 
86bb 3a 68 ea			ld a, (store_tmpid) 
86be 6f				ld l, a 
86bf 26 00			ld h,0 
86c1				if DEBUG_STORESE 
86c1					DMARK "SCz" 
86c1 f5				push af  
86c2 3a d6 86			ld a, (.dmark)  
86c5 32 65 ee			ld (debug_mark),a  
86c8 3a d7 86			ld a, (.dmark+1)  
86cb 32 66 ee			ld (debug_mark+1),a  
86ce 3a d8 86			ld a, (.dmark+2)  
86d1 32 67 ee			ld (debug_mark+2),a  
86d4 18 03			jr .pastdmark  
86d6 ..			.dmark: db "SCz"  
86d9 f1			.pastdmark: pop af  
86da			endm  
# End of macro DMARK
86da					CALLMONITOR 
86da cd 6f ee			call debug_vector  
86dd				endm  
# End of macro CALLMONITOR
86dd				endif 
86dd c9				ret 
86de				 
86de			 
86de			 
86de			; 
86de			; Read File 
86de			; 
86de			; h - file id to locate 
86de			; l - extent to locate 
86de			; de - pointer to string to read into 
86de			; 
86de			; returns hl is 0 if block not found ie end of file or pointer to start of data read 
86de			 
86de			.sr_fail: 
86de d1				pop de 
86df c9				ret 
86e0			 
86e0			storage_read: 
86e0			 
86e0			 
86e0 d5				push de 
86e1			 
86e1			; TODO BUG the above push is it popped before the RET Z? 
86e1			 
86e1			; TODO how to handle multiple part blocks 
86e1			 
86e1				; locate file extent to read 
86e1			 
86e1 5c				ld e, h 
86e2 55				ld d, l 
86e3			 
86e3			.srext: 
86e3 22 72 ea			ld (store_readptr), hl     ; save the current extent to load 
86e6 ed 53 70 ea		ld (store_readbuf), de     ; save the current buffer to load in to 
86ea			 
86ea 21 40 00			ld hl, STORE_BLOCK_PHY 
86ed				if DEBUG_STORESE 
86ed					DMARK "sre" 
86ed f5				push af  
86ee 3a 02 87			ld a, (.dmark)  
86f1 32 65 ee			ld (debug_mark),a  
86f4 3a 03 87			ld a, (.dmark+1)  
86f7 32 66 ee			ld (debug_mark+1),a  
86fa 3a 04 87			ld a, (.dmark+2)  
86fd 32 67 ee			ld (debug_mark+2),a  
8700 18 03			jr .pastdmark  
8702 ..			.dmark: db "sre"  
8705 f1			.pastdmark: pop af  
8706			endm  
# End of macro DMARK
8706					CALLMONITOR 
8706 cd 6f ee			call debug_vector  
8709				endm  
# End of macro CALLMONITOR
8709				endif 
8709 cd ba 84			call storage_findnextid 
870c			 
870c				if DEBUG_STORESE 
870c					DMARK "srf" 
870c f5				push af  
870d 3a 21 87			ld a, (.dmark)  
8710 32 65 ee			ld (debug_mark),a  
8713 3a 22 87			ld a, (.dmark+1)  
8716 32 66 ee			ld (debug_mark+1),a  
8719 3a 23 87			ld a, (.dmark+2)  
871c 32 67 ee			ld (debug_mark+2),a  
871f 18 03			jr .pastdmark  
8721 ..			.dmark: db "srf"  
8724 f1			.pastdmark: pop af  
8725			endm  
# End of macro DMARK
8725					CALLMONITOR 
8725 cd 6f ee			call debug_vector  
8728				endm  
# End of macro CALLMONITOR
8728				endif 
8728 cd 13 8d			call ishlzero 
872b			;	ld a, l 
872b			;	add h 
872b			;	cp 0 
872b 28 b1			jr z,.sr_fail			; block not found so EOF 
872d			 
872d				; save current address for use by higher level words etc 
872d			 
872d 22 65 ea			ld (store_openaddr),hl 
8730			 
8730			 
8730				; hl contains page number to load 
8730 d1				pop de   ; get storage 
8731 ed 53 70 ea		ld (store_readbuf), de     ; current buffer to load in to 
8735 d5				push de 
8736				if DEBUG_STORESE 
8736					DMARK "srg" 
8736 f5				push af  
8737 3a 4b 87			ld a, (.dmark)  
873a 32 65 ee			ld (debug_mark),a  
873d 3a 4c 87			ld a, (.dmark+1)  
8740 32 66 ee			ld (debug_mark+1),a  
8743 3a 4d 87			ld a, (.dmark+2)  
8746 32 67 ee			ld (debug_mark+2),a  
8749 18 03			jr .pastdmark  
874b ..			.dmark: db "srg"  
874e f1			.pastdmark: pop af  
874f			endm  
# End of macro DMARK
874f					CALLMONITOR 
874f cd 6f ee			call debug_vector  
8752				endm  
# End of macro CALLMONITOR
8752				endif 
8752 cd 87 81			call storage_read_block 
8755			 
8755				; if this a continuation read??? 
8755			 
8755 2a 70 ea			ld hl, (store_readbuf)     ; current buffer to load in to 
8758			 
8758 3e 3f			ld a, STORE_BLOCK_PHY-1 
875a cd ea 8c			call addatohl 
875d 7e				ld a,(hl) 
875e fe 00			cp 0 
8760 28 02			jr z, .markiscont 
8762 3e ff			ld a, 255 
8764			 
8764			.markiscont: 
8764 32 67 ea			ld (store_readcont), a 
8767			 
8767				if DEBUG_STORESE 
8767					DMARK "srC" 
8767 f5				push af  
8768 3a 7c 87			ld a, (.dmark)  
876b 32 65 ee			ld (debug_mark),a  
876e 3a 7d 87			ld a, (.dmark+1)  
8771 32 66 ee			ld (debug_mark+1),a  
8774 3a 7e 87			ld a, (.dmark+2)  
8777 32 67 ee			ld (debug_mark+2),a  
877a 18 03			jr .pastdmark  
877c ..			.dmark: db "srC"  
877f f1			.pastdmark: pop af  
8780			endm  
# End of macro DMARK
8780					CALLMONITOR 
8780 cd 6f ee			call debug_vector  
8783				endm  
# End of macro CALLMONITOR
8783				endif 
8783				; only short reads enabled 
8783			 
8783 3a 6f ea			ld a, (store_longread) 
8786 fe 00			cp 0 
8788 ca 55 88			jp z, .readdone 
878b			 
878b			; TODO if block has no zeros then need to read next block  
878b			; this code appears to be very buggy. Have added above a flag to disable/enable the following code for later debug 
878b			; check last byte of physical block. 
878b			; if not zero then the next block needs to be loaded 
878b			 
878b			 
878b 2a 70 ea			ld hl, (store_readbuf)     ; current buffer to load in to 
878e			 
878e 3e 3f			ld a, STORE_BLOCK_PHY-1 
8790 cd ea 8c			call addatohl 
8793				;dec hl 
8793 7e				ld a,(hl) 
8794				if DEBUG_STORESE 
8794					DMARK "sr?" 
8794 f5				push af  
8795 3a a9 87			ld a, (.dmark)  
8798 32 65 ee			ld (debug_mark),a  
879b 3a aa 87			ld a, (.dmark+1)  
879e 32 66 ee			ld (debug_mark+1),a  
87a1 3a ab 87			ld a, (.dmark+2)  
87a4 32 67 ee			ld (debug_mark+2),a  
87a7 18 03			jr .pastdmark  
87a9 ..			.dmark: db "sr?"  
87ac f1			.pastdmark: pop af  
87ad			endm  
# End of macro DMARK
87ad					CALLMONITOR 
87ad cd 6f ee			call debug_vector  
87b0				endm  
# End of macro CALLMONITOR
87b0				endif 
87b0 fe 00			cp 0 
87b2 ca 55 88			jp z, .readdone 
87b5			 
87b5				; last byte is not zero so there is more in the next extent. Load it on the end.	 
87b5			 
87b5 23				inc hl 
87b6			 
87b6 22 70 ea			ld (store_readbuf), hl     ; save the current buffer to load in to 
87b9			 
87b9 ed 5b 72 ea		ld de, (store_readptr)     ; save the current extent to load 
87bd			 
87bd eb				ex de, hl 
87be			 
87be				; next ext 
87be			 
87be 23				inc hl 
87bf 22 72 ea			ld  (store_readptr), hl     ; save the current extent to load 
87c2			 
87c2				if DEBUG_STORESE 
87c2					DMARK "sF2" 
87c2 f5				push af  
87c3 3a d7 87			ld a, (.dmark)  
87c6 32 65 ee			ld (debug_mark),a  
87c9 3a d8 87			ld a, (.dmark+1)  
87cc 32 66 ee			ld (debug_mark+1),a  
87cf 3a d9 87			ld a, (.dmark+2)  
87d2 32 67 ee			ld (debug_mark+2),a  
87d5 18 03			jr .pastdmark  
87d7 ..			.dmark: db "sF2"  
87da f1			.pastdmark: pop af  
87db			endm  
# End of macro DMARK
87db					CALLMONITOR 
87db cd 6f ee			call debug_vector  
87de				endm  
# End of macro CALLMONITOR
87de				endif 
87de			 
87de				; get and load block 
87de			 
87de cd ba 84			call storage_findnextid 
87e1			 
87e1				if DEBUG_STORESE 
87e1					DMARK "sf2" 
87e1 f5				push af  
87e2 3a f6 87			ld a, (.dmark)  
87e5 32 65 ee			ld (debug_mark),a  
87e8 3a f7 87			ld a, (.dmark+1)  
87eb 32 66 ee			ld (debug_mark+1),a  
87ee 3a f8 87			ld a, (.dmark+2)  
87f1 32 67 ee			ld (debug_mark+2),a  
87f4 18 03			jr .pastdmark  
87f6 ..			.dmark: db "sf2"  
87f9 f1			.pastdmark: pop af  
87fa			endm  
# End of macro DMARK
87fa					CALLMONITOR 
87fa cd 6f ee			call debug_vector  
87fd				endm  
# End of macro CALLMONITOR
87fd				endif 
87fd cd 13 8d			call ishlzero 
8800			;	ld a, l 
8800			;	add h 
8800			;	cp 0 
8800 ca de 86			jp z,.sr_fail			; block not found so EOF 
8803				 
8803				; save current address for use by higher level words etc 
8803			 
8803 22 65 ea			ld (store_openaddr),hl 
8806			 
8806 cd 87 81			call storage_read_block 
8809			 
8809				; on a continuation block, we now have the file id and ext in the middle of the block 
8809				; we need to pull everything back  
8809			 
8809 ed 5b 70 ea		ld de, (store_readbuf)     ; current buffer to nudge into 
880d 2a 70 ea			ld hl, (store_readbuf)     ; current buffer where data actually exists 
8810 23				inc hl 
8811 23				inc hl     ; skip id and ext 
8812 01 40 00			ld bc, STORE_BLOCK_PHY 
8815				if DEBUG_STORESE 
8815					DMARK "SR<" 
8815 f5				push af  
8816 3a 2a 88			ld a, (.dmark)  
8819 32 65 ee			ld (debug_mark),a  
881c 3a 2b 88			ld a, (.dmark+1)  
881f 32 66 ee			ld (debug_mark+1),a  
8822 3a 2c 88			ld a, (.dmark+2)  
8825 32 67 ee			ld (debug_mark+2),a  
8828 18 03			jr .pastdmark  
882a ..			.dmark: db "SR<"  
882d f1			.pastdmark: pop af  
882e			endm  
# End of macro DMARK
882e					CALLMONITOR 
882e cd 6f ee			call debug_vector  
8831				endm  
# End of macro CALLMONITOR
8831				endif 
8831 ed b0			ldir     ; copy data 
8833			 
8833				; move the pointer back and pretend we have a full buffer for next recheck 
8833			 
8833 1b				dec de 
8834 1b				dec de 
8835			 
8835			; TODO do pop below now short circuit loop????? 
8835 c1				pop bc     ; get rid of spare de on stack 
8836				if DEBUG_STORESE 
8836					DMARK "SR>" 
8836 f5				push af  
8837 3a 4b 88			ld a, (.dmark)  
883a 32 65 ee			ld (debug_mark),a  
883d 3a 4c 88			ld a, (.dmark+1)  
8840 32 66 ee			ld (debug_mark+1),a  
8843 3a 4d 88			ld a, (.dmark+2)  
8846 32 67 ee			ld (debug_mark+2),a  
8849 18 03			jr .pastdmark  
884b ..			.dmark: db "SR>"  
884e f1			.pastdmark: pop af  
884f			endm  
# End of macro DMARK
884f					CALLMONITOR 
884f cd 6f ee			call debug_vector  
8852				endm  
# End of macro CALLMONITOR
8852				endif 
8852 c3 e3 86			jp .srext 
8855			 
8855			 
8855			 
8855			 
8855			 
8855			.readdone:		 
8855 e1				pop hl 		 ; return start of data to show as not EOF 
8856 23				inc hl   ; past file id 
8857 23				inc hl   ; past ext 
8858				if DEBUG_STORESE 
8858					DMARK "SRe" 
8858 f5				push af  
8859 3a 6d 88			ld a, (.dmark)  
885c 32 65 ee			ld (debug_mark),a  
885f 3a 6e 88			ld a, (.dmark+1)  
8862 32 66 ee			ld (debug_mark+1),a  
8865 3a 6f 88			ld a, (.dmark+2)  
8868 32 67 ee			ld (debug_mark+2),a  
886b 18 03			jr .pastdmark  
886d ..			.dmark: db "SRe"  
8870 f1			.pastdmark: pop af  
8871			endm  
# End of macro DMARK
8871					CALLMONITOR 
8871 cd 6f ee			call debug_vector  
8874				endm  
# End of macro CALLMONITOR
8874				endif 
8874 c9					ret 
8875			 
8875			 
8875			 
8875			; 
8875			; Append File 
8875			; 
8875			; hl - file id to locate 
8875			; de - pointer to (multi block) string to write 
8875			 
8875			.sa_notfound: 
8875 d1				pop de 
8876 c9				ret 
8877			 
8877			 
8877			storage_append: 
8877				; hl -  file id to append to 
8877				; de - string to append 
8877			 
8877 d5				push de 
8878				 
8878				if DEBUG_STORESE 
8878					DMARK "AP1" 
8878 f5				push af  
8879 3a 8d 88			ld a, (.dmark)  
887c 32 65 ee			ld (debug_mark),a  
887f 3a 8e 88			ld a, (.dmark+1)  
8882 32 66 ee			ld (debug_mark+1),a  
8885 3a 8f 88			ld a, (.dmark+2)  
8888 32 67 ee			ld (debug_mark+2),a  
888b 18 03			jr .pastdmark  
888d ..			.dmark: db "AP1"  
8890 f1			.pastdmark: pop af  
8891			endm  
# End of macro DMARK
8891					CALLMONITOR 
8891 cd 6f ee			call debug_vector  
8894				endm  
# End of macro CALLMONITOR
8894				endif 
8894			 
8894 7d				ld a, l 
8895 32 68 ea			ld (store_tmpid), a 
8898			 
8898				; get file header  
8898			 
8898 16 00			ld d, 0			 ; file extent to locate - file name details at item 0 
889a 3a 68 ea			ld a, (store_tmpid) 
889d 5f				ld e, a 
889e			 
889e 21 40 00				ld hl, STORE_BLOCK_PHY 
88a1 cd ba 84				call storage_findnextid 
88a4			 
88a4 cd 13 8d			call ishlzero 
88a7 28 cc			jr z, .sa_notfound 
88a9			 
88a9 22 5f ea			ld (store_tmppageid), hl 
88ac			 
88ac				; TODO handle file id not found 
88ac			 
88ac				if DEBUG_STORESE 
88ac					DMARK "AP2" 
88ac f5				push af  
88ad 3a c1 88			ld a, (.dmark)  
88b0 32 65 ee			ld (debug_mark),a  
88b3 3a c2 88			ld a, (.dmark+1)  
88b6 32 66 ee			ld (debug_mark+1),a  
88b9 3a c3 88			ld a, (.dmark+2)  
88bc 32 67 ee			ld (debug_mark+2),a  
88bf 18 03			jr .pastdmark  
88c1 ..			.dmark: db "AP2"  
88c4 f1			.pastdmark: pop af  
88c5			endm  
# End of macro DMARK
88c5					CALLMONITOR 
88c5 cd 6f ee			call debug_vector  
88c8				endm  
# End of macro CALLMONITOR
88c8				endif 
88c8			 
88c8				; update file extent count 
88c8			 
88c8 11 74 ea			ld de, store_page 
88cb			 
88cb cd 87 81			call storage_read_block 
88ce			 
88ce				if DEBUG_STORESE 
88ce					DMARK "AP3" 
88ce f5				push af  
88cf 3a e3 88			ld a, (.dmark)  
88d2 32 65 ee			ld (debug_mark),a  
88d5 3a e4 88			ld a, (.dmark+1)  
88d8 32 66 ee			ld (debug_mark+1),a  
88db 3a e5 88			ld a, (.dmark+2)  
88de 32 67 ee			ld (debug_mark+2),a  
88e1 18 03			jr .pastdmark  
88e3 ..			.dmark: db "AP3"  
88e6 f1			.pastdmark: pop af  
88e7			endm  
# End of macro DMARK
88e7					CALLMONITOR 
88e7 cd 6f ee			call debug_vector  
88ea				endm  
# End of macro CALLMONITOR
88ea				endif 
88ea			;	ld (store_tmppageid), hl 
88ea			 
88ea 3a 76 ea			ld a, (store_page+2) 
88ed 3c				inc a 
88ee 32 76 ea			ld (store_page+2), a 
88f1 32 67 ea			ld (store_tmpext), a 
88f4				 
88f4				if DEBUG_STORESE 
88f4					DMARK "AP3" 
88f4 f5				push af  
88f5 3a 09 89			ld a, (.dmark)  
88f8 32 65 ee			ld (debug_mark),a  
88fb 3a 0a 89			ld a, (.dmark+1)  
88fe 32 66 ee			ld (debug_mark+1),a  
8901 3a 0b 89			ld a, (.dmark+2)  
8904 32 67 ee			ld (debug_mark+2),a  
8907 18 03			jr .pastdmark  
8909 ..			.dmark: db "AP3"  
890c f1			.pastdmark: pop af  
890d			endm  
# End of macro DMARK
890d					CALLMONITOR 
890d cd 6f ee			call debug_vector  
8910				endm  
# End of macro CALLMONITOR
8910				endif 
8910 2a 5f ea			ld hl, (store_tmppageid) 
8913 11 74 ea			ld de, store_page 
8916 cd ec 81			call storage_write_block 
8919			 
8919				; find free block 
8919			 
8919 11 00 00			ld de, 0			 ; file extent to locate 
891c			 
891c 21 40 00				ld hl, STORE_BLOCK_PHY 
891f cd ba 84				call storage_findnextid 
8922 cd 13 8d			call ishlzero 
8925 ca 75 88			jp z, .sa_notfound 
8928			 
8928					; TODO handle no space left 
8928					 
8928 22 5f ea				ld (store_tmppageid), hl 
892b			 
892b				if DEBUG_STORESE 
892b					DMARK "AP4" 
892b f5				push af  
892c 3a 40 89			ld a, (.dmark)  
892f 32 65 ee			ld (debug_mark),a  
8932 3a 41 89			ld a, (.dmark+1)  
8935 32 66 ee			ld (debug_mark+1),a  
8938 3a 42 89			ld a, (.dmark+2)  
893b 32 67 ee			ld (debug_mark+2),a  
893e 18 03			jr .pastdmark  
8940 ..			.dmark: db "AP4"  
8943 f1			.pastdmark: pop af  
8944			endm  
# End of macro DMARK
8944					CALLMONITOR 
8944 cd 6f ee			call debug_vector  
8947				endm  
# End of macro CALLMONITOR
8947				endif 
8947					; init the buffer with zeros so we can id if the buffer is full or not 
8947			 
8947 e5					push hl 
8948 c5					push bc 
8949			 
8949 21 74 ea				ld hl, store_page 
894c 06 40				ld b, STORE_BLOCK_PHY 
894e 3e 00				ld a, 0 
8950 77			.zeroblock:	ld (hl), a 
8951 23					inc hl 
8952 10 fc				djnz .zeroblock 
8954			 
8954 c1					pop bc 
8955 e1					pop hl 
8956			 
8956					; construct block 
8956			 
8956 3a 68 ea				ld a, (store_tmpid) 
8959 32 74 ea				ld (store_page), a   ; file id 
895c 3a 67 ea				ld a, (store_tmpext)   ; extent for this block 
895f 32 75 ea				ld (store_page+1), a 
8962			 
8962 e1					pop hl    ; get string to write 
8963 06 3e				ld b, STORE_BLOCK_PHY-2       ; exclude count of file id and extent 
8965 11 76 ea				ld de, store_page+2 
8968			 
8968				if DEBUG_STORESE 
8968					DMARK "AP5" 
8968 f5				push af  
8969 3a 7d 89			ld a, (.dmark)  
896c 32 65 ee			ld (debug_mark),a  
896f 3a 7e 89			ld a, (.dmark+1)  
8972 32 66 ee			ld (debug_mark+1),a  
8975 3a 7f 89			ld a, (.dmark+2)  
8978 32 67 ee			ld (debug_mark+2),a  
897b 18 03			jr .pastdmark  
897d ..			.dmark: db "AP5"  
8980 f1			.pastdmark: pop af  
8981			endm  
# End of macro DMARK
8981					CALLMONITOR 
8981 cd 6f ee			call debug_vector  
8984				endm  
# End of macro CALLMONITOR
8984				endif 
8984			 
8984			 
8984			 
8984					; fill buffer with data until end of string or full block 
8984			 
8984 7e			.appd:		ld a, (hl) 
8985 12					ld (de), a 
8986 fe 00				cp 0 
8988 28 04				jr z, .appdone 
898a 23					inc hl 
898b 13					inc de 
898c 10 f6				djnz .appd 
898e			 
898e e5			.appdone:	push hl		 	; save current source in case we need to go around again 
898f f5					push af   		; save last byte dumped 
8990			 
8990			 
8990 2a 5f ea			ld hl, (store_tmppageid) 
8993 11 74 ea			ld de, store_page 
8996				if DEBUG_STORESE 
8996					DMARK "AP6" 
8996 f5				push af  
8997 3a ab 89			ld a, (.dmark)  
899a 32 65 ee			ld (debug_mark),a  
899d 3a ac 89			ld a, (.dmark+1)  
89a0 32 66 ee			ld (debug_mark+1),a  
89a3 3a ad 89			ld a, (.dmark+2)  
89a6 32 67 ee			ld (debug_mark+2),a  
89a9 18 03			jr .pastdmark  
89ab ..			.dmark: db "AP6"  
89ae f1			.pastdmark: pop af  
89af			endm  
# End of macro DMARK
89af					CALLMONITOR 
89af cd 6f ee			call debug_vector  
89b2				endm  
# End of macro CALLMONITOR
89b2				endif 
89b2 cd ec 81				call storage_write_block 
89b5			 
89b5			 
89b5				; was that a full block of data written? 
89b5				; any more to write out? 
89b5			 
89b5				; if yes then set vars and jump to start of function again 
89b5			 
89b5 f1					pop af 
89b6 d1					pop de 
89b7			 
89b7 fe 00				cp 0		 ; no, string was fully written 
89b9 c8					ret z 
89ba			 
89ba					; setup vars for next cycle 
89ba			 
89ba 3a 68 ea				ld a, (store_tmpid) 
89bd 6f					ld l, a 
89be 26 00				ld h, 0 
89c0			 
89c0 c3 77 88			 	jp storage_append	 ; yes, need to write out some more 
89c3			 
89c3			 
89c3			 
89c3			 
89c3			 
89c3			 
89c3			 
89c3			if DEBUG_STORECF 
89c3			storageput:	 
89c3					ret 
89c3			storageread: 
89c3					ld hl, store_page 
89c3					ld b, 200 
89c3					ld a,0 
89c3			.src:		ld (hl),a 
89c3					inc hl 
89c3					djnz .src 
89c3					 
89c3			 
89c3					ld de, 0 
89c3					ld bc, 1 
89c3					ld hl, store_page 
89c3					call cfRead 
89c3			 
89c3				call cfGetError 
89c3				ld hl,scratch 
89c3				call hexout 
89c3				ld hl, scratch+2 
89c3				ld a, 0 
89c3				ld (hl),a 
89c3				ld de, scratch 
89c3				ld a,display_row_1 
89c3				call str_at_display 
89c3				call update_display 
89c3			 
89c3					ld hl, store_page 
89c3					ld (os_cur_ptr),hl 
89c3			 
89c3					ret 
89c3			endif 
89c3			 
89c3			 
89c3			; Clear out the main buffer store (used to remove junk before writing a new block) 
89c3			 
89c3			storage_clear_page: 
89c3 e5				push hl 
89c4 d5				push de 
89c5 c5				push bc 
89c6 21 74 ea			ld hl, store_page 
89c9 3e 00			ld a, 0 
89cb 77				ld (hl), a 
89cc			 
89cc 11 75 ea			ld de, store_page+1 
89cf 01 19 01			ld bc, STORE_BLOCK_LOG+1 
89d2			 
89d2 ed b0			ldir 
89d4				 
89d4 c1				pop bc 
89d5 d1				pop de 
89d6 e1				pop hl 
89d7 c9				ret 
89d8			 
89d8			; eof 
# End of file firmware_storage.asm
89d8			  
89d8			; support routines for above hardware abstraction layer  
89d8			  
89d8			include "firmware_general.asm"        ; general support functions  
89d8			 
89d8			; word look up 
89d8			 
89d8			; in 
89d8			; a is the index 
89d8			; hl is pointer start of array 
89d8			; 
89d8			; returns 
89d8			; hl to the word 
89d8			; 
89d8			 
89d8			table_lookup:  
89d8 d5					push de 
89d9 eb					ex de, hl 
89da			 
89da 6f					ld l, a 
89db 26 00				ld h, 0 
89dd 29					add hl, hl 
89de 19					add hl, de 
89df 7e					ld a, (hl) 
89e0 23					inc hl 
89e1 66					ld h,(hl) 
89e2 6f					ld l, a 
89e3			 
89e3 d1					pop de 
89e4 c9					ret 
89e5			 
89e5			; Delay loops 
89e5			 
89e5			 
89e5			 
89e5			aDelayInMS: 
89e5 c5				push bc 
89e6 47				ld b,a 
89e7			msdelay: 
89e7 c5				push bc 
89e8				 
89e8			 
89e8 01 41 00			ld bc,041h 
89eb cd 03 8a			call delayloop 
89ee c1				pop bc 
89ef 05				dec b 
89f0 20 f5			jr nz,msdelay 
89f2			 
89f2			;if CPU_CLOCK_8MHZ 
89f2			;msdelay8: 
89f2			;	push bc 
89f2			;	 
89f2			; 
89f2			;	ld bc,041h 
89f2			;	call delayloop 
89f2			;	pop bc 
89f2			;	dec b 
89f2			;	jr nz,msdelay8 
89f2			;endif 
89f2			 
89f2			 
89f2 c1				pop bc 
89f3 c9				ret 
89f4			 
89f4			 
89f4			delay250ms: 
89f4				;push de 
89f4 01 00 40			ld bc, 04000h 
89f7 c3 03 8a			jp delayloop 
89fa			delay500ms: 
89fa				;push de 
89fa 01 00 80			ld bc, 08000h 
89fd c3 03 8a			jp delayloop 
8a00			delay1s: 
8a00				;push bc 
8a00			   ; Clobbers A, d and e 
8a00 01 00 00		    ld      bc,0      ; # 0ffffh = approx 1s 
8a03			delayloop: 
8a03 c5			    push bc 
8a04			 
8a04			if BASE_CPM 
8a04				ld bc, CPM_DELAY_TUNE 
8a04			.cpmloop: 
8a04				push bc 
8a04			 
8a04			endif 
8a04			 
8a04			 
8a04			 
8a04			delayloopi: 
8a04			;	push bc 
8a04			;.dl: 
8a04 cb 47		    bit     0,a    	; 8 
8a06 cb 47		    bit     0,a    	; 8 
8a08 cb 47		    bit     0,a    	; 8 
8a0a e6 ff		    and     255  	; 7 
8a0c 0b			    dec     bc      	; 6 
8a0d 79			    ld      a,c     	; 4 
8a0e b0			    or      b     	; 4 
8a0f c2 04 8a		    jp      nz,delayloopi   	; 10, total = 55 states/iteration 
8a12			    ; 65536 iterations * 55 states = 3604480 states = 2.00248 seconds 
8a12				;pop de 
8a12			;pop bc 
8a12			 
8a12			if BASE_CPM 
8a12				pop bc 
8a12				 
8a12			    dec     bc      	; 6 
8a12			    ld      a,c     	; 4 
8a12			    or      b     	; 4 
8a12			    jp      nz,.cpmloop   	; 10, total = 55 states/iteration 
8a12				 
8a12			 
8a12			endif 
8a12			;if CPU_CLOCK_8MHZ 
8a12			;    pop bc 
8a12			;    push bc 
8a12			;.dl8: 
8a12			;    bit     0,a    	; 8 
8a12			;    bit     0,a    	; 8 
8a12			;    bit     0,a    	; 8 
8a12			;    and     255  	; 7 
8a12			;    dec     bc      	; 6 
8a12			;    ld      a,c     	; 4 
8a12			;    or      b     	; 4 
8a12			;    jp      nz,.dl8   	; 10, total = 55 states/iteration 
8a12			;endif 
8a12			 
8a12			;if CPU_CLOCK_10MHZ 
8a12			;    pop bc 
8a12			;    push bc 
8a12			;.dl8: 
8a12			;    bit     0,a    	; 8 
8a12			;    bit     0,a    	; 8 
8a12			;    bit     0,a    	; 8 
8a12			;    and     255  	; 7 
8a12			;    dec     bc      	; 6 
8a12			;    ld      a,c     	; 4 
8a12			;    or      b     	; 4 
8a12			;    jp      nz,.dl8   	; 10, total = 55 states/iteration 
8a12			;endif 
8a12 c1			    pop bc 
8a13			 
8a13 c9				ret 
8a14			 
8a14			 
8a14			 
8a14			; eof 
# End of file firmware_general.asm
8a14			include "firmware_display.asm"      ; frame buffer screen abstraction layer  
8a14			; display routines that use the physical hardware abstraction layer 
8a14			 
8a14			 
8a14			; Display an activity indicator 
8a14			; Each call returns the new char pointed to in hl 
8a14			 
8a14			active: 
8a14 3a c0 eb			ld a, (display_active) 
8a17 fe 06			cp 6 
8a19			 
8a19 20 02			jr nz, .sne 
8a1b				; gone past the last one reset sequence 
8a1b 3e ff			ld a, 255 
8a1d			 
8a1d			.sne:   
8a1d				; get the next char in seq 
8a1d 3c				inc a 
8a1e 32 c0 eb			ld (display_active), a 
8a21			 
8a21				; look up the string in the table 
8a21 21 38 8a			ld hl, actseq 
8a24 cb 27			sla a 
8a26 cd ea 8c			call addatohl 
8a29 cd f8 9d			call loadwordinhl 
8a2c			 
8a2c				; forth will write the to string when pushing so move from rom to ram 
8a2c			 
8a2c 11 c1 eb			ld de, display_active+1 
8a2f 01 02 00			ld bc, 2 
8a32 ed b0			ldir 
8a34			 
8a34 21 c1 eb			ld hl, display_active+1 
8a37 c9				ret 
8a38				 
8a38				 
8a38			 
8a38			 
8a38			;db "|/-\|-\" 
8a38			 
8a38			actseq: 
8a38			 
8a38 46 8a		dw spin0 
8a3a 48 8a		dw spin1 
8a3c 4a 8a		dw spin2 
8a3e 4c 8a		dw spin3 
8a40 4a 8a		dw spin2 
8a42 48 8a		dw spin1 
8a44 46 8a		dw spin0 
8a46			 
8a46 .. 00		spin0: db " ", 0 
8a48 .. 00		spin1: db "-", 0 
8a4a .. 00		spin2: db "+", 0 
8a4c .. 00		spin3: db "#", 0 
8a4e			 
8a4e			 
8a4e			; information window 
8a4e			 
8a4e			; pass hl with 1st string to display 
8a4e			; pass de with 2nd string to display 
8a4e			 
8a4e			info_panel: 
8a4e e5				push hl 
8a4f			 
8a4f 2a c6 eb			ld hl, (display_fb_active) 
8a52 e5				push hl    ; future de destination 
8a53 21 ab ed				ld hl, display_fb0 
8a56 22 c6 eb				ld (display_fb_active), hl 
8a59			 
8a59			;	call clear_display 
8a59			 
8a59				if BASE_CPM 
8a59				ld a, '.' 
8a59				else 
8a59 3e a5			ld a, 165 
8a5b				endif 
8a5b cd c2 8a			call fill_display 
8a5e			 
8a5e			 
8a5e 3e 55			ld a, display_row_3 + 5 
8a60 cd d0 8a			call str_at_display 
8a63			 
8a63 e1				pop hl 
8a64 d1				pop de 
8a65			 
8a65 e5				push hl 
8a66			 
8a66			 
8a66 3e 2d			ld a, display_row_2 + 5 
8a68 cd d0 8a			call str_at_display 
8a6b			 
8a6b			 
8a6b cd e0 8a			call update_display 
8a6e cd fd 99			call next_page_prompt 
8a71 cd bd 8a			call clear_display 
8a74			 
8a74				 
8a74 21 0a ed				ld hl, display_fb1 
8a77 22 c6 eb				ld (display_fb_active), hl 
8a7a cd e0 8a			call update_display 
8a7d			 
8a7d e1				pop hl 
8a7e			 
8a7e c9				ret 
8a7f			 
8a7f			 
8a7f			 
8a7f			 
8a7f			; TODO windowing? 
8a7f			 
8a7f			; TODO scroll line up 
8a7f			 
8a7f			scroll_up: 
8a7f			 
8a7f e5				push hl 
8a80 d5				push de 
8a81 c5				push bc 
8a82			 
8a82				; get frame buffer  
8a82			 
8a82 2a c6 eb			ld hl, (display_fb_active) 
8a85 e5				push hl    ; future de destination 
8a86			 
8a86 11 28 00			ld  de, display_cols 
8a89 19				add hl, de 
8a8a			 
8a8a d1				pop de 
8a8b			 
8a8b				;ex de, hl 
8a8b 01 9f 00			ld bc, display_fb_len -1  
8a8e			;if DEBUG_FORTH_WORDS 
8a8e			;	DMARK "SCL" 
8a8e			;	CALLMONITOR 
8a8e			;endif	 
8a8e ed b0			ldir 
8a90			 
8a90				; wipe bottom row 
8a90			 
8a90			 
8a90 2a c6 eb			ld hl, (display_fb_active) 
8a93 11 a0 00			ld de, display_cols*display_rows 
8a96 19				add hl, de 
8a97 06 28			ld b, display_cols 
8a99 3e 20			ld a, ' ' 
8a9b			.scwipe: 
8a9b 77				ld (hl), a 
8a9c 2b				dec hl 
8a9d 10 fc			djnz .scwipe 
8a9f			 
8a9f				;pop hl 
8a9f			 
8a9f c1				pop bc 
8aa0 d1				pop de 
8aa1 e1				pop hl 
8aa2			 
8aa2 c9				ret 
8aa3			 
8aa3			 
8aa3			;scroll_upo: 
8aa3			;	ld de, display_row_1 
8aa3			 ;	ld hl, display_row_2 
8aa3			;	ld bc, display_cols 
8aa3			;	ldir 
8aa3			;	ld de, display_row_2 
8aa3			 ;	ld hl, display_row_3 
8aa3			;	ld bc, display_cols 
8aa3			;	ldir 
8aa3			;	ld de, display_row_3 
8aa3			 ;	ld hl, display_row_4 
8aa3			;	ld bc, display_cols 
8aa3			;	ldir 
8aa3			 
8aa3			; TODO clear row 4 
8aa3			 
8aa3			;	ret 
8aa3			 
8aa3				 
8aa3			scroll_down: 
8aa3			 
8aa3 e5				push hl 
8aa4 d5				push de 
8aa5 c5				push bc 
8aa6			 
8aa6				; get frame buffer  
8aa6			 
8aa6 2a c6 eb			ld hl, (display_fb_active) 
8aa9			 
8aa9 11 9f 00			ld de, display_fb_len - 1 
8aac 19				add hl, de 
8aad			 
8aad e5			push hl    ; future de destination 
8aae			 
8aae 11 28 00			ld  de, display_cols 
8ab1 ed 52			sbc hl, de 
8ab3			 
8ab3			 
8ab3 d1				pop de 
8ab4			 
8ab4			;	ex de, hl 
8ab4 01 9f 00			ld bc, display_fb_len -1  
8ab7			 
8ab7			 
8ab7				 
8ab7			 
8ab7 ed b0			ldir 
8ab9			 
8ab9				; wipe bottom row 
8ab9			 
8ab9			 
8ab9			;	ld hl, (display_fb_active) 
8ab9			;;	ld de, display_cols*display_rows 
8ab9			;;	add hl, de 
8ab9			;	ld b, display_cols 
8ab9			;	ld a, ' ' 
8ab9			;.scwiped: 
8ab9			;	ld (hl), a 
8ab9			;	dec hl 
8ab9			;	djnz .scwiped 
8ab9			 
8ab9				;pop hl 
8ab9			 
8ab9 c1				pop bc 
8aba d1				pop de 
8abb e1				pop hl 
8abc			 
8abc c9				ret 
8abd			;scroll_down: 
8abd			;	ld de, display_row_4 
8abd			;	ld hl, display_row_3 
8abd			;	ld bc, display_cols 
8abd			;	ldir 
8abd			;	ld de, display_row_3 
8abd			; 	ld hl, display_row_2 
8abd			;	ld bc, display_cols 
8abd			;	ldir 
8abd			;	ld de, display_row_2 
8abd			;	ld hl, display_row_1 
8abd			;	ld bc, display_cols 
8abd			;	ldir 
8abd			;;; TODO clear row 1 
8abd			;	ret 
8abd			 
8abd			 
8abd			 
8abd			 
8abd			 
8abd			; clear active frame buffer 
8abd			 
8abd			clear_display: 
8abd 3e 20			ld a, ' ' 
8abf c3 c2 8a			jp fill_display 
8ac2			 
8ac2			; fill active frame buffer with a char in A 
8ac2			 
8ac2			fill_display: 
8ac2 06 a0			ld b,display_fb_len 
8ac4 2a c6 eb			ld hl, (display_fb_active) 
8ac7 77			.fd1:	ld (hl),a 
8ac8 23				inc hl 
8ac9 10 fc			djnz .fd1 
8acb 23				inc hl 
8acc 3e 00			ld a,0 
8ace 77				ld (hl),a 
8acf			 
8acf			 
8acf c9				ret 
8ad0			; Write string (DE) at pos (A) to active frame buffer 
8ad0			 
8ad0 2a c6 eb		str_at_display:    ld hl,(display_fb_active) 
8ad3 06 00					ld b,0 
8ad5 4f					ld c,a 
8ad6 09					add hl,bc 
8ad7 1a			.sad1: 		LD   A, (DE)        ;Get character from string 
8ad8 b7			            OR   A              ;Null terminator? 
8ad9 c8			            RET  Z              ;Yes, so finished 
8ada 77					ld (hl),a 
8adb 23				inc hl 
8adc 13			            INC  DE             ;Point to next character 
8add 18 f8		            JR   .sad1     ;Repeat 
8adf c9					ret 
8ae0			 
8ae0			; using current frame buffer write to physical display 
8ae0			 
8ae0			update_display: 
8ae0 e5				push hl 
8ae1 2a c6 eb			ld hl, (display_fb_active) 
8ae4 cd 52 de			call write_display 
8ae7 e1				pop hl 
8ae8 c9				ret 
8ae9			 
8ae9			; TODO scrolling 
8ae9			 
8ae9			 
8ae9			; move cursor right one char 
8ae9			cursor_right: 
8ae9			 
8ae9				; TODO shift right 
8ae9				; TODO if beyond max col 
8ae9				; TODO       cursor_next_line 
8ae9			 
8ae9 c9				ret 
8aea			 
8aea			 
8aea			cursor_next_line: 
8aea				; TODO first char 
8aea				; TODO line down 
8aea				; TODO if past last row 
8aea				; TODO    scroll up 
8aea			 
8aea c9				ret 
8aeb			 
8aeb			cursor_left: 
8aeb				; TODO shift left 
8aeb				; TODO if beyond left  
8aeb				; TODO     cursor prev line 
8aeb				 
8aeb c9				ret 
8aec			 
8aec			cursor_prev_line: 
8aec				; TODO last char 
8aec				; TODO line up 
8aec				; TODO if past first row 
8aec				; TODO   scroll down 
8aec			 
8aec c9				ret 
8aed			 
8aed			 
8aed			cout: 
8aed				; A - char 
8aed c9				ret 
8aee			 
8aee			 
8aee			; Display a menu and allow item selection (optional toggle items) 
8aee			; 
8aee			; format: 
8aee			; hl pointer to word array with zero term for items 
8aee			; e.g.    db item1 
8aee			;         db .... 
8aee			;         db 0 
8aee			; 
8aee			; a = starting menu item  
8aee			; 
8aee			; de = pointer item toggle array   (todo) 
8aee			; 
8aee			; returns item selected in a 1-... 
8aee			; returns 0 if back button pressed 
8aee			; 
8aee			; NOTE: Uses system frame buffer to display 
8aee			; 
8aee			; LEFT, Q = go back 
8aee			; RIGHT, SPACE, CR = select 
8aee			; UP, A - Up 
8aee			; DOWN, Z - Down 
8aee			 
8aee			 
8aee			 
8aee			 
8aee			 
8aee			menu: 
8aee			 
8aee					; keep array pointer 
8aee			 
8aee 22 6d ea				ld (store_tmp1), hl 
8af1 32 6b ea				ld (store_tmp2), a 
8af4			 
8af4					; check for key bounce 
8af4			 
8af4			if BASE_KEV 
8af4			 
8af4			.mbounce:	call cin 
8af4					cp 0 
8af4					jr nz, .mbounce 
8af4			endif 
8af4					; for ease use ex 
8af4			 
8af4					; use menu on fb0 so as not to disrupt user screens ie a menu popup 
8af4 21 ab ed				ld hl, display_fb0 
8af7 22 c6 eb				ld (display_fb_active), hl 
8afa			 
8afa cd bd 8a		.mloop:		call clear_display 
8afd cd e0 8a				call update_display 
8b00			 
8b00					; draw selection id '>' at 1 
8b00			 
8b00					; init start of list display 
8b00			 
8b00 3e 05				ld a, 5 
8b02 32 69 ea				ld (store_tmp3), a   ; display row count 
8b05 3a 6b ea				ld a,( store_tmp2) 
8b08 32 6c ea				ld (store_tmp2+1), a   ; display item count 
8b0b			 
8b0b					 
8b0b			.mitem:	 
8b0b			 
8b0b			 
8b0b 3a 6c ea				ld a,(store_tmp2+1) 
8b0e 6f					ld l, a 
8b0f 26 00				ld h, 0 
8b11 29					add hl, hl 
8b12 ed 5b 6d ea			ld de, (store_tmp1) 
8b16 19					add hl, de 
8b17 7e					ld a, (hl) 
8b18 23					inc hl 
8b19 66					ld h,(hl) 
8b1a 6f					ld l, a 
8b1b			 
8b1b cd 13 8d				call ishlzero 
8b1e 28 1a				jr z, .mdone 
8b20			 
8b20 eb					ex de, hl 
8b21 3a 69 ea				ld a, (store_tmp3) 
8b24 cd d0 8a				call str_at_display 
8b27					 
8b27			 
8b27					; next item 
8b27 3a 6c ea				ld a, (store_tmp2+1) 
8b2a 3c					inc a 
8b2b 32 6c ea				ld (store_tmp2+1), a   ; display item count 
8b2e			 
8b2e			 		; next row 
8b2e			 
8b2e 3a 69 ea				ld a, (store_tmp3) 
8b31 c6 28				add display_cols 
8b33 32 69 ea				ld (store_tmp3), a 
8b36			 
8b36					; at end of screen? 
8b36			 
8b36 fe 10				cp display_rows*4 
8b38 20 d1				jr nz, .mitem 
8b3a			 
8b3a			 
8b3a			.mdone: 
8b3a cd 13 8d				call ishlzero 
8b3d 28 08				jr z, .nodn 
8b3f			 
8b3f 3e 78				ld a, display_row_4 
8b41 11 c0 8b				ld de, .mdown 
8b44 cd d0 8a				call str_at_display 
8b47			 
8b47					; draw options to fill the screens with active item on line 1 
8b47					; if current option is 2 or more then display ^ in top 
8b47			 
8b47 3a 6b ea		.nodn:		ld a, (store_tmp2) 
8b4a fe 00				cp 0 
8b4c 28 08				jr z, .noup 
8b4e			 
8b4e 3e 00				ld a, 0 
8b50 11 be 8b				ld de, .mup 
8b53 cd d0 8a				call str_at_display 
8b56			 
8b56 3e 02		.noup:		ld a, 2 
8b58 11 bc 8b				ld de, .msel 
8b5b cd d0 8a				call str_at_display 
8b5e			 
8b5e					; if current option + 1 is not null then display V in bottom 
8b5e					; get key 
8b5e cd e0 8a				call update_display 
8b61			 
8b61			 
8b61					; handle key 
8b61			 
8b61 cd de de				call cin_wait 
8b64			 
8b64 fe 05				cp KEY_UP 
8b66 28 2b				jr z, .mgoup 
8b68 fe 61				cp 'a' 
8b6a 28 27				jr z, .mgoup 
8b6c fe 0a				cp KEY_DOWN 
8b6e 28 32				jr z, .mgod 
8b70 fe 7a				cp 'z' 
8b72 28 2e				jr z, .mgod 
8b74 fe 20				cp ' ' 
8b76 28 34				jr z, .goend 
8b78 fe 0c				cp KEY_RIGHT 
8b7a 28 30				jr z, .goend 
8b7c fe 0d				cp KEY_CR 
8b7e 28 2c				jr z, .goend 
8b80 fe 71				cp 'q' 
8b82 28 0b				jr z, .goback 
8b84			 
8b84 fe 0b				cp KEY_LEFT 
8b86 28 07				jr z, .goback 
8b88 fe 08				cp KEY_BS 
8b8a 28 03				jr z, .goback 
8b8c c3 fa 8a				jp .mloop 
8b8f			 
8b8f			.goback: 
8b8f 3e 00			ld a, 0 
8b91 18 1d			jr .goend2 
8b93			 
8b93				; move up one 
8b93			.mgoup: 
8b93 3a 6b ea				ld a, (store_tmp2) 
8b96 fe 00				cp 0 
8b98 ca fa 8a				jp z, .mloop 
8b9b 3d					dec a 
8b9c 32 6b ea				ld (store_tmp2), a 
8b9f c3 fa 8a				jp .mloop 
8ba2			 
8ba2				; move down one 
8ba2			.mgod: 
8ba2 3a 6b ea				ld a, (store_tmp2) 
8ba5 3c					inc a 
8ba6 32 6b ea				ld (store_tmp2), a 
8ba9 c3 fa 8a				jp .mloop 
8bac			 
8bac			 
8bac			.goend: 
8bac					; get selected item number 
8bac			 
8bac 3a 6b ea				ld a, (store_tmp2) 
8baf 3c					inc a 
8bb0			 
8bb0			.goend2: 
8bb0 f5					push af 
8bb1			 
8bb1					; restore active fb 
8bb1					; TODO BUG assumes fb1 
8bb1			 
8bb1 21 0a ed				ld hl, display_fb1 
8bb4 22 c6 eb				ld (display_fb_active), hl 
8bb7			 
8bb7					; restore main regs 
8bb7			 
8bb7			 
8bb7 cd e0 8a				call update_display 
8bba			 
8bba f1					pop af 
8bbb			 
8bbb c9				ret 
8bbc			 
8bbc .. 00		.msel:   db ">",0 
8bbe .. 00		.mup:   db "^",0 
8bc0 .. 00		.mdown:   db "v",0 
8bc2			 
8bc2			 
8bc2			; eof 
8bc2			 
# End of file firmware_display.asm
8bc2			include "firmware_maths.asm"     ; any odd maths stuff   TODO removed until I fix up the rng code  
8bc2			; random number generators 
8bc2			 
8bc2			 
8bc2			; https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random 
8bc2			 
8bc2			 
8bc2			;-----> Generate a random number 
8bc2			; output a=answer 0<=a<=255 
8bc2			; all registers are preserved except: af 
8bc2			random: 
8bc2 e5			        push    hl 
8bc3 d5			        push    de 
8bc4 2a a5 eb		        ld      hl,(randData) 
8bc7 ed 5f		        ld      a,r 
8bc9 57			        ld      d,a 
8bca 5e			        ld      e,(hl) 
8bcb 19			        add     hl,de 
8bcc 85			        add     a,l 
8bcd ac			        xor     h 
8bce 22 a5 eb		        ld      (randData),hl 
8bd1 d1			        pop     de 
8bd2 e1			        pop     hl 
8bd3 c9			        ret 
8bd4			 
8bd4			 
8bd4			; randData here must be a 2 byte seed located in ram. While this is a fast generator, it's generally not considered very good in terms of randomness. 
8bd4			 
8bd4			 
8bd4			 
8bd4			;------LFSR------ 
8bd4			;James Montelongo 
8bd4			;optimized by Spencer Putt 
8bd4			;out: 
8bd4			; a = 8 bit random number 
8bd4			RandLFSR: 
8bd4 21 ab eb		        ld hl,LFSRSeed+4 
8bd7 5e			        ld e,(hl) 
8bd8 23			        inc hl 
8bd9 56			        ld d,(hl) 
8bda 23			        inc hl 
8bdb 4e			        ld c,(hl) 
8bdc 23			        inc hl 
8bdd 7e			        ld a,(hl) 
8bde 47			        ld b,a 
8bdf cb 13		        rl e  
8be1 cb 12			rl d 
8be3 cb 11		        rl c  
8be5 17				rla 
8be6 cb 13		        rl e  
8be8 cb 12			rl d 
8bea cb 11		        rl c  
8bec 17				rla 
8bed cb 13		        rl e  
8bef cb 12			rl d 
8bf1 cb 11		        rl c  
8bf3 17				rla 
8bf4 67			        ld h,a 
8bf5 cb 13		        rl e  
8bf7 cb 12			rl d 
8bf9 cb 11		        rl c  
8bfb 17				rla 
8bfc a8			        xor b 
8bfd cb 13		        rl e  
8bff cb 12			rl d 
8c01 ac			        xor h 
8c02 a9			        xor c 
8c03 aa			        xor d 
8c04 21 ad eb		        ld hl,LFSRSeed+6 
8c07 11 ae eb		        ld de,LFSRSeed+7 
8c0a 01 07 00		        ld bc,7 
8c0d ed b8		        lddr 
8c0f 12			        ld (de),a 
8c10 c9			        ret 
8c11			 
8c11			;While this may produces better numbers, it is slower, larger and requires a bigger seed than ionrandom. Assuming theres is a good seed to start, it should generate ~2^56 bytes before repeating. However if there is not a good seed(0 for example), then the numbers created will not be adequate. Unlike Ionrandom and its use of the r register, starting with the same seed the same numbers will be generated. With Ionrandom the code running may have an impact on the number generated. This means this method requires more initialization. 
8c11			 
8c11			;You can initialize with TI-OS's seeds, stored at seed1 and seed2, both are ti-floats but will serve the purpose.  
8c11			 
8c11			 
8c11			;This is a very fast, quality pseudo-random number generator. It combines a 16-bit Linear Feedback Shift Register and a 16-bit LCG. 
8c11			 
8c11			prng16: 
8c11			;Inputs: 
8c11			;   (seed1) contains a 16-bit seed value 
8c11			;   (seed2) contains a NON-ZERO 16-bit seed value 
8c11			;Outputs: 
8c11			;   HL is the result 
8c11			;   BC is the result of the LCG, so not that great of quality 
8c11			;   DE is preserved 
8c11			;Destroys: 
8c11			;   AF 
8c11			;cycle: 4,294,901,760 (almost 4.3 billion) 
8c11			;160cc 
8c11			;26 bytes 
8c11 2a 9f eb		    ld hl,(seed1) 
8c14 44			    ld b,h 
8c15 4d			    ld c,l 
8c16 29			    add hl,hl 
8c17 29			    add hl,hl 
8c18 2c			    inc l 
8c19 09			    add hl,bc 
8c1a 22 9f eb		    ld (seed1),hl 
8c1d 2a 9d eb		    ld hl,(seed2) 
8c20 29			    add hl,hl 
8c21 9f			    sbc a,a 
8c22 e6 2d		    and %00101101 
8c24 ad			    xor l 
8c25 6f			    ld l,a 
8c26 22 9d eb		    ld (seed2),hl 
8c29 09			    add hl,bc 
8c2a c9			    ret 
8c2b			 
8c2b			;On their own, LCGs and LFSRs don't produce great results and are generally very cyclical, but they are very fast to compute. The 16-bit LCG in the above example will bounce around and reach each number from 0 to 65535, but the lower bits are far more predictable than the upper bits. The LFSR mixes up the predictability of a given bit's state, but it hits every number except 0, meaning there is a slightly higher chance of any given bit in the result being a 1 instead of a 0. It turns out that by adding together the outputs of these two generators, we can lose the predictability of a bit's state, while ensuring it has a 50% chance of being 0 or 1. As well, since the periods, 65536 and 65535 are coprime, then the overall period of the generator is 65535*65536, which is over 4 billion.  
8c2b			 
8c2b			rand32: 
8c2b			;Inputs: 
8c2b			;   (seed1_0) holds the lower 16 bits of the first seed 
8c2b			;   (seed1_1) holds the upper 16 bits of the first seed 
8c2b			;   (seed2_0) holds the lower 16 bits of the second seed 
8c2b			;   (seed2_1) holds the upper 16 bits of the second seed 
8c2b			;   **NOTE: seed2 must be non-zero 
8c2b			;Outputs: 
8c2b			;   HL is the result 
8c2b			;   BC,DE can be used as lower quality values, but are not independent of HL. 
8c2b			;Destroys: 
8c2b			;   AF 
8c2b			;Tested and passes all CAcert tests 
8c2b			;Uses a very simple 32-bit LCG and 32-bit LFSR 
8c2b			;it has a period of 18,446,744,069,414,584,320 
8c2b			;roughly 18.4 quintillion. 
8c2b			;LFSR taps: 0,2,6,7  = 11000101 
8c2b			;291cc 
8c2b			;seed1_0=$+1 
8c2b			;    ld hl,12345 
8c2b			;seed1_1=$+1 
8c2b			;    ld de,6789 
8c2b			;    ld b,h 
8c2b			;    ld c,l 
8c2b			;    add hl,hl \ rl e \ rl d 
8c2b			;    add hl,hl \ rl e \ rl d 
8c2b			;    inc l 
8c2b			;    add hl,bc 
8c2b			;    ld (seed1_0),hl 
8c2b			;    ld hl,(seed1_1) 
8c2b			;    adc hl,de 
8c2b			;    ld (seed1_1),hl 
8c2b			;    ex de,hl 
8c2b			;seed2_0=$+1 
8c2b			;    ld hl,9876 
8c2b			;seed2_1=$+1 
8c2b			;    ld bc,54321 
8c2b			;    add hl,hl \ rl c \ rl b 
8c2b			;    ld (seed2_1),bc 
8c2b			;    sbc a,a 
8c2b			;    and %11000101 
8c2b			;    xor l 
8c2b			;    ld l,a 
8c2b			;    ld (seed2_0),hl 
8c2b			;    ex de,hl 
8c2b			;    add hl,bc 
8c2b			;    ret 
8c2b			; 
8c2b			 
8c2b			; 16-bit xorshift pseudorandom number generator by John Metcalf 
8c2b			; 20 bytes, 86 cycles (excluding ret) 
8c2b			 
8c2b			; returns   hl = pseudorandom number 
8c2b			; corrupts   a 
8c2b			 
8c2b			; generates 16-bit pseudorandom numbers with a period of 65535 
8c2b			; using the xorshift method: 
8c2b			 
8c2b			; hl ^= hl << 7 
8c2b			; hl ^= hl >> 9 
8c2b			; hl ^= hl << 8 
8c2b			 
8c2b			; some alternative shift triplets which also perform well are: 
8c2b			; 6, 7, 13; 7, 9, 13; 9, 7, 13. 
8c2b			 
8c2b			;  org 32768 
8c2b			 
8c2b			xrnd: 
8c2b 2a a3 eb		  ld hl,(xrandc)       ; seed must not be 0 
8c2e 3e 00		  ld a,0 
8c30 bd			  cp l 
8c31 20 02		  jr nz, .xrnd1 
8c33 2e 01		  ld l, 1 
8c35			.xrnd1: 
8c35			 
8c35 7c			  ld a,h 
8c36 1f			  rra 
8c37 7d			  ld a,l 
8c38 1f			  rra 
8c39 ac			  xor h 
8c3a 67			  ld h,a 
8c3b 7d			  ld a,l 
8c3c 1f			  rra 
8c3d 7c			  ld a,h 
8c3e 1f			  rra 
8c3f ad			  xor l 
8c40 6f			  ld l,a 
8c41 ac			  xor h 
8c42 67			  ld h,a 
8c43			 
8c43 22 a3 eb		  ld (xrandc),hl 
8c46			 
8c46 c9			  ret 
8c47			;  
8c47			 
8c47			 
8c47			;;;; int maths 
8c47			 
8c47			; https://map.grauw.nl/articles/mult_div_shifts.php 
8c47			; Divide 16-bit values (with 16-bit result) 
8c47			; In: Divide BC by divider DE 
8c47			; Out: BC = result, HL = rest 
8c47			; 
8c47			Div16: 
8c47 21 00 00		    ld hl,0 
8c4a 78			    ld a,b 
8c4b 06 08		    ld b,8 
8c4d			Div16_Loop1: 
8c4d 17			    rla 
8c4e ed 6a		    adc hl,hl 
8c50 ed 52		    sbc hl,de 
8c52 30 01		    jr nc,Div16_NoAdd1 
8c54 19			    add hl,de 
8c55			Div16_NoAdd1: 
8c55 10 f6		    djnz Div16_Loop1 
8c57 17			    rla 
8c58 2f			    cpl 
8c59 47			    ld b,a 
8c5a 79			    ld a,c 
8c5b 48			    ld c,b 
8c5c 06 08		    ld b,8 
8c5e			Div16_Loop2: 
8c5e 17			    rla 
8c5f ed 6a		    adc hl,hl 
8c61 ed 52		    sbc hl,de 
8c63 30 01		    jr nc,Div16_NoAdd2 
8c65 19			    add hl,de 
8c66			Div16_NoAdd2: 
8c66 10 f6		    djnz Div16_Loop2 
8c68 17			    rla 
8c69 2f			    cpl 
8c6a 41			    ld b,c 
8c6b 4f			    ld c,a 
8c6c c9			ret 
8c6d			 
8c6d			 
8c6d			;http://z80-heaven.wikidot.com/math 
8c6d			; 
8c6d			;Inputs: 
8c6d			;     DE and A are factors 
8c6d			;Outputs: 
8c6d			;     A is not changed 
8c6d			;     B is 0 
8c6d			;     C is not changed 
8c6d			;     DE is not changed 
8c6d			;     HL is the product 
8c6d			;Time: 
8c6d			;     342+6x 
8c6d			; 
8c6d			Mult16: 
8c6d			 
8c6d 06 08		     ld b,8          ;7           7 
8c6f 21 00 00		     ld hl,0         ;10         10 
8c72 29			       add hl,hl     ;11*8       88 
8c73 07			       rlca          ;4*8        32 
8c74 30 01		       jr nc,$+3     ;(12|18)*8  96+6x 
8c76 19			         add hl,de   ;--         -- 
8c77 10 f9		       djnz $-5      ;13*7+8     99 
8c79 c9			ret 
8c7a			 
8c7a			; 
8c7a			; Square root of 16-bit value 
8c7a			; In:  HL = value 
8c7a			; Out:  D = result (rounded down) 
8c7a			; 
8c7a			;Sqr16: 
8c7a			;    ld de,#0040 
8c7a			;    ld a,l 
8c7a			;    ld l,h 
8c7a			;    ld h,d 
8c7a			;    or a 
8c7a			;    ld b,8 
8c7a			;Sqr16_Loop: 
8c7a			;    sbc hl,de 
8c7a			;    jr nc,Sqr16_Skip 
8c7a			;    add hl,de 
8c7a			;Sqr16_Skip: 
8c7a			;    ccf 
8c7a			;    rl d 
8c7a			;    add a,a 
8c7a			;    adc hl,hl 
8c7a			;    add a,a 
8c7a			;    adc hl,hl 
8c7a			;    djnz Sqr16_Loop 
8c7a			;    ret 
8c7a			; 
8c7a			; 
8c7a			; Divide 8-bit values 
8c7a			; In: Divide E by divider C 
8c7a			; Out: A = result, B = rest 
8c7a			; 
8c7a			Div8: 
8c7a af			    xor a 
8c7b 06 08		    ld b,8 
8c7d			Div8_Loop: 
8c7d cb 13		    rl e 
8c7f 17			    rla 
8c80 91			    sub c 
8c81 30 01		    jr nc,Div8_NoAdd 
8c83 81			    add a,c 
8c84			Div8_NoAdd: 
8c84 10 f7		    djnz Div8_Loop 
8c86 47			    ld b,a 
8c87 7b			    ld a,e 
8c88 17			    rla 
8c89 2f			    cpl 
8c8a c9			    ret 
8c8b			 
8c8b			; 
8c8b			; Multiply 8-bit value with a 16-bit value (unrolled) 
8c8b			; In: Multiply A with DE 
8c8b			; Out: HL = result 
8c8b			; 
8c8b			Mult12U: 
8c8b 2e 00		    ld l,0 
8c8d 87			    add a,a 
8c8e 30 01		    jr nc,Mult12U_NoAdd0 
8c90 19			    add hl,de 
8c91			Mult12U_NoAdd0: 
8c91 29			    add hl,hl 
8c92 87			    add a,a 
8c93 30 01		    jr nc,Mult12U_NoAdd1 
8c95 19			    add hl,de 
8c96			Mult12U_NoAdd1: 
8c96 29			    add hl,hl 
8c97 87			    add a,a 
8c98 30 01		    jr nc,Mult12U_NoAdd2 
8c9a 19			    add hl,de 
8c9b			Mult12U_NoAdd2: 
8c9b 29			    add hl,hl 
8c9c 87			    add a,a 
8c9d 30 01		    jr nc,Mult12U_NoAdd3 
8c9f 19			    add hl,de 
8ca0			Mult12U_NoAdd3: 
8ca0 29			    add hl,hl 
8ca1 87			    add a,a 
8ca2 30 01		    jr nc,Mult12U_NoAdd4 
8ca4 19			    add hl,de 
8ca5			Mult12U_NoAdd4: 
8ca5 29			    add hl,hl 
8ca6 87			    add a,a 
8ca7 30 01		    jr nc,Mult12U_NoAdd5 
8ca9 19			    add hl,de 
8caa			Mult12U_NoAdd5: 
8caa 29			    add hl,hl 
8cab 87			    add a,a 
8cac 30 01		    jr nc,Mult12U_NoAdd6 
8cae 19			    add hl,de 
8caf			Mult12U_NoAdd6: 
8caf 29			    add hl,hl 
8cb0 87			    add a,a 
8cb1 d0			    ret nc 
8cb2 19			    add hl,de 
8cb3 c9			    ret 
8cb4			 
8cb4			; 
8cb4			; Multiply 8-bit value with a 16-bit value (right rotating) 
8cb4			; In: Multiply A with DE 
8cb4			;      Put lowest value in A for most efficient calculation 
8cb4			; Out: HL = result 
8cb4			; 
8cb4			Mult12R: 
8cb4 21 00 00		    ld hl,0 
8cb7			Mult12R_Loop: 
8cb7 cb 3f		    srl a 
8cb9 30 01		    jr nc,Mult12R_NoAdd 
8cbb 19			    add hl,de 
8cbc			Mult12R_NoAdd: 
8cbc cb 23		    sla e 
8cbe cb 12		    rl d 
8cc0 b7			    or a 
8cc1 c2 b7 8c		    jp nz,Mult12R_Loop 
8cc4 c9			    ret 
8cc5			 
8cc5			; 
8cc5			; Multiply 16-bit values (with 32-bit result) 
8cc5			; In: Multiply BC with DE 
8cc5			; Out: BCHL = result 
8cc5			; 
8cc5			Mult32: 
8cc5 79			    ld a,c 
8cc6 48			    ld c,b 
8cc7 21 00 00		    ld hl,0 
8cca 06 10		    ld b,16 
8ccc			Mult32_Loop: 
8ccc 29			    add hl,hl 
8ccd 17			    rla 
8cce cb 11		    rl c 
8cd0 30 07		    jr nc,Mult32_NoAdd 
8cd2 19			    add hl,de 
8cd3 ce 00		    adc a,0 
8cd5 d2 d9 8c		    jp nc,Mult32_NoAdd 
8cd8 0c			    inc c 
8cd9			Mult32_NoAdd: 
8cd9 10 f1		    djnz Mult32_Loop 
8cdb 41			    ld b,c 
8cdc 4f			    ld c,a 
8cdd c9			    ret 
8cde			 
8cde			 
8cde			 
8cde			; 
8cde			; Multiply 8-bit values 
8cde			; In:  Multiply H with E 
8cde			; Out: HL = result 
8cde			; 
8cde			Mult8: 
8cde 16 00		    ld d,0 
8ce0 6a			    ld l,d 
8ce1 06 08		    ld b,8 
8ce3			Mult8_Loop: 
8ce3 29			    add hl,hl 
8ce4 30 01		    jr nc,Mult8_NoAdd 
8ce6 19			    add hl,de 
8ce7			Mult8_NoAdd: 
8ce7 10 fa		    djnz Mult8_Loop 
8ce9 c9			    ret 
8cea			 
8cea			 
8cea			 
8cea			 
8cea			 
8cea			 
8cea			 
8cea			 
8cea			;;http://z80-heaven.wikidot.com/math 
8cea			;;This divides DE by BC, storing the result in DE, remainder in HL 
8cea			; 
8cea			;DE_Div_BC:          ;1281-2x, x is at most 16 
8cea			;     ld a,16        ;7 
8cea			;     ld hl,0        ;10 
8cea			;     jp $+5         ;10 
8cea			;.DivLoop: 
8cea			;       add hl,bc    ;-- 
8cea			;       dec a        ;64 
8cea			;       jr z,.DivLoopEnd        ;86 
8cea			; 
8cea			;       sla e        ;128 
8cea			;       rl d         ;128 
8cea			;       adc hl,hl    ;240 
8cea			;       sbc hl,bc    ;240 
8cea			;       jr nc,.DivLoop ;23|21 
8cea			;       inc e        ;-- 
8cea			;       jp .DivLoop+1 
8cea			; 
8cea			;.DivLoopEnd: 
8cea			 
8cea			;HL_Div_C: 
8cea			;Inputs: 
8cea			;     HL is the numerator 
8cea			;     C is the denominator 
8cea			;Outputs: 
8cea			;     A is the remainder 
8cea			;     B is 0 
8cea			;     C is not changed 
8cea			;     DE is not changed 
8cea			;     HL is the quotient 
8cea			; 
8cea			;       ld b,16 
8cea			;       xor a 
8cea			;         add hl,hl 
8cea			;         rla 
8cea			;         cp c 
8cea			;         jr c,$+4 
8cea			;           inc l 
8cea			;           sub c 
8cea			;         djnz $-7 
8cea			 
8cea			; https://plutiedev.com/z80-add-8bit-to-16bit 
8cea			 
8cea			addatohl: 
8cea 85			    add   a, l    ; A = A+L 
8ceb 6f			    ld    l, a    ; L = A+L 
8cec 8c			    adc   a, h    ; A = A+L+H+carry 
8ced 95			    sub   l       ; A = H+carry 
8cee 67			    ld    h, a    ; H = H+carry 
8cef c9			ret 
8cf0			 
8cf0			addatode: 
8cf0 83			    add   a, e    ; A = A+L 
8cf1 5f			    ld    e, a    ; L = A+L 
8cf2 8a			    adc   a, d    ; A = A+L+H+carry 
8cf3 93			    sub   e       ; A = H+carry 
8cf4 57			    ld    d, a    ; H = H+carry 
8cf5 c9			ret 
8cf6			 
8cf6			 
8cf6			addatobc: 
8cf6 81			    add   a, c    ; A = A+L 
8cf7 4f			    ld    c, a    ; L = A+L 
8cf8 88			    adc   a, b    ; A = A+L+H+carry 
8cf9 91			    sub   c       ; A = H+carry 
8cfa 47			    ld    b, a    ; H = H+carry 
8cfb c9			ret 
8cfc			 
8cfc			subafromhl: 
8cfc			   ; If A=0 do nothing 
8cfc			    ; Otherwise flip A's sign. Since 
8cfc			    ; the upper byte becomes -1, also 
8cfc			    ; substract 1 from H. 
8cfc ed 44		    neg 
8cfe ca 07 8d		    jp    z, Skip 
8d01 25			    dec   h 
8d02			     
8d02			    ; Now add the low byte as usual 
8d02			    ; Two's complement takes care of 
8d02			    ; ensuring the result is correct 
8d02 85			    add   a, l 
8d03 6f			    ld    l, a 
8d04 8c			    adc   a, h 
8d05 95			    sub   l 
8d06 67			    ld    h, a 
8d07			Skip: 
8d07 c9				ret 
8d08			 
8d08			 
8d08			; compare hl and de 
8d08			; returns:  
8d08			; if hl = de, z=1, s=0, c0=0 
8d08			; if hl > de, z=0, s=0, c=0 
8d08			; if hl < de, z=0, s=1, c=1 
8d08			cmp16:	 
8d08 b7				or a 
8d09 ed 52			sbc hl,de 
8d0b e0				ret po 
8d0c 7c				ld a,h 
8d0d 1f				rra 
8d0e ee 40			xor 01000000B 
8d10 37				scf 
8d11 8f				adc a,a 
8d12 c9				ret 
8d13			 
8d13			 
8d13			; test if hl contains zero   - A is destroyed 
8d13			 
8d13			ishlzero:    
8d13 b7				or a     ; reset flags 
8d14 7c				ld a, h 
8d15 b5				or l        	 
8d16			 
8d16 c9				ret 
8d17			 
8d17			 
8d17			 
8d17			 
8d17			if FORTH_ENABLE_FLOATMATH 
8d17			;include "float/bbcmath.z80" 
8d17			include "float/lpfpcalc.asm" 
8d17			endif 
8d17			 
8d17			 
8d17			; eof 
8d17			 
# End of file firmware_maths.asm
8d17			include "firmware_strings.asm"   ; string handling  
8d17			 
8d17			 
8d17			; TODO string len 
8d17			; input text string, end on cr with zero term 
8d17			; a offset into frame buffer to start prompt 
8d17			; d is max length 
8d17			; e is display size TODO 
8d17			; c is current cursor position 
8d17			; hl is ptr to where string will be stored and edited directly 
8d17			 
8d17			 
8d17			; TODO check limit of buffer for new inserts 
8d17			; TODO check insert does not push beyond buffer 
8d17			; TODO scroll in a limited display area 
8d17			; TODO scroll whole screen on page wrap 
8d17			 
8d17			 
8d17			; TODO use LCD cursor? 
8d17			 
8d17			EDIT_V1: equ 0 
8d17			EDIT_V2: equ 1 
8d17			 
8d17			 
8d17			 
8d17			if EDIT_V2 
8d17			input_str: 
8d17			 
8d17 32 5e ee			    	ld (input_at_pos),a      ; save display position to start 
8d1a			;		ld (input_at_cursor),a	; save draw pos of cursor relative to start 
8d1a 22 61 ee				ld (input_start), hl     ; save ptr to buffer 
8d1d			;		ld a, c 
8d1d			;		call addatohl 
8d1d			;		ld (input_ptr), hl     ; save ptr to point under the cursor 
8d1d 7a					ld a,d 
8d1e 32 60 ee			        ld (input_size), a       ; save length of input area 
8d21 79					ld a, c 
8d22 32 4f ee				ld (input_cursor),a      ; init cursor start position relative to start of string 
8d25 7b					ld a,e 
8d26 32 5f ee			        ld (input_display_size), a       ; save length of input area that is displayed TODO 
8d29			 
8d29			 
8d29					; add a trailing space to make screen refresh nicer 
8d29			 
8d29					;ld hl, (input_start) 
8d29					;push hl 
8d29					;ld a, 0 
8d29					;call strlent 
8d29					;ld a, l 
8d29					;pop hl 
8d29					;call addatohl 
8d29					;dec hl 
8d29					;ld a, ' ' 
8d29					;ld (hl), a 
8d29					;inc hl 
8d29					;ld (hl), a 
8d29					;inc hl 
8d29					;ld a, 0 
8d29					;ld (hl), a 
8d29			 
8d29			; TODO move out to cin as cursor shape is used by the 4x4 ??? 
8d29					; init cursor shape if not set by the cin routines 
8d29 21 bb eb				ld hl, cursor_shape 
8d2c			if BASE_KEV 
8d2c					ld a, 255 
8d2c			else 
8d2c 3e 23				ld a, '#' 
8d2e			endif 
8d2e 77					ld (hl), a 
8d2f 23					inc hl 
8d30 3e 00				ld a, 0 
8d32 77					ld (hl), a 
8d33			 
8d33 3e 09				ld a, CUR_BLINK_RATE 
8d35 32 5a ee				ld (input_cur_flash), a 
8d38 3e 01				ld a, 1 
8d3a 32 59 ee				ld (input_cur_onoff),a 
8d3d			.inmain:	 
8d3d			 
8d3d cd 65 8e				call input_disp_ref 
8d40			 
8d40					; save current length of string 
8d40			 
8d40 2a 61 ee				ld hl, (input_start) 
8d43 3e 00				ld a, 0 
8d45 cd 5b 90				call strlent 
8d48 7d					ld a,l 
8d49 32 54 ee				ld (input_len), a 
8d4c			 
8d4c					;call input_disp_oncur 
8d4c			 
8d4c					; display current state of input buffer 
8d4c			 
8d4c					; clean any backspace chars 
8d4c			 
8d4c 3e 20				ld a, " " 
8d4e 32 bb e2				ld (scratch),a 
8d51 3e 00				ld a, 0 
8d53 32 bc e2				ld (scratch+1),a 
8d56 3a 5e ee				ld a,(input_at_pos) 
8d59 85					add l 
8d5a 11 bb e2				ld de, scratch 
8d5d cd d0 8a				call str_at_display 
8d60			 
8d60					; pause 1ms 
8d60			 
8d60 3e 01				ld a, 1 
8d62 cd e5 89				call aDelayInMS 
8d65			 
8d65			; display cursor if visible on this cycle 
8d65			 
8d65					; dec flash counter 
8d65 3a 5a ee				ld a, (input_cur_flash) 
8d68 3d					dec a 
8d69 32 5a ee				ld (input_cur_flash), a 
8d6c fe 00				cp 0 
8d6e 20 0d				jr nz, .inochgstate 
8d70			 
8d70			 
8d70					; reset on change of state 
8d70 3e 09				ld a, CUR_BLINK_RATE 
8d72 32 5a ee				ld (input_cur_flash), a 
8d75			 
8d75					; change state 
8d75 3a 59 ee				ld a,(input_cur_onoff) 
8d78 ed 44				neg 
8d7a 32 59 ee				ld (input_cur_onoff),a 
8d7d			 
8d7d			 
8d7d			 
8d7d			 
8d7d					; TODO is cursor visible? 
8d7d					; TODO if so then over write the char at curspos pos with the cursor shape 
8d7d			 
8d7d								 
8d7d			 
8d7d			.inochgstate: 
8d7d 3a 59 ee				ld a,(input_cur_onoff) 
8d80 fe ff				cp 255 
8d82 28 0e				jr z, .skipcursor 
8d84 3a 5e ee				ld a, (input_at_pos) 
8d87 47					ld b, a 
8d88 3a 4f ee				ld a, (input_cursor) 
8d8b 80					add b 
8d8c 11 bb eb				ld de, cursor_shape 
8d8f					 
8d8f cd d0 8a				call str_at_display 
8d92			 
8d92			.skipcursor: 
8d92				if DEBUG_INPUTV2 
8d92			 
8d92					ld a,(input_at_pos) 
8d92					ld hl, LFSRSeed 
8d92					call hexout 
8d92					ld a, (input_cursor) 
8d92					ld hl, LFSRSeed+2 
8d92					call hexout 
8d92					ld a,(input_size) 
8d92					ld hl, LFSRSeed+4 
8d92					call hexout 
8d92			 
8d92					ld a,(input_cur_onoff) 
8d92					ld hl, LFSRSeed+6 
8d92					call hexout 
8d92			 
8d92					ld a,(input_cur_flash) 
8d92					ld hl, LFSRSeed+8 
8d92					call hexout 
8d92			 
8d92					ld a,(input_len) 
8d92					ld hl, LFSRSeed+10 
8d92					call hexout 
8d92					ld hl, LFSRSeed+12 
8d92					ld a, 0 
8d92					ld (hl),a 
8d92					ld a, display_row_4 
8d92					ld de, LFSRSeed 
8d92					call str_at_display 
8d92				endif 
8d92 cd e0 8a				call update_display 
8d95			 
8d95					; TODO keyboard processing 
8d95			 
8d95			if BASE_CPM 
8d95					call cin_wait 
8d95			else 
8d95 cd e4 de				call cin    ; _wait 
8d98			endif 
8d98 fe 00				cp 0 
8d9a ca 3d 8d				jp z, .inmain 
8d9d			 
8d9d fe 0b				cp KEY_LEFT    ; cursor left 
8d9f ca 57 8e				jp z, input_left 
8da2				 
8da2 fe 0c				cp KEY_RIGHT      ; cursor right 
8da4 ca 5e 8e				jp z, input_right 
8da7			 
8da7 fe 0d				cp KEY_CR 
8da9 c8					ret z 
8daa			 
8daa fe 08				cp KEY_BS 
8dac ca cc 8e				jp z, input_delchar 
8daf			 
8daf fe 06				cp KEY_NEXTWORD 
8db1 ca d8 8d				jp z, input_nxtword 
8db4			 
8db4 fe 07				cp KEY_PREVWORD 
8db6 ca ff 8d				jp z, input_prvword 
8db9			 
8db9 fe 0e				cp KEY_HOME    ; jump to start of line 
8dbb 20 08				jr nz, .ikh 
8dbd 3e 00				ld a, 0 
8dbf 32 4f ee				ld (input_cursor), a 
8dc2 ca 3d 8d				jp z, .inmain 
8dc5			.ikh: 
8dc5			 
8dc5 fe 0f				cp KEY_END     ; jump to end of line 
8dc7 20 09				jr nz, .ike 
8dc9 3a 54 ee				ld a, (input_len) 
8dcc 32 4f ee				ld (input_cursor),a 
8dcf ca 3d 8d				jp z, .inmain 
8dd2			.ike: 
8dd2 fe 05			        cp KEY_UP      ; recall last command 
8dd4 c8					ret z 
8dd5			;jr nz, .irec 
8dd5			; TODO next word 
8dd5			; TODO prev word 
8dd5			;  
8dd5			; 
8dd5			;	ld hl, scratch 
8dd5			;	ld de, os_last_cmd 
8dd5			;	call strcpy 
8dd5			;		jp  .inmain 
8dd5			.irec: 
8dd5			;		jr .instr1 
8dd5			 
8dd5			 
8dd5			 
8dd5					; if any keys not intercepted by above but are special keys like function keys then return them to the program 
8dd5			 
8dd5			; TODO return if any special keys are given 
8dd5			;		ld l, a 
8dd5			;		ld a, 28 ; KEY_F12   ; 27 
8dd5			;		sub l 
8dd5			;		ret m 
8dd5			;		ld a, l 
8dd5					; if no special key then insert as a char 
8dd5			 
8dd5 c3 9e 8e				jp input_inschr 
8dd8			 
8dd8				 
8dd8			input_nxtword: 
8dd8				; jump to start next word after the cursor 
8dd8			 
8dd8			.insknwn:	 
8dd8 cd 94 8e				call input_curptr	 
8ddb 7e					ld a,(hl)	 
8ddc fe 00				cp 0 
8dde ca 3d 8d				jp z, .inmain    ; end of string 
8de1			 
8de1			; if we are on a word, then move off of it 
8de1			 
8de1 fe 20				cp ' ' 
8de3 28 06				jr z, .inspace     ; we are on space so eat the space until we hit non-space 
8de5 21 4f ee				ld hl, input_cursor 
8de8 34					inc (hl) 
8de9 18 ed				jr .insknwn 
8deb			 
8deb			.inspace: 
8deb			 
8deb cd 94 8e				call input_curptr	 
8dee 7e					ld a,(hl)	 
8def fe 00				cp 0 
8df1 ca 3d 8d				jp z, .inmain    ; end of string 
8df4			 
8df4			; if we are on a word, then move off of it 
8df4			 
8df4 fe 20				cp ' ' 
8df6 c2 3d 8d				jp nz, .inmain     ; we are on non space so at next word 
8df9 21 4f ee				ld hl, input_cursor 
8dfc 34					inc (hl) 
8dfd 18 ec				jr .inspace 
8dff			 
8dff			 
8dff			 
8dff			 
8dff			input_prvword: 
8dff				; jump to the start of previous word before the cursor 
8dff			 
8dff			; where are we to start with currently? 
8dff			 
8dff cd 94 8e				call input_curptr	 
8e02 7e					ld a, (hl) 
8e03 fe 20				cp ' ' 
8e05 28 1d				jr z, .inspacep     ; we are on space so eat the space until we hit non-space 
8e07			 
8e07			 
8e07			 
8e07			.inskpwn:	 
8e07 3a 4f ee				ld a,(input_cursor) 
8e0a fe 00				cp 0 
8e0c ca 3d 8d				jp z, .inmain    ; start of string 
8e0f			 
8e0f			;if we are on a word, then move off of it 
8e0f			 
8e0f cd 94 8e				call input_curptr	 
8e12 7e					ld a, (hl) 
8e13 fe 20				cp ' ' 
8e15 28 06				jr z, .iwstart     ; we are on space so eat the space until we hit non-space 
8e17					;jp z, .inmain    ; start of string 
8e17 21 4f ee				ld hl, input_cursor 
8e1a 35					dec (hl) 
8e1b 18 ea				jr .inskpwn 
8e1d			.iwstart: 
8e1d 21 4f ee				ld hl, input_cursor 
8e20 34					inc (hl) 
8e21 c3 3d 8d				jp .inmain 
8e24					 
8e24			 
8e24			.inspacep: 
8e24			 
8e24					;jp .inmain    ; start of string 
8e24			 
8e24			 
8e24			 
8e24 3a 4f ee				ld a,(input_cursor) 
8e27 fe 00				cp 0 
8e29 ca 3d 8d				jp z, .inmain    ; start of string 
8e2c			 
8e2c			; if we are on a word, then move off of it 
8e2c			 
8e2c cd 94 8e				call input_curptr	 
8e2f 7e					ld a, (hl) 
8e30 fe 20				cp ' ' 
8e32 c2 3b 8e				jp nz, .incharp     ; we are on non space so at end of prev word 
8e35 21 4f ee				ld hl, input_cursor 
8e38 35					dec (hl) 
8e39 18 e9				jr .inspacep 
8e3b			 
8e3b			 
8e3b			.incharp:	 
8e3b					; eat the word to get to the start 
8e3b 3a 4f ee				ld a,(input_cursor) 
8e3e fe 00				cp 0 
8e40 ca 3d 8d				jp z, .inmain    ; start of string 
8e43			 
8e43			; if we are on a word, then move off of it 
8e43			 
8e43 cd 94 8e				call input_curptr	 
8e46 7e					ld a, (hl) 
8e47 fe 20				cp ' ' 
8e49 28 06				jr z, .ipwordst     ; we are on space so eat the space until we hit non-space 
8e4b 21 4f ee				ld hl, input_cursor 
8e4e 35					dec (hl) 
8e4f 18 ea				jr .incharp 
8e51			.ipwordst: 
8e51					; at space before the prev word so reposition over it 
8e51 21 4f ee				ld hl, input_cursor 
8e54 34					inc (hl) 
8e55 18 b0				jr .inskpwn 
8e57					 
8e57			 
8e57			 
8e57			input_left: 
8e57				; move cursor left 
8e57 21 4f ee			ld hl, input_cursor 
8e5a 35				dec (hl) 
8e5b			;	cp 0 
8e5b			;	jp z, .inmain    ; ignore left as at the start of the string 
8e5b c3 3d 8d			jp .inmain 
8e5e			 
8e5e			input_right: 
8e5e				; move cursor right 
8e5e				 
8e5e				;ld a, (input_size) 
8e5e				;ld b, a 
8e5e 21 4f ee			ld hl, input_cursor 
8e61 34				inc (hl) 
8e62				;dec b 
8e62				;cp 0 
8e62				;jp z, .inmain   ; ignore as at end of the string buffer 
8e62				;ld a, b 
8e62				;inc a 
8e62				;ld (input_cursor), a 
8e62 c3 3d 8d			jp .inmain 
8e65			 
8e65			 
8e65			 
8e65			input_disp_ref: 
8e65				; display the text from start of buffer (ie full refresh) 
8e65 3a 5e ee			ld a, (input_at_pos) 
8e68 2a 61 ee			ld hl,(input_start) 
8e6b eb				ex de, hl 
8e6c cd d0 8a			call str_at_display  
8e6f c9				ret 
8e70			input_disp_oncur: 
8e70				; display the text from cursor position to end of buffer 
8e70				; TODO position start of string at cursor position on screen 
8e70				; TODO draw from that point on 
8e70 3a 4f ee			ld a, (input_cursor) 
8e73 47				ld b, a 
8e74 3a 5e ee			ld a, (input_at_pos) 
8e77 80				add b 
8e78 48				ld c, b     ; save a 
8e79 78				ld a, b     ; inc string start for cursor 
8e7a 2a 61 ee			ld hl,(input_start) 
8e7d cd ea 8c			call addatohl 
8e80 eb				ex de, hl 
8e81 79				ld a, c 
8e82 cd d0 8a			call str_at_display  
8e85 c9				ret 
8e86			 
8e86			input_nxtw: 
8e86				; Find next word 
8e86 c9				ret 
8e87			 
8e87			input_prvw: 
8e87				; Find previous word 
8e87 c9				ret 
8e88			 
8e88			input_lenrem:   
8e88				; Calculate the length of string remaining from current cursor 
8e88				; position to end of buffer (exc null term) 
8e88				 
8e88 3a 4f ee			ld a, (input_cursor) 
8e8b 4f				ld c, a 
8e8c 3a 60 ee			ld a, (input_size) 
8e8f 91				sub c 
8e90 06 00			ld b, 0 
8e92 0d				dec c 
8e93 c9				ret	 
8e94			 
8e94			input_curptr: 
8e94				; calc address of the character under the cursor 
8e94				 
8e94 2a 61 ee			ld hl, (input_start) 
8e97 3a 4f ee			ld a, (input_cursor) 
8e9a cd ea 8c			call addatohl 
8e9d c9				ret 
8e9e			 
8e9e			input_inschr: 
8e9e				; Insert char at cursor position 
8e9e f5				push af   ; save char 
8e9f				;call input_lenrem    ; get bc length of remaining string 
8e9f			 
8e9f				 
8e9f cd 94 8e			call input_curptr 
8ea2			;	ld hl, (input_start) 
8ea2			;	ld a, (input_cursor) 
8ea2			;	call addatohl 
8ea2				;push hl   ; save to come back to 
8ea2			 
8ea2				; shift everything up one to end of buffer 
8ea2			 
8ea2				;push hl 
8ea2				;dec de 
8ea2				;inc de 
8ea2			;	ldir 
8ea2				 
8ea2				;pop hl 
8ea2			 
8ea2				; are we adding to the end of line? 
8ea2			 
8ea2 3a 4f ee			ld a, (input_cursor) 
8ea5 47				ld b, a 
8ea6 3a 54 ee			ld a, (input_len) 
8ea9 b8				cp b 
8eaa 20 09			jr nz, .insmid   ; no, insert in middle of text 
8eac			 
8eac				; tack on the end of the line 
8eac f1				pop af 
8ead 77				ld (hl), a   ; save new char 
8eae 23				inc hl 
8eaf 3e 00			ld a, 0 
8eb1 77				ld (hl), a 
8eb2 c3 5e 8e			jp input_right 
8eb5				 
8eb5			.insmid: 
8eb5				; hl has insertion point so move everything up one to allow for insertion 
8eb5				;call input_shiftright 
8eb5 f1				pop af 
8eb6			 
8eb6			.shufinsmid: 
8eb6 47				ld b, a     ; b contains new char, c prev char at this position  
8eb7 7e				ld a, (hl) 
8eb8			 
8eb8 fe 00			cp 0    ; at end of string need to then dump new char and add term 
8eba 28 07			jr z, .endinsmid 
8ebc 4f				ld c, a 
8ebd 78				ld a, b 
8ebe 77				ld (hl), a 
8ebf 23				inc hl 
8ec0 79				ld a, c 
8ec1 18 f3			jr .shufinsmid 
8ec3				 
8ec3			 
8ec3			 
8ec3			 
8ec3			.endinsmid: 
8ec3 78				ld a, b 
8ec4 77				ld (hl), a 
8ec5 23				inc hl 
8ec6 3e 00			ld a, 0 
8ec8 77				ld (hl), a 
8ec9			 
8ec9			 
8ec9			;	ld (hl), a   ; save new char 
8ec9			 
8ec9 c3 5e 8e			jp input_right 
8ecc			 
8ecc			;input_shiftright: 
8ecc			;	; shift text right at cursor, hl has shift start 
8ecc			;	push hl 
8ecc			;	push de 
8ecc			;	push bc 
8ecc			; 
8ecc			; 
8ecc			;	; move to end of string past zero term 
8ecc			;	ld hl,(input_start) 
8ecc			;	ld a, (input_len) 
8ecc			;	call addatohl 
8ecc			;	inc hl 
8ecc			;;	inc hl 
8ecc			;;	inc hl 
8ecc			;	ld a, 0 
8ecc			;	ld (hl), a 
8ecc			;;	dec hl 
8ecc			;	 
8ecc			;;	ld (hl), a 
8ecc			;;	dec hl 
8ecc			; 
8ecc			;	push hl 
8ecc			;	pop de 
8ecc			;	inc de 
8ecc			;	 
8ecc			; 
8ecc			;;	ld hl,(input_start) 
8ecc			;;	ld a, (input_cursor) 
8ecc			;;	call addatohl 
8ecc			; 
8ecc			; 
8ecc			;	; calc how many bytes from cursor pos to end of string we need to shift 
8ecc			;	call input_lenrem    ; get bc length of remaining string 
8ecc			;	;ld a, (input_cursor) 
8ecc			;	;ld c, a 
8ecc			;	ld a, (input_len) 
8ecc			;	cp 2 
8ecc			;	jr z, .iskipzero	 
8ecc			;	;sub c 
8ecc			;	;inc a 
8ecc			;	;ld c, a 
8ecc			;	;ld b, 0 
8ecc			;	inc c 
8ecc			;	inc c 
8ecc			;	; move data 
8ecc			;	lddr 
8ecc			;.iskipzero: 
8ecc			; 
8ecc			;	pop bc 
8ecc			;	pop de 
8ecc			;	pop hl 
8ecc			;	ret	 
8ecc			 
8ecc			input_delchar: 
8ecc				; Delete char at cursor position 
8ecc cd 88 8e			call input_lenrem    ; get bc length of remaining string 
8ecf 2a 61 ee			ld hl, (input_start) 
8ed2 3a 4f ee			ld a, (input_cursor) 
8ed5 cd ea 8c			call addatohl 
8ed8			 
8ed8 e5				push hl 
8ed9 d1				pop de 
8eda 1b				dec de 
8edb			 
8edb			.dl:	 
8edb ed a0			ldi  
8edd 7e				ld a, (hl) 
8ede fe 00			cp 0 
8ee0 28 02			jr z, .dldone 
8ee2 18 f7			jr .dl 
8ee4			.dldone: 
8ee4 ed a0			ldi 
8ee6			 
8ee6 c3 57 8e			jp input_left 
8ee9			 
8ee9			 
8ee9			endif 
8ee9			 
8ee9			 
8ee9			 
8ee9			if EDIT_V1 
8ee9			input_str: 
8ee9			 
8ee9				    	ld (input_at_pos),a      ; save display position to start 
8ee9					add c 
8ee9					ld (input_at_cursor),a	; save draw pos of cursor 
8ee9					ld (input_start), hl     ; save ptr to buffer 
8ee9					ld a, c 
8ee9					call addatohl 
8ee9					ld (input_ptr), hl     ; save ptr to point under the cursor 
8ee9					ld a,d 
8ee9				        ld (input_size), a       ; save length of input area 
8ee9					ld a, c 
8ee9					ld (input_cursor),a      ; init cursor start position  
8ee9					ld a,e 
8ee9				        ld (input_display_size), a       ; save length of input area that is displayed TODO 
8ee9					 
8ee9					 
8ee9			 
8ee9			;		ld a,(input_ptr) 
8ee9			;		ld (input_under_cursor),a 	; save what is under the cursor 
8ee9			 
8ee9			; TODO move out to cin as cursor shape is used by the 4x4 ??? 
8ee9					; init cursor shape if not set by the cin routines 
8ee9					ld hl, cursor_shape 
8ee9			if BASE_KEV 
8ee9					ld a, 255 
8ee9			else 
8ee9					ld a, '#' 
8ee9			endif 
8ee9					ld (hl), a 
8ee9					inc hl 
8ee9					ld a, 0 
8ee9					ld (hl), a 
8ee9			 
8ee9					ld a, CUR_BLINK_RATE 
8ee9					ld (input_cur_flash), a 
8ee9					ld a, 1 
8ee9					ld (input_cur_onoff),a 
8ee9			 
8ee9			;	if DEBUG_INPUT 
8ee9			;		push af 
8ee9			;		ld a, 'I' 
8ee9			;		ld (debug_mark),a 
8ee9			;		pop af 
8ee9			;		CALLMONITOR 
8ee9			;	endif 
8ee9			.is1:		; main entry loop 
8ee9			 
8ee9			 
8ee9			 
8ee9					; pause 1ms 
8ee9			 
8ee9					ld a, 1 
8ee9					call aDelayInMS 
8ee9			 
8ee9					; dec flash counter 
8ee9					ld a, (input_cur_flash) 
8ee9					dec a 
8ee9					ld (input_cur_flash), a 
8ee9					cp 0 
8ee9					jr nz, .nochgstate 
8ee9			 
8ee9			 
8ee9					; change state 
8ee9					ld a,(input_cur_onoff) 
8ee9					neg 
8ee9					ld (input_cur_onoff),a 
8ee9			 
8ee9			 
8ee9					; reset on change of state 
8ee9					ld a, CUR_BLINK_RATE 
8ee9					ld (input_cur_flash), a 
8ee9			 
8ee9			.nochgstate: 
8ee9					 
8ee9					 
8ee9			 
8ee9					; display cursor  
8ee9			 
8ee9			;		ld hl, (input_start) 
8ee9			;		ld a, (input_cursor) 
8ee9			;		call addatohl 
8ee9			 
8ee9					; get char under cursor and replace with cursor 
8ee9			ld hl, (input_ptr) 
8ee9			;		ld a, (hl) 
8ee9			;		ld (input_under_cursor),a 
8ee9			;		ld a, '_' 
8ee9			;		ld (hl), a 
8ee9			 
8ee9					; display string 
8ee9			 
8ee9					ld de, (input_start) 
8ee9					ld a, (input_at_pos) 
8ee9					call str_at_display 
8ee9			;	        call update_display 
8ee9			 
8ee9					; find place to put the cursor 
8ee9			;		add h 
8ee9			;		ld l, display_row_1 
8ee9			;		sub l 
8ee9			; (input_at_pos) 
8ee9					;ld c, a 
8ee9			;		ld a, (input_cursor) 
8ee9			;		ld l, (input_at_pos) 
8ee9			;		;ld b, h 
8ee9			;		add l 
8ee9			;		ld (input_at_cursor),a 
8ee9					;ld l,h 
8ee9			 
8ee9			;		ld h, 0 
8ee9			;		ld l,(input_at_pos) 
8ee9			;		ld a, (input_cursor) 
8ee9			;		call addatohl 
8ee9			;		ld a, 074H-19			; TODO BUG I dont know why offset is showing 74H 
8ee9			;		call subafromhl 
8ee9			;		ld a,l 
8ee9			;		ld (input_at_cursor), a 
8ee9			 
8ee9				if DEBUG_INPUT 
8ee9					ld a, (hardware_diag) 
8ee9					cp 0 
8ee9					jr z, .skip_input_diag 
8ee9			 
8ee9					ld a,(input_at_pos) 
8ee9					ld hl, LFSRSeed 
8ee9					call hexout 
8ee9					ld a, (input_cursor) 
8ee9					ld hl, LFSRSeed+2 
8ee9					call hexout 
8ee9					ld a,(input_at_cursor) 
8ee9					ld hl, LFSRSeed+4 
8ee9					call hexout 
8ee9			 
8ee9					ld a,(input_cur_onoff) 
8ee9					ld hl, LFSRSeed+6 
8ee9					call hexout 
8ee9			 
8ee9					ld a,(input_cur_flash) 
8ee9					ld hl, LFSRSeed+8 
8ee9					call hexout 
8ee9			 
8ee9					ld a,(input_len) 
8ee9					ld hl, LFSRSeed+10 
8ee9					call hexout 
8ee9					ld hl, LFSRSeed+12 
8ee9					ld a, 0 
8ee9					ld (hl),a 
8ee9					ld a, display_row_4 
8ee9					ld de, LFSRSeed 
8ee9					call str_at_display 
8ee9					.skip_input_diag: 
8ee9				endif 
8ee9			 
8ee9					; decide on if we are showing the cursor this time round 
8ee9			 
8ee9					ld a, (input_cur_onoff) 
8ee9					cp 255 
8ee9					jr z, .skipcur 
8ee9			 
8ee9			 
8ee9					ld a,(input_at_cursor) 
8ee9					ld de, cursor_shape 
8ee9					call str_at_display 
8ee9			 
8ee9					; save length of current input string 
8ee9					ld hl, (input_start) 
8ee9					ld a, 0 
8ee9					call strlent 
8ee9					ld a,l 
8ee9					ld (input_len),a 
8ee9			 
8ee9			.skipcur: 
8ee9			 
8ee9				        call update_display 
8ee9					 
8ee9			 
8ee9			 
8ee9					; wait 
8ee9				 
8ee9					; TODO loop without wait to flash the cursor and char under cursor	 
8ee9					call cin    ; _wait 
8ee9			 
8ee9					cp 0 
8ee9					jp z, .is1 
8ee9			 
8ee9					; get ptr to char to input into 
8ee9			 
8ee9					ld c,a 
8ee9					ld hl, (input_start) 
8ee9					ld a, (input_cursor) 
8ee9					call addatohl 
8ee9					ld (input_ptr), hl 
8ee9					ld a,c 
8ee9			 
8ee9					; replace char under cursor 
8ee9			 
8ee9			;		ld hl, (input_ptr) 
8ee9			;		ld a, (input_under_cursor) 	; get what is under the cursor 
8ee9			;		ld (hl), a 
8ee9			 
8ee9			;	if DEBUG_INPUT 
8ee9			;		push af 
8ee9			;		ld a, 'i' 
8ee9			;		ld (debug_mark),a 
8ee9			;		pop af 
8ee9			;		CALLMONITOR 
8ee9			;	endif 
8ee9					cp KEY_HOME 
8ee9					jr nz, .iske 
8ee9			 
8ee9					ld a, (input_at_pos) 
8ee9					ld (input_at_cursor),a 
8ee9					ld a, 0 
8ee9					ld (input_cursor), a 
8ee9					jp .is1 
8ee9					 
8ee9			.iske:		cp KEY_END 
8ee9					jr nz, .isknw 
8ee9					jp .is1 
8ee9			 
8ee9			.isknw:		cp KEY_NEXTWORD 
8ee9					jr nz, .iskpw 
8ee9			 
8ee9			.isknwm:	ld hl, (input_ptr) 
8ee9					ld a,(hl)	 
8ee9					cp 0 
8ee9					jp z, .is1    ; end of string 
8ee9					cp ' ' 
8ee9					jp z, .is1    ; end of word 
8ee9					inc hl 
8ee9					ld (input_ptr), hl 
8ee9					ld a, (input_at_cursor) 
8ee9					inc a 
8ee9					ld (input_at_cursor), a 
8ee9					jr .isknwm 
8ee9			 
8ee9			.iskpw:		cp KEY_PREVWORD 
8ee9					jr nz, .iskl 
8ee9			.iskpwm:	 
8ee9					ld hl, (input_ptr) 
8ee9					ld a,(hl)	 
8ee9					cp 0  
8ee9					jp z, .is1    ; end of string 
8ee9					cp ' ' 
8ee9					jp z, .is1    ; end of word 
8ee9					dec hl 
8ee9					ld (input_ptr), hl 
8ee9					ld a, (input_at_cursor) 
8ee9					dec a 
8ee9					ld (input_at_cursor), a 
8ee9					jr .iskpwm 
8ee9			 
8ee9			 
8ee9			.iskl:		cp KEY_LEFT 
8ee9					jr nz, .isk1 
8ee9			 
8ee9					ld a, (input_cursor) 
8ee9			 
8ee9					cp 0 
8ee9					jp z, .is1 		; at start of line to ignore  
8ee9			 
8ee9					dec  a 		; TODO check underflow 
8ee9					ld (input_cursor), a 
8ee9			 
8ee9					ld hl, (input_ptr) 
8ee9					dec hl 
8ee9					ld (input_ptr), hl 
8ee9					 
8ee9					ld a, (input_at_cursor) 
8ee9					dec a 
8ee9					ld (input_at_cursor), a 
8ee9			 
8ee9					ld a, 1		; show cursor moving 
8ee9					ld (input_cur_onoff),a 
8ee9					ld a, CUR_BLINK_RATE 
8ee9					ld (input_cur_flash), a 
8ee9			 
8ee9					jp .is1 
8ee9			 
8ee9			.isk1:		cp KEY_RIGHT 
8ee9					jr nz, .isk2 
8ee9			 
8ee9					ld a,(input_len)		; TODO BUG why cant i load e direct? 
8ee9					ld e,a 
8ee9					ld a, (input_cursor) 
8ee9					cp e 
8ee9					jp z, .is1		; at the end of string so dont go right 
8ee9			 
8ee9					inc  a 		; TODO check overflow 
8ee9					ld (input_cursor), a 
8ee9			 
8ee9					ld a, (input_at_cursor) 
8ee9					inc a 
8ee9					ld (input_at_cursor), a 
8ee9			 
8ee9					ld hl, (input_ptr) 
8ee9					inc hl 
8ee9					ld (input_ptr), hl 
8ee9			 
8ee9					ld a, 1		; show cursor moving 
8ee9					ld (input_cur_onoff),a 
8ee9					ld a, CUR_BLINK_RATE 
8ee9					ld (input_cur_flash), a 
8ee9			 
8ee9					jp .is1 
8ee9			 
8ee9			.isk2:		cp KEY_UP 
8ee9			 
8ee9					jr nz, .isk3 
8ee9			 
8ee9					; swap last command with the current on 
8ee9			 
8ee9					; move cursor to start of string 
8ee9					ld hl, (input_start) 
8ee9					ld (input_ptr), hl 
8ee9			 
8ee9					ld a, (input_at_pos) 
8ee9					ld (input_at_cursor), a 
8ee9			 
8ee9					ld a, 0 
8ee9					ld (input_cursor), a 
8ee9					 
8ee9					; swap input and last command buffers 
8ee9			 
8ee9					ld hl, os_cli_cmd 
8ee9					ld de, os_last_cmd 
8ee9					ld b, 255 
8ee9			.swap1:		ld a, (hl) 
8ee9					ld c,a 
8ee9					ld a, (de) 
8ee9					ld (hl), a 
8ee9					ld a,c 
8ee9					ld (de),a 
8ee9					inc hl 
8ee9					inc de 
8ee9					djnz .swap1 
8ee9			 
8ee9			 
8ee9			 
8ee9			 
8ee9			 
8ee9					jp .is1 
8ee9			 
8ee9			.isk3:		cp KEY_BS 
8ee9					jr nz, .isk4 
8ee9			 
8ee9					ld a, (input_cursor) 
8ee9			 
8ee9					cp 0 
8ee9					jp z, .is1 		; at start of line to ignore  
8ee9			 
8ee9					dec  a 		; TODO check underflow 
8ee9					ld (input_cursor), a 
8ee9			 
8ee9					; hl is source 
8ee9					; de needs to be source - 1 
8ee9			 
8ee9			;		ld a, 0 
8ee9			;		dec hl 
8ee9			;		ld (hl), a 
8ee9			 
8ee9					ld hl, (input_ptr) 
8ee9					dec hl 
8ee9					ld (input_ptr), hl 
8ee9			 
8ee9					; shift all data 
8ee9			 
8ee9					push hl 
8ee9					inc hl 
8ee9					pop de 
8ee9					ld a, (input_len)		; TODO BUG WAS ld c, (input... 
8ee9					ld c,a 
8ee9					ld b,0 
8ee9					ldir  
8ee9			 
8ee9			 
8ee9			 
8ee9			 
8ee9					ld a, (input_at_cursor) 
8ee9					dec a 
8ee9					ld (input_at_cursor), a 
8ee9			 
8ee9			 
8ee9					ld a, 1		; show cursor moving 
8ee9					ld (input_cur_onoff),a 
8ee9					ld a, CUR_BLINK_RATE 
8ee9					ld (input_cur_flash), a 
8ee9			 
8ee9					; remove char 
8ee9					ld a, (input_at_cursor) 
8ee9					inc a 
8ee9					ld de,.iblank 
8ee9					call str_at_display 
8ee9			 
8ee9					jp .is1 
8ee9			 
8ee9			.isk4:		cp KEY_CR 
8ee9					jr z, .endinput 
8ee9			 
8ee9					; else add the key press to the end 
8ee9			 
8ee9					ld c, a			; save key pressed 
8ee9			 
8ee9					ld a,(hl)		; get what is currently under char 
8ee9			 
8ee9					cp 0			; we are at the end of the string 
8ee9					jr nz, .onchar 
8ee9					 
8ee9					; add a char to the end of the string 
8ee9				 
8ee9					ld (hl),c 
8ee9					inc hl 
8ee9			;		ld a,' ' 
8ee9			;		ld (hl),a 
8ee9			;		inc hl 
8ee9					ld a,0 
8ee9					ld (hl),a 
8ee9					dec hl 
8ee9			 
8ee9					ld a, (input_cursor) 
8ee9					inc a				; TODO check max string length and scroll  
8ee9					ld (input_cursor), a		; inc cursor pos 
8ee9							 
8ee9					ld a, (input_at_cursor) 
8ee9					inc a 
8ee9					ld (input_at_cursor), a 
8ee9			 
8ee9					ld hl, (input_ptr) 
8ee9					inc hl 
8ee9					ld (input_ptr), hl 
8ee9			 
8ee9					ld hl, (input_ptr) 
8ee9					inc hl 
8ee9					ld (input_ptr), hl 
8ee9			;	if DEBUG_INPUT 
8ee9			;		push af 
8ee9			;		ld a, '+' 
8ee9			;		ld (debug_mark),a 
8ee9			;		pop af 
8ee9			;		CALLMONITOR 
8ee9			;	endif 
8ee9					ld a, 1		; show cursor moving 
8ee9					ld (input_cur_onoff),a 
8ee9					ld a, CUR_BLINK_RATE 
8ee9					ld (input_cur_flash), a 
8ee9					jp .is1 
8ee9					 
8ee9			 
8ee9			 
8ee9					; if on a char then insert 
8ee9			.onchar: 
8ee9			 
8ee9					; TODO over flow check: make sure insert does not blow out buffer 
8ee9			 
8ee9					; need to do some maths to use lddr 
8ee9			 
8ee9					push hl   ; save char pos 
8ee9					push bc 
8ee9			 
8ee9					ld hl, (input_start) 
8ee9					ld a, (input_len) 
8ee9					call addatohl  		; end of string 
8ee9					inc hl 
8ee9					inc hl		; past zero term 
8ee9					push hl 
8ee9					inc hl 
8ee9					push hl  
8ee9			 
8ee9								; start and end of lddr set, now how much to move? 
8ee9			 
8ee9							 
8ee9					ld a, (input_cursor)		; BUG TODO why cant i load directly into b??? 
8ee9					ld b,a 
8ee9					ld a,(input_len) 
8ee9					ld e,a 
8ee9					sub b 
8ee9					inc a		;?? 
8ee9					inc a		;?? 
8ee9					inc a		;?? 
8ee9			 
8ee9					ld b,0 
8ee9					ld c,a 
8ee9			 
8ee9				if DEBUG_INPUT 
8ee9					push af 
8ee9					ld a, 'i' 
8ee9					ld (debug_mark),a 
8ee9					pop af 
8ee9			;		CALLMONITOR 
8ee9				endif 
8ee9					pop de 
8ee9					pop hl 
8ee9				if DEBUG_INPUT 
8ee9					push af 
8ee9					ld a, 'I' 
8ee9					ld (debug_mark),a 
8ee9					pop af 
8ee9			;		CALLMONITOR 
8ee9				endif 
8ee9					lddr 
8ee9				 
8ee9			 
8ee9			 
8ee9					; TODO have a key for insert/overwrite mode???? 
8ee9					pop bc 
8ee9					pop hl 
8ee9					ld (hl), c		; otherwise overwrite current char 
8ee9					 
8ee9			 
8ee9			 
8ee9			 
8ee9					ld a, (input_cursor) 
8ee9					inc  a 		; TODO check overflow 
8ee9					ld (input_cursor), a 
8ee9			 
8ee9					ld a, (input_at_cursor) 
8ee9					inc a 
8ee9					ld (input_at_cursor), a 
8ee9			 
8ee9					jp .is1 
8ee9			 
8ee9			.endinput:	; TODO look for end of string 
8ee9			 
8ee9					; add trailing space for end of token 
8ee9			 
8ee9					ld hl, (input_start) 
8ee9					ld a,(input_len) 
8ee9					call addatohl 
8ee9					ld a, ' ' 
8ee9					ld (hl),a 
8ee9					; TODO eof of parse marker 
8ee9			 
8ee9					inc hl 
8ee9					ld a, 0 
8ee9					ld (hl),a 
8ee9			 
8ee9			 
8ee9					ret 
8ee9			 
8ee9			.iblank: db " ",0 
8ee9			 
8ee9			 
8ee9			input_str_prev:	ld (input_at_pos), a 
8ee9					ld (input_start), hl 
8ee9					ld a,1			; add cursor 
8ee9					ld (hl),a 
8ee9					inc hl 
8ee9					ld a,0 
8ee9					ld (hl),a 
8ee9					ld (input_ptr), hl 
8ee9					ld a,d 
8ee9					ld (input_size), a 
8ee9					ld a,0 
8ee9					ld (input_cursor),a 
8ee9			.instr1:	 
8ee9			 
8ee9					; TODO do block cursor 
8ee9					; TODO switch cursor depending on the modifer key 
8ee9			 
8ee9					; update cursor shape change on key hold 
8ee9			 
8ee9					ld hl, (input_ptr) 
8ee9					dec hl 
8ee9					ld a,(cursor_shape) 
8ee9					ld (hl), a 
8ee9			 
8ee9					; display entered text 
8ee9					ld a,(input_at_pos) 
8ee9			            	CALL fLCD_Pos       ;Position cursor to location in A 
8ee9			            	LD   de, (input_start) 
8ee9			            	CALL fLCD_Str       ;Display string pointed to by DE 
8ee9			 
8ee9					call cin 
8ee9					cp 0 
8ee9					jr z, .instr1 
8ee9			 
8ee9					; proecess keyboard controls first 
8ee9			 
8ee9					ld hl,(input_ptr) 
8ee9			 
8ee9					cp KEY_CR	 ; pressing enter ends input 
8ee9					jr z, .instrcr 
8ee9			 
8ee9					cp KEY_BS 	; back space 
8ee9					jr nz, .instr2 
8ee9					; process back space 
8ee9			 
8ee9					; TODO stop back space if at start of string 
8ee9					dec hl 
8ee9					dec hl ; to over write cursor 
8ee9					ld a,(cursor_shape) 
8ee9					;ld a,0 
8ee9					ld (hl),a 
8ee9					inc hl 
8ee9					ld a," " 
8ee9					ld (hl),a 
8ee9					ld (input_ptr),hl 
8ee9					 
8ee9			 
8ee9					jr .instr1 
8ee9			 
8ee9			.instr2:	cp KEY_LEFT    ; cursor left 
8ee9					jr nz, .instr3 
8ee9					dec hl 
8ee9					ld (input_ptr),hl 
8ee9					jr .instr1 
8ee9				 
8ee9			.instr3:	cp KEY_RIGHT      ; cursor right 
8ee9					jr nz, .instr4 
8ee9					inc hl 
8ee9					ld (input_ptr),hl 
8ee9					jr .instr1 
8ee9			 
8ee9			.instr4:	cp KEY_HOME    ; jump to start of line 
8ee9					jr nz, .instr5 
8ee9					dec hl 
8ee9					ld (input_ptr),hl 
8ee9					jr .instr1 
8ee9			 
8ee9			.instr5:	cp KEY_END     ; jump to end of line 
8ee9					jr nz, .instr6 
8ee9					dec hl 
8ee9					ld (input_ptr),hl 
8ee9					jr .instr1 
8ee9			.instr6:        cp KEY_UP      ; recall last command 
8ee9					jr nz, .instrnew 
8ee9			 
8ee9				ld hl, scratch 
8ee9				ld de, os_last_cmd 
8ee9				call strcpy 
8ee9					jr .instr1 
8ee9			 
8ee9			 
8ee9			.instrnew:	; no special key pressed to see if we have room to store it 
8ee9			 
8ee9					; TODO do string size test 
8ee9			 
8ee9					dec hl ; to over write cursor 
8ee9					ld (hl),a 
8ee9					inc hl 
8ee9					ld a,(cursor_shape) 
8ee9					ld (hl),a 
8ee9					inc hl 
8ee9					ld a,0 
8ee9					ld (hl),a 
8ee9			 
8ee9					ld (input_ptr),hl 
8ee9					 
8ee9					jr .instr1 
8ee9			.instrcr:	dec hl		; remove cursor 
8ee9					ld a,' '	; TODO add a trailing space for safety 
8ee9					ld (hl),a 
8ee9					inc hl 
8ee9					ld a,0 
8ee9					ld (hl),a 
8ee9			 
8ee9			 
8ee9					; if at end of line scroll up    
8ee9					; TODO detecting only end of line 4 for scroll up  
8ee9			 
8ee9					;ld   
8ee9			 
8ee9					ret 
8ee9			 
8ee9			 
8ee9			endif 
8ee9			; strcpy hl = dest, de source 
8ee9			 
8ee9 1a			strcpy:   LD   A, (DE)        ;Get character from string 
8eea b7			            OR   A              ;Null terminator? 
8eeb c8			            RET  Z              ;Yes, so finished 
8eec 1a					ld a,(de) 
8eed 77					ld (hl),a 
8eee 13			            INC  DE             ;Point to next character 
8eef 23					inc hl 
8ef0 18 f7		            JR   strcpy       ;Repeat 
8ef2 c9					ret 
8ef3			 
8ef3			 
8ef3			; TODO string_at  
8ef3			; pass string which starts with lcd offset address and then null term string 
8ef3			 
8ef3			; TODO string to dec 
8ef3			; TODO string to hex 
8ef3			; TODO byte to string hex 
8ef3			; TODO byte to string dec 
8ef3			 
8ef3			 
8ef3			 
8ef3			; from z80uartmonitor 
8ef3			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
8ef3			; OUTPUT VALUE OF A IN HEX ONE NYBBLE AT A TIME 
8ef3			; pass hl for where to put the text 
8ef3			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
8ef3 c5			hexout:	PUSH BC 
8ef4 f5					PUSH AF 
8ef5 47					LD B, A 
8ef6					; Upper nybble 
8ef6 cb 3f				SRL A 
8ef8 cb 3f				SRL A 
8efa cb 3f				SRL A 
8efc cb 3f				SRL A 
8efe cd 0e 8f				CALL tohex 
8f01 77					ld (hl),a 
8f02 23					inc hl	 
8f03					 
8f03					; Lower nybble 
8f03 78					LD A, B 
8f04 e6 0f				AND 0FH 
8f06 cd 0e 8f				CALL tohex 
8f09 77					ld (hl),a 
8f0a 23					inc hl	 
8f0b					 
8f0b f1					POP AF 
8f0c c1					POP BC 
8f0d c9					RET 
8f0e					 
8f0e			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
8f0e			; TRANSLATE value in lower A TO 2 HEX CHAR CODES FOR DISPLAY 
8f0e			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
8f0e			tohex: 
8f0e e5					PUSH HL 
8f0f d5					PUSH DE 
8f10 16 00				LD D, 0 
8f12 5f					LD E, A 
8f13 21 1b 8f				LD HL, .DATA 
8f16 19					ADD HL, DE 
8f17 7e					LD A, (HL) 
8f18 d1					POP DE 
8f19 e1					POP HL 
8f1a c9					RET 
8f1b			 
8f1b			.DATA: 
8f1b 30					DEFB	30h	; 0 
8f1c 31					DEFB	31h	; 1 
8f1d 32					DEFB	32h	; 2 
8f1e 33					DEFB	33h	; 3 
8f1f 34					DEFB	34h	; 4 
8f20 35					DEFB	35h	; 5 
8f21 36					DEFB	36h	; 6 
8f22 37					DEFB	37h	; 7 
8f23 38					DEFB	38h	; 8 
8f24 39					DEFB	39h	; 9 
8f25 41					DEFB	41h	; A 
8f26 42					DEFB	42h	; B 
8f27 43					DEFB	43h	; C 
8f28 44					DEFB	44h	; D 
8f29 45					DEFB	45h	; E 
8f2a 46					DEFB	46h	; F 
8f2b			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
8f2b			;; 	ASCII char code for 0-9,A-F in A to single hex digit 
8f2b			;;    subtract $30, if result > 9 then subtract $7 more 
8f2b			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
8f2b			atohex: 
8f2b d6 30				SUB $30 
8f2d fe 0a				CP 10 
8f2f f8					RET M		; If result negative it was 0-9 so we're done 
8f30 d6 07				SUB $7		; otherwise, subtract $7 more to get to $0A-$0F 
8f32 c9					RET		 
8f33			 
8f33			 
8f33			 
8f33			 
8f33			; Get 2 ASCII characters as hex byte from pointer in hl 
8f33			 
8f33			BYTERD: 
8f33 16 00			LD	D,00h		;Set up 
8f35 cd 3d 8f			CALL	HEXCON		;Get byte and convert to hex 
8f38 87				ADD	A,A		;First nibble so 
8f39 87				ADD	A,A		;multiply by 16 
8f3a 87				ADD	A,A		; 
8f3b 87				ADD	A,A		; 
8f3c 57				LD	D,A		;Save hi nibble in D 
8f3d			HEXCON: 
8f3d 7e				ld a, (hl)		;Get next chr 
8f3e 23				inc hl 
8f3f d6 30			SUB	030h		;Makes '0'-'9' equal 0-9 
8f41 fe 0a			CP	00Ah		;Is it 0-9 ? 
8f43 38 02			JR	C,NALPHA	;If so miss next bit 
8f45 d6 07			SUB	007h		;Else convert alpha 
8f47			NALPHA: 
8f47 b2				OR	D		;Add hi nibble back 
8f48 c9				RET			; 
8f49			 
8f49			 
8f49			; 
8f49			; Get a word (16 bit) in hexadecimal notation. The result is returned in HL. 
8f49			; Since the routines get_byte and therefore get_nibble are called, only valid 
8f49			; characters (0-9a-f) are accepted. 
8f49			; 
8f49			;get_word        push    af 
8f49			;                call    get_byte        ; Get the upper byte 
8f49			;                ld      h, a 
8f49			;                call    get_byte        ; Get the lower byte 
8f49			;                ld      l, a 
8f49			;                pop     af 
8f49			;                ret 
8f49			; 
8f49			; Get a byte in hexadecimal notation. The result is returned in A. Since 
8f49			; the routine get_nibble is used only valid characters are accepted - the  
8f49			; input routine only accepts characters 0-9a-f. 
8f49			; 
8f49 c5			get_byte:        push    bc              ; Save contents of B (and C) 
8f4a 7e					ld a,(hl) 
8f4b 23					inc hl 
8f4c cd 71 8f		                call    nibble2val      ; Get upper nibble 
8f4f cb 07		                rlc     a 
8f51 cb 07		                rlc     a 
8f53 cb 07		                rlc     a 
8f55 cb 07		                rlc     a 
8f57 47			                ld      b, a            ; Save upper four bits 
8f58 7e					ld a,(hl) 
8f59 cd 71 8f		                call    nibble2val      ; Get lower nibble 
8f5c b0			                or      b               ; Combine both nibbles 
8f5d c1			                pop     bc              ; Restore B (and C) 
8f5e c9			                ret 
8f5f			; 
8f5f			; Get a hexadecimal digit from the serial line. This routine blocks until 
8f5f			; a valid character (0-9a-f) has been entered. A valid digit will be echoed 
8f5f			; to the serial line interface. The lower 4 bits of A contain the value of  
8f5f			; that particular digit. 
8f5f			; 
8f5f			;get_nibble      ld a,(hl)           ; Read a character 
8f5f			;                call    to_upper        ; Convert to upper case 
8f5f			;                call    is_hex          ; Was it a hex digit? 
8f5f			;                jr      nc, get_nibble  ; No, get another character 
8f5f			 ;               call    nibble2val      ; Convert nibble to value 
8f5f			 ;               call    print_nibble 
8f5f			 ;               ret 
8f5f			; 
8f5f			; is_hex checks a character stored in A for being a valid hexadecimal digit. 
8f5f			; A valid hexadecimal digit is denoted by a set C flag. 
8f5f			; 
8f5f			;is_hex          cp      'F' + 1         ; Greater than 'F'? 
8f5f			;                ret     nc              ; Yes 
8f5f			;                cp      '0'             ; Less than '0'? 
8f5f			;                jr      nc, is_hex_1    ; No, continue 
8f5f			;                ccf                     ; Complement carry (i.e. clear it) 
8f5f			;                ret 
8f5f			;is_hex_1        cp      '9' + 1         ; Less or equal '9*? 
8f5f			;                ret     c               ; Yes 
8f5f			;                cp      'A'             ; Less than 'A'? 
8f5f			;                jr      nc, is_hex_2    ; No, continue 
8f5f			;                ccf                     ; Yes - clear carry and return 
8f5f			;                ret 
8f5f			;is_hex_2        scf                     ; Set carry 
8f5f			;                ret 
8f5f			; 
8f5f			; Convert a single character contained in A to upper case: 
8f5f			; 
8f5f fe 61		to_upper:        cp      'a'             ; Nothing to do if not lower case 
8f61 d8			                ret     c 
8f62 fe 7b		                cp      'z' + 1         ; > 'z'? 
8f64 d0			                ret     nc              ; Nothing to do, either 
8f65 e6 5f		                and     $5f             ; Convert to upper case 
8f67 c9			                ret 
8f68			 
8f68			 
8f68			to_lower: 
8f68			 
8f68			   ; if char is in [A-Z] make it lower case 
8f68			 
8f68			   ; enter : a = char 
8f68			   ; exit  : a = lower case char 
8f68			   ; uses  : af 
8f68			 
8f68 fe 41		   cp 'A' 
8f6a d8			   ret c 
8f6b			    
8f6b fe 5b		   cp 'Z'+1 
8f6d d0			   ret nc 
8f6e			    
8f6e f6 20		   or $20 
8f70 c9			   ret 
8f71			 
8f71			; 
8f71			; Expects a hexadecimal digit (upper case!) in A and returns the 
8f71			; corresponding value in A. 
8f71			; 
8f71 fe 3a		nibble2val:      cp      '9' + 1         ; Is it a digit (less or equal '9')? 
8f73 38 02		                jr      c, nibble2val_1 ; Yes 
8f75 d6 07		                sub     7               ; Adjust for A-F 
8f77 d6 30		nibble2val_1:    sub     '0'             ; Fold back to 0..15 
8f79 e6 0f		                and     $f              ; Only return lower 4 bits 
8f7b c9			                ret 
8f7c			; 
8f7c			; Print_nibble prints a single hex nibble which is contained in the lower  
8f7c			; four bits of A: 
8f7c			; 
8f7c			;print_nibble    push    af              ; We won't destroy the contents of A 
8f7c			;                and     $f              ; Just in case... 
8f7c			;                add     a, '0'             ; If we have a digit we are done here. 
8f7c			;                cp      '9' + 1         ; Is the result > 9? 
8f7c			;                jr      c, print_nibble_1 
8f7c			;                add     a, 'A' - '0' - $a  ; Take care of A-F 
8f7c			;print_nibble_1  call    putc            ; Print the nibble and 
8f7c			;                pop     af              ; restore the original value of A 
8f7c			;                ret 
8f7c			;; 
8f7c			;; Send a CR/LF pair: 
8f7c			; 
8f7c			;crlf            push    af 
8f7c			;                ld      a, cr 
8f7c			;                call    putc 
8f7c			;                ld      a, lf 
8f7c			;                call    putc 
8f7c			;                pop     af 
8f7c			;                ret 
8f7c			; 
8f7c			; Print_word prints the four hex digits of a word to the serial line. The  
8f7c			; word is expected to be in HL. 
8f7c			; 
8f7c			;print_word      push    hl 
8f7c			;                push    af 
8f7c			;                ld      a, h 
8f7c			;                call    print_byte 
8f7c			;                ld      a, l 
8f7c			;                call    print_byte 
8f7c			;                pop     af 
8f7c			;                pop     hl 
8f7c			;                ret 
8f7c			; 
8f7c			; Print_byte prints a single byte in hexadecimal notation to the serial line. 
8f7c			; The byte to be printed is expected to be in A. 
8f7c			; 
8f7c			;print_byte      push    af              ; Save the contents of the registers 
8f7c			;                push    bc 
8f7c			;                ld      b, a 
8f7c			;                rrca 
8f7c			;                rrca 
8f7c			;                rrca 
8f7c			;                rrca 
8f7c			;                call    print_nibble    ; Print high nibble 
8f7c			;                ld      a, b 
8f7c			;                call    print_nibble    ; Print low nibble 
8f7c			;                pop     bc              ; Restore original register contents 
8f7c			;                pop     af 
8f7c			;                ret 
8f7c			 
8f7c			 
8f7c			 
8f7c			 
8f7c			 
8f7c			fourehexhl:  
8f7c 7e				ld a,(hl) 
8f7d cd 2b 8f			call atohex 
8f80 cb 3f				SRL A 
8f82 cb 3f				SRL A 
8f84 cb 3f				SRL A 
8f86 cb 3f				SRL A 
8f88 47				ld b, a 
8f89 23				inc hl 
8f8a 7e				ld a,(hl) 
8f8b 23				inc hl 
8f8c cd 2b 8f			call atohex 
8f8f 80				add b 
8f90 57				ld d,a 
8f91 7e				ld a,(hl) 
8f92 cd 2b 8f			call atohex 
8f95 cb 3f				SRL A 
8f97 cb 3f				SRL A 
8f99 cb 3f				SRL A 
8f9b cb 3f				SRL A 
8f9d 47				ld b, a 
8f9e 23				inc hl 
8f9f 7e				ld a,(hl) 
8fa0 23				inc hl 
8fa1 cd 2b 8f			call atohex 
8fa4 80				add b 
8fa5 5f				ld e, a 
8fa6 d5				push de 
8fa7 e1				pop hl 
8fa8 c9				ret 
8fa9			 
8fa9			; pass hl. returns z set if the byte at hl is a digit 
8fa9			;isdigithl:  
8fa9			;	push bc 
8fa9			;	ld a,(hl) 
8fa9			;	cp ':' 
8fa9			;	jr nc, .isdf 		; > 
8fa9			;	cp '0' 
8fa9			;	jr c, .isdf		; < 
8fa9			; 
8fa9			;	; TODO find a better way to set z 
8fa9			; 
8fa9			;	ld b,a 
8fa9			;	cp b 
8fa9			;	pop bc 
8fa9			;	ret 
8fa9			; 
8fa9			;.isdf:	; not digit so clear z 
8fa9			; 
8fa9			;	; TODO find a better way to unset z 
8fa9			; 
8fa9			;	ld b,a 
8fa9			;	inc b 
8fa9			;	cp b 
8fa9			; 
8fa9			;	pop bc 
8fa9			;	ret 
8fa9				 
8fa9				 
8fa9			 
8fa9			 
8fa9			; pass hl as the four byte address to load 
8fa9			 
8fa9			get_word_hl:  
8fa9 e5				push hl 
8faa cd 49 8f			call get_byte 
8fad				 
8fad 47				ld b, a 
8fae			 
8fae e1				pop hl 
8faf 23				inc hl 
8fb0 23				inc hl 
8fb1			 
8fb1			; TODO not able to handle a-f  
8fb1 7e				ld a,(hl) 
8fb2			;	;cp ':' 
8fb2			;	cp 'g' 
8fb2			;	jr nc, .single_byte_hl 		; > 
8fb2			;	cp 'G' 
8fb2			;	jr nc, .single_byte_hl 		; > 
8fb2			;	cp '0' 
8fb2			;	jr c, .single_byte_hl		; < 
8fb2			 
8fb2				;call isdigithl 
8fb2 fe 00			cp 0 
8fb4 28 06			jr z, .single_byte_hl 
8fb6			 
8fb6			.getwhln:   ; hex word so get next byte 
8fb6			 
8fb6 cd 49 8f			call get_byte 
8fb9 6f				ld l, a 
8fba 60				ld h,b 
8fbb c9				ret 
8fbc 68			.single_byte_hl:   ld l,b 
8fbd 26 00				ld h,0 
8fbf c9					ret 
8fc0			 
8fc0			 
8fc0			 
8fc0			 
8fc0 21 60 97			ld hl,asc+1 
8fc3			;	ld a, (hl) 
8fc3			;	call nibble2val 
8fc3 cd 49 8f			call get_byte 
8fc6			 
8fc6			;	call fourehexhl 
8fc6 32 ef e2			ld (scratch+52),a 
8fc9				 
8fc9 21 ed e2			ld hl,scratch+50 
8fcc 22 de e5			ld (os_cur_ptr),hl 
8fcf			 
8fcf c9				ret 
8fd0			 
8fd0			 
8fd0			; from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Other:DispA 
8fd0			 
8fd0			; Decimal Unsigned Version 
8fd0			 
8fd0			;Number in a to decimal ASCII 
8fd0			;adapted from 16 bit found in z80 Bits to 8 bit by Galandros 
8fd0			;Example: display a=56 as "056" 
8fd0			;input: a = number 
8fd0			;Output: a=0,value of a in the screen 
8fd0			;destroys af,bc (don't know about hl and de) 
8fd0			DispAToASCII: 
8fd0 0e 9c			ld	c,-100 
8fd2 cd dc 8f			call	.Na1 
8fd5 0e f6			ld	c,-10 
8fd7 cd dc 8f			call	.Na1 
8fda 0e ff			ld	c,-1 
8fdc 06 2f		.Na1:	ld	b,'0'-1 
8fde 04			.Na2:	inc	b 
8fdf 81				add	a,c 
8fe0 38 fc			jr	c,.Na2 
8fe2 91				sub	c		;works as add 100/10/1 
8fe3 f5				push af		;safer than ld c,a 
8fe4 78				ld	a,b		;char is in b 
8fe5			;TODO	CALL	PUTCHAR	;plot a char. Replace with bcall(_PutC) or similar. 
8fe5 f1				pop af		;safer than ld a,c 
8fe6 c9				ret 
8fe7			 
8fe7			; Decimal Signed Version 
8fe7			 
8fe7			; DispA 
8fe7			; -------------------------------------------------------------- 
8fe7			; Converts a signed integer value to a zero-terminated ASCII 
8fe7			; string representative of that value (using radix 10). 
8fe7			; -------------------------------------------------------------- 
8fe7			; INPUTS: 
8fe7			;     HL     Value to convert (two's complement integer). 
8fe7			;     DE     Base address of string destination. (pointer). 
8fe7			; -------------------------------------------------------------- 
8fe7			; OUTPUTS: 
8fe7			;     None 
8fe7			; -------------------------------------------------------------- 
8fe7			; REGISTERS/MEMORY DESTROYED 
8fe7			; AF HL 
8fe7			; -------------------------------------------------------------- 
8fe7			 
8fe7			;DispHLToASCII: 
8fe7			;   push    de 
8fe7			;   push    bc 
8fe7			; 
8fe7			;; Detect sign of HL. 
8fe7			;    bit    7, h 
8fe7			;    jr     z, ._DoConvert 
8fe7			; 
8fe7			;; HL is negative. Output '-' to string and negate HL. 
8fe7			;    ld     a, '-' 
8fe7			;    ld     (de), a 
8fe7			;    inc    de 
8fe7			; 
8fe7			;; Negate HL (using two's complement) 
8fe7			;    xor    a 
8fe7			;    sub    l 
8fe7			;    ld     l, a 
8fe7			;    ld     a, 0     ; Note that XOR A or SUB A would disturb CF 
8fe7			;    sbc    a, h 
8fe7			;    ld     h, a 
8fe7			; 
8fe7			;; Convert HL to digit characters 
8fe7			;._DoConvert: 
8fe7			;    ld     b, 0     ; B will count character length of number 
8fe7			;-   ld     a, 10 
8fe7			;    syscall  .DivHLByA  ; HL = HL / A, A = remainder 
8fe7			;    push   af 
8fe7			;    inc    b 
8fe7			;    ld     a, h 
8fe7			;    or     l 
8fe7			;    jr     nz, - 
8fe7			; 
8fe7			;; Retrieve digits from stack 
8fe7			;-   pop    af 
8fe7			;    or     $30 
8fe7			;    ld     (de), a 
8fe7			;    inc    de 
8fe7			;    djnz   - 
8fe7			; 
8fe7			;; Terminate string with NULL 
8fe7			;    xor    a 
8fe7			;    ld     (de), a 
8fe7			; 
8fe7			;    pop    bc 
8fe7			;    pop    de 
8fe7			;    ret 
8fe7			 
8fe7			;Comments 
8fe7			; 
8fe7			;    This routine uses the common positive-integer radix conversion algorithm of repeatedly dividing a value by the desired radix (base case: the value is zero) and saving the remainders of each division. 
8fe7			;    As this algorithm gives the digits in reverse order, they are pushed onto the hardware stack so that subsequently popping them yields the correct order. 
8fe7			;    Note that the output string will not be fixed-width. 
8fe7			; 
8fe7			;Example Usage 
8fe7			; 
8fe7			;    ld    hl, -1004 
8fe7			;    ld    de, OP1 
8fe7			;    call  DispA 
8fe7			;    ld    hl, OP1 
8fe7			;    syscall  PutS 
8fe7			 
8fe7			 
8fe7			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/string_to_uint16.z80 
8fe7			 
8fe7			 
8fe7			;Converts an ASCII string to an unsigned 16-bit integer 
8fe7			;Quits when it reaches a non-decimal digit 
8fe7			 
8fe7			string_to_uint16: 
8fe7			atoui_16: 
8fe7			;Input: 
8fe7			;     DE points to the string 
8fe7			;Outputs: 
8fe7			;     HL is the result 
8fe7			;     A is the 8-bit value of the number 
8fe7			;     DE points to the byte after the number 
8fe7			;Destroys: 
8fe7			;     BC 
8fe7			;       if the string is non-empty, BC is HL/10 
8fe7			;Size:  24 bytes 
8fe7			;Speed: 42+d(104+{0,9}) 
8fe7			;       d is the number of digits in the number 
8fe7			;       max is 640 cycles for a 5 digit number 
8fe7			;Assuming no leading zeros: 
8fe7			;1 digit:  146cc 
8fe7			;2 digit:  250cc 
8fe7			;3 digit:  354cc or 363cc (avg: 354.126cc) 
8fe7			;4 digit:  458cc or 467cc (avg: 458.27cc) 
8fe7			;5 digit:  562cc or 571cc or 580cc (avg: 562.4104cc) 
8fe7			;avg: 544.81158447265625cc (544+13297/16384) 
8fe7			;=============================================================== 
8fe7 21 00 00		  ld hl,0 
8fea			.u16a: 
8fea 1a			  ld a,(de) 
8feb d6 30		  sub 30h 
8fed fe 0a		  cp 10 
8fef d0			  ret nc 
8ff0 13			  inc de 
8ff1 44			  ld b,h 
8ff2 4d			  ld c,l 
8ff3 29			  add hl,hl 
8ff4 29			  add hl,hl 
8ff5 09			  add hl,bc 
8ff6 29			  add hl,hl 
8ff7 85			  add a,l 
8ff8 6f			  ld l,a 
8ff9 30 ef		  jr nc,.u16a 
8ffb 24			  inc h 
8ffc c3 ea 8f		  jp .u16a 
8fff			 
8fff			 
8fff			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/string_to_uint16.z80 
8fff			 
8fff			;written by Zeda 
8fff			;Converts a 16-bit unsigned integer to an ASCII string. 
8fff			 
8fff			uitoa_16: 
8fff			;Input: 
8fff			;   DE is the number to convert 
8fff			;   HL points to where to write the ASCII string (up to 6 bytes needed). 
8fff			;Output: 
8fff			;   HL points to the null-terminated ASCII string 
8fff			;      NOTE: This isn't necessarily the same as the input HL. 
8fff d5			  push de 
9000 c5			  push bc 
9001 f5			  push af 
9002 eb			  ex de,hl 
9003			 
9003 01 f0 d8		  ld bc,-10000 
9006 3e 2f		  ld a,'0'-1 
9008 3c			  inc a 
9009 09			  add hl,bc  
900a 38 fc		   jr c,$-2 
900c 12			  ld (de),a 
900d 13			  inc de 
900e			 
900e 01 e8 03		  ld bc,1000 
9011 3e 3a		  ld a,'9'+1 
9013 3d			  dec a  
9014 09			  add hl,bc  
9015 30 fc		   jr nc,$-2 
9017 12			  ld (de),a 
9018 13			  inc de 
9019			 
9019 01 9c ff		  ld bc,-100 
901c 3e 2f		  ld a,'0'-1 
901e 3c			  inc a  
901f 09			  add hl,bc  
9020 38 fc		   jr c,$-2 
9022 12			  ld (de),a 
9023 13			  inc de 
9024			 
9024 7d			  ld a,l 
9025 26 3a		  ld h,'9'+1 
9027 25			  dec h  
9028 c6 0a		  add a,10  
902a 30 fb		   jr nc,$-3 
902c c6 30		  add a,'0' 
902e eb			  ex de,hl 
902f 72			  ld (hl),d 
9030 23			  inc hl 
9031 77			  ld (hl),a 
9032 23			  inc hl 
9033 36 00		  ld (hl),0 
9035			 
9035			;Now strip the leading zeros 
9035 0e fa		  ld c,-6 
9037 09			  add hl,bc 
9038 3e 30		  ld a,'0' 
903a 23			  inc hl  
903b be			  cp (hl)  
903c 28 fc		  jr z,$-2 
903e			 
903e			;Make sure that the string is non-empty! 
903e 7e			  ld a,(hl) 
903f b7			  or a 
9040 20 01		  jr nz,.atoub 
9042 2b			  dec hl 
9043			.atoub: 
9043			 
9043 f1			  pop af 
9044 c1			  pop bc 
9045 d1			  pop de 
9046 c9			  ret 
9047			 
9047			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/toUpper.z80 
9047			 
9047			toUpper: 
9047			;A is the char. 
9047			;If A is a lowercase letter, this sets it to the matching uppercase 
9047			;18cc or 30cc or 41cc 
9047			;avg: 26.75cc 
9047 fe 61		  cp 'a' 
9049 d8			  ret c 
904a fe 7b		  cp 'z'+1 
904c d0			  ret nc 
904d d6 20		  sub 'a'-'A' 
904f c9			  ret 
9050			 
9050			; https://tutorials.eeems.ca/ASMin28Days/lesson/day16.html#cmp 
9050			 
9050			; String Length 
9050			;With a length-prefixed string, finding the length is trivial. For a null-terminated string, the process is decidedly more involved. This is where CPIR comes in. 
9050			 
9050			; Get the length of the null-terminated string starting at $8000 hl 
9050			;    LD     HL, $8000 
9050			 
9050			strlenz: 
9050			 
9050 af			    XOR    A               ; Zero is the value we are looking for. 
9051 47			    LD     B, A             ; Since we haven't the slightest clue as to the  
9052 4f			    LD     C, A             ; actual size of the string, put 0 in BC to search 
9053			                           ; 65, 536 bytes (the entire addressable memory space). 
9053 ed b1		    CPIR                   ; Begin search for a byte equalling zero. 
9055			 
9055			; BC has been decremented so that it holds -length. Now need to synthesize a NEG BC. 
9055 67			    LD     H, A             ; Zero HL (basically set it to 65, 536) to get the 
9056 6f			    LD     L, A             ; number of bytes 
9057 ed 42		    SBC    HL, BC           ; Find the size. CPIR doesn't affect carry. 
9059 2b			    DEC    HL              ; Compensate for null. 
905a c9				ret 
905b			 
905b			; Get the length of the A terminated string starting at $8000 hl 
905b			;    LD     HL, $8000 
905b			 
905b			strlent: 
905b			 
905b			                  ; A is the value we are looking for. 
905b 06 00		    LD     B, 0             ; Since we haven't the slightest clue as to the  
905d 0e 00		    LD     C, 0             ; actual size of the string, put 0 in BC to search 
905f			                           ; 65, 536 bytes (the entire addressable memory space). 
905f ed b1		    CPIR                   ; Begin search for a byte equalling zero. 
9061			 
9061			; BC has been decremented so that it holds -length. Now need to synthesize a NEG BC. 
9061 26 00		    LD     H, 0             ; Zero HL (basically set it to 65, 536) to get the 
9063 2e 00		    LD     L, 0             ; number of bytes 
9065 ed 42		    SBC    HL, BC           ; Find the size. CPIR doesn't affect carry. 
9067 2b			    DEC    HL              ; Compensate for null. 
9068 c9				ret 
9069			 
9069			 
9069			;Comparing Strings 
9069			 
9069			;IN    HL     Address of string1. 
9069			;      DE     Address of string2. 
9069			 
9069			; doc given but wrong??? 
9069			;OUT   zero   Set if string1 = string2, reset if string1 != string2. 
9069			;      carry  Set if string1 > string2, reset if string1 <= string2. 
9069			; tested 
9069			;OUT   carry set  if string1 = string2, carry  reset if string1 != string2. 
9069			 
9069			strcmp_old: 
9069 e5			    PUSH   HL 
906a d5			    PUSH   DE 
906b			 
906b 1a			    LD     A, (DE)          ; Compare lengths to determine smaller string 
906c be			    CP     (HL)            ; (want to minimize work). 
906d 38 01		    JR     C, Str1IsBigger 
906f 7e			    LD     A, (HL) 
9070			 
9070			Str1IsBigger: 
9070 4f			    LD     C, A             ; Put length in BC 
9071 06 00		    LD     B, 0 
9073 13			    INC    DE              ; Increment pointers to meat of string. 
9074 23			    INC    HL 
9075			 
9075			CmpLoop: 
9075 1a			    LD     A, (DE)          ; Compare bytes. 
9076 ed a1		    CPI 
9078 20 09		    JR     NZ, NoMatch      ; If (HL) != (DE), abort. 
907a 13			    INC    DE              ; Update pointer. 
907b ea 75 90		    JP     PE, CmpLoop 
907e			 
907e d1			    POP    DE 
907f e1			    POP    HL 
9080 1a			    LD     A, (DE)          ; Check string lengths to see if really equal. 
9081 be			    CP     (HL) 
9082 c9			    RET 
9083			 
9083			NoMatch: 
9083 2b			    DEC    HL 
9084 be			    CP     (HL)            ; Compare again to affect carry. 
9085 d1			    POP    DE 
9086 e1			    POP    HL 
9087 c9			    RET 
9088			 
9088			;; test strmp 
9088			; 
9088			;ld de, .str1 
9088			;ld hl, .str2 
9088			;call strcmp 
9088			;jr z, .z1 
9088			;;this 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "NZ1" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			;.z1: 
9088			; 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "ZZ1" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			; 
9088			;ld de, .str1 
9088			;ld hl, .str1 
9088			;call strcmp 
9088			;jr z, .z2 
9088			;;this 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "NZ2" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			;.z2: 
9088			; 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "ZZ2" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			; 
9088			;ld de, .str1 
9088			;ld hl, .str2 
9088			;call strcmp 
9088			;jr c, .c1 
9088			; 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "Nc1" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			;.c1: 
9088			;;this 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "cc1" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			; 
9088			;ld de, .str1 
9088			;ld hl, .str1 
9088			;call strcmp 
9088			;jr c, .c2 
9088			;;this 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "Nc2" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			;.c2: 
9088			; 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "cc2" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			;	NEXTW 
9088			;.str1:   db "string1",0 
9088			;.str2:   db "string2",0 
9088			 
9088			; only care about direct match or not 
9088			; hl and de strings 
9088			; zero set if the same 
9088			 
9088			strcmp: 
9088 1a				ld a, (de) 
9089 be				cp (hl) 
908a 28 02			jr z, .ssame 
908c b7				or a 
908d c9				ret 
908e			 
908e			.ssame:  
908e fe 00			cp 0 
9090 c8				ret z 
9091			 
9091 23				inc hl 
9092 13				inc de 
9093 18 f3			jr strcmp 
9095				 
9095				 
9095			 
9095			;Copyright (c) 2014, Luke Maurits 
9095			;All rights reserved. 
9095			; 
9095			;Redistribution and use in source and binary forms, with or without 
9095			;modification, are permitted provided that the following conditions are met: 
9095			; 
9095			;* Redistributions of source code must retain the above copyright notice, this 
9095			;  list of conditions and the following disclaimer. 
9095			; 
9095			;* Redistributions in binary form must reproduce the above copyright notice, 
9095			;  this list of conditions and the following disclaimer in the documentation 
9095			;  and/or other materials provided with the distribution. 
9095			; 
9095			;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
9095			;AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
9095			;IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
9095			;DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE 
9095			;FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
9095			;DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
9095			;SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
9095			;CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
9095			;OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
9095			;OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
9095			 
9095			; https://github.com/lmaurits/lm512/blob/master/string.z80 
9095			 
9095			StrictStrCmp: 
9095				; Load next chars of each string 
9095 1a				ld a, (de) 
9096 47				ld b, a 
9097 7e				ld a, (hl) 
9098				; Compare 
9098 b8				cp b 
9099				; Return non-zero if chars don't match 
9099 c0				ret nz 
909a				; Check for end of both strings 
909a fe 00			cp "\0" 
909c				; Return if strings have ended 
909c c8				ret z 
909d				; Otherwise, advance to next chars 
909d 23				inc hl 
909e 13				inc de 
909f 18 f4			jr StrictStrCmp 
90a1			 
90a1			;end 
90a1			; eof 
90a1			 
90a1			 
90a1			 
90a1			 
90a1			 
90a1			 
# End of file firmware_strings.asm
90a1			include "firmware_memory.asm"   ; malloc and free  
90a1			 
90a1			if DEBUG_FORTH_MALLOC_HIGH 
90a1			.mallocsize: db "Wants malloc >256",0 
90a1			.mallocasize: db "MALLOC gives >256",0 
90a1			.malloczero: db "MALLOC gives zero",0 
90a1			 
90a1			malloc_guard_zerolen: 
90a1				push hl 
90a1				push de 
90a1				push af 
90a1			 
90a1				ld de, 0 
90a1			        call cmp16 
90a1				jr nz, .lowalloz 
90a1			 
90a1				push hl 
90a1				push de 
90a1					ld hl, display_fb0 
90a1					ld (display_fb_active), hl 
90a1				call clear_display 
90a1				ld a, 0 
90a1				ld de, .malloczero 
90a1				call str_at_display 
90a1				call update_display 
90a1				call delay1s 
90a1				call delay1s 
90a1				call bp_on 
90a1			;	ld a, 0 
90a1			;	ld (os_view_disable), a 
90a1			 
90a1				pop de 
90a1				pop hl 
90a1			 
90a1				 
90a1			 
90a1				CALLMONITOR 
90a1			.lowalloz: 
90a1			 
90a1			 
90a1				pop af 
90a1				pop de 
90a1				pop hl 
90a1			ret 
90a1			 
90a1			malloc_guard_entry: 
90a1				push hl 
90a1				push de 
90a1				push af 
90a1			 
90a1			 	or a      ;clear carry flag 
90a1				push hl 
90a1				ld de, 255 
90a1				sbc hl, de 
90a1				jr c, .lowalloc 
90a1			 
90a1				push de 
90a1					ld hl, display_fb0 
90a1					ld (display_fb_active), hl 
90a1				call clear_display 
90a1				ld a, 0 
90a1				ld de, .mallocsize 
90a1				call str_at_display 
90a1				call update_display 
90a1				call delay1s 
90a1				call delay1s 
90a1			;	ld a, 0 
90a1			;	ld (os_view_disable), a 
90a1				call bp_on 
90a1			 
90a1				pop de 
90a1				pop hl 
90a1			 
90a1				 
90a1			 
90a1				CALLMONITOR 
90a1				jr .lowdone 
90a1			.lowalloc: 
90a1			 
90a1			 
90a1				pop hl 
90a1			.lowdone:	pop af 
90a1				pop de 
90a1				pop hl 
90a1			ret 
90a1			 
90a1			malloc_guard_exit: 
90a1				push hl 
90a1				push de 
90a1				push af 
90a1			 
90a1			 	or a      ;clear carry flag 
90a1				push hl 
90a1				ld de, 255 
90a1				sbc hl, de 
90a1				jr c, .lowallocx 
90a1			 
90a1				push de 
90a1					ld hl, display_fb0 
90a1					ld (display_fb_active), hl 
90a1				call clear_display 
90a1				ld a, 0 
90a1				ld de, .mallocasize 
90a1				call str_at_display 
90a1				call update_display 
90a1				call delay1s 
90a1				call delay1s 
90a1			;	ld a, 0 
90a1			;	ld (os_view_disable), a 
90a1				call bp_on 
90a1				pop de 
90a1				pop hl 
90a1			 
90a1				CALLMONITOR 
90a1				jr .lowdonex 
90a1			.lowallocx: 
90a1			 
90a1				pop hl 
90a1			.lowdonex:	pop af 
90a1				pop de 
90a1				pop hl 
90a1			ret 
90a1			endif 
90a1			 
90a1			if MALLOC_2 
90a1			; Z80 Malloc and Free Functions 
90a1			 
90a1			; Malloc Function: 
90a1			; Input: 
90a1			;   HL: Size of block to allocate 
90a1			; Output: 
90a1			;   HL: Pointer to allocated memory block (NULL if allocation fails) 
90a1			 
90a1			malloc: 
90a1				 
90a1			if DEBUG_FORTH_MALLOC_HIGH 
90a1			call malloc_guard_entry 
90a1			endif 
90a1			 
90a1			 
90a1			 
90a1			 
90a1					if DEBUG_FORTH_MALLOC 
90a1						DMARK "mal" 
90a1						CALLMONITOR 
90a1					endif 
90a1			    push af            ; Save AF register 
90a1			    ld a, l            ; Load low byte of size into A 
90a1			    or h               ; Check if size is zero 
90a1			    jp z, malloc_exit  ; If size is zero, exit with NULL pointer 
90a1			 
90a1			    ; Allocate memory 
90a1			    ld hl, (heap_start) ; Load start of heap into HL 
90a1					if DEBUG_FORTH_MALLOC 
90a1						DMARK "ma1" 
90a1						CALLMONITOR 
90a1					endif 
90a1			    call malloc_internal ; Call internal malloc function 
90a1			    pop af             ; Restore AF register 
90a1			if DEBUG_FORTH_MALLOC_HIGH 
90a1			call malloc_guard_exit 
90a1			call malloc_guard_zerolen 
90a1			endif 
90a1			    ret                ; Return 
90a1			 
90a1			; Free Function: 
90a1			; Input: 
90a1			;   HL: Pointer to memory block to free 
90a1			; Output: 
90a1			;   None 
90a1			 
90a1			free: 
90a1			    push af            ; Save AF register 
90a1			    ld a, l            ; Load low byte of pointer into A 
90a1			    or h               ; Check if pointer is NULL 
90a1			    jp z, free_exit    ; If pointer is NULL, exit 
90a1			 
90a1			    ; Free memory 
90a1			    ld hl, (heap_start) ; Load start of heap into HL 
90a1			    call free_internal  ; Call internal free function 
90a1			    pop af             ; Restore AF register 
90a1			    ret                ; Return 
90a1			 
90a1			; Internal Malloc Function: 
90a1			; Input: 
90a1			;   HL: Size of block to allocate 
90a1			; Output: 
90a1			;   HL: Pointer to allocated memory block (NULL if allocation fails) 
90a1			 
90a1			malloc_internal: 
90a1			    ld bc, 2           ; Number of bytes to allocate for management overhead 
90a1			    add hl, bc         ; Add management overhead to requested size 
90a1			    ex de, hl          ; Save total size in DE, and keep it in HL 
90a1					if DEBUG_FORTH_MALLOC 
90a1						DMARK "ma2" 
90a1						CALLMONITOR 
90a1					endif 
90a1			 
90a1			    ; Search for free memory block 
90a1			    ld de, (heap_end)  ; Load end of heap into DE 
90a1			    ld bc, 0           ; Initialize counter 
90a1			 
90a1					if DEBUG_FORTH_MALLOC 
90a1						DMARK "ma2" 
90a1						CALLMONITOR 
90a1					endif 
90a1			malloc_search_loop: 
90a1			    ; Check if current block is free 
90a1			    ld a, (hl)         ; Load current block's status (free or used) 
90a1			    cp 0               ; Compare with zero (free) 
90a1			    jr nz, malloc_skip_block_check  ; If not free, skip to the next block 
90a1			 
90a1			    ; Check if current block is large enough 
90a1			    ld a, (hl+1)       ; Load high byte of block size 
90a1			    cp l               ; Compare with low byte of requested size 
90a1			    jr nz, malloc_skip_block_check  ; If not large enough, skip to the next block 
90a1			 
90a1			    ld a, (hl+2)       ; Load low byte of block size 
90a1			    cp h               ; Compare with high byte of requested size 
90a1			    jr c, malloc_skip_block_check   ; If not large enough, skip to the next block 
90a1			 
90a1			    ; Mark block as used 
90a1			    ld (hl), 0xFF      ; Set status byte to indicate used block 
90a1			 
90a1			    ; Calculate remaining space in block 
90a1			    ld bc, 0           ; Clear BC 
90a1			    add hl, bc         ; Increment HL to point to start of data block 
90a1			    add hl, de         ; HL = HL + DE (total size) 
90a1			    ld bc, 1           ; Number of bytes to allocate for management overhead 
90a1			    add hl, bc         ; Add management overhead to start of data block 
90a1			 
90a1			    ; Save pointer to allocated block in HL 
90a1			if DEBUG_FORTH_MALLOC_HIGH 
90a1						DMARK "ma5" 
90a1			call malloc_guard_exit 
90a1			call malloc_guard_zerolen 
90a1			endif 
90a1			    ret 
90a1			 
90a1			malloc_skip_block_check: 
90a1			    ; Move to the next block 
90a1			    ld bc, 3           ; Size of management overhead 
90a1			    add hl, bc         ; Move to the next block 
90a1			    inc de             ; Increment counter 
90a1			 
90a1			    ; Check if we have reached the end of heap 
90a1			    ld a, e            ; Load low byte of heap end address 
90a1			    cp (hl)            ; Compare with low byte of current address 
90a1			    jr nz, malloc_search_loop  ; If not equal, continue searching 
90a1			    ld a, d            ; Load high byte of heap end address 
90a1			    cp 0               ; Check if it's zero (end of memory) 
90a1			    jr nz, malloc_search_loop  ; If not zero, continue searching 
90a1			 
90a1			    ; If we reached here, allocation failed 
90a1			    xor a              ; Set result to NULL 
90a1			if DEBUG_FORTH_MALLOC_HIGH 
90a1						DMARK "ma6" 
90a1			call malloc_guard_exit 
90a1			call malloc_guard_zerolen 
90a1			endif 
90a1			    ret 
90a1			malloc_exit: 
90a1			if DEBUG_FORTH_MALLOC_HIGH 
90a1						DMARK "ma7" 
90a1			call malloc_guard_exit 
90a1			call malloc_guard_zerolen 
90a1			endif 
90a1			    ret 
90a1			 
90a1			; Internal Free Function: 
90a1			; Input: 
90a1			;   HL: Pointer to memory block to free 
90a1			; Output: 
90a1			;   None 
90a1			 
90a1			free_internal: 
90a1			    ld de, (heap_start) ; Load start of heap into DE 
90a1			    ld bc, 0            ; Initialize counter 
90a1			 
90a1			free_search_loop: 
90a1			    ; Check if current block contains the pointer 
90a1			    ld a, l             ; Load low byte of pointer 
90a1			    cp (hl+1)           ; Compare with high byte of current block's address 
90a1			    jr nz, free_skip_block_check  ; If not equal, skip to the next block 
90a1			    ld a, h             ; Load high byte of pointer 
90a1			    cp (hl+2)           ; Compare with low byte of current block's address 
90a1			    jr nz, free_skip_block_check  ; If not equal, skip to the next block 
90a1			 
90a1			    ; Mark block as free 
90a1			    ld (hl), 0          ; Set status byte to indicate free block 
90a1			    ret                 ; Return 
90a1			 
90a1			free_skip_block_check: 
90a1			    ; Move to the next block 
90a1			    ld bc, 3            ; Size of management overhead 
90a1			    add hl, bc          ; Move to the next block 
90a1			    inc de              ; Increment counter 
90a1			 
90a1			    ; Check if we have reached the end of heap 
90a1			    ld a, e             ; Load low byte of heap end address 
90a1			    cp (hl)             ; Compare with low byte of current address 
90a1			    jr nz, free_search_loop  ; If not equal, continue searching 
90a1			    ld a, d             ; Load high byte of heap end address 
90a1			    cp 0                ; Check if it's zero (end of memory) 
90a1			    jr nz, free_search_loop  ; If not zero, continue searching 
90a1			 
90a1			    ; If we reached here, pointer is not found in heap 
90a1			    ret 
90a1			 
90a1			free_exit: 
90a1			    ret                 ; Return 
90a1			 
90a1			; Define heap start and end addresses 
90a1			;heap_start:    .dw 0xC000   ; Start of heap 
90a1			;heap_end:      .dw 0xE000   ; End of heap 
90a1			 
90a1			endif 
90a1			 
90a1			 
90a1			if MALLOC_1 
90a1			 
90a1			 
90a1			 
90a1			; from https://gist.github.com/tomstorey/947a8b084bad69391a4b2a1c5b6d69ca 
90a1			 
90a1			;moved to firmware.asm 
90a1			;heap_start        .equ  0x9000      ; Starting address of heap 
90a1			;heap_size         .equ  0x0100      ; Number of bytes available in heap 
90a1			 
90a1			;      .org 0 
90a1			;      jp    main 
90a1			 
90a1			 
90a1			;      .org  0x100 
90a1			;main: 
90a1			;      ld    HL, 0x8100 
90a1			;      ld    SP, HL 
90a1			; 
90a1			;      call  heap_init 
90a1			; 
90a1			;      ; Make some allocations 
90a1			;      ld    HL, 12 
90a1			;      call  malloc            ; Allocates 0x9004 
90a1			; 
90a1			;      ld    HL, 12 
90a1			;      call  malloc            ; Allocates 0x9014 
90a1			; 
90a1			;      ld    HL, 12 
90a1			;      call  malloc            ; Allocates 0x9024 
90a1			; 
90a1			;      ; Free some allocations 
90a1			;      ld    HL, 0x9014 
90a1			;      call  free 
90a1			; 
90a1			;      ld    HL, 0x9004 
90a1			;      call  free 
90a1			; 
90a1			;      ld    HL, 0x9024 
90a1			;      call  free 
90a1			; 
90a1			; 
90a1			;      halt 
90a1			 
90a1			 
90a1			;------------------------------------------------------------------------------ 
90a1			;     heap_init                                                               : 
90a1			;                                                                             : 
90a1			; Description                                                                 : 
90a1			;     Initialise the heap and make it ready for malloc and free operations.   : 
90a1			;                                                                             : 
90a1			;     The heap is maintained as a linked list, starting with an initial       : 
90a1			;     "dummy block" of zero size which is mainly used to hold a pointer to    : 
90a1			;     the first free block in the heap. Each block then points to the next    : 
90a1			;     free block within the heap, and the free list ends at the first block   : 
90a1			;     with a null pointer to the next free block.                             : 
90a1			;                                                                             : 
90a1			; Parameters                                                                  : 
90a1			;     Inputs are compile-time only. Two defines which specify the starting    : 
90a1			;     address of the heap and its size are required, along with a memory      : 
90a1			;     allocation of 4 consecutive bytes which is used for a dummy block which : 
90a1			;     principally stores a pointer to the first free block in the heap.       : 
90a1			;                                                                             : 
90a1			; Returns                                                                     : 
90a1			;     Nothing                                                                 : 
90a1			;------------------------------------------------------------------------------ 
90a1			heap_init: 
90a1 e5			      push  HL 
90a2			 
90a2			      ; Initialise free list struct 
90a2 21 02 df		      ld    HL, heap_start 
90a5 22 fd de		      ld    (free_list), HL 
90a8 21 00 00		      ld    HL, 0 
90ab 22 ff de		      ld    (free_list+2), HL 
90ae			 
90ae			      ; Insert first free block at bottom of heap, consumes entire heap 
90ae 21 92 e2		      ld    HL, heap_start+heap_size-4 
90b1 22 02 df		      ld    (heap_start), HL        ; Next block (end of free list) 
90b4 21 90 03		      ld    HL, heap_size-4 
90b7 22 04 df		      ld    (heap_start+2), HL      ; Block size 
90ba			 
90ba			      ; Insert end of free list block at top of heap - two null words will 
90ba			      ; terminate the free list 
90ba 21 00 00		      ld    HL, 0 
90bd 22 94 e2		      ld    (heap_start+heap_size-2), HL 
90c0 22 92 e2		      ld    (heap_start+heap_size-4), HL 
90c3			 
90c3 e1			      pop   HL 
90c4			 
90c4 c9			      ret 
90c5			 
90c5			 
90c5			;------------------------------------------------------------------------------ 
90c5			;     malloc                                                                  : 
90c5			;                                                                             : 
90c5			; Description                                                                 : 
90c5			;     Allocates the wanted space from the heap and returns the address of the : 
90c5			;     first useable byte of the allocation.                                   : 
90c5			;                                                                             : 
90c5			;     Allocations can happen in one of two ways:                              : 
90c5			;                                                                             : 
90c5			;     1. A free block may be found which is the exact size wanted. In this    : 
90c5			;        case the block is removed from the free list and retuedn to the      : 
90c5			;        caller.                                                              : 
90c5			;     2. A free block may be found which is larger than the size wanted. In   : 
90c5			;        this case, the larger block is split into two. The first portion of  : 
90c5			;        this block will become the requested space by the malloc call and    : 
90c5			;        is returned to the caller. The second portion becomes a new free     : 
90c5			;        block, and the free list is adjusted to maintain continuity via this : 
90c5			;        newly created block.                                                 : 
90c5			;                                                                             : 
90c5			;     malloc does not set any initial value in the allocated space, the       : 
90c5			;     caller is required to do this as required.                              : 
90c5			;                                                                             : 
90c5			;     This implementation of malloc uses the stack exclusively, and is        : 
90c5			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
90c5			;     advisable to disable interrupts before calling malloc, and recommended  : 
90c5			;     to avoid the use of malloc inside ISRs in general.                      : 
90c5			;                                                                             : 
90c5			;     NOTE: heap_init must be called before malloc and free can be used.      : 
90c5			;                                                                             : 
90c5			; Parameters                                                                  : 
90c5			;     HL  Number of bytes wanted                                              : 
90c5			;                                                                             : 
90c5			; Returns                                                                     : 
90c5			;     HL  Address of the first useable byte of the allocation                 : 
90c5			;                                                                             : 
90c5			; Flags                                                                       : 
90c5			;     Z   Set if the allocation did not succeed, clear otherwise              : 
90c5			;                                                                             : 
90c5			; Stack frame                                                                 : 
90c5			;       |             |                                                       : 
90c5			;       +-------------+                                                       : 
90c5			;       |     BC      |                                                       : 
90c5			;       +-------------+                                                       : 
90c5			;       |     DE      |                                                       : 
90c5			;       +-------------+                                                       : 
90c5			;       |     IX      |                                                       : 
90c5			;       +-------------+                                                       : 
90c5			;       |  prev_free  |                                                       : 
90c5			;   +4  +-------------+                                                       : 
90c5			;       |  this_free  |                                                       : 
90c5			;   +2  +-------------+                                                       : 
90c5			;       |  next_free  |                                                       : 
90c5			;   +0  +-------------+                                                       : 
90c5			;       |             |                                                       : 
90c5			;                                                                             : 
90c5			;------------------------------------------------------------------------------ 
90c5			 
90c5			 
90c5			;malloc: 
90c5			; 
90c5			;	SAVESP ON 1 
90c5			; 
90c5			;	call malloc_code 
90c5			; 
90c5			;	CHECKSP ON 1 
90c5			;	ret 
90c5			 
90c5			 
90c5			malloc: 
90c5 c5			      push  BC 
90c6 d5			      push  DE 
90c7 dd e5		      push  IX 
90c9			if DEBUG_FORTH_MALLOC_HIGH 
90c9			call malloc_guard_entry 
90c9			endif 
90c9			 
90c9					if DEBUG_FORTH_MALLOC 
90c9						DMARK "mal" 
90c9						CALLMONITOR 
90c9					endif 
90c9 7c			      ld    A, H                    ; Exit if no space requested 
90ca b5			      or    L 
90cb ca 8a 91		      jp    Z, malloc_early_exit 
90ce			 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			; 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			 
90ce			 
90ce			 
90ce			 
90ce					if DEBUG_FORTH_MALLOC 
90ce						DMARK "maA" 
90ce						CALLMONITOR 
90ce					endif 
90ce			      ; Set up stack frame 
90ce eb			      ex    DE, HL 
90cf 21 fa ff		      ld    HL, -6                  ; Reserve 6 bytes for stack frame 
90d2 39			      add   HL, SP 
90d3 f9			      ld    SP, HL 
90d4 dd 21 00 00	      ld    IX, 0                   ; Use IX as a frame pointer 
90d8 dd 39		      add   IX, SP 
90da			 
90da			      ; Setup initial state 
90da 21 04 00		      ld    HL, 4                   ; want must also include space used by block struct 
90dd 19			      add   HL, DE 
90de			 
90de 44			      ld    B, H                    ; Move want to BC 
90df 4d			      ld    C, L 
90e0			 
90e0 21 fd de		      ld    HL, free_list           ; Store prev_free ptr to stack 
90e3 dd 75 04		      ld    (IX+4), L 
90e6 dd 74 05		      ld    (IX+5), H 
90e9			 
90e9 5e			      ld    E, (HL)                 ; Store this_free ptr to stack 
90ea 23			      inc   HL 
90eb 56			      ld    D, (HL) 
90ec dd 73 02		      ld    (IX+2), E 
90ef dd 72 03		      ld    (IX+3), D 
90f2 eb			      ex    DE, HL                  ; this_free ptr into HL 
90f3			 
90f3					if DEBUG_FORTH_MALLOC 
90f3						DMARK "maB" 
90f3						CALLMONITOR 
90f3					endif 
90f3			      ; Loop through free block list to find some space 
90f3			malloc_find_space: 
90f3 5e			      ld    E, (HL)                 ; Load next_free ptr into DE 
90f4 23			      inc   HL 
90f5 56			      ld    D, (HL) 
90f6			 
90f6 7a			      ld    A, D                    ; Check for null next_free ptr - end of free list 
90f7 b3			      or    E 
90f8 ca 84 91		      jp    Z, malloc_no_space 
90fb			 
90fb dd 73 00		      ld    (IX+0), E               ; Store next_free ptr to stack 
90fe dd 72 01		      ld    (IX+1), D 
9101			 
9101			      ; Does this block have enough space to make the allocation? 
9101 23			      inc   HL                      ; Load free block size into DE 
9102 5e			      ld    E, (HL) 
9103 23			      inc   HL 
9104 56			      ld    D, (HL) 
9105			 
9105 eb			      ex    DE, HL                  ; Check size of block against want 
9106 b7			      or    A                       ; Ensure carry flag clear 
9107 ed 42		      sbc   HL, BC 
9109 e5			      push  HL                      ; Store the result for later (new block size) 
910a			 
910a ca 59 91		      jp   Z, malloc_alloc_fit     ; Z means block size matches want - can allocate 
910d 30 1b		      jr    NC, malloc_alloc_split  ; NC means block is bigger than want - can allocate 
910f			 
910f			      ; this_free block is not big enough, setup ptrs to test next free block 
910f e1			      pop   HL                      ; Discard previous result 
9110			 
9110 dd 6e 02		      ld    L, (IX+2)               ; Move this_free ptr into prev_free 
9113 dd 66 03		      ld    H, (IX+3) 
9116 dd 75 04		      ld    (IX+4), L 
9119 dd 74 05		      ld    (IX+5), H 
911c			 
911c dd 6e 00		      ld    L, (IX+0)               ; Move next_free ptr into this_free 
911f dd 66 01		      ld    H, (IX+1) 
9122 dd 75 02		      ld    (IX+2), L 
9125 dd 74 03		      ld    (IX+3), H 
9128			 
9128					if DEBUG_FORTH_MALLOC 
9128						DMARK "MA>" 
9128						CALLMONITOR 
9128					endif 
9128 18 c9		      jr    malloc_find_space 
912a			 
912a			      ; split a bigger block into two - requested size and remaining size 
912a			malloc_alloc_split: 
912a					if DEBUG_FORTH_MALLOC 
912a						DMARK "MAs" 
912a						CALLMONITOR 
912a					endif 
912a eb			      ex    DE, HL                  ; Calculate address of new free block 
912b 2b			      dec   HL 
912c 2b			      dec   HL 
912d 2b			      dec   HL 
912e 09			      add   HL, BC 
912f			 
912f			      ; Create a new block and point it at next_free 
912f dd 5e 00		      ld    E, (IX+0)               ; Load next_free ptr into DE 
9132 dd 56 01		      ld    D, (IX+1) 
9135			 
9135 73			      ld    (HL), E                 ; Store next_free ptr into new block 
9136 23			      inc   HL 
9137 72			      ld    (HL), D 
9138			 
9138 d1			      pop   DE                      ; Store size of new block into new block 
9139 23			      inc   HL 
913a 73			      ld    (HL), E 
913b 23			      inc   HL 
913c 72			      ld    (HL), D 
913d			 
913d			      ; Update this_free ptr to point to new block 
913d 2b			      dec   HL 
913e 2b			      dec   HL 
913f 2b			      dec   HL 
9140			 
9140 dd 5e 02		      ld    E, (IX+2)               ; Take a copy of current this_free ptr 
9143 dd 56 03		      ld    D, (IX+3) 
9146			 
9146 dd 75 02		      ld    (IX+2), L               ; Store new block addr as this_free ptr 
9149 dd 74 03		      ld    (IX+3), H 
914c			 
914c			      ; Modify this_free block to be allocation 
914c eb			      ex    DE, HL 
914d af			      xor   A                       ; Null the next block ptr of allocated block 
914e 77			      ld    (HL), A 
914f 23			      inc   HL 
9150 77			      ld    (HL), A 
9151			 
9151 23			      inc   HL                      ; Store want size into allocated block 
9152 71			      ld    (HL), C 
9153 23			      inc   HL 
9154 70			      ld    (HL), B 
9155 23			      inc   HL 
9156 e5			      push  HL                      ; Address of allocation to return 
9157			 
9157 18 19		      jr    malloc_update_links 
9159			 
9159			malloc_alloc_fit: 
9159 e1			      pop   HL                      ; Dont need new block size, want is exact fit 
915a			 
915a					if DEBUG_FORTH_MALLOC 
915a						DMARK "MAf" 
915a						CALLMONITOR 
915a					endif 
915a			      ; Modify this_free block to be allocation 
915a eb			      ex    DE, HL 
915b 2b			      dec   HL 
915c 2b			      dec   HL 
915d 2b			      dec   HL 
915e			 
915e af			      xor   A                       ; Null the next block ptr of allocated block 
915f 77			      ld    (HL), A 
9160 23			      inc   HL 
9161 77			      ld    (HL), A 
9162			 
9162 23			      inc   HL                      ; Store address of allocation to return 
9163 23			      inc   HL 
9164 23			      inc   HL 
9165 e5			      push  HL 
9166			 
9166			      ; Copy next_free ptr to this_free, remove allocated block from free list 
9166 dd 6e 00		      ld    L, (IX+0)               ; next_free to HL 
9169 dd 66 01		      ld    H, (IX+1) 
916c			 
916c dd 75 02		      ld    (IX+2), L               ; HL to this_free 
916f dd 74 03		      ld    (IX+3), H 
9172			 
9172			 
9172			malloc_update_links: 
9172			      ; Update prev_free ptr to point to this_free 
9172 dd 6e 04		      ld    L, (IX+4)               ; prev_free ptr to HL 
9175 dd 66 05		      ld    H, (IX+5) 
9178			 
9178 dd 5e 02		      ld    E, (IX+2)               ; this_free ptr to DE 
917b dd 56 03		      ld    D, (IX+3) 
917e			 
917e 73			      ld    (HL), E                 ; this_free ptr into prev_free 
917f 23			      inc   HL 
9180 72			      ld    (HL), D 
9181			 
9181					if DEBUG_FORTH_MALLOC 
9181						DMARK "Mul" 
9181						CALLMONITOR 
9181					endif 
9181			      ; Clear the Z flag to indicate successful allocation 
9181 7a			      ld    A, D 
9182 b3			      or    E 
9183			 
9183 d1			      pop   DE                      ; Address of allocation 
9184					if DEBUG_FORTH_MALLOC 
9184						DMARK "MAu" 
9184						CALLMONITOR 
9184					endif 
9184			 
9184			malloc_no_space: 
9184 21 06 00		      ld    HL, 6                   ; Clean up stack frame 
9187 39			      add   HL, SP 
9188 f9			      ld    SP, HL 
9189			 
9189 eb			      ex    DE, HL                  ; Alloc addr into HL for return 
918a					if DEBUG_FORTH_MALLOC 
918a						DMARK "MAN" 
918a						CALLMONITOR 
918a					endif 
918a			 
918a			malloc_early_exit: 
918a					if DEBUG_FORTH_MALLOC 
918a						DMARK "MAx" 
918a						CALLMONITOR 
918a					endif 
918a dd e1		      pop   IX 
918c d1			      pop   DE 
918d c1			      pop   BC 
918e			 
918e			if DEBUG_FORTH_MALLOC_HIGH 
918e			call malloc_guard_exit 
918e			call malloc_guard_zerolen 
918e			endif 
918e c9			      ret 
918f			 
918f			 
918f			;------------------------------------------------------------------------------ 
918f			;     free                                                                    : 
918f			;                                                                             : 
918f			; Description                                                                 : 
918f			;     Return the space pointed to by HL to the heap. HL must be an address as : 
918f			;     returned by malloc, otherwise the behaviour is undefined.               : 
918f			;                                                                             : 
918f			;     Where possible, directly adjacent free blocks will be merged together   : 
918f			;     into larger blocks to help ensure that the heap does not become         : 
918f			;     excessively fragmented.                                                 : 
918f			;                                                                             : 
918f			;     free does not clear or set any other value into the freed space, and    : 
918f			;     therefore its contents may be visible through subsequent malloc's. The  : 
918f			;     caller should clear the freed space as required.                        : 
918f			;                                                                             : 
918f			;     This implementation of free uses the stack exclusively, and is          : 
918f			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
918f			;     advisable to disable interrupts before calling free, and recommended    : 
918f			;     to avoid the use of free inside ISRs in general.                        : 
918f			;                                                                             : 
918f			;     NOTE: heap_init must be called before malloc and free can be used.      : 
918f			;                                                                             : 
918f			; Parameters                                                                  : 
918f			;     HL  Pointer to address of first byte of allocation to be freed          : 
918f			;                                                                             : 
918f			; Returns                                                                     : 
918f			;     Nothing                                                                 : 
918f			;                                                                             : 
918f			; Stack frame                                                                 : 
918f			;       |             |                                                       : 
918f			;       +-------------+                                                       : 
918f			;       |     BC      |                                                       : 
918f			;       +-------------+                                                       : 
918f			;       |     DE      |                                                       : 
918f			;       +-------------+                                                       : 
918f			;       |     IX      |                                                       : 
918f			;       +-------------+                                                       : 
918f			;       |  prev_free  |                                                       : 
918f			;   +2  +-------------+                                                       : 
918f			;       |  next_free  |                                                       : 
918f			;   +0  +-------------+                                                       : 
918f			;       |             |                                                       : 
918f			;                                                                             : 
918f			;------------------------------------------------------------------------------ 
918f			free: 
918f c5			      push  BC 
9190 d5			      push  DE 
9191 dd e5		      push  IX 
9193			 
9193 7c			      ld    A, H                    ; Exit if ptr is null 
9194 b5			      or    L 
9195 ca 59 92		      jp    Z, free_early_exit 
9198			 
9198			      ; Set up stack frame 
9198 eb			      ex    DE, HL 
9199 21 fc ff		      ld    HL, -4                  ; Reserve 4 bytes for stack frame 
919c 39			      add   HL, SP 
919d f9			      ld    SP, HL 
919e dd 21 00 00	      ld    IX, 0                   ; Use IX as a frame pointer 
91a2 dd 39		      add   IX, SP 
91a4			 
91a4			      ; The address in HL points to the start of the useable allocated space, 
91a4			      ; but the block struct starts 4 bytes before this. Sub 4 to get the 
91a4			      ; address of the block itself. 
91a4 eb			      ex    DE, HL 
91a5 11 fc ff		      ld    DE, -4 
91a8 19			      add   HL, DE 
91a9			 
91a9			      ; An allocated block must have a null next block pointer in it 
91a9 7e			      ld    A, (HL) 
91aa 23			      inc   HL 
91ab b6			      or    (HL) 
91ac c2 54 92		      jp    NZ, free_done 
91af			 
91af 2b			      dec   HL 
91b0			 
91b0 44			      ld    B, H                    ; Copy HL to BC 
91b1 4d			      ld    C, L 
91b2			 
91b2			      ; Loop through the free list to find the first block with an address 
91b2			      ; higher than the block being freed 
91b2 21 fd de		      ld    HL, free_list 
91b5			 
91b5			free_find_higher_block: 
91b5 5e			      ld    E, (HL)                 ; Load next ptr from free block 
91b6 23			      inc   HL 
91b7 56			      ld    D, (HL) 
91b8 2b			      dec   HL 
91b9			 
91b9 dd 73 00		      ld    (IX+0), E               ; Save ptr to next free block 
91bc dd 72 01		      ld    (IX+1), D 
91bf dd 75 02		      ld    (IX+2), L               ; Save ptr to prev free block 
91c2 dd 74 03		      ld    (IX+3), H 
91c5			 
91c5 78			      ld    A, B                    ; Check if DE is greater than BC 
91c6 ba			      cp    D                       ; Compare MSB first 
91c7 28 02		      jr    Z, $+4                  ; MSB the same, compare LSB 
91c9 30 04		      jr    NC, free_find_higher_block_skip 
91cb 79			      ld    A, C 
91cc bb			      cp    E                       ; Then compare LSB 
91cd 38 08		      jr    C, free_found_higher_block 
91cf			 
91cf			free_find_higher_block_skip: 
91cf 7a			      ld    A, D                    ; Reached the end of the free list? 
91d0 b3			      or    E 
91d1 ca 54 92		      jp    Z, free_done 
91d4			 
91d4 eb			      ex    DE, HL 
91d5			 
91d5 18 de		      jr    free_find_higher_block 
91d7			 
91d7			free_found_higher_block: 
91d7			      ; Insert freed block between prev and next free blocks 
91d7 71			      ld    (HL), C                 ; Point prev free block to freed block 
91d8 23			      inc   HL 
91d9 70			      ld    (HL), B 
91da			 
91da 60			      ld    H, B                    ; Point freed block at next free block 
91db 69			      ld    L, C 
91dc 73			      ld    (HL), E 
91dd 23			      inc   HL 
91de 72			      ld    (HL), D 
91df			 
91df			      ; Check if the freed block is adjacent to the next free block 
91df 23			      inc   HL                      ; Load size of freed block into HL 
91e0 5e			      ld    E, (HL) 
91e1 23			      inc   HL 
91e2 56			      ld    D, (HL) 
91e3 eb			      ex    DE, HL 
91e4			 
91e4 09			      add   HL, BC                  ; Add addr of freed block and its size 
91e5			 
91e5 dd 5e 00		      ld    E, (IX+0)               ; Load addr of next free block into DE 
91e8 dd 56 01		      ld    D, (IX+1) 
91eb			 
91eb b7			      or    A                       ; Clear the carry flag 
91ec ed 52		      sbc   HL, DE                  ; Subtract addrs to compare adjacency 
91ee 20 22		      jr    NZ, free_check_adjacent_to_prev 
91f0			 
91f0			      ; Freed block is adjacent to next, merge into one bigger block 
91f0 eb			      ex    DE, HL                  ; Load next ptr from next block into DE 
91f1 5e			      ld    E, (HL) 
91f2 23			      inc   HL 
91f3 56			      ld    D, (HL) 
91f4 e5			      push  HL                      ; Save ptr to next block for later 
91f5			 
91f5 60			      ld    H, B                    ; Store ptr from next block into freed block 
91f6 69			      ld    L, C 
91f7 73			      ld    (HL), E 
91f8 23			      inc   HL 
91f9 72			      ld    (HL), D 
91fa			 
91fa e1			      pop   HL                      ; Restore ptr to next block 
91fb 23			      inc   HL                      ; Load size of next block into DE 
91fc 5e			      ld    E, (HL) 
91fd 23			      inc   HL 
91fe 56			      ld    D, (HL) 
91ff d5			      push  DE                      ; Save next block size for later 
9200			 
9200 60			      ld    H, B                    ; Load size of freed block into HL 
9201 69			      ld    L, C 
9202 23			      inc   HL 
9203 23			      inc   HL 
9204 5e			      ld    E, (HL) 
9205 23			      inc   HL 
9206 56			      ld    D, (HL) 
9207 eb			      ex    DE, HL 
9208			 
9208 d1			      pop   DE                      ; Restore size of next block 
9209 19			      add   HL, DE                  ; Add sizes of both blocks 
920a eb			      ex    DE, HL 
920b			 
920b 60			      ld    H, B                    ; Store new bigger size into freed block 
920c 69			      ld    L, C 
920d 23			      inc   HL 
920e 23			      inc   HL 
920f 73			      ld    (HL), E 
9210 23			      inc   HL 
9211 72			      ld    (HL), D 
9212			 
9212			free_check_adjacent_to_prev: 
9212			      ; Check if the freed block is adjacent to the prev free block 
9212 dd 6e 02		      ld    L, (IX+2)               ; Prev free block ptr into HL 
9215 dd 66 03		      ld    H, (IX+3) 
9218			 
9218 23			      inc   HL                      ; Size of prev free block into DE 
9219 23			      inc   HL 
921a 5e			      ld    E, (HL) 
921b 23			      inc   HL 
921c 56			      ld    D, (HL) 
921d 2b			      dec   HL 
921e 2b			      dec   HL 
921f 2b			      dec   HL 
9220			 
9220 19			      add   HL, DE                  ; Add prev block addr and size 
9221			 
9221 b7			      or    A                       ; Clear the carry flag 
9222 ed 42		      sbc   HL, BC                  ; Subtract addrs to compare adjacency 
9224 20 2e		      jr    NZ, free_done 
9226			 
9226			      ; Freed block is adjacent to prev, merge into one bigger block 
9226 60			      ld    H, B                    ; Load next ptr from freed block into DE 
9227 69			      ld    L, C 
9228 5e			      ld    E, (HL) 
9229 23			      inc   HL 
922a 56			      ld    D, (HL) 
922b e5			      push  HL                      ; Save freed block ptr for later 
922c			 
922c dd 6e 02		      ld    L, (IX+2)               ; Store freed block ptr into prev block 
922f dd 66 03		      ld    H, (IX+3) 
9232 73			      ld    (HL), E 
9233 23			      inc   HL 
9234 72			      ld    (HL), D 
9235			 
9235 e1			      pop   HL                      ; Restore freed block ptr 
9236 23			      inc   HL                      ; Load size of freed block into DE 
9237 5e			      ld    E, (HL) 
9238 23			      inc   HL 
9239 56			      ld    D, (HL) 
923a d5			      push  DE                      ; Save freed block size for later 
923b			 
923b dd 6e 02		      ld    L, (IX+2)               ; Load size of prev block into DE 
923e dd 66 03		      ld    H, (IX+3) 
9241 23			      inc   HL 
9242 23			      inc   HL 
9243 5e			      ld    E, (HL) 
9244 23			      inc   HL 
9245 56			      ld    D, (HL) 
9246			 
9246 e1			      pop   HL                      ; Add sizes of both blocks 
9247 19			      add   HL, DE 
9248 eb			      ex    DE, HL 
9249			 
9249 dd 6e 02		      ld    L, (IX+2)               ; Store new bigger size into prev block 
924c dd 66 03		      ld    H, (IX+3) 
924f 23			      inc   HL 
9250 23			      inc   HL 
9251 73			      ld    (HL), E 
9252 23			      inc   HL 
9253 72			      ld    (HL), D 
9254			 
9254			free_done: 
9254 21 04 00		      ld    HL, 4                   ; Clean up stack frame 
9257 39			      add   HL, SP 
9258 f9			      ld    SP, HL 
9259			 
9259			free_early_exit: 
9259 dd e1		      pop   IX 
925b d1			      pop   DE 
925c c1			      pop   BC 
925d			 
925d c9			      ret 
925e			 
925e			; moved to firmware.asm 
925e			; 
925e			;free_list         .dw   0     ; Block struct for start of free list (MUST be 4 bytes) 
925e			;                  .dw   0 
925e			 
925e			 
925e			endif 
925e			 
925e			 
925e			if MALLOC_3 
925e			; https://gist.githubusercontent.com/tomstorey/947a8b084bad69391a4b2a1c5b6d69ca/raw/5a08fb30a480d98c0deb4a6afe2d48961cc8e9d9/z80_malloc.s 
925e			;heap_start        .equ  0x9000      ; Starting address of heap 
925e			;heap_size         .equ  0x0100      ; Number of bytes available in heap 
925e			; 
925e			 ;     .org 0 
925e			  ;    jp    main 
925e			; 
925e			; 
925e			 ;     .org  0x100 
925e			;main: 
925e			 ;     ld    HL, 0x8100 
925e			  ;    ld    SP, HL 
925e			; 
925e			;      call  heap_init 
925e			 
925e			      ; Make some allocations 
925e			;      ld    HL, 12 
925e			;      call  malloc            ; Allocates 0x9004 
925e			; 
925e			 ;     ld    HL, 12 
925e			;      call  malloc            ; Allocates 0x9014 
925e			 
925e			;      ld    HL, 12 
925e			;      call  malloc            ; Allocates 0x9024 
925e			 
925e			      ; Free some allocations 
925e			;      ld    HL, 0x9014 
925e			;      call  free 
925e			 
925e			;      ld    HL, 0x9004 
925e			;      call  free 
925e			; 
925e			;      ld    HL, 0x9024 
925e			;      call  free 
925e			 
925e			 
925e			 ;     halt 
925e			 
925e			 
925e			;------------------------------------------------------------------------------ 
925e			;     heap_init                                                               : 
925e			;                                                                             : 
925e			; Description                                                                 : 
925e			;     Initialise the heap and make it ready for malloc and free operations.   : 
925e			;                                                                             : 
925e			;     The heap is maintained as a linked list, starting with an initial       : 
925e			;     "dummy block" of zero size which is mainly used to hold a pointer to    : 
925e			;     the first free block in the heap. Each block then points to the next    : 
925e			;     free block within the heap, and the free list ends at the first block   : 
925e			;     with a null pointer to the next free block.                             : 
925e			;                                                                             : 
925e			; Parameters                                                                  : 
925e			;     Inputs are compile-time only. Two defines which specify the starting    : 
925e			;     address of the heap and its size are required, along with a memory      : 
925e			;     allocation of 4 consecutive bytes which is used for a dummy block which : 
925e			;     principally stores a pointer to the first free block in the heap.       : 
925e			;                                                                             : 
925e			; Returns                                                                     : 
925e			;     Nothing                                                                 : 
925e			;------------------------------------------------------------------------------ 
925e			heap_init: 
925e			      push  HL 
925e			 
925e			      ; Initialise free list struct 
925e			      ld    HL, heap_start 
925e			      ld    (free_list), HL 
925e			      ld    HL, 0 
925e			      ld    (free_list+2), HL 
925e			 
925e			      ; Insert first free block at bottom of heap, consumes entire heap 
925e			      ld    HL, heap_start+heap_size-4 
925e			      ld    (heap_start), HL        ; Next block (end of free list) 
925e			      ld    HL, heap_size-4 
925e			      ld    (heap_start+2), HL      ; Block size 
925e			 
925e			      ; Insert end of free list block at top of heap - two null words will 
925e			      ; terminate the free list 
925e			      ld    HL, 0 
925e			      ld    (heap_start+heap_size-2), HL 
925e			      ld    (heap_start+heap_size-4), HL 
925e			 
925e			      pop   HL 
925e			 
925e			      ret 
925e			 
925e			 
925e			;------------------------------------------------------------------------------ 
925e			;     malloc                                                                  : 
925e			;                                                                             : 
925e			; Description                                                                 : 
925e			;     Allocates the wanted space from the heap and returns the address of the : 
925e			;     first useable byte of the allocation.                                   : 
925e			;                                                                             : 
925e			;     Allocations can happen in one of two ways:                              : 
925e			;                                                                             : 
925e			;     1. A free block may be found which is the exact size wanted. In this    : 
925e			;        case the block is removed from the free list and retuedn to the      : 
925e			;        caller.                                                              : 
925e			;     2. A free block may be found which is larger than the size wanted. In   : 
925e			;        this case, the larger block is split into two. The first portion of  : 
925e			;        this block will become the requested space by the malloc call and    : 
925e			;        is returned to the caller. The second portion becomes a new free     : 
925e			;        block, and the free list is adjusted to maintain continuity via this : 
925e			;        newly created block.                                                 : 
925e			;                                                                             : 
925e			;     malloc does not set any initial value in the allocated space, the       : 
925e			;     caller is required to do this as required.                              : 
925e			;                                                                             : 
925e			;     This implementation of malloc uses the stack exclusively, and is        : 
925e			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
925e			;     advisable to disable interrupts before calling malloc, and recommended  : 
925e			;     to avoid the use of malloc inside ISRs in general.                      : 
925e			;                                                                             : 
925e			;     NOTE: heap_init must be called before malloc and free can be used.      : 
925e			;                                                                             : 
925e			; Parameters                                                                  : 
925e			;     HL  Number of bytes wanted                                              : 
925e			;                                                                             : 
925e			; Returns                                                                     : 
925e			;     HL  Address of the first useable byte of the allocation                 : 
925e			;                                                                             : 
925e			; Flags                                                                       : 
925e			;     Z   Set if the allocation did not succeed, clear otherwise              : 
925e			;                                                                             : 
925e			; Stack frame                                                                 : 
925e			;       |             |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |     BC      |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |     DE      |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |     IX      |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |  prev_free  |                                                       : 
925e			;   +4  +-------------+                                                       : 
925e			;       |  this_free  |                                                       : 
925e			;   +2  +-------------+                                                       : 
925e			;       |  next_free  |                                                       : 
925e			;   +0  +-------------+                                                       : 
925e			;       |             |                                                       : 
925e			;                                                                             : 
925e			;------------------------------------------------------------------------------ 
925e			malloc: 
925e			      push  BC 
925e			      push  DE 
925e			      push  IX 
925e			 
925e			      ld    A, H                    ; Exit if no space requested 
925e			      or    L 
925e			      jp    Z, malloc_early_exit 
925e			 
925e			      ; Set up stack frame 
925e			      ex    DE, HL 
925e			      ld    HL, -6                  ; Reserve 6 bytes for stack frame 
925e			      add   HL, SP 
925e			      ld    SP, HL 
925e			      ld    IX, 0                   ; Use IX as a frame pointer 
925e			      add   IX, SP 
925e			 
925e			      ; Setup initial state 
925e			      ld    HL, 4                   ; want must also include space used by block struct 
925e			      add   HL, DE 
925e			 
925e			      ld    B, H                    ; Move want to BC 
925e			      ld    C, L 
925e			 
925e			      ld    HL, free_list           ; Store prev_free ptr to stack 
925e			      ld    (IX+4), L 
925e			      ld    (IX+5), H 
925e			 
925e			      ld    E, (HL)                 ; Store this_free ptr to stack 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      ld    (IX+2), E 
925e			      ld    (IX+3), D 
925e			      ex    DE, HL                  ; this_free ptr into HL 
925e			 
925e			      ; Loop through free block list to find some space 
925e			malloc_find_space: 
925e			      ld    E, (HL)                 ; Load next_free ptr into DE 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			 
925e			      ld    A, D                    ; Check for null next_free ptr - end of free list 
925e			      or    E 
925e			      jp    Z, malloc_no_space 
925e			 
925e			      ld    (IX+0), E               ; Store next_free ptr to stack 
925e			      ld    (IX+1), D 
925e			 
925e			      ; Does this block have enough space to make the allocation? 
925e			      inc   HL                      ; Load free block size into DE 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			 
925e			      ex    DE, HL                  ; Check size of block against want 
925e			      or    A                       ; Ensure carry flag clear 
925e			      sbc   HL, BC 
925e			      push  HL                      ; Store the result for later (new block size) 
925e			 
925e			      jr    Z, malloc_alloc_fit     ; Z means block size matches want - can allocate 
925e			      jr    NC, malloc_alloc_split  ; NC means block is bigger than want - can allocate 
925e			 
925e			      ; this_free block is not big enough, setup ptrs to test next free block 
925e			      pop   HL                      ; Discard previous result 
925e			 
925e			      ld    L, (IX+2)               ; Move this_free ptr into prev_free 
925e			      ld    H, (IX+3) 
925e			      ld    (IX+4), L 
925e			      ld    (IX+5), H 
925e			 
925e			      ld    L, (IX+0)               ; Move next_free ptr into this_free 
925e			      ld    H, (IX+1) 
925e			      ld    (IX+2), L 
925e			      ld    (IX+3), H 
925e			 
925e			      jr    malloc_find_space 
925e			 
925e			      ; split a bigger block into two - requested size and remaining size 
925e			malloc_alloc_split: 
925e			      ex    DE, HL                  ; Calculate address of new free block 
925e			      dec   HL 
925e			      dec   HL 
925e			      dec   HL 
925e			      add   HL, BC 
925e			 
925e			      ; Create a new block and point it at next_free 
925e			      ld    E, (IX+0)               ; Load next_free ptr into DE 
925e			      ld    D, (IX+1) 
925e			 
925e			      ld    (HL), E                 ; Store next_free ptr into new block 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			      pop   DE                      ; Store size of new block into new block 
925e			      inc   HL 
925e			      ld    (HL), E 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			      ; Update this_free ptr to point to new block 
925e			      dec   HL 
925e			      dec   HL 
925e			      dec   HL 
925e			 
925e			      ld    E, (IX+2)               ; Take a copy of current this_free ptr 
925e			      ld    D, (IX+3) 
925e			 
925e			      ld    (IX+2), L               ; Store new block addr as this_free ptr 
925e			      ld    (IX+3), H 
925e			 
925e			      ; Modify this_free block to be allocation 
925e			      ex    DE, HL 
925e			      xor   A                       ; Null the next block ptr of allocated block 
925e			      ld    (HL), A 
925e			      inc   HL 
925e			      ld    (HL), A 
925e			 
925e			      inc   HL                      ; Store want size into allocated block 
925e			      ld    (HL), C 
925e			      inc   HL 
925e			      ld    (HL), B 
925e			      inc   HL 
925e			      push  HL                      ; Address of allocation to return 
925e			 
925e			      jr    malloc_update_links 
925e			 
925e			malloc_alloc_fit: 
925e			      pop   HL                      ; Dont need new block size, want is exact fit 
925e			 
925e			      ; Modify this_free block to be allocation 
925e			      ex    DE, HL 
925e			      dec   HL 
925e			      dec   HL 
925e			      dec   HL 
925e			 
925e			      xor   A                       ; Null the next block ptr of allocated block 
925e			      ld    (HL), A 
925e			      inc   HL 
925e			      ld    (HL), A 
925e			 
925e			      inc   HL                      ; Store address of allocation to return 
925e			      inc   HL 
925e			      inc   HL 
925e			      push  HL 
925e			 
925e			      ; Copy next_free ptr to this_free, remove allocated block from free list 
925e			      ld    L, (IX+0)               ; next_free to HL 
925e			      ld    H, (IX+1) 
925e			 
925e			      ld    (IX+2), L               ; HL to this_free 
925e			      ld    (IX+3), H 
925e			 
925e			 
925e			malloc_update_links: 
925e			      ; Update prev_free ptr to point to this_free 
925e			      ld    L, (IX+4)               ; prev_free ptr to HL 
925e			      ld    H, (IX+5) 
925e			 
925e			      ld    E, (IX+2)               ; this_free ptr to DE 
925e			      ld    D, (IX+3) 
925e			 
925e			      ld    (HL), E                 ; this_free ptr into prev_free 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			      ; Clear the Z flag to indicate successful allocation 
925e			      ld    A, D 
925e			      or    E 
925e			 
925e			      pop   DE                      ; Address of allocation 
925e			 
925e			malloc_no_space: 
925e			      ld    HL, 6                   ; Clean up stack frame 
925e			      add   HL, SP 
925e			      ld    SP, HL 
925e			 
925e			      ex    DE, HL                  ; Alloc addr into HL for return 
925e			 
925e			malloc_early_exit: 
925e			      pop   IX 
925e			      pop   DE 
925e			      pop   BC 
925e			 
925e			      ret 
925e			 
925e			 
925e			;------------------------------------------------------------------------------ 
925e			;     free                                                                    : 
925e			;                                                                             : 
925e			; Description                                                                 : 
925e			;     Return the space pointed to by HL to the heap. HL must be an address as : 
925e			;     returned by malloc, otherwise the behaviour is undefined.               : 
925e			;                                                                             : 
925e			;     Where possible, directly adjacent free blocks will be merged together   : 
925e			;     into larger blocks to help ensure that the heap does not become         : 
925e			;     excessively fragmented.                                                 : 
925e			;                                                                             : 
925e			;     free does not clear or set any other value into the freed space, and    : 
925e			;     therefore its contents may be visible through subsequent malloc's. The  : 
925e			;     caller should clear the freed space as required.                        : 
925e			;                                                                             : 
925e			;     This implementation of free uses the stack exclusively, and is          : 
925e			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
925e			;     advisable to disable interrupts before calling free, and recommended    : 
925e			;     to avoid the use of free inside ISRs in general.                        : 
925e			;                                                                             : 
925e			;     NOTE: heap_init must be called before malloc and free can be used.      : 
925e			;                                                                             : 
925e			; Parameters                                                                  : 
925e			;     HL  Pointer to address of first byte of allocation to be freed          : 
925e			;                                                                             : 
925e			; Returns                                                                     : 
925e			;     Nothing                                                                 : 
925e			;                                                                             : 
925e			; Stack frame                                                                 : 
925e			;       |             |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |     BC      |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |     DE      |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |     IX      |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |  prev_free  |                                                       : 
925e			;   +2  +-------------+                                                       : 
925e			;       |  next_free  |                                                       : 
925e			;   +0  +-------------+                                                       : 
925e			;       |             |                                                       : 
925e			;                                                                             : 
925e			;------------------------------------------------------------------------------ 
925e			free: 
925e			      push  BC 
925e			      push  DE 
925e			      push  IX 
925e			 
925e			      ld    A, H                    ; Exit if ptr is null 
925e			      or    L 
925e			      jp    Z, free_early_exit 
925e			 
925e			      ; Set up stack frame 
925e			      ex    DE, HL 
925e			      ld    HL, -4                  ; Reserve 4 bytes for stack frame 
925e			      add   HL, SP 
925e			      ld    SP, HL 
925e			      ld    IX, 0                   ; Use IX as a frame pointer 
925e			      add   IX, SP 
925e			 
925e			      ; The address in HL points to the start of the useable allocated space, 
925e			      ; but the block struct starts 4 bytes before this. Sub 4 to get the 
925e			      ; address of the block itself. 
925e			      ex    DE, HL 
925e			      ld    DE, -4 
925e			      add   HL, DE 
925e			 
925e			      ; An allocated block must have a null next block pointer in it 
925e			      ld    A, (HL) 
925e			      inc   HL 
925e			      or    (HL) 
925e			      jp    NZ, free_done 
925e			 
925e			      dec   HL 
925e			 
925e			      ld    B, H                    ; Copy HL to BC 
925e			      ld    C, L 
925e			 
925e			      ; Loop through the free list to find the first block with an address 
925e			      ; higher than the block being freed 
925e			      ld    HL, free_list 
925e			 
925e			free_find_higher_block: 
925e			      ld    E, (HL)                 ; Load next ptr from free block 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      dec   HL 
925e			 
925e			      ld    (IX+0), E               ; Save ptr to next free block 
925e			      ld    (IX+1), D 
925e			      ld    (IX+2), L               ; Save ptr to prev free block 
925e			      ld    (IX+3), H 
925e			 
925e			      ld    A, B                    ; Check if DE is greater than BC 
925e			      cp    D                       ; Compare MSB first 
925e			      jr    Z, $+4                  ; MSB the same, compare LSB 
925e			      jr    NC, free_find_higher_block_skip 
925e			      ld    A, C 
925e			      cp    E                       ; Then compare LSB 
925e			      jr    C, free_found_higher_block 
925e			 
925e			free_find_higher_block_skip: 
925e			      ld    A, D                    ; Reached the end of the free list? 
925e			      or    E 
925e			      jp    Z, free_done 
925e			 
925e			      ex    DE, HL 
925e			 
925e			      jr    free_find_higher_block 
925e			 
925e			free_found_higher_block: 
925e			      ; Insert freed block between prev and next free blocks 
925e			      ld    (HL), C                 ; Point prev free block to freed block 
925e			      inc   HL 
925e			      ld    (HL), B 
925e			 
925e			      ld    H, B                    ; Point freed block at next free block 
925e			      ld    L, C 
925e			      ld    (HL), E 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			      ; Check if the freed block is adjacent to the next free block 
925e			      inc   HL                      ; Load size of freed block into HL 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      ex    DE, HL 
925e			 
925e			      add   HL, BC                  ; Add addr of freed block and its size 
925e			 
925e			      ld    E, (IX+0)               ; Load addr of next free block into DE 
925e			      ld    D, (IX+1) 
925e			 
925e			      or    A                       ; Clear the carry flag 
925e			      sbc   HL, DE                  ; Subtract addrs to compare adjacency 
925e			      jr    NZ, free_check_adjacent_to_prev 
925e			 
925e			      ; Freed block is adjacent to next, merge into one bigger block 
925e			      ex    DE, HL                  ; Load next ptr from next block into DE 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      push  HL                      ; Save ptr to next block for later 
925e			 
925e			      ld    H, B                    ; Store ptr from next block into freed block 
925e			      ld    L, C 
925e			      ld    (HL), E 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			      pop   HL                      ; Restore ptr to next block 
925e			      inc   HL                      ; Load size of next block into DE 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      push  DE                      ; Save next block size for later 
925e			 
925e			      ld    H, B                    ; Load size of freed block into HL 
925e			      ld    L, C 
925e			      inc   HL 
925e			      inc   HL 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      ex    DE, HL 
925e			 
925e			      pop   DE                      ; Restore size of next block 
925e			      add   HL, DE                  ; Add sizes of both blocks 
925e			      ex    DE, HL 
925e			 
925e			      ld    H, B                    ; Store new bigger size into freed block 
925e			      ld    L, C 
925e			      inc   HL 
925e			      inc   HL 
925e			      ld    (HL), E 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			free_check_adjacent_to_prev: 
925e			      ; Check if the freed block is adjacent to the prev free block 
925e			      ld    L, (IX+2)               ; Prev free block ptr into HL 
925e			      ld    H, (IX+3) 
925e			 
925e			      inc   HL                      ; Size of prev free block into DE 
925e			      inc   HL 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      dec   HL 
925e			      dec   HL 
925e			      dec   HL 
925e			 
925e			      add   HL, DE                  ; Add prev block addr and size 
925e			 
925e			      or    A                       ; Clear the carry flag 
925e			      sbc   HL, BC                  ; Subtract addrs to compare adjacency 
925e			      jr    NZ, free_done 
925e			 
925e			      ; Freed block is adjacent to prev, merge into one bigger block 
925e			      ld    H, B                    ; Load next ptr from freed block into DE 
925e			      ld    L, C 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      push  HL                      ; Save freed block ptr for later 
925e			 
925e			      ld    L, (IX+2)               ; Store freed block ptr into prev block 
925e			      ld    H, (IX+3) 
925e			      ld    (HL), E 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			      pop   HL                      ; Restore freed block ptr 
925e			      inc   HL                      ; Load size of freed block into DE 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      push  DE                      ; Save freed block size for later 
925e			 
925e			      ld    L, (IX+2)               ; Load size of prev block into DE 
925e			      ld    H, (IX+3) 
925e			      inc   HL 
925e			      inc   HL 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			 
925e			      pop   HL                      ; Add sizes of both blocks 
925e			      add   HL, DE 
925e			      ex    DE, HL 
925e			 
925e			      ld    L, (IX+2)               ; Store new bigger size into prev block 
925e			      ld    H, (IX+3) 
925e			      inc   HL 
925e			      inc   HL 
925e			      ld    (HL), E 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			free_done: 
925e			      ld    HL, 4                   ; Clean up stack frame 
925e			      add   HL, SP 
925e			      ld    SP, HL 
925e			 
925e			free_early_exit: 
925e			      pop   IX 
925e			      pop   DE 
925e			      pop   BC 
925e			 
925e			      ret 
925e			 
925e			 
925e			;      .org 0x8000 
925e			; 
925e			;free_list         .dw   0     ; Block struct for start of free list (MUST be 4 bytes) 
925e			 ;                 .dw   0 
925e			 
925e			endif 
925e			 
925e			 
925e			if MALLOC_4 
925e			 
925e			; My memory allocation code. Very very simple.... 
925e			; allocate space under 250 chars 
925e			 
925e			heap_init: 
925e				; init start of heap as zero 
925e				;  
925e			 
925e				ld hl, heap_start 
925e				ld a, 0 
925e				ld (hl), a      ; empty block 
925e				inc hl 
925e				ld a, 0 
925e				ld (hl), a      ; length of block 
925e				; write end of list 
925e				inc hl 
925e				ld a,(hl) 
925e				inc hl 
925e				ld a,(hl) 
925e				 
925e			 
925e				; init some malloc vars 
925e			 
925e				ld hl, 0 
925e				ld (free_list), hl       ; store last malloc location 
925e			 
925e				ld hl, free_list+3      ; flag for 'free' being used and force a rescan for reuse of block  
925e				ld a, 0 
925e				ld (hl), a 
925e			 
925e			 
925e				ld hl, heap_start 
925e				;  
925e				  
925e				ret 
925e			 
925e			 
925e			;    free block marker 
925e			;    requested size  
925e			;    pointer to next block 
925e			;    .... 
925e			;    next block marker 
925e			 
925e			 
925e			; TODO add a flag that is reset on use of free. if flag is reset then start scan from start of heap otherwise use last location 
925e			; 
925e			 
925e			 
925e			malloc:  
925e				push de 
925e				push bc 
925e				push af 
925e			 
925e				; hl space required 
925e				 
925e				ld c, l    ; hold space   (TODO only a max of 255) 
925e			 
925e			;	inc c     ; TODO BUG need to fix memory leak on push str 
925e			;	inc c 
925e			;	inc c 
925e			;	inc c 
925e			;	inc c 
925e			;	inc c 
925e			;	inc c 
925e			 
925e			 
925e			 
925e				; start at heap if a free has been issued so we can reclaim it otherwise continue from last time 
925e			 
925e				ld a, (free_list+3) 
925e				cp 0 
925e				jr z, .contheap 
925e			 
925e				ld hl, (free_list)     ; get last alloc 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "mrs" 
925e						CALLMONITOR 
925e					endif 
925e				jr .startalloc 
925e			 
925e			.contheap: 
925e				ld hl, heap_start 
925e			 
925e			.startalloc: 
925e			 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "mym" 
925e						CALLMONITOR 
925e					endif 
925e			.findblock: 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "mmf" 
925e						CALLMONITOR 
925e					endif 
925e			 
925e				ld a,(hl)  
925e				; if byte is zero then clear to use 
925e			 
925e				cp 0 
925e				jr z, .foundemptyblock 
925e			 
925e				; if byte is not clear 
925e				;     then byte is offset to next block 
925e			 
925e				inc hl 
925e				ld a, (hl) ; get size 
925e			.nextblock:	inc hl 
925e					ld e, (hl) 
925e					inc hl 
925e					ld d, (hl) 
925e					ex de, hl 
925e			;	inc hl  ; move past the store space 
925e			;	inc hl  ; move past zero index  
925e			 
925e				; TODO detect no more space 
925e			 
925e				push hl 
925e				ld de, heap_end 
925e				call cmp16 
925e				pop hl 
925e				jr nc, .nospace 
925e			 
925e				jr .findblock 
925e			 
925e			.nospace: ld hl, 0 
925e				jp .exit 
925e			 
925e			 
925e			.foundemptyblock:	 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "mme" 
925e						CALLMONITOR 
925e					endif 
925e			 
925e			; TODO has block enough space if reusing??? 
925e			 
925e				;  
925e			 
925e			; see if this block has been previously used 
925e				inc hl 
925e				ld a, (hl) 
925e				dec hl 
925e				cp 0 
925e				jr z, .newblock 
925e			 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "meR" 
925e						CALLMONITOR 
925e					endif 
925e			 
925e			; no reusing previously allocated block 
925e			 
925e			; is it smaller than previously used? 
925e				 
925e				inc hl    ; move to size 
925e				ld a, c 
925e				sub (hl)        ; we want c < (hl) 
925e				dec hl    ; move back to marker 
925e			        jr z, .findblock 
925e			 
925e				; update with the new size which should be lower 
925e			 
925e			        ;inc  hl   ; negate next move. move back to size  
925e			 
925e			.newblock: 
925e				; need to be at marker here 
925e			 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "meN" 
925e						CALLMONITOR 
925e					endif 
925e			 
925e			 
925e				ld a, c 
925e			 
925e				ld (free_list+3), a	 ; flag resume from last malloc  
925e				ld (free_list), hl    ; save out last location 
925e			 
925e			 
925e				;inc a     ; space for length byte 
925e				ld (hl), a     ; save block in use marker 
925e			 
925e				inc hl   ; move to space marker 
925e				ld (hl), a    ; save new space 
925e			 
925e				inc hl   ; move to start of allocated area 
925e				 
925e			;	push hl     ; save where we are - 1  
925e			 
925e			;	inc hl  ; move past zero index  
925e				; skip space to set down new marker 
925e			 
925e				; provide some extra space for now 
925e			 
925e				inc a    ; actual is one fewer than bytes requested. correct if zero index is taken into account 
925e				inc a 
925e				inc a 
925e			 
925e				push hl   ; save where we are in the node block 
925e			 
925e				call addatohl 
925e			 
925e				; write linked list point 
925e			 
925e				pop de     ; get our node position 
925e				ex de, hl 
925e			 
925e				ld (hl), e 
925e				inc hl 
925e				ld (hl), d 
925e			 
925e				inc hl 
925e			 
925e				; now at start of allocated data so save pointer 
925e			 
925e				push hl 
925e			 
925e				; jump to position of next node and setup empty header in DE 
925e			 
925e				ex de, hl 
925e			 
925e			;	inc hl ; move past end of block 
925e			 
925e				ld a, 0 
925e				ld (hl), a   ; empty marker 
925e				inc hl 
925e				ld (hl), a   ; size 
925e				inc hl  
925e				ld (hl), a   ; ptr 
925e				inc hl 
925e				ld (hl), a   ; ptr 
925e			 
925e			 
925e				pop hl 
925e			 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "mmr" 
925e						CALLMONITOR 
925e					endif 
925e			 
925e			.exit: 
925e				pop af 
925e				pop bc 
925e				pop de  
925e				ret 
925e			 
925e			 
925e			 
925e			 
925e			free:  
925e				push hl 
925e				push af 
925e				; get address in hl 
925e			 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "fre" 
925e						CALLMONITOR 
925e					endif 
925e				; data is at hl - move to block count 
925e				dec hl 
925e				dec hl    ; get past pointer 
925e				dec hl 
925e			 
925e				ld a, (hl)    ; need this for a validation check 
925e			 
925e				dec hl    ; move to block marker 
925e			 
925e				; now check that the block count and block marker are the same  
925e			        ; this checks that we are on a malloc node and not random memory 
925e			        ; OK a faint chance this could be a problem but rare - famous last words! 
925e			 
925e				ld c, a 
925e				ld a, (hl)    
925e			 
925e				cp c 
925e				jr nz, .freeignore      ; not a valid malloc node in use so dont break anything 
925e			 
925e				; yes good chance we are on a malloc node 
925e			 
925e				ld a, 0      
925e				ld (hl), a   ; mark as free 
925e			 
925e				ld (free_list+3), a	 ; flag reuse of existing block on next malloc 
925e			 
925e			.freeignore:  
925e			 
925e				pop af 
925e				pop hl 
925e			 
925e				ret 
925e			 
925e			 
925e			 
925e			endif 
925e			 
925e			; eof 
# End of file firmware_memory.asm
925e			  
925e			; device C  
925e			; Now handled by SPI  
925e			;if SOUND_ENABLE  
925e			;	include "firmware_sound.asm"  
925e			;endif  
925e			  
925e			include "firmware_diags.asm"  
925e			; Hardware diags menu 
925e			 
925e			 
925e			config: 
925e			 
925e 3e 00			ld a, 0 
9260 21 84 92			ld hl, .configmn 
9263 cd ee 8a			call menu 
9266			 
9266 fe 00			cp 0 
9268 c8				ret z 
9269			 
9269			;	cp 1 
9269			;	call z, .savetostore 
9269			 
9269 fe 01			cp 1 
926b			if STARTUP_V1 
926b cc 9a 92			call z, .selautoload 
926e			endif 
926e			 
926e			if STARTUP_V2 
926e				call z, .enautoload 
926e			endif 
926e fe 02			cp 2 
9270 cc 90 92			call z, .disautoload 
9273			;	cp 3 
9273			;	call z, .selbank 
9273 fe 03			cp 3 
9275 cc b8 92			call z, .debug_tog 
9278 fe 04			cp 4 
927a cc 06 94			call z, .bpsgo 
927d fe 05			cp 5 
927f cc e1 92			call z, hardware_diags 
9282			if STARTUP_V2 
9282				cp 6 
9282				call z, create_startup 
9282			endif 
9282 18 da			jr config 
9284			 
9284			.configmn: 
9284			;	dw prom_c3 
9284 f4 95			dw prom_c2 
9286 09 96			dw prom_c2a 
9288			;	dw prom_c2b 
9288			;	dw prom_c4 
9288 28 96			dw prom_m4 
928a 43 96			dw prom_m4b 
928c 4b 96			dw prom_c1 
928e			if STARTUP_V2 
928e				dw prom_c9 
928e			endif 
928e 00 00			dw 0 
9290				 
9290			 
9290			if STARTUP_V2 
9290			.enautoload: 
9290				if STORAGE_SE 
9290				ld a, $fe      ; bit 0 clear 
9290				ld (spi_device), a 
9290			 
9290				call storage_get_block_0 
9290			 
9290				ld a, 1 
9290				ld (store_page+STORE_0_AUTOFILE), a 
9290			 
9290					ld hl, 0 
9290					ld de, store_page 
9290				call storage_write_block	 ; save update 
9290				else 
9290			 
9290				ld hl, prom_notav 
9290				ld de, prom_empty 
9290				call info_panel 
9290				endif 
9290			 
9290			 
9290				ret 
9290			endif 
9290			 
9290			.disautoload: 
9290				if STORAGE_SE 
9290				ld a, $fe      ; bit 0 clear 
9290				ld (spi_device), a 
9290			 
9290				call storage_get_block_0 
9290			 
9290				ld a, 0 
9290				ld (store_page+STORE_0_AUTOFILE), a 
9290			 
9290					ld hl, 0 
9290					ld de, store_page 
9290				call storage_write_block	 ; save update 
9290				else 
9290			 
9290 21 5a 96			ld hl, prom_notav 
9293 11 70 96			ld de, prom_empty 
9296 cd 4e 8a			call info_panel 
9299				endif 
9299			 
9299			 
9299 c9				ret 
929a			 
929a			if STARTUP_V1 
929a			 
929a			; Select auto start 
929a			 
929a			.selautoload: 
929a			 
929a				 
929a				if STORAGE_SE 
929a			 
929a					call config_dir 
929a				        ld hl, scratch 
929a					ld a, 0 
929a					call menu 
929a			 
929a					cp 0 
929a					ret z 
929a			 
929a					dec a 
929a			 
929a			 
929a					; locate menu option 
929a			 
929a					ld hl, scratch 
929a					call table_lookup 
929a			 
929a					if DEBUG_FORTH_WORDS 
929a						DMARK "ALl" 
929a						CALLMONITOR 
929a					endif 
929a					; with the pointer to the menu it, the byte following the zero term is the file id 
929a			 
929a					ld a, 0 
929a					ld bc, 50   ; max of bytes to look at 
929a					cpir  
929a			 
929a					if DEBUG_FORTH_WORDS 
929a						DMARK "ALb" 
929a						CALLMONITOR 
929a					endif 
929a					;inc hl 
929a			 
929a					ld a, (hl)   ; file id 
929a					 
929a				        ; save bank and file ids 
929a			 
929a					push af 
929a			 
929a			; TODO need to save to block 0 on bank 1	 
929a			 
929a					call storage_get_block_0 
929a			 
929a					if DEBUG_FORTH_WORDS 
929a						DMARK "AL0" 
929a						CALLMONITOR 
929a					endif 
929a					pop af 
929a			 
929a					ld (store_page+STORE_0_FILERUN),a 
929a					 
929a					; save bank id 
929a			 
929a					ld a,(spi_device) 
929a					ld (store_page+STORE_0_BANKRUN),a 
929a			 
929a					; enable auto run of store file 
929a			 
929a					ld a, 1 
929a					ld (store_page+STORE_0_AUTOFILE),a 
929a			 
929a					; save buffer 
929a			 
929a					ld hl, 0 
929a					ld de, store_page 
929a					if DEBUG_FORTH_WORDS 
929a						DMARK "ALw" 
929a						CALLMONITOR 
929a					endif 
929a				call storage_write_block	 ; save update 
929a			  
929a			 
929a			 
929a			 
929a					ld hl, scratch 
929a					call config_fdir 
929a			 
929a				else 
929a			 
929a 21 5a 96			ld hl, prom_notav 
929d 11 70 96			ld de, prom_empty 
92a0 cd 4e 8a			call info_panel 
92a3			 
92a3				endif 
92a3 c9				ret 
92a4			endif 
92a4			 
92a4			 
92a4			; Select storage bank 
92a4			 
92a4			.selbank: 
92a4			 
92a4			;	if STORAGE_SE 
92a4			;	else 
92a4			 
92a4 21 5a 96			ld hl, prom_notav 
92a7 11 70 96			ld de, prom_empty 
92aa cd 4e 8a			call info_panel 
92ad			;	endif 
92ad				 
92ad c9				ret 
92ae			 
92ae			if STORAGE_SE 
92ae			 
92ae			.config_ldir:   
92ae				; Load storage bank labels into menu array 
92ae			 
92ae				 
92ae			 
92ae			 
92ae				ret 
92ae			 
92ae			 
92ae			endif 
92ae			 
92ae			 
92ae			; Save user words to storage 
92ae			 
92ae			.savetostore: 
92ae			 
92ae			;	if STORAGE_SE 
92ae			; 
92ae			;		call config_dir 
92ae			;	        ld hl, scratch 
92ae			;		ld a, 0 
92ae			;		call menu 
92ae			;		 
92ae			;		ld hl, scratch 
92ae			;		call config_fdir 
92ae			; 
92ae			;	else 
92ae			 
92ae 21 5a 96			ld hl, prom_notav 
92b1 11 70 96			ld de, prom_empty 
92b4 cd 4e 8a			call info_panel 
92b7			 
92b7			;	endif 
92b7			 
92b7 c9				ret 
92b8			 
92b8			if STARTUP_V2 
92b8			 
92b8			create_startup: 
92b8			 
92b8				ld a, 0 
92b8				ld hl, .crstart 
92b8				call menu 
92b8			 
92b8				cp 0 
92b8				ret z 
92b8			 
92b8				cp 1 
92b8				call z, .genlsword 
92b8				cp 2 
92b8				call z, .genedword 
92b8			 
92b8				cp 3 
92b8				call z, .gendemword 
92b8			 
92b8				cp 4 
92b8				call z, .genutlword 
92b8				cp 5 
92b8				call z, .genspiword 
92b8				cp 6 
92b8				call z, .genkeyword 
92b8				cp 7 
92b8				call z, .gensoundword 
92b8				cp 7 
92b8				call z, .genhwword 
92b8				jr create_startup 
92b8			 
92b8			.genhwword: 
92b8				ld hl, crs_hw 
92b8				ld de, .hwworddef 
92b8				call .genfile 
92b8				ret 
92b8			.gensoundword: 
92b8				ld hl, crs_sound 
92b8				ld de, .soundworddef 
92b8				call .genfile 
92b8				ret 
92b8			.genlsword: 
92b8				ld hl, crs_s1 
92b8				ld de, .lsworddef 
92b8				call .genfile 
92b8				ret 
92b8			 
92b8			.genedword: 
92b8				ld de, .edworddef 
92b8				ld hl, crs_s2 
92b8				call .genfile 
92b8				ret 
92b8			 
92b8			.gendemword: 
92b8				ld de, .demoworddef 
92b8				ld hl, crs_s3 
92b8				call .genfile 
92b8				ret 
92b8			 
92b8			.genutlword: 
92b8				ld hl, crs_s4 
92b8				ld de, .utilwordef 
92b8				call .genfile 
92b8				ret 
92b8			.genspiword: 
92b8				ld hl, crs_s5 
92b8				ld de, .spiworddef 
92b8				call .genfile 
92b8				ret 
92b8			.genkeyword: 
92b8				ld hl, crs_s6 
92b8				ld de, .keyworddef 
92b8				call .genfile 
92b8				ret 
92b8			 
92b8			; hl - points to file name 
92b8			; de - points to strings to add to file 
92b8			 
92b8			.genfile: 
92b8				push hl 
92b8				push de 
92b8			 
92b8				call clear_display 
92b8				ld a, display_row_1 
92b8				ld de, .genfiletxt 
92b8				call str_at_display 
92b8				call update_display 
92b8			 
92b8				pop de 
92b8				pop hl 
92b8			 
92b8			 
92b8				push de 
92b8				call storage_create 
92b8				; id in hl 
92b8				pop de   ; table of strings to add 
92b8			 
92b8			.genloop: 
92b8			 
92b8				push hl ; save id for next time around 
92b8				push de ; save de for next time around 
92b8			 
92b8				ex de, hl 
92b8				call loadwordinhl 
92b8				ex de, hl 
92b8			 
92b8				; need hl to be the id 
92b8				; need de to be the string ptr 
92b8				 
92b8				call storage_append 
92b8			 
92b8				pop de 
92b8				pop hl 
92b8			 
92b8				inc de 
92b8				inc de 
92b8			 
92b8				ld a,(de) 
92b8				cp 0 
92b8				jr nz, .genloop 
92b8				inc de 
92b8				ld a, (de) 
92b8				dec de 
92b8				cp 0 
92b8				jr nz, .genloop	 
92b8			 
92b8				ret 
92b8			 
92b8			.genfiletxt:  db "Creating file...",0 
92b8			 
92b8			.hwworddef: 
92b8				dw test5 
92b8				dw test6 
92b8				dw test7 
92b8				dw test8 
92b8				dw test9 
92b8				dw test10 
92b8				dw 0 
92b8			 
92b8			.soundworddef: 
92b8				dw sound1 
92b8				dw sound2 
92b8				dw sound3 
92b8				dw sound4 
92b8				dw sound5 
92b8				dw sound6 
92b8				dw sound7 
92b8				dw sound8 
92b8				dw sound9 
92b8				dw 0 
92b8			 
92b8			.utilwordef: 
92b8				dw strncpy 
92b8				dw type 
92b8				dw tuck 
92b8				dw clrstack 
92b8				dw longread 
92b8				dw start1 
92b8				dw start2 
92b8			; duplicated 
92b8			;	dw start3b 
92b8			;	dw start3c 
92b8				dw list 
92b8				dw 0 
92b8			 
92b8			.lsworddef: 
92b8				dw start3b 
92b8				dw 0 
92b8			 
92b8			.edworddef: 
92b8				dw edit1 
92b8				dw edit2 
92b8				dw edit3 
92b8				dw 0 
92b8			 
92b8			.demoworddef: 
92b8				dw game1 
92b8				dw game1a 
92b8				dw game1b 
92b8				dw game1c 
92b8				dw game1d 
92b8				dw game1s 
92b8				dw game1t 
92b8				dw game1f 
92b8				dw game1z 
92b8				dw game1zz 
92b8				dw ssv2 
92b8				dw ssv3 
92b8				dw ssv4 
92b8				dw ssv5 
92b8				dw ssv1 
92b8				dw ssv1cpm	 
92b8			;	dw game2b 
92b8			;	dw game2bf 
92b8			;	dw game2mba 
92b8			;	dw game2mbas	 
92b8			;	dw game2mbht 
92b8			;	dw game2mbms 
92b8			;	dw game2mb 
92b8			;	dw game3w 
92b8			;	dw game3p 
92b8			;	dw game3sc 
92b8			;	dw game3vsi 
92b8			;	dw game3vs 
92b8				dw 0 
92b8			 
92b8			 
92b8			.spiworddef: 
92b8			 
92b8			    dw spi1 
92b8			    dw spi2 
92b8			    dw spi2b 
92b8			    dw spi3 
92b8			    dw spi4 
92b8			    dw spi5 
92b8			;    dw spi6 
92b8			;    dw spi7 
92b8			 
92b8			;    dw spi8 
92b8			;    dw spi9 
92b8			;    dw spi10 
92b8			    dw 0 
92b8			 
92b8			.keyworddef: 
92b8			 
92b8				dw keyup 
92b8				dw keydown 
92b8				dw keyleft 
92b8				dw keyright 
92b8				dw 	keyf1 
92b8				dw keyf2 
92b8				dw keyf3 
92b8				dw keyf4 
92b8				dw keyf5 
92b8				dw keyf6 
92b8				dw keyf7 
92b8				dw keyf8 
92b8				dw keyf9 
92b8				dw keyf10 
92b8				dw keyf11 
92b8				dw keyf12 
92b8				dw keytab 
92b8				dw keycr 
92b8				dw keyhome 
92b8				dw keyend 
92b8				dw keybs 
92b8				dw 0 
92b8			 
92b8			.crstart: 
92b8				dw crs_s1 
92b8				dw crs_s2 
92b8				dw crs_s3 
92b8				dw crs_s4 
92b8				dw crs_s5 
92b8				dw crs_s6 
92b8				dw crs_sound 
92b8				dw crs_hw 
92b8				dw 0 
92b8			 
92b8			endif 
92b8			 
92b8			 
92b8			if STORAGE_SE 
92b8			 
92b8			config_fdir: 
92b8				; using the scratch dir go through and release the memory allocated for each string 
92b8				 
92b8				ld hl, scratch 
92b8			.cfdir:	ld e,(hl) 
92b8				inc hl 
92b8				ld d,(hl) 
92b8				inc hl 
92b8			 
92b8				ex de, hl 
92b8				call ishlzero 
92b8				ret z     ; return on null pointer 
92b8				call free 
92b8				ex de, hl 
92b8				jr .cfdir 
92b8			 
92b8			 
92b8				ret 
92b8			 
92b8			 
92b8			config_dir: 
92b8			 
92b8				; for the config menus that need to build a directory of storage call this routine 
92b8				; it will construct a menu in scratch to pass to menu 
92b8			 
92b8				; open storage device 
92b8			 
92b8				; execute DIR to build a list of files and their ids into scratch in menu format 
92b8				; once the menu has finished then will need to call config_fdir to release the strings 
92b8				 
92b8				; c = number items 
92b8			 
92b8				 
92b8				call storage_get_block_0 
92b8			 
92b8				ld hl, store_page     ; get current id count 
92b8				ld b, (hl) 
92b8				ld c, 0    ; count of files   
92b8			 
92b8			 
92b8				ld hl, scratch 
92b8				ld (store_tmp2), hl    ; location to poke strings 
92b8			 
92b8				; check for empty drive 
92b8			 
92b8				ld a, 0 
92b8				cp b 
92b8				jp z, .dirdone 
92b8			 
92b8				 
92b8					if DEBUG_FORTH_WORDS 
92b8						DMARK "Cdc" 
92b8						CALLMONITOR 
92b8					endif 
92b8			 
92b8			 
92b8			.diritem:	 
92b8				push bc 
92b8				; for each of the current ids do a search for them and if found push to stack 
92b8			 
92b8					ld hl, STORE_BLOCK_PHY 
92b8					ld d, 0		 ; look for extent 0 of block id as this contains file name 
92b8					ld e,b 
92b8			 
92b8					call storage_findnextid 
92b8			 
92b8			 
92b8					; if found hl will be non zero 
92b8			 
92b8					call ishlzero 
92b8					jr z, .dirnotfound 
92b8			 
92b8					; increase count 
92b8			 
92b8					pop bc	 
92b8					inc c 
92b8					push bc 
92b8					 
92b8			 
92b8					; get file header and push the file name 
92b8			 
92b8					ld de, store_page 
92b8					call storage_read_block 
92b8			 
92b8					; push file id to stack 
92b8				 
92b8					ld a, (store_page) 
92b8					ld h, 0 
92b8					ld l, a 
92b8			 
92b8					;call forth_push_numhl 
92b8					; TODO store id 
92b8			 
92b8					push hl 
92b8			 
92b8					; push extent count to stack  
92b8				 
92b8					ld hl, store_page+3 
92b8			 
92b8					; get file name length 
92b8			 
92b8					call strlenz   
92b8			 
92b8					inc hl   ; cover zero term 
92b8					inc hl  ; stick the id at the end of the area 
92b8			 
92b8					push hl 
92b8					pop bc    ; move length to bc 
92b8			 
92b8					call malloc 
92b8			 
92b8					; TODO save malloc area to scratch 
92b8			 
92b8					ex de, hl 
92b8					ld hl, (store_tmp2) 
92b8					ld (hl), e 
92b8					inc hl 
92b8					ld (hl), d 
92b8					inc hl 
92b8					ld (store_tmp2), hl 
92b8			 
92b8					 
92b8			 
92b8					;pop hl   ; get source 
92b8			;		ex de, hl    ; swap aronund	 
92b8			 
92b8					ld hl, store_page+3 
92b8					if DEBUG_FORTH_WORDS 
92b8						DMARK "CFd" 
92b8						CALLMONITOR 
92b8					endif 
92b8					ldir 
92b8			 
92b8					; de is past string, move back one and store id 
92b8					 
92b8					dec de 
92b8			 
92b8					; store file id 
92b8			 
92b8					pop hl 
92b8					ex de,hl 
92b8					ld (hl), e 
92b8			 
92b8					if DEBUG_FORTH_WORDS 
92b8						DMARK "Cdi" 
92b8						CALLMONITOR 
92b8					endif 
92b8					 
92b8			.dirnotfound: 
92b8					pop bc     
92b8					djnz .diritem 
92b8				 
92b8			.dirdone:	 
92b8			 
92b8					ld a, 0 
92b8					ld hl, (store_tmp2) 
92b8					ld (hl), a 
92b8					inc hl 
92b8					ld (hl), a 
92b8					inc hl 
92b8					; push a count of the dir items found 
92b8			 
92b8			;		ld h, 0 
92b8			;		ld l, c 
92b8			 
92b8				ret 
92b8			 
92b8			endif 
92b8			 
92b8			 
92b8			; Settings 
92b8			; Run  
92b8			 
92b8			 
92b8			 
92b8			;hd_menu1:   db "Diags:  1: Key Matrix   5: Sound",0 
92b8			;;hd_menu2:   db "        2: Editor",0   
92b8			;hd_menu2:   db "        2: Editor       6: Menu",0   
92b8			;hd_menu3:   db "        3: Storage",0 
92b8			;hd_menu4:   db "0=quit  4: Debug",0 
92b8			;hd_don:     db "ON",0 
92b8			;hd_doff:     db "OFF",0 
92b8			; 
92b8			; 
92b8			; 
92b8			;hardware_diags_old:       
92b8			; 
92b8			;.diagmenu: 
92b8			;	call clear_display 
92b8			;	ld a, display_row_1 
92b8			;	ld de, hd_menu1 
92b8			;	call str_at_display 
92b8			; 
92b8			;	ld a, display_row_2 
92b8			;	ld de, hd_menu2 
92b8			;	call str_at_display 
92b8			; 
92b8			;	ld a, display_row_3 
92b8			;	ld de, hd_menu3 
92b8			;	call str_at_display 
92b8			; 
92b8			;	ld a,  display_row_4 
92b8			;	ld de, hd_menu4 
92b8			;	call str_at_display 
92b8			; 
92b8			;	; display debug state 
92b8			; 
92b8			;	ld de, hd_don 
92b8			;	ld a, (os_view_disable) 
92b8			;	cp 0 
92b8			;	jr z, .distog 
92b8			;	ld de, hd_doff 
92b8			;.distog: ld a, display_row_4+17 
92b8			;	call str_at_display 
92b8			; 
92b8			;	call update_display 
92b8			; 
92b8			;	call cin_wait 
92b8			; 
92b8			; 
92b8			; 
92b8			;	cp '4' 
92b8			;	jr nz, .diagn1 
92b8			; 
92b8			;	; debug toggle 
92b8			; 
92b8			;	ld a, (os_view_disable) 
92b8			;	ld b, '*' 
92b8			;	cp 0 
92b8			;	jr z, .debtog 
92b8			;	ld b, 0 
92b8			;.debtog:	 
92b8			;	ld a,b 
92b8			;	ld (os_view_disable),a 
92b8			; 
92b8			;.diagn1: cp '0' 
92b8			;	 ret z 
92b8			; 
92b8			;;	cp '1' 
92b8			;;       jp z, matrix	 
92b8			;;   TODO keyboard matrix test 
92b8			; 
92b8			;	cp '2' 
92b8			;	jp z, .diagedit 
92b8			; 
92b8			;;	cp '6' 
92b8			;;	jp z, .menutest 
92b8			;;if ENABLE_BASIC 
92b8			;;	cp '6' 
92b8			;;	jp z, basic 
92b8			;;endif 
92b8			 ; 
92b8			;	jp .diagmenu 
92b8			; 
92b8			; 
92b8			;	ret 
92b8			 
92b8			 
92b8			.debug_tog: 
92b8 21 02 93			ld hl, .menudebug 
92bb				 
92bb			;	ld a, (os_view_disable) 
92bb			;	cp '*' 
92bb 3a 6f ee			ld a,(debug_vector) 
92be fe c9			cp $C9   ; RET 
92c0 20 04			jr nz,.tdon  
92c2 3e 01			ld a, 1 
92c4 18 02			jr .tog1 
92c6 3e 00		.tdon: ld a, 0 
92c8			 
92c8			.tog1: 
92c8 cd ee 8a			call menu 
92cb fe 00			cp 0 
92cd c8				ret z 
92ce fe 01			cp 1    ; disable debug 
92d0 28 04			jr z, .dtog0 
92d2 3e 2a			ld a, '*' 
92d4 18 05			jr .dtogset 
92d6			.dtog0:  
92d6				;ld a, 0 
92d6 cd f4 93			call bp_on 
92d9 18 dd			jr .debug_tog 
92db			.dtogset:  
92db				; ld (os_view_disable), a 
92db cd 00 94			call bp_off 
92de c3 b8 92			jp .debug_tog 
92e1			 
92e1			 
92e1			hardware_diags:       
92e1			 
92e1			.diagm: 
92e1 21 f4 92			ld hl, .menuitems 
92e4 3e 00			ld a, 0 
92e6 cd ee 8a			call menu 
92e9			 
92e9 fe 00		         cp 0 
92eb c8				 ret z 
92ec			 
92ec fe 02			cp 2 
92ee ca 4d 93			jp z, .diagedit 
92f1			 
92f1			;	cp '6' 
92f1			;	jp z, .menutest 
92f1			;if ENABLE_BASIC 
92f1			;	cp '6' 
92f1			;	jp z, basic 
92f1			;endif 
92f1			  
92f1 c3 e1 92			jp .diagm 
92f4			 
92f4				 
92f4 08 93		.menuitems:   	dw .m1 
92f6 13 93				dw .m2 
92f8 1a 93				dw .m3 
92fa 22 93				dw .m5 
92fc 28 93				dw .m5a 
92fe 31 93				dw .m5b 
9300 00 00				dw 0 
9302			 
9302			.menudebug: 
9302 3a 93				dw .m6 
9304 43 93				dw .m7 
9306 00 00				dw 0 
9308			 
9308 .. 00		.m1:   db "Key Matrix",0 
9313 .. 00		.m2:   db "Editor",0 
931a .. 00		.m3:   db "Storage",0 
9322 .. 00		.m5:   db "Sound",0 
9328 .. 00		.m5a:  db "RAM Test",0 
9331 .. 00		.m5b:  db "LCD Test",0 
933a			 
933a .. 00		.m6:   db "Debug ON",0 
9343 .. 00		.m7:   db "Debug OFF",0 
934d			 
934d			; debug editor 
934d			 
934d			.diagedit: 
934d			 
934d 21 bb e2			ld hl, scratch 
9350			;	ld bc, 250 
9350			;	ldir 
9350				; TODO ldir is not working strcpy may not get all the terms on the input line???? 
9350 3e 00			ld a, 0 
9352 77				ld (hl), a 
9353 23				inc hl 
9354 77				ld (hl), a 
9355 23				inc hl 
9356 77				ld (hl), a 
9357			 
9357 cd bd 8a		        call clear_display 
935a cd e0 8a			call update_display 
935d				;ld a, 1 
935d				;ld (hardware_diag), a 
935d			.diloop: 
935d 3e 00			ld a, display_row_1 
935f 0e 00			ld c, 0 
9361 16 ff			ld d, 255    ; TODO fix input_str to actually take note of max string input length 
9363 1e 28			ld e, 40 
9365			 
9365 21 bb e2			ld hl, scratch	 
9368 cd 17 8d			call input_str 
936b			 
936b 3e 28			ld a, display_row_2 
936d 11 bb e2			ld de, scratch 
9370 cd d0 8a			call str_at_display 
9373 cd e0 8a			call update_display 
9376			 
9376 c3 5d 93			jp .diloop 
9379			 
9379			 
9379			; pass word in hl 
9379			; a has display location 
9379			display_word_at: 
9379 f5				push af 
937a e5				push hl 
937b 7c				ld a,h 
937c 21 c0 e5			ld hl, os_word_scratch 
937f cd f3 8e			call hexout 
9382 e1				pop hl 
9383 7d				ld a,l 
9384 21 c2 e5			ld hl, os_word_scratch+2 
9387 cd f3 8e			call hexout 
938a 21 c4 e5			ld hl, os_word_scratch+4 
938d 3e 00			ld a,0 
938f 77				ld (hl),a 
9390 11 c0 e5			ld de,os_word_scratch 
9393 f1				pop af 
9394 cd d0 8a				call str_at_display 
9397 c9				ret 
9398			 
9398			display_ptr_state: 
9398			 
9398				; to restore afterwards 
9398			 
9398 d5				push de 
9399 c5				push bc 
939a e5				push hl 
939b f5				push af 
939c			 
939c				; for use in here 
939c			 
939c			;	push bc 
939c			;	push de 
939c			;	push hl 
939c			;	push af 
939c			 
939c cd bd 8a			call clear_display 
939f			 
939f 11 77 95			ld de, .ptrstate 
93a2 3e 00			ld a, display_row_1 
93a4 cd d0 8a			call str_at_display 
93a7			 
93a7				; display debug step 
93a7			 
93a7			 
93a7 11 65 ee			ld de, debug_mark 
93aa 3e 26			ld a, display_row_1+display_cols-2 
93ac cd d0 8a			call str_at_display 
93af			 
93af				; display a 
93af 11 81 95			ld de, .ptrcliptr 
93b2 3e 28			ld a, display_row_2 
93b4 cd d0 8a			call str_at_display 
93b7			 
93b7 f1				pop af 
93b8 2a 3a ea			ld hl,(cli_ptr) 
93bb 3e 30			ld a, display_row_2+8 
93bd cd 79 93			call display_word_at 
93c0			 
93c0			 
93c0				; display hl 
93c0			 
93c0			 
93c0 11 89 95			ld de, .ptrclioptr 
93c3 3e 32			ld a, display_row_2+10 
93c5 cd d0 8a			call str_at_display 
93c8			; 
93c8			;	pop hl 
93c8 3e 35			ld a, display_row_2+13 
93ca 2a 38 ea			ld hl,(cli_origptr) 
93cd cd 79 93			call display_word_at 
93d0			; 
93d0			;	 
93d0			;	; display de 
93d0			 
93d0			;	ld de, .regstatede 
93d0			;	ld a, display_row_3 
93d0			;	call str_at_display 
93d0			 
93d0			;	pop de 
93d0			;	ld h,d 
93d0			;	ld l, e 
93d0			;	ld a, display_row_3+3 
93d0			;	call display_word_at 
93d0			 
93d0			 
93d0				; display bc 
93d0			 
93d0			;	ld de, .regstatebc 
93d0			;	ld a, display_row_3+10 
93d0			;	call str_at_display 
93d0			 
93d0			;	pop bc 
93d0			;	ld h,b 
93d0			;	ld l, c 
93d0			;	ld a, display_row_3+13 
93d0			;	call display_word_at 
93d0			 
93d0			 
93d0				; display dsp 
93d0			 
93d0			;	ld de, .regstatedsp 
93d0			;	ld a, display_row_4 
93d0			;	call str_at_display 
93d0			 
93d0				 
93d0			;	ld hl,(cli_data_sp) 
93d0			;	ld a, display_row_4+4 
93d0			;	call display_word_at 
93d0			 
93d0				; display rsp 
93d0			 
93d0 11 b8 95			ld de, .regstatersp 
93d3 3e 82			ld a, display_row_4+10 
93d5 cd d0 8a			call str_at_display 
93d8			 
93d8				 
93d8 2a ec e9			ld hl,(cli_ret_sp) 
93db 3e 86			ld a, display_row_4+14 
93dd cd 79 93			call display_word_at 
93e0			 
93e0 cd e0 8a			call update_display 
93e3			 
93e3 cd 00 8a			call delay1s 
93e6 cd 00 8a			call delay1s 
93e9 cd 00 8a			call delay1s 
93ec			 
93ec			 
93ec cd fd 99			call next_page_prompt 
93ef			 
93ef				; restore  
93ef			 
93ef f1				pop af 
93f0 e1				pop hl 
93f1 c1				pop bc 
93f2 d1				pop de 
93f3 c9				ret 
93f4			 
93f4			; Update the break point vector so that the user can hook a new routine 
93f4			 
93f4			bp_on: 
93f4 3e c3			ld a, $c3    ; JP 
93f6 32 6f ee			ld (debug_vector), a 
93f9 21 06 94			ld hl, break_point_state 
93fc 22 70 ee			ld (debug_vector+1), hl 
93ff c9				ret 
9400			 
9400			bp_off: 
9400 3e c9			ld a, $c9    ; RET 
9402 32 6f ee			ld (debug_vector), a 
9405 c9				ret 
9406			 
9406			 
9406			break_point_state: 
9406			;	push af 
9406			; 
9406			;	; see if disabled 
9406			; 
9406			;	ld a, (os_view_disable) 
9406			;	cp '*' 
9406			;	jr nz, .bpsgo 
9406			;	pop af 
9406			;	ret 
9406			 
9406			.bpsgo: 
9406			;	pop af 
9406 f5				push af 
9407 22 9d e2			ld (os_view_hl), hl 
940a ed 53 9b e2		ld (os_view_de), de 
940e ed 43 99 e2		ld (os_view_bc), bc 
9412 e5				push hl 
9413 6f				ld l, a 
9414 26 00			ld h, 0 
9416 22 9f e2			ld (os_view_af),hl 
9419			 
9419 21 ab ed				ld hl, display_fb0 
941c 22 c6 eb				ld (display_fb_active), hl 
941f e1				pop hl	 
9420			 
9420 3e 31			ld a, '1' 
9422 fe 2a		.bps1:  cp '*' 
9424 cc 00 94			call z, bp_off 
9427			;	jr nz, .bps1b 
9427			;	ld (os_view_disable),a 
9427 fe 31		.bps1b:  cp '1' 
9429 20 14			jr nz, .bps2 
942b			 
942b				; display reg 
942b			 
942b				 
942b			 
942b 3a 9f e2			ld a, (os_view_af) 
942e 2a 9d e2			ld hl, (os_view_hl) 
9431 ed 5b 9b e2		ld de, (os_view_de) 
9435 ed 4b 99 e2		ld bc, (os_view_bc) 
9439 cd d3 94			call display_reg_state 
943c c3 bf 94			jp .bpschk 
943f			 
943f fe 32		.bps2:  cp '2' 
9441 20 08			jr nz, .bps3 
9443				 
9443				; display hl 
9443 2a 9d e2			ld hl, (os_view_hl) 
9446 cd bd 95			call display_dump_at_hl 
9449			 
9449 18 74			jr .bpschk 
944b			 
944b fe 33		.bps3:  cp '3' 
944d 20 08			jr nz, .bps4 
944f			 
944f			        ; display de 
944f 2a 9b e2			ld hl, (os_view_de) 
9452 cd bd 95			call display_dump_at_hl 
9455			 
9455 18 68			jr .bpschk 
9457 fe 34		.bps4:  cp '4' 
9459 20 08			jr nz, .bps5 
945b			 
945b			        ; display bc 
945b 2a 99 e2			ld hl, (os_view_bc) 
945e cd bd 95			call display_dump_at_hl 
9461			 
9461 18 5c			jr .bpschk 
9463 fe 35		.bps5:  cp '5' 
9465 20 08		        jr nz, .bps7 
9467			 
9467				; display cur ptr 
9467 2a 3a ea			ld hl, (cli_ptr) 
946a cd bd 95			call display_dump_at_hl 
946d			 
946d 18 50			jr .bpschk 
946f fe 36		.bps7:  cp '6' 
9471 20 08			jr nz, .bps8b 
9473				 
9473				; display cur orig ptr 
9473 2a 38 ea			ld hl, (cli_origptr) 
9476 cd bd 95			call display_dump_at_hl 
9479 18 44			jr .bpschk 
947b fe 37		.bps8b:  cp '7' 
947d 20 08			jr nz, .bps9 
947f				 
947f				; display dsp 
947f 2a e8 e9			ld hl, (cli_data_sp) 
9482 cd bd 95			call display_dump_at_hl 
9485			 
9485 18 38			jr .bpschk 
9487 fe 39		.bps9:  cp '9' 
9489 20 05			jr nz, .bps8c 
948b				 
948b				; display SP 
948b			;	ld hl, sp 
948b cd bd 95			call display_dump_at_hl 
948e			 
948e 18 2f			jr .bpschk 
9490 fe 38		.bps8c:  cp '8' 
9492 20 08			jr nz, .bps8d 
9494				 
9494				; display rsp 
9494 2a ec e9			ld hl, (cli_ret_sp) 
9497 cd bd 95			call display_dump_at_hl 
949a			 
949a 18 23			jr .bpschk 
949c fe 23		.bps8d:  cp '#'     ; access monitor sub system 
949e 20 05			jr nz, .bps8 
94a0 cd b7 97			call monitor 
94a3			 
94a3 18 1a			jr .bpschk 
94a5 fe 30		.bps8:  cp '0' 
94a7 20 16			jr nz, .bpschk 
94a9			 
94a9 21 0a ed				ld hl, display_fb1 
94ac 22 c6 eb				ld (display_fb_active), hl 
94af cd e0 8a				call update_display 
94b2			 
94b2				;ld a, (os_view_af) 
94b2 2a 9d e2			ld hl, (os_view_hl) 
94b5 ed 5b 9b e2		ld de, (os_view_de) 
94b9 ed 4b 99 e2		ld bc, (os_view_bc) 
94bd f1				pop af 
94be c9				ret 
94bf			 
94bf			.bpschk:   
94bf cd 00 8a			call delay1s 
94c2 3e 9f		ld a,display_row_4 + display_cols - 1 
94c4 11 fb 99		        ld de, endprg 
94c7 cd d0 8a			call str_at_display 
94ca cd e0 8a			call update_display 
94cd cd de de			call cin_wait 
94d0			 
94d0 c3 22 94			jp .bps1 
94d3			 
94d3			 
94d3			display_reg_state: 
94d3			 
94d3				; to restore afterwards 
94d3			 
94d3 d5				push de 
94d4 c5				push bc 
94d5 e5				push hl 
94d6 f5				push af 
94d7			 
94d7				; for use in here 
94d7			 
94d7 c5				push bc 
94d8 d5				push de 
94d9 e5				push hl 
94da f5				push af 
94db			 
94db cd bd 8a			call clear_display 
94de			 
94de 11 93 95			ld de, .regstate 
94e1 3e 00			ld a, display_row_1 
94e3 cd d0 8a			call str_at_display 
94e6			 
94e6				; display debug step 
94e6			 
94e6			 
94e6 11 65 ee			ld de, debug_mark 
94e9 3e 25			ld a, display_row_1+display_cols-3 
94eb cd d0 8a			call str_at_display 
94ee			 
94ee				; display a 
94ee 11 af 95			ld de, .regstatea 
94f1 3e 28			ld a, display_row_2 
94f3 cd d0 8a			call str_at_display 
94f6			 
94f6 e1				pop hl 
94f7			;	ld h,0 
94f7			;	ld l, a 
94f7 3e 2b			ld a, display_row_2+3 
94f9 cd 79 93			call display_word_at 
94fc			 
94fc			 
94fc				; display hl 
94fc			 
94fc			 
94fc 11 a3 95			ld de, .regstatehl 
94ff 3e 32			ld a, display_row_2+10 
9501 cd d0 8a			call str_at_display 
9504			 
9504 e1				pop hl 
9505 3e 35			ld a, display_row_2+13 
9507 cd 79 93			call display_word_at 
950a			 
950a				 
950a				; display de 
950a			 
950a 11 a7 95			ld de, .regstatede 
950d 3e 50			ld a, display_row_3 
950f cd d0 8a			call str_at_display 
9512			 
9512 e1				pop hl 
9513			;	ld h,d 
9513			;	ld l, e 
9513 3e 53			ld a, display_row_3+3 
9515 cd 79 93			call display_word_at 
9518			 
9518			 
9518				; display bc 
9518			 
9518 11 ab 95			ld de, .regstatebc 
951b 3e 5a			ld a, display_row_3+10 
951d cd d0 8a			call str_at_display 
9520			 
9520 e1				pop hl 
9521			;	ld h,b 
9521			;	ld l, c 
9521 3e 5d			ld a, display_row_3+13 
9523 cd 79 93			call display_word_at 
9526			 
9526			 
9526				; display dsp 
9526			 
9526 11 b3 95			ld de, .regstatedsp 
9529 3e 78			ld a, display_row_4 
952b cd d0 8a			call str_at_display 
952e			 
952e				 
952e 2a e8 e9			ld hl,(cli_data_sp) 
9531 3e 7c			ld a, display_row_4+4 
9533 cd 79 93			call display_word_at 
9536			 
9536				; display rsp 
9536			 
9536 11 b8 95			ld de, .regstatersp 
9539 3e 82			ld a, display_row_4+10 
953b cd d0 8a			call str_at_display 
953e			 
953e				 
953e 2a ec e9			ld hl,(cli_ret_sp) 
9541 3e 86			ld a, display_row_4+14 
9543 cd 79 93			call display_word_at 
9546			 
9546 cd e0 8a			call update_display 
9549			 
9549			;	call delay1s 
9549			;	call delay1s 
9549			;	call delay1s 
9549			 
9549			 
9549			;	call next_page_prompt 
9549			 
9549				; restore  
9549			 
9549 f1				pop af 
954a e1				pop hl 
954b c1				pop bc 
954c d1				pop de 
954d c9				ret 
954e			 
954e .. 00		.wordincurptr:  db "Word in cur_ptr (5)",0 
9562 .. 00		.wordincuroptr:  db "Word in cur_optr (6)",0 
9577 .. 00		.ptrstate:	db "Ptr State",0 
9581 .. 00		.ptrcliptr:     db "cli_ptr",0 
9589 .. 00		.ptrclioptr:     db "cli_o_ptr",0 
9593 .. 00		.regstate:	db "Reg State (1/0)",0 
95a3 .. 00		.regstatehl:	db "HL:",0 
95a7 .. 00		.regstatede:	db "DE:",0 
95ab .. 00		.regstatebc:	db "BC:",0 
95af .. 00		.regstatea:	db "A :",0 
95b3 .. 00		.regstatedsp:	db "DSP:",0 
95b8 .. 00		.regstatersp:	db "RSP:",0 
95bd			 
95bd			display_dump_at_hl: 
95bd e5				push hl 
95be d5				push de 
95bf c5				push bc 
95c0 f5				push af 
95c1			 
95c1 22 de e5			ld (os_cur_ptr),hl	 
95c4 cd bd 8a			call clear_display 
95c7 cd 05 99			call dumpcont 
95ca			;	call delay1s 
95ca			;	call next_page_prompt 
95ca			 
95ca			 
95ca f1				pop af 
95cb c1				pop bc 
95cc d1				pop de 
95cd e1				pop hl 
95ce c9				ret 
95cf			 
95cf			;if ENABLE_BASIC 
95cf			;	include "nascombasic.asm" 
95cf			;	basic: 
95cf			;	include "forth/FORTH.ASM" 
95cf			;endif 
95cf			 
95cf			; eof 
95cf			 
95cf			 
# End of file firmware_diags.asm
95cf			  
95cf			include "firmware_prompts.asm"  
95cf			; Prompts  
95cf			 
95cf			; boot messages 
95cf			 
95cf .. 00		prom_bootmsg:	db "z80-homebrew OS v1.7",0 
95e4 .. 00		prom_bootmsg1:	db "by Kevin Groves",0 
95f4			 
95f4			 
95f4			; config menus 
95f4			 
95f4			;prom_c3: db "Add Dictionary To File",0 
95f4			 
95f4			if STARTUP_V1 
95f4 .. 00		prom_c2: db "Select Autoload File",0 
9609 .. 00		prom_c2a: db "Disable Autoload File", 0 
961f			endif 
961f			 
961f			if STARTUP_V2 
961f			prom_c2: db "Enable Autoload Files",0 
961f			prom_c2a: db "Disable Autoload Files", 0 
961f			 
961f			crs_s1: db "*ls-word", 0 
961f			crs_s2: db "*ed-word", 0 
961f			crs_s3: db "*Demo-Games", 0 
961f			crs_s4: db "*Utils", 0 
961f			crs_s5: db "*SPI-Util", 0 
961f			crs_s6: db "*Key-Constants", 0 
961f			crs_sound: db "*Sound-Util", 0 
961f			crs_hw: db "*Hello-World",0 
961f			 
961f			 
961f			 
961f			endif 
961f			;prom_c2b: db "Select Storage Bank",0 
961f .. 00		prom_c4: db "Settings",0 
9628 .. 00		prom_m4:   db "Debug & Breakpoints On/Off",0 
9643 .. 00		prom_m4b:   db "Monitor",0 
964b .. 00		prom_c1: db "Hardware Diags",0 
965a			 
965a			 
965a			if STARTUP_V2 
965a			prom_c9: db "Create Startup Files",0 
965a			endif 
965a			 
965a .. 00		prom_notav:    db "Feature not available",0 
9670 .. 00		prom_empty:    db "",0 
9671			 
9671			; eof 
9671			 
# End of file firmware_prompts.asm
9671			  
9671			  
9671			; eof  
9671			  
# End of file firmware.asm
9671			 
9671			;; below moved from firmware.asm for strange zero calc of baseusermem label. Scope issue on multipass???? 
9671			;if BASE_KEV  
9671			;baseram: equ 08000h 
9671			;endif 
9671			 
9671			;if BASE_SC114 
9671			;baseram:     equ    endofcode 
9671			;endif 
9671			 
9671			 
9671			; Add NMI support. A rst 066h when r15z goes neg on clock side of resist. needs to do retn when exiting 
9671			 
9671			; start system 
9671			 
9671			coldstart: 
9671				; set sp 
9671				; di/ei 
9671			 
9671 f3				di 
9672 31 00 f0			ld sp, tos 
9675 cd 28 de			call init_nmi 
9678			;	ei 
9678			 
9678				; init spinner 
9678 3e 00			ld a,0 
967a 32 c0 eb			ld (display_active), a 
967d			 
967d				; disable breakpoint by default 
967d			 
967d				;ld a,'*' 
967d			;	ld a,' ' 
967d			;	ld (os_view_disable),a 
967d			 
967d				; set break point vector as new break point on or off 
967d cd 00 94			call bp_off 
9680			 
9680				; init hardware 
9680			 
9680				; init keyboard and screen hardware 
9680			 
9680 cd 1f 80			call hardware_init 
9683			 
9683			 
9683 cd 00 8a			call delay1s 
9686 3e 58			ld a, display_row_3+8 
9688 11 03 80			ld de, buildtime 
968b cd d0 8a			call str_at_display 
968e cd e0 8a			call update_display 
9691			 
9691 cd 00 8a			call delay1s 
9694 cd 00 8a			call delay1s 
9697 cd 00 8a			call delay1s 
969a			 
969a				; detect if any keys are held down to enable breakpoints at start up 
969a			 
969a cd e4 de			call cin  
969d fe 00			cp 0 
969f 28 03			jr z, .nokeys 
96a1			 
96a1				;call hardware_diags 
96a1 cd 5e 92			call config 
96a4			 
96a4			;	ld de, .bpen 
96a4			;	ld a, display_row_4 
96a4			;	call str_at_display 
96a4			;	call update_display 
96a4			; 
96a4			;	ld a,0 
96a4			;	ld (os_view_disable),a 
96a4			; 
96a4			;.bpwait: 
96a4			;	call cin 
96a4			;	cp 0 
96a4			;	jr z, .bpwait 
96a4			;	jr .nokeys 
96a4			; 
96a4			; 
96a4			;.bpen:  db "Break points enabled!",0 
96a4			 
96a4			 
96a4			 
96a4			 
96a4			 
96a4			 
96a4			.nokeys: 
96a4			 
96a4			 
96a4				 
96a4			 
96a4			;jp  testkey 
96a4			 
96a4			;call storage_get_block_0 
96a4			; 
96a4			;ld hl, 0 
96a4			;ld de, store_page 
96a4			;call storage_read_block 
96a4			 
96a4				 
96a4			;ld hl, 10 
96a4			;ld de, store_page 
96a4			;call storage_read_block 
96a4			 
96a4			 
96a4			 
96a4			 
96a4			 
96a4			;stop:	nop 
96a4			;	jp stop 
96a4			 
96a4			 
96a4			 
96a4			main: 
96a4 cd bd 8a			call clear_display 
96a7 cd e0 8a			call update_display 
96aa			 
96aa			 
96aa			 
96aa			;	call testlcd 
96aa			 
96aa			 
96aa			 
96aa cd 46 9e			call forth_init 
96ad			 
96ad			 
96ad			warmstart: 
96ad cd 1c 9e			call forth_warmstart 
96b0			 
96b0				; run startup word load 
96b0			        ; TODO prevent this running at warmstart after crash  
96b0			 
96b0				if STARTUP_ENABLE 
96b0			 
96b0					if STARTUP_V1 
96b0			 
96b0						if STORAGE_SE 
96b0							call forth_autoload 
96b0						endif 
96b0 cd 78 dd					call forth_startup 
96b3					endif 
96b3			 
96b3					if STARTUP_V2 
96b3			 
96b3						if STORAGE_SE 
96b3							call forth_autoload 
96b3						else 
96b3							call forth_startup 
96b3						endif 
96b3			 
96b3			 
96b3					endif 
96b3			 
96b3				endif 
96b3			 
96b3			warmstart_afterauto: 
96b3			 
96b3				; show free memory after boot 
96b3 11 52 97			ld de, freeram 
96b6 3e 00			ld a, display_row_1 
96b8 cd d0 8a			call str_at_display 
96bb			 
96bb				; get current heap start after loading any uwords 
96bb			 
96bb				;ld de, (os_last_new_uword) 
96bb				;ex de, hl 
96bb			 
96bb			; Or use heap_size word???? 
96bb				;ld hl, heap_end 
96bb				;ld hl, heap_size 
96bb				;ld de, topusermem 
96bb				;ld de, heap_start 
96bb ed 5b fd de			ld de, (free_list )      
96bf 21 96 e2				ld hl, heap_end 
96c2 ed 52			sbc hl, de 
96c4				;push hl 
96c4				;ld a,h	         	 
96c4				;ld hl, os_word_scratch		; TODO do direct write to frame buffer instead and drop the str_at_display 
96c4				;call hexout 
96c4			   	;pop hl 
96c4			; 
96c4			;	ld a,l 
96c4			;	ld hl, os_word_scratch+2 
96c4			;	call hexout 
96c4			;	ld hl, os_word_scratch+4 
96c4			;	ld a, 0 
96c4			;	ld (hl),a 
96c4 eb				ex de, hl 
96c5 21 c0 e5			ld hl, os_word_scratch 
96c8 cd ff 8f			call uitoa_16 
96cb			 
96cb			 
96cb 11 c0 e5			ld de, os_word_scratch 
96ce 3e 0d			ld a, display_row_1 + 13 
96d0 cd d0 8a			call str_at_display 
96d3 cd e0 8a			call update_display 
96d6			 
96d6			 
96d6				;call demo 
96d6			 
96d6			 
96d6				; init scratch input area for cli commands 
96d6			 
96d6 21 e2 e5			ld hl, os_cli_cmd 
96d9 3e 00			ld a,0 
96db 77				ld (hl),a 
96dc 23				inc hl 
96dd 77				ld (hl),a 
96de			 
96de 3e 00			ld a,0 
96e0 32 e1 e6			ld (os_last_cmd),a	; current command in use to enable repeated use with an enter etc 
96e3			 
96e3 32 de e5			ld (os_cur_ptr),a	; ptr to whatever is needed for this command 
96e6 32 df e5			ld (os_cur_ptr+1),a	 
96e9			 
96e9 32 c0 e5			ld (os_word_scratch),a	; byte or word being used in parsing for this command 
96ec 32 c1 e5			ld (os_word_scratch+1),a	 
96ef				 
96ef			 
96ef				;ld a, kLCD_Line2        ; TODO prompt using direct screen line address. Correct this to frame buffer 
96ef 21 e2 e5			ld hl, os_cli_cmd 
96f2			 
96f2 3e 00			ld a, 0		 ; init cli input 
96f4 77				ld (hl), a 
96f5 3e 28			ld a, display_row_2        ; TODO prompt using direct screen line address. Correct this to frame buffer 
96f7			cli: 
96f7				; show cli prompt 
96f7				;push af 
96f7				;ld a, 0 
96f7				;ld de, prompt 
96f7				;call str_at_display 
96f7			 
96f7				;call update_display 
96f7				;pop af 
96f7				;inc a 
96f7				;ld a, kLCD_Line4+1	 ; TODO using direct screen line writes. Correct this to frame buffer 
96f7			 
96f7			.lastrecall: 
96f7			 
96f7 0e 00			ld c, 0 
96f9 16 ff			ld d, 255    ; TODO fix input_str to actually take note of max string input length 
96fb 1e 28			ld e, 40 
96fd			 
96fd 21 e2 e5			ld hl, os_cli_cmd 
9700			 
9700				STACKFRAME OFF $fefe $9f9f 
9700				if DEBUG_STACK_IMB 
9700					if OFF 
9700						exx 
9700						ld de, $fefe 
9700						ld a, d 
9700						ld hl, curframe 
9700						call hexout 
9700						ld a, e 
9700						ld hl, curframe+2 
9700						call hexout 
9700						ld hl, $fefe 
9700						push hl 
9700						ld hl, $9f9f 
9700						push hl 
9700						exx 
9700					endif 
9700				endif 
9700			endm 
# End of macro STACKFRAME
9700			 
9700 cd 17 8d			call input_str 
9703			 
9703				STACKFRAMECHK OFF $fefe $9f9f 
9703				if DEBUG_STACK_IMB 
9703					if OFF 
9703						exx 
9703						ld hl, $9f9f 
9703						pop de   ; $9f9f 
9703						call cmp16 
9703						jr nz, .spnosame 
9703						ld hl, $fefe 
9703						pop de   ; $fefe 
9703						call cmp16 
9703						jr z, .spfrsame 
9703						.spnosame: call showsperror 
9703						.spfrsame: nop 
9703						exx 
9703					endif 
9703				endif 
9703			endm 
# End of macro STACKFRAMECHK
9703			 
9703			 
9703				; check to see if last line recall has been requested 
9703			 
9703			if EDIT_V2 
9703 fe 05			cp KEY_UP 
9705 20 0f			jr nz, .noexecline 
9707			 
9707 11 e2 e5			ld de, os_cli_cmd 
970a 21 e1 e6			ld hl, os_last_cmd 
970d 01 ff 00			ld bc, 255 
9710 ed b0			ldir 
9712 3e 00			ld a, 0 
9714 18 e1			jr .lastrecall 
9716			endif 
9716			 
9716			.noexecline: 
9716				; no so exec the line		 
9716			 
9716				; copy input to last command 
9716			 
9716 21 e2 e5			ld hl, os_cli_cmd 
9719 11 e1 e6			ld de, os_last_cmd 
971c 01 ff 00			ld bc, 255 
971f ed b0			ldir 
9721			 
9721				; wipe current buffer 
9721			 
9721			;	ld a, 0 
9721			;	ld hl, os_cli_cmd 
9721			;	ld de, os_cli_cmd+1 
9721			;	ld bc, 254 
9721			;	ldir 
9721				; TODO ldir is not working strcpy may not get all the terms on the input line???? 
9721			;	call strcpy 
9721			;	ld a, 0 
9721			;	ld (hl), a 
9721			;	inc hl 
9721			;	ld (hl), a 
9721			;	inc hl 
9721			;	ld (hl), a 
9721			 
9721				; switch frame buffer to program  
9721			 
9721 21 0a ed				ld hl, display_fb1 
9724 22 c6 eb				ld (display_fb_active), hl 
9727			 
9727			;	nop 
9727				STACKFRAME ON $fbfe $8f9f 
9727				if DEBUG_STACK_IMB 
9727					if ON 
9727						exx 
9727						ld de, $fbfe 
9727						ld a, d 
9727						ld hl, curframe 
9727						call hexout 
9727						ld a, e 
9727						ld hl, curframe+2 
9727						call hexout 
9727						ld hl, $fbfe 
9727						push hl 
9727						ld hl, $8f9f 
9727						push hl 
9727						exx 
9727					endif 
9727				endif 
9727			endm 
# End of macro STACKFRAME
9727				; first time into the parser so pass over the current scratch pad 
9727 21 e2 e5			ld hl,os_cli_cmd 
972a				; tokenise the entered statement(s) in HL 
972a cd c4 9e			call forthparse 
972d			        ; exec forth statements in top of return stack 
972d cd 04 9f			call forthexec 
9730				;call forthexec_cleanup 
9730			;	call parsenext 
9730			 
9730				STACKFRAMECHK ON $fbfe $8f9f 
9730				if DEBUG_STACK_IMB 
9730					if ON 
9730						exx 
9730						ld hl, $8f9f 
9730						pop de   ; $8f9f 
9730						call cmp16 
9730						jr nz, .spnosame 
9730						ld hl, $fbfe 
9730						pop de   ; $fbfe 
9730						call cmp16 
9730						jr z, .spfrsame 
9730						.spnosame: call showsperror 
9730						.spfrsame: nop 
9730						exx 
9730					endif 
9730				endif 
9730			endm 
# End of macro STACKFRAMECHK
9730				; TODO on return from forth parsing should there be a prompt to return to system? but already in system. 
9730			 
9730 3e 78			ld a, display_row_4 
9732 11 63 97			ld de, endprog 
9735			 
9735 cd e0 8a			call update_display		 
9738			 
9738 cd fd 99			call next_page_prompt 
973b			 
973b				; switch frame buffer to cli 
973b			 
973b 21 ab ed				ld hl, display_fb0 
973e 22 c6 eb				ld (display_fb_active), hl 
9741			 
9741			 
9741 cd bd 8a		        call clear_display 
9744 cd e0 8a			call update_display		 
9747			 
9747 21 e2 e5			ld hl, os_cli_cmd 
974a			 
974a 3e 00			ld a, 0		 ; init cli input 
974c 77				ld (hl), a 
974d			 
974d				; TODO f_cursor_ptr should inc row (scroll if required) and set start of row for next input  
974d			 
974d				; now on last line 
974d			 
974d				; TODO scroll screen up 
974d			 
974d				; TODO instead just clear screen and place at top of screen 
974d			 
974d			;	ld a, 0 
974d			;	ld (f_cursor_ptr),a 
974d			 
974d				;call clear_display 
974d				;call update_display 
974d			 
974d				;ld a, kLCD_Line1        ; TODO prompt using direct screen line address. Correct this to frame buffer 
974d 3e 00			ld a, display_row_1        ; TODO prompt using direct screen line address. Correct this to frame buffer 
974f c3 f7 96			jp cli 
9752			 
9752 .. 00		freeram: db "Free bytes: ",0 
975f ..			asc: db "1A2F" 
9763 .. 00		endprog: db "End prog...",0 
976f			 
976f			testenter2:   
976f 21 ed e2			ld hl,scratch+50 
9772 22 de e5			ld (os_cur_ptr),hl 
9775 c3 f7 96			jp cli 
9778			 
9778			testenter:  
9778			 
9778 21 5f 97			ld hl,asc 
977b			;	ld a,(hl) 
977b			;	call nibble2val 
977b cd 49 8f			call get_byte 
977e			 
977e			 
977e			;	ld a,(hl) 
977e			;	call atohex 
977e			 
977e			;	call fourehexhl 
977e 32 ed e2			ld (scratch+50),a 
9781			 
9781			 
9781			 
9781 21 61 97			ld hl,asc+2 
9784			;	ld a, (hl) 
9784			;	call nibble2val 
9784 cd 49 8f			call get_byte 
9787			 
9787			;	call fourehexhl 
9787 32 ef e2			ld (scratch+52),a 
978a				 
978a 21 ed e2			ld hl,scratch+50 
978d 22 de e5			ld (os_cur_ptr),hl 
9790 c3 f7 96			jp cli 
9793			 
9793			enter:	 
9793 3a bf e2			ld a,(scratch+4) 
9796 fe 00			cp 0 
9798 28 0c			jr z, .entercont 
979a				; no, not a null term line so has an address to work out.... 
979a			 
979a 21 bd e2			ld hl,scratch+2 
979d cd a9 8f			call get_word_hl 
97a0			 
97a0 22 de e5			ld (os_cur_ptr),hl	 
97a3 c3 f7 96			jp cli 
97a6			 
97a6			 
97a6			.entercont:  
97a6			 
97a6 21 bd e2			ld hl, scratch+2 
97a9 cd 49 8f			call get_byte 
97ac			 
97ac 2a de e5		   	ld hl,(os_cur_ptr) 
97af 77					ld (hl),a 
97b0 23					inc hl 
97b1 22 de e5				ld (os_cur_ptr),hl 
97b4				 
97b4			; get byte  
97b4			 
97b4			 
97b4 c3 f7 96			jp cli 
97b7			 
97b7			 
97b7			; basic monitor support 
97b7			 
97b7			monitor: 
97b7				;  
97b7 cd bd 8a			call clear_display 
97ba 3e 00			ld a, 0 
97bc 11 10 98			ld de, .monprompt 
97bf cd d0 8a			call str_at_display 
97c2 cd e0 8a			call update_display 
97c5			 
97c5				; get a monitor command 
97c5			 
97c5 0e 00			ld c, 0     ; entry at top left 
97c7 16 64			ld d, 100   ; max buffer size 
97c9 1e 0f			ld e, 15    ; input scroll area 
97cb 3e 00			ld a, 0     ; init string 
97cd 21 b9 e4			ld hl, os_input 
97d0 77				ld (hl), a 
97d1 23				inc hl 
97d2 77				ld (hl), a 
97d3 21 b9 e4			ld hl, os_input 
97d6 3e 01			ld a, 1     ; init string 
97d8 cd 17 8d			call input_str 
97db			 
97db cd bd 8a		        call clear_display 
97de cd e0 8a			call update_display		 
97e1			 
97e1 3a b9 e4			ld a, (os_input) 
97e4 cd 47 90			call toUpper 
97e7 fe 48		        cp 'H' 
97e9 ca 84 98		        jp z, .monhelp 
97ec fe 44			cp 'D'		; dump 
97ee ca b7 98			jp z, .mondump	 
97f1 fe 43			cp 'C'		; dump 
97f3 ca d1 98			jp z, .moncdump	 
97f6 fe 4d			cp 'M'		; dump 
97f8 ca 12 98			jp z, .moneditstart 
97fb fe 55			cp 'U'		; dump 
97fd ca 1e 98			jp z, .monedit	 
9800 fe 47			cp 'G'		; dump 
9802 ca ad 98			jp z, .monjump 
9805 fe 42			cp 'B'		; forth breakpoint 
9807 cc 06 94			call z, break_point_state 
980a fe 51			cp 'Q'		; dump 
980c c8				ret z	 
980d			 
980d			 
980d				; TODO "S" to access symbol by name and not need the address 
980d				; TODO "F" to find a string in memory 
980d			 
980d c3 b7 97			jp monitor 
9810			 
9810 .. 00		.monprompt: db ">", 0 
9812			 
9812			.moneditstart: 
9812				; get starting address 
9812			 
9812 21 bb e4			ld hl,os_input+2 
9815 cd a9 8f			call get_word_hl 
9818			 
9818 22 de e5			ld (os_cur_ptr),hl	 
981b			 
981b c3 b7 97			jp monitor 
981e			 
981e			.monedit: 
981e				; get byte to load 
981e			 
981e 21 bb e4			ld hl,os_input+2 
9821 cd 49 8f			call get_byte 
9824			 
9824				; get address to update 
9824 2a de e5			ld hl, (os_cur_ptr) 
9827			 
9827				; update byte 
9827			 
9827 77				ld (hl), a 
9828			 
9828				; move to next address and save it 
9828			 
9828 23				inc hl 
9829 22 de e5			ld (os_cur_ptr),hl	 
982c			 
982c c3 b7 97			jp monitor 
982f			 
982f			 
982f .. 00		.monhelptext1: 	db "D-Dump, C-Cont Dump",0 
9843 .. 00		.monhelptext2:  db "M-Edit Start, U-Update Byte",0 
985f .. 00		.monhelptext3:  db "G-Call address, B-Breakpoints",0 
987d .. 00		.monhelptext4:  db "Q-Quit",0 
9884			        
9884			.monhelp: 
9884 3e 00			ld a, display_row_1 
9886 11 2f 98		        ld de, .monhelptext1 
9889			 
9889 cd d0 8a			call str_at_display 
988c 3e 28			ld a, display_row_2 
988e 11 43 98		        ld de, .monhelptext2 
9891					 
9891 cd d0 8a			call str_at_display 
9894 3e 50			ld a, display_row_3 
9896 11 5f 98		        ld de, .monhelptext3 
9899					 
9899 cd d0 8a			call str_at_display 
989c 3e 78			ld a, display_row_4 
989e 11 7d 98		        ld de, .monhelptext4 
98a1 cd d0 8a			call str_at_display 
98a4			 
98a4 cd e0 8a			call update_display		 
98a7			 
98a7 cd fd 99			call next_page_prompt 
98aa c3 b7 97			jp monitor 
98ad			 
98ad			.monjump:    
98ad 21 bb e4			ld hl,os_input+2 
98b0 cd a9 8f			call get_word_hl 
98b3			 
98b3 e9				jp (hl) 
98b4 c3 b7 97			jp monitor 
98b7			 
98b7			.mondump:    
98b7 21 bb e4			ld hl,os_input+2 
98ba cd a9 8f			call get_word_hl 
98bd			 
98bd 22 de e5			ld (os_cur_ptr),hl	 
98c0 cd 05 99			call dumpcont 
98c3 3e 78			ld a, display_row_4 
98c5 11 63 97			ld de, endprog 
98c8			 
98c8 cd e0 8a			call update_display		 
98cb			 
98cb cd fd 99			call next_page_prompt 
98ce c3 b7 97			jp monitor 
98d1			.moncdump: 
98d1 cd 05 99			call dumpcont 
98d4 3e 78			ld a, display_row_4 
98d6 11 63 97			ld de, endprog 
98d9			 
98d9 cd e0 8a			call update_display		 
98dc			 
98dc cd fd 99			call next_page_prompt 
98df c3 b7 97			jp monitor 
98e2			 
98e2			 
98e2			; TODO symbol access  
98e2			 
98e2			.symbols:     ;; A list of symbols that can be called up  
98e2 ab ed			dw display_fb0 
98e4 .. 00			db "fb0",0  
98e8 74 ea		     	dw store_page 
98ea .. 00			db "store_page",0 
98f5			 
98f5			 
98f5			dump:	; see if we are cotinuing on from the last command by not uncluding any address 
98f5			 
98f5 3a bc e2			ld a,(scratch+1) 
98f8 fe 00			cp 0 
98fa 28 09			jr z, dumpcont 
98fc			 
98fc				; no, not a null term line so has an address to work out.... 
98fc			 
98fc 21 bd e2			ld hl,scratch+2 
98ff cd a9 8f			call get_word_hl 
9902			 
9902 22 de e5			ld (os_cur_ptr),hl	 
9905			 
9905			 
9905			 
9905			dumpcont: 
9905			 
9905				; dump bytes at ptr 
9905			 
9905			 
9905 3e 00			ld a, display_row_1 
9907 2a c6 eb			ld hl, (display_fb_active) 
990a cd ea 8c			call addatohl 
990d cd 35 99			call .dumpbyterow 
9910			 
9910 3e 28			ld a, display_row_2 
9912 2a c6 eb			ld hl, (display_fb_active) 
9915 cd ea 8c			call addatohl 
9918 cd 35 99			call .dumpbyterow 
991b			 
991b			 
991b 3e 50			ld a, display_row_3 
991d 2a c6 eb			ld hl, (display_fb_active) 
9920 cd ea 8c			call addatohl 
9923 cd 35 99			call .dumpbyterow 
9926			 
9926 3e 78			ld a, display_row_4 
9928 2a c6 eb			ld hl, (display_fb_active) 
992b cd ea 8c			call addatohl 
992e cd 35 99			call .dumpbyterow 
9931			 
9931 cd e0 8a			call update_display 
9934			;		jp cli 
9934 c9				ret 
9935			 
9935			.dumpbyterow: 
9935			 
9935				;push af 
9935			 
9935 e5				push hl 
9936			 
9936				; calc where to poke the ascii 
9936			if display_cols == 20 
9936				ld a, 16 
9936			else 
9936 3e 1f			ld a, 31 
9938			endif 
9938			 
9938 cd ea 8c			call addatohl 
993b 22 c0 e5			ld (os_word_scratch),hl  		; save pos for later 
993e			 
993e			 
993e			; display decoding address 
993e 2a de e5		   	ld hl,(os_cur_ptr) 
9941			 
9941 7c				ld a,h 
9942 e1				pop hl 
9943 e5				push hl 
9944			;	ld hl, os_word_scratch		; TODO do direct write to frame buffer instead and drop the str_at_display 
9944 cd f3 8e			call hexout 
9947 2a de e5		   	ld hl,(os_cur_ptr) 
994a			 
994a 7d				ld a,l 
994b e1				pop hl 
994c 23				inc hl 
994d 23				inc hl 
994e e5				push hl 
994f			;	ld hl, os_word_scratch+2 
994f cd f3 8e			call hexout 
9952 e1				pop hl 
9953 23				inc hl 
9954 23				inc hl 
9955				;ld hl, os_word_scratch+4 
9955 3e 3a			ld a, ':' 
9957 77				ld (hl),a 
9958 23				inc hl 
9959				;ld a, 0 
9959				;ld (hl),a 
9959				;ld de, os_word_scratch 
9959				;pop af 
9959				;push af 
9959			;		ld a, display_row_2 
9959			;		call str_at_display 
9959			;		call update_display 
9959			 
9959			 
9959			;pop af 
9959			;	add 5 
9959			 
9959			if display_cols == 20 
9959				ld b, 4 
9959			else 
9959 06 08			ld b, 8 
995b			endif	 
995b			 
995b			.dumpbyte: 
995b c5				push bc 
995c e5				push hl 
995d			 
995d			 
995d 2a de e5		   	ld hl,(os_cur_ptr) 
9960 7e					ld a,(hl) 
9961			 
9961					; poke the ascii to display 
9961 2a c0 e5				ld hl,(os_word_scratch) 
9964 77					ld (hl),a 
9965 23					inc hl 
9966 22 c0 e5				ld (os_word_scratch),hl 
9969			 
9969					 
9969			 
9969			 
9969 e1					pop hl 
996a e5					push hl 
996b			 
996b cd f3 8e				call hexout 
996e			 
996e					 
996e 2a de e5		   	ld hl,(os_cur_ptr) 
9971 23				inc hl 
9972 22 de e5		   	ld (os_cur_ptr),hl 
9975			 
9975 e1					pop hl 
9976 23					inc hl 
9977 23					inc hl 
9978 23					inc hl 
9979			 
9979			 
9979			 
9979					;ld a,0 
9979					;ld (os_word_scratch+2),a 
9979					;pop af 
9979					;push af 
9979			 
9979					;ld de, os_word_scratch 
9979					;call str_at_display 
9979			;		call update_display 
9979			;		pop af 
9979 c1					pop bc 
997a c6 03				add 3 
997c 10 dd			djnz .dumpbyte 
997e			 
997e				 
997e			 
997e c9				ret 
997f			 
997f			jump:	 
997f			 
997f 21 bd e2			ld hl,scratch+2 
9982 cd a9 8f			call get_word_hl 
9985				;ld hl,(scratch+2) 
9985				;call fourehexhl 
9985			 
9985 22 de e5			ld (os_cur_ptr),hl	 
9988			 
9988 e9				jp (hl) 
9989			 
9989			 
9989			 
9989			; TODO implement a basic monitor mode to start with 
9989			 
9989			 
9989			 
9989			 
9989			 
9989			 
9989			 
9989			 
9989			 
9989			; testing and demo code during development 
9989			 
9989			 
9989 .. 00		str1: db "Enter some text...",0 
999c .. 00		clear: db "                    ",0 
99b1			 
99b1			demo: 
99b1			 
99b1			 
99b1			 
99b1			;	call update_display 
99b1			 
99b1				; init scratch input area for testing 
99b1 21 bb e2			ld hl, scratch	 
99b4 3e 00			ld a,0 
99b6 77				ld (hl),a 
99b7			 
99b7			 
99b7 3e 28		            LD   A, display_row_2 
99b9			;            CALL fLCD_Pos       ;Position cursor to location in A 
99b9 11 89 99		            LD   DE, str1 
99bc cd d0 8a			call str_at_display 
99bf			 
99bf			;            CALL fLCD_Str       ;Display string pointed to by DE 
99bf			cloop:	 
99bf 3e 50		            LD   A, display_row_3 
99c1			;            CALL fLCD_Pos       ;Position cursor to location in A 
99c1 11 9c 99		            LD   DE, clear 
99c4			 ;           CALL fLCD_Str       ;Display string pointed to by DE 
99c4 cd d0 8a				call str_at_display 
99c7 3e 78			ld a, display_row_4 
99c9 11 f9 99			ld de, prompt 
99cc			 
99cc cd d0 8a				call str_at_display 
99cf cd e0 8a			call update_display 
99d2			 
99d2 3e 79			ld a, kLCD_Line4+1	 ; TODO using direct screen line writes. Correct this to frame buffer 
99d4 16 0a			ld d, 10 
99d6 21 bb e2			ld hl, scratch	 
99d9 cd 17 8d			call input_str 
99dc			 
99dc			;	call clear_display 
99dc			;'	call update_display 
99dc			 
99dc 3e 00		            LD   A, display_row_1 
99de			;            CALL fLCD_Pos       ;Position cursor to location in A 
99de 11 9c 99		            LD   DE, clear 
99e1 cd d0 8a				call str_at_display 
99e4			;            CALL fLCD_Str       ;Display string pointed to by DE 
99e4 3e 00		            LD   A, display_row_1 
99e6			;            CALL fLCD_Pos       ;Position cursor to location in A 
99e6 11 bb e2		            LD   DE, scratch 
99e9			;            CALL fLCD_Str       ;Display string pointed to by DE 
99e9 cd d0 8a				call str_at_display 
99ec cd e0 8a			call update_display 
99ef			 
99ef 3e 00				ld a,0 
99f1 21 bb e2			ld hl, scratch 
99f4 77				ld (hl),a 
99f5			 
99f5 00				nop 
99f6 c3 bf 99			jp cloop 
99f9			 
99f9			 
99f9			 
99f9			; OS Prompt 
99f9			 
99f9 .. 00		prompt: db ">",0 
99fb .. 00		endprg: db "?",0 
99fd			 
99fd			 
99fd			; handy next page prompt 
99fd			next_page_prompt: 
99fd e5				push hl 
99fe d5				push de 
99ff f5				push af 
9a00 c5				push bc 
9a01			 
9a01 3e 9f			ld a,display_row_4 + display_cols - 1 
9a03 11 fb 99		        ld de, endprg 
9a06 cd d0 8a			call str_at_display 
9a09 cd e0 8a			call update_display 
9a0c cd de de			call cin_wait 
9a0f c1				pop bc 
9a10 f1				pop af 
9a11 d1				pop de 
9a12 e1				pop hl 
9a13			 
9a13			 
9a13 c9				ret 
9a14			 
9a14			 
9a14			; forth parser 
9a14			 
9a14			; My forth kernel 
9a14			include "forth_kernel.asm" 
9a14			; 
9a14			; kernel to the forth OS 
9a14			 
9a14			DS_TYPE_STR: equ 1     ; string type 
9a14			DS_TYPE_INUM: equ 2     ; $ 16 bit unsigned int usually a hex address 
9a14			DS_TYPE_SNUM: equ 3     ; $ 16 bit signed int  
9a14			;DS_TYPE_FNUM: equ 3      ; 24/32 bit floating point  do string conversion instead of a new type 
9a14			 
9a14			FORTH_PARSEV1: equ 0 
9a14			FORTH_PARSEV2: equ 0 
9a14			FORTH_PARSEV3: equ 0 
9a14			FORTH_PARSEV4: equ 0 
9a14			FORTH_PARSEV5: equ 1 
9a14			 
9a14			;if FORTH_PARSEV5 
9a14			;	FORTH_END_BUFFER: equ 0 
9a14			;else 
9a14			FORTH_END_BUFFER: equ 127 
9a14			;endif 
9a14			 
9a14			FORTH_TRUE: equ 1 
9a14			FORTH_FALSE: equ 0 
9a14			 
9a14			if FORTH_PARSEV4 
9a14			include "forth_stackops.asm" 
9a14			endif 
9a14			 
9a14			if FORTH_PARSEV5 
9a14			include "forth_stackopsv5.asm" 
9a14			 
9a14			; Stack operations for v5 parser on wards 
9a14			; * DATA stack 
9a14			; * LOOP stack 
9a14			; * RETURN stack 
9a14			 
9a14			 
9a14			 
9a14			FORTH_CHK_DSP_UNDER: macro 
9a14				push hl 
9a14				push de 
9a14				ld hl,(cli_data_sp) 
9a14				ld de, cli_data_stack 
9a14				call cmp16 
9a14				jp c, fault_dsp_under 
9a14				pop de 
9a14				pop hl 
9a14				endm 
9a14			 
9a14			 
9a14			FORTH_CHK_RSP_UNDER: macro 
9a14				push hl 
9a14				push de 
9a14				ld hl,(cli_ret_sp) 
9a14				ld de, cli_ret_stack 
9a14				call cmp16 
9a14				jp c, fault_rsp_under 
9a14				pop de 
9a14				pop hl 
9a14				endm 
9a14			 
9a14			FORTH_CHK_LOOP_UNDER: macro 
9a14				push hl 
9a14				push de 
9a14				ld hl,(cli_loop_sp) 
9a14				ld de, cli_loop_stack 
9a14				call cmp16 
9a14				jp c, fault_loop_under 
9a14				pop de 
9a14				pop hl 
9a14				endm 
9a14			 
9a14			FORTH_ERR_TOS_NOTSTR: macro 
9a14				; TOSO might need more for checks when used 
9a14				push af 
9a14				ld a,(hl) 
9a14				cp DS_TYPE_STR 
9a14				jp nz, type_faultn   
9a14				pop af 
9a14				endm 
9a14			 
9a14			FORTH_ERR_TOS_NOTNUM: macro 
9a14				push af 
9a14				ld a,(hl) 
9a14				cp DS_TYPE_INUM 
9a14				jp nz, type_faultn   
9a14				pop af 
9a14				endm 
9a14			 
9a14			 
9a14			; increase data stack pointer and save hl to it 
9a14				 
9a14			FORTH_DSP_NEXT: macro 
9a14				call macro_forth_dsp_next 
9a14				endm 
9a14			 
9a14			 
9a14			macro_forth_dsp_next: 
9a14				if DEBUG_FORTH_STACK_GUARD 
9a14 cd 50 db				call check_stacks 
9a17				endif 
9a17 e5				push hl 
9a18 d5				push de 
9a19 eb				ex de,hl 
9a1a 2a e8 e9			ld hl,(cli_data_sp) 
9a1d 23				inc hl 
9a1e 23				inc hl 
9a1f			 
9a1f			; PARSEV5 
9a1f 23				inc hl 
9a20 22 e8 e9			ld (cli_data_sp),hl 
9a23 73				ld (hl), e 
9a24 23				inc hl 
9a25 72				ld (hl), d 
9a26 d1				pop de 
9a27 e1				pop hl 
9a28				if DEBUG_FORTH_STACK_GUARD 
9a28 cd 50 db				call check_stacks 
9a2b				endif 
9a2b c9				ret 
9a2c			 
9a2c			 
9a2c			; increase ret stack pointer and save hl to it 
9a2c				 
9a2c			FORTH_RSP_NEXT: macro 
9a2c				call macro_forth_rsp_next 
9a2c				endm 
9a2c			 
9a2c			macro_forth_rsp_next: 
9a2c				if DEBUG_FORTH_STACK_GUARD 
9a2c cd 50 db				call check_stacks 
9a2f				endif 
9a2f e5				push hl 
9a30 d5				push de 
9a31 eb				ex de,hl 
9a32 2a ec e9			ld hl,(cli_ret_sp) 
9a35 23				inc hl 
9a36 23				inc hl 
9a37 22 ec e9			ld (cli_ret_sp),hl 
9a3a 73				ld (hl), e 
9a3b 23				inc hl 
9a3c 72				ld (hl), d 
9a3d d1				pop de 
9a3e e1				pop hl 
9a3f				if DEBUG_FORTH_STACK_GUARD 
9a3f cd 50 db				call check_stacks 
9a42				endif 
9a42 c9				ret 
9a43			 
9a43			; get current ret stack pointer and save to hl  
9a43				 
9a43			FORTH_RSP_TOS: macro 
9a43				call macro_forth_rsp_tos 
9a43				endm 
9a43			 
9a43			macro_forth_rsp_tos: 
9a43				;push de 
9a43 2a ec e9			ld hl,(cli_ret_sp) 
9a46 cd 7e 9a			call loadhlptrtohl 
9a49				;ld e, (hl) 
9a49				;inc hl 
9a49				;ld d, (hl) 
9a49				;ex de, hl 
9a49					if DEBUG_FORTH_WORDS 
9a49			;			DMARK "RST" 
9a49						CALLMONITOR 
9a49 cd 6f ee			call debug_vector  
9a4c				endm  
# End of macro CALLMONITOR
9a4c					endif 
9a4c				;pop de 
9a4c c9				ret 
9a4d			 
9a4d			; pop ret stack pointer 
9a4d				 
9a4d			FORTH_RSP_POP: macro 
9a4d				call macro_forth_rsp_pop 
9a4d				endm 
9a4d			 
9a4d			 
9a4d			macro_forth_rsp_pop: 
9a4d				if DEBUG_FORTH_STACK_GUARD 
9a4d			;		DMARK "RPP" 
9a4d cd 50 db				call check_stacks 
9a50					FORTH_CHK_RSP_UNDER 
9a50 e5				push hl 
9a51 d5				push de 
9a52 2a ec e9			ld hl,(cli_ret_sp) 
9a55 11 a6 e9			ld de, cli_ret_stack 
9a58 cd 08 8d			call cmp16 
9a5b da 67 dc			jp c, fault_rsp_under 
9a5e d1				pop de 
9a5f e1				pop hl 
9a60				endm 
# End of macro FORTH_CHK_RSP_UNDER
9a60				endif 
9a60 e5				push hl 
9a61 2a ec e9			ld hl,(cli_ret_sp) 
9a64			 
9a64			 
9a64				if FORTH_ENABLE_FREE 
9a64			 
9a64					; get pointer 
9a64			 
9a64					push de 
9a64					push hl 
9a64			 
9a64					ld e, (hl) 
9a64					inc hl 
9a64					ld d, (hl) 
9a64			 
9a64					ex de, hl 
9a64					call free 
9a64			 
9a64					pop hl 
9a64					pop de 
9a64			 
9a64			 
9a64				endif 
9a64			 
9a64			 
9a64 2b				dec hl 
9a65 2b				dec hl 
9a66 22 ec e9			ld (cli_ret_sp), hl 
9a69				; do stack underflow checks 
9a69 e1				pop hl 
9a6a				if DEBUG_FORTH_STACK_GUARD 
9a6a cd 50 db				call check_stacks 
9a6d					FORTH_CHK_RSP_UNDER 
9a6d e5				push hl 
9a6e d5				push de 
9a6f 2a ec e9			ld hl,(cli_ret_sp) 
9a72 11 a6 e9			ld de, cli_ret_stack 
9a75 cd 08 8d			call cmp16 
9a78 da 67 dc			jp c, fault_rsp_under 
9a7b d1				pop de 
9a7c e1				pop hl 
9a7d				endm 
# End of macro FORTH_CHK_RSP_UNDER
9a7d				endif 
9a7d c9				ret 
9a7e			 
9a7e			 
9a7e			 
9a7e			; routine to load word pointed to by hl into hl 
9a7e			 
9a7e			loadhlptrtohl: 
9a7e			 
9a7e d5				push de 
9a7f 5e				ld e, (hl) 
9a80 23				inc hl 
9a81 56				ld d, (hl) 
9a82 eb				ex de, hl 
9a83 d1				pop de 
9a84			 
9a84 c9				ret 
9a85			 
9a85			 
9a85			 
9a85			 
9a85			 
9a85			; push a number held in HL onto the data stack 
9a85			; entry point for pushing a value when already in hl used in function above 
9a85			 
9a85			forth_push_numhl: 
9a85			 
9a85 e5				push hl    ; save value to push 
9a86			 
9a86			if DEBUG_FORTH_PUSH 
9a86				; see if disabled 
9a86			 
9a86			 
9a86 f5				push af 
9a87 3a 6f ee			ld a,(debug_vector) 
9a8a fe c9			cp $c9   ; ret 
9a8c			;	ld a, (os_view_disable) 
9a8c			;	cp '*' 
9a8c 28 34			jr z, .pskip2 
9a8e e5				push hl 
9a8f e5			push hl 
9a90 cd bd 8a			call clear_display 
9a93 e1			pop hl 
9a94 7c				ld a,h 
9a95 21 c0 e5			ld hl, os_word_scratch 
9a98 cd f3 8e			call hexout 
9a9b e1				pop hl 
9a9c 7d				ld a,l 
9a9d 21 c2 e5			ld hl, os_word_scratch+2 
9aa0 cd f3 8e			call hexout 
9aa3			 
9aa3 21 c4 e5			ld hl, os_word_scratch+4 
9aa6 3e 00			ld a,0 
9aa8 77				ld (hl),a 
9aa9 11 c0 e5			ld de,os_word_scratch 
9aac 3e 28				ld a, display_row_2 
9aae cd d0 8a				call str_at_display 
9ab1 11 4b cd			ld de, .push_num 
9ab4 3e 00			ld a, display_row_1 
9ab6			 
9ab6 cd d0 8a				call str_at_display 
9ab9			 
9ab9			 
9ab9 cd e0 8a			call update_display 
9abc cd 00 8a			call delay1s 
9abf cd 00 8a			call delay1s 
9ac2			.pskip2:  
9ac2			 
9ac2 f1				pop af 
9ac3			endif	 
9ac3			 
9ac3			 
9ac3				FORTH_DSP_NEXT 
9ac3 cd 14 9a			call macro_forth_dsp_next 
9ac6				endm 
# End of macro FORTH_DSP_NEXT
9ac6			 
9ac6 2a e8 e9			ld hl, (cli_data_sp) 
9ac9			 
9ac9				; save item type 
9ac9 3e 02			ld a,  DS_TYPE_INUM 
9acb 77				ld (hl), a 
9acc 23				inc hl 
9acd			 
9acd				; get word off stack 
9acd d1				pop de 
9ace 7b				ld a,e 
9acf 77				ld (hl), a 
9ad0 23				inc hl 
9ad1 7a				ld a,d 
9ad2 77				ld (hl), a 
9ad3			 
9ad3			if DEBUG_FORTH_PUSH 
9ad3 2b				dec hl 
9ad4 2b				dec hl 
9ad5 2b				dec hl 
9ad6						DMARK "PH5" 
9ad6 f5				push af  
9ad7 3a eb 9a			ld a, (.dmark)  
9ada 32 65 ee			ld (debug_mark),a  
9add 3a ec 9a			ld a, (.dmark+1)  
9ae0 32 66 ee			ld (debug_mark+1),a  
9ae3 3a ed 9a			ld a, (.dmark+2)  
9ae6 32 67 ee			ld (debug_mark+2),a  
9ae9 18 03			jr .pastdmark  
9aeb ..			.dmark: db "PH5"  
9aee f1			.pastdmark: pop af  
9aef			endm  
# End of macro DMARK
9aef				CALLMONITOR 
9aef cd 6f ee			call debug_vector  
9af2				endm  
# End of macro CALLMONITOR
9af2			endif	 
9af2			 
9af2 c9				ret 
9af3			 
9af3			 
9af3			; Push a string to stack pointed to by hl 
9af3			 
9af3			forth_push_str: 
9af3			 
9af3			if DEBUG_FORTH_PUSH 
9af3						DMARK "PSQ" 
9af3 f5				push af  
9af4 3a 08 9b			ld a, (.dmark)  
9af7 32 65 ee			ld (debug_mark),a  
9afa 3a 09 9b			ld a, (.dmark+1)  
9afd 32 66 ee			ld (debug_mark+1),a  
9b00 3a 0a 9b			ld a, (.dmark+2)  
9b03 32 67 ee			ld (debug_mark+2),a  
9b06 18 03			jr .pastdmark  
9b08 ..			.dmark: db "PSQ"  
9b0b f1			.pastdmark: pop af  
9b0c			endm  
# End of macro DMARK
9b0c				CALLMONITOR 
9b0c cd 6f ee			call debug_vector  
9b0f				endm  
# End of macro CALLMONITOR
9b0f			endif	 
9b0f			 
9b0f			 
9b0f			    
9b0f e5				push hl 
9b10 e5				push hl 
9b11			 
9b11			;	ld a, 0   ; find end of string 
9b11 cd 50 90			call strlenz 
9b14			if DEBUG_FORTH_PUSH 
9b14						DMARK "PQ2" 
9b14 f5				push af  
9b15 3a 29 9b			ld a, (.dmark)  
9b18 32 65 ee			ld (debug_mark),a  
9b1b 3a 2a 9b			ld a, (.dmark+1)  
9b1e 32 66 ee			ld (debug_mark+1),a  
9b21 3a 2b 9b			ld a, (.dmark+2)  
9b24 32 67 ee			ld (debug_mark+2),a  
9b27 18 03			jr .pastdmark  
9b29 ..			.dmark: db "PQ2"  
9b2c f1			.pastdmark: pop af  
9b2d			endm  
# End of macro DMARK
9b2d				CALLMONITOR 
9b2d cd 6f ee			call debug_vector  
9b30				endm  
# End of macro CALLMONITOR
9b30			endif	 
9b30 eb				ex de, hl 
9b31 e1				pop hl   ; get ptr to start of string 
9b32			if DEBUG_FORTH_PUSH 
9b32						DMARK "PQ3" 
9b32 f5				push af  
9b33 3a 47 9b			ld a, (.dmark)  
9b36 32 65 ee			ld (debug_mark),a  
9b39 3a 48 9b			ld a, (.dmark+1)  
9b3c 32 66 ee			ld (debug_mark+1),a  
9b3f 3a 49 9b			ld a, (.dmark+2)  
9b42 32 67 ee			ld (debug_mark+2),a  
9b45 18 03			jr .pastdmark  
9b47 ..			.dmark: db "PQ3"  
9b4a f1			.pastdmark: pop af  
9b4b			endm  
# End of macro DMARK
9b4b				CALLMONITOR 
9b4b cd 6f ee			call debug_vector  
9b4e				endm  
# End of macro CALLMONITOR
9b4e			endif	 
9b4e 19				add hl,de 
9b4f			if DEBUG_FORTH_PUSH 
9b4f						DMARK "PQE" 
9b4f f5				push af  
9b50 3a 64 9b			ld a, (.dmark)  
9b53 32 65 ee			ld (debug_mark),a  
9b56 3a 65 9b			ld a, (.dmark+1)  
9b59 32 66 ee			ld (debug_mark+1),a  
9b5c 3a 66 9b			ld a, (.dmark+2)  
9b5f 32 67 ee			ld (debug_mark+2),a  
9b62 18 03			jr .pastdmark  
9b64 ..			.dmark: db "PQE"  
9b67 f1			.pastdmark: pop af  
9b68			endm  
# End of macro DMARK
9b68				CALLMONITOR 
9b68 cd 6f ee			call debug_vector  
9b6b				endm  
# End of macro CALLMONITOR
9b6b			endif	 
9b6b			 
9b6b 2b				dec hl    ; see if there is an optional trailing double quote 
9b6c 7e				ld a,(hl) 
9b6d fe 22			cp '"' 
9b6f 20 03			jr nz, .strnoq 
9b71 3e 00			ld a, 0      ; get rid of double quote 
9b73 77				ld (hl), a 
9b74 23			.strnoq: inc hl 
9b75			 
9b75 3e 00			ld a, 0 
9b77 77				ld (hl), a     ; add null term and get rid of trailing double quote 
9b78			 
9b78 13				inc de ; add one for the type string 
9b79 13				inc de ; add one for null term??? 
9b7a			 
9b7a				; tos is get string pointer again 
9b7a				; de contains space to allocate 
9b7a				 
9b7a d5				push de 
9b7b			 
9b7b eb				ex de, hl 
9b7c			 
9b7c				;push af 
9b7c			 
9b7c			if DEBUG_FORTH_PUSH 
9b7c						DMARK "PHm" 
9b7c f5				push af  
9b7d 3a 91 9b			ld a, (.dmark)  
9b80 32 65 ee			ld (debug_mark),a  
9b83 3a 92 9b			ld a, (.dmark+1)  
9b86 32 66 ee			ld (debug_mark+1),a  
9b89 3a 93 9b			ld a, (.dmark+2)  
9b8c 32 67 ee			ld (debug_mark+2),a  
9b8f 18 03			jr .pastdmark  
9b91 ..			.dmark: db "PHm"  
9b94 f1			.pastdmark: pop af  
9b95			endm  
# End of macro DMARK
9b95				CALLMONITOR 
9b95 cd 6f ee			call debug_vector  
9b98				endm  
# End of macro CALLMONITOR
9b98			endif	 
9b98 cd c5 90			call malloc	; on ret hl now contains allocated memory 
9b9b				if DEBUG_FORTH_MALLOC_GUARD 
9b9b cc a3 cd				call z,malloc_error 
9b9e				endif 
9b9e			 
9b9e				 
9b9e c1				pop bc    ; get length 
9b9f d1				pop de   ;  get string start    
9ba0			 
9ba0				; hl has destination from malloc 
9ba0			 
9ba0 eb				ex de, hl    ; prep for ldir 
9ba1			 
9ba1 d5				push de   ; save malloc area for DSP later 
9ba2				;push hl   ; save malloc area for DSP later 
9ba2			 
9ba2			if DEBUG_FORTH_PUSH 
9ba2						DMARK "PHc" 
9ba2 f5				push af  
9ba3 3a b7 9b			ld a, (.dmark)  
9ba6 32 65 ee			ld (debug_mark),a  
9ba9 3a b8 9b			ld a, (.dmark+1)  
9bac 32 66 ee			ld (debug_mark+1),a  
9baf 3a b9 9b			ld a, (.dmark+2)  
9bb2 32 67 ee			ld (debug_mark+2),a  
9bb5 18 03			jr .pastdmark  
9bb7 ..			.dmark: db "PHc"  
9bba f1			.pastdmark: pop af  
9bbb			endm  
# End of macro DMARK
9bbb				CALLMONITOR 
9bbb cd 6f ee			call debug_vector  
9bbe				endm  
# End of macro CALLMONITOR
9bbe			endif	 
9bbe			 
9bbe			 
9bbe ed b0			ldir 
9bc0			 
9bc0			 
9bc0				; push malloc to data stack     macro?????  
9bc0			 
9bc0				FORTH_DSP_NEXT 
9bc0 cd 14 9a			call macro_forth_dsp_next 
9bc3				endm 
# End of macro FORTH_DSP_NEXT
9bc3			 
9bc3				; save value and type 
9bc3			 
9bc3 2a e8 e9			ld hl, (cli_data_sp) 
9bc6			 
9bc6				; save item type 
9bc6 3e 01			ld a,  DS_TYPE_STR 
9bc8 77				ld (hl), a 
9bc9 23				inc hl 
9bca			 
9bca				; get malloc word off stack 
9bca d1				pop de 
9bcb 73				ld (hl), e 
9bcc 23				inc hl 
9bcd 72				ld (hl), d 
9bce			 
9bce			 
9bce			 
9bce			if DEBUG_FORTH_PUSH 
9bce 2a e8 e9			ld hl, (cli_data_sp) 
9bd1						DMARK "PHS" 
9bd1 f5				push af  
9bd2 3a e6 9b			ld a, (.dmark)  
9bd5 32 65 ee			ld (debug_mark),a  
9bd8 3a e7 9b			ld a, (.dmark+1)  
9bdb 32 66 ee			ld (debug_mark+1),a  
9bde 3a e8 9b			ld a, (.dmark+2)  
9be1 32 67 ee			ld (debug_mark+2),a  
9be4 18 03			jr .pastdmark  
9be6 ..			.dmark: db "PHS"  
9be9 f1			.pastdmark: pop af  
9bea			endm  
# End of macro DMARK
9bea				CALLMONITOR 
9bea cd 6f ee			call debug_vector  
9bed				endm  
# End of macro CALLMONITOR
9bed			;	ex de,hl 
9bed			endif	 
9bed				; in case of spaces, skip the ptr past the copied string 
9bed				;pop af 
9bed				;ld (cli_origptr),hl 
9bed			 
9bed c9				ret 
9bee			 
9bee			 
9bee			 
9bee			; TODO ascii push input onto stack given hl to start of input 
9bee			 
9bee			; identify type 
9bee			; if starts with a " then a string 
9bee			; otherwise it is a number 
9bee			;  
9bee			; if a string 
9bee			;     scan for ending " to get length of string to malloc for + 1 
9bee			;     malloc 
9bee			;     put pointer to string on stack first byte flags as string 
9bee			; 
9bee			; else a number 
9bee			;    look for number format identifier 
9bee			;    $xx hex 
9bee			;    %xxxxx bin 
9bee			;    xxxxx decimal 
9bee			;    convert number to 16bit word.  
9bee			;    malloc word + 1 with flag to identiy as num 
9bee			;    put pointer to number on stack 
9bee			;   
9bee			;  
9bee			  
9bee			forth_apush: 
9bee				; kernel push 
9bee			 
9bee			if DEBUG_FORTH_PUSH 
9bee						DMARK "PSH" 
9bee f5				push af  
9bef 3a 03 9c			ld a, (.dmark)  
9bf2 32 65 ee			ld (debug_mark),a  
9bf5 3a 04 9c			ld a, (.dmark+1)  
9bf8 32 66 ee			ld (debug_mark+1),a  
9bfb 3a 05 9c			ld a, (.dmark+2)  
9bfe 32 67 ee			ld (debug_mark+2),a  
9c01 18 03			jr .pastdmark  
9c03 ..			.dmark: db "PSH"  
9c06 f1			.pastdmark: pop af  
9c07			endm  
# End of macro DMARK
9c07				CALLMONITOR 
9c07 cd 6f ee			call debug_vector  
9c0a				endm  
# End of macro CALLMONITOR
9c0a			endif	 
9c0a				; identify input type 
9c0a			 
9c0a 7e				ld a,(hl) 
9c0b			 
9c0b fe 23			cp '#' 
9c0d ca 47 9c			jp z, .fapdec 
9c10			 
9c10			 
9c10 fe 22			cp '"' 
9c12 28 0a			jr z, .fapstr 
9c14 fe 24			cp '$' 
9c16 ca 3e 9c			jp z, .faphex 
9c19 fe 25			cp '%' 
9c1b ca 26 9c			jp z, .fapbin 
9c1e			;	cp 'b' 
9c1e			;	jp z, .fabin 
9c1e				; else decimal 
9c1e			 
9c1e				; TODO do decimal conversion 
9c1e				; decimal is stored as a 16bit word 
9c1e			 
9c1e				; by default everything is a string if type is not detected 
9c1e			.fapstr: ; 
9c1e fe 22			cp '"' 
9c20 20 01			jr nz, .strnoqu 
9c22 23				inc hl 
9c23			.strnoqu: 
9c23 c3 f3 9a			jp forth_push_str 
9c26			 
9c26			 
9c26			 
9c26			.fapbin:    ; push a binary string.  
9c26 11 00 00			ld de, 0   ; hold a 16bit value 
9c29			 
9c29 23			.fapbinshift:	inc hl  
9c2a 7e				ld a,(hl) 
9c2b fe 00			cp 0     ; done scanning  
9c2d 28 0b			jr z, .fapbdone  	; got it in HL so push  
9c2f			 
9c2f				; left shift de 
9c2f eb				ex de, hl	 
9c30 29				add hl, hl 
9c31			 
9c31				; is 1 
9c31 fe 31			cp '1' 
9c33 20 02			jr nz, .binzero 
9c35 cb 4d			bit 1, l 
9c37			.binzero: 
9c37 eb				ex de, hl	 ; save current de 
9c38 18 ef			jr .fapbinshift 
9c3a			 
9c3a			.fapbdone: 
9c3a eb				ex de, hl 
9c3b c3 85 9a			jp forth_push_numhl 
9c3e			 
9c3e			 
9c3e			.faphex:   ; hex is always stored as a 16bit word 
9c3e				; skip number prefix 
9c3e 23				inc hl 
9c3f				; turn ascii into number 
9c3f cd a9 8f			call get_word_hl	; ret 16bit word in hl 
9c42			 
9c42 c3 85 9a			jp forth_push_numhl 
9c45			 
9c45 00				 nop 
9c46			 
9c46			.fabin:   ; TODO bin conversion 
9c46			 
9c46			 
9c46 c9				ret 
9c47			.fapdec:	 
9c47				; string to dec conversion 
9c47 23				inc hl 
9c48 eb				ex de, hl 
9c49 cd e7 8f			call string_to_uint16 
9c4c c3 85 9a			jp forth_push_numhl 
9c4f c9				ret 
9c50				 
9c50			;atoui_16: 
9c50			 
9c50			; get either a string ptr or a 16bit word from the data stack 
9c50			 
9c50			FORTH_DSP: macro 
9c50				call macro_forth_dsp 
9c50				endm 
9c50			 
9c50			macro_forth_dsp: 
9c50				; data stack pointer points to current word on tos 
9c50			 
9c50 2a e8 e9			ld hl,(cli_data_sp) 
9c53			 
9c53				if DEBUG_FORTH_PUSH 
9c53						DMARK "DSP" 
9c53 f5				push af  
9c54 3a 68 9c			ld a, (.dmark)  
9c57 32 65 ee			ld (debug_mark),a  
9c5a 3a 69 9c			ld a, (.dmark+1)  
9c5d 32 66 ee			ld (debug_mark+1),a  
9c60 3a 6a 9c			ld a, (.dmark+2)  
9c63 32 67 ee			ld (debug_mark+2),a  
9c66 18 03			jr .pastdmark  
9c68 ..			.dmark: db "DSP"  
9c6b f1			.pastdmark: pop af  
9c6c			endm  
# End of macro DMARK
9c6c			 
9c6c cd d6 cd				call display_data_sp 
9c6f				;call break_point_state 
9c6f				;rst 030h 
9c6f				CALLMONITOR 
9c6f cd 6f ee			call debug_vector  
9c72				endm  
# End of macro CALLMONITOR
9c72				endif 
9c72			 
9c72 c9				ret 
9c73			 
9c73			; return hl to start of value on stack 
9c73			 
9c73			FORTH_DSP_VALUE: macro 
9c73				call macro_forth_dsp_value 
9c73				endm 
9c73			 
9c73			macro_forth_dsp_value: 
9c73			 
9c73				FORTH_DSP 
9c73 cd 50 9c			call macro_forth_dsp 
9c76				endm 
# End of macro FORTH_DSP
9c76			 
9c76 d5				push de 
9c77			 
9c77 23				inc hl ; skip type 
9c78			 
9c78 5e				ld e, (hl) 
9c79 23				inc hl 
9c7a 56				ld d, (hl) 
9c7b eb				ex de,hl  
9c7c			 
9c7c d1				pop de 
9c7d			 
9c7d c9				ret 
9c7e			 
9c7e			; return hl to start of value to second item on stack 
9c7e			 
9c7e			FORTH_DSP_VALUEM1: macro 
9c7e				call macro_forth_dsp_value_m1 
9c7e				endm 
9c7e			 
9c7e			macro_forth_dsp_value_m1: 
9c7e			 
9c7e				FORTH_DSP 
9c7e cd 50 9c			call macro_forth_dsp 
9c81				endm 
# End of macro FORTH_DSP
9c81			 
9c81 2b				dec hl 
9c82 2b				dec hl 
9c83			;	dec hl 
9c83			 
9c83 d5				push de 
9c84			 
9c84 5e				ld e, (hl) 
9c85 23				inc hl 
9c86 56				ld d, (hl) 
9c87 eb				ex de,hl  
9c88			 
9c88 d1				pop de 
9c89			 
9c89 c9				ret 
9c8a			 
9c8a				 
9c8a			 
9c8a			; whatever the current top os stack points to, we are now done with it so return memory to malloc 
9c8a			 
9c8a			FORTH_DSP_POP: macro 
9c8a				call macro_forth_dsp_pop 
9c8a				endm 
9c8a			 
9c8a			 
9c8a			; get the tos data type 
9c8a			 
9c8a			FORTH_DSP_TYPE:   macro 
9c8a			 
9c8a				;FORTH_DSP_VALUE 
9c8a				FORTH_DSP 
9c8a				 
9c8a				; hl points to value 
9c8a				; check type 
9c8a			 
9c8a				ld a,(hl) 
9c8a			 
9c8a				endm 
9c8a			 
9c8a			; load the tos value into hl 
9c8a			 
9c8a			 
9c8a			FORTH_DSP_VALUEHL:  macro 
9c8a				call macro_dsp_valuehl 
9c8a				endm 
9c8a			 
9c8a			 
9c8a			 
9c8a			macro_dsp_valuehl: 
9c8a				FORTH_DSP_VALUE 
9c8a cd 73 9c			call macro_forth_dsp_value 
9c8d				endm 
# End of macro FORTH_DSP_VALUE
9c8d			 
9c8d				;FORTH_ERR_TOS_NOTNUM 
9c8d			 
9c8d				;inc hl   ; skip type id 
9c8d			 
9c8d			;	push de 
9c8d			; 
9c8d			;	ld e, (hl) 
9c8d			;	inc hl 
9c8d			;	ld d, (hl) 
9c8d			;	ex de,hl  
9c8d			 
9c8d			;	pop de 
9c8d			 
9c8d				if DEBUG_FORTH_PUSH 
9c8d						DMARK "DVL" 
9c8d f5				push af  
9c8e 3a a2 9c			ld a, (.dmark)  
9c91 32 65 ee			ld (debug_mark),a  
9c94 3a a3 9c			ld a, (.dmark+1)  
9c97 32 66 ee			ld (debug_mark+1),a  
9c9a 3a a4 9c			ld a, (.dmark+2)  
9c9d 32 67 ee			ld (debug_mark+2),a  
9ca0 18 03			jr .pastdmark  
9ca2 ..			.dmark: db "DVL"  
9ca5 f1			.pastdmark: pop af  
9ca6			endm  
# End of macro DMARK
9ca6				CALLMONITOR 
9ca6 cd 6f ee			call debug_vector  
9ca9				endm  
# End of macro CALLMONITOR
9ca9				endif 
9ca9 c9				ret 
9caa			 
9caa			forth_apushstrhl:      
9caa				; push of string requires use of cli_origptr 
9caa				; bodge use 
9caa			 
9caa				; get current cli_origptr, save, update with temp pointer  
9caa ed 5b 38 ea		ld de, (cli_origptr) 
9cae 22 38 ea			ld (cli_origptr), hl 
9cb1 d5				push de 
9cb2 cd ee 9b			call forth_apush 
9cb5 d1				pop de 
9cb6 ed 53 38 ea		ld (cli_origptr), de 
9cba c9			        ret	 
9cbb			 
9cbb			 
9cbb			; increase loop stack pointer and save hl to it 
9cbb				 
9cbb			FORTH_LOOP_NEXT: macro 
9cbb				call macro_forth_loop_next 
9cbb				;nop 
9cbb				endm 
9cbb			 
9cbb			macro_forth_loop_next: 
9cbb				if DEBUG_FORTH_STACK_GUARD 
9cbb cd 50 db				call check_stacks 
9cbe				endif 
9cbe e5				push hl 
9cbf d5				push de 
9cc0 eb				ex de,hl 
9cc1 2a ea e9			ld hl,(cli_loop_sp) 
9cc4 23				inc hl 
9cc5 23				inc hl 
9cc6					if DEBUG_FORTH_WORDS 
9cc6						DMARK "LNX" 
9cc6 f5				push af  
9cc7 3a db 9c			ld a, (.dmark)  
9cca 32 65 ee			ld (debug_mark),a  
9ccd 3a dc 9c			ld a, (.dmark+1)  
9cd0 32 66 ee			ld (debug_mark+1),a  
9cd3 3a dd 9c			ld a, (.dmark+2)  
9cd6 32 67 ee			ld (debug_mark+2),a  
9cd9 18 03			jr .pastdmark  
9cdb ..			.dmark: db "LNX"  
9cde f1			.pastdmark: pop af  
9cdf			endm  
# End of macro DMARK
9cdf						CALLMONITOR 
9cdf cd 6f ee			call debug_vector  
9ce2				endm  
# End of macro CALLMONITOR
9ce2					endif 
9ce2 22 ea e9			ld (cli_loop_sp),hl 
9ce5 73				ld (hl), e 
9ce6 23				inc hl 
9ce7 72				ld (hl), d 
9ce8 d1				pop de    ; been reversed so save a swap on restore 
9ce9 e1				pop hl 
9cea				if DEBUG_FORTH_STACK_GUARD 
9cea cd 50 db				call check_stacks 
9ced				endif 
9ced c9				ret 
9cee			 
9cee			; get current ret stack pointer and save to hl  
9cee				 
9cee			FORTH_LOOP_TOS: macro 
9cee				call macro_forth_loop_tos 
9cee				endm 
9cee			 
9cee			macro_forth_loop_tos: 
9cee d5				push de 
9cef 2a ea e9			ld hl,(cli_loop_sp) 
9cf2 5e				ld e, (hl) 
9cf3 23				inc hl 
9cf4 56				ld d, (hl) 
9cf5 eb				ex de, hl 
9cf6 d1				pop de 
9cf7 c9				ret 
9cf8			 
9cf8			; pop loop stack pointer 
9cf8				 
9cf8			FORTH_LOOP_POP: macro 
9cf8				call macro_forth_loop_pop 
9cf8				endm 
9cf8			 
9cf8			 
9cf8			macro_forth_loop_pop: 
9cf8				if DEBUG_FORTH_STACK_GUARD 
9cf8					DMARK "LPP" 
9cf8 f5				push af  
9cf9 3a 0d 9d			ld a, (.dmark)  
9cfc 32 65 ee			ld (debug_mark),a  
9cff 3a 0e 9d			ld a, (.dmark+1)  
9d02 32 66 ee			ld (debug_mark+1),a  
9d05 3a 0f 9d			ld a, (.dmark+2)  
9d08 32 67 ee			ld (debug_mark+2),a  
9d0b 18 03			jr .pastdmark  
9d0d ..			.dmark: db "LPP"  
9d10 f1			.pastdmark: pop af  
9d11			endm  
# End of macro DMARK
9d11 cd 50 db				call check_stacks 
9d14					FORTH_CHK_LOOP_UNDER 
9d14 e5				push hl 
9d15 d5				push de 
9d16 2a ea e9			ld hl,(cli_loop_sp) 
9d19 11 24 e9			ld de, cli_loop_stack 
9d1c cd 08 8d			call cmp16 
9d1f da 6d dc			jp c, fault_loop_under 
9d22 d1				pop de 
9d23 e1				pop hl 
9d24				endm 
# End of macro FORTH_CHK_LOOP_UNDER
9d24				endif 
9d24 e5				push hl 
9d25 2a ea e9			ld hl,(cli_loop_sp) 
9d28 2b				dec hl 
9d29 2b				dec hl 
9d2a 22 ea e9			ld (cli_loop_sp), hl 
9d2d				; TODO do stack underflow checks 
9d2d e1				pop hl 
9d2e				if DEBUG_FORTH_STACK_GUARD 
9d2e cd 50 db				call check_stacks 
9d31					FORTH_CHK_LOOP_UNDER 
9d31 e5				push hl 
9d32 d5				push de 
9d33 2a ea e9			ld hl,(cli_loop_sp) 
9d36 11 24 e9			ld de, cli_loop_stack 
9d39 cd 08 8d			call cmp16 
9d3c da 6d dc			jp c, fault_loop_under 
9d3f d1				pop de 
9d40 e1				pop hl 
9d41				endm 
# End of macro FORTH_CHK_LOOP_UNDER
9d41				endif 
9d41 c9				ret 
9d42			 
9d42			macro_forth_dsp_pop: 
9d42			 
9d42 e5				push hl 
9d43			 
9d43				; release malloc data 
9d43			 
9d43				if DEBUG_FORTH_STACK_GUARD 
9d43 cd 50 db				call check_stacks 
9d46					FORTH_CHK_DSP_UNDER 
9d46 e5				push hl 
9d47 d5				push de 
9d48 2a e8 e9			ld hl,(cli_data_sp) 
9d4b 11 22 e8			ld de, cli_data_stack 
9d4e cd 08 8d			call cmp16 
9d51 da 61 dc			jp c, fault_dsp_under 
9d54 d1				pop de 
9d55 e1				pop hl 
9d56				endm 
# End of macro FORTH_CHK_DSP_UNDER
9d56				endif 
9d56				;ld hl,(cli_data_sp) 
9d56			if DEBUG_FORTH_DOT 
9d56				DMARK "DPP" 
9d56 f5				push af  
9d57 3a 6b 9d			ld a, (.dmark)  
9d5a 32 65 ee			ld (debug_mark),a  
9d5d 3a 6c 9d			ld a, (.dmark+1)  
9d60 32 66 ee			ld (debug_mark+1),a  
9d63 3a 6d 9d			ld a, (.dmark+2)  
9d66 32 67 ee			ld (debug_mark+2),a  
9d69 18 03			jr .pastdmark  
9d6b ..			.dmark: db "DPP"  
9d6e f1			.pastdmark: pop af  
9d6f			endm  
# End of macro DMARK
9d6f				CALLMONITOR 
9d6f cd 6f ee			call debug_vector  
9d72				endm  
# End of macro CALLMONITOR
9d72			endif	 
9d72			 
9d72			 
9d72			if FORTH_ENABLE_DSPPOPFREE 
9d72			 
9d72				FORTH_DSP 
9d72 cd 50 9c			call macro_forth_dsp 
9d75				endm 
# End of macro FORTH_DSP
9d75			 
9d75 7e				ld a, (hl) 
9d76 fe 01			cp DS_TYPE_STR 
9d78 20 23			jr nz, .skippopfree 
9d7a			 
9d7a				FORTH_DSP_VALUEHL 
9d7a cd 8a 9c			call macro_dsp_valuehl 
9d7d				endm 
# End of macro FORTH_DSP_VALUEHL
9d7d 00				nop 
9d7e			if DEBUG_FORTH_DOT 
9d7e				DMARK "DPf" 
9d7e f5				push af  
9d7f 3a 93 9d			ld a, (.dmark)  
9d82 32 65 ee			ld (debug_mark),a  
9d85 3a 94 9d			ld a, (.dmark+1)  
9d88 32 66 ee			ld (debug_mark+1),a  
9d8b 3a 95 9d			ld a, (.dmark+2)  
9d8e 32 67 ee			ld (debug_mark+2),a  
9d91 18 03			jr .pastdmark  
9d93 ..			.dmark: db "DPf"  
9d96 f1			.pastdmark: pop af  
9d97			endm  
# End of macro DMARK
9d97				CALLMONITOR 
9d97 cd 6f ee			call debug_vector  
9d9a				endm  
# End of macro CALLMONITOR
9d9a			endif	 
9d9a cd 8f 91			call free 
9d9d			.skippopfree: 
9d9d				 
9d9d			 
9d9d			endif 
9d9d			 
9d9d			if DEBUG_FORTH_DOT_KEY 
9d9d				DMARK "DP2" 
9d9d				CALLMONITOR 
9d9d			endif	 
9d9d			 
9d9d				; move pointer down 
9d9d			 
9d9d 2a e8 e9			ld hl,(cli_data_sp) 
9da0 2b				dec hl 
9da1 2b				dec hl 
9da2			; PARSEV5 
9da2 2b				dec hl 
9da3 22 e8 e9			ld (cli_data_sp), hl 
9da6			 
9da6				if DEBUG_FORTH_STACK_GUARD 
9da6 cd 50 db				call check_stacks 
9da9					FORTH_CHK_DSP_UNDER 
9da9 e5				push hl 
9daa d5				push de 
9dab 2a e8 e9			ld hl,(cli_data_sp) 
9dae 11 22 e8			ld de, cli_data_stack 
9db1 cd 08 8d			call cmp16 
9db4 da 61 dc			jp c, fault_dsp_under 
9db7 d1				pop de 
9db8 e1				pop hl 
9db9				endm 
# End of macro FORTH_CHK_DSP_UNDER
9db9				endif 
9db9			 
9db9 e1				pop hl 
9dba			 
9dba c9				ret 
9dbb			 
9dbb			getwordathl: 
9dbb				; hl points to an address 
9dbb				; load hl with the word at that address 
9dbb			 
9dbb d5				push de 
9dbc			 
9dbc 5e				ld e, (hl) 
9dbd 23				inc hl 
9dbe 56				ld d, (hl) 
9dbf eb				ex de, hl 
9dc0			 
9dc0 d1				pop de 
9dc1 c9				ret 
9dc2			 
9dc2			 
9dc2			; functions to manuplite stack pointers 
9dc2			 
9dc2			; generate fragment to set hl to be pointer to a stack item 
9dc2			 
9dc2			FORTH_DSP_PTR: macro  x 
9dc2				ld hl,(cli_data_sp) 
9dc2				ld de, x * 3 
9dc2				sbc hl, de 
9dc2				endm 
9dc2			 
9dc2			 
9dc2			 
9dc2			; copy point in hl to stack tmp storage slots 1-4 
9dc2			hltostack1: 
9dc2 11 b8 e2			ld de, os_stack_1  
9dc5 c3 f0 9d			jp hltostackmv 
9dc8			 
9dc8			hltostack2:  
9dc8 11 b5 e2			ld de, os_stack_2 
9dcb c3 f0 9d			jp hltostackmv 
9dce			 
9dce			hltostack3:  
9dce 11 b2 e2			ld de, os_stack_3 
9dd1 c3 f0 9d			jp hltostackmv 
9dd4			 
9dd4			hltostack4:  
9dd4 11 af e2			ld de, os_stack_4  
9dd7 c3 f0 9d			jp hltostackmv 
9dda			 
9dda			; copy to point in hl from stack tmp storage slots 1-4 
9dda			hlfromstack1: 
9dda 11 b8 e2			ld de, os_stack_1 
9ddd c3 ef 9d			jp hlfromsttackmv 
9de0			 
9de0			hlfromstack2:  
9de0 11 b5 e2			ld de, os_stack_2 
9de3 c3 ef 9d			jp hlfromsttackmv 
9de6			 
9de6			hlfromstack3:  
9de6 11 b2 e2			ld de, os_stack_3 
9de9 c3 ef 9d			jp hlfromsttackmv 
9dec			 
9dec			hlfromstack4:  
9dec 11 af e2			ld de, os_stack_4 
9def			 
9def			hlfromsttackmv: 
9def eb				ex de, hl 
9df0			 
9df0			hltostackmv: 
9df0			 
9df0				; do stack move 
9df0 c5				push bc 
9df1 01 03 00			ld bc, 3 
9df4 ed b0			ldir  
9df6 c1				pop bc	 
9df7 c9				ret 
9df8			 
9df8			; eof 
9df8			 
# End of file forth_stackopsv5.asm
9df8			endif 
9df8			 
9df8			loadwordinhl:	 
9df8			 
9df8 d5				push de 
9df9			 
9df9 5e				ld e, (hl) 
9dfa 23				inc hl 
9dfb 56				ld d, (hl) 
9dfc eb				ex de,hl  
9dfd			 
9dfd d1				pop de 
9dfe			 
9dfe c9				ret 
9dff			 
9dff			user_word_eol:  
9dff				; hl contains the pointer to where to create a linked list item from the end 
9dff				; of the user dict to continue on at the system word dict 
9dff				 
9dff				; poke the stub of the word list linked list to repoint to rom words 
9dff			 
9dff				; stub format 
9dff				; db   word id 
9dff				; dw    link to next word 
9dff			        ; db char length of token 
9dff				; db string + 0 term 
9dff				; db exec code....  
9dff			 
9dff 3e 00			ld a, WORD_SYS_ROOT     ; root word 
9e01 77				ld (hl), a		; word id 
9e02 23				inc hl 
9e03			 
9e03 11 ce 9f			ld de, sysdict 
9e06 73				ld (hl), e		; next word link ie system dict 
9e07 23				inc hl 
9e08 72				ld (hl), d		; next word link ie system dict 
9e09 23				inc hl	 
9e0a			 
9e0a			;	ld (hl), sysdict		; next word link ie system dict 
9e0a			;	inc hl 
9e0a			;	inc hl 
9e0a			 
9e0a			;	inc hl 
9e0a			;	inc hl 
9e0a			 
9e0a 3e 02			ld a, 2			; word length is 0 
9e0c 77				ld (hl), a	 
9e0d 23				inc hl 
9e0e			 
9e0e 3e 7e			ld a, '~'			; word length is 0 
9e10 77				ld (hl), a	 
9e11 23				inc hl 
9e12 3e 00			ld a, 0			; save empty word 
9e14 77				ld (hl), a 
9e15			 
9e15 c9				ret 
9e16			 
9e16				 
9e16			 
9e16			forthexec_cleanup: 
9e16				FORTH_RSP_POP 
9e16 cd 4d 9a			call macro_forth_rsp_pop 
9e19				endm 
# End of macro FORTH_RSP_POP
9e19 c9				ret 
9e1a			 
9e1a			forth_call_hl: 
9e1a				; taking hl 
9e1a e5				push hl 
9e1b c9				ret 
9e1c			 
9e1c			; this is called to reset Forth system but keep existing uwords etc 
9e1c			 
9e1c			forth_warmstart: 
9e1c				; setup stack over/under flow checks 
9e1c				if DEBUG_FORTH_STACK_GUARD 
9e1c cd 36 db				call chk_stk_init 
9e1f				endif 
9e1f			 
9e1f				; init stack pointers  - * these stacks go upwards *  
9e1f 21 a6 e9			ld hl, cli_ret_stack 
9e22 22 ec e9			ld (cli_ret_sp), hl	 
9e25				; set bottom of stack 
9e25 3e 00			ld a,0 
9e27 77				ld (hl),a 
9e28 23				inc hl 
9e29 77				ld (hl),a 
9e2a			 
9e2a 21 22 e8			ld hl, cli_data_stack 
9e2d 22 e8 e9			ld (cli_data_sp), hl	 
9e30				; set bottom of stack 
9e30 3e 00			ld a,0 
9e32 77				ld (hl),a 
9e33 23				inc hl 
9e34 77				ld (hl),a 
9e35			 
9e35 21 24 e9			ld hl, cli_loop_stack 
9e38 22 ea e9			ld (cli_loop_sp), hl	 
9e3b				; set bottom of stack 
9e3b 3e 00			ld a,0 
9e3d 77				ld (hl),a 
9e3e 23				inc hl 
9e3f 77				ld (hl),a 
9e40			 
9e40				; init extent of current open file 
9e40			 
9e40 3e 00			ld a, 0 
9e42 32 64 ea			ld (store_openext), a 
9e45			 
9e45 c9				ret 
9e46			 
9e46			 
9e46			 
9e46			; Cold Start - this is called to setup the whole Forth system 
9e46			 
9e46			forth_init: 
9e46			 
9e46				; setup stack over/under flow checks 
9e46			 
9e46			;	if DEBUG_FORTH_STACK_GUARD 
9e46			;		call chk_stk_init 
9e46			;	endif 
9e46			 
9e46				; enable auto display updates (slow.....) 
9e46			 
9e46 3e 01			ld a, 1 
9e48 32 36 ea			ld (cli_autodisplay), a 
9e4b			 
9e4b				; if storage is in use disable long reads for now 
9e4b 3e 00			ld a, 0 
9e4d 32 6f ea			ld (store_longread), a 
9e50			 
9e50			 
9e50				; show start up screen 
9e50			 
9e50 cd bd 8a			call clear_display 
9e53			 
9e53 3e 00			ld a,0 
9e55 32 58 ea			ld (f_cursor_ptr), a 
9e58			 
9e58				; set start of word list in start of ram - for use when creating user words 
9e58			 
9e58 21 f3 de			ld hl, baseram 
9e5b 22 b8 e5			ld (os_last_new_uword), hl 
9e5e cd ff 9d			call user_word_eol 
9e61				 
9e61			;		call display_data_sp 
9e61			;		call next_page_prompt 
9e61			 
9e61			 
9e61			 
9e61			 
9e61 c9				ret 
9e62			 
9e62 .. 00		.bootforth: db " Forth Kernel Init ",0 
9e76			 
9e76			; TODO push to stack 
9e76			 
9e76			;  
9e76			 
9e76			if FORTH_PARSEV2 
9e76			 
9e76			 
9e76				include "forth_parserv2.asm" 
9e76			 
9e76			endif 
9e76			 
9e76			 
9e76			; parse cli version 1 
9e76			 
9e76			if FORTH_PARSEV1 
9e76			 
9e76			 
9e76			 
9e76			      include "forth_parserv1.asm" 
9e76			endif 
9e76				 
9e76			if FORTH_PARSEV3 
9e76			 
9e76			 
9e76			 
9e76			      include "forth_parserv3.asm" 
9e76				include "forth_wordsv3.asm" 
9e76			endif 
9e76			 
9e76			if FORTH_PARSEV4 
9e76			 
9e76			 
9e76			 
9e76			      include "forth_parserv4.asm" 
9e76				include "forth_wordsv4.asm" 
9e76			endif 
9e76			 
9e76			if FORTH_PARSEV5 
9e76			 
9e76			 
9e76			 
9e76			      include "forth_parserv5.asm" 
9e76			 
9e76			 
9e76			; A better parser without using malloc and string copies all over the place.  
9e76			; Exec in situ should be faster 
9e76			 
9e76			;WORD_SYS_LOWPRIM: equ 4    ; Offset for low level prim words opcode 
9e76			;WORD_SYS_BRANCH: equ 10    ; Offset for branching and loop words opcode 
9e76			WORD_SYS_UWORD: equ 1   ; Opcode for all user words 
9e76			WORD_SYS_DELETED: equ 3 ; Op code for a deleted UWORD 
9e76			WORD_SYS_ROOT: equ 0   ; Opcode for all user words 
9e76			WORD_SYS_END: equ 0   ; Opcode for all user words 
9e76			WORD_SYS_CORE: equ 20    ; Offset for dict core words opcode 
9e76			WORD_FLAG_CODE: equ 0	   ; opcodeflag to exec pure code for this word 
9e76			WORD_FLAG_JP: equ 1	   ; opcodeflag to list zero term jump table words 
9e76			 
9e76			; Core word preamble macro 
9e76			 
9e76			CWHEAD:   macro nxtword opcode lit len opflags 
9e76				db WORD_SYS_CORE+opcode             
9e76				; internal op code number 
9e76				dw nxtword            
9e76				; link to next dict word block 
9e76				db len + 1 
9e76				; literal length of dict word inc zero term 
9e76				db lit,0              
9e76				; literal dict word 
9e76			        ; TODO db opflags        
9e76				endm 
9e76			 
9e76			 
9e76			NEXTW: macro  
9e76				jp macro_next 
9e76				endm 
9e76			 
9e76			macro_next: 
9e76			if DEBUG_FORTH_PARSE_KEY 
9e76				DMARK "NXT" 
9e76				CALLMONITOR 
9e76			endif	 
9e76			;	inc hl  ; skip token null term  
9e76 ed 4b 3a ea		ld bc,(cli_ptr)   ; move to next token to parse in the input stream 
9e7a ed 5b 38 ea		ld de,(cli_origptr)   ; move to next token to parse in the input stream 
9e7e 2a bc e5			ld hl,(os_tok_ptr)   ; move to next token to parse in the input stream 
9e81			if DEBUG_FORTH_PARSE_KEY 
9e81				DMARK "}AA" 
9e81				CALLMONITOR 
9e81			endif	 
9e81 c3 84 9f			jp execnext 
9e84				;jp exec1 
9e84			       
9e84			 
9e84			 
9e84			; Another go at the parser to compile  
9e84			 
9e84			 
9e84			; TODO rework parser to change all of the string words to byte tokens 
9e84			; TODO do a search for  
9e84			 
9e84			; TODO first run normal parser to zero term sections 
9e84			; TODO for each word do a token look up to get the op code 
9e84			; TODO need some means to flag to the exec that this is a byte code form    
9e84			 
9e84			 
9e84			forthcompile: 
9e84			 
9e84			; 
9e84			; line parse: 
9e84			;       parse raw input buffer 
9e84			;       tokenise the words 
9e84			;       malloc new copy (for looping etc) 
9e84			;       copy to malloc + current pc in line to start of string and add line term 
9e84			;       save on new rsp 
9e84			; 
9e84			 
9e84			; hl to point to the line to tokenise 
9e84			 
9e84			;	push hl 
9e84 22 bc e5			ld (os_tok_ptr), hl  ; save ptr to string 
9e87			 
9e87			;	ld a,0		; string term on input 
9e87			;	call strlent 
9e87			 
9e87			;	ld (os_tok_len), hl	 ; save string length 
9e87			 
9e87			;if DEBUG_FORTH_TOK 
9e87			;	ex de,hl		 
9e87			;endif 
9e87			 
9e87			;	pop hl 		; get back string pointer 
9e87			 
9e87			if DEBUG_FORTH_TOK 
9e87						DMARK "TOc" 
9e87				CALLMONITOR 
9e87			endif 
9e87 7e			.cptoken2:    ld a,(hl) 
9e88 23				inc hl 
9e89 fe 7f			cp FORTH_END_BUFFER 
9e8b 28 29			jr z, .cptokendone2 
9e8d fe 00			cp 0 
9e8f 28 25			jr z, .cptokendone2 
9e91 fe 22			cp '"' 
9e93 28 0b			jr z, .cptokenstr2     ; will want to skip until end of string delim 
9e95 fe 20			cp ' ' 
9e97 20 ee			jr nz,  .cptoken2 
9e99			 
9e99			; TODO consume comments held between ( and ) 
9e99			 
9e99				; we have a space so change to zero term for dict match later 
9e99 2b				dec hl 
9e9a 3e 00			ld a,0 
9e9c 77				ld (hl), a 
9e9d 23				inc hl 
9e9e 18 e7			jr .cptoken2 
9ea0				 
9ea0			 
9ea0			.cptokenstr2: 
9ea0				; skip all white space until either eol (because forgot to term) or end double quote 
9ea0			        ;   if double quotes spotted ensure to skip any space sep until matched doble quote 
9ea0				;inc hl ; skip current double quote 
9ea0 7e				ld a,(hl) 
9ea1 23				inc hl 
9ea2 fe 22			cp '"' 
9ea4 28 e1			jr z, .cptoken2 
9ea6 fe 7f			cp FORTH_END_BUFFER 
9ea8 28 0c			jr z, .cptokendone2 
9eaa fe 00			cp 0 
9eac 28 08			jr z, .cptokendone2 
9eae fe 20			cp ' ' 
9eb0 28 02			jr z, .cptmp2 
9eb2 18 ec			jr .cptokenstr2 
9eb4			 
9eb4			.cptmp2:	; we have a space so change to zero term for dict match later 
9eb4				;dec hl 
9eb4				;ld a,"-"	; TODO remove this when working 
9eb4				;ld (hl), a 
9eb4				;inc hl 
9eb4 18 ea			jr .cptokenstr2 
9eb6			 
9eb6			.cptokendone2: 
9eb6				;inc hl 
9eb6 3e 7f			ld a, FORTH_END_BUFFER 
9eb8 77				ld (hl),a 
9eb9 23				inc hl 
9eba 3e 21			ld a, '!' 
9ebc 77				ld (hl),a 
9ebd			 
9ebd 2a bc e5			ld hl,(os_tok_ptr) 
9ec0			         
9ec0			if DEBUG_FORTH_TOK 
9ec0						DMARK "Tc1" 
9ec0				CALLMONITOR 
9ec0			endif 
9ec0			 
9ec0				; push exec string to top of return stack 
9ec0				FORTH_RSP_NEXT 
9ec0 cd 2c 9a			call macro_forth_rsp_next 
9ec3				endm 
# End of macro FORTH_RSP_NEXT
9ec3 c9				ret 
9ec4			 
9ec4			; Another go at the parser need to simplify the process 
9ec4			 
9ec4			forthparse: 
9ec4			 
9ec4			; 
9ec4			; line parse: 
9ec4			;       parse raw input buffer 
9ec4			;       tokenise the words 
9ec4			;       malloc new copy (for looping etc) 
9ec4			;       copy to malloc + current pc in line to start of string and add line term 
9ec4			;       save on new rsp 
9ec4			; 
9ec4			 
9ec4			; hl to point to the line to tokenise 
9ec4			 
9ec4			;	push hl 
9ec4 22 bc e5			ld (os_tok_ptr), hl  ; save ptr to string 
9ec7			 
9ec7			;	ld a,0		; string term on input 
9ec7			;	call strlent 
9ec7			 
9ec7			;	ld (os_tok_len), hl	 ; save string length 
9ec7			 
9ec7			;if DEBUG_FORTH_TOK 
9ec7			;	ex de,hl		 
9ec7			;endif 
9ec7			 
9ec7			;	pop hl 		; get back string pointer 
9ec7			 
9ec7			if DEBUG_FORTH_TOK 
9ec7						DMARK "TOK" 
9ec7				CALLMONITOR 
9ec7			endif 
9ec7 7e			.ptoken2:    ld a,(hl) 
9ec8 23				inc hl 
9ec9 fe 7f			cp FORTH_END_BUFFER 
9ecb 28 29			jr z, .ptokendone2 
9ecd fe 00			cp 0 
9ecf 28 25			jr z, .ptokendone2 
9ed1 fe 22			cp '"' 
9ed3 28 0b			jr z, .ptokenstr2     ; will want to skip until end of string delim 
9ed5 fe 20			cp ' ' 
9ed7 20 ee			jr nz,  .ptoken2 
9ed9			 
9ed9			; TODO consume comments held between ( and ) 
9ed9			 
9ed9				; we have a space so change to zero term for dict match later 
9ed9 2b				dec hl 
9eda 3e 00			ld a,0 
9edc 77				ld (hl), a 
9edd 23				inc hl 
9ede 18 e7			jr .ptoken2 
9ee0				 
9ee0			 
9ee0			.ptokenstr2: 
9ee0				; skip all white space until either eol (because forgot to term) or end double quote 
9ee0			        ;   if double quotes spotted ensure to skip any space sep until matched doble quote 
9ee0				;inc hl ; skip current double quote 
9ee0 7e				ld a,(hl) 
9ee1 23				inc hl 
9ee2 fe 22			cp '"' 
9ee4 28 e1			jr z, .ptoken2 
9ee6 fe 7f			cp FORTH_END_BUFFER 
9ee8 28 0c			jr z, .ptokendone2 
9eea fe 00			cp 0 
9eec 28 08			jr z, .ptokendone2 
9eee fe 20			cp ' ' 
9ef0 28 02			jr z, .ptmp2 
9ef2 18 ec			jr .ptokenstr2 
9ef4			 
9ef4			.ptmp2:	; we have a space so change to zero term for dict match later 
9ef4				;dec hl 
9ef4				;ld a,"-"	; TODO remove this when working 
9ef4				;ld (hl), a 
9ef4				;inc hl 
9ef4 18 ea			jr .ptokenstr2 
9ef6			 
9ef6			.ptokendone2: 
9ef6				;inc hl 
9ef6 3e 7f			ld a, FORTH_END_BUFFER 
9ef8 77				ld (hl),a 
9ef9 23				inc hl 
9efa 3e 21			ld a, '!' 
9efc 77				ld (hl),a 
9efd			 
9efd 2a bc e5			ld hl,(os_tok_ptr) 
9f00			         
9f00			if DEBUG_FORTH_TOK 
9f00						DMARK "TK1" 
9f00				CALLMONITOR 
9f00			endif 
9f00			 
9f00				; push exec string to top of return stack 
9f00				FORTH_RSP_NEXT 
9f00 cd 2c 9a			call macro_forth_rsp_next 
9f03				endm 
# End of macro FORTH_RSP_NEXT
9f03 c9				ret 
9f04			 
9f04			; 
9f04			;	; malloc size + buffer pointer + if is loop flag 
9f04			;	ld hl,(os_tok_len) 		 ; get string length 
9f04			; 
9f04			;	ld a,l 
9f04			; 
9f04			;	cp 0			; we dont want to use a null string 
9f04			;	ret z 
9f04			; 
9f04			;;	add 3    ; prefix malloc with buffer for current word ptr 
9f04			; 
9f04			;	add 5     ; TODO when certain not over writing memory remove 
9f04			; 
9f04			;		 
9f04			; 
9f04			;if DEBUG_FORTH_TOK 
9f04			;			DMARK "TKE" 
9f04			;	CALLMONITOR 
9f04			;endif 
9f04			; 
9f04			;	ld l,a 
9f04			;	ld h,0 
9f04			;;	push hl   ; save required space for the copy later 
9f04			;	call malloc 
9f04			;if DEBUG_FORTH_TOK 
9f04			;			DMARK "TKM" 
9f04			;	CALLMONITOR 
9f04			;endif 
9f04			;	if DEBUG_FORTH_MALLOC_GUARD 
9f04			;		push af 
9f04			;		call ishlzero 
9f04			;;		ld a, l 
9f04			;;		add h 
9f04			;;		cp 0 
9f04			;		pop af 
9f04			;		 
9f04			;		call z,malloc_error 
9f04			;	endif 
9f04			;	ld (os_tok_malloc), hl	 ; save malloc ptr 
9f04			; 
9f04			; 
9f04			;if DEBUG_FORTH_TOK 
9f04			;			DMARK "TKR" 
9f04			;	CALLMONITOR 
9f04			;endif 
9f04			; 
9f04			;	FORTH_RSP_NEXT 
9f04			; 
9f04			;	;inc hl	 ; go past current buffer pointer 
9f04			;	;inc hl 
9f04			;	;inc hl   ; and past if loop flag 
9f04			;		; TODO Need to set flag  
9f04			; 
9f04			;	 
9f04			;	 
9f04			;	ex de,hl	; malloc is dest 
9f04			;	ld hl, (os_tok_len) 
9f04			;;	pop bc 
9f04			;	ld c, l                
9f04			;	ld b,0 
9f04			;	ld hl, (os_tok_ptr) 
9f04			; 
9f04			;if DEBUG_FORTH_TOK 
9f04			;			DMARK "TKT" 
9f04			;	CALLMONITOR 
9f04			;endif 
9f04			; 
9f04			;	; do str cpy 
9f04			; 
9f04			;	ldir      ; copy byte in hl to de 
9f04			; 
9f04			;	; set end of buffer to high bit on zero term and use that for end of buffer scan 
9f04			; 
9f04			;if DEBUG_FORTH_TOK 
9f04			; 
9f04			;			DMARK "TKY" 
9f04			;	CALLMONITOR 
9f04			;endif 
9f04			;	;ld a,0 
9f04			;	;ld a,FORTH_END_BUFFER 
9f04			;	ex de, hl 
9f04			;	;dec hl			 ; go back over the space delim at the end of word 
9f04			;	;ld (hl),a 
9f04			;	;inc hl                    ;  TODO double check this. Going past the end of string to make sure end of processing buffer is marked 
9f04			;	ld a,FORTH_END_BUFFER 
9f04			;	ld (hl),a 
9f04			;	inc hl 
9f04			;	ld a,FORTH_END_BUFFER 
9f04			;	ld (hl),a 
9f04			; 
9f04			;	; init the malloc area data 
9f04			;	; set pc for in current area 
9f04			;	;ld hl, (os_tok_malloc) 
9f04			;	;inc hl 
9f04			;	;inc hl 
9f04			;	;inc hl 
9f04			;	;ex de,hl 
9f04			;	;ld hl, (os_tok_malloc) 
9f04			;	;ld (hl),e 
9f04			;	;inc hl 
9f04			;	;ld (hl),d 
9f04			; 
9f04			; 
9f04			;	ld hl,(os_tok_malloc) 
9f04			;if DEBUG_FORTH_PARSE_KEY 
9f04			;			DMARK "TKU" 
9f04			;	CALLMONITOR 
9f04			;endif 
9f04			; 
9f04			;	ret 
9f04			 
9f04			forthexec: 
9f04			 
9f04			; line exec: 
9f04			; forth parser 
9f04			 
9f04			; 
9f04			;       get current exec line on rsp 
9f04			 
9f04				FORTH_RSP_TOS 
9f04 cd 43 9a			call macro_forth_rsp_tos 
9f07				endm 
# End of macro FORTH_RSP_TOS
9f07			 
9f07			;       restore current pc - hl points to malloc of data 
9f07			 
9f07				;ld e, (hl) 
9f07				;inc hl 
9f07				;ld d, (hl) 
9f07				;ex de,hl 
9f07			 
9f07			 
9f07			exec1: 
9f07 22 bc e5			ld (os_tok_ptr), hl 
9f0a			 
9f0a				; copy our PC to working vars  
9f0a 22 3a ea			ld (cli_ptr), hl 
9f0d 22 38 ea			ld (cli_origptr), hl 
9f10			 
9f10 7e				ld a,(hl) 
9f11 fe 7f			cp FORTH_END_BUFFER 
9f13 c8				ret z 
9f14			 
9f14				; skip any nulls 
9f14			 
9f14 fe 00			cp 0 
9f16 20 03			jr nz, .execword 
9f18 23				inc hl 
9f19 18 ec			jr exec1 
9f1b			 
9f1b			 
9f1b			.execword: 
9f1b			 
9f1b			 
9f1b			 
9f1b			if DEBUG_FORTH_PARSE_KEY 
9f1b						DMARK "KYQ" 
9f1b				CALLMONITOR 
9f1b			endif 
9f1b			;       while at start of word: 
9f1b			; get start of dict (in user area first) 
9f1b			 
9f1b 21 f3 de		ld hl, baseram 
9f1e			;ld hl, sysdict 
9f1e 22 3c ea		ld (cli_nextword),hl 
9f21			;           match word at pc 
9f21			;           exec word 
9f21			;           or push to dsp 
9f21			;           forward to next token 
9f21			;           if line term pop rsp and exit 
9f21			;        
9f21			 
9f21			if DEBUG_FORTH_PARSE_KEY 
9f21						DMARK "KYq" 
9f21				CALLMONITOR 
9f21			endif 
9f21			 
9f21			; 
9f21			; word comp 
9f21			;    get compiled byte and save it (need to decide if code is compiled or not for comparison) 
9f21			;    if byte is 0 then end parsing and report failed lookup (or could be something to add to stack etc) 
9f21			;    move to start of word  
9f21			;    compare word to cli_token 
9f21			 
9f21			.execpnword:	; HL at start of a word in the dictionary to check 
9f21			;	ld hl,(cli_origptr)	 ; reset start of word to look up 
9f21			;	ld (cli_ptr), hl 
9f21			 
9f21 2a 3c ea			ld hl,(cli_nextword) 
9f24			 
9f24 cd c7 9f			call forth_tok_next 
9f27			; tok next start here 
9f27			;	; TODO skip compiled symbol for now 
9f27			;	inc hl 
9f27			; 
9f27			;	; save pointer to next word 
9f27			; 
9f27			;	; hl now points to the address of the next word pointer  
9f27			;	ld e, (hl) 
9f27			;	inc hl 
9f27			;	ld d, (hl) 
9f27			;	inc l 
9f27			; 
9f27			;	ex de,hl 
9f27			;if DEBUG_FORTH_PARSE_NEXTWORD 
9f27			;	push bc 
9f27			;	ld bc, (cli_nextword) 
9f27			;			DMARK "NXW" 
9f27			;	CALLMONITOR 
9f27			;	pop bc 
9f27			;endif 
9f27			; tok next end here 
9f27 22 3c ea			ld (cli_nextword), hl     ; save for next check if no match on this word 
9f2a eb				ex de, hl 
9f2b			 
9f2b			 
9f2b				; save the pointer of the current token - 1 to check against 
9f2b				 
9f2b 22 40 ea			ld (cli_token), hl   
9f2e				; TODO maybe remove below save if no debug 
9f2e				; save token string ptr for any debug later 
9f2e 23				inc hl  
9f2f 22 42 ea			ld (cli_origtoken), hl 
9f32 2b				dec hl 
9f33				; save pointer to the start of the next dictionay word 
9f33 7e				ld a,(hl)   ; get string length 
9f34 47				ld b,a 
9f35			.execpnwordinc:  
9f35 23				inc hl 
9f36 10 fd			djnz .execpnwordinc 
9f38 22 3e ea			ld (cli_execword), hl      ; save start of this words code 
9f3b			 
9f3b				; now check the word token against the string being parsed 
9f3b			 
9f3b 2a 40 ea			ld hl,(cli_token) 
9f3e 23				inc hl     ; skip string length (use zero term instead to end) 
9f3f 22 40 ea			ld (cli_token), hl 
9f42			 
9f42			if DEBUG_FORTH_PARSE_KEY 
9f42						DMARK "KY2" 
9f42			endif 
9f42			if DEBUG_FORTH_PARSE_EXEC 
9f42				; see if disabled 
9f42			 
9f42			;	ld a, (os_view_disable) 
9f42			;	cp '*' 
9f42				ld a, (debug_vector) 
9f42				cp $c9   ; RET  
9f42				jr z, .skip 
9f42			 
9f42				push hl 
9f42				push hl 
9f42				call clear_display 
9f42				ld de, .compword 
9f42				ld a, display_row_1 
9f42				call str_at_display 
9f42				pop de 
9f42				ld a, display_row_2 
9f42				call str_at_display 
9f42				ld hl,(cli_ptr) 
9f42				ld a,(hl) 
9f42			        ld hl, os_word_scratch 
9f42				ld (hl),a 
9f42				ld a,0 
9f42				inc hl 
9f42				ld (hl),a 	 
9f42				ld de, os_word_scratch 
9f42				ld a, display_row_2+10 
9f42				call str_at_display 
9f42				call update_display 
9f42				ld a, 100 
9f42				call aDelayInMS 
9f42				if DEBUG_FORTH_PARSE_EXEC_SLOW 
9f42				call delay250ms 
9f42				endif 
9f42				pop hl 
9f42			.skip:  
9f42			endif	 
9f42			.execpnchar:    ; compare char between token and string to parse 
9f42			 
9f42			if DEBUG_FORTH_PARSE_KEY 
9f42						DMARK "Ky3" 
9f42			endif 
9f42			if DEBUG_FORTH_PARSE_EXEC 
9f42				; see if disabled 
9f42			 
9f42			;	ld a, (os_view_disable) 
9f42			;	cp '*' 
9f42				ld a, (debug_vector) 
9f42				cp $C9  ; RET 
9f42				jr z, .skip2 
9f42			 
9f42			;	call clear_display 
9f42			ld hl,(cli_token) 
9f42			ld a,(hl) 
9f42			ld (os_word_scratch),a 
9f42				ld hl,(cli_ptr) 
9f42			ld a,(hl) 
9f42				ld (os_word_scratch+1),a 
9f42				ld a,0 
9f42				ld (os_word_scratch+2),a 
9f42				ld de,os_word_scratch 
9f42				ld a,display_row_4 
9f42				call str_at_display 
9f42				call update_display 
9f42			.skip2:  
9f42			endif 
9f42 2a 40 ea			ld hl,(cli_token) 
9f45 7e				ld a, (hl)	 ; char in word token 
9f46 23				inc hl 		; move to next char 
9f47 22 40 ea			ld (cli_token), hl ; and save it 
9f4a 47				ld b,a 
9f4b			 
9f4b 2a 3a ea			ld hl,(cli_ptr) ;	get the char from the string to parse 
9f4e 7e				ld a,(hl) 
9f4f 23				inc hl 
9f50 22 3a ea			ld (cli_ptr), hl		; move to next char 
9f53 cd 47 90			call toUpper 		; make sure the input string matches case 
9f56			 
9f56			if DEBUG_FORTH_PARSE 
9f56			endif 
9f56			 
9f56				; input stream end of token is a space so get rid of it 
9f56			 
9f56			;	cp ' ' 
9f56			;	jr nz, .pnskipspace 
9f56			; 
9f56			;	ld a, 0		; make same term as word token term 
9f56			; 
9f56			;.pnskipspace: 
9f56			 
9f56			if DEBUG_FORTH_PARSE_KEY 
9f56						DMARK "KY7" 
9f56			endif 
9f56 b8				cp b 
9f57 c2 6d 9f			jp nz, .execpnskipword	 ; no match so move to next word 
9f5a				 
9f5a			;    if same 
9f5a			;       scan for string terms 0 for token and 32 for input 
9f5a			 
9f5a				 
9f5a			if DEBUG_FORTH_PARSE_KEY 
9f5a						DMARK "KY8" 
9f5a			endif 
9f5a			 
9f5a 80				add b			 
9f5b fe 00			cp 0			 ; add both chars together, if 32 then other must be 0 so at end of string we are parsing? 
9f5d							; TODO need to make sure last word in zero term string is accounted for 
9f5d 20 e3			jr nz, .execpnchar 		 ; not at end of strings yet 
9f5f			 
9f5f			 
9f5f				; at end of both strings so both are exact match 
9f5f			 
9f5f			;       skip ptr for next word 
9f5f			 
9f5f 2a 3a ea			ld hl,(cli_ptr) 	; at input string term 
9f62 23				inc hl			 ; at next char 
9f63 22 3a ea			ld (cli_ptr), hl     ; save for next round of the parser 
9f66 22 38 ea			ld (cli_origptr), hl     ; save for any restart of current string ie a number or string to push to data stack 
9f69				 
9f69				 
9f69			if DEBUG_FORTH_PARSE_KEY 
9f69						DMARK "KY3" 
9f69			endif 
9f69			 
9f69			 
9f69			 
9f69			;       exec code block 
9f69			if DEBUG_FORTH_JP 
9f69				call clear_display 
9f69				call update_display 
9f69				call delay1s 
9f69				ld hl, (cli_execword)     ; save for next check if no match on this word 
9f69				ld a,h 
9f69				ld hl, os_word_scratch 
9f69				call hexout 
9f69				ld hl, (cli_execword)     ; save for next check if no match on this word 
9f69				ld a,l 
9f69				ld hl, os_word_scratch+2 
9f69				call hexout 
9f69				ld hl, os_word_scratch+4 
9f69				ld a,0 
9f69				ld (hl),a 
9f69				ld de,os_word_scratch 
9f69				call str_at_display 
9f69					ld a, display_row_2 
9f69					call str_at_display 
9f69				ld de, (cli_origtoken) 
9f69				ld a, display_row_1+10 
9f69					call str_at_display 
9f69			 
9f69				ld a,display_row_1 
9f69				ld de, .foundword 
9f69				ld a, display_row_3 
9f69				call str_at_display 
9f69				call update_display 
9f69				call delay1s 
9f69				call delay1s 
9f69				call delay1s 
9f69			endif 
9f69			 
9f69			if DEBUG_FORTH_PARSE_KEY 
9f69						DMARK "KYj" 
9f69			endif 
9f69				; TODO save the word pointer in this exec 
9f69			 
9f69 2a 3e ea			ld hl,(cli_execword) 
9f6c e9				jp (hl) 
9f6d			 
9f6d			 
9f6d			;    if not same 
9f6d			;	scan for zero term 
9f6d			;	get ptr for next word 
9f6d			;	goto word comp 
9f6d			 
9f6d			.execpnskipword:	; get pointer to next word 
9f6d 2a 3c ea			ld hl,(cli_nextword) 
9f70			 
9f70 7e				ld a,(hl) 
9f71 fe 00			cp WORD_SYS_END 
9f73			;	cp 0 
9f73 28 09			jr z, .execendofdict			 ; at end of words 
9f75			 
9f75			if DEBUG_FORTH_PARSE_KEY 
9f75						DMARK "KY4" 
9f75			endif 
9f75			if DEBUG_FORTH_PARSE_EXEC 
9f75			 
9f75				; see if disabled 
9f75			 
9f75			;	ld a, (os_view_disable) 
9f75			;	cp '*' 
9f75				ld a,(debug_vector) 
9f75				cp $c9   ; RET 
9f75				jr z, .noskip 
9f75			 
9f75			 
9f75				ld de, .nowordfound 
9f75				ld a, display_row_3 
9f75				call str_at_display 
9f75				call update_display 
9f75				ld a, 100 
9f75				call aDelayInMS 
9f75				 
9f75				if DEBUG_FORTH_PARSE_EXEC_SLOW 
9f75					call delay250ms 
9f75				endif 
9f75			.noskip:  
9f75			 
9f75			endif	 
9f75			 
9f75 2a 38 ea			ld hl,(cli_origptr) 
9f78 22 3a ea			ld (cli_ptr),hl 
9f7b			 
9f7b			if DEBUG_FORTH_PARSE_KEY 
9f7b						DMARK "KY5" 
9f7b			endif 
9f7b c3 21 9f			jp .execpnword			; else go to next word 
9f7e			 
9f7e			.execendofdict:  
9f7e			 
9f7e			if DEBUG_FORTH_PARSE_KEY 
9f7e						DMARK "KYe" 
9f7e			endif 
9f7e			if DEBUG_FORTH_PARSE_EXEC 
9f7e				; see if disabled 
9f7e			 
9f7e			;	ld a, (os_view_disable) 
9f7e			;	cp '*' 
9f7e				ld a,(debug_vector) 
9f7e				cp $c9   ; ret 
9f7e				jr z, .ispskip 
9f7e			 
9f7e				call clear_display 
9f7e				call update_display 
9f7e				call delay1s 
9f7e				ld de, (cli_origptr) 
9f7e				ld a, display_row_1 
9f7e				call str_at_display 
9f7e				 
9f7e				ld de, .enddict 
9f7e				ld a, display_row_3 
9f7e				call str_at_display 
9f7e				call update_display 
9f7e				ld a, 100 
9f7e				call aDelayInMS 
9f7e				if DEBUG_FORTH_PARSE_EXEC_SLOW 
9f7e				call delay1s 
9f7e				call delay1s 
9f7e				call delay1s 
9f7e				endif 
9f7e			.ispskip:  
9f7e				 
9f7e			endif	 
9f7e			 
9f7e			 
9f7e			 
9f7e				; if the word is not a keyword then must be a literal so push it to stack 
9f7e			 
9f7e			; push token to stack to end of word 
9f7e			 
9f7e				STACKFRAME ON $1efe $2f9f 
9f7e				if DEBUG_STACK_IMB 
9f7e					if ON 
9f7e						exx 
9f7e						ld de, $1efe 
9f7e						ld a, d 
9f7e						ld hl, curframe 
9f7e						call hexout 
9f7e						ld a, e 
9f7e						ld hl, curframe+2 
9f7e						call hexout 
9f7e						ld hl, $1efe 
9f7e						push hl 
9f7e						ld hl, $2f9f 
9f7e						push hl 
9f7e						exx 
9f7e					endif 
9f7e				endif 
9f7e			endm 
# End of macro STACKFRAME
9f7e			 
9f7e 2a bc e5		ld hl,(os_tok_ptr) 
9f81 cd ee 9b		call forth_apush 
9f84			 
9f84				STACKFRAMECHK ON $1efe $2f9f 
9f84				if DEBUG_STACK_IMB 
9f84					if ON 
9f84						exx 
9f84						ld hl, $2f9f 
9f84						pop de   ; $2f9f 
9f84						call cmp16 
9f84						jr nz, .spnosame 
9f84						ld hl, $1efe 
9f84						pop de   ; $1efe 
9f84						call cmp16 
9f84						jr z, .spfrsame 
9f84						.spnosame: call showsperror 
9f84						.spfrsame: nop 
9f84						exx 
9f84					endif 
9f84				endif 
9f84			endm 
# End of macro STACKFRAMECHK
9f84			 
9f84			execnext: 
9f84			 
9f84			if DEBUG_FORTH_PARSE_KEY 
9f84						DMARK "KY>" 
9f84			endif 
9f84			; move past token to next word 
9f84			 
9f84 2a bc e5		ld hl, (os_tok_ptr) 
9f87 3e 00		ld a, 0 
9f89 01 ff 00		ld bc, 255     ; input buffer size 
9f8c ed b1		cpir 
9f8e			 
9f8e			if DEBUG_FORTH_PARSE_KEY 
9f8e						DMARK "KY!" 
9f8e				CALLMONITOR 
9f8e			endif	 
9f8e			; TODO this might place hl on the null, so will need to forward on??? 
9f8e			;inc hl   ; see if this gets onto the next item 
9f8e			 
9f8e			 
9f8e			; TODO pass a pointer to the buffer to push 
9f8e			; TODO call function to push 
9f8e			 
9f8e			; look for end of input 
9f8e			 
9f8e			;inc hl 
9f8e			;ld a,(hl) 
9f8e			;cp FORTH_END_BUFFER 
9f8e			;ret z 
9f8e			 
9f8e			 
9f8e c3 07 9f		jp exec1 
9f91			 
9f91			 
9f91			 
9f91			 
9f91			 
9f91			 
9f91			 
9f91			 
9f91			 
9f91			findnexttok: 
9f91			 
9f91				; hl is pointer to move 
9f91				; de is the token to locate 
9f91			 
9f91					if DEBUG_FORTH 
9f91						DMARK "NTK" 
9f91						CALLMONITOR 
9f91					endif 
9f91 d5				push de 
9f92			 
9f92			.fnt1:	 
9f92				; find first char of token to locate 
9f92			 
9f92 1a				ld a, (de) 
9f93 4f				ld c,a 
9f94 7e				ld a,(hl) 
9f95 cd 47 90			call toUpper 
9f98					if DEBUG_FORTH 
9f98						DMARK "NT1" 
9f98						CALLMONITOR 
9f98					endif 
9f98 b9				cp c 
9f99			 
9f99 28 03			jr z, .fnt2cmpmorefirst	 
9f9b			 
9f9b				; first char not found move to next char 
9f9b			 
9f9b 23				inc hl 
9f9c 18 f4			jr .fnt1 
9f9e			 
9f9e			.fnt2cmpmorefirst:	 
9f9e				; first char of token found.  
9f9e			 
9f9e e5				push hl     ; save start of token just in case it is the right one 
9f9f d9				exx 
9fa0 e1				pop hl        ; save it to hl' 
9fa1 d9				exx 
9fa2			 
9fa2			 
9fa2			.fnt2cmpmore:	 
9fa2				; compare the rest 
9fa2				 
9fa2 23				inc hl 
9fa3 13				inc de 
9fa4				 
9fa4 1a				ld a, (de) 
9fa5 4f				ld c,a 
9fa6 7e				ld a,(hl) 
9fa7 cd 47 90			call toUpper 
9faa			 
9faa					if DEBUG_FORTH 
9faa						DMARK "NT2" 
9faa						CALLMONITOR 
9faa					endif 
9faa				; c has the token to find char 
9faa				; a has the mem to scan char 
9faa			 
9faa b9				cp c 
9fab 28 04			jr z,.fntmatch1 
9fad			 
9fad				; they are not the same 
9fad			 
9fad					if DEBUG_FORTH 
9fad						DMARK "NT3" 
9fad						CALLMONITOR 
9fad					endif 
9fad d1				pop de	; reset de token to look for 
9fae d5				push de 
9faf 18 e1			jr .fnt1 
9fb1				 
9fb1			.fntmatch1: 
9fb1			 
9fb1				; is the same char a null which means we might have a full hit? 
9fb1					if DEBUG_FORTH 
9fb1						DMARK "NT4" 
9fb1						CALLMONITOR 
9fb1					endif 
9fb1			 
9fb1 fe 00			cp 0 
9fb3 28 0b			jr z, .fntmatchyes 
9fb5			 
9fb5				; are we at the end of the token to find? 
9fb5			 
9fb5					if DEBUG_FORTH 
9fb5						DMARK "NT5" 
9fb5						CALLMONITOR 
9fb5					endif 
9fb5 3e 00			ld a, 0 
9fb7 b9				cp c 
9fb8			 
9fb8 c2 a2 9f			jp nz, .fnt2cmpmore    ; no, so keep going to a direct hit 
9fbb			 
9fbb					if DEBUG_FORTH 
9fbb						DMARK "NT6" 
9fbb						CALLMONITOR 
9fbb					endif 
9fbb				; token to find is exhusted but no match to stream 
9fbb			 
9fbb				; restore tok pointer and continue on 
9fbb d1				pop de 
9fbc d5				push de 
9fbd c3 92 9f			jp .fnt1 
9fc0			 
9fc0			 
9fc0			.fntmatchyes: 
9fc0			 
9fc0				; hl now contains the end of the found token 
9fc0			 
9fc0				; get rid of saved token pointer to find 
9fc0			 
9fc0 d1				pop de 
9fc1			 
9fc1					if DEBUG_FORTH 
9fc1						DMARK "NT9" 
9fc1						CALLMONITOR 
9fc1					endif 
9fc1			 
9fc1				; hl will be on the null term so forward on 
9fc1			 
9fc1				; get back the saved start of the token 
9fc1			 
9fc1 d9				exx 
9fc2 e5				push hl     ; save start of token just in case it is the right one 
9fc3 d9				exx 
9fc4 e1				pop hl        ; save it to hl 
9fc5			 
9fc5 c9				ret 
9fc6			 
9fc6			 
9fc6			; LIST needs to find a specific token   
9fc6			; FORGET needs to find a spefici token 
9fc6			 
9fc6			; SAVE needs to find all tokens by flag 
9fc6			; WORDS just needs to scan through all  by flag 
9fc6			; UWORDS needs to scan through all by flag 
9fc6			 
9fc6			 
9fc6			; given hl as pointer to start of dict look up string 
9fc6			; return hl as pointer to start of word block 
9fc6			; or 0 if not found 
9fc6			 
9fc6			forth_find_tok: 
9fc6 c9				ret 
9fc7			 
9fc7			; given hl as pointer to dict structure 
9fc7			; move to the next dict block structure 
9fc7			 
9fc7			forth_tok_next: 
9fc7				; hl now points to the address of the next word pointer  
9fc7				; TODO skip compiled symbol for now 
9fc7			;	push de 
9fc7 23				inc hl 
9fc8 5e				ld e, (hl) 
9fc9 23				inc hl 
9fca 56				ld d, (hl) 
9fcb 23				inc hl 
9fcc			 
9fcc eb				ex de,hl 
9fcd			if DEBUG_FORTH_PARSE_NEXTWORD 
9fcd				push bc 
9fcd				ld bc, (cli_nextword) 
9fcd						DMARK "NXW" 
9fcd				CALLMONITOR 
9fcd				pop bc 
9fcd			endif 
9fcd			;	pop de	 
9fcd c9				ret 
9fce			 
9fce			 
9fce			 
9fce			; eof 
# End of file forth_parserv5.asm
9fce				include "forth_wordsv4.asm" 
9fce			 
9fce			; the core word dictionary v4 
9fce			; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Notation.html#Notation 
9fce			 
9fce			; this is a linked list for each of the system words used 
9fce			; user defined words will follow the same format but will be in ram 
9fce			 
9fce			 
9fce			; 
9fce			; 
9fce			; define linked list: 
9fce			; 
9fce			; 1. compiled byte op code 
9fce			; 2. len of text word 
9fce			; 3. text word 
9fce			; 4. ptr to next dictionary word 
9fce			; 5. asm, calls etc for the word 
9fce			; 
9fce			;  if 1 == 0 then last word in dict  
9fce			;   
9fce			; set the start of dictionary scanning to be in ram and the last word point to the system dict 
9fce			;  
9fce			;  
9fce			; create basic standard set of words 
9fce			; 
9fce			;  
9fce			; + - / * DUP EMIT . SWAP IF..THEN..ELSE DO..LOOP  : ; DROP  
9fce			; 2DUP 2DROP 2SWAP  
9fce			; @ C@ - get byte  
9fce			; ! C! - store byte 
9fce			; 0< true if less than zero 
9fce			; 0= true if zero 
9fce			; < >  
9fce			; = true if same 
9fce			; variables 
9fce			 
9fce			 
9fce			; Hardware specific words I may need 
9fce			; 
9fce			; IN OUT  
9fce			; calls to key util functions 
9fce			; calls to hardward abstraction stuff 
9fce			; easy control of frame buffers and lcd i/o 
9fce			; keyboard  
9fce			 
9fce			 
9fce			;DICT: macro 
9fce			; op_code, len, word, next 
9fce			;    word: 
9fce			;    db op_code 
9fce			;    ds word zero term 
9fce			;    dw next 
9fce			;    endm 
9fce			 
9fce			 
9fce			 
9fce			 
9fce			; op code 1 is a flag for user define words which are to be handled differently 
9fce			 
9fce			 
9fce			; 
9fce			; 
9fce			;    TODO on entry to a word this should be the expected environment 
9fce			;    hl - tos value if number then held, if string this is the ptr 
9fce			;    de -  
9fce			 
9fce			 
9fce			; opcode ranges 
9fce			; 0 - end of word dict 
9fce			; 255 - user define words 
9fce			 
9fce			sysdict: 
9fce			include "forth_opcodes.asm" 
9fce			; op codes for forth keywords 
9fce			 
9fce			; Changing use of opcodes to flag is the word exists in compiled form or not.  
9fce			; This provides a means to compile uwords if required for higher performance 
9fce			; by avoiding the use of the keyword parser and just jumping directly to the code 
9fce			; Actually there is already a flag for if the code exists as binary thinking about it... 
9fce			 
9fce			 
9fce			 
9fce			 
9fce			 
9fce			; free to use code 0  
9fce				OPCODE_HEAP: equ  1 
9fce				OPCODE_EXEC: equ 2 
9fce				OPCODE_DUP: equ 3 
9fce				OPCODE_SWAP: equ 4 
9fce				OPCODE_COLN: equ 5 
9fce				OPCODE_SCOLN: equ 6 
9fce				OPCODE_DROP: equ 7 
9fce				OPCODE_DUP2: equ 8 
9fce				OPCODE_DROP2: equ 9 
9fce				OPCODE_SWAP2: equ 10 
9fce				OPCODE_AT: equ 11 
9fce				OPCODE_CAT: equ 12 
9fce				OPCODE_BANG: equ 13 
9fce				OPCODE_CBANG: equ 14 
9fce				OPCODE_SCALL: equ 15 
9fce				OPCODE_DEPTH: equ 16 
9fce				OPCODE_OVER: equ 17 
9fce				OPCODE_PAUSE: equ 18 
9fce				OPCODE_PAUSES: equ 19 
9fce				OPCODE_ROT: equ 20 
9fce			;free to reuse	OPCODE_WORDS: equ 21 
9fce			        OPCODE_NOT: equ 21 
9fce				OPCODE_UWORDS: equ 22 
9fce				OPCODE_BP: equ 23 
9fce				OPCODE_MONITOR: equ 24  
9fce				OPCODE_MALLOC: equ 25 
9fce				OPCODE_FREE: equ 26 
9fce				OPCODE_LIST: equ 27 
9fce				OPCODE_FORGET: equ 28 
9fce				OPCODE_NOP: equ 29 
9fce				OPCODE_COMO: equ 30 
9fce				OPCODE_COMC: equ 31 
9fce			;free to reuse	OPCODE_ENDCORE: equ 32 
9fce				OPCODE_AFTERSOUND: equ 33 
9fce				OPCODE_GP2: equ 34 
9fce				OPCODE_GP3: equ 35 
9fce				OPCODE_GP4: equ 36 
9fce				OPCODE_SIN: equ 37 
9fce				OPCODE_SOUT: equ 38 
9fce				OPCODE_SPIO: equ 39 
9fce				OPCODE_SPICEH: equ 40 
9fce				OPCODE_SPIOb: equ 41 
9fce				OPCODE_SPII: equ 42 
9fce				OPCODE_SESEL: equ 43 
9fce				OPCODE_CARTDEV: equ 44 
9fce			; free to reuse	OPCODE_ENDDEVICE: equ 45 
9fce				OPCODE_FB: equ 46 
9fce				OPCODE_EMIT: equ 47 
9fce				OPCODE_DOTH: equ 48 
9fce				OPCODE_DOTF: equ 49 
9fce				OPCODE_DOT: equ 50 
9fce				OPCODE_CLS: equ 51 
9fce				OPCODE_DRAW: equ 52 
9fce				OPCODE_DUMP: equ 53 
9fce				OPCODE_CDUMP: equ 54 
9fce				OPCODE_DAT: equ 55 
9fce				OPCODE_HOME: equ 56 
9fce				OPCODE_SPACE: equ 57 
9fce				OPCODE_SPACES: equ 58 
9fce				OPCODE_SCROLL: equ 59 
9fce				OPCODE_ATQ: equ 60 
9fce				OPCODE_AUTODSP: equ 61 
9fce				OPCODE_MENU: equ 62 
9fce			; free to reuse	OPCODE_ENDDISPLAY: equ 63  
9fce				OPCODE_THEN: equ 64 
9fce				OPCODE_ELSE: equ 65 
9fce				OPCODE_DO: equ 66 
9fce				OPCODE_LOOP: equ 67 
9fce				OPCODE_I: equ 68 
9fce				OPCODE_DLOOP: equ 69  
9fce				OPCODE_REPEAT: equ 70  
9fce				OPCODE_UNTIL: equ 71 
9fce				OPCODE_ENDFLOW: equ 72 
9fce				OPCODE_WAITK: equ 73 
9fce				OPCODE_ACCEPT: equ 74 
9fce				OPCODE_EDIT: equ 75 
9fce			;free to reuse	OPCODE_ENDKEY: equ 76 
9fce				OPCODE_LZERO: equ 77 
9fce				OPCODE_TZERO: equ 78 
9fce				OPCODE_LESS: equ 79 
9fce				OPCODE_GT: equ 80 
9fce				OPCODE_EQUAL: equ 81  
9fce			;free to reuse	OPCODE_ENDLOGIC: equ 82 
9fce				OPCODE_NEG: equ 83 
9fce				OPCODE_DIV: equ 84 
9fce				OPCODE_MUL: equ 85 
9fce				OPCODE_MIN: equ 86 
9fce				OPCODE_MAX: equ 87 
9fce				OPCODE_RND16: equ 88 
9fce				OPCODE_RND8: equ 89 
9fce				OPCODE_RND: equ 90 
9fce			;free to reuse	OPCODE_ENDMATHS: equ 91  
9fce				OPCODE_BYNAME: equ 92 
9fce				OPCODE_DIR: equ 93 
9fce				OPCODE_SAVE: equ 94 
9fce				OPCODE_LOAD: equ 95 
9fce				OPCODE_BSAVE: equ 96 
9fce				OPCODE_BLOAD: equ 97 
9fce				OPCODE_SEO: equ 98  
9fce				OPCODE_SEI: equ 99 
9fce				OPCODE_SFREE: equ 100 
9fce				OPCODE_SIZE: equ 101 
9fce				OPCODE_CREATE: equ 102 
9fce				OPCODE_APPEND: equ 103 
9fce				OPCODE_SDEL: equ 104 
9fce				OPCODE_OPEN: equ 105 
9fce				OPCODE_READ: equ 106 
9fce				OPCODE_EOF: equ 106 
9fce				OPCODE_FORMAT: equ 107 
9fce				OPCODE_LABEL: equ 108 
9fce				OPCODE_LABELS: equ 109 
9fce			;free to reuse	OPCODE_ENDSTORAGE: equ 110  
9fce				OPCODE_UPPER: equ 111 
9fce				OPCODE_LOWER: equ 112 
9fce				OPCODE_SUBSTR: equ 113 
9fce				OPCODE_LEFT: equ 114 
9fce				OPCODE_RIGHT: equ 115 
9fce				OPCODE_STR2NUM: equ 116 
9fce				OPCODE_NUM2STR: equ 117 
9fce				OPCODE_CONCAT: equ 118 
9fce				OPCODE_FIND: equ 119 
9fce				OPCODE_LEN: equ 120 
9fce				OPCODE_CHAR: equ 121 
9fce			; free to reuse	OPCODE_STRLEN: equ 122 
9fce			; free to reuse	OPCODE_ENDSTR: equ 123 
9fce				OPCODE_V0S: equ 124 
9fce				OPCODE_V0Q: equ 125 
9fce				OPCODE_V1S: equ 126 
9fce				OPCODE_V1Q: equ 127 
9fce				OPCODE_V2S: equ 128 
9fce				OPCODE_V2Q: equ 129 
9fce				OPCODE_V3S: equ 130 
9fce				OPCODE_V3Q: equ 131 
9fce			;free to reuse	OPCODE_END: equ 132 
9fce				OPCODE_ZDUP: equ 133 
9fce			 
9fce			; eof 
# End of file forth_opcodes.asm
9fce			 
9fce			include "forth_words_core.asm" 
9fce			 
9fce			; | ## Core Words 
9fce			 
9fce			;if MALLOC_4 
9fce			 
9fce			.HEAP: 
9fce			CWHEAD .EXEC OPCODE_HEAP "HEAP" 4 WORD_FLAG_CODE 
9fce 15				db WORD_SYS_CORE+OPCODE_HEAP             
9fcf 0d a0			dw .EXEC            
9fd1 05				db 4 + 1 
9fd2 .. 00			db "HEAP",0              
9fd7				endm 
# End of macro CWHEAD
9fd7			; | HEAP ( -- u1 u2 )   Pushes u1 the current number of bytes in the heap and u2 the remaining bytes - Only present if using my MALLOC | DONE 
9fd7			; | | u1 - Current number of bytes in the heap 
9fd7			; | | u2 - Remaining bytes left on the heap 
9fd7			; | |  
9fd7			; | | The heap is used for storing user defined words as well as any values pushed to stack. 
9fd7			 
9fd7			 
9fd7				if DEBUG_FORTH_WORDS_KEY 
9fd7					DMARK "HEP" 
9fd7 f5				push af  
9fd8 3a ec 9f			ld a, (.dmark)  
9fdb 32 65 ee			ld (debug_mark),a  
9fde 3a ed 9f			ld a, (.dmark+1)  
9fe1 32 66 ee			ld (debug_mark+1),a  
9fe4 3a ee 9f			ld a, (.dmark+2)  
9fe7 32 67 ee			ld (debug_mark+2),a  
9fea 18 03			jr .pastdmark  
9fec ..			.dmark: db "HEP"  
9fef f1			.pastdmark: pop af  
9ff0			endm  
# End of macro DMARK
9ff0					CALLMONITOR 
9ff0 cd 6f ee			call debug_vector  
9ff3				endm  
# End of macro CALLMONITOR
9ff3				endif 
9ff3 2a fd de			ld hl, (free_list )      
9ff6 11 02 df			ld de, heap_start 
9ff9			 
9ff9 ed 52			sbc hl, de  
9ffb			 
9ffb cd 85 9a			call forth_push_numhl 
9ffe			 
9ffe			 
9ffe ed 5b fd de		ld de, (free_list )      
a002 21 96 e2			ld hl, heap_end 
a005			 
a005 ed 52			sbc hl, de 
a007			 
a007 cd 85 9a			call forth_push_numhl 
a00a				 
a00a			 
a00a				 
a00a			 
a00a			 
a00a			 
a00a				NEXTW 
a00a c3 76 9e			jp macro_next 
a00d				endm 
# End of macro NEXTW
a00d			;endif 
a00d			 
a00d			.EXEC: 
a00d			;	CWHEAD .STKEXEC OPCODE_EXEC "EXEC" 4 WORD_FLAG_CODE 
a00d			;; > EXEC ( u -- )    Execs the string on TOS as a FORTH expression > CRASHES ON NEXTW 
a00d			;; > > u - A qutoed string which can consist of any valid Forth expression excluding : defintions (use LOAD instead) 
a00d			;; > > 
a00d			;; > >   
a00d			;	STACKFRAME OFF $5efe $5f9f 
a00d			; 
a00d			;		if DEBUG_FORTH_WORDS_KEY 
a00d			;			DMARK "EXE" 
a00d			;			CALLMONITOR 
a00d			;		endif 
a00d			; 
a00d			;	FORTH_DSP_VALUEHL 
a00d			; 
a00d			;	FORTH_DSP_POP 
a00d			; 
a00d			;		if DEBUG_FORTH_WORDS 
a00d			;			DMARK "EX1" 
a00d			;			CALLMONITOR 
a00d			;		endif 
a00d			;;	ld e,(hl) 
a00d			;;	inc hl 
a00d			;;	ld d,(hl) 
a00d			;;	ex de,hl 
a00d			; 
a00d			;;		if DEBUG_FORTH_WORDS 
a00d			;;			DMARK "EX2" 
a00d			;;			CALLMONITOR 
a00d			;;		endif 
a00d			;	push hl 
a00d			; 
a00d			;	;ld a, 0 
a00d			;	;ld a, FORTH_END_BUFFER 
a00d			;	call strlenz 
a00d			;	inc hl   ; include zero term to copy 
a00d			;	inc hl   ; include term 
a00d			;	inc hl   ; include term 
a00d			;	ld b,0 
a00d			;	ld c,l 
a00d			;	pop hl 
a00d			;	ld de, execscratch 
a00d			;		if DEBUG_FORTH_WORDS 
a00d			;			DMARK "EX3" 
a00d			;			CALLMONITOR 
a00d			;		endif 
a00d			;	ldir 
a00d			; 
a00d			; 
a00d			;	ld hl, execscratch 
a00d			; 
a00d			;		if DEBUG_FORTH_WORDS 
a00d			;			DMARK "EXe" 
a00d			;			CALLMONITOR 
a00d			;		endif 
a00d			; 
a00d			;	call forthparse 
a00d			;	call forthexec 
a00d			;;	call forthexec_cleanup 
a00d			;;	call forthparse 
a00d			;;	call forthexec 
a00d			; 
a00d			;	STACKFRAMECHK OFF $5efe $5f9f 
a00d			; 
a00d			;	; an immediate word so no need to process any more words 
a00d			;	ret 
a00d			;	NEXTW 
a00d			 
a00d			; dead code - old version  
a00d			;	FORTH_RSP_NEXT 
a00d			 
a00d			;  
a00d			;	ld bc,(cli_ptr)   ; move to next token to parse in the input stream 
a00d			;	ld de,(cli_origptr)   ; move to next token to parse in the input stream 
a00d			;	ld hl,(os_tok_ptr)   ; move to next token to parse in the input stream 
a00d			;	push hl 
a00d			;	push de 
a00d			;	push bc 
a00d			; 
a00d			; 
a00d			;		if DEBUG_FORTH_WORDS_KEY 
a00d			;			DMARK "EXR" 
a00d			;			CALLMONITOR 
a00d			;		endif 
a00d			; 
a00d			; 
a00d			; 
a00d			;	;v5 FORTH_DSP_VALUE 
a00d			;	FORTH_DSP_VALUEHL 
a00d			; 
a00d			;	; TODO do string type checks 
a00d			; 
a00d			;;v5	inc hl   ; skip type 
a00d			; 
a00d			;	push hl  ; source code  
a00d			;		if DEBUG_FORTH_WORDS 
a00d			;			DMARK "EX1" 
a00d			;			CALLMONITOR 
a00d			;		endif 
a00d			;	ld a, 0 
a00d			;	call strlent 
a00d			; 
a00d			;	inc hl 
a00d			;	inc hl 
a00d			;	inc hl 
a00d			;	inc hl 
a00d			; 
a00d			;	push hl    ; size 
a00d			; 
a00d			;		if DEBUG_FORTH_WORDS 
a00d			;			DMARK "EX2" 
a00d			;			CALLMONITOR 
a00d			;		endif 
a00d			;	call malloc 
a00d			; 
a00d			;	ex de, hl    ; de now contains malloc area 
a00d			;	pop bc   	; get byte count 
a00d			;	pop hl      ; get string to copy 
a00d			; 
a00d			;	push de     ; save malloc for free later 
a00d			; 
a00d			;		if DEBUG_FORTH_WORDS 
a00d			;			DMARK "EX3" 
a00d			;			CALLMONITOR 
a00d			;		endif 
a00d			;	ldir       ; duplicate string 
a00d			; 
a00d			;	; at the end of the string so go back the three extra spaces and fill in with extra terms 
a00d			;	 
a00d			;	; TODO fix the parse would be better than this...  
a00d			;	ex de, hl 
a00d			;	dec hl 
a00d			;	ld a, 0 
a00d			;	ld (hl), a 
a00d			;	dec hl 
a00d			;	ld a, ' ' 
a00d			;	ld (hl), a 
a00d			;	dec hl 
a00d			;	ld (hl), a 
a00d			; 
a00d			;	dec hl 
a00d			;	ld (hl), a 
a00d			; 
a00d			; 
a00d			;	FORTH_DSP_POP  
a00d			; 
a00d			;	pop hl     
a00d			;	push hl    ; save malloc area 
a00d			; 
a00d			;		if DEBUG_FORTH_WORDS 
a00d			;			DMARK "EX4" 
a00d			;			CALLMONITOR 
a00d			;		endif 
a00d			; 
a00d			;	call forthparse 
a00d			;	call forthexec 
a00d			;	 
a00d			;	pop hl 
a00d			;	if DEBUG_FORTH_WORDS 
a00d			;		DMARK "EX5" 
a00d			;		CALLMONITOR 
a00d			;	endif 
a00d			; 
a00d			;	if FORTH_ENABLE_FREE 
a00d			;	call free 
a00d			;	endif 
a00d			; 
a00d			;	if DEBUG_FORTH_WORDS 
a00d			;		DMARK "EX6" 
a00d			;		CALLMONITOR 
a00d			;	endif 
a00d			; 
a00d			;	pop bc 
a00d			;	pop de 
a00d			;	pop hl 
a00d			;;	FORTH_RSP_POP	  
a00d			;	ld (cli_ptr),bc   ; move to next token to parse in the input stream 
a00d			;	ld (cli_origptr),de   ; move to next token to parse in the input stream 
a00d			;	ld (os_tok_ptr),hl   ; move to next token to parse in the input stream 
a00d			; 
a00d			;	if DEBUG_FORTH_WORDS 
a00d			;		DMARK "EX7" 
a00d			;		CALLMONITOR 
a00d			;	endif 
a00d			;	NEXTW 
a00d			 
a00d			;.STKEXEC: 
a00d			;	CWHEAD .ZDUP 43 "STKEXEC" 7 WORD_FLAG_CODE 
a00d			;; > STKEXEC ( u .. u c -- ) Taking c count of strings off of the stack the strings are evaluated as code > TO TEST 
a00d			; 
a00d			; 
a00d			;		if DEBUG_FORTH_WORDS_KEY 
a00d			;			DMARK "STX" 
a00d			;			CALLMONITOR 
a00d			;		endif 
a00d			; 
a00d			;	FORTH_DSP_VALUEHL 
a00d			; 
a00d			;	ld (store_tmp1), hl    ; count 
a00d			; 
a00d			;	FORTH_DSP_POP 
a00d			;.stkexec1: 
a00d			;	ld hl, (store_tmp1)   ; count 
a00d			;	ld a, 0 
a00d			;	cp l 
a00d			;	ret z 
a00d			; 
a00d			;	dec hl 
a00d			;	ld (store_tmp1), hl    ; count 
a00d			;	 
a00d			;	FORTH_DSP_VALUEHL 
a00d			;	push hl 
a00d			;	 
a00d			;		if DEBUG_FORTH_WORDS 
a00d			;			DMARK "EXp" 
a00d			;			CALLMONITOR 
a00d			;		endif 
a00d			;	FORTH_DSP_POP 
a00d			; 
a00d			;	call strlenz 
a00d			;	inc hl   ; include zero term to copy 
a00d			;	inc hl   ; include zero term to copy 
a00d			;	inc hl   ; include zero term to copy 
a00d			;	ld b,0 
a00d			;	ld c,l 
a00d			;	pop hl 
a00d			;	ld de, execscratch 
a00d			;		if DEBUG_FORTH_WORDS 
a00d			;			DMARK "EX3" 
a00d			;			CALLMONITOR 
a00d			;		endif 
a00d			;	ldir 
a00d			; 
a00d			; 
a00d			;	ld hl, execscratch 
a00d			; 
a00d			;		if DEBUG_FORTH_WORDS 
a00d			;			DMARK "EXP" 
a00d			;			CALLMONITOR 
a00d			;		endif 
a00d			; 
a00d			;	call forthparse 
a00d			;	ld hl, execscratch 
a00d			;		if DEBUG_FORTH_WORDS 
a00d			;			DMARK "EXx" 
a00d			;			CALLMONITOR 
a00d			;		endif 
a00d			;	call forthexec 
a00d			; 
a00d			;	jp .stkexec1 
a00d			; 
a00d			;	ret 
a00d			 
a00d			 
a00d			.DUP: 
a00d			CWHEAD .ZDUP OPCODE_DUP "DUP" 3 WORD_FLAG_CODE 
a00d 17				db WORD_SYS_CORE+OPCODE_DUP             
a00e 83 a0			dw .ZDUP            
a010 04				db 3 + 1 
a011 .. 00			db "DUP",0              
a015				endm 
# End of macro CWHEAD
a015			; | DUP ( u -- u u )     Duplicate whatever item is on TOS | DONE 
a015			 
a015				if DEBUG_FORTH_WORDS_KEY 
a015					DMARK "DUP" 
a015 f5				push af  
a016 3a 2a a0			ld a, (.dmark)  
a019 32 65 ee			ld (debug_mark),a  
a01c 3a 2b a0			ld a, (.dmark+1)  
a01f 32 66 ee			ld (debug_mark+1),a  
a022 3a 2c a0			ld a, (.dmark+2)  
a025 32 67 ee			ld (debug_mark+2),a  
a028 18 03			jr .pastdmark  
a02a ..			.dmark: db "DUP"  
a02d f1			.pastdmark: pop af  
a02e			endm  
# End of macro DMARK
a02e					CALLMONITOR 
a02e cd 6f ee			call debug_vector  
a031				endm  
# End of macro CALLMONITOR
a031				endif 
a031			 
a031				FORTH_DSP 
a031 cd 50 9c			call macro_forth_dsp 
a034				endm 
# End of macro FORTH_DSP
a034			 
a034 7e				ld a, (HL) 
a035 fe 01			cp DS_TYPE_STR 
a037 20 25			jr nz, .dupinum 
a039			 
a039				; push another string 
a039			 
a039				FORTH_DSP_VALUEHL     		 
a039 cd 8a 9c			call macro_dsp_valuehl 
a03c				endm 
# End of macro FORTH_DSP_VALUEHL
a03c			 
a03c			if DEBUG_FORTH_WORDS 
a03c				DMARK "DUs" 
a03c f5				push af  
a03d 3a 51 a0			ld a, (.dmark)  
a040 32 65 ee			ld (debug_mark),a  
a043 3a 52 a0			ld a, (.dmark+1)  
a046 32 66 ee			ld (debug_mark+1),a  
a049 3a 53 a0			ld a, (.dmark+2)  
a04c 32 67 ee			ld (debug_mark+2),a  
a04f 18 03			jr .pastdmark  
a051 ..			.dmark: db "DUs"  
a054 f1			.pastdmark: pop af  
a055			endm  
# End of macro DMARK
a055				CALLMONITOR 
a055 cd 6f ee			call debug_vector  
a058				endm  
# End of macro CALLMONITOR
a058			endif 
a058 cd f3 9a			call forth_push_str 
a05b			 
a05b				NEXTW 
a05b c3 76 9e			jp macro_next 
a05e				endm 
# End of macro NEXTW
a05e			 
a05e			 
a05e			.dupinum: 
a05e				 
a05e			 
a05e			 
a05e				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a05e cd 8a 9c			call macro_dsp_valuehl 
a061				endm 
# End of macro FORTH_DSP_VALUEHL
a061			 
a061			; TODO add floating point number detection 
a061			 
a061			if DEBUG_FORTH_WORDS 
a061				DMARK "DUi" 
a061 f5				push af  
a062 3a 76 a0			ld a, (.dmark)  
a065 32 65 ee			ld (debug_mark),a  
a068 3a 77 a0			ld a, (.dmark+1)  
a06b 32 66 ee			ld (debug_mark+1),a  
a06e 3a 78 a0			ld a, (.dmark+2)  
a071 32 67 ee			ld (debug_mark+2),a  
a074 18 03			jr .pastdmark  
a076 ..			.dmark: db "DUi"  
a079 f1			.pastdmark: pop af  
a07a			endm  
# End of macro DMARK
a07a				CALLMONITOR 
a07a cd 6f ee			call debug_vector  
a07d				endm  
# End of macro CALLMONITOR
a07d			endif 
a07d			 
a07d cd 85 9a			call forth_push_numhl 
a080				NEXTW 
a080 c3 76 9e			jp macro_next 
a083				endm 
# End of macro NEXTW
a083			.ZDUP: 
a083			CWHEAD .SWAP OPCODE_ZDUP "?DUP" 4 WORD_FLAG_CODE 
a083 99				db WORD_SYS_CORE+OPCODE_ZDUP             
a084 bb a0			dw .SWAP            
a086 05				db 4 + 1 
a087 .. 00			db "?DUP",0              
a08c				endm 
# End of macro CWHEAD
a08c			; | ?DUP ( u -- u u )     Duplicate item on TOS if the item is non-zero (Only works for numerics) | DONE 
a08c			 
a08c				if DEBUG_FORTH_WORDS_KEY 
a08c					DMARK "qDU" 
a08c f5				push af  
a08d 3a a1 a0			ld a, (.dmark)  
a090 32 65 ee			ld (debug_mark),a  
a093 3a a2 a0			ld a, (.dmark+1)  
a096 32 66 ee			ld (debug_mark+1),a  
a099 3a a3 a0			ld a, (.dmark+2)  
a09c 32 67 ee			ld (debug_mark+2),a  
a09f 18 03			jr .pastdmark  
a0a1 ..			.dmark: db "qDU"  
a0a4 f1			.pastdmark: pop af  
a0a5			endm  
# End of macro DMARK
a0a5					CALLMONITOR 
a0a5 cd 6f ee			call debug_vector  
a0a8				endm  
# End of macro CALLMONITOR
a0a8				endif 
a0a8				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a0a8 cd 8a 9c			call macro_dsp_valuehl 
a0ab				endm 
# End of macro FORTH_DSP_VALUEHL
a0ab			 
a0ab e5				push hl 
a0ac			 
a0ac				; is it a zero? 
a0ac			 
a0ac 3e 00			ld a, 0 
a0ae 84				add h 
a0af 85				add l 
a0b0			 
a0b0 e1				pop hl 
a0b1			 
a0b1 fe 00			cp 0 
a0b3 28 03			jr z, .dup2orig 
a0b5			 
a0b5			 
a0b5 cd 85 9a			call forth_push_numhl 
a0b8			 
a0b8			 
a0b8			; TODO add floating point number detection 
a0b8			 
a0b8			.dup2orig: 
a0b8			 
a0b8				NEXTW 
a0b8 c3 76 9e			jp macro_next 
a0bb				endm 
# End of macro NEXTW
a0bb			.SWAP: 
a0bb			CWHEAD .COLN OPCODE_SWAP "SWAP" 4 WORD_FLAG_CODE 
a0bb 18				db WORD_SYS_CORE+OPCODE_SWAP             
a0bc 0f a1			dw .COLN            
a0be 05				db 4 + 1 
a0bf .. 00			db "SWAP",0              
a0c4				endm 
# End of macro CWHEAD
a0c4			; | SWAP ( w1 w2 -- w2 w1 )    Swap top two items on TOS | DONE 
a0c4				if DEBUG_FORTH_WORDS_KEY 
a0c4					DMARK "SWP" 
a0c4 f5				push af  
a0c5 3a d9 a0			ld a, (.dmark)  
a0c8 32 65 ee			ld (debug_mark),a  
a0cb 3a da a0			ld a, (.dmark+1)  
a0ce 32 66 ee			ld (debug_mark+1),a  
a0d1 3a db a0			ld a, (.dmark+2)  
a0d4 32 67 ee			ld (debug_mark+2),a  
a0d7 18 03			jr .pastdmark  
a0d9 ..			.dmark: db "SWP"  
a0dc f1			.pastdmark: pop af  
a0dd			endm  
# End of macro DMARK
a0dd					CALLMONITOR 
a0dd cd 6f ee			call debug_vector  
a0e0				endm  
# End of macro CALLMONITOR
a0e0				endif 
a0e0			 
a0e0			; DONE Use os stack swap memory 
a0e0			 
a0e0				FORTH_DSP_PTR 0     ; TOS 
a0e0 2a e8 e9			ld hl,(cli_data_sp) 
a0e3 11 00 00			ld de, 0 * 3 
a0e6 ed 52			sbc hl, de 
a0e8				endm 
# End of macro FORTH_DSP_PTR
a0e8 cd c2 9d			call hltostack1 
a0eb			  
a0eb				FORTH_DSP_PTR 1     ; TOS 
a0eb 2a e8 e9			ld hl,(cli_data_sp) 
a0ee 11 03 00			ld de, 1 * 3 
a0f1 ed 52			sbc hl, de 
a0f3				endm 
# End of macro FORTH_DSP_PTR
a0f3 cd c8 9d			call hltostack2 
a0f6			 
a0f6				FORTH_DSP_PTR 0     ; TOS 
a0f6 2a e8 e9			ld hl,(cli_data_sp) 
a0f9 11 00 00			ld de, 0 * 3 
a0fc ed 52			sbc hl, de 
a0fe				endm 
# End of macro FORTH_DSP_PTR
a0fe cd e0 9d			call hlfromstack2 
a101			 
a101				FORTH_DSP_PTR 1     ; TOS 
a101 2a e8 e9			ld hl,(cli_data_sp) 
a104 11 03 00			ld de, 1 * 3 
a107 ed 52			sbc hl, de 
a109				endm 
# End of macro FORTH_DSP_PTR
a109 cd da 9d			call hlfromstack1 
a10c			;	FORTH_DSP_VALUEHL 
a10c			;	push hl     ; w2 
a10c			; 
a10c			;	FORTH_DSP_POP 
a10c			; 
a10c			;	FORTH_DSP_VALUEHL 
a10c			; 
a10c			;	FORTH_DSP_POP 
a10c			; 
a10c			;	pop de     ; w2	, hl = w1 
a10c			; 
a10c			;	ex de, hl 
a10c			;	push de 
a10c			; 
a10c			;	call forth_push_numhl 
a10c			; 
a10c			;	pop hl 
a10c			; 
a10c			;	call forth_push_numhl 
a10c				 
a10c			 
a10c				NEXTW 
a10c c3 76 9e			jp macro_next 
a10f				endm 
# End of macro NEXTW
a10f			.COLN: 
a10f			CWHEAD .SCOLN OPCODE_COLN ":" 1 WORD_FLAG_CODE 
a10f 19				db WORD_SYS_CORE+OPCODE_COLN             
a110 9b a2			dw .SCOLN            
a112 02				db 1 + 1 
a113 .. 00			db ":",0              
a115				endm 
# End of macro CWHEAD
a115			; | : ( -- )         Create new word | DONE 
a115			 
a115				if DEBUG_FORTH_WORDS_KEY 
a115					DMARK "CLN" 
a115 f5				push af  
a116 3a 2a a1			ld a, (.dmark)  
a119 32 65 ee			ld (debug_mark),a  
a11c 3a 2b a1			ld a, (.dmark+1)  
a11f 32 66 ee			ld (debug_mark+1),a  
a122 3a 2c a1			ld a, (.dmark+2)  
a125 32 67 ee			ld (debug_mark+2),a  
a128 18 03			jr .pastdmark  
a12a ..			.dmark: db "CLN"  
a12d f1			.pastdmark: pop af  
a12e			endm  
# End of macro DMARK
a12e					CALLMONITOR 
a12e cd 6f ee			call debug_vector  
a131				endm  
# End of macro CALLMONITOR
a131				endif 
a131			STACKFRAME OFF $8efe $989f 
a131				if DEBUG_STACK_IMB 
a131					if OFF 
a131						exx 
a131						ld de, $8efe 
a131						ld a, d 
a131						ld hl, curframe 
a131						call hexout 
a131						ld a, e 
a131						ld hl, curframe+2 
a131						call hexout 
a131						ld hl, $8efe 
a131						push hl 
a131						ld hl, $989f 
a131						push hl 
a131						exx 
a131					endif 
a131				endif 
a131			endm 
# End of macro STACKFRAME
a131			; get parser buffer length  of new word 
a131			 
a131			 
a131			 
a131				; move tok past this to start of name defintition 
a131				; TODO get word to define 
a131				; TODO Move past word token 
a131				; TODO get length of string up to the ';' 
a131			 
a131 2a bc e5		ld hl, (os_tok_ptr) 
a134 23			inc hl 
a135 23			inc hl 
a136			 
a136 3e 3b		ld a, ';' 
a138 cd 5b 90		call strlent 
a13b			 
a13b 7d			ld a,l 
a13c 32 ab e2		ld (os_new_parse_len), a 
a13f			 
a13f			 
a13f			if DEBUG_FORTH_UWORD 
a13f ed 5b bc e5	ld de, (os_tok_ptr) 
a143					DMARK ":01" 
a143 f5				push af  
a144 3a 58 a1			ld a, (.dmark)  
a147 32 65 ee			ld (debug_mark),a  
a14a 3a 59 a1			ld a, (.dmark+1)  
a14d 32 66 ee			ld (debug_mark+1),a  
a150 3a 5a a1			ld a, (.dmark+2)  
a153 32 67 ee			ld (debug_mark+2),a  
a156 18 03			jr .pastdmark  
a158 ..			.dmark: db ":01"  
a15b f1			.pastdmark: pop af  
a15c			endm  
# End of macro DMARK
a15c			CALLMONITOR 
a15c cd 6f ee			call debug_vector  
a15f				endm  
# End of macro CALLMONITOR
a15f			endif 
a15f			 
a15f			; 
a15f			;  new word memory layout: 
a15f			;  
a15f			;    : adg 6666 ;  
a15f			; 
a15f			;    db   1     ; user defined word  
a15f 23			inc hl    
a160			;    dw   sysdict 
a160 23			inc hl 
a161 23			inc hl 
a162			;    db <word len>+1 (for null) 
a162 23			inc hl 
a163			;    db .... <word> 
a163			; 
a163			 
a163 23			inc hl    ; some extras for the word preamble before the above 
a164 23			inc hl 
a165 23			inc hl 
a166 23			inc hl 
a167 23			inc hl 
a168 23			inc hl 
a169 23			inc hl  
a16a 23			inc hl 
a16b 23			inc hl 
a16c 23			inc hl 
a16d 23			inc hl 
a16e 23			inc hl 
a16f 23			inc hl 
a170 23			inc hl     ; TODO how many do we really need?     maybe only 6 
a171			;       exec word buffer 
a171			;	<ptr word>   
a171 23			inc hl 
a172 23			inc hl 
a173			;       <word list><null term> 7F final term 
a173			 
a173			 
a173			if DEBUG_FORTH_UWORD 
a173					DMARK ":02" 
a173 f5				push af  
a174 3a 88 a1			ld a, (.dmark)  
a177 32 65 ee			ld (debug_mark),a  
a17a 3a 89 a1			ld a, (.dmark+1)  
a17d 32 66 ee			ld (debug_mark+1),a  
a180 3a 8a a1			ld a, (.dmark+2)  
a183 32 67 ee			ld (debug_mark+2),a  
a186 18 03			jr .pastdmark  
a188 ..			.dmark: db ":02"  
a18b f1			.pastdmark: pop af  
a18c			endm  
# End of macro DMARK
a18c			CALLMONITOR 
a18c cd 6f ee			call debug_vector  
a18f				endm  
# End of macro CALLMONITOR
a18f			endif 
a18f			 
a18f			 
a18f				; malloc the size 
a18f			 
a18f cd c5 90			call malloc 
a192 22 ad e2			ld (os_new_malloc), hl     ; save malloc start 
a195			 
a195			;    db   1     ; user defined word  
a195 3e 01			ld a, WORD_SYS_UWORD  
a197 77				ld (hl), a 
a198			 
a198 23			inc hl    
a199			;    dw   sysdict 
a199 11 ce 9f		ld de, sysdict       ; continue on with the scan to the system dict 
a19c 73			ld (hl), e 
a19d 23			inc hl 
a19e 72			ld (hl), d 
a19f 23			inc hl 
a1a0			 
a1a0			 
a1a0			;    Setup dict word 
a1a0			 
a1a0 23			inc hl 
a1a1 22 a7 e2		ld (os_new_work_ptr), hl     ; save start of dict word  
a1a4			 
a1a4			; 1. get length of dict word 
a1a4			 
a1a4			 
a1a4 2a bc e5		ld hl, (os_tok_ptr) 
a1a7 23			inc hl 
a1a8 23			inc hl    ; position to start of dict word 
a1a9 3e 00		ld a, 0 
a1ab cd 5b 90		call strlent 
a1ae			 
a1ae			 
a1ae 23			inc hl    ; to include null??? 
a1af			 
a1af			; write length of dict word 
a1af			 
a1af ed 5b a7 e2	ld de, (os_new_work_ptr)   ; get dest for copy of word 
a1b3 1b			dec de 
a1b4 eb			ex de, hl 
a1b5 73			ld (hl), e 
a1b6 eb			ex de, hl 
a1b7			 
a1b7			 
a1b7			 
a1b7			; copy  
a1b7 4d			ld c, l 
a1b8 06 00		ld b, 0 
a1ba ed 5b a7 e2	ld de, (os_new_work_ptr)   ; get dest for copy of word 
a1be 2a bc e5		ld hl, (os_tok_ptr) 
a1c1 23			inc hl 
a1c2 23			inc hl    ; position to start of dict word 
a1c3			 
a1c3			;	ldir       ; copy word - HL now is where we need to be for copy of the line 
a1c3			 
a1c3			; TODO need to convert word to upper case 
a1c3			 
a1c3			ucasetok:	 
a1c3 7e			ld a,(hl) 
a1c4 cd 47 90		call toUpper 
a1c7 77			ld (hl),a 
a1c8 ed a0		ldi 
a1ca f2 c3 a1		jp p, ucasetok 
a1cd			 
a1cd			 
a1cd			 
a1cd			; de now points to start of where the word body code should be placed 
a1cd ed 53 a7 e2	ld (os_new_work_ptr), de 
a1d1			; hl now points to the words to throw at forthexec which needs to be copied 
a1d1 22 a5 e2		ld (os_new_src_ptr), hl 
a1d4			 
a1d4			; TODO add 'call to forthexec' 
a1d4			 
a1d4			if DEBUG_FORTH_UWORD 
a1d4 c5			push bc 
a1d5 ed 4b ad e2	ld bc, (os_new_malloc) 
a1d9					DMARK ":0x" 
a1d9 f5				push af  
a1da 3a ee a1			ld a, (.dmark)  
a1dd 32 65 ee			ld (debug_mark),a  
a1e0 3a ef a1			ld a, (.dmark+1)  
a1e3 32 66 ee			ld (debug_mark+1),a  
a1e6 3a f0 a1			ld a, (.dmark+2)  
a1e9 32 67 ee			ld (debug_mark+2),a  
a1ec 18 03			jr .pastdmark  
a1ee ..			.dmark: db ":0x"  
a1f1 f1			.pastdmark: pop af  
a1f2			endm  
# End of macro DMARK
a1f2			CALLMONITOR 
a1f2 cd 6f ee			call debug_vector  
a1f5				endm  
# End of macro CALLMONITOR
a1f5 c1			pop bc 
a1f6			endif 
a1f6			 
a1f6			 
a1f6			; create word preamble which should be: 
a1f6			 
a1f6			; TODO possibly push the current os_tok_ptr to rsp and the current rsp will be the start of the string and not current pc???? 
a1f6			 
a1f6			;    ld hl, <word code> 
a1f6			;    jp user_exec 
a1f6			;    <word code bytes> 
a1f6			 
a1f6			 
a1f6			;	inc de     ; TODO ??? or are we already past the word's null 
a1f6 eb			ex de, hl 
a1f7			 
a1f7 36 21		ld (hl), 021h     ; TODO get bytes poke "ld hl, " 
a1f9			 
a1f9 23			inc hl 
a1fa 22 a1 e2		ld (os_new_exec_ptr),hl     ; save this location to poke with the address of the word buffer 
a1fd 23			inc hl 
a1fe			 
a1fe 23			inc hl 
a1ff 36 c3		ld (hl), 0c3h     ; TODO get bytes poke "jp xx  " 
a201			 
a201 01 d1 cc		ld bc, user_exec 
a204 23			inc hl 
a205 71			ld (hl), c     ; poke address of user_exec 
a206 23			inc hl 
a207 70			ld (hl), b     
a208			; 
a208			;	inc hl 
a208			;	ld (hl), 0cdh     ; TODO get bytes poke "call  " 
a208			; 
a208			; 
a208			;	ld bc, macro_forth_rsp_next 
a208			;	inc hl 
a208			;	ld (hl), c     ; poke address of FORTH_RSP_NEXT 
a208			;	inc hl 
a208			;	ld (hl), b     
a208			; 
a208			;	inc hl 
a208			;	ld (hl), 0cdh     ; TODO get bytes poke "call  " 
a208			; 
a208			; 
a208			;	inc hl 
a208			;	ld bc, forthexec 
a208			;	ld (hl), c     ; poke address of forthexec 
a208			;	inc hl 
a208			;	ld (hl), b      
a208			; 
a208			;	inc hl 
a208			;	ld (hl), 0c3h     ; TODO get bytes poke "jp  " 
a208			; 
a208			;	ld bc, user_dict_next 
a208			;	inc hl 
a208			;	ld (hl), c     ; poke address of forthexec 
a208			;	inc hl 
a208			;	ld (hl), b      
a208			 
a208			; hl is now where we need to copy the word byte data to save this 
a208			 
a208 23			inc hl 
a209 22 a3 e2		ld (os_new_exec), hl 
a20c			 
a20c			; copy definition 
a20c			 
a20c eb			ex de, hl 
a20d			;	inc de    ; TODO BUG It appears the exec of a uword requires pc to be set 
a20d			;	inc de    ; skip the PC for this parse 
a20d 3a ab e2		ld a, (os_new_parse_len) 
a210 4f			ld c, a 
a211 06 00		ld b, 0 
a213 ed b0		ldir		 ; copy defintion 
a215			 
a215			 
a215			; poke the address of where the new word bytes live for forthexec 
a215			 
a215 2a a1 e2		ld hl, (os_new_exec_ptr)     ; TODO this isnt correct 
a218			 
a218 ed 5b a3 e2	ld de, (os_new_exec)      
a21c			 
a21c 73			ld (hl), e 
a21d 23			inc hl 
a21e 72			ld (hl), d 
a21f			 
a21f				; TODO copy last user dict word next link to this word 
a21f				; TODO update last user dict word to point to this word 
a21f			; 
a21f			; hl f923 de 812a ; bc 811a 
a21f			 
a21f			if DEBUG_FORTH_UWORD 
a21f c5			push bc 
a220 ed 4b ad e2	ld bc, (os_new_malloc) 
a224					DMARK ":0A" 
a224 f5				push af  
a225 3a 39 a2			ld a, (.dmark)  
a228 32 65 ee			ld (debug_mark),a  
a22b 3a 3a a2			ld a, (.dmark+1)  
a22e 32 66 ee			ld (debug_mark+1),a  
a231 3a 3b a2			ld a, (.dmark+2)  
a234 32 67 ee			ld (debug_mark+2),a  
a237 18 03			jr .pastdmark  
a239 ..			.dmark: db ":0A"  
a23c f1			.pastdmark: pop af  
a23d			endm  
# End of macro DMARK
a23d			CALLMONITOR 
a23d cd 6f ee			call debug_vector  
a240				endm  
# End of macro CALLMONITOR
a240 c1			pop bc 
a241			endif 
a241			if DEBUG_FORTH_UWORD 
a241 c5			push bc 
a242 ed 4b ad e2	ld bc, (os_new_malloc) 
a246 03			inc bc 
a247 03			inc bc 
a248 03			inc bc 
a249 03			inc bc 
a24a 03			inc bc 
a24b 03			inc bc 
a24c 03			inc bc 
a24d 03			inc bc 
a24e			 
a24e					DMARK ":0B" 
a24e f5				push af  
a24f 3a 63 a2			ld a, (.dmark)  
a252 32 65 ee			ld (debug_mark),a  
a255 3a 64 a2			ld a, (.dmark+1)  
a258 32 66 ee			ld (debug_mark+1),a  
a25b 3a 65 a2			ld a, (.dmark+2)  
a25e 32 67 ee			ld (debug_mark+2),a  
a261 18 03			jr .pastdmark  
a263 ..			.dmark: db ":0B"  
a266 f1			.pastdmark: pop af  
a267			endm  
# End of macro DMARK
a267			CALLMONITOR 
a267 cd 6f ee			call debug_vector  
a26a				endm  
# End of macro CALLMONITOR
a26a c1			pop bc 
a26b			endif 
a26b			 
a26b			; update word dict linked list for new word 
a26b			 
a26b			 
a26b 2a b8 e5		ld hl, (os_last_new_uword)		; get the start of the last added uword 
a26e 23			inc hl     ; move to next work linked list ptr 
a26f			 
a26f ed 5b ad e2	ld de, (os_new_malloc)		 ; new next word 
a273 73			ld (hl), e 
a274 23			inc hl 
a275 72			ld (hl), d 
a276			 
a276			if DEBUG_FORTH_UWORD 
a276 ed 4b b8 e5	ld bc, (os_last_new_uword)		; get the last word so we can check it worked in debug 
a27a			endif 
a27a			 
a27a ed 53 b8 e5	ld (os_last_new_uword), de      ; update last new uword ptr 
a27e			 
a27e			 
a27e			if DEBUG_FORTH_UWORD 
a27e					DMARK ":0+" 
a27e f5				push af  
a27f 3a 93 a2			ld a, (.dmark)  
a282 32 65 ee			ld (debug_mark),a  
a285 3a 94 a2			ld a, (.dmark+1)  
a288 32 66 ee			ld (debug_mark+1),a  
a28b 3a 95 a2			ld a, (.dmark+2)  
a28e 32 67 ee			ld (debug_mark+2),a  
a291 18 03			jr .pastdmark  
a293 ..			.dmark: db ":0+"  
a296 f1			.pastdmark: pop af  
a297			endm  
# End of macro DMARK
a297			CALLMONITOR 
a297 cd 6f ee			call debug_vector  
a29a				endm  
# End of macro CALLMONITOR
a29a			endif 
a29a			 
a29a			STACKFRAMECHK OFF $8efe $989f 
a29a				if DEBUG_STACK_IMB 
a29a					if OFF 
a29a						exx 
a29a						ld hl, $989f 
a29a						pop de   ; $989f 
a29a						call cmp16 
a29a						jr nz, .spnosame 
a29a						ld hl, $8efe 
a29a						pop de   ; $8efe 
a29a						call cmp16 
a29a						jr z, .spfrsame 
a29a						.spnosame: call showsperror 
a29a						.spfrsame: nop 
a29a						exx 
a29a					endif 
a29a				endif 
a29a			endm 
# End of macro STACKFRAMECHK
a29a			 
a29a c9			ret    ; dont process any remaining parser tokens as they form new word 
a29b			 
a29b			 
a29b			 
a29b			 
a29b			;		NEXT 
a29b			.SCOLN: 
a29b			;	CWHEAD .DROP 17 '\;' 1 WORD_FLAG_CODE 
a29b 06			db OPCODE_SCOLN 
a29c e7 a2		dw .DROP 
a29e 02			db 2 
a29f .. 00		db ";",0           
a2a1			; | ; ( -- )     Terminate new word and return exec to previous exec level | DONE 
a2a1				if DEBUG_FORTH_WORDS_KEY 
a2a1					DMARK "SCN" 
a2a1 f5				push af  
a2a2 3a b6 a2			ld a, (.dmark)  
a2a5 32 65 ee			ld (debug_mark),a  
a2a8 3a b7 a2			ld a, (.dmark+1)  
a2ab 32 66 ee			ld (debug_mark+1),a  
a2ae 3a b8 a2			ld a, (.dmark+2)  
a2b1 32 67 ee			ld (debug_mark+2),a  
a2b4 18 03			jr .pastdmark  
a2b6 ..			.dmark: db "SCN"  
a2b9 f1			.pastdmark: pop af  
a2ba			endm  
# End of macro DMARK
a2ba					CALLMONITOR 
a2ba cd 6f ee			call debug_vector  
a2bd				endm  
# End of macro CALLMONITOR
a2bd				endif 
a2bd				FORTH_RSP_TOS 
a2bd cd 43 9a			call macro_forth_rsp_tos 
a2c0				endm 
# End of macro FORTH_RSP_TOS
a2c0 e5				push hl 
a2c1				FORTH_RSP_POP 
a2c1 cd 4d 9a			call macro_forth_rsp_pop 
a2c4				endm 
# End of macro FORTH_RSP_POP
a2c4 e1				pop hl 
a2c5			;		ex de,hl 
a2c5 22 bc e5			ld (os_tok_ptr),hl 
a2c8			 
a2c8			if DEBUG_FORTH_UWORD 
a2c8					DMARK "SCL" 
a2c8 f5				push af  
a2c9 3a dd a2			ld a, (.dmark)  
a2cc 32 65 ee			ld (debug_mark),a  
a2cf 3a de a2			ld a, (.dmark+1)  
a2d2 32 66 ee			ld (debug_mark+1),a  
a2d5 3a df a2			ld a, (.dmark+2)  
a2d8 32 67 ee			ld (debug_mark+2),a  
a2db 18 03			jr .pastdmark  
a2dd ..			.dmark: db "SCL"  
a2e0 f1			.pastdmark: pop af  
a2e1			endm  
# End of macro DMARK
a2e1			CALLMONITOR 
a2e1 cd 6f ee			call debug_vector  
a2e4				endm  
# End of macro CALLMONITOR
a2e4			endif 
a2e4				NEXTW 
a2e4 c3 76 9e			jp macro_next 
a2e7				endm 
# End of macro NEXTW
a2e7			 
a2e7			.DROP: 
a2e7			CWHEAD .DUP2 OPCODE_DROP "DROP" 4 WORD_FLAG_CODE 
a2e7 1b				db WORD_SYS_CORE+OPCODE_DROP             
a2e8 12 a3			dw .DUP2            
a2ea 05				db 4 + 1 
a2eb .. 00			db "DROP",0              
a2f0				endm 
# End of macro CWHEAD
a2f0			; | DROP ( w -- )   drop the TOS item   | DONE 
a2f0				if DEBUG_FORTH_WORDS_KEY 
a2f0					DMARK "DRP" 
a2f0 f5				push af  
a2f1 3a 05 a3			ld a, (.dmark)  
a2f4 32 65 ee			ld (debug_mark),a  
a2f7 3a 06 a3			ld a, (.dmark+1)  
a2fa 32 66 ee			ld (debug_mark+1),a  
a2fd 3a 07 a3			ld a, (.dmark+2)  
a300 32 67 ee			ld (debug_mark+2),a  
a303 18 03			jr .pastdmark  
a305 ..			.dmark: db "DRP"  
a308 f1			.pastdmark: pop af  
a309			endm  
# End of macro DMARK
a309					CALLMONITOR 
a309 cd 6f ee			call debug_vector  
a30c				endm  
# End of macro CALLMONITOR
a30c				endif 
a30c				FORTH_DSP_POP 
a30c cd 42 9d			call macro_forth_dsp_pop 
a30f				endm 
# End of macro FORTH_DSP_POP
a30f				NEXTW 
a30f c3 76 9e			jp macro_next 
a312				endm 
# End of macro NEXTW
a312			.DUP2: 
a312			CWHEAD .DROP2 OPCODE_DUP2 "2DUP" 4 WORD_FLAG_CODE 
a312 1c				db WORD_SYS_CORE+OPCODE_DUP2             
a313 57 a3			dw .DROP2            
a315 05				db 4 + 1 
a316 .. 00			db "2DUP",0              
a31b				endm 
# End of macro CWHEAD
a31b			; | 2DUP ( w1 w2 -- w1 w2 w1 w2 ) Duplicate the top two items on TOS  (Only works for numerics) | DONE 
a31b				if DEBUG_FORTH_WORDS_KEY 
a31b					DMARK "2DU" 
a31b f5				push af  
a31c 3a 30 a3			ld a, (.dmark)  
a31f 32 65 ee			ld (debug_mark),a  
a322 3a 31 a3			ld a, (.dmark+1)  
a325 32 66 ee			ld (debug_mark+1),a  
a328 3a 32 a3			ld a, (.dmark+2)  
a32b 32 67 ee			ld (debug_mark+2),a  
a32e 18 03			jr .pastdmark  
a330 ..			.dmark: db "2DU"  
a333 f1			.pastdmark: pop af  
a334			endm  
# End of macro DMARK
a334					CALLMONITOR 
a334 cd 6f ee			call debug_vector  
a337				endm  
# End of macro CALLMONITOR
a337				endif 
a337				FORTH_DSP_VALUEHL 
a337 cd 8a 9c			call macro_dsp_valuehl 
a33a				endm 
# End of macro FORTH_DSP_VALUEHL
a33a e5				push hl      ; 2 
a33b			 
a33b				FORTH_DSP_POP 
a33b cd 42 9d			call macro_forth_dsp_pop 
a33e				endm 
# End of macro FORTH_DSP_POP
a33e				 
a33e				FORTH_DSP_VALUEHL 
a33e cd 8a 9c			call macro_dsp_valuehl 
a341				endm 
# End of macro FORTH_DSP_VALUEHL
a341			;		push hl      ; 1 
a341			 
a341				FORTH_DSP_POP 
a341 cd 42 9d			call macro_forth_dsp_pop 
a344				endm 
# End of macro FORTH_DSP_POP
a344			 
a344			;		pop hl       ; 1 
a344 d1				pop de       ; 2 
a345			 
a345 cd 85 9a			call forth_push_numhl 
a348 eb				ex de, hl 
a349 cd 85 9a			call forth_push_numhl 
a34c			 
a34c				 
a34c eb				ex de, hl 
a34d			 
a34d cd 85 9a			call forth_push_numhl 
a350 eb				ex de, hl 
a351 cd 85 9a			call forth_push_numhl 
a354			 
a354			 
a354				NEXTW 
a354 c3 76 9e			jp macro_next 
a357				endm 
# End of macro NEXTW
a357			.DROP2: 
a357			CWHEAD .PICK OPCODE_DROP2 "2DROP" 5 WORD_FLAG_CODE 
a357 1d				db WORD_SYS_CORE+OPCODE_DROP2             
a358 86 a3			dw .PICK            
a35a 06				db 5 + 1 
a35b .. 00			db "2DROP",0              
a361				endm 
# End of macro CWHEAD
a361			; | 2DROP ( w w -- )    Double drop | DONE 
a361				if DEBUG_FORTH_WORDS_KEY 
a361					DMARK "2DR" 
a361 f5				push af  
a362 3a 76 a3			ld a, (.dmark)  
a365 32 65 ee			ld (debug_mark),a  
a368 3a 77 a3			ld a, (.dmark+1)  
a36b 32 66 ee			ld (debug_mark+1),a  
a36e 3a 78 a3			ld a, (.dmark+2)  
a371 32 67 ee			ld (debug_mark+2),a  
a374 18 03			jr .pastdmark  
a376 ..			.dmark: db "2DR"  
a379 f1			.pastdmark: pop af  
a37a			endm  
# End of macro DMARK
a37a					CALLMONITOR 
a37a cd 6f ee			call debug_vector  
a37d				endm  
# End of macro CALLMONITOR
a37d				endif 
a37d				FORTH_DSP_POP 
a37d cd 42 9d			call macro_forth_dsp_pop 
a380				endm 
# End of macro FORTH_DSP_POP
a380				FORTH_DSP_POP 
a380 cd 42 9d			call macro_forth_dsp_pop 
a383				endm 
# End of macro FORTH_DSP_POP
a383				NEXTW 
a383 c3 76 9e			jp macro_next 
a386				endm 
# End of macro NEXTW
a386			.PICK: 
a386			CWHEAD .SWAP2 99 "PICK" 4 WORD_FLAG_CODE 
a386 77				db WORD_SYS_CORE+99             
a387 c4 a3			dw .SWAP2            
a389 05				db 4 + 1 
a38a .. 00			db "PICK",0              
a38f				endm 
# End of macro CWHEAD
a38f			; | PICK ( ux ... u x -- ux ... u n )    Replace x on stack with the item from position x on stack  | TODO 
a38f				if DEBUG_FORTH_WORDS_KEY 
a38f					DMARK "PIK" 
a38f f5				push af  
a390 3a a4 a3			ld a, (.dmark)  
a393 32 65 ee			ld (debug_mark),a  
a396 3a a5 a3			ld a, (.dmark+1)  
a399 32 66 ee			ld (debug_mark+1),a  
a39c 3a a6 a3			ld a, (.dmark+2)  
a39f 32 67 ee			ld (debug_mark+2),a  
a3a2 18 03			jr .pastdmark  
a3a4 ..			.dmark: db "PIK"  
a3a7 f1			.pastdmark: pop af  
a3a8			endm  
# End of macro DMARK
a3a8					CALLMONITOR 
a3a8 cd 6f ee			call debug_vector  
a3ab				endm  
# End of macro CALLMONITOR
a3ab				endif 
a3ab			 
a3ab				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a3ab cd 8a 9c			call macro_dsp_valuehl 
a3ae				endm 
# End of macro FORTH_DSP_VALUEHL
a3ae				 
a3ae				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a3ae cd 42 9d			call macro_forth_dsp_pop 
a3b1				endm 
# End of macro FORTH_DSP_POP
a3b1			 
a3b1				; init from TOS 
a3b1 45				ld b, l 
a3b2 21 e8 e9			ld hl, cli_data_sp 
a3b5			.pkl: 
a3b5 2b				dec hl 
a3b6 2b				dec hl 
a3b7 2b				dec hl 
a3b8			 
a3b8 10 fb			djnz .pkl 
a3ba			 
a3ba				 
a3ba				; TODO do type check with correct push 
a3ba			 
a3ba 23				inc hl 
a3bb cd f8 9d			call loadwordinhl 
a3be cd 85 9a			call forth_push_numhl 
a3c1			 
a3c1				NEXTW 
a3c1 c3 76 9e			jp macro_next 
a3c4				endm 
# End of macro NEXTW
a3c4			.SWAP2: 
a3c4			CWHEAD .AT OPCODE_SWAP2 "2SWAP" 5 WORD_FLAG_CODE 
a3c4 1e				db WORD_SYS_CORE+OPCODE_SWAP2             
a3c5 ed a3			dw .AT            
a3c7 06				db 5 + 1 
a3c8 .. 00			db "2SWAP",0              
a3ce				endm 
# End of macro CWHEAD
a3ce			; | 2SWAP ( w1 w2 w3 w4 -- w3 w4 w1 w2 ) Swap top pair of items | TODO 
a3ce				if DEBUG_FORTH_WORDS_KEY 
a3ce					DMARK "2SW" 
a3ce f5				push af  
a3cf 3a e3 a3			ld a, (.dmark)  
a3d2 32 65 ee			ld (debug_mark),a  
a3d5 3a e4 a3			ld a, (.dmark+1)  
a3d8 32 66 ee			ld (debug_mark+1),a  
a3db 3a e5 a3			ld a, (.dmark+2)  
a3de 32 67 ee			ld (debug_mark+2),a  
a3e1 18 03			jr .pastdmark  
a3e3 ..			.dmark: db "2SW"  
a3e6 f1			.pastdmark: pop af  
a3e7			endm  
# End of macro DMARK
a3e7					CALLMONITOR 
a3e7 cd 6f ee			call debug_vector  
a3ea				endm  
# End of macro CALLMONITOR
a3ea				endif 
a3ea			; TODO Use os stack swap memory 
a3ea				NEXTW 
a3ea c3 76 9e			jp macro_next 
a3ed				endm 
# End of macro NEXTW
a3ed			.AT: 
a3ed			CWHEAD .CAT OPCODE_AT "@" 1 WORD_FLAG_CODE 
a3ed 1f				db WORD_SYS_CORE+OPCODE_AT             
a3ee 1f a4			dw .CAT            
a3f0 02				db 1 + 1 
a3f1 .. 00			db "@",0              
a3f3				endm 
# End of macro CWHEAD
a3f3			; | @ ( w -- ) Push onto TOS byte stored at address   | DONE 
a3f3			 
a3f3				if DEBUG_FORTH_WORDS_KEY 
a3f3					DMARK "AT." 
a3f3 f5				push af  
a3f4 3a 08 a4			ld a, (.dmark)  
a3f7 32 65 ee			ld (debug_mark),a  
a3fa 3a 09 a4			ld a, (.dmark+1)  
a3fd 32 66 ee			ld (debug_mark+1),a  
a400 3a 0a a4			ld a, (.dmark+2)  
a403 32 67 ee			ld (debug_mark+2),a  
a406 18 03			jr .pastdmark  
a408 ..			.dmark: db "AT."  
a40b f1			.pastdmark: pop af  
a40c			endm  
# End of macro DMARK
a40c					CALLMONITOR 
a40c cd 6f ee			call debug_vector  
a40f				endm  
# End of macro CALLMONITOR
a40f				endif 
a40f			.getbyteat:	 
a40f				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a40f cd 8a 9c			call macro_dsp_valuehl 
a412				endm 
# End of macro FORTH_DSP_VALUEHL
a412				 
a412			;		push hl 
a412			 
a412				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a412 cd 42 9d			call macro_forth_dsp_pop 
a415				endm 
# End of macro FORTH_DSP_POP
a415			 
a415			;		pop hl 
a415			 
a415 7e				ld a, (hl) 
a416			 
a416 6f				ld l, a 
a417 26 00			ld h, 0 
a419 cd 85 9a			call forth_push_numhl 
a41c			 
a41c				NEXTW 
a41c c3 76 9e			jp macro_next 
a41f				endm 
# End of macro NEXTW
a41f			.CAT: 
a41f			CWHEAD .BANG OPCODE_CAT "C@" 2 WORD_FLAG_CODE 
a41f 20				db WORD_SYS_CORE+OPCODE_CAT             
a420 48 a4			dw .BANG            
a422 03				db 2 + 1 
a423 .. 00			db "C@",0              
a426				endm 
# End of macro CWHEAD
a426			; | C@  ( w -- ) Push onto TOS byte stored at address   | DONE 
a426				if DEBUG_FORTH_WORDS_KEY 
a426					DMARK "CAA" 
a426 f5				push af  
a427 3a 3b a4			ld a, (.dmark)  
a42a 32 65 ee			ld (debug_mark),a  
a42d 3a 3c a4			ld a, (.dmark+1)  
a430 32 66 ee			ld (debug_mark+1),a  
a433 3a 3d a4			ld a, (.dmark+2)  
a436 32 67 ee			ld (debug_mark+2),a  
a439 18 03			jr .pastdmark  
a43b ..			.dmark: db "CAA"  
a43e f1			.pastdmark: pop af  
a43f			endm  
# End of macro DMARK
a43f					CALLMONITOR 
a43f cd 6f ee			call debug_vector  
a442				endm  
# End of macro CALLMONITOR
a442				endif 
a442 c3 0f a4			jp .getbyteat 
a445				NEXTW 
a445 c3 76 9e			jp macro_next 
a448				endm 
# End of macro NEXTW
a448			.BANG: 
a448			CWHEAD .CBANG OPCODE_BANG "!" 1 WORD_FLAG_CODE 
a448 21				db WORD_SYS_CORE+OPCODE_BANG             
a449 7e a4			dw .CBANG            
a44b 02				db 1 + 1 
a44c .. 00			db "!",0              
a44e				endm 
# End of macro CWHEAD
a44e			; | ! ( x w -- ) Store x at address w      | DONE 
a44e				if DEBUG_FORTH_WORDS_KEY 
a44e					DMARK "BNG" 
a44e f5				push af  
a44f 3a 63 a4			ld a, (.dmark)  
a452 32 65 ee			ld (debug_mark),a  
a455 3a 64 a4			ld a, (.dmark+1)  
a458 32 66 ee			ld (debug_mark+1),a  
a45b 3a 65 a4			ld a, (.dmark+2)  
a45e 32 67 ee			ld (debug_mark+2),a  
a461 18 03			jr .pastdmark  
a463 ..			.dmark: db "BNG"  
a466 f1			.pastdmark: pop af  
a467			endm  
# End of macro DMARK
a467					CALLMONITOR 
a467 cd 6f ee			call debug_vector  
a46a				endm  
# End of macro CALLMONITOR
a46a				endif 
a46a			 
a46a			.storebyteat:		 
a46a				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a46a cd 8a 9c			call macro_dsp_valuehl 
a46d				endm 
# End of macro FORTH_DSP_VALUEHL
a46d				 
a46d e5				push hl 
a46e			 
a46e				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a46e cd 42 9d			call macro_forth_dsp_pop 
a471				endm 
# End of macro FORTH_DSP_POP
a471			 
a471				; get byte to poke 
a471			 
a471				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a471 cd 8a 9c			call macro_dsp_valuehl 
a474				endm 
# End of macro FORTH_DSP_VALUEHL
a474 e5				push hl 
a475			 
a475			 
a475				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a475 cd 42 9d			call macro_forth_dsp_pop 
a478				endm 
# End of macro FORTH_DSP_POP
a478			 
a478			 
a478 d1				pop de 
a479 e1				pop hl 
a47a			 
a47a 73				ld (hl),e 
a47b			 
a47b			 
a47b				NEXTW 
a47b c3 76 9e			jp macro_next 
a47e				endm 
# End of macro NEXTW
a47e			.CBANG: 
a47e			CWHEAD .SCALL OPCODE_CBANG "C!" 2 WORD_FLAG_CODE 
a47e 22				db WORD_SYS_CORE+OPCODE_CBANG             
a47f a7 a4			dw .SCALL            
a481 03				db 2 + 1 
a482 .. 00			db "C!",0              
a485				endm 
# End of macro CWHEAD
a485			; | C!  ( x w -- ) Store x at address w  | DONE 
a485				if DEBUG_FORTH_WORDS_KEY 
a485					DMARK "CBA" 
a485 f5				push af  
a486 3a 9a a4			ld a, (.dmark)  
a489 32 65 ee			ld (debug_mark),a  
a48c 3a 9b a4			ld a, (.dmark+1)  
a48f 32 66 ee			ld (debug_mark+1),a  
a492 3a 9c a4			ld a, (.dmark+2)  
a495 32 67 ee			ld (debug_mark+2),a  
a498 18 03			jr .pastdmark  
a49a ..			.dmark: db "CBA"  
a49d f1			.pastdmark: pop af  
a49e			endm  
# End of macro DMARK
a49e					CALLMONITOR 
a49e cd 6f ee			call debug_vector  
a4a1				endm  
# End of macro CALLMONITOR
a4a1				endif 
a4a1 c3 6a a4			jp .storebyteat 
a4a4				NEXTW 
a4a4 c3 76 9e			jp macro_next 
a4a7				endm 
# End of macro NEXTW
a4a7			.SCALL: 
a4a7			CWHEAD .DEPTH OPCODE_SCALL "CALL" 4 WORD_FLAG_CODE 
a4a7 23				db WORD_SYS_CORE+OPCODE_SCALL             
a4a8 db a4			dw .DEPTH            
a4aa 05				db 4 + 1 
a4ab .. 00			db "CALL",0              
a4b0				endm 
# End of macro CWHEAD
a4b0			; | CALL ( w -- w  ) machine code call to address w  push the result of hl to stack | DONE 
a4b0				if DEBUG_FORTH_WORDS_KEY 
a4b0					DMARK "CLL" 
a4b0 f5				push af  
a4b1 3a c5 a4			ld a, (.dmark)  
a4b4 32 65 ee			ld (debug_mark),a  
a4b7 3a c6 a4			ld a, (.dmark+1)  
a4ba 32 66 ee			ld (debug_mark+1),a  
a4bd 3a c7 a4			ld a, (.dmark+2)  
a4c0 32 67 ee			ld (debug_mark+2),a  
a4c3 18 03			jr .pastdmark  
a4c5 ..			.dmark: db "CLL"  
a4c8 f1			.pastdmark: pop af  
a4c9			endm  
# End of macro DMARK
a4c9					CALLMONITOR 
a4c9 cd 6f ee			call debug_vector  
a4cc				endm  
# End of macro CALLMONITOR
a4cc				endif 
a4cc			 
a4cc				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a4cc cd 8a 9c			call macro_dsp_valuehl 
a4cf				endm 
# End of macro FORTH_DSP_VALUEHL
a4cf			 
a4cf			;		push hl 
a4cf			 
a4cf				; destroy value TOS 
a4cf			 
a4cf				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a4cf cd 42 9d			call macro_forth_dsp_pop 
a4d2				endm 
# End of macro FORTH_DSP_POP
a4d2			 
a4d2					 
a4d2			;		pop hl 
a4d2			 
a4d2				; how to do a call with hl???? save SP? 
a4d2 cd 1a 9e			call forth_call_hl 
a4d5			 
a4d5			 
a4d5				; TODO push value back onto stack for another op etc 
a4d5			 
a4d5 cd 85 9a			call forth_push_numhl 
a4d8				NEXTW 
a4d8 c3 76 9e			jp macro_next 
a4db				endm 
# End of macro NEXTW
a4db			.DEPTH: 
a4db			CWHEAD .OVER OPCODE_DEPTH "DEPTH" 5 WORD_FLAG_CODE 
a4db 24				db WORD_SYS_CORE+OPCODE_DEPTH             
a4dc 18 a5			dw .OVER            
a4de 06				db 5 + 1 
a4df .. 00			db "DEPTH",0              
a4e5				endm 
# End of macro CWHEAD
a4e5			; | DEPTH ( -- u ) Push count of stack | DONE 
a4e5				; take current TOS and remove from base value div by two to get count 
a4e5				if DEBUG_FORTH_WORDS_KEY 
a4e5					DMARK "DEP" 
a4e5 f5				push af  
a4e6 3a fa a4			ld a, (.dmark)  
a4e9 32 65 ee			ld (debug_mark),a  
a4ec 3a fb a4			ld a, (.dmark+1)  
a4ef 32 66 ee			ld (debug_mark+1),a  
a4f2 3a fc a4			ld a, (.dmark+2)  
a4f5 32 67 ee			ld (debug_mark+2),a  
a4f8 18 03			jr .pastdmark  
a4fa ..			.dmark: db "DEP"  
a4fd f1			.pastdmark: pop af  
a4fe			endm  
# End of macro DMARK
a4fe					CALLMONITOR 
a4fe cd 6f ee			call debug_vector  
a501				endm  
# End of macro CALLMONITOR
a501				endif 
a501			 
a501			 
a501 2a e8 e9		ld hl, (cli_data_sp) 
a504 11 22 e8		ld de, cli_data_stack 
a507 ed 52		sbc hl,de 
a509			 
a509			; div by size of stack item 
a509			 
a509 5d			ld e,l 
a50a 0e 03		ld c, 3 
a50c cd 7a 8c		call Div8 
a50f			 
a50f 6f			ld l,a 
a510 26 00		ld h,0 
a512			 
a512			;srl h 
a512			;rr l 
a512			 
a512 cd 85 9a			call forth_push_numhl 
a515				NEXTW 
a515 c3 76 9e			jp macro_next 
a518				endm 
# End of macro NEXTW
a518			.OVER: 
a518			CWHEAD .PAUSE 46 "OVER" 4 WORD_FLAG_CODE 
a518 42				db WORD_SYS_CORE+46             
a519 5f a5			dw .PAUSE            
a51b 05				db 4 + 1 
a51c .. 00			db "OVER",0              
a521				endm 
# End of macro CWHEAD
a521			; | OVER ( n1 n2 -- n1 n2 n1 )  Copy one below TOS onto TOS | TOFIX 
a521				if DEBUG_FORTH_WORDS_KEY 
a521					DMARK "OVR" 
a521 f5				push af  
a522 3a 36 a5			ld a, (.dmark)  
a525 32 65 ee			ld (debug_mark),a  
a528 3a 37 a5			ld a, (.dmark+1)  
a52b 32 66 ee			ld (debug_mark+1),a  
a52e 3a 38 a5			ld a, (.dmark+2)  
a531 32 67 ee			ld (debug_mark+2),a  
a534 18 03			jr .pastdmark  
a536 ..			.dmark: db "OVR"  
a539 f1			.pastdmark: pop af  
a53a			endm  
# End of macro DMARK
a53a					CALLMONITOR 
a53a cd 6f ee			call debug_vector  
a53d				endm  
# End of macro CALLMONITOR
a53d				endif 
a53d			 
a53d			; TODO Use os stack swap memory 
a53d			 
a53d				; work out what type we are looking at 
a53d			 
a53d				FORTH_DSP_PTR 1 
a53d 2a e8 e9			ld hl,(cli_data_sp) 
a540 11 03 00			ld de, 1 * 3 
a543 ed 52			sbc hl, de 
a545				endm 
# End of macro FORTH_DSP_PTR
a545			 
a545 7e				ld a, (hl) 
a546				 
a546 f5				push af 
a547				; whatever the type lets get the pointer or word 
a547 23				inc hl 
a548			;; 
a548			 
a548				; type check now to decide on how to push  
a548			 
a548 cd f8 9d			call loadwordinhl 
a54b f1				pop af 
a54c fe 01			cp DS_TYPE_STR 
a54e 28 06			jr z, .ovstr 
a550			 
a550				; we have a numeric so load the word and push 
a550			;	ld e, (hl) 
a550			;	inc hl 
a550			;	ld d, (hl) 
a550			;	ex de, hl 
a550 cd 85 9a			call forth_push_numhl 
a553				NEXTW 
a553 c3 76 9e			jp macro_next 
a556				endm 
# End of macro NEXTW
a556			 
a556			.ovstr: 
a556				; ok, a string so get the pointer and push as a string 
a556			 
a556			;	call loadwordinhl 
a556 cd f3 9a			call forth_push_str 
a559				NEXTW 
a559 c3 76 9e			jp macro_next 
a55c				endm 
# End of macro NEXTW
a55c			 
a55c			;	FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a55c			;	push hl    ; n2 
a55c			;	FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a55c			; 
a55c			;	FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a55c			;	push hl    ; n1 
a55c			;	FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a55c			; 
a55c			;	pop de     ; n1 
a55c			;	pop hl     ; n2 
a55c			; 
a55c			;	push de 
a55c			;	push hl 
a55c			;	push de 
a55c			 
a55c				; push back  
a55c			 
a55c			;	pop hl 
a55c			;	call forth_push_numhl 
a55c			;	pop hl 
a55c			;	call forth_push_numhl 
a55c			;	pop hl 
a55c			;	call forth_push_numhl 
a55c				NEXTW 
a55c c3 76 9e			jp macro_next 
a55f				endm 
# End of macro NEXTW
a55f			 
a55f			.PAUSE: 
a55f			CWHEAD .PAUSES 47 "PAUSEMS" 7 WORD_FLAG_CODE 
a55f 43				db WORD_SYS_CORE+47             
a560 94 a5			dw .PAUSES            
a562 08				db 7 + 1 
a563 .. 00			db "PAUSEMS",0              
a56b				endm 
# End of macro CWHEAD
a56b			; | PAUSEMS ( n -- )  Pause for n millisconds | DONE 
a56b				if DEBUG_FORTH_WORDS_KEY 
a56b					DMARK "PMS" 
a56b f5				push af  
a56c 3a 80 a5			ld a, (.dmark)  
a56f 32 65 ee			ld (debug_mark),a  
a572 3a 81 a5			ld a, (.dmark+1)  
a575 32 66 ee			ld (debug_mark+1),a  
a578 3a 82 a5			ld a, (.dmark+2)  
a57b 32 67 ee			ld (debug_mark+2),a  
a57e 18 03			jr .pastdmark  
a580 ..			.dmark: db "PMS"  
a583 f1			.pastdmark: pop af  
a584			endm  
# End of macro DMARK
a584					CALLMONITOR 
a584 cd 6f ee			call debug_vector  
a587				endm  
# End of macro CALLMONITOR
a587				endif 
a587				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a587 cd 8a 9c			call macro_dsp_valuehl 
a58a				endm 
# End of macro FORTH_DSP_VALUEHL
a58a			;		push hl    ; n2 
a58a				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a58a cd 42 9d			call macro_forth_dsp_pop 
a58d				endm 
# End of macro FORTH_DSP_POP
a58d			;		pop hl 
a58d			 
a58d 7d				ld a, l 
a58e cd e5 89			call aDelayInMS 
a591			       NEXTW 
a591 c3 76 9e			jp macro_next 
a594				endm 
# End of macro NEXTW
a594			.PAUSES:  
a594			CWHEAD .ROT 48 "PAUSE" 5 WORD_FLAG_CODE 
a594 44				db WORD_SYS_CORE+48             
a595 03 a6			dw .ROT            
a597 06				db 5 + 1 
a598 .. 00			db "PAUSE",0              
a59e				endm 
# End of macro CWHEAD
a59e			; | PAUSE ( n -- )  Pause for n seconds | DONE 
a59e				if DEBUG_FORTH_WORDS_KEY 
a59e					DMARK "PAU" 
a59e f5				push af  
a59f 3a b3 a5			ld a, (.dmark)  
a5a2 32 65 ee			ld (debug_mark),a  
a5a5 3a b4 a5			ld a, (.dmark+1)  
a5a8 32 66 ee			ld (debug_mark+1),a  
a5ab 3a b5 a5			ld a, (.dmark+2)  
a5ae 32 67 ee			ld (debug_mark+2),a  
a5b1 18 03			jr .pastdmark  
a5b3 ..			.dmark: db "PAU"  
a5b6 f1			.pastdmark: pop af  
a5b7			endm  
# End of macro DMARK
a5b7					CALLMONITOR 
a5b7 cd 6f ee			call debug_vector  
a5ba				endm  
# End of macro CALLMONITOR
a5ba				endif 
a5ba				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a5ba cd 8a 9c			call macro_dsp_valuehl 
a5bd				endm 
# End of macro FORTH_DSP_VALUEHL
a5bd			;		push hl    ; n2 
a5bd				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a5bd cd 42 9d			call macro_forth_dsp_pop 
a5c0				endm 
# End of macro FORTH_DSP_POP
a5c0			;		pop hl 
a5c0 45				ld b, l 
a5c1				if DEBUG_FORTH_WORDS 
a5c1					DMARK "PAU" 
a5c1 f5				push af  
a5c2 3a d6 a5			ld a, (.dmark)  
a5c5 32 65 ee			ld (debug_mark),a  
a5c8 3a d7 a5			ld a, (.dmark+1)  
a5cb 32 66 ee			ld (debug_mark+1),a  
a5ce 3a d8 a5			ld a, (.dmark+2)  
a5d1 32 67 ee			ld (debug_mark+2),a  
a5d4 18 03			jr .pastdmark  
a5d6 ..			.dmark: db "PAU"  
a5d9 f1			.pastdmark: pop af  
a5da			endm  
# End of macro DMARK
a5da					CALLMONITOR 
a5da cd 6f ee			call debug_vector  
a5dd				endm  
# End of macro CALLMONITOR
a5dd				endif 
a5dd c5			.pauses1:	push bc 
a5de cd 00 8a			call delay1s 
a5e1 c1				pop bc 
a5e2				if DEBUG_FORTH_WORDS 
a5e2					DMARK "PA1" 
a5e2 f5				push af  
a5e3 3a f7 a5			ld a, (.dmark)  
a5e6 32 65 ee			ld (debug_mark),a  
a5e9 3a f8 a5			ld a, (.dmark+1)  
a5ec 32 66 ee			ld (debug_mark+1),a  
a5ef 3a f9 a5			ld a, (.dmark+2)  
a5f2 32 67 ee			ld (debug_mark+2),a  
a5f5 18 03			jr .pastdmark  
a5f7 ..			.dmark: db "PA1"  
a5fa f1			.pastdmark: pop af  
a5fb			endm  
# End of macro DMARK
a5fb					CALLMONITOR 
a5fb cd 6f ee			call debug_vector  
a5fe				endm  
# End of macro CALLMONITOR
a5fe				endif 
a5fe 10 dd			djnz .pauses1 
a600			 
a600			       NEXTW 
a600 c3 76 9e			jp macro_next 
a603				endm 
# End of macro NEXTW
a603			.ROT: 
a603			CWHEAD .UWORDS 49 "ROT" 3 WORD_FLAG_CODE 
a603 45				db WORD_SYS_CORE+49             
a604 6c a6			dw .UWORDS            
a606 04				db 3 + 1 
a607 .. 00			db "ROT",0              
a60b				endm 
# End of macro CWHEAD
a60b			; | ROT ( u1 u2 u3 -- u2 u3 u1 ) Rotate top three items on stack | TOFIX 
a60b				if DEBUG_FORTH_WORDS_KEY 
a60b					DMARK "ROT" 
a60b f5				push af  
a60c 3a 20 a6			ld a, (.dmark)  
a60f 32 65 ee			ld (debug_mark),a  
a612 3a 21 a6			ld a, (.dmark+1)  
a615 32 66 ee			ld (debug_mark+1),a  
a618 3a 22 a6			ld a, (.dmark+2)  
a61b 32 67 ee			ld (debug_mark+2),a  
a61e 18 03			jr .pastdmark  
a620 ..			.dmark: db "ROT"  
a623 f1			.pastdmark: pop af  
a624			endm  
# End of macro DMARK
a624					CALLMONITOR 
a624 cd 6f ee			call debug_vector  
a627				endm  
# End of macro CALLMONITOR
a627				endif 
a627			 
a627			; DONE Use os stack swap memory 
a627			 
a627				FORTH_DSP_PTR 0     ; u3 
a627 2a e8 e9			ld hl,(cli_data_sp) 
a62a 11 00 00			ld de, 0 * 3 
a62d ed 52			sbc hl, de 
a62f				endm 
# End of macro FORTH_DSP_PTR
a62f cd c2 9d			call hltostack1     
a632			  
a632				FORTH_DSP_PTR 1     ; u2 
a632 2a e8 e9			ld hl,(cli_data_sp) 
a635 11 03 00			ld de, 1 * 3 
a638 ed 52			sbc hl, de 
a63a				endm 
# End of macro FORTH_DSP_PTR
a63a cd c8 9d			call hltostack2      
a63d			 
a63d				FORTH_DSP_PTR 2     ; u1 
a63d 2a e8 e9			ld hl,(cli_data_sp) 
a640 11 06 00			ld de, 2 * 3 
a643 ed 52			sbc hl, de 
a645				endm 
# End of macro FORTH_DSP_PTR
a645 cd ce 9d			call hltostack3 
a648			 
a648			 
a648				FORTH_DSP_PTR 0     ;  
a648 2a e8 e9			ld hl,(cli_data_sp) 
a64b 11 00 00			ld de, 0 * 3 
a64e ed 52			sbc hl, de 
a650				endm 
# End of macro FORTH_DSP_PTR
a650 cd e6 9d			call hlfromstack3 
a653			 
a653				FORTH_DSP_PTR 1     ; TOS 
a653 2a e8 e9			ld hl,(cli_data_sp) 
a656 11 03 00			ld de, 1 * 3 
a659 ed 52			sbc hl, de 
a65b				endm 
# End of macro FORTH_DSP_PTR
a65b cd da 9d			call hlfromstack1 
a65e			 
a65e				FORTH_DSP_PTR 2     ; TOS 
a65e 2a e8 e9			ld hl,(cli_data_sp) 
a661 11 06 00			ld de, 2 * 3 
a664 ed 52			sbc hl, de 
a666				endm 
# End of macro FORTH_DSP_PTR
a666 cd e0 9d			call hlfromstack2 
a669			 
a669			 
a669			;	FORTH_DSP_VALUEHL 
a669			;	push hl    ; u3  
a669			; 
a669			;	FORTH_DSP_POP 
a669			; 
a669			;	FORTH_DSP_VALUEHL 
a669			;	push hl     ; u2 
a669			; 
a669			;	FORTH_DSP_POP 
a669			; 
a669			;	FORTH_DSP_VALUEHL 
a669			;	push hl     ; u1 
a669			; 
a669			;	FORTH_DSP_POP 
a669			; 
a669			;	pop bc      ; u1 
a669			;	pop hl      ; u2 
a669			;	pop de      ; u3 
a669			; 
a669			; 
a669			;	push bc 
a669			;	push de 
a669			;	push hl 
a669			; 
a669			; 
a669			;	pop hl 
a669			;	call forth_push_numhl 
a669			; 
a669			;	pop hl 
a669			;	call forth_push_numhl 
a669			; 
a669			;	pop hl 
a669			;	call forth_push_numhl 
a669				 
a669			 
a669			 
a669			 
a669			 
a669			 
a669			       NEXTW 
a669 c3 76 9e			jp macro_next 
a66c				endm 
# End of macro NEXTW
a66c			 
a66c			.UWORDS: 
a66c			CWHEAD .BP 60 "UWORDS" 6 WORD_FLAG_CODE 
a66c 50				db WORD_SYS_CORE+60             
a66d 2e a7			dw .BP            
a66f 07				db 6 + 1 
a670 .. 00			db "UWORDS",0              
a677				endm 
# End of macro CWHEAD
a677			; | UWORDS (  -- s1 ... sn u )   List user word dict | DONE 
a677			; | | After use the TOS will have a count of the number of user words that have been pushed to stack. 
a677			; | | Following the count are the individual words. 
a677			; | | 
a677			; | | e.g. UWORDS 
a677			; | | BOX DIRLIST 2 
a677			; | |  
a677			; | | Can be used to save the words to storage via: 
a677			; | | UWORDS $01 DO $01 APPEND LOOP 
a677			if DEBUG_FORTH_WORDS_KEY 
a677				DMARK "UWR" 
a677 f5				push af  
a678 3a 8c a6			ld a, (.dmark)  
a67b 32 65 ee			ld (debug_mark),a  
a67e 3a 8d a6			ld a, (.dmark+1)  
a681 32 66 ee			ld (debug_mark+1),a  
a684 3a 8e a6			ld a, (.dmark+2)  
a687 32 67 ee			ld (debug_mark+2),a  
a68a 18 03			jr .pastdmark  
a68c ..			.dmark: db "UWR"  
a68f f1			.pastdmark: pop af  
a690			endm  
# End of macro DMARK
a690				CALLMONITOR 
a690 cd 6f ee			call debug_vector  
a693				endm  
# End of macro CALLMONITOR
a693			endif 
a693 21 f3 de			ld hl, baseram 
a696				;ld hl, baseusermem 
a696 01 00 00			ld bc, 0    ; start a counter 
a699			 
a699			; skip dict stub 
a699			 
a699 cd c7 9f			call forth_tok_next 
a69c			 
a69c			 
a69c			; while we have words to look for 
a69c			 
a69c 7e			.douscan:	ld a, (hl)      
a69d			if DEBUG_FORTH_WORDS 
a69d				DMARK "UWs" 
a69d f5				push af  
a69e 3a b2 a6			ld a, (.dmark)  
a6a1 32 65 ee			ld (debug_mark),a  
a6a4 3a b3 a6			ld a, (.dmark+1)  
a6a7 32 66 ee			ld (debug_mark+1),a  
a6aa 3a b4 a6			ld a, (.dmark+2)  
a6ad 32 67 ee			ld (debug_mark+2),a  
a6b0 18 03			jr .pastdmark  
a6b2 ..			.dmark: db "UWs"  
a6b5 f1			.pastdmark: pop af  
a6b6			endm  
# End of macro DMARK
a6b6				CALLMONITOR 
a6b6 cd 6f ee			call debug_vector  
a6b9				endm  
# End of macro CALLMONITOR
a6b9			endif 
a6b9 fe 00			cp WORD_SYS_END 
a6bb 28 4d			jr z, .udone 
a6bd fe 01			cp WORD_SYS_UWORD 
a6bf 20 44			jr nz, .nuword 
a6c1			 
a6c1			if DEBUG_FORTH_WORDS 
a6c1				DMARK "UWu" 
a6c1 f5				push af  
a6c2 3a d6 a6			ld a, (.dmark)  
a6c5 32 65 ee			ld (debug_mark),a  
a6c8 3a d7 a6			ld a, (.dmark+1)  
a6cb 32 66 ee			ld (debug_mark+1),a  
a6ce 3a d8 a6			ld a, (.dmark+2)  
a6d1 32 67 ee			ld (debug_mark+2),a  
a6d4 18 03			jr .pastdmark  
a6d6 ..			.dmark: db "UWu"  
a6d9 f1			.pastdmark: pop af  
a6da			endm  
# End of macro DMARK
a6da				CALLMONITOR 
a6da cd 6f ee			call debug_vector  
a6dd				endm  
# End of macro CALLMONITOR
a6dd			endif 
a6dd				; we have a uword so push its name to the stack 
a6dd			 
a6dd e5				push hl  ; save so we can move to next dict block 
a6de			 
a6de				; skip opcode 
a6de 23				inc hl  
a6df				; skip next ptr 
a6df 23				inc hl  
a6e0 23				inc hl 
a6e1				; skip len 
a6e1 23				inc hl 
a6e2			if DEBUG_FORTH_WORDS 
a6e2				DMARK "UWt" 
a6e2 f5				push af  
a6e3 3a f7 a6			ld a, (.dmark)  
a6e6 32 65 ee			ld (debug_mark),a  
a6e9 3a f8 a6			ld a, (.dmark+1)  
a6ec 32 66 ee			ld (debug_mark+1),a  
a6ef 3a f9 a6			ld a, (.dmark+2)  
a6f2 32 67 ee			ld (debug_mark+2),a  
a6f5 18 03			jr .pastdmark  
a6f7 ..			.dmark: db "UWt"  
a6fa f1			.pastdmark: pop af  
a6fb			endm  
# End of macro DMARK
a6fb				CALLMONITOR 
a6fb cd 6f ee			call debug_vector  
a6fe				endm  
# End of macro CALLMONITOR
a6fe			endif 
a6fe 03				inc bc 
a6ff			 
a6ff c5				push bc 
a700 cd f3 9a			call forth_push_str 
a703 c1				pop bc 
a704			 
a704 e1				pop hl 	 
a705			 
a705 cd c7 9f		.nuword:	call forth_tok_next 
a708 18 92			jr .douscan  
a70a			 
a70a			.udone:		 ; push count of uwords found 
a70a c5				push bc 
a70b e1				pop hl 
a70c			 
a70c			if DEBUG_FORTH_WORDS 
a70c				DMARK "UWc" 
a70c f5				push af  
a70d 3a 21 a7			ld a, (.dmark)  
a710 32 65 ee			ld (debug_mark),a  
a713 3a 22 a7			ld a, (.dmark+1)  
a716 32 66 ee			ld (debug_mark+1),a  
a719 3a 23 a7			ld a, (.dmark+2)  
a71c 32 67 ee			ld (debug_mark+2),a  
a71f 18 03			jr .pastdmark  
a721 ..			.dmark: db "UWc"  
a724 f1			.pastdmark: pop af  
a725			endm  
# End of macro DMARK
a725				CALLMONITOR 
a725 cd 6f ee			call debug_vector  
a728				endm  
# End of macro CALLMONITOR
a728			endif 
a728 cd 85 9a			call forth_push_numhl 
a72b			 
a72b			 
a72b			       NEXTW 
a72b c3 76 9e			jp macro_next 
a72e				endm 
# End of macro NEXTW
a72e			 
a72e			.BP: 
a72e			CWHEAD .MONITOR 64 "BP" 2 WORD_FLAG_CODE 
a72e 54				db WORD_SYS_CORE+64             
a72f 68 a7			dw .MONITOR            
a731 03				db 2 + 1 
a732 .. 00			db "BP",0              
a735				endm 
# End of macro CWHEAD
a735			; | BP ( u1 -- ) Enable or disable break point monitoring | DONE 
a735			; | | $00 Will enable the break points within specific code paths 
a735			; | | $01 Will disable break points 
a735			; | |  
a735			; | | By default break points are off. Either the above can be used to enable them 
a735			; | | or if a key is held down during start up the spashscreen will appear to freeze 
a735			; | | and on release of the pressed key the CONFIG menu will be displayed where you 
a735			; | | can disable break points. Exiting will then continue boot process. 
a735				; get byte count 
a735				if DEBUG_FORTH_WORDS_KEY 
a735					DMARK "BP." 
a735 f5				push af  
a736 3a 4a a7			ld a, (.dmark)  
a739 32 65 ee			ld (debug_mark),a  
a73c 3a 4b a7			ld a, (.dmark+1)  
a73f 32 66 ee			ld (debug_mark+1),a  
a742 3a 4c a7			ld a, (.dmark+2)  
a745 32 67 ee			ld (debug_mark+2),a  
a748 18 03			jr .pastdmark  
a74a ..			.dmark: db "BP."  
a74d f1			.pastdmark: pop af  
a74e			endm  
# End of macro DMARK
a74e					CALLMONITOR 
a74e cd 6f ee			call debug_vector  
a751				endm  
# End of macro CALLMONITOR
a751				endif 
a751			 
a751				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a751 cd 8a 9c			call macro_dsp_valuehl 
a754				endm 
# End of macro FORTH_DSP_VALUEHL
a754			 
a754			;		push hl 
a754			 
a754				; destroy value TOS 
a754			 
a754				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a754 cd 42 9d			call macro_forth_dsp_pop 
a757				endm 
# End of macro FORTH_DSP_POP
a757			 
a757			;		pop hl 
a757			 
a757 3e 00			ld a,0 
a759 bd				cp l 
a75a 28 06			jr z, .bpset 
a75c			;		ld a, '*' 
a75c cd 00 94			call bp_off 
a75f				NEXTW 
a75f c3 76 9e			jp macro_next 
a762				endm 
# End of macro NEXTW
a762			 
a762			.bpset:	 
a762				;	ld (os_view_disable), a 
a762 cd f4 93			call bp_on 
a765			 
a765			 
a765				NEXTW 
a765 c3 76 9e			jp macro_next 
a768				endm 
# End of macro NEXTW
a768			 
a768			 
a768			.MONITOR: 
a768			CWHEAD .MALLOC 65 "MONITOR" 7 WORD_FLAG_CODE 
a768 55				db WORD_SYS_CORE+65             
a769 99 a7			dw .MALLOC            
a76b 08				db 7 + 1 
a76c .. 00			db "MONITOR",0              
a774				endm 
# End of macro CWHEAD
a774			; | MONITOR ( -- ) Display system breakpoint/monitor | DONE 
a774			; | | At start the current various registers will be displayed with contents. 
a774			; | | Top right corner will show the most recent debug marker seen. 
a774			; | | The bottom of the screen will also show the values of the data stack pointer (DSP) 
a774			; | | and the return stack pointer (RSP). 
a774			; | | Pressing: 
a774			; | |    1 - Initial screen 
a774			; | |    2 - Display a data dump of HL 
a774			; | |    3 - Display a data dump of DE 
a774			; | |    4 - Display a data dump of BC 
a774			; | |    5 - Display a data dump of HL 
a774			; | |    6 - Display a data dump of DSP 
a774			; | |    7 - Display a data dump of RSP 
a774			; | |    8 - Display a data dump of what is at DSP 
a774			; | |    9 - Display a data dump of what is at RSP 
a774			; | |    0 - Exit monitor and continue running. This will also enable break points 
a774			; | |    * - Disable break points 
a774			; | |    # - Enter traditional monitor mode 
a774			; | | 
a774			; | | Monitor Mode 
a774			; | | ------------ 
a774			; | | A prompt of '>' will be shown for various commands: 
a774			; | |    D xxxx - Display a data dump starting from hex address xxxx 
a774			; | |    C - Continue display a data dump from the last set address 
a774			; | |    M xxxx - Set start of memory edit at address xx 
a774			; | |    U xx - Poke the hex byte xx into the address set by M and increment the address to the next location 
a774			; | |    G xxxx - Exec code at specific address 
a774			; | |    Q - Return to previous 
a774				if DEBUG_FORTH_WORDS_KEY 
a774					DMARK "MON" 
a774 f5				push af  
a775 3a 89 a7			ld a, (.dmark)  
a778 32 65 ee			ld (debug_mark),a  
a77b 3a 8a a7			ld a, (.dmark+1)  
a77e 32 66 ee			ld (debug_mark+1),a  
a781 3a 8b a7			ld a, (.dmark+2)  
a784 32 67 ee			ld (debug_mark+2),a  
a787 18 03			jr .pastdmark  
a789 ..			.dmark: db "MON"  
a78c f1			.pastdmark: pop af  
a78d			endm  
# End of macro DMARK
a78d					CALLMONITOR 
a78d cd 6f ee			call debug_vector  
a790				endm  
# End of macro CALLMONITOR
a790				endif 
a790			;		ld a, 0 
a790			;		ld (os_view_disable), a 
a790 cd f4 93			call bp_on 
a793			 
a793				CALLMONITOR 
a793 cd 6f ee			call debug_vector  
a796				endm  
# End of macro CALLMONITOR
a796			 
a796			;	call monitor 
a796			 
a796				NEXTW 
a796 c3 76 9e			jp macro_next 
a799				endm 
# End of macro NEXTW
a799			 
a799			 
a799			.MALLOC: 
a799			CWHEAD .MALLOC2 66 "ALLOT" 5 WORD_FLAG_CODE 
a799 56				db WORD_SYS_CORE+66             
a79a c2 a7			dw .MALLOC2            
a79c 06				db 5 + 1 
a79d .. 00			db "ALLOT",0              
a7a3				endm 
# End of macro CWHEAD
a7a3			; | ALLOT ( u -- u ) Allocate u bytes of memory space and push the pointer TOS  | DONE 
a7a3				if DEBUG_FORTH_WORDS_KEY 
a7a3					DMARK "ALL" 
a7a3 f5				push af  
a7a4 3a b8 a7			ld a, (.dmark)  
a7a7 32 65 ee			ld (debug_mark),a  
a7aa 3a b9 a7			ld a, (.dmark+1)  
a7ad 32 66 ee			ld (debug_mark+1),a  
a7b0 3a ba a7			ld a, (.dmark+2)  
a7b3 32 67 ee			ld (debug_mark+2),a  
a7b6 18 03			jr .pastdmark  
a7b8 ..			.dmark: db "ALL"  
a7bb f1			.pastdmark: pop af  
a7bc			endm  
# End of macro DMARK
a7bc					CALLMONITOR 
a7bc cd 6f ee			call debug_vector  
a7bf				endm  
# End of macro CALLMONITOR
a7bf				endif 
a7bf c3 e9 a7			jp .mallocc 
a7c2			.MALLOC2: 
a7c2			CWHEAD .FREE 66 "MALLOC" 6 WORD_FLAG_CODE 
a7c2 56				db WORD_SYS_CORE+66             
a7c3 00 a8			dw .FREE            
a7c5 07				db 6 + 1 
a7c6 .. 00			db "MALLOC",0              
a7cd				endm 
# End of macro CWHEAD
a7cd			; | MALLOC ( u -- u ) Allocate u bytes of memory space and push the pointer TOS  | DONE 
a7cd				; get byte count 
a7cd				if DEBUG_FORTH_WORDS_KEY 
a7cd					DMARK "MAL" 
a7cd f5				push af  
a7ce 3a e2 a7			ld a, (.dmark)  
a7d1 32 65 ee			ld (debug_mark),a  
a7d4 3a e3 a7			ld a, (.dmark+1)  
a7d7 32 66 ee			ld (debug_mark+1),a  
a7da 3a e4 a7			ld a, (.dmark+2)  
a7dd 32 67 ee			ld (debug_mark+2),a  
a7e0 18 03			jr .pastdmark  
a7e2 ..			.dmark: db "MAL"  
a7e5 f1			.pastdmark: pop af  
a7e6			endm  
# End of macro DMARK
a7e6					CALLMONITOR 
a7e6 cd 6f ee			call debug_vector  
a7e9				endm  
# End of macro CALLMONITOR
a7e9				endif 
a7e9			.mallocc: 
a7e9				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a7e9 cd 8a 9c			call macro_dsp_valuehl 
a7ec				endm 
# End of macro FORTH_DSP_VALUEHL
a7ec			 
a7ec			;		push hl 
a7ec			 
a7ec				; destroy value TOS 
a7ec			 
a7ec				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a7ec cd 42 9d			call macro_forth_dsp_pop 
a7ef				endm 
# End of macro FORTH_DSP_POP
a7ef			 
a7ef			;		pop hl 
a7ef cd c5 90			call malloc 
a7f2			if DEBUG_FORTH_MALLOC_GUARD 
a7f2 f5				push af 
a7f3 cd 13 8d			call ishlzero 
a7f6			;		ld a, l 
a7f6			;		add h 
a7f6			;		cp 0 
a7f6 f1				pop af 
a7f7				 
a7f7 cc a3 cd			call z,malloc_error 
a7fa			endif 
a7fa			 
a7fa cd 85 9a			call forth_push_numhl 
a7fd				NEXTW 
a7fd c3 76 9e			jp macro_next 
a800				endm 
# End of macro NEXTW
a800			 
a800			.FREE: 
a800			CWHEAD .LIST 67 "FREE" 4 WORD_FLAG_CODE 
a800 57				db WORD_SYS_CORE+67             
a801 31 a8			dw .LIST            
a803 05				db 4 + 1 
a804 .. 00			db "FREE",0              
a809				endm 
# End of macro CWHEAD
a809			; | FREE ( u --  ) Free memory block from malloc given u address  | DONE 
a809				if DEBUG_FORTH_WORDS_KEY 
a809					DMARK "FRE" 
a809 f5				push af  
a80a 3a 1e a8			ld a, (.dmark)  
a80d 32 65 ee			ld (debug_mark),a  
a810 3a 1f a8			ld a, (.dmark+1)  
a813 32 66 ee			ld (debug_mark+1),a  
a816 3a 20 a8			ld a, (.dmark+2)  
a819 32 67 ee			ld (debug_mark+2),a  
a81c 18 03			jr .pastdmark  
a81e ..			.dmark: db "FRE"  
a821 f1			.pastdmark: pop af  
a822			endm  
# End of macro DMARK
a822					CALLMONITOR 
a822 cd 6f ee			call debug_vector  
a825				endm  
# End of macro CALLMONITOR
a825				endif 
a825				; get address 
a825			 
a825				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a825 cd 8a 9c			call macro_dsp_valuehl 
a828				endm 
# End of macro FORTH_DSP_VALUEHL
a828			 
a828			;		push hl 
a828			 
a828				; destroy value TOS 
a828			 
a828				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a828 cd 42 9d			call macro_forth_dsp_pop 
a82b				endm 
# End of macro FORTH_DSP_POP
a82b			 
a82b			;		pop hl 
a82b			if FORTH_ENABLE_MALLOCFREE 
a82b cd 8f 91			call free 
a82e			endif 
a82e				NEXTW 
a82e c3 76 9e			jp macro_next 
a831				endm 
# End of macro NEXTW
a831			.LIST: 
a831			CWHEAD .FORGET 72 "LIST" 4 WORD_FLAG_CODE 
a831 5c				db WORD_SYS_CORE+72             
a832 2d aa			dw .FORGET            
a834 05				db 4 + 1 
a835 .. 00			db "LIST",0              
a83a				endm 
# End of macro CWHEAD
a83a			; | LIST ( uword -- u )    List the code to the word that is quoted (so as not to exec) on TOS | DONE 
a83a			; | | The quoted word must be in upper case. 
a83a			if DEBUG_FORTH_WORDS_KEY 
a83a				DMARK "LST" 
a83a f5				push af  
a83b 3a 4f a8			ld a, (.dmark)  
a83e 32 65 ee			ld (debug_mark),a  
a841 3a 50 a8			ld a, (.dmark+1)  
a844 32 66 ee			ld (debug_mark+1),a  
a847 3a 51 a8			ld a, (.dmark+2)  
a84a 32 67 ee			ld (debug_mark+2),a  
a84d 18 03			jr .pastdmark  
a84f ..			.dmark: db "LST"  
a852 f1			.pastdmark: pop af  
a853			endm  
# End of macro DMARK
a853				CALLMONITOR 
a853 cd 6f ee			call debug_vector  
a856				endm  
# End of macro CALLMONITOR
a856			endif 
a856			 
a856				FORTH_DSP_VALUEHL 
a856 cd 8a 9c			call macro_dsp_valuehl 
a859				endm 
# End of macro FORTH_DSP_VALUEHL
a859			 
a859 e5				push hl 
a85a				FORTH_DSP_POP 
a85a cd 42 9d			call macro_forth_dsp_pop 
a85d				endm 
# End of macro FORTH_DSP_POP
a85d c1				pop bc 
a85e			 
a85e			; Start format of scratch string 
a85e			 
a85e 21 bb e2			ld hl, scratch 
a861			 
a861 3e 3a			ld a, ':' 
a863 77				ld (hl),a 
a864 23				inc hl 
a865 3e 20			ld a, ' ' 
a867 77				ld (hl), a 
a868			 
a868				; Get ptr to the word we need to look up 
a868			 
a868			;		FORTH_DSP_VALUEHL 
a868				;v5 FORTH_DSP_VALUE 
a868			; TODO type check 
a868			;		inc hl    ; Skip type check  
a868			;		push hl 
a868			;		ex de, hl    ; put into DE 
a868			 
a868			 
a868 21 f3 de			ld hl, baseram 
a86b				;ld hl, baseusermem 
a86b			 
a86b e5			push hl   ; sacreifical push 
a86c			 
a86c			.ldouscanm: 
a86c e1			pop hl 
a86d			.ldouscan: 
a86d			if DEBUG_FORTH_WORDS 
a86d				DMARK "LSs" 
a86d f5				push af  
a86e 3a 82 a8			ld a, (.dmark)  
a871 32 65 ee			ld (debug_mark),a  
a874 3a 83 a8			ld a, (.dmark+1)  
a877 32 66 ee			ld (debug_mark+1),a  
a87a 3a 84 a8			ld a, (.dmark+2)  
a87d 32 67 ee			ld (debug_mark+2),a  
a880 18 03			jr .pastdmark  
a882 ..			.dmark: db "LSs"  
a885 f1			.pastdmark: pop af  
a886			endm  
# End of macro DMARK
a886				CALLMONITOR 
a886 cd 6f ee			call debug_vector  
a889				endm  
# End of macro CALLMONITOR
a889			endif 
a889			; skip dict stub 
a889 cd c7 9f			call forth_tok_next 
a88c			 
a88c			 
a88c			; while we have words to look for 
a88c			 
a88c 7e			ld a, (hl)      
a88d			if DEBUG_FORTH_WORDS 
a88d				DMARK "LSk" 
a88d f5				push af  
a88e 3a a2 a8			ld a, (.dmark)  
a891 32 65 ee			ld (debug_mark),a  
a894 3a a3 a8			ld a, (.dmark+1)  
a897 32 66 ee			ld (debug_mark+1),a  
a89a 3a a4 a8			ld a, (.dmark+2)  
a89d 32 67 ee			ld (debug_mark+2),a  
a8a0 18 03			jr .pastdmark  
a8a2 ..			.dmark: db "LSk"  
a8a5 f1			.pastdmark: pop af  
a8a6			endm  
# End of macro DMARK
a8a6				CALLMONITOR 
a8a6 cd 6f ee			call debug_vector  
a8a9				endm  
# End of macro CALLMONITOR
a8a9			endif 
a8a9				;cp WORD_SYS_END 
a8a9				;jp z, .lunotfound 
a8a9			 
a8a9					; if we hit non uwords then gone too far 
a8a9 fe 01				cp WORD_SYS_UWORD 
a8ab c2 e9 a9				jp nz, .lunotfound 
a8ae			 
a8ae				if DEBUG_FORTH_WORDS 
a8ae					DMARK "LSu" 
a8ae f5				push af  
a8af 3a c3 a8			ld a, (.dmark)  
a8b2 32 65 ee			ld (debug_mark),a  
a8b5 3a c4 a8			ld a, (.dmark+1)  
a8b8 32 66 ee			ld (debug_mark+1),a  
a8bb 3a c5 a8			ld a, (.dmark+2)  
a8be 32 67 ee			ld (debug_mark+2),a  
a8c1 18 03			jr .pastdmark  
a8c3 ..			.dmark: db "LSu"  
a8c6 f1			.pastdmark: pop af  
a8c7			endm  
# End of macro DMARK
a8c7					CALLMONITOR 
a8c7 cd 6f ee			call debug_vector  
a8ca				endm  
# End of macro CALLMONITOR
a8ca				endif 
a8ca			 
a8ca					; found a uword but is it the one we want... 
a8ca			 
a8ca c5					push bc     ; uword to find is on bc 
a8cb d1					pop de 
a8cc			 
a8cc e5					push hl  ; to save the ptr 
a8cd			 
a8cd					; skip opcode 
a8cd 23					inc hl  
a8ce					; skip next ptr 
a8ce 23					inc hl  
a8cf 23					inc hl 
a8d0					; skip len 
a8d0 23					inc hl 
a8d1			 
a8d1				if DEBUG_FORTH_WORDS 
a8d1					DMARK "LSc" 
a8d1 f5				push af  
a8d2 3a e6 a8			ld a, (.dmark)  
a8d5 32 65 ee			ld (debug_mark),a  
a8d8 3a e7 a8			ld a, (.dmark+1)  
a8db 32 66 ee			ld (debug_mark+1),a  
a8de 3a e8 a8			ld a, (.dmark+2)  
a8e1 32 67 ee			ld (debug_mark+2),a  
a8e4 18 03			jr .pastdmark  
a8e6 ..			.dmark: db "LSc"  
a8e9 f1			.pastdmark: pop af  
a8ea			endm  
# End of macro DMARK
a8ea					CALLMONITOR 
a8ea cd 6f ee			call debug_vector  
a8ed				endm  
# End of macro CALLMONITOR
a8ed				endif 
a8ed			; was exiting on the shorter of the words. swap and test is in favour of the longer word. 
a8ed			; ie. If WOO is defined first and then WO. Couldnt list WO. 
a8ed			; Nope that has gone the other way. It needs to be exact not on first zero 
a8ed			;		call strcmp 
a8ed c5					push bc 
a8ee cd 95 90				call StrictStrCmp 
a8f1 c1					pop bc 
a8f2 c2 6c a8				jp nz, .ldouscanm 
a8f5				 
a8f5			 
a8f5			 
a8f5					; we have a uword so push its name to the stack 
a8f5			 
a8f5			;	   	push hl  ; save so we can move to next dict block 
a8f5 e1			pop hl 
a8f6			 
a8f6				if DEBUG_FORTH_WORDS 
a8f6					DMARK "LSm" 
a8f6 f5				push af  
a8f7 3a 0b a9			ld a, (.dmark)  
a8fa 32 65 ee			ld (debug_mark),a  
a8fd 3a 0c a9			ld a, (.dmark+1)  
a900 32 66 ee			ld (debug_mark+1),a  
a903 3a 0d a9			ld a, (.dmark+2)  
a906 32 67 ee			ld (debug_mark+2),a  
a909 18 03			jr .pastdmark  
a90b ..			.dmark: db "LSm"  
a90e f1			.pastdmark: pop af  
a90f			endm  
# End of macro DMARK
a90f					CALLMONITOR 
a90f cd 6f ee			call debug_vector  
a912				endm  
# End of macro CALLMONITOR
a912				endif 
a912			 
a912					; skip opcode 
a912 23					inc hl  
a913					; skip next ptr 
a913 23					inc hl  
a914 23					inc hl 
a915					; skip len 
a915 7e					ld a, (hl)   ; save length to add 
a916				if DEBUG_FORTH_WORDS 
a916					DMARK "LS2" 
a916 f5				push af  
a917 3a 2b a9			ld a, (.dmark)  
a91a 32 65 ee			ld (debug_mark),a  
a91d 3a 2c a9			ld a, (.dmark+1)  
a920 32 66 ee			ld (debug_mark+1),a  
a923 3a 2d a9			ld a, (.dmark+2)  
a926 32 67 ee			ld (debug_mark+2),a  
a929 18 03			jr .pastdmark  
a92b ..			.dmark: db "LS2"  
a92e f1			.pastdmark: pop af  
a92f			endm  
# End of macro DMARK
a92f					CALLMONITOR 
a92f cd 6f ee			call debug_vector  
a932				endm  
# End of macro CALLMONITOR
a932				endif 
a932			 
a932					; save this location 
a932				 
a932 e5					push hl 
a933			 
a933 23					inc hl 
a934 11 bd e2				ld de, scratch+2 
a937 4f					ld c, a 
a938 06 00				ld b, 0 
a93a			 
a93a				if DEBUG_FORTH_WORDS 
a93a					DMARK "LSn" 
a93a f5				push af  
a93b 3a 4f a9			ld a, (.dmark)  
a93e 32 65 ee			ld (debug_mark),a  
a941 3a 50 a9			ld a, (.dmark+1)  
a944 32 66 ee			ld (debug_mark+1),a  
a947 3a 51 a9			ld a, (.dmark+2)  
a94a 32 67 ee			ld (debug_mark+2),a  
a94d 18 03			jr .pastdmark  
a94f ..			.dmark: db "LSn"  
a952 f1			.pastdmark: pop af  
a953			endm  
# End of macro DMARK
a953					CALLMONITOR 
a953 cd 6f ee			call debug_vector  
a956				endm  
# End of macro CALLMONITOR
a956				endif 
a956			 
a956					; copy uword name to scratch 
a956			 
a956			;		ldir 
a956			.licplw:	; copy uword name to scratch converting to lower case as we go 
a956 ed a0				ldi 
a958 1b					dec de 
a959 1a					ld a, (de) 
a95a cd 68 8f				call to_lower 
a95d 12					ld (de),a 
a95e 13					inc de 
a95f 3e 00				ld a, 0 
a961 b9					cp c 
a962 20 f2				jr nz, .licplw 
a964			 
a964			 
a964			 
a964 1b					dec de 
a965 3e 20				ld a, ' '    ; change null to space 
a967 12					ld (de), a 
a968			 
a968 13					inc de 
a969			 
a969 d5					push de 
a96a c1					pop bc     ; move scratch pointer to end of word name and save it 
a96b			 
a96b e1					pop hl 
a96c 7e					ld a, (hl) 
a96d					;inc hl 
a96d					; skip word string 
a96d cd ea 8c				call addatohl 
a970			 
a970 23					inc hl 
a971			 
a971				if DEBUG_FORTH_WORDS 
a971					DMARK "LS3" 
a971 f5				push af  
a972 3a 86 a9			ld a, (.dmark)  
a975 32 65 ee			ld (debug_mark),a  
a978 3a 87 a9			ld a, (.dmark+1)  
a97b 32 66 ee			ld (debug_mark+1),a  
a97e 3a 88 a9			ld a, (.dmark+2)  
a981 32 67 ee			ld (debug_mark+2),a  
a984 18 03			jr .pastdmark  
a986 ..			.dmark: db "LS3"  
a989 f1			.pastdmark: pop af  
a98a			endm  
# End of macro DMARK
a98a					CALLMONITOR 
a98a cd 6f ee			call debug_vector  
a98d				endm  
# End of macro CALLMONITOR
a98d				endif 
a98d					; should now be at the start of the machine code to setup the eval of the uword 
a98d					; now locate the ptr to the string defintion 
a98d			 
a98d					; skip ld hl, 
a98d					; then load the ptr 
a98d			; TODO use get from hl ptr 
a98d 23					inc hl 
a98e 5e					ld e, (hl) 
a98f 23					inc hl 
a990 56					ld d, (hl) 
a991 eb					ex de, hl 
a992			 
a992			 
a992				if DEBUG_FORTH_WORDS 
a992					DMARK "LSt" 
a992 f5				push af  
a993 3a a7 a9			ld a, (.dmark)  
a996 32 65 ee			ld (debug_mark),a  
a999 3a a8 a9			ld a, (.dmark+1)  
a99c 32 66 ee			ld (debug_mark+1),a  
a99f 3a a9 a9			ld a, (.dmark+2)  
a9a2 32 67 ee			ld (debug_mark+2),a  
a9a5 18 03			jr .pastdmark  
a9a7 ..			.dmark: db "LSt"  
a9aa f1			.pastdmark: pop af  
a9ab			endm  
# End of macro DMARK
a9ab					CALLMONITOR 
a9ab cd 6f ee			call debug_vector  
a9ae				endm  
# End of macro CALLMONITOR
a9ae				endif 
a9ae			 
a9ae			; cant push right now due to tokenised strings  
a9ae			 
a9ae			; get the destination of where to copy this definition to. 
a9ae			 
a9ae c5					push bc 
a9af d1					pop de 
a9b0			 
a9b0 7e			.listl:         ld a,(hl) 
a9b1 fe 00				cp 0 
a9b3 28 09				jr z, .lreplsp     ; replace zero with space 
a9b5					;cp FORTH_END_BUFFER 
a9b5 fe 3b				cp ';'    ; No end buffer flag but the ';' will be a good sign of the end of definition 
a9b7 28 0a				jr z, .listdone    ; at end of uword defination to close of scratch and finish 
a9b9				 
a9b9					; just copy this char as is then 
a9b9			 
a9b9 12					ld (de), a 
a9ba			 
a9ba 23			.listnxt:	inc hl 
a9bb 13					inc de 
a9bc 18 f2				jr .listl 
a9be			 
a9be 3e 20		.lreplsp:	ld a,' ' 
a9c0 12					ld (de), a 
a9c1 18 f7				jr .listnxt 
a9c3			 
a9c3			; close up uword def 
a9c3			 
a9c3			.listdone: 
a9c3 12					ld (de), a 
a9c4 13					inc de 
a9c5 3e 00				ld a, 0 
a9c7 12					ld (de), a 
a9c8			 
a9c8			; now have def so clean up and push to stack 
a9c8			 
a9c8 21 bb e2				ld hl, scratch 
a9cb				if DEBUG_FORTH_WORDS 
a9cb					DMARK "Ltp" 
a9cb f5				push af  
a9cc 3a e0 a9			ld a, (.dmark)  
a9cf 32 65 ee			ld (debug_mark),a  
a9d2 3a e1 a9			ld a, (.dmark+1)  
a9d5 32 66 ee			ld (debug_mark+1),a  
a9d8 3a e2 a9			ld a, (.dmark+2)  
a9db 32 67 ee			ld (debug_mark+2),a  
a9de 18 03			jr .pastdmark  
a9e0 ..			.dmark: db "Ltp"  
a9e3 f1			.pastdmark: pop af  
a9e4			endm  
# End of macro DMARK
a9e4					CALLMONITOR 
a9e4 cd 6f ee			call debug_vector  
a9e7				endm  
# End of macro CALLMONITOR
a9e7				endif 
a9e7			 
a9e7 18 1f			jr .listpush 
a9e9			 
a9e9			;.lnuword:	pop hl 
a9e9			;		call forth_tok_next 
a9e9			;		jp .ldouscan  
a9e9			 
a9e9			.lunotfound:		  
a9e9			 
a9e9				if DEBUG_FORTH_WORDS 
a9e9					DMARK "LSn" 
a9e9 f5				push af  
a9ea 3a fe a9			ld a, (.dmark)  
a9ed 32 65 ee			ld (debug_mark),a  
a9f0 3a ff a9			ld a, (.dmark+1)  
a9f3 32 66 ee			ld (debug_mark+1),a  
a9f6 3a 00 aa			ld a, (.dmark+2)  
a9f9 32 67 ee			ld (debug_mark+2),a  
a9fc 18 03			jr .pastdmark  
a9fe ..			.dmark: db "LSn"  
aa01 f1			.pastdmark: pop af  
aa02			endm  
# End of macro DMARK
aa02					CALLMONITOR 
aa02 cd 6f ee			call debug_vector  
aa05				endm  
# End of macro CALLMONITOR
aa05				endif 
aa05			 
aa05					 
aa05			;		FORTH_DSP_POP 
aa05			;		ld hl, .luno 
aa05			 
aa05					NEXTW			 
aa05 c3 76 9e			jp macro_next 
aa08				endm 
# End of macro NEXTW
aa08			 
aa08			.listpush: 
aa08				if DEBUG_FORTH_WORDS 
aa08					DMARK "LS>" 
aa08 f5				push af  
aa09 3a 1d aa			ld a, (.dmark)  
aa0c 32 65 ee			ld (debug_mark),a  
aa0f 3a 1e aa			ld a, (.dmark+1)  
aa12 32 66 ee			ld (debug_mark+1),a  
aa15 3a 1f aa			ld a, (.dmark+2)  
aa18 32 67 ee			ld (debug_mark+2),a  
aa1b 18 03			jr .pastdmark  
aa1d ..			.dmark: db "LS>"  
aa20 f1			.pastdmark: pop af  
aa21			endm  
# End of macro DMARK
aa21					CALLMONITOR 
aa21 cd 6f ee			call debug_vector  
aa24				endm  
# End of macro CALLMONITOR
aa24				endif 
aa24 cd f3 9a				call forth_push_str 
aa27			 
aa27			 
aa27			 
aa27					NEXTW 
aa27 c3 76 9e			jp macro_next 
aa2a				endm 
# End of macro NEXTW
aa2a			 
aa2a			;.luno:    db "Word not found",0 
aa2a			 
aa2a			 
aa2a			 
aa2a			 
aa2a			 
aa2a			;		push hl   ; save pointer to start of uword def string 
aa2a			; 
aa2a			;; look for FORTH_EOL_LINE 
aa2a			;		ld a, FORTH_END_BUFFER 
aa2a			;		call strlent 
aa2a			; 
aa2a			;		inc hl		 ; space for coln def 
aa2a			;		inc hl 
aa2a			;		inc hl          ; space for terms 
aa2a			;		inc hl 
aa2a			; 
aa2a			;		ld a, 20   ; TODO get actual length 
aa2a			;		call addatohl    ; include a random amount of room for the uword name 
aa2a			; 
aa2a			;		 
aa2a			;	if DEBUG_FORTH_WORDS 
aa2a			;		DMARK "Lt1" 
aa2a			;		CALLMONITOR 
aa2a			;	endif 
aa2a			;		 
aa2a			; 
aa2a			;; malloc space for the string because we cant change it 
aa2a			; 
aa2a			;		call malloc 
aa2a			;	if DEBUG_FORTH_MALLOC_GUARD 
aa2a			;		push af 
aa2a			;		call ishlzero 
aa2a			;		pop af 
aa2a			;		 
aa2a			;		call z,malloc_error 
aa2a			;	endif 
aa2a			; 
aa2a			;	if DEBUG_FORTH_WORDS 
aa2a			;		DMARK "Lt2" 
aa2a			;		CALLMONITOR 
aa2a			;	endif 
aa2a			;		pop de 
aa2a			;		push hl    ; push the malloc to release later 
aa2a			;		push hl   ;  push back a copy for the later stack push 
aa2a			;		 
aa2a			;; copy the string swapping out the zero terms for spaces 
aa2a			; 
aa2a			;		; de has our source 
aa2a			;		; hl has our dest 
aa2a			; 
aa2a			;; add the coln def 
aa2a			; 
aa2a			;		ld a, ':' 
aa2a			;		ld (hl), a 
aa2a			;		inc hl 
aa2a			;		ld a, ' ' 
aa2a			;		ld (hl), a 
aa2a			;		inc hl 
aa2a			; 
aa2a			;; add the uname word 
aa2a			;		push de   ; save our string for now 
aa2a			;		ex de, hl 
aa2a			; 
aa2a			;		FORTH_DSP_VALUE 
aa2a			;		;v5 FORTH_DSP_VALUE 
aa2a			; 
aa2a			;		inc hl   ; skip type but we know by now this is OK 
aa2a			; 
aa2a			;.luword:	ld a,(hl) 
aa2a			;		cp 0 
aa2a			;		jr z, .luword2 
aa2a			;		ld (de), a 
aa2a			;		inc de 
aa2a			;		inc hl 
aa2a			;		jr .luword 
aa2a			; 
aa2a			;.luword2:	ld a, ' ' 
aa2a			;		ld (de), a 
aa2a			;;		inc hl 
aa2a			;;		inc de 
aa2a			;;		ld (de), a 
aa2a			;;		inc hl 
aa2a			;		inc de 
aa2a			; 
aa2a			;		ex de, hl 
aa2a			;		pop de 
aa2a			;		 
aa2a			;		 
aa2a			; 
aa2a			;; detoken that string and copy it 
aa2a			; 
aa2a			;	if DEBUG_FORTH_WORDS 
aa2a			;		DMARK "Lt2" 
aa2a			;		CALLMONITOR 
aa2a			;	endif 
aa2a			;.ldetok:	ld a, (de) 
aa2a			;		cp FORTH_END_BUFFER 
aa2a			;		jr z, .ldetokend 
aa2a			;		; swap out any zero term for space 
aa2a			;		cp 0 
aa2a			;		jr nz, .ldetoknext 
aa2a			;		ld a, ' ' 
aa2a			; 
aa2a			;	if DEBUG_FORTH_WORDS 
aa2a			;		DMARK "LtS" 
aa2a			;		CALLMONITOR 
aa2a			;	endif 
aa2a			;.ldetoknext:	ld (hl), a 
aa2a			;		inc de 
aa2a			;		inc hl 
aa2a			;		jr .ldetok 
aa2a			; 
aa2a			;.ldetokend:	ld a, 0    ; replace forth eol with string term for pushing 
aa2a			;		ld (hl), a  
aa2a			; 
aa2a			;; free that temp malloc 
aa2a			; 
aa2a			;		pop hl    
aa2a			; 
aa2a			;	if DEBUG_FORTH_WORDS 
aa2a			;		DMARK "Lt4" 
aa2a			;		CALLMONITOR 
aa2a			;	endif 
aa2a			;		call forth_apushstrhl 
aa2a			; 
aa2a			;		; get rid of temp malloc area 
aa2a			; 
aa2a			;		pop hl 
aa2a			;		call free 
aa2a			; 
aa2a			;		jr .ludone 
aa2a			; 
aa2a			;.lnuword:	pop hl 
aa2a			;		call forth_tok_next 
aa2a			;		jp .ldouscan  
aa2a			; 
aa2a			;.ludone:		 pop hl 
aa2a			; 
aa2a					NEXTW 
aa2a c3 76 9e			jp macro_next 
aa2d				endm 
# End of macro NEXTW
aa2d			 
aa2d			.FORGET: 
aa2d				CWHEAD .NOP 73 "FORGET" 6 WORD_FLAG_CODE 
aa2d 5d				db WORD_SYS_CORE+73             
aa2e a6 aa			dw .NOP            
aa30 07				db 6 + 1 
aa31 .. 00			db "FORGET",0              
aa38				endm 
# End of macro CWHEAD
aa38			; | FORGET ( uword -- )    Forget the uword on TOS | DONE 
aa38			; | | Will flag the word's op code to be deleted as well as replace the first char of the word with '_'. Quoted uword name must be in caps. 
aa38			; | |  
aa38			; | | e.g. "MORE" forget 
aa38					if DEBUG_FORTH_WORDS_KEY 
aa38						DMARK "FRG" 
aa38 f5				push af  
aa39 3a 4d aa			ld a, (.dmark)  
aa3c 32 65 ee			ld (debug_mark),a  
aa3f 3a 4e aa			ld a, (.dmark+1)  
aa42 32 66 ee			ld (debug_mark+1),a  
aa45 3a 4f aa			ld a, (.dmark+2)  
aa48 32 67 ee			ld (debug_mark+2),a  
aa4b 18 03			jr .pastdmark  
aa4d ..			.dmark: db "FRG"  
aa50 f1			.pastdmark: pop af  
aa51			endm  
# End of macro DMARK
aa51						CALLMONITOR 
aa51 cd 6f ee			call debug_vector  
aa54				endm  
# End of macro CALLMONITOR
aa54					endif 
aa54			 
aa54				; find uword 
aa54			        ; update start of word with "_" 
aa54				; replace uword with deleted flag 
aa54			 
aa54			 
aa54			;	if DEBUG_FORTH_WORDS 
aa54			;		DMARK "FOG" 
aa54			;		CALLMONITOR 
aa54			;	endif 
aa54			 
aa54			 
aa54					; Get ptr to the word we need to look up 
aa54			 
aa54					FORTH_DSP_VALUEHL 
aa54 cd 8a 9c			call macro_dsp_valuehl 
aa57				endm 
# End of macro FORTH_DSP_VALUEHL
aa57					;v5 FORTH_DSP_VALUE 
aa57				; TODO type check 
aa57			;		inc hl    ; Skip type check  
aa57 e5					push hl 
aa58 c1					pop bc 
aa59			;		ex de, hl    ; put into DE 
aa59			 
aa59			 
aa59 21 f3 de				ld hl, baseram 
aa5c					;ld hl, baseusermem 
aa5c			 
aa5c				; skip dict stub 
aa5c			;	call forth_tok_next 
aa5c e5			push hl   ; sacreifical push 
aa5d			 
aa5d			.fldouscanm: 
aa5d e1				pop hl 
aa5e			.fldouscan: 
aa5e			;	if DEBUG_FORTH_WORDS 
aa5e			;		DMARK "LSs" 
aa5e			;		CALLMONITOR 
aa5e			;	endif 
aa5e				; skip dict stub 
aa5e cd c7 9f				call forth_tok_next 
aa61			 
aa61			 
aa61			; while we have words to look for 
aa61			 
aa61 7e				ld a, (hl)      
aa62			;	if DEBUG_FORTH_WORDS 
aa62			;		DMARK "LSk" 
aa62			;		CALLMONITOR 
aa62			;	endif 
aa62 fe 00				cp WORD_SYS_END 
aa64 ca a0 aa				jp z, .flunotfound 
aa67 fe 01				cp WORD_SYS_UWORD 
aa69 c2 5e aa				jp nz, .fldouscan 
aa6c			 
aa6c			;	if DEBUG_FORTH_WORDS 
aa6c			;		DMARK "LSu" 
aa6c			;		CALLMONITOR 
aa6c			;	endif 
aa6c			 
aa6c					; found a uword but is it the one we want... 
aa6c			 
aa6c c5					push bc     ; uword to find is on bc 
aa6d d1					pop de 
aa6e			 
aa6e e5					push hl  ; to save the ptr 
aa6f			 
aa6f					; skip opcode 
aa6f 23					inc hl  
aa70					; skip next ptr 
aa70 23					inc hl  
aa71 23					inc hl 
aa72					; skip len 
aa72 23					inc hl 
aa73			 
aa73			;	if DEBUG_FORTH_WORDS 
aa73			;		DMARK "LSc" 
aa73			;		CALLMONITOR 
aa73			;	endif 
aa73 cd 88 90				call strcmp 
aa76 c2 5d aa				jp nz, .fldouscanm 
aa79			; 
aa79			; 
aa79			;; while we have words to look for 
aa79			; 
aa79			;.fdouscan:	ld a, (hl)      
aa79			;	if DEBUG_FORTH_WORDS 
aa79			;		DMARK "LSs" 
aa79			;		CALLMONITOR 
aa79			;	endif 
aa79			;		cp WORD_SYS_END 
aa79			;		jp z, .fudone 
aa79			;		cp WORD_SYS_UWORD 
aa79			;		jp nz, .fnuword 
aa79			; 
aa79			;	if DEBUG_FORTH_WORDS 
aa79			;		DMARK "FGu" 
aa79			;		CALLMONITOR 
aa79			;	endif 
aa79			; 
aa79			;		; found a uword but is it the one we want... 
aa79			; 
aa79			; 
aa79			;	        pop de   ; get back the dsp name 
aa79			;		push de 
aa79			; 
aa79			;		push hl  ; to save the ptr 
aa79			; 
aa79			;		; skip opcode 
aa79			;		inc hl  
aa79			;		; skip next ptr 
aa79			;		inc hl  
aa79			;		inc hl 
aa79			;		; skip len 
aa79			;		inc hl 
aa79			; 
aa79			;	if DEBUG_FORTH_WORDS 
aa79			;		DMARK "FGc" 
aa79			;		CALLMONITOR 
aa79			;	endif 
aa79			;		call strcmp 
aa79			;		jp nz, .fnuword 
aa79			 
aa79			 
aa79 e1			pop hl 
aa7a			 
aa7a				 
aa7a				if DEBUG_FORTH_WORDS 
aa7a					DMARK "FGm" 
aa7a f5				push af  
aa7b 3a 8f aa			ld a, (.dmark)  
aa7e 32 65 ee			ld (debug_mark),a  
aa81 3a 90 aa			ld a, (.dmark+1)  
aa84 32 66 ee			ld (debug_mark+1),a  
aa87 3a 91 aa			ld a, (.dmark+2)  
aa8a 32 67 ee			ld (debug_mark+2),a  
aa8d 18 03			jr .pastdmark  
aa8f ..			.dmark: db "FGm"  
aa92 f1			.pastdmark: pop af  
aa93			endm  
# End of macro DMARK
aa93					CALLMONITOR 
aa93 cd 6f ee			call debug_vector  
aa96				endm  
# End of macro CALLMONITOR
aa96				endif 
aa96			 
aa96			 
aa96			 
aa96					; we have a uword so push its name to the stack 
aa96			 
aa96			;	   	push hl  ; save so we can move to next dict block 
aa96			;pop hl 
aa96			 
aa96					; update opcode to deleted 
aa96 3e 03				ld a, WORD_SYS_DELETED 
aa98 77					ld (hl), a 
aa99			 
aa99 23					inc hl  
aa9a					; skip next ptr 
aa9a 23					inc hl  
aa9b 23					inc hl 
aa9c					; skip len 
aa9c 23					inc hl 
aa9d			 
aa9d					; TODO change parser to skip deleted words but for now mark it out 
aa9d 3e 5f				ld a, "_" 
aa9f 77					ld  (hl),a 
aaa0			 
aaa0			;		jr .fudone 
aaa0			; 
aaa0			;.fnuword:	pop hl 
aaa0			;		call forth_tok_next 
aaa0			;		jp .fdouscan  
aaa0			 
aaa0			.flunotfound:		  
aaa0			 
aaa0			 
aaa0					 
aaa0					FORTH_DSP_POP 
aaa0 cd 42 9d			call macro_forth_dsp_pop 
aaa3				endm 
# End of macro FORTH_DSP_POP
aaa3			;		ld hl, .luno 
aaa3			;.fudone:		 pop hl 
aaa3					NEXTW 
aaa3 c3 76 9e			jp macro_next 
aaa6				endm 
# End of macro NEXTW
aaa6			.NOP: 
aaa6				CWHEAD .COMO 77 "NOP" 3 WORD_FLAG_CODE 
aaa6 61				db WORD_SYS_CORE+77             
aaa7 cd aa			dw .COMO            
aaa9 04				db 3 + 1 
aaaa .. 00			db "NOP",0              
aaae				endm 
# End of macro CWHEAD
aaae			; | NOP (  --  ) Do nothing | DONE 
aaae					if DEBUG_FORTH_WORDS_KEY 
aaae						DMARK "NOP" 
aaae f5				push af  
aaaf 3a c3 aa			ld a, (.dmark)  
aab2 32 65 ee			ld (debug_mark),a  
aab5 3a c4 aa			ld a, (.dmark+1)  
aab8 32 66 ee			ld (debug_mark+1),a  
aabb 3a c5 aa			ld a, (.dmark+2)  
aabe 32 67 ee			ld (debug_mark+2),a  
aac1 18 03			jr .pastdmark  
aac3 ..			.dmark: db "NOP"  
aac6 f1			.pastdmark: pop af  
aac7			endm  
# End of macro DMARK
aac7						CALLMONITOR 
aac7 cd 6f ee			call debug_vector  
aaca				endm  
# End of macro CALLMONITOR
aaca					endif 
aaca				       NEXTW 
aaca c3 76 9e			jp macro_next 
aacd				endm 
# End of macro NEXTW
aacd			.COMO: 
aacd				CWHEAD .COMC 90 "(" 1 WORD_FLAG_CODE 
aacd 6e				db WORD_SYS_CORE+90             
aace 1f ab			dw .COMC            
aad0 02				db 1 + 1 
aad1 .. 00			db "(",0              
aad3				endm 
# End of macro CWHEAD
aad3			; | ( ( -- )  Start of comment | DONE 
aad3			 
aad3			 
aad3 2a bc e5				ld hl, ( os_tok_ptr) 
aad6 11 1a ab			ld de, .closepar 
aad9					 
aad9					if DEBUG_FORTH_WORDS 
aad9						DMARK ").." 
aad9 f5				push af  
aada 3a ee aa			ld a, (.dmark)  
aadd 32 65 ee			ld (debug_mark),a  
aae0 3a ef aa			ld a, (.dmark+1)  
aae3 32 66 ee			ld (debug_mark+1),a  
aae6 3a f0 aa			ld a, (.dmark+2)  
aae9 32 67 ee			ld (debug_mark+2),a  
aaec 18 03			jr .pastdmark  
aaee ..			.dmark: db ").."  
aaf1 f1			.pastdmark: pop af  
aaf2			endm  
# End of macro DMARK
aaf2						CALLMONITOR 
aaf2 cd 6f ee			call debug_vector  
aaf5				endm  
# End of macro CALLMONITOR
aaf5					endif 
aaf5 cd 91 9f			call findnexttok  
aaf8			 
aaf8					if DEBUG_FORTH_WORDS 
aaf8						DMARK "IF5" 
aaf8 f5				push af  
aaf9 3a 0d ab			ld a, (.dmark)  
aafc 32 65 ee			ld (debug_mark),a  
aaff 3a 0e ab			ld a, (.dmark+1)  
ab02 32 66 ee			ld (debug_mark+1),a  
ab05 3a 0f ab			ld a, (.dmark+2)  
ab08 32 67 ee			ld (debug_mark+2),a  
ab0b 18 03			jr .pastdmark  
ab0d ..			.dmark: db "IF5"  
ab10 f1			.pastdmark: pop af  
ab11			endm  
# End of macro DMARK
ab11						CALLMONITOR 
ab11 cd 6f ee			call debug_vector  
ab14				endm  
# End of macro CALLMONITOR
ab14					endif 
ab14				; replace below with ) exec using tok_ptr 
ab14 22 bc e5			ld (os_tok_ptr), hl 
ab17 c3 07 9f			jp exec1 
ab1a			 
ab1a .. 00			.closepar:   db ")",0 
ab1c			 
ab1c				       NEXTW 
ab1c c3 76 9e			jp macro_next 
ab1f				endm 
# End of macro NEXTW
ab1f			.COMC: 
ab1f				CWHEAD .SCRATCH 91 ")" 1 WORD_FLAG_CODE 
ab1f 6f				db WORD_SYS_CORE+91             
ab20 28 ab			dw .SCRATCH            
ab22 02				db 1 + 1 
ab23 .. 00			db ")",0              
ab25				endm 
# End of macro CWHEAD
ab25			; | ) ( -- )  End of comment |  DONE  
ab25				       NEXTW 
ab25 c3 76 9e			jp macro_next 
ab28				endm 
# End of macro NEXTW
ab28			 
ab28			.SCRATCH: 
ab28				CWHEAD .INC 91 "SCRATCH" 7 WORD_FLAG_CODE 
ab28 6f				db WORD_SYS_CORE+91             
ab29 63 ab			dw .INC            
ab2b 08				db 7 + 1 
ab2c .. 00			db "SCRATCH",0              
ab34				endm 
# End of macro CWHEAD
ab34			; | SCRATCH ( u -- addr ) Pushes address of offset u to stack | DONE 
ab34			; | | The scratch area provides 32 word array. Can be used as single byte or as a word by passing the offset on stack. Pushes the resulting address to stack.  
ab34			; | | When used with the direct storage writing/malloc and the !@ or word versions it is possible to construct an expanded and flexible variable system 
ab34			; | |  
ab34			; | | e.g.    : score $00 scratch ; 
ab34			; | |  
ab34			; | | $00 score ! 
ab34			; | | $01 score +! 
ab34			; | |  
ab34			; | | e.g.   : varword $0a scratch ;  
ab34			; | | 
ab34			; | | $8000 varword ! 
ab34					if DEBUG_FORTH_WORDS_KEY 
ab34						DMARK "SCR" 
ab34 f5				push af  
ab35 3a 49 ab			ld a, (.dmark)  
ab38 32 65 ee			ld (debug_mark),a  
ab3b 3a 4a ab			ld a, (.dmark+1)  
ab3e 32 66 ee			ld (debug_mark+1),a  
ab41 3a 4b ab			ld a, (.dmark+2)  
ab44 32 67 ee			ld (debug_mark+2),a  
ab47 18 03			jr .pastdmark  
ab49 ..			.dmark: db "SCR"  
ab4c f1			.pastdmark: pop af  
ab4d			endm  
# End of macro DMARK
ab4d						CALLMONITOR 
ab4d cd 6f ee			call debug_vector  
ab50				endm  
# End of macro CALLMONITOR
ab50					endif 
ab50			 
ab50					FORTH_DSP_VALUEHL 
ab50 cd 8a 9c			call macro_dsp_valuehl 
ab53				endm 
# End of macro FORTH_DSP_VALUEHL
ab53				 
ab53					FORTH_DSP_POP 
ab53 cd 42 9d			call macro_forth_dsp_pop 
ab56				endm 
# End of macro FORTH_DSP_POP
ab56			 
ab56 7d					ld a, l 
ab57 21 e0 e7				ld hl, os_var_array 
ab5a cd ea 8c				call addatohl 
ab5d			 
ab5d cd 85 9a				call forth_push_numhl 
ab60			 
ab60				       NEXTW 
ab60 c3 76 9e			jp macro_next 
ab63				endm 
# End of macro NEXTW
ab63			 
ab63			.INC: 
ab63				CWHEAD .DEC 91 "+!" 2 WORD_FLAG_CODE 
ab63 6f				db WORD_SYS_CORE+91             
ab64 b9 ab			dw .DEC            
ab66 03				db 2 + 1 
ab67 .. 00			db "+!",0              
ab6a				endm 
# End of macro CWHEAD
ab6a			; | +! ( u a -- )  Increment byte at address a by the value u | DONE 
ab6a					if DEBUG_FORTH_WORDS_KEY 
ab6a						DMARK "+s_" 
ab6a f5				push af  
ab6b 3a 7f ab			ld a, (.dmark)  
ab6e 32 65 ee			ld (debug_mark),a  
ab71 3a 80 ab			ld a, (.dmark+1)  
ab74 32 66 ee			ld (debug_mark+1),a  
ab77 3a 81 ab			ld a, (.dmark+2)  
ab7a 32 67 ee			ld (debug_mark+2),a  
ab7d 18 03			jr .pastdmark  
ab7f ..			.dmark: db "+s_"  
ab82 f1			.pastdmark: pop af  
ab83			endm  
# End of macro DMARK
ab83						CALLMONITOR 
ab83 cd 6f ee			call debug_vector  
ab86				endm  
# End of macro CALLMONITOR
ab86					endif 
ab86			 
ab86					FORTH_DSP_VALUEHL 
ab86 cd 8a 9c			call macro_dsp_valuehl 
ab89				endm 
# End of macro FORTH_DSP_VALUEHL
ab89			 
ab89 e5					push hl   ; save address 
ab8a			 
ab8a					FORTH_DSP_POP 
ab8a cd 42 9d			call macro_forth_dsp_pop 
ab8d				endm 
# End of macro FORTH_DSP_POP
ab8d			 
ab8d					FORTH_DSP_VALUEHL 
ab8d cd 8a 9c			call macro_dsp_valuehl 
ab90				endm 
# End of macro FORTH_DSP_VALUEHL
ab90			 
ab90 e5					push hl 
ab91					FORTH_DSP_POP 
ab91 cd 42 9d			call macro_forth_dsp_pop 
ab94				endm 
# End of macro FORTH_DSP_POP
ab94 e1					pop hl 
ab95			 
ab95					; hl contains value to add to byte at a 
ab95				 
ab95 eb					ex de, hl 
ab96			 
ab96 e1					pop hl 
ab97			 
ab97					if DEBUG_FORTH_WORDS 
ab97						DMARK "INC" 
ab97 f5				push af  
ab98 3a ac ab			ld a, (.dmark)  
ab9b 32 65 ee			ld (debug_mark),a  
ab9e 3a ad ab			ld a, (.dmark+1)  
aba1 32 66 ee			ld (debug_mark+1),a  
aba4 3a ae ab			ld a, (.dmark+2)  
aba7 32 67 ee			ld (debug_mark+2),a  
abaa 18 03			jr .pastdmark  
abac ..			.dmark: db "INC"  
abaf f1			.pastdmark: pop af  
abb0			endm  
# End of macro DMARK
abb0						CALLMONITOR 
abb0 cd 6f ee			call debug_vector  
abb3				endm  
# End of macro CALLMONITOR
abb3					endif 
abb3			 
abb3 7e					ld a,(hl) 
abb4 83					add e 
abb5 77					ld (hl),a 
abb6			 
abb6			 
abb6			 
abb6				       NEXTW 
abb6 c3 76 9e			jp macro_next 
abb9				endm 
# End of macro NEXTW
abb9			 
abb9			.DEC: 
abb9				CWHEAD .INC2 91 "-!" 2 WORD_FLAG_CODE 
abb9 6f				db WORD_SYS_CORE+91             
abba 0d ac			dw .INC2            
abbc 03				db 2 + 1 
abbd .. 00			db "-!",0              
abc0				endm 
# End of macro CWHEAD
abc0			; | -! ( u a -- )  Decrement byte at address a by the value u | DONE 
abc0					if DEBUG_FORTH_WORDS_KEY 
abc0						DMARK "-s_" 
abc0 f5				push af  
abc1 3a d5 ab			ld a, (.dmark)  
abc4 32 65 ee			ld (debug_mark),a  
abc7 3a d6 ab			ld a, (.dmark+1)  
abca 32 66 ee			ld (debug_mark+1),a  
abcd 3a d7 ab			ld a, (.dmark+2)  
abd0 32 67 ee			ld (debug_mark+2),a  
abd3 18 03			jr .pastdmark  
abd5 ..			.dmark: db "-s_"  
abd8 f1			.pastdmark: pop af  
abd9			endm  
# End of macro DMARK
abd9						CALLMONITOR 
abd9 cd 6f ee			call debug_vector  
abdc				endm  
# End of macro CALLMONITOR
abdc					endif 
abdc			 
abdc					FORTH_DSP_VALUEHL 
abdc cd 8a 9c			call macro_dsp_valuehl 
abdf				endm 
# End of macro FORTH_DSP_VALUEHL
abdf			 
abdf e5					push hl   ; save address 
abe0			 
abe0					FORTH_DSP_POP 
abe0 cd 42 9d			call macro_forth_dsp_pop 
abe3				endm 
# End of macro FORTH_DSP_POP
abe3			 
abe3					FORTH_DSP_VALUEHL 
abe3 cd 8a 9c			call macro_dsp_valuehl 
abe6				endm 
# End of macro FORTH_DSP_VALUEHL
abe6			 
abe6					; hl contains value to add to byte at a 
abe6				 
abe6 eb					ex de, hl 
abe7			 
abe7 e1					pop hl 
abe8			 
abe8					if DEBUG_FORTH_WORDS 
abe8						DMARK "DEC" 
abe8 f5				push af  
abe9 3a fd ab			ld a, (.dmark)  
abec 32 65 ee			ld (debug_mark),a  
abef 3a fe ab			ld a, (.dmark+1)  
abf2 32 66 ee			ld (debug_mark+1),a  
abf5 3a ff ab			ld a, (.dmark+2)  
abf8 32 67 ee			ld (debug_mark+2),a  
abfb 18 03			jr .pastdmark  
abfd ..			.dmark: db "DEC"  
ac00 f1			.pastdmark: pop af  
ac01			endm  
# End of macro DMARK
ac01						CALLMONITOR 
ac01 cd 6f ee			call debug_vector  
ac04				endm  
# End of macro CALLMONITOR
ac04					endif 
ac04			 
ac04 7e					ld a,(hl) 
ac05 93					sub e 
ac06 77					ld (hl),a 
ac07			 
ac07			 
ac07					FORTH_DSP_POP 
ac07 cd 42 9d			call macro_forth_dsp_pop 
ac0a				endm 
# End of macro FORTH_DSP_POP
ac0a			 
ac0a				       NEXTW 
ac0a c3 76 9e			jp macro_next 
ac0d				endm 
# End of macro NEXTW
ac0d			 
ac0d			.INC2: 
ac0d				CWHEAD .DEC2 91 "+2!" 3 WORD_FLAG_CODE 
ac0d 6f				db WORD_SYS_CORE+91             
ac0e ba ac			dw .DEC2            
ac10 04				db 3 + 1 
ac11 .. 00			db "+2!",0              
ac15				endm 
# End of macro CWHEAD
ac15			; | +2! ( u a -- )  Increment word at address a by the value u | DONE 
ac15			 
ac15					if DEBUG_FORTH_WORDS_KEY 
ac15						DMARK "+2s" 
ac15 f5				push af  
ac16 3a 2a ac			ld a, (.dmark)  
ac19 32 65 ee			ld (debug_mark),a  
ac1c 3a 2b ac			ld a, (.dmark+1)  
ac1f 32 66 ee			ld (debug_mark+1),a  
ac22 3a 2c ac			ld a, (.dmark+2)  
ac25 32 67 ee			ld (debug_mark+2),a  
ac28 18 03			jr .pastdmark  
ac2a ..			.dmark: db "+2s"  
ac2d f1			.pastdmark: pop af  
ac2e			endm  
# End of macro DMARK
ac2e						CALLMONITOR 
ac2e cd 6f ee			call debug_vector  
ac31				endm  
# End of macro CALLMONITOR
ac31					endif 
ac31			 
ac31					; Address 
ac31			 
ac31					FORTH_DSP_VALUEHL 
ac31 cd 8a 9c			call macro_dsp_valuehl 
ac34				endm 
# End of macro FORTH_DSP_VALUEHL
ac34			 
ac34 e5					push hl    ; save address 
ac35			 
ac35					; load content into de 
ac35			 
ac35 5e					ld e,(hl) 
ac36 23					inc hl 
ac37 56					ld d, (hl) 
ac38			 
ac38					if DEBUG_FORTH_WORDS 
ac38						DMARK "+2a" 
ac38 f5				push af  
ac39 3a 4d ac			ld a, (.dmark)  
ac3c 32 65 ee			ld (debug_mark),a  
ac3f 3a 4e ac			ld a, (.dmark+1)  
ac42 32 66 ee			ld (debug_mark+1),a  
ac45 3a 4f ac			ld a, (.dmark+2)  
ac48 32 67 ee			ld (debug_mark+2),a  
ac4b 18 03			jr .pastdmark  
ac4d ..			.dmark: db "+2a"  
ac50 f1			.pastdmark: pop af  
ac51			endm  
# End of macro DMARK
ac51						CALLMONITOR 
ac51 cd 6f ee			call debug_vector  
ac54				endm  
# End of macro CALLMONITOR
ac54					endif 
ac54			 
ac54					FORTH_DSP_POP 
ac54 cd 42 9d			call macro_forth_dsp_pop 
ac57				endm 
# End of macro FORTH_DSP_POP
ac57			 
ac57					; Get value to add 
ac57			 
ac57					FORTH_DSP_VALUE 
ac57 cd 73 9c			call macro_forth_dsp_value 
ac5a				endm 
# End of macro FORTH_DSP_VALUE
ac5a			 
ac5a					if DEBUG_FORTH_WORDS 
ac5a						DMARK "+2v" 
ac5a f5				push af  
ac5b 3a 6f ac			ld a, (.dmark)  
ac5e 32 65 ee			ld (debug_mark),a  
ac61 3a 70 ac			ld a, (.dmark+1)  
ac64 32 66 ee			ld (debug_mark+1),a  
ac67 3a 71 ac			ld a, (.dmark+2)  
ac6a 32 67 ee			ld (debug_mark+2),a  
ac6d 18 03			jr .pastdmark  
ac6f ..			.dmark: db "+2v"  
ac72 f1			.pastdmark: pop af  
ac73			endm  
# End of macro DMARK
ac73						CALLMONITOR 
ac73 cd 6f ee			call debug_vector  
ac76				endm  
# End of macro CALLMONITOR
ac76					endif 
ac76			 
ac76 19					add hl, de 
ac77			 
ac77					if DEBUG_FORTH_WORDS 
ac77						DMARK "+2+" 
ac77 f5				push af  
ac78 3a 8c ac			ld a, (.dmark)  
ac7b 32 65 ee			ld (debug_mark),a  
ac7e 3a 8d ac			ld a, (.dmark+1)  
ac81 32 66 ee			ld (debug_mark+1),a  
ac84 3a 8e ac			ld a, (.dmark+2)  
ac87 32 67 ee			ld (debug_mark+2),a  
ac8a 18 03			jr .pastdmark  
ac8c ..			.dmark: db "+2+"  
ac8f f1			.pastdmark: pop af  
ac90			endm  
# End of macro DMARK
ac90						CALLMONITOR 
ac90 cd 6f ee			call debug_vector  
ac93				endm  
# End of macro CALLMONITOR
ac93					endif 
ac93			 
ac93					; move result to de 
ac93			 
ac93 eb					ex de, hl 
ac94			 
ac94					; Address 
ac94			 
ac94 e1					pop hl 
ac95			 
ac95					; save it back 
ac95			 
ac95 73					ld (hl), e 
ac96 23					inc hl 
ac97 72					ld (hl), d 
ac98			 
ac98					if DEBUG_FORTH_WORDS 
ac98						DMARK "+2e" 
ac98 f5				push af  
ac99 3a ad ac			ld a, (.dmark)  
ac9c 32 65 ee			ld (debug_mark),a  
ac9f 3a ae ac			ld a, (.dmark+1)  
aca2 32 66 ee			ld (debug_mark+1),a  
aca5 3a af ac			ld a, (.dmark+2)  
aca8 32 67 ee			ld (debug_mark+2),a  
acab 18 03			jr .pastdmark  
acad ..			.dmark: db "+2e"  
acb0 f1			.pastdmark: pop af  
acb1			endm  
# End of macro DMARK
acb1						CALLMONITOR 
acb1 cd 6f ee			call debug_vector  
acb4				endm  
# End of macro CALLMONITOR
acb4					endif 
acb4			 
acb4			 
acb4			 
acb4					FORTH_DSP_POP 
acb4 cd 42 9d			call macro_forth_dsp_pop 
acb7				endm 
# End of macro FORTH_DSP_POP
acb7			 
acb7			 
acb7				       NEXTW 
acb7 c3 76 9e			jp macro_next 
acba				endm 
# End of macro NEXTW
acba			 
acba			.DEC2: 
acba				CWHEAD .GET2 91 "-2!" 3 WORD_FLAG_CODE 
acba 6f				db WORD_SYS_CORE+91             
acbb 69 ad			dw .GET2            
acbd 04				db 3 + 1 
acbe .. 00			db "-2!",0              
acc2				endm 
# End of macro CWHEAD
acc2			; | -2! ( u a -- )  Decrement word at address a by the value u | DONE 
acc2			 
acc2			 
acc2					if DEBUG_FORTH_WORDS_KEY 
acc2						DMARK "-2s" 
acc2 f5				push af  
acc3 3a d7 ac			ld a, (.dmark)  
acc6 32 65 ee			ld (debug_mark),a  
acc9 3a d8 ac			ld a, (.dmark+1)  
accc 32 66 ee			ld (debug_mark+1),a  
accf 3a d9 ac			ld a, (.dmark+2)  
acd2 32 67 ee			ld (debug_mark+2),a  
acd5 18 03			jr .pastdmark  
acd7 ..			.dmark: db "-2s"  
acda f1			.pastdmark: pop af  
acdb			endm  
# End of macro DMARK
acdb						CALLMONITOR 
acdb cd 6f ee			call debug_vector  
acde				endm  
# End of macro CALLMONITOR
acde					endif 
acde			 
acde					; Address 
acde			 
acde					FORTH_DSP_VALUEHL 
acde cd 8a 9c			call macro_dsp_valuehl 
ace1				endm 
# End of macro FORTH_DSP_VALUEHL
ace1			 
ace1 e5					push hl    ; save address 
ace2			 
ace2					; load content into de 
ace2			 
ace2 5e					ld e,(hl) 
ace3 23					inc hl 
ace4 56					ld d, (hl) 
ace5			 
ace5					if DEBUG_FORTH_WORDS 
ace5						DMARK "-2a" 
ace5 f5				push af  
ace6 3a fa ac			ld a, (.dmark)  
ace9 32 65 ee			ld (debug_mark),a  
acec 3a fb ac			ld a, (.dmark+1)  
acef 32 66 ee			ld (debug_mark+1),a  
acf2 3a fc ac			ld a, (.dmark+2)  
acf5 32 67 ee			ld (debug_mark+2),a  
acf8 18 03			jr .pastdmark  
acfa ..			.dmark: db "-2a"  
acfd f1			.pastdmark: pop af  
acfe			endm  
# End of macro DMARK
acfe						CALLMONITOR 
acfe cd 6f ee			call debug_vector  
ad01				endm  
# End of macro CALLMONITOR
ad01					endif 
ad01			 
ad01					FORTH_DSP_POP 
ad01 cd 42 9d			call macro_forth_dsp_pop 
ad04				endm 
# End of macro FORTH_DSP_POP
ad04			 
ad04					; Get value to remove 
ad04			 
ad04					FORTH_DSP_VALUE 
ad04 cd 73 9c			call macro_forth_dsp_value 
ad07				endm 
# End of macro FORTH_DSP_VALUE
ad07			 
ad07					if DEBUG_FORTH_WORDS 
ad07						DMARK "-2v" 
ad07 f5				push af  
ad08 3a 1c ad			ld a, (.dmark)  
ad0b 32 65 ee			ld (debug_mark),a  
ad0e 3a 1d ad			ld a, (.dmark+1)  
ad11 32 66 ee			ld (debug_mark+1),a  
ad14 3a 1e ad			ld a, (.dmark+2)  
ad17 32 67 ee			ld (debug_mark+2),a  
ad1a 18 03			jr .pastdmark  
ad1c ..			.dmark: db "-2v"  
ad1f f1			.pastdmark: pop af  
ad20			endm  
# End of macro DMARK
ad20						CALLMONITOR 
ad20 cd 6f ee			call debug_vector  
ad23				endm  
# End of macro CALLMONITOR
ad23					endif 
ad23			 
ad23 eb					ex de, hl 
ad24 ed 52				sbc hl, de 
ad26			 
ad26					if DEBUG_FORTH_WORDS 
ad26						DMARK "-2d" 
ad26 f5				push af  
ad27 3a 3b ad			ld a, (.dmark)  
ad2a 32 65 ee			ld (debug_mark),a  
ad2d 3a 3c ad			ld a, (.dmark+1)  
ad30 32 66 ee			ld (debug_mark+1),a  
ad33 3a 3d ad			ld a, (.dmark+2)  
ad36 32 67 ee			ld (debug_mark+2),a  
ad39 18 03			jr .pastdmark  
ad3b ..			.dmark: db "-2d"  
ad3e f1			.pastdmark: pop af  
ad3f			endm  
# End of macro DMARK
ad3f						CALLMONITOR 
ad3f cd 6f ee			call debug_vector  
ad42				endm  
# End of macro CALLMONITOR
ad42					endif 
ad42			 
ad42					; move result to de 
ad42			 
ad42 eb					ex de, hl 
ad43			 
ad43					; Address 
ad43			 
ad43 e1					pop hl 
ad44			 
ad44					; save it back 
ad44			 
ad44 73					ld (hl), e 
ad45 23					inc hl 
ad46 72					ld (hl), d 
ad47			 
ad47					if DEBUG_FORTH_WORDS 
ad47						DMARK "-2e" 
ad47 f5				push af  
ad48 3a 5c ad			ld a, (.dmark)  
ad4b 32 65 ee			ld (debug_mark),a  
ad4e 3a 5d ad			ld a, (.dmark+1)  
ad51 32 66 ee			ld (debug_mark+1),a  
ad54 3a 5e ad			ld a, (.dmark+2)  
ad57 32 67 ee			ld (debug_mark+2),a  
ad5a 18 03			jr .pastdmark  
ad5c ..			.dmark: db "-2e"  
ad5f f1			.pastdmark: pop af  
ad60			endm  
# End of macro DMARK
ad60						CALLMONITOR 
ad60 cd 6f ee			call debug_vector  
ad63				endm  
# End of macro CALLMONITOR
ad63					endif 
ad63			 
ad63			 
ad63					FORTH_DSP_POP 
ad63 cd 42 9d			call macro_forth_dsp_pop 
ad66				endm 
# End of macro FORTH_DSP_POP
ad66			 
ad66			 
ad66			 
ad66				       NEXTW 
ad66 c3 76 9e			jp macro_next 
ad69				endm 
# End of macro NEXTW
ad69			.GET2: 
ad69				CWHEAD .BANG2 91 "2@" 2 WORD_FLAG_CODE 
ad69 6f				db WORD_SYS_CORE+91             
ad6a 9e ad			dw .BANG2            
ad6c 03				db 2 + 1 
ad6d .. 00			db "2@",0              
ad70				endm 
# End of macro CWHEAD
ad70			; | 2@ ( a -- u )  Push word at address a onto stack | DONE 
ad70					if DEBUG_FORTH_WORDS_KEY 
ad70						DMARK "2A_" 
ad70 f5				push af  
ad71 3a 85 ad			ld a, (.dmark)  
ad74 32 65 ee			ld (debug_mark),a  
ad77 3a 86 ad			ld a, (.dmark+1)  
ad7a 32 66 ee			ld (debug_mark+1),a  
ad7d 3a 87 ad			ld a, (.dmark+2)  
ad80 32 67 ee			ld (debug_mark+2),a  
ad83 18 03			jr .pastdmark  
ad85 ..			.dmark: db "2A_"  
ad88 f1			.pastdmark: pop af  
ad89			endm  
# End of macro DMARK
ad89						CALLMONITOR 
ad89 cd 6f ee			call debug_vector  
ad8c				endm  
# End of macro CALLMONITOR
ad8c					endif 
ad8c			 
ad8c					FORTH_DSP_VALUEHL 
ad8c cd 8a 9c			call macro_dsp_valuehl 
ad8f				endm 
# End of macro FORTH_DSP_VALUEHL
ad8f			 
ad8f e5					push hl   ; save address 
ad90			 
ad90					FORTH_DSP_POP 
ad90 cd 42 9d			call macro_forth_dsp_pop 
ad93				endm 
# End of macro FORTH_DSP_POP
ad93			 
ad93 e1					pop hl 
ad94			 
ad94 5e					ld e, (hl) 
ad95 23					inc hl 
ad96 56					ld d, (hl) 
ad97			 
ad97 eb					ex de, hl 
ad98			 
ad98 cd 85 9a				call forth_push_numhl 
ad9b			 
ad9b				       NEXTW 
ad9b c3 76 9e			jp macro_next 
ad9e				endm 
# End of macro NEXTW
ad9e			.BANG2: 
ad9e				CWHEAD .CONFIG 91 "2!" 2 WORD_FLAG_CODE 
ad9e 6f				db WORD_SYS_CORE+91             
ad9f d6 ad			dw .CONFIG            
ada1 03				db 2 + 1 
ada2 .. 00			db "2!",0              
ada5				endm 
# End of macro CWHEAD
ada5			; | 2! ( u a -- )  Store value u as a word at address a | DONE 
ada5					if DEBUG_FORTH_WORDS_KEY 
ada5						DMARK "2S_" 
ada5 f5				push af  
ada6 3a ba ad			ld a, (.dmark)  
ada9 32 65 ee			ld (debug_mark),a  
adac 3a bb ad			ld a, (.dmark+1)  
adaf 32 66 ee			ld (debug_mark+1),a  
adb2 3a bc ad			ld a, (.dmark+2)  
adb5 32 67 ee			ld (debug_mark+2),a  
adb8 18 03			jr .pastdmark  
adba ..			.dmark: db "2S_"  
adbd f1			.pastdmark: pop af  
adbe			endm  
# End of macro DMARK
adbe						CALLMONITOR 
adbe cd 6f ee			call debug_vector  
adc1				endm  
# End of macro CALLMONITOR
adc1					endif 
adc1			 
adc1					FORTH_DSP_VALUEHL 
adc1 cd 8a 9c			call macro_dsp_valuehl 
adc4				endm 
# End of macro FORTH_DSP_VALUEHL
adc4			 
adc4 e5					push hl   ; save address 
adc5			 
adc5			 
adc5					FORTH_DSP_POP 
adc5 cd 42 9d			call macro_forth_dsp_pop 
adc8				endm 
# End of macro FORTH_DSP_POP
adc8			 
adc8					 
adc8					FORTH_DSP_VALUEHL 
adc8 cd 8a 9c			call macro_dsp_valuehl 
adcb				endm 
# End of macro FORTH_DSP_VALUEHL
adcb			 
adcb					FORTH_DSP_POP 
adcb cd 42 9d			call macro_forth_dsp_pop 
adce				endm 
# End of macro FORTH_DSP_POP
adce			 
adce eb					ex de, hl    ; value now in de 
adcf			 
adcf e1					pop hl 
add0			 
add0 73					ld (hl), e 
add1			 
add1 23					inc hl 
add2			 
add2 72					ld (hl), d 
add3			 
add3			 
add3				       NEXTW 
add3 c3 76 9e			jp macro_next 
add6				endm 
# End of macro NEXTW
add6			.CONFIG: 
add6				CWHEAD .ADTOS 91 "CONFIG" 6 WORD_FLAG_CODE 
add6 6f				db WORD_SYS_CORE+91             
add7 e7 ad			dw .ADTOS            
add9 07				db 6 + 1 
adda .. 00			db "CONFIG",0              
ade1				endm 
# End of macro CWHEAD
ade1			; | CONFIG ( -- )  Access the system configuration menu. Set boot from file, hardware diags, and more! | DONE 
ade1			 
ade1 cd 5e 92				call config 
ade4					NEXTW 
ade4 c3 76 9e			jp macro_next 
ade7				endm 
# End of macro NEXTW
ade7			 
ade7			.ADTOS: 
ade7				CWHEAD .SBTOS 91 "1+" 2 WORD_FLAG_CODE 
ade7 6f				db WORD_SYS_CORE+91             
ade8 fd ad			dw .SBTOS            
adea 03				db 2 + 1 
adeb .. 00			db "1+",0              
adee				endm 
# End of macro CWHEAD
adee			; | 1+ ( u -- u )  Increment value on TOS | DONE 
adee			 
adee					FORTH_DSP_VALUEHL 
adee cd 8a 9c			call macro_dsp_valuehl 
adf1				endm 
# End of macro FORTH_DSP_VALUEHL
adf1 e5					push hl 
adf2			 
adf2					FORTH_DSP_POP 
adf2 cd 42 9d			call macro_forth_dsp_pop 
adf5				endm 
# End of macro FORTH_DSP_POP
adf5 e1					pop hl 
adf6			 
adf6 23					inc hl 
adf7 cd 85 9a				call forth_push_numhl 
adfa					 
adfa					NEXTW 
adfa c3 76 9e			jp macro_next 
adfd				endm 
# End of macro NEXTW
adfd			.SBTOS: 
adfd				CWHEAD .ADSTORE 91 "1-" 2 WORD_FLAG_CODE 
adfd 6f				db WORD_SYS_CORE+91             
adfe 13 ae			dw .ADSTORE            
ae00 03				db 2 + 1 
ae01 .. 00			db "1-",0              
ae04				endm 
# End of macro CWHEAD
ae04			; | 1- ( u -- u )  Decrement value on TOS | DONE 
ae04			 
ae04					FORTH_DSP_VALUEHL 
ae04 cd 8a 9c			call macro_dsp_valuehl 
ae07				endm 
# End of macro FORTH_DSP_VALUEHL
ae07 e5					push hl 
ae08			 
ae08					FORTH_DSP_POP 
ae08 cd 42 9d			call macro_forth_dsp_pop 
ae0b				endm 
# End of macro FORTH_DSP_POP
ae0b e1					pop hl 
ae0c			 
ae0c 2b					dec hl 
ae0d cd 85 9a				call forth_push_numhl 
ae10					 
ae10					NEXTW 
ae10 c3 76 9e			jp macro_next 
ae13				endm 
# End of macro NEXTW
ae13			.ADSTORE: 
ae13				CWHEAD .ADWSTORE 91 "1+!" 3 WORD_FLAG_CODE 
ae13 6f				db WORD_SYS_CORE+91             
ae14 29 ae			dw .ADWSTORE            
ae16 04				db 3 + 1 
ae17 .. 00			db "1+!",0              
ae1b				endm 
# End of macro CWHEAD
ae1b			; | 1+! ( addr -- )  Increment byte at address addr | DONE 
ae1b			 
ae1b					FORTH_DSP_VALUEHL 
ae1b cd 8a 9c			call macro_dsp_valuehl 
ae1e				endm 
# End of macro FORTH_DSP_VALUEHL
ae1e e5					push hl 
ae1f			 
ae1f					FORTH_DSP_POP 
ae1f cd 42 9d			call macro_forth_dsp_pop 
ae22				endm 
# End of macro FORTH_DSP_POP
ae22 e1					pop hl 
ae23			 
ae23 7e					ld a, (hl) 
ae24 3c					inc a 
ae25 77					ld (hl), a 
ae26					 
ae26					NEXTW 
ae26 c3 76 9e			jp macro_next 
ae29				endm 
# End of macro NEXTW
ae29			.ADWSTORE: 
ae29				CWHEAD .SBSTORE 91 "1+2!" 4 WORD_FLAG_CODE 
ae29 6f				db WORD_SYS_CORE+91             
ae2a 47 ae			dw .SBSTORE            
ae2c 05				db 4 + 1 
ae2d .. 00			db "1+2!",0              
ae32				endm 
# End of macro CWHEAD
ae32			; | 1+2! ( addr -- )  Increment word at address addr | DONE 
ae32			 
ae32					FORTH_DSP_VALUEHL 
ae32 cd 8a 9c			call macro_dsp_valuehl 
ae35				endm 
# End of macro FORTH_DSP_VALUEHL
ae35 e5					push hl 
ae36			 
ae36					FORTH_DSP_POP 
ae36 cd 42 9d			call macro_forth_dsp_pop 
ae39				endm 
# End of macro FORTH_DSP_POP
ae39 e1					pop hl 
ae3a			 
ae3a e5					push hl 
ae3b			 
ae3b cd f8 9d				call loadwordinhl 
ae3e 23					inc hl 
ae3f			 
ae3f d1					pop de 
ae40 eb					ex de, hl 
ae41 73					ld (hl), e 
ae42 23					inc hl 
ae43 72					ld (hl), d 
ae44					 
ae44					NEXTW 
ae44 c3 76 9e			jp macro_next 
ae47				endm 
# End of macro NEXTW
ae47			.SBSTORE: 
ae47				CWHEAD .SBWSTORE 91 "1-!" 3 WORD_FLAG_CODE 
ae47 6f				db WORD_SYS_CORE+91             
ae48 5d ae			dw .SBWSTORE            
ae4a 04				db 3 + 1 
ae4b .. 00			db "1-!",0              
ae4f				endm 
# End of macro CWHEAD
ae4f			; | 1-! ( addr -- )  Decrement byte at address addr | DONE 
ae4f			 
ae4f					FORTH_DSP_VALUEHL 
ae4f cd 8a 9c			call macro_dsp_valuehl 
ae52				endm 
# End of macro FORTH_DSP_VALUEHL
ae52 e5					push hl 
ae53			 
ae53					FORTH_DSP_POP 
ae53 cd 42 9d			call macro_forth_dsp_pop 
ae56				endm 
# End of macro FORTH_DSP_POP
ae56 e1					pop hl 
ae57			 
ae57 7e					ld a, (hl) 
ae58 3d					dec a 
ae59 77					ld (hl), a 
ae5a					 
ae5a					NEXTW 
ae5a c3 76 9e			jp macro_next 
ae5d				endm 
# End of macro NEXTW
ae5d			.SBWSTORE: 
ae5d				CWHEAD .ENDCORE 91 "1-2!" 4 WORD_FLAG_CODE 
ae5d 6f				db WORD_SYS_CORE+91             
ae5e 7b ae			dw .ENDCORE            
ae60 05				db 4 + 1 
ae61 .. 00			db "1-2!",0              
ae66				endm 
# End of macro CWHEAD
ae66			; | 1-2! ( addr -- )  Decrement word at address addr | DONE 
ae66			 
ae66					FORTH_DSP_VALUEHL 
ae66 cd 8a 9c			call macro_dsp_valuehl 
ae69				endm 
# End of macro FORTH_DSP_VALUEHL
ae69 e5					push hl 
ae6a			 
ae6a					FORTH_DSP_POP 
ae6a cd 42 9d			call macro_forth_dsp_pop 
ae6d				endm 
# End of macro FORTH_DSP_POP
ae6d e1					pop hl 
ae6e			 
ae6e e5					push hl 
ae6f			 
ae6f cd f8 9d				call loadwordinhl 
ae72 2b					dec hl 
ae73			 
ae73 d1					pop de 
ae74 eb					ex de, hl 
ae75 73					ld (hl), e 
ae76 23					inc hl 
ae77 72					ld (hl), d 
ae78					 
ae78					NEXTW 
ae78 c3 76 9e			jp macro_next 
ae7b				endm 
# End of macro NEXTW
ae7b			.ENDCORE: 
ae7b			 
ae7b			; eof 
ae7b			 
ae7b			 
# End of file forth_words_core.asm
ae7b			include "forth_words_flow.asm" 
ae7b			 
ae7b			; | ## Program Flow Words 
ae7b			 
ae7b			.IF: 
ae7b				CWHEAD .THEN 10 "IF" 2 WORD_FLAG_CODE 
ae7b 1e				db WORD_SYS_CORE+10             
ae7c 70 af			dw .THEN            
ae7e 03				db 2 + 1 
ae7f .. 00			db "IF",0              
ae82				endm 
# End of macro CWHEAD
ae82			; | IF ( w -- f ) If TOS is true exec code following up to THEN - Note: currently not supporting ELSE or nested IF | DONE 
ae82			; 
ae82					if DEBUG_FORTH_WORDS_KEY 
ae82						DMARK "IF." 
ae82 f5				push af  
ae83 3a 97 ae			ld a, (.dmark)  
ae86 32 65 ee			ld (debug_mark),a  
ae89 3a 98 ae			ld a, (.dmark+1)  
ae8c 32 66 ee			ld (debug_mark+1),a  
ae8f 3a 99 ae			ld a, (.dmark+2)  
ae92 32 67 ee			ld (debug_mark+2),a  
ae95 18 03			jr .pastdmark  
ae97 ..			.dmark: db "IF."  
ae9a f1			.pastdmark: pop af  
ae9b			endm  
# End of macro DMARK
ae9b						CALLMONITOR 
ae9b cd 6f ee			call debug_vector  
ae9e				endm  
# End of macro CALLMONITOR
ae9e					endif 
ae9e			; eval TOS 
ae9e			 
ae9e				FORTH_DSP_VALUEHL 
ae9e cd 8a 9c			call macro_dsp_valuehl 
aea1				endm 
# End of macro FORTH_DSP_VALUEHL
aea1			 
aea1			;	push hl 
aea1				FORTH_DSP_POP 
aea1 cd 42 9d			call macro_forth_dsp_pop 
aea4				endm 
# End of macro FORTH_DSP_POP
aea4			;	pop hl 
aea4			 
aea4					if DEBUG_FORTH_WORDS 
aea4						DMARK "IF1" 
aea4 f5				push af  
aea5 3a b9 ae			ld a, (.dmark)  
aea8 32 65 ee			ld (debug_mark),a  
aeab 3a ba ae			ld a, (.dmark+1)  
aeae 32 66 ee			ld (debug_mark+1),a  
aeb1 3a bb ae			ld a, (.dmark+2)  
aeb4 32 67 ee			ld (debug_mark+2),a  
aeb7 18 03			jr .pastdmark  
aeb9 ..			.dmark: db "IF1"  
aebc f1			.pastdmark: pop af  
aebd			endm  
# End of macro DMARK
aebd						CALLMONITOR 
aebd cd 6f ee			call debug_vector  
aec0				endm  
# End of macro CALLMONITOR
aec0					endif 
aec0 b7				or a        ; clear carry flag 
aec1 11 00 00			ld de, 0 
aec4 eb				ex de,hl 
aec5 ed 52			sbc hl, de 
aec7 c2 51 af			jp nz, .iftrue 
aeca			 
aeca					if DEBUG_FORTH_WORDS 
aeca						DMARK "IF2" 
aeca f5				push af  
aecb 3a df ae			ld a, (.dmark)  
aece 32 65 ee			ld (debug_mark),a  
aed1 3a e0 ae			ld a, (.dmark+1)  
aed4 32 66 ee			ld (debug_mark+1),a  
aed7 3a e1 ae			ld a, (.dmark+2)  
aeda 32 67 ee			ld (debug_mark+2),a  
aedd 18 03			jr .pastdmark  
aedf ..			.dmark: db "IF2"  
aee2 f1			.pastdmark: pop af  
aee3			endm  
# End of macro DMARK
aee3						CALLMONITOR 
aee3 cd 6f ee			call debug_vector  
aee6				endm  
# End of macro CALLMONITOR
aee6					endif 
aee6			 
aee6			; if not true then skip to THEN 
aee6			 
aee6				; TODO get tok_ptr 
aee6				; TODO consume toks until we get to THEN 
aee6			 
aee6 2a bc e5			ld hl, (os_tok_ptr) 
aee9					if DEBUG_FORTH_WORDS 
aee9						DMARK "IF3" 
aee9 f5				push af  
aeea 3a fe ae			ld a, (.dmark)  
aeed 32 65 ee			ld (debug_mark),a  
aef0 3a ff ae			ld a, (.dmark+1)  
aef3 32 66 ee			ld (debug_mark+1),a  
aef6 3a 00 af			ld a, (.dmark+2)  
aef9 32 67 ee			ld (debug_mark+2),a  
aefc 18 03			jr .pastdmark  
aefe ..			.dmark: db "IF3"  
af01 f1			.pastdmark: pop af  
af02			endm  
# End of macro DMARK
af02						CALLMONITOR 
af02 cd 6f ee			call debug_vector  
af05				endm  
# End of macro CALLMONITOR
af05						 
af05					endif 
af05 11 4c af			ld de, .ifthen 
af08					if DEBUG_FORTH_WORDS 
af08						DMARK "IF4" 
af08 f5				push af  
af09 3a 1d af			ld a, (.dmark)  
af0c 32 65 ee			ld (debug_mark),a  
af0f 3a 1e af			ld a, (.dmark+1)  
af12 32 66 ee			ld (debug_mark+1),a  
af15 3a 1f af			ld a, (.dmark+2)  
af18 32 67 ee			ld (debug_mark+2),a  
af1b 18 03			jr .pastdmark  
af1d ..			.dmark: db "IF4"  
af20 f1			.pastdmark: pop af  
af21			endm  
# End of macro DMARK
af21						CALLMONITOR 
af21 cd 6f ee			call debug_vector  
af24				endm  
# End of macro CALLMONITOR
af24					endif 
af24 cd 91 9f			call findnexttok  
af27			 
af27					if DEBUG_FORTH_WORDS 
af27						DMARK "IF5" 
af27 f5				push af  
af28 3a 3c af			ld a, (.dmark)  
af2b 32 65 ee			ld (debug_mark),a  
af2e 3a 3d af			ld a, (.dmark+1)  
af31 32 66 ee			ld (debug_mark+1),a  
af34 3a 3e af			ld a, (.dmark+2)  
af37 32 67 ee			ld (debug_mark+2),a  
af3a 18 03			jr .pastdmark  
af3c ..			.dmark: db "IF5"  
af3f f1			.pastdmark: pop af  
af40			endm  
# End of macro DMARK
af40						CALLMONITOR 
af40 cd 6f ee			call debug_vector  
af43				endm  
# End of macro CALLMONITOR
af43					endif 
af43				; TODO replace below with ; exec using tok_ptr 
af43 22 bc e5			ld (os_tok_ptr), hl 
af46 c3 07 9f			jp exec1 
af49				NEXTW 
af49 c3 76 9e			jp macro_next 
af4c				endm 
# End of macro NEXTW
af4c			 
af4c .. 00		.ifthen:  db "THEN",0 
af51			 
af51			.iftrue:		 
af51				; Exec next words normally 
af51			 
af51				; if true then exec following IF as normal 
af51					if DEBUG_FORTH_WORDS 
af51						DMARK "IFT" 
af51 f5				push af  
af52 3a 66 af			ld a, (.dmark)  
af55 32 65 ee			ld (debug_mark),a  
af58 3a 67 af			ld a, (.dmark+1)  
af5b 32 66 ee			ld (debug_mark+1),a  
af5e 3a 68 af			ld a, (.dmark+2)  
af61 32 67 ee			ld (debug_mark+2),a  
af64 18 03			jr .pastdmark  
af66 ..			.dmark: db "IFT"  
af69 f1			.pastdmark: pop af  
af6a			endm  
# End of macro DMARK
af6a						CALLMONITOR 
af6a cd 6f ee			call debug_vector  
af6d				endm  
# End of macro CALLMONITOR
af6d					endif 
af6d			 
af6d					NEXTW 
af6d c3 76 9e			jp macro_next 
af70				endm 
# End of macro NEXTW
af70			.THEN: 
af70				CWHEAD .ELSE 11 "THEN" 4 WORD_FLAG_CODE 
af70 1f				db WORD_SYS_CORE+11             
af71 98 af			dw .ELSE            
af73 05				db 4 + 1 
af74 .. 00			db "THEN",0              
af79				endm 
# End of macro CWHEAD
af79			; | THEN ( -- ) Does nothing. It is a marker for the end of an IF block | DONE 
af79					if DEBUG_FORTH_WORDS_KEY 
af79						DMARK "THN" 
af79 f5				push af  
af7a 3a 8e af			ld a, (.dmark)  
af7d 32 65 ee			ld (debug_mark),a  
af80 3a 8f af			ld a, (.dmark+1)  
af83 32 66 ee			ld (debug_mark+1),a  
af86 3a 90 af			ld a, (.dmark+2)  
af89 32 67 ee			ld (debug_mark+2),a  
af8c 18 03			jr .pastdmark  
af8e ..			.dmark: db "THN"  
af91 f1			.pastdmark: pop af  
af92			endm  
# End of macro DMARK
af92						CALLMONITOR 
af92 cd 6f ee			call debug_vector  
af95				endm  
# End of macro CALLMONITOR
af95					endif 
af95					NEXTW 
af95 c3 76 9e			jp macro_next 
af98				endm 
# End of macro NEXTW
af98			.ELSE: 
af98				CWHEAD .DO 12 "ELSE" 2 WORD_FLAG_CODE 
af98 20				db WORD_SYS_CORE+12             
af99 c0 af			dw .DO            
af9b 03				db 2 + 1 
af9c .. 00			db "ELSE",0              
afa1				endm 
# End of macro CWHEAD
afa1			; | ELSE ( -- ) Not supported - does nothing | TODO 
afa1			 
afa1					if DEBUG_FORTH_WORDS_KEY 
afa1						DMARK "ELS" 
afa1 f5				push af  
afa2 3a b6 af			ld a, (.dmark)  
afa5 32 65 ee			ld (debug_mark),a  
afa8 3a b7 af			ld a, (.dmark+1)  
afab 32 66 ee			ld (debug_mark+1),a  
afae 3a b8 af			ld a, (.dmark+2)  
afb1 32 67 ee			ld (debug_mark+2),a  
afb4 18 03			jr .pastdmark  
afb6 ..			.dmark: db "ELS"  
afb9 f1			.pastdmark: pop af  
afba			endm  
# End of macro DMARK
afba						CALLMONITOR 
afba cd 6f ee			call debug_vector  
afbd				endm  
# End of macro CALLMONITOR
afbd					endif 
afbd			 
afbd			 
afbd					NEXTW 
afbd c3 76 9e			jp macro_next 
afc0				endm 
# End of macro NEXTW
afc0			.DO: 
afc0				CWHEAD .LOOP 13 "DO" 2 WORD_FLAG_CODE 
afc0 21				db WORD_SYS_CORE+13             
afc1 e7 b0			dw .LOOP            
afc3 03				db 2 + 1 
afc4 .. 00			db "DO",0              
afc7				endm 
# End of macro CWHEAD
afc7			; | DO ( u1 u2 -- ) Loop starting at u2 with a limit of u1 | DONE 
afc7			 
afc7					if DEBUG_FORTH_WORDS_KEY 
afc7						DMARK "DO." 
afc7 f5				push af  
afc8 3a dc af			ld a, (.dmark)  
afcb 32 65 ee			ld (debug_mark),a  
afce 3a dd af			ld a, (.dmark+1)  
afd1 32 66 ee			ld (debug_mark+1),a  
afd4 3a de af			ld a, (.dmark+2)  
afd7 32 67 ee			ld (debug_mark+2),a  
afda 18 03			jr .pastdmark  
afdc ..			.dmark: db "DO."  
afdf f1			.pastdmark: pop af  
afe0			endm  
# End of macro DMARK
afe0						CALLMONITOR 
afe0 cd 6f ee			call debug_vector  
afe3				endm  
# End of macro CALLMONITOR
afe3					endif 
afe3			;  push pc to rsp stack past the DO 
afe3			 
afe3 2a bc e5				ld hl, (os_tok_ptr) 
afe6 23					inc hl   ; D 
afe7 23					inc hl  ; O 
afe8 23					inc hl   ; null 
afe9					if DEBUG_FORTH_WORDS 
afe9						DMARK "DO2" 
afe9 f5				push af  
afea 3a fe af			ld a, (.dmark)  
afed 32 65 ee			ld (debug_mark),a  
aff0 3a ff af			ld a, (.dmark+1)  
aff3 32 66 ee			ld (debug_mark+1),a  
aff6 3a 00 b0			ld a, (.dmark+2)  
aff9 32 67 ee			ld (debug_mark+2),a  
affc 18 03			jr .pastdmark  
affe ..			.dmark: db "DO2"  
b001 f1			.pastdmark: pop af  
b002			endm  
# End of macro DMARK
b002						CALLMONITOR 
b002 cd 6f ee			call debug_vector  
b005				endm  
# End of macro CALLMONITOR
b005					endif 
b005					FORTH_RSP_NEXT 
b005 cd 2c 9a			call macro_forth_rsp_next 
b008				endm 
# End of macro FORTH_RSP_NEXT
b008					if DEBUG_FORTH_WORDS 
b008						DMARK "DO3" 
b008 f5				push af  
b009 3a 1d b0			ld a, (.dmark)  
b00c 32 65 ee			ld (debug_mark),a  
b00f 3a 1e b0			ld a, (.dmark+1)  
b012 32 66 ee			ld (debug_mark+1),a  
b015 3a 1f b0			ld a, (.dmark+2)  
b018 32 67 ee			ld (debug_mark+2),a  
b01b 18 03			jr .pastdmark  
b01d ..			.dmark: db "DO3"  
b020 f1			.pastdmark: pop af  
b021			endm  
# End of macro DMARK
b021						CALLMONITOR 
b021 cd 6f ee			call debug_vector  
b024				endm  
# End of macro CALLMONITOR
b024					endif 
b024			 
b024					;if DEBUG_FORTH_WORDS 
b024				;		push hl 
b024			;		endif  
b024			 
b024			; get counters from data stack 
b024			 
b024			 
b024					FORTH_DSP_VALUEHL 
b024 cd 8a 9c			call macro_dsp_valuehl 
b027				endm 
# End of macro FORTH_DSP_VALUEHL
b027 e5					push hl		 ; hl now has starting counter which needs to be tos 
b028			 
b028					if DEBUG_FORTH_WORDS 
b028						DMARK "DO4" 
b028 f5				push af  
b029 3a 3d b0			ld a, (.dmark)  
b02c 32 65 ee			ld (debug_mark),a  
b02f 3a 3e b0			ld a, (.dmark+1)  
b032 32 66 ee			ld (debug_mark+1),a  
b035 3a 3f b0			ld a, (.dmark+2)  
b038 32 67 ee			ld (debug_mark+2),a  
b03b 18 03			jr .pastdmark  
b03d ..			.dmark: db "DO4"  
b040 f1			.pastdmark: pop af  
b041			endm  
# End of macro DMARK
b041						CALLMONITOR 
b041 cd 6f ee			call debug_vector  
b044				endm  
# End of macro CALLMONITOR
b044					endif 
b044					FORTH_DSP_POP 
b044 cd 42 9d			call macro_forth_dsp_pop 
b047				endm 
# End of macro FORTH_DSP_POP
b047			 
b047					if DEBUG_FORTH_WORDS 
b047						DMARK "DO5" 
b047 f5				push af  
b048 3a 5c b0			ld a, (.dmark)  
b04b 32 65 ee			ld (debug_mark),a  
b04e 3a 5d b0			ld a, (.dmark+1)  
b051 32 66 ee			ld (debug_mark+1),a  
b054 3a 5e b0			ld a, (.dmark+2)  
b057 32 67 ee			ld (debug_mark+2),a  
b05a 18 03			jr .pastdmark  
b05c ..			.dmark: db "DO5"  
b05f f1			.pastdmark: pop af  
b060			endm  
# End of macro DMARK
b060						CALLMONITOR 
b060 cd 6f ee			call debug_vector  
b063				endm  
# End of macro CALLMONITOR
b063					endif 
b063			 
b063					FORTH_DSP_VALUEHL 
b063 cd 8a 9c			call macro_dsp_valuehl 
b066				endm 
# End of macro FORTH_DSP_VALUEHL
b066			;		push hl		 ; hl now has starting limit counter 
b066			 
b066					if DEBUG_FORTH_WORDS 
b066						DMARK "DO6" 
b066 f5				push af  
b067 3a 7b b0			ld a, (.dmark)  
b06a 32 65 ee			ld (debug_mark),a  
b06d 3a 7c b0			ld a, (.dmark+1)  
b070 32 66 ee			ld (debug_mark+1),a  
b073 3a 7d b0			ld a, (.dmark+2)  
b076 32 67 ee			ld (debug_mark+2),a  
b079 18 03			jr .pastdmark  
b07b ..			.dmark: db "DO6"  
b07e f1			.pastdmark: pop af  
b07f			endm  
# End of macro DMARK
b07f						CALLMONITOR 
b07f cd 6f ee			call debug_vector  
b082				endm  
# End of macro CALLMONITOR
b082					endif 
b082					FORTH_DSP_POP 
b082 cd 42 9d			call macro_forth_dsp_pop 
b085				endm 
# End of macro FORTH_DSP_POP
b085			 
b085			; put counters on the loop stack 
b085			 
b085			;		pop hl			 ; limit counter 
b085 d1					pop de			; start counter 
b086			 
b086					; push limit counter 
b086			 
b086					if DEBUG_FORTH_WORDS 
b086						DMARK "DO7" 
b086 f5				push af  
b087 3a 9b b0			ld a, (.dmark)  
b08a 32 65 ee			ld (debug_mark),a  
b08d 3a 9c b0			ld a, (.dmark+1)  
b090 32 66 ee			ld (debug_mark+1),a  
b093 3a 9d b0			ld a, (.dmark+2)  
b096 32 67 ee			ld (debug_mark+2),a  
b099 18 03			jr .pastdmark  
b09b ..			.dmark: db "DO7"  
b09e f1			.pastdmark: pop af  
b09f			endm  
# End of macro DMARK
b09f						CALLMONITOR 
b09f cd 6f ee			call debug_vector  
b0a2				endm  
# End of macro CALLMONITOR
b0a2					endif 
b0a2					FORTH_LOOP_NEXT 
b0a2 cd bb 9c			call macro_forth_loop_next 
b0a5				endm 
# End of macro FORTH_LOOP_NEXT
b0a5			 
b0a5					; push start counter 
b0a5			 
b0a5 eb					ex de, hl 
b0a6					if DEBUG_FORTH_WORDS 
b0a6						DMARK "DO7" 
b0a6 f5				push af  
b0a7 3a bb b0			ld a, (.dmark)  
b0aa 32 65 ee			ld (debug_mark),a  
b0ad 3a bc b0			ld a, (.dmark+1)  
b0b0 32 66 ee			ld (debug_mark+1),a  
b0b3 3a bd b0			ld a, (.dmark+2)  
b0b6 32 67 ee			ld (debug_mark+2),a  
b0b9 18 03			jr .pastdmark  
b0bb ..			.dmark: db "DO7"  
b0be f1			.pastdmark: pop af  
b0bf			endm  
# End of macro DMARK
b0bf						CALLMONITOR 
b0bf cd 6f ee			call debug_vector  
b0c2				endm  
# End of macro CALLMONITOR
b0c2					endif 
b0c2					FORTH_LOOP_NEXT 
b0c2 cd bb 9c			call macro_forth_loop_next 
b0c5				endm 
# End of macro FORTH_LOOP_NEXT
b0c5			 
b0c5			 
b0c5					; init first round of I counter 
b0c5			 
b0c5 22 e0 e5				ld (os_current_i), hl 
b0c8			 
b0c8					if DEBUG_FORTH_WORDS 
b0c8						DMARK "DO8" 
b0c8 f5				push af  
b0c9 3a dd b0			ld a, (.dmark)  
b0cc 32 65 ee			ld (debug_mark),a  
b0cf 3a de b0			ld a, (.dmark+1)  
b0d2 32 66 ee			ld (debug_mark+1),a  
b0d5 3a df b0			ld a, (.dmark+2)  
b0d8 32 67 ee			ld (debug_mark+2),a  
b0db 18 03			jr .pastdmark  
b0dd ..			.dmark: db "DO8"  
b0e0 f1			.pastdmark: pop af  
b0e1			endm  
# End of macro DMARK
b0e1						CALLMONITOR 
b0e1 cd 6f ee			call debug_vector  
b0e4				endm  
# End of macro CALLMONITOR
b0e4					endif 
b0e4			 
b0e4					NEXTW 
b0e4 c3 76 9e			jp macro_next 
b0e7				endm 
# End of macro NEXTW
b0e7			.LOOP: 
b0e7				CWHEAD .I 14 "LOOP" 4 WORD_FLAG_CODE 
b0e7 22				db WORD_SYS_CORE+14             
b0e8 ff b1			dw .I            
b0ea 05				db 4 + 1 
b0eb .. 00			db "LOOP",0              
b0f0				endm 
# End of macro CWHEAD
b0f0			; | LOOP ( -- ) Increment and test loop counter  | DONE 
b0f0			 
b0f0				; pop tos as current loop count to hl 
b0f0			 
b0f0				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
b0f0			 
b0f0				FORTH_LOOP_TOS 
b0f0 cd ee 9c			call macro_forth_loop_tos 
b0f3				endm 
# End of macro FORTH_LOOP_TOS
b0f3 e5				push hl 
b0f4			 
b0f4					if DEBUG_FORTH_WORDS_KEY 
b0f4						DMARK "LOP" 
b0f4 f5				push af  
b0f5 3a 09 b1			ld a, (.dmark)  
b0f8 32 65 ee			ld (debug_mark),a  
b0fb 3a 0a b1			ld a, (.dmark+1)  
b0fe 32 66 ee			ld (debug_mark+1),a  
b101 3a 0b b1			ld a, (.dmark+2)  
b104 32 67 ee			ld (debug_mark+2),a  
b107 18 03			jr .pastdmark  
b109 ..			.dmark: db "LOP"  
b10c f1			.pastdmark: pop af  
b10d			endm  
# End of macro DMARK
b10d						CALLMONITOR 
b10d cd 6f ee			call debug_vector  
b110				endm  
# End of macro CALLMONITOR
b110					endif 
b110				; next item on the stack is the limit. get it 
b110			 
b110			 
b110				FORTH_LOOP_POP 
b110 cd f8 9c			call macro_forth_loop_pop 
b113				endm 
# End of macro FORTH_LOOP_POP
b113			 
b113				FORTH_LOOP_TOS 
b113 cd ee 9c			call macro_forth_loop_tos 
b116				endm 
# End of macro FORTH_LOOP_TOS
b116			 
b116 d1				pop de		 ; de = i, hl = limit 
b117			 
b117					if DEBUG_FORTH_WORDS 
b117						DMARK "LP1" 
b117 f5				push af  
b118 3a 2c b1			ld a, (.dmark)  
b11b 32 65 ee			ld (debug_mark),a  
b11e 3a 2d b1			ld a, (.dmark+1)  
b121 32 66 ee			ld (debug_mark+1),a  
b124 3a 2e b1			ld a, (.dmark+2)  
b127 32 67 ee			ld (debug_mark+2),a  
b12a 18 03			jr .pastdmark  
b12c ..			.dmark: db "LP1"  
b12f f1			.pastdmark: pop af  
b130			endm  
# End of macro DMARK
b130						CALLMONITOR 
b130 cd 6f ee			call debug_vector  
b133				endm  
# End of macro CALLMONITOR
b133					endif 
b133			 
b133				; go back to previous word 
b133			 
b133 d5				push de    ; save I for inc later 
b134			 
b134			 
b134				; get limit 
b134				;  is I at limit? 
b134			 
b134			 
b134					if DEBUG_FORTH_WORDS 
b134						DMARK "LP1" 
b134 f5				push af  
b135 3a 49 b1			ld a, (.dmark)  
b138 32 65 ee			ld (debug_mark),a  
b13b 3a 4a b1			ld a, (.dmark+1)  
b13e 32 66 ee			ld (debug_mark+1),a  
b141 3a 4b b1			ld a, (.dmark+2)  
b144 32 67 ee			ld (debug_mark+2),a  
b147 18 03			jr .pastdmark  
b149 ..			.dmark: db "LP1"  
b14c f1			.pastdmark: pop af  
b14d			endm  
# End of macro DMARK
b14d						CALLMONITOR 
b14d cd 6f ee			call debug_vector  
b150				endm  
# End of macro CALLMONITOR
b150					endif 
b150			 
b150 ed 52			sbc hl, de 
b152			 
b152			 
b152				;  if at limit pop both limit and current off stack do NEXT and get rid of saved DO 
b152			 
b152 20 26				jr nz, .loopnotdone 
b154			 
b154 e1				pop hl   ; get rid of saved I 
b155				FORTH_LOOP_POP     ; get rid of limit 
b155 cd f8 9c			call macro_forth_loop_pop 
b158				endm 
# End of macro FORTH_LOOP_POP
b158			 
b158				FORTH_RSP_POP     ; get rid of DO ptr 
b158 cd 4d 9a			call macro_forth_rsp_pop 
b15b				endm 
# End of macro FORTH_RSP_POP
b15b			 
b15b			if DEBUG_FORTH_WORDS 
b15b						DMARK "LP>" 
b15b f5				push af  
b15c 3a 70 b1			ld a, (.dmark)  
b15f 32 65 ee			ld (debug_mark),a  
b162 3a 71 b1			ld a, (.dmark+1)  
b165 32 66 ee			ld (debug_mark+1),a  
b168 3a 72 b1			ld a, (.dmark+2)  
b16b 32 67 ee			ld (debug_mark+2),a  
b16e 18 03			jr .pastdmark  
b170 ..			.dmark: db "LP>"  
b173 f1			.pastdmark: pop af  
b174			endm  
# End of macro DMARK
b174				CALLMONITOR 
b174 cd 6f ee			call debug_vector  
b177				endm  
# End of macro CALLMONITOR
b177			endif 
b177			 
b177					NEXTW 
b177 c3 76 9e			jp macro_next 
b17a				endm 
# End of macro NEXTW
b17a				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
b17a			 
b17a			.loopnotdone: 
b17a			 
b17a e1				pop hl    ; get I 
b17b 23				inc hl 
b17c			 
b17c			   	; save new I 
b17c			 
b17c			 
b17c					; set I counter 
b17c			 
b17c 22 e0 e5				ld (os_current_i), hl 
b17f			 
b17f					if DEBUG_FORTH_WORDS 
b17f						DMARK "LPN" 
b17f f5				push af  
b180 3a 94 b1			ld a, (.dmark)  
b183 32 65 ee			ld (debug_mark),a  
b186 3a 95 b1			ld a, (.dmark+1)  
b189 32 66 ee			ld (debug_mark+1),a  
b18c 3a 96 b1			ld a, (.dmark+2)  
b18f 32 67 ee			ld (debug_mark+2),a  
b192 18 03			jr .pastdmark  
b194 ..			.dmark: db "LPN"  
b197 f1			.pastdmark: pop af  
b198			endm  
# End of macro DMARK
b198					CALLMONITOR 
b198 cd 6f ee			call debug_vector  
b19b				endm  
# End of macro CALLMONITOR
b19b					endif 
b19b					 
b19b				FORTH_LOOP_NEXT 
b19b cd bb 9c			call macro_forth_loop_next 
b19e				endm 
# End of macro FORTH_LOOP_NEXT
b19e			 
b19e			 
b19e					if DEBUG_FORTH_WORDS 
b19e eb						ex de,hl 
b19f					endif 
b19f			 
b19f			;	; get DO ptr 
b19f			; 
b19f					if DEBUG_FORTH_WORDS 
b19f						DMARK "LP7" 
b19f f5				push af  
b1a0 3a b4 b1			ld a, (.dmark)  
b1a3 32 65 ee			ld (debug_mark),a  
b1a6 3a b5 b1			ld a, (.dmark+1)  
b1a9 32 66 ee			ld (debug_mark+1),a  
b1ac 3a b6 b1			ld a, (.dmark+2)  
b1af 32 67 ee			ld (debug_mark+2),a  
b1b2 18 03			jr .pastdmark  
b1b4 ..			.dmark: db "LP7"  
b1b7 f1			.pastdmark: pop af  
b1b8			endm  
# End of macro DMARK
b1b8					CALLMONITOR 
b1b8 cd 6f ee			call debug_vector  
b1bb				endm  
# End of macro CALLMONITOR
b1bb					endif 
b1bb				FORTH_RSP_TOS 
b1bb cd 43 9a			call macro_forth_rsp_tos 
b1be				endm 
# End of macro FORTH_RSP_TOS
b1be			 
b1be					if DEBUG_FORTH_WORDS 
b1be						DMARK "LP8" 
b1be f5				push af  
b1bf 3a d3 b1			ld a, (.dmark)  
b1c2 32 65 ee			ld (debug_mark),a  
b1c5 3a d4 b1			ld a, (.dmark+1)  
b1c8 32 66 ee			ld (debug_mark+1),a  
b1cb 3a d5 b1			ld a, (.dmark+2)  
b1ce 32 67 ee			ld (debug_mark+2),a  
b1d1 18 03			jr .pastdmark  
b1d3 ..			.dmark: db "LP8"  
b1d6 f1			.pastdmark: pop af  
b1d7			endm  
# End of macro DMARK
b1d7					CALLMONITOR 
b1d7 cd 6f ee			call debug_vector  
b1da				endm  
# End of macro CALLMONITOR
b1da					endif 
b1da				;push hl 
b1da			 
b1da				; not going to DO any more 
b1da				; get rid of the RSP pointer as DO will add it back in 
b1da				;FORTH_RSP_POP 
b1da				;pop hl 
b1da			 
b1da				;ld hl,(cli_ret_sp) 
b1da				;ld e, (hl) 
b1da				;inc hl 
b1da				;ld d, (hl) 
b1da				;ex de,hl 
b1da 22 bc e5			ld (os_tok_ptr), hl 
b1dd					if DEBUG_FORTH_WORDS 
b1dd						DMARK "LP<" 
b1dd f5				push af  
b1de 3a f2 b1			ld a, (.dmark)  
b1e1 32 65 ee			ld (debug_mark),a  
b1e4 3a f3 b1			ld a, (.dmark+1)  
b1e7 32 66 ee			ld (debug_mark+1),a  
b1ea 3a f4 b1			ld a, (.dmark+2)  
b1ed 32 67 ee			ld (debug_mark+2),a  
b1f0 18 03			jr .pastdmark  
b1f2 ..			.dmark: db "LP<"  
b1f5 f1			.pastdmark: pop af  
b1f6			endm  
# End of macro DMARK
b1f6					CALLMONITOR 
b1f6 cd 6f ee			call debug_vector  
b1f9				endm  
# End of macro CALLMONITOR
b1f9				endif 
b1f9 c3 07 9f			jp exec1 
b1fc			 
b1fc					 
b1fc			 
b1fc			 
b1fc					NEXTW 
b1fc c3 76 9e			jp macro_next 
b1ff				endm 
# End of macro NEXTW
b1ff			.I:  
b1ff			 
b1ff				CWHEAD .DLOOP 74 "I" 1 WORD_FLAG_CODE 
b1ff 5e				db WORD_SYS_CORE+74             
b200 2a b2			dw .DLOOP            
b202 02				db 1 + 1 
b203 .. 00			db "I",0              
b205				endm 
# End of macro CWHEAD
b205			; | I ( -- ) Current loop counter | DONE 
b205					if DEBUG_FORTH_WORDS_KEY 
b205						DMARK "I.." 
b205 f5				push af  
b206 3a 1a b2			ld a, (.dmark)  
b209 32 65 ee			ld (debug_mark),a  
b20c 3a 1b b2			ld a, (.dmark+1)  
b20f 32 66 ee			ld (debug_mark+1),a  
b212 3a 1c b2			ld a, (.dmark+2)  
b215 32 67 ee			ld (debug_mark+2),a  
b218 18 03			jr .pastdmark  
b21a ..			.dmark: db "I.."  
b21d f1			.pastdmark: pop af  
b21e			endm  
# End of macro DMARK
b21e						CALLMONITOR 
b21e cd 6f ee			call debug_vector  
b221				endm  
# End of macro CALLMONITOR
b221					endif 
b221			 
b221 2a e0 e5				ld hl,(os_current_i) 
b224 cd 85 9a				call forth_push_numhl 
b227			 
b227					NEXTW 
b227 c3 76 9e			jp macro_next 
b22a				endm 
# End of macro NEXTW
b22a			.DLOOP: 
b22a				CWHEAD .REPEAT 75 "-LOOP" 5 WORD_FLAG_CODE 
b22a 5f				db WORD_SYS_CORE+75             
b22b 0b b3			dw .REPEAT            
b22d 06				db 5 + 1 
b22e .. 00			db "-LOOP",0              
b234				endm 
# End of macro CWHEAD
b234			; | -LOOP ( -- ) Decrement and test loop counter  | DONE 
b234				; pop tos as current loop count to hl 
b234					if DEBUG_FORTH_WORDS_KEY 
b234						DMARK "-LP" 
b234 f5				push af  
b235 3a 49 b2			ld a, (.dmark)  
b238 32 65 ee			ld (debug_mark),a  
b23b 3a 4a b2			ld a, (.dmark+1)  
b23e 32 66 ee			ld (debug_mark+1),a  
b241 3a 4b b2			ld a, (.dmark+2)  
b244 32 67 ee			ld (debug_mark+2),a  
b247 18 03			jr .pastdmark  
b249 ..			.dmark: db "-LP"  
b24c f1			.pastdmark: pop af  
b24d			endm  
# End of macro DMARK
b24d						CALLMONITOR 
b24d cd 6f ee			call debug_vector  
b250				endm  
# End of macro CALLMONITOR
b250					endif 
b250			 
b250				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
b250			 
b250				FORTH_LOOP_TOS 
b250 cd ee 9c			call macro_forth_loop_tos 
b253				endm 
# End of macro FORTH_LOOP_TOS
b253 e5				push hl 
b254			 
b254					if DEBUG_FORTH_WORDS 
b254						DMARK "-LP" 
b254 f5				push af  
b255 3a 69 b2			ld a, (.dmark)  
b258 32 65 ee			ld (debug_mark),a  
b25b 3a 6a b2			ld a, (.dmark+1)  
b25e 32 66 ee			ld (debug_mark+1),a  
b261 3a 6b b2			ld a, (.dmark+2)  
b264 32 67 ee			ld (debug_mark+2),a  
b267 18 03			jr .pastdmark  
b269 ..			.dmark: db "-LP"  
b26c f1			.pastdmark: pop af  
b26d			endm  
# End of macro DMARK
b26d						CALLMONITOR 
b26d cd 6f ee			call debug_vector  
b270				endm  
# End of macro CALLMONITOR
b270					endif 
b270				; next item on the stack is the limit. get it 
b270			 
b270			 
b270				FORTH_LOOP_POP 
b270 cd f8 9c			call macro_forth_loop_pop 
b273				endm 
# End of macro FORTH_LOOP_POP
b273			 
b273				FORTH_LOOP_TOS 
b273 cd ee 9c			call macro_forth_loop_tos 
b276				endm 
# End of macro FORTH_LOOP_TOS
b276			 
b276 d1				pop de		 ; de = i, hl = limit 
b277			 
b277					if DEBUG_FORTH_WORDS 
b277						DMARK "-L1" 
b277 f5				push af  
b278 3a 8c b2			ld a, (.dmark)  
b27b 32 65 ee			ld (debug_mark),a  
b27e 3a 8d b2			ld a, (.dmark+1)  
b281 32 66 ee			ld (debug_mark+1),a  
b284 3a 8e b2			ld a, (.dmark+2)  
b287 32 67 ee			ld (debug_mark+2),a  
b28a 18 03			jr .pastdmark  
b28c ..			.dmark: db "-L1"  
b28f f1			.pastdmark: pop af  
b290			endm  
# End of macro DMARK
b290						CALLMONITOR 
b290 cd 6f ee			call debug_vector  
b293				endm  
# End of macro CALLMONITOR
b293					endif 
b293			 
b293				; go back to previous word 
b293			 
b293 d5				push de    ; save I for inc later 
b294			 
b294			 
b294				; get limit 
b294				;  is I at limit? 
b294			 
b294			 
b294					if DEBUG_FORTH_WORDS 
b294						DMARK "-L1" 
b294 f5				push af  
b295 3a a9 b2			ld a, (.dmark)  
b298 32 65 ee			ld (debug_mark),a  
b29b 3a aa b2			ld a, (.dmark+1)  
b29e 32 66 ee			ld (debug_mark+1),a  
b2a1 3a ab b2			ld a, (.dmark+2)  
b2a4 32 67 ee			ld (debug_mark+2),a  
b2a7 18 03			jr .pastdmark  
b2a9 ..			.dmark: db "-L1"  
b2ac f1			.pastdmark: pop af  
b2ad			endm  
# End of macro DMARK
b2ad						CALLMONITOR 
b2ad cd 6f ee			call debug_vector  
b2b0				endm  
# End of macro CALLMONITOR
b2b0					endif 
b2b0			 
b2b0 ed 52			sbc hl, de 
b2b2			 
b2b2			 
b2b2				;  if at limit pop both limit and current off stack do NEXT and get rid of saved DO 
b2b2			 
b2b2 20 26				jr nz, .mloopnotdone 
b2b4			 
b2b4 e1				pop hl   ; get rid of saved I 
b2b5				FORTH_LOOP_POP     ; get rid of limit 
b2b5 cd f8 9c			call macro_forth_loop_pop 
b2b8				endm 
# End of macro FORTH_LOOP_POP
b2b8			 
b2b8				FORTH_RSP_POP     ; get rid of DO ptr 
b2b8 cd 4d 9a			call macro_forth_rsp_pop 
b2bb				endm 
# End of macro FORTH_RSP_POP
b2bb			 
b2bb			if DEBUG_FORTH_WORDS 
b2bb						DMARK "-L>" 
b2bb f5				push af  
b2bc 3a d0 b2			ld a, (.dmark)  
b2bf 32 65 ee			ld (debug_mark),a  
b2c2 3a d1 b2			ld a, (.dmark+1)  
b2c5 32 66 ee			ld (debug_mark+1),a  
b2c8 3a d2 b2			ld a, (.dmark+2)  
b2cb 32 67 ee			ld (debug_mark+2),a  
b2ce 18 03			jr .pastdmark  
b2d0 ..			.dmark: db "-L>"  
b2d3 f1			.pastdmark: pop af  
b2d4			endm  
# End of macro DMARK
b2d4				CALLMONITOR 
b2d4 cd 6f ee			call debug_vector  
b2d7				endm  
# End of macro CALLMONITOR
b2d7			endif 
b2d7			 
b2d7					NEXTW 
b2d7 c3 76 9e			jp macro_next 
b2da				endm 
# End of macro NEXTW
b2da				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
b2da			 
b2da			.mloopnotdone: 
b2da			 
b2da e1				pop hl    ; get I 
b2db 2b				dec hl 
b2dc			 
b2dc			   	; save new I 
b2dc			 
b2dc			 
b2dc					; set I counter 
b2dc			 
b2dc 22 e0 e5				ld (os_current_i), hl 
b2df			 
b2df					 
b2df				FORTH_LOOP_NEXT 
b2df cd bb 9c			call macro_forth_loop_next 
b2e2				endm 
# End of macro FORTH_LOOP_NEXT
b2e2			 
b2e2			 
b2e2					if DEBUG_FORTH_WORDS 
b2e2 eb						ex de,hl 
b2e3					endif 
b2e3			 
b2e3			;	; get DO ptr 
b2e3			; 
b2e3				FORTH_RSP_TOS 
b2e3 cd 43 9a			call macro_forth_rsp_tos 
b2e6				endm 
# End of macro FORTH_RSP_TOS
b2e6			 
b2e6				;push hl 
b2e6			 
b2e6				; not going to DO any more 
b2e6				; get rid of the RSP pointer as DO will add it back in 
b2e6				;FORTH_RSP_POP 
b2e6				;pop hl 
b2e6			 
b2e6			 
b2e6 22 bc e5			ld (os_tok_ptr), hl 
b2e9					if DEBUG_FORTH_WORDS 
b2e9						DMARK "-L<" 
b2e9 f5				push af  
b2ea 3a fe b2			ld a, (.dmark)  
b2ed 32 65 ee			ld (debug_mark),a  
b2f0 3a ff b2			ld a, (.dmark+1)  
b2f3 32 66 ee			ld (debug_mark+1),a  
b2f6 3a 00 b3			ld a, (.dmark+2)  
b2f9 32 67 ee			ld (debug_mark+2),a  
b2fc 18 03			jr .pastdmark  
b2fe ..			.dmark: db "-L<"  
b301 f1			.pastdmark: pop af  
b302			endm  
# End of macro DMARK
b302					CALLMONITOR 
b302 cd 6f ee			call debug_vector  
b305				endm  
# End of macro CALLMONITOR
b305				endif 
b305 c3 07 9f			jp exec1 
b308			 
b308					 
b308			 
b308			 
b308			 
b308				NEXTW 
b308 c3 76 9e			jp macro_next 
b30b				endm 
# End of macro NEXTW
b30b			 
b30b			 
b30b			 
b30b			 
b30b			.REPEAT: 
b30b				CWHEAD .UNTIL 93 "REPEAT" 5 WORD_FLAG_CODE 
b30b 71				db WORD_SYS_CORE+93             
b30c 5e b3			dw .UNTIL            
b30e 06				db 5 + 1 
b30f .. 00			db "REPEAT",0              
b316				endm 
# End of macro CWHEAD
b316			; | REPEAT ( --  ) Start REPEAT...UNTIL loop  | DONE 
b316			;  push pc to rsp stack past the REPEAT 
b316					if DEBUG_FORTH_WORDS_KEY 
b316						DMARK "REP" 
b316 f5				push af  
b317 3a 2b b3			ld a, (.dmark)  
b31a 32 65 ee			ld (debug_mark),a  
b31d 3a 2c b3			ld a, (.dmark+1)  
b320 32 66 ee			ld (debug_mark+1),a  
b323 3a 2d b3			ld a, (.dmark+2)  
b326 32 67 ee			ld (debug_mark+2),a  
b329 18 03			jr .pastdmark  
b32b ..			.dmark: db "REP"  
b32e f1			.pastdmark: pop af  
b32f			endm  
# End of macro DMARK
b32f						CALLMONITOR 
b32f cd 6f ee			call debug_vector  
b332				endm  
# End of macro CALLMONITOR
b332					endif 
b332			 
b332 2a bc e5				ld hl, (os_tok_ptr) 
b335 23					inc hl   ; R 
b336 23					inc hl  ; E 
b337 23					inc hl   ; P 
b338 23					inc hl   ; E 
b339 23					inc hl   ; A 
b33a 23					inc hl   ; T 
b33b 23					inc hl   ; zero 
b33c					FORTH_RSP_NEXT 
b33c cd 2c 9a			call macro_forth_rsp_next 
b33f				endm 
# End of macro FORTH_RSP_NEXT
b33f			 
b33f			 
b33f					if DEBUG_FORTH_WORDS 
b33f						DMARK "REP" 
b33f f5				push af  
b340 3a 54 b3			ld a, (.dmark)  
b343 32 65 ee			ld (debug_mark),a  
b346 3a 55 b3			ld a, (.dmark+1)  
b349 32 66 ee			ld (debug_mark+1),a  
b34c 3a 56 b3			ld a, (.dmark+2)  
b34f 32 67 ee			ld (debug_mark+2),a  
b352 18 03			jr .pastdmark  
b354 ..			.dmark: db "REP"  
b357 f1			.pastdmark: pop af  
b358			endm  
# End of macro DMARK
b358						;pop bc    ; TODO BUG ?????? what is this for???? 
b358						CALLMONITOR 
b358 cd 6f ee			call debug_vector  
b35b				endm  
# End of macro CALLMONITOR
b35b					endif 
b35b			 
b35b					NEXTW 
b35b c3 76 9e			jp macro_next 
b35e				endm 
# End of macro NEXTW
b35e			;	       NEXTW 
b35e			 
b35e			.UNTIL: 
b35e				CWHEAD .ENDFLOW 94 "UNTIL" 5 WORD_FLAG_CODE 
b35e 72				db WORD_SYS_CORE+94             
b35f f5 b3			dw .ENDFLOW            
b361 06				db 5 + 1 
b362 .. 00			db "UNTIL",0              
b368				endm 
# End of macro CWHEAD
b368			; | UNTIL ( u -- ) Exit REPEAT...UNTIL loop if TOS is false  | DONE 
b368			 
b368				; pop tos as check 
b368			 
b368				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
b368			 
b368				FORTH_DSP_VALUEHL 
b368 cd 8a 9c			call macro_dsp_valuehl 
b36b				endm 
# End of macro FORTH_DSP_VALUEHL
b36b			 
b36b					if DEBUG_FORTH_WORDS_KEY 
b36b						DMARK "UNT" 
b36b f5				push af  
b36c 3a 80 b3			ld a, (.dmark)  
b36f 32 65 ee			ld (debug_mark),a  
b372 3a 81 b3			ld a, (.dmark+1)  
b375 32 66 ee			ld (debug_mark+1),a  
b378 3a 82 b3			ld a, (.dmark+2)  
b37b 32 67 ee			ld (debug_mark+2),a  
b37e 18 03			jr .pastdmark  
b380 ..			.dmark: db "UNT"  
b383 f1			.pastdmark: pop af  
b384			endm  
# End of macro DMARK
b384						CALLMONITOR 
b384 cd 6f ee			call debug_vector  
b387				endm  
# End of macro CALLMONITOR
b387					endif 
b387			 
b387			;	push hl 
b387				FORTH_DSP_POP 
b387 cd 42 9d			call macro_forth_dsp_pop 
b38a				endm 
# End of macro FORTH_DSP_POP
b38a			 
b38a			;	pop hl 
b38a			 
b38a				; test if true 
b38a			 
b38a cd 13 8d			call ishlzero 
b38d			;	ld a,l 
b38d			;	add h 
b38d			; 
b38d			;	cp 0 
b38d			 
b38d 20 3e			jr nz, .untilnotdone 
b38f			 
b38f					if DEBUG_FORTH_WORDS 
b38f						DMARK "UNf" 
b38f f5				push af  
b390 3a a4 b3			ld a, (.dmark)  
b393 32 65 ee			ld (debug_mark),a  
b396 3a a5 b3			ld a, (.dmark+1)  
b399 32 66 ee			ld (debug_mark+1),a  
b39c 3a a6 b3			ld a, (.dmark+2)  
b39f 32 67 ee			ld (debug_mark+2),a  
b3a2 18 03			jr .pastdmark  
b3a4 ..			.dmark: db "UNf"  
b3a7 f1			.pastdmark: pop af  
b3a8			endm  
# End of macro DMARK
b3a8						CALLMONITOR 
b3a8 cd 6f ee			call debug_vector  
b3ab				endm  
# End of macro CALLMONITOR
b3ab					endif 
b3ab			 
b3ab			 
b3ab			 
b3ab				FORTH_RSP_POP     ; get rid of DO ptr 
b3ab cd 4d 9a			call macro_forth_rsp_pop 
b3ae				endm 
# End of macro FORTH_RSP_POP
b3ae			 
b3ae			if DEBUG_FORTH_WORDS 
b3ae						DMARK "UN>" 
b3ae f5				push af  
b3af 3a c3 b3			ld a, (.dmark)  
b3b2 32 65 ee			ld (debug_mark),a  
b3b5 3a c4 b3			ld a, (.dmark+1)  
b3b8 32 66 ee			ld (debug_mark+1),a  
b3bb 3a c5 b3			ld a, (.dmark+2)  
b3be 32 67 ee			ld (debug_mark+2),a  
b3c1 18 03			jr .pastdmark  
b3c3 ..			.dmark: db "UN>"  
b3c6 f1			.pastdmark: pop af  
b3c7			endm  
# End of macro DMARK
b3c7				CALLMONITOR 
b3c7 cd 6f ee			call debug_vector  
b3ca				endm  
# End of macro CALLMONITOR
b3ca			endif 
b3ca			 
b3ca					NEXTW 
b3ca c3 76 9e			jp macro_next 
b3cd				endm 
# End of macro NEXTW
b3cd				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
b3cd			 
b3cd			.untilnotdone: 
b3cd			 
b3cd			 
b3cd			;	; get DO ptr 
b3cd			; 
b3cd				FORTH_RSP_TOS 
b3cd cd 43 9a			call macro_forth_rsp_tos 
b3d0				endm 
# End of macro FORTH_RSP_TOS
b3d0			 
b3d0				;push hl 
b3d0			 
b3d0				; not going to DO any more 
b3d0				; get rid of the RSP pointer as DO will add it back in 
b3d0				;FORTH_RSP_POP 
b3d0				;pop hl 
b3d0			 
b3d0			 
b3d0 22 bc e5			ld (os_tok_ptr), hl 
b3d3					if DEBUG_FORTH_WORDS 
b3d3						DMARK "UN<" 
b3d3 f5				push af  
b3d4 3a e8 b3			ld a, (.dmark)  
b3d7 32 65 ee			ld (debug_mark),a  
b3da 3a e9 b3			ld a, (.dmark+1)  
b3dd 32 66 ee			ld (debug_mark+1),a  
b3e0 3a ea b3			ld a, (.dmark+2)  
b3e3 32 67 ee			ld (debug_mark+2),a  
b3e6 18 03			jr .pastdmark  
b3e8 ..			.dmark: db "UN<"  
b3eb f1			.pastdmark: pop af  
b3ec			endm  
# End of macro DMARK
b3ec					CALLMONITOR 
b3ec cd 6f ee			call debug_vector  
b3ef				endm  
# End of macro CALLMONITOR
b3ef				endif 
b3ef c3 07 9f			jp exec1 
b3f2			 
b3f2					 
b3f2			 
b3f2			 
b3f2					NEXTW 
b3f2 c3 76 9e			jp macro_next 
b3f5				endm 
# End of macro NEXTW
b3f5			 
b3f5			 
b3f5			.ENDFLOW: 
b3f5			 
b3f5			; eof 
b3f5			 
# End of file forth_words_flow.asm
b3f5			; TODO something wrong with the first word of the next word group. no matter which group applies. On device, sc114 is fine. bad memory? 
b3f5			include "forth_words_logic.asm" 
b3f5			 
b3f5			; | ## Logic Words 
b3f5			 
b3f5			.NOT: 
b3f5				CWHEAD .IS 25 "NOT" 3 WORD_FLAG_CODE 
b3f5 2d				db WORD_SYS_CORE+25             
b3f6 3d b4			dw .IS            
b3f8 04				db 3 + 1 
b3f9 .. 00			db "NOT",0              
b3fd				endm 
# End of macro CWHEAD
b3fd			; | NOT ( u  -- u ) Inverse true/false on stack | DONE 
b3fd					if DEBUG_FORTH_WORDS_KEY 
b3fd						DMARK "NOT" 
b3fd f5				push af  
b3fe 3a 12 b4			ld a, (.dmark)  
b401 32 65 ee			ld (debug_mark),a  
b404 3a 13 b4			ld a, (.dmark+1)  
b407 32 66 ee			ld (debug_mark+1),a  
b40a 3a 14 b4			ld a, (.dmark+2)  
b40d 32 67 ee			ld (debug_mark+2),a  
b410 18 03			jr .pastdmark  
b412 ..			.dmark: db "NOT"  
b415 f1			.pastdmark: pop af  
b416			endm  
# End of macro DMARK
b416						CALLMONITOR 
b416 cd 6f ee			call debug_vector  
b419				endm  
# End of macro CALLMONITOR
b419					endif 
b419					FORTH_DSP 
b419 cd 50 9c			call macro_forth_dsp 
b41c				endm 
# End of macro FORTH_DSP
b41c 7e					ld a,(hl)	; get type of value on TOS 
b41d fe 02				cp DS_TYPE_INUM  
b41f 28 03				jr z, .noti 
b421					NEXTW 
b421 c3 76 9e			jp macro_next 
b424				endm 
# End of macro NEXTW
b424			.noti:          FORTH_DSP_VALUEHL 
b424 cd 8a 9c			call macro_dsp_valuehl 
b427				endm 
# End of macro FORTH_DSP_VALUEHL
b427			;		push hl 
b427					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b427 cd 42 9d			call macro_forth_dsp_pop 
b42a				endm 
# End of macro FORTH_DSP_POP
b42a			;		pop hl 
b42a 3e 00				ld a,0 
b42c bd					cp l 
b42d 28 04				jr z, .not2t 
b42f 2e 00				ld l, 0 
b431 18 02				jr .notip 
b433			 
b433 2e ff		.not2t:		ld l, 255 
b435			 
b435 26 00		.notip:		ld h, 0	 
b437			 
b437 cd 85 9a				call forth_push_numhl 
b43a					NEXTW 
b43a c3 76 9e			jp macro_next 
b43d				endm 
# End of macro NEXTW
b43d			 
b43d			.IS: 
b43d				CWHEAD .LZERO 25 "IS" 2 WORD_FLAG_CODE 
b43d 2d				db WORD_SYS_CORE+25             
b43e 63 b4			dw .LZERO            
b440 03				db 2 + 1 
b441 .. 00			db "IS",0              
b444				endm 
# End of macro CWHEAD
b444			; | IS ( s1 s2  -- f ) Push true if string s1 is the same as s2 | TODO 
b444					if DEBUG_FORTH_WORDS_KEY 
b444						DMARK "IS." 
b444 f5				push af  
b445 3a 59 b4			ld a, (.dmark)  
b448 32 65 ee			ld (debug_mark),a  
b44b 3a 5a b4			ld a, (.dmark+1)  
b44e 32 66 ee			ld (debug_mark+1),a  
b451 3a 5b b4			ld a, (.dmark+2)  
b454 32 67 ee			ld (debug_mark+2),a  
b457 18 03			jr .pastdmark  
b459 ..			.dmark: db "IS."  
b45c f1			.pastdmark: pop af  
b45d			endm  
# End of macro DMARK
b45d						CALLMONITOR 
b45d cd 6f ee			call debug_vector  
b460				endm  
# End of macro CALLMONITOR
b460					endif 
b460					NEXTW 
b460 c3 76 9e			jp macro_next 
b463				endm 
# End of macro NEXTW
b463			.LZERO: 
b463				CWHEAD .TZERO 25 "0<" 2 WORD_FLAG_CODE 
b463 2d				db WORD_SYS_CORE+25             
b464 6d b4			dw .TZERO            
b466 03				db 2 + 1 
b467 .. 00			db "0<",0              
b46a				endm 
# End of macro CWHEAD
b46a			; | 0< ( u -- f ) Push true if u is less than o | CANT DO UNTIL FLOAT 
b46a					NEXTW 
b46a c3 76 9e			jp macro_next 
b46d				endm 
# End of macro NEXTW
b46d			.TZERO: 
b46d				CWHEAD .LESS 26 "0=" 2 WORD_FLAG_CODE 
b46d 2e				db WORD_SYS_CORE+26             
b46e b4 b4			dw .LESS            
b470 03				db 2 + 1 
b471 .. 00			db "0=",0              
b474				endm 
# End of macro CWHEAD
b474			; | 0= ( u -- f ) Push true if u equals 0 | DONE 
b474				; TODO add floating point number detection 
b474					;v5 FORTH_DSP_VALUE 
b474					if DEBUG_FORTH_WORDS_KEY 
b474						DMARK "0=." 
b474 f5				push af  
b475 3a 89 b4			ld a, (.dmark)  
b478 32 65 ee			ld (debug_mark),a  
b47b 3a 8a b4			ld a, (.dmark+1)  
b47e 32 66 ee			ld (debug_mark+1),a  
b481 3a 8b b4			ld a, (.dmark+2)  
b484 32 67 ee			ld (debug_mark+2),a  
b487 18 03			jr .pastdmark  
b489 ..			.dmark: db "0=."  
b48c f1			.pastdmark: pop af  
b48d			endm  
# End of macro DMARK
b48d						CALLMONITOR 
b48d cd 6f ee			call debug_vector  
b490				endm  
# End of macro CALLMONITOR
b490					endif 
b490					FORTH_DSP 
b490 cd 50 9c			call macro_forth_dsp 
b493				endm 
# End of macro FORTH_DSP
b493 7e					ld a,(hl)	; get type of value on TOS 
b494 fe 02				cp DS_TYPE_INUM  
b496 28 00				jr z, .tz_inum 
b498			 
b498				if FORTH_ENABLE_FLOATMATH 
b498					jr .tz_done 
b498			 
b498				endif 
b498					 
b498			 
b498			.tz_inum: 
b498					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b498 cd 8a 9c			call macro_dsp_valuehl 
b49b				endm 
# End of macro FORTH_DSP_VALUEHL
b49b			 
b49b			;		push hl 
b49b			 
b49b					; destroy value TOS 
b49b			 
b49b					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b49b cd 42 9d			call macro_forth_dsp_pop 
b49e				endm 
# End of macro FORTH_DSP_POP
b49e			 
b49e			;		pop hl 
b49e			 
b49e 3e 00				ld a,0 
b4a0			 
b4a0 bd					cp l 
b4a1 20 08				jr nz, .tz_notzero 
b4a3			 
b4a3 bc					cp h 
b4a4			 
b4a4 20 05				jr nz, .tz_notzero 
b4a6			 
b4a6			 
b4a6 21 01 00				ld hl, FORTH_TRUE 
b4a9 18 03				jr .tz_done 
b4ab			 
b4ab 21 00 00		.tz_notzero:	ld hl, FORTH_FALSE 
b4ae			 
b4ae					; push value back onto stack for another op etc 
b4ae			 
b4ae			.tz_done: 
b4ae cd 85 9a				call forth_push_numhl 
b4b1			 
b4b1					NEXTW 
b4b1 c3 76 9e			jp macro_next 
b4b4				endm 
# End of macro NEXTW
b4b4			.LESS: 
b4b4				CWHEAD .GT 27 "<" 1 WORD_FLAG_CODE 
b4b4 2f				db WORD_SYS_CORE+27             
b4b5 1d b5			dw .GT            
b4b7 02				db 1 + 1 
b4b8 .. 00			db "<",0              
b4ba				endm 
# End of macro CWHEAD
b4ba			; | < ( u1 u2 -- f ) True if u1 is less than u2 | DONE 
b4ba				; TODO add floating point number detection 
b4ba					if DEBUG_FORTH_WORDS_KEY 
b4ba						DMARK "LES" 
b4ba f5				push af  
b4bb 3a cf b4			ld a, (.dmark)  
b4be 32 65 ee			ld (debug_mark),a  
b4c1 3a d0 b4			ld a, (.dmark+1)  
b4c4 32 66 ee			ld (debug_mark+1),a  
b4c7 3a d1 b4			ld a, (.dmark+2)  
b4ca 32 67 ee			ld (debug_mark+2),a  
b4cd 18 03			jr .pastdmark  
b4cf ..			.dmark: db "LES"  
b4d2 f1			.pastdmark: pop af  
b4d3			endm  
# End of macro DMARK
b4d3						CALLMONITOR 
b4d3 cd 6f ee			call debug_vector  
b4d6				endm  
# End of macro CALLMONITOR
b4d6					endif 
b4d6					FORTH_DSP 
b4d6 cd 50 9c			call macro_forth_dsp 
b4d9				endm 
# End of macro FORTH_DSP
b4d9					;v5 FORTH_DSP_VALUE 
b4d9 7e					ld a,(hl)	; get type of value on TOS 
b4da fe 02				cp DS_TYPE_INUM  
b4dc 28 00				jr z, .less_inum 
b4de			 
b4de				if FORTH_ENABLE_FLOATMATH 
b4de					jr .less_done 
b4de			 
b4de				endif 
b4de					 
b4de			 
b4de			.less_inum: 
b4de					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b4de cd 8a 9c			call macro_dsp_valuehl 
b4e1				endm 
# End of macro FORTH_DSP_VALUEHL
b4e1			 
b4e1 e5					push hl  ; u2 
b4e2			 
b4e2					; destroy value TOS 
b4e2			 
b4e2					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b4e2 cd 42 9d			call macro_forth_dsp_pop 
b4e5				endm 
# End of macro FORTH_DSP_POP
b4e5			 
b4e5			 
b4e5					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b4e5 cd 8a 9c			call macro_dsp_valuehl 
b4e8				endm 
# End of macro FORTH_DSP_VALUEHL
b4e8			 
b4e8 e5					push hl    ; u1 
b4e9			 
b4e9					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b4e9 cd 42 9d			call macro_forth_dsp_pop 
b4ec				endm 
# End of macro FORTH_DSP_POP
b4ec			 
b4ec			 
b4ec b7			 or a      ;clear carry flag 
b4ed 01 00 00		 ld bc, FORTH_FALSE 
b4f0 e1			  pop hl    ; u1 
b4f1 d1			  pop de    ; u2 
b4f2 ed 52		  sbc hl,de 
b4f4 30 03		  jr nc,.lscont   	;	if hl >= de, carry flag will be cleared 
b4f6			 
b4f6 01 01 00		 ld bc, FORTH_TRUE 
b4f9			.lscont:  
b4f9 c5					push bc 
b4fa e1					pop hl 
b4fb			 
b4fb					if DEBUG_FORTH_WORDS 
b4fb						DMARK "LT1" 
b4fb f5				push af  
b4fc 3a 10 b5			ld a, (.dmark)  
b4ff 32 65 ee			ld (debug_mark),a  
b502 3a 11 b5			ld a, (.dmark+1)  
b505 32 66 ee			ld (debug_mark+1),a  
b508 3a 12 b5			ld a, (.dmark+2)  
b50b 32 67 ee			ld (debug_mark+2),a  
b50e 18 03			jr .pastdmark  
b510 ..			.dmark: db "LT1"  
b513 f1			.pastdmark: pop af  
b514			endm  
# End of macro DMARK
b514						CALLMONITOR 
b514 cd 6f ee			call debug_vector  
b517				endm  
# End of macro CALLMONITOR
b517					endif 
b517 cd 85 9a				call forth_push_numhl 
b51a			 
b51a					NEXTW 
b51a c3 76 9e			jp macro_next 
b51d				endm 
# End of macro NEXTW
b51d			.GT: 
b51d				CWHEAD .EQUAL 28 ">" 1 WORD_FLAG_CODE 
b51d 30				db WORD_SYS_CORE+28             
b51e 86 b5			dw .EQUAL            
b520 02				db 1 + 1 
b521 .. 00			db ">",0              
b523				endm 
# End of macro CWHEAD
b523			; | > ( u1 u2 -- f ) True if u1 is greater than u2 | DONE 
b523				; TODO add floating point number detection 
b523					if DEBUG_FORTH_WORDS_KEY 
b523						DMARK "GRT" 
b523 f5				push af  
b524 3a 38 b5			ld a, (.dmark)  
b527 32 65 ee			ld (debug_mark),a  
b52a 3a 39 b5			ld a, (.dmark+1)  
b52d 32 66 ee			ld (debug_mark+1),a  
b530 3a 3a b5			ld a, (.dmark+2)  
b533 32 67 ee			ld (debug_mark+2),a  
b536 18 03			jr .pastdmark  
b538 ..			.dmark: db "GRT"  
b53b f1			.pastdmark: pop af  
b53c			endm  
# End of macro DMARK
b53c						CALLMONITOR 
b53c cd 6f ee			call debug_vector  
b53f				endm  
# End of macro CALLMONITOR
b53f					endif 
b53f					FORTH_DSP 
b53f cd 50 9c			call macro_forth_dsp 
b542				endm 
# End of macro FORTH_DSP
b542					;FORTH_DSP_VALUE 
b542 7e					ld a,(hl)	; get type of value on TOS 
b543 fe 02				cp DS_TYPE_INUM  
b545 28 00				jr z, .gt_inum 
b547			 
b547				if FORTH_ENABLE_FLOATMATH 
b547					jr .gt_done 
b547			 
b547				endif 
b547					 
b547			 
b547			.gt_inum: 
b547					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b547 cd 8a 9c			call macro_dsp_valuehl 
b54a				endm 
# End of macro FORTH_DSP_VALUEHL
b54a			 
b54a e5					push hl  ; u2 
b54b			 
b54b					; destroy value TOS 
b54b			 
b54b					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b54b cd 42 9d			call macro_forth_dsp_pop 
b54e				endm 
# End of macro FORTH_DSP_POP
b54e			 
b54e			 
b54e					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b54e cd 8a 9c			call macro_dsp_valuehl 
b551				endm 
# End of macro FORTH_DSP_VALUEHL
b551			 
b551 e5					push hl    ; u1 
b552			 
b552					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b552 cd 42 9d			call macro_forth_dsp_pop 
b555				endm 
# End of macro FORTH_DSP_POP
b555			 
b555			 
b555 b7			 or a      ;clear carry flag 
b556 01 00 00		 ld bc, FORTH_FALSE 
b559 e1			  pop hl    ; u1 
b55a d1			  pop de    ; u2 
b55b ed 52		  sbc hl,de 
b55d 38 03		  jr c,.gtcont   	;	if hl >= de, carry flag will be cleared 
b55f			 
b55f 01 01 00		 ld bc, FORTH_TRUE 
b562			.gtcont:  
b562 c5					push bc 
b563 e1					pop hl 
b564			 
b564					if DEBUG_FORTH_WORDS 
b564						DMARK "GT1" 
b564 f5				push af  
b565 3a 79 b5			ld a, (.dmark)  
b568 32 65 ee			ld (debug_mark),a  
b56b 3a 7a b5			ld a, (.dmark+1)  
b56e 32 66 ee			ld (debug_mark+1),a  
b571 3a 7b b5			ld a, (.dmark+2)  
b574 32 67 ee			ld (debug_mark+2),a  
b577 18 03			jr .pastdmark  
b579 ..			.dmark: db "GT1"  
b57c f1			.pastdmark: pop af  
b57d			endm  
# End of macro DMARK
b57d						CALLMONITOR 
b57d cd 6f ee			call debug_vector  
b580				endm  
# End of macro CALLMONITOR
b580					endif 
b580 cd 85 9a				call forth_push_numhl 
b583			 
b583					NEXTW 
b583 c3 76 9e			jp macro_next 
b586				endm 
# End of macro NEXTW
b586			.EQUAL: 
b586				CWHEAD .ENDLOGIC 29 "=" 1 WORD_FLAG_CODE 
b586 31				db WORD_SYS_CORE+29             
b587 f1 b5			dw .ENDLOGIC            
b589 02				db 1 + 1 
b58a .. 00			db "=",0              
b58c				endm 
# End of macro CWHEAD
b58c			; | = ( u1 u2 -- f ) True if u1 equals u2 | DONE 
b58c				; TODO add floating point number detection 
b58c					if DEBUG_FORTH_WORDS_KEY 
b58c						DMARK "EQ." 
b58c f5				push af  
b58d 3a a1 b5			ld a, (.dmark)  
b590 32 65 ee			ld (debug_mark),a  
b593 3a a2 b5			ld a, (.dmark+1)  
b596 32 66 ee			ld (debug_mark+1),a  
b599 3a a3 b5			ld a, (.dmark+2)  
b59c 32 67 ee			ld (debug_mark+2),a  
b59f 18 03			jr .pastdmark  
b5a1 ..			.dmark: db "EQ."  
b5a4 f1			.pastdmark: pop af  
b5a5			endm  
# End of macro DMARK
b5a5						CALLMONITOR 
b5a5 cd 6f ee			call debug_vector  
b5a8				endm  
# End of macro CALLMONITOR
b5a8					endif 
b5a8					FORTH_DSP 
b5a8 cd 50 9c			call macro_forth_dsp 
b5ab				endm 
# End of macro FORTH_DSP
b5ab					;v5 FORTH_DSP_VALUE 
b5ab 7e					ld a,(hl)	; get type of value on TOS 
b5ac fe 02				cp DS_TYPE_INUM  
b5ae 28 00				jr z, .eq_inum 
b5b0			 
b5b0				if FORTH_ENABLE_FLOATMATH 
b5b0					jr .eq_done 
b5b0			 
b5b0				endif 
b5b0					 
b5b0			 
b5b0			.eq_inum: 
b5b0					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b5b0 cd 8a 9c			call macro_dsp_valuehl 
b5b3				endm 
# End of macro FORTH_DSP_VALUEHL
b5b3			 
b5b3 e5					push hl 
b5b4			 
b5b4					; destroy value TOS 
b5b4			 
b5b4					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b5b4 cd 42 9d			call macro_forth_dsp_pop 
b5b7				endm 
# End of macro FORTH_DSP_POP
b5b7			 
b5b7			 
b5b7					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b5b7 cd 8a 9c			call macro_dsp_valuehl 
b5ba				endm 
# End of macro FORTH_DSP_VALUEHL
b5ba			 
b5ba					; one value on hl get other one back 
b5ba			 
b5ba e5					push hl 
b5bb			 
b5bb					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b5bb cd 42 9d			call macro_forth_dsp_pop 
b5be				endm 
# End of macro FORTH_DSP_POP
b5be			 
b5be 0e 00				ld c, FORTH_FALSE 
b5c0			 
b5c0 e1					pop hl 
b5c1 d1					pop de 
b5c2			 
b5c2 7b					ld a, e 
b5c3 bd					cp l 
b5c4			 
b5c4 20 06				jr nz, .eq_done 
b5c6			 
b5c6 7a					ld a, d 
b5c7 bc					cp h 
b5c8			 
b5c8 20 02				jr nz, .eq_done 
b5ca			 
b5ca 0e 01				ld c, FORTH_TRUE 
b5cc					 
b5cc			 
b5cc			 
b5cc			.eq_done: 
b5cc			 
b5cc					; TODO push value back onto stack for another op etc 
b5cc			 
b5cc 26 00				ld h, 0 
b5ce 69					ld l, c 
b5cf					if DEBUG_FORTH_WORDS 
b5cf						DMARK "EQ1" 
b5cf f5				push af  
b5d0 3a e4 b5			ld a, (.dmark)  
b5d3 32 65 ee			ld (debug_mark),a  
b5d6 3a e5 b5			ld a, (.dmark+1)  
b5d9 32 66 ee			ld (debug_mark+1),a  
b5dc 3a e6 b5			ld a, (.dmark+2)  
b5df 32 67 ee			ld (debug_mark+2),a  
b5e2 18 03			jr .pastdmark  
b5e4 ..			.dmark: db "EQ1"  
b5e7 f1			.pastdmark: pop af  
b5e8			endm  
# End of macro DMARK
b5e8						CALLMONITOR 
b5e8 cd 6f ee			call debug_vector  
b5eb				endm  
# End of macro CALLMONITOR
b5eb					endif 
b5eb cd 85 9a				call forth_push_numhl 
b5ee			 
b5ee					NEXTW 
b5ee c3 76 9e			jp macro_next 
b5f1				endm 
# End of macro NEXTW
b5f1			 
b5f1			 
b5f1			.ENDLOGIC: 
b5f1			; eof 
b5f1			 
b5f1			 
# End of file forth_words_logic.asm
b5f1			include "forth_words_maths.asm" 
b5f1			 
b5f1			; | ## Maths Words 
b5f1			 
b5f1			.PLUS:	 
b5f1				CWHEAD .NEG 1 "+" 1 WORD_FLAG_CODE 
b5f1 15				db WORD_SYS_CORE+1             
b5f2 4f b6			dw .NEG            
b5f4 02				db 1 + 1 
b5f5 .. 00			db "+",0              
b5f7				endm 
# End of macro CWHEAD
b5f7			; | + ( u u -- u )    Add two numbers and push result   | INT DONE 
b5f7					if DEBUG_FORTH_WORDS_KEY 
b5f7						DMARK "PLU" 
b5f7 f5				push af  
b5f8 3a 0c b6			ld a, (.dmark)  
b5fb 32 65 ee			ld (debug_mark),a  
b5fe 3a 0d b6			ld a, (.dmark+1)  
b601 32 66 ee			ld (debug_mark+1),a  
b604 3a 0e b6			ld a, (.dmark+2)  
b607 32 67 ee			ld (debug_mark+2),a  
b60a 18 03			jr .pastdmark  
b60c ..			.dmark: db "PLU"  
b60f f1			.pastdmark: pop af  
b610			endm  
# End of macro DMARK
b610						CALLMONITOR 
b610 cd 6f ee			call debug_vector  
b613				endm  
# End of macro CALLMONITOR
b613					endif 
b613					; add top two values and push back result 
b613			 
b613					;for v5 FORTH_DSP_VALUE 
b613					FORTH_DSP 
b613 cd 50 9c			call macro_forth_dsp 
b616				endm 
# End of macro FORTH_DSP
b616 7e					ld a,(hl)	; get type of value on TOS 
b617 fe 02				cp DS_TYPE_INUM  
b619 28 03				jr z, .dot_inum 
b61b			 
b61b					NEXTW 
b61b c3 76 9e			jp macro_next 
b61e				endm 
# End of macro NEXTW
b61e			 
b61e			; float maths 
b61e			 
b61e				if FORTH_ENABLE_FLOATMATH 
b61e						inc hl      ; now at start of numeric as string 
b61e			 
b61e					if DEBUG_FORTH_MATHS 
b61e						DMARK "ADD" 
b61e				CALLMONITOR 
b61e					endif 
b61e			 
b61e					;ld ix, hl 
b61e					call CON 
b61e			 
b61e			 
b61e					push hl 
b61e					 
b61e					 
b61e			 
b61e						FORTH_DSP_POP      ; TODO add stock underflow checks and throws  
b61e			 
b61e					; get next number 
b61e			 
b61e						FORTH_DSP_VALUE 
b61e			 
b61e						inc hl      ; now at start of numeric as string 
b61e			 
b61e					;ld ix, hl 
b61e					call CON 
b61e			 
b61e					push hl 
b61e			 
b61e			 
b61e						FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b61e			 
b61e						; TODO do add 
b61e			 
b61e						call IADD 
b61e			 
b61e						; TODO get result back as ascii 
b61e			 
b61e						; TODO push result  
b61e			 
b61e			 
b61e			 
b61e						jr .dot_done 
b61e				endif 
b61e			 
b61e			.dot_inum: 
b61e			 
b61e			 
b61e					if DEBUG_FORTH_DOT 
b61e						DMARK "+IT" 
b61e f5				push af  
b61f 3a 33 b6			ld a, (.dmark)  
b622 32 65 ee			ld (debug_mark),a  
b625 3a 34 b6			ld a, (.dmark+1)  
b628 32 66 ee			ld (debug_mark+1),a  
b62b 3a 35 b6			ld a, (.dmark+2)  
b62e 32 67 ee			ld (debug_mark+2),a  
b631 18 03			jr .pastdmark  
b633 ..			.dmark: db "+IT"  
b636 f1			.pastdmark: pop af  
b637			endm  
# End of macro DMARK
b637				CALLMONITOR 
b637 cd 6f ee			call debug_vector  
b63a				endm  
# End of macro CALLMONITOR
b63a					endif 
b63a			 
b63a					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b63a cd 8a 9c			call macro_dsp_valuehl 
b63d				endm 
# End of macro FORTH_DSP_VALUEHL
b63d			 
b63d				; TODO add floating point number detection 
b63d			 
b63d e5					push hl 
b63e			 
b63e					; destroy value TOS 
b63e			 
b63e					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b63e cd 42 9d			call macro_forth_dsp_pop 
b641				endm 
# End of macro FORTH_DSP_POP
b641			 
b641			 
b641					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b641 cd 8a 9c			call macro_dsp_valuehl 
b644				endm 
# End of macro FORTH_DSP_VALUEHL
b644			 
b644					; one value on hl get other one back 
b644			 
b644 d1					pop de 
b645			 
b645					; do the add 
b645			 
b645 19					add hl,de 
b646			 
b646					; save it 
b646			 
b646			;		push hl	 
b646			 
b646					; 
b646			 
b646					; destroy value TOS 
b646			 
b646					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b646 cd 42 9d			call macro_forth_dsp_pop 
b649				endm 
# End of macro FORTH_DSP_POP
b649			 
b649					; TODO push value back onto stack for another op etc 
b649			 
b649			;		pop hl 
b649			 
b649			.dot_done: 
b649 cd 85 9a				call forth_push_numhl 
b64c			 
b64c					NEXTW 
b64c c3 76 9e			jp macro_next 
b64f				endm 
# End of macro NEXTW
b64f			.NEG: 
b64f			 
b64f				CWHEAD .DIV 3 "-" 1 WORD_FLAG_CODE 
b64f 17				db WORD_SYS_CORE+3             
b650 92 b6			dw .DIV            
b652 02				db 1 + 1 
b653 .. 00			db "-",0              
b655				endm 
# End of macro CWHEAD
b655			; | - ( u1 u2 -- u )    Subtract u2 from u1 and push result  | INT DONE 
b655					if DEBUG_FORTH_WORDS_KEY 
b655						DMARK "SUB" 
b655 f5				push af  
b656 3a 6a b6			ld a, (.dmark)  
b659 32 65 ee			ld (debug_mark),a  
b65c 3a 6b b6			ld a, (.dmark+1)  
b65f 32 66 ee			ld (debug_mark+1),a  
b662 3a 6c b6			ld a, (.dmark+2)  
b665 32 67 ee			ld (debug_mark+2),a  
b668 18 03			jr .pastdmark  
b66a ..			.dmark: db "SUB"  
b66d f1			.pastdmark: pop af  
b66e			endm  
# End of macro DMARK
b66e						CALLMONITOR 
b66e cd 6f ee			call debug_vector  
b671				endm  
# End of macro CALLMONITOR
b671					endif 
b671			 
b671			 
b671				; TODO add floating point number detection 
b671					; v5 FORTH_DSP_VALUE 
b671					FORTH_DSP 
b671 cd 50 9c			call macro_forth_dsp 
b674				endm 
# End of macro FORTH_DSP
b674 7e					ld a,(hl)	; get type of value on TOS 
b675 fe 02				cp DS_TYPE_INUM  
b677 28 03				jr z, .neg_inum 
b679			 
b679					NEXTW 
b679 c3 76 9e			jp macro_next 
b67c				endm 
# End of macro NEXTW
b67c			 
b67c			; float maths 
b67c			 
b67c				if FORTH_ENABLE_FLOATMATH 
b67c					jr .neg_done 
b67c			 
b67c				endif 
b67c					 
b67c			 
b67c			.neg_inum: 
b67c					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b67c cd 8a 9c			call macro_dsp_valuehl 
b67f				endm 
# End of macro FORTH_DSP_VALUEHL
b67f			 
b67f e5					push hl 
b680			 
b680					; destroy value TOS 
b680			 
b680					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b680 cd 42 9d			call macro_forth_dsp_pop 
b683				endm 
# End of macro FORTH_DSP_POP
b683			 
b683			 
b683					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b683 cd 8a 9c			call macro_dsp_valuehl 
b686				endm 
# End of macro FORTH_DSP_VALUEHL
b686			 
b686					; one value on hl get other one back 
b686			 
b686 d1					pop de 
b687			 
b687					; do the sub 
b687			;		ex de, hl 
b687			 
b687 ed 52				sbc hl,de 
b689			 
b689					; save it 
b689			 
b689			;		push hl	 
b689			 
b689					; 
b689			 
b689					; destroy value TOS 
b689			 
b689					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b689 cd 42 9d			call macro_forth_dsp_pop 
b68c				endm 
# End of macro FORTH_DSP_POP
b68c			 
b68c					; TODO push value back onto stack for another op etc 
b68c			 
b68c			;		pop hl 
b68c			 
b68c cd 85 9a				call forth_push_numhl 
b68f			.neg_done: 
b68f			 
b68f					NEXTW 
b68f c3 76 9e			jp macro_next 
b692				endm 
# End of macro NEXTW
b692			.DIV: 
b692				CWHEAD .MUL 4 "/" 1 WORD_FLAG_CODE 
b692 18				db WORD_SYS_CORE+4             
b693 df b6			dw .MUL            
b695 02				db 1 + 1 
b696 .. 00			db "/",0              
b698				endm 
# End of macro CWHEAD
b698			; | / ( u1 u2 -- result remainder )     Divide u1 by u2 and push result | INT DONE 
b698					if DEBUG_FORTH_WORDS_KEY 
b698						DMARK "DIV" 
b698 f5				push af  
b699 3a ad b6			ld a, (.dmark)  
b69c 32 65 ee			ld (debug_mark),a  
b69f 3a ae b6			ld a, (.dmark+1)  
b6a2 32 66 ee			ld (debug_mark+1),a  
b6a5 3a af b6			ld a, (.dmark+2)  
b6a8 32 67 ee			ld (debug_mark+2),a  
b6ab 18 03			jr .pastdmark  
b6ad ..			.dmark: db "DIV"  
b6b0 f1			.pastdmark: pop af  
b6b1			endm  
# End of macro DMARK
b6b1						CALLMONITOR 
b6b1 cd 6f ee			call debug_vector  
b6b4				endm  
# End of macro CALLMONITOR
b6b4					endif 
b6b4				; TODO add floating point number detection 
b6b4					; v5 FORTH_DSP_VALUE 
b6b4					FORTH_DSP 
b6b4 cd 50 9c			call macro_forth_dsp 
b6b7				endm 
# End of macro FORTH_DSP
b6b7 7e					ld a,(hl)	; get type of value on TOS 
b6b8 fe 02				cp DS_TYPE_INUM  
b6ba 28 03				jr z, .div_inum 
b6bc			 
b6bc				if FORTH_ENABLE_FLOATMATH 
b6bc					jr .div_done 
b6bc			 
b6bc				endif 
b6bc					NEXTW 
b6bc c3 76 9e			jp macro_next 
b6bf				endm 
# End of macro NEXTW
b6bf			.div_inum: 
b6bf			 
b6bf					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b6bf cd 8a 9c			call macro_dsp_valuehl 
b6c2				endm 
# End of macro FORTH_DSP_VALUEHL
b6c2			 
b6c2 e5					push hl    ; to go to bc 
b6c3			 
b6c3					; destroy value TOS 
b6c3			 
b6c3					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b6c3 cd 42 9d			call macro_forth_dsp_pop 
b6c6				endm 
# End of macro FORTH_DSP_POP
b6c6			 
b6c6			 
b6c6					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b6c6 cd 8a 9c			call macro_dsp_valuehl 
b6c9				endm 
# End of macro FORTH_DSP_VALUEHL
b6c9			 
b6c9					; hl to go to de 
b6c9			 
b6c9 e5					push hl 
b6ca			 
b6ca c1					pop bc 
b6cb d1					pop de		 
b6cc			 
b6cc			 
b6cc					if DEBUG_FORTH_MATHS 
b6cc						DMARK "DIV" 
b6cc				CALLMONITOR 
b6cc					endif 
b6cc					; one value on hl but move to a get other one back 
b6cc			 
b6cc			        
b6cc cd 47 8c			call Div16 
b6cf			 
b6cf			;	push af	 
b6cf e5				push hl 
b6d0 c5				push bc 
b6d1			 
b6d1					if DEBUG_FORTH_MATHS 
b6d1						DMARK "DI1" 
b6d1				CALLMONITOR 
b6d1					endif 
b6d1			 
b6d1					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b6d1 cd 42 9d			call macro_forth_dsp_pop 
b6d4				endm 
# End of macro FORTH_DSP_POP
b6d4			 
b6d4			 
b6d4			 
b6d4 e1					pop hl    ; result 
b6d5			 
b6d5 cd 85 9a				call forth_push_numhl 
b6d8			 
b6d8 e1					pop hl    ; reminder 
b6d9			;		ld h,0 
b6d9			;		ld l,d 
b6d9			 
b6d9 cd 85 9a				call forth_push_numhl 
b6dc			.div_done: 
b6dc					NEXTW 
b6dc c3 76 9e			jp macro_next 
b6df				endm 
# End of macro NEXTW
b6df			.MUL: 
b6df				CWHEAD .MIN 5 "*" 1 WORD_FLAG_CODE 
b6df 19				db WORD_SYS_CORE+5             
b6e0 24 b7			dw .MIN            
b6e2 02				db 1 + 1 
b6e3 .. 00			db "*",0              
b6e5				endm 
# End of macro CWHEAD
b6e5			; | * ( u1 u2 -- u )     Multiply TOS and push result | INT DONE 
b6e5				; TODO add floating point number detection 
b6e5					if DEBUG_FORTH_WORDS_KEY 
b6e5						DMARK "MUL" 
b6e5 f5				push af  
b6e6 3a fa b6			ld a, (.dmark)  
b6e9 32 65 ee			ld (debug_mark),a  
b6ec 3a fb b6			ld a, (.dmark+1)  
b6ef 32 66 ee			ld (debug_mark+1),a  
b6f2 3a fc b6			ld a, (.dmark+2)  
b6f5 32 67 ee			ld (debug_mark+2),a  
b6f8 18 03			jr .pastdmark  
b6fa ..			.dmark: db "MUL"  
b6fd f1			.pastdmark: pop af  
b6fe			endm  
# End of macro DMARK
b6fe						CALLMONITOR 
b6fe cd 6f ee			call debug_vector  
b701				endm  
# End of macro CALLMONITOR
b701					endif 
b701					FORTH_DSP 
b701 cd 50 9c			call macro_forth_dsp 
b704				endm 
# End of macro FORTH_DSP
b704					; v5 FORTH_DSP_VALUE 
b704 7e					ld a,(hl)	; get type of value on TOS 
b705 fe 02				cp DS_TYPE_INUM  
b707 28 03				jr z, .mul_inum 
b709			 
b709				if FORTH_ENABLE_FLOATMATH 
b709					jr .mul_done 
b709			 
b709				endif 
b709			 
b709					NEXTW 
b709 c3 76 9e			jp macro_next 
b70c				endm 
# End of macro NEXTW
b70c			.mul_inum:	 
b70c			 
b70c					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b70c cd 8a 9c			call macro_dsp_valuehl 
b70f				endm 
# End of macro FORTH_DSP_VALUEHL
b70f			 
b70f e5					push hl 
b710			 
b710					; destroy value TOS 
b710			 
b710					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b710 cd 42 9d			call macro_forth_dsp_pop 
b713				endm 
# End of macro FORTH_DSP_POP
b713			 
b713			 
b713					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b713 cd 8a 9c			call macro_dsp_valuehl 
b716				endm 
# End of macro FORTH_DSP_VALUEHL
b716			 
b716					; one value on hl but move to a get other one back 
b716			 
b716 7d					ld a, l 
b717			 
b717 d1					pop de 
b718			 
b718					; do the mull 
b718			;		ex de, hl 
b718			 
b718 cd 6d 8c				call Mult16 
b71b					; save it 
b71b			 
b71b			;		push hl	 
b71b			 
b71b					; 
b71b			 
b71b					; destroy value TOS 
b71b			 
b71b					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b71b cd 42 9d			call macro_forth_dsp_pop 
b71e				endm 
# End of macro FORTH_DSP_POP
b71e			 
b71e					; TODO push value back onto stack for another op etc 
b71e			 
b71e			;		pop hl 
b71e			 
b71e cd 85 9a				call forth_push_numhl 
b721			 
b721			.mul_done: 
b721					NEXTW 
b721 c3 76 9e			jp macro_next 
b724				endm 
# End of macro NEXTW
b724			 
b724			 
b724			 
b724			 
b724			.MIN: 
b724				CWHEAD .MAX 53 "MIN" 3 WORD_FLAG_CODE 
b724 49				db WORD_SYS_CORE+53             
b725 a5 b7			dw .MAX            
b727 04				db 3 + 1 
b728 .. 00			db "MIN",0              
b72c				endm 
# End of macro CWHEAD
b72c			; | MIN (  u1 u2 -- u3 ) Whichever is the smallest value is pushed back onto the stack | DONE 
b72c					if DEBUG_FORTH_WORDS_KEY 
b72c						DMARK "MIN" 
b72c f5				push af  
b72d 3a 41 b7			ld a, (.dmark)  
b730 32 65 ee			ld (debug_mark),a  
b733 3a 42 b7			ld a, (.dmark+1)  
b736 32 66 ee			ld (debug_mark+1),a  
b739 3a 43 b7			ld a, (.dmark+2)  
b73c 32 67 ee			ld (debug_mark+2),a  
b73f 18 03			jr .pastdmark  
b741 ..			.dmark: db "MIN"  
b744 f1			.pastdmark: pop af  
b745			endm  
# End of macro DMARK
b745						CALLMONITOR 
b745 cd 6f ee			call debug_vector  
b748				endm  
# End of macro CALLMONITOR
b748					endif 
b748					; get u2 
b748			 
b748					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b748 cd 8a 9c			call macro_dsp_valuehl 
b74b				endm 
# End of macro FORTH_DSP_VALUEHL
b74b			 
b74b e5					push hl   ; u2 
b74c			 
b74c					; destroy value TOS 
b74c			 
b74c					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b74c cd 42 9d			call macro_forth_dsp_pop 
b74f				endm 
# End of macro FORTH_DSP_POP
b74f			 
b74f					; get u1 
b74f			 
b74f					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b74f cd 8a 9c			call macro_dsp_valuehl 
b752				endm 
# End of macro FORTH_DSP_VALUEHL
b752			 
b752 e5					push hl  ; u1 
b753			 
b753					; destroy value TOS 
b753			 
b753					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b753 cd 42 9d			call macro_forth_dsp_pop 
b756				endm 
# End of macro FORTH_DSP_POP
b756			 
b756 b7			 or a      ;clear carry flag 
b757 e1			  pop hl    ; u1 
b758 d1			  pop de    ; u2 
b759 e5				push hl   ; saved in case hl is lowest 
b75a ed 52		  sbc hl,de 
b75c 30 23		  jr nc,.mincont   	;	if hl >= de, carry flag will be cleared 
b75e			 
b75e e1				pop hl 
b75f					if DEBUG_FORTH_WORDS 
b75f						DMARK "MIN" 
b75f f5				push af  
b760 3a 74 b7			ld a, (.dmark)  
b763 32 65 ee			ld (debug_mark),a  
b766 3a 75 b7			ld a, (.dmark+1)  
b769 32 66 ee			ld (debug_mark+1),a  
b76c 3a 76 b7			ld a, (.dmark+2)  
b76f 32 67 ee			ld (debug_mark+2),a  
b772 18 03			jr .pastdmark  
b774 ..			.dmark: db "MIN"  
b777 f1			.pastdmark: pop af  
b778			endm  
# End of macro DMARK
b778						CALLMONITOR 
b778 cd 6f ee			call debug_vector  
b77b				endm  
# End of macro CALLMONITOR
b77b					endif 
b77b cd 85 9a				call forth_push_numhl 
b77e			 
b77e				       NEXTW 
b77e c3 76 9e			jp macro_next 
b781				endm 
# End of macro NEXTW
b781			 
b781			.mincont:  
b781 c1				pop bc   ; tidy up 
b782 eb				ex de , hl  
b783					if DEBUG_FORTH_WORDS 
b783						DMARK "MI1" 
b783 f5				push af  
b784 3a 98 b7			ld a, (.dmark)  
b787 32 65 ee			ld (debug_mark),a  
b78a 3a 99 b7			ld a, (.dmark+1)  
b78d 32 66 ee			ld (debug_mark+1),a  
b790 3a 9a b7			ld a, (.dmark+2)  
b793 32 67 ee			ld (debug_mark+2),a  
b796 18 03			jr .pastdmark  
b798 ..			.dmark: db "MI1"  
b79b f1			.pastdmark: pop af  
b79c			endm  
# End of macro DMARK
b79c						CALLMONITOR 
b79c cd 6f ee			call debug_vector  
b79f				endm  
# End of macro CALLMONITOR
b79f					endif 
b79f cd 85 9a				call forth_push_numhl 
b7a2			 
b7a2				       NEXTW 
b7a2 c3 76 9e			jp macro_next 
b7a5				endm 
# End of macro NEXTW
b7a5			.MAX: 
b7a5				CWHEAD .RND16 54 "MAX" 3 WORD_FLAG_CODE 
b7a5 4a				db WORD_SYS_CORE+54             
b7a6 26 b8			dw .RND16            
b7a8 04				db 3 + 1 
b7a9 .. 00			db "MAX",0              
b7ad				endm 
# End of macro CWHEAD
b7ad			; | MAX (  u1 u2 -- u3 )  Whichever is the largest value is pushed back onto the stack | DONE 
b7ad					if DEBUG_FORTH_WORDS_KEY 
b7ad						DMARK "MAX" 
b7ad f5				push af  
b7ae 3a c2 b7			ld a, (.dmark)  
b7b1 32 65 ee			ld (debug_mark),a  
b7b4 3a c3 b7			ld a, (.dmark+1)  
b7b7 32 66 ee			ld (debug_mark+1),a  
b7ba 3a c4 b7			ld a, (.dmark+2)  
b7bd 32 67 ee			ld (debug_mark+2),a  
b7c0 18 03			jr .pastdmark  
b7c2 ..			.dmark: db "MAX"  
b7c5 f1			.pastdmark: pop af  
b7c6			endm  
# End of macro DMARK
b7c6						CALLMONITOR 
b7c6 cd 6f ee			call debug_vector  
b7c9				endm  
# End of macro CALLMONITOR
b7c9					endif 
b7c9					; get u2 
b7c9			 
b7c9					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b7c9 cd 8a 9c			call macro_dsp_valuehl 
b7cc				endm 
# End of macro FORTH_DSP_VALUEHL
b7cc			 
b7cc e5					push hl   ; u2 
b7cd			 
b7cd					; destroy value TOS 
b7cd			 
b7cd					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b7cd cd 42 9d			call macro_forth_dsp_pop 
b7d0				endm 
# End of macro FORTH_DSP_POP
b7d0			 
b7d0					; get u1 
b7d0			 
b7d0					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b7d0 cd 8a 9c			call macro_dsp_valuehl 
b7d3				endm 
# End of macro FORTH_DSP_VALUEHL
b7d3			 
b7d3 e5					push hl  ; u1 
b7d4			 
b7d4					; destroy value TOS 
b7d4			 
b7d4					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b7d4 cd 42 9d			call macro_forth_dsp_pop 
b7d7				endm 
# End of macro FORTH_DSP_POP
b7d7			 
b7d7 b7			 or a      ;clear carry flag 
b7d8 e1			  pop hl    ; u1 
b7d9 d1			  pop de    ; u2 
b7da e5				push hl   ; saved in case hl is lowest 
b7db ed 52		  sbc hl,de 
b7dd 38 23		  jr c,.maxcont   	;	if hl <= de, carry flag will be cleared 
b7df			 
b7df e1				pop hl 
b7e0					if DEBUG_FORTH_WORDS 
b7e0						DMARK "MAX" 
b7e0 f5				push af  
b7e1 3a f5 b7			ld a, (.dmark)  
b7e4 32 65 ee			ld (debug_mark),a  
b7e7 3a f6 b7			ld a, (.dmark+1)  
b7ea 32 66 ee			ld (debug_mark+1),a  
b7ed 3a f7 b7			ld a, (.dmark+2)  
b7f0 32 67 ee			ld (debug_mark+2),a  
b7f3 18 03			jr .pastdmark  
b7f5 ..			.dmark: db "MAX"  
b7f8 f1			.pastdmark: pop af  
b7f9			endm  
# End of macro DMARK
b7f9						CALLMONITOR 
b7f9 cd 6f ee			call debug_vector  
b7fc				endm  
# End of macro CALLMONITOR
b7fc					endif 
b7fc cd 85 9a				call forth_push_numhl 
b7ff			 
b7ff				       NEXTW 
b7ff c3 76 9e			jp macro_next 
b802				endm 
# End of macro NEXTW
b802			 
b802			.maxcont:  
b802 c1				pop bc   ; tidy up 
b803 eb				ex de , hl  
b804					if DEBUG_FORTH_WORDS 
b804						DMARK "MA1" 
b804 f5				push af  
b805 3a 19 b8			ld a, (.dmark)  
b808 32 65 ee			ld (debug_mark),a  
b80b 3a 1a b8			ld a, (.dmark+1)  
b80e 32 66 ee			ld (debug_mark+1),a  
b811 3a 1b b8			ld a, (.dmark+2)  
b814 32 67 ee			ld (debug_mark+2),a  
b817 18 03			jr .pastdmark  
b819 ..			.dmark: db "MA1"  
b81c f1			.pastdmark: pop af  
b81d			endm  
# End of macro DMARK
b81d						CALLMONITOR 
b81d cd 6f ee			call debug_vector  
b820				endm  
# End of macro CALLMONITOR
b820					endif 
b820 cd 85 9a				call forth_push_numhl 
b823				       NEXTW 
b823 c3 76 9e			jp macro_next 
b826				endm 
# End of macro NEXTW
b826			 
b826			.RND16: 
b826				CWHEAD .RND8 58 "RND16" 5 WORD_FLAG_CODE 
b826 4e				db WORD_SYS_CORE+58             
b827 55 b8			dw .RND8            
b829 06				db 5 + 1 
b82a .. 00			db "RND16",0              
b830				endm 
# End of macro CWHEAD
b830			; | RND16 (  -- n ) Generate a random 16bit number and push to stack | DONE 
b830					if DEBUG_FORTH_WORDS_KEY 
b830						DMARK "R16" 
b830 f5				push af  
b831 3a 45 b8			ld a, (.dmark)  
b834 32 65 ee			ld (debug_mark),a  
b837 3a 46 b8			ld a, (.dmark+1)  
b83a 32 66 ee			ld (debug_mark+1),a  
b83d 3a 47 b8			ld a, (.dmark+2)  
b840 32 67 ee			ld (debug_mark+2),a  
b843 18 03			jr .pastdmark  
b845 ..			.dmark: db "R16"  
b848 f1			.pastdmark: pop af  
b849			endm  
# End of macro DMARK
b849						CALLMONITOR 
b849 cd 6f ee			call debug_vector  
b84c				endm  
# End of macro CALLMONITOR
b84c					endif 
b84c cd 11 8c				call prng16  
b84f cd 85 9a				call forth_push_numhl 
b852				       NEXTW 
b852 c3 76 9e			jp macro_next 
b855				endm 
# End of macro NEXTW
b855			.RND8: 
b855				CWHEAD .RND 76 "RND8" 4 WORD_FLAG_CODE 
b855 60				db WORD_SYS_CORE+76             
b856 8a b8			dw .RND            
b858 05				db 4 + 1 
b859 .. 00			db "RND8",0              
b85e				endm 
# End of macro CWHEAD
b85e			; | RND8 (  -- n ) Generate a random 8bit number and push to stack | DONE 
b85e					if DEBUG_FORTH_WORDS_KEY 
b85e						DMARK "RN8" 
b85e f5				push af  
b85f 3a 73 b8			ld a, (.dmark)  
b862 32 65 ee			ld (debug_mark),a  
b865 3a 74 b8			ld a, (.dmark+1)  
b868 32 66 ee			ld (debug_mark+1),a  
b86b 3a 75 b8			ld a, (.dmark+2)  
b86e 32 67 ee			ld (debug_mark+2),a  
b871 18 03			jr .pastdmark  
b873 ..			.dmark: db "RN8"  
b876 f1			.pastdmark: pop af  
b877			endm  
# End of macro DMARK
b877						CALLMONITOR 
b877 cd 6f ee			call debug_vector  
b87a				endm  
# End of macro CALLMONITOR
b87a					endif 
b87a 2a a3 eb				ld hl,(xrandc) 
b87d 23					inc hl 
b87e cd 2b 8c				call xrnd 
b881 6f					ld l,a	 
b882 26 00				ld h,0 
b884 cd 85 9a				call forth_push_numhl 
b887				       NEXTW 
b887 c3 76 9e			jp macro_next 
b88a				endm 
# End of macro NEXTW
b88a			.RND: 
b88a				CWHEAD .ENDMATHS 76 "RND" 3 WORD_FLAG_CODE 
b88a 60				db WORD_SYS_CORE+76             
b88b 90 b9			dw .ENDMATHS            
b88d 04				db 3 + 1 
b88e .. 00			db "RND",0              
b892				endm 
# End of macro CWHEAD
b892			; | RND ( u1 u2 -- u ) Generate a random number no lower than u1 and no higher than u2 and push to stack | DONE 
b892			 
b892					if DEBUG_FORTH_WORDS_KEY 
b892						DMARK "RND" 
b892 f5				push af  
b893 3a a7 b8			ld a, (.dmark)  
b896 32 65 ee			ld (debug_mark),a  
b899 3a a8 b8			ld a, (.dmark+1)  
b89c 32 66 ee			ld (debug_mark+1),a  
b89f 3a a9 b8			ld a, (.dmark+2)  
b8a2 32 67 ee			ld (debug_mark+2),a  
b8a5 18 03			jr .pastdmark  
b8a7 ..			.dmark: db "RND"  
b8aa f1			.pastdmark: pop af  
b8ab			endm  
# End of macro DMARK
b8ab						CALLMONITOR 
b8ab cd 6f ee			call debug_vector  
b8ae				endm  
# End of macro CALLMONITOR
b8ae					endif 
b8ae					 
b8ae					FORTH_DSP_VALUEHL    ; upper range 
b8ae cd 8a 9c			call macro_dsp_valuehl 
b8b1				endm 
# End of macro FORTH_DSP_VALUEHL
b8b1			 
b8b1 22 a7 eb				ld (LFSRSeed), hl	 
b8b4			 
b8b4					if DEBUG_FORTH_WORDS 
b8b4						DMARK "RN1" 
b8b4 f5				push af  
b8b5 3a c9 b8			ld a, (.dmark)  
b8b8 32 65 ee			ld (debug_mark),a  
b8bb 3a ca b8			ld a, (.dmark+1)  
b8be 32 66 ee			ld (debug_mark+1),a  
b8c1 3a cb b8			ld a, (.dmark+2)  
b8c4 32 67 ee			ld (debug_mark+2),a  
b8c7 18 03			jr .pastdmark  
b8c9 ..			.dmark: db "RN1"  
b8cc f1			.pastdmark: pop af  
b8cd			endm  
# End of macro DMARK
b8cd						CALLMONITOR 
b8cd cd 6f ee			call debug_vector  
b8d0				endm  
# End of macro CALLMONITOR
b8d0					endif 
b8d0					FORTH_DSP_POP 
b8d0 cd 42 9d			call macro_forth_dsp_pop 
b8d3				endm 
# End of macro FORTH_DSP_POP
b8d3			 
b8d3					FORTH_DSP_VALUEHL    ; low range 
b8d3 cd 8a 9c			call macro_dsp_valuehl 
b8d6				endm 
# End of macro FORTH_DSP_VALUEHL
b8d6			 
b8d6					if DEBUG_FORTH_WORDS 
b8d6						DMARK "RN2" 
b8d6 f5				push af  
b8d7 3a eb b8			ld a, (.dmark)  
b8da 32 65 ee			ld (debug_mark),a  
b8dd 3a ec b8			ld a, (.dmark+1)  
b8e0 32 66 ee			ld (debug_mark+1),a  
b8e3 3a ed b8			ld a, (.dmark+2)  
b8e6 32 67 ee			ld (debug_mark+2),a  
b8e9 18 03			jr .pastdmark  
b8eb ..			.dmark: db "RN2"  
b8ee f1			.pastdmark: pop af  
b8ef			endm  
# End of macro DMARK
b8ef						CALLMONITOR 
b8ef cd 6f ee			call debug_vector  
b8f2				endm  
# End of macro CALLMONITOR
b8f2					endif 
b8f2 22 a9 eb				ld (LFSRSeed+2), hl 
b8f5			 
b8f5					FORTH_DSP_POP 
b8f5 cd 42 9d			call macro_forth_dsp_pop 
b8f8				endm 
# End of macro FORTH_DSP_POP
b8f8			 
b8f8 e5					push hl 
b8f9			 
b8f9 e1			.inrange:	pop hl 
b8fa cd 11 8c				call prng16  
b8fd					if DEBUG_FORTH_WORDS 
b8fd						DMARK "RN3" 
b8fd f5				push af  
b8fe 3a 12 b9			ld a, (.dmark)  
b901 32 65 ee			ld (debug_mark),a  
b904 3a 13 b9			ld a, (.dmark+1)  
b907 32 66 ee			ld (debug_mark+1),a  
b90a 3a 14 b9			ld a, (.dmark+2)  
b90d 32 67 ee			ld (debug_mark+2),a  
b910 18 03			jr .pastdmark  
b912 ..			.dmark: db "RN3"  
b915 f1			.pastdmark: pop af  
b916			endm  
# End of macro DMARK
b916						CALLMONITOR 
b916 cd 6f ee			call debug_vector  
b919				endm  
# End of macro CALLMONITOR
b919					endif 
b919					 
b919					; if the range is 8bit knock out the high byte 
b919			 
b919 ed 5b a7 eb			ld de, (LFSRSeed)     ; check high level 
b91d			 
b91d 3e 00				ld a, 0 
b91f ba					cp d  
b920 20 1e				jr nz, .hirange 
b922 26 00				ld h, 0   ; knock it down to 8bit 
b924			 
b924					if DEBUG_FORTH_WORDS 
b924						DMARK "RNk" 
b924 f5				push af  
b925 3a 39 b9			ld a, (.dmark)  
b928 32 65 ee			ld (debug_mark),a  
b92b 3a 3a b9			ld a, (.dmark+1)  
b92e 32 66 ee			ld (debug_mark+1),a  
b931 3a 3b b9			ld a, (.dmark+2)  
b934 32 67 ee			ld (debug_mark+2),a  
b937 18 03			jr .pastdmark  
b939 ..			.dmark: db "RNk"  
b93c f1			.pastdmark: pop af  
b93d			endm  
# End of macro DMARK
b93d						CALLMONITOR 
b93d cd 6f ee			call debug_vector  
b940				endm  
# End of macro CALLMONITOR
b940					endif 
b940			.hirange:   
b940 e5					push hl  
b941 b7					or a  
b942 ed 52		                sbc hl, de 
b944			 
b944					;call cmp16 
b944			 
b944 30 b3				jr nc, .inrange      ; if hl >= de, carry flag is cleared 
b946 e1					pop hl 
b947 e5					push hl 
b948			 
b948					if DEBUG_FORTH_WORDS 
b948						DMARK "RN4" 
b948 f5				push af  
b949 3a 5d b9			ld a, (.dmark)  
b94c 32 65 ee			ld (debug_mark),a  
b94f 3a 5e b9			ld a, (.dmark+1)  
b952 32 66 ee			ld (debug_mark+1),a  
b955 3a 5f b9			ld a, (.dmark+2)  
b958 32 67 ee			ld (debug_mark+2),a  
b95b 18 03			jr .pastdmark  
b95d ..			.dmark: db "RN4"  
b960 f1			.pastdmark: pop af  
b961			endm  
# End of macro DMARK
b961						CALLMONITOR 
b961 cd 6f ee			call debug_vector  
b964				endm  
# End of macro CALLMONITOR
b964					endif 
b964 ed 5b a9 eb			ld de, (LFSRSeed+2)   ; check low range 
b968					;call cmp16 
b968				 
b968 b7					or a  
b969 ed 52		                sbc hl, de 
b96b 38 8c				jr c, .inrange 
b96d			 
b96d e1					pop hl 
b96e					 
b96e					if DEBUG_FORTH_WORDS 
b96e						DMARK "RNd" 
b96e f5				push af  
b96f 3a 83 b9			ld a, (.dmark)  
b972 32 65 ee			ld (debug_mark),a  
b975 3a 84 b9			ld a, (.dmark+1)  
b978 32 66 ee			ld (debug_mark+1),a  
b97b 3a 85 b9			ld a, (.dmark+2)  
b97e 32 67 ee			ld (debug_mark+2),a  
b981 18 03			jr .pastdmark  
b983 ..			.dmark: db "RNd"  
b986 f1			.pastdmark: pop af  
b987			endm  
# End of macro DMARK
b987						CALLMONITOR 
b987 cd 6f ee			call debug_vector  
b98a				endm  
# End of macro CALLMONITOR
b98a					endif 
b98a			 
b98a			 
b98a cd 85 9a				call forth_push_numhl 
b98d				       NEXTW 
b98d c3 76 9e			jp macro_next 
b990				endm 
# End of macro NEXTW
b990			 
b990			.ENDMATHS: 
b990			 
b990			; eof 
b990			 
# End of file forth_words_maths.asm
b990			include "forth_words_display.asm" 
b990			 
b990			; | ## Display Words 
b990			 
b990			.ACT: 
b990			 
b990				CWHEAD .INFO 78 "ACTIVE" 6 WORD_FLAG_CODE 
b990 62				db WORD_SYS_CORE+78             
b991 dc b9			dw .INFO            
b993 07				db 6 + 1 
b994 .. 00			db "ACTIVE",0              
b99b				endm 
# End of macro CWHEAD
b99b			; | ACTIVE ( -- s ) Push the next char for an activity indicator to TOS | DONE 
b99b			;  
b99b			; | | To display a pulsing activity indicator in a processing loop do this... 
b99b			; | | e.g. $ff $00 do active . ..... Your code ..... loop 
b99b			 
b99b					if DEBUG_FORTH_WORDS_KEY 
b99b						DMARK "ACT" 
b99b f5				push af  
b99c 3a b0 b9			ld a, (.dmark)  
b99f 32 65 ee			ld (debug_mark),a  
b9a2 3a b1 b9			ld a, (.dmark+1)  
b9a5 32 66 ee			ld (debug_mark+1),a  
b9a8 3a b2 b9			ld a, (.dmark+2)  
b9ab 32 67 ee			ld (debug_mark+2),a  
b9ae 18 03			jr .pastdmark  
b9b0 ..			.dmark: db "ACT"  
b9b3 f1			.pastdmark: pop af  
b9b4			endm  
# End of macro DMARK
b9b4						CALLMONITOR 
b9b4 cd 6f ee			call debug_vector  
b9b7				endm  
# End of macro CALLMONITOR
b9b7					endif 
b9b7 cd 14 8a				call active 
b9ba					if DEBUG_FORTH_WORDS 
b9ba						DMARK "ACp" 
b9ba f5				push af  
b9bb 3a cf b9			ld a, (.dmark)  
b9be 32 65 ee			ld (debug_mark),a  
b9c1 3a d0 b9			ld a, (.dmark+1)  
b9c4 32 66 ee			ld (debug_mark+1),a  
b9c7 3a d1 b9			ld a, (.dmark+2)  
b9ca 32 67 ee			ld (debug_mark+2),a  
b9cd 18 03			jr .pastdmark  
b9cf ..			.dmark: db "ACp"  
b9d2 f1			.pastdmark: pop af  
b9d3			endm  
# End of macro DMARK
b9d3						CALLMONITOR 
b9d3 cd 6f ee			call debug_vector  
b9d6				endm  
# End of macro CALLMONITOR
b9d6					endif 
b9d6 cd f3 9a				call forth_push_str 
b9d9			 
b9d9					NEXTW 
b9d9 c3 76 9e			jp macro_next 
b9dc				endm 
# End of macro NEXTW
b9dc			.INFO: 
b9dc			 
b9dc				CWHEAD .ATP 78 "INFO" 4 WORD_FLAG_CODE 
b9dc 62				db WORD_SYS_CORE+78             
b9dd f9 b9			dw .ATP            
b9df 05				db 4 + 1 
b9e0 .. 00			db "INFO",0              
b9e5				endm 
# End of macro CWHEAD
b9e5			; | INFO ( u1 u2 -- )  Use the top two strings on stack to fill in an info window over two lines. Causes a wait for key press to continue. | DONE 
b9e5					FORTH_DSP_VALUEHL 
b9e5 cd 8a 9c			call macro_dsp_valuehl 
b9e8				endm 
# End of macro FORTH_DSP_VALUEHL
b9e8			 
b9e8					FORTH_DSP_POP 
b9e8 cd 42 9d			call macro_forth_dsp_pop 
b9eb				endm 
# End of macro FORTH_DSP_POP
b9eb			 
b9eb e5					push hl 
b9ec			 
b9ec					FORTH_DSP_VALUEHL 
b9ec cd 8a 9c			call macro_dsp_valuehl 
b9ef				endm 
# End of macro FORTH_DSP_VALUEHL
b9ef			 
b9ef					FORTH_DSP_POP 
b9ef cd 42 9d			call macro_forth_dsp_pop 
b9f2				endm 
# End of macro FORTH_DSP_POP
b9f2			 
b9f2 d1					pop de 
b9f3			 
b9f3 cd 4e 8a				call info_panel 
b9f6			 
b9f6			 
b9f6					NEXTW 
b9f6 c3 76 9e			jp macro_next 
b9f9				endm 
# End of macro NEXTW
b9f9			.ATP: 
b9f9				CWHEAD .FB 78 "AT?" 3 WORD_FLAG_CODE 
b9f9 62				db WORD_SYS_CORE+78             
b9fa 70 ba			dw .FB            
b9fc 04				db 3 + 1 
b9fd .. 00			db "AT?",0              
ba01				endm 
# End of macro CWHEAD
ba01			; | AT? ( -- c r )  Push to stack the current position of the next print | TO TEST 
ba01					if DEBUG_FORTH_WORDS_KEY 
ba01						DMARK "AT?" 
ba01 f5				push af  
ba02 3a 16 ba			ld a, (.dmark)  
ba05 32 65 ee			ld (debug_mark),a  
ba08 3a 17 ba			ld a, (.dmark+1)  
ba0b 32 66 ee			ld (debug_mark+1),a  
ba0e 3a 18 ba			ld a, (.dmark+2)  
ba11 32 67 ee			ld (debug_mark+2),a  
ba14 18 03			jr .pastdmark  
ba16 ..			.dmark: db "AT?"  
ba19 f1			.pastdmark: pop af  
ba1a			endm  
# End of macro DMARK
ba1a						CALLMONITOR 
ba1a cd 6f ee			call debug_vector  
ba1d				endm  
# End of macro CALLMONITOR
ba1d					endif 
ba1d 3a 58 ea				ld a, (f_cursor_ptr) 
ba20			 
ba20			if DEBUG_FORTH_WORDS 
ba20				DMARK "AT?" 
ba20 f5				push af  
ba21 3a 35 ba			ld a, (.dmark)  
ba24 32 65 ee			ld (debug_mark),a  
ba27 3a 36 ba			ld a, (.dmark+1)  
ba2a 32 66 ee			ld (debug_mark+1),a  
ba2d 3a 37 ba			ld a, (.dmark+2)  
ba30 32 67 ee			ld (debug_mark+2),a  
ba33 18 03			jr .pastdmark  
ba35 ..			.dmark: db "AT?"  
ba38 f1			.pastdmark: pop af  
ba39			endm  
# End of macro DMARK
ba39				CALLMONITOR 
ba39 cd 6f ee			call debug_vector  
ba3c				endm  
# End of macro CALLMONITOR
ba3c			endif	 
ba3c					; count the number of rows 
ba3c			 
ba3c 06 00				ld b, 0 
ba3e 4f			.atpr:		ld c, a    ; save in case we go below zero 
ba3f d6 28				sub display_cols 
ba41 f2 47 ba				jp p, .atprunder 
ba44 04					inc b 
ba45 18 f7				jr .atpr 
ba47			.atprunder:	 
ba47			if DEBUG_FORTH_WORDS 
ba47				DMARK "A?2" 
ba47 f5				push af  
ba48 3a 5c ba			ld a, (.dmark)  
ba4b 32 65 ee			ld (debug_mark),a  
ba4e 3a 5d ba			ld a, (.dmark+1)  
ba51 32 66 ee			ld (debug_mark+1),a  
ba54 3a 5e ba			ld a, (.dmark+2)  
ba57 32 67 ee			ld (debug_mark+2),a  
ba5a 18 03			jr .pastdmark  
ba5c ..			.dmark: db "A?2"  
ba5f f1			.pastdmark: pop af  
ba60			endm  
# End of macro DMARK
ba60				CALLMONITOR 
ba60 cd 6f ee			call debug_vector  
ba63				endm  
# End of macro CALLMONITOR
ba63			endif	 
ba63 26 00				ld h, 0 
ba65 69					ld l, c 
ba66 cd 85 9a				call forth_push_numhl 
ba69 68					ld l, b  
ba6a cd 85 9a				call forth_push_numhl 
ba6d			 
ba6d			 
ba6d				NEXTW 
ba6d c3 76 9e			jp macro_next 
ba70				endm 
# End of macro NEXTW
ba70			 
ba70			.FB: 
ba70				CWHEAD .EMIT 7 "FB" 2 WORD_FLAG_CODE 
ba70 1b				db WORD_SYS_CORE+7             
ba71 be ba			dw .EMIT            
ba73 03				db 2 + 1 
ba74 .. 00			db "FB",0              
ba77				endm 
# End of macro CWHEAD
ba77			; | FB ( u -- ) Select frame buffer ID u (1-3)  |  DONE 
ba77			; | | Default frame buffer is 1. System uses 0 which can't be selected for system messages etc. 
ba77			; | | Selecting the frame buffer wont display unless automatic display is setup (default). 
ba77			; | | If automatic display is off then updates will not be shown until DRAW is used. 
ba77					if DEBUG_FORTH_WORDS_KEY 
ba77						DMARK "FB." 
ba77 f5				push af  
ba78 3a 8c ba			ld a, (.dmark)  
ba7b 32 65 ee			ld (debug_mark),a  
ba7e 3a 8d ba			ld a, (.dmark+1)  
ba81 32 66 ee			ld (debug_mark+1),a  
ba84 3a 8e ba			ld a, (.dmark+2)  
ba87 32 67 ee			ld (debug_mark+2),a  
ba8a 18 03			jr .pastdmark  
ba8c ..			.dmark: db "FB."  
ba8f f1			.pastdmark: pop af  
ba90			endm  
# End of macro DMARK
ba90						CALLMONITOR 
ba90 cd 6f ee			call debug_vector  
ba93				endm  
# End of macro CALLMONITOR
ba93					endif 
ba93			 
ba93					FORTH_DSP_VALUEHL 
ba93 cd 8a 9c			call macro_dsp_valuehl 
ba96				endm 
# End of macro FORTH_DSP_VALUEHL
ba96			 
ba96 7d					ld a, l 
ba97 fe 01				cp 1 
ba99 20 05				jr nz, .fbn1 
ba9b 21 0a ed				ld hl, display_fb1 
ba9e 18 15				jr .fbset 
baa0 fe 02		.fbn1:		cp 2 
baa2 20 05				jr nz, .fbn2 
baa4 21 c8 eb				ld hl, display_fb2 
baa7 18 0c				jr .fbset 
baa9 fe 03		.fbn2:		cp 3 
baab 20 05				jr nz, .fbn3 
baad 21 69 ec				ld hl, display_fb3 
bab0 18 03				jr .fbset 
bab2			.fbn3:		 ; if invalid number select first 
bab2 21 0a ed				ld hl, display_fb1 
bab5 22 c6 eb		.fbset:		ld (display_fb_active), hl 
bab8			 
bab8					FORTH_DSP_POP 
bab8 cd 42 9d			call macro_forth_dsp_pop 
babb				endm 
# End of macro FORTH_DSP_POP
babb			 
babb					NEXTW 
babb c3 76 9e			jp macro_next 
babe				endm 
# End of macro NEXTW
babe			 
babe			 
babe			.EMIT: 
babe				CWHEAD .DOTH 7 "EMIT" 4 WORD_FLAG_CODE 
babe 1b				db WORD_SYS_CORE+7             
babf 0f bb			dw .DOTH            
bac1 05				db 4 + 1 
bac2 .. 00			db "EMIT",0              
bac7				endm 
# End of macro CWHEAD
bac7			; |  EMIT ( u -- ) Display ascii character  TOS   | DONE 
bac7					; get value off TOS and display it 
bac7			 
bac7					if DEBUG_FORTH_WORDS_KEY 
bac7						DMARK "EMT" 
bac7 f5				push af  
bac8 3a dc ba			ld a, (.dmark)  
bacb 32 65 ee			ld (debug_mark),a  
bace 3a dd ba			ld a, (.dmark+1)  
bad1 32 66 ee			ld (debug_mark+1),a  
bad4 3a de ba			ld a, (.dmark+2)  
bad7 32 67 ee			ld (debug_mark+2),a  
bada 18 03			jr .pastdmark  
badc ..			.dmark: db "EMT"  
badf f1			.pastdmark: pop af  
bae0			endm  
# End of macro DMARK
bae0						CALLMONITOR 
bae0 cd 6f ee			call debug_vector  
bae3				endm  
# End of macro CALLMONITOR
bae3					endif 
bae3			 
bae3					FORTH_DSP_VALUEHL 
bae3 cd 8a 9c			call macro_dsp_valuehl 
bae6				endm 
# End of macro FORTH_DSP_VALUEHL
bae6			 
bae6 7d					ld a,l 
bae7			 
bae7					; TODO write to display 
bae7			 
bae7 32 b9 e4				ld (os_input), a 
baea 3e 00				ld a, 0 
baec 32 ba e4				ld (os_input+1), a 
baef					 
baef 3a 58 ea				ld a, (f_cursor_ptr) 
baf2 11 b9 e4				ld de, os_input 
baf5 cd d0 8a				call str_at_display 
baf8			 
baf8			 
baf8 3a 36 ea				ld a,(cli_autodisplay) 
bafb fe 00				cp 0 
bafd 28 03				jr z, .enoupdate 
baff cd e0 8a						call update_display 
bb02					.enoupdate: 
bb02			 
bb02 3a 58 ea				ld a, (f_cursor_ptr) 
bb05 3c					inc a 
bb06 32 58 ea				ld (f_cursor_ptr), a   ; save new pos 
bb09			 
bb09			 
bb09					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bb09 cd 42 9d			call macro_forth_dsp_pop 
bb0c				endm 
# End of macro FORTH_DSP_POP
bb0c			  
bb0c			 
bb0c					NEXTW 
bb0c c3 76 9e			jp macro_next 
bb0f				endm 
# End of macro NEXTW
bb0f			.DOTH: 
bb0f				CWHEAD .DOTF 8 ".-" 2 WORD_FLAG_CODE 
bb0f 1c				db WORD_SYS_CORE+8             
bb10 3f bb			dw .DOTF            
bb12 03				db 2 + 1 
bb13 .. 00			db ".-",0              
bb16				endm 
# End of macro CWHEAD
bb16			        ; | .- ( u -- ) Display TOS replacing any dashes with spaces. Means you dont need to wrap strings in double quotes!   | DONE 
bb16					; get value off TOS and display it 
bb16					if DEBUG_FORTH_WORDS_KEY 
bb16						DMARK "DTD" 
bb16 f5				push af  
bb17 3a 2b bb			ld a, (.dmark)  
bb1a 32 65 ee			ld (debug_mark),a  
bb1d 3a 2c bb			ld a, (.dmark+1)  
bb20 32 66 ee			ld (debug_mark+1),a  
bb23 3a 2d bb			ld a, (.dmark+2)  
bb26 32 67 ee			ld (debug_mark+2),a  
bb29 18 03			jr .pastdmark  
bb2b ..			.dmark: db "DTD"  
bb2e f1			.pastdmark: pop af  
bb2f			endm  
# End of macro DMARK
bb2f						CALLMONITOR 
bb2f cd 6f ee			call debug_vector  
bb32				endm  
# End of macro CALLMONITOR
bb32					endif 
bb32 0e 01			ld c, 1	  ; flag for removal of '-' enabled 
bb34 3e 00			ld a, 0 
bb36 32 37 ea			ld (cli_mvdot), a 
bb39 c3 96 bb			jp .dotgo 
bb3c				NEXTW 
bb3c c3 76 9e			jp macro_next 
bb3f				endm 
# End of macro NEXTW
bb3f			.DOTF: 
bb3f				CWHEAD .DOT 8 ".>" 2 WORD_FLAG_CODE 
bb3f 1c				db WORD_SYS_CORE+8             
bb40 6d bb			dw .DOT            
bb42 03				db 2 + 1 
bb43 .. 00			db ".>",0              
bb46				endm 
# End of macro CWHEAD
bb46			        ; | .> ( u -- ) Display TOS and move the next display point with display  | DONE 
bb46					; get value off TOS and display it 
bb46			        ; TODO BUG adds extra spaces 
bb46			        ; TODO BUG handle numerics? 
bb46					if DEBUG_FORTH_WORDS_KEY 
bb46						DMARK "DTC" 
bb46 f5				push af  
bb47 3a 5b bb			ld a, (.dmark)  
bb4a 32 65 ee			ld (debug_mark),a  
bb4d 3a 5c bb			ld a, (.dmark+1)  
bb50 32 66 ee			ld (debug_mark+1),a  
bb53 3a 5d bb			ld a, (.dmark+2)  
bb56 32 67 ee			ld (debug_mark+2),a  
bb59 18 03			jr .pastdmark  
bb5b ..			.dmark: db "DTC"  
bb5e f1			.pastdmark: pop af  
bb5f			endm  
# End of macro DMARK
bb5f						CALLMONITOR 
bb5f cd 6f ee			call debug_vector  
bb62				endm  
# End of macro CALLMONITOR
bb62					endif 
bb62 3e 01			ld a, 1 
bb64 32 37 ea			ld (cli_mvdot), a 
bb67 c3 96 bb			jp .dotgo 
bb6a				NEXTW 
bb6a c3 76 9e			jp macro_next 
bb6d				endm 
# End of macro NEXTW
bb6d			 
bb6d			.DOT: 
bb6d				CWHEAD .CLS 8 "." 1 WORD_FLAG_CODE 
bb6d 1c				db WORD_SYS_CORE+8             
bb6e 49 bd			dw .CLS            
bb70 02				db 1 + 1 
bb71 .. 00			db ".",0              
bb73				endm 
# End of macro CWHEAD
bb73			        ; | . ( u -- ) Display TOS. Does not move next print position. Use .> if you want that. | DONE 
bb73					; get value off TOS and display it 
bb73			 
bb73					if DEBUG_FORTH_WORDS_KEY 
bb73						DMARK "DOT" 
bb73 f5				push af  
bb74 3a 88 bb			ld a, (.dmark)  
bb77 32 65 ee			ld (debug_mark),a  
bb7a 3a 89 bb			ld a, (.dmark+1)  
bb7d 32 66 ee			ld (debug_mark+1),a  
bb80 3a 8a bb			ld a, (.dmark+2)  
bb83 32 67 ee			ld (debug_mark+2),a  
bb86 18 03			jr .pastdmark  
bb88 ..			.dmark: db "DOT"  
bb8b f1			.pastdmark: pop af  
bb8c			endm  
# End of macro DMARK
bb8c						CALLMONITOR 
bb8c cd 6f ee			call debug_vector  
bb8f				endm  
# End of macro CALLMONITOR
bb8f					endif 
bb8f 3e 00			ld a, 0 
bb91 32 37 ea			ld (cli_mvdot), a 
bb94 0e 00		ld c, 0	  ; flag for removal of '-' disabled 
bb96				 
bb96			 
bb96			.dotgo: 
bb96			 
bb96			; move up type to on stack for parserv5 
bb96					FORTH_DSP 
bb96 cd 50 9c			call macro_forth_dsp 
bb99				endm 
# End of macro FORTH_DSP
bb99				;FORTH_DSP_VALUE  
bb99			 
bb99			if DEBUG_FORTH_DOT 
bb99				DMARK "DOT" 
bb99 f5				push af  
bb9a 3a ae bb			ld a, (.dmark)  
bb9d 32 65 ee			ld (debug_mark),a  
bba0 3a af bb			ld a, (.dmark+1)  
bba3 32 66 ee			ld (debug_mark+1),a  
bba6 3a b0 bb			ld a, (.dmark+2)  
bba9 32 67 ee			ld (debug_mark+2),a  
bbac 18 03			jr .pastdmark  
bbae ..			.dmark: db "DOT"  
bbb1 f1			.pastdmark: pop af  
bbb2			endm  
# End of macro DMARK
bbb2				CALLMONITOR 
bbb2 cd 6f ee			call debug_vector  
bbb5				endm  
# End of macro CALLMONITOR
bbb5			endif	 
bbb5			;		.print: 
bbb5			 
bbb5 7e				ld a,(hl)  ; work out what type of value is on the TOS 
bbb6 23				inc hl   ; position to the actual value 
bbb7 fe 01			cp DS_TYPE_STR 
bbb9 20 06			jr nz, .dotnum1  
bbbb			 
bbbb			; display string 
bbbb				FORTH_DSP_VALUE  
bbbb cd 73 9c			call macro_forth_dsp_value 
bbbe				endm 
# End of macro FORTH_DSP_VALUE
bbbe eb				ex de,hl 
bbbf 18 49			jr .dotwrite 
bbc1			 
bbc1			.dotnum1: 
bbc1 fe 02			cp DS_TYPE_INUM 
bbc3 20 44			jr nz, .dotflot 
bbc5			 
bbc5			 
bbc5			; display number 
bbc5			 
bbc5			;	push hl 
bbc5			;	call clear_display 
bbc5			;	pop hl 
bbc5			 
bbc5 5e				ld e, (hl) 
bbc6 23				inc hl 
bbc7 56				ld d, (hl) 
bbc8 21 bb e2			ld hl, scratch 
bbcb			if DEBUG_FORTH_DOT 
bbcb				DMARK "DT1" 
bbcb f5				push af  
bbcc 3a e0 bb			ld a, (.dmark)  
bbcf 32 65 ee			ld (debug_mark),a  
bbd2 3a e1 bb			ld a, (.dmark+1)  
bbd5 32 66 ee			ld (debug_mark+1),a  
bbd8 3a e2 bb			ld a, (.dmark+2)  
bbdb 32 67 ee			ld (debug_mark+2),a  
bbde 18 03			jr .pastdmark  
bbe0 ..			.dmark: db "DT1"  
bbe3 f1			.pastdmark: pop af  
bbe4			endm  
# End of macro DMARK
bbe4				CALLMONITOR 
bbe4 cd 6f ee			call debug_vector  
bbe7				endm  
# End of macro CALLMONITOR
bbe7			endif	 
bbe7			 
bbe7 cd ff 8f			call uitoa_16 
bbea eb				ex de,hl 
bbeb			 
bbeb			if DEBUG_FORTH_DOT 
bbeb				DMARK "DT2" 
bbeb f5				push af  
bbec 3a 00 bc			ld a, (.dmark)  
bbef 32 65 ee			ld (debug_mark),a  
bbf2 3a 01 bc			ld a, (.dmark+1)  
bbf5 32 66 ee			ld (debug_mark+1),a  
bbf8 3a 02 bc			ld a, (.dmark+2)  
bbfb 32 67 ee			ld (debug_mark+2),a  
bbfe 18 03			jr .pastdmark  
bc00 ..			.dmark: db "DT2"  
bc03 f1			.pastdmark: pop af  
bc04			endm  
# End of macro DMARK
bc04				CALLMONITOR 
bc04 cd 6f ee			call debug_vector  
bc07				endm  
# End of macro CALLMONITOR
bc07			endif	 
bc07			 
bc07			;	ld de, os_word_scratch 
bc07 18 01			jr .dotwrite 
bc09			 
bc09 00			.dotflot:   nop 
bc0a			; TODO print floating point number 
bc0a			 
bc0a			.dotwrite:		 
bc0a			 
bc0a					; if c is set then set all '-' to spaces 
bc0a					; need to also take into account .>  
bc0a			 
bc0a 3e 01				ld a, 1 
bc0c b9					cp c 
bc0d 20 67				jr nz, .nodashswap 
bc0f			 
bc0f					; DE has the string to write, working with HL 
bc0f			 
bc0f 06 ff				ld b, 255 
bc11 d5					push de 
bc12 e1					pop hl 
bc13			 
bc13			if DEBUG_FORTH_DOT 
bc13				DMARK "DT-" 
bc13 f5				push af  
bc14 3a 28 bc			ld a, (.dmark)  
bc17 32 65 ee			ld (debug_mark),a  
bc1a 3a 29 bc			ld a, (.dmark+1)  
bc1d 32 66 ee			ld (debug_mark+1),a  
bc20 3a 2a bc			ld a, (.dmark+2)  
bc23 32 67 ee			ld (debug_mark+2),a  
bc26 18 03			jr .pastdmark  
bc28 ..			.dmark: db "DT-"  
bc2b f1			.pastdmark: pop af  
bc2c			endm  
# End of macro DMARK
bc2c				CALLMONITOR 
bc2c cd 6f ee			call debug_vector  
bc2f				endm  
# End of macro CALLMONITOR
bc2f			endif	 
bc2f 7e			.dashscan:	ld a, (hl) 
bc30 fe 00				cp 0 
bc32 28 42				jr z, .nodashswap 
bc34 fe 2d				cp '-' 
bc36 20 03				jr nz, .dashskip 
bc38 3e 20				ld a, ' ' 
bc3a 77					ld (hl), a 
bc3b 23			.dashskip:	inc hl 
bc3c			if DEBUG_FORTH_DOT 
bc3c				DMARK "D-2" 
bc3c f5				push af  
bc3d 3a 51 bc			ld a, (.dmark)  
bc40 32 65 ee			ld (debug_mark),a  
bc43 3a 52 bc			ld a, (.dmark+1)  
bc46 32 66 ee			ld (debug_mark+1),a  
bc49 3a 53 bc			ld a, (.dmark+2)  
bc4c 32 67 ee			ld (debug_mark+2),a  
bc4f 18 03			jr .pastdmark  
bc51 ..			.dmark: db "D-2"  
bc54 f1			.pastdmark: pop af  
bc55			endm  
# End of macro DMARK
bc55				CALLMONITOR 
bc55 cd 6f ee			call debug_vector  
bc58				endm  
# End of macro CALLMONITOR
bc58			endif	 
bc58 10 d5				djnz .dashscan 
bc5a			 
bc5a			if DEBUG_FORTH_DOT 
bc5a				DMARK "D-1" 
bc5a f5				push af  
bc5b 3a 6f bc			ld a, (.dmark)  
bc5e 32 65 ee			ld (debug_mark),a  
bc61 3a 70 bc			ld a, (.dmark+1)  
bc64 32 66 ee			ld (debug_mark+1),a  
bc67 3a 71 bc			ld a, (.dmark+2)  
bc6a 32 67 ee			ld (debug_mark+2),a  
bc6d 18 03			jr .pastdmark  
bc6f ..			.dmark: db "D-1"  
bc72 f1			.pastdmark: pop af  
bc73			endm  
# End of macro DMARK
bc73				CALLMONITOR 
bc73 cd 6f ee			call debug_vector  
bc76				endm  
# End of macro CALLMONITOR
bc76			endif	 
bc76			 
bc76			.nodashswap: 
bc76			 
bc76			if DEBUG_FORTH_DOT 
bc76				DMARK "D-o" 
bc76 f5				push af  
bc77 3a 8b bc			ld a, (.dmark)  
bc7a 32 65 ee			ld (debug_mark),a  
bc7d 3a 8c bc			ld a, (.dmark+1)  
bc80 32 66 ee			ld (debug_mark+1),a  
bc83 3a 8d bc			ld a, (.dmark+2)  
bc86 32 67 ee			ld (debug_mark+2),a  
bc89 18 03			jr .pastdmark  
bc8b ..			.dmark: db "D-o"  
bc8e f1			.pastdmark: pop af  
bc8f			endm  
# End of macro DMARK
bc8f				CALLMONITOR 
bc8f cd 6f ee			call debug_vector  
bc92				endm  
# End of macro CALLMONITOR
bc92			endif	 
bc92			 
bc92 d5					push de   ; save string start in case we need to advance print 
bc93			 
bc93 3a 58 ea				ld a, (f_cursor_ptr) 
bc96 cd d0 8a				call str_at_display 
bc99 3a 36 ea				ld a,(cli_autodisplay) 
bc9c fe 00				cp 0 
bc9e 28 03				jr z, .noupdate 
bca0 cd e0 8a						call update_display 
bca3					.noupdate: 
bca3			 
bca3			 
bca3					; see if we need to advance the print position 
bca3			 
bca3 e1					pop hl   ; get back string 
bca4			;		ex de,hl 
bca4			 
bca4 3a 37 ea				ld a, (cli_mvdot) 
bca7			if DEBUG_FORTH_DOT 
bca7			;		ld e,a 
bca7				DMARK "D>1" 
bca7 f5				push af  
bca8 3a bc bc			ld a, (.dmark)  
bcab 32 65 ee			ld (debug_mark),a  
bcae 3a bd bc			ld a, (.dmark+1)  
bcb1 32 66 ee			ld (debug_mark+1),a  
bcb4 3a be bc			ld a, (.dmark+2)  
bcb7 32 67 ee			ld (debug_mark+2),a  
bcba 18 03			jr .pastdmark  
bcbc ..			.dmark: db "D>1"  
bcbf f1			.pastdmark: pop af  
bcc0			endm  
# End of macro DMARK
bcc0				CALLMONITOR 
bcc0 cd 6f ee			call debug_vector  
bcc3				endm  
# End of macro CALLMONITOR
bcc3			endif	 
bcc3 fe 00				cp 0 
bcc5 28 44				jr z, .noadv 
bcc7					; yes, lets advance the print position 
bcc7 3e 00				ld a, 0 
bcc9 cd 5b 90				call strlent 
bccc			if DEBUG_FORTH_DOT 
bccc				DMARK "D-?" 
bccc f5				push af  
bccd 3a e1 bc			ld a, (.dmark)  
bcd0 32 65 ee			ld (debug_mark),a  
bcd3 3a e2 bc			ld a, (.dmark+1)  
bcd6 32 66 ee			ld (debug_mark+1),a  
bcd9 3a e3 bc			ld a, (.dmark+2)  
bcdc 32 67 ee			ld (debug_mark+2),a  
bcdf 18 03			jr .pastdmark  
bce1 ..			.dmark: db "D-?"  
bce4 f1			.pastdmark: pop af  
bce5			endm  
# End of macro DMARK
bce5				CALLMONITOR 
bce5 cd 6f ee			call debug_vector  
bce8				endm  
# End of macro CALLMONITOR
bce8			endif	 
bce8 3a 58 ea				ld a, (f_cursor_ptr) 
bceb 85					add a,l 
bcec					;call addatohl 
bcec					;ld a, l 
bcec 32 58 ea				ld (f_cursor_ptr), a   ; save new pos 
bcef			 
bcef			if DEBUG_FORTH_DOT 
bcef				DMARK "D->" 
bcef f5				push af  
bcf0 3a 04 bd			ld a, (.dmark)  
bcf3 32 65 ee			ld (debug_mark),a  
bcf6 3a 05 bd			ld a, (.dmark+1)  
bcf9 32 66 ee			ld (debug_mark+1),a  
bcfc 3a 06 bd			ld a, (.dmark+2)  
bcff 32 67 ee			ld (debug_mark+2),a  
bd02 18 03			jr .pastdmark  
bd04 ..			.dmark: db "D->"  
bd07 f1			.pastdmark: pop af  
bd08			endm  
# End of macro DMARK
bd08				CALLMONITOR 
bd08 cd 6f ee			call debug_vector  
bd0b				endm  
# End of macro CALLMONITOR
bd0b			endif	 
bd0b			 
bd0b			.noadv:	 
bd0b			 
bd0b					if DEBUG_FORTH_DOT_WAIT 
bd0b							call next_page_prompt 
bd0b					endif	 
bd0b			; TODO this pop off the stack causes a crash. i dont know why 
bd0b			 
bd0b			 
bd0b			if DEBUG_FORTH_DOT 
bd0b				DMARK "DTh" 
bd0b f5				push af  
bd0c 3a 20 bd			ld a, (.dmark)  
bd0f 32 65 ee			ld (debug_mark),a  
bd12 3a 21 bd			ld a, (.dmark+1)  
bd15 32 66 ee			ld (debug_mark+1),a  
bd18 3a 22 bd			ld a, (.dmark+2)  
bd1b 32 67 ee			ld (debug_mark+2),a  
bd1e 18 03			jr .pastdmark  
bd20 ..			.dmark: db "DTh"  
bd23 f1			.pastdmark: pop af  
bd24			endm  
# End of macro DMARK
bd24				CALLMONITOR 
bd24 cd 6f ee			call debug_vector  
bd27				endm  
# End of macro CALLMONITOR
bd27			endif	 
bd27			 
bd27					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bd27 cd 42 9d			call macro_forth_dsp_pop 
bd2a				endm 
# End of macro FORTH_DSP_POP
bd2a			 
bd2a			if DEBUG_FORTH_DOT 
bd2a				DMARK "DTi" 
bd2a f5				push af  
bd2b 3a 3f bd			ld a, (.dmark)  
bd2e 32 65 ee			ld (debug_mark),a  
bd31 3a 40 bd			ld a, (.dmark+1)  
bd34 32 66 ee			ld (debug_mark+1),a  
bd37 3a 41 bd			ld a, (.dmark+2)  
bd3a 32 67 ee			ld (debug_mark+2),a  
bd3d 18 03			jr .pastdmark  
bd3f ..			.dmark: db "DTi"  
bd42 f1			.pastdmark: pop af  
bd43			endm  
# End of macro DMARK
bd43				CALLMONITOR 
bd43 cd 6f ee			call debug_vector  
bd46				endm  
# End of macro CALLMONITOR
bd46			endif	 
bd46			 
bd46			 
bd46					NEXTW 
bd46 c3 76 9e			jp macro_next 
bd49				endm 
# End of macro NEXTW
bd49			 
bd49			.CLS: 
bd49				CWHEAD .DRAW 33 "CLS" 3 WORD_FLAG_CODE 
bd49 35				db WORD_SYS_CORE+33             
bd4a 76 bd			dw .DRAW            
bd4c 04				db 3 + 1 
bd4d .. 00			db "CLS",0              
bd51				endm 
# End of macro CWHEAD
bd51			; | CLS ( -- ) Clear current frame buffer and set next print position to top left corner  | DONE 
bd51					if DEBUG_FORTH_WORDS_KEY 
bd51						DMARK "CLS" 
bd51 f5				push af  
bd52 3a 66 bd			ld a, (.dmark)  
bd55 32 65 ee			ld (debug_mark),a  
bd58 3a 67 bd			ld a, (.dmark+1)  
bd5b 32 66 ee			ld (debug_mark+1),a  
bd5e 3a 68 bd			ld a, (.dmark+2)  
bd61 32 67 ee			ld (debug_mark+2),a  
bd64 18 03			jr .pastdmark  
bd66 ..			.dmark: db "CLS"  
bd69 f1			.pastdmark: pop af  
bd6a			endm  
# End of macro DMARK
bd6a						CALLMONITOR 
bd6a cd 6f ee			call debug_vector  
bd6d				endm  
# End of macro CALLMONITOR
bd6d					endif 
bd6d cd bd 8a				call clear_display 
bd70 c3 84 be				jp .home		; and home cursor 
bd73					NEXTW 
bd73 c3 76 9e			jp macro_next 
bd76				endm 
# End of macro NEXTW
bd76			 
bd76			.DRAW: 
bd76				CWHEAD .DUMP 34 "DRAW" 4 WORD_FLAG_CODE 
bd76 36				db WORD_SYS_CORE+34             
bd77 a1 bd			dw .DUMP            
bd79 05				db 4 + 1 
bd7a .. 00			db "DRAW",0              
bd7f				endm 
# End of macro CWHEAD
bd7f			; | DRAW ( -- ) Draw contents of current frame buffer  | DONE 
bd7f					if DEBUG_FORTH_WORDS_KEY 
bd7f						DMARK "DRW" 
bd7f f5				push af  
bd80 3a 94 bd			ld a, (.dmark)  
bd83 32 65 ee			ld (debug_mark),a  
bd86 3a 95 bd			ld a, (.dmark+1)  
bd89 32 66 ee			ld (debug_mark+1),a  
bd8c 3a 96 bd			ld a, (.dmark+2)  
bd8f 32 67 ee			ld (debug_mark+2),a  
bd92 18 03			jr .pastdmark  
bd94 ..			.dmark: db "DRW"  
bd97 f1			.pastdmark: pop af  
bd98			endm  
# End of macro DMARK
bd98						CALLMONITOR 
bd98 cd 6f ee			call debug_vector  
bd9b				endm  
# End of macro CALLMONITOR
bd9b					endif 
bd9b cd e0 8a				call update_display 
bd9e					NEXTW 
bd9e c3 76 9e			jp macro_next 
bda1				endm 
# End of macro NEXTW
bda1			 
bda1			.DUMP: 
bda1				CWHEAD .CDUMP 35 "DUMP" 4 WORD_FLAG_CODE 
bda1 37				db WORD_SYS_CORE+35             
bda2 d9 bd			dw .CDUMP            
bda4 05				db 4 + 1 
bda5 .. 00			db "DUMP",0              
bdaa				endm 
# End of macro CWHEAD
bdaa			; | DUMP ( x -- ) With address x display dump   | DONE 
bdaa			; TODO pop address to use off of the stack 
bdaa					if DEBUG_FORTH_WORDS_KEY 
bdaa						DMARK "DUM" 
bdaa f5				push af  
bdab 3a bf bd			ld a, (.dmark)  
bdae 32 65 ee			ld (debug_mark),a  
bdb1 3a c0 bd			ld a, (.dmark+1)  
bdb4 32 66 ee			ld (debug_mark+1),a  
bdb7 3a c1 bd			ld a, (.dmark+2)  
bdba 32 67 ee			ld (debug_mark+2),a  
bdbd 18 03			jr .pastdmark  
bdbf ..			.dmark: db "DUM"  
bdc2 f1			.pastdmark: pop af  
bdc3			endm  
# End of macro DMARK
bdc3						CALLMONITOR 
bdc3 cd 6f ee			call debug_vector  
bdc6				endm  
# End of macro CALLMONITOR
bdc6					endif 
bdc6 cd bd 8a				call clear_display 
bdc9			 
bdc9					; get address 
bdc9			 
bdc9					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
bdc9 cd 8a 9c			call macro_dsp_valuehl 
bdcc				endm 
# End of macro FORTH_DSP_VALUEHL
bdcc				 
bdcc					; save it for cdump 
bdcc			 
bdcc 22 de e5				ld (os_cur_ptr),hl 
bdcf			 
bdcf					; destroy value TOS 
bdcf			 
bdcf					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bdcf cd 42 9d			call macro_forth_dsp_pop 
bdd2				endm 
# End of macro FORTH_DSP_POP
bdd2			 
bdd2 cd 05 99				call dumpcont	; skip old style of param parsing	 
bdd5 c9					ret			; TODO command causes end of remaining parsing so cant do: $0000 DUMP $8000 DUMP 
bdd6					NEXTW 
bdd6 c3 76 9e			jp macro_next 
bdd9				endm 
# End of macro NEXTW
bdd9			.CDUMP: 
bdd9				CWHEAD .DAT 36 "CDUMP" 5 WORD_FLAG_CODE 
bdd9 38				db WORD_SYS_CORE+36             
bdda 09 be			dw .DAT            
bddc 06				db 5 + 1 
bddd .. 00			db "CDUMP",0              
bde3				endm 
# End of macro CWHEAD
bde3			; | CDUMP ( -- ) Continue dump of memory from DUMP | DONE 
bde3					if DEBUG_FORTH_WORDS_KEY 
bde3						DMARK "CDP" 
bde3 f5				push af  
bde4 3a f8 bd			ld a, (.dmark)  
bde7 32 65 ee			ld (debug_mark),a  
bdea 3a f9 bd			ld a, (.dmark+1)  
bded 32 66 ee			ld (debug_mark+1),a  
bdf0 3a fa bd			ld a, (.dmark+2)  
bdf3 32 67 ee			ld (debug_mark+2),a  
bdf6 18 03			jr .pastdmark  
bdf8 ..			.dmark: db "CDP"  
bdfb f1			.pastdmark: pop af  
bdfc			endm  
# End of macro DMARK
bdfc						CALLMONITOR 
bdfc cd 6f ee			call debug_vector  
bdff				endm  
# End of macro CALLMONITOR
bdff					endif 
bdff cd bd 8a				call clear_display 
be02 cd 05 99				call dumpcont	 
be05 c9					ret			; TODO command causes end of remaining parsing so cant do: $0000 DUMP CDUMP $8000 DUMP 
be06					NEXTW 
be06 c3 76 9e			jp macro_next 
be09				endm 
# End of macro NEXTW
be09			 
be09			 
be09			 
be09			 
be09			.DAT: 
be09				CWHEAD .HOME 41 "AT" 2 WORD_FLAG_CODE 
be09 3d				db WORD_SYS_CORE+41             
be0a 5f be			dw .HOME            
be0c 03				db 2 + 1 
be0d .. 00			db "AT",0              
be10				endm 
# End of macro CWHEAD
be10			; | AT ( u1 u2 -- ) Set next output via . or emit at row u2 col u1 | DONE 
be10					if DEBUG_FORTH_WORDS_KEY 
be10						DMARK "AT." 
be10 f5				push af  
be11 3a 25 be			ld a, (.dmark)  
be14 32 65 ee			ld (debug_mark),a  
be17 3a 26 be			ld a, (.dmark+1)  
be1a 32 66 ee			ld (debug_mark+1),a  
be1d 3a 27 be			ld a, (.dmark+2)  
be20 32 67 ee			ld (debug_mark+2),a  
be23 18 03			jr .pastdmark  
be25 ..			.dmark: db "AT."  
be28 f1			.pastdmark: pop af  
be29			endm  
# End of macro DMARK
be29						CALLMONITOR 
be29 cd 6f ee			call debug_vector  
be2c				endm  
# End of macro CALLMONITOR
be2c					endif 
be2c					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
be2c cd 8a 9c			call macro_dsp_valuehl 
be2f				endm 
# End of macro FORTH_DSP_VALUEHL
be2f			 
be2f			 
be2f					; TODO save cursor row 
be2f 7d					ld a,l 
be30 fe 02				cp 2 
be32 20 04				jr nz, .crow3 
be34 3e 28				ld a, display_row_2 
be36 18 12				jr .ccol1 
be38 fe 03		.crow3:		cp 3 
be3a 20 04				jr nz, .crow4 
be3c 3e 50				ld a, display_row_3 
be3e 18 0a				jr .ccol1 
be40 fe 04		.crow4:		cp 4 
be42 20 04				jr nz, .crow1 
be44 3e 78				ld a, display_row_4 
be46 18 02				jr .ccol1 
be48 3e 00		.crow1:		ld a,display_row_1 
be4a f5			.ccol1:		push af			; got row offset 
be4b 6f					ld l,a 
be4c 26 00				ld h,0 
be4e					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
be4e cd 42 9d			call macro_forth_dsp_pop 
be51				endm 
# End of macro FORTH_DSP_POP
be51					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
be51 cd 8a 9c			call macro_dsp_valuehl 
be54				endm 
# End of macro FORTH_DSP_VALUEHL
be54					; TODO save cursor col 
be54 f1					pop af 
be55 85					add l		; add col offset 
be56 32 58 ea				ld (f_cursor_ptr), a 
be59					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
be59 cd 42 9d			call macro_forth_dsp_pop 
be5c				endm 
# End of macro FORTH_DSP_POP
be5c			 
be5c					; calculate  
be5c			 
be5c					NEXTW 
be5c c3 76 9e			jp macro_next 
be5f				endm 
# End of macro NEXTW
be5f			 
be5f			 
be5f			.HOME: 
be5f				CWHEAD .CR 45 "HOME" 4 WORD_FLAG_CODE 
be5f 41				db WORD_SYS_CORE+45             
be60 8c be			dw .CR            
be62 05				db 4 + 1 
be63 .. 00			db "HOME",0              
be68				endm 
# End of macro CWHEAD
be68			; | HOME ( -- ) Reset the current cursor for output to home | DONE 
be68					if DEBUG_FORTH_WORDS_KEY 
be68						DMARK "HOM" 
be68 f5				push af  
be69 3a 7d be			ld a, (.dmark)  
be6c 32 65 ee			ld (debug_mark),a  
be6f 3a 7e be			ld a, (.dmark+1)  
be72 32 66 ee			ld (debug_mark+1),a  
be75 3a 7f be			ld a, (.dmark+2)  
be78 32 67 ee			ld (debug_mark+2),a  
be7b 18 03			jr .pastdmark  
be7d ..			.dmark: db "HOM"  
be80 f1			.pastdmark: pop af  
be81			endm  
# End of macro DMARK
be81						CALLMONITOR 
be81 cd 6f ee			call debug_vector  
be84				endm  
# End of macro CALLMONITOR
be84					endif 
be84 3e 00		.home:		ld a, 0		; and home cursor 
be86 32 58 ea				ld (f_cursor_ptr), a 
be89					NEXTW 
be89 c3 76 9e			jp macro_next 
be8c				endm 
# End of macro NEXTW
be8c			 
be8c			 
be8c			.CR: 
be8c				CWHEAD .SPACE 50 "CR" 2 WORD_FLAG_CODE 
be8c 46				db WORD_SYS_CORE+50             
be8d c7 be			dw .SPACE            
be8f 03				db 2 + 1 
be90 .. 00			db "CR",0              
be93				endm 
# End of macro CWHEAD
be93			; | CR (  -- s ) Push CR/LF pair onto the stack as a string  | DONE 
be93					if DEBUG_FORTH_WORDS_KEY 
be93						DMARK "CR." 
be93 f5				push af  
be94 3a a8 be			ld a, (.dmark)  
be97 32 65 ee			ld (debug_mark),a  
be9a 3a a9 be			ld a, (.dmark+1)  
be9d 32 66 ee			ld (debug_mark+1),a  
bea0 3a aa be			ld a, (.dmark+2)  
bea3 32 67 ee			ld (debug_mark+2),a  
bea6 18 03			jr .pastdmark  
bea8 ..			.dmark: db "CR."  
beab f1			.pastdmark: pop af  
beac			endm  
# End of macro DMARK
beac						CALLMONITOR 
beac cd 6f ee			call debug_vector  
beaf				endm  
# End of macro CALLMONITOR
beaf					endif 
beaf 3e 0d				ld a, 13 
beb1 32 bb e2				ld (scratch),a 
beb4 3e 0a				ld a, 10 
beb6 32 bc e2				ld (scratch+1),a 
beb9 3e 00				ld a, 0 
bebb 32 bd e2				ld (scratch+2),a 
bebe 21 bb e2				ld hl, scratch 
bec1 cd f3 9a				call forth_push_str 
bec4					 
bec4				       NEXTW 
bec4 c3 76 9e			jp macro_next 
bec7				endm 
# End of macro NEXTW
bec7			.SPACE: 
bec7				CWHEAD .SPACES 50 "BL" 2 WORD_FLAG_CODE 
bec7 46				db WORD_SYS_CORE+50             
bec8 fd be			dw .SPACES            
beca 03				db 2 + 1 
becb .. 00			db "BL",0              
bece				endm 
# End of macro CWHEAD
bece			; | BL (  -- c ) Push the value of space onto the stack as a string  | DONE 
bece					if DEBUG_FORTH_WORDS_KEY 
bece						DMARK "BL." 
bece f5				push af  
becf 3a e3 be			ld a, (.dmark)  
bed2 32 65 ee			ld (debug_mark),a  
bed5 3a e4 be			ld a, (.dmark+1)  
bed8 32 66 ee			ld (debug_mark+1),a  
bedb 3a e5 be			ld a, (.dmark+2)  
bede 32 67 ee			ld (debug_mark+2),a  
bee1 18 03			jr .pastdmark  
bee3 ..			.dmark: db "BL."  
bee6 f1			.pastdmark: pop af  
bee7			endm  
# End of macro DMARK
bee7						CALLMONITOR 
bee7 cd 6f ee			call debug_vector  
beea				endm  
# End of macro CALLMONITOR
beea					endif 
beea 3e 20				ld a, " " 
beec 32 bb e2				ld (scratch),a 
beef 3e 00				ld a, 0 
bef1 32 bc e2				ld (scratch+1),a 
bef4 21 bb e2				ld hl, scratch 
bef7 cd f3 9a				call forth_push_str 
befa					 
befa				       NEXTW 
befa c3 76 9e			jp macro_next 
befd				endm 
# End of macro NEXTW
befd			 
befd			;.blstr: db " ", 0 
befd			 
befd			.SPACES: 
befd				CWHEAD .SCROLL 51 "SPACES" 6 WORD_FLAG_CODE 
befd 47				db WORD_SYS_CORE+51             
befe 98 bf			dw .SCROLL            
bf00 07				db 6 + 1 
bf01 .. 00			db "SPACES",0              
bf08				endm 
# End of macro CWHEAD
bf08			; | SPACES ( u -- str ) A string of u spaces is pushed onto the stack | DONE 
bf08					if DEBUG_FORTH_WORDS_KEY 
bf08						DMARK "SPS" 
bf08 f5				push af  
bf09 3a 1d bf			ld a, (.dmark)  
bf0c 32 65 ee			ld (debug_mark),a  
bf0f 3a 1e bf			ld a, (.dmark+1)  
bf12 32 66 ee			ld (debug_mark+1),a  
bf15 3a 1f bf			ld a, (.dmark+2)  
bf18 32 67 ee			ld (debug_mark+2),a  
bf1b 18 03			jr .pastdmark  
bf1d ..			.dmark: db "SPS"  
bf20 f1			.pastdmark: pop af  
bf21			endm  
# End of macro DMARK
bf21						CALLMONITOR 
bf21 cd 6f ee			call debug_vector  
bf24				endm  
# End of macro CALLMONITOR
bf24					endif 
bf24			 
bf24			 
bf24					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
bf24 cd 8a 9c			call macro_dsp_valuehl 
bf27				endm 
# End of macro FORTH_DSP_VALUEHL
bf27			 
bf27 e5					push hl    ; u 
bf28					if DEBUG_FORTH_WORDS 
bf28						DMARK "SPA" 
bf28 f5				push af  
bf29 3a 3d bf			ld a, (.dmark)  
bf2c 32 65 ee			ld (debug_mark),a  
bf2f 3a 3e bf			ld a, (.dmark+1)  
bf32 32 66 ee			ld (debug_mark+1),a  
bf35 3a 3f bf			ld a, (.dmark+2)  
bf38 32 67 ee			ld (debug_mark+2),a  
bf3b 18 03			jr .pastdmark  
bf3d ..			.dmark: db "SPA"  
bf40 f1			.pastdmark: pop af  
bf41			endm  
# End of macro DMARK
bf41						CALLMONITOR 
bf41 cd 6f ee			call debug_vector  
bf44				endm  
# End of macro CALLMONITOR
bf44					endif 
bf44			 
bf44					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bf44 cd 42 9d			call macro_forth_dsp_pop 
bf47				endm 
# End of macro FORTH_DSP_POP
bf47 e1					pop hl 
bf48 0e 00				ld c, 0 
bf4a 45					ld b, l 
bf4b 21 bb e2				ld hl, scratch  
bf4e			 
bf4e					if DEBUG_FORTH_WORDS 
bf4e						DMARK "SP2" 
bf4e f5				push af  
bf4f 3a 63 bf			ld a, (.dmark)  
bf52 32 65 ee			ld (debug_mark),a  
bf55 3a 64 bf			ld a, (.dmark+1)  
bf58 32 66 ee			ld (debug_mark+1),a  
bf5b 3a 65 bf			ld a, (.dmark+2)  
bf5e 32 67 ee			ld (debug_mark+2),a  
bf61 18 03			jr .pastdmark  
bf63 ..			.dmark: db "SP2"  
bf66 f1			.pastdmark: pop af  
bf67			endm  
# End of macro DMARK
bf67						CALLMONITOR 
bf67 cd 6f ee			call debug_vector  
bf6a				endm  
# End of macro CALLMONITOR
bf6a					endif 
bf6a 3e 20				ld a, ' ' 
bf6c			.spaces1:	 
bf6c 77					ld (hl),a 
bf6d 23					inc hl 
bf6e					 
bf6e 10 fc				djnz .spaces1 
bf70 3e 00				ld a,0 
bf72 77					ld (hl),a 
bf73 21 bb e2				ld hl, scratch 
bf76					if DEBUG_FORTH_WORDS 
bf76						DMARK "SP3" 
bf76 f5				push af  
bf77 3a 8b bf			ld a, (.dmark)  
bf7a 32 65 ee			ld (debug_mark),a  
bf7d 3a 8c bf			ld a, (.dmark+1)  
bf80 32 66 ee			ld (debug_mark+1),a  
bf83 3a 8d bf			ld a, (.dmark+2)  
bf86 32 67 ee			ld (debug_mark+2),a  
bf89 18 03			jr .pastdmark  
bf8b ..			.dmark: db "SP3"  
bf8e f1			.pastdmark: pop af  
bf8f			endm  
# End of macro DMARK
bf8f						CALLMONITOR 
bf8f cd 6f ee			call debug_vector  
bf92				endm  
# End of macro CALLMONITOR
bf92					endif 
bf92 cd f3 9a				call forth_push_str 
bf95			 
bf95				       NEXTW 
bf95 c3 76 9e			jp macro_next 
bf98				endm 
# End of macro NEXTW
bf98			 
bf98			 
bf98			 
bf98			.SCROLL: 
bf98				CWHEAD .SCROLLD 63 "SCROLL" 6 WORD_FLAG_CODE 
bf98 53				db WORD_SYS_CORE+63             
bf99 c5 bf			dw .SCROLLD            
bf9b 07				db 6 + 1 
bf9c .. 00			db "SCROLL",0              
bfa3				endm 
# End of macro CWHEAD
bfa3			; | SCROLL ( -- ) Scroll up one line - next write will update if required | DONE 
bfa3					if DEBUG_FORTH_WORDS_KEY 
bfa3						DMARK "SCR" 
bfa3 f5				push af  
bfa4 3a b8 bf			ld a, (.dmark)  
bfa7 32 65 ee			ld (debug_mark),a  
bfaa 3a b9 bf			ld a, (.dmark+1)  
bfad 32 66 ee			ld (debug_mark+1),a  
bfb0 3a ba bf			ld a, (.dmark+2)  
bfb3 32 67 ee			ld (debug_mark+2),a  
bfb6 18 03			jr .pastdmark  
bfb8 ..			.dmark: db "SCR"  
bfbb f1			.pastdmark: pop af  
bfbc			endm  
# End of macro DMARK
bfbc						CALLMONITOR 
bfbc cd 6f ee			call debug_vector  
bfbf				endm  
# End of macro CALLMONITOR
bfbf					endif 
bfbf			 
bfbf cd 7f 8a			call scroll_up 
bfc2			;	call update_display 
bfc2			 
bfc2					NEXTW 
bfc2 c3 76 9e			jp macro_next 
bfc5				endm 
# End of macro NEXTW
bfc5			 
bfc5			 
bfc5			 
bfc5			;		; get dir 
bfc5			; 
bfc5			;		FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
bfc5			; 
bfc5			;		push hl 
bfc5			; 
bfc5			;		; destroy value TOS 
bfc5			; 
bfc5			;		FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bfc5			; 
bfc5			;		; get count 
bfc5			; 
bfc5			;		FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
bfc5			; 
bfc5			;		push hl 
bfc5			; 
bfc5			;		; destroy value TOS 
bfc5			; 
bfc5			;		FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bfc5			; 
bfc5			;		; one value on hl get other one back 
bfc5			; 
bfc5			;		pop bc    ; count 
bfc5			; 
bfc5			;		pop de   ; dir 
bfc5			; 
bfc5			; 
bfc5			;		ld b, c 
bfc5			; 
bfc5			;.scrolldir:     push bc 
bfc5			;		push de 
bfc5			; 
bfc5			;		ld a, 0 
bfc5			;		cp e 
bfc5			;		jr z, .scrollup  
bfc5			;		call scroll_down 
bfc5			;		jr .scrollnext 
bfc5			;.scrollup:	call scroll_up 
bfc5			; 
bfc5			;		 
bfc5			;.scrollnext: 
bfc5			;		pop de 
bfc5			;		pop bc 
bfc5			;		djnz .scrolldir 
bfc5			; 
bfc5			; 
bfc5			; 
bfc5			; 
bfc5			; 
bfc5			;		NEXTW 
bfc5			 
bfc5			.SCROLLD: 
bfc5				CWHEAD .ATQ 63 "SCROLLD" 7 WORD_FLAG_CODE 
bfc5 53				db WORD_SYS_CORE+63             
bfc6 f3 bf			dw .ATQ            
bfc8 08				db 7 + 1 
bfc9 .. 00			db "SCROLLD",0              
bfd1				endm 
# End of macro CWHEAD
bfd1			; | SCROLLD ( -- ) Scroll down one line - next write will update if required | TO DO 
bfd1					if DEBUG_FORTH_WORDS_KEY 
bfd1						DMARK "SCD" 
bfd1 f5				push af  
bfd2 3a e6 bf			ld a, (.dmark)  
bfd5 32 65 ee			ld (debug_mark),a  
bfd8 3a e7 bf			ld a, (.dmark+1)  
bfdb 32 66 ee			ld (debug_mark+1),a  
bfde 3a e8 bf			ld a, (.dmark+2)  
bfe1 32 67 ee			ld (debug_mark+2),a  
bfe4 18 03			jr .pastdmark  
bfe6 ..			.dmark: db "SCD"  
bfe9 f1			.pastdmark: pop af  
bfea			endm  
# End of macro DMARK
bfea						CALLMONITOR 
bfea cd 6f ee			call debug_vector  
bfed				endm  
# End of macro CALLMONITOR
bfed					endif 
bfed			 
bfed cd a3 8a			call scroll_down 
bff0			;	call update_display 
bff0			 
bff0					NEXTW 
bff0 c3 76 9e			jp macro_next 
bff3				endm 
# End of macro NEXTW
bff3			 
bff3			 
bff3			.ATQ: 
bff3				CWHEAD .AUTODSP 78 "AT@" 3 WORD_FLAG_CODE 
bff3 62				db WORD_SYS_CORE+78             
bff4 51 c0			dw .AUTODSP            
bff6 04				db 3 + 1 
bff7 .. 00			db "AT@",0              
bffb				endm 
# End of macro CWHEAD
bffb			; | AT@ ( u1 u2 -- n ) Push to stack ASCII value at row u2 col u1 | DONE 
bffb					if DEBUG_FORTH_WORDS_KEY 
bffb						DMARK "ATA" 
bffb f5				push af  
bffc 3a 10 c0			ld a, (.dmark)  
bfff 32 65 ee			ld (debug_mark),a  
c002 3a 11 c0			ld a, (.dmark+1)  
c005 32 66 ee			ld (debug_mark+1),a  
c008 3a 12 c0			ld a, (.dmark+2)  
c00b 32 67 ee			ld (debug_mark+2),a  
c00e 18 03			jr .pastdmark  
c010 ..			.dmark: db "ATA"  
c013 f1			.pastdmark: pop af  
c014			endm  
# End of macro DMARK
c014						CALLMONITOR 
c014 cd 6f ee			call debug_vector  
c017				endm  
# End of macro CALLMONITOR
c017					endif 
c017			 
c017			 
c017					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
c017 cd 8a 9c			call macro_dsp_valuehl 
c01a				endm 
# End of macro FORTH_DSP_VALUEHL
c01a			 
c01a					; TODO save cursor row 
c01a 7d					ld a,l 
c01b fe 02				cp 2 
c01d 20 04				jr nz, .crow3aq 
c01f 3e 28				ld a, display_row_2 
c021 18 12				jr .ccol1aq 
c023 fe 03		.crow3aq:		cp 3 
c025 20 04				jr nz, .crow4aq 
c027 3e 50				ld a, display_row_3 
c029 18 0a				jr .ccol1aq 
c02b fe 04		.crow4aq:		cp 4 
c02d 20 04				jr nz, .crow1aq 
c02f 3e 78				ld a, display_row_4 
c031 18 02				jr .ccol1aq 
c033 3e 00		.crow1aq:		ld a,display_row_1 
c035 f5			.ccol1aq:		push af			; got row offset 
c036 6f					ld l,a 
c037 26 00				ld h,0 
c039					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c039 cd 42 9d			call macro_forth_dsp_pop 
c03c				endm 
# End of macro FORTH_DSP_POP
c03c					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
c03c cd 8a 9c			call macro_dsp_valuehl 
c03f				endm 
# End of macro FORTH_DSP_VALUEHL
c03f					; TODO save cursor col 
c03f f1					pop af 
c040 85					add l		; add col offset 
c041			 
c041					; add current frame buffer address 
c041 2a c6 eb				ld hl, (display_fb_active) 
c044 cd ea 8c				call addatohl 
c047			 
c047			 
c047			 
c047			 
c047					; get char frame buffer location offset in hl 
c047			 
c047 7e					ld a,(hl) 
c048 26 00				ld h, 0 
c04a 6f					ld l, a 
c04b			 
c04b cd 85 9a				call forth_push_numhl 
c04e			 
c04e			 
c04e					NEXTW 
c04e c3 76 9e			jp macro_next 
c051				endm 
# End of macro NEXTW
c051			 
c051			.AUTODSP: 
c051				CWHEAD .MENU 79 "ADSP" 4 WORD_FLAG_CODE 
c051 63				db WORD_SYS_CORE+79             
c052 67 c0			dw .MENU            
c054 05				db 4 + 1 
c055 .. 00			db "ADSP",0              
c05a				endm 
# End of macro CWHEAD
c05a			; | ADSP ( u1 --  ) Enable/Disable Auto screen updates (SLOW). | DONE 
c05a			; | | If off, use DRAW to refresh. Default is on. $0003 will enable direct screen writes (TODO)  
c05a			 
c05a					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
c05a cd 8a 9c			call macro_dsp_valuehl 
c05d				endm 
# End of macro FORTH_DSP_VALUEHL
c05d			 
c05d			;		push hl 
c05d			 
c05d					; destroy value TOS 
c05d			 
c05d					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c05d cd 42 9d			call macro_forth_dsp_pop 
c060				endm 
# End of macro FORTH_DSP_POP
c060			 
c060			;		pop hl 
c060			 
c060 7d					ld a,l 
c061 32 36 ea				ld (cli_autodisplay), a 
c064				       NEXTW 
c064 c3 76 9e			jp macro_next 
c067				endm 
# End of macro NEXTW
c067			 
c067			.MENU: 
c067				CWHEAD .ENDDISPLAY 92 "MENU" 4 WORD_FLAG_CODE 
c067 70				db WORD_SYS_CORE+92             
c068 10 c1			dw .ENDDISPLAY            
c06a 05				db 4 + 1 
c06b .. 00			db "MENU",0              
c070				endm 
# End of macro CWHEAD
c070			; | MENU ( u1....ux n -- n ) Create a menu. n is the number of menu items on stack. Push number selection to TOS | DONE 
c070			 
c070			;		; get number of items on the stack 
c070			; 
c070				 
c070					FORTH_DSP_VALUEHL 
c070 cd 8a 9c			call macro_dsp_valuehl 
c073				endm 
# End of macro FORTH_DSP_VALUEHL
c073				 
c073					if DEBUG_FORTH_WORDS_KEY 
c073						DMARK "MNU" 
c073 f5				push af  
c074 3a 88 c0			ld a, (.dmark)  
c077 32 65 ee			ld (debug_mark),a  
c07a 3a 89 c0			ld a, (.dmark+1)  
c07d 32 66 ee			ld (debug_mark+1),a  
c080 3a 8a c0			ld a, (.dmark+2)  
c083 32 67 ee			ld (debug_mark+2),a  
c086 18 03			jr .pastdmark  
c088 ..			.dmark: db "MNU"  
c08b f1			.pastdmark: pop af  
c08c			endm  
# End of macro DMARK
c08c						CALLMONITOR 
c08c cd 6f ee			call debug_vector  
c08f				endm  
# End of macro CALLMONITOR
c08f					endif 
c08f			 
c08f 45					ld b, l	 
c090 05					dec b 
c091			 
c091					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c091 cd 42 9d			call macro_forth_dsp_pop 
c094				endm 
# End of macro FORTH_DSP_POP
c094			 
c094			 
c094					; go directly through the stack to pluck out the string pointers and build an array 
c094			 
c094			;		FORTH_DSP 
c094			 
c094					; hl contains top most stack item 
c094				 
c094 11 bb e2				ld de, scratch 
c097			 
c097			.mbuild: 
c097			 
c097					FORTH_DSP_VALUEHL 
c097 cd 8a 9c			call macro_dsp_valuehl 
c09a				endm 
# End of macro FORTH_DSP_VALUEHL
c09a			 
c09a					if DEBUG_FORTH_WORDS 
c09a						DMARK "MN3" 
c09a f5				push af  
c09b 3a af c0			ld a, (.dmark)  
c09e 32 65 ee			ld (debug_mark),a  
c0a1 3a b0 c0			ld a, (.dmark+1)  
c0a4 32 66 ee			ld (debug_mark+1),a  
c0a7 3a b1 c0			ld a, (.dmark+2)  
c0aa 32 67 ee			ld (debug_mark+2),a  
c0ad 18 03			jr .pastdmark  
c0af ..			.dmark: db "MN3"  
c0b2 f1			.pastdmark: pop af  
c0b3			endm  
# End of macro DMARK
c0b3						CALLMONITOR 
c0b3 cd 6f ee			call debug_vector  
c0b6				endm  
# End of macro CALLMONITOR
c0b6					endif 
c0b6 eb					ex de, hl 
c0b7 73					ld (hl), e 
c0b8 23					inc hl 
c0b9 72					ld (hl), d 
c0ba 23					inc hl 
c0bb eb					ex de, hl 
c0bc			 
c0bc					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c0bc cd 42 9d			call macro_forth_dsp_pop 
c0bf				endm 
# End of macro FORTH_DSP_POP
c0bf			 
c0bf 10 d6				djnz .mbuild 
c0c1			 
c0c1					; done add term 
c0c1			 
c0c1 eb					ex de, hl 
c0c2 36 00				ld (hl), 0 
c0c4 23					inc hl 
c0c5 36 00				ld (hl), 0 
c0c7			 
c0c7				 
c0c7					 
c0c7 21 bb e2				ld hl, scratch 
c0ca			 
c0ca					if DEBUG_FORTH_WORDS 
c0ca						DMARK "MNx" 
c0ca f5				push af  
c0cb 3a df c0			ld a, (.dmark)  
c0ce 32 65 ee			ld (debug_mark),a  
c0d1 3a e0 c0			ld a, (.dmark+1)  
c0d4 32 66 ee			ld (debug_mark+1),a  
c0d7 3a e1 c0			ld a, (.dmark+2)  
c0da 32 67 ee			ld (debug_mark+2),a  
c0dd 18 03			jr .pastdmark  
c0df ..			.dmark: db "MNx"  
c0e2 f1			.pastdmark: pop af  
c0e3			endm  
# End of macro DMARK
c0e3						CALLMONITOR 
c0e3 cd 6f ee			call debug_vector  
c0e6				endm  
# End of macro CALLMONITOR
c0e6					endif 
c0e6			 
c0e6			 
c0e6			 
c0e6 3e 00				ld a, 0 
c0e8 cd ee 8a				call menu 
c0eb			 
c0eb			 
c0eb 6f					ld l, a 
c0ec 26 00				ld h, 0 
c0ee			 
c0ee					if DEBUG_FORTH_WORDS 
c0ee						DMARK "MNr" 
c0ee f5				push af  
c0ef 3a 03 c1			ld a, (.dmark)  
c0f2 32 65 ee			ld (debug_mark),a  
c0f5 3a 04 c1			ld a, (.dmark+1)  
c0f8 32 66 ee			ld (debug_mark+1),a  
c0fb 3a 05 c1			ld a, (.dmark+2)  
c0fe 32 67 ee			ld (debug_mark+2),a  
c101 18 03			jr .pastdmark  
c103 ..			.dmark: db "MNr"  
c106 f1			.pastdmark: pop af  
c107			endm  
# End of macro DMARK
c107						CALLMONITOR 
c107 cd 6f ee			call debug_vector  
c10a				endm  
# End of macro CALLMONITOR
c10a					endif 
c10a			 
c10a cd 85 9a				call forth_push_numhl 
c10d			 
c10d			 
c10d			 
c10d			 
c10d				       NEXTW 
c10d c3 76 9e			jp macro_next 
c110				endm 
# End of macro NEXTW
c110			 
c110			 
c110			.ENDDISPLAY: 
c110			 
c110			; eof 
# End of file forth_words_display.asm
c110			include "forth_words_str.asm" 
c110			 
c110			; | ## String Words 
c110			 
c110			.SPLIT:   
c110			 
c110				CWHEAD .PTR 52 "SPLIT" 5 WORD_FLAG_CODE 
c110 48				db WORD_SYS_CORE+52             
c111 03 c2			dw .PTR            
c113 06				db 5 + 1 
c114 .. 00			db "SPLIT",0              
c11a				endm 
# End of macro CWHEAD
c11a			; | SPLIT ( s d -- s s...sn c ) Using delimter d, add strings found in s to stack pushing item count c | TODO 
c11a					if DEBUG_FORTH_WORDS_KEY 
c11a						DMARK "SPT" 
c11a f5				push af  
c11b 3a 2f c1			ld a, (.dmark)  
c11e 32 65 ee			ld (debug_mark),a  
c121 3a 30 c1			ld a, (.dmark+1)  
c124 32 66 ee			ld (debug_mark+1),a  
c127 3a 31 c1			ld a, (.dmark+2)  
c12a 32 67 ee			ld (debug_mark+2),a  
c12d 18 03			jr .pastdmark  
c12f ..			.dmark: db "SPT"  
c132 f1			.pastdmark: pop af  
c133			endm  
# End of macro DMARK
c133						CALLMONITOR 
c133 cd 6f ee			call debug_vector  
c136				endm  
# End of macro CALLMONITOR
c136					endif 
c136			 
c136					; get delim 
c136					FORTH_DSP_VALUEHL 
c136 cd 8a 9c			call macro_dsp_valuehl 
c139				endm 
# End of macro FORTH_DSP_VALUEHL
c139			 
c139					FORTH_DSP_POP 
c139 cd 42 9d			call macro_forth_dsp_pop 
c13c				endm 
# End of macro FORTH_DSP_POP
c13c					 
c13c			 
c13c 45					ld b, l    ; move delim to b 
c13d 0e 01				ld c, 1   ; count of poritions 
c13f			 
c13f c5					push bc 
c140			 
c140					if DEBUG_FORTH_WORDS 
c140						DMARK "SPa" 
c140 f5				push af  
c141 3a 55 c1			ld a, (.dmark)  
c144 32 65 ee			ld (debug_mark),a  
c147 3a 56 c1			ld a, (.dmark+1)  
c14a 32 66 ee			ld (debug_mark+1),a  
c14d 3a 57 c1			ld a, (.dmark+2)  
c150 32 67 ee			ld (debug_mark+2),a  
c153 18 03			jr .pastdmark  
c155 ..			.dmark: db "SPa"  
c158 f1			.pastdmark: pop af  
c159			endm  
# End of macro DMARK
c159						CALLMONITOR 
c159 cd 6f ee			call debug_vector  
c15c				endm  
# End of macro CALLMONITOR
c15c					endif 
c15c					; get pointer to string to chop up 
c15c					FORTH_DSP_VALUEHL 
c15c cd 8a 9c			call macro_dsp_valuehl 
c15f				endm 
# End of macro FORTH_DSP_VALUEHL
c15f			 
c15f			;		push hl 
c15f 11 bb e2				ld de, scratch 
c162			.spllop: 
c162 c1					pop bc 
c163 c5					push bc 
c164			;		pop hl 
c164					if DEBUG_FORTH_WORDS 
c164						DMARK "SPl" 
c164 f5				push af  
c165 3a 79 c1			ld a, (.dmark)  
c168 32 65 ee			ld (debug_mark),a  
c16b 3a 7a c1			ld a, (.dmark+1)  
c16e 32 66 ee			ld (debug_mark+1),a  
c171 3a 7b c1			ld a, (.dmark+2)  
c174 32 67 ee			ld (debug_mark+2),a  
c177 18 03			jr .pastdmark  
c179 ..			.dmark: db "SPl"  
c17c f1			.pastdmark: pop af  
c17d			endm  
# End of macro DMARK
c17d						CALLMONITOR 
c17d cd 6f ee			call debug_vector  
c180				endm  
# End of macro CALLMONITOR
c180					endif 
c180 7e					ld a, (hl) 
c181 b8					cp b 
c182 28 08				jr z, .splnxt 
c184 fe 00				cp 0 
c186 28 35				jr z, .splend 
c188 ed a0				ldi 
c18a 18 d6				jr .spllop 
c18c			 
c18c					; hit dlim 
c18c			 
c18c			.splnxt: 
c18c					if DEBUG_FORTH_WORDS 
c18c						DMARK "SPx" 
c18c f5				push af  
c18d 3a a1 c1			ld a, (.dmark)  
c190 32 65 ee			ld (debug_mark),a  
c193 3a a2 c1			ld a, (.dmark+1)  
c196 32 66 ee			ld (debug_mark+1),a  
c199 3a a3 c1			ld a, (.dmark+2)  
c19c 32 67 ee			ld (debug_mark+2),a  
c19f 18 03			jr .pastdmark  
c1a1 ..			.dmark: db "SPx"  
c1a4 f1			.pastdmark: pop af  
c1a5			endm  
# End of macro DMARK
c1a5						CALLMONITOR 
c1a5 cd 6f ee			call debug_vector  
c1a8				endm  
# End of macro CALLMONITOR
c1a8					endif 
c1a8 3e 00				ld a, 0 
c1aa 12					ld (de), a 
c1ab eb					ex de, hl 
c1ac e5					push hl 
c1ad 21 bb e2				ld hl, scratch 
c1b0 cd f3 9a				call forth_push_str 
c1b3 e1					pop hl 
c1b4 eb					ex de, hl 
c1b5 c1					pop bc 
c1b6 0c					inc c 
c1b7 c5					push bc 
c1b8 11 bb e2				ld de, scratch 
c1bb 18 a5				jr .spllop 
c1bd			 
c1bd			.splend:		 
c1bd					if DEBUG_FORTH_WORDS 
c1bd						DMARK "SPe" 
c1bd f5				push af  
c1be 3a d2 c1			ld a, (.dmark)  
c1c1 32 65 ee			ld (debug_mark),a  
c1c4 3a d3 c1			ld a, (.dmark+1)  
c1c7 32 66 ee			ld (debug_mark+1),a  
c1ca 3a d4 c1			ld a, (.dmark+2)  
c1cd 32 67 ee			ld (debug_mark+2),a  
c1d0 18 03			jr .pastdmark  
c1d2 ..			.dmark: db "SPe"  
c1d5 f1			.pastdmark: pop af  
c1d6			endm  
# End of macro DMARK
c1d6						CALLMONITOR 
c1d6 cd 6f ee			call debug_vector  
c1d9				endm  
# End of macro CALLMONITOR
c1d9					endif 
c1d9 12					ld (de), a 
c1da eb					ex de, hl 
c1db			;		push hl 
c1db cd f3 9a				call forth_push_str 
c1de					 
c1de					if DEBUG_FORTH_WORDS 
c1de						DMARK "SPc" 
c1de f5				push af  
c1df 3a f3 c1			ld a, (.dmark)  
c1e2 32 65 ee			ld (debug_mark),a  
c1e5 3a f4 c1			ld a, (.dmark+1)  
c1e8 32 66 ee			ld (debug_mark+1),a  
c1eb 3a f5 c1			ld a, (.dmark+2)  
c1ee 32 67 ee			ld (debug_mark+2),a  
c1f1 18 03			jr .pastdmark  
c1f3 ..			.dmark: db "SPc"  
c1f6 f1			.pastdmark: pop af  
c1f7			endm  
# End of macro DMARK
c1f7						CALLMONITOR 
c1f7 cd 6f ee			call debug_vector  
c1fa				endm  
# End of macro CALLMONITOR
c1fa					endif 
c1fa			 
c1fa e1					pop hl    ; get counter from bc which has been push 
c1fb 26 00				ld h, 0 
c1fd			;		ld l, c 
c1fd cd 85 9a				call forth_push_numhl 
c200			 
c200			 
c200				NEXTW 
c200 c3 76 9e			jp macro_next 
c203				endm 
# End of macro NEXTW
c203			.PTR:   
c203			 
c203				CWHEAD .STYPE 52 "PTR" 3 WORD_FLAG_CODE 
c203 48				db WORD_SYS_CORE+52             
c204 30 c2			dw .STYPE            
c206 04				db 3 + 1 
c207 .. 00			db "PTR",0              
c20b				endm 
# End of macro CWHEAD
c20b			; | PTR ( -- addr ) Low level push pointer to the value on TOS | DONE 
c20b			; | | If a string will give the address of the string without dropping it. Handy for direct string access 
c20b			; | | If a number can then use 2@ and 2! for direct value update without using stack words  
c20b			 
c20b					if DEBUG_FORTH_WORDS_KEY 
c20b						DMARK "PTR" 
c20b f5				push af  
c20c 3a 20 c2			ld a, (.dmark)  
c20f 32 65 ee			ld (debug_mark),a  
c212 3a 21 c2			ld a, (.dmark+1)  
c215 32 66 ee			ld (debug_mark+1),a  
c218 3a 22 c2			ld a, (.dmark+2)  
c21b 32 67 ee			ld (debug_mark+2),a  
c21e 18 03			jr .pastdmark  
c220 ..			.dmark: db "PTR"  
c223 f1			.pastdmark: pop af  
c224			endm  
# End of macro DMARK
c224						CALLMONITOR 
c224 cd 6f ee			call debug_vector  
c227				endm  
# End of macro CALLMONITOR
c227					endif 
c227					FORTH_DSP_VALUEHL 
c227 cd 8a 9c			call macro_dsp_valuehl 
c22a				endm 
# End of macro FORTH_DSP_VALUEHL
c22a cd 85 9a				call forth_push_numhl 
c22d			 
c22d			 
c22d					NEXTW 
c22d c3 76 9e			jp macro_next 
c230				endm 
# End of macro NEXTW
c230			.STYPE: 
c230				CWHEAD .UPPER 52 "STYPE" 5 WORD_FLAG_CODE 
c230 48				db WORD_SYS_CORE+52             
c231 7f c2			dw .UPPER            
c233 06				db 5 + 1 
c234 .. 00			db "STYPE",0              
c23a				endm 
# End of macro CWHEAD
c23a			; | STYPE ( u -- u type ) Push type of value on TOS - 's' string, 'i' integer...   | DONE 
c23a					if DEBUG_FORTH_WORDS_KEY 
c23a						DMARK "STY" 
c23a f5				push af  
c23b 3a 4f c2			ld a, (.dmark)  
c23e 32 65 ee			ld (debug_mark),a  
c241 3a 50 c2			ld a, (.dmark+1)  
c244 32 66 ee			ld (debug_mark+1),a  
c247 3a 51 c2			ld a, (.dmark+2)  
c24a 32 67 ee			ld (debug_mark+2),a  
c24d 18 03			jr .pastdmark  
c24f ..			.dmark: db "STY"  
c252 f1			.pastdmark: pop af  
c253			endm  
# End of macro DMARK
c253						CALLMONITOR 
c253 cd 6f ee			call debug_vector  
c256				endm  
# End of macro CALLMONITOR
c256					endif 
c256					FORTH_DSP 
c256 cd 50 9c			call macro_forth_dsp 
c259				endm 
# End of macro FORTH_DSP
c259					;v5 FORTH_DSP_VALUE 
c259			 
c259 7e					ld a, (hl) 
c25a			 
c25a f5					push af 
c25b			 
c25b			; Dont destroy TOS		FORTH_DSP_POP 
c25b			 
c25b f1					pop af 
c25c			 
c25c fe 01				cp DS_TYPE_STR 
c25e 28 09				jr z, .typestr 
c260			 
c260 fe 02				cp DS_TYPE_INUM 
c262 28 0a				jr z, .typeinum 
c264			 
c264 21 7d c2				ld hl, .tna 
c267 18 0a				jr .tpush 
c269			 
c269 21 79 c2		.typestr:	ld hl, .tstr 
c26c 18 05				jr .tpush 
c26e 21 7b c2		.typeinum:	ld hl, .tinum 
c271 18 00				jr .tpush 
c273			 
c273			.tpush: 
c273			 
c273 cd f3 9a				call forth_push_str 
c276			 
c276					NEXTW 
c276 c3 76 9e			jp macro_next 
c279				endm 
# End of macro NEXTW
c279 .. 00		.tstr:	db "s",0 
c27b .. 00		.tinum:  db "i",0 
c27d .. 00		.tna:   db "?", 0 
c27f			 
c27f			 
c27f			.UPPER: 
c27f				CWHEAD .LOWER 52 "UPPER" 5 WORD_FLAG_CODE 
c27f 48				db WORD_SYS_CORE+52             
c280 ba c2			dw .LOWER            
c282 06				db 5 + 1 
c283 .. 00			db "UPPER",0              
c289				endm 
# End of macro CWHEAD
c289			; | UPPER ( s -- s ) Upper case string s  | DONE 
c289					if DEBUG_FORTH_WORDS_KEY 
c289						DMARK "UPR" 
c289 f5				push af  
c28a 3a 9e c2			ld a, (.dmark)  
c28d 32 65 ee			ld (debug_mark),a  
c290 3a 9f c2			ld a, (.dmark+1)  
c293 32 66 ee			ld (debug_mark+1),a  
c296 3a a0 c2			ld a, (.dmark+2)  
c299 32 67 ee			ld (debug_mark+2),a  
c29c 18 03			jr .pastdmark  
c29e ..			.dmark: db "UPR"  
c2a1 f1			.pastdmark: pop af  
c2a2			endm  
# End of macro DMARK
c2a2						CALLMONITOR 
c2a2 cd 6f ee			call debug_vector  
c2a5				endm  
# End of macro CALLMONITOR
c2a5					endif 
c2a5			 
c2a5					FORTH_DSP 
c2a5 cd 50 9c			call macro_forth_dsp 
c2a8				endm 
# End of macro FORTH_DSP
c2a8					 
c2a8			; TODO check is string type 
c2a8			 
c2a8					FORTH_DSP_VALUEHL 
c2a8 cd 8a 9c			call macro_dsp_valuehl 
c2ab				endm 
# End of macro FORTH_DSP_VALUEHL
c2ab			; get pointer to string in hl 
c2ab			 
c2ab 7e			.toup:		ld a, (hl) 
c2ac fe 00				cp 0 
c2ae 28 07				jr z, .toupdone 
c2b0			 
c2b0 cd 5f 8f				call to_upper 
c2b3			 
c2b3 77					ld (hl), a 
c2b4 23					inc hl 
c2b5 18 f4				jr .toup 
c2b7			 
c2b7					 
c2b7			 
c2b7			 
c2b7			; for each char convert to upper 
c2b7					 
c2b7			.toupdone: 
c2b7			 
c2b7			 
c2b7					NEXTW 
c2b7 c3 76 9e			jp macro_next 
c2ba				endm 
# End of macro NEXTW
c2ba			.LOWER: 
c2ba				CWHEAD .TCASE 52 "LOWER" 5 WORD_FLAG_CODE 
c2ba 48				db WORD_SYS_CORE+52             
c2bb f5 c2			dw .TCASE            
c2bd 06				db 5 + 1 
c2be .. 00			db "LOWER",0              
c2c4				endm 
# End of macro CWHEAD
c2c4			; | LOWER ( s -- s ) Lower case string s  | DONE 
c2c4					if DEBUG_FORTH_WORDS_KEY 
c2c4						DMARK "LWR" 
c2c4 f5				push af  
c2c5 3a d9 c2			ld a, (.dmark)  
c2c8 32 65 ee			ld (debug_mark),a  
c2cb 3a da c2			ld a, (.dmark+1)  
c2ce 32 66 ee			ld (debug_mark+1),a  
c2d1 3a db c2			ld a, (.dmark+2)  
c2d4 32 67 ee			ld (debug_mark+2),a  
c2d7 18 03			jr .pastdmark  
c2d9 ..			.dmark: db "LWR"  
c2dc f1			.pastdmark: pop af  
c2dd			endm  
# End of macro DMARK
c2dd						CALLMONITOR 
c2dd cd 6f ee			call debug_vector  
c2e0				endm  
# End of macro CALLMONITOR
c2e0					endif 
c2e0			 
c2e0					FORTH_DSP 
c2e0 cd 50 9c			call macro_forth_dsp 
c2e3				endm 
# End of macro FORTH_DSP
c2e3					 
c2e3			; TODO check is string type 
c2e3			 
c2e3					FORTH_DSP_VALUEHL 
c2e3 cd 8a 9c			call macro_dsp_valuehl 
c2e6				endm 
# End of macro FORTH_DSP_VALUEHL
c2e6			; get pointer to string in hl 
c2e6			 
c2e6 7e			.tolow:		ld a, (hl) 
c2e7 fe 00				cp 0 
c2e9 28 07				jr z, .tolowdone 
c2eb			 
c2eb cd 68 8f				call to_lower 
c2ee			 
c2ee 77					ld (hl), a 
c2ef 23					inc hl 
c2f0 18 f4				jr .tolow 
c2f2			 
c2f2					 
c2f2			 
c2f2			 
c2f2			; for each char convert to low 
c2f2					 
c2f2			.tolowdone: 
c2f2					NEXTW 
c2f2 c3 76 9e			jp macro_next 
c2f5				endm 
# End of macro NEXTW
c2f5			.TCASE: 
c2f5				CWHEAD .SUBSTR 52 "TCASE" 5 WORD_FLAG_CODE 
c2f5 48				db WORD_SYS_CORE+52             
c2f6 2b c4			dw .SUBSTR            
c2f8 06				db 5 + 1 
c2f9 .. 00			db "TCASE",0              
c2ff				endm 
# End of macro CWHEAD
c2ff			; | TCASE ( s -- s ) Title case string s  | DONE 
c2ff					if DEBUG_FORTH_WORDS_KEY 
c2ff						DMARK "TCS" 
c2ff f5				push af  
c300 3a 14 c3			ld a, (.dmark)  
c303 32 65 ee			ld (debug_mark),a  
c306 3a 15 c3			ld a, (.dmark+1)  
c309 32 66 ee			ld (debug_mark+1),a  
c30c 3a 16 c3			ld a, (.dmark+2)  
c30f 32 67 ee			ld (debug_mark+2),a  
c312 18 03			jr .pastdmark  
c314 ..			.dmark: db "TCS"  
c317 f1			.pastdmark: pop af  
c318			endm  
# End of macro DMARK
c318						CALLMONITOR 
c318 cd 6f ee			call debug_vector  
c31b				endm  
# End of macro CALLMONITOR
c31b					endif 
c31b			 
c31b					FORTH_DSP 
c31b cd 50 9c			call macro_forth_dsp 
c31e				endm 
# End of macro FORTH_DSP
c31e					 
c31e			; TODO check is string type 
c31e			 
c31e					FORTH_DSP_VALUEHL 
c31e cd 8a 9c			call macro_dsp_valuehl 
c321				endm 
# End of macro FORTH_DSP_VALUEHL
c321			; get pointer to string in hl 
c321			 
c321					if DEBUG_FORTH_WORDS 
c321						DMARK "TC1" 
c321 f5				push af  
c322 3a 36 c3			ld a, (.dmark)  
c325 32 65 ee			ld (debug_mark),a  
c328 3a 37 c3			ld a, (.dmark+1)  
c32b 32 66 ee			ld (debug_mark+1),a  
c32e 3a 38 c3			ld a, (.dmark+2)  
c331 32 67 ee			ld (debug_mark+2),a  
c334 18 03			jr .pastdmark  
c336 ..			.dmark: db "TC1"  
c339 f1			.pastdmark: pop af  
c33a			endm  
# End of macro DMARK
c33a						CALLMONITOR 
c33a cd 6f ee			call debug_vector  
c33d				endm  
# End of macro CALLMONITOR
c33d					endif 
c33d			 
c33d					; first time in turn to upper case first char 
c33d			 
c33d 7e					ld a, (hl) 
c33e c3 c8 c3				jp .totsiptou 
c341			 
c341			 
c341 7e			.tot:		ld a, (hl) 
c342 fe 00				cp 0 
c344 ca 0c c4				jp z, .totdone 
c347			 
c347					if DEBUG_FORTH_WORDS 
c347						DMARK "TC2" 
c347 f5				push af  
c348 3a 5c c3			ld a, (.dmark)  
c34b 32 65 ee			ld (debug_mark),a  
c34e 3a 5d c3			ld a, (.dmark+1)  
c351 32 66 ee			ld (debug_mark+1),a  
c354 3a 5e c3			ld a, (.dmark+2)  
c357 32 67 ee			ld (debug_mark+2),a  
c35a 18 03			jr .pastdmark  
c35c ..			.dmark: db "TC2"  
c35f f1			.pastdmark: pop af  
c360			endm  
# End of macro DMARK
c360						CALLMONITOR 
c360 cd 6f ee			call debug_vector  
c363				endm  
# End of macro CALLMONITOR
c363					endif 
c363					; check to see if current char is a space 
c363			 
c363 fe 20				cp ' ' 
c365 28 21				jr z, .totsp 
c367 cd 68 8f				call to_lower 
c36a					if DEBUG_FORTH_WORDS 
c36a						DMARK "TC3" 
c36a f5				push af  
c36b 3a 7f c3			ld a, (.dmark)  
c36e 32 65 ee			ld (debug_mark),a  
c371 3a 80 c3			ld a, (.dmark+1)  
c374 32 66 ee			ld (debug_mark+1),a  
c377 3a 81 c3			ld a, (.dmark+2)  
c37a 32 67 ee			ld (debug_mark+2),a  
c37d 18 03			jr .pastdmark  
c37f ..			.dmark: db "TC3"  
c382 f1			.pastdmark: pop af  
c383			endm  
# End of macro DMARK
c383						CALLMONITOR 
c383 cd 6f ee			call debug_vector  
c386				endm  
# End of macro CALLMONITOR
c386					endif 
c386 18 63				jr .totnxt 
c388			 
c388			.totsp:         ; on a space, find next char which should be upper 
c388			 
c388					if DEBUG_FORTH_WORDS 
c388						DMARK "TC4" 
c388 f5				push af  
c389 3a 9d c3			ld a, (.dmark)  
c38c 32 65 ee			ld (debug_mark),a  
c38f 3a 9e c3			ld a, (.dmark+1)  
c392 32 66 ee			ld (debug_mark+1),a  
c395 3a 9f c3			ld a, (.dmark+2)  
c398 32 67 ee			ld (debug_mark+2),a  
c39b 18 03			jr .pastdmark  
c39d ..			.dmark: db "TC4"  
c3a0 f1			.pastdmark: pop af  
c3a1			endm  
# End of macro DMARK
c3a1						CALLMONITOR 
c3a1 cd 6f ee			call debug_vector  
c3a4				endm  
# End of macro CALLMONITOR
c3a4					endif 
c3a4					;; 
c3a4			 
c3a4 fe 20				cp ' ' 
c3a6 20 20				jr nz, .totsiptou 
c3a8 23					inc hl 
c3a9 7e					ld a, (hl) 
c3aa					if DEBUG_FORTH_WORDS 
c3aa						DMARK "TC5" 
c3aa f5				push af  
c3ab 3a bf c3			ld a, (.dmark)  
c3ae 32 65 ee			ld (debug_mark),a  
c3b1 3a c0 c3			ld a, (.dmark+1)  
c3b4 32 66 ee			ld (debug_mark+1),a  
c3b7 3a c1 c3			ld a, (.dmark+2)  
c3ba 32 67 ee			ld (debug_mark+2),a  
c3bd 18 03			jr .pastdmark  
c3bf ..			.dmark: db "TC5"  
c3c2 f1			.pastdmark: pop af  
c3c3			endm  
# End of macro DMARK
c3c3						CALLMONITOR 
c3c3 cd 6f ee			call debug_vector  
c3c6				endm  
# End of macro CALLMONITOR
c3c6					endif 
c3c6 18 c0				jr .totsp 
c3c8 fe 00		.totsiptou:    cp 0 
c3ca 28 40				jr z, .totdone 
c3cc					; not space and not zero term so upper case it 
c3cc cd 5f 8f				call to_upper 
c3cf			 
c3cf					if DEBUG_FORTH_WORDS 
c3cf						DMARK "TC6" 
c3cf f5				push af  
c3d0 3a e4 c3			ld a, (.dmark)  
c3d3 32 65 ee			ld (debug_mark),a  
c3d6 3a e5 c3			ld a, (.dmark+1)  
c3d9 32 66 ee			ld (debug_mark+1),a  
c3dc 3a e6 c3			ld a, (.dmark+2)  
c3df 32 67 ee			ld (debug_mark+2),a  
c3e2 18 03			jr .pastdmark  
c3e4 ..			.dmark: db "TC6"  
c3e7 f1			.pastdmark: pop af  
c3e8			endm  
# End of macro DMARK
c3e8						CALLMONITOR 
c3e8 cd 6f ee			call debug_vector  
c3eb				endm  
# End of macro CALLMONITOR
c3eb					endif 
c3eb			 
c3eb			 
c3eb			.totnxt: 
c3eb			 
c3eb 77					ld (hl), a 
c3ec 23					inc hl 
c3ed					if DEBUG_FORTH_WORDS 
c3ed						DMARK "TC7" 
c3ed f5				push af  
c3ee 3a 02 c4			ld a, (.dmark)  
c3f1 32 65 ee			ld (debug_mark),a  
c3f4 3a 03 c4			ld a, (.dmark+1)  
c3f7 32 66 ee			ld (debug_mark+1),a  
c3fa 3a 04 c4			ld a, (.dmark+2)  
c3fd 32 67 ee			ld (debug_mark+2),a  
c400 18 03			jr .pastdmark  
c402 ..			.dmark: db "TC7"  
c405 f1			.pastdmark: pop af  
c406			endm  
# End of macro DMARK
c406						CALLMONITOR 
c406 cd 6f ee			call debug_vector  
c409				endm  
# End of macro CALLMONITOR
c409					endif 
c409 c3 41 c3				jp .tot 
c40c			 
c40c					 
c40c			 
c40c			 
c40c			; for each char convert to low 
c40c					 
c40c			.totdone: 
c40c					if DEBUG_FORTH_WORDS 
c40c						DMARK "TCd" 
c40c f5				push af  
c40d 3a 21 c4			ld a, (.dmark)  
c410 32 65 ee			ld (debug_mark),a  
c413 3a 22 c4			ld a, (.dmark+1)  
c416 32 66 ee			ld (debug_mark+1),a  
c419 3a 23 c4			ld a, (.dmark+2)  
c41c 32 67 ee			ld (debug_mark+2),a  
c41f 18 03			jr .pastdmark  
c421 ..			.dmark: db "TCd"  
c424 f1			.pastdmark: pop af  
c425			endm  
# End of macro DMARK
c425						CALLMONITOR 
c425 cd 6f ee			call debug_vector  
c428				endm  
# End of macro CALLMONITOR
c428					endif 
c428					NEXTW 
c428 c3 76 9e			jp macro_next 
c42b				endm 
# End of macro NEXTW
c42b			 
c42b			.SUBSTR: 
c42b				CWHEAD .LEFT 52 "SUBSTR" 6 WORD_FLAG_CODE 
c42b 48				db WORD_SYS_CORE+52             
c42c 89 c4			dw .LEFT            
c42e 07				db 6 + 1 
c42f .. 00			db "SUBSTR",0              
c436				endm 
# End of macro CWHEAD
c436			; | SUBSTR ( s u1 u2 -- s sb ) Push to TOS chars starting at position u1 and with length u2 from string s  | DONE 
c436			 
c436					if DEBUG_FORTH_WORDS_KEY 
c436						DMARK "SST" 
c436 f5				push af  
c437 3a 4b c4			ld a, (.dmark)  
c43a 32 65 ee			ld (debug_mark),a  
c43d 3a 4c c4			ld a, (.dmark+1)  
c440 32 66 ee			ld (debug_mark+1),a  
c443 3a 4d c4			ld a, (.dmark+2)  
c446 32 67 ee			ld (debug_mark+2),a  
c449 18 03			jr .pastdmark  
c44b ..			.dmark: db "SST"  
c44e f1			.pastdmark: pop af  
c44f			endm  
# End of macro DMARK
c44f						CALLMONITOR 
c44f cd 6f ee			call debug_vector  
c452				endm  
# End of macro CALLMONITOR
c452					endif 
c452			; TODO check string type 
c452					FORTH_DSP_VALUEHL 
c452 cd 8a 9c			call macro_dsp_valuehl 
c455				endm 
# End of macro FORTH_DSP_VALUEHL
c455			 
c455 e5					push hl      ; string length 
c456			 
c456					FORTH_DSP_POP 
c456 cd 42 9d			call macro_forth_dsp_pop 
c459				endm 
# End of macro FORTH_DSP_POP
c459			 
c459					FORTH_DSP_VALUEHL 
c459 cd 8a 9c			call macro_dsp_valuehl 
c45c				endm 
# End of macro FORTH_DSP_VALUEHL
c45c			 
c45c e5					push hl     ; start char 
c45d			 
c45d					FORTH_DSP_POP 
c45d cd 42 9d			call macro_forth_dsp_pop 
c460				endm 
# End of macro FORTH_DSP_POP
c460			 
c460			 
c460					FORTH_DSP_VALUE 
c460 cd 73 9c			call macro_forth_dsp_value 
c463				endm 
# End of macro FORTH_DSP_VALUE
c463			 
c463 d1					pop de    ; get start post offset 
c464			 
c464 19					add hl, de    ; starting offset 
c465			 
c465 c1					pop bc 
c466 c5					push bc      ; grab size of string 
c467			 
c467 e5					push hl    ; save string start  
c468			 
c468 26 00				ld h, 0 
c46a 69					ld l, c 
c46b 23					inc hl 
c46c 23					inc hl 
c46d			 
c46d cd c5 90				call malloc 
c470				if DEBUG_FORTH_MALLOC_GUARD 
c470 cc a3 cd				call z,malloc_error 
c473				endif 
c473			 
c473 eb					ex de, hl      ; save malloc area for string copy 
c474 e1					pop hl    ; get back source 
c475 c1					pop bc    ; get length of string back 
c476			 
c476 d5					push de    ; save malloc area for after we push 
c477 ed b0				ldir     ; copy substr 
c479			 
c479			 
c479 eb					ex de, hl 
c47a 3e 00				ld a, 0 
c47c 77					ld (hl), a   ; term substr 
c47d			 
c47d					 
c47d e1					pop hl    ; get malloc so we can push it 
c47e e5					push hl   ; save so we can free it afterwards 
c47f			 
c47f cd f3 9a				call forth_push_str 
c482			 
c482 e1					pop hl 
c483 cd 8f 91				call free 
c486			 
c486					 
c486					 
c486			 
c486			 
c486					NEXTW 
c486 c3 76 9e			jp macro_next 
c489				endm 
# End of macro NEXTW
c489			 
c489			.LEFT: 
c489				CWHEAD .RIGHT 52 "LEFT" 4 WORD_FLAG_CODE 
c489 48				db WORD_SYS_CORE+52             
c48a b1 c4			dw .RIGHT            
c48c 05				db 4 + 1 
c48d .. 00			db "LEFT",0              
c492				endm 
# End of macro CWHEAD
c492			; | LEFT ( s u -- s sub ) Push to TOS string u long starting from left of s  | TODO 
c492					if DEBUG_FORTH_WORDS_KEY 
c492						DMARK "LEF" 
c492 f5				push af  
c493 3a a7 c4			ld a, (.dmark)  
c496 32 65 ee			ld (debug_mark),a  
c499 3a a8 c4			ld a, (.dmark+1)  
c49c 32 66 ee			ld (debug_mark+1),a  
c49f 3a a9 c4			ld a, (.dmark+2)  
c4a2 32 67 ee			ld (debug_mark+2),a  
c4a5 18 03			jr .pastdmark  
c4a7 ..			.dmark: db "LEF"  
c4aa f1			.pastdmark: pop af  
c4ab			endm  
# End of macro DMARK
c4ab						CALLMONITOR 
c4ab cd 6f ee			call debug_vector  
c4ae				endm  
# End of macro CALLMONITOR
c4ae					endif 
c4ae			 
c4ae					NEXTW 
c4ae c3 76 9e			jp macro_next 
c4b1				endm 
# End of macro NEXTW
c4b1			.RIGHT: 
c4b1				CWHEAD .STR2NUM 52 "RIGHT" 5 WORD_FLAG_CODE 
c4b1 48				db WORD_SYS_CORE+52             
c4b2 da c4			dw .STR2NUM            
c4b4 06				db 5 + 1 
c4b5 .. 00			db "RIGHT",0              
c4bb				endm 
# End of macro CWHEAD
c4bb			; | RIGHT ( s u -- s sub ) Push to TOS string u long starting from right of s  | TODO 
c4bb					if DEBUG_FORTH_WORDS_KEY 
c4bb						DMARK "RIG" 
c4bb f5				push af  
c4bc 3a d0 c4			ld a, (.dmark)  
c4bf 32 65 ee			ld (debug_mark),a  
c4c2 3a d1 c4			ld a, (.dmark+1)  
c4c5 32 66 ee			ld (debug_mark+1),a  
c4c8 3a d2 c4			ld a, (.dmark+2)  
c4cb 32 67 ee			ld (debug_mark+2),a  
c4ce 18 03			jr .pastdmark  
c4d0 ..			.dmark: db "RIG"  
c4d3 f1			.pastdmark: pop af  
c4d4			endm  
# End of macro DMARK
c4d4						CALLMONITOR 
c4d4 cd 6f ee			call debug_vector  
c4d7				endm  
# End of macro CALLMONITOR
c4d7					endif 
c4d7			 
c4d7					NEXTW 
c4d7 c3 76 9e			jp macro_next 
c4da				endm 
# End of macro NEXTW
c4da			 
c4da			 
c4da			.STR2NUM: 
c4da				CWHEAD .NUM2STR 52 "STR2NUM" 7 WORD_FLAG_CODE 
c4da 48				db WORD_SYS_CORE+52             
c4db 66 c5			dw .NUM2STR            
c4dd 08				db 7 + 1 
c4de .. 00			db "STR2NUM",0              
c4e6				endm 
# End of macro CWHEAD
c4e6			; | STR2NUM ( s -- n ) Convert a string on TOS to number | DONE 
c4e6			 
c4e6			 
c4e6			; TODO STR type check to do 
c4e6					if DEBUG_FORTH_WORDS_KEY 
c4e6						DMARK "S2N" 
c4e6 f5				push af  
c4e7 3a fb c4			ld a, (.dmark)  
c4ea 32 65 ee			ld (debug_mark),a  
c4ed 3a fc c4			ld a, (.dmark+1)  
c4f0 32 66 ee			ld (debug_mark+1),a  
c4f3 3a fd c4			ld a, (.dmark+2)  
c4f6 32 67 ee			ld (debug_mark+2),a  
c4f9 18 03			jr .pastdmark  
c4fb ..			.dmark: db "S2N"  
c4fe f1			.pastdmark: pop af  
c4ff			endm  
# End of macro DMARK
c4ff						CALLMONITOR 
c4ff cd 6f ee			call debug_vector  
c502				endm  
# End of macro CALLMONITOR
c502					endif 
c502			 
c502					;FORTH_DSP 
c502					FORTH_DSP_VALUE 
c502 cd 73 9c			call macro_forth_dsp_value 
c505				endm 
# End of macro FORTH_DSP_VALUE
c505					;inc hl 
c505			 
c505 eb					ex de, hl 
c506					if DEBUG_FORTH_WORDS 
c506						DMARK "S2a" 
c506 f5				push af  
c507 3a 1b c5			ld a, (.dmark)  
c50a 32 65 ee			ld (debug_mark),a  
c50d 3a 1c c5			ld a, (.dmark+1)  
c510 32 66 ee			ld (debug_mark+1),a  
c513 3a 1d c5			ld a, (.dmark+2)  
c516 32 67 ee			ld (debug_mark+2),a  
c519 18 03			jr .pastdmark  
c51b ..			.dmark: db "S2a"  
c51e f1			.pastdmark: pop af  
c51f			endm  
# End of macro DMARK
c51f						CALLMONITOR 
c51f cd 6f ee			call debug_vector  
c522				endm  
# End of macro CALLMONITOR
c522					endif 
c522 cd e7 8f				call string_to_uint16 
c525			 
c525					if DEBUG_FORTH_WORDS 
c525						DMARK "S2b" 
c525 f5				push af  
c526 3a 3a c5			ld a, (.dmark)  
c529 32 65 ee			ld (debug_mark),a  
c52c 3a 3b c5			ld a, (.dmark+1)  
c52f 32 66 ee			ld (debug_mark+1),a  
c532 3a 3c c5			ld a, (.dmark+2)  
c535 32 67 ee			ld (debug_mark+2),a  
c538 18 03			jr .pastdmark  
c53a ..			.dmark: db "S2b"  
c53d f1			.pastdmark: pop af  
c53e			endm  
# End of macro DMARK
c53e						CALLMONITOR 
c53e cd 6f ee			call debug_vector  
c541				endm  
# End of macro CALLMONITOR
c541					endif 
c541			;		push hl 
c541					FORTH_DSP_POP 
c541 cd 42 9d			call macro_forth_dsp_pop 
c544				endm 
# End of macro FORTH_DSP_POP
c544			;		pop hl 
c544					 
c544					if DEBUG_FORTH_WORDS 
c544						DMARK "S2b" 
c544 f5				push af  
c545 3a 59 c5			ld a, (.dmark)  
c548 32 65 ee			ld (debug_mark),a  
c54b 3a 5a c5			ld a, (.dmark+1)  
c54e 32 66 ee			ld (debug_mark+1),a  
c551 3a 5b c5			ld a, (.dmark+2)  
c554 32 67 ee			ld (debug_mark+2),a  
c557 18 03			jr .pastdmark  
c559 ..			.dmark: db "S2b"  
c55c f1			.pastdmark: pop af  
c55d			endm  
# End of macro DMARK
c55d						CALLMONITOR 
c55d cd 6f ee			call debug_vector  
c560				endm  
# End of macro CALLMONITOR
c560					endif 
c560 cd 85 9a				call forth_push_numhl	 
c563			 
c563				 
c563				       NEXTW 
c563 c3 76 9e			jp macro_next 
c566				endm 
# End of macro NEXTW
c566			.NUM2STR: 
c566				CWHEAD .CONCAT 52 "NUM2STR" 7 WORD_FLAG_CODE 
c566 48				db WORD_SYS_CORE+52             
c567 75 c5			dw .CONCAT            
c569 08				db 7 + 1 
c56a .. 00			db "NUM2STR",0              
c572				endm 
# End of macro CWHEAD
c572			; | NUM2STR ( n -- s ) Convert a number on TOS to string | TODO 
c572			 
c572			;		; malloc a string to target 
c572			;		ld hl, 10     ; TODO max string size should be fine 
c572			;		call malloc 
c572			;		push hl    ; save malloc location 
c572			; 
c572			; 
c572			;; TODO check int type 
c572			;		FORTH_DSP_VALUEHL 
c572			;		ld a, l 
c572			;		call DispAToASCII   
c572			;;TODO need to chage above call to dump into string 
c572			; 
c572			; 
c572			 
c572				       NEXTW 
c572 c3 76 9e			jp macro_next 
c575				endm 
# End of macro NEXTW
c575			 
c575			.CONCAT: 
c575				CWHEAD .FIND 52 "CONCAT" 6 WORD_FLAG_CODE 
c575 48				db WORD_SYS_CORE+52             
c576 28 c6			dw .FIND            
c578 07				db 6 + 1 
c579 .. 00			db "CONCAT",0              
c580				endm 
# End of macro CWHEAD
c580			; | CONCAT ( s1 s2 -- s3 ) A s1 + s2 is pushed onto the stack | DONE 
c580			 
c580			; TODO check string type 
c580			; TODO create macro to get pointer for next item on stack. Handy for lots of things 
c580			 
c580					if DEBUG_FORTH_WORDS_KEY 
c580						DMARK "CON" 
c580 f5				push af  
c581 3a 95 c5			ld a, (.dmark)  
c584 32 65 ee			ld (debug_mark),a  
c587 3a 96 c5			ld a, (.dmark+1)  
c58a 32 66 ee			ld (debug_mark+1),a  
c58d 3a 97 c5			ld a, (.dmark+2)  
c590 32 67 ee			ld (debug_mark+2),a  
c593 18 03			jr .pastdmark  
c595 ..			.dmark: db "CON"  
c598 f1			.pastdmark: pop af  
c599			endm  
# End of macro DMARK
c599						CALLMONITOR 
c599 cd 6f ee			call debug_vector  
c59c				endm  
# End of macro CALLMONITOR
c59c					endif 
c59c			 
c59c			 
c59c					FORTH_DSP_VALUE 
c59c cd 73 9c			call macro_forth_dsp_value 
c59f				endm 
# End of macro FORTH_DSP_VALUE
c59f e5					push hl   ; s2 
c5a0			 
c5a0					FORTH_DSP_POP 
c5a0 cd 42 9d			call macro_forth_dsp_pop 
c5a3				endm 
# End of macro FORTH_DSP_POP
c5a3			 
c5a3					FORTH_DSP_VALUE 
c5a3 cd 73 9c			call macro_forth_dsp_value 
c5a6				endm 
# End of macro FORTH_DSP_VALUE
c5a6			 
c5a6 e5					push hl   ; s1 
c5a7			 
c5a7					FORTH_DSP_POP 
c5a7 cd 42 9d			call macro_forth_dsp_pop 
c5aa				endm 
# End of macro FORTH_DSP_POP
c5aa					 
c5aa			 
c5aa					; copy s1 
c5aa			 
c5aa				 
c5aa					; save ptr 
c5aa e1					pop hl  
c5ab e5					push hl 
c5ac 3e 00				ld a, 0 
c5ae cd 5b 90				call strlent 
c5b1					;inc hl    ; zer0 
c5b1 06 00				ld b, 0 
c5b3 4d					ld c, l 
c5b4 e1					pop hl		 
c5b5 11 bb e2				ld de, scratch	 
c5b8					if DEBUG_FORTH_WORDS 
c5b8						DMARK "CO1" 
c5b8 f5				push af  
c5b9 3a cd c5			ld a, (.dmark)  
c5bc 32 65 ee			ld (debug_mark),a  
c5bf 3a ce c5			ld a, (.dmark+1)  
c5c2 32 66 ee			ld (debug_mark+1),a  
c5c5 3a cf c5			ld a, (.dmark+2)  
c5c8 32 67 ee			ld (debug_mark+2),a  
c5cb 18 03			jr .pastdmark  
c5cd ..			.dmark: db "CO1"  
c5d0 f1			.pastdmark: pop af  
c5d1			endm  
# End of macro DMARK
c5d1						CALLMONITOR 
c5d1 cd 6f ee			call debug_vector  
c5d4				endm  
# End of macro CALLMONITOR
c5d4					endif 
c5d4 ed b0				ldir 
c5d6			 
c5d6 e1					pop hl 
c5d7 e5					push hl 
c5d8 d5					push de 
c5d9			 
c5d9			 
c5d9 3e 00				ld a, 0 
c5db cd 5b 90				call strlent 
c5de 23					inc hl    ; zer0 
c5df 23					inc hl 
c5e0 06 00				ld b, 0 
c5e2 4d					ld c, l 
c5e3 d1					pop de 
c5e4 e1					pop hl		 
c5e5					if DEBUG_FORTH_WORDS 
c5e5						DMARK "CO2" 
c5e5 f5				push af  
c5e6 3a fa c5			ld a, (.dmark)  
c5e9 32 65 ee			ld (debug_mark),a  
c5ec 3a fb c5			ld a, (.dmark+1)  
c5ef 32 66 ee			ld (debug_mark+1),a  
c5f2 3a fc c5			ld a, (.dmark+2)  
c5f5 32 67 ee			ld (debug_mark+2),a  
c5f8 18 03			jr .pastdmark  
c5fa ..			.dmark: db "CO2"  
c5fd f1			.pastdmark: pop af  
c5fe			endm  
# End of macro DMARK
c5fe						CALLMONITOR 
c5fe cd 6f ee			call debug_vector  
c601				endm  
# End of macro CALLMONITOR
c601					endif 
c601 ed b0				ldir 
c603			 
c603			 
c603			 
c603 21 bb e2				ld hl, scratch 
c606					if DEBUG_FORTH_WORDS 
c606						DMARK "CO5" 
c606 f5				push af  
c607 3a 1b c6			ld a, (.dmark)  
c60a 32 65 ee			ld (debug_mark),a  
c60d 3a 1c c6			ld a, (.dmark+1)  
c610 32 66 ee			ld (debug_mark+1),a  
c613 3a 1d c6			ld a, (.dmark+2)  
c616 32 67 ee			ld (debug_mark+2),a  
c619 18 03			jr .pastdmark  
c61b ..			.dmark: db "CO5"  
c61e f1			.pastdmark: pop af  
c61f			endm  
# End of macro DMARK
c61f						CALLMONITOR 
c61f cd 6f ee			call debug_vector  
c622				endm  
# End of macro CALLMONITOR
c622					endif 
c622			 
c622 cd f3 9a				call forth_push_str 
c625			 
c625			 
c625			 
c625			 
c625				       NEXTW 
c625 c3 76 9e			jp macro_next 
c628				endm 
# End of macro NEXTW
c628			 
c628			 
c628			.FIND: 
c628				CWHEAD .LEN 55 "FIND" 4 WORD_FLAG_CODE 
c628 4b				db WORD_SYS_CORE+55             
c629 e6 c6			dw .LEN            
c62b 05				db 4 + 1 
c62c .. 00			db "FIND",0              
c631				endm 
# End of macro CWHEAD
c631			; | FIND ( s c -- s u ) Search the string s for the char c and push the position of the first occurance to TOS | DONE 
c631			 
c631					if DEBUG_FORTH_WORDS_KEY 
c631						DMARK "FND" 
c631 f5				push af  
c632 3a 46 c6			ld a, (.dmark)  
c635 32 65 ee			ld (debug_mark),a  
c638 3a 47 c6			ld a, (.dmark+1)  
c63b 32 66 ee			ld (debug_mark+1),a  
c63e 3a 48 c6			ld a, (.dmark+2)  
c641 32 67 ee			ld (debug_mark+2),a  
c644 18 03			jr .pastdmark  
c646 ..			.dmark: db "FND"  
c649 f1			.pastdmark: pop af  
c64a			endm  
# End of macro DMARK
c64a						CALLMONITOR 
c64a cd 6f ee			call debug_vector  
c64d				endm  
# End of macro CALLMONITOR
c64d					endif 
c64d			 
c64d			; TODO check string type 
c64d					FORTH_DSP_VALUE 
c64d cd 73 9c			call macro_forth_dsp_value 
c650				endm 
# End of macro FORTH_DSP_VALUE
c650			 
c650 e5					push hl    
c651 7e					ld a,(hl)    ; char to find   
c652			; TODO change char to substr 
c652			 
c652 f5					push af 
c653					 
c653			 
c653			 
c653					if DEBUG_FORTH_WORDS 
c653						DMARK "FN1" 
c653 f5				push af  
c654 3a 68 c6			ld a, (.dmark)  
c657 32 65 ee			ld (debug_mark),a  
c65a 3a 69 c6			ld a, (.dmark+1)  
c65d 32 66 ee			ld (debug_mark+1),a  
c660 3a 6a c6			ld a, (.dmark+2)  
c663 32 67 ee			ld (debug_mark+2),a  
c666 18 03			jr .pastdmark  
c668 ..			.dmark: db "FN1"  
c66b f1			.pastdmark: pop af  
c66c			endm  
# End of macro DMARK
c66c						CALLMONITOR 
c66c cd 6f ee			call debug_vector  
c66f				endm  
# End of macro CALLMONITOR
c66f					endif 
c66f			 
c66f					FORTH_DSP_POP 
c66f cd 42 9d			call macro_forth_dsp_pop 
c672				endm 
# End of macro FORTH_DSP_POP
c672			 
c672					; string to search 
c672			 
c672					FORTH_DSP_VALUE 
c672 cd 73 9c			call macro_forth_dsp_value 
c675				endm 
# End of macro FORTH_DSP_VALUE
c675			 
c675 d1					pop de  ; d is char to find  
c676			 
c676					if DEBUG_FORTH_WORDS 
c676						DMARK "FN2" 
c676 f5				push af  
c677 3a 8b c6			ld a, (.dmark)  
c67a 32 65 ee			ld (debug_mark),a  
c67d 3a 8c c6			ld a, (.dmark+1)  
c680 32 66 ee			ld (debug_mark+1),a  
c683 3a 8d c6			ld a, (.dmark+2)  
c686 32 67 ee			ld (debug_mark+2),a  
c689 18 03			jr .pastdmark  
c68b ..			.dmark: db "FN2"  
c68e f1			.pastdmark: pop af  
c68f			endm  
# End of macro DMARK
c68f						CALLMONITOR 
c68f cd 6f ee			call debug_vector  
c692				endm  
# End of macro CALLMONITOR
c692					endif 
c692					 
c692 01 00 00				ld bc, 0 
c695 7e			.findchar:      ld a,(hl) 
c696 fe 00				cp 0   		 
c698 28 27				jr z, .finddone     
c69a ba					cp d 
c69b 28 20				jr z, .foundchar 
c69d 03					inc bc 
c69e 23					inc hl 
c69f					if DEBUG_FORTH_WORDS 
c69f						DMARK "FN3" 
c69f f5				push af  
c6a0 3a b4 c6			ld a, (.dmark)  
c6a3 32 65 ee			ld (debug_mark),a  
c6a6 3a b5 c6			ld a, (.dmark+1)  
c6a9 32 66 ee			ld (debug_mark+1),a  
c6ac 3a b6 c6			ld a, (.dmark+2)  
c6af 32 67 ee			ld (debug_mark+2),a  
c6b2 18 03			jr .pastdmark  
c6b4 ..			.dmark: db "FN3"  
c6b7 f1			.pastdmark: pop af  
c6b8			endm  
# End of macro DMARK
c6b8						CALLMONITOR 
c6b8 cd 6f ee			call debug_vector  
c6bb				endm  
# End of macro CALLMONITOR
c6bb					endif 
c6bb 18 d8				jr .findchar 
c6bd			 
c6bd			 
c6bd c5			.foundchar:	push bc 
c6be e1					pop hl 
c6bf 18 03				jr .findexit 
c6c1			 
c6c1			 
c6c1							 
c6c1			 
c6c1			.finddone:     ; got to end of string with no find 
c6c1 21 00 00				ld hl, 0 
c6c4			.findexit: 
c6c4			 
c6c4					if DEBUG_FORTH_WORDS 
c6c4						DMARK "FNd" 
c6c4 f5				push af  
c6c5 3a d9 c6			ld a, (.dmark)  
c6c8 32 65 ee			ld (debug_mark),a  
c6cb 3a da c6			ld a, (.dmark+1)  
c6ce 32 66 ee			ld (debug_mark+1),a  
c6d1 3a db c6			ld a, (.dmark+2)  
c6d4 32 67 ee			ld (debug_mark+2),a  
c6d7 18 03			jr .pastdmark  
c6d9 ..			.dmark: db "FNd"  
c6dc f1			.pastdmark: pop af  
c6dd			endm  
# End of macro DMARK
c6dd						CALLMONITOR 
c6dd cd 6f ee			call debug_vector  
c6e0				endm  
# End of macro CALLMONITOR
c6e0					endif 
c6e0 cd 85 9a			call forth_push_numhl 
c6e3			 
c6e3				       NEXTW 
c6e3 c3 76 9e			jp macro_next 
c6e6				endm 
# End of macro NEXTW
c6e6			 
c6e6			.LEN: 
c6e6				CWHEAD .ASC 56 "COUNT" 5 WORD_FLAG_CODE 
c6e6 4c				db WORD_SYS_CORE+56             
c6e7 50 c7			dw .ASC            
c6e9 06				db 5 + 1 
c6ea .. 00			db "COUNT",0              
c6f0				endm 
# End of macro CWHEAD
c6f0			; | COUNT (  str -- str u1 ) Push the length of the string str on TOS as u1 | DONE 
c6f0			 
c6f0					if DEBUG_FORTH_WORDS_KEY 
c6f0						DMARK "CNT" 
c6f0 f5				push af  
c6f1 3a 05 c7			ld a, (.dmark)  
c6f4 32 65 ee			ld (debug_mark),a  
c6f7 3a 06 c7			ld a, (.dmark+1)  
c6fa 32 66 ee			ld (debug_mark+1),a  
c6fd 3a 07 c7			ld a, (.dmark+2)  
c700 32 67 ee			ld (debug_mark+2),a  
c703 18 03			jr .pastdmark  
c705 ..			.dmark: db "CNT"  
c708 f1			.pastdmark: pop af  
c709			endm  
# End of macro DMARK
c709						CALLMONITOR 
c709 cd 6f ee			call debug_vector  
c70c				endm  
# End of macro CALLMONITOR
c70c					endif 
c70c			; TODO check string type 
c70c					FORTH_DSP_VALUE 
c70c cd 73 9c			call macro_forth_dsp_value 
c70f				endm 
# End of macro FORTH_DSP_VALUE
c70f			 
c70f			 
c70f					if DEBUG_FORTH_WORDS 
c70f						DMARK "CN?" 
c70f f5				push af  
c710 3a 24 c7			ld a, (.dmark)  
c713 32 65 ee			ld (debug_mark),a  
c716 3a 25 c7			ld a, (.dmark+1)  
c719 32 66 ee			ld (debug_mark+1),a  
c71c 3a 26 c7			ld a, (.dmark+2)  
c71f 32 67 ee			ld (debug_mark+2),a  
c722 18 03			jr .pastdmark  
c724 ..			.dmark: db "CN?"  
c727 f1			.pastdmark: pop af  
c728			endm  
# End of macro DMARK
c728						CALLMONITOR 
c728 cd 6f ee			call debug_vector  
c72b				endm  
# End of macro CALLMONITOR
c72b					endif 
c72b cd 50 90				call strlenz 
c72e					if DEBUG_FORTH_WORDS 
c72e						DMARK "CNl" 
c72e f5				push af  
c72f 3a 43 c7			ld a, (.dmark)  
c732 32 65 ee			ld (debug_mark),a  
c735 3a 44 c7			ld a, (.dmark+1)  
c738 32 66 ee			ld (debug_mark+1),a  
c73b 3a 45 c7			ld a, (.dmark+2)  
c73e 32 67 ee			ld (debug_mark+2),a  
c741 18 03			jr .pastdmark  
c743 ..			.dmark: db "CNl"  
c746 f1			.pastdmark: pop af  
c747			endm  
# End of macro DMARK
c747						CALLMONITOR 
c747 cd 6f ee			call debug_vector  
c74a				endm  
# End of macro CALLMONITOR
c74a					endif 
c74a			 
c74a cd 85 9a				call forth_push_numhl 
c74d			 
c74d			 
c74d			 
c74d				       NEXTW 
c74d c3 76 9e			jp macro_next 
c750				endm 
# End of macro NEXTW
c750			.ASC: 
c750				CWHEAD .CHR 57 "ASC" 3 WORD_FLAG_CODE 
c750 4d				db WORD_SYS_CORE+57             
c751 be c7			dw .CHR            
c753 04				db 3 + 1 
c754 .. 00			db "ASC",0              
c758				endm 
# End of macro CWHEAD
c758			; | ASC ( u -- n ) Get the ASCII value of the first character of the string on TOS | DONE 
c758					if DEBUG_FORTH_WORDS_KEY 
c758						DMARK "ASC" 
c758 f5				push af  
c759 3a 6d c7			ld a, (.dmark)  
c75c 32 65 ee			ld (debug_mark),a  
c75f 3a 6e c7			ld a, (.dmark+1)  
c762 32 66 ee			ld (debug_mark+1),a  
c765 3a 6f c7			ld a, (.dmark+2)  
c768 32 67 ee			ld (debug_mark+2),a  
c76b 18 03			jr .pastdmark  
c76d ..			.dmark: db "ASC"  
c770 f1			.pastdmark: pop af  
c771			endm  
# End of macro DMARK
c771						CALLMONITOR 
c771 cd 6f ee			call debug_vector  
c774				endm  
# End of macro CALLMONITOR
c774					endif 
c774					FORTH_DSP_VALUE 
c774 cd 73 9c			call macro_forth_dsp_value 
c777				endm 
# End of macro FORTH_DSP_VALUE
c777					;v5 FORTH_DSP_VALUE 
c777			;		inc hl      ; now at start of numeric as string 
c777			 
c777 e5					push hl 
c778			 
c778					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c778 cd 42 9d			call macro_forth_dsp_pop 
c77b				endm 
# End of macro FORTH_DSP_POP
c77b			 
c77b e1					pop hl 
c77c			 
c77c					if DEBUG_FORTH_WORDS 
c77c						DMARK "AS1" 
c77c f5				push af  
c77d 3a 91 c7			ld a, (.dmark)  
c780 32 65 ee			ld (debug_mark),a  
c783 3a 92 c7			ld a, (.dmark+1)  
c786 32 66 ee			ld (debug_mark+1),a  
c789 3a 93 c7			ld a, (.dmark+2)  
c78c 32 67 ee			ld (debug_mark+2),a  
c78f 18 03			jr .pastdmark  
c791 ..			.dmark: db "AS1"  
c794 f1			.pastdmark: pop af  
c795			endm  
# End of macro DMARK
c795						CALLMONITOR 
c795 cd 6f ee			call debug_vector  
c798				endm  
# End of macro CALLMONITOR
c798					endif 
c798					; push the content of a onto the stack as a value 
c798			 
c798 7e					ld a,(hl)   ; get char 
c799 26 00				ld h,0 
c79b 6f					ld l,a 
c79c					if DEBUG_FORTH_WORDS 
c79c						DMARK "AS2" 
c79c f5				push af  
c79d 3a b1 c7			ld a, (.dmark)  
c7a0 32 65 ee			ld (debug_mark),a  
c7a3 3a b2 c7			ld a, (.dmark+1)  
c7a6 32 66 ee			ld (debug_mark+1),a  
c7a9 3a b3 c7			ld a, (.dmark+2)  
c7ac 32 67 ee			ld (debug_mark+2),a  
c7af 18 03			jr .pastdmark  
c7b1 ..			.dmark: db "AS2"  
c7b4 f1			.pastdmark: pop af  
c7b5			endm  
# End of macro DMARK
c7b5						CALLMONITOR 
c7b5 cd 6f ee			call debug_vector  
c7b8				endm  
# End of macro CALLMONITOR
c7b8					endif 
c7b8 cd 85 9a				call forth_push_numhl 
c7bb			 
c7bb				       NEXTW 
c7bb c3 76 9e			jp macro_next 
c7be				endm 
# End of macro NEXTW
c7be			 
c7be			.CHR: 
c7be				CWHEAD .ENDSTR 57 "CHR" 3 WORD_FLAG_CODE 
c7be 4d				db WORD_SYS_CORE+57             
c7bf fa c7			dw .ENDSTR            
c7c1 04				db 3 + 1 
c7c2 .. 00			db "CHR",0              
c7c6				endm 
# End of macro CWHEAD
c7c6			; | CHR ( u -- n ) The ASCII character value of u is turned into a string n on the stack | DONE 
c7c6					if DEBUG_FORTH_WORDS_KEY 
c7c6						DMARK "CHR" 
c7c6 f5				push af  
c7c7 3a db c7			ld a, (.dmark)  
c7ca 32 65 ee			ld (debug_mark),a  
c7cd 3a dc c7			ld a, (.dmark+1)  
c7d0 32 66 ee			ld (debug_mark+1),a  
c7d3 3a dd c7			ld a, (.dmark+2)  
c7d6 32 67 ee			ld (debug_mark+2),a  
c7d9 18 03			jr .pastdmark  
c7db ..			.dmark: db "CHR"  
c7de f1			.pastdmark: pop af  
c7df			endm  
# End of macro DMARK
c7df						CALLMONITOR 
c7df cd 6f ee			call debug_vector  
c7e2				endm  
# End of macro CALLMONITOR
c7e2					endif 
c7e2					FORTH_DSP_VALUEHL 
c7e2 cd 8a 9c			call macro_dsp_valuehl 
c7e5				endm 
# End of macro FORTH_DSP_VALUEHL
c7e5			 
c7e5					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c7e5 cd 42 9d			call macro_forth_dsp_pop 
c7e8				endm 
# End of macro FORTH_DSP_POP
c7e8			 
c7e8					; save asci byte as a zero term string and push string 
c7e8			 
c7e8 7d					ld a,l 
c7e9 32 bb e2				ld (scratch), a 
c7ec			 
c7ec 3e 00				ld a, 0 
c7ee 32 bc e2				ld (scratch+1), a 
c7f1			 
c7f1 21 bb e2				ld hl, scratch 
c7f4 cd f3 9a				call forth_push_str 
c7f7			 
c7f7			 
c7f7				       NEXTW 
c7f7 c3 76 9e			jp macro_next 
c7fa				endm 
# End of macro NEXTW
c7fa			 
c7fa			 
c7fa			 
c7fa			 
c7fa			.ENDSTR: 
c7fa			; eof 
c7fa			 
# End of file forth_words_str.asm
c7fa			include "forth_words_key.asm" 
c7fa			 
c7fa			; | ## Keyboard Words 
c7fa			 
c7fa			.KEY: 
c7fa				CWHEAD .WAITK 42 "KEY" 3 WORD_FLAG_CODE 
c7fa 3e				db WORD_SYS_CORE+42             
c7fb 2a c8			dw .WAITK            
c7fd 04				db 3 + 1 
c7fe .. 00			db "KEY",0              
c802				endm 
# End of macro CWHEAD
c802			; | KEY ( -- u ) A non-blocking read of keypress | DONE 
c802			; | | The ASCII key (or key code) is pushed to stack. If no key is currently held down then push a 0 
c802			; | | Can use something like this to process: 
c802			; | | > repeat active . key ?dup if emit then #1 until  
c802			 
c802					if DEBUG_FORTH_WORDS_KEY 
c802						DMARK "KEY" 
c802 f5				push af  
c803 3a 17 c8			ld a, (.dmark)  
c806 32 65 ee			ld (debug_mark),a  
c809 3a 18 c8			ld a, (.dmark+1)  
c80c 32 66 ee			ld (debug_mark+1),a  
c80f 3a 19 c8			ld a, (.dmark+2)  
c812 32 67 ee			ld (debug_mark+2),a  
c815 18 03			jr .pastdmark  
c817 ..			.dmark: db "KEY"  
c81a f1			.pastdmark: pop af  
c81b			endm  
# End of macro DMARK
c81b						CALLMONITOR 
c81b cd 6f ee			call debug_vector  
c81e				endm  
# End of macro CALLMONITOR
c81e					endif 
c81e			; TODO currently waits 
c81e cd e4 de				call cin 
c821					;call cin_wait 
c821 6f					ld l, a 
c822 26 00				ld h, 0 
c824 cd 85 9a				call forth_push_numhl 
c827					NEXTW 
c827 c3 76 9e			jp macro_next 
c82a				endm 
# End of macro NEXTW
c82a			.WAITK: 
c82a				CWHEAD .ACCEPT 43 "WAITK" 5 WORD_FLAG_CODE 
c82a 3f				db WORD_SYS_CORE+43             
c82b 5c c8			dw .ACCEPT            
c82d 06				db 5 + 1 
c82e .. 00			db "WAITK",0              
c834				endm 
# End of macro CWHEAD
c834			; | WAITK ( -- w ) Wait for keypress TOS is key press | DONE 
c834					if DEBUG_FORTH_WORDS_KEY 
c834						DMARK "WAI" 
c834 f5				push af  
c835 3a 49 c8			ld a, (.dmark)  
c838 32 65 ee			ld (debug_mark),a  
c83b 3a 4a c8			ld a, (.dmark+1)  
c83e 32 66 ee			ld (debug_mark+1),a  
c841 3a 4b c8			ld a, (.dmark+2)  
c844 32 67 ee			ld (debug_mark+2),a  
c847 18 03			jr .pastdmark  
c849 ..			.dmark: db "WAI"  
c84c f1			.pastdmark: pop af  
c84d			endm  
# End of macro DMARK
c84d						CALLMONITOR 
c84d cd 6f ee			call debug_vector  
c850				endm  
# End of macro CALLMONITOR
c850					endif 
c850 cd de de				call cin_wait 
c853 6f					ld l, a 
c854 26 00				ld h, 0 
c856 cd 85 9a				call forth_push_numhl 
c859					NEXTW 
c859 c3 76 9e			jp macro_next 
c85c				endm 
# End of macro NEXTW
c85c			.ACCEPT: 
c85c				CWHEAD .EDIT 44 "ACCEPT" 6 WORD_FLAG_CODE 
c85c 40				db WORD_SYS_CORE+44             
c85d ba c8			dw .EDIT            
c85f 07				db 6 + 1 
c860 .. 00			db "ACCEPT",0              
c867				endm 
# End of macro CWHEAD
c867			; | ACCEPT ( -- w ) Prompt for text input and push pointer to string | DONE 
c867					; TODO crashes on push 
c867					if DEBUG_FORTH_WORDS_KEY 
c867						DMARK "ACC" 
c867 f5				push af  
c868 3a 7c c8			ld a, (.dmark)  
c86b 32 65 ee			ld (debug_mark),a  
c86e 3a 7d c8			ld a, (.dmark+1)  
c871 32 66 ee			ld (debug_mark+1),a  
c874 3a 7e c8			ld a, (.dmark+2)  
c877 32 67 ee			ld (debug_mark+2),a  
c87a 18 03			jr .pastdmark  
c87c ..			.dmark: db "ACC"  
c87f f1			.pastdmark: pop af  
c880			endm  
# End of macro DMARK
c880						CALLMONITOR 
c880 cd 6f ee			call debug_vector  
c883				endm  
# End of macro CALLMONITOR
c883					endif 
c883 21 b9 e4				ld hl, os_input 
c886 3e 00				ld a, 0 
c888 77					ld (hl),a 
c889 3a 58 ea				ld a,(f_cursor_ptr) 
c88c 16 64				ld d, 100 
c88e 0e 00				ld c, 0 
c890 1e 28				ld e, 40 
c892 cd 17 8d				call input_str 
c895					; TODO perhaps do a type check and wrap in quotes if not a number 
c895 21 b9 e4				ld hl, os_input 
c898					if DEBUG_FORTH_WORDS 
c898						DMARK "AC1" 
c898 f5				push af  
c899 3a ad c8			ld a, (.dmark)  
c89c 32 65 ee			ld (debug_mark),a  
c89f 3a ae c8			ld a, (.dmark+1)  
c8a2 32 66 ee			ld (debug_mark+1),a  
c8a5 3a af c8			ld a, (.dmark+2)  
c8a8 32 67 ee			ld (debug_mark+2),a  
c8ab 18 03			jr .pastdmark  
c8ad ..			.dmark: db "AC1"  
c8b0 f1			.pastdmark: pop af  
c8b1			endm  
# End of macro DMARK
c8b1						CALLMONITOR 
c8b1 cd 6f ee			call debug_vector  
c8b4				endm  
# End of macro CALLMONITOR
c8b4					endif 
c8b4 cd f3 9a				call forth_push_str 
c8b7					NEXTW 
c8b7 c3 76 9e			jp macro_next 
c8ba				endm 
# End of macro NEXTW
c8ba			 
c8ba			.EDIT: 
c8ba				CWHEAD .DEDIT 44 "EDIT" 4 WORD_FLAG_CODE 
c8ba 40				db WORD_SYS_CORE+44             
c8bb 5c c9			dw .DEDIT            
c8bd 05				db 4 + 1 
c8be .. 00			db "EDIT",0              
c8c3				endm 
# End of macro CWHEAD
c8c3			; | EDIT ( u -- u ) Takes string on TOS and allows editing of it. Pushes it back once done. | DONE 
c8c3			 
c8c3					; TODO does not copy from stack 
c8c3					if DEBUG_FORTH_WORDS_KEY 
c8c3						DMARK "EDT" 
c8c3 f5				push af  
c8c4 3a d8 c8			ld a, (.dmark)  
c8c7 32 65 ee			ld (debug_mark),a  
c8ca 3a d9 c8			ld a, (.dmark+1)  
c8cd 32 66 ee			ld (debug_mark+1),a  
c8d0 3a da c8			ld a, (.dmark+2)  
c8d3 32 67 ee			ld (debug_mark+2),a  
c8d6 18 03			jr .pastdmark  
c8d8 ..			.dmark: db "EDT"  
c8db f1			.pastdmark: pop af  
c8dc			endm  
# End of macro DMARK
c8dc						CALLMONITOR 
c8dc cd 6f ee			call debug_vector  
c8df				endm  
# End of macro CALLMONITOR
c8df					endif 
c8df			 
c8df					;FORTH_DSP 
c8df					FORTH_DSP_VALUEHL 
c8df cd 8a 9c			call macro_dsp_valuehl 
c8e2				endm 
# End of macro FORTH_DSP_VALUEHL
c8e2			;		inc hl    ; TODO do type check 
c8e2			 
c8e2			;		call get_word_hl 
c8e2 e5					push hl 
c8e3					if DEBUG_FORTH_WORDS 
c8e3						DMARK "EDp" 
c8e3 f5				push af  
c8e4 3a f8 c8			ld a, (.dmark)  
c8e7 32 65 ee			ld (debug_mark),a  
c8ea 3a f9 c8			ld a, (.dmark+1)  
c8ed 32 66 ee			ld (debug_mark+1),a  
c8f0 3a fa c8			ld a, (.dmark+2)  
c8f3 32 67 ee			ld (debug_mark+2),a  
c8f6 18 03			jr .pastdmark  
c8f8 ..			.dmark: db "EDp"  
c8fb f1			.pastdmark: pop af  
c8fc			endm  
# End of macro DMARK
c8fc						CALLMONITOR 
c8fc cd 6f ee			call debug_vector  
c8ff				endm  
# End of macro CALLMONITOR
c8ff					endif 
c8ff				;	ld a, 0 
c8ff cd 50 90				call strlenz 
c902 23					inc hl 
c903			 
c903 06 00				ld b, 0 
c905 4d					ld c, l 
c906			 
c906 e1					pop hl 
c907 11 b9 e4				ld de, os_input 
c90a					if DEBUG_FORTH_WORDS_KEY 
c90a						DMARK "EDc" 
c90a f5				push af  
c90b 3a 1f c9			ld a, (.dmark)  
c90e 32 65 ee			ld (debug_mark),a  
c911 3a 20 c9			ld a, (.dmark+1)  
c914 32 66 ee			ld (debug_mark+1),a  
c917 3a 21 c9			ld a, (.dmark+2)  
c91a 32 67 ee			ld (debug_mark+2),a  
c91d 18 03			jr .pastdmark  
c91f ..			.dmark: db "EDc"  
c922 f1			.pastdmark: pop af  
c923			endm  
# End of macro DMARK
c923						CALLMONITOR 
c923 cd 6f ee			call debug_vector  
c926				endm  
# End of macro CALLMONITOR
c926					endif 
c926 ed b0				ldir 
c928			 
c928			 
c928 21 b9 e4				ld hl, os_input 
c92b					;ld a, 0 
c92b					;ld (hl),a 
c92b 3a 58 ea				ld a,(f_cursor_ptr) 
c92e 16 64				ld d, 100 
c930 0e 00				ld c, 0 
c932 1e 28				ld e, 40 
c934 cd 17 8d				call input_str 
c937					; TODO perhaps do a type check and wrap in quotes if not a number 
c937 21 b9 e4				ld hl, os_input 
c93a					if DEBUG_FORTH_WORDS 
c93a						DMARK "ED1" 
c93a f5				push af  
c93b 3a 4f c9			ld a, (.dmark)  
c93e 32 65 ee			ld (debug_mark),a  
c941 3a 50 c9			ld a, (.dmark+1)  
c944 32 66 ee			ld (debug_mark+1),a  
c947 3a 51 c9			ld a, (.dmark+2)  
c94a 32 67 ee			ld (debug_mark+2),a  
c94d 18 03			jr .pastdmark  
c94f ..			.dmark: db "ED1"  
c952 f1			.pastdmark: pop af  
c953			endm  
# End of macro DMARK
c953						CALLMONITOR 
c953 cd 6f ee			call debug_vector  
c956				endm  
# End of macro CALLMONITOR
c956					endif 
c956 cd f3 9a				call forth_push_str 
c959					NEXTW 
c959 c3 76 9e			jp macro_next 
c95c				endm 
# End of macro NEXTW
c95c			 
c95c			.DEDIT: 
c95c				CWHEAD .ENDKEY 44 "DEDIT" 5 WORD_FLAG_CODE 
c95c 40				db WORD_SYS_CORE+44             
c95d be c9			dw .ENDKEY            
c95f 06				db 5 + 1 
c960 .. 00			db "DEDIT",0              
c966				endm 
# End of macro CWHEAD
c966			; | DEDIT ( ptr --  ) Takes an address for direct editing in memory. | DONE 
c966			 
c966					; TODO does not copy from stack 
c966					if DEBUG_FORTH_WORDS_KEY 
c966						DMARK "DED" 
c966 f5				push af  
c967 3a 7b c9			ld a, (.dmark)  
c96a 32 65 ee			ld (debug_mark),a  
c96d 3a 7c c9			ld a, (.dmark+1)  
c970 32 66 ee			ld (debug_mark+1),a  
c973 3a 7d c9			ld a, (.dmark+2)  
c976 32 67 ee			ld (debug_mark+2),a  
c979 18 03			jr .pastdmark  
c97b ..			.dmark: db "DED"  
c97e f1			.pastdmark: pop af  
c97f			endm  
# End of macro DMARK
c97f						CALLMONITOR 
c97f cd 6f ee			call debug_vector  
c982				endm  
# End of macro CALLMONITOR
c982					endif 
c982			 
c982					;FORTH_DSP 
c982					FORTH_DSP_VALUEHL 
c982 cd 8a 9c			call macro_dsp_valuehl 
c985				endm 
# End of macro FORTH_DSP_VALUEHL
c985			;		inc hl    ; TODO do type check 
c985			 
c985			;		call get_word_hl 
c985 e5					push hl 
c986 e5					push hl 
c987					FORTH_DSP_POP 
c987 cd 42 9d			call macro_forth_dsp_pop 
c98a				endm 
# End of macro FORTH_DSP_POP
c98a e1					pop hl 
c98b					if DEBUG_FORTH_WORDS 
c98b						DMARK "EDp" 
c98b f5				push af  
c98c 3a a0 c9			ld a, (.dmark)  
c98f 32 65 ee			ld (debug_mark),a  
c992 3a a1 c9			ld a, (.dmark+1)  
c995 32 66 ee			ld (debug_mark+1),a  
c998 3a a2 c9			ld a, (.dmark+2)  
c99b 32 67 ee			ld (debug_mark+2),a  
c99e 18 03			jr .pastdmark  
c9a0 ..			.dmark: db "EDp"  
c9a3 f1			.pastdmark: pop af  
c9a4			endm  
# End of macro DMARK
c9a4						CALLMONITOR 
c9a4 cd 6f ee			call debug_vector  
c9a7				endm  
# End of macro CALLMONITOR
c9a7					endif 
c9a7				;	ld a, 0 
c9a7 cd 50 90				call strlenz 
c9aa 23					inc hl 
c9ab			 
c9ab 06 00				ld b, 0 
c9ad 4d					ld c, l 
c9ae			 
c9ae e1					pop hl 
c9af			 
c9af					;ld a, 0 
c9af					;ld (hl),a 
c9af 3a 58 ea				ld a,(f_cursor_ptr) 
c9b2 16 64				ld d, 100 
c9b4 0e 00				ld c, 0 
c9b6 1e 28				ld e, 40 
c9b8 cd 17 8d				call input_str 
c9bb					; TODO perhaps do a type check and wrap in quotes if not a number 
c9bb					NEXTW 
c9bb c3 76 9e			jp macro_next 
c9be				endm 
# End of macro NEXTW
c9be			 
c9be			 
c9be			.ENDKEY: 
c9be			; eof 
c9be			 
# End of file forth_words_key.asm
c9be			include "forth_words_const.asm" 
c9be			 
c9be			; | ## Constants (i.e. Useful memory addresses that can set or get features) 
c9be			 
c9be			 
c9be			.SPITIME: 
c9be				CWHEAD .VA 99 "SPITIME" 7 WORD_FLAG_CODE 
c9be 77				db WORD_SYS_CORE+99             
c9bf d3 c9			dw .VA            
c9c1 08				db 7 + 1 
c9c2 .. 00			db "SPITIME",0              
c9ca				endm 
# End of macro CWHEAD
c9ca			; | SPITIME ( -- u1 )   Pushes address of the SPI pulse counter/delay to stack | DONE 
c9ca			; 
c9ca			; | | If using BANK devices then leave as is. 
c9ca			; | | Only really useful for the CARTDEV where other devices may be far too slow. In particular 
c9ca			; | | the multiplexing of the PicoSPINet addon which might not be running fast enough for all of the nodes 
c9ca			 
c9ca 21 5e ea				ld hl, spi_clktime  
c9cd cd 85 9a				call forth_push_numhl 
c9d0			 
c9d0					NEXTW 
c9d0 c3 76 9e			jp macro_next 
c9d3				endm 
# End of macro NEXTW
c9d3			 
c9d3			 
c9d3			.VA: 
c9d3				CWHEAD .SYMBOL 99 "VA" 2 WORD_FLAG_CODE 
c9d3 77				db WORD_SYS_CORE+99             
c9d4 e3 c9			dw .SYMBOL            
c9d6 03				db 2 + 1 
c9d7 .. 00			db "VA",0              
c9da				endm 
# End of macro CWHEAD
c9da			; | VA ( -- u1 )   Pushes address of block of memory used for v1..5 | DONE 
c9da 21 22 ea				ld hl, cli_var_array 
c9dd cd 85 9a				call forth_push_numhl 
c9e0			 
c9e0					NEXTW 
c9e0 c3 76 9e			jp macro_next 
c9e3				endm 
# End of macro NEXTW
c9e3			 
c9e3			.SYMBOL: 
c9e3				CWHEAD .ENDCONST 99 "SYMBOL" 6 WORD_FLAG_CODE 
c9e3 77				db WORD_SYS_CORE+99             
c9e4 ed ca			dw .ENDCONST            
c9e6 07				db 6 + 1 
c9e7 .. 00			db "SYMBOL",0              
c9ee				endm 
# End of macro CWHEAD
c9ee			; | SYMBOL ( u1 -- )  Get the address of a system symbol from a look up table to TOS  | DONE 
c9ee			; | 
c9ee			; | | The value is the number reference and the final address is pushed to stack 
c9ee			 
c9ee			; | | ``` 
c9ee			; | | dw sym_table 
c9ee			; | | dw nmi_vector 
c9ee			; | | dw cli_autodisplay 
c9ee			; | | dw cli_data_sp 
c9ee			; | | dw cli_data_stack 
c9ee			; | | dw cli_loop_sp 
c9ee			; | | dw cli_loop_stack 
c9ee			; | | dw cli_var_array 
c9ee			; | | dw cursor_col 
c9ee			; | | dw cursor_ptr 
c9ee			; | | ; 10 
c9ee			; | | dw cursor_row 
c9ee			; | | dw debug_mark 
c9ee			; | | dw display_fb0 
c9ee			; | | dw display_fb1 
c9ee			; | | dw display_fb2 
c9ee			; | | dw display_fb3 
c9ee			; | | dw display_fb_active 
c9ee			; | | dw execscratch 
c9ee			; | | dw f_cursor_ptr 
c9ee			; | | dw hardware_word 
c9ee			; | | ;20 
c9ee			; | | dw input_at_cursor 
c9ee			; | | dw input_at_pos 
c9ee			; | | dw input_cur_flash 
c9ee			; | | dw input_cur_onoff 
c9ee			; | | dw input_cursor 
c9ee			; | | dw input_display_size 
c9ee			; | | dw input_len 
c9ee			; | | dw input_ptr 
c9ee			; | | dw input_size 
c9ee			; | | dw input_start 
c9ee			; | | ; 30 
c9ee			; | | dw input_str 
c9ee			; | | dw input_under_cursor 
c9ee			; | | dw os_cli_cmd 
c9ee			; | | dw os_cur_ptr 
c9ee			; | | dw os_current_i 
c9ee			; | | dw os_input 
c9ee			; | | dw os_last_cmd 
c9ee			; | | dw os_last_new_uword 
c9ee			; | | dw debug_vector 
c9ee			; | | dw os_view_hl 
c9ee			; | | ;40 
c9ee			; | | dw os_word_scratch 
c9ee			; | | dw portbctl 
c9ee			; | | dw portbdata 
c9ee			; | | dw spi_cartdev 
c9ee			; | | dw spi_cartdev2 
c9ee			; | | dw spi_clktime 
c9ee			; | | dw spi_device 
c9ee			; | | dw spi_device_id 
c9ee			; | | dw spi_portbyte 
c9ee			; | | dw stackstore 
c9ee			; | | ; 50 
c9ee			; | | if STORAGE_SE 
c9ee			; | | dw storage_actl 
c9ee			; | | dw storage_adata 
c9ee			; | | else 
c9ee			; | | dw 0 
c9ee			; | | dw 0 
c9ee			; | | endif 
c9ee			; | | dw storage_append 
c9ee			; | | if STORAGE_SE 
c9ee			; | | dw storage_bctl 
c9ee			; | | else 
c9ee			; | | dw 0 
c9ee			; | | endif 
c9ee			; | | dw store_bank_active 
c9ee			; | | dw store_filecache 
c9ee			; | | dw store_longread 
c9ee			; | | dw store_openaddr 
c9ee			; | | dw store_openext 
c9ee			; | | dw store_openmaxext 
c9ee			; | | ; 60 
c9ee			; | | dw store_page 
c9ee			; | | dw store_readbuf 
c9ee			; | | dw store_readcont 
c9ee			; | | dw store_readptr 
c9ee			; | | dw store_tmpext 
c9ee			; | | dw store_tmpid 
c9ee			; | | dw store_tmppageid 
c9ee			; | | dw malloc 
c9ee			; | | dw free 
c9ee			; | | dw cin 
c9ee			; | | ; 70 
c9ee			; | | dw cin_wait 
c9ee			; | | dw forth_push_numhl 
c9ee			; | | dw forth_push_str 
c9ee			; | | ``` 
c9ee			 
c9ee					if DEBUG_FORTH_WORDS_KEY 
c9ee						DMARK "SYM" 
c9ee f5				push af  
c9ef 3a 03 ca			ld a, (.dmark)  
c9f2 32 65 ee			ld (debug_mark),a  
c9f5 3a 04 ca			ld a, (.dmark+1)  
c9f8 32 66 ee			ld (debug_mark+1),a  
c9fb 3a 05 ca			ld a, (.dmark+2)  
c9fe 32 67 ee			ld (debug_mark+2),a  
ca01 18 03			jr .pastdmark  
ca03 ..			.dmark: db "SYM"  
ca06 f1			.pastdmark: pop af  
ca07			endm  
# End of macro DMARK
ca07						CALLMONITOR 
ca07 cd 6f ee			call debug_vector  
ca0a				endm  
# End of macro CALLMONITOR
ca0a					endif 
ca0a			 
ca0a					FORTH_DSP_VALUEHL 
ca0a cd 8a 9c			call macro_dsp_valuehl 
ca0d				endm 
# End of macro FORTH_DSP_VALUEHL
ca0d			 
ca0d 7d					ld a, l     
ca0e			 
ca0e			 
ca0e					if DEBUG_FORTH_WORDS 
ca0e						DMARK "SY1" 
ca0e f5				push af  
ca0f 3a 23 ca			ld a, (.dmark)  
ca12 32 65 ee			ld (debug_mark),a  
ca15 3a 24 ca			ld a, (.dmark+1)  
ca18 32 66 ee			ld (debug_mark+1),a  
ca1b 3a 25 ca			ld a, (.dmark+2)  
ca1e 32 67 ee			ld (debug_mark+2),a  
ca21 18 03			jr .pastdmark  
ca23 ..			.dmark: db "SY1"  
ca26 f1			.pastdmark: pop af  
ca27			endm  
# End of macro DMARK
ca27						CALLMONITOR 
ca27 cd 6f ee			call debug_vector  
ca2a				endm  
# End of macro CALLMONITOR
ca2a					endif 
ca2a					 
ca2a f5					push af	 
ca2b					FORTH_DSP_POP 
ca2b cd 42 9d			call macro_forth_dsp_pop 
ca2e				endm 
# End of macro FORTH_DSP_POP
ca2e f1					pop af 
ca2f			 
ca2f cb 27				sla a  
ca31				 
ca31					 
ca31					if DEBUG_FORTH_WORDS 
ca31						DMARK "SY" 
ca31 f5				push af  
ca32 3a 46 ca			ld a, (.dmark)  
ca35 32 65 ee			ld (debug_mark),a  
ca38 3a 47 ca			ld a, (.dmark+1)  
ca3b 32 66 ee			ld (debug_mark+1),a  
ca3e 3a 48 ca			ld a, (.dmark+2)  
ca41 32 67 ee			ld (debug_mark+2),a  
ca44 18 02			jr .pastdmark  
ca46 ..			.dmark: db "SY"  
ca48 f1			.pastdmark: pop af  
ca49			endm  
# End of macro DMARK
ca49						CALLMONITOR 
ca49 cd 6f ee			call debug_vector  
ca4c				endm  
# End of macro CALLMONITOR
ca4c					endif 
ca4c			 
ca4c 21 5b ca				ld hl, sym_table 
ca4f cd ea 8c				call addatohl 
ca52 cd f8 9d				call loadwordinhl 
ca55 cd 85 9a				call forth_push_numhl 
ca58			 
ca58			 
ca58				       NEXTW 
ca58 c3 76 9e			jp macro_next 
ca5b				endm 
# End of macro NEXTW
ca5b			 
ca5b			sym_table: 
ca5b			 
ca5b			; 0 
ca5b 5b ca		dw sym_table 
ca5d 72 ee		dw nmi_vector 
ca5f 36 ea		dw cli_autodisplay 
ca61 e8 e9		dw cli_data_sp 
ca63 22 e8		dw cli_data_stack 
ca65 ea e9		dw cli_loop_sp 
ca67 24 e9		dw cli_loop_stack 
ca69 22 ea		dw cli_var_array 
ca6b bf eb		dw cursor_col 
ca6d bd eb		dw cursor_ptr 
ca6f			; 10 
ca6f be eb		dw cursor_row 
ca71 65 ee		dw debug_mark 
ca73 ab ed		dw display_fb0 
ca75 0a ed		dw display_fb1 
ca77 c8 eb		dw display_fb2 
ca79 69 ec		dw display_fb3 
ca7b c6 eb		dw display_fb_active 
ca7d ba e3		dw execscratch 
ca7f 58 ea		dw f_cursor_ptr 
ca81 75 ee		dw hardware_word 
ca83			;20 
ca83 5c ee		dw input_at_cursor 
ca85 5e ee		dw input_at_pos 
ca87 5a ee		dw input_cur_flash 
ca89 59 ee		dw input_cur_onoff 
ca8b 4f ee		dw input_cursor 
ca8d 5f ee		dw input_display_size 
ca8f 54 ee		dw input_len 
ca91 63 ee		dw input_ptr 
ca93 60 ee		dw input_size 
ca95 61 ee		dw input_start 
ca97			; 30 
ca97 17 8d		dw input_str 
ca99 5d ee		dw input_under_cursor 
ca9b e2 e5		dw os_cli_cmd 
ca9d de e5		dw os_cur_ptr 
ca9f e0 e5		dw os_current_i 
caa1 b9 e4		dw os_input 
caa3 e1 e6		dw os_last_cmd 
caa5 b8 e5		dw os_last_new_uword 
caa7 6f ee		dw debug_vector 
caa9 9d e2		dw os_view_hl 
caab			;40 
caab c0 e5		dw os_word_scratch 
caad c3 00		dw portbctl 
caaf c1 00		dw portbdata 
cab1 5d ea		dw spi_cartdev 
cab3 5c ea		dw spi_cartdev2 
cab5 5e ea		dw spi_clktime 
cab7 5a ea		dw spi_device 
cab9 59 ea		dw spi_device_id 
cabb 5b ea		dw spi_portbyte 
cabd a1 eb		dw stackstore 
cabf			; 50 
cabf			if STORAGE_SE 
cabf			dw storage_actl 
cabf			dw storage_adata 
cabf			else 
cabf 00 00		dw 0 
cac1 00 00		dw 0 
cac3			endif 
cac3 77 88		dw storage_append 
cac5			if STORAGE_SE 
cac5			dw storage_bctl 
cac5			else 
cac5 00 00		dw 0 
cac7			endif 
cac7 8d eb		dw store_bank_active 
cac9 61 ea		dw store_filecache 
cacb 6f ea		dw store_longread 
cacd 65 ea		dw store_openaddr 
cacf 64 ea		dw store_openext 
cad1 63 ea		dw store_openmaxext 
cad3			; 60 
cad3 74 ea		dw store_page 
cad5 70 ea		dw store_readbuf 
cad7 67 ea		dw store_readcont 
cad9 72 ea		dw store_readptr 
cadb 67 ea		dw store_tmpext 
cadd 68 ea		dw store_tmpid 
cadf 5f ea		dw store_tmppageid 
cae1 c5 90		dw malloc 
cae3 8f 91		dw free 
cae5 e4 de		dw cin 
cae7			; 70 
cae7 de de		dw cin_wait 
cae9 85 9a		dw forth_push_numhl 
caeb f3 9a		dw forth_push_str 
caed			 
caed			 
caed			.ENDCONST: 
caed			 
caed			; eof 
caed			 
caed			 
# End of file forth_words_const.asm
caed			 
caed			if STORAGE_SE 
caed			   	include "forth_words_storage.asm" 
caed			endif 
caed				include "forth_words_device.asm" 
caed			; Device related words 
caed			 
caed			; | ## Device Words 
caed			 
caed			;if SOUND_ENABLE 
caed			;.NOTE: 
caed			;	CWHEAD .AFTERSOUND 31 "NOTE" 4 WORD_FLAG_CODE 
caed			;; NOTE ( ud uf --  )  Plays a note of frequency uf for the duration of ud millseconds  TODO 
caed			;		if DEBUG_FORTH_WORDS_KEY 
caed			;			DMARK "NTE" 
caed			;			CALLMONITOR 
caed			;		endif 
caed			; 
caed			;	 
caed			; 
caed			;		NEXTW 
caed			;.AFTERSOUND: 
caed			;endif 
caed			 
caed			 
caed			USE_GPIO: equ 0 
caed			 
caed			if USE_GPIO 
caed			.GP1: 
caed				CWHEAD .GP2 31 "IOIN" 4 WORD_FLAG_CODE 
caed			;  IOIN ( u1 -- u )    Perform a GPIO read of pin u1 and push result   
caed					NEXTW 
caed			.GP2: 
caed				CWHEAD .GP3 31 "IOOUT" 5 WORD_FLAG_CODE 
caed			;  IOOUT ( u1 u2 --  )    Perform a GPIO write of pin u1 with pin set to 0 or 1 in u2   
caed			 
caed					NEXTW 
caed			 
caed			.GP3: 
caed				CWHEAD .GP4 31 "IOBYTE" 5 WORD_FLAG_CODE 
caed			;  IOBYTE ( u1 --  )    Perform a GPIO write of byte u1   
caed			 
caed					NEXTW 
caed			 
caed			.GP4: 
caed				CWHEAD .SIN 31 "IOSET" 5 WORD_FLAG_CODE 
caed			;  IOSET ( u1 --  )    Setup GPIO pins for I/O direction. Bit is set for write else read pin   
caed			 
caed					NEXTW 
caed			.SIN: 
caed			 
caed			 
caed			endif 
caed			 
caed			 
caed				CWHEAD .SOUT 31 "IN" 2 WORD_FLAG_CODE 
caed 33				db WORD_SYS_CORE+31             
caee 22 cb			dw .SOUT            
caf0 03				db 2 + 1 
caf1 .. 00			db "IN",0              
caf4				endm 
# End of macro CWHEAD
caf4			; | IN ( u1 -- u )    Perform Z80 IN with u1 being the port number. Push result to TOS | TO TEST 
caf4					if DEBUG_FORTH_WORDS_KEY 
caf4						DMARK "IN." 
caf4 f5				push af  
caf5 3a 09 cb			ld a, (.dmark)  
caf8 32 65 ee			ld (debug_mark),a  
cafb 3a 0a cb			ld a, (.dmark+1)  
cafe 32 66 ee			ld (debug_mark+1),a  
cb01 3a 0b cb			ld a, (.dmark+2)  
cb04 32 67 ee			ld (debug_mark+2),a  
cb07 18 03			jr .pastdmark  
cb09 ..			.dmark: db "IN."  
cb0c f1			.pastdmark: pop af  
cb0d			endm  
# End of macro DMARK
cb0d						CALLMONITOR 
cb0d cd 6f ee			call debug_vector  
cb10				endm  
# End of macro CALLMONITOR
cb10					endif 
cb10					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
cb10 cd 8a 9c			call macro_dsp_valuehl 
cb13				endm 
# End of macro FORTH_DSP_VALUEHL
cb13			 
cb13 e5					push hl 
cb14			 
cb14					; destroy value TOS 
cb14			 
cb14					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
cb14 cd 42 9d			call macro_forth_dsp_pop 
cb17				endm 
# End of macro FORTH_DSP_POP
cb17			 
cb17					; one value on hl get other one back 
cb17			 
cb17 c1					pop bc 
cb18			 
cb18					; do the sub 
cb18			;		ex de, hl 
cb18			 
cb18 ed 68				in l,(c) 
cb1a			 
cb1a					; save it 
cb1a			 
cb1a 26 00				ld h,0 
cb1c			 
cb1c					; TODO push value back onto stack for another op etc 
cb1c			 
cb1c cd 85 9a				call forth_push_numhl 
cb1f					NEXTW 
cb1f c3 76 9e			jp macro_next 
cb22				endm 
# End of macro NEXTW
cb22			.SOUT: 
cb22				CWHEAD .SPIO 32 "OUT" 3 WORD_FLAG_CODE 
cb22 34				db WORD_SYS_CORE+32             
cb23 75 cb			dw .SPIO            
cb25 04				db 3 + 1 
cb26 .. 00			db "OUT",0              
cb2a				endm 
# End of macro CWHEAD
cb2a			; | OUT ( u1 u2 -- ) Perform Z80 OUT to port u2 sending byte u1 | DONE 
cb2a					if DEBUG_FORTH_WORDS_KEY 
cb2a						DMARK "OUT" 
cb2a f5				push af  
cb2b 3a 3f cb			ld a, (.dmark)  
cb2e 32 65 ee			ld (debug_mark),a  
cb31 3a 40 cb			ld a, (.dmark+1)  
cb34 32 66 ee			ld (debug_mark+1),a  
cb37 3a 41 cb			ld a, (.dmark+2)  
cb3a 32 67 ee			ld (debug_mark+2),a  
cb3d 18 03			jr .pastdmark  
cb3f ..			.dmark: db "OUT"  
cb42 f1			.pastdmark: pop af  
cb43			endm  
# End of macro DMARK
cb43						CALLMONITOR 
cb43 cd 6f ee			call debug_vector  
cb46				endm  
# End of macro CALLMONITOR
cb46					endif 
cb46			 
cb46					; get port 
cb46			 
cb46					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
cb46 cd 8a 9c			call macro_dsp_valuehl 
cb49				endm 
# End of macro FORTH_DSP_VALUEHL
cb49			 
cb49 e5					push hl 
cb4a			 
cb4a					; destroy value TOS 
cb4a			 
cb4a					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
cb4a cd 42 9d			call macro_forth_dsp_pop 
cb4d				endm 
# End of macro FORTH_DSP_POP
cb4d			 
cb4d					; get byte to send 
cb4d			 
cb4d					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
cb4d cd 8a 9c			call macro_dsp_valuehl 
cb50				endm 
# End of macro FORTH_DSP_VALUEHL
cb50			 
cb50			;		push hl 
cb50			 
cb50					; destroy value TOS 
cb50			 
cb50					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
cb50 cd 42 9d			call macro_forth_dsp_pop 
cb53				endm 
# End of macro FORTH_DSP_POP
cb53			 
cb53					; one value on hl get other one back 
cb53			 
cb53			;		pop hl 
cb53			 
cb53 c1					pop bc 
cb54			 
cb54					if DEBUG_FORTH_WORDS 
cb54						DMARK "OUT" 
cb54 f5				push af  
cb55 3a 69 cb			ld a, (.dmark)  
cb58 32 65 ee			ld (debug_mark),a  
cb5b 3a 6a cb			ld a, (.dmark+1)  
cb5e 32 66 ee			ld (debug_mark+1),a  
cb61 3a 6b cb			ld a, (.dmark+2)  
cb64 32 67 ee			ld (debug_mark+2),a  
cb67 18 03			jr .pastdmark  
cb69 ..			.dmark: db "OUT"  
cb6c f1			.pastdmark: pop af  
cb6d			endm  
# End of macro DMARK
cb6d						CALLMONITOR 
cb6d cd 6f ee			call debug_vector  
cb70				endm  
# End of macro CALLMONITOR
cb70					endif 
cb70			 
cb70 ed 69				out (c), l 
cb72			 
cb72					NEXTW 
cb72 c3 76 9e			jp macro_next 
cb75				endm 
# End of macro NEXTW
cb75			 
cb75			 
cb75			.SPIO: 
cb75			 
cb75			if STORAGE_SE 
cb75				CWHEAD .SPICEH 61 "SPICEL" 6 WORD_FLAG_CODE 
cb75			; | SPICEL ( -- ) Set SPI CE low for the currently selected device |  DONE 
cb75			 
cb75					call spi_ce_low 
cb75			    NEXTW 
cb75			 
cb75			.SPICEH: 
cb75				CWHEAD .SPIOb 61 "SPICEH" 6 WORD_FLAG_CODE 
cb75			; | SPICEH ( -- ) Set SPI CE high for the currently selected device |  DONE 
cb75			 
cb75					call spi_ce_high 
cb75			    NEXTW 
cb75			 
cb75			 
cb75			.SPIOb: 
cb75			 
cb75				CWHEAD .SPII 61 "SPIO" 4 WORD_FLAG_CODE 
cb75			; | SPIO ( u1 -- ) Send byte u1 to SPI  |  DONE 
cb75			 
cb75					if DEBUG_FORTH_WORDS_KEY 
cb75						DMARK "SPo" 
cb75						CALLMONITOR 
cb75					endif 
cb75					; get port 
cb75			 
cb75			 
cb75					; get byte to send 
cb75			 
cb75					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
cb75			 
cb75			;		push hl    ; u1  
cb75			 
cb75					; destroy value TOS 
cb75			 
cb75					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
cb75			 
cb75					; one value on hl get other one back 
cb75			 
cb75			;		pop hl   ; u2 - addr 
cb75			 
cb75					; TODO Send SPI byte 
cb75			 
cb75			;		push hl 
cb75			;		call spi_ce_low 
cb75			;		pop hl 
cb75					ld a, l 
cb75					call spi_send_byte 
cb75			;		call spi_ce_high 
cb75			 
cb75					NEXTW 
cb75			 
cb75			.SPII: 
cb75				CWHEAD .SESEL 62 "SPII" 5 WORD_FLAG_CODE 
cb75			; | SPII ( -- u1 ) Get a byte from SPI  | DONE 
cb75					if DEBUG_FORTH_WORDS_KEY 
cb75						DMARK "SPi" 
cb75						CALLMONITOR 
cb75					endif 
cb75			 
cb75					; TODO Get SPI byte 
cb75			 
cb75					call spi_read_byte 
cb75			 
cb75					if DEBUG_FORTH_WORDS 
cb75						DMARK "Si2" 
cb75						CALLMONITOR 
cb75					endif 
cb75					ld h, 0 
cb75					ld l, a 
cb75					if DEBUG_FORTH_WORDS 
cb75						DMARK "Si3" 
cb75						CALLMONITOR 
cb75					endif 
cb75					call forth_push_numhl 
cb75			 
cb75					NEXTW 
cb75			 
cb75			 
cb75			 
cb75			.SESEL: 
cb75				CWHEAD .CARTDEV 82 "BANK" 4 WORD_FLAG_CODE 
cb75			; | BANK ( u1 -- ) Select Serial EEPROM Bank Device at bank address u1 1-5 (disables CARTDEV). Set to zero to disable storage. | DONE 
cb75					if DEBUG_FORTH_WORDS_KEY 
cb75						DMARK "BNK" 
cb75						CALLMONITOR 
cb75					endif 
cb75			 
cb75					ld a, 255 
cb75					ld (spi_cartdev), a 
cb75			 
cb75					; get bank 
cb75			 
cb75					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
cb75			 
cb75			;		push hl 
cb75			 
cb75					; destroy value TOS 
cb75			 
cb75					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
cb75			 
cb75					; one value on hl get other one back 
cb75			 
cb75			;		pop hl 
cb75			 
cb75			 
cb75					ld c, SPI_CE_HIGH 
cb75					ld b, '0'    ; human readable bank number 
cb75			 
cb75					ld a, l 
cb75			 
cb75					if DEBUG_FORTH_WORDS 
cb75						DMARK "BNK" 
cb75						CALLMONITOR 
cb75					endif 
cb75			 
cb75					; active low 
cb75			 
cb75					cp 0 
cb75					jr z, .bset 
cb75					cp 1 
cb75					jr nz, .b2 
cb75					res 0, c 
cb75					ld b, '1'    ; human readable bank number 
cb75			.b2:		cp 2 
cb75					jr nz, .b3 
cb75					res 1, c 
cb75					ld b, '2'    ; human readable bank number 
cb75			.b3:		cp 3 
cb75					jr nz, .b4 
cb75					res 2, c 
cb75					ld b, '3'    ; human readable bank number 
cb75			.b4:		cp 4 
cb75					jr nz, .b5 
cb75					res 3, c 
cb75					ld b, '4'    ; human readable bank number 
cb75			.b5:		cp 5 
cb75					jr nz, .bset 
cb75					res 4, c 
cb75					ld b, '5'    ; human readable bank number 
cb75			 
cb75			.bset: 
cb75					ld a, c 
cb75					ld (spi_device),a 
cb75					ld a, b 
cb75					ld (spi_device_id),a 
cb75					if DEBUG_FORTH_WORDS 
cb75						DMARK "BN2" 
cb75						CALLMONITOR 
cb75					endif 
cb75			 
cb75					; set default SPI clk pulse time as disabled for BANK use 
cb75			 
cb75					ld a, 0 
cb75					ld (spi_clktime), a 
cb75			 
cb75					NEXTW 
cb75			 
cb75			.CARTDEV: 
cb75				CWHEAD .ENDDEVICE 82 "CARTDEV" 7 WORD_FLAG_CODE 
cb75			; | CARTDEV ( u1 -- ) Select cart device 1-8 (Disables BANK). Set to zero to disable devices. |  DONE 
cb75					if DEBUG_FORTH_WORDS_KEY 
cb75						DMARK "CDV" 
cb75						CALLMONITOR 
cb75					endif 
cb75			 
cb75					; disable se storage bank selection 
cb75			 
cb75					ld a, SPI_CE_HIGH		; ce high 
cb75					ld (spi_device), a 
cb75			 
cb75					; get bank 
cb75			 
cb75					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
cb75			 
cb75			;		push hl 
cb75			 
cb75					; destroy value TOS 
cb75			 
cb75					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
cb75			 
cb75					; one value on hl get other one back 
cb75			 
cb75			;		pop hl 
cb75			 
cb75					; active low 
cb75			 
cb75					ld c, 255 
cb75			 
cb75					ld a, l 
cb75					if DEBUG_FORTH_WORDS 
cb75						DMARK "CDV" 
cb75						CALLMONITOR 
cb75					endif 
cb75					cp 0 
cb75					jr z, .cset 
cb75					cp 1 
cb75					jr nz, .c2 
cb75					res 0, c 
cb75			.c2:		cp 2 
cb75					jr nz, .c3 
cb75					res 1, c 
cb75			.c3:		cp 3 
cb75					jr nz, .c4 
cb75					res 2, c 
cb75			.c4:		cp 4 
cb75					jr nz, .c5 
cb75					res 3, c 
cb75			.c5:		cp 5 
cb75					jr nz, .c6 
cb75					res 4, c 
cb75			.c6:		cp 6 
cb75					jr nz, .c7 
cb75					res 5, c 
cb75			.c7:		cp 7 
cb75					jr nz, .c8 
cb75					res 6, c 
cb75			.c8:		cp 8 
cb75					jr nz, .cset 
cb75					res 7, c 
cb75			.cset:		ld a, c 
cb75					ld (spi_cartdev),a 
cb75			 
cb75					if DEBUG_FORTH_WORDS 
cb75						DMARK "CD2" 
cb75						CALLMONITOR 
cb75					endif 
cb75			 
cb75					; set default SPI clk pulse time as 10ms for CARTDEV use 
cb75			 
cb75					ld a, $0a 
cb75					ld (spi_clktime), a 
cb75					NEXTW 
cb75			endif 
cb75			 
cb75			.ENDDEVICE: 
cb75			; eof 
cb75			 
# End of file forth_words_device.asm
cb75			 
cb75			; var handler 
cb75			 
cb75			 
cb75			.VARS: 
cb75				CWHEAD .V0 99 "VAR" 3 WORD_FLAG_CODE 
cb75 77				db WORD_SYS_CORE+99             
cb76 26 cc			dw .V0            
cb78 04				db 3 + 1 
cb79 .. 00			db "VAR",0              
cb7d				endm 
# End of macro CWHEAD
cb7d			;| VAR ( u1 -- )  Get the address of the variable referenced on TOS  | TO TEST 
cb7d			;| 
cb7d			;| The variable name should consist of a single letter. e.g. "a" 
cb7d			;! If a full string is passed then only the first char is looked at 
cb7d			;| Any other char could exceed bounds checks!  
cb7d			 
cb7d					if DEBUG_FORTH_WORDS_KEY 
cb7d						DMARK "VAR" 
cb7d f5				push af  
cb7e 3a 92 cb			ld a, (.dmark)  
cb81 32 65 ee			ld (debug_mark),a  
cb84 3a 93 cb			ld a, (.dmark+1)  
cb87 32 66 ee			ld (debug_mark+1),a  
cb8a 3a 94 cb			ld a, (.dmark+2)  
cb8d 32 67 ee			ld (debug_mark+2),a  
cb90 18 03			jr .pastdmark  
cb92 ..			.dmark: db "VAR"  
cb95 f1			.pastdmark: pop af  
cb96			endm  
# End of macro DMARK
cb96						CALLMONITOR 
cb96 cd 6f ee			call debug_vector  
cb99				endm  
# End of macro CALLMONITOR
cb99					endif 
cb99			 
cb99					FORTH_DSP_VALUEHL 
cb99 cd 8a 9c			call macro_dsp_valuehl 
cb9c				endm 
# End of macro FORTH_DSP_VALUEHL
cb9c			 
cb9c 7e					ld a, (hl)    ; get first char on of the string 
cb9d			 
cb9d			 
cb9d					if DEBUG_FORTH_WORDS 
cb9d						DMARK "VR1" 
cb9d f5				push af  
cb9e 3a b2 cb			ld a, (.dmark)  
cba1 32 65 ee			ld (debug_mark),a  
cba4 3a b3 cb			ld a, (.dmark+1)  
cba7 32 66 ee			ld (debug_mark+1),a  
cbaa 3a b4 cb			ld a, (.dmark+2)  
cbad 32 67 ee			ld (debug_mark+2),a  
cbb0 18 03			jr .pastdmark  
cbb2 ..			.dmark: db "VR1"  
cbb5 f1			.pastdmark: pop af  
cbb6			endm  
# End of macro DMARK
cbb6						CALLMONITOR 
cbb6 cd 6f ee			call debug_vector  
cbb9				endm  
# End of macro CALLMONITOR
cbb9					endif 
cbb9					 
cbb9 f5					push af	 
cbba					FORTH_DSP_POP 
cbba cd 42 9d			call macro_forth_dsp_pop 
cbbd				endm 
# End of macro FORTH_DSP_POP
cbbd f1					pop af 
cbbe			 
cbbe					; convert to upper 
cbbe			 
cbbe cd 5f 8f				call to_upper 
cbc1					if DEBUG_FORTH_WORDS 
cbc1						DMARK "Vaa" 
cbc1 f5				push af  
cbc2 3a d6 cb			ld a, (.dmark)  
cbc5 32 65 ee			ld (debug_mark),a  
cbc8 3a d7 cb			ld a, (.dmark+1)  
cbcb 32 66 ee			ld (debug_mark+1),a  
cbce 3a d8 cb			ld a, (.dmark+2)  
cbd1 32 67 ee			ld (debug_mark+2),a  
cbd4 18 03			jr .pastdmark  
cbd6 ..			.dmark: db "Vaa"  
cbd9 f1			.pastdmark: pop af  
cbda			endm  
# End of macro DMARK
cbda						CALLMONITOR 
cbda cd 6f ee			call debug_vector  
cbdd				endm  
# End of macro CALLMONITOR
cbdd					endif 
cbdd 06 41				ld b, 'A' 
cbdf 90					sub b			; set offset 
cbe0					if DEBUG_FORTH_WORDS 
cbe0						DMARK "Vbb" 
cbe0 f5				push af  
cbe1 3a f5 cb			ld a, (.dmark)  
cbe4 32 65 ee			ld (debug_mark),a  
cbe7 3a f6 cb			ld a, (.dmark+1)  
cbea 32 66 ee			ld (debug_mark+1),a  
cbed 3a f7 cb			ld a, (.dmark+2)  
cbf0 32 67 ee			ld (debug_mark+2),a  
cbf3 18 03			jr .pastdmark  
cbf5 ..			.dmark: db "Vbb"  
cbf8 f1			.pastdmark: pop af  
cbf9			endm  
# End of macro DMARK
cbf9						CALLMONITOR 
cbf9 cd 6f ee			call debug_vector  
cbfc				endm  
# End of macro CALLMONITOR
cbfc					endif 
cbfc cb 27				sla a  
cbfe				 
cbfe					 
cbfe					if DEBUG_FORTH_WORDS 
cbfe						DMARK "VR2" 
cbfe f5				push af  
cbff 3a 13 cc			ld a, (.dmark)  
cc02 32 65 ee			ld (debug_mark),a  
cc05 3a 14 cc			ld a, (.dmark+1)  
cc08 32 66 ee			ld (debug_mark+1),a  
cc0b 3a 15 cc			ld a, (.dmark+2)  
cc0e 32 67 ee			ld (debug_mark+2),a  
cc11 18 03			jr .pastdmark  
cc13 ..			.dmark: db "VR2"  
cc16 f1			.pastdmark: pop af  
cc17			endm  
# End of macro DMARK
cc17						CALLMONITOR 
cc17 cd 6f ee			call debug_vector  
cc1a				endm  
# End of macro CALLMONITOR
cc1a					endif 
cc1a			 
cc1a 21 ee e9				ld hl, cli_var_array2 
cc1d cd ea 8c				call addatohl 
cc20 cd 85 9a				call forth_push_numhl 
cc23			 
cc23			 
cc23				       NEXTW 
cc23 c3 76 9e			jp macro_next 
cc26				endm 
# End of macro NEXTW
cc26			.V0: 
cc26				CWHEAD .V0Q 100 "V0!" 3 WORD_FLAG_CODE 
cc26 78				db WORD_SYS_CORE+100             
cc27 3e cc			dw .V0Q            
cc29 04				db 3 + 1 
cc2a .. 00			db "V0!",0              
cc2e				endm 
# End of macro CWHEAD
cc2e			;| V0! ( u1 -- )  Store value to v0  | DONE 
cc2e			 
cc2e					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
cc2e cd 8a 9c			call macro_dsp_valuehl 
cc31				endm 
# End of macro FORTH_DSP_VALUEHL
cc31			 
cc31 11 22 ea				ld de, cli_var_array 
cc34			 
cc34 eb					ex de, hl 
cc35 73					ld (hl), e 
cc36 23					inc hl 
cc37 72					ld (hl), d 
cc38			 
cc38					; destroy value TOS 
cc38			 
cc38					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
cc38 cd 42 9d			call macro_forth_dsp_pop 
cc3b				endm 
# End of macro FORTH_DSP_POP
cc3b			 
cc3b				       NEXTW 
cc3b c3 76 9e			jp macro_next 
cc3e				endm 
# End of macro NEXTW
cc3e			.V0Q: 
cc3e				CWHEAD .V1S 101 "V0@" 3 WORD_FLAG_CODE 
cc3e 79				db WORD_SYS_CORE+101             
cc3f 4f cc			dw .V1S            
cc41 04				db 3 + 1 
cc42 .. 00			db "V0@",0              
cc46				endm 
# End of macro CWHEAD
cc46			;| V0@ ( --u )  Put value of v0 onto stack | DONE 
cc46 2a 22 ea				ld hl, (cli_var_array) 
cc49 cd 85 9a				call forth_push_numhl 
cc4c			 
cc4c				       NEXTW 
cc4c c3 76 9e			jp macro_next 
cc4f				endm 
# End of macro NEXTW
cc4f			.V1S: 
cc4f				CWHEAD .V1Q 102 "V1!" 3 WORD_FLAG_CODE 
cc4f 7a				db WORD_SYS_CORE+102             
cc50 67 cc			dw .V1Q            
cc52 04				db 3 + 1 
cc53 .. 00			db "V1!",0              
cc57				endm 
# End of macro CWHEAD
cc57			;| V1! ( u1 -- )  Store value to v1 | DONE 
cc57					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
cc57 cd 8a 9c			call macro_dsp_valuehl 
cc5a				endm 
# End of macro FORTH_DSP_VALUEHL
cc5a			 
cc5a 11 24 ea				ld de, cli_var_array+2 
cc5d				 
cc5d eb					ex de, hl 
cc5e 73					ld (hl), e 
cc5f 23					inc hl 
cc60 72					ld (hl), d 
cc61			 
cc61					; destroy value TOS 
cc61			 
cc61					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
cc61 cd 42 9d			call macro_forth_dsp_pop 
cc64				endm 
# End of macro FORTH_DSP_POP
cc64				       NEXTW 
cc64 c3 76 9e			jp macro_next 
cc67				endm 
# End of macro NEXTW
cc67			.V1Q: 
cc67				CWHEAD .V2S 103 "V1@" 3 WORD_FLAG_CODE 
cc67 7b				db WORD_SYS_CORE+103             
cc68 78 cc			dw .V2S            
cc6a 04				db 3 + 1 
cc6b .. 00			db "V1@",0              
cc6f				endm 
# End of macro CWHEAD
cc6f			;| V1@ ( --u )  Put value of v1 onto stack | DONE 
cc6f 2a 24 ea				ld hl, (cli_var_array+2) 
cc72 cd 85 9a				call forth_push_numhl 
cc75				       NEXTW 
cc75 c3 76 9e			jp macro_next 
cc78				endm 
# End of macro NEXTW
cc78			.V2S: 
cc78				CWHEAD .V2Q 104 "V2!" 3 WORD_FLAG_CODE 
cc78 7c				db WORD_SYS_CORE+104             
cc79 90 cc			dw .V2Q            
cc7b 04				db 3 + 1 
cc7c .. 00			db "V2!",0              
cc80				endm 
# End of macro CWHEAD
cc80			;| V2! ( u1 -- )  Store value to v2 | DONE 
cc80					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
cc80 cd 8a 9c			call macro_dsp_valuehl 
cc83				endm 
# End of macro FORTH_DSP_VALUEHL
cc83			 
cc83 11 26 ea				ld de, cli_var_array+4 
cc86				 
cc86 eb					ex de, hl 
cc87 73					ld (hl), e 
cc88 23					inc hl 
cc89 72					ld (hl), d 
cc8a			 
cc8a					; destroy value TOS 
cc8a			 
cc8a					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
cc8a cd 42 9d			call macro_forth_dsp_pop 
cc8d				endm 
# End of macro FORTH_DSP_POP
cc8d				       NEXTW 
cc8d c3 76 9e			jp macro_next 
cc90				endm 
# End of macro NEXTW
cc90			.V2Q: 
cc90				CWHEAD .V3S 105 "V2@" 3 WORD_FLAG_CODE 
cc90 7d				db WORD_SYS_CORE+105             
cc91 a1 cc			dw .V3S            
cc93 04				db 3 + 1 
cc94 .. 00			db "V2@",0              
cc98				endm 
# End of macro CWHEAD
cc98			;| V2@ ( --u )  Put value of v2 onto stack | DONE 
cc98 2a 26 ea				ld hl, (cli_var_array+4) 
cc9b cd 85 9a				call forth_push_numhl 
cc9e				       NEXTW 
cc9e c3 76 9e			jp macro_next 
cca1				endm 
# End of macro NEXTW
cca1			.V3S: 
cca1				CWHEAD .V3Q 104 "V3!" 3 WORD_FLAG_CODE 
cca1 7c				db WORD_SYS_CORE+104             
cca2 b9 cc			dw .V3Q            
cca4 04				db 3 + 1 
cca5 .. 00			db "V3!",0              
cca9				endm 
# End of macro CWHEAD
cca9			;| V3! ( u1 -- )  Store value to v3 | DONE 
cca9					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
cca9 cd 8a 9c			call macro_dsp_valuehl 
ccac				endm 
# End of macro FORTH_DSP_VALUEHL
ccac			 
ccac 11 28 ea				ld de, cli_var_array+6 
ccaf				 
ccaf eb					ex de, hl 
ccb0 73					ld (hl), e 
ccb1 23					inc hl 
ccb2 72					ld (hl), d 
ccb3			 
ccb3					; destroy value TOS 
ccb3			 
ccb3					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
ccb3 cd 42 9d			call macro_forth_dsp_pop 
ccb6				endm 
# End of macro FORTH_DSP_POP
ccb6				       NEXTW 
ccb6 c3 76 9e			jp macro_next 
ccb9				endm 
# End of macro NEXTW
ccb9			.V3Q: 
ccb9				CWHEAD .END 105 "V3@" 3 WORD_FLAG_CODE 
ccb9 7d				db WORD_SYS_CORE+105             
ccba ca cc			dw .END            
ccbc 04				db 3 + 1 
ccbd .. 00			db "V3@",0              
ccc1				endm 
# End of macro CWHEAD
ccc1			;| V3@ ( --u )  Put value of v3 onto stack | DONE 
ccc1 2a 28 ea				ld hl, (cli_var_array+6) 
ccc4 cd 85 9a				call forth_push_numhl 
ccc7				       NEXTW 
ccc7 c3 76 9e			jp macro_next 
ccca				endm 
# End of macro NEXTW
ccca			 
ccca			 
ccca			 
ccca			 
ccca			 
ccca			; end of dict marker 
ccca			 
ccca 00			.END:    db WORD_SYS_END 
cccb 00 00			dw 0 
cccd 00				db 0 
ccce			 
ccce			; use to jp here for user dict words to save on macro expansion  
ccce			 
ccce			user_dict_next: 
ccce				NEXTW 
ccce c3 76 9e			jp macro_next 
ccd1				endm 
# End of macro NEXTW
ccd1			 
ccd1			 
ccd1			user_exec: 
ccd1				;    ld hl, <word code> 
ccd1				;    FORTH_RSP_NEXT - call macro_forth_rsp_next 
ccd1				;    call forthexec 
ccd1				;    jp user_dict_next   (NEXT) 
ccd1			        ;    <word code bytes> 
ccd1 eb				ex de, hl 
ccd2 2a bc e5			ld hl,(os_tok_ptr) 
ccd5				 
ccd5				FORTH_RSP_NEXT 
ccd5 cd 2c 9a			call macro_forth_rsp_next 
ccd8				endm 
# End of macro FORTH_RSP_NEXT
ccd8			 
ccd8			if DEBUG_FORTH_UWORD 
ccd8						DMARK "UEX" 
ccd8 f5				push af  
ccd9 3a ed cc			ld a, (.dmark)  
ccdc 32 65 ee			ld (debug_mark),a  
ccdf 3a ee cc			ld a, (.dmark+1)  
cce2 32 66 ee			ld (debug_mark+1),a  
cce5 3a ef cc			ld a, (.dmark+2)  
cce8 32 67 ee			ld (debug_mark+2),a  
cceb 18 03			jr .pastdmark  
cced ..			.dmark: db "UEX"  
ccf0 f1			.pastdmark: pop af  
ccf1			endm  
# End of macro DMARK
ccf1				CALLMONITOR 
ccf1 cd 6f ee			call debug_vector  
ccf4				endm  
# End of macro CALLMONITOR
ccf4			endif 
ccf4			 
ccf4			 
ccf4			 
ccf4 eb				ex de, hl 
ccf5 22 bc e5			ld (os_tok_ptr), hl 
ccf8				 
ccf8				; Don't use next - Skips the first word in uword. 
ccf8			 
ccf8 c3 07 9f			jp exec1 
ccfb			;	NEXT 
ccfb			 
ccfb			 
ccfb			; eof 
# End of file forth_wordsv4.asm
ccfb			endif 
ccfb			;;;;;;;;;;;;;; Debug code 
ccfb			 
ccfb			 
ccfb			;if DEBUG_FORTH_PARSE 
ccfb .. 00		.nowordfound: db "No match",0 
cd04 .. 00		.compword:	db "Comparing word ",0 
cd14 .. 00		.nextwordat:	db "Next word at",0 
cd21 .. 00		.charmatch:	db "Char match",0 
cd2c			;endif 
cd2c			if DEBUG_FORTH_JP 
cd2c			.foundword:	db "Word match. Exec..",0 
cd2c			endif 
cd2c			;if DEBUG_FORTH_PUSH 
cd2c .. 00		.enddict:	db "Dict end. Push.",0 
cd3c .. 00		.push_str:	db "Pushing string",0 
cd4b .. 00		.push_num:	db "Pushing number",0 
cd5a .. 00		.data_sp:	db "SP:",0 
cd5e .. 00		.wordinhl:	db "Word in HL (2/0):",0 
cd70 .. 00		.wordinde:	db "Word in DE (3/0):",0 
cd82 .. 00		.wordinbc:	db "Word in BC (4/0):",0 
cd94			;endif 
cd94			;if DEBUG_FORTH_MALLOC 
cd94 .. 00		.push_malloc:	db "Malloc address",0 
cda3			;endif 
cda3			 
cda3			 
cda3			 
cda3			; display malloc address and current data stack pointer  
cda3			 
cda3			malloc_error: 
cda3 d5				push de 
cda4 f5				push af 
cda5 e5				push hl 
cda6 cd bd 8a			call clear_display 
cda9 11 c9 cd			ld de, .mallocerr 
cdac 3e 00			ld a,0 
cdae			;	ld de,os_word_scratch 
cdae cd d0 8a			call str_at_display 
cdb1 3e 11			ld a, display_row_1+17 
cdb3 11 65 ee			ld de, debug_mark 
cdb6 cd d0 8a			call str_at_display 
cdb9 cd e0 8a			call update_display 
cdbc				;call break_point_state 
cdbc cd de de			call cin_wait 
cdbf			 
cdbf			;	ld a, ' ' 
cdbf			;	ld (os_view_disable), a 
cdbf cd f4 93			call bp_on 
cdc2 e1				pop hl 
cdc3 f1				pop af 
cdc4 d1				pop de	 
cdc5				CALLMONITOR 
cdc5 cd 6f ee			call debug_vector  
cdc8				endm  
# End of macro CALLMONITOR
cdc8 c9				ret 
cdc9			 
cdc9 .. 00		.mallocerr: 	db "Malloc Error",0 
cdd6			;if DEBUG_FORTH_PUSH 
cdd6			display_data_sp: 
cdd6 f5				push af 
cdd7			 
cdd7				; see if disabled 
cdd7			 
cdd7			 
cdd7 3a 6f ee			ld a, (debug_vector) 
cdda fe c9			cp $C9  ; RET 
cddc				;ld a, (os_view_disable) 
cddc				;cp '*' 
cddc 28 67			jr z, .skipdsp 
cdde			 
cdde e5				push hl 
cddf e5				push hl 
cde0 e5			push hl 
cde1 cd bd 8a			call clear_display 
cde4 e1			pop hl 
cde5 7c				ld a,h 
cde6 21 c0 e5			ld hl, os_word_scratch 
cde9 cd f3 8e			call hexout 
cdec e1				pop hl 
cded 7d				ld a,l 
cdee 21 c2 e5			ld hl, os_word_scratch+2 
cdf1 cd f3 8e			call hexout 
cdf4 21 c4 e5			ld hl, os_word_scratch+4 
cdf7 3e 00			ld a,0 
cdf9 77				ld (hl),a 
cdfa 11 c0 e5			ld de,os_word_scratch 
cdfd 3e 28				ld a, display_row_2 
cdff cd d0 8a				call str_at_display 
ce02 11 5e cd			ld de, .wordinhl 
ce05 3e 00			ld a, display_row_1 
ce07			 
ce07 cd d0 8a				call str_at_display 
ce0a 11 65 ee			ld de, debug_mark 
ce0d 3e 11			ld a, display_row_1+17 
ce0f			 
ce0f cd d0 8a				call str_at_display 
ce12			 
ce12				; display current data stack pointer 
ce12 11 5a cd			ld de,.data_sp 
ce15 3e 30				ld a, display_row_2 + 8 
ce17 cd d0 8a				call str_at_display 
ce1a			 
ce1a 2a e8 e9			ld hl,(cli_data_sp) 
ce1d e5				push hl 
ce1e 7c				ld a,h 
ce1f 21 c0 e5			ld hl, os_word_scratch 
ce22 cd f3 8e			call hexout 
ce25 e1				pop hl 
ce26 7d				ld a,l 
ce27 21 c2 e5			ld hl, os_word_scratch+2 
ce2a cd f3 8e			call hexout 
ce2d 21 c4 e5			ld hl, os_word_scratch+4 
ce30 3e 00			ld a,0 
ce32 77				ld (hl),a 
ce33 11 c0 e5			ld de,os_word_scratch 
ce36 3e 33				ld a, display_row_2 + 11 
ce38 cd d0 8a				call str_at_display 
ce3b			 
ce3b			 
ce3b cd e0 8a			call update_display 
ce3e cd 00 8a			call delay1s 
ce41 cd 00 8a			call delay1s 
ce44 e1				pop hl 
ce45			.skipdsp: 
ce45 f1				pop af 
ce46 c9				ret 
ce47			 
ce47			display_data_malloc: 
ce47			 
ce47 f5				push af 
ce48 e5				push hl 
ce49 e5				push hl 
ce4a e5			push hl 
ce4b cd bd 8a			call clear_display 
ce4e e1			pop hl 
ce4f 7c				ld a,h 
ce50 21 c0 e5			ld hl, os_word_scratch 
ce53 cd f3 8e			call hexout 
ce56 e1				pop hl 
ce57 7d				ld a,l 
ce58 21 c2 e5			ld hl, os_word_scratch+2 
ce5b cd f3 8e			call hexout 
ce5e 21 c4 e5			ld hl, os_word_scratch+4 
ce61 3e 00			ld a,0 
ce63 77				ld (hl),a 
ce64 11 c0 e5			ld de,os_word_scratch 
ce67 3e 28				ld a, display_row_2 
ce69 cd d0 8a				call str_at_display 
ce6c 11 94 cd			ld de, .push_malloc 
ce6f 3e 00			ld a, display_row_1 
ce71			 
ce71 cd d0 8a				call str_at_display 
ce74			 
ce74				; display current data stack pointer 
ce74 11 5a cd			ld de,.data_sp 
ce77 3e 30				ld a, display_row_2 + 8 
ce79 cd d0 8a				call str_at_display 
ce7c			 
ce7c 2a e8 e9			ld hl,(cli_data_sp) 
ce7f e5				push hl 
ce80 7c				ld a,h 
ce81 21 c0 e5			ld hl, os_word_scratch 
ce84 cd f3 8e			call hexout 
ce87 e1				pop hl 
ce88 7d				ld a,l 
ce89 21 c2 e5			ld hl, os_word_scratch+2 
ce8c cd f3 8e			call hexout 
ce8f 21 c4 e5			ld hl, os_word_scratch+4 
ce92 3e 00			ld a,0 
ce94 77				ld (hl),a 
ce95 11 c0 e5			ld de,os_word_scratch 
ce98 3e 33				ld a, display_row_2 + 11 
ce9a cd d0 8a				call str_at_display 
ce9d			 
ce9d cd e0 8a			call update_display 
cea0 cd 00 8a			call delay1s 
cea3 cd 00 8a			call delay1s 
cea6 e1				pop hl 
cea7 f1				pop af 
cea8 c9				ret 
cea9			;endif 
cea9			 
cea9			include "forth_autostart.asm" 
cea9			; list of commands to perform at system start up 
cea9			 
cea9			startcmds: 
cea9			;	dw test11 
cea9			;	dw test12 
cea9			;	dw test13 
cea9			;	dw test14 
cea9			;	dw test15 
cea9			;	dw test16 
cea9			;	dw test17 
cea9			;	dw ifthtest1 
cea9			;	dw ifthtest2 
cea9			;	dw ifthtest3 
cea9			;	dw mmtest1 
cea9			;	dw mmtest2 
cea9			;	dw mmtest3 
cea9			;	dw mmtest4 
cea9			;	dw mmtest5 
cea9			;	dw mmtest6 
cea9			;	dw iftest1 
cea9			;	dw iftest2 
cea9			;	dw iftest3 
cea9			;	dw looptest1 
cea9			;	dw looptest2 
cea9			;	dw test1 
cea9			;	dw test2 
cea9			;	dw test3 
cea9			;	dw test4 
cea9			;	dw game2r 
cea9			;	dw game2b1 
cea9			;	dw game2b2 
cea9			 
cea9				; start up words that are actually useful 
cea9			 
cea9			;    dw spi1 
cea9			;    dw spi2 
cea9			;    dw spi3 
cea9			;    dw spi4 
cea9			;    dw spi5 
cea9			;    dw spi6 
cea9			;    dw spi7 
cea9			; 
cea9			;    dw spi8 
cea9			;    dw spi9 
cea9			;    dw spi10 
cea9			 
cea9			; file editor 
cea9			;	dw edit1 
cea9			;	dw edit2 
cea9			;	dw edit3 
cea9			 
cea9			;	dw longread 
cea9 c9 d2			dw clrstack 
ceab fd d2			dw type 
cead			;	dw stest 
cead 22 d3			dw strncpy 
ceaf			;	dw list 
ceaf 83 d3			dw start1 
ceb1 93 d3			dw start2 
ceb3			;	dw start3 
ceb3			;	dw start3b 
ceb3			;	dw start3c 
ceb3			 
ceb3				; (unit) testing words 
ceb3			 
ceb3			;	dw mtesta 
ceb3			;	dw mtestb 
ceb3			;	dw mtestc 
ceb3			;	dw mtestd 
ceb3			;	dw mteste 
ceb3			 
ceb3				; demo/game words 
ceb3			 
ceb3			;        dw game3w 
ceb3			;        dw game3p 
ceb3			;        dw game3sc 
ceb3			;        dw game3vsi 
ceb3			;        dw game3vs 
ceb3				 
ceb3			;	dw game2b 
ceb3			;	dw game2bf 
ceb3			;	dw game2mba 
ceb3			;	dw game2mbas 
ceb3			;	dw game2mb 
ceb3			 
ceb3 c3 d6			dw game1 
ceb5 d4 d6			dw game1a 
ceb7 36 d7			dw game1b 
ceb9 6b d7			dw game1c 
cebb a1 d7			dw game1d 
cebd d2 d7			dw game1s 
cebf e6 d7			dw game1t 
cec1 fb d7			dw game1f 
cec3 2f d8			dw game1z 
cec5 73 d8			dw game1zz 
cec7			 
cec7 fc d4			dw test5 
cec9 34 d5			dw test6 
cecb 6c d5			dw test7 
cecd 80 d5			dw test8 
cecf ac d5			dw test9 
ced1 c2 d5			dw test10 
ced3				 
ced3 4a d9		        dw ssv5 
ced5 2e d9		        dw ssv4 
ced7 12 d9		        dw ssv3 
ced9 dc d8		        dw ssv2 
cedb 63 d9		        dw ssv1 
cedd ab d9		        dw ssv1cpm 
cedf			;	dw keyup 
cedf			;	dw keydown 
cedf			;	dw keyleft 
cedf			;	dw keyright 
cedf			;	dw 	keyf1 
cedf			;	dw keyf2 
cedf			;	dw keyf3 
cedf			;	dw keyf4 
cedf			;	dw keyf5 
cedf			;	dw keyf6 
cedf			;	dw keyf7 
cedf			;	dw keyf8 
cedf			;	dw keyf9 
cedf			;	dw keyf10 
cedf			;	dw keyf11 
cedf			;	dw keyf12 
cedf			;	dw keytab 
cedf			;	dw keycr 
cedf			;	dw keyhome 
cedf			;	dw keyend 
cedf			;	dw keybs 
cedf 00 00			db 0, 0	 
cee1			 
cee1			 
cee1			; File Editor 
cee1			 
cee1			; ( id - ) use 'e' to edit the displayed line 
cee1 .. 00		edit1: db ": edc waitk $65 = if ede then ; ", 0 
cf02 .. 00		edit2: db ": ede storepage ptr $02 + cls dedit filepage bupd ; ", 0 
cf37			;edit2: db ": ede v1@ v0@ record drop storepage ptr $02 + cls dedit filepage bupd ; ", 0 
cf37 .. 00		edit3: db ": ed dup v0! open $01 do i v0@ record cls . edc loop ; ",0 
cf6f			;edit3: db ": ed dup v0! open $01 do i v0@ record cls . i v1! edc loop ; ",0 
cf6f			 
cf6f			; SPI Net support words 
cf6f			 
cf6f			; v0! = node to send to 
cf6f			; ( str count - ) 
cf6f .. 00		spi1:       db ": spitype spiceh $00 do dup i + @ v0@ spicel $10 spio spio spio spiceh $01 pause loop ; ",0 
cfc8			 
cfc8			; spiputc ( char node - ) 
cfc8 .. 00		spi2:       db ": spiputc spicel $10 spio spio ptr @ spio spiceh ; ",0 
cffc			; spiputc ( u node - ) 
cffc .. 00		spi2b:       db ": spiputb spicel $10 spio spio spio spiceh ; ",0 
d02a			 
d02a			; spigetc ( - n ) 
d02a .. 00		spi4:       db ": spigetc spicel $11 spio spii spiceh ; ", 0 
d053			 
d053			; getnode ( - n ) 
d053 .. 00		spi5:       db ": getnode spicel $18 spio spii nop spiceh ; ", 0 
d080			 
d080			; ( str node - )  
d080 .. 00		spi3:       db ": sendnode v0! count spiceh $00 do dup i + @ v0@ spicel $10 spio spio spio spiceh $01 pause loop ; ; ",0 
d0e6			; store string ( str i - ) 
d0e6			 
d0e6			;spi3:       db ": storestrold spicel $03 spio spio ptr count clkstro spiceh ; ", 0 
d0e6 .. 00		spi6:       db ": storestr spicel $12 spio spio count $00 do dup i + @ spio $01 pause loop spiceh ; ", 0 
d13b			 
d13b			; get string ( addr i -  )    TO FIX 
d13b			 
d13b .. 00		spi7:       db ": getstorestr spicel $13 spio spio \" \" repeat spii dup concat $00 = not until spiceh ; ", 0 
d193			 
d193			 
d193			; NETCHAT (TODO) 
d193			; Program to allow two nodes to chat with eachother 
d193			; 
d193			; v0 - target node 
d193			;  
d193			; accept input at 0,0 
d193			; if input is string send spitype to target node 
d193			; starting at row 2,0 , while spigetchr is not zero ->  
d193			; 
d193			; 
d193			; TODO add paging of get request 
d193			 
d193			; ( node - ) 
d193 .. 00		spi8:		db ": netchatp $00 $00 at accept ;", 0 
d1b2 .. 00		spi9: 		db ": netchatr repeat spigetchr dup dup $00 = not if emit then $00 = not until $02 pause ; ",0 
d20a .. 00		spi10:		db ": netchat v0! repeat netchatp count dup $00 > if spitype $01 pause then cls $00 $03 at \">\" . netchatr true until nop ; ", 0 
d282			 
d282			 
d282			; Long read of currently open file 
d282 .. 00		longread:   db ": lread read repeat readcont if read concat then readcont until nop ; ", 0 
d2c9			 
d2c9			; clear stack  
d2c9			 
d2c9 .. 00		clrstack:  db ": clrstk depth ?dup if $01 do drop loop then nop ; ", 0 
d2fd			 
d2fd			; type ( addr count - ) 
d2fd .. 00		type:     db ": type $00 do dup i + @ emit loop ; ", 0 
d322			 
d322			; some direct memory words 
d322			; strncpy ( len t f -- t ) 
d322			 
d322 .. 00		strncpy:   db ": strncpy $00 scratch 2! $02 scratch 2! do $00 scratch 2@ i + @ $02 scratch 2@ i + ! loop nop  ;",0 
d383			 
d383 .. 00		start1:     	db ": bpon $00 bp ;",0 
d393 .. 00		start2:     	db ": bpoff $01 bp ;",0 
d3a4 .. 00		start3b:         db ": ls dir cls drop dup $00 > if $01 do $08 $04 at . $01 $04 at . $04 $04 at . $23 $04 at accept drop scroll loop then nop ;",0 
d41f .. 00		start3c:         db ": dirlist dir cls drop dup $00 > if $01 do \"/\" .> .> \"Ext:\" .> .> \"Id: \" .> .>  loop then nop ;",0 
d47f			 
d47f .. 00		tuck:         db ": tuck swap over ;", 0 
d492			 
d492			; a handy word to list items on the stack 
d492			 
d492 .. 00		list:            db ": more cls repeat scroll $01 $04 at depth . $0a $04 at .> $01 $01 at accept drop depth 0= not until nop ;",0 
d4fc			 
d4fc			 
d4fc			; test stack  
d4fc			; rnd8 stest 
d4fc			 
d4fc			;stest:   db ": stest cls  v0! v0@ $00 do rnd8 $01 $01 at i . $01 pause loop v0@ $00 do drop $12 $01 at depth . $01 pause loop nop ;",0  
d4fc			 
d4fc			; random malloc and free cycles 
d4fc			 
d4fc			;mtesta:      db ": mtesta $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . rnd8 dup $13 $01 at . malloc heap $1f $01 at . $1f $02 at . $01 pause free $01 until nop ;", 0 
d4fc			 
d4fc			; fixed malloc and free cycles 
d4fc			 
d4fc			;mtestb:      db ": mtestb $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 malloc heap $1f $01 at . $1f $02 at . $01 pause free $01 until nop ;", 0 
d4fc			 
d4fc			; fixed double string push and drop cycle  
d4fc			 
d4fc			;mtestc:      db ": mtestc $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 spaces $2f spaces  heap $1f $01 at . $1f $02 at . $01 pause drop drop $01 until nop ; ", 0 
d4fc			 
d4fc			; consistent fixed string push and drop cycle  
d4fc			 
d4fc			;mtestd:      db ": mtestd $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 spaces heap $1f $01 at . $1f $02 at . $01 pause drop $01 until nop ; ", 0 
d4fc			 
d4fc			;mteste:      db ": mteste $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . rnd8 dup spaces $0f $02 at . heap $1f $01 at . $1f $02 at . $01 pause drop $01 until nop ; ", 0 
d4fc			 
d4fc			;test1:		db ": aa 1 2 3 ;", 0 
d4fc			;test2:     	db "111 aa 888 999",0 
d4fc			;test3:     	db ": bb 77 ;",0 
d4fc			;test4:     	db "$02 $01 do i . loop bb",0 
d4fc			 
d4fc .. 00		test5:     	db ": hline $13 $00 do i $01 at 1 . i $04 at 1 . loop nop ;",0 
d534 .. 00		test6:     	db ": vline $04 $01 do $00 i at 1 . $13 i at 1 . loop nop ;",0 
d56c .. 00		test7:     	db ": box hline vline ;",0 
d580 .. 00		test8:     	db ": world cls box $03 $03 at Hello-World! . ;",0 
d5ac .. 00		test9:     	db ": sw $01 adsp world ;",0 
d5c2 .. 00		test10:     	db ": fw $00 adsp world draw $05 pause ;",0 
d5e7			;test11:     	db "hello create .",0 
d5e7			;test12:     	db "hello2 create .",0 
d5e7			 
d5e7			;mmtest1:     	db "cls $0001 $0008 MIN . $0002 pause",0 
d5e7			;mmtest2:     	db "cls $0101 $0008 MIN . $0002 pause",0 
d5e7			;mmtest3:     	db "cls $0001 $0008 MAX . $0002 pause",0 
d5e7			;mmtest4:     	db "cls $0101 $0008 MAX . $0002 pause",0 
d5e7			;mmtest5:     	db "cls $0001 $0001 MIN . $0002 pause",0 
d5e7			;mmtest6:     	db "cls $0001 $0001 MAX . $0002 pause",0 
d5e7			 
d5e7			;iftest1:     	db "$0001 IF cls .",0 
d5e7			;iftest2:     	db "$0000 IF cls .",0 
d5e7			;iftest3:     	db "$0002 $0003 - IF cls .",0 
d5e7			;looptest1:     	db "$0003 $0001 do i . loop 8",0 
d5e7			;looptest2:     	db "$0003 $0001 do i . $0001 pause loop 8",0 
d5e7			 
d5e7			;ifthtest1:     	db "$0001 IF is-true . $0005 pause THEN next-word . $0005 pause",0 
d5e7			;ifthtest2:     	db "$0000 IF is-true . $0005 pause THEN next-word . $0005 pause",0 
d5e7			;ifthtest3:     	db "$0002 $0003 - IF is-true . $0005 pause THEN next-word . $0005 pause",0 
d5e7			 
d5e7			 
d5e7 .. 00		sound1: db ": note spicel spio spiceh spicel ; ",0 
d60b .. 00		sound2: db ": slient $9f note $bf note $df note $ff note ; ", 0 
d63b .. 00		sound3: db ": sound $01 cartdev $00 spitime ! ; ",0 
d660 .. 00		sound4: db ": cha $00 ; ",0 
d66d .. 00		sound5: db ": chb $20 ; ",0 
d67a .. 00		sound6: db ": chc $40 ; ",0 
d687 .. 00		sound7: db ": chd $60 ; ",0 
d694 .. 00		sound8: db ": cnote $80 + + note ; ", 0 
d6ac .. 00		sound9: db ": cvol $90 + + note ; ", 0 
d6c3			 
d6c3			 
d6c3			 
d6c3			 
d6c3			; a small guess the number game 
d6c3			 
d6c3 .. 00		game1:          db ": gsn rnd8 v1! ;",0 
d6d4 .. 00		game1a:          db ": gs $00 $00 at Enter-a-number .- $00 $02 at between-1-and-255 .- $00 $03 at accept str2num v2! ;",0 
d736			 
d736 .. 00		game1b:          db ": gcb v2@ v1@ < if $00 $00 at Too-low! .- $01 then ;",0 
d76b .. 00		game1c:          db ": gcc v2@ v1@ > if $00 $00 at Too-high! .- $01 then ;",0 
d7a1 .. 00		game1d:          db ": gcd v2@ v1@ = if $00 $00 at Yes! .- $00 then ;",0 
d7d2 .. 00		game1s:          db ": gck gcb gcc gcd ;",0 
d7e6 .. 00		game1t:          db ": sc v3@ $01 + v3! ;",0 
d7fb .. 00		game1f:          db ": fsc v3@ cls $01 $01 at You-Took .- $02 $03 at . ;",0 
d82f .. 00		game1z:         db ": ga $00 v3! gsn repeat cls gs cls gck $02 pause sc until fsc nop ;",0 
d873			 
d873			; Using 'ga' save a high score across multiple runs using external storage 
d873			 
d873 .. 00		game1zz:         db ": gas ga $01 bank $80 bread $01 $04 at Prev-Score .> storepage ptr $02 + dup 2@ . v3@ swap 2! $80 bupd ;",0 
d8dc			 
d8dc			 
d8dc			;game2r:          db ": m2r rnd8 v1! ;  ",0, 0, 0, FORTH_END_BUFFER 
d8dc			;game2b1:          db ": m2b1 $1f $00 do i v2@ at rnd8 $30 < if A . then loop nop ;  ",0, 0, 0, FORTH_END_BUFFER 
d8dc			;game2b2:          db ": m2b cls $04 $01 do i v2! m2b1 loop ;  ",0, 0, 0, FORTH_END_BUFFER 
d8dc			 
d8dc			; simple screen saver to test code memory reuse to destruction 
d8dc			 
d8dc .. 00		ssv2:            db ": ssvchr $2a $2d rnd dup $2c = if drop $20 then nop ;",0 
d912 .. 00		ssv3:            db ": ssvposx $01 $27 rnd v0! ;",0 
d92e .. 00		ssv4:            db ": ssvposy $01 $05 rnd v1! ;",0 
d94a .. 00		ssv5:            db ": ssvt ssvposx ssvposy ;",0 
d963 .. 00		ssv1:          db ": ssv cls repeat ssvposx ssvposy v0@ v1@ at ssvchr emit $01 until nop ;",0 
d9ab .. 00		ssv1cpm:          db ": ssvcpm cls repeat ssvposx ssvposy v0@ v1@ at ssvchr emit $01 pausems $01 until nop ;",0 
da02			;ssv1:          db ": ssv cls repeat ssvt v0@ v1@ at ssvchr emit $01 until nop ;",0 
da02			;ssv1:          db ": ssv ssvposx ssvposy at ssvchr ;",0 
da02			;ssv1:            db ": ssv repeat ssvpos rnd8 $10 if               $01 until nop ;",0 
da02			;ssv2:            db ": ssvchr v0! v1! at? ;",0 
da02			;ssv5:            db ": ssvt ssvposx ssvposy v0@ .> v1@ .> ;",0 
da02			;ssv2:            db ": ssvchr $2a $2d rnd  ;",0 
da02			 
da02			 
da02			 
da02			; minesweeper/battleship finding game 
da02			; draws a game board of random ship/mine positions 
da02			; user enters coords to see if it hits on 
da02			; game ends when all are hit 
da02			; when hit or miss says how many may be in the area 
da02			 
da02			; setup the game board and then hide it 
da02			;game2b:          db ": mbsetup $02 fb cls $04 $01 do i v2! $10 $01 do i v2@ at rnd8 $30 < if A . then loop loop $05 pause $01 fb ;",0 
da02			;game2bf:         db ": mbsetupf cls $04 $01 do i v2! $10 $01 do i v2@ at \"+\" . loop loop nop ;",0 
da02			;; prompt for where to target 
da02			;game2mba:        db ": mbp $12 $04 at Turns .> v3@ . $12 $03 at Score .> v0@ . $12 $01 at Enter-X-__ .- $1a $01 at accept $12 $02 at Enter-Y-__ .- $1a $02 at accept nop ;", 0  
da02			;game2mbas:        db ": mbsv str2num v2! str2num v1! nop ;", 0  
da02			;; TODO see if the entered coords hits or misses pushes char hit of miss 
da02			;game2mbht:      db ": mbckht nop ;",0 
da02			;game2mbms:      db ": mbcms nop ;",0 
da02			; TODO how many might be near by 
da02			;game2mb:          db ": mb $00 v0! $00 v3! mbsetup mbsetupf repeat mbp mbsv $02 fb mbckht mbcms v1@ v2@ at@ $01 fb v1@ v2@ at emit $01 until nop ;",0 
da02			 
da02			; Game 3 
da02			 
da02			; Vert scroller ski game - avoid the trees! 
da02			 
da02			; v0 score (ie turns) 
da02			; v1 player pos 
da02			; v2 left wall 
da02			; v3 right wall 
da02			 
da02			; Draw side walls randomly 
da02			 
da02			;game3w:   db ": vsw v2@ $04 at \"|\" . v3@ $04 at \"|\" . nop ;", 0 
da02			 
da02			; Draw player 
da02			;game3p:   db ": vsp v1@ $01 at \"V\" . nop ; ", 0 
da02			 
da02			; TODO Get Key 
da02			 
da02			; TODO Move left right 
da02			 
da02			; scroll and move walls a bit 
da02			 
da02			;game3sc:  db ": vsscl v2@ $01 + v2! v3@ $01 - v3! scroll nop ;", 0 
da02			 
da02			; main game loop 
da02			 
da02			;game3vsi:    db ": vsi $00 v0! $01 v2! $12 v3! $06 v1! nop ;",0 
da02			;game3vs:    db ": vs vsi repeat vsw vsp vsscl $05 pause scroll $01 until nop ;",0 
da02			 
da02			; key board defs 
da02			 
da02 .. 00		keyup:       db ": keyup $05 ;",0 
da10 .. 00		keydown:       db ": keydown $0a ;",0 
da20 .. 00		keyleft:       db ": keyleft $0b ;",0 
da30 .. 00		keyright:       db ": keyright $0c ;",0 
da41 .. 00		keyf1:       db ": keyf1 $10 ;",0 
da4f .. 00		keyf2:       db ": keyf2 $11 ;",0 
da5d .. 00		keyf3:       db ": keyf3 $12 ;",0 
da6b .. 00		keyf4:       db ": keyf4 $13 ;",0 
da79 .. 00		keyf5:       db ": keyf5 $14 ;",0 
da87 .. 00		keyf6:       db ": keyf6 $15 ;",0 
da95 .. 00		keyf7:       db ": keyf7 $16 ;",0 
daa3 .. 00		keyf8:       db ": keyf8 $17 ;",0 
dab1 .. 00		keyf9:       db ": keyf9 $18 ;",0 
dabf .. 00		keyf10:       db ": keyf10 $19 ;",0 
dace .. 00		keyf11:       db ": keyf11 $1a ;",0 
dadd .. 00		keyf12:       db ": keyf12 $1b ;",0 
daec			 
daec .. 00		keytab:       db ": keytab $09 ;",0 
dafb .. 00		keycr:       db ": keycr $0d ;",0 
db09 .. 00		keyhome:       db ": keyhome $0e ;",0 
db19 .. 00		keyend:       db ": keyend $0f ;",0 
db28 .. 00		keybs:       db ": keybs $08 ;",0 
db36			 
db36			   
db36			 
db36			 
db36			 
db36			; eof 
# End of file forth_autostart.asm
db36			 
db36			 
db36			 
db36			; stack over and underflow checks 
db36			 
db36			; init the words to detect the under/overflow 
db36			 
db36			chk_stk_init: 
db36				; a vague random number to check so we dont get any "lucky" hits 
db36 3e 2d			ld a, 45 
db38 6f				ld l, a 
db39 00				nop 
db3a 3e 17			ld a, 23 
db3c 67				ld h, a 
db3d			 
db3d 22 97 e2			ld (chk_word), hl     ; the word we need to check against 
db40			 
db40			;	ld (chk_stund), hl	; stack points.... 
db40 22 00 ef			ld (chk_stovr), hl 
db43 22 e6 e9			ld (chk_ret_und), hl 
db46 22 a4 e9			ld (chk_ret_ovr), hl 
db49 22 22 e9			ld (chk_loop_ovr), hl 
db4c 22 20 e8			ld (chk_data_ovr), hl 
db4f c9				ret 
db50				 
db50			check_stacks: 
db50				; check all stack words 
db50			 
db50 e5				push hl 
db51 d5				push de 
db52			 
db52			;	ld de,(chk_word) 
db52			;	ld hl, (chk_stund)	; stack points.... 
db52			;	if DEBUG_STK_FAULT 
db52			;		DMARK "FAa" 
db52			;		CALLMONITOR 
db52			;	endif 
db52			;	call cmp16 
db52			;	jp z, .chk_faulta 
db52			; 
db52			;	ld de, sfaultsu 
db52			;	jp .chk_fault 
db52			 
db52 2a 00 ef		.chk_faulta: ld hl, (chk_stovr) 
db55 ed 5b 97 e2		ld de,(chk_word) 
db59				if DEBUG_STK_FAULT 
db59					DMARK "FAb" 
db59					CALLMONITOR 
db59				endif 
db59 cd 08 8d			call cmp16 
db5c 28 06			jr z, .chk_fault1 
db5e 11 02 dc			ld de, sfaultso 
db61 c3 b3 db			jp .chk_fault 
db64			.chk_fault1:  
db64 2a e6 e9			ld hl, (chk_ret_und) 
db67 ed 5b 97 e2		ld de,(chk_word) 
db6b				if DEBUG_STK_FAULT 
db6b					DMARK "FAU" 
db6b					CALLMONITOR 
db6b				endif 
db6b cd 08 8d			call cmp16 
db6e ca 77 db			jp z, .chk_fault2 
db71 11 12 dc			ld de, sfaultru 
db74 c3 b3 db			jp .chk_fault 
db77			.chk_fault2:  
db77 2a a4 e9			ld hl, (chk_ret_ovr) 
db7a ed 5b 97 e2		ld de,(chk_word) 
db7e				if DEBUG_STK_FAULT 
db7e					DMARK "FA1" 
db7e					CALLMONITOR 
db7e				endif 
db7e cd 08 8d			call cmp16 
db81 ca 8a db			jp z, .chk_fault3 
db84 11 20 dc			ld de, sfaultro 
db87 c3 b3 db			jp .chk_fault 
db8a			.chk_fault3:  
db8a 2a 22 e9			ld hl, (chk_loop_ovr) 
db8d ed 5b 97 e2		ld de,(chk_word) 
db91				if DEBUG_STK_FAULT 
db91					DMARK "FA2" 
db91					CALLMONITOR 
db91				endif 
db91 cd 08 8d			call cmp16 
db94 ca 9d db			jp z, .chk_fault4 
db97 11 3a dc			ld de, sfaultlo 
db9a c3 b3 db			jp .chk_fault 
db9d			.chk_fault4:  
db9d 2a 20 e8			ld hl, (chk_data_ovr) 
dba0 ed 5b 97 e2		ld de,(chk_word) 
dba4				if DEBUG_STK_FAULT 
dba4					DMARK "FA3" 
dba4					CALLMONITOR 
dba4				endif 
dba4 cd 08 8d			call cmp16 
dba7 ca b0 db			jp z, .chk_fault5 
dbaa 11 54 dc			ld de, sfaultdo 
dbad c3 b3 db			jp .chk_fault 
dbb0			 
dbb0			 
dbb0			.chk_fault5:  
dbb0 d1				pop de 
dbb1 e1				pop hl 
dbb2			 
dbb2 c9				ret 
dbb3			 
dbb3 cd bd 8a		.chk_fault: 	call clear_display 
dbb6 3e 28				ld a, display_row_2 
dbb8 cd d0 8a				call str_at_display 
dbbb 11 e4 db				   ld de, .stackfault 
dbbe 3e 00				ld a, display_row_1 
dbc0 cd d0 8a				call str_at_display 
dbc3 11 65 ee				    ld de, debug_mark 
dbc6 3e 11				ld a, display_row_1+17 
dbc8 cd d0 8a				call str_at_display 
dbcb cd e0 8a				call update_display 
dbce			 
dbce				; prompt before entering montior for investigating issue 
dbce			 
dbce 3e 78			ld a, display_row_4 
dbd0 11 63 97			ld de, endprog 
dbd3			 
dbd3 cd e0 8a			call update_display		 
dbd6			 
dbd6 cd fd 99			call next_page_prompt 
dbd9			 
dbd9 d1				pop de 
dbda e1				pop hl 
dbdb cd b7 97				call monitor 
dbde cd 1c 9e				call forth_warmstart 
dbe1 c3 b3 96				jp warmstart_afterauto 
dbe4					;jp 0 
dbe4					;halt 
dbe4			 
dbe4			 
dbe4			 
dbe4 .. 00		.stackfault: 	db "Stack fault:",0 
dbf1			 
dbf1 .. 00		sfaultsu: 	db	"Stack under flow",0 
dc02 .. 00		sfaultso: 	db	"Stack over flow",0 
dc12 .. 00		sfaultru:	db "RTS underflow",0 
dc20 .. 00		sfaultro:	db "RTS overflow/LS underflow", 0 
dc3a .. 00		sfaultlo:	db "LS overflow/DTS underflow", 0 
dc54 .. 00		sfaultdo:	db "DTS overflow", 0 
dc61			 
dc61			 
dc61			fault_dsp_under: 
dc61 11 73 dc			ld de, .dsp_under 
dc64 c3 29 dd			jp .show_fault 
dc67			 
dc67			fault_rsp_under: 
dc67 11 81 dc			ld de, .rsp_under 
dc6a c3 29 dd			jp .show_fault 
dc6d			fault_loop_under: 
dc6d 11 8f dc			ld de, .loop_under 
dc70 c3 29 dd			jp .show_fault 
dc73			 
dc73 .. 00		.dsp_under: db "DSP Underflow",0 
dc81 .. 00		.rsp_under: db "RSP Underflow",0 
dc8f .. 00		.loop_under: db "LOOP Underflow",0 
dc9e			 
dc9e			 
dc9e d5			type_faultn: 	push de 
dc9f e5					push hl 
dca0 cd bd 8a				call clear_display 
dca3 11 cd dc				   ld de, .typefaultn 
dca6 3e 00				ld a, display_row_1 
dca8 cd d0 8a				call str_at_display 
dcab 11 65 ee				    ld de, debug_mark 
dcae 3e 11				ld a, display_row_1+17 
dcb0 cd d0 8a				call str_at_display 
dcb3 cd e0 8a				call update_display 
dcb6			 
dcb6				; prompt before entering montior for investigating issue 
dcb6			 
dcb6 3e 78			ld a, display_row_4 
dcb8 11 63 97			ld de, endprog 
dcbb			 
dcbb cd e0 8a			call update_display		 
dcbe			 
dcbe cd fd 99			call next_page_prompt 
dcc1			 
dcc1 e5					push hl 
dcc2 d5					push de 
dcc3 cd b7 97				call monitor 
dcc6 cd 1c 9e				call forth_warmstart 
dcc9 c3 b3 96				jp warmstart_afterauto 
dccc 76					halt 
dccd			 
dccd			 
dccd .. 00		.typefaultn: db "NUM Type Expected TOS!",0 
dce4			 
dce4 d5			type_faults: 	push de 
dce5 e5					push hl 
dce6 cd bd 8a				call clear_display 
dce9 11 12 dd				   ld de, .typefaults 
dcec 3e 00				ld a, display_row_1 
dcee cd d0 8a				call str_at_display 
dcf1 11 65 ee				    ld de, debug_mark 
dcf4 3e 11				ld a, display_row_1+17 
dcf6 cd d0 8a				call str_at_display 
dcf9 cd e0 8a				call update_display 
dcfc			 
dcfc				; prompt before entering montior for investigating issue 
dcfc			 
dcfc 3e 78			ld a, display_row_4 
dcfe 11 63 97			ld de, endprog 
dd01			 
dd01 cd e0 8a			call update_display		 
dd04			 
dd04 cd fd 99			call next_page_prompt 
dd07			 
dd07 e1					pop hl 
dd08 d1					pop de 
dd09 cd b7 97				call monitor 
dd0c cd 1c 9e				call forth_warmstart 
dd0f c3 b3 96				jp warmstart_afterauto 
dd12			 
dd12			 
dd12 .. 00		.typefaults: db "STR Type Expected TOS!",0 
dd29			 
dd29			.show_fault: 	 
dd29 d5					push de 
dd2a cd bd 8a				call clear_display 
dd2d d1					pop de 
dd2e 3e 00				ld a, display_row_1 
dd30 cd d0 8a				call str_at_display 
dd33 11 65 ee				    ld de, debug_mark 
dd36 3e 11				ld a, display_row_1+17 
dd38 cd d0 8a				call str_at_display 
dd3b cd e0 8a				call update_display 
dd3e			 
dd3e				; prompt before entering montior for investigating issue 
dd3e			 
dd3e 3e 78			ld a, display_row_4 
dd40 11 63 97			ld de, endprog 
dd43			 
dd43 cd e0 8a			call update_display		 
dd46			 
dd46 cd fd 99			call next_page_prompt 
dd49			 
dd49 e1					pop hl 
dd4a d1					pop de 
dd4b cd b7 97				call monitor 
dd4e			; do a dump to cli and not warmstart so we preserve all of the uwords.  
dd4e			; TODO Make optional fault restart to cli or warm boot? 
dd4e					;jp warmstart 
dd4e c3 f7 96				jp cli 
dd51 76					halt 
dd52			 
dd52			 
dd52			; handle the auto run of code from files in storage 
dd52			 
dd52			 
dd52			include "forth_startup.asm" 
dd52			; Which startup method to use? 
dd52			; 
dd52			; version 1 - allows for a single stored file to be selected to run at start up (if se storage is enabled) 
dd52			; followed by loading of a list of scripts in eeprom 
dd52			 
dd52			; version 2 - if se storage is enabled then auto load all files which begin with a '*' else use loading 
dd52			; from eeprom 
dd52			 
dd52			; Select with define in main stubs 
dd52			 
dd52			if STARTUP_V1 
dd52				include "forth_startupv1.asm" 
dd52			; Startup script loading version 1 
dd52			 
dd52			; If SE storage is available first stage is to use the selected file 
dd52			; then go through the eeprom list 
dd52			 
dd52 .. 00		sprompt1: db "Startup load...",0 
dd62 .. 00		sprompt2: db "Run? 1=No *=End #=All",0 
dd78			 
dd78			 
dd78			 
dd78			 
dd78			forth_startup: 
dd78 21 a9 ce			ld hl, startcmds 
dd7b 3e 00			ld a, 0 
dd7d 32 e1 e6			ld (os_last_cmd), a    ; tmp var to skip prompts if doing all 
dd80			 
dd80 e5			.start1:	push hl 
dd81 cd bd 8a			call clear_display 
dd84 11 52 dd			ld de, sprompt1 
dd87 3e 00		        ld a, display_row_1 
dd89 cd d0 8a			call str_at_display 
dd8c 11 62 dd			ld de, sprompt2 
dd8f 3e 28		        ld a, display_row_2 
dd91 cd d0 8a			call str_at_display 
dd94 e1				pop hl 
dd95 e5				push hl 
dd96 5e				ld e,(hl) 
dd97 23				inc hl 
dd98 56				ld d,(hl) 
dd99 3e 50		        ld a, display_row_3 
dd9b cd d0 8a			call str_at_display 
dd9e cd e0 8a			call update_display 
dda1			 
dda1			 
dda1 3a e1 e6			ld a, (os_last_cmd) 
dda4 fe 00			cp 0 
dda6 28 05			jr z, .startprompt 
dda8 cd f4 89			call delay250ms 
ddab 18 24			jr .startdo 
ddad				 
ddad				 
ddad			 
ddad			.startprompt: 
ddad			 
ddad 3e 9f			ld a,display_row_4 + display_cols - 1 
ddaf 11 fb 99		        ld de, endprg 
ddb2 cd d0 8a			call str_at_display 
ddb5 cd e0 8a			call update_display 
ddb8 cd 00 8a			call delay1s 
ddbb cd de de			call cin_wait 
ddbe						 
ddbe fe 2a			cp '*' 
ddc0 28 5e			jr z, .startupend1 
ddc2 fe 23			cp '#' 
ddc4 20 07			jr nz, .startno 
ddc6 3e 01			ld a, 1 
ddc8 32 e1 e6			ld (os_last_cmd),a 
ddcb 18 04			jr .startdo 
ddcd fe 31		.startno:	cp '1' 
ddcf 28 3a			jr z,.startnxt  
ddd1			 
ddd1				; exec startup line 
ddd1			.startdo:	 
ddd1 e1				pop hl 
ddd2 e5				push hl 
ddd3				 
ddd3 5e				ld e,(hl) 
ddd4 23				inc hl 
ddd5 56				ld d,(hl) 
ddd6 eb				ex de,hl 
ddd7			 
ddd7 e5				push hl 
ddd8			 
ddd8 3e 00			ld a, 0 
ddda				;ld a, FORTH_END_BUFFER 
ddda cd 5b 90			call strlent 
dddd 23				inc hl   ; include zero term to copy 
ddde 06 00			ld b,0 
dde0 4d				ld c,l 
dde1 e1				pop hl 
dde2 11 bb e2			ld de, scratch 
dde5 ed b0			ldir 
dde7			 
dde7			 
dde7 21 bb e2			ld hl, scratch 
ddea cd c4 9e			call forthparse 
dded cd 04 9f			call forthexec 
ddf0 cd 16 9e			call forthexec_cleanup 
ddf3			 
ddf3 3e 78			ld a, display_row_4 
ddf5 11 63 97			ld de, endprog 
ddf8			 
ddf8 cd e0 8a			call update_display		 
ddfb			 
ddfb 3a e1 e6			ld a, (os_last_cmd) 
ddfe fe 00			cp 0 
de00 20 09			jr nz, .startnxt 
de02 cd fd 99			call next_page_prompt 
de05 cd bd 8a		        call clear_display 
de08 cd e0 8a			call update_display		 
de0b			 
de0b				; move onto next startup line? 
de0b			.startnxt: 
de0b			 
de0b cd f4 89			call delay250ms 
de0e e1				pop hl 
de0f			 
de0f 23				inc hl 
de10 23				inc hl 
de11			 
de11 e5				push hl 
de12 5e				ld e, (hl) 
de13 23				inc hl 
de14 56				ld d, (hl) 
de15 e1				pop hl 
de16				; TODO replace 0 test 
de16			 
de16 eb				ex de, hl 
de17 cd 13 8d			call ishlzero 
de1a			;	ld a,e 
de1a			;	add d 
de1a			;	cp 0    ; any left to do? 
de1a eb				ex de, hl 
de1b c2 80 dd			jp nz, .start1 
de1e 18 01			jr .startupend 
de20			 
de20 e1			.startupend1: pop hl 
de21			.startupend: 
de21			 
de21 cd bd 8a			call clear_display 
de24 cd e0 8a			call update_display 
de27 c9				ret 
de28			if STORAGE_SE 
de28			 
de28			sprompt3: db "Loading from start-up file?:",0 
de28			sprompt4: db "(Y=Any key/N=No)",0 
de28			 
de28			 
de28			forth_autoload: 
de28			 
de28				; load block 0 of store 1 
de28				 
de28				ld a, $fe      ; bit 0 clear 
de28				ld (spi_device), a 
de28			 
de28				call storage_get_block_0 
de28			 
de28				ld a, (store_page+STORE_0_AUTOFILE) 
de28			 
de28				cp 0 
de28				ret z     ; auto start not enabled 
de28			 
de28				call clear_display 
de28			 
de28				; set bank 
de28			 
de28					ld a, (store_page+STORE_0_BANKRUN) 
de28					ld (spi_device), a 
de28			 
de28				; get file id to load from and get the file name to display 
de28			 
de28					ld a, (store_page+STORE_0_FILERUN) 
de28			 
de28					ld l, 0 
de28					ld h, a 
de28					ld de, store_page 
de28			 
de28					if DEBUG_FORTH_WORDS 
de28						DMARK "ASp" 
de28						CALLMONITOR 
de28					endif 
de28					call storage_read 
de28			 
de28					if DEBUG_FORTH_WORDS 
de28						DMARK "ASr" 
de28						CALLMONITOR 
de28					endif 
de28			 
de28					call ishlzero 
de28					ret z             ; file not found 
de28			 
de28					ld a, display_row_2 + 10 
de28					ld de, store_page+3 
de28					call str_at_display 
de28				 
de28			; 
de28			 
de28				ld a, display_row_1+5 
de28				ld de, sprompt3 
de28				call str_at_display 
de28				ld a, display_row_3+15 
de28				ld de, sprompt4 
de28				call str_at_display 
de28			 
de28				call update_display 
de28			 
de28				call cin_wait 
de28				cp 'n' 
de28				ret z 
de28				cp 'N' 
de28				ret z 
de28			 
de28				call delay1s 
de28			 
de28				ld a, (store_page+2) 
de28				ld (store_openmaxext), a    ; save count of ext 
de28				ld a, 1  
de28				ld (store_openext), a    ; save count of ext 
de28			 
de28			.autof:  
de28				ld l , a 
de28				 
de28				ld a, (store_page) 
de28				ld h, a	 
de28				ld de, store_page 
de28					if DEBUG_FORTH_WORDS 
de28						DMARK "ASl" 
de28						CALLMONITOR 
de28					endif 
de28					call storage_read 
de28				call ishlzero 
de28				ret z 
de28			;	jr z, .autoend 
de28			 
de28					if DEBUG_FORTH_WORDS 
de28						DMARK "ASc" 
de28						CALLMONITOR 
de28					endif 
de28				ld de, store_page+2 
de28				ld a, display_row_4 
de28				call str_at_display 
de28			 
de28				call update_display 
de28				call delay250ms 
de28			 
de28			 
de28			 
de28				ld hl, store_page+2 
de28				call forthparse 
de28				call forthexec 
de28				call forthexec_cleanup 
de28			 
de28				 
de28				ld a, (store_openext) 
de28				inc a 
de28				ld (store_openext), a    ; save count of ext 
de28			 
de28				jr .autof 
de28			;.autofdone: 
de28			; 
de28			;		if DEBUG_FORTH_WORDS 
de28			;			DMARK "ASx" 
de28			;			CALLMONITOR 
de28			;		endif 
de28			;;	call clear_display 
de28			;	ret 
de28			 
de28			 
de28			 
de28			endif 
# End of file forth_startupv1.asm
de28			endif 
de28			if STARTUP_V2 
de28				include "forth_startupv2.asm" 
de28			endif 
de28			 
# End of file forth_startup.asm
de28			 
de28			; eof 
# End of file forth_kernel.asm
de28			;include "nascombasic.asm" 
de28			 
de28			 
de28			; find out where the code ends if loaded into RAM (for SC114) 
de28			;endofcode:  
de28			;	nop 
de28			 
de28			 
de28			; jump to nmi vector 
de28			 
de28			init_nmi: 
de28 3e c9			ld a, $c9   ; RET 
de2a 32 72 ee			ld (nmi_vector), a 
de2d c9				ret 
de2e			nmi: 
de2e e5				push hl 
de2f d5				push de 
de30 c5				push bc 
de31 f5				push af 
de32 cd 72 ee			call nmi_vector 
de35 f5				push af 
de36 c5				push bc 
de37 d5				push de 
de38 e5				push hl 
de39 ed 4d			reti 
de3b			 
de3b			 
de3b			; eof 
de3b			 
# End of file main.asm
de3b			;include "firmware_lcd_4x40.asm" 
de3b			;;include "firmware_lcd_4x20.asm" 
de3b			include "firmware_serial_display.asm" 
de3b			 
de3b			; Serial display interface for SC114 
de3b			 
de3b			 
de3b			display_row_1: equ 0 
de3b			display_row_2: equ display_row_1+display_cols 
de3b			display_row_3: equ display_row_2 + display_cols 
de3b			display_row_4: equ display_row_3 + display_cols 
de3b			 
de3b			kLCDWidth:  EQU display_cols             ;Width in characters 
de3b			kLCD_Line1: EQU 0x00  
de3b			kLCD_Line2: EQU kLCD_Line1+kLCDWidth 
de3b			; E1 
de3b			kLCD_Line3: EQU kLCD_Line2+kLCDWidth 
de3b			kLCD_Line4: EQU kLCD_Line3+kLCDWidth  
de3b			 
de3b			lcd_init: 
de3b				; no init as handled by the SCM bios 
de3b c9				ret 
de3c			 
de3c			 
de3c			; low level functions for direct screen writes 
de3c			 
de3c			; output char at pos? 
de3c			fLCD_Str: 
de3c			        ;out (SC114_SIO_1_OUT),a 
de3c c5				push bc 
de3d 0e 02			ld c, $02 
de3f f7				rst $30 
de40 c1				pop bc 
de41 c9				ret 
de42			 
de42			; position the cursor on the screen using A as realtive point in screen buffer (i.e. A=(x+(width/y))) 
de42			fLCD_Pos: 
de42				; use ASCII escape to position 
de42			        ;out (SC114_SIO_1_OUT),a 
de42 c5				push bc 
de43 0e 02			ld c, $02 
de45 f7				rst $30 
de46 c1				pop bc 
de47			 
de47 c9				ret 
de48			 
de48			; output char at pos 
de48			fLCD_Data: 
de48			      ;  out (SC114_SIO_1_OUT),a 
de48 c5				push bc 
de49 0e 02			ld c, $02 
de4b f7				rst $30 
de4c c1				pop bc 
de4d			 
de4d c9				ret 
de4e			 
de4e			; ascii cls  
de4e			 
de4e 1b 5b 48 00	.cls:   db 27, '[', 'H', 0 
de52			 
de52			; write the frame buffer given in hl to hardware  
de52			write_display: 
de52			 
de52			API: equ 0 
de52			 
de52			if API 
de52				push bc 
de52				ld b, 4 
de52			 
de52			        ld (display_write_tmp), hl 	  
de52			 
de52				; clear and home cursor 
de52			 
de52				ld c, 6 
de52				ld de, .cls 
de52				rst $30 
de52			 
de52			 
de52			.writeln: 
de52			 
de52				ld de, (display_write_tmp) 
de52				ld c, 6 
de52				rst $30 
de52				ld c, 7 
de52				rst $30 
de52			 
de52				ld hl, (display_write_tmp) 
de52				ld de, display_cols 
de52				add hl,de 
de52				ld (display_write_tmp),hl 
de52			 
de52				djnz  .writeln 
de52			 
de52				pop bc 
de52			 
de52			 
de52				ret 
de52			endif 
de52 e5				push hl 
de53 c5				push bc 
de54 d5				push de 
de55			 
de55			;	ld c, 2 
de55			;	;ld de, .cls 
de55			;	ld a, 27 
de55			;	rst $30 
de55			;	ld c, 2 
de55			;	;ld de, .cls 
de55			;	ld a, '[' 
de55			;	rst $30 
de55			; 
de55			;	ld c, 2 
de55			;	;ld de, .cls 
de55			;	ld a, 'H' 
de55			;	rst $30 
de55			; 
de55			 
de55 0e 02			ld c, 2 
de57				;ld de, .cls 
de57 3e 1b			ld a, 27 
de59 f7				rst $30 
de5a			 
de5a			 
de5a 0e 02			ld c, 2 
de5c				;ld de, .cls 
de5c 3e 5b			ld a, '[' 
de5e f7				rst $30 
de5f 0e 02			ld c, 2 
de61				;ld de, .cls 
de61 3e 32			ld a, '2' 
de63 f7				rst $30 
de64 0e 02			ld c, 2 
de66				;ld de, .cls 
de66 3e 4a			ld a, 'J' 
de68 f7				rst $30 
de69 d1				pop de 
de6a c1				pop bc 
de6b e1				pop hl 
de6c			 
de6c			 
de6c 22 c3 eb		        ld (display_write_tmp), hl 	  
de6f 3e 00			ld a, kLCD_Line1 
de71			        ;    CALL fLCD_Pos       ;Position cursor to location in A 
de71 06 28			ld b, display_cols 
de73 ed 5b c3 eb		ld de, (display_write_tmp) 
de77 cd d5 de			call write_len_string 
de7a				 
de7a			 
de7a e5			push hl 
de7b d5			push de 
de7c c5			push bc 
de7d 0e 07			ld c, 7 
de7f f7				rst $30 
de80 c1			pop bc 
de81 d1			pop de 
de82 e1			pop hl 
de83			 
de83				 
de83 2a c3 eb			ld hl, (display_write_tmp) 
de86 11 28 00			ld de, display_cols 
de89 19				add hl,de 
de8a 22 c3 eb			ld (display_write_tmp),hl 
de8d			 
de8d				 
de8d 3e 28			ld a, kLCD_Line2 
de8f			        ;    CALL fLCD_Pos       ;Position cursor to location in A 
de8f 06 28			ld b, display_cols 
de91 ed 5b c3 eb		ld de, (display_write_tmp) 
de95 cd d5 de			call write_len_string 
de98				 
de98 2a c3 eb			ld hl, (display_write_tmp) 
de9b 11 28 00			ld de, display_cols 
de9e 19				add hl,de 
de9f 22 c3 eb			ld (display_write_tmp),hl 
dea2			 
dea2 e5			push hl 
dea3 d5			push de 
dea4 c5			push bc 
dea5 0e 07			ld c, 7 
dea7 f7				rst $30 
dea8 c1			pop bc 
dea9 d1			pop de 
deaa e1			pop hl 
deab			 
deab				 
deab 3e 50			ld a, kLCD_Line3 
dead			         ;   CALL fLCD_Pos       ;Position cursor to location in A 
dead 06 28			ld b, display_cols 
deaf ed 5b c3 eb		ld de, (display_write_tmp) 
deb3 cd d5 de			call write_len_string 
deb6				 
deb6 2a c3 eb			ld hl, (display_write_tmp) 
deb9 11 28 00			ld de, display_cols 
debc 19				add hl,de 
debd 22 c3 eb			ld (display_write_tmp),hl 
dec0			 
dec0 e5			push hl 
dec1 d5			push de 
dec2 c5			push bc 
dec3 0e 07			ld c, 7 
dec5 f7				rst $30 
dec6 c1			pop bc 
dec7 d1			pop de 
dec8 e1			pop hl 
dec9			 
dec9				 
dec9 3e 78			ld a, kLCD_Line4 
decb			          ;  CALL fLCD_Pos       ;Position cursor to location in A 
decb 06 28			ld b, display_cols 
decd ed 5b c3 eb		ld de, (display_write_tmp) 
ded1 cd d5 de			call write_len_string 
ded4 c9					ret 
ded5			 
ded5			 
ded5				; write out a fixed length string given in b from de 
ded5			 
ded5 1a			write_len_string:   LD   A, (DE)        ;Get character from string 
ded6 cd 48 de		            CALL fLCD_Data      ;Write character to display 
ded9 13				inc de 
deda 10 f9			djnz write_len_string 
dedc c9				ret 
dedd			 
dedd			 
dedd			; eof 
# End of file firmware_serial_display.asm
dedd			;include "firmware_key_5x10.asm" 
dedd			;;include "firmware_key_4x10.asm" 
dedd			include "firmware_key_serial.asm" 
dedd			; Serial keyboard interface for SC114 
dedd			 
dedd			key_init: 
dedd				; no init as handled by the SCM bios 
dedd c9				ret 
dede			 
dede			 
dede			cin_wait: 
dede			;	ld a, 0 
dede			;	ret 
dede			 
dede				;in a,(SC114_SIO_1_IN) 
dede			        ; Use SCM API to get from whatever console device we are using 
dede c5				push bc 
dedf 0e 01			ld c, $01 
dee1 f7				rst $30 
dee2 c1				pop bc 
dee3 c9				ret 
dee4			 
dee4			cin: 
dee4			 
dee4			 
dee4 c5				push bc 
dee5			 
dee5				; any key waiting to process? 
dee5 0e 03			ld c, $03 
dee7 f7				rst $30 
dee8 28 05			jr z, .cin_skip 
deea			 
deea				; yep, get it 
deea			 
deea 0e 01			ld c, $01 
deec f7				rst $30 
deed c1				pop bc 
deee c9				ret 
deef			.cin_skip: 
deef 3e 00			ld a, 0 
def1 c1				pop bc 
def2 c9				ret 
def3			 
def3			 
def3			 
def3			 
# End of file firmware_key_serial.asm
def3			endofcode:  
def3			baseram:  
def3 00				nop 
def4			 
def4			heap_start: equ baseram+15  ; Starting address of heap 
def4			free_list:  equ baseram+10      ; Block struct for start of free list (MUST be 4 bytes) 
def4			heap_size: equ  heap_end-heap_start      ; Number of bytes available in heap   TODO make all of user ram 
def4			;VDU:  EQU     endofcode           ; BASIC Work space 
def4			; eof 
def4			 
# End of file os_mega_sc114.asm
def4
