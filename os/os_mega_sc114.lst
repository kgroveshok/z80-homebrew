# File os_mega_sc114.asm
0000			 
0000			; Hardware Platform 
0000			 
0000			BASE_SC114: equ 1 
0000			BASE_KEV: equ 0 
0000			BASE_CPM: equ 0 
0000			 
0000			ENABLE_BASIC: equ 0 
0000			 
0000			STARTUP_V1: equ 1 
0000			STARTUP_V2: equ 0 
0000			 
0000			tos:	equ 0f000h 
0000			; Using SCM API instead 
0000			;SC114_SIO_1_OUT: equ 81 
0000			;SC114_SIO_1_IN: equ 80 
0000			; 
0000			; 
0000			; CPU clock 
0000			; 
0000			CPU_CLOCK_4MHZ: equ 1 
0000			CPU_CLOCK_8MHZ: equ  0 
0000			CPU_CLOCK_10MHZ: equ  0 
0000			 
0000			; use microchip serial eeprom for storage 
0000			 
0000			STORAGE_SE: equ 0 
0000			SOUND_ENABLE: equ 0 
0000			 
0000			; the port where the PIO using the SC103 card is located 
0000			 
0000			SC103_PIO: equ 068h 
0000			 
0000			; Full OS but with the 5x10 fullsized keyboard 
0000			 
0000			display_rows: equ 4     
0000			;display_cols: equ 20 
0000			display_cols: equ 40 
0000			 
0000			key_rows: equ 5      
0000			key_cols: equ 10    
0000			 
0000			 
0000			include "main.asm" 
0000			; z80 homebrew opperating system 
0000			; 
0000			 
0000			STARTUP_ENABLE: equ 1 
0000			 
0000			 
0000			; bios jump points via rst 
0000			 
0000			if BASE_SC114 = 1  
0000			 
0000				org 8000h 
8000			endif 
8000			 
8000			if BASE_KEV = 1  
8000			 
8000				org 0h 
8000			endif 
8000			 
8000			if BASE_CPM = 1  
8000			 
8000				org 100h 
8000			endif 
8000 c3 4f 97			jp coldstart     ; rst 0 - cold boot 
8003			 
8003			 
8003 .. 00		buildtime: db   "Build: 00/00/00 00:00:00",0 
801c			 
801c			 
801c			 
801c			;        nop  
801c			;        nop 
801c			;;	org 05h		; null out bdos call 
801c			; 
801c			;        nop  
801c			;        nop  
801c			;        nop 
801c			;;	org 08h 
801c			;;; 
801c			;;	jp cin		; rst 8 - char in 
801c			;;; 
801c			; 
801c			;        nop 
801c			;        nop 
801c			;        nop 
801c			;        nop 
801c			;        nop 
801c			;        nop 
801c			;        nop 
801c			;        nop 
801c			;	org 010h 
801c			;; 
801c			;	jp cout		; rest 010h  - char out 
801c			;; 
801c			;	org 01bh   
801c			; 
801c			;	;jp  		; rst 01bh   - write string to display 
801c			;	jp str_at_display 
801c			; 
801c			; 
801c			;	org 020h 
801c			; 
801c			;	; jp		 ; rst 020h - read char at screen location 
801c			; 
801c			;	org 028h 
801c			 
801c				; jp		 ; rst 028h  - storage i/o 
801c			 
801c			; 	org 030h 
801c			;	jp break_point_state 
801c			  
801c			; $30  
801c			; org 038h 
801c			; $38 
801c			 
801c			; TODO any more important entry points to add to jump table for easier coding use? 
801c			 
801c			if BASE_KEV = 1  
801c			 
801c				; need to be at $66 for nmi support 
801c				db 0,255,0,255,0,255 
801c				db 0,255,0,255,0,255 
801c				db 0,255,0,255,0,255 
801c				db 0,255,0,255,0,255 
801c				db 0,255,0,255,0,255 
801c				db 0,255,0,255,0,255 
801c				db 0,255,0,255,0,255 
801c				db 0,255,0,255,0,255 
801c				db 0,255,0,255,0,255 
801c				db 0,255,0,255,0,255 
801c				db 0,255,0,255,0,255 
801c				db 0,255,0,255,0,255 
801c				db 0,255 
801c				jp nmi 
801c			endif 
801c			 
801c			include "firmware.asm" 
801c			  
801c			; main constants (used here and in firmware)  
801c			  
801c			; TODO have page 0 of storage as bios  
801c			  
801c			Device_A: equ 0h  
801c			Device_B: equ 040h          ; Sound  
801c			  
801c			if BASE_KEV  
801c			Device_C: equ 080h          ; Storage and ext cart devices  
801c			endif  
801c			  
801c			if BASE_SC114  
801c			Device_C: equ  SC103_PIO          ; Storage and ext cart devices  
801c			endif  
801c			  
801c			if BASE_CPM  
801c			; TODO fixup for CPM  
801c			Device_C: equ 080h          ; Storage and ext cart devices  
801c			endif  
801c			  
801c			Device_D: equ 0c0h             ; Keyboard and LCD  
801c			  
801c			; Odd specific debug points for testing hardware dev  
801c			  
801c			DEBUG_SOUND: equ 0       
801c			DEBUG_STK_FAULT: equ 0  
801c			DEBUG_INPUT: equ 0     ; Debug input entry code  
801c			DEBUG_KEYCINWAIT: equ 0  
801c			DEBUG_KEYCIN: equ 0  
801c			DEBUG_KEY: equ 0  
801c			DEBUG_KEY_MATRIX: equ 0  
801c			DEBUG_STORECF: equ 0  
801c			DEBUG_STORESE: equ 1        ; TODO  w locks up, r returns.   
801c			DEBUG_SPI_HARD_CE0: equ 0    ; only handshake on CE0 on port A  
801c			DEBUG_SPI: equ 0    ; low level spi tests  
801c			  
801c			; Enable many break points  
801c			  
801c			DEBUG_FORTH_PARSE_EXEC: equ 0     ; 6  
801c			DEBUG_FORTH_PARSE_EXEC_SLOW: equ 0     ; 6  
801c			DEBUG_FORTH_PARSE_NEXTWORD: equ 0  
801c			DEBUG_FORTH_JP: equ 0    ; 4  
801c			DEBUG_FORTH_MALLOC: equ 0  
801c			DEBUG_FORTH_MALLOC_INT: equ 0  
801c			DEBUG_FORTH_DOT: equ 1  
801c			DEBUG_FORTH_DOT_WAIT: equ 0  
801c			DEBUG_FORTH_MATHS: equ 0  
801c			DEBUG_FORTH_TOK: equ 0    ; 4  
801c			DEBUG_FORTH_PARSE: equ 0    ; 3  
801c			DEBUG_FORTH: equ 0  ;2  
801c			DEBUG_FORTH_WORDS: equ 1   ; 1  
801c			DEBUG_FORTH_PUSH: equ 1   ; 1  
801c			DEBUG_FORTH_UWORD: equ 1   ; 1  
801c			  
801c			; Enable key point breakpoints  
801c			  
801c			DEBUG_FORTH_DOT_KEY: equ 0  
801c			DEBUG_FORTH_PARSE_KEY: equ 0   ; 5  
801c			DEBUG_FORTH_WORDS_KEY: equ 1   ; 1  
801c			  
801c			; Debug stack imbalances  
801c			  
801c			ON: equ 1  
801c			OFF: equ 0  
801c			  
801c			DEBUG_STACK_IMB: equ 0  
801c			STACK_IMB_STORE: equ 20  
801c			  
801c			; House keeping and protections  
801c			  
801c			DEBUG_FORTH_STACK_GUARD: equ 1  
801c			DEBUG_FORTH_MALLOC_GUARD: equ 1  
801c			DEBUG_FORTH_MALLOC_HIGH: equ 0     ; warn only if more than 255 chars being allocated. would be highly unusual!  
801c			FORTH_ENABLE_FREE: equ 0  
801c			FORTH_ENABLE_MALLOCFREE: equ 1  
801c			FORTH_ENABLE_DSPPOPFREE: equ 1    ; TODO BUG Seems to be OK in some situations but with SW it crashes straight away  
801c			FORTH_ENABLE_FLOATMATH: equ 0  
801c			  
801c			  
801c			CALLMONITOR: macro  
801c			;	call break_point_state  
801c			; now use the break point debug vector  
801c				call debug_vector  
801c				endm  
801c			  
801c			MALLOC_1: equ 1        ; from dk88   
801c			MALLOC_2: equ 0           ; broke  
801c			MALLOC_3: equ 0           ; really broke  
801c			MALLOC_4: equ 0              ; mine pretty basic reuse and max of 250 chars  
801c			  
801c			if BASE_KEV   
801c			stacksize: equ 256  
801c			  
801c			STACK_RET_SIZE: equ 64  
801c			STACK_LOOP_SIZE: equ 128  
801c			STACK_DATA_SIZE: equ 512  
801c			endif  
801c			if BASE_SC114  
801c			;tos:	equ 0f000h  
801c			stacksize: equ 256  
801c			STACK_RET_SIZE: equ 64  
801c			STACK_LOOP_SIZE: equ 128  
801c			STACK_DATA_SIZE: equ 256  
801c			endif  
801c			  
801c			if BASE_CPM  
801c			;tos:	equ 0f000h  
801c			stacksize: equ 256  
801c			STACK_RET_SIZE: equ 64  
801c			STACK_LOOP_SIZE: equ 128  
801c			STACK_DATA_SIZE: equ 256  
801c			endif  
801c			  
801c			;if STORAGE_SE == 0  
801c			STORE_BLOCK_PHY:   equ 64    ; physical block size on storage   64byte on 256k eeprom  
801c			STORE_DEVICE_MAXBLOCKS:  equ  255*2 ; how many blocks are there on this storage device  
801c			;endif  
801c			  
801c			; Block 0 at offset $3b is a flag to decide to offer auto start up - 0 = prompt 1-auto run no prompt 2 - dont run  
801c			  
801c			STORE_0_AUTORUN: equ $20  
801c			  
801c			; Block 0 at offset $20+ holds the file number to run at system startup after the display  
801c			  
801c			STORE_0_AUTOFILE: equ $21  
801c			STORE_0_BANKRUN: equ $23  
801c			STORE_0_FILERUN: equ $24  
801c			  
801c			; Block 0 offsets for settings  
801c			  
801c			; if set then skip prompt for start up and accept all  
801c			  
801c			STORE_0_QUICKSTART: equ $25  
801c			  
801c			; Blocks where directory table is held  
801c			  
801c			; Reducing the number of entries increases the max file size  
801c			  
801c			;STORE_DIR_START: equ 1  
801c			;STORE_DIR_END: equ 33  
801c			  
801c			; Blocks from where file data is stored  
801c			  
801c			;STORE_DATA_START: equ STORE_DIR_END + 1  
801c			  
801c			; Block indicators (<32 are data files)  
801c			  
801c			;STORE_BLOCK_CFG: equ $8f       ; config block  
801c			;STORE_BLOCK_DIRF: equ $8e       ; directory block free  
801c			;STORE_BLOCK_DIRU: equ $8d       ; directory block free  
801c			;STORE_BLOCK_FREE: equ $85       ; data block free  
801c			;STORE_BLOCK_AUTO: equ $89       ; auto start code  
801c			  
801c			  
801c			  
801c			; Directory entry flags  
801c			  
801c			;STORE_DIR_FREE: equ 0  
801c			;STORE_DIR_FILE:  equ 1  
801c			  
801c			; Structure offsets to directory entries  
801c			;STORE_DE_FLAG: equ 0  
801c			;STORE_DE_MAXEXT: equ 1  
801c			;STORE_DE_FILENAME: equ 2  
801c			  
801c			; Structure offsets to block 0  
801c			  
801c			;STORE_BK0_ISFOR: equ 1  
801c			;STORE_BK0_LABEL: equ 3  
801c			  
801c			; memory allocation   
801c			  
801c			chk_stund: equ tos+2           ; underflow check word  
801c			chk_stovr: equ chk_stund-stacksize -2; overflow check word  
801c			  
801c			; keyscan table needs rows x cols buffer  
801c			;key_rows: equ 5     ; TODO move out to mini and maxi + 1 null  
801c			;key_cols: equ 10    ; TODO move out to mini and maxi + 1 null  
801c			  
801c			keyscan_table_row1: equ chk_stovr -key_cols-1  
801c			keyscan_table_row2: equ keyscan_table_row1-key_cols-1  
801c			keyscan_table_row3: equ keyscan_table_row2-key_cols-1  
801c			keyscan_table_row4: equ keyscan_table_row3-key_cols-1  
801c			keyscan_table_row5: equ keyscan_table_row4-key_cols-1  
801c			keyscan_table: equ keyscan_table_row5-(key_cols*key_rows)-1  
801c			keyscan_scancol: equ keyscan_table-key_cols  
801c			;keyscan_table_len: equ key_rows*key_cols  
801c			;keybufptr: equ keyscan_table - 2  
801c			;keysymbol: equ keybufptr - 1  
801c			key_held: equ keyscan_scancol-1	; currently held  
801c			key_held_prev: equ key_held - 1   ; previously held (to detect bounce and cycle of key if required)  
801c			key_repeat_ct: equ key_held_prev - 4 ; timers (two words)  
801c			key_fa: equ key_repeat_ct -1 ;  
801c			key_fb: equ key_fa -1 ;  
801c			key_fc: equ key_fb -1 ;  
801c			key_fd: equ key_fc -1 ;  
801c			key_face_held: equ key_fd - 1   
801c			  
801c			; flag for enabling/disabling various hardware diag loading via block 0 on bank 1  
801c			  
801c			hardware_config: equ key_face_held - 10  
801c			  
801c			; hardware config switches  
801c			; TODO add bitmasks on includes for hardware  
801c			; high byte for expansion ids  
801c			;     0000 0000  no card inserted  
801c			;     0000 0001  storage card inserted  
801c			;     0000 0010  spi sd card active  
801c			  
801c			;       
801c			; low byte:  
801c			;     0000 0001   4x4 keypad  
801c			;     0000 0010   full keyboard  
801c			;     0000 0011   spi/ext keyboard  
801c			;     0000 0100   20x4 lcd  
801c			;     0000 1000   40x4 lcd  
801c			;     0000 1100   spi/ext display  
801c			;     0001 0000   ide interface available  
801c			  
801c			hardware_word: equ hardware_config - 2  
801c			  
801c			; debug marker - optional display of debug point on the debug screens  
801c			  
801c			nmi_vector:  equ hardware_word - 3   ; vector to the nmi handler  
801c			debug_vector:  equ nmi_vector - 3   ; vector to the debug handler  
801c			  
801c			debug_mark: equ debug_vector - 4  
801c			  
801c			; input_str vars  
801c			input_ptr:  equ debug_mark - 2    ; ptr to the current cursor position of string currently being edited  on entry starting   
801c			input_start:  equ input_ptr - 2    ; ptr to the start of string   
801c			input_size: equ input_start -1  ; number of chars  
801c			input_display_size: equ input_size -1  ; TODO number of chars that are displayable. if < input_size then scroll   
801c			input_at_pos: equ input_display_size - 1 ; frame buffer offset for start of input  
801c			input_under_cursor: equ input_at_pos - 1 ; char under the cursor so we can blink it  
801c			input_at_cursor: equ input_under_cursor - 1 ; offset of cursor to current start of string  
801c			input_cur_flash: equ input_at_cursor - 2 ;  timeout for cursor flash  
801c			input_cur_onoff: equ input_cur_flash - 1 ;  cursor blink on or off  
801c			input_len: equ input_cur_onoff - 5 ; length of current input  
801c			input_cursor: equ input_len - 5 ; offset of cursor to current start of string  
801c			  
801c			CUR_BLINK_RATE: equ 15  
801c			  
801c			key_actual_pressed: equ input_cursor - 1   
801c			key_symbol: equ key_actual_pressed - 1   
801c			key_shift: equ key_symbol - 1   
801c			  
801c			; Display allocation  
801c			  
801c			;display_rows: equ 4     ; move out to mini and mega files  
801c			;display_cols: equ 20  
801c			  
801c			display_fb_len: equ display_rows*display_cols  
801c			  
801c			; primary frame buffer     
801c			display_fb0: equ  key_shift-display_fb_len -1 ; -display_fb_len-1          ; cli input     TODO why is that doubling up?  
801c			; working frame buffers  
801c			display_fb1: equ  display_fb0-display_fb_len -1 ; -display_fb_len-1          ; default running program  
801c			display_fb3: equ  display_fb1-display_fb_len - 1  
801c			display_fb2: equ  display_fb3-display_fb_len - 1  
801c			;  
801c			; pointer to active frame buffer  
801c			display_fb_active: equ display_fb2 - 2  
801c			display_lcde1e2: equ display_fb_active - 1         ; 0=e1, 1=e2   For E1/E2 selection when using the lcd 4x40 display  
801c			display_write_tmp: equ display_lcde1e2 - 2  
801c			display_active:  equ display_write_tmp-3   ; current state of activity char (plus room to write string)  
801c			  
801c			;  
801c			  
801c			;; can load into de directory  
801c			cursor_col: equ display_active-1  
801c			cursor_row: equ cursor_col-1  
801c			cursor_ptr: equ cursor_row - 1     ;  actual offset into lcd memory for row and col combo  
801c			cursor_shape: equ cursor_ptr - 2   ; char used for the current cursor   
801c			  
801c			; maths vars  
801c			  
801c			LFSRSeed: equ cursor_shape -20   
801c			randData: equ LFSRSeed - 2  
801c			xrandc: equ randData - 2  
801c			stackstore: equ xrandc - 2  
801c			seed1: equ  stackstore -2   
801c			seed2: equ seed1 - 2  
801c			  
801c			; cf storage vars  
801c			  
801c			iErrorNum:  equ seed2-1         ;Error number  
801c			iErrorReg:  equ iErrorNum -1              ;Error register  
801c			iErrorVer:  equ iErrorReg - 1              ;Verify error flag  
801c			  
801c			store_bank_active: equ iErrorVer - (5 + 8 ) 		; TODO not used.  indicator of which storage banks are available to use 5 on board and 8 in cart  
801c			  
801c			STORE_BLOCK_LOG:  equ   280      ; TODO remove.... Logical block size     
801c			  
801c			store_page: equ store_bank_active-STORE_BLOCK_LOG-1            ; bigger than page size for eeprom so we can join multiple blocks if they are continuation records  
801c			;?????store_ffpage: equ store_page-STORE_BLOCK_LOG            ; page size for eeprom?????  
801c			store_readptr: equ store_page-2       ; tracks the file extent during storage_read of continuation blocks  
801c			store_readbuf: equ store_readptr-2       ; tracks the position for the buffer during storage_read of continuation blocks  
801c			store_longread: equ store_readbuf -1 ;   if zero then only read one block. If not zero then do a read for as long as required  
801c			store_tmp1: equ store_longread - 2      ; temp pointer holders during ops  
801c			store_tmp2: equ store_tmp1 - 2        ; temp pointer holders during ops  
801c			store_tmp3: equ store_tmp2 - 2        ; temp pointer holders during ops  
801c			store_tmpid: equ store_tmp3 - 1		; page temp id  
801c			store_tmpext: equ store_tmpid - 1		; file extent temp  
801c			store_readcont: equ store_tmpid - 1		; If current read results in an overflow buffer to next record flag it up  
801c			store_openaddr: equ store_readcont - 2		; file block address of current opened file for read  
801c			store_openext: equ store_openaddr - 1		; file extent of current opened file for read  
801c			store_openmaxext: equ store_openext - 1		; max extent of current opened file for read  
801c			store_filecache: equ store_openmaxext-2   ;  TODO (using just one for now)  file id + extent count cache * 5  
801c			store_tmppageid: equ store_filecache-2    ; phyical page id temp  
801c			;  
801c			; spi vars  
801c			  
801c			  
801c			spi_clktime: equ store_tmppageid - 1      ; holds the number of ms that happens between spi clock pulses  
801c			spi_cartdev: equ spi_clktime - 1      ; holds bit mask to send to portb (ext spi) devices  
801c			spi_cartdev2: equ spi_cartdev - 1      ; holds bit mask to send to portb's shift reg devices  
801c			spi_portbyte: equ spi_cartdev2 - 1      ; holds bit mask to send to spi bus   
801c			spi_device: equ spi_portbyte - 1    ; bit mask to send to porta (eeproms) devices  
801c			spi_device_id: equ spi_device - 1    ; human readable bank number  
801c			  
801c			;;;;; forth cli params  
801c			  
801c			; TODO use a different frame buffer for forth???  
801c			  
801c			f_cursor_ptr:  equ spi_device_id - 1  ; offset into frame buffer for any . or EMIT output  
801c			cli_buffer: equ f_cursor_ptr - 20     ; temp hold - maybe not needed  
801c			cli_origtoken: equ cli_buffer - 2     ; pointer to the text of token for this word being checked  
801c			cli_token: equ cli_origtoken - 2     ; pointer to the text of token for this word being checked  
801c			cli_execword: equ cli_token - 2      ; pointer to start of code for this word  
801c			cli_nextword: equ cli_execword - 2      ; pointer to start of next word in dict  
801c			cli_ptr: equ cli_nextword - 2           ; pointer to start of word to parse by forth kernel (working)  
801c			cli_origptr: equ cli_ptr - 2           ; pointer to start of word to parse which resets cli_ptr on each word test  
801c			  
801c			cli_mvdot: equ cli_origptr - 1 ;     ; true will move the cursor once something is displayed  
801c			cli_autodisplay: equ cli_mvdot - 1 ;     ; true will auto update the display (slow) otherwise need to use DRAW  
801c			cli_var_array: equ cli_autodisplay - ( 10 * 2 ) ; word or string pointer variables using V@0-V@9  
801c			cli_var_array2: equ cli_var_array - ( 26 * 2 ) ; word or string pointer variables using VAR word  
801c			cli_ret_sp: equ cli_var_array2 - 2    ; ret stack pointer  
801c			cli_loop_sp: equ cli_ret_sp - 2   ; data stack pointer  
801c			cli_data_sp: equ cli_loop_sp - 2   ; data stack pointer  
801c			  
801c			chk_ret_und: equ cli_data_sp-2           ; underflow check word  
801c			cli_ret_stack: equ chk_ret_und - STACK_RET_SIZE      ; TODO could I just use normal stack for this? - use linked list for looping  
801c			chk_ret_ovr: equ cli_ret_stack -2; overflow check word  
801c			cli_loop_stack: equ chk_ret_ovr - STACK_LOOP_SIZE      ; TODO could I just use normal stack for this? - use linked list for looping  
801c			chk_loop_ovr: equ cli_loop_stack -2; overflow check word  
801c			cli_data_stack: equ chk_loop_ovr - STACK_DATA_SIZE		 ;   
801c			chk_data_ovr: equ cli_data_stack -2; overflow check word  
801c			  
801c			os_var_array: equ chk_data_ovr - (32 * 2)      ;   32 word array for use using the SCRATCH word  
801c			  
801c			; os/forth token vars  
801c			  
801c			os_last_cmd: equ os_var_array-255  
801c			os_cli_cmd: equ os_last_cmd-255              ; cli command entry line  
801c			os_current_i: equ os_cli_cmd-2  
801c			os_cur_ptr: equ os_current_i-2  
801c			os_word_scratch: equ os_cur_ptr-30  
801c			os_tok_len: equ os_word_scratch - 2  
801c			os_tok_ptr: equ os_tok_len - 2               ; our current PC ptr  
801c			os_tok_malloc: equ os_tok_ptr - 2  
801c			os_last_new_uword: equ os_tok_malloc - 2    ; hold start of last user word added  
801c			os_input: equ os_last_new_uword-255    ; buffer for EDIT word  
801c			execscratch: equ os_input-255        ; exec cmd eval buffer  
801c			scratch: equ execscratch-255  
801c			  
801c			  
801c			; temp locations for new word processing to save on adding more   
801c			  
801c			os_new_malloc: equ scratch-2  
801c			os_new_parse_len: equ os_new_malloc - 2  
801c			os_new_word_len: equ os_new_parse_len - 2  
801c			os_new_work_ptr: equ os_new_word_len - 2  
801c			os_new_src_ptr: equ os_new_work_ptr - 2  
801c			os_new_exec: equ os_new_src_ptr - 2  
801c			os_new_exec_ptr: equ os_new_exec - 2  
801c			  
801c			; resume memory alloocations....  
801c			  
801c			;os_view_disable: equ os_new_exec_ptr - 1  
801c			os_view_af: equ os_new_exec_ptr - 2  
801c			os_view_hl: equ os_view_af -2  
801c			os_view_de: equ os_view_hl - 2  
801c			os_view_bc: equ os_view_de - 2  
801c			  
801c			; stack checksum word  
801c			if DEBUG_STACK_IMB  
801c				curframe: equ  os_view_de - 5  
801c				store_sp: equ curframe - (STACK_IMB_STORE*4)  
801c				chk_word: equ store_sp - 2		 ; this is the word to init and then check against to detect stack corruption. Held far away from all stacks  
801c			else  
801c				chk_word: equ os_view_bc - 2		 ; this is the word to init and then check against to detect stack corruption. Held far away from all stacks  
801c			endif  
801c			  
801c			; with data stack could see memory filled with junk. need some memory management   
801c			; malloc and free entry points added  
801c			  
801c			;free_list:  equ chk_word - 4     ; Block struct for start of free list (MUST be 4 bytes)  
801c			;heap_size: equ  (free_list-08100h)      ; Number of bytes available in heap   TODO make all of user ram  
801c			;;heap_start: equ free_list - heap_size  ; Starting address of heap  
801c			;heap_end: equ free_list-1  ; Starting address of heap  
801c			;heap_start: equ free_list - heap_size  ; Starting address of heap  
801c			  
801c			;heap_start: equ free_list - heap_size  ; Starting address of heap  
801c			heap_end: equ chk_word-1  ; Starting address of heap  
801c			  
801c			  
801c			;if BASE_KEV   
801c			;heap_start: equ 0800eh  ; Starting address of heap  
801c			;free_list:  equ 0800ah      ; Block struct for start of free list (MUST be 4 bytes)  
801c			;heap_size: equ  heap_end-heap_start      ; Number of bytes available in heap   TODO make all of user ram  
801c			;endif  
801c			  
801c			;if BASE_SC114  
801c			;heap_start: equ baseram+15  ; Starting address of heap  
801c			;free_list:  equ baseram+10      ; Block struct for start of free list (MUST be 4 bytes)  
801c			;endif  
801c			  
801c			  
801c			;;;;  
801c			  
801c			  
801c			; change below to point to last memory alloc above  
801c			topusermem:  equ   heap_start  
801c			  
801c			;if BASE_KEV   
801c			;baseusermem: equ 08000h  
801c			;endif  
801c			  
801c			;if BASE_SC114  
801c			;;aseusermem:     equ    12  
801c			;baseusermem:     equ    prompt  
801c			;;baseusermem:     equ    endofcode  
801c			;endif  
801c			  
801c			  
801c			; **********************************************************************  
801c			; **  Constants  
801c			; **********************************************************************  
801c			  
801c			; Constants used by this code module  
801c			kDataReg:   EQU Device_D           ;PIO port A data register  
801c			kContReg:   EQU Device_D+2           ;PIO port A control register  
801c			  
801c			  
801c			portbdata:  equ Device_D+1    ; port b data  
801c			portbctl:   equ Device_D+3    ; port b control  
801c			  
801c			  
801c			;KEY_SHIFT:   equ 5  
801c			;KEY_SYMBOLSHIFT:  equ 6  
801c			  
801c			KEY_SHIFTLOCK: equ 4  
801c			  
801c			  
801c			KEY_UP: equ 5  
801c			KEY_NEXTWORD: equ 6  
801c			KEY_PREVWORD: equ 7  
801c			KEY_BS: equ 8  
801c			KEY_TAB:  equ 9  
801c			KEY_DOWN: equ 10  
801c			KEY_LEFT: equ 11  
801c			KEY_RIGHT: equ 12  
801c			KEY_CR:   equ 13  
801c			KEY_HOME: equ 14  
801c			KEY_END: equ 15  
801c			  
801c			KEY_F1: equ 16  
801c			KEY_F2: equ 17  
801c			KEY_F3: equ 18  
801c			KEY_F4: equ 19  
801c			  
801c			KEY_F5: equ 20  
801c			KEY_F6: equ 21  
801c			KEY_F7: equ 22  
801c			KEY_F8: equ 23  
801c			  
801c			KEY_F9: equ 24  
801c			KEY_F10: equ 25  
801c			KEY_F11: equ 26  
801c			KEY_F12: equ 27  
801c			  
801c			;if DEBUG_KEY  
801c			;	KEY_MATRIX_NO_PRESS: equ '.'  
801c			;	KEY_SHIFT:   equ '.'  
801c			;	KEY_SYMBOLSHIFT:  equ '.'  
801c			;else  
801c				KEY_SHIFT:   equ '~'  
801c				KEY_SYMBOLSHIFT:  equ '~'  
801c				KEY_MATRIX_NO_PRESS: equ '~'  
801c			;endi  
801c			  
801c			  
801c			  
801c			  
801c			; Macro to make adding debug marks easier  
801c			  
801c			DMARK: macro str  
801c				push af  
801c				ld a, (.dmark)  
801c				ld (debug_mark),a  
801c				ld a, (.dmark+1)  
801c				ld (debug_mark+1),a  
801c				ld a, (.dmark+2)  
801c				ld (debug_mark+2),a  
801c				jr .pastdmark  
801c			.dmark: db str  
801c			.pastdmark: pop af  
801c			  
801c			endm  
801c			  
801c			  
801c			; macro to detect for stack imbalances  
801c			  
801c			include "stackimbal.asm"  
801c			; Macro and code to detect stock imbalances 
801c			 
801c			SPPUSH: equ 0 
801c			 
801c			; Add a stack frame which can be checked before return 
801c			 
801c			STACKFRAME: macro onoff frame1 frame2 
801c			 
801c				if DEBUG_STACK_IMB 
801c					if onoff 
801c						; save current SP 
801c						exx 
801c			 
801c						ld de, frame1 
801c						ld a, d 
801c						ld hl, curframe 
801c						call hexout 
801c						ld a, e 
801c						ld hl, curframe+2 
801c						call hexout 
801c			  
801c						ld hl, frame1 
801c						push hl 
801c						ld hl, frame2 
801c						push hl 
801c						exx 
801c					endif 
801c					 
801c				endif 
801c			endm 
801c			 
801c			STACKFRAMECHK: macro onoff frame1 frame2 
801c			 
801c					 
801c				if DEBUG_STACK_IMB 
801c					if onoff 
801c						exx 
801c						; check stack frame SP 
801c			 
801c						ld hl, frame2 
801c						pop de   ; frame2 
801c			 
801c						call cmp16 
801c						jr nz, .spnosame 
801c						 
801c			 
801c						ld hl, frame1 
801c						pop de   ; frame1 
801c			 
801c						call cmp16 
801c						jr z, .spfrsame 
801c			 
801c						.spnosame: call showsperror 
801c			 
801c						.spfrsame: nop 
801c			 
801c						exx 
801c					endif 
801c					 
801c				endif 
801c			 
801c			 
801c			endm 
801c			 
801c			 
801c			; for a sub routine, wrap SP collection and comparisons 
801c			 
801c			; Usage: 
801c			; 
801c			; SAVESP ON/OFF 0-STACK_IMB_STORE/4 
801c			; CHECKSP ON/OFF 0-STACK_IMB_STORE/4 
801c			 
801c			SAVESP: macro onoff storeword 
801c			 
801c				if DEBUG_STACK_IMB 
801c					if onoff 
801c						; save current SP 
801c			 
801c						ld (store_sp+(storeword*4)), sp 
801c			 
801c					endif 
801c					 
801c				endif 
801c			 
801c			endm 
801c			 
801c			CHECKSP: macro onoff storeword 
801c			 
801c				if DEBUG_STACK_IMB 
801c					if onoff 
801c			 
801c						; save SP after last save 
801c				 
801c						ld (store_sp+(storeword*4)+2), sp 
801c			 
801c						push hl 
801c						ld hl, store_sp+(storeword*4) 
801c						call check_stack_sp  
801c						pop hl 
801c			 
801c			 
801c					endif 
801c					 
801c				endif 
801c			 
801c			endm 
801c			 
801c			if DEBUG_STACK_IMB 
801c			 
801c			check_stack_sp: 
801c					push de 
801c			 
801c					ld e, (hl) 
801c					inc hl 
801c					ld d, (hl) 
801c					inc hl 
801c			 
801c					push de 
801c			 
801c			 
801c					ld e, (hl) 
801c					inc hl 
801c					ld d, (hl) 
801c					inc hl 
801c			 
801c					pop hl 
801c			 
801c			 
801c					; check to see if the same 
801c			 
801c					call cmp16 
801c					jr z, .spsame 
801c			 
801c					; not same 
801c			 
801c					call showsperror 
801c			.spsame: 
801c			 
801c					pop de 
801c			 
801c					ret 
801c			 
801c			.sperr:  db "Stack imbalance",0 
801c			 
801c			 
801c			showsperror: 
801c			 
801c			 
801c				push hl 
801c				push af 
801c				push de 
801c				call clear_display 
801c				ld de, .sperr 
801c				ld a,0 
801c			;	ld de,os_word_scratch 
801c				call str_at_display 
801c				ld a, display_row_1+17 
801c				ld de, debug_mark 
801c				call str_at_display 
801c				ld a, 0 
801c				ld (curframe+4),a 
801c				ld hl, curframe 
801c				ld de, os_word_scratch 
801c				ld a, display_row_4 
801c				call str_at_display 
801c				call update_display 
801c				;call break_point_state 
801c				call cin_wait 
801c			 
801c			;	ld a, ' ' 
801c			;	ld (os_view_disable), a 
801c				call bp_on 
801c				pop de	 
801c				pop af 
801c				pop hl 
801c				CALLMONITOR 
801c				ret 
801c			 
801c			endif 
801c			 
801c			 
801c			 
801c			; eof 
# End of file stackimbal.asm
801c			  
801c			;TODO macro to calc col and row offset into screen  
801c			  
801c			  
801c			  
801c			hardware_init:  
801c			  
801c				  
801c			  
801c					;ld a, 0  
801c					;ld (hardware_diag), a  
801c			  
801c					; clear all the buffers  
801c			  
801c 21 10 ed				ld hl, display_fb1  
801f 22 cc eb				ld (display_fb_active), hl  
8022			  
8022 cd af 8a				call clear_display  
8025			  
8025 21 ce eb				ld hl, display_fb2  
8028 22 cc eb				ld (display_fb_active), hl  
802b			  
802b cd af 8a				call clear_display  
802e			  
802e					; init primary frame buffer area  
802e 21 b1 ed				ld hl, display_fb0  
8031 22 cc eb				ld (display_fb_active), hl  
8034			  
8034 cd af 8a				call clear_display  
8037			  
8037			  
8037 cd 75 e3				call lcd_init		; lcd hardware first as some screen functions called during key_init e.g. cursor shapes  
803a			  
803a cd 17 e4			call key_init  
803d cd 9f 80			call storage_init  
8040			  
8040				; setup malloc functions  
8040			  
8040				if MALLOC_1  
8040 cd 7f 91				call  heap_init  
8043				endif  
8043				if MALLOC_4  
8043					call  heap_init  
8043				endif  
8043			  
8043				; init sound hardware if present  
8043			  
8043				if SOUND_ENABLE  
8043					call sound_init  
8043				endif  
8043			  
8043				; lcd test sequence  
8043					  
8043 cd d2 8a			call update_display  
8046 cd f2 89			call delay1s  
8049 3e 2b			ld a,'+'  
804b cd b4 8a			call fill_display  
804e cd d2 8a			call update_display  
8051 cd f2 89			call delay1s  
8054 3e 2a			ld a,'*'  
8056 cd b4 8a			call fill_display  
8059 cd d2 8a			call update_display  
805c cd f2 89			call delay1s  
805f 3e 2d			ld a,'-'  
8061 cd b4 8a			call fill_display  
8064 cd d2 8a			call update_display  
8067 cd f2 89			call delay1s  
806a			  
806a			; boot splash screen  
806a			if display_cols == 20	  
806a			        ld a, display_row_1    
806a			else  
806a 3e 0a		        ld a, display_row_1 +10   
806c			endif  
806c 11 ad 96			ld de, prom_bootmsg  
806f cd c2 8a			call str_at_display  
8072 cd d2 8a			call update_display  
8075			  
8075			  
8075 cd f2 89			call delay1s  
8078 cd f2 89			call delay1s  
807b			if display_cols == 20	  
807b			            LD   A, display_row_3+2  
807b			else  
807b 3e 5c		            LD   A, display_row_3+12  
807d			endif  
807d 11 c2 96			ld de, prom_bootmsg1  
8080 cd c2 8a			call str_at_display  
8083 cd d2 8a			call update_display  
8086 cd f2 89			call delay1s  
8089 cd f2 89			call delay1s  
808c			  
808c			;	ld a, display_row_4+3  
808c			;	ld de, bootmsg2  
808c			;	call str_at_display  
808c			;	call update_display  
808c			;	call delay1s  
808c			;	call delay1s  
808c			  
808c			; debug mark setup  
808c			  
808c 3e 5f		ld a, '_'  
808e 32 6b ee		ld (debug_mark),a  
8091 32 6c ee		ld (debug_mark+1),a  
8094 32 6d ee		ld (debug_mark+2),a  
8097 3e 00		ld a,0  
8099 32 6e ee		ld (debug_mark+3),a  
809c			  
809c c9					ret  
809d			  
809d			  
809d			;bootmsg2:	db "Firmware v0.1",0  
809d			  
809d			; a 4x20 lcd  
809d			; cout for display, low level positioning and writing functions (TODO) for hardware abstraction  
809d			  
809d			;if display_cols == 20  
809d			;	include "firmware_lcd_4x20.asm"  
809d			;endif  
809d			  
809d			;if display_cols == 40  
809d			;	include "firmware_lcd_4x40.asm"  
809d			;endif  
809d			  
809d			;  
809d			; TODO use the low spare two pins on port a of display pio to bit bang a serial out video display to an esp  
809d			; TODO abstract the bit bang video out interface for dual display  
809d			; TODO wire video out to tx pin on rc2014 bus  
809d			  
809d			; must supply cin, and cin_wait for low level hardware abstraction   
809d			; moved text_input entry points to here and leave the firmware hardware modules as abstraction layer  
809d			; test scancode  
809d			  
809d			;;;;;  
809d			;;;  
809d			; Moved out to mini and maxi versions  
809d			;  
809d			; include "firmware_key_4x4.asm"  
809d			; using existing 4 wire x 4 resistor array for input  
809d			;include "firmware_key_4x10.asm"  
809d			; need to mod the board for 5 rows due to resistor array  
809d			;include "firmware_key_5x10.asm"  
809d			  
809d			; storage hardware interface  
809d			  
809d			; use microchip serial eeprom for storage  
809d			  
809d			  
809d			if STORAGE_SE  
809d				include "firmware_spi.asm"  
809d				include "firmware_seeprom.asm"  
809d			else  
809d			   ; create some stubs for the labels  
809d c9			se_readbyte: ret  
809e c9			se_writebyte: ret  
809f c9			storage_init: ret  
80a0			  
80a0			endif  
80a0			  
80a0			; use cf card for storage - throwing timeout errors. Hardware or software?????  
80a0			;include "firmware_cf.asm"  
80a0			  
80a0			; load up high level storage hardward abstractions  
80a0			include "firmware_storage.asm"  
80a0			 
80a0			; persisent storage hardware abstraction layer  
80a0			 
80a0			 
80a0			 
80a0			; Block 0 on storage is a config state 
80a0			 
80a0			 
80a0			 
80a0			; TODO add read phy block and write phy block functions 
80a0			; TODO add presence check (i.e. read write byte 0 of block 0 for eeprom) 
80a0			 
80a0			; Abstraction layer  
80a0			 
80a0			; Logocial block size is same size as physical size - using tape concept 
80a0			 
80a0			;STORE_BLOCK_PHY2LOG: equ (STORE_BLOCK_LOG/STORE_BLOCK_PHY)       ; How many physical blocks make up a logical block 
80a0			;STORE_BLOCK_MAX: equ (STORE_BLOCK_PHY*STORE_DEVICE_MAXBLOCKS)/255    ; Max number of logical blocks on the device 
80a0			 
80a0			 
80a0			 
80a0			; Filesystem layout (Logical layout) 
80a0			; 
80a0			; Block 0 - Bank config  
80a0			; 
80a0			;      Byte - 0 file id counter 
80a0			;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
80a0			;      Byte - 3-20 zero terminated bank label 
80a0			; 
80a0			; Block 1 > File storage 
80a0			; 
80a0			;      Byte 0 file id    - block 0 file details 
80a0			;      Byte 1 block id - block 0 is file  
80a0			;            Byte 2-15 - File name 
80a0			; 
80a0			;       - to end of block data 
80a0			; 
80a0			 
80a0			; Get ID for the file named in pointer held HL 
80a0			; Returns ID in HL = 255 if no file found 
80a0			 
80a0			storage_getid: 
80a0			 
80a0 22 73 ea			ld (store_tmp1), hl 
80a3			 
80a3				if DEBUG_STORESE 
80a3					DMARK "SGI" 
80a3 f5				push af  
80a4 3a b8 80			ld a, (.dmark)  
80a7 32 6b ee			ld (debug_mark),a  
80aa 3a b9 80			ld a, (.dmark+1)  
80ad 32 6c ee			ld (debug_mark+1),a  
80b0 3a ba 80			ld a, (.dmark+2)  
80b3 32 6d ee			ld (debug_mark+2),a  
80b6 18 03			jr .pastdmark  
80b8 ..			.dmark: db "SGI"  
80bb f1			.pastdmark: pop af  
80bc			endm  
# End of macro DMARK
80bc					CALLMONITOR 
80bc cd 6f ee			call debug_vector  
80bf				endm  
# End of macro CALLMONITOR
80bf				endif 
80bf				; get block 0 and set counter for number of files to scan 
80bf			 
80bf cd 2a 82			call storage_get_block_0 
80c2			 
80c2 3a 7a ea			ld a, (store_page) 
80c5 47				ld b, a 
80c6			 
80c6				; get extent 0 of each file id 
80c6			 
80c6				if DEBUG_STORESE 
80c6					DMARK "SGc" 
80c6 f5				push af  
80c7 3a db 80			ld a, (.dmark)  
80ca 32 6b ee			ld (debug_mark),a  
80cd 3a dc 80			ld a, (.dmark+1)  
80d0 32 6c ee			ld (debug_mark+1),a  
80d3 3a dd 80			ld a, (.dmark+2)  
80d6 32 6d ee			ld (debug_mark+2),a  
80d9 18 03			jr .pastdmark  
80db ..			.dmark: db "SGc"  
80de f1			.pastdmark: pop af  
80df			endm  
# End of macro DMARK
80df					CALLMONITOR 
80df cd 6f ee			call debug_vector  
80e2				endm  
# End of macro CALLMONITOR
80e2				endif 
80e2 60			.getloop:	ld h, b 
80e3 2e 00				ld l, 0 
80e5 c5					push bc 
80e6			 
80e6 11 7a ea				ld de, store_page 
80e9				if DEBUG_STORESE 
80e9					DMARK "SGr" 
80e9 f5				push af  
80ea 3a fe 80			ld a, (.dmark)  
80ed 32 6b ee			ld (debug_mark),a  
80f0 3a ff 80			ld a, (.dmark+1)  
80f3 32 6c ee			ld (debug_mark+1),a  
80f6 3a 00 81			ld a, (.dmark+2)  
80f9 32 6d ee			ld (debug_mark+2),a  
80fc 18 03			jr .pastdmark  
80fe ..			.dmark: db "SGr"  
8101 f1			.pastdmark: pop af  
8102			endm  
# End of macro DMARK
8102					CALLMONITOR 
8102 cd 6f ee			call debug_vector  
8105				endm  
# End of macro CALLMONITOR
8105				endif 
8105 cd d2 86				call storage_read 
8108 cd 05 8d				call ishlzero 
810b 28 2d				jr z, .gap 
810d					 
810d					; have a file name read. Is it one we want. 
810d			 
810d 2a 73 ea				ld hl, (store_tmp1) 
8110 11 7d ea				ld de, store_page+3   ; file name 
8113			 
8113				if DEBUG_STORESE 
8113					DMARK "SGc" 
8113 f5				push af  
8114 3a 28 81			ld a, (.dmark)  
8117 32 6b ee			ld (debug_mark),a  
811a 3a 29 81			ld a, (.dmark+1)  
811d 32 6c ee			ld (debug_mark+1),a  
8120 3a 2a 81			ld a, (.dmark+2)  
8123 32 6d ee			ld (debug_mark+2),a  
8126 18 03			jr .pastdmark  
8128 ..			.dmark: db "SGc"  
812b f1			.pastdmark: pop af  
812c			endm  
# End of macro DMARK
812c					CALLMONITOR 
812c cd 6f ee			call debug_vector  
812f				endm  
# End of macro CALLMONITOR
812f				endif 
812f cd 72 91				call strcmp 
8132 20 06				jr nz, .gap   ; not this one 
8134			 
8134 c1				        pop bc 
8135			 
8135 26 00				ld h, 0 
8137 68					ld l, b 
8138 18 22				jr .getdone 
813a						 
813a			 
813a			 
813a			 
813a			.gap: 
813a				if DEBUG_STORESE 
813a					DMARK "SGg" 
813a f5				push af  
813b 3a 4f 81			ld a, (.dmark)  
813e 32 6b ee			ld (debug_mark),a  
8141 3a 50 81			ld a, (.dmark+1)  
8144 32 6c ee			ld (debug_mark+1),a  
8147 3a 51 81			ld a, (.dmark+2)  
814a 32 6d ee			ld (debug_mark+2),a  
814d 18 03			jr .pastdmark  
814f ..			.dmark: db "SGg"  
8152 f1			.pastdmark: pop af  
8153			endm  
# End of macro DMARK
8153					CALLMONITOR 
8153 cd 6f ee			call debug_vector  
8156				endm  
# End of macro CALLMONITOR
8156				endif 
8156			 
8156 c1					pop bc 
8157 10 89				djnz .getloop 
8159 21 ff 00				ld hl, 255 
815c			.getdone: 
815c			 
815c				if DEBUG_STORESE 
815c					DMARK "SGe" 
815c f5				push af  
815d 3a 71 81			ld a, (.dmark)  
8160 32 6b ee			ld (debug_mark),a  
8163 3a 72 81			ld a, (.dmark+1)  
8166 32 6c ee			ld (debug_mark+1),a  
8169 3a 73 81			ld a, (.dmark+2)  
816c 32 6d ee			ld (debug_mark+2),a  
816f 18 03			jr .pastdmark  
8171 ..			.dmark: db "SGe"  
8174 f1			.pastdmark: pop af  
8175			endm  
# End of macro DMARK
8175					CALLMONITOR 
8175 cd 6f ee			call debug_vector  
8178				endm  
# End of macro CALLMONITOR
8178				endif 
8178			 
8178 c9				ret 
8179			 
8179			 
8179			 
8179			 
8179			 
8179			 
8179			 
8179			 
8179			; Read Block 
8179			; ---------- 
8179			; 
8179			; With current bank 
8179			;  
8179			; Get block number to read 
8179			; Load physical blocks starting at start block into buffer 
8179			 
8179			; de points to buffer to use 
8179			; hl holds logical block number  
8179			 
8179			storage_read_block: 
8179			 
8179				; TODO bank selection 
8179			 
8179				; for each of the physical blocks read it into the buffer 
8179 06 40			ld b, STORE_BLOCK_PHY 
817b			 
817b				if DEBUG_STORESE 
817b d5					push de 
817c				endif 
817c				 
817c			.rl1:    
817c			 
817c				; read physical block at hl into de 
817c			        ; increment hl and de to next read position on exit 
817c			 
817c e5				push hl 
817d d5				push de	 
817e c5				push bc 
817f			;	if DEBUG_STORESE 
817f			;		push af 
817f			;		ld a, 'R' 
817f			;		ld (debug_mark),a 
817f			;		pop af 
817f			;		CALLMONITOR 
817f			;	endif 
817f cd 9d 80			call se_readbyte 
8182			;	if DEBUG_STORESE 
8182			;		ld a,(spi_portbyte) 
8182			;		ld l, a 
8182			;		push af 
8182			;		ld a, '1' 
8182			;		ld (debug_mark),a 
8182			;		pop af 
8182			;		CALLMONITOR 
8182			;	endif 
8182 c1				pop bc 
8183 d1				pop de 
8184 e1				pop hl 
8185 12				ld (de),a 
8186 23				inc hl 
8187 13				inc de 
8188			 
8188			;	if DEBUG_STORESE 
8188			;		push af 
8188			;		ld a, 'r' 
8188			;		ld (debug_mark),a 
8188			;		pop af 
8188			;		CALLMONITOR 
8188			;	endif 
8188			 
8188 10 f2			djnz .rl1 
818a			 
818a				if DEBUG_STORESE 
818a					DMARK "SRB" 
818a f5				push af  
818b 3a 9f 81			ld a, (.dmark)  
818e 32 6b ee			ld (debug_mark),a  
8191 3a a0 81			ld a, (.dmark+1)  
8194 32 6c ee			ld (debug_mark+1),a  
8197 3a a1 81			ld a, (.dmark+2)  
819a 32 6d ee			ld (debug_mark+2),a  
819d 18 03			jr .pastdmark  
819f ..			.dmark: db "SRB"  
81a2 f1			.pastdmark: pop af  
81a3			endm  
# End of macro DMARK
81a3 d1					pop de 
81a4			; 
81a4			;		push af 
81a4			;		ld a, 'R' 
81a4			;		ld (debug_mark),a 
81a4			;		pop af 
81a4					CALLMONITOR 
81a4 cd 6f ee			call debug_vector  
81a7				endm  
# End of macro CALLMONITOR
81a7				endif 
81a7 c9				ret	 
81a8				 
81a8			 
81a8			; File Size 
81a8			; --------- 
81a8			; 
81a8			;   hl file id 
81a8			; 
81a8			;  returns in hl the number of blocks 
81a8			 
81a8			storage_file_size: 
81a8 5d				ld e, l 
81a9 16 00			ld d, 0 
81ab 21 40 00			ld hl, STORE_BLOCK_PHY 
81ae					if DEBUG_FORTH_WORDS 
81ae						DMARK "SIZ" 
81ae f5				push af  
81af 3a c3 81			ld a, (.dmark)  
81b2 32 6b ee			ld (debug_mark),a  
81b5 3a c4 81			ld a, (.dmark+1)  
81b8 32 6c ee			ld (debug_mark+1),a  
81bb 3a c5 81			ld a, (.dmark+2)  
81be 32 6d ee			ld (debug_mark+2),a  
81c1 18 03			jr .pastdmark  
81c3 ..			.dmark: db "SIZ"  
81c6 f1			.pastdmark: pop af  
81c7			endm  
# End of macro DMARK
81c7						CALLMONITOR 
81c7 cd 6f ee			call debug_vector  
81ca				endm  
# End of macro CALLMONITOR
81ca					endif 
81ca cd ac 84			call storage_findnextid 
81cd			 
81cd cd 05 8d			call ishlzero 
81d0			;	ld a, l 
81d0			;	add h 
81d0			;	cp 0 
81d0 c8				ret z			; block not found so EOF 
81d1			 
81d1 11 7a ea			ld de, store_page 
81d4 cd 79 81			call storage_read_block 
81d7			 
81d7 3a 7c ea			ld a, (store_page+2)	 ; get extent count 
81da 6f				ld l, a 
81db 26 00			ld h, 0 
81dd c9			 	ret 
81de			 
81de			 
81de			; Write Block 
81de			; ----------- 
81de			; 
81de			; With current bank 
81de			;  
81de			; Get block number to write 
81de			; Write physical blocks starting at start block from buffer 
81de			  
81de			storage_write_block: 
81de				; TODO bank selection 
81de			 
81de				; for each of the physical blocks read it into the buffer 
81de 06 40			ld b, STORE_BLOCK_PHY 
81e0			 
81e0				if DEBUG_STORESE 
81e0					DMARK "SWB" 
81e0 f5				push af  
81e1 3a f5 81			ld a, (.dmark)  
81e4 32 6b ee			ld (debug_mark),a  
81e7 3a f6 81			ld a, (.dmark+1)  
81ea 32 6c ee			ld (debug_mark+1),a  
81ed 3a f7 81			ld a, (.dmark+2)  
81f0 32 6d ee			ld (debug_mark+2),a  
81f3 18 03			jr .pastdmark  
81f5 ..			.dmark: db "SWB"  
81f8 f1			.pastdmark: pop af  
81f9			endm  
# End of macro DMARK
81f9			 
81f9					;push af 
81f9					;ld a, 'W' 
81f9					;ld (debug_mark),a 
81f9					;pop af 
81f9					CALLMONITOR 
81f9 cd 6f ee			call debug_vector  
81fc				endm  
# End of macro CALLMONITOR
81fc				endif 
81fc			 
81fc			; might not be working 
81fc			;	call se_writepage 
81fc			 
81fc			;	ret 
81fc			; 
81fc			 
81fc			 
81fc			 
81fc			.wl1:    
81fc			 
81fc				; read physical block at hl into de 
81fc			        ; increment hl and de to next read position on exit 
81fc			 
81fc e5				push hl 
81fd d5				push de	 
81fe c5				push bc 
81ff 1a				ld a,(de) 
8200				;if DEBUG_STORESE 
8200			;		push af 
8200			;		ld a, 'W' 
8200			;		ld (debug_mark),a 
8200			;		pop af 
8200			;		CALLMONITOR 
8200			;	endif 
8200 cd 9e 80			call se_writebyte 
8203			;	call delay250ms 
8203 00				nop 
8204 00				nop 
8205 00				nop 
8206			;	if DEBUG_STORESE 
8206			;		push af 
8206			;		ld a, 'w' 
8206			;		ld (debug_mark),a 
8206			;		pop af 
8206			;		CALLMONITOR 
8206			;	endif 
8206 c1				pop bc 
8207 d1				pop de 
8208 e1				pop hl 
8209 23				inc hl 
820a 13				inc de 
820b			 
820b			 
820b 10 ef			djnz .wl1 
820d			 
820d				if DEBUG_STORESE 
820d					DMARK "SW2" 
820d f5				push af  
820e 3a 22 82			ld a, (.dmark)  
8211 32 6b ee			ld (debug_mark),a  
8214 3a 23 82			ld a, (.dmark+1)  
8217 32 6c ee			ld (debug_mark+1),a  
821a 3a 24 82			ld a, (.dmark+2)  
821d 32 6d ee			ld (debug_mark+2),a  
8220 18 03			jr .pastdmark  
8222 ..			.dmark: db "SW2"  
8225 f1			.pastdmark: pop af  
8226			endm  
# End of macro DMARK
8226			 
8226					;push af 
8226					;ld a, 'W' 
8226					;ld (debug_mark),a 
8226					;pop af 
8226					CALLMONITOR 
8226 cd 6f ee			call debug_vector  
8229				endm  
# End of macro CALLMONITOR
8229				endif 
8229 c9				ret	 
822a			 
822a			; Init bank 
822a			; --------- 
822a			; 
822a			; With current bank 
822a			; 
822a			; Setup block 0 config 
822a			;     Set 0 file id counter 
822a			;     Set formatted byte pattern 
822a			;     Zero out bank label 
822a			;      
822a			; For every logical block write 0-1 byte as null 
822a			 
822a			storage_get_block_0: 
822a			 
822a				; TODO check presence 
822a			 
822a				; get block 0 config 
822a			 
822a 21 00 00			ld hl, 0 
822d 11 7a ea			ld de, store_page 
8230 cd 79 81			call storage_read_block 
8233			 
8233				if DEBUG_STORESE 
8233					DMARK "SB0" 
8233 f5				push af  
8234 3a 48 82			ld a, (.dmark)  
8237 32 6b ee			ld (debug_mark),a  
823a 3a 49 82			ld a, (.dmark+1)  
823d 32 6c ee			ld (debug_mark+1),a  
8240 3a 4a 82			ld a, (.dmark+2)  
8243 32 6d ee			ld (debug_mark+2),a  
8246 18 03			jr .pastdmark  
8248 ..			.dmark: db "SB0"  
824b f1			.pastdmark: pop af  
824c			endm  
# End of macro DMARK
824c 11 7a ea				ld de, store_page 
824f			;		push af 
824f			;		ld a, 'i' 
824f			;		ld (debug_mark),a 
824f			;		pop af 
824f					CALLMONITOR 
824f cd 6f ee			call debug_vector  
8252				endm  
# End of macro CALLMONITOR
8252				endif 
8252			 
8252				; is this area formatted? 
8252			 
8252			;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
8252 2a 7b ea			ld hl, (store_page+1) 
8255 3e 80			ld a,0x80 
8257 bd				cp l 
8258 20 22			jr nz, .ininotformatted 
825a				; do a double check 
825a 3e 27			ld a, 0x27 
825c bc				cp h 
825d 20 1d			jr nz, .ininotformatted 
825f			 
825f				; formatted then 
825f			 
825f				if DEBUG_STORESE 
825f					DMARK "SB1" 
825f f5				push af  
8260 3a 74 82			ld a, (.dmark)  
8263 32 6b ee			ld (debug_mark),a  
8266 3a 75 82			ld a, (.dmark+1)  
8269 32 6c ee			ld (debug_mark+1),a  
826c 3a 76 82			ld a, (.dmark+2)  
826f 32 6d ee			ld (debug_mark+2),a  
8272 18 03			jr .pastdmark  
8274 ..			.dmark: db "SB1"  
8277 f1			.pastdmark: pop af  
8278			endm  
# End of macro DMARK
8278					;push af 
8278					;ld a, 'I' 
8278					;ld (debug_mark),a 
8278					;pop af 
8278					CALLMONITOR 
8278 cd 6f ee			call debug_vector  
827b				endm  
# End of macro CALLMONITOR
827b				endif 
827b c9				ret 
827c			 
827c			.ininotformatted: 
827c				; bank not formatted so poke various bits to make sure 
827c			 
827c				if DEBUG_STORESE 
827c					DMARK "SB2" 
827c f5				push af  
827d 3a 91 82			ld a, (.dmark)  
8280 32 6b ee			ld (debug_mark),a  
8283 3a 92 82			ld a, (.dmark+1)  
8286 32 6c ee			ld (debug_mark+1),a  
8289 3a 93 82			ld a, (.dmark+2)  
828c 32 6d ee			ld (debug_mark+2),a  
828f 18 03			jr .pastdmark  
8291 ..			.dmark: db "SB2"  
8294 f1			.pastdmark: pop af  
8295			endm  
# End of macro DMARK
8295					;push af 
8295					;ld a, 'f' 
8295					;ld (debug_mark),a 
8295					;pop af 
8295					CALLMONITOR 
8295 cd 6f ee			call debug_vector  
8298				endm  
# End of macro CALLMONITOR
8298				endif 
8298			 
8298 cd b5 89			call storage_clear_page 
829b			 
829b 21 7a ea			ld hl, store_page 
829e 3e 00			ld a, 0 
82a0				 
82a0 77				ld (hl),a   ; reset file counter 
82a1			 
82a1 21 80 27			ld hl, 0x2780     ;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
82a4 22 7b ea		 	ld (store_page+1), hl	 
82a7			 
82a7				; set default label 
82a7			 
82a7 21 43 83			ld hl, .defaultbanklabl 
82aa 11 7d ea		 	ld de, store_page+3 
82ad 01 0f 00			ld bc, 15 
82b0 ed b0			ldir 
82b2			 
82b2				; Append the current bank id 
82b2 21 86 ea			ld hl, store_page+3+9 
82b5 3a 5f ea			ld a, (spi_device_id) 
82b8 77				ld (hl), a 
82b9			 
82b9				; save default page 0 
82b9			 
82b9 21 00 00			ld hl, 0 
82bc 11 7a ea			ld de, store_page 
82bf				if DEBUG_STORESE 
82bf					DMARK "SB3" 
82bf f5				push af  
82c0 3a d4 82			ld a, (.dmark)  
82c3 32 6b ee			ld (debug_mark),a  
82c6 3a d5 82			ld a, (.dmark+1)  
82c9 32 6c ee			ld (debug_mark+1),a  
82cc 3a d6 82			ld a, (.dmark+2)  
82cf 32 6d ee			ld (debug_mark+2),a  
82d2 18 03			jr .pastdmark  
82d4 ..			.dmark: db "SB3"  
82d7 f1			.pastdmark: pop af  
82d8			endm  
# End of macro DMARK
82d8			;		push af 
82d8			;		ld a, 'F' 
82d8			;		ld (debug_mark),a 
82d8			;		pop af 
82d8					CALLMONITOR 
82d8 cd 6f ee			call debug_vector  
82db				endm  
# End of macro CALLMONITOR
82db				endif 
82db cd de 81			call storage_write_block 
82de				if DEBUG_STORESE 
82de					DMARK "SB4" 
82de f5				push af  
82df 3a f3 82			ld a, (.dmark)  
82e2 32 6b ee			ld (debug_mark),a  
82e5 3a f4 82			ld a, (.dmark+1)  
82e8 32 6c ee			ld (debug_mark+1),a  
82eb 3a f5 82			ld a, (.dmark+2)  
82ee 32 6d ee			ld (debug_mark+2),a  
82f1 18 03			jr .pastdmark  
82f3 ..			.dmark: db "SB4"  
82f6 f1			.pastdmark: pop af  
82f7			endm  
# End of macro DMARK
82f7			;		push af 
82f7			;		ld a, '>' 
82f7			;		ld (debug_mark),a 
82f7			;		pop af 
82f7					CALLMONITOR 
82f7 cd 6f ee			call debug_vector  
82fa				endm  
# End of macro CALLMONITOR
82fa				endif 
82fa			 
82fa 00				nop 
82fb 00				nop 
82fc 00				nop 
82fd			 
82fd				; now set 0 in every page to mark as a free block 
82fd			 
82fd 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
82ff 21 40 00			ld hl, STORE_BLOCK_PHY 
8302			 
8302 3e 00		.setmark1:   	ld a,0 
8304 e5					push hl 
8305 c5					push bc 
8306 cd 9e 80				call se_writebyte 
8309 3e 0a			ld a, 10 
830b cd d7 89			call aDelayInMS 
830e 23				inc hl 
830f cd 9e 80				call se_writebyte 
8312 3e 0a			ld a, 10 
8314 cd d7 89			call aDelayInMS 
8317 2b				dec hl 
8318 c1					pop bc 
8319 e1					pop hl 
831a 3e 40				ld a, STORE_BLOCK_PHY 
831c cd dc 8c				call addatohl 
831f 10 e1				djnz .setmark1 
8321			 
8321 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
8323 3e 00		.setmark2:   	ld a,0 
8325 e5					push hl 
8326 c5					push bc 
8327 cd 9e 80				call se_writebyte 
832a 3e 0a			ld a, 10 
832c cd d7 89			call aDelayInMS 
832f 23				inc hl 
8330 cd 9e 80				call se_writebyte 
8333 3e 0a			ld a, 10 
8335 cd d7 89			call aDelayInMS 
8338 2b				dec hl 
8339 c1					pop bc 
833a e1					pop hl 
833b 3e 40				ld a, STORE_BLOCK_PHY 
833d cd dc 8c				call addatohl 
8340 10 e1				djnz .setmark2 
8342			 
8342					 
8342			 
8342			 
8342 c9				ret 
8343			 
8343			 
8343			 
8343			 
8343 .. 00		.defaultbanklabl:   db "BankLabel_",0 
834e			 
834e			 
834e			 
834e			; Label Bank 
834e			; ---------- 
834e			; 
834e			; With current bank 
834e			; Read block 0 
834e			; Set label 
834e			; Write block 0 
834e			 
834e			; label str pointer in hl 
834e			 
834e			storage_label:     
834e			 
834e				if DEBUG_STORESE 
834e					DMARK "LBL" 
834e f5				push af  
834f 3a 63 83			ld a, (.dmark)  
8352 32 6b ee			ld (debug_mark),a  
8355 3a 64 83			ld a, (.dmark+1)  
8358 32 6c ee			ld (debug_mark+1),a  
835b 3a 65 83			ld a, (.dmark+2)  
835e 32 6d ee			ld (debug_mark+2),a  
8361 18 03			jr .pastdmark  
8363 ..			.dmark: db "LBL"  
8366 f1			.pastdmark: pop af  
8367			endm  
# End of macro DMARK
8367					CALLMONITOR 
8367 cd 6f ee			call debug_vector  
836a				endm  
# End of macro CALLMONITOR
836a				endif 
836a			 
836a e5				push hl 
836b			 
836b cd 2a 82			call storage_get_block_0 
836e			 
836e				; set default label 
836e			 
836e e1				pop hl 
836f			 
836f 11 7d ea		 	ld de, store_page+3 
8372 01 0f 00			ld bc, 15 
8375				if DEBUG_STORESE 
8375					DMARK "LB3" 
8375 f5				push af  
8376 3a 8a 83			ld a, (.dmark)  
8379 32 6b ee			ld (debug_mark),a  
837c 3a 8b 83			ld a, (.dmark+1)  
837f 32 6c ee			ld (debug_mark+1),a  
8382 3a 8c 83			ld a, (.dmark+2)  
8385 32 6d ee			ld (debug_mark+2),a  
8388 18 03			jr .pastdmark  
838a ..			.dmark: db "LB3"  
838d f1			.pastdmark: pop af  
838e			endm  
# End of macro DMARK
838e					CALLMONITOR 
838e cd 6f ee			call debug_vector  
8391				endm  
# End of macro CALLMONITOR
8391				endif 
8391 ed b0			ldir 
8393				; save default page 0 
8393			 
8393 21 00 00			ld hl, 0 
8396 11 7a ea			ld de, store_page 
8399				if DEBUG_STORESE 
8399					DMARK "LBW" 
8399 f5				push af  
839a 3a ae 83			ld a, (.dmark)  
839d 32 6b ee			ld (debug_mark),a  
83a0 3a af 83			ld a, (.dmark+1)  
83a3 32 6c ee			ld (debug_mark+1),a  
83a6 3a b0 83			ld a, (.dmark+2)  
83a9 32 6d ee			ld (debug_mark+2),a  
83ac 18 03			jr .pastdmark  
83ae ..			.dmark: db "LBW"  
83b1 f1			.pastdmark: pop af  
83b2			endm  
# End of macro DMARK
83b2					CALLMONITOR 
83b2 cd 6f ee			call debug_vector  
83b5				endm  
# End of macro CALLMONITOR
83b5				endif 
83b5 cd de 81			call storage_write_block 
83b8			 
83b8 c9				ret 
83b9			 
83b9			 
83b9			 
83b9			; Read Block 0 - Config 
83b9			; --------------------- 
83b9			; 
83b9			; With current bank 
83b9			; Call presence test 
83b9			;    If not present format/init bank  
83b9			; Read block 0  
83b9			;  
83b9			 
83b9			 
83b9			; Dir 
83b9			; --- 
83b9			; 
83b9			; With current bank 
83b9			; Load Block 0 Config 
83b9			; Get max file id number 
83b9			; For each logical block 
83b9			;    Read block read byte 2 
83b9			;      if first block of file 
83b9			;         Display file name 
83b9			;         Display type flags for file 
83b9			;        
83b9			 
83b9			; moving to words as this requires stack control 
83b9			 
83b9			 
83b9			; Delete File 
83b9			; ----------- 
83b9			; 
83b9			; With current bank 
83b9			; 
83b9			; Load Block 0 Config 
83b9			; Get max file id number 
83b9			; For each logical block 
83b9			;    Read block file id 
83b9			;      If first block of file and dont have file id 
83b9			;         if file to delete 
83b9			;         Save file id 
83b9			;         Null file id 
83b9			;         Write this block back 
83b9			;      If file id is one saved 
83b9			;         Null file id 
83b9			;         Write this block back 
83b9			 
83b9			 
83b9			.se_done: 
83b9 e1				pop hl 
83ba c9				ret 
83bb			 
83bb			storage_erase: 
83bb			 
83bb				; hl contains the file id 
83bb			 
83bb 5d				ld e, l 
83bc 16 00			ld d, 0 
83be 21 40 00			ld hl, STORE_BLOCK_PHY 
83c1					if DEBUG_FORTH_WORDS 
83c1						DMARK "ERA" 
83c1 f5				push af  
83c2 3a d6 83			ld a, (.dmark)  
83c5 32 6b ee			ld (debug_mark),a  
83c8 3a d7 83			ld a, (.dmark+1)  
83cb 32 6c ee			ld (debug_mark+1),a  
83ce 3a d8 83			ld a, (.dmark+2)  
83d1 32 6d ee			ld (debug_mark+2),a  
83d4 18 03			jr .pastdmark  
83d6 ..			.dmark: db "ERA"  
83d9 f1			.pastdmark: pop af  
83da			endm  
# End of macro DMARK
83da						CALLMONITOR 
83da cd 6f ee			call debug_vector  
83dd				endm  
# End of macro CALLMONITOR
83dd					endif 
83dd cd ac 84			call storage_findnextid 
83e0 cd 05 8d			call ishlzero 
83e3 c8				ret z 
83e4			 
83e4 e5				push hl 
83e5			 
83e5				; TODO check file not found 
83e5			 
83e5 11 7a ea			ld de, store_page 
83e8 cd 79 81			call storage_read_block 
83eb			 
83eb cd 05 8d			call ishlzero 
83ee ca b9 83			jp z,.se_done 
83f1			 
83f1					if DEBUG_FORTH_WORDS 
83f1						DMARK "ER1" 
83f1 f5				push af  
83f2 3a 06 84			ld a, (.dmark)  
83f5 32 6b ee			ld (debug_mark),a  
83f8 3a 07 84			ld a, (.dmark+1)  
83fb 32 6c ee			ld (debug_mark+1),a  
83fe 3a 08 84			ld a, (.dmark+2)  
8401 32 6d ee			ld (debug_mark+2),a  
8404 18 03			jr .pastdmark  
8406 ..			.dmark: db "ER1"  
8409 f1			.pastdmark: pop af  
840a			endm  
# End of macro DMARK
840a						CALLMONITOR 
840a cd 6f ee			call debug_vector  
840d				endm  
# End of macro CALLMONITOR
840d					endif 
840d 3a 7a ea			ld a, (store_page)	; get file id 
8410 32 6e ea			ld (store_tmpid), a 
8413			 
8413 3a 7c ea			ld a, (store_page+2)    ; get count of extends 
8416 32 6d ea			ld (store_tmpext), a 
8419			 
8419				; wipe file header 
8419			 
8419 e1				pop hl 
841a 3e 00			ld a, 0 
841c 32 7a ea			ld (store_page), a 
841f 32 7b ea			ld (store_page+1),a 
8422 11 7a ea			ld de, store_page 
8425					if DEBUG_FORTH_WORDS 
8425						DMARK "ER2" 
8425 f5				push af  
8426 3a 3a 84			ld a, (.dmark)  
8429 32 6b ee			ld (debug_mark),a  
842c 3a 3b 84			ld a, (.dmark+1)  
842f 32 6c ee			ld (debug_mark+1),a  
8432 3a 3c 84			ld a, (.dmark+2)  
8435 32 6d ee			ld (debug_mark+2),a  
8438 18 03			jr .pastdmark  
843a ..			.dmark: db "ER2"  
843d f1			.pastdmark: pop af  
843e			endm  
# End of macro DMARK
843e						CALLMONITOR 
843e cd 6f ee			call debug_vector  
8441				endm  
# End of macro CALLMONITOR
8441					endif 
8441 cd de 81			call storage_write_block 
8444			 
8444			 
8444				; wipe file extents 
8444			 
8444 3a 6d ea			ld a, (store_tmpext) 
8447 47				ld b, a 
8448			 
8448			.eraext:	  
8448 c5				push bc 
8449			 
8449 21 40 00			ld hl, STORE_BLOCK_PHY 
844c 3a 6e ea			ld a,(store_tmpid) 
844f 5f				ld e, a 
8450 50				ld d, b	 
8451					if DEBUG_FORTH_WORDS 
8451						DMARK "ER3" 
8451 f5				push af  
8452 3a 66 84			ld a, (.dmark)  
8455 32 6b ee			ld (debug_mark),a  
8458 3a 67 84			ld a, (.dmark+1)  
845b 32 6c ee			ld (debug_mark+1),a  
845e 3a 68 84			ld a, (.dmark+2)  
8461 32 6d ee			ld (debug_mark+2),a  
8464 18 03			jr .pastdmark  
8466 ..			.dmark: db "ER3"  
8469 f1			.pastdmark: pop af  
846a			endm  
# End of macro DMARK
846a						CALLMONITOR 
846a cd 6f ee			call debug_vector  
846d				endm  
# End of macro CALLMONITOR
846d					endif 
846d cd ac 84			call storage_findnextid 
8470 cd 05 8d			call ishlzero 
8473 ca b9 83			jp z,.se_done 
8476			 
8476 e5				push hl 
8477 11 7a ea			ld de, store_page 
847a cd 79 81			call storage_read_block 
847d			 
847d				; free block	 
847d			 
847d 3e 00			ld a, 0 
847f 32 7a ea			ld (store_page), a 
8482 32 7b ea			ld (store_page+1),a 
8485 11 7a ea			ld de, store_page 
8488 e1				pop hl 
8489					if DEBUG_FORTH_WORDS 
8489						DMARK "ER4" 
8489 f5				push af  
848a 3a 9e 84			ld a, (.dmark)  
848d 32 6b ee			ld (debug_mark),a  
8490 3a 9f 84			ld a, (.dmark+1)  
8493 32 6c ee			ld (debug_mark+1),a  
8496 3a a0 84			ld a, (.dmark+2)  
8499 32 6d ee			ld (debug_mark+2),a  
849c 18 03			jr .pastdmark  
849e ..			.dmark: db "ER4"  
84a1 f1			.pastdmark: pop af  
84a2			endm  
# End of macro DMARK
84a2						CALLMONITOR 
84a2 cd 6f ee			call debug_vector  
84a5				endm  
# End of macro CALLMONITOR
84a5					endif 
84a5 cd de 81			call storage_write_block 
84a8			 
84a8 c1				pop bc 
84a9 10 9d			djnz .eraext 
84ab			 
84ab c9				ret 
84ac			 
84ac			 
84ac			; Find Free Block 
84ac			; --------------- 
84ac			; 
84ac			; With current bank 
84ac			;  
84ac			; From given starting logical block 
84ac			;    Read block  
84ac			;    If no file id 
84ac			;         Return block id 
84ac			 
84ac			 
84ac			; hl starting page number 
84ac			; hl contains free page number or zero if no pages free 
84ac			; e contains the file id to locate 
84ac			; d contains the block number 
84ac			 
84ac			; TODO change to find file id and use zero for free block 
84ac			 
84ac			storage_findnextid: 
84ac			 
84ac				; now locate first 0 page to mark as a free block 
84ac			 
84ac 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
84ae			;	ld hl, STORE_BLOCK_PHY 
84ae			 
84ae					if DEBUG_FORTH_WORDS 
84ae					DMARK "FNI" 
84ae f5				push af  
84af 3a c3 84			ld a, (.dmark)  
84b2 32 6b ee			ld (debug_mark),a  
84b5 3a c4 84			ld a, (.dmark+1)  
84b8 32 6c ee			ld (debug_mark+1),a  
84bb 3a c5 84			ld a, (.dmark+2)  
84be 32 6d ee			ld (debug_mark+2),a  
84c1 18 03			jr .pastdmark  
84c3 ..			.dmark: db "FNI"  
84c6 f1			.pastdmark: pop af  
84c7			endm  
# End of macro DMARK
84c7						CALLMONITOR 
84c7 cd 6f ee			call debug_vector  
84ca				endm  
# End of macro CALLMONITOR
84ca					endif 
84ca			.ff1:   	 
84ca e5					push hl 
84cb c5					push bc 
84cc d5					push de 
84cd cd 9d 80				call se_readbyte 
84d0 5f					ld e,a 
84d1 23					inc hl 
84d2 cd 9d 80				call se_readbyte 
84d5 57					ld d, a 
84d6 e1					pop hl 
84d7 e5					push hl 
84d8 cd fa 8c				call cmp16 
84db 28 49				jr z, .fffound 
84dd			 
84dd d1					pop de 
84de c1					pop bc 
84df e1					pop hl 
84e0			 
84e0					; is found? 
84e0					;cp e 
84e0					;ret z 
84e0			 
84e0 3e 40				ld a, STORE_BLOCK_PHY 
84e2 cd dc 8c				call addatohl 
84e5 10 e3				djnz .ff1 
84e7			 
84e7 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
84e9			.ff2:   	 
84e9			 
84e9 e5					push hl 
84ea c5					push bc 
84eb d5					push de 
84ec cd 9d 80				call se_readbyte 
84ef 5f					ld e,a 
84f0 23					inc hl 
84f1 cd 9d 80				call se_readbyte 
84f4 57					ld d, a 
84f5			 
84f5 e1					pop hl 
84f6 e5					push hl 
84f7 cd fa 8c				call cmp16 
84fa 28 2a				jr z, .fffound 
84fc			 
84fc d1					pop de 
84fd c1					pop bc 
84fe e1					pop hl 
84ff					; is found? 
84ff					;cp e 
84ff					;ret z 
84ff			 
84ff 3e 40				ld a, STORE_BLOCK_PHY 
8501 cd dc 8c				call addatohl 
8504 10 e3				djnz .ff2 
8506			 
8506			 
8506					if DEBUG_FORTH_WORDS 
8506					DMARK "FN-" 
8506 f5				push af  
8507 3a 1b 85			ld a, (.dmark)  
850a 32 6b ee			ld (debug_mark),a  
850d 3a 1c 85			ld a, (.dmark+1)  
8510 32 6c ee			ld (debug_mark+1),a  
8513 3a 1d 85			ld a, (.dmark+2)  
8516 32 6d ee			ld (debug_mark+2),a  
8519 18 03			jr .pastdmark  
851b ..			.dmark: db "FN-"  
851e f1			.pastdmark: pop af  
851f			endm  
# End of macro DMARK
851f					;	push af 
851f					;	ld a, 'n' 
851f					;	ld (debug_mark),a 
851f					;	pop af 
851f						CALLMONITOR 
851f cd 6f ee			call debug_vector  
8522				endm  
# End of macro CALLMONITOR
8522					endif 
8522				; no free marks! 
8522 21 00 00				ld hl, 0 
8525 c9				ret 
8526			.fffound: 
8526				 
8526			 
8526 d1					pop de 
8527 c1					pop bc 
8528 e1					pop hl 
8529					if DEBUG_FORTH_WORDS 
8529					DMARK "FNF" 
8529 f5				push af  
852a 3a 3e 85			ld a, (.dmark)  
852d 32 6b ee			ld (debug_mark),a  
8530 3a 3f 85			ld a, (.dmark+1)  
8533 32 6c ee			ld (debug_mark+1),a  
8536 3a 40 85			ld a, (.dmark+2)  
8539 32 6d ee			ld (debug_mark+2),a  
853c 18 03			jr .pastdmark  
853e ..			.dmark: db "FNF"  
8541 f1			.pastdmark: pop af  
8542			endm  
# End of macro DMARK
8542					;	push af 
8542					;	ld a, 'n' 
8542					;	ld (debug_mark),a 
8542					;	pop af 
8542						CALLMONITOR 
8542 cd 6f ee			call debug_vector  
8545				endm  
# End of macro CALLMONITOR
8545					endif 
8545 c9				ret 
8546			 
8546			 
8546			 
8546			; Free Space 
8546			; ---------- 
8546			; 
8546			; With current bank 
8546			; 
8546			; Set block count to zero 
8546			; Starting with first logical block 
8546			;      Find free block  
8546			;      If block id given, increment block count 
8546			; 
8546			;  
8546			 
8546			 
8546			; hl contains count of free blocks 
8546			 
8546			storage_freeblocks: 
8546			 
8546				; now locate first 0 page to mark as a free block 
8546			 
8546 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
8548 21 40 00			ld hl, STORE_BLOCK_PHY 
854b 11 00 00			ld de, 0 
854e			 
854e			.fb1:   	 
854e e5					push hl 
854f c5					push bc 
8550 d5					push de 
8551 cd 9d 80				call se_readbyte 
8554 d1					pop de 
8555 c1					pop bc 
8556 e1					pop hl 
8557			 
8557					; is free? 
8557 fe 00				cp 0 
8559 20 01				jr nz, .ff1cont 
855b 13					inc de 
855c			 
855c			.ff1cont: 
855c			 
855c			 
855c 3e 40				ld a, STORE_BLOCK_PHY 
855e cd dc 8c				call addatohl 
8561 10 eb				djnz .fb1 
8563			 
8563 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
8565			.fb2:   	 
8565 e5					push hl 
8566 c5					push bc 
8567 d5					push de 
8568 cd 9d 80				call se_readbyte 
856b d1					pop de 
856c c1					pop bc 
856d e1					pop hl 
856e			 
856e					; is free? 
856e fe 00				cp 0 
8570 20 01				jr nz, .ff2cont 
8572 13					inc de 
8573			 
8573			.ff2cont: 
8573			 
8573 3e 40				ld a, STORE_BLOCK_PHY 
8575 cd dc 8c				call addatohl 
8578 10 eb				djnz .fb2 
857a			 
857a eb				ex de, hl 
857b c9				ret 
857c			 
857c			; Get File ID 
857c			; ----------- 
857c			; 
857c			; With current bank 
857c			;  
857c			; Load Block 0 Config 
857c			; Get max file id number 
857c			; For each logical block 
857c			;    Read block file id 
857c			;      If first block of file and dont have file id 
857c			;         if file get id and exit 
857c			 
857c			 
857c			 
857c			 
857c			; Create File 
857c			; ----------- 
857c			; 
857c			; With current bank  
857c			; Load Block 0 Config 
857c			; Get max file id number 
857c			; Increment file id number 
857c			; Save Config 
857c			; Find free block 
857c			; Set buffer with file name and file id 
857c			; Write buffer to free block  
857c			 
857c			 
857c			; hl point to file name 
857c			; hl returns file id 
857c			 
857c			; file format: 
857c			; byte 0 - file id 
857c			; byte 1 - extent number 
857c			; byte 2-> data 
857c			 
857c			; format for extent number 0: 
857c			; 
857c			; byte 0 - file id 
857c			; byte 1 - extent 0 
857c			; byte 2 - extent count 
857c			; byte 3 -> file name and meta data 
857c			 
857c			 
857c			storage_create: 
857c				if DEBUG_STORESE 
857c					DMARK "SCR" 
857c f5				push af  
857d 3a 91 85			ld a, (.dmark)  
8580 32 6b ee			ld (debug_mark),a  
8583 3a 92 85			ld a, (.dmark+1)  
8586 32 6c ee			ld (debug_mark+1),a  
8589 3a 93 85			ld a, (.dmark+2)  
858c 32 6d ee			ld (debug_mark+2),a  
858f 18 03			jr .pastdmark  
8591 ..			.dmark: db "SCR"  
8594 f1			.pastdmark: pop af  
8595			endm  
# End of macro DMARK
8595					CALLMONITOR 
8595 cd 6f ee			call debug_vector  
8598				endm  
# End of macro CALLMONITOR
8598				endif 
8598			 
8598 e5				push hl		; save file name pointer 
8599			 
8599 cd 2a 82			call storage_get_block_0 
859c			 
859c 3a 7a ea			ld a,(store_page)	; get current file id 
859f 3c				inc a 
85a0 32 7a ea			ld (store_page),a 
85a3				 
85a3 32 6e ea			ld (store_tmpid),a			; save id 
85a6			 
85a6 21 00 00			ld hl, 0 
85a9 11 7a ea			ld de, store_page 
85ac				if DEBUG_STORESE 
85ac					DMARK "SCw" 
85ac f5				push af  
85ad 3a c1 85			ld a, (.dmark)  
85b0 32 6b ee			ld (debug_mark),a  
85b3 3a c2 85			ld a, (.dmark+1)  
85b6 32 6c ee			ld (debug_mark+1),a  
85b9 3a c3 85			ld a, (.dmark+2)  
85bc 32 6d ee			ld (debug_mark+2),a  
85bf 18 03			jr .pastdmark  
85c1 ..			.dmark: db "SCw"  
85c4 f1			.pastdmark: pop af  
85c5			endm  
# End of macro DMARK
85c5					CALLMONITOR 
85c5 cd 6f ee			call debug_vector  
85c8				endm  
# End of macro CALLMONITOR
85c8				endif 
85c8 cd de 81			call storage_write_block	 ; save update 
85cb			 
85cb				if DEBUG_STORESE 
85cb 11 7a ea				ld de, store_page 
85ce					DMARK "SCC" 
85ce f5				push af  
85cf 3a e3 85			ld a, (.dmark)  
85d2 32 6b ee			ld (debug_mark),a  
85d5 3a e4 85			ld a, (.dmark+1)  
85d8 32 6c ee			ld (debug_mark+1),a  
85db 3a e5 85			ld a, (.dmark+2)  
85de 32 6d ee			ld (debug_mark+2),a  
85e1 18 03			jr .pastdmark  
85e3 ..			.dmark: db "SCC"  
85e6 f1			.pastdmark: pop af  
85e7			endm  
# End of macro DMARK
85e7					CALLMONITOR 
85e7 cd 6f ee			call debug_vector  
85ea				endm  
# End of macro CALLMONITOR
85ea				endif 
85ea				;  
85ea				 
85ea 21 40 00			ld hl, STORE_BLOCK_PHY 
85ed 11 00 00			ld de, 0 
85f0 cd ac 84			call storage_findnextid 
85f3			 
85f3 22 65 ea			ld (store_tmppageid), hl    ; save page to use  
85f6			 
85f6				; TODO detect 0 = no spare blocks 
85f6			 
85f6				; hl now contains the free page to use for the file header page 
85f6			 
85f6				if DEBUG_STORESE 
85f6				DMARK "SCF" 
85f6 f5				push af  
85f7 3a 0b 86			ld a, (.dmark)  
85fa 32 6b ee			ld (debug_mark),a  
85fd 3a 0c 86			ld a, (.dmark+1)  
8600 32 6c ee			ld (debug_mark+1),a  
8603 3a 0d 86			ld a, (.dmark+2)  
8606 32 6d ee			ld (debug_mark+2),a  
8609 18 03			jr .pastdmark  
860b ..			.dmark: db "SCF"  
860e f1			.pastdmark: pop af  
860f			endm  
# End of macro DMARK
860f					CALLMONITOR 
860f cd 6f ee			call debug_vector  
8612				endm  
# End of macro CALLMONITOR
8612				endif 
8612			 
8612 22 65 ea			ld (store_tmppageid), hl 
8615				 
8615 3a 6e ea			ld a,(store_tmpid)    ; get file id 
8618			;	ld a, (store_filecache)			; save to cache 
8618			 
8618 32 7a ea			ld (store_page),a    ; set page id 
861b 3e 00			ld a, 0			 ; extent 0 is file header 
861d 32 7b ea			ld (store_page+1), a   ; set file extent 
8620			 
8620 32 7c ea			ld (store_page+2), a   ; extent count for the file 
8623			 
8623			;	inc hl 		; init block 0 of file 
8623			;	inc hl   		; skip file and extent id 
8623			 ;       ld a, 0 
8623			;	ld (hl),a 
8623			;	ld a, (store_filecache+1)  	; save to cache 
8623			 
8623			;	inc hl    ; file name 
8623				 
8623				 
8623 11 7d ea			ld de, store_page+3    ; get buffer for term string to use as file name 
8626				if DEBUG_STORESE 
8626					DMARK "SCc" 
8626 f5				push af  
8627 3a 3b 86			ld a, (.dmark)  
862a 32 6b ee			ld (debug_mark),a  
862d 3a 3c 86			ld a, (.dmark+1)  
8630 32 6c ee			ld (debug_mark+1),a  
8633 3a 3d 86			ld a, (.dmark+2)  
8636 32 6d ee			ld (debug_mark+2),a  
8639 18 03			jr .pastdmark  
863b ..			.dmark: db "SCc"  
863e f1			.pastdmark: pop af  
863f			endm  
# End of macro DMARK
863f					CALLMONITOR 
863f cd 6f ee			call debug_vector  
8642				endm  
# End of macro CALLMONITOR
8642				endif 
8642 e1				pop hl    ; get zero term string 
8643 e5				push hl 
8644 3e 00			ld a, 0 
8646 cd 45 91			call strlent 
8649 23				inc hl   ; cover zero term 
864a 06 00			ld b,0 
864c 4d				ld c,l 
864d e1				pop hl 
864e				;ex de, hl 
864e				if DEBUG_STORESE 
864e					DMARK "SCa" 
864e f5				push af  
864f 3a 63 86			ld a, (.dmark)  
8652 32 6b ee			ld (debug_mark),a  
8655 3a 64 86			ld a, (.dmark+1)  
8658 32 6c ee			ld (debug_mark+1),a  
865b 3a 65 86			ld a, (.dmark+2)  
865e 32 6d ee			ld (debug_mark+2),a  
8661 18 03			jr .pastdmark  
8663 ..			.dmark: db "SCa"  
8666 f1			.pastdmark: pop af  
8667			endm  
# End of macro DMARK
8667					;push af 
8667					;ld a, 'a' 
8667					;ld (debug_mark),a 
8667					;pop af 
8667					CALLMONITOR 
8667 cd 6f ee			call debug_vector  
866a				endm  
# End of macro CALLMONITOR
866a				endif 
866a ed b0			ldir    ; copy zero term string 
866c				if DEBUG_STORESE 
866c					DMARK "SCA" 
866c f5				push af  
866d 3a 81 86			ld a, (.dmark)  
8670 32 6b ee			ld (debug_mark),a  
8673 3a 82 86			ld a, (.dmark+1)  
8676 32 6c ee			ld (debug_mark+1),a  
8679 3a 83 86			ld a, (.dmark+2)  
867c 32 6d ee			ld (debug_mark+2),a  
867f 18 03			jr .pastdmark  
8681 ..			.dmark: db "SCA"  
8684 f1			.pastdmark: pop af  
8685			endm  
# End of macro DMARK
8685					CALLMONITOR 
8685 cd 6f ee			call debug_vector  
8688				endm  
# End of macro CALLMONITOR
8688				endif 
8688			 
8688				; write file header page 
8688			 
8688 2a 65 ea			ld hl,(store_tmppageid) 
868b 11 7a ea			ld de, store_page 
868e				if DEBUG_STORESE 
868e					DMARK "SCb" 
868e f5				push af  
868f 3a a3 86			ld a, (.dmark)  
8692 32 6b ee			ld (debug_mark),a  
8695 3a a4 86			ld a, (.dmark+1)  
8698 32 6c ee			ld (debug_mark+1),a  
869b 3a a5 86			ld a, (.dmark+2)  
869e 32 6d ee			ld (debug_mark+2),a  
86a1 18 03			jr .pastdmark  
86a3 ..			.dmark: db "SCb"  
86a6 f1			.pastdmark: pop af  
86a7			endm  
# End of macro DMARK
86a7					;push af 
86a7					;ld a, 'b' 
86a7					;ld (debug_mark),a 
86a7					;pop af 
86a7					CALLMONITOR 
86a7 cd 6f ee			call debug_vector  
86aa				endm  
# End of macro CALLMONITOR
86aa				endif 
86aa cd de 81			call storage_write_block 
86ad			 
86ad 3a 6e ea			ld a, (store_tmpid) 
86b0 6f				ld l, a 
86b1 26 00			ld h,0 
86b3				if DEBUG_STORESE 
86b3					DMARK "SCz" 
86b3 f5				push af  
86b4 3a c8 86			ld a, (.dmark)  
86b7 32 6b ee			ld (debug_mark),a  
86ba 3a c9 86			ld a, (.dmark+1)  
86bd 32 6c ee			ld (debug_mark+1),a  
86c0 3a ca 86			ld a, (.dmark+2)  
86c3 32 6d ee			ld (debug_mark+2),a  
86c6 18 03			jr .pastdmark  
86c8 ..			.dmark: db "SCz"  
86cb f1			.pastdmark: pop af  
86cc			endm  
# End of macro DMARK
86cc					CALLMONITOR 
86cc cd 6f ee			call debug_vector  
86cf				endm  
# End of macro CALLMONITOR
86cf				endif 
86cf c9				ret 
86d0				 
86d0			 
86d0			 
86d0			; 
86d0			; Read File 
86d0			; 
86d0			; h - file id to locate 
86d0			; l - extent to locate 
86d0			; de - pointer to string to read into 
86d0			; 
86d0			; returns hl is 0 if block not found ie end of file or pointer to start of data read 
86d0			 
86d0			.sr_fail: 
86d0 d1				pop de 
86d1 c9				ret 
86d2			 
86d2			storage_read: 
86d2			 
86d2			 
86d2 d5				push de 
86d3			 
86d3			; TODO BUG the above push is it popped before the RET Z? 
86d3			 
86d3			; TODO how to handle multiple part blocks 
86d3			 
86d3				; locate file extent to read 
86d3			 
86d3 5c				ld e, h 
86d4 55				ld d, l 
86d5			 
86d5			.srext: 
86d5 22 78 ea			ld (store_readptr), hl     ; save the current extent to load 
86d8 ed 53 76 ea		ld (store_readbuf), de     ; save the current buffer to load in to 
86dc			 
86dc 21 40 00			ld hl, STORE_BLOCK_PHY 
86df				if DEBUG_STORESE 
86df					DMARK "sre" 
86df f5				push af  
86e0 3a f4 86			ld a, (.dmark)  
86e3 32 6b ee			ld (debug_mark),a  
86e6 3a f5 86			ld a, (.dmark+1)  
86e9 32 6c ee			ld (debug_mark+1),a  
86ec 3a f6 86			ld a, (.dmark+2)  
86ef 32 6d ee			ld (debug_mark+2),a  
86f2 18 03			jr .pastdmark  
86f4 ..			.dmark: db "sre"  
86f7 f1			.pastdmark: pop af  
86f8			endm  
# End of macro DMARK
86f8					CALLMONITOR 
86f8 cd 6f ee			call debug_vector  
86fb				endm  
# End of macro CALLMONITOR
86fb				endif 
86fb cd ac 84			call storage_findnextid 
86fe			 
86fe				if DEBUG_STORESE 
86fe					DMARK "srf" 
86fe f5				push af  
86ff 3a 13 87			ld a, (.dmark)  
8702 32 6b ee			ld (debug_mark),a  
8705 3a 14 87			ld a, (.dmark+1)  
8708 32 6c ee			ld (debug_mark+1),a  
870b 3a 15 87			ld a, (.dmark+2)  
870e 32 6d ee			ld (debug_mark+2),a  
8711 18 03			jr .pastdmark  
8713 ..			.dmark: db "srf"  
8716 f1			.pastdmark: pop af  
8717			endm  
# End of macro DMARK
8717					CALLMONITOR 
8717 cd 6f ee			call debug_vector  
871a				endm  
# End of macro CALLMONITOR
871a				endif 
871a cd 05 8d			call ishlzero 
871d			;	ld a, l 
871d			;	add h 
871d			;	cp 0 
871d 28 b1			jr z,.sr_fail			; block not found so EOF 
871f			 
871f				; save current address for use by higher level words etc 
871f			 
871f 22 6b ea			ld (store_openaddr),hl 
8722			 
8722			 
8722				; hl contains page number to load 
8722 d1				pop de   ; get storage 
8723 ed 53 76 ea		ld (store_readbuf), de     ; current buffer to load in to 
8727 d5				push de 
8728				if DEBUG_STORESE 
8728					DMARK "srg" 
8728 f5				push af  
8729 3a 3d 87			ld a, (.dmark)  
872c 32 6b ee			ld (debug_mark),a  
872f 3a 3e 87			ld a, (.dmark+1)  
8732 32 6c ee			ld (debug_mark+1),a  
8735 3a 3f 87			ld a, (.dmark+2)  
8738 32 6d ee			ld (debug_mark+2),a  
873b 18 03			jr .pastdmark  
873d ..			.dmark: db "srg"  
8740 f1			.pastdmark: pop af  
8741			endm  
# End of macro DMARK
8741					CALLMONITOR 
8741 cd 6f ee			call debug_vector  
8744				endm  
# End of macro CALLMONITOR
8744				endif 
8744 cd 79 81			call storage_read_block 
8747			 
8747				; if this a continuation read??? 
8747			 
8747 2a 76 ea			ld hl, (store_readbuf)     ; current buffer to load in to 
874a			 
874a 3e 3f			ld a, STORE_BLOCK_PHY-1 
874c cd dc 8c			call addatohl 
874f 7e				ld a,(hl) 
8750 fe 00			cp 0 
8752 28 02			jr z, .markiscont 
8754 3e ff			ld a, 255 
8756			 
8756			.markiscont: 
8756 32 6d ea			ld (store_readcont), a 
8759			 
8759				if DEBUG_STORESE 
8759					DMARK "srC" 
8759 f5				push af  
875a 3a 6e 87			ld a, (.dmark)  
875d 32 6b ee			ld (debug_mark),a  
8760 3a 6f 87			ld a, (.dmark+1)  
8763 32 6c ee			ld (debug_mark+1),a  
8766 3a 70 87			ld a, (.dmark+2)  
8769 32 6d ee			ld (debug_mark+2),a  
876c 18 03			jr .pastdmark  
876e ..			.dmark: db "srC"  
8771 f1			.pastdmark: pop af  
8772			endm  
# End of macro DMARK
8772					CALLMONITOR 
8772 cd 6f ee			call debug_vector  
8775				endm  
# End of macro CALLMONITOR
8775				endif 
8775				; only short reads enabled 
8775			 
8775 3a 75 ea			ld a, (store_longread) 
8778 fe 00			cp 0 
877a ca 47 88			jp z, .readdone 
877d			 
877d			; TODO if block has no zeros then need to read next block  
877d			; this code appears to be very buggy. Have added above a flag to disable/enable the following code for later debug 
877d			; check last byte of physical block. 
877d			; if not zero then the next block needs to be loaded 
877d			 
877d			 
877d 2a 76 ea			ld hl, (store_readbuf)     ; current buffer to load in to 
8780			 
8780 3e 3f			ld a, STORE_BLOCK_PHY-1 
8782 cd dc 8c			call addatohl 
8785				;dec hl 
8785 7e				ld a,(hl) 
8786				if DEBUG_STORESE 
8786					DMARK "sr?" 
8786 f5				push af  
8787 3a 9b 87			ld a, (.dmark)  
878a 32 6b ee			ld (debug_mark),a  
878d 3a 9c 87			ld a, (.dmark+1)  
8790 32 6c ee			ld (debug_mark+1),a  
8793 3a 9d 87			ld a, (.dmark+2)  
8796 32 6d ee			ld (debug_mark+2),a  
8799 18 03			jr .pastdmark  
879b ..			.dmark: db "sr?"  
879e f1			.pastdmark: pop af  
879f			endm  
# End of macro DMARK
879f					CALLMONITOR 
879f cd 6f ee			call debug_vector  
87a2				endm  
# End of macro CALLMONITOR
87a2				endif 
87a2 fe 00			cp 0 
87a4 ca 47 88			jp z, .readdone 
87a7			 
87a7				; last byte is not zero so there is more in the next extent. Load it on the end.	 
87a7			 
87a7 23				inc hl 
87a8			 
87a8 22 76 ea			ld (store_readbuf), hl     ; save the current buffer to load in to 
87ab			 
87ab ed 5b 78 ea		ld de, (store_readptr)     ; save the current extent to load 
87af			 
87af eb				ex de, hl 
87b0			 
87b0				; next ext 
87b0			 
87b0 23				inc hl 
87b1 22 78 ea			ld  (store_readptr), hl     ; save the current extent to load 
87b4			 
87b4				if DEBUG_STORESE 
87b4					DMARK "sF2" 
87b4 f5				push af  
87b5 3a c9 87			ld a, (.dmark)  
87b8 32 6b ee			ld (debug_mark),a  
87bb 3a ca 87			ld a, (.dmark+1)  
87be 32 6c ee			ld (debug_mark+1),a  
87c1 3a cb 87			ld a, (.dmark+2)  
87c4 32 6d ee			ld (debug_mark+2),a  
87c7 18 03			jr .pastdmark  
87c9 ..			.dmark: db "sF2"  
87cc f1			.pastdmark: pop af  
87cd			endm  
# End of macro DMARK
87cd					CALLMONITOR 
87cd cd 6f ee			call debug_vector  
87d0				endm  
# End of macro CALLMONITOR
87d0				endif 
87d0			 
87d0				; get and load block 
87d0			 
87d0 cd ac 84			call storage_findnextid 
87d3			 
87d3				if DEBUG_STORESE 
87d3					DMARK "sf2" 
87d3 f5				push af  
87d4 3a e8 87			ld a, (.dmark)  
87d7 32 6b ee			ld (debug_mark),a  
87da 3a e9 87			ld a, (.dmark+1)  
87dd 32 6c ee			ld (debug_mark+1),a  
87e0 3a ea 87			ld a, (.dmark+2)  
87e3 32 6d ee			ld (debug_mark+2),a  
87e6 18 03			jr .pastdmark  
87e8 ..			.dmark: db "sf2"  
87eb f1			.pastdmark: pop af  
87ec			endm  
# End of macro DMARK
87ec					CALLMONITOR 
87ec cd 6f ee			call debug_vector  
87ef				endm  
# End of macro CALLMONITOR
87ef				endif 
87ef cd 05 8d			call ishlzero 
87f2			;	ld a, l 
87f2			;	add h 
87f2			;	cp 0 
87f2 ca d0 86			jp z,.sr_fail			; block not found so EOF 
87f5				 
87f5				; save current address for use by higher level words etc 
87f5			 
87f5 22 6b ea			ld (store_openaddr),hl 
87f8			 
87f8 cd 79 81			call storage_read_block 
87fb			 
87fb				; on a continuation block, we now have the file id and ext in the middle of the block 
87fb				; we need to pull everything back  
87fb			 
87fb ed 5b 76 ea		ld de, (store_readbuf)     ; current buffer to nudge into 
87ff 2a 76 ea			ld hl, (store_readbuf)     ; current buffer where data actually exists 
8802 23				inc hl 
8803 23				inc hl     ; skip id and ext 
8804 01 40 00			ld bc, STORE_BLOCK_PHY 
8807				if DEBUG_STORESE 
8807					DMARK "SR<" 
8807 f5				push af  
8808 3a 1c 88			ld a, (.dmark)  
880b 32 6b ee			ld (debug_mark),a  
880e 3a 1d 88			ld a, (.dmark+1)  
8811 32 6c ee			ld (debug_mark+1),a  
8814 3a 1e 88			ld a, (.dmark+2)  
8817 32 6d ee			ld (debug_mark+2),a  
881a 18 03			jr .pastdmark  
881c ..			.dmark: db "SR<"  
881f f1			.pastdmark: pop af  
8820			endm  
# End of macro DMARK
8820					CALLMONITOR 
8820 cd 6f ee			call debug_vector  
8823				endm  
# End of macro CALLMONITOR
8823				endif 
8823 ed b0			ldir     ; copy data 
8825			 
8825				; move the pointer back and pretend we have a full buffer for next recheck 
8825			 
8825 1b				dec de 
8826 1b				dec de 
8827			 
8827			; TODO do pop below now short circuit loop????? 
8827 c1				pop bc     ; get rid of spare de on stack 
8828				if DEBUG_STORESE 
8828					DMARK "SR>" 
8828 f5				push af  
8829 3a 3d 88			ld a, (.dmark)  
882c 32 6b ee			ld (debug_mark),a  
882f 3a 3e 88			ld a, (.dmark+1)  
8832 32 6c ee			ld (debug_mark+1),a  
8835 3a 3f 88			ld a, (.dmark+2)  
8838 32 6d ee			ld (debug_mark+2),a  
883b 18 03			jr .pastdmark  
883d ..			.dmark: db "SR>"  
8840 f1			.pastdmark: pop af  
8841			endm  
# End of macro DMARK
8841					CALLMONITOR 
8841 cd 6f ee			call debug_vector  
8844				endm  
# End of macro CALLMONITOR
8844				endif 
8844 c3 d5 86			jp .srext 
8847			 
8847			 
8847			 
8847			 
8847			 
8847			.readdone:		 
8847 e1				pop hl 		 ; return start of data to show as not EOF 
8848 23				inc hl   ; past file id 
8849 23				inc hl   ; past ext 
884a				if DEBUG_STORESE 
884a					DMARK "SRe" 
884a f5				push af  
884b 3a 5f 88			ld a, (.dmark)  
884e 32 6b ee			ld (debug_mark),a  
8851 3a 60 88			ld a, (.dmark+1)  
8854 32 6c ee			ld (debug_mark+1),a  
8857 3a 61 88			ld a, (.dmark+2)  
885a 32 6d ee			ld (debug_mark+2),a  
885d 18 03			jr .pastdmark  
885f ..			.dmark: db "SRe"  
8862 f1			.pastdmark: pop af  
8863			endm  
# End of macro DMARK
8863					CALLMONITOR 
8863 cd 6f ee			call debug_vector  
8866				endm  
# End of macro CALLMONITOR
8866				endif 
8866 c9					ret 
8867			 
8867			 
8867			 
8867			; 
8867			; Append File 
8867			; 
8867			; hl - file id to locate 
8867			; de - pointer to (multi block) string to write 
8867			 
8867			.sa_notfound: 
8867 d1				pop de 
8868 c9				ret 
8869			 
8869			 
8869			storage_append: 
8869				; hl -  file id to append to 
8869				; de - string to append 
8869			 
8869 d5				push de 
886a				 
886a				if DEBUG_STORESE 
886a					DMARK "AP1" 
886a f5				push af  
886b 3a 7f 88			ld a, (.dmark)  
886e 32 6b ee			ld (debug_mark),a  
8871 3a 80 88			ld a, (.dmark+1)  
8874 32 6c ee			ld (debug_mark+1),a  
8877 3a 81 88			ld a, (.dmark+2)  
887a 32 6d ee			ld (debug_mark+2),a  
887d 18 03			jr .pastdmark  
887f ..			.dmark: db "AP1"  
8882 f1			.pastdmark: pop af  
8883			endm  
# End of macro DMARK
8883					CALLMONITOR 
8883 cd 6f ee			call debug_vector  
8886				endm  
# End of macro CALLMONITOR
8886				endif 
8886			 
8886 7d				ld a, l 
8887 32 6e ea			ld (store_tmpid), a 
888a			 
888a				; get file header  
888a			 
888a 16 00			ld d, 0			 ; file extent to locate - file name details at item 0 
888c 3a 6e ea			ld a, (store_tmpid) 
888f 5f				ld e, a 
8890			 
8890 21 40 00				ld hl, STORE_BLOCK_PHY 
8893 cd ac 84				call storage_findnextid 
8896			 
8896 cd 05 8d			call ishlzero 
8899 28 cc			jr z, .sa_notfound 
889b			 
889b 22 65 ea			ld (store_tmppageid), hl 
889e			 
889e				; TODO handle file id not found 
889e			 
889e				if DEBUG_STORESE 
889e					DMARK "AP2" 
889e f5				push af  
889f 3a b3 88			ld a, (.dmark)  
88a2 32 6b ee			ld (debug_mark),a  
88a5 3a b4 88			ld a, (.dmark+1)  
88a8 32 6c ee			ld (debug_mark+1),a  
88ab 3a b5 88			ld a, (.dmark+2)  
88ae 32 6d ee			ld (debug_mark+2),a  
88b1 18 03			jr .pastdmark  
88b3 ..			.dmark: db "AP2"  
88b6 f1			.pastdmark: pop af  
88b7			endm  
# End of macro DMARK
88b7					CALLMONITOR 
88b7 cd 6f ee			call debug_vector  
88ba				endm  
# End of macro CALLMONITOR
88ba				endif 
88ba			 
88ba				; update file extent count 
88ba			 
88ba 11 7a ea			ld de, store_page 
88bd			 
88bd cd 79 81			call storage_read_block 
88c0			 
88c0				if DEBUG_STORESE 
88c0					DMARK "AP3" 
88c0 f5				push af  
88c1 3a d5 88			ld a, (.dmark)  
88c4 32 6b ee			ld (debug_mark),a  
88c7 3a d6 88			ld a, (.dmark+1)  
88ca 32 6c ee			ld (debug_mark+1),a  
88cd 3a d7 88			ld a, (.dmark+2)  
88d0 32 6d ee			ld (debug_mark+2),a  
88d3 18 03			jr .pastdmark  
88d5 ..			.dmark: db "AP3"  
88d8 f1			.pastdmark: pop af  
88d9			endm  
# End of macro DMARK
88d9					CALLMONITOR 
88d9 cd 6f ee			call debug_vector  
88dc				endm  
# End of macro CALLMONITOR
88dc				endif 
88dc			;	ld (store_tmppageid), hl 
88dc			 
88dc 3a 7c ea			ld a, (store_page+2) 
88df 3c				inc a 
88e0 32 7c ea			ld (store_page+2), a 
88e3 32 6d ea			ld (store_tmpext), a 
88e6				 
88e6				if DEBUG_STORESE 
88e6					DMARK "AP3" 
88e6 f5				push af  
88e7 3a fb 88			ld a, (.dmark)  
88ea 32 6b ee			ld (debug_mark),a  
88ed 3a fc 88			ld a, (.dmark+1)  
88f0 32 6c ee			ld (debug_mark+1),a  
88f3 3a fd 88			ld a, (.dmark+2)  
88f6 32 6d ee			ld (debug_mark+2),a  
88f9 18 03			jr .pastdmark  
88fb ..			.dmark: db "AP3"  
88fe f1			.pastdmark: pop af  
88ff			endm  
# End of macro DMARK
88ff					CALLMONITOR 
88ff cd 6f ee			call debug_vector  
8902				endm  
# End of macro CALLMONITOR
8902				endif 
8902 2a 65 ea			ld hl, (store_tmppageid) 
8905 11 7a ea			ld de, store_page 
8908 cd de 81			call storage_write_block 
890b			 
890b				; find free block 
890b			 
890b 11 00 00			ld de, 0			 ; file extent to locate 
890e			 
890e 21 40 00				ld hl, STORE_BLOCK_PHY 
8911 cd ac 84				call storage_findnextid 
8914 cd 05 8d			call ishlzero 
8917 ca 67 88			jp z, .sa_notfound 
891a			 
891a					; TODO handle no space left 
891a					 
891a 22 65 ea				ld (store_tmppageid), hl 
891d			 
891d				if DEBUG_STORESE 
891d					DMARK "AP4" 
891d f5				push af  
891e 3a 32 89			ld a, (.dmark)  
8921 32 6b ee			ld (debug_mark),a  
8924 3a 33 89			ld a, (.dmark+1)  
8927 32 6c ee			ld (debug_mark+1),a  
892a 3a 34 89			ld a, (.dmark+2)  
892d 32 6d ee			ld (debug_mark+2),a  
8930 18 03			jr .pastdmark  
8932 ..			.dmark: db "AP4"  
8935 f1			.pastdmark: pop af  
8936			endm  
# End of macro DMARK
8936					CALLMONITOR 
8936 cd 6f ee			call debug_vector  
8939				endm  
# End of macro CALLMONITOR
8939				endif 
8939					; init the buffer with zeros so we can id if the buffer is full or not 
8939			 
8939 e5					push hl 
893a c5					push bc 
893b			 
893b 21 7a ea				ld hl, store_page 
893e 06 40				ld b, STORE_BLOCK_PHY 
8940 3e 00				ld a, 0 
8942 77			.zeroblock:	ld (hl), a 
8943 23					inc hl 
8944 10 fc				djnz .zeroblock 
8946			 
8946 c1					pop bc 
8947 e1					pop hl 
8948			 
8948					; construct block 
8948			 
8948 3a 6e ea				ld a, (store_tmpid) 
894b 32 7a ea				ld (store_page), a   ; file id 
894e 3a 6d ea				ld a, (store_tmpext)   ; extent for this block 
8951 32 7b ea				ld (store_page+1), a 
8954			 
8954 e1					pop hl    ; get string to write 
8955 06 3e				ld b, STORE_BLOCK_PHY-2       ; exclude count of file id and extent 
8957 11 7c ea				ld de, store_page+2 
895a			 
895a				if DEBUG_STORESE 
895a					DMARK "AP5" 
895a f5				push af  
895b 3a 6f 89			ld a, (.dmark)  
895e 32 6b ee			ld (debug_mark),a  
8961 3a 70 89			ld a, (.dmark+1)  
8964 32 6c ee			ld (debug_mark+1),a  
8967 3a 71 89			ld a, (.dmark+2)  
896a 32 6d ee			ld (debug_mark+2),a  
896d 18 03			jr .pastdmark  
896f ..			.dmark: db "AP5"  
8972 f1			.pastdmark: pop af  
8973			endm  
# End of macro DMARK
8973					CALLMONITOR 
8973 cd 6f ee			call debug_vector  
8976				endm  
# End of macro CALLMONITOR
8976				endif 
8976			 
8976			 
8976			 
8976					; fill buffer with data until end of string or full block 
8976			 
8976 7e			.appd:		ld a, (hl) 
8977 12					ld (de), a 
8978 fe 00				cp 0 
897a 28 04				jr z, .appdone 
897c 23					inc hl 
897d 13					inc de 
897e 10 f6				djnz .appd 
8980			 
8980 e5			.appdone:	push hl		 	; save current source in case we need to go around again 
8981 f5					push af   		; save last byte dumped 
8982			 
8982			 
8982 2a 65 ea			ld hl, (store_tmppageid) 
8985 11 7a ea			ld de, store_page 
8988				if DEBUG_STORESE 
8988					DMARK "AP6" 
8988 f5				push af  
8989 3a 9d 89			ld a, (.dmark)  
898c 32 6b ee			ld (debug_mark),a  
898f 3a 9e 89			ld a, (.dmark+1)  
8992 32 6c ee			ld (debug_mark+1),a  
8995 3a 9f 89			ld a, (.dmark+2)  
8998 32 6d ee			ld (debug_mark+2),a  
899b 18 03			jr .pastdmark  
899d ..			.dmark: db "AP6"  
89a0 f1			.pastdmark: pop af  
89a1			endm  
# End of macro DMARK
89a1					CALLMONITOR 
89a1 cd 6f ee			call debug_vector  
89a4				endm  
# End of macro CALLMONITOR
89a4				endif 
89a4 cd de 81				call storage_write_block 
89a7			 
89a7			 
89a7				; was that a full block of data written? 
89a7				; any more to write out? 
89a7			 
89a7				; if yes then set vars and jump to start of function again 
89a7			 
89a7 f1					pop af 
89a8 d1					pop de 
89a9			 
89a9 fe 00				cp 0		 ; no, string was fully written 
89ab c8					ret z 
89ac			 
89ac					; setup vars for next cycle 
89ac			 
89ac 3a 6e ea				ld a, (store_tmpid) 
89af 6f					ld l, a 
89b0 26 00				ld h, 0 
89b2			 
89b2 c3 69 88			 	jp storage_append	 ; yes, need to write out some more 
89b5			 
89b5			 
89b5			 
89b5			 
89b5			 
89b5			 
89b5			 
89b5			if DEBUG_STORECF 
89b5			storageput:	 
89b5					ret 
89b5			storageread: 
89b5					ld hl, store_page 
89b5					ld b, 200 
89b5					ld a,0 
89b5			.src:		ld (hl),a 
89b5					inc hl 
89b5					djnz .src 
89b5					 
89b5			 
89b5					ld de, 0 
89b5					ld bc, 1 
89b5					ld hl, store_page 
89b5					call cfRead 
89b5			 
89b5				call cfGetError 
89b5				ld hl,scratch 
89b5				call hexout 
89b5				ld hl, scratch+2 
89b5				ld a, 0 
89b5				ld (hl),a 
89b5				ld de, scratch 
89b5				ld a,display_row_1 
89b5				call str_at_display 
89b5				call update_display 
89b5			 
89b5					ld hl, store_page 
89b5					ld (os_cur_ptr),hl 
89b5			 
89b5					ret 
89b5			endif 
89b5			 
89b5			 
89b5			; Clear out the main buffer store (used to remove junk before writing a new block) 
89b5			 
89b5			storage_clear_page: 
89b5 e5				push hl 
89b6 d5				push de 
89b7 c5				push bc 
89b8 21 7a ea			ld hl, store_page 
89bb 3e 00			ld a, 0 
89bd 77				ld (hl), a 
89be			 
89be 11 7b ea			ld de, store_page+1 
89c1 01 19 01			ld bc, STORE_BLOCK_LOG+1 
89c4			 
89c4 ed b0			ldir 
89c6				 
89c6 c1				pop bc 
89c7 d1				pop de 
89c8 e1				pop hl 
89c9 c9				ret 
89ca			 
89ca			; eof 
# End of file firmware_storage.asm
89ca			  
89ca			; support routines for above hardware abstraction layer  
89ca			  
89ca			include "firmware_general.asm"        ; general support functions  
89ca			 
89ca			; word look up 
89ca			 
89ca			; in 
89ca			; a is the index 
89ca			; hl is pointer start of array 
89ca			; 
89ca			; returns 
89ca			; hl to the word 
89ca			; 
89ca			 
89ca			table_lookup:  
89ca d5					push de 
89cb eb					ex de, hl 
89cc			 
89cc 6f					ld l, a 
89cd 26 00				ld h, 0 
89cf 29					add hl, hl 
89d0 19					add hl, de 
89d1 7e					ld a, (hl) 
89d2 23					inc hl 
89d3 66					ld h,(hl) 
89d4 6f					ld l, a 
89d5			 
89d5 d1					pop de 
89d6 c9					ret 
89d7			 
89d7			; Delay loops 
89d7			 
89d7			 
89d7			 
89d7			aDelayInMS: 
89d7 c5				push bc 
89d8 47				ld b,a 
89d9			msdelay: 
89d9 c5				push bc 
89da				 
89da			 
89da 01 41 00			ld bc,041h 
89dd cd f5 89			call delayloop 
89e0 c1				pop bc 
89e1 05				dec b 
89e2 20 f5			jr nz,msdelay 
89e4			 
89e4			;if CPU_CLOCK_8MHZ 
89e4			;msdelay8: 
89e4			;	push bc 
89e4			;	 
89e4			; 
89e4			;	ld bc,041h 
89e4			;	call delayloop 
89e4			;	pop bc 
89e4			;	dec b 
89e4			;	jr nz,msdelay8 
89e4			;endif 
89e4			 
89e4			 
89e4 c1				pop bc 
89e5 c9				ret 
89e6			 
89e6			 
89e6			delay250ms: 
89e6				;push de 
89e6 01 00 40			ld bc, 04000h 
89e9 c3 f5 89			jp delayloop 
89ec			delay500ms: 
89ec				;push de 
89ec 01 00 80			ld bc, 08000h 
89ef c3 f5 89			jp delayloop 
89f2			delay1s: 
89f2				;push bc 
89f2			   ; Clobbers A, d and e 
89f2 01 00 00		    ld      bc,0      ; # 0ffffh = approx 1s 
89f5			delayloop: 
89f5 c5			    push bc 
89f6			 
89f6			if BASE_CPM 
89f6				ld bc, CPM_DELAY_TUNE 
89f6			.cpmloop: 
89f6				push bc 
89f6			 
89f6			endif 
89f6			 
89f6			 
89f6			 
89f6			delayloopi: 
89f6			;	push bc 
89f6			;.dl: 
89f6 cb 47		    bit     0,a    	; 8 
89f8 cb 47		    bit     0,a    	; 8 
89fa cb 47		    bit     0,a    	; 8 
89fc e6 ff		    and     255  	; 7 
89fe 0b			    dec     bc      	; 6 
89ff 79			    ld      a,c     	; 4 
8a00 b0			    or      b     	; 4 
8a01 c2 f6 89		    jp      nz,delayloopi   	; 10, total = 55 states/iteration 
8a04			    ; 65536 iterations * 55 states = 3604480 states = 2.00248 seconds 
8a04				;pop de 
8a04			;pop bc 
8a04			 
8a04			if BASE_CPM 
8a04				pop bc 
8a04				 
8a04			    dec     bc      	; 6 
8a04			    ld      a,c     	; 4 
8a04			    or      b     	; 4 
8a04			    jp      nz,.cpmloop   	; 10, total = 55 states/iteration 
8a04				 
8a04			 
8a04			endif 
8a04			;if CPU_CLOCK_8MHZ 
8a04			;    pop bc 
8a04			;    push bc 
8a04			;.dl8: 
8a04			;    bit     0,a    	; 8 
8a04			;    bit     0,a    	; 8 
8a04			;    bit     0,a    	; 8 
8a04			;    and     255  	; 7 
8a04			;    dec     bc      	; 6 
8a04			;    ld      a,c     	; 4 
8a04			;    or      b     	; 4 
8a04			;    jp      nz,.dl8   	; 10, total = 55 states/iteration 
8a04			;endif 
8a04			 
8a04			;if CPU_CLOCK_10MHZ 
8a04			;    pop bc 
8a04			;    push bc 
8a04			;.dl8: 
8a04			;    bit     0,a    	; 8 
8a04			;    bit     0,a    	; 8 
8a04			;    bit     0,a    	; 8 
8a04			;    and     255  	; 7 
8a04			;    dec     bc      	; 6 
8a04			;    ld      a,c     	; 4 
8a04			;    or      b     	; 4 
8a04			;    jp      nz,.dl8   	; 10, total = 55 states/iteration 
8a04			;endif 
8a04 c1			    pop bc 
8a05			 
8a05 c9				ret 
8a06			 
8a06			 
8a06			 
8a06			; eof 
# End of file firmware_general.asm
8a06			include "firmware_display.asm"      ; frame buffer screen abstraction layer  
8a06			; display routines that use the physical hardware abstraction layer 
8a06			 
8a06			 
8a06			; Display an activity indicator 
8a06			; Each call returns the new char pointed to in hl 
8a06			 
8a06			active: 
8a06 3a c6 eb			ld a, (display_active) 
8a09 fe 06			cp 6 
8a0b			 
8a0b 20 02			jr nz, .sne 
8a0d				; gone past the last one reset sequence 
8a0d 3e ff			ld a, 255 
8a0f			 
8a0f			.sne:   
8a0f				; get the next char in seq 
8a0f 3c				inc a 
8a10 32 c6 eb			ld (display_active), a 
8a13			 
8a13				; look up the string in the table 
8a13 21 2a 8a			ld hl, actseq 
8a16 cb 27			sla a 
8a18 cd dc 8c			call addatohl 
8a1b cd 6a 9e			call loadwordinhl 
8a1e			 
8a1e				; forth will write the to string when pushing so move from rom to ram 
8a1e			 
8a1e 11 c7 eb			ld de, display_active+1 
8a21 01 02 00			ld bc, 2 
8a24 ed b0			ldir 
8a26			 
8a26 21 c7 eb			ld hl, display_active+1 
8a29 c9				ret 
8a2a				 
8a2a				 
8a2a			 
8a2a			 
8a2a			;db "|/-\|-\" 
8a2a			 
8a2a			actseq: 
8a2a			 
8a2a 38 8a		dw spin0 
8a2c 3a 8a		dw spin1 
8a2e 3c 8a		dw spin2 
8a30 3e 8a		dw spin3 
8a32 3c 8a		dw spin2 
8a34 3a 8a		dw spin1 
8a36 38 8a		dw spin0 
8a38			 
8a38 .. 00		spin0: db " ", 0 
8a3a .. 00		spin1: db "-", 0 
8a3c .. 00		spin2: db "+", 0 
8a3e .. 00		spin3: db "#", 0 
8a40			 
8a40			 
8a40			; information window 
8a40			 
8a40			; pass hl with 1st string to display 
8a40			; pass de with 2nd string to display 
8a40			 
8a40			info_panel: 
8a40 e5				push hl 
8a41			 
8a41 2a cc eb			ld hl, (display_fb_active) 
8a44 e5				push hl    ; future de destination 
8a45 21 b1 ed				ld hl, display_fb0 
8a48 22 cc eb				ld (display_fb_active), hl 
8a4b			 
8a4b			;	call clear_display 
8a4b			 
8a4b				if BASE_CPM 
8a4b				ld a, '.' 
8a4b				else 
8a4b 3e a5			ld a, 165 
8a4d				endif 
8a4d cd b4 8a			call fill_display 
8a50			 
8a50			 
8a50 3e 55			ld a, display_row_3 + 5 
8a52 cd c2 8a			call str_at_display 
8a55			 
8a55 e1				pop hl 
8a56 d1				pop de 
8a57			 
8a57 e5				push hl 
8a58			 
8a58			 
8a58 3e 2d			ld a, display_row_2 + 5 
8a5a cd c2 8a			call str_at_display 
8a5d			 
8a5d			 
8a5d cd d2 8a			call update_display 
8a60 cd b3 9a			call next_page_prompt 
8a63 cd af 8a			call clear_display 
8a66			 
8a66				 
8a66 21 10 ed				ld hl, display_fb1 
8a69 22 cc eb				ld (display_fb_active), hl 
8a6c cd d2 8a			call update_display 
8a6f			 
8a6f e1				pop hl 
8a70			 
8a70 c9				ret 
8a71			 
8a71			 
8a71			 
8a71			 
8a71			; TODO windowing? 
8a71			 
8a71			; TODO scroll line up 
8a71			 
8a71			scroll_up: 
8a71			 
8a71 e5				push hl 
8a72 d5				push de 
8a73 c5				push bc 
8a74			 
8a74				; get frame buffer  
8a74			 
8a74 2a cc eb			ld hl, (display_fb_active) 
8a77 e5				push hl    ; future de destination 
8a78			 
8a78 11 28 00			ld  de, display_cols 
8a7b 19				add hl, de 
8a7c			 
8a7c d1				pop de 
8a7d			 
8a7d				;ex de, hl 
8a7d 01 9f 00			ld bc, display_fb_len -1  
8a80			;if DEBUG_FORTH_WORDS 
8a80			;	DMARK "SCL" 
8a80			;	CALLMONITOR 
8a80			;endif	 
8a80 ed b0			ldir 
8a82			 
8a82				; wipe bottom row 
8a82			 
8a82			 
8a82 2a cc eb			ld hl, (display_fb_active) 
8a85 11 a0 00			ld de, display_cols*display_rows 
8a88 19				add hl, de 
8a89 06 28			ld b, display_cols 
8a8b 3e 20			ld a, ' ' 
8a8d			.scwipe: 
8a8d 77				ld (hl), a 
8a8e 2b				dec hl 
8a8f 10 fc			djnz .scwipe 
8a91			 
8a91				;pop hl 
8a91			 
8a91 c1				pop bc 
8a92 d1				pop de 
8a93 e1				pop hl 
8a94			 
8a94 c9				ret 
8a95			 
8a95			 
8a95			;scroll_upo: 
8a95			;	ld de, display_row_1 
8a95			 ;	ld hl, display_row_2 
8a95			;	ld bc, display_cols 
8a95			;	ldir 
8a95			;	ld de, display_row_2 
8a95			 ;	ld hl, display_row_3 
8a95			;	ld bc, display_cols 
8a95			;	ldir 
8a95			;	ld de, display_row_3 
8a95			 ;	ld hl, display_row_4 
8a95			;	ld bc, display_cols 
8a95			;	ldir 
8a95			 
8a95			; TODO clear row 4 
8a95			 
8a95			;	ret 
8a95			 
8a95				 
8a95			scroll_down: 
8a95			 
8a95 e5				push hl 
8a96 d5				push de 
8a97 c5				push bc 
8a98			 
8a98				; get frame buffer  
8a98			 
8a98 2a cc eb			ld hl, (display_fb_active) 
8a9b			 
8a9b 11 9f 00			ld de, display_fb_len - 1 
8a9e 19				add hl, de 
8a9f			 
8a9f e5			push hl    ; future de destination 
8aa0			 
8aa0 11 28 00			ld  de, display_cols 
8aa3 ed 52			sbc hl, de 
8aa5			 
8aa5			 
8aa5 d1				pop de 
8aa6			 
8aa6			;	ex de, hl 
8aa6 01 9f 00			ld bc, display_fb_len -1  
8aa9			 
8aa9			 
8aa9				 
8aa9			 
8aa9 ed b0			ldir 
8aab			 
8aab				; wipe bottom row 
8aab			 
8aab			 
8aab			;	ld hl, (display_fb_active) 
8aab			;;	ld de, display_cols*display_rows 
8aab			;;	add hl, de 
8aab			;	ld b, display_cols 
8aab			;	ld a, ' ' 
8aab			;.scwiped: 
8aab			;	ld (hl), a 
8aab			;	dec hl 
8aab			;	djnz .scwiped 
8aab			 
8aab				;pop hl 
8aab			 
8aab c1				pop bc 
8aac d1				pop de 
8aad e1				pop hl 
8aae			 
8aae c9				ret 
8aaf			;scroll_down: 
8aaf			;	ld de, display_row_4 
8aaf			;	ld hl, display_row_3 
8aaf			;	ld bc, display_cols 
8aaf			;	ldir 
8aaf			;	ld de, display_row_3 
8aaf			; 	ld hl, display_row_2 
8aaf			;	ld bc, display_cols 
8aaf			;	ldir 
8aaf			;	ld de, display_row_2 
8aaf			;	ld hl, display_row_1 
8aaf			;	ld bc, display_cols 
8aaf			;	ldir 
8aaf			;;; TODO clear row 1 
8aaf			;	ret 
8aaf			 
8aaf			 
8aaf			 
8aaf			 
8aaf			 
8aaf			; clear active frame buffer 
8aaf			 
8aaf			clear_display: 
8aaf 3e 20			ld a, ' ' 
8ab1 c3 b4 8a			jp fill_display 
8ab4			 
8ab4			; fill active frame buffer with a char in A 
8ab4			 
8ab4			fill_display: 
8ab4 06 a0			ld b,display_fb_len 
8ab6 2a cc eb			ld hl, (display_fb_active) 
8ab9 77			.fd1:	ld (hl),a 
8aba 23				inc hl 
8abb 10 fc			djnz .fd1 
8abd 23				inc hl 
8abe 3e 00			ld a,0 
8ac0 77				ld (hl),a 
8ac1			 
8ac1			 
8ac1 c9				ret 
8ac2			; Write string (DE) at pos (A) to active frame buffer 
8ac2			 
8ac2 2a cc eb		str_at_display:    ld hl,(display_fb_active) 
8ac5 06 00					ld b,0 
8ac7 4f					ld c,a 
8ac8 09					add hl,bc 
8ac9 1a			.sad1: 		LD   A, (DE)        ;Get character from string 
8aca b7			            OR   A              ;Null terminator? 
8acb c8			            RET  Z              ;Yes, so finished 
8acc 77					ld (hl),a 
8acd 23				inc hl 
8ace 13			            INC  DE             ;Point to next character 
8acf 18 f8		            JR   .sad1     ;Repeat 
8ad1 c9					ret 
8ad2			 
8ad2			; using current frame buffer write to physical display 
8ad2			 
8ad2			update_display: 
8ad2 e5				push hl 
8ad3 2a cc eb			ld hl, (display_fb_active) 
8ad6 cd 8c e3			call write_display 
8ad9 e1				pop hl 
8ada c9				ret 
8adb			 
8adb			; TODO scrolling 
8adb			 
8adb			 
8adb			; move cursor right one char 
8adb			cursor_right: 
8adb			 
8adb				; TODO shift right 
8adb				; TODO if beyond max col 
8adb				; TODO       cursor_next_line 
8adb			 
8adb c9				ret 
8adc			 
8adc			 
8adc			cursor_next_line: 
8adc				; TODO first char 
8adc				; TODO line down 
8adc				; TODO if past last row 
8adc				; TODO    scroll up 
8adc			 
8adc c9				ret 
8add			 
8add			cursor_left: 
8add				; TODO shift left 
8add				; TODO if beyond left  
8add				; TODO     cursor prev line 
8add				 
8add c9				ret 
8ade			 
8ade			cursor_prev_line: 
8ade				; TODO last char 
8ade				; TODO line up 
8ade				; TODO if past first row 
8ade				; TODO   scroll down 
8ade			 
8ade c9				ret 
8adf			 
8adf			 
8adf			cout: 
8adf				; A - char 
8adf c9				ret 
8ae0			 
8ae0			 
8ae0			; Display a menu and allow item selection (optional toggle items) 
8ae0			; 
8ae0			; format: 
8ae0			; hl pointer to word array with zero term for items 
8ae0			; e.g.    db item1 
8ae0			;         db .... 
8ae0			;         db 0 
8ae0			; 
8ae0			; a = starting menu item  
8ae0			; 
8ae0			; de = pointer item toggle array   (todo) 
8ae0			; 
8ae0			; returns item selected in a 1-... 
8ae0			; returns 0 if back button pressed 
8ae0			; 
8ae0			; NOTE: Uses system frame buffer to display 
8ae0			; 
8ae0			; LEFT, Q = go back 
8ae0			; RIGHT, SPACE, CR = select 
8ae0			; UP, A - Up 
8ae0			; DOWN, Z - Down 
8ae0			 
8ae0			 
8ae0			 
8ae0			 
8ae0			 
8ae0			menu: 
8ae0			 
8ae0					; keep array pointer 
8ae0			 
8ae0 22 73 ea				ld (store_tmp1), hl 
8ae3 32 71 ea				ld (store_tmp2), a 
8ae6			 
8ae6					; check for key bounce 
8ae6			 
8ae6			if BASE_KEV 
8ae6			 
8ae6			.mbounce:	call cin 
8ae6					cp 0 
8ae6					jr nz, .mbounce 
8ae6			endif 
8ae6					; for ease use ex 
8ae6			 
8ae6					; use menu on fb0 so as not to disrupt user screens ie a menu popup 
8ae6 21 b1 ed				ld hl, display_fb0 
8ae9 22 cc eb				ld (display_fb_active), hl 
8aec			 
8aec cd af 8a		.mloop:		call clear_display 
8aef cd d2 8a				call update_display 
8af2			 
8af2					; draw selection id '>' at 1 
8af2			 
8af2					; init start of list display 
8af2			 
8af2 3e 05				ld a, 5 
8af4 32 6f ea				ld (store_tmp3), a   ; display row count 
8af7 3a 71 ea				ld a,( store_tmp2) 
8afa 32 72 ea				ld (store_tmp2+1), a   ; display item count 
8afd			 
8afd					 
8afd			.mitem:	 
8afd			 
8afd			 
8afd 3a 72 ea				ld a,(store_tmp2+1) 
8b00 6f					ld l, a 
8b01 26 00				ld h, 0 
8b03 29					add hl, hl 
8b04 ed 5b 73 ea			ld de, (store_tmp1) 
8b08 19					add hl, de 
8b09 7e					ld a, (hl) 
8b0a 23					inc hl 
8b0b 66					ld h,(hl) 
8b0c 6f					ld l, a 
8b0d			 
8b0d cd 05 8d				call ishlzero 
8b10 28 1a				jr z, .mdone 
8b12			 
8b12 eb					ex de, hl 
8b13 3a 6f ea				ld a, (store_tmp3) 
8b16 cd c2 8a				call str_at_display 
8b19					 
8b19			 
8b19					; next item 
8b19 3a 72 ea				ld a, (store_tmp2+1) 
8b1c 3c					inc a 
8b1d 32 72 ea				ld (store_tmp2+1), a   ; display item count 
8b20			 
8b20			 		; next row 
8b20			 
8b20 3a 6f ea				ld a, (store_tmp3) 
8b23 c6 28				add display_cols 
8b25 32 6f ea				ld (store_tmp3), a 
8b28			 
8b28					; at end of screen? 
8b28			 
8b28 fe 10				cp display_rows*4 
8b2a 20 d1				jr nz, .mitem 
8b2c			 
8b2c			 
8b2c			.mdone: 
8b2c cd 05 8d				call ishlzero 
8b2f 28 08				jr z, .nodn 
8b31			 
8b31 3e 78				ld a, display_row_4 
8b33 11 b2 8b				ld de, .mdown 
8b36 cd c2 8a				call str_at_display 
8b39			 
8b39					; draw options to fill the screens with active item on line 1 
8b39					; if current option is 2 or more then display ^ in top 
8b39			 
8b39 3a 71 ea		.nodn:		ld a, (store_tmp2) 
8b3c fe 00				cp 0 
8b3e 28 08				jr z, .noup 
8b40			 
8b40 3e 00				ld a, 0 
8b42 11 b0 8b				ld de, .mup 
8b45 cd c2 8a				call str_at_display 
8b48			 
8b48 3e 02		.noup:		ld a, 2 
8b4a 11 ae 8b				ld de, .msel 
8b4d cd c2 8a				call str_at_display 
8b50			 
8b50					; if current option + 1 is not null then display V in bottom 
8b50					; get key 
8b50 cd d2 8a				call update_display 
8b53			 
8b53			 
8b53					; handle key 
8b53			 
8b53 cd 18 e4				call cin_wait 
8b56			 
8b56 fe 05				cp KEY_UP 
8b58 28 2b				jr z, .mgoup 
8b5a fe 61				cp 'a' 
8b5c 28 27				jr z, .mgoup 
8b5e fe 0a				cp KEY_DOWN 
8b60 28 32				jr z, .mgod 
8b62 fe 7a				cp 'z' 
8b64 28 2e				jr z, .mgod 
8b66 fe 20				cp ' ' 
8b68 28 34				jr z, .goend 
8b6a fe 0c				cp KEY_RIGHT 
8b6c 28 30				jr z, .goend 
8b6e fe 0d				cp KEY_CR 
8b70 28 2c				jr z, .goend 
8b72 fe 71				cp 'q' 
8b74 28 0b				jr z, .goback 
8b76			 
8b76 fe 0b				cp KEY_LEFT 
8b78 28 07				jr z, .goback 
8b7a fe 08				cp KEY_BS 
8b7c 28 03				jr z, .goback 
8b7e c3 ec 8a				jp .mloop 
8b81			 
8b81			.goback: 
8b81 3e 00			ld a, 0 
8b83 18 1d			jr .goend2 
8b85			 
8b85				; move up one 
8b85			.mgoup: 
8b85 3a 71 ea				ld a, (store_tmp2) 
8b88 fe 00				cp 0 
8b8a ca ec 8a				jp z, .mloop 
8b8d 3d					dec a 
8b8e 32 71 ea				ld (store_tmp2), a 
8b91 c3 ec 8a				jp .mloop 
8b94			 
8b94				; move down one 
8b94			.mgod: 
8b94 3a 71 ea				ld a, (store_tmp2) 
8b97 3c					inc a 
8b98 32 71 ea				ld (store_tmp2), a 
8b9b c3 ec 8a				jp .mloop 
8b9e			 
8b9e			 
8b9e			.goend: 
8b9e					; get selected item number 
8b9e			 
8b9e 3a 71 ea				ld a, (store_tmp2) 
8ba1 3c					inc a 
8ba2			 
8ba2			.goend2: 
8ba2 f5					push af 
8ba3			 
8ba3					; restore active fb 
8ba3					; TODO BUG assumes fb1 
8ba3			 
8ba3 21 10 ed				ld hl, display_fb1 
8ba6 22 cc eb				ld (display_fb_active), hl 
8ba9			 
8ba9					; restore main regs 
8ba9			 
8ba9			 
8ba9 cd d2 8a				call update_display 
8bac			 
8bac f1					pop af 
8bad			 
8bad c9				ret 
8bae			 
8bae .. 00		.msel:   db ">",0 
8bb0 .. 00		.mup:   db "^",0 
8bb2 .. 00		.mdown:   db "v",0 
8bb4			 
8bb4			 
8bb4			; eof 
8bb4			 
# End of file firmware_display.asm
8bb4			include "firmware_maths.asm"     ; any odd maths stuff   TODO removed until I fix up the rng code  
8bb4			; random number generators 
8bb4			 
8bb4			 
8bb4			; https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random 
8bb4			 
8bb4			 
8bb4			;-----> Generate a random number 
8bb4			; output a=answer 0<=a<=255 
8bb4			; all registers are preserved except: af 
8bb4			random: 
8bb4 e5			        push    hl 
8bb5 d5			        push    de 
8bb6 2a ab eb		        ld      hl,(randData) 
8bb9 ed 5f		        ld      a,r 
8bbb 57			        ld      d,a 
8bbc 5e			        ld      e,(hl) 
8bbd 19			        add     hl,de 
8bbe 85			        add     a,l 
8bbf ac			        xor     h 
8bc0 22 ab eb		        ld      (randData),hl 
8bc3 d1			        pop     de 
8bc4 e1			        pop     hl 
8bc5 c9			        ret 
8bc6			 
8bc6			 
8bc6			; randData here must be a 2 byte seed located in ram. While this is a fast generator, it's generally not considered very good in terms of randomness. 
8bc6			 
8bc6			 
8bc6			 
8bc6			;------LFSR------ 
8bc6			;James Montelongo 
8bc6			;optimized by Spencer Putt 
8bc6			;out: 
8bc6			; a = 8 bit random number 
8bc6			RandLFSR: 
8bc6 21 b1 eb		        ld hl,LFSRSeed+4 
8bc9 5e			        ld e,(hl) 
8bca 23			        inc hl 
8bcb 56			        ld d,(hl) 
8bcc 23			        inc hl 
8bcd 4e			        ld c,(hl) 
8bce 23			        inc hl 
8bcf 7e			        ld a,(hl) 
8bd0 47			        ld b,a 
8bd1 cb 13		        rl e  
8bd3 cb 12			rl d 
8bd5 cb 11		        rl c  
8bd7 17				rla 
8bd8 cb 13		        rl e  
8bda cb 12			rl d 
8bdc cb 11		        rl c  
8bde 17				rla 
8bdf cb 13		        rl e  
8be1 cb 12			rl d 
8be3 cb 11		        rl c  
8be5 17				rla 
8be6 67			        ld h,a 
8be7 cb 13		        rl e  
8be9 cb 12			rl d 
8beb cb 11		        rl c  
8bed 17				rla 
8bee a8			        xor b 
8bef cb 13		        rl e  
8bf1 cb 12			rl d 
8bf3 ac			        xor h 
8bf4 a9			        xor c 
8bf5 aa			        xor d 
8bf6 21 b3 eb		        ld hl,LFSRSeed+6 
8bf9 11 b4 eb		        ld de,LFSRSeed+7 
8bfc 01 07 00		        ld bc,7 
8bff ed b8		        lddr 
8c01 12			        ld (de),a 
8c02 c9			        ret 
8c03			 
8c03			;While this may produces better numbers, it is slower, larger and requires a bigger seed than ionrandom. Assuming theres is a good seed to start, it should generate ~2^56 bytes before repeating. However if there is not a good seed(0 for example), then the numbers created will not be adequate. Unlike Ionrandom and its use of the r register, starting with the same seed the same numbers will be generated. With Ionrandom the code running may have an impact on the number generated. This means this method requires more initialization. 
8c03			 
8c03			;You can initialize with TI-OS's seeds, stored at seed1 and seed2, both are ti-floats but will serve the purpose.  
8c03			 
8c03			 
8c03			;This is a very fast, quality pseudo-random number generator. It combines a 16-bit Linear Feedback Shift Register and a 16-bit LCG. 
8c03			 
8c03			prng16: 
8c03			;Inputs: 
8c03			;   (seed1) contains a 16-bit seed value 
8c03			;   (seed2) contains a NON-ZERO 16-bit seed value 
8c03			;Outputs: 
8c03			;   HL is the result 
8c03			;   BC is the result of the LCG, so not that great of quality 
8c03			;   DE is preserved 
8c03			;Destroys: 
8c03			;   AF 
8c03			;cycle: 4,294,901,760 (almost 4.3 billion) 
8c03			;160cc 
8c03			;26 bytes 
8c03 2a a5 eb		    ld hl,(seed1) 
8c06 44			    ld b,h 
8c07 4d			    ld c,l 
8c08 29			    add hl,hl 
8c09 29			    add hl,hl 
8c0a 2c			    inc l 
8c0b 09			    add hl,bc 
8c0c 22 a5 eb		    ld (seed1),hl 
8c0f 2a a3 eb		    ld hl,(seed2) 
8c12 29			    add hl,hl 
8c13 9f			    sbc a,a 
8c14 e6 2d		    and %00101101 
8c16 ad			    xor l 
8c17 6f			    ld l,a 
8c18 22 a3 eb		    ld (seed2),hl 
8c1b 09			    add hl,bc 
8c1c c9			    ret 
8c1d			 
8c1d			;On their own, LCGs and LFSRs don't produce great results and are generally very cyclical, but they are very fast to compute. The 16-bit LCG in the above example will bounce around and reach each number from 0 to 65535, but the lower bits are far more predictable than the upper bits. The LFSR mixes up the predictability of a given bit's state, but it hits every number except 0, meaning there is a slightly higher chance of any given bit in the result being a 1 instead of a 0. It turns out that by adding together the outputs of these two generators, we can lose the predictability of a bit's state, while ensuring it has a 50% chance of being 0 or 1. As well, since the periods, 65536 and 65535 are coprime, then the overall period of the generator is 65535*65536, which is over 4 billion.  
8c1d			 
8c1d			rand32: 
8c1d			;Inputs: 
8c1d			;   (seed1_0) holds the lower 16 bits of the first seed 
8c1d			;   (seed1_1) holds the upper 16 bits of the first seed 
8c1d			;   (seed2_0) holds the lower 16 bits of the second seed 
8c1d			;   (seed2_1) holds the upper 16 bits of the second seed 
8c1d			;   **NOTE: seed2 must be non-zero 
8c1d			;Outputs: 
8c1d			;   HL is the result 
8c1d			;   BC,DE can be used as lower quality values, but are not independent of HL. 
8c1d			;Destroys: 
8c1d			;   AF 
8c1d			;Tested and passes all CAcert tests 
8c1d			;Uses a very simple 32-bit LCG and 32-bit LFSR 
8c1d			;it has a period of 18,446,744,069,414,584,320 
8c1d			;roughly 18.4 quintillion. 
8c1d			;LFSR taps: 0,2,6,7  = 11000101 
8c1d			;291cc 
8c1d			;seed1_0=$+1 
8c1d			;    ld hl,12345 
8c1d			;seed1_1=$+1 
8c1d			;    ld de,6789 
8c1d			;    ld b,h 
8c1d			;    ld c,l 
8c1d			;    add hl,hl \ rl e \ rl d 
8c1d			;    add hl,hl \ rl e \ rl d 
8c1d			;    inc l 
8c1d			;    add hl,bc 
8c1d			;    ld (seed1_0),hl 
8c1d			;    ld hl,(seed1_1) 
8c1d			;    adc hl,de 
8c1d			;    ld (seed1_1),hl 
8c1d			;    ex de,hl 
8c1d			;seed2_0=$+1 
8c1d			;    ld hl,9876 
8c1d			;seed2_1=$+1 
8c1d			;    ld bc,54321 
8c1d			;    add hl,hl \ rl c \ rl b 
8c1d			;    ld (seed2_1),bc 
8c1d			;    sbc a,a 
8c1d			;    and %11000101 
8c1d			;    xor l 
8c1d			;    ld l,a 
8c1d			;    ld (seed2_0),hl 
8c1d			;    ex de,hl 
8c1d			;    add hl,bc 
8c1d			;    ret 
8c1d			; 
8c1d			 
8c1d			; 16-bit xorshift pseudorandom number generator by John Metcalf 
8c1d			; 20 bytes, 86 cycles (excluding ret) 
8c1d			 
8c1d			; returns   hl = pseudorandom number 
8c1d			; corrupts   a 
8c1d			 
8c1d			; generates 16-bit pseudorandom numbers with a period of 65535 
8c1d			; using the xorshift method: 
8c1d			 
8c1d			; hl ^= hl << 7 
8c1d			; hl ^= hl >> 9 
8c1d			; hl ^= hl << 8 
8c1d			 
8c1d			; some alternative shift triplets which also perform well are: 
8c1d			; 6, 7, 13; 7, 9, 13; 9, 7, 13. 
8c1d			 
8c1d			;  org 32768 
8c1d			 
8c1d			xrnd: 
8c1d 2a a9 eb		  ld hl,(xrandc)       ; seed must not be 0 
8c20 3e 00		  ld a,0 
8c22 bd			  cp l 
8c23 20 02		  jr nz, .xrnd1 
8c25 2e 01		  ld l, 1 
8c27			.xrnd1: 
8c27			 
8c27 7c			  ld a,h 
8c28 1f			  rra 
8c29 7d			  ld a,l 
8c2a 1f			  rra 
8c2b ac			  xor h 
8c2c 67			  ld h,a 
8c2d 7d			  ld a,l 
8c2e 1f			  rra 
8c2f 7c			  ld a,h 
8c30 1f			  rra 
8c31 ad			  xor l 
8c32 6f			  ld l,a 
8c33 ac			  xor h 
8c34 67			  ld h,a 
8c35			 
8c35 22 a9 eb		  ld (xrandc),hl 
8c38			 
8c38 c9			  ret 
8c39			;  
8c39			 
8c39			 
8c39			;;;; int maths 
8c39			 
8c39			; https://map.grauw.nl/articles/mult_div_shifts.php 
8c39			; Divide 16-bit values (with 16-bit result) 
8c39			; In: Divide BC by divider DE 
8c39			; Out: BC = result, HL = rest 
8c39			; 
8c39			Div16: 
8c39 21 00 00		    ld hl,0 
8c3c 78			    ld a,b 
8c3d 06 08		    ld b,8 
8c3f			Div16_Loop1: 
8c3f 17			    rla 
8c40 ed 6a		    adc hl,hl 
8c42 ed 52		    sbc hl,de 
8c44 30 01		    jr nc,Div16_NoAdd1 
8c46 19			    add hl,de 
8c47			Div16_NoAdd1: 
8c47 10 f6		    djnz Div16_Loop1 
8c49 17			    rla 
8c4a 2f			    cpl 
8c4b 47			    ld b,a 
8c4c 79			    ld a,c 
8c4d 48			    ld c,b 
8c4e 06 08		    ld b,8 
8c50			Div16_Loop2: 
8c50 17			    rla 
8c51 ed 6a		    adc hl,hl 
8c53 ed 52		    sbc hl,de 
8c55 30 01		    jr nc,Div16_NoAdd2 
8c57 19			    add hl,de 
8c58			Div16_NoAdd2: 
8c58 10 f6		    djnz Div16_Loop2 
8c5a 17			    rla 
8c5b 2f			    cpl 
8c5c 41			    ld b,c 
8c5d 4f			    ld c,a 
8c5e c9			ret 
8c5f			 
8c5f			 
8c5f			;http://z80-heaven.wikidot.com/math 
8c5f			; 
8c5f			;Inputs: 
8c5f			;     DE and A are factors 
8c5f			;Outputs: 
8c5f			;     A is not changed 
8c5f			;     B is 0 
8c5f			;     C is not changed 
8c5f			;     DE is not changed 
8c5f			;     HL is the product 
8c5f			;Time: 
8c5f			;     342+6x 
8c5f			; 
8c5f			Mult16: 
8c5f			 
8c5f 06 08		     ld b,8          ;7           7 
8c61 21 00 00		     ld hl,0         ;10         10 
8c64 29			       add hl,hl     ;11*8       88 
8c65 07			       rlca          ;4*8        32 
8c66 30 01		       jr nc,$+3     ;(12|18)*8  96+6x 
8c68 19			         add hl,de   ;--         -- 
8c69 10 f9		       djnz $-5      ;13*7+8     99 
8c6b c9			ret 
8c6c			 
8c6c			; 
8c6c			; Square root of 16-bit value 
8c6c			; In:  HL = value 
8c6c			; Out:  D = result (rounded down) 
8c6c			; 
8c6c			;Sqr16: 
8c6c			;    ld de,#0040 
8c6c			;    ld a,l 
8c6c			;    ld l,h 
8c6c			;    ld h,d 
8c6c			;    or a 
8c6c			;    ld b,8 
8c6c			;Sqr16_Loop: 
8c6c			;    sbc hl,de 
8c6c			;    jr nc,Sqr16_Skip 
8c6c			;    add hl,de 
8c6c			;Sqr16_Skip: 
8c6c			;    ccf 
8c6c			;    rl d 
8c6c			;    add a,a 
8c6c			;    adc hl,hl 
8c6c			;    add a,a 
8c6c			;    adc hl,hl 
8c6c			;    djnz Sqr16_Loop 
8c6c			;    ret 
8c6c			; 
8c6c			; 
8c6c			; Divide 8-bit values 
8c6c			; In: Divide E by divider C 
8c6c			; Out: A = result, B = rest 
8c6c			; 
8c6c			Div8: 
8c6c af			    xor a 
8c6d 06 08		    ld b,8 
8c6f			Div8_Loop: 
8c6f cb 13		    rl e 
8c71 17			    rla 
8c72 91			    sub c 
8c73 30 01		    jr nc,Div8_NoAdd 
8c75 81			    add a,c 
8c76			Div8_NoAdd: 
8c76 10 f7		    djnz Div8_Loop 
8c78 47			    ld b,a 
8c79 7b			    ld a,e 
8c7a 17			    rla 
8c7b 2f			    cpl 
8c7c c9			    ret 
8c7d			 
8c7d			; 
8c7d			; Multiply 8-bit value with a 16-bit value (unrolled) 
8c7d			; In: Multiply A with DE 
8c7d			; Out: HL = result 
8c7d			; 
8c7d			Mult12U: 
8c7d 2e 00		    ld l,0 
8c7f 87			    add a,a 
8c80 30 01		    jr nc,Mult12U_NoAdd0 
8c82 19			    add hl,de 
8c83			Mult12U_NoAdd0: 
8c83 29			    add hl,hl 
8c84 87			    add a,a 
8c85 30 01		    jr nc,Mult12U_NoAdd1 
8c87 19			    add hl,de 
8c88			Mult12U_NoAdd1: 
8c88 29			    add hl,hl 
8c89 87			    add a,a 
8c8a 30 01		    jr nc,Mult12U_NoAdd2 
8c8c 19			    add hl,de 
8c8d			Mult12U_NoAdd2: 
8c8d 29			    add hl,hl 
8c8e 87			    add a,a 
8c8f 30 01		    jr nc,Mult12U_NoAdd3 
8c91 19			    add hl,de 
8c92			Mult12U_NoAdd3: 
8c92 29			    add hl,hl 
8c93 87			    add a,a 
8c94 30 01		    jr nc,Mult12U_NoAdd4 
8c96 19			    add hl,de 
8c97			Mult12U_NoAdd4: 
8c97 29			    add hl,hl 
8c98 87			    add a,a 
8c99 30 01		    jr nc,Mult12U_NoAdd5 
8c9b 19			    add hl,de 
8c9c			Mult12U_NoAdd5: 
8c9c 29			    add hl,hl 
8c9d 87			    add a,a 
8c9e 30 01		    jr nc,Mult12U_NoAdd6 
8ca0 19			    add hl,de 
8ca1			Mult12U_NoAdd6: 
8ca1 29			    add hl,hl 
8ca2 87			    add a,a 
8ca3 d0			    ret nc 
8ca4 19			    add hl,de 
8ca5 c9			    ret 
8ca6			 
8ca6			; 
8ca6			; Multiply 8-bit value with a 16-bit value (right rotating) 
8ca6			; In: Multiply A with DE 
8ca6			;      Put lowest value in A for most efficient calculation 
8ca6			; Out: HL = result 
8ca6			; 
8ca6			Mult12R: 
8ca6 21 00 00		    ld hl,0 
8ca9			Mult12R_Loop: 
8ca9 cb 3f		    srl a 
8cab 30 01		    jr nc,Mult12R_NoAdd 
8cad 19			    add hl,de 
8cae			Mult12R_NoAdd: 
8cae cb 23		    sla e 
8cb0 cb 12		    rl d 
8cb2 b7			    or a 
8cb3 c2 a9 8c		    jp nz,Mult12R_Loop 
8cb6 c9			    ret 
8cb7			 
8cb7			; 
8cb7			; Multiply 16-bit values (with 32-bit result) 
8cb7			; In: Multiply BC with DE 
8cb7			; Out: BCHL = result 
8cb7			; 
8cb7			Mult32: 
8cb7 79			    ld a,c 
8cb8 48			    ld c,b 
8cb9 21 00 00		    ld hl,0 
8cbc 06 10		    ld b,16 
8cbe			Mult32_Loop: 
8cbe 29			    add hl,hl 
8cbf 17			    rla 
8cc0 cb 11		    rl c 
8cc2 30 07		    jr nc,Mult32_NoAdd 
8cc4 19			    add hl,de 
8cc5 ce 00		    adc a,0 
8cc7 d2 cb 8c		    jp nc,Mult32_NoAdd 
8cca 0c			    inc c 
8ccb			Mult32_NoAdd: 
8ccb 10 f1		    djnz Mult32_Loop 
8ccd 41			    ld b,c 
8cce 4f			    ld c,a 
8ccf c9			    ret 
8cd0			 
8cd0			 
8cd0			 
8cd0			; 
8cd0			; Multiply 8-bit values 
8cd0			; In:  Multiply H with E 
8cd0			; Out: HL = result 
8cd0			; 
8cd0			Mult8: 
8cd0 16 00		    ld d,0 
8cd2 6a			    ld l,d 
8cd3 06 08		    ld b,8 
8cd5			Mult8_Loop: 
8cd5 29			    add hl,hl 
8cd6 30 01		    jr nc,Mult8_NoAdd 
8cd8 19			    add hl,de 
8cd9			Mult8_NoAdd: 
8cd9 10 fa		    djnz Mult8_Loop 
8cdb c9			    ret 
8cdc			 
8cdc			 
8cdc			 
8cdc			 
8cdc			 
8cdc			 
8cdc			 
8cdc			 
8cdc			;;http://z80-heaven.wikidot.com/math 
8cdc			;;This divides DE by BC, storing the result in DE, remainder in HL 
8cdc			; 
8cdc			;DE_Div_BC:          ;1281-2x, x is at most 16 
8cdc			;     ld a,16        ;7 
8cdc			;     ld hl,0        ;10 
8cdc			;     jp $+5         ;10 
8cdc			;.DivLoop: 
8cdc			;       add hl,bc    ;-- 
8cdc			;       dec a        ;64 
8cdc			;       jr z,.DivLoopEnd        ;86 
8cdc			; 
8cdc			;       sla e        ;128 
8cdc			;       rl d         ;128 
8cdc			;       adc hl,hl    ;240 
8cdc			;       sbc hl,bc    ;240 
8cdc			;       jr nc,.DivLoop ;23|21 
8cdc			;       inc e        ;-- 
8cdc			;       jp .DivLoop+1 
8cdc			; 
8cdc			;.DivLoopEnd: 
8cdc			 
8cdc			;HL_Div_C: 
8cdc			;Inputs: 
8cdc			;     HL is the numerator 
8cdc			;     C is the denominator 
8cdc			;Outputs: 
8cdc			;     A is the remainder 
8cdc			;     B is 0 
8cdc			;     C is not changed 
8cdc			;     DE is not changed 
8cdc			;     HL is the quotient 
8cdc			; 
8cdc			;       ld b,16 
8cdc			;       xor a 
8cdc			;         add hl,hl 
8cdc			;         rla 
8cdc			;         cp c 
8cdc			;         jr c,$+4 
8cdc			;           inc l 
8cdc			;           sub c 
8cdc			;         djnz $-7 
8cdc			 
8cdc			; https://plutiedev.com/z80-add-8bit-to-16bit 
8cdc			 
8cdc			addatohl: 
8cdc 85			    add   a, l    ; A = A+L 
8cdd 6f			    ld    l, a    ; L = A+L 
8cde 8c			    adc   a, h    ; A = A+L+H+carry 
8cdf 95			    sub   l       ; A = H+carry 
8ce0 67			    ld    h, a    ; H = H+carry 
8ce1 c9			ret 
8ce2			 
8ce2			addatode: 
8ce2 83			    add   a, e    ; A = A+L 
8ce3 5f			    ld    e, a    ; L = A+L 
8ce4 8a			    adc   a, d    ; A = A+L+H+carry 
8ce5 93			    sub   e       ; A = H+carry 
8ce6 57			    ld    d, a    ; H = H+carry 
8ce7 c9			ret 
8ce8			 
8ce8			 
8ce8			addatobc: 
8ce8 81			    add   a, c    ; A = A+L 
8ce9 4f			    ld    c, a    ; L = A+L 
8cea 88			    adc   a, b    ; A = A+L+H+carry 
8ceb 91			    sub   c       ; A = H+carry 
8cec 47			    ld    b, a    ; H = H+carry 
8ced c9			ret 
8cee			 
8cee			subafromhl: 
8cee			   ; If A=0 do nothing 
8cee			    ; Otherwise flip A's sign. Since 
8cee			    ; the upper byte becomes -1, also 
8cee			    ; substract 1 from H. 
8cee ed 44		    neg 
8cf0 ca f9 8c		    jp    z, Skip 
8cf3 25			    dec   h 
8cf4			     
8cf4			    ; Now add the low byte as usual 
8cf4			    ; Two's complement takes care of 
8cf4			    ; ensuring the result is correct 
8cf4 85			    add   a, l 
8cf5 6f			    ld    l, a 
8cf6 8c			    adc   a, h 
8cf7 95			    sub   l 
8cf8 67			    ld    h, a 
8cf9			Skip: 
8cf9 c9				ret 
8cfa			 
8cfa			 
8cfa			; compare hl and de 
8cfa			; returns:  
8cfa			; if hl = de, z=1, s=0, c0=0 
8cfa			; if hl > de, z=0, s=0, c=0 
8cfa			; if hl < de, z=0, s=1, c=1 
8cfa			cmp16:	 
8cfa b7				or a 
8cfb ed 52			sbc hl,de 
8cfd e0				ret po 
8cfe 7c				ld a,h 
8cff 1f				rra 
8d00 ee 40			xor 01000000B 
8d02 37				scf 
8d03 8f				adc a,a 
8d04 c9				ret 
8d05			 
8d05			 
8d05			; test if hl contains zero   - A is destroyed 
8d05			 
8d05			ishlzero:    
8d05 b7				or a     ; reset flags 
8d06 7c				ld a, h 
8d07 b5				or l        	 
8d08			 
8d08 c9				ret 
8d09			 
8d09			 
8d09			 
8d09			 
8d09			if FORTH_ENABLE_FLOATMATH 
8d09			;include "float/bbcmath.z80" 
8d09			include "float/lpfpcalc.asm" 
8d09			endif 
8d09			 
8d09			 
8d09			; eof 
8d09			 
# End of file firmware_maths.asm
8d09			include "firmware_strings.asm"   ; string handling  
8d09			 
8d09			 
8d09			; TODO string len 
8d09			; input text string, end on cr with zero term 
8d09			; a offset into frame buffer to start prompt 
8d09			; d is max length 
8d09			; e is display size TODO 
8d09			; c is current cursor position 
8d09			; hl is ptr to where string will be stored 
8d09			 
8d09			 
8d09			; TODO check limit of buffer for new inserts 
8d09			; TODO check insert does not push beyond buffer 
8d09			; TODO scroll in a limited display area 
8d09			; TODO scroll whole screen on page wrap 
8d09			 
8d09			 
8d09			; TODO handle KEY_PREVWORD 
8d09			; TODO handle KEY_NEXTWORD 
8d09			; TODO handle KEY_HOME 
8d09			; TODO handle KEY_END 
8d09			; TODO use LCD cursor? 
8d09			 
8d09 32 64 ee		input_str:    	ld (input_at_pos),a      ; save display position to start 
8d0c 81					add c 
8d0d 32 62 ee				ld (input_at_cursor),a	; save draw pos of cursor 
8d10 22 67 ee				ld (input_start), hl     ; save ptr to buffer 
8d13 79					ld a, c 
8d14 cd dc 8c				call addatohl 
8d17 22 69 ee				ld (input_ptr), hl     ; save ptr to point under the cursor 
8d1a 7a					ld a,d 
8d1b 32 66 ee			        ld (input_size), a       ; save length of input area 
8d1e 79					ld a, c 
8d1f 32 55 ee				ld (input_cursor),a      ; init cursor start position  
8d22 7b					ld a,e 
8d23 32 65 ee			        ld (input_display_size), a       ; save length of input area that is displayed TODO 
8d26					 
8d26					 
8d26			 
8d26			;		ld a,(input_ptr) 
8d26			;		ld (input_under_cursor),a 	; save what is under the cursor 
8d26			 
8d26			; TODO move out to cin as cursor shape is used by the 4x4 ??? 
8d26					; init cursor shape if not set by the cin routines 
8d26 21 c1 eb				ld hl, cursor_shape 
8d29 3e ff				ld a, 255 
8d2b 77					ld (hl), a 
8d2c 23					inc hl 
8d2d 3e 00				ld a, 0 
8d2f 77					ld (hl), a 
8d30			 
8d30 3e 0f				ld a, CUR_BLINK_RATE 
8d32 32 60 ee				ld (input_cur_flash), a 
8d35 3e 01				ld a, 1 
8d37 32 5f ee				ld (input_cur_onoff),a 
8d3a			 
8d3a			;	if DEBUG_INPUT 
8d3a			;		push af 
8d3a			;		ld a, 'I' 
8d3a			;		ld (debug_mark),a 
8d3a			;		pop af 
8d3a			;		CALLMONITOR 
8d3a			;	endif 
8d3a			.is1:		; main entry loop 
8d3a			 
8d3a			 
8d3a			 
8d3a					; pause 1ms 
8d3a			 
8d3a 3e 01				ld a, 1 
8d3c cd d7 89				call aDelayInMS 
8d3f			 
8d3f					; dec flash counter 
8d3f 3a 60 ee				ld a, (input_cur_flash) 
8d42 3d					dec a 
8d43 32 60 ee				ld (input_cur_flash), a 
8d46 fe 00				cp 0 
8d48 20 0d				jr nz, .nochgstate 
8d4a			 
8d4a			 
8d4a					; change state 
8d4a 3a 5f ee				ld a,(input_cur_onoff) 
8d4d ed 44				neg 
8d4f 32 5f ee				ld (input_cur_onoff),a 
8d52			 
8d52			 
8d52					; reset on change of state 
8d52 3e 0f				ld a, CUR_BLINK_RATE 
8d54 32 60 ee				ld (input_cur_flash), a 
8d57			 
8d57			.nochgstate: 
8d57					 
8d57					 
8d57			 
8d57					; display cursor  
8d57			 
8d57			;		ld hl, (input_start) 
8d57			;		ld a, (input_cursor) 
8d57			;		call addatohl 
8d57			 
8d57					; get char under cursor and replace with cursor 
8d57 2a 69 ee		ld hl, (input_ptr) 
8d5a			;		ld a, (hl) 
8d5a			;		ld (input_under_cursor),a 
8d5a			;		ld a, '_' 
8d5a			;		ld (hl), a 
8d5a			 
8d5a					; display string 
8d5a			 
8d5a ed 5b 67 ee			ld de, (input_start) 
8d5e 3a 64 ee				ld a, (input_at_pos) 
8d61 cd c2 8a				call str_at_display 
8d64			;	        call update_display 
8d64			 
8d64					; find place to put the cursor 
8d64			;		add h 
8d64			;		ld l, display_row_1 
8d64			;		sub l 
8d64			; (input_at_pos) 
8d64					;ld c, a 
8d64			;		ld a, (input_cursor) 
8d64			;		ld l, (input_at_pos) 
8d64			;		;ld b, h 
8d64			;		add l 
8d64			;		ld (input_at_cursor),a 
8d64					;ld l,h 
8d64			 
8d64			;		ld h, 0 
8d64			;		ld l,(input_at_pos) 
8d64			;		ld a, (input_cursor) 
8d64			;		call addatohl 
8d64			;		ld a, 074H-19			; TODO BUG I dont know why offset is showing 74H 
8d64			;		call subafromhl 
8d64			;		ld a,l 
8d64			;		ld (input_at_cursor), a 
8d64			 
8d64				if DEBUG_INPUT 
8d64					ld a, (hardware_diag) 
8d64					cp 0 
8d64					jr z, .skip_input_diag 
8d64			 
8d64					ld a,(input_at_pos) 
8d64					ld hl, LFSRSeed 
8d64					call hexout 
8d64					ld a, (input_cursor) 
8d64					ld hl, LFSRSeed+2 
8d64					call hexout 
8d64					ld a,(input_at_cursor) 
8d64					ld hl, LFSRSeed+4 
8d64					call hexout 
8d64			 
8d64					ld a,(input_cur_onoff) 
8d64					ld hl, LFSRSeed+6 
8d64					call hexout 
8d64			 
8d64					ld a,(input_cur_flash) 
8d64					ld hl, LFSRSeed+8 
8d64					call hexout 
8d64			 
8d64					ld a,(input_len) 
8d64					ld hl, LFSRSeed+10 
8d64					call hexout 
8d64					ld hl, LFSRSeed+12 
8d64					ld a, 0 
8d64					ld (hl),a 
8d64					ld a, display_row_4 
8d64					ld de, LFSRSeed 
8d64					call str_at_display 
8d64					.skip_input_diag: 
8d64				endif 
8d64			 
8d64					; decide on if we are showing the cursor this time round 
8d64			 
8d64 3a 5f ee				ld a, (input_cur_onoff) 
8d67 fe ff				cp 255 
8d69 28 13				jr z, .skipcur 
8d6b			 
8d6b			 
8d6b 3a 62 ee				ld a,(input_at_cursor) 
8d6e 11 c1 eb				ld de, cursor_shape 
8d71 cd c2 8a				call str_at_display 
8d74			 
8d74					; save length of current input string 
8d74 2a 67 ee				ld hl, (input_start) 
8d77 cd 3a 91				call strlenz 
8d7a 7d					ld a,l 
8d7b 32 5a ee				ld (input_len),a 
8d7e			 
8d7e			.skipcur: 
8d7e			 
8d7e cd d2 8a			        call update_display 
8d81					 
8d81			 
8d81			 
8d81					; wait 
8d81				 
8d81					; TODO loop without wait to flash the cursor and char under cursor	 
8d81 cd 1e e4				call cin    ; _wait 
8d84			 
8d84 fe 00				cp 0 
8d86 ca 3a 8d				jp z, .is1 
8d89			 
8d89					; get ptr to char to input into 
8d89			 
8d89 4f					ld c,a 
8d8a 2a 67 ee				ld hl, (input_start) 
8d8d 3a 55 ee				ld a, (input_cursor) 
8d90 cd dc 8c				call addatohl 
8d93 22 69 ee				ld (input_ptr), hl 
8d96 79					ld a,c 
8d97			 
8d97					; replace char under cursor 
8d97			 
8d97			;		ld hl, (input_ptr) 
8d97			;		ld a, (input_under_cursor) 	; get what is under the cursor 
8d97			;		ld (hl), a 
8d97			 
8d97			;	if DEBUG_INPUT 
8d97			;		push af 
8d97			;		ld a, 'i' 
8d97			;		ld (debug_mark),a 
8d97			;		pop af 
8d97			;		CALLMONITOR 
8d97			;	endif 
8d97 fe 0e				cp KEY_HOME 
8d99 20 0e				jr nz, .iske 
8d9b			 
8d9b 3a 64 ee				ld a, (input_at_pos) 
8d9e 32 62 ee				ld (input_at_cursor),a 
8da1 3e 00				ld a, 0 
8da3 32 55 ee				ld (input_cursor), a 
8da6 c3 3a 8d				jp .is1 
8da9					 
8da9 fe 0f		.iske:		cp KEY_END 
8dab 20 03				jr nz, .isknw 
8dad c3 3a 8d				jp .is1 
8db0			 
8db0 fe 06		.isknw:		cp KEY_NEXTWORD 
8db2 20 1b				jr nz, .iskpw 
8db4			 
8db4 2a 69 ee		.isknwm:	ld hl, (input_ptr) 
8db7 7e					ld a,(hl)	 
8db8 fe 00				cp 0 
8dba ca 3a 8d				jp z, .is1    ; end of string 
8dbd fe 20				cp ' ' 
8dbf ca 3a 8d				jp z, .is1    ; end of word 
8dc2 23					inc hl 
8dc3 22 69 ee				ld (input_ptr), hl 
8dc6 3a 62 ee				ld a, (input_at_cursor) 
8dc9 3c					inc a 
8dca 32 62 ee				ld (input_at_cursor), a 
8dcd 18 e5				jr .isknwm 
8dcf			 
8dcf fe 07		.iskpw:		cp KEY_PREVWORD 
8dd1 20 1b				jr nz, .iskl 
8dd3			.iskpwm:	 
8dd3 2a 69 ee				ld hl, (input_ptr) 
8dd6 7e					ld a,(hl)	 
8dd7 fe 00				cp 0  
8dd9 ca 3a 8d				jp z, .is1    ; end of string 
8ddc fe 20				cp ' ' 
8dde ca 3a 8d				jp z, .is1    ; end of word 
8de1 2b					dec hl 
8de2 22 69 ee				ld (input_ptr), hl 
8de5 3a 62 ee				ld a, (input_at_cursor) 
8de8 3d					dec a 
8de9 32 62 ee				ld (input_at_cursor), a 
8dec 18 e5				jr .iskpwm 
8dee			 
8dee			 
8dee fe 0b		.iskl:		cp KEY_LEFT 
8df0 20 27				jr nz, .isk1 
8df2			 
8df2 3a 55 ee				ld a, (input_cursor) 
8df5			 
8df5 fe 00				cp 0 
8df7 ca 3a 8d				jp z, .is1 		; at start of line to ignore  
8dfa			 
8dfa 3d					dec  a 		; TODO check underflow 
8dfb 32 55 ee				ld (input_cursor), a 
8dfe			 
8dfe 2a 69 ee				ld hl, (input_ptr) 
8e01 2b					dec hl 
8e02 22 69 ee				ld (input_ptr), hl 
8e05					 
8e05 3a 62 ee				ld a, (input_at_cursor) 
8e08 3d					dec a 
8e09 32 62 ee				ld (input_at_cursor), a 
8e0c			 
8e0c 3e 01				ld a, 1		; show cursor moving 
8e0e 32 5f ee				ld (input_cur_onoff),a 
8e11 3e 0f				ld a, CUR_BLINK_RATE 
8e13 32 60 ee				ld (input_cur_flash), a 
8e16			 
8e16 c3 3a 8d				jp .is1 
8e19			 
8e19 fe 0c		.isk1:		cp KEY_RIGHT 
8e1b 20 2a				jr nz, .isk2 
8e1d			 
8e1d 3a 5a ee				ld a,(input_len)		; TODO BUG why cant i load e direct? 
8e20 5f					ld e,a 
8e21 3a 55 ee				ld a, (input_cursor) 
8e24 bb					cp e 
8e25 ca 3a 8d				jp z, .is1		; at the end of string so dont go right 
8e28			 
8e28 3c					inc  a 		; TODO check overflow 
8e29 32 55 ee				ld (input_cursor), a 
8e2c			 
8e2c 3a 62 ee				ld a, (input_at_cursor) 
8e2f 3c					inc a 
8e30 32 62 ee				ld (input_at_cursor), a 
8e33			 
8e33 2a 69 ee				ld hl, (input_ptr) 
8e36 23					inc hl 
8e37 22 69 ee				ld (input_ptr), hl 
8e3a			 
8e3a 3e 01				ld a, 1		; show cursor moving 
8e3c 32 5f ee				ld (input_cur_onoff),a 
8e3f 3e 0f				ld a, CUR_BLINK_RATE 
8e41 32 60 ee				ld (input_cur_flash), a 
8e44			 
8e44 c3 3a 8d				jp .is1 
8e47			 
8e47 fe 05		.isk2:		cp KEY_UP 
8e49			 
8e49 20 26				jr nz, .isk3 
8e4b			 
8e4b					; swap last command with the current on 
8e4b			 
8e4b					; move cursor to start of string 
8e4b 2a 67 ee				ld hl, (input_start) 
8e4e 22 69 ee				ld (input_ptr), hl 
8e51			 
8e51 3a 64 ee				ld a, (input_at_pos) 
8e54 32 62 ee				ld (input_at_cursor), a 
8e57			 
8e57 3e 00				ld a, 0 
8e59 32 55 ee				ld (input_cursor), a 
8e5c					 
8e5c					; swap input and last command buffers 
8e5c			 
8e5c 21 e8 e5				ld hl, os_cli_cmd 
8e5f 11 e7 e6				ld de, os_last_cmd 
8e62 06 ff				ld b, 255 
8e64 7e			.swap1:		ld a, (hl) 
8e65 4f					ld c,a 
8e66 1a					ld a, (de) 
8e67 77					ld (hl), a 
8e68 79					ld a,c 
8e69 12					ld (de),a 
8e6a 23					inc hl 
8e6b 13					inc de 
8e6c 10 f6				djnz .swap1 
8e6e			 
8e6e			 
8e6e			 
8e6e			 
8e6e			 
8e6e c3 3a 8d				jp .is1 
8e71			 
8e71 fe 08		.isk3:		cp KEY_BS 
8e73 20 3c				jr nz, .isk4 
8e75			 
8e75 3a 55 ee				ld a, (input_cursor) 
8e78			 
8e78 fe 00				cp 0 
8e7a ca 3a 8d				jp z, .is1 		; at start of line to ignore  
8e7d			 
8e7d 3d					dec  a 		; TODO check underflow 
8e7e 32 55 ee				ld (input_cursor), a 
8e81			 
8e81					; hl is source 
8e81					; de needs to be source - 1 
8e81			 
8e81			;		ld a, 0 
8e81			;		dec hl 
8e81			;		ld (hl), a 
8e81			 
8e81 2a 69 ee				ld hl, (input_ptr) 
8e84 2b					dec hl 
8e85 22 69 ee				ld (input_ptr), hl 
8e88			 
8e88					; shift all data 
8e88			 
8e88 e5					push hl 
8e89 23					inc hl 
8e8a d1					pop de 
8e8b 3a 5a ee				ld a, (input_len)		; TODO BUG WAS ld c, (input... 
8e8e 4f					ld c,a 
8e8f 06 00				ld b,0 
8e91 ed b0				ldir  
8e93			 
8e93			 
8e93			 
8e93			 
8e93 3a 62 ee				ld a, (input_at_cursor) 
8e96 3d					dec a 
8e97 32 62 ee				ld (input_at_cursor), a 
8e9a			 
8e9a			 
8e9a 3e 01				ld a, 1		; show cursor moving 
8e9c 32 5f ee				ld (input_cur_onoff),a 
8e9f 3e 0f				ld a, CUR_BLINK_RATE 
8ea1 32 60 ee				ld (input_cur_flash), a 
8ea4			 
8ea4					; remove char 
8ea4 3a 62 ee				ld a, (input_at_cursor) 
8ea7 3c					inc a 
8ea8 11 32 8f				ld de,.iblank 
8eab cd c2 8a				call str_at_display 
8eae			 
8eae c3 3a 8d				jp .is1 
8eb1			 
8eb1 fe 0d		.isk4:		cp KEY_CR 
8eb3 28 6c				jr z, .endinput 
8eb5			 
8eb5					; else add the key press to the end 
8eb5			 
8eb5 4f					ld c, a			; save key pressed 
8eb6			 
8eb6 7e					ld a,(hl)		; get what is currently under char 
8eb7			 
8eb7 fe 00				cp 0			; we are at the end of the string 
8eb9 20 2f				jr nz, .onchar 
8ebb					 
8ebb					; add a char to the end of the string 
8ebb				 
8ebb 71					ld (hl),c 
8ebc 23					inc hl 
8ebd			;		ld a,' ' 
8ebd			;		ld (hl),a 
8ebd			;		inc hl 
8ebd 3e 00				ld a,0 
8ebf 77					ld (hl),a 
8ec0 2b					dec hl 
8ec1			 
8ec1 3a 55 ee				ld a, (input_cursor) 
8ec4 3c					inc a				; TODO check max string length and scroll  
8ec5 32 55 ee				ld (input_cursor), a		; inc cursor pos 
8ec8							 
8ec8 3a 62 ee				ld a, (input_at_cursor) 
8ecb 3c					inc a 
8ecc 32 62 ee				ld (input_at_cursor), a 
8ecf			 
8ecf 2a 69 ee				ld hl, (input_ptr) 
8ed2 23					inc hl 
8ed3 22 69 ee				ld (input_ptr), hl 
8ed6			 
8ed6 2a 69 ee				ld hl, (input_ptr) 
8ed9 23					inc hl 
8eda 22 69 ee				ld (input_ptr), hl 
8edd			;	if DEBUG_INPUT 
8edd			;		push af 
8edd			;		ld a, '+' 
8edd			;		ld (debug_mark),a 
8edd			;		pop af 
8edd			;		CALLMONITOR 
8edd			;	endif 
8edd 3e 01				ld a, 1		; show cursor moving 
8edf 32 5f ee				ld (input_cur_onoff),a 
8ee2 3e 0f				ld a, CUR_BLINK_RATE 
8ee4 32 60 ee				ld (input_cur_flash), a 
8ee7 c3 3a 8d				jp .is1 
8eea					 
8eea			 
8eea			 
8eea					; if on a char then insert 
8eea			.onchar: 
8eea			 
8eea					; TODO over flow check: make sure insert does not blow out buffer 
8eea			 
8eea					; need to do some maths to use lddr 
8eea			 
8eea e5					push hl   ; save char pos 
8eeb c5					push bc 
8eec			 
8eec 2a 67 ee				ld hl, (input_start) 
8eef 3a 5a ee				ld a, (input_len) 
8ef2 cd dc 8c				call addatohl  		; end of string 
8ef5 23					inc hl 
8ef6 23					inc hl		; past zero term 
8ef7 e5					push hl 
8ef8 23					inc hl 
8ef9 e5					push hl  
8efa			 
8efa								; start and end of lddr set, now how much to move? 
8efa			 
8efa							 
8efa 3a 55 ee				ld a, (input_cursor)		; BUG TODO why cant i load directly into b??? 
8efd 47					ld b,a 
8efe 3a 5a ee				ld a,(input_len) 
8f01 5f					ld e,a 
8f02 90					sub b 
8f03 3c					inc a		;?? 
8f04 3c					inc a		;?? 
8f05 3c					inc a		;?? 
8f06			 
8f06 06 00				ld b,0 
8f08 4f					ld c,a 
8f09			 
8f09				if DEBUG_INPUT 
8f09					push af 
8f09					ld a, 'i' 
8f09					ld (debug_mark),a 
8f09					pop af 
8f09			;		CALLMONITOR 
8f09				endif 
8f09 d1					pop de 
8f0a e1					pop hl 
8f0b				if DEBUG_INPUT 
8f0b					push af 
8f0b					ld a, 'I' 
8f0b					ld (debug_mark),a 
8f0b					pop af 
8f0b			;		CALLMONITOR 
8f0b				endif 
8f0b ed b8				lddr 
8f0d				 
8f0d			 
8f0d			 
8f0d					; TODO have a key for insert/overwrite mode???? 
8f0d c1					pop bc 
8f0e e1					pop hl 
8f0f 71					ld (hl), c		; otherwise overwrite current char 
8f10					 
8f10			 
8f10			 
8f10			 
8f10 3a 55 ee				ld a, (input_cursor) 
8f13 3c					inc  a 		; TODO check overflow 
8f14 32 55 ee				ld (input_cursor), a 
8f17			 
8f17 3a 62 ee				ld a, (input_at_cursor) 
8f1a 3c					inc a 
8f1b 32 62 ee				ld (input_at_cursor), a 
8f1e			 
8f1e c3 3a 8d				jp .is1 
8f21			 
8f21			.endinput:	; TODO look for end of string 
8f21			 
8f21					; add trailing space for end of token 
8f21			 
8f21 2a 67 ee				ld hl, (input_start) 
8f24 3a 5a ee				ld a,(input_len) 
8f27 cd dc 8c				call addatohl 
8f2a 3e 20				ld a, ' ' 
8f2c 77					ld (hl),a 
8f2d					; TODO eof of parse marker 
8f2d			 
8f2d 23					inc hl 
8f2e 3e 00				ld a, 0 
8f30 77					ld (hl),a 
8f31			 
8f31			 
8f31 c9					ret 
8f32			 
8f32 .. 00		.iblank: db " ",0 
8f34			 
8f34			 
8f34 32 64 ee		input_str_prev:	ld (input_at_pos), a 
8f37 22 67 ee				ld (input_start), hl 
8f3a 3e 01				ld a,1			; add cursor 
8f3c 77					ld (hl),a 
8f3d 23					inc hl 
8f3e 3e 00				ld a,0 
8f40 77					ld (hl),a 
8f41 22 69 ee				ld (input_ptr), hl 
8f44 7a					ld a,d 
8f45 32 66 ee				ld (input_size), a 
8f48 3e 00				ld a,0 
8f4a 32 55 ee				ld (input_cursor),a 
8f4d			.instr1:	 
8f4d			 
8f4d					; TODO do block cursor 
8f4d					; TODO switch cursor depending on the modifer key 
8f4d			 
8f4d					; update cursor shape change on key hold 
8f4d			 
8f4d 2a 69 ee				ld hl, (input_ptr) 
8f50 2b					dec hl 
8f51 3a c1 eb				ld a,(cursor_shape) 
8f54 77					ld (hl), a 
8f55			 
8f55					; display entered text 
8f55 3a 64 ee				ld a,(input_at_pos) 
8f58 cd 7c e3		            	CALL fLCD_Pos       ;Position cursor to location in A 
8f5b ed 5b 67 ee	            	LD   de, (input_start) 
8f5f cd 76 e3		            	CALL fLCD_Str       ;Display string pointed to by DE 
8f62			 
8f62 cd 1e e4				call cin 
8f65 fe 00				cp 0 
8f67 28 e4				jr z, .instr1 
8f69			 
8f69					; proecess keyboard controls first 
8f69			 
8f69 2a 69 ee				ld hl,(input_ptr) 
8f6c			 
8f6c fe 0d				cp KEY_CR	 ; pressing enter ends input 
8f6e 28 5a				jr z, .instrcr 
8f70			 
8f70 fe 08				cp KEY_BS 	; back space 
8f72 20 0f				jr nz, .instr2 
8f74					; process back space 
8f74			 
8f74					; TODO stop back space if at start of string 
8f74 2b					dec hl 
8f75 2b					dec hl ; to over write cursor 
8f76 3a c1 eb				ld a,(cursor_shape) 
8f79					;ld a,0 
8f79 77					ld (hl),a 
8f7a 23					inc hl 
8f7b 3e 20				ld a," " 
8f7d 77					ld (hl),a 
8f7e 22 69 ee				ld (input_ptr),hl 
8f81					 
8f81			 
8f81 18 ca				jr .instr1 
8f83			 
8f83 fe 0b		.instr2:	cp KEY_LEFT    ; cursor left 
8f85 20 06				jr nz, .instr3 
8f87 2b					dec hl 
8f88 22 69 ee				ld (input_ptr),hl 
8f8b 18 c0				jr .instr1 
8f8d				 
8f8d fe 0c		.instr3:	cp KEY_RIGHT ; cursor right 
8f8f 20 06				jr nz, .instr4 
8f91 23					inc hl 
8f92 22 69 ee				ld (input_ptr),hl 
8f95 18 b6				jr .instr1 
8f97			 
8f97 fe 0e		.instr4:	cp KEY_HOME    ; jump to start of line 
8f99 20 06				jr nz, .instr5 
8f9b 2b					dec hl 
8f9c 22 69 ee				ld (input_ptr),hl 
8f9f 18 ac				jr .instr1 
8fa1			 
8fa1 fe 0f		.instr5:	cp KEY_END     ; jump to end of line 
8fa3 20 06				jr nz, .instr6 
8fa5 2b					dec hl 
8fa6 22 69 ee				ld (input_ptr),hl 
8fa9 18 a2				jr .instr1 
8fab fe 05		.instr6:        cp KEY_UP      ; recall last command 
8fad 20 0b				jr nz, .instrnew 
8faf			 
8faf 21 c1 e2			ld hl, scratch 
8fb2 11 e7 e6			ld de, os_last_cmd 
8fb5 cd d3 8f			call strcpy 
8fb8 18 93				jr .instr1 
8fba			 
8fba			 
8fba			.instrnew:	; no special key pressed to see if we have room to store it 
8fba			 
8fba					; TODO do string size test 
8fba			 
8fba 2b					dec hl ; to over write cursor 
8fbb 77					ld (hl),a 
8fbc 23					inc hl 
8fbd 3a c1 eb				ld a,(cursor_shape) 
8fc0 77					ld (hl),a 
8fc1 23					inc hl 
8fc2 3e 00				ld a,0 
8fc4 77					ld (hl),a 
8fc5			 
8fc5 22 69 ee				ld (input_ptr),hl 
8fc8					 
8fc8 18 83				jr .instr1 
8fca 2b			.instrcr:	dec hl		; remove cursor 
8fcb 3e 20				ld a,' '	; TODO add a trailing space for safety 
8fcd 77					ld (hl),a 
8fce 23					inc hl 
8fcf 3e 00				ld a,0 
8fd1 77					ld (hl),a 
8fd2			 
8fd2			 
8fd2					; if at end of line scroll up    
8fd2					; TODO detecting only end of line 4 for scroll up  
8fd2			 
8fd2					;ld   
8fd2			 
8fd2 c9					ret 
8fd3			 
8fd3			 
8fd3			; strcpy hl = dest, de source 
8fd3			 
8fd3 1a			strcpy:   LD   A, (DE)        ;Get character from string 
8fd4 b7			            OR   A              ;Null terminator? 
8fd5 c8			            RET  Z              ;Yes, so finished 
8fd6 1a					ld a,(de) 
8fd7 77					ld (hl),a 
8fd8 13			            INC  DE             ;Point to next character 
8fd9 23					inc hl 
8fda 18 f7		            JR   strcpy       ;Repeat 
8fdc c9					ret 
8fdd			 
8fdd			 
8fdd			; TODO string_at  
8fdd			; pass string which starts with lcd offset address and then null term string 
8fdd			 
8fdd			; TODO string to dec 
8fdd			; TODO string to hex 
8fdd			; TODO byte to string hex 
8fdd			; TODO byte to string dec 
8fdd			 
8fdd			 
8fdd			 
8fdd			; from z80uartmonitor 
8fdd			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
8fdd			; OUTPUT VALUE OF A IN HEX ONE NYBBLE AT A TIME 
8fdd			; pass hl for where to put the text 
8fdd			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
8fdd c5			hexout:	PUSH BC 
8fde f5					PUSH AF 
8fdf 47					LD B, A 
8fe0					; Upper nybble 
8fe0 cb 3f				SRL A 
8fe2 cb 3f				SRL A 
8fe4 cb 3f				SRL A 
8fe6 cb 3f				SRL A 
8fe8 cd f8 8f				CALL tohex 
8feb 77					ld (hl),a 
8fec 23					inc hl	 
8fed					 
8fed					; Lower nybble 
8fed 78					LD A, B 
8fee e6 0f				AND 0FH 
8ff0 cd f8 8f				CALL tohex 
8ff3 77					ld (hl),a 
8ff4 23					inc hl	 
8ff5					 
8ff5 f1					POP AF 
8ff6 c1					POP BC 
8ff7 c9					RET 
8ff8					 
8ff8			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
8ff8			; TRANSLATE value in lower A TO 2 HEX CHAR CODES FOR DISPLAY 
8ff8			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
8ff8			tohex: 
8ff8 e5					PUSH HL 
8ff9 d5					PUSH DE 
8ffa 16 00				LD D, 0 
8ffc 5f					LD E, A 
8ffd 21 05 90				LD HL, .DATA 
9000 19					ADD HL, DE 
9001 7e					LD A, (HL) 
9002 d1					POP DE 
9003 e1					POP HL 
9004 c9					RET 
9005			 
9005			.DATA: 
9005 30					DEFB	30h	; 0 
9006 31					DEFB	31h	; 1 
9007 32					DEFB	32h	; 2 
9008 33					DEFB	33h	; 3 
9009 34					DEFB	34h	; 4 
900a 35					DEFB	35h	; 5 
900b 36					DEFB	36h	; 6 
900c 37					DEFB	37h	; 7 
900d 38					DEFB	38h	; 8 
900e 39					DEFB	39h	; 9 
900f 41					DEFB	41h	; A 
9010 42					DEFB	42h	; B 
9011 43					DEFB	43h	; C 
9012 44					DEFB	44h	; D 
9013 45					DEFB	45h	; E 
9014 46					DEFB	46h	; F 
9015			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
9015			;; 	ASCII char code for 0-9,A-F in A to single hex digit 
9015			;;    subtract $30, if result > 9 then subtract $7 more 
9015			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
9015			atohex: 
9015 d6 30				SUB $30 
9017 fe 0a				CP 10 
9019 f8					RET M		; If result negative it was 0-9 so we're done 
901a d6 07				SUB $7		; otherwise, subtract $7 more to get to $0A-$0F 
901c c9					RET		 
901d			 
901d			 
901d			 
901d			 
901d			; Get 2 ASCII characters as hex byte from pointer in hl 
901d			 
901d			BYTERD: 
901d 16 00			LD	D,00h		;Set up 
901f cd 27 90			CALL	HEXCON		;Get byte and convert to hex 
9022 87				ADD	A,A		;First nibble so 
9023 87				ADD	A,A		;multiply by 16 
9024 87				ADD	A,A		; 
9025 87				ADD	A,A		; 
9026 57				LD	D,A		;Save hi nibble in D 
9027			HEXCON: 
9027 7e				ld a, (hl)		;Get next chr 
9028 23				inc hl 
9029 d6 30			SUB	030h		;Makes '0'-'9' equal 0-9 
902b fe 0a			CP	00Ah		;Is it 0-9 ? 
902d 38 02			JR	C,NALPHA	;If so miss next bit 
902f d6 07			SUB	007h		;Else convert alpha 
9031			NALPHA: 
9031 b2				OR	D		;Add hi nibble back 
9032 c9				RET			; 
9033			 
9033			 
9033			; 
9033			; Get a word (16 bit) in hexadecimal notation. The result is returned in HL. 
9033			; Since the routines get_byte and therefore get_nibble are called, only valid 
9033			; characters (0-9a-f) are accepted. 
9033			; 
9033			;get_word        push    af 
9033			;                call    get_byte        ; Get the upper byte 
9033			;                ld      h, a 
9033			;                call    get_byte        ; Get the lower byte 
9033			;                ld      l, a 
9033			;                pop     af 
9033			;                ret 
9033			; 
9033			; Get a byte in hexadecimal notation. The result is returned in A. Since 
9033			; the routine get_nibble is used only valid characters are accepted - the  
9033			; input routine only accepts characters 0-9a-f. 
9033			; 
9033 c5			get_byte:        push    bc              ; Save contents of B (and C) 
9034 7e					ld a,(hl) 
9035 23					inc hl 
9036 cd 5b 90		                call    nibble2val      ; Get upper nibble 
9039 cb 07		                rlc     a 
903b cb 07		                rlc     a 
903d cb 07		                rlc     a 
903f cb 07		                rlc     a 
9041 47			                ld      b, a            ; Save upper four bits 
9042 7e					ld a,(hl) 
9043 cd 5b 90		                call    nibble2val      ; Get lower nibble 
9046 b0			                or      b               ; Combine both nibbles 
9047 c1			                pop     bc              ; Restore B (and C) 
9048 c9			                ret 
9049			; 
9049			; Get a hexadecimal digit from the serial line. This routine blocks until 
9049			; a valid character (0-9a-f) has been entered. A valid digit will be echoed 
9049			; to the serial line interface. The lower 4 bits of A contain the value of  
9049			; that particular digit. 
9049			; 
9049			;get_nibble      ld a,(hl)           ; Read a character 
9049			;                call    to_upper        ; Convert to upper case 
9049			;                call    is_hex          ; Was it a hex digit? 
9049			;                jr      nc, get_nibble  ; No, get another character 
9049			 ;               call    nibble2val      ; Convert nibble to value 
9049			 ;               call    print_nibble 
9049			 ;               ret 
9049			; 
9049			; is_hex checks a character stored in A for being a valid hexadecimal digit. 
9049			; A valid hexadecimal digit is denoted by a set C flag. 
9049			; 
9049			;is_hex          cp      'F' + 1         ; Greater than 'F'? 
9049			;                ret     nc              ; Yes 
9049			;                cp      '0'             ; Less than '0'? 
9049			;                jr      nc, is_hex_1    ; No, continue 
9049			;                ccf                     ; Complement carry (i.e. clear it) 
9049			;                ret 
9049			;is_hex_1        cp      '9' + 1         ; Less or equal '9*? 
9049			;                ret     c               ; Yes 
9049			;                cp      'A'             ; Less than 'A'? 
9049			;                jr      nc, is_hex_2    ; No, continue 
9049			;                ccf                     ; Yes - clear carry and return 
9049			;                ret 
9049			;is_hex_2        scf                     ; Set carry 
9049			;                ret 
9049			; 
9049			; Convert a single character contained in A to upper case: 
9049			; 
9049 fe 61		to_upper:        cp      'a'             ; Nothing to do if not lower case 
904b d8			                ret     c 
904c fe 7b		                cp      'z' + 1         ; > 'z'? 
904e d0			                ret     nc              ; Nothing to do, either 
904f e6 5f		                and     $5f             ; Convert to upper case 
9051 c9			                ret 
9052			 
9052			 
9052			to_lower: 
9052			 
9052			   ; if char is in [A-Z] make it lower case 
9052			 
9052			   ; enter : a = char 
9052			   ; exit  : a = lower case char 
9052			   ; uses  : af 
9052			 
9052 fe 41		   cp 'A' 
9054 d8			   ret c 
9055			    
9055 fe 5b		   cp 'Z'+1 
9057 d0			   ret nc 
9058			    
9058 f6 20		   or $20 
905a c9			   ret 
905b			 
905b			; 
905b			; Expects a hexadecimal digit (upper case!) in A and returns the 
905b			; corresponding value in A. 
905b			; 
905b fe 3a		nibble2val:      cp      '9' + 1         ; Is it a digit (less or equal '9')? 
905d 38 02		                jr      c, nibble2val_1 ; Yes 
905f d6 07		                sub     7               ; Adjust for A-F 
9061 d6 30		nibble2val_1:    sub     '0'             ; Fold back to 0..15 
9063 e6 0f		                and     $f              ; Only return lower 4 bits 
9065 c9			                ret 
9066			; 
9066			; Print_nibble prints a single hex nibble which is contained in the lower  
9066			; four bits of A: 
9066			; 
9066			;print_nibble    push    af              ; We won't destroy the contents of A 
9066			;                and     $f              ; Just in case... 
9066			;                add     a, '0'             ; If we have a digit we are done here. 
9066			;                cp      '9' + 1         ; Is the result > 9? 
9066			;                jr      c, print_nibble_1 
9066			;                add     a, 'A' - '0' - $a  ; Take care of A-F 
9066			;print_nibble_1  call    putc            ; Print the nibble and 
9066			;                pop     af              ; restore the original value of A 
9066			;                ret 
9066			;; 
9066			;; Send a CR/LF pair: 
9066			; 
9066			;crlf            push    af 
9066			;                ld      a, cr 
9066			;                call    putc 
9066			;                ld      a, lf 
9066			;                call    putc 
9066			;                pop     af 
9066			;                ret 
9066			; 
9066			; Print_word prints the four hex digits of a word to the serial line. The  
9066			; word is expected to be in HL. 
9066			; 
9066			;print_word      push    hl 
9066			;                push    af 
9066			;                ld      a, h 
9066			;                call    print_byte 
9066			;                ld      a, l 
9066			;                call    print_byte 
9066			;                pop     af 
9066			;                pop     hl 
9066			;                ret 
9066			; 
9066			; Print_byte prints a single byte in hexadecimal notation to the serial line. 
9066			; The byte to be printed is expected to be in A. 
9066			; 
9066			;print_byte      push    af              ; Save the contents of the registers 
9066			;                push    bc 
9066			;                ld      b, a 
9066			;                rrca 
9066			;                rrca 
9066			;                rrca 
9066			;                rrca 
9066			;                call    print_nibble    ; Print high nibble 
9066			;                ld      a, b 
9066			;                call    print_nibble    ; Print low nibble 
9066			;                pop     bc              ; Restore original register contents 
9066			;                pop     af 
9066			;                ret 
9066			 
9066			 
9066			 
9066			 
9066			 
9066			fourehexhl:  
9066 7e				ld a,(hl) 
9067 cd 15 90			call atohex 
906a cb 3f				SRL A 
906c cb 3f				SRL A 
906e cb 3f				SRL A 
9070 cb 3f				SRL A 
9072 47				ld b, a 
9073 23				inc hl 
9074 7e				ld a,(hl) 
9075 23				inc hl 
9076 cd 15 90			call atohex 
9079 80				add b 
907a 57				ld d,a 
907b 7e				ld a,(hl) 
907c cd 15 90			call atohex 
907f cb 3f				SRL A 
9081 cb 3f				SRL A 
9083 cb 3f				SRL A 
9085 cb 3f				SRL A 
9087 47				ld b, a 
9088 23				inc hl 
9089 7e				ld a,(hl) 
908a 23				inc hl 
908b cd 15 90			call atohex 
908e 80				add b 
908f 5f				ld e, a 
9090 d5				push de 
9091 e1				pop hl 
9092 c9				ret 
9093			 
9093			; pass hl. returns z set if the byte at hl is a digit 
9093			;isdigithl:  
9093			;	push bc 
9093			;	ld a,(hl) 
9093			;	cp ':' 
9093			;	jr nc, .isdf 		; > 
9093			;	cp '0' 
9093			;	jr c, .isdf		; < 
9093			; 
9093			;	; TODO find a better way to set z 
9093			; 
9093			;	ld b,a 
9093			;	cp b 
9093			;	pop bc 
9093			;	ret 
9093			; 
9093			;.isdf:	; not digit so clear z 
9093			; 
9093			;	; TODO find a better way to unset z 
9093			; 
9093			;	ld b,a 
9093			;	inc b 
9093			;	cp b 
9093			; 
9093			;	pop bc 
9093			;	ret 
9093				 
9093				 
9093			 
9093			 
9093			; pass hl as the four byte address to load 
9093			 
9093			get_word_hl:  
9093 e5				push hl 
9094 cd 33 90			call get_byte 
9097				 
9097 47				ld b, a 
9098			 
9098 e1				pop hl 
9099 23				inc hl 
909a 23				inc hl 
909b			 
909b			; TODO not able to handle a-f  
909b 7e				ld a,(hl) 
909c			;	;cp ':' 
909c			;	cp 'g' 
909c			;	jr nc, .single_byte_hl 		; > 
909c			;	cp 'G' 
909c			;	jr nc, .single_byte_hl 		; > 
909c			;	cp '0' 
909c			;	jr c, .single_byte_hl		; < 
909c			 
909c				;call isdigithl 
909c fe 00			cp 0 
909e 28 06			jr z, .single_byte_hl 
90a0			 
90a0			.getwhln:   ; hex word so get next byte 
90a0			 
90a0 cd 33 90			call get_byte 
90a3 6f				ld l, a 
90a4 60				ld h,b 
90a5 c9				ret 
90a6 68			.single_byte_hl:   ld l,b 
90a7 26 00				ld h,0 
90a9 c9					ret 
90aa			 
90aa			 
90aa			 
90aa			 
90aa 21 2a 98			ld hl,asc+1 
90ad			;	ld a, (hl) 
90ad			;	call nibble2val 
90ad cd 33 90			call get_byte 
90b0			 
90b0			;	call fourehexhl 
90b0 32 f5 e2			ld (scratch+52),a 
90b3				 
90b3 21 f3 e2			ld hl,scratch+50 
90b6 22 e4 e5			ld (os_cur_ptr),hl 
90b9			 
90b9 c9				ret 
90ba			 
90ba			 
90ba			; from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Other:DispA 
90ba			 
90ba			; Decimal Unsigned Version 
90ba			 
90ba			;Number in a to decimal ASCII 
90ba			;adapted from 16 bit found in z80 Bits to 8 bit by Galandros 
90ba			;Example: display a=56 as "056" 
90ba			;input: a = number 
90ba			;Output: a=0,value of a in the screen 
90ba			;destroys af,bc (don't know about hl and de) 
90ba			DispAToASCII: 
90ba 0e 9c			ld	c,-100 
90bc cd c6 90			call	.Na1 
90bf 0e f6			ld	c,-10 
90c1 cd c6 90			call	.Na1 
90c4 0e ff			ld	c,-1 
90c6 06 2f		.Na1:	ld	b,'0'-1 
90c8 04			.Na2:	inc	b 
90c9 81				add	a,c 
90ca 38 fc			jr	c,.Na2 
90cc 91				sub	c		;works as add 100/10/1 
90cd f5				push af		;safer than ld c,a 
90ce 78				ld	a,b		;char is in b 
90cf			;TODO	CALL	PUTCHAR	;plot a char. Replace with bcall(_PutC) or similar. 
90cf f1				pop af		;safer than ld a,c 
90d0 c9				ret 
90d1			 
90d1			; Decimal Signed Version 
90d1			 
90d1			; DispA 
90d1			; -------------------------------------------------------------- 
90d1			; Converts a signed integer value to a zero-terminated ASCII 
90d1			; string representative of that value (using radix 10). 
90d1			; -------------------------------------------------------------- 
90d1			; INPUTS: 
90d1			;     HL     Value to convert (two's complement integer). 
90d1			;     DE     Base address of string destination. (pointer). 
90d1			; -------------------------------------------------------------- 
90d1			; OUTPUTS: 
90d1			;     None 
90d1			; -------------------------------------------------------------- 
90d1			; REGISTERS/MEMORY DESTROYED 
90d1			; AF HL 
90d1			; -------------------------------------------------------------- 
90d1			 
90d1			;DispHLToASCII: 
90d1			;   push    de 
90d1			;   push    bc 
90d1			; 
90d1			;; Detect sign of HL. 
90d1			;    bit    7, h 
90d1			;    jr     z, ._DoConvert 
90d1			; 
90d1			;; HL is negative. Output '-' to string and negate HL. 
90d1			;    ld     a, '-' 
90d1			;    ld     (de), a 
90d1			;    inc    de 
90d1			; 
90d1			;; Negate HL (using two's complement) 
90d1			;    xor    a 
90d1			;    sub    l 
90d1			;    ld     l, a 
90d1			;    ld     a, 0     ; Note that XOR A or SUB A would disturb CF 
90d1			;    sbc    a, h 
90d1			;    ld     h, a 
90d1			; 
90d1			;; Convert HL to digit characters 
90d1			;._DoConvert: 
90d1			;    ld     b, 0     ; B will count character length of number 
90d1			;-   ld     a, 10 
90d1			;    syscall  .DivHLByA  ; HL = HL / A, A = remainder 
90d1			;    push   af 
90d1			;    inc    b 
90d1			;    ld     a, h 
90d1			;    or     l 
90d1			;    jr     nz, - 
90d1			; 
90d1			;; Retrieve digits from stack 
90d1			;-   pop    af 
90d1			;    or     $30 
90d1			;    ld     (de), a 
90d1			;    inc    de 
90d1			;    djnz   - 
90d1			; 
90d1			;; Terminate string with NULL 
90d1			;    xor    a 
90d1			;    ld     (de), a 
90d1			; 
90d1			;    pop    bc 
90d1			;    pop    de 
90d1			;    ret 
90d1			 
90d1			;Comments 
90d1			; 
90d1			;    This routine uses the common positive-integer radix conversion algorithm of repeatedly dividing a value by the desired radix (base case: the value is zero) and saving the remainders of each division. 
90d1			;    As this algorithm gives the digits in reverse order, they are pushed onto the hardware stack so that subsequently popping them yields the correct order. 
90d1			;    Note that the output string will not be fixed-width. 
90d1			; 
90d1			;Example Usage 
90d1			; 
90d1			;    ld    hl, -1004 
90d1			;    ld    de, OP1 
90d1			;    call  DispA 
90d1			;    ld    hl, OP1 
90d1			;    syscall  PutS 
90d1			 
90d1			 
90d1			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/string_to_uint16.z80 
90d1			 
90d1			 
90d1			;Converts an ASCII string to an unsigned 16-bit integer 
90d1			;Quits when it reaches a non-decimal digit 
90d1			 
90d1			string_to_uint16: 
90d1			atoui_16: 
90d1			;Input: 
90d1			;     DE points to the string 
90d1			;Outputs: 
90d1			;     HL is the result 
90d1			;     A is the 8-bit value of the number 
90d1			;     DE points to the byte after the number 
90d1			;Destroys: 
90d1			;     BC 
90d1			;       if the string is non-empty, BC is HL/10 
90d1			;Size:  24 bytes 
90d1			;Speed: 42+d(104+{0,9}) 
90d1			;       d is the number of digits in the number 
90d1			;       max is 640 cycles for a 5 digit number 
90d1			;Assuming no leading zeros: 
90d1			;1 digit:  146cc 
90d1			;2 digit:  250cc 
90d1			;3 digit:  354cc or 363cc (avg: 354.126cc) 
90d1			;4 digit:  458cc or 467cc (avg: 458.27cc) 
90d1			;5 digit:  562cc or 571cc or 580cc (avg: 562.4104cc) 
90d1			;avg: 544.81158447265625cc (544+13297/16384) 
90d1			;=============================================================== 
90d1 21 00 00		  ld hl,0 
90d4			.u16a: 
90d4 1a			  ld a,(de) 
90d5 d6 30		  sub 30h 
90d7 fe 0a		  cp 10 
90d9 d0			  ret nc 
90da 13			  inc de 
90db 44			  ld b,h 
90dc 4d			  ld c,l 
90dd 29			  add hl,hl 
90de 29			  add hl,hl 
90df 09			  add hl,bc 
90e0 29			  add hl,hl 
90e1 85			  add a,l 
90e2 6f			  ld l,a 
90e3 30 ef		  jr nc,.u16a 
90e5 24			  inc h 
90e6 c3 d4 90		  jp .u16a 
90e9			 
90e9			 
90e9			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/string_to_uint16.z80 
90e9			 
90e9			;written by Zeda 
90e9			;Converts a 16-bit unsigned integer to an ASCII string. 
90e9			 
90e9			uitoa_16: 
90e9			;Input: 
90e9			;   DE is the number to convert 
90e9			;   HL points to where to write the ASCII string (up to 6 bytes needed). 
90e9			;Output: 
90e9			;   HL points to the null-terminated ASCII string 
90e9			;      NOTE: This isn't necessarily the same as the input HL. 
90e9 d5			  push de 
90ea c5			  push bc 
90eb f5			  push af 
90ec eb			  ex de,hl 
90ed			 
90ed 01 f0 d8		  ld bc,-10000 
90f0 3e 2f		  ld a,'0'-1 
90f2 3c			  inc a 
90f3 09			  add hl,bc  
90f4 38 fc		   jr c,$-2 
90f6 12			  ld (de),a 
90f7 13			  inc de 
90f8			 
90f8 01 e8 03		  ld bc,1000 
90fb 3e 3a		  ld a,'9'+1 
90fd 3d			  dec a  
90fe 09			  add hl,bc  
90ff 30 fc		   jr nc,$-2 
9101 12			  ld (de),a 
9102 13			  inc de 
9103			 
9103 01 9c ff		  ld bc,-100 
9106 3e 2f		  ld a,'0'-1 
9108 3c			  inc a  
9109 09			  add hl,bc  
910a 38 fc		   jr c,$-2 
910c 12			  ld (de),a 
910d 13			  inc de 
910e			 
910e 7d			  ld a,l 
910f 26 3a		  ld h,'9'+1 
9111 25			  dec h  
9112 c6 0a		  add a,10  
9114 30 fb		   jr nc,$-3 
9116 c6 30		  add a,'0' 
9118 eb			  ex de,hl 
9119 72			  ld (hl),d 
911a 23			  inc hl 
911b 77			  ld (hl),a 
911c 23			  inc hl 
911d 36 00		  ld (hl),0 
911f			 
911f			;Now strip the leading zeros 
911f 0e fa		  ld c,-6 
9121 09			  add hl,bc 
9122 3e 30		  ld a,'0' 
9124 23			  inc hl  
9125 be			  cp (hl)  
9126 28 fc		  jr z,$-2 
9128			 
9128			;Make sure that the string is non-empty! 
9128 7e			  ld a,(hl) 
9129 b7			  or a 
912a 20 01		  jr nz,.atoub 
912c 2b			  dec hl 
912d			.atoub: 
912d			 
912d f1			  pop af 
912e c1			  pop bc 
912f d1			  pop de 
9130 c9			  ret 
9131			 
9131			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/toUpper.z80 
9131			 
9131			toUpper: 
9131			;A is the char. 
9131			;If A is a lowercase letter, this sets it to the matching uppercase 
9131			;18cc or 30cc or 41cc 
9131			;avg: 26.75cc 
9131 fe 61		  cp 'a' 
9133 d8			  ret c 
9134 fe 7b		  cp 'z'+1 
9136 d0			  ret nc 
9137 d6 20		  sub 'a'-'A' 
9139 c9			  ret 
913a			 
913a			; https://tutorials.eeems.ca/ASMin28Days/lesson/day16.html#cmp 
913a			 
913a			; String Length 
913a			;With a length-prefixed string, finding the length is trivial. For a null-terminated string, the process is decidedly more involved. This is where CPIR comes in. 
913a			 
913a			; Get the length of the null-terminated string starting at $8000 hl 
913a			;    LD     HL, $8000 
913a			 
913a			strlenz: 
913a			 
913a af			    XOR    A               ; Zero is the value we are looking for. 
913b 47			    LD     B, A             ; Since we haven't the slightest clue as to the  
913c 4f			    LD     C, A             ; actual size of the string, put 0 in BC to search 
913d			                           ; 65, 536 bytes (the entire addressable memory space). 
913d ed b1		    CPIR                   ; Begin search for a byte equalling zero. 
913f			 
913f			; BC has been decremented so that it holds -length. Now need to synthesize a NEG BC. 
913f 67			    LD     H, A             ; Zero HL (basically set it to 65, 536) to get the 
9140 6f			    LD     L, A             ; number of bytes 
9141 ed 42		    SBC    HL, BC           ; Find the size. CPIR doesn't affect carry. 
9143 2b			    DEC    HL              ; Compensate for null. 
9144 c9				ret 
9145			 
9145			; Get the length of the A terminated string starting at $8000 hl 
9145			;    LD     HL, $8000 
9145			 
9145			strlent: 
9145			 
9145			                  ; A is the value we are looking for. 
9145 06 00		    LD     B, 0             ; Since we haven't the slightest clue as to the  
9147 0e 00		    LD     C, 0             ; actual size of the string, put 0 in BC to search 
9149			                           ; 65, 536 bytes (the entire addressable memory space). 
9149 ed b1		    CPIR                   ; Begin search for a byte equalling zero. 
914b			 
914b			; BC has been decremented so that it holds -length. Now need to synthesize a NEG BC. 
914b 26 00		    LD     H, 0             ; Zero HL (basically set it to 65, 536) to get the 
914d 2e 00		    LD     L, 0             ; number of bytes 
914f ed 42		    SBC    HL, BC           ; Find the size. CPIR doesn't affect carry. 
9151 2b			    DEC    HL              ; Compensate for null. 
9152 c9				ret 
9153			 
9153			 
9153			;Comparing Strings 
9153			 
9153			;IN    HL     Address of string1. 
9153			;      DE     Address of string2. 
9153			 
9153			; doc given but wrong??? 
9153			;OUT   zero   Set if string1 = string2, reset if string1 != string2. 
9153			;      carry  Set if string1 > string2, reset if string1 <= string2. 
9153			; tested 
9153			;OUT   carry set  if string1 = string2, carry  reset if string1 != string2. 
9153			 
9153			strcmp_old: 
9153 e5			    PUSH   HL 
9154 d5			    PUSH   DE 
9155			 
9155 1a			    LD     A, (DE)          ; Compare lengths to determine smaller string 
9156 be			    CP     (HL)            ; (want to minimize work). 
9157 38 01		    JR     C, Str1IsBigger 
9159 7e			    LD     A, (HL) 
915a			 
915a			Str1IsBigger: 
915a 4f			    LD     C, A             ; Put length in BC 
915b 06 00		    LD     B, 0 
915d 13			    INC    DE              ; Increment pointers to meat of string. 
915e 23			    INC    HL 
915f			 
915f			CmpLoop: 
915f 1a			    LD     A, (DE)          ; Compare bytes. 
9160 ed a1		    CPI 
9162 20 09		    JR     NZ, NoMatch      ; If (HL) != (DE), abort. 
9164 13			    INC    DE              ; Update pointer. 
9165 ea 5f 91		    JP     PE, CmpLoop 
9168			 
9168 d1			    POP    DE 
9169 e1			    POP    HL 
916a 1a			    LD     A, (DE)          ; Check string lengths to see if really equal. 
916b be			    CP     (HL) 
916c c9			    RET 
916d			 
916d			NoMatch: 
916d 2b			    DEC    HL 
916e be			    CP     (HL)            ; Compare again to affect carry. 
916f d1			    POP    DE 
9170 e1			    POP    HL 
9171 c9			    RET 
9172			 
9172			;; test strmp 
9172			; 
9172			;ld de, .str1 
9172			;ld hl, .str2 
9172			;call strcmp 
9172			;jr z, .z1 
9172			;;this 
9172			;	if DEBUG_FORTH_WORDS 
9172			;		DMARK "NZ1" 
9172			;		CALLMONITOR 
9172			;	endif 
9172			;.z1: 
9172			; 
9172			;	if DEBUG_FORTH_WORDS 
9172			;		DMARK "ZZ1" 
9172			;		CALLMONITOR 
9172			;	endif 
9172			; 
9172			;ld de, .str1 
9172			;ld hl, .str1 
9172			;call strcmp 
9172			;jr z, .z2 
9172			;;this 
9172			;	if DEBUG_FORTH_WORDS 
9172			;		DMARK "NZ2" 
9172			;		CALLMONITOR 
9172			;	endif 
9172			;.z2: 
9172			; 
9172			;	if DEBUG_FORTH_WORDS 
9172			;		DMARK "ZZ2" 
9172			;		CALLMONITOR 
9172			;	endif 
9172			; 
9172			;ld de, .str1 
9172			;ld hl, .str2 
9172			;call strcmp 
9172			;jr c, .c1 
9172			; 
9172			;	if DEBUG_FORTH_WORDS 
9172			;		DMARK "Nc1" 
9172			;		CALLMONITOR 
9172			;	endif 
9172			;.c1: 
9172			;;this 
9172			;	if DEBUG_FORTH_WORDS 
9172			;		DMARK "cc1" 
9172			;		CALLMONITOR 
9172			;	endif 
9172			; 
9172			;ld de, .str1 
9172			;ld hl, .str1 
9172			;call strcmp 
9172			;jr c, .c2 
9172			;;this 
9172			;	if DEBUG_FORTH_WORDS 
9172			;		DMARK "Nc2" 
9172			;		CALLMONITOR 
9172			;	endif 
9172			;.c2: 
9172			; 
9172			;	if DEBUG_FORTH_WORDS 
9172			;		DMARK "cc2" 
9172			;		CALLMONITOR 
9172			;	endif 
9172			;	NEXTW 
9172			;.str1:   db "string1",0 
9172			;.str2:   db "string2",0 
9172			 
9172			; only care about direct match or not 
9172			; hl and de strings 
9172			; zero set if the same 
9172			 
9172			strcmp: 
9172 1a				ld a, (de) 
9173 be				cp (hl) 
9174 28 02			jr z, .ssame 
9176 b7				or a 
9177 c9				ret 
9178			 
9178			.ssame:  
9178 fe 00			cp 0 
917a c8				ret z 
917b			 
917b 23				inc hl 
917c 13				inc de 
917d 18 f3			jr strcmp 
917f				 
917f				 
917f			 
917f			 
917f			 
917f			 
917f			; eof 
917f			 
917f			 
917f			 
917f			 
917f			 
917f			 
# End of file firmware_strings.asm
917f			include "firmware_memory.asm"   ; malloc and free  
917f			 
917f			if DEBUG_FORTH_MALLOC_HIGH 
917f			.mallocsize: db "Wants malloc >256",0 
917f			.mallocasize: db "MALLOC gives >256",0 
917f			.malloczero: db "MALLOC gives zero",0 
917f			 
917f			malloc_guard_zerolen: 
917f				push hl 
917f				push de 
917f				push af 
917f			 
917f				ld de, 0 
917f			        call cmp16 
917f				jr nz, .lowalloz 
917f			 
917f				push hl 
917f				push de 
917f					ld hl, display_fb0 
917f					ld (display_fb_active), hl 
917f				call clear_display 
917f				ld a, 0 
917f				ld de, .malloczero 
917f				call str_at_display 
917f				call update_display 
917f				call delay1s 
917f				call delay1s 
917f				call bp_on 
917f			;	ld a, 0 
917f			;	ld (os_view_disable), a 
917f			 
917f				pop de 
917f				pop hl 
917f			 
917f				 
917f			 
917f				CALLMONITOR 
917f			.lowalloz: 
917f			 
917f			 
917f				pop af 
917f				pop de 
917f				pop hl 
917f			ret 
917f			 
917f			malloc_guard_entry: 
917f				push hl 
917f				push de 
917f				push af 
917f			 
917f			 	or a      ;clear carry flag 
917f				push hl 
917f				ld de, 255 
917f				sbc hl, de 
917f				jr c, .lowalloc 
917f			 
917f				push de 
917f					ld hl, display_fb0 
917f					ld (display_fb_active), hl 
917f				call clear_display 
917f				ld a, 0 
917f				ld de, .mallocsize 
917f				call str_at_display 
917f				call update_display 
917f				call delay1s 
917f				call delay1s 
917f			;	ld a, 0 
917f			;	ld (os_view_disable), a 
917f				call bp_on 
917f			 
917f				pop de 
917f				pop hl 
917f			 
917f				 
917f			 
917f				CALLMONITOR 
917f				jr .lowdone 
917f			.lowalloc: 
917f			 
917f			 
917f				pop hl 
917f			.lowdone:	pop af 
917f				pop de 
917f				pop hl 
917f			ret 
917f			 
917f			malloc_guard_exit: 
917f				push hl 
917f				push de 
917f				push af 
917f			 
917f			 	or a      ;clear carry flag 
917f				push hl 
917f				ld de, 255 
917f				sbc hl, de 
917f				jr c, .lowallocx 
917f			 
917f				push de 
917f					ld hl, display_fb0 
917f					ld (display_fb_active), hl 
917f				call clear_display 
917f				ld a, 0 
917f				ld de, .mallocasize 
917f				call str_at_display 
917f				call update_display 
917f				call delay1s 
917f				call delay1s 
917f			;	ld a, 0 
917f			;	ld (os_view_disable), a 
917f				call bp_on 
917f				pop de 
917f				pop hl 
917f			 
917f				CALLMONITOR 
917f				jr .lowdonex 
917f			.lowallocx: 
917f			 
917f				pop hl 
917f			.lowdonex:	pop af 
917f				pop de 
917f				pop hl 
917f			ret 
917f			endif 
917f			 
917f			if MALLOC_2 
917f			; Z80 Malloc and Free Functions 
917f			 
917f			; Malloc Function: 
917f			; Input: 
917f			;   HL: Size of block to allocate 
917f			; Output: 
917f			;   HL: Pointer to allocated memory block (NULL if allocation fails) 
917f			 
917f			malloc: 
917f				 
917f			if DEBUG_FORTH_MALLOC_HIGH 
917f			call malloc_guard_entry 
917f			endif 
917f			 
917f			 
917f			 
917f			 
917f					if DEBUG_FORTH_MALLOC 
917f						DMARK "mal" 
917f						CALLMONITOR 
917f					endif 
917f			    push af            ; Save AF register 
917f			    ld a, l            ; Load low byte of size into A 
917f			    or h               ; Check if size is zero 
917f			    jp z, malloc_exit  ; If size is zero, exit with NULL pointer 
917f			 
917f			    ; Allocate memory 
917f			    ld hl, (heap_start) ; Load start of heap into HL 
917f					if DEBUG_FORTH_MALLOC 
917f						DMARK "ma1" 
917f						CALLMONITOR 
917f					endif 
917f			    call malloc_internal ; Call internal malloc function 
917f			    pop af             ; Restore AF register 
917f			if DEBUG_FORTH_MALLOC_HIGH 
917f			call malloc_guard_exit 
917f			call malloc_guard_zerolen 
917f			endif 
917f			    ret                ; Return 
917f			 
917f			; Free Function: 
917f			; Input: 
917f			;   HL: Pointer to memory block to free 
917f			; Output: 
917f			;   None 
917f			 
917f			free: 
917f			    push af            ; Save AF register 
917f			    ld a, l            ; Load low byte of pointer into A 
917f			    or h               ; Check if pointer is NULL 
917f			    jp z, free_exit    ; If pointer is NULL, exit 
917f			 
917f			    ; Free memory 
917f			    ld hl, (heap_start) ; Load start of heap into HL 
917f			    call free_internal  ; Call internal free function 
917f			    pop af             ; Restore AF register 
917f			    ret                ; Return 
917f			 
917f			; Internal Malloc Function: 
917f			; Input: 
917f			;   HL: Size of block to allocate 
917f			; Output: 
917f			;   HL: Pointer to allocated memory block (NULL if allocation fails) 
917f			 
917f			malloc_internal: 
917f			    ld bc, 2           ; Number of bytes to allocate for management overhead 
917f			    add hl, bc         ; Add management overhead to requested size 
917f			    ex de, hl          ; Save total size in DE, and keep it in HL 
917f					if DEBUG_FORTH_MALLOC 
917f						DMARK "ma2" 
917f						CALLMONITOR 
917f					endif 
917f			 
917f			    ; Search for free memory block 
917f			    ld de, (heap_end)  ; Load end of heap into DE 
917f			    ld bc, 0           ; Initialize counter 
917f			 
917f					if DEBUG_FORTH_MALLOC 
917f						DMARK "ma2" 
917f						CALLMONITOR 
917f					endif 
917f			malloc_search_loop: 
917f			    ; Check if current block is free 
917f			    ld a, (hl)         ; Load current block's status (free or used) 
917f			    cp 0               ; Compare with zero (free) 
917f			    jr nz, malloc_skip_block_check  ; If not free, skip to the next block 
917f			 
917f			    ; Check if current block is large enough 
917f			    ld a, (hl+1)       ; Load high byte of block size 
917f			    cp l               ; Compare with low byte of requested size 
917f			    jr nz, malloc_skip_block_check  ; If not large enough, skip to the next block 
917f			 
917f			    ld a, (hl+2)       ; Load low byte of block size 
917f			    cp h               ; Compare with high byte of requested size 
917f			    jr c, malloc_skip_block_check   ; If not large enough, skip to the next block 
917f			 
917f			    ; Mark block as used 
917f			    ld (hl), 0xFF      ; Set status byte to indicate used block 
917f			 
917f			    ; Calculate remaining space in block 
917f			    ld bc, 0           ; Clear BC 
917f			    add hl, bc         ; Increment HL to point to start of data block 
917f			    add hl, de         ; HL = HL + DE (total size) 
917f			    ld bc, 1           ; Number of bytes to allocate for management overhead 
917f			    add hl, bc         ; Add management overhead to start of data block 
917f			 
917f			    ; Save pointer to allocated block in HL 
917f			if DEBUG_FORTH_MALLOC_HIGH 
917f						DMARK "ma5" 
917f			call malloc_guard_exit 
917f			call malloc_guard_zerolen 
917f			endif 
917f			    ret 
917f			 
917f			malloc_skip_block_check: 
917f			    ; Move to the next block 
917f			    ld bc, 3           ; Size of management overhead 
917f			    add hl, bc         ; Move to the next block 
917f			    inc de             ; Increment counter 
917f			 
917f			    ; Check if we have reached the end of heap 
917f			    ld a, e            ; Load low byte of heap end address 
917f			    cp (hl)            ; Compare with low byte of current address 
917f			    jr nz, malloc_search_loop  ; If not equal, continue searching 
917f			    ld a, d            ; Load high byte of heap end address 
917f			    cp 0               ; Check if it's zero (end of memory) 
917f			    jr nz, malloc_search_loop  ; If not zero, continue searching 
917f			 
917f			    ; If we reached here, allocation failed 
917f			    xor a              ; Set result to NULL 
917f			if DEBUG_FORTH_MALLOC_HIGH 
917f						DMARK "ma6" 
917f			call malloc_guard_exit 
917f			call malloc_guard_zerolen 
917f			endif 
917f			    ret 
917f			malloc_exit: 
917f			if DEBUG_FORTH_MALLOC_HIGH 
917f						DMARK "ma7" 
917f			call malloc_guard_exit 
917f			call malloc_guard_zerolen 
917f			endif 
917f			    ret 
917f			 
917f			; Internal Free Function: 
917f			; Input: 
917f			;   HL: Pointer to memory block to free 
917f			; Output: 
917f			;   None 
917f			 
917f			free_internal: 
917f			    ld de, (heap_start) ; Load start of heap into DE 
917f			    ld bc, 0            ; Initialize counter 
917f			 
917f			free_search_loop: 
917f			    ; Check if current block contains the pointer 
917f			    ld a, l             ; Load low byte of pointer 
917f			    cp (hl+1)           ; Compare with high byte of current block's address 
917f			    jr nz, free_skip_block_check  ; If not equal, skip to the next block 
917f			    ld a, h             ; Load high byte of pointer 
917f			    cp (hl+2)           ; Compare with low byte of current block's address 
917f			    jr nz, free_skip_block_check  ; If not equal, skip to the next block 
917f			 
917f			    ; Mark block as free 
917f			    ld (hl), 0          ; Set status byte to indicate free block 
917f			    ret                 ; Return 
917f			 
917f			free_skip_block_check: 
917f			    ; Move to the next block 
917f			    ld bc, 3            ; Size of management overhead 
917f			    add hl, bc          ; Move to the next block 
917f			    inc de              ; Increment counter 
917f			 
917f			    ; Check if we have reached the end of heap 
917f			    ld a, e             ; Load low byte of heap end address 
917f			    cp (hl)             ; Compare with low byte of current address 
917f			    jr nz, free_search_loop  ; If not equal, continue searching 
917f			    ld a, d             ; Load high byte of heap end address 
917f			    cp 0                ; Check if it's zero (end of memory) 
917f			    jr nz, free_search_loop  ; If not zero, continue searching 
917f			 
917f			    ; If we reached here, pointer is not found in heap 
917f			    ret 
917f			 
917f			free_exit: 
917f			    ret                 ; Return 
917f			 
917f			; Define heap start and end addresses 
917f			;heap_start:    .dw 0xC000   ; Start of heap 
917f			;heap_end:      .dw 0xE000   ; End of heap 
917f			 
917f			endif 
917f			 
917f			 
917f			if MALLOC_1 
917f			 
917f			 
917f			 
917f			; from https://gist.github.com/tomstorey/947a8b084bad69391a4b2a1c5b6d69ca 
917f			 
917f			;moved to firmware.asm 
917f			;heap_start        .equ  0x9000      ; Starting address of heap 
917f			;heap_size         .equ  0x0100      ; Number of bytes available in heap 
917f			 
917f			;      .org 0 
917f			;      jp    main 
917f			 
917f			 
917f			;      .org  0x100 
917f			;main: 
917f			;      ld    HL, 0x8100 
917f			;      ld    SP, HL 
917f			; 
917f			;      call  heap_init 
917f			; 
917f			;      ; Make some allocations 
917f			;      ld    HL, 12 
917f			;      call  malloc            ; Allocates 0x9004 
917f			; 
917f			;      ld    HL, 12 
917f			;      call  malloc            ; Allocates 0x9014 
917f			; 
917f			;      ld    HL, 12 
917f			;      call  malloc            ; Allocates 0x9024 
917f			; 
917f			;      ; Free some allocations 
917f			;      ld    HL, 0x9014 
917f			;      call  free 
917f			; 
917f			;      ld    HL, 0x9004 
917f			;      call  free 
917f			; 
917f			;      ld    HL, 0x9024 
917f			;      call  free 
917f			; 
917f			; 
917f			;      halt 
917f			 
917f			 
917f			;------------------------------------------------------------------------------ 
917f			;     heap_init                                                               : 
917f			;                                                                             : 
917f			; Description                                                                 : 
917f			;     Initialise the heap and make it ready for malloc and free operations.   : 
917f			;                                                                             : 
917f			;     The heap is maintained as a linked list, starting with an initial       : 
917f			;     "dummy block" of zero size which is mainly used to hold a pointer to    : 
917f			;     the first free block in the heap. Each block then points to the next    : 
917f			;     free block within the heap, and the free list ends at the first block   : 
917f			;     with a null pointer to the next free block.                             : 
917f			;                                                                             : 
917f			; Parameters                                                                  : 
917f			;     Inputs are compile-time only. Two defines which specify the starting    : 
917f			;     address of the heap and its size are required, along with a memory      : 
917f			;     allocation of 4 consecutive bytes which is used for a dummy block which : 
917f			;     principally stores a pointer to the first free block in the heap.       : 
917f			;                                                                             : 
917f			; Returns                                                                     : 
917f			;     Nothing                                                                 : 
917f			;------------------------------------------------------------------------------ 
917f			heap_init: 
917f e5			      push  HL 
9180			 
9180			      ; Initialise free list struct 
9180 21 3c e4		      ld    HL, heap_start 
9183 22 37 e4		      ld    (free_list), HL 
9186 21 00 00		      ld    HL, 0 
9189 22 39 e4		      ld    (free_list+2), HL 
918c			 
918c			      ; Insert first free block at bottom of heap, consumes entire heap 
918c 21 a4 e2		      ld    HL, heap_start+heap_size-4 
918f 22 3c e4		      ld    (heap_start), HL        ; Next block (end of free list) 
9192 21 68 fe		      ld    HL, heap_size-4 
9195 22 3e e4		      ld    (heap_start+2), HL      ; Block size 
9198			 
9198			      ; Insert end of free list block at top of heap - two null words will 
9198			      ; terminate the free list 
9198 21 00 00		      ld    HL, 0 
919b 22 a6 e2		      ld    (heap_start+heap_size-2), HL 
919e 22 a4 e2		      ld    (heap_start+heap_size-4), HL 
91a1			 
91a1 e1			      pop   HL 
91a2			 
91a2 c9			      ret 
91a3			 
91a3			 
91a3			;------------------------------------------------------------------------------ 
91a3			;     malloc                                                                  : 
91a3			;                                                                             : 
91a3			; Description                                                                 : 
91a3			;     Allocates the wanted space from the heap and returns the address of the : 
91a3			;     first useable byte of the allocation.                                   : 
91a3			;                                                                             : 
91a3			;     Allocations can happen in one of two ways:                              : 
91a3			;                                                                             : 
91a3			;     1. A free block may be found which is the exact size wanted. In this    : 
91a3			;        case the block is removed from the free list and retuedn to the      : 
91a3			;        caller.                                                              : 
91a3			;     2. A free block may be found which is larger than the size wanted. In   : 
91a3			;        this case, the larger block is split into two. The first portion of  : 
91a3			;        this block will become the requested space by the malloc call and    : 
91a3			;        is returned to the caller. The second portion becomes a new free     : 
91a3			;        block, and the free list is adjusted to maintain continuity via this : 
91a3			;        newly created block.                                                 : 
91a3			;                                                                             : 
91a3			;     malloc does not set any initial value in the allocated space, the       : 
91a3			;     caller is required to do this as required.                              : 
91a3			;                                                                             : 
91a3			;     This implementation of malloc uses the stack exclusively, and is        : 
91a3			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
91a3			;     advisable to disable interrupts before calling malloc, and recommended  : 
91a3			;     to avoid the use of malloc inside ISRs in general.                      : 
91a3			;                                                                             : 
91a3			;     NOTE: heap_init must be called before malloc and free can be used.      : 
91a3			;                                                                             : 
91a3			; Parameters                                                                  : 
91a3			;     HL  Number of bytes wanted                                              : 
91a3			;                                                                             : 
91a3			; Returns                                                                     : 
91a3			;     HL  Address of the first useable byte of the allocation                 : 
91a3			;                                                                             : 
91a3			; Flags                                                                       : 
91a3			;     Z   Set if the allocation did not succeed, clear otherwise              : 
91a3			;                                                                             : 
91a3			; Stack frame                                                                 : 
91a3			;       |             |                                                       : 
91a3			;       +-------------+                                                       : 
91a3			;       |     BC      |                                                       : 
91a3			;       +-------------+                                                       : 
91a3			;       |     DE      |                                                       : 
91a3			;       +-------------+                                                       : 
91a3			;       |     IX      |                                                       : 
91a3			;       +-------------+                                                       : 
91a3			;       |  prev_free  |                                                       : 
91a3			;   +4  +-------------+                                                       : 
91a3			;       |  this_free  |                                                       : 
91a3			;   +2  +-------------+                                                       : 
91a3			;       |  next_free  |                                                       : 
91a3			;   +0  +-------------+                                                       : 
91a3			;       |             |                                                       : 
91a3			;                                                                             : 
91a3			;------------------------------------------------------------------------------ 
91a3			 
91a3			 
91a3			;malloc: 
91a3			; 
91a3			;	SAVESP ON 1 
91a3			; 
91a3			;	call malloc_code 
91a3			; 
91a3			;	CHECKSP ON 1 
91a3			;	ret 
91a3			 
91a3			 
91a3			malloc: 
91a3 c5			      push  BC 
91a4 d5			      push  DE 
91a5 dd e5		      push  IX 
91a7			if DEBUG_FORTH_MALLOC_HIGH 
91a7			call malloc_guard_entry 
91a7			endif 
91a7			 
91a7					if DEBUG_FORTH_MALLOC 
91a7						DMARK "mal" 
91a7						CALLMONITOR 
91a7					endif 
91a7 7c			      ld    A, H                    ; Exit if no space requested 
91a8 b5			      or    L 
91a9 ca 68 92		      jp    Z, malloc_early_exit 
91ac			 
91ac			;inc hl 
91ac			;inc hl 
91ac			;inc hl 
91ac			; 
91ac			;inc hl 
91ac			;inc hl 
91ac			;inc hl 
91ac			;inc hl 
91ac			;inc hl 
91ac			;inc hl 
91ac			;inc hl 
91ac			;inc hl 
91ac			;inc hl 
91ac			 
91ac			 
91ac			 
91ac			 
91ac					if DEBUG_FORTH_MALLOC 
91ac						DMARK "maA" 
91ac						CALLMONITOR 
91ac					endif 
91ac			      ; Set up stack frame 
91ac eb			      ex    DE, HL 
91ad 21 fa ff		      ld    HL, -6                  ; Reserve 6 bytes for stack frame 
91b0 39			      add   HL, SP 
91b1 f9			      ld    SP, HL 
91b2 dd 21 00 00	      ld    IX, 0                   ; Use IX as a frame pointer 
91b6 dd 39		      add   IX, SP 
91b8			 
91b8			      ; Setup initial state 
91b8 21 04 00		      ld    HL, 4                   ; want must also include space used by block struct 
91bb 19			      add   HL, DE 
91bc			 
91bc 44			      ld    B, H                    ; Move want to BC 
91bd 4d			      ld    C, L 
91be			 
91be 21 37 e4		      ld    HL, free_list           ; Store prev_free ptr to stack 
91c1 dd 75 04		      ld    (IX+4), L 
91c4 dd 74 05		      ld    (IX+5), H 
91c7			 
91c7 5e			      ld    E, (HL)                 ; Store this_free ptr to stack 
91c8 23			      inc   HL 
91c9 56			      ld    D, (HL) 
91ca dd 73 02		      ld    (IX+2), E 
91cd dd 72 03		      ld    (IX+3), D 
91d0 eb			      ex    DE, HL                  ; this_free ptr into HL 
91d1			 
91d1					if DEBUG_FORTH_MALLOC 
91d1						DMARK "maB" 
91d1						CALLMONITOR 
91d1					endif 
91d1			      ; Loop through free block list to find some space 
91d1			malloc_find_space: 
91d1 5e			      ld    E, (HL)                 ; Load next_free ptr into DE 
91d2 23			      inc   HL 
91d3 56			      ld    D, (HL) 
91d4			 
91d4 7a			      ld    A, D                    ; Check for null next_free ptr - end of free list 
91d5 b3			      or    E 
91d6 ca 62 92		      jp    Z, malloc_no_space 
91d9			 
91d9 dd 73 00		      ld    (IX+0), E               ; Store next_free ptr to stack 
91dc dd 72 01		      ld    (IX+1), D 
91df			 
91df			      ; Does this block have enough space to make the allocation? 
91df 23			      inc   HL                      ; Load free block size into DE 
91e0 5e			      ld    E, (HL) 
91e1 23			      inc   HL 
91e2 56			      ld    D, (HL) 
91e3			 
91e3 eb			      ex    DE, HL                  ; Check size of block against want 
91e4 b7			      or    A                       ; Ensure carry flag clear 
91e5 ed 42		      sbc   HL, BC 
91e7 e5			      push  HL                      ; Store the result for later (new block size) 
91e8			 
91e8 ca 37 92		      jp   Z, malloc_alloc_fit     ; Z means block size matches want - can allocate 
91eb 30 1b		      jr    NC, malloc_alloc_split  ; NC means block is bigger than want - can allocate 
91ed			 
91ed			      ; this_free block is not big enough, setup ptrs to test next free block 
91ed e1			      pop   HL                      ; Discard previous result 
91ee			 
91ee dd 6e 02		      ld    L, (IX+2)               ; Move this_free ptr into prev_free 
91f1 dd 66 03		      ld    H, (IX+3) 
91f4 dd 75 04		      ld    (IX+4), L 
91f7 dd 74 05		      ld    (IX+5), H 
91fa			 
91fa dd 6e 00		      ld    L, (IX+0)               ; Move next_free ptr into this_free 
91fd dd 66 01		      ld    H, (IX+1) 
9200 dd 75 02		      ld    (IX+2), L 
9203 dd 74 03		      ld    (IX+3), H 
9206			 
9206					if DEBUG_FORTH_MALLOC 
9206						DMARK "MA>" 
9206						CALLMONITOR 
9206					endif 
9206 18 c9		      jr    malloc_find_space 
9208			 
9208			      ; split a bigger block into two - requested size and remaining size 
9208			malloc_alloc_split: 
9208					if DEBUG_FORTH_MALLOC 
9208						DMARK "MAs" 
9208						CALLMONITOR 
9208					endif 
9208 eb			      ex    DE, HL                  ; Calculate address of new free block 
9209 2b			      dec   HL 
920a 2b			      dec   HL 
920b 2b			      dec   HL 
920c 09			      add   HL, BC 
920d			 
920d			      ; Create a new block and point it at next_free 
920d dd 5e 00		      ld    E, (IX+0)               ; Load next_free ptr into DE 
9210 dd 56 01		      ld    D, (IX+1) 
9213			 
9213 73			      ld    (HL), E                 ; Store next_free ptr into new block 
9214 23			      inc   HL 
9215 72			      ld    (HL), D 
9216			 
9216 d1			      pop   DE                      ; Store size of new block into new block 
9217 23			      inc   HL 
9218 73			      ld    (HL), E 
9219 23			      inc   HL 
921a 72			      ld    (HL), D 
921b			 
921b			      ; Update this_free ptr to point to new block 
921b 2b			      dec   HL 
921c 2b			      dec   HL 
921d 2b			      dec   HL 
921e			 
921e dd 5e 02		      ld    E, (IX+2)               ; Take a copy of current this_free ptr 
9221 dd 56 03		      ld    D, (IX+3) 
9224			 
9224 dd 75 02		      ld    (IX+2), L               ; Store new block addr as this_free ptr 
9227 dd 74 03		      ld    (IX+3), H 
922a			 
922a			      ; Modify this_free block to be allocation 
922a eb			      ex    DE, HL 
922b af			      xor   A                       ; Null the next block ptr of allocated block 
922c 77			      ld    (HL), A 
922d 23			      inc   HL 
922e 77			      ld    (HL), A 
922f			 
922f 23			      inc   HL                      ; Store want size into allocated block 
9230 71			      ld    (HL), C 
9231 23			      inc   HL 
9232 70			      ld    (HL), B 
9233 23			      inc   HL 
9234 e5			      push  HL                      ; Address of allocation to return 
9235			 
9235 18 19		      jr    malloc_update_links 
9237			 
9237			malloc_alloc_fit: 
9237 e1			      pop   HL                      ; Dont need new block size, want is exact fit 
9238			 
9238					if DEBUG_FORTH_MALLOC 
9238						DMARK "MAf" 
9238						CALLMONITOR 
9238					endif 
9238			      ; Modify this_free block to be allocation 
9238 eb			      ex    DE, HL 
9239 2b			      dec   HL 
923a 2b			      dec   HL 
923b 2b			      dec   HL 
923c			 
923c af			      xor   A                       ; Null the next block ptr of allocated block 
923d 77			      ld    (HL), A 
923e 23			      inc   HL 
923f 77			      ld    (HL), A 
9240			 
9240 23			      inc   HL                      ; Store address of allocation to return 
9241 23			      inc   HL 
9242 23			      inc   HL 
9243 e5			      push  HL 
9244			 
9244			      ; Copy next_free ptr to this_free, remove allocated block from free list 
9244 dd 6e 00		      ld    L, (IX+0)               ; next_free to HL 
9247 dd 66 01		      ld    H, (IX+1) 
924a			 
924a dd 75 02		      ld    (IX+2), L               ; HL to this_free 
924d dd 74 03		      ld    (IX+3), H 
9250			 
9250			 
9250			malloc_update_links: 
9250			      ; Update prev_free ptr to point to this_free 
9250 dd 6e 04		      ld    L, (IX+4)               ; prev_free ptr to HL 
9253 dd 66 05		      ld    H, (IX+5) 
9256			 
9256 dd 5e 02		      ld    E, (IX+2)               ; this_free ptr to DE 
9259 dd 56 03		      ld    D, (IX+3) 
925c			 
925c 73			      ld    (HL), E                 ; this_free ptr into prev_free 
925d 23			      inc   HL 
925e 72			      ld    (HL), D 
925f			 
925f					if DEBUG_FORTH_MALLOC 
925f						DMARK "Mul" 
925f						CALLMONITOR 
925f					endif 
925f			      ; Clear the Z flag to indicate successful allocation 
925f 7a			      ld    A, D 
9260 b3			      or    E 
9261			 
9261 d1			      pop   DE                      ; Address of allocation 
9262					if DEBUG_FORTH_MALLOC 
9262						DMARK "MAu" 
9262						CALLMONITOR 
9262					endif 
9262			 
9262			malloc_no_space: 
9262 21 06 00		      ld    HL, 6                   ; Clean up stack frame 
9265 39			      add   HL, SP 
9266 f9			      ld    SP, HL 
9267			 
9267 eb			      ex    DE, HL                  ; Alloc addr into HL for return 
9268					if DEBUG_FORTH_MALLOC 
9268						DMARK "MAN" 
9268						CALLMONITOR 
9268					endif 
9268			 
9268			malloc_early_exit: 
9268					if DEBUG_FORTH_MALLOC 
9268						DMARK "MAx" 
9268						CALLMONITOR 
9268					endif 
9268 dd e1		      pop   IX 
926a d1			      pop   DE 
926b c1			      pop   BC 
926c			 
926c			if DEBUG_FORTH_MALLOC_HIGH 
926c			call malloc_guard_exit 
926c			call malloc_guard_zerolen 
926c			endif 
926c c9			      ret 
926d			 
926d			 
926d			;------------------------------------------------------------------------------ 
926d			;     free                                                                    : 
926d			;                                                                             : 
926d			; Description                                                                 : 
926d			;     Return the space pointed to by HL to the heap. HL must be an address as : 
926d			;     returned by malloc, otherwise the behaviour is undefined.               : 
926d			;                                                                             : 
926d			;     Where possible, directly adjacent free blocks will be merged together   : 
926d			;     into larger blocks to help ensure that the heap does not become         : 
926d			;     excessively fragmented.                                                 : 
926d			;                                                                             : 
926d			;     free does not clear or set any other value into the freed space, and    : 
926d			;     therefore its contents may be visible through subsequent malloc's. The  : 
926d			;     caller should clear the freed space as required.                        : 
926d			;                                                                             : 
926d			;     This implementation of free uses the stack exclusively, and is          : 
926d			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
926d			;     advisable to disable interrupts before calling free, and recommended    : 
926d			;     to avoid the use of free inside ISRs in general.                        : 
926d			;                                                                             : 
926d			;     NOTE: heap_init must be called before malloc and free can be used.      : 
926d			;                                                                             : 
926d			; Parameters                                                                  : 
926d			;     HL  Pointer to address of first byte of allocation to be freed          : 
926d			;                                                                             : 
926d			; Returns                                                                     : 
926d			;     Nothing                                                                 : 
926d			;                                                                             : 
926d			; Stack frame                                                                 : 
926d			;       |             |                                                       : 
926d			;       +-------------+                                                       : 
926d			;       |     BC      |                                                       : 
926d			;       +-------------+                                                       : 
926d			;       |     DE      |                                                       : 
926d			;       +-------------+                                                       : 
926d			;       |     IX      |                                                       : 
926d			;       +-------------+                                                       : 
926d			;       |  prev_free  |                                                       : 
926d			;   +2  +-------------+                                                       : 
926d			;       |  next_free  |                                                       : 
926d			;   +0  +-------------+                                                       : 
926d			;       |             |                                                       : 
926d			;                                                                             : 
926d			;------------------------------------------------------------------------------ 
926d			free: 
926d c5			      push  BC 
926e d5			      push  DE 
926f dd e5		      push  IX 
9271			 
9271 7c			      ld    A, H                    ; Exit if ptr is null 
9272 b5			      or    L 
9273 ca 37 93		      jp    Z, free_early_exit 
9276			 
9276			      ; Set up stack frame 
9276 eb			      ex    DE, HL 
9277 21 fc ff		      ld    HL, -4                  ; Reserve 4 bytes for stack frame 
927a 39			      add   HL, SP 
927b f9			      ld    SP, HL 
927c dd 21 00 00	      ld    IX, 0                   ; Use IX as a frame pointer 
9280 dd 39		      add   IX, SP 
9282			 
9282			      ; The address in HL points to the start of the useable allocated space, 
9282			      ; but the block struct starts 4 bytes before this. Sub 4 to get the 
9282			      ; address of the block itself. 
9282 eb			      ex    DE, HL 
9283 11 fc ff		      ld    DE, -4 
9286 19			      add   HL, DE 
9287			 
9287			      ; An allocated block must have a null next block pointer in it 
9287 7e			      ld    A, (HL) 
9288 23			      inc   HL 
9289 b6			      or    (HL) 
928a c2 32 93		      jp    NZ, free_done 
928d			 
928d 2b			      dec   HL 
928e			 
928e 44			      ld    B, H                    ; Copy HL to BC 
928f 4d			      ld    C, L 
9290			 
9290			      ; Loop through the free list to find the first block with an address 
9290			      ; higher than the block being freed 
9290 21 37 e4		      ld    HL, free_list 
9293			 
9293			free_find_higher_block: 
9293 5e			      ld    E, (HL)                 ; Load next ptr from free block 
9294 23			      inc   HL 
9295 56			      ld    D, (HL) 
9296 2b			      dec   HL 
9297			 
9297 dd 73 00		      ld    (IX+0), E               ; Save ptr to next free block 
929a dd 72 01		      ld    (IX+1), D 
929d dd 75 02		      ld    (IX+2), L               ; Save ptr to prev free block 
92a0 dd 74 03		      ld    (IX+3), H 
92a3			 
92a3 78			      ld    A, B                    ; Check if DE is greater than BC 
92a4 ba			      cp    D                       ; Compare MSB first 
92a5 28 02		      jr    Z, $+4                  ; MSB the same, compare LSB 
92a7 30 04		      jr    NC, free_find_higher_block_skip 
92a9 79			      ld    A, C 
92aa bb			      cp    E                       ; Then compare LSB 
92ab 38 08		      jr    C, free_found_higher_block 
92ad			 
92ad			free_find_higher_block_skip: 
92ad 7a			      ld    A, D                    ; Reached the end of the free list? 
92ae b3			      or    E 
92af ca 32 93		      jp    Z, free_done 
92b2			 
92b2 eb			      ex    DE, HL 
92b3			 
92b3 18 de		      jr    free_find_higher_block 
92b5			 
92b5			free_found_higher_block: 
92b5			      ; Insert freed block between prev and next free blocks 
92b5 71			      ld    (HL), C                 ; Point prev free block to freed block 
92b6 23			      inc   HL 
92b7 70			      ld    (HL), B 
92b8			 
92b8 60			      ld    H, B                    ; Point freed block at next free block 
92b9 69			      ld    L, C 
92ba 73			      ld    (HL), E 
92bb 23			      inc   HL 
92bc 72			      ld    (HL), D 
92bd			 
92bd			      ; Check if the freed block is adjacent to the next free block 
92bd 23			      inc   HL                      ; Load size of freed block into HL 
92be 5e			      ld    E, (HL) 
92bf 23			      inc   HL 
92c0 56			      ld    D, (HL) 
92c1 eb			      ex    DE, HL 
92c2			 
92c2 09			      add   HL, BC                  ; Add addr of freed block and its size 
92c3			 
92c3 dd 5e 00		      ld    E, (IX+0)               ; Load addr of next free block into DE 
92c6 dd 56 01		      ld    D, (IX+1) 
92c9			 
92c9 b7			      or    A                       ; Clear the carry flag 
92ca ed 52		      sbc   HL, DE                  ; Subtract addrs to compare adjacency 
92cc 20 22		      jr    NZ, free_check_adjacent_to_prev 
92ce			 
92ce			      ; Freed block is adjacent to next, merge into one bigger block 
92ce eb			      ex    DE, HL                  ; Load next ptr from next block into DE 
92cf 5e			      ld    E, (HL) 
92d0 23			      inc   HL 
92d1 56			      ld    D, (HL) 
92d2 e5			      push  HL                      ; Save ptr to next block for later 
92d3			 
92d3 60			      ld    H, B                    ; Store ptr from next block into freed block 
92d4 69			      ld    L, C 
92d5 73			      ld    (HL), E 
92d6 23			      inc   HL 
92d7 72			      ld    (HL), D 
92d8			 
92d8 e1			      pop   HL                      ; Restore ptr to next block 
92d9 23			      inc   HL                      ; Load size of next block into DE 
92da 5e			      ld    E, (HL) 
92db 23			      inc   HL 
92dc 56			      ld    D, (HL) 
92dd d5			      push  DE                      ; Save next block size for later 
92de			 
92de 60			      ld    H, B                    ; Load size of freed block into HL 
92df 69			      ld    L, C 
92e0 23			      inc   HL 
92e1 23			      inc   HL 
92e2 5e			      ld    E, (HL) 
92e3 23			      inc   HL 
92e4 56			      ld    D, (HL) 
92e5 eb			      ex    DE, HL 
92e6			 
92e6 d1			      pop   DE                      ; Restore size of next block 
92e7 19			      add   HL, DE                  ; Add sizes of both blocks 
92e8 eb			      ex    DE, HL 
92e9			 
92e9 60			      ld    H, B                    ; Store new bigger size into freed block 
92ea 69			      ld    L, C 
92eb 23			      inc   HL 
92ec 23			      inc   HL 
92ed 73			      ld    (HL), E 
92ee 23			      inc   HL 
92ef 72			      ld    (HL), D 
92f0			 
92f0			free_check_adjacent_to_prev: 
92f0			      ; Check if the freed block is adjacent to the prev free block 
92f0 dd 6e 02		      ld    L, (IX+2)               ; Prev free block ptr into HL 
92f3 dd 66 03		      ld    H, (IX+3) 
92f6			 
92f6 23			      inc   HL                      ; Size of prev free block into DE 
92f7 23			      inc   HL 
92f8 5e			      ld    E, (HL) 
92f9 23			      inc   HL 
92fa 56			      ld    D, (HL) 
92fb 2b			      dec   HL 
92fc 2b			      dec   HL 
92fd 2b			      dec   HL 
92fe			 
92fe 19			      add   HL, DE                  ; Add prev block addr and size 
92ff			 
92ff b7			      or    A                       ; Clear the carry flag 
9300 ed 42		      sbc   HL, BC                  ; Subtract addrs to compare adjacency 
9302 20 2e		      jr    NZ, free_done 
9304			 
9304			      ; Freed block is adjacent to prev, merge into one bigger block 
9304 60			      ld    H, B                    ; Load next ptr from freed block into DE 
9305 69			      ld    L, C 
9306 5e			      ld    E, (HL) 
9307 23			      inc   HL 
9308 56			      ld    D, (HL) 
9309 e5			      push  HL                      ; Save freed block ptr for later 
930a			 
930a dd 6e 02		      ld    L, (IX+2)               ; Store freed block ptr into prev block 
930d dd 66 03		      ld    H, (IX+3) 
9310 73			      ld    (HL), E 
9311 23			      inc   HL 
9312 72			      ld    (HL), D 
9313			 
9313 e1			      pop   HL                      ; Restore freed block ptr 
9314 23			      inc   HL                      ; Load size of freed block into DE 
9315 5e			      ld    E, (HL) 
9316 23			      inc   HL 
9317 56			      ld    D, (HL) 
9318 d5			      push  DE                      ; Save freed block size for later 
9319			 
9319 dd 6e 02		      ld    L, (IX+2)               ; Load size of prev block into DE 
931c dd 66 03		      ld    H, (IX+3) 
931f 23			      inc   HL 
9320 23			      inc   HL 
9321 5e			      ld    E, (HL) 
9322 23			      inc   HL 
9323 56			      ld    D, (HL) 
9324			 
9324 e1			      pop   HL                      ; Add sizes of both blocks 
9325 19			      add   HL, DE 
9326 eb			      ex    DE, HL 
9327			 
9327 dd 6e 02		      ld    L, (IX+2)               ; Store new bigger size into prev block 
932a dd 66 03		      ld    H, (IX+3) 
932d 23			      inc   HL 
932e 23			      inc   HL 
932f 73			      ld    (HL), E 
9330 23			      inc   HL 
9331 72			      ld    (HL), D 
9332			 
9332			free_done: 
9332 21 04 00		      ld    HL, 4                   ; Clean up stack frame 
9335 39			      add   HL, SP 
9336 f9			      ld    SP, HL 
9337			 
9337			free_early_exit: 
9337 dd e1		      pop   IX 
9339 d1			      pop   DE 
933a c1			      pop   BC 
933b			 
933b c9			      ret 
933c			 
933c			; moved to firmware.asm 
933c			; 
933c			;free_list         .dw   0     ; Block struct for start of free list (MUST be 4 bytes) 
933c			;                  .dw   0 
933c			 
933c			 
933c			endif 
933c			 
933c			 
933c			if MALLOC_3 
933c			; https://gist.githubusercontent.com/tomstorey/947a8b084bad69391a4b2a1c5b6d69ca/raw/5a08fb30a480d98c0deb4a6afe2d48961cc8e9d9/z80_malloc.s 
933c			;heap_start        .equ  0x9000      ; Starting address of heap 
933c			;heap_size         .equ  0x0100      ; Number of bytes available in heap 
933c			; 
933c			 ;     .org 0 
933c			  ;    jp    main 
933c			; 
933c			; 
933c			 ;     .org  0x100 
933c			;main: 
933c			 ;     ld    HL, 0x8100 
933c			  ;    ld    SP, HL 
933c			; 
933c			;      call  heap_init 
933c			 
933c			      ; Make some allocations 
933c			;      ld    HL, 12 
933c			;      call  malloc            ; Allocates 0x9004 
933c			; 
933c			 ;     ld    HL, 12 
933c			;      call  malloc            ; Allocates 0x9014 
933c			 
933c			;      ld    HL, 12 
933c			;      call  malloc            ; Allocates 0x9024 
933c			 
933c			      ; Free some allocations 
933c			;      ld    HL, 0x9014 
933c			;      call  free 
933c			 
933c			;      ld    HL, 0x9004 
933c			;      call  free 
933c			; 
933c			;      ld    HL, 0x9024 
933c			;      call  free 
933c			 
933c			 
933c			 ;     halt 
933c			 
933c			 
933c			;------------------------------------------------------------------------------ 
933c			;     heap_init                                                               : 
933c			;                                                                             : 
933c			; Description                                                                 : 
933c			;     Initialise the heap and make it ready for malloc and free operations.   : 
933c			;                                                                             : 
933c			;     The heap is maintained as a linked list, starting with an initial       : 
933c			;     "dummy block" of zero size which is mainly used to hold a pointer to    : 
933c			;     the first free block in the heap. Each block then points to the next    : 
933c			;     free block within the heap, and the free list ends at the first block   : 
933c			;     with a null pointer to the next free block.                             : 
933c			;                                                                             : 
933c			; Parameters                                                                  : 
933c			;     Inputs are compile-time only. Two defines which specify the starting    : 
933c			;     address of the heap and its size are required, along with a memory      : 
933c			;     allocation of 4 consecutive bytes which is used for a dummy block which : 
933c			;     principally stores a pointer to the first free block in the heap.       : 
933c			;                                                                             : 
933c			; Returns                                                                     : 
933c			;     Nothing                                                                 : 
933c			;------------------------------------------------------------------------------ 
933c			heap_init: 
933c			      push  HL 
933c			 
933c			      ; Initialise free list struct 
933c			      ld    HL, heap_start 
933c			      ld    (free_list), HL 
933c			      ld    HL, 0 
933c			      ld    (free_list+2), HL 
933c			 
933c			      ; Insert first free block at bottom of heap, consumes entire heap 
933c			      ld    HL, heap_start+heap_size-4 
933c			      ld    (heap_start), HL        ; Next block (end of free list) 
933c			      ld    HL, heap_size-4 
933c			      ld    (heap_start+2), HL      ; Block size 
933c			 
933c			      ; Insert end of free list block at top of heap - two null words will 
933c			      ; terminate the free list 
933c			      ld    HL, 0 
933c			      ld    (heap_start+heap_size-2), HL 
933c			      ld    (heap_start+heap_size-4), HL 
933c			 
933c			      pop   HL 
933c			 
933c			      ret 
933c			 
933c			 
933c			;------------------------------------------------------------------------------ 
933c			;     malloc                                                                  : 
933c			;                                                                             : 
933c			; Description                                                                 : 
933c			;     Allocates the wanted space from the heap and returns the address of the : 
933c			;     first useable byte of the allocation.                                   : 
933c			;                                                                             : 
933c			;     Allocations can happen in one of two ways:                              : 
933c			;                                                                             : 
933c			;     1. A free block may be found which is the exact size wanted. In this    : 
933c			;        case the block is removed from the free list and retuedn to the      : 
933c			;        caller.                                                              : 
933c			;     2. A free block may be found which is larger than the size wanted. In   : 
933c			;        this case, the larger block is split into two. The first portion of  : 
933c			;        this block will become the requested space by the malloc call and    : 
933c			;        is returned to the caller. The second portion becomes a new free     : 
933c			;        block, and the free list is adjusted to maintain continuity via this : 
933c			;        newly created block.                                                 : 
933c			;                                                                             : 
933c			;     malloc does not set any initial value in the allocated space, the       : 
933c			;     caller is required to do this as required.                              : 
933c			;                                                                             : 
933c			;     This implementation of malloc uses the stack exclusively, and is        : 
933c			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
933c			;     advisable to disable interrupts before calling malloc, and recommended  : 
933c			;     to avoid the use of malloc inside ISRs in general.                      : 
933c			;                                                                             : 
933c			;     NOTE: heap_init must be called before malloc and free can be used.      : 
933c			;                                                                             : 
933c			; Parameters                                                                  : 
933c			;     HL  Number of bytes wanted                                              : 
933c			;                                                                             : 
933c			; Returns                                                                     : 
933c			;     HL  Address of the first useable byte of the allocation                 : 
933c			;                                                                             : 
933c			; Flags                                                                       : 
933c			;     Z   Set if the allocation did not succeed, clear otherwise              : 
933c			;                                                                             : 
933c			; Stack frame                                                                 : 
933c			;       |             |                                                       : 
933c			;       +-------------+                                                       : 
933c			;       |     BC      |                                                       : 
933c			;       +-------------+                                                       : 
933c			;       |     DE      |                                                       : 
933c			;       +-------------+                                                       : 
933c			;       |     IX      |                                                       : 
933c			;       +-------------+                                                       : 
933c			;       |  prev_free  |                                                       : 
933c			;   +4  +-------------+                                                       : 
933c			;       |  this_free  |                                                       : 
933c			;   +2  +-------------+                                                       : 
933c			;       |  next_free  |                                                       : 
933c			;   +0  +-------------+                                                       : 
933c			;       |             |                                                       : 
933c			;                                                                             : 
933c			;------------------------------------------------------------------------------ 
933c			malloc: 
933c			      push  BC 
933c			      push  DE 
933c			      push  IX 
933c			 
933c			      ld    A, H                    ; Exit if no space requested 
933c			      or    L 
933c			      jp    Z, malloc_early_exit 
933c			 
933c			      ; Set up stack frame 
933c			      ex    DE, HL 
933c			      ld    HL, -6                  ; Reserve 6 bytes for stack frame 
933c			      add   HL, SP 
933c			      ld    SP, HL 
933c			      ld    IX, 0                   ; Use IX as a frame pointer 
933c			      add   IX, SP 
933c			 
933c			      ; Setup initial state 
933c			      ld    HL, 4                   ; want must also include space used by block struct 
933c			      add   HL, DE 
933c			 
933c			      ld    B, H                    ; Move want to BC 
933c			      ld    C, L 
933c			 
933c			      ld    HL, free_list           ; Store prev_free ptr to stack 
933c			      ld    (IX+4), L 
933c			      ld    (IX+5), H 
933c			 
933c			      ld    E, (HL)                 ; Store this_free ptr to stack 
933c			      inc   HL 
933c			      ld    D, (HL) 
933c			      ld    (IX+2), E 
933c			      ld    (IX+3), D 
933c			      ex    DE, HL                  ; this_free ptr into HL 
933c			 
933c			      ; Loop through free block list to find some space 
933c			malloc_find_space: 
933c			      ld    E, (HL)                 ; Load next_free ptr into DE 
933c			      inc   HL 
933c			      ld    D, (HL) 
933c			 
933c			      ld    A, D                    ; Check for null next_free ptr - end of free list 
933c			      or    E 
933c			      jp    Z, malloc_no_space 
933c			 
933c			      ld    (IX+0), E               ; Store next_free ptr to stack 
933c			      ld    (IX+1), D 
933c			 
933c			      ; Does this block have enough space to make the allocation? 
933c			      inc   HL                      ; Load free block size into DE 
933c			      ld    E, (HL) 
933c			      inc   HL 
933c			      ld    D, (HL) 
933c			 
933c			      ex    DE, HL                  ; Check size of block against want 
933c			      or    A                       ; Ensure carry flag clear 
933c			      sbc   HL, BC 
933c			      push  HL                      ; Store the result for later (new block size) 
933c			 
933c			      jr    Z, malloc_alloc_fit     ; Z means block size matches want - can allocate 
933c			      jr    NC, malloc_alloc_split  ; NC means block is bigger than want - can allocate 
933c			 
933c			      ; this_free block is not big enough, setup ptrs to test next free block 
933c			      pop   HL                      ; Discard previous result 
933c			 
933c			      ld    L, (IX+2)               ; Move this_free ptr into prev_free 
933c			      ld    H, (IX+3) 
933c			      ld    (IX+4), L 
933c			      ld    (IX+5), H 
933c			 
933c			      ld    L, (IX+0)               ; Move next_free ptr into this_free 
933c			      ld    H, (IX+1) 
933c			      ld    (IX+2), L 
933c			      ld    (IX+3), H 
933c			 
933c			      jr    malloc_find_space 
933c			 
933c			      ; split a bigger block into two - requested size and remaining size 
933c			malloc_alloc_split: 
933c			      ex    DE, HL                  ; Calculate address of new free block 
933c			      dec   HL 
933c			      dec   HL 
933c			      dec   HL 
933c			      add   HL, BC 
933c			 
933c			      ; Create a new block and point it at next_free 
933c			      ld    E, (IX+0)               ; Load next_free ptr into DE 
933c			      ld    D, (IX+1) 
933c			 
933c			      ld    (HL), E                 ; Store next_free ptr into new block 
933c			      inc   HL 
933c			      ld    (HL), D 
933c			 
933c			      pop   DE                      ; Store size of new block into new block 
933c			      inc   HL 
933c			      ld    (HL), E 
933c			      inc   HL 
933c			      ld    (HL), D 
933c			 
933c			      ; Update this_free ptr to point to new block 
933c			      dec   HL 
933c			      dec   HL 
933c			      dec   HL 
933c			 
933c			      ld    E, (IX+2)               ; Take a copy of current this_free ptr 
933c			      ld    D, (IX+3) 
933c			 
933c			      ld    (IX+2), L               ; Store new block addr as this_free ptr 
933c			      ld    (IX+3), H 
933c			 
933c			      ; Modify this_free block to be allocation 
933c			      ex    DE, HL 
933c			      xor   A                       ; Null the next block ptr of allocated block 
933c			      ld    (HL), A 
933c			      inc   HL 
933c			      ld    (HL), A 
933c			 
933c			      inc   HL                      ; Store want size into allocated block 
933c			      ld    (HL), C 
933c			      inc   HL 
933c			      ld    (HL), B 
933c			      inc   HL 
933c			      push  HL                      ; Address of allocation to return 
933c			 
933c			      jr    malloc_update_links 
933c			 
933c			malloc_alloc_fit: 
933c			      pop   HL                      ; Dont need new block size, want is exact fit 
933c			 
933c			      ; Modify this_free block to be allocation 
933c			      ex    DE, HL 
933c			      dec   HL 
933c			      dec   HL 
933c			      dec   HL 
933c			 
933c			      xor   A                       ; Null the next block ptr of allocated block 
933c			      ld    (HL), A 
933c			      inc   HL 
933c			      ld    (HL), A 
933c			 
933c			      inc   HL                      ; Store address of allocation to return 
933c			      inc   HL 
933c			      inc   HL 
933c			      push  HL 
933c			 
933c			      ; Copy next_free ptr to this_free, remove allocated block from free list 
933c			      ld    L, (IX+0)               ; next_free to HL 
933c			      ld    H, (IX+1) 
933c			 
933c			      ld    (IX+2), L               ; HL to this_free 
933c			      ld    (IX+3), H 
933c			 
933c			 
933c			malloc_update_links: 
933c			      ; Update prev_free ptr to point to this_free 
933c			      ld    L, (IX+4)               ; prev_free ptr to HL 
933c			      ld    H, (IX+5) 
933c			 
933c			      ld    E, (IX+2)               ; this_free ptr to DE 
933c			      ld    D, (IX+3) 
933c			 
933c			      ld    (HL), E                 ; this_free ptr into prev_free 
933c			      inc   HL 
933c			      ld    (HL), D 
933c			 
933c			      ; Clear the Z flag to indicate successful allocation 
933c			      ld    A, D 
933c			      or    E 
933c			 
933c			      pop   DE                      ; Address of allocation 
933c			 
933c			malloc_no_space: 
933c			      ld    HL, 6                   ; Clean up stack frame 
933c			      add   HL, SP 
933c			      ld    SP, HL 
933c			 
933c			      ex    DE, HL                  ; Alloc addr into HL for return 
933c			 
933c			malloc_early_exit: 
933c			      pop   IX 
933c			      pop   DE 
933c			      pop   BC 
933c			 
933c			      ret 
933c			 
933c			 
933c			;------------------------------------------------------------------------------ 
933c			;     free                                                                    : 
933c			;                                                                             : 
933c			; Description                                                                 : 
933c			;     Return the space pointed to by HL to the heap. HL must be an address as : 
933c			;     returned by malloc, otherwise the behaviour is undefined.               : 
933c			;                                                                             : 
933c			;     Where possible, directly adjacent free blocks will be merged together   : 
933c			;     into larger blocks to help ensure that the heap does not become         : 
933c			;     excessively fragmented.                                                 : 
933c			;                                                                             : 
933c			;     free does not clear or set any other value into the freed space, and    : 
933c			;     therefore its contents may be visible through subsequent malloc's. The  : 
933c			;     caller should clear the freed space as required.                        : 
933c			;                                                                             : 
933c			;     This implementation of free uses the stack exclusively, and is          : 
933c			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
933c			;     advisable to disable interrupts before calling free, and recommended    : 
933c			;     to avoid the use of free inside ISRs in general.                        : 
933c			;                                                                             : 
933c			;     NOTE: heap_init must be called before malloc and free can be used.      : 
933c			;                                                                             : 
933c			; Parameters                                                                  : 
933c			;     HL  Pointer to address of first byte of allocation to be freed          : 
933c			;                                                                             : 
933c			; Returns                                                                     : 
933c			;     Nothing                                                                 : 
933c			;                                                                             : 
933c			; Stack frame                                                                 : 
933c			;       |             |                                                       : 
933c			;       +-------------+                                                       : 
933c			;       |     BC      |                                                       : 
933c			;       +-------------+                                                       : 
933c			;       |     DE      |                                                       : 
933c			;       +-------------+                                                       : 
933c			;       |     IX      |                                                       : 
933c			;       +-------------+                                                       : 
933c			;       |  prev_free  |                                                       : 
933c			;   +2  +-------------+                                                       : 
933c			;       |  next_free  |                                                       : 
933c			;   +0  +-------------+                                                       : 
933c			;       |             |                                                       : 
933c			;                                                                             : 
933c			;------------------------------------------------------------------------------ 
933c			free: 
933c			      push  BC 
933c			      push  DE 
933c			      push  IX 
933c			 
933c			      ld    A, H                    ; Exit if ptr is null 
933c			      or    L 
933c			      jp    Z, free_early_exit 
933c			 
933c			      ; Set up stack frame 
933c			      ex    DE, HL 
933c			      ld    HL, -4                  ; Reserve 4 bytes for stack frame 
933c			      add   HL, SP 
933c			      ld    SP, HL 
933c			      ld    IX, 0                   ; Use IX as a frame pointer 
933c			      add   IX, SP 
933c			 
933c			      ; The address in HL points to the start of the useable allocated space, 
933c			      ; but the block struct starts 4 bytes before this. Sub 4 to get the 
933c			      ; address of the block itself. 
933c			      ex    DE, HL 
933c			      ld    DE, -4 
933c			      add   HL, DE 
933c			 
933c			      ; An allocated block must have a null next block pointer in it 
933c			      ld    A, (HL) 
933c			      inc   HL 
933c			      or    (HL) 
933c			      jp    NZ, free_done 
933c			 
933c			      dec   HL 
933c			 
933c			      ld    B, H                    ; Copy HL to BC 
933c			      ld    C, L 
933c			 
933c			      ; Loop through the free list to find the first block with an address 
933c			      ; higher than the block being freed 
933c			      ld    HL, free_list 
933c			 
933c			free_find_higher_block: 
933c			      ld    E, (HL)                 ; Load next ptr from free block 
933c			      inc   HL 
933c			      ld    D, (HL) 
933c			      dec   HL 
933c			 
933c			      ld    (IX+0), E               ; Save ptr to next free block 
933c			      ld    (IX+1), D 
933c			      ld    (IX+2), L               ; Save ptr to prev free block 
933c			      ld    (IX+3), H 
933c			 
933c			      ld    A, B                    ; Check if DE is greater than BC 
933c			      cp    D                       ; Compare MSB first 
933c			      jr    Z, $+4                  ; MSB the same, compare LSB 
933c			      jr    NC, free_find_higher_block_skip 
933c			      ld    A, C 
933c			      cp    E                       ; Then compare LSB 
933c			      jr    C, free_found_higher_block 
933c			 
933c			free_find_higher_block_skip: 
933c			      ld    A, D                    ; Reached the end of the free list? 
933c			      or    E 
933c			      jp    Z, free_done 
933c			 
933c			      ex    DE, HL 
933c			 
933c			      jr    free_find_higher_block 
933c			 
933c			free_found_higher_block: 
933c			      ; Insert freed block between prev and next free blocks 
933c			      ld    (HL), C                 ; Point prev free block to freed block 
933c			      inc   HL 
933c			      ld    (HL), B 
933c			 
933c			      ld    H, B                    ; Point freed block at next free block 
933c			      ld    L, C 
933c			      ld    (HL), E 
933c			      inc   HL 
933c			      ld    (HL), D 
933c			 
933c			      ; Check if the freed block is adjacent to the next free block 
933c			      inc   HL                      ; Load size of freed block into HL 
933c			      ld    E, (HL) 
933c			      inc   HL 
933c			      ld    D, (HL) 
933c			      ex    DE, HL 
933c			 
933c			      add   HL, BC                  ; Add addr of freed block and its size 
933c			 
933c			      ld    E, (IX+0)               ; Load addr of next free block into DE 
933c			      ld    D, (IX+1) 
933c			 
933c			      or    A                       ; Clear the carry flag 
933c			      sbc   HL, DE                  ; Subtract addrs to compare adjacency 
933c			      jr    NZ, free_check_adjacent_to_prev 
933c			 
933c			      ; Freed block is adjacent to next, merge into one bigger block 
933c			      ex    DE, HL                  ; Load next ptr from next block into DE 
933c			      ld    E, (HL) 
933c			      inc   HL 
933c			      ld    D, (HL) 
933c			      push  HL                      ; Save ptr to next block for later 
933c			 
933c			      ld    H, B                    ; Store ptr from next block into freed block 
933c			      ld    L, C 
933c			      ld    (HL), E 
933c			      inc   HL 
933c			      ld    (HL), D 
933c			 
933c			      pop   HL                      ; Restore ptr to next block 
933c			      inc   HL                      ; Load size of next block into DE 
933c			      ld    E, (HL) 
933c			      inc   HL 
933c			      ld    D, (HL) 
933c			      push  DE                      ; Save next block size for later 
933c			 
933c			      ld    H, B                    ; Load size of freed block into HL 
933c			      ld    L, C 
933c			      inc   HL 
933c			      inc   HL 
933c			      ld    E, (HL) 
933c			      inc   HL 
933c			      ld    D, (HL) 
933c			      ex    DE, HL 
933c			 
933c			      pop   DE                      ; Restore size of next block 
933c			      add   HL, DE                  ; Add sizes of both blocks 
933c			      ex    DE, HL 
933c			 
933c			      ld    H, B                    ; Store new bigger size into freed block 
933c			      ld    L, C 
933c			      inc   HL 
933c			      inc   HL 
933c			      ld    (HL), E 
933c			      inc   HL 
933c			      ld    (HL), D 
933c			 
933c			free_check_adjacent_to_prev: 
933c			      ; Check if the freed block is adjacent to the prev free block 
933c			      ld    L, (IX+2)               ; Prev free block ptr into HL 
933c			      ld    H, (IX+3) 
933c			 
933c			      inc   HL                      ; Size of prev free block into DE 
933c			      inc   HL 
933c			      ld    E, (HL) 
933c			      inc   HL 
933c			      ld    D, (HL) 
933c			      dec   HL 
933c			      dec   HL 
933c			      dec   HL 
933c			 
933c			      add   HL, DE                  ; Add prev block addr and size 
933c			 
933c			      or    A                       ; Clear the carry flag 
933c			      sbc   HL, BC                  ; Subtract addrs to compare adjacency 
933c			      jr    NZ, free_done 
933c			 
933c			      ; Freed block is adjacent to prev, merge into one bigger block 
933c			      ld    H, B                    ; Load next ptr from freed block into DE 
933c			      ld    L, C 
933c			      ld    E, (HL) 
933c			      inc   HL 
933c			      ld    D, (HL) 
933c			      push  HL                      ; Save freed block ptr for later 
933c			 
933c			      ld    L, (IX+2)               ; Store freed block ptr into prev block 
933c			      ld    H, (IX+3) 
933c			      ld    (HL), E 
933c			      inc   HL 
933c			      ld    (HL), D 
933c			 
933c			      pop   HL                      ; Restore freed block ptr 
933c			      inc   HL                      ; Load size of freed block into DE 
933c			      ld    E, (HL) 
933c			      inc   HL 
933c			      ld    D, (HL) 
933c			      push  DE                      ; Save freed block size for later 
933c			 
933c			      ld    L, (IX+2)               ; Load size of prev block into DE 
933c			      ld    H, (IX+3) 
933c			      inc   HL 
933c			      inc   HL 
933c			      ld    E, (HL) 
933c			      inc   HL 
933c			      ld    D, (HL) 
933c			 
933c			      pop   HL                      ; Add sizes of both blocks 
933c			      add   HL, DE 
933c			      ex    DE, HL 
933c			 
933c			      ld    L, (IX+2)               ; Store new bigger size into prev block 
933c			      ld    H, (IX+3) 
933c			      inc   HL 
933c			      inc   HL 
933c			      ld    (HL), E 
933c			      inc   HL 
933c			      ld    (HL), D 
933c			 
933c			free_done: 
933c			      ld    HL, 4                   ; Clean up stack frame 
933c			      add   HL, SP 
933c			      ld    SP, HL 
933c			 
933c			free_early_exit: 
933c			      pop   IX 
933c			      pop   DE 
933c			      pop   BC 
933c			 
933c			      ret 
933c			 
933c			 
933c			;      .org 0x8000 
933c			; 
933c			;free_list         .dw   0     ; Block struct for start of free list (MUST be 4 bytes) 
933c			 ;                 .dw   0 
933c			 
933c			endif 
933c			 
933c			 
933c			if MALLOC_4 
933c			 
933c			; My memory allocation code. Very very simple.... 
933c			; allocate space under 250 chars 
933c			 
933c			heap_init: 
933c				; init start of heap as zero 
933c				;  
933c			 
933c				ld hl, heap_start 
933c				ld a, 0 
933c				ld (hl), a      ; empty block 
933c				inc hl 
933c				ld a, 0 
933c				ld (hl), a      ; length of block 
933c				; write end of list 
933c				inc hl 
933c				ld a,(hl) 
933c				inc hl 
933c				ld a,(hl) 
933c				 
933c			 
933c				; init some malloc vars 
933c			 
933c				ld hl, 0 
933c				ld (free_list), hl       ; store last malloc location 
933c			 
933c				ld hl, free_list+3      ; flag for 'free' being used and force a rescan for reuse of block  
933c				ld a, 0 
933c				ld (hl), a 
933c			 
933c			 
933c				ld hl, heap_start 
933c				;  
933c				  
933c				ret 
933c			 
933c			 
933c			;    free block marker 
933c			;    requested size  
933c			;    pointer to next block 
933c			;    .... 
933c			;    next block marker 
933c			 
933c			 
933c			; TODO add a flag that is reset on use of free. if flag is reset then start scan from start of heap otherwise use last location 
933c			; 
933c			 
933c			 
933c			malloc:  
933c				push de 
933c				push bc 
933c				push af 
933c			 
933c				; hl space required 
933c				 
933c				ld c, l    ; hold space   (TODO only a max of 255) 
933c			 
933c			;	inc c     ; TODO BUG need to fix memory leak on push str 
933c			;	inc c 
933c			;	inc c 
933c			;	inc c 
933c			;	inc c 
933c			;	inc c 
933c			;	inc c 
933c			 
933c			 
933c			 
933c				; start at heap if a free has been issued so we can reclaim it otherwise continue from last time 
933c			 
933c				ld a, (free_list+3) 
933c				cp 0 
933c				jr z, .contheap 
933c			 
933c				ld hl, (free_list)     ; get last alloc 
933c					if DEBUG_FORTH_MALLOC_INT 
933c						DMARK "mrs" 
933c						CALLMONITOR 
933c					endif 
933c				jr .startalloc 
933c			 
933c			.contheap: 
933c				ld hl, heap_start 
933c			 
933c			.startalloc: 
933c			 
933c					if DEBUG_FORTH_MALLOC_INT 
933c						DMARK "mym" 
933c						CALLMONITOR 
933c					endif 
933c			.findblock: 
933c					if DEBUG_FORTH_MALLOC_INT 
933c						DMARK "mmf" 
933c						CALLMONITOR 
933c					endif 
933c			 
933c				ld a,(hl)  
933c				; if byte is zero then clear to use 
933c			 
933c				cp 0 
933c				jr z, .foundemptyblock 
933c			 
933c				; if byte is not clear 
933c				;     then byte is offset to next block 
933c			 
933c				inc hl 
933c				ld a, (hl) ; get size 
933c			.nextblock:	inc hl 
933c					ld e, (hl) 
933c					inc hl 
933c					ld d, (hl) 
933c					ex de, hl 
933c			;	inc hl  ; move past the store space 
933c			;	inc hl  ; move past zero index  
933c			 
933c				; TODO detect no more space 
933c			 
933c				push hl 
933c				ld de, heap_end 
933c				call cmp16 
933c				pop hl 
933c				jr nc, .nospace 
933c			 
933c				jr .findblock 
933c			 
933c			.nospace: ld hl, 0 
933c				jp .exit 
933c			 
933c			 
933c			.foundemptyblock:	 
933c					if DEBUG_FORTH_MALLOC_INT 
933c						DMARK "mme" 
933c						CALLMONITOR 
933c					endif 
933c			 
933c			; TODO has block enough space if reusing??? 
933c			 
933c				;  
933c			 
933c			; see if this block has been previously used 
933c				inc hl 
933c				ld a, (hl) 
933c				dec hl 
933c				cp 0 
933c				jr z, .newblock 
933c			 
933c					if DEBUG_FORTH_MALLOC_INT 
933c						DMARK "meR" 
933c						CALLMONITOR 
933c					endif 
933c			 
933c			; no reusing previously allocated block 
933c			 
933c			; is it smaller than previously used? 
933c				 
933c				inc hl    ; move to size 
933c				ld a, c 
933c				sub (hl)        ; we want c < (hl) 
933c				dec hl    ; move back to marker 
933c			        jr z, .findblock 
933c			 
933c				; update with the new size which should be lower 
933c			 
933c			        ;inc  hl   ; negate next move. move back to size  
933c			 
933c			.newblock: 
933c				; need to be at marker here 
933c			 
933c					if DEBUG_FORTH_MALLOC_INT 
933c						DMARK "meN" 
933c						CALLMONITOR 
933c					endif 
933c			 
933c			 
933c				ld a, c 
933c			 
933c				ld (free_list+3), a	 ; flag resume from last malloc  
933c				ld (free_list), hl    ; save out last location 
933c			 
933c			 
933c				;inc a     ; space for length byte 
933c				ld (hl), a     ; save block in use marker 
933c			 
933c				inc hl   ; move to space marker 
933c				ld (hl), a    ; save new space 
933c			 
933c				inc hl   ; move to start of allocated area 
933c				 
933c			;	push hl     ; save where we are - 1  
933c			 
933c			;	inc hl  ; move past zero index  
933c				; skip space to set down new marker 
933c			 
933c				; provide some extra space for now 
933c			 
933c				inc a    ; actual is one fewer than bytes requested. correct if zero index is taken into account 
933c				inc a 
933c				inc a 
933c			 
933c				push hl   ; save where we are in the node block 
933c			 
933c				call addatohl 
933c			 
933c				; write linked list point 
933c			 
933c				pop de     ; get our node position 
933c				ex de, hl 
933c			 
933c				ld (hl), e 
933c				inc hl 
933c				ld (hl), d 
933c			 
933c				inc hl 
933c			 
933c				; now at start of allocated data so save pointer 
933c			 
933c				push hl 
933c			 
933c				; jump to position of next node and setup empty header in DE 
933c			 
933c				ex de, hl 
933c			 
933c			;	inc hl ; move past end of block 
933c			 
933c				ld a, 0 
933c				ld (hl), a   ; empty marker 
933c				inc hl 
933c				ld (hl), a   ; size 
933c				inc hl  
933c				ld (hl), a   ; ptr 
933c				inc hl 
933c				ld (hl), a   ; ptr 
933c			 
933c			 
933c				pop hl 
933c			 
933c					if DEBUG_FORTH_MALLOC_INT 
933c						DMARK "mmr" 
933c						CALLMONITOR 
933c					endif 
933c			 
933c			.exit: 
933c				pop af 
933c				pop bc 
933c				pop de  
933c				ret 
933c			 
933c			 
933c			 
933c			 
933c			free:  
933c				push hl 
933c				push af 
933c				; get address in hl 
933c			 
933c					if DEBUG_FORTH_MALLOC_INT 
933c						DMARK "fre" 
933c						CALLMONITOR 
933c					endif 
933c				; data is at hl - move to block count 
933c				dec hl 
933c				dec hl    ; get past pointer 
933c				dec hl 
933c			 
933c				ld a, (hl)    ; need this for a validation check 
933c			 
933c				dec hl    ; move to block marker 
933c			 
933c				; now check that the block count and block marker are the same  
933c			        ; this checks that we are on a malloc node and not random memory 
933c			        ; OK a faint chance this could be a problem but rare - famous last words! 
933c			 
933c				ld c, a 
933c				ld a, (hl)    
933c			 
933c				cp c 
933c				jr nz, .freeignore      ; not a valid malloc node in use so dont break anything 
933c			 
933c				; yes good chance we are on a malloc node 
933c			 
933c				ld a, 0      
933c				ld (hl), a   ; mark as free 
933c			 
933c				ld (free_list+3), a	 ; flag reuse of existing block on next malloc 
933c			 
933c			.freeignore:  
933c			 
933c				pop af 
933c				pop hl 
933c			 
933c				ret 
933c			 
933c			 
933c			 
933c			endif 
933c			 
933c			; eof 
# End of file firmware_memory.asm
933c			  
933c			; device C  
933c			; Now handled by SPI  
933c			;if SOUND_ENABLE  
933c			;	include "firmware_sound.asm"  
933c			;endif  
933c			  
933c			include "firmware_diags.asm"  
933c			; Hardware diags menu 
933c			 
933c			 
933c			config: 
933c			 
933c 3e 00			ld a, 0 
933e 21 62 93			ld hl, .configmn 
9341 cd e0 8a			call menu 
9344			 
9344 fe 00			cp 0 
9346 c8				ret z 
9347			 
9347			;	cp 1 
9347			;	call z, .savetostore 
9347			 
9347 fe 01			cp 1 
9349			if STARTUP_V1 
9349 cc 78 93			call z, .selautoload 
934c			endif 
934c			 
934c			if STARTUP_V2 
934c				call z, .enautoload 
934c			endif 
934c fe 02			cp 2 
934e cc 6e 93			call z, .disautoload 
9351			;	cp 3 
9351			;	call z, .selbank 
9351 fe 03			cp 3 
9353 cc 96 93			call z, .debug_tog 
9356 fe 04			cp 4 
9358 cc e4 94			call z, .bpsgo 
935b fe 05			cp 5 
935d cc bf 93			call z, hardware_diags 
9360			if STARTUP_V2 
9360				cp 6 
9360				call z, create_startup 
9360			endif 
9360 18 da			jr config 
9362			 
9362			.configmn: 
9362			;	dw prom_c3 
9362 d2 96			dw prom_c2 
9364 e7 96			dw prom_c2a 
9366			;	dw prom_c2b 
9366			;	dw prom_c4 
9366 06 97			dw prom_m4 
9368 21 97			dw prom_m4b 
936a 29 97			dw prom_c1 
936c			if STARTUP_V2 
936c				dw prom_c9 
936c			endif 
936c 00 00			dw 0 
936e				 
936e			 
936e			if STARTUP_V2 
936e			.enautoload: 
936e				if STORAGE_SE 
936e				ld a, $fe      ; bit 0 clear 
936e				ld (spi_device), a 
936e			 
936e				call storage_get_block_0 
936e			 
936e				ld a, 1 
936e				ld (store_page+STORE_0_AUTOFILE), a 
936e			 
936e					ld hl, 0 
936e					ld de, store_page 
936e				call storage_write_block	 ; save update 
936e				else 
936e			 
936e				ld hl, prom_notav 
936e				ld de, prom_empty 
936e				call info_panel 
936e				endif 
936e			 
936e			 
936e				ret 
936e			endif 
936e			 
936e			.disautoload: 
936e				if STORAGE_SE 
936e				ld a, $fe      ; bit 0 clear 
936e				ld (spi_device), a 
936e			 
936e				call storage_get_block_0 
936e			 
936e				ld a, 0 
936e				ld (store_page+STORE_0_AUTOFILE), a 
936e			 
936e					ld hl, 0 
936e					ld de, store_page 
936e				call storage_write_block	 ; save update 
936e				else 
936e			 
936e 21 38 97			ld hl, prom_notav 
9371 11 4e 97			ld de, prom_empty 
9374 cd 40 8a			call info_panel 
9377				endif 
9377			 
9377			 
9377 c9				ret 
9378			 
9378			if STARTUP_V1 
9378			 
9378			; Select auto start 
9378			 
9378			.selautoload: 
9378			 
9378				 
9378				if STORAGE_SE 
9378			 
9378					call config_dir 
9378				        ld hl, scratch 
9378					ld a, 0 
9378					call menu 
9378			 
9378					cp 0 
9378					ret z 
9378			 
9378					dec a 
9378			 
9378			 
9378					; locate menu option 
9378			 
9378					ld hl, scratch 
9378					call table_lookup 
9378			 
9378					if DEBUG_FORTH_WORDS 
9378						DMARK "ALl" 
9378						CALLMONITOR 
9378					endif 
9378					; with the pointer to the menu it, the byte following the zero term is the file id 
9378			 
9378					ld a, 0 
9378					ld bc, 50   ; max of bytes to look at 
9378					cpir  
9378			 
9378					if DEBUG_FORTH_WORDS 
9378						DMARK "ALb" 
9378						CALLMONITOR 
9378					endif 
9378					;inc hl 
9378			 
9378					ld a, (hl)   ; file id 
9378					 
9378				        ; save bank and file ids 
9378			 
9378					push af 
9378			 
9378			; TODO need to save to block 0 on bank 1	 
9378			 
9378					call storage_get_block_0 
9378			 
9378					if DEBUG_FORTH_WORDS 
9378						DMARK "AL0" 
9378						CALLMONITOR 
9378					endif 
9378					pop af 
9378			 
9378					ld (store_page+STORE_0_FILERUN),a 
9378					 
9378					; save bank id 
9378			 
9378					ld a,(spi_device) 
9378					ld (store_page+STORE_0_BANKRUN),a 
9378			 
9378					; enable auto run of store file 
9378			 
9378					ld a, 1 
9378					ld (store_page+STORE_0_AUTOFILE),a 
9378			 
9378					; save buffer 
9378			 
9378					ld hl, 0 
9378					ld de, store_page 
9378					if DEBUG_FORTH_WORDS 
9378						DMARK "ALw" 
9378						CALLMONITOR 
9378					endif 
9378				call storage_write_block	 ; save update 
9378			  
9378			 
9378			 
9378			 
9378					ld hl, scratch 
9378					call config_fdir 
9378			 
9378				else 
9378			 
9378 21 38 97			ld hl, prom_notav 
937b 11 4e 97			ld de, prom_empty 
937e cd 40 8a			call info_panel 
9381			 
9381				endif 
9381 c9				ret 
9382			endif 
9382			 
9382			 
9382			; Select storage bank 
9382			 
9382			.selbank: 
9382			 
9382			;	if STORAGE_SE 
9382			;	else 
9382			 
9382 21 38 97			ld hl, prom_notav 
9385 11 4e 97			ld de, prom_empty 
9388 cd 40 8a			call info_panel 
938b			;	endif 
938b				 
938b c9				ret 
938c			 
938c			if STORAGE_SE 
938c			 
938c			.config_ldir:   
938c				; Load storage bank labels into menu array 
938c			 
938c				 
938c			 
938c			 
938c				ret 
938c			 
938c			 
938c			endif 
938c			 
938c			 
938c			; Save user words to storage 
938c			 
938c			.savetostore: 
938c			 
938c			;	if STORAGE_SE 
938c			; 
938c			;		call config_dir 
938c			;	        ld hl, scratch 
938c			;		ld a, 0 
938c			;		call menu 
938c			;		 
938c			;		ld hl, scratch 
938c			;		call config_fdir 
938c			; 
938c			;	else 
938c			 
938c 21 38 97			ld hl, prom_notav 
938f 11 4e 97			ld de, prom_empty 
9392 cd 40 8a			call info_panel 
9395			 
9395			;	endif 
9395			 
9395 c9				ret 
9396			 
9396			if STARTUP_V2 
9396			 
9396			create_startup: 
9396			 
9396				ld a, 0 
9396				ld hl, .crstart 
9396				call menu 
9396			 
9396				cp 0 
9396				ret z 
9396			 
9396				cp 1 
9396				call z, .genlsword 
9396				cp 2 
9396				call z, .genedword 
9396			 
9396				cp 3 
9396				call z, .gendemword 
9396			 
9396				cp 4 
9396				call z, .genutlword 
9396				cp 5 
9396				call z, .genspiword 
9396				cp 6 
9396				call z, .genkeyword 
9396				cp 7 
9396				call z, .gensoundword 
9396				jr create_startup 
9396			 
9396			.gensoundword: 
9396				ld hl, crs_sound 
9396				ld de, .soundworddef 
9396				call .genfile 
9396				ret 
9396			.genlsword: 
9396				ld hl, crs_s1 
9396				ld de, .lsworddef 
9396				call .genfile 
9396				ret 
9396			 
9396			.genedword: 
9396				ld de, .edworddef 
9396				ld hl, crs_s2 
9396				call .genfile 
9396				ret 
9396			 
9396			.gendemword: 
9396				ld de, .demoworddef 
9396				ld hl, crs_s3 
9396				call .genfile 
9396				ret 
9396			 
9396			.genutlword: 
9396				ld hl, crs_s4 
9396				ld de, .utilwordef 
9396				call .genfile 
9396				ret 
9396			.genspiword: 
9396				ld hl, crs_s5 
9396				ld de, .spiworddef 
9396				call .genfile 
9396				ret 
9396			.genkeyword: 
9396				ld hl, crs_s6 
9396				ld de, .keyworddef 
9396				call .genfile 
9396				ret 
9396			 
9396			; hl - points to file name 
9396			; de - points to strings to add to file 
9396			 
9396			.genfile: 
9396				push hl 
9396				push de 
9396			 
9396				call clear_display 
9396				ld a, display_row_1 
9396				ld de, .genfiletxt 
9396				call str_at_display 
9396				call update_display 
9396			 
9396				pop de 
9396				pop hl 
9396			 
9396			 
9396				push de 
9396				call storage_create 
9396				; id in hl 
9396				pop de   ; table of strings to add 
9396			 
9396			.genloop: 
9396			 
9396				push hl ; save id for next time around 
9396				push de ; save de for next time around 
9396			 
9396				ex de, hl 
9396				call loadwordinhl 
9396				ex de, hl 
9396			 
9396				; need hl to be the id 
9396				; need de to be the string ptr 
9396				 
9396				call storage_append 
9396			 
9396				pop de 
9396				pop hl 
9396			 
9396				inc de 
9396				inc de 
9396			 
9396				ld a,(de) 
9396				cp 0 
9396				jr nz, .genloop 
9396				inc de 
9396				ld a, (de) 
9396				dec de 
9396				cp 0 
9396				jr nz, .genloop	 
9396			 
9396				ret 
9396			 
9396			.genfiletxt:  db "Creating file...",0 
9396			 
9396			.soundworddef: 
9396				dw sound1 
9396				dw sound2 
9396				dw sound3 
9396				dw sound4 
9396				dw sound5 
9396				dw sound6 
9396				dw sound7 
9396				dw sound8 
9396				dw sound9 
9396				dw 0 
9396			 
9396			.utilwordef: 
9396				dw strncpy 
9396				dw type 
9396				dw clrstack 
9396				dw longread 
9396				dw start1 
9396				dw start2 
9396				dw start3b 
9396				dw start3c 
9396				dw list 
9396				dw 0 
9396			 
9396			.lsworddef: 
9396				dw start3b 
9396				dw 0 
9396			 
9396			.edworddef: 
9396				dw edit1 
9396				dw edit2 
9396				dw edit3 
9396				dw 0 
9396			 
9396			.demoworddef: 
9396				dw test5 
9396				dw test6 
9396				dw test7 
9396				dw test8 
9396				dw test9 
9396				dw test10 
9396				dw game1 
9396				dw game1a 
9396				dw game1b 
9396				dw game1c 
9396				dw game1d 
9396				dw game1s 
9396				dw game1t 
9396				dw game1f 
9396				dw game1z 
9396				dw game1zz 
9396				dw ssv2 
9396				dw ssv3 
9396				dw ssv4 
9396				dw ssv5 
9396				dw ssv1 
9396				dw ssv1cpm	 
9396				dw game2b 
9396				dw game2bf 
9396				dw game2mba 
9396				dw game2mbas	 
9396				dw game2mbht 
9396				dw game2mbms 
9396				dw game2mb 
9396				dw game3w 
9396				dw game3p 
9396				dw game3sc 
9396				dw game3vsi 
9396				dw game3vs 
9396				dw 0 
9396			 
9396			 
9396			.spiworddef: 
9396			 
9396			    dw spi1 
9396			    dw spi2 
9396			    dw spi3 
9396			    dw spi4 
9396			    dw spi5 
9396			    dw spi6 
9396			    dw spi7 
9396			 
9396			    dw spi8 
9396			    dw spi9 
9396			    dw spi10 
9396			    dw 0 
9396			 
9396			.keyworddef: 
9396			 
9396				dw keyup 
9396				dw keydown 
9396				dw keyleft 
9396				dw keyright 
9396				dw 	keyf1 
9396				dw keyf2 
9396				dw keyf3 
9396				dw keyf4 
9396				dw keyf5 
9396				dw keyf6 
9396				dw keyf7 
9396				dw keyf8 
9396				dw keyf9 
9396				dw keyf10 
9396				dw keyf11 
9396				dw keyf12 
9396				dw keytab 
9396				dw keycr 
9396				dw keyhome 
9396				dw keyend 
9396				dw keybs 
9396				dw 0 
9396			 
9396			.crstart: 
9396				dw crs_s1 
9396				dw crs_s2 
9396				dw crs_s3 
9396				dw crs_s4 
9396				dw crs_s5 
9396				dw crs_s6 
9396				dw crs_sound 
9396				dw 0 
9396			 
9396			endif 
9396			 
9396			 
9396			if STORAGE_SE 
9396			 
9396			config_fdir: 
9396				; using the scratch dir go through and release the memory allocated for each string 
9396				 
9396				ld hl, scratch 
9396			.cfdir:	ld e,(hl) 
9396				inc hl 
9396				ld d,(hl) 
9396				inc hl 
9396			 
9396				ex de, hl 
9396				call ishlzero 
9396				ret z     ; return on null pointer 
9396				call free 
9396				ex de, hl 
9396				jr .cfdir 
9396			 
9396			 
9396				ret 
9396			 
9396			 
9396			config_dir: 
9396			 
9396				; for the config menus that need to build a directory of storage call this routine 
9396				; it will construct a menu in scratch to pass to menu 
9396			 
9396				; open storage device 
9396			 
9396				; execute DIR to build a list of files and their ids into scratch in menu format 
9396				; once the menu has finished then will need to call config_fdir to release the strings 
9396				 
9396				; c = number items 
9396			 
9396				 
9396				call storage_get_block_0 
9396			 
9396				ld hl, store_page     ; get current id count 
9396				ld b, (hl) 
9396				ld c, 0    ; count of files   
9396			 
9396			 
9396				ld hl, scratch 
9396				ld (store_tmp2), hl    ; location to poke strings 
9396			 
9396				; check for empty drive 
9396			 
9396				ld a, 0 
9396				cp b 
9396				jp z, .dirdone 
9396			 
9396				 
9396					if DEBUG_FORTH_WORDS 
9396						DMARK "Cdc" 
9396						CALLMONITOR 
9396					endif 
9396			 
9396			 
9396			.diritem:	 
9396				push bc 
9396				; for each of the current ids do a search for them and if found push to stack 
9396			 
9396					ld hl, STORE_BLOCK_PHY 
9396					ld d, 0		 ; look for extent 0 of block id as this contains file name 
9396					ld e,b 
9396			 
9396					call storage_findnextid 
9396			 
9396			 
9396					; if found hl will be non zero 
9396			 
9396					call ishlzero 
9396					jr z, .dirnotfound 
9396			 
9396					; increase count 
9396			 
9396					pop bc	 
9396					inc c 
9396					push bc 
9396					 
9396			 
9396					; get file header and push the file name 
9396			 
9396					ld de, store_page 
9396					call storage_read_block 
9396			 
9396					; push file id to stack 
9396				 
9396					ld a, (store_page) 
9396					ld h, 0 
9396					ld l, a 
9396			 
9396					;call forth_push_numhl 
9396					; TODO store id 
9396			 
9396					push hl 
9396			 
9396					; push extent count to stack  
9396				 
9396					ld hl, store_page+3 
9396			 
9396					; get file name length 
9396			 
9396					call strlenz   
9396			 
9396					inc hl   ; cover zero term 
9396					inc hl  ; stick the id at the end of the area 
9396			 
9396					push hl 
9396					pop bc    ; move length to bc 
9396			 
9396					call malloc 
9396			 
9396					; TODO save malloc area to scratch 
9396			 
9396					ex de, hl 
9396					ld hl, (store_tmp2) 
9396					ld (hl), e 
9396					inc hl 
9396					ld (hl), d 
9396					inc hl 
9396					ld (store_tmp2), hl 
9396			 
9396					 
9396			 
9396					;pop hl   ; get source 
9396			;		ex de, hl    ; swap aronund	 
9396			 
9396					ld hl, store_page+3 
9396					if DEBUG_FORTH_WORDS 
9396						DMARK "CFd" 
9396						CALLMONITOR 
9396					endif 
9396					ldir 
9396			 
9396					; de is past string, move back one and store id 
9396					 
9396					dec de 
9396			 
9396					; store file id 
9396			 
9396					pop hl 
9396					ex de,hl 
9396					ld (hl), e 
9396			 
9396					if DEBUG_FORTH_WORDS 
9396						DMARK "Cdi" 
9396						CALLMONITOR 
9396					endif 
9396					 
9396			.dirnotfound: 
9396					pop bc     
9396					djnz .diritem 
9396				 
9396			.dirdone:	 
9396			 
9396					ld a, 0 
9396					ld hl, (store_tmp2) 
9396					ld (hl), a 
9396					inc hl 
9396					ld (hl), a 
9396					inc hl 
9396					; push a count of the dir items found 
9396			 
9396			;		ld h, 0 
9396			;		ld l, c 
9396			 
9396				ret 
9396			 
9396			endif 
9396			 
9396			 
9396			; Settings 
9396			; Run  
9396			 
9396			 
9396			 
9396			;hd_menu1:   db "Diags:  1: Key Matrix   5: Sound",0 
9396			;;hd_menu2:   db "        2: Editor",0   
9396			;hd_menu2:   db "        2: Editor       6: Menu",0   
9396			;hd_menu3:   db "        3: Storage",0 
9396			;hd_menu4:   db "0=quit  4: Debug",0 
9396			;hd_don:     db "ON",0 
9396			;hd_doff:     db "OFF",0 
9396			; 
9396			; 
9396			; 
9396			;hardware_diags_old:       
9396			; 
9396			;.diagmenu: 
9396			;	call clear_display 
9396			;	ld a, display_row_1 
9396			;	ld de, hd_menu1 
9396			;	call str_at_display 
9396			; 
9396			;	ld a, display_row_2 
9396			;	ld de, hd_menu2 
9396			;	call str_at_display 
9396			; 
9396			;	ld a, display_row_3 
9396			;	ld de, hd_menu3 
9396			;	call str_at_display 
9396			; 
9396			;	ld a,  display_row_4 
9396			;	ld de, hd_menu4 
9396			;	call str_at_display 
9396			; 
9396			;	; display debug state 
9396			; 
9396			;	ld de, hd_don 
9396			;	ld a, (os_view_disable) 
9396			;	cp 0 
9396			;	jr z, .distog 
9396			;	ld de, hd_doff 
9396			;.distog: ld a, display_row_4+17 
9396			;	call str_at_display 
9396			; 
9396			;	call update_display 
9396			; 
9396			;	call cin_wait 
9396			; 
9396			; 
9396			; 
9396			;	cp '4' 
9396			;	jr nz, .diagn1 
9396			; 
9396			;	; debug toggle 
9396			; 
9396			;	ld a, (os_view_disable) 
9396			;	ld b, '*' 
9396			;	cp 0 
9396			;	jr z, .debtog 
9396			;	ld b, 0 
9396			;.debtog:	 
9396			;	ld a,b 
9396			;	ld (os_view_disable),a 
9396			; 
9396			;.diagn1: cp '0' 
9396			;	 ret z 
9396			; 
9396			;;	cp '1' 
9396			;;       jp z, matrix	 
9396			;;   TODO keyboard matrix test 
9396			; 
9396			;	cp '2' 
9396			;	jp z, .diagedit 
9396			; 
9396			;;	cp '6' 
9396			;;	jp z, .menutest 
9396			;;if ENABLE_BASIC 
9396			;;	cp '6' 
9396			;;	jp z, basic 
9396			;;endif 
9396			 ; 
9396			;	jp .diagmenu 
9396			; 
9396			; 
9396			;	ret 
9396			 
9396			 
9396			.debug_tog: 
9396 21 e0 93			ld hl, .menudebug 
9399				 
9399			;	ld a, (os_view_disable) 
9399			;	cp '*' 
9399 3a 6f ee			ld a,(debug_vector) 
939c fe c9			cp $C9   ; RET 
939e 20 04			jr nz,.tdon  
93a0 3e 01			ld a, 1 
93a2 18 02			jr .tog1 
93a4 3e 00		.tdon: ld a, 0 
93a6			 
93a6			.tog1: 
93a6 cd e0 8a			call menu 
93a9 fe 00			cp 0 
93ab c8				ret z 
93ac fe 01			cp 1    ; disable debug 
93ae 28 04			jr z, .dtog0 
93b0 3e 2a			ld a, '*' 
93b2 18 05			jr .dtogset 
93b4			.dtog0:  
93b4				;ld a, 0 
93b4 cd d2 94			call bp_on 
93b7 18 dd			jr .debug_tog 
93b9			.dtogset:  
93b9				; ld (os_view_disable), a 
93b9 cd de 94			call bp_off 
93bc c3 96 93			jp .debug_tog 
93bf			 
93bf			 
93bf			hardware_diags:       
93bf			 
93bf			.diagm: 
93bf 21 d2 93			ld hl, .menuitems 
93c2 3e 00			ld a, 0 
93c4 cd e0 8a			call menu 
93c7			 
93c7 fe 00		         cp 0 
93c9 c8				 ret z 
93ca			 
93ca fe 02			cp 2 
93cc ca 2b 94			jp z, .diagedit 
93cf			 
93cf			;	cp '6' 
93cf			;	jp z, .menutest 
93cf			;if ENABLE_BASIC 
93cf			;	cp '6' 
93cf			;	jp z, basic 
93cf			;endif 
93cf			  
93cf c3 bf 93			jp .diagm 
93d2			 
93d2				 
93d2 e6 93		.menuitems:   	dw .m1 
93d4 f1 93				dw .m2 
93d6 f8 93				dw .m3 
93d8 00 94				dw .m5 
93da 06 94				dw .m5a 
93dc 0f 94				dw .m5b 
93de 00 00				dw 0 
93e0			 
93e0			.menudebug: 
93e0 18 94				dw .m6 
93e2 21 94				dw .m7 
93e4 00 00				dw 0 
93e6			 
93e6 .. 00		.m1:   db "Key Matrix",0 
93f1 .. 00		.m2:   db "Editor",0 
93f8 .. 00		.m3:   db "Storage",0 
9400 .. 00		.m5:   db "Sound",0 
9406 .. 00		.m5a:  db "RAM Test",0 
940f .. 00		.m5b:  db "LCD Test",0 
9418			 
9418 .. 00		.m6:   db "Debug ON",0 
9421 .. 00		.m7:   db "Debug OFF",0 
942b			 
942b			; debug editor 
942b			 
942b			.diagedit: 
942b			 
942b 21 c1 e2			ld hl, scratch 
942e			;	ld bc, 250 
942e			;	ldir 
942e				; TODO ldir is not working strcpy may not get all the terms on the input line???? 
942e 3e 00			ld a, 0 
9430 77				ld (hl), a 
9431 23				inc hl 
9432 77				ld (hl), a 
9433 23				inc hl 
9434 77				ld (hl), a 
9435			 
9435 cd af 8a		        call clear_display 
9438 cd d2 8a			call update_display 
943b				;ld a, 1 
943b				;ld (hardware_diag), a 
943b			.diloop: 
943b 3e 00			ld a, display_row_1 
943d 0e 00			ld c, 0 
943f 16 ff			ld d, 255    ; TODO fix input_str to actually take note of max string input length 
9441 1e 28			ld e, 40 
9443			 
9443 21 c1 e2			ld hl, scratch	 
9446 cd 09 8d			call input_str 
9449			 
9449 3e 28			ld a, display_row_2 
944b 11 c1 e2			ld de, scratch 
944e cd c2 8a			call str_at_display 
9451 cd d2 8a			call update_display 
9454			 
9454 c3 3b 94			jp .diloop 
9457			 
9457			 
9457			; pass word in hl 
9457			; a has display location 
9457			display_word_at: 
9457 f5				push af 
9458 e5				push hl 
9459 7c				ld a,h 
945a 21 c6 e5			ld hl, os_word_scratch 
945d cd dd 8f			call hexout 
9460 e1				pop hl 
9461 7d				ld a,l 
9462 21 c8 e5			ld hl, os_word_scratch+2 
9465 cd dd 8f			call hexout 
9468 21 ca e5			ld hl, os_word_scratch+4 
946b 3e 00			ld a,0 
946d 77				ld (hl),a 
946e 11 c6 e5			ld de,os_word_scratch 
9471 f1				pop af 
9472 cd c2 8a				call str_at_display 
9475 c9				ret 
9476			 
9476			display_ptr_state: 
9476			 
9476				; to restore afterwards 
9476			 
9476 d5				push de 
9477 c5				push bc 
9478 e5				push hl 
9479 f5				push af 
947a			 
947a				; for use in here 
947a			 
947a			;	push bc 
947a			;	push de 
947a			;	push hl 
947a			;	push af 
947a			 
947a cd af 8a			call clear_display 
947d			 
947d 11 55 96			ld de, .ptrstate 
9480 3e 00			ld a, display_row_1 
9482 cd c2 8a			call str_at_display 
9485			 
9485				; display debug step 
9485			 
9485			 
9485 11 6b ee			ld de, debug_mark 
9488 3e 26			ld a, display_row_1+display_cols-2 
948a cd c2 8a			call str_at_display 
948d			 
948d				; display a 
948d 11 5f 96			ld de, .ptrcliptr 
9490 3e 28			ld a, display_row_2 
9492 cd c2 8a			call str_at_display 
9495			 
9495 f1				pop af 
9496 2a 40 ea			ld hl,(cli_ptr) 
9499 3e 30			ld a, display_row_2+8 
949b cd 57 94			call display_word_at 
949e			 
949e			 
949e				; display hl 
949e			 
949e			 
949e 11 67 96			ld de, .ptrclioptr 
94a1 3e 32			ld a, display_row_2+10 
94a3 cd c2 8a			call str_at_display 
94a6			; 
94a6			;	pop hl 
94a6 3e 35			ld a, display_row_2+13 
94a8 2a 3e ea			ld hl,(cli_origptr) 
94ab cd 57 94			call display_word_at 
94ae			; 
94ae			;	 
94ae			;	; display de 
94ae			 
94ae			;	ld de, .regstatede 
94ae			;	ld a, display_row_3 
94ae			;	call str_at_display 
94ae			 
94ae			;	pop de 
94ae			;	ld h,d 
94ae			;	ld l, e 
94ae			;	ld a, display_row_3+3 
94ae			;	call display_word_at 
94ae			 
94ae			 
94ae				; display bc 
94ae			 
94ae			;	ld de, .regstatebc 
94ae			;	ld a, display_row_3+10 
94ae			;	call str_at_display 
94ae			 
94ae			;	pop bc 
94ae			;	ld h,b 
94ae			;	ld l, c 
94ae			;	ld a, display_row_3+13 
94ae			;	call display_word_at 
94ae			 
94ae			 
94ae				; display dsp 
94ae			 
94ae			;	ld de, .regstatedsp 
94ae			;	ld a, display_row_4 
94ae			;	call str_at_display 
94ae			 
94ae				 
94ae			;	ld hl,(cli_data_sp) 
94ae			;	ld a, display_row_4+4 
94ae			;	call display_word_at 
94ae			 
94ae				; display rsp 
94ae			 
94ae 11 96 96			ld de, .regstatersp 
94b1 3e 82			ld a, display_row_4+10 
94b3 cd c2 8a			call str_at_display 
94b6			 
94b6				 
94b6 2a f2 e9			ld hl,(cli_ret_sp) 
94b9 3e 86			ld a, display_row_4+14 
94bb cd 57 94			call display_word_at 
94be			 
94be cd d2 8a			call update_display 
94c1			 
94c1 cd f2 89			call delay1s 
94c4 cd f2 89			call delay1s 
94c7 cd f2 89			call delay1s 
94ca			 
94ca			 
94ca cd b3 9a			call next_page_prompt 
94cd			 
94cd				; restore  
94cd			 
94cd f1				pop af 
94ce e1				pop hl 
94cf c1				pop bc 
94d0 d1				pop de 
94d1 c9				ret 
94d2			 
94d2			; Update the break point vector so that the user can hook a new routine 
94d2			 
94d2			bp_on: 
94d2 3e c3			ld a, $c3    ; JP 
94d4 32 6f ee			ld (debug_vector), a 
94d7 21 e4 94			ld hl, break_point_state 
94da 22 70 ee			ld (debug_vector+1), hl 
94dd c9				ret 
94de			 
94de			bp_off: 
94de 3e c9			ld a, $c9    ; RET 
94e0 32 6f ee			ld (debug_vector), a 
94e3 c9				ret 
94e4			 
94e4			 
94e4			break_point_state: 
94e4			;	push af 
94e4			; 
94e4			;	; see if disabled 
94e4			; 
94e4			;	ld a, (os_view_disable) 
94e4			;	cp '*' 
94e4			;	jr nz, .bpsgo 
94e4			;	pop af 
94e4			;	ret 
94e4			 
94e4			.bpsgo: 
94e4			;	pop af 
94e4 f5				push af 
94e5 22 af e2			ld (os_view_hl), hl 
94e8 ed 53 ad e2		ld (os_view_de), de 
94ec ed 43 ab e2		ld (os_view_bc), bc 
94f0 e5				push hl 
94f1 6f				ld l, a 
94f2 26 00			ld h, 0 
94f4 22 b1 e2			ld (os_view_af),hl 
94f7			 
94f7 21 b1 ed				ld hl, display_fb0 
94fa 22 cc eb				ld (display_fb_active), hl 
94fd e1				pop hl	 
94fe			 
94fe 3e 31			ld a, '1' 
9500 fe 2a		.bps1:  cp '*' 
9502 cc de 94			call z, bp_off 
9505			;	jr nz, .bps1b 
9505			;	ld (os_view_disable),a 
9505 fe 31		.bps1b:  cp '1' 
9507 20 14			jr nz, .bps2 
9509			 
9509				; display reg 
9509			 
9509				 
9509			 
9509 3a b1 e2			ld a, (os_view_af) 
950c 2a af e2			ld hl, (os_view_hl) 
950f ed 5b ad e2		ld de, (os_view_de) 
9513 ed 4b ab e2		ld bc, (os_view_bc) 
9517 cd b1 95			call display_reg_state 
951a c3 9d 95			jp .bpschk 
951d			 
951d fe 32		.bps2:  cp '2' 
951f 20 08			jr nz, .bps3 
9521				 
9521				; display hl 
9521 2a af e2			ld hl, (os_view_hl) 
9524 cd 9b 96			call display_dump_at_hl 
9527			 
9527 18 74			jr .bpschk 
9529			 
9529 fe 33		.bps3:  cp '3' 
952b 20 08			jr nz, .bps4 
952d			 
952d			        ; display de 
952d 2a ad e2			ld hl, (os_view_de) 
9530 cd 9b 96			call display_dump_at_hl 
9533			 
9533 18 68			jr .bpschk 
9535 fe 34		.bps4:  cp '4' 
9537 20 08			jr nz, .bps5 
9539			 
9539			        ; display bc 
9539 2a ab e2			ld hl, (os_view_bc) 
953c cd 9b 96			call display_dump_at_hl 
953f			 
953f 18 5c			jr .bpschk 
9541 fe 35		.bps5:  cp '5' 
9543 20 08		        jr nz, .bps7 
9545			 
9545				; display cur ptr 
9545 2a 40 ea			ld hl, (cli_ptr) 
9548 cd 9b 96			call display_dump_at_hl 
954b			 
954b 18 50			jr .bpschk 
954d fe 36		.bps7:  cp '6' 
954f 20 08			jr nz, .bps8b 
9551				 
9551				; display cur orig ptr 
9551 2a 3e ea			ld hl, (cli_origptr) 
9554 cd 9b 96			call display_dump_at_hl 
9557 18 44			jr .bpschk 
9559 fe 37		.bps8b:  cp '7' 
955b 20 08			jr nz, .bps9 
955d				 
955d				; display dsp 
955d 2a ee e9			ld hl, (cli_data_sp) 
9560 cd 9b 96			call display_dump_at_hl 
9563			 
9563 18 38			jr .bpschk 
9565 fe 39		.bps9:  cp '9' 
9567 20 05			jr nz, .bps8c 
9569				 
9569				; display SP 
9569			;	ld hl, sp 
9569 cd 9b 96			call display_dump_at_hl 
956c			 
956c 18 2f			jr .bpschk 
956e fe 38		.bps8c:  cp '8' 
9570 20 08			jr nz, .bps8d 
9572				 
9572				; display rsp 
9572 2a f2 e9			ld hl, (cli_ret_sp) 
9575 cd 9b 96			call display_dump_at_hl 
9578			 
9578 18 23			jr .bpschk 
957a fe 23		.bps8d:  cp '#'     ; access monitor sub system 
957c 20 05			jr nz, .bps8 
957e cd 81 98			call monitor 
9581			 
9581 18 1a			jr .bpschk 
9583 fe 30		.bps8:  cp '0' 
9585 20 16			jr nz, .bpschk 
9587			 
9587 21 10 ed				ld hl, display_fb1 
958a 22 cc eb				ld (display_fb_active), hl 
958d cd d2 8a				call update_display 
9590			 
9590				;ld a, (os_view_af) 
9590 2a af e2			ld hl, (os_view_hl) 
9593 ed 5b ad e2		ld de, (os_view_de) 
9597 ed 4b ab e2		ld bc, (os_view_bc) 
959b f1				pop af 
959c c9				ret 
959d			 
959d			.bpschk:   
959d cd f2 89			call delay1s 
95a0 3e 9f		ld a,display_row_4 + display_cols - 1 
95a2 11 b1 9a		        ld de, endprg 
95a5 cd c2 8a			call str_at_display 
95a8 cd d2 8a			call update_display 
95ab cd 18 e4			call cin_wait 
95ae			 
95ae c3 00 95			jp .bps1 
95b1			 
95b1			 
95b1			display_reg_state: 
95b1			 
95b1				; to restore afterwards 
95b1			 
95b1 d5				push de 
95b2 c5				push bc 
95b3 e5				push hl 
95b4 f5				push af 
95b5			 
95b5				; for use in here 
95b5			 
95b5 c5				push bc 
95b6 d5				push de 
95b7 e5				push hl 
95b8 f5				push af 
95b9			 
95b9 cd af 8a			call clear_display 
95bc			 
95bc 11 71 96			ld de, .regstate 
95bf 3e 00			ld a, display_row_1 
95c1 cd c2 8a			call str_at_display 
95c4			 
95c4				; display debug step 
95c4			 
95c4			 
95c4 11 6b ee			ld de, debug_mark 
95c7 3e 25			ld a, display_row_1+display_cols-3 
95c9 cd c2 8a			call str_at_display 
95cc			 
95cc				; display a 
95cc 11 8d 96			ld de, .regstatea 
95cf 3e 28			ld a, display_row_2 
95d1 cd c2 8a			call str_at_display 
95d4			 
95d4 e1				pop hl 
95d5			;	ld h,0 
95d5			;	ld l, a 
95d5 3e 2b			ld a, display_row_2+3 
95d7 cd 57 94			call display_word_at 
95da			 
95da			 
95da				; display hl 
95da			 
95da			 
95da 11 81 96			ld de, .regstatehl 
95dd 3e 32			ld a, display_row_2+10 
95df cd c2 8a			call str_at_display 
95e2			 
95e2 e1				pop hl 
95e3 3e 35			ld a, display_row_2+13 
95e5 cd 57 94			call display_word_at 
95e8			 
95e8				 
95e8				; display de 
95e8			 
95e8 11 85 96			ld de, .regstatede 
95eb 3e 50			ld a, display_row_3 
95ed cd c2 8a			call str_at_display 
95f0			 
95f0 e1				pop hl 
95f1			;	ld h,d 
95f1			;	ld l, e 
95f1 3e 53			ld a, display_row_3+3 
95f3 cd 57 94			call display_word_at 
95f6			 
95f6			 
95f6				; display bc 
95f6			 
95f6 11 89 96			ld de, .regstatebc 
95f9 3e 5a			ld a, display_row_3+10 
95fb cd c2 8a			call str_at_display 
95fe			 
95fe e1				pop hl 
95ff			;	ld h,b 
95ff			;	ld l, c 
95ff 3e 5d			ld a, display_row_3+13 
9601 cd 57 94			call display_word_at 
9604			 
9604			 
9604				; display dsp 
9604			 
9604 11 91 96			ld de, .regstatedsp 
9607 3e 78			ld a, display_row_4 
9609 cd c2 8a			call str_at_display 
960c			 
960c				 
960c 2a ee e9			ld hl,(cli_data_sp) 
960f 3e 7c			ld a, display_row_4+4 
9611 cd 57 94			call display_word_at 
9614			 
9614				; display rsp 
9614			 
9614 11 96 96			ld de, .regstatersp 
9617 3e 82			ld a, display_row_4+10 
9619 cd c2 8a			call str_at_display 
961c			 
961c				 
961c 2a f2 e9			ld hl,(cli_ret_sp) 
961f 3e 86			ld a, display_row_4+14 
9621 cd 57 94			call display_word_at 
9624			 
9624 cd d2 8a			call update_display 
9627			 
9627			;	call delay1s 
9627			;	call delay1s 
9627			;	call delay1s 
9627			 
9627			 
9627			;	call next_page_prompt 
9627			 
9627				; restore  
9627			 
9627 f1				pop af 
9628 e1				pop hl 
9629 c1				pop bc 
962a d1				pop de 
962b c9				ret 
962c			 
962c .. 00		.wordincurptr:  db "Word in cur_ptr (5)",0 
9640 .. 00		.wordincuroptr:  db "Word in cur_optr (6)",0 
9655 .. 00		.ptrstate:	db "Ptr State",0 
965f .. 00		.ptrcliptr:     db "cli_ptr",0 
9667 .. 00		.ptrclioptr:     db "cli_o_ptr",0 
9671 .. 00		.regstate:	db "Reg State (1/0)",0 
9681 .. 00		.regstatehl:	db "HL:",0 
9685 .. 00		.regstatede:	db "DE:",0 
9689 .. 00		.regstatebc:	db "BC:",0 
968d .. 00		.regstatea:	db "A :",0 
9691 .. 00		.regstatedsp:	db "DSP:",0 
9696 .. 00		.regstatersp:	db "RSP:",0 
969b			 
969b			display_dump_at_hl: 
969b e5				push hl 
969c d5				push de 
969d c5				push bc 
969e f5				push af 
969f			 
969f 22 e4 e5			ld (os_cur_ptr),hl	 
96a2 cd af 8a			call clear_display 
96a5 cd bb 99			call dumpcont 
96a8			;	call delay1s 
96a8			;	call next_page_prompt 
96a8			 
96a8			 
96a8 f1				pop af 
96a9 c1				pop bc 
96aa d1				pop de 
96ab e1				pop hl 
96ac c9				ret 
96ad			 
96ad			;if ENABLE_BASIC 
96ad			;	include "nascombasic.asm" 
96ad			;	basic: 
96ad			;	include "forth/FORTH.ASM" 
96ad			;endif 
96ad			 
96ad			; eof 
96ad			 
96ad			 
# End of file firmware_diags.asm
96ad			  
96ad			include "firmware_prompts.asm"  
96ad			; Prompts  
96ad			 
96ad			; boot messages 
96ad			 
96ad .. 00		prom_bootmsg:	db "z80-homebrew OS v1.7",0 
96c2 .. 00		prom_bootmsg1:	db "by Kevin Groves",0 
96d2			 
96d2			 
96d2			; config menus 
96d2			 
96d2			;prom_c3: db "Add Dictionary To File",0 
96d2			 
96d2			if STARTUP_V1 
96d2 .. 00		prom_c2: db "Select Autoload File",0 
96e7 .. 00		prom_c2a: db "Disable Autoload File", 0 
96fd			endif 
96fd			 
96fd			if STARTUP_V2 
96fd			prom_c2: db "Enable Autoload Files",0 
96fd			prom_c2a: db "Disable Autoload Files", 0 
96fd			 
96fd			crs_s1: db "*ls-word", 0 
96fd			crs_s2: db "*ed-word", 0 
96fd			crs_s3: db "*Demo-Programs", 0 
96fd			crs_s4: db "*Utils", 0 
96fd			crs_s5: db "*SPI-Addons", 0 
96fd			crs_s6: db "*Key-constants", 0 
96fd			crs_sound: db "*Sound-Util", 0 
96fd			 
96fd			 
96fd			 
96fd			endif 
96fd			;prom_c2b: db "Select Storage Bank",0 
96fd .. 00		prom_c4: db "Settings",0 
9706 .. 00		prom_m4:   db "Debug & Breakpoints On/Off",0 
9721 .. 00		prom_m4b:   db "Monitor",0 
9729 .. 00		prom_c1: db "Hardware Diags",0 
9738			 
9738			 
9738			if STARTUP_V2 
9738			prom_c9: db "Create Startup Files",0 
9738			endif 
9738			 
9738 .. 00		prom_notav:    db "Feature not available",0 
974e .. 00		prom_empty:    db "",0 
974f			 
974f			; eof 
974f			 
# End of file firmware_prompts.asm
974f			  
974f			  
974f			; eof  
974f			  
# End of file firmware.asm
974f			 
974f			;; below moved from firmware.asm for strange zero calc of baseusermem label. Scope issue on multipass???? 
974f			;if BASE_KEV  
974f			;baseram: equ 08000h 
974f			;endif 
974f			 
974f			;if BASE_SC114 
974f			;baseram:     equ    endofcode 
974f			;endif 
974f			 
974f			 
974f			; Add NMI support. A rst 066h when r15z goes neg on clock side of resist. needs to do retn when exiting 
974f			 
974f			; start system 
974f			 
974f			coldstart: 
974f				; set sp 
974f				; di/ei 
974f			 
974f f3				di 
9750 31 00 f0			ld sp, tos 
9753 cd 62 e3			call init_nmi 
9756			;	ei 
9756			 
9756				; init spinner 
9756 3e 00			ld a,0 
9758 32 c6 eb			ld (display_active), a 
975b			 
975b				; disable breakpoint by default 
975b			 
975b				;ld a,'*' 
975b			;	ld a,' ' 
975b			;	ld (os_view_disable),a 
975b			 
975b				; set break point vector as new break point on or off 
975b cd de 94			call bp_off 
975e			 
975e				; init hardware 
975e			 
975e				; init keyboard and screen hardware 
975e			 
975e cd 1c 80			call hardware_init 
9761			 
9761			 
9761 cd f2 89			call delay1s 
9764 3e 58			ld a, display_row_3+8 
9766 11 03 80			ld de, buildtime 
9769 cd c2 8a			call str_at_display 
976c cd d2 8a			call update_display 
976f			 
976f cd f2 89			call delay1s 
9772 cd f2 89			call delay1s 
9775 cd f2 89			call delay1s 
9778			 
9778				; detect if any keys are held down to enable breakpoints at start up 
9778			 
9778 cd 1e e4			call cin  
977b fe 00			cp 0 
977d 28 03			jr z, .nokeys 
977f			 
977f				;call hardware_diags 
977f cd 3c 93			call config 
9782			 
9782			;	ld de, .bpen 
9782			;	ld a, display_row_4 
9782			;	call str_at_display 
9782			;	call update_display 
9782			; 
9782			;	ld a,0 
9782			;	ld (os_view_disable),a 
9782			; 
9782			;.bpwait: 
9782			;	call cin 
9782			;	cp 0 
9782			;	jr z, .bpwait 
9782			;	jr .nokeys 
9782			; 
9782			; 
9782			;.bpen:  db "Break points enabled!",0 
9782			 
9782			 
9782			 
9782			 
9782			 
9782			 
9782			.nokeys: 
9782			 
9782			 
9782				 
9782			 
9782			;jp  testkey 
9782			 
9782			;call storage_get_block_0 
9782			; 
9782			;ld hl, 0 
9782			;ld de, store_page 
9782			;call storage_read_block 
9782			 
9782				 
9782			;ld hl, 10 
9782			;ld de, store_page 
9782			;call storage_read_block 
9782			 
9782			 
9782			 
9782			 
9782			 
9782			;stop:	nop 
9782			;	jp stop 
9782			 
9782			 
9782			 
9782			main: 
9782 cd af 8a			call clear_display 
9785 cd d2 8a			call update_display 
9788			 
9788			 
9788			 
9788			;	call testlcd 
9788			 
9788			 
9788			 
9788 cd b8 9e			call forth_init 
978b			 
978b			 
978b			warmstart: 
978b cd 8e 9e			call forth_warmstart 
978e			 
978e				; run startup word load 
978e			        ; TODO prevent this running at warmstart after crash  
978e			 
978e				if STARTUP_ENABLE 
978e			 
978e					if STARTUP_V1 
978e			 
978e						if STORAGE_SE 
978e							call forth_autoload 
978e						endif 
978e cd b2 e2					call forth_startup 
9791					endif 
9791			 
9791					if STARTUP_V2 
9791			 
9791						if STORAGE_SE 
9791							call forth_autoload 
9791						else 
9791							call forth_startup 
9791						endif 
9791			 
9791			 
9791					endif 
9791			 
9791				endif 
9791			 
9791				; show free memory after boot 
9791 11 1c 98			ld de, freeram 
9794 3e 00			ld a, display_row_1 
9796 cd c2 8a			call str_at_display 
9799			 
9799				; get current heap start after loading any uwords 
9799			 
9799 ed 5b be e5		ld de, (os_last_new_uword) 
979d				;ex de, hl 
979d			 
979d			; Or use heap_size word???? 
979d				;ld hl, heap_end 
979d 21 6c fe			ld hl, heap_size 
97a0				;ld de, topusermem 
97a0				;ld de, heap_start 
97a0 ed 52			sbc hl, de 
97a2				;push hl 
97a2				;ld a,h	         	 
97a2				;ld hl, os_word_scratch		; TODO do direct write to frame buffer instead and drop the str_at_display 
97a2				;call hexout 
97a2			   	;pop hl 
97a2			; 
97a2			;	ld a,l 
97a2			;	ld hl, os_word_scratch+2 
97a2			;	call hexout 
97a2			;	ld hl, os_word_scratch+4 
97a2			;	ld a, 0 
97a2			;	ld (hl),a 
97a2			 
97a2 21 c6 e5			ld hl, os_word_scratch 
97a5 cd e9 90			call uitoa_16 
97a8			 
97a8			 
97a8 11 c6 e5			ld de, os_word_scratch 
97ab 3e 0d			ld a, display_row_1 + 13 
97ad cd c2 8a			call str_at_display 
97b0 cd d2 8a			call update_display 
97b3			 
97b3			 
97b3				;call demo 
97b3			 
97b3			 
97b3				; init scratch input area for cli commands 
97b3			 
97b3 21 e8 e5			ld hl, os_cli_cmd 
97b6 3e 00			ld a,0 
97b8 77				ld (hl),a 
97b9 23				inc hl 
97ba 77				ld (hl),a 
97bb			 
97bb 3e 00			ld a,0 
97bd 32 e7 e6			ld (os_last_cmd),a	; current command in use to enable repeated use with an enter etc 
97c0			 
97c0 32 e4 e5			ld (os_cur_ptr),a	; ptr to whatever is needed for this command 
97c3 32 e5 e5			ld (os_cur_ptr+1),a	 
97c6			 
97c6 32 c6 e5			ld (os_word_scratch),a	; byte or word being used in parsing for this command 
97c9 32 c7 e5			ld (os_word_scratch+1),a	 
97cc				 
97cc			 
97cc				;ld a, kLCD_Line2        ; TODO prompt using direct screen line address. Correct this to frame buffer 
97cc 21 e8 e5			ld hl, os_cli_cmd 
97cf			 
97cf 3e 00			ld a, 0		 ; init cli input 
97d1 77				ld (hl), a 
97d2 3e 28			ld a, display_row_2        ; TODO prompt using direct screen line address. Correct this to frame buffer 
97d4			cli: 
97d4				; show cli prompt 
97d4				;push af 
97d4				;ld a, 0 
97d4				;ld de, prompt 
97d4				;call str_at_display 
97d4			 
97d4				;call update_display 
97d4				;pop af 
97d4				;inc a 
97d4				;ld a, kLCD_Line4+1	 ; TODO using direct screen line writes. Correct this to frame buffer 
97d4 0e 00			ld c, 0 
97d6 16 ff			ld d, 255    ; TODO fix input_str to actually take note of max string input length 
97d8 1e 28			ld e, 40 
97da			 
97da 21 e8 e5			ld hl, os_cli_cmd 
97dd			 
97dd				STACKFRAME OFF $fefe $9f9f 
97dd				if DEBUG_STACK_IMB 
97dd					if OFF 
97dd						exx 
97dd						ld de, $fefe 
97dd						ld a, d 
97dd						ld hl, curframe 
97dd						call hexout 
97dd						ld a, e 
97dd						ld hl, curframe+2 
97dd						call hexout 
97dd						ld hl, $fefe 
97dd						push hl 
97dd						ld hl, $9f9f 
97dd						push hl 
97dd						exx 
97dd					endif 
97dd				endif 
97dd			endm 
# End of macro STACKFRAME
97dd			 
97dd cd 09 8d			call input_str 
97e0			 
97e0				STACKFRAMECHK OFF $fefe $9f9f 
97e0				if DEBUG_STACK_IMB 
97e0					if OFF 
97e0						exx 
97e0						ld hl, $9f9f 
97e0						pop de   ; $9f9f 
97e0						call cmp16 
97e0						jr nz, .spnosame 
97e0						ld hl, $fefe 
97e0						pop de   ; $fefe 
97e0						call cmp16 
97e0						jr z, .spfrsame 
97e0						.spnosame: call showsperror 
97e0						.spfrsame: nop 
97e0						exx 
97e0					endif 
97e0				endif 
97e0			endm 
# End of macro STACKFRAMECHK
97e0			 
97e0				; copy input to last command 
97e0			 
97e0 21 e8 e5			ld hl, os_cli_cmd 
97e3 11 e7 e6			ld de, os_last_cmd 
97e6 01 ff 00			ld bc, 255 
97e9 ed b0			ldir 
97eb			 
97eb				; wipe current buffer 
97eb			 
97eb			;	ld a, 0 
97eb			;	ld hl, os_cli_cmd 
97eb			;	ld de, os_cli_cmd+1 
97eb			;	ld bc, 254 
97eb			;	ldir 
97eb				; TODO ldir is not working strcpy may not get all the terms on the input line???? 
97eb			;	call strcpy 
97eb			;	ld a, 0 
97eb			;	ld (hl), a 
97eb			;	inc hl 
97eb			;	ld (hl), a 
97eb			;	inc hl 
97eb			;	ld (hl), a 
97eb			 
97eb				; switch frame buffer to program  
97eb			 
97eb 21 10 ed				ld hl, display_fb1 
97ee 22 cc eb				ld (display_fb_active), hl 
97f1			 
97f1			;	nop 
97f1				STACKFRAME ON $fbfe $8f9f 
97f1				if DEBUG_STACK_IMB 
97f1					if ON 
97f1						exx 
97f1						ld de, $fbfe 
97f1						ld a, d 
97f1						ld hl, curframe 
97f1						call hexout 
97f1						ld a, e 
97f1						ld hl, curframe+2 
97f1						call hexout 
97f1						ld hl, $fbfe 
97f1						push hl 
97f1						ld hl, $8f9f 
97f1						push hl 
97f1						exx 
97f1					endif 
97f1				endif 
97f1			endm 
# End of macro STACKFRAME
97f1				; first time into the parser so pass over the current scratch pad 
97f1 21 e8 e5			ld hl,os_cli_cmd 
97f4				; tokenise the entered statement(s) in HL 
97f4 cd 36 9f			call forthparse 
97f7			        ; exec forth statements in top of return stack 
97f7 cd 76 9f			call forthexec 
97fa				;call forthexec_cleanup 
97fa			;	call parsenext 
97fa			 
97fa				STACKFRAMECHK ON $fbfe $8f9f 
97fa				if DEBUG_STACK_IMB 
97fa					if ON 
97fa						exx 
97fa						ld hl, $8f9f 
97fa						pop de   ; $8f9f 
97fa						call cmp16 
97fa						jr nz, .spnosame 
97fa						ld hl, $fbfe 
97fa						pop de   ; $fbfe 
97fa						call cmp16 
97fa						jr z, .spfrsame 
97fa						.spnosame: call showsperror 
97fa						.spfrsame: nop 
97fa						exx 
97fa					endif 
97fa				endif 
97fa			endm 
# End of macro STACKFRAMECHK
97fa				; TODO on return from forth parsing should there be a prompt to return to system? but already in system. 
97fa			 
97fa 3e 78			ld a, display_row_4 
97fc 11 2d 98			ld de, endprog 
97ff			 
97ff cd d2 8a			call update_display		 
9802			 
9802 cd b3 9a			call next_page_prompt 
9805			 
9805				; switch frame buffer to cli 
9805			 
9805 21 b1 ed				ld hl, display_fb0 
9808 22 cc eb				ld (display_fb_active), hl 
980b			 
980b			 
980b cd af 8a		        call clear_display 
980e cd d2 8a			call update_display		 
9811			 
9811 21 e8 e5			ld hl, os_cli_cmd 
9814			 
9814 3e 00			ld a, 0		 ; init cli input 
9816 77				ld (hl), a 
9817			 
9817				; TODO f_cursor_ptr should inc row (scroll if required) and set start of row for next input  
9817			 
9817				; now on last line 
9817			 
9817				; TODO scroll screen up 
9817			 
9817				; TODO instead just clear screen and place at top of screen 
9817			 
9817			;	ld a, 0 
9817			;	ld (f_cursor_ptr),a 
9817			 
9817				;call clear_display 
9817				;call update_display 
9817			 
9817				;ld a, kLCD_Line1        ; TODO prompt using direct screen line address. Correct this to frame buffer 
9817 3e 00			ld a, display_row_1        ; TODO prompt using direct screen line address. Correct this to frame buffer 
9819 c3 d4 97			jp cli 
981c			 
981c .. 00		freeram: db "Free bytes: ",0 
9829 ..			asc: db "1A2F" 
982d .. 00		endprog: db "End prog...",0 
9839			 
9839			testenter2:   
9839 21 f3 e2			ld hl,scratch+50 
983c 22 e4 e5			ld (os_cur_ptr),hl 
983f c3 d4 97			jp cli 
9842			 
9842			testenter:  
9842			 
9842 21 29 98			ld hl,asc 
9845			;	ld a,(hl) 
9845			;	call nibble2val 
9845 cd 33 90			call get_byte 
9848			 
9848			 
9848			;	ld a,(hl) 
9848			;	call atohex 
9848			 
9848			;	call fourehexhl 
9848 32 f3 e2			ld (scratch+50),a 
984b			 
984b			 
984b			 
984b 21 2b 98			ld hl,asc+2 
984e			;	ld a, (hl) 
984e			;	call nibble2val 
984e cd 33 90			call get_byte 
9851			 
9851			;	call fourehexhl 
9851 32 f5 e2			ld (scratch+52),a 
9854				 
9854 21 f3 e2			ld hl,scratch+50 
9857 22 e4 e5			ld (os_cur_ptr),hl 
985a c3 d4 97			jp cli 
985d			 
985d			enter:	 
985d 3a c5 e2			ld a,(scratch+4) 
9860 fe 00			cp 0 
9862 28 0c			jr z, .entercont 
9864				; no, not a null term line so has an address to work out.... 
9864			 
9864 21 c3 e2			ld hl,scratch+2 
9867 cd 93 90			call get_word_hl 
986a			 
986a 22 e4 e5			ld (os_cur_ptr),hl	 
986d c3 d4 97			jp cli 
9870			 
9870			 
9870			.entercont:  
9870			 
9870 21 c3 e2			ld hl, scratch+2 
9873 cd 33 90			call get_byte 
9876			 
9876 2a e4 e5		   	ld hl,(os_cur_ptr) 
9879 77					ld (hl),a 
987a 23					inc hl 
987b 22 e4 e5				ld (os_cur_ptr),hl 
987e				 
987e			; get byte  
987e			 
987e			 
987e c3 d4 97			jp cli 
9881			 
9881			 
9881			; basic monitor support 
9881			 
9881			monitor: 
9881				;  
9881 cd af 8a			call clear_display 
9884 3e 00			ld a, 0 
9886 11 d5 98			ld de, .monprompt 
9889 cd c2 8a			call str_at_display 
988c cd d2 8a			call update_display 
988f			 
988f				; get a monitor command 
988f			 
988f 0e 00			ld c, 0     ; entry at top left 
9891 16 64			ld d, 100   ; max buffer size 
9893 1e 0f			ld e, 15    ; input scroll area 
9895 3e 00			ld a, 0     ; init string 
9897 21 bf e4			ld hl, os_input 
989a 77				ld (hl), a 
989b 23				inc hl 
989c 77				ld (hl), a 
989d 21 bf e4			ld hl, os_input 
98a0 3e 01			ld a, 1     ; init string 
98a2 cd 09 8d			call input_str 
98a5			 
98a5 cd af 8a		        call clear_display 
98a8 cd d2 8a			call update_display		 
98ab			 
98ab 3a bf e4			ld a, (os_input) 
98ae cd 31 91			call toUpper 
98b1 fe 48		        cp 'H' 
98b3 ca 3a 99		        jp z, .monhelp 
98b6 fe 44			cp 'D'		; dump 
98b8 ca 6d 99			jp z, .mondump	 
98bb fe 43			cp 'C'		; dump 
98bd ca 87 99			jp z, .moncdump	 
98c0 fe 4d			cp 'M'		; dump 
98c2 ca d7 98			jp z, .moneditstart 
98c5 fe 55			cp 'U'		; dump 
98c7 ca e3 98			jp z, .monedit	 
98ca fe 47			cp 'G'		; dump 
98cc ca 63 99			jp z, .monjump 
98cf fe 51			cp 'Q'		; dump 
98d1 c8				ret z	 
98d2			 
98d2			 
98d2				; TODO "S" to access symbol by name and not need the address 
98d2				; TODO "F" to find a string in memory 
98d2			 
98d2 c3 81 98			jp monitor 
98d5			 
98d5 .. 00		.monprompt: db ">", 0 
98d7			 
98d7			.moneditstart: 
98d7				; get starting address 
98d7			 
98d7 21 c1 e4			ld hl,os_input+2 
98da cd 93 90			call get_word_hl 
98dd			 
98dd 22 e4 e5			ld (os_cur_ptr),hl	 
98e0			 
98e0 c3 81 98			jp monitor 
98e3			 
98e3			.monedit: 
98e3				; get byte to load 
98e3			 
98e3 21 c1 e4			ld hl,os_input+2 
98e6 cd 33 90			call get_byte 
98e9			 
98e9				; get address to update 
98e9 2a e4 e5			ld hl, (os_cur_ptr) 
98ec			 
98ec				; update byte 
98ec			 
98ec 77				ld (hl), a 
98ed			 
98ed				; move to next address and save it 
98ed			 
98ed 23				inc hl 
98ee 22 e4 e5			ld (os_cur_ptr),hl	 
98f1			 
98f1 c3 81 98			jp monitor 
98f4			 
98f4			 
98f4 .. 00		.monhelptext1: 	db "D-Dump, C-Cont Dump",0 
9908 .. 00		.monhelptext2:  db "M-Edit Start, U-Update Byte",0 
9924 .. 00		.monhelptext3:  db "G-Call address",0 
9933 .. 00		.monhelptext4:  db "Q-Quit",0 
993a			        
993a			.monhelp: 
993a 3e 00			ld a, display_row_1 
993c 11 f4 98		        ld de, .monhelptext1 
993f			 
993f cd c2 8a			call str_at_display 
9942 3e 28			ld a, display_row_2 
9944 11 08 99		        ld de, .monhelptext2 
9947					 
9947 cd c2 8a			call str_at_display 
994a 3e 50			ld a, display_row_3 
994c 11 24 99		        ld de, .monhelptext3 
994f					 
994f cd c2 8a			call str_at_display 
9952 3e 78			ld a, display_row_4 
9954 11 33 99		        ld de, .monhelptext4 
9957 cd c2 8a			call str_at_display 
995a			 
995a cd d2 8a			call update_display		 
995d			 
995d cd b3 9a			call next_page_prompt 
9960 c3 81 98			jp monitor 
9963			 
9963			.monjump:    
9963 21 c1 e4			ld hl,os_input+2 
9966 cd 93 90			call get_word_hl 
9969			 
9969 e9				jp (hl) 
996a c3 81 98			jp monitor 
996d			 
996d			.mondump:    
996d 21 c1 e4			ld hl,os_input+2 
9970 cd 93 90			call get_word_hl 
9973			 
9973 22 e4 e5			ld (os_cur_ptr),hl	 
9976 cd bb 99			call dumpcont 
9979 3e 78			ld a, display_row_4 
997b 11 2d 98			ld de, endprog 
997e			 
997e cd d2 8a			call update_display		 
9981			 
9981 cd b3 9a			call next_page_prompt 
9984 c3 81 98			jp monitor 
9987			.moncdump: 
9987 cd bb 99			call dumpcont 
998a 3e 78			ld a, display_row_4 
998c 11 2d 98			ld de, endprog 
998f			 
998f cd d2 8a			call update_display		 
9992			 
9992 cd b3 9a			call next_page_prompt 
9995 c3 81 98			jp monitor 
9998			 
9998			 
9998			; TODO symbol access  
9998			 
9998			.symbols:     ;; A list of symbols that can be called up  
9998 b1 ed			dw display_fb0 
999a .. 00			db "fb0",0  
999e 7a ea		     	dw store_page 
99a0 .. 00			db "store_page",0 
99ab			 
99ab			 
99ab			dump:	; see if we are cotinuing on from the last command by not uncluding any address 
99ab			 
99ab 3a c2 e2			ld a,(scratch+1) 
99ae fe 00			cp 0 
99b0 28 09			jr z, dumpcont 
99b2			 
99b2				; no, not a null term line so has an address to work out.... 
99b2			 
99b2 21 c3 e2			ld hl,scratch+2 
99b5 cd 93 90			call get_word_hl 
99b8			 
99b8 22 e4 e5			ld (os_cur_ptr),hl	 
99bb			 
99bb			 
99bb			 
99bb			dumpcont: 
99bb			 
99bb				; dump bytes at ptr 
99bb			 
99bb			 
99bb 3e 00			ld a, display_row_1 
99bd 2a cc eb			ld hl, (display_fb_active) 
99c0 cd dc 8c			call addatohl 
99c3 cd eb 99			call .dumpbyterow 
99c6			 
99c6 3e 28			ld a, display_row_2 
99c8 2a cc eb			ld hl, (display_fb_active) 
99cb cd dc 8c			call addatohl 
99ce cd eb 99			call .dumpbyterow 
99d1			 
99d1			 
99d1 3e 50			ld a, display_row_3 
99d3 2a cc eb			ld hl, (display_fb_active) 
99d6 cd dc 8c			call addatohl 
99d9 cd eb 99			call .dumpbyterow 
99dc			 
99dc 3e 78			ld a, display_row_4 
99de 2a cc eb			ld hl, (display_fb_active) 
99e1 cd dc 8c			call addatohl 
99e4 cd eb 99			call .dumpbyterow 
99e7			 
99e7 cd d2 8a			call update_display 
99ea			;		jp cli 
99ea c9				ret 
99eb			 
99eb			.dumpbyterow: 
99eb			 
99eb				;push af 
99eb			 
99eb e5				push hl 
99ec			 
99ec				; calc where to poke the ascii 
99ec			if display_cols == 20 
99ec				ld a, 16 
99ec			else 
99ec 3e 1f			ld a, 31 
99ee			endif 
99ee			 
99ee cd dc 8c			call addatohl 
99f1 22 c6 e5			ld (os_word_scratch),hl  		; save pos for later 
99f4			 
99f4			 
99f4			; display decoding address 
99f4 2a e4 e5		   	ld hl,(os_cur_ptr) 
99f7			 
99f7 7c				ld a,h 
99f8 e1				pop hl 
99f9 e5				push hl 
99fa			;	ld hl, os_word_scratch		; TODO do direct write to frame buffer instead and drop the str_at_display 
99fa cd dd 8f			call hexout 
99fd 2a e4 e5		   	ld hl,(os_cur_ptr) 
9a00			 
9a00 7d				ld a,l 
9a01 e1				pop hl 
9a02 23				inc hl 
9a03 23				inc hl 
9a04 e5				push hl 
9a05			;	ld hl, os_word_scratch+2 
9a05 cd dd 8f			call hexout 
9a08 e1				pop hl 
9a09 23				inc hl 
9a0a 23				inc hl 
9a0b				;ld hl, os_word_scratch+4 
9a0b 3e 3a			ld a, ':' 
9a0d 77				ld (hl),a 
9a0e 23				inc hl 
9a0f				;ld a, 0 
9a0f				;ld (hl),a 
9a0f				;ld de, os_word_scratch 
9a0f				;pop af 
9a0f				;push af 
9a0f			;		ld a, display_row_2 
9a0f			;		call str_at_display 
9a0f			;		call update_display 
9a0f			 
9a0f			 
9a0f			;pop af 
9a0f			;	add 5 
9a0f			 
9a0f			if display_cols == 20 
9a0f				ld b, 4 
9a0f			else 
9a0f 06 08			ld b, 8 
9a11			endif	 
9a11			 
9a11			.dumpbyte: 
9a11 c5				push bc 
9a12 e5				push hl 
9a13			 
9a13			 
9a13 2a e4 e5		   	ld hl,(os_cur_ptr) 
9a16 7e					ld a,(hl) 
9a17			 
9a17					; poke the ascii to display 
9a17 2a c6 e5				ld hl,(os_word_scratch) 
9a1a 77					ld (hl),a 
9a1b 23					inc hl 
9a1c 22 c6 e5				ld (os_word_scratch),hl 
9a1f			 
9a1f					 
9a1f			 
9a1f			 
9a1f e1					pop hl 
9a20 e5					push hl 
9a21			 
9a21 cd dd 8f				call hexout 
9a24			 
9a24					 
9a24 2a e4 e5		   	ld hl,(os_cur_ptr) 
9a27 23				inc hl 
9a28 22 e4 e5		   	ld (os_cur_ptr),hl 
9a2b			 
9a2b e1					pop hl 
9a2c 23					inc hl 
9a2d 23					inc hl 
9a2e 23					inc hl 
9a2f			 
9a2f			 
9a2f			 
9a2f					;ld a,0 
9a2f					;ld (os_word_scratch+2),a 
9a2f					;pop af 
9a2f					;push af 
9a2f			 
9a2f					;ld de, os_word_scratch 
9a2f					;call str_at_display 
9a2f			;		call update_display 
9a2f			;		pop af 
9a2f c1					pop bc 
9a30 c6 03				add 3 
9a32 10 dd			djnz .dumpbyte 
9a34			 
9a34				 
9a34			 
9a34 c9				ret 
9a35			 
9a35			jump:	 
9a35			 
9a35 21 c3 e2			ld hl,scratch+2 
9a38 cd 93 90			call get_word_hl 
9a3b				;ld hl,(scratch+2) 
9a3b				;call fourehexhl 
9a3b			 
9a3b 22 e4 e5			ld (os_cur_ptr),hl	 
9a3e			 
9a3e e9				jp (hl) 
9a3f			 
9a3f			 
9a3f			 
9a3f			; TODO implement a basic monitor mode to start with 
9a3f			 
9a3f			 
9a3f			 
9a3f			 
9a3f			 
9a3f			 
9a3f			 
9a3f			 
9a3f			 
9a3f			; testing and demo code during development 
9a3f			 
9a3f			 
9a3f .. 00		str1: db "Enter some text...",0 
9a52 .. 00		clear: db "                    ",0 
9a67			 
9a67			demo: 
9a67			 
9a67			 
9a67			 
9a67			;	call update_display 
9a67			 
9a67				; init scratch input area for testing 
9a67 21 c1 e2			ld hl, scratch	 
9a6a 3e 00			ld a,0 
9a6c 77				ld (hl),a 
9a6d			 
9a6d			 
9a6d 3e 28		            LD   A, display_row_2 
9a6f			;            CALL fLCD_Pos       ;Position cursor to location in A 
9a6f 11 3f 9a		            LD   DE, str1 
9a72 cd c2 8a			call str_at_display 
9a75			 
9a75			;            CALL fLCD_Str       ;Display string pointed to by DE 
9a75			cloop:	 
9a75 3e 50		            LD   A, display_row_3 
9a77			;            CALL fLCD_Pos       ;Position cursor to location in A 
9a77 11 52 9a		            LD   DE, clear 
9a7a			 ;           CALL fLCD_Str       ;Display string pointed to by DE 
9a7a cd c2 8a				call str_at_display 
9a7d 3e 78			ld a, display_row_4 
9a7f 11 af 9a			ld de, prompt 
9a82			 
9a82 cd c2 8a				call str_at_display 
9a85 cd d2 8a			call update_display 
9a88			 
9a88 3e 79			ld a, kLCD_Line4+1	 ; TODO using direct screen line writes. Correct this to frame buffer 
9a8a 16 0a			ld d, 10 
9a8c 21 c1 e2			ld hl, scratch	 
9a8f cd 09 8d			call input_str 
9a92			 
9a92			;	call clear_display 
9a92			;'	call update_display 
9a92			 
9a92 3e 00		            LD   A, display_row_1 
9a94			;            CALL fLCD_Pos       ;Position cursor to location in A 
9a94 11 52 9a		            LD   DE, clear 
9a97 cd c2 8a				call str_at_display 
9a9a			;            CALL fLCD_Str       ;Display string pointed to by DE 
9a9a 3e 00		            LD   A, display_row_1 
9a9c			;            CALL fLCD_Pos       ;Position cursor to location in A 
9a9c 11 c1 e2		            LD   DE, scratch 
9a9f			;            CALL fLCD_Str       ;Display string pointed to by DE 
9a9f cd c2 8a				call str_at_display 
9aa2 cd d2 8a			call update_display 
9aa5			 
9aa5 3e 00				ld a,0 
9aa7 21 c1 e2			ld hl, scratch 
9aaa 77				ld (hl),a 
9aab			 
9aab 00				nop 
9aac c3 75 9a			jp cloop 
9aaf			 
9aaf			 
9aaf			 
9aaf			; OS Prompt 
9aaf			 
9aaf .. 00		prompt: db ">",0 
9ab1 .. 00		endprg: db "?",0 
9ab3			 
9ab3			 
9ab3			; handy next page prompt 
9ab3			next_page_prompt: 
9ab3 e5				push hl 
9ab4 d5				push de 
9ab5 f5				push af 
9ab6 c5				push bc 
9ab7			 
9ab7 3e 9f			ld a,display_row_4 + display_cols - 1 
9ab9 11 b1 9a		        ld de, endprg 
9abc cd c2 8a			call str_at_display 
9abf cd d2 8a			call update_display 
9ac2 cd 18 e4			call cin_wait 
9ac5 c1				pop bc 
9ac6 f1				pop af 
9ac7 d1				pop de 
9ac8 e1				pop hl 
9ac9			 
9ac9			 
9ac9 c9				ret 
9aca			 
9aca			 
9aca			; forth parser 
9aca			 
9aca			; My forth kernel 
9aca			include "forth_kernel.asm" 
9aca			; 
9aca			; kernel to the forth OS 
9aca			 
9aca			DS_TYPE_STR: equ 1     ; string type 
9aca			DS_TYPE_INUM: equ 2     ; $ 16 bit unsigned int usually a hex address 
9aca			DS_TYPE_SNUM: equ 3     ; $ 16 bit signed int  
9aca			;DS_TYPE_FNUM: equ 3      ; 24/32 bit floating point  do string conversion instead of a new type 
9aca			 
9aca			FORTH_PARSEV1: equ 0 
9aca			FORTH_PARSEV2: equ 0 
9aca			FORTH_PARSEV3: equ 0 
9aca			FORTH_PARSEV4: equ 0 
9aca			FORTH_PARSEV5: equ 1 
9aca			 
9aca			;if FORTH_PARSEV5 
9aca			;	FORTH_END_BUFFER: equ 0 
9aca			;else 
9aca			FORTH_END_BUFFER: equ 127 
9aca			;endif 
9aca			 
9aca			FORTH_TRUE: equ 1 
9aca			FORTH_FALSE: equ 0 
9aca			 
9aca			if FORTH_PARSEV4 
9aca			include "forth_stackops.asm" 
9aca			endif 
9aca			 
9aca			if FORTH_PARSEV5 
9aca			include "forth_stackopsv5.asm" 
9aca			 
9aca			; Stack operations for v5 parser on wards 
9aca			; * DATA stack 
9aca			; * LOOP stack 
9aca			; * RETURN stack 
9aca			 
9aca			 
9aca			 
9aca			FORTH_CHK_DSP_UNDER: macro 
9aca				push hl 
9aca				push de 
9aca				ld hl,(cli_data_sp) 
9aca				ld de, cli_data_stack 
9aca				call cmp16 
9aca				jp c, fault_dsp_under 
9aca				pop de 
9aca				pop hl 
9aca				endm 
9aca			 
9aca			 
9aca			FORTH_CHK_RSP_UNDER: macro 
9aca				push hl 
9aca				push de 
9aca				ld hl,(cli_ret_sp) 
9aca				ld de, cli_ret_stack 
9aca				call cmp16 
9aca				jp c, fault_rsp_under 
9aca				pop de 
9aca				pop hl 
9aca				endm 
9aca			 
9aca			FORTH_CHK_LOOP_UNDER: macro 
9aca				push hl 
9aca				push de 
9aca				ld hl,(cli_loop_sp) 
9aca				ld de, cli_loop_stack 
9aca				call cmp16 
9aca				jp c, fault_loop_under 
9aca				pop de 
9aca				pop hl 
9aca				endm 
9aca			 
9aca			FORTH_ERR_TOS_NOTSTR: macro 
9aca				; TOSO might need more for checks when used 
9aca				push af 
9aca				ld a,(hl) 
9aca				cp DS_TYPE_STR 
9aca				jp nz, type_faultn   
9aca				pop af 
9aca				endm 
9aca			 
9aca			FORTH_ERR_TOS_NOTNUM: macro 
9aca				push af 
9aca				ld a,(hl) 
9aca				cp DS_TYPE_INUM 
9aca				jp nz, type_faultn   
9aca				pop af 
9aca				endm 
9aca			 
9aca			 
9aca			; increase data stack pointer and save hl to it 
9aca				 
9aca			FORTH_DSP_NEXT: macro 
9aca				call macro_forth_dsp_next 
9aca				endm 
9aca			 
9aca			 
9aca			macro_forth_dsp_next: 
9aca				if DEBUG_FORTH_STACK_GUARD 
9aca cd 93 e0				call check_stacks 
9acd				endif 
9acd e5				push hl 
9ace d5				push de 
9acf eb				ex de,hl 
9ad0 2a ee e9			ld hl,(cli_data_sp) 
9ad3 23				inc hl 
9ad4 23				inc hl 
9ad5			 
9ad5			; PARSEV5 
9ad5 23				inc hl 
9ad6 22 ee e9			ld (cli_data_sp),hl 
9ad9 73				ld (hl), e 
9ada 23				inc hl 
9adb 72				ld (hl), d 
9adc d1				pop de 
9add e1				pop hl 
9ade				if DEBUG_FORTH_STACK_GUARD 
9ade cd 93 e0				call check_stacks 
9ae1				endif 
9ae1 c9				ret 
9ae2			 
9ae2			 
9ae2			; increase ret stack pointer and save hl to it 
9ae2				 
9ae2			FORTH_RSP_NEXT: macro 
9ae2				call macro_forth_rsp_next 
9ae2				endm 
9ae2			 
9ae2			macro_forth_rsp_next: 
9ae2				if DEBUG_FORTH_STACK_GUARD 
9ae2 cd 93 e0				call check_stacks 
9ae5				endif 
9ae5 e5				push hl 
9ae6 d5				push de 
9ae7 eb				ex de,hl 
9ae8 2a f2 e9			ld hl,(cli_ret_sp) 
9aeb 23				inc hl 
9aec 23				inc hl 
9aed 22 f2 e9			ld (cli_ret_sp),hl 
9af0 73				ld (hl), e 
9af1 23				inc hl 
9af2 72				ld (hl), d 
9af3 d1				pop de 
9af4 e1				pop hl 
9af5				if DEBUG_FORTH_STACK_GUARD 
9af5 cd 93 e0				call check_stacks 
9af8				endif 
9af8 c9				ret 
9af9			 
9af9			; get current ret stack pointer and save to hl  
9af9				 
9af9			FORTH_RSP_TOS: macro 
9af9				call macro_forth_rsp_tos 
9af9				endm 
9af9			 
9af9			macro_forth_rsp_tos: 
9af9				;push de 
9af9 2a f2 e9			ld hl,(cli_ret_sp) 
9afc cd 34 9b			call loadhlptrtohl 
9aff				;ld e, (hl) 
9aff				;inc hl 
9aff				;ld d, (hl) 
9aff				;ex de, hl 
9aff					if DEBUG_FORTH_WORDS 
9aff			;			DMARK "RST" 
9aff						CALLMONITOR 
9aff cd 6f ee			call debug_vector  
9b02				endm  
# End of macro CALLMONITOR
9b02					endif 
9b02				;pop de 
9b02 c9				ret 
9b03			 
9b03			; pop ret stack pointer 
9b03				 
9b03			FORTH_RSP_POP: macro 
9b03				call macro_forth_rsp_pop 
9b03				endm 
9b03			 
9b03			 
9b03			macro_forth_rsp_pop: 
9b03				if DEBUG_FORTH_STACK_GUARD 
9b03			;		DMARK "RPP" 
9b03 cd 93 e0				call check_stacks 
9b06					FORTH_CHK_RSP_UNDER 
9b06 e5				push hl 
9b07 d5				push de 
9b08 2a f2 e9			ld hl,(cli_ret_sp) 
9b0b 11 ac e9			ld de, cli_ret_stack 
9b0e cd fa 8c			call cmp16 
9b11 da a7 e1			jp c, fault_rsp_under 
9b14 d1				pop de 
9b15 e1				pop hl 
9b16				endm 
# End of macro FORTH_CHK_RSP_UNDER
9b16				endif 
9b16 e5				push hl 
9b17 2a f2 e9			ld hl,(cli_ret_sp) 
9b1a			 
9b1a			 
9b1a				if FORTH_ENABLE_FREE 
9b1a			 
9b1a					; get pointer 
9b1a			 
9b1a					push de 
9b1a					push hl 
9b1a			 
9b1a					ld e, (hl) 
9b1a					inc hl 
9b1a					ld d, (hl) 
9b1a			 
9b1a					ex de, hl 
9b1a					call free 
9b1a			 
9b1a					pop hl 
9b1a					pop de 
9b1a			 
9b1a			 
9b1a				endif 
9b1a			 
9b1a			 
9b1a 2b				dec hl 
9b1b 2b				dec hl 
9b1c 22 f2 e9			ld (cli_ret_sp), hl 
9b1f				; do stack underflow checks 
9b1f e1				pop hl 
9b20				if DEBUG_FORTH_STACK_GUARD 
9b20 cd 93 e0				call check_stacks 
9b23					FORTH_CHK_RSP_UNDER 
9b23 e5				push hl 
9b24 d5				push de 
9b25 2a f2 e9			ld hl,(cli_ret_sp) 
9b28 11 ac e9			ld de, cli_ret_stack 
9b2b cd fa 8c			call cmp16 
9b2e da a7 e1			jp c, fault_rsp_under 
9b31 d1				pop de 
9b32 e1				pop hl 
9b33				endm 
# End of macro FORTH_CHK_RSP_UNDER
9b33				endif 
9b33 c9				ret 
9b34			 
9b34			 
9b34			 
9b34			; routine to load word pointed to by hl into hl 
9b34			 
9b34			loadhlptrtohl: 
9b34			 
9b34 d5				push de 
9b35 5e				ld e, (hl) 
9b36 23				inc hl 
9b37 56				ld d, (hl) 
9b38 eb				ex de, hl 
9b39 d1				pop de 
9b3a			 
9b3a c9				ret 
9b3b			 
9b3b			 
9b3b			 
9b3b			 
9b3b			 
9b3b			; push a number held in HL onto the data stack 
9b3b			; entry point for pushing a value when already in hl used in function above 
9b3b			 
9b3b			forth_push_numhl: 
9b3b			 
9b3b e5				push hl    ; save value to push 
9b3c			 
9b3c			if DEBUG_FORTH_PUSH 
9b3c				; see if disabled 
9b3c			 
9b3c			 
9b3c f5				push af 
9b3d 3a 6f ee			ld a,(debug_vector) 
9b40 fe c9			cp $c9   ; ret 
9b42			;	ld a, (os_view_disable) 
9b42			;	cp '*' 
9b42 28 34			jr z, .pskip2 
9b44 e5				push hl 
9b45 e5			push hl 
9b46 cd af 8a			call clear_display 
9b49 e1			pop hl 
9b4a 7c				ld a,h 
9b4b 21 c6 e5			ld hl, os_word_scratch 
9b4e cd dd 8f			call hexout 
9b51 e1				pop hl 
9b52 7d				ld a,l 
9b53 21 c8 e5			ld hl, os_word_scratch+2 
9b56 cd dd 8f			call hexout 
9b59			 
9b59 21 ca e5			ld hl, os_word_scratch+4 
9b5c 3e 00			ld a,0 
9b5e 77				ld (hl),a 
9b5f 11 c6 e5			ld de,os_word_scratch 
9b62 3e 28				ld a, display_row_2 
9b64 cd c2 8a				call str_at_display 
9b67 11 cf cb			ld de, .push_num 
9b6a 3e 00			ld a, display_row_1 
9b6c			 
9b6c cd c2 8a				call str_at_display 
9b6f			 
9b6f			 
9b6f cd d2 8a			call update_display 
9b72 cd f2 89			call delay1s 
9b75 cd f2 89			call delay1s 
9b78			.pskip2:  
9b78			 
9b78 f1				pop af 
9b79			endif	 
9b79			 
9b79			 
9b79				FORTH_DSP_NEXT 
9b79 cd ca 9a			call macro_forth_dsp_next 
9b7c				endm 
# End of macro FORTH_DSP_NEXT
9b7c			 
9b7c 2a ee e9			ld hl, (cli_data_sp) 
9b7f			 
9b7f				; save item type 
9b7f 3e 02			ld a,  DS_TYPE_INUM 
9b81 77				ld (hl), a 
9b82 23				inc hl 
9b83			 
9b83				; get word off stack 
9b83 d1				pop de 
9b84 7b				ld a,e 
9b85 77				ld (hl), a 
9b86 23				inc hl 
9b87 7a				ld a,d 
9b88 77				ld (hl), a 
9b89			 
9b89			if DEBUG_FORTH_PUSH 
9b89 2b				dec hl 
9b8a 2b				dec hl 
9b8b 2b				dec hl 
9b8c						DMARK "PH5" 
9b8c f5				push af  
9b8d 3a a1 9b			ld a, (.dmark)  
9b90 32 6b ee			ld (debug_mark),a  
9b93 3a a2 9b			ld a, (.dmark+1)  
9b96 32 6c ee			ld (debug_mark+1),a  
9b99 3a a3 9b			ld a, (.dmark+2)  
9b9c 32 6d ee			ld (debug_mark+2),a  
9b9f 18 03			jr .pastdmark  
9ba1 ..			.dmark: db "PH5"  
9ba4 f1			.pastdmark: pop af  
9ba5			endm  
# End of macro DMARK
9ba5				CALLMONITOR 
9ba5 cd 6f ee			call debug_vector  
9ba8				endm  
# End of macro CALLMONITOR
9ba8			endif	 
9ba8			 
9ba8 c9				ret 
9ba9			 
9ba9			 
9ba9			; Push a string to stack pointed to by hl 
9ba9			 
9ba9			forth_push_str: 
9ba9			 
9ba9			if DEBUG_FORTH_PUSH 
9ba9						DMARK "PSQ" 
9ba9 f5				push af  
9baa 3a be 9b			ld a, (.dmark)  
9bad 32 6b ee			ld (debug_mark),a  
9bb0 3a bf 9b			ld a, (.dmark+1)  
9bb3 32 6c ee			ld (debug_mark+1),a  
9bb6 3a c0 9b			ld a, (.dmark+2)  
9bb9 32 6d ee			ld (debug_mark+2),a  
9bbc 18 03			jr .pastdmark  
9bbe ..			.dmark: db "PSQ"  
9bc1 f1			.pastdmark: pop af  
9bc2			endm  
# End of macro DMARK
9bc2				CALLMONITOR 
9bc2 cd 6f ee			call debug_vector  
9bc5				endm  
# End of macro CALLMONITOR
9bc5			endif	 
9bc5			    
9bc5 e5				push hl 
9bc6 e5				push hl 
9bc7			 
9bc7			;	ld a, 0   ; find end of string 
9bc7 cd 3a 91			call strlenz 
9bca			if DEBUG_FORTH_PUSH 
9bca						DMARK "PQ2" 
9bca f5				push af  
9bcb 3a df 9b			ld a, (.dmark)  
9bce 32 6b ee			ld (debug_mark),a  
9bd1 3a e0 9b			ld a, (.dmark+1)  
9bd4 32 6c ee			ld (debug_mark+1),a  
9bd7 3a e1 9b			ld a, (.dmark+2)  
9bda 32 6d ee			ld (debug_mark+2),a  
9bdd 18 03			jr .pastdmark  
9bdf ..			.dmark: db "PQ2"  
9be2 f1			.pastdmark: pop af  
9be3			endm  
# End of macro DMARK
9be3				CALLMONITOR 
9be3 cd 6f ee			call debug_vector  
9be6				endm  
# End of macro CALLMONITOR
9be6			endif	 
9be6 eb				ex de, hl 
9be7 e1				pop hl   ; get ptr to start of string 
9be8			if DEBUG_FORTH_PUSH 
9be8						DMARK "PQ3" 
9be8 f5				push af  
9be9 3a fd 9b			ld a, (.dmark)  
9bec 32 6b ee			ld (debug_mark),a  
9bef 3a fe 9b			ld a, (.dmark+1)  
9bf2 32 6c ee			ld (debug_mark+1),a  
9bf5 3a ff 9b			ld a, (.dmark+2)  
9bf8 32 6d ee			ld (debug_mark+2),a  
9bfb 18 03			jr .pastdmark  
9bfd ..			.dmark: db "PQ3"  
9c00 f1			.pastdmark: pop af  
9c01			endm  
# End of macro DMARK
9c01				CALLMONITOR 
9c01 cd 6f ee			call debug_vector  
9c04				endm  
# End of macro CALLMONITOR
9c04			endif	 
9c04 19				add hl,de 
9c05			if DEBUG_FORTH_PUSH 
9c05						DMARK "PQE" 
9c05 f5				push af  
9c06 3a 1a 9c			ld a, (.dmark)  
9c09 32 6b ee			ld (debug_mark),a  
9c0c 3a 1b 9c			ld a, (.dmark+1)  
9c0f 32 6c ee			ld (debug_mark+1),a  
9c12 3a 1c 9c			ld a, (.dmark+2)  
9c15 32 6d ee			ld (debug_mark+2),a  
9c18 18 03			jr .pastdmark  
9c1a ..			.dmark: db "PQE"  
9c1d f1			.pastdmark: pop af  
9c1e			endm  
# End of macro DMARK
9c1e				CALLMONITOR 
9c1e cd 6f ee			call debug_vector  
9c21				endm  
# End of macro CALLMONITOR
9c21			endif	 
9c21			 
9c21 2b				dec hl    ; see if there is an optional trailing double quote 
9c22 7e				ld a,(hl) 
9c23 fe 22			cp '"' 
9c25 20 03			jr nz, .strnoq 
9c27 3e 00			ld a, 0      ; get rid of double quote 
9c29 77				ld (hl), a 
9c2a 23			.strnoq: inc hl 
9c2b			 
9c2b 3e 00			ld a, 0 
9c2d 77				ld (hl), a     ; add null term and get rid of trailing double quote 
9c2e			 
9c2e 13				inc de ; add one for the type string 
9c2f 13				inc de ; add one for null term??? 
9c30			 
9c30				; tos is get string pointer again 
9c30				; de contains space to allocate 
9c30				 
9c30 d5				push de 
9c31			 
9c31 eb				ex de, hl 
9c32			 
9c32				;push af 
9c32			 
9c32			if DEBUG_FORTH_PUSH 
9c32						DMARK "PHm" 
9c32 f5				push af  
9c33 3a 47 9c			ld a, (.dmark)  
9c36 32 6b ee			ld (debug_mark),a  
9c39 3a 48 9c			ld a, (.dmark+1)  
9c3c 32 6c ee			ld (debug_mark+1),a  
9c3f 3a 49 9c			ld a, (.dmark+2)  
9c42 32 6d ee			ld (debug_mark+2),a  
9c45 18 03			jr .pastdmark  
9c47 ..			.dmark: db "PHm"  
9c4a f1			.pastdmark: pop af  
9c4b			endm  
# End of macro DMARK
9c4b				CALLMONITOR 
9c4b cd 6f ee			call debug_vector  
9c4e				endm  
# End of macro CALLMONITOR
9c4e			endif	 
9c4e cd a3 91			call malloc	; on ret hl now contains allocated memory 
9c51				if DEBUG_FORTH_MALLOC_GUARD 
9c51 cc 27 cc				call z,malloc_error 
9c54				endif 
9c54			 
9c54				 
9c54 c1				pop bc    ; get length 
9c55 d1				pop de   ;  get string start    
9c56			 
9c56				; hl has destination from malloc 
9c56			 
9c56 eb				ex de, hl    ; prep for ldir 
9c57			 
9c57 d5				push de   ; save malloc area for DSP later 
9c58				;push hl   ; save malloc area for DSP later 
9c58			 
9c58			if DEBUG_FORTH_PUSH 
9c58						DMARK "PHc" 
9c58 f5				push af  
9c59 3a 6d 9c			ld a, (.dmark)  
9c5c 32 6b ee			ld (debug_mark),a  
9c5f 3a 6e 9c			ld a, (.dmark+1)  
9c62 32 6c ee			ld (debug_mark+1),a  
9c65 3a 6f 9c			ld a, (.dmark+2)  
9c68 32 6d ee			ld (debug_mark+2),a  
9c6b 18 03			jr .pastdmark  
9c6d ..			.dmark: db "PHc"  
9c70 f1			.pastdmark: pop af  
9c71			endm  
# End of macro DMARK
9c71				CALLMONITOR 
9c71 cd 6f ee			call debug_vector  
9c74				endm  
# End of macro CALLMONITOR
9c74			endif	 
9c74			 
9c74			 
9c74 ed b0			ldir 
9c76			 
9c76			 
9c76				; push malloc to data stack     macro?????  
9c76			 
9c76				FORTH_DSP_NEXT 
9c76 cd ca 9a			call macro_forth_dsp_next 
9c79				endm 
# End of macro FORTH_DSP_NEXT
9c79			 
9c79				; save value and type 
9c79			 
9c79 2a ee e9			ld hl, (cli_data_sp) 
9c7c			 
9c7c				; save item type 
9c7c 3e 01			ld a,  DS_TYPE_STR 
9c7e 77				ld (hl), a 
9c7f 23				inc hl 
9c80			 
9c80				; get malloc word off stack 
9c80 d1				pop de 
9c81 73				ld (hl), e 
9c82 23				inc hl 
9c83 72				ld (hl), d 
9c84			 
9c84			 
9c84			 
9c84			if DEBUG_FORTH_PUSH 
9c84 2a ee e9			ld hl, (cli_data_sp) 
9c87						DMARK "PHS" 
9c87 f5				push af  
9c88 3a 9c 9c			ld a, (.dmark)  
9c8b 32 6b ee			ld (debug_mark),a  
9c8e 3a 9d 9c			ld a, (.dmark+1)  
9c91 32 6c ee			ld (debug_mark+1),a  
9c94 3a 9e 9c			ld a, (.dmark+2)  
9c97 32 6d ee			ld (debug_mark+2),a  
9c9a 18 03			jr .pastdmark  
9c9c ..			.dmark: db "PHS"  
9c9f f1			.pastdmark: pop af  
9ca0			endm  
# End of macro DMARK
9ca0				CALLMONITOR 
9ca0 cd 6f ee			call debug_vector  
9ca3				endm  
# End of macro CALLMONITOR
9ca3			;	ex de,hl 
9ca3			endif	 
9ca3				; in case of spaces, skip the ptr past the copied string 
9ca3				;pop af 
9ca3				;ld (cli_origptr),hl 
9ca3			 
9ca3 c9				ret 
9ca4			 
9ca4			 
9ca4			 
9ca4			; TODO ascii push input onto stack given hl to start of input 
9ca4			 
9ca4			; identify type 
9ca4			; if starts with a " then a string 
9ca4			; otherwise it is a number 
9ca4			;  
9ca4			; if a string 
9ca4			;     scan for ending " to get length of string to malloc for + 1 
9ca4			;     malloc 
9ca4			;     put pointer to string on stack first byte flags as string 
9ca4			; 
9ca4			; else a number 
9ca4			;    look for number format identifier 
9ca4			;    $xx hex 
9ca4			;    %xxxxx bin 
9ca4			;    xxxxx decimal 
9ca4			;    convert number to 16bit word.  
9ca4			;    malloc word + 1 with flag to identiy as num 
9ca4			;    put pointer to number on stack 
9ca4			;   
9ca4			;  
9ca4			  
9ca4			forth_apush: 
9ca4				; kernel push 
9ca4			 
9ca4			if DEBUG_FORTH_PUSH 
9ca4						DMARK "PSH" 
9ca4 f5				push af  
9ca5 3a b9 9c			ld a, (.dmark)  
9ca8 32 6b ee			ld (debug_mark),a  
9cab 3a ba 9c			ld a, (.dmark+1)  
9cae 32 6c ee			ld (debug_mark+1),a  
9cb1 3a bb 9c			ld a, (.dmark+2)  
9cb4 32 6d ee			ld (debug_mark+2),a  
9cb7 18 03			jr .pastdmark  
9cb9 ..			.dmark: db "PSH"  
9cbc f1			.pastdmark: pop af  
9cbd			endm  
# End of macro DMARK
9cbd				CALLMONITOR 
9cbd cd 6f ee			call debug_vector  
9cc0				endm  
# End of macro CALLMONITOR
9cc0			endif	 
9cc0				; identify input type 
9cc0			 
9cc0 7e				ld a,(hl) 
9cc1 fe 22			cp '"' 
9cc3 28 0a			jr z, .fapstr 
9cc5 fe 24			cp '$' 
9cc7 ca ef 9c			jp z, .faphex 
9cca fe 25			cp '%' 
9ccc ca d7 9c			jp z, .fapbin 
9ccf			;	cp 'b' 
9ccf			;	jp z, .fabin 
9ccf				; else decimal 
9ccf			 
9ccf				; TODO do decimal conversion 
9ccf				; decimal is stored as a 16bit word 
9ccf			 
9ccf				; by default everything is a string if type is not detected 
9ccf			.fapstr: ; 
9ccf fe 22			cp '"' 
9cd1 20 01			jr nz, .strnoqu 
9cd3 23				inc hl 
9cd4			.strnoqu: 
9cd4 c3 a9 9b			jp forth_push_str 
9cd7			 
9cd7			 
9cd7			 
9cd7			.fapbin:    ; push a binary string.  
9cd7 11 00 00			ld de, 0   ; hold a 16bit value 
9cda			 
9cda 23			.fapbinshift:	inc hl  
9cdb 7e				ld a,(hl) 
9cdc fe 00			cp 0     ; done scanning  
9cde 28 0b			jr z, .fapbdone  	; got it in HL so push  
9ce0			 
9ce0				; left shift de 
9ce0 eb				ex de, hl	 
9ce1 29				add hl, hl 
9ce2			 
9ce2				; is 1 
9ce2 fe 31			cp '1' 
9ce4 20 02			jr nz, .binzero 
9ce6 cb 4d			bit 1, l 
9ce8			.binzero: 
9ce8 eb				ex de, hl	 ; save current de 
9ce9 18 ef			jr .fapbinshift 
9ceb			 
9ceb			.fapbdone: 
9ceb eb				ex de, hl 
9cec c3 3b 9b			jp forth_push_numhl 
9cef			 
9cef			 
9cef			.faphex:   ; hex is always stored as a 16bit word 
9cef				; skip number prefix 
9cef 23				inc hl 
9cf0				; turn ascii into number 
9cf0 cd 93 90			call get_word_hl	; ret 16bit word in hl 
9cf3			 
9cf3 c3 3b 9b			jp forth_push_numhl 
9cf6			 
9cf6 00				 nop 
9cf7			 
9cf7			.fabin:   ; TODO bin conversion 
9cf7			 
9cf7			 
9cf7 c9				ret 
9cf8			 
9cf8			 
9cf8			; get either a string ptr or a 16bit word from the data stack 
9cf8			 
9cf8			FORTH_DSP: macro 
9cf8				call macro_forth_dsp 
9cf8				endm 
9cf8			 
9cf8			macro_forth_dsp: 
9cf8				; data stack pointer points to current word on tos 
9cf8			 
9cf8 2a ee e9			ld hl,(cli_data_sp) 
9cfb			 
9cfb				if DEBUG_FORTH_PUSH 
9cfb						DMARK "DSP" 
9cfb f5				push af  
9cfc 3a 10 9d			ld a, (.dmark)  
9cff 32 6b ee			ld (debug_mark),a  
9d02 3a 11 9d			ld a, (.dmark+1)  
9d05 32 6c ee			ld (debug_mark+1),a  
9d08 3a 12 9d			ld a, (.dmark+2)  
9d0b 32 6d ee			ld (debug_mark+2),a  
9d0e 18 03			jr .pastdmark  
9d10 ..			.dmark: db "DSP"  
9d13 f1			.pastdmark: pop af  
9d14			endm  
# End of macro DMARK
9d14			 
9d14 cd 5a cc				call display_data_sp 
9d17				;call break_point_state 
9d17				;rst 030h 
9d17				CALLMONITOR 
9d17 cd 6f ee			call debug_vector  
9d1a				endm  
# End of macro CALLMONITOR
9d1a				endif 
9d1a			 
9d1a c9				ret 
9d1b			 
9d1b			; return hl to start of value on stack 
9d1b			 
9d1b			FORTH_DSP_VALUE: macro 
9d1b				call macro_forth_dsp_value 
9d1b				endm 
9d1b			 
9d1b			macro_forth_dsp_value: 
9d1b			 
9d1b				FORTH_DSP 
9d1b cd f8 9c			call macro_forth_dsp 
9d1e				endm 
# End of macro FORTH_DSP
9d1e			 
9d1e d5				push de 
9d1f			 
9d1f 23				inc hl ; skip type 
9d20			 
9d20 5e				ld e, (hl) 
9d21 23				inc hl 
9d22 56				ld d, (hl) 
9d23 eb				ex de,hl  
9d24			 
9d24 d1				pop de 
9d25			 
9d25 c9				ret 
9d26			 
9d26			; return hl to start of value to second item on stack 
9d26			 
9d26			FORTH_DSP_VALUEM1: macro 
9d26				call macro_forth_dsp_value_m1 
9d26				endm 
9d26			 
9d26			macro_forth_dsp_value_m1: 
9d26			 
9d26				FORTH_DSP 
9d26 cd f8 9c			call macro_forth_dsp 
9d29				endm 
# End of macro FORTH_DSP
9d29			 
9d29 2b				dec hl 
9d2a 2b				dec hl 
9d2b			;	dec hl 
9d2b			 
9d2b d5				push de 
9d2c			 
9d2c 5e				ld e, (hl) 
9d2d 23				inc hl 
9d2e 56				ld d, (hl) 
9d2f eb				ex de,hl  
9d30			 
9d30 d1				pop de 
9d31			 
9d31 c9				ret 
9d32			 
9d32				 
9d32			 
9d32			; whatever the current top os stack points to, we are now done with it so return memory to malloc 
9d32			 
9d32			FORTH_DSP_POP: macro 
9d32				call macro_forth_dsp_pop 
9d32				endm 
9d32			 
9d32			 
9d32			; get the tos data type 
9d32			 
9d32			FORTH_DSP_TYPE:   macro 
9d32			 
9d32				;FORTH_DSP_VALUE 
9d32				FORTH_DSP 
9d32				 
9d32				; hl points to value 
9d32				; check type 
9d32			 
9d32				ld a,(hl) 
9d32			 
9d32				endm 
9d32			 
9d32			; load the tos value into hl 
9d32			 
9d32			 
9d32			FORTH_DSP_VALUEHL:  macro 
9d32				call macro_dsp_valuehl 
9d32				endm 
9d32			 
9d32			 
9d32			 
9d32			macro_dsp_valuehl: 
9d32				FORTH_DSP_VALUE 
9d32 cd 1b 9d			call macro_forth_dsp_value 
9d35				endm 
# End of macro FORTH_DSP_VALUE
9d35			 
9d35				;FORTH_ERR_TOS_NOTNUM 
9d35			 
9d35				;inc hl   ; skip type id 
9d35			 
9d35			;	push de 
9d35			; 
9d35			;	ld e, (hl) 
9d35			;	inc hl 
9d35			;	ld d, (hl) 
9d35			;	ex de,hl  
9d35			 
9d35			;	pop de 
9d35			 
9d35				if DEBUG_FORTH_PUSH 
9d35						DMARK "DVL" 
9d35 f5				push af  
9d36 3a 4a 9d			ld a, (.dmark)  
9d39 32 6b ee			ld (debug_mark),a  
9d3c 3a 4b 9d			ld a, (.dmark+1)  
9d3f 32 6c ee			ld (debug_mark+1),a  
9d42 3a 4c 9d			ld a, (.dmark+2)  
9d45 32 6d ee			ld (debug_mark+2),a  
9d48 18 03			jr .pastdmark  
9d4a ..			.dmark: db "DVL"  
9d4d f1			.pastdmark: pop af  
9d4e			endm  
# End of macro DMARK
9d4e				CALLMONITOR 
9d4e cd 6f ee			call debug_vector  
9d51				endm  
# End of macro CALLMONITOR
9d51				endif 
9d51 c9				ret 
9d52			 
9d52			forth_apushstrhl:      
9d52				; push of string requires use of cli_origptr 
9d52				; bodge use 
9d52			 
9d52				; get current cli_origptr, save, update with temp pointer  
9d52 ed 5b 3e ea		ld de, (cli_origptr) 
9d56 22 3e ea			ld (cli_origptr), hl 
9d59 d5				push de 
9d5a cd a4 9c			call forth_apush 
9d5d d1				pop de 
9d5e ed 53 3e ea		ld (cli_origptr), de 
9d62 c9			        ret	 
9d63			 
9d63			 
9d63			; increase loop stack pointer and save hl to it 
9d63				 
9d63			FORTH_LOOP_NEXT: macro 
9d63				call macro_forth_loop_next 
9d63				;nop 
9d63				endm 
9d63			 
9d63			macro_forth_loop_next: 
9d63				if DEBUG_FORTH_STACK_GUARD 
9d63 cd 93 e0				call check_stacks 
9d66				endif 
9d66 e5				push hl 
9d67 d5				push de 
9d68 eb				ex de,hl 
9d69 2a f0 e9			ld hl,(cli_loop_sp) 
9d6c 23				inc hl 
9d6d 23				inc hl 
9d6e					if DEBUG_FORTH_WORDS 
9d6e						DMARK "LNX" 
9d6e f5				push af  
9d6f 3a 83 9d			ld a, (.dmark)  
9d72 32 6b ee			ld (debug_mark),a  
9d75 3a 84 9d			ld a, (.dmark+1)  
9d78 32 6c ee			ld (debug_mark+1),a  
9d7b 3a 85 9d			ld a, (.dmark+2)  
9d7e 32 6d ee			ld (debug_mark+2),a  
9d81 18 03			jr .pastdmark  
9d83 ..			.dmark: db "LNX"  
9d86 f1			.pastdmark: pop af  
9d87			endm  
# End of macro DMARK
9d87						CALLMONITOR 
9d87 cd 6f ee			call debug_vector  
9d8a				endm  
# End of macro CALLMONITOR
9d8a					endif 
9d8a 22 f0 e9			ld (cli_loop_sp),hl 
9d8d 73				ld (hl), e 
9d8e 23				inc hl 
9d8f 72				ld (hl), d 
9d90 d1				pop de    ; been reversed so save a swap on restore 
9d91 e1				pop hl 
9d92				if DEBUG_FORTH_STACK_GUARD 
9d92 cd 93 e0				call check_stacks 
9d95				endif 
9d95 c9				ret 
9d96			 
9d96			; get current ret stack pointer and save to hl  
9d96				 
9d96			FORTH_LOOP_TOS: macro 
9d96				call macro_forth_loop_tos 
9d96				endm 
9d96			 
9d96			macro_forth_loop_tos: 
9d96 d5				push de 
9d97 2a f0 e9			ld hl,(cli_loop_sp) 
9d9a 5e				ld e, (hl) 
9d9b 23				inc hl 
9d9c 56				ld d, (hl) 
9d9d eb				ex de, hl 
9d9e d1				pop de 
9d9f c9				ret 
9da0			 
9da0			; pop loop stack pointer 
9da0				 
9da0			FORTH_LOOP_POP: macro 
9da0				call macro_forth_loop_pop 
9da0				endm 
9da0			 
9da0			 
9da0			macro_forth_loop_pop: 
9da0				if DEBUG_FORTH_STACK_GUARD 
9da0					DMARK "LPP" 
9da0 f5				push af  
9da1 3a b5 9d			ld a, (.dmark)  
9da4 32 6b ee			ld (debug_mark),a  
9da7 3a b6 9d			ld a, (.dmark+1)  
9daa 32 6c ee			ld (debug_mark+1),a  
9dad 3a b7 9d			ld a, (.dmark+2)  
9db0 32 6d ee			ld (debug_mark+2),a  
9db3 18 03			jr .pastdmark  
9db5 ..			.dmark: db "LPP"  
9db8 f1			.pastdmark: pop af  
9db9			endm  
# End of macro DMARK
9db9 cd 93 e0				call check_stacks 
9dbc					FORTH_CHK_LOOP_UNDER 
9dbc e5				push hl 
9dbd d5				push de 
9dbe 2a f0 e9			ld hl,(cli_loop_sp) 
9dc1 11 2a e9			ld de, cli_loop_stack 
9dc4 cd fa 8c			call cmp16 
9dc7 da ad e1			jp c, fault_loop_under 
9dca d1				pop de 
9dcb e1				pop hl 
9dcc				endm 
# End of macro FORTH_CHK_LOOP_UNDER
9dcc				endif 
9dcc e5				push hl 
9dcd 2a f0 e9			ld hl,(cli_loop_sp) 
9dd0 2b				dec hl 
9dd1 2b				dec hl 
9dd2 22 f0 e9			ld (cli_loop_sp), hl 
9dd5				; TODO do stack underflow checks 
9dd5 e1				pop hl 
9dd6				if DEBUG_FORTH_STACK_GUARD 
9dd6 cd 93 e0				call check_stacks 
9dd9					FORTH_CHK_LOOP_UNDER 
9dd9 e5				push hl 
9dda d5				push de 
9ddb 2a f0 e9			ld hl,(cli_loop_sp) 
9dde 11 2a e9			ld de, cli_loop_stack 
9de1 cd fa 8c			call cmp16 
9de4 da ad e1			jp c, fault_loop_under 
9de7 d1				pop de 
9de8 e1				pop hl 
9de9				endm 
# End of macro FORTH_CHK_LOOP_UNDER
9de9				endif 
9de9 c9				ret 
9dea			 
9dea			macro_forth_dsp_pop: 
9dea			 
9dea e5				push hl 
9deb			 
9deb				; release malloc data 
9deb			 
9deb				if DEBUG_FORTH_STACK_GUARD 
9deb cd 93 e0				call check_stacks 
9dee					FORTH_CHK_DSP_UNDER 
9dee e5				push hl 
9def d5				push de 
9df0 2a ee e9			ld hl,(cli_data_sp) 
9df3 11 28 e8			ld de, cli_data_stack 
9df6 cd fa 8c			call cmp16 
9df9 da a1 e1			jp c, fault_dsp_under 
9dfc d1				pop de 
9dfd e1				pop hl 
9dfe				endm 
# End of macro FORTH_CHK_DSP_UNDER
9dfe				endif 
9dfe				;ld hl,(cli_data_sp) 
9dfe			if DEBUG_FORTH_DOT 
9dfe				DMARK "DPP" 
9dfe f5				push af  
9dff 3a 13 9e			ld a, (.dmark)  
9e02 32 6b ee			ld (debug_mark),a  
9e05 3a 14 9e			ld a, (.dmark+1)  
9e08 32 6c ee			ld (debug_mark+1),a  
9e0b 3a 15 9e			ld a, (.dmark+2)  
9e0e 32 6d ee			ld (debug_mark+2),a  
9e11 18 03			jr .pastdmark  
9e13 ..			.dmark: db "DPP"  
9e16 f1			.pastdmark: pop af  
9e17			endm  
# End of macro DMARK
9e17				CALLMONITOR 
9e17 cd 6f ee			call debug_vector  
9e1a				endm  
# End of macro CALLMONITOR
9e1a			endif	 
9e1a			 
9e1a			 
9e1a			if FORTH_ENABLE_DSPPOPFREE 
9e1a			 
9e1a				FORTH_DSP 
9e1a cd f8 9c			call macro_forth_dsp 
9e1d				endm 
# End of macro FORTH_DSP
9e1d			 
9e1d 7e				ld a, (hl) 
9e1e fe 01			cp DS_TYPE_STR 
9e20 20 23			jr nz, .skippopfree 
9e22			 
9e22				FORTH_DSP_VALUEHL 
9e22 cd 32 9d			call macro_dsp_valuehl 
9e25				endm 
# End of macro FORTH_DSP_VALUEHL
9e25 00				nop 
9e26			if DEBUG_FORTH_DOT 
9e26				DMARK "DPf" 
9e26 f5				push af  
9e27 3a 3b 9e			ld a, (.dmark)  
9e2a 32 6b ee			ld (debug_mark),a  
9e2d 3a 3c 9e			ld a, (.dmark+1)  
9e30 32 6c ee			ld (debug_mark+1),a  
9e33 3a 3d 9e			ld a, (.dmark+2)  
9e36 32 6d ee			ld (debug_mark+2),a  
9e39 18 03			jr .pastdmark  
9e3b ..			.dmark: db "DPf"  
9e3e f1			.pastdmark: pop af  
9e3f			endm  
# End of macro DMARK
9e3f				CALLMONITOR 
9e3f cd 6f ee			call debug_vector  
9e42				endm  
# End of macro CALLMONITOR
9e42			endif	 
9e42 cd 6d 92			call free 
9e45			.skippopfree: 
9e45				 
9e45			 
9e45			endif 
9e45			 
9e45			if DEBUG_FORTH_DOT_KEY 
9e45				DMARK "DP2" 
9e45				CALLMONITOR 
9e45			endif	 
9e45			 
9e45				; move pointer down 
9e45			 
9e45 2a ee e9			ld hl,(cli_data_sp) 
9e48 2b				dec hl 
9e49 2b				dec hl 
9e4a			; PARSEV5 
9e4a 2b				dec hl 
9e4b 22 ee e9			ld (cli_data_sp), hl 
9e4e			 
9e4e				if DEBUG_FORTH_STACK_GUARD 
9e4e cd 93 e0				call check_stacks 
9e51					FORTH_CHK_DSP_UNDER 
9e51 e5				push hl 
9e52 d5				push de 
9e53 2a ee e9			ld hl,(cli_data_sp) 
9e56 11 28 e8			ld de, cli_data_stack 
9e59 cd fa 8c			call cmp16 
9e5c da a1 e1			jp c, fault_dsp_under 
9e5f d1				pop de 
9e60 e1				pop hl 
9e61				endm 
# End of macro FORTH_CHK_DSP_UNDER
9e61				endif 
9e61			 
9e61 e1				pop hl 
9e62			 
9e62 c9				ret 
9e63			 
9e63			getwordathl: 
9e63				; hl points to an address 
9e63				; load hl with the word at that address 
9e63			 
9e63 d5				push de 
9e64			 
9e64 5e				ld e, (hl) 
9e65 23				inc hl 
9e66 56				ld d, (hl) 
9e67 eb				ex de, hl 
9e68			 
9e68 d1				pop de 
9e69 c9				ret 
9e6a			 
9e6a			 
9e6a			 
9e6a			 
9e6a			 
9e6a			; eof 
9e6a			 
# End of file forth_stackopsv5.asm
9e6a			endif 
9e6a			 
9e6a			loadwordinhl:	 
9e6a			 
9e6a d5				push de 
9e6b			 
9e6b 5e				ld e, (hl) 
9e6c 23				inc hl 
9e6d 56				ld d, (hl) 
9e6e eb				ex de,hl  
9e6f			 
9e6f d1				pop de 
9e70			 
9e70 c9				ret 
9e71			 
9e71			user_word_eol:  
9e71				; hl contains the pointer to where to create a linked list item from the end 
9e71				; of the user dict to continue on at the system word dict 
9e71				 
9e71				; poke the stub of the word list linked list to repoint to rom words 
9e71			 
9e71				; stub format 
9e71				; db   word id 
9e71				; dw    link to next word 
9e71			        ; db char length of token 
9e71				; db string + 0 term 
9e71				; db exec code....  
9e71			 
9e71 3e 00			ld a, WORD_SYS_ROOT     ; root word 
9e73 77				ld (hl), a		; word id 
9e74 23				inc hl 
9e75			 
9e75 11 40 a0			ld de, sysdict 
9e78 73				ld (hl), e		; next word link ie system dict 
9e79 23				inc hl 
9e7a 72				ld (hl), d		; next word link ie system dict 
9e7b 23				inc hl	 
9e7c			 
9e7c			;	ld (hl), sysdict		; next word link ie system dict 
9e7c			;	inc hl 
9e7c			;	inc hl 
9e7c			 
9e7c			;	inc hl 
9e7c			;	inc hl 
9e7c			 
9e7c 3e 02			ld a, 2			; word length is 0 
9e7e 77				ld (hl), a	 
9e7f 23				inc hl 
9e80			 
9e80 3e 7e			ld a, '~'			; word length is 0 
9e82 77				ld (hl), a	 
9e83 23				inc hl 
9e84 3e 00			ld a, 0			; save empty word 
9e86 77				ld (hl), a 
9e87			 
9e87 c9				ret 
9e88			 
9e88				 
9e88			 
9e88			forthexec_cleanup: 
9e88				FORTH_RSP_POP 
9e88 cd 03 9b			call macro_forth_rsp_pop 
9e8b				endm 
# End of macro FORTH_RSP_POP
9e8b c9				ret 
9e8c			 
9e8c			forth_call_hl: 
9e8c				; taking hl 
9e8c e5				push hl 
9e8d c9				ret 
9e8e			 
9e8e			; this is called to reset Forth system but keep existing uwords etc 
9e8e			 
9e8e			forth_warmstart: 
9e8e				; setup stack over/under flow checks 
9e8e				if DEBUG_FORTH_STACK_GUARD 
9e8e cd 79 e0				call chk_stk_init 
9e91				endif 
9e91			 
9e91				; init stack pointers  - * these stacks go upwards *  
9e91 21 ac e9			ld hl, cli_ret_stack 
9e94 22 f2 e9			ld (cli_ret_sp), hl	 
9e97				; set bottom of stack 
9e97 3e 00			ld a,0 
9e99 77				ld (hl),a 
9e9a 23				inc hl 
9e9b 77				ld (hl),a 
9e9c			 
9e9c 21 28 e8			ld hl, cli_data_stack 
9e9f 22 ee e9			ld (cli_data_sp), hl	 
9ea2				; set bottom of stack 
9ea2 3e 00			ld a,0 
9ea4 77				ld (hl),a 
9ea5 23				inc hl 
9ea6 77				ld (hl),a 
9ea7			 
9ea7 21 2a e9			ld hl, cli_loop_stack 
9eaa 22 f0 e9			ld (cli_loop_sp), hl	 
9ead				; set bottom of stack 
9ead 3e 00			ld a,0 
9eaf 77				ld (hl),a 
9eb0 23				inc hl 
9eb1 77				ld (hl),a 
9eb2			 
9eb2				; init extent of current open file 
9eb2			 
9eb2 3e 00			ld a, 0 
9eb4 32 6a ea			ld (store_openext), a 
9eb7			 
9eb7 c9				ret 
9eb8			 
9eb8			 
9eb8			 
9eb8			; Cold Start - this is called to setup the whole Forth system 
9eb8			 
9eb8			forth_init: 
9eb8			 
9eb8				; setup stack over/under flow checks 
9eb8			 
9eb8			;	if DEBUG_FORTH_STACK_GUARD 
9eb8			;		call chk_stk_init 
9eb8			;	endif 
9eb8			 
9eb8				; enable auto display updates (slow.....) 
9eb8			 
9eb8 3e 01			ld a, 1 
9eba 32 3c ea			ld (cli_autodisplay), a 
9ebd			 
9ebd				; if storage is in use disable long reads for now 
9ebd 3e 00			ld a, 0 
9ebf 32 75 ea			ld (store_longread), a 
9ec2			 
9ec2			 
9ec2				; show start up screen 
9ec2			 
9ec2 cd af 8a			call clear_display 
9ec5			 
9ec5 3e 00			ld a,0 
9ec7 32 5e ea			ld (f_cursor_ptr), a 
9eca			 
9eca				; set start of word list in start of ram - for use when creating user words 
9eca			 
9eca 21 2d e4			ld hl, baseram 
9ecd 22 be e5			ld (os_last_new_uword), hl 
9ed0 cd 71 9e			call user_word_eol 
9ed3				 
9ed3			;		call display_data_sp 
9ed3			;		call next_page_prompt 
9ed3			 
9ed3			 
9ed3			 
9ed3			 
9ed3 c9				ret 
9ed4			 
9ed4 .. 00		.bootforth: db " Forth Kernel Init ",0 
9ee8			 
9ee8			; TODO push to stack 
9ee8			 
9ee8			;  
9ee8			 
9ee8			if FORTH_PARSEV2 
9ee8			 
9ee8			 
9ee8				include "forth_parserv2.asm" 
9ee8			 
9ee8			endif 
9ee8			 
9ee8			 
9ee8			; parse cli version 1 
9ee8			 
9ee8			if FORTH_PARSEV1 
9ee8			 
9ee8			 
9ee8			 
9ee8			      include "forth_parserv1.asm" 
9ee8			endif 
9ee8				 
9ee8			if FORTH_PARSEV3 
9ee8			 
9ee8			 
9ee8			 
9ee8			      include "forth_parserv3.asm" 
9ee8				include "forth_wordsv3.asm" 
9ee8			endif 
9ee8			 
9ee8			if FORTH_PARSEV4 
9ee8			 
9ee8			 
9ee8			 
9ee8			      include "forth_parserv4.asm" 
9ee8				include "forth_wordsv4.asm" 
9ee8			endif 
9ee8			 
9ee8			if FORTH_PARSEV5 
9ee8			 
9ee8			 
9ee8			 
9ee8			      include "forth_parserv5.asm" 
9ee8			 
9ee8			 
9ee8			; A better parser without using malloc and string copies all over the place.  
9ee8			; Exec in situ should be faster 
9ee8			 
9ee8			;WORD_SYS_LOWPRIM: equ 4    ; Offset for low level prim words opcode 
9ee8			;WORD_SYS_BRANCH: equ 10    ; Offset for branching and loop words opcode 
9ee8			WORD_SYS_UWORD: equ 1   ; Opcode for all user words 
9ee8			WORD_SYS_DELETED: equ 3 ; Op code for a deleted UWORD 
9ee8			WORD_SYS_ROOT: equ 0   ; Opcode for all user words 
9ee8			WORD_SYS_END: equ 0   ; Opcode for all user words 
9ee8			WORD_SYS_CORE: equ 20    ; Offset for dict core words opcode 
9ee8			WORD_FLAG_CODE: equ 0	   ; opcodeflag to exec pure code for this word 
9ee8			WORD_FLAG_JP: equ 1	   ; opcodeflag to list zero term jump table words 
9ee8			 
9ee8			; Core word preamble macro 
9ee8			 
9ee8			CWHEAD:   macro nxtword opcode lit len opflags 
9ee8				db WORD_SYS_CORE+opcode             
9ee8				; internal op code number 
9ee8				dw nxtword            
9ee8				; link to next dict word block 
9ee8				db len + 1 
9ee8				; literal length of dict word inc zero term 
9ee8				db lit,0              
9ee8				; literal dict word 
9ee8			        ; TODO db opflags        
9ee8				endm 
9ee8			 
9ee8			 
9ee8			NEXTW: macro  
9ee8				jp macro_next 
9ee8				endm 
9ee8			 
9ee8			macro_next: 
9ee8			if DEBUG_FORTH_PARSE_KEY 
9ee8				DMARK "NXT" 
9ee8				CALLMONITOR 
9ee8			endif	 
9ee8			;	inc hl  ; skip token null term  
9ee8 ed 4b 40 ea		ld bc,(cli_ptr)   ; move to next token to parse in the input stream 
9eec ed 5b 3e ea		ld de,(cli_origptr)   ; move to next token to parse in the input stream 
9ef0 2a c2 e5			ld hl,(os_tok_ptr)   ; move to next token to parse in the input stream 
9ef3			if DEBUG_FORTH_PARSE_KEY 
9ef3				DMARK "}AA" 
9ef3				CALLMONITOR 
9ef3			endif	 
9ef3 c3 f6 9f			jp execnext 
9ef6				;jp exec1 
9ef6			       
9ef6			 
9ef6			 
9ef6			; Another go at the parser to compile  
9ef6			 
9ef6			 
9ef6			; TODO rework parser to change all of the string words to byte tokens 
9ef6			; TODO do a search for  
9ef6			 
9ef6			; TODO first run normal parser to zero term sections 
9ef6			; TODO for each word do a token look up to get the op code 
9ef6			; TODO need some means to flag to the exec that this is a byte code form    
9ef6			 
9ef6			 
9ef6			forthcompile: 
9ef6			 
9ef6			; 
9ef6			; line parse: 
9ef6			;       parse raw input buffer 
9ef6			;       tokenise the words 
9ef6			;       malloc new copy (for looping etc) 
9ef6			;       copy to malloc + current pc in line to start of string and add line term 
9ef6			;       save on new rsp 
9ef6			; 
9ef6			 
9ef6			; hl to point to the line to tokenise 
9ef6			 
9ef6			;	push hl 
9ef6 22 c2 e5			ld (os_tok_ptr), hl  ; save ptr to string 
9ef9			 
9ef9			;	ld a,0		; string term on input 
9ef9			;	call strlent 
9ef9			 
9ef9			;	ld (os_tok_len), hl	 ; save string length 
9ef9			 
9ef9			;if DEBUG_FORTH_TOK 
9ef9			;	ex de,hl		 
9ef9			;endif 
9ef9			 
9ef9			;	pop hl 		; get back string pointer 
9ef9			 
9ef9			if DEBUG_FORTH_TOK 
9ef9						DMARK "TOc" 
9ef9				CALLMONITOR 
9ef9			endif 
9ef9 7e			.cptoken2:    ld a,(hl) 
9efa 23				inc hl 
9efb fe 7f			cp FORTH_END_BUFFER 
9efd 28 29			jr z, .cptokendone2 
9eff fe 00			cp 0 
9f01 28 25			jr z, .cptokendone2 
9f03 fe 22			cp '"' 
9f05 28 0b			jr z, .cptokenstr2     ; will want to skip until end of string delim 
9f07 fe 20			cp ' ' 
9f09 20 ee			jr nz,  .cptoken2 
9f0b			 
9f0b			; TODO consume comments held between ( and ) 
9f0b			 
9f0b				; we have a space so change to zero term for dict match later 
9f0b 2b				dec hl 
9f0c 3e 00			ld a,0 
9f0e 77				ld (hl), a 
9f0f 23				inc hl 
9f10 18 e7			jr .cptoken2 
9f12				 
9f12			 
9f12			.cptokenstr2: 
9f12				; skip all white space until either eol (because forgot to term) or end double quote 
9f12			        ;   if double quotes spotted ensure to skip any space sep until matched doble quote 
9f12				;inc hl ; skip current double quote 
9f12 7e				ld a,(hl) 
9f13 23				inc hl 
9f14 fe 22			cp '"' 
9f16 28 e1			jr z, .cptoken2 
9f18 fe 7f			cp FORTH_END_BUFFER 
9f1a 28 0c			jr z, .cptokendone2 
9f1c fe 00			cp 0 
9f1e 28 08			jr z, .cptokendone2 
9f20 fe 20			cp ' ' 
9f22 28 02			jr z, .cptmp2 
9f24 18 ec			jr .cptokenstr2 
9f26			 
9f26			.cptmp2:	; we have a space so change to zero term for dict match later 
9f26				;dec hl 
9f26				;ld a,"-"	; TODO remove this when working 
9f26				;ld (hl), a 
9f26				;inc hl 
9f26 18 ea			jr .cptokenstr2 
9f28			 
9f28			.cptokendone2: 
9f28				;inc hl 
9f28 3e 7f			ld a, FORTH_END_BUFFER 
9f2a 77				ld (hl),a 
9f2b 23				inc hl 
9f2c 3e 21			ld a, '!' 
9f2e 77				ld (hl),a 
9f2f			 
9f2f 2a c2 e5			ld hl,(os_tok_ptr) 
9f32			         
9f32			if DEBUG_FORTH_TOK 
9f32						DMARK "Tc1" 
9f32				CALLMONITOR 
9f32			endif 
9f32			 
9f32				; push exec string to top of return stack 
9f32				FORTH_RSP_NEXT 
9f32 cd e2 9a			call macro_forth_rsp_next 
9f35				endm 
# End of macro FORTH_RSP_NEXT
9f35 c9				ret 
9f36			 
9f36			; Another go at the parser need to simplify the process 
9f36			 
9f36			forthparse: 
9f36			 
9f36			; 
9f36			; line parse: 
9f36			;       parse raw input buffer 
9f36			;       tokenise the words 
9f36			;       malloc new copy (for looping etc) 
9f36			;       copy to malloc + current pc in line to start of string and add line term 
9f36			;       save on new rsp 
9f36			; 
9f36			 
9f36			; hl to point to the line to tokenise 
9f36			 
9f36			;	push hl 
9f36 22 c2 e5			ld (os_tok_ptr), hl  ; save ptr to string 
9f39			 
9f39			;	ld a,0		; string term on input 
9f39			;	call strlent 
9f39			 
9f39			;	ld (os_tok_len), hl	 ; save string length 
9f39			 
9f39			;if DEBUG_FORTH_TOK 
9f39			;	ex de,hl		 
9f39			;endif 
9f39			 
9f39			;	pop hl 		; get back string pointer 
9f39			 
9f39			if DEBUG_FORTH_TOK 
9f39						DMARK "TOK" 
9f39				CALLMONITOR 
9f39			endif 
9f39 7e			.ptoken2:    ld a,(hl) 
9f3a 23				inc hl 
9f3b fe 7f			cp FORTH_END_BUFFER 
9f3d 28 29			jr z, .ptokendone2 
9f3f fe 00			cp 0 
9f41 28 25			jr z, .ptokendone2 
9f43 fe 22			cp '"' 
9f45 28 0b			jr z, .ptokenstr2     ; will want to skip until end of string delim 
9f47 fe 20			cp ' ' 
9f49 20 ee			jr nz,  .ptoken2 
9f4b			 
9f4b			; TODO consume comments held between ( and ) 
9f4b			 
9f4b				; we have a space so change to zero term for dict match later 
9f4b 2b				dec hl 
9f4c 3e 00			ld a,0 
9f4e 77				ld (hl), a 
9f4f 23				inc hl 
9f50 18 e7			jr .ptoken2 
9f52				 
9f52			 
9f52			.ptokenstr2: 
9f52				; skip all white space until either eol (because forgot to term) or end double quote 
9f52			        ;   if double quotes spotted ensure to skip any space sep until matched doble quote 
9f52				;inc hl ; skip current double quote 
9f52 7e				ld a,(hl) 
9f53 23				inc hl 
9f54 fe 22			cp '"' 
9f56 28 e1			jr z, .ptoken2 
9f58 fe 7f			cp FORTH_END_BUFFER 
9f5a 28 0c			jr z, .ptokendone2 
9f5c fe 00			cp 0 
9f5e 28 08			jr z, .ptokendone2 
9f60 fe 20			cp ' ' 
9f62 28 02			jr z, .ptmp2 
9f64 18 ec			jr .ptokenstr2 
9f66			 
9f66			.ptmp2:	; we have a space so change to zero term for dict match later 
9f66				;dec hl 
9f66				;ld a,"-"	; TODO remove this when working 
9f66				;ld (hl), a 
9f66				;inc hl 
9f66 18 ea			jr .ptokenstr2 
9f68			 
9f68			.ptokendone2: 
9f68				;inc hl 
9f68 3e 7f			ld a, FORTH_END_BUFFER 
9f6a 77				ld (hl),a 
9f6b 23				inc hl 
9f6c 3e 21			ld a, '!' 
9f6e 77				ld (hl),a 
9f6f			 
9f6f 2a c2 e5			ld hl,(os_tok_ptr) 
9f72			         
9f72			if DEBUG_FORTH_TOK 
9f72						DMARK "TK1" 
9f72				CALLMONITOR 
9f72			endif 
9f72			 
9f72				; push exec string to top of return stack 
9f72				FORTH_RSP_NEXT 
9f72 cd e2 9a			call macro_forth_rsp_next 
9f75				endm 
# End of macro FORTH_RSP_NEXT
9f75 c9				ret 
9f76			 
9f76			; 
9f76			;	; malloc size + buffer pointer + if is loop flag 
9f76			;	ld hl,(os_tok_len) 		 ; get string length 
9f76			; 
9f76			;	ld a,l 
9f76			; 
9f76			;	cp 0			; we dont want to use a null string 
9f76			;	ret z 
9f76			; 
9f76			;;	add 3    ; prefix malloc with buffer for current word ptr 
9f76			; 
9f76			;	add 5     ; TODO when certain not over writing memory remove 
9f76			; 
9f76			;		 
9f76			; 
9f76			;if DEBUG_FORTH_TOK 
9f76			;			DMARK "TKE" 
9f76			;	CALLMONITOR 
9f76			;endif 
9f76			; 
9f76			;	ld l,a 
9f76			;	ld h,0 
9f76			;;	push hl   ; save required space for the copy later 
9f76			;	call malloc 
9f76			;if DEBUG_FORTH_TOK 
9f76			;			DMARK "TKM" 
9f76			;	CALLMONITOR 
9f76			;endif 
9f76			;	if DEBUG_FORTH_MALLOC_GUARD 
9f76			;		push af 
9f76			;		call ishlzero 
9f76			;;		ld a, l 
9f76			;;		add h 
9f76			;;		cp 0 
9f76			;		pop af 
9f76			;		 
9f76			;		call z,malloc_error 
9f76			;	endif 
9f76			;	ld (os_tok_malloc), hl	 ; save malloc ptr 
9f76			; 
9f76			; 
9f76			;if DEBUG_FORTH_TOK 
9f76			;			DMARK "TKR" 
9f76			;	CALLMONITOR 
9f76			;endif 
9f76			; 
9f76			;	FORTH_RSP_NEXT 
9f76			; 
9f76			;	;inc hl	 ; go past current buffer pointer 
9f76			;	;inc hl 
9f76			;	;inc hl   ; and past if loop flag 
9f76			;		; TODO Need to set flag  
9f76			; 
9f76			;	 
9f76			;	 
9f76			;	ex de,hl	; malloc is dest 
9f76			;	ld hl, (os_tok_len) 
9f76			;;	pop bc 
9f76			;	ld c, l                
9f76			;	ld b,0 
9f76			;	ld hl, (os_tok_ptr) 
9f76			; 
9f76			;if DEBUG_FORTH_TOK 
9f76			;			DMARK "TKT" 
9f76			;	CALLMONITOR 
9f76			;endif 
9f76			; 
9f76			;	; do str cpy 
9f76			; 
9f76			;	ldir      ; copy byte in hl to de 
9f76			; 
9f76			;	; set end of buffer to high bit on zero term and use that for end of buffer scan 
9f76			; 
9f76			;if DEBUG_FORTH_TOK 
9f76			; 
9f76			;			DMARK "TKY" 
9f76			;	CALLMONITOR 
9f76			;endif 
9f76			;	;ld a,0 
9f76			;	;ld a,FORTH_END_BUFFER 
9f76			;	ex de, hl 
9f76			;	;dec hl			 ; go back over the space delim at the end of word 
9f76			;	;ld (hl),a 
9f76			;	;inc hl                    ;  TODO double check this. Going past the end of string to make sure end of processing buffer is marked 
9f76			;	ld a,FORTH_END_BUFFER 
9f76			;	ld (hl),a 
9f76			;	inc hl 
9f76			;	ld a,FORTH_END_BUFFER 
9f76			;	ld (hl),a 
9f76			; 
9f76			;	; init the malloc area data 
9f76			;	; set pc for in current area 
9f76			;	;ld hl, (os_tok_malloc) 
9f76			;	;inc hl 
9f76			;	;inc hl 
9f76			;	;inc hl 
9f76			;	;ex de,hl 
9f76			;	;ld hl, (os_tok_malloc) 
9f76			;	;ld (hl),e 
9f76			;	;inc hl 
9f76			;	;ld (hl),d 
9f76			; 
9f76			; 
9f76			;	ld hl,(os_tok_malloc) 
9f76			;if DEBUG_FORTH_PARSE_KEY 
9f76			;			DMARK "TKU" 
9f76			;	CALLMONITOR 
9f76			;endif 
9f76			; 
9f76			;	ret 
9f76			 
9f76			forthexec: 
9f76			 
9f76			; line exec: 
9f76			; forth parser 
9f76			 
9f76			; 
9f76			;       get current exec line on rsp 
9f76			 
9f76				FORTH_RSP_TOS 
9f76 cd f9 9a			call macro_forth_rsp_tos 
9f79				endm 
# End of macro FORTH_RSP_TOS
9f79			 
9f79			;       restore current pc - hl points to malloc of data 
9f79			 
9f79				;ld e, (hl) 
9f79				;inc hl 
9f79				;ld d, (hl) 
9f79				;ex de,hl 
9f79			 
9f79			 
9f79			exec1: 
9f79 22 c2 e5			ld (os_tok_ptr), hl 
9f7c			 
9f7c				; copy our PC to working vars  
9f7c 22 40 ea			ld (cli_ptr), hl 
9f7f 22 3e ea			ld (cli_origptr), hl 
9f82			 
9f82 7e				ld a,(hl) 
9f83 fe 7f			cp FORTH_END_BUFFER 
9f85 c8				ret z 
9f86			 
9f86				; skip any nulls 
9f86			 
9f86 fe 00			cp 0 
9f88 20 03			jr nz, .execword 
9f8a 23				inc hl 
9f8b 18 ec			jr exec1 
9f8d			 
9f8d			 
9f8d			.execword: 
9f8d			 
9f8d			 
9f8d			 
9f8d			if DEBUG_FORTH_PARSE_KEY 
9f8d						DMARK "KYQ" 
9f8d				CALLMONITOR 
9f8d			endif 
9f8d			;       while at start of word: 
9f8d			; get start of dict (in user area first) 
9f8d			 
9f8d 21 2d e4		ld hl, baseram 
9f90			;ld hl, sysdict 
9f90 22 42 ea		ld (cli_nextword),hl 
9f93			;           match word at pc 
9f93			;           exec word 
9f93			;           or push to dsp 
9f93			;           forward to next token 
9f93			;           if line term pop rsp and exit 
9f93			;        
9f93			 
9f93			if DEBUG_FORTH_PARSE_KEY 
9f93						DMARK "KYq" 
9f93				CALLMONITOR 
9f93			endif 
9f93			 
9f93			; 
9f93			; word comp 
9f93			;    get compiled byte and save it (need to decide if code is compiled or not for comparison) 
9f93			;    if byte is 0 then end parsing and report failed lookup (or could be something to add to stack etc) 
9f93			;    move to start of word  
9f93			;    compare word to cli_token 
9f93			 
9f93			.execpnword:	; HL at start of a word in the dictionary to check 
9f93			;	ld hl,(cli_origptr)	 ; reset start of word to look up 
9f93			;	ld (cli_ptr), hl 
9f93			 
9f93 2a 42 ea			ld hl,(cli_nextword) 
9f96			 
9f96 cd 39 a0			call forth_tok_next 
9f99			; tok next start here 
9f99			;	; TODO skip compiled symbol for now 
9f99			;	inc hl 
9f99			; 
9f99			;	; save pointer to next word 
9f99			; 
9f99			;	; hl now points to the address of the next word pointer  
9f99			;	ld e, (hl) 
9f99			;	inc hl 
9f99			;	ld d, (hl) 
9f99			;	inc l 
9f99			; 
9f99			;	ex de,hl 
9f99			;if DEBUG_FORTH_PARSE_NEXTWORD 
9f99			;	push bc 
9f99			;	ld bc, (cli_nextword) 
9f99			;			DMARK "NXW" 
9f99			;	CALLMONITOR 
9f99			;	pop bc 
9f99			;endif 
9f99			; tok next end here 
9f99 22 42 ea			ld (cli_nextword), hl     ; save for next check if no match on this word 
9f9c eb				ex de, hl 
9f9d			 
9f9d			 
9f9d				; save the pointer of the current token - 1 to check against 
9f9d				 
9f9d 22 46 ea			ld (cli_token), hl   
9fa0				; TODO maybe remove below save if no debug 
9fa0				; save token string ptr for any debug later 
9fa0 23				inc hl  
9fa1 22 48 ea			ld (cli_origtoken), hl 
9fa4 2b				dec hl 
9fa5				; save pointer to the start of the next dictionay word 
9fa5 7e				ld a,(hl)   ; get string length 
9fa6 47				ld b,a 
9fa7			.execpnwordinc:  
9fa7 23				inc hl 
9fa8 10 fd			djnz .execpnwordinc 
9faa 22 44 ea			ld (cli_execword), hl      ; save start of this words code 
9fad			 
9fad				; now check the word token against the string being parsed 
9fad			 
9fad 2a 46 ea			ld hl,(cli_token) 
9fb0 23				inc hl     ; skip string length (use zero term instead to end) 
9fb1 22 46 ea			ld (cli_token), hl 
9fb4			 
9fb4			if DEBUG_FORTH_PARSE_KEY 
9fb4						DMARK "KY2" 
9fb4			endif 
9fb4			if DEBUG_FORTH_PARSE_EXEC 
9fb4				; see if disabled 
9fb4			 
9fb4			;	ld a, (os_view_disable) 
9fb4			;	cp '*' 
9fb4				ld a, (debug_vector) 
9fb4				cp $c9   ; RET  
9fb4				jr z, .skip 
9fb4			 
9fb4				push hl 
9fb4				push hl 
9fb4				call clear_display 
9fb4				ld de, .compword 
9fb4				ld a, display_row_1 
9fb4				call str_at_display 
9fb4				pop de 
9fb4				ld a, display_row_2 
9fb4				call str_at_display 
9fb4				ld hl,(cli_ptr) 
9fb4				ld a,(hl) 
9fb4			        ld hl, os_word_scratch 
9fb4				ld (hl),a 
9fb4				ld a,0 
9fb4				inc hl 
9fb4				ld (hl),a 	 
9fb4				ld de, os_word_scratch 
9fb4				ld a, display_row_2+10 
9fb4				call str_at_display 
9fb4				call update_display 
9fb4				ld a, 100 
9fb4				call aDelayInMS 
9fb4				if DEBUG_FORTH_PARSE_EXEC_SLOW 
9fb4				call delay250ms 
9fb4				endif 
9fb4				pop hl 
9fb4			.skip:  
9fb4			endif	 
9fb4			.execpnchar:    ; compare char between token and string to parse 
9fb4			 
9fb4			if DEBUG_FORTH_PARSE_KEY 
9fb4						DMARK "Ky3" 
9fb4			endif 
9fb4			if DEBUG_FORTH_PARSE_EXEC 
9fb4				; see if disabled 
9fb4			 
9fb4			;	ld a, (os_view_disable) 
9fb4			;	cp '*' 
9fb4				ld a, (debug_vector) 
9fb4				cp $C9  ; RET 
9fb4				jr z, .skip2 
9fb4			 
9fb4			;	call clear_display 
9fb4			ld hl,(cli_token) 
9fb4			ld a,(hl) 
9fb4			ld (os_word_scratch),a 
9fb4				ld hl,(cli_ptr) 
9fb4			ld a,(hl) 
9fb4				ld (os_word_scratch+1),a 
9fb4				ld a,0 
9fb4				ld (os_word_scratch+2),a 
9fb4				ld de,os_word_scratch 
9fb4				ld a,display_row_4 
9fb4				call str_at_display 
9fb4				call update_display 
9fb4			.skip2:  
9fb4			endif 
9fb4 2a 46 ea			ld hl,(cli_token) 
9fb7 7e				ld a, (hl)	 ; char in word token 
9fb8 23				inc hl 		; move to next char 
9fb9 22 46 ea			ld (cli_token), hl ; and save it 
9fbc 47				ld b,a 
9fbd			 
9fbd 2a 40 ea			ld hl,(cli_ptr) ;	get the char from the string to parse 
9fc0 7e				ld a,(hl) 
9fc1 23				inc hl 
9fc2 22 40 ea			ld (cli_ptr), hl		; move to next char 
9fc5 cd 31 91			call toUpper 		; make sure the input string matches case 
9fc8			 
9fc8			if DEBUG_FORTH_PARSE 
9fc8			endif 
9fc8			 
9fc8				; input stream end of token is a space so get rid of it 
9fc8			 
9fc8			;	cp ' ' 
9fc8			;	jr nz, .pnskipspace 
9fc8			; 
9fc8			;	ld a, 0		; make same term as word token term 
9fc8			; 
9fc8			;.pnskipspace: 
9fc8			 
9fc8			if DEBUG_FORTH_PARSE_KEY 
9fc8						DMARK "KY7" 
9fc8			endif 
9fc8 b8				cp b 
9fc9 c2 df 9f			jp nz, .execpnskipword	 ; no match so move to next word 
9fcc				 
9fcc			;    if same 
9fcc			;       scan for string terms 0 for token and 32 for input 
9fcc			 
9fcc				 
9fcc			if DEBUG_FORTH_PARSE_KEY 
9fcc						DMARK "KY8" 
9fcc			endif 
9fcc			 
9fcc 80				add b			 
9fcd fe 00			cp 0			 ; add both chars together, if 32 then other must be 0 so at end of string we are parsing? 
9fcf							; TODO need to make sure last word in zero term string is accounted for 
9fcf 20 e3			jr nz, .execpnchar 		 ; not at end of strings yet 
9fd1			 
9fd1			 
9fd1				; at end of both strings so both are exact match 
9fd1			 
9fd1			;       skip ptr for next word 
9fd1			 
9fd1 2a 40 ea			ld hl,(cli_ptr) 	; at input string term 
9fd4 23				inc hl			 ; at next char 
9fd5 22 40 ea			ld (cli_ptr), hl     ; save for next round of the parser 
9fd8 22 3e ea			ld (cli_origptr), hl     ; save for any restart of current string ie a number or string to push to data stack 
9fdb				 
9fdb				 
9fdb			if DEBUG_FORTH_PARSE_KEY 
9fdb						DMARK "KY3" 
9fdb			endif 
9fdb			 
9fdb			 
9fdb			 
9fdb			;       exec code block 
9fdb			if DEBUG_FORTH_JP 
9fdb				call clear_display 
9fdb				call update_display 
9fdb				call delay1s 
9fdb				ld hl, (cli_execword)     ; save for next check if no match on this word 
9fdb				ld a,h 
9fdb				ld hl, os_word_scratch 
9fdb				call hexout 
9fdb				ld hl, (cli_execword)     ; save for next check if no match on this word 
9fdb				ld a,l 
9fdb				ld hl, os_word_scratch+2 
9fdb				call hexout 
9fdb				ld hl, os_word_scratch+4 
9fdb				ld a,0 
9fdb				ld (hl),a 
9fdb				ld de,os_word_scratch 
9fdb				call str_at_display 
9fdb					ld a, display_row_2 
9fdb					call str_at_display 
9fdb				ld de, (cli_origtoken) 
9fdb				ld a, display_row_1+10 
9fdb					call str_at_display 
9fdb			 
9fdb				ld a,display_row_1 
9fdb				ld de, .foundword 
9fdb				ld a, display_row_3 
9fdb				call str_at_display 
9fdb				call update_display 
9fdb				call delay1s 
9fdb				call delay1s 
9fdb				call delay1s 
9fdb			endif 
9fdb			 
9fdb			if DEBUG_FORTH_PARSE_KEY 
9fdb						DMARK "KYj" 
9fdb			endif 
9fdb				; TODO save the word pointer in this exec 
9fdb			 
9fdb 2a 44 ea			ld hl,(cli_execword) 
9fde e9				jp (hl) 
9fdf			 
9fdf			 
9fdf			;    if not same 
9fdf			;	scan for zero term 
9fdf			;	get ptr for next word 
9fdf			;	goto word comp 
9fdf			 
9fdf			.execpnskipword:	; get pointer to next word 
9fdf 2a 42 ea			ld hl,(cli_nextword) 
9fe2			 
9fe2 7e				ld a,(hl) 
9fe3 fe 00			cp WORD_SYS_END 
9fe5			;	cp 0 
9fe5 28 09			jr z, .execendofdict			 ; at end of words 
9fe7			 
9fe7			if DEBUG_FORTH_PARSE_KEY 
9fe7						DMARK "KY4" 
9fe7			endif 
9fe7			if DEBUG_FORTH_PARSE_EXEC 
9fe7			 
9fe7				; see if disabled 
9fe7			 
9fe7			;	ld a, (os_view_disable) 
9fe7			;	cp '*' 
9fe7				ld a,(debug_vector) 
9fe7				cp $c9   ; RET 
9fe7				jr z, .noskip 
9fe7			 
9fe7			 
9fe7				ld de, .nowordfound 
9fe7				ld a, display_row_3 
9fe7				call str_at_display 
9fe7				call update_display 
9fe7				ld a, 100 
9fe7				call aDelayInMS 
9fe7				 
9fe7				if DEBUG_FORTH_PARSE_EXEC_SLOW 
9fe7					call delay250ms 
9fe7				endif 
9fe7			.noskip:  
9fe7			 
9fe7			endif	 
9fe7			 
9fe7 2a 3e ea			ld hl,(cli_origptr) 
9fea 22 40 ea			ld (cli_ptr),hl 
9fed			 
9fed			if DEBUG_FORTH_PARSE_KEY 
9fed						DMARK "KY5" 
9fed			endif 
9fed c3 93 9f			jp .execpnword			; else go to next word 
9ff0			 
9ff0			.execendofdict:  
9ff0			 
9ff0			if DEBUG_FORTH_PARSE_KEY 
9ff0						DMARK "KYe" 
9ff0			endif 
9ff0			if DEBUG_FORTH_PARSE_EXEC 
9ff0				; see if disabled 
9ff0			 
9ff0			;	ld a, (os_view_disable) 
9ff0			;	cp '*' 
9ff0				ld a,(debug_vector) 
9ff0				cp $c9   ; ret 
9ff0				jr z, .ispskip 
9ff0			 
9ff0				call clear_display 
9ff0				call update_display 
9ff0				call delay1s 
9ff0				ld de, (cli_origptr) 
9ff0				ld a, display_row_1 
9ff0				call str_at_display 
9ff0				 
9ff0				ld de, .enddict 
9ff0				ld a, display_row_3 
9ff0				call str_at_display 
9ff0				call update_display 
9ff0				ld a, 100 
9ff0				call aDelayInMS 
9ff0				if DEBUG_FORTH_PARSE_EXEC_SLOW 
9ff0				call delay1s 
9ff0				call delay1s 
9ff0				call delay1s 
9ff0				endif 
9ff0			.ispskip:  
9ff0				 
9ff0			endif	 
9ff0			 
9ff0			 
9ff0			 
9ff0				; if the word is not a keyword then must be a literal so push it to stack 
9ff0			 
9ff0			; push token to stack to end of word 
9ff0			 
9ff0				STACKFRAME ON $1efe $2f9f 
9ff0				if DEBUG_STACK_IMB 
9ff0					if ON 
9ff0						exx 
9ff0						ld de, $1efe 
9ff0						ld a, d 
9ff0						ld hl, curframe 
9ff0						call hexout 
9ff0						ld a, e 
9ff0						ld hl, curframe+2 
9ff0						call hexout 
9ff0						ld hl, $1efe 
9ff0						push hl 
9ff0						ld hl, $2f9f 
9ff0						push hl 
9ff0						exx 
9ff0					endif 
9ff0				endif 
9ff0			endm 
# End of macro STACKFRAME
9ff0			 
9ff0 2a c2 e5		ld hl,(os_tok_ptr) 
9ff3 cd a4 9c		call forth_apush 
9ff6			 
9ff6				STACKFRAMECHK ON $1efe $2f9f 
9ff6				if DEBUG_STACK_IMB 
9ff6					if ON 
9ff6						exx 
9ff6						ld hl, $2f9f 
9ff6						pop de   ; $2f9f 
9ff6						call cmp16 
9ff6						jr nz, .spnosame 
9ff6						ld hl, $1efe 
9ff6						pop de   ; $1efe 
9ff6						call cmp16 
9ff6						jr z, .spfrsame 
9ff6						.spnosame: call showsperror 
9ff6						.spfrsame: nop 
9ff6						exx 
9ff6					endif 
9ff6				endif 
9ff6			endm 
# End of macro STACKFRAMECHK
9ff6			 
9ff6			execnext: 
9ff6			 
9ff6			if DEBUG_FORTH_PARSE_KEY 
9ff6						DMARK "KY>" 
9ff6			endif 
9ff6			; move past token to next word 
9ff6			 
9ff6 2a c2 e5		ld hl, (os_tok_ptr) 
9ff9 3e 00		ld a, 0 
9ffb 01 ff 00		ld bc, 255     ; input buffer size 
9ffe ed b1		cpir 
a000			 
a000			if DEBUG_FORTH_PARSE_KEY 
a000						DMARK "KY!" 
a000				CALLMONITOR 
a000			endif	 
a000			; TODO this might place hl on the null, so will need to forward on??? 
a000			;inc hl   ; see if this gets onto the next item 
a000			 
a000			 
a000			; TODO pass a pointer to the buffer to push 
a000			; TODO call function to push 
a000			 
a000			; look for end of input 
a000			 
a000			;inc hl 
a000			;ld a,(hl) 
a000			;cp FORTH_END_BUFFER 
a000			;ret z 
a000			 
a000			 
a000 c3 79 9f		jp exec1 
a003			 
a003			 
a003			 
a003			 
a003			 
a003			 
a003			 
a003			 
a003			 
a003			findnexttok: 
a003			 
a003				; hl is pointer to move 
a003				; de is the token to locate 
a003			 
a003					if DEBUG_FORTH 
a003						DMARK "NTK" 
a003						CALLMONITOR 
a003					endif 
a003 d5				push de 
a004			 
a004			.fnt1:	 
a004				; find first char of token to locate 
a004			 
a004 1a				ld a, (de) 
a005 4f				ld c,a 
a006 7e				ld a,(hl) 
a007 cd 31 91			call toUpper 
a00a					if DEBUG_FORTH 
a00a						DMARK "NT1" 
a00a						CALLMONITOR 
a00a					endif 
a00a b9				cp c 
a00b			 
a00b 28 03			jr z, .fnt2cmpmorefirst	 
a00d			 
a00d				; first char not found move to next char 
a00d			 
a00d 23				inc hl 
a00e 18 f4			jr .fnt1 
a010			 
a010			.fnt2cmpmorefirst:	 
a010				; first char of token found.  
a010			 
a010 e5				push hl     ; save start of token just in case it is the right one 
a011 d9				exx 
a012 e1				pop hl        ; save it to hl' 
a013 d9				exx 
a014			 
a014			 
a014			.fnt2cmpmore:	 
a014				; compare the rest 
a014				 
a014 23				inc hl 
a015 13				inc de 
a016				 
a016 1a				ld a, (de) 
a017 4f				ld c,a 
a018 7e				ld a,(hl) 
a019 cd 31 91			call toUpper 
a01c			 
a01c					if DEBUG_FORTH 
a01c						DMARK "NT2" 
a01c						CALLMONITOR 
a01c					endif 
a01c				; c has the token to find char 
a01c				; a has the mem to scan char 
a01c			 
a01c b9				cp c 
a01d 28 04			jr z,.fntmatch1 
a01f			 
a01f				; they are not the same 
a01f			 
a01f					if DEBUG_FORTH 
a01f						DMARK "NT3" 
a01f						CALLMONITOR 
a01f					endif 
a01f d1				pop de	; reset de token to look for 
a020 d5				push de 
a021 18 e1			jr .fnt1 
a023				 
a023			.fntmatch1: 
a023			 
a023				; is the same char a null which means we might have a full hit? 
a023					if DEBUG_FORTH 
a023						DMARK "NT4" 
a023						CALLMONITOR 
a023					endif 
a023			 
a023 fe 00			cp 0 
a025 28 0b			jr z, .fntmatchyes 
a027			 
a027				; are we at the end of the token to find? 
a027			 
a027					if DEBUG_FORTH 
a027						DMARK "NT5" 
a027						CALLMONITOR 
a027					endif 
a027 3e 00			ld a, 0 
a029 b9				cp c 
a02a			 
a02a c2 14 a0			jp nz, .fnt2cmpmore    ; no, so keep going to a direct hit 
a02d			 
a02d					if DEBUG_FORTH 
a02d						DMARK "NT6" 
a02d						CALLMONITOR 
a02d					endif 
a02d				; token to find is exhusted but no match to stream 
a02d			 
a02d				; restore tok pointer and continue on 
a02d d1				pop de 
a02e d5				push de 
a02f c3 04 a0			jp .fnt1 
a032			 
a032			 
a032			.fntmatchyes: 
a032			 
a032				; hl now contains the end of the found token 
a032			 
a032				; get rid of saved token pointer to find 
a032			 
a032 d1				pop de 
a033			 
a033					if DEBUG_FORTH 
a033						DMARK "NT9" 
a033						CALLMONITOR 
a033					endif 
a033			 
a033				; hl will be on the null term so forward on 
a033			 
a033				; get back the saved start of the token 
a033			 
a033 d9				exx 
a034 e5				push hl     ; save start of token just in case it is the right one 
a035 d9				exx 
a036 e1				pop hl        ; save it to hl 
a037			 
a037 c9				ret 
a038			 
a038			 
a038			; LIST needs to find a specific token   
a038			; FORGET needs to find a spefici token 
a038			 
a038			; SAVE needs to find all tokens by flag 
a038			; WORDS just needs to scan through all  by flag 
a038			; UWORDS needs to scan through all by flag 
a038			 
a038			 
a038			; given hl as pointer to start of dict look up string 
a038			; return hl as pointer to start of word block 
a038			; or 0 if not found 
a038			 
a038			forth_find_tok: 
a038 c9				ret 
a039			 
a039			; given hl as pointer to dict structure 
a039			; move to the next dict block structure 
a039			 
a039			forth_tok_next: 
a039				; hl now points to the address of the next word pointer  
a039				; TODO skip compiled symbol for now 
a039			;	push de 
a039 23				inc hl 
a03a 5e				ld e, (hl) 
a03b 23				inc hl 
a03c 56				ld d, (hl) 
a03d 23				inc hl 
a03e			 
a03e eb				ex de,hl 
a03f			if DEBUG_FORTH_PARSE_NEXTWORD 
a03f				push bc 
a03f				ld bc, (cli_nextword) 
a03f						DMARK "NXW" 
a03f				CALLMONITOR 
a03f				pop bc 
a03f			endif 
a03f			;	pop de	 
a03f c9				ret 
a040			 
a040			 
a040			 
a040			; eof 
# End of file forth_parserv5.asm
a040				include "forth_wordsv4.asm" 
a040			 
a040			; the core word dictionary v4 
a040			; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Notation.html#Notation 
a040			 
a040			; this is a linked list for each of the system words used 
a040			; user defined words will follow the same format but will be in ram 
a040			 
a040			 
a040			; 
a040			; 
a040			; define linked list: 
a040			; 
a040			; 1. compiled byte op code 
a040			; 2. len of text word 
a040			; 3. text word 
a040			; 4. ptr to next dictionary word 
a040			; 5. asm, calls etc for the word 
a040			; 
a040			;  if 1 == 0 then last word in dict  
a040			;   
a040			; set the start of dictionary scanning to be in ram and the last word point to the system dict 
a040			;  
a040			;  
a040			; create basic standard set of words 
a040			; 
a040			;  
a040			; + - / * DUP EMIT . SWAP IF..THEN..ELSE DO..LOOP  : ; DROP  
a040			; 2DUP 2DROP 2SWAP  
a040			; @ C@ - get byte  
a040			; ! C! - store byte 
a040			; 0< true if less than zero 
a040			; 0= true if zero 
a040			; < >  
a040			; = true if same 
a040			; variables 
a040			 
a040			 
a040			; Hardware specific words I may need 
a040			; 
a040			; IN OUT  
a040			; calls to key util functions 
a040			; calls to hardward abstraction stuff 
a040			; easy control of frame buffers and lcd i/o 
a040			; keyboard  
a040			 
a040			 
a040			;DICT: macro 
a040			; op_code, len, word, next 
a040			;    word: 
a040			;    db op_code 
a040			;    ds word zero term 
a040			;    dw next 
a040			;    endm 
a040			 
a040			 
a040			 
a040			 
a040			; op code 1 is a flag for user define words which are to be handled differently 
a040			 
a040			 
a040			; 
a040			; 
a040			;    TODO on entry to a word this should be the expected environment 
a040			;    hl - tos value if number then held, if string this is the ptr 
a040			;    de -  
a040			 
a040			 
a040			; opcode ranges 
a040			; 0 - end of word dict 
a040			; 255 - user define words 
a040			 
a040			sysdict: 
a040			include "forth_opcodes.asm" 
a040			; op codes for forth keywords 
a040			; free to use code 0  
a040				OPCODE_HEAP: equ  1 
a040				OPCODE_EXEC: equ 2 
a040				OPCODE_DUP: equ 3 
a040				OPCODE_SWAP: equ 4 
a040				OPCODE_COLN: equ 5 
a040				OPCODE_SCOLN: equ 6 
a040				OPCODE_DROP: equ 7 
a040				OPCODE_DUP2: equ 8 
a040				OPCODE_DROP2: equ 9 
a040				OPCODE_SWAP2: equ 10 
a040				OPCODE_AT: equ 11 
a040				OPCODE_CAT: equ 12 
a040				OPCODE_BANG: equ 13 
a040				OPCODE_CBANG: equ 14 
a040				OPCODE_SCALL: equ 15 
a040				OPCODE_DEPTH: equ 16 
a040				OPCODE_OVER: equ 17 
a040				OPCODE_PAUSE: equ 18 
a040				OPCODE_PAUSES: equ 19 
a040				OPCODE_ROT: equ 20 
a040			;free to reuse	OPCODE_WORDS: equ 21 
a040			        OPCODE_NOT: equ 21 
a040				OPCODE_UWORDS: equ 22 
a040				OPCODE_BP: equ 23 
a040				OPCODE_MONITOR: equ 24  
a040				OPCODE_MALLOC: equ 25 
a040				OPCODE_FREE: equ 26 
a040				OPCODE_LIST: equ 27 
a040				OPCODE_FORGET: equ 28 
a040				OPCODE_NOP: equ 29 
a040				OPCODE_COMO: equ 30 
a040				OPCODE_COMC: equ 31 
a040			;free to reuse	OPCODE_ENDCORE: equ 32 
a040				OPCODE_AFTERSOUND: equ 33 
a040				OPCODE_GP2: equ 34 
a040				OPCODE_GP3: equ 35 
a040				OPCODE_GP4: equ 36 
a040				OPCODE_SIN: equ 37 
a040				OPCODE_SOUT: equ 38 
a040				OPCODE_SPIO: equ 39 
a040				OPCODE_SPICEH: equ 40 
a040				OPCODE_SPIOb: equ 41 
a040				OPCODE_SPII: equ 42 
a040				OPCODE_SESEL: equ 43 
a040				OPCODE_CARTDEV: equ 44 
a040			; free to reuse	OPCODE_ENDDEVICE: equ 45 
a040				OPCODE_FB: equ 46 
a040				OPCODE_EMIT: equ 47 
a040				OPCODE_DOTH: equ 48 
a040				OPCODE_DOTF: equ 49 
a040				OPCODE_DOT: equ 50 
a040				OPCODE_CLS: equ 51 
a040				OPCODE_DRAW: equ 52 
a040				OPCODE_DUMP: equ 53 
a040				OPCODE_CDUMP: equ 54 
a040				OPCODE_DAT: equ 55 
a040				OPCODE_HOME: equ 56 
a040				OPCODE_SPACE: equ 57 
a040				OPCODE_SPACES: equ 58 
a040				OPCODE_SCROLL: equ 59 
a040				OPCODE_ATQ: equ 60 
a040				OPCODE_AUTODSP: equ 61 
a040				OPCODE_MENU: equ 62 
a040			; free to reuse	OPCODE_ENDDISPLAY: equ 63  
a040				OPCODE_THEN: equ 64 
a040				OPCODE_ELSE: equ 65 
a040				OPCODE_DO: equ 66 
a040				OPCODE_LOOP: equ 67 
a040				OPCODE_I: equ 68 
a040				OPCODE_DLOOP: equ 69  
a040				OPCODE_REPEAT: equ 70  
a040				OPCODE_UNTIL: equ 71 
a040				OPCODE_ENDFLOW: equ 72 
a040				OPCODE_WAITK: equ 73 
a040				OPCODE_ACCEPT: equ 74 
a040				OPCODE_EDIT: equ 75 
a040			;free to reuse	OPCODE_ENDKEY: equ 76 
a040				OPCODE_LZERO: equ 77 
a040				OPCODE_TZERO: equ 78 
a040				OPCODE_LESS: equ 79 
a040				OPCODE_GT: equ 80 
a040				OPCODE_EQUAL: equ 81  
a040			;free to reuse	OPCODE_ENDLOGIC: equ 82 
a040				OPCODE_NEG: equ 83 
a040				OPCODE_DIV: equ 84 
a040				OPCODE_MUL: equ 85 
a040				OPCODE_MIN: equ 86 
a040				OPCODE_MAX: equ 87 
a040				OPCODE_RND16: equ 88 
a040				OPCODE_RND8: equ 89 
a040				OPCODE_RND: equ 90 
a040			;free to reuse	OPCODE_ENDMATHS: equ 91  
a040				OPCODE_BYNAME: equ 92 
a040				OPCODE_DIR: equ 93 
a040				OPCODE_SAVE: equ 94 
a040				OPCODE_LOAD: equ 95 
a040				OPCODE_BSAVE: equ 96 
a040				OPCODE_BLOAD: equ 97 
a040				OPCODE_SEO: equ 98  
a040				OPCODE_SEI: equ 99 
a040				OPCODE_SFREE: equ 100 
a040				OPCODE_SIZE: equ 101 
a040				OPCODE_CREATE: equ 102 
a040				OPCODE_APPEND: equ 103 
a040				OPCODE_SDEL: equ 104 
a040				OPCODE_OPEN: equ 105 
a040				OPCODE_READ: equ 106 
a040				OPCODE_EOF: equ 106 
a040				OPCODE_FORMAT: equ 107 
a040				OPCODE_LABEL: equ 108 
a040				OPCODE_LABELS: equ 109 
a040			;free to reuse	OPCODE_ENDSTORAGE: equ 110  
a040				OPCODE_UPPER: equ 111 
a040				OPCODE_LOWER: equ 112 
a040				OPCODE_SUBSTR: equ 113 
a040				OPCODE_LEFT: equ 114 
a040				OPCODE_RIGHT: equ 115 
a040				OPCODE_STR2NUM: equ 116 
a040				OPCODE_NUM2STR: equ 117 
a040				OPCODE_CONCAT: equ 118 
a040				OPCODE_FIND: equ 119 
a040				OPCODE_LEN: equ 120 
a040				OPCODE_CHAR: equ 121 
a040			; free to reuse	OPCODE_STRLEN: equ 122 
a040			; free to reuse	OPCODE_ENDSTR: equ 123 
a040				OPCODE_V0S: equ 124 
a040				OPCODE_V0Q: equ 125 
a040				OPCODE_V1S: equ 126 
a040				OPCODE_V1Q: equ 127 
a040				OPCODE_V2S: equ 128 
a040				OPCODE_V2Q: equ 129 
a040				OPCODE_V3S: equ 130 
a040				OPCODE_V3Q: equ 131 
a040			;free to reuse	OPCODE_END: equ 132 
a040				OPCODE_ZDUP: equ 133 
a040			 
a040			; eof 
# End of file forth_opcodes.asm
a040			 
a040			include "forth_words_core.asm" 
a040			 
a040			; | ## Core Words 
a040			 
a040			;if MALLOC_4 
a040			 
a040			.HEAP: 
a040				CWHEAD .EXEC OPCODE_HEAP "HEAP" 4 WORD_FLAG_CODE 
a040 15				db WORD_SYS_CORE+OPCODE_HEAP             
a041 7f a0			dw .EXEC            
a043 05				db 4 + 1 
a044 .. 00			db "HEAP",0              
a049				endm 
# End of macro CWHEAD
a049			; | HEAP ( -- u1 u2 )   Pushes u1 the current number of bytes in the heap and u2 the remaining bytes - Only present if using my MALLOC | DONE 
a049			; | | u1 - Current number of bytes in the heap 
a049			; | | u2 - Remaining bytes left on the heap 
a049			; | |  
a049			; | | The heap is used for storing user defined words as well as any values pushed to stack. 
a049			 
a049			 
a049					if DEBUG_FORTH_WORDS_KEY 
a049						DMARK "HEP" 
a049 f5				push af  
a04a 3a 5e a0			ld a, (.dmark)  
a04d 32 6b ee			ld (debug_mark),a  
a050 3a 5f a0			ld a, (.dmark+1)  
a053 32 6c ee			ld (debug_mark+1),a  
a056 3a 60 a0			ld a, (.dmark+2)  
a059 32 6d ee			ld (debug_mark+2),a  
a05c 18 03			jr .pastdmark  
a05e ..			.dmark: db "HEP"  
a061 f1			.pastdmark: pop af  
a062			endm  
# End of macro DMARK
a062						CALLMONITOR 
a062 cd 6f ee			call debug_vector  
a065				endm  
# End of macro CALLMONITOR
a065					endif 
a065 2a 37 e4				ld hl, (free_list )      
a068 11 3c e4				ld de, heap_start 
a06b			 
a06b ed 52				sbc hl, de  
a06d			 
a06d cd 3b 9b				call forth_push_numhl 
a070			 
a070			 
a070 ed 5b 37 e4			ld de, (free_list )      
a074 21 a8 e2				ld hl, heap_end 
a077			 
a077 ed 52				sbc hl, de 
a079			 
a079 cd 3b 9b				call forth_push_numhl 
a07c					 
a07c			 
a07c					 
a07c			 
a07c			 
a07c			 
a07c					NEXTW 
a07c c3 e8 9e			jp macro_next 
a07f				endm 
# End of macro NEXTW
a07f			;endif 
a07f			 
a07f			.EXEC: 
a07f			;	CWHEAD .STKEXEC OPCODE_EXEC "EXEC" 4 WORD_FLAG_CODE 
a07f			;; > EXEC ( u -- )    Execs the string on TOS as a FORTH expression > CRASHES ON NEXTW 
a07f			;; > > u - A qutoed string which can consist of any valid Forth expression excluding : defintions (use LOAD instead) 
a07f			;; > > 
a07f			;; > >   
a07f			;	STACKFRAME OFF $5efe $5f9f 
a07f			; 
a07f			;		if DEBUG_FORTH_WORDS_KEY 
a07f			;			DMARK "EXE" 
a07f			;			CALLMONITOR 
a07f			;		endif 
a07f			; 
a07f			;	FORTH_DSP_VALUEHL 
a07f			; 
a07f			;	FORTH_DSP_POP 
a07f			; 
a07f			;		if DEBUG_FORTH_WORDS 
a07f			;			DMARK "EX1" 
a07f			;			CALLMONITOR 
a07f			;		endif 
a07f			;;	ld e,(hl) 
a07f			;;	inc hl 
a07f			;;	ld d,(hl) 
a07f			;;	ex de,hl 
a07f			; 
a07f			;;		if DEBUG_FORTH_WORDS 
a07f			;;			DMARK "EX2" 
a07f			;;			CALLMONITOR 
a07f			;;		endif 
a07f			;	push hl 
a07f			; 
a07f			;	;ld a, 0 
a07f			;	;ld a, FORTH_END_BUFFER 
a07f			;	call strlenz 
a07f			;	inc hl   ; include zero term to copy 
a07f			;	inc hl   ; include term 
a07f			;	inc hl   ; include term 
a07f			;	ld b,0 
a07f			;	ld c,l 
a07f			;	pop hl 
a07f			;	ld de, execscratch 
a07f			;		if DEBUG_FORTH_WORDS 
a07f			;			DMARK "EX3" 
a07f			;			CALLMONITOR 
a07f			;		endif 
a07f			;	ldir 
a07f			; 
a07f			; 
a07f			;	ld hl, execscratch 
a07f			; 
a07f			;		if DEBUG_FORTH_WORDS 
a07f			;			DMARK "EXe" 
a07f			;			CALLMONITOR 
a07f			;		endif 
a07f			; 
a07f			;	call forthparse 
a07f			;	call forthexec 
a07f			;;	call forthexec_cleanup 
a07f			;;	call forthparse 
a07f			;;	call forthexec 
a07f			; 
a07f			;	STACKFRAMECHK OFF $5efe $5f9f 
a07f			; 
a07f			;	; an immediate word so no need to process any more words 
a07f			;	ret 
a07f			;	NEXTW 
a07f			 
a07f			; dead code - old version  
a07f			;	FORTH_RSP_NEXT 
a07f			 
a07f			;  
a07f			;	ld bc,(cli_ptr)   ; move to next token to parse in the input stream 
a07f			;	ld de,(cli_origptr)   ; move to next token to parse in the input stream 
a07f			;	ld hl,(os_tok_ptr)   ; move to next token to parse in the input stream 
a07f			;	push hl 
a07f			;	push de 
a07f			;	push bc 
a07f			; 
a07f			; 
a07f			;		if DEBUG_FORTH_WORDS_KEY 
a07f			;			DMARK "EXR" 
a07f			;			CALLMONITOR 
a07f			;		endif 
a07f			; 
a07f			; 
a07f			; 
a07f			;	;v5 FORTH_DSP_VALUE 
a07f			;	FORTH_DSP_VALUEHL 
a07f			; 
a07f			;	; TODO do string type checks 
a07f			; 
a07f			;;v5	inc hl   ; skip type 
a07f			; 
a07f			;	push hl  ; source code  
a07f			;		if DEBUG_FORTH_WORDS 
a07f			;			DMARK "EX1" 
a07f			;			CALLMONITOR 
a07f			;		endif 
a07f			;	ld a, 0 
a07f			;	call strlent 
a07f			; 
a07f			;	inc hl 
a07f			;	inc hl 
a07f			;	inc hl 
a07f			;	inc hl 
a07f			; 
a07f			;	push hl    ; size 
a07f			; 
a07f			;		if DEBUG_FORTH_WORDS 
a07f			;			DMARK "EX2" 
a07f			;			CALLMONITOR 
a07f			;		endif 
a07f			;	call malloc 
a07f			; 
a07f			;	ex de, hl    ; de now contains malloc area 
a07f			;	pop bc   	; get byte count 
a07f			;	pop hl      ; get string to copy 
a07f			; 
a07f			;	push de     ; save malloc for free later 
a07f			; 
a07f			;		if DEBUG_FORTH_WORDS 
a07f			;			DMARK "EX3" 
a07f			;			CALLMONITOR 
a07f			;		endif 
a07f			;	ldir       ; duplicate string 
a07f			; 
a07f			;	; at the end of the string so go back the three extra spaces and fill in with extra terms 
a07f			;	 
a07f			;	; TODO fix the parse would be better than this...  
a07f			;	ex de, hl 
a07f			;	dec hl 
a07f			;	ld a, 0 
a07f			;	ld (hl), a 
a07f			;	dec hl 
a07f			;	ld a, ' ' 
a07f			;	ld (hl), a 
a07f			;	dec hl 
a07f			;	ld (hl), a 
a07f			; 
a07f			;	dec hl 
a07f			;	ld (hl), a 
a07f			; 
a07f			; 
a07f			;	FORTH_DSP_POP  
a07f			; 
a07f			;	pop hl     
a07f			;	push hl    ; save malloc area 
a07f			; 
a07f			;		if DEBUG_FORTH_WORDS 
a07f			;			DMARK "EX4" 
a07f			;			CALLMONITOR 
a07f			;		endif 
a07f			; 
a07f			;	call forthparse 
a07f			;	call forthexec 
a07f			;	 
a07f			;	pop hl 
a07f			;	if DEBUG_FORTH_WORDS 
a07f			;		DMARK "EX5" 
a07f			;		CALLMONITOR 
a07f			;	endif 
a07f			; 
a07f			;	if FORTH_ENABLE_FREE 
a07f			;	call free 
a07f			;	endif 
a07f			; 
a07f			;	if DEBUG_FORTH_WORDS 
a07f			;		DMARK "EX6" 
a07f			;		CALLMONITOR 
a07f			;	endif 
a07f			; 
a07f			;	pop bc 
a07f			;	pop de 
a07f			;	pop hl 
a07f			;;	FORTH_RSP_POP	  
a07f			;	ld (cli_ptr),bc   ; move to next token to parse in the input stream 
a07f			;	ld (cli_origptr),de   ; move to next token to parse in the input stream 
a07f			;	ld (os_tok_ptr),hl   ; move to next token to parse in the input stream 
a07f			; 
a07f			;	if DEBUG_FORTH_WORDS 
a07f			;		DMARK "EX7" 
a07f			;		CALLMONITOR 
a07f			;	endif 
a07f			;	NEXTW 
a07f			 
a07f			;.STKEXEC: 
a07f			;	CWHEAD .ZDUP 43 "STKEXEC" 7 WORD_FLAG_CODE 
a07f			;; > STKEXEC ( u .. u c -- ) Taking c count of strings off of the stack the strings are evaluated as code > TO TEST 
a07f			; 
a07f			; 
a07f			;		if DEBUG_FORTH_WORDS_KEY 
a07f			;			DMARK "STX" 
a07f			;			CALLMONITOR 
a07f			;		endif 
a07f			; 
a07f			;	FORTH_DSP_VALUEHL 
a07f			; 
a07f			;	ld (store_tmp1), hl    ; count 
a07f			; 
a07f			;	FORTH_DSP_POP 
a07f			;.stkexec1: 
a07f			;	ld hl, (store_tmp1)   ; count 
a07f			;	ld a, 0 
a07f			;	cp l 
a07f			;	ret z 
a07f			; 
a07f			;	dec hl 
a07f			;	ld (store_tmp1), hl    ; count 
a07f			;	 
a07f			;	FORTH_DSP_VALUEHL 
a07f			;	push hl 
a07f			;	 
a07f			;		if DEBUG_FORTH_WORDS 
a07f			;			DMARK "EXp" 
a07f			;			CALLMONITOR 
a07f			;		endif 
a07f			;	FORTH_DSP_POP 
a07f			; 
a07f			;	call strlenz 
a07f			;	inc hl   ; include zero term to copy 
a07f			;	inc hl   ; include zero term to copy 
a07f			;	inc hl   ; include zero term to copy 
a07f			;	ld b,0 
a07f			;	ld c,l 
a07f			;	pop hl 
a07f			;	ld de, execscratch 
a07f			;		if DEBUG_FORTH_WORDS 
a07f			;			DMARK "EX3" 
a07f			;			CALLMONITOR 
a07f			;		endif 
a07f			;	ldir 
a07f			; 
a07f			; 
a07f			;	ld hl, execscratch 
a07f			; 
a07f			;		if DEBUG_FORTH_WORDS 
a07f			;			DMARK "EXP" 
a07f			;			CALLMONITOR 
a07f			;		endif 
a07f			; 
a07f			;	call forthparse 
a07f			;	ld hl, execscratch 
a07f			;		if DEBUG_FORTH_WORDS 
a07f			;			DMARK "EXx" 
a07f			;			CALLMONITOR 
a07f			;		endif 
a07f			;	call forthexec 
a07f			; 
a07f			;	jp .stkexec1 
a07f			; 
a07f			;	ret 
a07f			 
a07f			 
a07f			.DUP: 
a07f				CWHEAD .ZDUP OPCODE_DUP "DUP" 3 WORD_FLAG_CODE 
a07f 17				db WORD_SYS_CORE+OPCODE_DUP             
a080 f5 a0			dw .ZDUP            
a082 04				db 3 + 1 
a083 .. 00			db "DUP",0              
a087				endm 
# End of macro CWHEAD
a087			; | DUP ( u -- u u )     Duplicate whatever item is on TOS | DONE 
a087			 
a087					if DEBUG_FORTH_WORDS_KEY 
a087						DMARK "DUP" 
a087 f5				push af  
a088 3a 9c a0			ld a, (.dmark)  
a08b 32 6b ee			ld (debug_mark),a  
a08e 3a 9d a0			ld a, (.dmark+1)  
a091 32 6c ee			ld (debug_mark+1),a  
a094 3a 9e a0			ld a, (.dmark+2)  
a097 32 6d ee			ld (debug_mark+2),a  
a09a 18 03			jr .pastdmark  
a09c ..			.dmark: db "DUP"  
a09f f1			.pastdmark: pop af  
a0a0			endm  
# End of macro DMARK
a0a0						CALLMONITOR 
a0a0 cd 6f ee			call debug_vector  
a0a3				endm  
# End of macro CALLMONITOR
a0a3					endif 
a0a3			 
a0a3					FORTH_DSP 
a0a3 cd f8 9c			call macro_forth_dsp 
a0a6				endm 
# End of macro FORTH_DSP
a0a6			 
a0a6 7e					ld a, (HL) 
a0a7 fe 01				cp DS_TYPE_STR 
a0a9 20 25				jr nz, .dupinum 
a0ab			 
a0ab					; push another string 
a0ab			 
a0ab					FORTH_DSP_VALUEHL     		 
a0ab cd 32 9d			call macro_dsp_valuehl 
a0ae				endm 
# End of macro FORTH_DSP_VALUEHL
a0ae			 
a0ae				if DEBUG_FORTH_WORDS 
a0ae					DMARK "DUs" 
a0ae f5				push af  
a0af 3a c3 a0			ld a, (.dmark)  
a0b2 32 6b ee			ld (debug_mark),a  
a0b5 3a c4 a0			ld a, (.dmark+1)  
a0b8 32 6c ee			ld (debug_mark+1),a  
a0bb 3a c5 a0			ld a, (.dmark+2)  
a0be 32 6d ee			ld (debug_mark+2),a  
a0c1 18 03			jr .pastdmark  
a0c3 ..			.dmark: db "DUs"  
a0c6 f1			.pastdmark: pop af  
a0c7			endm  
# End of macro DMARK
a0c7					CALLMONITOR 
a0c7 cd 6f ee			call debug_vector  
a0ca				endm  
# End of macro CALLMONITOR
a0ca				endif 
a0ca cd a9 9b				call forth_push_str 
a0cd			 
a0cd					NEXTW 
a0cd c3 e8 9e			jp macro_next 
a0d0				endm 
# End of macro NEXTW
a0d0			 
a0d0			 
a0d0			.dupinum: 
a0d0					 
a0d0			 
a0d0			 
a0d0					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a0d0 cd 32 9d			call macro_dsp_valuehl 
a0d3				endm 
# End of macro FORTH_DSP_VALUEHL
a0d3			 
a0d3				; TODO add floating point number detection 
a0d3			 
a0d3				if DEBUG_FORTH_WORDS 
a0d3					DMARK "DUi" 
a0d3 f5				push af  
a0d4 3a e8 a0			ld a, (.dmark)  
a0d7 32 6b ee			ld (debug_mark),a  
a0da 3a e9 a0			ld a, (.dmark+1)  
a0dd 32 6c ee			ld (debug_mark+1),a  
a0e0 3a ea a0			ld a, (.dmark+2)  
a0e3 32 6d ee			ld (debug_mark+2),a  
a0e6 18 03			jr .pastdmark  
a0e8 ..			.dmark: db "DUi"  
a0eb f1			.pastdmark: pop af  
a0ec			endm  
# End of macro DMARK
a0ec					CALLMONITOR 
a0ec cd 6f ee			call debug_vector  
a0ef				endm  
# End of macro CALLMONITOR
a0ef				endif 
a0ef			 
a0ef cd 3b 9b				call forth_push_numhl 
a0f2					NEXTW 
a0f2 c3 e8 9e			jp macro_next 
a0f5				endm 
# End of macro NEXTW
a0f5			.ZDUP: 
a0f5				CWHEAD .SWAP OPCODE_ZDUP "?DUP" 4 WORD_FLAG_CODE 
a0f5 99				db WORD_SYS_CORE+OPCODE_ZDUP             
a0f6 2d a1			dw .SWAP            
a0f8 05				db 4 + 1 
a0f9 .. 00			db "?DUP",0              
a0fe				endm 
# End of macro CWHEAD
a0fe			; | ?DUP ( u -- u u )     Duplicate item on TOS if the item is non-zero | DONE 
a0fe			 
a0fe					if DEBUG_FORTH_WORDS_KEY 
a0fe						DMARK "qDU" 
a0fe f5				push af  
a0ff 3a 13 a1			ld a, (.dmark)  
a102 32 6b ee			ld (debug_mark),a  
a105 3a 14 a1			ld a, (.dmark+1)  
a108 32 6c ee			ld (debug_mark+1),a  
a10b 3a 15 a1			ld a, (.dmark+2)  
a10e 32 6d ee			ld (debug_mark+2),a  
a111 18 03			jr .pastdmark  
a113 ..			.dmark: db "qDU"  
a116 f1			.pastdmark: pop af  
a117			endm  
# End of macro DMARK
a117						CALLMONITOR 
a117 cd 6f ee			call debug_vector  
a11a				endm  
# End of macro CALLMONITOR
a11a					endif 
a11a					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a11a cd 32 9d			call macro_dsp_valuehl 
a11d				endm 
# End of macro FORTH_DSP_VALUEHL
a11d			 
a11d e5					push hl 
a11e			 
a11e					; is it a zero? 
a11e			 
a11e 3e 00				ld a, 0 
a120 84					add h 
a121 85					add l 
a122			 
a122 e1					pop hl 
a123			 
a123 fe 00				cp 0 
a125 28 03				jr z, .dup2orig 
a127			 
a127			 
a127 cd 3b 9b				call forth_push_numhl 
a12a			 
a12a			 
a12a				; TODO add floating point number detection 
a12a			 
a12a			.dup2orig: 
a12a			 
a12a					NEXTW 
a12a c3 e8 9e			jp macro_next 
a12d				endm 
# End of macro NEXTW
a12d			.SWAP: 
a12d				CWHEAD .COLN OPCODE_SWAP "SWAP" 4 WORD_FLAG_CODE 
a12d 18				db WORD_SYS_CORE+OPCODE_SWAP             
a12e 6c a1			dw .COLN            
a130 05				db 4 + 1 
a131 .. 00			db "SWAP",0              
a136				endm 
# End of macro CWHEAD
a136			; | SWAP ( w1 w2 -- w2 w1 )    Swap top two items on TOS | DONE 
a136					if DEBUG_FORTH_WORDS_KEY 
a136						DMARK "SWP" 
a136 f5				push af  
a137 3a 4b a1			ld a, (.dmark)  
a13a 32 6b ee			ld (debug_mark),a  
a13d 3a 4c a1			ld a, (.dmark+1)  
a140 32 6c ee			ld (debug_mark+1),a  
a143 3a 4d a1			ld a, (.dmark+2)  
a146 32 6d ee			ld (debug_mark+2),a  
a149 18 03			jr .pastdmark  
a14b ..			.dmark: db "SWP"  
a14e f1			.pastdmark: pop af  
a14f			endm  
# End of macro DMARK
a14f						CALLMONITOR 
a14f cd 6f ee			call debug_vector  
a152				endm  
# End of macro CALLMONITOR
a152					endif 
a152			 
a152					FORTH_DSP_VALUEHL 
a152 cd 32 9d			call macro_dsp_valuehl 
a155				endm 
# End of macro FORTH_DSP_VALUEHL
a155 e5					push hl     ; w2 
a156			 
a156					FORTH_DSP_POP 
a156 cd ea 9d			call macro_forth_dsp_pop 
a159				endm 
# End of macro FORTH_DSP_POP
a159			 
a159					FORTH_DSP_VALUEHL 
a159 cd 32 9d			call macro_dsp_valuehl 
a15c				endm 
# End of macro FORTH_DSP_VALUEHL
a15c			 
a15c					FORTH_DSP_POP 
a15c cd ea 9d			call macro_forth_dsp_pop 
a15f				endm 
# End of macro FORTH_DSP_POP
a15f			 
a15f d1					pop de     ; w2	, hl = w1 
a160			 
a160 eb					ex de, hl 
a161 d5					push de 
a162			 
a162 cd 3b 9b				call forth_push_numhl 
a165			 
a165 e1					pop hl 
a166			 
a166 cd 3b 9b				call forth_push_numhl 
a169					 
a169			 
a169					NEXTW 
a169 c3 e8 9e			jp macro_next 
a16c				endm 
# End of macro NEXTW
a16c			.COLN: 
a16c				CWHEAD .SCOLN OPCODE_COLN ":" 1 WORD_FLAG_CODE 
a16c 19				db WORD_SYS_CORE+OPCODE_COLN             
a16d f8 a2			dw .SCOLN            
a16f 02				db 1 + 1 
a170 .. 00			db ":",0              
a172				endm 
# End of macro CWHEAD
a172			; | : ( -- )         Create new word | DONE 
a172			 
a172					if DEBUG_FORTH_WORDS_KEY 
a172						DMARK "CLN" 
a172 f5				push af  
a173 3a 87 a1			ld a, (.dmark)  
a176 32 6b ee			ld (debug_mark),a  
a179 3a 88 a1			ld a, (.dmark+1)  
a17c 32 6c ee			ld (debug_mark+1),a  
a17f 3a 89 a1			ld a, (.dmark+2)  
a182 32 6d ee			ld (debug_mark+2),a  
a185 18 03			jr .pastdmark  
a187 ..			.dmark: db "CLN"  
a18a f1			.pastdmark: pop af  
a18b			endm  
# End of macro DMARK
a18b						CALLMONITOR 
a18b cd 6f ee			call debug_vector  
a18e				endm  
# End of macro CALLMONITOR
a18e					endif 
a18e				STACKFRAME OFF $8efe $989f 
a18e				if DEBUG_STACK_IMB 
a18e					if OFF 
a18e						exx 
a18e						ld de, $8efe 
a18e						ld a, d 
a18e						ld hl, curframe 
a18e						call hexout 
a18e						ld a, e 
a18e						ld hl, curframe+2 
a18e						call hexout 
a18e						ld hl, $8efe 
a18e						push hl 
a18e						ld hl, $989f 
a18e						push hl 
a18e						exx 
a18e					endif 
a18e				endif 
a18e			endm 
# End of macro STACKFRAME
a18e				; get parser buffer length  of new word 
a18e			 
a18e				 
a18e			 
a18e					; move tok past this to start of name defintition 
a18e					; TODO get word to define 
a18e					; TODO Move past word token 
a18e					; TODO get length of string up to the ';' 
a18e			 
a18e 2a c2 e5			ld hl, (os_tok_ptr) 
a191 23				inc hl 
a192 23				inc hl 
a193			 
a193 3e 3b			ld a, ';' 
a195 cd 45 91			call strlent 
a198			 
a198 7d				ld a,l 
a199 32 bd e2			ld (os_new_parse_len), a 
a19c			 
a19c			 
a19c			if DEBUG_FORTH_UWORD 
a19c ed 5b c2 e5		ld de, (os_tok_ptr) 
a1a0						DMARK ":01" 
a1a0 f5				push af  
a1a1 3a b5 a1			ld a, (.dmark)  
a1a4 32 6b ee			ld (debug_mark),a  
a1a7 3a b6 a1			ld a, (.dmark+1)  
a1aa 32 6c ee			ld (debug_mark+1),a  
a1ad 3a b7 a1			ld a, (.dmark+2)  
a1b0 32 6d ee			ld (debug_mark+2),a  
a1b3 18 03			jr .pastdmark  
a1b5 ..			.dmark: db ":01"  
a1b8 f1			.pastdmark: pop af  
a1b9			endm  
# End of macro DMARK
a1b9				CALLMONITOR 
a1b9 cd 6f ee			call debug_vector  
a1bc				endm  
# End of macro CALLMONITOR
a1bc			endif 
a1bc			 
a1bc			; 
a1bc			;  new word memory layout: 
a1bc			;  
a1bc			;    : adg 6666 ;  
a1bc			; 
a1bc			;    db   1     ; user defined word  
a1bc 23				inc hl    
a1bd			;    dw   sysdict 
a1bd 23				inc hl 
a1be 23				inc hl 
a1bf			;    db <word len>+1 (for null) 
a1bf 23				inc hl 
a1c0			;    db .... <word> 
a1c0			; 
a1c0			 
a1c0 23				inc hl    ; some extras for the word preamble before the above 
a1c1 23				inc hl 
a1c2 23				inc hl 
a1c3 23				inc hl 
a1c4 23				inc hl 
a1c5 23				inc hl 
a1c6 23				inc hl  
a1c7 23				inc hl 
a1c8 23				inc hl 
a1c9 23				inc hl 
a1ca 23				inc hl 
a1cb 23				inc hl 
a1cc 23				inc hl 
a1cd 23				inc hl     ; TODO how many do we really need?     maybe only 6 
a1ce			;       exec word buffer 
a1ce			;	<ptr word>   
a1ce 23				inc hl 
a1cf 23				inc hl 
a1d0			;       <word list><null term> 7F final term 
a1d0			 
a1d0			 
a1d0			if DEBUG_FORTH_UWORD 
a1d0						DMARK ":02" 
a1d0 f5				push af  
a1d1 3a e5 a1			ld a, (.dmark)  
a1d4 32 6b ee			ld (debug_mark),a  
a1d7 3a e6 a1			ld a, (.dmark+1)  
a1da 32 6c ee			ld (debug_mark+1),a  
a1dd 3a e7 a1			ld a, (.dmark+2)  
a1e0 32 6d ee			ld (debug_mark+2),a  
a1e3 18 03			jr .pastdmark  
a1e5 ..			.dmark: db ":02"  
a1e8 f1			.pastdmark: pop af  
a1e9			endm  
# End of macro DMARK
a1e9				CALLMONITOR 
a1e9 cd 6f ee			call debug_vector  
a1ec				endm  
# End of macro CALLMONITOR
a1ec			endif 
a1ec			 
a1ec				 
a1ec					; malloc the size 
a1ec			 
a1ec cd a3 91				call malloc 
a1ef 22 bf e2				ld (os_new_malloc), hl     ; save malloc start 
a1f2			 
a1f2			;    db   1     ; user defined word  
a1f2 3e 01				ld a, WORD_SYS_UWORD  
a1f4 77					ld (hl), a 
a1f5				 
a1f5 23				inc hl    
a1f6			;    dw   sysdict 
a1f6 11 40 a0			ld de, sysdict       ; continue on with the scan to the system dict 
a1f9 73				ld (hl), e 
a1fa 23				inc hl 
a1fb 72				ld (hl), d 
a1fc 23				inc hl 
a1fd			 
a1fd			 
a1fd			;    Setup dict word 
a1fd			 
a1fd 23				inc hl 
a1fe 22 b9 e2			ld (os_new_work_ptr), hl     ; save start of dict word  
a201			 
a201				; 1. get length of dict word 
a201			 
a201			 
a201 2a c2 e5			ld hl, (os_tok_ptr) 
a204 23				inc hl 
a205 23				inc hl    ; position to start of dict word 
a206 3e 00			ld a, 0 
a208 cd 45 91			call strlent 
a20b			 
a20b			 
a20b 23				inc hl    ; to include null??? 
a20c			 
a20c				; write length of dict word 
a20c			 
a20c ed 5b b9 e2		ld de, (os_new_work_ptr)   ; get dest for copy of word 
a210 1b				dec de 
a211 eb				ex de, hl 
a212 73				ld (hl), e 
a213 eb				ex de, hl 
a214			 
a214				 
a214			 
a214				; copy  
a214 4d				ld c, l 
a215 06 00			ld b, 0 
a217 ed 5b b9 e2		ld de, (os_new_work_ptr)   ; get dest for copy of word 
a21b 2a c2 e5			ld hl, (os_tok_ptr) 
a21e 23				inc hl 
a21f 23				inc hl    ; position to start of dict word 
a220				 
a220			;	ldir       ; copy word - HL now is where we need to be for copy of the line 
a220				 
a220				; TODO need to convert word to upper case 
a220			 
a220			ucasetok:	 
a220 7e				ld a,(hl) 
a221 cd 31 91			call toUpper 
a224 77				ld (hl),a 
a225 ed a0			ldi 
a227 f2 20 a2		 	jp p, ucasetok 
a22a			 
a22a			 
a22a			 
a22a				; de now points to start of where the word body code should be placed 
a22a ed 53 b9 e2		ld (os_new_work_ptr), de 
a22e				; hl now points to the words to throw at forthexec which needs to be copied 
a22e 22 b7 e2			ld (os_new_src_ptr), hl 
a231			 
a231				; TODO add 'call to forthexec' 
a231			 
a231			if DEBUG_FORTH_UWORD 
a231 c5				push bc 
a232 ed 4b bf e2		ld bc, (os_new_malloc) 
a236						DMARK ":0x" 
a236 f5				push af  
a237 3a 4b a2			ld a, (.dmark)  
a23a 32 6b ee			ld (debug_mark),a  
a23d 3a 4c a2			ld a, (.dmark+1)  
a240 32 6c ee			ld (debug_mark+1),a  
a243 3a 4d a2			ld a, (.dmark+2)  
a246 32 6d ee			ld (debug_mark+2),a  
a249 18 03			jr .pastdmark  
a24b ..			.dmark: db ":0x"  
a24e f1			.pastdmark: pop af  
a24f			endm  
# End of macro DMARK
a24f				CALLMONITOR 
a24f cd 6f ee			call debug_vector  
a252				endm  
# End of macro CALLMONITOR
a252 c1				pop bc 
a253			endif 
a253			 
a253			 
a253				; create word preamble which should be: 
a253			 
a253			; TODO possibly push the current os_tok_ptr to rsp and the current rsp will be the start of the string and not current pc???? 
a253			 
a253				;    ld hl, <word code> 
a253				;    jp user_exec 
a253			        ;    <word code bytes> 
a253			 
a253			 
a253			;	inc de     ; TODO ??? or are we already past the word's null 
a253 eb				ex de, hl 
a254			 
a254 36 21			ld (hl), 021h     ; TODO get bytes poke "ld hl, " 
a256			 
a256 23				inc hl 
a257 22 b3 e2			ld (os_new_exec_ptr),hl     ; save this location to poke with the address of the word buffer 
a25a 23				inc hl 
a25b			 
a25b 23				inc hl 
a25c 36 c3			ld (hl), 0c3h     ; TODO get bytes poke "jp xx  " 
a25e			 
a25e 01 55 cb			ld bc, user_exec 
a261 23				inc hl 
a262 71				ld (hl), c     ; poke address of user_exec 
a263 23				inc hl 
a264 70				ld (hl), b     
a265			 ; 
a265			;	inc hl 
a265			;	ld (hl), 0cdh     ; TODO get bytes poke "call  " 
a265			; 
a265			; 
a265			;	ld bc, macro_forth_rsp_next 
a265			;	inc hl 
a265			;	ld (hl), c     ; poke address of FORTH_RSP_NEXT 
a265			;	inc hl 
a265			;	ld (hl), b     
a265			 ; 
a265			;	inc hl 
a265			;	ld (hl), 0cdh     ; TODO get bytes poke "call  " 
a265			; 
a265			; 
a265			;	inc hl 
a265			;	ld bc, forthexec 
a265			;	ld (hl), c     ; poke address of forthexec 
a265			;	inc hl 
a265			;	ld (hl), b      
a265			; 
a265			;	inc hl 
a265			;	ld (hl), 0c3h     ; TODO get bytes poke "jp  " 
a265			; 
a265			;	ld bc, user_dict_next 
a265			;	inc hl 
a265			;	ld (hl), c     ; poke address of forthexec 
a265			;	inc hl 
a265			;	ld (hl), b      
a265			 
a265				; hl is now where we need to copy the word byte data to save this 
a265			 
a265 23				inc hl 
a266 22 b5 e2			ld (os_new_exec), hl 
a269				 
a269				; copy definition 
a269			 
a269 eb				ex de, hl 
a26a			;	inc de    ; TODO BUG It appears the exec of a uword requires pc to be set 
a26a			;	inc de    ; skip the PC for this parse 
a26a 3a bd e2			ld a, (os_new_parse_len) 
a26d 4f				ld c, a 
a26e 06 00			ld b, 0 
a270 ed b0			ldir		 ; copy defintion 
a272			 
a272			 
a272				; poke the address of where the new word bytes live for forthexec 
a272			 
a272 2a b3 e2			ld hl, (os_new_exec_ptr)     ; TODO this isnt correct 
a275			 
a275 ed 5b b5 e2		ld de, (os_new_exec)      
a279				 
a279 73				ld (hl), e 
a27a 23				inc hl 
a27b 72				ld (hl), d 
a27c			 
a27c					; TODO copy last user dict word next link to this word 
a27c					; TODO update last user dict word to point to this word 
a27c			; 
a27c			; hl f923 de 812a ; bc 811a 
a27c			 
a27c			if DEBUG_FORTH_UWORD 
a27c c5				push bc 
a27d ed 4b bf e2		ld bc, (os_new_malloc) 
a281						DMARK ":0A" 
a281 f5				push af  
a282 3a 96 a2			ld a, (.dmark)  
a285 32 6b ee			ld (debug_mark),a  
a288 3a 97 a2			ld a, (.dmark+1)  
a28b 32 6c ee			ld (debug_mark+1),a  
a28e 3a 98 a2			ld a, (.dmark+2)  
a291 32 6d ee			ld (debug_mark+2),a  
a294 18 03			jr .pastdmark  
a296 ..			.dmark: db ":0A"  
a299 f1			.pastdmark: pop af  
a29a			endm  
# End of macro DMARK
a29a				CALLMONITOR 
a29a cd 6f ee			call debug_vector  
a29d				endm  
# End of macro CALLMONITOR
a29d c1				pop bc 
a29e			endif 
a29e			if DEBUG_FORTH_UWORD 
a29e c5				push bc 
a29f ed 4b bf e2		ld bc, (os_new_malloc) 
a2a3 03				inc bc 
a2a4 03				inc bc 
a2a5 03				inc bc 
a2a6 03				inc bc 
a2a7 03				inc bc 
a2a8 03				inc bc 
a2a9 03				inc bc 
a2aa 03				inc bc 
a2ab			 
a2ab						DMARK ":0B" 
a2ab f5				push af  
a2ac 3a c0 a2			ld a, (.dmark)  
a2af 32 6b ee			ld (debug_mark),a  
a2b2 3a c1 a2			ld a, (.dmark+1)  
a2b5 32 6c ee			ld (debug_mark+1),a  
a2b8 3a c2 a2			ld a, (.dmark+2)  
a2bb 32 6d ee			ld (debug_mark+2),a  
a2be 18 03			jr .pastdmark  
a2c0 ..			.dmark: db ":0B"  
a2c3 f1			.pastdmark: pop af  
a2c4			endm  
# End of macro DMARK
a2c4				CALLMONITOR 
a2c4 cd 6f ee			call debug_vector  
a2c7				endm  
# End of macro CALLMONITOR
a2c7 c1				pop bc 
a2c8			endif 
a2c8			 
a2c8			; update word dict linked list for new word 
a2c8			 
a2c8			 
a2c8 2a be e5		ld hl, (os_last_new_uword)		; get the start of the last added uword 
a2cb 23			inc hl     ; move to next work linked list ptr 
a2cc			 
a2cc ed 5b bf e2	ld de, (os_new_malloc)		 ; new next word 
a2d0 73			ld (hl), e 
a2d1 23			inc hl 
a2d2 72			ld (hl), d 
a2d3			 
a2d3			if DEBUG_FORTH_UWORD 
a2d3 ed 4b be e5		ld bc, (os_last_new_uword)		; get the last word so we can check it worked in debug 
a2d7			endif 
a2d7			 
a2d7 ed 53 be e5	ld (os_last_new_uword), de      ; update last new uword ptr 
a2db			 
a2db			 
a2db			if DEBUG_FORTH_UWORD 
a2db						DMARK ":0+" 
a2db f5				push af  
a2dc 3a f0 a2			ld a, (.dmark)  
a2df 32 6b ee			ld (debug_mark),a  
a2e2 3a f1 a2			ld a, (.dmark+1)  
a2e5 32 6c ee			ld (debug_mark+1),a  
a2e8 3a f2 a2			ld a, (.dmark+2)  
a2eb 32 6d ee			ld (debug_mark+2),a  
a2ee 18 03			jr .pastdmark  
a2f0 ..			.dmark: db ":0+"  
a2f3 f1			.pastdmark: pop af  
a2f4			endm  
# End of macro DMARK
a2f4				CALLMONITOR 
a2f4 cd 6f ee			call debug_vector  
a2f7				endm  
# End of macro CALLMONITOR
a2f7			endif 
a2f7			 
a2f7				STACKFRAMECHK OFF $8efe $989f 
a2f7				if DEBUG_STACK_IMB 
a2f7					if OFF 
a2f7						exx 
a2f7						ld hl, $989f 
a2f7						pop de   ; $989f 
a2f7						call cmp16 
a2f7						jr nz, .spnosame 
a2f7						ld hl, $8efe 
a2f7						pop de   ; $8efe 
a2f7						call cmp16 
a2f7						jr z, .spfrsame 
a2f7						.spnosame: call showsperror 
a2f7						.spfrsame: nop 
a2f7						exx 
a2f7					endif 
a2f7				endif 
a2f7			endm 
# End of macro STACKFRAMECHK
a2f7			 
a2f7 c9			ret    ; dont process any remaining parser tokens as they form new word 
a2f8			 
a2f8			 
a2f8			 
a2f8			 
a2f8			;		NEXT 
a2f8			.SCOLN: 
a2f8			;	CWHEAD .DROP 17 '\;' 1 WORD_FLAG_CODE 
a2f8 06				db OPCODE_SCOLN 
a2f9 44 a3			dw .DROP 
a2fb 02				db 2 
a2fc .. 00			db ";",0           
a2fe			; | ; ( -- )     Terminate new word and return exec to previous exec level | DONE 
a2fe					if DEBUG_FORTH_WORDS_KEY 
a2fe						DMARK "SCN" 
a2fe f5				push af  
a2ff 3a 13 a3			ld a, (.dmark)  
a302 32 6b ee			ld (debug_mark),a  
a305 3a 14 a3			ld a, (.dmark+1)  
a308 32 6c ee			ld (debug_mark+1),a  
a30b 3a 15 a3			ld a, (.dmark+2)  
a30e 32 6d ee			ld (debug_mark+2),a  
a311 18 03			jr .pastdmark  
a313 ..			.dmark: db "SCN"  
a316 f1			.pastdmark: pop af  
a317			endm  
# End of macro DMARK
a317						CALLMONITOR 
a317 cd 6f ee			call debug_vector  
a31a				endm  
# End of macro CALLMONITOR
a31a					endif 
a31a					FORTH_RSP_TOS 
a31a cd f9 9a			call macro_forth_rsp_tos 
a31d				endm 
# End of macro FORTH_RSP_TOS
a31d e5					push hl 
a31e					FORTH_RSP_POP 
a31e cd 03 9b			call macro_forth_rsp_pop 
a321				endm 
# End of macro FORTH_RSP_POP
a321 e1					pop hl 
a322			;		ex de,hl 
a322 22 c2 e5				ld (os_tok_ptr),hl 
a325			 
a325			if DEBUG_FORTH_UWORD 
a325						DMARK "SCL" 
a325 f5				push af  
a326 3a 3a a3			ld a, (.dmark)  
a329 32 6b ee			ld (debug_mark),a  
a32c 3a 3b a3			ld a, (.dmark+1)  
a32f 32 6c ee			ld (debug_mark+1),a  
a332 3a 3c a3			ld a, (.dmark+2)  
a335 32 6d ee			ld (debug_mark+2),a  
a338 18 03			jr .pastdmark  
a33a ..			.dmark: db "SCL"  
a33d f1			.pastdmark: pop af  
a33e			endm  
# End of macro DMARK
a33e				CALLMONITOR 
a33e cd 6f ee			call debug_vector  
a341				endm  
# End of macro CALLMONITOR
a341			endif 
a341					NEXTW 
a341 c3 e8 9e			jp macro_next 
a344				endm 
# End of macro NEXTW
a344			 
a344			.DROP: 
a344				CWHEAD .DUP2 OPCODE_DROP "DROP" 4 WORD_FLAG_CODE 
a344 1b				db WORD_SYS_CORE+OPCODE_DROP             
a345 6f a3			dw .DUP2            
a347 05				db 4 + 1 
a348 .. 00			db "DROP",0              
a34d				endm 
# End of macro CWHEAD
a34d			; | DROP ( w -- )   drop the TOS item   | DONE 
a34d					if DEBUG_FORTH_WORDS_KEY 
a34d						DMARK "DRP" 
a34d f5				push af  
a34e 3a 62 a3			ld a, (.dmark)  
a351 32 6b ee			ld (debug_mark),a  
a354 3a 63 a3			ld a, (.dmark+1)  
a357 32 6c ee			ld (debug_mark+1),a  
a35a 3a 64 a3			ld a, (.dmark+2)  
a35d 32 6d ee			ld (debug_mark+2),a  
a360 18 03			jr .pastdmark  
a362 ..			.dmark: db "DRP"  
a365 f1			.pastdmark: pop af  
a366			endm  
# End of macro DMARK
a366						CALLMONITOR 
a366 cd 6f ee			call debug_vector  
a369				endm  
# End of macro CALLMONITOR
a369					endif 
a369					FORTH_DSP_POP 
a369 cd ea 9d			call macro_forth_dsp_pop 
a36c				endm 
# End of macro FORTH_DSP_POP
a36c					NEXTW 
a36c c3 e8 9e			jp macro_next 
a36f				endm 
# End of macro NEXTW
a36f			.DUP2: 
a36f				CWHEAD .DROP2 OPCODE_DUP2 "2DUP" 4 WORD_FLAG_CODE 
a36f 1c				db WORD_SYS_CORE+OPCODE_DUP2             
a370 b4 a3			dw .DROP2            
a372 05				db 4 + 1 
a373 .. 00			db "2DUP",0              
a378				endm 
# End of macro CWHEAD
a378			; | 2DUP ( w1 w2 -- w1 w2 w1 w2 ) Duplicate the top two items on TOS  | DONE 
a378					if DEBUG_FORTH_WORDS_KEY 
a378						DMARK "2DU" 
a378 f5				push af  
a379 3a 8d a3			ld a, (.dmark)  
a37c 32 6b ee			ld (debug_mark),a  
a37f 3a 8e a3			ld a, (.dmark+1)  
a382 32 6c ee			ld (debug_mark+1),a  
a385 3a 8f a3			ld a, (.dmark+2)  
a388 32 6d ee			ld (debug_mark+2),a  
a38b 18 03			jr .pastdmark  
a38d ..			.dmark: db "2DU"  
a390 f1			.pastdmark: pop af  
a391			endm  
# End of macro DMARK
a391						CALLMONITOR 
a391 cd 6f ee			call debug_vector  
a394				endm  
# End of macro CALLMONITOR
a394					endif 
a394					FORTH_DSP_VALUEHL 
a394 cd 32 9d			call macro_dsp_valuehl 
a397				endm 
# End of macro FORTH_DSP_VALUEHL
a397 e5					push hl      ; 2 
a398			 
a398					FORTH_DSP_POP 
a398 cd ea 9d			call macro_forth_dsp_pop 
a39b				endm 
# End of macro FORTH_DSP_POP
a39b					 
a39b					FORTH_DSP_VALUEHL 
a39b cd 32 9d			call macro_dsp_valuehl 
a39e				endm 
# End of macro FORTH_DSP_VALUEHL
a39e			;		push hl      ; 1 
a39e			 
a39e					FORTH_DSP_POP 
a39e cd ea 9d			call macro_forth_dsp_pop 
a3a1				endm 
# End of macro FORTH_DSP_POP
a3a1			 
a3a1			;		pop hl       ; 1 
a3a1 d1					pop de       ; 2 
a3a2			 
a3a2 cd 3b 9b				call forth_push_numhl 
a3a5 eb					ex de, hl 
a3a6 cd 3b 9b				call forth_push_numhl 
a3a9			 
a3a9					 
a3a9 eb					ex de, hl 
a3aa			 
a3aa cd 3b 9b				call forth_push_numhl 
a3ad eb					ex de, hl 
a3ae cd 3b 9b				call forth_push_numhl 
a3b1			 
a3b1			 
a3b1					NEXTW 
a3b1 c3 e8 9e			jp macro_next 
a3b4				endm 
# End of macro NEXTW
a3b4			.DROP2: 
a3b4				CWHEAD .SWAP2 OPCODE_DROP2 "2DROP" 5 WORD_FLAG_CODE 
a3b4 1d				db WORD_SYS_CORE+OPCODE_DROP2             
a3b5 e3 a3			dw .SWAP2            
a3b7 06				db 5 + 1 
a3b8 .. 00			db "2DROP",0              
a3be				endm 
# End of macro CWHEAD
a3be			; | 2DROP ( w w -- )    Double drop | DONE 
a3be					if DEBUG_FORTH_WORDS_KEY 
a3be						DMARK "2DR" 
a3be f5				push af  
a3bf 3a d3 a3			ld a, (.dmark)  
a3c2 32 6b ee			ld (debug_mark),a  
a3c5 3a d4 a3			ld a, (.dmark+1)  
a3c8 32 6c ee			ld (debug_mark+1),a  
a3cb 3a d5 a3			ld a, (.dmark+2)  
a3ce 32 6d ee			ld (debug_mark+2),a  
a3d1 18 03			jr .pastdmark  
a3d3 ..			.dmark: db "2DR"  
a3d6 f1			.pastdmark: pop af  
a3d7			endm  
# End of macro DMARK
a3d7						CALLMONITOR 
a3d7 cd 6f ee			call debug_vector  
a3da				endm  
# End of macro CALLMONITOR
a3da					endif 
a3da					FORTH_DSP_POP 
a3da cd ea 9d			call macro_forth_dsp_pop 
a3dd				endm 
# End of macro FORTH_DSP_POP
a3dd					FORTH_DSP_POP 
a3dd cd ea 9d			call macro_forth_dsp_pop 
a3e0				endm 
# End of macro FORTH_DSP_POP
a3e0					NEXTW 
a3e0 c3 e8 9e			jp macro_next 
a3e3				endm 
# End of macro NEXTW
a3e3			.SWAP2: 
a3e3				CWHEAD .AT OPCODE_SWAP2 "2SWAP" 5 WORD_FLAG_CODE 
a3e3 1e				db WORD_SYS_CORE+OPCODE_SWAP2             
a3e4 0c a4			dw .AT            
a3e6 06				db 5 + 1 
a3e7 .. 00			db "2SWAP",0              
a3ed				endm 
# End of macro CWHEAD
a3ed			; | 2SWAP ( w1 w2 w3 w4 -- w3 w4 w1 w2 ) Swap top pair of items | TODO 
a3ed					if DEBUG_FORTH_WORDS_KEY 
a3ed						DMARK "2SW" 
a3ed f5				push af  
a3ee 3a 02 a4			ld a, (.dmark)  
a3f1 32 6b ee			ld (debug_mark),a  
a3f4 3a 03 a4			ld a, (.dmark+1)  
a3f7 32 6c ee			ld (debug_mark+1),a  
a3fa 3a 04 a4			ld a, (.dmark+2)  
a3fd 32 6d ee			ld (debug_mark+2),a  
a400 18 03			jr .pastdmark  
a402 ..			.dmark: db "2SW"  
a405 f1			.pastdmark: pop af  
a406			endm  
# End of macro DMARK
a406						CALLMONITOR 
a406 cd 6f ee			call debug_vector  
a409				endm  
# End of macro CALLMONITOR
a409					endif 
a409					NEXTW 
a409 c3 e8 9e			jp macro_next 
a40c				endm 
# End of macro NEXTW
a40c			.AT: 
a40c				CWHEAD .CAT OPCODE_AT "@" 1 WORD_FLAG_CODE 
a40c 1f				db WORD_SYS_CORE+OPCODE_AT             
a40d 3e a4			dw .CAT            
a40f 02				db 1 + 1 
a410 .. 00			db "@",0              
a412				endm 
# End of macro CWHEAD
a412			; | @ ( w -- ) Push onto TOS byte stored at address   | DONE 
a412			 
a412					if DEBUG_FORTH_WORDS_KEY 
a412						DMARK "AT." 
a412 f5				push af  
a413 3a 27 a4			ld a, (.dmark)  
a416 32 6b ee			ld (debug_mark),a  
a419 3a 28 a4			ld a, (.dmark+1)  
a41c 32 6c ee			ld (debug_mark+1),a  
a41f 3a 29 a4			ld a, (.dmark+2)  
a422 32 6d ee			ld (debug_mark+2),a  
a425 18 03			jr .pastdmark  
a427 ..			.dmark: db "AT."  
a42a f1			.pastdmark: pop af  
a42b			endm  
# End of macro DMARK
a42b						CALLMONITOR 
a42b cd 6f ee			call debug_vector  
a42e				endm  
# End of macro CALLMONITOR
a42e					endif 
a42e			.getbyteat:	 
a42e					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a42e cd 32 9d			call macro_dsp_valuehl 
a431				endm 
# End of macro FORTH_DSP_VALUEHL
a431					 
a431			;		push hl 
a431				 
a431					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a431 cd ea 9d			call macro_forth_dsp_pop 
a434				endm 
# End of macro FORTH_DSP_POP
a434			 
a434			;		pop hl 
a434			 
a434 7e					ld a, (hl) 
a435			 
a435 6f					ld l, a 
a436 26 00				ld h, 0 
a438 cd 3b 9b				call forth_push_numhl 
a43b			 
a43b					NEXTW 
a43b c3 e8 9e			jp macro_next 
a43e				endm 
# End of macro NEXTW
a43e			.CAT: 
a43e				CWHEAD .BANG OPCODE_CAT "C@" 2 WORD_FLAG_CODE 
a43e 20				db WORD_SYS_CORE+OPCODE_CAT             
a43f 67 a4			dw .BANG            
a441 03				db 2 + 1 
a442 .. 00			db "C@",0              
a445				endm 
# End of macro CWHEAD
a445			; | C@  ( w -- ) Push onto TOS byte stored at address   | DONE 
a445					if DEBUG_FORTH_WORDS_KEY 
a445						DMARK "CAA" 
a445 f5				push af  
a446 3a 5a a4			ld a, (.dmark)  
a449 32 6b ee			ld (debug_mark),a  
a44c 3a 5b a4			ld a, (.dmark+1)  
a44f 32 6c ee			ld (debug_mark+1),a  
a452 3a 5c a4			ld a, (.dmark+2)  
a455 32 6d ee			ld (debug_mark+2),a  
a458 18 03			jr .pastdmark  
a45a ..			.dmark: db "CAA"  
a45d f1			.pastdmark: pop af  
a45e			endm  
# End of macro DMARK
a45e						CALLMONITOR 
a45e cd 6f ee			call debug_vector  
a461				endm  
# End of macro CALLMONITOR
a461					endif 
a461 c3 2e a4				jp .getbyteat 
a464					NEXTW 
a464 c3 e8 9e			jp macro_next 
a467				endm 
# End of macro NEXTW
a467			.BANG: 
a467				CWHEAD .CBANG OPCODE_BANG "!" 1 WORD_FLAG_CODE 
a467 21				db WORD_SYS_CORE+OPCODE_BANG             
a468 9d a4			dw .CBANG            
a46a 02				db 1 + 1 
a46b .. 00			db "!",0              
a46d				endm 
# End of macro CWHEAD
a46d			; | ! ( x w -- ) Store x at address w      | DONE 
a46d					if DEBUG_FORTH_WORDS_KEY 
a46d						DMARK "BNG" 
a46d f5				push af  
a46e 3a 82 a4			ld a, (.dmark)  
a471 32 6b ee			ld (debug_mark),a  
a474 3a 83 a4			ld a, (.dmark+1)  
a477 32 6c ee			ld (debug_mark+1),a  
a47a 3a 84 a4			ld a, (.dmark+2)  
a47d 32 6d ee			ld (debug_mark+2),a  
a480 18 03			jr .pastdmark  
a482 ..			.dmark: db "BNG"  
a485 f1			.pastdmark: pop af  
a486			endm  
# End of macro DMARK
a486						CALLMONITOR 
a486 cd 6f ee			call debug_vector  
a489				endm  
# End of macro CALLMONITOR
a489					endif 
a489			 
a489			.storebyteat:		 
a489					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a489 cd 32 9d			call macro_dsp_valuehl 
a48c				endm 
# End of macro FORTH_DSP_VALUEHL
a48c					 
a48c e5					push hl 
a48d				 
a48d					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a48d cd ea 9d			call macro_forth_dsp_pop 
a490				endm 
# End of macro FORTH_DSP_POP
a490			 
a490					; get byte to poke 
a490			 
a490					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a490 cd 32 9d			call macro_dsp_valuehl 
a493				endm 
# End of macro FORTH_DSP_VALUEHL
a493 e5					push hl 
a494			 
a494			 
a494					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a494 cd ea 9d			call macro_forth_dsp_pop 
a497				endm 
# End of macro FORTH_DSP_POP
a497			 
a497			 
a497 d1					pop de 
a498 e1					pop hl 
a499			 
a499 73					ld (hl),e 
a49a			 
a49a			 
a49a					NEXTW 
a49a c3 e8 9e			jp macro_next 
a49d				endm 
# End of macro NEXTW
a49d			.CBANG: 
a49d				CWHEAD .SCALL OPCODE_CBANG "C!" 2 WORD_FLAG_CODE 
a49d 22				db WORD_SYS_CORE+OPCODE_CBANG             
a49e c6 a4			dw .SCALL            
a4a0 03				db 2 + 1 
a4a1 .. 00			db "C!",0              
a4a4				endm 
# End of macro CWHEAD
a4a4			; | C!  ( x w -- ) Store x at address w  | DONE 
a4a4					if DEBUG_FORTH_WORDS_KEY 
a4a4						DMARK "CBA" 
a4a4 f5				push af  
a4a5 3a b9 a4			ld a, (.dmark)  
a4a8 32 6b ee			ld (debug_mark),a  
a4ab 3a ba a4			ld a, (.dmark+1)  
a4ae 32 6c ee			ld (debug_mark+1),a  
a4b1 3a bb a4			ld a, (.dmark+2)  
a4b4 32 6d ee			ld (debug_mark+2),a  
a4b7 18 03			jr .pastdmark  
a4b9 ..			.dmark: db "CBA"  
a4bc f1			.pastdmark: pop af  
a4bd			endm  
# End of macro DMARK
a4bd						CALLMONITOR 
a4bd cd 6f ee			call debug_vector  
a4c0				endm  
# End of macro CALLMONITOR
a4c0					endif 
a4c0 c3 89 a4				jp .storebyteat 
a4c3					NEXTW 
a4c3 c3 e8 9e			jp macro_next 
a4c6				endm 
# End of macro NEXTW
a4c6			.SCALL: 
a4c6				CWHEAD .DEPTH OPCODE_SCALL "CALL" 4 WORD_FLAG_CODE 
a4c6 23				db WORD_SYS_CORE+OPCODE_SCALL             
a4c7 fa a4			dw .DEPTH            
a4c9 05				db 4 + 1 
a4ca .. 00			db "CALL",0              
a4cf				endm 
# End of macro CWHEAD
a4cf			; | CALL ( w -- w  ) machine code call to address w  push the result of hl to stack | DONE 
a4cf					if DEBUG_FORTH_WORDS_KEY 
a4cf						DMARK "CLL" 
a4cf f5				push af  
a4d0 3a e4 a4			ld a, (.dmark)  
a4d3 32 6b ee			ld (debug_mark),a  
a4d6 3a e5 a4			ld a, (.dmark+1)  
a4d9 32 6c ee			ld (debug_mark+1),a  
a4dc 3a e6 a4			ld a, (.dmark+2)  
a4df 32 6d ee			ld (debug_mark+2),a  
a4e2 18 03			jr .pastdmark  
a4e4 ..			.dmark: db "CLL"  
a4e7 f1			.pastdmark: pop af  
a4e8			endm  
# End of macro DMARK
a4e8						CALLMONITOR 
a4e8 cd 6f ee			call debug_vector  
a4eb				endm  
# End of macro CALLMONITOR
a4eb					endif 
a4eb			 
a4eb					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a4eb cd 32 9d			call macro_dsp_valuehl 
a4ee				endm 
# End of macro FORTH_DSP_VALUEHL
a4ee			 
a4ee			;		push hl 
a4ee			 
a4ee					; destroy value TOS 
a4ee			 
a4ee					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a4ee cd ea 9d			call macro_forth_dsp_pop 
a4f1				endm 
# End of macro FORTH_DSP_POP
a4f1			 
a4f1						 
a4f1			;		pop hl 
a4f1			 
a4f1					; how to do a call with hl???? save SP? 
a4f1 cd 8c 9e				call forth_call_hl 
a4f4			 
a4f4			 
a4f4					; TODO push value back onto stack for another op etc 
a4f4			 
a4f4 cd 3b 9b				call forth_push_numhl 
a4f7					NEXTW 
a4f7 c3 e8 9e			jp macro_next 
a4fa				endm 
# End of macro NEXTW
a4fa			.DEPTH: 
a4fa				CWHEAD .OVER OPCODE_DEPTH "DEPTH" 5 WORD_FLAG_CODE 
a4fa 24				db WORD_SYS_CORE+OPCODE_DEPTH             
a4fb 37 a5			dw .OVER            
a4fd 06				db 5 + 1 
a4fe .. 00			db "DEPTH",0              
a504				endm 
# End of macro CWHEAD
a504			; | DEPTH ( -- u ) Push count of stack | DONE 
a504					; take current TOS and remove from base value div by two to get count 
a504					if DEBUG_FORTH_WORDS_KEY 
a504						DMARK "DEP" 
a504 f5				push af  
a505 3a 19 a5			ld a, (.dmark)  
a508 32 6b ee			ld (debug_mark),a  
a50b 3a 1a a5			ld a, (.dmark+1)  
a50e 32 6c ee			ld (debug_mark+1),a  
a511 3a 1b a5			ld a, (.dmark+2)  
a514 32 6d ee			ld (debug_mark+2),a  
a517 18 03			jr .pastdmark  
a519 ..			.dmark: db "DEP"  
a51c f1			.pastdmark: pop af  
a51d			endm  
# End of macro DMARK
a51d						CALLMONITOR 
a51d cd 6f ee			call debug_vector  
a520				endm  
# End of macro CALLMONITOR
a520					endif 
a520			 
a520			 
a520 2a ee e9			ld hl, (cli_data_sp) 
a523 11 28 e8			ld de, cli_data_stack 
a526 ed 52			sbc hl,de 
a528				 
a528				; div by size of stack item 
a528			 
a528 5d				ld e,l 
a529 0e 03			ld c, 3 
a52b cd 6c 8c			call Div8 
a52e			 
a52e 6f				ld l,a 
a52f 26 00			ld h,0 
a531			 
a531				;srl h 
a531				;rr l 
a531			 
a531 cd 3b 9b				call forth_push_numhl 
a534					NEXTW 
a534 c3 e8 9e			jp macro_next 
a537				endm 
# End of macro NEXTW
a537			.OVER: 
a537				CWHEAD .PAUSE 46 "OVER" 4 WORD_FLAG_CODE 
a537 42				db WORD_SYS_CORE+46             
a538 7e a5			dw .PAUSE            
a53a 05				db 4 + 1 
a53b .. 00			db "OVER",0              
a540				endm 
# End of macro CWHEAD
a540			; | OVER ( n1 n2 -- n1 n2 n1 )  Copy one below TOS onto TOS | DONE 
a540					if DEBUG_FORTH_WORDS_KEY 
a540						DMARK "OVR" 
a540 f5				push af  
a541 3a 55 a5			ld a, (.dmark)  
a544 32 6b ee			ld (debug_mark),a  
a547 3a 56 a5			ld a, (.dmark+1)  
a54a 32 6c ee			ld (debug_mark+1),a  
a54d 3a 57 a5			ld a, (.dmark+2)  
a550 32 6d ee			ld (debug_mark+2),a  
a553 18 03			jr .pastdmark  
a555 ..			.dmark: db "OVR"  
a558 f1			.pastdmark: pop af  
a559			endm  
# End of macro DMARK
a559						CALLMONITOR 
a559 cd 6f ee			call debug_vector  
a55c				endm  
# End of macro CALLMONITOR
a55c					endif 
a55c			 
a55c					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a55c cd 32 9d			call macro_dsp_valuehl 
a55f				endm 
# End of macro FORTH_DSP_VALUEHL
a55f e5					push hl    ; n2 
a560					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a560 cd ea 9d			call macro_forth_dsp_pop 
a563				endm 
# End of macro FORTH_DSP_POP
a563			 
a563					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a563 cd 32 9d			call macro_dsp_valuehl 
a566				endm 
# End of macro FORTH_DSP_VALUEHL
a566 e5					push hl    ; n1 
a567					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a567 cd ea 9d			call macro_forth_dsp_pop 
a56a				endm 
# End of macro FORTH_DSP_POP
a56a			 
a56a d1					pop de     ; n1 
a56b e1					pop hl     ; n2 
a56c			 
a56c d5					push de 
a56d e5					push hl 
a56e d5					push de 
a56f			 
a56f					; push back  
a56f			 
a56f e1					pop hl 
a570 cd 3b 9b				call forth_push_numhl 
a573 e1					pop hl 
a574 cd 3b 9b				call forth_push_numhl 
a577 e1					pop hl 
a578 cd 3b 9b				call forth_push_numhl 
a57b					NEXTW 
a57b c3 e8 9e			jp macro_next 
a57e				endm 
# End of macro NEXTW
a57e			 
a57e			.PAUSE: 
a57e				CWHEAD .PAUSES 47 "PAUSEMS" 7 WORD_FLAG_CODE 
a57e 43				db WORD_SYS_CORE+47             
a57f b3 a5			dw .PAUSES            
a581 08				db 7 + 1 
a582 .. 00			db "PAUSEMS",0              
a58a				endm 
# End of macro CWHEAD
a58a			; | PAUSEMS ( n -- )  Pause for n millisconds | DONE 
a58a					if DEBUG_FORTH_WORDS_KEY 
a58a						DMARK "PMS" 
a58a f5				push af  
a58b 3a 9f a5			ld a, (.dmark)  
a58e 32 6b ee			ld (debug_mark),a  
a591 3a a0 a5			ld a, (.dmark+1)  
a594 32 6c ee			ld (debug_mark+1),a  
a597 3a a1 a5			ld a, (.dmark+2)  
a59a 32 6d ee			ld (debug_mark+2),a  
a59d 18 03			jr .pastdmark  
a59f ..			.dmark: db "PMS"  
a5a2 f1			.pastdmark: pop af  
a5a3			endm  
# End of macro DMARK
a5a3						CALLMONITOR 
a5a3 cd 6f ee			call debug_vector  
a5a6				endm  
# End of macro CALLMONITOR
a5a6					endif 
a5a6					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a5a6 cd 32 9d			call macro_dsp_valuehl 
a5a9				endm 
# End of macro FORTH_DSP_VALUEHL
a5a9			;		push hl    ; n2 
a5a9					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a5a9 cd ea 9d			call macro_forth_dsp_pop 
a5ac				endm 
# End of macro FORTH_DSP_POP
a5ac			;		pop hl 
a5ac			 
a5ac 7d					ld a, l 
a5ad cd d7 89				call aDelayInMS 
a5b0				       NEXTW 
a5b0 c3 e8 9e			jp macro_next 
a5b3				endm 
# End of macro NEXTW
a5b3			.PAUSES:  
a5b3				CWHEAD .ROT 48 "PAUSE" 5 WORD_FLAG_CODE 
a5b3 44				db WORD_SYS_CORE+48             
a5b4 22 a6			dw .ROT            
a5b6 06				db 5 + 1 
a5b7 .. 00			db "PAUSE",0              
a5bd				endm 
# End of macro CWHEAD
a5bd			; | PAUSE ( n -- )  Pause for n seconds | DONE 
a5bd					if DEBUG_FORTH_WORDS_KEY 
a5bd						DMARK "PAU" 
a5bd f5				push af  
a5be 3a d2 a5			ld a, (.dmark)  
a5c1 32 6b ee			ld (debug_mark),a  
a5c4 3a d3 a5			ld a, (.dmark+1)  
a5c7 32 6c ee			ld (debug_mark+1),a  
a5ca 3a d4 a5			ld a, (.dmark+2)  
a5cd 32 6d ee			ld (debug_mark+2),a  
a5d0 18 03			jr .pastdmark  
a5d2 ..			.dmark: db "PAU"  
a5d5 f1			.pastdmark: pop af  
a5d6			endm  
# End of macro DMARK
a5d6						CALLMONITOR 
a5d6 cd 6f ee			call debug_vector  
a5d9				endm  
# End of macro CALLMONITOR
a5d9					endif 
a5d9					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a5d9 cd 32 9d			call macro_dsp_valuehl 
a5dc				endm 
# End of macro FORTH_DSP_VALUEHL
a5dc			;		push hl    ; n2 
a5dc					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a5dc cd ea 9d			call macro_forth_dsp_pop 
a5df				endm 
# End of macro FORTH_DSP_POP
a5df			;		pop hl 
a5df 45					ld b, l 
a5e0					if DEBUG_FORTH_WORDS 
a5e0						DMARK "PAU" 
a5e0 f5				push af  
a5e1 3a f5 a5			ld a, (.dmark)  
a5e4 32 6b ee			ld (debug_mark),a  
a5e7 3a f6 a5			ld a, (.dmark+1)  
a5ea 32 6c ee			ld (debug_mark+1),a  
a5ed 3a f7 a5			ld a, (.dmark+2)  
a5f0 32 6d ee			ld (debug_mark+2),a  
a5f3 18 03			jr .pastdmark  
a5f5 ..			.dmark: db "PAU"  
a5f8 f1			.pastdmark: pop af  
a5f9			endm  
# End of macro DMARK
a5f9						CALLMONITOR 
a5f9 cd 6f ee			call debug_vector  
a5fc				endm  
# End of macro CALLMONITOR
a5fc					endif 
a5fc c5			.pauses1:	push bc 
a5fd cd f2 89				call delay1s 
a600 c1					pop bc 
a601					if DEBUG_FORTH_WORDS 
a601						DMARK "PA1" 
a601 f5				push af  
a602 3a 16 a6			ld a, (.dmark)  
a605 32 6b ee			ld (debug_mark),a  
a608 3a 17 a6			ld a, (.dmark+1)  
a60b 32 6c ee			ld (debug_mark+1),a  
a60e 3a 18 a6			ld a, (.dmark+2)  
a611 32 6d ee			ld (debug_mark+2),a  
a614 18 03			jr .pastdmark  
a616 ..			.dmark: db "PA1"  
a619 f1			.pastdmark: pop af  
a61a			endm  
# End of macro DMARK
a61a						CALLMONITOR 
a61a cd 6f ee			call debug_vector  
a61d				endm  
# End of macro CALLMONITOR
a61d					endif 
a61d 10 dd				djnz .pauses1 
a61f			 
a61f				       NEXTW 
a61f c3 e8 9e			jp macro_next 
a622				endm 
# End of macro NEXTW
a622			.ROT: 
a622				CWHEAD .UWORDS 49 "ROT" 3 WORD_FLAG_CODE 
a622 45				db WORD_SYS_CORE+49             
a623 70 a6			dw .UWORDS            
a625 04				db 3 + 1 
a626 .. 00			db "ROT",0              
a62a				endm 
# End of macro CWHEAD
a62a			; | ROT ( u1 u2 u3 -- u2 u3 u1 ) Rotate top three items on stack | DONE 
a62a					if DEBUG_FORTH_WORDS_KEY 
a62a						DMARK "ROT" 
a62a f5				push af  
a62b 3a 3f a6			ld a, (.dmark)  
a62e 32 6b ee			ld (debug_mark),a  
a631 3a 40 a6			ld a, (.dmark+1)  
a634 32 6c ee			ld (debug_mark+1),a  
a637 3a 41 a6			ld a, (.dmark+2)  
a63a 32 6d ee			ld (debug_mark+2),a  
a63d 18 03			jr .pastdmark  
a63f ..			.dmark: db "ROT"  
a642 f1			.pastdmark: pop af  
a643			endm  
# End of macro DMARK
a643						CALLMONITOR 
a643 cd 6f ee			call debug_vector  
a646				endm  
# End of macro CALLMONITOR
a646					endif 
a646			 
a646					FORTH_DSP_VALUEHL 
a646 cd 32 9d			call macro_dsp_valuehl 
a649				endm 
# End of macro FORTH_DSP_VALUEHL
a649 e5					push hl    ; u3  
a64a			 
a64a					FORTH_DSP_POP 
a64a cd ea 9d			call macro_forth_dsp_pop 
a64d				endm 
# End of macro FORTH_DSP_POP
a64d			   
a64d					FORTH_DSP_VALUEHL 
a64d cd 32 9d			call macro_dsp_valuehl 
a650				endm 
# End of macro FORTH_DSP_VALUEHL
a650 e5					push hl     ; u2 
a651			 
a651					FORTH_DSP_POP 
a651 cd ea 9d			call macro_forth_dsp_pop 
a654				endm 
# End of macro FORTH_DSP_POP
a654			 
a654					FORTH_DSP_VALUEHL 
a654 cd 32 9d			call macro_dsp_valuehl 
a657				endm 
# End of macro FORTH_DSP_VALUEHL
a657 e5					push hl     ; u1 
a658			 
a658					FORTH_DSP_POP 
a658 cd ea 9d			call macro_forth_dsp_pop 
a65b				endm 
# End of macro FORTH_DSP_POP
a65b			 
a65b c1					pop bc      ; u1 
a65c e1					pop hl      ; u2 
a65d d1					pop de      ; u3 
a65e			 
a65e			 
a65e c5					push bc 
a65f d5					push de 
a660 e5					push hl 
a661			 
a661			 
a661 e1					pop hl 
a662 cd 3b 9b				call forth_push_numhl 
a665			 
a665 e1					pop hl 
a666 cd 3b 9b				call forth_push_numhl 
a669			 
a669 e1					pop hl 
a66a cd 3b 9b				call forth_push_numhl 
a66d					 
a66d			 
a66d			 
a66d			 
a66d			 
a66d			 
a66d				       NEXTW 
a66d c3 e8 9e			jp macro_next 
a670				endm 
# End of macro NEXTW
a670			 
a670			.UWORDS: 
a670				CWHEAD .BP 60 "UWORDS" 6 WORD_FLAG_CODE 
a670 50				db WORD_SYS_CORE+60             
a671 32 a7			dw .BP            
a673 07				db 6 + 1 
a674 .. 00			db "UWORDS",0              
a67b				endm 
# End of macro CWHEAD
a67b			; | UWORDS (  -- s1 ... sn u )   List user word dict | DONE 
a67b			; | | After use the TOS will have a count of the number of user words that have been pushed to stack. 
a67b			; | | Following the count are the individual words. 
a67b			; | | 
a67b			; | | e.g. UWORDS 
a67b			; | | BOX DIRLIST 2 
a67b			; | |  
a67b			; | | Can be used to save the words to storage via: 
a67b			; | | UWORDS $01 DO $01 APPEND LOOP 
a67b				if DEBUG_FORTH_WORDS_KEY 
a67b					DMARK "UWR" 
a67b f5				push af  
a67c 3a 90 a6			ld a, (.dmark)  
a67f 32 6b ee			ld (debug_mark),a  
a682 3a 91 a6			ld a, (.dmark+1)  
a685 32 6c ee			ld (debug_mark+1),a  
a688 3a 92 a6			ld a, (.dmark+2)  
a68b 32 6d ee			ld (debug_mark+2),a  
a68e 18 03			jr .pastdmark  
a690 ..			.dmark: db "UWR"  
a693 f1			.pastdmark: pop af  
a694			endm  
# End of macro DMARK
a694					CALLMONITOR 
a694 cd 6f ee			call debug_vector  
a697				endm  
# End of macro CALLMONITOR
a697				endif 
a697 21 2d e4				ld hl, baseram 
a69a					;ld hl, baseusermem 
a69a 01 00 00				ld bc, 0    ; start a counter 
a69d			 
a69d				; skip dict stub 
a69d			 
a69d cd 39 a0				call forth_tok_next 
a6a0			 
a6a0			 
a6a0			; while we have words to look for 
a6a0			 
a6a0 7e			.douscan:	ld a, (hl)      
a6a1				if DEBUG_FORTH_WORDS 
a6a1					DMARK "UWs" 
a6a1 f5				push af  
a6a2 3a b6 a6			ld a, (.dmark)  
a6a5 32 6b ee			ld (debug_mark),a  
a6a8 3a b7 a6			ld a, (.dmark+1)  
a6ab 32 6c ee			ld (debug_mark+1),a  
a6ae 3a b8 a6			ld a, (.dmark+2)  
a6b1 32 6d ee			ld (debug_mark+2),a  
a6b4 18 03			jr .pastdmark  
a6b6 ..			.dmark: db "UWs"  
a6b9 f1			.pastdmark: pop af  
a6ba			endm  
# End of macro DMARK
a6ba					CALLMONITOR 
a6ba cd 6f ee			call debug_vector  
a6bd				endm  
# End of macro CALLMONITOR
a6bd				endif 
a6bd fe 00				cp WORD_SYS_END 
a6bf 28 4d				jr z, .udone 
a6c1 fe 01				cp WORD_SYS_UWORD 
a6c3 20 44				jr nz, .nuword 
a6c5			 
a6c5				if DEBUG_FORTH_WORDS 
a6c5					DMARK "UWu" 
a6c5 f5				push af  
a6c6 3a da a6			ld a, (.dmark)  
a6c9 32 6b ee			ld (debug_mark),a  
a6cc 3a db a6			ld a, (.dmark+1)  
a6cf 32 6c ee			ld (debug_mark+1),a  
a6d2 3a dc a6			ld a, (.dmark+2)  
a6d5 32 6d ee			ld (debug_mark+2),a  
a6d8 18 03			jr .pastdmark  
a6da ..			.dmark: db "UWu"  
a6dd f1			.pastdmark: pop af  
a6de			endm  
# End of macro DMARK
a6de					CALLMONITOR 
a6de cd 6f ee			call debug_vector  
a6e1				endm  
# End of macro CALLMONITOR
a6e1				endif 
a6e1					; we have a uword so push its name to the stack 
a6e1			 
a6e1 e5				   	push hl  ; save so we can move to next dict block 
a6e2			 
a6e2					; skip opcode 
a6e2 23					inc hl  
a6e3					; skip next ptr 
a6e3 23					inc hl  
a6e4 23					inc hl 
a6e5					; skip len 
a6e5 23					inc hl 
a6e6				if DEBUG_FORTH_WORDS 
a6e6					DMARK "UWt" 
a6e6 f5				push af  
a6e7 3a fb a6			ld a, (.dmark)  
a6ea 32 6b ee			ld (debug_mark),a  
a6ed 3a fc a6			ld a, (.dmark+1)  
a6f0 32 6c ee			ld (debug_mark+1),a  
a6f3 3a fd a6			ld a, (.dmark+2)  
a6f6 32 6d ee			ld (debug_mark+2),a  
a6f9 18 03			jr .pastdmark  
a6fb ..			.dmark: db "UWt"  
a6fe f1			.pastdmark: pop af  
a6ff			endm  
# End of macro DMARK
a6ff					CALLMONITOR 
a6ff cd 6f ee			call debug_vector  
a702				endm  
# End of macro CALLMONITOR
a702				endif 
a702 03					inc bc 
a703			 
a703 c5					push bc 
a704 cd a9 9b				call forth_push_str 
a707 c1					pop bc 
a708			 
a708 e1					pop hl 	 
a709			 
a709 cd 39 a0		.nuword:	call forth_tok_next 
a70c 18 92				jr .douscan  
a70e			 
a70e			.udone:		 ; push count of uwords found 
a70e c5					push bc 
a70f e1					pop hl 
a710			 
a710				if DEBUG_FORTH_WORDS 
a710					DMARK "UWc" 
a710 f5				push af  
a711 3a 25 a7			ld a, (.dmark)  
a714 32 6b ee			ld (debug_mark),a  
a717 3a 26 a7			ld a, (.dmark+1)  
a71a 32 6c ee			ld (debug_mark+1),a  
a71d 3a 27 a7			ld a, (.dmark+2)  
a720 32 6d ee			ld (debug_mark+2),a  
a723 18 03			jr .pastdmark  
a725 ..			.dmark: db "UWc"  
a728 f1			.pastdmark: pop af  
a729			endm  
# End of macro DMARK
a729					CALLMONITOR 
a729 cd 6f ee			call debug_vector  
a72c				endm  
# End of macro CALLMONITOR
a72c				endif 
a72c cd 3b 9b				call forth_push_numhl 
a72f			 
a72f			 
a72f				       NEXTW 
a72f c3 e8 9e			jp macro_next 
a732				endm 
# End of macro NEXTW
a732			 
a732			.BP: 
a732				CWHEAD .MONITOR 64 "BP" 2 WORD_FLAG_CODE 
a732 54				db WORD_SYS_CORE+64             
a733 6c a7			dw .MONITOR            
a735 03				db 2 + 1 
a736 .. 00			db "BP",0              
a739				endm 
# End of macro CWHEAD
a739			; | BP ( u1 -- ) Enable or disable break point monitoring | DONE 
a739			; | | $00 Will enable the break points within specific code paths 
a739			; | | $01 Will disable break points 
a739			; | |  
a739			; | | By default break points are off. Either the above can be used to enable them 
a739			; | | or if a key is held down during start up the spashscreen will appear to freeze 
a739			; | | and on release of the pressed key a message will be disaplayed to notify 
a739			; | | that break points are enabled. Pressing any key will then continue boot process. 
a739					; get byte count 
a739					if DEBUG_FORTH_WORDS_KEY 
a739						DMARK "BP." 
a739 f5				push af  
a73a 3a 4e a7			ld a, (.dmark)  
a73d 32 6b ee			ld (debug_mark),a  
a740 3a 4f a7			ld a, (.dmark+1)  
a743 32 6c ee			ld (debug_mark+1),a  
a746 3a 50 a7			ld a, (.dmark+2)  
a749 32 6d ee			ld (debug_mark+2),a  
a74c 18 03			jr .pastdmark  
a74e ..			.dmark: db "BP."  
a751 f1			.pastdmark: pop af  
a752			endm  
# End of macro DMARK
a752						CALLMONITOR 
a752 cd 6f ee			call debug_vector  
a755				endm  
# End of macro CALLMONITOR
a755					endif 
a755			 
a755					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a755 cd 32 9d			call macro_dsp_valuehl 
a758				endm 
# End of macro FORTH_DSP_VALUEHL
a758			 
a758			;		push hl 
a758			 
a758					; destroy value TOS 
a758			 
a758					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a758 cd ea 9d			call macro_forth_dsp_pop 
a75b				endm 
# End of macro FORTH_DSP_POP
a75b			 
a75b			;		pop hl 
a75b			 
a75b 3e 00				ld a,0 
a75d bd					cp l 
a75e 28 06				jr z, .bpset 
a760			;		ld a, '*' 
a760 cd de 94				call bp_off 
a763					NEXTW 
a763 c3 e8 9e			jp macro_next 
a766				endm 
# End of macro NEXTW
a766			 
a766			.bpset:	 
a766					;	ld (os_view_disable), a 
a766 cd d2 94				call bp_on 
a769			 
a769			 
a769					NEXTW 
a769 c3 e8 9e			jp macro_next 
a76c				endm 
# End of macro NEXTW
a76c			 
a76c			 
a76c			.MONITOR: 
a76c				CWHEAD .MALLOC 65 "MONITOR" 7 WORD_FLAG_CODE 
a76c 55				db WORD_SYS_CORE+65             
a76d 9d a7			dw .MALLOC            
a76f 08				db 7 + 1 
a770 .. 00			db "MONITOR",0              
a778				endm 
# End of macro CWHEAD
a778			; | MONITOR ( -- ) Display system breakpoint/monitor | DONE 
a778			; | | At start the current various registers will be displayed with contents. 
a778			; | | Top right corner will show the most recent debug marker seen. 
a778			; | | The bottom of the screen will also show the values of the data stack pointer (DSP) 
a778			; | | and the return stack pointer (RSP). 
a778			; | | Pressing: 
a778			; | |    1 - Initial screen 
a778			; | |    2 - Display a data dump of HL 
a778			; | |    3 - Display a data dump of DE 
a778			; | |    4 - Display a data dump of BC 
a778			; | |    5 - Display a data dump of HL 
a778			; | |    6 - Display a data dump of DSP 
a778			; | |    7 - Display a data dump of RSP 
a778			; | |    8 - Display a data dump of what is at DSP 
a778			; | |    9 - Display a data dump of what is at RSP 
a778			; | |    0 - Exit monitor and continue running. This will also enable break points 
a778			; | |    * - Disable break points 
a778			; | |    # - Enter traditional monitor mode 
a778			; | | 
a778			; | | Monitor Mode 
a778			; | | ------------ 
a778			; | | A prompt of '>' will be shown for various commands: 
a778			; | |    D xxxx - Display a data dump starting from hex address xxxx 
a778			; | |    C - Continue display a data dump from the last set address 
a778			; | |    M xxxx - Set start of memory edit at address xx 
a778			; | |    U xx - Poke the hex byte xx into the address set by M and increment the address to the next location 
a778			; | |    Q - Return to previous 
a778					if DEBUG_FORTH_WORDS_KEY 
a778						DMARK "MON" 
a778 f5				push af  
a779 3a 8d a7			ld a, (.dmark)  
a77c 32 6b ee			ld (debug_mark),a  
a77f 3a 8e a7			ld a, (.dmark+1)  
a782 32 6c ee			ld (debug_mark+1),a  
a785 3a 8f a7			ld a, (.dmark+2)  
a788 32 6d ee			ld (debug_mark+2),a  
a78b 18 03			jr .pastdmark  
a78d ..			.dmark: db "MON"  
a790 f1			.pastdmark: pop af  
a791			endm  
# End of macro DMARK
a791						CALLMONITOR 
a791 cd 6f ee			call debug_vector  
a794				endm  
# End of macro CALLMONITOR
a794					endif 
a794			;		ld a, 0 
a794			;		ld (os_view_disable), a 
a794 cd d2 94				call bp_on 
a797			 
a797					CALLMONITOR 
a797 cd 6f ee			call debug_vector  
a79a				endm  
# End of macro CALLMONITOR
a79a			 
a79a			;	call monitor 
a79a			 
a79a					NEXTW 
a79a c3 e8 9e			jp macro_next 
a79d				endm 
# End of macro NEXTW
a79d			 
a79d			 
a79d			.MALLOC: 
a79d				CWHEAD .MALLOC2 66 "ALLOT" 5 WORD_FLAG_CODE 
a79d 56				db WORD_SYS_CORE+66             
a79e c6 a7			dw .MALLOC2            
a7a0 06				db 5 + 1 
a7a1 .. 00			db "ALLOT",0              
a7a7				endm 
# End of macro CWHEAD
a7a7			; | ALLOT ( u -- u ) Allocate u bytes of memory space and push the pointer TOS  | DONE 
a7a7					if DEBUG_FORTH_WORDS_KEY 
a7a7						DMARK "ALL" 
a7a7 f5				push af  
a7a8 3a bc a7			ld a, (.dmark)  
a7ab 32 6b ee			ld (debug_mark),a  
a7ae 3a bd a7			ld a, (.dmark+1)  
a7b1 32 6c ee			ld (debug_mark+1),a  
a7b4 3a be a7			ld a, (.dmark+2)  
a7b7 32 6d ee			ld (debug_mark+2),a  
a7ba 18 03			jr .pastdmark  
a7bc ..			.dmark: db "ALL"  
a7bf f1			.pastdmark: pop af  
a7c0			endm  
# End of macro DMARK
a7c0						CALLMONITOR 
a7c0 cd 6f ee			call debug_vector  
a7c3				endm  
# End of macro CALLMONITOR
a7c3					endif 
a7c3 c3 ed a7				jp .mallocc 
a7c6			.MALLOC2: 
a7c6				CWHEAD .FREE 66 "MALLOC" 6 WORD_FLAG_CODE 
a7c6 56				db WORD_SYS_CORE+66             
a7c7 04 a8			dw .FREE            
a7c9 07				db 6 + 1 
a7ca .. 00			db "MALLOC",0              
a7d1				endm 
# End of macro CWHEAD
a7d1			; | MALLOC ( u -- u ) Allocate u bytes of memory space and push the pointer TOS  | DONE 
a7d1					; get byte count 
a7d1					if DEBUG_FORTH_WORDS_KEY 
a7d1						DMARK "MAL" 
a7d1 f5				push af  
a7d2 3a e6 a7			ld a, (.dmark)  
a7d5 32 6b ee			ld (debug_mark),a  
a7d8 3a e7 a7			ld a, (.dmark+1)  
a7db 32 6c ee			ld (debug_mark+1),a  
a7de 3a e8 a7			ld a, (.dmark+2)  
a7e1 32 6d ee			ld (debug_mark+2),a  
a7e4 18 03			jr .pastdmark  
a7e6 ..			.dmark: db "MAL"  
a7e9 f1			.pastdmark: pop af  
a7ea			endm  
# End of macro DMARK
a7ea						CALLMONITOR 
a7ea cd 6f ee			call debug_vector  
a7ed				endm  
# End of macro CALLMONITOR
a7ed					endif 
a7ed			.mallocc: 
a7ed					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a7ed cd 32 9d			call macro_dsp_valuehl 
a7f0				endm 
# End of macro FORTH_DSP_VALUEHL
a7f0			 
a7f0			;		push hl 
a7f0			 
a7f0					; destroy value TOS 
a7f0			 
a7f0					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a7f0 cd ea 9d			call macro_forth_dsp_pop 
a7f3				endm 
# End of macro FORTH_DSP_POP
a7f3			 
a7f3			;		pop hl 
a7f3 cd a3 91				call malloc 
a7f6				if DEBUG_FORTH_MALLOC_GUARD 
a7f6 f5					push af 
a7f7 cd 05 8d				call ishlzero 
a7fa			;		ld a, l 
a7fa			;		add h 
a7fa			;		cp 0 
a7fa f1					pop af 
a7fb					 
a7fb cc 27 cc				call z,malloc_error 
a7fe				endif 
a7fe			 
a7fe cd 3b 9b				call forth_push_numhl 
a801					NEXTW 
a801 c3 e8 9e			jp macro_next 
a804				endm 
# End of macro NEXTW
a804			 
a804			.FREE: 
a804				CWHEAD .LIST 67 "FREE" 4 WORD_FLAG_CODE 
a804 57				db WORD_SYS_CORE+67             
a805 35 a8			dw .LIST            
a807 05				db 4 + 1 
a808 .. 00			db "FREE",0              
a80d				endm 
# End of macro CWHEAD
a80d			; | FREE ( u --  ) Free memory block from malloc given u address  | DONE 
a80d					if DEBUG_FORTH_WORDS_KEY 
a80d						DMARK "FRE" 
a80d f5				push af  
a80e 3a 22 a8			ld a, (.dmark)  
a811 32 6b ee			ld (debug_mark),a  
a814 3a 23 a8			ld a, (.dmark+1)  
a817 32 6c ee			ld (debug_mark+1),a  
a81a 3a 24 a8			ld a, (.dmark+2)  
a81d 32 6d ee			ld (debug_mark+2),a  
a820 18 03			jr .pastdmark  
a822 ..			.dmark: db "FRE"  
a825 f1			.pastdmark: pop af  
a826			endm  
# End of macro DMARK
a826						CALLMONITOR 
a826 cd 6f ee			call debug_vector  
a829				endm  
# End of macro CALLMONITOR
a829					endif 
a829					; get address 
a829			 
a829					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a829 cd 32 9d			call macro_dsp_valuehl 
a82c				endm 
# End of macro FORTH_DSP_VALUEHL
a82c			 
a82c			;		push hl 
a82c			 
a82c					; destroy value TOS 
a82c			 
a82c					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a82c cd ea 9d			call macro_forth_dsp_pop 
a82f				endm 
# End of macro FORTH_DSP_POP
a82f			 
a82f			;		pop hl 
a82f			if FORTH_ENABLE_MALLOCFREE 
a82f cd 6d 92				call free 
a832			endif 
a832					NEXTW 
a832 c3 e8 9e			jp macro_next 
a835				endm 
# End of macro NEXTW
a835			.LIST: 
a835				CWHEAD .FORGET 72 "LIST" 4 WORD_FLAG_CODE 
a835 5c				db WORD_SYS_CORE+72             
a836 23 aa			dw .FORGET            
a838 05				db 4 + 1 
a839 .. 00			db "LIST",0              
a83e				endm 
# End of macro CWHEAD
a83e			; | LIST ( uword -- u )    List the code to the word that is quoted (so as not to exec) on TOS | DONE 
a83e			; | | The quoted word must be in upper case. 
a83e				if DEBUG_FORTH_WORDS_KEY 
a83e					DMARK "LST" 
a83e f5				push af  
a83f 3a 53 a8			ld a, (.dmark)  
a842 32 6b ee			ld (debug_mark),a  
a845 3a 54 a8			ld a, (.dmark+1)  
a848 32 6c ee			ld (debug_mark+1),a  
a84b 3a 55 a8			ld a, (.dmark+2)  
a84e 32 6d ee			ld (debug_mark+2),a  
a851 18 03			jr .pastdmark  
a853 ..			.dmark: db "LST"  
a856 f1			.pastdmark: pop af  
a857			endm  
# End of macro DMARK
a857					CALLMONITOR 
a857 cd 6f ee			call debug_vector  
a85a				endm  
# End of macro CALLMONITOR
a85a				endif 
a85a			 
a85a					FORTH_DSP_VALUEHL 
a85a cd 32 9d			call macro_dsp_valuehl 
a85d				endm 
# End of macro FORTH_DSP_VALUEHL
a85d			 
a85d e5					push hl 
a85e					FORTH_DSP_POP 
a85e cd ea 9d			call macro_forth_dsp_pop 
a861				endm 
# End of macro FORTH_DSP_POP
a861 c1					pop bc 
a862			 
a862			; Start format of scratch string 
a862			 
a862 21 c1 e2				ld hl, scratch 
a865			 
a865 3e 3a				ld a, ':' 
a867 77					ld (hl),a 
a868 23					inc hl 
a869 3e 20				ld a, ' ' 
a86b 77					ld (hl), a 
a86c			 
a86c					; Get ptr to the word we need to look up 
a86c			 
a86c			;		FORTH_DSP_VALUEHL 
a86c					;v5 FORTH_DSP_VALUE 
a86c				; TODO type check 
a86c			;		inc hl    ; Skip type check  
a86c			;		push hl 
a86c			;		ex de, hl    ; put into DE 
a86c			 
a86c			 
a86c 21 2d e4				ld hl, baseram 
a86f					;ld hl, baseusermem 
a86f			 
a86f e5			push hl   ; sacreifical push 
a870			 
a870			.ldouscanm: 
a870 e1				pop hl 
a871			.ldouscan: 
a871				if DEBUG_FORTH_WORDS 
a871					DMARK "LSs" 
a871 f5				push af  
a872 3a 86 a8			ld a, (.dmark)  
a875 32 6b ee			ld (debug_mark),a  
a878 3a 87 a8			ld a, (.dmark+1)  
a87b 32 6c ee			ld (debug_mark+1),a  
a87e 3a 88 a8			ld a, (.dmark+2)  
a881 32 6d ee			ld (debug_mark+2),a  
a884 18 03			jr .pastdmark  
a886 ..			.dmark: db "LSs"  
a889 f1			.pastdmark: pop af  
a88a			endm  
# End of macro DMARK
a88a					CALLMONITOR 
a88a cd 6f ee			call debug_vector  
a88d				endm  
# End of macro CALLMONITOR
a88d				endif 
a88d				; skip dict stub 
a88d cd 39 a0				call forth_tok_next 
a890			 
a890			 
a890			; while we have words to look for 
a890			 
a890 7e				ld a, (hl)      
a891				if DEBUG_FORTH_WORDS 
a891					DMARK "LSk" 
a891 f5				push af  
a892 3a a6 a8			ld a, (.dmark)  
a895 32 6b ee			ld (debug_mark),a  
a898 3a a7 a8			ld a, (.dmark+1)  
a89b 32 6c ee			ld (debug_mark+1),a  
a89e 3a a8 a8			ld a, (.dmark+2)  
a8a1 32 6d ee			ld (debug_mark+2),a  
a8a4 18 03			jr .pastdmark  
a8a6 ..			.dmark: db "LSk"  
a8a9 f1			.pastdmark: pop af  
a8aa			endm  
# End of macro DMARK
a8aa					CALLMONITOR 
a8aa cd 6f ee			call debug_vector  
a8ad				endm  
# End of macro CALLMONITOR
a8ad				endif 
a8ad					;cp WORD_SYS_END 
a8ad					;jp z, .lunotfound 
a8ad			 
a8ad					; if we hit non uwords then gone too far 
a8ad fe 01				cp WORD_SYS_UWORD 
a8af c2 df a9				jp nz, .lunotfound 
a8b2			 
a8b2				if DEBUG_FORTH_WORDS 
a8b2					DMARK "LSu" 
a8b2 f5				push af  
a8b3 3a c7 a8			ld a, (.dmark)  
a8b6 32 6b ee			ld (debug_mark),a  
a8b9 3a c8 a8			ld a, (.dmark+1)  
a8bc 32 6c ee			ld (debug_mark+1),a  
a8bf 3a c9 a8			ld a, (.dmark+2)  
a8c2 32 6d ee			ld (debug_mark+2),a  
a8c5 18 03			jr .pastdmark  
a8c7 ..			.dmark: db "LSu"  
a8ca f1			.pastdmark: pop af  
a8cb			endm  
# End of macro DMARK
a8cb					CALLMONITOR 
a8cb cd 6f ee			call debug_vector  
a8ce				endm  
# End of macro CALLMONITOR
a8ce				endif 
a8ce			 
a8ce					; found a uword but is it the one we want... 
a8ce			 
a8ce c5					push bc     ; uword to find is on bc 
a8cf d1					pop de 
a8d0			 
a8d0 e5					push hl  ; to save the ptr 
a8d1			 
a8d1					; skip opcode 
a8d1 23					inc hl  
a8d2					; skip next ptr 
a8d2 23					inc hl  
a8d3 23					inc hl 
a8d4					; skip len 
a8d4 23					inc hl 
a8d5			 
a8d5				if DEBUG_FORTH_WORDS 
a8d5					DMARK "LSc" 
a8d5 f5				push af  
a8d6 3a ea a8			ld a, (.dmark)  
a8d9 32 6b ee			ld (debug_mark),a  
a8dc 3a eb a8			ld a, (.dmark+1)  
a8df 32 6c ee			ld (debug_mark+1),a  
a8e2 3a ec a8			ld a, (.dmark+2)  
a8e5 32 6d ee			ld (debug_mark+2),a  
a8e8 18 03			jr .pastdmark  
a8ea ..			.dmark: db "LSc"  
a8ed f1			.pastdmark: pop af  
a8ee			endm  
# End of macro DMARK
a8ee					CALLMONITOR 
a8ee cd 6f ee			call debug_vector  
a8f1				endm  
# End of macro CALLMONITOR
a8f1				endif 
a8f1 cd 72 91				call strcmp 
a8f4 c2 70 a8				jp nz, .ldouscanm 
a8f7				 
a8f7			 
a8f7			 
a8f7					; we have a uword so push its name to the stack 
a8f7			 
a8f7			;	   	push hl  ; save so we can move to next dict block 
a8f7 e1			pop hl 
a8f8			 
a8f8				if DEBUG_FORTH_WORDS 
a8f8					DMARK "LSm" 
a8f8 f5				push af  
a8f9 3a 0d a9			ld a, (.dmark)  
a8fc 32 6b ee			ld (debug_mark),a  
a8ff 3a 0e a9			ld a, (.dmark+1)  
a902 32 6c ee			ld (debug_mark+1),a  
a905 3a 0f a9			ld a, (.dmark+2)  
a908 32 6d ee			ld (debug_mark+2),a  
a90b 18 03			jr .pastdmark  
a90d ..			.dmark: db "LSm"  
a910 f1			.pastdmark: pop af  
a911			endm  
# End of macro DMARK
a911					CALLMONITOR 
a911 cd 6f ee			call debug_vector  
a914				endm  
# End of macro CALLMONITOR
a914				endif 
a914			 
a914					; skip opcode 
a914 23					inc hl  
a915					; skip next ptr 
a915 23					inc hl  
a916 23					inc hl 
a917					; skip len 
a917 7e					ld a, (hl)   ; save length to add 
a918				if DEBUG_FORTH_WORDS 
a918					DMARK "LS2" 
a918 f5				push af  
a919 3a 2d a9			ld a, (.dmark)  
a91c 32 6b ee			ld (debug_mark),a  
a91f 3a 2e a9			ld a, (.dmark+1)  
a922 32 6c ee			ld (debug_mark+1),a  
a925 3a 2f a9			ld a, (.dmark+2)  
a928 32 6d ee			ld (debug_mark+2),a  
a92b 18 03			jr .pastdmark  
a92d ..			.dmark: db "LS2"  
a930 f1			.pastdmark: pop af  
a931			endm  
# End of macro DMARK
a931					CALLMONITOR 
a931 cd 6f ee			call debug_vector  
a934				endm  
# End of macro CALLMONITOR
a934				endif 
a934			 
a934					; save this location 
a934				 
a934 e5					push hl 
a935			 
a935 23					inc hl 
a936 11 c3 e2				ld de, scratch+2 
a939 4f					ld c, a 
a93a 06 00				ld b, 0 
a93c			 
a93c				if DEBUG_FORTH_WORDS 
a93c					DMARK "LSn" 
a93c f5				push af  
a93d 3a 51 a9			ld a, (.dmark)  
a940 32 6b ee			ld (debug_mark),a  
a943 3a 52 a9			ld a, (.dmark+1)  
a946 32 6c ee			ld (debug_mark+1),a  
a949 3a 53 a9			ld a, (.dmark+2)  
a94c 32 6d ee			ld (debug_mark+2),a  
a94f 18 03			jr .pastdmark  
a951 ..			.dmark: db "LSn"  
a954 f1			.pastdmark: pop af  
a955			endm  
# End of macro DMARK
a955					CALLMONITOR 
a955 cd 6f ee			call debug_vector  
a958				endm  
# End of macro CALLMONITOR
a958				endif 
a958			 
a958					; copy uword name to scratch 
a958			 
a958 ed b0				ldir 
a95a			 
a95a 1b					dec de 
a95b 3e 20				ld a, ' '    ; change null to space 
a95d 12					ld (de), a 
a95e			 
a95e 13					inc de 
a95f			 
a95f d5					push de 
a960 c1					pop bc     ; move scratch pointer to end of word name and save it 
a961			 
a961 e1					pop hl 
a962 7e					ld a, (hl) 
a963					;inc hl 
a963					; skip word string 
a963 cd dc 8c				call addatohl 
a966			 
a966 23					inc hl 
a967			 
a967				if DEBUG_FORTH_WORDS 
a967					DMARK "LS3" 
a967 f5				push af  
a968 3a 7c a9			ld a, (.dmark)  
a96b 32 6b ee			ld (debug_mark),a  
a96e 3a 7d a9			ld a, (.dmark+1)  
a971 32 6c ee			ld (debug_mark+1),a  
a974 3a 7e a9			ld a, (.dmark+2)  
a977 32 6d ee			ld (debug_mark+2),a  
a97a 18 03			jr .pastdmark  
a97c ..			.dmark: db "LS3"  
a97f f1			.pastdmark: pop af  
a980			endm  
# End of macro DMARK
a980					CALLMONITOR 
a980 cd 6f ee			call debug_vector  
a983				endm  
# End of macro CALLMONITOR
a983				endif 
a983					; should now be at the start of the machine code to setup the eval of the uword 
a983					; now locate the ptr to the string defintion 
a983			 
a983					; skip ld hl, 
a983					; then load the ptr 
a983			; TODO use get from hl ptr 
a983 23					inc hl 
a984 5e					ld e, (hl) 
a985 23					inc hl 
a986 56					ld d, (hl) 
a987 eb					ex de, hl 
a988			 
a988			 
a988				if DEBUG_FORTH_WORDS 
a988					DMARK "LSt" 
a988 f5				push af  
a989 3a 9d a9			ld a, (.dmark)  
a98c 32 6b ee			ld (debug_mark),a  
a98f 3a 9e a9			ld a, (.dmark+1)  
a992 32 6c ee			ld (debug_mark+1),a  
a995 3a 9f a9			ld a, (.dmark+2)  
a998 32 6d ee			ld (debug_mark+2),a  
a99b 18 03			jr .pastdmark  
a99d ..			.dmark: db "LSt"  
a9a0 f1			.pastdmark: pop af  
a9a1			endm  
# End of macro DMARK
a9a1					CALLMONITOR 
a9a1 cd 6f ee			call debug_vector  
a9a4				endm  
# End of macro CALLMONITOR
a9a4				endif 
a9a4			 
a9a4			; cant push right now due to tokenised strings  
a9a4			 
a9a4			; get the destination of where to copy this definition to. 
a9a4			 
a9a4 c5					push bc 
a9a5 d1					pop de 
a9a6			 
a9a6 7e			.listl:         ld a,(hl) 
a9a7 fe 00				cp 0 
a9a9 28 09				jr z, .lreplsp     ; replace zero with space 
a9ab					;cp FORTH_END_BUFFER 
a9ab fe 3b				cp ';'    ; No end buffer flag but the ';' will be a good sign of the end of definition 
a9ad 28 0a				jr z, .listdone    ; at end of uword defination to close of scratch and finish 
a9af				 
a9af					; just copy this char as is then 
a9af			 
a9af 12					ld (de), a 
a9b0			 
a9b0 23			.listnxt:	inc hl 
a9b1 13					inc de 
a9b2 18 f2				jr .listl 
a9b4			 
a9b4 3e 20		.lreplsp:	ld a,' ' 
a9b6 12					ld (de), a 
a9b7 18 f7				jr .listnxt 
a9b9			 
a9b9			; close up uword def 
a9b9			 
a9b9			.listdone: 
a9b9 12					ld (de), a 
a9ba 13					inc de 
a9bb 3e 00				ld a, 0 
a9bd 12					ld (de), a 
a9be			 
a9be			; now have def so clean up and push to stack 
a9be			 
a9be 21 c1 e2				ld hl, scratch 
a9c1				if DEBUG_FORTH_WORDS 
a9c1					DMARK "Ltp" 
a9c1 f5				push af  
a9c2 3a d6 a9			ld a, (.dmark)  
a9c5 32 6b ee			ld (debug_mark),a  
a9c8 3a d7 a9			ld a, (.dmark+1)  
a9cb 32 6c ee			ld (debug_mark+1),a  
a9ce 3a d8 a9			ld a, (.dmark+2)  
a9d1 32 6d ee			ld (debug_mark+2),a  
a9d4 18 03			jr .pastdmark  
a9d6 ..			.dmark: db "Ltp"  
a9d9 f1			.pastdmark: pop af  
a9da			endm  
# End of macro DMARK
a9da					CALLMONITOR 
a9da cd 6f ee			call debug_vector  
a9dd				endm  
# End of macro CALLMONITOR
a9dd				endif 
a9dd			 
a9dd 18 1f			jr .listpush 
a9df			 
a9df			;.lnuword:	pop hl 
a9df			;		call forth_tok_next 
a9df			;		jp .ldouscan  
a9df			 
a9df			.lunotfound:		  
a9df			 
a9df				if DEBUG_FORTH_WORDS 
a9df					DMARK "LSn" 
a9df f5				push af  
a9e0 3a f4 a9			ld a, (.dmark)  
a9e3 32 6b ee			ld (debug_mark),a  
a9e6 3a f5 a9			ld a, (.dmark+1)  
a9e9 32 6c ee			ld (debug_mark+1),a  
a9ec 3a f6 a9			ld a, (.dmark+2)  
a9ef 32 6d ee			ld (debug_mark+2),a  
a9f2 18 03			jr .pastdmark  
a9f4 ..			.dmark: db "LSn"  
a9f7 f1			.pastdmark: pop af  
a9f8			endm  
# End of macro DMARK
a9f8					CALLMONITOR 
a9f8 cd 6f ee			call debug_vector  
a9fb				endm  
# End of macro CALLMONITOR
a9fb				endif 
a9fb			 
a9fb					 
a9fb			;		FORTH_DSP_POP 
a9fb			;		ld hl, .luno 
a9fb			 
a9fb					NEXTW			 
a9fb c3 e8 9e			jp macro_next 
a9fe				endm 
# End of macro NEXTW
a9fe			 
a9fe			.listpush: 
a9fe				if DEBUG_FORTH_WORDS 
a9fe					DMARK "LS>" 
a9fe f5				push af  
a9ff 3a 13 aa			ld a, (.dmark)  
aa02 32 6b ee			ld (debug_mark),a  
aa05 3a 14 aa			ld a, (.dmark+1)  
aa08 32 6c ee			ld (debug_mark+1),a  
aa0b 3a 15 aa			ld a, (.dmark+2)  
aa0e 32 6d ee			ld (debug_mark+2),a  
aa11 18 03			jr .pastdmark  
aa13 ..			.dmark: db "LS>"  
aa16 f1			.pastdmark: pop af  
aa17			endm  
# End of macro DMARK
aa17					CALLMONITOR 
aa17 cd 6f ee			call debug_vector  
aa1a				endm  
# End of macro CALLMONITOR
aa1a				endif 
aa1a cd a9 9b				call forth_push_str 
aa1d			 
aa1d			 
aa1d			 
aa1d					NEXTW 
aa1d c3 e8 9e			jp macro_next 
aa20				endm 
# End of macro NEXTW
aa20			 
aa20			;.luno:    db "Word not found",0 
aa20			 
aa20			 
aa20			 
aa20			 
aa20			 
aa20			;		push hl   ; save pointer to start of uword def string 
aa20			; 
aa20			;; look for FORTH_EOL_LINE 
aa20			;		ld a, FORTH_END_BUFFER 
aa20			;		call strlent 
aa20			; 
aa20			;		inc hl		 ; space for coln def 
aa20			;		inc hl 
aa20			;		inc hl          ; space for terms 
aa20			;		inc hl 
aa20			; 
aa20			;		ld a, 20   ; TODO get actual length 
aa20			;		call addatohl    ; include a random amount of room for the uword name 
aa20			; 
aa20			;		 
aa20			;	if DEBUG_FORTH_WORDS 
aa20			;		DMARK "Lt1" 
aa20			;		CALLMONITOR 
aa20			;	endif 
aa20			;		 
aa20			; 
aa20			;; malloc space for the string because we cant change it 
aa20			; 
aa20			;		call malloc 
aa20			;	if DEBUG_FORTH_MALLOC_GUARD 
aa20			;		push af 
aa20			;		call ishlzero 
aa20			;		pop af 
aa20			;		 
aa20			;		call z,malloc_error 
aa20			;	endif 
aa20			; 
aa20			;	if DEBUG_FORTH_WORDS 
aa20			;		DMARK "Lt2" 
aa20			;		CALLMONITOR 
aa20			;	endif 
aa20			;		pop de 
aa20			;		push hl    ; push the malloc to release later 
aa20			;		push hl   ;  push back a copy for the later stack push 
aa20			;		 
aa20			;; copy the string swapping out the zero terms for spaces 
aa20			; 
aa20			;		; de has our source 
aa20			;		; hl has our dest 
aa20			; 
aa20			;; add the coln def 
aa20			; 
aa20			;		ld a, ':' 
aa20			;		ld (hl), a 
aa20			;		inc hl 
aa20			;		ld a, ' ' 
aa20			;		ld (hl), a 
aa20			;		inc hl 
aa20			; 
aa20			;; add the uname word 
aa20			;		push de   ; save our string for now 
aa20			;		ex de, hl 
aa20			; 
aa20			;		FORTH_DSP_VALUE 
aa20			;		;v5 FORTH_DSP_VALUE 
aa20			; 
aa20			;		inc hl   ; skip type but we know by now this is OK 
aa20			; 
aa20			;.luword:	ld a,(hl) 
aa20			;		cp 0 
aa20			;		jr z, .luword2 
aa20			;		ld (de), a 
aa20			;		inc de 
aa20			;		inc hl 
aa20			;		jr .luword 
aa20			; 
aa20			;.luword2:	ld a, ' ' 
aa20			;		ld (de), a 
aa20			;;		inc hl 
aa20			;;		inc de 
aa20			;;		ld (de), a 
aa20			;;		inc hl 
aa20			;		inc de 
aa20			; 
aa20			;		ex de, hl 
aa20			;		pop de 
aa20			;		 
aa20			;		 
aa20			; 
aa20			;; detoken that string and copy it 
aa20			; 
aa20			;	if DEBUG_FORTH_WORDS 
aa20			;		DMARK "Lt2" 
aa20			;		CALLMONITOR 
aa20			;	endif 
aa20			;.ldetok:	ld a, (de) 
aa20			;		cp FORTH_END_BUFFER 
aa20			;		jr z, .ldetokend 
aa20			;		; swap out any zero term for space 
aa20			;		cp 0 
aa20			;		jr nz, .ldetoknext 
aa20			;		ld a, ' ' 
aa20			; 
aa20			;	if DEBUG_FORTH_WORDS 
aa20			;		DMARK "LtS" 
aa20			;		CALLMONITOR 
aa20			;	endif 
aa20			;.ldetoknext:	ld (hl), a 
aa20			;		inc de 
aa20			;		inc hl 
aa20			;		jr .ldetok 
aa20			; 
aa20			;.ldetokend:	ld a, 0    ; replace forth eol with string term for pushing 
aa20			;		ld (hl), a  
aa20			; 
aa20			;; free that temp malloc 
aa20			; 
aa20			;		pop hl    
aa20			; 
aa20			;	if DEBUG_FORTH_WORDS 
aa20			;		DMARK "Lt4" 
aa20			;		CALLMONITOR 
aa20			;	endif 
aa20			;		call forth_apushstrhl 
aa20			; 
aa20			;		; get rid of temp malloc area 
aa20			; 
aa20			;		pop hl 
aa20			;		call free 
aa20			; 
aa20			;		jr .ludone 
aa20			; 
aa20			;.lnuword:	pop hl 
aa20			;		call forth_tok_next 
aa20			;		jp .ldouscan  
aa20			; 
aa20			;.ludone:		 pop hl 
aa20			; 
aa20					NEXTW 
aa20 c3 e8 9e			jp macro_next 
aa23				endm 
# End of macro NEXTW
aa23			 
aa23			.FORGET: 
aa23				CWHEAD .NOP 73 "FORGET" 6 WORD_FLAG_CODE 
aa23 5d				db WORD_SYS_CORE+73             
aa24 9c aa			dw .NOP            
aa26 07				db 6 + 1 
aa27 .. 00			db "FORGET",0              
aa2e				endm 
# End of macro CWHEAD
aa2e			; | FORGET ( uword -- )    Forget the uword on TOS | DONE 
aa2e			; | | Will flag the word's op code to be deleted as well as replace the first char of the word with '_'. Quote uword name must be in caps. 
aa2e			; | |  
aa2e			; | | e.g. "MORE" forget 
aa2e					if DEBUG_FORTH_WORDS_KEY 
aa2e						DMARK "FRG" 
aa2e f5				push af  
aa2f 3a 43 aa			ld a, (.dmark)  
aa32 32 6b ee			ld (debug_mark),a  
aa35 3a 44 aa			ld a, (.dmark+1)  
aa38 32 6c ee			ld (debug_mark+1),a  
aa3b 3a 45 aa			ld a, (.dmark+2)  
aa3e 32 6d ee			ld (debug_mark+2),a  
aa41 18 03			jr .pastdmark  
aa43 ..			.dmark: db "FRG"  
aa46 f1			.pastdmark: pop af  
aa47			endm  
# End of macro DMARK
aa47						CALLMONITOR 
aa47 cd 6f ee			call debug_vector  
aa4a				endm  
# End of macro CALLMONITOR
aa4a					endif 
aa4a			 
aa4a				; find uword 
aa4a			        ; update start of word with "_" 
aa4a				; replace uword with deleted flag 
aa4a			 
aa4a			 
aa4a			;	if DEBUG_FORTH_WORDS 
aa4a			;		DMARK "FOG" 
aa4a			;		CALLMONITOR 
aa4a			;	endif 
aa4a			 
aa4a			 
aa4a					; Get ptr to the word we need to look up 
aa4a			 
aa4a					FORTH_DSP_VALUEHL 
aa4a cd 32 9d			call macro_dsp_valuehl 
aa4d				endm 
# End of macro FORTH_DSP_VALUEHL
aa4d					;v5 FORTH_DSP_VALUE 
aa4d				; TODO type check 
aa4d			;		inc hl    ; Skip type check  
aa4d e5					push hl 
aa4e c1					pop bc 
aa4f			;		ex de, hl    ; put into DE 
aa4f			 
aa4f			 
aa4f 21 2d e4				ld hl, baseram 
aa52					;ld hl, baseusermem 
aa52			 
aa52				; skip dict stub 
aa52			;	call forth_tok_next 
aa52 e5			push hl   ; sacreifical push 
aa53			 
aa53			.fldouscanm: 
aa53 e1				pop hl 
aa54			.fldouscan: 
aa54			;	if DEBUG_FORTH_WORDS 
aa54			;		DMARK "LSs" 
aa54			;		CALLMONITOR 
aa54			;	endif 
aa54				; skip dict stub 
aa54 cd 39 a0				call forth_tok_next 
aa57			 
aa57			 
aa57			; while we have words to look for 
aa57			 
aa57 7e				ld a, (hl)      
aa58			;	if DEBUG_FORTH_WORDS 
aa58			;		DMARK "LSk" 
aa58			;		CALLMONITOR 
aa58			;	endif 
aa58 fe 00				cp WORD_SYS_END 
aa5a ca 96 aa				jp z, .flunotfound 
aa5d fe 01				cp WORD_SYS_UWORD 
aa5f c2 54 aa				jp nz, .fldouscan 
aa62			 
aa62			;	if DEBUG_FORTH_WORDS 
aa62			;		DMARK "LSu" 
aa62			;		CALLMONITOR 
aa62			;	endif 
aa62			 
aa62					; found a uword but is it the one we want... 
aa62			 
aa62 c5					push bc     ; uword to find is on bc 
aa63 d1					pop de 
aa64			 
aa64 e5					push hl  ; to save the ptr 
aa65			 
aa65					; skip opcode 
aa65 23					inc hl  
aa66					; skip next ptr 
aa66 23					inc hl  
aa67 23					inc hl 
aa68					; skip len 
aa68 23					inc hl 
aa69			 
aa69			;	if DEBUG_FORTH_WORDS 
aa69			;		DMARK "LSc" 
aa69			;		CALLMONITOR 
aa69			;	endif 
aa69 cd 72 91				call strcmp 
aa6c c2 53 aa				jp nz, .fldouscanm 
aa6f			; 
aa6f			; 
aa6f			;; while we have words to look for 
aa6f			; 
aa6f			;.fdouscan:	ld a, (hl)      
aa6f			;	if DEBUG_FORTH_WORDS 
aa6f			;		DMARK "LSs" 
aa6f			;		CALLMONITOR 
aa6f			;	endif 
aa6f			;		cp WORD_SYS_END 
aa6f			;		jp z, .fudone 
aa6f			;		cp WORD_SYS_UWORD 
aa6f			;		jp nz, .fnuword 
aa6f			; 
aa6f			;	if DEBUG_FORTH_WORDS 
aa6f			;		DMARK "FGu" 
aa6f			;		CALLMONITOR 
aa6f			;	endif 
aa6f			; 
aa6f			;		; found a uword but is it the one we want... 
aa6f			; 
aa6f			; 
aa6f			;	        pop de   ; get back the dsp name 
aa6f			;		push de 
aa6f			; 
aa6f			;		push hl  ; to save the ptr 
aa6f			; 
aa6f			;		; skip opcode 
aa6f			;		inc hl  
aa6f			;		; skip next ptr 
aa6f			;		inc hl  
aa6f			;		inc hl 
aa6f			;		; skip len 
aa6f			;		inc hl 
aa6f			; 
aa6f			;	if DEBUG_FORTH_WORDS 
aa6f			;		DMARK "FGc" 
aa6f			;		CALLMONITOR 
aa6f			;	endif 
aa6f			;		call strcmp 
aa6f			;		jp nz, .fnuword 
aa6f			 
aa6f			 
aa6f e1			pop hl 
aa70			 
aa70				 
aa70				if DEBUG_FORTH_WORDS 
aa70					DMARK "FGm" 
aa70 f5				push af  
aa71 3a 85 aa			ld a, (.dmark)  
aa74 32 6b ee			ld (debug_mark),a  
aa77 3a 86 aa			ld a, (.dmark+1)  
aa7a 32 6c ee			ld (debug_mark+1),a  
aa7d 3a 87 aa			ld a, (.dmark+2)  
aa80 32 6d ee			ld (debug_mark+2),a  
aa83 18 03			jr .pastdmark  
aa85 ..			.dmark: db "FGm"  
aa88 f1			.pastdmark: pop af  
aa89			endm  
# End of macro DMARK
aa89					CALLMONITOR 
aa89 cd 6f ee			call debug_vector  
aa8c				endm  
# End of macro CALLMONITOR
aa8c				endif 
aa8c			 
aa8c			 
aa8c			 
aa8c					; we have a uword so push its name to the stack 
aa8c			 
aa8c			;	   	push hl  ; save so we can move to next dict block 
aa8c			;pop hl 
aa8c			 
aa8c					; update opcode to deleted 
aa8c 3e 03				ld a, WORD_SYS_DELETED 
aa8e 77					ld (hl), a 
aa8f			 
aa8f 23					inc hl  
aa90					; skip next ptr 
aa90 23					inc hl  
aa91 23					inc hl 
aa92					; skip len 
aa92 23					inc hl 
aa93			 
aa93					; TODO change parser to skip deleted words but for now mark it out 
aa93 3e 5f				ld a, "_" 
aa95 77					ld  (hl),a 
aa96			 
aa96			;		jr .fudone 
aa96			; 
aa96			;.fnuword:	pop hl 
aa96			;		call forth_tok_next 
aa96			;		jp .fdouscan  
aa96			 
aa96			.flunotfound:		  
aa96			 
aa96			 
aa96					 
aa96					FORTH_DSP_POP 
aa96 cd ea 9d			call macro_forth_dsp_pop 
aa99				endm 
# End of macro FORTH_DSP_POP
aa99			;		ld hl, .luno 
aa99			;.fudone:		 pop hl 
aa99					NEXTW 
aa99 c3 e8 9e			jp macro_next 
aa9c				endm 
# End of macro NEXTW
aa9c			.NOP: 
aa9c				CWHEAD .COMO 77 "NOP" 3 WORD_FLAG_CODE 
aa9c 61				db WORD_SYS_CORE+77             
aa9d c3 aa			dw .COMO            
aa9f 04				db 3 + 1 
aaa0 .. 00			db "NOP",0              
aaa4				endm 
# End of macro CWHEAD
aaa4			; | NOP (  --  ) Do nothing | DONE 
aaa4					if DEBUG_FORTH_WORDS_KEY 
aaa4						DMARK "NOP" 
aaa4 f5				push af  
aaa5 3a b9 aa			ld a, (.dmark)  
aaa8 32 6b ee			ld (debug_mark),a  
aaab 3a ba aa			ld a, (.dmark+1)  
aaae 32 6c ee			ld (debug_mark+1),a  
aab1 3a bb aa			ld a, (.dmark+2)  
aab4 32 6d ee			ld (debug_mark+2),a  
aab7 18 03			jr .pastdmark  
aab9 ..			.dmark: db "NOP"  
aabc f1			.pastdmark: pop af  
aabd			endm  
# End of macro DMARK
aabd						CALLMONITOR 
aabd cd 6f ee			call debug_vector  
aac0				endm  
# End of macro CALLMONITOR
aac0					endif 
aac0				       NEXTW 
aac0 c3 e8 9e			jp macro_next 
aac3				endm 
# End of macro NEXTW
aac3			.COMO: 
aac3				CWHEAD .COMC 90 "(" 1 WORD_FLAG_CODE 
aac3 6e				db WORD_SYS_CORE+90             
aac4 15 ab			dw .COMC            
aac6 02				db 1 + 1 
aac7 .. 00			db "(",0              
aac9				endm 
# End of macro CWHEAD
aac9			; | ( ( -- )  Start of comment | DONE 
aac9			 
aac9			 
aac9 2a c2 e5				ld hl, ( os_tok_ptr) 
aacc 11 10 ab			ld de, .closepar 
aacf					 
aacf					if DEBUG_FORTH_WORDS 
aacf						DMARK ").." 
aacf f5				push af  
aad0 3a e4 aa			ld a, (.dmark)  
aad3 32 6b ee			ld (debug_mark),a  
aad6 3a e5 aa			ld a, (.dmark+1)  
aad9 32 6c ee			ld (debug_mark+1),a  
aadc 3a e6 aa			ld a, (.dmark+2)  
aadf 32 6d ee			ld (debug_mark+2),a  
aae2 18 03			jr .pastdmark  
aae4 ..			.dmark: db ").."  
aae7 f1			.pastdmark: pop af  
aae8			endm  
# End of macro DMARK
aae8						CALLMONITOR 
aae8 cd 6f ee			call debug_vector  
aaeb				endm  
# End of macro CALLMONITOR
aaeb					endif 
aaeb cd 03 a0			call findnexttok  
aaee			 
aaee					if DEBUG_FORTH_WORDS 
aaee						DMARK "IF5" 
aaee f5				push af  
aaef 3a 03 ab			ld a, (.dmark)  
aaf2 32 6b ee			ld (debug_mark),a  
aaf5 3a 04 ab			ld a, (.dmark+1)  
aaf8 32 6c ee			ld (debug_mark+1),a  
aafb 3a 05 ab			ld a, (.dmark+2)  
aafe 32 6d ee			ld (debug_mark+2),a  
ab01 18 03			jr .pastdmark  
ab03 ..			.dmark: db "IF5"  
ab06 f1			.pastdmark: pop af  
ab07			endm  
# End of macro DMARK
ab07						CALLMONITOR 
ab07 cd 6f ee			call debug_vector  
ab0a				endm  
# End of macro CALLMONITOR
ab0a					endif 
ab0a				; replace below with ) exec using tok_ptr 
ab0a 22 c2 e5			ld (os_tok_ptr), hl 
ab0d c3 79 9f			jp exec1 
ab10			 
ab10 .. 00			.closepar:   db ")",0 
ab12			 
ab12				       NEXTW 
ab12 c3 e8 9e			jp macro_next 
ab15				endm 
# End of macro NEXTW
ab15			.COMC: 
ab15				CWHEAD .SCRATCH 91 ")" 1 WORD_FLAG_CODE 
ab15 6f				db WORD_SYS_CORE+91             
ab16 1e ab			dw .SCRATCH            
ab18 02				db 1 + 1 
ab19 .. 00			db ")",0              
ab1b				endm 
# End of macro CWHEAD
ab1b			; | ) ( -- )  End of comment |  DONE  
ab1b				       NEXTW 
ab1b c3 e8 9e			jp macro_next 
ab1e				endm 
# End of macro NEXTW
ab1e			 
ab1e			.SCRATCH: 
ab1e				CWHEAD .INC 91 "SCRATCH" 7 WORD_FLAG_CODE 
ab1e 6f				db WORD_SYS_CORE+91             
ab1f 59 ab			dw .INC            
ab21 08				db 7 + 1 
ab22 .. 00			db "SCRATCH",0              
ab2a				endm 
# End of macro CWHEAD
ab2a			; | SCRATCH ( u -- addr ) Pushes address of offset u to stack | DONE 
ab2a			; | | The scratch area provides 32 word array. Can be used as single byte or as a word by passing the offset on stack. Pushes the resulting address to stack.  
ab2a			; | | When used with the direct storage writing/malloc and the !@ or word versions it is possible to construct an expanded and flexible variable system 
ab2a			; | |  
ab2a			; | | e.g.    : score $00 scratch ; 
ab2a			; | |  
ab2a			; | | $00 score ! 
ab2a			; | | $01 score +! 
ab2a			; | |  
ab2a			; | | e.g.   : varword $0a scratch ;  
ab2a			; | | 
ab2a			; | | $8000 varword ! 
ab2a					if DEBUG_FORTH_WORDS_KEY 
ab2a						DMARK "SCR" 
ab2a f5				push af  
ab2b 3a 3f ab			ld a, (.dmark)  
ab2e 32 6b ee			ld (debug_mark),a  
ab31 3a 40 ab			ld a, (.dmark+1)  
ab34 32 6c ee			ld (debug_mark+1),a  
ab37 3a 41 ab			ld a, (.dmark+2)  
ab3a 32 6d ee			ld (debug_mark+2),a  
ab3d 18 03			jr .pastdmark  
ab3f ..			.dmark: db "SCR"  
ab42 f1			.pastdmark: pop af  
ab43			endm  
# End of macro DMARK
ab43						CALLMONITOR 
ab43 cd 6f ee			call debug_vector  
ab46				endm  
# End of macro CALLMONITOR
ab46					endif 
ab46			 
ab46					FORTH_DSP_VALUEHL 
ab46 cd 32 9d			call macro_dsp_valuehl 
ab49				endm 
# End of macro FORTH_DSP_VALUEHL
ab49				 
ab49					FORTH_DSP_POP 
ab49 cd ea 9d			call macro_forth_dsp_pop 
ab4c				endm 
# End of macro FORTH_DSP_POP
ab4c			 
ab4c 7d					ld a, l 
ab4d 21 e6 e7				ld hl, os_var_array 
ab50 cd dc 8c				call addatohl 
ab53			 
ab53 cd 3b 9b				call forth_push_numhl 
ab56			 
ab56				       NEXTW 
ab56 c3 e8 9e			jp macro_next 
ab59				endm 
# End of macro NEXTW
ab59			 
ab59			.INC: 
ab59				CWHEAD .DEC 91 "+!" 2 WORD_FLAG_CODE 
ab59 6f				db WORD_SYS_CORE+91             
ab5a ad ab			dw .DEC            
ab5c 03				db 2 + 1 
ab5d .. 00			db "+!",0              
ab60				endm 
# End of macro CWHEAD
ab60			; | +! ( u a -- )  Increment byte at address a by the value u | DONE 
ab60					if DEBUG_FORTH_WORDS_KEY 
ab60						DMARK "+s_" 
ab60 f5				push af  
ab61 3a 75 ab			ld a, (.dmark)  
ab64 32 6b ee			ld (debug_mark),a  
ab67 3a 76 ab			ld a, (.dmark+1)  
ab6a 32 6c ee			ld (debug_mark+1),a  
ab6d 3a 77 ab			ld a, (.dmark+2)  
ab70 32 6d ee			ld (debug_mark+2),a  
ab73 18 03			jr .pastdmark  
ab75 ..			.dmark: db "+s_"  
ab78 f1			.pastdmark: pop af  
ab79			endm  
# End of macro DMARK
ab79						CALLMONITOR 
ab79 cd 6f ee			call debug_vector  
ab7c				endm  
# End of macro CALLMONITOR
ab7c					endif 
ab7c			 
ab7c					FORTH_DSP_VALUEHL 
ab7c cd 32 9d			call macro_dsp_valuehl 
ab7f				endm 
# End of macro FORTH_DSP_VALUEHL
ab7f			 
ab7f e5					push hl   ; save address 
ab80			 
ab80					FORTH_DSP_POP 
ab80 cd ea 9d			call macro_forth_dsp_pop 
ab83				endm 
# End of macro FORTH_DSP_POP
ab83			 
ab83					FORTH_DSP_VALUEHL 
ab83 cd 32 9d			call macro_dsp_valuehl 
ab86				endm 
# End of macro FORTH_DSP_VALUEHL
ab86			 
ab86					FORTH_DSP_POP 
ab86 cd ea 9d			call macro_forth_dsp_pop 
ab89				endm 
# End of macro FORTH_DSP_POP
ab89			 
ab89					; hl contains value to add to byte at a 
ab89				 
ab89 eb					ex de, hl 
ab8a			 
ab8a e1					pop hl 
ab8b			 
ab8b					if DEBUG_FORTH_WORDS 
ab8b						DMARK "INC" 
ab8b f5				push af  
ab8c 3a a0 ab			ld a, (.dmark)  
ab8f 32 6b ee			ld (debug_mark),a  
ab92 3a a1 ab			ld a, (.dmark+1)  
ab95 32 6c ee			ld (debug_mark+1),a  
ab98 3a a2 ab			ld a, (.dmark+2)  
ab9b 32 6d ee			ld (debug_mark+2),a  
ab9e 18 03			jr .pastdmark  
aba0 ..			.dmark: db "INC"  
aba3 f1			.pastdmark: pop af  
aba4			endm  
# End of macro DMARK
aba4						CALLMONITOR 
aba4 cd 6f ee			call debug_vector  
aba7				endm  
# End of macro CALLMONITOR
aba7					endif 
aba7			 
aba7 7e					ld a,(hl) 
aba8 83					add e 
aba9 77					ld (hl),a 
abaa			 
abaa			 
abaa			 
abaa				       NEXTW 
abaa c3 e8 9e			jp macro_next 
abad				endm 
# End of macro NEXTW
abad			 
abad			.DEC: 
abad				CWHEAD .INC2 91 "-!" 2 WORD_FLAG_CODE 
abad 6f				db WORD_SYS_CORE+91             
abae fe ab			dw .INC2            
abb0 03				db 2 + 1 
abb1 .. 00			db "-!",0              
abb4				endm 
# End of macro CWHEAD
abb4			; | -! ( u a -- )  Decrement byte at address a by the value u | DONE 
abb4					if DEBUG_FORTH_WORDS_KEY 
abb4						DMARK "-s_" 
abb4 f5				push af  
abb5 3a c9 ab			ld a, (.dmark)  
abb8 32 6b ee			ld (debug_mark),a  
abbb 3a ca ab			ld a, (.dmark+1)  
abbe 32 6c ee			ld (debug_mark+1),a  
abc1 3a cb ab			ld a, (.dmark+2)  
abc4 32 6d ee			ld (debug_mark+2),a  
abc7 18 03			jr .pastdmark  
abc9 ..			.dmark: db "-s_"  
abcc f1			.pastdmark: pop af  
abcd			endm  
# End of macro DMARK
abcd						CALLMONITOR 
abcd cd 6f ee			call debug_vector  
abd0				endm  
# End of macro CALLMONITOR
abd0					endif 
abd0			 
abd0					FORTH_DSP_VALUEHL 
abd0 cd 32 9d			call macro_dsp_valuehl 
abd3				endm 
# End of macro FORTH_DSP_VALUEHL
abd3			 
abd3 e5					push hl   ; save address 
abd4			 
abd4					FORTH_DSP_POP 
abd4 cd ea 9d			call macro_forth_dsp_pop 
abd7				endm 
# End of macro FORTH_DSP_POP
abd7			 
abd7					FORTH_DSP_VALUEHL 
abd7 cd 32 9d			call macro_dsp_valuehl 
abda				endm 
# End of macro FORTH_DSP_VALUEHL
abda			 
abda					; hl contains value to add to byte at a 
abda				 
abda eb					ex de, hl 
abdb			 
abdb e1					pop hl 
abdc			 
abdc					if DEBUG_FORTH_WORDS 
abdc						DMARK "DEC" 
abdc f5				push af  
abdd 3a f1 ab			ld a, (.dmark)  
abe0 32 6b ee			ld (debug_mark),a  
abe3 3a f2 ab			ld a, (.dmark+1)  
abe6 32 6c ee			ld (debug_mark+1),a  
abe9 3a f3 ab			ld a, (.dmark+2)  
abec 32 6d ee			ld (debug_mark+2),a  
abef 18 03			jr .pastdmark  
abf1 ..			.dmark: db "DEC"  
abf4 f1			.pastdmark: pop af  
abf5			endm  
# End of macro DMARK
abf5						CALLMONITOR 
abf5 cd 6f ee			call debug_vector  
abf8				endm  
# End of macro CALLMONITOR
abf8					endif 
abf8			 
abf8 7e					ld a,(hl) 
abf9 93					sub e 
abfa 77					ld (hl),a 
abfb			 
abfb			 
abfb			 
abfb				       NEXTW 
abfb c3 e8 9e			jp macro_next 
abfe				endm 
# End of macro NEXTW
abfe			 
abfe			.INC2: 
abfe				CWHEAD .DEC2 91 "+2!" 3 WORD_FLAG_CODE 
abfe 6f				db WORD_SYS_CORE+91             
abff a8 ac			dw .DEC2            
ac01 04				db 3 + 1 
ac02 .. 00			db "+2!",0              
ac06				endm 
# End of macro CWHEAD
ac06			; | +2! ( u a -- )  Increment word at address a by the value u | DONE 
ac06			 
ac06					if DEBUG_FORTH_WORDS_KEY 
ac06						DMARK "+2s" 
ac06 f5				push af  
ac07 3a 1b ac			ld a, (.dmark)  
ac0a 32 6b ee			ld (debug_mark),a  
ac0d 3a 1c ac			ld a, (.dmark+1)  
ac10 32 6c ee			ld (debug_mark+1),a  
ac13 3a 1d ac			ld a, (.dmark+2)  
ac16 32 6d ee			ld (debug_mark+2),a  
ac19 18 03			jr .pastdmark  
ac1b ..			.dmark: db "+2s"  
ac1e f1			.pastdmark: pop af  
ac1f			endm  
# End of macro DMARK
ac1f						CALLMONITOR 
ac1f cd 6f ee			call debug_vector  
ac22				endm  
# End of macro CALLMONITOR
ac22					endif 
ac22			 
ac22					; Address 
ac22			 
ac22					FORTH_DSP_VALUEHL 
ac22 cd 32 9d			call macro_dsp_valuehl 
ac25				endm 
# End of macro FORTH_DSP_VALUEHL
ac25			 
ac25 e5					push hl    ; save address 
ac26			 
ac26					; load content into de 
ac26			 
ac26 5e					ld e,(hl) 
ac27 23					inc hl 
ac28 56					ld d, (hl) 
ac29			 
ac29					if DEBUG_FORTH_WORDS 
ac29						DMARK "+2a" 
ac29 f5				push af  
ac2a 3a 3e ac			ld a, (.dmark)  
ac2d 32 6b ee			ld (debug_mark),a  
ac30 3a 3f ac			ld a, (.dmark+1)  
ac33 32 6c ee			ld (debug_mark+1),a  
ac36 3a 40 ac			ld a, (.dmark+2)  
ac39 32 6d ee			ld (debug_mark+2),a  
ac3c 18 03			jr .pastdmark  
ac3e ..			.dmark: db "+2a"  
ac41 f1			.pastdmark: pop af  
ac42			endm  
# End of macro DMARK
ac42						CALLMONITOR 
ac42 cd 6f ee			call debug_vector  
ac45				endm  
# End of macro CALLMONITOR
ac45					endif 
ac45			 
ac45					FORTH_DSP_POP 
ac45 cd ea 9d			call macro_forth_dsp_pop 
ac48				endm 
# End of macro FORTH_DSP_POP
ac48			 
ac48					; Get value to add 
ac48			 
ac48					FORTH_DSP_VALUE 
ac48 cd 1b 9d			call macro_forth_dsp_value 
ac4b				endm 
# End of macro FORTH_DSP_VALUE
ac4b			 
ac4b					if DEBUG_FORTH_WORDS 
ac4b						DMARK "+2v" 
ac4b f5				push af  
ac4c 3a 60 ac			ld a, (.dmark)  
ac4f 32 6b ee			ld (debug_mark),a  
ac52 3a 61 ac			ld a, (.dmark+1)  
ac55 32 6c ee			ld (debug_mark+1),a  
ac58 3a 62 ac			ld a, (.dmark+2)  
ac5b 32 6d ee			ld (debug_mark+2),a  
ac5e 18 03			jr .pastdmark  
ac60 ..			.dmark: db "+2v"  
ac63 f1			.pastdmark: pop af  
ac64			endm  
# End of macro DMARK
ac64						CALLMONITOR 
ac64 cd 6f ee			call debug_vector  
ac67				endm  
# End of macro CALLMONITOR
ac67					endif 
ac67			 
ac67 19					add hl, de 
ac68			 
ac68					if DEBUG_FORTH_WORDS 
ac68						DMARK "+2+" 
ac68 f5				push af  
ac69 3a 7d ac			ld a, (.dmark)  
ac6c 32 6b ee			ld (debug_mark),a  
ac6f 3a 7e ac			ld a, (.dmark+1)  
ac72 32 6c ee			ld (debug_mark+1),a  
ac75 3a 7f ac			ld a, (.dmark+2)  
ac78 32 6d ee			ld (debug_mark+2),a  
ac7b 18 03			jr .pastdmark  
ac7d ..			.dmark: db "+2+"  
ac80 f1			.pastdmark: pop af  
ac81			endm  
# End of macro DMARK
ac81						CALLMONITOR 
ac81 cd 6f ee			call debug_vector  
ac84				endm  
# End of macro CALLMONITOR
ac84					endif 
ac84			 
ac84					; move result to de 
ac84			 
ac84 eb					ex de, hl 
ac85			 
ac85					; Address 
ac85			 
ac85 e1					pop hl 
ac86			 
ac86					; save it back 
ac86			 
ac86 73					ld (hl), e 
ac87 23					inc hl 
ac88 72					ld (hl), d 
ac89			 
ac89					if DEBUG_FORTH_WORDS 
ac89						DMARK "+2e" 
ac89 f5				push af  
ac8a 3a 9e ac			ld a, (.dmark)  
ac8d 32 6b ee			ld (debug_mark),a  
ac90 3a 9f ac			ld a, (.dmark+1)  
ac93 32 6c ee			ld (debug_mark+1),a  
ac96 3a a0 ac			ld a, (.dmark+2)  
ac99 32 6d ee			ld (debug_mark+2),a  
ac9c 18 03			jr .pastdmark  
ac9e ..			.dmark: db "+2e"  
aca1 f1			.pastdmark: pop af  
aca2			endm  
# End of macro DMARK
aca2						CALLMONITOR 
aca2 cd 6f ee			call debug_vector  
aca5				endm  
# End of macro CALLMONITOR
aca5					endif 
aca5			 
aca5			 
aca5			 
aca5			 
aca5			 
aca5				       NEXTW 
aca5 c3 e8 9e			jp macro_next 
aca8				endm 
# End of macro NEXTW
aca8			 
aca8			.DEC2: 
aca8				CWHEAD .GET2 91 "-2!" 3 WORD_FLAG_CODE 
aca8 6f				db WORD_SYS_CORE+91             
aca9 54 ad			dw .GET2            
acab 04				db 3 + 1 
acac .. 00			db "-2!",0              
acb0				endm 
# End of macro CWHEAD
acb0			; | -2! ( u a -- )  Decrement word at address a by the value u | DONE 
acb0			 
acb0			 
acb0					if DEBUG_FORTH_WORDS_KEY 
acb0						DMARK "-2s" 
acb0 f5				push af  
acb1 3a c5 ac			ld a, (.dmark)  
acb4 32 6b ee			ld (debug_mark),a  
acb7 3a c6 ac			ld a, (.dmark+1)  
acba 32 6c ee			ld (debug_mark+1),a  
acbd 3a c7 ac			ld a, (.dmark+2)  
acc0 32 6d ee			ld (debug_mark+2),a  
acc3 18 03			jr .pastdmark  
acc5 ..			.dmark: db "-2s"  
acc8 f1			.pastdmark: pop af  
acc9			endm  
# End of macro DMARK
acc9						CALLMONITOR 
acc9 cd 6f ee			call debug_vector  
accc				endm  
# End of macro CALLMONITOR
accc					endif 
accc			 
accc					; Address 
accc			 
accc					FORTH_DSP_VALUEHL 
accc cd 32 9d			call macro_dsp_valuehl 
accf				endm 
# End of macro FORTH_DSP_VALUEHL
accf			 
accf e5					push hl    ; save address 
acd0			 
acd0					; load content into de 
acd0			 
acd0 5e					ld e,(hl) 
acd1 23					inc hl 
acd2 56					ld d, (hl) 
acd3			 
acd3					if DEBUG_FORTH_WORDS 
acd3						DMARK "-2a" 
acd3 f5				push af  
acd4 3a e8 ac			ld a, (.dmark)  
acd7 32 6b ee			ld (debug_mark),a  
acda 3a e9 ac			ld a, (.dmark+1)  
acdd 32 6c ee			ld (debug_mark+1),a  
ace0 3a ea ac			ld a, (.dmark+2)  
ace3 32 6d ee			ld (debug_mark+2),a  
ace6 18 03			jr .pastdmark  
ace8 ..			.dmark: db "-2a"  
aceb f1			.pastdmark: pop af  
acec			endm  
# End of macro DMARK
acec						CALLMONITOR 
acec cd 6f ee			call debug_vector  
acef				endm  
# End of macro CALLMONITOR
acef					endif 
acef			 
acef					FORTH_DSP_POP 
acef cd ea 9d			call macro_forth_dsp_pop 
acf2				endm 
# End of macro FORTH_DSP_POP
acf2			 
acf2					; Get value to remove 
acf2			 
acf2					FORTH_DSP_VALUE 
acf2 cd 1b 9d			call macro_forth_dsp_value 
acf5				endm 
# End of macro FORTH_DSP_VALUE
acf5			 
acf5					if DEBUG_FORTH_WORDS 
acf5						DMARK "-2v" 
acf5 f5				push af  
acf6 3a 0a ad			ld a, (.dmark)  
acf9 32 6b ee			ld (debug_mark),a  
acfc 3a 0b ad			ld a, (.dmark+1)  
acff 32 6c ee			ld (debug_mark+1),a  
ad02 3a 0c ad			ld a, (.dmark+2)  
ad05 32 6d ee			ld (debug_mark+2),a  
ad08 18 03			jr .pastdmark  
ad0a ..			.dmark: db "-2v"  
ad0d f1			.pastdmark: pop af  
ad0e			endm  
# End of macro DMARK
ad0e						CALLMONITOR 
ad0e cd 6f ee			call debug_vector  
ad11				endm  
# End of macro CALLMONITOR
ad11					endif 
ad11			 
ad11 eb					ex de, hl 
ad12 ed 52				sbc hl, de 
ad14			 
ad14					if DEBUG_FORTH_WORDS 
ad14						DMARK "-2d" 
ad14 f5				push af  
ad15 3a 29 ad			ld a, (.dmark)  
ad18 32 6b ee			ld (debug_mark),a  
ad1b 3a 2a ad			ld a, (.dmark+1)  
ad1e 32 6c ee			ld (debug_mark+1),a  
ad21 3a 2b ad			ld a, (.dmark+2)  
ad24 32 6d ee			ld (debug_mark+2),a  
ad27 18 03			jr .pastdmark  
ad29 ..			.dmark: db "-2d"  
ad2c f1			.pastdmark: pop af  
ad2d			endm  
# End of macro DMARK
ad2d						CALLMONITOR 
ad2d cd 6f ee			call debug_vector  
ad30				endm  
# End of macro CALLMONITOR
ad30					endif 
ad30			 
ad30					; move result to de 
ad30			 
ad30 eb					ex de, hl 
ad31			 
ad31					; Address 
ad31			 
ad31 e1					pop hl 
ad32			 
ad32					; save it back 
ad32			 
ad32 73					ld (hl), e 
ad33 23					inc hl 
ad34 72					ld (hl), d 
ad35			 
ad35					if DEBUG_FORTH_WORDS 
ad35						DMARK "-2e" 
ad35 f5				push af  
ad36 3a 4a ad			ld a, (.dmark)  
ad39 32 6b ee			ld (debug_mark),a  
ad3c 3a 4b ad			ld a, (.dmark+1)  
ad3f 32 6c ee			ld (debug_mark+1),a  
ad42 3a 4c ad			ld a, (.dmark+2)  
ad45 32 6d ee			ld (debug_mark+2),a  
ad48 18 03			jr .pastdmark  
ad4a ..			.dmark: db "-2e"  
ad4d f1			.pastdmark: pop af  
ad4e			endm  
# End of macro DMARK
ad4e						CALLMONITOR 
ad4e cd 6f ee			call debug_vector  
ad51				endm  
# End of macro CALLMONITOR
ad51					endif 
ad51			 
ad51			 
ad51			 
ad51			 
ad51			 
ad51				       NEXTW 
ad51 c3 e8 9e			jp macro_next 
ad54				endm 
# End of macro NEXTW
ad54			.GET2: 
ad54				CWHEAD .BANG2 91 "2@" 2 WORD_FLAG_CODE 
ad54 6f				db WORD_SYS_CORE+91             
ad55 84 ad			dw .BANG2            
ad57 03				db 2 + 1 
ad58 .. 00			db "2@",0              
ad5b				endm 
# End of macro CWHEAD
ad5b			; | 2@ ( a -- u )  Push word at address a onto stack | DONE 
ad5b					if DEBUG_FORTH_WORDS_KEY 
ad5b						DMARK "2A_" 
ad5b f5				push af  
ad5c 3a 70 ad			ld a, (.dmark)  
ad5f 32 6b ee			ld (debug_mark),a  
ad62 3a 71 ad			ld a, (.dmark+1)  
ad65 32 6c ee			ld (debug_mark+1),a  
ad68 3a 72 ad			ld a, (.dmark+2)  
ad6b 32 6d ee			ld (debug_mark+2),a  
ad6e 18 03			jr .pastdmark  
ad70 ..			.dmark: db "2A_"  
ad73 f1			.pastdmark: pop af  
ad74			endm  
# End of macro DMARK
ad74						CALLMONITOR 
ad74 cd 6f ee			call debug_vector  
ad77				endm  
# End of macro CALLMONITOR
ad77					endif 
ad77			 
ad77					FORTH_DSP_VALUEHL 
ad77 cd 32 9d			call macro_dsp_valuehl 
ad7a				endm 
# End of macro FORTH_DSP_VALUEHL
ad7a			 
ad7a 5e					ld e, (hl) 
ad7b 23					inc hl 
ad7c 56					ld d, (hl) 
ad7d			 
ad7d eb					ex de, hl 
ad7e			 
ad7e cd 3b 9b				call forth_push_numhl 
ad81			 
ad81				       NEXTW 
ad81 c3 e8 9e			jp macro_next 
ad84				endm 
# End of macro NEXTW
ad84			.BANG2: 
ad84				CWHEAD .CONFIG 91 "2!" 2 WORD_FLAG_CODE 
ad84 6f				db WORD_SYS_CORE+91             
ad85 bc ad			dw .CONFIG            
ad87 03				db 2 + 1 
ad88 .. 00			db "2!",0              
ad8b				endm 
# End of macro CWHEAD
ad8b			; | 2! ( u a -- )  Store value u as a word at address a | DONE 
ad8b					if DEBUG_FORTH_WORDS_KEY 
ad8b						DMARK "2S_" 
ad8b f5				push af  
ad8c 3a a0 ad			ld a, (.dmark)  
ad8f 32 6b ee			ld (debug_mark),a  
ad92 3a a1 ad			ld a, (.dmark+1)  
ad95 32 6c ee			ld (debug_mark+1),a  
ad98 3a a2 ad			ld a, (.dmark+2)  
ad9b 32 6d ee			ld (debug_mark+2),a  
ad9e 18 03			jr .pastdmark  
ada0 ..			.dmark: db "2S_"  
ada3 f1			.pastdmark: pop af  
ada4			endm  
# End of macro DMARK
ada4						CALLMONITOR 
ada4 cd 6f ee			call debug_vector  
ada7				endm  
# End of macro CALLMONITOR
ada7					endif 
ada7			 
ada7					FORTH_DSP_VALUEHL 
ada7 cd 32 9d			call macro_dsp_valuehl 
adaa				endm 
# End of macro FORTH_DSP_VALUEHL
adaa			 
adaa e5					push hl   ; save address 
adab			 
adab			 
adab					FORTH_DSP_POP 
adab cd ea 9d			call macro_forth_dsp_pop 
adae				endm 
# End of macro FORTH_DSP_POP
adae			 
adae					 
adae					FORTH_DSP_VALUEHL 
adae cd 32 9d			call macro_dsp_valuehl 
adb1				endm 
# End of macro FORTH_DSP_VALUEHL
adb1			 
adb1					FORTH_DSP_POP 
adb1 cd ea 9d			call macro_forth_dsp_pop 
adb4				endm 
# End of macro FORTH_DSP_POP
adb4			 
adb4 eb					ex de, hl    ; value now in de 
adb5			 
adb5 e1					pop hl 
adb6			 
adb6 73					ld (hl), e 
adb7			 
adb7 23					inc hl 
adb8			 
adb8 72					ld (hl), d 
adb9			 
adb9			 
adb9				       NEXTW 
adb9 c3 e8 9e			jp macro_next 
adbc				endm 
# End of macro NEXTW
adbc			.CONFIG: 
adbc				CWHEAD .ADTOS 91 "CONFIG" 6 WORD_FLAG_CODE 
adbc 6f				db WORD_SYS_CORE+91             
adbd cd ad			dw .ADTOS            
adbf 07				db 6 + 1 
adc0 .. 00			db "CONFIG",0              
adc7				endm 
# End of macro CWHEAD
adc7			; | CONFIG ( -- )  Access the system configuration menu. Set boot from file, hardware diags, and more! | DONE 
adc7			 
adc7 cd 3c 93				call config 
adca					NEXTW 
adca c3 e8 9e			jp macro_next 
adcd				endm 
# End of macro NEXTW
adcd			 
adcd			.ADTOS: 
adcd				CWHEAD .SBTOS 91 "1+" 2 WORD_FLAG_CODE 
adcd 6f				db WORD_SYS_CORE+91             
adce e3 ad			dw .SBTOS            
add0 03				db 2 + 1 
add1 .. 00			db "1+",0              
add4				endm 
# End of macro CWHEAD
add4			; | 1+ ( u -- u )  Increment value on TOS | DONE 
add4			 
add4					FORTH_DSP_VALUEHL 
add4 cd 32 9d			call macro_dsp_valuehl 
add7				endm 
# End of macro FORTH_DSP_VALUEHL
add7 e5					push hl 
add8			 
add8					FORTH_DSP_POP 
add8 cd ea 9d			call macro_forth_dsp_pop 
addb				endm 
# End of macro FORTH_DSP_POP
addb e1					pop hl 
addc			 
addc 23					inc hl 
addd cd 3b 9b				call forth_push_numhl 
ade0					 
ade0					NEXTW 
ade0 c3 e8 9e			jp macro_next 
ade3				endm 
# End of macro NEXTW
ade3			.SBTOS: 
ade3				CWHEAD .ADSTORE 91 "1-" 2 WORD_FLAG_CODE 
ade3 6f				db WORD_SYS_CORE+91             
ade4 f9 ad			dw .ADSTORE            
ade6 03				db 2 + 1 
ade7 .. 00			db "1-",0              
adea				endm 
# End of macro CWHEAD
adea			; | 1- ( u -- u )  Decrement value on TOS | DONE 
adea			 
adea					FORTH_DSP_VALUEHL 
adea cd 32 9d			call macro_dsp_valuehl 
aded				endm 
# End of macro FORTH_DSP_VALUEHL
aded e5					push hl 
adee			 
adee					FORTH_DSP_POP 
adee cd ea 9d			call macro_forth_dsp_pop 
adf1				endm 
# End of macro FORTH_DSP_POP
adf1 e1					pop hl 
adf2			 
adf2 2b					dec hl 
adf3 cd 3b 9b				call forth_push_numhl 
adf6					 
adf6					NEXTW 
adf6 c3 e8 9e			jp macro_next 
adf9				endm 
# End of macro NEXTW
adf9			.ADSTORE: 
adf9				CWHEAD .ADWSTORE 91 "1+!" 3 WORD_FLAG_CODE 
adf9 6f				db WORD_SYS_CORE+91             
adfa 0f ae			dw .ADWSTORE            
adfc 04				db 3 + 1 
adfd .. 00			db "1+!",0              
ae01				endm 
# End of macro CWHEAD
ae01			; | 1+! ( addr -- )  Increment byte at address addr | DONE 
ae01			 
ae01					FORTH_DSP_VALUEHL 
ae01 cd 32 9d			call macro_dsp_valuehl 
ae04				endm 
# End of macro FORTH_DSP_VALUEHL
ae04 e5					push hl 
ae05			 
ae05					FORTH_DSP_POP 
ae05 cd ea 9d			call macro_forth_dsp_pop 
ae08				endm 
# End of macro FORTH_DSP_POP
ae08 e1					pop hl 
ae09			 
ae09 7e					ld a, (hl) 
ae0a 3c					inc a 
ae0b 77					ld (hl), a 
ae0c					 
ae0c					NEXTW 
ae0c c3 e8 9e			jp macro_next 
ae0f				endm 
# End of macro NEXTW
ae0f			.ADWSTORE: 
ae0f				CWHEAD .ENDCORE 91 "1+2!" 4 WORD_FLAG_CODE 
ae0f 6f				db WORD_SYS_CORE+91             
ae10 2d ae			dw .ENDCORE            
ae12 05				db 4 + 1 
ae13 .. 00			db "1+2!",0              
ae18				endm 
# End of macro CWHEAD
ae18			; | 1+2! ( addr -- )  Increment word at address addr | DONE 
ae18			 
ae18					FORTH_DSP_VALUEHL 
ae18 cd 32 9d			call macro_dsp_valuehl 
ae1b				endm 
# End of macro FORTH_DSP_VALUEHL
ae1b e5					push hl 
ae1c			 
ae1c					FORTH_DSP_POP 
ae1c cd ea 9d			call macro_forth_dsp_pop 
ae1f				endm 
# End of macro FORTH_DSP_POP
ae1f e1					pop hl 
ae20			 
ae20 e5					push hl 
ae21			 
ae21 cd 6a 9e				call loadwordinhl 
ae24 23					inc hl 
ae25			 
ae25 d1					pop de 
ae26 eb					ex de, hl 
ae27 73					ld (hl), e 
ae28 23					inc hl 
ae29 72					ld (hl), d 
ae2a					 
ae2a					NEXTW 
ae2a c3 e8 9e			jp macro_next 
ae2d				endm 
# End of macro NEXTW
ae2d			.ENDCORE: 
ae2d			 
ae2d			; eof 
ae2d			 
ae2d			 
# End of file forth_words_core.asm
ae2d			include "forth_words_flow.asm" 
ae2d			 
ae2d			; | ## Program Flow Words 
ae2d			 
ae2d			.IF: 
ae2d				CWHEAD .THEN 10 "IF" 2 WORD_FLAG_CODE 
ae2d 1e				db WORD_SYS_CORE+10             
ae2e 22 af			dw .THEN            
ae30 03				db 2 + 1 
ae31 .. 00			db "IF",0              
ae34				endm 
# End of macro CWHEAD
ae34			; | IF ( w -- f ) If TOS is true exec code following up to THEN - Note: currently not supporting ELSE or nested IF | DONE 
ae34			; 
ae34					if DEBUG_FORTH_WORDS_KEY 
ae34						DMARK "IF." 
ae34 f5				push af  
ae35 3a 49 ae			ld a, (.dmark)  
ae38 32 6b ee			ld (debug_mark),a  
ae3b 3a 4a ae			ld a, (.dmark+1)  
ae3e 32 6c ee			ld (debug_mark+1),a  
ae41 3a 4b ae			ld a, (.dmark+2)  
ae44 32 6d ee			ld (debug_mark+2),a  
ae47 18 03			jr .pastdmark  
ae49 ..			.dmark: db "IF."  
ae4c f1			.pastdmark: pop af  
ae4d			endm  
# End of macro DMARK
ae4d						CALLMONITOR 
ae4d cd 6f ee			call debug_vector  
ae50				endm  
# End of macro CALLMONITOR
ae50					endif 
ae50			; eval TOS 
ae50			 
ae50				FORTH_DSP_VALUEHL 
ae50 cd 32 9d			call macro_dsp_valuehl 
ae53				endm 
# End of macro FORTH_DSP_VALUEHL
ae53			 
ae53			;	push hl 
ae53				FORTH_DSP_POP 
ae53 cd ea 9d			call macro_forth_dsp_pop 
ae56				endm 
# End of macro FORTH_DSP_POP
ae56			;	pop hl 
ae56			 
ae56					if DEBUG_FORTH_WORDS 
ae56						DMARK "IF1" 
ae56 f5				push af  
ae57 3a 6b ae			ld a, (.dmark)  
ae5a 32 6b ee			ld (debug_mark),a  
ae5d 3a 6c ae			ld a, (.dmark+1)  
ae60 32 6c ee			ld (debug_mark+1),a  
ae63 3a 6d ae			ld a, (.dmark+2)  
ae66 32 6d ee			ld (debug_mark+2),a  
ae69 18 03			jr .pastdmark  
ae6b ..			.dmark: db "IF1"  
ae6e f1			.pastdmark: pop af  
ae6f			endm  
# End of macro DMARK
ae6f						CALLMONITOR 
ae6f cd 6f ee			call debug_vector  
ae72				endm  
# End of macro CALLMONITOR
ae72					endif 
ae72 b7				or a        ; clear carry flag 
ae73 11 00 00			ld de, 0 
ae76 eb				ex de,hl 
ae77 ed 52			sbc hl, de 
ae79 c2 03 af			jp nz, .iftrue 
ae7c			 
ae7c					if DEBUG_FORTH_WORDS 
ae7c						DMARK "IF2" 
ae7c f5				push af  
ae7d 3a 91 ae			ld a, (.dmark)  
ae80 32 6b ee			ld (debug_mark),a  
ae83 3a 92 ae			ld a, (.dmark+1)  
ae86 32 6c ee			ld (debug_mark+1),a  
ae89 3a 93 ae			ld a, (.dmark+2)  
ae8c 32 6d ee			ld (debug_mark+2),a  
ae8f 18 03			jr .pastdmark  
ae91 ..			.dmark: db "IF2"  
ae94 f1			.pastdmark: pop af  
ae95			endm  
# End of macro DMARK
ae95						CALLMONITOR 
ae95 cd 6f ee			call debug_vector  
ae98				endm  
# End of macro CALLMONITOR
ae98					endif 
ae98			 
ae98			; if not true then skip to THEN 
ae98			 
ae98				; TODO get tok_ptr 
ae98				; TODO consume toks until we get to THEN 
ae98			 
ae98 2a c2 e5			ld hl, (os_tok_ptr) 
ae9b					if DEBUG_FORTH_WORDS 
ae9b						DMARK "IF3" 
ae9b f5				push af  
ae9c 3a b0 ae			ld a, (.dmark)  
ae9f 32 6b ee			ld (debug_mark),a  
aea2 3a b1 ae			ld a, (.dmark+1)  
aea5 32 6c ee			ld (debug_mark+1),a  
aea8 3a b2 ae			ld a, (.dmark+2)  
aeab 32 6d ee			ld (debug_mark+2),a  
aeae 18 03			jr .pastdmark  
aeb0 ..			.dmark: db "IF3"  
aeb3 f1			.pastdmark: pop af  
aeb4			endm  
# End of macro DMARK
aeb4						CALLMONITOR 
aeb4 cd 6f ee			call debug_vector  
aeb7				endm  
# End of macro CALLMONITOR
aeb7						 
aeb7					endif 
aeb7 11 fe ae			ld de, .ifthen 
aeba					if DEBUG_FORTH_WORDS 
aeba						DMARK "IF4" 
aeba f5				push af  
aebb 3a cf ae			ld a, (.dmark)  
aebe 32 6b ee			ld (debug_mark),a  
aec1 3a d0 ae			ld a, (.dmark+1)  
aec4 32 6c ee			ld (debug_mark+1),a  
aec7 3a d1 ae			ld a, (.dmark+2)  
aeca 32 6d ee			ld (debug_mark+2),a  
aecd 18 03			jr .pastdmark  
aecf ..			.dmark: db "IF4"  
aed2 f1			.pastdmark: pop af  
aed3			endm  
# End of macro DMARK
aed3						CALLMONITOR 
aed3 cd 6f ee			call debug_vector  
aed6				endm  
# End of macro CALLMONITOR
aed6					endif 
aed6 cd 03 a0			call findnexttok  
aed9			 
aed9					if DEBUG_FORTH_WORDS 
aed9						DMARK "IF5" 
aed9 f5				push af  
aeda 3a ee ae			ld a, (.dmark)  
aedd 32 6b ee			ld (debug_mark),a  
aee0 3a ef ae			ld a, (.dmark+1)  
aee3 32 6c ee			ld (debug_mark+1),a  
aee6 3a f0 ae			ld a, (.dmark+2)  
aee9 32 6d ee			ld (debug_mark+2),a  
aeec 18 03			jr .pastdmark  
aeee ..			.dmark: db "IF5"  
aef1 f1			.pastdmark: pop af  
aef2			endm  
# End of macro DMARK
aef2						CALLMONITOR 
aef2 cd 6f ee			call debug_vector  
aef5				endm  
# End of macro CALLMONITOR
aef5					endif 
aef5				; TODO replace below with ; exec using tok_ptr 
aef5 22 c2 e5			ld (os_tok_ptr), hl 
aef8 c3 79 9f			jp exec1 
aefb				NEXTW 
aefb c3 e8 9e			jp macro_next 
aefe				endm 
# End of macro NEXTW
aefe			 
aefe .. 00		.ifthen:  db "THEN",0 
af03			 
af03			.iftrue:		 
af03				; Exec next words normally 
af03			 
af03				; if true then exec following IF as normal 
af03					if DEBUG_FORTH_WORDS 
af03						DMARK "IFT" 
af03 f5				push af  
af04 3a 18 af			ld a, (.dmark)  
af07 32 6b ee			ld (debug_mark),a  
af0a 3a 19 af			ld a, (.dmark+1)  
af0d 32 6c ee			ld (debug_mark+1),a  
af10 3a 1a af			ld a, (.dmark+2)  
af13 32 6d ee			ld (debug_mark+2),a  
af16 18 03			jr .pastdmark  
af18 ..			.dmark: db "IFT"  
af1b f1			.pastdmark: pop af  
af1c			endm  
# End of macro DMARK
af1c						CALLMONITOR 
af1c cd 6f ee			call debug_vector  
af1f				endm  
# End of macro CALLMONITOR
af1f					endif 
af1f			 
af1f					NEXTW 
af1f c3 e8 9e			jp macro_next 
af22				endm 
# End of macro NEXTW
af22			.THEN: 
af22				CWHEAD .ELSE 11 "THEN" 4 WORD_FLAG_CODE 
af22 1f				db WORD_SYS_CORE+11             
af23 4a af			dw .ELSE            
af25 05				db 4 + 1 
af26 .. 00			db "THEN",0              
af2b				endm 
# End of macro CWHEAD
af2b			; | THEN ( -- ) Does nothing. It is a marker for the end of an IF block | DONE 
af2b					if DEBUG_FORTH_WORDS_KEY 
af2b						DMARK "THN" 
af2b f5				push af  
af2c 3a 40 af			ld a, (.dmark)  
af2f 32 6b ee			ld (debug_mark),a  
af32 3a 41 af			ld a, (.dmark+1)  
af35 32 6c ee			ld (debug_mark+1),a  
af38 3a 42 af			ld a, (.dmark+2)  
af3b 32 6d ee			ld (debug_mark+2),a  
af3e 18 03			jr .pastdmark  
af40 ..			.dmark: db "THN"  
af43 f1			.pastdmark: pop af  
af44			endm  
# End of macro DMARK
af44						CALLMONITOR 
af44 cd 6f ee			call debug_vector  
af47				endm  
# End of macro CALLMONITOR
af47					endif 
af47					NEXTW 
af47 c3 e8 9e			jp macro_next 
af4a				endm 
# End of macro NEXTW
af4a			.ELSE: 
af4a				CWHEAD .DO 12 "ELSE" 2 WORD_FLAG_CODE 
af4a 20				db WORD_SYS_CORE+12             
af4b 72 af			dw .DO            
af4d 03				db 2 + 1 
af4e .. 00			db "ELSE",0              
af53				endm 
# End of macro CWHEAD
af53			; | ELSE ( -- ) Not supported - does nothing | TODO 
af53			 
af53					if DEBUG_FORTH_WORDS_KEY 
af53						DMARK "ELS" 
af53 f5				push af  
af54 3a 68 af			ld a, (.dmark)  
af57 32 6b ee			ld (debug_mark),a  
af5a 3a 69 af			ld a, (.dmark+1)  
af5d 32 6c ee			ld (debug_mark+1),a  
af60 3a 6a af			ld a, (.dmark+2)  
af63 32 6d ee			ld (debug_mark+2),a  
af66 18 03			jr .pastdmark  
af68 ..			.dmark: db "ELS"  
af6b f1			.pastdmark: pop af  
af6c			endm  
# End of macro DMARK
af6c						CALLMONITOR 
af6c cd 6f ee			call debug_vector  
af6f				endm  
# End of macro CALLMONITOR
af6f					endif 
af6f			 
af6f			 
af6f					NEXTW 
af6f c3 e8 9e			jp macro_next 
af72				endm 
# End of macro NEXTW
af72			.DO: 
af72				CWHEAD .LOOP 13 "DO" 2 WORD_FLAG_CODE 
af72 21				db WORD_SYS_CORE+13             
af73 99 b0			dw .LOOP            
af75 03				db 2 + 1 
af76 .. 00			db "DO",0              
af79				endm 
# End of macro CWHEAD
af79			; | DO ( u1 u2 -- ) Loop starting at u2 with a limit of u1 | DONE 
af79			 
af79					if DEBUG_FORTH_WORDS_KEY 
af79						DMARK "DO." 
af79 f5				push af  
af7a 3a 8e af			ld a, (.dmark)  
af7d 32 6b ee			ld (debug_mark),a  
af80 3a 8f af			ld a, (.dmark+1)  
af83 32 6c ee			ld (debug_mark+1),a  
af86 3a 90 af			ld a, (.dmark+2)  
af89 32 6d ee			ld (debug_mark+2),a  
af8c 18 03			jr .pastdmark  
af8e ..			.dmark: db "DO."  
af91 f1			.pastdmark: pop af  
af92			endm  
# End of macro DMARK
af92						CALLMONITOR 
af92 cd 6f ee			call debug_vector  
af95				endm  
# End of macro CALLMONITOR
af95					endif 
af95			;  push pc to rsp stack past the DO 
af95			 
af95 2a c2 e5				ld hl, (os_tok_ptr) 
af98 23					inc hl   ; D 
af99 23					inc hl  ; O 
af9a 23					inc hl   ; null 
af9b					if DEBUG_FORTH_WORDS 
af9b						DMARK "DO2" 
af9b f5				push af  
af9c 3a b0 af			ld a, (.dmark)  
af9f 32 6b ee			ld (debug_mark),a  
afa2 3a b1 af			ld a, (.dmark+1)  
afa5 32 6c ee			ld (debug_mark+1),a  
afa8 3a b2 af			ld a, (.dmark+2)  
afab 32 6d ee			ld (debug_mark+2),a  
afae 18 03			jr .pastdmark  
afb0 ..			.dmark: db "DO2"  
afb3 f1			.pastdmark: pop af  
afb4			endm  
# End of macro DMARK
afb4						CALLMONITOR 
afb4 cd 6f ee			call debug_vector  
afb7				endm  
# End of macro CALLMONITOR
afb7					endif 
afb7					FORTH_RSP_NEXT 
afb7 cd e2 9a			call macro_forth_rsp_next 
afba				endm 
# End of macro FORTH_RSP_NEXT
afba					if DEBUG_FORTH_WORDS 
afba						DMARK "DO3" 
afba f5				push af  
afbb 3a cf af			ld a, (.dmark)  
afbe 32 6b ee			ld (debug_mark),a  
afc1 3a d0 af			ld a, (.dmark+1)  
afc4 32 6c ee			ld (debug_mark+1),a  
afc7 3a d1 af			ld a, (.dmark+2)  
afca 32 6d ee			ld (debug_mark+2),a  
afcd 18 03			jr .pastdmark  
afcf ..			.dmark: db "DO3"  
afd2 f1			.pastdmark: pop af  
afd3			endm  
# End of macro DMARK
afd3						CALLMONITOR 
afd3 cd 6f ee			call debug_vector  
afd6				endm  
# End of macro CALLMONITOR
afd6					endif 
afd6			 
afd6					;if DEBUG_FORTH_WORDS 
afd6				;		push hl 
afd6			;		endif  
afd6			 
afd6			; get counters from data stack 
afd6			 
afd6			 
afd6					FORTH_DSP_VALUEHL 
afd6 cd 32 9d			call macro_dsp_valuehl 
afd9				endm 
# End of macro FORTH_DSP_VALUEHL
afd9 e5					push hl		 ; hl now has starting counter which needs to be tos 
afda			 
afda					if DEBUG_FORTH_WORDS 
afda						DMARK "DO4" 
afda f5				push af  
afdb 3a ef af			ld a, (.dmark)  
afde 32 6b ee			ld (debug_mark),a  
afe1 3a f0 af			ld a, (.dmark+1)  
afe4 32 6c ee			ld (debug_mark+1),a  
afe7 3a f1 af			ld a, (.dmark+2)  
afea 32 6d ee			ld (debug_mark+2),a  
afed 18 03			jr .pastdmark  
afef ..			.dmark: db "DO4"  
aff2 f1			.pastdmark: pop af  
aff3			endm  
# End of macro DMARK
aff3						CALLMONITOR 
aff3 cd 6f ee			call debug_vector  
aff6				endm  
# End of macro CALLMONITOR
aff6					endif 
aff6					FORTH_DSP_POP 
aff6 cd ea 9d			call macro_forth_dsp_pop 
aff9				endm 
# End of macro FORTH_DSP_POP
aff9			 
aff9					if DEBUG_FORTH_WORDS 
aff9						DMARK "DO5" 
aff9 f5				push af  
affa 3a 0e b0			ld a, (.dmark)  
affd 32 6b ee			ld (debug_mark),a  
b000 3a 0f b0			ld a, (.dmark+1)  
b003 32 6c ee			ld (debug_mark+1),a  
b006 3a 10 b0			ld a, (.dmark+2)  
b009 32 6d ee			ld (debug_mark+2),a  
b00c 18 03			jr .pastdmark  
b00e ..			.dmark: db "DO5"  
b011 f1			.pastdmark: pop af  
b012			endm  
# End of macro DMARK
b012						CALLMONITOR 
b012 cd 6f ee			call debug_vector  
b015				endm  
# End of macro CALLMONITOR
b015					endif 
b015			 
b015					FORTH_DSP_VALUEHL 
b015 cd 32 9d			call macro_dsp_valuehl 
b018				endm 
# End of macro FORTH_DSP_VALUEHL
b018			;		push hl		 ; hl now has starting limit counter 
b018			 
b018					if DEBUG_FORTH_WORDS 
b018						DMARK "DO6" 
b018 f5				push af  
b019 3a 2d b0			ld a, (.dmark)  
b01c 32 6b ee			ld (debug_mark),a  
b01f 3a 2e b0			ld a, (.dmark+1)  
b022 32 6c ee			ld (debug_mark+1),a  
b025 3a 2f b0			ld a, (.dmark+2)  
b028 32 6d ee			ld (debug_mark+2),a  
b02b 18 03			jr .pastdmark  
b02d ..			.dmark: db "DO6"  
b030 f1			.pastdmark: pop af  
b031			endm  
# End of macro DMARK
b031						CALLMONITOR 
b031 cd 6f ee			call debug_vector  
b034				endm  
# End of macro CALLMONITOR
b034					endif 
b034					FORTH_DSP_POP 
b034 cd ea 9d			call macro_forth_dsp_pop 
b037				endm 
# End of macro FORTH_DSP_POP
b037			 
b037			; put counters on the loop stack 
b037			 
b037			;		pop hl			 ; limit counter 
b037 d1					pop de			; start counter 
b038			 
b038					; push limit counter 
b038			 
b038					if DEBUG_FORTH_WORDS 
b038						DMARK "DO7" 
b038 f5				push af  
b039 3a 4d b0			ld a, (.dmark)  
b03c 32 6b ee			ld (debug_mark),a  
b03f 3a 4e b0			ld a, (.dmark+1)  
b042 32 6c ee			ld (debug_mark+1),a  
b045 3a 4f b0			ld a, (.dmark+2)  
b048 32 6d ee			ld (debug_mark+2),a  
b04b 18 03			jr .pastdmark  
b04d ..			.dmark: db "DO7"  
b050 f1			.pastdmark: pop af  
b051			endm  
# End of macro DMARK
b051						CALLMONITOR 
b051 cd 6f ee			call debug_vector  
b054				endm  
# End of macro CALLMONITOR
b054					endif 
b054					FORTH_LOOP_NEXT 
b054 cd 63 9d			call macro_forth_loop_next 
b057				endm 
# End of macro FORTH_LOOP_NEXT
b057			 
b057					; push start counter 
b057			 
b057 eb					ex de, hl 
b058					if DEBUG_FORTH_WORDS 
b058						DMARK "DO7" 
b058 f5				push af  
b059 3a 6d b0			ld a, (.dmark)  
b05c 32 6b ee			ld (debug_mark),a  
b05f 3a 6e b0			ld a, (.dmark+1)  
b062 32 6c ee			ld (debug_mark+1),a  
b065 3a 6f b0			ld a, (.dmark+2)  
b068 32 6d ee			ld (debug_mark+2),a  
b06b 18 03			jr .pastdmark  
b06d ..			.dmark: db "DO7"  
b070 f1			.pastdmark: pop af  
b071			endm  
# End of macro DMARK
b071						CALLMONITOR 
b071 cd 6f ee			call debug_vector  
b074				endm  
# End of macro CALLMONITOR
b074					endif 
b074					FORTH_LOOP_NEXT 
b074 cd 63 9d			call macro_forth_loop_next 
b077				endm 
# End of macro FORTH_LOOP_NEXT
b077			 
b077			 
b077					; init first round of I counter 
b077			 
b077 22 e6 e5				ld (os_current_i), hl 
b07a			 
b07a					if DEBUG_FORTH_WORDS 
b07a						DMARK "DO8" 
b07a f5				push af  
b07b 3a 8f b0			ld a, (.dmark)  
b07e 32 6b ee			ld (debug_mark),a  
b081 3a 90 b0			ld a, (.dmark+1)  
b084 32 6c ee			ld (debug_mark+1),a  
b087 3a 91 b0			ld a, (.dmark+2)  
b08a 32 6d ee			ld (debug_mark+2),a  
b08d 18 03			jr .pastdmark  
b08f ..			.dmark: db "DO8"  
b092 f1			.pastdmark: pop af  
b093			endm  
# End of macro DMARK
b093						CALLMONITOR 
b093 cd 6f ee			call debug_vector  
b096				endm  
# End of macro CALLMONITOR
b096					endif 
b096			 
b096					NEXTW 
b096 c3 e8 9e			jp macro_next 
b099				endm 
# End of macro NEXTW
b099			.LOOP: 
b099				CWHEAD .I 14 "LOOP" 4 WORD_FLAG_CODE 
b099 22				db WORD_SYS_CORE+14             
b09a b1 b1			dw .I            
b09c 05				db 4 + 1 
b09d .. 00			db "LOOP",0              
b0a2				endm 
# End of macro CWHEAD
b0a2			; | LOOP ( -- ) Increment and test loop counter  | DONE 
b0a2			 
b0a2				; pop tos as current loop count to hl 
b0a2			 
b0a2				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
b0a2			 
b0a2				FORTH_LOOP_TOS 
b0a2 cd 96 9d			call macro_forth_loop_tos 
b0a5				endm 
# End of macro FORTH_LOOP_TOS
b0a5 e5				push hl 
b0a6			 
b0a6					if DEBUG_FORTH_WORDS_KEY 
b0a6						DMARK "LOP" 
b0a6 f5				push af  
b0a7 3a bb b0			ld a, (.dmark)  
b0aa 32 6b ee			ld (debug_mark),a  
b0ad 3a bc b0			ld a, (.dmark+1)  
b0b0 32 6c ee			ld (debug_mark+1),a  
b0b3 3a bd b0			ld a, (.dmark+2)  
b0b6 32 6d ee			ld (debug_mark+2),a  
b0b9 18 03			jr .pastdmark  
b0bb ..			.dmark: db "LOP"  
b0be f1			.pastdmark: pop af  
b0bf			endm  
# End of macro DMARK
b0bf						CALLMONITOR 
b0bf cd 6f ee			call debug_vector  
b0c2				endm  
# End of macro CALLMONITOR
b0c2					endif 
b0c2				; next item on the stack is the limit. get it 
b0c2			 
b0c2			 
b0c2				FORTH_LOOP_POP 
b0c2 cd a0 9d			call macro_forth_loop_pop 
b0c5				endm 
# End of macro FORTH_LOOP_POP
b0c5			 
b0c5				FORTH_LOOP_TOS 
b0c5 cd 96 9d			call macro_forth_loop_tos 
b0c8				endm 
# End of macro FORTH_LOOP_TOS
b0c8			 
b0c8 d1				pop de		 ; de = i, hl = limit 
b0c9			 
b0c9					if DEBUG_FORTH_WORDS 
b0c9						DMARK "LP1" 
b0c9 f5				push af  
b0ca 3a de b0			ld a, (.dmark)  
b0cd 32 6b ee			ld (debug_mark),a  
b0d0 3a df b0			ld a, (.dmark+1)  
b0d3 32 6c ee			ld (debug_mark+1),a  
b0d6 3a e0 b0			ld a, (.dmark+2)  
b0d9 32 6d ee			ld (debug_mark+2),a  
b0dc 18 03			jr .pastdmark  
b0de ..			.dmark: db "LP1"  
b0e1 f1			.pastdmark: pop af  
b0e2			endm  
# End of macro DMARK
b0e2						CALLMONITOR 
b0e2 cd 6f ee			call debug_vector  
b0e5				endm  
# End of macro CALLMONITOR
b0e5					endif 
b0e5			 
b0e5				; go back to previous word 
b0e5			 
b0e5 d5				push de    ; save I for inc later 
b0e6			 
b0e6			 
b0e6				; get limit 
b0e6				;  is I at limit? 
b0e6			 
b0e6			 
b0e6					if DEBUG_FORTH_WORDS 
b0e6						DMARK "LP1" 
b0e6 f5				push af  
b0e7 3a fb b0			ld a, (.dmark)  
b0ea 32 6b ee			ld (debug_mark),a  
b0ed 3a fc b0			ld a, (.dmark+1)  
b0f0 32 6c ee			ld (debug_mark+1),a  
b0f3 3a fd b0			ld a, (.dmark+2)  
b0f6 32 6d ee			ld (debug_mark+2),a  
b0f9 18 03			jr .pastdmark  
b0fb ..			.dmark: db "LP1"  
b0fe f1			.pastdmark: pop af  
b0ff			endm  
# End of macro DMARK
b0ff						CALLMONITOR 
b0ff cd 6f ee			call debug_vector  
b102				endm  
# End of macro CALLMONITOR
b102					endif 
b102			 
b102 ed 52			sbc hl, de 
b104			 
b104			 
b104				;  if at limit pop both limit and current off stack do NEXT and get rid of saved DO 
b104			 
b104 20 26				jr nz, .loopnotdone 
b106			 
b106 e1				pop hl   ; get rid of saved I 
b107				FORTH_LOOP_POP     ; get rid of limit 
b107 cd a0 9d			call macro_forth_loop_pop 
b10a				endm 
# End of macro FORTH_LOOP_POP
b10a			 
b10a				FORTH_RSP_POP     ; get rid of DO ptr 
b10a cd 03 9b			call macro_forth_rsp_pop 
b10d				endm 
# End of macro FORTH_RSP_POP
b10d			 
b10d			if DEBUG_FORTH_WORDS 
b10d						DMARK "LP>" 
b10d f5				push af  
b10e 3a 22 b1			ld a, (.dmark)  
b111 32 6b ee			ld (debug_mark),a  
b114 3a 23 b1			ld a, (.dmark+1)  
b117 32 6c ee			ld (debug_mark+1),a  
b11a 3a 24 b1			ld a, (.dmark+2)  
b11d 32 6d ee			ld (debug_mark+2),a  
b120 18 03			jr .pastdmark  
b122 ..			.dmark: db "LP>"  
b125 f1			.pastdmark: pop af  
b126			endm  
# End of macro DMARK
b126				CALLMONITOR 
b126 cd 6f ee			call debug_vector  
b129				endm  
# End of macro CALLMONITOR
b129			endif 
b129			 
b129					NEXTW 
b129 c3 e8 9e			jp macro_next 
b12c				endm 
# End of macro NEXTW
b12c				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
b12c			 
b12c			.loopnotdone: 
b12c			 
b12c e1				pop hl    ; get I 
b12d 23				inc hl 
b12e			 
b12e			   	; save new I 
b12e			 
b12e			 
b12e					; set I counter 
b12e			 
b12e 22 e6 e5				ld (os_current_i), hl 
b131			 
b131					if DEBUG_FORTH_WORDS 
b131						DMARK "LPN" 
b131 f5				push af  
b132 3a 46 b1			ld a, (.dmark)  
b135 32 6b ee			ld (debug_mark),a  
b138 3a 47 b1			ld a, (.dmark+1)  
b13b 32 6c ee			ld (debug_mark+1),a  
b13e 3a 48 b1			ld a, (.dmark+2)  
b141 32 6d ee			ld (debug_mark+2),a  
b144 18 03			jr .pastdmark  
b146 ..			.dmark: db "LPN"  
b149 f1			.pastdmark: pop af  
b14a			endm  
# End of macro DMARK
b14a					CALLMONITOR 
b14a cd 6f ee			call debug_vector  
b14d				endm  
# End of macro CALLMONITOR
b14d					endif 
b14d					 
b14d				FORTH_LOOP_NEXT 
b14d cd 63 9d			call macro_forth_loop_next 
b150				endm 
# End of macro FORTH_LOOP_NEXT
b150			 
b150			 
b150					if DEBUG_FORTH_WORDS 
b150 eb						ex de,hl 
b151					endif 
b151			 
b151			;	; get DO ptr 
b151			; 
b151					if DEBUG_FORTH_WORDS 
b151						DMARK "LP7" 
b151 f5				push af  
b152 3a 66 b1			ld a, (.dmark)  
b155 32 6b ee			ld (debug_mark),a  
b158 3a 67 b1			ld a, (.dmark+1)  
b15b 32 6c ee			ld (debug_mark+1),a  
b15e 3a 68 b1			ld a, (.dmark+2)  
b161 32 6d ee			ld (debug_mark+2),a  
b164 18 03			jr .pastdmark  
b166 ..			.dmark: db "LP7"  
b169 f1			.pastdmark: pop af  
b16a			endm  
# End of macro DMARK
b16a					CALLMONITOR 
b16a cd 6f ee			call debug_vector  
b16d				endm  
# End of macro CALLMONITOR
b16d					endif 
b16d				FORTH_RSP_TOS 
b16d cd f9 9a			call macro_forth_rsp_tos 
b170				endm 
# End of macro FORTH_RSP_TOS
b170			 
b170					if DEBUG_FORTH_WORDS 
b170						DMARK "LP8" 
b170 f5				push af  
b171 3a 85 b1			ld a, (.dmark)  
b174 32 6b ee			ld (debug_mark),a  
b177 3a 86 b1			ld a, (.dmark+1)  
b17a 32 6c ee			ld (debug_mark+1),a  
b17d 3a 87 b1			ld a, (.dmark+2)  
b180 32 6d ee			ld (debug_mark+2),a  
b183 18 03			jr .pastdmark  
b185 ..			.dmark: db "LP8"  
b188 f1			.pastdmark: pop af  
b189			endm  
# End of macro DMARK
b189					CALLMONITOR 
b189 cd 6f ee			call debug_vector  
b18c				endm  
# End of macro CALLMONITOR
b18c					endif 
b18c				;push hl 
b18c			 
b18c				; not going to DO any more 
b18c				; get rid of the RSP pointer as DO will add it back in 
b18c				;FORTH_RSP_POP 
b18c				;pop hl 
b18c			 
b18c				;ld hl,(cli_ret_sp) 
b18c				;ld e, (hl) 
b18c				;inc hl 
b18c				;ld d, (hl) 
b18c				;ex de,hl 
b18c 22 c2 e5			ld (os_tok_ptr), hl 
b18f					if DEBUG_FORTH_WORDS 
b18f						DMARK "LP<" 
b18f f5				push af  
b190 3a a4 b1			ld a, (.dmark)  
b193 32 6b ee			ld (debug_mark),a  
b196 3a a5 b1			ld a, (.dmark+1)  
b199 32 6c ee			ld (debug_mark+1),a  
b19c 3a a6 b1			ld a, (.dmark+2)  
b19f 32 6d ee			ld (debug_mark+2),a  
b1a2 18 03			jr .pastdmark  
b1a4 ..			.dmark: db "LP<"  
b1a7 f1			.pastdmark: pop af  
b1a8			endm  
# End of macro DMARK
b1a8					CALLMONITOR 
b1a8 cd 6f ee			call debug_vector  
b1ab				endm  
# End of macro CALLMONITOR
b1ab				endif 
b1ab c3 79 9f			jp exec1 
b1ae			 
b1ae					 
b1ae			 
b1ae			 
b1ae					NEXTW 
b1ae c3 e8 9e			jp macro_next 
b1b1				endm 
# End of macro NEXTW
b1b1			.I:  
b1b1			 
b1b1				CWHEAD .DLOOP 74 "I" 1 WORD_FLAG_CODE 
b1b1 5e				db WORD_SYS_CORE+74             
b1b2 dc b1			dw .DLOOP            
b1b4 02				db 1 + 1 
b1b5 .. 00			db "I",0              
b1b7				endm 
# End of macro CWHEAD
b1b7			; | I ( -- ) Current loop counter | DONE 
b1b7					if DEBUG_FORTH_WORDS_KEY 
b1b7						DMARK "I.." 
b1b7 f5				push af  
b1b8 3a cc b1			ld a, (.dmark)  
b1bb 32 6b ee			ld (debug_mark),a  
b1be 3a cd b1			ld a, (.dmark+1)  
b1c1 32 6c ee			ld (debug_mark+1),a  
b1c4 3a ce b1			ld a, (.dmark+2)  
b1c7 32 6d ee			ld (debug_mark+2),a  
b1ca 18 03			jr .pastdmark  
b1cc ..			.dmark: db "I.."  
b1cf f1			.pastdmark: pop af  
b1d0			endm  
# End of macro DMARK
b1d0						CALLMONITOR 
b1d0 cd 6f ee			call debug_vector  
b1d3				endm  
# End of macro CALLMONITOR
b1d3					endif 
b1d3			 
b1d3 2a e6 e5				ld hl,(os_current_i) 
b1d6 cd 3b 9b				call forth_push_numhl 
b1d9			 
b1d9					NEXTW 
b1d9 c3 e8 9e			jp macro_next 
b1dc				endm 
# End of macro NEXTW
b1dc			.DLOOP: 
b1dc				CWHEAD .REPEAT 75 "-LOOP" 5 WORD_FLAG_CODE 
b1dc 5f				db WORD_SYS_CORE+75             
b1dd bd b2			dw .REPEAT            
b1df 06				db 5 + 1 
b1e0 .. 00			db "-LOOP",0              
b1e6				endm 
# End of macro CWHEAD
b1e6			; | -LOOP ( -- ) Decrement and test loop counter  | DONE 
b1e6				; pop tos as current loop count to hl 
b1e6					if DEBUG_FORTH_WORDS_KEY 
b1e6						DMARK "-LP" 
b1e6 f5				push af  
b1e7 3a fb b1			ld a, (.dmark)  
b1ea 32 6b ee			ld (debug_mark),a  
b1ed 3a fc b1			ld a, (.dmark+1)  
b1f0 32 6c ee			ld (debug_mark+1),a  
b1f3 3a fd b1			ld a, (.dmark+2)  
b1f6 32 6d ee			ld (debug_mark+2),a  
b1f9 18 03			jr .pastdmark  
b1fb ..			.dmark: db "-LP"  
b1fe f1			.pastdmark: pop af  
b1ff			endm  
# End of macro DMARK
b1ff						CALLMONITOR 
b1ff cd 6f ee			call debug_vector  
b202				endm  
# End of macro CALLMONITOR
b202					endif 
b202			 
b202				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
b202			 
b202				FORTH_LOOP_TOS 
b202 cd 96 9d			call macro_forth_loop_tos 
b205				endm 
# End of macro FORTH_LOOP_TOS
b205 e5				push hl 
b206			 
b206					if DEBUG_FORTH_WORDS 
b206						DMARK "-LP" 
b206 f5				push af  
b207 3a 1b b2			ld a, (.dmark)  
b20a 32 6b ee			ld (debug_mark),a  
b20d 3a 1c b2			ld a, (.dmark+1)  
b210 32 6c ee			ld (debug_mark+1),a  
b213 3a 1d b2			ld a, (.dmark+2)  
b216 32 6d ee			ld (debug_mark+2),a  
b219 18 03			jr .pastdmark  
b21b ..			.dmark: db "-LP"  
b21e f1			.pastdmark: pop af  
b21f			endm  
# End of macro DMARK
b21f						CALLMONITOR 
b21f cd 6f ee			call debug_vector  
b222				endm  
# End of macro CALLMONITOR
b222					endif 
b222				; next item on the stack is the limit. get it 
b222			 
b222			 
b222				FORTH_LOOP_POP 
b222 cd a0 9d			call macro_forth_loop_pop 
b225				endm 
# End of macro FORTH_LOOP_POP
b225			 
b225				FORTH_LOOP_TOS 
b225 cd 96 9d			call macro_forth_loop_tos 
b228				endm 
# End of macro FORTH_LOOP_TOS
b228			 
b228 d1				pop de		 ; de = i, hl = limit 
b229			 
b229					if DEBUG_FORTH_WORDS 
b229						DMARK "-L1" 
b229 f5				push af  
b22a 3a 3e b2			ld a, (.dmark)  
b22d 32 6b ee			ld (debug_mark),a  
b230 3a 3f b2			ld a, (.dmark+1)  
b233 32 6c ee			ld (debug_mark+1),a  
b236 3a 40 b2			ld a, (.dmark+2)  
b239 32 6d ee			ld (debug_mark+2),a  
b23c 18 03			jr .pastdmark  
b23e ..			.dmark: db "-L1"  
b241 f1			.pastdmark: pop af  
b242			endm  
# End of macro DMARK
b242						CALLMONITOR 
b242 cd 6f ee			call debug_vector  
b245				endm  
# End of macro CALLMONITOR
b245					endif 
b245			 
b245				; go back to previous word 
b245			 
b245 d5				push de    ; save I for inc later 
b246			 
b246			 
b246				; get limit 
b246				;  is I at limit? 
b246			 
b246			 
b246					if DEBUG_FORTH_WORDS 
b246						DMARK "-L1" 
b246 f5				push af  
b247 3a 5b b2			ld a, (.dmark)  
b24a 32 6b ee			ld (debug_mark),a  
b24d 3a 5c b2			ld a, (.dmark+1)  
b250 32 6c ee			ld (debug_mark+1),a  
b253 3a 5d b2			ld a, (.dmark+2)  
b256 32 6d ee			ld (debug_mark+2),a  
b259 18 03			jr .pastdmark  
b25b ..			.dmark: db "-L1"  
b25e f1			.pastdmark: pop af  
b25f			endm  
# End of macro DMARK
b25f						CALLMONITOR 
b25f cd 6f ee			call debug_vector  
b262				endm  
# End of macro CALLMONITOR
b262					endif 
b262			 
b262 ed 52			sbc hl, de 
b264			 
b264			 
b264				;  if at limit pop both limit and current off stack do NEXT and get rid of saved DO 
b264			 
b264 20 26				jr nz, .mloopnotdone 
b266			 
b266 e1				pop hl   ; get rid of saved I 
b267				FORTH_LOOP_POP     ; get rid of limit 
b267 cd a0 9d			call macro_forth_loop_pop 
b26a				endm 
# End of macro FORTH_LOOP_POP
b26a			 
b26a				FORTH_RSP_POP     ; get rid of DO ptr 
b26a cd 03 9b			call macro_forth_rsp_pop 
b26d				endm 
# End of macro FORTH_RSP_POP
b26d			 
b26d			if DEBUG_FORTH_WORDS 
b26d						DMARK "-L>" 
b26d f5				push af  
b26e 3a 82 b2			ld a, (.dmark)  
b271 32 6b ee			ld (debug_mark),a  
b274 3a 83 b2			ld a, (.dmark+1)  
b277 32 6c ee			ld (debug_mark+1),a  
b27a 3a 84 b2			ld a, (.dmark+2)  
b27d 32 6d ee			ld (debug_mark+2),a  
b280 18 03			jr .pastdmark  
b282 ..			.dmark: db "-L>"  
b285 f1			.pastdmark: pop af  
b286			endm  
# End of macro DMARK
b286				CALLMONITOR 
b286 cd 6f ee			call debug_vector  
b289				endm  
# End of macro CALLMONITOR
b289			endif 
b289			 
b289					NEXTW 
b289 c3 e8 9e			jp macro_next 
b28c				endm 
# End of macro NEXTW
b28c				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
b28c			 
b28c			.mloopnotdone: 
b28c			 
b28c e1				pop hl    ; get I 
b28d 2b				dec hl 
b28e			 
b28e			   	; save new I 
b28e			 
b28e			 
b28e					; set I counter 
b28e			 
b28e 22 e6 e5				ld (os_current_i), hl 
b291			 
b291					 
b291				FORTH_LOOP_NEXT 
b291 cd 63 9d			call macro_forth_loop_next 
b294				endm 
# End of macro FORTH_LOOP_NEXT
b294			 
b294			 
b294					if DEBUG_FORTH_WORDS 
b294 eb						ex de,hl 
b295					endif 
b295			 
b295			;	; get DO ptr 
b295			; 
b295				FORTH_RSP_TOS 
b295 cd f9 9a			call macro_forth_rsp_tos 
b298				endm 
# End of macro FORTH_RSP_TOS
b298			 
b298				;push hl 
b298			 
b298				; not going to DO any more 
b298				; get rid of the RSP pointer as DO will add it back in 
b298				;FORTH_RSP_POP 
b298				;pop hl 
b298			 
b298			 
b298 22 c2 e5			ld (os_tok_ptr), hl 
b29b					if DEBUG_FORTH_WORDS 
b29b						DMARK "-L<" 
b29b f5				push af  
b29c 3a b0 b2			ld a, (.dmark)  
b29f 32 6b ee			ld (debug_mark),a  
b2a2 3a b1 b2			ld a, (.dmark+1)  
b2a5 32 6c ee			ld (debug_mark+1),a  
b2a8 3a b2 b2			ld a, (.dmark+2)  
b2ab 32 6d ee			ld (debug_mark+2),a  
b2ae 18 03			jr .pastdmark  
b2b0 ..			.dmark: db "-L<"  
b2b3 f1			.pastdmark: pop af  
b2b4			endm  
# End of macro DMARK
b2b4					CALLMONITOR 
b2b4 cd 6f ee			call debug_vector  
b2b7				endm  
# End of macro CALLMONITOR
b2b7				endif 
b2b7 c3 79 9f			jp exec1 
b2ba			 
b2ba					 
b2ba			 
b2ba			 
b2ba			 
b2ba				NEXTW 
b2ba c3 e8 9e			jp macro_next 
b2bd				endm 
# End of macro NEXTW
b2bd			 
b2bd			 
b2bd			 
b2bd			 
b2bd			.REPEAT: 
b2bd				CWHEAD .UNTIL 93 "REPEAT" 5 WORD_FLAG_CODE 
b2bd 71				db WORD_SYS_CORE+93             
b2be 10 b3			dw .UNTIL            
b2c0 06				db 5 + 1 
b2c1 .. 00			db "REPEAT",0              
b2c8				endm 
# End of macro CWHEAD
b2c8			; | REPEAT ( --  ) Start REPEAT...UNTIL loop  | DONE 
b2c8			;  push pc to rsp stack past the REPEAT 
b2c8					if DEBUG_FORTH_WORDS_KEY 
b2c8						DMARK "REP" 
b2c8 f5				push af  
b2c9 3a dd b2			ld a, (.dmark)  
b2cc 32 6b ee			ld (debug_mark),a  
b2cf 3a de b2			ld a, (.dmark+1)  
b2d2 32 6c ee			ld (debug_mark+1),a  
b2d5 3a df b2			ld a, (.dmark+2)  
b2d8 32 6d ee			ld (debug_mark+2),a  
b2db 18 03			jr .pastdmark  
b2dd ..			.dmark: db "REP"  
b2e0 f1			.pastdmark: pop af  
b2e1			endm  
# End of macro DMARK
b2e1						CALLMONITOR 
b2e1 cd 6f ee			call debug_vector  
b2e4				endm  
# End of macro CALLMONITOR
b2e4					endif 
b2e4			 
b2e4 2a c2 e5				ld hl, (os_tok_ptr) 
b2e7 23					inc hl   ; R 
b2e8 23					inc hl  ; E 
b2e9 23					inc hl   ; P 
b2ea 23					inc hl   ; E 
b2eb 23					inc hl   ; A 
b2ec 23					inc hl   ; T 
b2ed 23					inc hl   ; zero 
b2ee					FORTH_RSP_NEXT 
b2ee cd e2 9a			call macro_forth_rsp_next 
b2f1				endm 
# End of macro FORTH_RSP_NEXT
b2f1			 
b2f1			 
b2f1					if DEBUG_FORTH_WORDS 
b2f1						DMARK "REP" 
b2f1 f5				push af  
b2f2 3a 06 b3			ld a, (.dmark)  
b2f5 32 6b ee			ld (debug_mark),a  
b2f8 3a 07 b3			ld a, (.dmark+1)  
b2fb 32 6c ee			ld (debug_mark+1),a  
b2fe 3a 08 b3			ld a, (.dmark+2)  
b301 32 6d ee			ld (debug_mark+2),a  
b304 18 03			jr .pastdmark  
b306 ..			.dmark: db "REP"  
b309 f1			.pastdmark: pop af  
b30a			endm  
# End of macro DMARK
b30a						;pop bc    ; TODO BUG ?????? what is this for???? 
b30a						CALLMONITOR 
b30a cd 6f ee			call debug_vector  
b30d				endm  
# End of macro CALLMONITOR
b30d					endif 
b30d			 
b30d					NEXTW 
b30d c3 e8 9e			jp macro_next 
b310				endm 
# End of macro NEXTW
b310			;	       NEXTW 
b310			 
b310			.UNTIL: 
b310				CWHEAD .ENDFLOW 94 "UNTIL" 5 WORD_FLAG_CODE 
b310 72				db WORD_SYS_CORE+94             
b311 a7 b3			dw .ENDFLOW            
b313 06				db 5 + 1 
b314 .. 00			db "UNTIL",0              
b31a				endm 
# End of macro CWHEAD
b31a			; | UNTIL ( u -- ) Exit REPEAT...UNTIL loop if TOS is false  | DONE 
b31a			 
b31a				; pop tos as check 
b31a			 
b31a				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
b31a			 
b31a				FORTH_DSP_VALUEHL 
b31a cd 32 9d			call macro_dsp_valuehl 
b31d				endm 
# End of macro FORTH_DSP_VALUEHL
b31d			 
b31d					if DEBUG_FORTH_WORDS_KEY 
b31d						DMARK "UNT" 
b31d f5				push af  
b31e 3a 32 b3			ld a, (.dmark)  
b321 32 6b ee			ld (debug_mark),a  
b324 3a 33 b3			ld a, (.dmark+1)  
b327 32 6c ee			ld (debug_mark+1),a  
b32a 3a 34 b3			ld a, (.dmark+2)  
b32d 32 6d ee			ld (debug_mark+2),a  
b330 18 03			jr .pastdmark  
b332 ..			.dmark: db "UNT"  
b335 f1			.pastdmark: pop af  
b336			endm  
# End of macro DMARK
b336						CALLMONITOR 
b336 cd 6f ee			call debug_vector  
b339				endm  
# End of macro CALLMONITOR
b339					endif 
b339			 
b339			;	push hl 
b339				FORTH_DSP_POP 
b339 cd ea 9d			call macro_forth_dsp_pop 
b33c				endm 
# End of macro FORTH_DSP_POP
b33c			 
b33c			;	pop hl 
b33c			 
b33c				; test if true 
b33c			 
b33c cd 05 8d			call ishlzero 
b33f			;	ld a,l 
b33f			;	add h 
b33f			; 
b33f			;	cp 0 
b33f			 
b33f 20 3e			jr nz, .untilnotdone 
b341			 
b341					if DEBUG_FORTH_WORDS 
b341						DMARK "UNf" 
b341 f5				push af  
b342 3a 56 b3			ld a, (.dmark)  
b345 32 6b ee			ld (debug_mark),a  
b348 3a 57 b3			ld a, (.dmark+1)  
b34b 32 6c ee			ld (debug_mark+1),a  
b34e 3a 58 b3			ld a, (.dmark+2)  
b351 32 6d ee			ld (debug_mark+2),a  
b354 18 03			jr .pastdmark  
b356 ..			.dmark: db "UNf"  
b359 f1			.pastdmark: pop af  
b35a			endm  
# End of macro DMARK
b35a						CALLMONITOR 
b35a cd 6f ee			call debug_vector  
b35d				endm  
# End of macro CALLMONITOR
b35d					endif 
b35d			 
b35d			 
b35d			 
b35d				FORTH_RSP_POP     ; get rid of DO ptr 
b35d cd 03 9b			call macro_forth_rsp_pop 
b360				endm 
# End of macro FORTH_RSP_POP
b360			 
b360			if DEBUG_FORTH_WORDS 
b360						DMARK "UN>" 
b360 f5				push af  
b361 3a 75 b3			ld a, (.dmark)  
b364 32 6b ee			ld (debug_mark),a  
b367 3a 76 b3			ld a, (.dmark+1)  
b36a 32 6c ee			ld (debug_mark+1),a  
b36d 3a 77 b3			ld a, (.dmark+2)  
b370 32 6d ee			ld (debug_mark+2),a  
b373 18 03			jr .pastdmark  
b375 ..			.dmark: db "UN>"  
b378 f1			.pastdmark: pop af  
b379			endm  
# End of macro DMARK
b379				CALLMONITOR 
b379 cd 6f ee			call debug_vector  
b37c				endm  
# End of macro CALLMONITOR
b37c			endif 
b37c			 
b37c					NEXTW 
b37c c3 e8 9e			jp macro_next 
b37f				endm 
# End of macro NEXTW
b37f				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
b37f			 
b37f			.untilnotdone: 
b37f			 
b37f			 
b37f			;	; get DO ptr 
b37f			; 
b37f				FORTH_RSP_TOS 
b37f cd f9 9a			call macro_forth_rsp_tos 
b382				endm 
# End of macro FORTH_RSP_TOS
b382			 
b382				;push hl 
b382			 
b382				; not going to DO any more 
b382				; get rid of the RSP pointer as DO will add it back in 
b382				;FORTH_RSP_POP 
b382				;pop hl 
b382			 
b382			 
b382 22 c2 e5			ld (os_tok_ptr), hl 
b385					if DEBUG_FORTH_WORDS 
b385						DMARK "UN<" 
b385 f5				push af  
b386 3a 9a b3			ld a, (.dmark)  
b389 32 6b ee			ld (debug_mark),a  
b38c 3a 9b b3			ld a, (.dmark+1)  
b38f 32 6c ee			ld (debug_mark+1),a  
b392 3a 9c b3			ld a, (.dmark+2)  
b395 32 6d ee			ld (debug_mark+2),a  
b398 18 03			jr .pastdmark  
b39a ..			.dmark: db "UN<"  
b39d f1			.pastdmark: pop af  
b39e			endm  
# End of macro DMARK
b39e					CALLMONITOR 
b39e cd 6f ee			call debug_vector  
b3a1				endm  
# End of macro CALLMONITOR
b3a1				endif 
b3a1 c3 79 9f			jp exec1 
b3a4			 
b3a4					 
b3a4			 
b3a4			 
b3a4					NEXTW 
b3a4 c3 e8 9e			jp macro_next 
b3a7				endm 
# End of macro NEXTW
b3a7			 
b3a7			 
b3a7			.ENDFLOW: 
b3a7			 
b3a7			; eof 
b3a7			 
# End of file forth_words_flow.asm
b3a7			; TODO something wrong with the first word of the next word group. no matter which group applies. On device, sc114 is fine. bad memory? 
b3a7			include "forth_words_logic.asm" 
b3a7			 
b3a7			; | ## Logic Words 
b3a7			 
b3a7			.NOT: 
b3a7				CWHEAD .IS 25 "NOT" 3 WORD_FLAG_CODE 
b3a7 2d				db WORD_SYS_CORE+25             
b3a8 ef b3			dw .IS            
b3aa 04				db 3 + 1 
b3ab .. 00			db "NOT",0              
b3af				endm 
# End of macro CWHEAD
b3af			; | NOT ( u  -- u ) Inverse true/false on stack | DONE 
b3af					if DEBUG_FORTH_WORDS_KEY 
b3af						DMARK "NOT" 
b3af f5				push af  
b3b0 3a c4 b3			ld a, (.dmark)  
b3b3 32 6b ee			ld (debug_mark),a  
b3b6 3a c5 b3			ld a, (.dmark+1)  
b3b9 32 6c ee			ld (debug_mark+1),a  
b3bc 3a c6 b3			ld a, (.dmark+2)  
b3bf 32 6d ee			ld (debug_mark+2),a  
b3c2 18 03			jr .pastdmark  
b3c4 ..			.dmark: db "NOT"  
b3c7 f1			.pastdmark: pop af  
b3c8			endm  
# End of macro DMARK
b3c8						CALLMONITOR 
b3c8 cd 6f ee			call debug_vector  
b3cb				endm  
# End of macro CALLMONITOR
b3cb					endif 
b3cb					FORTH_DSP 
b3cb cd f8 9c			call macro_forth_dsp 
b3ce				endm 
# End of macro FORTH_DSP
b3ce 7e					ld a,(hl)	; get type of value on TOS 
b3cf fe 02				cp DS_TYPE_INUM  
b3d1 28 03				jr z, .noti 
b3d3					NEXTW 
b3d3 c3 e8 9e			jp macro_next 
b3d6				endm 
# End of macro NEXTW
b3d6			.noti:          FORTH_DSP_VALUEHL 
b3d6 cd 32 9d			call macro_dsp_valuehl 
b3d9				endm 
# End of macro FORTH_DSP_VALUEHL
b3d9			;		push hl 
b3d9					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b3d9 cd ea 9d			call macro_forth_dsp_pop 
b3dc				endm 
# End of macro FORTH_DSP_POP
b3dc			;		pop hl 
b3dc 3e 00				ld a,0 
b3de bd					cp l 
b3df 28 04				jr z, .not2t 
b3e1 2e 00				ld l, 0 
b3e3 18 02				jr .notip 
b3e5			 
b3e5 2e ff		.not2t:		ld l, 255 
b3e7			 
b3e7 26 00		.notip:		ld h, 0	 
b3e9			 
b3e9 cd 3b 9b				call forth_push_numhl 
b3ec					NEXTW 
b3ec c3 e8 9e			jp macro_next 
b3ef				endm 
# End of macro NEXTW
b3ef			 
b3ef			.IS: 
b3ef				CWHEAD .LZERO 25 "IS" 2 WORD_FLAG_CODE 
b3ef 2d				db WORD_SYS_CORE+25             
b3f0 15 b4			dw .LZERO            
b3f2 03				db 2 + 1 
b3f3 .. 00			db "IS",0              
b3f6				endm 
# End of macro CWHEAD
b3f6			; | IS ( s1 s2  -- f ) Push true if string s1 is the same as s2 | TODO 
b3f6					if DEBUG_FORTH_WORDS_KEY 
b3f6						DMARK "IS." 
b3f6 f5				push af  
b3f7 3a 0b b4			ld a, (.dmark)  
b3fa 32 6b ee			ld (debug_mark),a  
b3fd 3a 0c b4			ld a, (.dmark+1)  
b400 32 6c ee			ld (debug_mark+1),a  
b403 3a 0d b4			ld a, (.dmark+2)  
b406 32 6d ee			ld (debug_mark+2),a  
b409 18 03			jr .pastdmark  
b40b ..			.dmark: db "IS."  
b40e f1			.pastdmark: pop af  
b40f			endm  
# End of macro DMARK
b40f						CALLMONITOR 
b40f cd 6f ee			call debug_vector  
b412				endm  
# End of macro CALLMONITOR
b412					endif 
b412					NEXTW 
b412 c3 e8 9e			jp macro_next 
b415				endm 
# End of macro NEXTW
b415			.LZERO: 
b415				CWHEAD .TZERO 25 "0<" 2 WORD_FLAG_CODE 
b415 2d				db WORD_SYS_CORE+25             
b416 1f b4			dw .TZERO            
b418 03				db 2 + 1 
b419 .. 00			db "0<",0              
b41c				endm 
# End of macro CWHEAD
b41c			; | 0< ( u -- f ) Push true if u is less than o | CANT DO UNTIL FLOAT 
b41c					NEXTW 
b41c c3 e8 9e			jp macro_next 
b41f				endm 
# End of macro NEXTW
b41f			.TZERO: 
b41f				CWHEAD .LESS 26 "0=" 2 WORD_FLAG_CODE 
b41f 2e				db WORD_SYS_CORE+26             
b420 66 b4			dw .LESS            
b422 03				db 2 + 1 
b423 .. 00			db "0=",0              
b426				endm 
# End of macro CWHEAD
b426			; | 0= ( u -- f ) Push true if u equals 0 | DONE 
b426				; TODO add floating point number detection 
b426					;v5 FORTH_DSP_VALUE 
b426					if DEBUG_FORTH_WORDS_KEY 
b426						DMARK "0=." 
b426 f5				push af  
b427 3a 3b b4			ld a, (.dmark)  
b42a 32 6b ee			ld (debug_mark),a  
b42d 3a 3c b4			ld a, (.dmark+1)  
b430 32 6c ee			ld (debug_mark+1),a  
b433 3a 3d b4			ld a, (.dmark+2)  
b436 32 6d ee			ld (debug_mark+2),a  
b439 18 03			jr .pastdmark  
b43b ..			.dmark: db "0=."  
b43e f1			.pastdmark: pop af  
b43f			endm  
# End of macro DMARK
b43f						CALLMONITOR 
b43f cd 6f ee			call debug_vector  
b442				endm  
# End of macro CALLMONITOR
b442					endif 
b442					FORTH_DSP 
b442 cd f8 9c			call macro_forth_dsp 
b445				endm 
# End of macro FORTH_DSP
b445 7e					ld a,(hl)	; get type of value on TOS 
b446 fe 02				cp DS_TYPE_INUM  
b448 28 00				jr z, .tz_inum 
b44a			 
b44a				if FORTH_ENABLE_FLOATMATH 
b44a					jr .tz_done 
b44a			 
b44a				endif 
b44a					 
b44a			 
b44a			.tz_inum: 
b44a					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b44a cd 32 9d			call macro_dsp_valuehl 
b44d				endm 
# End of macro FORTH_DSP_VALUEHL
b44d			 
b44d			;		push hl 
b44d			 
b44d					; destroy value TOS 
b44d			 
b44d					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b44d cd ea 9d			call macro_forth_dsp_pop 
b450				endm 
# End of macro FORTH_DSP_POP
b450			 
b450			;		pop hl 
b450			 
b450 3e 00				ld a,0 
b452			 
b452 bd					cp l 
b453 20 08				jr nz, .tz_notzero 
b455			 
b455 bc					cp h 
b456			 
b456 20 05				jr nz, .tz_notzero 
b458			 
b458			 
b458 21 01 00				ld hl, FORTH_TRUE 
b45b 18 03				jr .tz_done 
b45d			 
b45d 21 00 00		.tz_notzero:	ld hl, FORTH_FALSE 
b460			 
b460					; push value back onto stack for another op etc 
b460			 
b460			.tz_done: 
b460 cd 3b 9b				call forth_push_numhl 
b463			 
b463					NEXTW 
b463 c3 e8 9e			jp macro_next 
b466				endm 
# End of macro NEXTW
b466			.LESS: 
b466				CWHEAD .GT 27 "<" 1 WORD_FLAG_CODE 
b466 2f				db WORD_SYS_CORE+27             
b467 cf b4			dw .GT            
b469 02				db 1 + 1 
b46a .. 00			db "<",0              
b46c				endm 
# End of macro CWHEAD
b46c			; | < ( u1 u2 -- f ) True if u1 is less than u2 | DONE 
b46c				; TODO add floating point number detection 
b46c					if DEBUG_FORTH_WORDS_KEY 
b46c						DMARK "LES" 
b46c f5				push af  
b46d 3a 81 b4			ld a, (.dmark)  
b470 32 6b ee			ld (debug_mark),a  
b473 3a 82 b4			ld a, (.dmark+1)  
b476 32 6c ee			ld (debug_mark+1),a  
b479 3a 83 b4			ld a, (.dmark+2)  
b47c 32 6d ee			ld (debug_mark+2),a  
b47f 18 03			jr .pastdmark  
b481 ..			.dmark: db "LES"  
b484 f1			.pastdmark: pop af  
b485			endm  
# End of macro DMARK
b485						CALLMONITOR 
b485 cd 6f ee			call debug_vector  
b488				endm  
# End of macro CALLMONITOR
b488					endif 
b488					FORTH_DSP 
b488 cd f8 9c			call macro_forth_dsp 
b48b				endm 
# End of macro FORTH_DSP
b48b					;v5 FORTH_DSP_VALUE 
b48b 7e					ld a,(hl)	; get type of value on TOS 
b48c fe 02				cp DS_TYPE_INUM  
b48e 28 00				jr z, .less_inum 
b490			 
b490				if FORTH_ENABLE_FLOATMATH 
b490					jr .less_done 
b490			 
b490				endif 
b490					 
b490			 
b490			.less_inum: 
b490					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b490 cd 32 9d			call macro_dsp_valuehl 
b493				endm 
# End of macro FORTH_DSP_VALUEHL
b493			 
b493 e5					push hl  ; u2 
b494			 
b494					; destroy value TOS 
b494			 
b494					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b494 cd ea 9d			call macro_forth_dsp_pop 
b497				endm 
# End of macro FORTH_DSP_POP
b497			 
b497			 
b497					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b497 cd 32 9d			call macro_dsp_valuehl 
b49a				endm 
# End of macro FORTH_DSP_VALUEHL
b49a			 
b49a e5					push hl    ; u1 
b49b			 
b49b					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b49b cd ea 9d			call macro_forth_dsp_pop 
b49e				endm 
# End of macro FORTH_DSP_POP
b49e			 
b49e			 
b49e b7			 or a      ;clear carry flag 
b49f 01 00 00		 ld bc, FORTH_FALSE 
b4a2 e1			  pop hl    ; u1 
b4a3 d1			  pop de    ; u2 
b4a4 ed 52		  sbc hl,de 
b4a6 30 03		  jr nc,.lscont   	;	if hl >= de, carry flag will be cleared 
b4a8			 
b4a8 01 01 00		 ld bc, FORTH_TRUE 
b4ab			.lscont:  
b4ab c5					push bc 
b4ac e1					pop hl 
b4ad			 
b4ad					if DEBUG_FORTH_WORDS 
b4ad						DMARK "LT1" 
b4ad f5				push af  
b4ae 3a c2 b4			ld a, (.dmark)  
b4b1 32 6b ee			ld (debug_mark),a  
b4b4 3a c3 b4			ld a, (.dmark+1)  
b4b7 32 6c ee			ld (debug_mark+1),a  
b4ba 3a c4 b4			ld a, (.dmark+2)  
b4bd 32 6d ee			ld (debug_mark+2),a  
b4c0 18 03			jr .pastdmark  
b4c2 ..			.dmark: db "LT1"  
b4c5 f1			.pastdmark: pop af  
b4c6			endm  
# End of macro DMARK
b4c6						CALLMONITOR 
b4c6 cd 6f ee			call debug_vector  
b4c9				endm  
# End of macro CALLMONITOR
b4c9					endif 
b4c9 cd 3b 9b				call forth_push_numhl 
b4cc			 
b4cc					NEXTW 
b4cc c3 e8 9e			jp macro_next 
b4cf				endm 
# End of macro NEXTW
b4cf			.GT: 
b4cf				CWHEAD .EQUAL 28 ">" 1 WORD_FLAG_CODE 
b4cf 30				db WORD_SYS_CORE+28             
b4d0 38 b5			dw .EQUAL            
b4d2 02				db 1 + 1 
b4d3 .. 00			db ">",0              
b4d5				endm 
# End of macro CWHEAD
b4d5			; | > ( u1 u2 -- f ) True if u1 is greater than u2 | DONE 
b4d5				; TODO add floating point number detection 
b4d5					if DEBUG_FORTH_WORDS_KEY 
b4d5						DMARK "GRT" 
b4d5 f5				push af  
b4d6 3a ea b4			ld a, (.dmark)  
b4d9 32 6b ee			ld (debug_mark),a  
b4dc 3a eb b4			ld a, (.dmark+1)  
b4df 32 6c ee			ld (debug_mark+1),a  
b4e2 3a ec b4			ld a, (.dmark+2)  
b4e5 32 6d ee			ld (debug_mark+2),a  
b4e8 18 03			jr .pastdmark  
b4ea ..			.dmark: db "GRT"  
b4ed f1			.pastdmark: pop af  
b4ee			endm  
# End of macro DMARK
b4ee						CALLMONITOR 
b4ee cd 6f ee			call debug_vector  
b4f1				endm  
# End of macro CALLMONITOR
b4f1					endif 
b4f1					FORTH_DSP 
b4f1 cd f8 9c			call macro_forth_dsp 
b4f4				endm 
# End of macro FORTH_DSP
b4f4					;FORTH_DSP_VALUE 
b4f4 7e					ld a,(hl)	; get type of value on TOS 
b4f5 fe 02				cp DS_TYPE_INUM  
b4f7 28 00				jr z, .gt_inum 
b4f9			 
b4f9				if FORTH_ENABLE_FLOATMATH 
b4f9					jr .gt_done 
b4f9			 
b4f9				endif 
b4f9					 
b4f9			 
b4f9			.gt_inum: 
b4f9					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b4f9 cd 32 9d			call macro_dsp_valuehl 
b4fc				endm 
# End of macro FORTH_DSP_VALUEHL
b4fc			 
b4fc e5					push hl  ; u2 
b4fd			 
b4fd					; destroy value TOS 
b4fd			 
b4fd					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b4fd cd ea 9d			call macro_forth_dsp_pop 
b500				endm 
# End of macro FORTH_DSP_POP
b500			 
b500			 
b500					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b500 cd 32 9d			call macro_dsp_valuehl 
b503				endm 
# End of macro FORTH_DSP_VALUEHL
b503			 
b503 e5					push hl    ; u1 
b504			 
b504					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b504 cd ea 9d			call macro_forth_dsp_pop 
b507				endm 
# End of macro FORTH_DSP_POP
b507			 
b507			 
b507 b7			 or a      ;clear carry flag 
b508 01 00 00		 ld bc, FORTH_FALSE 
b50b e1			  pop hl    ; u1 
b50c d1			  pop de    ; u2 
b50d ed 52		  sbc hl,de 
b50f 38 03		  jr c,.gtcont   	;	if hl >= de, carry flag will be cleared 
b511			 
b511 01 01 00		 ld bc, FORTH_TRUE 
b514			.gtcont:  
b514 c5					push bc 
b515 e1					pop hl 
b516			 
b516					if DEBUG_FORTH_WORDS 
b516						DMARK "GT1" 
b516 f5				push af  
b517 3a 2b b5			ld a, (.dmark)  
b51a 32 6b ee			ld (debug_mark),a  
b51d 3a 2c b5			ld a, (.dmark+1)  
b520 32 6c ee			ld (debug_mark+1),a  
b523 3a 2d b5			ld a, (.dmark+2)  
b526 32 6d ee			ld (debug_mark+2),a  
b529 18 03			jr .pastdmark  
b52b ..			.dmark: db "GT1"  
b52e f1			.pastdmark: pop af  
b52f			endm  
# End of macro DMARK
b52f						CALLMONITOR 
b52f cd 6f ee			call debug_vector  
b532				endm  
# End of macro CALLMONITOR
b532					endif 
b532 cd 3b 9b				call forth_push_numhl 
b535			 
b535					NEXTW 
b535 c3 e8 9e			jp macro_next 
b538				endm 
# End of macro NEXTW
b538			.EQUAL: 
b538				CWHEAD .ENDLOGIC 29 "=" 1 WORD_FLAG_CODE 
b538 31				db WORD_SYS_CORE+29             
b539 a3 b5			dw .ENDLOGIC            
b53b 02				db 1 + 1 
b53c .. 00			db "=",0              
b53e				endm 
# End of macro CWHEAD
b53e			; | = ( u1 u2 -- f ) True if u1 equals u2 | DONE 
b53e				; TODO add floating point number detection 
b53e					if DEBUG_FORTH_WORDS_KEY 
b53e						DMARK "EQ." 
b53e f5				push af  
b53f 3a 53 b5			ld a, (.dmark)  
b542 32 6b ee			ld (debug_mark),a  
b545 3a 54 b5			ld a, (.dmark+1)  
b548 32 6c ee			ld (debug_mark+1),a  
b54b 3a 55 b5			ld a, (.dmark+2)  
b54e 32 6d ee			ld (debug_mark+2),a  
b551 18 03			jr .pastdmark  
b553 ..			.dmark: db "EQ."  
b556 f1			.pastdmark: pop af  
b557			endm  
# End of macro DMARK
b557						CALLMONITOR 
b557 cd 6f ee			call debug_vector  
b55a				endm  
# End of macro CALLMONITOR
b55a					endif 
b55a					FORTH_DSP 
b55a cd f8 9c			call macro_forth_dsp 
b55d				endm 
# End of macro FORTH_DSP
b55d					;v5 FORTH_DSP_VALUE 
b55d 7e					ld a,(hl)	; get type of value on TOS 
b55e fe 02				cp DS_TYPE_INUM  
b560 28 00				jr z, .eq_inum 
b562			 
b562				if FORTH_ENABLE_FLOATMATH 
b562					jr .eq_done 
b562			 
b562				endif 
b562					 
b562			 
b562			.eq_inum: 
b562					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b562 cd 32 9d			call macro_dsp_valuehl 
b565				endm 
# End of macro FORTH_DSP_VALUEHL
b565			 
b565 e5					push hl 
b566			 
b566					; destroy value TOS 
b566			 
b566					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b566 cd ea 9d			call macro_forth_dsp_pop 
b569				endm 
# End of macro FORTH_DSP_POP
b569			 
b569			 
b569					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b569 cd 32 9d			call macro_dsp_valuehl 
b56c				endm 
# End of macro FORTH_DSP_VALUEHL
b56c			 
b56c					; one value on hl get other one back 
b56c			 
b56c e5					push hl 
b56d			 
b56d					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b56d cd ea 9d			call macro_forth_dsp_pop 
b570				endm 
# End of macro FORTH_DSP_POP
b570			 
b570 0e 00				ld c, FORTH_FALSE 
b572			 
b572 e1					pop hl 
b573 d1					pop de 
b574			 
b574 7b					ld a, e 
b575 bd					cp l 
b576			 
b576 20 06				jr nz, .eq_done 
b578			 
b578 7a					ld a, d 
b579 bc					cp h 
b57a			 
b57a 20 02				jr nz, .eq_done 
b57c			 
b57c 0e 01				ld c, FORTH_TRUE 
b57e					 
b57e			 
b57e			 
b57e			.eq_done: 
b57e			 
b57e					; TODO push value back onto stack for another op etc 
b57e			 
b57e 26 00				ld h, 0 
b580 69					ld l, c 
b581					if DEBUG_FORTH_WORDS 
b581						DMARK "EQ1" 
b581 f5				push af  
b582 3a 96 b5			ld a, (.dmark)  
b585 32 6b ee			ld (debug_mark),a  
b588 3a 97 b5			ld a, (.dmark+1)  
b58b 32 6c ee			ld (debug_mark+1),a  
b58e 3a 98 b5			ld a, (.dmark+2)  
b591 32 6d ee			ld (debug_mark+2),a  
b594 18 03			jr .pastdmark  
b596 ..			.dmark: db "EQ1"  
b599 f1			.pastdmark: pop af  
b59a			endm  
# End of macro DMARK
b59a						CALLMONITOR 
b59a cd 6f ee			call debug_vector  
b59d				endm  
# End of macro CALLMONITOR
b59d					endif 
b59d cd 3b 9b				call forth_push_numhl 
b5a0			 
b5a0					NEXTW 
b5a0 c3 e8 9e			jp macro_next 
b5a3				endm 
# End of macro NEXTW
b5a3			 
b5a3			 
b5a3			.ENDLOGIC: 
b5a3			; eof 
b5a3			 
b5a3			 
# End of file forth_words_logic.asm
b5a3			include "forth_words_maths.asm" 
b5a3			 
b5a3			; | ## Maths Words 
b5a3			 
b5a3			.PLUS:	 
b5a3				CWHEAD .NEG 1 "+" 1 WORD_FLAG_CODE 
b5a3 15				db WORD_SYS_CORE+1             
b5a4 01 b6			dw .NEG            
b5a6 02				db 1 + 1 
b5a7 .. 00			db "+",0              
b5a9				endm 
# End of macro CWHEAD
b5a9			; | + ( u u -- u )    Add two numbers and push result   | INT DONE 
b5a9					if DEBUG_FORTH_WORDS_KEY 
b5a9						DMARK "PLU" 
b5a9 f5				push af  
b5aa 3a be b5			ld a, (.dmark)  
b5ad 32 6b ee			ld (debug_mark),a  
b5b0 3a bf b5			ld a, (.dmark+1)  
b5b3 32 6c ee			ld (debug_mark+1),a  
b5b6 3a c0 b5			ld a, (.dmark+2)  
b5b9 32 6d ee			ld (debug_mark+2),a  
b5bc 18 03			jr .pastdmark  
b5be ..			.dmark: db "PLU"  
b5c1 f1			.pastdmark: pop af  
b5c2			endm  
# End of macro DMARK
b5c2						CALLMONITOR 
b5c2 cd 6f ee			call debug_vector  
b5c5				endm  
# End of macro CALLMONITOR
b5c5					endif 
b5c5					; add top two values and push back result 
b5c5			 
b5c5					;for v5 FORTH_DSP_VALUE 
b5c5					FORTH_DSP 
b5c5 cd f8 9c			call macro_forth_dsp 
b5c8				endm 
# End of macro FORTH_DSP
b5c8 7e					ld a,(hl)	; get type of value on TOS 
b5c9 fe 02				cp DS_TYPE_INUM  
b5cb 28 03				jr z, .dot_inum 
b5cd			 
b5cd					NEXTW 
b5cd c3 e8 9e			jp macro_next 
b5d0				endm 
# End of macro NEXTW
b5d0			 
b5d0			; float maths 
b5d0			 
b5d0				if FORTH_ENABLE_FLOATMATH 
b5d0						inc hl      ; now at start of numeric as string 
b5d0			 
b5d0					if DEBUG_FORTH_MATHS 
b5d0						DMARK "ADD" 
b5d0				CALLMONITOR 
b5d0					endif 
b5d0			 
b5d0					;ld ix, hl 
b5d0					call CON 
b5d0			 
b5d0			 
b5d0					push hl 
b5d0					 
b5d0					 
b5d0			 
b5d0						FORTH_DSP_POP      ; TODO add stock underflow checks and throws  
b5d0			 
b5d0					; get next number 
b5d0			 
b5d0						FORTH_DSP_VALUE 
b5d0			 
b5d0						inc hl      ; now at start of numeric as string 
b5d0			 
b5d0					;ld ix, hl 
b5d0					call CON 
b5d0			 
b5d0					push hl 
b5d0			 
b5d0			 
b5d0						FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b5d0			 
b5d0						; TODO do add 
b5d0			 
b5d0						call IADD 
b5d0			 
b5d0						; TODO get result back as ascii 
b5d0			 
b5d0						; TODO push result  
b5d0			 
b5d0			 
b5d0			 
b5d0						jr .dot_done 
b5d0				endif 
b5d0			 
b5d0			.dot_inum: 
b5d0			 
b5d0			 
b5d0					if DEBUG_FORTH_DOT 
b5d0						DMARK "+IT" 
b5d0 f5				push af  
b5d1 3a e5 b5			ld a, (.dmark)  
b5d4 32 6b ee			ld (debug_mark),a  
b5d7 3a e6 b5			ld a, (.dmark+1)  
b5da 32 6c ee			ld (debug_mark+1),a  
b5dd 3a e7 b5			ld a, (.dmark+2)  
b5e0 32 6d ee			ld (debug_mark+2),a  
b5e3 18 03			jr .pastdmark  
b5e5 ..			.dmark: db "+IT"  
b5e8 f1			.pastdmark: pop af  
b5e9			endm  
# End of macro DMARK
b5e9				CALLMONITOR 
b5e9 cd 6f ee			call debug_vector  
b5ec				endm  
# End of macro CALLMONITOR
b5ec					endif 
b5ec			 
b5ec					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b5ec cd 32 9d			call macro_dsp_valuehl 
b5ef				endm 
# End of macro FORTH_DSP_VALUEHL
b5ef			 
b5ef				; TODO add floating point number detection 
b5ef			 
b5ef e5					push hl 
b5f0			 
b5f0					; destroy value TOS 
b5f0			 
b5f0					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b5f0 cd ea 9d			call macro_forth_dsp_pop 
b5f3				endm 
# End of macro FORTH_DSP_POP
b5f3			 
b5f3			 
b5f3					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b5f3 cd 32 9d			call macro_dsp_valuehl 
b5f6				endm 
# End of macro FORTH_DSP_VALUEHL
b5f6			 
b5f6					; one value on hl get other one back 
b5f6			 
b5f6 d1					pop de 
b5f7			 
b5f7					; do the add 
b5f7			 
b5f7 19					add hl,de 
b5f8			 
b5f8					; save it 
b5f8			 
b5f8			;		push hl	 
b5f8			 
b5f8					; 
b5f8			 
b5f8					; destroy value TOS 
b5f8			 
b5f8					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b5f8 cd ea 9d			call macro_forth_dsp_pop 
b5fb				endm 
# End of macro FORTH_DSP_POP
b5fb			 
b5fb					; TODO push value back onto stack for another op etc 
b5fb			 
b5fb			;		pop hl 
b5fb			 
b5fb			.dot_done: 
b5fb cd 3b 9b				call forth_push_numhl 
b5fe			 
b5fe					NEXTW 
b5fe c3 e8 9e			jp macro_next 
b601				endm 
# End of macro NEXTW
b601			.NEG: 
b601			 
b601				CWHEAD .DIV 3 "-" 1 WORD_FLAG_CODE 
b601 17				db WORD_SYS_CORE+3             
b602 44 b6			dw .DIV            
b604 02				db 1 + 1 
b605 .. 00			db "-",0              
b607				endm 
# End of macro CWHEAD
b607			; | - ( u1 u2 -- u )    Subtract u2 from u1 and push result  | INT DONE 
b607					if DEBUG_FORTH_WORDS_KEY 
b607						DMARK "SUB" 
b607 f5				push af  
b608 3a 1c b6			ld a, (.dmark)  
b60b 32 6b ee			ld (debug_mark),a  
b60e 3a 1d b6			ld a, (.dmark+1)  
b611 32 6c ee			ld (debug_mark+1),a  
b614 3a 1e b6			ld a, (.dmark+2)  
b617 32 6d ee			ld (debug_mark+2),a  
b61a 18 03			jr .pastdmark  
b61c ..			.dmark: db "SUB"  
b61f f1			.pastdmark: pop af  
b620			endm  
# End of macro DMARK
b620						CALLMONITOR 
b620 cd 6f ee			call debug_vector  
b623				endm  
# End of macro CALLMONITOR
b623					endif 
b623			 
b623			 
b623				; TODO add floating point number detection 
b623					; v5 FORTH_DSP_VALUE 
b623					FORTH_DSP 
b623 cd f8 9c			call macro_forth_dsp 
b626				endm 
# End of macro FORTH_DSP
b626 7e					ld a,(hl)	; get type of value on TOS 
b627 fe 02				cp DS_TYPE_INUM  
b629 28 03				jr z, .neg_inum 
b62b			 
b62b					NEXTW 
b62b c3 e8 9e			jp macro_next 
b62e				endm 
# End of macro NEXTW
b62e			 
b62e			; float maths 
b62e			 
b62e				if FORTH_ENABLE_FLOATMATH 
b62e					jr .neg_done 
b62e			 
b62e				endif 
b62e					 
b62e			 
b62e			.neg_inum: 
b62e					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b62e cd 32 9d			call macro_dsp_valuehl 
b631				endm 
# End of macro FORTH_DSP_VALUEHL
b631			 
b631 e5					push hl 
b632			 
b632					; destroy value TOS 
b632			 
b632					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b632 cd ea 9d			call macro_forth_dsp_pop 
b635				endm 
# End of macro FORTH_DSP_POP
b635			 
b635			 
b635					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b635 cd 32 9d			call macro_dsp_valuehl 
b638				endm 
# End of macro FORTH_DSP_VALUEHL
b638			 
b638					; one value on hl get other one back 
b638			 
b638 d1					pop de 
b639			 
b639					; do the sub 
b639			;		ex de, hl 
b639			 
b639 ed 52				sbc hl,de 
b63b			 
b63b					; save it 
b63b			 
b63b			;		push hl	 
b63b			 
b63b					; 
b63b			 
b63b					; destroy value TOS 
b63b			 
b63b					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b63b cd ea 9d			call macro_forth_dsp_pop 
b63e				endm 
# End of macro FORTH_DSP_POP
b63e			 
b63e					; TODO push value back onto stack for another op etc 
b63e			 
b63e			;		pop hl 
b63e			 
b63e cd 3b 9b				call forth_push_numhl 
b641			.neg_done: 
b641			 
b641					NEXTW 
b641 c3 e8 9e			jp macro_next 
b644				endm 
# End of macro NEXTW
b644			.DIV: 
b644				CWHEAD .MUL 4 "/" 1 WORD_FLAG_CODE 
b644 18				db WORD_SYS_CORE+4             
b645 91 b6			dw .MUL            
b647 02				db 1 + 1 
b648 .. 00			db "/",0              
b64a				endm 
# End of macro CWHEAD
b64a			; | / ( u1 u2 -- result remainder )     Divide u1 by u2 and push result | INT DONE 
b64a					if DEBUG_FORTH_WORDS_KEY 
b64a						DMARK "DIV" 
b64a f5				push af  
b64b 3a 5f b6			ld a, (.dmark)  
b64e 32 6b ee			ld (debug_mark),a  
b651 3a 60 b6			ld a, (.dmark+1)  
b654 32 6c ee			ld (debug_mark+1),a  
b657 3a 61 b6			ld a, (.dmark+2)  
b65a 32 6d ee			ld (debug_mark+2),a  
b65d 18 03			jr .pastdmark  
b65f ..			.dmark: db "DIV"  
b662 f1			.pastdmark: pop af  
b663			endm  
# End of macro DMARK
b663						CALLMONITOR 
b663 cd 6f ee			call debug_vector  
b666				endm  
# End of macro CALLMONITOR
b666					endif 
b666				; TODO add floating point number detection 
b666					; v5 FORTH_DSP_VALUE 
b666					FORTH_DSP 
b666 cd f8 9c			call macro_forth_dsp 
b669				endm 
# End of macro FORTH_DSP
b669 7e					ld a,(hl)	; get type of value on TOS 
b66a fe 02				cp DS_TYPE_INUM  
b66c 28 03				jr z, .div_inum 
b66e			 
b66e				if FORTH_ENABLE_FLOATMATH 
b66e					jr .div_done 
b66e			 
b66e				endif 
b66e					NEXTW 
b66e c3 e8 9e			jp macro_next 
b671				endm 
# End of macro NEXTW
b671			.div_inum: 
b671			 
b671					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b671 cd 32 9d			call macro_dsp_valuehl 
b674				endm 
# End of macro FORTH_DSP_VALUEHL
b674			 
b674 e5					push hl    ; to go to bc 
b675			 
b675					; destroy value TOS 
b675			 
b675					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b675 cd ea 9d			call macro_forth_dsp_pop 
b678				endm 
# End of macro FORTH_DSP_POP
b678			 
b678			 
b678					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b678 cd 32 9d			call macro_dsp_valuehl 
b67b				endm 
# End of macro FORTH_DSP_VALUEHL
b67b			 
b67b					; hl to go to de 
b67b			 
b67b e5					push hl 
b67c			 
b67c c1					pop bc 
b67d d1					pop de		 
b67e			 
b67e			 
b67e					if DEBUG_FORTH_MATHS 
b67e						DMARK "DIV" 
b67e				CALLMONITOR 
b67e					endif 
b67e					; one value on hl but move to a get other one back 
b67e			 
b67e			        
b67e cd 39 8c			call Div16 
b681			 
b681			;	push af	 
b681 e5				push hl 
b682 c5				push bc 
b683			 
b683					if DEBUG_FORTH_MATHS 
b683						DMARK "DI1" 
b683				CALLMONITOR 
b683					endif 
b683			 
b683					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b683 cd ea 9d			call macro_forth_dsp_pop 
b686				endm 
# End of macro FORTH_DSP_POP
b686			 
b686			 
b686			 
b686 e1					pop hl    ; result 
b687			 
b687 cd 3b 9b				call forth_push_numhl 
b68a			 
b68a e1					pop hl    ; reminder 
b68b			;		ld h,0 
b68b			;		ld l,d 
b68b			 
b68b cd 3b 9b				call forth_push_numhl 
b68e			.div_done: 
b68e					NEXTW 
b68e c3 e8 9e			jp macro_next 
b691				endm 
# End of macro NEXTW
b691			.MUL: 
b691				CWHEAD .MIN 5 "*" 1 WORD_FLAG_CODE 
b691 19				db WORD_SYS_CORE+5             
b692 d6 b6			dw .MIN            
b694 02				db 1 + 1 
b695 .. 00			db "*",0              
b697				endm 
# End of macro CWHEAD
b697			; | * ( u1 u2 -- u )     Multiply TOS and push result | INT DONE 
b697				; TODO add floating point number detection 
b697					if DEBUG_FORTH_WORDS_KEY 
b697						DMARK "MUL" 
b697 f5				push af  
b698 3a ac b6			ld a, (.dmark)  
b69b 32 6b ee			ld (debug_mark),a  
b69e 3a ad b6			ld a, (.dmark+1)  
b6a1 32 6c ee			ld (debug_mark+1),a  
b6a4 3a ae b6			ld a, (.dmark+2)  
b6a7 32 6d ee			ld (debug_mark+2),a  
b6aa 18 03			jr .pastdmark  
b6ac ..			.dmark: db "MUL"  
b6af f1			.pastdmark: pop af  
b6b0			endm  
# End of macro DMARK
b6b0						CALLMONITOR 
b6b0 cd 6f ee			call debug_vector  
b6b3				endm  
# End of macro CALLMONITOR
b6b3					endif 
b6b3					FORTH_DSP 
b6b3 cd f8 9c			call macro_forth_dsp 
b6b6				endm 
# End of macro FORTH_DSP
b6b6					; v5 FORTH_DSP_VALUE 
b6b6 7e					ld a,(hl)	; get type of value on TOS 
b6b7 fe 02				cp DS_TYPE_INUM  
b6b9 28 03				jr z, .mul_inum 
b6bb			 
b6bb				if FORTH_ENABLE_FLOATMATH 
b6bb					jr .mul_done 
b6bb			 
b6bb				endif 
b6bb			 
b6bb					NEXTW 
b6bb c3 e8 9e			jp macro_next 
b6be				endm 
# End of macro NEXTW
b6be			.mul_inum:	 
b6be			 
b6be					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b6be cd 32 9d			call macro_dsp_valuehl 
b6c1				endm 
# End of macro FORTH_DSP_VALUEHL
b6c1			 
b6c1 e5					push hl 
b6c2			 
b6c2					; destroy value TOS 
b6c2			 
b6c2					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b6c2 cd ea 9d			call macro_forth_dsp_pop 
b6c5				endm 
# End of macro FORTH_DSP_POP
b6c5			 
b6c5			 
b6c5					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b6c5 cd 32 9d			call macro_dsp_valuehl 
b6c8				endm 
# End of macro FORTH_DSP_VALUEHL
b6c8			 
b6c8					; one value on hl but move to a get other one back 
b6c8			 
b6c8 7d					ld a, l 
b6c9			 
b6c9 d1					pop de 
b6ca			 
b6ca					; do the mull 
b6ca			;		ex de, hl 
b6ca			 
b6ca cd 5f 8c				call Mult16 
b6cd					; save it 
b6cd			 
b6cd			;		push hl	 
b6cd			 
b6cd					; 
b6cd			 
b6cd					; destroy value TOS 
b6cd			 
b6cd					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b6cd cd ea 9d			call macro_forth_dsp_pop 
b6d0				endm 
# End of macro FORTH_DSP_POP
b6d0			 
b6d0					; TODO push value back onto stack for another op etc 
b6d0			 
b6d0			;		pop hl 
b6d0			 
b6d0 cd 3b 9b				call forth_push_numhl 
b6d3			 
b6d3			.mul_done: 
b6d3					NEXTW 
b6d3 c3 e8 9e			jp macro_next 
b6d6				endm 
# End of macro NEXTW
b6d6			 
b6d6			 
b6d6			 
b6d6			 
b6d6			.MIN: 
b6d6				CWHEAD .MAX 53 "MIN" 3 WORD_FLAG_CODE 
b6d6 49				db WORD_SYS_CORE+53             
b6d7 57 b7			dw .MAX            
b6d9 04				db 3 + 1 
b6da .. 00			db "MIN",0              
b6de				endm 
# End of macro CWHEAD
b6de			; | MIN (  u1 u2 -- u3 ) Whichever is the smallest value is pushed back onto the stack | DONE 
b6de					if DEBUG_FORTH_WORDS_KEY 
b6de						DMARK "MIN" 
b6de f5				push af  
b6df 3a f3 b6			ld a, (.dmark)  
b6e2 32 6b ee			ld (debug_mark),a  
b6e5 3a f4 b6			ld a, (.dmark+1)  
b6e8 32 6c ee			ld (debug_mark+1),a  
b6eb 3a f5 b6			ld a, (.dmark+2)  
b6ee 32 6d ee			ld (debug_mark+2),a  
b6f1 18 03			jr .pastdmark  
b6f3 ..			.dmark: db "MIN"  
b6f6 f1			.pastdmark: pop af  
b6f7			endm  
# End of macro DMARK
b6f7						CALLMONITOR 
b6f7 cd 6f ee			call debug_vector  
b6fa				endm  
# End of macro CALLMONITOR
b6fa					endif 
b6fa					; get u2 
b6fa			 
b6fa					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b6fa cd 32 9d			call macro_dsp_valuehl 
b6fd				endm 
# End of macro FORTH_DSP_VALUEHL
b6fd			 
b6fd e5					push hl   ; u2 
b6fe			 
b6fe					; destroy value TOS 
b6fe			 
b6fe					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b6fe cd ea 9d			call macro_forth_dsp_pop 
b701				endm 
# End of macro FORTH_DSP_POP
b701			 
b701					; get u1 
b701			 
b701					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b701 cd 32 9d			call macro_dsp_valuehl 
b704				endm 
# End of macro FORTH_DSP_VALUEHL
b704			 
b704 e5					push hl  ; u1 
b705			 
b705					; destroy value TOS 
b705			 
b705					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b705 cd ea 9d			call macro_forth_dsp_pop 
b708				endm 
# End of macro FORTH_DSP_POP
b708			 
b708 b7			 or a      ;clear carry flag 
b709 e1			  pop hl    ; u1 
b70a d1			  pop de    ; u2 
b70b e5				push hl   ; saved in case hl is lowest 
b70c ed 52		  sbc hl,de 
b70e 30 23		  jr nc,.mincont   	;	if hl >= de, carry flag will be cleared 
b710			 
b710 e1				pop hl 
b711					if DEBUG_FORTH_WORDS 
b711						DMARK "MIN" 
b711 f5				push af  
b712 3a 26 b7			ld a, (.dmark)  
b715 32 6b ee			ld (debug_mark),a  
b718 3a 27 b7			ld a, (.dmark+1)  
b71b 32 6c ee			ld (debug_mark+1),a  
b71e 3a 28 b7			ld a, (.dmark+2)  
b721 32 6d ee			ld (debug_mark+2),a  
b724 18 03			jr .pastdmark  
b726 ..			.dmark: db "MIN"  
b729 f1			.pastdmark: pop af  
b72a			endm  
# End of macro DMARK
b72a						CALLMONITOR 
b72a cd 6f ee			call debug_vector  
b72d				endm  
# End of macro CALLMONITOR
b72d					endif 
b72d cd 3b 9b				call forth_push_numhl 
b730			 
b730				       NEXTW 
b730 c3 e8 9e			jp macro_next 
b733				endm 
# End of macro NEXTW
b733			 
b733			.mincont:  
b733 c1				pop bc   ; tidy up 
b734 eb				ex de , hl  
b735					if DEBUG_FORTH_WORDS 
b735						DMARK "MI1" 
b735 f5				push af  
b736 3a 4a b7			ld a, (.dmark)  
b739 32 6b ee			ld (debug_mark),a  
b73c 3a 4b b7			ld a, (.dmark+1)  
b73f 32 6c ee			ld (debug_mark+1),a  
b742 3a 4c b7			ld a, (.dmark+2)  
b745 32 6d ee			ld (debug_mark+2),a  
b748 18 03			jr .pastdmark  
b74a ..			.dmark: db "MI1"  
b74d f1			.pastdmark: pop af  
b74e			endm  
# End of macro DMARK
b74e						CALLMONITOR 
b74e cd 6f ee			call debug_vector  
b751				endm  
# End of macro CALLMONITOR
b751					endif 
b751 cd 3b 9b				call forth_push_numhl 
b754			 
b754				       NEXTW 
b754 c3 e8 9e			jp macro_next 
b757				endm 
# End of macro NEXTW
b757			.MAX: 
b757				CWHEAD .RND16 54 "MAX" 3 WORD_FLAG_CODE 
b757 4a				db WORD_SYS_CORE+54             
b758 d8 b7			dw .RND16            
b75a 04				db 3 + 1 
b75b .. 00			db "MAX",0              
b75f				endm 
# End of macro CWHEAD
b75f			; | MAX (  u1 u2 -- u3 )  Whichever is the largest value is pushed back onto the stack | DONE 
b75f					if DEBUG_FORTH_WORDS_KEY 
b75f						DMARK "MAX" 
b75f f5				push af  
b760 3a 74 b7			ld a, (.dmark)  
b763 32 6b ee			ld (debug_mark),a  
b766 3a 75 b7			ld a, (.dmark+1)  
b769 32 6c ee			ld (debug_mark+1),a  
b76c 3a 76 b7			ld a, (.dmark+2)  
b76f 32 6d ee			ld (debug_mark+2),a  
b772 18 03			jr .pastdmark  
b774 ..			.dmark: db "MAX"  
b777 f1			.pastdmark: pop af  
b778			endm  
# End of macro DMARK
b778						CALLMONITOR 
b778 cd 6f ee			call debug_vector  
b77b				endm  
# End of macro CALLMONITOR
b77b					endif 
b77b					; get u2 
b77b			 
b77b					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b77b cd 32 9d			call macro_dsp_valuehl 
b77e				endm 
# End of macro FORTH_DSP_VALUEHL
b77e			 
b77e e5					push hl   ; u2 
b77f			 
b77f					; destroy value TOS 
b77f			 
b77f					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b77f cd ea 9d			call macro_forth_dsp_pop 
b782				endm 
# End of macro FORTH_DSP_POP
b782			 
b782					; get u1 
b782			 
b782					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b782 cd 32 9d			call macro_dsp_valuehl 
b785				endm 
# End of macro FORTH_DSP_VALUEHL
b785			 
b785 e5					push hl  ; u1 
b786			 
b786					; destroy value TOS 
b786			 
b786					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b786 cd ea 9d			call macro_forth_dsp_pop 
b789				endm 
# End of macro FORTH_DSP_POP
b789			 
b789 b7			 or a      ;clear carry flag 
b78a e1			  pop hl    ; u1 
b78b d1			  pop de    ; u2 
b78c e5				push hl   ; saved in case hl is lowest 
b78d ed 52		  sbc hl,de 
b78f 38 23		  jr c,.maxcont   	;	if hl <= de, carry flag will be cleared 
b791			 
b791 e1				pop hl 
b792					if DEBUG_FORTH_WORDS 
b792						DMARK "MAX" 
b792 f5				push af  
b793 3a a7 b7			ld a, (.dmark)  
b796 32 6b ee			ld (debug_mark),a  
b799 3a a8 b7			ld a, (.dmark+1)  
b79c 32 6c ee			ld (debug_mark+1),a  
b79f 3a a9 b7			ld a, (.dmark+2)  
b7a2 32 6d ee			ld (debug_mark+2),a  
b7a5 18 03			jr .pastdmark  
b7a7 ..			.dmark: db "MAX"  
b7aa f1			.pastdmark: pop af  
b7ab			endm  
# End of macro DMARK
b7ab						CALLMONITOR 
b7ab cd 6f ee			call debug_vector  
b7ae				endm  
# End of macro CALLMONITOR
b7ae					endif 
b7ae cd 3b 9b				call forth_push_numhl 
b7b1			 
b7b1				       NEXTW 
b7b1 c3 e8 9e			jp macro_next 
b7b4				endm 
# End of macro NEXTW
b7b4			 
b7b4			.maxcont:  
b7b4 c1				pop bc   ; tidy up 
b7b5 eb				ex de , hl  
b7b6					if DEBUG_FORTH_WORDS 
b7b6						DMARK "MA1" 
b7b6 f5				push af  
b7b7 3a cb b7			ld a, (.dmark)  
b7ba 32 6b ee			ld (debug_mark),a  
b7bd 3a cc b7			ld a, (.dmark+1)  
b7c0 32 6c ee			ld (debug_mark+1),a  
b7c3 3a cd b7			ld a, (.dmark+2)  
b7c6 32 6d ee			ld (debug_mark+2),a  
b7c9 18 03			jr .pastdmark  
b7cb ..			.dmark: db "MA1"  
b7ce f1			.pastdmark: pop af  
b7cf			endm  
# End of macro DMARK
b7cf						CALLMONITOR 
b7cf cd 6f ee			call debug_vector  
b7d2				endm  
# End of macro CALLMONITOR
b7d2					endif 
b7d2 cd 3b 9b				call forth_push_numhl 
b7d5				       NEXTW 
b7d5 c3 e8 9e			jp macro_next 
b7d8				endm 
# End of macro NEXTW
b7d8			 
b7d8			.RND16: 
b7d8				CWHEAD .RND8 58 "RND16" 5 WORD_FLAG_CODE 
b7d8 4e				db WORD_SYS_CORE+58             
b7d9 07 b8			dw .RND8            
b7db 06				db 5 + 1 
b7dc .. 00			db "RND16",0              
b7e2				endm 
# End of macro CWHEAD
b7e2			; | RND16 (  -- n ) Generate a random 16bit number and push to stack | DONE 
b7e2					if DEBUG_FORTH_WORDS_KEY 
b7e2						DMARK "R16" 
b7e2 f5				push af  
b7e3 3a f7 b7			ld a, (.dmark)  
b7e6 32 6b ee			ld (debug_mark),a  
b7e9 3a f8 b7			ld a, (.dmark+1)  
b7ec 32 6c ee			ld (debug_mark+1),a  
b7ef 3a f9 b7			ld a, (.dmark+2)  
b7f2 32 6d ee			ld (debug_mark+2),a  
b7f5 18 03			jr .pastdmark  
b7f7 ..			.dmark: db "R16"  
b7fa f1			.pastdmark: pop af  
b7fb			endm  
# End of macro DMARK
b7fb						CALLMONITOR 
b7fb cd 6f ee			call debug_vector  
b7fe				endm  
# End of macro CALLMONITOR
b7fe					endif 
b7fe cd 03 8c				call prng16  
b801 cd 3b 9b				call forth_push_numhl 
b804				       NEXTW 
b804 c3 e8 9e			jp macro_next 
b807				endm 
# End of macro NEXTW
b807			.RND8: 
b807				CWHEAD .RND 76 "RND8" 4 WORD_FLAG_CODE 
b807 60				db WORD_SYS_CORE+76             
b808 3c b8			dw .RND            
b80a 05				db 4 + 1 
b80b .. 00			db "RND8",0              
b810				endm 
# End of macro CWHEAD
b810			; | RND8 (  -- n ) Generate a random 8bit number and push to stack | DONE 
b810					if DEBUG_FORTH_WORDS_KEY 
b810						DMARK "RN8" 
b810 f5				push af  
b811 3a 25 b8			ld a, (.dmark)  
b814 32 6b ee			ld (debug_mark),a  
b817 3a 26 b8			ld a, (.dmark+1)  
b81a 32 6c ee			ld (debug_mark+1),a  
b81d 3a 27 b8			ld a, (.dmark+2)  
b820 32 6d ee			ld (debug_mark+2),a  
b823 18 03			jr .pastdmark  
b825 ..			.dmark: db "RN8"  
b828 f1			.pastdmark: pop af  
b829			endm  
# End of macro DMARK
b829						CALLMONITOR 
b829 cd 6f ee			call debug_vector  
b82c				endm  
# End of macro CALLMONITOR
b82c					endif 
b82c 2a a9 eb				ld hl,(xrandc) 
b82f 23					inc hl 
b830 cd 1d 8c				call xrnd 
b833 6f					ld l,a	 
b834 26 00				ld h,0 
b836 cd 3b 9b				call forth_push_numhl 
b839				       NEXTW 
b839 c3 e8 9e			jp macro_next 
b83c				endm 
# End of macro NEXTW
b83c			.RND: 
b83c				CWHEAD .ENDMATHS 76 "RND" 3 WORD_FLAG_CODE 
b83c 60				db WORD_SYS_CORE+76             
b83d 42 b9			dw .ENDMATHS            
b83f 04				db 3 + 1 
b840 .. 00			db "RND",0              
b844				endm 
# End of macro CWHEAD
b844			; | RND ( u1 u2 -- u ) Generate a random number no lower than u1 and no higher than u2 and push to stack | DONE 
b844			 
b844					if DEBUG_FORTH_WORDS_KEY 
b844						DMARK "RND" 
b844 f5				push af  
b845 3a 59 b8			ld a, (.dmark)  
b848 32 6b ee			ld (debug_mark),a  
b84b 3a 5a b8			ld a, (.dmark+1)  
b84e 32 6c ee			ld (debug_mark+1),a  
b851 3a 5b b8			ld a, (.dmark+2)  
b854 32 6d ee			ld (debug_mark+2),a  
b857 18 03			jr .pastdmark  
b859 ..			.dmark: db "RND"  
b85c f1			.pastdmark: pop af  
b85d			endm  
# End of macro DMARK
b85d						CALLMONITOR 
b85d cd 6f ee			call debug_vector  
b860				endm  
# End of macro CALLMONITOR
b860					endif 
b860					 
b860					FORTH_DSP_VALUEHL    ; upper range 
b860 cd 32 9d			call macro_dsp_valuehl 
b863				endm 
# End of macro FORTH_DSP_VALUEHL
b863			 
b863 22 ad eb				ld (LFSRSeed), hl	 
b866			 
b866					if DEBUG_FORTH_WORDS 
b866						DMARK "RN1" 
b866 f5				push af  
b867 3a 7b b8			ld a, (.dmark)  
b86a 32 6b ee			ld (debug_mark),a  
b86d 3a 7c b8			ld a, (.dmark+1)  
b870 32 6c ee			ld (debug_mark+1),a  
b873 3a 7d b8			ld a, (.dmark+2)  
b876 32 6d ee			ld (debug_mark+2),a  
b879 18 03			jr .pastdmark  
b87b ..			.dmark: db "RN1"  
b87e f1			.pastdmark: pop af  
b87f			endm  
# End of macro DMARK
b87f						CALLMONITOR 
b87f cd 6f ee			call debug_vector  
b882				endm  
# End of macro CALLMONITOR
b882					endif 
b882					FORTH_DSP_POP 
b882 cd ea 9d			call macro_forth_dsp_pop 
b885				endm 
# End of macro FORTH_DSP_POP
b885			 
b885					FORTH_DSP_VALUEHL    ; low range 
b885 cd 32 9d			call macro_dsp_valuehl 
b888				endm 
# End of macro FORTH_DSP_VALUEHL
b888			 
b888					if DEBUG_FORTH_WORDS 
b888						DMARK "RN2" 
b888 f5				push af  
b889 3a 9d b8			ld a, (.dmark)  
b88c 32 6b ee			ld (debug_mark),a  
b88f 3a 9e b8			ld a, (.dmark+1)  
b892 32 6c ee			ld (debug_mark+1),a  
b895 3a 9f b8			ld a, (.dmark+2)  
b898 32 6d ee			ld (debug_mark+2),a  
b89b 18 03			jr .pastdmark  
b89d ..			.dmark: db "RN2"  
b8a0 f1			.pastdmark: pop af  
b8a1			endm  
# End of macro DMARK
b8a1						CALLMONITOR 
b8a1 cd 6f ee			call debug_vector  
b8a4				endm  
# End of macro CALLMONITOR
b8a4					endif 
b8a4 22 af eb				ld (LFSRSeed+2), hl 
b8a7			 
b8a7					FORTH_DSP_POP 
b8a7 cd ea 9d			call macro_forth_dsp_pop 
b8aa				endm 
# End of macro FORTH_DSP_POP
b8aa			 
b8aa e5					push hl 
b8ab			 
b8ab e1			.inrange:	pop hl 
b8ac cd 03 8c				call prng16  
b8af					if DEBUG_FORTH_WORDS 
b8af						DMARK "RN3" 
b8af f5				push af  
b8b0 3a c4 b8			ld a, (.dmark)  
b8b3 32 6b ee			ld (debug_mark),a  
b8b6 3a c5 b8			ld a, (.dmark+1)  
b8b9 32 6c ee			ld (debug_mark+1),a  
b8bc 3a c6 b8			ld a, (.dmark+2)  
b8bf 32 6d ee			ld (debug_mark+2),a  
b8c2 18 03			jr .pastdmark  
b8c4 ..			.dmark: db "RN3"  
b8c7 f1			.pastdmark: pop af  
b8c8			endm  
# End of macro DMARK
b8c8						CALLMONITOR 
b8c8 cd 6f ee			call debug_vector  
b8cb				endm  
# End of macro CALLMONITOR
b8cb					endif 
b8cb					 
b8cb					; if the range is 8bit knock out the high byte 
b8cb			 
b8cb ed 5b ad eb			ld de, (LFSRSeed)     ; check high level 
b8cf			 
b8cf 3e 00				ld a, 0 
b8d1 ba					cp d  
b8d2 20 1e				jr nz, .hirange 
b8d4 26 00				ld h, 0   ; knock it down to 8bit 
b8d6			 
b8d6					if DEBUG_FORTH_WORDS 
b8d6						DMARK "RNk" 
b8d6 f5				push af  
b8d7 3a eb b8			ld a, (.dmark)  
b8da 32 6b ee			ld (debug_mark),a  
b8dd 3a ec b8			ld a, (.dmark+1)  
b8e0 32 6c ee			ld (debug_mark+1),a  
b8e3 3a ed b8			ld a, (.dmark+2)  
b8e6 32 6d ee			ld (debug_mark+2),a  
b8e9 18 03			jr .pastdmark  
b8eb ..			.dmark: db "RNk"  
b8ee f1			.pastdmark: pop af  
b8ef			endm  
# End of macro DMARK
b8ef						CALLMONITOR 
b8ef cd 6f ee			call debug_vector  
b8f2				endm  
# End of macro CALLMONITOR
b8f2					endif 
b8f2			.hirange:   
b8f2 e5					push hl  
b8f3 b7					or a  
b8f4 ed 52		                sbc hl, de 
b8f6			 
b8f6					;call cmp16 
b8f6			 
b8f6 30 b3				jr nc, .inrange      ; if hl >= de, carry flag is cleared 
b8f8 e1					pop hl 
b8f9 e5					push hl 
b8fa			 
b8fa					if DEBUG_FORTH_WORDS 
b8fa						DMARK "RN4" 
b8fa f5				push af  
b8fb 3a 0f b9			ld a, (.dmark)  
b8fe 32 6b ee			ld (debug_mark),a  
b901 3a 10 b9			ld a, (.dmark+1)  
b904 32 6c ee			ld (debug_mark+1),a  
b907 3a 11 b9			ld a, (.dmark+2)  
b90a 32 6d ee			ld (debug_mark+2),a  
b90d 18 03			jr .pastdmark  
b90f ..			.dmark: db "RN4"  
b912 f1			.pastdmark: pop af  
b913			endm  
# End of macro DMARK
b913						CALLMONITOR 
b913 cd 6f ee			call debug_vector  
b916				endm  
# End of macro CALLMONITOR
b916					endif 
b916 ed 5b af eb			ld de, (LFSRSeed+2)   ; check low range 
b91a					;call cmp16 
b91a				 
b91a b7					or a  
b91b ed 52		                sbc hl, de 
b91d 38 8c				jr c, .inrange 
b91f			 
b91f e1					pop hl 
b920					 
b920					if DEBUG_FORTH_WORDS 
b920						DMARK "RNd" 
b920 f5				push af  
b921 3a 35 b9			ld a, (.dmark)  
b924 32 6b ee			ld (debug_mark),a  
b927 3a 36 b9			ld a, (.dmark+1)  
b92a 32 6c ee			ld (debug_mark+1),a  
b92d 3a 37 b9			ld a, (.dmark+2)  
b930 32 6d ee			ld (debug_mark+2),a  
b933 18 03			jr .pastdmark  
b935 ..			.dmark: db "RNd"  
b938 f1			.pastdmark: pop af  
b939			endm  
# End of macro DMARK
b939						CALLMONITOR 
b939 cd 6f ee			call debug_vector  
b93c				endm  
# End of macro CALLMONITOR
b93c					endif 
b93c			 
b93c			 
b93c cd 3b 9b				call forth_push_numhl 
b93f				       NEXTW 
b93f c3 e8 9e			jp macro_next 
b942				endm 
# End of macro NEXTW
b942			 
b942			.ENDMATHS: 
b942			 
b942			; eof 
b942			 
# End of file forth_words_maths.asm
b942			include "forth_words_display.asm" 
b942			 
b942			; | ## Display Words 
b942			 
b942			.ACT: 
b942			 
b942				CWHEAD .INFO 78 "ACTIVE" 6 WORD_FLAG_CODE 
b942 62				db WORD_SYS_CORE+78             
b943 8e b9			dw .INFO            
b945 07				db 6 + 1 
b946 .. 00			db "ACTIVE",0              
b94d				endm 
# End of macro CWHEAD
b94d			; | ACTIVE ( -- s ) Push the next char for an activity indicator to TOS | DONE 
b94d			;  
b94d			; | | e.g. $ff $00 do active . $01 pause loop 
b94d			 
b94d					if DEBUG_FORTH_WORDS_KEY 
b94d						DMARK "ACT" 
b94d f5				push af  
b94e 3a 62 b9			ld a, (.dmark)  
b951 32 6b ee			ld (debug_mark),a  
b954 3a 63 b9			ld a, (.dmark+1)  
b957 32 6c ee			ld (debug_mark+1),a  
b95a 3a 64 b9			ld a, (.dmark+2)  
b95d 32 6d ee			ld (debug_mark+2),a  
b960 18 03			jr .pastdmark  
b962 ..			.dmark: db "ACT"  
b965 f1			.pastdmark: pop af  
b966			endm  
# End of macro DMARK
b966						CALLMONITOR 
b966 cd 6f ee			call debug_vector  
b969				endm  
# End of macro CALLMONITOR
b969					endif 
b969 cd 06 8a				call active 
b96c					if DEBUG_FORTH_WORDS 
b96c						DMARK "ACp" 
b96c f5				push af  
b96d 3a 81 b9			ld a, (.dmark)  
b970 32 6b ee			ld (debug_mark),a  
b973 3a 82 b9			ld a, (.dmark+1)  
b976 32 6c ee			ld (debug_mark+1),a  
b979 3a 83 b9			ld a, (.dmark+2)  
b97c 32 6d ee			ld (debug_mark+2),a  
b97f 18 03			jr .pastdmark  
b981 ..			.dmark: db "ACp"  
b984 f1			.pastdmark: pop af  
b985			endm  
# End of macro DMARK
b985						CALLMONITOR 
b985 cd 6f ee			call debug_vector  
b988				endm  
# End of macro CALLMONITOR
b988					endif 
b988 cd a9 9b				call forth_push_str 
b98b			 
b98b					NEXTW 
b98b c3 e8 9e			jp macro_next 
b98e				endm 
# End of macro NEXTW
b98e			.INFO: 
b98e			 
b98e				CWHEAD .ATP 78 "INFO" 4 WORD_FLAG_CODE 
b98e 62				db WORD_SYS_CORE+78             
b98f ab b9			dw .ATP            
b991 05				db 4 + 1 
b992 .. 00			db "INFO",0              
b997				endm 
# End of macro CWHEAD
b997			; | INFO ( u1 u2 -- )  Use the top two strings on stack to fill in an info window over two lines. Causes a wait for key press to continue. | DONE 
b997					FORTH_DSP_VALUEHL 
b997 cd 32 9d			call macro_dsp_valuehl 
b99a				endm 
# End of macro FORTH_DSP_VALUEHL
b99a			 
b99a					FORTH_DSP_POP 
b99a cd ea 9d			call macro_forth_dsp_pop 
b99d				endm 
# End of macro FORTH_DSP_POP
b99d			 
b99d e5					push hl 
b99e			 
b99e					FORTH_DSP_VALUEHL 
b99e cd 32 9d			call macro_dsp_valuehl 
b9a1				endm 
# End of macro FORTH_DSP_VALUEHL
b9a1			 
b9a1					FORTH_DSP_POP 
b9a1 cd ea 9d			call macro_forth_dsp_pop 
b9a4				endm 
# End of macro FORTH_DSP_POP
b9a4			 
b9a4 d1					pop de 
b9a5			 
b9a5 cd 40 8a				call info_panel 
b9a8			 
b9a8			 
b9a8					NEXTW 
b9a8 c3 e8 9e			jp macro_next 
b9ab				endm 
# End of macro NEXTW
b9ab			.ATP: 
b9ab				CWHEAD .FB 78 "AT?" 3 WORD_FLAG_CODE 
b9ab 62				db WORD_SYS_CORE+78             
b9ac 22 ba			dw .FB            
b9ae 04				db 3 + 1 
b9af .. 00			db "AT?",0              
b9b3				endm 
# End of macro CWHEAD
b9b3			; | AT? ( -- c r )  Push to stack the current position of the next print | TO TEST 
b9b3					if DEBUG_FORTH_WORDS_KEY 
b9b3						DMARK "AT?" 
b9b3 f5				push af  
b9b4 3a c8 b9			ld a, (.dmark)  
b9b7 32 6b ee			ld (debug_mark),a  
b9ba 3a c9 b9			ld a, (.dmark+1)  
b9bd 32 6c ee			ld (debug_mark+1),a  
b9c0 3a ca b9			ld a, (.dmark+2)  
b9c3 32 6d ee			ld (debug_mark+2),a  
b9c6 18 03			jr .pastdmark  
b9c8 ..			.dmark: db "AT?"  
b9cb f1			.pastdmark: pop af  
b9cc			endm  
# End of macro DMARK
b9cc						CALLMONITOR 
b9cc cd 6f ee			call debug_vector  
b9cf				endm  
# End of macro CALLMONITOR
b9cf					endif 
b9cf 3a 5e ea				ld a, (f_cursor_ptr) 
b9d2			 
b9d2			if DEBUG_FORTH_WORDS 
b9d2				DMARK "AT?" 
b9d2 f5				push af  
b9d3 3a e7 b9			ld a, (.dmark)  
b9d6 32 6b ee			ld (debug_mark),a  
b9d9 3a e8 b9			ld a, (.dmark+1)  
b9dc 32 6c ee			ld (debug_mark+1),a  
b9df 3a e9 b9			ld a, (.dmark+2)  
b9e2 32 6d ee			ld (debug_mark+2),a  
b9e5 18 03			jr .pastdmark  
b9e7 ..			.dmark: db "AT?"  
b9ea f1			.pastdmark: pop af  
b9eb			endm  
# End of macro DMARK
b9eb				CALLMONITOR 
b9eb cd 6f ee			call debug_vector  
b9ee				endm  
# End of macro CALLMONITOR
b9ee			endif	 
b9ee					; count the number of rows 
b9ee			 
b9ee 06 00				ld b, 0 
b9f0 4f			.atpr:		ld c, a    ; save in case we go below zero 
b9f1 d6 28				sub display_cols 
b9f3 f2 f9 b9				jp p, .atprunder 
b9f6 04					inc b 
b9f7 18 f7				jr .atpr 
b9f9			.atprunder:	 
b9f9			if DEBUG_FORTH_WORDS 
b9f9				DMARK "A?2" 
b9f9 f5				push af  
b9fa 3a 0e ba			ld a, (.dmark)  
b9fd 32 6b ee			ld (debug_mark),a  
ba00 3a 0f ba			ld a, (.dmark+1)  
ba03 32 6c ee			ld (debug_mark+1),a  
ba06 3a 10 ba			ld a, (.dmark+2)  
ba09 32 6d ee			ld (debug_mark+2),a  
ba0c 18 03			jr .pastdmark  
ba0e ..			.dmark: db "A?2"  
ba11 f1			.pastdmark: pop af  
ba12			endm  
# End of macro DMARK
ba12				CALLMONITOR 
ba12 cd 6f ee			call debug_vector  
ba15				endm  
# End of macro CALLMONITOR
ba15			endif	 
ba15 26 00				ld h, 0 
ba17 69					ld l, c 
ba18 cd 3b 9b				call forth_push_numhl 
ba1b 68					ld l, b  
ba1c cd 3b 9b				call forth_push_numhl 
ba1f			 
ba1f			 
ba1f				NEXTW 
ba1f c3 e8 9e			jp macro_next 
ba22				endm 
# End of macro NEXTW
ba22			 
ba22			.FB: 
ba22				CWHEAD .EMIT 7 "FB" 2 WORD_FLAG_CODE 
ba22 1b				db WORD_SYS_CORE+7             
ba23 70 ba			dw .EMIT            
ba25 03				db 2 + 1 
ba26 .. 00			db "FB",0              
ba29				endm 
# End of macro CWHEAD
ba29			; | FB ( u -- ) Select frame buffer ID u (1-3)  |  DONE 
ba29			; | | Default frame buffer is 1. System uses 0 which can't be selected for system messages etc. 
ba29			; | | Selecting the frame buffer wont display unless automatic display is setup (default). 
ba29			; | | If automatic display is off then updates will not be shown until DRAW is used. 
ba29					if DEBUG_FORTH_WORDS_KEY 
ba29						DMARK "FB." 
ba29 f5				push af  
ba2a 3a 3e ba			ld a, (.dmark)  
ba2d 32 6b ee			ld (debug_mark),a  
ba30 3a 3f ba			ld a, (.dmark+1)  
ba33 32 6c ee			ld (debug_mark+1),a  
ba36 3a 40 ba			ld a, (.dmark+2)  
ba39 32 6d ee			ld (debug_mark+2),a  
ba3c 18 03			jr .pastdmark  
ba3e ..			.dmark: db "FB."  
ba41 f1			.pastdmark: pop af  
ba42			endm  
# End of macro DMARK
ba42						CALLMONITOR 
ba42 cd 6f ee			call debug_vector  
ba45				endm  
# End of macro CALLMONITOR
ba45					endif 
ba45			 
ba45					FORTH_DSP_VALUEHL 
ba45 cd 32 9d			call macro_dsp_valuehl 
ba48				endm 
# End of macro FORTH_DSP_VALUEHL
ba48			 
ba48 7d					ld a, l 
ba49 fe 01				cp 1 
ba4b 20 05				jr nz, .fbn1 
ba4d 21 10 ed				ld hl, display_fb1 
ba50 18 15				jr .fbset 
ba52 fe 02		.fbn1:		cp 2 
ba54 20 05				jr nz, .fbn2 
ba56 21 ce eb				ld hl, display_fb2 
ba59 18 0c				jr .fbset 
ba5b fe 03		.fbn2:		cp 3 
ba5d 20 05				jr nz, .fbn3 
ba5f 21 6f ec				ld hl, display_fb3 
ba62 18 03				jr .fbset 
ba64			.fbn3:		 ; if invalid number select first 
ba64 21 10 ed				ld hl, display_fb1 
ba67 22 cc eb		.fbset:		ld (display_fb_active), hl 
ba6a			 
ba6a					FORTH_DSP_POP 
ba6a cd ea 9d			call macro_forth_dsp_pop 
ba6d				endm 
# End of macro FORTH_DSP_POP
ba6d			 
ba6d					NEXTW 
ba6d c3 e8 9e			jp macro_next 
ba70				endm 
# End of macro NEXTW
ba70			 
ba70			 
ba70			.EMIT: 
ba70				CWHEAD .DOTH 7 "EMIT" 4 WORD_FLAG_CODE 
ba70 1b				db WORD_SYS_CORE+7             
ba71 c1 ba			dw .DOTH            
ba73 05				db 4 + 1 
ba74 .. 00			db "EMIT",0              
ba79				endm 
# End of macro CWHEAD
ba79			; |  EMIT ( u -- ) Display ascii character  TOS   | DONE 
ba79					; get value off TOS and display it 
ba79			 
ba79					if DEBUG_FORTH_WORDS_KEY 
ba79						DMARK "EMT" 
ba79 f5				push af  
ba7a 3a 8e ba			ld a, (.dmark)  
ba7d 32 6b ee			ld (debug_mark),a  
ba80 3a 8f ba			ld a, (.dmark+1)  
ba83 32 6c ee			ld (debug_mark+1),a  
ba86 3a 90 ba			ld a, (.dmark+2)  
ba89 32 6d ee			ld (debug_mark+2),a  
ba8c 18 03			jr .pastdmark  
ba8e ..			.dmark: db "EMT"  
ba91 f1			.pastdmark: pop af  
ba92			endm  
# End of macro DMARK
ba92						CALLMONITOR 
ba92 cd 6f ee			call debug_vector  
ba95				endm  
# End of macro CALLMONITOR
ba95					endif 
ba95			 
ba95					FORTH_DSP_VALUEHL 
ba95 cd 32 9d			call macro_dsp_valuehl 
ba98				endm 
# End of macro FORTH_DSP_VALUEHL
ba98			 
ba98 7d					ld a,l 
ba99			 
ba99					; TODO write to display 
ba99			 
ba99 32 bf e4				ld (os_input), a 
ba9c 3e 00				ld a, 0 
ba9e 32 c0 e4				ld (os_input+1), a 
baa1					 
baa1 3a 5e ea				ld a, (f_cursor_ptr) 
baa4 11 bf e4				ld de, os_input 
baa7 cd c2 8a				call str_at_display 
baaa			 
baaa			 
baaa 3a 3c ea				ld a,(cli_autodisplay) 
baad fe 00				cp 0 
baaf 28 03				jr z, .enoupdate 
bab1 cd d2 8a						call update_display 
bab4					.enoupdate: 
bab4			 
bab4 3a 5e ea				ld a, (f_cursor_ptr) 
bab7 3c					inc a 
bab8 32 5e ea				ld (f_cursor_ptr), a   ; save new pos 
babb			 
babb			 
babb					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
babb cd ea 9d			call macro_forth_dsp_pop 
babe				endm 
# End of macro FORTH_DSP_POP
babe			  
babe			 
babe					NEXTW 
babe c3 e8 9e			jp macro_next 
bac1				endm 
# End of macro NEXTW
bac1			.DOTH: 
bac1				CWHEAD .DOTF 8 ".-" 2 WORD_FLAG_CODE 
bac1 1c				db WORD_SYS_CORE+8             
bac2 f1 ba			dw .DOTF            
bac4 03				db 2 + 1 
bac5 .. 00			db ".-",0              
bac8				endm 
# End of macro CWHEAD
bac8			        ; | .- ( u -- ) Display TOS replacing any dashes with spaces. Means you dont need to wrap strings in double quotes!   | DONE 
bac8					; get value off TOS and display it 
bac8					if DEBUG_FORTH_WORDS_KEY 
bac8						DMARK "DTD" 
bac8 f5				push af  
bac9 3a dd ba			ld a, (.dmark)  
bacc 32 6b ee			ld (debug_mark),a  
bacf 3a de ba			ld a, (.dmark+1)  
bad2 32 6c ee			ld (debug_mark+1),a  
bad5 3a df ba			ld a, (.dmark+2)  
bad8 32 6d ee			ld (debug_mark+2),a  
badb 18 03			jr .pastdmark  
badd ..			.dmark: db "DTD"  
bae0 f1			.pastdmark: pop af  
bae1			endm  
# End of macro DMARK
bae1						CALLMONITOR 
bae1 cd 6f ee			call debug_vector  
bae4				endm  
# End of macro CALLMONITOR
bae4					endif 
bae4 0e 01			ld c, 1	  ; flag for removal of '-' enabled 
bae6 3e 00			ld a, 0 
bae8 32 3d ea			ld (cli_mvdot), a 
baeb c3 48 bb			jp .dotgo 
baee				NEXTW 
baee c3 e8 9e			jp macro_next 
baf1				endm 
# End of macro NEXTW
baf1			.DOTF: 
baf1				CWHEAD .DOT 8 ".>" 2 WORD_FLAG_CODE 
baf1 1c				db WORD_SYS_CORE+8             
baf2 1f bb			dw .DOT            
baf4 03				db 2 + 1 
baf5 .. 00			db ".>",0              
baf8				endm 
# End of macro CWHEAD
baf8			        ; | .> ( u -- ) Display TOS and move the next display point with display  | WIP 
baf8					; get value off TOS and display it 
baf8			        ; TODO BUG adds extra spaces 
baf8			        ; TODO BUG handle numerics? 
baf8					if DEBUG_FORTH_WORDS_KEY 
baf8						DMARK "DTC" 
baf8 f5				push af  
baf9 3a 0d bb			ld a, (.dmark)  
bafc 32 6b ee			ld (debug_mark),a  
baff 3a 0e bb			ld a, (.dmark+1)  
bb02 32 6c ee			ld (debug_mark+1),a  
bb05 3a 0f bb			ld a, (.dmark+2)  
bb08 32 6d ee			ld (debug_mark+2),a  
bb0b 18 03			jr .pastdmark  
bb0d ..			.dmark: db "DTC"  
bb10 f1			.pastdmark: pop af  
bb11			endm  
# End of macro DMARK
bb11						CALLMONITOR 
bb11 cd 6f ee			call debug_vector  
bb14				endm  
# End of macro CALLMONITOR
bb14					endif 
bb14 3e 01			ld a, 1 
bb16 32 3d ea			ld (cli_mvdot), a 
bb19 c3 48 bb			jp .dotgo 
bb1c				NEXTW 
bb1c c3 e8 9e			jp macro_next 
bb1f				endm 
# End of macro NEXTW
bb1f			 
bb1f			.DOT: 
bb1f				CWHEAD .CLS 8 "." 1 WORD_FLAG_CODE 
bb1f 1c				db WORD_SYS_CORE+8             
bb20 fb bc			dw .CLS            
bb22 02				db 1 + 1 
bb23 .. 00			db ".",0              
bb25				endm 
# End of macro CWHEAD
bb25			        ; | . ( u -- ) Display TOS | DONE 
bb25					; get value off TOS and display it 
bb25			 
bb25					if DEBUG_FORTH_WORDS_KEY 
bb25						DMARK "DOT" 
bb25 f5				push af  
bb26 3a 3a bb			ld a, (.dmark)  
bb29 32 6b ee			ld (debug_mark),a  
bb2c 3a 3b bb			ld a, (.dmark+1)  
bb2f 32 6c ee			ld (debug_mark+1),a  
bb32 3a 3c bb			ld a, (.dmark+2)  
bb35 32 6d ee			ld (debug_mark+2),a  
bb38 18 03			jr .pastdmark  
bb3a ..			.dmark: db "DOT"  
bb3d f1			.pastdmark: pop af  
bb3e			endm  
# End of macro DMARK
bb3e						CALLMONITOR 
bb3e cd 6f ee			call debug_vector  
bb41				endm  
# End of macro CALLMONITOR
bb41					endif 
bb41 3e 00			ld a, 0 
bb43 32 3d ea			ld (cli_mvdot), a 
bb46 0e 00		ld c, 0	  ; flag for removal of '-' disabled 
bb48				 
bb48			 
bb48			.dotgo: 
bb48			 
bb48			; move up type to on stack for parserv5 
bb48					FORTH_DSP 
bb48 cd f8 9c			call macro_forth_dsp 
bb4b				endm 
# End of macro FORTH_DSP
bb4b				;FORTH_DSP_VALUE  
bb4b			 
bb4b			if DEBUG_FORTH_DOT 
bb4b				DMARK "DOT" 
bb4b f5				push af  
bb4c 3a 60 bb			ld a, (.dmark)  
bb4f 32 6b ee			ld (debug_mark),a  
bb52 3a 61 bb			ld a, (.dmark+1)  
bb55 32 6c ee			ld (debug_mark+1),a  
bb58 3a 62 bb			ld a, (.dmark+2)  
bb5b 32 6d ee			ld (debug_mark+2),a  
bb5e 18 03			jr .pastdmark  
bb60 ..			.dmark: db "DOT"  
bb63 f1			.pastdmark: pop af  
bb64			endm  
# End of macro DMARK
bb64				CALLMONITOR 
bb64 cd 6f ee			call debug_vector  
bb67				endm  
# End of macro CALLMONITOR
bb67			endif	 
bb67			;		.print: 
bb67			 
bb67 7e				ld a,(hl)  ; work out what type of value is on the TOS 
bb68 23				inc hl   ; position to the actual value 
bb69 fe 01			cp DS_TYPE_STR 
bb6b 20 06			jr nz, .dotnum1  
bb6d			 
bb6d			; display string 
bb6d				FORTH_DSP_VALUE  
bb6d cd 1b 9d			call macro_forth_dsp_value 
bb70				endm 
# End of macro FORTH_DSP_VALUE
bb70 eb				ex de,hl 
bb71 18 49			jr .dotwrite 
bb73			 
bb73			.dotnum1: 
bb73 fe 02			cp DS_TYPE_INUM 
bb75 20 44			jr nz, .dotflot 
bb77			 
bb77			 
bb77			; display number 
bb77			 
bb77			;	push hl 
bb77			;	call clear_display 
bb77			;	pop hl 
bb77			 
bb77 5e				ld e, (hl) 
bb78 23				inc hl 
bb79 56				ld d, (hl) 
bb7a 21 c1 e2			ld hl, scratch 
bb7d			if DEBUG_FORTH_DOT 
bb7d				DMARK "DT1" 
bb7d f5				push af  
bb7e 3a 92 bb			ld a, (.dmark)  
bb81 32 6b ee			ld (debug_mark),a  
bb84 3a 93 bb			ld a, (.dmark+1)  
bb87 32 6c ee			ld (debug_mark+1),a  
bb8a 3a 94 bb			ld a, (.dmark+2)  
bb8d 32 6d ee			ld (debug_mark+2),a  
bb90 18 03			jr .pastdmark  
bb92 ..			.dmark: db "DT1"  
bb95 f1			.pastdmark: pop af  
bb96			endm  
# End of macro DMARK
bb96				CALLMONITOR 
bb96 cd 6f ee			call debug_vector  
bb99				endm  
# End of macro CALLMONITOR
bb99			endif	 
bb99			 
bb99 cd e9 90			call uitoa_16 
bb9c eb				ex de,hl 
bb9d			 
bb9d			if DEBUG_FORTH_DOT 
bb9d				DMARK "DT2" 
bb9d f5				push af  
bb9e 3a b2 bb			ld a, (.dmark)  
bba1 32 6b ee			ld (debug_mark),a  
bba4 3a b3 bb			ld a, (.dmark+1)  
bba7 32 6c ee			ld (debug_mark+1),a  
bbaa 3a b4 bb			ld a, (.dmark+2)  
bbad 32 6d ee			ld (debug_mark+2),a  
bbb0 18 03			jr .pastdmark  
bbb2 ..			.dmark: db "DT2"  
bbb5 f1			.pastdmark: pop af  
bbb6			endm  
# End of macro DMARK
bbb6				CALLMONITOR 
bbb6 cd 6f ee			call debug_vector  
bbb9				endm  
# End of macro CALLMONITOR
bbb9			endif	 
bbb9			 
bbb9			;	ld de, os_word_scratch 
bbb9 18 01			jr .dotwrite 
bbbb			 
bbbb 00			.dotflot:   nop 
bbbc			; TODO print floating point number 
bbbc			 
bbbc			.dotwrite:		 
bbbc			 
bbbc					; if c is set then set all '-' to spaces 
bbbc					; need to also take into account .>  
bbbc			 
bbbc 3e 01				ld a, 1 
bbbe b9					cp c 
bbbf 20 67				jr nz, .nodashswap 
bbc1			 
bbc1					; DE has the string to write, working with HL 
bbc1			 
bbc1 06 ff				ld b, 255 
bbc3 d5					push de 
bbc4 e1					pop hl 
bbc5			 
bbc5			if DEBUG_FORTH_DOT 
bbc5				DMARK "DT-" 
bbc5 f5				push af  
bbc6 3a da bb			ld a, (.dmark)  
bbc9 32 6b ee			ld (debug_mark),a  
bbcc 3a db bb			ld a, (.dmark+1)  
bbcf 32 6c ee			ld (debug_mark+1),a  
bbd2 3a dc bb			ld a, (.dmark+2)  
bbd5 32 6d ee			ld (debug_mark+2),a  
bbd8 18 03			jr .pastdmark  
bbda ..			.dmark: db "DT-"  
bbdd f1			.pastdmark: pop af  
bbde			endm  
# End of macro DMARK
bbde				CALLMONITOR 
bbde cd 6f ee			call debug_vector  
bbe1				endm  
# End of macro CALLMONITOR
bbe1			endif	 
bbe1 7e			.dashscan:	ld a, (hl) 
bbe2 fe 00				cp 0 
bbe4 28 42				jr z, .nodashswap 
bbe6 fe 2d				cp '-' 
bbe8 20 03				jr nz, .dashskip 
bbea 3e 20				ld a, ' ' 
bbec 77					ld (hl), a 
bbed 23			.dashskip:	inc hl 
bbee			if DEBUG_FORTH_DOT 
bbee				DMARK "D-2" 
bbee f5				push af  
bbef 3a 03 bc			ld a, (.dmark)  
bbf2 32 6b ee			ld (debug_mark),a  
bbf5 3a 04 bc			ld a, (.dmark+1)  
bbf8 32 6c ee			ld (debug_mark+1),a  
bbfb 3a 05 bc			ld a, (.dmark+2)  
bbfe 32 6d ee			ld (debug_mark+2),a  
bc01 18 03			jr .pastdmark  
bc03 ..			.dmark: db "D-2"  
bc06 f1			.pastdmark: pop af  
bc07			endm  
# End of macro DMARK
bc07				CALLMONITOR 
bc07 cd 6f ee			call debug_vector  
bc0a				endm  
# End of macro CALLMONITOR
bc0a			endif	 
bc0a 10 d5				djnz .dashscan 
bc0c			 
bc0c			if DEBUG_FORTH_DOT 
bc0c				DMARK "D-1" 
bc0c f5				push af  
bc0d 3a 21 bc			ld a, (.dmark)  
bc10 32 6b ee			ld (debug_mark),a  
bc13 3a 22 bc			ld a, (.dmark+1)  
bc16 32 6c ee			ld (debug_mark+1),a  
bc19 3a 23 bc			ld a, (.dmark+2)  
bc1c 32 6d ee			ld (debug_mark+2),a  
bc1f 18 03			jr .pastdmark  
bc21 ..			.dmark: db "D-1"  
bc24 f1			.pastdmark: pop af  
bc25			endm  
# End of macro DMARK
bc25				CALLMONITOR 
bc25 cd 6f ee			call debug_vector  
bc28				endm  
# End of macro CALLMONITOR
bc28			endif	 
bc28			 
bc28			.nodashswap: 
bc28			 
bc28			if DEBUG_FORTH_DOT 
bc28				DMARK "D-o" 
bc28 f5				push af  
bc29 3a 3d bc			ld a, (.dmark)  
bc2c 32 6b ee			ld (debug_mark),a  
bc2f 3a 3e bc			ld a, (.dmark+1)  
bc32 32 6c ee			ld (debug_mark+1),a  
bc35 3a 3f bc			ld a, (.dmark+2)  
bc38 32 6d ee			ld (debug_mark+2),a  
bc3b 18 03			jr .pastdmark  
bc3d ..			.dmark: db "D-o"  
bc40 f1			.pastdmark: pop af  
bc41			endm  
# End of macro DMARK
bc41				CALLMONITOR 
bc41 cd 6f ee			call debug_vector  
bc44				endm  
# End of macro CALLMONITOR
bc44			endif	 
bc44			 
bc44 d5					push de   ; save string start in case we need to advance print 
bc45			 
bc45 3a 5e ea				ld a, (f_cursor_ptr) 
bc48 cd c2 8a				call str_at_display 
bc4b 3a 3c ea				ld a,(cli_autodisplay) 
bc4e fe 00				cp 0 
bc50 28 03				jr z, .noupdate 
bc52 cd d2 8a						call update_display 
bc55					.noupdate: 
bc55			 
bc55			 
bc55					; see if we need to advance the print position 
bc55			 
bc55 e1					pop hl   ; get back string 
bc56			;		ex de,hl 
bc56			 
bc56 3a 3d ea				ld a, (cli_mvdot) 
bc59			if DEBUG_FORTH_DOT 
bc59			;		ld e,a 
bc59				DMARK "D>1" 
bc59 f5				push af  
bc5a 3a 6e bc			ld a, (.dmark)  
bc5d 32 6b ee			ld (debug_mark),a  
bc60 3a 6f bc			ld a, (.dmark+1)  
bc63 32 6c ee			ld (debug_mark+1),a  
bc66 3a 70 bc			ld a, (.dmark+2)  
bc69 32 6d ee			ld (debug_mark+2),a  
bc6c 18 03			jr .pastdmark  
bc6e ..			.dmark: db "D>1"  
bc71 f1			.pastdmark: pop af  
bc72			endm  
# End of macro DMARK
bc72				CALLMONITOR 
bc72 cd 6f ee			call debug_vector  
bc75				endm  
# End of macro CALLMONITOR
bc75			endif	 
bc75 fe 00				cp 0 
bc77 28 44				jr z, .noadv 
bc79					; yes, lets advance the print position 
bc79 3e 00				ld a, 0 
bc7b cd 45 91				call strlent 
bc7e			if DEBUG_FORTH_DOT 
bc7e				DMARK "D-?" 
bc7e f5				push af  
bc7f 3a 93 bc			ld a, (.dmark)  
bc82 32 6b ee			ld (debug_mark),a  
bc85 3a 94 bc			ld a, (.dmark+1)  
bc88 32 6c ee			ld (debug_mark+1),a  
bc8b 3a 95 bc			ld a, (.dmark+2)  
bc8e 32 6d ee			ld (debug_mark+2),a  
bc91 18 03			jr .pastdmark  
bc93 ..			.dmark: db "D-?"  
bc96 f1			.pastdmark: pop af  
bc97			endm  
# End of macro DMARK
bc97				CALLMONITOR 
bc97 cd 6f ee			call debug_vector  
bc9a				endm  
# End of macro CALLMONITOR
bc9a			endif	 
bc9a 3a 5e ea				ld a, (f_cursor_ptr) 
bc9d 85					add a,l 
bc9e					;call addatohl 
bc9e					;ld a, l 
bc9e 32 5e ea				ld (f_cursor_ptr), a   ; save new pos 
bca1			 
bca1			if DEBUG_FORTH_DOT 
bca1				DMARK "D->" 
bca1 f5				push af  
bca2 3a b6 bc			ld a, (.dmark)  
bca5 32 6b ee			ld (debug_mark),a  
bca8 3a b7 bc			ld a, (.dmark+1)  
bcab 32 6c ee			ld (debug_mark+1),a  
bcae 3a b8 bc			ld a, (.dmark+2)  
bcb1 32 6d ee			ld (debug_mark+2),a  
bcb4 18 03			jr .pastdmark  
bcb6 ..			.dmark: db "D->"  
bcb9 f1			.pastdmark: pop af  
bcba			endm  
# End of macro DMARK
bcba				CALLMONITOR 
bcba cd 6f ee			call debug_vector  
bcbd				endm  
# End of macro CALLMONITOR
bcbd			endif	 
bcbd			 
bcbd			.noadv:	 
bcbd			 
bcbd					if DEBUG_FORTH_DOT_WAIT 
bcbd							call next_page_prompt 
bcbd					endif	 
bcbd			; TODO this pop off the stack causes a crash. i dont know why 
bcbd			 
bcbd			 
bcbd			if DEBUG_FORTH_DOT 
bcbd				DMARK "DTh" 
bcbd f5				push af  
bcbe 3a d2 bc			ld a, (.dmark)  
bcc1 32 6b ee			ld (debug_mark),a  
bcc4 3a d3 bc			ld a, (.dmark+1)  
bcc7 32 6c ee			ld (debug_mark+1),a  
bcca 3a d4 bc			ld a, (.dmark+2)  
bccd 32 6d ee			ld (debug_mark+2),a  
bcd0 18 03			jr .pastdmark  
bcd2 ..			.dmark: db "DTh"  
bcd5 f1			.pastdmark: pop af  
bcd6			endm  
# End of macro DMARK
bcd6				CALLMONITOR 
bcd6 cd 6f ee			call debug_vector  
bcd9				endm  
# End of macro CALLMONITOR
bcd9			endif	 
bcd9			 
bcd9					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bcd9 cd ea 9d			call macro_forth_dsp_pop 
bcdc				endm 
# End of macro FORTH_DSP_POP
bcdc			 
bcdc			if DEBUG_FORTH_DOT 
bcdc				DMARK "DTi" 
bcdc f5				push af  
bcdd 3a f1 bc			ld a, (.dmark)  
bce0 32 6b ee			ld (debug_mark),a  
bce3 3a f2 bc			ld a, (.dmark+1)  
bce6 32 6c ee			ld (debug_mark+1),a  
bce9 3a f3 bc			ld a, (.dmark+2)  
bcec 32 6d ee			ld (debug_mark+2),a  
bcef 18 03			jr .pastdmark  
bcf1 ..			.dmark: db "DTi"  
bcf4 f1			.pastdmark: pop af  
bcf5			endm  
# End of macro DMARK
bcf5				CALLMONITOR 
bcf5 cd 6f ee			call debug_vector  
bcf8				endm  
# End of macro CALLMONITOR
bcf8			endif	 
bcf8			 
bcf8			 
bcf8					NEXTW 
bcf8 c3 e8 9e			jp macro_next 
bcfb				endm 
# End of macro NEXTW
bcfb			 
bcfb			.CLS: 
bcfb				CWHEAD .DRAW 33 "CLS" 3 WORD_FLAG_CODE 
bcfb 35				db WORD_SYS_CORE+33             
bcfc 28 bd			dw .DRAW            
bcfe 04				db 3 + 1 
bcff .. 00			db "CLS",0              
bd03				endm 
# End of macro CWHEAD
bd03			; | CLS ( -- ) Clear current frame buffer and set next print position to top left corner  | DONE 
bd03					if DEBUG_FORTH_WORDS_KEY 
bd03						DMARK "CLS" 
bd03 f5				push af  
bd04 3a 18 bd			ld a, (.dmark)  
bd07 32 6b ee			ld (debug_mark),a  
bd0a 3a 19 bd			ld a, (.dmark+1)  
bd0d 32 6c ee			ld (debug_mark+1),a  
bd10 3a 1a bd			ld a, (.dmark+2)  
bd13 32 6d ee			ld (debug_mark+2),a  
bd16 18 03			jr .pastdmark  
bd18 ..			.dmark: db "CLS"  
bd1b f1			.pastdmark: pop af  
bd1c			endm  
# End of macro DMARK
bd1c						CALLMONITOR 
bd1c cd 6f ee			call debug_vector  
bd1f				endm  
# End of macro CALLMONITOR
bd1f					endif 
bd1f cd af 8a				call clear_display 
bd22 c3 36 be				jp .home		; and home cursor 
bd25					NEXTW 
bd25 c3 e8 9e			jp macro_next 
bd28				endm 
# End of macro NEXTW
bd28			 
bd28			.DRAW: 
bd28				CWHEAD .DUMP 34 "DRAW" 4 WORD_FLAG_CODE 
bd28 36				db WORD_SYS_CORE+34             
bd29 53 bd			dw .DUMP            
bd2b 05				db 4 + 1 
bd2c .. 00			db "DRAW",0              
bd31				endm 
# End of macro CWHEAD
bd31			; | DRAW ( -- ) Draw contents of current frame buffer  | DONE 
bd31					if DEBUG_FORTH_WORDS_KEY 
bd31						DMARK "DRW" 
bd31 f5				push af  
bd32 3a 46 bd			ld a, (.dmark)  
bd35 32 6b ee			ld (debug_mark),a  
bd38 3a 47 bd			ld a, (.dmark+1)  
bd3b 32 6c ee			ld (debug_mark+1),a  
bd3e 3a 48 bd			ld a, (.dmark+2)  
bd41 32 6d ee			ld (debug_mark+2),a  
bd44 18 03			jr .pastdmark  
bd46 ..			.dmark: db "DRW"  
bd49 f1			.pastdmark: pop af  
bd4a			endm  
# End of macro DMARK
bd4a						CALLMONITOR 
bd4a cd 6f ee			call debug_vector  
bd4d				endm  
# End of macro CALLMONITOR
bd4d					endif 
bd4d cd d2 8a				call update_display 
bd50					NEXTW 
bd50 c3 e8 9e			jp macro_next 
bd53				endm 
# End of macro NEXTW
bd53			 
bd53			.DUMP: 
bd53				CWHEAD .CDUMP 35 "DUMP" 4 WORD_FLAG_CODE 
bd53 37				db WORD_SYS_CORE+35             
bd54 8b bd			dw .CDUMP            
bd56 05				db 4 + 1 
bd57 .. 00			db "DUMP",0              
bd5c				endm 
# End of macro CWHEAD
bd5c			; | DUMP ( x -- ) With address x display dump   | DONE 
bd5c			; TODO pop address to use off of the stack 
bd5c					if DEBUG_FORTH_WORDS_KEY 
bd5c						DMARK "DUM" 
bd5c f5				push af  
bd5d 3a 71 bd			ld a, (.dmark)  
bd60 32 6b ee			ld (debug_mark),a  
bd63 3a 72 bd			ld a, (.dmark+1)  
bd66 32 6c ee			ld (debug_mark+1),a  
bd69 3a 73 bd			ld a, (.dmark+2)  
bd6c 32 6d ee			ld (debug_mark+2),a  
bd6f 18 03			jr .pastdmark  
bd71 ..			.dmark: db "DUM"  
bd74 f1			.pastdmark: pop af  
bd75			endm  
# End of macro DMARK
bd75						CALLMONITOR 
bd75 cd 6f ee			call debug_vector  
bd78				endm  
# End of macro CALLMONITOR
bd78					endif 
bd78 cd af 8a				call clear_display 
bd7b			 
bd7b					; get address 
bd7b			 
bd7b					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
bd7b cd 32 9d			call macro_dsp_valuehl 
bd7e				endm 
# End of macro FORTH_DSP_VALUEHL
bd7e				 
bd7e					; save it for cdump 
bd7e			 
bd7e 22 e4 e5				ld (os_cur_ptr),hl 
bd81			 
bd81					; destroy value TOS 
bd81			 
bd81					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bd81 cd ea 9d			call macro_forth_dsp_pop 
bd84				endm 
# End of macro FORTH_DSP_POP
bd84			 
bd84 cd bb 99				call dumpcont	; skip old style of param parsing	 
bd87 c9					ret			; TODO command causes end of remaining parsing so cant do: $0000 DUMP $8000 DUMP 
bd88					NEXTW 
bd88 c3 e8 9e			jp macro_next 
bd8b				endm 
# End of macro NEXTW
bd8b			.CDUMP: 
bd8b				CWHEAD .DAT 36 "CDUMP" 5 WORD_FLAG_CODE 
bd8b 38				db WORD_SYS_CORE+36             
bd8c bb bd			dw .DAT            
bd8e 06				db 5 + 1 
bd8f .. 00			db "CDUMP",0              
bd95				endm 
# End of macro CWHEAD
bd95			; | CDUMP ( -- ) Continue dump of memory from DUMP | DONE 
bd95					if DEBUG_FORTH_WORDS_KEY 
bd95						DMARK "CDP" 
bd95 f5				push af  
bd96 3a aa bd			ld a, (.dmark)  
bd99 32 6b ee			ld (debug_mark),a  
bd9c 3a ab bd			ld a, (.dmark+1)  
bd9f 32 6c ee			ld (debug_mark+1),a  
bda2 3a ac bd			ld a, (.dmark+2)  
bda5 32 6d ee			ld (debug_mark+2),a  
bda8 18 03			jr .pastdmark  
bdaa ..			.dmark: db "CDP"  
bdad f1			.pastdmark: pop af  
bdae			endm  
# End of macro DMARK
bdae						CALLMONITOR 
bdae cd 6f ee			call debug_vector  
bdb1				endm  
# End of macro CALLMONITOR
bdb1					endif 
bdb1 cd af 8a				call clear_display 
bdb4 cd bb 99				call dumpcont	 
bdb7 c9					ret			; TODO command causes end of remaining parsing so cant do: $0000 DUMP CDUMP $8000 DUMP 
bdb8					NEXTW 
bdb8 c3 e8 9e			jp macro_next 
bdbb				endm 
# End of macro NEXTW
bdbb			 
bdbb			 
bdbb			 
bdbb			 
bdbb			.DAT: 
bdbb				CWHEAD .HOME 41 "AT" 2 WORD_FLAG_CODE 
bdbb 3d				db WORD_SYS_CORE+41             
bdbc 11 be			dw .HOME            
bdbe 03				db 2 + 1 
bdbf .. 00			db "AT",0              
bdc2				endm 
# End of macro CWHEAD
bdc2			; | AT ( u1 u2 -- ) Set next output via . or emit at row u2 col u1 | DONE 
bdc2					if DEBUG_FORTH_WORDS_KEY 
bdc2						DMARK "AT." 
bdc2 f5				push af  
bdc3 3a d7 bd			ld a, (.dmark)  
bdc6 32 6b ee			ld (debug_mark),a  
bdc9 3a d8 bd			ld a, (.dmark+1)  
bdcc 32 6c ee			ld (debug_mark+1),a  
bdcf 3a d9 bd			ld a, (.dmark+2)  
bdd2 32 6d ee			ld (debug_mark+2),a  
bdd5 18 03			jr .pastdmark  
bdd7 ..			.dmark: db "AT."  
bdda f1			.pastdmark: pop af  
bddb			endm  
# End of macro DMARK
bddb						CALLMONITOR 
bddb cd 6f ee			call debug_vector  
bdde				endm  
# End of macro CALLMONITOR
bdde					endif 
bdde					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
bdde cd 32 9d			call macro_dsp_valuehl 
bde1				endm 
# End of macro FORTH_DSP_VALUEHL
bde1			 
bde1			 
bde1					; TODO save cursor row 
bde1 7d					ld a,l 
bde2 fe 02				cp 2 
bde4 20 04				jr nz, .crow3 
bde6 3e 28				ld a, display_row_2 
bde8 18 12				jr .ccol1 
bdea fe 03		.crow3:		cp 3 
bdec 20 04				jr nz, .crow4 
bdee 3e 50				ld a, display_row_3 
bdf0 18 0a				jr .ccol1 
bdf2 fe 04		.crow4:		cp 4 
bdf4 20 04				jr nz, .crow1 
bdf6 3e 78				ld a, display_row_4 
bdf8 18 02				jr .ccol1 
bdfa 3e 00		.crow1:		ld a,display_row_1 
bdfc f5			.ccol1:		push af			; got row offset 
bdfd 6f					ld l,a 
bdfe 26 00				ld h,0 
be00					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
be00 cd ea 9d			call macro_forth_dsp_pop 
be03				endm 
# End of macro FORTH_DSP_POP
be03					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
be03 cd 32 9d			call macro_dsp_valuehl 
be06				endm 
# End of macro FORTH_DSP_VALUEHL
be06					; TODO save cursor col 
be06 f1					pop af 
be07 85					add l		; add col offset 
be08 32 5e ea				ld (f_cursor_ptr), a 
be0b					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
be0b cd ea 9d			call macro_forth_dsp_pop 
be0e				endm 
# End of macro FORTH_DSP_POP
be0e			 
be0e					; calculate  
be0e			 
be0e					NEXTW 
be0e c3 e8 9e			jp macro_next 
be11				endm 
# End of macro NEXTW
be11			 
be11			 
be11			.HOME: 
be11				CWHEAD .SPACE 45 "HOME" 4 WORD_FLAG_CODE 
be11 41				db WORD_SYS_CORE+45             
be12 3e be			dw .SPACE            
be14 05				db 4 + 1 
be15 .. 00			db "HOME",0              
be1a				endm 
# End of macro CWHEAD
be1a			; | HOME ( -- ) Reset the current cursor for output to home | DONE 
be1a					if DEBUG_FORTH_WORDS_KEY 
be1a						DMARK "HOM" 
be1a f5				push af  
be1b 3a 2f be			ld a, (.dmark)  
be1e 32 6b ee			ld (debug_mark),a  
be21 3a 30 be			ld a, (.dmark+1)  
be24 32 6c ee			ld (debug_mark+1),a  
be27 3a 31 be			ld a, (.dmark+2)  
be2a 32 6d ee			ld (debug_mark+2),a  
be2d 18 03			jr .pastdmark  
be2f ..			.dmark: db "HOM"  
be32 f1			.pastdmark: pop af  
be33			endm  
# End of macro DMARK
be33						CALLMONITOR 
be33 cd 6f ee			call debug_vector  
be36				endm  
# End of macro CALLMONITOR
be36					endif 
be36 3e 00		.home:		ld a, 0		; and home cursor 
be38 32 5e ea				ld (f_cursor_ptr), a 
be3b					NEXTW 
be3b c3 e8 9e			jp macro_next 
be3e				endm 
# End of macro NEXTW
be3e			 
be3e			 
be3e			.SPACE: 
be3e				CWHEAD .SPACES 50 "BL" 2 WORD_FLAG_CODE 
be3e 46				db WORD_SYS_CORE+50             
be3f 74 be			dw .SPACES            
be41 03				db 2 + 1 
be42 .. 00			db "BL",0              
be45				endm 
# End of macro CWHEAD
be45			; | BL (  -- c ) Push the value of space onto the stack as a string  | DONE 
be45					if DEBUG_FORTH_WORDS_KEY 
be45						DMARK "BL." 
be45 f5				push af  
be46 3a 5a be			ld a, (.dmark)  
be49 32 6b ee			ld (debug_mark),a  
be4c 3a 5b be			ld a, (.dmark+1)  
be4f 32 6c ee			ld (debug_mark+1),a  
be52 3a 5c be			ld a, (.dmark+2)  
be55 32 6d ee			ld (debug_mark+2),a  
be58 18 03			jr .pastdmark  
be5a ..			.dmark: db "BL."  
be5d f1			.pastdmark: pop af  
be5e			endm  
# End of macro DMARK
be5e						CALLMONITOR 
be5e cd 6f ee			call debug_vector  
be61				endm  
# End of macro CALLMONITOR
be61					endif 
be61 3e 20				ld a, " " 
be63 32 c1 e2				ld (scratch),a 
be66 3e 00				ld a, 0 
be68 32 c2 e2				ld (scratch+1),a 
be6b 21 c1 e2				ld hl, scratch 
be6e cd a9 9b				call forth_push_str 
be71					 
be71				       NEXTW 
be71 c3 e8 9e			jp macro_next 
be74				endm 
# End of macro NEXTW
be74			 
be74			;.blstr: db " ", 0 
be74			 
be74			.SPACES: 
be74				CWHEAD .SCROLL 51 "SPACES" 6 WORD_FLAG_CODE 
be74 47				db WORD_SYS_CORE+51             
be75 0f bf			dw .SCROLL            
be77 07				db 6 + 1 
be78 .. 00			db "SPACES",0              
be7f				endm 
# End of macro CWHEAD
be7f			; | SPACES ( u -- str ) A string of u spaces is pushed onto the stack | DONE 
be7f					if DEBUG_FORTH_WORDS_KEY 
be7f						DMARK "SPS" 
be7f f5				push af  
be80 3a 94 be			ld a, (.dmark)  
be83 32 6b ee			ld (debug_mark),a  
be86 3a 95 be			ld a, (.dmark+1)  
be89 32 6c ee			ld (debug_mark+1),a  
be8c 3a 96 be			ld a, (.dmark+2)  
be8f 32 6d ee			ld (debug_mark+2),a  
be92 18 03			jr .pastdmark  
be94 ..			.dmark: db "SPS"  
be97 f1			.pastdmark: pop af  
be98			endm  
# End of macro DMARK
be98						CALLMONITOR 
be98 cd 6f ee			call debug_vector  
be9b				endm  
# End of macro CALLMONITOR
be9b					endif 
be9b			 
be9b			 
be9b					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
be9b cd 32 9d			call macro_dsp_valuehl 
be9e				endm 
# End of macro FORTH_DSP_VALUEHL
be9e			 
be9e e5					push hl    ; u 
be9f					if DEBUG_FORTH_WORDS 
be9f						DMARK "SPA" 
be9f f5				push af  
bea0 3a b4 be			ld a, (.dmark)  
bea3 32 6b ee			ld (debug_mark),a  
bea6 3a b5 be			ld a, (.dmark+1)  
bea9 32 6c ee			ld (debug_mark+1),a  
beac 3a b6 be			ld a, (.dmark+2)  
beaf 32 6d ee			ld (debug_mark+2),a  
beb2 18 03			jr .pastdmark  
beb4 ..			.dmark: db "SPA"  
beb7 f1			.pastdmark: pop af  
beb8			endm  
# End of macro DMARK
beb8						CALLMONITOR 
beb8 cd 6f ee			call debug_vector  
bebb				endm  
# End of macro CALLMONITOR
bebb					endif 
bebb			 
bebb					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bebb cd ea 9d			call macro_forth_dsp_pop 
bebe				endm 
# End of macro FORTH_DSP_POP
bebe e1					pop hl 
bebf 0e 00				ld c, 0 
bec1 45					ld b, l 
bec2 21 c1 e2				ld hl, scratch  
bec5			 
bec5					if DEBUG_FORTH_WORDS 
bec5						DMARK "SP2" 
bec5 f5				push af  
bec6 3a da be			ld a, (.dmark)  
bec9 32 6b ee			ld (debug_mark),a  
becc 3a db be			ld a, (.dmark+1)  
becf 32 6c ee			ld (debug_mark+1),a  
bed2 3a dc be			ld a, (.dmark+2)  
bed5 32 6d ee			ld (debug_mark+2),a  
bed8 18 03			jr .pastdmark  
beda ..			.dmark: db "SP2"  
bedd f1			.pastdmark: pop af  
bede			endm  
# End of macro DMARK
bede						CALLMONITOR 
bede cd 6f ee			call debug_vector  
bee1				endm  
# End of macro CALLMONITOR
bee1					endif 
bee1 3e 20				ld a, ' ' 
bee3			.spaces1:	 
bee3 77					ld (hl),a 
bee4 23					inc hl 
bee5					 
bee5 10 fc				djnz .spaces1 
bee7 3e 00				ld a,0 
bee9 77					ld (hl),a 
beea 21 c1 e2				ld hl, scratch 
beed					if DEBUG_FORTH_WORDS 
beed						DMARK "SP3" 
beed f5				push af  
beee 3a 02 bf			ld a, (.dmark)  
bef1 32 6b ee			ld (debug_mark),a  
bef4 3a 03 bf			ld a, (.dmark+1)  
bef7 32 6c ee			ld (debug_mark+1),a  
befa 3a 04 bf			ld a, (.dmark+2)  
befd 32 6d ee			ld (debug_mark+2),a  
bf00 18 03			jr .pastdmark  
bf02 ..			.dmark: db "SP3"  
bf05 f1			.pastdmark: pop af  
bf06			endm  
# End of macro DMARK
bf06						CALLMONITOR 
bf06 cd 6f ee			call debug_vector  
bf09				endm  
# End of macro CALLMONITOR
bf09					endif 
bf09 cd a9 9b				call forth_push_str 
bf0c			 
bf0c				       NEXTW 
bf0c c3 e8 9e			jp macro_next 
bf0f				endm 
# End of macro NEXTW
bf0f			 
bf0f			 
bf0f			 
bf0f			.SCROLL: 
bf0f				CWHEAD .SCROLLD 63 "SCROLL" 6 WORD_FLAG_CODE 
bf0f 53				db WORD_SYS_CORE+63             
bf10 3c bf			dw .SCROLLD            
bf12 07				db 6 + 1 
bf13 .. 00			db "SCROLL",0              
bf1a				endm 
# End of macro CWHEAD
bf1a			; | SCROLL ( -- ) Scroll up one line - next write will update if required | DONE 
bf1a					if DEBUG_FORTH_WORDS_KEY 
bf1a						DMARK "SCR" 
bf1a f5				push af  
bf1b 3a 2f bf			ld a, (.dmark)  
bf1e 32 6b ee			ld (debug_mark),a  
bf21 3a 30 bf			ld a, (.dmark+1)  
bf24 32 6c ee			ld (debug_mark+1),a  
bf27 3a 31 bf			ld a, (.dmark+2)  
bf2a 32 6d ee			ld (debug_mark+2),a  
bf2d 18 03			jr .pastdmark  
bf2f ..			.dmark: db "SCR"  
bf32 f1			.pastdmark: pop af  
bf33			endm  
# End of macro DMARK
bf33						CALLMONITOR 
bf33 cd 6f ee			call debug_vector  
bf36				endm  
# End of macro CALLMONITOR
bf36					endif 
bf36			 
bf36 cd 71 8a			call scroll_up 
bf39			;	call update_display 
bf39			 
bf39					NEXTW 
bf39 c3 e8 9e			jp macro_next 
bf3c				endm 
# End of macro NEXTW
bf3c			 
bf3c			 
bf3c			 
bf3c			;		; get dir 
bf3c			; 
bf3c			;		FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
bf3c			; 
bf3c			;		push hl 
bf3c			; 
bf3c			;		; destroy value TOS 
bf3c			; 
bf3c			;		FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bf3c			; 
bf3c			;		; get count 
bf3c			; 
bf3c			;		FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
bf3c			; 
bf3c			;		push hl 
bf3c			; 
bf3c			;		; destroy value TOS 
bf3c			; 
bf3c			;		FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bf3c			; 
bf3c			;		; one value on hl get other one back 
bf3c			; 
bf3c			;		pop bc    ; count 
bf3c			; 
bf3c			;		pop de   ; dir 
bf3c			; 
bf3c			; 
bf3c			;		ld b, c 
bf3c			; 
bf3c			;.scrolldir:     push bc 
bf3c			;		push de 
bf3c			; 
bf3c			;		ld a, 0 
bf3c			;		cp e 
bf3c			;		jr z, .scrollup  
bf3c			;		call scroll_down 
bf3c			;		jr .scrollnext 
bf3c			;.scrollup:	call scroll_up 
bf3c			; 
bf3c			;		 
bf3c			;.scrollnext: 
bf3c			;		pop de 
bf3c			;		pop bc 
bf3c			;		djnz .scrolldir 
bf3c			; 
bf3c			; 
bf3c			; 
bf3c			; 
bf3c			; 
bf3c			;		NEXTW 
bf3c			 
bf3c			.SCROLLD: 
bf3c				CWHEAD .ATQ 63 "SCROLLD" 7 WORD_FLAG_CODE 
bf3c 53				db WORD_SYS_CORE+63             
bf3d 6a bf			dw .ATQ            
bf3f 08				db 7 + 1 
bf40 .. 00			db "SCROLLD",0              
bf48				endm 
# End of macro CWHEAD
bf48			; | SCROLLD ( -- ) Scroll down one line - next write will update if required | TO DO 
bf48					if DEBUG_FORTH_WORDS_KEY 
bf48						DMARK "SCD" 
bf48 f5				push af  
bf49 3a 5d bf			ld a, (.dmark)  
bf4c 32 6b ee			ld (debug_mark),a  
bf4f 3a 5e bf			ld a, (.dmark+1)  
bf52 32 6c ee			ld (debug_mark+1),a  
bf55 3a 5f bf			ld a, (.dmark+2)  
bf58 32 6d ee			ld (debug_mark+2),a  
bf5b 18 03			jr .pastdmark  
bf5d ..			.dmark: db "SCD"  
bf60 f1			.pastdmark: pop af  
bf61			endm  
# End of macro DMARK
bf61						CALLMONITOR 
bf61 cd 6f ee			call debug_vector  
bf64				endm  
# End of macro CALLMONITOR
bf64					endif 
bf64			 
bf64 cd 95 8a			call scroll_down 
bf67			;	call update_display 
bf67			 
bf67					NEXTW 
bf67 c3 e8 9e			jp macro_next 
bf6a				endm 
# End of macro NEXTW
bf6a			 
bf6a			 
bf6a			.ATQ: 
bf6a				CWHEAD .AUTODSP 78 "AT@" 3 WORD_FLAG_CODE 
bf6a 62				db WORD_SYS_CORE+78             
bf6b c8 bf			dw .AUTODSP            
bf6d 04				db 3 + 1 
bf6e .. 00			db "AT@",0              
bf72				endm 
# End of macro CWHEAD
bf72			; | AT@ ( u1 u2 -- n ) Push to stack ASCII value at row u2 col u1 | DONE 
bf72					if DEBUG_FORTH_WORDS_KEY 
bf72						DMARK "ATA" 
bf72 f5				push af  
bf73 3a 87 bf			ld a, (.dmark)  
bf76 32 6b ee			ld (debug_mark),a  
bf79 3a 88 bf			ld a, (.dmark+1)  
bf7c 32 6c ee			ld (debug_mark+1),a  
bf7f 3a 89 bf			ld a, (.dmark+2)  
bf82 32 6d ee			ld (debug_mark+2),a  
bf85 18 03			jr .pastdmark  
bf87 ..			.dmark: db "ATA"  
bf8a f1			.pastdmark: pop af  
bf8b			endm  
# End of macro DMARK
bf8b						CALLMONITOR 
bf8b cd 6f ee			call debug_vector  
bf8e				endm  
# End of macro CALLMONITOR
bf8e					endif 
bf8e			 
bf8e			 
bf8e					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
bf8e cd 32 9d			call macro_dsp_valuehl 
bf91				endm 
# End of macro FORTH_DSP_VALUEHL
bf91			 
bf91					; TODO save cursor row 
bf91 7d					ld a,l 
bf92 fe 02				cp 2 
bf94 20 04				jr nz, .crow3aq 
bf96 3e 28				ld a, display_row_2 
bf98 18 12				jr .ccol1aq 
bf9a fe 03		.crow3aq:		cp 3 
bf9c 20 04				jr nz, .crow4aq 
bf9e 3e 50				ld a, display_row_3 
bfa0 18 0a				jr .ccol1aq 
bfa2 fe 04		.crow4aq:		cp 4 
bfa4 20 04				jr nz, .crow1aq 
bfa6 3e 78				ld a, display_row_4 
bfa8 18 02				jr .ccol1aq 
bfaa 3e 00		.crow1aq:		ld a,display_row_1 
bfac f5			.ccol1aq:		push af			; got row offset 
bfad 6f					ld l,a 
bfae 26 00				ld h,0 
bfb0					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bfb0 cd ea 9d			call macro_forth_dsp_pop 
bfb3				endm 
# End of macro FORTH_DSP_POP
bfb3					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
bfb3 cd 32 9d			call macro_dsp_valuehl 
bfb6				endm 
# End of macro FORTH_DSP_VALUEHL
bfb6					; TODO save cursor col 
bfb6 f1					pop af 
bfb7 85					add l		; add col offset 
bfb8			 
bfb8					; add current frame buffer address 
bfb8 2a cc eb				ld hl, (display_fb_active) 
bfbb cd dc 8c				call addatohl 
bfbe			 
bfbe			 
bfbe			 
bfbe			 
bfbe					; get char frame buffer location offset in hl 
bfbe			 
bfbe 7e					ld a,(hl) 
bfbf 26 00				ld h, 0 
bfc1 6f					ld l, a 
bfc2			 
bfc2 cd 3b 9b				call forth_push_numhl 
bfc5			 
bfc5			 
bfc5					NEXTW 
bfc5 c3 e8 9e			jp macro_next 
bfc8				endm 
# End of macro NEXTW
bfc8			 
bfc8			.AUTODSP: 
bfc8				CWHEAD .MENU 79 "ADSP" 4 WORD_FLAG_CODE 
bfc8 63				db WORD_SYS_CORE+79             
bfc9 de bf			dw .MENU            
bfcb 05				db 4 + 1 
bfcc .. 00			db "ADSP",0              
bfd1				endm 
# End of macro CWHEAD
bfd1			; | ADSP ( u1 --  ) Enable/Disable Auto screen updates (SLOW). | DONE 
bfd1			; | | If off, use DRAW to refresh. Default is on. $0003 will enable direct screen writes (TODO)  
bfd1			 
bfd1					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
bfd1 cd 32 9d			call macro_dsp_valuehl 
bfd4				endm 
# End of macro FORTH_DSP_VALUEHL
bfd4			 
bfd4			;		push hl 
bfd4			 
bfd4					; destroy value TOS 
bfd4			 
bfd4					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bfd4 cd ea 9d			call macro_forth_dsp_pop 
bfd7				endm 
# End of macro FORTH_DSP_POP
bfd7			 
bfd7			;		pop hl 
bfd7			 
bfd7 7d					ld a,l 
bfd8 32 3c ea				ld (cli_autodisplay), a 
bfdb				       NEXTW 
bfdb c3 e8 9e			jp macro_next 
bfde				endm 
# End of macro NEXTW
bfde			 
bfde			.MENU: 
bfde				CWHEAD .ENDDISPLAY 92 "MENU" 4 WORD_FLAG_CODE 
bfde 70				db WORD_SYS_CORE+92             
bfdf 87 c0			dw .ENDDISPLAY            
bfe1 05				db 4 + 1 
bfe2 .. 00			db "MENU",0              
bfe7				endm 
# End of macro CWHEAD
bfe7			; | MENU ( u1....ux n -- n ) Create a menu. n is the number of menu items on stack. Push number selection to TOS | TODO 
bfe7			 
bfe7			;		; get number of items on the stack 
bfe7			; 
bfe7				 
bfe7					FORTH_DSP_VALUEHL 
bfe7 cd 32 9d			call macro_dsp_valuehl 
bfea				endm 
# End of macro FORTH_DSP_VALUEHL
bfea				 
bfea					if DEBUG_FORTH_WORDS_KEY 
bfea						DMARK "MNU" 
bfea f5				push af  
bfeb 3a ff bf			ld a, (.dmark)  
bfee 32 6b ee			ld (debug_mark),a  
bff1 3a 00 c0			ld a, (.dmark+1)  
bff4 32 6c ee			ld (debug_mark+1),a  
bff7 3a 01 c0			ld a, (.dmark+2)  
bffa 32 6d ee			ld (debug_mark+2),a  
bffd 18 03			jr .pastdmark  
bfff ..			.dmark: db "MNU"  
c002 f1			.pastdmark: pop af  
c003			endm  
# End of macro DMARK
c003						CALLMONITOR 
c003 cd 6f ee			call debug_vector  
c006				endm  
# End of macro CALLMONITOR
c006					endif 
c006			 
c006 45					ld b, l	 
c007 05					dec b 
c008			 
c008					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c008 cd ea 9d			call macro_forth_dsp_pop 
c00b				endm 
# End of macro FORTH_DSP_POP
c00b			 
c00b			 
c00b					; go directly through the stack to pluck out the string pointers and build an array 
c00b			 
c00b			;		FORTH_DSP 
c00b			 
c00b					; hl contains top most stack item 
c00b				 
c00b 11 c1 e2				ld de, scratch 
c00e			 
c00e			.mbuild: 
c00e			 
c00e					FORTH_DSP_VALUEHL 
c00e cd 32 9d			call macro_dsp_valuehl 
c011				endm 
# End of macro FORTH_DSP_VALUEHL
c011			 
c011					if DEBUG_FORTH_WORDS 
c011						DMARK "MN3" 
c011 f5				push af  
c012 3a 26 c0			ld a, (.dmark)  
c015 32 6b ee			ld (debug_mark),a  
c018 3a 27 c0			ld a, (.dmark+1)  
c01b 32 6c ee			ld (debug_mark+1),a  
c01e 3a 28 c0			ld a, (.dmark+2)  
c021 32 6d ee			ld (debug_mark+2),a  
c024 18 03			jr .pastdmark  
c026 ..			.dmark: db "MN3"  
c029 f1			.pastdmark: pop af  
c02a			endm  
# End of macro DMARK
c02a						CALLMONITOR 
c02a cd 6f ee			call debug_vector  
c02d				endm  
# End of macro CALLMONITOR
c02d					endif 
c02d eb					ex de, hl 
c02e 73					ld (hl), e 
c02f 23					inc hl 
c030 72					ld (hl), d 
c031 23					inc hl 
c032 eb					ex de, hl 
c033			 
c033					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c033 cd ea 9d			call macro_forth_dsp_pop 
c036				endm 
# End of macro FORTH_DSP_POP
c036			 
c036 10 d6				djnz .mbuild 
c038			 
c038					; done add term 
c038			 
c038 eb					ex de, hl 
c039 36 00				ld (hl), 0 
c03b 23					inc hl 
c03c 36 00				ld (hl), 0 
c03e			 
c03e				 
c03e					 
c03e 21 c1 e2				ld hl, scratch 
c041			 
c041					if DEBUG_FORTH_WORDS 
c041						DMARK "MNx" 
c041 f5				push af  
c042 3a 56 c0			ld a, (.dmark)  
c045 32 6b ee			ld (debug_mark),a  
c048 3a 57 c0			ld a, (.dmark+1)  
c04b 32 6c ee			ld (debug_mark+1),a  
c04e 3a 58 c0			ld a, (.dmark+2)  
c051 32 6d ee			ld (debug_mark+2),a  
c054 18 03			jr .pastdmark  
c056 ..			.dmark: db "MNx"  
c059 f1			.pastdmark: pop af  
c05a			endm  
# End of macro DMARK
c05a						CALLMONITOR 
c05a cd 6f ee			call debug_vector  
c05d				endm  
# End of macro CALLMONITOR
c05d					endif 
c05d			 
c05d			 
c05d			 
c05d 3e 00				ld a, 0 
c05f cd e0 8a				call menu 
c062			 
c062			 
c062 6f					ld l, a 
c063 26 00				ld h, 0 
c065			 
c065					if DEBUG_FORTH_WORDS 
c065						DMARK "MNr" 
c065 f5				push af  
c066 3a 7a c0			ld a, (.dmark)  
c069 32 6b ee			ld (debug_mark),a  
c06c 3a 7b c0			ld a, (.dmark+1)  
c06f 32 6c ee			ld (debug_mark+1),a  
c072 3a 7c c0			ld a, (.dmark+2)  
c075 32 6d ee			ld (debug_mark+2),a  
c078 18 03			jr .pastdmark  
c07a ..			.dmark: db "MNr"  
c07d f1			.pastdmark: pop af  
c07e			endm  
# End of macro DMARK
c07e						CALLMONITOR 
c07e cd 6f ee			call debug_vector  
c081				endm  
# End of macro CALLMONITOR
c081					endif 
c081			 
c081 cd 3b 9b				call forth_push_numhl 
c084			 
c084			 
c084			 
c084			 
c084				       NEXTW 
c084 c3 e8 9e			jp macro_next 
c087				endm 
# End of macro NEXTW
c087			 
c087			 
c087			.ENDDISPLAY: 
c087			 
c087			; eof 
# End of file forth_words_display.asm
c087			include "forth_words_str.asm" 
c087			 
c087			; | ## String Words 
c087			 
c087			.PTR:   
c087			 
c087				CWHEAD .STYPE 52 "PTR" 3 WORD_FLAG_CODE 
c087 48				db WORD_SYS_CORE+52             
c088 b4 c0			dw .STYPE            
c08a 04				db 3 + 1 
c08b .. 00			db "PTR",0              
c08f				endm 
# End of macro CWHEAD
c08f			; | PTR ( -- addr ) Low level push pointer to the value on TOS | DONE 
c08f			; | | If a string will give the address of the string without dropping it. Handy for direct string access 
c08f			; | | If a number can then use 2@ and 2! for direct value update without using stack words  
c08f			 
c08f					if DEBUG_FORTH_WORDS_KEY 
c08f						DMARK "PTR" 
c08f f5				push af  
c090 3a a4 c0			ld a, (.dmark)  
c093 32 6b ee			ld (debug_mark),a  
c096 3a a5 c0			ld a, (.dmark+1)  
c099 32 6c ee			ld (debug_mark+1),a  
c09c 3a a6 c0			ld a, (.dmark+2)  
c09f 32 6d ee			ld (debug_mark+2),a  
c0a2 18 03			jr .pastdmark  
c0a4 ..			.dmark: db "PTR"  
c0a7 f1			.pastdmark: pop af  
c0a8			endm  
# End of macro DMARK
c0a8						CALLMONITOR 
c0a8 cd 6f ee			call debug_vector  
c0ab				endm  
# End of macro CALLMONITOR
c0ab					endif 
c0ab					FORTH_DSP_VALUEHL 
c0ab cd 32 9d			call macro_dsp_valuehl 
c0ae				endm 
# End of macro FORTH_DSP_VALUEHL
c0ae cd 3b 9b				call forth_push_numhl 
c0b1			 
c0b1			 
c0b1					NEXTW 
c0b1 c3 e8 9e			jp macro_next 
c0b4				endm 
# End of macro NEXTW
c0b4			.STYPE: 
c0b4				CWHEAD .UPPER 52 "STYPE" 5 WORD_FLAG_CODE 
c0b4 48				db WORD_SYS_CORE+52             
c0b5 03 c1			dw .UPPER            
c0b7 06				db 5 + 1 
c0b8 .. 00			db "STYPE",0              
c0be				endm 
# End of macro CWHEAD
c0be			; | STYPE ( u -- u type ) Push type of value on TOS - 's' string, 'i' integer...   | DONE 
c0be					if DEBUG_FORTH_WORDS_KEY 
c0be						DMARK "STY" 
c0be f5				push af  
c0bf 3a d3 c0			ld a, (.dmark)  
c0c2 32 6b ee			ld (debug_mark),a  
c0c5 3a d4 c0			ld a, (.dmark+1)  
c0c8 32 6c ee			ld (debug_mark+1),a  
c0cb 3a d5 c0			ld a, (.dmark+2)  
c0ce 32 6d ee			ld (debug_mark+2),a  
c0d1 18 03			jr .pastdmark  
c0d3 ..			.dmark: db "STY"  
c0d6 f1			.pastdmark: pop af  
c0d7			endm  
# End of macro DMARK
c0d7						CALLMONITOR 
c0d7 cd 6f ee			call debug_vector  
c0da				endm  
# End of macro CALLMONITOR
c0da					endif 
c0da					FORTH_DSP 
c0da cd f8 9c			call macro_forth_dsp 
c0dd				endm 
# End of macro FORTH_DSP
c0dd					;v5 FORTH_DSP_VALUE 
c0dd			 
c0dd 7e					ld a, (hl) 
c0de			 
c0de f5					push af 
c0df			 
c0df			; Dont destroy TOS		FORTH_DSP_POP 
c0df			 
c0df f1					pop af 
c0e0			 
c0e0 fe 01				cp DS_TYPE_STR 
c0e2 28 09				jr z, .typestr 
c0e4			 
c0e4 fe 02				cp DS_TYPE_INUM 
c0e6 28 0a				jr z, .typeinum 
c0e8			 
c0e8 21 01 c1				ld hl, .tna 
c0eb 18 0a				jr .tpush 
c0ed			 
c0ed 21 fd c0		.typestr:	ld hl, .tstr 
c0f0 18 05				jr .tpush 
c0f2 21 ff c0		.typeinum:	ld hl, .tinum 
c0f5 18 00				jr .tpush 
c0f7			 
c0f7			.tpush: 
c0f7			 
c0f7 cd a9 9b				call forth_push_str 
c0fa			 
c0fa					NEXTW 
c0fa c3 e8 9e			jp macro_next 
c0fd				endm 
# End of macro NEXTW
c0fd .. 00		.tstr:	db "s",0 
c0ff .. 00		.tinum:  db "i",0 
c101 .. 00		.tna:   db "?", 0 
c103			 
c103			 
c103			.UPPER: 
c103				CWHEAD .LOWER 52 "UPPER" 5 WORD_FLAG_CODE 
c103 48				db WORD_SYS_CORE+52             
c104 3e c1			dw .LOWER            
c106 06				db 5 + 1 
c107 .. 00			db "UPPER",0              
c10d				endm 
# End of macro CWHEAD
c10d			; | UPPER ( s -- s ) Upper case string s  | DONE 
c10d					if DEBUG_FORTH_WORDS_KEY 
c10d						DMARK "UPR" 
c10d f5				push af  
c10e 3a 22 c1			ld a, (.dmark)  
c111 32 6b ee			ld (debug_mark),a  
c114 3a 23 c1			ld a, (.dmark+1)  
c117 32 6c ee			ld (debug_mark+1),a  
c11a 3a 24 c1			ld a, (.dmark+2)  
c11d 32 6d ee			ld (debug_mark+2),a  
c120 18 03			jr .pastdmark  
c122 ..			.dmark: db "UPR"  
c125 f1			.pastdmark: pop af  
c126			endm  
# End of macro DMARK
c126						CALLMONITOR 
c126 cd 6f ee			call debug_vector  
c129				endm  
# End of macro CALLMONITOR
c129					endif 
c129			 
c129					FORTH_DSP 
c129 cd f8 9c			call macro_forth_dsp 
c12c				endm 
# End of macro FORTH_DSP
c12c					 
c12c			; TODO check is string type 
c12c			 
c12c					FORTH_DSP_VALUEHL 
c12c cd 32 9d			call macro_dsp_valuehl 
c12f				endm 
# End of macro FORTH_DSP_VALUEHL
c12f			; get pointer to string in hl 
c12f			 
c12f 7e			.toup:		ld a, (hl) 
c130 fe 00				cp 0 
c132 28 07				jr z, .toupdone 
c134			 
c134 cd 49 90				call to_upper 
c137			 
c137 77					ld (hl), a 
c138 23					inc hl 
c139 18 f4				jr .toup 
c13b			 
c13b					 
c13b			 
c13b			 
c13b			; for each char convert to upper 
c13b					 
c13b			.toupdone: 
c13b			 
c13b			 
c13b					NEXTW 
c13b c3 e8 9e			jp macro_next 
c13e				endm 
# End of macro NEXTW
c13e			.LOWER: 
c13e				CWHEAD .TCASE 52 "LOWER" 5 WORD_FLAG_CODE 
c13e 48				db WORD_SYS_CORE+52             
c13f 79 c1			dw .TCASE            
c141 06				db 5 + 1 
c142 .. 00			db "LOWER",0              
c148				endm 
# End of macro CWHEAD
c148			; | LOWER ( s -- s ) Lower case string s  | DONE 
c148					if DEBUG_FORTH_WORDS_KEY 
c148						DMARK "LWR" 
c148 f5				push af  
c149 3a 5d c1			ld a, (.dmark)  
c14c 32 6b ee			ld (debug_mark),a  
c14f 3a 5e c1			ld a, (.dmark+1)  
c152 32 6c ee			ld (debug_mark+1),a  
c155 3a 5f c1			ld a, (.dmark+2)  
c158 32 6d ee			ld (debug_mark+2),a  
c15b 18 03			jr .pastdmark  
c15d ..			.dmark: db "LWR"  
c160 f1			.pastdmark: pop af  
c161			endm  
# End of macro DMARK
c161						CALLMONITOR 
c161 cd 6f ee			call debug_vector  
c164				endm  
# End of macro CALLMONITOR
c164					endif 
c164			 
c164					FORTH_DSP 
c164 cd f8 9c			call macro_forth_dsp 
c167				endm 
# End of macro FORTH_DSP
c167					 
c167			; TODO check is string type 
c167			 
c167					FORTH_DSP_VALUEHL 
c167 cd 32 9d			call macro_dsp_valuehl 
c16a				endm 
# End of macro FORTH_DSP_VALUEHL
c16a			; get pointer to string in hl 
c16a			 
c16a 7e			.tolow:		ld a, (hl) 
c16b fe 00				cp 0 
c16d 28 07				jr z, .tolowdone 
c16f			 
c16f cd 52 90				call to_lower 
c172			 
c172 77					ld (hl), a 
c173 23					inc hl 
c174 18 f4				jr .tolow 
c176			 
c176					 
c176			 
c176			 
c176			; for each char convert to low 
c176					 
c176			.tolowdone: 
c176					NEXTW 
c176 c3 e8 9e			jp macro_next 
c179				endm 
# End of macro NEXTW
c179			.TCASE: 
c179				CWHEAD .SUBSTR 52 "TCASE" 5 WORD_FLAG_CODE 
c179 48				db WORD_SYS_CORE+52             
c17a af c2			dw .SUBSTR            
c17c 06				db 5 + 1 
c17d .. 00			db "TCASE",0              
c183				endm 
# End of macro CWHEAD
c183			; | TCASE ( s -- s ) Title case string s  | DONE 
c183					if DEBUG_FORTH_WORDS_KEY 
c183						DMARK "TCS" 
c183 f5				push af  
c184 3a 98 c1			ld a, (.dmark)  
c187 32 6b ee			ld (debug_mark),a  
c18a 3a 99 c1			ld a, (.dmark+1)  
c18d 32 6c ee			ld (debug_mark+1),a  
c190 3a 9a c1			ld a, (.dmark+2)  
c193 32 6d ee			ld (debug_mark+2),a  
c196 18 03			jr .pastdmark  
c198 ..			.dmark: db "TCS"  
c19b f1			.pastdmark: pop af  
c19c			endm  
# End of macro DMARK
c19c						CALLMONITOR 
c19c cd 6f ee			call debug_vector  
c19f				endm  
# End of macro CALLMONITOR
c19f					endif 
c19f			 
c19f					FORTH_DSP 
c19f cd f8 9c			call macro_forth_dsp 
c1a2				endm 
# End of macro FORTH_DSP
c1a2					 
c1a2			; TODO check is string type 
c1a2			 
c1a2					FORTH_DSP_VALUEHL 
c1a2 cd 32 9d			call macro_dsp_valuehl 
c1a5				endm 
# End of macro FORTH_DSP_VALUEHL
c1a5			; get pointer to string in hl 
c1a5			 
c1a5					if DEBUG_FORTH_WORDS 
c1a5						DMARK "TC1" 
c1a5 f5				push af  
c1a6 3a ba c1			ld a, (.dmark)  
c1a9 32 6b ee			ld (debug_mark),a  
c1ac 3a bb c1			ld a, (.dmark+1)  
c1af 32 6c ee			ld (debug_mark+1),a  
c1b2 3a bc c1			ld a, (.dmark+2)  
c1b5 32 6d ee			ld (debug_mark+2),a  
c1b8 18 03			jr .pastdmark  
c1ba ..			.dmark: db "TC1"  
c1bd f1			.pastdmark: pop af  
c1be			endm  
# End of macro DMARK
c1be						CALLMONITOR 
c1be cd 6f ee			call debug_vector  
c1c1				endm  
# End of macro CALLMONITOR
c1c1					endif 
c1c1			 
c1c1					; first time in turn to upper case first char 
c1c1			 
c1c1 7e					ld a, (hl) 
c1c2 c3 4c c2				jp .totsiptou 
c1c5			 
c1c5			 
c1c5 7e			.tot:		ld a, (hl) 
c1c6 fe 00				cp 0 
c1c8 ca 90 c2				jp z, .totdone 
c1cb			 
c1cb					if DEBUG_FORTH_WORDS 
c1cb						DMARK "TC2" 
c1cb f5				push af  
c1cc 3a e0 c1			ld a, (.dmark)  
c1cf 32 6b ee			ld (debug_mark),a  
c1d2 3a e1 c1			ld a, (.dmark+1)  
c1d5 32 6c ee			ld (debug_mark+1),a  
c1d8 3a e2 c1			ld a, (.dmark+2)  
c1db 32 6d ee			ld (debug_mark+2),a  
c1de 18 03			jr .pastdmark  
c1e0 ..			.dmark: db "TC2"  
c1e3 f1			.pastdmark: pop af  
c1e4			endm  
# End of macro DMARK
c1e4						CALLMONITOR 
c1e4 cd 6f ee			call debug_vector  
c1e7				endm  
# End of macro CALLMONITOR
c1e7					endif 
c1e7					; check to see if current char is a space 
c1e7			 
c1e7 fe 20				cp ' ' 
c1e9 28 21				jr z, .totsp 
c1eb cd 52 90				call to_lower 
c1ee					if DEBUG_FORTH_WORDS 
c1ee						DMARK "TC3" 
c1ee f5				push af  
c1ef 3a 03 c2			ld a, (.dmark)  
c1f2 32 6b ee			ld (debug_mark),a  
c1f5 3a 04 c2			ld a, (.dmark+1)  
c1f8 32 6c ee			ld (debug_mark+1),a  
c1fb 3a 05 c2			ld a, (.dmark+2)  
c1fe 32 6d ee			ld (debug_mark+2),a  
c201 18 03			jr .pastdmark  
c203 ..			.dmark: db "TC3"  
c206 f1			.pastdmark: pop af  
c207			endm  
# End of macro DMARK
c207						CALLMONITOR 
c207 cd 6f ee			call debug_vector  
c20a				endm  
# End of macro CALLMONITOR
c20a					endif 
c20a 18 63				jr .totnxt 
c20c			 
c20c			.totsp:         ; on a space, find next char which should be upper 
c20c			 
c20c					if DEBUG_FORTH_WORDS 
c20c						DMARK "TC4" 
c20c f5				push af  
c20d 3a 21 c2			ld a, (.dmark)  
c210 32 6b ee			ld (debug_mark),a  
c213 3a 22 c2			ld a, (.dmark+1)  
c216 32 6c ee			ld (debug_mark+1),a  
c219 3a 23 c2			ld a, (.dmark+2)  
c21c 32 6d ee			ld (debug_mark+2),a  
c21f 18 03			jr .pastdmark  
c221 ..			.dmark: db "TC4"  
c224 f1			.pastdmark: pop af  
c225			endm  
# End of macro DMARK
c225						CALLMONITOR 
c225 cd 6f ee			call debug_vector  
c228				endm  
# End of macro CALLMONITOR
c228					endif 
c228					;; 
c228			 
c228 fe 20				cp ' ' 
c22a 20 20				jr nz, .totsiptou 
c22c 23					inc hl 
c22d 7e					ld a, (hl) 
c22e					if DEBUG_FORTH_WORDS 
c22e						DMARK "TC5" 
c22e f5				push af  
c22f 3a 43 c2			ld a, (.dmark)  
c232 32 6b ee			ld (debug_mark),a  
c235 3a 44 c2			ld a, (.dmark+1)  
c238 32 6c ee			ld (debug_mark+1),a  
c23b 3a 45 c2			ld a, (.dmark+2)  
c23e 32 6d ee			ld (debug_mark+2),a  
c241 18 03			jr .pastdmark  
c243 ..			.dmark: db "TC5"  
c246 f1			.pastdmark: pop af  
c247			endm  
# End of macro DMARK
c247						CALLMONITOR 
c247 cd 6f ee			call debug_vector  
c24a				endm  
# End of macro CALLMONITOR
c24a					endif 
c24a 18 c0				jr .totsp 
c24c fe 00		.totsiptou:    cp 0 
c24e 28 40				jr z, .totdone 
c250					; not space and not zero term so upper case it 
c250 cd 49 90				call to_upper 
c253			 
c253					if DEBUG_FORTH_WORDS 
c253						DMARK "TC6" 
c253 f5				push af  
c254 3a 68 c2			ld a, (.dmark)  
c257 32 6b ee			ld (debug_mark),a  
c25a 3a 69 c2			ld a, (.dmark+1)  
c25d 32 6c ee			ld (debug_mark+1),a  
c260 3a 6a c2			ld a, (.dmark+2)  
c263 32 6d ee			ld (debug_mark+2),a  
c266 18 03			jr .pastdmark  
c268 ..			.dmark: db "TC6"  
c26b f1			.pastdmark: pop af  
c26c			endm  
# End of macro DMARK
c26c						CALLMONITOR 
c26c cd 6f ee			call debug_vector  
c26f				endm  
# End of macro CALLMONITOR
c26f					endif 
c26f			 
c26f			 
c26f			.totnxt: 
c26f			 
c26f 77					ld (hl), a 
c270 23					inc hl 
c271					if DEBUG_FORTH_WORDS 
c271						DMARK "TC7" 
c271 f5				push af  
c272 3a 86 c2			ld a, (.dmark)  
c275 32 6b ee			ld (debug_mark),a  
c278 3a 87 c2			ld a, (.dmark+1)  
c27b 32 6c ee			ld (debug_mark+1),a  
c27e 3a 88 c2			ld a, (.dmark+2)  
c281 32 6d ee			ld (debug_mark+2),a  
c284 18 03			jr .pastdmark  
c286 ..			.dmark: db "TC7"  
c289 f1			.pastdmark: pop af  
c28a			endm  
# End of macro DMARK
c28a						CALLMONITOR 
c28a cd 6f ee			call debug_vector  
c28d				endm  
# End of macro CALLMONITOR
c28d					endif 
c28d c3 c5 c1				jp .tot 
c290			 
c290					 
c290			 
c290			 
c290			; for each char convert to low 
c290					 
c290			.totdone: 
c290					if DEBUG_FORTH_WORDS 
c290						DMARK "TCd" 
c290 f5				push af  
c291 3a a5 c2			ld a, (.dmark)  
c294 32 6b ee			ld (debug_mark),a  
c297 3a a6 c2			ld a, (.dmark+1)  
c29a 32 6c ee			ld (debug_mark+1),a  
c29d 3a a7 c2			ld a, (.dmark+2)  
c2a0 32 6d ee			ld (debug_mark+2),a  
c2a3 18 03			jr .pastdmark  
c2a5 ..			.dmark: db "TCd"  
c2a8 f1			.pastdmark: pop af  
c2a9			endm  
# End of macro DMARK
c2a9						CALLMONITOR 
c2a9 cd 6f ee			call debug_vector  
c2ac				endm  
# End of macro CALLMONITOR
c2ac					endif 
c2ac					NEXTW 
c2ac c3 e8 9e			jp macro_next 
c2af				endm 
# End of macro NEXTW
c2af			 
c2af			.SUBSTR: 
c2af				CWHEAD .LEFT 52 "SUBSTR" 6 WORD_FLAG_CODE 
c2af 48				db WORD_SYS_CORE+52             
c2b0 0d c3			dw .LEFT            
c2b2 07				db 6 + 1 
c2b3 .. 00			db "SUBSTR",0              
c2ba				endm 
# End of macro CWHEAD
c2ba			; | SUBSTR ( s u1 u2 -- s sb ) Push to TOS chars starting at position u1 and with length u2 from string s  | DONE 
c2ba			 
c2ba					if DEBUG_FORTH_WORDS_KEY 
c2ba						DMARK "SST" 
c2ba f5				push af  
c2bb 3a cf c2			ld a, (.dmark)  
c2be 32 6b ee			ld (debug_mark),a  
c2c1 3a d0 c2			ld a, (.dmark+1)  
c2c4 32 6c ee			ld (debug_mark+1),a  
c2c7 3a d1 c2			ld a, (.dmark+2)  
c2ca 32 6d ee			ld (debug_mark+2),a  
c2cd 18 03			jr .pastdmark  
c2cf ..			.dmark: db "SST"  
c2d2 f1			.pastdmark: pop af  
c2d3			endm  
# End of macro DMARK
c2d3						CALLMONITOR 
c2d3 cd 6f ee			call debug_vector  
c2d6				endm  
# End of macro CALLMONITOR
c2d6					endif 
c2d6			; TODO check string type 
c2d6					FORTH_DSP_VALUEHL 
c2d6 cd 32 9d			call macro_dsp_valuehl 
c2d9				endm 
# End of macro FORTH_DSP_VALUEHL
c2d9			 
c2d9 e5					push hl      ; string length 
c2da			 
c2da					FORTH_DSP_POP 
c2da cd ea 9d			call macro_forth_dsp_pop 
c2dd				endm 
# End of macro FORTH_DSP_POP
c2dd			 
c2dd					FORTH_DSP_VALUEHL 
c2dd cd 32 9d			call macro_dsp_valuehl 
c2e0				endm 
# End of macro FORTH_DSP_VALUEHL
c2e0			 
c2e0 e5					push hl     ; start char 
c2e1			 
c2e1					FORTH_DSP_POP 
c2e1 cd ea 9d			call macro_forth_dsp_pop 
c2e4				endm 
# End of macro FORTH_DSP_POP
c2e4			 
c2e4			 
c2e4					FORTH_DSP_VALUE 
c2e4 cd 1b 9d			call macro_forth_dsp_value 
c2e7				endm 
# End of macro FORTH_DSP_VALUE
c2e7			 
c2e7 d1					pop de    ; get start post offset 
c2e8			 
c2e8 19					add hl, de    ; starting offset 
c2e9			 
c2e9 c1					pop bc 
c2ea c5					push bc      ; grab size of string 
c2eb			 
c2eb e5					push hl    ; save string start  
c2ec			 
c2ec 26 00				ld h, 0 
c2ee 69					ld l, c 
c2ef 23					inc hl 
c2f0 23					inc hl 
c2f1			 
c2f1 cd a3 91				call malloc 
c2f4				if DEBUG_FORTH_MALLOC_GUARD 
c2f4 cc 27 cc				call z,malloc_error 
c2f7				endif 
c2f7			 
c2f7 eb					ex de, hl      ; save malloc area for string copy 
c2f8 e1					pop hl    ; get back source 
c2f9 c1					pop bc    ; get length of string back 
c2fa			 
c2fa d5					push de    ; save malloc area for after we push 
c2fb ed b0				ldir     ; copy substr 
c2fd			 
c2fd			 
c2fd eb					ex de, hl 
c2fe 3e 00				ld a, 0 
c300 77					ld (hl), a   ; term substr 
c301			 
c301					 
c301 e1					pop hl    ; get malloc so we can push it 
c302 e5					push hl   ; save so we can free it afterwards 
c303			 
c303 cd a9 9b				call forth_push_str 
c306			 
c306 e1					pop hl 
c307 cd 6d 92				call free 
c30a			 
c30a					 
c30a					 
c30a			 
c30a			 
c30a					NEXTW 
c30a c3 e8 9e			jp macro_next 
c30d				endm 
# End of macro NEXTW
c30d			 
c30d			.LEFT: 
c30d				CWHEAD .RIGHT 52 "LEFT" 4 WORD_FLAG_CODE 
c30d 48				db WORD_SYS_CORE+52             
c30e 35 c3			dw .RIGHT            
c310 05				db 4 + 1 
c311 .. 00			db "LEFT",0              
c316				endm 
# End of macro CWHEAD
c316			; | LEFT ( s u -- s sub ) Push to TOS string u long starting from left of s  | TODO 
c316					if DEBUG_FORTH_WORDS_KEY 
c316						DMARK "LEF" 
c316 f5				push af  
c317 3a 2b c3			ld a, (.dmark)  
c31a 32 6b ee			ld (debug_mark),a  
c31d 3a 2c c3			ld a, (.dmark+1)  
c320 32 6c ee			ld (debug_mark+1),a  
c323 3a 2d c3			ld a, (.dmark+2)  
c326 32 6d ee			ld (debug_mark+2),a  
c329 18 03			jr .pastdmark  
c32b ..			.dmark: db "LEF"  
c32e f1			.pastdmark: pop af  
c32f			endm  
# End of macro DMARK
c32f						CALLMONITOR 
c32f cd 6f ee			call debug_vector  
c332				endm  
# End of macro CALLMONITOR
c332					endif 
c332			 
c332					NEXTW 
c332 c3 e8 9e			jp macro_next 
c335				endm 
# End of macro NEXTW
c335			.RIGHT: 
c335				CWHEAD .STR2NUM 52 "RIGHT" 5 WORD_FLAG_CODE 
c335 48				db WORD_SYS_CORE+52             
c336 5e c3			dw .STR2NUM            
c338 06				db 5 + 1 
c339 .. 00			db "RIGHT",0              
c33f				endm 
# End of macro CWHEAD
c33f			; | RIGHT ( s u -- s sub ) Push to TOS string u long starting from right of s  | TODO 
c33f					if DEBUG_FORTH_WORDS_KEY 
c33f						DMARK "RIG" 
c33f f5				push af  
c340 3a 54 c3			ld a, (.dmark)  
c343 32 6b ee			ld (debug_mark),a  
c346 3a 55 c3			ld a, (.dmark+1)  
c349 32 6c ee			ld (debug_mark+1),a  
c34c 3a 56 c3			ld a, (.dmark+2)  
c34f 32 6d ee			ld (debug_mark+2),a  
c352 18 03			jr .pastdmark  
c354 ..			.dmark: db "RIG"  
c357 f1			.pastdmark: pop af  
c358			endm  
# End of macro DMARK
c358						CALLMONITOR 
c358 cd 6f ee			call debug_vector  
c35b				endm  
# End of macro CALLMONITOR
c35b					endif 
c35b			 
c35b					NEXTW 
c35b c3 e8 9e			jp macro_next 
c35e				endm 
# End of macro NEXTW
c35e			 
c35e			 
c35e			.STR2NUM: 
c35e				CWHEAD .NUM2STR 52 "STR2NUM" 7 WORD_FLAG_CODE 
c35e 48				db WORD_SYS_CORE+52             
c35f ea c3			dw .NUM2STR            
c361 08				db 7 + 1 
c362 .. 00			db "STR2NUM",0              
c36a				endm 
# End of macro CWHEAD
c36a			; | STR2NUM ( s -- n ) Convert a string on TOS to number | DONE 
c36a			 
c36a			 
c36a			; TODO STR type check to do 
c36a					if DEBUG_FORTH_WORDS_KEY 
c36a						DMARK "S2N" 
c36a f5				push af  
c36b 3a 7f c3			ld a, (.dmark)  
c36e 32 6b ee			ld (debug_mark),a  
c371 3a 80 c3			ld a, (.dmark+1)  
c374 32 6c ee			ld (debug_mark+1),a  
c377 3a 81 c3			ld a, (.dmark+2)  
c37a 32 6d ee			ld (debug_mark+2),a  
c37d 18 03			jr .pastdmark  
c37f ..			.dmark: db "S2N"  
c382 f1			.pastdmark: pop af  
c383			endm  
# End of macro DMARK
c383						CALLMONITOR 
c383 cd 6f ee			call debug_vector  
c386				endm  
# End of macro CALLMONITOR
c386					endif 
c386			 
c386					;FORTH_DSP 
c386					FORTH_DSP_VALUE 
c386 cd 1b 9d			call macro_forth_dsp_value 
c389				endm 
# End of macro FORTH_DSP_VALUE
c389					;inc hl 
c389			 
c389 eb					ex de, hl 
c38a					if DEBUG_FORTH_WORDS 
c38a						DMARK "S2a" 
c38a f5				push af  
c38b 3a 9f c3			ld a, (.dmark)  
c38e 32 6b ee			ld (debug_mark),a  
c391 3a a0 c3			ld a, (.dmark+1)  
c394 32 6c ee			ld (debug_mark+1),a  
c397 3a a1 c3			ld a, (.dmark+2)  
c39a 32 6d ee			ld (debug_mark+2),a  
c39d 18 03			jr .pastdmark  
c39f ..			.dmark: db "S2a"  
c3a2 f1			.pastdmark: pop af  
c3a3			endm  
# End of macro DMARK
c3a3						CALLMONITOR 
c3a3 cd 6f ee			call debug_vector  
c3a6				endm  
# End of macro CALLMONITOR
c3a6					endif 
c3a6 cd d1 90				call string_to_uint16 
c3a9			 
c3a9					if DEBUG_FORTH_WORDS 
c3a9						DMARK "S2b" 
c3a9 f5				push af  
c3aa 3a be c3			ld a, (.dmark)  
c3ad 32 6b ee			ld (debug_mark),a  
c3b0 3a bf c3			ld a, (.dmark+1)  
c3b3 32 6c ee			ld (debug_mark+1),a  
c3b6 3a c0 c3			ld a, (.dmark+2)  
c3b9 32 6d ee			ld (debug_mark+2),a  
c3bc 18 03			jr .pastdmark  
c3be ..			.dmark: db "S2b"  
c3c1 f1			.pastdmark: pop af  
c3c2			endm  
# End of macro DMARK
c3c2						CALLMONITOR 
c3c2 cd 6f ee			call debug_vector  
c3c5				endm  
# End of macro CALLMONITOR
c3c5					endif 
c3c5			;		push hl 
c3c5					FORTH_DSP_POP 
c3c5 cd ea 9d			call macro_forth_dsp_pop 
c3c8				endm 
# End of macro FORTH_DSP_POP
c3c8			;		pop hl 
c3c8					 
c3c8					if DEBUG_FORTH_WORDS 
c3c8						DMARK "S2b" 
c3c8 f5				push af  
c3c9 3a dd c3			ld a, (.dmark)  
c3cc 32 6b ee			ld (debug_mark),a  
c3cf 3a de c3			ld a, (.dmark+1)  
c3d2 32 6c ee			ld (debug_mark+1),a  
c3d5 3a df c3			ld a, (.dmark+2)  
c3d8 32 6d ee			ld (debug_mark+2),a  
c3db 18 03			jr .pastdmark  
c3dd ..			.dmark: db "S2b"  
c3e0 f1			.pastdmark: pop af  
c3e1			endm  
# End of macro DMARK
c3e1						CALLMONITOR 
c3e1 cd 6f ee			call debug_vector  
c3e4				endm  
# End of macro CALLMONITOR
c3e4					endif 
c3e4 cd 3b 9b				call forth_push_numhl	 
c3e7			 
c3e7				 
c3e7				       NEXTW 
c3e7 c3 e8 9e			jp macro_next 
c3ea				endm 
# End of macro NEXTW
c3ea			.NUM2STR: 
c3ea				CWHEAD .CONCAT 52 "NUM2STR" 7 WORD_FLAG_CODE 
c3ea 48				db WORD_SYS_CORE+52             
c3eb f9 c3			dw .CONCAT            
c3ed 08				db 7 + 1 
c3ee .. 00			db "NUM2STR",0              
c3f6				endm 
# End of macro CWHEAD
c3f6			; | NUM2STR ( n -- s ) Convert a number on TOS to string | NOT DOING 
c3f6			 
c3f6			;		; malloc a string to target 
c3f6			;		ld hl, 10     ; TODO max string size should be fine 
c3f6			;		call malloc 
c3f6			;		push hl    ; save malloc location 
c3f6			; 
c3f6			; 
c3f6			;; TODO check int type 
c3f6			;		FORTH_DSP_VALUEHL 
c3f6			;		ld a, l 
c3f6			;		call DispAToASCII   
c3f6			;;TODO need to chage above call to dump into string 
c3f6			; 
c3f6			; 
c3f6			 
c3f6				       NEXTW 
c3f6 c3 e8 9e			jp macro_next 
c3f9				endm 
# End of macro NEXTW
c3f9			 
c3f9			.CONCAT: 
c3f9				CWHEAD .FIND 52 "CONCAT" 6 WORD_FLAG_CODE 
c3f9 48				db WORD_SYS_CORE+52             
c3fa ac c4			dw .FIND            
c3fc 07				db 6 + 1 
c3fd .. 00			db "CONCAT",0              
c404				endm 
# End of macro CWHEAD
c404			; | CONCAT ( s1 s2 -- s3 ) A s1 + s2 is pushed onto the stack | DONE 
c404			 
c404			; TODO check string type 
c404			; TODO create macro to get pointer for next item on stack. Handy for lots of things 
c404			 
c404					if DEBUG_FORTH_WORDS_KEY 
c404						DMARK "CON" 
c404 f5				push af  
c405 3a 19 c4			ld a, (.dmark)  
c408 32 6b ee			ld (debug_mark),a  
c40b 3a 1a c4			ld a, (.dmark+1)  
c40e 32 6c ee			ld (debug_mark+1),a  
c411 3a 1b c4			ld a, (.dmark+2)  
c414 32 6d ee			ld (debug_mark+2),a  
c417 18 03			jr .pastdmark  
c419 ..			.dmark: db "CON"  
c41c f1			.pastdmark: pop af  
c41d			endm  
# End of macro DMARK
c41d						CALLMONITOR 
c41d cd 6f ee			call debug_vector  
c420				endm  
# End of macro CALLMONITOR
c420					endif 
c420			 
c420			 
c420					FORTH_DSP_VALUE 
c420 cd 1b 9d			call macro_forth_dsp_value 
c423				endm 
# End of macro FORTH_DSP_VALUE
c423 e5					push hl   ; s2 
c424			 
c424					FORTH_DSP_POP 
c424 cd ea 9d			call macro_forth_dsp_pop 
c427				endm 
# End of macro FORTH_DSP_POP
c427			 
c427					FORTH_DSP_VALUE 
c427 cd 1b 9d			call macro_forth_dsp_value 
c42a				endm 
# End of macro FORTH_DSP_VALUE
c42a			 
c42a e5					push hl   ; s1 
c42b			 
c42b					FORTH_DSP_POP 
c42b cd ea 9d			call macro_forth_dsp_pop 
c42e				endm 
# End of macro FORTH_DSP_POP
c42e					 
c42e			 
c42e					; copy s1 
c42e			 
c42e				 
c42e					; save ptr 
c42e e1					pop hl  
c42f e5					push hl 
c430 3e 00				ld a, 0 
c432 cd 45 91				call strlent 
c435					;inc hl    ; zer0 
c435 06 00				ld b, 0 
c437 4d					ld c, l 
c438 e1					pop hl		 
c439 11 c1 e2				ld de, scratch	 
c43c					if DEBUG_FORTH_WORDS 
c43c						DMARK "CO1" 
c43c f5				push af  
c43d 3a 51 c4			ld a, (.dmark)  
c440 32 6b ee			ld (debug_mark),a  
c443 3a 52 c4			ld a, (.dmark+1)  
c446 32 6c ee			ld (debug_mark+1),a  
c449 3a 53 c4			ld a, (.dmark+2)  
c44c 32 6d ee			ld (debug_mark+2),a  
c44f 18 03			jr .pastdmark  
c451 ..			.dmark: db "CO1"  
c454 f1			.pastdmark: pop af  
c455			endm  
# End of macro DMARK
c455						CALLMONITOR 
c455 cd 6f ee			call debug_vector  
c458				endm  
# End of macro CALLMONITOR
c458					endif 
c458 ed b0				ldir 
c45a			 
c45a e1					pop hl 
c45b e5					push hl 
c45c d5					push de 
c45d			 
c45d			 
c45d 3e 00				ld a, 0 
c45f cd 45 91				call strlent 
c462 23					inc hl    ; zer0 
c463 23					inc hl 
c464 06 00				ld b, 0 
c466 4d					ld c, l 
c467 d1					pop de 
c468 e1					pop hl		 
c469					if DEBUG_FORTH_WORDS 
c469						DMARK "CO2" 
c469 f5				push af  
c46a 3a 7e c4			ld a, (.dmark)  
c46d 32 6b ee			ld (debug_mark),a  
c470 3a 7f c4			ld a, (.dmark+1)  
c473 32 6c ee			ld (debug_mark+1),a  
c476 3a 80 c4			ld a, (.dmark+2)  
c479 32 6d ee			ld (debug_mark+2),a  
c47c 18 03			jr .pastdmark  
c47e ..			.dmark: db "CO2"  
c481 f1			.pastdmark: pop af  
c482			endm  
# End of macro DMARK
c482						CALLMONITOR 
c482 cd 6f ee			call debug_vector  
c485				endm  
# End of macro CALLMONITOR
c485					endif 
c485 ed b0				ldir 
c487			 
c487			 
c487			 
c487 21 c1 e2				ld hl, scratch 
c48a					if DEBUG_FORTH_WORDS 
c48a						DMARK "CO5" 
c48a f5				push af  
c48b 3a 9f c4			ld a, (.dmark)  
c48e 32 6b ee			ld (debug_mark),a  
c491 3a a0 c4			ld a, (.dmark+1)  
c494 32 6c ee			ld (debug_mark+1),a  
c497 3a a1 c4			ld a, (.dmark+2)  
c49a 32 6d ee			ld (debug_mark+2),a  
c49d 18 03			jr .pastdmark  
c49f ..			.dmark: db "CO5"  
c4a2 f1			.pastdmark: pop af  
c4a3			endm  
# End of macro DMARK
c4a3						CALLMONITOR 
c4a3 cd 6f ee			call debug_vector  
c4a6				endm  
# End of macro CALLMONITOR
c4a6					endif 
c4a6			 
c4a6 cd a9 9b				call forth_push_str 
c4a9			 
c4a9			 
c4a9			 
c4a9			 
c4a9				       NEXTW 
c4a9 c3 e8 9e			jp macro_next 
c4ac				endm 
# End of macro NEXTW
c4ac			 
c4ac			 
c4ac			.FIND: 
c4ac				CWHEAD .LEN 55 "FIND" 4 WORD_FLAG_CODE 
c4ac 4b				db WORD_SYS_CORE+55             
c4ad 6a c5			dw .LEN            
c4af 05				db 4 + 1 
c4b0 .. 00			db "FIND",0              
c4b5				endm 
# End of macro CWHEAD
c4b5			; | FIND ( s c -- s u ) Search the string s for the char c and push the position of the first occurance to TOS | DONE 
c4b5			 
c4b5					if DEBUG_FORTH_WORDS_KEY 
c4b5						DMARK "FND" 
c4b5 f5				push af  
c4b6 3a ca c4			ld a, (.dmark)  
c4b9 32 6b ee			ld (debug_mark),a  
c4bc 3a cb c4			ld a, (.dmark+1)  
c4bf 32 6c ee			ld (debug_mark+1),a  
c4c2 3a cc c4			ld a, (.dmark+2)  
c4c5 32 6d ee			ld (debug_mark+2),a  
c4c8 18 03			jr .pastdmark  
c4ca ..			.dmark: db "FND"  
c4cd f1			.pastdmark: pop af  
c4ce			endm  
# End of macro DMARK
c4ce						CALLMONITOR 
c4ce cd 6f ee			call debug_vector  
c4d1				endm  
# End of macro CALLMONITOR
c4d1					endif 
c4d1			 
c4d1			; TODO check string type 
c4d1					FORTH_DSP_VALUE 
c4d1 cd 1b 9d			call macro_forth_dsp_value 
c4d4				endm 
# End of macro FORTH_DSP_VALUE
c4d4			 
c4d4 e5					push hl    
c4d5 7e					ld a,(hl)    ; char to find   
c4d6			; TODO change char to substr 
c4d6			 
c4d6 f5					push af 
c4d7					 
c4d7			 
c4d7			 
c4d7					if DEBUG_FORTH_WORDS 
c4d7						DMARK "FN1" 
c4d7 f5				push af  
c4d8 3a ec c4			ld a, (.dmark)  
c4db 32 6b ee			ld (debug_mark),a  
c4de 3a ed c4			ld a, (.dmark+1)  
c4e1 32 6c ee			ld (debug_mark+1),a  
c4e4 3a ee c4			ld a, (.dmark+2)  
c4e7 32 6d ee			ld (debug_mark+2),a  
c4ea 18 03			jr .pastdmark  
c4ec ..			.dmark: db "FN1"  
c4ef f1			.pastdmark: pop af  
c4f0			endm  
# End of macro DMARK
c4f0						CALLMONITOR 
c4f0 cd 6f ee			call debug_vector  
c4f3				endm  
# End of macro CALLMONITOR
c4f3					endif 
c4f3			 
c4f3					FORTH_DSP_POP 
c4f3 cd ea 9d			call macro_forth_dsp_pop 
c4f6				endm 
# End of macro FORTH_DSP_POP
c4f6			 
c4f6					; string to search 
c4f6			 
c4f6					FORTH_DSP_VALUE 
c4f6 cd 1b 9d			call macro_forth_dsp_value 
c4f9				endm 
# End of macro FORTH_DSP_VALUE
c4f9			 
c4f9 d1					pop de  ; d is char to find  
c4fa			 
c4fa					if DEBUG_FORTH_WORDS 
c4fa						DMARK "FN2" 
c4fa f5				push af  
c4fb 3a 0f c5			ld a, (.dmark)  
c4fe 32 6b ee			ld (debug_mark),a  
c501 3a 10 c5			ld a, (.dmark+1)  
c504 32 6c ee			ld (debug_mark+1),a  
c507 3a 11 c5			ld a, (.dmark+2)  
c50a 32 6d ee			ld (debug_mark+2),a  
c50d 18 03			jr .pastdmark  
c50f ..			.dmark: db "FN2"  
c512 f1			.pastdmark: pop af  
c513			endm  
# End of macro DMARK
c513						CALLMONITOR 
c513 cd 6f ee			call debug_vector  
c516				endm  
# End of macro CALLMONITOR
c516					endif 
c516					 
c516 01 00 00				ld bc, 0 
c519 7e			.findchar:      ld a,(hl) 
c51a fe 00				cp 0   		 
c51c 28 27				jr z, .finddone     
c51e ba					cp d 
c51f 28 20				jr z, .foundchar 
c521 03					inc bc 
c522 23					inc hl 
c523					if DEBUG_FORTH_WORDS 
c523						DMARK "FN3" 
c523 f5				push af  
c524 3a 38 c5			ld a, (.dmark)  
c527 32 6b ee			ld (debug_mark),a  
c52a 3a 39 c5			ld a, (.dmark+1)  
c52d 32 6c ee			ld (debug_mark+1),a  
c530 3a 3a c5			ld a, (.dmark+2)  
c533 32 6d ee			ld (debug_mark+2),a  
c536 18 03			jr .pastdmark  
c538 ..			.dmark: db "FN3"  
c53b f1			.pastdmark: pop af  
c53c			endm  
# End of macro DMARK
c53c						CALLMONITOR 
c53c cd 6f ee			call debug_vector  
c53f				endm  
# End of macro CALLMONITOR
c53f					endif 
c53f 18 d8				jr .findchar 
c541			 
c541			 
c541 c5			.foundchar:	push bc 
c542 e1					pop hl 
c543 18 03				jr .findexit 
c545			 
c545			 
c545							 
c545			 
c545			.finddone:     ; got to end of string with no find 
c545 21 00 00				ld hl, 0 
c548			.findexit: 
c548			 
c548					if DEBUG_FORTH_WORDS 
c548						DMARK "FNd" 
c548 f5				push af  
c549 3a 5d c5			ld a, (.dmark)  
c54c 32 6b ee			ld (debug_mark),a  
c54f 3a 5e c5			ld a, (.dmark+1)  
c552 32 6c ee			ld (debug_mark+1),a  
c555 3a 5f c5			ld a, (.dmark+2)  
c558 32 6d ee			ld (debug_mark+2),a  
c55b 18 03			jr .pastdmark  
c55d ..			.dmark: db "FNd"  
c560 f1			.pastdmark: pop af  
c561			endm  
# End of macro DMARK
c561						CALLMONITOR 
c561 cd 6f ee			call debug_vector  
c564				endm  
# End of macro CALLMONITOR
c564					endif 
c564 cd 3b 9b			call forth_push_numhl 
c567			 
c567				       NEXTW 
c567 c3 e8 9e			jp macro_next 
c56a				endm 
# End of macro NEXTW
c56a			 
c56a			.LEN: 
c56a				CWHEAD .ASC 56 "COUNT" 5 WORD_FLAG_CODE 
c56a 4c				db WORD_SYS_CORE+56             
c56b d4 c5			dw .ASC            
c56d 06				db 5 + 1 
c56e .. 00			db "COUNT",0              
c574				endm 
# End of macro CWHEAD
c574			; | COUNT (  str -- str u1 ) Push the length of the string str on TOS as u1 | DONE 
c574			 
c574					if DEBUG_FORTH_WORDS_KEY 
c574						DMARK "CNT" 
c574 f5				push af  
c575 3a 89 c5			ld a, (.dmark)  
c578 32 6b ee			ld (debug_mark),a  
c57b 3a 8a c5			ld a, (.dmark+1)  
c57e 32 6c ee			ld (debug_mark+1),a  
c581 3a 8b c5			ld a, (.dmark+2)  
c584 32 6d ee			ld (debug_mark+2),a  
c587 18 03			jr .pastdmark  
c589 ..			.dmark: db "CNT"  
c58c f1			.pastdmark: pop af  
c58d			endm  
# End of macro DMARK
c58d						CALLMONITOR 
c58d cd 6f ee			call debug_vector  
c590				endm  
# End of macro CALLMONITOR
c590					endif 
c590			; TODO check string type 
c590					FORTH_DSP_VALUE 
c590 cd 1b 9d			call macro_forth_dsp_value 
c593				endm 
# End of macro FORTH_DSP_VALUE
c593			 
c593			 
c593					if DEBUG_FORTH_WORDS 
c593						DMARK "CN?" 
c593 f5				push af  
c594 3a a8 c5			ld a, (.dmark)  
c597 32 6b ee			ld (debug_mark),a  
c59a 3a a9 c5			ld a, (.dmark+1)  
c59d 32 6c ee			ld (debug_mark+1),a  
c5a0 3a aa c5			ld a, (.dmark+2)  
c5a3 32 6d ee			ld (debug_mark+2),a  
c5a6 18 03			jr .pastdmark  
c5a8 ..			.dmark: db "CN?"  
c5ab f1			.pastdmark: pop af  
c5ac			endm  
# End of macro DMARK
c5ac						CALLMONITOR 
c5ac cd 6f ee			call debug_vector  
c5af				endm  
# End of macro CALLMONITOR
c5af					endif 
c5af cd 3a 91				call strlenz 
c5b2					if DEBUG_FORTH_WORDS 
c5b2						DMARK "CNl" 
c5b2 f5				push af  
c5b3 3a c7 c5			ld a, (.dmark)  
c5b6 32 6b ee			ld (debug_mark),a  
c5b9 3a c8 c5			ld a, (.dmark+1)  
c5bc 32 6c ee			ld (debug_mark+1),a  
c5bf 3a c9 c5			ld a, (.dmark+2)  
c5c2 32 6d ee			ld (debug_mark+2),a  
c5c5 18 03			jr .pastdmark  
c5c7 ..			.dmark: db "CNl"  
c5ca f1			.pastdmark: pop af  
c5cb			endm  
# End of macro DMARK
c5cb						CALLMONITOR 
c5cb cd 6f ee			call debug_vector  
c5ce				endm  
# End of macro CALLMONITOR
c5ce					endif 
c5ce			 
c5ce cd 3b 9b				call forth_push_numhl 
c5d1			 
c5d1			 
c5d1			 
c5d1				       NEXTW 
c5d1 c3 e8 9e			jp macro_next 
c5d4				endm 
# End of macro NEXTW
c5d4			.ASC: 
c5d4				CWHEAD .CHR 57 "ASC" 3 WORD_FLAG_CODE 
c5d4 4d				db WORD_SYS_CORE+57             
c5d5 42 c6			dw .CHR            
c5d7 04				db 3 + 1 
c5d8 .. 00			db "ASC",0              
c5dc				endm 
# End of macro CWHEAD
c5dc			; | ASC ( u -- n ) Get the ascii value of the first character of the string on the stack | DONE 
c5dc					if DEBUG_FORTH_WORDS_KEY 
c5dc						DMARK "ASC" 
c5dc f5				push af  
c5dd 3a f1 c5			ld a, (.dmark)  
c5e0 32 6b ee			ld (debug_mark),a  
c5e3 3a f2 c5			ld a, (.dmark+1)  
c5e6 32 6c ee			ld (debug_mark+1),a  
c5e9 3a f3 c5			ld a, (.dmark+2)  
c5ec 32 6d ee			ld (debug_mark+2),a  
c5ef 18 03			jr .pastdmark  
c5f1 ..			.dmark: db "ASC"  
c5f4 f1			.pastdmark: pop af  
c5f5			endm  
# End of macro DMARK
c5f5						CALLMONITOR 
c5f5 cd 6f ee			call debug_vector  
c5f8				endm  
# End of macro CALLMONITOR
c5f8					endif 
c5f8					FORTH_DSP_VALUE 
c5f8 cd 1b 9d			call macro_forth_dsp_value 
c5fb				endm 
# End of macro FORTH_DSP_VALUE
c5fb					;v5 FORTH_DSP_VALUE 
c5fb			;		inc hl      ; now at start of numeric as string 
c5fb			 
c5fb e5					push hl 
c5fc			 
c5fc					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c5fc cd ea 9d			call macro_forth_dsp_pop 
c5ff				endm 
# End of macro FORTH_DSP_POP
c5ff			 
c5ff e1					pop hl 
c600			 
c600					if DEBUG_FORTH_WORDS 
c600						DMARK "AS1" 
c600 f5				push af  
c601 3a 15 c6			ld a, (.dmark)  
c604 32 6b ee			ld (debug_mark),a  
c607 3a 16 c6			ld a, (.dmark+1)  
c60a 32 6c ee			ld (debug_mark+1),a  
c60d 3a 17 c6			ld a, (.dmark+2)  
c610 32 6d ee			ld (debug_mark+2),a  
c613 18 03			jr .pastdmark  
c615 ..			.dmark: db "AS1"  
c618 f1			.pastdmark: pop af  
c619			endm  
# End of macro DMARK
c619						CALLMONITOR 
c619 cd 6f ee			call debug_vector  
c61c				endm  
# End of macro CALLMONITOR
c61c					endif 
c61c					; push the content of a onto the stack as a value 
c61c			 
c61c 7e					ld a,(hl)   ; get char 
c61d 26 00				ld h,0 
c61f 6f					ld l,a 
c620					if DEBUG_FORTH_WORDS 
c620						DMARK "AS2" 
c620 f5				push af  
c621 3a 35 c6			ld a, (.dmark)  
c624 32 6b ee			ld (debug_mark),a  
c627 3a 36 c6			ld a, (.dmark+1)  
c62a 32 6c ee			ld (debug_mark+1),a  
c62d 3a 37 c6			ld a, (.dmark+2)  
c630 32 6d ee			ld (debug_mark+2),a  
c633 18 03			jr .pastdmark  
c635 ..			.dmark: db "AS2"  
c638 f1			.pastdmark: pop af  
c639			endm  
# End of macro DMARK
c639						CALLMONITOR 
c639 cd 6f ee			call debug_vector  
c63c				endm  
# End of macro CALLMONITOR
c63c					endif 
c63c cd 3b 9b				call forth_push_numhl 
c63f			 
c63f				       NEXTW 
c63f c3 e8 9e			jp macro_next 
c642				endm 
# End of macro NEXTW
c642			 
c642			.CHR: 
c642				CWHEAD .ENDSTR 57 "CHR" 3 WORD_FLAG_CODE 
c642 4d				db WORD_SYS_CORE+57             
c643 7e c6			dw .ENDSTR            
c645 04				db 3 + 1 
c646 .. 00			db "CHR",0              
c64a				endm 
# End of macro CWHEAD
c64a			; | CHR ( u -- n ) The ASCII character value of u is turned into a string n on the stack | DONE 
c64a					if DEBUG_FORTH_WORDS_KEY 
c64a						DMARK "CHR" 
c64a f5				push af  
c64b 3a 5f c6			ld a, (.dmark)  
c64e 32 6b ee			ld (debug_mark),a  
c651 3a 60 c6			ld a, (.dmark+1)  
c654 32 6c ee			ld (debug_mark+1),a  
c657 3a 61 c6			ld a, (.dmark+2)  
c65a 32 6d ee			ld (debug_mark+2),a  
c65d 18 03			jr .pastdmark  
c65f ..			.dmark: db "CHR"  
c662 f1			.pastdmark: pop af  
c663			endm  
# End of macro DMARK
c663						CALLMONITOR 
c663 cd 6f ee			call debug_vector  
c666				endm  
# End of macro CALLMONITOR
c666					endif 
c666					FORTH_DSP_VALUEHL 
c666 cd 32 9d			call macro_dsp_valuehl 
c669				endm 
# End of macro FORTH_DSP_VALUEHL
c669			 
c669					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c669 cd ea 9d			call macro_forth_dsp_pop 
c66c				endm 
# End of macro FORTH_DSP_POP
c66c			 
c66c					; save asci byte as a zero term string and push string 
c66c			 
c66c 7d					ld a,l 
c66d 32 c1 e2				ld (scratch), a 
c670			 
c670 3e 00				ld a, 0 
c672 32 c2 e2				ld (scratch+1), a 
c675			 
c675 21 c1 e2				ld hl, scratch 
c678 cd a9 9b				call forth_push_str 
c67b			 
c67b			 
c67b				       NEXTW 
c67b c3 e8 9e			jp macro_next 
c67e				endm 
# End of macro NEXTW
c67e			 
c67e			 
c67e			 
c67e			 
c67e			.ENDSTR: 
c67e			; eof 
c67e			 
# End of file forth_words_str.asm
c67e			include "forth_words_key.asm" 
c67e			 
c67e			; | ## Keyboard Words 
c67e			 
c67e			.KEY: 
c67e				CWHEAD .WAITK 42 "KEY" 3 WORD_FLAG_CODE 
c67e 3e				db WORD_SYS_CORE+42             
c67f ae c6			dw .WAITK            
c681 04				db 3 + 1 
c682 .. 00			db "KEY",0              
c686				endm 
# End of macro CWHEAD
c686			; | KEY ( -- w f ) Scan for keypress but do not wait true if next item on stack is key press | TODO 
c686			 
c686					if DEBUG_FORTH_WORDS_KEY 
c686						DMARK "KEY" 
c686 f5				push af  
c687 3a 9b c6			ld a, (.dmark)  
c68a 32 6b ee			ld (debug_mark),a  
c68d 3a 9c c6			ld a, (.dmark+1)  
c690 32 6c ee			ld (debug_mark+1),a  
c693 3a 9d c6			ld a, (.dmark+2)  
c696 32 6d ee			ld (debug_mark+2),a  
c699 18 03			jr .pastdmark  
c69b ..			.dmark: db "KEY"  
c69e f1			.pastdmark: pop af  
c69f			endm  
# End of macro DMARK
c69f						CALLMONITOR 
c69f cd 6f ee			call debug_vector  
c6a2				endm  
# End of macro CALLMONITOR
c6a2					endif 
c6a2			; TODO currently waits 
c6a2 cd 1e e4				call cin 
c6a5					;call cin_wait 
c6a5 6f					ld l, a 
c6a6 26 00				ld h, 0 
c6a8 cd 3b 9b				call forth_push_numhl 
c6ab					NEXTW 
c6ab c3 e8 9e			jp macro_next 
c6ae				endm 
# End of macro NEXTW
c6ae			.WAITK: 
c6ae				CWHEAD .ACCEPT 43 "WAITK" 5 WORD_FLAG_CODE 
c6ae 3f				db WORD_SYS_CORE+43             
c6af e0 c6			dw .ACCEPT            
c6b1 06				db 5 + 1 
c6b2 .. 00			db "WAITK",0              
c6b8				endm 
# End of macro CWHEAD
c6b8			; | WAITK ( -- w ) Wait for keypress TOS is key press | DONE 
c6b8					if DEBUG_FORTH_WORDS_KEY 
c6b8						DMARK "WAI" 
c6b8 f5				push af  
c6b9 3a cd c6			ld a, (.dmark)  
c6bc 32 6b ee			ld (debug_mark),a  
c6bf 3a ce c6			ld a, (.dmark+1)  
c6c2 32 6c ee			ld (debug_mark+1),a  
c6c5 3a cf c6			ld a, (.dmark+2)  
c6c8 32 6d ee			ld (debug_mark+2),a  
c6cb 18 03			jr .pastdmark  
c6cd ..			.dmark: db "WAI"  
c6d0 f1			.pastdmark: pop af  
c6d1			endm  
# End of macro DMARK
c6d1						CALLMONITOR 
c6d1 cd 6f ee			call debug_vector  
c6d4				endm  
# End of macro CALLMONITOR
c6d4					endif 
c6d4 cd 18 e4				call cin_wait 
c6d7 6f					ld l, a 
c6d8 26 00				ld h, 0 
c6da cd 3b 9b				call forth_push_numhl 
c6dd					NEXTW 
c6dd c3 e8 9e			jp macro_next 
c6e0				endm 
# End of macro NEXTW
c6e0			.ACCEPT: 
c6e0				CWHEAD .EDIT 44 "ACCEPT" 6 WORD_FLAG_CODE 
c6e0 40				db WORD_SYS_CORE+44             
c6e1 3e c7			dw .EDIT            
c6e3 07				db 6 + 1 
c6e4 .. 00			db "ACCEPT",0              
c6eb				endm 
# End of macro CWHEAD
c6eb			; | ACCEPT ( -- w ) Prompt for text input and push pointer to string | DONE 
c6eb					; TODO crashes on push 
c6eb					if DEBUG_FORTH_WORDS_KEY 
c6eb						DMARK "ACC" 
c6eb f5				push af  
c6ec 3a 00 c7			ld a, (.dmark)  
c6ef 32 6b ee			ld (debug_mark),a  
c6f2 3a 01 c7			ld a, (.dmark+1)  
c6f5 32 6c ee			ld (debug_mark+1),a  
c6f8 3a 02 c7			ld a, (.dmark+2)  
c6fb 32 6d ee			ld (debug_mark+2),a  
c6fe 18 03			jr .pastdmark  
c700 ..			.dmark: db "ACC"  
c703 f1			.pastdmark: pop af  
c704			endm  
# End of macro DMARK
c704						CALLMONITOR 
c704 cd 6f ee			call debug_vector  
c707				endm  
# End of macro CALLMONITOR
c707					endif 
c707 21 bf e4				ld hl, os_input 
c70a 3e 00				ld a, 0 
c70c 77					ld (hl),a 
c70d 3a 5e ea				ld a,(f_cursor_ptr) 
c710 16 64				ld d, 100 
c712 0e 00				ld c, 0 
c714 1e 28				ld e, 40 
c716 cd 09 8d				call input_str 
c719					; TODO perhaps do a type check and wrap in quotes if not a number 
c719 21 bf e4				ld hl, os_input 
c71c					if DEBUG_FORTH_WORDS 
c71c						DMARK "AC1" 
c71c f5				push af  
c71d 3a 31 c7			ld a, (.dmark)  
c720 32 6b ee			ld (debug_mark),a  
c723 3a 32 c7			ld a, (.dmark+1)  
c726 32 6c ee			ld (debug_mark+1),a  
c729 3a 33 c7			ld a, (.dmark+2)  
c72c 32 6d ee			ld (debug_mark+2),a  
c72f 18 03			jr .pastdmark  
c731 ..			.dmark: db "AC1"  
c734 f1			.pastdmark: pop af  
c735			endm  
# End of macro DMARK
c735						CALLMONITOR 
c735 cd 6f ee			call debug_vector  
c738				endm  
# End of macro CALLMONITOR
c738					endif 
c738 cd a9 9b				call forth_push_str 
c73b					NEXTW 
c73b c3 e8 9e			jp macro_next 
c73e				endm 
# End of macro NEXTW
c73e			 
c73e			.EDIT: 
c73e				CWHEAD .DEDIT 44 "EDIT" 4 WORD_FLAG_CODE 
c73e 40				db WORD_SYS_CORE+44             
c73f e0 c7			dw .DEDIT            
c741 05				db 4 + 1 
c742 .. 00			db "EDIT",0              
c747				endm 
# End of macro CWHEAD
c747			; | EDIT ( u -- u ) Takes string on TOS and allows editing of it. Pushes it back once done. | DONE 
c747			 
c747					; TODO does not copy from stack 
c747					if DEBUG_FORTH_WORDS_KEY 
c747						DMARK "EDT" 
c747 f5				push af  
c748 3a 5c c7			ld a, (.dmark)  
c74b 32 6b ee			ld (debug_mark),a  
c74e 3a 5d c7			ld a, (.dmark+1)  
c751 32 6c ee			ld (debug_mark+1),a  
c754 3a 5e c7			ld a, (.dmark+2)  
c757 32 6d ee			ld (debug_mark+2),a  
c75a 18 03			jr .pastdmark  
c75c ..			.dmark: db "EDT"  
c75f f1			.pastdmark: pop af  
c760			endm  
# End of macro DMARK
c760						CALLMONITOR 
c760 cd 6f ee			call debug_vector  
c763				endm  
# End of macro CALLMONITOR
c763					endif 
c763			 
c763					;FORTH_DSP 
c763					FORTH_DSP_VALUEHL 
c763 cd 32 9d			call macro_dsp_valuehl 
c766				endm 
# End of macro FORTH_DSP_VALUEHL
c766			;		inc hl    ; TODO do type check 
c766			 
c766			;		call get_word_hl 
c766 e5					push hl 
c767					if DEBUG_FORTH_WORDS 
c767						DMARK "EDp" 
c767 f5				push af  
c768 3a 7c c7			ld a, (.dmark)  
c76b 32 6b ee			ld (debug_mark),a  
c76e 3a 7d c7			ld a, (.dmark+1)  
c771 32 6c ee			ld (debug_mark+1),a  
c774 3a 7e c7			ld a, (.dmark+2)  
c777 32 6d ee			ld (debug_mark+2),a  
c77a 18 03			jr .pastdmark  
c77c ..			.dmark: db "EDp"  
c77f f1			.pastdmark: pop af  
c780			endm  
# End of macro DMARK
c780						CALLMONITOR 
c780 cd 6f ee			call debug_vector  
c783				endm  
# End of macro CALLMONITOR
c783					endif 
c783				;	ld a, 0 
c783 cd 3a 91				call strlenz 
c786 23					inc hl 
c787			 
c787 06 00				ld b, 0 
c789 4d					ld c, l 
c78a			 
c78a e1					pop hl 
c78b 11 bf e4				ld de, os_input 
c78e					if DEBUG_FORTH_WORDS_KEY 
c78e						DMARK "EDc" 
c78e f5				push af  
c78f 3a a3 c7			ld a, (.dmark)  
c792 32 6b ee			ld (debug_mark),a  
c795 3a a4 c7			ld a, (.dmark+1)  
c798 32 6c ee			ld (debug_mark+1),a  
c79b 3a a5 c7			ld a, (.dmark+2)  
c79e 32 6d ee			ld (debug_mark+2),a  
c7a1 18 03			jr .pastdmark  
c7a3 ..			.dmark: db "EDc"  
c7a6 f1			.pastdmark: pop af  
c7a7			endm  
# End of macro DMARK
c7a7						CALLMONITOR 
c7a7 cd 6f ee			call debug_vector  
c7aa				endm  
# End of macro CALLMONITOR
c7aa					endif 
c7aa ed b0				ldir 
c7ac			 
c7ac			 
c7ac 21 bf e4				ld hl, os_input 
c7af					;ld a, 0 
c7af					;ld (hl),a 
c7af 3a 5e ea				ld a,(f_cursor_ptr) 
c7b2 16 64				ld d, 100 
c7b4 0e 00				ld c, 0 
c7b6 1e 28				ld e, 40 
c7b8 cd 09 8d				call input_str 
c7bb					; TODO perhaps do a type check and wrap in quotes if not a number 
c7bb 21 bf e4				ld hl, os_input 
c7be					if DEBUG_FORTH_WORDS 
c7be						DMARK "ED1" 
c7be f5				push af  
c7bf 3a d3 c7			ld a, (.dmark)  
c7c2 32 6b ee			ld (debug_mark),a  
c7c5 3a d4 c7			ld a, (.dmark+1)  
c7c8 32 6c ee			ld (debug_mark+1),a  
c7cb 3a d5 c7			ld a, (.dmark+2)  
c7ce 32 6d ee			ld (debug_mark+2),a  
c7d1 18 03			jr .pastdmark  
c7d3 ..			.dmark: db "ED1"  
c7d6 f1			.pastdmark: pop af  
c7d7			endm  
# End of macro DMARK
c7d7						CALLMONITOR 
c7d7 cd 6f ee			call debug_vector  
c7da				endm  
# End of macro CALLMONITOR
c7da					endif 
c7da cd a9 9b				call forth_push_str 
c7dd					NEXTW 
c7dd c3 e8 9e			jp macro_next 
c7e0				endm 
# End of macro NEXTW
c7e0			 
c7e0			.DEDIT: 
c7e0				CWHEAD .ENDKEY 44 "DEDIT" 5 WORD_FLAG_CODE 
c7e0 40				db WORD_SYS_CORE+44             
c7e1 42 c8			dw .ENDKEY            
c7e3 06				db 5 + 1 
c7e4 .. 00			db "DEDIT",0              
c7ea				endm 
# End of macro CWHEAD
c7ea			; | DEDIT ( ptr --  ) Takes an address for direct editing in memory. | TO TEST 
c7ea			 
c7ea					; TODO does not copy from stack 
c7ea					if DEBUG_FORTH_WORDS_KEY 
c7ea						DMARK "DED" 
c7ea f5				push af  
c7eb 3a ff c7			ld a, (.dmark)  
c7ee 32 6b ee			ld (debug_mark),a  
c7f1 3a 00 c8			ld a, (.dmark+1)  
c7f4 32 6c ee			ld (debug_mark+1),a  
c7f7 3a 01 c8			ld a, (.dmark+2)  
c7fa 32 6d ee			ld (debug_mark+2),a  
c7fd 18 03			jr .pastdmark  
c7ff ..			.dmark: db "DED"  
c802 f1			.pastdmark: pop af  
c803			endm  
# End of macro DMARK
c803						CALLMONITOR 
c803 cd 6f ee			call debug_vector  
c806				endm  
# End of macro CALLMONITOR
c806					endif 
c806			 
c806					;FORTH_DSP 
c806					FORTH_DSP_VALUEHL 
c806 cd 32 9d			call macro_dsp_valuehl 
c809				endm 
# End of macro FORTH_DSP_VALUEHL
c809			;		inc hl    ; TODO do type check 
c809			 
c809			;		call get_word_hl 
c809 e5					push hl 
c80a e5					push hl 
c80b					FORTH_DSP_POP 
c80b cd ea 9d			call macro_forth_dsp_pop 
c80e				endm 
# End of macro FORTH_DSP_POP
c80e e1					pop hl 
c80f					if DEBUG_FORTH_WORDS 
c80f						DMARK "EDp" 
c80f f5				push af  
c810 3a 24 c8			ld a, (.dmark)  
c813 32 6b ee			ld (debug_mark),a  
c816 3a 25 c8			ld a, (.dmark+1)  
c819 32 6c ee			ld (debug_mark+1),a  
c81c 3a 26 c8			ld a, (.dmark+2)  
c81f 32 6d ee			ld (debug_mark+2),a  
c822 18 03			jr .pastdmark  
c824 ..			.dmark: db "EDp"  
c827 f1			.pastdmark: pop af  
c828			endm  
# End of macro DMARK
c828						CALLMONITOR 
c828 cd 6f ee			call debug_vector  
c82b				endm  
# End of macro CALLMONITOR
c82b					endif 
c82b				;	ld a, 0 
c82b cd 3a 91				call strlenz 
c82e 23					inc hl 
c82f			 
c82f 06 00				ld b, 0 
c831 4d					ld c, l 
c832			 
c832 e1					pop hl 
c833			 
c833					;ld a, 0 
c833					;ld (hl),a 
c833 3a 5e ea				ld a,(f_cursor_ptr) 
c836 16 64				ld d, 100 
c838 0e 00				ld c, 0 
c83a 1e 28				ld e, 40 
c83c cd 09 8d				call input_str 
c83f					; TODO perhaps do a type check and wrap in quotes if not a number 
c83f					NEXTW 
c83f c3 e8 9e			jp macro_next 
c842				endm 
# End of macro NEXTW
c842			 
c842			 
c842			.ENDKEY: 
c842			; eof 
c842			 
# End of file forth_words_key.asm
c842			include "forth_words_const.asm" 
c842			 
c842			; | ## Constants (i.e. Useful memory addresses that can set or get features) 
c842			 
c842			 
c842			.SPITIME: 
c842				CWHEAD .VA 99 "SPITIME" 7 WORD_FLAG_CODE 
c842 77				db WORD_SYS_CORE+99             
c843 57 c8			dw .VA            
c845 08				db 7 + 1 
c846 .. 00			db "SPITIME",0              
c84e				endm 
# End of macro CWHEAD
c84e			; | SPITIME ( -- u1 )   Pushes address of the SPI pulse counter/delay to stack 
c84e			; 
c84e			; | If using BANK devices then leave as is. 
c84e			; | Only really useful for the CARTDEV where other devices may be too far or slow. In particular 
c84e			; | the multiplexing of the PicoSPINet device which might not be running fast enough for all of the nodes 
c84e			 
c84e 21 64 ea				ld hl, spi_clktime  
c851 cd 3b 9b				call forth_push_numhl 
c854			 
c854					NEXTW 
c854 c3 e8 9e			jp macro_next 
c857				endm 
# End of macro NEXTW
c857			 
c857			 
c857			.VA: 
c857				CWHEAD .SYMBOL 99 "VA" 2 WORD_FLAG_CODE 
c857 77				db WORD_SYS_CORE+99             
c858 67 c8			dw .SYMBOL            
c85a 03				db 2 + 1 
c85b .. 00			db "VA",0              
c85e				endm 
# End of macro CWHEAD
c85e			; | VA ( -- u1 )   Pushes address of block of memory used for v1..5 
c85e 21 28 ea				ld hl, cli_var_array 
c861 cd 3b 9b				call forth_push_numhl 
c864			 
c864					NEXTW 
c864 c3 e8 9e			jp macro_next 
c867				endm 
# End of macro NEXTW
c867			 
c867			.SYMBOL: 
c867				CWHEAD .ENDCONST 99 "SYMBOL" 6 WORD_FLAG_CODE 
c867 77				db WORD_SYS_CORE+99             
c868 71 c9			dw .ENDCONST            
c86a 07				db 6 + 1 
c86b .. 00			db "SYMBOL",0              
c872				endm 
# End of macro CWHEAD
c872			; | SYMBOL ( u1 -- )  Get the address of a system symbol from a look up table to TOS  | DONE 
c872			; | 
c872			; | The value is the number reference and the final address is pushed to stack 
c872			 
c872			; | dw sym_table 
c872			; | dw nmi_vector 
c872			; | dw cli_autodisplay 
c872			; | dw cli_data_sp 
c872			; | dw cli_data_stack 
c872			; | dw cli_loop_sp 
c872			; | dw cli_loop_stack 
c872			; | dw cli_var_array 
c872			; | dw cursor_col 
c872			; | dw cursor_ptr 
c872			; | ; 10 
c872			; | dw cursor_row 
c872			; | dw debug_mark 
c872			; | dw display_fb0 
c872			; | dw display_fb1 
c872			; | dw display_fb2 
c872			; | dw display_fb3 
c872			; | dw display_fb_active 
c872			; | dw execscratch 
c872			; | dw f_cursor_ptr 
c872			; | dw hardware_word 
c872			; | ;20 
c872			; | dw input_at_cursor 
c872			; | dw input_at_pos 
c872			; | dw input_cur_flash 
c872			; | dw input_cur_onoff 
c872			; | dw input_cursor 
c872			; | dw input_display_size 
c872			; | dw input_len 
c872			; | dw input_ptr 
c872			; | dw input_size 
c872			; | dw input_start 
c872			; | ; 30 
c872			; | dw input_str 
c872			; | dw input_under_cursor 
c872			; | dw os_cli_cmd 
c872			; | dw os_cur_ptr 
c872			; | dw os_current_i 
c872			; | dw os_input 
c872			; | dw os_last_cmd 
c872			; | dw os_last_new_uword 
c872			; | dw debug_vector 
c872			; | dw os_view_hl 
c872			; | ;40 
c872			; | dw os_word_scratch 
c872			; | dw portbctl 
c872			; | dw portbdata 
c872			; | dw spi_cartdev 
c872			; | dw spi_cartdev2 
c872			; | dw spi_clktime 
c872			; | dw spi_device 
c872			; | dw spi_device_id 
c872			; | dw spi_portbyte 
c872			; | dw stackstore 
c872			; | ; 50 
c872			; | if STORAGE_SE 
c872			; | dw storage_actl 
c872			; | dw storage_adata 
c872			; | else 
c872			; | dw 0 
c872			; | dw 0 
c872			; | endif 
c872			; | dw storage_append 
c872			; | if STORAGE_SE 
c872			; | dw storage_bctl 
c872			; | else 
c872			; | dw 0 
c872			; | endif 
c872			; | dw store_bank_active 
c872			; | dw store_filecache 
c872			; | dw store_longread 
c872			; | dw store_openaddr 
c872			; | dw store_openext 
c872			; | dw store_openmaxext 
c872			; | ; 60 
c872			; | dw store_page 
c872			; | dw store_readbuf 
c872			; | dw store_readcont 
c872			; | dw store_readptr 
c872			; | dw store_tmpext 
c872			; | dw store_tmpid 
c872			; | dw store_tmppageid 
c872			; | dw malloc 
c872			; | dw free 
c872			; | dw cin 
c872			; | ; 70 
c872			; | dw cin_wait 
c872			; | dw forth_push_numhl 
c872			; | dw forth_push_str 
c872			 
c872					if DEBUG_FORTH_WORDS_KEY 
c872						DMARK "SYM" 
c872 f5				push af  
c873 3a 87 c8			ld a, (.dmark)  
c876 32 6b ee			ld (debug_mark),a  
c879 3a 88 c8			ld a, (.dmark+1)  
c87c 32 6c ee			ld (debug_mark+1),a  
c87f 3a 89 c8			ld a, (.dmark+2)  
c882 32 6d ee			ld (debug_mark+2),a  
c885 18 03			jr .pastdmark  
c887 ..			.dmark: db "SYM"  
c88a f1			.pastdmark: pop af  
c88b			endm  
# End of macro DMARK
c88b						CALLMONITOR 
c88b cd 6f ee			call debug_vector  
c88e				endm  
# End of macro CALLMONITOR
c88e					endif 
c88e			 
c88e					FORTH_DSP_VALUEHL 
c88e cd 32 9d			call macro_dsp_valuehl 
c891				endm 
# End of macro FORTH_DSP_VALUEHL
c891			 
c891 7d					ld a, l     
c892			 
c892			 
c892					if DEBUG_FORTH_WORDS 
c892						DMARK "SY1" 
c892 f5				push af  
c893 3a a7 c8			ld a, (.dmark)  
c896 32 6b ee			ld (debug_mark),a  
c899 3a a8 c8			ld a, (.dmark+1)  
c89c 32 6c ee			ld (debug_mark+1),a  
c89f 3a a9 c8			ld a, (.dmark+2)  
c8a2 32 6d ee			ld (debug_mark+2),a  
c8a5 18 03			jr .pastdmark  
c8a7 ..			.dmark: db "SY1"  
c8aa f1			.pastdmark: pop af  
c8ab			endm  
# End of macro DMARK
c8ab						CALLMONITOR 
c8ab cd 6f ee			call debug_vector  
c8ae				endm  
# End of macro CALLMONITOR
c8ae					endif 
c8ae					 
c8ae f5					push af	 
c8af					FORTH_DSP_POP 
c8af cd ea 9d			call macro_forth_dsp_pop 
c8b2				endm 
# End of macro FORTH_DSP_POP
c8b2 f1					pop af 
c8b3			 
c8b3 cb 27				sla a  
c8b5				 
c8b5					 
c8b5					if DEBUG_FORTH_WORDS 
c8b5						DMARK "SY" 
c8b5 f5				push af  
c8b6 3a ca c8			ld a, (.dmark)  
c8b9 32 6b ee			ld (debug_mark),a  
c8bc 3a cb c8			ld a, (.dmark+1)  
c8bf 32 6c ee			ld (debug_mark+1),a  
c8c2 3a cc c8			ld a, (.dmark+2)  
c8c5 32 6d ee			ld (debug_mark+2),a  
c8c8 18 02			jr .pastdmark  
c8ca ..			.dmark: db "SY"  
c8cc f1			.pastdmark: pop af  
c8cd			endm  
# End of macro DMARK
c8cd						CALLMONITOR 
c8cd cd 6f ee			call debug_vector  
c8d0				endm  
# End of macro CALLMONITOR
c8d0					endif 
c8d0			 
c8d0 21 df c8				ld hl, sym_table 
c8d3 cd dc 8c				call addatohl 
c8d6 cd 6a 9e				call loadwordinhl 
c8d9 cd 3b 9b				call forth_push_numhl 
c8dc			 
c8dc			 
c8dc				       NEXTW 
c8dc c3 e8 9e			jp macro_next 
c8df				endm 
# End of macro NEXTW
c8df			 
c8df			sym_table: 
c8df			 
c8df			; 0 
c8df df c8		dw sym_table 
c8e1 72 ee		dw nmi_vector 
c8e3 3c ea		dw cli_autodisplay 
c8e5 ee e9		dw cli_data_sp 
c8e7 28 e8		dw cli_data_stack 
c8e9 f0 e9		dw cli_loop_sp 
c8eb 2a e9		dw cli_loop_stack 
c8ed 28 ea		dw cli_var_array 
c8ef c5 eb		dw cursor_col 
c8f1 c3 eb		dw cursor_ptr 
c8f3			; 10 
c8f3 c4 eb		dw cursor_row 
c8f5 6b ee		dw debug_mark 
c8f7 b1 ed		dw display_fb0 
c8f9 10 ed		dw display_fb1 
c8fb ce eb		dw display_fb2 
c8fd 6f ec		dw display_fb3 
c8ff cc eb		dw display_fb_active 
c901 c0 e3		dw execscratch 
c903 5e ea		dw f_cursor_ptr 
c905 75 ee		dw hardware_word 
c907			;20 
c907 62 ee		dw input_at_cursor 
c909 64 ee		dw input_at_pos 
c90b 60 ee		dw input_cur_flash 
c90d 5f ee		dw input_cur_onoff 
c90f 55 ee		dw input_cursor 
c911 65 ee		dw input_display_size 
c913 5a ee		dw input_len 
c915 69 ee		dw input_ptr 
c917 66 ee		dw input_size 
c919 67 ee		dw input_start 
c91b			; 30 
c91b 09 8d		dw input_str 
c91d 63 ee		dw input_under_cursor 
c91f e8 e5		dw os_cli_cmd 
c921 e4 e5		dw os_cur_ptr 
c923 e6 e5		dw os_current_i 
c925 bf e4		dw os_input 
c927 e7 e6		dw os_last_cmd 
c929 be e5		dw os_last_new_uword 
c92b 6f ee		dw debug_vector 
c92d af e2		dw os_view_hl 
c92f			;40 
c92f c6 e5		dw os_word_scratch 
c931 c3 00		dw portbctl 
c933 c1 00		dw portbdata 
c935 63 ea		dw spi_cartdev 
c937 62 ea		dw spi_cartdev2 
c939 64 ea		dw spi_clktime 
c93b 60 ea		dw spi_device 
c93d 5f ea		dw spi_device_id 
c93f 61 ea		dw spi_portbyte 
c941 a7 eb		dw stackstore 
c943			; 50 
c943			if STORAGE_SE 
c943			dw storage_actl 
c943			dw storage_adata 
c943			else 
c943 00 00		dw 0 
c945 00 00		dw 0 
c947			endif 
c947 69 88		dw storage_append 
c949			if STORAGE_SE 
c949			dw storage_bctl 
c949			else 
c949 00 00		dw 0 
c94b			endif 
c94b 93 eb		dw store_bank_active 
c94d 67 ea		dw store_filecache 
c94f 75 ea		dw store_longread 
c951 6b ea		dw store_openaddr 
c953 6a ea		dw store_openext 
c955 69 ea		dw store_openmaxext 
c957			; 60 
c957 7a ea		dw store_page 
c959 76 ea		dw store_readbuf 
c95b 6d ea		dw store_readcont 
c95d 78 ea		dw store_readptr 
c95f 6d ea		dw store_tmpext 
c961 6e ea		dw store_tmpid 
c963 65 ea		dw store_tmppageid 
c965 a3 91		dw malloc 
c967 6d 92		dw free 
c969 1e e4		dw cin 
c96b			; 70 
c96b 18 e4		dw cin_wait 
c96d 3b 9b		dw forth_push_numhl 
c96f a9 9b		dw forth_push_str 
c971			 
c971			 
c971			.ENDCONST: 
c971			 
c971			; eof 
c971			 
c971			 
# End of file forth_words_const.asm
c971			 
c971			if STORAGE_SE 
c971			   	include "forth_words_storage.asm" 
c971			endif 
c971				include "forth_words_device.asm" 
c971			; Device related words 
c971			 
c971			; | ## Device Words 
c971			 
c971			;if SOUND_ENABLE 
c971			;.NOTE: 
c971			;	CWHEAD .AFTERSOUND 31 "NOTE" 4 WORD_FLAG_CODE 
c971			;; NOTE ( ud uf --  )  Plays a note of frequency uf for the duration of ud millseconds | TODO 
c971			;		if DEBUG_FORTH_WORDS_KEY 
c971			;			DMARK "NTE" 
c971			;			CALLMONITOR 
c971			;		endif 
c971			; 
c971			;	 
c971			; 
c971			;		NEXTW 
c971			;.AFTERSOUND: 
c971			;endif 
c971			 
c971			 
c971			USE_GPIO: equ 0 
c971			 
c971			if USE_GPIO 
c971			.GP1: 
c971				CWHEAD .GP2 31 "IOIN" 4 WORD_FLAG_CODE 
c971			; | IOIN ( u1 -- u )    Perform a GPIO read of pin u1 and push result  |  
c971					NEXTW 
c971			.GP2: 
c971				CWHEAD .GP3 31 "IOOUT" 5 WORD_FLAG_CODE 
c971			; | IOOUT ( u1 u2 --  )    Perform a GPIO write of pin u1 with pin set to 0 or 1 in u2  |  
c971			 
c971					NEXTW 
c971			 
c971			.GP3: 
c971				CWHEAD .GP4 31 "IOBYTE" 5 WORD_FLAG_CODE 
c971			; | IOBYTE ( u1 --  )    Perform a GPIO write of byte u1  |  
c971			 
c971					NEXTW 
c971			 
c971			.GP4: 
c971				CWHEAD .SIN 31 "IOSET" 5 WORD_FLAG_CODE 
c971			; | IOSET ( u1 --  )    Setup GPIO pins for I/O direction. Bit is set for write else read pin  |  
c971			 
c971					NEXTW 
c971			.SIN: 
c971			 
c971			 
c971			endif 
c971			 
c971			 
c971				CWHEAD .SOUT 31 "IN" 2 WORD_FLAG_CODE 
c971 33				db WORD_SYS_CORE+31             
c972 a6 c9			dw .SOUT            
c974 03				db 2 + 1 
c975 .. 00			db "IN",0              
c978				endm 
# End of macro CWHEAD
c978			; | IN ( u1 -- u )    Perform Z80 IN with u1 being the port number. Push result to TOS | TO TEST 
c978					if DEBUG_FORTH_WORDS_KEY 
c978						DMARK "IN." 
c978 f5				push af  
c979 3a 8d c9			ld a, (.dmark)  
c97c 32 6b ee			ld (debug_mark),a  
c97f 3a 8e c9			ld a, (.dmark+1)  
c982 32 6c ee			ld (debug_mark+1),a  
c985 3a 8f c9			ld a, (.dmark+2)  
c988 32 6d ee			ld (debug_mark+2),a  
c98b 18 03			jr .pastdmark  
c98d ..			.dmark: db "IN."  
c990 f1			.pastdmark: pop af  
c991			endm  
# End of macro DMARK
c991						CALLMONITOR 
c991 cd 6f ee			call debug_vector  
c994				endm  
# End of macro CALLMONITOR
c994					endif 
c994					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
c994 cd 32 9d			call macro_dsp_valuehl 
c997				endm 
# End of macro FORTH_DSP_VALUEHL
c997			 
c997 e5					push hl 
c998			 
c998					; destroy value TOS 
c998			 
c998					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c998 cd ea 9d			call macro_forth_dsp_pop 
c99b				endm 
# End of macro FORTH_DSP_POP
c99b			 
c99b					; one value on hl get other one back 
c99b			 
c99b c1					pop bc 
c99c			 
c99c					; do the sub 
c99c			;		ex de, hl 
c99c			 
c99c ed 68				in l,(c) 
c99e			 
c99e					; save it 
c99e			 
c99e 26 00				ld h,0 
c9a0			 
c9a0					; TODO push value back onto stack for another op etc 
c9a0			 
c9a0 cd 3b 9b				call forth_push_numhl 
c9a3					NEXTW 
c9a3 c3 e8 9e			jp macro_next 
c9a6				endm 
# End of macro NEXTW
c9a6			.SOUT: 
c9a6				CWHEAD .SPIO 32 "OUT" 3 WORD_FLAG_CODE 
c9a6 34				db WORD_SYS_CORE+32             
c9a7 f9 c9			dw .SPIO            
c9a9 04				db 3 + 1 
c9aa .. 00			db "OUT",0              
c9ae				endm 
# End of macro CWHEAD
c9ae			; | OUT ( u1 u2 -- ) Perform Z80 OUT to port u2 sending byte u1 | DONE 
c9ae					if DEBUG_FORTH_WORDS_KEY 
c9ae						DMARK "OUT" 
c9ae f5				push af  
c9af 3a c3 c9			ld a, (.dmark)  
c9b2 32 6b ee			ld (debug_mark),a  
c9b5 3a c4 c9			ld a, (.dmark+1)  
c9b8 32 6c ee			ld (debug_mark+1),a  
c9bb 3a c5 c9			ld a, (.dmark+2)  
c9be 32 6d ee			ld (debug_mark+2),a  
c9c1 18 03			jr .pastdmark  
c9c3 ..			.dmark: db "OUT"  
c9c6 f1			.pastdmark: pop af  
c9c7			endm  
# End of macro DMARK
c9c7						CALLMONITOR 
c9c7 cd 6f ee			call debug_vector  
c9ca				endm  
# End of macro CALLMONITOR
c9ca					endif 
c9ca			 
c9ca					; get port 
c9ca			 
c9ca					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
c9ca cd 32 9d			call macro_dsp_valuehl 
c9cd				endm 
# End of macro FORTH_DSP_VALUEHL
c9cd			 
c9cd e5					push hl 
c9ce			 
c9ce					; destroy value TOS 
c9ce			 
c9ce					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c9ce cd ea 9d			call macro_forth_dsp_pop 
c9d1				endm 
# End of macro FORTH_DSP_POP
c9d1			 
c9d1					; get byte to send 
c9d1			 
c9d1					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
c9d1 cd 32 9d			call macro_dsp_valuehl 
c9d4				endm 
# End of macro FORTH_DSP_VALUEHL
c9d4			 
c9d4			;		push hl 
c9d4			 
c9d4					; destroy value TOS 
c9d4			 
c9d4					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c9d4 cd ea 9d			call macro_forth_dsp_pop 
c9d7				endm 
# End of macro FORTH_DSP_POP
c9d7			 
c9d7					; one value on hl get other one back 
c9d7			 
c9d7			;		pop hl 
c9d7			 
c9d7 c1					pop bc 
c9d8			 
c9d8					if DEBUG_FORTH_WORDS 
c9d8						DMARK "OUT" 
c9d8 f5				push af  
c9d9 3a ed c9			ld a, (.dmark)  
c9dc 32 6b ee			ld (debug_mark),a  
c9df 3a ee c9			ld a, (.dmark+1)  
c9e2 32 6c ee			ld (debug_mark+1),a  
c9e5 3a ef c9			ld a, (.dmark+2)  
c9e8 32 6d ee			ld (debug_mark+2),a  
c9eb 18 03			jr .pastdmark  
c9ed ..			.dmark: db "OUT"  
c9f0 f1			.pastdmark: pop af  
c9f1			endm  
# End of macro DMARK
c9f1						CALLMONITOR 
c9f1 cd 6f ee			call debug_vector  
c9f4				endm  
# End of macro CALLMONITOR
c9f4					endif 
c9f4			 
c9f4 ed 69				out (c), l 
c9f6			 
c9f6					NEXTW 
c9f6 c3 e8 9e			jp macro_next 
c9f9				endm 
# End of macro NEXTW
c9f9			 
c9f9			 
c9f9			.SPIO: 
c9f9			 
c9f9			if STORAGE_SE 
c9f9				CWHEAD .SPICEH 61 "SPICEL" 6 WORD_FLAG_CODE 
c9f9			; | SPICEL ( -- ) Set SPI CE low for the currently selected device |  DONE 
c9f9			 
c9f9					call spi_ce_low 
c9f9			    NEXTW 
c9f9			 
c9f9			.SPICEH: 
c9f9				CWHEAD .SPIOb 61 "SPICEH" 6 WORD_FLAG_CODE 
c9f9			; | SPICEH ( -- ) Set SPI CE high for the currently selected device |  DONE 
c9f9			 
c9f9					call spi_ce_high 
c9f9			    NEXTW 
c9f9			 
c9f9			 
c9f9			.SPIOb: 
c9f9			 
c9f9				CWHEAD .SPII 61 "SPIO" 4 WORD_FLAG_CODE 
c9f9			; | SPIO ( u1 -- ) Send byte u1 to SPI  |  DONE 
c9f9			 
c9f9					if DEBUG_FORTH_WORDS_KEY 
c9f9						DMARK "SPo" 
c9f9						CALLMONITOR 
c9f9					endif 
c9f9					; get port 
c9f9			 
c9f9			 
c9f9					; get byte to send 
c9f9			 
c9f9					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
c9f9			 
c9f9			;		push hl    ; u1  
c9f9			 
c9f9					; destroy value TOS 
c9f9			 
c9f9					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c9f9			 
c9f9					; one value on hl get other one back 
c9f9			 
c9f9			;		pop hl   ; u2 - addr 
c9f9			 
c9f9					; TODO Send SPI byte 
c9f9			 
c9f9			;		push hl 
c9f9			;		call spi_ce_low 
c9f9			;		pop hl 
c9f9					ld a, l 
c9f9					call spi_send_byte 
c9f9			;		call spi_ce_high 
c9f9			 
c9f9					NEXTW 
c9f9			 
c9f9			.SPII: 
c9f9				CWHEAD .SESEL 62 "SPII" 5 WORD_FLAG_CODE 
c9f9			; | SPII ( -- u1 ) Get a byte from SPI  | DONE 
c9f9					if DEBUG_FORTH_WORDS_KEY 
c9f9						DMARK "SPi" 
c9f9						CALLMONITOR 
c9f9					endif 
c9f9			 
c9f9					; TODO Get SPI byte 
c9f9			 
c9f9					call spi_read_byte 
c9f9			 
c9f9					if DEBUG_FORTH_WORDS 
c9f9						DMARK "Si2" 
c9f9						CALLMONITOR 
c9f9					endif 
c9f9					ld h, 0 
c9f9					ld l, a 
c9f9					if DEBUG_FORTH_WORDS 
c9f9						DMARK "Si3" 
c9f9						CALLMONITOR 
c9f9					endif 
c9f9					call forth_push_numhl 
c9f9			 
c9f9					NEXTW 
c9f9			 
c9f9			 
c9f9			 
c9f9			.SESEL: 
c9f9				CWHEAD .CARTDEV 82 "BANK" 4 WORD_FLAG_CODE 
c9f9			; | BANK ( u1 -- ) Select Serial EEPROM Bank Device at bank address u1 1-5 (disables CARTDEV). Set to zero to disable storage. | DONE 
c9f9					if DEBUG_FORTH_WORDS_KEY 
c9f9						DMARK "BNK" 
c9f9						CALLMONITOR 
c9f9					endif 
c9f9			 
c9f9					ld a, 255 
c9f9					ld (spi_cartdev), a 
c9f9			 
c9f9					; get bank 
c9f9			 
c9f9					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
c9f9			 
c9f9			;		push hl 
c9f9			 
c9f9					; destroy value TOS 
c9f9			 
c9f9					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c9f9			 
c9f9					; one value on hl get other one back 
c9f9			 
c9f9			;		pop hl 
c9f9			 
c9f9			 
c9f9					ld c, SPI_CE_HIGH 
c9f9					ld b, '0'    ; human readable bank number 
c9f9			 
c9f9					ld a, l 
c9f9			 
c9f9					if DEBUG_FORTH_WORDS 
c9f9						DMARK "BNK" 
c9f9						CALLMONITOR 
c9f9					endif 
c9f9			 
c9f9					; active low 
c9f9			 
c9f9					cp 0 
c9f9					jr z, .bset 
c9f9					cp 1 
c9f9					jr nz, .b2 
c9f9					res 0, c 
c9f9					ld b, '1'    ; human readable bank number 
c9f9			.b2:		cp 2 
c9f9					jr nz, .b3 
c9f9					res 1, c 
c9f9					ld b, '2'    ; human readable bank number 
c9f9			.b3:		cp 3 
c9f9					jr nz, .b4 
c9f9					res 2, c 
c9f9					ld b, '3'    ; human readable bank number 
c9f9			.b4:		cp 4 
c9f9					jr nz, .b5 
c9f9					res 3, c 
c9f9					ld b, '4'    ; human readable bank number 
c9f9			.b5:		cp 5 
c9f9					jr nz, .bset 
c9f9					res 4, c 
c9f9					ld b, '5'    ; human readable bank number 
c9f9			 
c9f9			.bset: 
c9f9					ld a, c 
c9f9					ld (spi_device),a 
c9f9					ld a, b 
c9f9					ld (spi_device_id),a 
c9f9					if DEBUG_FORTH_WORDS 
c9f9						DMARK "BN2" 
c9f9						CALLMONITOR 
c9f9					endif 
c9f9			 
c9f9					; set default SPI clk pulse time as disabled for BANK use 
c9f9			 
c9f9					ld a, 0 
c9f9					ld (spi_clktime), a 
c9f9			 
c9f9					NEXTW 
c9f9			 
c9f9			.CARTDEV: 
c9f9				CWHEAD .ENDDEVICE 82 "CARTDEV" 7 WORD_FLAG_CODE 
c9f9			; | CARTDEV ( u1 -- ) Select cart device 1-8 (Disables BANK). Set to zero to disable devices. |  DONE 
c9f9					if DEBUG_FORTH_WORDS_KEY 
c9f9						DMARK "CDV" 
c9f9						CALLMONITOR 
c9f9					endif 
c9f9			 
c9f9					; disable se storage bank selection 
c9f9			 
c9f9					ld a, SPI_CE_HIGH		; ce high 
c9f9					ld (spi_device), a 
c9f9			 
c9f9					; get bank 
c9f9			 
c9f9					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
c9f9			 
c9f9			;		push hl 
c9f9			 
c9f9					; destroy value TOS 
c9f9			 
c9f9					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c9f9			 
c9f9					; one value on hl get other one back 
c9f9			 
c9f9			;		pop hl 
c9f9			 
c9f9					; active low 
c9f9			 
c9f9					ld c, 255 
c9f9			 
c9f9					ld a, l 
c9f9					if DEBUG_FORTH_WORDS 
c9f9						DMARK "CDV" 
c9f9						CALLMONITOR 
c9f9					endif 
c9f9					cp 0 
c9f9					jr z, .cset 
c9f9					cp 1 
c9f9					jr nz, .c2 
c9f9					res 0, c 
c9f9			.c2:		cp 2 
c9f9					jr nz, .c3 
c9f9					res 1, c 
c9f9			.c3:		cp 3 
c9f9					jr nz, .c4 
c9f9					res 2, c 
c9f9			.c4:		cp 4 
c9f9					jr nz, .c5 
c9f9					res 3, c 
c9f9			.c5:		cp 5 
c9f9					jr nz, .c6 
c9f9					res 4, c 
c9f9			.c6:		cp 6 
c9f9					jr nz, .c7 
c9f9					res 5, c 
c9f9			.c7:		cp 7 
c9f9					jr nz, .c8 
c9f9					res 6, c 
c9f9			.c8:		cp 8 
c9f9					jr nz, .cset 
c9f9					res 7, c 
c9f9			.cset:		ld a, c 
c9f9					ld (spi_cartdev),a 
c9f9			 
c9f9					if DEBUG_FORTH_WORDS 
c9f9						DMARK "CD2" 
c9f9						CALLMONITOR 
c9f9					endif 
c9f9			 
c9f9					; set default SPI clk pulse time as 10ms for CARTDEV use 
c9f9			 
c9f9					ld a, $0a 
c9f9					ld (spi_clktime), a 
c9f9					NEXTW 
c9f9			endif 
c9f9			 
c9f9			.ENDDEVICE: 
c9f9			; eof 
c9f9			 
# End of file forth_words_device.asm
c9f9			 
c9f9			; var handler 
c9f9			 
c9f9			 
c9f9			.VARS: 
c9f9				CWHEAD .V0 99 "VAR" 3 WORD_FLAG_CODE 
c9f9 77				db WORD_SYS_CORE+99             
c9fa aa ca			dw .V0            
c9fc 04				db 3 + 1 
c9fd .. 00			db "VAR",0              
ca01				endm 
# End of macro CWHEAD
ca01			;| VAR ( u1 -- )  Get the address of the variable referenced on TOS  | TO TEST 
ca01			;| 
ca01			;| The variable name should consist of a single letter. e.g. "a" 
ca01			;! If a full string is passed then only the first char is looked at 
ca01			;| Any other char could exceed bounds checks!  
ca01			 
ca01					if DEBUG_FORTH_WORDS_KEY 
ca01						DMARK "VAR" 
ca01 f5				push af  
ca02 3a 16 ca			ld a, (.dmark)  
ca05 32 6b ee			ld (debug_mark),a  
ca08 3a 17 ca			ld a, (.dmark+1)  
ca0b 32 6c ee			ld (debug_mark+1),a  
ca0e 3a 18 ca			ld a, (.dmark+2)  
ca11 32 6d ee			ld (debug_mark+2),a  
ca14 18 03			jr .pastdmark  
ca16 ..			.dmark: db "VAR"  
ca19 f1			.pastdmark: pop af  
ca1a			endm  
# End of macro DMARK
ca1a						CALLMONITOR 
ca1a cd 6f ee			call debug_vector  
ca1d				endm  
# End of macro CALLMONITOR
ca1d					endif 
ca1d			 
ca1d					FORTH_DSP_VALUEHL 
ca1d cd 32 9d			call macro_dsp_valuehl 
ca20				endm 
# End of macro FORTH_DSP_VALUEHL
ca20			 
ca20 7e					ld a, (hl)    ; get first char on of the string 
ca21			 
ca21			 
ca21					if DEBUG_FORTH_WORDS 
ca21						DMARK "VR1" 
ca21 f5				push af  
ca22 3a 36 ca			ld a, (.dmark)  
ca25 32 6b ee			ld (debug_mark),a  
ca28 3a 37 ca			ld a, (.dmark+1)  
ca2b 32 6c ee			ld (debug_mark+1),a  
ca2e 3a 38 ca			ld a, (.dmark+2)  
ca31 32 6d ee			ld (debug_mark+2),a  
ca34 18 03			jr .pastdmark  
ca36 ..			.dmark: db "VR1"  
ca39 f1			.pastdmark: pop af  
ca3a			endm  
# End of macro DMARK
ca3a						CALLMONITOR 
ca3a cd 6f ee			call debug_vector  
ca3d				endm  
# End of macro CALLMONITOR
ca3d					endif 
ca3d					 
ca3d f5					push af	 
ca3e					FORTH_DSP_POP 
ca3e cd ea 9d			call macro_forth_dsp_pop 
ca41				endm 
# End of macro FORTH_DSP_POP
ca41 f1					pop af 
ca42			 
ca42					; convert to upper 
ca42			 
ca42 cd 49 90				call to_upper 
ca45					if DEBUG_FORTH_WORDS 
ca45						DMARK "Vaa" 
ca45 f5				push af  
ca46 3a 5a ca			ld a, (.dmark)  
ca49 32 6b ee			ld (debug_mark),a  
ca4c 3a 5b ca			ld a, (.dmark+1)  
ca4f 32 6c ee			ld (debug_mark+1),a  
ca52 3a 5c ca			ld a, (.dmark+2)  
ca55 32 6d ee			ld (debug_mark+2),a  
ca58 18 03			jr .pastdmark  
ca5a ..			.dmark: db "Vaa"  
ca5d f1			.pastdmark: pop af  
ca5e			endm  
# End of macro DMARK
ca5e						CALLMONITOR 
ca5e cd 6f ee			call debug_vector  
ca61				endm  
# End of macro CALLMONITOR
ca61					endif 
ca61 06 41				ld b, 'A' 
ca63 90					sub b			; set offset 
ca64					if DEBUG_FORTH_WORDS 
ca64						DMARK "Vbb" 
ca64 f5				push af  
ca65 3a 79 ca			ld a, (.dmark)  
ca68 32 6b ee			ld (debug_mark),a  
ca6b 3a 7a ca			ld a, (.dmark+1)  
ca6e 32 6c ee			ld (debug_mark+1),a  
ca71 3a 7b ca			ld a, (.dmark+2)  
ca74 32 6d ee			ld (debug_mark+2),a  
ca77 18 03			jr .pastdmark  
ca79 ..			.dmark: db "Vbb"  
ca7c f1			.pastdmark: pop af  
ca7d			endm  
# End of macro DMARK
ca7d						CALLMONITOR 
ca7d cd 6f ee			call debug_vector  
ca80				endm  
# End of macro CALLMONITOR
ca80					endif 
ca80 cb 27				sla a  
ca82				 
ca82					 
ca82					if DEBUG_FORTH_WORDS 
ca82						DMARK "VR2" 
ca82 f5				push af  
ca83 3a 97 ca			ld a, (.dmark)  
ca86 32 6b ee			ld (debug_mark),a  
ca89 3a 98 ca			ld a, (.dmark+1)  
ca8c 32 6c ee			ld (debug_mark+1),a  
ca8f 3a 99 ca			ld a, (.dmark+2)  
ca92 32 6d ee			ld (debug_mark+2),a  
ca95 18 03			jr .pastdmark  
ca97 ..			.dmark: db "VR2"  
ca9a f1			.pastdmark: pop af  
ca9b			endm  
# End of macro DMARK
ca9b						CALLMONITOR 
ca9b cd 6f ee			call debug_vector  
ca9e				endm  
# End of macro CALLMONITOR
ca9e					endif 
ca9e			 
ca9e 21 f4 e9				ld hl, cli_var_array2 
caa1 cd dc 8c				call addatohl 
caa4 cd 3b 9b				call forth_push_numhl 
caa7			 
caa7			 
caa7				       NEXTW 
caa7 c3 e8 9e			jp macro_next 
caaa				endm 
# End of macro NEXTW
caaa			.V0: 
caaa				CWHEAD .V0Q 100 "V0!" 3 WORD_FLAG_CODE 
caaa 78				db WORD_SYS_CORE+100             
caab c2 ca			dw .V0Q            
caad 04				db 3 + 1 
caae .. 00			db "V0!",0              
cab2				endm 
# End of macro CWHEAD
cab2			;| V0! ( u1 -- )  Store value to v0  | DONE 
cab2			 
cab2					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
cab2 cd 32 9d			call macro_dsp_valuehl 
cab5				endm 
# End of macro FORTH_DSP_VALUEHL
cab5			 
cab5 11 28 ea				ld de, cli_var_array 
cab8			 
cab8 eb					ex de, hl 
cab9 73					ld (hl), e 
caba 23					inc hl 
cabb 72					ld (hl), d 
cabc			 
cabc					; destroy value TOS 
cabc			 
cabc					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
cabc cd ea 9d			call macro_forth_dsp_pop 
cabf				endm 
# End of macro FORTH_DSP_POP
cabf			 
cabf				       NEXTW 
cabf c3 e8 9e			jp macro_next 
cac2				endm 
# End of macro NEXTW
cac2			.V0Q: 
cac2				CWHEAD .V1S 101 "V0@" 3 WORD_FLAG_CODE 
cac2 79				db WORD_SYS_CORE+101             
cac3 d3 ca			dw .V1S            
cac5 04				db 3 + 1 
cac6 .. 00			db "V0@",0              
caca				endm 
# End of macro CWHEAD
caca			;| V0@ ( --u )  Put value of v0 onto stack | DONE 
caca 2a 28 ea				ld hl, (cli_var_array) 
cacd cd 3b 9b				call forth_push_numhl 
cad0			 
cad0				       NEXTW 
cad0 c3 e8 9e			jp macro_next 
cad3				endm 
# End of macro NEXTW
cad3			.V1S: 
cad3				CWHEAD .V1Q 102 "V1!" 3 WORD_FLAG_CODE 
cad3 7a				db WORD_SYS_CORE+102             
cad4 eb ca			dw .V1Q            
cad6 04				db 3 + 1 
cad7 .. 00			db "V1!",0              
cadb				endm 
# End of macro CWHEAD
cadb			;| V1! ( u1 -- )  Store value to v1 | DONE 
cadb					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
cadb cd 32 9d			call macro_dsp_valuehl 
cade				endm 
# End of macro FORTH_DSP_VALUEHL
cade			 
cade 11 2a ea				ld de, cli_var_array+2 
cae1				 
cae1 eb					ex de, hl 
cae2 73					ld (hl), e 
cae3 23					inc hl 
cae4 72					ld (hl), d 
cae5			 
cae5					; destroy value TOS 
cae5			 
cae5					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
cae5 cd ea 9d			call macro_forth_dsp_pop 
cae8				endm 
# End of macro FORTH_DSP_POP
cae8				       NEXTW 
cae8 c3 e8 9e			jp macro_next 
caeb				endm 
# End of macro NEXTW
caeb			.V1Q: 
caeb				CWHEAD .V2S 103 "V1@" 3 WORD_FLAG_CODE 
caeb 7b				db WORD_SYS_CORE+103             
caec fc ca			dw .V2S            
caee 04				db 3 + 1 
caef .. 00			db "V1@",0              
caf3				endm 
# End of macro CWHEAD
caf3			;| V1@ ( --u )  Put value of v1 onto stack | DONE 
caf3 2a 2a ea				ld hl, (cli_var_array+2) 
caf6 cd 3b 9b				call forth_push_numhl 
caf9				       NEXTW 
caf9 c3 e8 9e			jp macro_next 
cafc				endm 
# End of macro NEXTW
cafc			.V2S: 
cafc				CWHEAD .V2Q 104 "V2!" 3 WORD_FLAG_CODE 
cafc 7c				db WORD_SYS_CORE+104             
cafd 14 cb			dw .V2Q            
caff 04				db 3 + 1 
cb00 .. 00			db "V2!",0              
cb04				endm 
# End of macro CWHEAD
cb04			;| V2! ( u1 -- )  Store value to v2 | DONE 
cb04					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
cb04 cd 32 9d			call macro_dsp_valuehl 
cb07				endm 
# End of macro FORTH_DSP_VALUEHL
cb07			 
cb07 11 2c ea				ld de, cli_var_array+4 
cb0a				 
cb0a eb					ex de, hl 
cb0b 73					ld (hl), e 
cb0c 23					inc hl 
cb0d 72					ld (hl), d 
cb0e			 
cb0e					; destroy value TOS 
cb0e			 
cb0e					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
cb0e cd ea 9d			call macro_forth_dsp_pop 
cb11				endm 
# End of macro FORTH_DSP_POP
cb11				       NEXTW 
cb11 c3 e8 9e			jp macro_next 
cb14				endm 
# End of macro NEXTW
cb14			.V2Q: 
cb14				CWHEAD .V3S 105 "V2@" 3 WORD_FLAG_CODE 
cb14 7d				db WORD_SYS_CORE+105             
cb15 25 cb			dw .V3S            
cb17 04				db 3 + 1 
cb18 .. 00			db "V2@",0              
cb1c				endm 
# End of macro CWHEAD
cb1c			;| V2@ ( --u )  Put value of v2 onto stack | DONE 
cb1c 2a 2c ea				ld hl, (cli_var_array+4) 
cb1f cd 3b 9b				call forth_push_numhl 
cb22				       NEXTW 
cb22 c3 e8 9e			jp macro_next 
cb25				endm 
# End of macro NEXTW
cb25			.V3S: 
cb25				CWHEAD .V3Q 104 "V3!" 3 WORD_FLAG_CODE 
cb25 7c				db WORD_SYS_CORE+104             
cb26 3d cb			dw .V3Q            
cb28 04				db 3 + 1 
cb29 .. 00			db "V3!",0              
cb2d				endm 
# End of macro CWHEAD
cb2d			;| V3! ( u1 -- )  Store value to v3 | DONE 
cb2d					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
cb2d cd 32 9d			call macro_dsp_valuehl 
cb30				endm 
# End of macro FORTH_DSP_VALUEHL
cb30			 
cb30 11 2e ea				ld de, cli_var_array+6 
cb33				 
cb33 eb					ex de, hl 
cb34 73					ld (hl), e 
cb35 23					inc hl 
cb36 72					ld (hl), d 
cb37			 
cb37					; destroy value TOS 
cb37			 
cb37					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
cb37 cd ea 9d			call macro_forth_dsp_pop 
cb3a				endm 
# End of macro FORTH_DSP_POP
cb3a				       NEXTW 
cb3a c3 e8 9e			jp macro_next 
cb3d				endm 
# End of macro NEXTW
cb3d			.V3Q: 
cb3d				CWHEAD .END 105 "V3@" 3 WORD_FLAG_CODE 
cb3d 7d				db WORD_SYS_CORE+105             
cb3e 4e cb			dw .END            
cb40 04				db 3 + 1 
cb41 .. 00			db "V3@",0              
cb45				endm 
# End of macro CWHEAD
cb45			;| V3@ ( --u )  Put value of v3 onto stack | DONE 
cb45 2a 2e ea				ld hl, (cli_var_array+6) 
cb48 cd 3b 9b				call forth_push_numhl 
cb4b				       NEXTW 
cb4b c3 e8 9e			jp macro_next 
cb4e				endm 
# End of macro NEXTW
cb4e			 
cb4e			 
cb4e			 
cb4e			 
cb4e			 
cb4e			; end of dict marker 
cb4e			 
cb4e 00			.END:    db WORD_SYS_END 
cb4f 00 00			dw 0 
cb51 00				db 0 
cb52			 
cb52			; use to jp here for user dict words to save on macro expansion  
cb52			 
cb52			user_dict_next: 
cb52				NEXTW 
cb52 c3 e8 9e			jp macro_next 
cb55				endm 
# End of macro NEXTW
cb55			 
cb55			 
cb55			user_exec: 
cb55				;    ld hl, <word code> 
cb55				;    FORTH_RSP_NEXT - call macro_forth_rsp_next 
cb55				;    call forthexec 
cb55				;    jp user_dict_next   (NEXT) 
cb55			        ;    <word code bytes> 
cb55 eb				ex de, hl 
cb56 2a c2 e5			ld hl,(os_tok_ptr) 
cb59				 
cb59				FORTH_RSP_NEXT 
cb59 cd e2 9a			call macro_forth_rsp_next 
cb5c				endm 
# End of macro FORTH_RSP_NEXT
cb5c			 
cb5c			if DEBUG_FORTH_UWORD 
cb5c						DMARK "UEX" 
cb5c f5				push af  
cb5d 3a 71 cb			ld a, (.dmark)  
cb60 32 6b ee			ld (debug_mark),a  
cb63 3a 72 cb			ld a, (.dmark+1)  
cb66 32 6c ee			ld (debug_mark+1),a  
cb69 3a 73 cb			ld a, (.dmark+2)  
cb6c 32 6d ee			ld (debug_mark+2),a  
cb6f 18 03			jr .pastdmark  
cb71 ..			.dmark: db "UEX"  
cb74 f1			.pastdmark: pop af  
cb75			endm  
# End of macro DMARK
cb75				CALLMONITOR 
cb75 cd 6f ee			call debug_vector  
cb78				endm  
# End of macro CALLMONITOR
cb78			endif 
cb78			 
cb78			 
cb78			 
cb78 eb				ex de, hl 
cb79 22 c2 e5			ld (os_tok_ptr), hl 
cb7c				 
cb7c				; Don't use next - Skips the first word in uword. 
cb7c			 
cb7c c3 79 9f			jp exec1 
cb7f			;	NEXT 
cb7f			 
cb7f			 
cb7f			; eof 
# End of file forth_wordsv4.asm
cb7f			endif 
cb7f			;;;;;;;;;;;;;; Debug code 
cb7f			 
cb7f			 
cb7f			;if DEBUG_FORTH_PARSE 
cb7f .. 00		.nowordfound: db "No match",0 
cb88 .. 00		.compword:	db "Comparing word ",0 
cb98 .. 00		.nextwordat:	db "Next word at",0 
cba5 .. 00		.charmatch:	db "Char match",0 
cbb0			;endif 
cbb0			if DEBUG_FORTH_JP 
cbb0			.foundword:	db "Word match. Exec..",0 
cbb0			endif 
cbb0			;if DEBUG_FORTH_PUSH 
cbb0 .. 00		.enddict:	db "Dict end. Push.",0 
cbc0 .. 00		.push_str:	db "Pushing string",0 
cbcf .. 00		.push_num:	db "Pushing number",0 
cbde .. 00		.data_sp:	db "SP:",0 
cbe2 .. 00		.wordinhl:	db "Word in HL (2/0):",0 
cbf4 .. 00		.wordinde:	db "Word in DE (3/0):",0 
cc06 .. 00		.wordinbc:	db "Word in BC (4/0):",0 
cc18			;endif 
cc18			;if DEBUG_FORTH_MALLOC 
cc18 .. 00		.push_malloc:	db "Malloc address",0 
cc27			;endif 
cc27			 
cc27			 
cc27			 
cc27			; display malloc address and current data stack pointer  
cc27			 
cc27			malloc_error: 
cc27 d5				push de 
cc28 f5				push af 
cc29 e5				push hl 
cc2a cd af 8a			call clear_display 
cc2d 11 4d cc			ld de, .mallocerr 
cc30 3e 00			ld a,0 
cc32			;	ld de,os_word_scratch 
cc32 cd c2 8a			call str_at_display 
cc35 3e 11			ld a, display_row_1+17 
cc37 11 6b ee			ld de, debug_mark 
cc3a cd c2 8a			call str_at_display 
cc3d cd d2 8a			call update_display 
cc40				;call break_point_state 
cc40 cd 18 e4			call cin_wait 
cc43			 
cc43			;	ld a, ' ' 
cc43			;	ld (os_view_disable), a 
cc43 cd d2 94			call bp_on 
cc46 e1				pop hl 
cc47 f1				pop af 
cc48 d1				pop de	 
cc49				CALLMONITOR 
cc49 cd 6f ee			call debug_vector  
cc4c				endm  
# End of macro CALLMONITOR
cc4c c9				ret 
cc4d			 
cc4d .. 00		.mallocerr: 	db "Malloc Error",0 
cc5a			;if DEBUG_FORTH_PUSH 
cc5a			display_data_sp: 
cc5a f5				push af 
cc5b			 
cc5b				; see if disabled 
cc5b			 
cc5b			 
cc5b 3a 6f ee			ld a, (debug_vector) 
cc5e fe c9			cp $C9  ; RET 
cc60				;ld a, (os_view_disable) 
cc60				;cp '*' 
cc60 28 67			jr z, .skipdsp 
cc62			 
cc62 e5				push hl 
cc63 e5				push hl 
cc64 e5			push hl 
cc65 cd af 8a			call clear_display 
cc68 e1			pop hl 
cc69 7c				ld a,h 
cc6a 21 c6 e5			ld hl, os_word_scratch 
cc6d cd dd 8f			call hexout 
cc70 e1				pop hl 
cc71 7d				ld a,l 
cc72 21 c8 e5			ld hl, os_word_scratch+2 
cc75 cd dd 8f			call hexout 
cc78 21 ca e5			ld hl, os_word_scratch+4 
cc7b 3e 00			ld a,0 
cc7d 77				ld (hl),a 
cc7e 11 c6 e5			ld de,os_word_scratch 
cc81 3e 28				ld a, display_row_2 
cc83 cd c2 8a				call str_at_display 
cc86 11 e2 cb			ld de, .wordinhl 
cc89 3e 00			ld a, display_row_1 
cc8b			 
cc8b cd c2 8a				call str_at_display 
cc8e 11 6b ee			ld de, debug_mark 
cc91 3e 11			ld a, display_row_1+17 
cc93			 
cc93 cd c2 8a				call str_at_display 
cc96			 
cc96				; display current data stack pointer 
cc96 11 de cb			ld de,.data_sp 
cc99 3e 30				ld a, display_row_2 + 8 
cc9b cd c2 8a				call str_at_display 
cc9e			 
cc9e 2a ee e9			ld hl,(cli_data_sp) 
cca1 e5				push hl 
cca2 7c				ld a,h 
cca3 21 c6 e5			ld hl, os_word_scratch 
cca6 cd dd 8f			call hexout 
cca9 e1				pop hl 
ccaa 7d				ld a,l 
ccab 21 c8 e5			ld hl, os_word_scratch+2 
ccae cd dd 8f			call hexout 
ccb1 21 ca e5			ld hl, os_word_scratch+4 
ccb4 3e 00			ld a,0 
ccb6 77				ld (hl),a 
ccb7 11 c6 e5			ld de,os_word_scratch 
ccba 3e 33				ld a, display_row_2 + 11 
ccbc cd c2 8a				call str_at_display 
ccbf			 
ccbf			 
ccbf cd d2 8a			call update_display 
ccc2 cd f2 89			call delay1s 
ccc5 cd f2 89			call delay1s 
ccc8 e1				pop hl 
ccc9			.skipdsp: 
ccc9 f1				pop af 
ccca c9				ret 
cccb			 
cccb			display_data_malloc: 
cccb			 
cccb f5				push af 
cccc e5				push hl 
cccd e5				push hl 
ccce e5			push hl 
cccf cd af 8a			call clear_display 
ccd2 e1			pop hl 
ccd3 7c				ld a,h 
ccd4 21 c6 e5			ld hl, os_word_scratch 
ccd7 cd dd 8f			call hexout 
ccda e1				pop hl 
ccdb 7d				ld a,l 
ccdc 21 c8 e5			ld hl, os_word_scratch+2 
ccdf cd dd 8f			call hexout 
cce2 21 ca e5			ld hl, os_word_scratch+4 
cce5 3e 00			ld a,0 
cce7 77				ld (hl),a 
cce8 11 c6 e5			ld de,os_word_scratch 
cceb 3e 28				ld a, display_row_2 
cced cd c2 8a				call str_at_display 
ccf0 11 18 cc			ld de, .push_malloc 
ccf3 3e 00			ld a, display_row_1 
ccf5			 
ccf5 cd c2 8a				call str_at_display 
ccf8			 
ccf8				; display current data stack pointer 
ccf8 11 de cb			ld de,.data_sp 
ccfb 3e 30				ld a, display_row_2 + 8 
ccfd cd c2 8a				call str_at_display 
cd00			 
cd00 2a ee e9			ld hl,(cli_data_sp) 
cd03 e5				push hl 
cd04 7c				ld a,h 
cd05 21 c6 e5			ld hl, os_word_scratch 
cd08 cd dd 8f			call hexout 
cd0b e1				pop hl 
cd0c 7d				ld a,l 
cd0d 21 c8 e5			ld hl, os_word_scratch+2 
cd10 cd dd 8f			call hexout 
cd13 21 ca e5			ld hl, os_word_scratch+4 
cd16 3e 00			ld a,0 
cd18 77				ld (hl),a 
cd19 11 c6 e5			ld de,os_word_scratch 
cd1c 3e 33				ld a, display_row_2 + 11 
cd1e cd c2 8a				call str_at_display 
cd21			 
cd21 cd d2 8a			call update_display 
cd24 cd f2 89			call delay1s 
cd27 cd f2 89			call delay1s 
cd2a e1				pop hl 
cd2b f1				pop af 
cd2c c9				ret 
cd2d			;endif 
cd2d			 
cd2d			include "forth_autostart.asm" 
cd2d			; list of commands to perform at system start up 
cd2d			 
cd2d			startcmds: 
cd2d			;	dw test11 
cd2d			;	dw test12 
cd2d			;	dw test13 
cd2d			;	dw test14 
cd2d			;	dw test15 
cd2d			;	dw test16 
cd2d			;	dw test17 
cd2d			;	dw ifthtest1 
cd2d			;	dw ifthtest2 
cd2d			;	dw ifthtest3 
cd2d			;	dw mmtest1 
cd2d			;	dw mmtest2 
cd2d			;	dw mmtest3 
cd2d			;	dw mmtest4 
cd2d			;	dw mmtest5 
cd2d			;	dw mmtest6 
cd2d			;	dw iftest1 
cd2d			;	dw iftest2 
cd2d			;	dw iftest3 
cd2d			;	dw looptest1 
cd2d			;	dw looptest2 
cd2d			;	dw test1 
cd2d			;	dw test2 
cd2d			;	dw test3 
cd2d			;	dw test4 
cd2d			;	dw game2r 
cd2d			;	dw game2b1 
cd2d			;	dw game2b2 
cd2d			 
cd2d				; start up words that are actually useful 
cd2d			 
cd2d			;    dw spi1 
cd2d			;    dw spi2 
cd2d			;    dw spi3 
cd2d			;    dw spi4 
cd2d			;    dw spi5 
cd2d			;    dw spi6 
cd2d			;    dw spi7 
cd2d			; 
cd2d			;    dw spi8 
cd2d			;    dw spi9 
cd2d			;    dw spi10 
cd2d			 
cd2d			; file editor 
cd2d			;	dw edit1 
cd2d			;	dw edit2 
cd2d			;	dw edit3 
cd2d			 
cd2d			;	dw longread 
cd2d 2d d1			dw clrstack 
cd2f 61 d1			dw type 
cd31			;	dw stest 
cd31 86 d1			dw strncpy 
cd33			;	dw list 
cd33 e7 d1			dw start1 
cd35 f7 d1			dw start2 
cd37			;	dw start3 
cd37			;	dw start3b 
cd37			;	dw start3c 
cd37			 
cd37				; (unit) testing words 
cd37			 
cd37			;	dw mtesta 
cd37			;	dw mtestb 
cd37			;	dw mtestc 
cd37			;	dw mtestd 
cd37			;	dw mteste 
cd37			 
cd37				; demo/game words 
cd37			 
cd37			;        dw game3w 
cd37			;        dw game3p 
cd37			;        dw game3sc 
cd37			;        dw game3vsi 
cd37			;        dw game3vs 
cd37				 
cd37 50 dc			dw game2b 
cd39 be dc			dw game2bf 
cd3b 08 dd			dw game2mba 
cd3d 9e dd			dw game2mbas 
cd3f e0 dd			dw game2mb 
cd41			 
cd41 11 d9			dw game1 
cd43 22 d9			dw game1a 
cd45 84 d9			dw game1b 
cd47 b9 d9			dw game1c 
cd49 ef d9			dw game1d 
cd4b 20 da			dw game1s 
cd4d 34 da			dw game1t 
cd4f 49 da			dw game1f 
cd51 7d da			dw game1z 
cd53 c1 da			dw game1zz 
cd55			 
cd55 2b d7			dw test5 
cd57 63 d7			dw test6 
cd59 9b d7			dw test7 
cd5b af d7			dw test8 
cd5d db d7			dw test9 
cd5f f1 d7			dw test10 
cd61				 
cd61 98 db		        dw ssv5 
cd63 7c db		        dw ssv4 
cd65 60 db		        dw ssv3 
cd67 2a db		        dw ssv2 
cd69 b1 db		        dw ssv1 
cd6b f9 db		        dw ssv1cpm 
cd6d			;	dw keyup 
cd6d			;	dw keydown 
cd6d			;	dw keyleft 
cd6d			;	dw keyright 
cd6d			;	dw 	keyf1 
cd6d			;	dw keyf2 
cd6d			;	dw keyf3 
cd6d			;	dw keyf4 
cd6d			;	dw keyf5 
cd6d			;	dw keyf6 
cd6d			;	dw keyf7 
cd6d			;	dw keyf8 
cd6d			;	dw keyf9 
cd6d			;	dw keyf10 
cd6d			;	dw keyf11 
cd6d			;	dw keyf12 
cd6d			;	dw keytab 
cd6d			;	dw keycr 
cd6d			;	dw keyhome 
cd6d			;	dw keyend 
cd6d			;	dw keybs 
cd6d 00 00			db 0, 0	 
cd6f			 
cd6f			 
cd6f			; File Editor 
cd6f			 
cd6f			; ( id - ) use 'e' to edit the displayed line 
cd6f .. 00		edit1: db ": edc waitk $65 = if ede then ; ", 0 
cd90 .. 00		edit2: db ": ede storepage ptr $02 + cls dedit filepage bupd ; ", 0 
cdc5			;edit2: db ": ede v1@ v0@ record drop storepage ptr $02 + cls dedit filepage bupd ; ", 0 
cdc5 .. 00		edit3: db ": ed dup v0! open $01 do i v0@ record cls . edc loop ; ",0 
cdfd			;edit3: db ": ed dup v0! open $01 do i v0@ record cls . i v1! edc loop ; ",0 
cdfd			 
cdfd			; SPI Net support words 
cdfd			 
cdfd			; v0! = node to send to 
cdfd			; ( str count - ) 
cdfd .. 00		spi1:       db ": spitype spiceh $00 do dup i + @ v0@ spicel $10 spio spio spio spiceh $01 pause loop ; ",0 
ce56			 
ce56			; spiputchr ( char node - ) 
ce56 .. 00		spi2:       db ": spiputchr spicel $10 spio spio ptr @ spio spiceh ; ",0 
ce8c			 
ce8c			; spigetchr ( - n ) 
ce8c .. 00		spi4:       db ": spigetchr spicel $11 spio spii spiceh ; ", 0 
ceb7			 
ceb7			; getnode ( - n ) 
ceb7 .. 00		spi5:       db ": getnode spicel $18 spio spii nop spiceh ; ", 0 
cee4			 
cee4			; ( str node - )  
cee4 .. 00		spi3:       db ": sendnode v0! count spiceh $00 do dup i + @ v0@ spicel $10 spio spio spio spiceh $01 pause loop ; ; ",0 
cf4a			; store string ( str i - ) 
cf4a			 
cf4a			;spi3:       db ": storestrold spicel $03 spio spio ptr count clkstro spiceh ; ", 0 
cf4a .. 00		spi6:       db ": storestr spicel $12 spio spio count $00 do dup i + @ spio $01 pause loop spiceh ; ", 0 
cf9f			 
cf9f			; get string ( addr i -  )    TO FIX 
cf9f			 
cf9f .. 00		spi7:       db ": getstorestr spicel $13 spio spio \" \" repeat spii dup concat $00 = not until spiceh ; ", 0 
cff7			 
cff7			 
cff7			; NETCHAT (TODO) 
cff7			; Program to allow two nodes to chat with eachother 
cff7			; 
cff7			; v0 - target node 
cff7			;  
cff7			; accept input at 0,0 
cff7			; if input is string send spitype to target node 
cff7			; starting at row 2,0 , while spigetchr is not zero ->  
cff7			; 
cff7			; 
cff7			; TODO add paging of get request 
cff7			 
cff7			; ( node - ) 
cff7 .. 00		spi8:		db ": netchatp $00 $00 at accept ;", 0 
d016 .. 00		spi9: 		db ": netchatr repeat spigetchr dup dup $00 = not if emit then $00 = not until $02 pause ; ",0 
d06e .. 00		spi10:		db ": netchat v0! repeat netchatp count dup $00 > if spitype $01 pause then cls $00 $03 at \">\" . netchatr true until nop ; ", 0 
d0e6			 
d0e6			 
d0e6			; Long read of currently open file 
d0e6 .. 00		longread:   db ": lread read repeat readcont if read concat then readcont until nop ; ", 0 
d12d			 
d12d			; clear stack  
d12d			 
d12d .. 00		clrstack:  db ": clrstk depth ?dup if $01 do drop loop then nop ; ", 0 
d161			 
d161			; type ( addr count - ) 
d161 .. 00		type:     db ": type $00 do dup i + @ emit loop ; ", 0 
d186			 
d186			; some direct memory words 
d186			; strncpy ( len t f -- t ) 
d186			 
d186 .. 00		strncpy:   db ": strncpy $00 scratch 2! $02 scratch 2! do $00 scratch 2@ i + @ $02 scratch 2@ i + ! loop nop  ;",0 
d1e7			 
d1e7 .. 00		start1:     	db ": bpon $00 bp ;",0 
d1f7 .. 00		start2:     	db ": bpoff $01 bp ;",0 
d208 .. 00		start3b:         db ": ls dir cls drop dup $00 > if $01 do $08 $04 at . $01 $04 at . $04 $04 at . $23 $04 at accept drop scroll loop then nop ;",0 
d283 .. 00		start3c:         db ": dirlist dir cls drop dup $00 > if $01 do \"/\" .> .> \"Ext:\" .> .> \"Id: \" .> .>  loop then nop ;",0 
d2e3			 
d2e3			 
d2e3			; a handy word to list items on the stack 
d2e3			 
d2e3 .. 00		list:            db ": more cls repeat scroll $01 $04 at depth . $0a $04 at .> $01 $01 at accept drop depth 0= not until nop ;",0 
d34d			 
d34d			 
d34d			; test stack  
d34d			; rnd8 stest 
d34d			 
d34d .. 00		stest:   db ": stest cls  v0! v0@ $00 do rnd8 $01 $01 at i . $01 pause loop v0@ $00 do drop $12 $01 at depth . $01 pause loop nop ;",0  
d3c4			 
d3c4			; random malloc and free cycles 
d3c4			 
d3c4 .. 00		mtesta:      db ": mtesta $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . rnd8 dup $13 $01 at . malloc heap $1f $01 at . $1f $02 at . $01 pause free $01 until nop ;", 0 
d479			 
d479			; fixed malloc and free cycles 
d479			 
d479 .. 00		mtestb:      db ": mtestb $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 malloc heap $1f $01 at . $1f $02 at . $01 pause free $01 until nop ;", 0 
d51c			 
d51c			; fixed double string push and drop cycle  
d51c			 
d51c .. 00		mtestc:      db ": mtestc $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 spaces $2f spaces  heap $1f $01 at . $1f $02 at . $01 pause drop drop $01 until nop ; ", 0 
d5d1			 
d5d1			; consistent fixed string push and drop cycle  
d5d1			 
d5d1 .. 00		mtestd:      db ": mtestd $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 spaces heap $1f $01 at . $1f $02 at . $01 pause drop $01 until nop ; ", 0 
d675			 
d675 .. 00		mteste:      db ": mteste $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . rnd8 dup spaces $0f $02 at . heap $1f $01 at . $1f $02 at . $01 pause drop $01 until nop ; ", 0 
d72b			 
d72b			;test1:		db ": aa 1 2 3 ;", 0 
d72b			;test2:     	db "111 aa 888 999",0 
d72b			;test3:     	db ": bb 77 ;",0 
d72b			;test4:     	db "$02 $01 do i . loop bb",0 
d72b			 
d72b .. 00		test5:     	db ": hline $13 $00 do i $01 at 1 . i $04 at 1 . loop nop ;",0 
d763 .. 00		test6:     	db ": vline $04 $01 do $00 i at 1 . $13 i at 1 . loop nop ;",0 
d79b .. 00		test7:     	db ": box hline vline ;",0 
d7af .. 00		test8:     	db ": world cls box $03 $03 at Hello-World! . ;",0 
d7db .. 00		test9:     	db ": sw $01 adsp world ;",0 
d7f1 .. 00		test10:     	db ": fw $00 adsp world draw $05 pause ;",0 
d816 .. 00		test11:     	db "hello create .",0 
d825 .. 00		test12:     	db "hello2 create .",0 
d835			 
d835			;mmtest1:     	db "cls $0001 $0008 MIN . $0002 pause",0 
d835			;mmtest2:     	db "cls $0101 $0008 MIN . $0002 pause",0 
d835			;mmtest3:     	db "cls $0001 $0008 MAX . $0002 pause",0 
d835			;mmtest4:     	db "cls $0101 $0008 MAX . $0002 pause",0 
d835			;mmtest5:     	db "cls $0001 $0001 MIN . $0002 pause",0 
d835			;mmtest6:     	db "cls $0001 $0001 MAX . $0002 pause",0 
d835			 
d835			;iftest1:     	db "$0001 IF cls .",0 
d835			;iftest2:     	db "$0000 IF cls .",0 
d835			;iftest3:     	db "$0002 $0003 - IF cls .",0 
d835			;looptest1:     	db "$0003 $0001 do i . loop 8",0 
d835			;looptest2:     	db "$0003 $0001 do i . $0001 pause loop 8",0 
d835			 
d835			;ifthtest1:     	db "$0001 IF is-true . $0005 pause THEN next-word . $0005 pause",0 
d835			;ifthtest2:     	db "$0000 IF is-true . $0005 pause THEN next-word . $0005 pause",0 
d835			;ifthtest3:     	db "$0002 $0003 - IF is-true . $0005 pause THEN next-word . $0005 pause",0 
d835			 
d835			 
d835 .. 00		sound1: db ": note spicel spio spiceh spicel ; ",0 
d859 .. 00		sound2: db ": slient $9f note $bf note $df note $ff note ; ", 0 
d889 .. 00		sound3: db ": sound $01 cartdev $00 spitime ! ; ",0 
d8ae .. 00		sound4: db ": cha $00 ; ",0 
d8bb .. 00		sound5: db ": chb $20 ; ",0 
d8c8 .. 00		sound6: db ": chc $40 ; ",0 
d8d5 .. 00		sound7: db ": chd $60 ; ",0 
d8e2 .. 00		sound8: db ": cnote $80 + + note ; ", 0 
d8fa .. 00		sound9: db ": cvol $90 + + note ; ", 0 
d911			 
d911			 
d911			 
d911			 
d911			; a small guess the number game 
d911			 
d911 .. 00		game1:          db ": gsn rnd8 v1! ;",0 
d922 .. 00		game1a:          db ": gs $00 $00 at Enter-a-number .- $00 $02 at between-1-and-255 .- $00 $03 at accept str2num v2! ;",0 
d984			 
d984 .. 00		game1b:          db ": gcb v2@ v1@ < if $00 $00 at Too-low! .- $01 then ;",0 
d9b9 .. 00		game1c:          db ": gcc v2@ v1@ > if $00 $00 at Too-high! .- $01 then ;",0 
d9ef .. 00		game1d:          db ": gcd v2@ v1@ = if $00 $00 at Yes! .- $00 then ;",0 
da20 .. 00		game1s:          db ": gck gcb gcc gcd ;",0 
da34 .. 00		game1t:          db ": sc v3@ $01 + v3! ;",0 
da49 .. 00		game1f:          db ": fsc v3@ cls $01 $01 at You-Took .- $02 $03 at . ;",0 
da7d .. 00		game1z:         db ": ga $00 v3! gsn repeat cls gs cls gck $02 pause sc until fsc nop ;",0 
dac1			 
dac1			; Using 'ga' save a high score across multiple runs using external storage 
dac1			 
dac1 .. 00		game1zz:         db ": gas ga $01 bank $80 bread $01 $04 at Prev-Score .> storepage ptr $02 + dup 2@ . v3@ swap 2! $80 bupd ;",0 
db2a			 
db2a			 
db2a			;game2r:          db ": m2r rnd8 v1! ;  ",0, 0, 0, FORTH_END_BUFFER 
db2a			;game2b1:          db ": m2b1 $1f $00 do i v2@ at rnd8 $30 < if A . then loop nop ;  ",0, 0, 0, FORTH_END_BUFFER 
db2a			;game2b2:          db ": m2b cls $04 $01 do i v2! m2b1 loop ;  ",0, 0, 0, FORTH_END_BUFFER 
db2a			 
db2a			; simple screen saver to test code memory reuse to destruction 
db2a			 
db2a .. 00		ssv2:            db ": ssvchr $2a $2d rnd dup $2c = if drop $20 then nop ;",0 
db60 .. 00		ssv3:            db ": ssvposx $01 $27 rnd v0! ;",0 
db7c .. 00		ssv4:            db ": ssvposy $01 $05 rnd v1! ;",0 
db98 .. 00		ssv5:            db ": ssvt ssvposx ssvposy ;",0 
dbb1 .. 00		ssv1:          db ": ssv cls repeat ssvposx ssvposy v0@ v1@ at ssvchr emit $01 until nop ;",0 
dbf9 .. 00		ssv1cpm:          db ": ssvcpm cls repeat ssvposx ssvposy v0@ v1@ at ssvchr emit $01 pausems $01 until nop ;",0 
dc50			;ssv1:          db ": ssv cls repeat ssvt v0@ v1@ at ssvchr emit $01 until nop ;",0 
dc50			;ssv1:          db ": ssv ssvposx ssvposy at ssvchr ;",0 
dc50			;ssv1:            db ": ssv repeat ssvpos rnd8 $10 if               $01 until nop ;",0 
dc50			;ssv2:            db ": ssvchr v0! v1! at? ;",0 
dc50			;ssv5:            db ": ssvt ssvposx ssvposy v0@ .> v1@ .> ;",0 
dc50			;ssv2:            db ": ssvchr $2a $2d rnd  ;",0 
dc50			 
dc50			 
dc50			 
dc50			; minesweeper/battleship finding game 
dc50			; draws a game board of random ship/mine positions 
dc50			; user enters coords to see if it hits on 
dc50			; game ends when all are hit 
dc50			; when hit or miss says how many may be in the area 
dc50			 
dc50			; setup the game board and then hide it 
dc50 .. 00		game2b:          db ": mbsetup $02 fb cls $04 $01 do i v2! $10 $01 do i v2@ at rnd8 $30 < if A . then loop loop $05 pause $01 fb ;",0 
dcbe .. 00		game2bf:         db ": mbsetupf cls $04 $01 do i v2! $10 $01 do i v2@ at \"+\" . loop loop nop ;",0 
dd08			; prompt for where to target 
dd08 .. 00		game2mba:        db ": mbp $12 $04 at Turns .> v3@ . $12 $03 at Score .> v0@ . $12 $01 at Enter-X-__ .- $1a $01 at accept $12 $02 at Enter-Y-__ .- $1a $02 at accept nop ;", 0  
dd9e .. 00		game2mbas:        db ": mbsv str2num v2! str2num v1! nop ;", 0  
ddc3			; TODO see if the entered coords hits or misses pushes char hit of miss 
ddc3 .. 00		game2mbht:      db ": mbckht nop ;",0 
ddd2 .. 00		game2mbms:      db ": mbcms nop ;",0 
dde0			; TODO how many might be near by 
dde0 .. 00		game2mb:          db ": mb $00 v0! $00 v3! mbsetup mbsetupf repeat mbp mbsv $02 fb mbckht mbcms v1@ v2@ at@ $01 fb v1@ v2@ at emit $01 until nop ;",0 
de5d			 
de5d			; Game 3 
de5d			 
de5d			; Vert scroller ski game - avoid the trees! 
de5d			 
de5d			; v0 score (ie turns) 
de5d			; v1 player pos 
de5d			; v2 left wall 
de5d			; v3 right wall 
de5d			 
de5d			; Draw side walls randomly 
de5d			 
de5d .. 00		game3w:   db ": vsw v2@ $04 at \"|\" . v3@ $04 at \"|\" . nop ;", 0 
de8b			 
de8b			; Draw player 
de8b .. 00		game3p:   db ": vsp v1@ $01 at \"V\" . nop ; ", 0 
dea9			 
dea9			; TODO Get Key 
dea9			 
dea9			; TODO Move left right 
dea9			 
dea9			; scroll and move walls a bit 
dea9			 
dea9 .. 00		game3sc:  db ": vsscl v2@ $01 + v2! v3@ $01 - v3! scroll nop ;", 0 
deda			 
deda			; main game loop 
deda			 
deda .. 00		game3vsi:    db ": vsi $00 v0! $01 v2! $12 v3! $06 v1! nop ;",0 
df06 .. 00		game3vs:    db ": vs vsi repeat vsw vsp vsscl $05 pause scroll $01 until nop ;",0 
df45			 
df45			; key board defs 
df45			 
df45 .. 00		keyup:       db ": keyup $05 ;",0 
df53 .. 00		keydown:       db ": keydown $0a ;",0 
df63 .. 00		keyleft:       db ": keyleft $0b ;",0 
df73 .. 00		keyright:       db ": keyright $0c ;",0 
df84 .. 00		keyf1:       db ": keyf1 $10 ;",0 
df92 .. 00		keyf2:       db ": keyf2 $11 ;",0 
dfa0 .. 00		keyf3:       db ": keyf3 $12 ;",0 
dfae .. 00		keyf4:       db ": keyf4 $13 ;",0 
dfbc .. 00		keyf5:       db ": keyf5 $14 ;",0 
dfca .. 00		keyf6:       db ": keyf6 $15 ;",0 
dfd8 .. 00		keyf7:       db ": keyf7 $16 ;",0 
dfe6 .. 00		keyf8:       db ": keyf8 $17 ;",0 
dff4 .. 00		keyf9:       db ": keyf9 $18 ;",0 
e002 .. 00		keyf10:       db ": keyf10 $19 ;",0 
e011 .. 00		keyf11:       db ": keyf11 $1a ;",0 
e020 .. 00		keyf12:       db ": keyf12 $1b ;",0 
e02f			 
e02f .. 00		keytab:       db ": keytab $09 ;",0 
e03e .. 00		keycr:       db ": keycr $0d ;",0 
e04c .. 00		keyhome:       db ": keyhome $0e ;",0 
e05c .. 00		keyend:       db ": keyend $0f ;",0 
e06b .. 00		keybs:       db ": keybs $08 ;",0 
e079			 
e079			   
e079			 
e079			 
e079			 
e079			; eof 
# End of file forth_autostart.asm
e079			 
e079			 
e079			 
e079			; stack over and underflow checks 
e079			 
e079			; init the words to detect the under/overflow 
e079			 
e079			chk_stk_init: 
e079				; a vague random number to check so we dont get any "lucky" hits 
e079 3e 2d			ld a, 45 
e07b 6f				ld l, a 
e07c 00				nop 
e07d 3e 17			ld a, 23 
e07f 67				ld h, a 
e080			 
e080 22 a9 e2			ld (chk_word), hl     ; the word we need to check against 
e083			 
e083			;	ld (chk_stund), hl	; stack points.... 
e083 22 00 ef			ld (chk_stovr), hl 
e086 22 ec e9			ld (chk_ret_und), hl 
e089 22 aa e9			ld (chk_ret_ovr), hl 
e08c 22 28 e9			ld (chk_loop_ovr), hl 
e08f 22 26 e8			ld (chk_data_ovr), hl 
e092 c9				ret 
e093				 
e093			check_stacks: 
e093				; check all stack words 
e093			 
e093 e5				push hl 
e094 d5				push de 
e095			 
e095			;	ld de,(chk_word) 
e095			;	ld hl, (chk_stund)	; stack points.... 
e095			;	if DEBUG_STK_FAULT 
e095			;		DMARK "FAa" 
e095			;		CALLMONITOR 
e095			;	endif 
e095			;	call cmp16 
e095			;	jp z, .chk_faulta 
e095			; 
e095			;	ld de, sfaultsu 
e095			;	jp .chk_fault 
e095			 
e095 2a 00 ef		.chk_faulta: ld hl, (chk_stovr) 
e098 ed 5b a9 e2		ld de,(chk_word) 
e09c				if DEBUG_STK_FAULT 
e09c					DMARK "FAb" 
e09c					CALLMONITOR 
e09c				endif 
e09c cd fa 8c			call cmp16 
e09f 28 06			jr z, .chk_fault1 
e0a1 11 42 e1			ld de, sfaultso 
e0a4 c3 f6 e0			jp .chk_fault 
e0a7			.chk_fault1:  
e0a7 2a ec e9			ld hl, (chk_ret_und) 
e0aa ed 5b a9 e2		ld de,(chk_word) 
e0ae				if DEBUG_STK_FAULT 
e0ae					DMARK "FAU" 
e0ae					CALLMONITOR 
e0ae				endif 
e0ae cd fa 8c			call cmp16 
e0b1 ca ba e0			jp z, .chk_fault2 
e0b4 11 52 e1			ld de, sfaultru 
e0b7 c3 f6 e0			jp .chk_fault 
e0ba			.chk_fault2:  
e0ba 2a aa e9			ld hl, (chk_ret_ovr) 
e0bd ed 5b a9 e2		ld de,(chk_word) 
e0c1				if DEBUG_STK_FAULT 
e0c1					DMARK "FA1" 
e0c1					CALLMONITOR 
e0c1				endif 
e0c1 cd fa 8c			call cmp16 
e0c4 ca cd e0			jp z, .chk_fault3 
e0c7 11 60 e1			ld de, sfaultro 
e0ca c3 f6 e0			jp .chk_fault 
e0cd			.chk_fault3:  
e0cd 2a 28 e9			ld hl, (chk_loop_ovr) 
e0d0 ed 5b a9 e2		ld de,(chk_word) 
e0d4				if DEBUG_STK_FAULT 
e0d4					DMARK "FA2" 
e0d4					CALLMONITOR 
e0d4				endif 
e0d4 cd fa 8c			call cmp16 
e0d7 ca e0 e0			jp z, .chk_fault4 
e0da 11 7a e1			ld de, sfaultlo 
e0dd c3 f6 e0			jp .chk_fault 
e0e0			.chk_fault4:  
e0e0 2a 26 e8			ld hl, (chk_data_ovr) 
e0e3 ed 5b a9 e2		ld de,(chk_word) 
e0e7				if DEBUG_STK_FAULT 
e0e7					DMARK "FA3" 
e0e7					CALLMONITOR 
e0e7				endif 
e0e7 cd fa 8c			call cmp16 
e0ea ca f3 e0			jp z, .chk_fault5 
e0ed 11 94 e1			ld de, sfaultdo 
e0f0 c3 f6 e0			jp .chk_fault 
e0f3			 
e0f3			 
e0f3			.chk_fault5:  
e0f3 d1				pop de 
e0f4 e1				pop hl 
e0f5			 
e0f5 c9				ret 
e0f6			 
e0f6 cd af 8a		.chk_fault: 	call clear_display 
e0f9 3e 28				ld a, display_row_2 
e0fb cd c2 8a				call str_at_display 
e0fe 11 24 e1				   ld de, .stackfault 
e101 3e 00				ld a, display_row_1 
e103 cd c2 8a				call str_at_display 
e106 11 6b ee				    ld de, debug_mark 
e109 3e 11				ld a, display_row_1+17 
e10b cd c2 8a				call str_at_display 
e10e cd d2 8a				call update_display 
e111			 
e111				; prompt before entering montior for investigating issue 
e111			 
e111 3e 78			ld a, display_row_4 
e113 11 2d 98			ld de, endprog 
e116			 
e116 cd d2 8a			call update_display		 
e119			 
e119 cd b3 9a			call next_page_prompt 
e11c			 
e11c d1				pop de 
e11d e1				pop hl 
e11e cd 81 98				call monitor 
e121 c3 8b 97				jp warmstart 
e124					;jp 0 
e124					;halt 
e124			 
e124			 
e124			 
e124 .. 00		.stackfault: 	db "Stack fault:",0 
e131			 
e131 .. 00		sfaultsu: 	db	"Stack under flow",0 
e142 .. 00		sfaultso: 	db	"Stack over flow",0 
e152 .. 00		sfaultru:	db "RTS underflow",0 
e160 .. 00		sfaultro:	db "RTS overflow/LS underflow", 0 
e17a .. 00		sfaultlo:	db "LS overflow/DTS underflow", 0 
e194 .. 00		sfaultdo:	db "DTS overflow", 0 
e1a1			 
e1a1			 
e1a1			fault_dsp_under: 
e1a1 11 b3 e1			ld de, .dsp_under 
e1a4 c3 63 e2			jp .show_fault 
e1a7			 
e1a7			fault_rsp_under: 
e1a7 11 c1 e1			ld de, .rsp_under 
e1aa c3 63 e2			jp .show_fault 
e1ad			fault_loop_under: 
e1ad 11 cf e1			ld de, .loop_under 
e1b0 c3 63 e2			jp .show_fault 
e1b3			 
e1b3 .. 00		.dsp_under: db "DSP Underflow",0 
e1c1 .. 00		.rsp_under: db "RSP Underflow",0 
e1cf .. 00		.loop_under: db "LOOP Underflow",0 
e1de			 
e1de			 
e1de d5			type_faultn: 	push de 
e1df e5					push hl 
e1e0 cd af 8a				call clear_display 
e1e3 11 0a e2				   ld de, .typefaultn 
e1e6 3e 00				ld a, display_row_1 
e1e8 cd c2 8a				call str_at_display 
e1eb 11 6b ee				    ld de, debug_mark 
e1ee 3e 11				ld a, display_row_1+17 
e1f0 cd c2 8a				call str_at_display 
e1f3 cd d2 8a				call update_display 
e1f6			 
e1f6				; prompt before entering montior for investigating issue 
e1f6			 
e1f6 3e 78			ld a, display_row_4 
e1f8 11 2d 98			ld de, endprog 
e1fb			 
e1fb cd d2 8a			call update_display		 
e1fe			 
e1fe cd b3 9a			call next_page_prompt 
e201			 
e201 e5					push hl 
e202 d5					push de 
e203 cd 81 98				call monitor 
e206 c3 8b 97				jp warmstart 
e209 76					halt 
e20a			 
e20a			 
e20a .. 00		.typefaultn: db "NUM Type Expected TOS!",0 
e221			 
e221 d5			type_faults: 	push de 
e222 e5					push hl 
e223 cd af 8a				call clear_display 
e226 11 4c e2				   ld de, .typefaults 
e229 3e 00				ld a, display_row_1 
e22b cd c2 8a				call str_at_display 
e22e 11 6b ee				    ld de, debug_mark 
e231 3e 11				ld a, display_row_1+17 
e233 cd c2 8a				call str_at_display 
e236 cd d2 8a				call update_display 
e239			 
e239				; prompt before entering montior for investigating issue 
e239			 
e239 3e 78			ld a, display_row_4 
e23b 11 2d 98			ld de, endprog 
e23e			 
e23e cd d2 8a			call update_display		 
e241			 
e241 cd b3 9a			call next_page_prompt 
e244			 
e244 e1					pop hl 
e245 d1					pop de 
e246 cd 81 98				call monitor 
e249 c3 8b 97				jp warmstart 
e24c			 
e24c			 
e24c .. 00		.typefaults: db "STR Type Expected TOS!",0 
e263			 
e263			.show_fault: 	 
e263 d5					push de 
e264 cd af 8a				call clear_display 
e267 d1					pop de 
e268 3e 00				ld a, display_row_1 
e26a cd c2 8a				call str_at_display 
e26d 11 6b ee				    ld de, debug_mark 
e270 3e 11				ld a, display_row_1+17 
e272 cd c2 8a				call str_at_display 
e275 cd d2 8a				call update_display 
e278			 
e278				; prompt before entering montior for investigating issue 
e278			 
e278 3e 78			ld a, display_row_4 
e27a 11 2d 98			ld de, endprog 
e27d			 
e27d cd d2 8a			call update_display		 
e280			 
e280 cd b3 9a			call next_page_prompt 
e283			 
e283 e1					pop hl 
e284 d1					pop de 
e285 cd 81 98				call monitor 
e288			; do a dump to cli and not warmstart so we preserve all of the uwords.  
e288			; TODO Make optional fault restart to cli or warm boot? 
e288					;jp warmstart 
e288 c3 d4 97				jp cli 
e28b 76					halt 
e28c			 
e28c			; handle the auto run of code from files in storage 
e28c			 
e28c			 
e28c			include "forth_startup.asm" 
e28c			; Which startup method to use? 
e28c			; 
e28c			; version 1 - allows for a single stored file to be selected to run at start up (if se storage is enabled) 
e28c			; followed by loading of a list of scripts in eeprom 
e28c			 
e28c			; version 2 - if se storage is enabled then auto load all files which begin with a '*' else use loading 
e28c			; from eeprom 
e28c			 
e28c			; Select with define in main stubs 
e28c			 
e28c			if STARTUP_V1 
e28c				include "forth_startupv1.asm" 
e28c			; Startup script loading version 1 
e28c			 
e28c			; If SE storage is available first stage is to use the selected file 
e28c			; then go through the eeprom list 
e28c			 
e28c .. 00		sprompt1: db "Startup load...",0 
e29c .. 00		sprompt2: db "Run? 1=No *=End #=All",0 
e2b2			 
e2b2			 
e2b2			 
e2b2			 
e2b2			forth_startup: 
e2b2 21 2d cd			ld hl, startcmds 
e2b5 3e 00			ld a, 0 
e2b7 32 e7 e6			ld (os_last_cmd), a    ; tmp var to skip prompts if doing all 
e2ba			 
e2ba e5			.start1:	push hl 
e2bb cd af 8a			call clear_display 
e2be 11 8c e2			ld de, sprompt1 
e2c1 3e 00		        ld a, display_row_1 
e2c3 cd c2 8a			call str_at_display 
e2c6 11 9c e2			ld de, sprompt2 
e2c9 3e 28		        ld a, display_row_2 
e2cb cd c2 8a			call str_at_display 
e2ce e1				pop hl 
e2cf e5				push hl 
e2d0 5e				ld e,(hl) 
e2d1 23				inc hl 
e2d2 56				ld d,(hl) 
e2d3 3e 50		        ld a, display_row_3 
e2d5 cd c2 8a			call str_at_display 
e2d8 cd d2 8a			call update_display 
e2db			 
e2db			 
e2db 3a e7 e6			ld a, (os_last_cmd) 
e2de fe 00			cp 0 
e2e0 28 05			jr z, .startprompt 
e2e2 cd e6 89			call delay250ms 
e2e5 18 24			jr .startdo 
e2e7				 
e2e7				 
e2e7			 
e2e7			.startprompt: 
e2e7			 
e2e7 3e 9f			ld a,display_row_4 + display_cols - 1 
e2e9 11 b1 9a		        ld de, endprg 
e2ec cd c2 8a			call str_at_display 
e2ef cd d2 8a			call update_display 
e2f2 cd f2 89			call delay1s 
e2f5 cd 18 e4			call cin_wait 
e2f8						 
e2f8 fe 2a			cp '*' 
e2fa 28 5e			jr z, .startupend1 
e2fc fe 23			cp '#' 
e2fe 20 07			jr nz, .startno 
e300 3e 01			ld a, 1 
e302 32 e7 e6			ld (os_last_cmd),a 
e305 18 04			jr .startdo 
e307 fe 31		.startno:	cp '1' 
e309 28 3a			jr z,.startnxt  
e30b			 
e30b				; exec startup line 
e30b			.startdo:	 
e30b e1				pop hl 
e30c e5				push hl 
e30d				 
e30d 5e				ld e,(hl) 
e30e 23				inc hl 
e30f 56				ld d,(hl) 
e310 eb				ex de,hl 
e311			 
e311 e5				push hl 
e312			 
e312 3e 00			ld a, 0 
e314				;ld a, FORTH_END_BUFFER 
e314 cd 45 91			call strlent 
e317 23				inc hl   ; include zero term to copy 
e318 06 00			ld b,0 
e31a 4d				ld c,l 
e31b e1				pop hl 
e31c 11 c1 e2			ld de, scratch 
e31f ed b0			ldir 
e321			 
e321			 
e321 21 c1 e2			ld hl, scratch 
e324 cd 36 9f			call forthparse 
e327 cd 76 9f			call forthexec 
e32a cd 88 9e			call forthexec_cleanup 
e32d			 
e32d 3e 78			ld a, display_row_4 
e32f 11 2d 98			ld de, endprog 
e332			 
e332 cd d2 8a			call update_display		 
e335			 
e335 3a e7 e6			ld a, (os_last_cmd) 
e338 fe 00			cp 0 
e33a 20 09			jr nz, .startnxt 
e33c cd b3 9a			call next_page_prompt 
e33f cd af 8a		        call clear_display 
e342 cd d2 8a			call update_display		 
e345			 
e345				; move onto next startup line? 
e345			.startnxt: 
e345			 
e345 cd e6 89			call delay250ms 
e348 e1				pop hl 
e349			 
e349 23				inc hl 
e34a 23				inc hl 
e34b			 
e34b e5				push hl 
e34c 5e				ld e, (hl) 
e34d 23				inc hl 
e34e 56				ld d, (hl) 
e34f e1				pop hl 
e350				; TODO replace 0 test 
e350			 
e350 eb				ex de, hl 
e351 cd 05 8d			call ishlzero 
e354			;	ld a,e 
e354			;	add d 
e354			;	cp 0    ; any left to do? 
e354 eb				ex de, hl 
e355 c2 ba e2			jp nz, .start1 
e358 18 01			jr .startupend 
e35a			 
e35a e1			.startupend1: pop hl 
e35b			.startupend: 
e35b			 
e35b cd af 8a			call clear_display 
e35e cd d2 8a			call update_display 
e361 c9				ret 
e362			if STORAGE_SE 
e362			 
e362			sprompt3: db "Loading from start-up file?:",0 
e362			sprompt4: db "(Y=Any key/N=No)",0 
e362			 
e362			 
e362			forth_autoload: 
e362			 
e362				; load block 0 of store 1 
e362				 
e362				ld a, $fe      ; bit 0 clear 
e362				ld (spi_device), a 
e362			 
e362				call storage_get_block_0 
e362			 
e362				ld a, (store_page+STORE_0_AUTOFILE) 
e362			 
e362				cp 0 
e362				ret z     ; auto start not enabled 
e362			 
e362				call clear_display 
e362			 
e362				; set bank 
e362			 
e362					ld a, (store_page+STORE_0_BANKRUN) 
e362					ld (spi_device), a 
e362			 
e362				; get file id to load from and get the file name to display 
e362			 
e362					ld a, (store_page+STORE_0_FILERUN) 
e362			 
e362					ld l, 0 
e362					ld h, a 
e362					ld de, store_page 
e362			 
e362					if DEBUG_FORTH_WORDS 
e362						DMARK "ASp" 
e362						CALLMONITOR 
e362					endif 
e362					call storage_read 
e362			 
e362					if DEBUG_FORTH_WORDS 
e362						DMARK "ASr" 
e362						CALLMONITOR 
e362					endif 
e362			 
e362					call ishlzero 
e362					ret z             ; file not found 
e362			 
e362					ld a, display_row_2 + 10 
e362					ld de, store_page+3 
e362					call str_at_display 
e362				 
e362			; 
e362			 
e362				ld a, display_row_1+5 
e362				ld de, sprompt3 
e362				call str_at_display 
e362				ld a, display_row_3+15 
e362				ld de, sprompt4 
e362				call str_at_display 
e362			 
e362				call update_display 
e362			 
e362				call cin_wait 
e362				cp 'n' 
e362				ret z 
e362				cp 'N' 
e362				ret z 
e362			 
e362				call delay1s 
e362			 
e362				ld a, (store_page+2) 
e362				ld (store_openmaxext), a    ; save count of ext 
e362				ld a, 1  
e362				ld (store_openext), a    ; save count of ext 
e362			 
e362			.autof:  
e362				ld l , a 
e362				 
e362				ld a, (store_page) 
e362				ld h, a	 
e362				ld de, store_page 
e362					if DEBUG_FORTH_WORDS 
e362						DMARK "ASl" 
e362						CALLMONITOR 
e362					endif 
e362					call storage_read 
e362				call ishlzero 
e362				ret z 
e362			;	jr z, .autoend 
e362			 
e362					if DEBUG_FORTH_WORDS 
e362						DMARK "ASc" 
e362						CALLMONITOR 
e362					endif 
e362				ld de, store_page+2 
e362				ld a, display_row_4 
e362				call str_at_display 
e362			 
e362				call update_display 
e362				call delay250ms 
e362			 
e362			 
e362			 
e362				ld hl, store_page+2 
e362				call forthparse 
e362				call forthexec 
e362				call forthexec_cleanup 
e362			 
e362				 
e362				ld a, (store_openext) 
e362				inc a 
e362				ld (store_openext), a    ; save count of ext 
e362			 
e362				jr .autof 
e362			;.autofdone: 
e362			; 
e362			;		if DEBUG_FORTH_WORDS 
e362			;			DMARK "ASx" 
e362			;			CALLMONITOR 
e362			;		endif 
e362			;;	call clear_display 
e362			;	ret 
e362			 
e362			 
e362			 
e362			endif 
# End of file forth_startupv1.asm
e362			endif 
e362			if STARTUP_V2 
e362				include "forth_startupv2.asm" 
e362			endif 
e362			 
# End of file forth_startup.asm
e362			 
e362			; eof 
# End of file forth_kernel.asm
e362			;include "nascombasic.asm" 
e362			 
e362			 
e362			; find out where the code ends if loaded into RAM (for SC114) 
e362			;endofcode:  
e362			;	nop 
e362			 
e362			 
e362			; jump to nmi vector 
e362			 
e362			init_nmi: 
e362 3e c9			ld a, $c9   ; RET 
e364 32 72 ee			ld (nmi_vector), a 
e367 c9				ret 
e368			nmi: 
e368 e5				push hl 
e369 d5				push de 
e36a c5				push bc 
e36b f5				push af 
e36c cd 72 ee			call nmi_vector 
e36f f5				push af 
e370 c5				push bc 
e371 d5				push de 
e372 e5				push hl 
e373 ed 4d			reti 
e375			 
e375			 
e375			; eof 
e375			 
# End of file main.asm
e375			;include "firmware_lcd_4x40.asm" 
e375			;;include "firmware_lcd_4x20.asm" 
e375			include "firmware_serial_display.asm" 
e375			 
e375			; Serial display interface for SC114 
e375			 
e375			 
e375			display_row_1: equ 0 
e375			display_row_2: equ display_row_1+display_cols 
e375			display_row_3: equ display_row_2 + display_cols 
e375			display_row_4: equ display_row_3 + display_cols 
e375			 
e375			kLCDWidth:  EQU display_cols             ;Width in characters 
e375			kLCD_Line1: EQU 0x00  
e375			kLCD_Line2: EQU kLCD_Line1+kLCDWidth 
e375			; E1 
e375			kLCD_Line3: EQU kLCD_Line2+kLCDWidth 
e375			kLCD_Line4: EQU kLCD_Line3+kLCDWidth  
e375			 
e375			lcd_init: 
e375				; no init as handled by the SCM bios 
e375 c9				ret 
e376			 
e376			 
e376			; low level functions for direct screen writes 
e376			 
e376			; output char at pos? 
e376			fLCD_Str: 
e376			        ;out (SC114_SIO_1_OUT),a 
e376 c5				push bc 
e377 0e 02			ld c, $02 
e379 f7				rst $30 
e37a c1				pop bc 
e37b c9				ret 
e37c			 
e37c			; position the cursor on the screen using A as realtive point in screen buffer (i.e. A=(x+(width/y))) 
e37c			fLCD_Pos: 
e37c				; use ASCII escape to position 
e37c			        ;out (SC114_SIO_1_OUT),a 
e37c c5				push bc 
e37d 0e 02			ld c, $02 
e37f f7				rst $30 
e380 c1				pop bc 
e381			 
e381 c9				ret 
e382			 
e382			; output char at pos 
e382			fLCD_Data: 
e382			      ;  out (SC114_SIO_1_OUT),a 
e382 c5				push bc 
e383 0e 02			ld c, $02 
e385 f7				rst $30 
e386 c1				pop bc 
e387			 
e387 c9				ret 
e388			 
e388			; ascii cls  
e388			 
e388 1b 5b 48 00	.cls:   db 27, '[', 'H', 0 
e38c			 
e38c			; write the frame buffer given in hl to hardware  
e38c			write_display: 
e38c			 
e38c			API: equ 0 
e38c			 
e38c			if API 
e38c				push bc 
e38c				ld b, 4 
e38c			 
e38c			        ld (display_write_tmp), hl 	  
e38c			 
e38c				; clear and home cursor 
e38c			 
e38c				ld c, 6 
e38c				ld de, .cls 
e38c				rst $30 
e38c			 
e38c			 
e38c			.writeln: 
e38c			 
e38c				ld de, (display_write_tmp) 
e38c				ld c, 6 
e38c				rst $30 
e38c				ld c, 7 
e38c				rst $30 
e38c			 
e38c				ld hl, (display_write_tmp) 
e38c				ld de, display_cols 
e38c				add hl,de 
e38c				ld (display_write_tmp),hl 
e38c			 
e38c				djnz  .writeln 
e38c			 
e38c				pop bc 
e38c			 
e38c			 
e38c				ret 
e38c			endif 
e38c e5				push hl 
e38d c5				push bc 
e38e d5				push de 
e38f			 
e38f			;	ld c, 2 
e38f			;	;ld de, .cls 
e38f			;	ld a, 27 
e38f			;	rst $30 
e38f			;	ld c, 2 
e38f			;	;ld de, .cls 
e38f			;	ld a, '[' 
e38f			;	rst $30 
e38f			; 
e38f			;	ld c, 2 
e38f			;	;ld de, .cls 
e38f			;	ld a, 'H' 
e38f			;	rst $30 
e38f			; 
e38f			 
e38f 0e 02			ld c, 2 
e391				;ld de, .cls 
e391 3e 1b			ld a, 27 
e393 f7				rst $30 
e394			 
e394			 
e394 0e 02			ld c, 2 
e396				;ld de, .cls 
e396 3e 5b			ld a, '[' 
e398 f7				rst $30 
e399 0e 02			ld c, 2 
e39b				;ld de, .cls 
e39b 3e 32			ld a, '2' 
e39d f7				rst $30 
e39e 0e 02			ld c, 2 
e3a0				;ld de, .cls 
e3a0 3e 4a			ld a, 'J' 
e3a2 f7				rst $30 
e3a3 d1				pop de 
e3a4 c1				pop bc 
e3a5 e1				pop hl 
e3a6			 
e3a6			 
e3a6 22 c9 eb		        ld (display_write_tmp), hl 	  
e3a9 3e 00			ld a, kLCD_Line1 
e3ab			        ;    CALL fLCD_Pos       ;Position cursor to location in A 
e3ab 06 28			ld b, display_cols 
e3ad ed 5b c9 eb		ld de, (display_write_tmp) 
e3b1 cd 0f e4			call write_len_string 
e3b4				 
e3b4			 
e3b4 e5			push hl 
e3b5 d5			push de 
e3b6 c5			push bc 
e3b7 0e 07			ld c, 7 
e3b9 f7				rst $30 
e3ba c1			pop bc 
e3bb d1			pop de 
e3bc e1			pop hl 
e3bd			 
e3bd				 
e3bd 2a c9 eb			ld hl, (display_write_tmp) 
e3c0 11 28 00			ld de, display_cols 
e3c3 19				add hl,de 
e3c4 22 c9 eb			ld (display_write_tmp),hl 
e3c7			 
e3c7				 
e3c7 3e 28			ld a, kLCD_Line2 
e3c9			        ;    CALL fLCD_Pos       ;Position cursor to location in A 
e3c9 06 28			ld b, display_cols 
e3cb ed 5b c9 eb		ld de, (display_write_tmp) 
e3cf cd 0f e4			call write_len_string 
e3d2				 
e3d2 2a c9 eb			ld hl, (display_write_tmp) 
e3d5 11 28 00			ld de, display_cols 
e3d8 19				add hl,de 
e3d9 22 c9 eb			ld (display_write_tmp),hl 
e3dc			 
e3dc e5			push hl 
e3dd d5			push de 
e3de c5			push bc 
e3df 0e 07			ld c, 7 
e3e1 f7				rst $30 
e3e2 c1			pop bc 
e3e3 d1			pop de 
e3e4 e1			pop hl 
e3e5			 
e3e5				 
e3e5 3e 50			ld a, kLCD_Line3 
e3e7			         ;   CALL fLCD_Pos       ;Position cursor to location in A 
e3e7 06 28			ld b, display_cols 
e3e9 ed 5b c9 eb		ld de, (display_write_tmp) 
e3ed cd 0f e4			call write_len_string 
e3f0				 
e3f0 2a c9 eb			ld hl, (display_write_tmp) 
e3f3 11 28 00			ld de, display_cols 
e3f6 19				add hl,de 
e3f7 22 c9 eb			ld (display_write_tmp),hl 
e3fa			 
e3fa e5			push hl 
e3fb d5			push de 
e3fc c5			push bc 
e3fd 0e 07			ld c, 7 
e3ff f7				rst $30 
e400 c1			pop bc 
e401 d1			pop de 
e402 e1			pop hl 
e403			 
e403				 
e403 3e 78			ld a, kLCD_Line4 
e405			          ;  CALL fLCD_Pos       ;Position cursor to location in A 
e405 06 28			ld b, display_cols 
e407 ed 5b c9 eb		ld de, (display_write_tmp) 
e40b cd 0f e4			call write_len_string 
e40e c9					ret 
e40f			 
e40f			 
e40f				; write out a fixed length string given in b from de 
e40f			 
e40f 1a			write_len_string:   LD   A, (DE)        ;Get character from string 
e410 cd 82 e3		            CALL fLCD_Data      ;Write character to display 
e413 13				inc de 
e414 10 f9			djnz write_len_string 
e416 c9				ret 
e417			 
e417			 
e417			; eof 
# End of file firmware_serial_display.asm
e417			;include "firmware_key_5x10.asm" 
e417			;;include "firmware_key_4x10.asm" 
e417			include "firmware_key_serial.asm" 
e417			; Serial keyboard interface for SC114 
e417			 
e417			key_init: 
e417				; no init as handled by the SCM bios 
e417 c9				ret 
e418			 
e418			 
e418			cin_wait: 
e418			;	ld a, 0 
e418			;	ret 
e418			 
e418				;in a,(SC114_SIO_1_IN) 
e418			        ; Use SCM API to get from whatever console device we are using 
e418 c5				push bc 
e419 0e 01			ld c, $01 
e41b f7				rst $30 
e41c c1				pop bc 
e41d c9				ret 
e41e			 
e41e			cin: 
e41e			 
e41e			 
e41e c5				push bc 
e41f			 
e41f				; any key waiting to process? 
e41f 0e 03			ld c, $03 
e421 f7				rst $30 
e422 28 05			jr z, .cin_skip 
e424			 
e424				; yep, get it 
e424			 
e424 0e 01			ld c, $01 
e426 f7				rst $30 
e427 c1				pop bc 
e428 c9				ret 
e429			.cin_skip: 
e429 3e 00			ld a, 0 
e42b c1				pop bc 
e42c c9				ret 
e42d			 
e42d			 
e42d			 
e42d			 
# End of file firmware_key_serial.asm
e42d			endofcode:  
e42d			baseram:  
e42d 00				nop 
e42e			 
e42e			heap_start: equ baseram+15  ; Starting address of heap 
e42e			free_list:  equ baseram+10      ; Block struct for start of free list (MUST be 4 bytes) 
e42e			heap_size: equ  heap_end-heap_start      ; Number of bytes available in heap   TODO make all of user ram 
e42e			;VDU:  EQU     endofcode           ; BASIC Work space 
e42e			; eof 
e42e			 
# End of file os_mega_sc114.asm
e42e
