# File os_mega_sc114.asm
0000			 
0000			; Hardware Platform 
0000			 
0000			BASE_SC114: equ 1 
0000			BASE_KEV: equ 0 
0000			BASE_CPM: equ 0 
0000			 
0000			ENABLE_BASIC: equ 0 
0000			 
0000			STARTUP_V1: equ 1 
0000			STARTUP_V2: equ 0 
0000			 
0000			tos:	equ 0f000h 
0000			; Using SCM API instead 
0000			;SC114_SIO_1_OUT: equ 81 
0000			;SC114_SIO_1_IN: equ 80 
0000			; 
0000			; 
0000			; CPU clock 
0000			; 
0000			CPU_CLOCK_4MHZ: equ 1 
0000			CPU_CLOCK_8MHZ: equ  0 
0000			CPU_CLOCK_10MHZ: equ  0 
0000			 
0000			; use microchip serial eeprom for storage 
0000			 
0000			STORAGE_SE: equ 0 
0000			SOUND_ENABLE: equ 0 
0000			 
0000			; the port where the PIO using the SC103 card is located 
0000			 
0000			SC103_PIO: equ 068h 
0000			 
0000			; Full OS but with the 5x10 fullsized keyboard 
0000			 
0000			display_rows: equ 4     
0000			;display_cols: equ 20 
0000			display_cols: equ 40 
0000			 
0000			key_rows: equ 5      
0000			key_cols: equ 10    
0000			 
0000			 
0000			include "main.asm" 
0000			; z80 homebrew opperating system 
0000			; 
0000			 
0000			STARTUP_ENABLE: equ 1 
0000			 
0000			 
0000			; bios jump points via rst 
0000			 
0000			if BASE_SC114 = 1  
0000			 
0000				org 8000h 
8000			endif 
8000			 
8000			if BASE_KEV = 1  
8000			 
8000				org 0h 
8000			endif 
8000			 
8000			if BASE_CPM = 1  
8000			 
8000				org 100h 
8000			endif 
8000 c3 62 96			jp coldstart     ; rst 0 - cold boot 
8003			 
8003			 
8003 ..			buildtime: db   "Build: " 
800a					include "romtimestamp.asm" 
800a ..			db '2025-08-09 11:19' 
# End of file romtimestamp.asm
801a 00				   db 0 
801b			 
801b			 
801b			 
801b			;        nop  
801b			;        nop 
801b			;;	org 05h		; null out bdos call 
801b			; 
801b			;        nop  
801b			;        nop  
801b			;        nop 
801b			;;	org 08h 
801b			;;; 
801b			;;	jp cin		; rst 8 - char in 
801b			;;; 
801b			; 
801b			;        nop 
801b			;        nop 
801b			;        nop 
801b			;        nop 
801b			;        nop 
801b			;        nop 
801b			;        nop 
801b			;        nop 
801b			;	org 010h 
801b			;; 
801b			;	jp cout		; rest 010h  - char out 
801b			;; 
801b			;	org 01bh   
801b			; 
801b			;	;jp  		; rst 01bh   - write string to display 
801b			;	jp str_at_display 
801b			; 
801b			; 
801b			;	org 020h 
801b			; 
801b			;	; jp		 ; rst 020h - read char at screen location 
801b			; 
801b			;	org 028h 
801b			 
801b				; jp		 ; rst 028h  - storage i/o 
801b			 
801b			; 	org 030h 
801b			;	jp break_point_state 
801b			  
801b			; $30  
801b			; org 038h 
801b			; $38 
801b			 
801b			; TODO any more important entry points to add to jump table for easier coding use? 
801b			 
801b			if BASE_KEV = 1  
801b			 
801b				; need to be at $66 for nmi support 
801b				db 0,255,0,255,0,255 
801b				db 0,255,0,255,0,255 
801b				db 0,255,0,255,0,255 
801b				db 0,255,0,255,0,255 
801b				db 0,255,0,255,0,255 
801b				db 0,255,0,255,0,255 
801b				db 0,255,0,255,0,255 
801b				db 0,255,0,255,0,255 
801b				db 0,255,0,255,0,255 
801b				db 0,255,0,255,0,255 
801b				db 0,255,0,255,0,255 
801b				db 0,255,0,255,0,255 
801b				db 0,255 
801b				jp nmi 
801b			endif 
801b			 
801b			include "firmware.asm" 
801b			  
801b			; main constants (used here and in firmware)  
801b			  
801b			; TODO have page 0 of storage as bios  
801b			  
801b			Device_A: equ 0h  
801b			Device_B: equ 040h          ; Sound  
801b			  
801b			if BASE_KEV  
801b			Device_C: equ 080h          ; Storage and ext cart devices  
801b			endif  
801b			  
801b			if BASE_SC114  
801b			Device_C: equ  SC103_PIO          ; Storage and ext cart devices  
801b			endif  
801b			  
801b			if BASE_CPM  
801b			; TODO fixup for CPM  
801b			Device_C: equ 080h          ; Storage and ext cart devices  
801b			endif  
801b			  
801b			Device_D: equ 0c0h             ; Keyboard and LCD  
801b			  
801b			; Odd specific debug points for testing hardware dev  
801b			  
801b			DEBUG_SOUND: equ 0       
801b			DEBUG_STK_FAULT: equ 0  
801b			DEBUG_INPUT: equ 0     ; Debug input entry code  
801b			DEBUG_INPUTV2: equ 0     ; Debug input entry code  
801b			DEBUG_KEYCINWAIT: equ 0  
801b			DEBUG_KEYCIN: equ 0  
801b			DEBUG_KEY: equ 0  
801b			DEBUG_KEY_MATRIX: equ 0  
801b			DEBUG_STORECF: equ 0  
801b			DEBUG_STORESE: equ 1        ; TODO  w locks up, r returns.   
801b			DEBUG_SPI_HARD_CE0: equ 0    ; only handshake on CE0 on port A  
801b			DEBUG_SPI: equ 0    ; low level spi tests  
801b			  
801b			; Enable many break points  
801b			  
801b			DEBUG_FORTH_PARSE_EXEC: equ 0     ; 6  
801b			DEBUG_FORTH_PARSE_EXEC_SLOW: equ 0     ; 6  
801b			DEBUG_FORTH_PARSE_NEXTWORD: equ 0  
801b			DEBUG_FORTH_JP: equ 0    ; 4  
801b			DEBUG_FORTH_MALLOC: equ 0  
801b			DEBUG_FORTH_MALLOC_INT: equ 0  
801b			DEBUG_FORTH_DOT: equ 1  
801b			DEBUG_FORTH_DOT_WAIT: equ 0  
801b			DEBUG_FORTH_MATHS: equ 0  
801b			DEBUG_FORTH_TOK: equ 0    ; 4  
801b			DEBUG_FORTH_PARSE: equ 0    ; 3  
801b			DEBUG_FORTH: equ 0  ;2  
801b			DEBUG_FORTH_WORDS: equ 1   ; 1  
801b			DEBUG_FORTH_PUSH: equ 1   ; 1  
801b			DEBUG_FORTH_UWORD: equ 1   ; 1  
801b			  
801b			; Enable key point breakpoints  
801b			  
801b			DEBUG_FORTH_DOT_KEY: equ 0  
801b			DEBUG_FORTH_PARSE_KEY: equ 0   ; 5  
801b			DEBUG_FORTH_WORDS_KEY: equ 1   ; 1  
801b			  
801b			; Debug stack imbalances  
801b			  
801b			ON: equ 1  
801b			OFF: equ 0  
801b			  
801b			DEBUG_STACK_IMB: equ 0  
801b			STACK_IMB_STORE: equ 20  
801b			  
801b			; House keeping and protections  
801b			  
801b			DEBUG_FORTH_STACK_GUARD: equ 1  
801b			DEBUG_FORTH_MALLOC_GUARD: equ 1  
801b			DEBUG_FORTH_MALLOC_HIGH: equ 0     ; warn only if more than 255 chars being allocated. would be highly unusual!  
801b			FORTH_ENABLE_FREE: equ 0  
801b			FORTH_ENABLE_MALLOCFREE: equ 1  
801b			FORTH_ENABLE_DSPPOPFREE: equ 1    ; TODO BUG Seems to be OK in some situations but with SW it crashes straight away  
801b			FORTH_ENABLE_FLOATMATH: equ 0  
801b			  
801b			  
801b			CALLMONITOR: macro  
801b			;	call break_point_state  
801b			; now use the break point debug vector  
801b				call debug_vector  
801b				endm  
801b			  
801b			MALLOC_1: equ 1        ; from dk88   
801b			MALLOC_2: equ 0           ; broke  
801b			MALLOC_3: equ 0           ; really broke  
801b			MALLOC_4: equ 0              ; mine pretty basic reuse and max of 250 chars  
801b			  
801b			if BASE_KEV   
801b			;stacksize: equ 256  
801b			; each stack entry is three bytes (type + word)  
801b			stacksize: equ 3*150  
801b			  
801b			STACK_RET_SIZE: equ 64  
801b			STACK_LOOP_SIZE: equ 128  
801b			STACK_DATA_SIZE: equ 512  
801b			endif  
801b			if BASE_SC114  
801b			;tos:	equ 0f000h  
801b			stacksize: equ 256  
801b			STACK_RET_SIZE: equ 64  
801b			STACK_LOOP_SIZE: equ 128  
801b			STACK_DATA_SIZE: equ 256  
801b			endif  
801b			  
801b			if BASE_CPM  
801b			;tos:	equ 0f000h  
801b			stacksize: equ 256  
801b			STACK_RET_SIZE: equ 64  
801b			STACK_LOOP_SIZE: equ 128  
801b			STACK_DATA_SIZE: equ 256  
801b			endif  
801b			  
801b			;if STORAGE_SE == 0  
801b			STORE_BLOCK_PHY:   equ 64    ; physical block size on storage   64byte on 256k eeprom  
801b			STORE_DEVICE_MAXBLOCKS:  equ  255*2 ; how many blocks are there on this storage device  
801b			;endif  
801b			  
801b			; Block 0 at offset $3b is a flag to decide to offer auto start up - 0 = prompt 1-auto run no prompt 2 - dont run  
801b			  
801b			STORE_0_AUTORUN: equ $20  
801b			  
801b			; Block 0 at offset $20+ holds the file number to run at system startup after the display  
801b			  
801b			STORE_0_AUTOFILE: equ $21  
801b			STORE_0_BANKRUN: equ $23  
801b			STORE_0_FILERUN: equ $24  
801b			  
801b			; Block 0 offsets for settings  
801b			  
801b			; if set then skip prompt for start up and accept all  
801b			  
801b			STORE_0_QUICKSTART: equ $25  
801b			  
801b			; Blocks where directory table is held  
801b			  
801b			; Reducing the number of entries increases the max file size  
801b			  
801b			;STORE_DIR_START: equ 1  
801b			;STORE_DIR_END: equ 33  
801b			  
801b			; Blocks from where file data is stored  
801b			  
801b			;STORE_DATA_START: equ STORE_DIR_END + 1  
801b			  
801b			; Block indicators (<32 are data files)  
801b			  
801b			;STORE_BLOCK_CFG: equ $8f       ; config block  
801b			;STORE_BLOCK_DIRF: equ $8e       ; directory block free  
801b			;STORE_BLOCK_DIRU: equ $8d       ; directory block free  
801b			;STORE_BLOCK_FREE: equ $85       ; data block free  
801b			;STORE_BLOCK_AUTO: equ $89       ; auto start code  
801b			  
801b			  
801b			  
801b			; Directory entry flags  
801b			  
801b			;STORE_DIR_FREE: equ 0  
801b			;STORE_DIR_FILE:  equ 1  
801b			  
801b			; Structure offsets to directory entries  
801b			;STORE_DE_FLAG: equ 0  
801b			;STORE_DE_MAXEXT: equ 1  
801b			;STORE_DE_FILENAME: equ 2  
801b			  
801b			; Structure offsets to block 0  
801b			  
801b			;STORE_BK0_ISFOR: equ 1  
801b			;STORE_BK0_LABEL: equ 3  
801b			  
801b			; memory allocation   
801b			  
801b			chk_stund: equ tos+2           ; underflow check word  
801b			chk_stovr: equ chk_stund-stacksize -2; overflow check word  
801b			  
801b			; keyscan table needs rows x cols buffer  
801b			;key_rows: equ 5     ; TODO move out to mini and maxi + 1 null  
801b			;key_cols: equ 10    ; TODO move out to mini and maxi + 1 null  
801b			  
801b			keyscan_table_row1: equ chk_stovr -key_cols-1  
801b			keyscan_table_row2: equ keyscan_table_row1-key_cols-1  
801b			keyscan_table_row3: equ keyscan_table_row2-key_cols-1  
801b			keyscan_table_row4: equ keyscan_table_row3-key_cols-1  
801b			keyscan_table_row5: equ keyscan_table_row4-key_cols-1  
801b			keyscan_table: equ keyscan_table_row5-(key_cols*key_rows)-1  
801b			keyscan_scancol: equ keyscan_table-key_cols  
801b			;keyscan_table_len: equ key_rows*key_cols  
801b			;keybufptr: equ keyscan_table - 2  
801b			;keysymbol: equ keybufptr - 1  
801b			key_held: equ keyscan_scancol-1	; currently held  
801b			key_held_prev: equ key_held - 1   ; previously held (to detect bounce and cycle of key if required)  
801b			key_repeat_ct: equ key_held_prev - 4 ; timers (two words)  
801b			key_fa: equ key_repeat_ct -1 ;  
801b			key_fb: equ key_fa -1 ;  
801b			key_fc: equ key_fb -1 ;  
801b			key_fd: equ key_fc -1 ;  
801b			key_face_held: equ key_fd - 1   
801b			; flag for enabling/disabling various hardware diag loading via block 0 on bank 1  
801b			  
801b			hardware_config: equ key_face_held - 10  
801b			  
801b			; hardware config switches  
801b			; TODO add bitmasks on includes for hardware  
801b			; high byte for expansion ids  
801b			;     0000 0000  no card inserted  
801b			;     0000 0001  storage card inserted  
801b			;     0000 0010  spi sd card active  
801b			  
801b			;       
801b			; low byte:  
801b			;     0000 0001   4x4 keypad  
801b			;     0000 0010   full keyboard  
801b			;     0000 0011   spi/ext keyboard  
801b			;     0000 0100   20x4 lcd  
801b			;     0000 1000   40x4 lcd  
801b			;     0000 1100   spi/ext display  
801b			;     0001 0000   ide interface available  
801b			  
801b			hardware_word: equ hardware_config - 2  
801b			  
801b			; debug marker - optional display of debug point on the debug screens  
801b			  
801b			nmi_vector:  equ hardware_word - 3   ; vector to the nmi handler  
801b			debug_vector:  equ nmi_vector - 3   ; vector to the debug handler  
801b			  
801b			debug_mark: equ debug_vector - 4  
801b			  
801b			; input_str vars  
801b			input_ptr:  equ debug_mark - 2    ; ptr to the current cursor position of string currently being edited  on entry starting   
801b			input_start:  equ input_ptr - 2    ; ptr to the start of string   
801b			input_size: equ input_start -1  ; number of chars  
801b			input_display_size: equ input_size -1  ; TODO number of chars that are displayable. if < input_size then scroll   
801b			input_at_pos: equ input_display_size - 1 ; frame buffer offset for start of input  
801b			input_under_cursor: equ input_at_pos - 1 ; char under the cursor so we can blink it  
801b			input_at_cursor: equ input_under_cursor - 1 ; offset of cursor to current start of string  
801b			input_cur_flash: equ input_at_cursor - 2 ;  timeout for cursor flash  
801b			input_cur_onoff: equ input_cur_flash - 1 ;  cursor blink on or off  
801b			input_len: equ input_cur_onoff - 5 ; length of current input  
801b			input_cursor: equ input_len - 5 ; offset of cursor to current start of string  
801b			  
801b			; cursor blink rate  
801b			CUR_BLINK_RATE: equ $09  
801b			;CUR_BLINK_RATE: equ 15  
801b			  
801b			key_actual_pressed: equ input_cursor - 1   
801b			key_symbol: equ key_actual_pressed - 1   
801b			key_shift: equ key_symbol - 1   
801b			  
801b			; Display allocation  
801b			  
801b			;display_rows: equ 4     ; move out to mini and mega files  
801b			;display_cols: equ 20  
801b			  
801b			display_fb_len: equ display_rows*display_cols  
801b			  
801b			; primary frame buffer     
801b			display_fb0: equ  key_shift-display_fb_len -1 ; -display_fb_len-1          ; cli input     TODO why is that doubling up?  
801b			; working frame buffers  
801b			display_fb1: equ  display_fb0-display_fb_len -1 ; -display_fb_len-1          ; default running program  
801b			display_fb3: equ  display_fb1-display_fb_len - 1  
801b			display_fb2: equ  display_fb3-display_fb_len - 1  
801b			;  
801b			; pointer to active frame buffer  
801b			display_fb_active: equ display_fb2 - 2  
801b			display_lcde1e2: equ display_fb_active - 1         ; 0=e1, 1=e2   For E1/E2 selection when using the lcd 4x40 display  
801b			display_write_tmp: equ display_lcde1e2 - 2  
801b			display_active:  equ display_write_tmp-3   ; current state of activity char (plus room to write string)  
801b			  
801b			;  
801b			  
801b			;; can load into de directory  
801b			cursor_col: equ display_active-1  
801b			cursor_row: equ cursor_col-1  
801b			cursor_ptr: equ cursor_row - 1     ;  actual offset into lcd memory for row and col combo  
801b			cursor_shape: equ cursor_ptr - 2   ; char used for the current cursor   
801b			  
801b			; maths vars  
801b			  
801b			LFSRSeed: equ cursor_shape -20   
801b			randData: equ LFSRSeed - 2  
801b			xrandc: equ randData - 2  
801b			stackstore: equ xrandc - 2  
801b			seed1: equ  stackstore -2   
801b			seed2: equ seed1 - 2  
801b			  
801b			; cf storage vars  
801b			  
801b			iErrorNum:  equ seed2-1         ;Error number  
801b			iErrorReg:  equ iErrorNum -1              ;Error register  
801b			iErrorVer:  equ iErrorReg - 1              ;Verify error flag  
801b			  
801b			store_bank_active: equ iErrorVer - (5 + 8 ) 		; TODO not used.  indicator of which storage banks are available to use 5 on board and 8 in cart  
801b			  
801b			STORE_BLOCK_LOG:  equ   280      ; TODO remove.... Logical block size     
801b			  
801b			store_page: equ store_bank_active-STORE_BLOCK_LOG-1            ; bigger than page size for eeprom so we can join multiple blocks if they are continuation records  
801b			;?????store_ffpage: equ store_page-STORE_BLOCK_LOG            ; page size for eeprom?????  
801b			store_readptr: equ store_page-2       ; tracks the file extent during storage_read of continuation blocks  
801b			store_readbuf: equ store_readptr-2       ; tracks the position for the buffer during storage_read of continuation blocks  
801b			store_longread: equ store_readbuf -1 ;   if zero then only read one block. If not zero then do a read for as long as required  
801b			store_tmp1: equ store_longread - 2      ; temp pointer holders during ops  
801b			store_tmp2: equ store_tmp1 - 2        ; temp pointer holders during ops  
801b			store_tmp3: equ store_tmp2 - 2        ; temp pointer holders during ops  
801b			store_tmpid: equ store_tmp3 - 1		; page temp id  
801b			store_tmpext: equ store_tmpid - 1		; file extent temp  
801b			store_readcont: equ store_tmpid - 1		; If current read results in an overflow buffer to next record flag it up  
801b			store_openaddr: equ store_readcont - 2		; file block address of current opened file for read  
801b			store_openext: equ store_openaddr - 1		; file extent of current opened file for read  
801b			store_openmaxext: equ store_openext - 1		; max extent of current opened file for read  
801b			store_filecache: equ store_openmaxext-2   ;  TODO (using just one for now)  file id + extent count cache * 5  
801b			store_tmppageid: equ store_filecache-2    ; phyical page id temp  
801b			;  
801b			; spi vars  
801b			  
801b			  
801b			spi_clktime: equ store_tmppageid - 1      ; holds the number of ms that happens between spi clock pulses  
801b			spi_cartdev: equ spi_clktime - 1      ; holds bit mask to send to portb (ext spi) devices  
801b			spi_cartdev2: equ spi_cartdev - 1      ; holds bit mask to send to portb's shift reg devices  
801b			spi_portbyte: equ spi_cartdev2 - 1      ; holds bit mask to send to spi bus   
801b			spi_device: equ spi_portbyte - 1    ; bit mask to send to porta (eeproms) devices  
801b			spi_device_id: equ spi_device - 1    ; human readable bank number  
801b			  
801b			;;;;; forth cli params  
801b			  
801b			; TODO use a different frame buffer for forth???  
801b			  
801b			f_cursor_ptr:  equ spi_device_id - 1  ; offset into frame buffer for any . or EMIT output  
801b			cli_buffer: equ f_cursor_ptr - 20     ; temp hold - maybe not needed  
801b			cli_origtoken: equ cli_buffer - 2     ; pointer to the text of token for this word being checked  
801b			cli_token: equ cli_origtoken - 2     ; pointer to the text of token for this word being checked  
801b			cli_execword: equ cli_token - 2      ; pointer to start of code for this word  
801b			cli_nextword: equ cli_execword - 2      ; pointer to start of next word in dict  
801b			cli_ptr: equ cli_nextword - 2           ; pointer to start of word to parse by forth kernel (working)  
801b			cli_origptr: equ cli_ptr - 2           ; pointer to start of word to parse which resets cli_ptr on each word test  
801b			  
801b			cli_mvdot: equ cli_origptr - 1 ;     ; true will move the cursor once something is displayed  
801b			cli_autodisplay: equ cli_mvdot - 1 ;     ; true will auto update the display (slow) otherwise need to use DRAW  
801b			cli_var_array: equ cli_autodisplay - ( 10 * 2 ) ; word or string pointer variables using V@0-V@9  
801b			cli_var_array2: equ cli_var_array - ( 26 * 2 ) ; word or string pointer variables using VAR word  
801b			cli_ret_sp: equ cli_var_array2 - 2    ; ret stack pointer  
801b			cli_loop_sp: equ cli_ret_sp - 2   ; data stack pointer  
801b			cli_data_sp: equ cli_loop_sp - 2   ; data stack pointer  
801b			  
801b			chk_ret_und: equ cli_data_sp-2           ; underflow check word  
801b			cli_ret_stack: equ chk_ret_und - STACK_RET_SIZE      ; TODO could I just use normal stack for this? - use linked list for looping  
801b			chk_ret_ovr: equ cli_ret_stack -2; overflow check word  
801b			cli_loop_stack: equ chk_ret_ovr - STACK_LOOP_SIZE      ; TODO could I just use normal stack for this? - use linked list for looping  
801b			chk_loop_ovr: equ cli_loop_stack -2; overflow check word  
801b			cli_data_stack: equ chk_loop_ovr - STACK_DATA_SIZE		 ;   
801b			chk_data_ovr: equ cli_data_stack -2; overflow check word  
801b			  
801b			os_var_array: equ chk_data_ovr - (32 * 2)      ;   32 word array for use using the SCRATCH word  
801b			  
801b			; os/forth token vars  
801b			  
801b			os_last_cmd: equ os_var_array-255  
801b			os_cli_cmd: equ os_last_cmd-255              ; cli command entry line  
801b			os_current_i: equ os_cli_cmd-2  
801b			os_cur_ptr: equ os_current_i-2  
801b			os_word_scratch: equ os_cur_ptr-30  
801b			os_tok_len: equ os_word_scratch - 2  
801b			os_tok_ptr: equ os_tok_len - 2               ; our current PC ptr  
801b			os_tok_malloc: equ os_tok_ptr - 2  
801b			os_last_new_uword: equ os_tok_malloc - 2    ; hold start of last user word added  
801b			os_input: equ os_last_new_uword-255    ; buffer for EDIT word  
801b			execscratch: equ os_input-255        ; exec cmd eval buffer  
801b			scratch: equ execscratch-255  
801b			  
801b			os_stack_1: equ scratch - 3       ; stack holding area 1  
801b			os_stack_2: equ os_stack_1 - 3       ; stack holding area 2  
801b			os_stack_3: equ os_stack_2 - 3       ; stack holding area 3  
801b			os_stack_4: equ os_stack_3 - 3       ; stack holding area 4  
801b			  
801b			  
801b			; temp locations for new word processing to save on adding more   
801b			  
801b			os_new_malloc: equ os_stack_4-2  
801b			os_new_parse_len: equ os_new_malloc - 2  
801b			os_new_word_len: equ os_new_parse_len - 2  
801b			os_new_work_ptr: equ os_new_word_len - 2  
801b			os_new_src_ptr: equ os_new_work_ptr - 2  
801b			os_new_exec: equ os_new_src_ptr - 2  
801b			os_new_exec_ptr: equ os_new_exec - 2  
801b			  
801b			; resume memory alloocations....  
801b			  
801b			;os_view_disable: equ os_new_exec_ptr - 1  
801b			os_view_af: equ os_new_exec_ptr - 2  
801b			os_view_hl: equ os_view_af -2  
801b			os_view_de: equ os_view_hl - 2  
801b			os_view_bc: equ os_view_de - 2  
801b			  
801b			; stack checksum word  
801b			if DEBUG_STACK_IMB  
801b				curframe: equ  os_view_de - 5  
801b				store_sp: equ curframe - (STACK_IMB_STORE*4)  
801b				chk_word: equ store_sp - 2		 ; this is the word to init and then check against to detect stack corruption. Held far away from all stacks  
801b			else  
801b				chk_word: equ os_view_bc - 2		 ; this is the word to init and then check against to detect stack corruption. Held far away from all stacks  
801b			endif  
801b			  
801b			; with data stack could see memory filled with junk. need some memory management   
801b			; malloc and free entry points added  
801b			  
801b			;free_list:  equ chk_word - 4     ; Block struct for start of free list (MUST be 4 bytes)  
801b			;heap_size: equ  (free_list-08100h)      ; Number of bytes available in heap   TODO make all of user ram  
801b			;;heap_start: equ free_list - heap_size  ; Starting address of heap  
801b			;heap_end: equ free_list-1  ; Starting address of heap  
801b			;heap_start: equ free_list - heap_size  ; Starting address of heap  
801b			  
801b			;heap_start: equ free_list - heap_size  ; Starting address of heap  
801b			heap_end: equ chk_word-1  ; Starting address of heap  
801b			  
801b			  
801b			;if BASE_KEV   
801b			;heap_start: equ 0800eh  ; Starting address of heap  
801b			;free_list:  equ 0800ah      ; Block struct for start of free list (MUST be 4 bytes)  
801b			;heap_size: equ  heap_end-heap_start      ; Number of bytes available in heap   TODO make all of user ram  
801b			;endif  
801b			  
801b			;if BASE_SC114  
801b			;heap_start: equ baseram+15  ; Starting address of heap  
801b			;free_list:  equ baseram+10      ; Block struct for start of free list (MUST be 4 bytes)  
801b			;endif  
801b			  
801b			  
801b			;;;;  
801b			  
801b			  
801b			; change below to point to last memory alloc above  
801b			topusermem:  equ   heap_start  
801b			  
801b			;if BASE_KEV   
801b			;baseusermem: equ 08000h  
801b			;endif  
801b			  
801b			;if BASE_SC114  
801b			;;aseusermem:     equ    12  
801b			;baseusermem:     equ    prompt  
801b			;;baseusermem:     equ    endofcode  
801b			;endif  
801b			  
801b			  
801b			; **********************************************************************  
801b			; **  Constants  
801b			; **********************************************************************  
801b			  
801b			; Constants used by this code module  
801b			kDataReg:   EQU Device_D           ;PIO port A data register  
801b			kContReg:   EQU Device_D+2           ;PIO port A control register  
801b			  
801b			  
801b			portbdata:  equ Device_D+1    ; port b data  
801b			portbctl:   equ Device_D+3    ; port b control  
801b			  
801b			  
801b			;KEY_SHIFT:   equ 5  
801b			;KEY_SYMBOLSHIFT:  equ 6  
801b			  
801b			KEY_SHIFTLOCK: equ 4  
801b			  
801b			  
801b			KEY_UP: equ 5  
801b			KEY_NEXTWORD: equ 6  
801b			KEY_PREVWORD: equ 7  
801b			KEY_BS: equ 8  
801b			KEY_TAB:  equ 9  
801b			KEY_DOWN: equ 10  
801b			KEY_LEFT: equ 11  
801b			KEY_RIGHT: equ 12  
801b			KEY_CR:   equ 13  
801b			KEY_HOME: equ 14  
801b			KEY_END: equ 15  
801b			  
801b			KEY_F1: equ 16  
801b			KEY_F2: equ 17  
801b			KEY_F3: equ 18  
801b			KEY_F4: equ 19  
801b			  
801b			KEY_F5: equ 20  
801b			KEY_F6: equ 21  
801b			KEY_F7: equ 22  
801b			KEY_F8: equ 23  
801b			  
801b			KEY_F9: equ 24  
801b			KEY_F10: equ 25  
801b			KEY_F11: equ 26  
801b			KEY_F12: equ 27  
801b			  
801b			;if DEBUG_KEY  
801b			;	KEY_MATRIX_NO_PRESS: equ '.'  
801b			;	KEY_SHIFT:   equ '.'  
801b			;	KEY_SYMBOLSHIFT:  equ '.'  
801b			;else  
801b				KEY_SHIFT:   equ '~'  
801b				KEY_SYMBOLSHIFT:  equ '~'  
801b				KEY_MATRIX_NO_PRESS: equ '~'  
801b			;endi  
801b			  
801b			  
801b			  
801b			  
801b			; Macro to make adding debug marks easier  
801b			  
801b			DMARK: macro str  
801b				push af  
801b				ld a, (.dmark)  
801b				ld (debug_mark),a  
801b				ld a, (.dmark+1)  
801b				ld (debug_mark+1),a  
801b				ld a, (.dmark+2)  
801b				ld (debug_mark+2),a  
801b				jr .pastdmark  
801b			.dmark: db str  
801b			.pastdmark: pop af  
801b			  
801b			endm  
801b			  
801b			  
801b			; macro to detect for stack imbalances  
801b			  
801b			include "stackimbal.asm"  
801b			; Macro and code to detect stock imbalances 
801b			 
801b			SPPUSH: equ 0 
801b			 
801b			; Add a stack frame which can be checked before return 
801b			 
801b			STACKFRAME: macro onoff frame1 frame2 
801b			 
801b				if DEBUG_STACK_IMB 
801b					if onoff 
801b						; save current SP 
801b						exx 
801b			 
801b						ld de, frame1 
801b						ld a, d 
801b						ld hl, curframe 
801b						call hexout 
801b						ld a, e 
801b						ld hl, curframe+2 
801b						call hexout 
801b			  
801b						ld hl, frame1 
801b						push hl 
801b						ld hl, frame2 
801b						push hl 
801b						exx 
801b					endif 
801b					 
801b				endif 
801b			endm 
801b			 
801b			STACKFRAMECHK: macro onoff frame1 frame2 
801b			 
801b					 
801b				if DEBUG_STACK_IMB 
801b					if onoff 
801b						exx 
801b						; check stack frame SP 
801b			 
801b						ld hl, frame2 
801b						pop de   ; frame2 
801b			 
801b						call cmp16 
801b						jr nz, .spnosame 
801b						 
801b			 
801b						ld hl, frame1 
801b						pop de   ; frame1 
801b			 
801b						call cmp16 
801b						jr z, .spfrsame 
801b			 
801b						.spnosame: call showsperror 
801b			 
801b						.spfrsame: nop 
801b			 
801b						exx 
801b					endif 
801b					 
801b				endif 
801b			 
801b			 
801b			endm 
801b			 
801b			 
801b			; for a sub routine, wrap SP collection and comparisons 
801b			 
801b			; Usage: 
801b			; 
801b			; SAVESP ON/OFF 0-STACK_IMB_STORE/4 
801b			; CHECKSP ON/OFF 0-STACK_IMB_STORE/4 
801b			 
801b			SAVESP: macro onoff storeword 
801b			 
801b				if DEBUG_STACK_IMB 
801b					if onoff 
801b						; save current SP 
801b			 
801b						ld (store_sp+(storeword*4)), sp 
801b			 
801b					endif 
801b					 
801b				endif 
801b			 
801b			endm 
801b			 
801b			CHECKSP: macro onoff storeword 
801b			 
801b				if DEBUG_STACK_IMB 
801b					if onoff 
801b			 
801b						; save SP after last save 
801b				 
801b						ld (store_sp+(storeword*4)+2), sp 
801b			 
801b						push hl 
801b						ld hl, store_sp+(storeword*4) 
801b						call check_stack_sp  
801b						pop hl 
801b			 
801b			 
801b					endif 
801b					 
801b				endif 
801b			 
801b			endm 
801b			 
801b			if DEBUG_STACK_IMB 
801b			 
801b			check_stack_sp: 
801b					push de 
801b			 
801b					ld e, (hl) 
801b					inc hl 
801b					ld d, (hl) 
801b					inc hl 
801b			 
801b					push de 
801b			 
801b			 
801b					ld e, (hl) 
801b					inc hl 
801b					ld d, (hl) 
801b					inc hl 
801b			 
801b					pop hl 
801b			 
801b			 
801b					; check to see if the same 
801b			 
801b					call cmp16 
801b					jr z, .spsame 
801b			 
801b					; not same 
801b			 
801b					call showsperror 
801b			.spsame: 
801b			 
801b					pop de 
801b			 
801b					ret 
801b			 
801b			.sperr:  db "Stack imbalance",0 
801b			 
801b			 
801b			showsperror: 
801b			 
801b			 
801b				push hl 
801b				push af 
801b				push de 
801b				call clear_display 
801b				ld de, .sperr 
801b				ld a,0 
801b			;	ld de,os_word_scratch 
801b				call str_at_display 
801b				ld a, display_row_1+17 
801b				ld de, debug_mark 
801b				call str_at_display 
801b				ld a, 0 
801b				ld (curframe+4),a 
801b				ld hl, curframe 
801b				ld de, os_word_scratch 
801b				ld a, display_row_4 
801b				call str_at_display 
801b				call update_display 
801b				;call break_point_state 
801b				call cin_wait 
801b			 
801b			;	ld a, ' ' 
801b			;	ld (os_view_disable), a 
801b				call bp_on 
801b				pop de	 
801b				pop af 
801b				pop hl 
801b				CALLMONITOR 
801b				ret 
801b			 
801b			endif 
801b			 
801b			 
801b			 
801b			; eof 
# End of file stackimbal.asm
801b			  
801b			;TODO macro to calc col and row offset into screen  
801b			  
801b			  
801b			  
801b			hardware_init:  
801b			  
801b				  
801b			  
801b					;ld a, 0  
801b					;ld (hardware_diag), a  
801b			  
801b					; clear all the buffers  
801b			  
801b 21 10 ed				ld hl, display_fb1  
801e 22 cc eb				ld (display_fb_active), hl  
8021			  
8021 cd ae 8a				call clear_display  
8024			  
8024 21 ce eb				ld hl, display_fb2  
8027 22 cc eb				ld (display_fb_active), hl  
802a			  
802a cd ae 8a				call clear_display  
802d			  
802d					; init primary frame buffer area  
802d 21 b1 ed				ld hl, display_fb0  
8030 22 cc eb				ld (display_fb_active), hl  
8033			  
8033 cd ae 8a				call clear_display  
8036			  
8036			  
8036 cd 4b dc				call lcd_init		; lcd hardware first as some screen functions called during key_init e.g. cursor shapes  
8039			  
8039 cd ed dc			call key_init  
803c cd 9e 80			call storage_init  
803f			  
803f				; setup malloc functions  
803f			  
803f				if MALLOC_1  
803f cd 92 90				call  heap_init  
8042				endif  
8042				if MALLOC_4  
8042					call  heap_init  
8042				endif  
8042			  
8042				; init sound hardware if present  
8042			  
8042				if SOUND_ENABLE  
8042					call sound_init  
8042				endif  
8042			  
8042				; lcd test sequence  
8042					  
8042 cd d1 8a			call update_display  
8045 cd f1 89			call delay1s  
8048 3e 2b			ld a,'+'  
804a cd b3 8a			call fill_display  
804d cd d1 8a			call update_display  
8050 cd f1 89			call delay1s  
8053 3e 2a			ld a,'*'  
8055 cd b3 8a			call fill_display  
8058 cd d1 8a			call update_display  
805b cd f1 89			call delay1s  
805e 3e 2d			ld a,'-'  
8060 cd b3 8a			call fill_display  
8063 cd d1 8a			call update_display  
8066 cd f1 89			call delay1s  
8069			  
8069			; boot splash screen  
8069			if display_cols == 20	  
8069			        ld a, display_row_1    
8069			else  
8069 3e 0a		        ld a, display_row_1 +10   
806b			endif  
806b 11 c0 95			ld de, prom_bootmsg  
806e cd c1 8a			call str_at_display  
8071 cd d1 8a			call update_display  
8074			  
8074			  
8074 cd f1 89			call delay1s  
8077 cd f1 89			call delay1s  
807a			if display_cols == 20	  
807a			            LD   A, display_row_3+2  
807a			else  
807a 3e 5c		            LD   A, display_row_3+12  
807c			endif  
807c 11 d5 95			ld de, prom_bootmsg1  
807f cd c1 8a			call str_at_display  
8082 cd d1 8a			call update_display  
8085 cd f1 89			call delay1s  
8088 cd f1 89			call delay1s  
808b			  
808b			;	ld a, display_row_4+3  
808b			;	ld de, bootmsg2  
808b			;	call str_at_display  
808b			;	call update_display  
808b			;	call delay1s  
808b			;	call delay1s  
808b			  
808b			; debug mark setup  
808b			  
808b 3e 5f		ld a, '_'  
808d 32 6b ee		ld (debug_mark),a  
8090 32 6c ee		ld (debug_mark+1),a  
8093 32 6d ee		ld (debug_mark+2),a  
8096 3e 00		ld a,0  
8098 32 6e ee		ld (debug_mark+3),a  
809b			  
809b c9					ret  
809c			  
809c			  
809c			;bootmsg2:	db "Firmware v0.1",0  
809c			  
809c			; a 4x20 lcd  
809c			; cout for display, low level positioning and writing functions (TODO) for hardware abstraction  
809c			  
809c			;if display_cols == 20  
809c			;	include "firmware_lcd_4x20.asm"  
809c			;endif  
809c			  
809c			;if display_cols == 40  
809c			;	include "firmware_lcd_4x40.asm"  
809c			;endif  
809c			  
809c			;  
809c			; TODO use the low spare two pins on port a of display pio to bit bang a serial out video display to an esp  
809c			; TODO abstract the bit bang video out interface for dual display  
809c			; TODO wire video out to tx pin on rc2014 bus  
809c			  
809c			; must supply cin, and cin_wait for low level hardware abstraction   
809c			; moved text_input entry points to here and leave the firmware hardware modules as abstraction layer  
809c			; test scancode  
809c			  
809c			;;;;;  
809c			;;;  
809c			; Moved out to mini and maxi versions  
809c			;  
809c			; include "firmware_key_4x4.asm"  
809c			; using existing 4 wire x 4 resistor array for input  
809c			;include "firmware_key_4x10.asm"  
809c			; need to mod the board for 5 rows due to resistor array  
809c			;include "firmware_key_5x10.asm"  
809c			  
809c			; storage hardware interface  
809c			  
809c			; use microchip serial eeprom for storage  
809c			  
809c			  
809c			if STORAGE_SE  
809c				include "firmware_spi.asm"  
809c				include "firmware_seeprom.asm"  
809c			else  
809c			   ; create some stubs for the labels  
809c c9			se_readbyte: ret  
809d c9			se_writebyte: ret  
809e c9			storage_init: ret  
809f			  
809f			endif  
809f			  
809f			; use cf card for storage - throwing timeout errors. Hardware or software?????  
809f			;include "firmware_cf.asm"  
809f			  
809f			; load up high level storage hardward abstractions  
809f			include "firmware_storage.asm"  
809f			 
809f			; persisent storage hardware abstraction layer  
809f			 
809f			 
809f			 
809f			; Block 0 on storage is a config state 
809f			 
809f			 
809f			 
809f			; TODO add read phy block and write phy block functions 
809f			; TODO add presence check (i.e. read write byte 0 of block 0 for eeprom) 
809f			 
809f			; Abstraction layer  
809f			 
809f			; Logocial block size is same size as physical size - using tape concept 
809f			 
809f			;STORE_BLOCK_PHY2LOG: equ (STORE_BLOCK_LOG/STORE_BLOCK_PHY)       ; How many physical blocks make up a logical block 
809f			;STORE_BLOCK_MAX: equ (STORE_BLOCK_PHY*STORE_DEVICE_MAXBLOCKS)/255    ; Max number of logical blocks on the device 
809f			 
809f			 
809f			 
809f			; Filesystem layout (Logical layout) 
809f			; 
809f			; Block 0 - Bank config  
809f			; 
809f			;      Byte - 0 file id counter 
809f			;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
809f			;      Byte - 3-20 zero terminated bank label 
809f			; 
809f			; Block 1 > File storage 
809f			; 
809f			;      Byte 0 file id    - block 0 file details 
809f			;      Byte 1 block id - block 0 is file  
809f			;            Byte 2-15 - File name 
809f			; 
809f			;       - to end of block data 
809f			; 
809f			 
809f			; Get ID for the file named in pointer held HL 
809f			; Returns ID in HL = 255 if no file found 
809f			 
809f			storage_getid: 
809f			 
809f 22 73 ea			ld (store_tmp1), hl 
80a2			 
80a2				if DEBUG_STORESE 
80a2					DMARK "SGI" 
80a2 f5				push af  
80a3 3a b7 80			ld a, (.dmark)  
80a6 32 6b ee			ld (debug_mark),a  
80a9 3a b8 80			ld a, (.dmark+1)  
80ac 32 6c ee			ld (debug_mark+1),a  
80af 3a b9 80			ld a, (.dmark+2)  
80b2 32 6d ee			ld (debug_mark+2),a  
80b5 18 03			jr .pastdmark  
80b7 ..			.dmark: db "SGI"  
80ba f1			.pastdmark: pop af  
80bb			endm  
# End of macro DMARK
80bb					CALLMONITOR 
80bb cd 6f ee			call debug_vector  
80be				endm  
# End of macro CALLMONITOR
80be				endif 
80be				; get block 0 and set counter for number of files to scan 
80be			 
80be cd 29 82			call storage_get_block_0 
80c1			 
80c1 3a 7a ea			ld a, (store_page) 
80c4 47				ld b, a 
80c5			 
80c5				; get extent 0 of each file id 
80c5			 
80c5				if DEBUG_STORESE 
80c5					DMARK "SGc" 
80c5 f5				push af  
80c6 3a da 80			ld a, (.dmark)  
80c9 32 6b ee			ld (debug_mark),a  
80cc 3a db 80			ld a, (.dmark+1)  
80cf 32 6c ee			ld (debug_mark+1),a  
80d2 3a dc 80			ld a, (.dmark+2)  
80d5 32 6d ee			ld (debug_mark+2),a  
80d8 18 03			jr .pastdmark  
80da ..			.dmark: db "SGc"  
80dd f1			.pastdmark: pop af  
80de			endm  
# End of macro DMARK
80de					CALLMONITOR 
80de cd 6f ee			call debug_vector  
80e1				endm  
# End of macro CALLMONITOR
80e1				endif 
80e1 60			.getloop:	ld h, b 
80e2 2e 00				ld l, 0 
80e4 c5					push bc 
80e5			 
80e5 11 7a ea				ld de, store_page 
80e8				if DEBUG_STORESE 
80e8					DMARK "SGr" 
80e8 f5				push af  
80e9 3a fd 80			ld a, (.dmark)  
80ec 32 6b ee			ld (debug_mark),a  
80ef 3a fe 80			ld a, (.dmark+1)  
80f2 32 6c ee			ld (debug_mark+1),a  
80f5 3a ff 80			ld a, (.dmark+2)  
80f8 32 6d ee			ld (debug_mark+2),a  
80fb 18 03			jr .pastdmark  
80fd ..			.dmark: db "SGr"  
8100 f1			.pastdmark: pop af  
8101			endm  
# End of macro DMARK
8101					CALLMONITOR 
8101 cd 6f ee			call debug_vector  
8104				endm  
# End of macro CALLMONITOR
8104				endif 
8104 cd d1 86				call storage_read 
8107 cd 04 8d				call ishlzero 
810a 28 2d				jr z, .gap 
810c					 
810c					; have a file name read. Is it one we want. 
810c			 
810c 2a 73 ea				ld hl, (store_tmp1) 
810f 11 7d ea				ld de, store_page+3   ; file name 
8112			 
8112				if DEBUG_STORESE 
8112					DMARK "SGc" 
8112 f5				push af  
8113 3a 27 81			ld a, (.dmark)  
8116 32 6b ee			ld (debug_mark),a  
8119 3a 28 81			ld a, (.dmark+1)  
811c 32 6c ee			ld (debug_mark+1),a  
811f 3a 29 81			ld a, (.dmark+2)  
8122 32 6d ee			ld (debug_mark+2),a  
8125 18 03			jr .pastdmark  
8127 ..			.dmark: db "SGc"  
812a f1			.pastdmark: pop af  
812b			endm  
# End of macro DMARK
812b					CALLMONITOR 
812b cd 6f ee			call debug_vector  
812e				endm  
# End of macro CALLMONITOR
812e				endif 
812e cd 79 90				call strcmp 
8131 20 06				jr nz, .gap   ; not this one 
8133			 
8133 c1				        pop bc 
8134			 
8134 26 00				ld h, 0 
8136 68					ld l, b 
8137 18 22				jr .getdone 
8139						 
8139			 
8139			 
8139			 
8139			.gap: 
8139				if DEBUG_STORESE 
8139					DMARK "SGg" 
8139 f5				push af  
813a 3a 4e 81			ld a, (.dmark)  
813d 32 6b ee			ld (debug_mark),a  
8140 3a 4f 81			ld a, (.dmark+1)  
8143 32 6c ee			ld (debug_mark+1),a  
8146 3a 50 81			ld a, (.dmark+2)  
8149 32 6d ee			ld (debug_mark+2),a  
814c 18 03			jr .pastdmark  
814e ..			.dmark: db "SGg"  
8151 f1			.pastdmark: pop af  
8152			endm  
# End of macro DMARK
8152					CALLMONITOR 
8152 cd 6f ee			call debug_vector  
8155				endm  
# End of macro CALLMONITOR
8155				endif 
8155			 
8155 c1					pop bc 
8156 10 89				djnz .getloop 
8158 21 ff 00				ld hl, 255 
815b			.getdone: 
815b			 
815b				if DEBUG_STORESE 
815b					DMARK "SGe" 
815b f5				push af  
815c 3a 70 81			ld a, (.dmark)  
815f 32 6b ee			ld (debug_mark),a  
8162 3a 71 81			ld a, (.dmark+1)  
8165 32 6c ee			ld (debug_mark+1),a  
8168 3a 72 81			ld a, (.dmark+2)  
816b 32 6d ee			ld (debug_mark+2),a  
816e 18 03			jr .pastdmark  
8170 ..			.dmark: db "SGe"  
8173 f1			.pastdmark: pop af  
8174			endm  
# End of macro DMARK
8174					CALLMONITOR 
8174 cd 6f ee			call debug_vector  
8177				endm  
# End of macro CALLMONITOR
8177				endif 
8177			 
8177 c9				ret 
8178			 
8178			 
8178			 
8178			 
8178			 
8178			 
8178			 
8178			 
8178			; Read Block 
8178			; ---------- 
8178			; 
8178			; With current bank 
8178			;  
8178			; Get block number to read 
8178			; Load physical blocks starting at start block into buffer 
8178			 
8178			; de points to buffer to use 
8178			; hl holds logical block number  
8178			 
8178			storage_read_block: 
8178			 
8178				; TODO bank selection 
8178			 
8178				; for each of the physical blocks read it into the buffer 
8178 06 40			ld b, STORE_BLOCK_PHY 
817a			 
817a				if DEBUG_STORESE 
817a d5					push de 
817b				endif 
817b				 
817b			.rl1:    
817b			 
817b				; read physical block at hl into de 
817b			        ; increment hl and de to next read position on exit 
817b			 
817b e5				push hl 
817c d5				push de	 
817d c5				push bc 
817e			;	if DEBUG_STORESE 
817e			;		push af 
817e			;		ld a, 'R' 
817e			;		ld (debug_mark),a 
817e			;		pop af 
817e			;		CALLMONITOR 
817e			;	endif 
817e cd 9c 80			call se_readbyte 
8181			;	if DEBUG_STORESE 
8181			;		ld a,(spi_portbyte) 
8181			;		ld l, a 
8181			;		push af 
8181			;		ld a, '1' 
8181			;		ld (debug_mark),a 
8181			;		pop af 
8181			;		CALLMONITOR 
8181			;	endif 
8181 c1				pop bc 
8182 d1				pop de 
8183 e1				pop hl 
8184 12				ld (de),a 
8185 23				inc hl 
8186 13				inc de 
8187			 
8187			;	if DEBUG_STORESE 
8187			;		push af 
8187			;		ld a, 'r' 
8187			;		ld (debug_mark),a 
8187			;		pop af 
8187			;		CALLMONITOR 
8187			;	endif 
8187			 
8187 10 f2			djnz .rl1 
8189			 
8189				if DEBUG_STORESE 
8189					DMARK "SRB" 
8189 f5				push af  
818a 3a 9e 81			ld a, (.dmark)  
818d 32 6b ee			ld (debug_mark),a  
8190 3a 9f 81			ld a, (.dmark+1)  
8193 32 6c ee			ld (debug_mark+1),a  
8196 3a a0 81			ld a, (.dmark+2)  
8199 32 6d ee			ld (debug_mark+2),a  
819c 18 03			jr .pastdmark  
819e ..			.dmark: db "SRB"  
81a1 f1			.pastdmark: pop af  
81a2			endm  
# End of macro DMARK
81a2 d1					pop de 
81a3			; 
81a3			;		push af 
81a3			;		ld a, 'R' 
81a3			;		ld (debug_mark),a 
81a3			;		pop af 
81a3					CALLMONITOR 
81a3 cd 6f ee			call debug_vector  
81a6				endm  
# End of macro CALLMONITOR
81a6				endif 
81a6 c9				ret	 
81a7				 
81a7			 
81a7			; File Size 
81a7			; --------- 
81a7			; 
81a7			;   hl file id 
81a7			; 
81a7			;  returns in hl the number of blocks 
81a7			 
81a7			storage_file_size: 
81a7 5d				ld e, l 
81a8 16 00			ld d, 0 
81aa 21 40 00			ld hl, STORE_BLOCK_PHY 
81ad					if DEBUG_FORTH_WORDS 
81ad						DMARK "SIZ" 
81ad f5				push af  
81ae 3a c2 81			ld a, (.dmark)  
81b1 32 6b ee			ld (debug_mark),a  
81b4 3a c3 81			ld a, (.dmark+1)  
81b7 32 6c ee			ld (debug_mark+1),a  
81ba 3a c4 81			ld a, (.dmark+2)  
81bd 32 6d ee			ld (debug_mark+2),a  
81c0 18 03			jr .pastdmark  
81c2 ..			.dmark: db "SIZ"  
81c5 f1			.pastdmark: pop af  
81c6			endm  
# End of macro DMARK
81c6						CALLMONITOR 
81c6 cd 6f ee			call debug_vector  
81c9				endm  
# End of macro CALLMONITOR
81c9					endif 
81c9 cd ab 84			call storage_findnextid 
81cc			 
81cc cd 04 8d			call ishlzero 
81cf			;	ld a, l 
81cf			;	add h 
81cf			;	cp 0 
81cf c8				ret z			; block not found so EOF 
81d0			 
81d0 11 7a ea			ld de, store_page 
81d3 cd 78 81			call storage_read_block 
81d6			 
81d6 3a 7c ea			ld a, (store_page+2)	 ; get extent count 
81d9 6f				ld l, a 
81da 26 00			ld h, 0 
81dc c9			 	ret 
81dd			 
81dd			 
81dd			; Write Block 
81dd			; ----------- 
81dd			; 
81dd			; With current bank 
81dd			;  
81dd			; Get block number to write 
81dd			; Write physical blocks starting at start block from buffer 
81dd			  
81dd			storage_write_block: 
81dd				; TODO bank selection 
81dd			 
81dd				; for each of the physical blocks read it into the buffer 
81dd 06 40			ld b, STORE_BLOCK_PHY 
81df			 
81df				if DEBUG_STORESE 
81df					DMARK "SWB" 
81df f5				push af  
81e0 3a f4 81			ld a, (.dmark)  
81e3 32 6b ee			ld (debug_mark),a  
81e6 3a f5 81			ld a, (.dmark+1)  
81e9 32 6c ee			ld (debug_mark+1),a  
81ec 3a f6 81			ld a, (.dmark+2)  
81ef 32 6d ee			ld (debug_mark+2),a  
81f2 18 03			jr .pastdmark  
81f4 ..			.dmark: db "SWB"  
81f7 f1			.pastdmark: pop af  
81f8			endm  
# End of macro DMARK
81f8			 
81f8					;push af 
81f8					;ld a, 'W' 
81f8					;ld (debug_mark),a 
81f8					;pop af 
81f8					CALLMONITOR 
81f8 cd 6f ee			call debug_vector  
81fb				endm  
# End of macro CALLMONITOR
81fb				endif 
81fb			 
81fb			; might not be working 
81fb			;	call se_writepage 
81fb			 
81fb			;	ret 
81fb			; 
81fb			 
81fb			 
81fb			 
81fb			.wl1:    
81fb			 
81fb				; read physical block at hl into de 
81fb			        ; increment hl and de to next read position on exit 
81fb			 
81fb e5				push hl 
81fc d5				push de	 
81fd c5				push bc 
81fe 1a				ld a,(de) 
81ff				;if DEBUG_STORESE 
81ff			;		push af 
81ff			;		ld a, 'W' 
81ff			;		ld (debug_mark),a 
81ff			;		pop af 
81ff			;		CALLMONITOR 
81ff			;	endif 
81ff cd 9d 80			call se_writebyte 
8202			;	call delay250ms 
8202 00				nop 
8203 00				nop 
8204 00				nop 
8205			;	if DEBUG_STORESE 
8205			;		push af 
8205			;		ld a, 'w' 
8205			;		ld (debug_mark),a 
8205			;		pop af 
8205			;		CALLMONITOR 
8205			;	endif 
8205 c1				pop bc 
8206 d1				pop de 
8207 e1				pop hl 
8208 23				inc hl 
8209 13				inc de 
820a			 
820a			 
820a 10 ef			djnz .wl1 
820c			 
820c				if DEBUG_STORESE 
820c					DMARK "SW2" 
820c f5				push af  
820d 3a 21 82			ld a, (.dmark)  
8210 32 6b ee			ld (debug_mark),a  
8213 3a 22 82			ld a, (.dmark+1)  
8216 32 6c ee			ld (debug_mark+1),a  
8219 3a 23 82			ld a, (.dmark+2)  
821c 32 6d ee			ld (debug_mark+2),a  
821f 18 03			jr .pastdmark  
8221 ..			.dmark: db "SW2"  
8224 f1			.pastdmark: pop af  
8225			endm  
# End of macro DMARK
8225			 
8225					;push af 
8225					;ld a, 'W' 
8225					;ld (debug_mark),a 
8225					;pop af 
8225					CALLMONITOR 
8225 cd 6f ee			call debug_vector  
8228				endm  
# End of macro CALLMONITOR
8228				endif 
8228 c9				ret	 
8229			 
8229			; Init bank 
8229			; --------- 
8229			; 
8229			; With current bank 
8229			; 
8229			; Setup block 0 config 
8229			;     Set 0 file id counter 
8229			;     Set formatted byte pattern 
8229			;     Zero out bank label 
8229			;      
8229			; For every logical block write 0-1 byte as null 
8229			 
8229			storage_get_block_0: 
8229			 
8229				; TODO check presence 
8229			 
8229				; get block 0 config 
8229			 
8229 21 00 00			ld hl, 0 
822c 11 7a ea			ld de, store_page 
822f cd 78 81			call storage_read_block 
8232			 
8232				if DEBUG_STORESE 
8232					DMARK "SB0" 
8232 f5				push af  
8233 3a 47 82			ld a, (.dmark)  
8236 32 6b ee			ld (debug_mark),a  
8239 3a 48 82			ld a, (.dmark+1)  
823c 32 6c ee			ld (debug_mark+1),a  
823f 3a 49 82			ld a, (.dmark+2)  
8242 32 6d ee			ld (debug_mark+2),a  
8245 18 03			jr .pastdmark  
8247 ..			.dmark: db "SB0"  
824a f1			.pastdmark: pop af  
824b			endm  
# End of macro DMARK
824b 11 7a ea				ld de, store_page 
824e			;		push af 
824e			;		ld a, 'i' 
824e			;		ld (debug_mark),a 
824e			;		pop af 
824e					CALLMONITOR 
824e cd 6f ee			call debug_vector  
8251				endm  
# End of macro CALLMONITOR
8251				endif 
8251			 
8251				; is this area formatted? 
8251			 
8251			;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
8251 2a 7b ea			ld hl, (store_page+1) 
8254 3e 80			ld a,0x80 
8256 bd				cp l 
8257 20 22			jr nz, .ininotformatted 
8259				; do a double check 
8259 3e 27			ld a, 0x27 
825b bc				cp h 
825c 20 1d			jr nz, .ininotformatted 
825e			 
825e				; formatted then 
825e			 
825e				if DEBUG_STORESE 
825e					DMARK "SB1" 
825e f5				push af  
825f 3a 73 82			ld a, (.dmark)  
8262 32 6b ee			ld (debug_mark),a  
8265 3a 74 82			ld a, (.dmark+1)  
8268 32 6c ee			ld (debug_mark+1),a  
826b 3a 75 82			ld a, (.dmark+2)  
826e 32 6d ee			ld (debug_mark+2),a  
8271 18 03			jr .pastdmark  
8273 ..			.dmark: db "SB1"  
8276 f1			.pastdmark: pop af  
8277			endm  
# End of macro DMARK
8277					;push af 
8277					;ld a, 'I' 
8277					;ld (debug_mark),a 
8277					;pop af 
8277					CALLMONITOR 
8277 cd 6f ee			call debug_vector  
827a				endm  
# End of macro CALLMONITOR
827a				endif 
827a c9				ret 
827b			 
827b			.ininotformatted: 
827b				; bank not formatted so poke various bits to make sure 
827b			 
827b				if DEBUG_STORESE 
827b					DMARK "SB2" 
827b f5				push af  
827c 3a 90 82			ld a, (.dmark)  
827f 32 6b ee			ld (debug_mark),a  
8282 3a 91 82			ld a, (.dmark+1)  
8285 32 6c ee			ld (debug_mark+1),a  
8288 3a 92 82			ld a, (.dmark+2)  
828b 32 6d ee			ld (debug_mark+2),a  
828e 18 03			jr .pastdmark  
8290 ..			.dmark: db "SB2"  
8293 f1			.pastdmark: pop af  
8294			endm  
# End of macro DMARK
8294					;push af 
8294					;ld a, 'f' 
8294					;ld (debug_mark),a 
8294					;pop af 
8294					CALLMONITOR 
8294 cd 6f ee			call debug_vector  
8297				endm  
# End of macro CALLMONITOR
8297				endif 
8297			 
8297 cd b4 89			call storage_clear_page 
829a			 
829a 21 7a ea			ld hl, store_page 
829d 3e 00			ld a, 0 
829f				 
829f 77				ld (hl),a   ; reset file counter 
82a0			 
82a0 21 80 27			ld hl, 0x2780     ;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
82a3 22 7b ea		 	ld (store_page+1), hl	 
82a6			 
82a6				; set default label 
82a6			 
82a6 21 42 83			ld hl, .defaultbanklabl 
82a9 11 7d ea		 	ld de, store_page+3 
82ac 01 0f 00			ld bc, 15 
82af ed b0			ldir 
82b1			 
82b1				; Append the current bank id 
82b1 21 86 ea			ld hl, store_page+3+9 
82b4 3a 5f ea			ld a, (spi_device_id) 
82b7 77				ld (hl), a 
82b8			 
82b8				; save default page 0 
82b8			 
82b8 21 00 00			ld hl, 0 
82bb 11 7a ea			ld de, store_page 
82be				if DEBUG_STORESE 
82be					DMARK "SB3" 
82be f5				push af  
82bf 3a d3 82			ld a, (.dmark)  
82c2 32 6b ee			ld (debug_mark),a  
82c5 3a d4 82			ld a, (.dmark+1)  
82c8 32 6c ee			ld (debug_mark+1),a  
82cb 3a d5 82			ld a, (.dmark+2)  
82ce 32 6d ee			ld (debug_mark+2),a  
82d1 18 03			jr .pastdmark  
82d3 ..			.dmark: db "SB3"  
82d6 f1			.pastdmark: pop af  
82d7			endm  
# End of macro DMARK
82d7			;		push af 
82d7			;		ld a, 'F' 
82d7			;		ld (debug_mark),a 
82d7			;		pop af 
82d7					CALLMONITOR 
82d7 cd 6f ee			call debug_vector  
82da				endm  
# End of macro CALLMONITOR
82da				endif 
82da cd dd 81			call storage_write_block 
82dd				if DEBUG_STORESE 
82dd					DMARK "SB4" 
82dd f5				push af  
82de 3a f2 82			ld a, (.dmark)  
82e1 32 6b ee			ld (debug_mark),a  
82e4 3a f3 82			ld a, (.dmark+1)  
82e7 32 6c ee			ld (debug_mark+1),a  
82ea 3a f4 82			ld a, (.dmark+2)  
82ed 32 6d ee			ld (debug_mark+2),a  
82f0 18 03			jr .pastdmark  
82f2 ..			.dmark: db "SB4"  
82f5 f1			.pastdmark: pop af  
82f6			endm  
# End of macro DMARK
82f6			;		push af 
82f6			;		ld a, '>' 
82f6			;		ld (debug_mark),a 
82f6			;		pop af 
82f6					CALLMONITOR 
82f6 cd 6f ee			call debug_vector  
82f9				endm  
# End of macro CALLMONITOR
82f9				endif 
82f9			 
82f9 00				nop 
82fa 00				nop 
82fb 00				nop 
82fc			 
82fc				; now set 0 in every page to mark as a free block 
82fc			 
82fc 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
82fe 21 40 00			ld hl, STORE_BLOCK_PHY 
8301			 
8301 3e 00		.setmark1:   	ld a,0 
8303 e5					push hl 
8304 c5					push bc 
8305 cd 9d 80				call se_writebyte 
8308 3e 0a			ld a, 10 
830a cd d6 89			call aDelayInMS 
830d 23				inc hl 
830e cd 9d 80				call se_writebyte 
8311 3e 0a			ld a, 10 
8313 cd d6 89			call aDelayInMS 
8316 2b				dec hl 
8317 c1					pop bc 
8318 e1					pop hl 
8319 3e 40				ld a, STORE_BLOCK_PHY 
831b cd db 8c				call addatohl 
831e 10 e1				djnz .setmark1 
8320			 
8320 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
8322 3e 00		.setmark2:   	ld a,0 
8324 e5					push hl 
8325 c5					push bc 
8326 cd 9d 80				call se_writebyte 
8329 3e 0a			ld a, 10 
832b cd d6 89			call aDelayInMS 
832e 23				inc hl 
832f cd 9d 80				call se_writebyte 
8332 3e 0a			ld a, 10 
8334 cd d6 89			call aDelayInMS 
8337 2b				dec hl 
8338 c1					pop bc 
8339 e1					pop hl 
833a 3e 40				ld a, STORE_BLOCK_PHY 
833c cd db 8c				call addatohl 
833f 10 e1				djnz .setmark2 
8341			 
8341					 
8341			 
8341			 
8341 c9				ret 
8342			 
8342			 
8342			 
8342			 
8342 .. 00		.defaultbanklabl:   db "BankLabel_",0 
834d			 
834d			 
834d			 
834d			; Label Bank 
834d			; ---------- 
834d			; 
834d			; With current bank 
834d			; Read block 0 
834d			; Set label 
834d			; Write block 0 
834d			 
834d			; label str pointer in hl 
834d			 
834d			storage_label:     
834d			 
834d				if DEBUG_STORESE 
834d					DMARK "LBL" 
834d f5				push af  
834e 3a 62 83			ld a, (.dmark)  
8351 32 6b ee			ld (debug_mark),a  
8354 3a 63 83			ld a, (.dmark+1)  
8357 32 6c ee			ld (debug_mark+1),a  
835a 3a 64 83			ld a, (.dmark+2)  
835d 32 6d ee			ld (debug_mark+2),a  
8360 18 03			jr .pastdmark  
8362 ..			.dmark: db "LBL"  
8365 f1			.pastdmark: pop af  
8366			endm  
# End of macro DMARK
8366					CALLMONITOR 
8366 cd 6f ee			call debug_vector  
8369				endm  
# End of macro CALLMONITOR
8369				endif 
8369			 
8369 e5				push hl 
836a			 
836a cd 29 82			call storage_get_block_0 
836d			 
836d				; set default label 
836d			 
836d e1				pop hl 
836e			 
836e 11 7d ea		 	ld de, store_page+3 
8371 01 0f 00			ld bc, 15 
8374				if DEBUG_STORESE 
8374					DMARK "LB3" 
8374 f5				push af  
8375 3a 89 83			ld a, (.dmark)  
8378 32 6b ee			ld (debug_mark),a  
837b 3a 8a 83			ld a, (.dmark+1)  
837e 32 6c ee			ld (debug_mark+1),a  
8381 3a 8b 83			ld a, (.dmark+2)  
8384 32 6d ee			ld (debug_mark+2),a  
8387 18 03			jr .pastdmark  
8389 ..			.dmark: db "LB3"  
838c f1			.pastdmark: pop af  
838d			endm  
# End of macro DMARK
838d					CALLMONITOR 
838d cd 6f ee			call debug_vector  
8390				endm  
# End of macro CALLMONITOR
8390				endif 
8390 ed b0			ldir 
8392				; save default page 0 
8392			 
8392 21 00 00			ld hl, 0 
8395 11 7a ea			ld de, store_page 
8398				if DEBUG_STORESE 
8398					DMARK "LBW" 
8398 f5				push af  
8399 3a ad 83			ld a, (.dmark)  
839c 32 6b ee			ld (debug_mark),a  
839f 3a ae 83			ld a, (.dmark+1)  
83a2 32 6c ee			ld (debug_mark+1),a  
83a5 3a af 83			ld a, (.dmark+2)  
83a8 32 6d ee			ld (debug_mark+2),a  
83ab 18 03			jr .pastdmark  
83ad ..			.dmark: db "LBW"  
83b0 f1			.pastdmark: pop af  
83b1			endm  
# End of macro DMARK
83b1					CALLMONITOR 
83b1 cd 6f ee			call debug_vector  
83b4				endm  
# End of macro CALLMONITOR
83b4				endif 
83b4 cd dd 81			call storage_write_block 
83b7			 
83b7 c9				ret 
83b8			 
83b8			 
83b8			 
83b8			; Read Block 0 - Config 
83b8			; --------------------- 
83b8			; 
83b8			; With current bank 
83b8			; Call presence test 
83b8			;    If not present format/init bank  
83b8			; Read block 0  
83b8			;  
83b8			 
83b8			 
83b8			; Dir 
83b8			; --- 
83b8			; 
83b8			; With current bank 
83b8			; Load Block 0 Config 
83b8			; Get max file id number 
83b8			; For each logical block 
83b8			;    Read block read byte 2 
83b8			;      if first block of file 
83b8			;         Display file name 
83b8			;         Display type flags for file 
83b8			;        
83b8			 
83b8			; moving to words as this requires stack control 
83b8			 
83b8			 
83b8			; Delete File 
83b8			; ----------- 
83b8			; 
83b8			; With current bank 
83b8			; 
83b8			; Load Block 0 Config 
83b8			; Get max file id number 
83b8			; For each logical block 
83b8			;    Read block file id 
83b8			;      If first block of file and dont have file id 
83b8			;         if file to delete 
83b8			;         Save file id 
83b8			;         Null file id 
83b8			;         Write this block back 
83b8			;      If file id is one saved 
83b8			;         Null file id 
83b8			;         Write this block back 
83b8			 
83b8			 
83b8			.se_done: 
83b8 e1				pop hl 
83b9 c9				ret 
83ba			 
83ba			storage_erase: 
83ba			 
83ba				; hl contains the file id 
83ba			 
83ba 5d				ld e, l 
83bb 16 00			ld d, 0 
83bd 21 40 00			ld hl, STORE_BLOCK_PHY 
83c0					if DEBUG_FORTH_WORDS 
83c0						DMARK "ERA" 
83c0 f5				push af  
83c1 3a d5 83			ld a, (.dmark)  
83c4 32 6b ee			ld (debug_mark),a  
83c7 3a d6 83			ld a, (.dmark+1)  
83ca 32 6c ee			ld (debug_mark+1),a  
83cd 3a d7 83			ld a, (.dmark+2)  
83d0 32 6d ee			ld (debug_mark+2),a  
83d3 18 03			jr .pastdmark  
83d5 ..			.dmark: db "ERA"  
83d8 f1			.pastdmark: pop af  
83d9			endm  
# End of macro DMARK
83d9						CALLMONITOR 
83d9 cd 6f ee			call debug_vector  
83dc				endm  
# End of macro CALLMONITOR
83dc					endif 
83dc cd ab 84			call storage_findnextid 
83df cd 04 8d			call ishlzero 
83e2 c8				ret z 
83e3			 
83e3 e5				push hl 
83e4			 
83e4				; TODO check file not found 
83e4			 
83e4 11 7a ea			ld de, store_page 
83e7 cd 78 81			call storage_read_block 
83ea			 
83ea cd 04 8d			call ishlzero 
83ed ca b8 83			jp z,.se_done 
83f0			 
83f0					if DEBUG_FORTH_WORDS 
83f0						DMARK "ER1" 
83f0 f5				push af  
83f1 3a 05 84			ld a, (.dmark)  
83f4 32 6b ee			ld (debug_mark),a  
83f7 3a 06 84			ld a, (.dmark+1)  
83fa 32 6c ee			ld (debug_mark+1),a  
83fd 3a 07 84			ld a, (.dmark+2)  
8400 32 6d ee			ld (debug_mark+2),a  
8403 18 03			jr .pastdmark  
8405 ..			.dmark: db "ER1"  
8408 f1			.pastdmark: pop af  
8409			endm  
# End of macro DMARK
8409						CALLMONITOR 
8409 cd 6f ee			call debug_vector  
840c				endm  
# End of macro CALLMONITOR
840c					endif 
840c 3a 7a ea			ld a, (store_page)	; get file id 
840f 32 6e ea			ld (store_tmpid), a 
8412			 
8412 3a 7c ea			ld a, (store_page+2)    ; get count of extends 
8415 32 6d ea			ld (store_tmpext), a 
8418			 
8418				; wipe file header 
8418			 
8418 e1				pop hl 
8419 3e 00			ld a, 0 
841b 32 7a ea			ld (store_page), a 
841e 32 7b ea			ld (store_page+1),a 
8421 11 7a ea			ld de, store_page 
8424					if DEBUG_FORTH_WORDS 
8424						DMARK "ER2" 
8424 f5				push af  
8425 3a 39 84			ld a, (.dmark)  
8428 32 6b ee			ld (debug_mark),a  
842b 3a 3a 84			ld a, (.dmark+1)  
842e 32 6c ee			ld (debug_mark+1),a  
8431 3a 3b 84			ld a, (.dmark+2)  
8434 32 6d ee			ld (debug_mark+2),a  
8437 18 03			jr .pastdmark  
8439 ..			.dmark: db "ER2"  
843c f1			.pastdmark: pop af  
843d			endm  
# End of macro DMARK
843d						CALLMONITOR 
843d cd 6f ee			call debug_vector  
8440				endm  
# End of macro CALLMONITOR
8440					endif 
8440 cd dd 81			call storage_write_block 
8443			 
8443			 
8443				; wipe file extents 
8443			 
8443 3a 6d ea			ld a, (store_tmpext) 
8446 47				ld b, a 
8447			 
8447			.eraext:	  
8447 c5				push bc 
8448			 
8448 21 40 00			ld hl, STORE_BLOCK_PHY 
844b 3a 6e ea			ld a,(store_tmpid) 
844e 5f				ld e, a 
844f 50				ld d, b	 
8450					if DEBUG_FORTH_WORDS 
8450						DMARK "ER3" 
8450 f5				push af  
8451 3a 65 84			ld a, (.dmark)  
8454 32 6b ee			ld (debug_mark),a  
8457 3a 66 84			ld a, (.dmark+1)  
845a 32 6c ee			ld (debug_mark+1),a  
845d 3a 67 84			ld a, (.dmark+2)  
8460 32 6d ee			ld (debug_mark+2),a  
8463 18 03			jr .pastdmark  
8465 ..			.dmark: db "ER3"  
8468 f1			.pastdmark: pop af  
8469			endm  
# End of macro DMARK
8469						CALLMONITOR 
8469 cd 6f ee			call debug_vector  
846c				endm  
# End of macro CALLMONITOR
846c					endif 
846c cd ab 84			call storage_findnextid 
846f cd 04 8d			call ishlzero 
8472 ca b8 83			jp z,.se_done 
8475			 
8475 e5				push hl 
8476 11 7a ea			ld de, store_page 
8479 cd 78 81			call storage_read_block 
847c			 
847c				; free block	 
847c			 
847c 3e 00			ld a, 0 
847e 32 7a ea			ld (store_page), a 
8481 32 7b ea			ld (store_page+1),a 
8484 11 7a ea			ld de, store_page 
8487 e1				pop hl 
8488					if DEBUG_FORTH_WORDS 
8488						DMARK "ER4" 
8488 f5				push af  
8489 3a 9d 84			ld a, (.dmark)  
848c 32 6b ee			ld (debug_mark),a  
848f 3a 9e 84			ld a, (.dmark+1)  
8492 32 6c ee			ld (debug_mark+1),a  
8495 3a 9f 84			ld a, (.dmark+2)  
8498 32 6d ee			ld (debug_mark+2),a  
849b 18 03			jr .pastdmark  
849d ..			.dmark: db "ER4"  
84a0 f1			.pastdmark: pop af  
84a1			endm  
# End of macro DMARK
84a1						CALLMONITOR 
84a1 cd 6f ee			call debug_vector  
84a4				endm  
# End of macro CALLMONITOR
84a4					endif 
84a4 cd dd 81			call storage_write_block 
84a7			 
84a7 c1				pop bc 
84a8 10 9d			djnz .eraext 
84aa			 
84aa c9				ret 
84ab			 
84ab			 
84ab			; Find Free Block 
84ab			; --------------- 
84ab			; 
84ab			; With current bank 
84ab			;  
84ab			; From given starting logical block 
84ab			;    Read block  
84ab			;    If no file id 
84ab			;         Return block id 
84ab			 
84ab			 
84ab			; hl starting page number 
84ab			; hl contains free page number or zero if no pages free 
84ab			; e contains the file id to locate 
84ab			; d contains the block number 
84ab			 
84ab			; TODO change to find file id and use zero for free block 
84ab			 
84ab			storage_findnextid: 
84ab			 
84ab				; now locate first 0 page to mark as a free block 
84ab			 
84ab 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
84ad			;	ld hl, STORE_BLOCK_PHY 
84ad			 
84ad					if DEBUG_FORTH_WORDS 
84ad					DMARK "FNI" 
84ad f5				push af  
84ae 3a c2 84			ld a, (.dmark)  
84b1 32 6b ee			ld (debug_mark),a  
84b4 3a c3 84			ld a, (.dmark+1)  
84b7 32 6c ee			ld (debug_mark+1),a  
84ba 3a c4 84			ld a, (.dmark+2)  
84bd 32 6d ee			ld (debug_mark+2),a  
84c0 18 03			jr .pastdmark  
84c2 ..			.dmark: db "FNI"  
84c5 f1			.pastdmark: pop af  
84c6			endm  
# End of macro DMARK
84c6						CALLMONITOR 
84c6 cd 6f ee			call debug_vector  
84c9				endm  
# End of macro CALLMONITOR
84c9					endif 
84c9			.ff1:   	 
84c9 e5					push hl 
84ca c5					push bc 
84cb d5					push de 
84cc cd 9c 80				call se_readbyte 
84cf 5f					ld e,a 
84d0 23					inc hl 
84d1 cd 9c 80				call se_readbyte 
84d4 57					ld d, a 
84d5 e1					pop hl 
84d6 e5					push hl 
84d7 cd f9 8c				call cmp16 
84da 28 49				jr z, .fffound 
84dc			 
84dc d1					pop de 
84dd c1					pop bc 
84de e1					pop hl 
84df			 
84df					; is found? 
84df					;cp e 
84df					;ret z 
84df			 
84df 3e 40				ld a, STORE_BLOCK_PHY 
84e1 cd db 8c				call addatohl 
84e4 10 e3				djnz .ff1 
84e6			 
84e6 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
84e8			.ff2:   	 
84e8			 
84e8 e5					push hl 
84e9 c5					push bc 
84ea d5					push de 
84eb cd 9c 80				call se_readbyte 
84ee 5f					ld e,a 
84ef 23					inc hl 
84f0 cd 9c 80				call se_readbyte 
84f3 57					ld d, a 
84f4			 
84f4 e1					pop hl 
84f5 e5					push hl 
84f6 cd f9 8c				call cmp16 
84f9 28 2a				jr z, .fffound 
84fb			 
84fb d1					pop de 
84fc c1					pop bc 
84fd e1					pop hl 
84fe					; is found? 
84fe					;cp e 
84fe					;ret z 
84fe			 
84fe 3e 40				ld a, STORE_BLOCK_PHY 
8500 cd db 8c				call addatohl 
8503 10 e3				djnz .ff2 
8505			 
8505			 
8505					if DEBUG_FORTH_WORDS 
8505					DMARK "FN-" 
8505 f5				push af  
8506 3a 1a 85			ld a, (.dmark)  
8509 32 6b ee			ld (debug_mark),a  
850c 3a 1b 85			ld a, (.dmark+1)  
850f 32 6c ee			ld (debug_mark+1),a  
8512 3a 1c 85			ld a, (.dmark+2)  
8515 32 6d ee			ld (debug_mark+2),a  
8518 18 03			jr .pastdmark  
851a ..			.dmark: db "FN-"  
851d f1			.pastdmark: pop af  
851e			endm  
# End of macro DMARK
851e					;	push af 
851e					;	ld a, 'n' 
851e					;	ld (debug_mark),a 
851e					;	pop af 
851e						CALLMONITOR 
851e cd 6f ee			call debug_vector  
8521				endm  
# End of macro CALLMONITOR
8521					endif 
8521				; no free marks! 
8521 21 00 00				ld hl, 0 
8524 c9				ret 
8525			.fffound: 
8525				 
8525			 
8525 d1					pop de 
8526 c1					pop bc 
8527 e1					pop hl 
8528					if DEBUG_FORTH_WORDS 
8528					DMARK "FNF" 
8528 f5				push af  
8529 3a 3d 85			ld a, (.dmark)  
852c 32 6b ee			ld (debug_mark),a  
852f 3a 3e 85			ld a, (.dmark+1)  
8532 32 6c ee			ld (debug_mark+1),a  
8535 3a 3f 85			ld a, (.dmark+2)  
8538 32 6d ee			ld (debug_mark+2),a  
853b 18 03			jr .pastdmark  
853d ..			.dmark: db "FNF"  
8540 f1			.pastdmark: pop af  
8541			endm  
# End of macro DMARK
8541					;	push af 
8541					;	ld a, 'n' 
8541					;	ld (debug_mark),a 
8541					;	pop af 
8541						CALLMONITOR 
8541 cd 6f ee			call debug_vector  
8544				endm  
# End of macro CALLMONITOR
8544					endif 
8544 c9				ret 
8545			 
8545			 
8545			 
8545			; Free Space 
8545			; ---------- 
8545			; 
8545			; With current bank 
8545			; 
8545			; Set block count to zero 
8545			; Starting with first logical block 
8545			;      Find free block  
8545			;      If block id given, increment block count 
8545			; 
8545			;  
8545			 
8545			 
8545			; hl contains count of free blocks 
8545			 
8545			storage_freeblocks: 
8545			 
8545				; now locate first 0 page to mark as a free block 
8545			 
8545 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
8547 21 40 00			ld hl, STORE_BLOCK_PHY 
854a 11 00 00			ld de, 0 
854d			 
854d			.fb1:   	 
854d e5					push hl 
854e c5					push bc 
854f d5					push de 
8550 cd 9c 80				call se_readbyte 
8553 d1					pop de 
8554 c1					pop bc 
8555 e1					pop hl 
8556			 
8556					; is free? 
8556 fe 00				cp 0 
8558 20 01				jr nz, .ff1cont 
855a 13					inc de 
855b			 
855b			.ff1cont: 
855b			 
855b			 
855b 3e 40				ld a, STORE_BLOCK_PHY 
855d cd db 8c				call addatohl 
8560 10 eb				djnz .fb1 
8562			 
8562 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
8564			.fb2:   	 
8564 e5					push hl 
8565 c5					push bc 
8566 d5					push de 
8567 cd 9c 80				call se_readbyte 
856a d1					pop de 
856b c1					pop bc 
856c e1					pop hl 
856d			 
856d					; is free? 
856d fe 00				cp 0 
856f 20 01				jr nz, .ff2cont 
8571 13					inc de 
8572			 
8572			.ff2cont: 
8572			 
8572 3e 40				ld a, STORE_BLOCK_PHY 
8574 cd db 8c				call addatohl 
8577 10 eb				djnz .fb2 
8579			 
8579 eb				ex de, hl 
857a c9				ret 
857b			 
857b			; Get File ID 
857b			; ----------- 
857b			; 
857b			; With current bank 
857b			;  
857b			; Load Block 0 Config 
857b			; Get max file id number 
857b			; For each logical block 
857b			;    Read block file id 
857b			;      If first block of file and dont have file id 
857b			;         if file get id and exit 
857b			 
857b			 
857b			 
857b			 
857b			; Create File 
857b			; ----------- 
857b			; 
857b			; With current bank  
857b			; Load Block 0 Config 
857b			; Get max file id number 
857b			; Increment file id number 
857b			; Save Config 
857b			; Find free block 
857b			; Set buffer with file name and file id 
857b			; Write buffer to free block  
857b			 
857b			 
857b			; hl point to file name 
857b			; hl returns file id 
857b			 
857b			; file format: 
857b			; byte 0 - file id 
857b			; byte 1 - extent number 
857b			; byte 2-> data 
857b			 
857b			; format for extent number 0: 
857b			; 
857b			; byte 0 - file id 
857b			; byte 1 - extent 0 
857b			; byte 2 - extent count 
857b			; byte 3 -> file name and meta data 
857b			 
857b			 
857b			storage_create: 
857b				if DEBUG_STORESE 
857b					DMARK "SCR" 
857b f5				push af  
857c 3a 90 85			ld a, (.dmark)  
857f 32 6b ee			ld (debug_mark),a  
8582 3a 91 85			ld a, (.dmark+1)  
8585 32 6c ee			ld (debug_mark+1),a  
8588 3a 92 85			ld a, (.dmark+2)  
858b 32 6d ee			ld (debug_mark+2),a  
858e 18 03			jr .pastdmark  
8590 ..			.dmark: db "SCR"  
8593 f1			.pastdmark: pop af  
8594			endm  
# End of macro DMARK
8594					CALLMONITOR 
8594 cd 6f ee			call debug_vector  
8597				endm  
# End of macro CALLMONITOR
8597				endif 
8597			 
8597 e5				push hl		; save file name pointer 
8598			 
8598 cd 29 82			call storage_get_block_0 
859b			 
859b 3a 7a ea			ld a,(store_page)	; get current file id 
859e 3c				inc a 
859f 32 7a ea			ld (store_page),a 
85a2				 
85a2 32 6e ea			ld (store_tmpid),a			; save id 
85a5			 
85a5 21 00 00			ld hl, 0 
85a8 11 7a ea			ld de, store_page 
85ab				if DEBUG_STORESE 
85ab					DMARK "SCw" 
85ab f5				push af  
85ac 3a c0 85			ld a, (.dmark)  
85af 32 6b ee			ld (debug_mark),a  
85b2 3a c1 85			ld a, (.dmark+1)  
85b5 32 6c ee			ld (debug_mark+1),a  
85b8 3a c2 85			ld a, (.dmark+2)  
85bb 32 6d ee			ld (debug_mark+2),a  
85be 18 03			jr .pastdmark  
85c0 ..			.dmark: db "SCw"  
85c3 f1			.pastdmark: pop af  
85c4			endm  
# End of macro DMARK
85c4					CALLMONITOR 
85c4 cd 6f ee			call debug_vector  
85c7				endm  
# End of macro CALLMONITOR
85c7				endif 
85c7 cd dd 81			call storage_write_block	 ; save update 
85ca			 
85ca				if DEBUG_STORESE 
85ca 11 7a ea				ld de, store_page 
85cd					DMARK "SCC" 
85cd f5				push af  
85ce 3a e2 85			ld a, (.dmark)  
85d1 32 6b ee			ld (debug_mark),a  
85d4 3a e3 85			ld a, (.dmark+1)  
85d7 32 6c ee			ld (debug_mark+1),a  
85da 3a e4 85			ld a, (.dmark+2)  
85dd 32 6d ee			ld (debug_mark+2),a  
85e0 18 03			jr .pastdmark  
85e2 ..			.dmark: db "SCC"  
85e5 f1			.pastdmark: pop af  
85e6			endm  
# End of macro DMARK
85e6					CALLMONITOR 
85e6 cd 6f ee			call debug_vector  
85e9				endm  
# End of macro CALLMONITOR
85e9				endif 
85e9				;  
85e9				 
85e9 21 40 00			ld hl, STORE_BLOCK_PHY 
85ec 11 00 00			ld de, 0 
85ef cd ab 84			call storage_findnextid 
85f2			 
85f2 22 65 ea			ld (store_tmppageid), hl    ; save page to use  
85f5			 
85f5				; TODO detect 0 = no spare blocks 
85f5			 
85f5				; hl now contains the free page to use for the file header page 
85f5			 
85f5				if DEBUG_STORESE 
85f5				DMARK "SCF" 
85f5 f5				push af  
85f6 3a 0a 86			ld a, (.dmark)  
85f9 32 6b ee			ld (debug_mark),a  
85fc 3a 0b 86			ld a, (.dmark+1)  
85ff 32 6c ee			ld (debug_mark+1),a  
8602 3a 0c 86			ld a, (.dmark+2)  
8605 32 6d ee			ld (debug_mark+2),a  
8608 18 03			jr .pastdmark  
860a ..			.dmark: db "SCF"  
860d f1			.pastdmark: pop af  
860e			endm  
# End of macro DMARK
860e					CALLMONITOR 
860e cd 6f ee			call debug_vector  
8611				endm  
# End of macro CALLMONITOR
8611				endif 
8611			 
8611 22 65 ea			ld (store_tmppageid), hl 
8614				 
8614 3a 6e ea			ld a,(store_tmpid)    ; get file id 
8617			;	ld a, (store_filecache)			; save to cache 
8617			 
8617 32 7a ea			ld (store_page),a    ; set page id 
861a 3e 00			ld a, 0			 ; extent 0 is file header 
861c 32 7b ea			ld (store_page+1), a   ; set file extent 
861f			 
861f 32 7c ea			ld (store_page+2), a   ; extent count for the file 
8622			 
8622			;	inc hl 		; init block 0 of file 
8622			;	inc hl   		; skip file and extent id 
8622			 ;       ld a, 0 
8622			;	ld (hl),a 
8622			;	ld a, (store_filecache+1)  	; save to cache 
8622			 
8622			;	inc hl    ; file name 
8622				 
8622				 
8622 11 7d ea			ld de, store_page+3    ; get buffer for term string to use as file name 
8625				if DEBUG_STORESE 
8625					DMARK "SCc" 
8625 f5				push af  
8626 3a 3a 86			ld a, (.dmark)  
8629 32 6b ee			ld (debug_mark),a  
862c 3a 3b 86			ld a, (.dmark+1)  
862f 32 6c ee			ld (debug_mark+1),a  
8632 3a 3c 86			ld a, (.dmark+2)  
8635 32 6d ee			ld (debug_mark+2),a  
8638 18 03			jr .pastdmark  
863a ..			.dmark: db "SCc"  
863d f1			.pastdmark: pop af  
863e			endm  
# End of macro DMARK
863e					CALLMONITOR 
863e cd 6f ee			call debug_vector  
8641				endm  
# End of macro CALLMONITOR
8641				endif 
8641 e1				pop hl    ; get zero term string 
8642 e5				push hl 
8643 3e 00			ld a, 0 
8645 cd 4c 90			call strlent 
8648 23				inc hl   ; cover zero term 
8649 06 00			ld b,0 
864b 4d				ld c,l 
864c e1				pop hl 
864d				;ex de, hl 
864d				if DEBUG_STORESE 
864d					DMARK "SCa" 
864d f5				push af  
864e 3a 62 86			ld a, (.dmark)  
8651 32 6b ee			ld (debug_mark),a  
8654 3a 63 86			ld a, (.dmark+1)  
8657 32 6c ee			ld (debug_mark+1),a  
865a 3a 64 86			ld a, (.dmark+2)  
865d 32 6d ee			ld (debug_mark+2),a  
8660 18 03			jr .pastdmark  
8662 ..			.dmark: db "SCa"  
8665 f1			.pastdmark: pop af  
8666			endm  
# End of macro DMARK
8666					;push af 
8666					;ld a, 'a' 
8666					;ld (debug_mark),a 
8666					;pop af 
8666					CALLMONITOR 
8666 cd 6f ee			call debug_vector  
8669				endm  
# End of macro CALLMONITOR
8669				endif 
8669 ed b0			ldir    ; copy zero term string 
866b				if DEBUG_STORESE 
866b					DMARK "SCA" 
866b f5				push af  
866c 3a 80 86			ld a, (.dmark)  
866f 32 6b ee			ld (debug_mark),a  
8672 3a 81 86			ld a, (.dmark+1)  
8675 32 6c ee			ld (debug_mark+1),a  
8678 3a 82 86			ld a, (.dmark+2)  
867b 32 6d ee			ld (debug_mark+2),a  
867e 18 03			jr .pastdmark  
8680 ..			.dmark: db "SCA"  
8683 f1			.pastdmark: pop af  
8684			endm  
# End of macro DMARK
8684					CALLMONITOR 
8684 cd 6f ee			call debug_vector  
8687				endm  
# End of macro CALLMONITOR
8687				endif 
8687			 
8687				; write file header page 
8687			 
8687 2a 65 ea			ld hl,(store_tmppageid) 
868a 11 7a ea			ld de, store_page 
868d				if DEBUG_STORESE 
868d					DMARK "SCb" 
868d f5				push af  
868e 3a a2 86			ld a, (.dmark)  
8691 32 6b ee			ld (debug_mark),a  
8694 3a a3 86			ld a, (.dmark+1)  
8697 32 6c ee			ld (debug_mark+1),a  
869a 3a a4 86			ld a, (.dmark+2)  
869d 32 6d ee			ld (debug_mark+2),a  
86a0 18 03			jr .pastdmark  
86a2 ..			.dmark: db "SCb"  
86a5 f1			.pastdmark: pop af  
86a6			endm  
# End of macro DMARK
86a6					;push af 
86a6					;ld a, 'b' 
86a6					;ld (debug_mark),a 
86a6					;pop af 
86a6					CALLMONITOR 
86a6 cd 6f ee			call debug_vector  
86a9				endm  
# End of macro CALLMONITOR
86a9				endif 
86a9 cd dd 81			call storage_write_block 
86ac			 
86ac 3a 6e ea			ld a, (store_tmpid) 
86af 6f				ld l, a 
86b0 26 00			ld h,0 
86b2				if DEBUG_STORESE 
86b2					DMARK "SCz" 
86b2 f5				push af  
86b3 3a c7 86			ld a, (.dmark)  
86b6 32 6b ee			ld (debug_mark),a  
86b9 3a c8 86			ld a, (.dmark+1)  
86bc 32 6c ee			ld (debug_mark+1),a  
86bf 3a c9 86			ld a, (.dmark+2)  
86c2 32 6d ee			ld (debug_mark+2),a  
86c5 18 03			jr .pastdmark  
86c7 ..			.dmark: db "SCz"  
86ca f1			.pastdmark: pop af  
86cb			endm  
# End of macro DMARK
86cb					CALLMONITOR 
86cb cd 6f ee			call debug_vector  
86ce				endm  
# End of macro CALLMONITOR
86ce				endif 
86ce c9				ret 
86cf				 
86cf			 
86cf			 
86cf			; 
86cf			; Read File 
86cf			; 
86cf			; h - file id to locate 
86cf			; l - extent to locate 
86cf			; de - pointer to string to read into 
86cf			; 
86cf			; returns hl is 0 if block not found ie end of file or pointer to start of data read 
86cf			 
86cf			.sr_fail: 
86cf d1				pop de 
86d0 c9				ret 
86d1			 
86d1			storage_read: 
86d1			 
86d1			 
86d1 d5				push de 
86d2			 
86d2			; TODO BUG the above push is it popped before the RET Z? 
86d2			 
86d2			; TODO how to handle multiple part blocks 
86d2			 
86d2				; locate file extent to read 
86d2			 
86d2 5c				ld e, h 
86d3 55				ld d, l 
86d4			 
86d4			.srext: 
86d4 22 78 ea			ld (store_readptr), hl     ; save the current extent to load 
86d7 ed 53 76 ea		ld (store_readbuf), de     ; save the current buffer to load in to 
86db			 
86db 21 40 00			ld hl, STORE_BLOCK_PHY 
86de				if DEBUG_STORESE 
86de					DMARK "sre" 
86de f5				push af  
86df 3a f3 86			ld a, (.dmark)  
86e2 32 6b ee			ld (debug_mark),a  
86e5 3a f4 86			ld a, (.dmark+1)  
86e8 32 6c ee			ld (debug_mark+1),a  
86eb 3a f5 86			ld a, (.dmark+2)  
86ee 32 6d ee			ld (debug_mark+2),a  
86f1 18 03			jr .pastdmark  
86f3 ..			.dmark: db "sre"  
86f6 f1			.pastdmark: pop af  
86f7			endm  
# End of macro DMARK
86f7					CALLMONITOR 
86f7 cd 6f ee			call debug_vector  
86fa				endm  
# End of macro CALLMONITOR
86fa				endif 
86fa cd ab 84			call storage_findnextid 
86fd			 
86fd				if DEBUG_STORESE 
86fd					DMARK "srf" 
86fd f5				push af  
86fe 3a 12 87			ld a, (.dmark)  
8701 32 6b ee			ld (debug_mark),a  
8704 3a 13 87			ld a, (.dmark+1)  
8707 32 6c ee			ld (debug_mark+1),a  
870a 3a 14 87			ld a, (.dmark+2)  
870d 32 6d ee			ld (debug_mark+2),a  
8710 18 03			jr .pastdmark  
8712 ..			.dmark: db "srf"  
8715 f1			.pastdmark: pop af  
8716			endm  
# End of macro DMARK
8716					CALLMONITOR 
8716 cd 6f ee			call debug_vector  
8719				endm  
# End of macro CALLMONITOR
8719				endif 
8719 cd 04 8d			call ishlzero 
871c			;	ld a, l 
871c			;	add h 
871c			;	cp 0 
871c 28 b1			jr z,.sr_fail			; block not found so EOF 
871e			 
871e				; save current address for use by higher level words etc 
871e			 
871e 22 6b ea			ld (store_openaddr),hl 
8721			 
8721			 
8721				; hl contains page number to load 
8721 d1				pop de   ; get storage 
8722 ed 53 76 ea		ld (store_readbuf), de     ; current buffer to load in to 
8726 d5				push de 
8727				if DEBUG_STORESE 
8727					DMARK "srg" 
8727 f5				push af  
8728 3a 3c 87			ld a, (.dmark)  
872b 32 6b ee			ld (debug_mark),a  
872e 3a 3d 87			ld a, (.dmark+1)  
8731 32 6c ee			ld (debug_mark+1),a  
8734 3a 3e 87			ld a, (.dmark+2)  
8737 32 6d ee			ld (debug_mark+2),a  
873a 18 03			jr .pastdmark  
873c ..			.dmark: db "srg"  
873f f1			.pastdmark: pop af  
8740			endm  
# End of macro DMARK
8740					CALLMONITOR 
8740 cd 6f ee			call debug_vector  
8743				endm  
# End of macro CALLMONITOR
8743				endif 
8743 cd 78 81			call storage_read_block 
8746			 
8746				; if this a continuation read??? 
8746			 
8746 2a 76 ea			ld hl, (store_readbuf)     ; current buffer to load in to 
8749			 
8749 3e 3f			ld a, STORE_BLOCK_PHY-1 
874b cd db 8c			call addatohl 
874e 7e				ld a,(hl) 
874f fe 00			cp 0 
8751 28 02			jr z, .markiscont 
8753 3e ff			ld a, 255 
8755			 
8755			.markiscont: 
8755 32 6d ea			ld (store_readcont), a 
8758			 
8758				if DEBUG_STORESE 
8758					DMARK "srC" 
8758 f5				push af  
8759 3a 6d 87			ld a, (.dmark)  
875c 32 6b ee			ld (debug_mark),a  
875f 3a 6e 87			ld a, (.dmark+1)  
8762 32 6c ee			ld (debug_mark+1),a  
8765 3a 6f 87			ld a, (.dmark+2)  
8768 32 6d ee			ld (debug_mark+2),a  
876b 18 03			jr .pastdmark  
876d ..			.dmark: db "srC"  
8770 f1			.pastdmark: pop af  
8771			endm  
# End of macro DMARK
8771					CALLMONITOR 
8771 cd 6f ee			call debug_vector  
8774				endm  
# End of macro CALLMONITOR
8774				endif 
8774				; only short reads enabled 
8774			 
8774 3a 75 ea			ld a, (store_longread) 
8777 fe 00			cp 0 
8779 ca 46 88			jp z, .readdone 
877c			 
877c			; TODO if block has no zeros then need to read next block  
877c			; this code appears to be very buggy. Have added above a flag to disable/enable the following code for later debug 
877c			; check last byte of physical block. 
877c			; if not zero then the next block needs to be loaded 
877c			 
877c			 
877c 2a 76 ea			ld hl, (store_readbuf)     ; current buffer to load in to 
877f			 
877f 3e 3f			ld a, STORE_BLOCK_PHY-1 
8781 cd db 8c			call addatohl 
8784				;dec hl 
8784 7e				ld a,(hl) 
8785				if DEBUG_STORESE 
8785					DMARK "sr?" 
8785 f5				push af  
8786 3a 9a 87			ld a, (.dmark)  
8789 32 6b ee			ld (debug_mark),a  
878c 3a 9b 87			ld a, (.dmark+1)  
878f 32 6c ee			ld (debug_mark+1),a  
8792 3a 9c 87			ld a, (.dmark+2)  
8795 32 6d ee			ld (debug_mark+2),a  
8798 18 03			jr .pastdmark  
879a ..			.dmark: db "sr?"  
879d f1			.pastdmark: pop af  
879e			endm  
# End of macro DMARK
879e					CALLMONITOR 
879e cd 6f ee			call debug_vector  
87a1				endm  
# End of macro CALLMONITOR
87a1				endif 
87a1 fe 00			cp 0 
87a3 ca 46 88			jp z, .readdone 
87a6			 
87a6				; last byte is not zero so there is more in the next extent. Load it on the end.	 
87a6			 
87a6 23				inc hl 
87a7			 
87a7 22 76 ea			ld (store_readbuf), hl     ; save the current buffer to load in to 
87aa			 
87aa ed 5b 78 ea		ld de, (store_readptr)     ; save the current extent to load 
87ae			 
87ae eb				ex de, hl 
87af			 
87af				; next ext 
87af			 
87af 23				inc hl 
87b0 22 78 ea			ld  (store_readptr), hl     ; save the current extent to load 
87b3			 
87b3				if DEBUG_STORESE 
87b3					DMARK "sF2" 
87b3 f5				push af  
87b4 3a c8 87			ld a, (.dmark)  
87b7 32 6b ee			ld (debug_mark),a  
87ba 3a c9 87			ld a, (.dmark+1)  
87bd 32 6c ee			ld (debug_mark+1),a  
87c0 3a ca 87			ld a, (.dmark+2)  
87c3 32 6d ee			ld (debug_mark+2),a  
87c6 18 03			jr .pastdmark  
87c8 ..			.dmark: db "sF2"  
87cb f1			.pastdmark: pop af  
87cc			endm  
# End of macro DMARK
87cc					CALLMONITOR 
87cc cd 6f ee			call debug_vector  
87cf				endm  
# End of macro CALLMONITOR
87cf				endif 
87cf			 
87cf				; get and load block 
87cf			 
87cf cd ab 84			call storage_findnextid 
87d2			 
87d2				if DEBUG_STORESE 
87d2					DMARK "sf2" 
87d2 f5				push af  
87d3 3a e7 87			ld a, (.dmark)  
87d6 32 6b ee			ld (debug_mark),a  
87d9 3a e8 87			ld a, (.dmark+1)  
87dc 32 6c ee			ld (debug_mark+1),a  
87df 3a e9 87			ld a, (.dmark+2)  
87e2 32 6d ee			ld (debug_mark+2),a  
87e5 18 03			jr .pastdmark  
87e7 ..			.dmark: db "sf2"  
87ea f1			.pastdmark: pop af  
87eb			endm  
# End of macro DMARK
87eb					CALLMONITOR 
87eb cd 6f ee			call debug_vector  
87ee				endm  
# End of macro CALLMONITOR
87ee				endif 
87ee cd 04 8d			call ishlzero 
87f1			;	ld a, l 
87f1			;	add h 
87f1			;	cp 0 
87f1 ca cf 86			jp z,.sr_fail			; block not found so EOF 
87f4				 
87f4				; save current address for use by higher level words etc 
87f4			 
87f4 22 6b ea			ld (store_openaddr),hl 
87f7			 
87f7 cd 78 81			call storage_read_block 
87fa			 
87fa				; on a continuation block, we now have the file id and ext in the middle of the block 
87fa				; we need to pull everything back  
87fa			 
87fa ed 5b 76 ea		ld de, (store_readbuf)     ; current buffer to nudge into 
87fe 2a 76 ea			ld hl, (store_readbuf)     ; current buffer where data actually exists 
8801 23				inc hl 
8802 23				inc hl     ; skip id and ext 
8803 01 40 00			ld bc, STORE_BLOCK_PHY 
8806				if DEBUG_STORESE 
8806					DMARK "SR<" 
8806 f5				push af  
8807 3a 1b 88			ld a, (.dmark)  
880a 32 6b ee			ld (debug_mark),a  
880d 3a 1c 88			ld a, (.dmark+1)  
8810 32 6c ee			ld (debug_mark+1),a  
8813 3a 1d 88			ld a, (.dmark+2)  
8816 32 6d ee			ld (debug_mark+2),a  
8819 18 03			jr .pastdmark  
881b ..			.dmark: db "SR<"  
881e f1			.pastdmark: pop af  
881f			endm  
# End of macro DMARK
881f					CALLMONITOR 
881f cd 6f ee			call debug_vector  
8822				endm  
# End of macro CALLMONITOR
8822				endif 
8822 ed b0			ldir     ; copy data 
8824			 
8824				; move the pointer back and pretend we have a full buffer for next recheck 
8824			 
8824 1b				dec de 
8825 1b				dec de 
8826			 
8826			; TODO do pop below now short circuit loop????? 
8826 c1				pop bc     ; get rid of spare de on stack 
8827				if DEBUG_STORESE 
8827					DMARK "SR>" 
8827 f5				push af  
8828 3a 3c 88			ld a, (.dmark)  
882b 32 6b ee			ld (debug_mark),a  
882e 3a 3d 88			ld a, (.dmark+1)  
8831 32 6c ee			ld (debug_mark+1),a  
8834 3a 3e 88			ld a, (.dmark+2)  
8837 32 6d ee			ld (debug_mark+2),a  
883a 18 03			jr .pastdmark  
883c ..			.dmark: db "SR>"  
883f f1			.pastdmark: pop af  
8840			endm  
# End of macro DMARK
8840					CALLMONITOR 
8840 cd 6f ee			call debug_vector  
8843				endm  
# End of macro CALLMONITOR
8843				endif 
8843 c3 d4 86			jp .srext 
8846			 
8846			 
8846			 
8846			 
8846			 
8846			.readdone:		 
8846 e1				pop hl 		 ; return start of data to show as not EOF 
8847 23				inc hl   ; past file id 
8848 23				inc hl   ; past ext 
8849				if DEBUG_STORESE 
8849					DMARK "SRe" 
8849 f5				push af  
884a 3a 5e 88			ld a, (.dmark)  
884d 32 6b ee			ld (debug_mark),a  
8850 3a 5f 88			ld a, (.dmark+1)  
8853 32 6c ee			ld (debug_mark+1),a  
8856 3a 60 88			ld a, (.dmark+2)  
8859 32 6d ee			ld (debug_mark+2),a  
885c 18 03			jr .pastdmark  
885e ..			.dmark: db "SRe"  
8861 f1			.pastdmark: pop af  
8862			endm  
# End of macro DMARK
8862					CALLMONITOR 
8862 cd 6f ee			call debug_vector  
8865				endm  
# End of macro CALLMONITOR
8865				endif 
8865 c9					ret 
8866			 
8866			 
8866			 
8866			; 
8866			; Append File 
8866			; 
8866			; hl - file id to locate 
8866			; de - pointer to (multi block) string to write 
8866			 
8866			.sa_notfound: 
8866 d1				pop de 
8867 c9				ret 
8868			 
8868			 
8868			storage_append: 
8868				; hl -  file id to append to 
8868				; de - string to append 
8868			 
8868 d5				push de 
8869				 
8869				if DEBUG_STORESE 
8869					DMARK "AP1" 
8869 f5				push af  
886a 3a 7e 88			ld a, (.dmark)  
886d 32 6b ee			ld (debug_mark),a  
8870 3a 7f 88			ld a, (.dmark+1)  
8873 32 6c ee			ld (debug_mark+1),a  
8876 3a 80 88			ld a, (.dmark+2)  
8879 32 6d ee			ld (debug_mark+2),a  
887c 18 03			jr .pastdmark  
887e ..			.dmark: db "AP1"  
8881 f1			.pastdmark: pop af  
8882			endm  
# End of macro DMARK
8882					CALLMONITOR 
8882 cd 6f ee			call debug_vector  
8885				endm  
# End of macro CALLMONITOR
8885				endif 
8885			 
8885 7d				ld a, l 
8886 32 6e ea			ld (store_tmpid), a 
8889			 
8889				; get file header  
8889			 
8889 16 00			ld d, 0			 ; file extent to locate - file name details at item 0 
888b 3a 6e ea			ld a, (store_tmpid) 
888e 5f				ld e, a 
888f			 
888f 21 40 00				ld hl, STORE_BLOCK_PHY 
8892 cd ab 84				call storage_findnextid 
8895			 
8895 cd 04 8d			call ishlzero 
8898 28 cc			jr z, .sa_notfound 
889a			 
889a 22 65 ea			ld (store_tmppageid), hl 
889d			 
889d				; TODO handle file id not found 
889d			 
889d				if DEBUG_STORESE 
889d					DMARK "AP2" 
889d f5				push af  
889e 3a b2 88			ld a, (.dmark)  
88a1 32 6b ee			ld (debug_mark),a  
88a4 3a b3 88			ld a, (.dmark+1)  
88a7 32 6c ee			ld (debug_mark+1),a  
88aa 3a b4 88			ld a, (.dmark+2)  
88ad 32 6d ee			ld (debug_mark+2),a  
88b0 18 03			jr .pastdmark  
88b2 ..			.dmark: db "AP2"  
88b5 f1			.pastdmark: pop af  
88b6			endm  
# End of macro DMARK
88b6					CALLMONITOR 
88b6 cd 6f ee			call debug_vector  
88b9				endm  
# End of macro CALLMONITOR
88b9				endif 
88b9			 
88b9				; update file extent count 
88b9			 
88b9 11 7a ea			ld de, store_page 
88bc			 
88bc cd 78 81			call storage_read_block 
88bf			 
88bf				if DEBUG_STORESE 
88bf					DMARK "AP3" 
88bf f5				push af  
88c0 3a d4 88			ld a, (.dmark)  
88c3 32 6b ee			ld (debug_mark),a  
88c6 3a d5 88			ld a, (.dmark+1)  
88c9 32 6c ee			ld (debug_mark+1),a  
88cc 3a d6 88			ld a, (.dmark+2)  
88cf 32 6d ee			ld (debug_mark+2),a  
88d2 18 03			jr .pastdmark  
88d4 ..			.dmark: db "AP3"  
88d7 f1			.pastdmark: pop af  
88d8			endm  
# End of macro DMARK
88d8					CALLMONITOR 
88d8 cd 6f ee			call debug_vector  
88db				endm  
# End of macro CALLMONITOR
88db				endif 
88db			;	ld (store_tmppageid), hl 
88db			 
88db 3a 7c ea			ld a, (store_page+2) 
88de 3c				inc a 
88df 32 7c ea			ld (store_page+2), a 
88e2 32 6d ea			ld (store_tmpext), a 
88e5				 
88e5				if DEBUG_STORESE 
88e5					DMARK "AP3" 
88e5 f5				push af  
88e6 3a fa 88			ld a, (.dmark)  
88e9 32 6b ee			ld (debug_mark),a  
88ec 3a fb 88			ld a, (.dmark+1)  
88ef 32 6c ee			ld (debug_mark+1),a  
88f2 3a fc 88			ld a, (.dmark+2)  
88f5 32 6d ee			ld (debug_mark+2),a  
88f8 18 03			jr .pastdmark  
88fa ..			.dmark: db "AP3"  
88fd f1			.pastdmark: pop af  
88fe			endm  
# End of macro DMARK
88fe					CALLMONITOR 
88fe cd 6f ee			call debug_vector  
8901				endm  
# End of macro CALLMONITOR
8901				endif 
8901 2a 65 ea			ld hl, (store_tmppageid) 
8904 11 7a ea			ld de, store_page 
8907 cd dd 81			call storage_write_block 
890a			 
890a				; find free block 
890a			 
890a 11 00 00			ld de, 0			 ; file extent to locate 
890d			 
890d 21 40 00				ld hl, STORE_BLOCK_PHY 
8910 cd ab 84				call storage_findnextid 
8913 cd 04 8d			call ishlzero 
8916 ca 66 88			jp z, .sa_notfound 
8919			 
8919					; TODO handle no space left 
8919					 
8919 22 65 ea				ld (store_tmppageid), hl 
891c			 
891c				if DEBUG_STORESE 
891c					DMARK "AP4" 
891c f5				push af  
891d 3a 31 89			ld a, (.dmark)  
8920 32 6b ee			ld (debug_mark),a  
8923 3a 32 89			ld a, (.dmark+1)  
8926 32 6c ee			ld (debug_mark+1),a  
8929 3a 33 89			ld a, (.dmark+2)  
892c 32 6d ee			ld (debug_mark+2),a  
892f 18 03			jr .pastdmark  
8931 ..			.dmark: db "AP4"  
8934 f1			.pastdmark: pop af  
8935			endm  
# End of macro DMARK
8935					CALLMONITOR 
8935 cd 6f ee			call debug_vector  
8938				endm  
# End of macro CALLMONITOR
8938				endif 
8938					; init the buffer with zeros so we can id if the buffer is full or not 
8938			 
8938 e5					push hl 
8939 c5					push bc 
893a			 
893a 21 7a ea				ld hl, store_page 
893d 06 40				ld b, STORE_BLOCK_PHY 
893f 3e 00				ld a, 0 
8941 77			.zeroblock:	ld (hl), a 
8942 23					inc hl 
8943 10 fc				djnz .zeroblock 
8945			 
8945 c1					pop bc 
8946 e1					pop hl 
8947			 
8947					; construct block 
8947			 
8947 3a 6e ea				ld a, (store_tmpid) 
894a 32 7a ea				ld (store_page), a   ; file id 
894d 3a 6d ea				ld a, (store_tmpext)   ; extent for this block 
8950 32 7b ea				ld (store_page+1), a 
8953			 
8953 e1					pop hl    ; get string to write 
8954 06 3e				ld b, STORE_BLOCK_PHY-2       ; exclude count of file id and extent 
8956 11 7c ea				ld de, store_page+2 
8959			 
8959				if DEBUG_STORESE 
8959					DMARK "AP5" 
8959 f5				push af  
895a 3a 6e 89			ld a, (.dmark)  
895d 32 6b ee			ld (debug_mark),a  
8960 3a 6f 89			ld a, (.dmark+1)  
8963 32 6c ee			ld (debug_mark+1),a  
8966 3a 70 89			ld a, (.dmark+2)  
8969 32 6d ee			ld (debug_mark+2),a  
896c 18 03			jr .pastdmark  
896e ..			.dmark: db "AP5"  
8971 f1			.pastdmark: pop af  
8972			endm  
# End of macro DMARK
8972					CALLMONITOR 
8972 cd 6f ee			call debug_vector  
8975				endm  
# End of macro CALLMONITOR
8975				endif 
8975			 
8975			 
8975			 
8975					; fill buffer with data until end of string or full block 
8975			 
8975 7e			.appd:		ld a, (hl) 
8976 12					ld (de), a 
8977 fe 00				cp 0 
8979 28 04				jr z, .appdone 
897b 23					inc hl 
897c 13					inc de 
897d 10 f6				djnz .appd 
897f			 
897f e5			.appdone:	push hl		 	; save current source in case we need to go around again 
8980 f5					push af   		; save last byte dumped 
8981			 
8981			 
8981 2a 65 ea			ld hl, (store_tmppageid) 
8984 11 7a ea			ld de, store_page 
8987				if DEBUG_STORESE 
8987					DMARK "AP6" 
8987 f5				push af  
8988 3a 9c 89			ld a, (.dmark)  
898b 32 6b ee			ld (debug_mark),a  
898e 3a 9d 89			ld a, (.dmark+1)  
8991 32 6c ee			ld (debug_mark+1),a  
8994 3a 9e 89			ld a, (.dmark+2)  
8997 32 6d ee			ld (debug_mark+2),a  
899a 18 03			jr .pastdmark  
899c ..			.dmark: db "AP6"  
899f f1			.pastdmark: pop af  
89a0			endm  
# End of macro DMARK
89a0					CALLMONITOR 
89a0 cd 6f ee			call debug_vector  
89a3				endm  
# End of macro CALLMONITOR
89a3				endif 
89a3 cd dd 81				call storage_write_block 
89a6			 
89a6			 
89a6				; was that a full block of data written? 
89a6				; any more to write out? 
89a6			 
89a6				; if yes then set vars and jump to start of function again 
89a6			 
89a6 f1					pop af 
89a7 d1					pop de 
89a8			 
89a8 fe 00				cp 0		 ; no, string was fully written 
89aa c8					ret z 
89ab			 
89ab					; setup vars for next cycle 
89ab			 
89ab 3a 6e ea				ld a, (store_tmpid) 
89ae 6f					ld l, a 
89af 26 00				ld h, 0 
89b1			 
89b1 c3 68 88			 	jp storage_append	 ; yes, need to write out some more 
89b4			 
89b4			 
89b4			 
89b4			 
89b4			 
89b4			 
89b4			 
89b4			if DEBUG_STORECF 
89b4			storageput:	 
89b4					ret 
89b4			storageread: 
89b4					ld hl, store_page 
89b4					ld b, 200 
89b4					ld a,0 
89b4			.src:		ld (hl),a 
89b4					inc hl 
89b4					djnz .src 
89b4					 
89b4			 
89b4					ld de, 0 
89b4					ld bc, 1 
89b4					ld hl, store_page 
89b4					call cfRead 
89b4			 
89b4				call cfGetError 
89b4				ld hl,scratch 
89b4				call hexout 
89b4				ld hl, scratch+2 
89b4				ld a, 0 
89b4				ld (hl),a 
89b4				ld de, scratch 
89b4				ld a,display_row_1 
89b4				call str_at_display 
89b4				call update_display 
89b4			 
89b4					ld hl, store_page 
89b4					ld (os_cur_ptr),hl 
89b4			 
89b4					ret 
89b4			endif 
89b4			 
89b4			 
89b4			; Clear out the main buffer store (used to remove junk before writing a new block) 
89b4			 
89b4			storage_clear_page: 
89b4 e5				push hl 
89b5 d5				push de 
89b6 c5				push bc 
89b7 21 7a ea			ld hl, store_page 
89ba 3e 00			ld a, 0 
89bc 77				ld (hl), a 
89bd			 
89bd 11 7b ea			ld de, store_page+1 
89c0 01 19 01			ld bc, STORE_BLOCK_LOG+1 
89c3			 
89c3 ed b0			ldir 
89c5				 
89c5 c1				pop bc 
89c6 d1				pop de 
89c7 e1				pop hl 
89c8 c9				ret 
89c9			 
89c9			; eof 
# End of file firmware_storage.asm
89c9			  
89c9			; support routines for above hardware abstraction layer  
89c9			  
89c9			include "firmware_general.asm"        ; general support functions  
89c9			 
89c9			; word look up 
89c9			 
89c9			; in 
89c9			; a is the index 
89c9			; hl is pointer start of array 
89c9			; 
89c9			; returns 
89c9			; hl to the word 
89c9			; 
89c9			 
89c9			table_lookup:  
89c9 d5					push de 
89ca eb					ex de, hl 
89cb			 
89cb 6f					ld l, a 
89cc 26 00				ld h, 0 
89ce 29					add hl, hl 
89cf 19					add hl, de 
89d0 7e					ld a, (hl) 
89d1 23					inc hl 
89d2 66					ld h,(hl) 
89d3 6f					ld l, a 
89d4			 
89d4 d1					pop de 
89d5 c9					ret 
89d6			 
89d6			; Delay loops 
89d6			 
89d6			 
89d6			 
89d6			aDelayInMS: 
89d6 c5				push bc 
89d7 47				ld b,a 
89d8			msdelay: 
89d8 c5				push bc 
89d9				 
89d9			 
89d9 01 41 00			ld bc,041h 
89dc cd f4 89			call delayloop 
89df c1				pop bc 
89e0 05				dec b 
89e1 20 f5			jr nz,msdelay 
89e3			 
89e3			;if CPU_CLOCK_8MHZ 
89e3			;msdelay8: 
89e3			;	push bc 
89e3			;	 
89e3			; 
89e3			;	ld bc,041h 
89e3			;	call delayloop 
89e3			;	pop bc 
89e3			;	dec b 
89e3			;	jr nz,msdelay8 
89e3			;endif 
89e3			 
89e3			 
89e3 c1				pop bc 
89e4 c9				ret 
89e5			 
89e5			 
89e5			delay250ms: 
89e5				;push de 
89e5 01 00 40			ld bc, 04000h 
89e8 c3 f4 89			jp delayloop 
89eb			delay500ms: 
89eb				;push de 
89eb 01 00 80			ld bc, 08000h 
89ee c3 f4 89			jp delayloop 
89f1			delay1s: 
89f1				;push bc 
89f1			   ; Clobbers A, d and e 
89f1 01 00 00		    ld      bc,0      ; # 0ffffh = approx 1s 
89f4			delayloop: 
89f4 c5			    push bc 
89f5			 
89f5			if BASE_CPM 
89f5				ld bc, CPM_DELAY_TUNE 
89f5			.cpmloop: 
89f5				push bc 
89f5			 
89f5			endif 
89f5			 
89f5			 
89f5			 
89f5			delayloopi: 
89f5			;	push bc 
89f5			;.dl: 
89f5 cb 47		    bit     0,a    	; 8 
89f7 cb 47		    bit     0,a    	; 8 
89f9 cb 47		    bit     0,a    	; 8 
89fb e6 ff		    and     255  	; 7 
89fd 0b			    dec     bc      	; 6 
89fe 79			    ld      a,c     	; 4 
89ff b0			    or      b     	; 4 
8a00 c2 f5 89		    jp      nz,delayloopi   	; 10, total = 55 states/iteration 
8a03			    ; 65536 iterations * 55 states = 3604480 states = 2.00248 seconds 
8a03				;pop de 
8a03			;pop bc 
8a03			 
8a03			if BASE_CPM 
8a03				pop bc 
8a03				 
8a03			    dec     bc      	; 6 
8a03			    ld      a,c     	; 4 
8a03			    or      b     	; 4 
8a03			    jp      nz,.cpmloop   	; 10, total = 55 states/iteration 
8a03				 
8a03			 
8a03			endif 
8a03			;if CPU_CLOCK_8MHZ 
8a03			;    pop bc 
8a03			;    push bc 
8a03			;.dl8: 
8a03			;    bit     0,a    	; 8 
8a03			;    bit     0,a    	; 8 
8a03			;    bit     0,a    	; 8 
8a03			;    and     255  	; 7 
8a03			;    dec     bc      	; 6 
8a03			;    ld      a,c     	; 4 
8a03			;    or      b     	; 4 
8a03			;    jp      nz,.dl8   	; 10, total = 55 states/iteration 
8a03			;endif 
8a03			 
8a03			;if CPU_CLOCK_10MHZ 
8a03			;    pop bc 
8a03			;    push bc 
8a03			;.dl8: 
8a03			;    bit     0,a    	; 8 
8a03			;    bit     0,a    	; 8 
8a03			;    bit     0,a    	; 8 
8a03			;    and     255  	; 7 
8a03			;    dec     bc      	; 6 
8a03			;    ld      a,c     	; 4 
8a03			;    or      b     	; 4 
8a03			;    jp      nz,.dl8   	; 10, total = 55 states/iteration 
8a03			;endif 
8a03 c1			    pop bc 
8a04			 
8a04 c9				ret 
8a05			 
8a05			 
8a05			 
8a05			; eof 
# End of file firmware_general.asm
8a05			include "firmware_display.asm"      ; frame buffer screen abstraction layer  
8a05			; display routines that use the physical hardware abstraction layer 
8a05			 
8a05			 
8a05			; Display an activity indicator 
8a05			; Each call returns the new char pointed to in hl 
8a05			 
8a05			active: 
8a05 3a c6 eb			ld a, (display_active) 
8a08 fe 06			cp 6 
8a0a			 
8a0a 20 02			jr nz, .sne 
8a0c				; gone past the last one reset sequence 
8a0c 3e ff			ld a, 255 
8a0e			 
8a0e			.sne:   
8a0e				; get the next char in seq 
8a0e 3c				inc a 
8a0f 32 c6 eb			ld (display_active), a 
8a12			 
8a12				; look up the string in the table 
8a12 21 29 8a			ld hl, actseq 
8a15 cb 27			sla a 
8a17 cd db 8c			call addatohl 
8a1a cd 91 9d			call loadwordinhl 
8a1d			 
8a1d				; forth will write the to string when pushing so move from rom to ram 
8a1d			 
8a1d 11 c7 eb			ld de, display_active+1 
8a20 01 02 00			ld bc, 2 
8a23 ed b0			ldir 
8a25			 
8a25 21 c7 eb			ld hl, display_active+1 
8a28 c9				ret 
8a29				 
8a29				 
8a29			 
8a29			 
8a29			;db "|/-\|-\" 
8a29			 
8a29			actseq: 
8a29			 
8a29 37 8a		dw spin0 
8a2b 39 8a		dw spin1 
8a2d 3b 8a		dw spin2 
8a2f 3d 8a		dw spin3 
8a31 3b 8a		dw spin2 
8a33 39 8a		dw spin1 
8a35 37 8a		dw spin0 
8a37			 
8a37 .. 00		spin0: db " ", 0 
8a39 .. 00		spin1: db "-", 0 
8a3b .. 00		spin2: db "+", 0 
8a3d .. 00		spin3: db "#", 0 
8a3f			 
8a3f			 
8a3f			; information window 
8a3f			 
8a3f			; pass hl with 1st string to display 
8a3f			; pass de with 2nd string to display 
8a3f			 
8a3f			info_panel: 
8a3f e5				push hl 
8a40			 
8a40 2a cc eb			ld hl, (display_fb_active) 
8a43 e5				push hl    ; future de destination 
8a44 21 b1 ed				ld hl, display_fb0 
8a47 22 cc eb				ld (display_fb_active), hl 
8a4a			 
8a4a			;	call clear_display 
8a4a			 
8a4a				if BASE_CPM 
8a4a				ld a, '.' 
8a4a				else 
8a4a 3e a5			ld a, 165 
8a4c				endif 
8a4c cd b3 8a			call fill_display 
8a4f			 
8a4f			 
8a4f 3e 55			ld a, display_row_3 + 5 
8a51 cd c1 8a			call str_at_display 
8a54			 
8a54 e1				pop hl 
8a55 d1				pop de 
8a56			 
8a56 e5				push hl 
8a57			 
8a57			 
8a57 3e 2d			ld a, display_row_2 + 5 
8a59 cd c1 8a			call str_at_display 
8a5c			 
8a5c			 
8a5c cd d1 8a			call update_display 
8a5f cd da 99			call next_page_prompt 
8a62 cd ae 8a			call clear_display 
8a65			 
8a65				 
8a65 21 10 ed				ld hl, display_fb1 
8a68 22 cc eb				ld (display_fb_active), hl 
8a6b cd d1 8a			call update_display 
8a6e			 
8a6e e1				pop hl 
8a6f			 
8a6f c9				ret 
8a70			 
8a70			 
8a70			 
8a70			 
8a70			; TODO windowing? 
8a70			 
8a70			; TODO scroll line up 
8a70			 
8a70			scroll_up: 
8a70			 
8a70 e5				push hl 
8a71 d5				push de 
8a72 c5				push bc 
8a73			 
8a73				; get frame buffer  
8a73			 
8a73 2a cc eb			ld hl, (display_fb_active) 
8a76 e5				push hl    ; future de destination 
8a77			 
8a77 11 28 00			ld  de, display_cols 
8a7a 19				add hl, de 
8a7b			 
8a7b d1				pop de 
8a7c			 
8a7c				;ex de, hl 
8a7c 01 9f 00			ld bc, display_fb_len -1  
8a7f			;if DEBUG_FORTH_WORDS 
8a7f			;	DMARK "SCL" 
8a7f			;	CALLMONITOR 
8a7f			;endif	 
8a7f ed b0			ldir 
8a81			 
8a81				; wipe bottom row 
8a81			 
8a81			 
8a81 2a cc eb			ld hl, (display_fb_active) 
8a84 11 a0 00			ld de, display_cols*display_rows 
8a87 19				add hl, de 
8a88 06 28			ld b, display_cols 
8a8a 3e 20			ld a, ' ' 
8a8c			.scwipe: 
8a8c 77				ld (hl), a 
8a8d 2b				dec hl 
8a8e 10 fc			djnz .scwipe 
8a90			 
8a90				;pop hl 
8a90			 
8a90 c1				pop bc 
8a91 d1				pop de 
8a92 e1				pop hl 
8a93			 
8a93 c9				ret 
8a94			 
8a94			 
8a94			;scroll_upo: 
8a94			;	ld de, display_row_1 
8a94			 ;	ld hl, display_row_2 
8a94			;	ld bc, display_cols 
8a94			;	ldir 
8a94			;	ld de, display_row_2 
8a94			 ;	ld hl, display_row_3 
8a94			;	ld bc, display_cols 
8a94			;	ldir 
8a94			;	ld de, display_row_3 
8a94			 ;	ld hl, display_row_4 
8a94			;	ld bc, display_cols 
8a94			;	ldir 
8a94			 
8a94			; TODO clear row 4 
8a94			 
8a94			;	ret 
8a94			 
8a94				 
8a94			scroll_down: 
8a94			 
8a94 e5				push hl 
8a95 d5				push de 
8a96 c5				push bc 
8a97			 
8a97				; get frame buffer  
8a97			 
8a97 2a cc eb			ld hl, (display_fb_active) 
8a9a			 
8a9a 11 9f 00			ld de, display_fb_len - 1 
8a9d 19				add hl, de 
8a9e			 
8a9e e5			push hl    ; future de destination 
8a9f			 
8a9f 11 28 00			ld  de, display_cols 
8aa2 ed 52			sbc hl, de 
8aa4			 
8aa4			 
8aa4 d1				pop de 
8aa5			 
8aa5			;	ex de, hl 
8aa5 01 9f 00			ld bc, display_fb_len -1  
8aa8			 
8aa8			 
8aa8				 
8aa8			 
8aa8 ed b0			ldir 
8aaa			 
8aaa				; wipe bottom row 
8aaa			 
8aaa			 
8aaa			;	ld hl, (display_fb_active) 
8aaa			;;	ld de, display_cols*display_rows 
8aaa			;;	add hl, de 
8aaa			;	ld b, display_cols 
8aaa			;	ld a, ' ' 
8aaa			;.scwiped: 
8aaa			;	ld (hl), a 
8aaa			;	dec hl 
8aaa			;	djnz .scwiped 
8aaa			 
8aaa				;pop hl 
8aaa			 
8aaa c1				pop bc 
8aab d1				pop de 
8aac e1				pop hl 
8aad			 
8aad c9				ret 
8aae			;scroll_down: 
8aae			;	ld de, display_row_4 
8aae			;	ld hl, display_row_3 
8aae			;	ld bc, display_cols 
8aae			;	ldir 
8aae			;	ld de, display_row_3 
8aae			; 	ld hl, display_row_2 
8aae			;	ld bc, display_cols 
8aae			;	ldir 
8aae			;	ld de, display_row_2 
8aae			;	ld hl, display_row_1 
8aae			;	ld bc, display_cols 
8aae			;	ldir 
8aae			;;; TODO clear row 1 
8aae			;	ret 
8aae			 
8aae			 
8aae			 
8aae			 
8aae			 
8aae			; clear active frame buffer 
8aae			 
8aae			clear_display: 
8aae 3e 20			ld a, ' ' 
8ab0 c3 b3 8a			jp fill_display 
8ab3			 
8ab3			; fill active frame buffer with a char in A 
8ab3			 
8ab3			fill_display: 
8ab3 06 a0			ld b,display_fb_len 
8ab5 2a cc eb			ld hl, (display_fb_active) 
8ab8 77			.fd1:	ld (hl),a 
8ab9 23				inc hl 
8aba 10 fc			djnz .fd1 
8abc 23				inc hl 
8abd 3e 00			ld a,0 
8abf 77				ld (hl),a 
8ac0			 
8ac0			 
8ac0 c9				ret 
8ac1			; Write string (DE) at pos (A) to active frame buffer 
8ac1			 
8ac1 2a cc eb		str_at_display:    ld hl,(display_fb_active) 
8ac4 06 00					ld b,0 
8ac6 4f					ld c,a 
8ac7 09					add hl,bc 
8ac8 1a			.sad1: 		LD   A, (DE)        ;Get character from string 
8ac9 b7			            OR   A              ;Null terminator? 
8aca c8			            RET  Z              ;Yes, so finished 
8acb 77					ld (hl),a 
8acc 23				inc hl 
8acd 13			            INC  DE             ;Point to next character 
8ace 18 f8		            JR   .sad1     ;Repeat 
8ad0 c9					ret 
8ad1			 
8ad1			; using current frame buffer write to physical display 
8ad1			 
8ad1			update_display: 
8ad1 e5				push hl 
8ad2 2a cc eb			ld hl, (display_fb_active) 
8ad5 cd 62 dc			call write_display 
8ad8 e1				pop hl 
8ad9 c9				ret 
8ada			 
8ada			; TODO scrolling 
8ada			 
8ada			 
8ada			; move cursor right one char 
8ada			cursor_right: 
8ada			 
8ada				; TODO shift right 
8ada				; TODO if beyond max col 
8ada				; TODO       cursor_next_line 
8ada			 
8ada c9				ret 
8adb			 
8adb			 
8adb			cursor_next_line: 
8adb				; TODO first char 
8adb				; TODO line down 
8adb				; TODO if past last row 
8adb				; TODO    scroll up 
8adb			 
8adb c9				ret 
8adc			 
8adc			cursor_left: 
8adc				; TODO shift left 
8adc				; TODO if beyond left  
8adc				; TODO     cursor prev line 
8adc				 
8adc c9				ret 
8add			 
8add			cursor_prev_line: 
8add				; TODO last char 
8add				; TODO line up 
8add				; TODO if past first row 
8add				; TODO   scroll down 
8add			 
8add c9				ret 
8ade			 
8ade			 
8ade			cout: 
8ade				; A - char 
8ade c9				ret 
8adf			 
8adf			 
8adf			; Display a menu and allow item selection (optional toggle items) 
8adf			; 
8adf			; format: 
8adf			; hl pointer to word array with zero term for items 
8adf			; e.g.    db item1 
8adf			;         db .... 
8adf			;         db 0 
8adf			; 
8adf			; a = starting menu item  
8adf			; 
8adf			; de = pointer item toggle array   (todo) 
8adf			; 
8adf			; returns item selected in a 1-... 
8adf			; returns 0 if back button pressed 
8adf			; 
8adf			; NOTE: Uses system frame buffer to display 
8adf			; 
8adf			; LEFT, Q = go back 
8adf			; RIGHT, SPACE, CR = select 
8adf			; UP, A - Up 
8adf			; DOWN, Z - Down 
8adf			 
8adf			 
8adf			 
8adf			 
8adf			 
8adf			menu: 
8adf			 
8adf					; keep array pointer 
8adf			 
8adf 22 73 ea				ld (store_tmp1), hl 
8ae2 32 71 ea				ld (store_tmp2), a 
8ae5			 
8ae5					; check for key bounce 
8ae5			 
8ae5			if BASE_KEV 
8ae5			 
8ae5			.mbounce:	call cin 
8ae5					cp 0 
8ae5					jr nz, .mbounce 
8ae5			endif 
8ae5					; for ease use ex 
8ae5			 
8ae5					; use menu on fb0 so as not to disrupt user screens ie a menu popup 
8ae5 21 b1 ed				ld hl, display_fb0 
8ae8 22 cc eb				ld (display_fb_active), hl 
8aeb			 
8aeb cd ae 8a		.mloop:		call clear_display 
8aee cd d1 8a				call update_display 
8af1			 
8af1					; draw selection id '>' at 1 
8af1			 
8af1					; init start of list display 
8af1			 
8af1 3e 05				ld a, 5 
8af3 32 6f ea				ld (store_tmp3), a   ; display row count 
8af6 3a 71 ea				ld a,( store_tmp2) 
8af9 32 72 ea				ld (store_tmp2+1), a   ; display item count 
8afc			 
8afc					 
8afc			.mitem:	 
8afc			 
8afc			 
8afc 3a 72 ea				ld a,(store_tmp2+1) 
8aff 6f					ld l, a 
8b00 26 00				ld h, 0 
8b02 29					add hl, hl 
8b03 ed 5b 73 ea			ld de, (store_tmp1) 
8b07 19					add hl, de 
8b08 7e					ld a, (hl) 
8b09 23					inc hl 
8b0a 66					ld h,(hl) 
8b0b 6f					ld l, a 
8b0c			 
8b0c cd 04 8d				call ishlzero 
8b0f 28 1a				jr z, .mdone 
8b11			 
8b11 eb					ex de, hl 
8b12 3a 6f ea				ld a, (store_tmp3) 
8b15 cd c1 8a				call str_at_display 
8b18					 
8b18			 
8b18					; next item 
8b18 3a 72 ea				ld a, (store_tmp2+1) 
8b1b 3c					inc a 
8b1c 32 72 ea				ld (store_tmp2+1), a   ; display item count 
8b1f			 
8b1f			 		; next row 
8b1f			 
8b1f 3a 6f ea				ld a, (store_tmp3) 
8b22 c6 28				add display_cols 
8b24 32 6f ea				ld (store_tmp3), a 
8b27			 
8b27					; at end of screen? 
8b27			 
8b27 fe 10				cp display_rows*4 
8b29 20 d1				jr nz, .mitem 
8b2b			 
8b2b			 
8b2b			.mdone: 
8b2b cd 04 8d				call ishlzero 
8b2e 28 08				jr z, .nodn 
8b30			 
8b30 3e 78				ld a, display_row_4 
8b32 11 b1 8b				ld de, .mdown 
8b35 cd c1 8a				call str_at_display 
8b38			 
8b38					; draw options to fill the screens with active item on line 1 
8b38					; if current option is 2 or more then display ^ in top 
8b38			 
8b38 3a 71 ea		.nodn:		ld a, (store_tmp2) 
8b3b fe 00				cp 0 
8b3d 28 08				jr z, .noup 
8b3f			 
8b3f 3e 00				ld a, 0 
8b41 11 af 8b				ld de, .mup 
8b44 cd c1 8a				call str_at_display 
8b47			 
8b47 3e 02		.noup:		ld a, 2 
8b49 11 ad 8b				ld de, .msel 
8b4c cd c1 8a				call str_at_display 
8b4f			 
8b4f					; if current option + 1 is not null then display V in bottom 
8b4f					; get key 
8b4f cd d1 8a				call update_display 
8b52			 
8b52			 
8b52					; handle key 
8b52			 
8b52 cd ee dc				call cin_wait 
8b55			 
8b55 fe 05				cp KEY_UP 
8b57 28 2b				jr z, .mgoup 
8b59 fe 61				cp 'a' 
8b5b 28 27				jr z, .mgoup 
8b5d fe 0a				cp KEY_DOWN 
8b5f 28 32				jr z, .mgod 
8b61 fe 7a				cp 'z' 
8b63 28 2e				jr z, .mgod 
8b65 fe 20				cp ' ' 
8b67 28 34				jr z, .goend 
8b69 fe 0c				cp KEY_RIGHT 
8b6b 28 30				jr z, .goend 
8b6d fe 0d				cp KEY_CR 
8b6f 28 2c				jr z, .goend 
8b71 fe 71				cp 'q' 
8b73 28 0b				jr z, .goback 
8b75			 
8b75 fe 0b				cp KEY_LEFT 
8b77 28 07				jr z, .goback 
8b79 fe 08				cp KEY_BS 
8b7b 28 03				jr z, .goback 
8b7d c3 eb 8a				jp .mloop 
8b80			 
8b80			.goback: 
8b80 3e 00			ld a, 0 
8b82 18 1d			jr .goend2 
8b84			 
8b84				; move up one 
8b84			.mgoup: 
8b84 3a 71 ea				ld a, (store_tmp2) 
8b87 fe 00				cp 0 
8b89 ca eb 8a				jp z, .mloop 
8b8c 3d					dec a 
8b8d 32 71 ea				ld (store_tmp2), a 
8b90 c3 eb 8a				jp .mloop 
8b93			 
8b93				; move down one 
8b93			.mgod: 
8b93 3a 71 ea				ld a, (store_tmp2) 
8b96 3c					inc a 
8b97 32 71 ea				ld (store_tmp2), a 
8b9a c3 eb 8a				jp .mloop 
8b9d			 
8b9d			 
8b9d			.goend: 
8b9d					; get selected item number 
8b9d			 
8b9d 3a 71 ea				ld a, (store_tmp2) 
8ba0 3c					inc a 
8ba1			 
8ba1			.goend2: 
8ba1 f5					push af 
8ba2			 
8ba2					; restore active fb 
8ba2					; TODO BUG assumes fb1 
8ba2			 
8ba2 21 10 ed				ld hl, display_fb1 
8ba5 22 cc eb				ld (display_fb_active), hl 
8ba8			 
8ba8					; restore main regs 
8ba8			 
8ba8			 
8ba8 cd d1 8a				call update_display 
8bab			 
8bab f1					pop af 
8bac			 
8bac c9				ret 
8bad			 
8bad .. 00		.msel:   db ">",0 
8baf .. 00		.mup:   db "^",0 
8bb1 .. 00		.mdown:   db "v",0 
8bb3			 
8bb3			 
8bb3			; eof 
8bb3			 
# End of file firmware_display.asm
8bb3			include "firmware_maths.asm"     ; any odd maths stuff   TODO removed until I fix up the rng code  
8bb3			; random number generators 
8bb3			 
8bb3			 
8bb3			; https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random 
8bb3			 
8bb3			 
8bb3			;-----> Generate a random number 
8bb3			; output a=answer 0<=a<=255 
8bb3			; all registers are preserved except: af 
8bb3			random: 
8bb3 e5			        push    hl 
8bb4 d5			        push    de 
8bb5 2a ab eb		        ld      hl,(randData) 
8bb8 ed 5f		        ld      a,r 
8bba 57			        ld      d,a 
8bbb 5e			        ld      e,(hl) 
8bbc 19			        add     hl,de 
8bbd 85			        add     a,l 
8bbe ac			        xor     h 
8bbf 22 ab eb		        ld      (randData),hl 
8bc2 d1			        pop     de 
8bc3 e1			        pop     hl 
8bc4 c9			        ret 
8bc5			 
8bc5			 
8bc5			; randData here must be a 2 byte seed located in ram. While this is a fast generator, it's generally not considered very good in terms of randomness. 
8bc5			 
8bc5			 
8bc5			 
8bc5			;------LFSR------ 
8bc5			;James Montelongo 
8bc5			;optimized by Spencer Putt 
8bc5			;out: 
8bc5			; a = 8 bit random number 
8bc5			RandLFSR: 
8bc5 21 b1 eb		        ld hl,LFSRSeed+4 
8bc8 5e			        ld e,(hl) 
8bc9 23			        inc hl 
8bca 56			        ld d,(hl) 
8bcb 23			        inc hl 
8bcc 4e			        ld c,(hl) 
8bcd 23			        inc hl 
8bce 7e			        ld a,(hl) 
8bcf 47			        ld b,a 
8bd0 cb 13		        rl e  
8bd2 cb 12			rl d 
8bd4 cb 11		        rl c  
8bd6 17				rla 
8bd7 cb 13		        rl e  
8bd9 cb 12			rl d 
8bdb cb 11		        rl c  
8bdd 17				rla 
8bde cb 13		        rl e  
8be0 cb 12			rl d 
8be2 cb 11		        rl c  
8be4 17				rla 
8be5 67			        ld h,a 
8be6 cb 13		        rl e  
8be8 cb 12			rl d 
8bea cb 11		        rl c  
8bec 17				rla 
8bed a8			        xor b 
8bee cb 13		        rl e  
8bf0 cb 12			rl d 
8bf2 ac			        xor h 
8bf3 a9			        xor c 
8bf4 aa			        xor d 
8bf5 21 b3 eb		        ld hl,LFSRSeed+6 
8bf8 11 b4 eb		        ld de,LFSRSeed+7 
8bfb 01 07 00		        ld bc,7 
8bfe ed b8		        lddr 
8c00 12			        ld (de),a 
8c01 c9			        ret 
8c02			 
8c02			;While this may produces better numbers, it is slower, larger and requires a bigger seed than ionrandom. Assuming theres is a good seed to start, it should generate ~2^56 bytes before repeating. However if there is not a good seed(0 for example), then the numbers created will not be adequate. Unlike Ionrandom and its use of the r register, starting with the same seed the same numbers will be generated. With Ionrandom the code running may have an impact on the number generated. This means this method requires more initialization. 
8c02			 
8c02			;You can initialize with TI-OS's seeds, stored at seed1 and seed2, both are ti-floats but will serve the purpose.  
8c02			 
8c02			 
8c02			;This is a very fast, quality pseudo-random number generator. It combines a 16-bit Linear Feedback Shift Register and a 16-bit LCG. 
8c02			 
8c02			prng16: 
8c02			;Inputs: 
8c02			;   (seed1) contains a 16-bit seed value 
8c02			;   (seed2) contains a NON-ZERO 16-bit seed value 
8c02			;Outputs: 
8c02			;   HL is the result 
8c02			;   BC is the result of the LCG, so not that great of quality 
8c02			;   DE is preserved 
8c02			;Destroys: 
8c02			;   AF 
8c02			;cycle: 4,294,901,760 (almost 4.3 billion) 
8c02			;160cc 
8c02			;26 bytes 
8c02 2a a5 eb		    ld hl,(seed1) 
8c05 44			    ld b,h 
8c06 4d			    ld c,l 
8c07 29			    add hl,hl 
8c08 29			    add hl,hl 
8c09 2c			    inc l 
8c0a 09			    add hl,bc 
8c0b 22 a5 eb		    ld (seed1),hl 
8c0e 2a a3 eb		    ld hl,(seed2) 
8c11 29			    add hl,hl 
8c12 9f			    sbc a,a 
8c13 e6 2d		    and %00101101 
8c15 ad			    xor l 
8c16 6f			    ld l,a 
8c17 22 a3 eb		    ld (seed2),hl 
8c1a 09			    add hl,bc 
8c1b c9			    ret 
8c1c			 
8c1c			;On their own, LCGs and LFSRs don't produce great results and are generally very cyclical, but they are very fast to compute. The 16-bit LCG in the above example will bounce around and reach each number from 0 to 65535, but the lower bits are far more predictable than the upper bits. The LFSR mixes up the predictability of a given bit's state, but it hits every number except 0, meaning there is a slightly higher chance of any given bit in the result being a 1 instead of a 0. It turns out that by adding together the outputs of these two generators, we can lose the predictability of a bit's state, while ensuring it has a 50% chance of being 0 or 1. As well, since the periods, 65536 and 65535 are coprime, then the overall period of the generator is 65535*65536, which is over 4 billion.  
8c1c			 
8c1c			rand32: 
8c1c			;Inputs: 
8c1c			;   (seed1_0) holds the lower 16 bits of the first seed 
8c1c			;   (seed1_1) holds the upper 16 bits of the first seed 
8c1c			;   (seed2_0) holds the lower 16 bits of the second seed 
8c1c			;   (seed2_1) holds the upper 16 bits of the second seed 
8c1c			;   **NOTE: seed2 must be non-zero 
8c1c			;Outputs: 
8c1c			;   HL is the result 
8c1c			;   BC,DE can be used as lower quality values, but are not independent of HL. 
8c1c			;Destroys: 
8c1c			;   AF 
8c1c			;Tested and passes all CAcert tests 
8c1c			;Uses a very simple 32-bit LCG and 32-bit LFSR 
8c1c			;it has a period of 18,446,744,069,414,584,320 
8c1c			;roughly 18.4 quintillion. 
8c1c			;LFSR taps: 0,2,6,7  = 11000101 
8c1c			;291cc 
8c1c			;seed1_0=$+1 
8c1c			;    ld hl,12345 
8c1c			;seed1_1=$+1 
8c1c			;    ld de,6789 
8c1c			;    ld b,h 
8c1c			;    ld c,l 
8c1c			;    add hl,hl \ rl e \ rl d 
8c1c			;    add hl,hl \ rl e \ rl d 
8c1c			;    inc l 
8c1c			;    add hl,bc 
8c1c			;    ld (seed1_0),hl 
8c1c			;    ld hl,(seed1_1) 
8c1c			;    adc hl,de 
8c1c			;    ld (seed1_1),hl 
8c1c			;    ex de,hl 
8c1c			;seed2_0=$+1 
8c1c			;    ld hl,9876 
8c1c			;seed2_1=$+1 
8c1c			;    ld bc,54321 
8c1c			;    add hl,hl \ rl c \ rl b 
8c1c			;    ld (seed2_1),bc 
8c1c			;    sbc a,a 
8c1c			;    and %11000101 
8c1c			;    xor l 
8c1c			;    ld l,a 
8c1c			;    ld (seed2_0),hl 
8c1c			;    ex de,hl 
8c1c			;    add hl,bc 
8c1c			;    ret 
8c1c			; 
8c1c			 
8c1c			; 16-bit xorshift pseudorandom number generator by John Metcalf 
8c1c			; 20 bytes, 86 cycles (excluding ret) 
8c1c			 
8c1c			; returns   hl = pseudorandom number 
8c1c			; corrupts   a 
8c1c			 
8c1c			; generates 16-bit pseudorandom numbers with a period of 65535 
8c1c			; using the xorshift method: 
8c1c			 
8c1c			; hl ^= hl << 7 
8c1c			; hl ^= hl >> 9 
8c1c			; hl ^= hl << 8 
8c1c			 
8c1c			; some alternative shift triplets which also perform well are: 
8c1c			; 6, 7, 13; 7, 9, 13; 9, 7, 13. 
8c1c			 
8c1c			;  org 32768 
8c1c			 
8c1c			xrnd: 
8c1c 2a a9 eb		  ld hl,(xrandc)       ; seed must not be 0 
8c1f 3e 00		  ld a,0 
8c21 bd			  cp l 
8c22 20 02		  jr nz, .xrnd1 
8c24 2e 01		  ld l, 1 
8c26			.xrnd1: 
8c26			 
8c26 7c			  ld a,h 
8c27 1f			  rra 
8c28 7d			  ld a,l 
8c29 1f			  rra 
8c2a ac			  xor h 
8c2b 67			  ld h,a 
8c2c 7d			  ld a,l 
8c2d 1f			  rra 
8c2e 7c			  ld a,h 
8c2f 1f			  rra 
8c30 ad			  xor l 
8c31 6f			  ld l,a 
8c32 ac			  xor h 
8c33 67			  ld h,a 
8c34			 
8c34 22 a9 eb		  ld (xrandc),hl 
8c37			 
8c37 c9			  ret 
8c38			;  
8c38			 
8c38			 
8c38			;;;; int maths 
8c38			 
8c38			; https://map.grauw.nl/articles/mult_div_shifts.php 
8c38			; Divide 16-bit values (with 16-bit result) 
8c38			; In: Divide BC by divider DE 
8c38			; Out: BC = result, HL = rest 
8c38			; 
8c38			Div16: 
8c38 21 00 00		    ld hl,0 
8c3b 78			    ld a,b 
8c3c 06 08		    ld b,8 
8c3e			Div16_Loop1: 
8c3e 17			    rla 
8c3f ed 6a		    adc hl,hl 
8c41 ed 52		    sbc hl,de 
8c43 30 01		    jr nc,Div16_NoAdd1 
8c45 19			    add hl,de 
8c46			Div16_NoAdd1: 
8c46 10 f6		    djnz Div16_Loop1 
8c48 17			    rla 
8c49 2f			    cpl 
8c4a 47			    ld b,a 
8c4b 79			    ld a,c 
8c4c 48			    ld c,b 
8c4d 06 08		    ld b,8 
8c4f			Div16_Loop2: 
8c4f 17			    rla 
8c50 ed 6a		    adc hl,hl 
8c52 ed 52		    sbc hl,de 
8c54 30 01		    jr nc,Div16_NoAdd2 
8c56 19			    add hl,de 
8c57			Div16_NoAdd2: 
8c57 10 f6		    djnz Div16_Loop2 
8c59 17			    rla 
8c5a 2f			    cpl 
8c5b 41			    ld b,c 
8c5c 4f			    ld c,a 
8c5d c9			ret 
8c5e			 
8c5e			 
8c5e			;http://z80-heaven.wikidot.com/math 
8c5e			; 
8c5e			;Inputs: 
8c5e			;     DE and A are factors 
8c5e			;Outputs: 
8c5e			;     A is not changed 
8c5e			;     B is 0 
8c5e			;     C is not changed 
8c5e			;     DE is not changed 
8c5e			;     HL is the product 
8c5e			;Time: 
8c5e			;     342+6x 
8c5e			; 
8c5e			Mult16: 
8c5e			 
8c5e 06 08		     ld b,8          ;7           7 
8c60 21 00 00		     ld hl,0         ;10         10 
8c63 29			       add hl,hl     ;11*8       88 
8c64 07			       rlca          ;4*8        32 
8c65 30 01		       jr nc,$+3     ;(12|18)*8  96+6x 
8c67 19			         add hl,de   ;--         -- 
8c68 10 f9		       djnz $-5      ;13*7+8     99 
8c6a c9			ret 
8c6b			 
8c6b			; 
8c6b			; Square root of 16-bit value 
8c6b			; In:  HL = value 
8c6b			; Out:  D = result (rounded down) 
8c6b			; 
8c6b			;Sqr16: 
8c6b			;    ld de,#0040 
8c6b			;    ld a,l 
8c6b			;    ld l,h 
8c6b			;    ld h,d 
8c6b			;    or a 
8c6b			;    ld b,8 
8c6b			;Sqr16_Loop: 
8c6b			;    sbc hl,de 
8c6b			;    jr nc,Sqr16_Skip 
8c6b			;    add hl,de 
8c6b			;Sqr16_Skip: 
8c6b			;    ccf 
8c6b			;    rl d 
8c6b			;    add a,a 
8c6b			;    adc hl,hl 
8c6b			;    add a,a 
8c6b			;    adc hl,hl 
8c6b			;    djnz Sqr16_Loop 
8c6b			;    ret 
8c6b			; 
8c6b			; 
8c6b			; Divide 8-bit values 
8c6b			; In: Divide E by divider C 
8c6b			; Out: A = result, B = rest 
8c6b			; 
8c6b			Div8: 
8c6b af			    xor a 
8c6c 06 08		    ld b,8 
8c6e			Div8_Loop: 
8c6e cb 13		    rl e 
8c70 17			    rla 
8c71 91			    sub c 
8c72 30 01		    jr nc,Div8_NoAdd 
8c74 81			    add a,c 
8c75			Div8_NoAdd: 
8c75 10 f7		    djnz Div8_Loop 
8c77 47			    ld b,a 
8c78 7b			    ld a,e 
8c79 17			    rla 
8c7a 2f			    cpl 
8c7b c9			    ret 
8c7c			 
8c7c			; 
8c7c			; Multiply 8-bit value with a 16-bit value (unrolled) 
8c7c			; In: Multiply A with DE 
8c7c			; Out: HL = result 
8c7c			; 
8c7c			Mult12U: 
8c7c 2e 00		    ld l,0 
8c7e 87			    add a,a 
8c7f 30 01		    jr nc,Mult12U_NoAdd0 
8c81 19			    add hl,de 
8c82			Mult12U_NoAdd0: 
8c82 29			    add hl,hl 
8c83 87			    add a,a 
8c84 30 01		    jr nc,Mult12U_NoAdd1 
8c86 19			    add hl,de 
8c87			Mult12U_NoAdd1: 
8c87 29			    add hl,hl 
8c88 87			    add a,a 
8c89 30 01		    jr nc,Mult12U_NoAdd2 
8c8b 19			    add hl,de 
8c8c			Mult12U_NoAdd2: 
8c8c 29			    add hl,hl 
8c8d 87			    add a,a 
8c8e 30 01		    jr nc,Mult12U_NoAdd3 
8c90 19			    add hl,de 
8c91			Mult12U_NoAdd3: 
8c91 29			    add hl,hl 
8c92 87			    add a,a 
8c93 30 01		    jr nc,Mult12U_NoAdd4 
8c95 19			    add hl,de 
8c96			Mult12U_NoAdd4: 
8c96 29			    add hl,hl 
8c97 87			    add a,a 
8c98 30 01		    jr nc,Mult12U_NoAdd5 
8c9a 19			    add hl,de 
8c9b			Mult12U_NoAdd5: 
8c9b 29			    add hl,hl 
8c9c 87			    add a,a 
8c9d 30 01		    jr nc,Mult12U_NoAdd6 
8c9f 19			    add hl,de 
8ca0			Mult12U_NoAdd6: 
8ca0 29			    add hl,hl 
8ca1 87			    add a,a 
8ca2 d0			    ret nc 
8ca3 19			    add hl,de 
8ca4 c9			    ret 
8ca5			 
8ca5			; 
8ca5			; Multiply 8-bit value with a 16-bit value (right rotating) 
8ca5			; In: Multiply A with DE 
8ca5			;      Put lowest value in A for most efficient calculation 
8ca5			; Out: HL = result 
8ca5			; 
8ca5			Mult12R: 
8ca5 21 00 00		    ld hl,0 
8ca8			Mult12R_Loop: 
8ca8 cb 3f		    srl a 
8caa 30 01		    jr nc,Mult12R_NoAdd 
8cac 19			    add hl,de 
8cad			Mult12R_NoAdd: 
8cad cb 23		    sla e 
8caf cb 12		    rl d 
8cb1 b7			    or a 
8cb2 c2 a8 8c		    jp nz,Mult12R_Loop 
8cb5 c9			    ret 
8cb6			 
8cb6			; 
8cb6			; Multiply 16-bit values (with 32-bit result) 
8cb6			; In: Multiply BC with DE 
8cb6			; Out: BCHL = result 
8cb6			; 
8cb6			Mult32: 
8cb6 79			    ld a,c 
8cb7 48			    ld c,b 
8cb8 21 00 00		    ld hl,0 
8cbb 06 10		    ld b,16 
8cbd			Mult32_Loop: 
8cbd 29			    add hl,hl 
8cbe 17			    rla 
8cbf cb 11		    rl c 
8cc1 30 07		    jr nc,Mult32_NoAdd 
8cc3 19			    add hl,de 
8cc4 ce 00		    adc a,0 
8cc6 d2 ca 8c		    jp nc,Mult32_NoAdd 
8cc9 0c			    inc c 
8cca			Mult32_NoAdd: 
8cca 10 f1		    djnz Mult32_Loop 
8ccc 41			    ld b,c 
8ccd 4f			    ld c,a 
8cce c9			    ret 
8ccf			 
8ccf			 
8ccf			 
8ccf			; 
8ccf			; Multiply 8-bit values 
8ccf			; In:  Multiply H with E 
8ccf			; Out: HL = result 
8ccf			; 
8ccf			Mult8: 
8ccf 16 00		    ld d,0 
8cd1 6a			    ld l,d 
8cd2 06 08		    ld b,8 
8cd4			Mult8_Loop: 
8cd4 29			    add hl,hl 
8cd5 30 01		    jr nc,Mult8_NoAdd 
8cd7 19			    add hl,de 
8cd8			Mult8_NoAdd: 
8cd8 10 fa		    djnz Mult8_Loop 
8cda c9			    ret 
8cdb			 
8cdb			 
8cdb			 
8cdb			 
8cdb			 
8cdb			 
8cdb			 
8cdb			 
8cdb			;;http://z80-heaven.wikidot.com/math 
8cdb			;;This divides DE by BC, storing the result in DE, remainder in HL 
8cdb			; 
8cdb			;DE_Div_BC:          ;1281-2x, x is at most 16 
8cdb			;     ld a,16        ;7 
8cdb			;     ld hl,0        ;10 
8cdb			;     jp $+5         ;10 
8cdb			;.DivLoop: 
8cdb			;       add hl,bc    ;-- 
8cdb			;       dec a        ;64 
8cdb			;       jr z,.DivLoopEnd        ;86 
8cdb			; 
8cdb			;       sla e        ;128 
8cdb			;       rl d         ;128 
8cdb			;       adc hl,hl    ;240 
8cdb			;       sbc hl,bc    ;240 
8cdb			;       jr nc,.DivLoop ;23|21 
8cdb			;       inc e        ;-- 
8cdb			;       jp .DivLoop+1 
8cdb			; 
8cdb			;.DivLoopEnd: 
8cdb			 
8cdb			;HL_Div_C: 
8cdb			;Inputs: 
8cdb			;     HL is the numerator 
8cdb			;     C is the denominator 
8cdb			;Outputs: 
8cdb			;     A is the remainder 
8cdb			;     B is 0 
8cdb			;     C is not changed 
8cdb			;     DE is not changed 
8cdb			;     HL is the quotient 
8cdb			; 
8cdb			;       ld b,16 
8cdb			;       xor a 
8cdb			;         add hl,hl 
8cdb			;         rla 
8cdb			;         cp c 
8cdb			;         jr c,$+4 
8cdb			;           inc l 
8cdb			;           sub c 
8cdb			;         djnz $-7 
8cdb			 
8cdb			; https://plutiedev.com/z80-add-8bit-to-16bit 
8cdb			 
8cdb			addatohl: 
8cdb 85			    add   a, l    ; A = A+L 
8cdc 6f			    ld    l, a    ; L = A+L 
8cdd 8c			    adc   a, h    ; A = A+L+H+carry 
8cde 95			    sub   l       ; A = H+carry 
8cdf 67			    ld    h, a    ; H = H+carry 
8ce0 c9			ret 
8ce1			 
8ce1			addatode: 
8ce1 83			    add   a, e    ; A = A+L 
8ce2 5f			    ld    e, a    ; L = A+L 
8ce3 8a			    adc   a, d    ; A = A+L+H+carry 
8ce4 93			    sub   e       ; A = H+carry 
8ce5 57			    ld    d, a    ; H = H+carry 
8ce6 c9			ret 
8ce7			 
8ce7			 
8ce7			addatobc: 
8ce7 81			    add   a, c    ; A = A+L 
8ce8 4f			    ld    c, a    ; L = A+L 
8ce9 88			    adc   a, b    ; A = A+L+H+carry 
8cea 91			    sub   c       ; A = H+carry 
8ceb 47			    ld    b, a    ; H = H+carry 
8cec c9			ret 
8ced			 
8ced			subafromhl: 
8ced			   ; If A=0 do nothing 
8ced			    ; Otherwise flip A's sign. Since 
8ced			    ; the upper byte becomes -1, also 
8ced			    ; substract 1 from H. 
8ced ed 44		    neg 
8cef ca f8 8c		    jp    z, Skip 
8cf2 25			    dec   h 
8cf3			     
8cf3			    ; Now add the low byte as usual 
8cf3			    ; Two's complement takes care of 
8cf3			    ; ensuring the result is correct 
8cf3 85			    add   a, l 
8cf4 6f			    ld    l, a 
8cf5 8c			    adc   a, h 
8cf6 95			    sub   l 
8cf7 67			    ld    h, a 
8cf8			Skip: 
8cf8 c9				ret 
8cf9			 
8cf9			 
8cf9			; compare hl and de 
8cf9			; returns:  
8cf9			; if hl = de, z=1, s=0, c0=0 
8cf9			; if hl > de, z=0, s=0, c=0 
8cf9			; if hl < de, z=0, s=1, c=1 
8cf9			cmp16:	 
8cf9 b7				or a 
8cfa ed 52			sbc hl,de 
8cfc e0				ret po 
8cfd 7c				ld a,h 
8cfe 1f				rra 
8cff ee 40			xor 01000000B 
8d01 37				scf 
8d02 8f				adc a,a 
8d03 c9				ret 
8d04			 
8d04			 
8d04			; test if hl contains zero   - A is destroyed 
8d04			 
8d04			ishlzero:    
8d04 b7				or a     ; reset flags 
8d05 7c				ld a, h 
8d06 b5				or l        	 
8d07			 
8d07 c9				ret 
8d08			 
8d08			 
8d08			 
8d08			 
8d08			if FORTH_ENABLE_FLOATMATH 
8d08			;include "float/bbcmath.z80" 
8d08			include "float/lpfpcalc.asm" 
8d08			endif 
8d08			 
8d08			 
8d08			; eof 
8d08			 
# End of file firmware_maths.asm
8d08			include "firmware_strings.asm"   ; string handling  
8d08			 
8d08			 
8d08			; TODO string len 
8d08			; input text string, end on cr with zero term 
8d08			; a offset into frame buffer to start prompt 
8d08			; d is max length 
8d08			; e is display size TODO 
8d08			; c is current cursor position 
8d08			; hl is ptr to where string will be stored and edited directly 
8d08			 
8d08			 
8d08			; TODO check limit of buffer for new inserts 
8d08			; TODO check insert does not push beyond buffer 
8d08			; TODO scroll in a limited display area 
8d08			; TODO scroll whole screen on page wrap 
8d08			 
8d08			 
8d08			; TODO use LCD cursor? 
8d08			 
8d08			EDIT_V1: equ 0 
8d08			EDIT_V2: equ 1 
8d08			 
8d08			 
8d08			 
8d08			if EDIT_V2 
8d08			input_str: 
8d08			 
8d08 32 64 ee			    	ld (input_at_pos),a      ; save display position to start 
8d0b			;		ld (input_at_cursor),a	; save draw pos of cursor relative to start 
8d0b 22 67 ee				ld (input_start), hl     ; save ptr to buffer 
8d0e			;		ld a, c 
8d0e			;		call addatohl 
8d0e			;		ld (input_ptr), hl     ; save ptr to point under the cursor 
8d0e 7a					ld a,d 
8d0f 32 66 ee			        ld (input_size), a       ; save length of input area 
8d12 79					ld a, c 
8d13 32 55 ee				ld (input_cursor),a      ; init cursor start position relative to start of string 
8d16 7b					ld a,e 
8d17 32 65 ee			        ld (input_display_size), a       ; save length of input area that is displayed TODO 
8d1a			 
8d1a			 
8d1a					; add a trailing space to make screen refresh nicer 
8d1a			 
8d1a					;ld hl, (input_start) 
8d1a					;push hl 
8d1a					;ld a, 0 
8d1a					;call strlent 
8d1a					;ld a, l 
8d1a					;pop hl 
8d1a					;call addatohl 
8d1a					;dec hl 
8d1a					;ld a, ' ' 
8d1a					;ld (hl), a 
8d1a					;inc hl 
8d1a					;ld (hl), a 
8d1a					;inc hl 
8d1a					;ld a, 0 
8d1a					;ld (hl), a 
8d1a			 
8d1a			; TODO move out to cin as cursor shape is used by the 4x4 ??? 
8d1a					; init cursor shape if not set by the cin routines 
8d1a 21 c1 eb				ld hl, cursor_shape 
8d1d			if BASE_KEV 
8d1d					ld a, 255 
8d1d			else 
8d1d 3e 23				ld a, '#' 
8d1f			endif 
8d1f 77					ld (hl), a 
8d20 23					inc hl 
8d21 3e 00				ld a, 0 
8d23 77					ld (hl), a 
8d24			 
8d24 3e 09				ld a, CUR_BLINK_RATE 
8d26 32 60 ee				ld (input_cur_flash), a 
8d29 3e 01				ld a, 1 
8d2b 32 5f ee				ld (input_cur_onoff),a 
8d2e			.inmain:	 
8d2e			 
8d2e cd 56 8e				call input_disp_ref 
8d31			 
8d31					; save current length of string 
8d31			 
8d31 2a 67 ee				ld hl, (input_start) 
8d34 3e 00				ld a, 0 
8d36 cd 4c 90				call strlent 
8d39 7d					ld a,l 
8d3a 32 5a ee				ld (input_len), a 
8d3d			 
8d3d					;call input_disp_oncur 
8d3d			 
8d3d					; display current state of input buffer 
8d3d			 
8d3d					; clean any backspace chars 
8d3d			 
8d3d 3e 20				ld a, " " 
8d3f 32 c1 e2				ld (scratch),a 
8d42 3e 00				ld a, 0 
8d44 32 c2 e2				ld (scratch+1),a 
8d47 3a 64 ee				ld a,(input_at_pos) 
8d4a 85					add l 
8d4b 11 c1 e2				ld de, scratch 
8d4e cd c1 8a				call str_at_display 
8d51			 
8d51					; pause 1ms 
8d51			 
8d51 3e 01				ld a, 1 
8d53 cd d6 89				call aDelayInMS 
8d56			 
8d56			; display cursor if visible on this cycle 
8d56			 
8d56					; dec flash counter 
8d56 3a 60 ee				ld a, (input_cur_flash) 
8d59 3d					dec a 
8d5a 32 60 ee				ld (input_cur_flash), a 
8d5d fe 00				cp 0 
8d5f 20 0d				jr nz, .inochgstate 
8d61			 
8d61			 
8d61					; reset on change of state 
8d61 3e 09				ld a, CUR_BLINK_RATE 
8d63 32 60 ee				ld (input_cur_flash), a 
8d66			 
8d66					; change state 
8d66 3a 5f ee				ld a,(input_cur_onoff) 
8d69 ed 44				neg 
8d6b 32 5f ee				ld (input_cur_onoff),a 
8d6e			 
8d6e			 
8d6e			 
8d6e			 
8d6e					; TODO is cursor visible? 
8d6e					; TODO if so then over write the char at curspos pos with the cursor shape 
8d6e			 
8d6e								 
8d6e			 
8d6e			.inochgstate: 
8d6e 3a 5f ee				ld a,(input_cur_onoff) 
8d71 fe ff				cp 255 
8d73 28 0e				jr z, .skipcursor 
8d75 3a 64 ee				ld a, (input_at_pos) 
8d78 47					ld b, a 
8d79 3a 55 ee				ld a, (input_cursor) 
8d7c 80					add b 
8d7d 11 c1 eb				ld de, cursor_shape 
8d80					 
8d80 cd c1 8a				call str_at_display 
8d83			 
8d83			.skipcursor: 
8d83				if DEBUG_INPUTV2 
8d83			 
8d83					ld a,(input_at_pos) 
8d83					ld hl, LFSRSeed 
8d83					call hexout 
8d83					ld a, (input_cursor) 
8d83					ld hl, LFSRSeed+2 
8d83					call hexout 
8d83					ld a,(input_size) 
8d83					ld hl, LFSRSeed+4 
8d83					call hexout 
8d83			 
8d83					ld a,(input_cur_onoff) 
8d83					ld hl, LFSRSeed+6 
8d83					call hexout 
8d83			 
8d83					ld a,(input_cur_flash) 
8d83					ld hl, LFSRSeed+8 
8d83					call hexout 
8d83			 
8d83					ld a,(input_len) 
8d83					ld hl, LFSRSeed+10 
8d83					call hexout 
8d83					ld hl, LFSRSeed+12 
8d83					ld a, 0 
8d83					ld (hl),a 
8d83					ld a, display_row_4 
8d83					ld de, LFSRSeed 
8d83					call str_at_display 
8d83				endif 
8d83 cd d1 8a				call update_display 
8d86			 
8d86					; TODO keyboard processing 
8d86			 
8d86			if BASE_CPM 
8d86					call cin_wait 
8d86			else 
8d86 cd f4 dc				call cin    ; _wait 
8d89			endif 
8d89 fe 00				cp 0 
8d8b ca 2e 8d				jp z, .inmain 
8d8e			 
8d8e fe 0b				cp KEY_LEFT    ; cursor left 
8d90 ca 48 8e				jp z, input_left 
8d93				 
8d93 fe 0c				cp KEY_RIGHT      ; cursor right 
8d95 ca 4f 8e				jp z, input_right 
8d98			 
8d98 fe 0d				cp KEY_CR 
8d9a c8					ret z 
8d9b			 
8d9b fe 08				cp KEY_BS 
8d9d ca bd 8e				jp z, input_delchar 
8da0			 
8da0 fe 06				cp KEY_NEXTWORD 
8da2 ca c9 8d				jp z, input_nxtword 
8da5			 
8da5 fe 07				cp KEY_PREVWORD 
8da7 ca f0 8d				jp z, input_prvword 
8daa			 
8daa fe 0e				cp KEY_HOME    ; jump to start of line 
8dac 20 08				jr nz, .ikh 
8dae 3e 00				ld a, 0 
8db0 32 55 ee				ld (input_cursor), a 
8db3 ca 2e 8d				jp z, .inmain 
8db6			.ikh: 
8db6			 
8db6 fe 0f				cp KEY_END     ; jump to end of line 
8db8 20 09				jr nz, .ike 
8dba 3a 5a ee				ld a, (input_len) 
8dbd 32 55 ee				ld (input_cursor),a 
8dc0 ca 2e 8d				jp z, .inmain 
8dc3			.ike: 
8dc3 fe 05			        cp KEY_UP      ; recall last command 
8dc5 c8					ret z 
8dc6			;jr nz, .irec 
8dc6			; TODO next word 
8dc6			; TODO prev word 
8dc6			;  
8dc6			; 
8dc6			;	ld hl, scratch 
8dc6			;	ld de, os_last_cmd 
8dc6			;	call strcpy 
8dc6			;		jp  .inmain 
8dc6			.irec: 
8dc6			;		jr .instr1 
8dc6			 
8dc6			 
8dc6			 
8dc6					; if any keys not intercepted by above but are special keys like function keys then return them to the program 
8dc6			 
8dc6			; TODO return if any special keys are given 
8dc6			;		ld l, a 
8dc6			;		ld a, 28 ; KEY_F12   ; 27 
8dc6			;		sub l 
8dc6			;		ret m 
8dc6			;		ld a, l 
8dc6					; if no special key then insert as a char 
8dc6			 
8dc6 c3 8f 8e				jp input_inschr 
8dc9			 
8dc9				 
8dc9			input_nxtword: 
8dc9				; jump to start next word after the cursor 
8dc9			 
8dc9			.insknwn:	 
8dc9 cd 85 8e				call input_curptr	 
8dcc 7e					ld a,(hl)	 
8dcd fe 00				cp 0 
8dcf ca 2e 8d				jp z, .inmain    ; end of string 
8dd2			 
8dd2			; if we are on a word, then move off of it 
8dd2			 
8dd2 fe 20				cp ' ' 
8dd4 28 06				jr z, .inspace     ; we are on space so eat the space until we hit non-space 
8dd6 21 55 ee				ld hl, input_cursor 
8dd9 34					inc (hl) 
8dda 18 ed				jr .insknwn 
8ddc			 
8ddc			.inspace: 
8ddc			 
8ddc cd 85 8e				call input_curptr	 
8ddf 7e					ld a,(hl)	 
8de0 fe 00				cp 0 
8de2 ca 2e 8d				jp z, .inmain    ; end of string 
8de5			 
8de5			; if we are on a word, then move off of it 
8de5			 
8de5 fe 20				cp ' ' 
8de7 c2 2e 8d				jp nz, .inmain     ; we are on non space so at next word 
8dea 21 55 ee				ld hl, input_cursor 
8ded 34					inc (hl) 
8dee 18 ec				jr .inspace 
8df0			 
8df0			 
8df0			 
8df0			 
8df0			input_prvword: 
8df0				; jump to the start of previous word before the cursor 
8df0			 
8df0			; where are we to start with currently? 
8df0			 
8df0 cd 85 8e				call input_curptr	 
8df3 7e					ld a, (hl) 
8df4 fe 20				cp ' ' 
8df6 28 1d				jr z, .inspacep     ; we are on space so eat the space until we hit non-space 
8df8			 
8df8			 
8df8			 
8df8			.inskpwn:	 
8df8 3a 55 ee				ld a,(input_cursor) 
8dfb fe 00				cp 0 
8dfd ca 2e 8d				jp z, .inmain    ; start of string 
8e00			 
8e00			;if we are on a word, then move off of it 
8e00			 
8e00 cd 85 8e				call input_curptr	 
8e03 7e					ld a, (hl) 
8e04 fe 20				cp ' ' 
8e06 28 06				jr z, .iwstart     ; we are on space so eat the space until we hit non-space 
8e08					;jp z, .inmain    ; start of string 
8e08 21 55 ee				ld hl, input_cursor 
8e0b 35					dec (hl) 
8e0c 18 ea				jr .inskpwn 
8e0e			.iwstart: 
8e0e 21 55 ee				ld hl, input_cursor 
8e11 34					inc (hl) 
8e12 c3 2e 8d				jp .inmain 
8e15					 
8e15			 
8e15			.inspacep: 
8e15			 
8e15					;jp .inmain    ; start of string 
8e15			 
8e15			 
8e15			 
8e15 3a 55 ee				ld a,(input_cursor) 
8e18 fe 00				cp 0 
8e1a ca 2e 8d				jp z, .inmain    ; start of string 
8e1d			 
8e1d			; if we are on a word, then move off of it 
8e1d			 
8e1d cd 85 8e				call input_curptr	 
8e20 7e					ld a, (hl) 
8e21 fe 20				cp ' ' 
8e23 c2 2c 8e				jp nz, .incharp     ; we are on non space so at end of prev word 
8e26 21 55 ee				ld hl, input_cursor 
8e29 35					dec (hl) 
8e2a 18 e9				jr .inspacep 
8e2c			 
8e2c			 
8e2c			.incharp:	 
8e2c					; eat the word to get to the start 
8e2c 3a 55 ee				ld a,(input_cursor) 
8e2f fe 00				cp 0 
8e31 ca 2e 8d				jp z, .inmain    ; start of string 
8e34			 
8e34			; if we are on a word, then move off of it 
8e34			 
8e34 cd 85 8e				call input_curptr	 
8e37 7e					ld a, (hl) 
8e38 fe 20				cp ' ' 
8e3a 28 06				jr z, .ipwordst     ; we are on space so eat the space until we hit non-space 
8e3c 21 55 ee				ld hl, input_cursor 
8e3f 35					dec (hl) 
8e40 18 ea				jr .incharp 
8e42			.ipwordst: 
8e42					; at space before the prev word so reposition over it 
8e42 21 55 ee				ld hl, input_cursor 
8e45 34					inc (hl) 
8e46 18 b0				jr .inskpwn 
8e48					 
8e48			 
8e48			 
8e48			input_left: 
8e48				; move cursor left 
8e48 21 55 ee			ld hl, input_cursor 
8e4b 35				dec (hl) 
8e4c			;	cp 0 
8e4c			;	jp z, .inmain    ; ignore left as at the start of the string 
8e4c c3 2e 8d			jp .inmain 
8e4f			 
8e4f			input_right: 
8e4f				; move cursor right 
8e4f				 
8e4f				;ld a, (input_size) 
8e4f				;ld b, a 
8e4f 21 55 ee			ld hl, input_cursor 
8e52 34				inc (hl) 
8e53				;dec b 
8e53				;cp 0 
8e53				;jp z, .inmain   ; ignore as at end of the string buffer 
8e53				;ld a, b 
8e53				;inc a 
8e53				;ld (input_cursor), a 
8e53 c3 2e 8d			jp .inmain 
8e56			 
8e56			 
8e56			 
8e56			input_disp_ref: 
8e56				; display the text from start of buffer (ie full refresh) 
8e56 3a 64 ee			ld a, (input_at_pos) 
8e59 2a 67 ee			ld hl,(input_start) 
8e5c eb				ex de, hl 
8e5d cd c1 8a			call str_at_display  
8e60 c9				ret 
8e61			input_disp_oncur: 
8e61				; display the text from cursor position to end of buffer 
8e61				; TODO position start of string at cursor position on screen 
8e61				; TODO draw from that point on 
8e61 3a 55 ee			ld a, (input_cursor) 
8e64 47				ld b, a 
8e65 3a 64 ee			ld a, (input_at_pos) 
8e68 80				add b 
8e69 48				ld c, b     ; save a 
8e6a 78				ld a, b     ; inc string start for cursor 
8e6b 2a 67 ee			ld hl,(input_start) 
8e6e cd db 8c			call addatohl 
8e71 eb				ex de, hl 
8e72 79				ld a, c 
8e73 cd c1 8a			call str_at_display  
8e76 c9				ret 
8e77			 
8e77			input_nxtw: 
8e77				; Find next word 
8e77 c9				ret 
8e78			 
8e78			input_prvw: 
8e78				; Find previous word 
8e78 c9				ret 
8e79			 
8e79			input_lenrem:   
8e79				; Calculate the length of string remaining from current cursor 
8e79				; position to end of buffer (exc null term) 
8e79				 
8e79 3a 55 ee			ld a, (input_cursor) 
8e7c 4f				ld c, a 
8e7d 3a 66 ee			ld a, (input_size) 
8e80 91				sub c 
8e81 06 00			ld b, 0 
8e83 0d				dec c 
8e84 c9				ret	 
8e85			 
8e85			input_curptr: 
8e85				; calc address of the character under the cursor 
8e85				 
8e85 2a 67 ee			ld hl, (input_start) 
8e88 3a 55 ee			ld a, (input_cursor) 
8e8b cd db 8c			call addatohl 
8e8e c9				ret 
8e8f			 
8e8f			input_inschr: 
8e8f				; Insert char at cursor position 
8e8f f5				push af   ; save char 
8e90				;call input_lenrem    ; get bc length of remaining string 
8e90			 
8e90				 
8e90 cd 85 8e			call input_curptr 
8e93			;	ld hl, (input_start) 
8e93			;	ld a, (input_cursor) 
8e93			;	call addatohl 
8e93				;push hl   ; save to come back to 
8e93			 
8e93				; shift everything up one to end of buffer 
8e93			 
8e93				;push hl 
8e93				;dec de 
8e93				;inc de 
8e93			;	ldir 
8e93				 
8e93				;pop hl 
8e93			 
8e93				; are we adding to the end of line? 
8e93			 
8e93 3a 55 ee			ld a, (input_cursor) 
8e96 47				ld b, a 
8e97 3a 5a ee			ld a, (input_len) 
8e9a b8				cp b 
8e9b 20 09			jr nz, .insmid   ; no, insert in middle of text 
8e9d			 
8e9d				; tack on the end of the line 
8e9d f1				pop af 
8e9e 77				ld (hl), a   ; save new char 
8e9f 23				inc hl 
8ea0 3e 00			ld a, 0 
8ea2 77				ld (hl), a 
8ea3 c3 4f 8e			jp input_right 
8ea6				 
8ea6			.insmid: 
8ea6				; hl has insertion point so move everything up one to allow for insertion 
8ea6				;call input_shiftright 
8ea6 f1				pop af 
8ea7			 
8ea7			.shufinsmid: 
8ea7 47				ld b, a     ; b contains new char, c prev char at this position  
8ea8 7e				ld a, (hl) 
8ea9			 
8ea9 fe 00			cp 0    ; at end of string need to then dump new char and add term 
8eab 28 07			jr z, .endinsmid 
8ead 4f				ld c, a 
8eae 78				ld a, b 
8eaf 77				ld (hl), a 
8eb0 23				inc hl 
8eb1 79				ld a, c 
8eb2 18 f3			jr .shufinsmid 
8eb4				 
8eb4			 
8eb4			 
8eb4			 
8eb4			.endinsmid: 
8eb4 78				ld a, b 
8eb5 77				ld (hl), a 
8eb6 23				inc hl 
8eb7 3e 00			ld a, 0 
8eb9 77				ld (hl), a 
8eba			 
8eba			 
8eba			;	ld (hl), a   ; save new char 
8eba			 
8eba c3 4f 8e			jp input_right 
8ebd			 
8ebd			;input_shiftright: 
8ebd			;	; shift text right at cursor, hl has shift start 
8ebd			;	push hl 
8ebd			;	push de 
8ebd			;	push bc 
8ebd			; 
8ebd			; 
8ebd			;	; move to end of string past zero term 
8ebd			;	ld hl,(input_start) 
8ebd			;	ld a, (input_len) 
8ebd			;	call addatohl 
8ebd			;	inc hl 
8ebd			;;	inc hl 
8ebd			;;	inc hl 
8ebd			;	ld a, 0 
8ebd			;	ld (hl), a 
8ebd			;;	dec hl 
8ebd			;	 
8ebd			;;	ld (hl), a 
8ebd			;;	dec hl 
8ebd			; 
8ebd			;	push hl 
8ebd			;	pop de 
8ebd			;	inc de 
8ebd			;	 
8ebd			; 
8ebd			;;	ld hl,(input_start) 
8ebd			;;	ld a, (input_cursor) 
8ebd			;;	call addatohl 
8ebd			; 
8ebd			; 
8ebd			;	; calc how many bytes from cursor pos to end of string we need to shift 
8ebd			;	call input_lenrem    ; get bc length of remaining string 
8ebd			;	;ld a, (input_cursor) 
8ebd			;	;ld c, a 
8ebd			;	ld a, (input_len) 
8ebd			;	cp 2 
8ebd			;	jr z, .iskipzero	 
8ebd			;	;sub c 
8ebd			;	;inc a 
8ebd			;	;ld c, a 
8ebd			;	;ld b, 0 
8ebd			;	inc c 
8ebd			;	inc c 
8ebd			;	; move data 
8ebd			;	lddr 
8ebd			;.iskipzero: 
8ebd			; 
8ebd			;	pop bc 
8ebd			;	pop de 
8ebd			;	pop hl 
8ebd			;	ret	 
8ebd			 
8ebd			input_delchar: 
8ebd				; Delete char at cursor position 
8ebd cd 79 8e			call input_lenrem    ; get bc length of remaining string 
8ec0 2a 67 ee			ld hl, (input_start) 
8ec3 3a 55 ee			ld a, (input_cursor) 
8ec6 cd db 8c			call addatohl 
8ec9			 
8ec9 e5				push hl 
8eca d1				pop de 
8ecb 1b				dec de 
8ecc			 
8ecc			.dl:	 
8ecc ed a0			ldi  
8ece 7e				ld a, (hl) 
8ecf fe 00			cp 0 
8ed1 28 02			jr z, .dldone 
8ed3 18 f7			jr .dl 
8ed5			.dldone: 
8ed5 ed a0			ldi 
8ed7			 
8ed7 c3 48 8e			jp input_left 
8eda			 
8eda			 
8eda			endif 
8eda			 
8eda			 
8eda			 
8eda			if EDIT_V1 
8eda			input_str: 
8eda			 
8eda				    	ld (input_at_pos),a      ; save display position to start 
8eda					add c 
8eda					ld (input_at_cursor),a	; save draw pos of cursor 
8eda					ld (input_start), hl     ; save ptr to buffer 
8eda					ld a, c 
8eda					call addatohl 
8eda					ld (input_ptr), hl     ; save ptr to point under the cursor 
8eda					ld a,d 
8eda				        ld (input_size), a       ; save length of input area 
8eda					ld a, c 
8eda					ld (input_cursor),a      ; init cursor start position  
8eda					ld a,e 
8eda				        ld (input_display_size), a       ; save length of input area that is displayed TODO 
8eda					 
8eda					 
8eda			 
8eda			;		ld a,(input_ptr) 
8eda			;		ld (input_under_cursor),a 	; save what is under the cursor 
8eda			 
8eda			; TODO move out to cin as cursor shape is used by the 4x4 ??? 
8eda					; init cursor shape if not set by the cin routines 
8eda					ld hl, cursor_shape 
8eda			if BASE_KEV 
8eda					ld a, 255 
8eda			else 
8eda					ld a, '#' 
8eda			endif 
8eda					ld (hl), a 
8eda					inc hl 
8eda					ld a, 0 
8eda					ld (hl), a 
8eda			 
8eda					ld a, CUR_BLINK_RATE 
8eda					ld (input_cur_flash), a 
8eda					ld a, 1 
8eda					ld (input_cur_onoff),a 
8eda			 
8eda			;	if DEBUG_INPUT 
8eda			;		push af 
8eda			;		ld a, 'I' 
8eda			;		ld (debug_mark),a 
8eda			;		pop af 
8eda			;		CALLMONITOR 
8eda			;	endif 
8eda			.is1:		; main entry loop 
8eda			 
8eda			 
8eda			 
8eda					; pause 1ms 
8eda			 
8eda					ld a, 1 
8eda					call aDelayInMS 
8eda			 
8eda					; dec flash counter 
8eda					ld a, (input_cur_flash) 
8eda					dec a 
8eda					ld (input_cur_flash), a 
8eda					cp 0 
8eda					jr nz, .nochgstate 
8eda			 
8eda			 
8eda					; change state 
8eda					ld a,(input_cur_onoff) 
8eda					neg 
8eda					ld (input_cur_onoff),a 
8eda			 
8eda			 
8eda					; reset on change of state 
8eda					ld a, CUR_BLINK_RATE 
8eda					ld (input_cur_flash), a 
8eda			 
8eda			.nochgstate: 
8eda					 
8eda					 
8eda			 
8eda					; display cursor  
8eda			 
8eda			;		ld hl, (input_start) 
8eda			;		ld a, (input_cursor) 
8eda			;		call addatohl 
8eda			 
8eda					; get char under cursor and replace with cursor 
8eda			ld hl, (input_ptr) 
8eda			;		ld a, (hl) 
8eda			;		ld (input_under_cursor),a 
8eda			;		ld a, '_' 
8eda			;		ld (hl), a 
8eda			 
8eda					; display string 
8eda			 
8eda					ld de, (input_start) 
8eda					ld a, (input_at_pos) 
8eda					call str_at_display 
8eda			;	        call update_display 
8eda			 
8eda					; find place to put the cursor 
8eda			;		add h 
8eda			;		ld l, display_row_1 
8eda			;		sub l 
8eda			; (input_at_pos) 
8eda					;ld c, a 
8eda			;		ld a, (input_cursor) 
8eda			;		ld l, (input_at_pos) 
8eda			;		;ld b, h 
8eda			;		add l 
8eda			;		ld (input_at_cursor),a 
8eda					;ld l,h 
8eda			 
8eda			;		ld h, 0 
8eda			;		ld l,(input_at_pos) 
8eda			;		ld a, (input_cursor) 
8eda			;		call addatohl 
8eda			;		ld a, 074H-19			; TODO BUG I dont know why offset is showing 74H 
8eda			;		call subafromhl 
8eda			;		ld a,l 
8eda			;		ld (input_at_cursor), a 
8eda			 
8eda				if DEBUG_INPUT 
8eda					ld a, (hardware_diag) 
8eda					cp 0 
8eda					jr z, .skip_input_diag 
8eda			 
8eda					ld a,(input_at_pos) 
8eda					ld hl, LFSRSeed 
8eda					call hexout 
8eda					ld a, (input_cursor) 
8eda					ld hl, LFSRSeed+2 
8eda					call hexout 
8eda					ld a,(input_at_cursor) 
8eda					ld hl, LFSRSeed+4 
8eda					call hexout 
8eda			 
8eda					ld a,(input_cur_onoff) 
8eda					ld hl, LFSRSeed+6 
8eda					call hexout 
8eda			 
8eda					ld a,(input_cur_flash) 
8eda					ld hl, LFSRSeed+8 
8eda					call hexout 
8eda			 
8eda					ld a,(input_len) 
8eda					ld hl, LFSRSeed+10 
8eda					call hexout 
8eda					ld hl, LFSRSeed+12 
8eda					ld a, 0 
8eda					ld (hl),a 
8eda					ld a, display_row_4 
8eda					ld de, LFSRSeed 
8eda					call str_at_display 
8eda					.skip_input_diag: 
8eda				endif 
8eda			 
8eda					; decide on if we are showing the cursor this time round 
8eda			 
8eda					ld a, (input_cur_onoff) 
8eda					cp 255 
8eda					jr z, .skipcur 
8eda			 
8eda			 
8eda					ld a,(input_at_cursor) 
8eda					ld de, cursor_shape 
8eda					call str_at_display 
8eda			 
8eda					; save length of current input string 
8eda					ld hl, (input_start) 
8eda					ld a, 0 
8eda					call strlent 
8eda					ld a,l 
8eda					ld (input_len),a 
8eda			 
8eda			.skipcur: 
8eda			 
8eda				        call update_display 
8eda					 
8eda			 
8eda			 
8eda					; wait 
8eda				 
8eda					; TODO loop without wait to flash the cursor and char under cursor	 
8eda					call cin    ; _wait 
8eda			 
8eda					cp 0 
8eda					jp z, .is1 
8eda			 
8eda					; get ptr to char to input into 
8eda			 
8eda					ld c,a 
8eda					ld hl, (input_start) 
8eda					ld a, (input_cursor) 
8eda					call addatohl 
8eda					ld (input_ptr), hl 
8eda					ld a,c 
8eda			 
8eda					; replace char under cursor 
8eda			 
8eda			;		ld hl, (input_ptr) 
8eda			;		ld a, (input_under_cursor) 	; get what is under the cursor 
8eda			;		ld (hl), a 
8eda			 
8eda			;	if DEBUG_INPUT 
8eda			;		push af 
8eda			;		ld a, 'i' 
8eda			;		ld (debug_mark),a 
8eda			;		pop af 
8eda			;		CALLMONITOR 
8eda			;	endif 
8eda					cp KEY_HOME 
8eda					jr nz, .iske 
8eda			 
8eda					ld a, (input_at_pos) 
8eda					ld (input_at_cursor),a 
8eda					ld a, 0 
8eda					ld (input_cursor), a 
8eda					jp .is1 
8eda					 
8eda			.iske:		cp KEY_END 
8eda					jr nz, .isknw 
8eda					jp .is1 
8eda			 
8eda			.isknw:		cp KEY_NEXTWORD 
8eda					jr nz, .iskpw 
8eda			 
8eda			.isknwm:	ld hl, (input_ptr) 
8eda					ld a,(hl)	 
8eda					cp 0 
8eda					jp z, .is1    ; end of string 
8eda					cp ' ' 
8eda					jp z, .is1    ; end of word 
8eda					inc hl 
8eda					ld (input_ptr), hl 
8eda					ld a, (input_at_cursor) 
8eda					inc a 
8eda					ld (input_at_cursor), a 
8eda					jr .isknwm 
8eda			 
8eda			.iskpw:		cp KEY_PREVWORD 
8eda					jr nz, .iskl 
8eda			.iskpwm:	 
8eda					ld hl, (input_ptr) 
8eda					ld a,(hl)	 
8eda					cp 0  
8eda					jp z, .is1    ; end of string 
8eda					cp ' ' 
8eda					jp z, .is1    ; end of word 
8eda					dec hl 
8eda					ld (input_ptr), hl 
8eda					ld a, (input_at_cursor) 
8eda					dec a 
8eda					ld (input_at_cursor), a 
8eda					jr .iskpwm 
8eda			 
8eda			 
8eda			.iskl:		cp KEY_LEFT 
8eda					jr nz, .isk1 
8eda			 
8eda					ld a, (input_cursor) 
8eda			 
8eda					cp 0 
8eda					jp z, .is1 		; at start of line to ignore  
8eda			 
8eda					dec  a 		; TODO check underflow 
8eda					ld (input_cursor), a 
8eda			 
8eda					ld hl, (input_ptr) 
8eda					dec hl 
8eda					ld (input_ptr), hl 
8eda					 
8eda					ld a, (input_at_cursor) 
8eda					dec a 
8eda					ld (input_at_cursor), a 
8eda			 
8eda					ld a, 1		; show cursor moving 
8eda					ld (input_cur_onoff),a 
8eda					ld a, CUR_BLINK_RATE 
8eda					ld (input_cur_flash), a 
8eda			 
8eda					jp .is1 
8eda			 
8eda			.isk1:		cp KEY_RIGHT 
8eda					jr nz, .isk2 
8eda			 
8eda					ld a,(input_len)		; TODO BUG why cant i load e direct? 
8eda					ld e,a 
8eda					ld a, (input_cursor) 
8eda					cp e 
8eda					jp z, .is1		; at the end of string so dont go right 
8eda			 
8eda					inc  a 		; TODO check overflow 
8eda					ld (input_cursor), a 
8eda			 
8eda					ld a, (input_at_cursor) 
8eda					inc a 
8eda					ld (input_at_cursor), a 
8eda			 
8eda					ld hl, (input_ptr) 
8eda					inc hl 
8eda					ld (input_ptr), hl 
8eda			 
8eda					ld a, 1		; show cursor moving 
8eda					ld (input_cur_onoff),a 
8eda					ld a, CUR_BLINK_RATE 
8eda					ld (input_cur_flash), a 
8eda			 
8eda					jp .is1 
8eda			 
8eda			.isk2:		cp KEY_UP 
8eda			 
8eda					jr nz, .isk3 
8eda			 
8eda					; swap last command with the current on 
8eda			 
8eda					; move cursor to start of string 
8eda					ld hl, (input_start) 
8eda					ld (input_ptr), hl 
8eda			 
8eda					ld a, (input_at_pos) 
8eda					ld (input_at_cursor), a 
8eda			 
8eda					ld a, 0 
8eda					ld (input_cursor), a 
8eda					 
8eda					; swap input and last command buffers 
8eda			 
8eda					ld hl, os_cli_cmd 
8eda					ld de, os_last_cmd 
8eda					ld b, 255 
8eda			.swap1:		ld a, (hl) 
8eda					ld c,a 
8eda					ld a, (de) 
8eda					ld (hl), a 
8eda					ld a,c 
8eda					ld (de),a 
8eda					inc hl 
8eda					inc de 
8eda					djnz .swap1 
8eda			 
8eda			 
8eda			 
8eda			 
8eda			 
8eda					jp .is1 
8eda			 
8eda			.isk3:		cp KEY_BS 
8eda					jr nz, .isk4 
8eda			 
8eda					ld a, (input_cursor) 
8eda			 
8eda					cp 0 
8eda					jp z, .is1 		; at start of line to ignore  
8eda			 
8eda					dec  a 		; TODO check underflow 
8eda					ld (input_cursor), a 
8eda			 
8eda					; hl is source 
8eda					; de needs to be source - 1 
8eda			 
8eda			;		ld a, 0 
8eda			;		dec hl 
8eda			;		ld (hl), a 
8eda			 
8eda					ld hl, (input_ptr) 
8eda					dec hl 
8eda					ld (input_ptr), hl 
8eda			 
8eda					; shift all data 
8eda			 
8eda					push hl 
8eda					inc hl 
8eda					pop de 
8eda					ld a, (input_len)		; TODO BUG WAS ld c, (input... 
8eda					ld c,a 
8eda					ld b,0 
8eda					ldir  
8eda			 
8eda			 
8eda			 
8eda			 
8eda					ld a, (input_at_cursor) 
8eda					dec a 
8eda					ld (input_at_cursor), a 
8eda			 
8eda			 
8eda					ld a, 1		; show cursor moving 
8eda					ld (input_cur_onoff),a 
8eda					ld a, CUR_BLINK_RATE 
8eda					ld (input_cur_flash), a 
8eda			 
8eda					; remove char 
8eda					ld a, (input_at_cursor) 
8eda					inc a 
8eda					ld de,.iblank 
8eda					call str_at_display 
8eda			 
8eda					jp .is1 
8eda			 
8eda			.isk4:		cp KEY_CR 
8eda					jr z, .endinput 
8eda			 
8eda					; else add the key press to the end 
8eda			 
8eda					ld c, a			; save key pressed 
8eda			 
8eda					ld a,(hl)		; get what is currently under char 
8eda			 
8eda					cp 0			; we are at the end of the string 
8eda					jr nz, .onchar 
8eda					 
8eda					; add a char to the end of the string 
8eda				 
8eda					ld (hl),c 
8eda					inc hl 
8eda			;		ld a,' ' 
8eda			;		ld (hl),a 
8eda			;		inc hl 
8eda					ld a,0 
8eda					ld (hl),a 
8eda					dec hl 
8eda			 
8eda					ld a, (input_cursor) 
8eda					inc a				; TODO check max string length and scroll  
8eda					ld (input_cursor), a		; inc cursor pos 
8eda							 
8eda					ld a, (input_at_cursor) 
8eda					inc a 
8eda					ld (input_at_cursor), a 
8eda			 
8eda					ld hl, (input_ptr) 
8eda					inc hl 
8eda					ld (input_ptr), hl 
8eda			 
8eda					ld hl, (input_ptr) 
8eda					inc hl 
8eda					ld (input_ptr), hl 
8eda			;	if DEBUG_INPUT 
8eda			;		push af 
8eda			;		ld a, '+' 
8eda			;		ld (debug_mark),a 
8eda			;		pop af 
8eda			;		CALLMONITOR 
8eda			;	endif 
8eda					ld a, 1		; show cursor moving 
8eda					ld (input_cur_onoff),a 
8eda					ld a, CUR_BLINK_RATE 
8eda					ld (input_cur_flash), a 
8eda					jp .is1 
8eda					 
8eda			 
8eda			 
8eda					; if on a char then insert 
8eda			.onchar: 
8eda			 
8eda					; TODO over flow check: make sure insert does not blow out buffer 
8eda			 
8eda					; need to do some maths to use lddr 
8eda			 
8eda					push hl   ; save char pos 
8eda					push bc 
8eda			 
8eda					ld hl, (input_start) 
8eda					ld a, (input_len) 
8eda					call addatohl  		; end of string 
8eda					inc hl 
8eda					inc hl		; past zero term 
8eda					push hl 
8eda					inc hl 
8eda					push hl  
8eda			 
8eda								; start and end of lddr set, now how much to move? 
8eda			 
8eda							 
8eda					ld a, (input_cursor)		; BUG TODO why cant i load directly into b??? 
8eda					ld b,a 
8eda					ld a,(input_len) 
8eda					ld e,a 
8eda					sub b 
8eda					inc a		;?? 
8eda					inc a		;?? 
8eda					inc a		;?? 
8eda			 
8eda					ld b,0 
8eda					ld c,a 
8eda			 
8eda				if DEBUG_INPUT 
8eda					push af 
8eda					ld a, 'i' 
8eda					ld (debug_mark),a 
8eda					pop af 
8eda			;		CALLMONITOR 
8eda				endif 
8eda					pop de 
8eda					pop hl 
8eda				if DEBUG_INPUT 
8eda					push af 
8eda					ld a, 'I' 
8eda					ld (debug_mark),a 
8eda					pop af 
8eda			;		CALLMONITOR 
8eda				endif 
8eda					lddr 
8eda				 
8eda			 
8eda			 
8eda					; TODO have a key for insert/overwrite mode???? 
8eda					pop bc 
8eda					pop hl 
8eda					ld (hl), c		; otherwise overwrite current char 
8eda					 
8eda			 
8eda			 
8eda			 
8eda					ld a, (input_cursor) 
8eda					inc  a 		; TODO check overflow 
8eda					ld (input_cursor), a 
8eda			 
8eda					ld a, (input_at_cursor) 
8eda					inc a 
8eda					ld (input_at_cursor), a 
8eda			 
8eda					jp .is1 
8eda			 
8eda			.endinput:	; TODO look for end of string 
8eda			 
8eda					; add trailing space for end of token 
8eda			 
8eda					ld hl, (input_start) 
8eda					ld a,(input_len) 
8eda					call addatohl 
8eda					ld a, ' ' 
8eda					ld (hl),a 
8eda					; TODO eof of parse marker 
8eda			 
8eda					inc hl 
8eda					ld a, 0 
8eda					ld (hl),a 
8eda			 
8eda			 
8eda					ret 
8eda			 
8eda			.iblank: db " ",0 
8eda			 
8eda			 
8eda			input_str_prev:	ld (input_at_pos), a 
8eda					ld (input_start), hl 
8eda					ld a,1			; add cursor 
8eda					ld (hl),a 
8eda					inc hl 
8eda					ld a,0 
8eda					ld (hl),a 
8eda					ld (input_ptr), hl 
8eda					ld a,d 
8eda					ld (input_size), a 
8eda					ld a,0 
8eda					ld (input_cursor),a 
8eda			.instr1:	 
8eda			 
8eda					; TODO do block cursor 
8eda					; TODO switch cursor depending on the modifer key 
8eda			 
8eda					; update cursor shape change on key hold 
8eda			 
8eda					ld hl, (input_ptr) 
8eda					dec hl 
8eda					ld a,(cursor_shape) 
8eda					ld (hl), a 
8eda			 
8eda					; display entered text 
8eda					ld a,(input_at_pos) 
8eda			            	CALL fLCD_Pos       ;Position cursor to location in A 
8eda			            	LD   de, (input_start) 
8eda			            	CALL fLCD_Str       ;Display string pointed to by DE 
8eda			 
8eda					call cin 
8eda					cp 0 
8eda					jr z, .instr1 
8eda			 
8eda					; proecess keyboard controls first 
8eda			 
8eda					ld hl,(input_ptr) 
8eda			 
8eda					cp KEY_CR	 ; pressing enter ends input 
8eda					jr z, .instrcr 
8eda			 
8eda					cp KEY_BS 	; back space 
8eda					jr nz, .instr2 
8eda					; process back space 
8eda			 
8eda					; TODO stop back space if at start of string 
8eda					dec hl 
8eda					dec hl ; to over write cursor 
8eda					ld a,(cursor_shape) 
8eda					;ld a,0 
8eda					ld (hl),a 
8eda					inc hl 
8eda					ld a," " 
8eda					ld (hl),a 
8eda					ld (input_ptr),hl 
8eda					 
8eda			 
8eda					jr .instr1 
8eda			 
8eda			.instr2:	cp KEY_LEFT    ; cursor left 
8eda					jr nz, .instr3 
8eda					dec hl 
8eda					ld (input_ptr),hl 
8eda					jr .instr1 
8eda				 
8eda			.instr3:	cp KEY_RIGHT      ; cursor right 
8eda					jr nz, .instr4 
8eda					inc hl 
8eda					ld (input_ptr),hl 
8eda					jr .instr1 
8eda			 
8eda			.instr4:	cp KEY_HOME    ; jump to start of line 
8eda					jr nz, .instr5 
8eda					dec hl 
8eda					ld (input_ptr),hl 
8eda					jr .instr1 
8eda			 
8eda			.instr5:	cp KEY_END     ; jump to end of line 
8eda					jr nz, .instr6 
8eda					dec hl 
8eda					ld (input_ptr),hl 
8eda					jr .instr1 
8eda			.instr6:        cp KEY_UP      ; recall last command 
8eda					jr nz, .instrnew 
8eda			 
8eda				ld hl, scratch 
8eda				ld de, os_last_cmd 
8eda				call strcpy 
8eda					jr .instr1 
8eda			 
8eda			 
8eda			.instrnew:	; no special key pressed to see if we have room to store it 
8eda			 
8eda					; TODO do string size test 
8eda			 
8eda					dec hl ; to over write cursor 
8eda					ld (hl),a 
8eda					inc hl 
8eda					ld a,(cursor_shape) 
8eda					ld (hl),a 
8eda					inc hl 
8eda					ld a,0 
8eda					ld (hl),a 
8eda			 
8eda					ld (input_ptr),hl 
8eda					 
8eda					jr .instr1 
8eda			.instrcr:	dec hl		; remove cursor 
8eda					ld a,' '	; TODO add a trailing space for safety 
8eda					ld (hl),a 
8eda					inc hl 
8eda					ld a,0 
8eda					ld (hl),a 
8eda			 
8eda			 
8eda					; if at end of line scroll up    
8eda					; TODO detecting only end of line 4 for scroll up  
8eda			 
8eda					;ld   
8eda			 
8eda					ret 
8eda			 
8eda			 
8eda			endif 
8eda			; strcpy hl = dest, de source 
8eda			 
8eda 1a			strcpy:   LD   A, (DE)        ;Get character from string 
8edb b7			            OR   A              ;Null terminator? 
8edc c8			            RET  Z              ;Yes, so finished 
8edd 1a					ld a,(de) 
8ede 77					ld (hl),a 
8edf 13			            INC  DE             ;Point to next character 
8ee0 23					inc hl 
8ee1 18 f7		            JR   strcpy       ;Repeat 
8ee3 c9					ret 
8ee4			 
8ee4			 
8ee4			; TODO string_at  
8ee4			; pass string which starts with lcd offset address and then null term string 
8ee4			 
8ee4			; TODO string to dec 
8ee4			; TODO string to hex 
8ee4			; TODO byte to string hex 
8ee4			; TODO byte to string dec 
8ee4			 
8ee4			 
8ee4			 
8ee4			; from z80uartmonitor 
8ee4			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
8ee4			; OUTPUT VALUE OF A IN HEX ONE NYBBLE AT A TIME 
8ee4			; pass hl for where to put the text 
8ee4			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
8ee4 c5			hexout:	PUSH BC 
8ee5 f5					PUSH AF 
8ee6 47					LD B, A 
8ee7					; Upper nybble 
8ee7 cb 3f				SRL A 
8ee9 cb 3f				SRL A 
8eeb cb 3f				SRL A 
8eed cb 3f				SRL A 
8eef cd ff 8e				CALL tohex 
8ef2 77					ld (hl),a 
8ef3 23					inc hl	 
8ef4					 
8ef4					; Lower nybble 
8ef4 78					LD A, B 
8ef5 e6 0f				AND 0FH 
8ef7 cd ff 8e				CALL tohex 
8efa 77					ld (hl),a 
8efb 23					inc hl	 
8efc					 
8efc f1					POP AF 
8efd c1					POP BC 
8efe c9					RET 
8eff					 
8eff			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
8eff			; TRANSLATE value in lower A TO 2 HEX CHAR CODES FOR DISPLAY 
8eff			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
8eff			tohex: 
8eff e5					PUSH HL 
8f00 d5					PUSH DE 
8f01 16 00				LD D, 0 
8f03 5f					LD E, A 
8f04 21 0c 8f				LD HL, .DATA 
8f07 19					ADD HL, DE 
8f08 7e					LD A, (HL) 
8f09 d1					POP DE 
8f0a e1					POP HL 
8f0b c9					RET 
8f0c			 
8f0c			.DATA: 
8f0c 30					DEFB	30h	; 0 
8f0d 31					DEFB	31h	; 1 
8f0e 32					DEFB	32h	; 2 
8f0f 33					DEFB	33h	; 3 
8f10 34					DEFB	34h	; 4 
8f11 35					DEFB	35h	; 5 
8f12 36					DEFB	36h	; 6 
8f13 37					DEFB	37h	; 7 
8f14 38					DEFB	38h	; 8 
8f15 39					DEFB	39h	; 9 
8f16 41					DEFB	41h	; A 
8f17 42					DEFB	42h	; B 
8f18 43					DEFB	43h	; C 
8f19 44					DEFB	44h	; D 
8f1a 45					DEFB	45h	; E 
8f1b 46					DEFB	46h	; F 
8f1c			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
8f1c			;; 	ASCII char code for 0-9,A-F in A to single hex digit 
8f1c			;;    subtract $30, if result > 9 then subtract $7 more 
8f1c			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
8f1c			atohex: 
8f1c d6 30				SUB $30 
8f1e fe 0a				CP 10 
8f20 f8					RET M		; If result negative it was 0-9 so we're done 
8f21 d6 07				SUB $7		; otherwise, subtract $7 more to get to $0A-$0F 
8f23 c9					RET		 
8f24			 
8f24			 
8f24			 
8f24			 
8f24			; Get 2 ASCII characters as hex byte from pointer in hl 
8f24			 
8f24			BYTERD: 
8f24 16 00			LD	D,00h		;Set up 
8f26 cd 2e 8f			CALL	HEXCON		;Get byte and convert to hex 
8f29 87				ADD	A,A		;First nibble so 
8f2a 87				ADD	A,A		;multiply by 16 
8f2b 87				ADD	A,A		; 
8f2c 87				ADD	A,A		; 
8f2d 57				LD	D,A		;Save hi nibble in D 
8f2e			HEXCON: 
8f2e 7e				ld a, (hl)		;Get next chr 
8f2f 23				inc hl 
8f30 d6 30			SUB	030h		;Makes '0'-'9' equal 0-9 
8f32 fe 0a			CP	00Ah		;Is it 0-9 ? 
8f34 38 02			JR	C,NALPHA	;If so miss next bit 
8f36 d6 07			SUB	007h		;Else convert alpha 
8f38			NALPHA: 
8f38 b2				OR	D		;Add hi nibble back 
8f39 c9				RET			; 
8f3a			 
8f3a			 
8f3a			; 
8f3a			; Get a word (16 bit) in hexadecimal notation. The result is returned in HL. 
8f3a			; Since the routines get_byte and therefore get_nibble are called, only valid 
8f3a			; characters (0-9a-f) are accepted. 
8f3a			; 
8f3a			;get_word        push    af 
8f3a			;                call    get_byte        ; Get the upper byte 
8f3a			;                ld      h, a 
8f3a			;                call    get_byte        ; Get the lower byte 
8f3a			;                ld      l, a 
8f3a			;                pop     af 
8f3a			;                ret 
8f3a			; 
8f3a			; Get a byte in hexadecimal notation. The result is returned in A. Since 
8f3a			; the routine get_nibble is used only valid characters are accepted - the  
8f3a			; input routine only accepts characters 0-9a-f. 
8f3a			; 
8f3a c5			get_byte:        push    bc              ; Save contents of B (and C) 
8f3b 7e					ld a,(hl) 
8f3c 23					inc hl 
8f3d cd 62 8f		                call    nibble2val      ; Get upper nibble 
8f40 cb 07		                rlc     a 
8f42 cb 07		                rlc     a 
8f44 cb 07		                rlc     a 
8f46 cb 07		                rlc     a 
8f48 47			                ld      b, a            ; Save upper four bits 
8f49 7e					ld a,(hl) 
8f4a cd 62 8f		                call    nibble2val      ; Get lower nibble 
8f4d b0			                or      b               ; Combine both nibbles 
8f4e c1			                pop     bc              ; Restore B (and C) 
8f4f c9			                ret 
8f50			; 
8f50			; Get a hexadecimal digit from the serial line. This routine blocks until 
8f50			; a valid character (0-9a-f) has been entered. A valid digit will be echoed 
8f50			; to the serial line interface. The lower 4 bits of A contain the value of  
8f50			; that particular digit. 
8f50			; 
8f50			;get_nibble      ld a,(hl)           ; Read a character 
8f50			;                call    to_upper        ; Convert to upper case 
8f50			;                call    is_hex          ; Was it a hex digit? 
8f50			;                jr      nc, get_nibble  ; No, get another character 
8f50			 ;               call    nibble2val      ; Convert nibble to value 
8f50			 ;               call    print_nibble 
8f50			 ;               ret 
8f50			; 
8f50			; is_hex checks a character stored in A for being a valid hexadecimal digit. 
8f50			; A valid hexadecimal digit is denoted by a set C flag. 
8f50			; 
8f50			;is_hex          cp      'F' + 1         ; Greater than 'F'? 
8f50			;                ret     nc              ; Yes 
8f50			;                cp      '0'             ; Less than '0'? 
8f50			;                jr      nc, is_hex_1    ; No, continue 
8f50			;                ccf                     ; Complement carry (i.e. clear it) 
8f50			;                ret 
8f50			;is_hex_1        cp      '9' + 1         ; Less or equal '9*? 
8f50			;                ret     c               ; Yes 
8f50			;                cp      'A'             ; Less than 'A'? 
8f50			;                jr      nc, is_hex_2    ; No, continue 
8f50			;                ccf                     ; Yes - clear carry and return 
8f50			;                ret 
8f50			;is_hex_2        scf                     ; Set carry 
8f50			;                ret 
8f50			; 
8f50			; Convert a single character contained in A to upper case: 
8f50			; 
8f50 fe 61		to_upper:        cp      'a'             ; Nothing to do if not lower case 
8f52 d8			                ret     c 
8f53 fe 7b		                cp      'z' + 1         ; > 'z'? 
8f55 d0			                ret     nc              ; Nothing to do, either 
8f56 e6 5f		                and     $5f             ; Convert to upper case 
8f58 c9			                ret 
8f59			 
8f59			 
8f59			to_lower: 
8f59			 
8f59			   ; if char is in [A-Z] make it lower case 
8f59			 
8f59			   ; enter : a = char 
8f59			   ; exit  : a = lower case char 
8f59			   ; uses  : af 
8f59			 
8f59 fe 41		   cp 'A' 
8f5b d8			   ret c 
8f5c			    
8f5c fe 5b		   cp 'Z'+1 
8f5e d0			   ret nc 
8f5f			    
8f5f f6 20		   or $20 
8f61 c9			   ret 
8f62			 
8f62			; 
8f62			; Expects a hexadecimal digit (upper case!) in A and returns the 
8f62			; corresponding value in A. 
8f62			; 
8f62 fe 3a		nibble2val:      cp      '9' + 1         ; Is it a digit (less or equal '9')? 
8f64 38 02		                jr      c, nibble2val_1 ; Yes 
8f66 d6 07		                sub     7               ; Adjust for A-F 
8f68 d6 30		nibble2val_1:    sub     '0'             ; Fold back to 0..15 
8f6a e6 0f		                and     $f              ; Only return lower 4 bits 
8f6c c9			                ret 
8f6d			; 
8f6d			; Print_nibble prints a single hex nibble which is contained in the lower  
8f6d			; four bits of A: 
8f6d			; 
8f6d			;print_nibble    push    af              ; We won't destroy the contents of A 
8f6d			;                and     $f              ; Just in case... 
8f6d			;                add     a, '0'             ; If we have a digit we are done here. 
8f6d			;                cp      '9' + 1         ; Is the result > 9? 
8f6d			;                jr      c, print_nibble_1 
8f6d			;                add     a, 'A' - '0' - $a  ; Take care of A-F 
8f6d			;print_nibble_1  call    putc            ; Print the nibble and 
8f6d			;                pop     af              ; restore the original value of A 
8f6d			;                ret 
8f6d			;; 
8f6d			;; Send a CR/LF pair: 
8f6d			; 
8f6d			;crlf            push    af 
8f6d			;                ld      a, cr 
8f6d			;                call    putc 
8f6d			;                ld      a, lf 
8f6d			;                call    putc 
8f6d			;                pop     af 
8f6d			;                ret 
8f6d			; 
8f6d			; Print_word prints the four hex digits of a word to the serial line. The  
8f6d			; word is expected to be in HL. 
8f6d			; 
8f6d			;print_word      push    hl 
8f6d			;                push    af 
8f6d			;                ld      a, h 
8f6d			;                call    print_byte 
8f6d			;                ld      a, l 
8f6d			;                call    print_byte 
8f6d			;                pop     af 
8f6d			;                pop     hl 
8f6d			;                ret 
8f6d			; 
8f6d			; Print_byte prints a single byte in hexadecimal notation to the serial line. 
8f6d			; The byte to be printed is expected to be in A. 
8f6d			; 
8f6d			;print_byte      push    af              ; Save the contents of the registers 
8f6d			;                push    bc 
8f6d			;                ld      b, a 
8f6d			;                rrca 
8f6d			;                rrca 
8f6d			;                rrca 
8f6d			;                rrca 
8f6d			;                call    print_nibble    ; Print high nibble 
8f6d			;                ld      a, b 
8f6d			;                call    print_nibble    ; Print low nibble 
8f6d			;                pop     bc              ; Restore original register contents 
8f6d			;                pop     af 
8f6d			;                ret 
8f6d			 
8f6d			 
8f6d			 
8f6d			 
8f6d			 
8f6d			fourehexhl:  
8f6d 7e				ld a,(hl) 
8f6e cd 1c 8f			call atohex 
8f71 cb 3f				SRL A 
8f73 cb 3f				SRL A 
8f75 cb 3f				SRL A 
8f77 cb 3f				SRL A 
8f79 47				ld b, a 
8f7a 23				inc hl 
8f7b 7e				ld a,(hl) 
8f7c 23				inc hl 
8f7d cd 1c 8f			call atohex 
8f80 80				add b 
8f81 57				ld d,a 
8f82 7e				ld a,(hl) 
8f83 cd 1c 8f			call atohex 
8f86 cb 3f				SRL A 
8f88 cb 3f				SRL A 
8f8a cb 3f				SRL A 
8f8c cb 3f				SRL A 
8f8e 47				ld b, a 
8f8f 23				inc hl 
8f90 7e				ld a,(hl) 
8f91 23				inc hl 
8f92 cd 1c 8f			call atohex 
8f95 80				add b 
8f96 5f				ld e, a 
8f97 d5				push de 
8f98 e1				pop hl 
8f99 c9				ret 
8f9a			 
8f9a			; pass hl. returns z set if the byte at hl is a digit 
8f9a			;isdigithl:  
8f9a			;	push bc 
8f9a			;	ld a,(hl) 
8f9a			;	cp ':' 
8f9a			;	jr nc, .isdf 		; > 
8f9a			;	cp '0' 
8f9a			;	jr c, .isdf		; < 
8f9a			; 
8f9a			;	; TODO find a better way to set z 
8f9a			; 
8f9a			;	ld b,a 
8f9a			;	cp b 
8f9a			;	pop bc 
8f9a			;	ret 
8f9a			; 
8f9a			;.isdf:	; not digit so clear z 
8f9a			; 
8f9a			;	; TODO find a better way to unset z 
8f9a			; 
8f9a			;	ld b,a 
8f9a			;	inc b 
8f9a			;	cp b 
8f9a			; 
8f9a			;	pop bc 
8f9a			;	ret 
8f9a				 
8f9a				 
8f9a			 
8f9a			 
8f9a			; pass hl as the four byte address to load 
8f9a			 
8f9a			get_word_hl:  
8f9a e5				push hl 
8f9b cd 3a 8f			call get_byte 
8f9e				 
8f9e 47				ld b, a 
8f9f			 
8f9f e1				pop hl 
8fa0 23				inc hl 
8fa1 23				inc hl 
8fa2			 
8fa2			; TODO not able to handle a-f  
8fa2 7e				ld a,(hl) 
8fa3			;	;cp ':' 
8fa3			;	cp 'g' 
8fa3			;	jr nc, .single_byte_hl 		; > 
8fa3			;	cp 'G' 
8fa3			;	jr nc, .single_byte_hl 		; > 
8fa3			;	cp '0' 
8fa3			;	jr c, .single_byte_hl		; < 
8fa3			 
8fa3				;call isdigithl 
8fa3 fe 00			cp 0 
8fa5 28 06			jr z, .single_byte_hl 
8fa7			 
8fa7			.getwhln:   ; hex word so get next byte 
8fa7			 
8fa7 cd 3a 8f			call get_byte 
8faa 6f				ld l, a 
8fab 60				ld h,b 
8fac c9				ret 
8fad 68			.single_byte_hl:   ld l,b 
8fae 26 00				ld h,0 
8fb0 c9					ret 
8fb1			 
8fb1			 
8fb1			 
8fb1			 
8fb1 21 51 97			ld hl,asc+1 
8fb4			;	ld a, (hl) 
8fb4			;	call nibble2val 
8fb4 cd 3a 8f			call get_byte 
8fb7			 
8fb7			;	call fourehexhl 
8fb7 32 f5 e2			ld (scratch+52),a 
8fba				 
8fba 21 f3 e2			ld hl,scratch+50 
8fbd 22 e4 e5			ld (os_cur_ptr),hl 
8fc0			 
8fc0 c9				ret 
8fc1			 
8fc1			 
8fc1			; from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Other:DispA 
8fc1			 
8fc1			; Decimal Unsigned Version 
8fc1			 
8fc1			;Number in a to decimal ASCII 
8fc1			;adapted from 16 bit found in z80 Bits to 8 bit by Galandros 
8fc1			;Example: display a=56 as "056" 
8fc1			;input: a = number 
8fc1			;Output: a=0,value of a in the screen 
8fc1			;destroys af,bc (don't know about hl and de) 
8fc1			DispAToASCII: 
8fc1 0e 9c			ld	c,-100 
8fc3 cd cd 8f			call	.Na1 
8fc6 0e f6			ld	c,-10 
8fc8 cd cd 8f			call	.Na1 
8fcb 0e ff			ld	c,-1 
8fcd 06 2f		.Na1:	ld	b,'0'-1 
8fcf 04			.Na2:	inc	b 
8fd0 81				add	a,c 
8fd1 38 fc			jr	c,.Na2 
8fd3 91				sub	c		;works as add 100/10/1 
8fd4 f5				push af		;safer than ld c,a 
8fd5 78				ld	a,b		;char is in b 
8fd6			;TODO	CALL	PUTCHAR	;plot a char. Replace with bcall(_PutC) or similar. 
8fd6 f1				pop af		;safer than ld a,c 
8fd7 c9				ret 
8fd8			 
8fd8			; Decimal Signed Version 
8fd8			 
8fd8			; DispA 
8fd8			; -------------------------------------------------------------- 
8fd8			; Converts a signed integer value to a zero-terminated ASCII 
8fd8			; string representative of that value (using radix 10). 
8fd8			; -------------------------------------------------------------- 
8fd8			; INPUTS: 
8fd8			;     HL     Value to convert (two's complement integer). 
8fd8			;     DE     Base address of string destination. (pointer). 
8fd8			; -------------------------------------------------------------- 
8fd8			; OUTPUTS: 
8fd8			;     None 
8fd8			; -------------------------------------------------------------- 
8fd8			; REGISTERS/MEMORY DESTROYED 
8fd8			; AF HL 
8fd8			; -------------------------------------------------------------- 
8fd8			 
8fd8			;DispHLToASCII: 
8fd8			;   push    de 
8fd8			;   push    bc 
8fd8			; 
8fd8			;; Detect sign of HL. 
8fd8			;    bit    7, h 
8fd8			;    jr     z, ._DoConvert 
8fd8			; 
8fd8			;; HL is negative. Output '-' to string and negate HL. 
8fd8			;    ld     a, '-' 
8fd8			;    ld     (de), a 
8fd8			;    inc    de 
8fd8			; 
8fd8			;; Negate HL (using two's complement) 
8fd8			;    xor    a 
8fd8			;    sub    l 
8fd8			;    ld     l, a 
8fd8			;    ld     a, 0     ; Note that XOR A or SUB A would disturb CF 
8fd8			;    sbc    a, h 
8fd8			;    ld     h, a 
8fd8			; 
8fd8			;; Convert HL to digit characters 
8fd8			;._DoConvert: 
8fd8			;    ld     b, 0     ; B will count character length of number 
8fd8			;-   ld     a, 10 
8fd8			;    syscall  .DivHLByA  ; HL = HL / A, A = remainder 
8fd8			;    push   af 
8fd8			;    inc    b 
8fd8			;    ld     a, h 
8fd8			;    or     l 
8fd8			;    jr     nz, - 
8fd8			; 
8fd8			;; Retrieve digits from stack 
8fd8			;-   pop    af 
8fd8			;    or     $30 
8fd8			;    ld     (de), a 
8fd8			;    inc    de 
8fd8			;    djnz   - 
8fd8			; 
8fd8			;; Terminate string with NULL 
8fd8			;    xor    a 
8fd8			;    ld     (de), a 
8fd8			; 
8fd8			;    pop    bc 
8fd8			;    pop    de 
8fd8			;    ret 
8fd8			 
8fd8			;Comments 
8fd8			; 
8fd8			;    This routine uses the common positive-integer radix conversion algorithm of repeatedly dividing a value by the desired radix (base case: the value is zero) and saving the remainders of each division. 
8fd8			;    As this algorithm gives the digits in reverse order, they are pushed onto the hardware stack so that subsequently popping them yields the correct order. 
8fd8			;    Note that the output string will not be fixed-width. 
8fd8			; 
8fd8			;Example Usage 
8fd8			; 
8fd8			;    ld    hl, -1004 
8fd8			;    ld    de, OP1 
8fd8			;    call  DispA 
8fd8			;    ld    hl, OP1 
8fd8			;    syscall  PutS 
8fd8			 
8fd8			 
8fd8			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/string_to_uint16.z80 
8fd8			 
8fd8			 
8fd8			;Converts an ASCII string to an unsigned 16-bit integer 
8fd8			;Quits when it reaches a non-decimal digit 
8fd8			 
8fd8			string_to_uint16: 
8fd8			atoui_16: 
8fd8			;Input: 
8fd8			;     DE points to the string 
8fd8			;Outputs: 
8fd8			;     HL is the result 
8fd8			;     A is the 8-bit value of the number 
8fd8			;     DE points to the byte after the number 
8fd8			;Destroys: 
8fd8			;     BC 
8fd8			;       if the string is non-empty, BC is HL/10 
8fd8			;Size:  24 bytes 
8fd8			;Speed: 42+d(104+{0,9}) 
8fd8			;       d is the number of digits in the number 
8fd8			;       max is 640 cycles for a 5 digit number 
8fd8			;Assuming no leading zeros: 
8fd8			;1 digit:  146cc 
8fd8			;2 digit:  250cc 
8fd8			;3 digit:  354cc or 363cc (avg: 354.126cc) 
8fd8			;4 digit:  458cc or 467cc (avg: 458.27cc) 
8fd8			;5 digit:  562cc or 571cc or 580cc (avg: 562.4104cc) 
8fd8			;avg: 544.81158447265625cc (544+13297/16384) 
8fd8			;=============================================================== 
8fd8 21 00 00		  ld hl,0 
8fdb			.u16a: 
8fdb 1a			  ld a,(de) 
8fdc d6 30		  sub 30h 
8fde fe 0a		  cp 10 
8fe0 d0			  ret nc 
8fe1 13			  inc de 
8fe2 44			  ld b,h 
8fe3 4d			  ld c,l 
8fe4 29			  add hl,hl 
8fe5 29			  add hl,hl 
8fe6 09			  add hl,bc 
8fe7 29			  add hl,hl 
8fe8 85			  add a,l 
8fe9 6f			  ld l,a 
8fea 30 ef		  jr nc,.u16a 
8fec 24			  inc h 
8fed c3 db 8f		  jp .u16a 
8ff0			 
8ff0			 
8ff0			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/string_to_uint16.z80 
8ff0			 
8ff0			;written by Zeda 
8ff0			;Converts a 16-bit unsigned integer to an ASCII string. 
8ff0			 
8ff0			uitoa_16: 
8ff0			;Input: 
8ff0			;   DE is the number to convert 
8ff0			;   HL points to where to write the ASCII string (up to 6 bytes needed). 
8ff0			;Output: 
8ff0			;   HL points to the null-terminated ASCII string 
8ff0			;      NOTE: This isn't necessarily the same as the input HL. 
8ff0 d5			  push de 
8ff1 c5			  push bc 
8ff2 f5			  push af 
8ff3 eb			  ex de,hl 
8ff4			 
8ff4 01 f0 d8		  ld bc,-10000 
8ff7 3e 2f		  ld a,'0'-1 
8ff9 3c			  inc a 
8ffa 09			  add hl,bc  
8ffb 38 fc		   jr c,$-2 
8ffd 12			  ld (de),a 
8ffe 13			  inc de 
8fff			 
8fff 01 e8 03		  ld bc,1000 
9002 3e 3a		  ld a,'9'+1 
9004 3d			  dec a  
9005 09			  add hl,bc  
9006 30 fc		   jr nc,$-2 
9008 12			  ld (de),a 
9009 13			  inc de 
900a			 
900a 01 9c ff		  ld bc,-100 
900d 3e 2f		  ld a,'0'-1 
900f 3c			  inc a  
9010 09			  add hl,bc  
9011 38 fc		   jr c,$-2 
9013 12			  ld (de),a 
9014 13			  inc de 
9015			 
9015 7d			  ld a,l 
9016 26 3a		  ld h,'9'+1 
9018 25			  dec h  
9019 c6 0a		  add a,10  
901b 30 fb		   jr nc,$-3 
901d c6 30		  add a,'0' 
901f eb			  ex de,hl 
9020 72			  ld (hl),d 
9021 23			  inc hl 
9022 77			  ld (hl),a 
9023 23			  inc hl 
9024 36 00		  ld (hl),0 
9026			 
9026			;Now strip the leading zeros 
9026 0e fa		  ld c,-6 
9028 09			  add hl,bc 
9029 3e 30		  ld a,'0' 
902b 23			  inc hl  
902c be			  cp (hl)  
902d 28 fc		  jr z,$-2 
902f			 
902f			;Make sure that the string is non-empty! 
902f 7e			  ld a,(hl) 
9030 b7			  or a 
9031 20 01		  jr nz,.atoub 
9033 2b			  dec hl 
9034			.atoub: 
9034			 
9034 f1			  pop af 
9035 c1			  pop bc 
9036 d1			  pop de 
9037 c9			  ret 
9038			 
9038			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/toUpper.z80 
9038			 
9038			toUpper: 
9038			;A is the char. 
9038			;If A is a lowercase letter, this sets it to the matching uppercase 
9038			;18cc or 30cc or 41cc 
9038			;avg: 26.75cc 
9038 fe 61		  cp 'a' 
903a d8			  ret c 
903b fe 7b		  cp 'z'+1 
903d d0			  ret nc 
903e d6 20		  sub 'a'-'A' 
9040 c9			  ret 
9041			 
9041			; https://tutorials.eeems.ca/ASMin28Days/lesson/day16.html#cmp 
9041			 
9041			; String Length 
9041			;With a length-prefixed string, finding the length is trivial. For a null-terminated string, the process is decidedly more involved. This is where CPIR comes in. 
9041			 
9041			; Get the length of the null-terminated string starting at $8000 hl 
9041			;    LD     HL, $8000 
9041			 
9041			strlenz: 
9041			 
9041 af			    XOR    A               ; Zero is the value we are looking for. 
9042 47			    LD     B, A             ; Since we haven't the slightest clue as to the  
9043 4f			    LD     C, A             ; actual size of the string, put 0 in BC to search 
9044			                           ; 65, 536 bytes (the entire addressable memory space). 
9044 ed b1		    CPIR                   ; Begin search for a byte equalling zero. 
9046			 
9046			; BC has been decremented so that it holds -length. Now need to synthesize a NEG BC. 
9046 67			    LD     H, A             ; Zero HL (basically set it to 65, 536) to get the 
9047 6f			    LD     L, A             ; number of bytes 
9048 ed 42		    SBC    HL, BC           ; Find the size. CPIR doesn't affect carry. 
904a 2b			    DEC    HL              ; Compensate for null. 
904b c9				ret 
904c			 
904c			; Get the length of the A terminated string starting at $8000 hl 
904c			;    LD     HL, $8000 
904c			 
904c			strlent: 
904c			 
904c			                  ; A is the value we are looking for. 
904c 06 00		    LD     B, 0             ; Since we haven't the slightest clue as to the  
904e 0e 00		    LD     C, 0             ; actual size of the string, put 0 in BC to search 
9050			                           ; 65, 536 bytes (the entire addressable memory space). 
9050 ed b1		    CPIR                   ; Begin search for a byte equalling zero. 
9052			 
9052			; BC has been decremented so that it holds -length. Now need to synthesize a NEG BC. 
9052 26 00		    LD     H, 0             ; Zero HL (basically set it to 65, 536) to get the 
9054 2e 00		    LD     L, 0             ; number of bytes 
9056 ed 42		    SBC    HL, BC           ; Find the size. CPIR doesn't affect carry. 
9058 2b			    DEC    HL              ; Compensate for null. 
9059 c9				ret 
905a			 
905a			 
905a			;Comparing Strings 
905a			 
905a			;IN    HL     Address of string1. 
905a			;      DE     Address of string2. 
905a			 
905a			; doc given but wrong??? 
905a			;OUT   zero   Set if string1 = string2, reset if string1 != string2. 
905a			;      carry  Set if string1 > string2, reset if string1 <= string2. 
905a			; tested 
905a			;OUT   carry set  if string1 = string2, carry  reset if string1 != string2. 
905a			 
905a			strcmp_old: 
905a e5			    PUSH   HL 
905b d5			    PUSH   DE 
905c			 
905c 1a			    LD     A, (DE)          ; Compare lengths to determine smaller string 
905d be			    CP     (HL)            ; (want to minimize work). 
905e 38 01		    JR     C, Str1IsBigger 
9060 7e			    LD     A, (HL) 
9061			 
9061			Str1IsBigger: 
9061 4f			    LD     C, A             ; Put length in BC 
9062 06 00		    LD     B, 0 
9064 13			    INC    DE              ; Increment pointers to meat of string. 
9065 23			    INC    HL 
9066			 
9066			CmpLoop: 
9066 1a			    LD     A, (DE)          ; Compare bytes. 
9067 ed a1		    CPI 
9069 20 09		    JR     NZ, NoMatch      ; If (HL) != (DE), abort. 
906b 13			    INC    DE              ; Update pointer. 
906c ea 66 90		    JP     PE, CmpLoop 
906f			 
906f d1			    POP    DE 
9070 e1			    POP    HL 
9071 1a			    LD     A, (DE)          ; Check string lengths to see if really equal. 
9072 be			    CP     (HL) 
9073 c9			    RET 
9074			 
9074			NoMatch: 
9074 2b			    DEC    HL 
9075 be			    CP     (HL)            ; Compare again to affect carry. 
9076 d1			    POP    DE 
9077 e1			    POP    HL 
9078 c9			    RET 
9079			 
9079			;; test strmp 
9079			; 
9079			;ld de, .str1 
9079			;ld hl, .str2 
9079			;call strcmp 
9079			;jr z, .z1 
9079			;;this 
9079			;	if DEBUG_FORTH_WORDS 
9079			;		DMARK "NZ1" 
9079			;		CALLMONITOR 
9079			;	endif 
9079			;.z1: 
9079			; 
9079			;	if DEBUG_FORTH_WORDS 
9079			;		DMARK "ZZ1" 
9079			;		CALLMONITOR 
9079			;	endif 
9079			; 
9079			;ld de, .str1 
9079			;ld hl, .str1 
9079			;call strcmp 
9079			;jr z, .z2 
9079			;;this 
9079			;	if DEBUG_FORTH_WORDS 
9079			;		DMARK "NZ2" 
9079			;		CALLMONITOR 
9079			;	endif 
9079			;.z2: 
9079			; 
9079			;	if DEBUG_FORTH_WORDS 
9079			;		DMARK "ZZ2" 
9079			;		CALLMONITOR 
9079			;	endif 
9079			; 
9079			;ld de, .str1 
9079			;ld hl, .str2 
9079			;call strcmp 
9079			;jr c, .c1 
9079			; 
9079			;	if DEBUG_FORTH_WORDS 
9079			;		DMARK "Nc1" 
9079			;		CALLMONITOR 
9079			;	endif 
9079			;.c1: 
9079			;;this 
9079			;	if DEBUG_FORTH_WORDS 
9079			;		DMARK "cc1" 
9079			;		CALLMONITOR 
9079			;	endif 
9079			; 
9079			;ld de, .str1 
9079			;ld hl, .str1 
9079			;call strcmp 
9079			;jr c, .c2 
9079			;;this 
9079			;	if DEBUG_FORTH_WORDS 
9079			;		DMARK "Nc2" 
9079			;		CALLMONITOR 
9079			;	endif 
9079			;.c2: 
9079			; 
9079			;	if DEBUG_FORTH_WORDS 
9079			;		DMARK "cc2" 
9079			;		CALLMONITOR 
9079			;	endif 
9079			;	NEXTW 
9079			;.str1:   db "string1",0 
9079			;.str2:   db "string2",0 
9079			 
9079			; only care about direct match or not 
9079			; hl and de strings 
9079			; zero set if the same 
9079			 
9079			strcmp: 
9079 1a				ld a, (de) 
907a be				cp (hl) 
907b 28 02			jr z, .ssame 
907d b7				or a 
907e c9				ret 
907f			 
907f			.ssame:  
907f fe 00			cp 0 
9081 c8				ret z 
9082			 
9082 23				inc hl 
9083 13				inc de 
9084 18 f3			jr strcmp 
9086				 
9086				 
9086			 
9086			;Copyright (c) 2014, Luke Maurits 
9086			;All rights reserved. 
9086			; 
9086			;Redistribution and use in source and binary forms, with or without 
9086			;modification, are permitted provided that the following conditions are met: 
9086			; 
9086			;* Redistributions of source code must retain the above copyright notice, this 
9086			;  list of conditions and the following disclaimer. 
9086			; 
9086			;* Redistributions in binary form must reproduce the above copyright notice, 
9086			;  this list of conditions and the following disclaimer in the documentation 
9086			;  and/or other materials provided with the distribution. 
9086			; 
9086			;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
9086			;AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
9086			;IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
9086			;DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE 
9086			;FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
9086			;DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
9086			;SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
9086			;CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
9086			;OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
9086			;OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
9086			 
9086			; https://github.com/lmaurits/lm512/blob/master/string.z80 
9086			 
9086			StrictStrCmp: 
9086				; Load next chars of each string 
9086 1a				ld a, (de) 
9087 47				ld b, a 
9088 7e				ld a, (hl) 
9089				; Compare 
9089 b8				cp b 
908a				; Return non-zero if chars don't match 
908a c0				ret nz 
908b				; Check for end of both strings 
908b fe 00			cp "\0" 
908d				; Return if strings have ended 
908d c8				ret z 
908e				; Otherwise, advance to next chars 
908e 23				inc hl 
908f 13				inc de 
9090 18 f4			jr StrictStrCmp 
9092			 
9092			;end 
9092			; eof 
9092			 
9092			 
9092			 
9092			 
9092			 
9092			 
# End of file firmware_strings.asm
9092			include "firmware_memory.asm"   ; malloc and free  
9092			 
9092			if DEBUG_FORTH_MALLOC_HIGH 
9092			.mallocsize: db "Wants malloc >256",0 
9092			.mallocasize: db "MALLOC gives >256",0 
9092			.malloczero: db "MALLOC gives zero",0 
9092			 
9092			malloc_guard_zerolen: 
9092				push hl 
9092				push de 
9092				push af 
9092			 
9092				ld de, 0 
9092			        call cmp16 
9092				jr nz, .lowalloz 
9092			 
9092				push hl 
9092				push de 
9092					ld hl, display_fb0 
9092					ld (display_fb_active), hl 
9092				call clear_display 
9092				ld a, 0 
9092				ld de, .malloczero 
9092				call str_at_display 
9092				call update_display 
9092				call delay1s 
9092				call delay1s 
9092				call bp_on 
9092			;	ld a, 0 
9092			;	ld (os_view_disable), a 
9092			 
9092				pop de 
9092				pop hl 
9092			 
9092				 
9092			 
9092				CALLMONITOR 
9092			.lowalloz: 
9092			 
9092			 
9092				pop af 
9092				pop de 
9092				pop hl 
9092			ret 
9092			 
9092			malloc_guard_entry: 
9092				push hl 
9092				push de 
9092				push af 
9092			 
9092			 	or a      ;clear carry flag 
9092				push hl 
9092				ld de, 255 
9092				sbc hl, de 
9092				jr c, .lowalloc 
9092			 
9092				push de 
9092					ld hl, display_fb0 
9092					ld (display_fb_active), hl 
9092				call clear_display 
9092				ld a, 0 
9092				ld de, .mallocsize 
9092				call str_at_display 
9092				call update_display 
9092				call delay1s 
9092				call delay1s 
9092			;	ld a, 0 
9092			;	ld (os_view_disable), a 
9092				call bp_on 
9092			 
9092				pop de 
9092				pop hl 
9092			 
9092				 
9092			 
9092				CALLMONITOR 
9092				jr .lowdone 
9092			.lowalloc: 
9092			 
9092			 
9092				pop hl 
9092			.lowdone:	pop af 
9092				pop de 
9092				pop hl 
9092			ret 
9092			 
9092			malloc_guard_exit: 
9092				push hl 
9092				push de 
9092				push af 
9092			 
9092			 	or a      ;clear carry flag 
9092				push hl 
9092				ld de, 255 
9092				sbc hl, de 
9092				jr c, .lowallocx 
9092			 
9092				push de 
9092					ld hl, display_fb0 
9092					ld (display_fb_active), hl 
9092				call clear_display 
9092				ld a, 0 
9092				ld de, .mallocasize 
9092				call str_at_display 
9092				call update_display 
9092				call delay1s 
9092				call delay1s 
9092			;	ld a, 0 
9092			;	ld (os_view_disable), a 
9092				call bp_on 
9092				pop de 
9092				pop hl 
9092			 
9092				CALLMONITOR 
9092				jr .lowdonex 
9092			.lowallocx: 
9092			 
9092				pop hl 
9092			.lowdonex:	pop af 
9092				pop de 
9092				pop hl 
9092			ret 
9092			endif 
9092			 
9092			if MALLOC_2 
9092			; Z80 Malloc and Free Functions 
9092			 
9092			; Malloc Function: 
9092			; Input: 
9092			;   HL: Size of block to allocate 
9092			; Output: 
9092			;   HL: Pointer to allocated memory block (NULL if allocation fails) 
9092			 
9092			malloc: 
9092				 
9092			if DEBUG_FORTH_MALLOC_HIGH 
9092			call malloc_guard_entry 
9092			endif 
9092			 
9092			 
9092			 
9092			 
9092					if DEBUG_FORTH_MALLOC 
9092						DMARK "mal" 
9092						CALLMONITOR 
9092					endif 
9092			    push af            ; Save AF register 
9092			    ld a, l            ; Load low byte of size into A 
9092			    or h               ; Check if size is zero 
9092			    jp z, malloc_exit  ; If size is zero, exit with NULL pointer 
9092			 
9092			    ; Allocate memory 
9092			    ld hl, (heap_start) ; Load start of heap into HL 
9092					if DEBUG_FORTH_MALLOC 
9092						DMARK "ma1" 
9092						CALLMONITOR 
9092					endif 
9092			    call malloc_internal ; Call internal malloc function 
9092			    pop af             ; Restore AF register 
9092			if DEBUG_FORTH_MALLOC_HIGH 
9092			call malloc_guard_exit 
9092			call malloc_guard_zerolen 
9092			endif 
9092			    ret                ; Return 
9092			 
9092			; Free Function: 
9092			; Input: 
9092			;   HL: Pointer to memory block to free 
9092			; Output: 
9092			;   None 
9092			 
9092			free: 
9092			    push af            ; Save AF register 
9092			    ld a, l            ; Load low byte of pointer into A 
9092			    or h               ; Check if pointer is NULL 
9092			    jp z, free_exit    ; If pointer is NULL, exit 
9092			 
9092			    ; Free memory 
9092			    ld hl, (heap_start) ; Load start of heap into HL 
9092			    call free_internal  ; Call internal free function 
9092			    pop af             ; Restore AF register 
9092			    ret                ; Return 
9092			 
9092			; Internal Malloc Function: 
9092			; Input: 
9092			;   HL: Size of block to allocate 
9092			; Output: 
9092			;   HL: Pointer to allocated memory block (NULL if allocation fails) 
9092			 
9092			malloc_internal: 
9092			    ld bc, 2           ; Number of bytes to allocate for management overhead 
9092			    add hl, bc         ; Add management overhead to requested size 
9092			    ex de, hl          ; Save total size in DE, and keep it in HL 
9092					if DEBUG_FORTH_MALLOC 
9092						DMARK "ma2" 
9092						CALLMONITOR 
9092					endif 
9092			 
9092			    ; Search for free memory block 
9092			    ld de, (heap_end)  ; Load end of heap into DE 
9092			    ld bc, 0           ; Initialize counter 
9092			 
9092					if DEBUG_FORTH_MALLOC 
9092						DMARK "ma2" 
9092						CALLMONITOR 
9092					endif 
9092			malloc_search_loop: 
9092			    ; Check if current block is free 
9092			    ld a, (hl)         ; Load current block's status (free or used) 
9092			    cp 0               ; Compare with zero (free) 
9092			    jr nz, malloc_skip_block_check  ; If not free, skip to the next block 
9092			 
9092			    ; Check if current block is large enough 
9092			    ld a, (hl+1)       ; Load high byte of block size 
9092			    cp l               ; Compare with low byte of requested size 
9092			    jr nz, malloc_skip_block_check  ; If not large enough, skip to the next block 
9092			 
9092			    ld a, (hl+2)       ; Load low byte of block size 
9092			    cp h               ; Compare with high byte of requested size 
9092			    jr c, malloc_skip_block_check   ; If not large enough, skip to the next block 
9092			 
9092			    ; Mark block as used 
9092			    ld (hl), 0xFF      ; Set status byte to indicate used block 
9092			 
9092			    ; Calculate remaining space in block 
9092			    ld bc, 0           ; Clear BC 
9092			    add hl, bc         ; Increment HL to point to start of data block 
9092			    add hl, de         ; HL = HL + DE (total size) 
9092			    ld bc, 1           ; Number of bytes to allocate for management overhead 
9092			    add hl, bc         ; Add management overhead to start of data block 
9092			 
9092			    ; Save pointer to allocated block in HL 
9092			if DEBUG_FORTH_MALLOC_HIGH 
9092						DMARK "ma5" 
9092			call malloc_guard_exit 
9092			call malloc_guard_zerolen 
9092			endif 
9092			    ret 
9092			 
9092			malloc_skip_block_check: 
9092			    ; Move to the next block 
9092			    ld bc, 3           ; Size of management overhead 
9092			    add hl, bc         ; Move to the next block 
9092			    inc de             ; Increment counter 
9092			 
9092			    ; Check if we have reached the end of heap 
9092			    ld a, e            ; Load low byte of heap end address 
9092			    cp (hl)            ; Compare with low byte of current address 
9092			    jr nz, malloc_search_loop  ; If not equal, continue searching 
9092			    ld a, d            ; Load high byte of heap end address 
9092			    cp 0               ; Check if it's zero (end of memory) 
9092			    jr nz, malloc_search_loop  ; If not zero, continue searching 
9092			 
9092			    ; If we reached here, allocation failed 
9092			    xor a              ; Set result to NULL 
9092			if DEBUG_FORTH_MALLOC_HIGH 
9092						DMARK "ma6" 
9092			call malloc_guard_exit 
9092			call malloc_guard_zerolen 
9092			endif 
9092			    ret 
9092			malloc_exit: 
9092			if DEBUG_FORTH_MALLOC_HIGH 
9092						DMARK "ma7" 
9092			call malloc_guard_exit 
9092			call malloc_guard_zerolen 
9092			endif 
9092			    ret 
9092			 
9092			; Internal Free Function: 
9092			; Input: 
9092			;   HL: Pointer to memory block to free 
9092			; Output: 
9092			;   None 
9092			 
9092			free_internal: 
9092			    ld de, (heap_start) ; Load start of heap into DE 
9092			    ld bc, 0            ; Initialize counter 
9092			 
9092			free_search_loop: 
9092			    ; Check if current block contains the pointer 
9092			    ld a, l             ; Load low byte of pointer 
9092			    cp (hl+1)           ; Compare with high byte of current block's address 
9092			    jr nz, free_skip_block_check  ; If not equal, skip to the next block 
9092			    ld a, h             ; Load high byte of pointer 
9092			    cp (hl+2)           ; Compare with low byte of current block's address 
9092			    jr nz, free_skip_block_check  ; If not equal, skip to the next block 
9092			 
9092			    ; Mark block as free 
9092			    ld (hl), 0          ; Set status byte to indicate free block 
9092			    ret                 ; Return 
9092			 
9092			free_skip_block_check: 
9092			    ; Move to the next block 
9092			    ld bc, 3            ; Size of management overhead 
9092			    add hl, bc          ; Move to the next block 
9092			    inc de              ; Increment counter 
9092			 
9092			    ; Check if we have reached the end of heap 
9092			    ld a, e             ; Load low byte of heap end address 
9092			    cp (hl)             ; Compare with low byte of current address 
9092			    jr nz, free_search_loop  ; If not equal, continue searching 
9092			    ld a, d             ; Load high byte of heap end address 
9092			    cp 0                ; Check if it's zero (end of memory) 
9092			    jr nz, free_search_loop  ; If not zero, continue searching 
9092			 
9092			    ; If we reached here, pointer is not found in heap 
9092			    ret 
9092			 
9092			free_exit: 
9092			    ret                 ; Return 
9092			 
9092			; Define heap start and end addresses 
9092			;heap_start:    .dw 0xC000   ; Start of heap 
9092			;heap_end:      .dw 0xE000   ; End of heap 
9092			 
9092			endif 
9092			 
9092			 
9092			if MALLOC_1 
9092			 
9092			 
9092			 
9092			; from https://gist.github.com/tomstorey/947a8b084bad69391a4b2a1c5b6d69ca 
9092			 
9092			;moved to firmware.asm 
9092			;heap_start        .equ  0x9000      ; Starting address of heap 
9092			;heap_size         .equ  0x0100      ; Number of bytes available in heap 
9092			 
9092			;      .org 0 
9092			;      jp    main 
9092			 
9092			 
9092			;      .org  0x100 
9092			;main: 
9092			;      ld    HL, 0x8100 
9092			;      ld    SP, HL 
9092			; 
9092			;      call  heap_init 
9092			; 
9092			;      ; Make some allocations 
9092			;      ld    HL, 12 
9092			;      call  malloc            ; Allocates 0x9004 
9092			; 
9092			;      ld    HL, 12 
9092			;      call  malloc            ; Allocates 0x9014 
9092			; 
9092			;      ld    HL, 12 
9092			;      call  malloc            ; Allocates 0x9024 
9092			; 
9092			;      ; Free some allocations 
9092			;      ld    HL, 0x9014 
9092			;      call  free 
9092			; 
9092			;      ld    HL, 0x9004 
9092			;      call  free 
9092			; 
9092			;      ld    HL, 0x9024 
9092			;      call  free 
9092			; 
9092			; 
9092			;      halt 
9092			 
9092			 
9092			;------------------------------------------------------------------------------ 
9092			;     heap_init                                                               : 
9092			;                                                                             : 
9092			; Description                                                                 : 
9092			;     Initialise the heap and make it ready for malloc and free operations.   : 
9092			;                                                                             : 
9092			;     The heap is maintained as a linked list, starting with an initial       : 
9092			;     "dummy block" of zero size which is mainly used to hold a pointer to    : 
9092			;     the first free block in the heap. Each block then points to the next    : 
9092			;     free block within the heap, and the free list ends at the first block   : 
9092			;     with a null pointer to the next free block.                             : 
9092			;                                                                             : 
9092			; Parameters                                                                  : 
9092			;     Inputs are compile-time only. Two defines which specify the starting    : 
9092			;     address of the heap and its size are required, along with a memory      : 
9092			;     allocation of 4 consecutive bytes which is used for a dummy block which : 
9092			;     principally stores a pointer to the first free block in the heap.       : 
9092			;                                                                             : 
9092			; Returns                                                                     : 
9092			;     Nothing                                                                 : 
9092			;------------------------------------------------------------------------------ 
9092			heap_init: 
9092 e5			      push  HL 
9093			 
9093			      ; Initialise free list struct 
9093 21 12 dd		      ld    HL, heap_start 
9096 22 0d dd		      ld    (free_list), HL 
9099 21 00 00		      ld    HL, 0 
909c 22 0f dd		      ld    (free_list+2), HL 
909f			 
909f			      ; Insert first free block at bottom of heap, consumes entire heap 
909f 21 98 e2		      ld    HL, heap_start+heap_size-4 
90a2 22 12 dd		      ld    (heap_start), HL        ; Next block (end of free list) 
90a5 21 86 05		      ld    HL, heap_size-4 
90a8 22 14 dd		      ld    (heap_start+2), HL      ; Block size 
90ab			 
90ab			      ; Insert end of free list block at top of heap - two null words will 
90ab			      ; terminate the free list 
90ab 21 00 00		      ld    HL, 0 
90ae 22 9a e2		      ld    (heap_start+heap_size-2), HL 
90b1 22 98 e2		      ld    (heap_start+heap_size-4), HL 
90b4			 
90b4 e1			      pop   HL 
90b5			 
90b5 c9			      ret 
90b6			 
90b6			 
90b6			;------------------------------------------------------------------------------ 
90b6			;     malloc                                                                  : 
90b6			;                                                                             : 
90b6			; Description                                                                 : 
90b6			;     Allocates the wanted space from the heap and returns the address of the : 
90b6			;     first useable byte of the allocation.                                   : 
90b6			;                                                                             : 
90b6			;     Allocations can happen in one of two ways:                              : 
90b6			;                                                                             : 
90b6			;     1. A free block may be found which is the exact size wanted. In this    : 
90b6			;        case the block is removed from the free list and retuedn to the      : 
90b6			;        caller.                                                              : 
90b6			;     2. A free block may be found which is larger than the size wanted. In   : 
90b6			;        this case, the larger block is split into two. The first portion of  : 
90b6			;        this block will become the requested space by the malloc call and    : 
90b6			;        is returned to the caller. The second portion becomes a new free     : 
90b6			;        block, and the free list is adjusted to maintain continuity via this : 
90b6			;        newly created block.                                                 : 
90b6			;                                                                             : 
90b6			;     malloc does not set any initial value in the allocated space, the       : 
90b6			;     caller is required to do this as required.                              : 
90b6			;                                                                             : 
90b6			;     This implementation of malloc uses the stack exclusively, and is        : 
90b6			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
90b6			;     advisable to disable interrupts before calling malloc, and recommended  : 
90b6			;     to avoid the use of malloc inside ISRs in general.                      : 
90b6			;                                                                             : 
90b6			;     NOTE: heap_init must be called before malloc and free can be used.      : 
90b6			;                                                                             : 
90b6			; Parameters                                                                  : 
90b6			;     HL  Number of bytes wanted                                              : 
90b6			;                                                                             : 
90b6			; Returns                                                                     : 
90b6			;     HL  Address of the first useable byte of the allocation                 : 
90b6			;                                                                             : 
90b6			; Flags                                                                       : 
90b6			;     Z   Set if the allocation did not succeed, clear otherwise              : 
90b6			;                                                                             : 
90b6			; Stack frame                                                                 : 
90b6			;       |             |                                                       : 
90b6			;       +-------------+                                                       : 
90b6			;       |     BC      |                                                       : 
90b6			;       +-------------+                                                       : 
90b6			;       |     DE      |                                                       : 
90b6			;       +-------------+                                                       : 
90b6			;       |     IX      |                                                       : 
90b6			;       +-------------+                                                       : 
90b6			;       |  prev_free  |                                                       : 
90b6			;   +4  +-------------+                                                       : 
90b6			;       |  this_free  |                                                       : 
90b6			;   +2  +-------------+                                                       : 
90b6			;       |  next_free  |                                                       : 
90b6			;   +0  +-------------+                                                       : 
90b6			;       |             |                                                       : 
90b6			;                                                                             : 
90b6			;------------------------------------------------------------------------------ 
90b6			 
90b6			 
90b6			;malloc: 
90b6			; 
90b6			;	SAVESP ON 1 
90b6			; 
90b6			;	call malloc_code 
90b6			; 
90b6			;	CHECKSP ON 1 
90b6			;	ret 
90b6			 
90b6			 
90b6			malloc: 
90b6 c5			      push  BC 
90b7 d5			      push  DE 
90b8 dd e5		      push  IX 
90ba			if DEBUG_FORTH_MALLOC_HIGH 
90ba			call malloc_guard_entry 
90ba			endif 
90ba			 
90ba					if DEBUG_FORTH_MALLOC 
90ba						DMARK "mal" 
90ba						CALLMONITOR 
90ba					endif 
90ba 7c			      ld    A, H                    ; Exit if no space requested 
90bb b5			      or    L 
90bc ca 7b 91		      jp    Z, malloc_early_exit 
90bf			 
90bf			;inc hl 
90bf			;inc hl 
90bf			;inc hl 
90bf			; 
90bf			;inc hl 
90bf			;inc hl 
90bf			;inc hl 
90bf			;inc hl 
90bf			;inc hl 
90bf			;inc hl 
90bf			;inc hl 
90bf			;inc hl 
90bf			;inc hl 
90bf			 
90bf			 
90bf			 
90bf			 
90bf					if DEBUG_FORTH_MALLOC 
90bf						DMARK "maA" 
90bf						CALLMONITOR 
90bf					endif 
90bf			      ; Set up stack frame 
90bf eb			      ex    DE, HL 
90c0 21 fa ff		      ld    HL, -6                  ; Reserve 6 bytes for stack frame 
90c3 39			      add   HL, SP 
90c4 f9			      ld    SP, HL 
90c5 dd 21 00 00	      ld    IX, 0                   ; Use IX as a frame pointer 
90c9 dd 39		      add   IX, SP 
90cb			 
90cb			      ; Setup initial state 
90cb 21 04 00		      ld    HL, 4                   ; want must also include space used by block struct 
90ce 19			      add   HL, DE 
90cf			 
90cf 44			      ld    B, H                    ; Move want to BC 
90d0 4d			      ld    C, L 
90d1			 
90d1 21 0d dd		      ld    HL, free_list           ; Store prev_free ptr to stack 
90d4 dd 75 04		      ld    (IX+4), L 
90d7 dd 74 05		      ld    (IX+5), H 
90da			 
90da 5e			      ld    E, (HL)                 ; Store this_free ptr to stack 
90db 23			      inc   HL 
90dc 56			      ld    D, (HL) 
90dd dd 73 02		      ld    (IX+2), E 
90e0 dd 72 03		      ld    (IX+3), D 
90e3 eb			      ex    DE, HL                  ; this_free ptr into HL 
90e4			 
90e4					if DEBUG_FORTH_MALLOC 
90e4						DMARK "maB" 
90e4						CALLMONITOR 
90e4					endif 
90e4			      ; Loop through free block list to find some space 
90e4			malloc_find_space: 
90e4 5e			      ld    E, (HL)                 ; Load next_free ptr into DE 
90e5 23			      inc   HL 
90e6 56			      ld    D, (HL) 
90e7			 
90e7 7a			      ld    A, D                    ; Check for null next_free ptr - end of free list 
90e8 b3			      or    E 
90e9 ca 75 91		      jp    Z, malloc_no_space 
90ec			 
90ec dd 73 00		      ld    (IX+0), E               ; Store next_free ptr to stack 
90ef dd 72 01		      ld    (IX+1), D 
90f2			 
90f2			      ; Does this block have enough space to make the allocation? 
90f2 23			      inc   HL                      ; Load free block size into DE 
90f3 5e			      ld    E, (HL) 
90f4 23			      inc   HL 
90f5 56			      ld    D, (HL) 
90f6			 
90f6 eb			      ex    DE, HL                  ; Check size of block against want 
90f7 b7			      or    A                       ; Ensure carry flag clear 
90f8 ed 42		      sbc   HL, BC 
90fa e5			      push  HL                      ; Store the result for later (new block size) 
90fb			 
90fb ca 4a 91		      jp   Z, malloc_alloc_fit     ; Z means block size matches want - can allocate 
90fe 30 1b		      jr    NC, malloc_alloc_split  ; NC means block is bigger than want - can allocate 
9100			 
9100			      ; this_free block is not big enough, setup ptrs to test next free block 
9100 e1			      pop   HL                      ; Discard previous result 
9101			 
9101 dd 6e 02		      ld    L, (IX+2)               ; Move this_free ptr into prev_free 
9104 dd 66 03		      ld    H, (IX+3) 
9107 dd 75 04		      ld    (IX+4), L 
910a dd 74 05		      ld    (IX+5), H 
910d			 
910d dd 6e 00		      ld    L, (IX+0)               ; Move next_free ptr into this_free 
9110 dd 66 01		      ld    H, (IX+1) 
9113 dd 75 02		      ld    (IX+2), L 
9116 dd 74 03		      ld    (IX+3), H 
9119			 
9119					if DEBUG_FORTH_MALLOC 
9119						DMARK "MA>" 
9119						CALLMONITOR 
9119					endif 
9119 18 c9		      jr    malloc_find_space 
911b			 
911b			      ; split a bigger block into two - requested size and remaining size 
911b			malloc_alloc_split: 
911b					if DEBUG_FORTH_MALLOC 
911b						DMARK "MAs" 
911b						CALLMONITOR 
911b					endif 
911b eb			      ex    DE, HL                  ; Calculate address of new free block 
911c 2b			      dec   HL 
911d 2b			      dec   HL 
911e 2b			      dec   HL 
911f 09			      add   HL, BC 
9120			 
9120			      ; Create a new block and point it at next_free 
9120 dd 5e 00		      ld    E, (IX+0)               ; Load next_free ptr into DE 
9123 dd 56 01		      ld    D, (IX+1) 
9126			 
9126 73			      ld    (HL), E                 ; Store next_free ptr into new block 
9127 23			      inc   HL 
9128 72			      ld    (HL), D 
9129			 
9129 d1			      pop   DE                      ; Store size of new block into new block 
912a 23			      inc   HL 
912b 73			      ld    (HL), E 
912c 23			      inc   HL 
912d 72			      ld    (HL), D 
912e			 
912e			      ; Update this_free ptr to point to new block 
912e 2b			      dec   HL 
912f 2b			      dec   HL 
9130 2b			      dec   HL 
9131			 
9131 dd 5e 02		      ld    E, (IX+2)               ; Take a copy of current this_free ptr 
9134 dd 56 03		      ld    D, (IX+3) 
9137			 
9137 dd 75 02		      ld    (IX+2), L               ; Store new block addr as this_free ptr 
913a dd 74 03		      ld    (IX+3), H 
913d			 
913d			      ; Modify this_free block to be allocation 
913d eb			      ex    DE, HL 
913e af			      xor   A                       ; Null the next block ptr of allocated block 
913f 77			      ld    (HL), A 
9140 23			      inc   HL 
9141 77			      ld    (HL), A 
9142			 
9142 23			      inc   HL                      ; Store want size into allocated block 
9143 71			      ld    (HL), C 
9144 23			      inc   HL 
9145 70			      ld    (HL), B 
9146 23			      inc   HL 
9147 e5			      push  HL                      ; Address of allocation to return 
9148			 
9148 18 19		      jr    malloc_update_links 
914a			 
914a			malloc_alloc_fit: 
914a e1			      pop   HL                      ; Dont need new block size, want is exact fit 
914b			 
914b					if DEBUG_FORTH_MALLOC 
914b						DMARK "MAf" 
914b						CALLMONITOR 
914b					endif 
914b			      ; Modify this_free block to be allocation 
914b eb			      ex    DE, HL 
914c 2b			      dec   HL 
914d 2b			      dec   HL 
914e 2b			      dec   HL 
914f			 
914f af			      xor   A                       ; Null the next block ptr of allocated block 
9150 77			      ld    (HL), A 
9151 23			      inc   HL 
9152 77			      ld    (HL), A 
9153			 
9153 23			      inc   HL                      ; Store address of allocation to return 
9154 23			      inc   HL 
9155 23			      inc   HL 
9156 e5			      push  HL 
9157			 
9157			      ; Copy next_free ptr to this_free, remove allocated block from free list 
9157 dd 6e 00		      ld    L, (IX+0)               ; next_free to HL 
915a dd 66 01		      ld    H, (IX+1) 
915d			 
915d dd 75 02		      ld    (IX+2), L               ; HL to this_free 
9160 dd 74 03		      ld    (IX+3), H 
9163			 
9163			 
9163			malloc_update_links: 
9163			      ; Update prev_free ptr to point to this_free 
9163 dd 6e 04		      ld    L, (IX+4)               ; prev_free ptr to HL 
9166 dd 66 05		      ld    H, (IX+5) 
9169			 
9169 dd 5e 02		      ld    E, (IX+2)               ; this_free ptr to DE 
916c dd 56 03		      ld    D, (IX+3) 
916f			 
916f 73			      ld    (HL), E                 ; this_free ptr into prev_free 
9170 23			      inc   HL 
9171 72			      ld    (HL), D 
9172			 
9172					if DEBUG_FORTH_MALLOC 
9172						DMARK "Mul" 
9172						CALLMONITOR 
9172					endif 
9172			      ; Clear the Z flag to indicate successful allocation 
9172 7a			      ld    A, D 
9173 b3			      or    E 
9174			 
9174 d1			      pop   DE                      ; Address of allocation 
9175					if DEBUG_FORTH_MALLOC 
9175						DMARK "MAu" 
9175						CALLMONITOR 
9175					endif 
9175			 
9175			malloc_no_space: 
9175 21 06 00		      ld    HL, 6                   ; Clean up stack frame 
9178 39			      add   HL, SP 
9179 f9			      ld    SP, HL 
917a			 
917a eb			      ex    DE, HL                  ; Alloc addr into HL for return 
917b					if DEBUG_FORTH_MALLOC 
917b						DMARK "MAN" 
917b						CALLMONITOR 
917b					endif 
917b			 
917b			malloc_early_exit: 
917b					if DEBUG_FORTH_MALLOC 
917b						DMARK "MAx" 
917b						CALLMONITOR 
917b					endif 
917b dd e1		      pop   IX 
917d d1			      pop   DE 
917e c1			      pop   BC 
917f			 
917f			if DEBUG_FORTH_MALLOC_HIGH 
917f			call malloc_guard_exit 
917f			call malloc_guard_zerolen 
917f			endif 
917f c9			      ret 
9180			 
9180			 
9180			;------------------------------------------------------------------------------ 
9180			;     free                                                                    : 
9180			;                                                                             : 
9180			; Description                                                                 : 
9180			;     Return the space pointed to by HL to the heap. HL must be an address as : 
9180			;     returned by malloc, otherwise the behaviour is undefined.               : 
9180			;                                                                             : 
9180			;     Where possible, directly adjacent free blocks will be merged together   : 
9180			;     into larger blocks to help ensure that the heap does not become         : 
9180			;     excessively fragmented.                                                 : 
9180			;                                                                             : 
9180			;     free does not clear or set any other value into the freed space, and    : 
9180			;     therefore its contents may be visible through subsequent malloc's. The  : 
9180			;     caller should clear the freed space as required.                        : 
9180			;                                                                             : 
9180			;     This implementation of free uses the stack exclusively, and is          : 
9180			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
9180			;     advisable to disable interrupts before calling free, and recommended    : 
9180			;     to avoid the use of free inside ISRs in general.                        : 
9180			;                                                                             : 
9180			;     NOTE: heap_init must be called before malloc and free can be used.      : 
9180			;                                                                             : 
9180			; Parameters                                                                  : 
9180			;     HL  Pointer to address of first byte of allocation to be freed          : 
9180			;                                                                             : 
9180			; Returns                                                                     : 
9180			;     Nothing                                                                 : 
9180			;                                                                             : 
9180			; Stack frame                                                                 : 
9180			;       |             |                                                       : 
9180			;       +-------------+                                                       : 
9180			;       |     BC      |                                                       : 
9180			;       +-------------+                                                       : 
9180			;       |     DE      |                                                       : 
9180			;       +-------------+                                                       : 
9180			;       |     IX      |                                                       : 
9180			;       +-------------+                                                       : 
9180			;       |  prev_free  |                                                       : 
9180			;   +2  +-------------+                                                       : 
9180			;       |  next_free  |                                                       : 
9180			;   +0  +-------------+                                                       : 
9180			;       |             |                                                       : 
9180			;                                                                             : 
9180			;------------------------------------------------------------------------------ 
9180			free: 
9180 c5			      push  BC 
9181 d5			      push  DE 
9182 dd e5		      push  IX 
9184			 
9184 7c			      ld    A, H                    ; Exit if ptr is null 
9185 b5			      or    L 
9186 ca 4a 92		      jp    Z, free_early_exit 
9189			 
9189			      ; Set up stack frame 
9189 eb			      ex    DE, HL 
918a 21 fc ff		      ld    HL, -4                  ; Reserve 4 bytes for stack frame 
918d 39			      add   HL, SP 
918e f9			      ld    SP, HL 
918f dd 21 00 00	      ld    IX, 0                   ; Use IX as a frame pointer 
9193 dd 39		      add   IX, SP 
9195			 
9195			      ; The address in HL points to the start of the useable allocated space, 
9195			      ; but the block struct starts 4 bytes before this. Sub 4 to get the 
9195			      ; address of the block itself. 
9195 eb			      ex    DE, HL 
9196 11 fc ff		      ld    DE, -4 
9199 19			      add   HL, DE 
919a			 
919a			      ; An allocated block must have a null next block pointer in it 
919a 7e			      ld    A, (HL) 
919b 23			      inc   HL 
919c b6			      or    (HL) 
919d c2 45 92		      jp    NZ, free_done 
91a0			 
91a0 2b			      dec   HL 
91a1			 
91a1 44			      ld    B, H                    ; Copy HL to BC 
91a2 4d			      ld    C, L 
91a3			 
91a3			      ; Loop through the free list to find the first block with an address 
91a3			      ; higher than the block being freed 
91a3 21 0d dd		      ld    HL, free_list 
91a6			 
91a6			free_find_higher_block: 
91a6 5e			      ld    E, (HL)                 ; Load next ptr from free block 
91a7 23			      inc   HL 
91a8 56			      ld    D, (HL) 
91a9 2b			      dec   HL 
91aa			 
91aa dd 73 00		      ld    (IX+0), E               ; Save ptr to next free block 
91ad dd 72 01		      ld    (IX+1), D 
91b0 dd 75 02		      ld    (IX+2), L               ; Save ptr to prev free block 
91b3 dd 74 03		      ld    (IX+3), H 
91b6			 
91b6 78			      ld    A, B                    ; Check if DE is greater than BC 
91b7 ba			      cp    D                       ; Compare MSB first 
91b8 28 02		      jr    Z, $+4                  ; MSB the same, compare LSB 
91ba 30 04		      jr    NC, free_find_higher_block_skip 
91bc 79			      ld    A, C 
91bd bb			      cp    E                       ; Then compare LSB 
91be 38 08		      jr    C, free_found_higher_block 
91c0			 
91c0			free_find_higher_block_skip: 
91c0 7a			      ld    A, D                    ; Reached the end of the free list? 
91c1 b3			      or    E 
91c2 ca 45 92		      jp    Z, free_done 
91c5			 
91c5 eb			      ex    DE, HL 
91c6			 
91c6 18 de		      jr    free_find_higher_block 
91c8			 
91c8			free_found_higher_block: 
91c8			      ; Insert freed block between prev and next free blocks 
91c8 71			      ld    (HL), C                 ; Point prev free block to freed block 
91c9 23			      inc   HL 
91ca 70			      ld    (HL), B 
91cb			 
91cb 60			      ld    H, B                    ; Point freed block at next free block 
91cc 69			      ld    L, C 
91cd 73			      ld    (HL), E 
91ce 23			      inc   HL 
91cf 72			      ld    (HL), D 
91d0			 
91d0			      ; Check if the freed block is adjacent to the next free block 
91d0 23			      inc   HL                      ; Load size of freed block into HL 
91d1 5e			      ld    E, (HL) 
91d2 23			      inc   HL 
91d3 56			      ld    D, (HL) 
91d4 eb			      ex    DE, HL 
91d5			 
91d5 09			      add   HL, BC                  ; Add addr of freed block and its size 
91d6			 
91d6 dd 5e 00		      ld    E, (IX+0)               ; Load addr of next free block into DE 
91d9 dd 56 01		      ld    D, (IX+1) 
91dc			 
91dc b7			      or    A                       ; Clear the carry flag 
91dd ed 52		      sbc   HL, DE                  ; Subtract addrs to compare adjacency 
91df 20 22		      jr    NZ, free_check_adjacent_to_prev 
91e1			 
91e1			      ; Freed block is adjacent to next, merge into one bigger block 
91e1 eb			      ex    DE, HL                  ; Load next ptr from next block into DE 
91e2 5e			      ld    E, (HL) 
91e3 23			      inc   HL 
91e4 56			      ld    D, (HL) 
91e5 e5			      push  HL                      ; Save ptr to next block for later 
91e6			 
91e6 60			      ld    H, B                    ; Store ptr from next block into freed block 
91e7 69			      ld    L, C 
91e8 73			      ld    (HL), E 
91e9 23			      inc   HL 
91ea 72			      ld    (HL), D 
91eb			 
91eb e1			      pop   HL                      ; Restore ptr to next block 
91ec 23			      inc   HL                      ; Load size of next block into DE 
91ed 5e			      ld    E, (HL) 
91ee 23			      inc   HL 
91ef 56			      ld    D, (HL) 
91f0 d5			      push  DE                      ; Save next block size for later 
91f1			 
91f1 60			      ld    H, B                    ; Load size of freed block into HL 
91f2 69			      ld    L, C 
91f3 23			      inc   HL 
91f4 23			      inc   HL 
91f5 5e			      ld    E, (HL) 
91f6 23			      inc   HL 
91f7 56			      ld    D, (HL) 
91f8 eb			      ex    DE, HL 
91f9			 
91f9 d1			      pop   DE                      ; Restore size of next block 
91fa 19			      add   HL, DE                  ; Add sizes of both blocks 
91fb eb			      ex    DE, HL 
91fc			 
91fc 60			      ld    H, B                    ; Store new bigger size into freed block 
91fd 69			      ld    L, C 
91fe 23			      inc   HL 
91ff 23			      inc   HL 
9200 73			      ld    (HL), E 
9201 23			      inc   HL 
9202 72			      ld    (HL), D 
9203			 
9203			free_check_adjacent_to_prev: 
9203			      ; Check if the freed block is adjacent to the prev free block 
9203 dd 6e 02		      ld    L, (IX+2)               ; Prev free block ptr into HL 
9206 dd 66 03		      ld    H, (IX+3) 
9209			 
9209 23			      inc   HL                      ; Size of prev free block into DE 
920a 23			      inc   HL 
920b 5e			      ld    E, (HL) 
920c 23			      inc   HL 
920d 56			      ld    D, (HL) 
920e 2b			      dec   HL 
920f 2b			      dec   HL 
9210 2b			      dec   HL 
9211			 
9211 19			      add   HL, DE                  ; Add prev block addr and size 
9212			 
9212 b7			      or    A                       ; Clear the carry flag 
9213 ed 42		      sbc   HL, BC                  ; Subtract addrs to compare adjacency 
9215 20 2e		      jr    NZ, free_done 
9217			 
9217			      ; Freed block is adjacent to prev, merge into one bigger block 
9217 60			      ld    H, B                    ; Load next ptr from freed block into DE 
9218 69			      ld    L, C 
9219 5e			      ld    E, (HL) 
921a 23			      inc   HL 
921b 56			      ld    D, (HL) 
921c e5			      push  HL                      ; Save freed block ptr for later 
921d			 
921d dd 6e 02		      ld    L, (IX+2)               ; Store freed block ptr into prev block 
9220 dd 66 03		      ld    H, (IX+3) 
9223 73			      ld    (HL), E 
9224 23			      inc   HL 
9225 72			      ld    (HL), D 
9226			 
9226 e1			      pop   HL                      ; Restore freed block ptr 
9227 23			      inc   HL                      ; Load size of freed block into DE 
9228 5e			      ld    E, (HL) 
9229 23			      inc   HL 
922a 56			      ld    D, (HL) 
922b d5			      push  DE                      ; Save freed block size for later 
922c			 
922c dd 6e 02		      ld    L, (IX+2)               ; Load size of prev block into DE 
922f dd 66 03		      ld    H, (IX+3) 
9232 23			      inc   HL 
9233 23			      inc   HL 
9234 5e			      ld    E, (HL) 
9235 23			      inc   HL 
9236 56			      ld    D, (HL) 
9237			 
9237 e1			      pop   HL                      ; Add sizes of both blocks 
9238 19			      add   HL, DE 
9239 eb			      ex    DE, HL 
923a			 
923a dd 6e 02		      ld    L, (IX+2)               ; Store new bigger size into prev block 
923d dd 66 03		      ld    H, (IX+3) 
9240 23			      inc   HL 
9241 23			      inc   HL 
9242 73			      ld    (HL), E 
9243 23			      inc   HL 
9244 72			      ld    (HL), D 
9245			 
9245			free_done: 
9245 21 04 00		      ld    HL, 4                   ; Clean up stack frame 
9248 39			      add   HL, SP 
9249 f9			      ld    SP, HL 
924a			 
924a			free_early_exit: 
924a dd e1		      pop   IX 
924c d1			      pop   DE 
924d c1			      pop   BC 
924e			 
924e c9			      ret 
924f			 
924f			; moved to firmware.asm 
924f			; 
924f			;free_list         .dw   0     ; Block struct for start of free list (MUST be 4 bytes) 
924f			;                  .dw   0 
924f			 
924f			 
924f			endif 
924f			 
924f			 
924f			if MALLOC_3 
924f			; https://gist.githubusercontent.com/tomstorey/947a8b084bad69391a4b2a1c5b6d69ca/raw/5a08fb30a480d98c0deb4a6afe2d48961cc8e9d9/z80_malloc.s 
924f			;heap_start        .equ  0x9000      ; Starting address of heap 
924f			;heap_size         .equ  0x0100      ; Number of bytes available in heap 
924f			; 
924f			 ;     .org 0 
924f			  ;    jp    main 
924f			; 
924f			; 
924f			 ;     .org  0x100 
924f			;main: 
924f			 ;     ld    HL, 0x8100 
924f			  ;    ld    SP, HL 
924f			; 
924f			;      call  heap_init 
924f			 
924f			      ; Make some allocations 
924f			;      ld    HL, 12 
924f			;      call  malloc            ; Allocates 0x9004 
924f			; 
924f			 ;     ld    HL, 12 
924f			;      call  malloc            ; Allocates 0x9014 
924f			 
924f			;      ld    HL, 12 
924f			;      call  malloc            ; Allocates 0x9024 
924f			 
924f			      ; Free some allocations 
924f			;      ld    HL, 0x9014 
924f			;      call  free 
924f			 
924f			;      ld    HL, 0x9004 
924f			;      call  free 
924f			; 
924f			;      ld    HL, 0x9024 
924f			;      call  free 
924f			 
924f			 
924f			 ;     halt 
924f			 
924f			 
924f			;------------------------------------------------------------------------------ 
924f			;     heap_init                                                               : 
924f			;                                                                             : 
924f			; Description                                                                 : 
924f			;     Initialise the heap and make it ready for malloc and free operations.   : 
924f			;                                                                             : 
924f			;     The heap is maintained as a linked list, starting with an initial       : 
924f			;     "dummy block" of zero size which is mainly used to hold a pointer to    : 
924f			;     the first free block in the heap. Each block then points to the next    : 
924f			;     free block within the heap, and the free list ends at the first block   : 
924f			;     with a null pointer to the next free block.                             : 
924f			;                                                                             : 
924f			; Parameters                                                                  : 
924f			;     Inputs are compile-time only. Two defines which specify the starting    : 
924f			;     address of the heap and its size are required, along with a memory      : 
924f			;     allocation of 4 consecutive bytes which is used for a dummy block which : 
924f			;     principally stores a pointer to the first free block in the heap.       : 
924f			;                                                                             : 
924f			; Returns                                                                     : 
924f			;     Nothing                                                                 : 
924f			;------------------------------------------------------------------------------ 
924f			heap_init: 
924f			      push  HL 
924f			 
924f			      ; Initialise free list struct 
924f			      ld    HL, heap_start 
924f			      ld    (free_list), HL 
924f			      ld    HL, 0 
924f			      ld    (free_list+2), HL 
924f			 
924f			      ; Insert first free block at bottom of heap, consumes entire heap 
924f			      ld    HL, heap_start+heap_size-4 
924f			      ld    (heap_start), HL        ; Next block (end of free list) 
924f			      ld    HL, heap_size-4 
924f			      ld    (heap_start+2), HL      ; Block size 
924f			 
924f			      ; Insert end of free list block at top of heap - two null words will 
924f			      ; terminate the free list 
924f			      ld    HL, 0 
924f			      ld    (heap_start+heap_size-2), HL 
924f			      ld    (heap_start+heap_size-4), HL 
924f			 
924f			      pop   HL 
924f			 
924f			      ret 
924f			 
924f			 
924f			;------------------------------------------------------------------------------ 
924f			;     malloc                                                                  : 
924f			;                                                                             : 
924f			; Description                                                                 : 
924f			;     Allocates the wanted space from the heap and returns the address of the : 
924f			;     first useable byte of the allocation.                                   : 
924f			;                                                                             : 
924f			;     Allocations can happen in one of two ways:                              : 
924f			;                                                                             : 
924f			;     1. A free block may be found which is the exact size wanted. In this    : 
924f			;        case the block is removed from the free list and retuedn to the      : 
924f			;        caller.                                                              : 
924f			;     2. A free block may be found which is larger than the size wanted. In   : 
924f			;        this case, the larger block is split into two. The first portion of  : 
924f			;        this block will become the requested space by the malloc call and    : 
924f			;        is returned to the caller. The second portion becomes a new free     : 
924f			;        block, and the free list is adjusted to maintain continuity via this : 
924f			;        newly created block.                                                 : 
924f			;                                                                             : 
924f			;     malloc does not set any initial value in the allocated space, the       : 
924f			;     caller is required to do this as required.                              : 
924f			;                                                                             : 
924f			;     This implementation of malloc uses the stack exclusively, and is        : 
924f			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
924f			;     advisable to disable interrupts before calling malloc, and recommended  : 
924f			;     to avoid the use of malloc inside ISRs in general.                      : 
924f			;                                                                             : 
924f			;     NOTE: heap_init must be called before malloc and free can be used.      : 
924f			;                                                                             : 
924f			; Parameters                                                                  : 
924f			;     HL  Number of bytes wanted                                              : 
924f			;                                                                             : 
924f			; Returns                                                                     : 
924f			;     HL  Address of the first useable byte of the allocation                 : 
924f			;                                                                             : 
924f			; Flags                                                                       : 
924f			;     Z   Set if the allocation did not succeed, clear otherwise              : 
924f			;                                                                             : 
924f			; Stack frame                                                                 : 
924f			;       |             |                                                       : 
924f			;       +-------------+                                                       : 
924f			;       |     BC      |                                                       : 
924f			;       +-------------+                                                       : 
924f			;       |     DE      |                                                       : 
924f			;       +-------------+                                                       : 
924f			;       |     IX      |                                                       : 
924f			;       +-------------+                                                       : 
924f			;       |  prev_free  |                                                       : 
924f			;   +4  +-------------+                                                       : 
924f			;       |  this_free  |                                                       : 
924f			;   +2  +-------------+                                                       : 
924f			;       |  next_free  |                                                       : 
924f			;   +0  +-------------+                                                       : 
924f			;       |             |                                                       : 
924f			;                                                                             : 
924f			;------------------------------------------------------------------------------ 
924f			malloc: 
924f			      push  BC 
924f			      push  DE 
924f			      push  IX 
924f			 
924f			      ld    A, H                    ; Exit if no space requested 
924f			      or    L 
924f			      jp    Z, malloc_early_exit 
924f			 
924f			      ; Set up stack frame 
924f			      ex    DE, HL 
924f			      ld    HL, -6                  ; Reserve 6 bytes for stack frame 
924f			      add   HL, SP 
924f			      ld    SP, HL 
924f			      ld    IX, 0                   ; Use IX as a frame pointer 
924f			      add   IX, SP 
924f			 
924f			      ; Setup initial state 
924f			      ld    HL, 4                   ; want must also include space used by block struct 
924f			      add   HL, DE 
924f			 
924f			      ld    B, H                    ; Move want to BC 
924f			      ld    C, L 
924f			 
924f			      ld    HL, free_list           ; Store prev_free ptr to stack 
924f			      ld    (IX+4), L 
924f			      ld    (IX+5), H 
924f			 
924f			      ld    E, (HL)                 ; Store this_free ptr to stack 
924f			      inc   HL 
924f			      ld    D, (HL) 
924f			      ld    (IX+2), E 
924f			      ld    (IX+3), D 
924f			      ex    DE, HL                  ; this_free ptr into HL 
924f			 
924f			      ; Loop through free block list to find some space 
924f			malloc_find_space: 
924f			      ld    E, (HL)                 ; Load next_free ptr into DE 
924f			      inc   HL 
924f			      ld    D, (HL) 
924f			 
924f			      ld    A, D                    ; Check for null next_free ptr - end of free list 
924f			      or    E 
924f			      jp    Z, malloc_no_space 
924f			 
924f			      ld    (IX+0), E               ; Store next_free ptr to stack 
924f			      ld    (IX+1), D 
924f			 
924f			      ; Does this block have enough space to make the allocation? 
924f			      inc   HL                      ; Load free block size into DE 
924f			      ld    E, (HL) 
924f			      inc   HL 
924f			      ld    D, (HL) 
924f			 
924f			      ex    DE, HL                  ; Check size of block against want 
924f			      or    A                       ; Ensure carry flag clear 
924f			      sbc   HL, BC 
924f			      push  HL                      ; Store the result for later (new block size) 
924f			 
924f			      jr    Z, malloc_alloc_fit     ; Z means block size matches want - can allocate 
924f			      jr    NC, malloc_alloc_split  ; NC means block is bigger than want - can allocate 
924f			 
924f			      ; this_free block is not big enough, setup ptrs to test next free block 
924f			      pop   HL                      ; Discard previous result 
924f			 
924f			      ld    L, (IX+2)               ; Move this_free ptr into prev_free 
924f			      ld    H, (IX+3) 
924f			      ld    (IX+4), L 
924f			      ld    (IX+5), H 
924f			 
924f			      ld    L, (IX+0)               ; Move next_free ptr into this_free 
924f			      ld    H, (IX+1) 
924f			      ld    (IX+2), L 
924f			      ld    (IX+3), H 
924f			 
924f			      jr    malloc_find_space 
924f			 
924f			      ; split a bigger block into two - requested size and remaining size 
924f			malloc_alloc_split: 
924f			      ex    DE, HL                  ; Calculate address of new free block 
924f			      dec   HL 
924f			      dec   HL 
924f			      dec   HL 
924f			      add   HL, BC 
924f			 
924f			      ; Create a new block and point it at next_free 
924f			      ld    E, (IX+0)               ; Load next_free ptr into DE 
924f			      ld    D, (IX+1) 
924f			 
924f			      ld    (HL), E                 ; Store next_free ptr into new block 
924f			      inc   HL 
924f			      ld    (HL), D 
924f			 
924f			      pop   DE                      ; Store size of new block into new block 
924f			      inc   HL 
924f			      ld    (HL), E 
924f			      inc   HL 
924f			      ld    (HL), D 
924f			 
924f			      ; Update this_free ptr to point to new block 
924f			      dec   HL 
924f			      dec   HL 
924f			      dec   HL 
924f			 
924f			      ld    E, (IX+2)               ; Take a copy of current this_free ptr 
924f			      ld    D, (IX+3) 
924f			 
924f			      ld    (IX+2), L               ; Store new block addr as this_free ptr 
924f			      ld    (IX+3), H 
924f			 
924f			      ; Modify this_free block to be allocation 
924f			      ex    DE, HL 
924f			      xor   A                       ; Null the next block ptr of allocated block 
924f			      ld    (HL), A 
924f			      inc   HL 
924f			      ld    (HL), A 
924f			 
924f			      inc   HL                      ; Store want size into allocated block 
924f			      ld    (HL), C 
924f			      inc   HL 
924f			      ld    (HL), B 
924f			      inc   HL 
924f			      push  HL                      ; Address of allocation to return 
924f			 
924f			      jr    malloc_update_links 
924f			 
924f			malloc_alloc_fit: 
924f			      pop   HL                      ; Dont need new block size, want is exact fit 
924f			 
924f			      ; Modify this_free block to be allocation 
924f			      ex    DE, HL 
924f			      dec   HL 
924f			      dec   HL 
924f			      dec   HL 
924f			 
924f			      xor   A                       ; Null the next block ptr of allocated block 
924f			      ld    (HL), A 
924f			      inc   HL 
924f			      ld    (HL), A 
924f			 
924f			      inc   HL                      ; Store address of allocation to return 
924f			      inc   HL 
924f			      inc   HL 
924f			      push  HL 
924f			 
924f			      ; Copy next_free ptr to this_free, remove allocated block from free list 
924f			      ld    L, (IX+0)               ; next_free to HL 
924f			      ld    H, (IX+1) 
924f			 
924f			      ld    (IX+2), L               ; HL to this_free 
924f			      ld    (IX+3), H 
924f			 
924f			 
924f			malloc_update_links: 
924f			      ; Update prev_free ptr to point to this_free 
924f			      ld    L, (IX+4)               ; prev_free ptr to HL 
924f			      ld    H, (IX+5) 
924f			 
924f			      ld    E, (IX+2)               ; this_free ptr to DE 
924f			      ld    D, (IX+3) 
924f			 
924f			      ld    (HL), E                 ; this_free ptr into prev_free 
924f			      inc   HL 
924f			      ld    (HL), D 
924f			 
924f			      ; Clear the Z flag to indicate successful allocation 
924f			      ld    A, D 
924f			      or    E 
924f			 
924f			      pop   DE                      ; Address of allocation 
924f			 
924f			malloc_no_space: 
924f			      ld    HL, 6                   ; Clean up stack frame 
924f			      add   HL, SP 
924f			      ld    SP, HL 
924f			 
924f			      ex    DE, HL                  ; Alloc addr into HL for return 
924f			 
924f			malloc_early_exit: 
924f			      pop   IX 
924f			      pop   DE 
924f			      pop   BC 
924f			 
924f			      ret 
924f			 
924f			 
924f			;------------------------------------------------------------------------------ 
924f			;     free                                                                    : 
924f			;                                                                             : 
924f			; Description                                                                 : 
924f			;     Return the space pointed to by HL to the heap. HL must be an address as : 
924f			;     returned by malloc, otherwise the behaviour is undefined.               : 
924f			;                                                                             : 
924f			;     Where possible, directly adjacent free blocks will be merged together   : 
924f			;     into larger blocks to help ensure that the heap does not become         : 
924f			;     excessively fragmented.                                                 : 
924f			;                                                                             : 
924f			;     free does not clear or set any other value into the freed space, and    : 
924f			;     therefore its contents may be visible through subsequent malloc's. The  : 
924f			;     caller should clear the freed space as required.                        : 
924f			;                                                                             : 
924f			;     This implementation of free uses the stack exclusively, and is          : 
924f			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
924f			;     advisable to disable interrupts before calling free, and recommended    : 
924f			;     to avoid the use of free inside ISRs in general.                        : 
924f			;                                                                             : 
924f			;     NOTE: heap_init must be called before malloc and free can be used.      : 
924f			;                                                                             : 
924f			; Parameters                                                                  : 
924f			;     HL  Pointer to address of first byte of allocation to be freed          : 
924f			;                                                                             : 
924f			; Returns                                                                     : 
924f			;     Nothing                                                                 : 
924f			;                                                                             : 
924f			; Stack frame                                                                 : 
924f			;       |             |                                                       : 
924f			;       +-------------+                                                       : 
924f			;       |     BC      |                                                       : 
924f			;       +-------------+                                                       : 
924f			;       |     DE      |                                                       : 
924f			;       +-------------+                                                       : 
924f			;       |     IX      |                                                       : 
924f			;       +-------------+                                                       : 
924f			;       |  prev_free  |                                                       : 
924f			;   +2  +-------------+                                                       : 
924f			;       |  next_free  |                                                       : 
924f			;   +0  +-------------+                                                       : 
924f			;       |             |                                                       : 
924f			;                                                                             : 
924f			;------------------------------------------------------------------------------ 
924f			free: 
924f			      push  BC 
924f			      push  DE 
924f			      push  IX 
924f			 
924f			      ld    A, H                    ; Exit if ptr is null 
924f			      or    L 
924f			      jp    Z, free_early_exit 
924f			 
924f			      ; Set up stack frame 
924f			      ex    DE, HL 
924f			      ld    HL, -4                  ; Reserve 4 bytes for stack frame 
924f			      add   HL, SP 
924f			      ld    SP, HL 
924f			      ld    IX, 0                   ; Use IX as a frame pointer 
924f			      add   IX, SP 
924f			 
924f			      ; The address in HL points to the start of the useable allocated space, 
924f			      ; but the block struct starts 4 bytes before this. Sub 4 to get the 
924f			      ; address of the block itself. 
924f			      ex    DE, HL 
924f			      ld    DE, -4 
924f			      add   HL, DE 
924f			 
924f			      ; An allocated block must have a null next block pointer in it 
924f			      ld    A, (HL) 
924f			      inc   HL 
924f			      or    (HL) 
924f			      jp    NZ, free_done 
924f			 
924f			      dec   HL 
924f			 
924f			      ld    B, H                    ; Copy HL to BC 
924f			      ld    C, L 
924f			 
924f			      ; Loop through the free list to find the first block with an address 
924f			      ; higher than the block being freed 
924f			      ld    HL, free_list 
924f			 
924f			free_find_higher_block: 
924f			      ld    E, (HL)                 ; Load next ptr from free block 
924f			      inc   HL 
924f			      ld    D, (HL) 
924f			      dec   HL 
924f			 
924f			      ld    (IX+0), E               ; Save ptr to next free block 
924f			      ld    (IX+1), D 
924f			      ld    (IX+2), L               ; Save ptr to prev free block 
924f			      ld    (IX+3), H 
924f			 
924f			      ld    A, B                    ; Check if DE is greater than BC 
924f			      cp    D                       ; Compare MSB first 
924f			      jr    Z, $+4                  ; MSB the same, compare LSB 
924f			      jr    NC, free_find_higher_block_skip 
924f			      ld    A, C 
924f			      cp    E                       ; Then compare LSB 
924f			      jr    C, free_found_higher_block 
924f			 
924f			free_find_higher_block_skip: 
924f			      ld    A, D                    ; Reached the end of the free list? 
924f			      or    E 
924f			      jp    Z, free_done 
924f			 
924f			      ex    DE, HL 
924f			 
924f			      jr    free_find_higher_block 
924f			 
924f			free_found_higher_block: 
924f			      ; Insert freed block between prev and next free blocks 
924f			      ld    (HL), C                 ; Point prev free block to freed block 
924f			      inc   HL 
924f			      ld    (HL), B 
924f			 
924f			      ld    H, B                    ; Point freed block at next free block 
924f			      ld    L, C 
924f			      ld    (HL), E 
924f			      inc   HL 
924f			      ld    (HL), D 
924f			 
924f			      ; Check if the freed block is adjacent to the next free block 
924f			      inc   HL                      ; Load size of freed block into HL 
924f			      ld    E, (HL) 
924f			      inc   HL 
924f			      ld    D, (HL) 
924f			      ex    DE, HL 
924f			 
924f			      add   HL, BC                  ; Add addr of freed block and its size 
924f			 
924f			      ld    E, (IX+0)               ; Load addr of next free block into DE 
924f			      ld    D, (IX+1) 
924f			 
924f			      or    A                       ; Clear the carry flag 
924f			      sbc   HL, DE                  ; Subtract addrs to compare adjacency 
924f			      jr    NZ, free_check_adjacent_to_prev 
924f			 
924f			      ; Freed block is adjacent to next, merge into one bigger block 
924f			      ex    DE, HL                  ; Load next ptr from next block into DE 
924f			      ld    E, (HL) 
924f			      inc   HL 
924f			      ld    D, (HL) 
924f			      push  HL                      ; Save ptr to next block for later 
924f			 
924f			      ld    H, B                    ; Store ptr from next block into freed block 
924f			      ld    L, C 
924f			      ld    (HL), E 
924f			      inc   HL 
924f			      ld    (HL), D 
924f			 
924f			      pop   HL                      ; Restore ptr to next block 
924f			      inc   HL                      ; Load size of next block into DE 
924f			      ld    E, (HL) 
924f			      inc   HL 
924f			      ld    D, (HL) 
924f			      push  DE                      ; Save next block size for later 
924f			 
924f			      ld    H, B                    ; Load size of freed block into HL 
924f			      ld    L, C 
924f			      inc   HL 
924f			      inc   HL 
924f			      ld    E, (HL) 
924f			      inc   HL 
924f			      ld    D, (HL) 
924f			      ex    DE, HL 
924f			 
924f			      pop   DE                      ; Restore size of next block 
924f			      add   HL, DE                  ; Add sizes of both blocks 
924f			      ex    DE, HL 
924f			 
924f			      ld    H, B                    ; Store new bigger size into freed block 
924f			      ld    L, C 
924f			      inc   HL 
924f			      inc   HL 
924f			      ld    (HL), E 
924f			      inc   HL 
924f			      ld    (HL), D 
924f			 
924f			free_check_adjacent_to_prev: 
924f			      ; Check if the freed block is adjacent to the prev free block 
924f			      ld    L, (IX+2)               ; Prev free block ptr into HL 
924f			      ld    H, (IX+3) 
924f			 
924f			      inc   HL                      ; Size of prev free block into DE 
924f			      inc   HL 
924f			      ld    E, (HL) 
924f			      inc   HL 
924f			      ld    D, (HL) 
924f			      dec   HL 
924f			      dec   HL 
924f			      dec   HL 
924f			 
924f			      add   HL, DE                  ; Add prev block addr and size 
924f			 
924f			      or    A                       ; Clear the carry flag 
924f			      sbc   HL, BC                  ; Subtract addrs to compare adjacency 
924f			      jr    NZ, free_done 
924f			 
924f			      ; Freed block is adjacent to prev, merge into one bigger block 
924f			      ld    H, B                    ; Load next ptr from freed block into DE 
924f			      ld    L, C 
924f			      ld    E, (HL) 
924f			      inc   HL 
924f			      ld    D, (HL) 
924f			      push  HL                      ; Save freed block ptr for later 
924f			 
924f			      ld    L, (IX+2)               ; Store freed block ptr into prev block 
924f			      ld    H, (IX+3) 
924f			      ld    (HL), E 
924f			      inc   HL 
924f			      ld    (HL), D 
924f			 
924f			      pop   HL                      ; Restore freed block ptr 
924f			      inc   HL                      ; Load size of freed block into DE 
924f			      ld    E, (HL) 
924f			      inc   HL 
924f			      ld    D, (HL) 
924f			      push  DE                      ; Save freed block size for later 
924f			 
924f			      ld    L, (IX+2)               ; Load size of prev block into DE 
924f			      ld    H, (IX+3) 
924f			      inc   HL 
924f			      inc   HL 
924f			      ld    E, (HL) 
924f			      inc   HL 
924f			      ld    D, (HL) 
924f			 
924f			      pop   HL                      ; Add sizes of both blocks 
924f			      add   HL, DE 
924f			      ex    DE, HL 
924f			 
924f			      ld    L, (IX+2)               ; Store new bigger size into prev block 
924f			      ld    H, (IX+3) 
924f			      inc   HL 
924f			      inc   HL 
924f			      ld    (HL), E 
924f			      inc   HL 
924f			      ld    (HL), D 
924f			 
924f			free_done: 
924f			      ld    HL, 4                   ; Clean up stack frame 
924f			      add   HL, SP 
924f			      ld    SP, HL 
924f			 
924f			free_early_exit: 
924f			      pop   IX 
924f			      pop   DE 
924f			      pop   BC 
924f			 
924f			      ret 
924f			 
924f			 
924f			;      .org 0x8000 
924f			; 
924f			;free_list         .dw   0     ; Block struct for start of free list (MUST be 4 bytes) 
924f			 ;                 .dw   0 
924f			 
924f			endif 
924f			 
924f			 
924f			if MALLOC_4 
924f			 
924f			; My memory allocation code. Very very simple.... 
924f			; allocate space under 250 chars 
924f			 
924f			heap_init: 
924f				; init start of heap as zero 
924f				;  
924f			 
924f				ld hl, heap_start 
924f				ld a, 0 
924f				ld (hl), a      ; empty block 
924f				inc hl 
924f				ld a, 0 
924f				ld (hl), a      ; length of block 
924f				; write end of list 
924f				inc hl 
924f				ld a,(hl) 
924f				inc hl 
924f				ld a,(hl) 
924f				 
924f			 
924f				; init some malloc vars 
924f			 
924f				ld hl, 0 
924f				ld (free_list), hl       ; store last malloc location 
924f			 
924f				ld hl, free_list+3      ; flag for 'free' being used and force a rescan for reuse of block  
924f				ld a, 0 
924f				ld (hl), a 
924f			 
924f			 
924f				ld hl, heap_start 
924f				;  
924f				  
924f				ret 
924f			 
924f			 
924f			;    free block marker 
924f			;    requested size  
924f			;    pointer to next block 
924f			;    .... 
924f			;    next block marker 
924f			 
924f			 
924f			; TODO add a flag that is reset on use of free. if flag is reset then start scan from start of heap otherwise use last location 
924f			; 
924f			 
924f			 
924f			malloc:  
924f				push de 
924f				push bc 
924f				push af 
924f			 
924f				; hl space required 
924f				 
924f				ld c, l    ; hold space   (TODO only a max of 255) 
924f			 
924f			;	inc c     ; TODO BUG need to fix memory leak on push str 
924f			;	inc c 
924f			;	inc c 
924f			;	inc c 
924f			;	inc c 
924f			;	inc c 
924f			;	inc c 
924f			 
924f			 
924f			 
924f				; start at heap if a free has been issued so we can reclaim it otherwise continue from last time 
924f			 
924f				ld a, (free_list+3) 
924f				cp 0 
924f				jr z, .contheap 
924f			 
924f				ld hl, (free_list)     ; get last alloc 
924f					if DEBUG_FORTH_MALLOC_INT 
924f						DMARK "mrs" 
924f						CALLMONITOR 
924f					endif 
924f				jr .startalloc 
924f			 
924f			.contheap: 
924f				ld hl, heap_start 
924f			 
924f			.startalloc: 
924f			 
924f					if DEBUG_FORTH_MALLOC_INT 
924f						DMARK "mym" 
924f						CALLMONITOR 
924f					endif 
924f			.findblock: 
924f					if DEBUG_FORTH_MALLOC_INT 
924f						DMARK "mmf" 
924f						CALLMONITOR 
924f					endif 
924f			 
924f				ld a,(hl)  
924f				; if byte is zero then clear to use 
924f			 
924f				cp 0 
924f				jr z, .foundemptyblock 
924f			 
924f				; if byte is not clear 
924f				;     then byte is offset to next block 
924f			 
924f				inc hl 
924f				ld a, (hl) ; get size 
924f			.nextblock:	inc hl 
924f					ld e, (hl) 
924f					inc hl 
924f					ld d, (hl) 
924f					ex de, hl 
924f			;	inc hl  ; move past the store space 
924f			;	inc hl  ; move past zero index  
924f			 
924f				; TODO detect no more space 
924f			 
924f				push hl 
924f				ld de, heap_end 
924f				call cmp16 
924f				pop hl 
924f				jr nc, .nospace 
924f			 
924f				jr .findblock 
924f			 
924f			.nospace: ld hl, 0 
924f				jp .exit 
924f			 
924f			 
924f			.foundemptyblock:	 
924f					if DEBUG_FORTH_MALLOC_INT 
924f						DMARK "mme" 
924f						CALLMONITOR 
924f					endif 
924f			 
924f			; TODO has block enough space if reusing??? 
924f			 
924f				;  
924f			 
924f			; see if this block has been previously used 
924f				inc hl 
924f				ld a, (hl) 
924f				dec hl 
924f				cp 0 
924f				jr z, .newblock 
924f			 
924f					if DEBUG_FORTH_MALLOC_INT 
924f						DMARK "meR" 
924f						CALLMONITOR 
924f					endif 
924f			 
924f			; no reusing previously allocated block 
924f			 
924f			; is it smaller than previously used? 
924f				 
924f				inc hl    ; move to size 
924f				ld a, c 
924f				sub (hl)        ; we want c < (hl) 
924f				dec hl    ; move back to marker 
924f			        jr z, .findblock 
924f			 
924f				; update with the new size which should be lower 
924f			 
924f			        ;inc  hl   ; negate next move. move back to size  
924f			 
924f			.newblock: 
924f				; need to be at marker here 
924f			 
924f					if DEBUG_FORTH_MALLOC_INT 
924f						DMARK "meN" 
924f						CALLMONITOR 
924f					endif 
924f			 
924f			 
924f				ld a, c 
924f			 
924f				ld (free_list+3), a	 ; flag resume from last malloc  
924f				ld (free_list), hl    ; save out last location 
924f			 
924f			 
924f				;inc a     ; space for length byte 
924f				ld (hl), a     ; save block in use marker 
924f			 
924f				inc hl   ; move to space marker 
924f				ld (hl), a    ; save new space 
924f			 
924f				inc hl   ; move to start of allocated area 
924f				 
924f			;	push hl     ; save where we are - 1  
924f			 
924f			;	inc hl  ; move past zero index  
924f				; skip space to set down new marker 
924f			 
924f				; provide some extra space for now 
924f			 
924f				inc a    ; actual is one fewer than bytes requested. correct if zero index is taken into account 
924f				inc a 
924f				inc a 
924f			 
924f				push hl   ; save where we are in the node block 
924f			 
924f				call addatohl 
924f			 
924f				; write linked list point 
924f			 
924f				pop de     ; get our node position 
924f				ex de, hl 
924f			 
924f				ld (hl), e 
924f				inc hl 
924f				ld (hl), d 
924f			 
924f				inc hl 
924f			 
924f				; now at start of allocated data so save pointer 
924f			 
924f				push hl 
924f			 
924f				; jump to position of next node and setup empty header in DE 
924f			 
924f				ex de, hl 
924f			 
924f			;	inc hl ; move past end of block 
924f			 
924f				ld a, 0 
924f				ld (hl), a   ; empty marker 
924f				inc hl 
924f				ld (hl), a   ; size 
924f				inc hl  
924f				ld (hl), a   ; ptr 
924f				inc hl 
924f				ld (hl), a   ; ptr 
924f			 
924f			 
924f				pop hl 
924f			 
924f					if DEBUG_FORTH_MALLOC_INT 
924f						DMARK "mmr" 
924f						CALLMONITOR 
924f					endif 
924f			 
924f			.exit: 
924f				pop af 
924f				pop bc 
924f				pop de  
924f				ret 
924f			 
924f			 
924f			 
924f			 
924f			free:  
924f				push hl 
924f				push af 
924f				; get address in hl 
924f			 
924f					if DEBUG_FORTH_MALLOC_INT 
924f						DMARK "fre" 
924f						CALLMONITOR 
924f					endif 
924f				; data is at hl - move to block count 
924f				dec hl 
924f				dec hl    ; get past pointer 
924f				dec hl 
924f			 
924f				ld a, (hl)    ; need this for a validation check 
924f			 
924f				dec hl    ; move to block marker 
924f			 
924f				; now check that the block count and block marker are the same  
924f			        ; this checks that we are on a malloc node and not random memory 
924f			        ; OK a faint chance this could be a problem but rare - famous last words! 
924f			 
924f				ld c, a 
924f				ld a, (hl)    
924f			 
924f				cp c 
924f				jr nz, .freeignore      ; not a valid malloc node in use so dont break anything 
924f			 
924f				; yes good chance we are on a malloc node 
924f			 
924f				ld a, 0      
924f				ld (hl), a   ; mark as free 
924f			 
924f				ld (free_list+3), a	 ; flag reuse of existing block on next malloc 
924f			 
924f			.freeignore:  
924f			 
924f				pop af 
924f				pop hl 
924f			 
924f				ret 
924f			 
924f			 
924f			 
924f			endif 
924f			 
924f			; eof 
# End of file firmware_memory.asm
924f			  
924f			; device C  
924f			; Now handled by SPI  
924f			;if SOUND_ENABLE  
924f			;	include "firmware_sound.asm"  
924f			;endif  
924f			  
924f			include "firmware_diags.asm"  
924f			; Hardware diags menu 
924f			 
924f			 
924f			config: 
924f			 
924f 3e 00			ld a, 0 
9251 21 75 92			ld hl, .configmn 
9254 cd df 8a			call menu 
9257			 
9257 fe 00			cp 0 
9259 c8				ret z 
925a			 
925a			;	cp 1 
925a			;	call z, .savetostore 
925a			 
925a fe 01			cp 1 
925c			if STARTUP_V1 
925c cc 8b 92			call z, .selautoload 
925f			endif 
925f			 
925f			if STARTUP_V2 
925f				call z, .enautoload 
925f			endif 
925f fe 02			cp 2 
9261 cc 81 92			call z, .disautoload 
9264			;	cp 3 
9264			;	call z, .selbank 
9264 fe 03			cp 3 
9266 cc a9 92			call z, .debug_tog 
9269 fe 04			cp 4 
926b cc f7 93			call z, .bpsgo 
926e fe 05			cp 5 
9270 cc d2 92			call z, hardware_diags 
9273			if STARTUP_V2 
9273				cp 6 
9273				call z, create_startup 
9273			endif 
9273 18 da			jr config 
9275			 
9275			.configmn: 
9275			;	dw prom_c3 
9275 e5 95			dw prom_c2 
9277 fa 95			dw prom_c2a 
9279			;	dw prom_c2b 
9279			;	dw prom_c4 
9279 19 96			dw prom_m4 
927b 34 96			dw prom_m4b 
927d 3c 96			dw prom_c1 
927f			if STARTUP_V2 
927f				dw prom_c9 
927f			endif 
927f 00 00			dw 0 
9281				 
9281			 
9281			if STARTUP_V2 
9281			.enautoload: 
9281				if STORAGE_SE 
9281				ld a, $fe      ; bit 0 clear 
9281				ld (spi_device), a 
9281			 
9281				call storage_get_block_0 
9281			 
9281				ld a, 1 
9281				ld (store_page+STORE_0_AUTOFILE), a 
9281			 
9281					ld hl, 0 
9281					ld de, store_page 
9281				call storage_write_block	 ; save update 
9281				else 
9281			 
9281				ld hl, prom_notav 
9281				ld de, prom_empty 
9281				call info_panel 
9281				endif 
9281			 
9281			 
9281				ret 
9281			endif 
9281			 
9281			.disautoload: 
9281				if STORAGE_SE 
9281				ld a, $fe      ; bit 0 clear 
9281				ld (spi_device), a 
9281			 
9281				call storage_get_block_0 
9281			 
9281				ld a, 0 
9281				ld (store_page+STORE_0_AUTOFILE), a 
9281			 
9281					ld hl, 0 
9281					ld de, store_page 
9281				call storage_write_block	 ; save update 
9281				else 
9281			 
9281 21 4b 96			ld hl, prom_notav 
9284 11 61 96			ld de, prom_empty 
9287 cd 3f 8a			call info_panel 
928a				endif 
928a			 
928a			 
928a c9				ret 
928b			 
928b			if STARTUP_V1 
928b			 
928b			; Select auto start 
928b			 
928b			.selautoload: 
928b			 
928b				 
928b				if STORAGE_SE 
928b			 
928b					call config_dir 
928b				        ld hl, scratch 
928b					ld a, 0 
928b					call menu 
928b			 
928b					cp 0 
928b					ret z 
928b			 
928b					dec a 
928b			 
928b			 
928b					; locate menu option 
928b			 
928b					ld hl, scratch 
928b					call table_lookup 
928b			 
928b					if DEBUG_FORTH_WORDS 
928b						DMARK "ALl" 
928b						CALLMONITOR 
928b					endif 
928b					; with the pointer to the menu it, the byte following the zero term is the file id 
928b			 
928b					ld a, 0 
928b					ld bc, 50   ; max of bytes to look at 
928b					cpir  
928b			 
928b					if DEBUG_FORTH_WORDS 
928b						DMARK "ALb" 
928b						CALLMONITOR 
928b					endif 
928b					;inc hl 
928b			 
928b					ld a, (hl)   ; file id 
928b					 
928b				        ; save bank and file ids 
928b			 
928b					push af 
928b			 
928b			; TODO need to save to block 0 on bank 1	 
928b			 
928b					call storage_get_block_0 
928b			 
928b					if DEBUG_FORTH_WORDS 
928b						DMARK "AL0" 
928b						CALLMONITOR 
928b					endif 
928b					pop af 
928b			 
928b					ld (store_page+STORE_0_FILERUN),a 
928b					 
928b					; save bank id 
928b			 
928b					ld a,(spi_device) 
928b					ld (store_page+STORE_0_BANKRUN),a 
928b			 
928b					; enable auto run of store file 
928b			 
928b					ld a, 1 
928b					ld (store_page+STORE_0_AUTOFILE),a 
928b			 
928b					; save buffer 
928b			 
928b					ld hl, 0 
928b					ld de, store_page 
928b					if DEBUG_FORTH_WORDS 
928b						DMARK "ALw" 
928b						CALLMONITOR 
928b					endif 
928b				call storage_write_block	 ; save update 
928b			  
928b			 
928b			 
928b			 
928b					ld hl, scratch 
928b					call config_fdir 
928b			 
928b				else 
928b			 
928b 21 4b 96			ld hl, prom_notav 
928e 11 61 96			ld de, prom_empty 
9291 cd 3f 8a			call info_panel 
9294			 
9294				endif 
9294 c9				ret 
9295			endif 
9295			 
9295			 
9295			; Select storage bank 
9295			 
9295			.selbank: 
9295			 
9295			;	if STORAGE_SE 
9295			;	else 
9295			 
9295 21 4b 96			ld hl, prom_notav 
9298 11 61 96			ld de, prom_empty 
929b cd 3f 8a			call info_panel 
929e			;	endif 
929e				 
929e c9				ret 
929f			 
929f			if STORAGE_SE 
929f			 
929f			.config_ldir:   
929f				; Load storage bank labels into menu array 
929f			 
929f				 
929f			 
929f			 
929f				ret 
929f			 
929f			 
929f			endif 
929f			 
929f			 
929f			; Save user words to storage 
929f			 
929f			.savetostore: 
929f			 
929f			;	if STORAGE_SE 
929f			; 
929f			;		call config_dir 
929f			;	        ld hl, scratch 
929f			;		ld a, 0 
929f			;		call menu 
929f			;		 
929f			;		ld hl, scratch 
929f			;		call config_fdir 
929f			; 
929f			;	else 
929f			 
929f 21 4b 96			ld hl, prom_notav 
92a2 11 61 96			ld de, prom_empty 
92a5 cd 3f 8a			call info_panel 
92a8			 
92a8			;	endif 
92a8			 
92a8 c9				ret 
92a9			 
92a9			if STARTUP_V2 
92a9			 
92a9			create_startup: 
92a9			 
92a9				ld a, 0 
92a9				ld hl, .crstart 
92a9				call menu 
92a9			 
92a9				cp 0 
92a9				ret z 
92a9			 
92a9				cp 1 
92a9				call z, .genlsword 
92a9				cp 2 
92a9				call z, .genedword 
92a9			 
92a9				cp 3 
92a9				call z, .gendemword 
92a9			 
92a9				cp 4 
92a9				call z, .genutlword 
92a9				cp 5 
92a9				call z, .genspiword 
92a9				cp 6 
92a9				call z, .genkeyword 
92a9				cp 7 
92a9				call z, .gensoundword 
92a9				cp 7 
92a9				call z, .genhwword 
92a9				jr create_startup 
92a9			 
92a9			.genhwword: 
92a9				ld hl, crs_hw 
92a9				ld de, .hwworddef 
92a9				call .genfile 
92a9				ret 
92a9			.gensoundword: 
92a9				ld hl, crs_sound 
92a9				ld de, .soundworddef 
92a9				call .genfile 
92a9				ret 
92a9			.genlsword: 
92a9				ld hl, crs_s1 
92a9				ld de, .lsworddef 
92a9				call .genfile 
92a9				ret 
92a9			 
92a9			.genedword: 
92a9				ld de, .edworddef 
92a9				ld hl, crs_s2 
92a9				call .genfile 
92a9				ret 
92a9			 
92a9			.gendemword: 
92a9				ld de, .demoworddef 
92a9				ld hl, crs_s3 
92a9				call .genfile 
92a9				ret 
92a9			 
92a9			.genutlword: 
92a9				ld hl, crs_s4 
92a9				ld de, .utilwordef 
92a9				call .genfile 
92a9				ret 
92a9			.genspiword: 
92a9				ld hl, crs_s5 
92a9				ld de, .spiworddef 
92a9				call .genfile 
92a9				ret 
92a9			.genkeyword: 
92a9				ld hl, crs_s6 
92a9				ld de, .keyworddef 
92a9				call .genfile 
92a9				ret 
92a9			 
92a9			; hl - points to file name 
92a9			; de - points to strings to add to file 
92a9			 
92a9			.genfile: 
92a9				push hl 
92a9				push de 
92a9			 
92a9				call clear_display 
92a9				ld a, display_row_1 
92a9				ld de, .genfiletxt 
92a9				call str_at_display 
92a9				call update_display 
92a9			 
92a9				pop de 
92a9				pop hl 
92a9			 
92a9			 
92a9				push de 
92a9				call storage_create 
92a9				; id in hl 
92a9				pop de   ; table of strings to add 
92a9			 
92a9			.genloop: 
92a9			 
92a9				push hl ; save id for next time around 
92a9				push de ; save de for next time around 
92a9			 
92a9				ex de, hl 
92a9				call loadwordinhl 
92a9				ex de, hl 
92a9			 
92a9				; need hl to be the id 
92a9				; need de to be the string ptr 
92a9				 
92a9				call storage_append 
92a9			 
92a9				pop de 
92a9				pop hl 
92a9			 
92a9				inc de 
92a9				inc de 
92a9			 
92a9				ld a,(de) 
92a9				cp 0 
92a9				jr nz, .genloop 
92a9				inc de 
92a9				ld a, (de) 
92a9				dec de 
92a9				cp 0 
92a9				jr nz, .genloop	 
92a9			 
92a9				ret 
92a9			 
92a9			.genfiletxt:  db "Creating file...",0 
92a9			 
92a9			.hwworddef: 
92a9				dw test5 
92a9				dw test6 
92a9				dw test7 
92a9				dw test8 
92a9				dw test9 
92a9				dw test10 
92a9				dw 0 
92a9			 
92a9			.soundworddef: 
92a9				dw sound1 
92a9				dw sound2 
92a9				dw sound3 
92a9				dw sound4 
92a9				dw sound5 
92a9				dw sound6 
92a9				dw sound7 
92a9				dw sound8 
92a9				dw sound9 
92a9				dw 0 
92a9			 
92a9			.utilwordef: 
92a9				dw strncpy 
92a9				dw type 
92a9				dw clrstack 
92a9				dw longread 
92a9				dw start1 
92a9				dw start2 
92a9			; duplicated 
92a9			;	dw start3b 
92a9			;	dw start3c 
92a9				dw list 
92a9				dw 0 
92a9			 
92a9			.lsworddef: 
92a9				dw start3b 
92a9				dw 0 
92a9			 
92a9			.edworddef: 
92a9				dw edit1 
92a9				dw edit2 
92a9				dw edit3 
92a9				dw 0 
92a9			 
92a9			.demoworddef: 
92a9				dw game1 
92a9				dw game1a 
92a9				dw game1b 
92a9				dw game1c 
92a9				dw game1d 
92a9				dw game1s 
92a9				dw game1t 
92a9				dw game1f 
92a9				dw game1z 
92a9				dw game1zz 
92a9				dw ssv2 
92a9				dw ssv3 
92a9				dw ssv4 
92a9				dw ssv5 
92a9				dw ssv1 
92a9				dw ssv1cpm	 
92a9			;	dw game2b 
92a9			;	dw game2bf 
92a9			;	dw game2mba 
92a9			;	dw game2mbas	 
92a9			;	dw game2mbht 
92a9			;	dw game2mbms 
92a9			;	dw game2mb 
92a9			;	dw game3w 
92a9			;	dw game3p 
92a9			;	dw game3sc 
92a9			;	dw game3vsi 
92a9			;	dw game3vs 
92a9				dw 0 
92a9			 
92a9			 
92a9			.spiworddef: 
92a9			 
92a9			    dw spi1 
92a9			    dw spi2 
92a9			    dw spi2b 
92a9			    dw spi3 
92a9			    dw spi4 
92a9			    dw spi5 
92a9			;    dw spi6 
92a9			;    dw spi7 
92a9			 
92a9			;    dw spi8 
92a9			;    dw spi9 
92a9			;    dw spi10 
92a9			    dw 0 
92a9			 
92a9			.keyworddef: 
92a9			 
92a9				dw keyup 
92a9				dw keydown 
92a9				dw keyleft 
92a9				dw keyright 
92a9				dw 	keyf1 
92a9				dw keyf2 
92a9				dw keyf3 
92a9				dw keyf4 
92a9				dw keyf5 
92a9				dw keyf6 
92a9				dw keyf7 
92a9				dw keyf8 
92a9				dw keyf9 
92a9				dw keyf10 
92a9				dw keyf11 
92a9				dw keyf12 
92a9				dw keytab 
92a9				dw keycr 
92a9				dw keyhome 
92a9				dw keyend 
92a9				dw keybs 
92a9				dw 0 
92a9			 
92a9			.crstart: 
92a9				dw crs_s1 
92a9				dw crs_s2 
92a9				dw crs_s3 
92a9				dw crs_s4 
92a9				dw crs_s5 
92a9				dw crs_s6 
92a9				dw crs_sound 
92a9				dw crs_hw 
92a9				dw 0 
92a9			 
92a9			endif 
92a9			 
92a9			 
92a9			if STORAGE_SE 
92a9			 
92a9			config_fdir: 
92a9				; using the scratch dir go through and release the memory allocated for each string 
92a9				 
92a9				ld hl, scratch 
92a9			.cfdir:	ld e,(hl) 
92a9				inc hl 
92a9				ld d,(hl) 
92a9				inc hl 
92a9			 
92a9				ex de, hl 
92a9				call ishlzero 
92a9				ret z     ; return on null pointer 
92a9				call free 
92a9				ex de, hl 
92a9				jr .cfdir 
92a9			 
92a9			 
92a9				ret 
92a9			 
92a9			 
92a9			config_dir: 
92a9			 
92a9				; for the config menus that need to build a directory of storage call this routine 
92a9				; it will construct a menu in scratch to pass to menu 
92a9			 
92a9				; open storage device 
92a9			 
92a9				; execute DIR to build a list of files and their ids into scratch in menu format 
92a9				; once the menu has finished then will need to call config_fdir to release the strings 
92a9				 
92a9				; c = number items 
92a9			 
92a9				 
92a9				call storage_get_block_0 
92a9			 
92a9				ld hl, store_page     ; get current id count 
92a9				ld b, (hl) 
92a9				ld c, 0    ; count of files   
92a9			 
92a9			 
92a9				ld hl, scratch 
92a9				ld (store_tmp2), hl    ; location to poke strings 
92a9			 
92a9				; check for empty drive 
92a9			 
92a9				ld a, 0 
92a9				cp b 
92a9				jp z, .dirdone 
92a9			 
92a9				 
92a9					if DEBUG_FORTH_WORDS 
92a9						DMARK "Cdc" 
92a9						CALLMONITOR 
92a9					endif 
92a9			 
92a9			 
92a9			.diritem:	 
92a9				push bc 
92a9				; for each of the current ids do a search for them and if found push to stack 
92a9			 
92a9					ld hl, STORE_BLOCK_PHY 
92a9					ld d, 0		 ; look for extent 0 of block id as this contains file name 
92a9					ld e,b 
92a9			 
92a9					call storage_findnextid 
92a9			 
92a9			 
92a9					; if found hl will be non zero 
92a9			 
92a9					call ishlzero 
92a9					jr z, .dirnotfound 
92a9			 
92a9					; increase count 
92a9			 
92a9					pop bc	 
92a9					inc c 
92a9					push bc 
92a9					 
92a9			 
92a9					; get file header and push the file name 
92a9			 
92a9					ld de, store_page 
92a9					call storage_read_block 
92a9			 
92a9					; push file id to stack 
92a9				 
92a9					ld a, (store_page) 
92a9					ld h, 0 
92a9					ld l, a 
92a9			 
92a9					;call forth_push_numhl 
92a9					; TODO store id 
92a9			 
92a9					push hl 
92a9			 
92a9					; push extent count to stack  
92a9				 
92a9					ld hl, store_page+3 
92a9			 
92a9					; get file name length 
92a9			 
92a9					call strlenz   
92a9			 
92a9					inc hl   ; cover zero term 
92a9					inc hl  ; stick the id at the end of the area 
92a9			 
92a9					push hl 
92a9					pop bc    ; move length to bc 
92a9			 
92a9					call malloc 
92a9			 
92a9					; TODO save malloc area to scratch 
92a9			 
92a9					ex de, hl 
92a9					ld hl, (store_tmp2) 
92a9					ld (hl), e 
92a9					inc hl 
92a9					ld (hl), d 
92a9					inc hl 
92a9					ld (store_tmp2), hl 
92a9			 
92a9					 
92a9			 
92a9					;pop hl   ; get source 
92a9			;		ex de, hl    ; swap aronund	 
92a9			 
92a9					ld hl, store_page+3 
92a9					if DEBUG_FORTH_WORDS 
92a9						DMARK "CFd" 
92a9						CALLMONITOR 
92a9					endif 
92a9					ldir 
92a9			 
92a9					; de is past string, move back one and store id 
92a9					 
92a9					dec de 
92a9			 
92a9					; store file id 
92a9			 
92a9					pop hl 
92a9					ex de,hl 
92a9					ld (hl), e 
92a9			 
92a9					if DEBUG_FORTH_WORDS 
92a9						DMARK "Cdi" 
92a9						CALLMONITOR 
92a9					endif 
92a9					 
92a9			.dirnotfound: 
92a9					pop bc     
92a9					djnz .diritem 
92a9				 
92a9			.dirdone:	 
92a9			 
92a9					ld a, 0 
92a9					ld hl, (store_tmp2) 
92a9					ld (hl), a 
92a9					inc hl 
92a9					ld (hl), a 
92a9					inc hl 
92a9					; push a count of the dir items found 
92a9			 
92a9			;		ld h, 0 
92a9			;		ld l, c 
92a9			 
92a9				ret 
92a9			 
92a9			endif 
92a9			 
92a9			 
92a9			; Settings 
92a9			; Run  
92a9			 
92a9			 
92a9			 
92a9			;hd_menu1:   db "Diags:  1: Key Matrix   5: Sound",0 
92a9			;;hd_menu2:   db "        2: Editor",0   
92a9			;hd_menu2:   db "        2: Editor       6: Menu",0   
92a9			;hd_menu3:   db "        3: Storage",0 
92a9			;hd_menu4:   db "0=quit  4: Debug",0 
92a9			;hd_don:     db "ON",0 
92a9			;hd_doff:     db "OFF",0 
92a9			; 
92a9			; 
92a9			; 
92a9			;hardware_diags_old:       
92a9			; 
92a9			;.diagmenu: 
92a9			;	call clear_display 
92a9			;	ld a, display_row_1 
92a9			;	ld de, hd_menu1 
92a9			;	call str_at_display 
92a9			; 
92a9			;	ld a, display_row_2 
92a9			;	ld de, hd_menu2 
92a9			;	call str_at_display 
92a9			; 
92a9			;	ld a, display_row_3 
92a9			;	ld de, hd_menu3 
92a9			;	call str_at_display 
92a9			; 
92a9			;	ld a,  display_row_4 
92a9			;	ld de, hd_menu4 
92a9			;	call str_at_display 
92a9			; 
92a9			;	; display debug state 
92a9			; 
92a9			;	ld de, hd_don 
92a9			;	ld a, (os_view_disable) 
92a9			;	cp 0 
92a9			;	jr z, .distog 
92a9			;	ld de, hd_doff 
92a9			;.distog: ld a, display_row_4+17 
92a9			;	call str_at_display 
92a9			; 
92a9			;	call update_display 
92a9			; 
92a9			;	call cin_wait 
92a9			; 
92a9			; 
92a9			; 
92a9			;	cp '4' 
92a9			;	jr nz, .diagn1 
92a9			; 
92a9			;	; debug toggle 
92a9			; 
92a9			;	ld a, (os_view_disable) 
92a9			;	ld b, '*' 
92a9			;	cp 0 
92a9			;	jr z, .debtog 
92a9			;	ld b, 0 
92a9			;.debtog:	 
92a9			;	ld a,b 
92a9			;	ld (os_view_disable),a 
92a9			; 
92a9			;.diagn1: cp '0' 
92a9			;	 ret z 
92a9			; 
92a9			;;	cp '1' 
92a9			;;       jp z, matrix	 
92a9			;;   TODO keyboard matrix test 
92a9			; 
92a9			;	cp '2' 
92a9			;	jp z, .diagedit 
92a9			; 
92a9			;;	cp '6' 
92a9			;;	jp z, .menutest 
92a9			;;if ENABLE_BASIC 
92a9			;;	cp '6' 
92a9			;;	jp z, basic 
92a9			;;endif 
92a9			 ; 
92a9			;	jp .diagmenu 
92a9			; 
92a9			; 
92a9			;	ret 
92a9			 
92a9			 
92a9			.debug_tog: 
92a9 21 f3 92			ld hl, .menudebug 
92ac				 
92ac			;	ld a, (os_view_disable) 
92ac			;	cp '*' 
92ac 3a 6f ee			ld a,(debug_vector) 
92af fe c9			cp $C9   ; RET 
92b1 20 04			jr nz,.tdon  
92b3 3e 01			ld a, 1 
92b5 18 02			jr .tog1 
92b7 3e 00		.tdon: ld a, 0 
92b9			 
92b9			.tog1: 
92b9 cd df 8a			call menu 
92bc fe 00			cp 0 
92be c8				ret z 
92bf fe 01			cp 1    ; disable debug 
92c1 28 04			jr z, .dtog0 
92c3 3e 2a			ld a, '*' 
92c5 18 05			jr .dtogset 
92c7			.dtog0:  
92c7				;ld a, 0 
92c7 cd e5 93			call bp_on 
92ca 18 dd			jr .debug_tog 
92cc			.dtogset:  
92cc				; ld (os_view_disable), a 
92cc cd f1 93			call bp_off 
92cf c3 a9 92			jp .debug_tog 
92d2			 
92d2			 
92d2			hardware_diags:       
92d2			 
92d2			.diagm: 
92d2 21 e5 92			ld hl, .menuitems 
92d5 3e 00			ld a, 0 
92d7 cd df 8a			call menu 
92da			 
92da fe 00		         cp 0 
92dc c8				 ret z 
92dd			 
92dd fe 02			cp 2 
92df ca 3e 93			jp z, .diagedit 
92e2			 
92e2			;	cp '6' 
92e2			;	jp z, .menutest 
92e2			;if ENABLE_BASIC 
92e2			;	cp '6' 
92e2			;	jp z, basic 
92e2			;endif 
92e2			  
92e2 c3 d2 92			jp .diagm 
92e5			 
92e5				 
92e5 f9 92		.menuitems:   	dw .m1 
92e7 04 93				dw .m2 
92e9 0b 93				dw .m3 
92eb 13 93				dw .m5 
92ed 19 93				dw .m5a 
92ef 22 93				dw .m5b 
92f1 00 00				dw 0 
92f3			 
92f3			.menudebug: 
92f3 2b 93				dw .m6 
92f5 34 93				dw .m7 
92f7 00 00				dw 0 
92f9			 
92f9 .. 00		.m1:   db "Key Matrix",0 
9304 .. 00		.m2:   db "Editor",0 
930b .. 00		.m3:   db "Storage",0 
9313 .. 00		.m5:   db "Sound",0 
9319 .. 00		.m5a:  db "RAM Test",0 
9322 .. 00		.m5b:  db "LCD Test",0 
932b			 
932b .. 00		.m6:   db "Debug ON",0 
9334 .. 00		.m7:   db "Debug OFF",0 
933e			 
933e			; debug editor 
933e			 
933e			.diagedit: 
933e			 
933e 21 c1 e2			ld hl, scratch 
9341			;	ld bc, 250 
9341			;	ldir 
9341				; TODO ldir is not working strcpy may not get all the terms on the input line???? 
9341 3e 00			ld a, 0 
9343 77				ld (hl), a 
9344 23				inc hl 
9345 77				ld (hl), a 
9346 23				inc hl 
9347 77				ld (hl), a 
9348			 
9348 cd ae 8a		        call clear_display 
934b cd d1 8a			call update_display 
934e				;ld a, 1 
934e				;ld (hardware_diag), a 
934e			.diloop: 
934e 3e 00			ld a, display_row_1 
9350 0e 00			ld c, 0 
9352 16 ff			ld d, 255    ; TODO fix input_str to actually take note of max string input length 
9354 1e 28			ld e, 40 
9356			 
9356 21 c1 e2			ld hl, scratch	 
9359 cd 08 8d			call input_str 
935c			 
935c 3e 28			ld a, display_row_2 
935e 11 c1 e2			ld de, scratch 
9361 cd c1 8a			call str_at_display 
9364 cd d1 8a			call update_display 
9367			 
9367 c3 4e 93			jp .diloop 
936a			 
936a			 
936a			; pass word in hl 
936a			; a has display location 
936a			display_word_at: 
936a f5				push af 
936b e5				push hl 
936c 7c				ld a,h 
936d 21 c6 e5			ld hl, os_word_scratch 
9370 cd e4 8e			call hexout 
9373 e1				pop hl 
9374 7d				ld a,l 
9375 21 c8 e5			ld hl, os_word_scratch+2 
9378 cd e4 8e			call hexout 
937b 21 ca e5			ld hl, os_word_scratch+4 
937e 3e 00			ld a,0 
9380 77				ld (hl),a 
9381 11 c6 e5			ld de,os_word_scratch 
9384 f1				pop af 
9385 cd c1 8a				call str_at_display 
9388 c9				ret 
9389			 
9389			display_ptr_state: 
9389			 
9389				; to restore afterwards 
9389			 
9389 d5				push de 
938a c5				push bc 
938b e5				push hl 
938c f5				push af 
938d			 
938d				; for use in here 
938d			 
938d			;	push bc 
938d			;	push de 
938d			;	push hl 
938d			;	push af 
938d			 
938d cd ae 8a			call clear_display 
9390			 
9390 11 68 95			ld de, .ptrstate 
9393 3e 00			ld a, display_row_1 
9395 cd c1 8a			call str_at_display 
9398			 
9398				; display debug step 
9398			 
9398			 
9398 11 6b ee			ld de, debug_mark 
939b 3e 26			ld a, display_row_1+display_cols-2 
939d cd c1 8a			call str_at_display 
93a0			 
93a0				; display a 
93a0 11 72 95			ld de, .ptrcliptr 
93a3 3e 28			ld a, display_row_2 
93a5 cd c1 8a			call str_at_display 
93a8			 
93a8 f1				pop af 
93a9 2a 40 ea			ld hl,(cli_ptr) 
93ac 3e 30			ld a, display_row_2+8 
93ae cd 6a 93			call display_word_at 
93b1			 
93b1			 
93b1				; display hl 
93b1			 
93b1			 
93b1 11 7a 95			ld de, .ptrclioptr 
93b4 3e 32			ld a, display_row_2+10 
93b6 cd c1 8a			call str_at_display 
93b9			; 
93b9			;	pop hl 
93b9 3e 35			ld a, display_row_2+13 
93bb 2a 3e ea			ld hl,(cli_origptr) 
93be cd 6a 93			call display_word_at 
93c1			; 
93c1			;	 
93c1			;	; display de 
93c1			 
93c1			;	ld de, .regstatede 
93c1			;	ld a, display_row_3 
93c1			;	call str_at_display 
93c1			 
93c1			;	pop de 
93c1			;	ld h,d 
93c1			;	ld l, e 
93c1			;	ld a, display_row_3+3 
93c1			;	call display_word_at 
93c1			 
93c1			 
93c1				; display bc 
93c1			 
93c1			;	ld de, .regstatebc 
93c1			;	ld a, display_row_3+10 
93c1			;	call str_at_display 
93c1			 
93c1			;	pop bc 
93c1			;	ld h,b 
93c1			;	ld l, c 
93c1			;	ld a, display_row_3+13 
93c1			;	call display_word_at 
93c1			 
93c1			 
93c1				; display dsp 
93c1			 
93c1			;	ld de, .regstatedsp 
93c1			;	ld a, display_row_4 
93c1			;	call str_at_display 
93c1			 
93c1				 
93c1			;	ld hl,(cli_data_sp) 
93c1			;	ld a, display_row_4+4 
93c1			;	call display_word_at 
93c1			 
93c1				; display rsp 
93c1			 
93c1 11 a9 95			ld de, .regstatersp 
93c4 3e 82			ld a, display_row_4+10 
93c6 cd c1 8a			call str_at_display 
93c9			 
93c9				 
93c9 2a f2 e9			ld hl,(cli_ret_sp) 
93cc 3e 86			ld a, display_row_4+14 
93ce cd 6a 93			call display_word_at 
93d1			 
93d1 cd d1 8a			call update_display 
93d4			 
93d4 cd f1 89			call delay1s 
93d7 cd f1 89			call delay1s 
93da cd f1 89			call delay1s 
93dd			 
93dd			 
93dd cd da 99			call next_page_prompt 
93e0			 
93e0				; restore  
93e0			 
93e0 f1				pop af 
93e1 e1				pop hl 
93e2 c1				pop bc 
93e3 d1				pop de 
93e4 c9				ret 
93e5			 
93e5			; Update the break point vector so that the user can hook a new routine 
93e5			 
93e5			bp_on: 
93e5 3e c3			ld a, $c3    ; JP 
93e7 32 6f ee			ld (debug_vector), a 
93ea 21 f7 93			ld hl, break_point_state 
93ed 22 70 ee			ld (debug_vector+1), hl 
93f0 c9				ret 
93f1			 
93f1			bp_off: 
93f1 3e c9			ld a, $c9    ; RET 
93f3 32 6f ee			ld (debug_vector), a 
93f6 c9				ret 
93f7			 
93f7			 
93f7			break_point_state: 
93f7			;	push af 
93f7			; 
93f7			;	; see if disabled 
93f7			; 
93f7			;	ld a, (os_view_disable) 
93f7			;	cp '*' 
93f7			;	jr nz, .bpsgo 
93f7			;	pop af 
93f7			;	ret 
93f7			 
93f7			.bpsgo: 
93f7			;	pop af 
93f7 f5				push af 
93f8 22 a3 e2			ld (os_view_hl), hl 
93fb ed 53 a1 e2		ld (os_view_de), de 
93ff ed 43 9f e2		ld (os_view_bc), bc 
9403 e5				push hl 
9404 6f				ld l, a 
9405 26 00			ld h, 0 
9407 22 a5 e2			ld (os_view_af),hl 
940a			 
940a 21 b1 ed				ld hl, display_fb0 
940d 22 cc eb				ld (display_fb_active), hl 
9410 e1				pop hl	 
9411			 
9411 3e 31			ld a, '1' 
9413 fe 2a		.bps1:  cp '*' 
9415 cc f1 93			call z, bp_off 
9418			;	jr nz, .bps1b 
9418			;	ld (os_view_disable),a 
9418 fe 31		.bps1b:  cp '1' 
941a 20 14			jr nz, .bps2 
941c			 
941c				; display reg 
941c			 
941c				 
941c			 
941c 3a a5 e2			ld a, (os_view_af) 
941f 2a a3 e2			ld hl, (os_view_hl) 
9422 ed 5b a1 e2		ld de, (os_view_de) 
9426 ed 4b 9f e2		ld bc, (os_view_bc) 
942a cd c4 94			call display_reg_state 
942d c3 b0 94			jp .bpschk 
9430			 
9430 fe 32		.bps2:  cp '2' 
9432 20 08			jr nz, .bps3 
9434				 
9434				; display hl 
9434 2a a3 e2			ld hl, (os_view_hl) 
9437 cd ae 95			call display_dump_at_hl 
943a			 
943a 18 74			jr .bpschk 
943c			 
943c fe 33		.bps3:  cp '3' 
943e 20 08			jr nz, .bps4 
9440			 
9440			        ; display de 
9440 2a a1 e2			ld hl, (os_view_de) 
9443 cd ae 95			call display_dump_at_hl 
9446			 
9446 18 68			jr .bpschk 
9448 fe 34		.bps4:  cp '4' 
944a 20 08			jr nz, .bps5 
944c			 
944c			        ; display bc 
944c 2a 9f e2			ld hl, (os_view_bc) 
944f cd ae 95			call display_dump_at_hl 
9452			 
9452 18 5c			jr .bpschk 
9454 fe 35		.bps5:  cp '5' 
9456 20 08		        jr nz, .bps7 
9458			 
9458				; display cur ptr 
9458 2a 40 ea			ld hl, (cli_ptr) 
945b cd ae 95			call display_dump_at_hl 
945e			 
945e 18 50			jr .bpschk 
9460 fe 36		.bps7:  cp '6' 
9462 20 08			jr nz, .bps8b 
9464				 
9464				; display cur orig ptr 
9464 2a 3e ea			ld hl, (cli_origptr) 
9467 cd ae 95			call display_dump_at_hl 
946a 18 44			jr .bpschk 
946c fe 37		.bps8b:  cp '7' 
946e 20 08			jr nz, .bps9 
9470				 
9470				; display dsp 
9470 2a ee e9			ld hl, (cli_data_sp) 
9473 cd ae 95			call display_dump_at_hl 
9476			 
9476 18 38			jr .bpschk 
9478 fe 39		.bps9:  cp '9' 
947a 20 05			jr nz, .bps8c 
947c				 
947c				; display SP 
947c			;	ld hl, sp 
947c cd ae 95			call display_dump_at_hl 
947f			 
947f 18 2f			jr .bpschk 
9481 fe 38		.bps8c:  cp '8' 
9483 20 08			jr nz, .bps8d 
9485				 
9485				; display rsp 
9485 2a f2 e9			ld hl, (cli_ret_sp) 
9488 cd ae 95			call display_dump_at_hl 
948b			 
948b 18 23			jr .bpschk 
948d fe 23		.bps8d:  cp '#'     ; access monitor sub system 
948f 20 05			jr nz, .bps8 
9491 cd a8 97			call monitor 
9494			 
9494 18 1a			jr .bpschk 
9496 fe 30		.bps8:  cp '0' 
9498 20 16			jr nz, .bpschk 
949a			 
949a 21 10 ed				ld hl, display_fb1 
949d 22 cc eb				ld (display_fb_active), hl 
94a0 cd d1 8a				call update_display 
94a3			 
94a3				;ld a, (os_view_af) 
94a3 2a a3 e2			ld hl, (os_view_hl) 
94a6 ed 5b a1 e2		ld de, (os_view_de) 
94aa ed 4b 9f e2		ld bc, (os_view_bc) 
94ae f1				pop af 
94af c9				ret 
94b0			 
94b0			.bpschk:   
94b0 cd f1 89			call delay1s 
94b3 3e 9f		ld a,display_row_4 + display_cols - 1 
94b5 11 d8 99		        ld de, endprg 
94b8 cd c1 8a			call str_at_display 
94bb cd d1 8a			call update_display 
94be cd ee dc			call cin_wait 
94c1			 
94c1 c3 13 94			jp .bps1 
94c4			 
94c4			 
94c4			display_reg_state: 
94c4			 
94c4				; to restore afterwards 
94c4			 
94c4 d5				push de 
94c5 c5				push bc 
94c6 e5				push hl 
94c7 f5				push af 
94c8			 
94c8				; for use in here 
94c8			 
94c8 c5				push bc 
94c9 d5				push de 
94ca e5				push hl 
94cb f5				push af 
94cc			 
94cc cd ae 8a			call clear_display 
94cf			 
94cf 11 84 95			ld de, .regstate 
94d2 3e 00			ld a, display_row_1 
94d4 cd c1 8a			call str_at_display 
94d7			 
94d7				; display debug step 
94d7			 
94d7			 
94d7 11 6b ee			ld de, debug_mark 
94da 3e 25			ld a, display_row_1+display_cols-3 
94dc cd c1 8a			call str_at_display 
94df			 
94df				; display a 
94df 11 a0 95			ld de, .regstatea 
94e2 3e 28			ld a, display_row_2 
94e4 cd c1 8a			call str_at_display 
94e7			 
94e7 e1				pop hl 
94e8			;	ld h,0 
94e8			;	ld l, a 
94e8 3e 2b			ld a, display_row_2+3 
94ea cd 6a 93			call display_word_at 
94ed			 
94ed			 
94ed				; display hl 
94ed			 
94ed			 
94ed 11 94 95			ld de, .regstatehl 
94f0 3e 32			ld a, display_row_2+10 
94f2 cd c1 8a			call str_at_display 
94f5			 
94f5 e1				pop hl 
94f6 3e 35			ld a, display_row_2+13 
94f8 cd 6a 93			call display_word_at 
94fb			 
94fb				 
94fb				; display de 
94fb			 
94fb 11 98 95			ld de, .regstatede 
94fe 3e 50			ld a, display_row_3 
9500 cd c1 8a			call str_at_display 
9503			 
9503 e1				pop hl 
9504			;	ld h,d 
9504			;	ld l, e 
9504 3e 53			ld a, display_row_3+3 
9506 cd 6a 93			call display_word_at 
9509			 
9509			 
9509				; display bc 
9509			 
9509 11 9c 95			ld de, .regstatebc 
950c 3e 5a			ld a, display_row_3+10 
950e cd c1 8a			call str_at_display 
9511			 
9511 e1				pop hl 
9512			;	ld h,b 
9512			;	ld l, c 
9512 3e 5d			ld a, display_row_3+13 
9514 cd 6a 93			call display_word_at 
9517			 
9517			 
9517				; display dsp 
9517			 
9517 11 a4 95			ld de, .regstatedsp 
951a 3e 78			ld a, display_row_4 
951c cd c1 8a			call str_at_display 
951f			 
951f				 
951f 2a ee e9			ld hl,(cli_data_sp) 
9522 3e 7c			ld a, display_row_4+4 
9524 cd 6a 93			call display_word_at 
9527			 
9527				; display rsp 
9527			 
9527 11 a9 95			ld de, .regstatersp 
952a 3e 82			ld a, display_row_4+10 
952c cd c1 8a			call str_at_display 
952f			 
952f				 
952f 2a f2 e9			ld hl,(cli_ret_sp) 
9532 3e 86			ld a, display_row_4+14 
9534 cd 6a 93			call display_word_at 
9537			 
9537 cd d1 8a			call update_display 
953a			 
953a			;	call delay1s 
953a			;	call delay1s 
953a			;	call delay1s 
953a			 
953a			 
953a			;	call next_page_prompt 
953a			 
953a				; restore  
953a			 
953a f1				pop af 
953b e1				pop hl 
953c c1				pop bc 
953d d1				pop de 
953e c9				ret 
953f			 
953f .. 00		.wordincurptr:  db "Word in cur_ptr (5)",0 
9553 .. 00		.wordincuroptr:  db "Word in cur_optr (6)",0 
9568 .. 00		.ptrstate:	db "Ptr State",0 
9572 .. 00		.ptrcliptr:     db "cli_ptr",0 
957a .. 00		.ptrclioptr:     db "cli_o_ptr",0 
9584 .. 00		.regstate:	db "Reg State (1/0)",0 
9594 .. 00		.regstatehl:	db "HL:",0 
9598 .. 00		.regstatede:	db "DE:",0 
959c .. 00		.regstatebc:	db "BC:",0 
95a0 .. 00		.regstatea:	db "A :",0 
95a4 .. 00		.regstatedsp:	db "DSP:",0 
95a9 .. 00		.regstatersp:	db "RSP:",0 
95ae			 
95ae			display_dump_at_hl: 
95ae e5				push hl 
95af d5				push de 
95b0 c5				push bc 
95b1 f5				push af 
95b2			 
95b2 22 e4 e5			ld (os_cur_ptr),hl	 
95b5 cd ae 8a			call clear_display 
95b8 cd e2 98			call dumpcont 
95bb			;	call delay1s 
95bb			;	call next_page_prompt 
95bb			 
95bb			 
95bb f1				pop af 
95bc c1				pop bc 
95bd d1				pop de 
95be e1				pop hl 
95bf c9				ret 
95c0			 
95c0			;if ENABLE_BASIC 
95c0			;	include "nascombasic.asm" 
95c0			;	basic: 
95c0			;	include "forth/FORTH.ASM" 
95c0			;endif 
95c0			 
95c0			; eof 
95c0			 
95c0			 
# End of file firmware_diags.asm
95c0			  
95c0			include "firmware_prompts.asm"  
95c0			; Prompts  
95c0			 
95c0			; boot messages 
95c0			 
95c0 .. 00		prom_bootmsg:	db "z80-homebrew OS v1.7",0 
95d5 .. 00		prom_bootmsg1:	db "by Kevin Groves",0 
95e5			 
95e5			 
95e5			; config menus 
95e5			 
95e5			;prom_c3: db "Add Dictionary To File",0 
95e5			 
95e5			if STARTUP_V1 
95e5 .. 00		prom_c2: db "Select Autoload File",0 
95fa .. 00		prom_c2a: db "Disable Autoload File", 0 
9610			endif 
9610			 
9610			if STARTUP_V2 
9610			prom_c2: db "Enable Autoload Files",0 
9610			prom_c2a: db "Disable Autoload Files", 0 
9610			 
9610			crs_s1: db "*ls-word", 0 
9610			crs_s2: db "*ed-word", 0 
9610			crs_s3: db "*Demo-Games", 0 
9610			crs_s4: db "*Utils", 0 
9610			crs_s5: db "*SPI-Util", 0 
9610			crs_s6: db "*Key-Constants", 0 
9610			crs_sound: db "*Sound-Util", 0 
9610			crs_hw: db "*Hello-World",0 
9610			 
9610			 
9610			 
9610			endif 
9610			;prom_c2b: db "Select Storage Bank",0 
9610 .. 00		prom_c4: db "Settings",0 
9619 .. 00		prom_m4:   db "Debug & Breakpoints On/Off",0 
9634 .. 00		prom_m4b:   db "Monitor",0 
963c .. 00		prom_c1: db "Hardware Diags",0 
964b			 
964b			 
964b			if STARTUP_V2 
964b			prom_c9: db "Create Startup Files",0 
964b			endif 
964b			 
964b .. 00		prom_notav:    db "Feature not available",0 
9661 .. 00		prom_empty:    db "",0 
9662			 
9662			; eof 
9662			 
# End of file firmware_prompts.asm
9662			  
9662			  
9662			; eof  
9662			  
# End of file firmware.asm
9662			 
9662			;; below moved from firmware.asm for strange zero calc of baseusermem label. Scope issue on multipass???? 
9662			;if BASE_KEV  
9662			;baseram: equ 08000h 
9662			;endif 
9662			 
9662			;if BASE_SC114 
9662			;baseram:     equ    endofcode 
9662			;endif 
9662			 
9662			 
9662			; Add NMI support. A rst 066h when r15z goes neg on clock side of resist. needs to do retn when exiting 
9662			 
9662			; start system 
9662			 
9662			coldstart: 
9662				; set sp 
9662				; di/ei 
9662			 
9662 f3				di 
9663 31 00 f0			ld sp, tos 
9666 cd 38 dc			call init_nmi 
9669			;	ei 
9669			 
9669				; init spinner 
9669 3e 00			ld a,0 
966b 32 c6 eb			ld (display_active), a 
966e			 
966e				; disable breakpoint by default 
966e			 
966e				;ld a,'*' 
966e			;	ld a,' ' 
966e			;	ld (os_view_disable),a 
966e			 
966e				; set break point vector as new break point on or off 
966e cd f1 93			call bp_off 
9671			 
9671				; init hardware 
9671			 
9671				; init keyboard and screen hardware 
9671			 
9671 cd 1b 80			call hardware_init 
9674			 
9674			 
9674 cd f1 89			call delay1s 
9677 3e 58			ld a, display_row_3+8 
9679 11 03 80			ld de, buildtime 
967c cd c1 8a			call str_at_display 
967f cd d1 8a			call update_display 
9682			 
9682 cd f1 89			call delay1s 
9685 cd f1 89			call delay1s 
9688 cd f1 89			call delay1s 
968b			 
968b				; detect if any keys are held down to enable breakpoints at start up 
968b			 
968b cd f4 dc			call cin  
968e fe 00			cp 0 
9690 28 03			jr z, .nokeys 
9692			 
9692				;call hardware_diags 
9692 cd 4f 92			call config 
9695			 
9695			;	ld de, .bpen 
9695			;	ld a, display_row_4 
9695			;	call str_at_display 
9695			;	call update_display 
9695			; 
9695			;	ld a,0 
9695			;	ld (os_view_disable),a 
9695			; 
9695			;.bpwait: 
9695			;	call cin 
9695			;	cp 0 
9695			;	jr z, .bpwait 
9695			;	jr .nokeys 
9695			; 
9695			; 
9695			;.bpen:  db "Break points enabled!",0 
9695			 
9695			 
9695			 
9695			 
9695			 
9695			 
9695			.nokeys: 
9695			 
9695			 
9695				 
9695			 
9695			;jp  testkey 
9695			 
9695			;call storage_get_block_0 
9695			; 
9695			;ld hl, 0 
9695			;ld de, store_page 
9695			;call storage_read_block 
9695			 
9695				 
9695			;ld hl, 10 
9695			;ld de, store_page 
9695			;call storage_read_block 
9695			 
9695			 
9695			 
9695			 
9695			 
9695			;stop:	nop 
9695			;	jp stop 
9695			 
9695			 
9695			 
9695			main: 
9695 cd ae 8a			call clear_display 
9698 cd d1 8a			call update_display 
969b			 
969b			 
969b			 
969b			;	call testlcd 
969b			 
969b			 
969b			 
969b cd df 9d			call forth_init 
969e			 
969e			 
969e			warmstart: 
969e cd b5 9d			call forth_warmstart 
96a1			 
96a1				; run startup word load 
96a1			        ; TODO prevent this running at warmstart after crash  
96a1			 
96a1				if STARTUP_ENABLE 
96a1			 
96a1					if STARTUP_V1 
96a1			 
96a1						if STORAGE_SE 
96a1							call forth_autoload 
96a1						endif 
96a1 cd 88 db					call forth_startup 
96a4					endif 
96a4			 
96a4					if STARTUP_V2 
96a4			 
96a4						if STORAGE_SE 
96a4							call forth_autoload 
96a4						else 
96a4							call forth_startup 
96a4						endif 
96a4			 
96a4			 
96a4					endif 
96a4			 
96a4				endif 
96a4			 
96a4				; show free memory after boot 
96a4 11 43 97			ld de, freeram 
96a7 3e 00			ld a, display_row_1 
96a9 cd c1 8a			call str_at_display 
96ac			 
96ac				; get current heap start after loading any uwords 
96ac			 
96ac				;ld de, (os_last_new_uword) 
96ac				;ex de, hl 
96ac			 
96ac			; Or use heap_size word???? 
96ac				;ld hl, heap_end 
96ac				;ld hl, heap_size 
96ac				;ld de, topusermem 
96ac				;ld de, heap_start 
96ac ed 5b 0d dd			ld de, (free_list )      
96b0 21 9c e2				ld hl, heap_end 
96b3 ed 52			sbc hl, de 
96b5				;push hl 
96b5				;ld a,h	         	 
96b5				;ld hl, os_word_scratch		; TODO do direct write to frame buffer instead and drop the str_at_display 
96b5				;call hexout 
96b5			   	;pop hl 
96b5			; 
96b5			;	ld a,l 
96b5			;	ld hl, os_word_scratch+2 
96b5			;	call hexout 
96b5			;	ld hl, os_word_scratch+4 
96b5			;	ld a, 0 
96b5			;	ld (hl),a 
96b5 eb				ex de, hl 
96b6 21 c6 e5			ld hl, os_word_scratch 
96b9 cd f0 8f			call uitoa_16 
96bc			 
96bc			 
96bc 11 c6 e5			ld de, os_word_scratch 
96bf 3e 0d			ld a, display_row_1 + 13 
96c1 cd c1 8a			call str_at_display 
96c4 cd d1 8a			call update_display 
96c7			 
96c7			 
96c7				;call demo 
96c7			 
96c7			 
96c7				; init scratch input area for cli commands 
96c7			 
96c7 21 e8 e5			ld hl, os_cli_cmd 
96ca 3e 00			ld a,0 
96cc 77				ld (hl),a 
96cd 23				inc hl 
96ce 77				ld (hl),a 
96cf			 
96cf 3e 00			ld a,0 
96d1 32 e7 e6			ld (os_last_cmd),a	; current command in use to enable repeated use with an enter etc 
96d4			 
96d4 32 e4 e5			ld (os_cur_ptr),a	; ptr to whatever is needed for this command 
96d7 32 e5 e5			ld (os_cur_ptr+1),a	 
96da			 
96da 32 c6 e5			ld (os_word_scratch),a	; byte or word being used in parsing for this command 
96dd 32 c7 e5			ld (os_word_scratch+1),a	 
96e0				 
96e0			 
96e0				;ld a, kLCD_Line2        ; TODO prompt using direct screen line address. Correct this to frame buffer 
96e0 21 e8 e5			ld hl, os_cli_cmd 
96e3			 
96e3 3e 00			ld a, 0		 ; init cli input 
96e5 77				ld (hl), a 
96e6 3e 28			ld a, display_row_2        ; TODO prompt using direct screen line address. Correct this to frame buffer 
96e8			cli: 
96e8				; show cli prompt 
96e8				;push af 
96e8				;ld a, 0 
96e8				;ld de, prompt 
96e8				;call str_at_display 
96e8			 
96e8				;call update_display 
96e8				;pop af 
96e8				;inc a 
96e8				;ld a, kLCD_Line4+1	 ; TODO using direct screen line writes. Correct this to frame buffer 
96e8			 
96e8			.lastrecall: 
96e8			 
96e8 0e 00			ld c, 0 
96ea 16 ff			ld d, 255    ; TODO fix input_str to actually take note of max string input length 
96ec 1e 28			ld e, 40 
96ee			 
96ee 21 e8 e5			ld hl, os_cli_cmd 
96f1			 
96f1				STACKFRAME OFF $fefe $9f9f 
96f1				if DEBUG_STACK_IMB 
96f1					if OFF 
96f1						exx 
96f1						ld de, $fefe 
96f1						ld a, d 
96f1						ld hl, curframe 
96f1						call hexout 
96f1						ld a, e 
96f1						ld hl, curframe+2 
96f1						call hexout 
96f1						ld hl, $fefe 
96f1						push hl 
96f1						ld hl, $9f9f 
96f1						push hl 
96f1						exx 
96f1					endif 
96f1				endif 
96f1			endm 
# End of macro STACKFRAME
96f1			 
96f1 cd 08 8d			call input_str 
96f4			 
96f4				STACKFRAMECHK OFF $fefe $9f9f 
96f4				if DEBUG_STACK_IMB 
96f4					if OFF 
96f4						exx 
96f4						ld hl, $9f9f 
96f4						pop de   ; $9f9f 
96f4						call cmp16 
96f4						jr nz, .spnosame 
96f4						ld hl, $fefe 
96f4						pop de   ; $fefe 
96f4						call cmp16 
96f4						jr z, .spfrsame 
96f4						.spnosame: call showsperror 
96f4						.spfrsame: nop 
96f4						exx 
96f4					endif 
96f4				endif 
96f4			endm 
# End of macro STACKFRAMECHK
96f4			 
96f4			 
96f4				; check to see if last line recall has been requested 
96f4			 
96f4			if EDIT_V2 
96f4 fe 05			cp KEY_UP 
96f6 20 0f			jr nz, .noexecline 
96f8			 
96f8 11 e8 e5			ld de, os_cli_cmd 
96fb 21 e7 e6			ld hl, os_last_cmd 
96fe 01 ff 00			ld bc, 255 
9701 ed b0			ldir 
9703 3e 00			ld a, 0 
9705 18 e1			jr .lastrecall 
9707			endif 
9707			 
9707			.noexecline: 
9707				; no so exec the line		 
9707			 
9707				; copy input to last command 
9707			 
9707 21 e8 e5			ld hl, os_cli_cmd 
970a 11 e7 e6			ld de, os_last_cmd 
970d 01 ff 00			ld bc, 255 
9710 ed b0			ldir 
9712			 
9712				; wipe current buffer 
9712			 
9712			;	ld a, 0 
9712			;	ld hl, os_cli_cmd 
9712			;	ld de, os_cli_cmd+1 
9712			;	ld bc, 254 
9712			;	ldir 
9712				; TODO ldir is not working strcpy may not get all the terms on the input line???? 
9712			;	call strcpy 
9712			;	ld a, 0 
9712			;	ld (hl), a 
9712			;	inc hl 
9712			;	ld (hl), a 
9712			;	inc hl 
9712			;	ld (hl), a 
9712			 
9712				; switch frame buffer to program  
9712			 
9712 21 10 ed				ld hl, display_fb1 
9715 22 cc eb				ld (display_fb_active), hl 
9718			 
9718			;	nop 
9718				STACKFRAME ON $fbfe $8f9f 
9718				if DEBUG_STACK_IMB 
9718					if ON 
9718						exx 
9718						ld de, $fbfe 
9718						ld a, d 
9718						ld hl, curframe 
9718						call hexout 
9718						ld a, e 
9718						ld hl, curframe+2 
9718						call hexout 
9718						ld hl, $fbfe 
9718						push hl 
9718						ld hl, $8f9f 
9718						push hl 
9718						exx 
9718					endif 
9718				endif 
9718			endm 
# End of macro STACKFRAME
9718				; first time into the parser so pass over the current scratch pad 
9718 21 e8 e5			ld hl,os_cli_cmd 
971b				; tokenise the entered statement(s) in HL 
971b cd 5d 9e			call forthparse 
971e			        ; exec forth statements in top of return stack 
971e cd 9d 9e			call forthexec 
9721				;call forthexec_cleanup 
9721			;	call parsenext 
9721			 
9721				STACKFRAMECHK ON $fbfe $8f9f 
9721				if DEBUG_STACK_IMB 
9721					if ON 
9721						exx 
9721						ld hl, $8f9f 
9721						pop de   ; $8f9f 
9721						call cmp16 
9721						jr nz, .spnosame 
9721						ld hl, $fbfe 
9721						pop de   ; $fbfe 
9721						call cmp16 
9721						jr z, .spfrsame 
9721						.spnosame: call showsperror 
9721						.spfrsame: nop 
9721						exx 
9721					endif 
9721				endif 
9721			endm 
# End of macro STACKFRAMECHK
9721				; TODO on return from forth parsing should there be a prompt to return to system? but already in system. 
9721			 
9721 3e 78			ld a, display_row_4 
9723 11 54 97			ld de, endprog 
9726			 
9726 cd d1 8a			call update_display		 
9729			 
9729 cd da 99			call next_page_prompt 
972c			 
972c				; switch frame buffer to cli 
972c			 
972c 21 b1 ed				ld hl, display_fb0 
972f 22 cc eb				ld (display_fb_active), hl 
9732			 
9732			 
9732 cd ae 8a		        call clear_display 
9735 cd d1 8a			call update_display		 
9738			 
9738 21 e8 e5			ld hl, os_cli_cmd 
973b			 
973b 3e 00			ld a, 0		 ; init cli input 
973d 77				ld (hl), a 
973e			 
973e				; TODO f_cursor_ptr should inc row (scroll if required) and set start of row for next input  
973e			 
973e				; now on last line 
973e			 
973e				; TODO scroll screen up 
973e			 
973e				; TODO instead just clear screen and place at top of screen 
973e			 
973e			;	ld a, 0 
973e			;	ld (f_cursor_ptr),a 
973e			 
973e				;call clear_display 
973e				;call update_display 
973e			 
973e				;ld a, kLCD_Line1        ; TODO prompt using direct screen line address. Correct this to frame buffer 
973e 3e 00			ld a, display_row_1        ; TODO prompt using direct screen line address. Correct this to frame buffer 
9740 c3 e8 96			jp cli 
9743			 
9743 .. 00		freeram: db "Free bytes: ",0 
9750 ..			asc: db "1A2F" 
9754 .. 00		endprog: db "End prog...",0 
9760			 
9760			testenter2:   
9760 21 f3 e2			ld hl,scratch+50 
9763 22 e4 e5			ld (os_cur_ptr),hl 
9766 c3 e8 96			jp cli 
9769			 
9769			testenter:  
9769			 
9769 21 50 97			ld hl,asc 
976c			;	ld a,(hl) 
976c			;	call nibble2val 
976c cd 3a 8f			call get_byte 
976f			 
976f			 
976f			;	ld a,(hl) 
976f			;	call atohex 
976f			 
976f			;	call fourehexhl 
976f 32 f3 e2			ld (scratch+50),a 
9772			 
9772			 
9772			 
9772 21 52 97			ld hl,asc+2 
9775			;	ld a, (hl) 
9775			;	call nibble2val 
9775 cd 3a 8f			call get_byte 
9778			 
9778			;	call fourehexhl 
9778 32 f5 e2			ld (scratch+52),a 
977b				 
977b 21 f3 e2			ld hl,scratch+50 
977e 22 e4 e5			ld (os_cur_ptr),hl 
9781 c3 e8 96			jp cli 
9784			 
9784			enter:	 
9784 3a c5 e2			ld a,(scratch+4) 
9787 fe 00			cp 0 
9789 28 0c			jr z, .entercont 
978b				; no, not a null term line so has an address to work out.... 
978b			 
978b 21 c3 e2			ld hl,scratch+2 
978e cd 9a 8f			call get_word_hl 
9791			 
9791 22 e4 e5			ld (os_cur_ptr),hl	 
9794 c3 e8 96			jp cli 
9797			 
9797			 
9797			.entercont:  
9797			 
9797 21 c3 e2			ld hl, scratch+2 
979a cd 3a 8f			call get_byte 
979d			 
979d 2a e4 e5		   	ld hl,(os_cur_ptr) 
97a0 77					ld (hl),a 
97a1 23					inc hl 
97a2 22 e4 e5				ld (os_cur_ptr),hl 
97a5				 
97a5			; get byte  
97a5			 
97a5			 
97a5 c3 e8 96			jp cli 
97a8			 
97a8			 
97a8			; basic monitor support 
97a8			 
97a8			monitor: 
97a8				;  
97a8 cd ae 8a			call clear_display 
97ab 3e 00			ld a, 0 
97ad 11 fc 97			ld de, .monprompt 
97b0 cd c1 8a			call str_at_display 
97b3 cd d1 8a			call update_display 
97b6			 
97b6				; get a monitor command 
97b6			 
97b6 0e 00			ld c, 0     ; entry at top left 
97b8 16 64			ld d, 100   ; max buffer size 
97ba 1e 0f			ld e, 15    ; input scroll area 
97bc 3e 00			ld a, 0     ; init string 
97be 21 bf e4			ld hl, os_input 
97c1 77				ld (hl), a 
97c2 23				inc hl 
97c3 77				ld (hl), a 
97c4 21 bf e4			ld hl, os_input 
97c7 3e 01			ld a, 1     ; init string 
97c9 cd 08 8d			call input_str 
97cc			 
97cc cd ae 8a		        call clear_display 
97cf cd d1 8a			call update_display		 
97d2			 
97d2 3a bf e4			ld a, (os_input) 
97d5 cd 38 90			call toUpper 
97d8 fe 48		        cp 'H' 
97da ca 61 98		        jp z, .monhelp 
97dd fe 44			cp 'D'		; dump 
97df ca 94 98			jp z, .mondump	 
97e2 fe 43			cp 'C'		; dump 
97e4 ca ae 98			jp z, .moncdump	 
97e7 fe 4d			cp 'M'		; dump 
97e9 ca fe 97			jp z, .moneditstart 
97ec fe 55			cp 'U'		; dump 
97ee ca 0a 98			jp z, .monedit	 
97f1 fe 47			cp 'G'		; dump 
97f3 ca 8a 98			jp z, .monjump 
97f6 fe 51			cp 'Q'		; dump 
97f8 c8				ret z	 
97f9			 
97f9			 
97f9				; TODO "S" to access symbol by name and not need the address 
97f9				; TODO "F" to find a string in memory 
97f9			 
97f9 c3 a8 97			jp monitor 
97fc			 
97fc .. 00		.monprompt: db ">", 0 
97fe			 
97fe			.moneditstart: 
97fe				; get starting address 
97fe			 
97fe 21 c1 e4			ld hl,os_input+2 
9801 cd 9a 8f			call get_word_hl 
9804			 
9804 22 e4 e5			ld (os_cur_ptr),hl	 
9807			 
9807 c3 a8 97			jp monitor 
980a			 
980a			.monedit: 
980a				; get byte to load 
980a			 
980a 21 c1 e4			ld hl,os_input+2 
980d cd 3a 8f			call get_byte 
9810			 
9810				; get address to update 
9810 2a e4 e5			ld hl, (os_cur_ptr) 
9813			 
9813				; update byte 
9813			 
9813 77				ld (hl), a 
9814			 
9814				; move to next address and save it 
9814			 
9814 23				inc hl 
9815 22 e4 e5			ld (os_cur_ptr),hl	 
9818			 
9818 c3 a8 97			jp monitor 
981b			 
981b			 
981b .. 00		.monhelptext1: 	db "D-Dump, C-Cont Dump",0 
982f .. 00		.monhelptext2:  db "M-Edit Start, U-Update Byte",0 
984b .. 00		.monhelptext3:  db "G-Call address",0 
985a .. 00		.monhelptext4:  db "Q-Quit",0 
9861			        
9861			.monhelp: 
9861 3e 00			ld a, display_row_1 
9863 11 1b 98		        ld de, .monhelptext1 
9866			 
9866 cd c1 8a			call str_at_display 
9869 3e 28			ld a, display_row_2 
986b 11 2f 98		        ld de, .monhelptext2 
986e					 
986e cd c1 8a			call str_at_display 
9871 3e 50			ld a, display_row_3 
9873 11 4b 98		        ld de, .monhelptext3 
9876					 
9876 cd c1 8a			call str_at_display 
9879 3e 78			ld a, display_row_4 
987b 11 5a 98		        ld de, .monhelptext4 
987e cd c1 8a			call str_at_display 
9881			 
9881 cd d1 8a			call update_display		 
9884			 
9884 cd da 99			call next_page_prompt 
9887 c3 a8 97			jp monitor 
988a			 
988a			.monjump:    
988a 21 c1 e4			ld hl,os_input+2 
988d cd 9a 8f			call get_word_hl 
9890			 
9890 e9				jp (hl) 
9891 c3 a8 97			jp monitor 
9894			 
9894			.mondump:    
9894 21 c1 e4			ld hl,os_input+2 
9897 cd 9a 8f			call get_word_hl 
989a			 
989a 22 e4 e5			ld (os_cur_ptr),hl	 
989d cd e2 98			call dumpcont 
98a0 3e 78			ld a, display_row_4 
98a2 11 54 97			ld de, endprog 
98a5			 
98a5 cd d1 8a			call update_display		 
98a8			 
98a8 cd da 99			call next_page_prompt 
98ab c3 a8 97			jp monitor 
98ae			.moncdump: 
98ae cd e2 98			call dumpcont 
98b1 3e 78			ld a, display_row_4 
98b3 11 54 97			ld de, endprog 
98b6			 
98b6 cd d1 8a			call update_display		 
98b9			 
98b9 cd da 99			call next_page_prompt 
98bc c3 a8 97			jp monitor 
98bf			 
98bf			 
98bf			; TODO symbol access  
98bf			 
98bf			.symbols:     ;; A list of symbols that can be called up  
98bf b1 ed			dw display_fb0 
98c1 .. 00			db "fb0",0  
98c5 7a ea		     	dw store_page 
98c7 .. 00			db "store_page",0 
98d2			 
98d2			 
98d2			dump:	; see if we are cotinuing on from the last command by not uncluding any address 
98d2			 
98d2 3a c2 e2			ld a,(scratch+1) 
98d5 fe 00			cp 0 
98d7 28 09			jr z, dumpcont 
98d9			 
98d9				; no, not a null term line so has an address to work out.... 
98d9			 
98d9 21 c3 e2			ld hl,scratch+2 
98dc cd 9a 8f			call get_word_hl 
98df			 
98df 22 e4 e5			ld (os_cur_ptr),hl	 
98e2			 
98e2			 
98e2			 
98e2			dumpcont: 
98e2			 
98e2				; dump bytes at ptr 
98e2			 
98e2			 
98e2 3e 00			ld a, display_row_1 
98e4 2a cc eb			ld hl, (display_fb_active) 
98e7 cd db 8c			call addatohl 
98ea cd 12 99			call .dumpbyterow 
98ed			 
98ed 3e 28			ld a, display_row_2 
98ef 2a cc eb			ld hl, (display_fb_active) 
98f2 cd db 8c			call addatohl 
98f5 cd 12 99			call .dumpbyterow 
98f8			 
98f8			 
98f8 3e 50			ld a, display_row_3 
98fa 2a cc eb			ld hl, (display_fb_active) 
98fd cd db 8c			call addatohl 
9900 cd 12 99			call .dumpbyterow 
9903			 
9903 3e 78			ld a, display_row_4 
9905 2a cc eb			ld hl, (display_fb_active) 
9908 cd db 8c			call addatohl 
990b cd 12 99			call .dumpbyterow 
990e			 
990e cd d1 8a			call update_display 
9911			;		jp cli 
9911 c9				ret 
9912			 
9912			.dumpbyterow: 
9912			 
9912				;push af 
9912			 
9912 e5				push hl 
9913			 
9913				; calc where to poke the ascii 
9913			if display_cols == 20 
9913				ld a, 16 
9913			else 
9913 3e 1f			ld a, 31 
9915			endif 
9915			 
9915 cd db 8c			call addatohl 
9918 22 c6 e5			ld (os_word_scratch),hl  		; save pos for later 
991b			 
991b			 
991b			; display decoding address 
991b 2a e4 e5		   	ld hl,(os_cur_ptr) 
991e			 
991e 7c				ld a,h 
991f e1				pop hl 
9920 e5				push hl 
9921			;	ld hl, os_word_scratch		; TODO do direct write to frame buffer instead and drop the str_at_display 
9921 cd e4 8e			call hexout 
9924 2a e4 e5		   	ld hl,(os_cur_ptr) 
9927			 
9927 7d				ld a,l 
9928 e1				pop hl 
9929 23				inc hl 
992a 23				inc hl 
992b e5				push hl 
992c			;	ld hl, os_word_scratch+2 
992c cd e4 8e			call hexout 
992f e1				pop hl 
9930 23				inc hl 
9931 23				inc hl 
9932				;ld hl, os_word_scratch+4 
9932 3e 3a			ld a, ':' 
9934 77				ld (hl),a 
9935 23				inc hl 
9936				;ld a, 0 
9936				;ld (hl),a 
9936				;ld de, os_word_scratch 
9936				;pop af 
9936				;push af 
9936			;		ld a, display_row_2 
9936			;		call str_at_display 
9936			;		call update_display 
9936			 
9936			 
9936			;pop af 
9936			;	add 5 
9936			 
9936			if display_cols == 20 
9936				ld b, 4 
9936			else 
9936 06 08			ld b, 8 
9938			endif	 
9938			 
9938			.dumpbyte: 
9938 c5				push bc 
9939 e5				push hl 
993a			 
993a			 
993a 2a e4 e5		   	ld hl,(os_cur_ptr) 
993d 7e					ld a,(hl) 
993e			 
993e					; poke the ascii to display 
993e 2a c6 e5				ld hl,(os_word_scratch) 
9941 77					ld (hl),a 
9942 23					inc hl 
9943 22 c6 e5				ld (os_word_scratch),hl 
9946			 
9946					 
9946			 
9946			 
9946 e1					pop hl 
9947 e5					push hl 
9948			 
9948 cd e4 8e				call hexout 
994b			 
994b					 
994b 2a e4 e5		   	ld hl,(os_cur_ptr) 
994e 23				inc hl 
994f 22 e4 e5		   	ld (os_cur_ptr),hl 
9952			 
9952 e1					pop hl 
9953 23					inc hl 
9954 23					inc hl 
9955 23					inc hl 
9956			 
9956			 
9956			 
9956					;ld a,0 
9956					;ld (os_word_scratch+2),a 
9956					;pop af 
9956					;push af 
9956			 
9956					;ld de, os_word_scratch 
9956					;call str_at_display 
9956			;		call update_display 
9956			;		pop af 
9956 c1					pop bc 
9957 c6 03				add 3 
9959 10 dd			djnz .dumpbyte 
995b			 
995b				 
995b			 
995b c9				ret 
995c			 
995c			jump:	 
995c			 
995c 21 c3 e2			ld hl,scratch+2 
995f cd 9a 8f			call get_word_hl 
9962				;ld hl,(scratch+2) 
9962				;call fourehexhl 
9962			 
9962 22 e4 e5			ld (os_cur_ptr),hl	 
9965			 
9965 e9				jp (hl) 
9966			 
9966			 
9966			 
9966			; TODO implement a basic monitor mode to start with 
9966			 
9966			 
9966			 
9966			 
9966			 
9966			 
9966			 
9966			 
9966			 
9966			; testing and demo code during development 
9966			 
9966			 
9966 .. 00		str1: db "Enter some text...",0 
9979 .. 00		clear: db "                    ",0 
998e			 
998e			demo: 
998e			 
998e			 
998e			 
998e			;	call update_display 
998e			 
998e				; init scratch input area for testing 
998e 21 c1 e2			ld hl, scratch	 
9991 3e 00			ld a,0 
9993 77				ld (hl),a 
9994			 
9994			 
9994 3e 28		            LD   A, display_row_2 
9996			;            CALL fLCD_Pos       ;Position cursor to location in A 
9996 11 66 99		            LD   DE, str1 
9999 cd c1 8a			call str_at_display 
999c			 
999c			;            CALL fLCD_Str       ;Display string pointed to by DE 
999c			cloop:	 
999c 3e 50		            LD   A, display_row_3 
999e			;            CALL fLCD_Pos       ;Position cursor to location in A 
999e 11 79 99		            LD   DE, clear 
99a1			 ;           CALL fLCD_Str       ;Display string pointed to by DE 
99a1 cd c1 8a				call str_at_display 
99a4 3e 78			ld a, display_row_4 
99a6 11 d6 99			ld de, prompt 
99a9			 
99a9 cd c1 8a				call str_at_display 
99ac cd d1 8a			call update_display 
99af			 
99af 3e 79			ld a, kLCD_Line4+1	 ; TODO using direct screen line writes. Correct this to frame buffer 
99b1 16 0a			ld d, 10 
99b3 21 c1 e2			ld hl, scratch	 
99b6 cd 08 8d			call input_str 
99b9			 
99b9			;	call clear_display 
99b9			;'	call update_display 
99b9			 
99b9 3e 00		            LD   A, display_row_1 
99bb			;            CALL fLCD_Pos       ;Position cursor to location in A 
99bb 11 79 99		            LD   DE, clear 
99be cd c1 8a				call str_at_display 
99c1			;            CALL fLCD_Str       ;Display string pointed to by DE 
99c1 3e 00		            LD   A, display_row_1 
99c3			;            CALL fLCD_Pos       ;Position cursor to location in A 
99c3 11 c1 e2		            LD   DE, scratch 
99c6			;            CALL fLCD_Str       ;Display string pointed to by DE 
99c6 cd c1 8a				call str_at_display 
99c9 cd d1 8a			call update_display 
99cc			 
99cc 3e 00				ld a,0 
99ce 21 c1 e2			ld hl, scratch 
99d1 77				ld (hl),a 
99d2			 
99d2 00				nop 
99d3 c3 9c 99			jp cloop 
99d6			 
99d6			 
99d6			 
99d6			; OS Prompt 
99d6			 
99d6 .. 00		prompt: db ">",0 
99d8 .. 00		endprg: db "?",0 
99da			 
99da			 
99da			; handy next page prompt 
99da			next_page_prompt: 
99da e5				push hl 
99db d5				push de 
99dc f5				push af 
99dd c5				push bc 
99de			 
99de 3e 9f			ld a,display_row_4 + display_cols - 1 
99e0 11 d8 99		        ld de, endprg 
99e3 cd c1 8a			call str_at_display 
99e6 cd d1 8a			call update_display 
99e9 cd ee dc			call cin_wait 
99ec c1				pop bc 
99ed f1				pop af 
99ee d1				pop de 
99ef e1				pop hl 
99f0			 
99f0			 
99f0 c9				ret 
99f1			 
99f1			 
99f1			; forth parser 
99f1			 
99f1			; My forth kernel 
99f1			include "forth_kernel.asm" 
99f1			; 
99f1			; kernel to the forth OS 
99f1			 
99f1			DS_TYPE_STR: equ 1     ; string type 
99f1			DS_TYPE_INUM: equ 2     ; $ 16 bit unsigned int usually a hex address 
99f1			DS_TYPE_SNUM: equ 3     ; $ 16 bit signed int  
99f1			;DS_TYPE_FNUM: equ 3      ; 24/32 bit floating point  do string conversion instead of a new type 
99f1			 
99f1			FORTH_PARSEV1: equ 0 
99f1			FORTH_PARSEV2: equ 0 
99f1			FORTH_PARSEV3: equ 0 
99f1			FORTH_PARSEV4: equ 0 
99f1			FORTH_PARSEV5: equ 1 
99f1			 
99f1			;if FORTH_PARSEV5 
99f1			;	FORTH_END_BUFFER: equ 0 
99f1			;else 
99f1			FORTH_END_BUFFER: equ 127 
99f1			;endif 
99f1			 
99f1			FORTH_TRUE: equ 1 
99f1			FORTH_FALSE: equ 0 
99f1			 
99f1			if FORTH_PARSEV4 
99f1			include "forth_stackops.asm" 
99f1			endif 
99f1			 
99f1			if FORTH_PARSEV5 
99f1			include "forth_stackopsv5.asm" 
99f1			 
99f1			; Stack operations for v5 parser on wards 
99f1			; * DATA stack 
99f1			; * LOOP stack 
99f1			; * RETURN stack 
99f1			 
99f1			 
99f1			 
99f1			FORTH_CHK_DSP_UNDER: macro 
99f1				push hl 
99f1				push de 
99f1				ld hl,(cli_data_sp) 
99f1				ld de, cli_data_stack 
99f1				call cmp16 
99f1				jp c, fault_dsp_under 
99f1				pop de 
99f1				pop hl 
99f1				endm 
99f1			 
99f1			 
99f1			FORTH_CHK_RSP_UNDER: macro 
99f1				push hl 
99f1				push de 
99f1				ld hl,(cli_ret_sp) 
99f1				ld de, cli_ret_stack 
99f1				call cmp16 
99f1				jp c, fault_rsp_under 
99f1				pop de 
99f1				pop hl 
99f1				endm 
99f1			 
99f1			FORTH_CHK_LOOP_UNDER: macro 
99f1				push hl 
99f1				push de 
99f1				ld hl,(cli_loop_sp) 
99f1				ld de, cli_loop_stack 
99f1				call cmp16 
99f1				jp c, fault_loop_under 
99f1				pop de 
99f1				pop hl 
99f1				endm 
99f1			 
99f1			FORTH_ERR_TOS_NOTSTR: macro 
99f1				; TOSO might need more for checks when used 
99f1				push af 
99f1				ld a,(hl) 
99f1				cp DS_TYPE_STR 
99f1				jp nz, type_faultn   
99f1				pop af 
99f1				endm 
99f1			 
99f1			FORTH_ERR_TOS_NOTNUM: macro 
99f1				push af 
99f1				ld a,(hl) 
99f1				cp DS_TYPE_INUM 
99f1				jp nz, type_faultn   
99f1				pop af 
99f1				endm 
99f1			 
99f1			 
99f1			; increase data stack pointer and save hl to it 
99f1				 
99f1			FORTH_DSP_NEXT: macro 
99f1				call macro_forth_dsp_next 
99f1				endm 
99f1			 
99f1			 
99f1			macro_forth_dsp_next: 
99f1				if DEBUG_FORTH_STACK_GUARD 
99f1 cd 69 d9				call check_stacks 
99f4				endif 
99f4 e5				push hl 
99f5 d5				push de 
99f6 eb				ex de,hl 
99f7 2a ee e9			ld hl,(cli_data_sp) 
99fa 23				inc hl 
99fb 23				inc hl 
99fc			 
99fc			; PARSEV5 
99fc 23				inc hl 
99fd 22 ee e9			ld (cli_data_sp),hl 
9a00 73				ld (hl), e 
9a01 23				inc hl 
9a02 72				ld (hl), d 
9a03 d1				pop de 
9a04 e1				pop hl 
9a05				if DEBUG_FORTH_STACK_GUARD 
9a05 cd 69 d9				call check_stacks 
9a08				endif 
9a08 c9				ret 
9a09			 
9a09			 
9a09			; increase ret stack pointer and save hl to it 
9a09				 
9a09			FORTH_RSP_NEXT: macro 
9a09				call macro_forth_rsp_next 
9a09				endm 
9a09			 
9a09			macro_forth_rsp_next: 
9a09				if DEBUG_FORTH_STACK_GUARD 
9a09 cd 69 d9				call check_stacks 
9a0c				endif 
9a0c e5				push hl 
9a0d d5				push de 
9a0e eb				ex de,hl 
9a0f 2a f2 e9			ld hl,(cli_ret_sp) 
9a12 23				inc hl 
9a13 23				inc hl 
9a14 22 f2 e9			ld (cli_ret_sp),hl 
9a17 73				ld (hl), e 
9a18 23				inc hl 
9a19 72				ld (hl), d 
9a1a d1				pop de 
9a1b e1				pop hl 
9a1c				if DEBUG_FORTH_STACK_GUARD 
9a1c cd 69 d9				call check_stacks 
9a1f				endif 
9a1f c9				ret 
9a20			 
9a20			; get current ret stack pointer and save to hl  
9a20				 
9a20			FORTH_RSP_TOS: macro 
9a20				call macro_forth_rsp_tos 
9a20				endm 
9a20			 
9a20			macro_forth_rsp_tos: 
9a20				;push de 
9a20 2a f2 e9			ld hl,(cli_ret_sp) 
9a23 cd 5b 9a			call loadhlptrtohl 
9a26				;ld e, (hl) 
9a26				;inc hl 
9a26				;ld d, (hl) 
9a26				;ex de, hl 
9a26					if DEBUG_FORTH_WORDS 
9a26			;			DMARK "RST" 
9a26						CALLMONITOR 
9a26 cd 6f ee			call debug_vector  
9a29				endm  
# End of macro CALLMONITOR
9a29					endif 
9a29				;pop de 
9a29 c9				ret 
9a2a			 
9a2a			; pop ret stack pointer 
9a2a				 
9a2a			FORTH_RSP_POP: macro 
9a2a				call macro_forth_rsp_pop 
9a2a				endm 
9a2a			 
9a2a			 
9a2a			macro_forth_rsp_pop: 
9a2a				if DEBUG_FORTH_STACK_GUARD 
9a2a			;		DMARK "RPP" 
9a2a cd 69 d9				call check_stacks 
9a2d					FORTH_CHK_RSP_UNDER 
9a2d e5				push hl 
9a2e d5				push de 
9a2f 2a f2 e9			ld hl,(cli_ret_sp) 
9a32 11 ac e9			ld de, cli_ret_stack 
9a35 cd f9 8c			call cmp16 
9a38 da 7d da			jp c, fault_rsp_under 
9a3b d1				pop de 
9a3c e1				pop hl 
9a3d				endm 
# End of macro FORTH_CHK_RSP_UNDER
9a3d				endif 
9a3d e5				push hl 
9a3e 2a f2 e9			ld hl,(cli_ret_sp) 
9a41			 
9a41			 
9a41				if FORTH_ENABLE_FREE 
9a41			 
9a41					; get pointer 
9a41			 
9a41					push de 
9a41					push hl 
9a41			 
9a41					ld e, (hl) 
9a41					inc hl 
9a41					ld d, (hl) 
9a41			 
9a41					ex de, hl 
9a41					call free 
9a41			 
9a41					pop hl 
9a41					pop de 
9a41			 
9a41			 
9a41				endif 
9a41			 
9a41			 
9a41 2b				dec hl 
9a42 2b				dec hl 
9a43 22 f2 e9			ld (cli_ret_sp), hl 
9a46				; do stack underflow checks 
9a46 e1				pop hl 
9a47				if DEBUG_FORTH_STACK_GUARD 
9a47 cd 69 d9				call check_stacks 
9a4a					FORTH_CHK_RSP_UNDER 
9a4a e5				push hl 
9a4b d5				push de 
9a4c 2a f2 e9			ld hl,(cli_ret_sp) 
9a4f 11 ac e9			ld de, cli_ret_stack 
9a52 cd f9 8c			call cmp16 
9a55 da 7d da			jp c, fault_rsp_under 
9a58 d1				pop de 
9a59 e1				pop hl 
9a5a				endm 
# End of macro FORTH_CHK_RSP_UNDER
9a5a				endif 
9a5a c9				ret 
9a5b			 
9a5b			 
9a5b			 
9a5b			; routine to load word pointed to by hl into hl 
9a5b			 
9a5b			loadhlptrtohl: 
9a5b			 
9a5b d5				push de 
9a5c 5e				ld e, (hl) 
9a5d 23				inc hl 
9a5e 56				ld d, (hl) 
9a5f eb				ex de, hl 
9a60 d1				pop de 
9a61			 
9a61 c9				ret 
9a62			 
9a62			 
9a62			 
9a62			 
9a62			 
9a62			; push a number held in HL onto the data stack 
9a62			; entry point for pushing a value when already in hl used in function above 
9a62			 
9a62			forth_push_numhl: 
9a62			 
9a62 e5				push hl    ; save value to push 
9a63			 
9a63			if DEBUG_FORTH_PUSH 
9a63				; see if disabled 
9a63			 
9a63			 
9a63 f5				push af 
9a64 3a 6f ee			ld a,(debug_vector) 
9a67 fe c9			cp $c9   ; ret 
9a69			;	ld a, (os_view_disable) 
9a69			;	cp '*' 
9a69 28 34			jr z, .pskip2 
9a6b e5				push hl 
9a6c e5			push hl 
9a6d cd ae 8a			call clear_display 
9a70 e1			pop hl 
9a71 7c				ld a,h 
9a72 21 c6 e5			ld hl, os_word_scratch 
9a75 cd e4 8e			call hexout 
9a78 e1				pop hl 
9a79 7d				ld a,l 
9a7a 21 c8 e5			ld hl, os_word_scratch+2 
9a7d cd e4 8e			call hexout 
9a80			 
9a80 21 ca e5			ld hl, os_word_scratch+4 
9a83 3e 00			ld a,0 
9a85 77				ld (hl),a 
9a86 11 c6 e5			ld de,os_word_scratch 
9a89 3e 28				ld a, display_row_2 
9a8b cd c1 8a				call str_at_display 
9a8e 11 77 cb			ld de, .push_num 
9a91 3e 00			ld a, display_row_1 
9a93			 
9a93 cd c1 8a				call str_at_display 
9a96			 
9a96			 
9a96 cd d1 8a			call update_display 
9a99 cd f1 89			call delay1s 
9a9c cd f1 89			call delay1s 
9a9f			.pskip2:  
9a9f			 
9a9f f1				pop af 
9aa0			endif	 
9aa0			 
9aa0			 
9aa0				FORTH_DSP_NEXT 
9aa0 cd f1 99			call macro_forth_dsp_next 
9aa3				endm 
# End of macro FORTH_DSP_NEXT
9aa3			 
9aa3 2a ee e9			ld hl, (cli_data_sp) 
9aa6			 
9aa6				; save item type 
9aa6 3e 02			ld a,  DS_TYPE_INUM 
9aa8 77				ld (hl), a 
9aa9 23				inc hl 
9aaa			 
9aaa				; get word off stack 
9aaa d1				pop de 
9aab 7b				ld a,e 
9aac 77				ld (hl), a 
9aad 23				inc hl 
9aae 7a				ld a,d 
9aaf 77				ld (hl), a 
9ab0			 
9ab0			if DEBUG_FORTH_PUSH 
9ab0 2b				dec hl 
9ab1 2b				dec hl 
9ab2 2b				dec hl 
9ab3						DMARK "PH5" 
9ab3 f5				push af  
9ab4 3a c8 9a			ld a, (.dmark)  
9ab7 32 6b ee			ld (debug_mark),a  
9aba 3a c9 9a			ld a, (.dmark+1)  
9abd 32 6c ee			ld (debug_mark+1),a  
9ac0 3a ca 9a			ld a, (.dmark+2)  
9ac3 32 6d ee			ld (debug_mark+2),a  
9ac6 18 03			jr .pastdmark  
9ac8 ..			.dmark: db "PH5"  
9acb f1			.pastdmark: pop af  
9acc			endm  
# End of macro DMARK
9acc				CALLMONITOR 
9acc cd 6f ee			call debug_vector  
9acf				endm  
# End of macro CALLMONITOR
9acf			endif	 
9acf			 
9acf c9				ret 
9ad0			 
9ad0			 
9ad0			; Push a string to stack pointed to by hl 
9ad0			 
9ad0			forth_push_str: 
9ad0			 
9ad0			if DEBUG_FORTH_PUSH 
9ad0						DMARK "PSQ" 
9ad0 f5				push af  
9ad1 3a e5 9a			ld a, (.dmark)  
9ad4 32 6b ee			ld (debug_mark),a  
9ad7 3a e6 9a			ld a, (.dmark+1)  
9ada 32 6c ee			ld (debug_mark+1),a  
9add 3a e7 9a			ld a, (.dmark+2)  
9ae0 32 6d ee			ld (debug_mark+2),a  
9ae3 18 03			jr .pastdmark  
9ae5 ..			.dmark: db "PSQ"  
9ae8 f1			.pastdmark: pop af  
9ae9			endm  
# End of macro DMARK
9ae9				CALLMONITOR 
9ae9 cd 6f ee			call debug_vector  
9aec				endm  
# End of macro CALLMONITOR
9aec			endif	 
9aec			    
9aec e5				push hl 
9aed e5				push hl 
9aee			 
9aee			;	ld a, 0   ; find end of string 
9aee cd 41 90			call strlenz 
9af1			if DEBUG_FORTH_PUSH 
9af1						DMARK "PQ2" 
9af1 f5				push af  
9af2 3a 06 9b			ld a, (.dmark)  
9af5 32 6b ee			ld (debug_mark),a  
9af8 3a 07 9b			ld a, (.dmark+1)  
9afb 32 6c ee			ld (debug_mark+1),a  
9afe 3a 08 9b			ld a, (.dmark+2)  
9b01 32 6d ee			ld (debug_mark+2),a  
9b04 18 03			jr .pastdmark  
9b06 ..			.dmark: db "PQ2"  
9b09 f1			.pastdmark: pop af  
9b0a			endm  
# End of macro DMARK
9b0a				CALLMONITOR 
9b0a cd 6f ee			call debug_vector  
9b0d				endm  
# End of macro CALLMONITOR
9b0d			endif	 
9b0d eb				ex de, hl 
9b0e e1				pop hl   ; get ptr to start of string 
9b0f			if DEBUG_FORTH_PUSH 
9b0f						DMARK "PQ3" 
9b0f f5				push af  
9b10 3a 24 9b			ld a, (.dmark)  
9b13 32 6b ee			ld (debug_mark),a  
9b16 3a 25 9b			ld a, (.dmark+1)  
9b19 32 6c ee			ld (debug_mark+1),a  
9b1c 3a 26 9b			ld a, (.dmark+2)  
9b1f 32 6d ee			ld (debug_mark+2),a  
9b22 18 03			jr .pastdmark  
9b24 ..			.dmark: db "PQ3"  
9b27 f1			.pastdmark: pop af  
9b28			endm  
# End of macro DMARK
9b28				CALLMONITOR 
9b28 cd 6f ee			call debug_vector  
9b2b				endm  
# End of macro CALLMONITOR
9b2b			endif	 
9b2b 19				add hl,de 
9b2c			if DEBUG_FORTH_PUSH 
9b2c						DMARK "PQE" 
9b2c f5				push af  
9b2d 3a 41 9b			ld a, (.dmark)  
9b30 32 6b ee			ld (debug_mark),a  
9b33 3a 42 9b			ld a, (.dmark+1)  
9b36 32 6c ee			ld (debug_mark+1),a  
9b39 3a 43 9b			ld a, (.dmark+2)  
9b3c 32 6d ee			ld (debug_mark+2),a  
9b3f 18 03			jr .pastdmark  
9b41 ..			.dmark: db "PQE"  
9b44 f1			.pastdmark: pop af  
9b45			endm  
# End of macro DMARK
9b45				CALLMONITOR 
9b45 cd 6f ee			call debug_vector  
9b48				endm  
# End of macro CALLMONITOR
9b48			endif	 
9b48			 
9b48 2b				dec hl    ; see if there is an optional trailing double quote 
9b49 7e				ld a,(hl) 
9b4a fe 22			cp '"' 
9b4c 20 03			jr nz, .strnoq 
9b4e 3e 00			ld a, 0      ; get rid of double quote 
9b50 77				ld (hl), a 
9b51 23			.strnoq: inc hl 
9b52			 
9b52 3e 00			ld a, 0 
9b54 77				ld (hl), a     ; add null term and get rid of trailing double quote 
9b55			 
9b55 13				inc de ; add one for the type string 
9b56 13				inc de ; add one for null term??? 
9b57			 
9b57				; tos is get string pointer again 
9b57				; de contains space to allocate 
9b57				 
9b57 d5				push de 
9b58			 
9b58 eb				ex de, hl 
9b59			 
9b59				;push af 
9b59			 
9b59			if DEBUG_FORTH_PUSH 
9b59						DMARK "PHm" 
9b59 f5				push af  
9b5a 3a 6e 9b			ld a, (.dmark)  
9b5d 32 6b ee			ld (debug_mark),a  
9b60 3a 6f 9b			ld a, (.dmark+1)  
9b63 32 6c ee			ld (debug_mark+1),a  
9b66 3a 70 9b			ld a, (.dmark+2)  
9b69 32 6d ee			ld (debug_mark+2),a  
9b6c 18 03			jr .pastdmark  
9b6e ..			.dmark: db "PHm"  
9b71 f1			.pastdmark: pop af  
9b72			endm  
# End of macro DMARK
9b72				CALLMONITOR 
9b72 cd 6f ee			call debug_vector  
9b75				endm  
# End of macro CALLMONITOR
9b75			endif	 
9b75 cd b6 90			call malloc	; on ret hl now contains allocated memory 
9b78				if DEBUG_FORTH_MALLOC_GUARD 
9b78 cc cf cb				call z,malloc_error 
9b7b				endif 
9b7b			 
9b7b				 
9b7b c1				pop bc    ; get length 
9b7c d1				pop de   ;  get string start    
9b7d			 
9b7d				; hl has destination from malloc 
9b7d			 
9b7d eb				ex de, hl    ; prep for ldir 
9b7e			 
9b7e d5				push de   ; save malloc area for DSP later 
9b7f				;push hl   ; save malloc area for DSP later 
9b7f			 
9b7f			if DEBUG_FORTH_PUSH 
9b7f						DMARK "PHc" 
9b7f f5				push af  
9b80 3a 94 9b			ld a, (.dmark)  
9b83 32 6b ee			ld (debug_mark),a  
9b86 3a 95 9b			ld a, (.dmark+1)  
9b89 32 6c ee			ld (debug_mark+1),a  
9b8c 3a 96 9b			ld a, (.dmark+2)  
9b8f 32 6d ee			ld (debug_mark+2),a  
9b92 18 03			jr .pastdmark  
9b94 ..			.dmark: db "PHc"  
9b97 f1			.pastdmark: pop af  
9b98			endm  
# End of macro DMARK
9b98				CALLMONITOR 
9b98 cd 6f ee			call debug_vector  
9b9b				endm  
# End of macro CALLMONITOR
9b9b			endif	 
9b9b			 
9b9b			 
9b9b ed b0			ldir 
9b9d			 
9b9d			 
9b9d				; push malloc to data stack     macro?????  
9b9d			 
9b9d				FORTH_DSP_NEXT 
9b9d cd f1 99			call macro_forth_dsp_next 
9ba0				endm 
# End of macro FORTH_DSP_NEXT
9ba0			 
9ba0				; save value and type 
9ba0			 
9ba0 2a ee e9			ld hl, (cli_data_sp) 
9ba3			 
9ba3				; save item type 
9ba3 3e 01			ld a,  DS_TYPE_STR 
9ba5 77				ld (hl), a 
9ba6 23				inc hl 
9ba7			 
9ba7				; get malloc word off stack 
9ba7 d1				pop de 
9ba8 73				ld (hl), e 
9ba9 23				inc hl 
9baa 72				ld (hl), d 
9bab			 
9bab			 
9bab			 
9bab			if DEBUG_FORTH_PUSH 
9bab 2a ee e9			ld hl, (cli_data_sp) 
9bae						DMARK "PHS" 
9bae f5				push af  
9baf 3a c3 9b			ld a, (.dmark)  
9bb2 32 6b ee			ld (debug_mark),a  
9bb5 3a c4 9b			ld a, (.dmark+1)  
9bb8 32 6c ee			ld (debug_mark+1),a  
9bbb 3a c5 9b			ld a, (.dmark+2)  
9bbe 32 6d ee			ld (debug_mark+2),a  
9bc1 18 03			jr .pastdmark  
9bc3 ..			.dmark: db "PHS"  
9bc6 f1			.pastdmark: pop af  
9bc7			endm  
# End of macro DMARK
9bc7				CALLMONITOR 
9bc7 cd 6f ee			call debug_vector  
9bca				endm  
# End of macro CALLMONITOR
9bca			;	ex de,hl 
9bca			endif	 
9bca				; in case of spaces, skip the ptr past the copied string 
9bca				;pop af 
9bca				;ld (cli_origptr),hl 
9bca			 
9bca c9				ret 
9bcb			 
9bcb			 
9bcb			 
9bcb			; TODO ascii push input onto stack given hl to start of input 
9bcb			 
9bcb			; identify type 
9bcb			; if starts with a " then a string 
9bcb			; otherwise it is a number 
9bcb			;  
9bcb			; if a string 
9bcb			;     scan for ending " to get length of string to malloc for + 1 
9bcb			;     malloc 
9bcb			;     put pointer to string on stack first byte flags as string 
9bcb			; 
9bcb			; else a number 
9bcb			;    look for number format identifier 
9bcb			;    $xx hex 
9bcb			;    %xxxxx bin 
9bcb			;    xxxxx decimal 
9bcb			;    convert number to 16bit word.  
9bcb			;    malloc word + 1 with flag to identiy as num 
9bcb			;    put pointer to number on stack 
9bcb			;   
9bcb			;  
9bcb			  
9bcb			forth_apush: 
9bcb				; kernel push 
9bcb			 
9bcb			if DEBUG_FORTH_PUSH 
9bcb						DMARK "PSH" 
9bcb f5				push af  
9bcc 3a e0 9b			ld a, (.dmark)  
9bcf 32 6b ee			ld (debug_mark),a  
9bd2 3a e1 9b			ld a, (.dmark+1)  
9bd5 32 6c ee			ld (debug_mark+1),a  
9bd8 3a e2 9b			ld a, (.dmark+2)  
9bdb 32 6d ee			ld (debug_mark+2),a  
9bde 18 03			jr .pastdmark  
9be0 ..			.dmark: db "PSH"  
9be3 f1			.pastdmark: pop af  
9be4			endm  
# End of macro DMARK
9be4				CALLMONITOR 
9be4 cd 6f ee			call debug_vector  
9be7				endm  
# End of macro CALLMONITOR
9be7			endif	 
9be7				; identify input type 
9be7			 
9be7 7e				ld a,(hl) 
9be8 fe 22			cp '"' 
9bea 28 0a			jr z, .fapstr 
9bec fe 24			cp '$' 
9bee ca 16 9c			jp z, .faphex 
9bf1 fe 25			cp '%' 
9bf3 ca fe 9b			jp z, .fapbin 
9bf6			;	cp 'b' 
9bf6			;	jp z, .fabin 
9bf6				; else decimal 
9bf6			 
9bf6				; TODO do decimal conversion 
9bf6				; decimal is stored as a 16bit word 
9bf6			 
9bf6				; by default everything is a string if type is not detected 
9bf6			.fapstr: ; 
9bf6 fe 22			cp '"' 
9bf8 20 01			jr nz, .strnoqu 
9bfa 23				inc hl 
9bfb			.strnoqu: 
9bfb c3 d0 9a			jp forth_push_str 
9bfe			 
9bfe			 
9bfe			 
9bfe			.fapbin:    ; push a binary string.  
9bfe 11 00 00			ld de, 0   ; hold a 16bit value 
9c01			 
9c01 23			.fapbinshift:	inc hl  
9c02 7e				ld a,(hl) 
9c03 fe 00			cp 0     ; done scanning  
9c05 28 0b			jr z, .fapbdone  	; got it in HL so push  
9c07			 
9c07				; left shift de 
9c07 eb				ex de, hl	 
9c08 29				add hl, hl 
9c09			 
9c09				; is 1 
9c09 fe 31			cp '1' 
9c0b 20 02			jr nz, .binzero 
9c0d cb 4d			bit 1, l 
9c0f			.binzero: 
9c0f eb				ex de, hl	 ; save current de 
9c10 18 ef			jr .fapbinshift 
9c12			 
9c12			.fapbdone: 
9c12 eb				ex de, hl 
9c13 c3 62 9a			jp forth_push_numhl 
9c16			 
9c16			 
9c16			.faphex:   ; hex is always stored as a 16bit word 
9c16				; skip number prefix 
9c16 23				inc hl 
9c17				; turn ascii into number 
9c17 cd 9a 8f			call get_word_hl	; ret 16bit word in hl 
9c1a			 
9c1a c3 62 9a			jp forth_push_numhl 
9c1d			 
9c1d 00				 nop 
9c1e			 
9c1e			.fabin:   ; TODO bin conversion 
9c1e			 
9c1e			 
9c1e c9				ret 
9c1f			 
9c1f			 
9c1f			; get either a string ptr or a 16bit word from the data stack 
9c1f			 
9c1f			FORTH_DSP: macro 
9c1f				call macro_forth_dsp 
9c1f				endm 
9c1f			 
9c1f			macro_forth_dsp: 
9c1f				; data stack pointer points to current word on tos 
9c1f			 
9c1f 2a ee e9			ld hl,(cli_data_sp) 
9c22			 
9c22				if DEBUG_FORTH_PUSH 
9c22						DMARK "DSP" 
9c22 f5				push af  
9c23 3a 37 9c			ld a, (.dmark)  
9c26 32 6b ee			ld (debug_mark),a  
9c29 3a 38 9c			ld a, (.dmark+1)  
9c2c 32 6c ee			ld (debug_mark+1),a  
9c2f 3a 39 9c			ld a, (.dmark+2)  
9c32 32 6d ee			ld (debug_mark+2),a  
9c35 18 03			jr .pastdmark  
9c37 ..			.dmark: db "DSP"  
9c3a f1			.pastdmark: pop af  
9c3b			endm  
# End of macro DMARK
9c3b			 
9c3b cd 02 cc				call display_data_sp 
9c3e				;call break_point_state 
9c3e				;rst 030h 
9c3e				CALLMONITOR 
9c3e cd 6f ee			call debug_vector  
9c41				endm  
# End of macro CALLMONITOR
9c41				endif 
9c41			 
9c41 c9				ret 
9c42			 
9c42			; return hl to start of value on stack 
9c42			 
9c42			FORTH_DSP_VALUE: macro 
9c42				call macro_forth_dsp_value 
9c42				endm 
9c42			 
9c42			macro_forth_dsp_value: 
9c42			 
9c42				FORTH_DSP 
9c42 cd 1f 9c			call macro_forth_dsp 
9c45				endm 
# End of macro FORTH_DSP
9c45			 
9c45 d5				push de 
9c46			 
9c46 23				inc hl ; skip type 
9c47			 
9c47 5e				ld e, (hl) 
9c48 23				inc hl 
9c49 56				ld d, (hl) 
9c4a eb				ex de,hl  
9c4b			 
9c4b d1				pop de 
9c4c			 
9c4c c9				ret 
9c4d			 
9c4d			; return hl to start of value to second item on stack 
9c4d			 
9c4d			FORTH_DSP_VALUEM1: macro 
9c4d				call macro_forth_dsp_value_m1 
9c4d				endm 
9c4d			 
9c4d			macro_forth_dsp_value_m1: 
9c4d			 
9c4d				FORTH_DSP 
9c4d cd 1f 9c			call macro_forth_dsp 
9c50				endm 
# End of macro FORTH_DSP
9c50			 
9c50 2b				dec hl 
9c51 2b				dec hl 
9c52			;	dec hl 
9c52			 
9c52 d5				push de 
9c53			 
9c53 5e				ld e, (hl) 
9c54 23				inc hl 
9c55 56				ld d, (hl) 
9c56 eb				ex de,hl  
9c57			 
9c57 d1				pop de 
9c58			 
9c58 c9				ret 
9c59			 
9c59				 
9c59			 
9c59			; whatever the current top os stack points to, we are now done with it so return memory to malloc 
9c59			 
9c59			FORTH_DSP_POP: macro 
9c59				call macro_forth_dsp_pop 
9c59				endm 
9c59			 
9c59			 
9c59			; get the tos data type 
9c59			 
9c59			FORTH_DSP_TYPE:   macro 
9c59			 
9c59				;FORTH_DSP_VALUE 
9c59				FORTH_DSP 
9c59				 
9c59				; hl points to value 
9c59				; check type 
9c59			 
9c59				ld a,(hl) 
9c59			 
9c59				endm 
9c59			 
9c59			; load the tos value into hl 
9c59			 
9c59			 
9c59			FORTH_DSP_VALUEHL:  macro 
9c59				call macro_dsp_valuehl 
9c59				endm 
9c59			 
9c59			 
9c59			 
9c59			macro_dsp_valuehl: 
9c59				FORTH_DSP_VALUE 
9c59 cd 42 9c			call macro_forth_dsp_value 
9c5c				endm 
# End of macro FORTH_DSP_VALUE
9c5c			 
9c5c				;FORTH_ERR_TOS_NOTNUM 
9c5c			 
9c5c				;inc hl   ; skip type id 
9c5c			 
9c5c			;	push de 
9c5c			; 
9c5c			;	ld e, (hl) 
9c5c			;	inc hl 
9c5c			;	ld d, (hl) 
9c5c			;	ex de,hl  
9c5c			 
9c5c			;	pop de 
9c5c			 
9c5c				if DEBUG_FORTH_PUSH 
9c5c						DMARK "DVL" 
9c5c f5				push af  
9c5d 3a 71 9c			ld a, (.dmark)  
9c60 32 6b ee			ld (debug_mark),a  
9c63 3a 72 9c			ld a, (.dmark+1)  
9c66 32 6c ee			ld (debug_mark+1),a  
9c69 3a 73 9c			ld a, (.dmark+2)  
9c6c 32 6d ee			ld (debug_mark+2),a  
9c6f 18 03			jr .pastdmark  
9c71 ..			.dmark: db "DVL"  
9c74 f1			.pastdmark: pop af  
9c75			endm  
# End of macro DMARK
9c75				CALLMONITOR 
9c75 cd 6f ee			call debug_vector  
9c78				endm  
# End of macro CALLMONITOR
9c78				endif 
9c78 c9				ret 
9c79			 
9c79			forth_apushstrhl:      
9c79				; push of string requires use of cli_origptr 
9c79				; bodge use 
9c79			 
9c79				; get current cli_origptr, save, update with temp pointer  
9c79 ed 5b 3e ea		ld de, (cli_origptr) 
9c7d 22 3e ea			ld (cli_origptr), hl 
9c80 d5				push de 
9c81 cd cb 9b			call forth_apush 
9c84 d1				pop de 
9c85 ed 53 3e ea		ld (cli_origptr), de 
9c89 c9			        ret	 
9c8a			 
9c8a			 
9c8a			; increase loop stack pointer and save hl to it 
9c8a				 
9c8a			FORTH_LOOP_NEXT: macro 
9c8a				call macro_forth_loop_next 
9c8a				;nop 
9c8a				endm 
9c8a			 
9c8a			macro_forth_loop_next: 
9c8a				if DEBUG_FORTH_STACK_GUARD 
9c8a cd 69 d9				call check_stacks 
9c8d				endif 
9c8d e5				push hl 
9c8e d5				push de 
9c8f eb				ex de,hl 
9c90 2a f0 e9			ld hl,(cli_loop_sp) 
9c93 23				inc hl 
9c94 23				inc hl 
9c95					if DEBUG_FORTH_WORDS 
9c95						DMARK "LNX" 
9c95 f5				push af  
9c96 3a aa 9c			ld a, (.dmark)  
9c99 32 6b ee			ld (debug_mark),a  
9c9c 3a ab 9c			ld a, (.dmark+1)  
9c9f 32 6c ee			ld (debug_mark+1),a  
9ca2 3a ac 9c			ld a, (.dmark+2)  
9ca5 32 6d ee			ld (debug_mark+2),a  
9ca8 18 03			jr .pastdmark  
9caa ..			.dmark: db "LNX"  
9cad f1			.pastdmark: pop af  
9cae			endm  
# End of macro DMARK
9cae						CALLMONITOR 
9cae cd 6f ee			call debug_vector  
9cb1				endm  
# End of macro CALLMONITOR
9cb1					endif 
9cb1 22 f0 e9			ld (cli_loop_sp),hl 
9cb4 73				ld (hl), e 
9cb5 23				inc hl 
9cb6 72				ld (hl), d 
9cb7 d1				pop de    ; been reversed so save a swap on restore 
9cb8 e1				pop hl 
9cb9				if DEBUG_FORTH_STACK_GUARD 
9cb9 cd 69 d9				call check_stacks 
9cbc				endif 
9cbc c9				ret 
9cbd			 
9cbd			; get current ret stack pointer and save to hl  
9cbd				 
9cbd			FORTH_LOOP_TOS: macro 
9cbd				call macro_forth_loop_tos 
9cbd				endm 
9cbd			 
9cbd			macro_forth_loop_tos: 
9cbd d5				push de 
9cbe 2a f0 e9			ld hl,(cli_loop_sp) 
9cc1 5e				ld e, (hl) 
9cc2 23				inc hl 
9cc3 56				ld d, (hl) 
9cc4 eb				ex de, hl 
9cc5 d1				pop de 
9cc6 c9				ret 
9cc7			 
9cc7			; pop loop stack pointer 
9cc7				 
9cc7			FORTH_LOOP_POP: macro 
9cc7				call macro_forth_loop_pop 
9cc7				endm 
9cc7			 
9cc7			 
9cc7			macro_forth_loop_pop: 
9cc7				if DEBUG_FORTH_STACK_GUARD 
9cc7					DMARK "LPP" 
9cc7 f5				push af  
9cc8 3a dc 9c			ld a, (.dmark)  
9ccb 32 6b ee			ld (debug_mark),a  
9cce 3a dd 9c			ld a, (.dmark+1)  
9cd1 32 6c ee			ld (debug_mark+1),a  
9cd4 3a de 9c			ld a, (.dmark+2)  
9cd7 32 6d ee			ld (debug_mark+2),a  
9cda 18 03			jr .pastdmark  
9cdc ..			.dmark: db "LPP"  
9cdf f1			.pastdmark: pop af  
9ce0			endm  
# End of macro DMARK
9ce0 cd 69 d9				call check_stacks 
9ce3					FORTH_CHK_LOOP_UNDER 
9ce3 e5				push hl 
9ce4 d5				push de 
9ce5 2a f0 e9			ld hl,(cli_loop_sp) 
9ce8 11 2a e9			ld de, cli_loop_stack 
9ceb cd f9 8c			call cmp16 
9cee da 83 da			jp c, fault_loop_under 
9cf1 d1				pop de 
9cf2 e1				pop hl 
9cf3				endm 
# End of macro FORTH_CHK_LOOP_UNDER
9cf3				endif 
9cf3 e5				push hl 
9cf4 2a f0 e9			ld hl,(cli_loop_sp) 
9cf7 2b				dec hl 
9cf8 2b				dec hl 
9cf9 22 f0 e9			ld (cli_loop_sp), hl 
9cfc				; TODO do stack underflow checks 
9cfc e1				pop hl 
9cfd				if DEBUG_FORTH_STACK_GUARD 
9cfd cd 69 d9				call check_stacks 
9d00					FORTH_CHK_LOOP_UNDER 
9d00 e5				push hl 
9d01 d5				push de 
9d02 2a f0 e9			ld hl,(cli_loop_sp) 
9d05 11 2a e9			ld de, cli_loop_stack 
9d08 cd f9 8c			call cmp16 
9d0b da 83 da			jp c, fault_loop_under 
9d0e d1				pop de 
9d0f e1				pop hl 
9d10				endm 
# End of macro FORTH_CHK_LOOP_UNDER
9d10				endif 
9d10 c9				ret 
9d11			 
9d11			macro_forth_dsp_pop: 
9d11			 
9d11 e5				push hl 
9d12			 
9d12				; release malloc data 
9d12			 
9d12				if DEBUG_FORTH_STACK_GUARD 
9d12 cd 69 d9				call check_stacks 
9d15					FORTH_CHK_DSP_UNDER 
9d15 e5				push hl 
9d16 d5				push de 
9d17 2a ee e9			ld hl,(cli_data_sp) 
9d1a 11 28 e8			ld de, cli_data_stack 
9d1d cd f9 8c			call cmp16 
9d20 da 77 da			jp c, fault_dsp_under 
9d23 d1				pop de 
9d24 e1				pop hl 
9d25				endm 
# End of macro FORTH_CHK_DSP_UNDER
9d25				endif 
9d25				;ld hl,(cli_data_sp) 
9d25			if DEBUG_FORTH_DOT 
9d25				DMARK "DPP" 
9d25 f5				push af  
9d26 3a 3a 9d			ld a, (.dmark)  
9d29 32 6b ee			ld (debug_mark),a  
9d2c 3a 3b 9d			ld a, (.dmark+1)  
9d2f 32 6c ee			ld (debug_mark+1),a  
9d32 3a 3c 9d			ld a, (.dmark+2)  
9d35 32 6d ee			ld (debug_mark+2),a  
9d38 18 03			jr .pastdmark  
9d3a ..			.dmark: db "DPP"  
9d3d f1			.pastdmark: pop af  
9d3e			endm  
# End of macro DMARK
9d3e				CALLMONITOR 
9d3e cd 6f ee			call debug_vector  
9d41				endm  
# End of macro CALLMONITOR
9d41			endif	 
9d41			 
9d41			 
9d41			if FORTH_ENABLE_DSPPOPFREE 
9d41			 
9d41				FORTH_DSP 
9d41 cd 1f 9c			call macro_forth_dsp 
9d44				endm 
# End of macro FORTH_DSP
9d44			 
9d44 7e				ld a, (hl) 
9d45 fe 01			cp DS_TYPE_STR 
9d47 20 23			jr nz, .skippopfree 
9d49			 
9d49				FORTH_DSP_VALUEHL 
9d49 cd 59 9c			call macro_dsp_valuehl 
9d4c				endm 
# End of macro FORTH_DSP_VALUEHL
9d4c 00				nop 
9d4d			if DEBUG_FORTH_DOT 
9d4d				DMARK "DPf" 
9d4d f5				push af  
9d4e 3a 62 9d			ld a, (.dmark)  
9d51 32 6b ee			ld (debug_mark),a  
9d54 3a 63 9d			ld a, (.dmark+1)  
9d57 32 6c ee			ld (debug_mark+1),a  
9d5a 3a 64 9d			ld a, (.dmark+2)  
9d5d 32 6d ee			ld (debug_mark+2),a  
9d60 18 03			jr .pastdmark  
9d62 ..			.dmark: db "DPf"  
9d65 f1			.pastdmark: pop af  
9d66			endm  
# End of macro DMARK
9d66				CALLMONITOR 
9d66 cd 6f ee			call debug_vector  
9d69				endm  
# End of macro CALLMONITOR
9d69			endif	 
9d69 cd 80 91			call free 
9d6c			.skippopfree: 
9d6c				 
9d6c			 
9d6c			endif 
9d6c			 
9d6c			if DEBUG_FORTH_DOT_KEY 
9d6c				DMARK "DP2" 
9d6c				CALLMONITOR 
9d6c			endif	 
9d6c			 
9d6c				; move pointer down 
9d6c			 
9d6c 2a ee e9			ld hl,(cli_data_sp) 
9d6f 2b				dec hl 
9d70 2b				dec hl 
9d71			; PARSEV5 
9d71 2b				dec hl 
9d72 22 ee e9			ld (cli_data_sp), hl 
9d75			 
9d75				if DEBUG_FORTH_STACK_GUARD 
9d75 cd 69 d9				call check_stacks 
9d78					FORTH_CHK_DSP_UNDER 
9d78 e5				push hl 
9d79 d5				push de 
9d7a 2a ee e9			ld hl,(cli_data_sp) 
9d7d 11 28 e8			ld de, cli_data_stack 
9d80 cd f9 8c			call cmp16 
9d83 da 77 da			jp c, fault_dsp_under 
9d86 d1				pop de 
9d87 e1				pop hl 
9d88				endm 
# End of macro FORTH_CHK_DSP_UNDER
9d88				endif 
9d88			 
9d88 e1				pop hl 
9d89			 
9d89 c9				ret 
9d8a			 
9d8a			getwordathl: 
9d8a				; hl points to an address 
9d8a				; load hl with the word at that address 
9d8a			 
9d8a d5				push de 
9d8b			 
9d8b 5e				ld e, (hl) 
9d8c 23				inc hl 
9d8d 56				ld d, (hl) 
9d8e eb				ex de, hl 
9d8f			 
9d8f d1				pop de 
9d90 c9				ret 
9d91			 
9d91			 
9d91			 
9d91			 
9d91			 
9d91			; eof 
9d91			 
# End of file forth_stackopsv5.asm
9d91			endif 
9d91			 
9d91			loadwordinhl:	 
9d91			 
9d91 d5				push de 
9d92			 
9d92 5e				ld e, (hl) 
9d93 23				inc hl 
9d94 56				ld d, (hl) 
9d95 eb				ex de,hl  
9d96			 
9d96 d1				pop de 
9d97			 
9d97 c9				ret 
9d98			 
9d98			user_word_eol:  
9d98				; hl contains the pointer to where to create a linked list item from the end 
9d98				; of the user dict to continue on at the system word dict 
9d98				 
9d98				; poke the stub of the word list linked list to repoint to rom words 
9d98			 
9d98				; stub format 
9d98				; db   word id 
9d98				; dw    link to next word 
9d98			        ; db char length of token 
9d98				; db string + 0 term 
9d98				; db exec code....  
9d98			 
9d98 3e 00			ld a, WORD_SYS_ROOT     ; root word 
9d9a 77				ld (hl), a		; word id 
9d9b 23				inc hl 
9d9c			 
9d9c 11 67 9f			ld de, sysdict 
9d9f 73				ld (hl), e		; next word link ie system dict 
9da0 23				inc hl 
9da1 72				ld (hl), d		; next word link ie system dict 
9da2 23				inc hl	 
9da3			 
9da3			;	ld (hl), sysdict		; next word link ie system dict 
9da3			;	inc hl 
9da3			;	inc hl 
9da3			 
9da3			;	inc hl 
9da3			;	inc hl 
9da3			 
9da3 3e 02			ld a, 2			; word length is 0 
9da5 77				ld (hl), a	 
9da6 23				inc hl 
9da7			 
9da7 3e 7e			ld a, '~'			; word length is 0 
9da9 77				ld (hl), a	 
9daa 23				inc hl 
9dab 3e 00			ld a, 0			; save empty word 
9dad 77				ld (hl), a 
9dae			 
9dae c9				ret 
9daf			 
9daf				 
9daf			 
9daf			forthexec_cleanup: 
9daf				FORTH_RSP_POP 
9daf cd 2a 9a			call macro_forth_rsp_pop 
9db2				endm 
# End of macro FORTH_RSP_POP
9db2 c9				ret 
9db3			 
9db3			forth_call_hl: 
9db3				; taking hl 
9db3 e5				push hl 
9db4 c9				ret 
9db5			 
9db5			; this is called to reset Forth system but keep existing uwords etc 
9db5			 
9db5			forth_warmstart: 
9db5				; setup stack over/under flow checks 
9db5				if DEBUG_FORTH_STACK_GUARD 
9db5 cd 4f d9				call chk_stk_init 
9db8				endif 
9db8			 
9db8				; init stack pointers  - * these stacks go upwards *  
9db8 21 ac e9			ld hl, cli_ret_stack 
9dbb 22 f2 e9			ld (cli_ret_sp), hl	 
9dbe				; set bottom of stack 
9dbe 3e 00			ld a,0 
9dc0 77				ld (hl),a 
9dc1 23				inc hl 
9dc2 77				ld (hl),a 
9dc3			 
9dc3 21 28 e8			ld hl, cli_data_stack 
9dc6 22 ee e9			ld (cli_data_sp), hl	 
9dc9				; set bottom of stack 
9dc9 3e 00			ld a,0 
9dcb 77				ld (hl),a 
9dcc 23				inc hl 
9dcd 77				ld (hl),a 
9dce			 
9dce 21 2a e9			ld hl, cli_loop_stack 
9dd1 22 f0 e9			ld (cli_loop_sp), hl	 
9dd4				; set bottom of stack 
9dd4 3e 00			ld a,0 
9dd6 77				ld (hl),a 
9dd7 23				inc hl 
9dd8 77				ld (hl),a 
9dd9			 
9dd9				; init extent of current open file 
9dd9			 
9dd9 3e 00			ld a, 0 
9ddb 32 6a ea			ld (store_openext), a 
9dde			 
9dde c9				ret 
9ddf			 
9ddf			 
9ddf			 
9ddf			; Cold Start - this is called to setup the whole Forth system 
9ddf			 
9ddf			forth_init: 
9ddf			 
9ddf				; setup stack over/under flow checks 
9ddf			 
9ddf			;	if DEBUG_FORTH_STACK_GUARD 
9ddf			;		call chk_stk_init 
9ddf			;	endif 
9ddf			 
9ddf				; enable auto display updates (slow.....) 
9ddf			 
9ddf 3e 01			ld a, 1 
9de1 32 3c ea			ld (cli_autodisplay), a 
9de4			 
9de4				; if storage is in use disable long reads for now 
9de4 3e 00			ld a, 0 
9de6 32 75 ea			ld (store_longread), a 
9de9			 
9de9			 
9de9				; show start up screen 
9de9			 
9de9 cd ae 8a			call clear_display 
9dec			 
9dec 3e 00			ld a,0 
9dee 32 5e ea			ld (f_cursor_ptr), a 
9df1			 
9df1				; set start of word list in start of ram - for use when creating user words 
9df1			 
9df1 21 03 dd			ld hl, baseram 
9df4 22 be e5			ld (os_last_new_uword), hl 
9df7 cd 98 9d			call user_word_eol 
9dfa				 
9dfa			;		call display_data_sp 
9dfa			;		call next_page_prompt 
9dfa			 
9dfa			 
9dfa			 
9dfa			 
9dfa c9				ret 
9dfb			 
9dfb .. 00		.bootforth: db " Forth Kernel Init ",0 
9e0f			 
9e0f			; TODO push to stack 
9e0f			 
9e0f			;  
9e0f			 
9e0f			if FORTH_PARSEV2 
9e0f			 
9e0f			 
9e0f				include "forth_parserv2.asm" 
9e0f			 
9e0f			endif 
9e0f			 
9e0f			 
9e0f			; parse cli version 1 
9e0f			 
9e0f			if FORTH_PARSEV1 
9e0f			 
9e0f			 
9e0f			 
9e0f			      include "forth_parserv1.asm" 
9e0f			endif 
9e0f				 
9e0f			if FORTH_PARSEV3 
9e0f			 
9e0f			 
9e0f			 
9e0f			      include "forth_parserv3.asm" 
9e0f				include "forth_wordsv3.asm" 
9e0f			endif 
9e0f			 
9e0f			if FORTH_PARSEV4 
9e0f			 
9e0f			 
9e0f			 
9e0f			      include "forth_parserv4.asm" 
9e0f				include "forth_wordsv4.asm" 
9e0f			endif 
9e0f			 
9e0f			if FORTH_PARSEV5 
9e0f			 
9e0f			 
9e0f			 
9e0f			      include "forth_parserv5.asm" 
9e0f			 
9e0f			 
9e0f			; A better parser without using malloc and string copies all over the place.  
9e0f			; Exec in situ should be faster 
9e0f			 
9e0f			;WORD_SYS_LOWPRIM: equ 4    ; Offset for low level prim words opcode 
9e0f			;WORD_SYS_BRANCH: equ 10    ; Offset for branching and loop words opcode 
9e0f			WORD_SYS_UWORD: equ 1   ; Opcode for all user words 
9e0f			WORD_SYS_DELETED: equ 3 ; Op code for a deleted UWORD 
9e0f			WORD_SYS_ROOT: equ 0   ; Opcode for all user words 
9e0f			WORD_SYS_END: equ 0   ; Opcode for all user words 
9e0f			WORD_SYS_CORE: equ 20    ; Offset for dict core words opcode 
9e0f			WORD_FLAG_CODE: equ 0	   ; opcodeflag to exec pure code for this word 
9e0f			WORD_FLAG_JP: equ 1	   ; opcodeflag to list zero term jump table words 
9e0f			 
9e0f			; Core word preamble macro 
9e0f			 
9e0f			CWHEAD:   macro nxtword opcode lit len opflags 
9e0f				db WORD_SYS_CORE+opcode             
9e0f				; internal op code number 
9e0f				dw nxtword            
9e0f				; link to next dict word block 
9e0f				db len + 1 
9e0f				; literal length of dict word inc zero term 
9e0f				db lit,0              
9e0f				; literal dict word 
9e0f			        ; TODO db opflags        
9e0f				endm 
9e0f			 
9e0f			 
9e0f			NEXTW: macro  
9e0f				jp macro_next 
9e0f				endm 
9e0f			 
9e0f			macro_next: 
9e0f			if DEBUG_FORTH_PARSE_KEY 
9e0f				DMARK "NXT" 
9e0f				CALLMONITOR 
9e0f			endif	 
9e0f			;	inc hl  ; skip token null term  
9e0f ed 4b 40 ea		ld bc,(cli_ptr)   ; move to next token to parse in the input stream 
9e13 ed 5b 3e ea		ld de,(cli_origptr)   ; move to next token to parse in the input stream 
9e17 2a c2 e5			ld hl,(os_tok_ptr)   ; move to next token to parse in the input stream 
9e1a			if DEBUG_FORTH_PARSE_KEY 
9e1a				DMARK "}AA" 
9e1a				CALLMONITOR 
9e1a			endif	 
9e1a c3 1d 9f			jp execnext 
9e1d				;jp exec1 
9e1d			       
9e1d			 
9e1d			 
9e1d			; Another go at the parser to compile  
9e1d			 
9e1d			 
9e1d			; TODO rework parser to change all of the string words to byte tokens 
9e1d			; TODO do a search for  
9e1d			 
9e1d			; TODO first run normal parser to zero term sections 
9e1d			; TODO for each word do a token look up to get the op code 
9e1d			; TODO need some means to flag to the exec that this is a byte code form    
9e1d			 
9e1d			 
9e1d			forthcompile: 
9e1d			 
9e1d			; 
9e1d			; line parse: 
9e1d			;       parse raw input buffer 
9e1d			;       tokenise the words 
9e1d			;       malloc new copy (for looping etc) 
9e1d			;       copy to malloc + current pc in line to start of string and add line term 
9e1d			;       save on new rsp 
9e1d			; 
9e1d			 
9e1d			; hl to point to the line to tokenise 
9e1d			 
9e1d			;	push hl 
9e1d 22 c2 e5			ld (os_tok_ptr), hl  ; save ptr to string 
9e20			 
9e20			;	ld a,0		; string term on input 
9e20			;	call strlent 
9e20			 
9e20			;	ld (os_tok_len), hl	 ; save string length 
9e20			 
9e20			;if DEBUG_FORTH_TOK 
9e20			;	ex de,hl		 
9e20			;endif 
9e20			 
9e20			;	pop hl 		; get back string pointer 
9e20			 
9e20			if DEBUG_FORTH_TOK 
9e20						DMARK "TOc" 
9e20				CALLMONITOR 
9e20			endif 
9e20 7e			.cptoken2:    ld a,(hl) 
9e21 23				inc hl 
9e22 fe 7f			cp FORTH_END_BUFFER 
9e24 28 29			jr z, .cptokendone2 
9e26 fe 00			cp 0 
9e28 28 25			jr z, .cptokendone2 
9e2a fe 22			cp '"' 
9e2c 28 0b			jr z, .cptokenstr2     ; will want to skip until end of string delim 
9e2e fe 20			cp ' ' 
9e30 20 ee			jr nz,  .cptoken2 
9e32			 
9e32			; TODO consume comments held between ( and ) 
9e32			 
9e32				; we have a space so change to zero term for dict match later 
9e32 2b				dec hl 
9e33 3e 00			ld a,0 
9e35 77				ld (hl), a 
9e36 23				inc hl 
9e37 18 e7			jr .cptoken2 
9e39				 
9e39			 
9e39			.cptokenstr2: 
9e39				; skip all white space until either eol (because forgot to term) or end double quote 
9e39			        ;   if double quotes spotted ensure to skip any space sep until matched doble quote 
9e39				;inc hl ; skip current double quote 
9e39 7e				ld a,(hl) 
9e3a 23				inc hl 
9e3b fe 22			cp '"' 
9e3d 28 e1			jr z, .cptoken2 
9e3f fe 7f			cp FORTH_END_BUFFER 
9e41 28 0c			jr z, .cptokendone2 
9e43 fe 00			cp 0 
9e45 28 08			jr z, .cptokendone2 
9e47 fe 20			cp ' ' 
9e49 28 02			jr z, .cptmp2 
9e4b 18 ec			jr .cptokenstr2 
9e4d			 
9e4d			.cptmp2:	; we have a space so change to zero term for dict match later 
9e4d				;dec hl 
9e4d				;ld a,"-"	; TODO remove this when working 
9e4d				;ld (hl), a 
9e4d				;inc hl 
9e4d 18 ea			jr .cptokenstr2 
9e4f			 
9e4f			.cptokendone2: 
9e4f				;inc hl 
9e4f 3e 7f			ld a, FORTH_END_BUFFER 
9e51 77				ld (hl),a 
9e52 23				inc hl 
9e53 3e 21			ld a, '!' 
9e55 77				ld (hl),a 
9e56			 
9e56 2a c2 e5			ld hl,(os_tok_ptr) 
9e59			         
9e59			if DEBUG_FORTH_TOK 
9e59						DMARK "Tc1" 
9e59				CALLMONITOR 
9e59			endif 
9e59			 
9e59				; push exec string to top of return stack 
9e59				FORTH_RSP_NEXT 
9e59 cd 09 9a			call macro_forth_rsp_next 
9e5c				endm 
# End of macro FORTH_RSP_NEXT
9e5c c9				ret 
9e5d			 
9e5d			; Another go at the parser need to simplify the process 
9e5d			 
9e5d			forthparse: 
9e5d			 
9e5d			; 
9e5d			; line parse: 
9e5d			;       parse raw input buffer 
9e5d			;       tokenise the words 
9e5d			;       malloc new copy (for looping etc) 
9e5d			;       copy to malloc + current pc in line to start of string and add line term 
9e5d			;       save on new rsp 
9e5d			; 
9e5d			 
9e5d			; hl to point to the line to tokenise 
9e5d			 
9e5d			;	push hl 
9e5d 22 c2 e5			ld (os_tok_ptr), hl  ; save ptr to string 
9e60			 
9e60			;	ld a,0		; string term on input 
9e60			;	call strlent 
9e60			 
9e60			;	ld (os_tok_len), hl	 ; save string length 
9e60			 
9e60			;if DEBUG_FORTH_TOK 
9e60			;	ex de,hl		 
9e60			;endif 
9e60			 
9e60			;	pop hl 		; get back string pointer 
9e60			 
9e60			if DEBUG_FORTH_TOK 
9e60						DMARK "TOK" 
9e60				CALLMONITOR 
9e60			endif 
9e60 7e			.ptoken2:    ld a,(hl) 
9e61 23				inc hl 
9e62 fe 7f			cp FORTH_END_BUFFER 
9e64 28 29			jr z, .ptokendone2 
9e66 fe 00			cp 0 
9e68 28 25			jr z, .ptokendone2 
9e6a fe 22			cp '"' 
9e6c 28 0b			jr z, .ptokenstr2     ; will want to skip until end of string delim 
9e6e fe 20			cp ' ' 
9e70 20 ee			jr nz,  .ptoken2 
9e72			 
9e72			; TODO consume comments held between ( and ) 
9e72			 
9e72				; we have a space so change to zero term for dict match later 
9e72 2b				dec hl 
9e73 3e 00			ld a,0 
9e75 77				ld (hl), a 
9e76 23				inc hl 
9e77 18 e7			jr .ptoken2 
9e79				 
9e79			 
9e79			.ptokenstr2: 
9e79				; skip all white space until either eol (because forgot to term) or end double quote 
9e79			        ;   if double quotes spotted ensure to skip any space sep until matched doble quote 
9e79				;inc hl ; skip current double quote 
9e79 7e				ld a,(hl) 
9e7a 23				inc hl 
9e7b fe 22			cp '"' 
9e7d 28 e1			jr z, .ptoken2 
9e7f fe 7f			cp FORTH_END_BUFFER 
9e81 28 0c			jr z, .ptokendone2 
9e83 fe 00			cp 0 
9e85 28 08			jr z, .ptokendone2 
9e87 fe 20			cp ' ' 
9e89 28 02			jr z, .ptmp2 
9e8b 18 ec			jr .ptokenstr2 
9e8d			 
9e8d			.ptmp2:	; we have a space so change to zero term for dict match later 
9e8d				;dec hl 
9e8d				;ld a,"-"	; TODO remove this when working 
9e8d				;ld (hl), a 
9e8d				;inc hl 
9e8d 18 ea			jr .ptokenstr2 
9e8f			 
9e8f			.ptokendone2: 
9e8f				;inc hl 
9e8f 3e 7f			ld a, FORTH_END_BUFFER 
9e91 77				ld (hl),a 
9e92 23				inc hl 
9e93 3e 21			ld a, '!' 
9e95 77				ld (hl),a 
9e96			 
9e96 2a c2 e5			ld hl,(os_tok_ptr) 
9e99			         
9e99			if DEBUG_FORTH_TOK 
9e99						DMARK "TK1" 
9e99				CALLMONITOR 
9e99			endif 
9e99			 
9e99				; push exec string to top of return stack 
9e99				FORTH_RSP_NEXT 
9e99 cd 09 9a			call macro_forth_rsp_next 
9e9c				endm 
# End of macro FORTH_RSP_NEXT
9e9c c9				ret 
9e9d			 
9e9d			; 
9e9d			;	; malloc size + buffer pointer + if is loop flag 
9e9d			;	ld hl,(os_tok_len) 		 ; get string length 
9e9d			; 
9e9d			;	ld a,l 
9e9d			; 
9e9d			;	cp 0			; we dont want to use a null string 
9e9d			;	ret z 
9e9d			; 
9e9d			;;	add 3    ; prefix malloc with buffer for current word ptr 
9e9d			; 
9e9d			;	add 5     ; TODO when certain not over writing memory remove 
9e9d			; 
9e9d			;		 
9e9d			; 
9e9d			;if DEBUG_FORTH_TOK 
9e9d			;			DMARK "TKE" 
9e9d			;	CALLMONITOR 
9e9d			;endif 
9e9d			; 
9e9d			;	ld l,a 
9e9d			;	ld h,0 
9e9d			;;	push hl   ; save required space for the copy later 
9e9d			;	call malloc 
9e9d			;if DEBUG_FORTH_TOK 
9e9d			;			DMARK "TKM" 
9e9d			;	CALLMONITOR 
9e9d			;endif 
9e9d			;	if DEBUG_FORTH_MALLOC_GUARD 
9e9d			;		push af 
9e9d			;		call ishlzero 
9e9d			;;		ld a, l 
9e9d			;;		add h 
9e9d			;;		cp 0 
9e9d			;		pop af 
9e9d			;		 
9e9d			;		call z,malloc_error 
9e9d			;	endif 
9e9d			;	ld (os_tok_malloc), hl	 ; save malloc ptr 
9e9d			; 
9e9d			; 
9e9d			;if DEBUG_FORTH_TOK 
9e9d			;			DMARK "TKR" 
9e9d			;	CALLMONITOR 
9e9d			;endif 
9e9d			; 
9e9d			;	FORTH_RSP_NEXT 
9e9d			; 
9e9d			;	;inc hl	 ; go past current buffer pointer 
9e9d			;	;inc hl 
9e9d			;	;inc hl   ; and past if loop flag 
9e9d			;		; TODO Need to set flag  
9e9d			; 
9e9d			;	 
9e9d			;	 
9e9d			;	ex de,hl	; malloc is dest 
9e9d			;	ld hl, (os_tok_len) 
9e9d			;;	pop bc 
9e9d			;	ld c, l                
9e9d			;	ld b,0 
9e9d			;	ld hl, (os_tok_ptr) 
9e9d			; 
9e9d			;if DEBUG_FORTH_TOK 
9e9d			;			DMARK "TKT" 
9e9d			;	CALLMONITOR 
9e9d			;endif 
9e9d			; 
9e9d			;	; do str cpy 
9e9d			; 
9e9d			;	ldir      ; copy byte in hl to de 
9e9d			; 
9e9d			;	; set end of buffer to high bit on zero term and use that for end of buffer scan 
9e9d			; 
9e9d			;if DEBUG_FORTH_TOK 
9e9d			; 
9e9d			;			DMARK "TKY" 
9e9d			;	CALLMONITOR 
9e9d			;endif 
9e9d			;	;ld a,0 
9e9d			;	;ld a,FORTH_END_BUFFER 
9e9d			;	ex de, hl 
9e9d			;	;dec hl			 ; go back over the space delim at the end of word 
9e9d			;	;ld (hl),a 
9e9d			;	;inc hl                    ;  TODO double check this. Going past the end of string to make sure end of processing buffer is marked 
9e9d			;	ld a,FORTH_END_BUFFER 
9e9d			;	ld (hl),a 
9e9d			;	inc hl 
9e9d			;	ld a,FORTH_END_BUFFER 
9e9d			;	ld (hl),a 
9e9d			; 
9e9d			;	; init the malloc area data 
9e9d			;	; set pc for in current area 
9e9d			;	;ld hl, (os_tok_malloc) 
9e9d			;	;inc hl 
9e9d			;	;inc hl 
9e9d			;	;inc hl 
9e9d			;	;ex de,hl 
9e9d			;	;ld hl, (os_tok_malloc) 
9e9d			;	;ld (hl),e 
9e9d			;	;inc hl 
9e9d			;	;ld (hl),d 
9e9d			; 
9e9d			; 
9e9d			;	ld hl,(os_tok_malloc) 
9e9d			;if DEBUG_FORTH_PARSE_KEY 
9e9d			;			DMARK "TKU" 
9e9d			;	CALLMONITOR 
9e9d			;endif 
9e9d			; 
9e9d			;	ret 
9e9d			 
9e9d			forthexec: 
9e9d			 
9e9d			; line exec: 
9e9d			; forth parser 
9e9d			 
9e9d			; 
9e9d			;       get current exec line on rsp 
9e9d			 
9e9d				FORTH_RSP_TOS 
9e9d cd 20 9a			call macro_forth_rsp_tos 
9ea0				endm 
# End of macro FORTH_RSP_TOS
9ea0			 
9ea0			;       restore current pc - hl points to malloc of data 
9ea0			 
9ea0				;ld e, (hl) 
9ea0				;inc hl 
9ea0				;ld d, (hl) 
9ea0				;ex de,hl 
9ea0			 
9ea0			 
9ea0			exec1: 
9ea0 22 c2 e5			ld (os_tok_ptr), hl 
9ea3			 
9ea3				; copy our PC to working vars  
9ea3 22 40 ea			ld (cli_ptr), hl 
9ea6 22 3e ea			ld (cli_origptr), hl 
9ea9			 
9ea9 7e				ld a,(hl) 
9eaa fe 7f			cp FORTH_END_BUFFER 
9eac c8				ret z 
9ead			 
9ead				; skip any nulls 
9ead			 
9ead fe 00			cp 0 
9eaf 20 03			jr nz, .execword 
9eb1 23				inc hl 
9eb2 18 ec			jr exec1 
9eb4			 
9eb4			 
9eb4			.execword: 
9eb4			 
9eb4			 
9eb4			 
9eb4			if DEBUG_FORTH_PARSE_KEY 
9eb4						DMARK "KYQ" 
9eb4				CALLMONITOR 
9eb4			endif 
9eb4			;       while at start of word: 
9eb4			; get start of dict (in user area first) 
9eb4			 
9eb4 21 03 dd		ld hl, baseram 
9eb7			;ld hl, sysdict 
9eb7 22 42 ea		ld (cli_nextword),hl 
9eba			;           match word at pc 
9eba			;           exec word 
9eba			;           or push to dsp 
9eba			;           forward to next token 
9eba			;           if line term pop rsp and exit 
9eba			;        
9eba			 
9eba			if DEBUG_FORTH_PARSE_KEY 
9eba						DMARK "KYq" 
9eba				CALLMONITOR 
9eba			endif 
9eba			 
9eba			; 
9eba			; word comp 
9eba			;    get compiled byte and save it (need to decide if code is compiled or not for comparison) 
9eba			;    if byte is 0 then end parsing and report failed lookup (or could be something to add to stack etc) 
9eba			;    move to start of word  
9eba			;    compare word to cli_token 
9eba			 
9eba			.execpnword:	; HL at start of a word in the dictionary to check 
9eba			;	ld hl,(cli_origptr)	 ; reset start of word to look up 
9eba			;	ld (cli_ptr), hl 
9eba			 
9eba 2a 42 ea			ld hl,(cli_nextword) 
9ebd			 
9ebd cd 60 9f			call forth_tok_next 
9ec0			; tok next start here 
9ec0			;	; TODO skip compiled symbol for now 
9ec0			;	inc hl 
9ec0			; 
9ec0			;	; save pointer to next word 
9ec0			; 
9ec0			;	; hl now points to the address of the next word pointer  
9ec0			;	ld e, (hl) 
9ec0			;	inc hl 
9ec0			;	ld d, (hl) 
9ec0			;	inc l 
9ec0			; 
9ec0			;	ex de,hl 
9ec0			;if DEBUG_FORTH_PARSE_NEXTWORD 
9ec0			;	push bc 
9ec0			;	ld bc, (cli_nextword) 
9ec0			;			DMARK "NXW" 
9ec0			;	CALLMONITOR 
9ec0			;	pop bc 
9ec0			;endif 
9ec0			; tok next end here 
9ec0 22 42 ea			ld (cli_nextword), hl     ; save for next check if no match on this word 
9ec3 eb				ex de, hl 
9ec4			 
9ec4			 
9ec4				; save the pointer of the current token - 1 to check against 
9ec4				 
9ec4 22 46 ea			ld (cli_token), hl   
9ec7				; TODO maybe remove below save if no debug 
9ec7				; save token string ptr for any debug later 
9ec7 23				inc hl  
9ec8 22 48 ea			ld (cli_origtoken), hl 
9ecb 2b				dec hl 
9ecc				; save pointer to the start of the next dictionay word 
9ecc 7e				ld a,(hl)   ; get string length 
9ecd 47				ld b,a 
9ece			.execpnwordinc:  
9ece 23				inc hl 
9ecf 10 fd			djnz .execpnwordinc 
9ed1 22 44 ea			ld (cli_execword), hl      ; save start of this words code 
9ed4			 
9ed4				; now check the word token against the string being parsed 
9ed4			 
9ed4 2a 46 ea			ld hl,(cli_token) 
9ed7 23				inc hl     ; skip string length (use zero term instead to end) 
9ed8 22 46 ea			ld (cli_token), hl 
9edb			 
9edb			if DEBUG_FORTH_PARSE_KEY 
9edb						DMARK "KY2" 
9edb			endif 
9edb			if DEBUG_FORTH_PARSE_EXEC 
9edb				; see if disabled 
9edb			 
9edb			;	ld a, (os_view_disable) 
9edb			;	cp '*' 
9edb				ld a, (debug_vector) 
9edb				cp $c9   ; RET  
9edb				jr z, .skip 
9edb			 
9edb				push hl 
9edb				push hl 
9edb				call clear_display 
9edb				ld de, .compword 
9edb				ld a, display_row_1 
9edb				call str_at_display 
9edb				pop de 
9edb				ld a, display_row_2 
9edb				call str_at_display 
9edb				ld hl,(cli_ptr) 
9edb				ld a,(hl) 
9edb			        ld hl, os_word_scratch 
9edb				ld (hl),a 
9edb				ld a,0 
9edb				inc hl 
9edb				ld (hl),a 	 
9edb				ld de, os_word_scratch 
9edb				ld a, display_row_2+10 
9edb				call str_at_display 
9edb				call update_display 
9edb				ld a, 100 
9edb				call aDelayInMS 
9edb				if DEBUG_FORTH_PARSE_EXEC_SLOW 
9edb				call delay250ms 
9edb				endif 
9edb				pop hl 
9edb			.skip:  
9edb			endif	 
9edb			.execpnchar:    ; compare char between token and string to parse 
9edb			 
9edb			if DEBUG_FORTH_PARSE_KEY 
9edb						DMARK "Ky3" 
9edb			endif 
9edb			if DEBUG_FORTH_PARSE_EXEC 
9edb				; see if disabled 
9edb			 
9edb			;	ld a, (os_view_disable) 
9edb			;	cp '*' 
9edb				ld a, (debug_vector) 
9edb				cp $C9  ; RET 
9edb				jr z, .skip2 
9edb			 
9edb			;	call clear_display 
9edb			ld hl,(cli_token) 
9edb			ld a,(hl) 
9edb			ld (os_word_scratch),a 
9edb				ld hl,(cli_ptr) 
9edb			ld a,(hl) 
9edb				ld (os_word_scratch+1),a 
9edb				ld a,0 
9edb				ld (os_word_scratch+2),a 
9edb				ld de,os_word_scratch 
9edb				ld a,display_row_4 
9edb				call str_at_display 
9edb				call update_display 
9edb			.skip2:  
9edb			endif 
9edb 2a 46 ea			ld hl,(cli_token) 
9ede 7e				ld a, (hl)	 ; char in word token 
9edf 23				inc hl 		; move to next char 
9ee0 22 46 ea			ld (cli_token), hl ; and save it 
9ee3 47				ld b,a 
9ee4			 
9ee4 2a 40 ea			ld hl,(cli_ptr) ;	get the char from the string to parse 
9ee7 7e				ld a,(hl) 
9ee8 23				inc hl 
9ee9 22 40 ea			ld (cli_ptr), hl		; move to next char 
9eec cd 38 90			call toUpper 		; make sure the input string matches case 
9eef			 
9eef			if DEBUG_FORTH_PARSE 
9eef			endif 
9eef			 
9eef				; input stream end of token is a space so get rid of it 
9eef			 
9eef			;	cp ' ' 
9eef			;	jr nz, .pnskipspace 
9eef			; 
9eef			;	ld a, 0		; make same term as word token term 
9eef			; 
9eef			;.pnskipspace: 
9eef			 
9eef			if DEBUG_FORTH_PARSE_KEY 
9eef						DMARK "KY7" 
9eef			endif 
9eef b8				cp b 
9ef0 c2 06 9f			jp nz, .execpnskipword	 ; no match so move to next word 
9ef3				 
9ef3			;    if same 
9ef3			;       scan for string terms 0 for token and 32 for input 
9ef3			 
9ef3				 
9ef3			if DEBUG_FORTH_PARSE_KEY 
9ef3						DMARK "KY8" 
9ef3			endif 
9ef3			 
9ef3 80				add b			 
9ef4 fe 00			cp 0			 ; add both chars together, if 32 then other must be 0 so at end of string we are parsing? 
9ef6							; TODO need to make sure last word in zero term string is accounted for 
9ef6 20 e3			jr nz, .execpnchar 		 ; not at end of strings yet 
9ef8			 
9ef8			 
9ef8				; at end of both strings so both are exact match 
9ef8			 
9ef8			;       skip ptr for next word 
9ef8			 
9ef8 2a 40 ea			ld hl,(cli_ptr) 	; at input string term 
9efb 23				inc hl			 ; at next char 
9efc 22 40 ea			ld (cli_ptr), hl     ; save for next round of the parser 
9eff 22 3e ea			ld (cli_origptr), hl     ; save for any restart of current string ie a number or string to push to data stack 
9f02				 
9f02				 
9f02			if DEBUG_FORTH_PARSE_KEY 
9f02						DMARK "KY3" 
9f02			endif 
9f02			 
9f02			 
9f02			 
9f02			;       exec code block 
9f02			if DEBUG_FORTH_JP 
9f02				call clear_display 
9f02				call update_display 
9f02				call delay1s 
9f02				ld hl, (cli_execword)     ; save for next check if no match on this word 
9f02				ld a,h 
9f02				ld hl, os_word_scratch 
9f02				call hexout 
9f02				ld hl, (cli_execword)     ; save for next check if no match on this word 
9f02				ld a,l 
9f02				ld hl, os_word_scratch+2 
9f02				call hexout 
9f02				ld hl, os_word_scratch+4 
9f02				ld a,0 
9f02				ld (hl),a 
9f02				ld de,os_word_scratch 
9f02				call str_at_display 
9f02					ld a, display_row_2 
9f02					call str_at_display 
9f02				ld de, (cli_origtoken) 
9f02				ld a, display_row_1+10 
9f02					call str_at_display 
9f02			 
9f02				ld a,display_row_1 
9f02				ld de, .foundword 
9f02				ld a, display_row_3 
9f02				call str_at_display 
9f02				call update_display 
9f02				call delay1s 
9f02				call delay1s 
9f02				call delay1s 
9f02			endif 
9f02			 
9f02			if DEBUG_FORTH_PARSE_KEY 
9f02						DMARK "KYj" 
9f02			endif 
9f02				; TODO save the word pointer in this exec 
9f02			 
9f02 2a 44 ea			ld hl,(cli_execword) 
9f05 e9				jp (hl) 
9f06			 
9f06			 
9f06			;    if not same 
9f06			;	scan for zero term 
9f06			;	get ptr for next word 
9f06			;	goto word comp 
9f06			 
9f06			.execpnskipword:	; get pointer to next word 
9f06 2a 42 ea			ld hl,(cli_nextword) 
9f09			 
9f09 7e				ld a,(hl) 
9f0a fe 00			cp WORD_SYS_END 
9f0c			;	cp 0 
9f0c 28 09			jr z, .execendofdict			 ; at end of words 
9f0e			 
9f0e			if DEBUG_FORTH_PARSE_KEY 
9f0e						DMARK "KY4" 
9f0e			endif 
9f0e			if DEBUG_FORTH_PARSE_EXEC 
9f0e			 
9f0e				; see if disabled 
9f0e			 
9f0e			;	ld a, (os_view_disable) 
9f0e			;	cp '*' 
9f0e				ld a,(debug_vector) 
9f0e				cp $c9   ; RET 
9f0e				jr z, .noskip 
9f0e			 
9f0e			 
9f0e				ld de, .nowordfound 
9f0e				ld a, display_row_3 
9f0e				call str_at_display 
9f0e				call update_display 
9f0e				ld a, 100 
9f0e				call aDelayInMS 
9f0e				 
9f0e				if DEBUG_FORTH_PARSE_EXEC_SLOW 
9f0e					call delay250ms 
9f0e				endif 
9f0e			.noskip:  
9f0e			 
9f0e			endif	 
9f0e			 
9f0e 2a 3e ea			ld hl,(cli_origptr) 
9f11 22 40 ea			ld (cli_ptr),hl 
9f14			 
9f14			if DEBUG_FORTH_PARSE_KEY 
9f14						DMARK "KY5" 
9f14			endif 
9f14 c3 ba 9e			jp .execpnword			; else go to next word 
9f17			 
9f17			.execendofdict:  
9f17			 
9f17			if DEBUG_FORTH_PARSE_KEY 
9f17						DMARK "KYe" 
9f17			endif 
9f17			if DEBUG_FORTH_PARSE_EXEC 
9f17				; see if disabled 
9f17			 
9f17			;	ld a, (os_view_disable) 
9f17			;	cp '*' 
9f17				ld a,(debug_vector) 
9f17				cp $c9   ; ret 
9f17				jr z, .ispskip 
9f17			 
9f17				call clear_display 
9f17				call update_display 
9f17				call delay1s 
9f17				ld de, (cli_origptr) 
9f17				ld a, display_row_1 
9f17				call str_at_display 
9f17				 
9f17				ld de, .enddict 
9f17				ld a, display_row_3 
9f17				call str_at_display 
9f17				call update_display 
9f17				ld a, 100 
9f17				call aDelayInMS 
9f17				if DEBUG_FORTH_PARSE_EXEC_SLOW 
9f17				call delay1s 
9f17				call delay1s 
9f17				call delay1s 
9f17				endif 
9f17			.ispskip:  
9f17				 
9f17			endif	 
9f17			 
9f17			 
9f17			 
9f17				; if the word is not a keyword then must be a literal so push it to stack 
9f17			 
9f17			; push token to stack to end of word 
9f17			 
9f17				STACKFRAME ON $1efe $2f9f 
9f17				if DEBUG_STACK_IMB 
9f17					if ON 
9f17						exx 
9f17						ld de, $1efe 
9f17						ld a, d 
9f17						ld hl, curframe 
9f17						call hexout 
9f17						ld a, e 
9f17						ld hl, curframe+2 
9f17						call hexout 
9f17						ld hl, $1efe 
9f17						push hl 
9f17						ld hl, $2f9f 
9f17						push hl 
9f17						exx 
9f17					endif 
9f17				endif 
9f17			endm 
# End of macro STACKFRAME
9f17			 
9f17 2a c2 e5		ld hl,(os_tok_ptr) 
9f1a cd cb 9b		call forth_apush 
9f1d			 
9f1d				STACKFRAMECHK ON $1efe $2f9f 
9f1d				if DEBUG_STACK_IMB 
9f1d					if ON 
9f1d						exx 
9f1d						ld hl, $2f9f 
9f1d						pop de   ; $2f9f 
9f1d						call cmp16 
9f1d						jr nz, .spnosame 
9f1d						ld hl, $1efe 
9f1d						pop de   ; $1efe 
9f1d						call cmp16 
9f1d						jr z, .spfrsame 
9f1d						.spnosame: call showsperror 
9f1d						.spfrsame: nop 
9f1d						exx 
9f1d					endif 
9f1d				endif 
9f1d			endm 
# End of macro STACKFRAMECHK
9f1d			 
9f1d			execnext: 
9f1d			 
9f1d			if DEBUG_FORTH_PARSE_KEY 
9f1d						DMARK "KY>" 
9f1d			endif 
9f1d			; move past token to next word 
9f1d			 
9f1d 2a c2 e5		ld hl, (os_tok_ptr) 
9f20 3e 00		ld a, 0 
9f22 01 ff 00		ld bc, 255     ; input buffer size 
9f25 ed b1		cpir 
9f27			 
9f27			if DEBUG_FORTH_PARSE_KEY 
9f27						DMARK "KY!" 
9f27				CALLMONITOR 
9f27			endif	 
9f27			; TODO this might place hl on the null, so will need to forward on??? 
9f27			;inc hl   ; see if this gets onto the next item 
9f27			 
9f27			 
9f27			; TODO pass a pointer to the buffer to push 
9f27			; TODO call function to push 
9f27			 
9f27			; look for end of input 
9f27			 
9f27			;inc hl 
9f27			;ld a,(hl) 
9f27			;cp FORTH_END_BUFFER 
9f27			;ret z 
9f27			 
9f27			 
9f27 c3 a0 9e		jp exec1 
9f2a			 
9f2a			 
9f2a			 
9f2a			 
9f2a			 
9f2a			 
9f2a			 
9f2a			 
9f2a			 
9f2a			findnexttok: 
9f2a			 
9f2a				; hl is pointer to move 
9f2a				; de is the token to locate 
9f2a			 
9f2a					if DEBUG_FORTH 
9f2a						DMARK "NTK" 
9f2a						CALLMONITOR 
9f2a					endif 
9f2a d5				push de 
9f2b			 
9f2b			.fnt1:	 
9f2b				; find first char of token to locate 
9f2b			 
9f2b 1a				ld a, (de) 
9f2c 4f				ld c,a 
9f2d 7e				ld a,(hl) 
9f2e cd 38 90			call toUpper 
9f31					if DEBUG_FORTH 
9f31						DMARK "NT1" 
9f31						CALLMONITOR 
9f31					endif 
9f31 b9				cp c 
9f32			 
9f32 28 03			jr z, .fnt2cmpmorefirst	 
9f34			 
9f34				; first char not found move to next char 
9f34			 
9f34 23				inc hl 
9f35 18 f4			jr .fnt1 
9f37			 
9f37			.fnt2cmpmorefirst:	 
9f37				; first char of token found.  
9f37			 
9f37 e5				push hl     ; save start of token just in case it is the right one 
9f38 d9				exx 
9f39 e1				pop hl        ; save it to hl' 
9f3a d9				exx 
9f3b			 
9f3b			 
9f3b			.fnt2cmpmore:	 
9f3b				; compare the rest 
9f3b				 
9f3b 23				inc hl 
9f3c 13				inc de 
9f3d				 
9f3d 1a				ld a, (de) 
9f3e 4f				ld c,a 
9f3f 7e				ld a,(hl) 
9f40 cd 38 90			call toUpper 
9f43			 
9f43					if DEBUG_FORTH 
9f43						DMARK "NT2" 
9f43						CALLMONITOR 
9f43					endif 
9f43				; c has the token to find char 
9f43				; a has the mem to scan char 
9f43			 
9f43 b9				cp c 
9f44 28 04			jr z,.fntmatch1 
9f46			 
9f46				; they are not the same 
9f46			 
9f46					if DEBUG_FORTH 
9f46						DMARK "NT3" 
9f46						CALLMONITOR 
9f46					endif 
9f46 d1				pop de	; reset de token to look for 
9f47 d5				push de 
9f48 18 e1			jr .fnt1 
9f4a				 
9f4a			.fntmatch1: 
9f4a			 
9f4a				; is the same char a null which means we might have a full hit? 
9f4a					if DEBUG_FORTH 
9f4a						DMARK "NT4" 
9f4a						CALLMONITOR 
9f4a					endif 
9f4a			 
9f4a fe 00			cp 0 
9f4c 28 0b			jr z, .fntmatchyes 
9f4e			 
9f4e				; are we at the end of the token to find? 
9f4e			 
9f4e					if DEBUG_FORTH 
9f4e						DMARK "NT5" 
9f4e						CALLMONITOR 
9f4e					endif 
9f4e 3e 00			ld a, 0 
9f50 b9				cp c 
9f51			 
9f51 c2 3b 9f			jp nz, .fnt2cmpmore    ; no, so keep going to a direct hit 
9f54			 
9f54					if DEBUG_FORTH 
9f54						DMARK "NT6" 
9f54						CALLMONITOR 
9f54					endif 
9f54				; token to find is exhusted but no match to stream 
9f54			 
9f54				; restore tok pointer and continue on 
9f54 d1				pop de 
9f55 d5				push de 
9f56 c3 2b 9f			jp .fnt1 
9f59			 
9f59			 
9f59			.fntmatchyes: 
9f59			 
9f59				; hl now contains the end of the found token 
9f59			 
9f59				; get rid of saved token pointer to find 
9f59			 
9f59 d1				pop de 
9f5a			 
9f5a					if DEBUG_FORTH 
9f5a						DMARK "NT9" 
9f5a						CALLMONITOR 
9f5a					endif 
9f5a			 
9f5a				; hl will be on the null term so forward on 
9f5a			 
9f5a				; get back the saved start of the token 
9f5a			 
9f5a d9				exx 
9f5b e5				push hl     ; save start of token just in case it is the right one 
9f5c d9				exx 
9f5d e1				pop hl        ; save it to hl 
9f5e			 
9f5e c9				ret 
9f5f			 
9f5f			 
9f5f			; LIST needs to find a specific token   
9f5f			; FORGET needs to find a spefici token 
9f5f			 
9f5f			; SAVE needs to find all tokens by flag 
9f5f			; WORDS just needs to scan through all  by flag 
9f5f			; UWORDS needs to scan through all by flag 
9f5f			 
9f5f			 
9f5f			; given hl as pointer to start of dict look up string 
9f5f			; return hl as pointer to start of word block 
9f5f			; or 0 if not found 
9f5f			 
9f5f			forth_find_tok: 
9f5f c9				ret 
9f60			 
9f60			; given hl as pointer to dict structure 
9f60			; move to the next dict block structure 
9f60			 
9f60			forth_tok_next: 
9f60				; hl now points to the address of the next word pointer  
9f60				; TODO skip compiled symbol for now 
9f60			;	push de 
9f60 23				inc hl 
9f61 5e				ld e, (hl) 
9f62 23				inc hl 
9f63 56				ld d, (hl) 
9f64 23				inc hl 
9f65			 
9f65 eb				ex de,hl 
9f66			if DEBUG_FORTH_PARSE_NEXTWORD 
9f66				push bc 
9f66				ld bc, (cli_nextword) 
9f66						DMARK "NXW" 
9f66				CALLMONITOR 
9f66				pop bc 
9f66			endif 
9f66			;	pop de	 
9f66 c9				ret 
9f67			 
9f67			 
9f67			 
9f67			; eof 
# End of file forth_parserv5.asm
9f67				include "forth_wordsv4.asm" 
9f67			 
9f67			; the core word dictionary v4 
9f67			; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Notation.html#Notation 
9f67			 
9f67			; this is a linked list for each of the system words used 
9f67			; user defined words will follow the same format but will be in ram 
9f67			 
9f67			 
9f67			; 
9f67			; 
9f67			; define linked list: 
9f67			; 
9f67			; 1. compiled byte op code 
9f67			; 2. len of text word 
9f67			; 3. text word 
9f67			; 4. ptr to next dictionary word 
9f67			; 5. asm, calls etc for the word 
9f67			; 
9f67			;  if 1 == 0 then last word in dict  
9f67			;   
9f67			; set the start of dictionary scanning to be in ram and the last word point to the system dict 
9f67			;  
9f67			;  
9f67			; create basic standard set of words 
9f67			; 
9f67			;  
9f67			; + - / * DUP EMIT . SWAP IF..THEN..ELSE DO..LOOP  : ; DROP  
9f67			; 2DUP 2DROP 2SWAP  
9f67			; @ C@ - get byte  
9f67			; ! C! - store byte 
9f67			; 0< true if less than zero 
9f67			; 0= true if zero 
9f67			; < >  
9f67			; = true if same 
9f67			; variables 
9f67			 
9f67			 
9f67			; Hardware specific words I may need 
9f67			; 
9f67			; IN OUT  
9f67			; calls to key util functions 
9f67			; calls to hardward abstraction stuff 
9f67			; easy control of frame buffers and lcd i/o 
9f67			; keyboard  
9f67			 
9f67			 
9f67			;DICT: macro 
9f67			; op_code, len, word, next 
9f67			;    word: 
9f67			;    db op_code 
9f67			;    ds word zero term 
9f67			;    dw next 
9f67			;    endm 
9f67			 
9f67			 
9f67			 
9f67			 
9f67			; op code 1 is a flag for user define words which are to be handled differently 
9f67			 
9f67			 
9f67			; 
9f67			; 
9f67			;    TODO on entry to a word this should be the expected environment 
9f67			;    hl - tos value if number then held, if string this is the ptr 
9f67			;    de -  
9f67			 
9f67			 
9f67			; opcode ranges 
9f67			; 0 - end of word dict 
9f67			; 255 - user define words 
9f67			 
9f67			sysdict: 
9f67			include "forth_opcodes.asm" 
9f67			; op codes for forth keywords 
9f67			; free to use code 0  
9f67				OPCODE_HEAP: equ  1 
9f67				OPCODE_EXEC: equ 2 
9f67				OPCODE_DUP: equ 3 
9f67				OPCODE_SWAP: equ 4 
9f67				OPCODE_COLN: equ 5 
9f67				OPCODE_SCOLN: equ 6 
9f67				OPCODE_DROP: equ 7 
9f67				OPCODE_DUP2: equ 8 
9f67				OPCODE_DROP2: equ 9 
9f67				OPCODE_SWAP2: equ 10 
9f67				OPCODE_AT: equ 11 
9f67				OPCODE_CAT: equ 12 
9f67				OPCODE_BANG: equ 13 
9f67				OPCODE_CBANG: equ 14 
9f67				OPCODE_SCALL: equ 15 
9f67				OPCODE_DEPTH: equ 16 
9f67				OPCODE_OVER: equ 17 
9f67				OPCODE_PAUSE: equ 18 
9f67				OPCODE_PAUSES: equ 19 
9f67				OPCODE_ROT: equ 20 
9f67			;free to reuse	OPCODE_WORDS: equ 21 
9f67			        OPCODE_NOT: equ 21 
9f67				OPCODE_UWORDS: equ 22 
9f67				OPCODE_BP: equ 23 
9f67				OPCODE_MONITOR: equ 24  
9f67				OPCODE_MALLOC: equ 25 
9f67				OPCODE_FREE: equ 26 
9f67				OPCODE_LIST: equ 27 
9f67				OPCODE_FORGET: equ 28 
9f67				OPCODE_NOP: equ 29 
9f67				OPCODE_COMO: equ 30 
9f67				OPCODE_COMC: equ 31 
9f67			;free to reuse	OPCODE_ENDCORE: equ 32 
9f67				OPCODE_AFTERSOUND: equ 33 
9f67				OPCODE_GP2: equ 34 
9f67				OPCODE_GP3: equ 35 
9f67				OPCODE_GP4: equ 36 
9f67				OPCODE_SIN: equ 37 
9f67				OPCODE_SOUT: equ 38 
9f67				OPCODE_SPIO: equ 39 
9f67				OPCODE_SPICEH: equ 40 
9f67				OPCODE_SPIOb: equ 41 
9f67				OPCODE_SPII: equ 42 
9f67				OPCODE_SESEL: equ 43 
9f67				OPCODE_CARTDEV: equ 44 
9f67			; free to reuse	OPCODE_ENDDEVICE: equ 45 
9f67				OPCODE_FB: equ 46 
9f67				OPCODE_EMIT: equ 47 
9f67				OPCODE_DOTH: equ 48 
9f67				OPCODE_DOTF: equ 49 
9f67				OPCODE_DOT: equ 50 
9f67				OPCODE_CLS: equ 51 
9f67				OPCODE_DRAW: equ 52 
9f67				OPCODE_DUMP: equ 53 
9f67				OPCODE_CDUMP: equ 54 
9f67				OPCODE_DAT: equ 55 
9f67				OPCODE_HOME: equ 56 
9f67				OPCODE_SPACE: equ 57 
9f67				OPCODE_SPACES: equ 58 
9f67				OPCODE_SCROLL: equ 59 
9f67				OPCODE_ATQ: equ 60 
9f67				OPCODE_AUTODSP: equ 61 
9f67				OPCODE_MENU: equ 62 
9f67			; free to reuse	OPCODE_ENDDISPLAY: equ 63  
9f67				OPCODE_THEN: equ 64 
9f67				OPCODE_ELSE: equ 65 
9f67				OPCODE_DO: equ 66 
9f67				OPCODE_LOOP: equ 67 
9f67				OPCODE_I: equ 68 
9f67				OPCODE_DLOOP: equ 69  
9f67				OPCODE_REPEAT: equ 70  
9f67				OPCODE_UNTIL: equ 71 
9f67				OPCODE_ENDFLOW: equ 72 
9f67				OPCODE_WAITK: equ 73 
9f67				OPCODE_ACCEPT: equ 74 
9f67				OPCODE_EDIT: equ 75 
9f67			;free to reuse	OPCODE_ENDKEY: equ 76 
9f67				OPCODE_LZERO: equ 77 
9f67				OPCODE_TZERO: equ 78 
9f67				OPCODE_LESS: equ 79 
9f67				OPCODE_GT: equ 80 
9f67				OPCODE_EQUAL: equ 81  
9f67			;free to reuse	OPCODE_ENDLOGIC: equ 82 
9f67				OPCODE_NEG: equ 83 
9f67				OPCODE_DIV: equ 84 
9f67				OPCODE_MUL: equ 85 
9f67				OPCODE_MIN: equ 86 
9f67				OPCODE_MAX: equ 87 
9f67				OPCODE_RND16: equ 88 
9f67				OPCODE_RND8: equ 89 
9f67				OPCODE_RND: equ 90 
9f67			;free to reuse	OPCODE_ENDMATHS: equ 91  
9f67				OPCODE_BYNAME: equ 92 
9f67				OPCODE_DIR: equ 93 
9f67				OPCODE_SAVE: equ 94 
9f67				OPCODE_LOAD: equ 95 
9f67				OPCODE_BSAVE: equ 96 
9f67				OPCODE_BLOAD: equ 97 
9f67				OPCODE_SEO: equ 98  
9f67				OPCODE_SEI: equ 99 
9f67				OPCODE_SFREE: equ 100 
9f67				OPCODE_SIZE: equ 101 
9f67				OPCODE_CREATE: equ 102 
9f67				OPCODE_APPEND: equ 103 
9f67				OPCODE_SDEL: equ 104 
9f67				OPCODE_OPEN: equ 105 
9f67				OPCODE_READ: equ 106 
9f67				OPCODE_EOF: equ 106 
9f67				OPCODE_FORMAT: equ 107 
9f67				OPCODE_LABEL: equ 108 
9f67				OPCODE_LABELS: equ 109 
9f67			;free to reuse	OPCODE_ENDSTORAGE: equ 110  
9f67				OPCODE_UPPER: equ 111 
9f67				OPCODE_LOWER: equ 112 
9f67				OPCODE_SUBSTR: equ 113 
9f67				OPCODE_LEFT: equ 114 
9f67				OPCODE_RIGHT: equ 115 
9f67				OPCODE_STR2NUM: equ 116 
9f67				OPCODE_NUM2STR: equ 117 
9f67				OPCODE_CONCAT: equ 118 
9f67				OPCODE_FIND: equ 119 
9f67				OPCODE_LEN: equ 120 
9f67				OPCODE_CHAR: equ 121 
9f67			; free to reuse	OPCODE_STRLEN: equ 122 
9f67			; free to reuse	OPCODE_ENDSTR: equ 123 
9f67				OPCODE_V0S: equ 124 
9f67				OPCODE_V0Q: equ 125 
9f67				OPCODE_V1S: equ 126 
9f67				OPCODE_V1Q: equ 127 
9f67				OPCODE_V2S: equ 128 
9f67				OPCODE_V2Q: equ 129 
9f67				OPCODE_V3S: equ 130 
9f67				OPCODE_V3Q: equ 131 
9f67			;free to reuse	OPCODE_END: equ 132 
9f67				OPCODE_ZDUP: equ 133 
9f67			 
9f67			; eof 
# End of file forth_opcodes.asm
9f67			 
9f67			include "forth_words_core.asm" 
9f67			 
9f67			; | ## Core Words 
9f67			 
9f67			;if MALLOC_4 
9f67			 
9f67			.HEAP: 
9f67			CWHEAD .EXEC OPCODE_HEAP "HEAP" 4 WORD_FLAG_CODE 
9f67 15				db WORD_SYS_CORE+OPCODE_HEAP             
9f68 a6 9f			dw .EXEC            
9f6a 05				db 4 + 1 
9f6b .. 00			db "HEAP",0              
9f70				endm 
# End of macro CWHEAD
9f70			; | HEAP ( -- u1 u2 )   Pushes u1 the current number of bytes in the heap and u2 the remaining bytes - Only present if using my MALLOC | DONE 
9f70			; | | u1 - Current number of bytes in the heap 
9f70			; | | u2 - Remaining bytes left on the heap 
9f70			; | |  
9f70			; | | The heap is used for storing user defined words as well as any values pushed to stack. 
9f70			 
9f70			 
9f70				if DEBUG_FORTH_WORDS_KEY 
9f70					DMARK "HEP" 
9f70 f5				push af  
9f71 3a 85 9f			ld a, (.dmark)  
9f74 32 6b ee			ld (debug_mark),a  
9f77 3a 86 9f			ld a, (.dmark+1)  
9f7a 32 6c ee			ld (debug_mark+1),a  
9f7d 3a 87 9f			ld a, (.dmark+2)  
9f80 32 6d ee			ld (debug_mark+2),a  
9f83 18 03			jr .pastdmark  
9f85 ..			.dmark: db "HEP"  
9f88 f1			.pastdmark: pop af  
9f89			endm  
# End of macro DMARK
9f89					CALLMONITOR 
9f89 cd 6f ee			call debug_vector  
9f8c				endm  
# End of macro CALLMONITOR
9f8c				endif 
9f8c 2a 0d dd			ld hl, (free_list )      
9f8f 11 12 dd			ld de, heap_start 
9f92			 
9f92 ed 52			sbc hl, de  
9f94			 
9f94 cd 62 9a			call forth_push_numhl 
9f97			 
9f97			 
9f97 ed 5b 0d dd		ld de, (free_list )      
9f9b 21 9c e2			ld hl, heap_end 
9f9e			 
9f9e ed 52			sbc hl, de 
9fa0			 
9fa0 cd 62 9a			call forth_push_numhl 
9fa3				 
9fa3			 
9fa3				 
9fa3			 
9fa3			 
9fa3			 
9fa3				NEXTW 
9fa3 c3 0f 9e			jp macro_next 
9fa6				endm 
# End of macro NEXTW
9fa6			;endif 
9fa6			 
9fa6			.EXEC: 
9fa6			;	CWHEAD .STKEXEC OPCODE_EXEC "EXEC" 4 WORD_FLAG_CODE 
9fa6			;; > EXEC ( u -- )    Execs the string on TOS as a FORTH expression > CRASHES ON NEXTW 
9fa6			;; > > u - A qutoed string which can consist of any valid Forth expression excluding : defintions (use LOAD instead) 
9fa6			;; > > 
9fa6			;; > >   
9fa6			;	STACKFRAME OFF $5efe $5f9f 
9fa6			; 
9fa6			;		if DEBUG_FORTH_WORDS_KEY 
9fa6			;			DMARK "EXE" 
9fa6			;			CALLMONITOR 
9fa6			;		endif 
9fa6			; 
9fa6			;	FORTH_DSP_VALUEHL 
9fa6			; 
9fa6			;	FORTH_DSP_POP 
9fa6			; 
9fa6			;		if DEBUG_FORTH_WORDS 
9fa6			;			DMARK "EX1" 
9fa6			;			CALLMONITOR 
9fa6			;		endif 
9fa6			;;	ld e,(hl) 
9fa6			;;	inc hl 
9fa6			;;	ld d,(hl) 
9fa6			;;	ex de,hl 
9fa6			; 
9fa6			;;		if DEBUG_FORTH_WORDS 
9fa6			;;			DMARK "EX2" 
9fa6			;;			CALLMONITOR 
9fa6			;;		endif 
9fa6			;	push hl 
9fa6			; 
9fa6			;	;ld a, 0 
9fa6			;	;ld a, FORTH_END_BUFFER 
9fa6			;	call strlenz 
9fa6			;	inc hl   ; include zero term to copy 
9fa6			;	inc hl   ; include term 
9fa6			;	inc hl   ; include term 
9fa6			;	ld b,0 
9fa6			;	ld c,l 
9fa6			;	pop hl 
9fa6			;	ld de, execscratch 
9fa6			;		if DEBUG_FORTH_WORDS 
9fa6			;			DMARK "EX3" 
9fa6			;			CALLMONITOR 
9fa6			;		endif 
9fa6			;	ldir 
9fa6			; 
9fa6			; 
9fa6			;	ld hl, execscratch 
9fa6			; 
9fa6			;		if DEBUG_FORTH_WORDS 
9fa6			;			DMARK "EXe" 
9fa6			;			CALLMONITOR 
9fa6			;		endif 
9fa6			; 
9fa6			;	call forthparse 
9fa6			;	call forthexec 
9fa6			;;	call forthexec_cleanup 
9fa6			;;	call forthparse 
9fa6			;;	call forthexec 
9fa6			; 
9fa6			;	STACKFRAMECHK OFF $5efe $5f9f 
9fa6			; 
9fa6			;	; an immediate word so no need to process any more words 
9fa6			;	ret 
9fa6			;	NEXTW 
9fa6			 
9fa6			; dead code - old version  
9fa6			;	FORTH_RSP_NEXT 
9fa6			 
9fa6			;  
9fa6			;	ld bc,(cli_ptr)   ; move to next token to parse in the input stream 
9fa6			;	ld de,(cli_origptr)   ; move to next token to parse in the input stream 
9fa6			;	ld hl,(os_tok_ptr)   ; move to next token to parse in the input stream 
9fa6			;	push hl 
9fa6			;	push de 
9fa6			;	push bc 
9fa6			; 
9fa6			; 
9fa6			;		if DEBUG_FORTH_WORDS_KEY 
9fa6			;			DMARK "EXR" 
9fa6			;			CALLMONITOR 
9fa6			;		endif 
9fa6			; 
9fa6			; 
9fa6			; 
9fa6			;	;v5 FORTH_DSP_VALUE 
9fa6			;	FORTH_DSP_VALUEHL 
9fa6			; 
9fa6			;	; TODO do string type checks 
9fa6			; 
9fa6			;;v5	inc hl   ; skip type 
9fa6			; 
9fa6			;	push hl  ; source code  
9fa6			;		if DEBUG_FORTH_WORDS 
9fa6			;			DMARK "EX1" 
9fa6			;			CALLMONITOR 
9fa6			;		endif 
9fa6			;	ld a, 0 
9fa6			;	call strlent 
9fa6			; 
9fa6			;	inc hl 
9fa6			;	inc hl 
9fa6			;	inc hl 
9fa6			;	inc hl 
9fa6			; 
9fa6			;	push hl    ; size 
9fa6			; 
9fa6			;		if DEBUG_FORTH_WORDS 
9fa6			;			DMARK "EX2" 
9fa6			;			CALLMONITOR 
9fa6			;		endif 
9fa6			;	call malloc 
9fa6			; 
9fa6			;	ex de, hl    ; de now contains malloc area 
9fa6			;	pop bc   	; get byte count 
9fa6			;	pop hl      ; get string to copy 
9fa6			; 
9fa6			;	push de     ; save malloc for free later 
9fa6			; 
9fa6			;		if DEBUG_FORTH_WORDS 
9fa6			;			DMARK "EX3" 
9fa6			;			CALLMONITOR 
9fa6			;		endif 
9fa6			;	ldir       ; duplicate string 
9fa6			; 
9fa6			;	; at the end of the string so go back the three extra spaces and fill in with extra terms 
9fa6			;	 
9fa6			;	; TODO fix the parse would be better than this...  
9fa6			;	ex de, hl 
9fa6			;	dec hl 
9fa6			;	ld a, 0 
9fa6			;	ld (hl), a 
9fa6			;	dec hl 
9fa6			;	ld a, ' ' 
9fa6			;	ld (hl), a 
9fa6			;	dec hl 
9fa6			;	ld (hl), a 
9fa6			; 
9fa6			;	dec hl 
9fa6			;	ld (hl), a 
9fa6			; 
9fa6			; 
9fa6			;	FORTH_DSP_POP  
9fa6			; 
9fa6			;	pop hl     
9fa6			;	push hl    ; save malloc area 
9fa6			; 
9fa6			;		if DEBUG_FORTH_WORDS 
9fa6			;			DMARK "EX4" 
9fa6			;			CALLMONITOR 
9fa6			;		endif 
9fa6			; 
9fa6			;	call forthparse 
9fa6			;	call forthexec 
9fa6			;	 
9fa6			;	pop hl 
9fa6			;	if DEBUG_FORTH_WORDS 
9fa6			;		DMARK "EX5" 
9fa6			;		CALLMONITOR 
9fa6			;	endif 
9fa6			; 
9fa6			;	if FORTH_ENABLE_FREE 
9fa6			;	call free 
9fa6			;	endif 
9fa6			; 
9fa6			;	if DEBUG_FORTH_WORDS 
9fa6			;		DMARK "EX6" 
9fa6			;		CALLMONITOR 
9fa6			;	endif 
9fa6			; 
9fa6			;	pop bc 
9fa6			;	pop de 
9fa6			;	pop hl 
9fa6			;;	FORTH_RSP_POP	  
9fa6			;	ld (cli_ptr),bc   ; move to next token to parse in the input stream 
9fa6			;	ld (cli_origptr),de   ; move to next token to parse in the input stream 
9fa6			;	ld (os_tok_ptr),hl   ; move to next token to parse in the input stream 
9fa6			; 
9fa6			;	if DEBUG_FORTH_WORDS 
9fa6			;		DMARK "EX7" 
9fa6			;		CALLMONITOR 
9fa6			;	endif 
9fa6			;	NEXTW 
9fa6			 
9fa6			;.STKEXEC: 
9fa6			;	CWHEAD .ZDUP 43 "STKEXEC" 7 WORD_FLAG_CODE 
9fa6			;; > STKEXEC ( u .. u c -- ) Taking c count of strings off of the stack the strings are evaluated as code > TO TEST 
9fa6			; 
9fa6			; 
9fa6			;		if DEBUG_FORTH_WORDS_KEY 
9fa6			;			DMARK "STX" 
9fa6			;			CALLMONITOR 
9fa6			;		endif 
9fa6			; 
9fa6			;	FORTH_DSP_VALUEHL 
9fa6			; 
9fa6			;	ld (store_tmp1), hl    ; count 
9fa6			; 
9fa6			;	FORTH_DSP_POP 
9fa6			;.stkexec1: 
9fa6			;	ld hl, (store_tmp1)   ; count 
9fa6			;	ld a, 0 
9fa6			;	cp l 
9fa6			;	ret z 
9fa6			; 
9fa6			;	dec hl 
9fa6			;	ld (store_tmp1), hl    ; count 
9fa6			;	 
9fa6			;	FORTH_DSP_VALUEHL 
9fa6			;	push hl 
9fa6			;	 
9fa6			;		if DEBUG_FORTH_WORDS 
9fa6			;			DMARK "EXp" 
9fa6			;			CALLMONITOR 
9fa6			;		endif 
9fa6			;	FORTH_DSP_POP 
9fa6			; 
9fa6			;	call strlenz 
9fa6			;	inc hl   ; include zero term to copy 
9fa6			;	inc hl   ; include zero term to copy 
9fa6			;	inc hl   ; include zero term to copy 
9fa6			;	ld b,0 
9fa6			;	ld c,l 
9fa6			;	pop hl 
9fa6			;	ld de, execscratch 
9fa6			;		if DEBUG_FORTH_WORDS 
9fa6			;			DMARK "EX3" 
9fa6			;			CALLMONITOR 
9fa6			;		endif 
9fa6			;	ldir 
9fa6			; 
9fa6			; 
9fa6			;	ld hl, execscratch 
9fa6			; 
9fa6			;		if DEBUG_FORTH_WORDS 
9fa6			;			DMARK "EXP" 
9fa6			;			CALLMONITOR 
9fa6			;		endif 
9fa6			; 
9fa6			;	call forthparse 
9fa6			;	ld hl, execscratch 
9fa6			;		if DEBUG_FORTH_WORDS 
9fa6			;			DMARK "EXx" 
9fa6			;			CALLMONITOR 
9fa6			;		endif 
9fa6			;	call forthexec 
9fa6			; 
9fa6			;	jp .stkexec1 
9fa6			; 
9fa6			;	ret 
9fa6			 
9fa6			 
9fa6			.DUP: 
9fa6			CWHEAD .ZDUP OPCODE_DUP "DUP" 3 WORD_FLAG_CODE 
9fa6 17				db WORD_SYS_CORE+OPCODE_DUP             
9fa7 1c a0			dw .ZDUP            
9fa9 04				db 3 + 1 
9faa .. 00			db "DUP",0              
9fae				endm 
# End of macro CWHEAD
9fae			; | DUP ( u -- u u )     Duplicate whatever item is on TOS | DONE 
9fae			 
9fae				if DEBUG_FORTH_WORDS_KEY 
9fae					DMARK "DUP" 
9fae f5				push af  
9faf 3a c3 9f			ld a, (.dmark)  
9fb2 32 6b ee			ld (debug_mark),a  
9fb5 3a c4 9f			ld a, (.dmark+1)  
9fb8 32 6c ee			ld (debug_mark+1),a  
9fbb 3a c5 9f			ld a, (.dmark+2)  
9fbe 32 6d ee			ld (debug_mark+2),a  
9fc1 18 03			jr .pastdmark  
9fc3 ..			.dmark: db "DUP"  
9fc6 f1			.pastdmark: pop af  
9fc7			endm  
# End of macro DMARK
9fc7					CALLMONITOR 
9fc7 cd 6f ee			call debug_vector  
9fca				endm  
# End of macro CALLMONITOR
9fca				endif 
9fca			 
9fca				FORTH_DSP 
9fca cd 1f 9c			call macro_forth_dsp 
9fcd				endm 
# End of macro FORTH_DSP
9fcd			 
9fcd 7e				ld a, (HL) 
9fce fe 01			cp DS_TYPE_STR 
9fd0 20 25			jr nz, .dupinum 
9fd2			 
9fd2				; push another string 
9fd2			 
9fd2				FORTH_DSP_VALUEHL     		 
9fd2 cd 59 9c			call macro_dsp_valuehl 
9fd5				endm 
# End of macro FORTH_DSP_VALUEHL
9fd5			 
9fd5			if DEBUG_FORTH_WORDS 
9fd5				DMARK "DUs" 
9fd5 f5				push af  
9fd6 3a ea 9f			ld a, (.dmark)  
9fd9 32 6b ee			ld (debug_mark),a  
9fdc 3a eb 9f			ld a, (.dmark+1)  
9fdf 32 6c ee			ld (debug_mark+1),a  
9fe2 3a ec 9f			ld a, (.dmark+2)  
9fe5 32 6d ee			ld (debug_mark+2),a  
9fe8 18 03			jr .pastdmark  
9fea ..			.dmark: db "DUs"  
9fed f1			.pastdmark: pop af  
9fee			endm  
# End of macro DMARK
9fee				CALLMONITOR 
9fee cd 6f ee			call debug_vector  
9ff1				endm  
# End of macro CALLMONITOR
9ff1			endif 
9ff1 cd d0 9a			call forth_push_str 
9ff4			 
9ff4				NEXTW 
9ff4 c3 0f 9e			jp macro_next 
9ff7				endm 
# End of macro NEXTW
9ff7			 
9ff7			 
9ff7			.dupinum: 
9ff7				 
9ff7			 
9ff7			 
9ff7				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
9ff7 cd 59 9c			call macro_dsp_valuehl 
9ffa				endm 
# End of macro FORTH_DSP_VALUEHL
9ffa			 
9ffa			; TODO add floating point number detection 
9ffa			 
9ffa			if DEBUG_FORTH_WORDS 
9ffa				DMARK "DUi" 
9ffa f5				push af  
9ffb 3a 0f a0			ld a, (.dmark)  
9ffe 32 6b ee			ld (debug_mark),a  
a001 3a 10 a0			ld a, (.dmark+1)  
a004 32 6c ee			ld (debug_mark+1),a  
a007 3a 11 a0			ld a, (.dmark+2)  
a00a 32 6d ee			ld (debug_mark+2),a  
a00d 18 03			jr .pastdmark  
a00f ..			.dmark: db "DUi"  
a012 f1			.pastdmark: pop af  
a013			endm  
# End of macro DMARK
a013				CALLMONITOR 
a013 cd 6f ee			call debug_vector  
a016				endm  
# End of macro CALLMONITOR
a016			endif 
a016			 
a016 cd 62 9a			call forth_push_numhl 
a019				NEXTW 
a019 c3 0f 9e			jp macro_next 
a01c				endm 
# End of macro NEXTW
a01c			.ZDUP: 
a01c			CWHEAD .SWAP OPCODE_ZDUP "?DUP" 4 WORD_FLAG_CODE 
a01c 99				db WORD_SYS_CORE+OPCODE_ZDUP             
a01d 54 a0			dw .SWAP            
a01f 05				db 4 + 1 
a020 .. 00			db "?DUP",0              
a025				endm 
# End of macro CWHEAD
a025			; | ?DUP ( u -- u u )     Duplicate item on TOS if the item is non-zero | DONE 
a025			 
a025				if DEBUG_FORTH_WORDS_KEY 
a025					DMARK "qDU" 
a025 f5				push af  
a026 3a 3a a0			ld a, (.dmark)  
a029 32 6b ee			ld (debug_mark),a  
a02c 3a 3b a0			ld a, (.dmark+1)  
a02f 32 6c ee			ld (debug_mark+1),a  
a032 3a 3c a0			ld a, (.dmark+2)  
a035 32 6d ee			ld (debug_mark+2),a  
a038 18 03			jr .pastdmark  
a03a ..			.dmark: db "qDU"  
a03d f1			.pastdmark: pop af  
a03e			endm  
# End of macro DMARK
a03e					CALLMONITOR 
a03e cd 6f ee			call debug_vector  
a041				endm  
# End of macro CALLMONITOR
a041				endif 
a041				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a041 cd 59 9c			call macro_dsp_valuehl 
a044				endm 
# End of macro FORTH_DSP_VALUEHL
a044			 
a044 e5				push hl 
a045			 
a045				; is it a zero? 
a045			 
a045 3e 00			ld a, 0 
a047 84				add h 
a048 85				add l 
a049			 
a049 e1				pop hl 
a04a			 
a04a fe 00			cp 0 
a04c 28 03			jr z, .dup2orig 
a04e			 
a04e			 
a04e cd 62 9a			call forth_push_numhl 
a051			 
a051			 
a051			; TODO add floating point number detection 
a051			 
a051			.dup2orig: 
a051			 
a051				NEXTW 
a051 c3 0f 9e			jp macro_next 
a054				endm 
# End of macro NEXTW
a054			.SWAP: 
a054			CWHEAD .COLN OPCODE_SWAP "SWAP" 4 WORD_FLAG_CODE 
a054 18				db WORD_SYS_CORE+OPCODE_SWAP             
a055 93 a0			dw .COLN            
a057 05				db 4 + 1 
a058 .. 00			db "SWAP",0              
a05d				endm 
# End of macro CWHEAD
a05d			; | SWAP ( w1 w2 -- w2 w1 )    Swap top two items on TOS | DONE 
a05d				if DEBUG_FORTH_WORDS_KEY 
a05d					DMARK "SWP" 
a05d f5				push af  
a05e 3a 72 a0			ld a, (.dmark)  
a061 32 6b ee			ld (debug_mark),a  
a064 3a 73 a0			ld a, (.dmark+1)  
a067 32 6c ee			ld (debug_mark+1),a  
a06a 3a 74 a0			ld a, (.dmark+2)  
a06d 32 6d ee			ld (debug_mark+2),a  
a070 18 03			jr .pastdmark  
a072 ..			.dmark: db "SWP"  
a075 f1			.pastdmark: pop af  
a076			endm  
# End of macro DMARK
a076					CALLMONITOR 
a076 cd 6f ee			call debug_vector  
a079				endm  
# End of macro CALLMONITOR
a079				endif 
a079			 
a079			; TODO Use os stack swap memory 
a079				FORTH_DSP_VALUEHL 
a079 cd 59 9c			call macro_dsp_valuehl 
a07c				endm 
# End of macro FORTH_DSP_VALUEHL
a07c e5				push hl     ; w2 
a07d			 
a07d				FORTH_DSP_POP 
a07d cd 11 9d			call macro_forth_dsp_pop 
a080				endm 
# End of macro FORTH_DSP_POP
a080			 
a080				FORTH_DSP_VALUEHL 
a080 cd 59 9c			call macro_dsp_valuehl 
a083				endm 
# End of macro FORTH_DSP_VALUEHL
a083			 
a083				FORTH_DSP_POP 
a083 cd 11 9d			call macro_forth_dsp_pop 
a086				endm 
# End of macro FORTH_DSP_POP
a086			 
a086 d1				pop de     ; w2	, hl = w1 
a087			 
a087 eb				ex de, hl 
a088 d5				push de 
a089			 
a089 cd 62 9a			call forth_push_numhl 
a08c			 
a08c e1				pop hl 
a08d			 
a08d cd 62 9a			call forth_push_numhl 
a090				 
a090			 
a090				NEXTW 
a090 c3 0f 9e			jp macro_next 
a093				endm 
# End of macro NEXTW
a093			.COLN: 
a093			CWHEAD .SCOLN OPCODE_COLN ":" 1 WORD_FLAG_CODE 
a093 19				db WORD_SYS_CORE+OPCODE_COLN             
a094 1f a2			dw .SCOLN            
a096 02				db 1 + 1 
a097 .. 00			db ":",0              
a099				endm 
# End of macro CWHEAD
a099			; | : ( -- )         Create new word | DONE 
a099			 
a099				if DEBUG_FORTH_WORDS_KEY 
a099					DMARK "CLN" 
a099 f5				push af  
a09a 3a ae a0			ld a, (.dmark)  
a09d 32 6b ee			ld (debug_mark),a  
a0a0 3a af a0			ld a, (.dmark+1)  
a0a3 32 6c ee			ld (debug_mark+1),a  
a0a6 3a b0 a0			ld a, (.dmark+2)  
a0a9 32 6d ee			ld (debug_mark+2),a  
a0ac 18 03			jr .pastdmark  
a0ae ..			.dmark: db "CLN"  
a0b1 f1			.pastdmark: pop af  
a0b2			endm  
# End of macro DMARK
a0b2					CALLMONITOR 
a0b2 cd 6f ee			call debug_vector  
a0b5				endm  
# End of macro CALLMONITOR
a0b5				endif 
a0b5			STACKFRAME OFF $8efe $989f 
a0b5				if DEBUG_STACK_IMB 
a0b5					if OFF 
a0b5						exx 
a0b5						ld de, $8efe 
a0b5						ld a, d 
a0b5						ld hl, curframe 
a0b5						call hexout 
a0b5						ld a, e 
a0b5						ld hl, curframe+2 
a0b5						call hexout 
a0b5						ld hl, $8efe 
a0b5						push hl 
a0b5						ld hl, $989f 
a0b5						push hl 
a0b5						exx 
a0b5					endif 
a0b5				endif 
a0b5			endm 
# End of macro STACKFRAME
a0b5			; get parser buffer length  of new word 
a0b5			 
a0b5			 
a0b5			 
a0b5				; move tok past this to start of name defintition 
a0b5				; TODO get word to define 
a0b5				; TODO Move past word token 
a0b5				; TODO get length of string up to the ';' 
a0b5			 
a0b5 2a c2 e5		ld hl, (os_tok_ptr) 
a0b8 23			inc hl 
a0b9 23			inc hl 
a0ba			 
a0ba 3e 3b		ld a, ';' 
a0bc cd 4c 90		call strlent 
a0bf			 
a0bf 7d			ld a,l 
a0c0 32 b1 e2		ld (os_new_parse_len), a 
a0c3			 
a0c3			 
a0c3			if DEBUG_FORTH_UWORD 
a0c3 ed 5b c2 e5	ld de, (os_tok_ptr) 
a0c7					DMARK ":01" 
a0c7 f5				push af  
a0c8 3a dc a0			ld a, (.dmark)  
a0cb 32 6b ee			ld (debug_mark),a  
a0ce 3a dd a0			ld a, (.dmark+1)  
a0d1 32 6c ee			ld (debug_mark+1),a  
a0d4 3a de a0			ld a, (.dmark+2)  
a0d7 32 6d ee			ld (debug_mark+2),a  
a0da 18 03			jr .pastdmark  
a0dc ..			.dmark: db ":01"  
a0df f1			.pastdmark: pop af  
a0e0			endm  
# End of macro DMARK
a0e0			CALLMONITOR 
a0e0 cd 6f ee			call debug_vector  
a0e3				endm  
# End of macro CALLMONITOR
a0e3			endif 
a0e3			 
a0e3			; 
a0e3			;  new word memory layout: 
a0e3			;  
a0e3			;    : adg 6666 ;  
a0e3			; 
a0e3			;    db   1     ; user defined word  
a0e3 23			inc hl    
a0e4			;    dw   sysdict 
a0e4 23			inc hl 
a0e5 23			inc hl 
a0e6			;    db <word len>+1 (for null) 
a0e6 23			inc hl 
a0e7			;    db .... <word> 
a0e7			; 
a0e7			 
a0e7 23			inc hl    ; some extras for the word preamble before the above 
a0e8 23			inc hl 
a0e9 23			inc hl 
a0ea 23			inc hl 
a0eb 23			inc hl 
a0ec 23			inc hl 
a0ed 23			inc hl  
a0ee 23			inc hl 
a0ef 23			inc hl 
a0f0 23			inc hl 
a0f1 23			inc hl 
a0f2 23			inc hl 
a0f3 23			inc hl 
a0f4 23			inc hl     ; TODO how many do we really need?     maybe only 6 
a0f5			;       exec word buffer 
a0f5			;	<ptr word>   
a0f5 23			inc hl 
a0f6 23			inc hl 
a0f7			;       <word list><null term> 7F final term 
a0f7			 
a0f7			 
a0f7			if DEBUG_FORTH_UWORD 
a0f7					DMARK ":02" 
a0f7 f5				push af  
a0f8 3a 0c a1			ld a, (.dmark)  
a0fb 32 6b ee			ld (debug_mark),a  
a0fe 3a 0d a1			ld a, (.dmark+1)  
a101 32 6c ee			ld (debug_mark+1),a  
a104 3a 0e a1			ld a, (.dmark+2)  
a107 32 6d ee			ld (debug_mark+2),a  
a10a 18 03			jr .pastdmark  
a10c ..			.dmark: db ":02"  
a10f f1			.pastdmark: pop af  
a110			endm  
# End of macro DMARK
a110			CALLMONITOR 
a110 cd 6f ee			call debug_vector  
a113				endm  
# End of macro CALLMONITOR
a113			endif 
a113			 
a113			 
a113				; malloc the size 
a113			 
a113 cd b6 90			call malloc 
a116 22 b3 e2			ld (os_new_malloc), hl     ; save malloc start 
a119			 
a119			;    db   1     ; user defined word  
a119 3e 01			ld a, WORD_SYS_UWORD  
a11b 77				ld (hl), a 
a11c			 
a11c 23			inc hl    
a11d			;    dw   sysdict 
a11d 11 67 9f		ld de, sysdict       ; continue on with the scan to the system dict 
a120 73			ld (hl), e 
a121 23			inc hl 
a122 72			ld (hl), d 
a123 23			inc hl 
a124			 
a124			 
a124			;    Setup dict word 
a124			 
a124 23			inc hl 
a125 22 ad e2		ld (os_new_work_ptr), hl     ; save start of dict word  
a128			 
a128			; 1. get length of dict word 
a128			 
a128			 
a128 2a c2 e5		ld hl, (os_tok_ptr) 
a12b 23			inc hl 
a12c 23			inc hl    ; position to start of dict word 
a12d 3e 00		ld a, 0 
a12f cd 4c 90		call strlent 
a132			 
a132			 
a132 23			inc hl    ; to include null??? 
a133			 
a133			; write length of dict word 
a133			 
a133 ed 5b ad e2	ld de, (os_new_work_ptr)   ; get dest for copy of word 
a137 1b			dec de 
a138 eb			ex de, hl 
a139 73			ld (hl), e 
a13a eb			ex de, hl 
a13b			 
a13b			 
a13b			 
a13b			; copy  
a13b 4d			ld c, l 
a13c 06 00		ld b, 0 
a13e ed 5b ad e2	ld de, (os_new_work_ptr)   ; get dest for copy of word 
a142 2a c2 e5		ld hl, (os_tok_ptr) 
a145 23			inc hl 
a146 23			inc hl    ; position to start of dict word 
a147			 
a147			;	ldir       ; copy word - HL now is where we need to be for copy of the line 
a147			 
a147			; TODO need to convert word to upper case 
a147			 
a147			ucasetok:	 
a147 7e			ld a,(hl) 
a148 cd 38 90		call toUpper 
a14b 77			ld (hl),a 
a14c ed a0		ldi 
a14e f2 47 a1		jp p, ucasetok 
a151			 
a151			 
a151			 
a151			; de now points to start of where the word body code should be placed 
a151 ed 53 ad e2	ld (os_new_work_ptr), de 
a155			; hl now points to the words to throw at forthexec which needs to be copied 
a155 22 ab e2		ld (os_new_src_ptr), hl 
a158			 
a158			; TODO add 'call to forthexec' 
a158			 
a158			if DEBUG_FORTH_UWORD 
a158 c5			push bc 
a159 ed 4b b3 e2	ld bc, (os_new_malloc) 
a15d					DMARK ":0x" 
a15d f5				push af  
a15e 3a 72 a1			ld a, (.dmark)  
a161 32 6b ee			ld (debug_mark),a  
a164 3a 73 a1			ld a, (.dmark+1)  
a167 32 6c ee			ld (debug_mark+1),a  
a16a 3a 74 a1			ld a, (.dmark+2)  
a16d 32 6d ee			ld (debug_mark+2),a  
a170 18 03			jr .pastdmark  
a172 ..			.dmark: db ":0x"  
a175 f1			.pastdmark: pop af  
a176			endm  
# End of macro DMARK
a176			CALLMONITOR 
a176 cd 6f ee			call debug_vector  
a179				endm  
# End of macro CALLMONITOR
a179 c1			pop bc 
a17a			endif 
a17a			 
a17a			 
a17a			; create word preamble which should be: 
a17a			 
a17a			; TODO possibly push the current os_tok_ptr to rsp and the current rsp will be the start of the string and not current pc???? 
a17a			 
a17a			;    ld hl, <word code> 
a17a			;    jp user_exec 
a17a			;    <word code bytes> 
a17a			 
a17a			 
a17a			;	inc de     ; TODO ??? or are we already past the word's null 
a17a eb			ex de, hl 
a17b			 
a17b 36 21		ld (hl), 021h     ; TODO get bytes poke "ld hl, " 
a17d			 
a17d 23			inc hl 
a17e 22 a7 e2		ld (os_new_exec_ptr),hl     ; save this location to poke with the address of the word buffer 
a181 23			inc hl 
a182			 
a182 23			inc hl 
a183 36 c3		ld (hl), 0c3h     ; TODO get bytes poke "jp xx  " 
a185			 
a185 01 fd ca		ld bc, user_exec 
a188 23			inc hl 
a189 71			ld (hl), c     ; poke address of user_exec 
a18a 23			inc hl 
a18b 70			ld (hl), b     
a18c			; 
a18c			;	inc hl 
a18c			;	ld (hl), 0cdh     ; TODO get bytes poke "call  " 
a18c			; 
a18c			; 
a18c			;	ld bc, macro_forth_rsp_next 
a18c			;	inc hl 
a18c			;	ld (hl), c     ; poke address of FORTH_RSP_NEXT 
a18c			;	inc hl 
a18c			;	ld (hl), b     
a18c			; 
a18c			;	inc hl 
a18c			;	ld (hl), 0cdh     ; TODO get bytes poke "call  " 
a18c			; 
a18c			; 
a18c			;	inc hl 
a18c			;	ld bc, forthexec 
a18c			;	ld (hl), c     ; poke address of forthexec 
a18c			;	inc hl 
a18c			;	ld (hl), b      
a18c			; 
a18c			;	inc hl 
a18c			;	ld (hl), 0c3h     ; TODO get bytes poke "jp  " 
a18c			; 
a18c			;	ld bc, user_dict_next 
a18c			;	inc hl 
a18c			;	ld (hl), c     ; poke address of forthexec 
a18c			;	inc hl 
a18c			;	ld (hl), b      
a18c			 
a18c			; hl is now where we need to copy the word byte data to save this 
a18c			 
a18c 23			inc hl 
a18d 22 a9 e2		ld (os_new_exec), hl 
a190			 
a190			; copy definition 
a190			 
a190 eb			ex de, hl 
a191			;	inc de    ; TODO BUG It appears the exec of a uword requires pc to be set 
a191			;	inc de    ; skip the PC for this parse 
a191 3a b1 e2		ld a, (os_new_parse_len) 
a194 4f			ld c, a 
a195 06 00		ld b, 0 
a197 ed b0		ldir		 ; copy defintion 
a199			 
a199			 
a199			; poke the address of where the new word bytes live for forthexec 
a199			 
a199 2a a7 e2		ld hl, (os_new_exec_ptr)     ; TODO this isnt correct 
a19c			 
a19c ed 5b a9 e2	ld de, (os_new_exec)      
a1a0			 
a1a0 73			ld (hl), e 
a1a1 23			inc hl 
a1a2 72			ld (hl), d 
a1a3			 
a1a3				; TODO copy last user dict word next link to this word 
a1a3				; TODO update last user dict word to point to this word 
a1a3			; 
a1a3			; hl f923 de 812a ; bc 811a 
a1a3			 
a1a3			if DEBUG_FORTH_UWORD 
a1a3 c5			push bc 
a1a4 ed 4b b3 e2	ld bc, (os_new_malloc) 
a1a8					DMARK ":0A" 
a1a8 f5				push af  
a1a9 3a bd a1			ld a, (.dmark)  
a1ac 32 6b ee			ld (debug_mark),a  
a1af 3a be a1			ld a, (.dmark+1)  
a1b2 32 6c ee			ld (debug_mark+1),a  
a1b5 3a bf a1			ld a, (.dmark+2)  
a1b8 32 6d ee			ld (debug_mark+2),a  
a1bb 18 03			jr .pastdmark  
a1bd ..			.dmark: db ":0A"  
a1c0 f1			.pastdmark: pop af  
a1c1			endm  
# End of macro DMARK
a1c1			CALLMONITOR 
a1c1 cd 6f ee			call debug_vector  
a1c4				endm  
# End of macro CALLMONITOR
a1c4 c1			pop bc 
a1c5			endif 
a1c5			if DEBUG_FORTH_UWORD 
a1c5 c5			push bc 
a1c6 ed 4b b3 e2	ld bc, (os_new_malloc) 
a1ca 03			inc bc 
a1cb 03			inc bc 
a1cc 03			inc bc 
a1cd 03			inc bc 
a1ce 03			inc bc 
a1cf 03			inc bc 
a1d0 03			inc bc 
a1d1 03			inc bc 
a1d2			 
a1d2					DMARK ":0B" 
a1d2 f5				push af  
a1d3 3a e7 a1			ld a, (.dmark)  
a1d6 32 6b ee			ld (debug_mark),a  
a1d9 3a e8 a1			ld a, (.dmark+1)  
a1dc 32 6c ee			ld (debug_mark+1),a  
a1df 3a e9 a1			ld a, (.dmark+2)  
a1e2 32 6d ee			ld (debug_mark+2),a  
a1e5 18 03			jr .pastdmark  
a1e7 ..			.dmark: db ":0B"  
a1ea f1			.pastdmark: pop af  
a1eb			endm  
# End of macro DMARK
a1eb			CALLMONITOR 
a1eb cd 6f ee			call debug_vector  
a1ee				endm  
# End of macro CALLMONITOR
a1ee c1			pop bc 
a1ef			endif 
a1ef			 
a1ef			; update word dict linked list for new word 
a1ef			 
a1ef			 
a1ef 2a be e5		ld hl, (os_last_new_uword)		; get the start of the last added uword 
a1f2 23			inc hl     ; move to next work linked list ptr 
a1f3			 
a1f3 ed 5b b3 e2	ld de, (os_new_malloc)		 ; new next word 
a1f7 73			ld (hl), e 
a1f8 23			inc hl 
a1f9 72			ld (hl), d 
a1fa			 
a1fa			if DEBUG_FORTH_UWORD 
a1fa ed 4b be e5	ld bc, (os_last_new_uword)		; get the last word so we can check it worked in debug 
a1fe			endif 
a1fe			 
a1fe ed 53 be e5	ld (os_last_new_uword), de      ; update last new uword ptr 
a202			 
a202			 
a202			if DEBUG_FORTH_UWORD 
a202					DMARK ":0+" 
a202 f5				push af  
a203 3a 17 a2			ld a, (.dmark)  
a206 32 6b ee			ld (debug_mark),a  
a209 3a 18 a2			ld a, (.dmark+1)  
a20c 32 6c ee			ld (debug_mark+1),a  
a20f 3a 19 a2			ld a, (.dmark+2)  
a212 32 6d ee			ld (debug_mark+2),a  
a215 18 03			jr .pastdmark  
a217 ..			.dmark: db ":0+"  
a21a f1			.pastdmark: pop af  
a21b			endm  
# End of macro DMARK
a21b			CALLMONITOR 
a21b cd 6f ee			call debug_vector  
a21e				endm  
# End of macro CALLMONITOR
a21e			endif 
a21e			 
a21e			STACKFRAMECHK OFF $8efe $989f 
a21e				if DEBUG_STACK_IMB 
a21e					if OFF 
a21e						exx 
a21e						ld hl, $989f 
a21e						pop de   ; $989f 
a21e						call cmp16 
a21e						jr nz, .spnosame 
a21e						ld hl, $8efe 
a21e						pop de   ; $8efe 
a21e						call cmp16 
a21e						jr z, .spfrsame 
a21e						.spnosame: call showsperror 
a21e						.spfrsame: nop 
a21e						exx 
a21e					endif 
a21e				endif 
a21e			endm 
# End of macro STACKFRAMECHK
a21e			 
a21e c9			ret    ; dont process any remaining parser tokens as they form new word 
a21f			 
a21f			 
a21f			 
a21f			 
a21f			;		NEXT 
a21f			.SCOLN: 
a21f			;	CWHEAD .DROP 17 '\;' 1 WORD_FLAG_CODE 
a21f 06			db OPCODE_SCOLN 
a220 6b a2		dw .DROP 
a222 02			db 2 
a223 .. 00		db ";",0           
a225			; | ; ( -- )     Terminate new word and return exec to previous exec level | DONE 
a225				if DEBUG_FORTH_WORDS_KEY 
a225					DMARK "SCN" 
a225 f5				push af  
a226 3a 3a a2			ld a, (.dmark)  
a229 32 6b ee			ld (debug_mark),a  
a22c 3a 3b a2			ld a, (.dmark+1)  
a22f 32 6c ee			ld (debug_mark+1),a  
a232 3a 3c a2			ld a, (.dmark+2)  
a235 32 6d ee			ld (debug_mark+2),a  
a238 18 03			jr .pastdmark  
a23a ..			.dmark: db "SCN"  
a23d f1			.pastdmark: pop af  
a23e			endm  
# End of macro DMARK
a23e					CALLMONITOR 
a23e cd 6f ee			call debug_vector  
a241				endm  
# End of macro CALLMONITOR
a241				endif 
a241				FORTH_RSP_TOS 
a241 cd 20 9a			call macro_forth_rsp_tos 
a244				endm 
# End of macro FORTH_RSP_TOS
a244 e5				push hl 
a245				FORTH_RSP_POP 
a245 cd 2a 9a			call macro_forth_rsp_pop 
a248				endm 
# End of macro FORTH_RSP_POP
a248 e1				pop hl 
a249			;		ex de,hl 
a249 22 c2 e5			ld (os_tok_ptr),hl 
a24c			 
a24c			if DEBUG_FORTH_UWORD 
a24c					DMARK "SCL" 
a24c f5				push af  
a24d 3a 61 a2			ld a, (.dmark)  
a250 32 6b ee			ld (debug_mark),a  
a253 3a 62 a2			ld a, (.dmark+1)  
a256 32 6c ee			ld (debug_mark+1),a  
a259 3a 63 a2			ld a, (.dmark+2)  
a25c 32 6d ee			ld (debug_mark+2),a  
a25f 18 03			jr .pastdmark  
a261 ..			.dmark: db "SCL"  
a264 f1			.pastdmark: pop af  
a265			endm  
# End of macro DMARK
a265			CALLMONITOR 
a265 cd 6f ee			call debug_vector  
a268				endm  
# End of macro CALLMONITOR
a268			endif 
a268				NEXTW 
a268 c3 0f 9e			jp macro_next 
a26b				endm 
# End of macro NEXTW
a26b			 
a26b			.DROP: 
a26b			CWHEAD .DUP2 OPCODE_DROP "DROP" 4 WORD_FLAG_CODE 
a26b 1b				db WORD_SYS_CORE+OPCODE_DROP             
a26c 96 a2			dw .DUP2            
a26e 05				db 4 + 1 
a26f .. 00			db "DROP",0              
a274				endm 
# End of macro CWHEAD
a274			; | DROP ( w -- )   drop the TOS item   | DONE 
a274				if DEBUG_FORTH_WORDS_KEY 
a274					DMARK "DRP" 
a274 f5				push af  
a275 3a 89 a2			ld a, (.dmark)  
a278 32 6b ee			ld (debug_mark),a  
a27b 3a 8a a2			ld a, (.dmark+1)  
a27e 32 6c ee			ld (debug_mark+1),a  
a281 3a 8b a2			ld a, (.dmark+2)  
a284 32 6d ee			ld (debug_mark+2),a  
a287 18 03			jr .pastdmark  
a289 ..			.dmark: db "DRP"  
a28c f1			.pastdmark: pop af  
a28d			endm  
# End of macro DMARK
a28d					CALLMONITOR 
a28d cd 6f ee			call debug_vector  
a290				endm  
# End of macro CALLMONITOR
a290				endif 
a290				FORTH_DSP_POP 
a290 cd 11 9d			call macro_forth_dsp_pop 
a293				endm 
# End of macro FORTH_DSP_POP
a293				NEXTW 
a293 c3 0f 9e			jp macro_next 
a296				endm 
# End of macro NEXTW
a296			.DUP2: 
a296			CWHEAD .DROP2 OPCODE_DUP2 "2DUP" 4 WORD_FLAG_CODE 
a296 1c				db WORD_SYS_CORE+OPCODE_DUP2             
a297 db a2			dw .DROP2            
a299 05				db 4 + 1 
a29a .. 00			db "2DUP",0              
a29f				endm 
# End of macro CWHEAD
a29f			; | 2DUP ( w1 w2 -- w1 w2 w1 w2 ) Duplicate the top two items on TOS  | DONE 
a29f				if DEBUG_FORTH_WORDS_KEY 
a29f					DMARK "2DU" 
a29f f5				push af  
a2a0 3a b4 a2			ld a, (.dmark)  
a2a3 32 6b ee			ld (debug_mark),a  
a2a6 3a b5 a2			ld a, (.dmark+1)  
a2a9 32 6c ee			ld (debug_mark+1),a  
a2ac 3a b6 a2			ld a, (.dmark+2)  
a2af 32 6d ee			ld (debug_mark+2),a  
a2b2 18 03			jr .pastdmark  
a2b4 ..			.dmark: db "2DU"  
a2b7 f1			.pastdmark: pop af  
a2b8			endm  
# End of macro DMARK
a2b8					CALLMONITOR 
a2b8 cd 6f ee			call debug_vector  
a2bb				endm  
# End of macro CALLMONITOR
a2bb				endif 
a2bb				FORTH_DSP_VALUEHL 
a2bb cd 59 9c			call macro_dsp_valuehl 
a2be				endm 
# End of macro FORTH_DSP_VALUEHL
a2be e5				push hl      ; 2 
a2bf			 
a2bf				FORTH_DSP_POP 
a2bf cd 11 9d			call macro_forth_dsp_pop 
a2c2				endm 
# End of macro FORTH_DSP_POP
a2c2				 
a2c2				FORTH_DSP_VALUEHL 
a2c2 cd 59 9c			call macro_dsp_valuehl 
a2c5				endm 
# End of macro FORTH_DSP_VALUEHL
a2c5			;		push hl      ; 1 
a2c5			 
a2c5				FORTH_DSP_POP 
a2c5 cd 11 9d			call macro_forth_dsp_pop 
a2c8				endm 
# End of macro FORTH_DSP_POP
a2c8			 
a2c8			;		pop hl       ; 1 
a2c8 d1				pop de       ; 2 
a2c9			 
a2c9 cd 62 9a			call forth_push_numhl 
a2cc eb				ex de, hl 
a2cd cd 62 9a			call forth_push_numhl 
a2d0			 
a2d0				 
a2d0 eb				ex de, hl 
a2d1			 
a2d1 cd 62 9a			call forth_push_numhl 
a2d4 eb				ex de, hl 
a2d5 cd 62 9a			call forth_push_numhl 
a2d8			 
a2d8			 
a2d8				NEXTW 
a2d8 c3 0f 9e			jp macro_next 
a2db				endm 
# End of macro NEXTW
a2db			.DROP2: 
a2db			CWHEAD .SWAP2 OPCODE_DROP2 "2DROP" 5 WORD_FLAG_CODE 
a2db 1d				db WORD_SYS_CORE+OPCODE_DROP2             
a2dc 0a a3			dw .SWAP2            
a2de 06				db 5 + 1 
a2df .. 00			db "2DROP",0              
a2e5				endm 
# End of macro CWHEAD
a2e5			; | 2DROP ( w w -- )    Double drop | DONE 
a2e5				if DEBUG_FORTH_WORDS_KEY 
a2e5					DMARK "2DR" 
a2e5 f5				push af  
a2e6 3a fa a2			ld a, (.dmark)  
a2e9 32 6b ee			ld (debug_mark),a  
a2ec 3a fb a2			ld a, (.dmark+1)  
a2ef 32 6c ee			ld (debug_mark+1),a  
a2f2 3a fc a2			ld a, (.dmark+2)  
a2f5 32 6d ee			ld (debug_mark+2),a  
a2f8 18 03			jr .pastdmark  
a2fa ..			.dmark: db "2DR"  
a2fd f1			.pastdmark: pop af  
a2fe			endm  
# End of macro DMARK
a2fe					CALLMONITOR 
a2fe cd 6f ee			call debug_vector  
a301				endm  
# End of macro CALLMONITOR
a301				endif 
a301				FORTH_DSP_POP 
a301 cd 11 9d			call macro_forth_dsp_pop 
a304				endm 
# End of macro FORTH_DSP_POP
a304				FORTH_DSP_POP 
a304 cd 11 9d			call macro_forth_dsp_pop 
a307				endm 
# End of macro FORTH_DSP_POP
a307				NEXTW 
a307 c3 0f 9e			jp macro_next 
a30a				endm 
# End of macro NEXTW
a30a			.SWAP2: 
a30a			CWHEAD .AT OPCODE_SWAP2 "2SWAP" 5 WORD_FLAG_CODE 
a30a 1e				db WORD_SYS_CORE+OPCODE_SWAP2             
a30b 33 a3			dw .AT            
a30d 06				db 5 + 1 
a30e .. 00			db "2SWAP",0              
a314				endm 
# End of macro CWHEAD
a314			; | 2SWAP ( w1 w2 w3 w4 -- w3 w4 w1 w2 ) Swap top pair of items | TODO 
a314				if DEBUG_FORTH_WORDS_KEY 
a314					DMARK "2SW" 
a314 f5				push af  
a315 3a 29 a3			ld a, (.dmark)  
a318 32 6b ee			ld (debug_mark),a  
a31b 3a 2a a3			ld a, (.dmark+1)  
a31e 32 6c ee			ld (debug_mark+1),a  
a321 3a 2b a3			ld a, (.dmark+2)  
a324 32 6d ee			ld (debug_mark+2),a  
a327 18 03			jr .pastdmark  
a329 ..			.dmark: db "2SW"  
a32c f1			.pastdmark: pop af  
a32d			endm  
# End of macro DMARK
a32d					CALLMONITOR 
a32d cd 6f ee			call debug_vector  
a330				endm  
# End of macro CALLMONITOR
a330				endif 
a330			; TODO Use os stack swap memory 
a330				NEXTW 
a330 c3 0f 9e			jp macro_next 
a333				endm 
# End of macro NEXTW
a333			.AT: 
a333			CWHEAD .CAT OPCODE_AT "@" 1 WORD_FLAG_CODE 
a333 1f				db WORD_SYS_CORE+OPCODE_AT             
a334 65 a3			dw .CAT            
a336 02				db 1 + 1 
a337 .. 00			db "@",0              
a339				endm 
# End of macro CWHEAD
a339			; | @ ( w -- ) Push onto TOS byte stored at address   | DONE 
a339			 
a339				if DEBUG_FORTH_WORDS_KEY 
a339					DMARK "AT." 
a339 f5				push af  
a33a 3a 4e a3			ld a, (.dmark)  
a33d 32 6b ee			ld (debug_mark),a  
a340 3a 4f a3			ld a, (.dmark+1)  
a343 32 6c ee			ld (debug_mark+1),a  
a346 3a 50 a3			ld a, (.dmark+2)  
a349 32 6d ee			ld (debug_mark+2),a  
a34c 18 03			jr .pastdmark  
a34e ..			.dmark: db "AT."  
a351 f1			.pastdmark: pop af  
a352			endm  
# End of macro DMARK
a352					CALLMONITOR 
a352 cd 6f ee			call debug_vector  
a355				endm  
# End of macro CALLMONITOR
a355				endif 
a355			.getbyteat:	 
a355				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a355 cd 59 9c			call macro_dsp_valuehl 
a358				endm 
# End of macro FORTH_DSP_VALUEHL
a358				 
a358			;		push hl 
a358			 
a358				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a358 cd 11 9d			call macro_forth_dsp_pop 
a35b				endm 
# End of macro FORTH_DSP_POP
a35b			 
a35b			;		pop hl 
a35b			 
a35b 7e				ld a, (hl) 
a35c			 
a35c 6f				ld l, a 
a35d 26 00			ld h, 0 
a35f cd 62 9a			call forth_push_numhl 
a362			 
a362				NEXTW 
a362 c3 0f 9e			jp macro_next 
a365				endm 
# End of macro NEXTW
a365			.CAT: 
a365			CWHEAD .BANG OPCODE_CAT "C@" 2 WORD_FLAG_CODE 
a365 20				db WORD_SYS_CORE+OPCODE_CAT             
a366 8e a3			dw .BANG            
a368 03				db 2 + 1 
a369 .. 00			db "C@",0              
a36c				endm 
# End of macro CWHEAD
a36c			; | C@  ( w -- ) Push onto TOS byte stored at address   | DONE 
a36c				if DEBUG_FORTH_WORDS_KEY 
a36c					DMARK "CAA" 
a36c f5				push af  
a36d 3a 81 a3			ld a, (.dmark)  
a370 32 6b ee			ld (debug_mark),a  
a373 3a 82 a3			ld a, (.dmark+1)  
a376 32 6c ee			ld (debug_mark+1),a  
a379 3a 83 a3			ld a, (.dmark+2)  
a37c 32 6d ee			ld (debug_mark+2),a  
a37f 18 03			jr .pastdmark  
a381 ..			.dmark: db "CAA"  
a384 f1			.pastdmark: pop af  
a385			endm  
# End of macro DMARK
a385					CALLMONITOR 
a385 cd 6f ee			call debug_vector  
a388				endm  
# End of macro CALLMONITOR
a388				endif 
a388 c3 55 a3			jp .getbyteat 
a38b				NEXTW 
a38b c3 0f 9e			jp macro_next 
a38e				endm 
# End of macro NEXTW
a38e			.BANG: 
a38e			CWHEAD .CBANG OPCODE_BANG "!" 1 WORD_FLAG_CODE 
a38e 21				db WORD_SYS_CORE+OPCODE_BANG             
a38f c4 a3			dw .CBANG            
a391 02				db 1 + 1 
a392 .. 00			db "!",0              
a394				endm 
# End of macro CWHEAD
a394			; | ! ( x w -- ) Store x at address w      | DONE 
a394				if DEBUG_FORTH_WORDS_KEY 
a394					DMARK "BNG" 
a394 f5				push af  
a395 3a a9 a3			ld a, (.dmark)  
a398 32 6b ee			ld (debug_mark),a  
a39b 3a aa a3			ld a, (.dmark+1)  
a39e 32 6c ee			ld (debug_mark+1),a  
a3a1 3a ab a3			ld a, (.dmark+2)  
a3a4 32 6d ee			ld (debug_mark+2),a  
a3a7 18 03			jr .pastdmark  
a3a9 ..			.dmark: db "BNG"  
a3ac f1			.pastdmark: pop af  
a3ad			endm  
# End of macro DMARK
a3ad					CALLMONITOR 
a3ad cd 6f ee			call debug_vector  
a3b0				endm  
# End of macro CALLMONITOR
a3b0				endif 
a3b0			 
a3b0			.storebyteat:		 
a3b0				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a3b0 cd 59 9c			call macro_dsp_valuehl 
a3b3				endm 
# End of macro FORTH_DSP_VALUEHL
a3b3				 
a3b3 e5				push hl 
a3b4			 
a3b4				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a3b4 cd 11 9d			call macro_forth_dsp_pop 
a3b7				endm 
# End of macro FORTH_DSP_POP
a3b7			 
a3b7				; get byte to poke 
a3b7			 
a3b7				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a3b7 cd 59 9c			call macro_dsp_valuehl 
a3ba				endm 
# End of macro FORTH_DSP_VALUEHL
a3ba e5				push hl 
a3bb			 
a3bb			 
a3bb				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a3bb cd 11 9d			call macro_forth_dsp_pop 
a3be				endm 
# End of macro FORTH_DSP_POP
a3be			 
a3be			 
a3be d1				pop de 
a3bf e1				pop hl 
a3c0			 
a3c0 73				ld (hl),e 
a3c1			 
a3c1			 
a3c1				NEXTW 
a3c1 c3 0f 9e			jp macro_next 
a3c4				endm 
# End of macro NEXTW
a3c4			.CBANG: 
a3c4			CWHEAD .SCALL OPCODE_CBANG "C!" 2 WORD_FLAG_CODE 
a3c4 22				db WORD_SYS_CORE+OPCODE_CBANG             
a3c5 ed a3			dw .SCALL            
a3c7 03				db 2 + 1 
a3c8 .. 00			db "C!",0              
a3cb				endm 
# End of macro CWHEAD
a3cb			; | C!  ( x w -- ) Store x at address w  | DONE 
a3cb				if DEBUG_FORTH_WORDS_KEY 
a3cb					DMARK "CBA" 
a3cb f5				push af  
a3cc 3a e0 a3			ld a, (.dmark)  
a3cf 32 6b ee			ld (debug_mark),a  
a3d2 3a e1 a3			ld a, (.dmark+1)  
a3d5 32 6c ee			ld (debug_mark+1),a  
a3d8 3a e2 a3			ld a, (.dmark+2)  
a3db 32 6d ee			ld (debug_mark+2),a  
a3de 18 03			jr .pastdmark  
a3e0 ..			.dmark: db "CBA"  
a3e3 f1			.pastdmark: pop af  
a3e4			endm  
# End of macro DMARK
a3e4					CALLMONITOR 
a3e4 cd 6f ee			call debug_vector  
a3e7				endm  
# End of macro CALLMONITOR
a3e7				endif 
a3e7 c3 b0 a3			jp .storebyteat 
a3ea				NEXTW 
a3ea c3 0f 9e			jp macro_next 
a3ed				endm 
# End of macro NEXTW
a3ed			.SCALL: 
a3ed			CWHEAD .DEPTH OPCODE_SCALL "CALL" 4 WORD_FLAG_CODE 
a3ed 23				db WORD_SYS_CORE+OPCODE_SCALL             
a3ee 21 a4			dw .DEPTH            
a3f0 05				db 4 + 1 
a3f1 .. 00			db "CALL",0              
a3f6				endm 
# End of macro CWHEAD
a3f6			; | CALL ( w -- w  ) machine code call to address w  push the result of hl to stack | DONE 
a3f6				if DEBUG_FORTH_WORDS_KEY 
a3f6					DMARK "CLL" 
a3f6 f5				push af  
a3f7 3a 0b a4			ld a, (.dmark)  
a3fa 32 6b ee			ld (debug_mark),a  
a3fd 3a 0c a4			ld a, (.dmark+1)  
a400 32 6c ee			ld (debug_mark+1),a  
a403 3a 0d a4			ld a, (.dmark+2)  
a406 32 6d ee			ld (debug_mark+2),a  
a409 18 03			jr .pastdmark  
a40b ..			.dmark: db "CLL"  
a40e f1			.pastdmark: pop af  
a40f			endm  
# End of macro DMARK
a40f					CALLMONITOR 
a40f cd 6f ee			call debug_vector  
a412				endm  
# End of macro CALLMONITOR
a412				endif 
a412			 
a412				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a412 cd 59 9c			call macro_dsp_valuehl 
a415				endm 
# End of macro FORTH_DSP_VALUEHL
a415			 
a415			;		push hl 
a415			 
a415				; destroy value TOS 
a415			 
a415				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a415 cd 11 9d			call macro_forth_dsp_pop 
a418				endm 
# End of macro FORTH_DSP_POP
a418			 
a418					 
a418			;		pop hl 
a418			 
a418				; how to do a call with hl???? save SP? 
a418 cd b3 9d			call forth_call_hl 
a41b			 
a41b			 
a41b				; TODO push value back onto stack for another op etc 
a41b			 
a41b cd 62 9a			call forth_push_numhl 
a41e				NEXTW 
a41e c3 0f 9e			jp macro_next 
a421				endm 
# End of macro NEXTW
a421			.DEPTH: 
a421			CWHEAD .OVER OPCODE_DEPTH "DEPTH" 5 WORD_FLAG_CODE 
a421 24				db WORD_SYS_CORE+OPCODE_DEPTH             
a422 5e a4			dw .OVER            
a424 06				db 5 + 1 
a425 .. 00			db "DEPTH",0              
a42b				endm 
# End of macro CWHEAD
a42b			; | DEPTH ( -- u ) Push count of stack | DONE 
a42b				; take current TOS and remove from base value div by two to get count 
a42b				if DEBUG_FORTH_WORDS_KEY 
a42b					DMARK "DEP" 
a42b f5				push af  
a42c 3a 40 a4			ld a, (.dmark)  
a42f 32 6b ee			ld (debug_mark),a  
a432 3a 41 a4			ld a, (.dmark+1)  
a435 32 6c ee			ld (debug_mark+1),a  
a438 3a 42 a4			ld a, (.dmark+2)  
a43b 32 6d ee			ld (debug_mark+2),a  
a43e 18 03			jr .pastdmark  
a440 ..			.dmark: db "DEP"  
a443 f1			.pastdmark: pop af  
a444			endm  
# End of macro DMARK
a444					CALLMONITOR 
a444 cd 6f ee			call debug_vector  
a447				endm  
# End of macro CALLMONITOR
a447				endif 
a447			 
a447			 
a447 2a ee e9		ld hl, (cli_data_sp) 
a44a 11 28 e8		ld de, cli_data_stack 
a44d ed 52		sbc hl,de 
a44f			 
a44f			; div by size of stack item 
a44f			 
a44f 5d			ld e,l 
a450 0e 03		ld c, 3 
a452 cd 6b 8c		call Div8 
a455			 
a455 6f			ld l,a 
a456 26 00		ld h,0 
a458			 
a458			;srl h 
a458			;rr l 
a458			 
a458 cd 62 9a			call forth_push_numhl 
a45b				NEXTW 
a45b c3 0f 9e			jp macro_next 
a45e				endm 
# End of macro NEXTW
a45e			.OVER: 
a45e			CWHEAD .PAUSE 46 "OVER" 4 WORD_FLAG_CODE 
a45e 42				db WORD_SYS_CORE+46             
a45f a5 a4			dw .PAUSE            
a461 05				db 4 + 1 
a462 .. 00			db "OVER",0              
a467				endm 
# End of macro CWHEAD
a467			; | OVER ( n1 n2 -- n1 n2 n1 )  Copy one below TOS onto TOS | DONE 
a467				if DEBUG_FORTH_WORDS_KEY 
a467					DMARK "OVR" 
a467 f5				push af  
a468 3a 7c a4			ld a, (.dmark)  
a46b 32 6b ee			ld (debug_mark),a  
a46e 3a 7d a4			ld a, (.dmark+1)  
a471 32 6c ee			ld (debug_mark+1),a  
a474 3a 7e a4			ld a, (.dmark+2)  
a477 32 6d ee			ld (debug_mark+2),a  
a47a 18 03			jr .pastdmark  
a47c ..			.dmark: db "OVR"  
a47f f1			.pastdmark: pop af  
a480			endm  
# End of macro DMARK
a480					CALLMONITOR 
a480 cd 6f ee			call debug_vector  
a483				endm  
# End of macro CALLMONITOR
a483				endif 
a483			 
a483			; TODO Use os stack swap memory 
a483				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a483 cd 59 9c			call macro_dsp_valuehl 
a486				endm 
# End of macro FORTH_DSP_VALUEHL
a486 e5				push hl    ; n2 
a487				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a487 cd 11 9d			call macro_forth_dsp_pop 
a48a				endm 
# End of macro FORTH_DSP_POP
a48a			 
a48a				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a48a cd 59 9c			call macro_dsp_valuehl 
a48d				endm 
# End of macro FORTH_DSP_VALUEHL
a48d e5				push hl    ; n1 
a48e				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a48e cd 11 9d			call macro_forth_dsp_pop 
a491				endm 
# End of macro FORTH_DSP_POP
a491			 
a491 d1				pop de     ; n1 
a492 e1				pop hl     ; n2 
a493			 
a493 d5				push de 
a494 e5				push hl 
a495 d5				push de 
a496			 
a496				; push back  
a496			 
a496 e1				pop hl 
a497 cd 62 9a			call forth_push_numhl 
a49a e1				pop hl 
a49b cd 62 9a			call forth_push_numhl 
a49e e1				pop hl 
a49f cd 62 9a			call forth_push_numhl 
a4a2				NEXTW 
a4a2 c3 0f 9e			jp macro_next 
a4a5				endm 
# End of macro NEXTW
a4a5			 
a4a5			.PAUSE: 
a4a5			CWHEAD .PAUSES 47 "PAUSEMS" 7 WORD_FLAG_CODE 
a4a5 43				db WORD_SYS_CORE+47             
a4a6 da a4			dw .PAUSES            
a4a8 08				db 7 + 1 
a4a9 .. 00			db "PAUSEMS",0              
a4b1				endm 
# End of macro CWHEAD
a4b1			; | PAUSEMS ( n -- )  Pause for n millisconds | DONE 
a4b1				if DEBUG_FORTH_WORDS_KEY 
a4b1					DMARK "PMS" 
a4b1 f5				push af  
a4b2 3a c6 a4			ld a, (.dmark)  
a4b5 32 6b ee			ld (debug_mark),a  
a4b8 3a c7 a4			ld a, (.dmark+1)  
a4bb 32 6c ee			ld (debug_mark+1),a  
a4be 3a c8 a4			ld a, (.dmark+2)  
a4c1 32 6d ee			ld (debug_mark+2),a  
a4c4 18 03			jr .pastdmark  
a4c6 ..			.dmark: db "PMS"  
a4c9 f1			.pastdmark: pop af  
a4ca			endm  
# End of macro DMARK
a4ca					CALLMONITOR 
a4ca cd 6f ee			call debug_vector  
a4cd				endm  
# End of macro CALLMONITOR
a4cd				endif 
a4cd				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a4cd cd 59 9c			call macro_dsp_valuehl 
a4d0				endm 
# End of macro FORTH_DSP_VALUEHL
a4d0			;		push hl    ; n2 
a4d0				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a4d0 cd 11 9d			call macro_forth_dsp_pop 
a4d3				endm 
# End of macro FORTH_DSP_POP
a4d3			;		pop hl 
a4d3			 
a4d3 7d				ld a, l 
a4d4 cd d6 89			call aDelayInMS 
a4d7			       NEXTW 
a4d7 c3 0f 9e			jp macro_next 
a4da				endm 
# End of macro NEXTW
a4da			.PAUSES:  
a4da			CWHEAD .ROT 48 "PAUSE" 5 WORD_FLAG_CODE 
a4da 44				db WORD_SYS_CORE+48             
a4db 49 a5			dw .ROT            
a4dd 06				db 5 + 1 
a4de .. 00			db "PAUSE",0              
a4e4				endm 
# End of macro CWHEAD
a4e4			; | PAUSE ( n -- )  Pause for n seconds | DONE 
a4e4				if DEBUG_FORTH_WORDS_KEY 
a4e4					DMARK "PAU" 
a4e4 f5				push af  
a4e5 3a f9 a4			ld a, (.dmark)  
a4e8 32 6b ee			ld (debug_mark),a  
a4eb 3a fa a4			ld a, (.dmark+1)  
a4ee 32 6c ee			ld (debug_mark+1),a  
a4f1 3a fb a4			ld a, (.dmark+2)  
a4f4 32 6d ee			ld (debug_mark+2),a  
a4f7 18 03			jr .pastdmark  
a4f9 ..			.dmark: db "PAU"  
a4fc f1			.pastdmark: pop af  
a4fd			endm  
# End of macro DMARK
a4fd					CALLMONITOR 
a4fd cd 6f ee			call debug_vector  
a500				endm  
# End of macro CALLMONITOR
a500				endif 
a500				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a500 cd 59 9c			call macro_dsp_valuehl 
a503				endm 
# End of macro FORTH_DSP_VALUEHL
a503			;		push hl    ; n2 
a503				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a503 cd 11 9d			call macro_forth_dsp_pop 
a506				endm 
# End of macro FORTH_DSP_POP
a506			;		pop hl 
a506 45				ld b, l 
a507				if DEBUG_FORTH_WORDS 
a507					DMARK "PAU" 
a507 f5				push af  
a508 3a 1c a5			ld a, (.dmark)  
a50b 32 6b ee			ld (debug_mark),a  
a50e 3a 1d a5			ld a, (.dmark+1)  
a511 32 6c ee			ld (debug_mark+1),a  
a514 3a 1e a5			ld a, (.dmark+2)  
a517 32 6d ee			ld (debug_mark+2),a  
a51a 18 03			jr .pastdmark  
a51c ..			.dmark: db "PAU"  
a51f f1			.pastdmark: pop af  
a520			endm  
# End of macro DMARK
a520					CALLMONITOR 
a520 cd 6f ee			call debug_vector  
a523				endm  
# End of macro CALLMONITOR
a523				endif 
a523 c5			.pauses1:	push bc 
a524 cd f1 89			call delay1s 
a527 c1				pop bc 
a528				if DEBUG_FORTH_WORDS 
a528					DMARK "PA1" 
a528 f5				push af  
a529 3a 3d a5			ld a, (.dmark)  
a52c 32 6b ee			ld (debug_mark),a  
a52f 3a 3e a5			ld a, (.dmark+1)  
a532 32 6c ee			ld (debug_mark+1),a  
a535 3a 3f a5			ld a, (.dmark+2)  
a538 32 6d ee			ld (debug_mark+2),a  
a53b 18 03			jr .pastdmark  
a53d ..			.dmark: db "PA1"  
a540 f1			.pastdmark: pop af  
a541			endm  
# End of macro DMARK
a541					CALLMONITOR 
a541 cd 6f ee			call debug_vector  
a544				endm  
# End of macro CALLMONITOR
a544				endif 
a544 10 dd			djnz .pauses1 
a546			 
a546			       NEXTW 
a546 c3 0f 9e			jp macro_next 
a549				endm 
# End of macro NEXTW
a549			.ROT: 
a549			CWHEAD .UWORDS 49 "ROT" 3 WORD_FLAG_CODE 
a549 45				db WORD_SYS_CORE+49             
a54a 97 a5			dw .UWORDS            
a54c 04				db 3 + 1 
a54d .. 00			db "ROT",0              
a551				endm 
# End of macro CWHEAD
a551			; | ROT ( u1 u2 u3 -- u2 u3 u1 ) Rotate top three items on stack | DONE 
a551				if DEBUG_FORTH_WORDS_KEY 
a551					DMARK "ROT" 
a551 f5				push af  
a552 3a 66 a5			ld a, (.dmark)  
a555 32 6b ee			ld (debug_mark),a  
a558 3a 67 a5			ld a, (.dmark+1)  
a55b 32 6c ee			ld (debug_mark+1),a  
a55e 3a 68 a5			ld a, (.dmark+2)  
a561 32 6d ee			ld (debug_mark+2),a  
a564 18 03			jr .pastdmark  
a566 ..			.dmark: db "ROT"  
a569 f1			.pastdmark: pop af  
a56a			endm  
# End of macro DMARK
a56a					CALLMONITOR 
a56a cd 6f ee			call debug_vector  
a56d				endm  
# End of macro CALLMONITOR
a56d				endif 
a56d			 
a56d			; TODO Use os stack swap memory 
a56d				FORTH_DSP_VALUEHL 
a56d cd 59 9c			call macro_dsp_valuehl 
a570				endm 
# End of macro FORTH_DSP_VALUEHL
a570 e5				push hl    ; u3  
a571			 
a571				FORTH_DSP_POP 
a571 cd 11 9d			call macro_forth_dsp_pop 
a574				endm 
# End of macro FORTH_DSP_POP
a574			 
a574				FORTH_DSP_VALUEHL 
a574 cd 59 9c			call macro_dsp_valuehl 
a577				endm 
# End of macro FORTH_DSP_VALUEHL
a577 e5				push hl     ; u2 
a578			 
a578				FORTH_DSP_POP 
a578 cd 11 9d			call macro_forth_dsp_pop 
a57b				endm 
# End of macro FORTH_DSP_POP
a57b			 
a57b				FORTH_DSP_VALUEHL 
a57b cd 59 9c			call macro_dsp_valuehl 
a57e				endm 
# End of macro FORTH_DSP_VALUEHL
a57e e5				push hl     ; u1 
a57f			 
a57f				FORTH_DSP_POP 
a57f cd 11 9d			call macro_forth_dsp_pop 
a582				endm 
# End of macro FORTH_DSP_POP
a582			 
a582 c1				pop bc      ; u1 
a583 e1				pop hl      ; u2 
a584 d1				pop de      ; u3 
a585			 
a585			 
a585 c5				push bc 
a586 d5				push de 
a587 e5				push hl 
a588			 
a588			 
a588 e1				pop hl 
a589 cd 62 9a			call forth_push_numhl 
a58c			 
a58c e1				pop hl 
a58d cd 62 9a			call forth_push_numhl 
a590			 
a590 e1				pop hl 
a591 cd 62 9a			call forth_push_numhl 
a594				 
a594			 
a594			 
a594			 
a594			 
a594			 
a594			       NEXTW 
a594 c3 0f 9e			jp macro_next 
a597				endm 
# End of macro NEXTW
a597			 
a597			.UWORDS: 
a597			CWHEAD .BP 60 "UWORDS" 6 WORD_FLAG_CODE 
a597 50				db WORD_SYS_CORE+60             
a598 59 a6			dw .BP            
a59a 07				db 6 + 1 
a59b .. 00			db "UWORDS",0              
a5a2				endm 
# End of macro CWHEAD
a5a2			; | UWORDS (  -- s1 ... sn u )   List user word dict | DONE 
a5a2			; | | After use the TOS will have a count of the number of user words that have been pushed to stack. 
a5a2			; | | Following the count are the individual words. 
a5a2			; | | 
a5a2			; | | e.g. UWORDS 
a5a2			; | | BOX DIRLIST 2 
a5a2			; | |  
a5a2			; | | Can be used to save the words to storage via: 
a5a2			; | | UWORDS $01 DO $01 APPEND LOOP 
a5a2			if DEBUG_FORTH_WORDS_KEY 
a5a2				DMARK "UWR" 
a5a2 f5				push af  
a5a3 3a b7 a5			ld a, (.dmark)  
a5a6 32 6b ee			ld (debug_mark),a  
a5a9 3a b8 a5			ld a, (.dmark+1)  
a5ac 32 6c ee			ld (debug_mark+1),a  
a5af 3a b9 a5			ld a, (.dmark+2)  
a5b2 32 6d ee			ld (debug_mark+2),a  
a5b5 18 03			jr .pastdmark  
a5b7 ..			.dmark: db "UWR"  
a5ba f1			.pastdmark: pop af  
a5bb			endm  
# End of macro DMARK
a5bb				CALLMONITOR 
a5bb cd 6f ee			call debug_vector  
a5be				endm  
# End of macro CALLMONITOR
a5be			endif 
a5be 21 03 dd			ld hl, baseram 
a5c1				;ld hl, baseusermem 
a5c1 01 00 00			ld bc, 0    ; start a counter 
a5c4			 
a5c4			; skip dict stub 
a5c4			 
a5c4 cd 60 9f			call forth_tok_next 
a5c7			 
a5c7			 
a5c7			; while we have words to look for 
a5c7			 
a5c7 7e			.douscan:	ld a, (hl)      
a5c8			if DEBUG_FORTH_WORDS 
a5c8				DMARK "UWs" 
a5c8 f5				push af  
a5c9 3a dd a5			ld a, (.dmark)  
a5cc 32 6b ee			ld (debug_mark),a  
a5cf 3a de a5			ld a, (.dmark+1)  
a5d2 32 6c ee			ld (debug_mark+1),a  
a5d5 3a df a5			ld a, (.dmark+2)  
a5d8 32 6d ee			ld (debug_mark+2),a  
a5db 18 03			jr .pastdmark  
a5dd ..			.dmark: db "UWs"  
a5e0 f1			.pastdmark: pop af  
a5e1			endm  
# End of macro DMARK
a5e1				CALLMONITOR 
a5e1 cd 6f ee			call debug_vector  
a5e4				endm  
# End of macro CALLMONITOR
a5e4			endif 
a5e4 fe 00			cp WORD_SYS_END 
a5e6 28 4d			jr z, .udone 
a5e8 fe 01			cp WORD_SYS_UWORD 
a5ea 20 44			jr nz, .nuword 
a5ec			 
a5ec			if DEBUG_FORTH_WORDS 
a5ec				DMARK "UWu" 
a5ec f5				push af  
a5ed 3a 01 a6			ld a, (.dmark)  
a5f0 32 6b ee			ld (debug_mark),a  
a5f3 3a 02 a6			ld a, (.dmark+1)  
a5f6 32 6c ee			ld (debug_mark+1),a  
a5f9 3a 03 a6			ld a, (.dmark+2)  
a5fc 32 6d ee			ld (debug_mark+2),a  
a5ff 18 03			jr .pastdmark  
a601 ..			.dmark: db "UWu"  
a604 f1			.pastdmark: pop af  
a605			endm  
# End of macro DMARK
a605				CALLMONITOR 
a605 cd 6f ee			call debug_vector  
a608				endm  
# End of macro CALLMONITOR
a608			endif 
a608				; we have a uword so push its name to the stack 
a608			 
a608 e5				push hl  ; save so we can move to next dict block 
a609			 
a609				; skip opcode 
a609 23				inc hl  
a60a				; skip next ptr 
a60a 23				inc hl  
a60b 23				inc hl 
a60c				; skip len 
a60c 23				inc hl 
a60d			if DEBUG_FORTH_WORDS 
a60d				DMARK "UWt" 
a60d f5				push af  
a60e 3a 22 a6			ld a, (.dmark)  
a611 32 6b ee			ld (debug_mark),a  
a614 3a 23 a6			ld a, (.dmark+1)  
a617 32 6c ee			ld (debug_mark+1),a  
a61a 3a 24 a6			ld a, (.dmark+2)  
a61d 32 6d ee			ld (debug_mark+2),a  
a620 18 03			jr .pastdmark  
a622 ..			.dmark: db "UWt"  
a625 f1			.pastdmark: pop af  
a626			endm  
# End of macro DMARK
a626				CALLMONITOR 
a626 cd 6f ee			call debug_vector  
a629				endm  
# End of macro CALLMONITOR
a629			endif 
a629 03				inc bc 
a62a			 
a62a c5				push bc 
a62b cd d0 9a			call forth_push_str 
a62e c1				pop bc 
a62f			 
a62f e1				pop hl 	 
a630			 
a630 cd 60 9f		.nuword:	call forth_tok_next 
a633 18 92			jr .douscan  
a635			 
a635			.udone:		 ; push count of uwords found 
a635 c5				push bc 
a636 e1				pop hl 
a637			 
a637			if DEBUG_FORTH_WORDS 
a637				DMARK "UWc" 
a637 f5				push af  
a638 3a 4c a6			ld a, (.dmark)  
a63b 32 6b ee			ld (debug_mark),a  
a63e 3a 4d a6			ld a, (.dmark+1)  
a641 32 6c ee			ld (debug_mark+1),a  
a644 3a 4e a6			ld a, (.dmark+2)  
a647 32 6d ee			ld (debug_mark+2),a  
a64a 18 03			jr .pastdmark  
a64c ..			.dmark: db "UWc"  
a64f f1			.pastdmark: pop af  
a650			endm  
# End of macro DMARK
a650				CALLMONITOR 
a650 cd 6f ee			call debug_vector  
a653				endm  
# End of macro CALLMONITOR
a653			endif 
a653 cd 62 9a			call forth_push_numhl 
a656			 
a656			 
a656			       NEXTW 
a656 c3 0f 9e			jp macro_next 
a659				endm 
# End of macro NEXTW
a659			 
a659			.BP: 
a659			CWHEAD .MONITOR 64 "BP" 2 WORD_FLAG_CODE 
a659 54				db WORD_SYS_CORE+64             
a65a 93 a6			dw .MONITOR            
a65c 03				db 2 + 1 
a65d .. 00			db "BP",0              
a660				endm 
# End of macro CWHEAD
a660			; | BP ( u1 -- ) Enable or disable break point monitoring | DONE 
a660			; | | $00 Will enable the break points within specific code paths 
a660			; | | $01 Will disable break points 
a660			; | |  
a660			; | | By default break points are off. Either the above can be used to enable them 
a660			; | | or if a key is held down during start up the spashscreen will appear to freeze 
a660			; | | and on release of the pressed key the CONFIG menu will be displayed where you 
a660			; | | can disable break points. Exiting will then continue boot process. 
a660				; get byte count 
a660				if DEBUG_FORTH_WORDS_KEY 
a660					DMARK "BP." 
a660 f5				push af  
a661 3a 75 a6			ld a, (.dmark)  
a664 32 6b ee			ld (debug_mark),a  
a667 3a 76 a6			ld a, (.dmark+1)  
a66a 32 6c ee			ld (debug_mark+1),a  
a66d 3a 77 a6			ld a, (.dmark+2)  
a670 32 6d ee			ld (debug_mark+2),a  
a673 18 03			jr .pastdmark  
a675 ..			.dmark: db "BP."  
a678 f1			.pastdmark: pop af  
a679			endm  
# End of macro DMARK
a679					CALLMONITOR 
a679 cd 6f ee			call debug_vector  
a67c				endm  
# End of macro CALLMONITOR
a67c				endif 
a67c			 
a67c				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a67c cd 59 9c			call macro_dsp_valuehl 
a67f				endm 
# End of macro FORTH_DSP_VALUEHL
a67f			 
a67f			;		push hl 
a67f			 
a67f				; destroy value TOS 
a67f			 
a67f				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a67f cd 11 9d			call macro_forth_dsp_pop 
a682				endm 
# End of macro FORTH_DSP_POP
a682			 
a682			;		pop hl 
a682			 
a682 3e 00			ld a,0 
a684 bd				cp l 
a685 28 06			jr z, .bpset 
a687			;		ld a, '*' 
a687 cd f1 93			call bp_off 
a68a				NEXTW 
a68a c3 0f 9e			jp macro_next 
a68d				endm 
# End of macro NEXTW
a68d			 
a68d			.bpset:	 
a68d				;	ld (os_view_disable), a 
a68d cd e5 93			call bp_on 
a690			 
a690			 
a690				NEXTW 
a690 c3 0f 9e			jp macro_next 
a693				endm 
# End of macro NEXTW
a693			 
a693			 
a693			.MONITOR: 
a693			CWHEAD .MALLOC 65 "MONITOR" 7 WORD_FLAG_CODE 
a693 55				db WORD_SYS_CORE+65             
a694 c4 a6			dw .MALLOC            
a696 08				db 7 + 1 
a697 .. 00			db "MONITOR",0              
a69f				endm 
# End of macro CWHEAD
a69f			; | MONITOR ( -- ) Display system breakpoint/monitor | DONE 
a69f			; | | At start the current various registers will be displayed with contents. 
a69f			; | | Top right corner will show the most recent debug marker seen. 
a69f			; | | The bottom of the screen will also show the values of the data stack pointer (DSP) 
a69f			; | | and the return stack pointer (RSP). 
a69f			; | | Pressing: 
a69f			; | |    1 - Initial screen 
a69f			; | |    2 - Display a data dump of HL 
a69f			; | |    3 - Display a data dump of DE 
a69f			; | |    4 - Display a data dump of BC 
a69f			; | |    5 - Display a data dump of HL 
a69f			; | |    6 - Display a data dump of DSP 
a69f			; | |    7 - Display a data dump of RSP 
a69f			; | |    8 - Display a data dump of what is at DSP 
a69f			; | |    9 - Display a data dump of what is at RSP 
a69f			; | |    0 - Exit monitor and continue running. This will also enable break points 
a69f			; | |    * - Disable break points 
a69f			; | |    # - Enter traditional monitor mode 
a69f			; | | 
a69f			; | | Monitor Mode 
a69f			; | | ------------ 
a69f			; | | A prompt of '>' will be shown for various commands: 
a69f			; | |    D xxxx - Display a data dump starting from hex address xxxx 
a69f			; | |    C - Continue display a data dump from the last set address 
a69f			; | |    M xxxx - Set start of memory edit at address xx 
a69f			; | |    U xx - Poke the hex byte xx into the address set by M and increment the address to the next location 
a69f			; | |    G xxxx - Exec code at specific address 
a69f			; | |    Q - Return to previous 
a69f				if DEBUG_FORTH_WORDS_KEY 
a69f					DMARK "MON" 
a69f f5				push af  
a6a0 3a b4 a6			ld a, (.dmark)  
a6a3 32 6b ee			ld (debug_mark),a  
a6a6 3a b5 a6			ld a, (.dmark+1)  
a6a9 32 6c ee			ld (debug_mark+1),a  
a6ac 3a b6 a6			ld a, (.dmark+2)  
a6af 32 6d ee			ld (debug_mark+2),a  
a6b2 18 03			jr .pastdmark  
a6b4 ..			.dmark: db "MON"  
a6b7 f1			.pastdmark: pop af  
a6b8			endm  
# End of macro DMARK
a6b8					CALLMONITOR 
a6b8 cd 6f ee			call debug_vector  
a6bb				endm  
# End of macro CALLMONITOR
a6bb				endif 
a6bb			;		ld a, 0 
a6bb			;		ld (os_view_disable), a 
a6bb cd e5 93			call bp_on 
a6be			 
a6be				CALLMONITOR 
a6be cd 6f ee			call debug_vector  
a6c1				endm  
# End of macro CALLMONITOR
a6c1			 
a6c1			;	call monitor 
a6c1			 
a6c1				NEXTW 
a6c1 c3 0f 9e			jp macro_next 
a6c4				endm 
# End of macro NEXTW
a6c4			 
a6c4			 
a6c4			.MALLOC: 
a6c4			CWHEAD .MALLOC2 66 "ALLOT" 5 WORD_FLAG_CODE 
a6c4 56				db WORD_SYS_CORE+66             
a6c5 ed a6			dw .MALLOC2            
a6c7 06				db 5 + 1 
a6c8 .. 00			db "ALLOT",0              
a6ce				endm 
# End of macro CWHEAD
a6ce			; | ALLOT ( u -- u ) Allocate u bytes of memory space and push the pointer TOS  | DONE 
a6ce				if DEBUG_FORTH_WORDS_KEY 
a6ce					DMARK "ALL" 
a6ce f5				push af  
a6cf 3a e3 a6			ld a, (.dmark)  
a6d2 32 6b ee			ld (debug_mark),a  
a6d5 3a e4 a6			ld a, (.dmark+1)  
a6d8 32 6c ee			ld (debug_mark+1),a  
a6db 3a e5 a6			ld a, (.dmark+2)  
a6de 32 6d ee			ld (debug_mark+2),a  
a6e1 18 03			jr .pastdmark  
a6e3 ..			.dmark: db "ALL"  
a6e6 f1			.pastdmark: pop af  
a6e7			endm  
# End of macro DMARK
a6e7					CALLMONITOR 
a6e7 cd 6f ee			call debug_vector  
a6ea				endm  
# End of macro CALLMONITOR
a6ea				endif 
a6ea c3 14 a7			jp .mallocc 
a6ed			.MALLOC2: 
a6ed			CWHEAD .FREE 66 "MALLOC" 6 WORD_FLAG_CODE 
a6ed 56				db WORD_SYS_CORE+66             
a6ee 2b a7			dw .FREE            
a6f0 07				db 6 + 1 
a6f1 .. 00			db "MALLOC",0              
a6f8				endm 
# End of macro CWHEAD
a6f8			; | MALLOC ( u -- u ) Allocate u bytes of memory space and push the pointer TOS  | DONE 
a6f8				; get byte count 
a6f8				if DEBUG_FORTH_WORDS_KEY 
a6f8					DMARK "MAL" 
a6f8 f5				push af  
a6f9 3a 0d a7			ld a, (.dmark)  
a6fc 32 6b ee			ld (debug_mark),a  
a6ff 3a 0e a7			ld a, (.dmark+1)  
a702 32 6c ee			ld (debug_mark+1),a  
a705 3a 0f a7			ld a, (.dmark+2)  
a708 32 6d ee			ld (debug_mark+2),a  
a70b 18 03			jr .pastdmark  
a70d ..			.dmark: db "MAL"  
a710 f1			.pastdmark: pop af  
a711			endm  
# End of macro DMARK
a711					CALLMONITOR 
a711 cd 6f ee			call debug_vector  
a714				endm  
# End of macro CALLMONITOR
a714				endif 
a714			.mallocc: 
a714				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a714 cd 59 9c			call macro_dsp_valuehl 
a717				endm 
# End of macro FORTH_DSP_VALUEHL
a717			 
a717			;		push hl 
a717			 
a717				; destroy value TOS 
a717			 
a717				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a717 cd 11 9d			call macro_forth_dsp_pop 
a71a				endm 
# End of macro FORTH_DSP_POP
a71a			 
a71a			;		pop hl 
a71a cd b6 90			call malloc 
a71d			if DEBUG_FORTH_MALLOC_GUARD 
a71d f5				push af 
a71e cd 04 8d			call ishlzero 
a721			;		ld a, l 
a721			;		add h 
a721			;		cp 0 
a721 f1				pop af 
a722				 
a722 cc cf cb			call z,malloc_error 
a725			endif 
a725			 
a725 cd 62 9a			call forth_push_numhl 
a728				NEXTW 
a728 c3 0f 9e			jp macro_next 
a72b				endm 
# End of macro NEXTW
a72b			 
a72b			.FREE: 
a72b			CWHEAD .LIST 67 "FREE" 4 WORD_FLAG_CODE 
a72b 57				db WORD_SYS_CORE+67             
a72c 5c a7			dw .LIST            
a72e 05				db 4 + 1 
a72f .. 00			db "FREE",0              
a734				endm 
# End of macro CWHEAD
a734			; | FREE ( u --  ) Free memory block from malloc given u address  | DONE 
a734				if DEBUG_FORTH_WORDS_KEY 
a734					DMARK "FRE" 
a734 f5				push af  
a735 3a 49 a7			ld a, (.dmark)  
a738 32 6b ee			ld (debug_mark),a  
a73b 3a 4a a7			ld a, (.dmark+1)  
a73e 32 6c ee			ld (debug_mark+1),a  
a741 3a 4b a7			ld a, (.dmark+2)  
a744 32 6d ee			ld (debug_mark+2),a  
a747 18 03			jr .pastdmark  
a749 ..			.dmark: db "FRE"  
a74c f1			.pastdmark: pop af  
a74d			endm  
# End of macro DMARK
a74d					CALLMONITOR 
a74d cd 6f ee			call debug_vector  
a750				endm  
# End of macro CALLMONITOR
a750				endif 
a750				; get address 
a750			 
a750				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a750 cd 59 9c			call macro_dsp_valuehl 
a753				endm 
# End of macro FORTH_DSP_VALUEHL
a753			 
a753			;		push hl 
a753			 
a753				; destroy value TOS 
a753			 
a753				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a753 cd 11 9d			call macro_forth_dsp_pop 
a756				endm 
# End of macro FORTH_DSP_POP
a756			 
a756			;		pop hl 
a756			if FORTH_ENABLE_MALLOCFREE 
a756 cd 80 91			call free 
a759			endif 
a759				NEXTW 
a759 c3 0f 9e			jp macro_next 
a75c				endm 
# End of macro NEXTW
a75c			.LIST: 
a75c			CWHEAD .FORGET 72 "LIST" 4 WORD_FLAG_CODE 
a75c 5c				db WORD_SYS_CORE+72             
a75d 4c a9			dw .FORGET            
a75f 05				db 4 + 1 
a760 .. 00			db "LIST",0              
a765				endm 
# End of macro CWHEAD
a765			; | LIST ( uword -- u )    List the code to the word that is quoted (so as not to exec) on TOS | DONE 
a765			; | | The quoted word must be in upper case. 
a765			if DEBUG_FORTH_WORDS_KEY 
a765				DMARK "LST" 
a765 f5				push af  
a766 3a 7a a7			ld a, (.dmark)  
a769 32 6b ee			ld (debug_mark),a  
a76c 3a 7b a7			ld a, (.dmark+1)  
a76f 32 6c ee			ld (debug_mark+1),a  
a772 3a 7c a7			ld a, (.dmark+2)  
a775 32 6d ee			ld (debug_mark+2),a  
a778 18 03			jr .pastdmark  
a77a ..			.dmark: db "LST"  
a77d f1			.pastdmark: pop af  
a77e			endm  
# End of macro DMARK
a77e				CALLMONITOR 
a77e cd 6f ee			call debug_vector  
a781				endm  
# End of macro CALLMONITOR
a781			endif 
a781			 
a781				FORTH_DSP_VALUEHL 
a781 cd 59 9c			call macro_dsp_valuehl 
a784				endm 
# End of macro FORTH_DSP_VALUEHL
a784			 
a784 e5				push hl 
a785				FORTH_DSP_POP 
a785 cd 11 9d			call macro_forth_dsp_pop 
a788				endm 
# End of macro FORTH_DSP_POP
a788 c1				pop bc 
a789			 
a789			; Start format of scratch string 
a789			 
a789 21 c1 e2			ld hl, scratch 
a78c			 
a78c 3e 3a			ld a, ':' 
a78e 77				ld (hl),a 
a78f 23				inc hl 
a790 3e 20			ld a, ' ' 
a792 77				ld (hl), a 
a793			 
a793				; Get ptr to the word we need to look up 
a793			 
a793			;		FORTH_DSP_VALUEHL 
a793				;v5 FORTH_DSP_VALUE 
a793			; TODO type check 
a793			;		inc hl    ; Skip type check  
a793			;		push hl 
a793			;		ex de, hl    ; put into DE 
a793			 
a793			 
a793 21 03 dd			ld hl, baseram 
a796				;ld hl, baseusermem 
a796			 
a796 e5			push hl   ; sacreifical push 
a797			 
a797			.ldouscanm: 
a797 e1			pop hl 
a798			.ldouscan: 
a798			if DEBUG_FORTH_WORDS 
a798				DMARK "LSs" 
a798 f5				push af  
a799 3a ad a7			ld a, (.dmark)  
a79c 32 6b ee			ld (debug_mark),a  
a79f 3a ae a7			ld a, (.dmark+1)  
a7a2 32 6c ee			ld (debug_mark+1),a  
a7a5 3a af a7			ld a, (.dmark+2)  
a7a8 32 6d ee			ld (debug_mark+2),a  
a7ab 18 03			jr .pastdmark  
a7ad ..			.dmark: db "LSs"  
a7b0 f1			.pastdmark: pop af  
a7b1			endm  
# End of macro DMARK
a7b1				CALLMONITOR 
a7b1 cd 6f ee			call debug_vector  
a7b4				endm  
# End of macro CALLMONITOR
a7b4			endif 
a7b4			; skip dict stub 
a7b4 cd 60 9f			call forth_tok_next 
a7b7			 
a7b7			 
a7b7			; while we have words to look for 
a7b7			 
a7b7 7e			ld a, (hl)      
a7b8			if DEBUG_FORTH_WORDS 
a7b8				DMARK "LSk" 
a7b8 f5				push af  
a7b9 3a cd a7			ld a, (.dmark)  
a7bc 32 6b ee			ld (debug_mark),a  
a7bf 3a ce a7			ld a, (.dmark+1)  
a7c2 32 6c ee			ld (debug_mark+1),a  
a7c5 3a cf a7			ld a, (.dmark+2)  
a7c8 32 6d ee			ld (debug_mark+2),a  
a7cb 18 03			jr .pastdmark  
a7cd ..			.dmark: db "LSk"  
a7d0 f1			.pastdmark: pop af  
a7d1			endm  
# End of macro DMARK
a7d1				CALLMONITOR 
a7d1 cd 6f ee			call debug_vector  
a7d4				endm  
# End of macro CALLMONITOR
a7d4			endif 
a7d4				;cp WORD_SYS_END 
a7d4				;jp z, .lunotfound 
a7d4			 
a7d4					; if we hit non uwords then gone too far 
a7d4 fe 01				cp WORD_SYS_UWORD 
a7d6 c2 08 a9				jp nz, .lunotfound 
a7d9			 
a7d9				if DEBUG_FORTH_WORDS 
a7d9					DMARK "LSu" 
a7d9 f5				push af  
a7da 3a ee a7			ld a, (.dmark)  
a7dd 32 6b ee			ld (debug_mark),a  
a7e0 3a ef a7			ld a, (.dmark+1)  
a7e3 32 6c ee			ld (debug_mark+1),a  
a7e6 3a f0 a7			ld a, (.dmark+2)  
a7e9 32 6d ee			ld (debug_mark+2),a  
a7ec 18 03			jr .pastdmark  
a7ee ..			.dmark: db "LSu"  
a7f1 f1			.pastdmark: pop af  
a7f2			endm  
# End of macro DMARK
a7f2					CALLMONITOR 
a7f2 cd 6f ee			call debug_vector  
a7f5				endm  
# End of macro CALLMONITOR
a7f5				endif 
a7f5			 
a7f5					; found a uword but is it the one we want... 
a7f5			 
a7f5 c5					push bc     ; uword to find is on bc 
a7f6 d1					pop de 
a7f7			 
a7f7 e5					push hl  ; to save the ptr 
a7f8			 
a7f8					; skip opcode 
a7f8 23					inc hl  
a7f9					; skip next ptr 
a7f9 23					inc hl  
a7fa 23					inc hl 
a7fb					; skip len 
a7fb 23					inc hl 
a7fc			 
a7fc				if DEBUG_FORTH_WORDS 
a7fc					DMARK "LSc" 
a7fc f5				push af  
a7fd 3a 11 a8			ld a, (.dmark)  
a800 32 6b ee			ld (debug_mark),a  
a803 3a 12 a8			ld a, (.dmark+1)  
a806 32 6c ee			ld (debug_mark+1),a  
a809 3a 13 a8			ld a, (.dmark+2)  
a80c 32 6d ee			ld (debug_mark+2),a  
a80f 18 03			jr .pastdmark  
a811 ..			.dmark: db "LSc"  
a814 f1			.pastdmark: pop af  
a815			endm  
# End of macro DMARK
a815					CALLMONITOR 
a815 cd 6f ee			call debug_vector  
a818				endm  
# End of macro CALLMONITOR
a818				endif 
a818			; was exiting on the shorter of the words. swap and test is in favour of the longer word. 
a818			; ie. If WOO is defined first and then WO. Couldnt list WO. 
a818			; Nope that has gone the other way. It needs to be exact not on first zero 
a818			;		call strcmp 
a818 c5					push bc 
a819 cd 86 90				call StrictStrCmp 
a81c c1					pop bc 
a81d c2 97 a7				jp nz, .ldouscanm 
a820				 
a820			 
a820			 
a820					; we have a uword so push its name to the stack 
a820			 
a820			;	   	push hl  ; save so we can move to next dict block 
a820 e1			pop hl 
a821			 
a821				if DEBUG_FORTH_WORDS 
a821					DMARK "LSm" 
a821 f5				push af  
a822 3a 36 a8			ld a, (.dmark)  
a825 32 6b ee			ld (debug_mark),a  
a828 3a 37 a8			ld a, (.dmark+1)  
a82b 32 6c ee			ld (debug_mark+1),a  
a82e 3a 38 a8			ld a, (.dmark+2)  
a831 32 6d ee			ld (debug_mark+2),a  
a834 18 03			jr .pastdmark  
a836 ..			.dmark: db "LSm"  
a839 f1			.pastdmark: pop af  
a83a			endm  
# End of macro DMARK
a83a					CALLMONITOR 
a83a cd 6f ee			call debug_vector  
a83d				endm  
# End of macro CALLMONITOR
a83d				endif 
a83d			 
a83d					; skip opcode 
a83d 23					inc hl  
a83e					; skip next ptr 
a83e 23					inc hl  
a83f 23					inc hl 
a840					; skip len 
a840 7e					ld a, (hl)   ; save length to add 
a841				if DEBUG_FORTH_WORDS 
a841					DMARK "LS2" 
a841 f5				push af  
a842 3a 56 a8			ld a, (.dmark)  
a845 32 6b ee			ld (debug_mark),a  
a848 3a 57 a8			ld a, (.dmark+1)  
a84b 32 6c ee			ld (debug_mark+1),a  
a84e 3a 58 a8			ld a, (.dmark+2)  
a851 32 6d ee			ld (debug_mark+2),a  
a854 18 03			jr .pastdmark  
a856 ..			.dmark: db "LS2"  
a859 f1			.pastdmark: pop af  
a85a			endm  
# End of macro DMARK
a85a					CALLMONITOR 
a85a cd 6f ee			call debug_vector  
a85d				endm  
# End of macro CALLMONITOR
a85d				endif 
a85d			 
a85d					; save this location 
a85d				 
a85d e5					push hl 
a85e			 
a85e 23					inc hl 
a85f 11 c3 e2				ld de, scratch+2 
a862 4f					ld c, a 
a863 06 00				ld b, 0 
a865			 
a865				if DEBUG_FORTH_WORDS 
a865					DMARK "LSn" 
a865 f5				push af  
a866 3a 7a a8			ld a, (.dmark)  
a869 32 6b ee			ld (debug_mark),a  
a86c 3a 7b a8			ld a, (.dmark+1)  
a86f 32 6c ee			ld (debug_mark+1),a  
a872 3a 7c a8			ld a, (.dmark+2)  
a875 32 6d ee			ld (debug_mark+2),a  
a878 18 03			jr .pastdmark  
a87a ..			.dmark: db "LSn"  
a87d f1			.pastdmark: pop af  
a87e			endm  
# End of macro DMARK
a87e					CALLMONITOR 
a87e cd 6f ee			call debug_vector  
a881				endm  
# End of macro CALLMONITOR
a881				endif 
a881			 
a881					; copy uword name to scratch 
a881			 
a881 ed b0				ldir 
a883			 
a883 1b					dec de 
a884 3e 20				ld a, ' '    ; change null to space 
a886 12					ld (de), a 
a887			 
a887 13					inc de 
a888			 
a888 d5					push de 
a889 c1					pop bc     ; move scratch pointer to end of word name and save it 
a88a			 
a88a e1					pop hl 
a88b 7e					ld a, (hl) 
a88c					;inc hl 
a88c					; skip word string 
a88c cd db 8c				call addatohl 
a88f			 
a88f 23					inc hl 
a890			 
a890				if DEBUG_FORTH_WORDS 
a890					DMARK "LS3" 
a890 f5				push af  
a891 3a a5 a8			ld a, (.dmark)  
a894 32 6b ee			ld (debug_mark),a  
a897 3a a6 a8			ld a, (.dmark+1)  
a89a 32 6c ee			ld (debug_mark+1),a  
a89d 3a a7 a8			ld a, (.dmark+2)  
a8a0 32 6d ee			ld (debug_mark+2),a  
a8a3 18 03			jr .pastdmark  
a8a5 ..			.dmark: db "LS3"  
a8a8 f1			.pastdmark: pop af  
a8a9			endm  
# End of macro DMARK
a8a9					CALLMONITOR 
a8a9 cd 6f ee			call debug_vector  
a8ac				endm  
# End of macro CALLMONITOR
a8ac				endif 
a8ac					; should now be at the start of the machine code to setup the eval of the uword 
a8ac					; now locate the ptr to the string defintion 
a8ac			 
a8ac					; skip ld hl, 
a8ac					; then load the ptr 
a8ac			; TODO use get from hl ptr 
a8ac 23					inc hl 
a8ad 5e					ld e, (hl) 
a8ae 23					inc hl 
a8af 56					ld d, (hl) 
a8b0 eb					ex de, hl 
a8b1			 
a8b1			 
a8b1				if DEBUG_FORTH_WORDS 
a8b1					DMARK "LSt" 
a8b1 f5				push af  
a8b2 3a c6 a8			ld a, (.dmark)  
a8b5 32 6b ee			ld (debug_mark),a  
a8b8 3a c7 a8			ld a, (.dmark+1)  
a8bb 32 6c ee			ld (debug_mark+1),a  
a8be 3a c8 a8			ld a, (.dmark+2)  
a8c1 32 6d ee			ld (debug_mark+2),a  
a8c4 18 03			jr .pastdmark  
a8c6 ..			.dmark: db "LSt"  
a8c9 f1			.pastdmark: pop af  
a8ca			endm  
# End of macro DMARK
a8ca					CALLMONITOR 
a8ca cd 6f ee			call debug_vector  
a8cd				endm  
# End of macro CALLMONITOR
a8cd				endif 
a8cd			 
a8cd			; cant push right now due to tokenised strings  
a8cd			 
a8cd			; get the destination of where to copy this definition to. 
a8cd			 
a8cd c5					push bc 
a8ce d1					pop de 
a8cf			 
a8cf 7e			.listl:         ld a,(hl) 
a8d0 fe 00				cp 0 
a8d2 28 09				jr z, .lreplsp     ; replace zero with space 
a8d4					;cp FORTH_END_BUFFER 
a8d4 fe 3b				cp ';'    ; No end buffer flag but the ';' will be a good sign of the end of definition 
a8d6 28 0a				jr z, .listdone    ; at end of uword defination to close of scratch and finish 
a8d8				 
a8d8					; just copy this char as is then 
a8d8			 
a8d8 12					ld (de), a 
a8d9			 
a8d9 23			.listnxt:	inc hl 
a8da 13					inc de 
a8db 18 f2				jr .listl 
a8dd			 
a8dd 3e 20		.lreplsp:	ld a,' ' 
a8df 12					ld (de), a 
a8e0 18 f7				jr .listnxt 
a8e2			 
a8e2			; close up uword def 
a8e2			 
a8e2			.listdone: 
a8e2 12					ld (de), a 
a8e3 13					inc de 
a8e4 3e 00				ld a, 0 
a8e6 12					ld (de), a 
a8e7			 
a8e7			; now have def so clean up and push to stack 
a8e7			 
a8e7 21 c1 e2				ld hl, scratch 
a8ea				if DEBUG_FORTH_WORDS 
a8ea					DMARK "Ltp" 
a8ea f5				push af  
a8eb 3a ff a8			ld a, (.dmark)  
a8ee 32 6b ee			ld (debug_mark),a  
a8f1 3a 00 a9			ld a, (.dmark+1)  
a8f4 32 6c ee			ld (debug_mark+1),a  
a8f7 3a 01 a9			ld a, (.dmark+2)  
a8fa 32 6d ee			ld (debug_mark+2),a  
a8fd 18 03			jr .pastdmark  
a8ff ..			.dmark: db "Ltp"  
a902 f1			.pastdmark: pop af  
a903			endm  
# End of macro DMARK
a903					CALLMONITOR 
a903 cd 6f ee			call debug_vector  
a906				endm  
# End of macro CALLMONITOR
a906				endif 
a906			 
a906 18 1f			jr .listpush 
a908			 
a908			;.lnuword:	pop hl 
a908			;		call forth_tok_next 
a908			;		jp .ldouscan  
a908			 
a908			.lunotfound:		  
a908			 
a908				if DEBUG_FORTH_WORDS 
a908					DMARK "LSn" 
a908 f5				push af  
a909 3a 1d a9			ld a, (.dmark)  
a90c 32 6b ee			ld (debug_mark),a  
a90f 3a 1e a9			ld a, (.dmark+1)  
a912 32 6c ee			ld (debug_mark+1),a  
a915 3a 1f a9			ld a, (.dmark+2)  
a918 32 6d ee			ld (debug_mark+2),a  
a91b 18 03			jr .pastdmark  
a91d ..			.dmark: db "LSn"  
a920 f1			.pastdmark: pop af  
a921			endm  
# End of macro DMARK
a921					CALLMONITOR 
a921 cd 6f ee			call debug_vector  
a924				endm  
# End of macro CALLMONITOR
a924				endif 
a924			 
a924					 
a924			;		FORTH_DSP_POP 
a924			;		ld hl, .luno 
a924			 
a924					NEXTW			 
a924 c3 0f 9e			jp macro_next 
a927				endm 
# End of macro NEXTW
a927			 
a927			.listpush: 
a927				if DEBUG_FORTH_WORDS 
a927					DMARK "LS>" 
a927 f5				push af  
a928 3a 3c a9			ld a, (.dmark)  
a92b 32 6b ee			ld (debug_mark),a  
a92e 3a 3d a9			ld a, (.dmark+1)  
a931 32 6c ee			ld (debug_mark+1),a  
a934 3a 3e a9			ld a, (.dmark+2)  
a937 32 6d ee			ld (debug_mark+2),a  
a93a 18 03			jr .pastdmark  
a93c ..			.dmark: db "LS>"  
a93f f1			.pastdmark: pop af  
a940			endm  
# End of macro DMARK
a940					CALLMONITOR 
a940 cd 6f ee			call debug_vector  
a943				endm  
# End of macro CALLMONITOR
a943				endif 
a943 cd d0 9a				call forth_push_str 
a946			 
a946			 
a946			 
a946					NEXTW 
a946 c3 0f 9e			jp macro_next 
a949				endm 
# End of macro NEXTW
a949			 
a949			;.luno:    db "Word not found",0 
a949			 
a949			 
a949			 
a949			 
a949			 
a949			;		push hl   ; save pointer to start of uword def string 
a949			; 
a949			;; look for FORTH_EOL_LINE 
a949			;		ld a, FORTH_END_BUFFER 
a949			;		call strlent 
a949			; 
a949			;		inc hl		 ; space for coln def 
a949			;		inc hl 
a949			;		inc hl          ; space for terms 
a949			;		inc hl 
a949			; 
a949			;		ld a, 20   ; TODO get actual length 
a949			;		call addatohl    ; include a random amount of room for the uword name 
a949			; 
a949			;		 
a949			;	if DEBUG_FORTH_WORDS 
a949			;		DMARK "Lt1" 
a949			;		CALLMONITOR 
a949			;	endif 
a949			;		 
a949			; 
a949			;; malloc space for the string because we cant change it 
a949			; 
a949			;		call malloc 
a949			;	if DEBUG_FORTH_MALLOC_GUARD 
a949			;		push af 
a949			;		call ishlzero 
a949			;		pop af 
a949			;		 
a949			;		call z,malloc_error 
a949			;	endif 
a949			; 
a949			;	if DEBUG_FORTH_WORDS 
a949			;		DMARK "Lt2" 
a949			;		CALLMONITOR 
a949			;	endif 
a949			;		pop de 
a949			;		push hl    ; push the malloc to release later 
a949			;		push hl   ;  push back a copy for the later stack push 
a949			;		 
a949			;; copy the string swapping out the zero terms for spaces 
a949			; 
a949			;		; de has our source 
a949			;		; hl has our dest 
a949			; 
a949			;; add the coln def 
a949			; 
a949			;		ld a, ':' 
a949			;		ld (hl), a 
a949			;		inc hl 
a949			;		ld a, ' ' 
a949			;		ld (hl), a 
a949			;		inc hl 
a949			; 
a949			;; add the uname word 
a949			;		push de   ; save our string for now 
a949			;		ex de, hl 
a949			; 
a949			;		FORTH_DSP_VALUE 
a949			;		;v5 FORTH_DSP_VALUE 
a949			; 
a949			;		inc hl   ; skip type but we know by now this is OK 
a949			; 
a949			;.luword:	ld a,(hl) 
a949			;		cp 0 
a949			;		jr z, .luword2 
a949			;		ld (de), a 
a949			;		inc de 
a949			;		inc hl 
a949			;		jr .luword 
a949			; 
a949			;.luword2:	ld a, ' ' 
a949			;		ld (de), a 
a949			;;		inc hl 
a949			;;		inc de 
a949			;;		ld (de), a 
a949			;;		inc hl 
a949			;		inc de 
a949			; 
a949			;		ex de, hl 
a949			;		pop de 
a949			;		 
a949			;		 
a949			; 
a949			;; detoken that string and copy it 
a949			; 
a949			;	if DEBUG_FORTH_WORDS 
a949			;		DMARK "Lt2" 
a949			;		CALLMONITOR 
a949			;	endif 
a949			;.ldetok:	ld a, (de) 
a949			;		cp FORTH_END_BUFFER 
a949			;		jr z, .ldetokend 
a949			;		; swap out any zero term for space 
a949			;		cp 0 
a949			;		jr nz, .ldetoknext 
a949			;		ld a, ' ' 
a949			; 
a949			;	if DEBUG_FORTH_WORDS 
a949			;		DMARK "LtS" 
a949			;		CALLMONITOR 
a949			;	endif 
a949			;.ldetoknext:	ld (hl), a 
a949			;		inc de 
a949			;		inc hl 
a949			;		jr .ldetok 
a949			; 
a949			;.ldetokend:	ld a, 0    ; replace forth eol with string term for pushing 
a949			;		ld (hl), a  
a949			; 
a949			;; free that temp malloc 
a949			; 
a949			;		pop hl    
a949			; 
a949			;	if DEBUG_FORTH_WORDS 
a949			;		DMARK "Lt4" 
a949			;		CALLMONITOR 
a949			;	endif 
a949			;		call forth_apushstrhl 
a949			; 
a949			;		; get rid of temp malloc area 
a949			; 
a949			;		pop hl 
a949			;		call free 
a949			; 
a949			;		jr .ludone 
a949			; 
a949			;.lnuword:	pop hl 
a949			;		call forth_tok_next 
a949			;		jp .ldouscan  
a949			; 
a949			;.ludone:		 pop hl 
a949			; 
a949					NEXTW 
a949 c3 0f 9e			jp macro_next 
a94c				endm 
# End of macro NEXTW
a94c			 
a94c			.FORGET: 
a94c				CWHEAD .NOP 73 "FORGET" 6 WORD_FLAG_CODE 
a94c 5d				db WORD_SYS_CORE+73             
a94d c5 a9			dw .NOP            
a94f 07				db 6 + 1 
a950 .. 00			db "FORGET",0              
a957				endm 
# End of macro CWHEAD
a957			; | FORGET ( uword -- )    Forget the uword on TOS | DONE 
a957			; | | Will flag the word's op code to be deleted as well as replace the first char of the word with '_'. Quoted uword name must be in caps. 
a957			; | |  
a957			; | | e.g. "MORE" forget 
a957					if DEBUG_FORTH_WORDS_KEY 
a957						DMARK "FRG" 
a957 f5				push af  
a958 3a 6c a9			ld a, (.dmark)  
a95b 32 6b ee			ld (debug_mark),a  
a95e 3a 6d a9			ld a, (.dmark+1)  
a961 32 6c ee			ld (debug_mark+1),a  
a964 3a 6e a9			ld a, (.dmark+2)  
a967 32 6d ee			ld (debug_mark+2),a  
a96a 18 03			jr .pastdmark  
a96c ..			.dmark: db "FRG"  
a96f f1			.pastdmark: pop af  
a970			endm  
# End of macro DMARK
a970						CALLMONITOR 
a970 cd 6f ee			call debug_vector  
a973				endm  
# End of macro CALLMONITOR
a973					endif 
a973			 
a973				; find uword 
a973			        ; update start of word with "_" 
a973				; replace uword with deleted flag 
a973			 
a973			 
a973			;	if DEBUG_FORTH_WORDS 
a973			;		DMARK "FOG" 
a973			;		CALLMONITOR 
a973			;	endif 
a973			 
a973			 
a973					; Get ptr to the word we need to look up 
a973			 
a973					FORTH_DSP_VALUEHL 
a973 cd 59 9c			call macro_dsp_valuehl 
a976				endm 
# End of macro FORTH_DSP_VALUEHL
a976					;v5 FORTH_DSP_VALUE 
a976				; TODO type check 
a976			;		inc hl    ; Skip type check  
a976 e5					push hl 
a977 c1					pop bc 
a978			;		ex de, hl    ; put into DE 
a978			 
a978			 
a978 21 03 dd				ld hl, baseram 
a97b					;ld hl, baseusermem 
a97b			 
a97b				; skip dict stub 
a97b			;	call forth_tok_next 
a97b e5			push hl   ; sacreifical push 
a97c			 
a97c			.fldouscanm: 
a97c e1				pop hl 
a97d			.fldouscan: 
a97d			;	if DEBUG_FORTH_WORDS 
a97d			;		DMARK "LSs" 
a97d			;		CALLMONITOR 
a97d			;	endif 
a97d				; skip dict stub 
a97d cd 60 9f				call forth_tok_next 
a980			 
a980			 
a980			; while we have words to look for 
a980			 
a980 7e				ld a, (hl)      
a981			;	if DEBUG_FORTH_WORDS 
a981			;		DMARK "LSk" 
a981			;		CALLMONITOR 
a981			;	endif 
a981 fe 00				cp WORD_SYS_END 
a983 ca bf a9				jp z, .flunotfound 
a986 fe 01				cp WORD_SYS_UWORD 
a988 c2 7d a9				jp nz, .fldouscan 
a98b			 
a98b			;	if DEBUG_FORTH_WORDS 
a98b			;		DMARK "LSu" 
a98b			;		CALLMONITOR 
a98b			;	endif 
a98b			 
a98b					; found a uword but is it the one we want... 
a98b			 
a98b c5					push bc     ; uword to find is on bc 
a98c d1					pop de 
a98d			 
a98d e5					push hl  ; to save the ptr 
a98e			 
a98e					; skip opcode 
a98e 23					inc hl  
a98f					; skip next ptr 
a98f 23					inc hl  
a990 23					inc hl 
a991					; skip len 
a991 23					inc hl 
a992			 
a992			;	if DEBUG_FORTH_WORDS 
a992			;		DMARK "LSc" 
a992			;		CALLMONITOR 
a992			;	endif 
a992 cd 79 90				call strcmp 
a995 c2 7c a9				jp nz, .fldouscanm 
a998			; 
a998			; 
a998			;; while we have words to look for 
a998			; 
a998			;.fdouscan:	ld a, (hl)      
a998			;	if DEBUG_FORTH_WORDS 
a998			;		DMARK "LSs" 
a998			;		CALLMONITOR 
a998			;	endif 
a998			;		cp WORD_SYS_END 
a998			;		jp z, .fudone 
a998			;		cp WORD_SYS_UWORD 
a998			;		jp nz, .fnuword 
a998			; 
a998			;	if DEBUG_FORTH_WORDS 
a998			;		DMARK "FGu" 
a998			;		CALLMONITOR 
a998			;	endif 
a998			; 
a998			;		; found a uword but is it the one we want... 
a998			; 
a998			; 
a998			;	        pop de   ; get back the dsp name 
a998			;		push de 
a998			; 
a998			;		push hl  ; to save the ptr 
a998			; 
a998			;		; skip opcode 
a998			;		inc hl  
a998			;		; skip next ptr 
a998			;		inc hl  
a998			;		inc hl 
a998			;		; skip len 
a998			;		inc hl 
a998			; 
a998			;	if DEBUG_FORTH_WORDS 
a998			;		DMARK "FGc" 
a998			;		CALLMONITOR 
a998			;	endif 
a998			;		call strcmp 
a998			;		jp nz, .fnuword 
a998			 
a998			 
a998 e1			pop hl 
a999			 
a999				 
a999				if DEBUG_FORTH_WORDS 
a999					DMARK "FGm" 
a999 f5				push af  
a99a 3a ae a9			ld a, (.dmark)  
a99d 32 6b ee			ld (debug_mark),a  
a9a0 3a af a9			ld a, (.dmark+1)  
a9a3 32 6c ee			ld (debug_mark+1),a  
a9a6 3a b0 a9			ld a, (.dmark+2)  
a9a9 32 6d ee			ld (debug_mark+2),a  
a9ac 18 03			jr .pastdmark  
a9ae ..			.dmark: db "FGm"  
a9b1 f1			.pastdmark: pop af  
a9b2			endm  
# End of macro DMARK
a9b2					CALLMONITOR 
a9b2 cd 6f ee			call debug_vector  
a9b5				endm  
# End of macro CALLMONITOR
a9b5				endif 
a9b5			 
a9b5			 
a9b5			 
a9b5					; we have a uword so push its name to the stack 
a9b5			 
a9b5			;	   	push hl  ; save so we can move to next dict block 
a9b5			;pop hl 
a9b5			 
a9b5					; update opcode to deleted 
a9b5 3e 03				ld a, WORD_SYS_DELETED 
a9b7 77					ld (hl), a 
a9b8			 
a9b8 23					inc hl  
a9b9					; skip next ptr 
a9b9 23					inc hl  
a9ba 23					inc hl 
a9bb					; skip len 
a9bb 23					inc hl 
a9bc			 
a9bc					; TODO change parser to skip deleted words but for now mark it out 
a9bc 3e 5f				ld a, "_" 
a9be 77					ld  (hl),a 
a9bf			 
a9bf			;		jr .fudone 
a9bf			; 
a9bf			;.fnuword:	pop hl 
a9bf			;		call forth_tok_next 
a9bf			;		jp .fdouscan  
a9bf			 
a9bf			.flunotfound:		  
a9bf			 
a9bf			 
a9bf					 
a9bf					FORTH_DSP_POP 
a9bf cd 11 9d			call macro_forth_dsp_pop 
a9c2				endm 
# End of macro FORTH_DSP_POP
a9c2			;		ld hl, .luno 
a9c2			;.fudone:		 pop hl 
a9c2					NEXTW 
a9c2 c3 0f 9e			jp macro_next 
a9c5				endm 
# End of macro NEXTW
a9c5			.NOP: 
a9c5				CWHEAD .COMO 77 "NOP" 3 WORD_FLAG_CODE 
a9c5 61				db WORD_SYS_CORE+77             
a9c6 ec a9			dw .COMO            
a9c8 04				db 3 + 1 
a9c9 .. 00			db "NOP",0              
a9cd				endm 
# End of macro CWHEAD
a9cd			; | NOP (  --  ) Do nothing | DONE 
a9cd					if DEBUG_FORTH_WORDS_KEY 
a9cd						DMARK "NOP" 
a9cd f5				push af  
a9ce 3a e2 a9			ld a, (.dmark)  
a9d1 32 6b ee			ld (debug_mark),a  
a9d4 3a e3 a9			ld a, (.dmark+1)  
a9d7 32 6c ee			ld (debug_mark+1),a  
a9da 3a e4 a9			ld a, (.dmark+2)  
a9dd 32 6d ee			ld (debug_mark+2),a  
a9e0 18 03			jr .pastdmark  
a9e2 ..			.dmark: db "NOP"  
a9e5 f1			.pastdmark: pop af  
a9e6			endm  
# End of macro DMARK
a9e6						CALLMONITOR 
a9e6 cd 6f ee			call debug_vector  
a9e9				endm  
# End of macro CALLMONITOR
a9e9					endif 
a9e9				       NEXTW 
a9e9 c3 0f 9e			jp macro_next 
a9ec				endm 
# End of macro NEXTW
a9ec			.COMO: 
a9ec				CWHEAD .COMC 90 "(" 1 WORD_FLAG_CODE 
a9ec 6e				db WORD_SYS_CORE+90             
a9ed 3e aa			dw .COMC            
a9ef 02				db 1 + 1 
a9f0 .. 00			db "(",0              
a9f2				endm 
# End of macro CWHEAD
a9f2			; | ( ( -- )  Start of comment | DONE 
a9f2			 
a9f2			 
a9f2 2a c2 e5				ld hl, ( os_tok_ptr) 
a9f5 11 39 aa			ld de, .closepar 
a9f8					 
a9f8					if DEBUG_FORTH_WORDS 
a9f8						DMARK ").." 
a9f8 f5				push af  
a9f9 3a 0d aa			ld a, (.dmark)  
a9fc 32 6b ee			ld (debug_mark),a  
a9ff 3a 0e aa			ld a, (.dmark+1)  
aa02 32 6c ee			ld (debug_mark+1),a  
aa05 3a 0f aa			ld a, (.dmark+2)  
aa08 32 6d ee			ld (debug_mark+2),a  
aa0b 18 03			jr .pastdmark  
aa0d ..			.dmark: db ").."  
aa10 f1			.pastdmark: pop af  
aa11			endm  
# End of macro DMARK
aa11						CALLMONITOR 
aa11 cd 6f ee			call debug_vector  
aa14				endm  
# End of macro CALLMONITOR
aa14					endif 
aa14 cd 2a 9f			call findnexttok  
aa17			 
aa17					if DEBUG_FORTH_WORDS 
aa17						DMARK "IF5" 
aa17 f5				push af  
aa18 3a 2c aa			ld a, (.dmark)  
aa1b 32 6b ee			ld (debug_mark),a  
aa1e 3a 2d aa			ld a, (.dmark+1)  
aa21 32 6c ee			ld (debug_mark+1),a  
aa24 3a 2e aa			ld a, (.dmark+2)  
aa27 32 6d ee			ld (debug_mark+2),a  
aa2a 18 03			jr .pastdmark  
aa2c ..			.dmark: db "IF5"  
aa2f f1			.pastdmark: pop af  
aa30			endm  
# End of macro DMARK
aa30						CALLMONITOR 
aa30 cd 6f ee			call debug_vector  
aa33				endm  
# End of macro CALLMONITOR
aa33					endif 
aa33				; replace below with ) exec using tok_ptr 
aa33 22 c2 e5			ld (os_tok_ptr), hl 
aa36 c3 a0 9e			jp exec1 
aa39			 
aa39 .. 00			.closepar:   db ")",0 
aa3b			 
aa3b				       NEXTW 
aa3b c3 0f 9e			jp macro_next 
aa3e				endm 
# End of macro NEXTW
aa3e			.COMC: 
aa3e				CWHEAD .SCRATCH 91 ")" 1 WORD_FLAG_CODE 
aa3e 6f				db WORD_SYS_CORE+91             
aa3f 47 aa			dw .SCRATCH            
aa41 02				db 1 + 1 
aa42 .. 00			db ")",0              
aa44				endm 
# End of macro CWHEAD
aa44			; | ) ( -- )  End of comment |  DONE  
aa44				       NEXTW 
aa44 c3 0f 9e			jp macro_next 
aa47				endm 
# End of macro NEXTW
aa47			 
aa47			.SCRATCH: 
aa47				CWHEAD .INC 91 "SCRATCH" 7 WORD_FLAG_CODE 
aa47 6f				db WORD_SYS_CORE+91             
aa48 82 aa			dw .INC            
aa4a 08				db 7 + 1 
aa4b .. 00			db "SCRATCH",0              
aa53				endm 
# End of macro CWHEAD
aa53			; | SCRATCH ( u -- addr ) Pushes address of offset u to stack | DONE 
aa53			; | | The scratch area provides 32 word array. Can be used as single byte or as a word by passing the offset on stack. Pushes the resulting address to stack.  
aa53			; | | When used with the direct storage writing/malloc and the !@ or word versions it is possible to construct an expanded and flexible variable system 
aa53			; | |  
aa53			; | | e.g.    : score $00 scratch ; 
aa53			; | |  
aa53			; | | $00 score ! 
aa53			; | | $01 score +! 
aa53			; | |  
aa53			; | | e.g.   : varword $0a scratch ;  
aa53			; | | 
aa53			; | | $8000 varword ! 
aa53					if DEBUG_FORTH_WORDS_KEY 
aa53						DMARK "SCR" 
aa53 f5				push af  
aa54 3a 68 aa			ld a, (.dmark)  
aa57 32 6b ee			ld (debug_mark),a  
aa5a 3a 69 aa			ld a, (.dmark+1)  
aa5d 32 6c ee			ld (debug_mark+1),a  
aa60 3a 6a aa			ld a, (.dmark+2)  
aa63 32 6d ee			ld (debug_mark+2),a  
aa66 18 03			jr .pastdmark  
aa68 ..			.dmark: db "SCR"  
aa6b f1			.pastdmark: pop af  
aa6c			endm  
# End of macro DMARK
aa6c						CALLMONITOR 
aa6c cd 6f ee			call debug_vector  
aa6f				endm  
# End of macro CALLMONITOR
aa6f					endif 
aa6f			 
aa6f					FORTH_DSP_VALUEHL 
aa6f cd 59 9c			call macro_dsp_valuehl 
aa72				endm 
# End of macro FORTH_DSP_VALUEHL
aa72				 
aa72					FORTH_DSP_POP 
aa72 cd 11 9d			call macro_forth_dsp_pop 
aa75				endm 
# End of macro FORTH_DSP_POP
aa75			 
aa75 7d					ld a, l 
aa76 21 e6 e7				ld hl, os_var_array 
aa79 cd db 8c				call addatohl 
aa7c			 
aa7c cd 62 9a				call forth_push_numhl 
aa7f			 
aa7f				       NEXTW 
aa7f c3 0f 9e			jp macro_next 
aa82				endm 
# End of macro NEXTW
aa82			 
aa82			.INC: 
aa82				CWHEAD .DEC 91 "+!" 2 WORD_FLAG_CODE 
aa82 6f				db WORD_SYS_CORE+91             
aa83 d8 aa			dw .DEC            
aa85 03				db 2 + 1 
aa86 .. 00			db "+!",0              
aa89				endm 
# End of macro CWHEAD
aa89			; | +! ( u a -- )  Increment byte at address a by the value u | DONE 
aa89					if DEBUG_FORTH_WORDS_KEY 
aa89						DMARK "+s_" 
aa89 f5				push af  
aa8a 3a 9e aa			ld a, (.dmark)  
aa8d 32 6b ee			ld (debug_mark),a  
aa90 3a 9f aa			ld a, (.dmark+1)  
aa93 32 6c ee			ld (debug_mark+1),a  
aa96 3a a0 aa			ld a, (.dmark+2)  
aa99 32 6d ee			ld (debug_mark+2),a  
aa9c 18 03			jr .pastdmark  
aa9e ..			.dmark: db "+s_"  
aaa1 f1			.pastdmark: pop af  
aaa2			endm  
# End of macro DMARK
aaa2						CALLMONITOR 
aaa2 cd 6f ee			call debug_vector  
aaa5				endm  
# End of macro CALLMONITOR
aaa5					endif 
aaa5			 
aaa5					FORTH_DSP_VALUEHL 
aaa5 cd 59 9c			call macro_dsp_valuehl 
aaa8				endm 
# End of macro FORTH_DSP_VALUEHL
aaa8			 
aaa8 e5					push hl   ; save address 
aaa9			 
aaa9					FORTH_DSP_POP 
aaa9 cd 11 9d			call macro_forth_dsp_pop 
aaac				endm 
# End of macro FORTH_DSP_POP
aaac			 
aaac					FORTH_DSP_VALUEHL 
aaac cd 59 9c			call macro_dsp_valuehl 
aaaf				endm 
# End of macro FORTH_DSP_VALUEHL
aaaf			 
aaaf e5					push hl 
aab0					FORTH_DSP_POP 
aab0 cd 11 9d			call macro_forth_dsp_pop 
aab3				endm 
# End of macro FORTH_DSP_POP
aab3 e1					pop hl 
aab4			 
aab4					; hl contains value to add to byte at a 
aab4				 
aab4 eb					ex de, hl 
aab5			 
aab5 e1					pop hl 
aab6			 
aab6					if DEBUG_FORTH_WORDS 
aab6						DMARK "INC" 
aab6 f5				push af  
aab7 3a cb aa			ld a, (.dmark)  
aaba 32 6b ee			ld (debug_mark),a  
aabd 3a cc aa			ld a, (.dmark+1)  
aac0 32 6c ee			ld (debug_mark+1),a  
aac3 3a cd aa			ld a, (.dmark+2)  
aac6 32 6d ee			ld (debug_mark+2),a  
aac9 18 03			jr .pastdmark  
aacb ..			.dmark: db "INC"  
aace f1			.pastdmark: pop af  
aacf			endm  
# End of macro DMARK
aacf						CALLMONITOR 
aacf cd 6f ee			call debug_vector  
aad2				endm  
# End of macro CALLMONITOR
aad2					endif 
aad2			 
aad2 7e					ld a,(hl) 
aad3 83					add e 
aad4 77					ld (hl),a 
aad5			 
aad5			 
aad5			 
aad5				       NEXTW 
aad5 c3 0f 9e			jp macro_next 
aad8				endm 
# End of macro NEXTW
aad8			 
aad8			.DEC: 
aad8				CWHEAD .INC2 91 "-!" 2 WORD_FLAG_CODE 
aad8 6f				db WORD_SYS_CORE+91             
aad9 2c ab			dw .INC2            
aadb 03				db 2 + 1 
aadc .. 00			db "-!",0              
aadf				endm 
# End of macro CWHEAD
aadf			; | -! ( u a -- )  Decrement byte at address a by the value u | DONE 
aadf					if DEBUG_FORTH_WORDS_KEY 
aadf						DMARK "-s_" 
aadf f5				push af  
aae0 3a f4 aa			ld a, (.dmark)  
aae3 32 6b ee			ld (debug_mark),a  
aae6 3a f5 aa			ld a, (.dmark+1)  
aae9 32 6c ee			ld (debug_mark+1),a  
aaec 3a f6 aa			ld a, (.dmark+2)  
aaef 32 6d ee			ld (debug_mark+2),a  
aaf2 18 03			jr .pastdmark  
aaf4 ..			.dmark: db "-s_"  
aaf7 f1			.pastdmark: pop af  
aaf8			endm  
# End of macro DMARK
aaf8						CALLMONITOR 
aaf8 cd 6f ee			call debug_vector  
aafb				endm  
# End of macro CALLMONITOR
aafb					endif 
aafb			 
aafb					FORTH_DSP_VALUEHL 
aafb cd 59 9c			call macro_dsp_valuehl 
aafe				endm 
# End of macro FORTH_DSP_VALUEHL
aafe			 
aafe e5					push hl   ; save address 
aaff			 
aaff					FORTH_DSP_POP 
aaff cd 11 9d			call macro_forth_dsp_pop 
ab02				endm 
# End of macro FORTH_DSP_POP
ab02			 
ab02					FORTH_DSP_VALUEHL 
ab02 cd 59 9c			call macro_dsp_valuehl 
ab05				endm 
# End of macro FORTH_DSP_VALUEHL
ab05			 
ab05					; hl contains value to add to byte at a 
ab05				 
ab05 eb					ex de, hl 
ab06			 
ab06 e1					pop hl 
ab07			 
ab07					if DEBUG_FORTH_WORDS 
ab07						DMARK "DEC" 
ab07 f5				push af  
ab08 3a 1c ab			ld a, (.dmark)  
ab0b 32 6b ee			ld (debug_mark),a  
ab0e 3a 1d ab			ld a, (.dmark+1)  
ab11 32 6c ee			ld (debug_mark+1),a  
ab14 3a 1e ab			ld a, (.dmark+2)  
ab17 32 6d ee			ld (debug_mark+2),a  
ab1a 18 03			jr .pastdmark  
ab1c ..			.dmark: db "DEC"  
ab1f f1			.pastdmark: pop af  
ab20			endm  
# End of macro DMARK
ab20						CALLMONITOR 
ab20 cd 6f ee			call debug_vector  
ab23				endm  
# End of macro CALLMONITOR
ab23					endif 
ab23			 
ab23 7e					ld a,(hl) 
ab24 93					sub e 
ab25 77					ld (hl),a 
ab26			 
ab26			 
ab26					FORTH_DSP_POP 
ab26 cd 11 9d			call macro_forth_dsp_pop 
ab29				endm 
# End of macro FORTH_DSP_POP
ab29			 
ab29				       NEXTW 
ab29 c3 0f 9e			jp macro_next 
ab2c				endm 
# End of macro NEXTW
ab2c			 
ab2c			.INC2: 
ab2c				CWHEAD .DEC2 91 "+2!" 3 WORD_FLAG_CODE 
ab2c 6f				db WORD_SYS_CORE+91             
ab2d d9 ab			dw .DEC2            
ab2f 04				db 3 + 1 
ab30 .. 00			db "+2!",0              
ab34				endm 
# End of macro CWHEAD
ab34			; | +2! ( u a -- )  Increment word at address a by the value u | DONE 
ab34			 
ab34					if DEBUG_FORTH_WORDS_KEY 
ab34						DMARK "+2s" 
ab34 f5				push af  
ab35 3a 49 ab			ld a, (.dmark)  
ab38 32 6b ee			ld (debug_mark),a  
ab3b 3a 4a ab			ld a, (.dmark+1)  
ab3e 32 6c ee			ld (debug_mark+1),a  
ab41 3a 4b ab			ld a, (.dmark+2)  
ab44 32 6d ee			ld (debug_mark+2),a  
ab47 18 03			jr .pastdmark  
ab49 ..			.dmark: db "+2s"  
ab4c f1			.pastdmark: pop af  
ab4d			endm  
# End of macro DMARK
ab4d						CALLMONITOR 
ab4d cd 6f ee			call debug_vector  
ab50				endm  
# End of macro CALLMONITOR
ab50					endif 
ab50			 
ab50					; Address 
ab50			 
ab50					FORTH_DSP_VALUEHL 
ab50 cd 59 9c			call macro_dsp_valuehl 
ab53				endm 
# End of macro FORTH_DSP_VALUEHL
ab53			 
ab53 e5					push hl    ; save address 
ab54			 
ab54					; load content into de 
ab54			 
ab54 5e					ld e,(hl) 
ab55 23					inc hl 
ab56 56					ld d, (hl) 
ab57			 
ab57					if DEBUG_FORTH_WORDS 
ab57						DMARK "+2a" 
ab57 f5				push af  
ab58 3a 6c ab			ld a, (.dmark)  
ab5b 32 6b ee			ld (debug_mark),a  
ab5e 3a 6d ab			ld a, (.dmark+1)  
ab61 32 6c ee			ld (debug_mark+1),a  
ab64 3a 6e ab			ld a, (.dmark+2)  
ab67 32 6d ee			ld (debug_mark+2),a  
ab6a 18 03			jr .pastdmark  
ab6c ..			.dmark: db "+2a"  
ab6f f1			.pastdmark: pop af  
ab70			endm  
# End of macro DMARK
ab70						CALLMONITOR 
ab70 cd 6f ee			call debug_vector  
ab73				endm  
# End of macro CALLMONITOR
ab73					endif 
ab73			 
ab73					FORTH_DSP_POP 
ab73 cd 11 9d			call macro_forth_dsp_pop 
ab76				endm 
# End of macro FORTH_DSP_POP
ab76			 
ab76					; Get value to add 
ab76			 
ab76					FORTH_DSP_VALUE 
ab76 cd 42 9c			call macro_forth_dsp_value 
ab79				endm 
# End of macro FORTH_DSP_VALUE
ab79			 
ab79					if DEBUG_FORTH_WORDS 
ab79						DMARK "+2v" 
ab79 f5				push af  
ab7a 3a 8e ab			ld a, (.dmark)  
ab7d 32 6b ee			ld (debug_mark),a  
ab80 3a 8f ab			ld a, (.dmark+1)  
ab83 32 6c ee			ld (debug_mark+1),a  
ab86 3a 90 ab			ld a, (.dmark+2)  
ab89 32 6d ee			ld (debug_mark+2),a  
ab8c 18 03			jr .pastdmark  
ab8e ..			.dmark: db "+2v"  
ab91 f1			.pastdmark: pop af  
ab92			endm  
# End of macro DMARK
ab92						CALLMONITOR 
ab92 cd 6f ee			call debug_vector  
ab95				endm  
# End of macro CALLMONITOR
ab95					endif 
ab95			 
ab95 19					add hl, de 
ab96			 
ab96					if DEBUG_FORTH_WORDS 
ab96						DMARK "+2+" 
ab96 f5				push af  
ab97 3a ab ab			ld a, (.dmark)  
ab9a 32 6b ee			ld (debug_mark),a  
ab9d 3a ac ab			ld a, (.dmark+1)  
aba0 32 6c ee			ld (debug_mark+1),a  
aba3 3a ad ab			ld a, (.dmark+2)  
aba6 32 6d ee			ld (debug_mark+2),a  
aba9 18 03			jr .pastdmark  
abab ..			.dmark: db "+2+"  
abae f1			.pastdmark: pop af  
abaf			endm  
# End of macro DMARK
abaf						CALLMONITOR 
abaf cd 6f ee			call debug_vector  
abb2				endm  
# End of macro CALLMONITOR
abb2					endif 
abb2			 
abb2					; move result to de 
abb2			 
abb2 eb					ex de, hl 
abb3			 
abb3					; Address 
abb3			 
abb3 e1					pop hl 
abb4			 
abb4					; save it back 
abb4			 
abb4 73					ld (hl), e 
abb5 23					inc hl 
abb6 72					ld (hl), d 
abb7			 
abb7					if DEBUG_FORTH_WORDS 
abb7						DMARK "+2e" 
abb7 f5				push af  
abb8 3a cc ab			ld a, (.dmark)  
abbb 32 6b ee			ld (debug_mark),a  
abbe 3a cd ab			ld a, (.dmark+1)  
abc1 32 6c ee			ld (debug_mark+1),a  
abc4 3a ce ab			ld a, (.dmark+2)  
abc7 32 6d ee			ld (debug_mark+2),a  
abca 18 03			jr .pastdmark  
abcc ..			.dmark: db "+2e"  
abcf f1			.pastdmark: pop af  
abd0			endm  
# End of macro DMARK
abd0						CALLMONITOR 
abd0 cd 6f ee			call debug_vector  
abd3				endm  
# End of macro CALLMONITOR
abd3					endif 
abd3			 
abd3			 
abd3			 
abd3					FORTH_DSP_POP 
abd3 cd 11 9d			call macro_forth_dsp_pop 
abd6				endm 
# End of macro FORTH_DSP_POP
abd6			 
abd6			 
abd6				       NEXTW 
abd6 c3 0f 9e			jp macro_next 
abd9				endm 
# End of macro NEXTW
abd9			 
abd9			.DEC2: 
abd9				CWHEAD .GET2 91 "-2!" 3 WORD_FLAG_CODE 
abd9 6f				db WORD_SYS_CORE+91             
abda 88 ac			dw .GET2            
abdc 04				db 3 + 1 
abdd .. 00			db "-2!",0              
abe1				endm 
# End of macro CWHEAD
abe1			; | -2! ( u a -- )  Decrement word at address a by the value u | DONE 
abe1			 
abe1			 
abe1					if DEBUG_FORTH_WORDS_KEY 
abe1						DMARK "-2s" 
abe1 f5				push af  
abe2 3a f6 ab			ld a, (.dmark)  
abe5 32 6b ee			ld (debug_mark),a  
abe8 3a f7 ab			ld a, (.dmark+1)  
abeb 32 6c ee			ld (debug_mark+1),a  
abee 3a f8 ab			ld a, (.dmark+2)  
abf1 32 6d ee			ld (debug_mark+2),a  
abf4 18 03			jr .pastdmark  
abf6 ..			.dmark: db "-2s"  
abf9 f1			.pastdmark: pop af  
abfa			endm  
# End of macro DMARK
abfa						CALLMONITOR 
abfa cd 6f ee			call debug_vector  
abfd				endm  
# End of macro CALLMONITOR
abfd					endif 
abfd			 
abfd					; Address 
abfd			 
abfd					FORTH_DSP_VALUEHL 
abfd cd 59 9c			call macro_dsp_valuehl 
ac00				endm 
# End of macro FORTH_DSP_VALUEHL
ac00			 
ac00 e5					push hl    ; save address 
ac01			 
ac01					; load content into de 
ac01			 
ac01 5e					ld e,(hl) 
ac02 23					inc hl 
ac03 56					ld d, (hl) 
ac04			 
ac04					if DEBUG_FORTH_WORDS 
ac04						DMARK "-2a" 
ac04 f5				push af  
ac05 3a 19 ac			ld a, (.dmark)  
ac08 32 6b ee			ld (debug_mark),a  
ac0b 3a 1a ac			ld a, (.dmark+1)  
ac0e 32 6c ee			ld (debug_mark+1),a  
ac11 3a 1b ac			ld a, (.dmark+2)  
ac14 32 6d ee			ld (debug_mark+2),a  
ac17 18 03			jr .pastdmark  
ac19 ..			.dmark: db "-2a"  
ac1c f1			.pastdmark: pop af  
ac1d			endm  
# End of macro DMARK
ac1d						CALLMONITOR 
ac1d cd 6f ee			call debug_vector  
ac20				endm  
# End of macro CALLMONITOR
ac20					endif 
ac20			 
ac20					FORTH_DSP_POP 
ac20 cd 11 9d			call macro_forth_dsp_pop 
ac23				endm 
# End of macro FORTH_DSP_POP
ac23			 
ac23					; Get value to remove 
ac23			 
ac23					FORTH_DSP_VALUE 
ac23 cd 42 9c			call macro_forth_dsp_value 
ac26				endm 
# End of macro FORTH_DSP_VALUE
ac26			 
ac26					if DEBUG_FORTH_WORDS 
ac26						DMARK "-2v" 
ac26 f5				push af  
ac27 3a 3b ac			ld a, (.dmark)  
ac2a 32 6b ee			ld (debug_mark),a  
ac2d 3a 3c ac			ld a, (.dmark+1)  
ac30 32 6c ee			ld (debug_mark+1),a  
ac33 3a 3d ac			ld a, (.dmark+2)  
ac36 32 6d ee			ld (debug_mark+2),a  
ac39 18 03			jr .pastdmark  
ac3b ..			.dmark: db "-2v"  
ac3e f1			.pastdmark: pop af  
ac3f			endm  
# End of macro DMARK
ac3f						CALLMONITOR 
ac3f cd 6f ee			call debug_vector  
ac42				endm  
# End of macro CALLMONITOR
ac42					endif 
ac42			 
ac42 eb					ex de, hl 
ac43 ed 52				sbc hl, de 
ac45			 
ac45					if DEBUG_FORTH_WORDS 
ac45						DMARK "-2d" 
ac45 f5				push af  
ac46 3a 5a ac			ld a, (.dmark)  
ac49 32 6b ee			ld (debug_mark),a  
ac4c 3a 5b ac			ld a, (.dmark+1)  
ac4f 32 6c ee			ld (debug_mark+1),a  
ac52 3a 5c ac			ld a, (.dmark+2)  
ac55 32 6d ee			ld (debug_mark+2),a  
ac58 18 03			jr .pastdmark  
ac5a ..			.dmark: db "-2d"  
ac5d f1			.pastdmark: pop af  
ac5e			endm  
# End of macro DMARK
ac5e						CALLMONITOR 
ac5e cd 6f ee			call debug_vector  
ac61				endm  
# End of macro CALLMONITOR
ac61					endif 
ac61			 
ac61					; move result to de 
ac61			 
ac61 eb					ex de, hl 
ac62			 
ac62					; Address 
ac62			 
ac62 e1					pop hl 
ac63			 
ac63					; save it back 
ac63			 
ac63 73					ld (hl), e 
ac64 23					inc hl 
ac65 72					ld (hl), d 
ac66			 
ac66					if DEBUG_FORTH_WORDS 
ac66						DMARK "-2e" 
ac66 f5				push af  
ac67 3a 7b ac			ld a, (.dmark)  
ac6a 32 6b ee			ld (debug_mark),a  
ac6d 3a 7c ac			ld a, (.dmark+1)  
ac70 32 6c ee			ld (debug_mark+1),a  
ac73 3a 7d ac			ld a, (.dmark+2)  
ac76 32 6d ee			ld (debug_mark+2),a  
ac79 18 03			jr .pastdmark  
ac7b ..			.dmark: db "-2e"  
ac7e f1			.pastdmark: pop af  
ac7f			endm  
# End of macro DMARK
ac7f						CALLMONITOR 
ac7f cd 6f ee			call debug_vector  
ac82				endm  
# End of macro CALLMONITOR
ac82					endif 
ac82			 
ac82			 
ac82					FORTH_DSP_POP 
ac82 cd 11 9d			call macro_forth_dsp_pop 
ac85				endm 
# End of macro FORTH_DSP_POP
ac85			 
ac85			 
ac85			 
ac85				       NEXTW 
ac85 c3 0f 9e			jp macro_next 
ac88				endm 
# End of macro NEXTW
ac88			.GET2: 
ac88				CWHEAD .BANG2 91 "2@" 2 WORD_FLAG_CODE 
ac88 6f				db WORD_SYS_CORE+91             
ac89 bd ac			dw .BANG2            
ac8b 03				db 2 + 1 
ac8c .. 00			db "2@",0              
ac8f				endm 
# End of macro CWHEAD
ac8f			; | 2@ ( a -- u )  Push word at address a onto stack | DONE 
ac8f					if DEBUG_FORTH_WORDS_KEY 
ac8f						DMARK "2A_" 
ac8f f5				push af  
ac90 3a a4 ac			ld a, (.dmark)  
ac93 32 6b ee			ld (debug_mark),a  
ac96 3a a5 ac			ld a, (.dmark+1)  
ac99 32 6c ee			ld (debug_mark+1),a  
ac9c 3a a6 ac			ld a, (.dmark+2)  
ac9f 32 6d ee			ld (debug_mark+2),a  
aca2 18 03			jr .pastdmark  
aca4 ..			.dmark: db "2A_"  
aca7 f1			.pastdmark: pop af  
aca8			endm  
# End of macro DMARK
aca8						CALLMONITOR 
aca8 cd 6f ee			call debug_vector  
acab				endm  
# End of macro CALLMONITOR
acab					endif 
acab			 
acab					FORTH_DSP_VALUEHL 
acab cd 59 9c			call macro_dsp_valuehl 
acae				endm 
# End of macro FORTH_DSP_VALUEHL
acae			 
acae e5					push hl   ; save address 
acaf			 
acaf					FORTH_DSP_POP 
acaf cd 11 9d			call macro_forth_dsp_pop 
acb2				endm 
# End of macro FORTH_DSP_POP
acb2			 
acb2 e1					pop hl 
acb3			 
acb3 5e					ld e, (hl) 
acb4 23					inc hl 
acb5 56					ld d, (hl) 
acb6			 
acb6 eb					ex de, hl 
acb7			 
acb7 cd 62 9a				call forth_push_numhl 
acba			 
acba				       NEXTW 
acba c3 0f 9e			jp macro_next 
acbd				endm 
# End of macro NEXTW
acbd			.BANG2: 
acbd				CWHEAD .CONFIG 91 "2!" 2 WORD_FLAG_CODE 
acbd 6f				db WORD_SYS_CORE+91             
acbe f5 ac			dw .CONFIG            
acc0 03				db 2 + 1 
acc1 .. 00			db "2!",0              
acc4				endm 
# End of macro CWHEAD
acc4			; | 2! ( u a -- )  Store value u as a word at address a | DONE 
acc4					if DEBUG_FORTH_WORDS_KEY 
acc4						DMARK "2S_" 
acc4 f5				push af  
acc5 3a d9 ac			ld a, (.dmark)  
acc8 32 6b ee			ld (debug_mark),a  
accb 3a da ac			ld a, (.dmark+1)  
acce 32 6c ee			ld (debug_mark+1),a  
acd1 3a db ac			ld a, (.dmark+2)  
acd4 32 6d ee			ld (debug_mark+2),a  
acd7 18 03			jr .pastdmark  
acd9 ..			.dmark: db "2S_"  
acdc f1			.pastdmark: pop af  
acdd			endm  
# End of macro DMARK
acdd						CALLMONITOR 
acdd cd 6f ee			call debug_vector  
ace0				endm  
# End of macro CALLMONITOR
ace0					endif 
ace0			 
ace0					FORTH_DSP_VALUEHL 
ace0 cd 59 9c			call macro_dsp_valuehl 
ace3				endm 
# End of macro FORTH_DSP_VALUEHL
ace3			 
ace3 e5					push hl   ; save address 
ace4			 
ace4			 
ace4					FORTH_DSP_POP 
ace4 cd 11 9d			call macro_forth_dsp_pop 
ace7				endm 
# End of macro FORTH_DSP_POP
ace7			 
ace7					 
ace7					FORTH_DSP_VALUEHL 
ace7 cd 59 9c			call macro_dsp_valuehl 
acea				endm 
# End of macro FORTH_DSP_VALUEHL
acea			 
acea					FORTH_DSP_POP 
acea cd 11 9d			call macro_forth_dsp_pop 
aced				endm 
# End of macro FORTH_DSP_POP
aced			 
aced eb					ex de, hl    ; value now in de 
acee			 
acee e1					pop hl 
acef			 
acef 73					ld (hl), e 
acf0			 
acf0 23					inc hl 
acf1			 
acf1 72					ld (hl), d 
acf2			 
acf2			 
acf2				       NEXTW 
acf2 c3 0f 9e			jp macro_next 
acf5				endm 
# End of macro NEXTW
acf5			.CONFIG: 
acf5				CWHEAD .ADTOS 91 "CONFIG" 6 WORD_FLAG_CODE 
acf5 6f				db WORD_SYS_CORE+91             
acf6 06 ad			dw .ADTOS            
acf8 07				db 6 + 1 
acf9 .. 00			db "CONFIG",0              
ad00				endm 
# End of macro CWHEAD
ad00			; | CONFIG ( -- )  Access the system configuration menu. Set boot from file, hardware diags, and more! | DONE 
ad00			 
ad00 cd 4f 92				call config 
ad03					NEXTW 
ad03 c3 0f 9e			jp macro_next 
ad06				endm 
# End of macro NEXTW
ad06			 
ad06			.ADTOS: 
ad06				CWHEAD .SBTOS 91 "1+" 2 WORD_FLAG_CODE 
ad06 6f				db WORD_SYS_CORE+91             
ad07 1c ad			dw .SBTOS            
ad09 03				db 2 + 1 
ad0a .. 00			db "1+",0              
ad0d				endm 
# End of macro CWHEAD
ad0d			; | 1+ ( u -- u )  Increment value on TOS | DONE 
ad0d			 
ad0d					FORTH_DSP_VALUEHL 
ad0d cd 59 9c			call macro_dsp_valuehl 
ad10				endm 
# End of macro FORTH_DSP_VALUEHL
ad10 e5					push hl 
ad11			 
ad11					FORTH_DSP_POP 
ad11 cd 11 9d			call macro_forth_dsp_pop 
ad14				endm 
# End of macro FORTH_DSP_POP
ad14 e1					pop hl 
ad15			 
ad15 23					inc hl 
ad16 cd 62 9a				call forth_push_numhl 
ad19					 
ad19					NEXTW 
ad19 c3 0f 9e			jp macro_next 
ad1c				endm 
# End of macro NEXTW
ad1c			.SBTOS: 
ad1c				CWHEAD .ADSTORE 91 "1-" 2 WORD_FLAG_CODE 
ad1c 6f				db WORD_SYS_CORE+91             
ad1d 32 ad			dw .ADSTORE            
ad1f 03				db 2 + 1 
ad20 .. 00			db "1-",0              
ad23				endm 
# End of macro CWHEAD
ad23			; | 1- ( u -- u )  Decrement value on TOS | DONE 
ad23			 
ad23					FORTH_DSP_VALUEHL 
ad23 cd 59 9c			call macro_dsp_valuehl 
ad26				endm 
# End of macro FORTH_DSP_VALUEHL
ad26 e5					push hl 
ad27			 
ad27					FORTH_DSP_POP 
ad27 cd 11 9d			call macro_forth_dsp_pop 
ad2a				endm 
# End of macro FORTH_DSP_POP
ad2a e1					pop hl 
ad2b			 
ad2b 2b					dec hl 
ad2c cd 62 9a				call forth_push_numhl 
ad2f					 
ad2f					NEXTW 
ad2f c3 0f 9e			jp macro_next 
ad32				endm 
# End of macro NEXTW
ad32			.ADSTORE: 
ad32				CWHEAD .ADWSTORE 91 "1+!" 3 WORD_FLAG_CODE 
ad32 6f				db WORD_SYS_CORE+91             
ad33 48 ad			dw .ADWSTORE            
ad35 04				db 3 + 1 
ad36 .. 00			db "1+!",0              
ad3a				endm 
# End of macro CWHEAD
ad3a			; | 1+! ( addr -- )  Increment byte at address addr | DONE 
ad3a			 
ad3a					FORTH_DSP_VALUEHL 
ad3a cd 59 9c			call macro_dsp_valuehl 
ad3d				endm 
# End of macro FORTH_DSP_VALUEHL
ad3d e5					push hl 
ad3e			 
ad3e					FORTH_DSP_POP 
ad3e cd 11 9d			call macro_forth_dsp_pop 
ad41				endm 
# End of macro FORTH_DSP_POP
ad41 e1					pop hl 
ad42			 
ad42 7e					ld a, (hl) 
ad43 3c					inc a 
ad44 77					ld (hl), a 
ad45					 
ad45					NEXTW 
ad45 c3 0f 9e			jp macro_next 
ad48				endm 
# End of macro NEXTW
ad48			.ADWSTORE: 
ad48				CWHEAD .SBSTORE 91 "1+2!" 4 WORD_FLAG_CODE 
ad48 6f				db WORD_SYS_CORE+91             
ad49 66 ad			dw .SBSTORE            
ad4b 05				db 4 + 1 
ad4c .. 00			db "1+2!",0              
ad51				endm 
# End of macro CWHEAD
ad51			; | 1+2! ( addr -- )  Increment word at address addr | DONE 
ad51			 
ad51					FORTH_DSP_VALUEHL 
ad51 cd 59 9c			call macro_dsp_valuehl 
ad54				endm 
# End of macro FORTH_DSP_VALUEHL
ad54 e5					push hl 
ad55			 
ad55					FORTH_DSP_POP 
ad55 cd 11 9d			call macro_forth_dsp_pop 
ad58				endm 
# End of macro FORTH_DSP_POP
ad58 e1					pop hl 
ad59			 
ad59 e5					push hl 
ad5a			 
ad5a cd 91 9d				call loadwordinhl 
ad5d 23					inc hl 
ad5e			 
ad5e d1					pop de 
ad5f eb					ex de, hl 
ad60 73					ld (hl), e 
ad61 23					inc hl 
ad62 72					ld (hl), d 
ad63					 
ad63					NEXTW 
ad63 c3 0f 9e			jp macro_next 
ad66				endm 
# End of macro NEXTW
ad66			.SBSTORE: 
ad66				CWHEAD .SBWSTORE 91 "1-!" 3 WORD_FLAG_CODE 
ad66 6f				db WORD_SYS_CORE+91             
ad67 7c ad			dw .SBWSTORE            
ad69 04				db 3 + 1 
ad6a .. 00			db "1-!",0              
ad6e				endm 
# End of macro CWHEAD
ad6e			; | 1-! ( addr -- )  Decrement byte at address addr | DONE 
ad6e			 
ad6e					FORTH_DSP_VALUEHL 
ad6e cd 59 9c			call macro_dsp_valuehl 
ad71				endm 
# End of macro FORTH_DSP_VALUEHL
ad71 e5					push hl 
ad72			 
ad72					FORTH_DSP_POP 
ad72 cd 11 9d			call macro_forth_dsp_pop 
ad75				endm 
# End of macro FORTH_DSP_POP
ad75 e1					pop hl 
ad76			 
ad76 7e					ld a, (hl) 
ad77 3d					dec a 
ad78 77					ld (hl), a 
ad79					 
ad79					NEXTW 
ad79 c3 0f 9e			jp macro_next 
ad7c				endm 
# End of macro NEXTW
ad7c			.SBWSTORE: 
ad7c				CWHEAD .ENDCORE 91 "1-2!" 4 WORD_FLAG_CODE 
ad7c 6f				db WORD_SYS_CORE+91             
ad7d 9a ad			dw .ENDCORE            
ad7f 05				db 4 + 1 
ad80 .. 00			db "1-2!",0              
ad85				endm 
# End of macro CWHEAD
ad85			; | 1-2! ( addr -- )  Decrement word at address addr | DONE 
ad85			 
ad85					FORTH_DSP_VALUEHL 
ad85 cd 59 9c			call macro_dsp_valuehl 
ad88				endm 
# End of macro FORTH_DSP_VALUEHL
ad88 e5					push hl 
ad89			 
ad89					FORTH_DSP_POP 
ad89 cd 11 9d			call macro_forth_dsp_pop 
ad8c				endm 
# End of macro FORTH_DSP_POP
ad8c e1					pop hl 
ad8d			 
ad8d e5					push hl 
ad8e			 
ad8e cd 91 9d				call loadwordinhl 
ad91 2b					dec hl 
ad92			 
ad92 d1					pop de 
ad93 eb					ex de, hl 
ad94 73					ld (hl), e 
ad95 23					inc hl 
ad96 72					ld (hl), d 
ad97					 
ad97					NEXTW 
ad97 c3 0f 9e			jp macro_next 
ad9a				endm 
# End of macro NEXTW
ad9a			.ENDCORE: 
ad9a			 
ad9a			; eof 
ad9a			 
ad9a			 
# End of file forth_words_core.asm
ad9a			include "forth_words_flow.asm" 
ad9a			 
ad9a			; | ## Program Flow Words 
ad9a			 
ad9a			.IF: 
ad9a				CWHEAD .THEN 10 "IF" 2 WORD_FLAG_CODE 
ad9a 1e				db WORD_SYS_CORE+10             
ad9b 8f ae			dw .THEN            
ad9d 03				db 2 + 1 
ad9e .. 00			db "IF",0              
ada1				endm 
# End of macro CWHEAD
ada1			; | IF ( w -- f ) If TOS is true exec code following up to THEN - Note: currently not supporting ELSE or nested IF | DONE 
ada1			; 
ada1					if DEBUG_FORTH_WORDS_KEY 
ada1						DMARK "IF." 
ada1 f5				push af  
ada2 3a b6 ad			ld a, (.dmark)  
ada5 32 6b ee			ld (debug_mark),a  
ada8 3a b7 ad			ld a, (.dmark+1)  
adab 32 6c ee			ld (debug_mark+1),a  
adae 3a b8 ad			ld a, (.dmark+2)  
adb1 32 6d ee			ld (debug_mark+2),a  
adb4 18 03			jr .pastdmark  
adb6 ..			.dmark: db "IF."  
adb9 f1			.pastdmark: pop af  
adba			endm  
# End of macro DMARK
adba						CALLMONITOR 
adba cd 6f ee			call debug_vector  
adbd				endm  
# End of macro CALLMONITOR
adbd					endif 
adbd			; eval TOS 
adbd			 
adbd				FORTH_DSP_VALUEHL 
adbd cd 59 9c			call macro_dsp_valuehl 
adc0				endm 
# End of macro FORTH_DSP_VALUEHL
adc0			 
adc0			;	push hl 
adc0				FORTH_DSP_POP 
adc0 cd 11 9d			call macro_forth_dsp_pop 
adc3				endm 
# End of macro FORTH_DSP_POP
adc3			;	pop hl 
adc3			 
adc3					if DEBUG_FORTH_WORDS 
adc3						DMARK "IF1" 
adc3 f5				push af  
adc4 3a d8 ad			ld a, (.dmark)  
adc7 32 6b ee			ld (debug_mark),a  
adca 3a d9 ad			ld a, (.dmark+1)  
adcd 32 6c ee			ld (debug_mark+1),a  
add0 3a da ad			ld a, (.dmark+2)  
add3 32 6d ee			ld (debug_mark+2),a  
add6 18 03			jr .pastdmark  
add8 ..			.dmark: db "IF1"  
addb f1			.pastdmark: pop af  
addc			endm  
# End of macro DMARK
addc						CALLMONITOR 
addc cd 6f ee			call debug_vector  
addf				endm  
# End of macro CALLMONITOR
addf					endif 
addf b7				or a        ; clear carry flag 
ade0 11 00 00			ld de, 0 
ade3 eb				ex de,hl 
ade4 ed 52			sbc hl, de 
ade6 c2 70 ae			jp nz, .iftrue 
ade9			 
ade9					if DEBUG_FORTH_WORDS 
ade9						DMARK "IF2" 
ade9 f5				push af  
adea 3a fe ad			ld a, (.dmark)  
aded 32 6b ee			ld (debug_mark),a  
adf0 3a ff ad			ld a, (.dmark+1)  
adf3 32 6c ee			ld (debug_mark+1),a  
adf6 3a 00 ae			ld a, (.dmark+2)  
adf9 32 6d ee			ld (debug_mark+2),a  
adfc 18 03			jr .pastdmark  
adfe ..			.dmark: db "IF2"  
ae01 f1			.pastdmark: pop af  
ae02			endm  
# End of macro DMARK
ae02						CALLMONITOR 
ae02 cd 6f ee			call debug_vector  
ae05				endm  
# End of macro CALLMONITOR
ae05					endif 
ae05			 
ae05			; if not true then skip to THEN 
ae05			 
ae05				; TODO get tok_ptr 
ae05				; TODO consume toks until we get to THEN 
ae05			 
ae05 2a c2 e5			ld hl, (os_tok_ptr) 
ae08					if DEBUG_FORTH_WORDS 
ae08						DMARK "IF3" 
ae08 f5				push af  
ae09 3a 1d ae			ld a, (.dmark)  
ae0c 32 6b ee			ld (debug_mark),a  
ae0f 3a 1e ae			ld a, (.dmark+1)  
ae12 32 6c ee			ld (debug_mark+1),a  
ae15 3a 1f ae			ld a, (.dmark+2)  
ae18 32 6d ee			ld (debug_mark+2),a  
ae1b 18 03			jr .pastdmark  
ae1d ..			.dmark: db "IF3"  
ae20 f1			.pastdmark: pop af  
ae21			endm  
# End of macro DMARK
ae21						CALLMONITOR 
ae21 cd 6f ee			call debug_vector  
ae24				endm  
# End of macro CALLMONITOR
ae24						 
ae24					endif 
ae24 11 6b ae			ld de, .ifthen 
ae27					if DEBUG_FORTH_WORDS 
ae27						DMARK "IF4" 
ae27 f5				push af  
ae28 3a 3c ae			ld a, (.dmark)  
ae2b 32 6b ee			ld (debug_mark),a  
ae2e 3a 3d ae			ld a, (.dmark+1)  
ae31 32 6c ee			ld (debug_mark+1),a  
ae34 3a 3e ae			ld a, (.dmark+2)  
ae37 32 6d ee			ld (debug_mark+2),a  
ae3a 18 03			jr .pastdmark  
ae3c ..			.dmark: db "IF4"  
ae3f f1			.pastdmark: pop af  
ae40			endm  
# End of macro DMARK
ae40						CALLMONITOR 
ae40 cd 6f ee			call debug_vector  
ae43				endm  
# End of macro CALLMONITOR
ae43					endif 
ae43 cd 2a 9f			call findnexttok  
ae46			 
ae46					if DEBUG_FORTH_WORDS 
ae46						DMARK "IF5" 
ae46 f5				push af  
ae47 3a 5b ae			ld a, (.dmark)  
ae4a 32 6b ee			ld (debug_mark),a  
ae4d 3a 5c ae			ld a, (.dmark+1)  
ae50 32 6c ee			ld (debug_mark+1),a  
ae53 3a 5d ae			ld a, (.dmark+2)  
ae56 32 6d ee			ld (debug_mark+2),a  
ae59 18 03			jr .pastdmark  
ae5b ..			.dmark: db "IF5"  
ae5e f1			.pastdmark: pop af  
ae5f			endm  
# End of macro DMARK
ae5f						CALLMONITOR 
ae5f cd 6f ee			call debug_vector  
ae62				endm  
# End of macro CALLMONITOR
ae62					endif 
ae62				; TODO replace below with ; exec using tok_ptr 
ae62 22 c2 e5			ld (os_tok_ptr), hl 
ae65 c3 a0 9e			jp exec1 
ae68				NEXTW 
ae68 c3 0f 9e			jp macro_next 
ae6b				endm 
# End of macro NEXTW
ae6b			 
ae6b .. 00		.ifthen:  db "THEN",0 
ae70			 
ae70			.iftrue:		 
ae70				; Exec next words normally 
ae70			 
ae70				; if true then exec following IF as normal 
ae70					if DEBUG_FORTH_WORDS 
ae70						DMARK "IFT" 
ae70 f5				push af  
ae71 3a 85 ae			ld a, (.dmark)  
ae74 32 6b ee			ld (debug_mark),a  
ae77 3a 86 ae			ld a, (.dmark+1)  
ae7a 32 6c ee			ld (debug_mark+1),a  
ae7d 3a 87 ae			ld a, (.dmark+2)  
ae80 32 6d ee			ld (debug_mark+2),a  
ae83 18 03			jr .pastdmark  
ae85 ..			.dmark: db "IFT"  
ae88 f1			.pastdmark: pop af  
ae89			endm  
# End of macro DMARK
ae89						CALLMONITOR 
ae89 cd 6f ee			call debug_vector  
ae8c				endm  
# End of macro CALLMONITOR
ae8c					endif 
ae8c			 
ae8c					NEXTW 
ae8c c3 0f 9e			jp macro_next 
ae8f				endm 
# End of macro NEXTW
ae8f			.THEN: 
ae8f				CWHEAD .ELSE 11 "THEN" 4 WORD_FLAG_CODE 
ae8f 1f				db WORD_SYS_CORE+11             
ae90 b7 ae			dw .ELSE            
ae92 05				db 4 + 1 
ae93 .. 00			db "THEN",0              
ae98				endm 
# End of macro CWHEAD
ae98			; | THEN ( -- ) Does nothing. It is a marker for the end of an IF block | DONE 
ae98					if DEBUG_FORTH_WORDS_KEY 
ae98						DMARK "THN" 
ae98 f5				push af  
ae99 3a ad ae			ld a, (.dmark)  
ae9c 32 6b ee			ld (debug_mark),a  
ae9f 3a ae ae			ld a, (.dmark+1)  
aea2 32 6c ee			ld (debug_mark+1),a  
aea5 3a af ae			ld a, (.dmark+2)  
aea8 32 6d ee			ld (debug_mark+2),a  
aeab 18 03			jr .pastdmark  
aead ..			.dmark: db "THN"  
aeb0 f1			.pastdmark: pop af  
aeb1			endm  
# End of macro DMARK
aeb1						CALLMONITOR 
aeb1 cd 6f ee			call debug_vector  
aeb4				endm  
# End of macro CALLMONITOR
aeb4					endif 
aeb4					NEXTW 
aeb4 c3 0f 9e			jp macro_next 
aeb7				endm 
# End of macro NEXTW
aeb7			.ELSE: 
aeb7				CWHEAD .DO 12 "ELSE" 2 WORD_FLAG_CODE 
aeb7 20				db WORD_SYS_CORE+12             
aeb8 df ae			dw .DO            
aeba 03				db 2 + 1 
aebb .. 00			db "ELSE",0              
aec0				endm 
# End of macro CWHEAD
aec0			; | ELSE ( -- ) Not supported - does nothing | TODO 
aec0			 
aec0					if DEBUG_FORTH_WORDS_KEY 
aec0						DMARK "ELS" 
aec0 f5				push af  
aec1 3a d5 ae			ld a, (.dmark)  
aec4 32 6b ee			ld (debug_mark),a  
aec7 3a d6 ae			ld a, (.dmark+1)  
aeca 32 6c ee			ld (debug_mark+1),a  
aecd 3a d7 ae			ld a, (.dmark+2)  
aed0 32 6d ee			ld (debug_mark+2),a  
aed3 18 03			jr .pastdmark  
aed5 ..			.dmark: db "ELS"  
aed8 f1			.pastdmark: pop af  
aed9			endm  
# End of macro DMARK
aed9						CALLMONITOR 
aed9 cd 6f ee			call debug_vector  
aedc				endm  
# End of macro CALLMONITOR
aedc					endif 
aedc			 
aedc			 
aedc					NEXTW 
aedc c3 0f 9e			jp macro_next 
aedf				endm 
# End of macro NEXTW
aedf			.DO: 
aedf				CWHEAD .LOOP 13 "DO" 2 WORD_FLAG_CODE 
aedf 21				db WORD_SYS_CORE+13             
aee0 06 b0			dw .LOOP            
aee2 03				db 2 + 1 
aee3 .. 00			db "DO",0              
aee6				endm 
# End of macro CWHEAD
aee6			; | DO ( u1 u2 -- ) Loop starting at u2 with a limit of u1 | DONE 
aee6			 
aee6					if DEBUG_FORTH_WORDS_KEY 
aee6						DMARK "DO." 
aee6 f5				push af  
aee7 3a fb ae			ld a, (.dmark)  
aeea 32 6b ee			ld (debug_mark),a  
aeed 3a fc ae			ld a, (.dmark+1)  
aef0 32 6c ee			ld (debug_mark+1),a  
aef3 3a fd ae			ld a, (.dmark+2)  
aef6 32 6d ee			ld (debug_mark+2),a  
aef9 18 03			jr .pastdmark  
aefb ..			.dmark: db "DO."  
aefe f1			.pastdmark: pop af  
aeff			endm  
# End of macro DMARK
aeff						CALLMONITOR 
aeff cd 6f ee			call debug_vector  
af02				endm  
# End of macro CALLMONITOR
af02					endif 
af02			;  push pc to rsp stack past the DO 
af02			 
af02 2a c2 e5				ld hl, (os_tok_ptr) 
af05 23					inc hl   ; D 
af06 23					inc hl  ; O 
af07 23					inc hl   ; null 
af08					if DEBUG_FORTH_WORDS 
af08						DMARK "DO2" 
af08 f5				push af  
af09 3a 1d af			ld a, (.dmark)  
af0c 32 6b ee			ld (debug_mark),a  
af0f 3a 1e af			ld a, (.dmark+1)  
af12 32 6c ee			ld (debug_mark+1),a  
af15 3a 1f af			ld a, (.dmark+2)  
af18 32 6d ee			ld (debug_mark+2),a  
af1b 18 03			jr .pastdmark  
af1d ..			.dmark: db "DO2"  
af20 f1			.pastdmark: pop af  
af21			endm  
# End of macro DMARK
af21						CALLMONITOR 
af21 cd 6f ee			call debug_vector  
af24				endm  
# End of macro CALLMONITOR
af24					endif 
af24					FORTH_RSP_NEXT 
af24 cd 09 9a			call macro_forth_rsp_next 
af27				endm 
# End of macro FORTH_RSP_NEXT
af27					if DEBUG_FORTH_WORDS 
af27						DMARK "DO3" 
af27 f5				push af  
af28 3a 3c af			ld a, (.dmark)  
af2b 32 6b ee			ld (debug_mark),a  
af2e 3a 3d af			ld a, (.dmark+1)  
af31 32 6c ee			ld (debug_mark+1),a  
af34 3a 3e af			ld a, (.dmark+2)  
af37 32 6d ee			ld (debug_mark+2),a  
af3a 18 03			jr .pastdmark  
af3c ..			.dmark: db "DO3"  
af3f f1			.pastdmark: pop af  
af40			endm  
# End of macro DMARK
af40						CALLMONITOR 
af40 cd 6f ee			call debug_vector  
af43				endm  
# End of macro CALLMONITOR
af43					endif 
af43			 
af43					;if DEBUG_FORTH_WORDS 
af43				;		push hl 
af43			;		endif  
af43			 
af43			; get counters from data stack 
af43			 
af43			 
af43					FORTH_DSP_VALUEHL 
af43 cd 59 9c			call macro_dsp_valuehl 
af46				endm 
# End of macro FORTH_DSP_VALUEHL
af46 e5					push hl		 ; hl now has starting counter which needs to be tos 
af47			 
af47					if DEBUG_FORTH_WORDS 
af47						DMARK "DO4" 
af47 f5				push af  
af48 3a 5c af			ld a, (.dmark)  
af4b 32 6b ee			ld (debug_mark),a  
af4e 3a 5d af			ld a, (.dmark+1)  
af51 32 6c ee			ld (debug_mark+1),a  
af54 3a 5e af			ld a, (.dmark+2)  
af57 32 6d ee			ld (debug_mark+2),a  
af5a 18 03			jr .pastdmark  
af5c ..			.dmark: db "DO4"  
af5f f1			.pastdmark: pop af  
af60			endm  
# End of macro DMARK
af60						CALLMONITOR 
af60 cd 6f ee			call debug_vector  
af63				endm  
# End of macro CALLMONITOR
af63					endif 
af63					FORTH_DSP_POP 
af63 cd 11 9d			call macro_forth_dsp_pop 
af66				endm 
# End of macro FORTH_DSP_POP
af66			 
af66					if DEBUG_FORTH_WORDS 
af66						DMARK "DO5" 
af66 f5				push af  
af67 3a 7b af			ld a, (.dmark)  
af6a 32 6b ee			ld (debug_mark),a  
af6d 3a 7c af			ld a, (.dmark+1)  
af70 32 6c ee			ld (debug_mark+1),a  
af73 3a 7d af			ld a, (.dmark+2)  
af76 32 6d ee			ld (debug_mark+2),a  
af79 18 03			jr .pastdmark  
af7b ..			.dmark: db "DO5"  
af7e f1			.pastdmark: pop af  
af7f			endm  
# End of macro DMARK
af7f						CALLMONITOR 
af7f cd 6f ee			call debug_vector  
af82				endm  
# End of macro CALLMONITOR
af82					endif 
af82			 
af82					FORTH_DSP_VALUEHL 
af82 cd 59 9c			call macro_dsp_valuehl 
af85				endm 
# End of macro FORTH_DSP_VALUEHL
af85			;		push hl		 ; hl now has starting limit counter 
af85			 
af85					if DEBUG_FORTH_WORDS 
af85						DMARK "DO6" 
af85 f5				push af  
af86 3a 9a af			ld a, (.dmark)  
af89 32 6b ee			ld (debug_mark),a  
af8c 3a 9b af			ld a, (.dmark+1)  
af8f 32 6c ee			ld (debug_mark+1),a  
af92 3a 9c af			ld a, (.dmark+2)  
af95 32 6d ee			ld (debug_mark+2),a  
af98 18 03			jr .pastdmark  
af9a ..			.dmark: db "DO6"  
af9d f1			.pastdmark: pop af  
af9e			endm  
# End of macro DMARK
af9e						CALLMONITOR 
af9e cd 6f ee			call debug_vector  
afa1				endm  
# End of macro CALLMONITOR
afa1					endif 
afa1					FORTH_DSP_POP 
afa1 cd 11 9d			call macro_forth_dsp_pop 
afa4				endm 
# End of macro FORTH_DSP_POP
afa4			 
afa4			; put counters on the loop stack 
afa4			 
afa4			;		pop hl			 ; limit counter 
afa4 d1					pop de			; start counter 
afa5			 
afa5					; push limit counter 
afa5			 
afa5					if DEBUG_FORTH_WORDS 
afa5						DMARK "DO7" 
afa5 f5				push af  
afa6 3a ba af			ld a, (.dmark)  
afa9 32 6b ee			ld (debug_mark),a  
afac 3a bb af			ld a, (.dmark+1)  
afaf 32 6c ee			ld (debug_mark+1),a  
afb2 3a bc af			ld a, (.dmark+2)  
afb5 32 6d ee			ld (debug_mark+2),a  
afb8 18 03			jr .pastdmark  
afba ..			.dmark: db "DO7"  
afbd f1			.pastdmark: pop af  
afbe			endm  
# End of macro DMARK
afbe						CALLMONITOR 
afbe cd 6f ee			call debug_vector  
afc1				endm  
# End of macro CALLMONITOR
afc1					endif 
afc1					FORTH_LOOP_NEXT 
afc1 cd 8a 9c			call macro_forth_loop_next 
afc4				endm 
# End of macro FORTH_LOOP_NEXT
afc4			 
afc4					; push start counter 
afc4			 
afc4 eb					ex de, hl 
afc5					if DEBUG_FORTH_WORDS 
afc5						DMARK "DO7" 
afc5 f5				push af  
afc6 3a da af			ld a, (.dmark)  
afc9 32 6b ee			ld (debug_mark),a  
afcc 3a db af			ld a, (.dmark+1)  
afcf 32 6c ee			ld (debug_mark+1),a  
afd2 3a dc af			ld a, (.dmark+2)  
afd5 32 6d ee			ld (debug_mark+2),a  
afd8 18 03			jr .pastdmark  
afda ..			.dmark: db "DO7"  
afdd f1			.pastdmark: pop af  
afde			endm  
# End of macro DMARK
afde						CALLMONITOR 
afde cd 6f ee			call debug_vector  
afe1				endm  
# End of macro CALLMONITOR
afe1					endif 
afe1					FORTH_LOOP_NEXT 
afe1 cd 8a 9c			call macro_forth_loop_next 
afe4				endm 
# End of macro FORTH_LOOP_NEXT
afe4			 
afe4			 
afe4					; init first round of I counter 
afe4			 
afe4 22 e6 e5				ld (os_current_i), hl 
afe7			 
afe7					if DEBUG_FORTH_WORDS 
afe7						DMARK "DO8" 
afe7 f5				push af  
afe8 3a fc af			ld a, (.dmark)  
afeb 32 6b ee			ld (debug_mark),a  
afee 3a fd af			ld a, (.dmark+1)  
aff1 32 6c ee			ld (debug_mark+1),a  
aff4 3a fe af			ld a, (.dmark+2)  
aff7 32 6d ee			ld (debug_mark+2),a  
affa 18 03			jr .pastdmark  
affc ..			.dmark: db "DO8"  
afff f1			.pastdmark: pop af  
b000			endm  
# End of macro DMARK
b000						CALLMONITOR 
b000 cd 6f ee			call debug_vector  
b003				endm  
# End of macro CALLMONITOR
b003					endif 
b003			 
b003					NEXTW 
b003 c3 0f 9e			jp macro_next 
b006				endm 
# End of macro NEXTW
b006			.LOOP: 
b006				CWHEAD .I 14 "LOOP" 4 WORD_FLAG_CODE 
b006 22				db WORD_SYS_CORE+14             
b007 1e b1			dw .I            
b009 05				db 4 + 1 
b00a .. 00			db "LOOP",0              
b00f				endm 
# End of macro CWHEAD
b00f			; | LOOP ( -- ) Increment and test loop counter  | DONE 
b00f			 
b00f				; pop tos as current loop count to hl 
b00f			 
b00f				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
b00f			 
b00f				FORTH_LOOP_TOS 
b00f cd bd 9c			call macro_forth_loop_tos 
b012				endm 
# End of macro FORTH_LOOP_TOS
b012 e5				push hl 
b013			 
b013					if DEBUG_FORTH_WORDS_KEY 
b013						DMARK "LOP" 
b013 f5				push af  
b014 3a 28 b0			ld a, (.dmark)  
b017 32 6b ee			ld (debug_mark),a  
b01a 3a 29 b0			ld a, (.dmark+1)  
b01d 32 6c ee			ld (debug_mark+1),a  
b020 3a 2a b0			ld a, (.dmark+2)  
b023 32 6d ee			ld (debug_mark+2),a  
b026 18 03			jr .pastdmark  
b028 ..			.dmark: db "LOP"  
b02b f1			.pastdmark: pop af  
b02c			endm  
# End of macro DMARK
b02c						CALLMONITOR 
b02c cd 6f ee			call debug_vector  
b02f				endm  
# End of macro CALLMONITOR
b02f					endif 
b02f				; next item on the stack is the limit. get it 
b02f			 
b02f			 
b02f				FORTH_LOOP_POP 
b02f cd c7 9c			call macro_forth_loop_pop 
b032				endm 
# End of macro FORTH_LOOP_POP
b032			 
b032				FORTH_LOOP_TOS 
b032 cd bd 9c			call macro_forth_loop_tos 
b035				endm 
# End of macro FORTH_LOOP_TOS
b035			 
b035 d1				pop de		 ; de = i, hl = limit 
b036			 
b036					if DEBUG_FORTH_WORDS 
b036						DMARK "LP1" 
b036 f5				push af  
b037 3a 4b b0			ld a, (.dmark)  
b03a 32 6b ee			ld (debug_mark),a  
b03d 3a 4c b0			ld a, (.dmark+1)  
b040 32 6c ee			ld (debug_mark+1),a  
b043 3a 4d b0			ld a, (.dmark+2)  
b046 32 6d ee			ld (debug_mark+2),a  
b049 18 03			jr .pastdmark  
b04b ..			.dmark: db "LP1"  
b04e f1			.pastdmark: pop af  
b04f			endm  
# End of macro DMARK
b04f						CALLMONITOR 
b04f cd 6f ee			call debug_vector  
b052				endm  
# End of macro CALLMONITOR
b052					endif 
b052			 
b052				; go back to previous word 
b052			 
b052 d5				push de    ; save I for inc later 
b053			 
b053			 
b053				; get limit 
b053				;  is I at limit? 
b053			 
b053			 
b053					if DEBUG_FORTH_WORDS 
b053						DMARK "LP1" 
b053 f5				push af  
b054 3a 68 b0			ld a, (.dmark)  
b057 32 6b ee			ld (debug_mark),a  
b05a 3a 69 b0			ld a, (.dmark+1)  
b05d 32 6c ee			ld (debug_mark+1),a  
b060 3a 6a b0			ld a, (.dmark+2)  
b063 32 6d ee			ld (debug_mark+2),a  
b066 18 03			jr .pastdmark  
b068 ..			.dmark: db "LP1"  
b06b f1			.pastdmark: pop af  
b06c			endm  
# End of macro DMARK
b06c						CALLMONITOR 
b06c cd 6f ee			call debug_vector  
b06f				endm  
# End of macro CALLMONITOR
b06f					endif 
b06f			 
b06f ed 52			sbc hl, de 
b071			 
b071			 
b071				;  if at limit pop both limit and current off stack do NEXT and get rid of saved DO 
b071			 
b071 20 26				jr nz, .loopnotdone 
b073			 
b073 e1				pop hl   ; get rid of saved I 
b074				FORTH_LOOP_POP     ; get rid of limit 
b074 cd c7 9c			call macro_forth_loop_pop 
b077				endm 
# End of macro FORTH_LOOP_POP
b077			 
b077				FORTH_RSP_POP     ; get rid of DO ptr 
b077 cd 2a 9a			call macro_forth_rsp_pop 
b07a				endm 
# End of macro FORTH_RSP_POP
b07a			 
b07a			if DEBUG_FORTH_WORDS 
b07a						DMARK "LP>" 
b07a f5				push af  
b07b 3a 8f b0			ld a, (.dmark)  
b07e 32 6b ee			ld (debug_mark),a  
b081 3a 90 b0			ld a, (.dmark+1)  
b084 32 6c ee			ld (debug_mark+1),a  
b087 3a 91 b0			ld a, (.dmark+2)  
b08a 32 6d ee			ld (debug_mark+2),a  
b08d 18 03			jr .pastdmark  
b08f ..			.dmark: db "LP>"  
b092 f1			.pastdmark: pop af  
b093			endm  
# End of macro DMARK
b093				CALLMONITOR 
b093 cd 6f ee			call debug_vector  
b096				endm  
# End of macro CALLMONITOR
b096			endif 
b096			 
b096					NEXTW 
b096 c3 0f 9e			jp macro_next 
b099				endm 
# End of macro NEXTW
b099				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
b099			 
b099			.loopnotdone: 
b099			 
b099 e1				pop hl    ; get I 
b09a 23				inc hl 
b09b			 
b09b			   	; save new I 
b09b			 
b09b			 
b09b					; set I counter 
b09b			 
b09b 22 e6 e5				ld (os_current_i), hl 
b09e			 
b09e					if DEBUG_FORTH_WORDS 
b09e						DMARK "LPN" 
b09e f5				push af  
b09f 3a b3 b0			ld a, (.dmark)  
b0a2 32 6b ee			ld (debug_mark),a  
b0a5 3a b4 b0			ld a, (.dmark+1)  
b0a8 32 6c ee			ld (debug_mark+1),a  
b0ab 3a b5 b0			ld a, (.dmark+2)  
b0ae 32 6d ee			ld (debug_mark+2),a  
b0b1 18 03			jr .pastdmark  
b0b3 ..			.dmark: db "LPN"  
b0b6 f1			.pastdmark: pop af  
b0b7			endm  
# End of macro DMARK
b0b7					CALLMONITOR 
b0b7 cd 6f ee			call debug_vector  
b0ba				endm  
# End of macro CALLMONITOR
b0ba					endif 
b0ba					 
b0ba				FORTH_LOOP_NEXT 
b0ba cd 8a 9c			call macro_forth_loop_next 
b0bd				endm 
# End of macro FORTH_LOOP_NEXT
b0bd			 
b0bd			 
b0bd					if DEBUG_FORTH_WORDS 
b0bd eb						ex de,hl 
b0be					endif 
b0be			 
b0be			;	; get DO ptr 
b0be			; 
b0be					if DEBUG_FORTH_WORDS 
b0be						DMARK "LP7" 
b0be f5				push af  
b0bf 3a d3 b0			ld a, (.dmark)  
b0c2 32 6b ee			ld (debug_mark),a  
b0c5 3a d4 b0			ld a, (.dmark+1)  
b0c8 32 6c ee			ld (debug_mark+1),a  
b0cb 3a d5 b0			ld a, (.dmark+2)  
b0ce 32 6d ee			ld (debug_mark+2),a  
b0d1 18 03			jr .pastdmark  
b0d3 ..			.dmark: db "LP7"  
b0d6 f1			.pastdmark: pop af  
b0d7			endm  
# End of macro DMARK
b0d7					CALLMONITOR 
b0d7 cd 6f ee			call debug_vector  
b0da				endm  
# End of macro CALLMONITOR
b0da					endif 
b0da				FORTH_RSP_TOS 
b0da cd 20 9a			call macro_forth_rsp_tos 
b0dd				endm 
# End of macro FORTH_RSP_TOS
b0dd			 
b0dd					if DEBUG_FORTH_WORDS 
b0dd						DMARK "LP8" 
b0dd f5				push af  
b0de 3a f2 b0			ld a, (.dmark)  
b0e1 32 6b ee			ld (debug_mark),a  
b0e4 3a f3 b0			ld a, (.dmark+1)  
b0e7 32 6c ee			ld (debug_mark+1),a  
b0ea 3a f4 b0			ld a, (.dmark+2)  
b0ed 32 6d ee			ld (debug_mark+2),a  
b0f0 18 03			jr .pastdmark  
b0f2 ..			.dmark: db "LP8"  
b0f5 f1			.pastdmark: pop af  
b0f6			endm  
# End of macro DMARK
b0f6					CALLMONITOR 
b0f6 cd 6f ee			call debug_vector  
b0f9				endm  
# End of macro CALLMONITOR
b0f9					endif 
b0f9				;push hl 
b0f9			 
b0f9				; not going to DO any more 
b0f9				; get rid of the RSP pointer as DO will add it back in 
b0f9				;FORTH_RSP_POP 
b0f9				;pop hl 
b0f9			 
b0f9				;ld hl,(cli_ret_sp) 
b0f9				;ld e, (hl) 
b0f9				;inc hl 
b0f9				;ld d, (hl) 
b0f9				;ex de,hl 
b0f9 22 c2 e5			ld (os_tok_ptr), hl 
b0fc					if DEBUG_FORTH_WORDS 
b0fc						DMARK "LP<" 
b0fc f5				push af  
b0fd 3a 11 b1			ld a, (.dmark)  
b100 32 6b ee			ld (debug_mark),a  
b103 3a 12 b1			ld a, (.dmark+1)  
b106 32 6c ee			ld (debug_mark+1),a  
b109 3a 13 b1			ld a, (.dmark+2)  
b10c 32 6d ee			ld (debug_mark+2),a  
b10f 18 03			jr .pastdmark  
b111 ..			.dmark: db "LP<"  
b114 f1			.pastdmark: pop af  
b115			endm  
# End of macro DMARK
b115					CALLMONITOR 
b115 cd 6f ee			call debug_vector  
b118				endm  
# End of macro CALLMONITOR
b118				endif 
b118 c3 a0 9e			jp exec1 
b11b			 
b11b					 
b11b			 
b11b			 
b11b					NEXTW 
b11b c3 0f 9e			jp macro_next 
b11e				endm 
# End of macro NEXTW
b11e			.I:  
b11e			 
b11e				CWHEAD .DLOOP 74 "I" 1 WORD_FLAG_CODE 
b11e 5e				db WORD_SYS_CORE+74             
b11f 49 b1			dw .DLOOP            
b121 02				db 1 + 1 
b122 .. 00			db "I",0              
b124				endm 
# End of macro CWHEAD
b124			; | I ( -- ) Current loop counter | DONE 
b124					if DEBUG_FORTH_WORDS_KEY 
b124						DMARK "I.." 
b124 f5				push af  
b125 3a 39 b1			ld a, (.dmark)  
b128 32 6b ee			ld (debug_mark),a  
b12b 3a 3a b1			ld a, (.dmark+1)  
b12e 32 6c ee			ld (debug_mark+1),a  
b131 3a 3b b1			ld a, (.dmark+2)  
b134 32 6d ee			ld (debug_mark+2),a  
b137 18 03			jr .pastdmark  
b139 ..			.dmark: db "I.."  
b13c f1			.pastdmark: pop af  
b13d			endm  
# End of macro DMARK
b13d						CALLMONITOR 
b13d cd 6f ee			call debug_vector  
b140				endm  
# End of macro CALLMONITOR
b140					endif 
b140			 
b140 2a e6 e5				ld hl,(os_current_i) 
b143 cd 62 9a				call forth_push_numhl 
b146			 
b146					NEXTW 
b146 c3 0f 9e			jp macro_next 
b149				endm 
# End of macro NEXTW
b149			.DLOOP: 
b149				CWHEAD .REPEAT 75 "-LOOP" 5 WORD_FLAG_CODE 
b149 5f				db WORD_SYS_CORE+75             
b14a 2a b2			dw .REPEAT            
b14c 06				db 5 + 1 
b14d .. 00			db "-LOOP",0              
b153				endm 
# End of macro CWHEAD
b153			; | -LOOP ( -- ) Decrement and test loop counter  | DONE 
b153				; pop tos as current loop count to hl 
b153					if DEBUG_FORTH_WORDS_KEY 
b153						DMARK "-LP" 
b153 f5				push af  
b154 3a 68 b1			ld a, (.dmark)  
b157 32 6b ee			ld (debug_mark),a  
b15a 3a 69 b1			ld a, (.dmark+1)  
b15d 32 6c ee			ld (debug_mark+1),a  
b160 3a 6a b1			ld a, (.dmark+2)  
b163 32 6d ee			ld (debug_mark+2),a  
b166 18 03			jr .pastdmark  
b168 ..			.dmark: db "-LP"  
b16b f1			.pastdmark: pop af  
b16c			endm  
# End of macro DMARK
b16c						CALLMONITOR 
b16c cd 6f ee			call debug_vector  
b16f				endm  
# End of macro CALLMONITOR
b16f					endif 
b16f			 
b16f				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
b16f			 
b16f				FORTH_LOOP_TOS 
b16f cd bd 9c			call macro_forth_loop_tos 
b172				endm 
# End of macro FORTH_LOOP_TOS
b172 e5				push hl 
b173			 
b173					if DEBUG_FORTH_WORDS 
b173						DMARK "-LP" 
b173 f5				push af  
b174 3a 88 b1			ld a, (.dmark)  
b177 32 6b ee			ld (debug_mark),a  
b17a 3a 89 b1			ld a, (.dmark+1)  
b17d 32 6c ee			ld (debug_mark+1),a  
b180 3a 8a b1			ld a, (.dmark+2)  
b183 32 6d ee			ld (debug_mark+2),a  
b186 18 03			jr .pastdmark  
b188 ..			.dmark: db "-LP"  
b18b f1			.pastdmark: pop af  
b18c			endm  
# End of macro DMARK
b18c						CALLMONITOR 
b18c cd 6f ee			call debug_vector  
b18f				endm  
# End of macro CALLMONITOR
b18f					endif 
b18f				; next item on the stack is the limit. get it 
b18f			 
b18f			 
b18f				FORTH_LOOP_POP 
b18f cd c7 9c			call macro_forth_loop_pop 
b192				endm 
# End of macro FORTH_LOOP_POP
b192			 
b192				FORTH_LOOP_TOS 
b192 cd bd 9c			call macro_forth_loop_tos 
b195				endm 
# End of macro FORTH_LOOP_TOS
b195			 
b195 d1				pop de		 ; de = i, hl = limit 
b196			 
b196					if DEBUG_FORTH_WORDS 
b196						DMARK "-L1" 
b196 f5				push af  
b197 3a ab b1			ld a, (.dmark)  
b19a 32 6b ee			ld (debug_mark),a  
b19d 3a ac b1			ld a, (.dmark+1)  
b1a0 32 6c ee			ld (debug_mark+1),a  
b1a3 3a ad b1			ld a, (.dmark+2)  
b1a6 32 6d ee			ld (debug_mark+2),a  
b1a9 18 03			jr .pastdmark  
b1ab ..			.dmark: db "-L1"  
b1ae f1			.pastdmark: pop af  
b1af			endm  
# End of macro DMARK
b1af						CALLMONITOR 
b1af cd 6f ee			call debug_vector  
b1b2				endm  
# End of macro CALLMONITOR
b1b2					endif 
b1b2			 
b1b2				; go back to previous word 
b1b2			 
b1b2 d5				push de    ; save I for inc later 
b1b3			 
b1b3			 
b1b3				; get limit 
b1b3				;  is I at limit? 
b1b3			 
b1b3			 
b1b3					if DEBUG_FORTH_WORDS 
b1b3						DMARK "-L1" 
b1b3 f5				push af  
b1b4 3a c8 b1			ld a, (.dmark)  
b1b7 32 6b ee			ld (debug_mark),a  
b1ba 3a c9 b1			ld a, (.dmark+1)  
b1bd 32 6c ee			ld (debug_mark+1),a  
b1c0 3a ca b1			ld a, (.dmark+2)  
b1c3 32 6d ee			ld (debug_mark+2),a  
b1c6 18 03			jr .pastdmark  
b1c8 ..			.dmark: db "-L1"  
b1cb f1			.pastdmark: pop af  
b1cc			endm  
# End of macro DMARK
b1cc						CALLMONITOR 
b1cc cd 6f ee			call debug_vector  
b1cf				endm  
# End of macro CALLMONITOR
b1cf					endif 
b1cf			 
b1cf ed 52			sbc hl, de 
b1d1			 
b1d1			 
b1d1				;  if at limit pop both limit and current off stack do NEXT and get rid of saved DO 
b1d1			 
b1d1 20 26				jr nz, .mloopnotdone 
b1d3			 
b1d3 e1				pop hl   ; get rid of saved I 
b1d4				FORTH_LOOP_POP     ; get rid of limit 
b1d4 cd c7 9c			call macro_forth_loop_pop 
b1d7				endm 
# End of macro FORTH_LOOP_POP
b1d7			 
b1d7				FORTH_RSP_POP     ; get rid of DO ptr 
b1d7 cd 2a 9a			call macro_forth_rsp_pop 
b1da				endm 
# End of macro FORTH_RSP_POP
b1da			 
b1da			if DEBUG_FORTH_WORDS 
b1da						DMARK "-L>" 
b1da f5				push af  
b1db 3a ef b1			ld a, (.dmark)  
b1de 32 6b ee			ld (debug_mark),a  
b1e1 3a f0 b1			ld a, (.dmark+1)  
b1e4 32 6c ee			ld (debug_mark+1),a  
b1e7 3a f1 b1			ld a, (.dmark+2)  
b1ea 32 6d ee			ld (debug_mark+2),a  
b1ed 18 03			jr .pastdmark  
b1ef ..			.dmark: db "-L>"  
b1f2 f1			.pastdmark: pop af  
b1f3			endm  
# End of macro DMARK
b1f3				CALLMONITOR 
b1f3 cd 6f ee			call debug_vector  
b1f6				endm  
# End of macro CALLMONITOR
b1f6			endif 
b1f6			 
b1f6					NEXTW 
b1f6 c3 0f 9e			jp macro_next 
b1f9				endm 
# End of macro NEXTW
b1f9				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
b1f9			 
b1f9			.mloopnotdone: 
b1f9			 
b1f9 e1				pop hl    ; get I 
b1fa 2b				dec hl 
b1fb			 
b1fb			   	; save new I 
b1fb			 
b1fb			 
b1fb					; set I counter 
b1fb			 
b1fb 22 e6 e5				ld (os_current_i), hl 
b1fe			 
b1fe					 
b1fe				FORTH_LOOP_NEXT 
b1fe cd 8a 9c			call macro_forth_loop_next 
b201				endm 
# End of macro FORTH_LOOP_NEXT
b201			 
b201			 
b201					if DEBUG_FORTH_WORDS 
b201 eb						ex de,hl 
b202					endif 
b202			 
b202			;	; get DO ptr 
b202			; 
b202				FORTH_RSP_TOS 
b202 cd 20 9a			call macro_forth_rsp_tos 
b205				endm 
# End of macro FORTH_RSP_TOS
b205			 
b205				;push hl 
b205			 
b205				; not going to DO any more 
b205				; get rid of the RSP pointer as DO will add it back in 
b205				;FORTH_RSP_POP 
b205				;pop hl 
b205			 
b205			 
b205 22 c2 e5			ld (os_tok_ptr), hl 
b208					if DEBUG_FORTH_WORDS 
b208						DMARK "-L<" 
b208 f5				push af  
b209 3a 1d b2			ld a, (.dmark)  
b20c 32 6b ee			ld (debug_mark),a  
b20f 3a 1e b2			ld a, (.dmark+1)  
b212 32 6c ee			ld (debug_mark+1),a  
b215 3a 1f b2			ld a, (.dmark+2)  
b218 32 6d ee			ld (debug_mark+2),a  
b21b 18 03			jr .pastdmark  
b21d ..			.dmark: db "-L<"  
b220 f1			.pastdmark: pop af  
b221			endm  
# End of macro DMARK
b221					CALLMONITOR 
b221 cd 6f ee			call debug_vector  
b224				endm  
# End of macro CALLMONITOR
b224				endif 
b224 c3 a0 9e			jp exec1 
b227			 
b227					 
b227			 
b227			 
b227			 
b227				NEXTW 
b227 c3 0f 9e			jp macro_next 
b22a				endm 
# End of macro NEXTW
b22a			 
b22a			 
b22a			 
b22a			 
b22a			.REPEAT: 
b22a				CWHEAD .UNTIL 93 "REPEAT" 5 WORD_FLAG_CODE 
b22a 71				db WORD_SYS_CORE+93             
b22b 7d b2			dw .UNTIL            
b22d 06				db 5 + 1 
b22e .. 00			db "REPEAT",0              
b235				endm 
# End of macro CWHEAD
b235			; | REPEAT ( --  ) Start REPEAT...UNTIL loop  | DONE 
b235			;  push pc to rsp stack past the REPEAT 
b235					if DEBUG_FORTH_WORDS_KEY 
b235						DMARK "REP" 
b235 f5				push af  
b236 3a 4a b2			ld a, (.dmark)  
b239 32 6b ee			ld (debug_mark),a  
b23c 3a 4b b2			ld a, (.dmark+1)  
b23f 32 6c ee			ld (debug_mark+1),a  
b242 3a 4c b2			ld a, (.dmark+2)  
b245 32 6d ee			ld (debug_mark+2),a  
b248 18 03			jr .pastdmark  
b24a ..			.dmark: db "REP"  
b24d f1			.pastdmark: pop af  
b24e			endm  
# End of macro DMARK
b24e						CALLMONITOR 
b24e cd 6f ee			call debug_vector  
b251				endm  
# End of macro CALLMONITOR
b251					endif 
b251			 
b251 2a c2 e5				ld hl, (os_tok_ptr) 
b254 23					inc hl   ; R 
b255 23					inc hl  ; E 
b256 23					inc hl   ; P 
b257 23					inc hl   ; E 
b258 23					inc hl   ; A 
b259 23					inc hl   ; T 
b25a 23					inc hl   ; zero 
b25b					FORTH_RSP_NEXT 
b25b cd 09 9a			call macro_forth_rsp_next 
b25e				endm 
# End of macro FORTH_RSP_NEXT
b25e			 
b25e			 
b25e					if DEBUG_FORTH_WORDS 
b25e						DMARK "REP" 
b25e f5				push af  
b25f 3a 73 b2			ld a, (.dmark)  
b262 32 6b ee			ld (debug_mark),a  
b265 3a 74 b2			ld a, (.dmark+1)  
b268 32 6c ee			ld (debug_mark+1),a  
b26b 3a 75 b2			ld a, (.dmark+2)  
b26e 32 6d ee			ld (debug_mark+2),a  
b271 18 03			jr .pastdmark  
b273 ..			.dmark: db "REP"  
b276 f1			.pastdmark: pop af  
b277			endm  
# End of macro DMARK
b277						;pop bc    ; TODO BUG ?????? what is this for???? 
b277						CALLMONITOR 
b277 cd 6f ee			call debug_vector  
b27a				endm  
# End of macro CALLMONITOR
b27a					endif 
b27a			 
b27a					NEXTW 
b27a c3 0f 9e			jp macro_next 
b27d				endm 
# End of macro NEXTW
b27d			;	       NEXTW 
b27d			 
b27d			.UNTIL: 
b27d				CWHEAD .ENDFLOW 94 "UNTIL" 5 WORD_FLAG_CODE 
b27d 72				db WORD_SYS_CORE+94             
b27e 14 b3			dw .ENDFLOW            
b280 06				db 5 + 1 
b281 .. 00			db "UNTIL",0              
b287				endm 
# End of macro CWHEAD
b287			; | UNTIL ( u -- ) Exit REPEAT...UNTIL loop if TOS is false  | DONE 
b287			 
b287				; pop tos as check 
b287			 
b287				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
b287			 
b287				FORTH_DSP_VALUEHL 
b287 cd 59 9c			call macro_dsp_valuehl 
b28a				endm 
# End of macro FORTH_DSP_VALUEHL
b28a			 
b28a					if DEBUG_FORTH_WORDS_KEY 
b28a						DMARK "UNT" 
b28a f5				push af  
b28b 3a 9f b2			ld a, (.dmark)  
b28e 32 6b ee			ld (debug_mark),a  
b291 3a a0 b2			ld a, (.dmark+1)  
b294 32 6c ee			ld (debug_mark+1),a  
b297 3a a1 b2			ld a, (.dmark+2)  
b29a 32 6d ee			ld (debug_mark+2),a  
b29d 18 03			jr .pastdmark  
b29f ..			.dmark: db "UNT"  
b2a2 f1			.pastdmark: pop af  
b2a3			endm  
# End of macro DMARK
b2a3						CALLMONITOR 
b2a3 cd 6f ee			call debug_vector  
b2a6				endm  
# End of macro CALLMONITOR
b2a6					endif 
b2a6			 
b2a6			;	push hl 
b2a6				FORTH_DSP_POP 
b2a6 cd 11 9d			call macro_forth_dsp_pop 
b2a9				endm 
# End of macro FORTH_DSP_POP
b2a9			 
b2a9			;	pop hl 
b2a9			 
b2a9				; test if true 
b2a9			 
b2a9 cd 04 8d			call ishlzero 
b2ac			;	ld a,l 
b2ac			;	add h 
b2ac			; 
b2ac			;	cp 0 
b2ac			 
b2ac 20 3e			jr nz, .untilnotdone 
b2ae			 
b2ae					if DEBUG_FORTH_WORDS 
b2ae						DMARK "UNf" 
b2ae f5				push af  
b2af 3a c3 b2			ld a, (.dmark)  
b2b2 32 6b ee			ld (debug_mark),a  
b2b5 3a c4 b2			ld a, (.dmark+1)  
b2b8 32 6c ee			ld (debug_mark+1),a  
b2bb 3a c5 b2			ld a, (.dmark+2)  
b2be 32 6d ee			ld (debug_mark+2),a  
b2c1 18 03			jr .pastdmark  
b2c3 ..			.dmark: db "UNf"  
b2c6 f1			.pastdmark: pop af  
b2c7			endm  
# End of macro DMARK
b2c7						CALLMONITOR 
b2c7 cd 6f ee			call debug_vector  
b2ca				endm  
# End of macro CALLMONITOR
b2ca					endif 
b2ca			 
b2ca			 
b2ca			 
b2ca				FORTH_RSP_POP     ; get rid of DO ptr 
b2ca cd 2a 9a			call macro_forth_rsp_pop 
b2cd				endm 
# End of macro FORTH_RSP_POP
b2cd			 
b2cd			if DEBUG_FORTH_WORDS 
b2cd						DMARK "UN>" 
b2cd f5				push af  
b2ce 3a e2 b2			ld a, (.dmark)  
b2d1 32 6b ee			ld (debug_mark),a  
b2d4 3a e3 b2			ld a, (.dmark+1)  
b2d7 32 6c ee			ld (debug_mark+1),a  
b2da 3a e4 b2			ld a, (.dmark+2)  
b2dd 32 6d ee			ld (debug_mark+2),a  
b2e0 18 03			jr .pastdmark  
b2e2 ..			.dmark: db "UN>"  
b2e5 f1			.pastdmark: pop af  
b2e6			endm  
# End of macro DMARK
b2e6				CALLMONITOR 
b2e6 cd 6f ee			call debug_vector  
b2e9				endm  
# End of macro CALLMONITOR
b2e9			endif 
b2e9			 
b2e9					NEXTW 
b2e9 c3 0f 9e			jp macro_next 
b2ec				endm 
# End of macro NEXTW
b2ec				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
b2ec			 
b2ec			.untilnotdone: 
b2ec			 
b2ec			 
b2ec			;	; get DO ptr 
b2ec			; 
b2ec				FORTH_RSP_TOS 
b2ec cd 20 9a			call macro_forth_rsp_tos 
b2ef				endm 
# End of macro FORTH_RSP_TOS
b2ef			 
b2ef				;push hl 
b2ef			 
b2ef				; not going to DO any more 
b2ef				; get rid of the RSP pointer as DO will add it back in 
b2ef				;FORTH_RSP_POP 
b2ef				;pop hl 
b2ef			 
b2ef			 
b2ef 22 c2 e5			ld (os_tok_ptr), hl 
b2f2					if DEBUG_FORTH_WORDS 
b2f2						DMARK "UN<" 
b2f2 f5				push af  
b2f3 3a 07 b3			ld a, (.dmark)  
b2f6 32 6b ee			ld (debug_mark),a  
b2f9 3a 08 b3			ld a, (.dmark+1)  
b2fc 32 6c ee			ld (debug_mark+1),a  
b2ff 3a 09 b3			ld a, (.dmark+2)  
b302 32 6d ee			ld (debug_mark+2),a  
b305 18 03			jr .pastdmark  
b307 ..			.dmark: db "UN<"  
b30a f1			.pastdmark: pop af  
b30b			endm  
# End of macro DMARK
b30b					CALLMONITOR 
b30b cd 6f ee			call debug_vector  
b30e				endm  
# End of macro CALLMONITOR
b30e				endif 
b30e c3 a0 9e			jp exec1 
b311			 
b311					 
b311			 
b311			 
b311					NEXTW 
b311 c3 0f 9e			jp macro_next 
b314				endm 
# End of macro NEXTW
b314			 
b314			 
b314			.ENDFLOW: 
b314			 
b314			; eof 
b314			 
# End of file forth_words_flow.asm
b314			; TODO something wrong with the first word of the next word group. no matter which group applies. On device, sc114 is fine. bad memory? 
b314			include "forth_words_logic.asm" 
b314			 
b314			; | ## Logic Words 
b314			 
b314			.NOT: 
b314				CWHEAD .IS 25 "NOT" 3 WORD_FLAG_CODE 
b314 2d				db WORD_SYS_CORE+25             
b315 5c b3			dw .IS            
b317 04				db 3 + 1 
b318 .. 00			db "NOT",0              
b31c				endm 
# End of macro CWHEAD
b31c			; | NOT ( u  -- u ) Inverse true/false on stack | DONE 
b31c					if DEBUG_FORTH_WORDS_KEY 
b31c						DMARK "NOT" 
b31c f5				push af  
b31d 3a 31 b3			ld a, (.dmark)  
b320 32 6b ee			ld (debug_mark),a  
b323 3a 32 b3			ld a, (.dmark+1)  
b326 32 6c ee			ld (debug_mark+1),a  
b329 3a 33 b3			ld a, (.dmark+2)  
b32c 32 6d ee			ld (debug_mark+2),a  
b32f 18 03			jr .pastdmark  
b331 ..			.dmark: db "NOT"  
b334 f1			.pastdmark: pop af  
b335			endm  
# End of macro DMARK
b335						CALLMONITOR 
b335 cd 6f ee			call debug_vector  
b338				endm  
# End of macro CALLMONITOR
b338					endif 
b338					FORTH_DSP 
b338 cd 1f 9c			call macro_forth_dsp 
b33b				endm 
# End of macro FORTH_DSP
b33b 7e					ld a,(hl)	; get type of value on TOS 
b33c fe 02				cp DS_TYPE_INUM  
b33e 28 03				jr z, .noti 
b340					NEXTW 
b340 c3 0f 9e			jp macro_next 
b343				endm 
# End of macro NEXTW
b343			.noti:          FORTH_DSP_VALUEHL 
b343 cd 59 9c			call macro_dsp_valuehl 
b346				endm 
# End of macro FORTH_DSP_VALUEHL
b346			;		push hl 
b346					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b346 cd 11 9d			call macro_forth_dsp_pop 
b349				endm 
# End of macro FORTH_DSP_POP
b349			;		pop hl 
b349 3e 00				ld a,0 
b34b bd					cp l 
b34c 28 04				jr z, .not2t 
b34e 2e 00				ld l, 0 
b350 18 02				jr .notip 
b352			 
b352 2e ff		.not2t:		ld l, 255 
b354			 
b354 26 00		.notip:		ld h, 0	 
b356			 
b356 cd 62 9a				call forth_push_numhl 
b359					NEXTW 
b359 c3 0f 9e			jp macro_next 
b35c				endm 
# End of macro NEXTW
b35c			 
b35c			.IS: 
b35c				CWHEAD .LZERO 25 "IS" 2 WORD_FLAG_CODE 
b35c 2d				db WORD_SYS_CORE+25             
b35d 82 b3			dw .LZERO            
b35f 03				db 2 + 1 
b360 .. 00			db "IS",0              
b363				endm 
# End of macro CWHEAD
b363			; | IS ( s1 s2  -- f ) Push true if string s1 is the same as s2 | TODO 
b363					if DEBUG_FORTH_WORDS_KEY 
b363						DMARK "IS." 
b363 f5				push af  
b364 3a 78 b3			ld a, (.dmark)  
b367 32 6b ee			ld (debug_mark),a  
b36a 3a 79 b3			ld a, (.dmark+1)  
b36d 32 6c ee			ld (debug_mark+1),a  
b370 3a 7a b3			ld a, (.dmark+2)  
b373 32 6d ee			ld (debug_mark+2),a  
b376 18 03			jr .pastdmark  
b378 ..			.dmark: db "IS."  
b37b f1			.pastdmark: pop af  
b37c			endm  
# End of macro DMARK
b37c						CALLMONITOR 
b37c cd 6f ee			call debug_vector  
b37f				endm  
# End of macro CALLMONITOR
b37f					endif 
b37f					NEXTW 
b37f c3 0f 9e			jp macro_next 
b382				endm 
# End of macro NEXTW
b382			.LZERO: 
b382				CWHEAD .TZERO 25 "0<" 2 WORD_FLAG_CODE 
b382 2d				db WORD_SYS_CORE+25             
b383 8c b3			dw .TZERO            
b385 03				db 2 + 1 
b386 .. 00			db "0<",0              
b389				endm 
# End of macro CWHEAD
b389			; | 0< ( u -- f ) Push true if u is less than o | CANT DO UNTIL FLOAT 
b389					NEXTW 
b389 c3 0f 9e			jp macro_next 
b38c				endm 
# End of macro NEXTW
b38c			.TZERO: 
b38c				CWHEAD .LESS 26 "0=" 2 WORD_FLAG_CODE 
b38c 2e				db WORD_SYS_CORE+26             
b38d d3 b3			dw .LESS            
b38f 03				db 2 + 1 
b390 .. 00			db "0=",0              
b393				endm 
# End of macro CWHEAD
b393			; | 0= ( u -- f ) Push true if u equals 0 | DONE 
b393				; TODO add floating point number detection 
b393					;v5 FORTH_DSP_VALUE 
b393					if DEBUG_FORTH_WORDS_KEY 
b393						DMARK "0=." 
b393 f5				push af  
b394 3a a8 b3			ld a, (.dmark)  
b397 32 6b ee			ld (debug_mark),a  
b39a 3a a9 b3			ld a, (.dmark+1)  
b39d 32 6c ee			ld (debug_mark+1),a  
b3a0 3a aa b3			ld a, (.dmark+2)  
b3a3 32 6d ee			ld (debug_mark+2),a  
b3a6 18 03			jr .pastdmark  
b3a8 ..			.dmark: db "0=."  
b3ab f1			.pastdmark: pop af  
b3ac			endm  
# End of macro DMARK
b3ac						CALLMONITOR 
b3ac cd 6f ee			call debug_vector  
b3af				endm  
# End of macro CALLMONITOR
b3af					endif 
b3af					FORTH_DSP 
b3af cd 1f 9c			call macro_forth_dsp 
b3b2				endm 
# End of macro FORTH_DSP
b3b2 7e					ld a,(hl)	; get type of value on TOS 
b3b3 fe 02				cp DS_TYPE_INUM  
b3b5 28 00				jr z, .tz_inum 
b3b7			 
b3b7				if FORTH_ENABLE_FLOATMATH 
b3b7					jr .tz_done 
b3b7			 
b3b7				endif 
b3b7					 
b3b7			 
b3b7			.tz_inum: 
b3b7					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b3b7 cd 59 9c			call macro_dsp_valuehl 
b3ba				endm 
# End of macro FORTH_DSP_VALUEHL
b3ba			 
b3ba			;		push hl 
b3ba			 
b3ba					; destroy value TOS 
b3ba			 
b3ba					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b3ba cd 11 9d			call macro_forth_dsp_pop 
b3bd				endm 
# End of macro FORTH_DSP_POP
b3bd			 
b3bd			;		pop hl 
b3bd			 
b3bd 3e 00				ld a,0 
b3bf			 
b3bf bd					cp l 
b3c0 20 08				jr nz, .tz_notzero 
b3c2			 
b3c2 bc					cp h 
b3c3			 
b3c3 20 05				jr nz, .tz_notzero 
b3c5			 
b3c5			 
b3c5 21 01 00				ld hl, FORTH_TRUE 
b3c8 18 03				jr .tz_done 
b3ca			 
b3ca 21 00 00		.tz_notzero:	ld hl, FORTH_FALSE 
b3cd			 
b3cd					; push value back onto stack for another op etc 
b3cd			 
b3cd			.tz_done: 
b3cd cd 62 9a				call forth_push_numhl 
b3d0			 
b3d0					NEXTW 
b3d0 c3 0f 9e			jp macro_next 
b3d3				endm 
# End of macro NEXTW
b3d3			.LESS: 
b3d3				CWHEAD .GT 27 "<" 1 WORD_FLAG_CODE 
b3d3 2f				db WORD_SYS_CORE+27             
b3d4 3c b4			dw .GT            
b3d6 02				db 1 + 1 
b3d7 .. 00			db "<",0              
b3d9				endm 
# End of macro CWHEAD
b3d9			; | < ( u1 u2 -- f ) True if u1 is less than u2 | DONE 
b3d9				; TODO add floating point number detection 
b3d9					if DEBUG_FORTH_WORDS_KEY 
b3d9						DMARK "LES" 
b3d9 f5				push af  
b3da 3a ee b3			ld a, (.dmark)  
b3dd 32 6b ee			ld (debug_mark),a  
b3e0 3a ef b3			ld a, (.dmark+1)  
b3e3 32 6c ee			ld (debug_mark+1),a  
b3e6 3a f0 b3			ld a, (.dmark+2)  
b3e9 32 6d ee			ld (debug_mark+2),a  
b3ec 18 03			jr .pastdmark  
b3ee ..			.dmark: db "LES"  
b3f1 f1			.pastdmark: pop af  
b3f2			endm  
# End of macro DMARK
b3f2						CALLMONITOR 
b3f2 cd 6f ee			call debug_vector  
b3f5				endm  
# End of macro CALLMONITOR
b3f5					endif 
b3f5					FORTH_DSP 
b3f5 cd 1f 9c			call macro_forth_dsp 
b3f8				endm 
# End of macro FORTH_DSP
b3f8					;v5 FORTH_DSP_VALUE 
b3f8 7e					ld a,(hl)	; get type of value on TOS 
b3f9 fe 02				cp DS_TYPE_INUM  
b3fb 28 00				jr z, .less_inum 
b3fd			 
b3fd				if FORTH_ENABLE_FLOATMATH 
b3fd					jr .less_done 
b3fd			 
b3fd				endif 
b3fd					 
b3fd			 
b3fd			.less_inum: 
b3fd					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b3fd cd 59 9c			call macro_dsp_valuehl 
b400				endm 
# End of macro FORTH_DSP_VALUEHL
b400			 
b400 e5					push hl  ; u2 
b401			 
b401					; destroy value TOS 
b401			 
b401					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b401 cd 11 9d			call macro_forth_dsp_pop 
b404				endm 
# End of macro FORTH_DSP_POP
b404			 
b404			 
b404					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b404 cd 59 9c			call macro_dsp_valuehl 
b407				endm 
# End of macro FORTH_DSP_VALUEHL
b407			 
b407 e5					push hl    ; u1 
b408			 
b408					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b408 cd 11 9d			call macro_forth_dsp_pop 
b40b				endm 
# End of macro FORTH_DSP_POP
b40b			 
b40b			 
b40b b7			 or a      ;clear carry flag 
b40c 01 00 00		 ld bc, FORTH_FALSE 
b40f e1			  pop hl    ; u1 
b410 d1			  pop de    ; u2 
b411 ed 52		  sbc hl,de 
b413 30 03		  jr nc,.lscont   	;	if hl >= de, carry flag will be cleared 
b415			 
b415 01 01 00		 ld bc, FORTH_TRUE 
b418			.lscont:  
b418 c5					push bc 
b419 e1					pop hl 
b41a			 
b41a					if DEBUG_FORTH_WORDS 
b41a						DMARK "LT1" 
b41a f5				push af  
b41b 3a 2f b4			ld a, (.dmark)  
b41e 32 6b ee			ld (debug_mark),a  
b421 3a 30 b4			ld a, (.dmark+1)  
b424 32 6c ee			ld (debug_mark+1),a  
b427 3a 31 b4			ld a, (.dmark+2)  
b42a 32 6d ee			ld (debug_mark+2),a  
b42d 18 03			jr .pastdmark  
b42f ..			.dmark: db "LT1"  
b432 f1			.pastdmark: pop af  
b433			endm  
# End of macro DMARK
b433						CALLMONITOR 
b433 cd 6f ee			call debug_vector  
b436				endm  
# End of macro CALLMONITOR
b436					endif 
b436 cd 62 9a				call forth_push_numhl 
b439			 
b439					NEXTW 
b439 c3 0f 9e			jp macro_next 
b43c				endm 
# End of macro NEXTW
b43c			.GT: 
b43c				CWHEAD .EQUAL 28 ">" 1 WORD_FLAG_CODE 
b43c 30				db WORD_SYS_CORE+28             
b43d a5 b4			dw .EQUAL            
b43f 02				db 1 + 1 
b440 .. 00			db ">",0              
b442				endm 
# End of macro CWHEAD
b442			; | > ( u1 u2 -- f ) True if u1 is greater than u2 | DONE 
b442				; TODO add floating point number detection 
b442					if DEBUG_FORTH_WORDS_KEY 
b442						DMARK "GRT" 
b442 f5				push af  
b443 3a 57 b4			ld a, (.dmark)  
b446 32 6b ee			ld (debug_mark),a  
b449 3a 58 b4			ld a, (.dmark+1)  
b44c 32 6c ee			ld (debug_mark+1),a  
b44f 3a 59 b4			ld a, (.dmark+2)  
b452 32 6d ee			ld (debug_mark+2),a  
b455 18 03			jr .pastdmark  
b457 ..			.dmark: db "GRT"  
b45a f1			.pastdmark: pop af  
b45b			endm  
# End of macro DMARK
b45b						CALLMONITOR 
b45b cd 6f ee			call debug_vector  
b45e				endm  
# End of macro CALLMONITOR
b45e					endif 
b45e					FORTH_DSP 
b45e cd 1f 9c			call macro_forth_dsp 
b461				endm 
# End of macro FORTH_DSP
b461					;FORTH_DSP_VALUE 
b461 7e					ld a,(hl)	; get type of value on TOS 
b462 fe 02				cp DS_TYPE_INUM  
b464 28 00				jr z, .gt_inum 
b466			 
b466				if FORTH_ENABLE_FLOATMATH 
b466					jr .gt_done 
b466			 
b466				endif 
b466					 
b466			 
b466			.gt_inum: 
b466					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b466 cd 59 9c			call macro_dsp_valuehl 
b469				endm 
# End of macro FORTH_DSP_VALUEHL
b469			 
b469 e5					push hl  ; u2 
b46a			 
b46a					; destroy value TOS 
b46a			 
b46a					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b46a cd 11 9d			call macro_forth_dsp_pop 
b46d				endm 
# End of macro FORTH_DSP_POP
b46d			 
b46d			 
b46d					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b46d cd 59 9c			call macro_dsp_valuehl 
b470				endm 
# End of macro FORTH_DSP_VALUEHL
b470			 
b470 e5					push hl    ; u1 
b471			 
b471					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b471 cd 11 9d			call macro_forth_dsp_pop 
b474				endm 
# End of macro FORTH_DSP_POP
b474			 
b474			 
b474 b7			 or a      ;clear carry flag 
b475 01 00 00		 ld bc, FORTH_FALSE 
b478 e1			  pop hl    ; u1 
b479 d1			  pop de    ; u2 
b47a ed 52		  sbc hl,de 
b47c 38 03		  jr c,.gtcont   	;	if hl >= de, carry flag will be cleared 
b47e			 
b47e 01 01 00		 ld bc, FORTH_TRUE 
b481			.gtcont:  
b481 c5					push bc 
b482 e1					pop hl 
b483			 
b483					if DEBUG_FORTH_WORDS 
b483						DMARK "GT1" 
b483 f5				push af  
b484 3a 98 b4			ld a, (.dmark)  
b487 32 6b ee			ld (debug_mark),a  
b48a 3a 99 b4			ld a, (.dmark+1)  
b48d 32 6c ee			ld (debug_mark+1),a  
b490 3a 9a b4			ld a, (.dmark+2)  
b493 32 6d ee			ld (debug_mark+2),a  
b496 18 03			jr .pastdmark  
b498 ..			.dmark: db "GT1"  
b49b f1			.pastdmark: pop af  
b49c			endm  
# End of macro DMARK
b49c						CALLMONITOR 
b49c cd 6f ee			call debug_vector  
b49f				endm  
# End of macro CALLMONITOR
b49f					endif 
b49f cd 62 9a				call forth_push_numhl 
b4a2			 
b4a2					NEXTW 
b4a2 c3 0f 9e			jp macro_next 
b4a5				endm 
# End of macro NEXTW
b4a5			.EQUAL: 
b4a5				CWHEAD .ENDLOGIC 29 "=" 1 WORD_FLAG_CODE 
b4a5 31				db WORD_SYS_CORE+29             
b4a6 10 b5			dw .ENDLOGIC            
b4a8 02				db 1 + 1 
b4a9 .. 00			db "=",0              
b4ab				endm 
# End of macro CWHEAD
b4ab			; | = ( u1 u2 -- f ) True if u1 equals u2 | DONE 
b4ab				; TODO add floating point number detection 
b4ab					if DEBUG_FORTH_WORDS_KEY 
b4ab						DMARK "EQ." 
b4ab f5				push af  
b4ac 3a c0 b4			ld a, (.dmark)  
b4af 32 6b ee			ld (debug_mark),a  
b4b2 3a c1 b4			ld a, (.dmark+1)  
b4b5 32 6c ee			ld (debug_mark+1),a  
b4b8 3a c2 b4			ld a, (.dmark+2)  
b4bb 32 6d ee			ld (debug_mark+2),a  
b4be 18 03			jr .pastdmark  
b4c0 ..			.dmark: db "EQ."  
b4c3 f1			.pastdmark: pop af  
b4c4			endm  
# End of macro DMARK
b4c4						CALLMONITOR 
b4c4 cd 6f ee			call debug_vector  
b4c7				endm  
# End of macro CALLMONITOR
b4c7					endif 
b4c7					FORTH_DSP 
b4c7 cd 1f 9c			call macro_forth_dsp 
b4ca				endm 
# End of macro FORTH_DSP
b4ca					;v5 FORTH_DSP_VALUE 
b4ca 7e					ld a,(hl)	; get type of value on TOS 
b4cb fe 02				cp DS_TYPE_INUM  
b4cd 28 00				jr z, .eq_inum 
b4cf			 
b4cf				if FORTH_ENABLE_FLOATMATH 
b4cf					jr .eq_done 
b4cf			 
b4cf				endif 
b4cf					 
b4cf			 
b4cf			.eq_inum: 
b4cf					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b4cf cd 59 9c			call macro_dsp_valuehl 
b4d2				endm 
# End of macro FORTH_DSP_VALUEHL
b4d2			 
b4d2 e5					push hl 
b4d3			 
b4d3					; destroy value TOS 
b4d3			 
b4d3					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b4d3 cd 11 9d			call macro_forth_dsp_pop 
b4d6				endm 
# End of macro FORTH_DSP_POP
b4d6			 
b4d6			 
b4d6					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b4d6 cd 59 9c			call macro_dsp_valuehl 
b4d9				endm 
# End of macro FORTH_DSP_VALUEHL
b4d9			 
b4d9					; one value on hl get other one back 
b4d9			 
b4d9 e5					push hl 
b4da			 
b4da					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b4da cd 11 9d			call macro_forth_dsp_pop 
b4dd				endm 
# End of macro FORTH_DSP_POP
b4dd			 
b4dd 0e 00				ld c, FORTH_FALSE 
b4df			 
b4df e1					pop hl 
b4e0 d1					pop de 
b4e1			 
b4e1 7b					ld a, e 
b4e2 bd					cp l 
b4e3			 
b4e3 20 06				jr nz, .eq_done 
b4e5			 
b4e5 7a					ld a, d 
b4e6 bc					cp h 
b4e7			 
b4e7 20 02				jr nz, .eq_done 
b4e9			 
b4e9 0e 01				ld c, FORTH_TRUE 
b4eb					 
b4eb			 
b4eb			 
b4eb			.eq_done: 
b4eb			 
b4eb					; TODO push value back onto stack for another op etc 
b4eb			 
b4eb 26 00				ld h, 0 
b4ed 69					ld l, c 
b4ee					if DEBUG_FORTH_WORDS 
b4ee						DMARK "EQ1" 
b4ee f5				push af  
b4ef 3a 03 b5			ld a, (.dmark)  
b4f2 32 6b ee			ld (debug_mark),a  
b4f5 3a 04 b5			ld a, (.dmark+1)  
b4f8 32 6c ee			ld (debug_mark+1),a  
b4fb 3a 05 b5			ld a, (.dmark+2)  
b4fe 32 6d ee			ld (debug_mark+2),a  
b501 18 03			jr .pastdmark  
b503 ..			.dmark: db "EQ1"  
b506 f1			.pastdmark: pop af  
b507			endm  
# End of macro DMARK
b507						CALLMONITOR 
b507 cd 6f ee			call debug_vector  
b50a				endm  
# End of macro CALLMONITOR
b50a					endif 
b50a cd 62 9a				call forth_push_numhl 
b50d			 
b50d					NEXTW 
b50d c3 0f 9e			jp macro_next 
b510				endm 
# End of macro NEXTW
b510			 
b510			 
b510			.ENDLOGIC: 
b510			; eof 
b510			 
b510			 
# End of file forth_words_logic.asm
b510			include "forth_words_maths.asm" 
b510			 
b510			; | ## Maths Words 
b510			 
b510			.PLUS:	 
b510				CWHEAD .NEG 1 "+" 1 WORD_FLAG_CODE 
b510 15				db WORD_SYS_CORE+1             
b511 6e b5			dw .NEG            
b513 02				db 1 + 1 
b514 .. 00			db "+",0              
b516				endm 
# End of macro CWHEAD
b516			; | + ( u u -- u )    Add two numbers and push result   | INT DONE 
b516					if DEBUG_FORTH_WORDS_KEY 
b516						DMARK "PLU" 
b516 f5				push af  
b517 3a 2b b5			ld a, (.dmark)  
b51a 32 6b ee			ld (debug_mark),a  
b51d 3a 2c b5			ld a, (.dmark+1)  
b520 32 6c ee			ld (debug_mark+1),a  
b523 3a 2d b5			ld a, (.dmark+2)  
b526 32 6d ee			ld (debug_mark+2),a  
b529 18 03			jr .pastdmark  
b52b ..			.dmark: db "PLU"  
b52e f1			.pastdmark: pop af  
b52f			endm  
# End of macro DMARK
b52f						CALLMONITOR 
b52f cd 6f ee			call debug_vector  
b532				endm  
# End of macro CALLMONITOR
b532					endif 
b532					; add top two values and push back result 
b532			 
b532					;for v5 FORTH_DSP_VALUE 
b532					FORTH_DSP 
b532 cd 1f 9c			call macro_forth_dsp 
b535				endm 
# End of macro FORTH_DSP
b535 7e					ld a,(hl)	; get type of value on TOS 
b536 fe 02				cp DS_TYPE_INUM  
b538 28 03				jr z, .dot_inum 
b53a			 
b53a					NEXTW 
b53a c3 0f 9e			jp macro_next 
b53d				endm 
# End of macro NEXTW
b53d			 
b53d			; float maths 
b53d			 
b53d				if FORTH_ENABLE_FLOATMATH 
b53d						inc hl      ; now at start of numeric as string 
b53d			 
b53d					if DEBUG_FORTH_MATHS 
b53d						DMARK "ADD" 
b53d				CALLMONITOR 
b53d					endif 
b53d			 
b53d					;ld ix, hl 
b53d					call CON 
b53d			 
b53d			 
b53d					push hl 
b53d					 
b53d					 
b53d			 
b53d						FORTH_DSP_POP      ; TODO add stock underflow checks and throws  
b53d			 
b53d					; get next number 
b53d			 
b53d						FORTH_DSP_VALUE 
b53d			 
b53d						inc hl      ; now at start of numeric as string 
b53d			 
b53d					;ld ix, hl 
b53d					call CON 
b53d			 
b53d					push hl 
b53d			 
b53d			 
b53d						FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b53d			 
b53d						; TODO do add 
b53d			 
b53d						call IADD 
b53d			 
b53d						; TODO get result back as ascii 
b53d			 
b53d						; TODO push result  
b53d			 
b53d			 
b53d			 
b53d						jr .dot_done 
b53d				endif 
b53d			 
b53d			.dot_inum: 
b53d			 
b53d			 
b53d					if DEBUG_FORTH_DOT 
b53d						DMARK "+IT" 
b53d f5				push af  
b53e 3a 52 b5			ld a, (.dmark)  
b541 32 6b ee			ld (debug_mark),a  
b544 3a 53 b5			ld a, (.dmark+1)  
b547 32 6c ee			ld (debug_mark+1),a  
b54a 3a 54 b5			ld a, (.dmark+2)  
b54d 32 6d ee			ld (debug_mark+2),a  
b550 18 03			jr .pastdmark  
b552 ..			.dmark: db "+IT"  
b555 f1			.pastdmark: pop af  
b556			endm  
# End of macro DMARK
b556				CALLMONITOR 
b556 cd 6f ee			call debug_vector  
b559				endm  
# End of macro CALLMONITOR
b559					endif 
b559			 
b559					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b559 cd 59 9c			call macro_dsp_valuehl 
b55c				endm 
# End of macro FORTH_DSP_VALUEHL
b55c			 
b55c				; TODO add floating point number detection 
b55c			 
b55c e5					push hl 
b55d			 
b55d					; destroy value TOS 
b55d			 
b55d					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b55d cd 11 9d			call macro_forth_dsp_pop 
b560				endm 
# End of macro FORTH_DSP_POP
b560			 
b560			 
b560					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b560 cd 59 9c			call macro_dsp_valuehl 
b563				endm 
# End of macro FORTH_DSP_VALUEHL
b563			 
b563					; one value on hl get other one back 
b563			 
b563 d1					pop de 
b564			 
b564					; do the add 
b564			 
b564 19					add hl,de 
b565			 
b565					; save it 
b565			 
b565			;		push hl	 
b565			 
b565					; 
b565			 
b565					; destroy value TOS 
b565			 
b565					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b565 cd 11 9d			call macro_forth_dsp_pop 
b568				endm 
# End of macro FORTH_DSP_POP
b568			 
b568					; TODO push value back onto stack for another op etc 
b568			 
b568			;		pop hl 
b568			 
b568			.dot_done: 
b568 cd 62 9a				call forth_push_numhl 
b56b			 
b56b					NEXTW 
b56b c3 0f 9e			jp macro_next 
b56e				endm 
# End of macro NEXTW
b56e			.NEG: 
b56e			 
b56e				CWHEAD .DIV 3 "-" 1 WORD_FLAG_CODE 
b56e 17				db WORD_SYS_CORE+3             
b56f b1 b5			dw .DIV            
b571 02				db 1 + 1 
b572 .. 00			db "-",0              
b574				endm 
# End of macro CWHEAD
b574			; | - ( u1 u2 -- u )    Subtract u2 from u1 and push result  | INT DONE 
b574					if DEBUG_FORTH_WORDS_KEY 
b574						DMARK "SUB" 
b574 f5				push af  
b575 3a 89 b5			ld a, (.dmark)  
b578 32 6b ee			ld (debug_mark),a  
b57b 3a 8a b5			ld a, (.dmark+1)  
b57e 32 6c ee			ld (debug_mark+1),a  
b581 3a 8b b5			ld a, (.dmark+2)  
b584 32 6d ee			ld (debug_mark+2),a  
b587 18 03			jr .pastdmark  
b589 ..			.dmark: db "SUB"  
b58c f1			.pastdmark: pop af  
b58d			endm  
# End of macro DMARK
b58d						CALLMONITOR 
b58d cd 6f ee			call debug_vector  
b590				endm  
# End of macro CALLMONITOR
b590					endif 
b590			 
b590			 
b590				; TODO add floating point number detection 
b590					; v5 FORTH_DSP_VALUE 
b590					FORTH_DSP 
b590 cd 1f 9c			call macro_forth_dsp 
b593				endm 
# End of macro FORTH_DSP
b593 7e					ld a,(hl)	; get type of value on TOS 
b594 fe 02				cp DS_TYPE_INUM  
b596 28 03				jr z, .neg_inum 
b598			 
b598					NEXTW 
b598 c3 0f 9e			jp macro_next 
b59b				endm 
# End of macro NEXTW
b59b			 
b59b			; float maths 
b59b			 
b59b				if FORTH_ENABLE_FLOATMATH 
b59b					jr .neg_done 
b59b			 
b59b				endif 
b59b					 
b59b			 
b59b			.neg_inum: 
b59b					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b59b cd 59 9c			call macro_dsp_valuehl 
b59e				endm 
# End of macro FORTH_DSP_VALUEHL
b59e			 
b59e e5					push hl 
b59f			 
b59f					; destroy value TOS 
b59f			 
b59f					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b59f cd 11 9d			call macro_forth_dsp_pop 
b5a2				endm 
# End of macro FORTH_DSP_POP
b5a2			 
b5a2			 
b5a2					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b5a2 cd 59 9c			call macro_dsp_valuehl 
b5a5				endm 
# End of macro FORTH_DSP_VALUEHL
b5a5			 
b5a5					; one value on hl get other one back 
b5a5			 
b5a5 d1					pop de 
b5a6			 
b5a6					; do the sub 
b5a6			;		ex de, hl 
b5a6			 
b5a6 ed 52				sbc hl,de 
b5a8			 
b5a8					; save it 
b5a8			 
b5a8			;		push hl	 
b5a8			 
b5a8					; 
b5a8			 
b5a8					; destroy value TOS 
b5a8			 
b5a8					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b5a8 cd 11 9d			call macro_forth_dsp_pop 
b5ab				endm 
# End of macro FORTH_DSP_POP
b5ab			 
b5ab					; TODO push value back onto stack for another op etc 
b5ab			 
b5ab			;		pop hl 
b5ab			 
b5ab cd 62 9a				call forth_push_numhl 
b5ae			.neg_done: 
b5ae			 
b5ae					NEXTW 
b5ae c3 0f 9e			jp macro_next 
b5b1				endm 
# End of macro NEXTW
b5b1			.DIV: 
b5b1				CWHEAD .MUL 4 "/" 1 WORD_FLAG_CODE 
b5b1 18				db WORD_SYS_CORE+4             
b5b2 fe b5			dw .MUL            
b5b4 02				db 1 + 1 
b5b5 .. 00			db "/",0              
b5b7				endm 
# End of macro CWHEAD
b5b7			; | / ( u1 u2 -- result remainder )     Divide u1 by u2 and push result | INT DONE 
b5b7					if DEBUG_FORTH_WORDS_KEY 
b5b7						DMARK "DIV" 
b5b7 f5				push af  
b5b8 3a cc b5			ld a, (.dmark)  
b5bb 32 6b ee			ld (debug_mark),a  
b5be 3a cd b5			ld a, (.dmark+1)  
b5c1 32 6c ee			ld (debug_mark+1),a  
b5c4 3a ce b5			ld a, (.dmark+2)  
b5c7 32 6d ee			ld (debug_mark+2),a  
b5ca 18 03			jr .pastdmark  
b5cc ..			.dmark: db "DIV"  
b5cf f1			.pastdmark: pop af  
b5d0			endm  
# End of macro DMARK
b5d0						CALLMONITOR 
b5d0 cd 6f ee			call debug_vector  
b5d3				endm  
# End of macro CALLMONITOR
b5d3					endif 
b5d3				; TODO add floating point number detection 
b5d3					; v5 FORTH_DSP_VALUE 
b5d3					FORTH_DSP 
b5d3 cd 1f 9c			call macro_forth_dsp 
b5d6				endm 
# End of macro FORTH_DSP
b5d6 7e					ld a,(hl)	; get type of value on TOS 
b5d7 fe 02				cp DS_TYPE_INUM  
b5d9 28 03				jr z, .div_inum 
b5db			 
b5db				if FORTH_ENABLE_FLOATMATH 
b5db					jr .div_done 
b5db			 
b5db				endif 
b5db					NEXTW 
b5db c3 0f 9e			jp macro_next 
b5de				endm 
# End of macro NEXTW
b5de			.div_inum: 
b5de			 
b5de					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b5de cd 59 9c			call macro_dsp_valuehl 
b5e1				endm 
# End of macro FORTH_DSP_VALUEHL
b5e1			 
b5e1 e5					push hl    ; to go to bc 
b5e2			 
b5e2					; destroy value TOS 
b5e2			 
b5e2					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b5e2 cd 11 9d			call macro_forth_dsp_pop 
b5e5				endm 
# End of macro FORTH_DSP_POP
b5e5			 
b5e5			 
b5e5					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b5e5 cd 59 9c			call macro_dsp_valuehl 
b5e8				endm 
# End of macro FORTH_DSP_VALUEHL
b5e8			 
b5e8					; hl to go to de 
b5e8			 
b5e8 e5					push hl 
b5e9			 
b5e9 c1					pop bc 
b5ea d1					pop de		 
b5eb			 
b5eb			 
b5eb					if DEBUG_FORTH_MATHS 
b5eb						DMARK "DIV" 
b5eb				CALLMONITOR 
b5eb					endif 
b5eb					; one value on hl but move to a get other one back 
b5eb			 
b5eb			        
b5eb cd 38 8c			call Div16 
b5ee			 
b5ee			;	push af	 
b5ee e5				push hl 
b5ef c5				push bc 
b5f0			 
b5f0					if DEBUG_FORTH_MATHS 
b5f0						DMARK "DI1" 
b5f0				CALLMONITOR 
b5f0					endif 
b5f0			 
b5f0					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b5f0 cd 11 9d			call macro_forth_dsp_pop 
b5f3				endm 
# End of macro FORTH_DSP_POP
b5f3			 
b5f3			 
b5f3			 
b5f3 e1					pop hl    ; result 
b5f4			 
b5f4 cd 62 9a				call forth_push_numhl 
b5f7			 
b5f7 e1					pop hl    ; reminder 
b5f8			;		ld h,0 
b5f8			;		ld l,d 
b5f8			 
b5f8 cd 62 9a				call forth_push_numhl 
b5fb			.div_done: 
b5fb					NEXTW 
b5fb c3 0f 9e			jp macro_next 
b5fe				endm 
# End of macro NEXTW
b5fe			.MUL: 
b5fe				CWHEAD .MIN 5 "*" 1 WORD_FLAG_CODE 
b5fe 19				db WORD_SYS_CORE+5             
b5ff 43 b6			dw .MIN            
b601 02				db 1 + 1 
b602 .. 00			db "*",0              
b604				endm 
# End of macro CWHEAD
b604			; | * ( u1 u2 -- u )     Multiply TOS and push result | INT DONE 
b604				; TODO add floating point number detection 
b604					if DEBUG_FORTH_WORDS_KEY 
b604						DMARK "MUL" 
b604 f5				push af  
b605 3a 19 b6			ld a, (.dmark)  
b608 32 6b ee			ld (debug_mark),a  
b60b 3a 1a b6			ld a, (.dmark+1)  
b60e 32 6c ee			ld (debug_mark+1),a  
b611 3a 1b b6			ld a, (.dmark+2)  
b614 32 6d ee			ld (debug_mark+2),a  
b617 18 03			jr .pastdmark  
b619 ..			.dmark: db "MUL"  
b61c f1			.pastdmark: pop af  
b61d			endm  
# End of macro DMARK
b61d						CALLMONITOR 
b61d cd 6f ee			call debug_vector  
b620				endm  
# End of macro CALLMONITOR
b620					endif 
b620					FORTH_DSP 
b620 cd 1f 9c			call macro_forth_dsp 
b623				endm 
# End of macro FORTH_DSP
b623					; v5 FORTH_DSP_VALUE 
b623 7e					ld a,(hl)	; get type of value on TOS 
b624 fe 02				cp DS_TYPE_INUM  
b626 28 03				jr z, .mul_inum 
b628			 
b628				if FORTH_ENABLE_FLOATMATH 
b628					jr .mul_done 
b628			 
b628				endif 
b628			 
b628					NEXTW 
b628 c3 0f 9e			jp macro_next 
b62b				endm 
# End of macro NEXTW
b62b			.mul_inum:	 
b62b			 
b62b					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b62b cd 59 9c			call macro_dsp_valuehl 
b62e				endm 
# End of macro FORTH_DSP_VALUEHL
b62e			 
b62e e5					push hl 
b62f			 
b62f					; destroy value TOS 
b62f			 
b62f					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b62f cd 11 9d			call macro_forth_dsp_pop 
b632				endm 
# End of macro FORTH_DSP_POP
b632			 
b632			 
b632					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b632 cd 59 9c			call macro_dsp_valuehl 
b635				endm 
# End of macro FORTH_DSP_VALUEHL
b635			 
b635					; one value on hl but move to a get other one back 
b635			 
b635 7d					ld a, l 
b636			 
b636 d1					pop de 
b637			 
b637					; do the mull 
b637			;		ex de, hl 
b637			 
b637 cd 5e 8c				call Mult16 
b63a					; save it 
b63a			 
b63a			;		push hl	 
b63a			 
b63a					; 
b63a			 
b63a					; destroy value TOS 
b63a			 
b63a					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b63a cd 11 9d			call macro_forth_dsp_pop 
b63d				endm 
# End of macro FORTH_DSP_POP
b63d			 
b63d					; TODO push value back onto stack for another op etc 
b63d			 
b63d			;		pop hl 
b63d			 
b63d cd 62 9a				call forth_push_numhl 
b640			 
b640			.mul_done: 
b640					NEXTW 
b640 c3 0f 9e			jp macro_next 
b643				endm 
# End of macro NEXTW
b643			 
b643			 
b643			 
b643			 
b643			.MIN: 
b643				CWHEAD .MAX 53 "MIN" 3 WORD_FLAG_CODE 
b643 49				db WORD_SYS_CORE+53             
b644 c4 b6			dw .MAX            
b646 04				db 3 + 1 
b647 .. 00			db "MIN",0              
b64b				endm 
# End of macro CWHEAD
b64b			; | MIN (  u1 u2 -- u3 ) Whichever is the smallest value is pushed back onto the stack | DONE 
b64b					if DEBUG_FORTH_WORDS_KEY 
b64b						DMARK "MIN" 
b64b f5				push af  
b64c 3a 60 b6			ld a, (.dmark)  
b64f 32 6b ee			ld (debug_mark),a  
b652 3a 61 b6			ld a, (.dmark+1)  
b655 32 6c ee			ld (debug_mark+1),a  
b658 3a 62 b6			ld a, (.dmark+2)  
b65b 32 6d ee			ld (debug_mark+2),a  
b65e 18 03			jr .pastdmark  
b660 ..			.dmark: db "MIN"  
b663 f1			.pastdmark: pop af  
b664			endm  
# End of macro DMARK
b664						CALLMONITOR 
b664 cd 6f ee			call debug_vector  
b667				endm  
# End of macro CALLMONITOR
b667					endif 
b667					; get u2 
b667			 
b667					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b667 cd 59 9c			call macro_dsp_valuehl 
b66a				endm 
# End of macro FORTH_DSP_VALUEHL
b66a			 
b66a e5					push hl   ; u2 
b66b			 
b66b					; destroy value TOS 
b66b			 
b66b					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b66b cd 11 9d			call macro_forth_dsp_pop 
b66e				endm 
# End of macro FORTH_DSP_POP
b66e			 
b66e					; get u1 
b66e			 
b66e					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b66e cd 59 9c			call macro_dsp_valuehl 
b671				endm 
# End of macro FORTH_DSP_VALUEHL
b671			 
b671 e5					push hl  ; u1 
b672			 
b672					; destroy value TOS 
b672			 
b672					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b672 cd 11 9d			call macro_forth_dsp_pop 
b675				endm 
# End of macro FORTH_DSP_POP
b675			 
b675 b7			 or a      ;clear carry flag 
b676 e1			  pop hl    ; u1 
b677 d1			  pop de    ; u2 
b678 e5				push hl   ; saved in case hl is lowest 
b679 ed 52		  sbc hl,de 
b67b 30 23		  jr nc,.mincont   	;	if hl >= de, carry flag will be cleared 
b67d			 
b67d e1				pop hl 
b67e					if DEBUG_FORTH_WORDS 
b67e						DMARK "MIN" 
b67e f5				push af  
b67f 3a 93 b6			ld a, (.dmark)  
b682 32 6b ee			ld (debug_mark),a  
b685 3a 94 b6			ld a, (.dmark+1)  
b688 32 6c ee			ld (debug_mark+1),a  
b68b 3a 95 b6			ld a, (.dmark+2)  
b68e 32 6d ee			ld (debug_mark+2),a  
b691 18 03			jr .pastdmark  
b693 ..			.dmark: db "MIN"  
b696 f1			.pastdmark: pop af  
b697			endm  
# End of macro DMARK
b697						CALLMONITOR 
b697 cd 6f ee			call debug_vector  
b69a				endm  
# End of macro CALLMONITOR
b69a					endif 
b69a cd 62 9a				call forth_push_numhl 
b69d			 
b69d				       NEXTW 
b69d c3 0f 9e			jp macro_next 
b6a0				endm 
# End of macro NEXTW
b6a0			 
b6a0			.mincont:  
b6a0 c1				pop bc   ; tidy up 
b6a1 eb				ex de , hl  
b6a2					if DEBUG_FORTH_WORDS 
b6a2						DMARK "MI1" 
b6a2 f5				push af  
b6a3 3a b7 b6			ld a, (.dmark)  
b6a6 32 6b ee			ld (debug_mark),a  
b6a9 3a b8 b6			ld a, (.dmark+1)  
b6ac 32 6c ee			ld (debug_mark+1),a  
b6af 3a b9 b6			ld a, (.dmark+2)  
b6b2 32 6d ee			ld (debug_mark+2),a  
b6b5 18 03			jr .pastdmark  
b6b7 ..			.dmark: db "MI1"  
b6ba f1			.pastdmark: pop af  
b6bb			endm  
# End of macro DMARK
b6bb						CALLMONITOR 
b6bb cd 6f ee			call debug_vector  
b6be				endm  
# End of macro CALLMONITOR
b6be					endif 
b6be cd 62 9a				call forth_push_numhl 
b6c1			 
b6c1				       NEXTW 
b6c1 c3 0f 9e			jp macro_next 
b6c4				endm 
# End of macro NEXTW
b6c4			.MAX: 
b6c4				CWHEAD .RND16 54 "MAX" 3 WORD_FLAG_CODE 
b6c4 4a				db WORD_SYS_CORE+54             
b6c5 45 b7			dw .RND16            
b6c7 04				db 3 + 1 
b6c8 .. 00			db "MAX",0              
b6cc				endm 
# End of macro CWHEAD
b6cc			; | MAX (  u1 u2 -- u3 )  Whichever is the largest value is pushed back onto the stack | DONE 
b6cc					if DEBUG_FORTH_WORDS_KEY 
b6cc						DMARK "MAX" 
b6cc f5				push af  
b6cd 3a e1 b6			ld a, (.dmark)  
b6d0 32 6b ee			ld (debug_mark),a  
b6d3 3a e2 b6			ld a, (.dmark+1)  
b6d6 32 6c ee			ld (debug_mark+1),a  
b6d9 3a e3 b6			ld a, (.dmark+2)  
b6dc 32 6d ee			ld (debug_mark+2),a  
b6df 18 03			jr .pastdmark  
b6e1 ..			.dmark: db "MAX"  
b6e4 f1			.pastdmark: pop af  
b6e5			endm  
# End of macro DMARK
b6e5						CALLMONITOR 
b6e5 cd 6f ee			call debug_vector  
b6e8				endm  
# End of macro CALLMONITOR
b6e8					endif 
b6e8					; get u2 
b6e8			 
b6e8					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b6e8 cd 59 9c			call macro_dsp_valuehl 
b6eb				endm 
# End of macro FORTH_DSP_VALUEHL
b6eb			 
b6eb e5					push hl   ; u2 
b6ec			 
b6ec					; destroy value TOS 
b6ec			 
b6ec					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b6ec cd 11 9d			call macro_forth_dsp_pop 
b6ef				endm 
# End of macro FORTH_DSP_POP
b6ef			 
b6ef					; get u1 
b6ef			 
b6ef					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b6ef cd 59 9c			call macro_dsp_valuehl 
b6f2				endm 
# End of macro FORTH_DSP_VALUEHL
b6f2			 
b6f2 e5					push hl  ; u1 
b6f3			 
b6f3					; destroy value TOS 
b6f3			 
b6f3					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b6f3 cd 11 9d			call macro_forth_dsp_pop 
b6f6				endm 
# End of macro FORTH_DSP_POP
b6f6			 
b6f6 b7			 or a      ;clear carry flag 
b6f7 e1			  pop hl    ; u1 
b6f8 d1			  pop de    ; u2 
b6f9 e5				push hl   ; saved in case hl is lowest 
b6fa ed 52		  sbc hl,de 
b6fc 38 23		  jr c,.maxcont   	;	if hl <= de, carry flag will be cleared 
b6fe			 
b6fe e1				pop hl 
b6ff					if DEBUG_FORTH_WORDS 
b6ff						DMARK "MAX" 
b6ff f5				push af  
b700 3a 14 b7			ld a, (.dmark)  
b703 32 6b ee			ld (debug_mark),a  
b706 3a 15 b7			ld a, (.dmark+1)  
b709 32 6c ee			ld (debug_mark+1),a  
b70c 3a 16 b7			ld a, (.dmark+2)  
b70f 32 6d ee			ld (debug_mark+2),a  
b712 18 03			jr .pastdmark  
b714 ..			.dmark: db "MAX"  
b717 f1			.pastdmark: pop af  
b718			endm  
# End of macro DMARK
b718						CALLMONITOR 
b718 cd 6f ee			call debug_vector  
b71b				endm  
# End of macro CALLMONITOR
b71b					endif 
b71b cd 62 9a				call forth_push_numhl 
b71e			 
b71e				       NEXTW 
b71e c3 0f 9e			jp macro_next 
b721				endm 
# End of macro NEXTW
b721			 
b721			.maxcont:  
b721 c1				pop bc   ; tidy up 
b722 eb				ex de , hl  
b723					if DEBUG_FORTH_WORDS 
b723						DMARK "MA1" 
b723 f5				push af  
b724 3a 38 b7			ld a, (.dmark)  
b727 32 6b ee			ld (debug_mark),a  
b72a 3a 39 b7			ld a, (.dmark+1)  
b72d 32 6c ee			ld (debug_mark+1),a  
b730 3a 3a b7			ld a, (.dmark+2)  
b733 32 6d ee			ld (debug_mark+2),a  
b736 18 03			jr .pastdmark  
b738 ..			.dmark: db "MA1"  
b73b f1			.pastdmark: pop af  
b73c			endm  
# End of macro DMARK
b73c						CALLMONITOR 
b73c cd 6f ee			call debug_vector  
b73f				endm  
# End of macro CALLMONITOR
b73f					endif 
b73f cd 62 9a				call forth_push_numhl 
b742				       NEXTW 
b742 c3 0f 9e			jp macro_next 
b745				endm 
# End of macro NEXTW
b745			 
b745			.RND16: 
b745				CWHEAD .RND8 58 "RND16" 5 WORD_FLAG_CODE 
b745 4e				db WORD_SYS_CORE+58             
b746 74 b7			dw .RND8            
b748 06				db 5 + 1 
b749 .. 00			db "RND16",0              
b74f				endm 
# End of macro CWHEAD
b74f			; | RND16 (  -- n ) Generate a random 16bit number and push to stack | DONE 
b74f					if DEBUG_FORTH_WORDS_KEY 
b74f						DMARK "R16" 
b74f f5				push af  
b750 3a 64 b7			ld a, (.dmark)  
b753 32 6b ee			ld (debug_mark),a  
b756 3a 65 b7			ld a, (.dmark+1)  
b759 32 6c ee			ld (debug_mark+1),a  
b75c 3a 66 b7			ld a, (.dmark+2)  
b75f 32 6d ee			ld (debug_mark+2),a  
b762 18 03			jr .pastdmark  
b764 ..			.dmark: db "R16"  
b767 f1			.pastdmark: pop af  
b768			endm  
# End of macro DMARK
b768						CALLMONITOR 
b768 cd 6f ee			call debug_vector  
b76b				endm  
# End of macro CALLMONITOR
b76b					endif 
b76b cd 02 8c				call prng16  
b76e cd 62 9a				call forth_push_numhl 
b771				       NEXTW 
b771 c3 0f 9e			jp macro_next 
b774				endm 
# End of macro NEXTW
b774			.RND8: 
b774				CWHEAD .RND 76 "RND8" 4 WORD_FLAG_CODE 
b774 60				db WORD_SYS_CORE+76             
b775 a9 b7			dw .RND            
b777 05				db 4 + 1 
b778 .. 00			db "RND8",0              
b77d				endm 
# End of macro CWHEAD
b77d			; | RND8 (  -- n ) Generate a random 8bit number and push to stack | DONE 
b77d					if DEBUG_FORTH_WORDS_KEY 
b77d						DMARK "RN8" 
b77d f5				push af  
b77e 3a 92 b7			ld a, (.dmark)  
b781 32 6b ee			ld (debug_mark),a  
b784 3a 93 b7			ld a, (.dmark+1)  
b787 32 6c ee			ld (debug_mark+1),a  
b78a 3a 94 b7			ld a, (.dmark+2)  
b78d 32 6d ee			ld (debug_mark+2),a  
b790 18 03			jr .pastdmark  
b792 ..			.dmark: db "RN8"  
b795 f1			.pastdmark: pop af  
b796			endm  
# End of macro DMARK
b796						CALLMONITOR 
b796 cd 6f ee			call debug_vector  
b799				endm  
# End of macro CALLMONITOR
b799					endif 
b799 2a a9 eb				ld hl,(xrandc) 
b79c 23					inc hl 
b79d cd 1c 8c				call xrnd 
b7a0 6f					ld l,a	 
b7a1 26 00				ld h,0 
b7a3 cd 62 9a				call forth_push_numhl 
b7a6				       NEXTW 
b7a6 c3 0f 9e			jp macro_next 
b7a9				endm 
# End of macro NEXTW
b7a9			.RND: 
b7a9				CWHEAD .ENDMATHS 76 "RND" 3 WORD_FLAG_CODE 
b7a9 60				db WORD_SYS_CORE+76             
b7aa af b8			dw .ENDMATHS            
b7ac 04				db 3 + 1 
b7ad .. 00			db "RND",0              
b7b1				endm 
# End of macro CWHEAD
b7b1			; | RND ( u1 u2 -- u ) Generate a random number no lower than u1 and no higher than u2 and push to stack | DONE 
b7b1			 
b7b1					if DEBUG_FORTH_WORDS_KEY 
b7b1						DMARK "RND" 
b7b1 f5				push af  
b7b2 3a c6 b7			ld a, (.dmark)  
b7b5 32 6b ee			ld (debug_mark),a  
b7b8 3a c7 b7			ld a, (.dmark+1)  
b7bb 32 6c ee			ld (debug_mark+1),a  
b7be 3a c8 b7			ld a, (.dmark+2)  
b7c1 32 6d ee			ld (debug_mark+2),a  
b7c4 18 03			jr .pastdmark  
b7c6 ..			.dmark: db "RND"  
b7c9 f1			.pastdmark: pop af  
b7ca			endm  
# End of macro DMARK
b7ca						CALLMONITOR 
b7ca cd 6f ee			call debug_vector  
b7cd				endm  
# End of macro CALLMONITOR
b7cd					endif 
b7cd					 
b7cd					FORTH_DSP_VALUEHL    ; upper range 
b7cd cd 59 9c			call macro_dsp_valuehl 
b7d0				endm 
# End of macro FORTH_DSP_VALUEHL
b7d0			 
b7d0 22 ad eb				ld (LFSRSeed), hl	 
b7d3			 
b7d3					if DEBUG_FORTH_WORDS 
b7d3						DMARK "RN1" 
b7d3 f5				push af  
b7d4 3a e8 b7			ld a, (.dmark)  
b7d7 32 6b ee			ld (debug_mark),a  
b7da 3a e9 b7			ld a, (.dmark+1)  
b7dd 32 6c ee			ld (debug_mark+1),a  
b7e0 3a ea b7			ld a, (.dmark+2)  
b7e3 32 6d ee			ld (debug_mark+2),a  
b7e6 18 03			jr .pastdmark  
b7e8 ..			.dmark: db "RN1"  
b7eb f1			.pastdmark: pop af  
b7ec			endm  
# End of macro DMARK
b7ec						CALLMONITOR 
b7ec cd 6f ee			call debug_vector  
b7ef				endm  
# End of macro CALLMONITOR
b7ef					endif 
b7ef					FORTH_DSP_POP 
b7ef cd 11 9d			call macro_forth_dsp_pop 
b7f2				endm 
# End of macro FORTH_DSP_POP
b7f2			 
b7f2					FORTH_DSP_VALUEHL    ; low range 
b7f2 cd 59 9c			call macro_dsp_valuehl 
b7f5				endm 
# End of macro FORTH_DSP_VALUEHL
b7f5			 
b7f5					if DEBUG_FORTH_WORDS 
b7f5						DMARK "RN2" 
b7f5 f5				push af  
b7f6 3a 0a b8			ld a, (.dmark)  
b7f9 32 6b ee			ld (debug_mark),a  
b7fc 3a 0b b8			ld a, (.dmark+1)  
b7ff 32 6c ee			ld (debug_mark+1),a  
b802 3a 0c b8			ld a, (.dmark+2)  
b805 32 6d ee			ld (debug_mark+2),a  
b808 18 03			jr .pastdmark  
b80a ..			.dmark: db "RN2"  
b80d f1			.pastdmark: pop af  
b80e			endm  
# End of macro DMARK
b80e						CALLMONITOR 
b80e cd 6f ee			call debug_vector  
b811				endm  
# End of macro CALLMONITOR
b811					endif 
b811 22 af eb				ld (LFSRSeed+2), hl 
b814			 
b814					FORTH_DSP_POP 
b814 cd 11 9d			call macro_forth_dsp_pop 
b817				endm 
# End of macro FORTH_DSP_POP
b817			 
b817 e5					push hl 
b818			 
b818 e1			.inrange:	pop hl 
b819 cd 02 8c				call prng16  
b81c					if DEBUG_FORTH_WORDS 
b81c						DMARK "RN3" 
b81c f5				push af  
b81d 3a 31 b8			ld a, (.dmark)  
b820 32 6b ee			ld (debug_mark),a  
b823 3a 32 b8			ld a, (.dmark+1)  
b826 32 6c ee			ld (debug_mark+1),a  
b829 3a 33 b8			ld a, (.dmark+2)  
b82c 32 6d ee			ld (debug_mark+2),a  
b82f 18 03			jr .pastdmark  
b831 ..			.dmark: db "RN3"  
b834 f1			.pastdmark: pop af  
b835			endm  
# End of macro DMARK
b835						CALLMONITOR 
b835 cd 6f ee			call debug_vector  
b838				endm  
# End of macro CALLMONITOR
b838					endif 
b838					 
b838					; if the range is 8bit knock out the high byte 
b838			 
b838 ed 5b ad eb			ld de, (LFSRSeed)     ; check high level 
b83c			 
b83c 3e 00				ld a, 0 
b83e ba					cp d  
b83f 20 1e				jr nz, .hirange 
b841 26 00				ld h, 0   ; knock it down to 8bit 
b843			 
b843					if DEBUG_FORTH_WORDS 
b843						DMARK "RNk" 
b843 f5				push af  
b844 3a 58 b8			ld a, (.dmark)  
b847 32 6b ee			ld (debug_mark),a  
b84a 3a 59 b8			ld a, (.dmark+1)  
b84d 32 6c ee			ld (debug_mark+1),a  
b850 3a 5a b8			ld a, (.dmark+2)  
b853 32 6d ee			ld (debug_mark+2),a  
b856 18 03			jr .pastdmark  
b858 ..			.dmark: db "RNk"  
b85b f1			.pastdmark: pop af  
b85c			endm  
# End of macro DMARK
b85c						CALLMONITOR 
b85c cd 6f ee			call debug_vector  
b85f				endm  
# End of macro CALLMONITOR
b85f					endif 
b85f			.hirange:   
b85f e5					push hl  
b860 b7					or a  
b861 ed 52		                sbc hl, de 
b863			 
b863					;call cmp16 
b863			 
b863 30 b3				jr nc, .inrange      ; if hl >= de, carry flag is cleared 
b865 e1					pop hl 
b866 e5					push hl 
b867			 
b867					if DEBUG_FORTH_WORDS 
b867						DMARK "RN4" 
b867 f5				push af  
b868 3a 7c b8			ld a, (.dmark)  
b86b 32 6b ee			ld (debug_mark),a  
b86e 3a 7d b8			ld a, (.dmark+1)  
b871 32 6c ee			ld (debug_mark+1),a  
b874 3a 7e b8			ld a, (.dmark+2)  
b877 32 6d ee			ld (debug_mark+2),a  
b87a 18 03			jr .pastdmark  
b87c ..			.dmark: db "RN4"  
b87f f1			.pastdmark: pop af  
b880			endm  
# End of macro DMARK
b880						CALLMONITOR 
b880 cd 6f ee			call debug_vector  
b883				endm  
# End of macro CALLMONITOR
b883					endif 
b883 ed 5b af eb			ld de, (LFSRSeed+2)   ; check low range 
b887					;call cmp16 
b887				 
b887 b7					or a  
b888 ed 52		                sbc hl, de 
b88a 38 8c				jr c, .inrange 
b88c			 
b88c e1					pop hl 
b88d					 
b88d					if DEBUG_FORTH_WORDS 
b88d						DMARK "RNd" 
b88d f5				push af  
b88e 3a a2 b8			ld a, (.dmark)  
b891 32 6b ee			ld (debug_mark),a  
b894 3a a3 b8			ld a, (.dmark+1)  
b897 32 6c ee			ld (debug_mark+1),a  
b89a 3a a4 b8			ld a, (.dmark+2)  
b89d 32 6d ee			ld (debug_mark+2),a  
b8a0 18 03			jr .pastdmark  
b8a2 ..			.dmark: db "RNd"  
b8a5 f1			.pastdmark: pop af  
b8a6			endm  
# End of macro DMARK
b8a6						CALLMONITOR 
b8a6 cd 6f ee			call debug_vector  
b8a9				endm  
# End of macro CALLMONITOR
b8a9					endif 
b8a9			 
b8a9			 
b8a9 cd 62 9a				call forth_push_numhl 
b8ac				       NEXTW 
b8ac c3 0f 9e			jp macro_next 
b8af				endm 
# End of macro NEXTW
b8af			 
b8af			.ENDMATHS: 
b8af			 
b8af			; eof 
b8af			 
# End of file forth_words_maths.asm
b8af			include "forth_words_display.asm" 
b8af			 
b8af			; | ## Display Words 
b8af			 
b8af			.ACT: 
b8af			 
b8af				CWHEAD .INFO 78 "ACTIVE" 6 WORD_FLAG_CODE 
b8af 62				db WORD_SYS_CORE+78             
b8b0 fb b8			dw .INFO            
b8b2 07				db 6 + 1 
b8b3 .. 00			db "ACTIVE",0              
b8ba				endm 
# End of macro CWHEAD
b8ba			; | ACTIVE ( -- s ) Push the next char for an activity indicator to TOS | DONE 
b8ba			;  
b8ba			; | | To display a pulsing activity indicator in a processing loop do this... 
b8ba			; | | e.g. $ff $00 do active . ..... Your code ..... loop 
b8ba			 
b8ba					if DEBUG_FORTH_WORDS_KEY 
b8ba						DMARK "ACT" 
b8ba f5				push af  
b8bb 3a cf b8			ld a, (.dmark)  
b8be 32 6b ee			ld (debug_mark),a  
b8c1 3a d0 b8			ld a, (.dmark+1)  
b8c4 32 6c ee			ld (debug_mark+1),a  
b8c7 3a d1 b8			ld a, (.dmark+2)  
b8ca 32 6d ee			ld (debug_mark+2),a  
b8cd 18 03			jr .pastdmark  
b8cf ..			.dmark: db "ACT"  
b8d2 f1			.pastdmark: pop af  
b8d3			endm  
# End of macro DMARK
b8d3						CALLMONITOR 
b8d3 cd 6f ee			call debug_vector  
b8d6				endm  
# End of macro CALLMONITOR
b8d6					endif 
b8d6 cd 05 8a				call active 
b8d9					if DEBUG_FORTH_WORDS 
b8d9						DMARK "ACp" 
b8d9 f5				push af  
b8da 3a ee b8			ld a, (.dmark)  
b8dd 32 6b ee			ld (debug_mark),a  
b8e0 3a ef b8			ld a, (.dmark+1)  
b8e3 32 6c ee			ld (debug_mark+1),a  
b8e6 3a f0 b8			ld a, (.dmark+2)  
b8e9 32 6d ee			ld (debug_mark+2),a  
b8ec 18 03			jr .pastdmark  
b8ee ..			.dmark: db "ACp"  
b8f1 f1			.pastdmark: pop af  
b8f2			endm  
# End of macro DMARK
b8f2						CALLMONITOR 
b8f2 cd 6f ee			call debug_vector  
b8f5				endm  
# End of macro CALLMONITOR
b8f5					endif 
b8f5 cd d0 9a				call forth_push_str 
b8f8			 
b8f8					NEXTW 
b8f8 c3 0f 9e			jp macro_next 
b8fb				endm 
# End of macro NEXTW
b8fb			.INFO: 
b8fb			 
b8fb				CWHEAD .ATP 78 "INFO" 4 WORD_FLAG_CODE 
b8fb 62				db WORD_SYS_CORE+78             
b8fc 18 b9			dw .ATP            
b8fe 05				db 4 + 1 
b8ff .. 00			db "INFO",0              
b904				endm 
# End of macro CWHEAD
b904			; | INFO ( u1 u2 -- )  Use the top two strings on stack to fill in an info window over two lines. Causes a wait for key press to continue. | DONE 
b904					FORTH_DSP_VALUEHL 
b904 cd 59 9c			call macro_dsp_valuehl 
b907				endm 
# End of macro FORTH_DSP_VALUEHL
b907			 
b907					FORTH_DSP_POP 
b907 cd 11 9d			call macro_forth_dsp_pop 
b90a				endm 
# End of macro FORTH_DSP_POP
b90a			 
b90a e5					push hl 
b90b			 
b90b					FORTH_DSP_VALUEHL 
b90b cd 59 9c			call macro_dsp_valuehl 
b90e				endm 
# End of macro FORTH_DSP_VALUEHL
b90e			 
b90e					FORTH_DSP_POP 
b90e cd 11 9d			call macro_forth_dsp_pop 
b911				endm 
# End of macro FORTH_DSP_POP
b911			 
b911 d1					pop de 
b912			 
b912 cd 3f 8a				call info_panel 
b915			 
b915			 
b915					NEXTW 
b915 c3 0f 9e			jp macro_next 
b918				endm 
# End of macro NEXTW
b918			.ATP: 
b918				CWHEAD .FB 78 "AT?" 3 WORD_FLAG_CODE 
b918 62				db WORD_SYS_CORE+78             
b919 8f b9			dw .FB            
b91b 04				db 3 + 1 
b91c .. 00			db "AT?",0              
b920				endm 
# End of macro CWHEAD
b920			; | AT? ( -- c r )  Push to stack the current position of the next print | TO TEST 
b920					if DEBUG_FORTH_WORDS_KEY 
b920						DMARK "AT?" 
b920 f5				push af  
b921 3a 35 b9			ld a, (.dmark)  
b924 32 6b ee			ld (debug_mark),a  
b927 3a 36 b9			ld a, (.dmark+1)  
b92a 32 6c ee			ld (debug_mark+1),a  
b92d 3a 37 b9			ld a, (.dmark+2)  
b930 32 6d ee			ld (debug_mark+2),a  
b933 18 03			jr .pastdmark  
b935 ..			.dmark: db "AT?"  
b938 f1			.pastdmark: pop af  
b939			endm  
# End of macro DMARK
b939						CALLMONITOR 
b939 cd 6f ee			call debug_vector  
b93c				endm  
# End of macro CALLMONITOR
b93c					endif 
b93c 3a 5e ea				ld a, (f_cursor_ptr) 
b93f			 
b93f			if DEBUG_FORTH_WORDS 
b93f				DMARK "AT?" 
b93f f5				push af  
b940 3a 54 b9			ld a, (.dmark)  
b943 32 6b ee			ld (debug_mark),a  
b946 3a 55 b9			ld a, (.dmark+1)  
b949 32 6c ee			ld (debug_mark+1),a  
b94c 3a 56 b9			ld a, (.dmark+2)  
b94f 32 6d ee			ld (debug_mark+2),a  
b952 18 03			jr .pastdmark  
b954 ..			.dmark: db "AT?"  
b957 f1			.pastdmark: pop af  
b958			endm  
# End of macro DMARK
b958				CALLMONITOR 
b958 cd 6f ee			call debug_vector  
b95b				endm  
# End of macro CALLMONITOR
b95b			endif	 
b95b					; count the number of rows 
b95b			 
b95b 06 00				ld b, 0 
b95d 4f			.atpr:		ld c, a    ; save in case we go below zero 
b95e d6 28				sub display_cols 
b960 f2 66 b9				jp p, .atprunder 
b963 04					inc b 
b964 18 f7				jr .atpr 
b966			.atprunder:	 
b966			if DEBUG_FORTH_WORDS 
b966				DMARK "A?2" 
b966 f5				push af  
b967 3a 7b b9			ld a, (.dmark)  
b96a 32 6b ee			ld (debug_mark),a  
b96d 3a 7c b9			ld a, (.dmark+1)  
b970 32 6c ee			ld (debug_mark+1),a  
b973 3a 7d b9			ld a, (.dmark+2)  
b976 32 6d ee			ld (debug_mark+2),a  
b979 18 03			jr .pastdmark  
b97b ..			.dmark: db "A?2"  
b97e f1			.pastdmark: pop af  
b97f			endm  
# End of macro DMARK
b97f				CALLMONITOR 
b97f cd 6f ee			call debug_vector  
b982				endm  
# End of macro CALLMONITOR
b982			endif	 
b982 26 00				ld h, 0 
b984 69					ld l, c 
b985 cd 62 9a				call forth_push_numhl 
b988 68					ld l, b  
b989 cd 62 9a				call forth_push_numhl 
b98c			 
b98c			 
b98c				NEXTW 
b98c c3 0f 9e			jp macro_next 
b98f				endm 
# End of macro NEXTW
b98f			 
b98f			.FB: 
b98f				CWHEAD .EMIT 7 "FB" 2 WORD_FLAG_CODE 
b98f 1b				db WORD_SYS_CORE+7             
b990 dd b9			dw .EMIT            
b992 03				db 2 + 1 
b993 .. 00			db "FB",0              
b996				endm 
# End of macro CWHEAD
b996			; | FB ( u -- ) Select frame buffer ID u (1-3)  |  DONE 
b996			; | | Default frame buffer is 1. System uses 0 which can't be selected for system messages etc. 
b996			; | | Selecting the frame buffer wont display unless automatic display is setup (default). 
b996			; | | If automatic display is off then updates will not be shown until DRAW is used. 
b996					if DEBUG_FORTH_WORDS_KEY 
b996						DMARK "FB." 
b996 f5				push af  
b997 3a ab b9			ld a, (.dmark)  
b99a 32 6b ee			ld (debug_mark),a  
b99d 3a ac b9			ld a, (.dmark+1)  
b9a0 32 6c ee			ld (debug_mark+1),a  
b9a3 3a ad b9			ld a, (.dmark+2)  
b9a6 32 6d ee			ld (debug_mark+2),a  
b9a9 18 03			jr .pastdmark  
b9ab ..			.dmark: db "FB."  
b9ae f1			.pastdmark: pop af  
b9af			endm  
# End of macro DMARK
b9af						CALLMONITOR 
b9af cd 6f ee			call debug_vector  
b9b2				endm  
# End of macro CALLMONITOR
b9b2					endif 
b9b2			 
b9b2					FORTH_DSP_VALUEHL 
b9b2 cd 59 9c			call macro_dsp_valuehl 
b9b5				endm 
# End of macro FORTH_DSP_VALUEHL
b9b5			 
b9b5 7d					ld a, l 
b9b6 fe 01				cp 1 
b9b8 20 05				jr nz, .fbn1 
b9ba 21 10 ed				ld hl, display_fb1 
b9bd 18 15				jr .fbset 
b9bf fe 02		.fbn1:		cp 2 
b9c1 20 05				jr nz, .fbn2 
b9c3 21 ce eb				ld hl, display_fb2 
b9c6 18 0c				jr .fbset 
b9c8 fe 03		.fbn2:		cp 3 
b9ca 20 05				jr nz, .fbn3 
b9cc 21 6f ec				ld hl, display_fb3 
b9cf 18 03				jr .fbset 
b9d1			.fbn3:		 ; if invalid number select first 
b9d1 21 10 ed				ld hl, display_fb1 
b9d4 22 cc eb		.fbset:		ld (display_fb_active), hl 
b9d7			 
b9d7					FORTH_DSP_POP 
b9d7 cd 11 9d			call macro_forth_dsp_pop 
b9da				endm 
# End of macro FORTH_DSP_POP
b9da			 
b9da					NEXTW 
b9da c3 0f 9e			jp macro_next 
b9dd				endm 
# End of macro NEXTW
b9dd			 
b9dd			 
b9dd			.EMIT: 
b9dd				CWHEAD .DOTH 7 "EMIT" 4 WORD_FLAG_CODE 
b9dd 1b				db WORD_SYS_CORE+7             
b9de 2e ba			dw .DOTH            
b9e0 05				db 4 + 1 
b9e1 .. 00			db "EMIT",0              
b9e6				endm 
# End of macro CWHEAD
b9e6			; |  EMIT ( u -- ) Display ascii character  TOS   | DONE 
b9e6					; get value off TOS and display it 
b9e6			 
b9e6					if DEBUG_FORTH_WORDS_KEY 
b9e6						DMARK "EMT" 
b9e6 f5				push af  
b9e7 3a fb b9			ld a, (.dmark)  
b9ea 32 6b ee			ld (debug_mark),a  
b9ed 3a fc b9			ld a, (.dmark+1)  
b9f0 32 6c ee			ld (debug_mark+1),a  
b9f3 3a fd b9			ld a, (.dmark+2)  
b9f6 32 6d ee			ld (debug_mark+2),a  
b9f9 18 03			jr .pastdmark  
b9fb ..			.dmark: db "EMT"  
b9fe f1			.pastdmark: pop af  
b9ff			endm  
# End of macro DMARK
b9ff						CALLMONITOR 
b9ff cd 6f ee			call debug_vector  
ba02				endm  
# End of macro CALLMONITOR
ba02					endif 
ba02			 
ba02					FORTH_DSP_VALUEHL 
ba02 cd 59 9c			call macro_dsp_valuehl 
ba05				endm 
# End of macro FORTH_DSP_VALUEHL
ba05			 
ba05 7d					ld a,l 
ba06			 
ba06					; TODO write to display 
ba06			 
ba06 32 bf e4				ld (os_input), a 
ba09 3e 00				ld a, 0 
ba0b 32 c0 e4				ld (os_input+1), a 
ba0e					 
ba0e 3a 5e ea				ld a, (f_cursor_ptr) 
ba11 11 bf e4				ld de, os_input 
ba14 cd c1 8a				call str_at_display 
ba17			 
ba17			 
ba17 3a 3c ea				ld a,(cli_autodisplay) 
ba1a fe 00				cp 0 
ba1c 28 03				jr z, .enoupdate 
ba1e cd d1 8a						call update_display 
ba21					.enoupdate: 
ba21			 
ba21 3a 5e ea				ld a, (f_cursor_ptr) 
ba24 3c					inc a 
ba25 32 5e ea				ld (f_cursor_ptr), a   ; save new pos 
ba28			 
ba28			 
ba28					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
ba28 cd 11 9d			call macro_forth_dsp_pop 
ba2b				endm 
# End of macro FORTH_DSP_POP
ba2b			  
ba2b			 
ba2b					NEXTW 
ba2b c3 0f 9e			jp macro_next 
ba2e				endm 
# End of macro NEXTW
ba2e			.DOTH: 
ba2e				CWHEAD .DOTF 8 ".-" 2 WORD_FLAG_CODE 
ba2e 1c				db WORD_SYS_CORE+8             
ba2f 5e ba			dw .DOTF            
ba31 03				db 2 + 1 
ba32 .. 00			db ".-",0              
ba35				endm 
# End of macro CWHEAD
ba35			        ; | .- ( u -- ) Display TOS replacing any dashes with spaces. Means you dont need to wrap strings in double quotes!   | DONE 
ba35					; get value off TOS and display it 
ba35					if DEBUG_FORTH_WORDS_KEY 
ba35						DMARK "DTD" 
ba35 f5				push af  
ba36 3a 4a ba			ld a, (.dmark)  
ba39 32 6b ee			ld (debug_mark),a  
ba3c 3a 4b ba			ld a, (.dmark+1)  
ba3f 32 6c ee			ld (debug_mark+1),a  
ba42 3a 4c ba			ld a, (.dmark+2)  
ba45 32 6d ee			ld (debug_mark+2),a  
ba48 18 03			jr .pastdmark  
ba4a ..			.dmark: db "DTD"  
ba4d f1			.pastdmark: pop af  
ba4e			endm  
# End of macro DMARK
ba4e						CALLMONITOR 
ba4e cd 6f ee			call debug_vector  
ba51				endm  
# End of macro CALLMONITOR
ba51					endif 
ba51 0e 01			ld c, 1	  ; flag for removal of '-' enabled 
ba53 3e 00			ld a, 0 
ba55 32 3d ea			ld (cli_mvdot), a 
ba58 c3 b5 ba			jp .dotgo 
ba5b				NEXTW 
ba5b c3 0f 9e			jp macro_next 
ba5e				endm 
# End of macro NEXTW
ba5e			.DOTF: 
ba5e				CWHEAD .DOT 8 ".>" 2 WORD_FLAG_CODE 
ba5e 1c				db WORD_SYS_CORE+8             
ba5f 8c ba			dw .DOT            
ba61 03				db 2 + 1 
ba62 .. 00			db ".>",0              
ba65				endm 
# End of macro CWHEAD
ba65			        ; | .> ( u -- ) Display TOS and move the next display point with display  | DONE 
ba65					; get value off TOS and display it 
ba65			        ; TODO BUG adds extra spaces 
ba65			        ; TODO BUG handle numerics? 
ba65					if DEBUG_FORTH_WORDS_KEY 
ba65						DMARK "DTC" 
ba65 f5				push af  
ba66 3a 7a ba			ld a, (.dmark)  
ba69 32 6b ee			ld (debug_mark),a  
ba6c 3a 7b ba			ld a, (.dmark+1)  
ba6f 32 6c ee			ld (debug_mark+1),a  
ba72 3a 7c ba			ld a, (.dmark+2)  
ba75 32 6d ee			ld (debug_mark+2),a  
ba78 18 03			jr .pastdmark  
ba7a ..			.dmark: db "DTC"  
ba7d f1			.pastdmark: pop af  
ba7e			endm  
# End of macro DMARK
ba7e						CALLMONITOR 
ba7e cd 6f ee			call debug_vector  
ba81				endm  
# End of macro CALLMONITOR
ba81					endif 
ba81 3e 01			ld a, 1 
ba83 32 3d ea			ld (cli_mvdot), a 
ba86 c3 b5 ba			jp .dotgo 
ba89				NEXTW 
ba89 c3 0f 9e			jp macro_next 
ba8c				endm 
# End of macro NEXTW
ba8c			 
ba8c			.DOT: 
ba8c				CWHEAD .CLS 8 "." 1 WORD_FLAG_CODE 
ba8c 1c				db WORD_SYS_CORE+8             
ba8d 68 bc			dw .CLS            
ba8f 02				db 1 + 1 
ba90 .. 00			db ".",0              
ba92				endm 
# End of macro CWHEAD
ba92			        ; | . ( u -- ) Display TOS. Does not move next print position. Use .> if you want that. | DONE 
ba92					; get value off TOS and display it 
ba92			 
ba92					if DEBUG_FORTH_WORDS_KEY 
ba92						DMARK "DOT" 
ba92 f5				push af  
ba93 3a a7 ba			ld a, (.dmark)  
ba96 32 6b ee			ld (debug_mark),a  
ba99 3a a8 ba			ld a, (.dmark+1)  
ba9c 32 6c ee			ld (debug_mark+1),a  
ba9f 3a a9 ba			ld a, (.dmark+2)  
baa2 32 6d ee			ld (debug_mark+2),a  
baa5 18 03			jr .pastdmark  
baa7 ..			.dmark: db "DOT"  
baaa f1			.pastdmark: pop af  
baab			endm  
# End of macro DMARK
baab						CALLMONITOR 
baab cd 6f ee			call debug_vector  
baae				endm  
# End of macro CALLMONITOR
baae					endif 
baae 3e 00			ld a, 0 
bab0 32 3d ea			ld (cli_mvdot), a 
bab3 0e 00		ld c, 0	  ; flag for removal of '-' disabled 
bab5				 
bab5			 
bab5			.dotgo: 
bab5			 
bab5			; move up type to on stack for parserv5 
bab5					FORTH_DSP 
bab5 cd 1f 9c			call macro_forth_dsp 
bab8				endm 
# End of macro FORTH_DSP
bab8				;FORTH_DSP_VALUE  
bab8			 
bab8			if DEBUG_FORTH_DOT 
bab8				DMARK "DOT" 
bab8 f5				push af  
bab9 3a cd ba			ld a, (.dmark)  
babc 32 6b ee			ld (debug_mark),a  
babf 3a ce ba			ld a, (.dmark+1)  
bac2 32 6c ee			ld (debug_mark+1),a  
bac5 3a cf ba			ld a, (.dmark+2)  
bac8 32 6d ee			ld (debug_mark+2),a  
bacb 18 03			jr .pastdmark  
bacd ..			.dmark: db "DOT"  
bad0 f1			.pastdmark: pop af  
bad1			endm  
# End of macro DMARK
bad1				CALLMONITOR 
bad1 cd 6f ee			call debug_vector  
bad4				endm  
# End of macro CALLMONITOR
bad4			endif	 
bad4			;		.print: 
bad4			 
bad4 7e				ld a,(hl)  ; work out what type of value is on the TOS 
bad5 23				inc hl   ; position to the actual value 
bad6 fe 01			cp DS_TYPE_STR 
bad8 20 06			jr nz, .dotnum1  
bada			 
bada			; display string 
bada				FORTH_DSP_VALUE  
bada cd 42 9c			call macro_forth_dsp_value 
badd				endm 
# End of macro FORTH_DSP_VALUE
badd eb				ex de,hl 
bade 18 49			jr .dotwrite 
bae0			 
bae0			.dotnum1: 
bae0 fe 02			cp DS_TYPE_INUM 
bae2 20 44			jr nz, .dotflot 
bae4			 
bae4			 
bae4			; display number 
bae4			 
bae4			;	push hl 
bae4			;	call clear_display 
bae4			;	pop hl 
bae4			 
bae4 5e				ld e, (hl) 
bae5 23				inc hl 
bae6 56				ld d, (hl) 
bae7 21 c1 e2			ld hl, scratch 
baea			if DEBUG_FORTH_DOT 
baea				DMARK "DT1" 
baea f5				push af  
baeb 3a ff ba			ld a, (.dmark)  
baee 32 6b ee			ld (debug_mark),a  
baf1 3a 00 bb			ld a, (.dmark+1)  
baf4 32 6c ee			ld (debug_mark+1),a  
baf7 3a 01 bb			ld a, (.dmark+2)  
bafa 32 6d ee			ld (debug_mark+2),a  
bafd 18 03			jr .pastdmark  
baff ..			.dmark: db "DT1"  
bb02 f1			.pastdmark: pop af  
bb03			endm  
# End of macro DMARK
bb03				CALLMONITOR 
bb03 cd 6f ee			call debug_vector  
bb06				endm  
# End of macro CALLMONITOR
bb06			endif	 
bb06			 
bb06 cd f0 8f			call uitoa_16 
bb09 eb				ex de,hl 
bb0a			 
bb0a			if DEBUG_FORTH_DOT 
bb0a				DMARK "DT2" 
bb0a f5				push af  
bb0b 3a 1f bb			ld a, (.dmark)  
bb0e 32 6b ee			ld (debug_mark),a  
bb11 3a 20 bb			ld a, (.dmark+1)  
bb14 32 6c ee			ld (debug_mark+1),a  
bb17 3a 21 bb			ld a, (.dmark+2)  
bb1a 32 6d ee			ld (debug_mark+2),a  
bb1d 18 03			jr .pastdmark  
bb1f ..			.dmark: db "DT2"  
bb22 f1			.pastdmark: pop af  
bb23			endm  
# End of macro DMARK
bb23				CALLMONITOR 
bb23 cd 6f ee			call debug_vector  
bb26				endm  
# End of macro CALLMONITOR
bb26			endif	 
bb26			 
bb26			;	ld de, os_word_scratch 
bb26 18 01			jr .dotwrite 
bb28			 
bb28 00			.dotflot:   nop 
bb29			; TODO print floating point number 
bb29			 
bb29			.dotwrite:		 
bb29			 
bb29					; if c is set then set all '-' to spaces 
bb29					; need to also take into account .>  
bb29			 
bb29 3e 01				ld a, 1 
bb2b b9					cp c 
bb2c 20 67				jr nz, .nodashswap 
bb2e			 
bb2e					; DE has the string to write, working with HL 
bb2e			 
bb2e 06 ff				ld b, 255 
bb30 d5					push de 
bb31 e1					pop hl 
bb32			 
bb32			if DEBUG_FORTH_DOT 
bb32				DMARK "DT-" 
bb32 f5				push af  
bb33 3a 47 bb			ld a, (.dmark)  
bb36 32 6b ee			ld (debug_mark),a  
bb39 3a 48 bb			ld a, (.dmark+1)  
bb3c 32 6c ee			ld (debug_mark+1),a  
bb3f 3a 49 bb			ld a, (.dmark+2)  
bb42 32 6d ee			ld (debug_mark+2),a  
bb45 18 03			jr .pastdmark  
bb47 ..			.dmark: db "DT-"  
bb4a f1			.pastdmark: pop af  
bb4b			endm  
# End of macro DMARK
bb4b				CALLMONITOR 
bb4b cd 6f ee			call debug_vector  
bb4e				endm  
# End of macro CALLMONITOR
bb4e			endif	 
bb4e 7e			.dashscan:	ld a, (hl) 
bb4f fe 00				cp 0 
bb51 28 42				jr z, .nodashswap 
bb53 fe 2d				cp '-' 
bb55 20 03				jr nz, .dashskip 
bb57 3e 20				ld a, ' ' 
bb59 77					ld (hl), a 
bb5a 23			.dashskip:	inc hl 
bb5b			if DEBUG_FORTH_DOT 
bb5b				DMARK "D-2" 
bb5b f5				push af  
bb5c 3a 70 bb			ld a, (.dmark)  
bb5f 32 6b ee			ld (debug_mark),a  
bb62 3a 71 bb			ld a, (.dmark+1)  
bb65 32 6c ee			ld (debug_mark+1),a  
bb68 3a 72 bb			ld a, (.dmark+2)  
bb6b 32 6d ee			ld (debug_mark+2),a  
bb6e 18 03			jr .pastdmark  
bb70 ..			.dmark: db "D-2"  
bb73 f1			.pastdmark: pop af  
bb74			endm  
# End of macro DMARK
bb74				CALLMONITOR 
bb74 cd 6f ee			call debug_vector  
bb77				endm  
# End of macro CALLMONITOR
bb77			endif	 
bb77 10 d5				djnz .dashscan 
bb79			 
bb79			if DEBUG_FORTH_DOT 
bb79				DMARK "D-1" 
bb79 f5				push af  
bb7a 3a 8e bb			ld a, (.dmark)  
bb7d 32 6b ee			ld (debug_mark),a  
bb80 3a 8f bb			ld a, (.dmark+1)  
bb83 32 6c ee			ld (debug_mark+1),a  
bb86 3a 90 bb			ld a, (.dmark+2)  
bb89 32 6d ee			ld (debug_mark+2),a  
bb8c 18 03			jr .pastdmark  
bb8e ..			.dmark: db "D-1"  
bb91 f1			.pastdmark: pop af  
bb92			endm  
# End of macro DMARK
bb92				CALLMONITOR 
bb92 cd 6f ee			call debug_vector  
bb95				endm  
# End of macro CALLMONITOR
bb95			endif	 
bb95			 
bb95			.nodashswap: 
bb95			 
bb95			if DEBUG_FORTH_DOT 
bb95				DMARK "D-o" 
bb95 f5				push af  
bb96 3a aa bb			ld a, (.dmark)  
bb99 32 6b ee			ld (debug_mark),a  
bb9c 3a ab bb			ld a, (.dmark+1)  
bb9f 32 6c ee			ld (debug_mark+1),a  
bba2 3a ac bb			ld a, (.dmark+2)  
bba5 32 6d ee			ld (debug_mark+2),a  
bba8 18 03			jr .pastdmark  
bbaa ..			.dmark: db "D-o"  
bbad f1			.pastdmark: pop af  
bbae			endm  
# End of macro DMARK
bbae				CALLMONITOR 
bbae cd 6f ee			call debug_vector  
bbb1				endm  
# End of macro CALLMONITOR
bbb1			endif	 
bbb1			 
bbb1 d5					push de   ; save string start in case we need to advance print 
bbb2			 
bbb2 3a 5e ea				ld a, (f_cursor_ptr) 
bbb5 cd c1 8a				call str_at_display 
bbb8 3a 3c ea				ld a,(cli_autodisplay) 
bbbb fe 00				cp 0 
bbbd 28 03				jr z, .noupdate 
bbbf cd d1 8a						call update_display 
bbc2					.noupdate: 
bbc2			 
bbc2			 
bbc2					; see if we need to advance the print position 
bbc2			 
bbc2 e1					pop hl   ; get back string 
bbc3			;		ex de,hl 
bbc3			 
bbc3 3a 3d ea				ld a, (cli_mvdot) 
bbc6			if DEBUG_FORTH_DOT 
bbc6			;		ld e,a 
bbc6				DMARK "D>1" 
bbc6 f5				push af  
bbc7 3a db bb			ld a, (.dmark)  
bbca 32 6b ee			ld (debug_mark),a  
bbcd 3a dc bb			ld a, (.dmark+1)  
bbd0 32 6c ee			ld (debug_mark+1),a  
bbd3 3a dd bb			ld a, (.dmark+2)  
bbd6 32 6d ee			ld (debug_mark+2),a  
bbd9 18 03			jr .pastdmark  
bbdb ..			.dmark: db "D>1"  
bbde f1			.pastdmark: pop af  
bbdf			endm  
# End of macro DMARK
bbdf				CALLMONITOR 
bbdf cd 6f ee			call debug_vector  
bbe2				endm  
# End of macro CALLMONITOR
bbe2			endif	 
bbe2 fe 00				cp 0 
bbe4 28 44				jr z, .noadv 
bbe6					; yes, lets advance the print position 
bbe6 3e 00				ld a, 0 
bbe8 cd 4c 90				call strlent 
bbeb			if DEBUG_FORTH_DOT 
bbeb				DMARK "D-?" 
bbeb f5				push af  
bbec 3a 00 bc			ld a, (.dmark)  
bbef 32 6b ee			ld (debug_mark),a  
bbf2 3a 01 bc			ld a, (.dmark+1)  
bbf5 32 6c ee			ld (debug_mark+1),a  
bbf8 3a 02 bc			ld a, (.dmark+2)  
bbfb 32 6d ee			ld (debug_mark+2),a  
bbfe 18 03			jr .pastdmark  
bc00 ..			.dmark: db "D-?"  
bc03 f1			.pastdmark: pop af  
bc04			endm  
# End of macro DMARK
bc04				CALLMONITOR 
bc04 cd 6f ee			call debug_vector  
bc07				endm  
# End of macro CALLMONITOR
bc07			endif	 
bc07 3a 5e ea				ld a, (f_cursor_ptr) 
bc0a 85					add a,l 
bc0b					;call addatohl 
bc0b					;ld a, l 
bc0b 32 5e ea				ld (f_cursor_ptr), a   ; save new pos 
bc0e			 
bc0e			if DEBUG_FORTH_DOT 
bc0e				DMARK "D->" 
bc0e f5				push af  
bc0f 3a 23 bc			ld a, (.dmark)  
bc12 32 6b ee			ld (debug_mark),a  
bc15 3a 24 bc			ld a, (.dmark+1)  
bc18 32 6c ee			ld (debug_mark+1),a  
bc1b 3a 25 bc			ld a, (.dmark+2)  
bc1e 32 6d ee			ld (debug_mark+2),a  
bc21 18 03			jr .pastdmark  
bc23 ..			.dmark: db "D->"  
bc26 f1			.pastdmark: pop af  
bc27			endm  
# End of macro DMARK
bc27				CALLMONITOR 
bc27 cd 6f ee			call debug_vector  
bc2a				endm  
# End of macro CALLMONITOR
bc2a			endif	 
bc2a			 
bc2a			.noadv:	 
bc2a			 
bc2a					if DEBUG_FORTH_DOT_WAIT 
bc2a							call next_page_prompt 
bc2a					endif	 
bc2a			; TODO this pop off the stack causes a crash. i dont know why 
bc2a			 
bc2a			 
bc2a			if DEBUG_FORTH_DOT 
bc2a				DMARK "DTh" 
bc2a f5				push af  
bc2b 3a 3f bc			ld a, (.dmark)  
bc2e 32 6b ee			ld (debug_mark),a  
bc31 3a 40 bc			ld a, (.dmark+1)  
bc34 32 6c ee			ld (debug_mark+1),a  
bc37 3a 41 bc			ld a, (.dmark+2)  
bc3a 32 6d ee			ld (debug_mark+2),a  
bc3d 18 03			jr .pastdmark  
bc3f ..			.dmark: db "DTh"  
bc42 f1			.pastdmark: pop af  
bc43			endm  
# End of macro DMARK
bc43				CALLMONITOR 
bc43 cd 6f ee			call debug_vector  
bc46				endm  
# End of macro CALLMONITOR
bc46			endif	 
bc46			 
bc46					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bc46 cd 11 9d			call macro_forth_dsp_pop 
bc49				endm 
# End of macro FORTH_DSP_POP
bc49			 
bc49			if DEBUG_FORTH_DOT 
bc49				DMARK "DTi" 
bc49 f5				push af  
bc4a 3a 5e bc			ld a, (.dmark)  
bc4d 32 6b ee			ld (debug_mark),a  
bc50 3a 5f bc			ld a, (.dmark+1)  
bc53 32 6c ee			ld (debug_mark+1),a  
bc56 3a 60 bc			ld a, (.dmark+2)  
bc59 32 6d ee			ld (debug_mark+2),a  
bc5c 18 03			jr .pastdmark  
bc5e ..			.dmark: db "DTi"  
bc61 f1			.pastdmark: pop af  
bc62			endm  
# End of macro DMARK
bc62				CALLMONITOR 
bc62 cd 6f ee			call debug_vector  
bc65				endm  
# End of macro CALLMONITOR
bc65			endif	 
bc65			 
bc65			 
bc65					NEXTW 
bc65 c3 0f 9e			jp macro_next 
bc68				endm 
# End of macro NEXTW
bc68			 
bc68			.CLS: 
bc68				CWHEAD .DRAW 33 "CLS" 3 WORD_FLAG_CODE 
bc68 35				db WORD_SYS_CORE+33             
bc69 95 bc			dw .DRAW            
bc6b 04				db 3 + 1 
bc6c .. 00			db "CLS",0              
bc70				endm 
# End of macro CWHEAD
bc70			; | CLS ( -- ) Clear current frame buffer and set next print position to top left corner  | DONE 
bc70					if DEBUG_FORTH_WORDS_KEY 
bc70						DMARK "CLS" 
bc70 f5				push af  
bc71 3a 85 bc			ld a, (.dmark)  
bc74 32 6b ee			ld (debug_mark),a  
bc77 3a 86 bc			ld a, (.dmark+1)  
bc7a 32 6c ee			ld (debug_mark+1),a  
bc7d 3a 87 bc			ld a, (.dmark+2)  
bc80 32 6d ee			ld (debug_mark+2),a  
bc83 18 03			jr .pastdmark  
bc85 ..			.dmark: db "CLS"  
bc88 f1			.pastdmark: pop af  
bc89			endm  
# End of macro DMARK
bc89						CALLMONITOR 
bc89 cd 6f ee			call debug_vector  
bc8c				endm  
# End of macro CALLMONITOR
bc8c					endif 
bc8c cd ae 8a				call clear_display 
bc8f c3 a3 bd				jp .home		; and home cursor 
bc92					NEXTW 
bc92 c3 0f 9e			jp macro_next 
bc95				endm 
# End of macro NEXTW
bc95			 
bc95			.DRAW: 
bc95				CWHEAD .DUMP 34 "DRAW" 4 WORD_FLAG_CODE 
bc95 36				db WORD_SYS_CORE+34             
bc96 c0 bc			dw .DUMP            
bc98 05				db 4 + 1 
bc99 .. 00			db "DRAW",0              
bc9e				endm 
# End of macro CWHEAD
bc9e			; | DRAW ( -- ) Draw contents of current frame buffer  | DONE 
bc9e					if DEBUG_FORTH_WORDS_KEY 
bc9e						DMARK "DRW" 
bc9e f5				push af  
bc9f 3a b3 bc			ld a, (.dmark)  
bca2 32 6b ee			ld (debug_mark),a  
bca5 3a b4 bc			ld a, (.dmark+1)  
bca8 32 6c ee			ld (debug_mark+1),a  
bcab 3a b5 bc			ld a, (.dmark+2)  
bcae 32 6d ee			ld (debug_mark+2),a  
bcb1 18 03			jr .pastdmark  
bcb3 ..			.dmark: db "DRW"  
bcb6 f1			.pastdmark: pop af  
bcb7			endm  
# End of macro DMARK
bcb7						CALLMONITOR 
bcb7 cd 6f ee			call debug_vector  
bcba				endm  
# End of macro CALLMONITOR
bcba					endif 
bcba cd d1 8a				call update_display 
bcbd					NEXTW 
bcbd c3 0f 9e			jp macro_next 
bcc0				endm 
# End of macro NEXTW
bcc0			 
bcc0			.DUMP: 
bcc0				CWHEAD .CDUMP 35 "DUMP" 4 WORD_FLAG_CODE 
bcc0 37				db WORD_SYS_CORE+35             
bcc1 f8 bc			dw .CDUMP            
bcc3 05				db 4 + 1 
bcc4 .. 00			db "DUMP",0              
bcc9				endm 
# End of macro CWHEAD
bcc9			; | DUMP ( x -- ) With address x display dump   | DONE 
bcc9			; TODO pop address to use off of the stack 
bcc9					if DEBUG_FORTH_WORDS_KEY 
bcc9						DMARK "DUM" 
bcc9 f5				push af  
bcca 3a de bc			ld a, (.dmark)  
bccd 32 6b ee			ld (debug_mark),a  
bcd0 3a df bc			ld a, (.dmark+1)  
bcd3 32 6c ee			ld (debug_mark+1),a  
bcd6 3a e0 bc			ld a, (.dmark+2)  
bcd9 32 6d ee			ld (debug_mark+2),a  
bcdc 18 03			jr .pastdmark  
bcde ..			.dmark: db "DUM"  
bce1 f1			.pastdmark: pop af  
bce2			endm  
# End of macro DMARK
bce2						CALLMONITOR 
bce2 cd 6f ee			call debug_vector  
bce5				endm  
# End of macro CALLMONITOR
bce5					endif 
bce5 cd ae 8a				call clear_display 
bce8			 
bce8					; get address 
bce8			 
bce8					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
bce8 cd 59 9c			call macro_dsp_valuehl 
bceb				endm 
# End of macro FORTH_DSP_VALUEHL
bceb				 
bceb					; save it for cdump 
bceb			 
bceb 22 e4 e5				ld (os_cur_ptr),hl 
bcee			 
bcee					; destroy value TOS 
bcee			 
bcee					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bcee cd 11 9d			call macro_forth_dsp_pop 
bcf1				endm 
# End of macro FORTH_DSP_POP
bcf1			 
bcf1 cd e2 98				call dumpcont	; skip old style of param parsing	 
bcf4 c9					ret			; TODO command causes end of remaining parsing so cant do: $0000 DUMP $8000 DUMP 
bcf5					NEXTW 
bcf5 c3 0f 9e			jp macro_next 
bcf8				endm 
# End of macro NEXTW
bcf8			.CDUMP: 
bcf8				CWHEAD .DAT 36 "CDUMP" 5 WORD_FLAG_CODE 
bcf8 38				db WORD_SYS_CORE+36             
bcf9 28 bd			dw .DAT            
bcfb 06				db 5 + 1 
bcfc .. 00			db "CDUMP",0              
bd02				endm 
# End of macro CWHEAD
bd02			; | CDUMP ( -- ) Continue dump of memory from DUMP | DONE 
bd02					if DEBUG_FORTH_WORDS_KEY 
bd02						DMARK "CDP" 
bd02 f5				push af  
bd03 3a 17 bd			ld a, (.dmark)  
bd06 32 6b ee			ld (debug_mark),a  
bd09 3a 18 bd			ld a, (.dmark+1)  
bd0c 32 6c ee			ld (debug_mark+1),a  
bd0f 3a 19 bd			ld a, (.dmark+2)  
bd12 32 6d ee			ld (debug_mark+2),a  
bd15 18 03			jr .pastdmark  
bd17 ..			.dmark: db "CDP"  
bd1a f1			.pastdmark: pop af  
bd1b			endm  
# End of macro DMARK
bd1b						CALLMONITOR 
bd1b cd 6f ee			call debug_vector  
bd1e				endm  
# End of macro CALLMONITOR
bd1e					endif 
bd1e cd ae 8a				call clear_display 
bd21 cd e2 98				call dumpcont	 
bd24 c9					ret			; TODO command causes end of remaining parsing so cant do: $0000 DUMP CDUMP $8000 DUMP 
bd25					NEXTW 
bd25 c3 0f 9e			jp macro_next 
bd28				endm 
# End of macro NEXTW
bd28			 
bd28			 
bd28			 
bd28			 
bd28			.DAT: 
bd28				CWHEAD .HOME 41 "AT" 2 WORD_FLAG_CODE 
bd28 3d				db WORD_SYS_CORE+41             
bd29 7e bd			dw .HOME            
bd2b 03				db 2 + 1 
bd2c .. 00			db "AT",0              
bd2f				endm 
# End of macro CWHEAD
bd2f			; | AT ( u1 u2 -- ) Set next output via . or emit at row u2 col u1 | DONE 
bd2f					if DEBUG_FORTH_WORDS_KEY 
bd2f						DMARK "AT." 
bd2f f5				push af  
bd30 3a 44 bd			ld a, (.dmark)  
bd33 32 6b ee			ld (debug_mark),a  
bd36 3a 45 bd			ld a, (.dmark+1)  
bd39 32 6c ee			ld (debug_mark+1),a  
bd3c 3a 46 bd			ld a, (.dmark+2)  
bd3f 32 6d ee			ld (debug_mark+2),a  
bd42 18 03			jr .pastdmark  
bd44 ..			.dmark: db "AT."  
bd47 f1			.pastdmark: pop af  
bd48			endm  
# End of macro DMARK
bd48						CALLMONITOR 
bd48 cd 6f ee			call debug_vector  
bd4b				endm  
# End of macro CALLMONITOR
bd4b					endif 
bd4b					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
bd4b cd 59 9c			call macro_dsp_valuehl 
bd4e				endm 
# End of macro FORTH_DSP_VALUEHL
bd4e			 
bd4e			 
bd4e					; TODO save cursor row 
bd4e 7d					ld a,l 
bd4f fe 02				cp 2 
bd51 20 04				jr nz, .crow3 
bd53 3e 28				ld a, display_row_2 
bd55 18 12				jr .ccol1 
bd57 fe 03		.crow3:		cp 3 
bd59 20 04				jr nz, .crow4 
bd5b 3e 50				ld a, display_row_3 
bd5d 18 0a				jr .ccol1 
bd5f fe 04		.crow4:		cp 4 
bd61 20 04				jr nz, .crow1 
bd63 3e 78				ld a, display_row_4 
bd65 18 02				jr .ccol1 
bd67 3e 00		.crow1:		ld a,display_row_1 
bd69 f5			.ccol1:		push af			; got row offset 
bd6a 6f					ld l,a 
bd6b 26 00				ld h,0 
bd6d					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bd6d cd 11 9d			call macro_forth_dsp_pop 
bd70				endm 
# End of macro FORTH_DSP_POP
bd70					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
bd70 cd 59 9c			call macro_dsp_valuehl 
bd73				endm 
# End of macro FORTH_DSP_VALUEHL
bd73					; TODO save cursor col 
bd73 f1					pop af 
bd74 85					add l		; add col offset 
bd75 32 5e ea				ld (f_cursor_ptr), a 
bd78					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bd78 cd 11 9d			call macro_forth_dsp_pop 
bd7b				endm 
# End of macro FORTH_DSP_POP
bd7b			 
bd7b					; calculate  
bd7b			 
bd7b					NEXTW 
bd7b c3 0f 9e			jp macro_next 
bd7e				endm 
# End of macro NEXTW
bd7e			 
bd7e			 
bd7e			.HOME: 
bd7e				CWHEAD .CR 45 "HOME" 4 WORD_FLAG_CODE 
bd7e 41				db WORD_SYS_CORE+45             
bd7f ab bd			dw .CR            
bd81 05				db 4 + 1 
bd82 .. 00			db "HOME",0              
bd87				endm 
# End of macro CWHEAD
bd87			; | HOME ( -- ) Reset the current cursor for output to home | DONE 
bd87					if DEBUG_FORTH_WORDS_KEY 
bd87						DMARK "HOM" 
bd87 f5				push af  
bd88 3a 9c bd			ld a, (.dmark)  
bd8b 32 6b ee			ld (debug_mark),a  
bd8e 3a 9d bd			ld a, (.dmark+1)  
bd91 32 6c ee			ld (debug_mark+1),a  
bd94 3a 9e bd			ld a, (.dmark+2)  
bd97 32 6d ee			ld (debug_mark+2),a  
bd9a 18 03			jr .pastdmark  
bd9c ..			.dmark: db "HOM"  
bd9f f1			.pastdmark: pop af  
bda0			endm  
# End of macro DMARK
bda0						CALLMONITOR 
bda0 cd 6f ee			call debug_vector  
bda3				endm  
# End of macro CALLMONITOR
bda3					endif 
bda3 3e 00		.home:		ld a, 0		; and home cursor 
bda5 32 5e ea				ld (f_cursor_ptr), a 
bda8					NEXTW 
bda8 c3 0f 9e			jp macro_next 
bdab				endm 
# End of macro NEXTW
bdab			 
bdab			 
bdab			.CR: 
bdab				CWHEAD .SPACE 50 "CR" 2 WORD_FLAG_CODE 
bdab 46				db WORD_SYS_CORE+50             
bdac e6 bd			dw .SPACE            
bdae 03				db 2 + 1 
bdaf .. 00			db "CR",0              
bdb2				endm 
# End of macro CWHEAD
bdb2			; | CR (  -- s ) Push CR/LF pair onto the stack as a string  | DONE 
bdb2					if DEBUG_FORTH_WORDS_KEY 
bdb2						DMARK "CR." 
bdb2 f5				push af  
bdb3 3a c7 bd			ld a, (.dmark)  
bdb6 32 6b ee			ld (debug_mark),a  
bdb9 3a c8 bd			ld a, (.dmark+1)  
bdbc 32 6c ee			ld (debug_mark+1),a  
bdbf 3a c9 bd			ld a, (.dmark+2)  
bdc2 32 6d ee			ld (debug_mark+2),a  
bdc5 18 03			jr .pastdmark  
bdc7 ..			.dmark: db "CR."  
bdca f1			.pastdmark: pop af  
bdcb			endm  
# End of macro DMARK
bdcb						CALLMONITOR 
bdcb cd 6f ee			call debug_vector  
bdce				endm  
# End of macro CALLMONITOR
bdce					endif 
bdce 3e 0d				ld a, 13 
bdd0 32 c1 e2				ld (scratch),a 
bdd3 3e 0a				ld a, 10 
bdd5 32 c2 e2				ld (scratch+1),a 
bdd8 3e 00				ld a, 0 
bdda 32 c3 e2				ld (scratch+2),a 
bddd 21 c1 e2				ld hl, scratch 
bde0 cd d0 9a				call forth_push_str 
bde3					 
bde3				       NEXTW 
bde3 c3 0f 9e			jp macro_next 
bde6				endm 
# End of macro NEXTW
bde6			.SPACE: 
bde6				CWHEAD .SPACES 50 "BL" 2 WORD_FLAG_CODE 
bde6 46				db WORD_SYS_CORE+50             
bde7 1c be			dw .SPACES            
bde9 03				db 2 + 1 
bdea .. 00			db "BL",0              
bded				endm 
# End of macro CWHEAD
bded			; | BL (  -- c ) Push the value of space onto the stack as a string  | DONE 
bded					if DEBUG_FORTH_WORDS_KEY 
bded						DMARK "BL." 
bded f5				push af  
bdee 3a 02 be			ld a, (.dmark)  
bdf1 32 6b ee			ld (debug_mark),a  
bdf4 3a 03 be			ld a, (.dmark+1)  
bdf7 32 6c ee			ld (debug_mark+1),a  
bdfa 3a 04 be			ld a, (.dmark+2)  
bdfd 32 6d ee			ld (debug_mark+2),a  
be00 18 03			jr .pastdmark  
be02 ..			.dmark: db "BL."  
be05 f1			.pastdmark: pop af  
be06			endm  
# End of macro DMARK
be06						CALLMONITOR 
be06 cd 6f ee			call debug_vector  
be09				endm  
# End of macro CALLMONITOR
be09					endif 
be09 3e 20				ld a, " " 
be0b 32 c1 e2				ld (scratch),a 
be0e 3e 00				ld a, 0 
be10 32 c2 e2				ld (scratch+1),a 
be13 21 c1 e2				ld hl, scratch 
be16 cd d0 9a				call forth_push_str 
be19					 
be19				       NEXTW 
be19 c3 0f 9e			jp macro_next 
be1c				endm 
# End of macro NEXTW
be1c			 
be1c			;.blstr: db " ", 0 
be1c			 
be1c			.SPACES: 
be1c				CWHEAD .SCROLL 51 "SPACES" 6 WORD_FLAG_CODE 
be1c 47				db WORD_SYS_CORE+51             
be1d b7 be			dw .SCROLL            
be1f 07				db 6 + 1 
be20 .. 00			db "SPACES",0              
be27				endm 
# End of macro CWHEAD
be27			; | SPACES ( u -- str ) A string of u spaces is pushed onto the stack | DONE 
be27					if DEBUG_FORTH_WORDS_KEY 
be27						DMARK "SPS" 
be27 f5				push af  
be28 3a 3c be			ld a, (.dmark)  
be2b 32 6b ee			ld (debug_mark),a  
be2e 3a 3d be			ld a, (.dmark+1)  
be31 32 6c ee			ld (debug_mark+1),a  
be34 3a 3e be			ld a, (.dmark+2)  
be37 32 6d ee			ld (debug_mark+2),a  
be3a 18 03			jr .pastdmark  
be3c ..			.dmark: db "SPS"  
be3f f1			.pastdmark: pop af  
be40			endm  
# End of macro DMARK
be40						CALLMONITOR 
be40 cd 6f ee			call debug_vector  
be43				endm  
# End of macro CALLMONITOR
be43					endif 
be43			 
be43			 
be43					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
be43 cd 59 9c			call macro_dsp_valuehl 
be46				endm 
# End of macro FORTH_DSP_VALUEHL
be46			 
be46 e5					push hl    ; u 
be47					if DEBUG_FORTH_WORDS 
be47						DMARK "SPA" 
be47 f5				push af  
be48 3a 5c be			ld a, (.dmark)  
be4b 32 6b ee			ld (debug_mark),a  
be4e 3a 5d be			ld a, (.dmark+1)  
be51 32 6c ee			ld (debug_mark+1),a  
be54 3a 5e be			ld a, (.dmark+2)  
be57 32 6d ee			ld (debug_mark+2),a  
be5a 18 03			jr .pastdmark  
be5c ..			.dmark: db "SPA"  
be5f f1			.pastdmark: pop af  
be60			endm  
# End of macro DMARK
be60						CALLMONITOR 
be60 cd 6f ee			call debug_vector  
be63				endm  
# End of macro CALLMONITOR
be63					endif 
be63			 
be63					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
be63 cd 11 9d			call macro_forth_dsp_pop 
be66				endm 
# End of macro FORTH_DSP_POP
be66 e1					pop hl 
be67 0e 00				ld c, 0 
be69 45					ld b, l 
be6a 21 c1 e2				ld hl, scratch  
be6d			 
be6d					if DEBUG_FORTH_WORDS 
be6d						DMARK "SP2" 
be6d f5				push af  
be6e 3a 82 be			ld a, (.dmark)  
be71 32 6b ee			ld (debug_mark),a  
be74 3a 83 be			ld a, (.dmark+1)  
be77 32 6c ee			ld (debug_mark+1),a  
be7a 3a 84 be			ld a, (.dmark+2)  
be7d 32 6d ee			ld (debug_mark+2),a  
be80 18 03			jr .pastdmark  
be82 ..			.dmark: db "SP2"  
be85 f1			.pastdmark: pop af  
be86			endm  
# End of macro DMARK
be86						CALLMONITOR 
be86 cd 6f ee			call debug_vector  
be89				endm  
# End of macro CALLMONITOR
be89					endif 
be89 3e 20				ld a, ' ' 
be8b			.spaces1:	 
be8b 77					ld (hl),a 
be8c 23					inc hl 
be8d					 
be8d 10 fc				djnz .spaces1 
be8f 3e 00				ld a,0 
be91 77					ld (hl),a 
be92 21 c1 e2				ld hl, scratch 
be95					if DEBUG_FORTH_WORDS 
be95						DMARK "SP3" 
be95 f5				push af  
be96 3a aa be			ld a, (.dmark)  
be99 32 6b ee			ld (debug_mark),a  
be9c 3a ab be			ld a, (.dmark+1)  
be9f 32 6c ee			ld (debug_mark+1),a  
bea2 3a ac be			ld a, (.dmark+2)  
bea5 32 6d ee			ld (debug_mark+2),a  
bea8 18 03			jr .pastdmark  
beaa ..			.dmark: db "SP3"  
bead f1			.pastdmark: pop af  
beae			endm  
# End of macro DMARK
beae						CALLMONITOR 
beae cd 6f ee			call debug_vector  
beb1				endm  
# End of macro CALLMONITOR
beb1					endif 
beb1 cd d0 9a				call forth_push_str 
beb4			 
beb4				       NEXTW 
beb4 c3 0f 9e			jp macro_next 
beb7				endm 
# End of macro NEXTW
beb7			 
beb7			 
beb7			 
beb7			.SCROLL: 
beb7				CWHEAD .SCROLLD 63 "SCROLL" 6 WORD_FLAG_CODE 
beb7 53				db WORD_SYS_CORE+63             
beb8 e4 be			dw .SCROLLD            
beba 07				db 6 + 1 
bebb .. 00			db "SCROLL",0              
bec2				endm 
# End of macro CWHEAD
bec2			; | SCROLL ( -- ) Scroll up one line - next write will update if required | DONE 
bec2					if DEBUG_FORTH_WORDS_KEY 
bec2						DMARK "SCR" 
bec2 f5				push af  
bec3 3a d7 be			ld a, (.dmark)  
bec6 32 6b ee			ld (debug_mark),a  
bec9 3a d8 be			ld a, (.dmark+1)  
becc 32 6c ee			ld (debug_mark+1),a  
becf 3a d9 be			ld a, (.dmark+2)  
bed2 32 6d ee			ld (debug_mark+2),a  
bed5 18 03			jr .pastdmark  
bed7 ..			.dmark: db "SCR"  
beda f1			.pastdmark: pop af  
bedb			endm  
# End of macro DMARK
bedb						CALLMONITOR 
bedb cd 6f ee			call debug_vector  
bede				endm  
# End of macro CALLMONITOR
bede					endif 
bede			 
bede cd 70 8a			call scroll_up 
bee1			;	call update_display 
bee1			 
bee1					NEXTW 
bee1 c3 0f 9e			jp macro_next 
bee4				endm 
# End of macro NEXTW
bee4			 
bee4			 
bee4			 
bee4			;		; get dir 
bee4			; 
bee4			;		FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
bee4			; 
bee4			;		push hl 
bee4			; 
bee4			;		; destroy value TOS 
bee4			; 
bee4			;		FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bee4			; 
bee4			;		; get count 
bee4			; 
bee4			;		FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
bee4			; 
bee4			;		push hl 
bee4			; 
bee4			;		; destroy value TOS 
bee4			; 
bee4			;		FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bee4			; 
bee4			;		; one value on hl get other one back 
bee4			; 
bee4			;		pop bc    ; count 
bee4			; 
bee4			;		pop de   ; dir 
bee4			; 
bee4			; 
bee4			;		ld b, c 
bee4			; 
bee4			;.scrolldir:     push bc 
bee4			;		push de 
bee4			; 
bee4			;		ld a, 0 
bee4			;		cp e 
bee4			;		jr z, .scrollup  
bee4			;		call scroll_down 
bee4			;		jr .scrollnext 
bee4			;.scrollup:	call scroll_up 
bee4			; 
bee4			;		 
bee4			;.scrollnext: 
bee4			;		pop de 
bee4			;		pop bc 
bee4			;		djnz .scrolldir 
bee4			; 
bee4			; 
bee4			; 
bee4			; 
bee4			; 
bee4			;		NEXTW 
bee4			 
bee4			.SCROLLD: 
bee4				CWHEAD .ATQ 63 "SCROLLD" 7 WORD_FLAG_CODE 
bee4 53				db WORD_SYS_CORE+63             
bee5 12 bf			dw .ATQ            
bee7 08				db 7 + 1 
bee8 .. 00			db "SCROLLD",0              
bef0				endm 
# End of macro CWHEAD
bef0			; | SCROLLD ( -- ) Scroll down one line - next write will update if required | TO DO 
bef0					if DEBUG_FORTH_WORDS_KEY 
bef0						DMARK "SCD" 
bef0 f5				push af  
bef1 3a 05 bf			ld a, (.dmark)  
bef4 32 6b ee			ld (debug_mark),a  
bef7 3a 06 bf			ld a, (.dmark+1)  
befa 32 6c ee			ld (debug_mark+1),a  
befd 3a 07 bf			ld a, (.dmark+2)  
bf00 32 6d ee			ld (debug_mark+2),a  
bf03 18 03			jr .pastdmark  
bf05 ..			.dmark: db "SCD"  
bf08 f1			.pastdmark: pop af  
bf09			endm  
# End of macro DMARK
bf09						CALLMONITOR 
bf09 cd 6f ee			call debug_vector  
bf0c				endm  
# End of macro CALLMONITOR
bf0c					endif 
bf0c			 
bf0c cd 94 8a			call scroll_down 
bf0f			;	call update_display 
bf0f			 
bf0f					NEXTW 
bf0f c3 0f 9e			jp macro_next 
bf12				endm 
# End of macro NEXTW
bf12			 
bf12			 
bf12			.ATQ: 
bf12				CWHEAD .AUTODSP 78 "AT@" 3 WORD_FLAG_CODE 
bf12 62				db WORD_SYS_CORE+78             
bf13 70 bf			dw .AUTODSP            
bf15 04				db 3 + 1 
bf16 .. 00			db "AT@",0              
bf1a				endm 
# End of macro CWHEAD
bf1a			; | AT@ ( u1 u2 -- n ) Push to stack ASCII value at row u2 col u1 | DONE 
bf1a					if DEBUG_FORTH_WORDS_KEY 
bf1a						DMARK "ATA" 
bf1a f5				push af  
bf1b 3a 2f bf			ld a, (.dmark)  
bf1e 32 6b ee			ld (debug_mark),a  
bf21 3a 30 bf			ld a, (.dmark+1)  
bf24 32 6c ee			ld (debug_mark+1),a  
bf27 3a 31 bf			ld a, (.dmark+2)  
bf2a 32 6d ee			ld (debug_mark+2),a  
bf2d 18 03			jr .pastdmark  
bf2f ..			.dmark: db "ATA"  
bf32 f1			.pastdmark: pop af  
bf33			endm  
# End of macro DMARK
bf33						CALLMONITOR 
bf33 cd 6f ee			call debug_vector  
bf36				endm  
# End of macro CALLMONITOR
bf36					endif 
bf36			 
bf36			 
bf36					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
bf36 cd 59 9c			call macro_dsp_valuehl 
bf39				endm 
# End of macro FORTH_DSP_VALUEHL
bf39			 
bf39					; TODO save cursor row 
bf39 7d					ld a,l 
bf3a fe 02				cp 2 
bf3c 20 04				jr nz, .crow3aq 
bf3e 3e 28				ld a, display_row_2 
bf40 18 12				jr .ccol1aq 
bf42 fe 03		.crow3aq:		cp 3 
bf44 20 04				jr nz, .crow4aq 
bf46 3e 50				ld a, display_row_3 
bf48 18 0a				jr .ccol1aq 
bf4a fe 04		.crow4aq:		cp 4 
bf4c 20 04				jr nz, .crow1aq 
bf4e 3e 78				ld a, display_row_4 
bf50 18 02				jr .ccol1aq 
bf52 3e 00		.crow1aq:		ld a,display_row_1 
bf54 f5			.ccol1aq:		push af			; got row offset 
bf55 6f					ld l,a 
bf56 26 00				ld h,0 
bf58					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bf58 cd 11 9d			call macro_forth_dsp_pop 
bf5b				endm 
# End of macro FORTH_DSP_POP
bf5b					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
bf5b cd 59 9c			call macro_dsp_valuehl 
bf5e				endm 
# End of macro FORTH_DSP_VALUEHL
bf5e					; TODO save cursor col 
bf5e f1					pop af 
bf5f 85					add l		; add col offset 
bf60			 
bf60					; add current frame buffer address 
bf60 2a cc eb				ld hl, (display_fb_active) 
bf63 cd db 8c				call addatohl 
bf66			 
bf66			 
bf66			 
bf66			 
bf66					; get char frame buffer location offset in hl 
bf66			 
bf66 7e					ld a,(hl) 
bf67 26 00				ld h, 0 
bf69 6f					ld l, a 
bf6a			 
bf6a cd 62 9a				call forth_push_numhl 
bf6d			 
bf6d			 
bf6d					NEXTW 
bf6d c3 0f 9e			jp macro_next 
bf70				endm 
# End of macro NEXTW
bf70			 
bf70			.AUTODSP: 
bf70				CWHEAD .MENU 79 "ADSP" 4 WORD_FLAG_CODE 
bf70 63				db WORD_SYS_CORE+79             
bf71 86 bf			dw .MENU            
bf73 05				db 4 + 1 
bf74 .. 00			db "ADSP",0              
bf79				endm 
# End of macro CWHEAD
bf79			; | ADSP ( u1 --  ) Enable/Disable Auto screen updates (SLOW). | DONE 
bf79			; | | If off, use DRAW to refresh. Default is on. $0003 will enable direct screen writes (TODO)  
bf79			 
bf79					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
bf79 cd 59 9c			call macro_dsp_valuehl 
bf7c				endm 
# End of macro FORTH_DSP_VALUEHL
bf7c			 
bf7c			;		push hl 
bf7c			 
bf7c					; destroy value TOS 
bf7c			 
bf7c					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bf7c cd 11 9d			call macro_forth_dsp_pop 
bf7f				endm 
# End of macro FORTH_DSP_POP
bf7f			 
bf7f			;		pop hl 
bf7f			 
bf7f 7d					ld a,l 
bf80 32 3c ea				ld (cli_autodisplay), a 
bf83				       NEXTW 
bf83 c3 0f 9e			jp macro_next 
bf86				endm 
# End of macro NEXTW
bf86			 
bf86			.MENU: 
bf86				CWHEAD .ENDDISPLAY 92 "MENU" 4 WORD_FLAG_CODE 
bf86 70				db WORD_SYS_CORE+92             
bf87 2f c0			dw .ENDDISPLAY            
bf89 05				db 4 + 1 
bf8a .. 00			db "MENU",0              
bf8f				endm 
# End of macro CWHEAD
bf8f			; | MENU ( u1....ux n -- n ) Create a menu. n is the number of menu items on stack. Push number selection to TOS | DONE 
bf8f			 
bf8f			;		; get number of items on the stack 
bf8f			; 
bf8f				 
bf8f					FORTH_DSP_VALUEHL 
bf8f cd 59 9c			call macro_dsp_valuehl 
bf92				endm 
# End of macro FORTH_DSP_VALUEHL
bf92				 
bf92					if DEBUG_FORTH_WORDS_KEY 
bf92						DMARK "MNU" 
bf92 f5				push af  
bf93 3a a7 bf			ld a, (.dmark)  
bf96 32 6b ee			ld (debug_mark),a  
bf99 3a a8 bf			ld a, (.dmark+1)  
bf9c 32 6c ee			ld (debug_mark+1),a  
bf9f 3a a9 bf			ld a, (.dmark+2)  
bfa2 32 6d ee			ld (debug_mark+2),a  
bfa5 18 03			jr .pastdmark  
bfa7 ..			.dmark: db "MNU"  
bfaa f1			.pastdmark: pop af  
bfab			endm  
# End of macro DMARK
bfab						CALLMONITOR 
bfab cd 6f ee			call debug_vector  
bfae				endm  
# End of macro CALLMONITOR
bfae					endif 
bfae			 
bfae 45					ld b, l	 
bfaf 05					dec b 
bfb0			 
bfb0					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bfb0 cd 11 9d			call macro_forth_dsp_pop 
bfb3				endm 
# End of macro FORTH_DSP_POP
bfb3			 
bfb3			 
bfb3					; go directly through the stack to pluck out the string pointers and build an array 
bfb3			 
bfb3			;		FORTH_DSP 
bfb3			 
bfb3					; hl contains top most stack item 
bfb3				 
bfb3 11 c1 e2				ld de, scratch 
bfb6			 
bfb6			.mbuild: 
bfb6			 
bfb6					FORTH_DSP_VALUEHL 
bfb6 cd 59 9c			call macro_dsp_valuehl 
bfb9				endm 
# End of macro FORTH_DSP_VALUEHL
bfb9			 
bfb9					if DEBUG_FORTH_WORDS 
bfb9						DMARK "MN3" 
bfb9 f5				push af  
bfba 3a ce bf			ld a, (.dmark)  
bfbd 32 6b ee			ld (debug_mark),a  
bfc0 3a cf bf			ld a, (.dmark+1)  
bfc3 32 6c ee			ld (debug_mark+1),a  
bfc6 3a d0 bf			ld a, (.dmark+2)  
bfc9 32 6d ee			ld (debug_mark+2),a  
bfcc 18 03			jr .pastdmark  
bfce ..			.dmark: db "MN3"  
bfd1 f1			.pastdmark: pop af  
bfd2			endm  
# End of macro DMARK
bfd2						CALLMONITOR 
bfd2 cd 6f ee			call debug_vector  
bfd5				endm  
# End of macro CALLMONITOR
bfd5					endif 
bfd5 eb					ex de, hl 
bfd6 73					ld (hl), e 
bfd7 23					inc hl 
bfd8 72					ld (hl), d 
bfd9 23					inc hl 
bfda eb					ex de, hl 
bfdb			 
bfdb					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bfdb cd 11 9d			call macro_forth_dsp_pop 
bfde				endm 
# End of macro FORTH_DSP_POP
bfde			 
bfde 10 d6				djnz .mbuild 
bfe0			 
bfe0					; done add term 
bfe0			 
bfe0 eb					ex de, hl 
bfe1 36 00				ld (hl), 0 
bfe3 23					inc hl 
bfe4 36 00				ld (hl), 0 
bfe6			 
bfe6				 
bfe6					 
bfe6 21 c1 e2				ld hl, scratch 
bfe9			 
bfe9					if DEBUG_FORTH_WORDS 
bfe9						DMARK "MNx" 
bfe9 f5				push af  
bfea 3a fe bf			ld a, (.dmark)  
bfed 32 6b ee			ld (debug_mark),a  
bff0 3a ff bf			ld a, (.dmark+1)  
bff3 32 6c ee			ld (debug_mark+1),a  
bff6 3a 00 c0			ld a, (.dmark+2)  
bff9 32 6d ee			ld (debug_mark+2),a  
bffc 18 03			jr .pastdmark  
bffe ..			.dmark: db "MNx"  
c001 f1			.pastdmark: pop af  
c002			endm  
# End of macro DMARK
c002						CALLMONITOR 
c002 cd 6f ee			call debug_vector  
c005				endm  
# End of macro CALLMONITOR
c005					endif 
c005			 
c005			 
c005			 
c005 3e 00				ld a, 0 
c007 cd df 8a				call menu 
c00a			 
c00a			 
c00a 6f					ld l, a 
c00b 26 00				ld h, 0 
c00d			 
c00d					if DEBUG_FORTH_WORDS 
c00d						DMARK "MNr" 
c00d f5				push af  
c00e 3a 22 c0			ld a, (.dmark)  
c011 32 6b ee			ld (debug_mark),a  
c014 3a 23 c0			ld a, (.dmark+1)  
c017 32 6c ee			ld (debug_mark+1),a  
c01a 3a 24 c0			ld a, (.dmark+2)  
c01d 32 6d ee			ld (debug_mark+2),a  
c020 18 03			jr .pastdmark  
c022 ..			.dmark: db "MNr"  
c025 f1			.pastdmark: pop af  
c026			endm  
# End of macro DMARK
c026						CALLMONITOR 
c026 cd 6f ee			call debug_vector  
c029				endm  
# End of macro CALLMONITOR
c029					endif 
c029			 
c029 cd 62 9a				call forth_push_numhl 
c02c			 
c02c			 
c02c			 
c02c			 
c02c				       NEXTW 
c02c c3 0f 9e			jp macro_next 
c02f				endm 
# End of macro NEXTW
c02f			 
c02f			 
c02f			.ENDDISPLAY: 
c02f			 
c02f			; eof 
# End of file forth_words_display.asm
c02f			include "forth_words_str.asm" 
c02f			 
c02f			; | ## String Words 
c02f			 
c02f			.PTR:   
c02f			 
c02f				CWHEAD .STYPE 52 "PTR" 3 WORD_FLAG_CODE 
c02f 48				db WORD_SYS_CORE+52             
c030 5c c0			dw .STYPE            
c032 04				db 3 + 1 
c033 .. 00			db "PTR",0              
c037				endm 
# End of macro CWHEAD
c037			; | PTR ( -- addr ) Low level push pointer to the value on TOS | DONE 
c037			; | | If a string will give the address of the string without dropping it. Handy for direct string access 
c037			; | | If a number can then use 2@ and 2! for direct value update without using stack words  
c037			 
c037					if DEBUG_FORTH_WORDS_KEY 
c037						DMARK "PTR" 
c037 f5				push af  
c038 3a 4c c0			ld a, (.dmark)  
c03b 32 6b ee			ld (debug_mark),a  
c03e 3a 4d c0			ld a, (.dmark+1)  
c041 32 6c ee			ld (debug_mark+1),a  
c044 3a 4e c0			ld a, (.dmark+2)  
c047 32 6d ee			ld (debug_mark+2),a  
c04a 18 03			jr .pastdmark  
c04c ..			.dmark: db "PTR"  
c04f f1			.pastdmark: pop af  
c050			endm  
# End of macro DMARK
c050						CALLMONITOR 
c050 cd 6f ee			call debug_vector  
c053				endm  
# End of macro CALLMONITOR
c053					endif 
c053					FORTH_DSP_VALUEHL 
c053 cd 59 9c			call macro_dsp_valuehl 
c056				endm 
# End of macro FORTH_DSP_VALUEHL
c056 cd 62 9a				call forth_push_numhl 
c059			 
c059			 
c059					NEXTW 
c059 c3 0f 9e			jp macro_next 
c05c				endm 
# End of macro NEXTW
c05c			.STYPE: 
c05c				CWHEAD .UPPER 52 "STYPE" 5 WORD_FLAG_CODE 
c05c 48				db WORD_SYS_CORE+52             
c05d ab c0			dw .UPPER            
c05f 06				db 5 + 1 
c060 .. 00			db "STYPE",0              
c066				endm 
# End of macro CWHEAD
c066			; | STYPE ( u -- u type ) Push type of value on TOS - 's' string, 'i' integer...   | DONE 
c066					if DEBUG_FORTH_WORDS_KEY 
c066						DMARK "STY" 
c066 f5				push af  
c067 3a 7b c0			ld a, (.dmark)  
c06a 32 6b ee			ld (debug_mark),a  
c06d 3a 7c c0			ld a, (.dmark+1)  
c070 32 6c ee			ld (debug_mark+1),a  
c073 3a 7d c0			ld a, (.dmark+2)  
c076 32 6d ee			ld (debug_mark+2),a  
c079 18 03			jr .pastdmark  
c07b ..			.dmark: db "STY"  
c07e f1			.pastdmark: pop af  
c07f			endm  
# End of macro DMARK
c07f						CALLMONITOR 
c07f cd 6f ee			call debug_vector  
c082				endm  
# End of macro CALLMONITOR
c082					endif 
c082					FORTH_DSP 
c082 cd 1f 9c			call macro_forth_dsp 
c085				endm 
# End of macro FORTH_DSP
c085					;v5 FORTH_DSP_VALUE 
c085			 
c085 7e					ld a, (hl) 
c086			 
c086 f5					push af 
c087			 
c087			; Dont destroy TOS		FORTH_DSP_POP 
c087			 
c087 f1					pop af 
c088			 
c088 fe 01				cp DS_TYPE_STR 
c08a 28 09				jr z, .typestr 
c08c			 
c08c fe 02				cp DS_TYPE_INUM 
c08e 28 0a				jr z, .typeinum 
c090			 
c090 21 a9 c0				ld hl, .tna 
c093 18 0a				jr .tpush 
c095			 
c095 21 a5 c0		.typestr:	ld hl, .tstr 
c098 18 05				jr .tpush 
c09a 21 a7 c0		.typeinum:	ld hl, .tinum 
c09d 18 00				jr .tpush 
c09f			 
c09f			.tpush: 
c09f			 
c09f cd d0 9a				call forth_push_str 
c0a2			 
c0a2					NEXTW 
c0a2 c3 0f 9e			jp macro_next 
c0a5				endm 
# End of macro NEXTW
c0a5 .. 00		.tstr:	db "s",0 
c0a7 .. 00		.tinum:  db "i",0 
c0a9 .. 00		.tna:   db "?", 0 
c0ab			 
c0ab			 
c0ab			.UPPER: 
c0ab				CWHEAD .LOWER 52 "UPPER" 5 WORD_FLAG_CODE 
c0ab 48				db WORD_SYS_CORE+52             
c0ac e6 c0			dw .LOWER            
c0ae 06				db 5 + 1 
c0af .. 00			db "UPPER",0              
c0b5				endm 
# End of macro CWHEAD
c0b5			; | UPPER ( s -- s ) Upper case string s  | DONE 
c0b5					if DEBUG_FORTH_WORDS_KEY 
c0b5						DMARK "UPR" 
c0b5 f5				push af  
c0b6 3a ca c0			ld a, (.dmark)  
c0b9 32 6b ee			ld (debug_mark),a  
c0bc 3a cb c0			ld a, (.dmark+1)  
c0bf 32 6c ee			ld (debug_mark+1),a  
c0c2 3a cc c0			ld a, (.dmark+2)  
c0c5 32 6d ee			ld (debug_mark+2),a  
c0c8 18 03			jr .pastdmark  
c0ca ..			.dmark: db "UPR"  
c0cd f1			.pastdmark: pop af  
c0ce			endm  
# End of macro DMARK
c0ce						CALLMONITOR 
c0ce cd 6f ee			call debug_vector  
c0d1				endm  
# End of macro CALLMONITOR
c0d1					endif 
c0d1			 
c0d1					FORTH_DSP 
c0d1 cd 1f 9c			call macro_forth_dsp 
c0d4				endm 
# End of macro FORTH_DSP
c0d4					 
c0d4			; TODO check is string type 
c0d4			 
c0d4					FORTH_DSP_VALUEHL 
c0d4 cd 59 9c			call macro_dsp_valuehl 
c0d7				endm 
# End of macro FORTH_DSP_VALUEHL
c0d7			; get pointer to string in hl 
c0d7			 
c0d7 7e			.toup:		ld a, (hl) 
c0d8 fe 00				cp 0 
c0da 28 07				jr z, .toupdone 
c0dc			 
c0dc cd 50 8f				call to_upper 
c0df			 
c0df 77					ld (hl), a 
c0e0 23					inc hl 
c0e1 18 f4				jr .toup 
c0e3			 
c0e3					 
c0e3			 
c0e3			 
c0e3			; for each char convert to upper 
c0e3					 
c0e3			.toupdone: 
c0e3			 
c0e3			 
c0e3					NEXTW 
c0e3 c3 0f 9e			jp macro_next 
c0e6				endm 
# End of macro NEXTW
c0e6			.LOWER: 
c0e6				CWHEAD .TCASE 52 "LOWER" 5 WORD_FLAG_CODE 
c0e6 48				db WORD_SYS_CORE+52             
c0e7 21 c1			dw .TCASE            
c0e9 06				db 5 + 1 
c0ea .. 00			db "LOWER",0              
c0f0				endm 
# End of macro CWHEAD
c0f0			; | LOWER ( s -- s ) Lower case string s  | DONE 
c0f0					if DEBUG_FORTH_WORDS_KEY 
c0f0						DMARK "LWR" 
c0f0 f5				push af  
c0f1 3a 05 c1			ld a, (.dmark)  
c0f4 32 6b ee			ld (debug_mark),a  
c0f7 3a 06 c1			ld a, (.dmark+1)  
c0fa 32 6c ee			ld (debug_mark+1),a  
c0fd 3a 07 c1			ld a, (.dmark+2)  
c100 32 6d ee			ld (debug_mark+2),a  
c103 18 03			jr .pastdmark  
c105 ..			.dmark: db "LWR"  
c108 f1			.pastdmark: pop af  
c109			endm  
# End of macro DMARK
c109						CALLMONITOR 
c109 cd 6f ee			call debug_vector  
c10c				endm  
# End of macro CALLMONITOR
c10c					endif 
c10c			 
c10c					FORTH_DSP 
c10c cd 1f 9c			call macro_forth_dsp 
c10f				endm 
# End of macro FORTH_DSP
c10f					 
c10f			; TODO check is string type 
c10f			 
c10f					FORTH_DSP_VALUEHL 
c10f cd 59 9c			call macro_dsp_valuehl 
c112				endm 
# End of macro FORTH_DSP_VALUEHL
c112			; get pointer to string in hl 
c112			 
c112 7e			.tolow:		ld a, (hl) 
c113 fe 00				cp 0 
c115 28 07				jr z, .tolowdone 
c117			 
c117 cd 59 8f				call to_lower 
c11a			 
c11a 77					ld (hl), a 
c11b 23					inc hl 
c11c 18 f4				jr .tolow 
c11e			 
c11e					 
c11e			 
c11e			 
c11e			; for each char convert to low 
c11e					 
c11e			.tolowdone: 
c11e					NEXTW 
c11e c3 0f 9e			jp macro_next 
c121				endm 
# End of macro NEXTW
c121			.TCASE: 
c121				CWHEAD .SUBSTR 52 "TCASE" 5 WORD_FLAG_CODE 
c121 48				db WORD_SYS_CORE+52             
c122 57 c2			dw .SUBSTR            
c124 06				db 5 + 1 
c125 .. 00			db "TCASE",0              
c12b				endm 
# End of macro CWHEAD
c12b			; | TCASE ( s -- s ) Title case string s  | DONE 
c12b					if DEBUG_FORTH_WORDS_KEY 
c12b						DMARK "TCS" 
c12b f5				push af  
c12c 3a 40 c1			ld a, (.dmark)  
c12f 32 6b ee			ld (debug_mark),a  
c132 3a 41 c1			ld a, (.dmark+1)  
c135 32 6c ee			ld (debug_mark+1),a  
c138 3a 42 c1			ld a, (.dmark+2)  
c13b 32 6d ee			ld (debug_mark+2),a  
c13e 18 03			jr .pastdmark  
c140 ..			.dmark: db "TCS"  
c143 f1			.pastdmark: pop af  
c144			endm  
# End of macro DMARK
c144						CALLMONITOR 
c144 cd 6f ee			call debug_vector  
c147				endm  
# End of macro CALLMONITOR
c147					endif 
c147			 
c147					FORTH_DSP 
c147 cd 1f 9c			call macro_forth_dsp 
c14a				endm 
# End of macro FORTH_DSP
c14a					 
c14a			; TODO check is string type 
c14a			 
c14a					FORTH_DSP_VALUEHL 
c14a cd 59 9c			call macro_dsp_valuehl 
c14d				endm 
# End of macro FORTH_DSP_VALUEHL
c14d			; get pointer to string in hl 
c14d			 
c14d					if DEBUG_FORTH_WORDS 
c14d						DMARK "TC1" 
c14d f5				push af  
c14e 3a 62 c1			ld a, (.dmark)  
c151 32 6b ee			ld (debug_mark),a  
c154 3a 63 c1			ld a, (.dmark+1)  
c157 32 6c ee			ld (debug_mark+1),a  
c15a 3a 64 c1			ld a, (.dmark+2)  
c15d 32 6d ee			ld (debug_mark+2),a  
c160 18 03			jr .pastdmark  
c162 ..			.dmark: db "TC1"  
c165 f1			.pastdmark: pop af  
c166			endm  
# End of macro DMARK
c166						CALLMONITOR 
c166 cd 6f ee			call debug_vector  
c169				endm  
# End of macro CALLMONITOR
c169					endif 
c169			 
c169					; first time in turn to upper case first char 
c169			 
c169 7e					ld a, (hl) 
c16a c3 f4 c1				jp .totsiptou 
c16d			 
c16d			 
c16d 7e			.tot:		ld a, (hl) 
c16e fe 00				cp 0 
c170 ca 38 c2				jp z, .totdone 
c173			 
c173					if DEBUG_FORTH_WORDS 
c173						DMARK "TC2" 
c173 f5				push af  
c174 3a 88 c1			ld a, (.dmark)  
c177 32 6b ee			ld (debug_mark),a  
c17a 3a 89 c1			ld a, (.dmark+1)  
c17d 32 6c ee			ld (debug_mark+1),a  
c180 3a 8a c1			ld a, (.dmark+2)  
c183 32 6d ee			ld (debug_mark+2),a  
c186 18 03			jr .pastdmark  
c188 ..			.dmark: db "TC2"  
c18b f1			.pastdmark: pop af  
c18c			endm  
# End of macro DMARK
c18c						CALLMONITOR 
c18c cd 6f ee			call debug_vector  
c18f				endm  
# End of macro CALLMONITOR
c18f					endif 
c18f					; check to see if current char is a space 
c18f			 
c18f fe 20				cp ' ' 
c191 28 21				jr z, .totsp 
c193 cd 59 8f				call to_lower 
c196					if DEBUG_FORTH_WORDS 
c196						DMARK "TC3" 
c196 f5				push af  
c197 3a ab c1			ld a, (.dmark)  
c19a 32 6b ee			ld (debug_mark),a  
c19d 3a ac c1			ld a, (.dmark+1)  
c1a0 32 6c ee			ld (debug_mark+1),a  
c1a3 3a ad c1			ld a, (.dmark+2)  
c1a6 32 6d ee			ld (debug_mark+2),a  
c1a9 18 03			jr .pastdmark  
c1ab ..			.dmark: db "TC3"  
c1ae f1			.pastdmark: pop af  
c1af			endm  
# End of macro DMARK
c1af						CALLMONITOR 
c1af cd 6f ee			call debug_vector  
c1b2				endm  
# End of macro CALLMONITOR
c1b2					endif 
c1b2 18 63				jr .totnxt 
c1b4			 
c1b4			.totsp:         ; on a space, find next char which should be upper 
c1b4			 
c1b4					if DEBUG_FORTH_WORDS 
c1b4						DMARK "TC4" 
c1b4 f5				push af  
c1b5 3a c9 c1			ld a, (.dmark)  
c1b8 32 6b ee			ld (debug_mark),a  
c1bb 3a ca c1			ld a, (.dmark+1)  
c1be 32 6c ee			ld (debug_mark+1),a  
c1c1 3a cb c1			ld a, (.dmark+2)  
c1c4 32 6d ee			ld (debug_mark+2),a  
c1c7 18 03			jr .pastdmark  
c1c9 ..			.dmark: db "TC4"  
c1cc f1			.pastdmark: pop af  
c1cd			endm  
# End of macro DMARK
c1cd						CALLMONITOR 
c1cd cd 6f ee			call debug_vector  
c1d0				endm  
# End of macro CALLMONITOR
c1d0					endif 
c1d0					;; 
c1d0			 
c1d0 fe 20				cp ' ' 
c1d2 20 20				jr nz, .totsiptou 
c1d4 23					inc hl 
c1d5 7e					ld a, (hl) 
c1d6					if DEBUG_FORTH_WORDS 
c1d6						DMARK "TC5" 
c1d6 f5				push af  
c1d7 3a eb c1			ld a, (.dmark)  
c1da 32 6b ee			ld (debug_mark),a  
c1dd 3a ec c1			ld a, (.dmark+1)  
c1e0 32 6c ee			ld (debug_mark+1),a  
c1e3 3a ed c1			ld a, (.dmark+2)  
c1e6 32 6d ee			ld (debug_mark+2),a  
c1e9 18 03			jr .pastdmark  
c1eb ..			.dmark: db "TC5"  
c1ee f1			.pastdmark: pop af  
c1ef			endm  
# End of macro DMARK
c1ef						CALLMONITOR 
c1ef cd 6f ee			call debug_vector  
c1f2				endm  
# End of macro CALLMONITOR
c1f2					endif 
c1f2 18 c0				jr .totsp 
c1f4 fe 00		.totsiptou:    cp 0 
c1f6 28 40				jr z, .totdone 
c1f8					; not space and not zero term so upper case it 
c1f8 cd 50 8f				call to_upper 
c1fb			 
c1fb					if DEBUG_FORTH_WORDS 
c1fb						DMARK "TC6" 
c1fb f5				push af  
c1fc 3a 10 c2			ld a, (.dmark)  
c1ff 32 6b ee			ld (debug_mark),a  
c202 3a 11 c2			ld a, (.dmark+1)  
c205 32 6c ee			ld (debug_mark+1),a  
c208 3a 12 c2			ld a, (.dmark+2)  
c20b 32 6d ee			ld (debug_mark+2),a  
c20e 18 03			jr .pastdmark  
c210 ..			.dmark: db "TC6"  
c213 f1			.pastdmark: pop af  
c214			endm  
# End of macro DMARK
c214						CALLMONITOR 
c214 cd 6f ee			call debug_vector  
c217				endm  
# End of macro CALLMONITOR
c217					endif 
c217			 
c217			 
c217			.totnxt: 
c217			 
c217 77					ld (hl), a 
c218 23					inc hl 
c219					if DEBUG_FORTH_WORDS 
c219						DMARK "TC7" 
c219 f5				push af  
c21a 3a 2e c2			ld a, (.dmark)  
c21d 32 6b ee			ld (debug_mark),a  
c220 3a 2f c2			ld a, (.dmark+1)  
c223 32 6c ee			ld (debug_mark+1),a  
c226 3a 30 c2			ld a, (.dmark+2)  
c229 32 6d ee			ld (debug_mark+2),a  
c22c 18 03			jr .pastdmark  
c22e ..			.dmark: db "TC7"  
c231 f1			.pastdmark: pop af  
c232			endm  
# End of macro DMARK
c232						CALLMONITOR 
c232 cd 6f ee			call debug_vector  
c235				endm  
# End of macro CALLMONITOR
c235					endif 
c235 c3 6d c1				jp .tot 
c238			 
c238					 
c238			 
c238			 
c238			; for each char convert to low 
c238					 
c238			.totdone: 
c238					if DEBUG_FORTH_WORDS 
c238						DMARK "TCd" 
c238 f5				push af  
c239 3a 4d c2			ld a, (.dmark)  
c23c 32 6b ee			ld (debug_mark),a  
c23f 3a 4e c2			ld a, (.dmark+1)  
c242 32 6c ee			ld (debug_mark+1),a  
c245 3a 4f c2			ld a, (.dmark+2)  
c248 32 6d ee			ld (debug_mark+2),a  
c24b 18 03			jr .pastdmark  
c24d ..			.dmark: db "TCd"  
c250 f1			.pastdmark: pop af  
c251			endm  
# End of macro DMARK
c251						CALLMONITOR 
c251 cd 6f ee			call debug_vector  
c254				endm  
# End of macro CALLMONITOR
c254					endif 
c254					NEXTW 
c254 c3 0f 9e			jp macro_next 
c257				endm 
# End of macro NEXTW
c257			 
c257			.SUBSTR: 
c257				CWHEAD .LEFT 52 "SUBSTR" 6 WORD_FLAG_CODE 
c257 48				db WORD_SYS_CORE+52             
c258 b5 c2			dw .LEFT            
c25a 07				db 6 + 1 
c25b .. 00			db "SUBSTR",0              
c262				endm 
# End of macro CWHEAD
c262			; | SUBSTR ( s u1 u2 -- s sb ) Push to TOS chars starting at position u1 and with length u2 from string s  | DONE 
c262			 
c262					if DEBUG_FORTH_WORDS_KEY 
c262						DMARK "SST" 
c262 f5				push af  
c263 3a 77 c2			ld a, (.dmark)  
c266 32 6b ee			ld (debug_mark),a  
c269 3a 78 c2			ld a, (.dmark+1)  
c26c 32 6c ee			ld (debug_mark+1),a  
c26f 3a 79 c2			ld a, (.dmark+2)  
c272 32 6d ee			ld (debug_mark+2),a  
c275 18 03			jr .pastdmark  
c277 ..			.dmark: db "SST"  
c27a f1			.pastdmark: pop af  
c27b			endm  
# End of macro DMARK
c27b						CALLMONITOR 
c27b cd 6f ee			call debug_vector  
c27e				endm  
# End of macro CALLMONITOR
c27e					endif 
c27e			; TODO check string type 
c27e					FORTH_DSP_VALUEHL 
c27e cd 59 9c			call macro_dsp_valuehl 
c281				endm 
# End of macro FORTH_DSP_VALUEHL
c281			 
c281 e5					push hl      ; string length 
c282			 
c282					FORTH_DSP_POP 
c282 cd 11 9d			call macro_forth_dsp_pop 
c285				endm 
# End of macro FORTH_DSP_POP
c285			 
c285					FORTH_DSP_VALUEHL 
c285 cd 59 9c			call macro_dsp_valuehl 
c288				endm 
# End of macro FORTH_DSP_VALUEHL
c288			 
c288 e5					push hl     ; start char 
c289			 
c289					FORTH_DSP_POP 
c289 cd 11 9d			call macro_forth_dsp_pop 
c28c				endm 
# End of macro FORTH_DSP_POP
c28c			 
c28c			 
c28c					FORTH_DSP_VALUE 
c28c cd 42 9c			call macro_forth_dsp_value 
c28f				endm 
# End of macro FORTH_DSP_VALUE
c28f			 
c28f d1					pop de    ; get start post offset 
c290			 
c290 19					add hl, de    ; starting offset 
c291			 
c291 c1					pop bc 
c292 c5					push bc      ; grab size of string 
c293			 
c293 e5					push hl    ; save string start  
c294			 
c294 26 00				ld h, 0 
c296 69					ld l, c 
c297 23					inc hl 
c298 23					inc hl 
c299			 
c299 cd b6 90				call malloc 
c29c				if DEBUG_FORTH_MALLOC_GUARD 
c29c cc cf cb				call z,malloc_error 
c29f				endif 
c29f			 
c29f eb					ex de, hl      ; save malloc area for string copy 
c2a0 e1					pop hl    ; get back source 
c2a1 c1					pop bc    ; get length of string back 
c2a2			 
c2a2 d5					push de    ; save malloc area for after we push 
c2a3 ed b0				ldir     ; copy substr 
c2a5			 
c2a5			 
c2a5 eb					ex de, hl 
c2a6 3e 00				ld a, 0 
c2a8 77					ld (hl), a   ; term substr 
c2a9			 
c2a9					 
c2a9 e1					pop hl    ; get malloc so we can push it 
c2aa e5					push hl   ; save so we can free it afterwards 
c2ab			 
c2ab cd d0 9a				call forth_push_str 
c2ae			 
c2ae e1					pop hl 
c2af cd 80 91				call free 
c2b2			 
c2b2					 
c2b2					 
c2b2			 
c2b2			 
c2b2					NEXTW 
c2b2 c3 0f 9e			jp macro_next 
c2b5				endm 
# End of macro NEXTW
c2b5			 
c2b5			.LEFT: 
c2b5				CWHEAD .RIGHT 52 "LEFT" 4 WORD_FLAG_CODE 
c2b5 48				db WORD_SYS_CORE+52             
c2b6 dd c2			dw .RIGHT            
c2b8 05				db 4 + 1 
c2b9 .. 00			db "LEFT",0              
c2be				endm 
# End of macro CWHEAD
c2be			; | LEFT ( s u -- s sub ) Push to TOS string u long starting from left of s  | TODO 
c2be					if DEBUG_FORTH_WORDS_KEY 
c2be						DMARK "LEF" 
c2be f5				push af  
c2bf 3a d3 c2			ld a, (.dmark)  
c2c2 32 6b ee			ld (debug_mark),a  
c2c5 3a d4 c2			ld a, (.dmark+1)  
c2c8 32 6c ee			ld (debug_mark+1),a  
c2cb 3a d5 c2			ld a, (.dmark+2)  
c2ce 32 6d ee			ld (debug_mark+2),a  
c2d1 18 03			jr .pastdmark  
c2d3 ..			.dmark: db "LEF"  
c2d6 f1			.pastdmark: pop af  
c2d7			endm  
# End of macro DMARK
c2d7						CALLMONITOR 
c2d7 cd 6f ee			call debug_vector  
c2da				endm  
# End of macro CALLMONITOR
c2da					endif 
c2da			 
c2da					NEXTW 
c2da c3 0f 9e			jp macro_next 
c2dd				endm 
# End of macro NEXTW
c2dd			.RIGHT: 
c2dd				CWHEAD .STR2NUM 52 "RIGHT" 5 WORD_FLAG_CODE 
c2dd 48				db WORD_SYS_CORE+52             
c2de 06 c3			dw .STR2NUM            
c2e0 06				db 5 + 1 
c2e1 .. 00			db "RIGHT",0              
c2e7				endm 
# End of macro CWHEAD
c2e7			; | RIGHT ( s u -- s sub ) Push to TOS string u long starting from right of s  | TODO 
c2e7					if DEBUG_FORTH_WORDS_KEY 
c2e7						DMARK "RIG" 
c2e7 f5				push af  
c2e8 3a fc c2			ld a, (.dmark)  
c2eb 32 6b ee			ld (debug_mark),a  
c2ee 3a fd c2			ld a, (.dmark+1)  
c2f1 32 6c ee			ld (debug_mark+1),a  
c2f4 3a fe c2			ld a, (.dmark+2)  
c2f7 32 6d ee			ld (debug_mark+2),a  
c2fa 18 03			jr .pastdmark  
c2fc ..			.dmark: db "RIG"  
c2ff f1			.pastdmark: pop af  
c300			endm  
# End of macro DMARK
c300						CALLMONITOR 
c300 cd 6f ee			call debug_vector  
c303				endm  
# End of macro CALLMONITOR
c303					endif 
c303			 
c303					NEXTW 
c303 c3 0f 9e			jp macro_next 
c306				endm 
# End of macro NEXTW
c306			 
c306			 
c306			.STR2NUM: 
c306				CWHEAD .NUM2STR 52 "STR2NUM" 7 WORD_FLAG_CODE 
c306 48				db WORD_SYS_CORE+52             
c307 92 c3			dw .NUM2STR            
c309 08				db 7 + 1 
c30a .. 00			db "STR2NUM",0              
c312				endm 
# End of macro CWHEAD
c312			; | STR2NUM ( s -- n ) Convert a string on TOS to number | DONE 
c312			 
c312			 
c312			; TODO STR type check to do 
c312					if DEBUG_FORTH_WORDS_KEY 
c312						DMARK "S2N" 
c312 f5				push af  
c313 3a 27 c3			ld a, (.dmark)  
c316 32 6b ee			ld (debug_mark),a  
c319 3a 28 c3			ld a, (.dmark+1)  
c31c 32 6c ee			ld (debug_mark+1),a  
c31f 3a 29 c3			ld a, (.dmark+2)  
c322 32 6d ee			ld (debug_mark+2),a  
c325 18 03			jr .pastdmark  
c327 ..			.dmark: db "S2N"  
c32a f1			.pastdmark: pop af  
c32b			endm  
# End of macro DMARK
c32b						CALLMONITOR 
c32b cd 6f ee			call debug_vector  
c32e				endm  
# End of macro CALLMONITOR
c32e					endif 
c32e			 
c32e					;FORTH_DSP 
c32e					FORTH_DSP_VALUE 
c32e cd 42 9c			call macro_forth_dsp_value 
c331				endm 
# End of macro FORTH_DSP_VALUE
c331					;inc hl 
c331			 
c331 eb					ex de, hl 
c332					if DEBUG_FORTH_WORDS 
c332						DMARK "S2a" 
c332 f5				push af  
c333 3a 47 c3			ld a, (.dmark)  
c336 32 6b ee			ld (debug_mark),a  
c339 3a 48 c3			ld a, (.dmark+1)  
c33c 32 6c ee			ld (debug_mark+1),a  
c33f 3a 49 c3			ld a, (.dmark+2)  
c342 32 6d ee			ld (debug_mark+2),a  
c345 18 03			jr .pastdmark  
c347 ..			.dmark: db "S2a"  
c34a f1			.pastdmark: pop af  
c34b			endm  
# End of macro DMARK
c34b						CALLMONITOR 
c34b cd 6f ee			call debug_vector  
c34e				endm  
# End of macro CALLMONITOR
c34e					endif 
c34e cd d8 8f				call string_to_uint16 
c351			 
c351					if DEBUG_FORTH_WORDS 
c351						DMARK "S2b" 
c351 f5				push af  
c352 3a 66 c3			ld a, (.dmark)  
c355 32 6b ee			ld (debug_mark),a  
c358 3a 67 c3			ld a, (.dmark+1)  
c35b 32 6c ee			ld (debug_mark+1),a  
c35e 3a 68 c3			ld a, (.dmark+2)  
c361 32 6d ee			ld (debug_mark+2),a  
c364 18 03			jr .pastdmark  
c366 ..			.dmark: db "S2b"  
c369 f1			.pastdmark: pop af  
c36a			endm  
# End of macro DMARK
c36a						CALLMONITOR 
c36a cd 6f ee			call debug_vector  
c36d				endm  
# End of macro CALLMONITOR
c36d					endif 
c36d			;		push hl 
c36d					FORTH_DSP_POP 
c36d cd 11 9d			call macro_forth_dsp_pop 
c370				endm 
# End of macro FORTH_DSP_POP
c370			;		pop hl 
c370					 
c370					if DEBUG_FORTH_WORDS 
c370						DMARK "S2b" 
c370 f5				push af  
c371 3a 85 c3			ld a, (.dmark)  
c374 32 6b ee			ld (debug_mark),a  
c377 3a 86 c3			ld a, (.dmark+1)  
c37a 32 6c ee			ld (debug_mark+1),a  
c37d 3a 87 c3			ld a, (.dmark+2)  
c380 32 6d ee			ld (debug_mark+2),a  
c383 18 03			jr .pastdmark  
c385 ..			.dmark: db "S2b"  
c388 f1			.pastdmark: pop af  
c389			endm  
# End of macro DMARK
c389						CALLMONITOR 
c389 cd 6f ee			call debug_vector  
c38c				endm  
# End of macro CALLMONITOR
c38c					endif 
c38c cd 62 9a				call forth_push_numhl	 
c38f			 
c38f				 
c38f				       NEXTW 
c38f c3 0f 9e			jp macro_next 
c392				endm 
# End of macro NEXTW
c392			.NUM2STR: 
c392				CWHEAD .CONCAT 52 "NUM2STR" 7 WORD_FLAG_CODE 
c392 48				db WORD_SYS_CORE+52             
c393 a1 c3			dw .CONCAT            
c395 08				db 7 + 1 
c396 .. 00			db "NUM2STR",0              
c39e				endm 
# End of macro CWHEAD
c39e			; | NUM2STR ( n -- s ) Convert a number on TOS to string | TODO 
c39e			 
c39e			;		; malloc a string to target 
c39e			;		ld hl, 10     ; TODO max string size should be fine 
c39e			;		call malloc 
c39e			;		push hl    ; save malloc location 
c39e			; 
c39e			; 
c39e			;; TODO check int type 
c39e			;		FORTH_DSP_VALUEHL 
c39e			;		ld a, l 
c39e			;		call DispAToASCII   
c39e			;;TODO need to chage above call to dump into string 
c39e			; 
c39e			; 
c39e			 
c39e				       NEXTW 
c39e c3 0f 9e			jp macro_next 
c3a1				endm 
# End of macro NEXTW
c3a1			 
c3a1			.CONCAT: 
c3a1				CWHEAD .FIND 52 "CONCAT" 6 WORD_FLAG_CODE 
c3a1 48				db WORD_SYS_CORE+52             
c3a2 54 c4			dw .FIND            
c3a4 07				db 6 + 1 
c3a5 .. 00			db "CONCAT",0              
c3ac				endm 
# End of macro CWHEAD
c3ac			; | CONCAT ( s1 s2 -- s3 ) A s1 + s2 is pushed onto the stack | DONE 
c3ac			 
c3ac			; TODO check string type 
c3ac			; TODO create macro to get pointer for next item on stack. Handy for lots of things 
c3ac			 
c3ac					if DEBUG_FORTH_WORDS_KEY 
c3ac						DMARK "CON" 
c3ac f5				push af  
c3ad 3a c1 c3			ld a, (.dmark)  
c3b0 32 6b ee			ld (debug_mark),a  
c3b3 3a c2 c3			ld a, (.dmark+1)  
c3b6 32 6c ee			ld (debug_mark+1),a  
c3b9 3a c3 c3			ld a, (.dmark+2)  
c3bc 32 6d ee			ld (debug_mark+2),a  
c3bf 18 03			jr .pastdmark  
c3c1 ..			.dmark: db "CON"  
c3c4 f1			.pastdmark: pop af  
c3c5			endm  
# End of macro DMARK
c3c5						CALLMONITOR 
c3c5 cd 6f ee			call debug_vector  
c3c8				endm  
# End of macro CALLMONITOR
c3c8					endif 
c3c8			 
c3c8			 
c3c8					FORTH_DSP_VALUE 
c3c8 cd 42 9c			call macro_forth_dsp_value 
c3cb				endm 
# End of macro FORTH_DSP_VALUE
c3cb e5					push hl   ; s2 
c3cc			 
c3cc					FORTH_DSP_POP 
c3cc cd 11 9d			call macro_forth_dsp_pop 
c3cf				endm 
# End of macro FORTH_DSP_POP
c3cf			 
c3cf					FORTH_DSP_VALUE 
c3cf cd 42 9c			call macro_forth_dsp_value 
c3d2				endm 
# End of macro FORTH_DSP_VALUE
c3d2			 
c3d2 e5					push hl   ; s1 
c3d3			 
c3d3					FORTH_DSP_POP 
c3d3 cd 11 9d			call macro_forth_dsp_pop 
c3d6				endm 
# End of macro FORTH_DSP_POP
c3d6					 
c3d6			 
c3d6					; copy s1 
c3d6			 
c3d6				 
c3d6					; save ptr 
c3d6 e1					pop hl  
c3d7 e5					push hl 
c3d8 3e 00				ld a, 0 
c3da cd 4c 90				call strlent 
c3dd					;inc hl    ; zer0 
c3dd 06 00				ld b, 0 
c3df 4d					ld c, l 
c3e0 e1					pop hl		 
c3e1 11 c1 e2				ld de, scratch	 
c3e4					if DEBUG_FORTH_WORDS 
c3e4						DMARK "CO1" 
c3e4 f5				push af  
c3e5 3a f9 c3			ld a, (.dmark)  
c3e8 32 6b ee			ld (debug_mark),a  
c3eb 3a fa c3			ld a, (.dmark+1)  
c3ee 32 6c ee			ld (debug_mark+1),a  
c3f1 3a fb c3			ld a, (.dmark+2)  
c3f4 32 6d ee			ld (debug_mark+2),a  
c3f7 18 03			jr .pastdmark  
c3f9 ..			.dmark: db "CO1"  
c3fc f1			.pastdmark: pop af  
c3fd			endm  
# End of macro DMARK
c3fd						CALLMONITOR 
c3fd cd 6f ee			call debug_vector  
c400				endm  
# End of macro CALLMONITOR
c400					endif 
c400 ed b0				ldir 
c402			 
c402 e1					pop hl 
c403 e5					push hl 
c404 d5					push de 
c405			 
c405			 
c405 3e 00				ld a, 0 
c407 cd 4c 90				call strlent 
c40a 23					inc hl    ; zer0 
c40b 23					inc hl 
c40c 06 00				ld b, 0 
c40e 4d					ld c, l 
c40f d1					pop de 
c410 e1					pop hl		 
c411					if DEBUG_FORTH_WORDS 
c411						DMARK "CO2" 
c411 f5				push af  
c412 3a 26 c4			ld a, (.dmark)  
c415 32 6b ee			ld (debug_mark),a  
c418 3a 27 c4			ld a, (.dmark+1)  
c41b 32 6c ee			ld (debug_mark+1),a  
c41e 3a 28 c4			ld a, (.dmark+2)  
c421 32 6d ee			ld (debug_mark+2),a  
c424 18 03			jr .pastdmark  
c426 ..			.dmark: db "CO2"  
c429 f1			.pastdmark: pop af  
c42a			endm  
# End of macro DMARK
c42a						CALLMONITOR 
c42a cd 6f ee			call debug_vector  
c42d				endm  
# End of macro CALLMONITOR
c42d					endif 
c42d ed b0				ldir 
c42f			 
c42f			 
c42f			 
c42f 21 c1 e2				ld hl, scratch 
c432					if DEBUG_FORTH_WORDS 
c432						DMARK "CO5" 
c432 f5				push af  
c433 3a 47 c4			ld a, (.dmark)  
c436 32 6b ee			ld (debug_mark),a  
c439 3a 48 c4			ld a, (.dmark+1)  
c43c 32 6c ee			ld (debug_mark+1),a  
c43f 3a 49 c4			ld a, (.dmark+2)  
c442 32 6d ee			ld (debug_mark+2),a  
c445 18 03			jr .pastdmark  
c447 ..			.dmark: db "CO5"  
c44a f1			.pastdmark: pop af  
c44b			endm  
# End of macro DMARK
c44b						CALLMONITOR 
c44b cd 6f ee			call debug_vector  
c44e				endm  
# End of macro CALLMONITOR
c44e					endif 
c44e			 
c44e cd d0 9a				call forth_push_str 
c451			 
c451			 
c451			 
c451			 
c451				       NEXTW 
c451 c3 0f 9e			jp macro_next 
c454				endm 
# End of macro NEXTW
c454			 
c454			 
c454			.FIND: 
c454				CWHEAD .LEN 55 "FIND" 4 WORD_FLAG_CODE 
c454 4b				db WORD_SYS_CORE+55             
c455 12 c5			dw .LEN            
c457 05				db 4 + 1 
c458 .. 00			db "FIND",0              
c45d				endm 
# End of macro CWHEAD
c45d			; | FIND ( s c -- s u ) Search the string s for the char c and push the position of the first occurance to TOS | DONE 
c45d			 
c45d					if DEBUG_FORTH_WORDS_KEY 
c45d						DMARK "FND" 
c45d f5				push af  
c45e 3a 72 c4			ld a, (.dmark)  
c461 32 6b ee			ld (debug_mark),a  
c464 3a 73 c4			ld a, (.dmark+1)  
c467 32 6c ee			ld (debug_mark+1),a  
c46a 3a 74 c4			ld a, (.dmark+2)  
c46d 32 6d ee			ld (debug_mark+2),a  
c470 18 03			jr .pastdmark  
c472 ..			.dmark: db "FND"  
c475 f1			.pastdmark: pop af  
c476			endm  
# End of macro DMARK
c476						CALLMONITOR 
c476 cd 6f ee			call debug_vector  
c479				endm  
# End of macro CALLMONITOR
c479					endif 
c479			 
c479			; TODO check string type 
c479					FORTH_DSP_VALUE 
c479 cd 42 9c			call macro_forth_dsp_value 
c47c				endm 
# End of macro FORTH_DSP_VALUE
c47c			 
c47c e5					push hl    
c47d 7e					ld a,(hl)    ; char to find   
c47e			; TODO change char to substr 
c47e			 
c47e f5					push af 
c47f					 
c47f			 
c47f			 
c47f					if DEBUG_FORTH_WORDS 
c47f						DMARK "FN1" 
c47f f5				push af  
c480 3a 94 c4			ld a, (.dmark)  
c483 32 6b ee			ld (debug_mark),a  
c486 3a 95 c4			ld a, (.dmark+1)  
c489 32 6c ee			ld (debug_mark+1),a  
c48c 3a 96 c4			ld a, (.dmark+2)  
c48f 32 6d ee			ld (debug_mark+2),a  
c492 18 03			jr .pastdmark  
c494 ..			.dmark: db "FN1"  
c497 f1			.pastdmark: pop af  
c498			endm  
# End of macro DMARK
c498						CALLMONITOR 
c498 cd 6f ee			call debug_vector  
c49b				endm  
# End of macro CALLMONITOR
c49b					endif 
c49b			 
c49b					FORTH_DSP_POP 
c49b cd 11 9d			call macro_forth_dsp_pop 
c49e				endm 
# End of macro FORTH_DSP_POP
c49e			 
c49e					; string to search 
c49e			 
c49e					FORTH_DSP_VALUE 
c49e cd 42 9c			call macro_forth_dsp_value 
c4a1				endm 
# End of macro FORTH_DSP_VALUE
c4a1			 
c4a1 d1					pop de  ; d is char to find  
c4a2			 
c4a2					if DEBUG_FORTH_WORDS 
c4a2						DMARK "FN2" 
c4a2 f5				push af  
c4a3 3a b7 c4			ld a, (.dmark)  
c4a6 32 6b ee			ld (debug_mark),a  
c4a9 3a b8 c4			ld a, (.dmark+1)  
c4ac 32 6c ee			ld (debug_mark+1),a  
c4af 3a b9 c4			ld a, (.dmark+2)  
c4b2 32 6d ee			ld (debug_mark+2),a  
c4b5 18 03			jr .pastdmark  
c4b7 ..			.dmark: db "FN2"  
c4ba f1			.pastdmark: pop af  
c4bb			endm  
# End of macro DMARK
c4bb						CALLMONITOR 
c4bb cd 6f ee			call debug_vector  
c4be				endm  
# End of macro CALLMONITOR
c4be					endif 
c4be					 
c4be 01 00 00				ld bc, 0 
c4c1 7e			.findchar:      ld a,(hl) 
c4c2 fe 00				cp 0   		 
c4c4 28 27				jr z, .finddone     
c4c6 ba					cp d 
c4c7 28 20				jr z, .foundchar 
c4c9 03					inc bc 
c4ca 23					inc hl 
c4cb					if DEBUG_FORTH_WORDS 
c4cb						DMARK "FN3" 
c4cb f5				push af  
c4cc 3a e0 c4			ld a, (.dmark)  
c4cf 32 6b ee			ld (debug_mark),a  
c4d2 3a e1 c4			ld a, (.dmark+1)  
c4d5 32 6c ee			ld (debug_mark+1),a  
c4d8 3a e2 c4			ld a, (.dmark+2)  
c4db 32 6d ee			ld (debug_mark+2),a  
c4de 18 03			jr .pastdmark  
c4e0 ..			.dmark: db "FN3"  
c4e3 f1			.pastdmark: pop af  
c4e4			endm  
# End of macro DMARK
c4e4						CALLMONITOR 
c4e4 cd 6f ee			call debug_vector  
c4e7				endm  
# End of macro CALLMONITOR
c4e7					endif 
c4e7 18 d8				jr .findchar 
c4e9			 
c4e9			 
c4e9 c5			.foundchar:	push bc 
c4ea e1					pop hl 
c4eb 18 03				jr .findexit 
c4ed			 
c4ed			 
c4ed							 
c4ed			 
c4ed			.finddone:     ; got to end of string with no find 
c4ed 21 00 00				ld hl, 0 
c4f0			.findexit: 
c4f0			 
c4f0					if DEBUG_FORTH_WORDS 
c4f0						DMARK "FNd" 
c4f0 f5				push af  
c4f1 3a 05 c5			ld a, (.dmark)  
c4f4 32 6b ee			ld (debug_mark),a  
c4f7 3a 06 c5			ld a, (.dmark+1)  
c4fa 32 6c ee			ld (debug_mark+1),a  
c4fd 3a 07 c5			ld a, (.dmark+2)  
c500 32 6d ee			ld (debug_mark+2),a  
c503 18 03			jr .pastdmark  
c505 ..			.dmark: db "FNd"  
c508 f1			.pastdmark: pop af  
c509			endm  
# End of macro DMARK
c509						CALLMONITOR 
c509 cd 6f ee			call debug_vector  
c50c				endm  
# End of macro CALLMONITOR
c50c					endif 
c50c cd 62 9a			call forth_push_numhl 
c50f			 
c50f				       NEXTW 
c50f c3 0f 9e			jp macro_next 
c512				endm 
# End of macro NEXTW
c512			 
c512			.LEN: 
c512				CWHEAD .ASC 56 "COUNT" 5 WORD_FLAG_CODE 
c512 4c				db WORD_SYS_CORE+56             
c513 7c c5			dw .ASC            
c515 06				db 5 + 1 
c516 .. 00			db "COUNT",0              
c51c				endm 
# End of macro CWHEAD
c51c			; | COUNT (  str -- str u1 ) Push the length of the string str on TOS as u1 | DONE 
c51c			 
c51c					if DEBUG_FORTH_WORDS_KEY 
c51c						DMARK "CNT" 
c51c f5				push af  
c51d 3a 31 c5			ld a, (.dmark)  
c520 32 6b ee			ld (debug_mark),a  
c523 3a 32 c5			ld a, (.dmark+1)  
c526 32 6c ee			ld (debug_mark+1),a  
c529 3a 33 c5			ld a, (.dmark+2)  
c52c 32 6d ee			ld (debug_mark+2),a  
c52f 18 03			jr .pastdmark  
c531 ..			.dmark: db "CNT"  
c534 f1			.pastdmark: pop af  
c535			endm  
# End of macro DMARK
c535						CALLMONITOR 
c535 cd 6f ee			call debug_vector  
c538				endm  
# End of macro CALLMONITOR
c538					endif 
c538			; TODO check string type 
c538					FORTH_DSP_VALUE 
c538 cd 42 9c			call macro_forth_dsp_value 
c53b				endm 
# End of macro FORTH_DSP_VALUE
c53b			 
c53b			 
c53b					if DEBUG_FORTH_WORDS 
c53b						DMARK "CN?" 
c53b f5				push af  
c53c 3a 50 c5			ld a, (.dmark)  
c53f 32 6b ee			ld (debug_mark),a  
c542 3a 51 c5			ld a, (.dmark+1)  
c545 32 6c ee			ld (debug_mark+1),a  
c548 3a 52 c5			ld a, (.dmark+2)  
c54b 32 6d ee			ld (debug_mark+2),a  
c54e 18 03			jr .pastdmark  
c550 ..			.dmark: db "CN?"  
c553 f1			.pastdmark: pop af  
c554			endm  
# End of macro DMARK
c554						CALLMONITOR 
c554 cd 6f ee			call debug_vector  
c557				endm  
# End of macro CALLMONITOR
c557					endif 
c557 cd 41 90				call strlenz 
c55a					if DEBUG_FORTH_WORDS 
c55a						DMARK "CNl" 
c55a f5				push af  
c55b 3a 6f c5			ld a, (.dmark)  
c55e 32 6b ee			ld (debug_mark),a  
c561 3a 70 c5			ld a, (.dmark+1)  
c564 32 6c ee			ld (debug_mark+1),a  
c567 3a 71 c5			ld a, (.dmark+2)  
c56a 32 6d ee			ld (debug_mark+2),a  
c56d 18 03			jr .pastdmark  
c56f ..			.dmark: db "CNl"  
c572 f1			.pastdmark: pop af  
c573			endm  
# End of macro DMARK
c573						CALLMONITOR 
c573 cd 6f ee			call debug_vector  
c576				endm  
# End of macro CALLMONITOR
c576					endif 
c576			 
c576 cd 62 9a				call forth_push_numhl 
c579			 
c579			 
c579			 
c579				       NEXTW 
c579 c3 0f 9e			jp macro_next 
c57c				endm 
# End of macro NEXTW
c57c			.ASC: 
c57c				CWHEAD .CHR 57 "ASC" 3 WORD_FLAG_CODE 
c57c 4d				db WORD_SYS_CORE+57             
c57d ea c5			dw .CHR            
c57f 04				db 3 + 1 
c580 .. 00			db "ASC",0              
c584				endm 
# End of macro CWHEAD
c584			; | ASC ( u -- n ) Get the ASCII value of the first character of the string on TOS | DONE 
c584					if DEBUG_FORTH_WORDS_KEY 
c584						DMARK "ASC" 
c584 f5				push af  
c585 3a 99 c5			ld a, (.dmark)  
c588 32 6b ee			ld (debug_mark),a  
c58b 3a 9a c5			ld a, (.dmark+1)  
c58e 32 6c ee			ld (debug_mark+1),a  
c591 3a 9b c5			ld a, (.dmark+2)  
c594 32 6d ee			ld (debug_mark+2),a  
c597 18 03			jr .pastdmark  
c599 ..			.dmark: db "ASC"  
c59c f1			.pastdmark: pop af  
c59d			endm  
# End of macro DMARK
c59d						CALLMONITOR 
c59d cd 6f ee			call debug_vector  
c5a0				endm  
# End of macro CALLMONITOR
c5a0					endif 
c5a0					FORTH_DSP_VALUE 
c5a0 cd 42 9c			call macro_forth_dsp_value 
c5a3				endm 
# End of macro FORTH_DSP_VALUE
c5a3					;v5 FORTH_DSP_VALUE 
c5a3			;		inc hl      ; now at start of numeric as string 
c5a3			 
c5a3 e5					push hl 
c5a4			 
c5a4					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c5a4 cd 11 9d			call macro_forth_dsp_pop 
c5a7				endm 
# End of macro FORTH_DSP_POP
c5a7			 
c5a7 e1					pop hl 
c5a8			 
c5a8					if DEBUG_FORTH_WORDS 
c5a8						DMARK "AS1" 
c5a8 f5				push af  
c5a9 3a bd c5			ld a, (.dmark)  
c5ac 32 6b ee			ld (debug_mark),a  
c5af 3a be c5			ld a, (.dmark+1)  
c5b2 32 6c ee			ld (debug_mark+1),a  
c5b5 3a bf c5			ld a, (.dmark+2)  
c5b8 32 6d ee			ld (debug_mark+2),a  
c5bb 18 03			jr .pastdmark  
c5bd ..			.dmark: db "AS1"  
c5c0 f1			.pastdmark: pop af  
c5c1			endm  
# End of macro DMARK
c5c1						CALLMONITOR 
c5c1 cd 6f ee			call debug_vector  
c5c4				endm  
# End of macro CALLMONITOR
c5c4					endif 
c5c4					; push the content of a onto the stack as a value 
c5c4			 
c5c4 7e					ld a,(hl)   ; get char 
c5c5 26 00				ld h,0 
c5c7 6f					ld l,a 
c5c8					if DEBUG_FORTH_WORDS 
c5c8						DMARK "AS2" 
c5c8 f5				push af  
c5c9 3a dd c5			ld a, (.dmark)  
c5cc 32 6b ee			ld (debug_mark),a  
c5cf 3a de c5			ld a, (.dmark+1)  
c5d2 32 6c ee			ld (debug_mark+1),a  
c5d5 3a df c5			ld a, (.dmark+2)  
c5d8 32 6d ee			ld (debug_mark+2),a  
c5db 18 03			jr .pastdmark  
c5dd ..			.dmark: db "AS2"  
c5e0 f1			.pastdmark: pop af  
c5e1			endm  
# End of macro DMARK
c5e1						CALLMONITOR 
c5e1 cd 6f ee			call debug_vector  
c5e4				endm  
# End of macro CALLMONITOR
c5e4					endif 
c5e4 cd 62 9a				call forth_push_numhl 
c5e7			 
c5e7				       NEXTW 
c5e7 c3 0f 9e			jp macro_next 
c5ea				endm 
# End of macro NEXTW
c5ea			 
c5ea			.CHR: 
c5ea				CWHEAD .ENDSTR 57 "CHR" 3 WORD_FLAG_CODE 
c5ea 4d				db WORD_SYS_CORE+57             
c5eb 26 c6			dw .ENDSTR            
c5ed 04				db 3 + 1 
c5ee .. 00			db "CHR",0              
c5f2				endm 
# End of macro CWHEAD
c5f2			; | CHR ( u -- n ) The ASCII character value of u is turned into a string n on the stack | DONE 
c5f2					if DEBUG_FORTH_WORDS_KEY 
c5f2						DMARK "CHR" 
c5f2 f5				push af  
c5f3 3a 07 c6			ld a, (.dmark)  
c5f6 32 6b ee			ld (debug_mark),a  
c5f9 3a 08 c6			ld a, (.dmark+1)  
c5fc 32 6c ee			ld (debug_mark+1),a  
c5ff 3a 09 c6			ld a, (.dmark+2)  
c602 32 6d ee			ld (debug_mark+2),a  
c605 18 03			jr .pastdmark  
c607 ..			.dmark: db "CHR"  
c60a f1			.pastdmark: pop af  
c60b			endm  
# End of macro DMARK
c60b						CALLMONITOR 
c60b cd 6f ee			call debug_vector  
c60e				endm  
# End of macro CALLMONITOR
c60e					endif 
c60e					FORTH_DSP_VALUEHL 
c60e cd 59 9c			call macro_dsp_valuehl 
c611				endm 
# End of macro FORTH_DSP_VALUEHL
c611			 
c611					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c611 cd 11 9d			call macro_forth_dsp_pop 
c614				endm 
# End of macro FORTH_DSP_POP
c614			 
c614					; save asci byte as a zero term string and push string 
c614			 
c614 7d					ld a,l 
c615 32 c1 e2				ld (scratch), a 
c618			 
c618 3e 00				ld a, 0 
c61a 32 c2 e2				ld (scratch+1), a 
c61d			 
c61d 21 c1 e2				ld hl, scratch 
c620 cd d0 9a				call forth_push_str 
c623			 
c623			 
c623				       NEXTW 
c623 c3 0f 9e			jp macro_next 
c626				endm 
# End of macro NEXTW
c626			 
c626			 
c626			 
c626			 
c626			.ENDSTR: 
c626			; eof 
c626			 
# End of file forth_words_str.asm
c626			include "forth_words_key.asm" 
c626			 
c626			; | ## Keyboard Words 
c626			 
c626			.KEY: 
c626				CWHEAD .WAITK 42 "KEY" 3 WORD_FLAG_CODE 
c626 3e				db WORD_SYS_CORE+42             
c627 56 c6			dw .WAITK            
c629 04				db 3 + 1 
c62a .. 00			db "KEY",0              
c62e				endm 
# End of macro CWHEAD
c62e			; | KEY ( -- w f ) Scan for keypress but do not wait true if next item on stack is key press | TODO 
c62e			 
c62e					if DEBUG_FORTH_WORDS_KEY 
c62e						DMARK "KEY" 
c62e f5				push af  
c62f 3a 43 c6			ld a, (.dmark)  
c632 32 6b ee			ld (debug_mark),a  
c635 3a 44 c6			ld a, (.dmark+1)  
c638 32 6c ee			ld (debug_mark+1),a  
c63b 3a 45 c6			ld a, (.dmark+2)  
c63e 32 6d ee			ld (debug_mark+2),a  
c641 18 03			jr .pastdmark  
c643 ..			.dmark: db "KEY"  
c646 f1			.pastdmark: pop af  
c647			endm  
# End of macro DMARK
c647						CALLMONITOR 
c647 cd 6f ee			call debug_vector  
c64a				endm  
# End of macro CALLMONITOR
c64a					endif 
c64a			; TODO currently waits 
c64a cd f4 dc				call cin 
c64d					;call cin_wait 
c64d 6f					ld l, a 
c64e 26 00				ld h, 0 
c650 cd 62 9a				call forth_push_numhl 
c653					NEXTW 
c653 c3 0f 9e			jp macro_next 
c656				endm 
# End of macro NEXTW
c656			.WAITK: 
c656				CWHEAD .ACCEPT 43 "WAITK" 5 WORD_FLAG_CODE 
c656 3f				db WORD_SYS_CORE+43             
c657 88 c6			dw .ACCEPT            
c659 06				db 5 + 1 
c65a .. 00			db "WAITK",0              
c660				endm 
# End of macro CWHEAD
c660			; | WAITK ( -- w ) Wait for keypress TOS is key press | DONE 
c660					if DEBUG_FORTH_WORDS_KEY 
c660						DMARK "WAI" 
c660 f5				push af  
c661 3a 75 c6			ld a, (.dmark)  
c664 32 6b ee			ld (debug_mark),a  
c667 3a 76 c6			ld a, (.dmark+1)  
c66a 32 6c ee			ld (debug_mark+1),a  
c66d 3a 77 c6			ld a, (.dmark+2)  
c670 32 6d ee			ld (debug_mark+2),a  
c673 18 03			jr .pastdmark  
c675 ..			.dmark: db "WAI"  
c678 f1			.pastdmark: pop af  
c679			endm  
# End of macro DMARK
c679						CALLMONITOR 
c679 cd 6f ee			call debug_vector  
c67c				endm  
# End of macro CALLMONITOR
c67c					endif 
c67c cd ee dc				call cin_wait 
c67f 6f					ld l, a 
c680 26 00				ld h, 0 
c682 cd 62 9a				call forth_push_numhl 
c685					NEXTW 
c685 c3 0f 9e			jp macro_next 
c688				endm 
# End of macro NEXTW
c688			.ACCEPT: 
c688				CWHEAD .EDIT 44 "ACCEPT" 6 WORD_FLAG_CODE 
c688 40				db WORD_SYS_CORE+44             
c689 e6 c6			dw .EDIT            
c68b 07				db 6 + 1 
c68c .. 00			db "ACCEPT",0              
c693				endm 
# End of macro CWHEAD
c693			; | ACCEPT ( -- w ) Prompt for text input and push pointer to string | DONE 
c693					; TODO crashes on push 
c693					if DEBUG_FORTH_WORDS_KEY 
c693						DMARK "ACC" 
c693 f5				push af  
c694 3a a8 c6			ld a, (.dmark)  
c697 32 6b ee			ld (debug_mark),a  
c69a 3a a9 c6			ld a, (.dmark+1)  
c69d 32 6c ee			ld (debug_mark+1),a  
c6a0 3a aa c6			ld a, (.dmark+2)  
c6a3 32 6d ee			ld (debug_mark+2),a  
c6a6 18 03			jr .pastdmark  
c6a8 ..			.dmark: db "ACC"  
c6ab f1			.pastdmark: pop af  
c6ac			endm  
# End of macro DMARK
c6ac						CALLMONITOR 
c6ac cd 6f ee			call debug_vector  
c6af				endm  
# End of macro CALLMONITOR
c6af					endif 
c6af 21 bf e4				ld hl, os_input 
c6b2 3e 00				ld a, 0 
c6b4 77					ld (hl),a 
c6b5 3a 5e ea				ld a,(f_cursor_ptr) 
c6b8 16 64				ld d, 100 
c6ba 0e 00				ld c, 0 
c6bc 1e 28				ld e, 40 
c6be cd 08 8d				call input_str 
c6c1					; TODO perhaps do a type check and wrap in quotes if not a number 
c6c1 21 bf e4				ld hl, os_input 
c6c4					if DEBUG_FORTH_WORDS 
c6c4						DMARK "AC1" 
c6c4 f5				push af  
c6c5 3a d9 c6			ld a, (.dmark)  
c6c8 32 6b ee			ld (debug_mark),a  
c6cb 3a da c6			ld a, (.dmark+1)  
c6ce 32 6c ee			ld (debug_mark+1),a  
c6d1 3a db c6			ld a, (.dmark+2)  
c6d4 32 6d ee			ld (debug_mark+2),a  
c6d7 18 03			jr .pastdmark  
c6d9 ..			.dmark: db "AC1"  
c6dc f1			.pastdmark: pop af  
c6dd			endm  
# End of macro DMARK
c6dd						CALLMONITOR 
c6dd cd 6f ee			call debug_vector  
c6e0				endm  
# End of macro CALLMONITOR
c6e0					endif 
c6e0 cd d0 9a				call forth_push_str 
c6e3					NEXTW 
c6e3 c3 0f 9e			jp macro_next 
c6e6				endm 
# End of macro NEXTW
c6e6			 
c6e6			.EDIT: 
c6e6				CWHEAD .DEDIT 44 "EDIT" 4 WORD_FLAG_CODE 
c6e6 40				db WORD_SYS_CORE+44             
c6e7 88 c7			dw .DEDIT            
c6e9 05				db 4 + 1 
c6ea .. 00			db "EDIT",0              
c6ef				endm 
# End of macro CWHEAD
c6ef			; | EDIT ( u -- u ) Takes string on TOS and allows editing of it. Pushes it back once done. | DONE 
c6ef			 
c6ef					; TODO does not copy from stack 
c6ef					if DEBUG_FORTH_WORDS_KEY 
c6ef						DMARK "EDT" 
c6ef f5				push af  
c6f0 3a 04 c7			ld a, (.dmark)  
c6f3 32 6b ee			ld (debug_mark),a  
c6f6 3a 05 c7			ld a, (.dmark+1)  
c6f9 32 6c ee			ld (debug_mark+1),a  
c6fc 3a 06 c7			ld a, (.dmark+2)  
c6ff 32 6d ee			ld (debug_mark+2),a  
c702 18 03			jr .pastdmark  
c704 ..			.dmark: db "EDT"  
c707 f1			.pastdmark: pop af  
c708			endm  
# End of macro DMARK
c708						CALLMONITOR 
c708 cd 6f ee			call debug_vector  
c70b				endm  
# End of macro CALLMONITOR
c70b					endif 
c70b			 
c70b					;FORTH_DSP 
c70b					FORTH_DSP_VALUEHL 
c70b cd 59 9c			call macro_dsp_valuehl 
c70e				endm 
# End of macro FORTH_DSP_VALUEHL
c70e			;		inc hl    ; TODO do type check 
c70e			 
c70e			;		call get_word_hl 
c70e e5					push hl 
c70f					if DEBUG_FORTH_WORDS 
c70f						DMARK "EDp" 
c70f f5				push af  
c710 3a 24 c7			ld a, (.dmark)  
c713 32 6b ee			ld (debug_mark),a  
c716 3a 25 c7			ld a, (.dmark+1)  
c719 32 6c ee			ld (debug_mark+1),a  
c71c 3a 26 c7			ld a, (.dmark+2)  
c71f 32 6d ee			ld (debug_mark+2),a  
c722 18 03			jr .pastdmark  
c724 ..			.dmark: db "EDp"  
c727 f1			.pastdmark: pop af  
c728			endm  
# End of macro DMARK
c728						CALLMONITOR 
c728 cd 6f ee			call debug_vector  
c72b				endm  
# End of macro CALLMONITOR
c72b					endif 
c72b				;	ld a, 0 
c72b cd 41 90				call strlenz 
c72e 23					inc hl 
c72f			 
c72f 06 00				ld b, 0 
c731 4d					ld c, l 
c732			 
c732 e1					pop hl 
c733 11 bf e4				ld de, os_input 
c736					if DEBUG_FORTH_WORDS_KEY 
c736						DMARK "EDc" 
c736 f5				push af  
c737 3a 4b c7			ld a, (.dmark)  
c73a 32 6b ee			ld (debug_mark),a  
c73d 3a 4c c7			ld a, (.dmark+1)  
c740 32 6c ee			ld (debug_mark+1),a  
c743 3a 4d c7			ld a, (.dmark+2)  
c746 32 6d ee			ld (debug_mark+2),a  
c749 18 03			jr .pastdmark  
c74b ..			.dmark: db "EDc"  
c74e f1			.pastdmark: pop af  
c74f			endm  
# End of macro DMARK
c74f						CALLMONITOR 
c74f cd 6f ee			call debug_vector  
c752				endm  
# End of macro CALLMONITOR
c752					endif 
c752 ed b0				ldir 
c754			 
c754			 
c754 21 bf e4				ld hl, os_input 
c757					;ld a, 0 
c757					;ld (hl),a 
c757 3a 5e ea				ld a,(f_cursor_ptr) 
c75a 16 64				ld d, 100 
c75c 0e 00				ld c, 0 
c75e 1e 28				ld e, 40 
c760 cd 08 8d				call input_str 
c763					; TODO perhaps do a type check and wrap in quotes if not a number 
c763 21 bf e4				ld hl, os_input 
c766					if DEBUG_FORTH_WORDS 
c766						DMARK "ED1" 
c766 f5				push af  
c767 3a 7b c7			ld a, (.dmark)  
c76a 32 6b ee			ld (debug_mark),a  
c76d 3a 7c c7			ld a, (.dmark+1)  
c770 32 6c ee			ld (debug_mark+1),a  
c773 3a 7d c7			ld a, (.dmark+2)  
c776 32 6d ee			ld (debug_mark+2),a  
c779 18 03			jr .pastdmark  
c77b ..			.dmark: db "ED1"  
c77e f1			.pastdmark: pop af  
c77f			endm  
# End of macro DMARK
c77f						CALLMONITOR 
c77f cd 6f ee			call debug_vector  
c782				endm  
# End of macro CALLMONITOR
c782					endif 
c782 cd d0 9a				call forth_push_str 
c785					NEXTW 
c785 c3 0f 9e			jp macro_next 
c788				endm 
# End of macro NEXTW
c788			 
c788			.DEDIT: 
c788				CWHEAD .ENDKEY 44 "DEDIT" 5 WORD_FLAG_CODE 
c788 40				db WORD_SYS_CORE+44             
c789 ea c7			dw .ENDKEY            
c78b 06				db 5 + 1 
c78c .. 00			db "DEDIT",0              
c792				endm 
# End of macro CWHEAD
c792			; | DEDIT ( ptr --  ) Takes an address for direct editing in memory. | TO TEST 
c792			 
c792					; TODO does not copy from stack 
c792					if DEBUG_FORTH_WORDS_KEY 
c792						DMARK "DED" 
c792 f5				push af  
c793 3a a7 c7			ld a, (.dmark)  
c796 32 6b ee			ld (debug_mark),a  
c799 3a a8 c7			ld a, (.dmark+1)  
c79c 32 6c ee			ld (debug_mark+1),a  
c79f 3a a9 c7			ld a, (.dmark+2)  
c7a2 32 6d ee			ld (debug_mark+2),a  
c7a5 18 03			jr .pastdmark  
c7a7 ..			.dmark: db "DED"  
c7aa f1			.pastdmark: pop af  
c7ab			endm  
# End of macro DMARK
c7ab						CALLMONITOR 
c7ab cd 6f ee			call debug_vector  
c7ae				endm  
# End of macro CALLMONITOR
c7ae					endif 
c7ae			 
c7ae					;FORTH_DSP 
c7ae					FORTH_DSP_VALUEHL 
c7ae cd 59 9c			call macro_dsp_valuehl 
c7b1				endm 
# End of macro FORTH_DSP_VALUEHL
c7b1			;		inc hl    ; TODO do type check 
c7b1			 
c7b1			;		call get_word_hl 
c7b1 e5					push hl 
c7b2 e5					push hl 
c7b3					FORTH_DSP_POP 
c7b3 cd 11 9d			call macro_forth_dsp_pop 
c7b6				endm 
# End of macro FORTH_DSP_POP
c7b6 e1					pop hl 
c7b7					if DEBUG_FORTH_WORDS 
c7b7						DMARK "EDp" 
c7b7 f5				push af  
c7b8 3a cc c7			ld a, (.dmark)  
c7bb 32 6b ee			ld (debug_mark),a  
c7be 3a cd c7			ld a, (.dmark+1)  
c7c1 32 6c ee			ld (debug_mark+1),a  
c7c4 3a ce c7			ld a, (.dmark+2)  
c7c7 32 6d ee			ld (debug_mark+2),a  
c7ca 18 03			jr .pastdmark  
c7cc ..			.dmark: db "EDp"  
c7cf f1			.pastdmark: pop af  
c7d0			endm  
# End of macro DMARK
c7d0						CALLMONITOR 
c7d0 cd 6f ee			call debug_vector  
c7d3				endm  
# End of macro CALLMONITOR
c7d3					endif 
c7d3				;	ld a, 0 
c7d3 cd 41 90				call strlenz 
c7d6 23					inc hl 
c7d7			 
c7d7 06 00				ld b, 0 
c7d9 4d					ld c, l 
c7da			 
c7da e1					pop hl 
c7db			 
c7db					;ld a, 0 
c7db					;ld (hl),a 
c7db 3a 5e ea				ld a,(f_cursor_ptr) 
c7de 16 64				ld d, 100 
c7e0 0e 00				ld c, 0 
c7e2 1e 28				ld e, 40 
c7e4 cd 08 8d				call input_str 
c7e7					; TODO perhaps do a type check and wrap in quotes if not a number 
c7e7					NEXTW 
c7e7 c3 0f 9e			jp macro_next 
c7ea				endm 
# End of macro NEXTW
c7ea			 
c7ea			 
c7ea			.ENDKEY: 
c7ea			; eof 
c7ea			 
# End of file forth_words_key.asm
c7ea			include "forth_words_const.asm" 
c7ea			 
c7ea			; | ## Constants (i.e. Useful memory addresses that can set or get features) 
c7ea			 
c7ea			 
c7ea			.SPITIME: 
c7ea				CWHEAD .VA 99 "SPITIME" 7 WORD_FLAG_CODE 
c7ea 77				db WORD_SYS_CORE+99             
c7eb ff c7			dw .VA            
c7ed 08				db 7 + 1 
c7ee .. 00			db "SPITIME",0              
c7f6				endm 
# End of macro CWHEAD
c7f6			; | SPITIME ( -- u1 )   Pushes address of the SPI pulse counter/delay to stack | DONE 
c7f6			; 
c7f6			; | | If using BANK devices then leave as is. 
c7f6			; | | Only really useful for the CARTDEV where other devices may be far too slow. In particular 
c7f6			; | | the multiplexing of the PicoSPINet addon which might not be running fast enough for all of the nodes 
c7f6			 
c7f6 21 64 ea				ld hl, spi_clktime  
c7f9 cd 62 9a				call forth_push_numhl 
c7fc			 
c7fc					NEXTW 
c7fc c3 0f 9e			jp macro_next 
c7ff				endm 
# End of macro NEXTW
c7ff			 
c7ff			 
c7ff			.VA: 
c7ff				CWHEAD .SYMBOL 99 "VA" 2 WORD_FLAG_CODE 
c7ff 77				db WORD_SYS_CORE+99             
c800 0f c8			dw .SYMBOL            
c802 03				db 2 + 1 
c803 .. 00			db "VA",0              
c806				endm 
# End of macro CWHEAD
c806			; | VA ( -- u1 )   Pushes address of block of memory used for v1..5 | DONE 
c806 21 28 ea				ld hl, cli_var_array 
c809 cd 62 9a				call forth_push_numhl 
c80c			 
c80c					NEXTW 
c80c c3 0f 9e			jp macro_next 
c80f				endm 
# End of macro NEXTW
c80f			 
c80f			.SYMBOL: 
c80f				CWHEAD .ENDCONST 99 "SYMBOL" 6 WORD_FLAG_CODE 
c80f 77				db WORD_SYS_CORE+99             
c810 19 c9			dw .ENDCONST            
c812 07				db 6 + 1 
c813 .. 00			db "SYMBOL",0              
c81a				endm 
# End of macro CWHEAD
c81a			; | SYMBOL ( u1 -- )  Get the address of a system symbol from a look up table to TOS  | DONE 
c81a			; | 
c81a			; | | The value is the number reference and the final address is pushed to stack 
c81a			 
c81a			; | | ``` 
c81a			; | | dw sym_table 
c81a			; | | dw nmi_vector 
c81a			; | | dw cli_autodisplay 
c81a			; | | dw cli_data_sp 
c81a			; | | dw cli_data_stack 
c81a			; | | dw cli_loop_sp 
c81a			; | | dw cli_loop_stack 
c81a			; | | dw cli_var_array 
c81a			; | | dw cursor_col 
c81a			; | | dw cursor_ptr 
c81a			; | | ; 10 
c81a			; | | dw cursor_row 
c81a			; | | dw debug_mark 
c81a			; | | dw display_fb0 
c81a			; | | dw display_fb1 
c81a			; | | dw display_fb2 
c81a			; | | dw display_fb3 
c81a			; | | dw display_fb_active 
c81a			; | | dw execscratch 
c81a			; | | dw f_cursor_ptr 
c81a			; | | dw hardware_word 
c81a			; | | ;20 
c81a			; | | dw input_at_cursor 
c81a			; | | dw input_at_pos 
c81a			; | | dw input_cur_flash 
c81a			; | | dw input_cur_onoff 
c81a			; | | dw input_cursor 
c81a			; | | dw input_display_size 
c81a			; | | dw input_len 
c81a			; | | dw input_ptr 
c81a			; | | dw input_size 
c81a			; | | dw input_start 
c81a			; | | ; 30 
c81a			; | | dw input_str 
c81a			; | | dw input_under_cursor 
c81a			; | | dw os_cli_cmd 
c81a			; | | dw os_cur_ptr 
c81a			; | | dw os_current_i 
c81a			; | | dw os_input 
c81a			; | | dw os_last_cmd 
c81a			; | | dw os_last_new_uword 
c81a			; | | dw debug_vector 
c81a			; | | dw os_view_hl 
c81a			; | | ;40 
c81a			; | | dw os_word_scratch 
c81a			; | | dw portbctl 
c81a			; | | dw portbdata 
c81a			; | | dw spi_cartdev 
c81a			; | | dw spi_cartdev2 
c81a			; | | dw spi_clktime 
c81a			; | | dw spi_device 
c81a			; | | dw spi_device_id 
c81a			; | | dw spi_portbyte 
c81a			; | | dw stackstore 
c81a			; | | ; 50 
c81a			; | | if STORAGE_SE 
c81a			; | | dw storage_actl 
c81a			; | | dw storage_adata 
c81a			; | | else 
c81a			; | | dw 0 
c81a			; | | dw 0 
c81a			; | | endif 
c81a			; | | dw storage_append 
c81a			; | | if STORAGE_SE 
c81a			; | | dw storage_bctl 
c81a			; | | else 
c81a			; | | dw 0 
c81a			; | | endif 
c81a			; | | dw store_bank_active 
c81a			; | | dw store_filecache 
c81a			; | | dw store_longread 
c81a			; | | dw store_openaddr 
c81a			; | | dw store_openext 
c81a			; | | dw store_openmaxext 
c81a			; | | ; 60 
c81a			; | | dw store_page 
c81a			; | | dw store_readbuf 
c81a			; | | dw store_readcont 
c81a			; | | dw store_readptr 
c81a			; | | dw store_tmpext 
c81a			; | | dw store_tmpid 
c81a			; | | dw store_tmppageid 
c81a			; | | dw malloc 
c81a			; | | dw free 
c81a			; | | dw cin 
c81a			; | | ; 70 
c81a			; | | dw cin_wait 
c81a			; | | dw forth_push_numhl 
c81a			; | | dw forth_push_str 
c81a			; | | ``` 
c81a			 
c81a					if DEBUG_FORTH_WORDS_KEY 
c81a						DMARK "SYM" 
c81a f5				push af  
c81b 3a 2f c8			ld a, (.dmark)  
c81e 32 6b ee			ld (debug_mark),a  
c821 3a 30 c8			ld a, (.dmark+1)  
c824 32 6c ee			ld (debug_mark+1),a  
c827 3a 31 c8			ld a, (.dmark+2)  
c82a 32 6d ee			ld (debug_mark+2),a  
c82d 18 03			jr .pastdmark  
c82f ..			.dmark: db "SYM"  
c832 f1			.pastdmark: pop af  
c833			endm  
# End of macro DMARK
c833						CALLMONITOR 
c833 cd 6f ee			call debug_vector  
c836				endm  
# End of macro CALLMONITOR
c836					endif 
c836			 
c836					FORTH_DSP_VALUEHL 
c836 cd 59 9c			call macro_dsp_valuehl 
c839				endm 
# End of macro FORTH_DSP_VALUEHL
c839			 
c839 7d					ld a, l     
c83a			 
c83a			 
c83a					if DEBUG_FORTH_WORDS 
c83a						DMARK "SY1" 
c83a f5				push af  
c83b 3a 4f c8			ld a, (.dmark)  
c83e 32 6b ee			ld (debug_mark),a  
c841 3a 50 c8			ld a, (.dmark+1)  
c844 32 6c ee			ld (debug_mark+1),a  
c847 3a 51 c8			ld a, (.dmark+2)  
c84a 32 6d ee			ld (debug_mark+2),a  
c84d 18 03			jr .pastdmark  
c84f ..			.dmark: db "SY1"  
c852 f1			.pastdmark: pop af  
c853			endm  
# End of macro DMARK
c853						CALLMONITOR 
c853 cd 6f ee			call debug_vector  
c856				endm  
# End of macro CALLMONITOR
c856					endif 
c856					 
c856 f5					push af	 
c857					FORTH_DSP_POP 
c857 cd 11 9d			call macro_forth_dsp_pop 
c85a				endm 
# End of macro FORTH_DSP_POP
c85a f1					pop af 
c85b			 
c85b cb 27				sla a  
c85d				 
c85d					 
c85d					if DEBUG_FORTH_WORDS 
c85d						DMARK "SY" 
c85d f5				push af  
c85e 3a 72 c8			ld a, (.dmark)  
c861 32 6b ee			ld (debug_mark),a  
c864 3a 73 c8			ld a, (.dmark+1)  
c867 32 6c ee			ld (debug_mark+1),a  
c86a 3a 74 c8			ld a, (.dmark+2)  
c86d 32 6d ee			ld (debug_mark+2),a  
c870 18 02			jr .pastdmark  
c872 ..			.dmark: db "SY"  
c874 f1			.pastdmark: pop af  
c875			endm  
# End of macro DMARK
c875						CALLMONITOR 
c875 cd 6f ee			call debug_vector  
c878				endm  
# End of macro CALLMONITOR
c878					endif 
c878			 
c878 21 87 c8				ld hl, sym_table 
c87b cd db 8c				call addatohl 
c87e cd 91 9d				call loadwordinhl 
c881 cd 62 9a				call forth_push_numhl 
c884			 
c884			 
c884				       NEXTW 
c884 c3 0f 9e			jp macro_next 
c887				endm 
# End of macro NEXTW
c887			 
c887			sym_table: 
c887			 
c887			; 0 
c887 87 c8		dw sym_table 
c889 72 ee		dw nmi_vector 
c88b 3c ea		dw cli_autodisplay 
c88d ee e9		dw cli_data_sp 
c88f 28 e8		dw cli_data_stack 
c891 f0 e9		dw cli_loop_sp 
c893 2a e9		dw cli_loop_stack 
c895 28 ea		dw cli_var_array 
c897 c5 eb		dw cursor_col 
c899 c3 eb		dw cursor_ptr 
c89b			; 10 
c89b c4 eb		dw cursor_row 
c89d 6b ee		dw debug_mark 
c89f b1 ed		dw display_fb0 
c8a1 10 ed		dw display_fb1 
c8a3 ce eb		dw display_fb2 
c8a5 6f ec		dw display_fb3 
c8a7 cc eb		dw display_fb_active 
c8a9 c0 e3		dw execscratch 
c8ab 5e ea		dw f_cursor_ptr 
c8ad 75 ee		dw hardware_word 
c8af			;20 
c8af 62 ee		dw input_at_cursor 
c8b1 64 ee		dw input_at_pos 
c8b3 60 ee		dw input_cur_flash 
c8b5 5f ee		dw input_cur_onoff 
c8b7 55 ee		dw input_cursor 
c8b9 65 ee		dw input_display_size 
c8bb 5a ee		dw input_len 
c8bd 69 ee		dw input_ptr 
c8bf 66 ee		dw input_size 
c8c1 67 ee		dw input_start 
c8c3			; 30 
c8c3 08 8d		dw input_str 
c8c5 63 ee		dw input_under_cursor 
c8c7 e8 e5		dw os_cli_cmd 
c8c9 e4 e5		dw os_cur_ptr 
c8cb e6 e5		dw os_current_i 
c8cd bf e4		dw os_input 
c8cf e7 e6		dw os_last_cmd 
c8d1 be e5		dw os_last_new_uword 
c8d3 6f ee		dw debug_vector 
c8d5 a3 e2		dw os_view_hl 
c8d7			;40 
c8d7 c6 e5		dw os_word_scratch 
c8d9 c3 00		dw portbctl 
c8db c1 00		dw portbdata 
c8dd 63 ea		dw spi_cartdev 
c8df 62 ea		dw spi_cartdev2 
c8e1 64 ea		dw spi_clktime 
c8e3 60 ea		dw spi_device 
c8e5 5f ea		dw spi_device_id 
c8e7 61 ea		dw spi_portbyte 
c8e9 a7 eb		dw stackstore 
c8eb			; 50 
c8eb			if STORAGE_SE 
c8eb			dw storage_actl 
c8eb			dw storage_adata 
c8eb			else 
c8eb 00 00		dw 0 
c8ed 00 00		dw 0 
c8ef			endif 
c8ef 68 88		dw storage_append 
c8f1			if STORAGE_SE 
c8f1			dw storage_bctl 
c8f1			else 
c8f1 00 00		dw 0 
c8f3			endif 
c8f3 93 eb		dw store_bank_active 
c8f5 67 ea		dw store_filecache 
c8f7 75 ea		dw store_longread 
c8f9 6b ea		dw store_openaddr 
c8fb 6a ea		dw store_openext 
c8fd 69 ea		dw store_openmaxext 
c8ff			; 60 
c8ff 7a ea		dw store_page 
c901 76 ea		dw store_readbuf 
c903 6d ea		dw store_readcont 
c905 78 ea		dw store_readptr 
c907 6d ea		dw store_tmpext 
c909 6e ea		dw store_tmpid 
c90b 65 ea		dw store_tmppageid 
c90d b6 90		dw malloc 
c90f 80 91		dw free 
c911 f4 dc		dw cin 
c913			; 70 
c913 ee dc		dw cin_wait 
c915 62 9a		dw forth_push_numhl 
c917 d0 9a		dw forth_push_str 
c919			 
c919			 
c919			.ENDCONST: 
c919			 
c919			; eof 
c919			 
c919			 
# End of file forth_words_const.asm
c919			 
c919			if STORAGE_SE 
c919			   	include "forth_words_storage.asm" 
c919			endif 
c919				include "forth_words_device.asm" 
c919			; Device related words 
c919			 
c919			; | ## Device Words 
c919			 
c919			;if SOUND_ENABLE 
c919			;.NOTE: 
c919			;	CWHEAD .AFTERSOUND 31 "NOTE" 4 WORD_FLAG_CODE 
c919			;; NOTE ( ud uf --  )  Plays a note of frequency uf for the duration of ud millseconds  TODO 
c919			;		if DEBUG_FORTH_WORDS_KEY 
c919			;			DMARK "NTE" 
c919			;			CALLMONITOR 
c919			;		endif 
c919			; 
c919			;	 
c919			; 
c919			;		NEXTW 
c919			;.AFTERSOUND: 
c919			;endif 
c919			 
c919			 
c919			USE_GPIO: equ 0 
c919			 
c919			if USE_GPIO 
c919			.GP1: 
c919				CWHEAD .GP2 31 "IOIN" 4 WORD_FLAG_CODE 
c919			;  IOIN ( u1 -- u )    Perform a GPIO read of pin u1 and push result   
c919					NEXTW 
c919			.GP2: 
c919				CWHEAD .GP3 31 "IOOUT" 5 WORD_FLAG_CODE 
c919			;  IOOUT ( u1 u2 --  )    Perform a GPIO write of pin u1 with pin set to 0 or 1 in u2   
c919			 
c919					NEXTW 
c919			 
c919			.GP3: 
c919				CWHEAD .GP4 31 "IOBYTE" 5 WORD_FLAG_CODE 
c919			;  IOBYTE ( u1 --  )    Perform a GPIO write of byte u1   
c919			 
c919					NEXTW 
c919			 
c919			.GP4: 
c919				CWHEAD .SIN 31 "IOSET" 5 WORD_FLAG_CODE 
c919			;  IOSET ( u1 --  )    Setup GPIO pins for I/O direction. Bit is set for write else read pin   
c919			 
c919					NEXTW 
c919			.SIN: 
c919			 
c919			 
c919			endif 
c919			 
c919			 
c919				CWHEAD .SOUT 31 "IN" 2 WORD_FLAG_CODE 
c919 33				db WORD_SYS_CORE+31             
c91a 4e c9			dw .SOUT            
c91c 03				db 2 + 1 
c91d .. 00			db "IN",0              
c920				endm 
# End of macro CWHEAD
c920			; | IN ( u1 -- u )    Perform Z80 IN with u1 being the port number. Push result to TOS | TO TEST 
c920					if DEBUG_FORTH_WORDS_KEY 
c920						DMARK "IN." 
c920 f5				push af  
c921 3a 35 c9			ld a, (.dmark)  
c924 32 6b ee			ld (debug_mark),a  
c927 3a 36 c9			ld a, (.dmark+1)  
c92a 32 6c ee			ld (debug_mark+1),a  
c92d 3a 37 c9			ld a, (.dmark+2)  
c930 32 6d ee			ld (debug_mark+2),a  
c933 18 03			jr .pastdmark  
c935 ..			.dmark: db "IN."  
c938 f1			.pastdmark: pop af  
c939			endm  
# End of macro DMARK
c939						CALLMONITOR 
c939 cd 6f ee			call debug_vector  
c93c				endm  
# End of macro CALLMONITOR
c93c					endif 
c93c					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
c93c cd 59 9c			call macro_dsp_valuehl 
c93f				endm 
# End of macro FORTH_DSP_VALUEHL
c93f			 
c93f e5					push hl 
c940			 
c940					; destroy value TOS 
c940			 
c940					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c940 cd 11 9d			call macro_forth_dsp_pop 
c943				endm 
# End of macro FORTH_DSP_POP
c943			 
c943					; one value on hl get other one back 
c943			 
c943 c1					pop bc 
c944			 
c944					; do the sub 
c944			;		ex de, hl 
c944			 
c944 ed 68				in l,(c) 
c946			 
c946					; save it 
c946			 
c946 26 00				ld h,0 
c948			 
c948					; TODO push value back onto stack for another op etc 
c948			 
c948 cd 62 9a				call forth_push_numhl 
c94b					NEXTW 
c94b c3 0f 9e			jp macro_next 
c94e				endm 
# End of macro NEXTW
c94e			.SOUT: 
c94e				CWHEAD .SPIO 32 "OUT" 3 WORD_FLAG_CODE 
c94e 34				db WORD_SYS_CORE+32             
c94f a1 c9			dw .SPIO            
c951 04				db 3 + 1 
c952 .. 00			db "OUT",0              
c956				endm 
# End of macro CWHEAD
c956			; | OUT ( u1 u2 -- ) Perform Z80 OUT to port u2 sending byte u1 | DONE 
c956					if DEBUG_FORTH_WORDS_KEY 
c956						DMARK "OUT" 
c956 f5				push af  
c957 3a 6b c9			ld a, (.dmark)  
c95a 32 6b ee			ld (debug_mark),a  
c95d 3a 6c c9			ld a, (.dmark+1)  
c960 32 6c ee			ld (debug_mark+1),a  
c963 3a 6d c9			ld a, (.dmark+2)  
c966 32 6d ee			ld (debug_mark+2),a  
c969 18 03			jr .pastdmark  
c96b ..			.dmark: db "OUT"  
c96e f1			.pastdmark: pop af  
c96f			endm  
# End of macro DMARK
c96f						CALLMONITOR 
c96f cd 6f ee			call debug_vector  
c972				endm  
# End of macro CALLMONITOR
c972					endif 
c972			 
c972					; get port 
c972			 
c972					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
c972 cd 59 9c			call macro_dsp_valuehl 
c975				endm 
# End of macro FORTH_DSP_VALUEHL
c975			 
c975 e5					push hl 
c976			 
c976					; destroy value TOS 
c976			 
c976					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c976 cd 11 9d			call macro_forth_dsp_pop 
c979				endm 
# End of macro FORTH_DSP_POP
c979			 
c979					; get byte to send 
c979			 
c979					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
c979 cd 59 9c			call macro_dsp_valuehl 
c97c				endm 
# End of macro FORTH_DSP_VALUEHL
c97c			 
c97c			;		push hl 
c97c			 
c97c					; destroy value TOS 
c97c			 
c97c					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c97c cd 11 9d			call macro_forth_dsp_pop 
c97f				endm 
# End of macro FORTH_DSP_POP
c97f			 
c97f					; one value on hl get other one back 
c97f			 
c97f			;		pop hl 
c97f			 
c97f c1					pop bc 
c980			 
c980					if DEBUG_FORTH_WORDS 
c980						DMARK "OUT" 
c980 f5				push af  
c981 3a 95 c9			ld a, (.dmark)  
c984 32 6b ee			ld (debug_mark),a  
c987 3a 96 c9			ld a, (.dmark+1)  
c98a 32 6c ee			ld (debug_mark+1),a  
c98d 3a 97 c9			ld a, (.dmark+2)  
c990 32 6d ee			ld (debug_mark+2),a  
c993 18 03			jr .pastdmark  
c995 ..			.dmark: db "OUT"  
c998 f1			.pastdmark: pop af  
c999			endm  
# End of macro DMARK
c999						CALLMONITOR 
c999 cd 6f ee			call debug_vector  
c99c				endm  
# End of macro CALLMONITOR
c99c					endif 
c99c			 
c99c ed 69				out (c), l 
c99e			 
c99e					NEXTW 
c99e c3 0f 9e			jp macro_next 
c9a1				endm 
# End of macro NEXTW
c9a1			 
c9a1			 
c9a1			.SPIO: 
c9a1			 
c9a1			if STORAGE_SE 
c9a1				CWHEAD .SPICEH 61 "SPICEL" 6 WORD_FLAG_CODE 
c9a1			; | SPICEL ( -- ) Set SPI CE low for the currently selected device |  DONE 
c9a1			 
c9a1					call spi_ce_low 
c9a1			    NEXTW 
c9a1			 
c9a1			.SPICEH: 
c9a1				CWHEAD .SPIOb 61 "SPICEH" 6 WORD_FLAG_CODE 
c9a1			; | SPICEH ( -- ) Set SPI CE high for the currently selected device |  DONE 
c9a1			 
c9a1					call spi_ce_high 
c9a1			    NEXTW 
c9a1			 
c9a1			 
c9a1			.SPIOb: 
c9a1			 
c9a1				CWHEAD .SPII 61 "SPIO" 4 WORD_FLAG_CODE 
c9a1			; | SPIO ( u1 -- ) Send byte u1 to SPI  |  DONE 
c9a1			 
c9a1					if DEBUG_FORTH_WORDS_KEY 
c9a1						DMARK "SPo" 
c9a1						CALLMONITOR 
c9a1					endif 
c9a1					; get port 
c9a1			 
c9a1			 
c9a1					; get byte to send 
c9a1			 
c9a1					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
c9a1			 
c9a1			;		push hl    ; u1  
c9a1			 
c9a1					; destroy value TOS 
c9a1			 
c9a1					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c9a1			 
c9a1					; one value on hl get other one back 
c9a1			 
c9a1			;		pop hl   ; u2 - addr 
c9a1			 
c9a1					; TODO Send SPI byte 
c9a1			 
c9a1			;		push hl 
c9a1			;		call spi_ce_low 
c9a1			;		pop hl 
c9a1					ld a, l 
c9a1					call spi_send_byte 
c9a1			;		call spi_ce_high 
c9a1			 
c9a1					NEXTW 
c9a1			 
c9a1			.SPII: 
c9a1				CWHEAD .SESEL 62 "SPII" 5 WORD_FLAG_CODE 
c9a1			; | SPII ( -- u1 ) Get a byte from SPI  | DONE 
c9a1					if DEBUG_FORTH_WORDS_KEY 
c9a1						DMARK "SPi" 
c9a1						CALLMONITOR 
c9a1					endif 
c9a1			 
c9a1					; TODO Get SPI byte 
c9a1			 
c9a1					call spi_read_byte 
c9a1			 
c9a1					if DEBUG_FORTH_WORDS 
c9a1						DMARK "Si2" 
c9a1						CALLMONITOR 
c9a1					endif 
c9a1					ld h, 0 
c9a1					ld l, a 
c9a1					if DEBUG_FORTH_WORDS 
c9a1						DMARK "Si3" 
c9a1						CALLMONITOR 
c9a1					endif 
c9a1					call forth_push_numhl 
c9a1			 
c9a1					NEXTW 
c9a1			 
c9a1			 
c9a1			 
c9a1			.SESEL: 
c9a1				CWHEAD .CARTDEV 82 "BANK" 4 WORD_FLAG_CODE 
c9a1			; | BANK ( u1 -- ) Select Serial EEPROM Bank Device at bank address u1 1-5 (disables CARTDEV). Set to zero to disable storage. | DONE 
c9a1					if DEBUG_FORTH_WORDS_KEY 
c9a1						DMARK "BNK" 
c9a1						CALLMONITOR 
c9a1					endif 
c9a1			 
c9a1					ld a, 255 
c9a1					ld (spi_cartdev), a 
c9a1			 
c9a1					; get bank 
c9a1			 
c9a1					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
c9a1			 
c9a1			;		push hl 
c9a1			 
c9a1					; destroy value TOS 
c9a1			 
c9a1					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c9a1			 
c9a1					; one value on hl get other one back 
c9a1			 
c9a1			;		pop hl 
c9a1			 
c9a1			 
c9a1					ld c, SPI_CE_HIGH 
c9a1					ld b, '0'    ; human readable bank number 
c9a1			 
c9a1					ld a, l 
c9a1			 
c9a1					if DEBUG_FORTH_WORDS 
c9a1						DMARK "BNK" 
c9a1						CALLMONITOR 
c9a1					endif 
c9a1			 
c9a1					; active low 
c9a1			 
c9a1					cp 0 
c9a1					jr z, .bset 
c9a1					cp 1 
c9a1					jr nz, .b2 
c9a1					res 0, c 
c9a1					ld b, '1'    ; human readable bank number 
c9a1			.b2:		cp 2 
c9a1					jr nz, .b3 
c9a1					res 1, c 
c9a1					ld b, '2'    ; human readable bank number 
c9a1			.b3:		cp 3 
c9a1					jr nz, .b4 
c9a1					res 2, c 
c9a1					ld b, '3'    ; human readable bank number 
c9a1			.b4:		cp 4 
c9a1					jr nz, .b5 
c9a1					res 3, c 
c9a1					ld b, '4'    ; human readable bank number 
c9a1			.b5:		cp 5 
c9a1					jr nz, .bset 
c9a1					res 4, c 
c9a1					ld b, '5'    ; human readable bank number 
c9a1			 
c9a1			.bset: 
c9a1					ld a, c 
c9a1					ld (spi_device),a 
c9a1					ld a, b 
c9a1					ld (spi_device_id),a 
c9a1					if DEBUG_FORTH_WORDS 
c9a1						DMARK "BN2" 
c9a1						CALLMONITOR 
c9a1					endif 
c9a1			 
c9a1					; set default SPI clk pulse time as disabled for BANK use 
c9a1			 
c9a1					ld a, 0 
c9a1					ld (spi_clktime), a 
c9a1			 
c9a1					NEXTW 
c9a1			 
c9a1			.CARTDEV: 
c9a1				CWHEAD .ENDDEVICE 82 "CARTDEV" 7 WORD_FLAG_CODE 
c9a1			; | CARTDEV ( u1 -- ) Select cart device 1-8 (Disables BANK). Set to zero to disable devices. |  DONE 
c9a1					if DEBUG_FORTH_WORDS_KEY 
c9a1						DMARK "CDV" 
c9a1						CALLMONITOR 
c9a1					endif 
c9a1			 
c9a1					; disable se storage bank selection 
c9a1			 
c9a1					ld a, SPI_CE_HIGH		; ce high 
c9a1					ld (spi_device), a 
c9a1			 
c9a1					; get bank 
c9a1			 
c9a1					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
c9a1			 
c9a1			;		push hl 
c9a1			 
c9a1					; destroy value TOS 
c9a1			 
c9a1					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c9a1			 
c9a1					; one value on hl get other one back 
c9a1			 
c9a1			;		pop hl 
c9a1			 
c9a1					; active low 
c9a1			 
c9a1					ld c, 255 
c9a1			 
c9a1					ld a, l 
c9a1					if DEBUG_FORTH_WORDS 
c9a1						DMARK "CDV" 
c9a1						CALLMONITOR 
c9a1					endif 
c9a1					cp 0 
c9a1					jr z, .cset 
c9a1					cp 1 
c9a1					jr nz, .c2 
c9a1					res 0, c 
c9a1			.c2:		cp 2 
c9a1					jr nz, .c3 
c9a1					res 1, c 
c9a1			.c3:		cp 3 
c9a1					jr nz, .c4 
c9a1					res 2, c 
c9a1			.c4:		cp 4 
c9a1					jr nz, .c5 
c9a1					res 3, c 
c9a1			.c5:		cp 5 
c9a1					jr nz, .c6 
c9a1					res 4, c 
c9a1			.c6:		cp 6 
c9a1					jr nz, .c7 
c9a1					res 5, c 
c9a1			.c7:		cp 7 
c9a1					jr nz, .c8 
c9a1					res 6, c 
c9a1			.c8:		cp 8 
c9a1					jr nz, .cset 
c9a1					res 7, c 
c9a1			.cset:		ld a, c 
c9a1					ld (spi_cartdev),a 
c9a1			 
c9a1					if DEBUG_FORTH_WORDS 
c9a1						DMARK "CD2" 
c9a1						CALLMONITOR 
c9a1					endif 
c9a1			 
c9a1					; set default SPI clk pulse time as 10ms for CARTDEV use 
c9a1			 
c9a1					ld a, $0a 
c9a1					ld (spi_clktime), a 
c9a1					NEXTW 
c9a1			endif 
c9a1			 
c9a1			.ENDDEVICE: 
c9a1			; eof 
c9a1			 
# End of file forth_words_device.asm
c9a1			 
c9a1			; var handler 
c9a1			 
c9a1			 
c9a1			.VARS: 
c9a1				CWHEAD .V0 99 "VAR" 3 WORD_FLAG_CODE 
c9a1 77				db WORD_SYS_CORE+99             
c9a2 52 ca			dw .V0            
c9a4 04				db 3 + 1 
c9a5 .. 00			db "VAR",0              
c9a9				endm 
# End of macro CWHEAD
c9a9			;| VAR ( u1 -- )  Get the address of the variable referenced on TOS  | TO TEST 
c9a9			;| 
c9a9			;| The variable name should consist of a single letter. e.g. "a" 
c9a9			;! If a full string is passed then only the first char is looked at 
c9a9			;| Any other char could exceed bounds checks!  
c9a9			 
c9a9					if DEBUG_FORTH_WORDS_KEY 
c9a9						DMARK "VAR" 
c9a9 f5				push af  
c9aa 3a be c9			ld a, (.dmark)  
c9ad 32 6b ee			ld (debug_mark),a  
c9b0 3a bf c9			ld a, (.dmark+1)  
c9b3 32 6c ee			ld (debug_mark+1),a  
c9b6 3a c0 c9			ld a, (.dmark+2)  
c9b9 32 6d ee			ld (debug_mark+2),a  
c9bc 18 03			jr .pastdmark  
c9be ..			.dmark: db "VAR"  
c9c1 f1			.pastdmark: pop af  
c9c2			endm  
# End of macro DMARK
c9c2						CALLMONITOR 
c9c2 cd 6f ee			call debug_vector  
c9c5				endm  
# End of macro CALLMONITOR
c9c5					endif 
c9c5			 
c9c5					FORTH_DSP_VALUEHL 
c9c5 cd 59 9c			call macro_dsp_valuehl 
c9c8				endm 
# End of macro FORTH_DSP_VALUEHL
c9c8			 
c9c8 7e					ld a, (hl)    ; get first char on of the string 
c9c9			 
c9c9			 
c9c9					if DEBUG_FORTH_WORDS 
c9c9						DMARK "VR1" 
c9c9 f5				push af  
c9ca 3a de c9			ld a, (.dmark)  
c9cd 32 6b ee			ld (debug_mark),a  
c9d0 3a df c9			ld a, (.dmark+1)  
c9d3 32 6c ee			ld (debug_mark+1),a  
c9d6 3a e0 c9			ld a, (.dmark+2)  
c9d9 32 6d ee			ld (debug_mark+2),a  
c9dc 18 03			jr .pastdmark  
c9de ..			.dmark: db "VR1"  
c9e1 f1			.pastdmark: pop af  
c9e2			endm  
# End of macro DMARK
c9e2						CALLMONITOR 
c9e2 cd 6f ee			call debug_vector  
c9e5				endm  
# End of macro CALLMONITOR
c9e5					endif 
c9e5					 
c9e5 f5					push af	 
c9e6					FORTH_DSP_POP 
c9e6 cd 11 9d			call macro_forth_dsp_pop 
c9e9				endm 
# End of macro FORTH_DSP_POP
c9e9 f1					pop af 
c9ea			 
c9ea					; convert to upper 
c9ea			 
c9ea cd 50 8f				call to_upper 
c9ed					if DEBUG_FORTH_WORDS 
c9ed						DMARK "Vaa" 
c9ed f5				push af  
c9ee 3a 02 ca			ld a, (.dmark)  
c9f1 32 6b ee			ld (debug_mark),a  
c9f4 3a 03 ca			ld a, (.dmark+1)  
c9f7 32 6c ee			ld (debug_mark+1),a  
c9fa 3a 04 ca			ld a, (.dmark+2)  
c9fd 32 6d ee			ld (debug_mark+2),a  
ca00 18 03			jr .pastdmark  
ca02 ..			.dmark: db "Vaa"  
ca05 f1			.pastdmark: pop af  
ca06			endm  
# End of macro DMARK
ca06						CALLMONITOR 
ca06 cd 6f ee			call debug_vector  
ca09				endm  
# End of macro CALLMONITOR
ca09					endif 
ca09 06 41				ld b, 'A' 
ca0b 90					sub b			; set offset 
ca0c					if DEBUG_FORTH_WORDS 
ca0c						DMARK "Vbb" 
ca0c f5				push af  
ca0d 3a 21 ca			ld a, (.dmark)  
ca10 32 6b ee			ld (debug_mark),a  
ca13 3a 22 ca			ld a, (.dmark+1)  
ca16 32 6c ee			ld (debug_mark+1),a  
ca19 3a 23 ca			ld a, (.dmark+2)  
ca1c 32 6d ee			ld (debug_mark+2),a  
ca1f 18 03			jr .pastdmark  
ca21 ..			.dmark: db "Vbb"  
ca24 f1			.pastdmark: pop af  
ca25			endm  
# End of macro DMARK
ca25						CALLMONITOR 
ca25 cd 6f ee			call debug_vector  
ca28				endm  
# End of macro CALLMONITOR
ca28					endif 
ca28 cb 27				sla a  
ca2a				 
ca2a					 
ca2a					if DEBUG_FORTH_WORDS 
ca2a						DMARK "VR2" 
ca2a f5				push af  
ca2b 3a 3f ca			ld a, (.dmark)  
ca2e 32 6b ee			ld (debug_mark),a  
ca31 3a 40 ca			ld a, (.dmark+1)  
ca34 32 6c ee			ld (debug_mark+1),a  
ca37 3a 41 ca			ld a, (.dmark+2)  
ca3a 32 6d ee			ld (debug_mark+2),a  
ca3d 18 03			jr .pastdmark  
ca3f ..			.dmark: db "VR2"  
ca42 f1			.pastdmark: pop af  
ca43			endm  
# End of macro DMARK
ca43						CALLMONITOR 
ca43 cd 6f ee			call debug_vector  
ca46				endm  
# End of macro CALLMONITOR
ca46					endif 
ca46			 
ca46 21 f4 e9				ld hl, cli_var_array2 
ca49 cd db 8c				call addatohl 
ca4c cd 62 9a				call forth_push_numhl 
ca4f			 
ca4f			 
ca4f				       NEXTW 
ca4f c3 0f 9e			jp macro_next 
ca52				endm 
# End of macro NEXTW
ca52			.V0: 
ca52				CWHEAD .V0Q 100 "V0!" 3 WORD_FLAG_CODE 
ca52 78				db WORD_SYS_CORE+100             
ca53 6a ca			dw .V0Q            
ca55 04				db 3 + 1 
ca56 .. 00			db "V0!",0              
ca5a				endm 
# End of macro CWHEAD
ca5a			;| V0! ( u1 -- )  Store value to v0  | DONE 
ca5a			 
ca5a					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
ca5a cd 59 9c			call macro_dsp_valuehl 
ca5d				endm 
# End of macro FORTH_DSP_VALUEHL
ca5d			 
ca5d 11 28 ea				ld de, cli_var_array 
ca60			 
ca60 eb					ex de, hl 
ca61 73					ld (hl), e 
ca62 23					inc hl 
ca63 72					ld (hl), d 
ca64			 
ca64					; destroy value TOS 
ca64			 
ca64					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
ca64 cd 11 9d			call macro_forth_dsp_pop 
ca67				endm 
# End of macro FORTH_DSP_POP
ca67			 
ca67				       NEXTW 
ca67 c3 0f 9e			jp macro_next 
ca6a				endm 
# End of macro NEXTW
ca6a			.V0Q: 
ca6a				CWHEAD .V1S 101 "V0@" 3 WORD_FLAG_CODE 
ca6a 79				db WORD_SYS_CORE+101             
ca6b 7b ca			dw .V1S            
ca6d 04				db 3 + 1 
ca6e .. 00			db "V0@",0              
ca72				endm 
# End of macro CWHEAD
ca72			;| V0@ ( --u )  Put value of v0 onto stack | DONE 
ca72 2a 28 ea				ld hl, (cli_var_array) 
ca75 cd 62 9a				call forth_push_numhl 
ca78			 
ca78				       NEXTW 
ca78 c3 0f 9e			jp macro_next 
ca7b				endm 
# End of macro NEXTW
ca7b			.V1S: 
ca7b				CWHEAD .V1Q 102 "V1!" 3 WORD_FLAG_CODE 
ca7b 7a				db WORD_SYS_CORE+102             
ca7c 93 ca			dw .V1Q            
ca7e 04				db 3 + 1 
ca7f .. 00			db "V1!",0              
ca83				endm 
# End of macro CWHEAD
ca83			;| V1! ( u1 -- )  Store value to v1 | DONE 
ca83					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
ca83 cd 59 9c			call macro_dsp_valuehl 
ca86				endm 
# End of macro FORTH_DSP_VALUEHL
ca86			 
ca86 11 2a ea				ld de, cli_var_array+2 
ca89				 
ca89 eb					ex de, hl 
ca8a 73					ld (hl), e 
ca8b 23					inc hl 
ca8c 72					ld (hl), d 
ca8d			 
ca8d					; destroy value TOS 
ca8d			 
ca8d					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
ca8d cd 11 9d			call macro_forth_dsp_pop 
ca90				endm 
# End of macro FORTH_DSP_POP
ca90				       NEXTW 
ca90 c3 0f 9e			jp macro_next 
ca93				endm 
# End of macro NEXTW
ca93			.V1Q: 
ca93				CWHEAD .V2S 103 "V1@" 3 WORD_FLAG_CODE 
ca93 7b				db WORD_SYS_CORE+103             
ca94 a4 ca			dw .V2S            
ca96 04				db 3 + 1 
ca97 .. 00			db "V1@",0              
ca9b				endm 
# End of macro CWHEAD
ca9b			;| V1@ ( --u )  Put value of v1 onto stack | DONE 
ca9b 2a 2a ea				ld hl, (cli_var_array+2) 
ca9e cd 62 9a				call forth_push_numhl 
caa1				       NEXTW 
caa1 c3 0f 9e			jp macro_next 
caa4				endm 
# End of macro NEXTW
caa4			.V2S: 
caa4				CWHEAD .V2Q 104 "V2!" 3 WORD_FLAG_CODE 
caa4 7c				db WORD_SYS_CORE+104             
caa5 bc ca			dw .V2Q            
caa7 04				db 3 + 1 
caa8 .. 00			db "V2!",0              
caac				endm 
# End of macro CWHEAD
caac			;| V2! ( u1 -- )  Store value to v2 | DONE 
caac					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
caac cd 59 9c			call macro_dsp_valuehl 
caaf				endm 
# End of macro FORTH_DSP_VALUEHL
caaf			 
caaf 11 2c ea				ld de, cli_var_array+4 
cab2				 
cab2 eb					ex de, hl 
cab3 73					ld (hl), e 
cab4 23					inc hl 
cab5 72					ld (hl), d 
cab6			 
cab6					; destroy value TOS 
cab6			 
cab6					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
cab6 cd 11 9d			call macro_forth_dsp_pop 
cab9				endm 
# End of macro FORTH_DSP_POP
cab9				       NEXTW 
cab9 c3 0f 9e			jp macro_next 
cabc				endm 
# End of macro NEXTW
cabc			.V2Q: 
cabc				CWHEAD .V3S 105 "V2@" 3 WORD_FLAG_CODE 
cabc 7d				db WORD_SYS_CORE+105             
cabd cd ca			dw .V3S            
cabf 04				db 3 + 1 
cac0 .. 00			db "V2@",0              
cac4				endm 
# End of macro CWHEAD
cac4			;| V2@ ( --u )  Put value of v2 onto stack | DONE 
cac4 2a 2c ea				ld hl, (cli_var_array+4) 
cac7 cd 62 9a				call forth_push_numhl 
caca				       NEXTW 
caca c3 0f 9e			jp macro_next 
cacd				endm 
# End of macro NEXTW
cacd			.V3S: 
cacd				CWHEAD .V3Q 104 "V3!" 3 WORD_FLAG_CODE 
cacd 7c				db WORD_SYS_CORE+104             
cace e5 ca			dw .V3Q            
cad0 04				db 3 + 1 
cad1 .. 00			db "V3!",0              
cad5				endm 
# End of macro CWHEAD
cad5			;| V3! ( u1 -- )  Store value to v3 | DONE 
cad5					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
cad5 cd 59 9c			call macro_dsp_valuehl 
cad8				endm 
# End of macro FORTH_DSP_VALUEHL
cad8			 
cad8 11 2e ea				ld de, cli_var_array+6 
cadb				 
cadb eb					ex de, hl 
cadc 73					ld (hl), e 
cadd 23					inc hl 
cade 72					ld (hl), d 
cadf			 
cadf					; destroy value TOS 
cadf			 
cadf					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
cadf cd 11 9d			call macro_forth_dsp_pop 
cae2				endm 
# End of macro FORTH_DSP_POP
cae2				       NEXTW 
cae2 c3 0f 9e			jp macro_next 
cae5				endm 
# End of macro NEXTW
cae5			.V3Q: 
cae5				CWHEAD .END 105 "V3@" 3 WORD_FLAG_CODE 
cae5 7d				db WORD_SYS_CORE+105             
cae6 f6 ca			dw .END            
cae8 04				db 3 + 1 
cae9 .. 00			db "V3@",0              
caed				endm 
# End of macro CWHEAD
caed			;| V3@ ( --u )  Put value of v3 onto stack | DONE 
caed 2a 2e ea				ld hl, (cli_var_array+6) 
caf0 cd 62 9a				call forth_push_numhl 
caf3				       NEXTW 
caf3 c3 0f 9e			jp macro_next 
caf6				endm 
# End of macro NEXTW
caf6			 
caf6			 
caf6			 
caf6			 
caf6			 
caf6			; end of dict marker 
caf6			 
caf6 00			.END:    db WORD_SYS_END 
caf7 00 00			dw 0 
caf9 00				db 0 
cafa			 
cafa			; use to jp here for user dict words to save on macro expansion  
cafa			 
cafa			user_dict_next: 
cafa				NEXTW 
cafa c3 0f 9e			jp macro_next 
cafd				endm 
# End of macro NEXTW
cafd			 
cafd			 
cafd			user_exec: 
cafd				;    ld hl, <word code> 
cafd				;    FORTH_RSP_NEXT - call macro_forth_rsp_next 
cafd				;    call forthexec 
cafd				;    jp user_dict_next   (NEXT) 
cafd			        ;    <word code bytes> 
cafd eb				ex de, hl 
cafe 2a c2 e5			ld hl,(os_tok_ptr) 
cb01				 
cb01				FORTH_RSP_NEXT 
cb01 cd 09 9a			call macro_forth_rsp_next 
cb04				endm 
# End of macro FORTH_RSP_NEXT
cb04			 
cb04			if DEBUG_FORTH_UWORD 
cb04						DMARK "UEX" 
cb04 f5				push af  
cb05 3a 19 cb			ld a, (.dmark)  
cb08 32 6b ee			ld (debug_mark),a  
cb0b 3a 1a cb			ld a, (.dmark+1)  
cb0e 32 6c ee			ld (debug_mark+1),a  
cb11 3a 1b cb			ld a, (.dmark+2)  
cb14 32 6d ee			ld (debug_mark+2),a  
cb17 18 03			jr .pastdmark  
cb19 ..			.dmark: db "UEX"  
cb1c f1			.pastdmark: pop af  
cb1d			endm  
# End of macro DMARK
cb1d				CALLMONITOR 
cb1d cd 6f ee			call debug_vector  
cb20				endm  
# End of macro CALLMONITOR
cb20			endif 
cb20			 
cb20			 
cb20			 
cb20 eb				ex de, hl 
cb21 22 c2 e5			ld (os_tok_ptr), hl 
cb24				 
cb24				; Don't use next - Skips the first word in uword. 
cb24			 
cb24 c3 a0 9e			jp exec1 
cb27			;	NEXT 
cb27			 
cb27			 
cb27			; eof 
# End of file forth_wordsv4.asm
cb27			endif 
cb27			;;;;;;;;;;;;;; Debug code 
cb27			 
cb27			 
cb27			;if DEBUG_FORTH_PARSE 
cb27 .. 00		.nowordfound: db "No match",0 
cb30 .. 00		.compword:	db "Comparing word ",0 
cb40 .. 00		.nextwordat:	db "Next word at",0 
cb4d .. 00		.charmatch:	db "Char match",0 
cb58			;endif 
cb58			if DEBUG_FORTH_JP 
cb58			.foundword:	db "Word match. Exec..",0 
cb58			endif 
cb58			;if DEBUG_FORTH_PUSH 
cb58 .. 00		.enddict:	db "Dict end. Push.",0 
cb68 .. 00		.push_str:	db "Pushing string",0 
cb77 .. 00		.push_num:	db "Pushing number",0 
cb86 .. 00		.data_sp:	db "SP:",0 
cb8a .. 00		.wordinhl:	db "Word in HL (2/0):",0 
cb9c .. 00		.wordinde:	db "Word in DE (3/0):",0 
cbae .. 00		.wordinbc:	db "Word in BC (4/0):",0 
cbc0			;endif 
cbc0			;if DEBUG_FORTH_MALLOC 
cbc0 .. 00		.push_malloc:	db "Malloc address",0 
cbcf			;endif 
cbcf			 
cbcf			 
cbcf			 
cbcf			; display malloc address and current data stack pointer  
cbcf			 
cbcf			malloc_error: 
cbcf d5				push de 
cbd0 f5				push af 
cbd1 e5				push hl 
cbd2 cd ae 8a			call clear_display 
cbd5 11 f5 cb			ld de, .mallocerr 
cbd8 3e 00			ld a,0 
cbda			;	ld de,os_word_scratch 
cbda cd c1 8a			call str_at_display 
cbdd 3e 11			ld a, display_row_1+17 
cbdf 11 6b ee			ld de, debug_mark 
cbe2 cd c1 8a			call str_at_display 
cbe5 cd d1 8a			call update_display 
cbe8				;call break_point_state 
cbe8 cd ee dc			call cin_wait 
cbeb			 
cbeb			;	ld a, ' ' 
cbeb			;	ld (os_view_disable), a 
cbeb cd e5 93			call bp_on 
cbee e1				pop hl 
cbef f1				pop af 
cbf0 d1				pop de	 
cbf1				CALLMONITOR 
cbf1 cd 6f ee			call debug_vector  
cbf4				endm  
# End of macro CALLMONITOR
cbf4 c9				ret 
cbf5			 
cbf5 .. 00		.mallocerr: 	db "Malloc Error",0 
cc02			;if DEBUG_FORTH_PUSH 
cc02			display_data_sp: 
cc02 f5				push af 
cc03			 
cc03				; see if disabled 
cc03			 
cc03			 
cc03 3a 6f ee			ld a, (debug_vector) 
cc06 fe c9			cp $C9  ; RET 
cc08				;ld a, (os_view_disable) 
cc08				;cp '*' 
cc08 28 67			jr z, .skipdsp 
cc0a			 
cc0a e5				push hl 
cc0b e5				push hl 
cc0c e5			push hl 
cc0d cd ae 8a			call clear_display 
cc10 e1			pop hl 
cc11 7c				ld a,h 
cc12 21 c6 e5			ld hl, os_word_scratch 
cc15 cd e4 8e			call hexout 
cc18 e1				pop hl 
cc19 7d				ld a,l 
cc1a 21 c8 e5			ld hl, os_word_scratch+2 
cc1d cd e4 8e			call hexout 
cc20 21 ca e5			ld hl, os_word_scratch+4 
cc23 3e 00			ld a,0 
cc25 77				ld (hl),a 
cc26 11 c6 e5			ld de,os_word_scratch 
cc29 3e 28				ld a, display_row_2 
cc2b cd c1 8a				call str_at_display 
cc2e 11 8a cb			ld de, .wordinhl 
cc31 3e 00			ld a, display_row_1 
cc33			 
cc33 cd c1 8a				call str_at_display 
cc36 11 6b ee			ld de, debug_mark 
cc39 3e 11			ld a, display_row_1+17 
cc3b			 
cc3b cd c1 8a				call str_at_display 
cc3e			 
cc3e				; display current data stack pointer 
cc3e 11 86 cb			ld de,.data_sp 
cc41 3e 30				ld a, display_row_2 + 8 
cc43 cd c1 8a				call str_at_display 
cc46			 
cc46 2a ee e9			ld hl,(cli_data_sp) 
cc49 e5				push hl 
cc4a 7c				ld a,h 
cc4b 21 c6 e5			ld hl, os_word_scratch 
cc4e cd e4 8e			call hexout 
cc51 e1				pop hl 
cc52 7d				ld a,l 
cc53 21 c8 e5			ld hl, os_word_scratch+2 
cc56 cd e4 8e			call hexout 
cc59 21 ca e5			ld hl, os_word_scratch+4 
cc5c 3e 00			ld a,0 
cc5e 77				ld (hl),a 
cc5f 11 c6 e5			ld de,os_word_scratch 
cc62 3e 33				ld a, display_row_2 + 11 
cc64 cd c1 8a				call str_at_display 
cc67			 
cc67			 
cc67 cd d1 8a			call update_display 
cc6a cd f1 89			call delay1s 
cc6d cd f1 89			call delay1s 
cc70 e1				pop hl 
cc71			.skipdsp: 
cc71 f1				pop af 
cc72 c9				ret 
cc73			 
cc73			display_data_malloc: 
cc73			 
cc73 f5				push af 
cc74 e5				push hl 
cc75 e5				push hl 
cc76 e5			push hl 
cc77 cd ae 8a			call clear_display 
cc7a e1			pop hl 
cc7b 7c				ld a,h 
cc7c 21 c6 e5			ld hl, os_word_scratch 
cc7f cd e4 8e			call hexout 
cc82 e1				pop hl 
cc83 7d				ld a,l 
cc84 21 c8 e5			ld hl, os_word_scratch+2 
cc87 cd e4 8e			call hexout 
cc8a 21 ca e5			ld hl, os_word_scratch+4 
cc8d 3e 00			ld a,0 
cc8f 77				ld (hl),a 
cc90 11 c6 e5			ld de,os_word_scratch 
cc93 3e 28				ld a, display_row_2 
cc95 cd c1 8a				call str_at_display 
cc98 11 c0 cb			ld de, .push_malloc 
cc9b 3e 00			ld a, display_row_1 
cc9d			 
cc9d cd c1 8a				call str_at_display 
cca0			 
cca0				; display current data stack pointer 
cca0 11 86 cb			ld de,.data_sp 
cca3 3e 30				ld a, display_row_2 + 8 
cca5 cd c1 8a				call str_at_display 
cca8			 
cca8 2a ee e9			ld hl,(cli_data_sp) 
ccab e5				push hl 
ccac 7c				ld a,h 
ccad 21 c6 e5			ld hl, os_word_scratch 
ccb0 cd e4 8e			call hexout 
ccb3 e1				pop hl 
ccb4 7d				ld a,l 
ccb5 21 c8 e5			ld hl, os_word_scratch+2 
ccb8 cd e4 8e			call hexout 
ccbb 21 ca e5			ld hl, os_word_scratch+4 
ccbe 3e 00			ld a,0 
ccc0 77				ld (hl),a 
ccc1 11 c6 e5			ld de,os_word_scratch 
ccc4 3e 33				ld a, display_row_2 + 11 
ccc6 cd c1 8a				call str_at_display 
ccc9			 
ccc9 cd d1 8a			call update_display 
cccc cd f1 89			call delay1s 
cccf cd f1 89			call delay1s 
ccd2 e1				pop hl 
ccd3 f1				pop af 
ccd4 c9				ret 
ccd5			;endif 
ccd5			 
ccd5			include "forth_autostart.asm" 
ccd5			; list of commands to perform at system start up 
ccd5			 
ccd5			startcmds: 
ccd5			;	dw test11 
ccd5			;	dw test12 
ccd5			;	dw test13 
ccd5			;	dw test14 
ccd5			;	dw test15 
ccd5			;	dw test16 
ccd5			;	dw test17 
ccd5			;	dw ifthtest1 
ccd5			;	dw ifthtest2 
ccd5			;	dw ifthtest3 
ccd5			;	dw mmtest1 
ccd5			;	dw mmtest2 
ccd5			;	dw mmtest3 
ccd5			;	dw mmtest4 
ccd5			;	dw mmtest5 
ccd5			;	dw mmtest6 
ccd5			;	dw iftest1 
ccd5			;	dw iftest2 
ccd5			;	dw iftest3 
ccd5			;	dw looptest1 
ccd5			;	dw looptest2 
ccd5			;	dw test1 
ccd5			;	dw test2 
ccd5			;	dw test3 
ccd5			;	dw test4 
ccd5			;	dw game2r 
ccd5			;	dw game2b1 
ccd5			;	dw game2b2 
ccd5			 
ccd5				; start up words that are actually useful 
ccd5			 
ccd5			;    dw spi1 
ccd5			;    dw spi2 
ccd5			;    dw spi3 
ccd5			;    dw spi4 
ccd5			;    dw spi5 
ccd5			;    dw spi6 
ccd5			;    dw spi7 
ccd5			; 
ccd5			;    dw spi8 
ccd5			;    dw spi9 
ccd5			;    dw spi10 
ccd5			 
ccd5			; file editor 
ccd5			;	dw edit1 
ccd5			;	dw edit2 
ccd5			;	dw edit3 
ccd5			 
ccd5			;	dw longread 
ccd5 f5 d0			dw clrstack 
ccd7 29 d1			dw type 
ccd9			;	dw stest 
ccd9 4e d1			dw strncpy 
ccdb			;	dw list 
ccdb af d1			dw start1 
ccdd bf d1			dw start2 
ccdf			;	dw start3 
ccdf			;	dw start3b 
ccdf			;	dw start3c 
ccdf			 
ccdf				; (unit) testing words 
ccdf			 
ccdf			;	dw mtesta 
ccdf			;	dw mtestb 
ccdf			;	dw mtestc 
ccdf			;	dw mtestd 
ccdf			;	dw mteste 
ccdf			 
ccdf				; demo/game words 
ccdf			 
ccdf			;        dw game3w 
ccdf			;        dw game3p 
ccdf			;        dw game3sc 
ccdf			;        dw game3vsi 
ccdf			;        dw game3vs 
ccdf				 
ccdf			;	dw game2b 
ccdf			;	dw game2bf 
ccdf			;	dw game2mba 
ccdf			;	dw game2mbas 
ccdf			;	dw game2mb 
ccdf			 
ccdf dc d4			dw game1 
cce1 ed d4			dw game1a 
cce3 4f d5			dw game1b 
cce5 84 d5			dw game1c 
cce7 ba d5			dw game1d 
cce9 eb d5			dw game1s 
cceb ff d5			dw game1t 
cced 14 d6			dw game1f 
ccef 48 d6			dw game1z 
ccf1 8c d6			dw game1zz 
ccf3			 
ccf3 15 d3			dw test5 
ccf5 4d d3			dw test6 
ccf7 85 d3			dw test7 
ccf9 99 d3			dw test8 
ccfb c5 d3			dw test9 
ccfd db d3			dw test10 
ccff				 
ccff 63 d7		        dw ssv5 
cd01 47 d7		        dw ssv4 
cd03 2b d7		        dw ssv3 
cd05 f5 d6		        dw ssv2 
cd07 7c d7		        dw ssv1 
cd09 c4 d7		        dw ssv1cpm 
cd0b			;	dw keyup 
cd0b			;	dw keydown 
cd0b			;	dw keyleft 
cd0b			;	dw keyright 
cd0b			;	dw 	keyf1 
cd0b			;	dw keyf2 
cd0b			;	dw keyf3 
cd0b			;	dw keyf4 
cd0b			;	dw keyf5 
cd0b			;	dw keyf6 
cd0b			;	dw keyf7 
cd0b			;	dw keyf8 
cd0b			;	dw keyf9 
cd0b			;	dw keyf10 
cd0b			;	dw keyf11 
cd0b			;	dw keyf12 
cd0b			;	dw keytab 
cd0b			;	dw keycr 
cd0b			;	dw keyhome 
cd0b			;	dw keyend 
cd0b			;	dw keybs 
cd0b 00 00			db 0, 0	 
cd0d			 
cd0d			 
cd0d			; File Editor 
cd0d			 
cd0d			; ( id - ) use 'e' to edit the displayed line 
cd0d .. 00		edit1: db ": edc waitk $65 = if ede then ; ", 0 
cd2e .. 00		edit2: db ": ede storepage ptr $02 + cls dedit filepage bupd ; ", 0 
cd63			;edit2: db ": ede v1@ v0@ record drop storepage ptr $02 + cls dedit filepage bupd ; ", 0 
cd63 .. 00		edit3: db ": ed dup v0! open $01 do i v0@ record cls . edc loop ; ",0 
cd9b			;edit3: db ": ed dup v0! open $01 do i v0@ record cls . i v1! edc loop ; ",0 
cd9b			 
cd9b			; SPI Net support words 
cd9b			 
cd9b			; v0! = node to send to 
cd9b			; ( str count - ) 
cd9b .. 00		spi1:       db ": spitype spiceh $00 do dup i + @ v0@ spicel $10 spio spio spio spiceh $01 pause loop ; ",0 
cdf4			 
cdf4			; spiputc ( char node - ) 
cdf4 .. 00		spi2:       db ": spiputc spicel $10 spio spio ptr @ spio spiceh ; ",0 
ce28			; spiputc ( u node - ) 
ce28 .. 00		spi2b:       db ": spiputb spicel $10 spio spio spio spiceh ; ",0 
ce56			 
ce56			; spigetc ( - n ) 
ce56 .. 00		spi4:       db ": spigetc spicel $11 spio spii spiceh ; ", 0 
ce7f			 
ce7f			; getnode ( - n ) 
ce7f .. 00		spi5:       db ": getnode spicel $18 spio spii nop spiceh ; ", 0 
ceac			 
ceac			; ( str node - )  
ceac .. 00		spi3:       db ": sendnode v0! count spiceh $00 do dup i + @ v0@ spicel $10 spio spio spio spiceh $01 pause loop ; ; ",0 
cf12			; store string ( str i - ) 
cf12			 
cf12			;spi3:       db ": storestrold spicel $03 spio spio ptr count clkstro spiceh ; ", 0 
cf12 .. 00		spi6:       db ": storestr spicel $12 spio spio count $00 do dup i + @ spio $01 pause loop spiceh ; ", 0 
cf67			 
cf67			; get string ( addr i -  )    TO FIX 
cf67			 
cf67 .. 00		spi7:       db ": getstorestr spicel $13 spio spio \" \" repeat spii dup concat $00 = not until spiceh ; ", 0 
cfbf			 
cfbf			 
cfbf			; NETCHAT (TODO) 
cfbf			; Program to allow two nodes to chat with eachother 
cfbf			; 
cfbf			; v0 - target node 
cfbf			;  
cfbf			; accept input at 0,0 
cfbf			; if input is string send spitype to target node 
cfbf			; starting at row 2,0 , while spigetchr is not zero ->  
cfbf			; 
cfbf			; 
cfbf			; TODO add paging of get request 
cfbf			 
cfbf			; ( node - ) 
cfbf .. 00		spi8:		db ": netchatp $00 $00 at accept ;", 0 
cfde .. 00		spi9: 		db ": netchatr repeat spigetchr dup dup $00 = not if emit then $00 = not until $02 pause ; ",0 
d036 .. 00		spi10:		db ": netchat v0! repeat netchatp count dup $00 > if spitype $01 pause then cls $00 $03 at \">\" . netchatr true until nop ; ", 0 
d0ae			 
d0ae			 
d0ae			; Long read of currently open file 
d0ae .. 00		longread:   db ": lread read repeat readcont if read concat then readcont until nop ; ", 0 
d0f5			 
d0f5			; clear stack  
d0f5			 
d0f5 .. 00		clrstack:  db ": clrstk depth ?dup if $01 do drop loop then nop ; ", 0 
d129			 
d129			; type ( addr count - ) 
d129 .. 00		type:     db ": type $00 do dup i + @ emit loop ; ", 0 
d14e			 
d14e			; some direct memory words 
d14e			; strncpy ( len t f -- t ) 
d14e			 
d14e .. 00		strncpy:   db ": strncpy $00 scratch 2! $02 scratch 2! do $00 scratch 2@ i + @ $02 scratch 2@ i + ! loop nop  ;",0 
d1af			 
d1af .. 00		start1:     	db ": bpon $00 bp ;",0 
d1bf .. 00		start2:     	db ": bpoff $01 bp ;",0 
d1d0 .. 00		start3b:         db ": ls dir cls drop dup $00 > if $01 do $08 $04 at . $01 $04 at . $04 $04 at . $23 $04 at accept drop scroll loop then nop ;",0 
d24b .. 00		start3c:         db ": dirlist dir cls drop dup $00 > if $01 do \"/\" .> .> \"Ext:\" .> .> \"Id: \" .> .>  loop then nop ;",0 
d2ab			 
d2ab			 
d2ab			; a handy word to list items on the stack 
d2ab			 
d2ab .. 00		list:            db ": more cls repeat scroll $01 $04 at depth . $0a $04 at .> $01 $01 at accept drop depth 0= not until nop ;",0 
d315			 
d315			 
d315			; test stack  
d315			; rnd8 stest 
d315			 
d315			;stest:   db ": stest cls  v0! v0@ $00 do rnd8 $01 $01 at i . $01 pause loop v0@ $00 do drop $12 $01 at depth . $01 pause loop nop ;",0  
d315			 
d315			; random malloc and free cycles 
d315			 
d315			;mtesta:      db ": mtesta $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . rnd8 dup $13 $01 at . malloc heap $1f $01 at . $1f $02 at . $01 pause free $01 until nop ;", 0 
d315			 
d315			; fixed malloc and free cycles 
d315			 
d315			;mtestb:      db ": mtestb $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 malloc heap $1f $01 at . $1f $02 at . $01 pause free $01 until nop ;", 0 
d315			 
d315			; fixed double string push and drop cycle  
d315			 
d315			;mtestc:      db ": mtestc $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 spaces $2f spaces  heap $1f $01 at . $1f $02 at . $01 pause drop drop $01 until nop ; ", 0 
d315			 
d315			; consistent fixed string push and drop cycle  
d315			 
d315			;mtestd:      db ": mtestd $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 spaces heap $1f $01 at . $1f $02 at . $01 pause drop $01 until nop ; ", 0 
d315			 
d315			;mteste:      db ": mteste $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . rnd8 dup spaces $0f $02 at . heap $1f $01 at . $1f $02 at . $01 pause drop $01 until nop ; ", 0 
d315			 
d315			;test1:		db ": aa 1 2 3 ;", 0 
d315			;test2:     	db "111 aa 888 999",0 
d315			;test3:     	db ": bb 77 ;",0 
d315			;test4:     	db "$02 $01 do i . loop bb",0 
d315			 
d315 .. 00		test5:     	db ": hline $13 $00 do i $01 at 1 . i $04 at 1 . loop nop ;",0 
d34d .. 00		test6:     	db ": vline $04 $01 do $00 i at 1 . $13 i at 1 . loop nop ;",0 
d385 .. 00		test7:     	db ": box hline vline ;",0 
d399 .. 00		test8:     	db ": world cls box $03 $03 at Hello-World! . ;",0 
d3c5 .. 00		test9:     	db ": sw $01 adsp world ;",0 
d3db .. 00		test10:     	db ": fw $00 adsp world draw $05 pause ;",0 
d400			;test11:     	db "hello create .",0 
d400			;test12:     	db "hello2 create .",0 
d400			 
d400			;mmtest1:     	db "cls $0001 $0008 MIN . $0002 pause",0 
d400			;mmtest2:     	db "cls $0101 $0008 MIN . $0002 pause",0 
d400			;mmtest3:     	db "cls $0001 $0008 MAX . $0002 pause",0 
d400			;mmtest4:     	db "cls $0101 $0008 MAX . $0002 pause",0 
d400			;mmtest5:     	db "cls $0001 $0001 MIN . $0002 pause",0 
d400			;mmtest6:     	db "cls $0001 $0001 MAX . $0002 pause",0 
d400			 
d400			;iftest1:     	db "$0001 IF cls .",0 
d400			;iftest2:     	db "$0000 IF cls .",0 
d400			;iftest3:     	db "$0002 $0003 - IF cls .",0 
d400			;looptest1:     	db "$0003 $0001 do i . loop 8",0 
d400			;looptest2:     	db "$0003 $0001 do i . $0001 pause loop 8",0 
d400			 
d400			;ifthtest1:     	db "$0001 IF is-true . $0005 pause THEN next-word . $0005 pause",0 
d400			;ifthtest2:     	db "$0000 IF is-true . $0005 pause THEN next-word . $0005 pause",0 
d400			;ifthtest3:     	db "$0002 $0003 - IF is-true . $0005 pause THEN next-word . $0005 pause",0 
d400			 
d400			 
d400 .. 00		sound1: db ": note spicel spio spiceh spicel ; ",0 
d424 .. 00		sound2: db ": slient $9f note $bf note $df note $ff note ; ", 0 
d454 .. 00		sound3: db ": sound $01 cartdev $00 spitime ! ; ",0 
d479 .. 00		sound4: db ": cha $00 ; ",0 
d486 .. 00		sound5: db ": chb $20 ; ",0 
d493 .. 00		sound6: db ": chc $40 ; ",0 
d4a0 .. 00		sound7: db ": chd $60 ; ",0 
d4ad .. 00		sound8: db ": cnote $80 + + note ; ", 0 
d4c5 .. 00		sound9: db ": cvol $90 + + note ; ", 0 
d4dc			 
d4dc			 
d4dc			 
d4dc			 
d4dc			; a small guess the number game 
d4dc			 
d4dc .. 00		game1:          db ": gsn rnd8 v1! ;",0 
d4ed .. 00		game1a:          db ": gs $00 $00 at Enter-a-number .- $00 $02 at between-1-and-255 .- $00 $03 at accept str2num v2! ;",0 
d54f			 
d54f .. 00		game1b:          db ": gcb v2@ v1@ < if $00 $00 at Too-low! .- $01 then ;",0 
d584 .. 00		game1c:          db ": gcc v2@ v1@ > if $00 $00 at Too-high! .- $01 then ;",0 
d5ba .. 00		game1d:          db ": gcd v2@ v1@ = if $00 $00 at Yes! .- $00 then ;",0 
d5eb .. 00		game1s:          db ": gck gcb gcc gcd ;",0 
d5ff .. 00		game1t:          db ": sc v3@ $01 + v3! ;",0 
d614 .. 00		game1f:          db ": fsc v3@ cls $01 $01 at You-Took .- $02 $03 at . ;",0 
d648 .. 00		game1z:         db ": ga $00 v3! gsn repeat cls gs cls gck $02 pause sc until fsc nop ;",0 
d68c			 
d68c			; Using 'ga' save a high score across multiple runs using external storage 
d68c			 
d68c .. 00		game1zz:         db ": gas ga $01 bank $80 bread $01 $04 at Prev-Score .> storepage ptr $02 + dup 2@ . v3@ swap 2! $80 bupd ;",0 
d6f5			 
d6f5			 
d6f5			;game2r:          db ": m2r rnd8 v1! ;  ",0, 0, 0, FORTH_END_BUFFER 
d6f5			;game2b1:          db ": m2b1 $1f $00 do i v2@ at rnd8 $30 < if A . then loop nop ;  ",0, 0, 0, FORTH_END_BUFFER 
d6f5			;game2b2:          db ": m2b cls $04 $01 do i v2! m2b1 loop ;  ",0, 0, 0, FORTH_END_BUFFER 
d6f5			 
d6f5			; simple screen saver to test code memory reuse to destruction 
d6f5			 
d6f5 .. 00		ssv2:            db ": ssvchr $2a $2d rnd dup $2c = if drop $20 then nop ;",0 
d72b .. 00		ssv3:            db ": ssvposx $01 $27 rnd v0! ;",0 
d747 .. 00		ssv4:            db ": ssvposy $01 $05 rnd v1! ;",0 
d763 .. 00		ssv5:            db ": ssvt ssvposx ssvposy ;",0 
d77c .. 00		ssv1:          db ": ssv cls repeat ssvposx ssvposy v0@ v1@ at ssvchr emit $01 until nop ;",0 
d7c4 .. 00		ssv1cpm:          db ": ssvcpm cls repeat ssvposx ssvposy v0@ v1@ at ssvchr emit $01 pausems $01 until nop ;",0 
d81b			;ssv1:          db ": ssv cls repeat ssvt v0@ v1@ at ssvchr emit $01 until nop ;",0 
d81b			;ssv1:          db ": ssv ssvposx ssvposy at ssvchr ;",0 
d81b			;ssv1:            db ": ssv repeat ssvpos rnd8 $10 if               $01 until nop ;",0 
d81b			;ssv2:            db ": ssvchr v0! v1! at? ;",0 
d81b			;ssv5:            db ": ssvt ssvposx ssvposy v0@ .> v1@ .> ;",0 
d81b			;ssv2:            db ": ssvchr $2a $2d rnd  ;",0 
d81b			 
d81b			 
d81b			 
d81b			; minesweeper/battleship finding game 
d81b			; draws a game board of random ship/mine positions 
d81b			; user enters coords to see if it hits on 
d81b			; game ends when all are hit 
d81b			; when hit or miss says how many may be in the area 
d81b			 
d81b			; setup the game board and then hide it 
d81b			;game2b:          db ": mbsetup $02 fb cls $04 $01 do i v2! $10 $01 do i v2@ at rnd8 $30 < if A . then loop loop $05 pause $01 fb ;",0 
d81b			;game2bf:         db ": mbsetupf cls $04 $01 do i v2! $10 $01 do i v2@ at \"+\" . loop loop nop ;",0 
d81b			;; prompt for where to target 
d81b			;game2mba:        db ": mbp $12 $04 at Turns .> v3@ . $12 $03 at Score .> v0@ . $12 $01 at Enter-X-__ .- $1a $01 at accept $12 $02 at Enter-Y-__ .- $1a $02 at accept nop ;", 0  
d81b			;game2mbas:        db ": mbsv str2num v2! str2num v1! nop ;", 0  
d81b			;; TODO see if the entered coords hits or misses pushes char hit of miss 
d81b			;game2mbht:      db ": mbckht nop ;",0 
d81b			;game2mbms:      db ": mbcms nop ;",0 
d81b			; TODO how many might be near by 
d81b			;game2mb:          db ": mb $00 v0! $00 v3! mbsetup mbsetupf repeat mbp mbsv $02 fb mbckht mbcms v1@ v2@ at@ $01 fb v1@ v2@ at emit $01 until nop ;",0 
d81b			 
d81b			; Game 3 
d81b			 
d81b			; Vert scroller ski game - avoid the trees! 
d81b			 
d81b			; v0 score (ie turns) 
d81b			; v1 player pos 
d81b			; v2 left wall 
d81b			; v3 right wall 
d81b			 
d81b			; Draw side walls randomly 
d81b			 
d81b			;game3w:   db ": vsw v2@ $04 at \"|\" . v3@ $04 at \"|\" . nop ;", 0 
d81b			 
d81b			; Draw player 
d81b			;game3p:   db ": vsp v1@ $01 at \"V\" . nop ; ", 0 
d81b			 
d81b			; TODO Get Key 
d81b			 
d81b			; TODO Move left right 
d81b			 
d81b			; scroll and move walls a bit 
d81b			 
d81b			;game3sc:  db ": vsscl v2@ $01 + v2! v3@ $01 - v3! scroll nop ;", 0 
d81b			 
d81b			; main game loop 
d81b			 
d81b			;game3vsi:    db ": vsi $00 v0! $01 v2! $12 v3! $06 v1! nop ;",0 
d81b			;game3vs:    db ": vs vsi repeat vsw vsp vsscl $05 pause scroll $01 until nop ;",0 
d81b			 
d81b			; key board defs 
d81b			 
d81b .. 00		keyup:       db ": keyup $05 ;",0 
d829 .. 00		keydown:       db ": keydown $0a ;",0 
d839 .. 00		keyleft:       db ": keyleft $0b ;",0 
d849 .. 00		keyright:       db ": keyright $0c ;",0 
d85a .. 00		keyf1:       db ": keyf1 $10 ;",0 
d868 .. 00		keyf2:       db ": keyf2 $11 ;",0 
d876 .. 00		keyf3:       db ": keyf3 $12 ;",0 
d884 .. 00		keyf4:       db ": keyf4 $13 ;",0 
d892 .. 00		keyf5:       db ": keyf5 $14 ;",0 
d8a0 .. 00		keyf6:       db ": keyf6 $15 ;",0 
d8ae .. 00		keyf7:       db ": keyf7 $16 ;",0 
d8bc .. 00		keyf8:       db ": keyf8 $17 ;",0 
d8ca .. 00		keyf9:       db ": keyf9 $18 ;",0 
d8d8 .. 00		keyf10:       db ": keyf10 $19 ;",0 
d8e7 .. 00		keyf11:       db ": keyf11 $1a ;",0 
d8f6 .. 00		keyf12:       db ": keyf12 $1b ;",0 
d905			 
d905 .. 00		keytab:       db ": keytab $09 ;",0 
d914 .. 00		keycr:       db ": keycr $0d ;",0 
d922 .. 00		keyhome:       db ": keyhome $0e ;",0 
d932 .. 00		keyend:       db ": keyend $0f ;",0 
d941 .. 00		keybs:       db ": keybs $08 ;",0 
d94f			 
d94f			   
d94f			 
d94f			 
d94f			 
d94f			; eof 
# End of file forth_autostart.asm
d94f			 
d94f			 
d94f			 
d94f			; stack over and underflow checks 
d94f			 
d94f			; init the words to detect the under/overflow 
d94f			 
d94f			chk_stk_init: 
d94f				; a vague random number to check so we dont get any "lucky" hits 
d94f 3e 2d			ld a, 45 
d951 6f				ld l, a 
d952 00				nop 
d953 3e 17			ld a, 23 
d955 67				ld h, a 
d956			 
d956 22 9d e2			ld (chk_word), hl     ; the word we need to check against 
d959			 
d959			;	ld (chk_stund), hl	; stack points.... 
d959 22 00 ef			ld (chk_stovr), hl 
d95c 22 ec e9			ld (chk_ret_und), hl 
d95f 22 aa e9			ld (chk_ret_ovr), hl 
d962 22 28 e9			ld (chk_loop_ovr), hl 
d965 22 26 e8			ld (chk_data_ovr), hl 
d968 c9				ret 
d969				 
d969			check_stacks: 
d969				; check all stack words 
d969			 
d969 e5				push hl 
d96a d5				push de 
d96b			 
d96b			;	ld de,(chk_word) 
d96b			;	ld hl, (chk_stund)	; stack points.... 
d96b			;	if DEBUG_STK_FAULT 
d96b			;		DMARK "FAa" 
d96b			;		CALLMONITOR 
d96b			;	endif 
d96b			;	call cmp16 
d96b			;	jp z, .chk_faulta 
d96b			; 
d96b			;	ld de, sfaultsu 
d96b			;	jp .chk_fault 
d96b			 
d96b 2a 00 ef		.chk_faulta: ld hl, (chk_stovr) 
d96e ed 5b 9d e2		ld de,(chk_word) 
d972				if DEBUG_STK_FAULT 
d972					DMARK "FAb" 
d972					CALLMONITOR 
d972				endif 
d972 cd f9 8c			call cmp16 
d975 28 06			jr z, .chk_fault1 
d977 11 18 da			ld de, sfaultso 
d97a c3 cc d9			jp .chk_fault 
d97d			.chk_fault1:  
d97d 2a ec e9			ld hl, (chk_ret_und) 
d980 ed 5b 9d e2		ld de,(chk_word) 
d984				if DEBUG_STK_FAULT 
d984					DMARK "FAU" 
d984					CALLMONITOR 
d984				endif 
d984 cd f9 8c			call cmp16 
d987 ca 90 d9			jp z, .chk_fault2 
d98a 11 28 da			ld de, sfaultru 
d98d c3 cc d9			jp .chk_fault 
d990			.chk_fault2:  
d990 2a aa e9			ld hl, (chk_ret_ovr) 
d993 ed 5b 9d e2		ld de,(chk_word) 
d997				if DEBUG_STK_FAULT 
d997					DMARK "FA1" 
d997					CALLMONITOR 
d997				endif 
d997 cd f9 8c			call cmp16 
d99a ca a3 d9			jp z, .chk_fault3 
d99d 11 36 da			ld de, sfaultro 
d9a0 c3 cc d9			jp .chk_fault 
d9a3			.chk_fault3:  
d9a3 2a 28 e9			ld hl, (chk_loop_ovr) 
d9a6 ed 5b 9d e2		ld de,(chk_word) 
d9aa				if DEBUG_STK_FAULT 
d9aa					DMARK "FA2" 
d9aa					CALLMONITOR 
d9aa				endif 
d9aa cd f9 8c			call cmp16 
d9ad ca b6 d9			jp z, .chk_fault4 
d9b0 11 50 da			ld de, sfaultlo 
d9b3 c3 cc d9			jp .chk_fault 
d9b6			.chk_fault4:  
d9b6 2a 26 e8			ld hl, (chk_data_ovr) 
d9b9 ed 5b 9d e2		ld de,(chk_word) 
d9bd				if DEBUG_STK_FAULT 
d9bd					DMARK "FA3" 
d9bd					CALLMONITOR 
d9bd				endif 
d9bd cd f9 8c			call cmp16 
d9c0 ca c9 d9			jp z, .chk_fault5 
d9c3 11 6a da			ld de, sfaultdo 
d9c6 c3 cc d9			jp .chk_fault 
d9c9			 
d9c9			 
d9c9			.chk_fault5:  
d9c9 d1				pop de 
d9ca e1				pop hl 
d9cb			 
d9cb c9				ret 
d9cc			 
d9cc cd ae 8a		.chk_fault: 	call clear_display 
d9cf 3e 28				ld a, display_row_2 
d9d1 cd c1 8a				call str_at_display 
d9d4 11 fa d9				   ld de, .stackfault 
d9d7 3e 00				ld a, display_row_1 
d9d9 cd c1 8a				call str_at_display 
d9dc 11 6b ee				    ld de, debug_mark 
d9df 3e 11				ld a, display_row_1+17 
d9e1 cd c1 8a				call str_at_display 
d9e4 cd d1 8a				call update_display 
d9e7			 
d9e7				; prompt before entering montior for investigating issue 
d9e7			 
d9e7 3e 78			ld a, display_row_4 
d9e9 11 54 97			ld de, endprog 
d9ec			 
d9ec cd d1 8a			call update_display		 
d9ef			 
d9ef cd da 99			call next_page_prompt 
d9f2			 
d9f2 d1				pop de 
d9f3 e1				pop hl 
d9f4 cd a8 97				call monitor 
d9f7 c3 9e 96				jp warmstart 
d9fa					;jp 0 
d9fa					;halt 
d9fa			 
d9fa			 
d9fa			 
d9fa .. 00		.stackfault: 	db "Stack fault:",0 
da07			 
da07 .. 00		sfaultsu: 	db	"Stack under flow",0 
da18 .. 00		sfaultso: 	db	"Stack over flow",0 
da28 .. 00		sfaultru:	db "RTS underflow",0 
da36 .. 00		sfaultro:	db "RTS overflow/LS underflow", 0 
da50 .. 00		sfaultlo:	db "LS overflow/DTS underflow", 0 
da6a .. 00		sfaultdo:	db "DTS overflow", 0 
da77			 
da77			 
da77			fault_dsp_under: 
da77 11 89 da			ld de, .dsp_under 
da7a c3 39 db			jp .show_fault 
da7d			 
da7d			fault_rsp_under: 
da7d 11 97 da			ld de, .rsp_under 
da80 c3 39 db			jp .show_fault 
da83			fault_loop_under: 
da83 11 a5 da			ld de, .loop_under 
da86 c3 39 db			jp .show_fault 
da89			 
da89 .. 00		.dsp_under: db "DSP Underflow",0 
da97 .. 00		.rsp_under: db "RSP Underflow",0 
daa5 .. 00		.loop_under: db "LOOP Underflow",0 
dab4			 
dab4			 
dab4 d5			type_faultn: 	push de 
dab5 e5					push hl 
dab6 cd ae 8a				call clear_display 
dab9 11 e0 da				   ld de, .typefaultn 
dabc 3e 00				ld a, display_row_1 
dabe cd c1 8a				call str_at_display 
dac1 11 6b ee				    ld de, debug_mark 
dac4 3e 11				ld a, display_row_1+17 
dac6 cd c1 8a				call str_at_display 
dac9 cd d1 8a				call update_display 
dacc			 
dacc				; prompt before entering montior for investigating issue 
dacc			 
dacc 3e 78			ld a, display_row_4 
dace 11 54 97			ld de, endprog 
dad1			 
dad1 cd d1 8a			call update_display		 
dad4			 
dad4 cd da 99			call next_page_prompt 
dad7			 
dad7 e5					push hl 
dad8 d5					push de 
dad9 cd a8 97				call monitor 
dadc c3 9e 96				jp warmstart 
dadf 76					halt 
dae0			 
dae0			 
dae0 .. 00		.typefaultn: db "NUM Type Expected TOS!",0 
daf7			 
daf7 d5			type_faults: 	push de 
daf8 e5					push hl 
daf9 cd ae 8a				call clear_display 
dafc 11 22 db				   ld de, .typefaults 
daff 3e 00				ld a, display_row_1 
db01 cd c1 8a				call str_at_display 
db04 11 6b ee				    ld de, debug_mark 
db07 3e 11				ld a, display_row_1+17 
db09 cd c1 8a				call str_at_display 
db0c cd d1 8a				call update_display 
db0f			 
db0f				; prompt before entering montior for investigating issue 
db0f			 
db0f 3e 78			ld a, display_row_4 
db11 11 54 97			ld de, endprog 
db14			 
db14 cd d1 8a			call update_display		 
db17			 
db17 cd da 99			call next_page_prompt 
db1a			 
db1a e1					pop hl 
db1b d1					pop de 
db1c cd a8 97				call monitor 
db1f c3 9e 96				jp warmstart 
db22			 
db22			 
db22 .. 00		.typefaults: db "STR Type Expected TOS!",0 
db39			 
db39			.show_fault: 	 
db39 d5					push de 
db3a cd ae 8a				call clear_display 
db3d d1					pop de 
db3e 3e 00				ld a, display_row_1 
db40 cd c1 8a				call str_at_display 
db43 11 6b ee				    ld de, debug_mark 
db46 3e 11				ld a, display_row_1+17 
db48 cd c1 8a				call str_at_display 
db4b cd d1 8a				call update_display 
db4e			 
db4e				; prompt before entering montior for investigating issue 
db4e			 
db4e 3e 78			ld a, display_row_4 
db50 11 54 97			ld de, endprog 
db53			 
db53 cd d1 8a			call update_display		 
db56			 
db56 cd da 99			call next_page_prompt 
db59			 
db59 e1					pop hl 
db5a d1					pop de 
db5b cd a8 97				call monitor 
db5e			; do a dump to cli and not warmstart so we preserve all of the uwords.  
db5e			; TODO Make optional fault restart to cli or warm boot? 
db5e					;jp warmstart 
db5e c3 e8 96				jp cli 
db61 76					halt 
db62			 
db62			; handle the auto run of code from files in storage 
db62			 
db62			 
db62			include "forth_startup.asm" 
db62			; Which startup method to use? 
db62			; 
db62			; version 1 - allows for a single stored file to be selected to run at start up (if se storage is enabled) 
db62			; followed by loading of a list of scripts in eeprom 
db62			 
db62			; version 2 - if se storage is enabled then auto load all files which begin with a '*' else use loading 
db62			; from eeprom 
db62			 
db62			; Select with define in main stubs 
db62			 
db62			if STARTUP_V1 
db62				include "forth_startupv1.asm" 
db62			; Startup script loading version 1 
db62			 
db62			; If SE storage is available first stage is to use the selected file 
db62			; then go through the eeprom list 
db62			 
db62 .. 00		sprompt1: db "Startup load...",0 
db72 .. 00		sprompt2: db "Run? 1=No *=End #=All",0 
db88			 
db88			 
db88			 
db88			 
db88			forth_startup: 
db88 21 d5 cc			ld hl, startcmds 
db8b 3e 00			ld a, 0 
db8d 32 e7 e6			ld (os_last_cmd), a    ; tmp var to skip prompts if doing all 
db90			 
db90 e5			.start1:	push hl 
db91 cd ae 8a			call clear_display 
db94 11 62 db			ld de, sprompt1 
db97 3e 00		        ld a, display_row_1 
db99 cd c1 8a			call str_at_display 
db9c 11 72 db			ld de, sprompt2 
db9f 3e 28		        ld a, display_row_2 
dba1 cd c1 8a			call str_at_display 
dba4 e1				pop hl 
dba5 e5				push hl 
dba6 5e				ld e,(hl) 
dba7 23				inc hl 
dba8 56				ld d,(hl) 
dba9 3e 50		        ld a, display_row_3 
dbab cd c1 8a			call str_at_display 
dbae cd d1 8a			call update_display 
dbb1			 
dbb1			 
dbb1 3a e7 e6			ld a, (os_last_cmd) 
dbb4 fe 00			cp 0 
dbb6 28 05			jr z, .startprompt 
dbb8 cd e5 89			call delay250ms 
dbbb 18 24			jr .startdo 
dbbd				 
dbbd				 
dbbd			 
dbbd			.startprompt: 
dbbd			 
dbbd 3e 9f			ld a,display_row_4 + display_cols - 1 
dbbf 11 d8 99		        ld de, endprg 
dbc2 cd c1 8a			call str_at_display 
dbc5 cd d1 8a			call update_display 
dbc8 cd f1 89			call delay1s 
dbcb cd ee dc			call cin_wait 
dbce						 
dbce fe 2a			cp '*' 
dbd0 28 5e			jr z, .startupend1 
dbd2 fe 23			cp '#' 
dbd4 20 07			jr nz, .startno 
dbd6 3e 01			ld a, 1 
dbd8 32 e7 e6			ld (os_last_cmd),a 
dbdb 18 04			jr .startdo 
dbdd fe 31		.startno:	cp '1' 
dbdf 28 3a			jr z,.startnxt  
dbe1			 
dbe1				; exec startup line 
dbe1			.startdo:	 
dbe1 e1				pop hl 
dbe2 e5				push hl 
dbe3				 
dbe3 5e				ld e,(hl) 
dbe4 23				inc hl 
dbe5 56				ld d,(hl) 
dbe6 eb				ex de,hl 
dbe7			 
dbe7 e5				push hl 
dbe8			 
dbe8 3e 00			ld a, 0 
dbea				;ld a, FORTH_END_BUFFER 
dbea cd 4c 90			call strlent 
dbed 23				inc hl   ; include zero term to copy 
dbee 06 00			ld b,0 
dbf0 4d				ld c,l 
dbf1 e1				pop hl 
dbf2 11 c1 e2			ld de, scratch 
dbf5 ed b0			ldir 
dbf7			 
dbf7			 
dbf7 21 c1 e2			ld hl, scratch 
dbfa cd 5d 9e			call forthparse 
dbfd cd 9d 9e			call forthexec 
dc00 cd af 9d			call forthexec_cleanup 
dc03			 
dc03 3e 78			ld a, display_row_4 
dc05 11 54 97			ld de, endprog 
dc08			 
dc08 cd d1 8a			call update_display		 
dc0b			 
dc0b 3a e7 e6			ld a, (os_last_cmd) 
dc0e fe 00			cp 0 
dc10 20 09			jr nz, .startnxt 
dc12 cd da 99			call next_page_prompt 
dc15 cd ae 8a		        call clear_display 
dc18 cd d1 8a			call update_display		 
dc1b			 
dc1b				; move onto next startup line? 
dc1b			.startnxt: 
dc1b			 
dc1b cd e5 89			call delay250ms 
dc1e e1				pop hl 
dc1f			 
dc1f 23				inc hl 
dc20 23				inc hl 
dc21			 
dc21 e5				push hl 
dc22 5e				ld e, (hl) 
dc23 23				inc hl 
dc24 56				ld d, (hl) 
dc25 e1				pop hl 
dc26				; TODO replace 0 test 
dc26			 
dc26 eb				ex de, hl 
dc27 cd 04 8d			call ishlzero 
dc2a			;	ld a,e 
dc2a			;	add d 
dc2a			;	cp 0    ; any left to do? 
dc2a eb				ex de, hl 
dc2b c2 90 db			jp nz, .start1 
dc2e 18 01			jr .startupend 
dc30			 
dc30 e1			.startupend1: pop hl 
dc31			.startupend: 
dc31			 
dc31 cd ae 8a			call clear_display 
dc34 cd d1 8a			call update_display 
dc37 c9				ret 
dc38			if STORAGE_SE 
dc38			 
dc38			sprompt3: db "Loading from start-up file?:",0 
dc38			sprompt4: db "(Y=Any key/N=No)",0 
dc38			 
dc38			 
dc38			forth_autoload: 
dc38			 
dc38				; load block 0 of store 1 
dc38				 
dc38				ld a, $fe      ; bit 0 clear 
dc38				ld (spi_device), a 
dc38			 
dc38				call storage_get_block_0 
dc38			 
dc38				ld a, (store_page+STORE_0_AUTOFILE) 
dc38			 
dc38				cp 0 
dc38				ret z     ; auto start not enabled 
dc38			 
dc38				call clear_display 
dc38			 
dc38				; set bank 
dc38			 
dc38					ld a, (store_page+STORE_0_BANKRUN) 
dc38					ld (spi_device), a 
dc38			 
dc38				; get file id to load from and get the file name to display 
dc38			 
dc38					ld a, (store_page+STORE_0_FILERUN) 
dc38			 
dc38					ld l, 0 
dc38					ld h, a 
dc38					ld de, store_page 
dc38			 
dc38					if DEBUG_FORTH_WORDS 
dc38						DMARK "ASp" 
dc38						CALLMONITOR 
dc38					endif 
dc38					call storage_read 
dc38			 
dc38					if DEBUG_FORTH_WORDS 
dc38						DMARK "ASr" 
dc38						CALLMONITOR 
dc38					endif 
dc38			 
dc38					call ishlzero 
dc38					ret z             ; file not found 
dc38			 
dc38					ld a, display_row_2 + 10 
dc38					ld de, store_page+3 
dc38					call str_at_display 
dc38				 
dc38			; 
dc38			 
dc38				ld a, display_row_1+5 
dc38				ld de, sprompt3 
dc38				call str_at_display 
dc38				ld a, display_row_3+15 
dc38				ld de, sprompt4 
dc38				call str_at_display 
dc38			 
dc38				call update_display 
dc38			 
dc38				call cin_wait 
dc38				cp 'n' 
dc38				ret z 
dc38				cp 'N' 
dc38				ret z 
dc38			 
dc38				call delay1s 
dc38			 
dc38				ld a, (store_page+2) 
dc38				ld (store_openmaxext), a    ; save count of ext 
dc38				ld a, 1  
dc38				ld (store_openext), a    ; save count of ext 
dc38			 
dc38			.autof:  
dc38				ld l , a 
dc38				 
dc38				ld a, (store_page) 
dc38				ld h, a	 
dc38				ld de, store_page 
dc38					if DEBUG_FORTH_WORDS 
dc38						DMARK "ASl" 
dc38						CALLMONITOR 
dc38					endif 
dc38					call storage_read 
dc38				call ishlzero 
dc38				ret z 
dc38			;	jr z, .autoend 
dc38			 
dc38					if DEBUG_FORTH_WORDS 
dc38						DMARK "ASc" 
dc38						CALLMONITOR 
dc38					endif 
dc38				ld de, store_page+2 
dc38				ld a, display_row_4 
dc38				call str_at_display 
dc38			 
dc38				call update_display 
dc38				call delay250ms 
dc38			 
dc38			 
dc38			 
dc38				ld hl, store_page+2 
dc38				call forthparse 
dc38				call forthexec 
dc38				call forthexec_cleanup 
dc38			 
dc38				 
dc38				ld a, (store_openext) 
dc38				inc a 
dc38				ld (store_openext), a    ; save count of ext 
dc38			 
dc38				jr .autof 
dc38			;.autofdone: 
dc38			; 
dc38			;		if DEBUG_FORTH_WORDS 
dc38			;			DMARK "ASx" 
dc38			;			CALLMONITOR 
dc38			;		endif 
dc38			;;	call clear_display 
dc38			;	ret 
dc38			 
dc38			 
dc38			 
dc38			endif 
# End of file forth_startupv1.asm
dc38			endif 
dc38			if STARTUP_V2 
dc38				include "forth_startupv2.asm" 
dc38			endif 
dc38			 
# End of file forth_startup.asm
dc38			 
dc38			; eof 
# End of file forth_kernel.asm
dc38			;include "nascombasic.asm" 
dc38			 
dc38			 
dc38			; find out where the code ends if loaded into RAM (for SC114) 
dc38			;endofcode:  
dc38			;	nop 
dc38			 
dc38			 
dc38			; jump to nmi vector 
dc38			 
dc38			init_nmi: 
dc38 3e c9			ld a, $c9   ; RET 
dc3a 32 72 ee			ld (nmi_vector), a 
dc3d c9				ret 
dc3e			nmi: 
dc3e e5				push hl 
dc3f d5				push de 
dc40 c5				push bc 
dc41 f5				push af 
dc42 cd 72 ee			call nmi_vector 
dc45 f5				push af 
dc46 c5				push bc 
dc47 d5				push de 
dc48 e5				push hl 
dc49 ed 4d			reti 
dc4b			 
dc4b			 
dc4b			; eof 
dc4b			 
# End of file main.asm
dc4b			;include "firmware_lcd_4x40.asm" 
dc4b			;;include "firmware_lcd_4x20.asm" 
dc4b			include "firmware_serial_display.asm" 
dc4b			 
dc4b			; Serial display interface for SC114 
dc4b			 
dc4b			 
dc4b			display_row_1: equ 0 
dc4b			display_row_2: equ display_row_1+display_cols 
dc4b			display_row_3: equ display_row_2 + display_cols 
dc4b			display_row_4: equ display_row_3 + display_cols 
dc4b			 
dc4b			kLCDWidth:  EQU display_cols             ;Width in characters 
dc4b			kLCD_Line1: EQU 0x00  
dc4b			kLCD_Line2: EQU kLCD_Line1+kLCDWidth 
dc4b			; E1 
dc4b			kLCD_Line3: EQU kLCD_Line2+kLCDWidth 
dc4b			kLCD_Line4: EQU kLCD_Line3+kLCDWidth  
dc4b			 
dc4b			lcd_init: 
dc4b				; no init as handled by the SCM bios 
dc4b c9				ret 
dc4c			 
dc4c			 
dc4c			; low level functions for direct screen writes 
dc4c			 
dc4c			; output char at pos? 
dc4c			fLCD_Str: 
dc4c			        ;out (SC114_SIO_1_OUT),a 
dc4c c5				push bc 
dc4d 0e 02			ld c, $02 
dc4f f7				rst $30 
dc50 c1				pop bc 
dc51 c9				ret 
dc52			 
dc52			; position the cursor on the screen using A as realtive point in screen buffer (i.e. A=(x+(width/y))) 
dc52			fLCD_Pos: 
dc52				; use ASCII escape to position 
dc52			        ;out (SC114_SIO_1_OUT),a 
dc52 c5				push bc 
dc53 0e 02			ld c, $02 
dc55 f7				rst $30 
dc56 c1				pop bc 
dc57			 
dc57 c9				ret 
dc58			 
dc58			; output char at pos 
dc58			fLCD_Data: 
dc58			      ;  out (SC114_SIO_1_OUT),a 
dc58 c5				push bc 
dc59 0e 02			ld c, $02 
dc5b f7				rst $30 
dc5c c1				pop bc 
dc5d			 
dc5d c9				ret 
dc5e			 
dc5e			; ascii cls  
dc5e			 
dc5e 1b 5b 48 00	.cls:   db 27, '[', 'H', 0 
dc62			 
dc62			; write the frame buffer given in hl to hardware  
dc62			write_display: 
dc62			 
dc62			API: equ 0 
dc62			 
dc62			if API 
dc62				push bc 
dc62				ld b, 4 
dc62			 
dc62			        ld (display_write_tmp), hl 	  
dc62			 
dc62				; clear and home cursor 
dc62			 
dc62				ld c, 6 
dc62				ld de, .cls 
dc62				rst $30 
dc62			 
dc62			 
dc62			.writeln: 
dc62			 
dc62				ld de, (display_write_tmp) 
dc62				ld c, 6 
dc62				rst $30 
dc62				ld c, 7 
dc62				rst $30 
dc62			 
dc62				ld hl, (display_write_tmp) 
dc62				ld de, display_cols 
dc62				add hl,de 
dc62				ld (display_write_tmp),hl 
dc62			 
dc62				djnz  .writeln 
dc62			 
dc62				pop bc 
dc62			 
dc62			 
dc62				ret 
dc62			endif 
dc62 e5				push hl 
dc63 c5				push bc 
dc64 d5				push de 
dc65			 
dc65			;	ld c, 2 
dc65			;	;ld de, .cls 
dc65			;	ld a, 27 
dc65			;	rst $30 
dc65			;	ld c, 2 
dc65			;	;ld de, .cls 
dc65			;	ld a, '[' 
dc65			;	rst $30 
dc65			; 
dc65			;	ld c, 2 
dc65			;	;ld de, .cls 
dc65			;	ld a, 'H' 
dc65			;	rst $30 
dc65			; 
dc65			 
dc65 0e 02			ld c, 2 
dc67				;ld de, .cls 
dc67 3e 1b			ld a, 27 
dc69 f7				rst $30 
dc6a			 
dc6a			 
dc6a 0e 02			ld c, 2 
dc6c				;ld de, .cls 
dc6c 3e 5b			ld a, '[' 
dc6e f7				rst $30 
dc6f 0e 02			ld c, 2 
dc71				;ld de, .cls 
dc71 3e 32			ld a, '2' 
dc73 f7				rst $30 
dc74 0e 02			ld c, 2 
dc76				;ld de, .cls 
dc76 3e 4a			ld a, 'J' 
dc78 f7				rst $30 
dc79 d1				pop de 
dc7a c1				pop bc 
dc7b e1				pop hl 
dc7c			 
dc7c			 
dc7c 22 c9 eb		        ld (display_write_tmp), hl 	  
dc7f 3e 00			ld a, kLCD_Line1 
dc81			        ;    CALL fLCD_Pos       ;Position cursor to location in A 
dc81 06 28			ld b, display_cols 
dc83 ed 5b c9 eb		ld de, (display_write_tmp) 
dc87 cd e5 dc			call write_len_string 
dc8a				 
dc8a			 
dc8a e5			push hl 
dc8b d5			push de 
dc8c c5			push bc 
dc8d 0e 07			ld c, 7 
dc8f f7				rst $30 
dc90 c1			pop bc 
dc91 d1			pop de 
dc92 e1			pop hl 
dc93			 
dc93				 
dc93 2a c9 eb			ld hl, (display_write_tmp) 
dc96 11 28 00			ld de, display_cols 
dc99 19				add hl,de 
dc9a 22 c9 eb			ld (display_write_tmp),hl 
dc9d			 
dc9d				 
dc9d 3e 28			ld a, kLCD_Line2 
dc9f			        ;    CALL fLCD_Pos       ;Position cursor to location in A 
dc9f 06 28			ld b, display_cols 
dca1 ed 5b c9 eb		ld de, (display_write_tmp) 
dca5 cd e5 dc			call write_len_string 
dca8				 
dca8 2a c9 eb			ld hl, (display_write_tmp) 
dcab 11 28 00			ld de, display_cols 
dcae 19				add hl,de 
dcaf 22 c9 eb			ld (display_write_tmp),hl 
dcb2			 
dcb2 e5			push hl 
dcb3 d5			push de 
dcb4 c5			push bc 
dcb5 0e 07			ld c, 7 
dcb7 f7				rst $30 
dcb8 c1			pop bc 
dcb9 d1			pop de 
dcba e1			pop hl 
dcbb			 
dcbb				 
dcbb 3e 50			ld a, kLCD_Line3 
dcbd			         ;   CALL fLCD_Pos       ;Position cursor to location in A 
dcbd 06 28			ld b, display_cols 
dcbf ed 5b c9 eb		ld de, (display_write_tmp) 
dcc3 cd e5 dc			call write_len_string 
dcc6				 
dcc6 2a c9 eb			ld hl, (display_write_tmp) 
dcc9 11 28 00			ld de, display_cols 
dccc 19				add hl,de 
dccd 22 c9 eb			ld (display_write_tmp),hl 
dcd0			 
dcd0 e5			push hl 
dcd1 d5			push de 
dcd2 c5			push bc 
dcd3 0e 07			ld c, 7 
dcd5 f7				rst $30 
dcd6 c1			pop bc 
dcd7 d1			pop de 
dcd8 e1			pop hl 
dcd9			 
dcd9				 
dcd9 3e 78			ld a, kLCD_Line4 
dcdb			          ;  CALL fLCD_Pos       ;Position cursor to location in A 
dcdb 06 28			ld b, display_cols 
dcdd ed 5b c9 eb		ld de, (display_write_tmp) 
dce1 cd e5 dc			call write_len_string 
dce4 c9					ret 
dce5			 
dce5			 
dce5				; write out a fixed length string given in b from de 
dce5			 
dce5 1a			write_len_string:   LD   A, (DE)        ;Get character from string 
dce6 cd 58 dc		            CALL fLCD_Data      ;Write character to display 
dce9 13				inc de 
dcea 10 f9			djnz write_len_string 
dcec c9				ret 
dced			 
dced			 
dced			; eof 
# End of file firmware_serial_display.asm
dced			;include "firmware_key_5x10.asm" 
dced			;;include "firmware_key_4x10.asm" 
dced			include "firmware_key_serial.asm" 
dced			; Serial keyboard interface for SC114 
dced			 
dced			key_init: 
dced				; no init as handled by the SCM bios 
dced c9				ret 
dcee			 
dcee			 
dcee			cin_wait: 
dcee			;	ld a, 0 
dcee			;	ret 
dcee			 
dcee				;in a,(SC114_SIO_1_IN) 
dcee			        ; Use SCM API to get from whatever console device we are using 
dcee c5				push bc 
dcef 0e 01			ld c, $01 
dcf1 f7				rst $30 
dcf2 c1				pop bc 
dcf3 c9				ret 
dcf4			 
dcf4			cin: 
dcf4			 
dcf4			 
dcf4 c5				push bc 
dcf5			 
dcf5				; any key waiting to process? 
dcf5 0e 03			ld c, $03 
dcf7 f7				rst $30 
dcf8 28 05			jr z, .cin_skip 
dcfa			 
dcfa				; yep, get it 
dcfa			 
dcfa 0e 01			ld c, $01 
dcfc f7				rst $30 
dcfd c1				pop bc 
dcfe c9				ret 
dcff			.cin_skip: 
dcff 3e 00			ld a, 0 
dd01 c1				pop bc 
dd02 c9				ret 
dd03			 
dd03			 
dd03			 
dd03			 
# End of file firmware_key_serial.asm
dd03			endofcode:  
dd03			baseram:  
dd03 00				nop 
dd04			 
dd04			heap_start: equ baseram+15  ; Starting address of heap 
dd04			free_list:  equ baseram+10      ; Block struct for start of free list (MUST be 4 bytes) 
dd04			heap_size: equ  heap_end-heap_start      ; Number of bytes available in heap   TODO make all of user ram 
dd04			;VDU:  EQU     endofcode           ; BASIC Work space 
dd04			; eof 
dd04			 
# End of file os_mega_sc114.asm
dd04
