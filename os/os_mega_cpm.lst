# File debug_level2.asm
0000			 
0000			; DEBUG Level 2 - All useful debug on and memory courruption guards 
0000			 
0000			; Odd specific debug points for testing hardware dev 
0000			 
0000			;DEBUG_LEVEL0: equ 0 
0000			;DEBUG_LEVEL0: equ 0 
0000			;DEBUG_LEVEL2: equ 1 
0000			DEBUG_LEVEL: equ '2' 
0000			 
0000			DEBUG_SOUND: equ 0      
0000			DEBUG_STK_FAULT: equ 0 
0000			DEBUG_INPUT: equ 0     ; Debug input entry code 
0000			DEBUG_INPUTV2: equ 0     ; Debug input entry code 
0000			DEBUG_KEYCINWAIT: equ 0 
0000			DEBUG_KEYCIN: equ 0 
0000			DEBUG_KEY: equ 0 
0000			DEBUG_KEY_MATRIX: equ 0 
0000			DEBUG_STORECF: equ 0 
0000			DEBUG_STORESE: equ 1        ; TODO  w locks up, r returns.  
0000			DEBUG_SPI_HARD_CE0: equ 0    ; only handshake on CE0 on port A 
0000			DEBUG_SPI: equ 0    ; low level spi tests 
0000			 
0000			; Enable many break points 
0000			 
0000			DEBUG_FORTH_PARSE_EXEC: equ 0     ; 6 
0000			DEBUG_FORTH_PARSE_EXEC_SLOW: equ 0     ; 6 
0000			DEBUG_FORTH_PARSE_NEXTWORD: equ 0 
0000			DEBUG_FORTH_JP: equ 0    ; 4 
0000			DEBUG_FORTH_MALLOC: equ 0 
0000			DEBUG_FORTH_MALLOC_INT: equ 0 
0000			DEBUG_FORTH_DOT: equ 1 
0000			DEBUG_FORTH_DOT_WAIT: equ 0 
0000			DEBUG_FORTH_MATHS: equ 0 
0000			DEBUG_FORTH_TOK: equ 0    ; 4 
0000			DEBUG_FORTH_PARSE: equ 0    ; 3 
0000			DEBUG_FORTH: equ 0  ;2 
0000			DEBUG_FORTH_WORDS: equ 1   ; 1 
0000			DEBUG_FORTH_PUSH: equ 1   ; 1 
0000			DEBUG_FORTH_UWORD: equ 1   ; 1 
0000			 
0000			; Enable key point breakpoints 
0000			 
0000			DEBUG_FORTH_DOT_KEY: equ 0 
0000			DEBUG_FORTH_PARSE_KEY: equ 0   ; 5 
0000			DEBUG_FORTH_WORDS_KEY: equ 1   ; 1 
0000			 
0000			; Debug stack imbalances 
0000			 
0000			ON: equ 1 
0000			OFF: equ 0 
0000			 
0000			DEBUG_STACK_IMB: equ 0 
0000			STACK_IMB_STORE: equ 20 
0000			 
0000			; House keeping and protections 
0000			 
0000			DEBUG_FORTH_STACK_GUARD: equ 1    ; under/over flows 
0000			DEBUG_FORTH_MALLOC_GUARD: equ 1 
0000			DEBUG_FORTH_MALLOC_HIGH: equ 0     ; warn only if more than 255 chars being allocated. would be highly unusual! 
0000			FORTH_ENABLE_FREE: equ 0 
0000			FORTH_ENABLE_MALLOCFREE: equ 1 
0000			FORTH_ENABLE_DSPPOPFREE: equ 1    ; TODO BUG Seems to be OK in some situations but with SW it crashes straight away 
0000			FORTH_ENABLE_FLOATMATH: equ 0 
0000			; eof 
# End of file debug_level2.asm
# File os_mega_cpm.asm
0000			 
0000			; Hardware Platform 
0000			 
0000			BASE_SC114: equ 0 
0000			BASE_KEV: equ 0 
0000			BASE_CPM: equ 1 
0000			 
0000			ENABLE_BASIC: equ 0 
0000			 
0000			STARTUP_V1: equ 1 
0000			STARTUP_V2: equ 0 
0000			 
0000			tos:	equ 0f000h 
0000			; Using SCM API instead 
0000			;SC114_SIO_1_OUT: equ 81 
0000			;SC114_SIO_1_IN: equ 80 
0000			; 
0000			; 
0000			; CPU clock 
0000			; 
0000			CPU_CLOCK_4MHZ: equ 1 
0000			CPU_CLOCK_8MHZ: equ  0 
0000			CPU_CLOCK_10MHZ: equ  0 
0000			 
0000			; Use this to tune the delay functions if your CPU is a bit quick. i.e. RunCPM on a PC 
0000			 
0000			CPM_DELAY_TUNE: equ 4000 
0000			 
0000			; use microchip serial eeprom for storage 
0000			 
0000			STORAGE_SE: equ 0 
0000			SOUND_ENABLE: equ 0 
0000			 
0000			; the port where the PIO using the SC103 card is located 
0000			 
0000			SC103_PIO: equ 068h 
0000			 
0000			; Full OS but with the 5x10 fullsized keyboard 
0000			 
0000			display_rows: equ 4     
0000			;display_cols: equ 20 
0000			display_cols: equ 40 
0000			 
0000			key_rows: equ 5      
0000			key_cols: equ 10    
0000			 
0000			 
0000			include "main.asm" 
0000			; z80 homebrew opperating system 
0000			; 
0000			 
0000			STARTUP_ENABLE: equ 1 
0000			 
0000			 
0000			; bios jump points via rst 
0000			 
0000			if BASE_SC114 = 1  
0000			 
0000				org 8000h 
0000			endif 
0000			 
0000			if BASE_KEV = 1  
0000			 
0000				org 0h 
0000			endif 
0000			 
0000			if BASE_CPM = 1  
0000			 
0000				org 100h 
0100			endif 
0100 c3 7c 17			jp coldstart     ; rst 0 - cold boot 
0103			 
0103			 
0103 ..			buildtime: db   "Build: " 
010a					include "romtimestamp.asm" 
010a ..			db '2025-09-05 21:42' 
# End of file romtimestamp.asm
011a 00				   db 0 
011b .. 32 00		debuglevel: db   "DL",DEBUG_LEVEL, 0 
011f			 
011f			 
011f			 
011f			;        nop  
011f			;        nop 
011f			;;	org 05h		; null out bdos call 
011f			; 
011f			;        nop  
011f			;        nop  
011f			;        nop 
011f			;;	org 08h 
011f			;;; 
011f			;;	jp cin		; rst 8 - char in 
011f			;;; 
011f			; 
011f			;        nop 
011f			;        nop 
011f			;        nop 
011f			;        nop 
011f			;        nop 
011f			;        nop 
011f			;        nop 
011f			;        nop 
011f			;	org 010h 
011f			;; 
011f			;	jp cout		; rest 010h  - char out 
011f			;; 
011f			;	org 01bh   
011f			; 
011f			;	;jp  		; rst 01bh   - write string to display 
011f			;	jp str_at_display 
011f			; 
011f			; 
011f			;	org 020h 
011f			; 
011f			;	; jp		 ; rst 020h - read char at screen location 
011f			; 
011f			;	org 028h 
011f			 
011f				; jp		 ; rst 028h  - storage i/o 
011f			 
011f			; 	org 030h 
011f			;	jp break_point_state 
011f			  
011f			; $30  
011f			; org 038h 
011f			; $38 
011f			 
011f			; TODO any more important entry points to add to jump table for easier coding use? 
011f			 
011f			if BASE_KEV = 1  
011f			 
011f				; need to be at $66 for nmi support 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255 
011f				jp nmi 
011f			endif 
011f			 
011f			include "firmware.asm" 
011f			  
011f			; main constants (used here and in firmware)  
011f			  
011f			; TODO have page 0 of storage as bios  
011f			  
011f			Device_A: equ 0h  
011f			Device_B: equ 040h          ; Sound  
011f			  
011f			if BASE_KEV  
011f			Device_C: equ 080h          ; Storage and ext cart devices  
011f			endif  
011f			  
011f			if BASE_SC114  
011f			Device_C: equ  SC103_PIO          ; Storage and ext cart devices  
011f			endif  
011f			  
011f			if BASE_CPM  
011f			; TODO fixup for CPM  
011f			Device_C: equ 080h          ; Storage and ext cart devices  
011f			endif  
011f			  
011f			Device_D: equ 0c0h             ; Keyboard and LCD  
011f			  
011f			; Odd specific debug points for testing hardware dev  
011f			  
011f			;if DEBUG_LEVEL0  
011f			;	include "debug_level0.asm"  
011f			;endif  
011f			;if DEBUG_LEVEL1  
011f			;	include "debug_level1.asm"  
011f			;endif  
011f			;if DEBUG_LEVEL2  
011f			;	include "debug_level2.asm"  
011f			;endif  
011f			  
011f			  
011f			CALLMONITOR: macro  
011f			;	call break_point_state  
011f			; now use the break point debug vector  
011f				call debug_vector  
011f				endm  
011f			  
011f			MALLOC_1: equ 1        ; from dk88   
011f			MALLOC_2: equ 0           ; broke  
011f			MALLOC_3: equ 0           ; really broke  
011f			MALLOC_4: equ 0              ; mine pretty basic reuse and max of 250 chars  
011f			  
011f			if BASE_KEV   
011f			;stacksize: equ 256  
011f			; each stack entry is three bytes (type + word)  
011f			stacksize: equ 3*150  
011f			  
011f			STACK_RET_SIZE: equ 64  
011f			STACK_LOOP_SIZE: equ 128  
011f			STACK_DATA_SIZE: equ 512  
011f			endif  
011f			if BASE_SC114  
011f			;tos:	equ 0f000h  
011f			stacksize: equ 256  
011f			STACK_RET_SIZE: equ 64  
011f			STACK_LOOP_SIZE: equ 128  
011f			STACK_DATA_SIZE: equ 256  
011f			endif  
011f			  
011f			if BASE_CPM  
011f			;tos:	equ 0f000h  
011f			stacksize: equ 256  
011f			STACK_RET_SIZE: equ 64  
011f			STACK_LOOP_SIZE: equ 128  
011f			STACK_DATA_SIZE: equ 256  
011f			endif  
011f			  
011f			;if STORAGE_SE == 0  
011f			STORE_BLOCK_PHY:   equ 64    ; physical block size on storage   64byte on 256k eeprom  
011f			STORE_DEVICE_MAXBLOCKS:  equ  255*2 ; how many blocks are there on this storage device  
011f			;endif  
011f			  
011f			; Block 0 at offset $3b is a flag to decide to offer auto start up - 0 = prompt 1-auto run no prompt 2 - dont run  
011f			  
011f			STORE_0_AUTORUN: equ $20  
011f			  
011f			; Block 0 at offset $20+ holds the file number to run at system startup after the display  
011f			  
011f			STORE_0_AUTOFILE: equ $21  
011f			STORE_0_BANKRUN: equ $23  
011f			STORE_0_FILERUN: equ $24  
011f			  
011f			; Block 0 offsets for settings  
011f			  
011f			; if set then skip prompt for start up and accept all  
011f			  
011f			STORE_0_QUICKSTART: equ $25  
011f			  
011f			; Blocks where directory table is held  
011f			  
011f			; Reducing the number of entries increases the max file size  
011f			  
011f			;STORE_DIR_START: equ 1  
011f			;STORE_DIR_END: equ 33  
011f			  
011f			; Blocks from where file data is stored  
011f			  
011f			;STORE_DATA_START: equ STORE_DIR_END + 1  
011f			  
011f			; Block indicators (<32 are data files)  
011f			  
011f			;STORE_BLOCK_CFG: equ $8f       ; config block  
011f			;STORE_BLOCK_DIRF: equ $8e       ; directory block free  
011f			;STORE_BLOCK_DIRU: equ $8d       ; directory block free  
011f			;STORE_BLOCK_FREE: equ $85       ; data block free  
011f			;STORE_BLOCK_AUTO: equ $89       ; auto start code  
011f			  
011f			  
011f			  
011f			; Directory entry flags  
011f			  
011f			;STORE_DIR_FREE: equ 0  
011f			;STORE_DIR_FILE:  equ 1  
011f			  
011f			; Structure offsets to directory entries  
011f			;STORE_DE_FLAG: equ 0  
011f			;STORE_DE_MAXEXT: equ 1  
011f			;STORE_DE_FILENAME: equ 2  
011f			  
011f			; Structure offsets to block 0  
011f			  
011f			;STORE_BK0_ISFOR: equ 1  
011f			;STORE_BK0_LABEL: equ 3  
011f			  
011f			; memory allocation   
011f			  
011f			chk_stund: equ tos+2           ; underflow check word  
011f			chk_stovr: equ chk_stund-stacksize -2; overflow check word  
011f			  
011f			; keyscan table needs rows x cols buffer  
011f			;key_rows: equ 5     ; TODO move out to mini and maxi + 1 null  
011f			;key_cols: equ 10    ; TODO move out to mini and maxi + 1 null  
011f			  
011f			keyscan_table_row1: equ chk_stovr -key_cols-1  
011f			keyscan_table_row2: equ keyscan_table_row1-key_cols-1  
011f			keyscan_table_row3: equ keyscan_table_row2-key_cols-1  
011f			keyscan_table_row4: equ keyscan_table_row3-key_cols-1  
011f			keyscan_table_row5: equ keyscan_table_row4-key_cols-1  
011f			keyscan_table: equ keyscan_table_row5-(key_cols*key_rows)-1  
011f			keyscan_scancol: equ keyscan_table-key_cols  
011f			;keyscan_table_len: equ key_rows*key_cols  
011f			;keybufptr: equ keyscan_table - 2  
011f			;keysymbol: equ keybufptr - 1  
011f			key_held: equ keyscan_scancol-1	; currently held  
011f			key_held_prev: equ key_held - 1   ; previously held (to detect bounce and cycle of key if required)  
011f			key_repeat_ct: equ key_held_prev - 4 ; timers (two words)  
011f			key_fa: equ key_repeat_ct -1 ;  
011f			key_fb: equ key_fa -1 ;  
011f			key_fc: equ key_fb -1 ;  
011f			key_fd: equ key_fc -1 ;  
011f			key_face_held: equ key_fd - 1   
011f			; flag for enabling/disabling various hardware diag loading via block 0 on bank 1  
011f			  
011f			hardware_config: equ key_face_held - 10  
011f			  
011f			; hardware config switches  
011f			; TODO add bitmasks on includes for hardware  
011f			; high byte for expansion ids  
011f			;     0000 0000  no card inserted  
011f			;     0000 0001  storage card inserted  
011f			;     0000 0010  spi sd card active  
011f			  
011f			;       
011f			; low byte:  
011f			;     0000 0001   4x4 keypad  
011f			;     0000 0010   full keyboard  
011f			;     0000 0011   spi/ext keyboard  
011f			;     0000 0100   20x4 lcd  
011f			;     0000 1000   40x4 lcd  
011f			;     0000 1100   spi/ext display  
011f			;     0001 0000   ide interface available  
011f			  
011f			hardware_word: equ hardware_config - 2  
011f			  
011f			; debug marker - optional display of debug point on the debug screens  
011f			  
011f			nmi_vector:  equ hardware_word - 3   ; vector to the nmi handler  
011f			debug_vector:  equ nmi_vector - 3   ; vector to the debug handler  
011f			  
011f			debug_umark: equ debug_vector - 6  ; current user mark  
011f			debug_mark: equ debug_umark - 4    ; internal word debug points  
011f			  
011f			; input_str vars  
011f			input_ptr:  equ debug_mark - 2    ; ptr to the current cursor position of string currently being edited  on entry starting   
011f			input_start:  equ input_ptr - 2    ; ptr to the start of string   
011f			input_size: equ input_start -1  ; number of chars  
011f			input_display_size: equ input_size -1  ; TODO number of chars that are displayable. if < input_size then scroll   
011f			input_at_pos: equ input_display_size - 1 ; frame buffer offset for start of input  
011f			input_under_cursor: equ input_at_pos - 1 ; char under the cursor so we can blink it  
011f			input_at_cursor: equ input_under_cursor - 1 ; offset of cursor to current start of string  
011f			input_cur_flash: equ input_at_cursor - 2 ;  timeout for cursor flash  
011f			input_cur_onoff: equ input_cur_flash - 1 ;  cursor blink on or off  
011f			input_len: equ input_cur_onoff - 5 ; length of current input  
011f			input_cursor: equ input_len - 5 ; offset of cursor to current start of string  
011f			  
011f			; cursor blink rate  
011f			CUR_BLINK_RATE: equ $09  
011f			;CUR_BLINK_RATE: equ 15  
011f			  
011f			key_actual_pressed: equ input_cursor - 1   
011f			key_symbol: equ key_actual_pressed - 1   
011f			key_shift: equ key_symbol - 1   
011f			  
011f			; Display allocation  
011f			  
011f			;display_rows: equ 4     ; move out to mini and mega files  
011f			;display_cols: equ 20  
011f			  
011f			display_fb_len: equ display_rows*display_cols  
011f			  
011f			; primary frame buffer     
011f			display_fb0: equ  key_shift-display_fb_len -1 ; -display_fb_len-1          ; cli input     TODO why is that doubling up?  
011f			; working frame buffers  
011f			display_fb1: equ  display_fb0-display_fb_len -1 ; -display_fb_len-1          ; default running program  
011f			display_fb3: equ  display_fb1-display_fb_len - 1  
011f			display_fb2: equ  display_fb3-display_fb_len - 1  
011f			;  
011f			; pointer to active frame buffer  
011f			display_fb_active: equ display_fb2 - 2  
011f			display_lcde1e2: equ display_fb_active - 1         ; 0=e1, 1=e2   For E1/E2 selection when using the lcd 4x40 display  
011f			display_write_tmp: equ display_lcde1e2 - 2  
011f			display_active:  equ display_write_tmp-3   ; current state of activity char (plus room to write string)  
011f			  
011f			;  
011f			  
011f			;; can load into de directory  
011f			cursor_col: equ display_active-1  
011f			cursor_row: equ cursor_col-1  
011f			cursor_ptr: equ cursor_row - 1     ;  actual offset into lcd memory for row and col combo  
011f			cursor_shape: equ cursor_ptr - 2   ; char used for the current cursor   
011f			  
011f			; maths vars  
011f			  
011f			LFSRSeed: equ cursor_shape -20   
011f			randData: equ LFSRSeed - 2  
011f			xrandc: equ randData - 2  
011f			stackstore: equ xrandc - 2  
011f			seed1: equ  stackstore -2   
011f			seed2: equ seed1 - 2  
011f			  
011f			; cf storage vars  
011f			  
011f			iErrorNum:  equ seed2-1         ;Error number  
011f			iErrorReg:  equ iErrorNum -1              ;Error register  
011f			iErrorVer:  equ iErrorReg - 1              ;Verify error flag  
011f			  
011f			store_bank_active: equ iErrorVer - (5 + 8 ) 		; TODO not used.  indicator of which storage banks are available to use 5 on board and 8 in cart  
011f			  
011f			STORE_BLOCK_LOG:  equ   280      ; TODO remove.... Logical block size     
011f			  
011f			store_page: equ store_bank_active-STORE_BLOCK_LOG-1            ; bigger than page size for eeprom so we can join multiple blocks if they are continuation records  
011f			;?????store_ffpage: equ store_page-STORE_BLOCK_LOG            ; page size for eeprom?????  
011f			store_readptr: equ store_page-2       ; tracks the file extent during storage_read of continuation blocks  
011f			store_readbuf: equ store_readptr-2       ; tracks the position for the buffer during storage_read of continuation blocks  
011f			store_longread: equ store_readbuf -1 ;   if zero then only read one block. If not zero then do a read for as long as required  
011f			store_tmp1: equ store_longread - 2      ; temp pointer holders during ops  
011f			store_tmp2: equ store_tmp1 - 2        ; temp pointer holders during ops  
011f			store_tmp3: equ store_tmp2 - 2        ; temp pointer holders during ops  
011f			store_tmpid: equ store_tmp3 - 1		; page temp id  
011f			store_tmpext: equ store_tmpid - 1		; file extent temp  
011f			store_readcont: equ store_tmpid - 1		; If current read results in an overflow buffer to next record flag it up  
011f			store_openaddr: equ store_readcont - 2		; file block address of current opened file for read  
011f			store_openext: equ store_openaddr - 1		; file extent of current opened file for read  
011f			store_openmaxext: equ store_openext - 1		; max extent of current opened file for read  
011f			store_filecache: equ store_openmaxext-2   ;  TODO (using just one for now)  file id + extent count cache * 5  
011f			store_tmppageid: equ store_filecache-2    ; phyical page id temp  
011f			;  
011f			; spi vars  
011f			  
011f			  
011f			spi_clktime: equ store_tmppageid - 1      ; holds the number of ms that happens between spi clock pulses  
011f			spi_cartdev: equ spi_clktime - 1      ; holds bit mask to send to portb (ext spi) devices  
011f			spi_cartdev2: equ spi_cartdev - 1      ; holds bit mask to send to portb's shift reg devices  
011f			spi_portbyte: equ spi_cartdev2 - 1      ; holds bit mask to send to spi bus   
011f			spi_device: equ spi_portbyte - 1    ; bit mask to send to porta (eeproms) devices  
011f			spi_device_id: equ spi_device - 1    ; human readable bank number  
011f			  
011f			;;;;; forth cli params  
011f			  
011f			; TODO use a different frame buffer for forth???  
011f			  
011f			f_cursor_ptr:  equ spi_device_id - 1  ; offset into frame buffer for any . or EMIT output  
011f			cli_buffer: equ f_cursor_ptr - 20     ; temp hold - maybe not needed  
011f			cli_origtoken: equ cli_buffer - 2     ; pointer to the text of token for this word being checked  
011f			cli_token: equ cli_origtoken - 2     ; pointer to the text of token for this word being checked  
011f			cli_execword: equ cli_token - 2      ; pointer to start of code for this word  
011f			cli_nextword: equ cli_execword - 2      ; pointer to start of next word in dict  
011f			cli_ptr: equ cli_nextword - 2           ; pointer to start of word to parse by forth kernel (working)  
011f			cli_origptr: equ cli_ptr - 2           ; pointer to start of word to parse which resets cli_ptr on each word test  
011f			  
011f			cli_mvdot: equ cli_origptr - 1 ;     ; true will move the cursor once something is displayed  
011f			cli_autodisplay: equ cli_mvdot - 1 ;     ; true will auto update the display (slow) otherwise need to use DRAW  
011f			cli_var_array: equ cli_autodisplay - ( 10 * 2 ) ; word or string pointer variables using V@0-V@9  
011f			cli_var_array2: equ cli_var_array - ( 26 * 2 ) ; word or string pointer variables using VAR word  
011f			cli_ret_sp: equ cli_var_array2 - 2    ; ret stack pointer  
011f			cli_loop_sp: equ cli_ret_sp - 2   ; data stack pointer  
011f			cli_data_sp: equ cli_loop_sp - 2   ; data stack pointer  
011f			  
011f			chk_ret_und: equ cli_data_sp-2           ; underflow check word  
011f			cli_ret_stack: equ chk_ret_und - STACK_RET_SIZE      ; TODO could I just use normal stack for this? - use linked list for looping  
011f			chk_ret_ovr: equ cli_ret_stack -2; overflow check word  
011f			cli_loop_stack: equ chk_ret_ovr - STACK_LOOP_SIZE      ; TODO could I just use normal stack for this? - use linked list for looping  
011f			chk_loop_ovr: equ cli_loop_stack -2; overflow check word  
011f			cli_data_stack: equ chk_loop_ovr - STACK_DATA_SIZE		 ;   
011f			chk_data_ovr: equ cli_data_stack -2; overflow check word  
011f			  
011f			os_var_array: equ chk_data_ovr - (32 * 2)      ;   32 word array for use using the SCRATCH word  
011f			  
011f			; os/forth token vars  
011f			  
011f			os_last_cmd: equ os_var_array-255  
011f			os_cli_cmd: equ os_last_cmd-255              ; cli command entry line  
011f			os_current_i: equ os_cli_cmd-2  
011f			os_cur_ptr: equ os_current_i-2  
011f			os_word_scratch: equ os_cur_ptr-30  
011f			os_tok_len: equ os_word_scratch - 2  
011f			os_tok_ptr: equ os_tok_len - 2               ; our current PC ptr  
011f			os_tok_malloc: equ os_tok_ptr - 2  
011f			os_last_new_uword: equ os_tok_malloc - 2    ; hold start of last user word added  
011f			os_input: equ os_last_new_uword-255    ; buffer for EDIT word  
011f			execscratch: equ os_input-255        ; exec cmd eval buffer  
011f			scratch: equ execscratch-255  
011f			  
011f			os_stack_1: equ scratch - 3       ; stack holding area 1  
011f			os_stack_2: equ os_stack_1 - 3       ; stack holding area 2  
011f			os_stack_3: equ os_stack_2 - 3       ; stack holding area 3  
011f			os_stack_4: equ os_stack_3 - 3       ; stack holding area 4  
011f			  
011f			  
011f			; temp locations for new word processing to save on adding more   
011f			  
011f			os_new_malloc: equ os_stack_4-2  
011f			os_new_parse_len: equ os_new_malloc - 2  
011f			os_new_word_len: equ os_new_parse_len - 2  
011f			os_new_work_ptr: equ os_new_word_len - 2  
011f			os_new_src_ptr: equ os_new_work_ptr - 2  
011f			os_new_exec: equ os_new_src_ptr - 2  
011f			os_new_exec_ptr: equ os_new_exec - 2  
011f			  
011f			; resume memory alloocations....  
011f			  
011f			;os_view_disable: equ os_new_exec_ptr - 1  
011f			os_view_af: equ os_new_exec_ptr - 2  
011f			os_view_hl: equ os_view_af -2  
011f			os_view_de: equ os_view_hl - 2  
011f			os_view_bc: equ os_view_de - 2  
011f			  
011f			; stack checksum word  
011f			if DEBUG_STACK_IMB  
011f				curframe: equ  os_view_de - 5  
011f				store_sp: equ curframe - (STACK_IMB_STORE*4)  
011f				chk_word: equ store_sp - 2		 ; this is the word to init and then check against to detect stack corruption. Held far away from all stacks  
011f			else  
011f				chk_word: equ os_view_bc - 2		 ; this is the word to init and then check against to detect stack corruption. Held far away from all stacks  
011f			endif  
011f			  
011f			; with data stack could see memory filled with junk. need some memory management   
011f			; malloc and free entry points added  
011f			  
011f			;free_list:  equ chk_word - 4     ; Block struct for start of free list (MUST be 4 bytes)  
011f			;heap_size: equ  (free_list-08100h)      ; Number of bytes available in heap   TODO make all of user ram  
011f			;;heap_start: equ free_list - heap_size  ; Starting address of heap  
011f			;heap_end: equ free_list-1  ; Starting address of heap  
011f			;heap_start: equ free_list - heap_size  ; Starting address of heap  
011f			  
011f			;heap_start: equ free_list - heap_size  ; Starting address of heap  
011f			heap_end: equ chk_word-1  ; Starting address of heap  
011f			  
011f			  
011f			;if BASE_KEV   
011f			;heap_start: equ 0800eh  ; Starting address of heap  
011f			;free_list:  equ 0800ah      ; Block struct for start of free list (MUST be 4 bytes)  
011f			;heap_size: equ  heap_end-heap_start      ; Number of bytes available in heap   TODO make all of user ram  
011f			;endif  
011f			  
011f			;if BASE_SC114  
011f			;heap_start: equ baseram+15  ; Starting address of heap  
011f			;free_list:  equ baseram+10      ; Block struct for start of free list (MUST be 4 bytes)  
011f			;endif  
011f			  
011f			  
011f			;;;;  
011f			  
011f			  
011f			; change below to point to last memory alloc above  
011f			topusermem:  equ   heap_start  
011f			  
011f			;if BASE_KEV   
011f			;baseusermem: equ 08000h  
011f			;endif  
011f			  
011f			;if BASE_SC114  
011f			;;aseusermem:     equ    12  
011f			;baseusermem:     equ    prompt  
011f			;;baseusermem:     equ    endofcode  
011f			;endif  
011f			  
011f			  
011f			; **********************************************************************  
011f			; **  Constants  
011f			; **********************************************************************  
011f			  
011f			; Constants used by this code module  
011f			kDataReg:   EQU Device_D           ;PIO port A data register  
011f			kContReg:   EQU Device_D+2           ;PIO port A control register  
011f			  
011f			  
011f			portbdata:  equ Device_D+1    ; port b data  
011f			portbctl:   equ Device_D+3    ; port b control  
011f			  
011f			  
011f			;KEY_SHIFT:   equ 5  
011f			;KEY_SYMBOLSHIFT:  equ 6  
011f			  
011f			KEY_SHIFTLOCK: equ 4  
011f			  
011f			  
011f			KEY_UP: equ 5  
011f			KEY_NEXTWORD: equ 6  
011f			KEY_PREVWORD: equ 7  
011f			KEY_BS: equ 8  
011f			KEY_TAB:  equ 9  
011f			KEY_DOWN: equ 10  
011f			KEY_LEFT: equ 11  
011f			KEY_RIGHT: equ 12  
011f			KEY_CR:   equ 13  
011f			KEY_HOME: equ 14  
011f			KEY_END: equ 15  
011f			  
011f			KEY_F1: equ 16  
011f			KEY_F2: equ 17  
011f			KEY_F3: equ 18  
011f			KEY_F4: equ 19  
011f			  
011f			KEY_F5: equ 20  
011f			KEY_F6: equ 21  
011f			KEY_F7: equ 22  
011f			KEY_F8: equ 23  
011f			  
011f			KEY_F9: equ 24  
011f			KEY_F10: equ 25  
011f			KEY_F11: equ 26  
011f			KEY_F12: equ 27  
011f			  
011f			;if DEBUG_KEY  
011f			;	KEY_MATRIX_NO_PRESS: equ '.'  
011f			;	KEY_SHIFT:   equ '.'  
011f			;	KEY_SYMBOLSHIFT:  equ '.'  
011f			;else  
011f				KEY_SHIFT:   equ '~'  
011f				KEY_SYMBOLSHIFT:  equ '~'  
011f				KEY_MATRIX_NO_PRESS: equ '~'  
011f			;endi  
011f			  
011f			  
011f			  
011f			  
011f			; Macro to make adding debug marks easier  
011f			  
011f			DMARK: macro str  
011f				push af  
011f				ld a, (.dmark)  
011f				ld (debug_mark),a  
011f				ld a, (.dmark+1)  
011f				ld (debug_mark+1),a  
011f				ld a, (.dmark+2)  
011f				ld (debug_mark+2),a  
011f				jr .pastdmark  
011f			.dmark: db str  
011f			.pastdmark: pop af  
011f			  
011f			endm  
011f			  
011f			  
011f			; macro to detect for stack imbalances  
011f			  
011f			include "stackimbal.asm"  
011f			; Macro and code to detect stock imbalances 
011f			 
011f			SPPUSH: equ 0 
011f			 
011f			; Add a stack frame which can be checked before return 
011f			 
011f			STACKFRAME: macro onoff frame1 frame2 
011f			 
011f				if DEBUG_STACK_IMB 
011f					if onoff 
011f						; save current SP 
011f						exx 
011f			 
011f						ld de, frame1 
011f						ld a, d 
011f						ld hl, curframe 
011f						call hexout 
011f						ld a, e 
011f						ld hl, curframe+2 
011f						call hexout 
011f			  
011f						ld hl, frame1 
011f						push hl 
011f						ld hl, frame2 
011f						push hl 
011f						exx 
011f					endif 
011f					 
011f				endif 
011f			endm 
011f			 
011f			STACKFRAMECHK: macro onoff frame1 frame2 
011f			 
011f					 
011f				if DEBUG_STACK_IMB 
011f					if onoff 
011f						exx 
011f						; check stack frame SP 
011f			 
011f						ld hl, frame2 
011f						pop de   ; frame2 
011f			 
011f						call cmp16 
011f						jr nz, .spnosame 
011f						 
011f			 
011f						ld hl, frame1 
011f						pop de   ; frame1 
011f			 
011f						call cmp16 
011f						jr z, .spfrsame 
011f			 
011f						.spnosame: call showsperror 
011f			 
011f						.spfrsame: nop 
011f			 
011f						exx 
011f					endif 
011f					 
011f				endif 
011f			 
011f			 
011f			endm 
011f			 
011f			 
011f			; for a sub routine, wrap SP collection and comparisons 
011f			 
011f			; Usage: 
011f			; 
011f			; SAVESP ON/OFF 0-STACK_IMB_STORE/4 
011f			; CHECKSP ON/OFF 0-STACK_IMB_STORE/4 
011f			 
011f			SAVESP: macro onoff storeword 
011f			 
011f				if DEBUG_STACK_IMB 
011f					if onoff 
011f						; save current SP 
011f			 
011f						ld (store_sp+(storeword*4)), sp 
011f			 
011f					endif 
011f					 
011f				endif 
011f			 
011f			endm 
011f			 
011f			CHECKSP: macro onoff storeword 
011f			 
011f				if DEBUG_STACK_IMB 
011f					if onoff 
011f			 
011f						; save SP after last save 
011f				 
011f						ld (store_sp+(storeword*4)+2), sp 
011f			 
011f						push hl 
011f						ld hl, store_sp+(storeword*4) 
011f						call check_stack_sp  
011f						pop hl 
011f			 
011f			 
011f					endif 
011f					 
011f				endif 
011f			 
011f			endm 
011f			 
011f			if DEBUG_STACK_IMB 
011f			 
011f			check_stack_sp: 
011f					push de 
011f			 
011f					ld e, (hl) 
011f					inc hl 
011f					ld d, (hl) 
011f					inc hl 
011f			 
011f					push de 
011f			 
011f			 
011f					ld e, (hl) 
011f					inc hl 
011f					ld d, (hl) 
011f					inc hl 
011f			 
011f					pop hl 
011f			 
011f			 
011f					; check to see if the same 
011f			 
011f					call cmp16 
011f					jr z, .spsame 
011f			 
011f					; not same 
011f			 
011f					call showsperror 
011f			.spsame: 
011f			 
011f					pop de 
011f			 
011f					ret 
011f			 
011f			.sperr:  db "Stack imbalance",0 
011f			 
011f			 
011f			showsperror: 
011f			 
011f			 
011f				push hl 
011f				push af 
011f				push de 
011f				call clear_display 
011f				ld de, .sperr 
011f				ld a,0 
011f			;	ld de,os_word_scratch 
011f				call str_at_display 
011f				ld a, display_row_1+17 
011f				ld de, debug_mark 
011f				call str_at_display 
011f				ld a, 0 
011f				ld (curframe+4),a 
011f				ld hl, curframe 
011f				ld de, os_word_scratch 
011f				ld a, display_row_4 
011f				call str_at_display 
011f				call update_display 
011f				;call break_point_state 
011f				call cin_wait 
011f			 
011f			;	ld a, ' ' 
011f			;	ld (os_view_disable), a 
011f				call bp_on 
011f				pop de	 
011f				pop af 
011f				pop hl 
011f				CALLMONITOR 
011f				ret 
011f			 
011f			endif 
011f			 
011f			 
011f			 
011f			; eof 
# End of file stackimbal.asm
011f			  
011f			;TODO macro to calc col and row offset into screen  
011f			  
011f			  
011f			  
011f			hardware_init:  
011f			  
011f				  
011f			  
011f					;ld a, 0  
011f					;ld (hardware_diag), a  
011f			  
011f					; clear all the buffers  
011f			  
011f 21 0a ed				ld hl, display_fb1  
0122 22 c6 eb				ld (display_fb_active), hl  
0125			  
0125 cd c8 0b				call clear_display  
0128			  
0128 21 c8 eb				ld hl, display_fb2  
012b 22 c6 eb				ld (display_fb_active), hl  
012e			  
012e cd c8 0b				call clear_display  
0131			  
0131					; init primary frame buffer area  
0131 21 ab ed				ld hl, display_fb0  
0134 22 c6 eb				ld (display_fb_active), hl  
0137			  
0137 cd c8 0b				call clear_display  
013a			  
013a			  
013a cd 44 60				call lcd_init		; lcd hardware first as some screen functions called during key_init e.g. cursor shapes  
013d			  
013d cd 32 61			call key_init  
0140 cd ad 01			call storage_init  
0143			  
0143				; setup malloc functions  
0143			  
0143				if MALLOC_1  
0143 cd ac 11				call  heap_init  
0146				endif  
0146				if MALLOC_4  
0146					call  heap_init  
0146				endif  
0146			  
0146				; init sound hardware if present  
0146			  
0146				if SOUND_ENABLE  
0146					call sound_init  
0146				endif  
0146			  
0146				; lcd test sequence  
0146					  
0146 cd eb 0b			call update_display  
0149 cd 00 0b			call delay1s  
014c 3e 2b			ld a,'+'  
014e cd cd 0b			call fill_display  
0151 cd eb 0b			call update_display  
0154 cd 00 0b			call delay1s  
0157 3e 2a			ld a,'*'  
0159 cd cd 0b			call fill_display  
015c cd eb 0b			call update_display  
015f cd 00 0b			call delay1s  
0162 3e 2d			ld a,'-'  
0164 cd cd 0b			call fill_display  
0167 cd eb 0b			call update_display  
016a cd 00 0b			call delay1s  
016d			  
016d			; boot splash screen  
016d			if display_cols == 20	  
016d			        ld a, display_row_1    
016d			else  
016d 3e 0a		        ld a, display_row_1 +10   
016f			endif  
016f 11 da 16			ld de, prom_bootmsg  
0172 cd db 0b			call str_at_display  
0175 cd eb 0b			call update_display  
0178			  
0178			  
0178 cd 00 0b			call delay1s  
017b cd 00 0b			call delay1s  
017e			if display_cols == 20	  
017e			            LD   A, display_row_3+2  
017e			else  
017e 3e 5c		            LD   A, display_row_3+12  
0180			endif  
0180 11 ef 16			ld de, prom_bootmsg1  
0183 cd db 0b			call str_at_display  
0186			; display debug level  
0186 3e 78		            LD   A, display_row_4  
0188 11 1b 01			ld de, debuglevel  
018b cd db 0b			call str_at_display  
018e			  
018e cd eb 0b			call update_display  
0191 cd 00 0b			call delay1s  
0194 cd 00 0b			call delay1s  
0197			  
0197			;	ld a, display_row_4+3  
0197			;	ld de, bootmsg2  
0197			;	call str_at_display  
0197			;	call update_display  
0197			;	call delay1s  
0197			;	call delay1s  
0197			  
0197			; debug mark setup  
0197			  
0197 3e 5f		ld a, '_'  
0199 32 65 ee		ld (debug_mark),a  
019c 32 66 ee		ld (debug_mark+1),a  
019f 32 67 ee		ld (debug_mark+2),a  
01a2 3e 00		ld a,0  
01a4 32 68 ee		ld (debug_mark+3),a  
01a7 32 69 ee		ld (debug_umark),a  
01aa			  
01aa c9					ret  
01ab			  
01ab			  
01ab			;bootmsg2:	db "Firmware v0.1",0  
01ab			  
01ab			; a 4x20 lcd  
01ab			; cout for display, low level positioning and writing functions (TODO) for hardware abstraction  
01ab			  
01ab			;if display_cols == 20  
01ab			;	include "firmware_lcd_4x20.asm"  
01ab			;endif  
01ab			  
01ab			;if display_cols == 40  
01ab			;	include "firmware_lcd_4x40.asm"  
01ab			;endif  
01ab			  
01ab			;  
01ab			; TODO use the low spare two pins on port a of display pio to bit bang a serial out video display to an esp  
01ab			; TODO abstract the bit bang video out interface for dual display  
01ab			; TODO wire video out to tx pin on rc2014 bus  
01ab			  
01ab			; must supply cin, and cin_wait for low level hardware abstraction   
01ab			; moved text_input entry points to here and leave the firmware hardware modules as abstraction layer  
01ab			; test scancode  
01ab			  
01ab			;;;;;  
01ab			;;;  
01ab			; Moved out to mini and maxi versions  
01ab			;  
01ab			; include "firmware_key_4x4.asm"  
01ab			; using existing 4 wire x 4 resistor array for input  
01ab			;include "firmware_key_4x10.asm"  
01ab			; need to mod the board for 5 rows due to resistor array  
01ab			;include "firmware_key_5x10.asm"  
01ab			  
01ab			; storage hardware interface  
01ab			  
01ab			; use microchip serial eeprom for storage  
01ab			  
01ab			  
01ab			if STORAGE_SE  
01ab				include "firmware_spi.asm"  
01ab				include "firmware_seeprom.asm"  
01ab			else  
01ab			   ; create some stubs for the labels  
01ab c9			se_readbyte: ret  
01ac c9			se_writebyte: ret  
01ad c9			storage_init: ret  
01ae			  
01ae			endif  
01ae			  
01ae			; use cf card for storage - throwing timeout errors. Hardware or software?????  
01ae			;include "firmware_cf.asm"  
01ae			  
01ae			; load up high level storage hardward abstractions  
01ae			include "firmware_storage.asm"  
01ae			 
01ae			; persisent storage hardware abstraction layer  
01ae			 
01ae			 
01ae			 
01ae			; Block 0 on storage is a config state 
01ae			 
01ae			 
01ae			 
01ae			; TODO add read phy block and write phy block functions 
01ae			; TODO add presence check (i.e. read write byte 0 of block 0 for eeprom) 
01ae			 
01ae			; Abstraction layer  
01ae			 
01ae			; Logocial block size is same size as physical size - using tape concept 
01ae			 
01ae			;STORE_BLOCK_PHY2LOG: equ (STORE_BLOCK_LOG/STORE_BLOCK_PHY)       ; How many physical blocks make up a logical block 
01ae			;STORE_BLOCK_MAX: equ (STORE_BLOCK_PHY*STORE_DEVICE_MAXBLOCKS)/255    ; Max number of logical blocks on the device 
01ae			 
01ae			 
01ae			 
01ae			; Filesystem layout (Logical layout) 
01ae			; 
01ae			; Block 0 - Bank config  
01ae			; 
01ae			;      Byte - 0 file id counter 
01ae			;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
01ae			;      Byte - 3-20 zero terminated bank label 
01ae			; 
01ae			; Block 1 > File storage 
01ae			; 
01ae			;      Byte 0 file id    - block 0 file details 
01ae			;      Byte 1 block id - block 0 is file  
01ae			;            Byte 2-15 - File name 
01ae			; 
01ae			;       - to end of block data 
01ae			; 
01ae			 
01ae			; Get ID for the file named in pointer held HL 
01ae			; Returns ID in HL = 255 if no file found 
01ae			 
01ae			storage_getid: 
01ae			 
01ae 22 6d ea			ld (store_tmp1), hl 
01b1			 
01b1				if DEBUG_STORESE 
01b1					DMARK "SGI" 
01b1 f5				push af  
01b2 3a c6 01			ld a, (.dmark)  
01b5 32 65 ee			ld (debug_mark),a  
01b8 3a c7 01			ld a, (.dmark+1)  
01bb 32 66 ee			ld (debug_mark+1),a  
01be 3a c8 01			ld a, (.dmark+2)  
01c1 32 67 ee			ld (debug_mark+2),a  
01c4 18 03			jr .pastdmark  
01c6 ..			.dmark: db "SGI"  
01c9 f1			.pastdmark: pop af  
01ca			endm  
# End of macro DMARK
01ca					CALLMONITOR 
01ca cd 6f ee			call debug_vector  
01cd				endm  
# End of macro CALLMONITOR
01cd				endif 
01cd				; get block 0 and set counter for number of files to scan 
01cd			 
01cd cd 38 03			call storage_get_block_0 
01d0			 
01d0 3a 74 ea			ld a, (store_page) 
01d3 47				ld b, a 
01d4			 
01d4				; get extent 0 of each file id 
01d4			 
01d4				if DEBUG_STORESE 
01d4					DMARK "SGc" 
01d4 f5				push af  
01d5 3a e9 01			ld a, (.dmark)  
01d8 32 65 ee			ld (debug_mark),a  
01db 3a ea 01			ld a, (.dmark+1)  
01de 32 66 ee			ld (debug_mark+1),a  
01e1 3a eb 01			ld a, (.dmark+2)  
01e4 32 67 ee			ld (debug_mark+2),a  
01e7 18 03			jr .pastdmark  
01e9 ..			.dmark: db "SGc"  
01ec f1			.pastdmark: pop af  
01ed			endm  
# End of macro DMARK
01ed					CALLMONITOR 
01ed cd 6f ee			call debug_vector  
01f0				endm  
# End of macro CALLMONITOR
01f0				endif 
01f0 60			.getloop:	ld h, b 
01f1 2e 00				ld l, 0 
01f3 c5					push bc 
01f4			 
01f4 11 74 ea				ld de, store_page 
01f7				if DEBUG_STORESE 
01f7					DMARK "SGr" 
01f7 f5				push af  
01f8 3a 0c 02			ld a, (.dmark)  
01fb 32 65 ee			ld (debug_mark),a  
01fe 3a 0d 02			ld a, (.dmark+1)  
0201 32 66 ee			ld (debug_mark+1),a  
0204 3a 0e 02			ld a, (.dmark+2)  
0207 32 67 ee			ld (debug_mark+2),a  
020a 18 03			jr .pastdmark  
020c ..			.dmark: db "SGr"  
020f f1			.pastdmark: pop af  
0210			endm  
# End of macro DMARK
0210					CALLMONITOR 
0210 cd 6f ee			call debug_vector  
0213				endm  
# End of macro CALLMONITOR
0213				endif 
0213 cd e0 07				call storage_read 
0216 cd 1e 0e				call ishlzero 
0219 28 2d				jr z, .gap 
021b					 
021b					; have a file name read. Is it one we want. 
021b			 
021b 2a 6d ea				ld hl, (store_tmp1) 
021e 11 77 ea				ld de, store_page+3   ; file name 
0221			 
0221				if DEBUG_STORESE 
0221					DMARK "SGc" 
0221 f5				push af  
0222 3a 36 02			ld a, (.dmark)  
0225 32 65 ee			ld (debug_mark),a  
0228 3a 37 02			ld a, (.dmark+1)  
022b 32 66 ee			ld (debug_mark+1),a  
022e 3a 38 02			ld a, (.dmark+2)  
0231 32 67 ee			ld (debug_mark+2),a  
0234 18 03			jr .pastdmark  
0236 ..			.dmark: db "SGc"  
0239 f1			.pastdmark: pop af  
023a			endm  
# End of macro DMARK
023a					CALLMONITOR 
023a cd 6f ee			call debug_vector  
023d				endm  
# End of macro CALLMONITOR
023d				endif 
023d cd 93 11				call strcmp 
0240 20 06				jr nz, .gap   ; not this one 
0242			 
0242 c1				        pop bc 
0243			 
0243 26 00				ld h, 0 
0245 68					ld l, b 
0246 18 22				jr .getdone 
0248						 
0248			 
0248			 
0248			 
0248			.gap: 
0248				if DEBUG_STORESE 
0248					DMARK "SGg" 
0248 f5				push af  
0249 3a 5d 02			ld a, (.dmark)  
024c 32 65 ee			ld (debug_mark),a  
024f 3a 5e 02			ld a, (.dmark+1)  
0252 32 66 ee			ld (debug_mark+1),a  
0255 3a 5f 02			ld a, (.dmark+2)  
0258 32 67 ee			ld (debug_mark+2),a  
025b 18 03			jr .pastdmark  
025d ..			.dmark: db "SGg"  
0260 f1			.pastdmark: pop af  
0261			endm  
# End of macro DMARK
0261					CALLMONITOR 
0261 cd 6f ee			call debug_vector  
0264				endm  
# End of macro CALLMONITOR
0264				endif 
0264			 
0264 c1					pop bc 
0265 10 89				djnz .getloop 
0267 21 ff 00				ld hl, 255 
026a			.getdone: 
026a			 
026a				if DEBUG_STORESE 
026a					DMARK "SGe" 
026a f5				push af  
026b 3a 7f 02			ld a, (.dmark)  
026e 32 65 ee			ld (debug_mark),a  
0271 3a 80 02			ld a, (.dmark+1)  
0274 32 66 ee			ld (debug_mark+1),a  
0277 3a 81 02			ld a, (.dmark+2)  
027a 32 67 ee			ld (debug_mark+2),a  
027d 18 03			jr .pastdmark  
027f ..			.dmark: db "SGe"  
0282 f1			.pastdmark: pop af  
0283			endm  
# End of macro DMARK
0283					CALLMONITOR 
0283 cd 6f ee			call debug_vector  
0286				endm  
# End of macro CALLMONITOR
0286				endif 
0286			 
0286 c9				ret 
0287			 
0287			 
0287			 
0287			 
0287			 
0287			 
0287			 
0287			 
0287			; Read Block 
0287			; ---------- 
0287			; 
0287			; With current bank 
0287			;  
0287			; Get block number to read 
0287			; Load physical blocks starting at start block into buffer 
0287			 
0287			; de points to buffer to use 
0287			; hl holds logical block number  
0287			 
0287			storage_read_block: 
0287			 
0287				; TODO bank selection 
0287			 
0287				; for each of the physical blocks read it into the buffer 
0287 06 40			ld b, STORE_BLOCK_PHY 
0289			 
0289				if DEBUG_STORESE 
0289 d5					push de 
028a				endif 
028a				 
028a			.rl1:    
028a			 
028a				; read physical block at hl into de 
028a			        ; increment hl and de to next read position on exit 
028a			 
028a e5				push hl 
028b d5				push de	 
028c c5				push bc 
028d			;	if DEBUG_STORESE 
028d			;		push af 
028d			;		ld a, 'R' 
028d			;		ld (debug_mark),a 
028d			;		pop af 
028d			;		CALLMONITOR 
028d			;	endif 
028d cd ab 01			call se_readbyte 
0290			;	if DEBUG_STORESE 
0290			;		ld a,(spi_portbyte) 
0290			;		ld l, a 
0290			;		push af 
0290			;		ld a, '1' 
0290			;		ld (debug_mark),a 
0290			;		pop af 
0290			;		CALLMONITOR 
0290			;	endif 
0290 c1				pop bc 
0291 d1				pop de 
0292 e1				pop hl 
0293 12				ld (de),a 
0294 23				inc hl 
0295 13				inc de 
0296			 
0296			;	if DEBUG_STORESE 
0296			;		push af 
0296			;		ld a, 'r' 
0296			;		ld (debug_mark),a 
0296			;		pop af 
0296			;		CALLMONITOR 
0296			;	endif 
0296			 
0296 10 f2			djnz .rl1 
0298			 
0298				if DEBUG_STORESE 
0298					DMARK "SRB" 
0298 f5				push af  
0299 3a ad 02			ld a, (.dmark)  
029c 32 65 ee			ld (debug_mark),a  
029f 3a ae 02			ld a, (.dmark+1)  
02a2 32 66 ee			ld (debug_mark+1),a  
02a5 3a af 02			ld a, (.dmark+2)  
02a8 32 67 ee			ld (debug_mark+2),a  
02ab 18 03			jr .pastdmark  
02ad ..			.dmark: db "SRB"  
02b0 f1			.pastdmark: pop af  
02b1			endm  
# End of macro DMARK
02b1 d1					pop de 
02b2			; 
02b2			;		push af 
02b2			;		ld a, 'R' 
02b2			;		ld (debug_mark),a 
02b2			;		pop af 
02b2					CALLMONITOR 
02b2 cd 6f ee			call debug_vector  
02b5				endm  
# End of macro CALLMONITOR
02b5				endif 
02b5 c9				ret	 
02b6				 
02b6			 
02b6			; File Size 
02b6			; --------- 
02b6			; 
02b6			;   hl file id 
02b6			; 
02b6			;  returns in hl the number of blocks 
02b6			 
02b6			storage_file_size: 
02b6 5d				ld e, l 
02b7 16 00			ld d, 0 
02b9 21 40 00			ld hl, STORE_BLOCK_PHY 
02bc					if DEBUG_FORTH_WORDS 
02bc						DMARK "SIZ" 
02bc f5				push af  
02bd 3a d1 02			ld a, (.dmark)  
02c0 32 65 ee			ld (debug_mark),a  
02c3 3a d2 02			ld a, (.dmark+1)  
02c6 32 66 ee			ld (debug_mark+1),a  
02c9 3a d3 02			ld a, (.dmark+2)  
02cc 32 67 ee			ld (debug_mark+2),a  
02cf 18 03			jr .pastdmark  
02d1 ..			.dmark: db "SIZ"  
02d4 f1			.pastdmark: pop af  
02d5			endm  
# End of macro DMARK
02d5						CALLMONITOR 
02d5 cd 6f ee			call debug_vector  
02d8				endm  
# End of macro CALLMONITOR
02d8					endif 
02d8 cd ba 05			call storage_findnextid 
02db			 
02db cd 1e 0e			call ishlzero 
02de			;	ld a, l 
02de			;	add h 
02de			;	cp 0 
02de c8				ret z			; block not found so EOF 
02df			 
02df 11 74 ea			ld de, store_page 
02e2 cd 87 02			call storage_read_block 
02e5			 
02e5 3a 76 ea			ld a, (store_page+2)	 ; get extent count 
02e8 6f				ld l, a 
02e9 26 00			ld h, 0 
02eb c9			 	ret 
02ec			 
02ec			 
02ec			; Write Block 
02ec			; ----------- 
02ec			; 
02ec			; With current bank 
02ec			;  
02ec			; Get block number to write 
02ec			; Write physical blocks starting at start block from buffer 
02ec			  
02ec			storage_write_block: 
02ec				; TODO bank selection 
02ec			 
02ec				; for each of the physical blocks read it into the buffer 
02ec 06 40			ld b, STORE_BLOCK_PHY 
02ee			 
02ee				if DEBUG_STORESE 
02ee					DMARK "SWB" 
02ee f5				push af  
02ef 3a 03 03			ld a, (.dmark)  
02f2 32 65 ee			ld (debug_mark),a  
02f5 3a 04 03			ld a, (.dmark+1)  
02f8 32 66 ee			ld (debug_mark+1),a  
02fb 3a 05 03			ld a, (.dmark+2)  
02fe 32 67 ee			ld (debug_mark+2),a  
0301 18 03			jr .pastdmark  
0303 ..			.dmark: db "SWB"  
0306 f1			.pastdmark: pop af  
0307			endm  
# End of macro DMARK
0307			 
0307					;push af 
0307					;ld a, 'W' 
0307					;ld (debug_mark),a 
0307					;pop af 
0307					CALLMONITOR 
0307 cd 6f ee			call debug_vector  
030a				endm  
# End of macro CALLMONITOR
030a				endif 
030a			 
030a			; might not be working 
030a			;	call se_writepage 
030a			 
030a			;	ret 
030a			; 
030a			 
030a			 
030a			 
030a			.wl1:    
030a			 
030a				; read physical block at hl into de 
030a			        ; increment hl and de to next read position on exit 
030a			 
030a e5				push hl 
030b d5				push de	 
030c c5				push bc 
030d 1a				ld a,(de) 
030e				;if DEBUG_STORESE 
030e			;		push af 
030e			;		ld a, 'W' 
030e			;		ld (debug_mark),a 
030e			;		pop af 
030e			;		CALLMONITOR 
030e			;	endif 
030e cd ac 01			call se_writebyte 
0311			;	call delay250ms 
0311 00				nop 
0312 00				nop 
0313 00				nop 
0314			;	if DEBUG_STORESE 
0314			;		push af 
0314			;		ld a, 'w' 
0314			;		ld (debug_mark),a 
0314			;		pop af 
0314			;		CALLMONITOR 
0314			;	endif 
0314 c1				pop bc 
0315 d1				pop de 
0316 e1				pop hl 
0317 23				inc hl 
0318 13				inc de 
0319			 
0319			 
0319 10 ef			djnz .wl1 
031b			 
031b				if DEBUG_STORESE 
031b					DMARK "SW2" 
031b f5				push af  
031c 3a 30 03			ld a, (.dmark)  
031f 32 65 ee			ld (debug_mark),a  
0322 3a 31 03			ld a, (.dmark+1)  
0325 32 66 ee			ld (debug_mark+1),a  
0328 3a 32 03			ld a, (.dmark+2)  
032b 32 67 ee			ld (debug_mark+2),a  
032e 18 03			jr .pastdmark  
0330 ..			.dmark: db "SW2"  
0333 f1			.pastdmark: pop af  
0334			endm  
# End of macro DMARK
0334			 
0334					;push af 
0334					;ld a, 'W' 
0334					;ld (debug_mark),a 
0334					;pop af 
0334					CALLMONITOR 
0334 cd 6f ee			call debug_vector  
0337				endm  
# End of macro CALLMONITOR
0337				endif 
0337 c9				ret	 
0338			 
0338			; Init bank 
0338			; --------- 
0338			; 
0338			; With current bank 
0338			; 
0338			; Setup block 0 config 
0338			;     Set 0 file id counter 
0338			;     Set formatted byte pattern 
0338			;     Zero out bank label 
0338			;      
0338			; For every logical block write 0-1 byte as null 
0338			 
0338			storage_get_block_0: 
0338			 
0338				; TODO check presence 
0338			 
0338				; get block 0 config 
0338			 
0338 21 00 00			ld hl, 0 
033b 11 74 ea			ld de, store_page 
033e cd 87 02			call storage_read_block 
0341			 
0341				if DEBUG_STORESE 
0341					DMARK "SB0" 
0341 f5				push af  
0342 3a 56 03			ld a, (.dmark)  
0345 32 65 ee			ld (debug_mark),a  
0348 3a 57 03			ld a, (.dmark+1)  
034b 32 66 ee			ld (debug_mark+1),a  
034e 3a 58 03			ld a, (.dmark+2)  
0351 32 67 ee			ld (debug_mark+2),a  
0354 18 03			jr .pastdmark  
0356 ..			.dmark: db "SB0"  
0359 f1			.pastdmark: pop af  
035a			endm  
# End of macro DMARK
035a 11 74 ea				ld de, store_page 
035d			;		push af 
035d			;		ld a, 'i' 
035d			;		ld (debug_mark),a 
035d			;		pop af 
035d					CALLMONITOR 
035d cd 6f ee			call debug_vector  
0360				endm  
# End of macro CALLMONITOR
0360				endif 
0360			 
0360				; is this area formatted? 
0360			 
0360			;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
0360 2a 75 ea			ld hl, (store_page+1) 
0363 3e 80			ld a,0x80 
0365 bd				cp l 
0366 20 22			jr nz, .ininotformatted 
0368				; do a double check 
0368 3e 27			ld a, 0x27 
036a bc				cp h 
036b 20 1d			jr nz, .ininotformatted 
036d			 
036d				; formatted then 
036d			 
036d				if DEBUG_STORESE 
036d					DMARK "SB1" 
036d f5				push af  
036e 3a 82 03			ld a, (.dmark)  
0371 32 65 ee			ld (debug_mark),a  
0374 3a 83 03			ld a, (.dmark+1)  
0377 32 66 ee			ld (debug_mark+1),a  
037a 3a 84 03			ld a, (.dmark+2)  
037d 32 67 ee			ld (debug_mark+2),a  
0380 18 03			jr .pastdmark  
0382 ..			.dmark: db "SB1"  
0385 f1			.pastdmark: pop af  
0386			endm  
# End of macro DMARK
0386					;push af 
0386					;ld a, 'I' 
0386					;ld (debug_mark),a 
0386					;pop af 
0386					CALLMONITOR 
0386 cd 6f ee			call debug_vector  
0389				endm  
# End of macro CALLMONITOR
0389				endif 
0389 c9				ret 
038a			 
038a			.ininotformatted: 
038a				; bank not formatted so poke various bits to make sure 
038a			 
038a				if DEBUG_STORESE 
038a					DMARK "SB2" 
038a f5				push af  
038b 3a 9f 03			ld a, (.dmark)  
038e 32 65 ee			ld (debug_mark),a  
0391 3a a0 03			ld a, (.dmark+1)  
0394 32 66 ee			ld (debug_mark+1),a  
0397 3a a1 03			ld a, (.dmark+2)  
039a 32 67 ee			ld (debug_mark+2),a  
039d 18 03			jr .pastdmark  
039f ..			.dmark: db "SB2"  
03a2 f1			.pastdmark: pop af  
03a3			endm  
# End of macro DMARK
03a3					;push af 
03a3					;ld a, 'f' 
03a3					;ld (debug_mark),a 
03a3					;pop af 
03a3					CALLMONITOR 
03a3 cd 6f ee			call debug_vector  
03a6				endm  
# End of macro CALLMONITOR
03a6				endif 
03a6			 
03a6 cd c3 0a			call storage_clear_page 
03a9			 
03a9 21 74 ea			ld hl, store_page 
03ac 3e 00			ld a, 0 
03ae				 
03ae 77				ld (hl),a   ; reset file counter 
03af			 
03af 21 80 27			ld hl, 0x2780     ;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
03b2 22 75 ea		 	ld (store_page+1), hl	 
03b5			 
03b5				; set default label 
03b5			 
03b5 21 51 04			ld hl, .defaultbanklabl 
03b8 11 77 ea		 	ld de, store_page+3 
03bb 01 0f 00			ld bc, 15 
03be ed b0			ldir 
03c0			 
03c0				; Append the current bank id 
03c0 21 80 ea			ld hl, store_page+3+9 
03c3 3a 59 ea			ld a, (spi_device_id) 
03c6 77				ld (hl), a 
03c7			 
03c7				; save default page 0 
03c7			 
03c7 21 00 00			ld hl, 0 
03ca 11 74 ea			ld de, store_page 
03cd				if DEBUG_STORESE 
03cd					DMARK "SB3" 
03cd f5				push af  
03ce 3a e2 03			ld a, (.dmark)  
03d1 32 65 ee			ld (debug_mark),a  
03d4 3a e3 03			ld a, (.dmark+1)  
03d7 32 66 ee			ld (debug_mark+1),a  
03da 3a e4 03			ld a, (.dmark+2)  
03dd 32 67 ee			ld (debug_mark+2),a  
03e0 18 03			jr .pastdmark  
03e2 ..			.dmark: db "SB3"  
03e5 f1			.pastdmark: pop af  
03e6			endm  
# End of macro DMARK
03e6			;		push af 
03e6			;		ld a, 'F' 
03e6			;		ld (debug_mark),a 
03e6			;		pop af 
03e6					CALLMONITOR 
03e6 cd 6f ee			call debug_vector  
03e9				endm  
# End of macro CALLMONITOR
03e9				endif 
03e9 cd ec 02			call storage_write_block 
03ec				if DEBUG_STORESE 
03ec					DMARK "SB4" 
03ec f5				push af  
03ed 3a 01 04			ld a, (.dmark)  
03f0 32 65 ee			ld (debug_mark),a  
03f3 3a 02 04			ld a, (.dmark+1)  
03f6 32 66 ee			ld (debug_mark+1),a  
03f9 3a 03 04			ld a, (.dmark+2)  
03fc 32 67 ee			ld (debug_mark+2),a  
03ff 18 03			jr .pastdmark  
0401 ..			.dmark: db "SB4"  
0404 f1			.pastdmark: pop af  
0405			endm  
# End of macro DMARK
0405			;		push af 
0405			;		ld a, '>' 
0405			;		ld (debug_mark),a 
0405			;		pop af 
0405					CALLMONITOR 
0405 cd 6f ee			call debug_vector  
0408				endm  
# End of macro CALLMONITOR
0408				endif 
0408			 
0408 00				nop 
0409 00				nop 
040a 00				nop 
040b			 
040b				; now set 0 in every page to mark as a free block 
040b			 
040b 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
040d 21 40 00			ld hl, STORE_BLOCK_PHY 
0410			 
0410 3e 00		.setmark1:   	ld a,0 
0412 e5					push hl 
0413 c5					push bc 
0414 cd ac 01				call se_writebyte 
0417 3e 0a			ld a, 10 
0419 cd e5 0a			call aDelayInMS 
041c 23				inc hl 
041d cd ac 01				call se_writebyte 
0420 3e 0a			ld a, 10 
0422 cd e5 0a			call aDelayInMS 
0425 2b				dec hl 
0426 c1					pop bc 
0427 e1					pop hl 
0428 3e 40				ld a, STORE_BLOCK_PHY 
042a cd f5 0d				call addatohl 
042d 10 e1				djnz .setmark1 
042f			 
042f 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
0431 3e 00		.setmark2:   	ld a,0 
0433 e5					push hl 
0434 c5					push bc 
0435 cd ac 01				call se_writebyte 
0438 3e 0a			ld a, 10 
043a cd e5 0a			call aDelayInMS 
043d 23				inc hl 
043e cd ac 01				call se_writebyte 
0441 3e 0a			ld a, 10 
0443 cd e5 0a			call aDelayInMS 
0446 2b				dec hl 
0447 c1					pop bc 
0448 e1					pop hl 
0449 3e 40				ld a, STORE_BLOCK_PHY 
044b cd f5 0d				call addatohl 
044e 10 e1				djnz .setmark2 
0450			 
0450					 
0450			 
0450			 
0450 c9				ret 
0451			 
0451			 
0451			 
0451			 
0451 .. 00		.defaultbanklabl:   db "BankLabel_",0 
045c			 
045c			 
045c			 
045c			; Label Bank 
045c			; ---------- 
045c			; 
045c			; With current bank 
045c			; Read block 0 
045c			; Set label 
045c			; Write block 0 
045c			 
045c			; label str pointer in hl 
045c			 
045c			storage_label:     
045c			 
045c				if DEBUG_STORESE 
045c					DMARK "LBL" 
045c f5				push af  
045d 3a 71 04			ld a, (.dmark)  
0460 32 65 ee			ld (debug_mark),a  
0463 3a 72 04			ld a, (.dmark+1)  
0466 32 66 ee			ld (debug_mark+1),a  
0469 3a 73 04			ld a, (.dmark+2)  
046c 32 67 ee			ld (debug_mark+2),a  
046f 18 03			jr .pastdmark  
0471 ..			.dmark: db "LBL"  
0474 f1			.pastdmark: pop af  
0475			endm  
# End of macro DMARK
0475					CALLMONITOR 
0475 cd 6f ee			call debug_vector  
0478				endm  
# End of macro CALLMONITOR
0478				endif 
0478			 
0478 e5				push hl 
0479			 
0479 cd 38 03			call storage_get_block_0 
047c			 
047c				; set default label 
047c			 
047c e1				pop hl 
047d			 
047d 11 77 ea		 	ld de, store_page+3 
0480 01 0f 00			ld bc, 15 
0483				if DEBUG_STORESE 
0483					DMARK "LB3" 
0483 f5				push af  
0484 3a 98 04			ld a, (.dmark)  
0487 32 65 ee			ld (debug_mark),a  
048a 3a 99 04			ld a, (.dmark+1)  
048d 32 66 ee			ld (debug_mark+1),a  
0490 3a 9a 04			ld a, (.dmark+2)  
0493 32 67 ee			ld (debug_mark+2),a  
0496 18 03			jr .pastdmark  
0498 ..			.dmark: db "LB3"  
049b f1			.pastdmark: pop af  
049c			endm  
# End of macro DMARK
049c					CALLMONITOR 
049c cd 6f ee			call debug_vector  
049f				endm  
# End of macro CALLMONITOR
049f				endif 
049f ed b0			ldir 
04a1				; save default page 0 
04a1			 
04a1 21 00 00			ld hl, 0 
04a4 11 74 ea			ld de, store_page 
04a7				if DEBUG_STORESE 
04a7					DMARK "LBW" 
04a7 f5				push af  
04a8 3a bc 04			ld a, (.dmark)  
04ab 32 65 ee			ld (debug_mark),a  
04ae 3a bd 04			ld a, (.dmark+1)  
04b1 32 66 ee			ld (debug_mark+1),a  
04b4 3a be 04			ld a, (.dmark+2)  
04b7 32 67 ee			ld (debug_mark+2),a  
04ba 18 03			jr .pastdmark  
04bc ..			.dmark: db "LBW"  
04bf f1			.pastdmark: pop af  
04c0			endm  
# End of macro DMARK
04c0					CALLMONITOR 
04c0 cd 6f ee			call debug_vector  
04c3				endm  
# End of macro CALLMONITOR
04c3				endif 
04c3 cd ec 02			call storage_write_block 
04c6			 
04c6 c9				ret 
04c7			 
04c7			 
04c7			 
04c7			; Read Block 0 - Config 
04c7			; --------------------- 
04c7			; 
04c7			; With current bank 
04c7			; Call presence test 
04c7			;    If not present format/init bank  
04c7			; Read block 0  
04c7			;  
04c7			 
04c7			 
04c7			; Dir 
04c7			; --- 
04c7			; 
04c7			; With current bank 
04c7			; Load Block 0 Config 
04c7			; Get max file id number 
04c7			; For each logical block 
04c7			;    Read block read byte 2 
04c7			;      if first block of file 
04c7			;         Display file name 
04c7			;         Display type flags for file 
04c7			;        
04c7			 
04c7			; moving to words as this requires stack control 
04c7			 
04c7			 
04c7			; Delete File 
04c7			; ----------- 
04c7			; 
04c7			; With current bank 
04c7			; 
04c7			; Load Block 0 Config 
04c7			; Get max file id number 
04c7			; For each logical block 
04c7			;    Read block file id 
04c7			;      If first block of file and dont have file id 
04c7			;         if file to delete 
04c7			;         Save file id 
04c7			;         Null file id 
04c7			;         Write this block back 
04c7			;      If file id is one saved 
04c7			;         Null file id 
04c7			;         Write this block back 
04c7			 
04c7			 
04c7			.se_done: 
04c7 e1				pop hl 
04c8 c9				ret 
04c9			 
04c9			storage_erase: 
04c9			 
04c9				; hl contains the file id 
04c9			 
04c9 5d				ld e, l 
04ca 16 00			ld d, 0 
04cc 21 40 00			ld hl, STORE_BLOCK_PHY 
04cf					if DEBUG_FORTH_WORDS 
04cf						DMARK "ERA" 
04cf f5				push af  
04d0 3a e4 04			ld a, (.dmark)  
04d3 32 65 ee			ld (debug_mark),a  
04d6 3a e5 04			ld a, (.dmark+1)  
04d9 32 66 ee			ld (debug_mark+1),a  
04dc 3a e6 04			ld a, (.dmark+2)  
04df 32 67 ee			ld (debug_mark+2),a  
04e2 18 03			jr .pastdmark  
04e4 ..			.dmark: db "ERA"  
04e7 f1			.pastdmark: pop af  
04e8			endm  
# End of macro DMARK
04e8						CALLMONITOR 
04e8 cd 6f ee			call debug_vector  
04eb				endm  
# End of macro CALLMONITOR
04eb					endif 
04eb cd ba 05			call storage_findnextid 
04ee cd 1e 0e			call ishlzero 
04f1 c8				ret z 
04f2			 
04f2 e5				push hl 
04f3			 
04f3				; TODO check file not found 
04f3			 
04f3 11 74 ea			ld de, store_page 
04f6 cd 87 02			call storage_read_block 
04f9			 
04f9 cd 1e 0e			call ishlzero 
04fc ca c7 04			jp z,.se_done 
04ff			 
04ff					if DEBUG_FORTH_WORDS 
04ff						DMARK "ER1" 
04ff f5				push af  
0500 3a 14 05			ld a, (.dmark)  
0503 32 65 ee			ld (debug_mark),a  
0506 3a 15 05			ld a, (.dmark+1)  
0509 32 66 ee			ld (debug_mark+1),a  
050c 3a 16 05			ld a, (.dmark+2)  
050f 32 67 ee			ld (debug_mark+2),a  
0512 18 03			jr .pastdmark  
0514 ..			.dmark: db "ER1"  
0517 f1			.pastdmark: pop af  
0518			endm  
# End of macro DMARK
0518						CALLMONITOR 
0518 cd 6f ee			call debug_vector  
051b				endm  
# End of macro CALLMONITOR
051b					endif 
051b 3a 74 ea			ld a, (store_page)	; get file id 
051e 32 68 ea			ld (store_tmpid), a 
0521			 
0521 3a 76 ea			ld a, (store_page+2)    ; get count of extends 
0524 32 67 ea			ld (store_tmpext), a 
0527			 
0527				; wipe file header 
0527			 
0527 e1				pop hl 
0528 3e 00			ld a, 0 
052a 32 74 ea			ld (store_page), a 
052d 32 75 ea			ld (store_page+1),a 
0530 11 74 ea			ld de, store_page 
0533					if DEBUG_FORTH_WORDS 
0533						DMARK "ER2" 
0533 f5				push af  
0534 3a 48 05			ld a, (.dmark)  
0537 32 65 ee			ld (debug_mark),a  
053a 3a 49 05			ld a, (.dmark+1)  
053d 32 66 ee			ld (debug_mark+1),a  
0540 3a 4a 05			ld a, (.dmark+2)  
0543 32 67 ee			ld (debug_mark+2),a  
0546 18 03			jr .pastdmark  
0548 ..			.dmark: db "ER2"  
054b f1			.pastdmark: pop af  
054c			endm  
# End of macro DMARK
054c						CALLMONITOR 
054c cd 6f ee			call debug_vector  
054f				endm  
# End of macro CALLMONITOR
054f					endif 
054f cd ec 02			call storage_write_block 
0552			 
0552			 
0552				; wipe file extents 
0552			 
0552 3a 67 ea			ld a, (store_tmpext) 
0555 47				ld b, a 
0556			 
0556			.eraext:	  
0556 c5				push bc 
0557			 
0557 21 40 00			ld hl, STORE_BLOCK_PHY 
055a 3a 68 ea			ld a,(store_tmpid) 
055d 5f				ld e, a 
055e 50				ld d, b	 
055f					if DEBUG_FORTH_WORDS 
055f						DMARK "ER3" 
055f f5				push af  
0560 3a 74 05			ld a, (.dmark)  
0563 32 65 ee			ld (debug_mark),a  
0566 3a 75 05			ld a, (.dmark+1)  
0569 32 66 ee			ld (debug_mark+1),a  
056c 3a 76 05			ld a, (.dmark+2)  
056f 32 67 ee			ld (debug_mark+2),a  
0572 18 03			jr .pastdmark  
0574 ..			.dmark: db "ER3"  
0577 f1			.pastdmark: pop af  
0578			endm  
# End of macro DMARK
0578						CALLMONITOR 
0578 cd 6f ee			call debug_vector  
057b				endm  
# End of macro CALLMONITOR
057b					endif 
057b cd ba 05			call storage_findnextid 
057e cd 1e 0e			call ishlzero 
0581 ca c7 04			jp z,.se_done 
0584			 
0584 e5				push hl 
0585 11 74 ea			ld de, store_page 
0588 cd 87 02			call storage_read_block 
058b			 
058b				; free block	 
058b			 
058b 3e 00			ld a, 0 
058d 32 74 ea			ld (store_page), a 
0590 32 75 ea			ld (store_page+1),a 
0593 11 74 ea			ld de, store_page 
0596 e1				pop hl 
0597					if DEBUG_FORTH_WORDS 
0597						DMARK "ER4" 
0597 f5				push af  
0598 3a ac 05			ld a, (.dmark)  
059b 32 65 ee			ld (debug_mark),a  
059e 3a ad 05			ld a, (.dmark+1)  
05a1 32 66 ee			ld (debug_mark+1),a  
05a4 3a ae 05			ld a, (.dmark+2)  
05a7 32 67 ee			ld (debug_mark+2),a  
05aa 18 03			jr .pastdmark  
05ac ..			.dmark: db "ER4"  
05af f1			.pastdmark: pop af  
05b0			endm  
# End of macro DMARK
05b0						CALLMONITOR 
05b0 cd 6f ee			call debug_vector  
05b3				endm  
# End of macro CALLMONITOR
05b3					endif 
05b3 cd ec 02			call storage_write_block 
05b6			 
05b6 c1				pop bc 
05b7 10 9d			djnz .eraext 
05b9			 
05b9 c9				ret 
05ba			 
05ba			 
05ba			; Find Free Block 
05ba			; --------------- 
05ba			; 
05ba			; With current bank 
05ba			;  
05ba			; From given starting logical block 
05ba			;    Read block  
05ba			;    If no file id 
05ba			;         Return block id 
05ba			 
05ba			 
05ba			; hl starting page number 
05ba			; hl contains free page number or zero if no pages free 
05ba			; e contains the file id to locate 
05ba			; d contains the block number 
05ba			 
05ba			; TODO change to find file id and use zero for free block 
05ba			 
05ba			storage_findnextid: 
05ba			 
05ba				; now locate first 0 page to mark as a free block 
05ba			 
05ba 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
05bc			;	ld hl, STORE_BLOCK_PHY 
05bc			 
05bc					if DEBUG_FORTH_WORDS 
05bc					DMARK "FNI" 
05bc f5				push af  
05bd 3a d1 05			ld a, (.dmark)  
05c0 32 65 ee			ld (debug_mark),a  
05c3 3a d2 05			ld a, (.dmark+1)  
05c6 32 66 ee			ld (debug_mark+1),a  
05c9 3a d3 05			ld a, (.dmark+2)  
05cc 32 67 ee			ld (debug_mark+2),a  
05cf 18 03			jr .pastdmark  
05d1 ..			.dmark: db "FNI"  
05d4 f1			.pastdmark: pop af  
05d5			endm  
# End of macro DMARK
05d5						CALLMONITOR 
05d5 cd 6f ee			call debug_vector  
05d8				endm  
# End of macro CALLMONITOR
05d8					endif 
05d8			.ff1:   	 
05d8 e5					push hl 
05d9 c5					push bc 
05da d5					push de 
05db cd ab 01				call se_readbyte 
05de 5f					ld e,a 
05df 23					inc hl 
05e0 cd ab 01				call se_readbyte 
05e3 57					ld d, a 
05e4 e1					pop hl 
05e5 e5					push hl 
05e6 cd 13 0e				call cmp16 
05e9 28 49				jr z, .fffound 
05eb			 
05eb d1					pop de 
05ec c1					pop bc 
05ed e1					pop hl 
05ee			 
05ee					; is found? 
05ee					;cp e 
05ee					;ret z 
05ee			 
05ee 3e 40				ld a, STORE_BLOCK_PHY 
05f0 cd f5 0d				call addatohl 
05f3 10 e3				djnz .ff1 
05f5			 
05f5 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
05f7			.ff2:   	 
05f7			 
05f7 e5					push hl 
05f8 c5					push bc 
05f9 d5					push de 
05fa cd ab 01				call se_readbyte 
05fd 5f					ld e,a 
05fe 23					inc hl 
05ff cd ab 01				call se_readbyte 
0602 57					ld d, a 
0603			 
0603 e1					pop hl 
0604 e5					push hl 
0605 cd 13 0e				call cmp16 
0608 28 2a				jr z, .fffound 
060a			 
060a d1					pop de 
060b c1					pop bc 
060c e1					pop hl 
060d					; is found? 
060d					;cp e 
060d					;ret z 
060d			 
060d 3e 40				ld a, STORE_BLOCK_PHY 
060f cd f5 0d				call addatohl 
0612 10 e3				djnz .ff2 
0614			 
0614			 
0614					if DEBUG_FORTH_WORDS 
0614					DMARK "FN-" 
0614 f5				push af  
0615 3a 29 06			ld a, (.dmark)  
0618 32 65 ee			ld (debug_mark),a  
061b 3a 2a 06			ld a, (.dmark+1)  
061e 32 66 ee			ld (debug_mark+1),a  
0621 3a 2b 06			ld a, (.dmark+2)  
0624 32 67 ee			ld (debug_mark+2),a  
0627 18 03			jr .pastdmark  
0629 ..			.dmark: db "FN-"  
062c f1			.pastdmark: pop af  
062d			endm  
# End of macro DMARK
062d					;	push af 
062d					;	ld a, 'n' 
062d					;	ld (debug_mark),a 
062d					;	pop af 
062d						CALLMONITOR 
062d cd 6f ee			call debug_vector  
0630				endm  
# End of macro CALLMONITOR
0630					endif 
0630				; no free marks! 
0630 21 00 00				ld hl, 0 
0633 c9				ret 
0634			.fffound: 
0634				 
0634			 
0634 d1					pop de 
0635 c1					pop bc 
0636 e1					pop hl 
0637					if DEBUG_FORTH_WORDS 
0637					DMARK "FNF" 
0637 f5				push af  
0638 3a 4c 06			ld a, (.dmark)  
063b 32 65 ee			ld (debug_mark),a  
063e 3a 4d 06			ld a, (.dmark+1)  
0641 32 66 ee			ld (debug_mark+1),a  
0644 3a 4e 06			ld a, (.dmark+2)  
0647 32 67 ee			ld (debug_mark+2),a  
064a 18 03			jr .pastdmark  
064c ..			.dmark: db "FNF"  
064f f1			.pastdmark: pop af  
0650			endm  
# End of macro DMARK
0650					;	push af 
0650					;	ld a, 'n' 
0650					;	ld (debug_mark),a 
0650					;	pop af 
0650						CALLMONITOR 
0650 cd 6f ee			call debug_vector  
0653				endm  
# End of macro CALLMONITOR
0653					endif 
0653 c9				ret 
0654			 
0654			 
0654			 
0654			; Free Space 
0654			; ---------- 
0654			; 
0654			; With current bank 
0654			; 
0654			; Set block count to zero 
0654			; Starting with first logical block 
0654			;      Find free block  
0654			;      If block id given, increment block count 
0654			; 
0654			;  
0654			 
0654			 
0654			; hl contains count of free blocks 
0654			 
0654			storage_freeblocks: 
0654			 
0654				; now locate first 0 page to mark as a free block 
0654			 
0654 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
0656 21 40 00			ld hl, STORE_BLOCK_PHY 
0659 11 00 00			ld de, 0 
065c			 
065c			.fb1:   	 
065c e5					push hl 
065d c5					push bc 
065e d5					push de 
065f cd ab 01				call se_readbyte 
0662 d1					pop de 
0663 c1					pop bc 
0664 e1					pop hl 
0665			 
0665					; is free? 
0665 fe 00				cp 0 
0667 20 01				jr nz, .ff1cont 
0669 13					inc de 
066a			 
066a			.ff1cont: 
066a			 
066a			 
066a 3e 40				ld a, STORE_BLOCK_PHY 
066c cd f5 0d				call addatohl 
066f 10 eb				djnz .fb1 
0671			 
0671 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
0673			.fb2:   	 
0673 e5					push hl 
0674 c5					push bc 
0675 d5					push de 
0676 cd ab 01				call se_readbyte 
0679 d1					pop de 
067a c1					pop bc 
067b e1					pop hl 
067c			 
067c					; is free? 
067c fe 00				cp 0 
067e 20 01				jr nz, .ff2cont 
0680 13					inc de 
0681			 
0681			.ff2cont: 
0681			 
0681 3e 40				ld a, STORE_BLOCK_PHY 
0683 cd f5 0d				call addatohl 
0686 10 eb				djnz .fb2 
0688			 
0688 eb				ex de, hl 
0689 c9				ret 
068a			 
068a			; Get File ID 
068a			; ----------- 
068a			; 
068a			; With current bank 
068a			;  
068a			; Load Block 0 Config 
068a			; Get max file id number 
068a			; For each logical block 
068a			;    Read block file id 
068a			;      If first block of file and dont have file id 
068a			;         if file get id and exit 
068a			 
068a			 
068a			 
068a			 
068a			; Create File 
068a			; ----------- 
068a			; 
068a			; With current bank  
068a			; Load Block 0 Config 
068a			; Get max file id number 
068a			; Increment file id number 
068a			; Save Config 
068a			; Find free block 
068a			; Set buffer with file name and file id 
068a			; Write buffer to free block  
068a			 
068a			 
068a			; hl point to file name 
068a			; hl returns file id 
068a			 
068a			; file format: 
068a			; byte 0 - file id 
068a			; byte 1 - extent number 
068a			; byte 2-> data 
068a			 
068a			; format for extent number 0: 
068a			; 
068a			; byte 0 - file id 
068a			; byte 1 - extent 0 
068a			; byte 2 - extent count 
068a			; byte 3 -> file name and meta data 
068a			 
068a			 
068a			storage_create: 
068a				if DEBUG_STORESE 
068a					DMARK "SCR" 
068a f5				push af  
068b 3a 9f 06			ld a, (.dmark)  
068e 32 65 ee			ld (debug_mark),a  
0691 3a a0 06			ld a, (.dmark+1)  
0694 32 66 ee			ld (debug_mark+1),a  
0697 3a a1 06			ld a, (.dmark+2)  
069a 32 67 ee			ld (debug_mark+2),a  
069d 18 03			jr .pastdmark  
069f ..			.dmark: db "SCR"  
06a2 f1			.pastdmark: pop af  
06a3			endm  
# End of macro DMARK
06a3					CALLMONITOR 
06a3 cd 6f ee			call debug_vector  
06a6				endm  
# End of macro CALLMONITOR
06a6				endif 
06a6			 
06a6 e5				push hl		; save file name pointer 
06a7			 
06a7 cd 38 03			call storage_get_block_0 
06aa			 
06aa 3a 74 ea			ld a,(store_page)	; get current file id 
06ad 3c				inc a 
06ae 32 74 ea			ld (store_page),a 
06b1				 
06b1 32 68 ea			ld (store_tmpid),a			; save id 
06b4			 
06b4 21 00 00			ld hl, 0 
06b7 11 74 ea			ld de, store_page 
06ba				if DEBUG_STORESE 
06ba					DMARK "SCw" 
06ba f5				push af  
06bb 3a cf 06			ld a, (.dmark)  
06be 32 65 ee			ld (debug_mark),a  
06c1 3a d0 06			ld a, (.dmark+1)  
06c4 32 66 ee			ld (debug_mark+1),a  
06c7 3a d1 06			ld a, (.dmark+2)  
06ca 32 67 ee			ld (debug_mark+2),a  
06cd 18 03			jr .pastdmark  
06cf ..			.dmark: db "SCw"  
06d2 f1			.pastdmark: pop af  
06d3			endm  
# End of macro DMARK
06d3					CALLMONITOR 
06d3 cd 6f ee			call debug_vector  
06d6				endm  
# End of macro CALLMONITOR
06d6				endif 
06d6 cd ec 02			call storage_write_block	 ; save update 
06d9			 
06d9				if DEBUG_STORESE 
06d9 11 74 ea				ld de, store_page 
06dc					DMARK "SCC" 
06dc f5				push af  
06dd 3a f1 06			ld a, (.dmark)  
06e0 32 65 ee			ld (debug_mark),a  
06e3 3a f2 06			ld a, (.dmark+1)  
06e6 32 66 ee			ld (debug_mark+1),a  
06e9 3a f3 06			ld a, (.dmark+2)  
06ec 32 67 ee			ld (debug_mark+2),a  
06ef 18 03			jr .pastdmark  
06f1 ..			.dmark: db "SCC"  
06f4 f1			.pastdmark: pop af  
06f5			endm  
# End of macro DMARK
06f5					CALLMONITOR 
06f5 cd 6f ee			call debug_vector  
06f8				endm  
# End of macro CALLMONITOR
06f8				endif 
06f8				;  
06f8				 
06f8 21 40 00			ld hl, STORE_BLOCK_PHY 
06fb 11 00 00			ld de, 0 
06fe cd ba 05			call storage_findnextid 
0701			 
0701 22 5f ea			ld (store_tmppageid), hl    ; save page to use  
0704			 
0704				; TODO detect 0 = no spare blocks 
0704			 
0704				; hl now contains the free page to use for the file header page 
0704			 
0704				if DEBUG_STORESE 
0704				DMARK "SCF" 
0704 f5				push af  
0705 3a 19 07			ld a, (.dmark)  
0708 32 65 ee			ld (debug_mark),a  
070b 3a 1a 07			ld a, (.dmark+1)  
070e 32 66 ee			ld (debug_mark+1),a  
0711 3a 1b 07			ld a, (.dmark+2)  
0714 32 67 ee			ld (debug_mark+2),a  
0717 18 03			jr .pastdmark  
0719 ..			.dmark: db "SCF"  
071c f1			.pastdmark: pop af  
071d			endm  
# End of macro DMARK
071d					CALLMONITOR 
071d cd 6f ee			call debug_vector  
0720				endm  
# End of macro CALLMONITOR
0720				endif 
0720			 
0720 22 5f ea			ld (store_tmppageid), hl 
0723				 
0723 3a 68 ea			ld a,(store_tmpid)    ; get file id 
0726			;	ld a, (store_filecache)			; save to cache 
0726			 
0726 32 74 ea			ld (store_page),a    ; set page id 
0729 3e 00			ld a, 0			 ; extent 0 is file header 
072b 32 75 ea			ld (store_page+1), a   ; set file extent 
072e			 
072e 32 76 ea			ld (store_page+2), a   ; extent count for the file 
0731			 
0731			;	inc hl 		; init block 0 of file 
0731			;	inc hl   		; skip file and extent id 
0731			 ;       ld a, 0 
0731			;	ld (hl),a 
0731			;	ld a, (store_filecache+1)  	; save to cache 
0731			 
0731			;	inc hl    ; file name 
0731				 
0731				 
0731 11 77 ea			ld de, store_page+3    ; get buffer for term string to use as file name 
0734				if DEBUG_STORESE 
0734					DMARK "SCc" 
0734 f5				push af  
0735 3a 49 07			ld a, (.dmark)  
0738 32 65 ee			ld (debug_mark),a  
073b 3a 4a 07			ld a, (.dmark+1)  
073e 32 66 ee			ld (debug_mark+1),a  
0741 3a 4b 07			ld a, (.dmark+2)  
0744 32 67 ee			ld (debug_mark+2),a  
0747 18 03			jr .pastdmark  
0749 ..			.dmark: db "SCc"  
074c f1			.pastdmark: pop af  
074d			endm  
# End of macro DMARK
074d					CALLMONITOR 
074d cd 6f ee			call debug_vector  
0750				endm  
# End of macro CALLMONITOR
0750				endif 
0750 e1				pop hl    ; get zero term string 
0751 e5				push hl 
0752 3e 00			ld a, 0 
0754 cd 66 11			call strlent 
0757 23				inc hl   ; cover zero term 
0758 06 00			ld b,0 
075a 4d				ld c,l 
075b e1				pop hl 
075c				;ex de, hl 
075c				if DEBUG_STORESE 
075c					DMARK "SCa" 
075c f5				push af  
075d 3a 71 07			ld a, (.dmark)  
0760 32 65 ee			ld (debug_mark),a  
0763 3a 72 07			ld a, (.dmark+1)  
0766 32 66 ee			ld (debug_mark+1),a  
0769 3a 73 07			ld a, (.dmark+2)  
076c 32 67 ee			ld (debug_mark+2),a  
076f 18 03			jr .pastdmark  
0771 ..			.dmark: db "SCa"  
0774 f1			.pastdmark: pop af  
0775			endm  
# End of macro DMARK
0775					;push af 
0775					;ld a, 'a' 
0775					;ld (debug_mark),a 
0775					;pop af 
0775					CALLMONITOR 
0775 cd 6f ee			call debug_vector  
0778				endm  
# End of macro CALLMONITOR
0778				endif 
0778 ed b0			ldir    ; copy zero term string 
077a				if DEBUG_STORESE 
077a					DMARK "SCA" 
077a f5				push af  
077b 3a 8f 07			ld a, (.dmark)  
077e 32 65 ee			ld (debug_mark),a  
0781 3a 90 07			ld a, (.dmark+1)  
0784 32 66 ee			ld (debug_mark+1),a  
0787 3a 91 07			ld a, (.dmark+2)  
078a 32 67 ee			ld (debug_mark+2),a  
078d 18 03			jr .pastdmark  
078f ..			.dmark: db "SCA"  
0792 f1			.pastdmark: pop af  
0793			endm  
# End of macro DMARK
0793					CALLMONITOR 
0793 cd 6f ee			call debug_vector  
0796				endm  
# End of macro CALLMONITOR
0796				endif 
0796			 
0796				; write file header page 
0796			 
0796 2a 5f ea			ld hl,(store_tmppageid) 
0799 11 74 ea			ld de, store_page 
079c				if DEBUG_STORESE 
079c					DMARK "SCb" 
079c f5				push af  
079d 3a b1 07			ld a, (.dmark)  
07a0 32 65 ee			ld (debug_mark),a  
07a3 3a b2 07			ld a, (.dmark+1)  
07a6 32 66 ee			ld (debug_mark+1),a  
07a9 3a b3 07			ld a, (.dmark+2)  
07ac 32 67 ee			ld (debug_mark+2),a  
07af 18 03			jr .pastdmark  
07b1 ..			.dmark: db "SCb"  
07b4 f1			.pastdmark: pop af  
07b5			endm  
# End of macro DMARK
07b5					;push af 
07b5					;ld a, 'b' 
07b5					;ld (debug_mark),a 
07b5					;pop af 
07b5					CALLMONITOR 
07b5 cd 6f ee			call debug_vector  
07b8				endm  
# End of macro CALLMONITOR
07b8				endif 
07b8 cd ec 02			call storage_write_block 
07bb			 
07bb 3a 68 ea			ld a, (store_tmpid) 
07be 6f				ld l, a 
07bf 26 00			ld h,0 
07c1				if DEBUG_STORESE 
07c1					DMARK "SCz" 
07c1 f5				push af  
07c2 3a d6 07			ld a, (.dmark)  
07c5 32 65 ee			ld (debug_mark),a  
07c8 3a d7 07			ld a, (.dmark+1)  
07cb 32 66 ee			ld (debug_mark+1),a  
07ce 3a d8 07			ld a, (.dmark+2)  
07d1 32 67 ee			ld (debug_mark+2),a  
07d4 18 03			jr .pastdmark  
07d6 ..			.dmark: db "SCz"  
07d9 f1			.pastdmark: pop af  
07da			endm  
# End of macro DMARK
07da					CALLMONITOR 
07da cd 6f ee			call debug_vector  
07dd				endm  
# End of macro CALLMONITOR
07dd				endif 
07dd c9				ret 
07de				 
07de			 
07de			 
07de			; 
07de			; Read File 
07de			; 
07de			; h - file id to locate 
07de			; l - extent to locate 
07de			; de - pointer to string to read into 
07de			; 
07de			; returns hl is 0 if block not found ie end of file or pointer to start of data read 
07de			 
07de			.sr_fail: 
07de d1				pop de 
07df c9				ret 
07e0			 
07e0			storage_read: 
07e0			 
07e0			 
07e0 d5				push de 
07e1			 
07e1			; TODO BUG the above push is it popped before the RET Z? 
07e1			 
07e1			; TODO how to handle multiple part blocks 
07e1			 
07e1				; locate file extent to read 
07e1			 
07e1 5c				ld e, h 
07e2 55				ld d, l 
07e3			 
07e3			.srext: 
07e3 22 72 ea			ld (store_readptr), hl     ; save the current extent to load 
07e6 ed 53 70 ea		ld (store_readbuf), de     ; save the current buffer to load in to 
07ea			 
07ea 21 40 00			ld hl, STORE_BLOCK_PHY 
07ed				if DEBUG_STORESE 
07ed					DMARK "sre" 
07ed f5				push af  
07ee 3a 02 08			ld a, (.dmark)  
07f1 32 65 ee			ld (debug_mark),a  
07f4 3a 03 08			ld a, (.dmark+1)  
07f7 32 66 ee			ld (debug_mark+1),a  
07fa 3a 04 08			ld a, (.dmark+2)  
07fd 32 67 ee			ld (debug_mark+2),a  
0800 18 03			jr .pastdmark  
0802 ..			.dmark: db "sre"  
0805 f1			.pastdmark: pop af  
0806			endm  
# End of macro DMARK
0806					CALLMONITOR 
0806 cd 6f ee			call debug_vector  
0809				endm  
# End of macro CALLMONITOR
0809				endif 
0809 cd ba 05			call storage_findnextid 
080c			 
080c				if DEBUG_STORESE 
080c					DMARK "srf" 
080c f5				push af  
080d 3a 21 08			ld a, (.dmark)  
0810 32 65 ee			ld (debug_mark),a  
0813 3a 22 08			ld a, (.dmark+1)  
0816 32 66 ee			ld (debug_mark+1),a  
0819 3a 23 08			ld a, (.dmark+2)  
081c 32 67 ee			ld (debug_mark+2),a  
081f 18 03			jr .pastdmark  
0821 ..			.dmark: db "srf"  
0824 f1			.pastdmark: pop af  
0825			endm  
# End of macro DMARK
0825					CALLMONITOR 
0825 cd 6f ee			call debug_vector  
0828				endm  
# End of macro CALLMONITOR
0828				endif 
0828 cd 1e 0e			call ishlzero 
082b			;	ld a, l 
082b			;	add h 
082b			;	cp 0 
082b 28 b1			jr z,.sr_fail			; block not found so EOF 
082d			 
082d				; save current address for use by higher level words etc 
082d			 
082d 22 65 ea			ld (store_openaddr),hl 
0830			 
0830			 
0830				; hl contains page number to load 
0830 d1				pop de   ; get storage 
0831 ed 53 70 ea		ld (store_readbuf), de     ; current buffer to load in to 
0835 d5				push de 
0836				if DEBUG_STORESE 
0836					DMARK "srg" 
0836 f5				push af  
0837 3a 4b 08			ld a, (.dmark)  
083a 32 65 ee			ld (debug_mark),a  
083d 3a 4c 08			ld a, (.dmark+1)  
0840 32 66 ee			ld (debug_mark+1),a  
0843 3a 4d 08			ld a, (.dmark+2)  
0846 32 67 ee			ld (debug_mark+2),a  
0849 18 03			jr .pastdmark  
084b ..			.dmark: db "srg"  
084e f1			.pastdmark: pop af  
084f			endm  
# End of macro DMARK
084f					CALLMONITOR 
084f cd 6f ee			call debug_vector  
0852				endm  
# End of macro CALLMONITOR
0852				endif 
0852 cd 87 02			call storage_read_block 
0855			 
0855				; if this a continuation read??? 
0855			 
0855 2a 70 ea			ld hl, (store_readbuf)     ; current buffer to load in to 
0858			 
0858 3e 3f			ld a, STORE_BLOCK_PHY-1 
085a cd f5 0d			call addatohl 
085d 7e				ld a,(hl) 
085e fe 00			cp 0 
0860 28 02			jr z, .markiscont 
0862 3e ff			ld a, 255 
0864			 
0864			.markiscont: 
0864 32 67 ea			ld (store_readcont), a 
0867			 
0867				if DEBUG_STORESE 
0867					DMARK "srC" 
0867 f5				push af  
0868 3a 7c 08			ld a, (.dmark)  
086b 32 65 ee			ld (debug_mark),a  
086e 3a 7d 08			ld a, (.dmark+1)  
0871 32 66 ee			ld (debug_mark+1),a  
0874 3a 7e 08			ld a, (.dmark+2)  
0877 32 67 ee			ld (debug_mark+2),a  
087a 18 03			jr .pastdmark  
087c ..			.dmark: db "srC"  
087f f1			.pastdmark: pop af  
0880			endm  
# End of macro DMARK
0880					CALLMONITOR 
0880 cd 6f ee			call debug_vector  
0883				endm  
# End of macro CALLMONITOR
0883				endif 
0883				; only short reads enabled 
0883			 
0883 3a 6f ea			ld a, (store_longread) 
0886 fe 00			cp 0 
0888 ca 55 09			jp z, .readdone 
088b			 
088b			; TODO if block has no zeros then need to read next block  
088b			; this code appears to be very buggy. Have added above a flag to disable/enable the following code for later debug 
088b			; check last byte of physical block. 
088b			; if not zero then the next block needs to be loaded 
088b			 
088b			 
088b 2a 70 ea			ld hl, (store_readbuf)     ; current buffer to load in to 
088e			 
088e 3e 3f			ld a, STORE_BLOCK_PHY-1 
0890 cd f5 0d			call addatohl 
0893				;dec hl 
0893 7e				ld a,(hl) 
0894				if DEBUG_STORESE 
0894					DMARK "sr?" 
0894 f5				push af  
0895 3a a9 08			ld a, (.dmark)  
0898 32 65 ee			ld (debug_mark),a  
089b 3a aa 08			ld a, (.dmark+1)  
089e 32 66 ee			ld (debug_mark+1),a  
08a1 3a ab 08			ld a, (.dmark+2)  
08a4 32 67 ee			ld (debug_mark+2),a  
08a7 18 03			jr .pastdmark  
08a9 ..			.dmark: db "sr?"  
08ac f1			.pastdmark: pop af  
08ad			endm  
# End of macro DMARK
08ad					CALLMONITOR 
08ad cd 6f ee			call debug_vector  
08b0				endm  
# End of macro CALLMONITOR
08b0				endif 
08b0 fe 00			cp 0 
08b2 ca 55 09			jp z, .readdone 
08b5			 
08b5				; last byte is not zero so there is more in the next extent. Load it on the end.	 
08b5			 
08b5 23				inc hl 
08b6			 
08b6 22 70 ea			ld (store_readbuf), hl     ; save the current buffer to load in to 
08b9			 
08b9 ed 5b 72 ea		ld de, (store_readptr)     ; save the current extent to load 
08bd			 
08bd eb				ex de, hl 
08be			 
08be				; next ext 
08be			 
08be 23				inc hl 
08bf 22 72 ea			ld  (store_readptr), hl     ; save the current extent to load 
08c2			 
08c2				if DEBUG_STORESE 
08c2					DMARK "sF2" 
08c2 f5				push af  
08c3 3a d7 08			ld a, (.dmark)  
08c6 32 65 ee			ld (debug_mark),a  
08c9 3a d8 08			ld a, (.dmark+1)  
08cc 32 66 ee			ld (debug_mark+1),a  
08cf 3a d9 08			ld a, (.dmark+2)  
08d2 32 67 ee			ld (debug_mark+2),a  
08d5 18 03			jr .pastdmark  
08d7 ..			.dmark: db "sF2"  
08da f1			.pastdmark: pop af  
08db			endm  
# End of macro DMARK
08db					CALLMONITOR 
08db cd 6f ee			call debug_vector  
08de				endm  
# End of macro CALLMONITOR
08de				endif 
08de			 
08de				; get and load block 
08de			 
08de cd ba 05			call storage_findnextid 
08e1			 
08e1				if DEBUG_STORESE 
08e1					DMARK "sf2" 
08e1 f5				push af  
08e2 3a f6 08			ld a, (.dmark)  
08e5 32 65 ee			ld (debug_mark),a  
08e8 3a f7 08			ld a, (.dmark+1)  
08eb 32 66 ee			ld (debug_mark+1),a  
08ee 3a f8 08			ld a, (.dmark+2)  
08f1 32 67 ee			ld (debug_mark+2),a  
08f4 18 03			jr .pastdmark  
08f6 ..			.dmark: db "sf2"  
08f9 f1			.pastdmark: pop af  
08fa			endm  
# End of macro DMARK
08fa					CALLMONITOR 
08fa cd 6f ee			call debug_vector  
08fd				endm  
# End of macro CALLMONITOR
08fd				endif 
08fd cd 1e 0e			call ishlzero 
0900			;	ld a, l 
0900			;	add h 
0900			;	cp 0 
0900 ca de 07			jp z,.sr_fail			; block not found so EOF 
0903				 
0903				; save current address for use by higher level words etc 
0903			 
0903 22 65 ea			ld (store_openaddr),hl 
0906			 
0906 cd 87 02			call storage_read_block 
0909			 
0909				; on a continuation block, we now have the file id and ext in the middle of the block 
0909				; we need to pull everything back  
0909			 
0909 ed 5b 70 ea		ld de, (store_readbuf)     ; current buffer to nudge into 
090d 2a 70 ea			ld hl, (store_readbuf)     ; current buffer where data actually exists 
0910 23				inc hl 
0911 23				inc hl     ; skip id and ext 
0912 01 40 00			ld bc, STORE_BLOCK_PHY 
0915				if DEBUG_STORESE 
0915					DMARK "SR<" 
0915 f5				push af  
0916 3a 2a 09			ld a, (.dmark)  
0919 32 65 ee			ld (debug_mark),a  
091c 3a 2b 09			ld a, (.dmark+1)  
091f 32 66 ee			ld (debug_mark+1),a  
0922 3a 2c 09			ld a, (.dmark+2)  
0925 32 67 ee			ld (debug_mark+2),a  
0928 18 03			jr .pastdmark  
092a ..			.dmark: db "SR<"  
092d f1			.pastdmark: pop af  
092e			endm  
# End of macro DMARK
092e					CALLMONITOR 
092e cd 6f ee			call debug_vector  
0931				endm  
# End of macro CALLMONITOR
0931				endif 
0931 ed b0			ldir     ; copy data 
0933			 
0933				; move the pointer back and pretend we have a full buffer for next recheck 
0933			 
0933 1b				dec de 
0934 1b				dec de 
0935			 
0935			; TODO do pop below now short circuit loop????? 
0935 c1				pop bc     ; get rid of spare de on stack 
0936				if DEBUG_STORESE 
0936					DMARK "SR>" 
0936 f5				push af  
0937 3a 4b 09			ld a, (.dmark)  
093a 32 65 ee			ld (debug_mark),a  
093d 3a 4c 09			ld a, (.dmark+1)  
0940 32 66 ee			ld (debug_mark+1),a  
0943 3a 4d 09			ld a, (.dmark+2)  
0946 32 67 ee			ld (debug_mark+2),a  
0949 18 03			jr .pastdmark  
094b ..			.dmark: db "SR>"  
094e f1			.pastdmark: pop af  
094f			endm  
# End of macro DMARK
094f					CALLMONITOR 
094f cd 6f ee			call debug_vector  
0952				endm  
# End of macro CALLMONITOR
0952				endif 
0952 c3 e3 07			jp .srext 
0955			 
0955			 
0955			 
0955			 
0955			 
0955			.readdone:		 
0955 e1				pop hl 		 ; return start of data to show as not EOF 
0956 23				inc hl   ; past file id 
0957 23				inc hl   ; past ext 
0958				if DEBUG_STORESE 
0958					DMARK "SRe" 
0958 f5				push af  
0959 3a 6d 09			ld a, (.dmark)  
095c 32 65 ee			ld (debug_mark),a  
095f 3a 6e 09			ld a, (.dmark+1)  
0962 32 66 ee			ld (debug_mark+1),a  
0965 3a 6f 09			ld a, (.dmark+2)  
0968 32 67 ee			ld (debug_mark+2),a  
096b 18 03			jr .pastdmark  
096d ..			.dmark: db "SRe"  
0970 f1			.pastdmark: pop af  
0971			endm  
# End of macro DMARK
0971					CALLMONITOR 
0971 cd 6f ee			call debug_vector  
0974				endm  
# End of macro CALLMONITOR
0974				endif 
0974 c9					ret 
0975			 
0975			 
0975			 
0975			; 
0975			; Append File 
0975			; 
0975			; hl - file id to locate 
0975			; de - pointer to (multi block) string to write 
0975			 
0975			.sa_notfound: 
0975 d1				pop de 
0976 c9				ret 
0977			 
0977			 
0977			storage_append: 
0977				; hl -  file id to append to 
0977				; de - string to append 
0977			 
0977 d5				push de 
0978				 
0978				if DEBUG_STORESE 
0978					DMARK "AP1" 
0978 f5				push af  
0979 3a 8d 09			ld a, (.dmark)  
097c 32 65 ee			ld (debug_mark),a  
097f 3a 8e 09			ld a, (.dmark+1)  
0982 32 66 ee			ld (debug_mark+1),a  
0985 3a 8f 09			ld a, (.dmark+2)  
0988 32 67 ee			ld (debug_mark+2),a  
098b 18 03			jr .pastdmark  
098d ..			.dmark: db "AP1"  
0990 f1			.pastdmark: pop af  
0991			endm  
# End of macro DMARK
0991					CALLMONITOR 
0991 cd 6f ee			call debug_vector  
0994				endm  
# End of macro CALLMONITOR
0994				endif 
0994			 
0994 7d				ld a, l 
0995 32 68 ea			ld (store_tmpid), a 
0998			 
0998				; get file header  
0998			 
0998 16 00			ld d, 0			 ; file extent to locate - file name details at item 0 
099a 3a 68 ea			ld a, (store_tmpid) 
099d 5f				ld e, a 
099e			 
099e 21 40 00				ld hl, STORE_BLOCK_PHY 
09a1 cd ba 05				call storage_findnextid 
09a4			 
09a4 cd 1e 0e			call ishlzero 
09a7 28 cc			jr z, .sa_notfound 
09a9			 
09a9 22 5f ea			ld (store_tmppageid), hl 
09ac			 
09ac				; TODO handle file id not found 
09ac			 
09ac				if DEBUG_STORESE 
09ac					DMARK "AP2" 
09ac f5				push af  
09ad 3a c1 09			ld a, (.dmark)  
09b0 32 65 ee			ld (debug_mark),a  
09b3 3a c2 09			ld a, (.dmark+1)  
09b6 32 66 ee			ld (debug_mark+1),a  
09b9 3a c3 09			ld a, (.dmark+2)  
09bc 32 67 ee			ld (debug_mark+2),a  
09bf 18 03			jr .pastdmark  
09c1 ..			.dmark: db "AP2"  
09c4 f1			.pastdmark: pop af  
09c5			endm  
# End of macro DMARK
09c5					CALLMONITOR 
09c5 cd 6f ee			call debug_vector  
09c8				endm  
# End of macro CALLMONITOR
09c8				endif 
09c8			 
09c8				; update file extent count 
09c8			 
09c8 11 74 ea			ld de, store_page 
09cb			 
09cb cd 87 02			call storage_read_block 
09ce			 
09ce				if DEBUG_STORESE 
09ce					DMARK "AP3" 
09ce f5				push af  
09cf 3a e3 09			ld a, (.dmark)  
09d2 32 65 ee			ld (debug_mark),a  
09d5 3a e4 09			ld a, (.dmark+1)  
09d8 32 66 ee			ld (debug_mark+1),a  
09db 3a e5 09			ld a, (.dmark+2)  
09de 32 67 ee			ld (debug_mark+2),a  
09e1 18 03			jr .pastdmark  
09e3 ..			.dmark: db "AP3"  
09e6 f1			.pastdmark: pop af  
09e7			endm  
# End of macro DMARK
09e7					CALLMONITOR 
09e7 cd 6f ee			call debug_vector  
09ea				endm  
# End of macro CALLMONITOR
09ea				endif 
09ea			;	ld (store_tmppageid), hl 
09ea			 
09ea 3a 76 ea			ld a, (store_page+2) 
09ed 3c				inc a 
09ee 32 76 ea			ld (store_page+2), a 
09f1 32 67 ea			ld (store_tmpext), a 
09f4				 
09f4				if DEBUG_STORESE 
09f4					DMARK "AP3" 
09f4 f5				push af  
09f5 3a 09 0a			ld a, (.dmark)  
09f8 32 65 ee			ld (debug_mark),a  
09fb 3a 0a 0a			ld a, (.dmark+1)  
09fe 32 66 ee			ld (debug_mark+1),a  
0a01 3a 0b 0a			ld a, (.dmark+2)  
0a04 32 67 ee			ld (debug_mark+2),a  
0a07 18 03			jr .pastdmark  
0a09 ..			.dmark: db "AP3"  
0a0c f1			.pastdmark: pop af  
0a0d			endm  
# End of macro DMARK
0a0d					CALLMONITOR 
0a0d cd 6f ee			call debug_vector  
0a10				endm  
# End of macro CALLMONITOR
0a10				endif 
0a10 2a 5f ea			ld hl, (store_tmppageid) 
0a13 11 74 ea			ld de, store_page 
0a16 cd ec 02			call storage_write_block 
0a19			 
0a19				; find free block 
0a19			 
0a19 11 00 00			ld de, 0			 ; file extent to locate 
0a1c			 
0a1c 21 40 00				ld hl, STORE_BLOCK_PHY 
0a1f cd ba 05				call storage_findnextid 
0a22 cd 1e 0e			call ishlzero 
0a25 ca 75 09			jp z, .sa_notfound 
0a28			 
0a28					; TODO handle no space left 
0a28					 
0a28 22 5f ea				ld (store_tmppageid), hl 
0a2b			 
0a2b				if DEBUG_STORESE 
0a2b					DMARK "AP4" 
0a2b f5				push af  
0a2c 3a 40 0a			ld a, (.dmark)  
0a2f 32 65 ee			ld (debug_mark),a  
0a32 3a 41 0a			ld a, (.dmark+1)  
0a35 32 66 ee			ld (debug_mark+1),a  
0a38 3a 42 0a			ld a, (.dmark+2)  
0a3b 32 67 ee			ld (debug_mark+2),a  
0a3e 18 03			jr .pastdmark  
0a40 ..			.dmark: db "AP4"  
0a43 f1			.pastdmark: pop af  
0a44			endm  
# End of macro DMARK
0a44					CALLMONITOR 
0a44 cd 6f ee			call debug_vector  
0a47				endm  
# End of macro CALLMONITOR
0a47				endif 
0a47					; init the buffer with zeros so we can id if the buffer is full or not 
0a47			 
0a47 e5					push hl 
0a48 c5					push bc 
0a49			 
0a49 21 74 ea				ld hl, store_page 
0a4c 06 40				ld b, STORE_BLOCK_PHY 
0a4e 3e 00				ld a, 0 
0a50 77			.zeroblock:	ld (hl), a 
0a51 23					inc hl 
0a52 10 fc				djnz .zeroblock 
0a54			 
0a54 c1					pop bc 
0a55 e1					pop hl 
0a56			 
0a56					; construct block 
0a56			 
0a56 3a 68 ea				ld a, (store_tmpid) 
0a59 32 74 ea				ld (store_page), a   ; file id 
0a5c 3a 67 ea				ld a, (store_tmpext)   ; extent for this block 
0a5f 32 75 ea				ld (store_page+1), a 
0a62			 
0a62 e1					pop hl    ; get string to write 
0a63 06 3e				ld b, STORE_BLOCK_PHY-2       ; exclude count of file id and extent 
0a65 11 76 ea				ld de, store_page+2 
0a68			 
0a68				if DEBUG_STORESE 
0a68					DMARK "AP5" 
0a68 f5				push af  
0a69 3a 7d 0a			ld a, (.dmark)  
0a6c 32 65 ee			ld (debug_mark),a  
0a6f 3a 7e 0a			ld a, (.dmark+1)  
0a72 32 66 ee			ld (debug_mark+1),a  
0a75 3a 7f 0a			ld a, (.dmark+2)  
0a78 32 67 ee			ld (debug_mark+2),a  
0a7b 18 03			jr .pastdmark  
0a7d ..			.dmark: db "AP5"  
0a80 f1			.pastdmark: pop af  
0a81			endm  
# End of macro DMARK
0a81					CALLMONITOR 
0a81 cd 6f ee			call debug_vector  
0a84				endm  
# End of macro CALLMONITOR
0a84				endif 
0a84			 
0a84			 
0a84			 
0a84					; fill buffer with data until end of string or full block 
0a84			 
0a84 7e			.appd:		ld a, (hl) 
0a85 12					ld (de), a 
0a86 fe 00				cp 0 
0a88 28 04				jr z, .appdone 
0a8a 23					inc hl 
0a8b 13					inc de 
0a8c 10 f6				djnz .appd 
0a8e			 
0a8e e5			.appdone:	push hl		 	; save current source in case we need to go around again 
0a8f f5					push af   		; save last byte dumped 
0a90			 
0a90			 
0a90 2a 5f ea			ld hl, (store_tmppageid) 
0a93 11 74 ea			ld de, store_page 
0a96				if DEBUG_STORESE 
0a96					DMARK "AP6" 
0a96 f5				push af  
0a97 3a ab 0a			ld a, (.dmark)  
0a9a 32 65 ee			ld (debug_mark),a  
0a9d 3a ac 0a			ld a, (.dmark+1)  
0aa0 32 66 ee			ld (debug_mark+1),a  
0aa3 3a ad 0a			ld a, (.dmark+2)  
0aa6 32 67 ee			ld (debug_mark+2),a  
0aa9 18 03			jr .pastdmark  
0aab ..			.dmark: db "AP6"  
0aae f1			.pastdmark: pop af  
0aaf			endm  
# End of macro DMARK
0aaf					CALLMONITOR 
0aaf cd 6f ee			call debug_vector  
0ab2				endm  
# End of macro CALLMONITOR
0ab2				endif 
0ab2 cd ec 02				call storage_write_block 
0ab5			 
0ab5			 
0ab5				; was that a full block of data written? 
0ab5				; any more to write out? 
0ab5			 
0ab5				; if yes then set vars and jump to start of function again 
0ab5			 
0ab5 f1					pop af 
0ab6 d1					pop de 
0ab7			 
0ab7 fe 00				cp 0		 ; no, string was fully written 
0ab9 c8					ret z 
0aba			 
0aba					; setup vars for next cycle 
0aba			 
0aba 3a 68 ea				ld a, (store_tmpid) 
0abd 6f					ld l, a 
0abe 26 00				ld h, 0 
0ac0			 
0ac0 c3 77 09			 	jp storage_append	 ; yes, need to write out some more 
0ac3			 
0ac3			 
0ac3			 
0ac3			 
0ac3			 
0ac3			 
0ac3			 
0ac3			if DEBUG_STORECF 
0ac3			storageput:	 
0ac3					ret 
0ac3			storageread: 
0ac3					ld hl, store_page 
0ac3					ld b, 200 
0ac3					ld a,0 
0ac3			.src:		ld (hl),a 
0ac3					inc hl 
0ac3					djnz .src 
0ac3					 
0ac3			 
0ac3					ld de, 0 
0ac3					ld bc, 1 
0ac3					ld hl, store_page 
0ac3					call cfRead 
0ac3			 
0ac3				call cfGetError 
0ac3				ld hl,scratch 
0ac3				call hexout 
0ac3				ld hl, scratch+2 
0ac3				ld a, 0 
0ac3				ld (hl),a 
0ac3				ld de, scratch 
0ac3				ld a,display_row_1 
0ac3				call str_at_display 
0ac3				call update_display 
0ac3			 
0ac3					ld hl, store_page 
0ac3					ld (os_cur_ptr),hl 
0ac3			 
0ac3					ret 
0ac3			endif 
0ac3			 
0ac3			 
0ac3			; Clear out the main buffer store (used to remove junk before writing a new block) 
0ac3			 
0ac3			storage_clear_page: 
0ac3 e5				push hl 
0ac4 d5				push de 
0ac5 c5				push bc 
0ac6 21 74 ea			ld hl, store_page 
0ac9 3e 00			ld a, 0 
0acb 77				ld (hl), a 
0acc			 
0acc 11 75 ea			ld de, store_page+1 
0acf 01 19 01			ld bc, STORE_BLOCK_LOG+1 
0ad2			 
0ad2 ed b0			ldir 
0ad4				 
0ad4 c1				pop bc 
0ad5 d1				pop de 
0ad6 e1				pop hl 
0ad7 c9				ret 
0ad8			 
0ad8			; eof 
# End of file firmware_storage.asm
0ad8			  
0ad8			; support routines for above hardware abstraction layer  
0ad8			  
0ad8			include "firmware_general.asm"        ; general support functions  
0ad8			 
0ad8			; word look up 
0ad8			 
0ad8			; in 
0ad8			; a is the index 
0ad8			; hl is pointer start of array 
0ad8			; 
0ad8			; returns 
0ad8			; hl to the word 
0ad8			; 
0ad8			 
0ad8			table_lookup:  
0ad8 d5					push de 
0ad9 eb					ex de, hl 
0ada			 
0ada 6f					ld l, a 
0adb 26 00				ld h, 0 
0add 29					add hl, hl 
0ade 19					add hl, de 
0adf 7e					ld a, (hl) 
0ae0 23					inc hl 
0ae1 66					ld h,(hl) 
0ae2 6f					ld l, a 
0ae3			 
0ae3 d1					pop de 
0ae4 c9					ret 
0ae5			 
0ae5			; Delay loops 
0ae5			 
0ae5			 
0ae5			 
0ae5			aDelayInMS: 
0ae5 c5				push bc 
0ae6 47				ld b,a 
0ae7			msdelay: 
0ae7 c5				push bc 
0ae8				 
0ae8			 
0ae8 01 41 00			ld bc,041h 
0aeb cd 03 0b			call delayloop 
0aee c1				pop bc 
0aef 05				dec b 
0af0 20 f5			jr nz,msdelay 
0af2			 
0af2			;if CPU_CLOCK_8MHZ 
0af2			;msdelay8: 
0af2			;	push bc 
0af2			;	 
0af2			; 
0af2			;	ld bc,041h 
0af2			;	call delayloop 
0af2			;	pop bc 
0af2			;	dec b 
0af2			;	jr nz,msdelay8 
0af2			;endif 
0af2			 
0af2			 
0af2 c1				pop bc 
0af3 c9				ret 
0af4			 
0af4			 
0af4			delay250ms: 
0af4				;push de 
0af4 01 00 40			ld bc, 04000h 
0af7 c3 03 0b			jp delayloop 
0afa			delay500ms: 
0afa				;push de 
0afa 01 00 80			ld bc, 08000h 
0afd c3 03 0b			jp delayloop 
0b00			delay1s: 
0b00				;push bc 
0b00			   ; Clobbers A, d and e 
0b00 01 00 00		    ld      bc,0      ; # 0ffffh = approx 1s 
0b03			delayloop: 
0b03 c5			    push bc 
0b04			 
0b04			if BASE_CPM 
0b04 01 a0 0f			ld bc, CPM_DELAY_TUNE 
0b07			.cpmloop: 
0b07 c5				push bc 
0b08			 
0b08			endif 
0b08			 
0b08			 
0b08			 
0b08			delayloopi: 
0b08			;	push bc 
0b08			;.dl: 
0b08 cb 47		    bit     0,a    	; 8 
0b0a cb 47		    bit     0,a    	; 8 
0b0c cb 47		    bit     0,a    	; 8 
0b0e e6 ff		    and     255  	; 7 
0b10 0b			    dec     bc      	; 6 
0b11 79			    ld      a,c     	; 4 
0b12 b0			    or      b     	; 4 
0b13 c2 08 0b		    jp      nz,delayloopi   	; 10, total = 55 states/iteration 
0b16			    ; 65536 iterations * 55 states = 3604480 states = 2.00248 seconds 
0b16				;pop de 
0b16			;pop bc 
0b16			 
0b16			if BASE_CPM 
0b16 c1				pop bc 
0b17				 
0b17 0b			    dec     bc      	; 6 
0b18 79			    ld      a,c     	; 4 
0b19 b0			    or      b     	; 4 
0b1a c2 07 0b		    jp      nz,.cpmloop   	; 10, total = 55 states/iteration 
0b1d				 
0b1d			 
0b1d			endif 
0b1d			;if CPU_CLOCK_8MHZ 
0b1d			;    pop bc 
0b1d			;    push bc 
0b1d			;.dl8: 
0b1d			;    bit     0,a    	; 8 
0b1d			;    bit     0,a    	; 8 
0b1d			;    bit     0,a    	; 8 
0b1d			;    and     255  	; 7 
0b1d			;    dec     bc      	; 6 
0b1d			;    ld      a,c     	; 4 
0b1d			;    or      b     	; 4 
0b1d			;    jp      nz,.dl8   	; 10, total = 55 states/iteration 
0b1d			;endif 
0b1d			 
0b1d			;if CPU_CLOCK_10MHZ 
0b1d			;    pop bc 
0b1d			;    push bc 
0b1d			;.dl8: 
0b1d			;    bit     0,a    	; 8 
0b1d			;    bit     0,a    	; 8 
0b1d			;    bit     0,a    	; 8 
0b1d			;    and     255  	; 7 
0b1d			;    dec     bc      	; 6 
0b1d			;    ld      a,c     	; 4 
0b1d			;    or      b     	; 4 
0b1d			;    jp      nz,.dl8   	; 10, total = 55 states/iteration 
0b1d			;endif 
0b1d c1			    pop bc 
0b1e			 
0b1e c9				ret 
0b1f			 
0b1f			 
0b1f			 
0b1f			; eof 
# End of file firmware_general.asm
0b1f			include "firmware_display.asm"      ; frame buffer screen abstraction layer  
0b1f			; display routines that use the physical hardware abstraction layer 
0b1f			 
0b1f			 
0b1f			; Display an activity indicator 
0b1f			; Each call returns the new char pointed to in hl 
0b1f			 
0b1f			active: 
0b1f 3a c0 eb			ld a, (display_active) 
0b22 fe 06			cp 6 
0b24			 
0b24 20 02			jr nz, .sne 
0b26				; gone past the last one reset sequence 
0b26 3e ff			ld a, 255 
0b28			 
0b28			.sne:   
0b28				; get the next char in seq 
0b28 3c				inc a 
0b29 32 c0 eb			ld (display_active), a 
0b2c			 
0b2c				; look up the string in the table 
0b2c 21 43 0b			ld hl, actseq 
0b2f cb 27			sla a 
0b31 cd f5 0d			call addatohl 
0b34 cd 03 1f			call loadwordinhl 
0b37			 
0b37				; forth will write the to string when pushing so move from rom to ram 
0b37			 
0b37 11 c1 eb			ld de, display_active+1 
0b3a 01 02 00			ld bc, 2 
0b3d ed b0			ldir 
0b3f			 
0b3f 21 c1 eb			ld hl, display_active+1 
0b42 c9				ret 
0b43				 
0b43				 
0b43			 
0b43			 
0b43			;db "|/-\|-\" 
0b43			 
0b43			actseq: 
0b43			 
0b43 51 0b		dw spin0 
0b45 53 0b		dw spin1 
0b47 55 0b		dw spin2 
0b49 57 0b		dw spin3 
0b4b 55 0b		dw spin2 
0b4d 53 0b		dw spin1 
0b4f 51 0b		dw spin0 
0b51			 
0b51 .. 00		spin0: db " ", 0 
0b53 .. 00		spin1: db "-", 0 
0b55 .. 00		spin2: db "+", 0 
0b57 .. 00		spin3: db "#", 0 
0b59			 
0b59			 
0b59			; information window 
0b59			 
0b59			; pass hl with 1st string to display 
0b59			; pass de with 2nd string to display 
0b59			 
0b59			info_panel: 
0b59 e5				push hl 
0b5a			 
0b5a 2a c6 eb			ld hl, (display_fb_active) 
0b5d e5				push hl    ; future de destination 
0b5e 21 ab ed				ld hl, display_fb0 
0b61 22 c6 eb				ld (display_fb_active), hl 
0b64			 
0b64			;	call clear_display 
0b64			 
0b64				if BASE_CPM 
0b64 3e 2e			ld a, '.' 
0b66				else 
0b66				ld a, 165 
0b66				endif 
0b66 cd cd 0b			call fill_display 
0b69			 
0b69			 
0b69 3e 55			ld a, display_row_3 + 5 
0b6b cd db 0b			call str_at_display 
0b6e			 
0b6e e1				pop hl 
0b6f d1				pop de 
0b70			 
0b70 e5				push hl 
0b71			 
0b71			 
0b71 3e 2d			ld a, display_row_2 + 5 
0b73 cd db 0b			call str_at_display 
0b76			 
0b76			 
0b76 cd eb 0b			call update_display 
0b79 cd 08 1b			call next_page_prompt 
0b7c cd c8 0b			call clear_display 
0b7f			 
0b7f				 
0b7f 21 0a ed				ld hl, display_fb1 
0b82 22 c6 eb				ld (display_fb_active), hl 
0b85 cd eb 0b			call update_display 
0b88			 
0b88 e1				pop hl 
0b89			 
0b89 c9				ret 
0b8a			 
0b8a			 
0b8a			 
0b8a			 
0b8a			; TODO windowing? 
0b8a			 
0b8a			; TODO scroll line up 
0b8a			 
0b8a			scroll_up: 
0b8a			 
0b8a e5				push hl 
0b8b d5				push de 
0b8c c5				push bc 
0b8d			 
0b8d				; get frame buffer  
0b8d			 
0b8d 2a c6 eb			ld hl, (display_fb_active) 
0b90 e5				push hl    ; future de destination 
0b91			 
0b91 11 28 00			ld  de, display_cols 
0b94 19				add hl, de 
0b95			 
0b95 d1				pop de 
0b96			 
0b96				;ex de, hl 
0b96 01 9f 00			ld bc, display_fb_len -1  
0b99			;if DEBUG_FORTH_WORDS 
0b99			;	DMARK "SCL" 
0b99			;	CALLMONITOR 
0b99			;endif	 
0b99 ed b0			ldir 
0b9b			 
0b9b				; wipe bottom row 
0b9b			 
0b9b			 
0b9b 2a c6 eb			ld hl, (display_fb_active) 
0b9e 11 a0 00			ld de, display_cols*display_rows 
0ba1 19				add hl, de 
0ba2 06 28			ld b, display_cols 
0ba4 3e 20			ld a, ' ' 
0ba6			.scwipe: 
0ba6 77				ld (hl), a 
0ba7 2b				dec hl 
0ba8 10 fc			djnz .scwipe 
0baa			 
0baa				;pop hl 
0baa			 
0baa c1				pop bc 
0bab d1				pop de 
0bac e1				pop hl 
0bad			 
0bad c9				ret 
0bae			 
0bae			 
0bae			;scroll_upo: 
0bae			;	ld de, display_row_1 
0bae			 ;	ld hl, display_row_2 
0bae			;	ld bc, display_cols 
0bae			;	ldir 
0bae			;	ld de, display_row_2 
0bae			 ;	ld hl, display_row_3 
0bae			;	ld bc, display_cols 
0bae			;	ldir 
0bae			;	ld de, display_row_3 
0bae			 ;	ld hl, display_row_4 
0bae			;	ld bc, display_cols 
0bae			;	ldir 
0bae			 
0bae			; TODO clear row 4 
0bae			 
0bae			;	ret 
0bae			 
0bae				 
0bae			scroll_down: 
0bae			 
0bae e5				push hl 
0baf d5				push de 
0bb0 c5				push bc 
0bb1			 
0bb1				; get frame buffer  
0bb1			 
0bb1 2a c6 eb			ld hl, (display_fb_active) 
0bb4			 
0bb4 11 9f 00			ld de, display_fb_len - 1 
0bb7 19				add hl, de 
0bb8			 
0bb8 e5			push hl    ; future de destination 
0bb9			 
0bb9 11 28 00			ld  de, display_cols 
0bbc ed 52			sbc hl, de 
0bbe			 
0bbe			 
0bbe d1				pop de 
0bbf			 
0bbf			;	ex de, hl 
0bbf 01 9f 00			ld bc, display_fb_len -1  
0bc2			 
0bc2			 
0bc2				 
0bc2			 
0bc2 ed b0			ldir 
0bc4			 
0bc4				; wipe bottom row 
0bc4			 
0bc4			 
0bc4			;	ld hl, (display_fb_active) 
0bc4			;;	ld de, display_cols*display_rows 
0bc4			;;	add hl, de 
0bc4			;	ld b, display_cols 
0bc4			;	ld a, ' ' 
0bc4			;.scwiped: 
0bc4			;	ld (hl), a 
0bc4			;	dec hl 
0bc4			;	djnz .scwiped 
0bc4			 
0bc4				;pop hl 
0bc4			 
0bc4 c1				pop bc 
0bc5 d1				pop de 
0bc6 e1				pop hl 
0bc7			 
0bc7 c9				ret 
0bc8			;scroll_down: 
0bc8			;	ld de, display_row_4 
0bc8			;	ld hl, display_row_3 
0bc8			;	ld bc, display_cols 
0bc8			;	ldir 
0bc8			;	ld de, display_row_3 
0bc8			; 	ld hl, display_row_2 
0bc8			;	ld bc, display_cols 
0bc8			;	ldir 
0bc8			;	ld de, display_row_2 
0bc8			;	ld hl, display_row_1 
0bc8			;	ld bc, display_cols 
0bc8			;	ldir 
0bc8			;;; TODO clear row 1 
0bc8			;	ret 
0bc8			 
0bc8			 
0bc8			 
0bc8			 
0bc8			 
0bc8			; clear active frame buffer 
0bc8			 
0bc8			clear_display: 
0bc8 3e 20			ld a, ' ' 
0bca c3 cd 0b			jp fill_display 
0bcd			 
0bcd			; fill active frame buffer with a char in A 
0bcd			 
0bcd			fill_display: 
0bcd 06 a0			ld b,display_fb_len 
0bcf 2a c6 eb			ld hl, (display_fb_active) 
0bd2 77			.fd1:	ld (hl),a 
0bd3 23				inc hl 
0bd4 10 fc			djnz .fd1 
0bd6 23				inc hl 
0bd7 3e 00			ld a,0 
0bd9 77				ld (hl),a 
0bda			 
0bda			 
0bda c9				ret 
0bdb			; Write string (DE) at pos (A) to active frame buffer 
0bdb			 
0bdb 2a c6 eb		str_at_display:    ld hl,(display_fb_active) 
0bde 06 00					ld b,0 
0be0 4f					ld c,a 
0be1 09					add hl,bc 
0be2 1a			.sad1: 		LD   A, (DE)        ;Get character from string 
0be3 b7			            OR   A              ;Null terminator? 
0be4 c8			            RET  Z              ;Yes, so finished 
0be5 77					ld (hl),a 
0be6 23				inc hl 
0be7 13			            INC  DE             ;Point to next character 
0be8 18 f8		            JR   .sad1     ;Repeat 
0bea c9					ret 
0beb			 
0beb			; using current frame buffer write to physical display 
0beb			 
0beb			update_display: 
0beb e5				push hl 
0bec 2a c6 eb			ld hl, (display_fb_active) 
0bef cd 81 60			call write_display 
0bf2 e1				pop hl 
0bf3 c9				ret 
0bf4			 
0bf4			; TODO scrolling 
0bf4			 
0bf4			 
0bf4			; move cursor right one char 
0bf4			cursor_right: 
0bf4			 
0bf4				; TODO shift right 
0bf4				; TODO if beyond max col 
0bf4				; TODO       cursor_next_line 
0bf4			 
0bf4 c9				ret 
0bf5			 
0bf5			 
0bf5			cursor_next_line: 
0bf5				; TODO first char 
0bf5				; TODO line down 
0bf5				; TODO if past last row 
0bf5				; TODO    scroll up 
0bf5			 
0bf5 c9				ret 
0bf6			 
0bf6			cursor_left: 
0bf6				; TODO shift left 
0bf6				; TODO if beyond left  
0bf6				; TODO     cursor prev line 
0bf6				 
0bf6 c9				ret 
0bf7			 
0bf7			cursor_prev_line: 
0bf7				; TODO last char 
0bf7				; TODO line up 
0bf7				; TODO if past first row 
0bf7				; TODO   scroll down 
0bf7			 
0bf7 c9				ret 
0bf8			 
0bf8			 
0bf8			cout: 
0bf8				; A - char 
0bf8 c9				ret 
0bf9			 
0bf9			 
0bf9			; Display a menu and allow item selection (optional toggle items) 
0bf9			; 
0bf9			; format: 
0bf9			; hl pointer to word array with zero term for items 
0bf9			; e.g.    db item1 
0bf9			;         db .... 
0bf9			;         db 0 
0bf9			; 
0bf9			; a = starting menu item  
0bf9			; 
0bf9			; de = pointer item toggle array   (todo) 
0bf9			; 
0bf9			; returns item selected in a 1-... 
0bf9			; returns 0 if back button pressed 
0bf9			; 
0bf9			; NOTE: Uses system frame buffer to display 
0bf9			; 
0bf9			; LEFT, Q = go back 
0bf9			; RIGHT, SPACE, CR = select 
0bf9			; UP, A - Up 
0bf9			; DOWN, Z - Down 
0bf9			 
0bf9			 
0bf9			 
0bf9			 
0bf9			 
0bf9			menu: 
0bf9			 
0bf9					; keep array pointer 
0bf9			 
0bf9 22 6d ea				ld (store_tmp1), hl 
0bfc 32 6b ea				ld (store_tmp2), a 
0bff			 
0bff					; check for key bounce 
0bff			 
0bff			if BASE_KEV 
0bff			 
0bff			.mbounce:	call cin 
0bff					cp 0 
0bff					jr nz, .mbounce 
0bff			endif 
0bff					; for ease use ex 
0bff			 
0bff					; use menu on fb0 so as not to disrupt user screens ie a menu popup 
0bff 21 ab ed				ld hl, display_fb0 
0c02 22 c6 eb				ld (display_fb_active), hl 
0c05			 
0c05 cd c8 0b		.mloop:		call clear_display 
0c08 cd eb 0b				call update_display 
0c0b			 
0c0b					; draw selection id '>' at 1 
0c0b			 
0c0b					; init start of list display 
0c0b			 
0c0b 3e 05				ld a, 5 
0c0d 32 69 ea				ld (store_tmp3), a   ; display row count 
0c10 3a 6b ea				ld a,( store_tmp2) 
0c13 32 6c ea				ld (store_tmp2+1), a   ; display item count 
0c16			 
0c16					 
0c16			.mitem:	 
0c16			 
0c16			 
0c16 3a 6c ea				ld a,(store_tmp2+1) 
0c19 6f					ld l, a 
0c1a 26 00				ld h, 0 
0c1c 29					add hl, hl 
0c1d ed 5b 6d ea			ld de, (store_tmp1) 
0c21 19					add hl, de 
0c22 7e					ld a, (hl) 
0c23 23					inc hl 
0c24 66					ld h,(hl) 
0c25 6f					ld l, a 
0c26			 
0c26 cd 1e 0e				call ishlzero 
0c29 28 1a				jr z, .mdone 
0c2b			 
0c2b eb					ex de, hl 
0c2c 3a 69 ea				ld a, (store_tmp3) 
0c2f cd db 0b				call str_at_display 
0c32					 
0c32			 
0c32					; next item 
0c32 3a 6c ea				ld a, (store_tmp2+1) 
0c35 3c					inc a 
0c36 32 6c ea				ld (store_tmp2+1), a   ; display item count 
0c39			 
0c39			 		; next row 
0c39			 
0c39 3a 69 ea				ld a, (store_tmp3) 
0c3c c6 28				add display_cols 
0c3e 32 69 ea				ld (store_tmp3), a 
0c41			 
0c41					; at end of screen? 
0c41			 
0c41 fe 10				cp display_rows*4 
0c43 20 d1				jr nz, .mitem 
0c45			 
0c45			 
0c45			.mdone: 
0c45 cd 1e 0e				call ishlzero 
0c48 28 08				jr z, .nodn 
0c4a			 
0c4a 3e 78				ld a, display_row_4 
0c4c 11 cb 0c				ld de, .mdown 
0c4f cd db 0b				call str_at_display 
0c52			 
0c52					; draw options to fill the screens with active item on line 1 
0c52					; if current option is 2 or more then display ^ in top 
0c52			 
0c52 3a 6b ea		.nodn:		ld a, (store_tmp2) 
0c55 fe 00				cp 0 
0c57 28 08				jr z, .noup 
0c59			 
0c59 3e 00				ld a, 0 
0c5b 11 c9 0c				ld de, .mup 
0c5e cd db 0b				call str_at_display 
0c61			 
0c61 3e 02		.noup:		ld a, 2 
0c63 11 c7 0c				ld de, .msel 
0c66 cd db 0b				call str_at_display 
0c69			 
0c69					; if current option + 1 is not null then display V in bottom 
0c69					; get key 
0c69 cd eb 0b				call update_display 
0c6c			 
0c6c			 
0c6c					; handle key 
0c6c			 
0c6c cd 33 61				call cin_wait 
0c6f			 
0c6f fe 05				cp KEY_UP 
0c71 28 2b				jr z, .mgoup 
0c73 fe 61				cp 'a' 
0c75 28 27				jr z, .mgoup 
0c77 fe 0a				cp KEY_DOWN 
0c79 28 32				jr z, .mgod 
0c7b fe 7a				cp 'z' 
0c7d 28 2e				jr z, .mgod 
0c7f fe 20				cp ' ' 
0c81 28 34				jr z, .goend 
0c83 fe 0c				cp KEY_RIGHT 
0c85 28 30				jr z, .goend 
0c87 fe 0d				cp KEY_CR 
0c89 28 2c				jr z, .goend 
0c8b fe 71				cp 'q' 
0c8d 28 0b				jr z, .goback 
0c8f			 
0c8f fe 0b				cp KEY_LEFT 
0c91 28 07				jr z, .goback 
0c93 fe 08				cp KEY_BS 
0c95 28 03				jr z, .goback 
0c97 c3 05 0c				jp .mloop 
0c9a			 
0c9a			.goback: 
0c9a 3e 00			ld a, 0 
0c9c 18 1d			jr .goend2 
0c9e			 
0c9e				; move up one 
0c9e			.mgoup: 
0c9e 3a 6b ea				ld a, (store_tmp2) 
0ca1 fe 00				cp 0 
0ca3 ca 05 0c				jp z, .mloop 
0ca6 3d					dec a 
0ca7 32 6b ea				ld (store_tmp2), a 
0caa c3 05 0c				jp .mloop 
0cad			 
0cad				; move down one 
0cad			.mgod: 
0cad 3a 6b ea				ld a, (store_tmp2) 
0cb0 3c					inc a 
0cb1 32 6b ea				ld (store_tmp2), a 
0cb4 c3 05 0c				jp .mloop 
0cb7			 
0cb7			 
0cb7			.goend: 
0cb7					; get selected item number 
0cb7			 
0cb7 3a 6b ea				ld a, (store_tmp2) 
0cba 3c					inc a 
0cbb			 
0cbb			.goend2: 
0cbb f5					push af 
0cbc			 
0cbc					; restore active fb 
0cbc					; TODO BUG assumes fb1 
0cbc			 
0cbc 21 0a ed				ld hl, display_fb1 
0cbf 22 c6 eb				ld (display_fb_active), hl 
0cc2			 
0cc2					; restore main regs 
0cc2			 
0cc2			 
0cc2 cd eb 0b				call update_display 
0cc5			 
0cc5 f1					pop af 
0cc6			 
0cc6 c9				ret 
0cc7			 
0cc7 .. 00		.msel:   db ">",0 
0cc9 .. 00		.mup:   db "^",0 
0ccb .. 00		.mdown:   db "v",0 
0ccd			 
0ccd			 
0ccd			; eof 
0ccd			 
# End of file firmware_display.asm
0ccd			include "firmware_maths.asm"     ; any odd maths stuff   TODO removed until I fix up the rng code  
0ccd			; random number generators 
0ccd			 
0ccd			 
0ccd			; https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random 
0ccd			 
0ccd			 
0ccd			;-----> Generate a random number 
0ccd			; output a=answer 0<=a<=255 
0ccd			; all registers are preserved except: af 
0ccd			random: 
0ccd e5			        push    hl 
0cce d5			        push    de 
0ccf 2a a5 eb		        ld      hl,(randData) 
0cd2 ed 5f		        ld      a,r 
0cd4 57			        ld      d,a 
0cd5 5e			        ld      e,(hl) 
0cd6 19			        add     hl,de 
0cd7 85			        add     a,l 
0cd8 ac			        xor     h 
0cd9 22 a5 eb		        ld      (randData),hl 
0cdc d1			        pop     de 
0cdd e1			        pop     hl 
0cde c9			        ret 
0cdf			 
0cdf			 
0cdf			; randData here must be a 2 byte seed located in ram. While this is a fast generator, it's generally not considered very good in terms of randomness. 
0cdf			 
0cdf			 
0cdf			 
0cdf			;------LFSR------ 
0cdf			;James Montelongo 
0cdf			;optimized by Spencer Putt 
0cdf			;out: 
0cdf			; a = 8 bit random number 
0cdf			RandLFSR: 
0cdf 21 ab eb		        ld hl,LFSRSeed+4 
0ce2 5e			        ld e,(hl) 
0ce3 23			        inc hl 
0ce4 56			        ld d,(hl) 
0ce5 23			        inc hl 
0ce6 4e			        ld c,(hl) 
0ce7 23			        inc hl 
0ce8 7e			        ld a,(hl) 
0ce9 47			        ld b,a 
0cea cb 13		        rl e  
0cec cb 12			rl d 
0cee cb 11		        rl c  
0cf0 17				rla 
0cf1 cb 13		        rl e  
0cf3 cb 12			rl d 
0cf5 cb 11		        rl c  
0cf7 17				rla 
0cf8 cb 13		        rl e  
0cfa cb 12			rl d 
0cfc cb 11		        rl c  
0cfe 17				rla 
0cff 67			        ld h,a 
0d00 cb 13		        rl e  
0d02 cb 12			rl d 
0d04 cb 11		        rl c  
0d06 17				rla 
0d07 a8			        xor b 
0d08 cb 13		        rl e  
0d0a cb 12			rl d 
0d0c ac			        xor h 
0d0d a9			        xor c 
0d0e aa			        xor d 
0d0f 21 ad eb		        ld hl,LFSRSeed+6 
0d12 11 ae eb		        ld de,LFSRSeed+7 
0d15 01 07 00		        ld bc,7 
0d18 ed b8		        lddr 
0d1a 12			        ld (de),a 
0d1b c9			        ret 
0d1c			 
0d1c			;While this may produces better numbers, it is slower, larger and requires a bigger seed than ionrandom. Assuming theres is a good seed to start, it should generate ~2^56 bytes before repeating. However if there is not a good seed(0 for example), then the numbers created will not be adequate. Unlike Ionrandom and its use of the r register, starting with the same seed the same numbers will be generated. With Ionrandom the code running may have an impact on the number generated. This means this method requires more initialization. 
0d1c			 
0d1c			;You can initialize with TI-OS's seeds, stored at seed1 and seed2, both are ti-floats but will serve the purpose.  
0d1c			 
0d1c			 
0d1c			;This is a very fast, quality pseudo-random number generator. It combines a 16-bit Linear Feedback Shift Register and a 16-bit LCG. 
0d1c			 
0d1c			prng16: 
0d1c			;Inputs: 
0d1c			;   (seed1) contains a 16-bit seed value 
0d1c			;   (seed2) contains a NON-ZERO 16-bit seed value 
0d1c			;Outputs: 
0d1c			;   HL is the result 
0d1c			;   BC is the result of the LCG, so not that great of quality 
0d1c			;   DE is preserved 
0d1c			;Destroys: 
0d1c			;   AF 
0d1c			;cycle: 4,294,901,760 (almost 4.3 billion) 
0d1c			;160cc 
0d1c			;26 bytes 
0d1c 2a 9f eb		    ld hl,(seed1) 
0d1f 44			    ld b,h 
0d20 4d			    ld c,l 
0d21 29			    add hl,hl 
0d22 29			    add hl,hl 
0d23 2c			    inc l 
0d24 09			    add hl,bc 
0d25 22 9f eb		    ld (seed1),hl 
0d28 2a 9d eb		    ld hl,(seed2) 
0d2b 29			    add hl,hl 
0d2c 9f			    sbc a,a 
0d2d e6 2d		    and %00101101 
0d2f ad			    xor l 
0d30 6f			    ld l,a 
0d31 22 9d eb		    ld (seed2),hl 
0d34 09			    add hl,bc 
0d35 c9			    ret 
0d36			 
0d36			;On their own, LCGs and LFSRs don't produce great results and are generally very cyclical, but they are very fast to compute. The 16-bit LCG in the above example will bounce around and reach each number from 0 to 65535, but the lower bits are far more predictable than the upper bits. The LFSR mixes up the predictability of a given bit's state, but it hits every number except 0, meaning there is a slightly higher chance of any given bit in the result being a 1 instead of a 0. It turns out that by adding together the outputs of these two generators, we can lose the predictability of a bit's state, while ensuring it has a 50% chance of being 0 or 1. As well, since the periods, 65536 and 65535 are coprime, then the overall period of the generator is 65535*65536, which is over 4 billion.  
0d36			 
0d36			rand32: 
0d36			;Inputs: 
0d36			;   (seed1_0) holds the lower 16 bits of the first seed 
0d36			;   (seed1_1) holds the upper 16 bits of the first seed 
0d36			;   (seed2_0) holds the lower 16 bits of the second seed 
0d36			;   (seed2_1) holds the upper 16 bits of the second seed 
0d36			;   **NOTE: seed2 must be non-zero 
0d36			;Outputs: 
0d36			;   HL is the result 
0d36			;   BC,DE can be used as lower quality values, but are not independent of HL. 
0d36			;Destroys: 
0d36			;   AF 
0d36			;Tested and passes all CAcert tests 
0d36			;Uses a very simple 32-bit LCG and 32-bit LFSR 
0d36			;it has a period of 18,446,744,069,414,584,320 
0d36			;roughly 18.4 quintillion. 
0d36			;LFSR taps: 0,2,6,7  = 11000101 
0d36			;291cc 
0d36			;seed1_0=$+1 
0d36			;    ld hl,12345 
0d36			;seed1_1=$+1 
0d36			;    ld de,6789 
0d36			;    ld b,h 
0d36			;    ld c,l 
0d36			;    add hl,hl \ rl e \ rl d 
0d36			;    add hl,hl \ rl e \ rl d 
0d36			;    inc l 
0d36			;    add hl,bc 
0d36			;    ld (seed1_0),hl 
0d36			;    ld hl,(seed1_1) 
0d36			;    adc hl,de 
0d36			;    ld (seed1_1),hl 
0d36			;    ex de,hl 
0d36			;seed2_0=$+1 
0d36			;    ld hl,9876 
0d36			;seed2_1=$+1 
0d36			;    ld bc,54321 
0d36			;    add hl,hl \ rl c \ rl b 
0d36			;    ld (seed2_1),bc 
0d36			;    sbc a,a 
0d36			;    and %11000101 
0d36			;    xor l 
0d36			;    ld l,a 
0d36			;    ld (seed2_0),hl 
0d36			;    ex de,hl 
0d36			;    add hl,bc 
0d36			;    ret 
0d36			; 
0d36			 
0d36			; 16-bit xorshift pseudorandom number generator by John Metcalf 
0d36			; 20 bytes, 86 cycles (excluding ret) 
0d36			 
0d36			; returns   hl = pseudorandom number 
0d36			; corrupts   a 
0d36			 
0d36			; generates 16-bit pseudorandom numbers with a period of 65535 
0d36			; using the xorshift method: 
0d36			 
0d36			; hl ^= hl << 7 
0d36			; hl ^= hl >> 9 
0d36			; hl ^= hl << 8 
0d36			 
0d36			; some alternative shift triplets which also perform well are: 
0d36			; 6, 7, 13; 7, 9, 13; 9, 7, 13. 
0d36			 
0d36			;  org 32768 
0d36			 
0d36			xrnd: 
0d36 2a a3 eb		  ld hl,(xrandc)       ; seed must not be 0 
0d39 3e 00		  ld a,0 
0d3b bd			  cp l 
0d3c 20 02		  jr nz, .xrnd1 
0d3e 2e 01		  ld l, 1 
0d40			.xrnd1: 
0d40			 
0d40 7c			  ld a,h 
0d41 1f			  rra 
0d42 7d			  ld a,l 
0d43 1f			  rra 
0d44 ac			  xor h 
0d45 67			  ld h,a 
0d46 7d			  ld a,l 
0d47 1f			  rra 
0d48 7c			  ld a,h 
0d49 1f			  rra 
0d4a ad			  xor l 
0d4b 6f			  ld l,a 
0d4c ac			  xor h 
0d4d 67			  ld h,a 
0d4e			 
0d4e 22 a3 eb		  ld (xrandc),hl 
0d51			 
0d51 c9			  ret 
0d52			;  
0d52			 
0d52			 
0d52			;;;; int maths 
0d52			 
0d52			; https://map.grauw.nl/articles/mult_div_shifts.php 
0d52			; Divide 16-bit values (with 16-bit result) 
0d52			; In: Divide BC by divider DE 
0d52			; Out: BC = result, HL = rest 
0d52			; 
0d52			Div16: 
0d52 21 00 00		    ld hl,0 
0d55 78			    ld a,b 
0d56 06 08		    ld b,8 
0d58			Div16_Loop1: 
0d58 17			    rla 
0d59 ed 6a		    adc hl,hl 
0d5b ed 52		    sbc hl,de 
0d5d 30 01		    jr nc,Div16_NoAdd1 
0d5f 19			    add hl,de 
0d60			Div16_NoAdd1: 
0d60 10 f6		    djnz Div16_Loop1 
0d62 17			    rla 
0d63 2f			    cpl 
0d64 47			    ld b,a 
0d65 79			    ld a,c 
0d66 48			    ld c,b 
0d67 06 08		    ld b,8 
0d69			Div16_Loop2: 
0d69 17			    rla 
0d6a ed 6a		    adc hl,hl 
0d6c ed 52		    sbc hl,de 
0d6e 30 01		    jr nc,Div16_NoAdd2 
0d70 19			    add hl,de 
0d71			Div16_NoAdd2: 
0d71 10 f6		    djnz Div16_Loop2 
0d73 17			    rla 
0d74 2f			    cpl 
0d75 41			    ld b,c 
0d76 4f			    ld c,a 
0d77 c9			ret 
0d78			 
0d78			 
0d78			;http://z80-heaven.wikidot.com/math 
0d78			; 
0d78			;Inputs: 
0d78			;     DE and A are factors 
0d78			;Outputs: 
0d78			;     A is not changed 
0d78			;     B is 0 
0d78			;     C is not changed 
0d78			;     DE is not changed 
0d78			;     HL is the product 
0d78			;Time: 
0d78			;     342+6x 
0d78			; 
0d78			Mult16: 
0d78			 
0d78 06 08		     ld b,8          ;7           7 
0d7a 21 00 00		     ld hl,0         ;10         10 
0d7d 29			       add hl,hl     ;11*8       88 
0d7e 07			       rlca          ;4*8        32 
0d7f 30 01		       jr nc,$+3     ;(12|18)*8  96+6x 
0d81 19			         add hl,de   ;--         -- 
0d82 10 f9		       djnz $-5      ;13*7+8     99 
0d84 c9			ret 
0d85			 
0d85			; 
0d85			; Square root of 16-bit value 
0d85			; In:  HL = value 
0d85			; Out:  D = result (rounded down) 
0d85			; 
0d85			;Sqr16: 
0d85			;    ld de,#0040 
0d85			;    ld a,l 
0d85			;    ld l,h 
0d85			;    ld h,d 
0d85			;    or a 
0d85			;    ld b,8 
0d85			;Sqr16_Loop: 
0d85			;    sbc hl,de 
0d85			;    jr nc,Sqr16_Skip 
0d85			;    add hl,de 
0d85			;Sqr16_Skip: 
0d85			;    ccf 
0d85			;    rl d 
0d85			;    add a,a 
0d85			;    adc hl,hl 
0d85			;    add a,a 
0d85			;    adc hl,hl 
0d85			;    djnz Sqr16_Loop 
0d85			;    ret 
0d85			; 
0d85			; 
0d85			; Divide 8-bit values 
0d85			; In: Divide E by divider C 
0d85			; Out: A = result, B = rest 
0d85			; 
0d85			Div8: 
0d85 af			    xor a 
0d86 06 08		    ld b,8 
0d88			Div8_Loop: 
0d88 cb 13		    rl e 
0d8a 17			    rla 
0d8b 91			    sub c 
0d8c 30 01		    jr nc,Div8_NoAdd 
0d8e 81			    add a,c 
0d8f			Div8_NoAdd: 
0d8f 10 f7		    djnz Div8_Loop 
0d91 47			    ld b,a 
0d92 7b			    ld a,e 
0d93 17			    rla 
0d94 2f			    cpl 
0d95 c9			    ret 
0d96			 
0d96			; 
0d96			; Multiply 8-bit value with a 16-bit value (unrolled) 
0d96			; In: Multiply A with DE 
0d96			; Out: HL = result 
0d96			; 
0d96			Mult12U: 
0d96 2e 00		    ld l,0 
0d98 87			    add a,a 
0d99 30 01		    jr nc,Mult12U_NoAdd0 
0d9b 19			    add hl,de 
0d9c			Mult12U_NoAdd0: 
0d9c 29			    add hl,hl 
0d9d 87			    add a,a 
0d9e 30 01		    jr nc,Mult12U_NoAdd1 
0da0 19			    add hl,de 
0da1			Mult12U_NoAdd1: 
0da1 29			    add hl,hl 
0da2 87			    add a,a 
0da3 30 01		    jr nc,Mult12U_NoAdd2 
0da5 19			    add hl,de 
0da6			Mult12U_NoAdd2: 
0da6 29			    add hl,hl 
0da7 87			    add a,a 
0da8 30 01		    jr nc,Mult12U_NoAdd3 
0daa 19			    add hl,de 
0dab			Mult12U_NoAdd3: 
0dab 29			    add hl,hl 
0dac 87			    add a,a 
0dad 30 01		    jr nc,Mult12U_NoAdd4 
0daf 19			    add hl,de 
0db0			Mult12U_NoAdd4: 
0db0 29			    add hl,hl 
0db1 87			    add a,a 
0db2 30 01		    jr nc,Mult12U_NoAdd5 
0db4 19			    add hl,de 
0db5			Mult12U_NoAdd5: 
0db5 29			    add hl,hl 
0db6 87			    add a,a 
0db7 30 01		    jr nc,Mult12U_NoAdd6 
0db9 19			    add hl,de 
0dba			Mult12U_NoAdd6: 
0dba 29			    add hl,hl 
0dbb 87			    add a,a 
0dbc d0			    ret nc 
0dbd 19			    add hl,de 
0dbe c9			    ret 
0dbf			 
0dbf			; 
0dbf			; Multiply 8-bit value with a 16-bit value (right rotating) 
0dbf			; In: Multiply A with DE 
0dbf			;      Put lowest value in A for most efficient calculation 
0dbf			; Out: HL = result 
0dbf			; 
0dbf			Mult12R: 
0dbf 21 00 00		    ld hl,0 
0dc2			Mult12R_Loop: 
0dc2 cb 3f		    srl a 
0dc4 30 01		    jr nc,Mult12R_NoAdd 
0dc6 19			    add hl,de 
0dc7			Mult12R_NoAdd: 
0dc7 cb 23		    sla e 
0dc9 cb 12		    rl d 
0dcb b7			    or a 
0dcc c2 c2 0d		    jp nz,Mult12R_Loop 
0dcf c9			    ret 
0dd0			 
0dd0			; 
0dd0			; Multiply 16-bit values (with 32-bit result) 
0dd0			; In: Multiply BC with DE 
0dd0			; Out: BCHL = result 
0dd0			; 
0dd0			Mult32: 
0dd0 79			    ld a,c 
0dd1 48			    ld c,b 
0dd2 21 00 00		    ld hl,0 
0dd5 06 10		    ld b,16 
0dd7			Mult32_Loop: 
0dd7 29			    add hl,hl 
0dd8 17			    rla 
0dd9 cb 11		    rl c 
0ddb 30 07		    jr nc,Mult32_NoAdd 
0ddd 19			    add hl,de 
0dde ce 00		    adc a,0 
0de0 d2 e4 0d		    jp nc,Mult32_NoAdd 
0de3 0c			    inc c 
0de4			Mult32_NoAdd: 
0de4 10 f1		    djnz Mult32_Loop 
0de6 41			    ld b,c 
0de7 4f			    ld c,a 
0de8 c9			    ret 
0de9			 
0de9			 
0de9			 
0de9			; 
0de9			; Multiply 8-bit values 
0de9			; In:  Multiply H with E 
0de9			; Out: HL = result 
0de9			; 
0de9			Mult8: 
0de9 16 00		    ld d,0 
0deb 6a			    ld l,d 
0dec 06 08		    ld b,8 
0dee			Mult8_Loop: 
0dee 29			    add hl,hl 
0def 30 01		    jr nc,Mult8_NoAdd 
0df1 19			    add hl,de 
0df2			Mult8_NoAdd: 
0df2 10 fa		    djnz Mult8_Loop 
0df4 c9			    ret 
0df5			 
0df5			 
0df5			 
0df5			 
0df5			 
0df5			 
0df5			 
0df5			 
0df5			;;http://z80-heaven.wikidot.com/math 
0df5			;;This divides DE by BC, storing the result in DE, remainder in HL 
0df5			; 
0df5			;DE_Div_BC:          ;1281-2x, x is at most 16 
0df5			;     ld a,16        ;7 
0df5			;     ld hl,0        ;10 
0df5			;     jp $+5         ;10 
0df5			;.DivLoop: 
0df5			;       add hl,bc    ;-- 
0df5			;       dec a        ;64 
0df5			;       jr z,.DivLoopEnd        ;86 
0df5			; 
0df5			;       sla e        ;128 
0df5			;       rl d         ;128 
0df5			;       adc hl,hl    ;240 
0df5			;       sbc hl,bc    ;240 
0df5			;       jr nc,.DivLoop ;23|21 
0df5			;       inc e        ;-- 
0df5			;       jp .DivLoop+1 
0df5			; 
0df5			;.DivLoopEnd: 
0df5			 
0df5			;HL_Div_C: 
0df5			;Inputs: 
0df5			;     HL is the numerator 
0df5			;     C is the denominator 
0df5			;Outputs: 
0df5			;     A is the remainder 
0df5			;     B is 0 
0df5			;     C is not changed 
0df5			;     DE is not changed 
0df5			;     HL is the quotient 
0df5			; 
0df5			;       ld b,16 
0df5			;       xor a 
0df5			;         add hl,hl 
0df5			;         rla 
0df5			;         cp c 
0df5			;         jr c,$+4 
0df5			;           inc l 
0df5			;           sub c 
0df5			;         djnz $-7 
0df5			 
0df5			; https://plutiedev.com/z80-add-8bit-to-16bit 
0df5			 
0df5			addatohl: 
0df5 85			    add   a, l    ; A = A+L 
0df6 6f			    ld    l, a    ; L = A+L 
0df7 8c			    adc   a, h    ; A = A+L+H+carry 
0df8 95			    sub   l       ; A = H+carry 
0df9 67			    ld    h, a    ; H = H+carry 
0dfa c9			ret 
0dfb			 
0dfb			addatode: 
0dfb 83			    add   a, e    ; A = A+L 
0dfc 5f			    ld    e, a    ; L = A+L 
0dfd 8a			    adc   a, d    ; A = A+L+H+carry 
0dfe 93			    sub   e       ; A = H+carry 
0dff 57			    ld    d, a    ; H = H+carry 
0e00 c9			ret 
0e01			 
0e01			 
0e01			addatobc: 
0e01 81			    add   a, c    ; A = A+L 
0e02 4f			    ld    c, a    ; L = A+L 
0e03 88			    adc   a, b    ; A = A+L+H+carry 
0e04 91			    sub   c       ; A = H+carry 
0e05 47			    ld    b, a    ; H = H+carry 
0e06 c9			ret 
0e07			 
0e07			subafromhl: 
0e07			   ; If A=0 do nothing 
0e07			    ; Otherwise flip A's sign. Since 
0e07			    ; the upper byte becomes -1, also 
0e07			    ; substract 1 from H. 
0e07 ed 44		    neg 
0e09 ca 12 0e		    jp    z, Skip 
0e0c 25			    dec   h 
0e0d			     
0e0d			    ; Now add the low byte as usual 
0e0d			    ; Two's complement takes care of 
0e0d			    ; ensuring the result is correct 
0e0d 85			    add   a, l 
0e0e 6f			    ld    l, a 
0e0f 8c			    adc   a, h 
0e10 95			    sub   l 
0e11 67			    ld    h, a 
0e12			Skip: 
0e12 c9				ret 
0e13			 
0e13			 
0e13			; compare hl and de 
0e13			; returns:  
0e13			; if hl = de, z=1, s=0, c0=0 
0e13			; if hl > de, z=0, s=0, c=0 
0e13			; if hl < de, z=0, s=1, c=1 
0e13			cmp16:	 
0e13 b7				or a 
0e14 ed 52			sbc hl,de 
0e16 e0				ret po 
0e17 7c				ld a,h 
0e18 1f				rra 
0e19 ee 40			xor 01000000B 
0e1b 37				scf 
0e1c 8f				adc a,a 
0e1d c9				ret 
0e1e			 
0e1e			 
0e1e			; test if hl contains zero   - A is destroyed 
0e1e			 
0e1e			ishlzero:    
0e1e b7				or a     ; reset flags 
0e1f 7c				ld a, h 
0e20 b5				or l        	 
0e21			 
0e21 c9				ret 
0e22			 
0e22			 
0e22			 
0e22			 
0e22			if FORTH_ENABLE_FLOATMATH 
0e22			;include "float/bbcmath.z80" 
0e22			include "float/lpfpcalc.asm" 
0e22			endif 
0e22			 
0e22			 
0e22			; eof 
0e22			 
# End of file firmware_maths.asm
0e22			include "firmware_strings.asm"   ; string handling  
0e22			 
0e22			 
0e22			; TODO string len 
0e22			; input text string, end on cr with zero term 
0e22			; a offset into frame buffer to start prompt 
0e22			; d is max length 
0e22			; e is display size TODO 
0e22			; c is current cursor position 
0e22			; hl is ptr to where string will be stored and edited directly 
0e22			 
0e22			 
0e22			; TODO check limit of buffer for new inserts 
0e22			; TODO check insert does not push beyond buffer 
0e22			; TODO scroll in a limited display area 
0e22			; TODO scroll whole screen on page wrap 
0e22			 
0e22			 
0e22			; TODO use LCD cursor? 
0e22			 
0e22			EDIT_V1: equ 0 
0e22			EDIT_V2: equ 1 
0e22			 
0e22			 
0e22			 
0e22			if EDIT_V2 
0e22			input_str: 
0e22			 
0e22 32 5e ee			    	ld (input_at_pos),a      ; save display position to start 
0e25			;		ld (input_at_cursor),a	; save draw pos of cursor relative to start 
0e25 22 61 ee				ld (input_start), hl     ; save ptr to buffer 
0e28			;		ld a, c 
0e28			;		call addatohl 
0e28			;		ld (input_ptr), hl     ; save ptr to point under the cursor 
0e28 7a					ld a,d 
0e29 32 60 ee			        ld (input_size), a       ; save length of input area 
0e2c 79					ld a, c 
0e2d 32 4f ee				ld (input_cursor),a      ; init cursor start position relative to start of string 
0e30 7b					ld a,e 
0e31 32 5f ee			        ld (input_display_size), a       ; save length of input area that is displayed TODO 
0e34			 
0e34			 
0e34					; add a trailing space to make screen refresh nicer 
0e34			 
0e34					;ld hl, (input_start) 
0e34					;push hl 
0e34					;ld a, 0 
0e34					;call strlent 
0e34					;ld a, l 
0e34					;pop hl 
0e34					;call addatohl 
0e34					;dec hl 
0e34					;ld a, ' ' 
0e34					;ld (hl), a 
0e34					;inc hl 
0e34					;ld (hl), a 
0e34					;inc hl 
0e34					;ld a, 0 
0e34					;ld (hl), a 
0e34			 
0e34			; TODO move out to cin as cursor shape is used by the 4x4 ??? 
0e34					; init cursor shape if not set by the cin routines 
0e34 21 bb eb				ld hl, cursor_shape 
0e37			if BASE_KEV 
0e37					ld a, 255 
0e37			else 
0e37 3e 23				ld a, '#' 
0e39			endif 
0e39 77					ld (hl), a 
0e3a 23					inc hl 
0e3b 3e 00				ld a, 0 
0e3d 77					ld (hl), a 
0e3e			 
0e3e 3e 09				ld a, CUR_BLINK_RATE 
0e40 32 5a ee				ld (input_cur_flash), a 
0e43 3e 01				ld a, 1 
0e45 32 59 ee				ld (input_cur_onoff),a 
0e48			.inmain:	 
0e48			 
0e48 cd 70 0f				call input_disp_ref 
0e4b			 
0e4b					; save current length of string 
0e4b			 
0e4b 2a 61 ee				ld hl, (input_start) 
0e4e 3e 00				ld a, 0 
0e50 cd 66 11				call strlent 
0e53 7d					ld a,l 
0e54 32 54 ee				ld (input_len), a 
0e57			 
0e57					;call input_disp_oncur 
0e57			 
0e57					; display current state of input buffer 
0e57			 
0e57					; clean any backspace chars 
0e57			 
0e57 3e 20				ld a, " " 
0e59 32 bb e2				ld (scratch),a 
0e5c 3e 00				ld a, 0 
0e5e 32 bc e2				ld (scratch+1),a 
0e61 3a 5e ee				ld a,(input_at_pos) 
0e64 85					add l 
0e65 11 bb e2				ld de, scratch 
0e68 cd db 0b				call str_at_display 
0e6b			 
0e6b					; pause 1ms 
0e6b			 
0e6b 3e 01				ld a, 1 
0e6d cd e5 0a				call aDelayInMS 
0e70			 
0e70			; display cursor if visible on this cycle 
0e70			 
0e70					; dec flash counter 
0e70 3a 5a ee				ld a, (input_cur_flash) 
0e73 3d					dec a 
0e74 32 5a ee				ld (input_cur_flash), a 
0e77 fe 00				cp 0 
0e79 20 0d				jr nz, .inochgstate 
0e7b			 
0e7b			 
0e7b					; reset on change of state 
0e7b 3e 09				ld a, CUR_BLINK_RATE 
0e7d 32 5a ee				ld (input_cur_flash), a 
0e80			 
0e80					; change state 
0e80 3a 59 ee				ld a,(input_cur_onoff) 
0e83 ed 44				neg 
0e85 32 59 ee				ld (input_cur_onoff),a 
0e88			 
0e88			 
0e88			 
0e88			 
0e88					; TODO is cursor visible? 
0e88					; TODO if so then over write the char at curspos pos with the cursor shape 
0e88			 
0e88								 
0e88			 
0e88			.inochgstate: 
0e88 3a 59 ee				ld a,(input_cur_onoff) 
0e8b fe ff				cp 255 
0e8d 28 0e				jr z, .skipcursor 
0e8f 3a 5e ee				ld a, (input_at_pos) 
0e92 47					ld b, a 
0e93 3a 4f ee				ld a, (input_cursor) 
0e96 80					add b 
0e97 11 bb eb				ld de, cursor_shape 
0e9a					 
0e9a cd db 0b				call str_at_display 
0e9d			 
0e9d			.skipcursor: 
0e9d				if DEBUG_INPUTV2 
0e9d			 
0e9d					ld a,(input_at_pos) 
0e9d					ld hl, LFSRSeed 
0e9d					call hexout 
0e9d					ld a, (input_cursor) 
0e9d					ld hl, LFSRSeed+2 
0e9d					call hexout 
0e9d					ld a,(input_size) 
0e9d					ld hl, LFSRSeed+4 
0e9d					call hexout 
0e9d			 
0e9d					ld a,(input_cur_onoff) 
0e9d					ld hl, LFSRSeed+6 
0e9d					call hexout 
0e9d			 
0e9d					ld a,(input_cur_flash) 
0e9d					ld hl, LFSRSeed+8 
0e9d					call hexout 
0e9d			 
0e9d					ld a,(input_len) 
0e9d					ld hl, LFSRSeed+10 
0e9d					call hexout 
0e9d					ld hl, LFSRSeed+12 
0e9d					ld a, 0 
0e9d					ld (hl),a 
0e9d					ld a, display_row_4 
0e9d					ld de, LFSRSeed 
0e9d					call str_at_display 
0e9d				endif 
0e9d cd eb 0b				call update_display 
0ea0			 
0ea0					; TODO keyboard processing 
0ea0			 
0ea0			if BASE_CPM 
0ea0 cd 33 61				call cin_wait 
0ea3			else 
0ea3					call cin    ; _wait 
0ea3			endif 
0ea3 fe 00				cp 0 
0ea5 ca 48 0e				jp z, .inmain 
0ea8			 
0ea8 fe 0b				cp KEY_LEFT    ; cursor left 
0eaa ca 62 0f				jp z, input_left 
0ead				 
0ead fe 0c				cp KEY_RIGHT      ; cursor right 
0eaf ca 69 0f				jp z, input_right 
0eb2			 
0eb2 fe 0d				cp KEY_CR 
0eb4 c8					ret z 
0eb5			 
0eb5 fe 08				cp KEY_BS 
0eb7 ca d7 0f				jp z, input_delchar 
0eba			 
0eba fe 06				cp KEY_NEXTWORD 
0ebc ca e3 0e				jp z, input_nxtword 
0ebf			 
0ebf fe 07				cp KEY_PREVWORD 
0ec1 ca 0a 0f				jp z, input_prvword 
0ec4			 
0ec4 fe 0e				cp KEY_HOME    ; jump to start of line 
0ec6 20 08				jr nz, .ikh 
0ec8 3e 00				ld a, 0 
0eca 32 4f ee				ld (input_cursor), a 
0ecd ca 48 0e				jp z, .inmain 
0ed0			.ikh: 
0ed0			 
0ed0 fe 0f				cp KEY_END     ; jump to end of line 
0ed2 20 09				jr nz, .ike 
0ed4 3a 54 ee				ld a, (input_len) 
0ed7 32 4f ee				ld (input_cursor),a 
0eda ca 48 0e				jp z, .inmain 
0edd			.ike: 
0edd fe 05			        cp KEY_UP      ; recall last command 
0edf c8					ret z 
0ee0			;jr nz, .irec 
0ee0			; TODO next word 
0ee0			; TODO prev word 
0ee0			;  
0ee0			; 
0ee0			;	ld hl, scratch 
0ee0			;	ld de, os_last_cmd 
0ee0			;	call strcpy 
0ee0			;		jp  .inmain 
0ee0			.irec: 
0ee0			;		jr .instr1 
0ee0			 
0ee0			 
0ee0			 
0ee0					; if any keys not intercepted by above but are special keys like function keys then return them to the program 
0ee0			 
0ee0			; TODO return if any special keys are given 
0ee0			;		ld l, a 
0ee0			;		ld a, 28 ; KEY_F12   ; 27 
0ee0			;		sub l 
0ee0			;		ret m 
0ee0			;		ld a, l 
0ee0					; if no special key then insert as a char 
0ee0			 
0ee0 c3 a9 0f				jp input_inschr 
0ee3			 
0ee3				 
0ee3			input_nxtword: 
0ee3				; jump to start next word after the cursor 
0ee3			 
0ee3			.insknwn:	 
0ee3 cd 9f 0f				call input_curptr	 
0ee6 7e					ld a,(hl)	 
0ee7 fe 00				cp 0 
0ee9 ca 48 0e				jp z, .inmain    ; end of string 
0eec			 
0eec			; if we are on a word, then move off of it 
0eec			 
0eec fe 20				cp ' ' 
0eee 28 06				jr z, .inspace     ; we are on space so eat the space until we hit non-space 
0ef0 21 4f ee				ld hl, input_cursor 
0ef3 34					inc (hl) 
0ef4 18 ed				jr .insknwn 
0ef6			 
0ef6			.inspace: 
0ef6			 
0ef6 cd 9f 0f				call input_curptr	 
0ef9 7e					ld a,(hl)	 
0efa fe 00				cp 0 
0efc ca 48 0e				jp z, .inmain    ; end of string 
0eff			 
0eff			; if we are on a word, then move off of it 
0eff			 
0eff fe 20				cp ' ' 
0f01 c2 48 0e				jp nz, .inmain     ; we are on non space so at next word 
0f04 21 4f ee				ld hl, input_cursor 
0f07 34					inc (hl) 
0f08 18 ec				jr .inspace 
0f0a			 
0f0a			 
0f0a			 
0f0a			 
0f0a			input_prvword: 
0f0a				; jump to the start of previous word before the cursor 
0f0a			 
0f0a			; where are we to start with currently? 
0f0a			 
0f0a cd 9f 0f				call input_curptr	 
0f0d 7e					ld a, (hl) 
0f0e fe 20				cp ' ' 
0f10 28 1d				jr z, .inspacep     ; we are on space so eat the space until we hit non-space 
0f12			 
0f12			 
0f12			 
0f12			.inskpwn:	 
0f12 3a 4f ee				ld a,(input_cursor) 
0f15 fe 00				cp 0 
0f17 ca 48 0e				jp z, .inmain    ; start of string 
0f1a			 
0f1a			;if we are on a word, then move off of it 
0f1a			 
0f1a cd 9f 0f				call input_curptr	 
0f1d 7e					ld a, (hl) 
0f1e fe 20				cp ' ' 
0f20 28 06				jr z, .iwstart     ; we are on space so eat the space until we hit non-space 
0f22					;jp z, .inmain    ; start of string 
0f22 21 4f ee				ld hl, input_cursor 
0f25 35					dec (hl) 
0f26 18 ea				jr .inskpwn 
0f28			.iwstart: 
0f28 21 4f ee				ld hl, input_cursor 
0f2b 34					inc (hl) 
0f2c c3 48 0e				jp .inmain 
0f2f					 
0f2f			 
0f2f			.inspacep: 
0f2f			 
0f2f					;jp .inmain    ; start of string 
0f2f			 
0f2f			 
0f2f			 
0f2f 3a 4f ee				ld a,(input_cursor) 
0f32 fe 00				cp 0 
0f34 ca 48 0e				jp z, .inmain    ; start of string 
0f37			 
0f37			; if we are on a word, then move off of it 
0f37			 
0f37 cd 9f 0f				call input_curptr	 
0f3a 7e					ld a, (hl) 
0f3b fe 20				cp ' ' 
0f3d c2 46 0f				jp nz, .incharp     ; we are on non space so at end of prev word 
0f40 21 4f ee				ld hl, input_cursor 
0f43 35					dec (hl) 
0f44 18 e9				jr .inspacep 
0f46			 
0f46			 
0f46			.incharp:	 
0f46					; eat the word to get to the start 
0f46 3a 4f ee				ld a,(input_cursor) 
0f49 fe 00				cp 0 
0f4b ca 48 0e				jp z, .inmain    ; start of string 
0f4e			 
0f4e			; if we are on a word, then move off of it 
0f4e			 
0f4e cd 9f 0f				call input_curptr	 
0f51 7e					ld a, (hl) 
0f52 fe 20				cp ' ' 
0f54 28 06				jr z, .ipwordst     ; we are on space so eat the space until we hit non-space 
0f56 21 4f ee				ld hl, input_cursor 
0f59 35					dec (hl) 
0f5a 18 ea				jr .incharp 
0f5c			.ipwordst: 
0f5c					; at space before the prev word so reposition over it 
0f5c 21 4f ee				ld hl, input_cursor 
0f5f 34					inc (hl) 
0f60 18 b0				jr .inskpwn 
0f62					 
0f62			 
0f62			 
0f62			input_left: 
0f62				; move cursor left 
0f62 21 4f ee			ld hl, input_cursor 
0f65 35				dec (hl) 
0f66			;	cp 0 
0f66			;	jp z, .inmain    ; ignore left as at the start of the string 
0f66 c3 48 0e			jp .inmain 
0f69			 
0f69			input_right: 
0f69				; move cursor right 
0f69				 
0f69				;ld a, (input_size) 
0f69				;ld b, a 
0f69 21 4f ee			ld hl, input_cursor 
0f6c 34				inc (hl) 
0f6d				;dec b 
0f6d				;cp 0 
0f6d				;jp z, .inmain   ; ignore as at end of the string buffer 
0f6d				;ld a, b 
0f6d				;inc a 
0f6d				;ld (input_cursor), a 
0f6d c3 48 0e			jp .inmain 
0f70			 
0f70			 
0f70			 
0f70			input_disp_ref: 
0f70				; display the text from start of buffer (ie full refresh) 
0f70 3a 5e ee			ld a, (input_at_pos) 
0f73 2a 61 ee			ld hl,(input_start) 
0f76 eb				ex de, hl 
0f77 cd db 0b			call str_at_display  
0f7a c9				ret 
0f7b			input_disp_oncur: 
0f7b				; display the text from cursor position to end of buffer 
0f7b				; TODO position start of string at cursor position on screen 
0f7b				; TODO draw from that point on 
0f7b 3a 4f ee			ld a, (input_cursor) 
0f7e 47				ld b, a 
0f7f 3a 5e ee			ld a, (input_at_pos) 
0f82 80				add b 
0f83 48				ld c, b     ; save a 
0f84 78				ld a, b     ; inc string start for cursor 
0f85 2a 61 ee			ld hl,(input_start) 
0f88 cd f5 0d			call addatohl 
0f8b eb				ex de, hl 
0f8c 79				ld a, c 
0f8d cd db 0b			call str_at_display  
0f90 c9				ret 
0f91			 
0f91			input_nxtw: 
0f91				; Find next word 
0f91 c9				ret 
0f92			 
0f92			input_prvw: 
0f92				; Find previous word 
0f92 c9				ret 
0f93			 
0f93			input_lenrem:   
0f93				; Calculate the length of string remaining from current cursor 
0f93				; position to end of buffer (exc null term) 
0f93				 
0f93 3a 4f ee			ld a, (input_cursor) 
0f96 4f				ld c, a 
0f97 3a 60 ee			ld a, (input_size) 
0f9a 91				sub c 
0f9b 06 00			ld b, 0 
0f9d 0d				dec c 
0f9e c9				ret	 
0f9f			 
0f9f			input_curptr: 
0f9f				; calc address of the character under the cursor 
0f9f				 
0f9f 2a 61 ee			ld hl, (input_start) 
0fa2 3a 4f ee			ld a, (input_cursor) 
0fa5 cd f5 0d			call addatohl 
0fa8 c9				ret 
0fa9			 
0fa9			input_inschr: 
0fa9				; Insert char at cursor position 
0fa9 f5				push af   ; save char 
0faa				;call input_lenrem    ; get bc length of remaining string 
0faa			 
0faa				 
0faa cd 9f 0f			call input_curptr 
0fad			;	ld hl, (input_start) 
0fad			;	ld a, (input_cursor) 
0fad			;	call addatohl 
0fad				;push hl   ; save to come back to 
0fad			 
0fad				; shift everything up one to end of buffer 
0fad			 
0fad				;push hl 
0fad				;dec de 
0fad				;inc de 
0fad			;	ldir 
0fad				 
0fad				;pop hl 
0fad			 
0fad				; are we adding to the end of line? 
0fad			 
0fad 3a 4f ee			ld a, (input_cursor) 
0fb0 47				ld b, a 
0fb1 3a 54 ee			ld a, (input_len) 
0fb4 b8				cp b 
0fb5 20 09			jr nz, .insmid   ; no, insert in middle of text 
0fb7			 
0fb7				; tack on the end of the line 
0fb7 f1				pop af 
0fb8 77				ld (hl), a   ; save new char 
0fb9 23				inc hl 
0fba 3e 00			ld a, 0 
0fbc 77				ld (hl), a 
0fbd c3 69 0f			jp input_right 
0fc0				 
0fc0			.insmid: 
0fc0				; hl has insertion point so move everything up one to allow for insertion 
0fc0				;call input_shiftright 
0fc0 f1				pop af 
0fc1			 
0fc1			.shufinsmid: 
0fc1 47				ld b, a     ; b contains new char, c prev char at this position  
0fc2 7e				ld a, (hl) 
0fc3			 
0fc3 fe 00			cp 0    ; at end of string need to then dump new char and add term 
0fc5 28 07			jr z, .endinsmid 
0fc7 4f				ld c, a 
0fc8 78				ld a, b 
0fc9 77				ld (hl), a 
0fca 23				inc hl 
0fcb 79				ld a, c 
0fcc 18 f3			jr .shufinsmid 
0fce				 
0fce			 
0fce			 
0fce			 
0fce			.endinsmid: 
0fce 78				ld a, b 
0fcf 77				ld (hl), a 
0fd0 23				inc hl 
0fd1 3e 00			ld a, 0 
0fd3 77				ld (hl), a 
0fd4			 
0fd4			 
0fd4			;	ld (hl), a   ; save new char 
0fd4			 
0fd4 c3 69 0f			jp input_right 
0fd7			 
0fd7			;input_shiftright: 
0fd7			;	; shift text right at cursor, hl has shift start 
0fd7			;	push hl 
0fd7			;	push de 
0fd7			;	push bc 
0fd7			; 
0fd7			; 
0fd7			;	; move to end of string past zero term 
0fd7			;	ld hl,(input_start) 
0fd7			;	ld a, (input_len) 
0fd7			;	call addatohl 
0fd7			;	inc hl 
0fd7			;;	inc hl 
0fd7			;;	inc hl 
0fd7			;	ld a, 0 
0fd7			;	ld (hl), a 
0fd7			;;	dec hl 
0fd7			;	 
0fd7			;;	ld (hl), a 
0fd7			;;	dec hl 
0fd7			; 
0fd7			;	push hl 
0fd7			;	pop de 
0fd7			;	inc de 
0fd7			;	 
0fd7			; 
0fd7			;;	ld hl,(input_start) 
0fd7			;;	ld a, (input_cursor) 
0fd7			;;	call addatohl 
0fd7			; 
0fd7			; 
0fd7			;	; calc how many bytes from cursor pos to end of string we need to shift 
0fd7			;	call input_lenrem    ; get bc length of remaining string 
0fd7			;	;ld a, (input_cursor) 
0fd7			;	;ld c, a 
0fd7			;	ld a, (input_len) 
0fd7			;	cp 2 
0fd7			;	jr z, .iskipzero	 
0fd7			;	;sub c 
0fd7			;	;inc a 
0fd7			;	;ld c, a 
0fd7			;	;ld b, 0 
0fd7			;	inc c 
0fd7			;	inc c 
0fd7			;	; move data 
0fd7			;	lddr 
0fd7			;.iskipzero: 
0fd7			; 
0fd7			;	pop bc 
0fd7			;	pop de 
0fd7			;	pop hl 
0fd7			;	ret	 
0fd7			 
0fd7			input_delchar: 
0fd7				; Delete char at cursor position 
0fd7 cd 93 0f			call input_lenrem    ; get bc length of remaining string 
0fda 2a 61 ee			ld hl, (input_start) 
0fdd 3a 4f ee			ld a, (input_cursor) 
0fe0 cd f5 0d			call addatohl 
0fe3			 
0fe3 e5				push hl 
0fe4 d1				pop de 
0fe5 1b				dec de 
0fe6			 
0fe6			.dl:	 
0fe6 ed a0			ldi  
0fe8 7e				ld a, (hl) 
0fe9 fe 00			cp 0 
0feb 28 02			jr z, .dldone 
0fed 18 f7			jr .dl 
0fef			.dldone: 
0fef ed a0			ldi 
0ff1			 
0ff1 c3 62 0f			jp input_left 
0ff4			 
0ff4			 
0ff4			endif 
0ff4			 
0ff4			 
0ff4			 
0ff4			if EDIT_V1 
0ff4			input_str: 
0ff4			 
0ff4				    	ld (input_at_pos),a      ; save display position to start 
0ff4					add c 
0ff4					ld (input_at_cursor),a	; save draw pos of cursor 
0ff4					ld (input_start), hl     ; save ptr to buffer 
0ff4					ld a, c 
0ff4					call addatohl 
0ff4					ld (input_ptr), hl     ; save ptr to point under the cursor 
0ff4					ld a,d 
0ff4				        ld (input_size), a       ; save length of input area 
0ff4					ld a, c 
0ff4					ld (input_cursor),a      ; init cursor start position  
0ff4					ld a,e 
0ff4				        ld (input_display_size), a       ; save length of input area that is displayed TODO 
0ff4					 
0ff4					 
0ff4			 
0ff4			;		ld a,(input_ptr) 
0ff4			;		ld (input_under_cursor),a 	; save what is under the cursor 
0ff4			 
0ff4			; TODO move out to cin as cursor shape is used by the 4x4 ??? 
0ff4					; init cursor shape if not set by the cin routines 
0ff4					ld hl, cursor_shape 
0ff4			if BASE_KEV 
0ff4					ld a, 255 
0ff4			else 
0ff4					ld a, '#' 
0ff4			endif 
0ff4					ld (hl), a 
0ff4					inc hl 
0ff4					ld a, 0 
0ff4					ld (hl), a 
0ff4			 
0ff4					ld a, CUR_BLINK_RATE 
0ff4					ld (input_cur_flash), a 
0ff4					ld a, 1 
0ff4					ld (input_cur_onoff),a 
0ff4			 
0ff4			;	if DEBUG_INPUT 
0ff4			;		push af 
0ff4			;		ld a, 'I' 
0ff4			;		ld (debug_mark),a 
0ff4			;		pop af 
0ff4			;		CALLMONITOR 
0ff4			;	endif 
0ff4			.is1:		; main entry loop 
0ff4			 
0ff4			 
0ff4			 
0ff4					; pause 1ms 
0ff4			 
0ff4					ld a, 1 
0ff4					call aDelayInMS 
0ff4			 
0ff4					; dec flash counter 
0ff4					ld a, (input_cur_flash) 
0ff4					dec a 
0ff4					ld (input_cur_flash), a 
0ff4					cp 0 
0ff4					jr nz, .nochgstate 
0ff4			 
0ff4			 
0ff4					; change state 
0ff4					ld a,(input_cur_onoff) 
0ff4					neg 
0ff4					ld (input_cur_onoff),a 
0ff4			 
0ff4			 
0ff4					; reset on change of state 
0ff4					ld a, CUR_BLINK_RATE 
0ff4					ld (input_cur_flash), a 
0ff4			 
0ff4			.nochgstate: 
0ff4					 
0ff4					 
0ff4			 
0ff4					; display cursor  
0ff4			 
0ff4			;		ld hl, (input_start) 
0ff4			;		ld a, (input_cursor) 
0ff4			;		call addatohl 
0ff4			 
0ff4					; get char under cursor and replace with cursor 
0ff4			ld hl, (input_ptr) 
0ff4			;		ld a, (hl) 
0ff4			;		ld (input_under_cursor),a 
0ff4			;		ld a, '_' 
0ff4			;		ld (hl), a 
0ff4			 
0ff4					; display string 
0ff4			 
0ff4					ld de, (input_start) 
0ff4					ld a, (input_at_pos) 
0ff4					call str_at_display 
0ff4			;	        call update_display 
0ff4			 
0ff4					; find place to put the cursor 
0ff4			;		add h 
0ff4			;		ld l, display_row_1 
0ff4			;		sub l 
0ff4			; (input_at_pos) 
0ff4					;ld c, a 
0ff4			;		ld a, (input_cursor) 
0ff4			;		ld l, (input_at_pos) 
0ff4			;		;ld b, h 
0ff4			;		add l 
0ff4			;		ld (input_at_cursor),a 
0ff4					;ld l,h 
0ff4			 
0ff4			;		ld h, 0 
0ff4			;		ld l,(input_at_pos) 
0ff4			;		ld a, (input_cursor) 
0ff4			;		call addatohl 
0ff4			;		ld a, 074H-19			; TODO BUG I dont know why offset is showing 74H 
0ff4			;		call subafromhl 
0ff4			;		ld a,l 
0ff4			;		ld (input_at_cursor), a 
0ff4			 
0ff4				if DEBUG_INPUT 
0ff4					ld a, (hardware_diag) 
0ff4					cp 0 
0ff4					jr z, .skip_input_diag 
0ff4			 
0ff4					ld a,(input_at_pos) 
0ff4					ld hl, LFSRSeed 
0ff4					call hexout 
0ff4					ld a, (input_cursor) 
0ff4					ld hl, LFSRSeed+2 
0ff4					call hexout 
0ff4					ld a,(input_at_cursor) 
0ff4					ld hl, LFSRSeed+4 
0ff4					call hexout 
0ff4			 
0ff4					ld a,(input_cur_onoff) 
0ff4					ld hl, LFSRSeed+6 
0ff4					call hexout 
0ff4			 
0ff4					ld a,(input_cur_flash) 
0ff4					ld hl, LFSRSeed+8 
0ff4					call hexout 
0ff4			 
0ff4					ld a,(input_len) 
0ff4					ld hl, LFSRSeed+10 
0ff4					call hexout 
0ff4					ld hl, LFSRSeed+12 
0ff4					ld a, 0 
0ff4					ld (hl),a 
0ff4					ld a, display_row_4 
0ff4					ld de, LFSRSeed 
0ff4					call str_at_display 
0ff4					.skip_input_diag: 
0ff4				endif 
0ff4			 
0ff4					; decide on if we are showing the cursor this time round 
0ff4			 
0ff4					ld a, (input_cur_onoff) 
0ff4					cp 255 
0ff4					jr z, .skipcur 
0ff4			 
0ff4			 
0ff4					ld a,(input_at_cursor) 
0ff4					ld de, cursor_shape 
0ff4					call str_at_display 
0ff4			 
0ff4					; save length of current input string 
0ff4					ld hl, (input_start) 
0ff4					ld a, 0 
0ff4					call strlent 
0ff4					ld a,l 
0ff4					ld (input_len),a 
0ff4			 
0ff4			.skipcur: 
0ff4			 
0ff4				        call update_display 
0ff4					 
0ff4			 
0ff4			 
0ff4					; wait 
0ff4				 
0ff4					; TODO loop without wait to flash the cursor and char under cursor	 
0ff4					call cin    ; _wait 
0ff4			 
0ff4					cp 0 
0ff4					jp z, .is1 
0ff4			 
0ff4					; get ptr to char to input into 
0ff4			 
0ff4					ld c,a 
0ff4					ld hl, (input_start) 
0ff4					ld a, (input_cursor) 
0ff4					call addatohl 
0ff4					ld (input_ptr), hl 
0ff4					ld a,c 
0ff4			 
0ff4					; replace char under cursor 
0ff4			 
0ff4			;		ld hl, (input_ptr) 
0ff4			;		ld a, (input_under_cursor) 	; get what is under the cursor 
0ff4			;		ld (hl), a 
0ff4			 
0ff4			;	if DEBUG_INPUT 
0ff4			;		push af 
0ff4			;		ld a, 'i' 
0ff4			;		ld (debug_mark),a 
0ff4			;		pop af 
0ff4			;		CALLMONITOR 
0ff4			;	endif 
0ff4					cp KEY_HOME 
0ff4					jr nz, .iske 
0ff4			 
0ff4					ld a, (input_at_pos) 
0ff4					ld (input_at_cursor),a 
0ff4					ld a, 0 
0ff4					ld (input_cursor), a 
0ff4					jp .is1 
0ff4					 
0ff4			.iske:		cp KEY_END 
0ff4					jr nz, .isknw 
0ff4					jp .is1 
0ff4			 
0ff4			.isknw:		cp KEY_NEXTWORD 
0ff4					jr nz, .iskpw 
0ff4			 
0ff4			.isknwm:	ld hl, (input_ptr) 
0ff4					ld a,(hl)	 
0ff4					cp 0 
0ff4					jp z, .is1    ; end of string 
0ff4					cp ' ' 
0ff4					jp z, .is1    ; end of word 
0ff4					inc hl 
0ff4					ld (input_ptr), hl 
0ff4					ld a, (input_at_cursor) 
0ff4					inc a 
0ff4					ld (input_at_cursor), a 
0ff4					jr .isknwm 
0ff4			 
0ff4			.iskpw:		cp KEY_PREVWORD 
0ff4					jr nz, .iskl 
0ff4			.iskpwm:	 
0ff4					ld hl, (input_ptr) 
0ff4					ld a,(hl)	 
0ff4					cp 0  
0ff4					jp z, .is1    ; end of string 
0ff4					cp ' ' 
0ff4					jp z, .is1    ; end of word 
0ff4					dec hl 
0ff4					ld (input_ptr), hl 
0ff4					ld a, (input_at_cursor) 
0ff4					dec a 
0ff4					ld (input_at_cursor), a 
0ff4					jr .iskpwm 
0ff4			 
0ff4			 
0ff4			.iskl:		cp KEY_LEFT 
0ff4					jr nz, .isk1 
0ff4			 
0ff4					ld a, (input_cursor) 
0ff4			 
0ff4					cp 0 
0ff4					jp z, .is1 		; at start of line to ignore  
0ff4			 
0ff4					dec  a 		; TODO check underflow 
0ff4					ld (input_cursor), a 
0ff4			 
0ff4					ld hl, (input_ptr) 
0ff4					dec hl 
0ff4					ld (input_ptr), hl 
0ff4					 
0ff4					ld a, (input_at_cursor) 
0ff4					dec a 
0ff4					ld (input_at_cursor), a 
0ff4			 
0ff4					ld a, 1		; show cursor moving 
0ff4					ld (input_cur_onoff),a 
0ff4					ld a, CUR_BLINK_RATE 
0ff4					ld (input_cur_flash), a 
0ff4			 
0ff4					jp .is1 
0ff4			 
0ff4			.isk1:		cp KEY_RIGHT 
0ff4					jr nz, .isk2 
0ff4			 
0ff4					ld a,(input_len)		; TODO BUG why cant i load e direct? 
0ff4					ld e,a 
0ff4					ld a, (input_cursor) 
0ff4					cp e 
0ff4					jp z, .is1		; at the end of string so dont go right 
0ff4			 
0ff4					inc  a 		; TODO check overflow 
0ff4					ld (input_cursor), a 
0ff4			 
0ff4					ld a, (input_at_cursor) 
0ff4					inc a 
0ff4					ld (input_at_cursor), a 
0ff4			 
0ff4					ld hl, (input_ptr) 
0ff4					inc hl 
0ff4					ld (input_ptr), hl 
0ff4			 
0ff4					ld a, 1		; show cursor moving 
0ff4					ld (input_cur_onoff),a 
0ff4					ld a, CUR_BLINK_RATE 
0ff4					ld (input_cur_flash), a 
0ff4			 
0ff4					jp .is1 
0ff4			 
0ff4			.isk2:		cp KEY_UP 
0ff4			 
0ff4					jr nz, .isk3 
0ff4			 
0ff4					; swap last command with the current on 
0ff4			 
0ff4					; move cursor to start of string 
0ff4					ld hl, (input_start) 
0ff4					ld (input_ptr), hl 
0ff4			 
0ff4					ld a, (input_at_pos) 
0ff4					ld (input_at_cursor), a 
0ff4			 
0ff4					ld a, 0 
0ff4					ld (input_cursor), a 
0ff4					 
0ff4					; swap input and last command buffers 
0ff4			 
0ff4					ld hl, os_cli_cmd 
0ff4					ld de, os_last_cmd 
0ff4					ld b, 255 
0ff4			.swap1:		ld a, (hl) 
0ff4					ld c,a 
0ff4					ld a, (de) 
0ff4					ld (hl), a 
0ff4					ld a,c 
0ff4					ld (de),a 
0ff4					inc hl 
0ff4					inc de 
0ff4					djnz .swap1 
0ff4			 
0ff4			 
0ff4			 
0ff4			 
0ff4			 
0ff4					jp .is1 
0ff4			 
0ff4			.isk3:		cp KEY_BS 
0ff4					jr nz, .isk4 
0ff4			 
0ff4					ld a, (input_cursor) 
0ff4			 
0ff4					cp 0 
0ff4					jp z, .is1 		; at start of line to ignore  
0ff4			 
0ff4					dec  a 		; TODO check underflow 
0ff4					ld (input_cursor), a 
0ff4			 
0ff4					; hl is source 
0ff4					; de needs to be source - 1 
0ff4			 
0ff4			;		ld a, 0 
0ff4			;		dec hl 
0ff4			;		ld (hl), a 
0ff4			 
0ff4					ld hl, (input_ptr) 
0ff4					dec hl 
0ff4					ld (input_ptr), hl 
0ff4			 
0ff4					; shift all data 
0ff4			 
0ff4					push hl 
0ff4					inc hl 
0ff4					pop de 
0ff4					ld a, (input_len)		; TODO BUG WAS ld c, (input... 
0ff4					ld c,a 
0ff4					ld b,0 
0ff4					ldir  
0ff4			 
0ff4			 
0ff4			 
0ff4			 
0ff4					ld a, (input_at_cursor) 
0ff4					dec a 
0ff4					ld (input_at_cursor), a 
0ff4			 
0ff4			 
0ff4					ld a, 1		; show cursor moving 
0ff4					ld (input_cur_onoff),a 
0ff4					ld a, CUR_BLINK_RATE 
0ff4					ld (input_cur_flash), a 
0ff4			 
0ff4					; remove char 
0ff4					ld a, (input_at_cursor) 
0ff4					inc a 
0ff4					ld de,.iblank 
0ff4					call str_at_display 
0ff4			 
0ff4					jp .is1 
0ff4			 
0ff4			.isk4:		cp KEY_CR 
0ff4					jr z, .endinput 
0ff4			 
0ff4					; else add the key press to the end 
0ff4			 
0ff4					ld c, a			; save key pressed 
0ff4			 
0ff4					ld a,(hl)		; get what is currently under char 
0ff4			 
0ff4					cp 0			; we are at the end of the string 
0ff4					jr nz, .onchar 
0ff4					 
0ff4					; add a char to the end of the string 
0ff4				 
0ff4					ld (hl),c 
0ff4					inc hl 
0ff4			;		ld a,' ' 
0ff4			;		ld (hl),a 
0ff4			;		inc hl 
0ff4					ld a,0 
0ff4					ld (hl),a 
0ff4					dec hl 
0ff4			 
0ff4					ld a, (input_cursor) 
0ff4					inc a				; TODO check max string length and scroll  
0ff4					ld (input_cursor), a		; inc cursor pos 
0ff4							 
0ff4					ld a, (input_at_cursor) 
0ff4					inc a 
0ff4					ld (input_at_cursor), a 
0ff4			 
0ff4					ld hl, (input_ptr) 
0ff4					inc hl 
0ff4					ld (input_ptr), hl 
0ff4			 
0ff4					ld hl, (input_ptr) 
0ff4					inc hl 
0ff4					ld (input_ptr), hl 
0ff4			;	if DEBUG_INPUT 
0ff4			;		push af 
0ff4			;		ld a, '+' 
0ff4			;		ld (debug_mark),a 
0ff4			;		pop af 
0ff4			;		CALLMONITOR 
0ff4			;	endif 
0ff4					ld a, 1		; show cursor moving 
0ff4					ld (input_cur_onoff),a 
0ff4					ld a, CUR_BLINK_RATE 
0ff4					ld (input_cur_flash), a 
0ff4					jp .is1 
0ff4					 
0ff4			 
0ff4			 
0ff4					; if on a char then insert 
0ff4			.onchar: 
0ff4			 
0ff4					; TODO over flow check: make sure insert does not blow out buffer 
0ff4			 
0ff4					; need to do some maths to use lddr 
0ff4			 
0ff4					push hl   ; save char pos 
0ff4					push bc 
0ff4			 
0ff4					ld hl, (input_start) 
0ff4					ld a, (input_len) 
0ff4					call addatohl  		; end of string 
0ff4					inc hl 
0ff4					inc hl		; past zero term 
0ff4					push hl 
0ff4					inc hl 
0ff4					push hl  
0ff4			 
0ff4								; start and end of lddr set, now how much to move? 
0ff4			 
0ff4							 
0ff4					ld a, (input_cursor)		; BUG TODO why cant i load directly into b??? 
0ff4					ld b,a 
0ff4					ld a,(input_len) 
0ff4					ld e,a 
0ff4					sub b 
0ff4					inc a		;?? 
0ff4					inc a		;?? 
0ff4					inc a		;?? 
0ff4			 
0ff4					ld b,0 
0ff4					ld c,a 
0ff4			 
0ff4				if DEBUG_INPUT 
0ff4					push af 
0ff4					ld a, 'i' 
0ff4					ld (debug_mark),a 
0ff4					pop af 
0ff4			;		CALLMONITOR 
0ff4				endif 
0ff4					pop de 
0ff4					pop hl 
0ff4				if DEBUG_INPUT 
0ff4					push af 
0ff4					ld a, 'I' 
0ff4					ld (debug_mark),a 
0ff4					pop af 
0ff4			;		CALLMONITOR 
0ff4				endif 
0ff4					lddr 
0ff4				 
0ff4			 
0ff4			 
0ff4					; TODO have a key for insert/overwrite mode???? 
0ff4					pop bc 
0ff4					pop hl 
0ff4					ld (hl), c		; otherwise overwrite current char 
0ff4					 
0ff4			 
0ff4			 
0ff4			 
0ff4					ld a, (input_cursor) 
0ff4					inc  a 		; TODO check overflow 
0ff4					ld (input_cursor), a 
0ff4			 
0ff4					ld a, (input_at_cursor) 
0ff4					inc a 
0ff4					ld (input_at_cursor), a 
0ff4			 
0ff4					jp .is1 
0ff4			 
0ff4			.endinput:	; TODO look for end of string 
0ff4			 
0ff4					; add trailing space for end of token 
0ff4			 
0ff4					ld hl, (input_start) 
0ff4					ld a,(input_len) 
0ff4					call addatohl 
0ff4					ld a, ' ' 
0ff4					ld (hl),a 
0ff4					; TODO eof of parse marker 
0ff4			 
0ff4					inc hl 
0ff4					ld a, 0 
0ff4					ld (hl),a 
0ff4			 
0ff4			 
0ff4					ret 
0ff4			 
0ff4			.iblank: db " ",0 
0ff4			 
0ff4			 
0ff4			input_str_prev:	ld (input_at_pos), a 
0ff4					ld (input_start), hl 
0ff4					ld a,1			; add cursor 
0ff4					ld (hl),a 
0ff4					inc hl 
0ff4					ld a,0 
0ff4					ld (hl),a 
0ff4					ld (input_ptr), hl 
0ff4					ld a,d 
0ff4					ld (input_size), a 
0ff4					ld a,0 
0ff4					ld (input_cursor),a 
0ff4			.instr1:	 
0ff4			 
0ff4					; TODO do block cursor 
0ff4					; TODO switch cursor depending on the modifer key 
0ff4			 
0ff4					; update cursor shape change on key hold 
0ff4			 
0ff4					ld hl, (input_ptr) 
0ff4					dec hl 
0ff4					ld a,(cursor_shape) 
0ff4					ld (hl), a 
0ff4			 
0ff4					; display entered text 
0ff4					ld a,(input_at_pos) 
0ff4			            	CALL fLCD_Pos       ;Position cursor to location in A 
0ff4			            	LD   de, (input_start) 
0ff4			            	CALL fLCD_Str       ;Display string pointed to by DE 
0ff4			 
0ff4					call cin 
0ff4					cp 0 
0ff4					jr z, .instr1 
0ff4			 
0ff4					; proecess keyboard controls first 
0ff4			 
0ff4					ld hl,(input_ptr) 
0ff4			 
0ff4					cp KEY_CR	 ; pressing enter ends input 
0ff4					jr z, .instrcr 
0ff4			 
0ff4					cp KEY_BS 	; back space 
0ff4					jr nz, .instr2 
0ff4					; process back space 
0ff4			 
0ff4					; TODO stop back space if at start of string 
0ff4					dec hl 
0ff4					dec hl ; to over write cursor 
0ff4					ld a,(cursor_shape) 
0ff4					;ld a,0 
0ff4					ld (hl),a 
0ff4					inc hl 
0ff4					ld a," " 
0ff4					ld (hl),a 
0ff4					ld (input_ptr),hl 
0ff4					 
0ff4			 
0ff4					jr .instr1 
0ff4			 
0ff4			.instr2:	cp KEY_LEFT    ; cursor left 
0ff4					jr nz, .instr3 
0ff4					dec hl 
0ff4					ld (input_ptr),hl 
0ff4					jr .instr1 
0ff4				 
0ff4			.instr3:	cp KEY_RIGHT      ; cursor right 
0ff4					jr nz, .instr4 
0ff4					inc hl 
0ff4					ld (input_ptr),hl 
0ff4					jr .instr1 
0ff4			 
0ff4			.instr4:	cp KEY_HOME    ; jump to start of line 
0ff4					jr nz, .instr5 
0ff4					dec hl 
0ff4					ld (input_ptr),hl 
0ff4					jr .instr1 
0ff4			 
0ff4			.instr5:	cp KEY_END     ; jump to end of line 
0ff4					jr nz, .instr6 
0ff4					dec hl 
0ff4					ld (input_ptr),hl 
0ff4					jr .instr1 
0ff4			.instr6:        cp KEY_UP      ; recall last command 
0ff4					jr nz, .instrnew 
0ff4			 
0ff4				ld hl, scratch 
0ff4				ld de, os_last_cmd 
0ff4				call strcpy 
0ff4					jr .instr1 
0ff4			 
0ff4			 
0ff4			.instrnew:	; no special key pressed to see if we have room to store it 
0ff4			 
0ff4					; TODO do string size test 
0ff4			 
0ff4					dec hl ; to over write cursor 
0ff4					ld (hl),a 
0ff4					inc hl 
0ff4					ld a,(cursor_shape) 
0ff4					ld (hl),a 
0ff4					inc hl 
0ff4					ld a,0 
0ff4					ld (hl),a 
0ff4			 
0ff4					ld (input_ptr),hl 
0ff4					 
0ff4					jr .instr1 
0ff4			.instrcr:	dec hl		; remove cursor 
0ff4					ld a,' '	; TODO add a trailing space for safety 
0ff4					ld (hl),a 
0ff4					inc hl 
0ff4					ld a,0 
0ff4					ld (hl),a 
0ff4			 
0ff4			 
0ff4					; if at end of line scroll up    
0ff4					; TODO detecting only end of line 4 for scroll up  
0ff4			 
0ff4					;ld   
0ff4			 
0ff4					ret 
0ff4			 
0ff4			 
0ff4			endif 
0ff4			; strcpy hl = dest, de source 
0ff4			 
0ff4 1a			strcpy:   LD   A, (DE)        ;Get character from string 
0ff5 b7			            OR   A              ;Null terminator? 
0ff6 c8			            RET  Z              ;Yes, so finished 
0ff7 1a					ld a,(de) 
0ff8 77					ld (hl),a 
0ff9 13			            INC  DE             ;Point to next character 
0ffa 23					inc hl 
0ffb 18 f7		            JR   strcpy       ;Repeat 
0ffd c9					ret 
0ffe			 
0ffe			 
0ffe			; TODO string_at  
0ffe			; pass string which starts with lcd offset address and then null term string 
0ffe			 
0ffe			; TODO string to dec 
0ffe			; TODO string to hex 
0ffe			; TODO byte to string hex 
0ffe			; TODO byte to string dec 
0ffe			 
0ffe			 
0ffe			 
0ffe			; from z80uartmonitor 
0ffe			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
0ffe			; OUTPUT VALUE OF A IN HEX ONE NYBBLE AT A TIME 
0ffe			; pass hl for where to put the text 
0ffe			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
0ffe c5			hexout:	PUSH BC 
0fff f5					PUSH AF 
1000 47					LD B, A 
1001					; Upper nybble 
1001 cb 3f				SRL A 
1003 cb 3f				SRL A 
1005 cb 3f				SRL A 
1007 cb 3f				SRL A 
1009 cd 19 10				CALL tohex 
100c 77					ld (hl),a 
100d 23					inc hl	 
100e					 
100e					; Lower nybble 
100e 78					LD A, B 
100f e6 0f				AND 0FH 
1011 cd 19 10				CALL tohex 
1014 77					ld (hl),a 
1015 23					inc hl	 
1016					 
1016 f1					POP AF 
1017 c1					POP BC 
1018 c9					RET 
1019					 
1019			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
1019			; TRANSLATE value in lower A TO 2 HEX CHAR CODES FOR DISPLAY 
1019			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
1019			tohex: 
1019 e5					PUSH HL 
101a d5					PUSH DE 
101b 16 00				LD D, 0 
101d 5f					LD E, A 
101e 21 26 10				LD HL, .DATA 
1021 19					ADD HL, DE 
1022 7e					LD A, (HL) 
1023 d1					POP DE 
1024 e1					POP HL 
1025 c9					RET 
1026			 
1026			.DATA: 
1026 30					DEFB	30h	; 0 
1027 31					DEFB	31h	; 1 
1028 32					DEFB	32h	; 2 
1029 33					DEFB	33h	; 3 
102a 34					DEFB	34h	; 4 
102b 35					DEFB	35h	; 5 
102c 36					DEFB	36h	; 6 
102d 37					DEFB	37h	; 7 
102e 38					DEFB	38h	; 8 
102f 39					DEFB	39h	; 9 
1030 41					DEFB	41h	; A 
1031 42					DEFB	42h	; B 
1032 43					DEFB	43h	; C 
1033 44					DEFB	44h	; D 
1034 45					DEFB	45h	; E 
1035 46					DEFB	46h	; F 
1036			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
1036			;; 	ASCII char code for 0-9,A-F in A to single hex digit 
1036			;;    subtract $30, if result > 9 then subtract $7 more 
1036			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
1036			atohex: 
1036 d6 30				SUB $30 
1038 fe 0a				CP 10 
103a f8					RET M		; If result negative it was 0-9 so we're done 
103b d6 07				SUB $7		; otherwise, subtract $7 more to get to $0A-$0F 
103d c9					RET		 
103e			 
103e			 
103e			 
103e			 
103e			; Get 2 ASCII characters as hex byte from pointer in hl 
103e			 
103e			BYTERD: 
103e 16 00			LD	D,00h		;Set up 
1040 cd 48 10			CALL	HEXCON		;Get byte and convert to hex 
1043 87				ADD	A,A		;First nibble so 
1044 87				ADD	A,A		;multiply by 16 
1045 87				ADD	A,A		; 
1046 87				ADD	A,A		; 
1047 57				LD	D,A		;Save hi nibble in D 
1048			HEXCON: 
1048 7e				ld a, (hl)		;Get next chr 
1049 23				inc hl 
104a d6 30			SUB	030h		;Makes '0'-'9' equal 0-9 
104c fe 0a			CP	00Ah		;Is it 0-9 ? 
104e 38 02			JR	C,NALPHA	;If so miss next bit 
1050 d6 07			SUB	007h		;Else convert alpha 
1052			NALPHA: 
1052 b2				OR	D		;Add hi nibble back 
1053 c9				RET			; 
1054			 
1054			 
1054			; 
1054			; Get a word (16 bit) in hexadecimal notation. The result is returned in HL. 
1054			; Since the routines get_byte and therefore get_nibble are called, only valid 
1054			; characters (0-9a-f) are accepted. 
1054			; 
1054			;get_word        push    af 
1054			;                call    get_byte        ; Get the upper byte 
1054			;                ld      h, a 
1054			;                call    get_byte        ; Get the lower byte 
1054			;                ld      l, a 
1054			;                pop     af 
1054			;                ret 
1054			; 
1054			; Get a byte in hexadecimal notation. The result is returned in A. Since 
1054			; the routine get_nibble is used only valid characters are accepted - the  
1054			; input routine only accepts characters 0-9a-f. 
1054			; 
1054 c5			get_byte:        push    bc              ; Save contents of B (and C) 
1055 7e					ld a,(hl) 
1056 23					inc hl 
1057 cd 7c 10		                call    nibble2val      ; Get upper nibble 
105a cb 07		                rlc     a 
105c cb 07		                rlc     a 
105e cb 07		                rlc     a 
1060 cb 07		                rlc     a 
1062 47			                ld      b, a            ; Save upper four bits 
1063 7e					ld a,(hl) 
1064 cd 7c 10		                call    nibble2val      ; Get lower nibble 
1067 b0			                or      b               ; Combine both nibbles 
1068 c1			                pop     bc              ; Restore B (and C) 
1069 c9			                ret 
106a			; 
106a			; Get a hexadecimal digit from the serial line. This routine blocks until 
106a			; a valid character (0-9a-f) has been entered. A valid digit will be echoed 
106a			; to the serial line interface. The lower 4 bits of A contain the value of  
106a			; that particular digit. 
106a			; 
106a			;get_nibble      ld a,(hl)           ; Read a character 
106a			;                call    to_upper        ; Convert to upper case 
106a			;                call    is_hex          ; Was it a hex digit? 
106a			;                jr      nc, get_nibble  ; No, get another character 
106a			 ;               call    nibble2val      ; Convert nibble to value 
106a			 ;               call    print_nibble 
106a			 ;               ret 
106a			; 
106a			; is_hex checks a character stored in A for being a valid hexadecimal digit. 
106a			; A valid hexadecimal digit is denoted by a set C flag. 
106a			; 
106a			;is_hex          cp      'F' + 1         ; Greater than 'F'? 
106a			;                ret     nc              ; Yes 
106a			;                cp      '0'             ; Less than '0'? 
106a			;                jr      nc, is_hex_1    ; No, continue 
106a			;                ccf                     ; Complement carry (i.e. clear it) 
106a			;                ret 
106a			;is_hex_1        cp      '9' + 1         ; Less or equal '9*? 
106a			;                ret     c               ; Yes 
106a			;                cp      'A'             ; Less than 'A'? 
106a			;                jr      nc, is_hex_2    ; No, continue 
106a			;                ccf                     ; Yes - clear carry and return 
106a			;                ret 
106a			;is_hex_2        scf                     ; Set carry 
106a			;                ret 
106a			; 
106a			; Convert a single character contained in A to upper case: 
106a			; 
106a fe 61		to_upper:        cp      'a'             ; Nothing to do if not lower case 
106c d8			                ret     c 
106d fe 7b		                cp      'z' + 1         ; > 'z'? 
106f d0			                ret     nc              ; Nothing to do, either 
1070 e6 5f		                and     $5f             ; Convert to upper case 
1072 c9			                ret 
1073			 
1073			 
1073			to_lower: 
1073			 
1073			   ; if char is in [A-Z] make it lower case 
1073			 
1073			   ; enter : a = char 
1073			   ; exit  : a = lower case char 
1073			   ; uses  : af 
1073			 
1073 fe 41		   cp 'A' 
1075 d8			   ret c 
1076			    
1076 fe 5b		   cp 'Z'+1 
1078 d0			   ret nc 
1079			    
1079 f6 20		   or $20 
107b c9			   ret 
107c			 
107c			; 
107c			; Expects a hexadecimal digit (upper case!) in A and returns the 
107c			; corresponding value in A. 
107c			; 
107c fe 3a		nibble2val:      cp      '9' + 1         ; Is it a digit (less or equal '9')? 
107e 38 02		                jr      c, nibble2val_1 ; Yes 
1080 d6 07		                sub     7               ; Adjust for A-F 
1082 d6 30		nibble2val_1:    sub     '0'             ; Fold back to 0..15 
1084 e6 0f		                and     $f              ; Only return lower 4 bits 
1086 c9			                ret 
1087			; 
1087			; Print_nibble prints a single hex nibble which is contained in the lower  
1087			; four bits of A: 
1087			; 
1087			;print_nibble    push    af              ; We won't destroy the contents of A 
1087			;                and     $f              ; Just in case... 
1087			;                add     a, '0'             ; If we have a digit we are done here. 
1087			;                cp      '9' + 1         ; Is the result > 9? 
1087			;                jr      c, print_nibble_1 
1087			;                add     a, 'A' - '0' - $a  ; Take care of A-F 
1087			;print_nibble_1  call    putc            ; Print the nibble and 
1087			;                pop     af              ; restore the original value of A 
1087			;                ret 
1087			;; 
1087			;; Send a CR/LF pair: 
1087			; 
1087			;crlf            push    af 
1087			;                ld      a, cr 
1087			;                call    putc 
1087			;                ld      a, lf 
1087			;                call    putc 
1087			;                pop     af 
1087			;                ret 
1087			; 
1087			; Print_word prints the four hex digits of a word to the serial line. The  
1087			; word is expected to be in HL. 
1087			; 
1087			;print_word      push    hl 
1087			;                push    af 
1087			;                ld      a, h 
1087			;                call    print_byte 
1087			;                ld      a, l 
1087			;                call    print_byte 
1087			;                pop     af 
1087			;                pop     hl 
1087			;                ret 
1087			; 
1087			; Print_byte prints a single byte in hexadecimal notation to the serial line. 
1087			; The byte to be printed is expected to be in A. 
1087			; 
1087			;print_byte      push    af              ; Save the contents of the registers 
1087			;                push    bc 
1087			;                ld      b, a 
1087			;                rrca 
1087			;                rrca 
1087			;                rrca 
1087			;                rrca 
1087			;                call    print_nibble    ; Print high nibble 
1087			;                ld      a, b 
1087			;                call    print_nibble    ; Print low nibble 
1087			;                pop     bc              ; Restore original register contents 
1087			;                pop     af 
1087			;                ret 
1087			 
1087			 
1087			 
1087			 
1087			 
1087			fourehexhl:  
1087 7e				ld a,(hl) 
1088 cd 36 10			call atohex 
108b cb 3f				SRL A 
108d cb 3f				SRL A 
108f cb 3f				SRL A 
1091 cb 3f				SRL A 
1093 47				ld b, a 
1094 23				inc hl 
1095 7e				ld a,(hl) 
1096 23				inc hl 
1097 cd 36 10			call atohex 
109a 80				add b 
109b 57				ld d,a 
109c 7e				ld a,(hl) 
109d cd 36 10			call atohex 
10a0 cb 3f				SRL A 
10a2 cb 3f				SRL A 
10a4 cb 3f				SRL A 
10a6 cb 3f				SRL A 
10a8 47				ld b, a 
10a9 23				inc hl 
10aa 7e				ld a,(hl) 
10ab 23				inc hl 
10ac cd 36 10			call atohex 
10af 80				add b 
10b0 5f				ld e, a 
10b1 d5				push de 
10b2 e1				pop hl 
10b3 c9				ret 
10b4			 
10b4			; pass hl. returns z set if the byte at hl is a digit 
10b4			;isdigithl:  
10b4			;	push bc 
10b4			;	ld a,(hl) 
10b4			;	cp ':' 
10b4			;	jr nc, .isdf 		; > 
10b4			;	cp '0' 
10b4			;	jr c, .isdf		; < 
10b4			; 
10b4			;	; TODO find a better way to set z 
10b4			; 
10b4			;	ld b,a 
10b4			;	cp b 
10b4			;	pop bc 
10b4			;	ret 
10b4			; 
10b4			;.isdf:	; not digit so clear z 
10b4			; 
10b4			;	; TODO find a better way to unset z 
10b4			; 
10b4			;	ld b,a 
10b4			;	inc b 
10b4			;	cp b 
10b4			; 
10b4			;	pop bc 
10b4			;	ret 
10b4				 
10b4				 
10b4			 
10b4			 
10b4			; pass hl as the four byte address to load 
10b4			 
10b4			get_word_hl:  
10b4 e5				push hl 
10b5 cd 54 10			call get_byte 
10b8				 
10b8 47				ld b, a 
10b9			 
10b9 e1				pop hl 
10ba 23				inc hl 
10bb 23				inc hl 
10bc			 
10bc			; TODO not able to handle a-f  
10bc 7e				ld a,(hl) 
10bd			;	;cp ':' 
10bd			;	cp 'g' 
10bd			;	jr nc, .single_byte_hl 		; > 
10bd			;	cp 'G' 
10bd			;	jr nc, .single_byte_hl 		; > 
10bd			;	cp '0' 
10bd			;	jr c, .single_byte_hl		; < 
10bd			 
10bd				;call isdigithl 
10bd fe 00			cp 0 
10bf 28 06			jr z, .single_byte_hl 
10c1			 
10c1			.getwhln:   ; hex word so get next byte 
10c1			 
10c1 cd 54 10			call get_byte 
10c4 6f				ld l, a 
10c5 60				ld h,b 
10c6 c9				ret 
10c7 68			.single_byte_hl:   ld l,b 
10c8 26 00				ld h,0 
10ca c9					ret 
10cb			 
10cb			 
10cb			 
10cb			 
10cb 21 6b 18			ld hl,asc+1 
10ce			;	ld a, (hl) 
10ce			;	call nibble2val 
10ce cd 54 10			call get_byte 
10d1			 
10d1			;	call fourehexhl 
10d1 32 ef e2			ld (scratch+52),a 
10d4				 
10d4 21 ed e2			ld hl,scratch+50 
10d7 22 de e5			ld (os_cur_ptr),hl 
10da			 
10da c9				ret 
10db			 
10db			 
10db			; from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Other:DispA 
10db			 
10db			; Decimal Unsigned Version 
10db			 
10db			;Number in a to decimal ASCII 
10db			;adapted from 16 bit found in z80 Bits to 8 bit by Galandros 
10db			;Example: display a=56 as "056" 
10db			;input: a = number 
10db			;Output: a=0,value of a in the screen 
10db			;destroys af,bc (don't know about hl and de) 
10db			DispAToASCII: 
10db 0e 9c			ld	c,-100 
10dd cd e7 10			call	.Na1 
10e0 0e f6			ld	c,-10 
10e2 cd e7 10			call	.Na1 
10e5 0e ff			ld	c,-1 
10e7 06 2f		.Na1:	ld	b,'0'-1 
10e9 04			.Na2:	inc	b 
10ea 81				add	a,c 
10eb 38 fc			jr	c,.Na2 
10ed 91				sub	c		;works as add 100/10/1 
10ee f5				push af		;safer than ld c,a 
10ef 78				ld	a,b		;char is in b 
10f0			;TODO	CALL	PUTCHAR	;plot a char. Replace with bcall(_PutC) or similar. 
10f0 f1				pop af		;safer than ld a,c 
10f1 c9				ret 
10f2			 
10f2			; Decimal Signed Version 
10f2			 
10f2			; DispA 
10f2			; -------------------------------------------------------------- 
10f2			; Converts a signed integer value to a zero-terminated ASCII 
10f2			; string representative of that value (using radix 10). 
10f2			; -------------------------------------------------------------- 
10f2			; INPUTS: 
10f2			;     HL     Value to convert (two's complement integer). 
10f2			;     DE     Base address of string destination. (pointer). 
10f2			; -------------------------------------------------------------- 
10f2			; OUTPUTS: 
10f2			;     None 
10f2			; -------------------------------------------------------------- 
10f2			; REGISTERS/MEMORY DESTROYED 
10f2			; AF HL 
10f2			; -------------------------------------------------------------- 
10f2			 
10f2			;DispHLToASCII: 
10f2			;   push    de 
10f2			;   push    bc 
10f2			; 
10f2			;; Detect sign of HL. 
10f2			;    bit    7, h 
10f2			;    jr     z, ._DoConvert 
10f2			; 
10f2			;; HL is negative. Output '-' to string and negate HL. 
10f2			;    ld     a, '-' 
10f2			;    ld     (de), a 
10f2			;    inc    de 
10f2			; 
10f2			;; Negate HL (using two's complement) 
10f2			;    xor    a 
10f2			;    sub    l 
10f2			;    ld     l, a 
10f2			;    ld     a, 0     ; Note that XOR A or SUB A would disturb CF 
10f2			;    sbc    a, h 
10f2			;    ld     h, a 
10f2			; 
10f2			;; Convert HL to digit characters 
10f2			;._DoConvert: 
10f2			;    ld     b, 0     ; B will count character length of number 
10f2			;-   ld     a, 10 
10f2			;    syscall  .DivHLByA  ; HL = HL / A, A = remainder 
10f2			;    push   af 
10f2			;    inc    b 
10f2			;    ld     a, h 
10f2			;    or     l 
10f2			;    jr     nz, - 
10f2			; 
10f2			;; Retrieve digits from stack 
10f2			;-   pop    af 
10f2			;    or     $30 
10f2			;    ld     (de), a 
10f2			;    inc    de 
10f2			;    djnz   - 
10f2			; 
10f2			;; Terminate string with NULL 
10f2			;    xor    a 
10f2			;    ld     (de), a 
10f2			; 
10f2			;    pop    bc 
10f2			;    pop    de 
10f2			;    ret 
10f2			 
10f2			;Comments 
10f2			; 
10f2			;    This routine uses the common positive-integer radix conversion algorithm of repeatedly dividing a value by the desired radix (base case: the value is zero) and saving the remainders of each division. 
10f2			;    As this algorithm gives the digits in reverse order, they are pushed onto the hardware stack so that subsequently popping them yields the correct order. 
10f2			;    Note that the output string will not be fixed-width. 
10f2			; 
10f2			;Example Usage 
10f2			; 
10f2			;    ld    hl, -1004 
10f2			;    ld    de, OP1 
10f2			;    call  DispA 
10f2			;    ld    hl, OP1 
10f2			;    syscall  PutS 
10f2			 
10f2			 
10f2			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/string_to_uint16.z80 
10f2			 
10f2			 
10f2			;Converts an ASCII string to an unsigned 16-bit integer 
10f2			;Quits when it reaches a non-decimal digit 
10f2			 
10f2			string_to_uint16: 
10f2			atoui_16: 
10f2			;Input: 
10f2			;     DE points to the string 
10f2			;Outputs: 
10f2			;     HL is the result 
10f2			;     A is the 8-bit value of the number 
10f2			;     DE points to the byte after the number 
10f2			;Destroys: 
10f2			;     BC 
10f2			;       if the string is non-empty, BC is HL/10 
10f2			;Size:  24 bytes 
10f2			;Speed: 42+d(104+{0,9}) 
10f2			;       d is the number of digits in the number 
10f2			;       max is 640 cycles for a 5 digit number 
10f2			;Assuming no leading zeros: 
10f2			;1 digit:  146cc 
10f2			;2 digit:  250cc 
10f2			;3 digit:  354cc or 363cc (avg: 354.126cc) 
10f2			;4 digit:  458cc or 467cc (avg: 458.27cc) 
10f2			;5 digit:  562cc or 571cc or 580cc (avg: 562.4104cc) 
10f2			;avg: 544.81158447265625cc (544+13297/16384) 
10f2			;=============================================================== 
10f2 21 00 00		  ld hl,0 
10f5			.u16a: 
10f5 1a			  ld a,(de) 
10f6 d6 30		  sub 30h 
10f8 fe 0a		  cp 10 
10fa d0			  ret nc 
10fb 13			  inc de 
10fc 44			  ld b,h 
10fd 4d			  ld c,l 
10fe 29			  add hl,hl 
10ff 29			  add hl,hl 
1100 09			  add hl,bc 
1101 29			  add hl,hl 
1102 85			  add a,l 
1103 6f			  ld l,a 
1104 30 ef		  jr nc,.u16a 
1106 24			  inc h 
1107 c3 f5 10		  jp .u16a 
110a			 
110a			 
110a			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/string_to_uint16.z80 
110a			 
110a			;written by Zeda 
110a			;Converts a 16-bit unsigned integer to an ASCII string. 
110a			 
110a			uitoa_16: 
110a			;Input: 
110a			;   DE is the number to convert 
110a			;   HL points to where to write the ASCII string (up to 6 bytes needed). 
110a			;Output: 
110a			;   HL points to the null-terminated ASCII string 
110a			;      NOTE: This isn't necessarily the same as the input HL. 
110a d5			  push de 
110b c5			  push bc 
110c f5			  push af 
110d eb			  ex de,hl 
110e			 
110e 01 f0 d8		  ld bc,-10000 
1111 3e 2f		  ld a,'0'-1 
1113 3c			  inc a 
1114 09			  add hl,bc  
1115 38 fc		   jr c,$-2 
1117 12			  ld (de),a 
1118 13			  inc de 
1119			 
1119 01 e8 03		  ld bc,1000 
111c 3e 3a		  ld a,'9'+1 
111e 3d			  dec a  
111f 09			  add hl,bc  
1120 30 fc		   jr nc,$-2 
1122 12			  ld (de),a 
1123 13			  inc de 
1124			 
1124 01 9c ff		  ld bc,-100 
1127 3e 2f		  ld a,'0'-1 
1129 3c			  inc a  
112a 09			  add hl,bc  
112b 38 fc		   jr c,$-2 
112d 12			  ld (de),a 
112e 13			  inc de 
112f			 
112f 7d			  ld a,l 
1130 26 3a		  ld h,'9'+1 
1132 25			  dec h  
1133 c6 0a		  add a,10  
1135 30 fb		   jr nc,$-3 
1137 c6 30		  add a,'0' 
1139 eb			  ex de,hl 
113a 72			  ld (hl),d 
113b 23			  inc hl 
113c 77			  ld (hl),a 
113d 23			  inc hl 
113e 36 00		  ld (hl),0 
1140			 
1140			;Now strip the leading zeros 
1140 0e fa		  ld c,-6 
1142 09			  add hl,bc 
1143 3e 30		  ld a,'0' 
1145 23			  inc hl  
1146 be			  cp (hl)  
1147 28 fc		  jr z,$-2 
1149			 
1149			;Make sure that the string is non-empty! 
1149 7e			  ld a,(hl) 
114a b7			  or a 
114b 20 01		  jr nz,.atoub 
114d 2b			  dec hl 
114e			.atoub: 
114e			 
114e f1			  pop af 
114f c1			  pop bc 
1150 d1			  pop de 
1151 c9			  ret 
1152			 
1152			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/toUpper.z80 
1152			 
1152			toUpper: 
1152			;A is the char. 
1152			;If A is a lowercase letter, this sets it to the matching uppercase 
1152			;18cc or 30cc or 41cc 
1152			;avg: 26.75cc 
1152 fe 61		  cp 'a' 
1154 d8			  ret c 
1155 fe 7b		  cp 'z'+1 
1157 d0			  ret nc 
1158 d6 20		  sub 'a'-'A' 
115a c9			  ret 
115b			 
115b			; https://tutorials.eeems.ca/ASMin28Days/lesson/day16.html#cmp 
115b			 
115b			; String Length 
115b			;With a length-prefixed string, finding the length is trivial. For a null-terminated string, the process is decidedly more involved. This is where CPIR comes in. 
115b			 
115b			; Get the length of the null-terminated string starting at $8000 hl 
115b			;    LD     HL, $8000 
115b			 
115b			strlenz: 
115b			 
115b af			    XOR    A               ; Zero is the value we are looking for. 
115c 47			    LD     B, A             ; Since we haven't the slightest clue as to the  
115d 4f			    LD     C, A             ; actual size of the string, put 0 in BC to search 
115e			                           ; 65, 536 bytes (the entire addressable memory space). 
115e ed b1		    CPIR                   ; Begin search for a byte equalling zero. 
1160			 
1160			; BC has been decremented so that it holds -length. Now need to synthesize a NEG BC. 
1160 67			    LD     H, A             ; Zero HL (basically set it to 65, 536) to get the 
1161 6f			    LD     L, A             ; number of bytes 
1162 ed 42		    SBC    HL, BC           ; Find the size. CPIR doesn't affect carry. 
1164 2b			    DEC    HL              ; Compensate for null. 
1165 c9				ret 
1166			 
1166			; Get the length of the A terminated string starting at $8000 hl 
1166			;    LD     HL, $8000 
1166			 
1166			strlent: 
1166			 
1166			                  ; A is the value we are looking for. 
1166 06 00		    LD     B, 0             ; Since we haven't the slightest clue as to the  
1168 0e 00		    LD     C, 0             ; actual size of the string, put 0 in BC to search 
116a			                           ; 65, 536 bytes (the entire addressable memory space). 
116a ed b1		    CPIR                   ; Begin search for a byte equalling zero. 
116c			 
116c			; BC has been decremented so that it holds -length. Now need to synthesize a NEG BC. 
116c 26 00		    LD     H, 0             ; Zero HL (basically set it to 65, 536) to get the 
116e 2e 00		    LD     L, 0             ; number of bytes 
1170 ed 42		    SBC    HL, BC           ; Find the size. CPIR doesn't affect carry. 
1172 2b			    DEC    HL              ; Compensate for null. 
1173 c9				ret 
1174			 
1174			 
1174			;Comparing Strings 
1174			 
1174			;IN    HL     Address of string1. 
1174			;      DE     Address of string2. 
1174			 
1174			; doc given but wrong??? 
1174			;OUT   zero   Set if string1 = string2, reset if string1 != string2. 
1174			;      carry  Set if string1 > string2, reset if string1 <= string2. 
1174			; tested 
1174			;OUT   carry set  if string1 = string2, carry  reset if string1 != string2. 
1174			 
1174			strcmp_old: 
1174 e5			    PUSH   HL 
1175 d5			    PUSH   DE 
1176			 
1176 1a			    LD     A, (DE)          ; Compare lengths to determine smaller string 
1177 be			    CP     (HL)            ; (want to minimize work). 
1178 38 01		    JR     C, Str1IsBigger 
117a 7e			    LD     A, (HL) 
117b			 
117b			Str1IsBigger: 
117b 4f			    LD     C, A             ; Put length in BC 
117c 06 00		    LD     B, 0 
117e 13			    INC    DE              ; Increment pointers to meat of string. 
117f 23			    INC    HL 
1180			 
1180			CmpLoop: 
1180 1a			    LD     A, (DE)          ; Compare bytes. 
1181 ed a1		    CPI 
1183 20 09		    JR     NZ, NoMatch      ; If (HL) != (DE), abort. 
1185 13			    INC    DE              ; Update pointer. 
1186 ea 80 11		    JP     PE, CmpLoop 
1189			 
1189 d1			    POP    DE 
118a e1			    POP    HL 
118b 1a			    LD     A, (DE)          ; Check string lengths to see if really equal. 
118c be			    CP     (HL) 
118d c9			    RET 
118e			 
118e			NoMatch: 
118e 2b			    DEC    HL 
118f be			    CP     (HL)            ; Compare again to affect carry. 
1190 d1			    POP    DE 
1191 e1			    POP    HL 
1192 c9			    RET 
1193			 
1193			;; test strmp 
1193			; 
1193			;ld de, .str1 
1193			;ld hl, .str2 
1193			;call strcmp 
1193			;jr z, .z1 
1193			;;this 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "NZ1" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			;.z1: 
1193			; 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "ZZ1" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			; 
1193			;ld de, .str1 
1193			;ld hl, .str1 
1193			;call strcmp 
1193			;jr z, .z2 
1193			;;this 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "NZ2" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			;.z2: 
1193			; 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "ZZ2" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			; 
1193			;ld de, .str1 
1193			;ld hl, .str2 
1193			;call strcmp 
1193			;jr c, .c1 
1193			; 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "Nc1" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			;.c1: 
1193			;;this 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "cc1" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			; 
1193			;ld de, .str1 
1193			;ld hl, .str1 
1193			;call strcmp 
1193			;jr c, .c2 
1193			;;this 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "Nc2" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			;.c2: 
1193			; 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "cc2" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			;	NEXTW 
1193			;.str1:   db "string1",0 
1193			;.str2:   db "string2",0 
1193			 
1193			; only care about direct match or not 
1193			; hl and de strings 
1193			; zero set if the same 
1193			 
1193			strcmp: 
1193 1a				ld a, (de) 
1194 be				cp (hl) 
1195 28 02			jr z, .ssame 
1197 b7				or a 
1198 c9				ret 
1199			 
1199			.ssame:  
1199 fe 00			cp 0 
119b c8				ret z 
119c			 
119c 23				inc hl 
119d 13				inc de 
119e 18 f3			jr strcmp 
11a0				 
11a0				 
11a0			 
11a0			;Copyright (c) 2014, Luke Maurits 
11a0			;All rights reserved. 
11a0			; 
11a0			;Redistribution and use in source and binary forms, with or without 
11a0			;modification, are permitted provided that the following conditions are met: 
11a0			; 
11a0			;* Redistributions of source code must retain the above copyright notice, this 
11a0			;  list of conditions and the following disclaimer. 
11a0			; 
11a0			;* Redistributions in binary form must reproduce the above copyright notice, 
11a0			;  this list of conditions and the following disclaimer in the documentation 
11a0			;  and/or other materials provided with the distribution. 
11a0			; 
11a0			;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
11a0			;AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
11a0			;IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
11a0			;DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE 
11a0			;FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
11a0			;DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
11a0			;SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
11a0			;CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
11a0			;OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
11a0			;OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
11a0			 
11a0			; https://github.com/lmaurits/lm512/blob/master/string.z80 
11a0			 
11a0			StrictStrCmp: 
11a0				; Load next chars of each string 
11a0 1a				ld a, (de) 
11a1 47				ld b, a 
11a2 7e				ld a, (hl) 
11a3				; Compare 
11a3 b8				cp b 
11a4				; Return non-zero if chars don't match 
11a4 c0				ret nz 
11a5				; Check for end of both strings 
11a5 fe 00			cp "\0" 
11a7				; Return if strings have ended 
11a7 c8				ret z 
11a8				; Otherwise, advance to next chars 
11a8 23				inc hl 
11a9 13				inc de 
11aa 18 f4			jr StrictStrCmp 
11ac			 
11ac			;end 
11ac			; eof 
11ac			 
11ac			 
11ac			 
11ac			 
11ac			 
11ac			 
# End of file firmware_strings.asm
11ac			include "firmware_memory.asm"   ; malloc and free  
11ac			 
11ac			if DEBUG_FORTH_MALLOC_HIGH 
11ac			.mallocsize: db "Wants malloc >256",0 
11ac			.mallocasize: db "MALLOC gives >256",0 
11ac			.malloczero: db "MALLOC gives zero",0 
11ac			 
11ac			malloc_guard_zerolen: 
11ac				push hl 
11ac				push de 
11ac				push af 
11ac			 
11ac				ld de, 0 
11ac			        call cmp16 
11ac				jr nz, .lowalloz 
11ac			 
11ac				push hl 
11ac				push de 
11ac					ld hl, display_fb0 
11ac					ld (display_fb_active), hl 
11ac				call clear_display 
11ac				ld a, 0 
11ac				ld de, .malloczero 
11ac				call str_at_display 
11ac				call update_display 
11ac				call delay1s 
11ac				call delay1s 
11ac				call bp_on 
11ac			;	ld a, 0 
11ac			;	ld (os_view_disable), a 
11ac			 
11ac				pop de 
11ac				pop hl 
11ac			 
11ac				 
11ac			 
11ac				CALLMONITOR 
11ac			.lowalloz: 
11ac			 
11ac			 
11ac				pop af 
11ac				pop de 
11ac				pop hl 
11ac			ret 
11ac			 
11ac			malloc_guard_entry: 
11ac				push hl 
11ac				push de 
11ac				push af 
11ac			 
11ac			 	or a      ;clear carry flag 
11ac				push hl 
11ac				ld de, 255 
11ac				sbc hl, de 
11ac				jr c, .lowalloc 
11ac			 
11ac				push de 
11ac					ld hl, display_fb0 
11ac					ld (display_fb_active), hl 
11ac				call clear_display 
11ac				ld a, 0 
11ac				ld de, .mallocsize 
11ac				call str_at_display 
11ac				call update_display 
11ac				call delay1s 
11ac				call delay1s 
11ac			;	ld a, 0 
11ac			;	ld (os_view_disable), a 
11ac				call bp_on 
11ac			 
11ac				pop de 
11ac				pop hl 
11ac			 
11ac				 
11ac			 
11ac				CALLMONITOR 
11ac				jr .lowdone 
11ac			.lowalloc: 
11ac			 
11ac			 
11ac				pop hl 
11ac			.lowdone:	pop af 
11ac				pop de 
11ac				pop hl 
11ac			ret 
11ac			 
11ac			malloc_guard_exit: 
11ac				push hl 
11ac				push de 
11ac				push af 
11ac			 
11ac			 	or a      ;clear carry flag 
11ac				push hl 
11ac				ld de, 255 
11ac				sbc hl, de 
11ac				jr c, .lowallocx 
11ac			 
11ac				push de 
11ac					ld hl, display_fb0 
11ac					ld (display_fb_active), hl 
11ac				call clear_display 
11ac				ld a, 0 
11ac				ld de, .mallocasize 
11ac				call str_at_display 
11ac				call update_display 
11ac				call delay1s 
11ac				call delay1s 
11ac			;	ld a, 0 
11ac			;	ld (os_view_disable), a 
11ac				call bp_on 
11ac				pop de 
11ac				pop hl 
11ac			 
11ac				CALLMONITOR 
11ac				jr .lowdonex 
11ac			.lowallocx: 
11ac			 
11ac				pop hl 
11ac			.lowdonex:	pop af 
11ac				pop de 
11ac				pop hl 
11ac			ret 
11ac			endif 
11ac			 
11ac			if MALLOC_2 
11ac			; Z80 Malloc and Free Functions 
11ac			 
11ac			; Malloc Function: 
11ac			; Input: 
11ac			;   HL: Size of block to allocate 
11ac			; Output: 
11ac			;   HL: Pointer to allocated memory block (NULL if allocation fails) 
11ac			 
11ac			malloc: 
11ac				 
11ac			if DEBUG_FORTH_MALLOC_HIGH 
11ac			call malloc_guard_entry 
11ac			endif 
11ac			 
11ac			 
11ac			 
11ac			 
11ac					if DEBUG_FORTH_MALLOC 
11ac						DMARK "mal" 
11ac						CALLMONITOR 
11ac					endif 
11ac			    push af            ; Save AF register 
11ac			    ld a, l            ; Load low byte of size into A 
11ac			    or h               ; Check if size is zero 
11ac			    jp z, malloc_exit  ; If size is zero, exit with NULL pointer 
11ac			 
11ac			    ; Allocate memory 
11ac			    ld hl, (heap_start) ; Load start of heap into HL 
11ac					if DEBUG_FORTH_MALLOC 
11ac						DMARK "ma1" 
11ac						CALLMONITOR 
11ac					endif 
11ac			    call malloc_internal ; Call internal malloc function 
11ac			    pop af             ; Restore AF register 
11ac			if DEBUG_FORTH_MALLOC_HIGH 
11ac			call malloc_guard_exit 
11ac			call malloc_guard_zerolen 
11ac			endif 
11ac			    ret                ; Return 
11ac			 
11ac			; Free Function: 
11ac			; Input: 
11ac			;   HL: Pointer to memory block to free 
11ac			; Output: 
11ac			;   None 
11ac			 
11ac			free: 
11ac			    push af            ; Save AF register 
11ac			    ld a, l            ; Load low byte of pointer into A 
11ac			    or h               ; Check if pointer is NULL 
11ac			    jp z, free_exit    ; If pointer is NULL, exit 
11ac			 
11ac			    ; Free memory 
11ac			    ld hl, (heap_start) ; Load start of heap into HL 
11ac			    call free_internal  ; Call internal free function 
11ac			    pop af             ; Restore AF register 
11ac			    ret                ; Return 
11ac			 
11ac			; Internal Malloc Function: 
11ac			; Input: 
11ac			;   HL: Size of block to allocate 
11ac			; Output: 
11ac			;   HL: Pointer to allocated memory block (NULL if allocation fails) 
11ac			 
11ac			malloc_internal: 
11ac			    ld bc, 2           ; Number of bytes to allocate for management overhead 
11ac			    add hl, bc         ; Add management overhead to requested size 
11ac			    ex de, hl          ; Save total size in DE, and keep it in HL 
11ac					if DEBUG_FORTH_MALLOC 
11ac						DMARK "ma2" 
11ac						CALLMONITOR 
11ac					endif 
11ac			 
11ac			    ; Search for free memory block 
11ac			    ld de, (heap_end)  ; Load end of heap into DE 
11ac			    ld bc, 0           ; Initialize counter 
11ac			 
11ac					if DEBUG_FORTH_MALLOC 
11ac						DMARK "ma2" 
11ac						CALLMONITOR 
11ac					endif 
11ac			malloc_search_loop: 
11ac			    ; Check if current block is free 
11ac			    ld a, (hl)         ; Load current block's status (free or used) 
11ac			    cp 0               ; Compare with zero (free) 
11ac			    jr nz, malloc_skip_block_check  ; If not free, skip to the next block 
11ac			 
11ac			    ; Check if current block is large enough 
11ac			    ld a, (hl+1)       ; Load high byte of block size 
11ac			    cp l               ; Compare with low byte of requested size 
11ac			    jr nz, malloc_skip_block_check  ; If not large enough, skip to the next block 
11ac			 
11ac			    ld a, (hl+2)       ; Load low byte of block size 
11ac			    cp h               ; Compare with high byte of requested size 
11ac			    jr c, malloc_skip_block_check   ; If not large enough, skip to the next block 
11ac			 
11ac			    ; Mark block as used 
11ac			    ld (hl), 0xFF      ; Set status byte to indicate used block 
11ac			 
11ac			    ; Calculate remaining space in block 
11ac			    ld bc, 0           ; Clear BC 
11ac			    add hl, bc         ; Increment HL to point to start of data block 
11ac			    add hl, de         ; HL = HL + DE (total size) 
11ac			    ld bc, 1           ; Number of bytes to allocate for management overhead 
11ac			    add hl, bc         ; Add management overhead to start of data block 
11ac			 
11ac			    ; Save pointer to allocated block in HL 
11ac			if DEBUG_FORTH_MALLOC_HIGH 
11ac						DMARK "ma5" 
11ac			call malloc_guard_exit 
11ac			call malloc_guard_zerolen 
11ac			endif 
11ac			    ret 
11ac			 
11ac			malloc_skip_block_check: 
11ac			    ; Move to the next block 
11ac			    ld bc, 3           ; Size of management overhead 
11ac			    add hl, bc         ; Move to the next block 
11ac			    inc de             ; Increment counter 
11ac			 
11ac			    ; Check if we have reached the end of heap 
11ac			    ld a, e            ; Load low byte of heap end address 
11ac			    cp (hl)            ; Compare with low byte of current address 
11ac			    jr nz, malloc_search_loop  ; If not equal, continue searching 
11ac			    ld a, d            ; Load high byte of heap end address 
11ac			    cp 0               ; Check if it's zero (end of memory) 
11ac			    jr nz, malloc_search_loop  ; If not zero, continue searching 
11ac			 
11ac			    ; If we reached here, allocation failed 
11ac			    xor a              ; Set result to NULL 
11ac			if DEBUG_FORTH_MALLOC_HIGH 
11ac						DMARK "ma6" 
11ac			call malloc_guard_exit 
11ac			call malloc_guard_zerolen 
11ac			endif 
11ac			    ret 
11ac			malloc_exit: 
11ac			if DEBUG_FORTH_MALLOC_HIGH 
11ac						DMARK "ma7" 
11ac			call malloc_guard_exit 
11ac			call malloc_guard_zerolen 
11ac			endif 
11ac			    ret 
11ac			 
11ac			; Internal Free Function: 
11ac			; Input: 
11ac			;   HL: Pointer to memory block to free 
11ac			; Output: 
11ac			;   None 
11ac			 
11ac			free_internal: 
11ac			    ld de, (heap_start) ; Load start of heap into DE 
11ac			    ld bc, 0            ; Initialize counter 
11ac			 
11ac			free_search_loop: 
11ac			    ; Check if current block contains the pointer 
11ac			    ld a, l             ; Load low byte of pointer 
11ac			    cp (hl+1)           ; Compare with high byte of current block's address 
11ac			    jr nz, free_skip_block_check  ; If not equal, skip to the next block 
11ac			    ld a, h             ; Load high byte of pointer 
11ac			    cp (hl+2)           ; Compare with low byte of current block's address 
11ac			    jr nz, free_skip_block_check  ; If not equal, skip to the next block 
11ac			 
11ac			    ; Mark block as free 
11ac			    ld (hl), 0          ; Set status byte to indicate free block 
11ac			    ret                 ; Return 
11ac			 
11ac			free_skip_block_check: 
11ac			    ; Move to the next block 
11ac			    ld bc, 3            ; Size of management overhead 
11ac			    add hl, bc          ; Move to the next block 
11ac			    inc de              ; Increment counter 
11ac			 
11ac			    ; Check if we have reached the end of heap 
11ac			    ld a, e             ; Load low byte of heap end address 
11ac			    cp (hl)             ; Compare with low byte of current address 
11ac			    jr nz, free_search_loop  ; If not equal, continue searching 
11ac			    ld a, d             ; Load high byte of heap end address 
11ac			    cp 0                ; Check if it's zero (end of memory) 
11ac			    jr nz, free_search_loop  ; If not zero, continue searching 
11ac			 
11ac			    ; If we reached here, pointer is not found in heap 
11ac			    ret 
11ac			 
11ac			free_exit: 
11ac			    ret                 ; Return 
11ac			 
11ac			; Define heap start and end addresses 
11ac			;heap_start:    .dw 0xC000   ; Start of heap 
11ac			;heap_end:      .dw 0xE000   ; End of heap 
11ac			 
11ac			endif 
11ac			 
11ac			 
11ac			if MALLOC_1 
11ac			 
11ac			 
11ac			 
11ac			; from https://gist.github.com/tomstorey/947a8b084bad69391a4b2a1c5b6d69ca 
11ac			 
11ac			;moved to firmware.asm 
11ac			;heap_start        .equ  0x9000      ; Starting address of heap 
11ac			;heap_size         .equ  0x0100      ; Number of bytes available in heap 
11ac			 
11ac			;      .org 0 
11ac			;      jp    main 
11ac			 
11ac			 
11ac			;      .org  0x100 
11ac			;main: 
11ac			;      ld    HL, 0x8100 
11ac			;      ld    SP, HL 
11ac			; 
11ac			;      call  heap_init 
11ac			; 
11ac			;      ; Make some allocations 
11ac			;      ld    HL, 12 
11ac			;      call  malloc            ; Allocates 0x9004 
11ac			; 
11ac			;      ld    HL, 12 
11ac			;      call  malloc            ; Allocates 0x9014 
11ac			; 
11ac			;      ld    HL, 12 
11ac			;      call  malloc            ; Allocates 0x9024 
11ac			; 
11ac			;      ; Free some allocations 
11ac			;      ld    HL, 0x9014 
11ac			;      call  free 
11ac			; 
11ac			;      ld    HL, 0x9004 
11ac			;      call  free 
11ac			; 
11ac			;      ld    HL, 0x9024 
11ac			;      call  free 
11ac			; 
11ac			; 
11ac			;      halt 
11ac			 
11ac			 
11ac			;------------------------------------------------------------------------------ 
11ac			;     heap_init                                                               : 
11ac			;                                                                             : 
11ac			; Description                                                                 : 
11ac			;     Initialise the heap and make it ready for malloc and free operations.   : 
11ac			;                                                                             : 
11ac			;     The heap is maintained as a linked list, starting with an initial       : 
11ac			;     "dummy block" of zero size which is mainly used to hold a pointer to    : 
11ac			;     the first free block in the heap. Each block then points to the next    : 
11ac			;     free block within the heap, and the free list ends at the first block   : 
11ac			;     with a null pointer to the next free block.                             : 
11ac			;                                                                             : 
11ac			; Parameters                                                                  : 
11ac			;     Inputs are compile-time only. Two defines which specify the starting    : 
11ac			;     address of the heap and its size are required, along with a memory      : 
11ac			;     allocation of 4 consecutive bytes which is used for a dummy block which : 
11ac			;     principally stores a pointer to the first free block in the heap.       : 
11ac			;                                                                             : 
11ac			; Returns                                                                     : 
11ac			;     Nothing                                                                 : 
11ac			;------------------------------------------------------------------------------ 
11ac			heap_init: 
11ac e5			      push  HL 
11ad			 
11ad			      ; Initialise free list struct 
11ad 21 63 61		      ld    HL, heap_start 
11b0 22 5e 61		      ld    (free_list), HL 
11b3 21 00 00		      ld    HL, 0 
11b6 22 60 61		      ld    (free_list+2), HL 
11b9			 
11b9			      ; Insert first free block at bottom of heap, consumes entire heap 
11b9 21 92 e2		      ld    HL, heap_start+heap_size-4 
11bc 22 63 61		      ld    (heap_start), HL        ; Next block (end of free list) 
11bf 21 2f 81		      ld    HL, heap_size-4 
11c2 22 65 61		      ld    (heap_start+2), HL      ; Block size 
11c5			 
11c5			      ; Insert end of free list block at top of heap - two null words will 
11c5			      ; terminate the free list 
11c5 21 00 00		      ld    HL, 0 
11c8 22 94 e2		      ld    (heap_start+heap_size-2), HL 
11cb 22 92 e2		      ld    (heap_start+heap_size-4), HL 
11ce			 
11ce e1			      pop   HL 
11cf			 
11cf c9			      ret 
11d0			 
11d0			 
11d0			;------------------------------------------------------------------------------ 
11d0			;     malloc                                                                  : 
11d0			;                                                                             : 
11d0			; Description                                                                 : 
11d0			;     Allocates the wanted space from the heap and returns the address of the : 
11d0			;     first useable byte of the allocation.                                   : 
11d0			;                                                                             : 
11d0			;     Allocations can happen in one of two ways:                              : 
11d0			;                                                                             : 
11d0			;     1. A free block may be found which is the exact size wanted. In this    : 
11d0			;        case the block is removed from the free list and retuedn to the      : 
11d0			;        caller.                                                              : 
11d0			;     2. A free block may be found which is larger than the size wanted. In   : 
11d0			;        this case, the larger block is split into two. The first portion of  : 
11d0			;        this block will become the requested space by the malloc call and    : 
11d0			;        is returned to the caller. The second portion becomes a new free     : 
11d0			;        block, and the free list is adjusted to maintain continuity via this : 
11d0			;        newly created block.                                                 : 
11d0			;                                                                             : 
11d0			;     malloc does not set any initial value in the allocated space, the       : 
11d0			;     caller is required to do this as required.                              : 
11d0			;                                                                             : 
11d0			;     This implementation of malloc uses the stack exclusively, and is        : 
11d0			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
11d0			;     advisable to disable interrupts before calling malloc, and recommended  : 
11d0			;     to avoid the use of malloc inside ISRs in general.                      : 
11d0			;                                                                             : 
11d0			;     NOTE: heap_init must be called before malloc and free can be used.      : 
11d0			;                                                                             : 
11d0			; Parameters                                                                  : 
11d0			;     HL  Number of bytes wanted                                              : 
11d0			;                                                                             : 
11d0			; Returns                                                                     : 
11d0			;     HL  Address of the first useable byte of the allocation                 : 
11d0			;                                                                             : 
11d0			; Flags                                                                       : 
11d0			;     Z   Set if the allocation did not succeed, clear otherwise              : 
11d0			;                                                                             : 
11d0			; Stack frame                                                                 : 
11d0			;       |             |                                                       : 
11d0			;       +-------------+                                                       : 
11d0			;       |     BC      |                                                       : 
11d0			;       +-------------+                                                       : 
11d0			;       |     DE      |                                                       : 
11d0			;       +-------------+                                                       : 
11d0			;       |     IX      |                                                       : 
11d0			;       +-------------+                                                       : 
11d0			;       |  prev_free  |                                                       : 
11d0			;   +4  +-------------+                                                       : 
11d0			;       |  this_free  |                                                       : 
11d0			;   +2  +-------------+                                                       : 
11d0			;       |  next_free  |                                                       : 
11d0			;   +0  +-------------+                                                       : 
11d0			;       |             |                                                       : 
11d0			;                                                                             : 
11d0			;------------------------------------------------------------------------------ 
11d0			 
11d0			 
11d0			;malloc: 
11d0			; 
11d0			;	SAVESP ON 1 
11d0			; 
11d0			;	call malloc_code 
11d0			; 
11d0			;	CHECKSP ON 1 
11d0			;	ret 
11d0			 
11d0			 
11d0			malloc: 
11d0 c5			      push  BC 
11d1 d5			      push  DE 
11d2 dd e5		      push  IX 
11d4			if DEBUG_FORTH_MALLOC_HIGH 
11d4			call malloc_guard_entry 
11d4			endif 
11d4			 
11d4					if DEBUG_FORTH_MALLOC 
11d4						DMARK "mal" 
11d4						CALLMONITOR 
11d4					endif 
11d4 7c			      ld    A, H                    ; Exit if no space requested 
11d5 b5			      or    L 
11d6 ca 95 12		      jp    Z, malloc_early_exit 
11d9			 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			; 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			 
11d9			 
11d9			 
11d9			 
11d9					if DEBUG_FORTH_MALLOC 
11d9						DMARK "maA" 
11d9						CALLMONITOR 
11d9					endif 
11d9			      ; Set up stack frame 
11d9 eb			      ex    DE, HL 
11da 21 fa ff		      ld    HL, -6                  ; Reserve 6 bytes for stack frame 
11dd 39			      add   HL, SP 
11de f9			      ld    SP, HL 
11df dd 21 00 00	      ld    IX, 0                   ; Use IX as a frame pointer 
11e3 dd 39		      add   IX, SP 
11e5			 
11e5			      ; Setup initial state 
11e5 21 04 00		      ld    HL, 4                   ; want must also include space used by block struct 
11e8 19			      add   HL, DE 
11e9			 
11e9 44			      ld    B, H                    ; Move want to BC 
11ea 4d			      ld    C, L 
11eb			 
11eb 21 5e 61		      ld    HL, free_list           ; Store prev_free ptr to stack 
11ee dd 75 04		      ld    (IX+4), L 
11f1 dd 74 05		      ld    (IX+5), H 
11f4			 
11f4 5e			      ld    E, (HL)                 ; Store this_free ptr to stack 
11f5 23			      inc   HL 
11f6 56			      ld    D, (HL) 
11f7 dd 73 02		      ld    (IX+2), E 
11fa dd 72 03		      ld    (IX+3), D 
11fd eb			      ex    DE, HL                  ; this_free ptr into HL 
11fe			 
11fe					if DEBUG_FORTH_MALLOC 
11fe						DMARK "maB" 
11fe						CALLMONITOR 
11fe					endif 
11fe			      ; Loop through free block list to find some space 
11fe			malloc_find_space: 
11fe 5e			      ld    E, (HL)                 ; Load next_free ptr into DE 
11ff 23			      inc   HL 
1200 56			      ld    D, (HL) 
1201			 
1201 7a			      ld    A, D                    ; Check for null next_free ptr - end of free list 
1202 b3			      or    E 
1203 ca 8f 12		      jp    Z, malloc_no_space 
1206			 
1206 dd 73 00		      ld    (IX+0), E               ; Store next_free ptr to stack 
1209 dd 72 01		      ld    (IX+1), D 
120c			 
120c			      ; Does this block have enough space to make the allocation? 
120c 23			      inc   HL                      ; Load free block size into DE 
120d 5e			      ld    E, (HL) 
120e 23			      inc   HL 
120f 56			      ld    D, (HL) 
1210			 
1210 eb			      ex    DE, HL                  ; Check size of block against want 
1211 b7			      or    A                       ; Ensure carry flag clear 
1212 ed 42		      sbc   HL, BC 
1214 e5			      push  HL                      ; Store the result for later (new block size) 
1215			 
1215 ca 64 12		      jp   Z, malloc_alloc_fit     ; Z means block size matches want - can allocate 
1218 30 1b		      jr    NC, malloc_alloc_split  ; NC means block is bigger than want - can allocate 
121a			 
121a			      ; this_free block is not big enough, setup ptrs to test next free block 
121a e1			      pop   HL                      ; Discard previous result 
121b			 
121b dd 6e 02		      ld    L, (IX+2)               ; Move this_free ptr into prev_free 
121e dd 66 03		      ld    H, (IX+3) 
1221 dd 75 04		      ld    (IX+4), L 
1224 dd 74 05		      ld    (IX+5), H 
1227			 
1227 dd 6e 00		      ld    L, (IX+0)               ; Move next_free ptr into this_free 
122a dd 66 01		      ld    H, (IX+1) 
122d dd 75 02		      ld    (IX+2), L 
1230 dd 74 03		      ld    (IX+3), H 
1233			 
1233					if DEBUG_FORTH_MALLOC 
1233						DMARK "MA>" 
1233						CALLMONITOR 
1233					endif 
1233 18 c9		      jr    malloc_find_space 
1235			 
1235			      ; split a bigger block into two - requested size and remaining size 
1235			malloc_alloc_split: 
1235					if DEBUG_FORTH_MALLOC 
1235						DMARK "MAs" 
1235						CALLMONITOR 
1235					endif 
1235 eb			      ex    DE, HL                  ; Calculate address of new free block 
1236 2b			      dec   HL 
1237 2b			      dec   HL 
1238 2b			      dec   HL 
1239 09			      add   HL, BC 
123a			 
123a			      ; Create a new block and point it at next_free 
123a dd 5e 00		      ld    E, (IX+0)               ; Load next_free ptr into DE 
123d dd 56 01		      ld    D, (IX+1) 
1240			 
1240 73			      ld    (HL), E                 ; Store next_free ptr into new block 
1241 23			      inc   HL 
1242 72			      ld    (HL), D 
1243			 
1243 d1			      pop   DE                      ; Store size of new block into new block 
1244 23			      inc   HL 
1245 73			      ld    (HL), E 
1246 23			      inc   HL 
1247 72			      ld    (HL), D 
1248			 
1248			      ; Update this_free ptr to point to new block 
1248 2b			      dec   HL 
1249 2b			      dec   HL 
124a 2b			      dec   HL 
124b			 
124b dd 5e 02		      ld    E, (IX+2)               ; Take a copy of current this_free ptr 
124e dd 56 03		      ld    D, (IX+3) 
1251			 
1251 dd 75 02		      ld    (IX+2), L               ; Store new block addr as this_free ptr 
1254 dd 74 03		      ld    (IX+3), H 
1257			 
1257			      ; Modify this_free block to be allocation 
1257 eb			      ex    DE, HL 
1258 af			      xor   A                       ; Null the next block ptr of allocated block 
1259 77			      ld    (HL), A 
125a 23			      inc   HL 
125b 77			      ld    (HL), A 
125c			 
125c 23			      inc   HL                      ; Store want size into allocated block 
125d 71			      ld    (HL), C 
125e 23			      inc   HL 
125f 70			      ld    (HL), B 
1260 23			      inc   HL 
1261 e5			      push  HL                      ; Address of allocation to return 
1262			 
1262 18 19		      jr    malloc_update_links 
1264			 
1264			malloc_alloc_fit: 
1264 e1			      pop   HL                      ; Dont need new block size, want is exact fit 
1265			 
1265					if DEBUG_FORTH_MALLOC 
1265						DMARK "MAf" 
1265						CALLMONITOR 
1265					endif 
1265			      ; Modify this_free block to be allocation 
1265 eb			      ex    DE, HL 
1266 2b			      dec   HL 
1267 2b			      dec   HL 
1268 2b			      dec   HL 
1269			 
1269 af			      xor   A                       ; Null the next block ptr of allocated block 
126a 77			      ld    (HL), A 
126b 23			      inc   HL 
126c 77			      ld    (HL), A 
126d			 
126d 23			      inc   HL                      ; Store address of allocation to return 
126e 23			      inc   HL 
126f 23			      inc   HL 
1270 e5			      push  HL 
1271			 
1271			      ; Copy next_free ptr to this_free, remove allocated block from free list 
1271 dd 6e 00		      ld    L, (IX+0)               ; next_free to HL 
1274 dd 66 01		      ld    H, (IX+1) 
1277			 
1277 dd 75 02		      ld    (IX+2), L               ; HL to this_free 
127a dd 74 03		      ld    (IX+3), H 
127d			 
127d			 
127d			malloc_update_links: 
127d			      ; Update prev_free ptr to point to this_free 
127d dd 6e 04		      ld    L, (IX+4)               ; prev_free ptr to HL 
1280 dd 66 05		      ld    H, (IX+5) 
1283			 
1283 dd 5e 02		      ld    E, (IX+2)               ; this_free ptr to DE 
1286 dd 56 03		      ld    D, (IX+3) 
1289			 
1289 73			      ld    (HL), E                 ; this_free ptr into prev_free 
128a 23			      inc   HL 
128b 72			      ld    (HL), D 
128c			 
128c					if DEBUG_FORTH_MALLOC 
128c						DMARK "Mul" 
128c						CALLMONITOR 
128c					endif 
128c			      ; Clear the Z flag to indicate successful allocation 
128c 7a			      ld    A, D 
128d b3			      or    E 
128e			 
128e d1			      pop   DE                      ; Address of allocation 
128f					if DEBUG_FORTH_MALLOC 
128f						DMARK "MAu" 
128f						CALLMONITOR 
128f					endif 
128f			 
128f			malloc_no_space: 
128f 21 06 00		      ld    HL, 6                   ; Clean up stack frame 
1292 39			      add   HL, SP 
1293 f9			      ld    SP, HL 
1294			 
1294 eb			      ex    DE, HL                  ; Alloc addr into HL for return 
1295					if DEBUG_FORTH_MALLOC 
1295						DMARK "MAN" 
1295						CALLMONITOR 
1295					endif 
1295			 
1295			malloc_early_exit: 
1295					if DEBUG_FORTH_MALLOC 
1295						DMARK "MAx" 
1295						CALLMONITOR 
1295					endif 
1295 dd e1		      pop   IX 
1297 d1			      pop   DE 
1298 c1			      pop   BC 
1299			 
1299			if DEBUG_FORTH_MALLOC_HIGH 
1299			call malloc_guard_exit 
1299			call malloc_guard_zerolen 
1299			endif 
1299 c9			      ret 
129a			 
129a			 
129a			;------------------------------------------------------------------------------ 
129a			;     free                                                                    : 
129a			;                                                                             : 
129a			; Description                                                                 : 
129a			;     Return the space pointed to by HL to the heap. HL must be an address as : 
129a			;     returned by malloc, otherwise the behaviour is undefined.               : 
129a			;                                                                             : 
129a			;     Where possible, directly adjacent free blocks will be merged together   : 
129a			;     into larger blocks to help ensure that the heap does not become         : 
129a			;     excessively fragmented.                                                 : 
129a			;                                                                             : 
129a			;     free does not clear or set any other value into the freed space, and    : 
129a			;     therefore its contents may be visible through subsequent malloc's. The  : 
129a			;     caller should clear the freed space as required.                        : 
129a			;                                                                             : 
129a			;     This implementation of free uses the stack exclusively, and is          : 
129a			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
129a			;     advisable to disable interrupts before calling free, and recommended    : 
129a			;     to avoid the use of free inside ISRs in general.                        : 
129a			;                                                                             : 
129a			;     NOTE: heap_init must be called before malloc and free can be used.      : 
129a			;                                                                             : 
129a			; Parameters                                                                  : 
129a			;     HL  Pointer to address of first byte of allocation to be freed          : 
129a			;                                                                             : 
129a			; Returns                                                                     : 
129a			;     Nothing                                                                 : 
129a			;                                                                             : 
129a			; Stack frame                                                                 : 
129a			;       |             |                                                       : 
129a			;       +-------------+                                                       : 
129a			;       |     BC      |                                                       : 
129a			;       +-------------+                                                       : 
129a			;       |     DE      |                                                       : 
129a			;       +-------------+                                                       : 
129a			;       |     IX      |                                                       : 
129a			;       +-------------+                                                       : 
129a			;       |  prev_free  |                                                       : 
129a			;   +2  +-------------+                                                       : 
129a			;       |  next_free  |                                                       : 
129a			;   +0  +-------------+                                                       : 
129a			;       |             |                                                       : 
129a			;                                                                             : 
129a			;------------------------------------------------------------------------------ 
129a			free: 
129a c5			      push  BC 
129b d5			      push  DE 
129c dd e5		      push  IX 
129e			 
129e 7c			      ld    A, H                    ; Exit if ptr is null 
129f b5			      or    L 
12a0 ca 64 13		      jp    Z, free_early_exit 
12a3			 
12a3			      ; Set up stack frame 
12a3 eb			      ex    DE, HL 
12a4 21 fc ff		      ld    HL, -4                  ; Reserve 4 bytes for stack frame 
12a7 39			      add   HL, SP 
12a8 f9			      ld    SP, HL 
12a9 dd 21 00 00	      ld    IX, 0                   ; Use IX as a frame pointer 
12ad dd 39		      add   IX, SP 
12af			 
12af			      ; The address in HL points to the start of the useable allocated space, 
12af			      ; but the block struct starts 4 bytes before this. Sub 4 to get the 
12af			      ; address of the block itself. 
12af eb			      ex    DE, HL 
12b0 11 fc ff		      ld    DE, -4 
12b3 19			      add   HL, DE 
12b4			 
12b4			      ; An allocated block must have a null next block pointer in it 
12b4 7e			      ld    A, (HL) 
12b5 23			      inc   HL 
12b6 b6			      or    (HL) 
12b7 c2 5f 13		      jp    NZ, free_done 
12ba			 
12ba 2b			      dec   HL 
12bb			 
12bb 44			      ld    B, H                    ; Copy HL to BC 
12bc 4d			      ld    C, L 
12bd			 
12bd			      ; Loop through the free list to find the first block with an address 
12bd			      ; higher than the block being freed 
12bd 21 5e 61		      ld    HL, free_list 
12c0			 
12c0			free_find_higher_block: 
12c0 5e			      ld    E, (HL)                 ; Load next ptr from free block 
12c1 23			      inc   HL 
12c2 56			      ld    D, (HL) 
12c3 2b			      dec   HL 
12c4			 
12c4 dd 73 00		      ld    (IX+0), E               ; Save ptr to next free block 
12c7 dd 72 01		      ld    (IX+1), D 
12ca dd 75 02		      ld    (IX+2), L               ; Save ptr to prev free block 
12cd dd 74 03		      ld    (IX+3), H 
12d0			 
12d0 78			      ld    A, B                    ; Check if DE is greater than BC 
12d1 ba			      cp    D                       ; Compare MSB first 
12d2 28 02		      jr    Z, $+4                  ; MSB the same, compare LSB 
12d4 30 04		      jr    NC, free_find_higher_block_skip 
12d6 79			      ld    A, C 
12d7 bb			      cp    E                       ; Then compare LSB 
12d8 38 08		      jr    C, free_found_higher_block 
12da			 
12da			free_find_higher_block_skip: 
12da 7a			      ld    A, D                    ; Reached the end of the free list? 
12db b3			      or    E 
12dc ca 5f 13		      jp    Z, free_done 
12df			 
12df eb			      ex    DE, HL 
12e0			 
12e0 18 de		      jr    free_find_higher_block 
12e2			 
12e2			free_found_higher_block: 
12e2			      ; Insert freed block between prev and next free blocks 
12e2 71			      ld    (HL), C                 ; Point prev free block to freed block 
12e3 23			      inc   HL 
12e4 70			      ld    (HL), B 
12e5			 
12e5 60			      ld    H, B                    ; Point freed block at next free block 
12e6 69			      ld    L, C 
12e7 73			      ld    (HL), E 
12e8 23			      inc   HL 
12e9 72			      ld    (HL), D 
12ea			 
12ea			      ; Check if the freed block is adjacent to the next free block 
12ea 23			      inc   HL                      ; Load size of freed block into HL 
12eb 5e			      ld    E, (HL) 
12ec 23			      inc   HL 
12ed 56			      ld    D, (HL) 
12ee eb			      ex    DE, HL 
12ef			 
12ef 09			      add   HL, BC                  ; Add addr of freed block and its size 
12f0			 
12f0 dd 5e 00		      ld    E, (IX+0)               ; Load addr of next free block into DE 
12f3 dd 56 01		      ld    D, (IX+1) 
12f6			 
12f6 b7			      or    A                       ; Clear the carry flag 
12f7 ed 52		      sbc   HL, DE                  ; Subtract addrs to compare adjacency 
12f9 20 22		      jr    NZ, free_check_adjacent_to_prev 
12fb			 
12fb			      ; Freed block is adjacent to next, merge into one bigger block 
12fb eb			      ex    DE, HL                  ; Load next ptr from next block into DE 
12fc 5e			      ld    E, (HL) 
12fd 23			      inc   HL 
12fe 56			      ld    D, (HL) 
12ff e5			      push  HL                      ; Save ptr to next block for later 
1300			 
1300 60			      ld    H, B                    ; Store ptr from next block into freed block 
1301 69			      ld    L, C 
1302 73			      ld    (HL), E 
1303 23			      inc   HL 
1304 72			      ld    (HL), D 
1305			 
1305 e1			      pop   HL                      ; Restore ptr to next block 
1306 23			      inc   HL                      ; Load size of next block into DE 
1307 5e			      ld    E, (HL) 
1308 23			      inc   HL 
1309 56			      ld    D, (HL) 
130a d5			      push  DE                      ; Save next block size for later 
130b			 
130b 60			      ld    H, B                    ; Load size of freed block into HL 
130c 69			      ld    L, C 
130d 23			      inc   HL 
130e 23			      inc   HL 
130f 5e			      ld    E, (HL) 
1310 23			      inc   HL 
1311 56			      ld    D, (HL) 
1312 eb			      ex    DE, HL 
1313			 
1313 d1			      pop   DE                      ; Restore size of next block 
1314 19			      add   HL, DE                  ; Add sizes of both blocks 
1315 eb			      ex    DE, HL 
1316			 
1316 60			      ld    H, B                    ; Store new bigger size into freed block 
1317 69			      ld    L, C 
1318 23			      inc   HL 
1319 23			      inc   HL 
131a 73			      ld    (HL), E 
131b 23			      inc   HL 
131c 72			      ld    (HL), D 
131d			 
131d			free_check_adjacent_to_prev: 
131d			      ; Check if the freed block is adjacent to the prev free block 
131d dd 6e 02		      ld    L, (IX+2)               ; Prev free block ptr into HL 
1320 dd 66 03		      ld    H, (IX+3) 
1323			 
1323 23			      inc   HL                      ; Size of prev free block into DE 
1324 23			      inc   HL 
1325 5e			      ld    E, (HL) 
1326 23			      inc   HL 
1327 56			      ld    D, (HL) 
1328 2b			      dec   HL 
1329 2b			      dec   HL 
132a 2b			      dec   HL 
132b			 
132b 19			      add   HL, DE                  ; Add prev block addr and size 
132c			 
132c b7			      or    A                       ; Clear the carry flag 
132d ed 42		      sbc   HL, BC                  ; Subtract addrs to compare adjacency 
132f 20 2e		      jr    NZ, free_done 
1331			 
1331			      ; Freed block is adjacent to prev, merge into one bigger block 
1331 60			      ld    H, B                    ; Load next ptr from freed block into DE 
1332 69			      ld    L, C 
1333 5e			      ld    E, (HL) 
1334 23			      inc   HL 
1335 56			      ld    D, (HL) 
1336 e5			      push  HL                      ; Save freed block ptr for later 
1337			 
1337 dd 6e 02		      ld    L, (IX+2)               ; Store freed block ptr into prev block 
133a dd 66 03		      ld    H, (IX+3) 
133d 73			      ld    (HL), E 
133e 23			      inc   HL 
133f 72			      ld    (HL), D 
1340			 
1340 e1			      pop   HL                      ; Restore freed block ptr 
1341 23			      inc   HL                      ; Load size of freed block into DE 
1342 5e			      ld    E, (HL) 
1343 23			      inc   HL 
1344 56			      ld    D, (HL) 
1345 d5			      push  DE                      ; Save freed block size for later 
1346			 
1346 dd 6e 02		      ld    L, (IX+2)               ; Load size of prev block into DE 
1349 dd 66 03		      ld    H, (IX+3) 
134c 23			      inc   HL 
134d 23			      inc   HL 
134e 5e			      ld    E, (HL) 
134f 23			      inc   HL 
1350 56			      ld    D, (HL) 
1351			 
1351 e1			      pop   HL                      ; Add sizes of both blocks 
1352 19			      add   HL, DE 
1353 eb			      ex    DE, HL 
1354			 
1354 dd 6e 02		      ld    L, (IX+2)               ; Store new bigger size into prev block 
1357 dd 66 03		      ld    H, (IX+3) 
135a 23			      inc   HL 
135b 23			      inc   HL 
135c 73			      ld    (HL), E 
135d 23			      inc   HL 
135e 72			      ld    (HL), D 
135f			 
135f			free_done: 
135f 21 04 00		      ld    HL, 4                   ; Clean up stack frame 
1362 39			      add   HL, SP 
1363 f9			      ld    SP, HL 
1364			 
1364			free_early_exit: 
1364 dd e1		      pop   IX 
1366 d1			      pop   DE 
1367 c1			      pop   BC 
1368			 
1368 c9			      ret 
1369			 
1369			; moved to firmware.asm 
1369			; 
1369			;free_list         .dw   0     ; Block struct for start of free list (MUST be 4 bytes) 
1369			;                  .dw   0 
1369			 
1369			 
1369			endif 
1369			 
1369			 
1369			if MALLOC_3 
1369			; https://gist.githubusercontent.com/tomstorey/947a8b084bad69391a4b2a1c5b6d69ca/raw/5a08fb30a480d98c0deb4a6afe2d48961cc8e9d9/z80_malloc.s 
1369			;heap_start        .equ  0x9000      ; Starting address of heap 
1369			;heap_size         .equ  0x0100      ; Number of bytes available in heap 
1369			; 
1369			 ;     .org 0 
1369			  ;    jp    main 
1369			; 
1369			; 
1369			 ;     .org  0x100 
1369			;main: 
1369			 ;     ld    HL, 0x8100 
1369			  ;    ld    SP, HL 
1369			; 
1369			;      call  heap_init 
1369			 
1369			      ; Make some allocations 
1369			;      ld    HL, 12 
1369			;      call  malloc            ; Allocates 0x9004 
1369			; 
1369			 ;     ld    HL, 12 
1369			;      call  malloc            ; Allocates 0x9014 
1369			 
1369			;      ld    HL, 12 
1369			;      call  malloc            ; Allocates 0x9024 
1369			 
1369			      ; Free some allocations 
1369			;      ld    HL, 0x9014 
1369			;      call  free 
1369			 
1369			;      ld    HL, 0x9004 
1369			;      call  free 
1369			; 
1369			;      ld    HL, 0x9024 
1369			;      call  free 
1369			 
1369			 
1369			 ;     halt 
1369			 
1369			 
1369			;------------------------------------------------------------------------------ 
1369			;     heap_init                                                               : 
1369			;                                                                             : 
1369			; Description                                                                 : 
1369			;     Initialise the heap and make it ready for malloc and free operations.   : 
1369			;                                                                             : 
1369			;     The heap is maintained as a linked list, starting with an initial       : 
1369			;     "dummy block" of zero size which is mainly used to hold a pointer to    : 
1369			;     the first free block in the heap. Each block then points to the next    : 
1369			;     free block within the heap, and the free list ends at the first block   : 
1369			;     with a null pointer to the next free block.                             : 
1369			;                                                                             : 
1369			; Parameters                                                                  : 
1369			;     Inputs are compile-time only. Two defines which specify the starting    : 
1369			;     address of the heap and its size are required, along with a memory      : 
1369			;     allocation of 4 consecutive bytes which is used for a dummy block which : 
1369			;     principally stores a pointer to the first free block in the heap.       : 
1369			;                                                                             : 
1369			; Returns                                                                     : 
1369			;     Nothing                                                                 : 
1369			;------------------------------------------------------------------------------ 
1369			heap_init: 
1369			      push  HL 
1369			 
1369			      ; Initialise free list struct 
1369			      ld    HL, heap_start 
1369			      ld    (free_list), HL 
1369			      ld    HL, 0 
1369			      ld    (free_list+2), HL 
1369			 
1369			      ; Insert first free block at bottom of heap, consumes entire heap 
1369			      ld    HL, heap_start+heap_size-4 
1369			      ld    (heap_start), HL        ; Next block (end of free list) 
1369			      ld    HL, heap_size-4 
1369			      ld    (heap_start+2), HL      ; Block size 
1369			 
1369			      ; Insert end of free list block at top of heap - two null words will 
1369			      ; terminate the free list 
1369			      ld    HL, 0 
1369			      ld    (heap_start+heap_size-2), HL 
1369			      ld    (heap_start+heap_size-4), HL 
1369			 
1369			      pop   HL 
1369			 
1369			      ret 
1369			 
1369			 
1369			;------------------------------------------------------------------------------ 
1369			;     malloc                                                                  : 
1369			;                                                                             : 
1369			; Description                                                                 : 
1369			;     Allocates the wanted space from the heap and returns the address of the : 
1369			;     first useable byte of the allocation.                                   : 
1369			;                                                                             : 
1369			;     Allocations can happen in one of two ways:                              : 
1369			;                                                                             : 
1369			;     1. A free block may be found which is the exact size wanted. In this    : 
1369			;        case the block is removed from the free list and retuedn to the      : 
1369			;        caller.                                                              : 
1369			;     2. A free block may be found which is larger than the size wanted. In   : 
1369			;        this case, the larger block is split into two. The first portion of  : 
1369			;        this block will become the requested space by the malloc call and    : 
1369			;        is returned to the caller. The second portion becomes a new free     : 
1369			;        block, and the free list is adjusted to maintain continuity via this : 
1369			;        newly created block.                                                 : 
1369			;                                                                             : 
1369			;     malloc does not set any initial value in the allocated space, the       : 
1369			;     caller is required to do this as required.                              : 
1369			;                                                                             : 
1369			;     This implementation of malloc uses the stack exclusively, and is        : 
1369			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
1369			;     advisable to disable interrupts before calling malloc, and recommended  : 
1369			;     to avoid the use of malloc inside ISRs in general.                      : 
1369			;                                                                             : 
1369			;     NOTE: heap_init must be called before malloc and free can be used.      : 
1369			;                                                                             : 
1369			; Parameters                                                                  : 
1369			;     HL  Number of bytes wanted                                              : 
1369			;                                                                             : 
1369			; Returns                                                                     : 
1369			;     HL  Address of the first useable byte of the allocation                 : 
1369			;                                                                             : 
1369			; Flags                                                                       : 
1369			;     Z   Set if the allocation did not succeed, clear otherwise              : 
1369			;                                                                             : 
1369			; Stack frame                                                                 : 
1369			;       |             |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |     BC      |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |     DE      |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |     IX      |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |  prev_free  |                                                       : 
1369			;   +4  +-------------+                                                       : 
1369			;       |  this_free  |                                                       : 
1369			;   +2  +-------------+                                                       : 
1369			;       |  next_free  |                                                       : 
1369			;   +0  +-------------+                                                       : 
1369			;       |             |                                                       : 
1369			;                                                                             : 
1369			;------------------------------------------------------------------------------ 
1369			malloc: 
1369			      push  BC 
1369			      push  DE 
1369			      push  IX 
1369			 
1369			      ld    A, H                    ; Exit if no space requested 
1369			      or    L 
1369			      jp    Z, malloc_early_exit 
1369			 
1369			      ; Set up stack frame 
1369			      ex    DE, HL 
1369			      ld    HL, -6                  ; Reserve 6 bytes for stack frame 
1369			      add   HL, SP 
1369			      ld    SP, HL 
1369			      ld    IX, 0                   ; Use IX as a frame pointer 
1369			      add   IX, SP 
1369			 
1369			      ; Setup initial state 
1369			      ld    HL, 4                   ; want must also include space used by block struct 
1369			      add   HL, DE 
1369			 
1369			      ld    B, H                    ; Move want to BC 
1369			      ld    C, L 
1369			 
1369			      ld    HL, free_list           ; Store prev_free ptr to stack 
1369			      ld    (IX+4), L 
1369			      ld    (IX+5), H 
1369			 
1369			      ld    E, (HL)                 ; Store this_free ptr to stack 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      ld    (IX+2), E 
1369			      ld    (IX+3), D 
1369			      ex    DE, HL                  ; this_free ptr into HL 
1369			 
1369			      ; Loop through free block list to find some space 
1369			malloc_find_space: 
1369			      ld    E, (HL)                 ; Load next_free ptr into DE 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			 
1369			      ld    A, D                    ; Check for null next_free ptr - end of free list 
1369			      or    E 
1369			      jp    Z, malloc_no_space 
1369			 
1369			      ld    (IX+0), E               ; Store next_free ptr to stack 
1369			      ld    (IX+1), D 
1369			 
1369			      ; Does this block have enough space to make the allocation? 
1369			      inc   HL                      ; Load free block size into DE 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			 
1369			      ex    DE, HL                  ; Check size of block against want 
1369			      or    A                       ; Ensure carry flag clear 
1369			      sbc   HL, BC 
1369			      push  HL                      ; Store the result for later (new block size) 
1369			 
1369			      jr    Z, malloc_alloc_fit     ; Z means block size matches want - can allocate 
1369			      jr    NC, malloc_alloc_split  ; NC means block is bigger than want - can allocate 
1369			 
1369			      ; this_free block is not big enough, setup ptrs to test next free block 
1369			      pop   HL                      ; Discard previous result 
1369			 
1369			      ld    L, (IX+2)               ; Move this_free ptr into prev_free 
1369			      ld    H, (IX+3) 
1369			      ld    (IX+4), L 
1369			      ld    (IX+5), H 
1369			 
1369			      ld    L, (IX+0)               ; Move next_free ptr into this_free 
1369			      ld    H, (IX+1) 
1369			      ld    (IX+2), L 
1369			      ld    (IX+3), H 
1369			 
1369			      jr    malloc_find_space 
1369			 
1369			      ; split a bigger block into two - requested size and remaining size 
1369			malloc_alloc_split: 
1369			      ex    DE, HL                  ; Calculate address of new free block 
1369			      dec   HL 
1369			      dec   HL 
1369			      dec   HL 
1369			      add   HL, BC 
1369			 
1369			      ; Create a new block and point it at next_free 
1369			      ld    E, (IX+0)               ; Load next_free ptr into DE 
1369			      ld    D, (IX+1) 
1369			 
1369			      ld    (HL), E                 ; Store next_free ptr into new block 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			      pop   DE                      ; Store size of new block into new block 
1369			      inc   HL 
1369			      ld    (HL), E 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			      ; Update this_free ptr to point to new block 
1369			      dec   HL 
1369			      dec   HL 
1369			      dec   HL 
1369			 
1369			      ld    E, (IX+2)               ; Take a copy of current this_free ptr 
1369			      ld    D, (IX+3) 
1369			 
1369			      ld    (IX+2), L               ; Store new block addr as this_free ptr 
1369			      ld    (IX+3), H 
1369			 
1369			      ; Modify this_free block to be allocation 
1369			      ex    DE, HL 
1369			      xor   A                       ; Null the next block ptr of allocated block 
1369			      ld    (HL), A 
1369			      inc   HL 
1369			      ld    (HL), A 
1369			 
1369			      inc   HL                      ; Store want size into allocated block 
1369			      ld    (HL), C 
1369			      inc   HL 
1369			      ld    (HL), B 
1369			      inc   HL 
1369			      push  HL                      ; Address of allocation to return 
1369			 
1369			      jr    malloc_update_links 
1369			 
1369			malloc_alloc_fit: 
1369			      pop   HL                      ; Dont need new block size, want is exact fit 
1369			 
1369			      ; Modify this_free block to be allocation 
1369			      ex    DE, HL 
1369			      dec   HL 
1369			      dec   HL 
1369			      dec   HL 
1369			 
1369			      xor   A                       ; Null the next block ptr of allocated block 
1369			      ld    (HL), A 
1369			      inc   HL 
1369			      ld    (HL), A 
1369			 
1369			      inc   HL                      ; Store address of allocation to return 
1369			      inc   HL 
1369			      inc   HL 
1369			      push  HL 
1369			 
1369			      ; Copy next_free ptr to this_free, remove allocated block from free list 
1369			      ld    L, (IX+0)               ; next_free to HL 
1369			      ld    H, (IX+1) 
1369			 
1369			      ld    (IX+2), L               ; HL to this_free 
1369			      ld    (IX+3), H 
1369			 
1369			 
1369			malloc_update_links: 
1369			      ; Update prev_free ptr to point to this_free 
1369			      ld    L, (IX+4)               ; prev_free ptr to HL 
1369			      ld    H, (IX+5) 
1369			 
1369			      ld    E, (IX+2)               ; this_free ptr to DE 
1369			      ld    D, (IX+3) 
1369			 
1369			      ld    (HL), E                 ; this_free ptr into prev_free 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			      ; Clear the Z flag to indicate successful allocation 
1369			      ld    A, D 
1369			      or    E 
1369			 
1369			      pop   DE                      ; Address of allocation 
1369			 
1369			malloc_no_space: 
1369			      ld    HL, 6                   ; Clean up stack frame 
1369			      add   HL, SP 
1369			      ld    SP, HL 
1369			 
1369			      ex    DE, HL                  ; Alloc addr into HL for return 
1369			 
1369			malloc_early_exit: 
1369			      pop   IX 
1369			      pop   DE 
1369			      pop   BC 
1369			 
1369			      ret 
1369			 
1369			 
1369			;------------------------------------------------------------------------------ 
1369			;     free                                                                    : 
1369			;                                                                             : 
1369			; Description                                                                 : 
1369			;     Return the space pointed to by HL to the heap. HL must be an address as : 
1369			;     returned by malloc, otherwise the behaviour is undefined.               : 
1369			;                                                                             : 
1369			;     Where possible, directly adjacent free blocks will be merged together   : 
1369			;     into larger blocks to help ensure that the heap does not become         : 
1369			;     excessively fragmented.                                                 : 
1369			;                                                                             : 
1369			;     free does not clear or set any other value into the freed space, and    : 
1369			;     therefore its contents may be visible through subsequent malloc's. The  : 
1369			;     caller should clear the freed space as required.                        : 
1369			;                                                                             : 
1369			;     This implementation of free uses the stack exclusively, and is          : 
1369			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
1369			;     advisable to disable interrupts before calling free, and recommended    : 
1369			;     to avoid the use of free inside ISRs in general.                        : 
1369			;                                                                             : 
1369			;     NOTE: heap_init must be called before malloc and free can be used.      : 
1369			;                                                                             : 
1369			; Parameters                                                                  : 
1369			;     HL  Pointer to address of first byte of allocation to be freed          : 
1369			;                                                                             : 
1369			; Returns                                                                     : 
1369			;     Nothing                                                                 : 
1369			;                                                                             : 
1369			; Stack frame                                                                 : 
1369			;       |             |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |     BC      |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |     DE      |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |     IX      |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |  prev_free  |                                                       : 
1369			;   +2  +-------------+                                                       : 
1369			;       |  next_free  |                                                       : 
1369			;   +0  +-------------+                                                       : 
1369			;       |             |                                                       : 
1369			;                                                                             : 
1369			;------------------------------------------------------------------------------ 
1369			free: 
1369			      push  BC 
1369			      push  DE 
1369			      push  IX 
1369			 
1369			      ld    A, H                    ; Exit if ptr is null 
1369			      or    L 
1369			      jp    Z, free_early_exit 
1369			 
1369			      ; Set up stack frame 
1369			      ex    DE, HL 
1369			      ld    HL, -4                  ; Reserve 4 bytes for stack frame 
1369			      add   HL, SP 
1369			      ld    SP, HL 
1369			      ld    IX, 0                   ; Use IX as a frame pointer 
1369			      add   IX, SP 
1369			 
1369			      ; The address in HL points to the start of the useable allocated space, 
1369			      ; but the block struct starts 4 bytes before this. Sub 4 to get the 
1369			      ; address of the block itself. 
1369			      ex    DE, HL 
1369			      ld    DE, -4 
1369			      add   HL, DE 
1369			 
1369			      ; An allocated block must have a null next block pointer in it 
1369			      ld    A, (HL) 
1369			      inc   HL 
1369			      or    (HL) 
1369			      jp    NZ, free_done 
1369			 
1369			      dec   HL 
1369			 
1369			      ld    B, H                    ; Copy HL to BC 
1369			      ld    C, L 
1369			 
1369			      ; Loop through the free list to find the first block with an address 
1369			      ; higher than the block being freed 
1369			      ld    HL, free_list 
1369			 
1369			free_find_higher_block: 
1369			      ld    E, (HL)                 ; Load next ptr from free block 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      dec   HL 
1369			 
1369			      ld    (IX+0), E               ; Save ptr to next free block 
1369			      ld    (IX+1), D 
1369			      ld    (IX+2), L               ; Save ptr to prev free block 
1369			      ld    (IX+3), H 
1369			 
1369			      ld    A, B                    ; Check if DE is greater than BC 
1369			      cp    D                       ; Compare MSB first 
1369			      jr    Z, $+4                  ; MSB the same, compare LSB 
1369			      jr    NC, free_find_higher_block_skip 
1369			      ld    A, C 
1369			      cp    E                       ; Then compare LSB 
1369			      jr    C, free_found_higher_block 
1369			 
1369			free_find_higher_block_skip: 
1369			      ld    A, D                    ; Reached the end of the free list? 
1369			      or    E 
1369			      jp    Z, free_done 
1369			 
1369			      ex    DE, HL 
1369			 
1369			      jr    free_find_higher_block 
1369			 
1369			free_found_higher_block: 
1369			      ; Insert freed block between prev and next free blocks 
1369			      ld    (HL), C                 ; Point prev free block to freed block 
1369			      inc   HL 
1369			      ld    (HL), B 
1369			 
1369			      ld    H, B                    ; Point freed block at next free block 
1369			      ld    L, C 
1369			      ld    (HL), E 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			      ; Check if the freed block is adjacent to the next free block 
1369			      inc   HL                      ; Load size of freed block into HL 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      ex    DE, HL 
1369			 
1369			      add   HL, BC                  ; Add addr of freed block and its size 
1369			 
1369			      ld    E, (IX+0)               ; Load addr of next free block into DE 
1369			      ld    D, (IX+1) 
1369			 
1369			      or    A                       ; Clear the carry flag 
1369			      sbc   HL, DE                  ; Subtract addrs to compare adjacency 
1369			      jr    NZ, free_check_adjacent_to_prev 
1369			 
1369			      ; Freed block is adjacent to next, merge into one bigger block 
1369			      ex    DE, HL                  ; Load next ptr from next block into DE 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      push  HL                      ; Save ptr to next block for later 
1369			 
1369			      ld    H, B                    ; Store ptr from next block into freed block 
1369			      ld    L, C 
1369			      ld    (HL), E 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			      pop   HL                      ; Restore ptr to next block 
1369			      inc   HL                      ; Load size of next block into DE 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      push  DE                      ; Save next block size for later 
1369			 
1369			      ld    H, B                    ; Load size of freed block into HL 
1369			      ld    L, C 
1369			      inc   HL 
1369			      inc   HL 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      ex    DE, HL 
1369			 
1369			      pop   DE                      ; Restore size of next block 
1369			      add   HL, DE                  ; Add sizes of both blocks 
1369			      ex    DE, HL 
1369			 
1369			      ld    H, B                    ; Store new bigger size into freed block 
1369			      ld    L, C 
1369			      inc   HL 
1369			      inc   HL 
1369			      ld    (HL), E 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			free_check_adjacent_to_prev: 
1369			      ; Check if the freed block is adjacent to the prev free block 
1369			      ld    L, (IX+2)               ; Prev free block ptr into HL 
1369			      ld    H, (IX+3) 
1369			 
1369			      inc   HL                      ; Size of prev free block into DE 
1369			      inc   HL 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      dec   HL 
1369			      dec   HL 
1369			      dec   HL 
1369			 
1369			      add   HL, DE                  ; Add prev block addr and size 
1369			 
1369			      or    A                       ; Clear the carry flag 
1369			      sbc   HL, BC                  ; Subtract addrs to compare adjacency 
1369			      jr    NZ, free_done 
1369			 
1369			      ; Freed block is adjacent to prev, merge into one bigger block 
1369			      ld    H, B                    ; Load next ptr from freed block into DE 
1369			      ld    L, C 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      push  HL                      ; Save freed block ptr for later 
1369			 
1369			      ld    L, (IX+2)               ; Store freed block ptr into prev block 
1369			      ld    H, (IX+3) 
1369			      ld    (HL), E 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			      pop   HL                      ; Restore freed block ptr 
1369			      inc   HL                      ; Load size of freed block into DE 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      push  DE                      ; Save freed block size for later 
1369			 
1369			      ld    L, (IX+2)               ; Load size of prev block into DE 
1369			      ld    H, (IX+3) 
1369			      inc   HL 
1369			      inc   HL 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			 
1369			      pop   HL                      ; Add sizes of both blocks 
1369			      add   HL, DE 
1369			      ex    DE, HL 
1369			 
1369			      ld    L, (IX+2)               ; Store new bigger size into prev block 
1369			      ld    H, (IX+3) 
1369			      inc   HL 
1369			      inc   HL 
1369			      ld    (HL), E 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			free_done: 
1369			      ld    HL, 4                   ; Clean up stack frame 
1369			      add   HL, SP 
1369			      ld    SP, HL 
1369			 
1369			free_early_exit: 
1369			      pop   IX 
1369			      pop   DE 
1369			      pop   BC 
1369			 
1369			      ret 
1369			 
1369			 
1369			;      .org 0x8000 
1369			; 
1369			;free_list         .dw   0     ; Block struct for start of free list (MUST be 4 bytes) 
1369			 ;                 .dw   0 
1369			 
1369			endif 
1369			 
1369			 
1369			if MALLOC_4 
1369			 
1369			; My memory allocation code. Very very simple.... 
1369			; allocate space under 250 chars 
1369			 
1369			heap_init: 
1369				; init start of heap as zero 
1369				;  
1369			 
1369				ld hl, heap_start 
1369				ld a, 0 
1369				ld (hl), a      ; empty block 
1369				inc hl 
1369				ld a, 0 
1369				ld (hl), a      ; length of block 
1369				; write end of list 
1369				inc hl 
1369				ld a,(hl) 
1369				inc hl 
1369				ld a,(hl) 
1369				 
1369			 
1369				; init some malloc vars 
1369			 
1369				ld hl, 0 
1369				ld (free_list), hl       ; store last malloc location 
1369			 
1369				ld hl, free_list+3      ; flag for 'free' being used and force a rescan for reuse of block  
1369				ld a, 0 
1369				ld (hl), a 
1369			 
1369			 
1369				ld hl, heap_start 
1369				;  
1369				  
1369				ret 
1369			 
1369			 
1369			;    free block marker 
1369			;    requested size  
1369			;    pointer to next block 
1369			;    .... 
1369			;    next block marker 
1369			 
1369			 
1369			; TODO add a flag that is reset on use of free. if flag is reset then start scan from start of heap otherwise use last location 
1369			; 
1369			 
1369			 
1369			malloc:  
1369				push de 
1369				push bc 
1369				push af 
1369			 
1369				; hl space required 
1369				 
1369				ld c, l    ; hold space   (TODO only a max of 255) 
1369			 
1369			;	inc c     ; TODO BUG need to fix memory leak on push str 
1369			;	inc c 
1369			;	inc c 
1369			;	inc c 
1369			;	inc c 
1369			;	inc c 
1369			;	inc c 
1369			 
1369			 
1369			 
1369				; start at heap if a free has been issued so we can reclaim it otherwise continue from last time 
1369			 
1369				ld a, (free_list+3) 
1369				cp 0 
1369				jr z, .contheap 
1369			 
1369				ld hl, (free_list)     ; get last alloc 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "mrs" 
1369						CALLMONITOR 
1369					endif 
1369				jr .startalloc 
1369			 
1369			.contheap: 
1369				ld hl, heap_start 
1369			 
1369			.startalloc: 
1369			 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "mym" 
1369						CALLMONITOR 
1369					endif 
1369			.findblock: 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "mmf" 
1369						CALLMONITOR 
1369					endif 
1369			 
1369				ld a,(hl)  
1369				; if byte is zero then clear to use 
1369			 
1369				cp 0 
1369				jr z, .foundemptyblock 
1369			 
1369				; if byte is not clear 
1369				;     then byte is offset to next block 
1369			 
1369				inc hl 
1369				ld a, (hl) ; get size 
1369			.nextblock:	inc hl 
1369					ld e, (hl) 
1369					inc hl 
1369					ld d, (hl) 
1369					ex de, hl 
1369			;	inc hl  ; move past the store space 
1369			;	inc hl  ; move past zero index  
1369			 
1369				; TODO detect no more space 
1369			 
1369				push hl 
1369				ld de, heap_end 
1369				call cmp16 
1369				pop hl 
1369				jr nc, .nospace 
1369			 
1369				jr .findblock 
1369			 
1369			.nospace: ld hl, 0 
1369				jp .exit 
1369			 
1369			 
1369			.foundemptyblock:	 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "mme" 
1369						CALLMONITOR 
1369					endif 
1369			 
1369			; TODO has block enough space if reusing??? 
1369			 
1369				;  
1369			 
1369			; see if this block has been previously used 
1369				inc hl 
1369				ld a, (hl) 
1369				dec hl 
1369				cp 0 
1369				jr z, .newblock 
1369			 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "meR" 
1369						CALLMONITOR 
1369					endif 
1369			 
1369			; no reusing previously allocated block 
1369			 
1369			; is it smaller than previously used? 
1369				 
1369				inc hl    ; move to size 
1369				ld a, c 
1369				sub (hl)        ; we want c < (hl) 
1369				dec hl    ; move back to marker 
1369			        jr z, .findblock 
1369			 
1369				; update with the new size which should be lower 
1369			 
1369			        ;inc  hl   ; negate next move. move back to size  
1369			 
1369			.newblock: 
1369				; need to be at marker here 
1369			 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "meN" 
1369						CALLMONITOR 
1369					endif 
1369			 
1369			 
1369				ld a, c 
1369			 
1369				ld (free_list+3), a	 ; flag resume from last malloc  
1369				ld (free_list), hl    ; save out last location 
1369			 
1369			 
1369				;inc a     ; space for length byte 
1369				ld (hl), a     ; save block in use marker 
1369			 
1369				inc hl   ; move to space marker 
1369				ld (hl), a    ; save new space 
1369			 
1369				inc hl   ; move to start of allocated area 
1369				 
1369			;	push hl     ; save where we are - 1  
1369			 
1369			;	inc hl  ; move past zero index  
1369				; skip space to set down new marker 
1369			 
1369				; provide some extra space for now 
1369			 
1369				inc a    ; actual is one fewer than bytes requested. correct if zero index is taken into account 
1369				inc a 
1369				inc a 
1369			 
1369				push hl   ; save where we are in the node block 
1369			 
1369				call addatohl 
1369			 
1369				; write linked list point 
1369			 
1369				pop de     ; get our node position 
1369				ex de, hl 
1369			 
1369				ld (hl), e 
1369				inc hl 
1369				ld (hl), d 
1369			 
1369				inc hl 
1369			 
1369				; now at start of allocated data so save pointer 
1369			 
1369				push hl 
1369			 
1369				; jump to position of next node and setup empty header in DE 
1369			 
1369				ex de, hl 
1369			 
1369			;	inc hl ; move past end of block 
1369			 
1369				ld a, 0 
1369				ld (hl), a   ; empty marker 
1369				inc hl 
1369				ld (hl), a   ; size 
1369				inc hl  
1369				ld (hl), a   ; ptr 
1369				inc hl 
1369				ld (hl), a   ; ptr 
1369			 
1369			 
1369				pop hl 
1369			 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "mmr" 
1369						CALLMONITOR 
1369					endif 
1369			 
1369			.exit: 
1369				pop af 
1369				pop bc 
1369				pop de  
1369				ret 
1369			 
1369			 
1369			 
1369			 
1369			free:  
1369				push hl 
1369				push af 
1369				; get address in hl 
1369			 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "fre" 
1369						CALLMONITOR 
1369					endif 
1369				; data is at hl - move to block count 
1369				dec hl 
1369				dec hl    ; get past pointer 
1369				dec hl 
1369			 
1369				ld a, (hl)    ; need this for a validation check 
1369			 
1369				dec hl    ; move to block marker 
1369			 
1369				; now check that the block count and block marker are the same  
1369			        ; this checks that we are on a malloc node and not random memory 
1369			        ; OK a faint chance this could be a problem but rare - famous last words! 
1369			 
1369				ld c, a 
1369				ld a, (hl)    
1369			 
1369				cp c 
1369				jr nz, .freeignore      ; not a valid malloc node in use so dont break anything 
1369			 
1369				; yes good chance we are on a malloc node 
1369			 
1369				ld a, 0      
1369				ld (hl), a   ; mark as free 
1369			 
1369				ld (free_list+3), a	 ; flag reuse of existing block on next malloc 
1369			 
1369			.freeignore:  
1369			 
1369				pop af 
1369				pop hl 
1369			 
1369				ret 
1369			 
1369			 
1369			 
1369			endif 
1369			 
1369			; eof 
# End of file firmware_memory.asm
1369			  
1369			; device C  
1369			; Now handled by SPI  
1369			;if SOUND_ENABLE  
1369			;	include "firmware_sound.asm"  
1369			;endif  
1369			  
1369			include "firmware_diags.asm"  
1369			; Hardware diags menu 
1369			 
1369			 
1369			config: 
1369			 
1369 3e 00			ld a, 0 
136b 21 8f 13			ld hl, .configmn 
136e cd f9 0b			call menu 
1371			 
1371 fe 00			cp 0 
1373 c8				ret z 
1374			 
1374			;	cp 1 
1374			;	call z, .savetostore 
1374			 
1374 fe 01			cp 1 
1376			if STARTUP_V1 
1376 cc a5 13			call z, .selautoload 
1379			endif 
1379			 
1379			if STARTUP_V2 
1379				call z, .enautoload 
1379			endif 
1379 fe 02			cp 2 
137b cc 9b 13			call z, .disautoload 
137e			;	cp 3 
137e			;	call z, .selbank 
137e fe 03			cp 3 
1380 cc c3 13			call z, .debug_tog 
1383 fe 04			cp 4 
1385 cc 11 15			call z, .bpsgo 
1388 fe 05			cp 5 
138a cc ec 13			call z, hardware_diags 
138d			if STARTUP_V2 
138d				cp 6 
138d				call z, create_startup 
138d			endif 
138d 18 da			jr config 
138f			 
138f			.configmn: 
138f			;	dw prom_c3 
138f ff 16			dw prom_c2 
1391 14 17			dw prom_c2a 
1393			;	dw prom_c2b 
1393			;	dw prom_c4 
1393 33 17			dw prom_m4 
1395 4e 17			dw prom_m4b 
1397 56 17			dw prom_c1 
1399			if STARTUP_V2 
1399				dw prom_c9 
1399			endif 
1399 00 00			dw 0 
139b				 
139b			 
139b			if STARTUP_V2 
139b			.enautoload: 
139b				if STORAGE_SE 
139b				ld a, $fe      ; bit 0 clear 
139b				ld (spi_device), a 
139b			 
139b				call storage_get_block_0 
139b			 
139b				ld a, 1 
139b				ld (store_page+STORE_0_AUTOFILE), a 
139b			 
139b					ld hl, 0 
139b					ld de, store_page 
139b				call storage_write_block	 ; save update 
139b				else 
139b			 
139b				ld hl, prom_notav 
139b				ld de, prom_empty 
139b				call info_panel 
139b				endif 
139b			 
139b			 
139b				ret 
139b			endif 
139b			 
139b			.disautoload: 
139b				if STORAGE_SE 
139b				ld a, $fe      ; bit 0 clear 
139b				ld (spi_device), a 
139b			 
139b				call storage_get_block_0 
139b			 
139b				ld a, 0 
139b				ld (store_page+STORE_0_AUTOFILE), a 
139b			 
139b					ld hl, 0 
139b					ld de, store_page 
139b				call storage_write_block	 ; save update 
139b				else 
139b			 
139b 21 65 17			ld hl, prom_notav 
139e 11 7b 17			ld de, prom_empty 
13a1 cd 59 0b			call info_panel 
13a4				endif 
13a4			 
13a4			 
13a4 c9				ret 
13a5			 
13a5			if STARTUP_V1 
13a5			 
13a5			; Select auto start 
13a5			 
13a5			.selautoload: 
13a5			 
13a5				 
13a5				if STORAGE_SE 
13a5			 
13a5					call config_dir 
13a5				        ld hl, scratch 
13a5					ld a, 0 
13a5					call menu 
13a5			 
13a5					cp 0 
13a5					ret z 
13a5			 
13a5					dec a 
13a5			 
13a5			 
13a5					; locate menu option 
13a5			 
13a5					ld hl, scratch 
13a5					call table_lookup 
13a5			 
13a5					if DEBUG_FORTH_WORDS 
13a5						DMARK "ALl" 
13a5						CALLMONITOR 
13a5					endif 
13a5					; with the pointer to the menu it, the byte following the zero term is the file id 
13a5			 
13a5					ld a, 0 
13a5					ld bc, 50   ; max of bytes to look at 
13a5					cpir  
13a5			 
13a5					if DEBUG_FORTH_WORDS 
13a5						DMARK "ALb" 
13a5						CALLMONITOR 
13a5					endif 
13a5					;inc hl 
13a5			 
13a5					ld a, (hl)   ; file id 
13a5					 
13a5				        ; save bank and file ids 
13a5			 
13a5					push af 
13a5			 
13a5			; TODO need to save to block 0 on bank 1	 
13a5			 
13a5					call storage_get_block_0 
13a5			 
13a5					if DEBUG_FORTH_WORDS 
13a5						DMARK "AL0" 
13a5						CALLMONITOR 
13a5					endif 
13a5					pop af 
13a5			 
13a5					ld (store_page+STORE_0_FILERUN),a 
13a5					 
13a5					; save bank id 
13a5			 
13a5					ld a,(spi_device) 
13a5					ld (store_page+STORE_0_BANKRUN),a 
13a5			 
13a5					; enable auto run of store file 
13a5			 
13a5					ld a, 1 
13a5					ld (store_page+STORE_0_AUTOFILE),a 
13a5			 
13a5					; save buffer 
13a5			 
13a5					ld hl, 0 
13a5					ld de, store_page 
13a5					if DEBUG_FORTH_WORDS 
13a5						DMARK "ALw" 
13a5						CALLMONITOR 
13a5					endif 
13a5				call storage_write_block	 ; save update 
13a5			  
13a5			 
13a5			 
13a5			 
13a5					ld hl, scratch 
13a5					call config_fdir 
13a5			 
13a5				else 
13a5			 
13a5 21 65 17			ld hl, prom_notav 
13a8 11 7b 17			ld de, prom_empty 
13ab cd 59 0b			call info_panel 
13ae			 
13ae				endif 
13ae c9				ret 
13af			endif 
13af			 
13af			 
13af			; Select storage bank 
13af			 
13af			.selbank: 
13af			 
13af			;	if STORAGE_SE 
13af			;	else 
13af			 
13af 21 65 17			ld hl, prom_notav 
13b2 11 7b 17			ld de, prom_empty 
13b5 cd 59 0b			call info_panel 
13b8			;	endif 
13b8				 
13b8 c9				ret 
13b9			 
13b9			if STORAGE_SE 
13b9			 
13b9			.config_ldir:   
13b9				; Load storage bank labels into menu array 
13b9			 
13b9				 
13b9			 
13b9			 
13b9				ret 
13b9			 
13b9			 
13b9			endif 
13b9			 
13b9			 
13b9			; Save user words to storage 
13b9			 
13b9			.savetostore: 
13b9			 
13b9			;	if STORAGE_SE 
13b9			; 
13b9			;		call config_dir 
13b9			;	        ld hl, scratch 
13b9			;		ld a, 0 
13b9			;		call menu 
13b9			;		 
13b9			;		ld hl, scratch 
13b9			;		call config_fdir 
13b9			; 
13b9			;	else 
13b9			 
13b9 21 65 17			ld hl, prom_notav 
13bc 11 7b 17			ld de, prom_empty 
13bf cd 59 0b			call info_panel 
13c2			 
13c2			;	endif 
13c2			 
13c2 c9				ret 
13c3			 
13c3			if STARTUP_V2 
13c3			 
13c3			create_startup: 
13c3			 
13c3				ld a, 0 
13c3				ld hl, .crstart 
13c3				call menu 
13c3			 
13c3				cp 0 
13c3				ret z 
13c3			 
13c3				cp 1 
13c3				call z, .genlsword 
13c3				cp 2 
13c3				call z, .genedword 
13c3			 
13c3				cp 3 
13c3				call z, .gendemword 
13c3			 
13c3				cp 4 
13c3				call z, .genutlword 
13c3				cp 5 
13c3				call z, .genspiword 
13c3				cp 6 
13c3				call z, .genkeyword 
13c3				cp 7 
13c3				call z, .gensoundword 
13c3				cp 8 
13c3				call z, .genhwword 
13c3				jr create_startup 
13c3			 
13c3			.genhwword: 
13c3				ld hl, crs_hw 
13c3				ld de, .hwworddef 
13c3				call .genfile 
13c3				ret 
13c3			.gensoundword: 
13c3				ld hl, crs_sound 
13c3				ld de, .soundworddef 
13c3				call .genfile 
13c3				ret 
13c3			.genlsword: 
13c3				ld hl, crs_s1 
13c3				ld de, .lsworddef 
13c3				call .genfile 
13c3				ret 
13c3			 
13c3			.genedword: 
13c3				ld de, .edworddef 
13c3				ld hl, crs_s2 
13c3				call .genfile 
13c3				ret 
13c3			 
13c3			.gendemword: 
13c3				ld de, .demoworddef 
13c3				ld hl, crs_s3 
13c3				call .genfile 
13c3				ret 
13c3			 
13c3			.genutlword: 
13c3				ld hl, crs_s4 
13c3				ld de, .utilwordef 
13c3				call .genfile 
13c3				ret 
13c3			.genspiword: 
13c3				ld hl, crs_s5 
13c3				ld de, .spiworddef 
13c3				call .genfile 
13c3				ret 
13c3			.genkeyword: 
13c3				ld hl, crs_s6 
13c3				ld de, .keyworddef 
13c3				call .genfile 
13c3				ret 
13c3			 
13c3			; hl - points to file name 
13c3			; de - points to strings to add to file 
13c3			 
13c3			.genfile: 
13c3				push hl 
13c3				push de 
13c3			 
13c3				call clear_display 
13c3				ld a, display_row_1 
13c3				ld de, .genfiletxt 
13c3				call str_at_display 
13c3				call update_display 
13c3			 
13c3				pop de 
13c3				pop hl 
13c3			 
13c3			 
13c3				push de 
13c3				call storage_create 
13c3				; id in hl 
13c3				pop de   ; table of strings to add 
13c3			 
13c3			.genloop: 
13c3			 
13c3				push hl ; save id for next time around 
13c3				push de ; save de for next time around 
13c3			 
13c3				ex de, hl 
13c3				call loadwordinhl 
13c3				ex de, hl 
13c3			 
13c3				; need hl to be the id 
13c3				; need de to be the string ptr 
13c3				 
13c3				call storage_append 
13c3			 
13c3				pop de 
13c3				pop hl 
13c3			 
13c3				inc de 
13c3				inc de 
13c3			 
13c3				ld a,(de) 
13c3				cp 0 
13c3				jr nz, .genloop 
13c3				inc de 
13c3				ld a, (de) 
13c3				dec de 
13c3				cp 0 
13c3				jr nz, .genloop	 
13c3			 
13c3				ret 
13c3			 
13c3			.genfiletxt:  db "Creating file...",0 
13c3			 
13c3			.hwworddef: 
13c3				dw test5 
13c3				dw test6 
13c3				dw test7 
13c3				dw test8 
13c3				dw test9 
13c3				dw test10 
13c3				dw 0 
13c3			 
13c3			.soundworddef: 
13c3				dw sound1 
13c3				dw sound2 
13c3				dw sound3 
13c3				dw sound4 
13c3				dw sound5 
13c3				dw sound6 
13c3				dw sound7 
13c3				dw sound8 
13c3				dw sound9 
13c3				dw 0 
13c3			 
13c3			.utilwordef: 
13c3				dw strncpy 
13c3				dw type 
13c3				dw tuck 
13c3				dw clrstack 
13c3				dw longread 
13c3				dw start1 
13c3				dw start2 
13c3			; duplicated 
13c3			;	dw start3b 
13c3			;	dw start3c 
13c3				dw list 
13c3				dw 0 
13c3			 
13c3			.lsworddef: 
13c3				dw start3b 
13c3				dw 0 
13c3			 
13c3			.edworddef: 
13c3				dw edit1 
13c3				dw edit2 
13c3				dw edit3 
13c3				dw 0 
13c3			 
13c3			.demoworddef: 
13c3				dw game1 
13c3				dw game1a 
13c3				dw game1b 
13c3				dw game1c 
13c3				dw game1d 
13c3				dw game1s 
13c3				dw game1t 
13c3				dw game1f 
13c3				dw game1z 
13c3				dw game1zz 
13c3				dw ssv2 
13c3				dw ssv3 
13c3				dw ssv4 
13c3				dw ssv5 
13c3				dw ssv1 
13c3				dw ssv1cpm	 
13c3			;	dw game2b 
13c3			;	dw game2bf 
13c3			;	dw game2mba 
13c3			;	dw game2mbas	 
13c3			;	dw game2mbht 
13c3			;	dw game2mbms 
13c3			;	dw game2mb 
13c3			;	dw game3w 
13c3			;	dw game3p 
13c3			;	dw game3sc 
13c3			;	dw game3vsi 
13c3			;	dw game3vs 
13c3				dw 0 
13c3			 
13c3			 
13c3			.spiworddef: 
13c3			 
13c3			    dw spi1 
13c3			    dw spi2 
13c3			    dw spi2b 
13c3			    dw spi3 
13c3			    dw spi4 
13c3			    dw spi5 
13c3			;    dw spi6 
13c3			;    dw spi7 
13c3			 
13c3			;    dw spi8 
13c3			;    dw spi9 
13c3			;    dw spi10 
13c3			    dw 0 
13c3			 
13c3			.keyworddef: 
13c3			 
13c3				dw keyup 
13c3				dw keydown 
13c3				dw keyleft 
13c3				dw keyright 
13c3				dw 	keyf1 
13c3				dw keyf2 
13c3				dw keyf3 
13c3				dw keyf4 
13c3				dw keyf5 
13c3				dw keyf6 
13c3				dw keyf7 
13c3				dw keyf8 
13c3				dw keyf9 
13c3				dw keyf10 
13c3				dw keyf11 
13c3				dw keyf12 
13c3				dw keytab 
13c3				dw keycr 
13c3				dw keyhome 
13c3				dw keyend 
13c3				dw keybs 
13c3				dw 0 
13c3			 
13c3			.crstart: 
13c3				dw crs_s1 
13c3				dw crs_s2 
13c3				dw crs_s3 
13c3				dw crs_s4 
13c3				dw crs_s5 
13c3				dw crs_s6 
13c3				dw crs_sound 
13c3				dw crs_hw 
13c3				dw 0 
13c3			 
13c3			endif 
13c3			 
13c3			 
13c3			if STORAGE_SE 
13c3			 
13c3			config_fdir: 
13c3				; using the scratch dir go through and release the memory allocated for each string 
13c3				 
13c3				ld hl, scratch 
13c3			.cfdir:	ld e,(hl) 
13c3				inc hl 
13c3				ld d,(hl) 
13c3				inc hl 
13c3			 
13c3				ex de, hl 
13c3				call ishlzero 
13c3				ret z     ; return on null pointer 
13c3				call free 
13c3				ex de, hl 
13c3				jr .cfdir 
13c3			 
13c3			 
13c3				ret 
13c3			 
13c3			 
13c3			config_dir: 
13c3			 
13c3				; for the config menus that need to build a directory of storage call this routine 
13c3				; it will construct a menu in scratch to pass to menu 
13c3			 
13c3				; open storage device 
13c3			 
13c3				; execute DIR to build a list of files and their ids into scratch in menu format 
13c3				; once the menu has finished then will need to call config_fdir to release the strings 
13c3				 
13c3				; c = number items 
13c3			 
13c3				 
13c3				call storage_get_block_0 
13c3			 
13c3				ld hl, store_page     ; get current id count 
13c3				ld b, (hl) 
13c3				ld c, 0    ; count of files   
13c3			 
13c3			 
13c3				ld hl, scratch 
13c3				ld (store_tmp2), hl    ; location to poke strings 
13c3			 
13c3				; check for empty drive 
13c3			 
13c3				ld a, 0 
13c3				cp b 
13c3				jp z, .dirdone 
13c3			 
13c3				 
13c3					if DEBUG_FORTH_WORDS 
13c3						DMARK "Cdc" 
13c3						CALLMONITOR 
13c3					endif 
13c3			 
13c3			 
13c3			.diritem:	 
13c3				push bc 
13c3				; for each of the current ids do a search for them and if found push to stack 
13c3			 
13c3					ld hl, STORE_BLOCK_PHY 
13c3					ld d, 0		 ; look for extent 0 of block id as this contains file name 
13c3					ld e,b 
13c3			 
13c3					call storage_findnextid 
13c3			 
13c3			 
13c3					; if found hl will be non zero 
13c3			 
13c3					call ishlzero 
13c3					jr z, .dirnotfound 
13c3			 
13c3					; increase count 
13c3			 
13c3					pop bc	 
13c3					inc c 
13c3					push bc 
13c3					 
13c3			 
13c3					; get file header and push the file name 
13c3			 
13c3					ld de, store_page 
13c3					call storage_read_block 
13c3			 
13c3					; push file id to stack 
13c3				 
13c3					ld a, (store_page) 
13c3					ld h, 0 
13c3					ld l, a 
13c3			 
13c3					;call forth_push_numhl 
13c3					; TODO store id 
13c3			 
13c3					push hl 
13c3			 
13c3					; push extent count to stack  
13c3				 
13c3					ld hl, store_page+3 
13c3			 
13c3					; get file name length 
13c3			 
13c3					call strlenz   
13c3			 
13c3					inc hl   ; cover zero term 
13c3					inc hl  ; stick the id at the end of the area 
13c3			 
13c3					push hl 
13c3					pop bc    ; move length to bc 
13c3			 
13c3					call malloc 
13c3			 
13c3					; TODO save malloc area to scratch 
13c3			 
13c3					ex de, hl 
13c3					ld hl, (store_tmp2) 
13c3					ld (hl), e 
13c3					inc hl 
13c3					ld (hl), d 
13c3					inc hl 
13c3					ld (store_tmp2), hl 
13c3			 
13c3					 
13c3			 
13c3					;pop hl   ; get source 
13c3			;		ex de, hl    ; swap aronund	 
13c3			 
13c3					ld hl, store_page+3 
13c3					if DEBUG_FORTH_WORDS 
13c3						DMARK "CFd" 
13c3						CALLMONITOR 
13c3					endif 
13c3					ldir 
13c3			 
13c3					; de is past string, move back one and store id 
13c3					 
13c3					dec de 
13c3			 
13c3					; store file id 
13c3			 
13c3					pop hl 
13c3					ex de,hl 
13c3					ld (hl), e 
13c3			 
13c3					if DEBUG_FORTH_WORDS 
13c3						DMARK "Cdi" 
13c3						CALLMONITOR 
13c3					endif 
13c3					 
13c3			.dirnotfound: 
13c3					pop bc     
13c3					djnz .diritem 
13c3				 
13c3			.dirdone:	 
13c3			 
13c3					ld a, 0 
13c3					ld hl, (store_tmp2) 
13c3					ld (hl), a 
13c3					inc hl 
13c3					ld (hl), a 
13c3					inc hl 
13c3					; push a count of the dir items found 
13c3			 
13c3			;		ld h, 0 
13c3			;		ld l, c 
13c3			 
13c3				ret 
13c3			 
13c3			endif 
13c3			 
13c3			 
13c3			; Settings 
13c3			; Run  
13c3			 
13c3			 
13c3			 
13c3			;hd_menu1:   db "Diags:  1: Key Matrix   5: Sound",0 
13c3			;;hd_menu2:   db "        2: Editor",0   
13c3			;hd_menu2:   db "        2: Editor       6: Menu",0   
13c3			;hd_menu3:   db "        3: Storage",0 
13c3			;hd_menu4:   db "0=quit  4: Debug",0 
13c3			;hd_don:     db "ON",0 
13c3			;hd_doff:     db "OFF",0 
13c3			; 
13c3			; 
13c3			; 
13c3			;hardware_diags_old:       
13c3			; 
13c3			;.diagmenu: 
13c3			;	call clear_display 
13c3			;	ld a, display_row_1 
13c3			;	ld de, hd_menu1 
13c3			;	call str_at_display 
13c3			; 
13c3			;	ld a, display_row_2 
13c3			;	ld de, hd_menu2 
13c3			;	call str_at_display 
13c3			; 
13c3			;	ld a, display_row_3 
13c3			;	ld de, hd_menu3 
13c3			;	call str_at_display 
13c3			; 
13c3			;	ld a,  display_row_4 
13c3			;	ld de, hd_menu4 
13c3			;	call str_at_display 
13c3			; 
13c3			;	; display debug state 
13c3			; 
13c3			;	ld de, hd_don 
13c3			;	ld a, (os_view_disable) 
13c3			;	cp 0 
13c3			;	jr z, .distog 
13c3			;	ld de, hd_doff 
13c3			;.distog: ld a, display_row_4+17 
13c3			;	call str_at_display 
13c3			; 
13c3			;	call update_display 
13c3			; 
13c3			;	call cin_wait 
13c3			; 
13c3			; 
13c3			; 
13c3			;	cp '4' 
13c3			;	jr nz, .diagn1 
13c3			; 
13c3			;	; debug toggle 
13c3			; 
13c3			;	ld a, (os_view_disable) 
13c3			;	ld b, '*' 
13c3			;	cp 0 
13c3			;	jr z, .debtog 
13c3			;	ld b, 0 
13c3			;.debtog:	 
13c3			;	ld a,b 
13c3			;	ld (os_view_disable),a 
13c3			; 
13c3			;.diagn1: cp '0' 
13c3			;	 ret z 
13c3			; 
13c3			;;	cp '1' 
13c3			;;       jp z, matrix	 
13c3			;;   TODO keyboard matrix test 
13c3			; 
13c3			;	cp '2' 
13c3			;	jp z, .diagedit 
13c3			; 
13c3			;;	cp '6' 
13c3			;;	jp z, .menutest 
13c3			;;if ENABLE_BASIC 
13c3			;;	cp '6' 
13c3			;;	jp z, basic 
13c3			;;endif 
13c3			 ; 
13c3			;	jp .diagmenu 
13c3			; 
13c3			; 
13c3			;	ret 
13c3			 
13c3			 
13c3			.debug_tog: 
13c3 21 0d 14			ld hl, .menudebug 
13c6				 
13c6			;	ld a, (os_view_disable) 
13c6			;	cp '*' 
13c6 3a 6f ee			ld a,(debug_vector) 
13c9 fe c9			cp $C9   ; RET 
13cb 20 04			jr nz,.tdon  
13cd 3e 01			ld a, 1 
13cf 18 02			jr .tog1 
13d1 3e 00		.tdon: ld a, 0 
13d3			 
13d3			.tog1: 
13d3 cd f9 0b			call menu 
13d6 fe 00			cp 0 
13d8 c8				ret z 
13d9 fe 01			cp 1    ; disable debug 
13db 28 04			jr z, .dtog0 
13dd 3e 2a			ld a, '*' 
13df 18 05			jr .dtogset 
13e1			.dtog0:  
13e1				;ld a, 0 
13e1 cd ff 14			call bp_on 
13e4 18 dd			jr .debug_tog 
13e6			.dtogset:  
13e6				; ld (os_view_disable), a 
13e6 cd 0b 15			call bp_off 
13e9 c3 c3 13			jp .debug_tog 
13ec			 
13ec			 
13ec			hardware_diags:       
13ec			 
13ec			.diagm: 
13ec 21 ff 13			ld hl, .menuitems 
13ef 3e 00			ld a, 0 
13f1 cd f9 0b			call menu 
13f4			 
13f4 fe 00		         cp 0 
13f6 c8				 ret z 
13f7			 
13f7 fe 02			cp 2 
13f9 ca 58 14			jp z, .diagedit 
13fc			 
13fc			;	cp '6' 
13fc			;	jp z, .menutest 
13fc			;if ENABLE_BASIC 
13fc			;	cp '6' 
13fc			;	jp z, basic 
13fc			;endif 
13fc			  
13fc c3 ec 13			jp .diagm 
13ff			 
13ff				 
13ff 13 14		.menuitems:   	dw .m1 
1401 1e 14				dw .m2 
1403 25 14				dw .m3 
1405 2d 14				dw .m5 
1407 33 14				dw .m5a 
1409 3c 14				dw .m5b 
140b 00 00				dw 0 
140d			 
140d			.menudebug: 
140d 45 14				dw .m6 
140f 4e 14				dw .m7 
1411 00 00				dw 0 
1413			 
1413 .. 00		.m1:   db "Key Matrix",0 
141e .. 00		.m2:   db "Editor",0 
1425 .. 00		.m3:   db "Storage",0 
142d .. 00		.m5:   db "Sound",0 
1433 .. 00		.m5a:  db "RAM Test",0 
143c .. 00		.m5b:  db "LCD Test",0 
1445			 
1445 .. 00		.m6:   db "Debug ON",0 
144e .. 00		.m7:   db "Debug OFF",0 
1458			 
1458			; debug editor 
1458			 
1458			.diagedit: 
1458			 
1458 21 bb e2			ld hl, scratch 
145b			;	ld bc, 250 
145b			;	ldir 
145b				; TODO ldir is not working strcpy may not get all the terms on the input line???? 
145b 3e 00			ld a, 0 
145d 77				ld (hl), a 
145e 23				inc hl 
145f 77				ld (hl), a 
1460 23				inc hl 
1461 77				ld (hl), a 
1462			 
1462 cd c8 0b		        call clear_display 
1465 cd eb 0b			call update_display 
1468				;ld a, 1 
1468				;ld (hardware_diag), a 
1468			.diloop: 
1468 3e 00			ld a, display_row_1 
146a 0e 00			ld c, 0 
146c 16 ff			ld d, 255    ; TODO fix input_str to actually take note of max string input length 
146e 1e 28			ld e, 40 
1470			 
1470 21 bb e2			ld hl, scratch	 
1473 cd 22 0e			call input_str 
1476			 
1476 3e 28			ld a, display_row_2 
1478 11 bb e2			ld de, scratch 
147b cd db 0b			call str_at_display 
147e cd eb 0b			call update_display 
1481			 
1481 c3 68 14			jp .diloop 
1484			 
1484			 
1484			; pass word in hl 
1484			; a has display location 
1484			display_word_at: 
1484 f5				push af 
1485 e5				push hl 
1486 7c				ld a,h 
1487 21 c0 e5			ld hl, os_word_scratch 
148a cd fe 0f			call hexout 
148d e1				pop hl 
148e 7d				ld a,l 
148f 21 c2 e5			ld hl, os_word_scratch+2 
1492 cd fe 0f			call hexout 
1495 21 c4 e5			ld hl, os_word_scratch+4 
1498 3e 00			ld a,0 
149a 77				ld (hl),a 
149b 11 c0 e5			ld de,os_word_scratch 
149e f1				pop af 
149f cd db 0b				call str_at_display 
14a2 c9				ret 
14a3			 
14a3			display_ptr_state: 
14a3			 
14a3				; to restore afterwards 
14a3			 
14a3 d5				push de 
14a4 c5				push bc 
14a5 e5				push hl 
14a6 f5				push af 
14a7			 
14a7				; for use in here 
14a7			 
14a7			;	push bc 
14a7			;	push de 
14a7			;	push hl 
14a7			;	push af 
14a7			 
14a7 cd c8 0b			call clear_display 
14aa			 
14aa 11 82 16			ld de, .ptrstate 
14ad 3e 00			ld a, display_row_1 
14af cd db 0b			call str_at_display 
14b2			 
14b2				; display debug step 
14b2			 
14b2			 
14b2 11 65 ee			ld de, debug_mark 
14b5 3e 26			ld a, display_row_1+display_cols-2 
14b7 cd db 0b			call str_at_display 
14ba			 
14ba				; display a 
14ba 11 8c 16			ld de, .ptrcliptr 
14bd 3e 28			ld a, display_row_2 
14bf cd db 0b			call str_at_display 
14c2			 
14c2 f1				pop af 
14c3 2a 3a ea			ld hl,(cli_ptr) 
14c6 3e 30			ld a, display_row_2+8 
14c8 cd 84 14			call display_word_at 
14cb			 
14cb			 
14cb				; display hl 
14cb			 
14cb			 
14cb 11 94 16			ld de, .ptrclioptr 
14ce 3e 32			ld a, display_row_2+10 
14d0 cd db 0b			call str_at_display 
14d3			; 
14d3			;	pop hl 
14d3 3e 35			ld a, display_row_2+13 
14d5 2a 38 ea			ld hl,(cli_origptr) 
14d8 cd 84 14			call display_word_at 
14db			; 
14db			;	 
14db			;	; display de 
14db			 
14db			;	ld de, .regstatede 
14db			;	ld a, display_row_3 
14db			;	call str_at_display 
14db			 
14db			;	pop de 
14db			;	ld h,d 
14db			;	ld l, e 
14db			;	ld a, display_row_3+3 
14db			;	call display_word_at 
14db			 
14db			 
14db				; display bc 
14db			 
14db			;	ld de, .regstatebc 
14db			;	ld a, display_row_3+10 
14db			;	call str_at_display 
14db			 
14db			;	pop bc 
14db			;	ld h,b 
14db			;	ld l, c 
14db			;	ld a, display_row_3+13 
14db			;	call display_word_at 
14db			 
14db			 
14db				; display dsp 
14db			 
14db			;	ld de, .regstatedsp 
14db			;	ld a, display_row_4 
14db			;	call str_at_display 
14db			 
14db				 
14db			;	ld hl,(cli_data_sp) 
14db			;	ld a, display_row_4+4 
14db			;	call display_word_at 
14db			 
14db				; display rsp 
14db			 
14db 11 c3 16			ld de, .regstatersp 
14de 3e 82			ld a, display_row_4+10 
14e0 cd db 0b			call str_at_display 
14e3			 
14e3				 
14e3 2a ec e9			ld hl,(cli_ret_sp) 
14e6 3e 86			ld a, display_row_4+14 
14e8 cd 84 14			call display_word_at 
14eb			 
14eb cd eb 0b			call update_display 
14ee			 
14ee cd 00 0b			call delay1s 
14f1 cd 00 0b			call delay1s 
14f4 cd 00 0b			call delay1s 
14f7			 
14f7			 
14f7 cd 08 1b			call next_page_prompt 
14fa			 
14fa				; restore  
14fa			 
14fa f1				pop af 
14fb e1				pop hl 
14fc c1				pop bc 
14fd d1				pop de 
14fe c9				ret 
14ff			 
14ff			; Update the break point vector so that the user can hook a new routine 
14ff			 
14ff			bp_on: 
14ff 3e c3			ld a, $c3    ; JP 
1501 32 6f ee			ld (debug_vector), a 
1504 21 11 15			ld hl, break_point_state 
1507 22 70 ee			ld (debug_vector+1), hl 
150a c9				ret 
150b			 
150b			bp_off: 
150b 3e c9			ld a, $c9    ; RET 
150d 32 6f ee			ld (debug_vector), a 
1510 c9				ret 
1511			 
1511			 
1511			break_point_state: 
1511			;	push af 
1511			; 
1511			;	; see if disabled 
1511			; 
1511			;	ld a, (os_view_disable) 
1511			;	cp '*' 
1511			;	jr nz, .bpsgo 
1511			;	pop af 
1511			;	ret 
1511			 
1511			.bpsgo: 
1511			;	pop af 
1511 f5				push af 
1512 22 9d e2			ld (os_view_hl), hl 
1515 ed 53 9b e2		ld (os_view_de), de 
1519 ed 43 99 e2		ld (os_view_bc), bc 
151d e5				push hl 
151e 6f				ld l, a 
151f 26 00			ld h, 0 
1521 22 9f e2			ld (os_view_af),hl 
1524			 
1524 21 ab ed				ld hl, display_fb0 
1527 22 c6 eb				ld (display_fb_active), hl 
152a e1				pop hl	 
152b			 
152b 3e 31			ld a, '1' 
152d fe 2a		.bps1:  cp '*' 
152f cc 0b 15			call z, bp_off 
1532			;	jr nz, .bps1b 
1532			;	ld (os_view_disable),a 
1532 fe 31		.bps1b:  cp '1' 
1534 20 14			jr nz, .bps2 
1536			 
1536				; display reg 
1536			 
1536				 
1536			 
1536 3a 9f e2			ld a, (os_view_af) 
1539 2a 9d e2			ld hl, (os_view_hl) 
153c ed 5b 9b e2		ld de, (os_view_de) 
1540 ed 4b 99 e2		ld bc, (os_view_bc) 
1544 cd de 15			call display_reg_state 
1547 c3 ca 15			jp .bpschk 
154a			 
154a fe 32		.bps2:  cp '2' 
154c 20 08			jr nz, .bps3 
154e				 
154e				; display hl 
154e 2a 9d e2			ld hl, (os_view_hl) 
1551 cd c8 16			call display_dump_at_hl 
1554			 
1554 18 74			jr .bpschk 
1556			 
1556 fe 33		.bps3:  cp '3' 
1558 20 08			jr nz, .bps4 
155a			 
155a			        ; display de 
155a 2a 9b e2			ld hl, (os_view_de) 
155d cd c8 16			call display_dump_at_hl 
1560			 
1560 18 68			jr .bpschk 
1562 fe 34		.bps4:  cp '4' 
1564 20 08			jr nz, .bps5 
1566			 
1566			        ; display bc 
1566 2a 99 e2			ld hl, (os_view_bc) 
1569 cd c8 16			call display_dump_at_hl 
156c			 
156c 18 5c			jr .bpschk 
156e fe 35		.bps5:  cp '5' 
1570 20 08		        jr nz, .bps7 
1572			 
1572				; display cur ptr 
1572 2a 3a ea			ld hl, (cli_ptr) 
1575 cd c8 16			call display_dump_at_hl 
1578			 
1578 18 50			jr .bpschk 
157a fe 36		.bps7:  cp '6' 
157c 20 08			jr nz, .bps8b 
157e				 
157e				; display cur orig ptr 
157e 2a 38 ea			ld hl, (cli_origptr) 
1581 cd c8 16			call display_dump_at_hl 
1584 18 44			jr .bpschk 
1586 fe 37		.bps8b:  cp '7' 
1588 20 08			jr nz, .bps9 
158a				 
158a				; display dsp 
158a 2a e8 e9			ld hl, (cli_data_sp) 
158d cd c8 16			call display_dump_at_hl 
1590			 
1590 18 38			jr .bpschk 
1592 fe 39		.bps9:  cp '9' 
1594 20 05			jr nz, .bps8c 
1596				 
1596				; display SP 
1596			;	ld hl, sp 
1596 cd c8 16			call display_dump_at_hl 
1599			 
1599 18 2f			jr .bpschk 
159b fe 38		.bps8c:  cp '8' 
159d 20 08			jr nz, .bps8d 
159f				 
159f				; display rsp 
159f 2a ec e9			ld hl, (cli_ret_sp) 
15a2 cd c8 16			call display_dump_at_hl 
15a5			 
15a5 18 23			jr .bpschk 
15a7 fe 23		.bps8d:  cp '#'     ; access monitor sub system 
15a9 20 05			jr nz, .bps8 
15ab cd c2 18			call monitor 
15ae			 
15ae 18 1a			jr .bpschk 
15b0 fe 30		.bps8:  cp '0' 
15b2 20 16			jr nz, .bpschk 
15b4			 
15b4 21 0a ed				ld hl, display_fb1 
15b7 22 c6 eb				ld (display_fb_active), hl 
15ba cd eb 0b				call update_display 
15bd			 
15bd				;ld a, (os_view_af) 
15bd 2a 9d e2			ld hl, (os_view_hl) 
15c0 ed 5b 9b e2		ld de, (os_view_de) 
15c4 ed 4b 99 e2		ld bc, (os_view_bc) 
15c8 f1				pop af 
15c9 c9				ret 
15ca			 
15ca			.bpschk:   
15ca cd 00 0b			call delay1s 
15cd 3e 9f		ld a,display_row_4 + display_cols - 1 
15cf 11 06 1b		        ld de, endprg 
15d2 cd db 0b			call str_at_display 
15d5 cd eb 0b			call update_display 
15d8 cd 33 61			call cin_wait 
15db			 
15db c3 2d 15			jp .bps1 
15de			 
15de			 
15de			display_reg_state: 
15de			 
15de				; to restore afterwards 
15de			 
15de d5				push de 
15df c5				push bc 
15e0 e5				push hl 
15e1 f5				push af 
15e2			 
15e2				; for use in here 
15e2			 
15e2 c5				push bc 
15e3 d5				push de 
15e4 e5				push hl 
15e5 f5				push af 
15e6			 
15e6 cd c8 0b			call clear_display 
15e9			 
15e9 11 9e 16			ld de, .regstate 
15ec 3e 00			ld a, display_row_1 
15ee cd db 0b			call str_at_display 
15f1			 
15f1				; display debug step 
15f1			 
15f1			 
15f1 11 65 ee			ld de, debug_mark 
15f4 3e 25			ld a, display_row_1+display_cols-3 
15f6 cd db 0b			call str_at_display 
15f9			 
15f9				; display a 
15f9 11 ba 16			ld de, .regstatea 
15fc 3e 28			ld a, display_row_2 
15fe cd db 0b			call str_at_display 
1601			 
1601 e1				pop hl 
1602			;	ld h,0 
1602			;	ld l, a 
1602 3e 2b			ld a, display_row_2+3 
1604 cd 84 14			call display_word_at 
1607			 
1607			 
1607				; display hl 
1607			 
1607			 
1607 11 ae 16			ld de, .regstatehl 
160a 3e 32			ld a, display_row_2+10 
160c cd db 0b			call str_at_display 
160f			 
160f e1				pop hl 
1610 3e 35			ld a, display_row_2+13 
1612 cd 84 14			call display_word_at 
1615			 
1615				 
1615				; display de 
1615			 
1615 11 b2 16			ld de, .regstatede 
1618 3e 50			ld a, display_row_3 
161a cd db 0b			call str_at_display 
161d			 
161d e1				pop hl 
161e			;	ld h,d 
161e			;	ld l, e 
161e 3e 53			ld a, display_row_3+3 
1620 cd 84 14			call display_word_at 
1623			 
1623			 
1623				; display bc 
1623			 
1623 11 b6 16			ld de, .regstatebc 
1626 3e 5a			ld a, display_row_3+10 
1628 cd db 0b			call str_at_display 
162b			 
162b e1				pop hl 
162c			;	ld h,b 
162c			;	ld l, c 
162c 3e 5d			ld a, display_row_3+13 
162e cd 84 14			call display_word_at 
1631			 
1631			 
1631				; display dsp 
1631			 
1631 11 be 16			ld de, .regstatedsp 
1634 3e 78			ld a, display_row_4 
1636 cd db 0b			call str_at_display 
1639			 
1639				 
1639 2a e8 e9			ld hl,(cli_data_sp) 
163c 3e 7c			ld a, display_row_4+4 
163e cd 84 14			call display_word_at 
1641			 
1641				; display rsp 
1641			 
1641 11 c3 16			ld de, .regstatersp 
1644 3e 82			ld a, display_row_4+10 
1646 cd db 0b			call str_at_display 
1649			 
1649				 
1649 2a ec e9			ld hl,(cli_ret_sp) 
164c 3e 86			ld a, display_row_4+14 
164e cd 84 14			call display_word_at 
1651			 
1651 cd eb 0b			call update_display 
1654			 
1654			;	call delay1s 
1654			;	call delay1s 
1654			;	call delay1s 
1654			 
1654			 
1654			;	call next_page_prompt 
1654			 
1654				; restore  
1654			 
1654 f1				pop af 
1655 e1				pop hl 
1656 c1				pop bc 
1657 d1				pop de 
1658 c9				ret 
1659			 
1659 .. 00		.wordincurptr:  db "Word in cur_ptr (5)",0 
166d .. 00		.wordincuroptr:  db "Word in cur_optr (6)",0 
1682 .. 00		.ptrstate:	db "Ptr State",0 
168c .. 00		.ptrcliptr:     db "cli_ptr",0 
1694 .. 00		.ptrclioptr:     db "cli_o_ptr",0 
169e .. 00		.regstate:	db "Reg State (1/0)",0 
16ae .. 00		.regstatehl:	db "HL:",0 
16b2 .. 00		.regstatede:	db "DE:",0 
16b6 .. 00		.regstatebc:	db "BC:",0 
16ba .. 00		.regstatea:	db "A :",0 
16be .. 00		.regstatedsp:	db "DSP:",0 
16c3 .. 00		.regstatersp:	db "RSP:",0 
16c8			 
16c8			display_dump_at_hl: 
16c8 e5				push hl 
16c9 d5				push de 
16ca c5				push bc 
16cb f5				push af 
16cc			 
16cc 22 de e5			ld (os_cur_ptr),hl	 
16cf cd c8 0b			call clear_display 
16d2 cd 10 1a			call dumpcont 
16d5			;	call delay1s 
16d5			;	call next_page_prompt 
16d5			 
16d5			 
16d5 f1				pop af 
16d6 c1				pop bc 
16d7 d1				pop de 
16d8 e1				pop hl 
16d9 c9				ret 
16da			 
16da			;if ENABLE_BASIC 
16da			;	include "nascombasic.asm" 
16da			;	basic: 
16da			;	include "forth/FORTH.ASM" 
16da			;endif 
16da			 
16da			; eof 
16da			 
16da			 
# End of file firmware_diags.asm
16da			  
16da			include "firmware_prompts.asm"  
16da			; Prompts  
16da			 
16da			; boot messages 
16da			 
16da .. 00		prom_bootmsg:	db "z80-homebrew OS v1.7",0 
16ef .. 00		prom_bootmsg1:	db "by Kevin Groves",0 
16ff			 
16ff			 
16ff			; config menus 
16ff			 
16ff			;prom_c3: db "Add Dictionary To File",0 
16ff			 
16ff			if STARTUP_V1 
16ff .. 00		prom_c2: db "Select Autoload File",0 
1714 .. 00		prom_c2a: db "Disable Autoload File", 0 
172a			endif 
172a			 
172a			if STARTUP_V2 
172a			prom_c2: db "Enable Autoload Files",0 
172a			prom_c2a: db "Disable Autoload Files", 0 
172a			 
172a			crs_s1: db "*ls-word", 0 
172a			crs_s2: db "*ed-word", 0 
172a			crs_s3: db "*Demo-Games", 0 
172a			crs_s4: db "*Utils", 0 
172a			crs_s5: db "*SPI-Util", 0 
172a			crs_s6: db "*Key-Constants", 0 
172a			crs_sound: db "*Sound-Util", 0 
172a			crs_hw: db "*Hello-World",0 
172a			 
172a			 
172a			 
172a			endif 
172a			;prom_c2b: db "Select Storage Bank",0 
172a .. 00		prom_c4: db "Settings",0 
1733 .. 00		prom_m4:   db "Debug & Breakpoints On/Off",0 
174e .. 00		prom_m4b:   db "Monitor",0 
1756 .. 00		prom_c1: db "Hardware Diags",0 
1765			 
1765			 
1765			if STARTUP_V2 
1765			prom_c9: db "Create Startup Files",0 
1765			endif 
1765			 
1765 .. 00		prom_notav:    db "Feature not available",0 
177b .. 00		prom_empty:    db "",0 
177c			 
177c			; eof 
177c			 
# End of file firmware_prompts.asm
177c			  
177c			  
177c			; eof  
177c			  
# End of file firmware.asm
177c			 
177c			;; below moved from firmware.asm for strange zero calc of baseusermem label. Scope issue on multipass???? 
177c			;if BASE_KEV  
177c			;baseram: equ 08000h 
177c			;endif 
177c			 
177c			;if BASE_SC114 
177c			;baseram:     equ    endofcode 
177c			;endif 
177c			 
177c			 
177c			; Add NMI support. A rst 066h when r15z goes neg on clock side of resist. needs to do retn when exiting 
177c			 
177c			; start system 
177c			 
177c			coldstart: 
177c				; set sp 
177c				; di/ei 
177c			 
177c f3				di 
177d 31 00 f0			ld sp, tos 
1780 cd 31 60			call init_nmi 
1783			;	ei 
1783			 
1783				; init spinner 
1783 3e 00			ld a,0 
1785 32 c0 eb			ld (display_active), a 
1788			 
1788				; disable breakpoint by default 
1788			 
1788				;ld a,'*' 
1788			;	ld a,' ' 
1788			;	ld (os_view_disable),a 
1788			 
1788				; set break point vector as new break point on or off 
1788 cd 0b 15			call bp_off 
178b			 
178b				; init hardware 
178b			 
178b				; init keyboard and screen hardware 
178b			 
178b cd 1f 01			call hardware_init 
178e			 
178e			 
178e cd 00 0b			call delay1s 
1791 3e 58			ld a, display_row_3+8 
1793 11 03 01			ld de, buildtime 
1796 cd db 0b			call str_at_display 
1799 cd eb 0b			call update_display 
179c			 
179c cd 00 0b			call delay1s 
179f cd 00 0b			call delay1s 
17a2 cd 00 0b			call delay1s 
17a5			 
17a5				; detect if any keys are held down to enable breakpoints at start up 
17a5			 
17a5 cd 3b 61			call cin  
17a8 fe 00			cp 0 
17aa 28 03			jr z, .nokeys 
17ac			 
17ac				;call hardware_diags 
17ac cd 69 13			call config 
17af			 
17af			;	ld de, .bpen 
17af			;	ld a, display_row_4 
17af			;	call str_at_display 
17af			;	call update_display 
17af			; 
17af			;	ld a,0 
17af			;	ld (os_view_disable),a 
17af			; 
17af			;.bpwait: 
17af			;	call cin 
17af			;	cp 0 
17af			;	jr z, .bpwait 
17af			;	jr .nokeys 
17af			; 
17af			; 
17af			;.bpen:  db "Break points enabled!",0 
17af			 
17af			 
17af			 
17af			 
17af			 
17af			 
17af			.nokeys: 
17af			 
17af			 
17af				 
17af			 
17af			;jp  testkey 
17af			 
17af			;call storage_get_block_0 
17af			; 
17af			;ld hl, 0 
17af			;ld de, store_page 
17af			;call storage_read_block 
17af			 
17af				 
17af			;ld hl, 10 
17af			;ld de, store_page 
17af			;call storage_read_block 
17af			 
17af			 
17af			 
17af			 
17af			 
17af			;stop:	nop 
17af			;	jp stop 
17af			 
17af			 
17af			 
17af			main: 
17af cd c8 0b			call clear_display 
17b2 cd eb 0b			call update_display 
17b5			 
17b5			 
17b5			 
17b5			;	call testlcd 
17b5			 
17b5			 
17b5			 
17b5 cd 51 1f			call forth_init 
17b8			 
17b8			 
17b8			warmstart: 
17b8 cd 27 1f			call forth_warmstart 
17bb			 
17bb				; run startup word load 
17bb			        ; TODO prevent this running at warmstart after crash  
17bb			 
17bb				if STARTUP_ENABLE 
17bb			 
17bb					if STARTUP_V1 
17bb			 
17bb						if STORAGE_SE 
17bb							call forth_autoload 
17bb						endif 
17bb cd 81 5f					call forth_startup 
17be					endif 
17be			 
17be					if STARTUP_V2 
17be			 
17be						if STORAGE_SE 
17be							call forth_autoload 
17be						else 
17be							call forth_startup 
17be						endif 
17be			 
17be			 
17be					endif 
17be			 
17be				endif 
17be			 
17be			warmstart_afterauto: 
17be			 
17be				; show free memory after boot 
17be 11 5d 18			ld de, freeram 
17c1 3e 00			ld a, display_row_1 
17c3 cd db 0b			call str_at_display 
17c6			 
17c6				; get current heap start after loading any uwords 
17c6			 
17c6				;ld de, (os_last_new_uword) 
17c6				;ex de, hl 
17c6			 
17c6			; Or use heap_size word???? 
17c6				;ld hl, heap_end 
17c6				;ld hl, heap_size 
17c6				;ld de, topusermem 
17c6				;ld de, heap_start 
17c6 ed 5b 5e 61			ld de, (free_list )      
17ca 21 96 e2				ld hl, heap_end 
17cd ed 52			sbc hl, de 
17cf				;push hl 
17cf				;ld a,h	         	 
17cf				;ld hl, os_word_scratch		; TODO do direct write to frame buffer instead and drop the str_at_display 
17cf				;call hexout 
17cf			   	;pop hl 
17cf			; 
17cf			;	ld a,l 
17cf			;	ld hl, os_word_scratch+2 
17cf			;	call hexout 
17cf			;	ld hl, os_word_scratch+4 
17cf			;	ld a, 0 
17cf			;	ld (hl),a 
17cf eb				ex de, hl 
17d0 21 c0 e5			ld hl, os_word_scratch 
17d3 cd 0a 11			call uitoa_16 
17d6			 
17d6			 
17d6 11 c0 e5			ld de, os_word_scratch 
17d9 3e 0d			ld a, display_row_1 + 13 
17db cd db 0b			call str_at_display 
17de cd eb 0b			call update_display 
17e1			 
17e1			 
17e1				;call demo 
17e1			 
17e1			 
17e1				; init scratch input area for cli commands 
17e1			 
17e1 21 e2 e5			ld hl, os_cli_cmd 
17e4 3e 00			ld a,0 
17e6 77				ld (hl),a 
17e7 23				inc hl 
17e8 77				ld (hl),a 
17e9			 
17e9 3e 00			ld a,0 
17eb 32 e1 e6			ld (os_last_cmd),a	; current command in use to enable repeated use with an enter etc 
17ee			 
17ee 32 de e5			ld (os_cur_ptr),a	; ptr to whatever is needed for this command 
17f1 32 df e5			ld (os_cur_ptr+1),a	 
17f4			 
17f4 32 c0 e5			ld (os_word_scratch),a	; byte or word being used in parsing for this command 
17f7 32 c1 e5			ld (os_word_scratch+1),a	 
17fa				 
17fa			 
17fa				;ld a, kLCD_Line2        ; TODO prompt using direct screen line address. Correct this to frame buffer 
17fa 21 e2 e5			ld hl, os_cli_cmd 
17fd			 
17fd 3e 00			ld a, 0		 ; init cli input 
17ff 77				ld (hl), a 
1800 3e 28			ld a, display_row_2        ; TODO prompt using direct screen line address. Correct this to frame buffer 
1802			cli: 
1802				; show cli prompt 
1802				;push af 
1802				;ld a, 0 
1802				;ld de, prompt 
1802				;call str_at_display 
1802			 
1802				;call update_display 
1802				;pop af 
1802				;inc a 
1802				;ld a, kLCD_Line4+1	 ; TODO using direct screen line writes. Correct this to frame buffer 
1802			 
1802			.lastrecall: 
1802			 
1802 0e 00			ld c, 0 
1804 16 ff			ld d, 255    ; TODO fix input_str to actually take note of max string input length 
1806 1e 28			ld e, 40 
1808			 
1808 21 e2 e5			ld hl, os_cli_cmd 
180b			 
180b				STACKFRAME OFF $fefe $9f9f 
180b				if DEBUG_STACK_IMB 
180b					if OFF 
180b						exx 
180b						ld de, $fefe 
180b						ld a, d 
180b						ld hl, curframe 
180b						call hexout 
180b						ld a, e 
180b						ld hl, curframe+2 
180b						call hexout 
180b						ld hl, $fefe 
180b						push hl 
180b						ld hl, $9f9f 
180b						push hl 
180b						exx 
180b					endif 
180b				endif 
180b			endm 
# End of macro STACKFRAME
180b			 
180b cd 22 0e			call input_str 
180e			 
180e				STACKFRAMECHK OFF $fefe $9f9f 
180e				if DEBUG_STACK_IMB 
180e					if OFF 
180e						exx 
180e						ld hl, $9f9f 
180e						pop de   ; $9f9f 
180e						call cmp16 
180e						jr nz, .spnosame 
180e						ld hl, $fefe 
180e						pop de   ; $fefe 
180e						call cmp16 
180e						jr z, .spfrsame 
180e						.spnosame: call showsperror 
180e						.spfrsame: nop 
180e						exx 
180e					endif 
180e				endif 
180e			endm 
# End of macro STACKFRAMECHK
180e			 
180e			 
180e				; check to see if last line recall has been requested 
180e			 
180e			if EDIT_V2 
180e fe 05			cp KEY_UP 
1810 20 0f			jr nz, .noexecline 
1812			 
1812 11 e2 e5			ld de, os_cli_cmd 
1815 21 e1 e6			ld hl, os_last_cmd 
1818 01 ff 00			ld bc, 255 
181b ed b0			ldir 
181d 3e 00			ld a, 0 
181f 18 e1			jr .lastrecall 
1821			endif 
1821			 
1821			.noexecline: 
1821				; no so exec the line		 
1821			 
1821				; copy input to last command 
1821			 
1821 21 e2 e5			ld hl, os_cli_cmd 
1824 11 e1 e6			ld de, os_last_cmd 
1827 01 ff 00			ld bc, 255 
182a ed b0			ldir 
182c			 
182c				; wipe current buffer 
182c			 
182c			;	ld a, 0 
182c			;	ld hl, os_cli_cmd 
182c			;	ld de, os_cli_cmd+1 
182c			;	ld bc, 254 
182c			;	ldir 
182c				; TODO ldir is not working strcpy may not get all the terms on the input line???? 
182c			;	call strcpy 
182c			;	ld a, 0 
182c			;	ld (hl), a 
182c			;	inc hl 
182c			;	ld (hl), a 
182c			;	inc hl 
182c			;	ld (hl), a 
182c			 
182c				; switch frame buffer to program  
182c			 
182c 21 0a ed				ld hl, display_fb1 
182f 22 c6 eb				ld (display_fb_active), hl 
1832			 
1832			;	nop 
1832				STACKFRAME ON $fbfe $8f9f 
1832				if DEBUG_STACK_IMB 
1832					if ON 
1832						exx 
1832						ld de, $fbfe 
1832						ld a, d 
1832						ld hl, curframe 
1832						call hexout 
1832						ld a, e 
1832						ld hl, curframe+2 
1832						call hexout 
1832						ld hl, $fbfe 
1832						push hl 
1832						ld hl, $8f9f 
1832						push hl 
1832						exx 
1832					endif 
1832				endif 
1832			endm 
# End of macro STACKFRAME
1832				; first time into the parser so pass over the current scratch pad 
1832 21 e2 e5			ld hl,os_cli_cmd 
1835				; tokenise the entered statement(s) in HL 
1835 cd cb 1f			call forthparse 
1838			        ; exec forth statements in top of return stack 
1838 cd 07 20			call forthexec 
183b				;call forthexec_cleanup 
183b			;	call parsenext 
183b			 
183b				STACKFRAMECHK ON $fbfe $8f9f 
183b				if DEBUG_STACK_IMB 
183b					if ON 
183b						exx 
183b						ld hl, $8f9f 
183b						pop de   ; $8f9f 
183b						call cmp16 
183b						jr nz, .spnosame 
183b						ld hl, $fbfe 
183b						pop de   ; $fbfe 
183b						call cmp16 
183b						jr z, .spfrsame 
183b						.spnosame: call showsperror 
183b						.spfrsame: nop 
183b						exx 
183b					endif 
183b				endif 
183b			endm 
# End of macro STACKFRAMECHK
183b				; TODO on return from forth parsing should there be a prompt to return to system? but already in system. 
183b			 
183b 3e 78			ld a, display_row_4 
183d 11 6e 18			ld de, endprog 
1840			 
1840 cd eb 0b			call update_display		 
1843			 
1843 cd 08 1b			call next_page_prompt 
1846			 
1846				; switch frame buffer to cli 
1846			 
1846 21 ab ed				ld hl, display_fb0 
1849 22 c6 eb				ld (display_fb_active), hl 
184c			 
184c			 
184c cd c8 0b		        call clear_display 
184f cd eb 0b			call update_display		 
1852			 
1852 21 e2 e5			ld hl, os_cli_cmd 
1855			 
1855 3e 00			ld a, 0		 ; init cli input 
1857 77				ld (hl), a 
1858			 
1858				; TODO f_cursor_ptr should inc row (scroll if required) and set start of row for next input  
1858			 
1858				; now on last line 
1858			 
1858				; TODO scroll screen up 
1858			 
1858				; TODO instead just clear screen and place at top of screen 
1858			 
1858			;	ld a, 0 
1858			;	ld (f_cursor_ptr),a 
1858			 
1858				;call clear_display 
1858				;call update_display 
1858			 
1858				;ld a, kLCD_Line1        ; TODO prompt using direct screen line address. Correct this to frame buffer 
1858 3e 00			ld a, display_row_1        ; TODO prompt using direct screen line address. Correct this to frame buffer 
185a c3 02 18			jp cli 
185d			 
185d .. 00		freeram: db "Free bytes: ",0 
186a ..			asc: db "1A2F" 
186e .. 00		endprog: db "End prog...",0 
187a			 
187a			testenter2:   
187a 21 ed e2			ld hl,scratch+50 
187d 22 de e5			ld (os_cur_ptr),hl 
1880 c3 02 18			jp cli 
1883			 
1883			testenter:  
1883			 
1883 21 6a 18			ld hl,asc 
1886			;	ld a,(hl) 
1886			;	call nibble2val 
1886 cd 54 10			call get_byte 
1889			 
1889			 
1889			;	ld a,(hl) 
1889			;	call atohex 
1889			 
1889			;	call fourehexhl 
1889 32 ed e2			ld (scratch+50),a 
188c			 
188c			 
188c			 
188c 21 6c 18			ld hl,asc+2 
188f			;	ld a, (hl) 
188f			;	call nibble2val 
188f cd 54 10			call get_byte 
1892			 
1892			;	call fourehexhl 
1892 32 ef e2			ld (scratch+52),a 
1895				 
1895 21 ed e2			ld hl,scratch+50 
1898 22 de e5			ld (os_cur_ptr),hl 
189b c3 02 18			jp cli 
189e			 
189e			enter:	 
189e 3a bf e2			ld a,(scratch+4) 
18a1 fe 00			cp 0 
18a3 28 0c			jr z, .entercont 
18a5				; no, not a null term line so has an address to work out.... 
18a5			 
18a5 21 bd e2			ld hl,scratch+2 
18a8 cd b4 10			call get_word_hl 
18ab			 
18ab 22 de e5			ld (os_cur_ptr),hl	 
18ae c3 02 18			jp cli 
18b1			 
18b1			 
18b1			.entercont:  
18b1			 
18b1 21 bd e2			ld hl, scratch+2 
18b4 cd 54 10			call get_byte 
18b7			 
18b7 2a de e5		   	ld hl,(os_cur_ptr) 
18ba 77					ld (hl),a 
18bb 23					inc hl 
18bc 22 de e5				ld (os_cur_ptr),hl 
18bf				 
18bf			; get byte  
18bf			 
18bf			 
18bf c3 02 18			jp cli 
18c2			 
18c2			 
18c2			; basic monitor support 
18c2			 
18c2			monitor: 
18c2				;  
18c2 cd c8 0b			call clear_display 
18c5 3e 00			ld a, 0 
18c7 11 1b 19			ld de, .monprompt 
18ca cd db 0b			call str_at_display 
18cd cd eb 0b			call update_display 
18d0			 
18d0				; get a monitor command 
18d0			 
18d0 0e 00			ld c, 0     ; entry at top left 
18d2 16 64			ld d, 100   ; max buffer size 
18d4 1e 0f			ld e, 15    ; input scroll area 
18d6 3e 00			ld a, 0     ; init string 
18d8 21 b9 e4			ld hl, os_input 
18db 77				ld (hl), a 
18dc 23				inc hl 
18dd 77				ld (hl), a 
18de 21 b9 e4			ld hl, os_input 
18e1 3e 01			ld a, 1     ; init string 
18e3 cd 22 0e			call input_str 
18e6			 
18e6 cd c8 0b		        call clear_display 
18e9 cd eb 0b			call update_display		 
18ec			 
18ec 3a b9 e4			ld a, (os_input) 
18ef cd 52 11			call toUpper 
18f2 fe 48		        cp 'H' 
18f4 ca 8f 19		        jp z, .monhelp 
18f7 fe 44			cp 'D'		; dump 
18f9 ca c2 19			jp z, .mondump	 
18fc fe 43			cp 'C'		; dump 
18fe ca dc 19			jp z, .moncdump	 
1901 fe 4d			cp 'M'		; dump 
1903 ca 1d 19			jp z, .moneditstart 
1906 fe 55			cp 'U'		; dump 
1908 ca 29 19			jp z, .monedit	 
190b fe 47			cp 'G'		; dump 
190d ca b8 19			jp z, .monjump 
1910 fe 42			cp 'B'		; forth breakpoint 
1912 cc 11 15			call z, break_point_state 
1915 fe 51			cp 'Q'		; dump 
1917 c8				ret z	 
1918			 
1918			 
1918				; TODO "S" to access symbol by name and not need the address 
1918				; TODO "F" to find a string in memory 
1918			 
1918 c3 c2 18			jp monitor 
191b			 
191b .. 00		.monprompt: db ">", 0 
191d			 
191d			.moneditstart: 
191d				; get starting address 
191d			 
191d 21 bb e4			ld hl,os_input+2 
1920 cd b4 10			call get_word_hl 
1923			 
1923 22 de e5			ld (os_cur_ptr),hl	 
1926			 
1926 c3 c2 18			jp monitor 
1929			 
1929			.monedit: 
1929				; get byte to load 
1929			 
1929 21 bb e4			ld hl,os_input+2 
192c cd 54 10			call get_byte 
192f			 
192f				; get address to update 
192f 2a de e5			ld hl, (os_cur_ptr) 
1932			 
1932				; update byte 
1932			 
1932 77				ld (hl), a 
1933			 
1933				; move to next address and save it 
1933			 
1933 23				inc hl 
1934 22 de e5			ld (os_cur_ptr),hl	 
1937			 
1937 c3 c2 18			jp monitor 
193a			 
193a			 
193a .. 00		.monhelptext1: 	db "D-Dump, C-Cont Dump",0 
194e .. 00		.monhelptext2:  db "M-Edit Start, U-Update Byte",0 
196a .. 00		.monhelptext3:  db "G-Call address, B-Breakpoints",0 
1988 .. 00		.monhelptext4:  db "Q-Quit",0 
198f			        
198f			.monhelp: 
198f 3e 00			ld a, display_row_1 
1991 11 3a 19		        ld de, .monhelptext1 
1994			 
1994 cd db 0b			call str_at_display 
1997 3e 28			ld a, display_row_2 
1999 11 4e 19		        ld de, .monhelptext2 
199c					 
199c cd db 0b			call str_at_display 
199f 3e 50			ld a, display_row_3 
19a1 11 6a 19		        ld de, .monhelptext3 
19a4					 
19a4 cd db 0b			call str_at_display 
19a7 3e 78			ld a, display_row_4 
19a9 11 88 19		        ld de, .monhelptext4 
19ac cd db 0b			call str_at_display 
19af			 
19af cd eb 0b			call update_display		 
19b2			 
19b2 cd 08 1b			call next_page_prompt 
19b5 c3 c2 18			jp monitor 
19b8			 
19b8			.monjump:    
19b8 21 bb e4			ld hl,os_input+2 
19bb cd b4 10			call get_word_hl 
19be			 
19be e9				jp (hl) 
19bf c3 c2 18			jp monitor 
19c2			 
19c2			.mondump:    
19c2 21 bb e4			ld hl,os_input+2 
19c5 cd b4 10			call get_word_hl 
19c8			 
19c8 22 de e5			ld (os_cur_ptr),hl	 
19cb cd 10 1a			call dumpcont 
19ce 3e 78			ld a, display_row_4 
19d0 11 6e 18			ld de, endprog 
19d3			 
19d3 cd eb 0b			call update_display		 
19d6			 
19d6 cd 08 1b			call next_page_prompt 
19d9 c3 c2 18			jp monitor 
19dc			.moncdump: 
19dc cd 10 1a			call dumpcont 
19df 3e 78			ld a, display_row_4 
19e1 11 6e 18			ld de, endprog 
19e4			 
19e4 cd eb 0b			call update_display		 
19e7			 
19e7 cd 08 1b			call next_page_prompt 
19ea c3 c2 18			jp monitor 
19ed			 
19ed			 
19ed			; TODO symbol access  
19ed			 
19ed			.symbols:     ;; A list of symbols that can be called up  
19ed ab ed			dw display_fb0 
19ef .. 00			db "fb0",0  
19f3 74 ea		     	dw store_page 
19f5 .. 00			db "store_page",0 
1a00			 
1a00			 
1a00			dump:	; see if we are cotinuing on from the last command by not uncluding any address 
1a00			 
1a00 3a bc e2			ld a,(scratch+1) 
1a03 fe 00			cp 0 
1a05 28 09			jr z, dumpcont 
1a07			 
1a07				; no, not a null term line so has an address to work out.... 
1a07			 
1a07 21 bd e2			ld hl,scratch+2 
1a0a cd b4 10			call get_word_hl 
1a0d			 
1a0d 22 de e5			ld (os_cur_ptr),hl	 
1a10			 
1a10			 
1a10			 
1a10			dumpcont: 
1a10			 
1a10				; dump bytes at ptr 
1a10			 
1a10			 
1a10 3e 00			ld a, display_row_1 
1a12 2a c6 eb			ld hl, (display_fb_active) 
1a15 cd f5 0d			call addatohl 
1a18 cd 40 1a			call .dumpbyterow 
1a1b			 
1a1b 3e 28			ld a, display_row_2 
1a1d 2a c6 eb			ld hl, (display_fb_active) 
1a20 cd f5 0d			call addatohl 
1a23 cd 40 1a			call .dumpbyterow 
1a26			 
1a26			 
1a26 3e 50			ld a, display_row_3 
1a28 2a c6 eb			ld hl, (display_fb_active) 
1a2b cd f5 0d			call addatohl 
1a2e cd 40 1a			call .dumpbyterow 
1a31			 
1a31 3e 78			ld a, display_row_4 
1a33 2a c6 eb			ld hl, (display_fb_active) 
1a36 cd f5 0d			call addatohl 
1a39 cd 40 1a			call .dumpbyterow 
1a3c			 
1a3c cd eb 0b			call update_display 
1a3f			;		jp cli 
1a3f c9				ret 
1a40			 
1a40			.dumpbyterow: 
1a40			 
1a40				;push af 
1a40			 
1a40 e5				push hl 
1a41			 
1a41				; calc where to poke the ascii 
1a41			if display_cols == 20 
1a41				ld a, 16 
1a41			else 
1a41 3e 1f			ld a, 31 
1a43			endif 
1a43			 
1a43 cd f5 0d			call addatohl 
1a46 22 c0 e5			ld (os_word_scratch),hl  		; save pos for later 
1a49			 
1a49			 
1a49			; display decoding address 
1a49 2a de e5		   	ld hl,(os_cur_ptr) 
1a4c			 
1a4c 7c				ld a,h 
1a4d e1				pop hl 
1a4e e5				push hl 
1a4f			;	ld hl, os_word_scratch		; TODO do direct write to frame buffer instead and drop the str_at_display 
1a4f cd fe 0f			call hexout 
1a52 2a de e5		   	ld hl,(os_cur_ptr) 
1a55			 
1a55 7d				ld a,l 
1a56 e1				pop hl 
1a57 23				inc hl 
1a58 23				inc hl 
1a59 e5				push hl 
1a5a			;	ld hl, os_word_scratch+2 
1a5a cd fe 0f			call hexout 
1a5d e1				pop hl 
1a5e 23				inc hl 
1a5f 23				inc hl 
1a60				;ld hl, os_word_scratch+4 
1a60 3e 3a			ld a, ':' 
1a62 77				ld (hl),a 
1a63 23				inc hl 
1a64				;ld a, 0 
1a64				;ld (hl),a 
1a64				;ld de, os_word_scratch 
1a64				;pop af 
1a64				;push af 
1a64			;		ld a, display_row_2 
1a64			;		call str_at_display 
1a64			;		call update_display 
1a64			 
1a64			 
1a64			;pop af 
1a64			;	add 5 
1a64			 
1a64			if display_cols == 20 
1a64				ld b, 4 
1a64			else 
1a64 06 08			ld b, 8 
1a66			endif	 
1a66			 
1a66			.dumpbyte: 
1a66 c5				push bc 
1a67 e5				push hl 
1a68			 
1a68			 
1a68 2a de e5		   	ld hl,(os_cur_ptr) 
1a6b 7e					ld a,(hl) 
1a6c			 
1a6c					; poke the ascii to display 
1a6c 2a c0 e5				ld hl,(os_word_scratch) 
1a6f 77					ld (hl),a 
1a70 23					inc hl 
1a71 22 c0 e5				ld (os_word_scratch),hl 
1a74			 
1a74					 
1a74			 
1a74			 
1a74 e1					pop hl 
1a75 e5					push hl 
1a76			 
1a76 cd fe 0f				call hexout 
1a79			 
1a79					 
1a79 2a de e5		   	ld hl,(os_cur_ptr) 
1a7c 23				inc hl 
1a7d 22 de e5		   	ld (os_cur_ptr),hl 
1a80			 
1a80 e1					pop hl 
1a81 23					inc hl 
1a82 23					inc hl 
1a83 23					inc hl 
1a84			 
1a84			 
1a84			 
1a84					;ld a,0 
1a84					;ld (os_word_scratch+2),a 
1a84					;pop af 
1a84					;push af 
1a84			 
1a84					;ld de, os_word_scratch 
1a84					;call str_at_display 
1a84			;		call update_display 
1a84			;		pop af 
1a84 c1					pop bc 
1a85 c6 03				add 3 
1a87 10 dd			djnz .dumpbyte 
1a89			 
1a89				 
1a89			 
1a89 c9				ret 
1a8a			 
1a8a			jump:	 
1a8a			 
1a8a 21 bd e2			ld hl,scratch+2 
1a8d cd b4 10			call get_word_hl 
1a90				;ld hl,(scratch+2) 
1a90				;call fourehexhl 
1a90			 
1a90 22 de e5			ld (os_cur_ptr),hl	 
1a93			 
1a93 e9				jp (hl) 
1a94			 
1a94			 
1a94			 
1a94			; TODO implement a basic monitor mode to start with 
1a94			 
1a94			 
1a94			 
1a94			 
1a94			 
1a94			 
1a94			 
1a94			 
1a94			 
1a94			; testing and demo code during development 
1a94			 
1a94			 
1a94 .. 00		str1: db "Enter some text...",0 
1aa7 .. 00		clear: db "                    ",0 
1abc			 
1abc			demo: 
1abc			 
1abc			 
1abc			 
1abc			;	call update_display 
1abc			 
1abc				; init scratch input area for testing 
1abc 21 bb e2			ld hl, scratch	 
1abf 3e 00			ld a,0 
1ac1 77				ld (hl),a 
1ac2			 
1ac2			 
1ac2 3e 28		            LD   A, display_row_2 
1ac4			;            CALL fLCD_Pos       ;Position cursor to location in A 
1ac4 11 94 1a		            LD   DE, str1 
1ac7 cd db 0b			call str_at_display 
1aca			 
1aca			;            CALL fLCD_Str       ;Display string pointed to by DE 
1aca			cloop:	 
1aca 3e 50		            LD   A, display_row_3 
1acc			;            CALL fLCD_Pos       ;Position cursor to location in A 
1acc 11 a7 1a		            LD   DE, clear 
1acf			 ;           CALL fLCD_Str       ;Display string pointed to by DE 
1acf cd db 0b				call str_at_display 
1ad2 3e 78			ld a, display_row_4 
1ad4 11 04 1b			ld de, prompt 
1ad7			 
1ad7 cd db 0b				call str_at_display 
1ada cd eb 0b			call update_display 
1add			 
1add 3e 79			ld a, kLCD_Line4+1	 ; TODO using direct screen line writes. Correct this to frame buffer 
1adf 16 0a			ld d, 10 
1ae1 21 bb e2			ld hl, scratch	 
1ae4 cd 22 0e			call input_str 
1ae7			 
1ae7			;	call clear_display 
1ae7			;'	call update_display 
1ae7			 
1ae7 3e 00		            LD   A, display_row_1 
1ae9			;            CALL fLCD_Pos       ;Position cursor to location in A 
1ae9 11 a7 1a		            LD   DE, clear 
1aec cd db 0b				call str_at_display 
1aef			;            CALL fLCD_Str       ;Display string pointed to by DE 
1aef 3e 00		            LD   A, display_row_1 
1af1			;            CALL fLCD_Pos       ;Position cursor to location in A 
1af1 11 bb e2		            LD   DE, scratch 
1af4			;            CALL fLCD_Str       ;Display string pointed to by DE 
1af4 cd db 0b				call str_at_display 
1af7 cd eb 0b			call update_display 
1afa			 
1afa 3e 00				ld a,0 
1afc 21 bb e2			ld hl, scratch 
1aff 77				ld (hl),a 
1b00			 
1b00 00				nop 
1b01 c3 ca 1a			jp cloop 
1b04			 
1b04			 
1b04			 
1b04			; OS Prompt 
1b04			 
1b04 .. 00		prompt: db ">",0 
1b06 .. 00		endprg: db "?",0 
1b08			 
1b08			 
1b08			; handy next page prompt 
1b08			next_page_prompt: 
1b08 e5				push hl 
1b09 d5				push de 
1b0a f5				push af 
1b0b c5				push bc 
1b0c			 
1b0c 3e 9f			ld a,display_row_4 + display_cols - 1 
1b0e 11 06 1b		        ld de, endprg 
1b11 cd db 0b			call str_at_display 
1b14 cd eb 0b			call update_display 
1b17 cd 33 61			call cin_wait 
1b1a c1				pop bc 
1b1b f1				pop af 
1b1c d1				pop de 
1b1d e1				pop hl 
1b1e			 
1b1e			 
1b1e c9				ret 
1b1f			 
1b1f			 
1b1f			; forth parser 
1b1f			 
1b1f			; My forth kernel 
1b1f			include "forth_kernel.asm" 
1b1f			; 
1b1f			; kernel to the forth OS 
1b1f			 
1b1f			DS_TYPE_STR: equ 1     ; string type 
1b1f			DS_TYPE_INUM: equ 2     ; $ 16 bit unsigned int usually a hex address 
1b1f			DS_TYPE_SNUM: equ 3     ; $ 16 bit signed int  
1b1f			;DS_TYPE_FNUM: equ 3      ; 24/32 bit floating point  do string conversion instead of a new type 
1b1f			 
1b1f			FORTH_PARSEV1: equ 0 
1b1f			FORTH_PARSEV2: equ 0 
1b1f			FORTH_PARSEV3: equ 0 
1b1f			FORTH_PARSEV4: equ 0 
1b1f			FORTH_PARSEV5: equ 0 
1b1f			FORTH_PARSEV6: equ 1 
1b1f			 
1b1f			;if FORTH_PARSEV5 
1b1f			;	FORTH_END_BUFFER: equ 0 
1b1f			;else 
1b1f			FORTH_END_BUFFER: equ 127 
1b1f			;endif 
1b1f			 
1b1f			FORTH_TRUE: equ 1 
1b1f			FORTH_FALSE: equ 0 
1b1f			 
1b1f			if FORTH_PARSEV4 
1b1f			include "forth_stackops.asm" 
1b1f			endif 
1b1f			 
1b1f			if FORTH_PARSEV5 
1b1f			include "forth_stackopsv5.asm" 
1b1f			endif 
1b1f			 
1b1f			if FORTH_PARSEV6 
1b1f			include "forth_stackopsv5.asm" 
1b1f			 
1b1f			; Stack operations for v5 parser on wards 
1b1f			; * DATA stack 
1b1f			; * LOOP stack 
1b1f			; * RETURN stack 
1b1f			 
1b1f			 
1b1f			 
1b1f			FORTH_CHK_DSP_UNDER: macro 
1b1f				push hl 
1b1f				push de 
1b1f				ld hl,(cli_data_sp) 
1b1f				ld de, cli_data_stack 
1b1f				call cmp16 
1b1f				jp c, fault_dsp_under 
1b1f				pop de 
1b1f				pop hl 
1b1f				endm 
1b1f			 
1b1f			 
1b1f			FORTH_CHK_RSP_UNDER: macro 
1b1f				push hl 
1b1f				push de 
1b1f				ld hl,(cli_ret_sp) 
1b1f				ld de, cli_ret_stack 
1b1f				call cmp16 
1b1f				jp c, fault_rsp_under 
1b1f				pop de 
1b1f				pop hl 
1b1f				endm 
1b1f			 
1b1f			FORTH_CHK_LOOP_UNDER: macro 
1b1f				push hl 
1b1f				push de 
1b1f				ld hl,(cli_loop_sp) 
1b1f				ld de, cli_loop_stack 
1b1f				call cmp16 
1b1f				jp c, fault_loop_under 
1b1f				pop de 
1b1f				pop hl 
1b1f				endm 
1b1f			 
1b1f			FORTH_ERR_TOS_NOTSTR: macro 
1b1f				; TOSO might need more for checks when used 
1b1f				push af 
1b1f				ld a,(hl) 
1b1f				cp DS_TYPE_STR 
1b1f				jp nz, type_faultn   
1b1f				pop af 
1b1f				endm 
1b1f			 
1b1f			FORTH_ERR_TOS_NOTNUM: macro 
1b1f				push af 
1b1f				ld a,(hl) 
1b1f				cp DS_TYPE_INUM 
1b1f				jp nz, type_faultn   
1b1f				pop af 
1b1f				endm 
1b1f			 
1b1f			 
1b1f			; increase data stack pointer and save hl to it 
1b1f				 
1b1f			FORTH_DSP_NEXT: macro 
1b1f				call macro_forth_dsp_next 
1b1f				endm 
1b1f			 
1b1f			 
1b1f			macro_forth_dsp_next: 
1b1f				if DEBUG_FORTH_STACK_GUARD 
1b1f cd 59 5d				call check_stacks 
1b22				endif 
1b22 e5				push hl 
1b23 d5				push de 
1b24 eb				ex de,hl 
1b25 2a e8 e9			ld hl,(cli_data_sp) 
1b28 23				inc hl 
1b29 23				inc hl 
1b2a			 
1b2a			; PARSEV5 
1b2a 23				inc hl 
1b2b 22 e8 e9			ld (cli_data_sp),hl 
1b2e 73				ld (hl), e 
1b2f 23				inc hl 
1b30 72				ld (hl), d 
1b31 d1				pop de 
1b32 e1				pop hl 
1b33				if DEBUG_FORTH_STACK_GUARD 
1b33 cd 59 5d				call check_stacks 
1b36				endif 
1b36 c9				ret 
1b37			 
1b37			 
1b37			; increase ret stack pointer and save hl to it 
1b37				 
1b37			FORTH_RSP_NEXT: macro 
1b37				call macro_forth_rsp_next 
1b37				endm 
1b37			 
1b37			macro_forth_rsp_next: 
1b37				if DEBUG_FORTH_STACK_GUARD 
1b37 cd 59 5d				call check_stacks 
1b3a				endif 
1b3a e5				push hl 
1b3b d5				push de 
1b3c eb				ex de,hl 
1b3d 2a ec e9			ld hl,(cli_ret_sp) 
1b40 23				inc hl 
1b41 23				inc hl 
1b42 22 ec e9			ld (cli_ret_sp),hl 
1b45 73				ld (hl), e 
1b46 23				inc hl 
1b47 72				ld (hl), d 
1b48 d1				pop de 
1b49 e1				pop hl 
1b4a				if DEBUG_FORTH_STACK_GUARD 
1b4a cd 59 5d				call check_stacks 
1b4d				endif 
1b4d c9				ret 
1b4e			 
1b4e			; get current ret stack pointer and save to hl  
1b4e				 
1b4e			FORTH_RSP_TOS: macro 
1b4e				call macro_forth_rsp_tos 
1b4e				endm 
1b4e			 
1b4e			macro_forth_rsp_tos: 
1b4e				;push de 
1b4e 2a ec e9			ld hl,(cli_ret_sp) 
1b51 cd 89 1b			call loadhlptrtohl 
1b54				;ld e, (hl) 
1b54				;inc hl 
1b54				;ld d, (hl) 
1b54				;ex de, hl 
1b54					if DEBUG_FORTH_WORDS 
1b54			;			DMARK "RST" 
1b54						CALLMONITOR 
1b54 cd 6f ee			call debug_vector  
1b57				endm  
# End of macro CALLMONITOR
1b57					endif 
1b57				;pop de 
1b57 c9				ret 
1b58			 
1b58			; pop ret stack pointer 
1b58				 
1b58			FORTH_RSP_POP: macro 
1b58				call macro_forth_rsp_pop 
1b58				endm 
1b58			 
1b58			 
1b58			macro_forth_rsp_pop: 
1b58				if DEBUG_FORTH_STACK_GUARD 
1b58			;		DMARK "RPP" 
1b58 cd 59 5d				call check_stacks 
1b5b					FORTH_CHK_RSP_UNDER 
1b5b e5				push hl 
1b5c d5				push de 
1b5d 2a ec e9			ld hl,(cli_ret_sp) 
1b60 11 a6 e9			ld de, cli_ret_stack 
1b63 cd 13 0e			call cmp16 
1b66 da 70 5e			jp c, fault_rsp_under 
1b69 d1				pop de 
1b6a e1				pop hl 
1b6b				endm 
# End of macro FORTH_CHK_RSP_UNDER
1b6b				endif 
1b6b e5				push hl 
1b6c 2a ec e9			ld hl,(cli_ret_sp) 
1b6f			 
1b6f			 
1b6f				if FORTH_ENABLE_FREE 
1b6f			 
1b6f					; get pointer 
1b6f			 
1b6f					push de 
1b6f					push hl 
1b6f			 
1b6f					ld e, (hl) 
1b6f					inc hl 
1b6f					ld d, (hl) 
1b6f			 
1b6f					ex de, hl 
1b6f					call free 
1b6f			 
1b6f					pop hl 
1b6f					pop de 
1b6f			 
1b6f			 
1b6f				endif 
1b6f			 
1b6f			 
1b6f 2b				dec hl 
1b70 2b				dec hl 
1b71 22 ec e9			ld (cli_ret_sp), hl 
1b74				; do stack underflow checks 
1b74 e1				pop hl 
1b75				if DEBUG_FORTH_STACK_GUARD 
1b75 cd 59 5d				call check_stacks 
1b78					FORTH_CHK_RSP_UNDER 
1b78 e5				push hl 
1b79 d5				push de 
1b7a 2a ec e9			ld hl,(cli_ret_sp) 
1b7d 11 a6 e9			ld de, cli_ret_stack 
1b80 cd 13 0e			call cmp16 
1b83 da 70 5e			jp c, fault_rsp_under 
1b86 d1				pop de 
1b87 e1				pop hl 
1b88				endm 
# End of macro FORTH_CHK_RSP_UNDER
1b88				endif 
1b88 c9				ret 
1b89			 
1b89			 
1b89			 
1b89			; routine to load word pointed to by hl into hl 
1b89			 
1b89			loadhlptrtohl: 
1b89			 
1b89 d5				push de 
1b8a 5e				ld e, (hl) 
1b8b 23				inc hl 
1b8c 56				ld d, (hl) 
1b8d eb				ex de, hl 
1b8e d1				pop de 
1b8f			 
1b8f c9				ret 
1b90			 
1b90			 
1b90			 
1b90			 
1b90			 
1b90			; push a number held in HL onto the data stack 
1b90			; entry point for pushing a value when already in hl used in function above 
1b90			 
1b90			forth_push_numhl: 
1b90			 
1b90 e5				push hl    ; save value to push 
1b91			 
1b91			if DEBUG_FORTH_PUSH 
1b91				; see if disabled 
1b91			 
1b91			 
1b91 f5				push af 
1b92 3a 6f ee			ld a,(debug_vector) 
1b95 fe c9			cp $c9   ; ret 
1b97			;	ld a, (os_view_disable) 
1b97			;	cp '*' 
1b97 28 34			jr z, .pskip2 
1b99 e5				push hl 
1b9a e5			push hl 
1b9b cd c8 0b			call clear_display 
1b9e e1			pop hl 
1b9f 7c				ld a,h 
1ba0 21 c0 e5			ld hl, os_word_scratch 
1ba3 cd fe 0f			call hexout 
1ba6 e1				pop hl 
1ba7 7d				ld a,l 
1ba8 21 c2 e5			ld hl, os_word_scratch+2 
1bab cd fe 0f			call hexout 
1bae			 
1bae 21 c4 e5			ld hl, os_word_scratch+4 
1bb1 3e 00			ld a,0 
1bb3 77				ld (hl),a 
1bb4 11 c0 e5			ld de,os_word_scratch 
1bb7 3e 28				ld a, display_row_2 
1bb9 cd db 0b				call str_at_display 
1bbc 11 52 4f			ld de, .push_num 
1bbf 3e 00			ld a, display_row_1 
1bc1			 
1bc1 cd db 0b				call str_at_display 
1bc4			 
1bc4			 
1bc4 cd eb 0b			call update_display 
1bc7 cd 00 0b			call delay1s 
1bca cd 00 0b			call delay1s 
1bcd			.pskip2:  
1bcd			 
1bcd f1				pop af 
1bce			endif	 
1bce			 
1bce			 
1bce				FORTH_DSP_NEXT 
1bce cd 1f 1b			call macro_forth_dsp_next 
1bd1				endm 
# End of macro FORTH_DSP_NEXT
1bd1			 
1bd1 2a e8 e9			ld hl, (cli_data_sp) 
1bd4			 
1bd4				; save item type 
1bd4 3e 02			ld a,  DS_TYPE_INUM 
1bd6 77				ld (hl), a 
1bd7 23				inc hl 
1bd8			 
1bd8				; get word off stack 
1bd8 d1				pop de 
1bd9 7b				ld a,e 
1bda 77				ld (hl), a 
1bdb 23				inc hl 
1bdc 7a				ld a,d 
1bdd 77				ld (hl), a 
1bde			 
1bde			if DEBUG_FORTH_PUSH 
1bde 2b				dec hl 
1bdf 2b				dec hl 
1be0 2b				dec hl 
1be1						DMARK "PH5" 
1be1 f5				push af  
1be2 3a f6 1b			ld a, (.dmark)  
1be5 32 65 ee			ld (debug_mark),a  
1be8 3a f7 1b			ld a, (.dmark+1)  
1beb 32 66 ee			ld (debug_mark+1),a  
1bee 3a f8 1b			ld a, (.dmark+2)  
1bf1 32 67 ee			ld (debug_mark+2),a  
1bf4 18 03			jr .pastdmark  
1bf6 ..			.dmark: db "PH5"  
1bf9 f1			.pastdmark: pop af  
1bfa			endm  
# End of macro DMARK
1bfa				CALLMONITOR 
1bfa cd 6f ee			call debug_vector  
1bfd				endm  
# End of macro CALLMONITOR
1bfd			endif	 
1bfd			 
1bfd c9				ret 
1bfe			 
1bfe			 
1bfe			; Push a string to stack pointed to by hl 
1bfe			 
1bfe			forth_push_str: 
1bfe			 
1bfe			if DEBUG_FORTH_PUSH 
1bfe						DMARK "PSQ" 
1bfe f5				push af  
1bff 3a 13 1c			ld a, (.dmark)  
1c02 32 65 ee			ld (debug_mark),a  
1c05 3a 14 1c			ld a, (.dmark+1)  
1c08 32 66 ee			ld (debug_mark+1),a  
1c0b 3a 15 1c			ld a, (.dmark+2)  
1c0e 32 67 ee			ld (debug_mark+2),a  
1c11 18 03			jr .pastdmark  
1c13 ..			.dmark: db "PSQ"  
1c16 f1			.pastdmark: pop af  
1c17			endm  
# End of macro DMARK
1c17				CALLMONITOR 
1c17 cd 6f ee			call debug_vector  
1c1a				endm  
# End of macro CALLMONITOR
1c1a			endif	 
1c1a			 
1c1a			 
1c1a			    
1c1a e5				push hl 
1c1b e5				push hl 
1c1c			 
1c1c			;	ld a, 0   ; find end of string 
1c1c cd 5b 11			call strlenz 
1c1f			if DEBUG_FORTH_PUSH 
1c1f						DMARK "PQ2" 
1c1f f5				push af  
1c20 3a 34 1c			ld a, (.dmark)  
1c23 32 65 ee			ld (debug_mark),a  
1c26 3a 35 1c			ld a, (.dmark+1)  
1c29 32 66 ee			ld (debug_mark+1),a  
1c2c 3a 36 1c			ld a, (.dmark+2)  
1c2f 32 67 ee			ld (debug_mark+2),a  
1c32 18 03			jr .pastdmark  
1c34 ..			.dmark: db "PQ2"  
1c37 f1			.pastdmark: pop af  
1c38			endm  
# End of macro DMARK
1c38				CALLMONITOR 
1c38 cd 6f ee			call debug_vector  
1c3b				endm  
# End of macro CALLMONITOR
1c3b			endif	 
1c3b eb				ex de, hl 
1c3c e1				pop hl   ; get ptr to start of string 
1c3d			if DEBUG_FORTH_PUSH 
1c3d						DMARK "PQ3" 
1c3d f5				push af  
1c3e 3a 52 1c			ld a, (.dmark)  
1c41 32 65 ee			ld (debug_mark),a  
1c44 3a 53 1c			ld a, (.dmark+1)  
1c47 32 66 ee			ld (debug_mark+1),a  
1c4a 3a 54 1c			ld a, (.dmark+2)  
1c4d 32 67 ee			ld (debug_mark+2),a  
1c50 18 03			jr .pastdmark  
1c52 ..			.dmark: db "PQ3"  
1c55 f1			.pastdmark: pop af  
1c56			endm  
# End of macro DMARK
1c56				CALLMONITOR 
1c56 cd 6f ee			call debug_vector  
1c59				endm  
# End of macro CALLMONITOR
1c59			endif	 
1c59 19				add hl,de 
1c5a			if DEBUG_FORTH_PUSH 
1c5a						DMARK "PQE" 
1c5a f5				push af  
1c5b 3a 6f 1c			ld a, (.dmark)  
1c5e 32 65 ee			ld (debug_mark),a  
1c61 3a 70 1c			ld a, (.dmark+1)  
1c64 32 66 ee			ld (debug_mark+1),a  
1c67 3a 71 1c			ld a, (.dmark+2)  
1c6a 32 67 ee			ld (debug_mark+2),a  
1c6d 18 03			jr .pastdmark  
1c6f ..			.dmark: db "PQE"  
1c72 f1			.pastdmark: pop af  
1c73			endm  
# End of macro DMARK
1c73				CALLMONITOR 
1c73 cd 6f ee			call debug_vector  
1c76				endm  
# End of macro CALLMONITOR
1c76			endif	 
1c76			 
1c76 2b				dec hl    ; see if there is an optional trailing double quote 
1c77 7e				ld a,(hl) 
1c78 fe 22			cp '"' 
1c7a 20 03			jr nz, .strnoq 
1c7c 3e 00			ld a, 0      ; get rid of double quote 
1c7e 77				ld (hl), a 
1c7f 23			.strnoq: inc hl 
1c80			 
1c80 3e 00			ld a, 0 
1c82 77				ld (hl), a     ; add null term and get rid of trailing double quote 
1c83			 
1c83 13				inc de ; add one for the type string 
1c84 13				inc de ; add one for null term??? 
1c85			 
1c85				; tos is get string pointer again 
1c85				; de contains space to allocate 
1c85				 
1c85 d5				push de 
1c86			 
1c86 eb				ex de, hl 
1c87			 
1c87				;push af 
1c87			 
1c87			if DEBUG_FORTH_PUSH 
1c87						DMARK "PHm" 
1c87 f5				push af  
1c88 3a 9c 1c			ld a, (.dmark)  
1c8b 32 65 ee			ld (debug_mark),a  
1c8e 3a 9d 1c			ld a, (.dmark+1)  
1c91 32 66 ee			ld (debug_mark+1),a  
1c94 3a 9e 1c			ld a, (.dmark+2)  
1c97 32 67 ee			ld (debug_mark+2),a  
1c9a 18 03			jr .pastdmark  
1c9c ..			.dmark: db "PHm"  
1c9f f1			.pastdmark: pop af  
1ca0			endm  
# End of macro DMARK
1ca0				CALLMONITOR 
1ca0 cd 6f ee			call debug_vector  
1ca3				endm  
# End of macro CALLMONITOR
1ca3			endif	 
1ca3 cd d0 11			call malloc	; on ret hl now contains allocated memory 
1ca6				if DEBUG_FORTH_MALLOC_GUARD 
1ca6 cc aa 4f				call z,malloc_error 
1ca9				endif 
1ca9			 
1ca9				 
1ca9 c1				pop bc    ; get length 
1caa d1				pop de   ;  get string start    
1cab			 
1cab				; hl has destination from malloc 
1cab			 
1cab eb				ex de, hl    ; prep for ldir 
1cac			 
1cac d5				push de   ; save malloc area for DSP later 
1cad				;push hl   ; save malloc area for DSP later 
1cad			 
1cad			if DEBUG_FORTH_PUSH 
1cad						DMARK "PHc" 
1cad f5				push af  
1cae 3a c2 1c			ld a, (.dmark)  
1cb1 32 65 ee			ld (debug_mark),a  
1cb4 3a c3 1c			ld a, (.dmark+1)  
1cb7 32 66 ee			ld (debug_mark+1),a  
1cba 3a c4 1c			ld a, (.dmark+2)  
1cbd 32 67 ee			ld (debug_mark+2),a  
1cc0 18 03			jr .pastdmark  
1cc2 ..			.dmark: db "PHc"  
1cc5 f1			.pastdmark: pop af  
1cc6			endm  
# End of macro DMARK
1cc6				CALLMONITOR 
1cc6 cd 6f ee			call debug_vector  
1cc9				endm  
# End of macro CALLMONITOR
1cc9			endif	 
1cc9			 
1cc9			 
1cc9 ed b0			ldir 
1ccb			 
1ccb			 
1ccb				; push malloc to data stack     macro?????  
1ccb			 
1ccb				FORTH_DSP_NEXT 
1ccb cd 1f 1b			call macro_forth_dsp_next 
1cce				endm 
# End of macro FORTH_DSP_NEXT
1cce			 
1cce				; save value and type 
1cce			 
1cce 2a e8 e9			ld hl, (cli_data_sp) 
1cd1			 
1cd1				; save item type 
1cd1 3e 01			ld a,  DS_TYPE_STR 
1cd3 77				ld (hl), a 
1cd4 23				inc hl 
1cd5			 
1cd5				; get malloc word off stack 
1cd5 d1				pop de 
1cd6 73				ld (hl), e 
1cd7 23				inc hl 
1cd8 72				ld (hl), d 
1cd9			 
1cd9			 
1cd9			 
1cd9			if DEBUG_FORTH_PUSH 
1cd9 2a e8 e9			ld hl, (cli_data_sp) 
1cdc						DMARK "PHS" 
1cdc f5				push af  
1cdd 3a f1 1c			ld a, (.dmark)  
1ce0 32 65 ee			ld (debug_mark),a  
1ce3 3a f2 1c			ld a, (.dmark+1)  
1ce6 32 66 ee			ld (debug_mark+1),a  
1ce9 3a f3 1c			ld a, (.dmark+2)  
1cec 32 67 ee			ld (debug_mark+2),a  
1cef 18 03			jr .pastdmark  
1cf1 ..			.dmark: db "PHS"  
1cf4 f1			.pastdmark: pop af  
1cf5			endm  
# End of macro DMARK
1cf5				CALLMONITOR 
1cf5 cd 6f ee			call debug_vector  
1cf8				endm  
# End of macro CALLMONITOR
1cf8			;	ex de,hl 
1cf8			endif	 
1cf8				; in case of spaces, skip the ptr past the copied string 
1cf8				;pop af 
1cf8				;ld (cli_origptr),hl 
1cf8			 
1cf8 c9				ret 
1cf9			 
1cf9			 
1cf9			 
1cf9			; TODO ascii push input onto stack given hl to start of input 
1cf9			 
1cf9			; identify type 
1cf9			; if starts with a " then a string 
1cf9			; otherwise it is a number 
1cf9			;  
1cf9			; if a string 
1cf9			;     scan for ending " to get length of string to malloc for + 1 
1cf9			;     malloc 
1cf9			;     put pointer to string on stack first byte flags as string 
1cf9			; 
1cf9			; else a number 
1cf9			;    look for number format identifier 
1cf9			;    $xx hex 
1cf9			;    %xxxxx bin 
1cf9			;    xxxxx decimal 
1cf9			;    convert number to 16bit word.  
1cf9			;    malloc word + 1 with flag to identiy as num 
1cf9			;    put pointer to number on stack 
1cf9			;   
1cf9			;  
1cf9			  
1cf9			forth_apush: 
1cf9				; kernel push 
1cf9			 
1cf9			if DEBUG_FORTH_PUSH 
1cf9						DMARK "PSH" 
1cf9 f5				push af  
1cfa 3a 0e 1d			ld a, (.dmark)  
1cfd 32 65 ee			ld (debug_mark),a  
1d00 3a 0f 1d			ld a, (.dmark+1)  
1d03 32 66 ee			ld (debug_mark+1),a  
1d06 3a 10 1d			ld a, (.dmark+2)  
1d09 32 67 ee			ld (debug_mark+2),a  
1d0c 18 03			jr .pastdmark  
1d0e ..			.dmark: db "PSH"  
1d11 f1			.pastdmark: pop af  
1d12			endm  
# End of macro DMARK
1d12				CALLMONITOR 
1d12 cd 6f ee			call debug_vector  
1d15				endm  
# End of macro CALLMONITOR
1d15			endif	 
1d15				; identify input type 
1d15			 
1d15 7e				ld a,(hl) 
1d16			 
1d16 fe 23			cp '#' 
1d18 ca 52 1d			jp z, .fapdec 
1d1b			 
1d1b			 
1d1b fe 22			cp '"' 
1d1d 28 0a			jr z, .fapstr 
1d1f fe 24			cp '$' 
1d21 ca 49 1d			jp z, .faphex 
1d24 fe 25			cp '%' 
1d26 ca 31 1d			jp z, .fapbin 
1d29			;	cp 'b' 
1d29			;	jp z, .fabin 
1d29				; else decimal 
1d29			 
1d29				; TODO do decimal conversion 
1d29				; decimal is stored as a 16bit word 
1d29			 
1d29				; by default everything is a string if type is not detected 
1d29			.fapstr: ; 
1d29 fe 22			cp '"' 
1d2b 20 01			jr nz, .strnoqu 
1d2d 23				inc hl 
1d2e			.strnoqu: 
1d2e c3 fe 1b			jp forth_push_str 
1d31			 
1d31			 
1d31			 
1d31			.fapbin:    ; push a binary string.  
1d31 11 00 00			ld de, 0   ; hold a 16bit value 
1d34			 
1d34 23			.fapbinshift:	inc hl  
1d35 7e				ld a,(hl) 
1d36 fe 00			cp 0     ; done scanning  
1d38 28 0b			jr z, .fapbdone  	; got it in HL so push  
1d3a			 
1d3a				; left shift de 
1d3a eb				ex de, hl	 
1d3b 29				add hl, hl 
1d3c			 
1d3c				; is 1 
1d3c fe 31			cp '1' 
1d3e 20 02			jr nz, .binzero 
1d40 cb 4d			bit 1, l 
1d42			.binzero: 
1d42 eb				ex de, hl	 ; save current de 
1d43 18 ef			jr .fapbinshift 
1d45			 
1d45			.fapbdone: 
1d45 eb				ex de, hl 
1d46 c3 90 1b			jp forth_push_numhl 
1d49			 
1d49			 
1d49			.faphex:   ; hex is always stored as a 16bit word 
1d49				; skip number prefix 
1d49 23				inc hl 
1d4a				; turn ascii into number 
1d4a cd b4 10			call get_word_hl	; ret 16bit word in hl 
1d4d			 
1d4d c3 90 1b			jp forth_push_numhl 
1d50			 
1d50 00				 nop 
1d51			 
1d51			.fabin:   ; TODO bin conversion 
1d51			 
1d51			 
1d51 c9				ret 
1d52			.fapdec:	 
1d52				; string to dec conversion 
1d52 23				inc hl 
1d53 eb				ex de, hl 
1d54 cd f2 10			call string_to_uint16 
1d57 c3 90 1b			jp forth_push_numhl 
1d5a c9				ret 
1d5b				 
1d5b			;atoui_16: 
1d5b			 
1d5b			; get either a string ptr or a 16bit word from the data stack 
1d5b			 
1d5b			FORTH_DSP: macro 
1d5b				call macro_forth_dsp 
1d5b				endm 
1d5b			 
1d5b			macro_forth_dsp: 
1d5b				; data stack pointer points to current word on tos 
1d5b			 
1d5b 2a e8 e9			ld hl,(cli_data_sp) 
1d5e			 
1d5e				if DEBUG_FORTH_PUSH 
1d5e						DMARK "DSP" 
1d5e f5				push af  
1d5f 3a 73 1d			ld a, (.dmark)  
1d62 32 65 ee			ld (debug_mark),a  
1d65 3a 74 1d			ld a, (.dmark+1)  
1d68 32 66 ee			ld (debug_mark+1),a  
1d6b 3a 75 1d			ld a, (.dmark+2)  
1d6e 32 67 ee			ld (debug_mark+2),a  
1d71 18 03			jr .pastdmark  
1d73 ..			.dmark: db "DSP"  
1d76 f1			.pastdmark: pop af  
1d77			endm  
# End of macro DMARK
1d77			 
1d77 cd dd 4f				call display_data_sp 
1d7a				;call break_point_state 
1d7a				;rst 030h 
1d7a				CALLMONITOR 
1d7a cd 6f ee			call debug_vector  
1d7d				endm  
# End of macro CALLMONITOR
1d7d				endif 
1d7d			 
1d7d c9				ret 
1d7e			 
1d7e			; return hl to start of value on stack 
1d7e			 
1d7e			FORTH_DSP_VALUE: macro 
1d7e				call macro_forth_dsp_value 
1d7e				endm 
1d7e			 
1d7e			macro_forth_dsp_value: 
1d7e			 
1d7e				FORTH_DSP 
1d7e cd 5b 1d			call macro_forth_dsp 
1d81				endm 
# End of macro FORTH_DSP
1d81			 
1d81 d5				push de 
1d82			 
1d82 23				inc hl ; skip type 
1d83			 
1d83 5e				ld e, (hl) 
1d84 23				inc hl 
1d85 56				ld d, (hl) 
1d86 eb				ex de,hl  
1d87			 
1d87 d1				pop de 
1d88			 
1d88 c9				ret 
1d89			 
1d89			; return hl to start of value to second item on stack 
1d89			 
1d89			FORTH_DSP_VALUEM1: macro 
1d89				call macro_forth_dsp_value_m1 
1d89				endm 
1d89			 
1d89			macro_forth_dsp_value_m1: 
1d89			 
1d89				FORTH_DSP 
1d89 cd 5b 1d			call macro_forth_dsp 
1d8c				endm 
# End of macro FORTH_DSP
1d8c			 
1d8c 2b				dec hl 
1d8d 2b				dec hl 
1d8e			;	dec hl 
1d8e			 
1d8e d5				push de 
1d8f			 
1d8f 5e				ld e, (hl) 
1d90 23				inc hl 
1d91 56				ld d, (hl) 
1d92 eb				ex de,hl  
1d93			 
1d93 d1				pop de 
1d94			 
1d94 c9				ret 
1d95			 
1d95				 
1d95			 
1d95			; whatever the current top os stack points to, we are now done with it so return memory to malloc 
1d95			 
1d95			FORTH_DSP_POP: macro 
1d95				call macro_forth_dsp_pop 
1d95				endm 
1d95			 
1d95			 
1d95			; get the tos data type 
1d95			 
1d95			FORTH_DSP_TYPE:   macro 
1d95			 
1d95				;FORTH_DSP_VALUE 
1d95				FORTH_DSP 
1d95				 
1d95				; hl points to value 
1d95				; check type 
1d95			 
1d95				ld a,(hl) 
1d95			 
1d95				endm 
1d95			 
1d95			; load the tos value into hl 
1d95			 
1d95			 
1d95			FORTH_DSP_VALUEHL:  macro 
1d95				call macro_dsp_valuehl 
1d95				endm 
1d95			 
1d95			 
1d95			 
1d95			macro_dsp_valuehl: 
1d95				FORTH_DSP_VALUE 
1d95 cd 7e 1d			call macro_forth_dsp_value 
1d98				endm 
# End of macro FORTH_DSP_VALUE
1d98			 
1d98				;FORTH_ERR_TOS_NOTNUM 
1d98			 
1d98				;inc hl   ; skip type id 
1d98			 
1d98			;	push de 
1d98			; 
1d98			;	ld e, (hl) 
1d98			;	inc hl 
1d98			;	ld d, (hl) 
1d98			;	ex de,hl  
1d98			 
1d98			;	pop de 
1d98			 
1d98				if DEBUG_FORTH_PUSH 
1d98						DMARK "DVL" 
1d98 f5				push af  
1d99 3a ad 1d			ld a, (.dmark)  
1d9c 32 65 ee			ld (debug_mark),a  
1d9f 3a ae 1d			ld a, (.dmark+1)  
1da2 32 66 ee			ld (debug_mark+1),a  
1da5 3a af 1d			ld a, (.dmark+2)  
1da8 32 67 ee			ld (debug_mark+2),a  
1dab 18 03			jr .pastdmark  
1dad ..			.dmark: db "DVL"  
1db0 f1			.pastdmark: pop af  
1db1			endm  
# End of macro DMARK
1db1				CALLMONITOR 
1db1 cd 6f ee			call debug_vector  
1db4				endm  
# End of macro CALLMONITOR
1db4				endif 
1db4 c9				ret 
1db5			 
1db5			forth_apushstrhl:      
1db5				; push of string requires use of cli_origptr 
1db5				; bodge use 
1db5			 
1db5				; get current cli_origptr, save, update with temp pointer  
1db5 ed 5b 38 ea		ld de, (cli_origptr) 
1db9 22 38 ea			ld (cli_origptr), hl 
1dbc d5				push de 
1dbd cd f9 1c			call forth_apush 
1dc0 d1				pop de 
1dc1 ed 53 38 ea		ld (cli_origptr), de 
1dc5 c9			        ret	 
1dc6			 
1dc6			 
1dc6			; increase loop stack pointer and save hl to it 
1dc6				 
1dc6			FORTH_LOOP_NEXT: macro 
1dc6				call macro_forth_loop_next 
1dc6				;nop 
1dc6				endm 
1dc6			 
1dc6			macro_forth_loop_next: 
1dc6				if DEBUG_FORTH_STACK_GUARD 
1dc6 cd 59 5d				call check_stacks 
1dc9				endif 
1dc9 e5				push hl 
1dca d5				push de 
1dcb eb				ex de,hl 
1dcc 2a ea e9			ld hl,(cli_loop_sp) 
1dcf 23				inc hl 
1dd0 23				inc hl 
1dd1					if DEBUG_FORTH_WORDS 
1dd1						DMARK "LNX" 
1dd1 f5				push af  
1dd2 3a e6 1d			ld a, (.dmark)  
1dd5 32 65 ee			ld (debug_mark),a  
1dd8 3a e7 1d			ld a, (.dmark+1)  
1ddb 32 66 ee			ld (debug_mark+1),a  
1dde 3a e8 1d			ld a, (.dmark+2)  
1de1 32 67 ee			ld (debug_mark+2),a  
1de4 18 03			jr .pastdmark  
1de6 ..			.dmark: db "LNX"  
1de9 f1			.pastdmark: pop af  
1dea			endm  
# End of macro DMARK
1dea						CALLMONITOR 
1dea cd 6f ee			call debug_vector  
1ded				endm  
# End of macro CALLMONITOR
1ded					endif 
1ded 22 ea e9			ld (cli_loop_sp),hl 
1df0 73				ld (hl), e 
1df1 23				inc hl 
1df2 72				ld (hl), d 
1df3 d1				pop de    ; been reversed so save a swap on restore 
1df4 e1				pop hl 
1df5				if DEBUG_FORTH_STACK_GUARD 
1df5 cd 59 5d				call check_stacks 
1df8				endif 
1df8 c9				ret 
1df9			 
1df9			; get current ret stack pointer and save to hl  
1df9				 
1df9			FORTH_LOOP_TOS: macro 
1df9				call macro_forth_loop_tos 
1df9				endm 
1df9			 
1df9			macro_forth_loop_tos: 
1df9 d5				push de 
1dfa 2a ea e9			ld hl,(cli_loop_sp) 
1dfd 5e				ld e, (hl) 
1dfe 23				inc hl 
1dff 56				ld d, (hl) 
1e00 eb				ex de, hl 
1e01 d1				pop de 
1e02 c9				ret 
1e03			 
1e03			; pop loop stack pointer 
1e03				 
1e03			FORTH_LOOP_POP: macro 
1e03				call macro_forth_loop_pop 
1e03				endm 
1e03			 
1e03			 
1e03			macro_forth_loop_pop: 
1e03				if DEBUG_FORTH_STACK_GUARD 
1e03					DMARK "LPP" 
1e03 f5				push af  
1e04 3a 18 1e			ld a, (.dmark)  
1e07 32 65 ee			ld (debug_mark),a  
1e0a 3a 19 1e			ld a, (.dmark+1)  
1e0d 32 66 ee			ld (debug_mark+1),a  
1e10 3a 1a 1e			ld a, (.dmark+2)  
1e13 32 67 ee			ld (debug_mark+2),a  
1e16 18 03			jr .pastdmark  
1e18 ..			.dmark: db "LPP"  
1e1b f1			.pastdmark: pop af  
1e1c			endm  
# End of macro DMARK
1e1c cd 59 5d				call check_stacks 
1e1f					FORTH_CHK_LOOP_UNDER 
1e1f e5				push hl 
1e20 d5				push de 
1e21 2a ea e9			ld hl,(cli_loop_sp) 
1e24 11 24 e9			ld de, cli_loop_stack 
1e27 cd 13 0e			call cmp16 
1e2a da 76 5e			jp c, fault_loop_under 
1e2d d1				pop de 
1e2e e1				pop hl 
1e2f				endm 
# End of macro FORTH_CHK_LOOP_UNDER
1e2f				endif 
1e2f e5				push hl 
1e30 2a ea e9			ld hl,(cli_loop_sp) 
1e33 2b				dec hl 
1e34 2b				dec hl 
1e35 22 ea e9			ld (cli_loop_sp), hl 
1e38				; TODO do stack underflow checks 
1e38 e1				pop hl 
1e39				if DEBUG_FORTH_STACK_GUARD 
1e39 cd 59 5d				call check_stacks 
1e3c					FORTH_CHK_LOOP_UNDER 
1e3c e5				push hl 
1e3d d5				push de 
1e3e 2a ea e9			ld hl,(cli_loop_sp) 
1e41 11 24 e9			ld de, cli_loop_stack 
1e44 cd 13 0e			call cmp16 
1e47 da 76 5e			jp c, fault_loop_under 
1e4a d1				pop de 
1e4b e1				pop hl 
1e4c				endm 
# End of macro FORTH_CHK_LOOP_UNDER
1e4c				endif 
1e4c c9				ret 
1e4d			 
1e4d			macro_forth_dsp_pop: 
1e4d			 
1e4d e5				push hl 
1e4e			 
1e4e				; release malloc data 
1e4e			 
1e4e				if DEBUG_FORTH_STACK_GUARD 
1e4e cd 59 5d				call check_stacks 
1e51					FORTH_CHK_DSP_UNDER 
1e51 e5				push hl 
1e52 d5				push de 
1e53 2a e8 e9			ld hl,(cli_data_sp) 
1e56 11 22 e8			ld de, cli_data_stack 
1e59 cd 13 0e			call cmp16 
1e5c da 6a 5e			jp c, fault_dsp_under 
1e5f d1				pop de 
1e60 e1				pop hl 
1e61				endm 
# End of macro FORTH_CHK_DSP_UNDER
1e61				endif 
1e61				;ld hl,(cli_data_sp) 
1e61			if DEBUG_FORTH_DOT 
1e61				DMARK "DPP" 
1e61 f5				push af  
1e62 3a 76 1e			ld a, (.dmark)  
1e65 32 65 ee			ld (debug_mark),a  
1e68 3a 77 1e			ld a, (.dmark+1)  
1e6b 32 66 ee			ld (debug_mark+1),a  
1e6e 3a 78 1e			ld a, (.dmark+2)  
1e71 32 67 ee			ld (debug_mark+2),a  
1e74 18 03			jr .pastdmark  
1e76 ..			.dmark: db "DPP"  
1e79 f1			.pastdmark: pop af  
1e7a			endm  
# End of macro DMARK
1e7a				CALLMONITOR 
1e7a cd 6f ee			call debug_vector  
1e7d				endm  
# End of macro CALLMONITOR
1e7d			endif	 
1e7d			 
1e7d			 
1e7d			if FORTH_ENABLE_DSPPOPFREE 
1e7d			 
1e7d				FORTH_DSP 
1e7d cd 5b 1d			call macro_forth_dsp 
1e80				endm 
# End of macro FORTH_DSP
1e80			 
1e80 7e				ld a, (hl) 
1e81 fe 01			cp DS_TYPE_STR 
1e83 20 23			jr nz, .skippopfree 
1e85			 
1e85				FORTH_DSP_VALUEHL 
1e85 cd 95 1d			call macro_dsp_valuehl 
1e88				endm 
# End of macro FORTH_DSP_VALUEHL
1e88 00				nop 
1e89			if DEBUG_FORTH_DOT 
1e89				DMARK "DPf" 
1e89 f5				push af  
1e8a 3a 9e 1e			ld a, (.dmark)  
1e8d 32 65 ee			ld (debug_mark),a  
1e90 3a 9f 1e			ld a, (.dmark+1)  
1e93 32 66 ee			ld (debug_mark+1),a  
1e96 3a a0 1e			ld a, (.dmark+2)  
1e99 32 67 ee			ld (debug_mark+2),a  
1e9c 18 03			jr .pastdmark  
1e9e ..			.dmark: db "DPf"  
1ea1 f1			.pastdmark: pop af  
1ea2			endm  
# End of macro DMARK
1ea2				CALLMONITOR 
1ea2 cd 6f ee			call debug_vector  
1ea5				endm  
# End of macro CALLMONITOR
1ea5			endif	 
1ea5 cd 9a 12			call free 
1ea8			.skippopfree: 
1ea8				 
1ea8			 
1ea8			endif 
1ea8			 
1ea8			if DEBUG_FORTH_DOT_KEY 
1ea8				DMARK "DP2" 
1ea8				CALLMONITOR 
1ea8			endif	 
1ea8			 
1ea8				; move pointer down 
1ea8			 
1ea8 2a e8 e9			ld hl,(cli_data_sp) 
1eab 2b				dec hl 
1eac 2b				dec hl 
1ead			; PARSEV5 
1ead 2b				dec hl 
1eae 22 e8 e9			ld (cli_data_sp), hl 
1eb1			 
1eb1				if DEBUG_FORTH_STACK_GUARD 
1eb1 cd 59 5d				call check_stacks 
1eb4					FORTH_CHK_DSP_UNDER 
1eb4 e5				push hl 
1eb5 d5				push de 
1eb6 2a e8 e9			ld hl,(cli_data_sp) 
1eb9 11 22 e8			ld de, cli_data_stack 
1ebc cd 13 0e			call cmp16 
1ebf da 6a 5e			jp c, fault_dsp_under 
1ec2 d1				pop de 
1ec3 e1				pop hl 
1ec4				endm 
# End of macro FORTH_CHK_DSP_UNDER
1ec4				endif 
1ec4			 
1ec4 e1				pop hl 
1ec5			 
1ec5 c9				ret 
1ec6			 
1ec6			getwordathl: 
1ec6				; hl points to an address 
1ec6				; load hl with the word at that address 
1ec6			 
1ec6 d5				push de 
1ec7			 
1ec7 5e				ld e, (hl) 
1ec8 23				inc hl 
1ec9 56				ld d, (hl) 
1eca eb				ex de, hl 
1ecb			 
1ecb d1				pop de 
1ecc c9				ret 
1ecd			 
1ecd			 
1ecd			; functions to manuplite stack pointers 
1ecd			 
1ecd			; generate fragment to set hl to be pointer to a stack item 
1ecd			 
1ecd			FORTH_DSP_PTR: macro  x 
1ecd				ld hl,(cli_data_sp) 
1ecd				ld de, x * 3 
1ecd				sbc hl, de 
1ecd				endm 
1ecd			 
1ecd			 
1ecd			 
1ecd			; copy point in hl to stack tmp storage slots 1-4 
1ecd			hltostack1: 
1ecd 11 b8 e2			ld de, os_stack_1  
1ed0 c3 fb 1e			jp hltostackmv 
1ed3			 
1ed3			hltostack2:  
1ed3 11 b5 e2			ld de, os_stack_2 
1ed6 c3 fb 1e			jp hltostackmv 
1ed9			 
1ed9			hltostack3:  
1ed9 11 b2 e2			ld de, os_stack_3 
1edc c3 fb 1e			jp hltostackmv 
1edf			 
1edf			hltostack4:  
1edf 11 af e2			ld de, os_stack_4  
1ee2 c3 fb 1e			jp hltostackmv 
1ee5			 
1ee5			; copy to point in hl from stack tmp storage slots 1-4 
1ee5			hlfromstack1: 
1ee5 11 b8 e2			ld de, os_stack_1 
1ee8 c3 fa 1e			jp hlfromsttackmv 
1eeb			 
1eeb			hlfromstack2:  
1eeb 11 b5 e2			ld de, os_stack_2 
1eee c3 fa 1e			jp hlfromsttackmv 
1ef1			 
1ef1			hlfromstack3:  
1ef1 11 b2 e2			ld de, os_stack_3 
1ef4 c3 fa 1e			jp hlfromsttackmv 
1ef7			 
1ef7			hlfromstack4:  
1ef7 11 af e2			ld de, os_stack_4 
1efa			 
1efa			hlfromsttackmv: 
1efa eb				ex de, hl 
1efb			 
1efb			hltostackmv: 
1efb			 
1efb				; do stack move 
1efb c5				push bc 
1efc 01 03 00			ld bc, 3 
1eff ed b0			ldir  
1f01 c1				pop bc	 
1f02 c9				ret 
1f03			 
1f03			; eof 
1f03			 
# End of file forth_stackopsv5.asm
1f03			endif 
1f03			loadwordinhl:	 
1f03			 
1f03 d5				push de 
1f04			 
1f04 5e				ld e, (hl) 
1f05 23				inc hl 
1f06 56				ld d, (hl) 
1f07 eb				ex de,hl  
1f08			 
1f08 d1				pop de 
1f09			 
1f09 c9				ret 
1f0a			 
1f0a			user_word_eol:  
1f0a				; hl contains the pointer to where to create a linked list item from the end 
1f0a				; of the user dict to continue on at the system word dict 
1f0a				 
1f0a				; poke the stub of the word list linked list to repoint to rom words 
1f0a			 
1f0a				; stub format 
1f0a				; db   word id 
1f0a				; dw    link to next word 
1f0a			        ; db char length of token 
1f0a				; db string + 0 term 
1f0a				; db exec code....  
1f0a			 
1f0a 3e 00			ld a, WORD_SYS_ROOT     ; root word 
1f0c 77				ld (hl), a		; word id 
1f0d 23				inc hl 
1f0e			 
1f0e 11 c5 20			ld de, sysdict 
1f11 73				ld (hl), e		; next word link ie system dict 
1f12 23				inc hl 
1f13 72				ld (hl), d		; next word link ie system dict 
1f14 23				inc hl	 
1f15			 
1f15			;	ld (hl), sysdict		; next word link ie system dict 
1f15			;	inc hl 
1f15			;	inc hl 
1f15			 
1f15			;	inc hl 
1f15			;	inc hl 
1f15			 
1f15 3e 02			ld a, 2			; word length is 0 
1f17 77				ld (hl), a	 
1f18 23				inc hl 
1f19			 
1f19 3e 7e			ld a, '~'			; word length is 0 
1f1b 77				ld (hl), a	 
1f1c 23				inc hl 
1f1d 3e 00			ld a, 0			; save empty word 
1f1f 77				ld (hl), a 
1f20			 
1f20 c9				ret 
1f21			 
1f21				 
1f21			 
1f21			forthexec_cleanup: 
1f21				FORTH_RSP_POP 
1f21 cd 58 1b			call macro_forth_rsp_pop 
1f24				endm 
# End of macro FORTH_RSP_POP
1f24 c9				ret 
1f25			 
1f25			forth_call_hl: 
1f25				; taking hl 
1f25 e5				push hl 
1f26 c9				ret 
1f27			 
1f27			; this is called to reset Forth system but keep existing uwords etc 
1f27			 
1f27			forth_warmstart: 
1f27				; setup stack over/under flow checks 
1f27				if DEBUG_FORTH_STACK_GUARD 
1f27 cd 3f 5d				call chk_stk_init 
1f2a				endif 
1f2a			 
1f2a				; init stack pointers  - * these stacks go upwards *  
1f2a 21 a6 e9			ld hl, cli_ret_stack 
1f2d 22 ec e9			ld (cli_ret_sp), hl	 
1f30				; set bottom of stack 
1f30 3e 00			ld a,0 
1f32 77				ld (hl),a 
1f33 23				inc hl 
1f34 77				ld (hl),a 
1f35			 
1f35 21 22 e8			ld hl, cli_data_stack 
1f38 22 e8 e9			ld (cli_data_sp), hl	 
1f3b				; set bottom of stack 
1f3b 3e 00			ld a,0 
1f3d 77				ld (hl),a 
1f3e 23				inc hl 
1f3f 77				ld (hl),a 
1f40			 
1f40 21 24 e9			ld hl, cli_loop_stack 
1f43 22 ea e9			ld (cli_loop_sp), hl	 
1f46				; set bottom of stack 
1f46 3e 00			ld a,0 
1f48 77				ld (hl),a 
1f49 23				inc hl 
1f4a 77				ld (hl),a 
1f4b			 
1f4b				; init extent of current open file 
1f4b			 
1f4b 3e 00			ld a, 0 
1f4d 32 64 ea			ld (store_openext), a 
1f50			 
1f50 c9				ret 
1f51			 
1f51			 
1f51			 
1f51			; Cold Start - this is called to setup the whole Forth system 
1f51			 
1f51			forth_init: 
1f51			 
1f51				; setup stack over/under flow checks 
1f51			 
1f51			;	if DEBUG_FORTH_STACK_GUARD 
1f51			;		call chk_stk_init 
1f51			;	endif 
1f51			 
1f51				; enable auto display updates (slow.....) 
1f51			 
1f51 3e 01			ld a, 1 
1f53 32 36 ea			ld (cli_autodisplay), a 
1f56			 
1f56				; if storage is in use disable long reads for now 
1f56 3e 00			ld a, 0 
1f58 32 6f ea			ld (store_longread), a 
1f5b			 
1f5b			 
1f5b				; show start up screen 
1f5b			 
1f5b cd c8 0b			call clear_display 
1f5e			 
1f5e 3e 00			ld a,0 
1f60 32 58 ea			ld (f_cursor_ptr), a 
1f63			 
1f63				; set start of word list in start of ram - for use when creating user words 
1f63			 
1f63 21 54 61			ld hl, baseram 
1f66 22 b8 e5			ld (os_last_new_uword), hl 
1f69 cd 0a 1f			call user_word_eol 
1f6c				 
1f6c			;		call display_data_sp 
1f6c			;		call next_page_prompt 
1f6c			 
1f6c			 
1f6c			 
1f6c			 
1f6c c9				ret 
1f6d			 
1f6d .. 00		.bootforth: db " Forth Kernel Init ",0 
1f81			 
1f81			; TODO push to stack 
1f81			 
1f81			;  
1f81			 
1f81			if FORTH_PARSEV2 
1f81			 
1f81			 
1f81				include "forth_parserv2.asm" 
1f81			 
1f81			endif 
1f81			 
1f81			 
1f81			; parse cli version 1 
1f81			 
1f81			if FORTH_PARSEV1 
1f81			 
1f81			 
1f81			 
1f81			      include "forth_parserv1.asm" 
1f81			endif 
1f81				 
1f81			if FORTH_PARSEV3 
1f81			      include "forth_parserv3.asm" 
1f81				include "forth_wordsv3.asm" 
1f81			endif 
1f81			 
1f81			if FORTH_PARSEV4 
1f81			      include "forth_parserv4.asm" 
1f81				include "forth_wordsv4.asm" 
1f81			endif 
1f81			 
1f81			if FORTH_PARSEV5 
1f81			      include "forth_parserv5.asm" 
1f81				include "forth_wordsv4.asm" 
1f81			endif 
1f81			 
1f81			if FORTH_PARSEV6 
1f81			      include "forth_parserv6.asm" 
1f81			 
1f81			 
1f81			; A better parser without using malloc and string copies all over the place.  
1f81			; Exec in situ should be faster 
1f81			 
1f81			;WORD_SYS_LOWPRIM: equ 4    ; Offset for low level prim words opcode 
1f81			;WORD_SYS_BRANCH: equ 10    ; Offset for branching and loop words opcode 
1f81			WORD_SYS_UWORD: equ 1   ; Opcode for all user words 
1f81			WORD_SYS_DELETED: equ 3 ; Op code for a deleted UWORD 
1f81			WORD_SYS_ROOT: equ 0   ; Opcode for all user words 
1f81			WORD_SYS_END: equ 0   ; Opcode for all user words 
1f81			WORD_SYS_CORE: equ 20    ; Offset for dict core words opcode 
1f81			WORD_FLAG_CODE: equ 0	   ; opcodeflag to exec pure code for this word 
1f81			WORD_FLAG_JP: equ 1	   ; opcodeflag to list zero term jump table words 
1f81			 
1f81			; Core word preamble macro 
1f81			 
1f81			CWHEAD:   macro nxtword opcode lit len opflags 
1f81				db WORD_SYS_CORE+opcode             
1f81				; internal op code number 
1f81				dw nxtword            
1f81				; link to next dict word block 
1f81				db len + 1 
1f81				; literal length of dict word inc zero term 
1f81				db lit,0              
1f81				; literal dict word 
1f81			        ; TODO db opflags        
1f81				endm 
1f81			 
1f81			 
1f81			NEXTW: macro  
1f81				jp macro_next 
1f81				endm 
1f81			 
1f81			macro_next: 
1f81			if DEBUG_FORTH_PARSE_EXEC 
1f81				DMARK "NXT" 
1f81				CALLMONITOR 
1f81			endif	 
1f81			;	inc hl  ; skip token null term  
1f81 ed 4b 3a ea		ld bc,(cli_ptr)   ; move to next token to parse in the input stream 
1f85 ed 5b 38 ea		ld de,(cli_origptr)   ; move to next token to parse in the input stream 
1f89 2a bc e5			ld hl,(os_tok_ptr)   ; move to next token to parse in the input stream 
1f8c			if DEBUG_FORTH_PARSE_EXEC 
1f8c				DMARK "}AA" 
1f8c				CALLMONITOR 
1f8c			endif	 
1f8c c3 7b 20			jp execnext 
1f8f				;jp exec1 
1f8f			       
1f8f			 
1f8f			 
1f8f			; Another go at the parser to compile  
1f8f			 
1f8f			 
1f8f			; TODO rework parser to change all of the string words to byte tokens 
1f8f			; TODO do a search for  
1f8f			 
1f8f			; TODO first run normal parser to zero term sections 
1f8f			; TODO for each word do a token look up to get the op code 
1f8f			; TODO need some means to flag to the exec that this is a byte code form    
1f8f			 
1f8f			 
1f8f			forthcompile: 
1f8f			 
1f8f			; 
1f8f			; line parse: 
1f8f			;       parse raw input buffer 
1f8f			;       tokenise the words 
1f8f			;       malloc new copy (for looping etc) 
1f8f			;       copy to malloc + current pc in line to start of string and add line term 
1f8f			;       save on new rsp 
1f8f			; 
1f8f			 
1f8f			; hl to point to the line to tokenise 
1f8f			 
1f8f			;	push hl 
1f8f 22 bc e5			ld (os_tok_ptr), hl  ; save ptr to string 
1f92			 
1f92			;	ld a,0		; string term on input 
1f92			;	call strlent 
1f92			 
1f92			;	ld (os_tok_len), hl	 ; save string length 
1f92			 
1f92			;if DEBUG_FORTH_TOK 
1f92			;	ex de,hl		 
1f92			;endif 
1f92			 
1f92			;	pop hl 		; get back string pointer 
1f92			 
1f92			if DEBUG_FORTH_TOK 
1f92						DMARK "TOc" 
1f92				CALLMONITOR 
1f92			endif 
1f92 7e			.cptoken2:    ld a,(hl) 
1f93 23				inc hl 
1f94 fe 7f			cp FORTH_END_BUFFER 
1f96 28 29			jr z, .cptokendone2 
1f98 fe 00			cp 0 
1f9a 28 25			jr z, .cptokendone2 
1f9c fe 22			cp '"' 
1f9e 28 0b			jr z, .cptokenstr2     ; will want to skip until end of string delim 
1fa0 fe 20			cp ' ' 
1fa2 20 ee			jr nz,  .cptoken2 
1fa4			 
1fa4			; TODO consume comments held between ( and ) 
1fa4			 
1fa4				; we have a space so change to zero term for dict match later 
1fa4 2b				dec hl 
1fa5 3e 00			ld a,0 
1fa7 77				ld (hl), a 
1fa8 23				inc hl 
1fa9 18 e7			jr .cptoken2 
1fab				 
1fab			 
1fab			.cptokenstr2: 
1fab				; skip all white space until either eol (because forgot to term) or end double quote 
1fab			        ;   if double quotes spotted ensure to skip any space sep until matched doble quote 
1fab				;inc hl ; skip current double quote 
1fab 7e				ld a,(hl) 
1fac 23				inc hl 
1fad fe 22			cp '"' 
1faf 28 e1			jr z, .cptoken2 
1fb1 fe 7f			cp FORTH_END_BUFFER 
1fb3 28 0c			jr z, .cptokendone2 
1fb5 fe 00			cp 0 
1fb7 28 08			jr z, .cptokendone2 
1fb9 fe 20			cp ' ' 
1fbb 28 02			jr z, .cptmp2 
1fbd 18 ec			jr .cptokenstr2 
1fbf			 
1fbf			.cptmp2:	; we have a space so change to zero term for dict match later 
1fbf				;dec hl 
1fbf				;ld a,"-"	; TODO remove this when working 
1fbf				;ld (hl), a 
1fbf				;inc hl 
1fbf 18 ea			jr .cptokenstr2 
1fc1			 
1fc1			.cptokendone2: 
1fc1				;inc hl 
1fc1 3e 7f			ld a, FORTH_END_BUFFER 
1fc3 77				ld (hl),a 
1fc4			;	inc hl 
1fc4			;	ld a, '!' 
1fc4			;	ld (hl),a 
1fc4			 
1fc4 2a bc e5			ld hl,(os_tok_ptr) 
1fc7			         
1fc7			if DEBUG_FORTH_TOK 
1fc7						DMARK "Tc1" 
1fc7				CALLMONITOR 
1fc7			endif 
1fc7			 
1fc7				; push exec string to top of return stack 
1fc7				FORTH_RSP_NEXT 
1fc7 cd 37 1b			call macro_forth_rsp_next 
1fca				endm 
# End of macro FORTH_RSP_NEXT
1fca c9				ret 
1fcb			 
1fcb			; Another go at the parser need to simplify the process 
1fcb			 
1fcb			forthparse: 
1fcb			 
1fcb			; 
1fcb			; line parse: 
1fcb			;       parse raw input buffer 
1fcb			;       tokenise the words 
1fcb			;       malloc new copy (for looping etc) 
1fcb			;       copy to malloc + current pc in line to start of string and add line term 
1fcb			;       save on new rsp 
1fcb			; 
1fcb			 
1fcb			; hl to point to the line to tokenise 
1fcb			 
1fcb			;	push hl 
1fcb 22 bc e5			ld (os_tok_ptr), hl  ; save ptr to string 
1fce			 
1fce			;	ld a,0		; string term on input 
1fce			;	call strlent 
1fce			 
1fce			;	ld (os_tok_len), hl	 ; save string length 
1fce			 
1fce			;if DEBUG_FORTH_TOK 
1fce			;	ex de,hl		 
1fce			;endif 
1fce			 
1fce			;	pop hl 		; get back string pointer 
1fce			 
1fce			if DEBUG_FORTH_TOK 
1fce						DMARK "TOK" 
1fce				CALLMONITOR 
1fce			endif 
1fce 7e			.ptoken2:    ld a,(hl) 
1fcf 23				inc hl 
1fd0 fe 7f			cp FORTH_END_BUFFER 
1fd2 28 29			jr z, .ptokendone2 
1fd4 fe 00			cp 0 
1fd6 28 25			jr z, .ptokendone2 
1fd8 fe 22			cp '"' 
1fda 28 0b			jr z, .ptokenstr2     ; will want to skip until end of string delim 
1fdc fe 20			cp ' ' 
1fde 20 ee			jr nz,  .ptoken2 
1fe0			 
1fe0			; TODO consume comments held between ( and ) 
1fe0			 
1fe0				; we have a space so change to zero term for dict match later 
1fe0 2b				dec hl 
1fe1 3e 00			ld a,0 
1fe3 77				ld (hl), a 
1fe4 23				inc hl 
1fe5 18 e7			jr .ptoken2 
1fe7				 
1fe7			 
1fe7			.ptokenstr2: 
1fe7				; skip all white space until either eol (because forgot to term) or end double quote 
1fe7			        ;   if double quotes spotted ensure to skip any space sep until matched doble quote 
1fe7				;inc hl ; skip current double quote 
1fe7 7e				ld a,(hl) 
1fe8 23				inc hl 
1fe9 fe 22			cp '"' 
1feb 28 e1			jr z, .ptoken2 
1fed fe 7f			cp FORTH_END_BUFFER 
1fef 28 0c			jr z, .ptokendone2 
1ff1 fe 00			cp 0 
1ff3 28 08			jr z, .ptokendone2 
1ff5 fe 20			cp ' ' 
1ff7 28 02			jr z, .ptmp2 
1ff9 18 ec			jr .ptokenstr2 
1ffb			 
1ffb			.ptmp2:	; we have a space so change to zero term for dict match later 
1ffb				;dec hl 
1ffb				;ld a,"-"	; TODO remove this when working 
1ffb				;ld (hl), a 
1ffb				;inc hl 
1ffb 18 ea			jr .ptokenstr2 
1ffd			 
1ffd			.ptokendone2: 
1ffd				;inc hl 
1ffd 3e 7f			ld a, FORTH_END_BUFFER 
1fff 77				ld (hl),a 
2000			;	inc hl 
2000			;	ld a, '!' 
2000			;	ld (hl),a 
2000			 
2000 2a bc e5			ld hl,(os_tok_ptr) 
2003			         
2003			if DEBUG_FORTH_TOK 
2003						DMARK "TK1" 
2003				CALLMONITOR 
2003			endif 
2003			 
2003				; push exec string to top of return stack 
2003				FORTH_RSP_NEXT 
2003 cd 37 1b			call macro_forth_rsp_next 
2006				endm 
# End of macro FORTH_RSP_NEXT
2006 c9				ret 
2007			 
2007			; 
2007			;	; malloc size + buffer pointer + if is loop flag 
2007			;	ld hl,(os_tok_len) 		 ; get string length 
2007			; 
2007			;	ld a,l 
2007			; 
2007			;	cp 0			; we dont want to use a null string 
2007			;	ret z 
2007			; 
2007			;;	add 3    ; prefix malloc with buffer for current word ptr 
2007			; 
2007			;	add 5     ; TODO when certain not over writing memory remove 
2007			; 
2007			;		 
2007			; 
2007			;if DEBUG_FORTH_TOK 
2007			;			DMARK "TKE" 
2007			;	CALLMONITOR 
2007			;endif 
2007			; 
2007			;	ld l,a 
2007			;	ld h,0 
2007			;;	push hl   ; save required space for the copy later 
2007			;	call malloc 
2007			;if DEBUG_FORTH_TOK 
2007			;			DMARK "TKM" 
2007			;	CALLMONITOR 
2007			;endif 
2007			;	if DEBUG_FORTH_MALLOC_GUARD 
2007			;		push af 
2007			;		call ishlzero 
2007			;;		ld a, l 
2007			;;		add h 
2007			;;		cp 0 
2007			;		pop af 
2007			;		 
2007			;		call z,malloc_error 
2007			;	endif 
2007			;	ld (os_tok_malloc), hl	 ; save malloc ptr 
2007			; 
2007			; 
2007			;if DEBUG_FORTH_TOK 
2007			;			DMARK "TKR" 
2007			;	CALLMONITOR 
2007			;endif 
2007			; 
2007			;	FORTH_RSP_NEXT 
2007			; 
2007			;	;inc hl	 ; go past current buffer pointer 
2007			;	;inc hl 
2007			;	;inc hl   ; and past if loop flag 
2007			;		; TODO Need to set flag  
2007			; 
2007			;	 
2007			;	 
2007			;	ex de,hl	; malloc is dest 
2007			;	ld hl, (os_tok_len) 
2007			;;	pop bc 
2007			;	ld c, l                
2007			;	ld b,0 
2007			;	ld hl, (os_tok_ptr) 
2007			; 
2007			;if DEBUG_FORTH_TOK 
2007			;			DMARK "TKT" 
2007			;	CALLMONITOR 
2007			;endif 
2007			; 
2007			;	; do str cpy 
2007			; 
2007			;	ldir      ; copy byte in hl to de 
2007			; 
2007			;	; set end of buffer to high bit on zero term and use that for end of buffer scan 
2007			; 
2007			;if DEBUG_FORTH_TOK 
2007			; 
2007			;			DMARK "TKY" 
2007			;	CALLMONITOR 
2007			;endif 
2007			;	;ld a,0 
2007			;	;ld a,FORTH_END_BUFFER 
2007			;	ex de, hl 
2007			;	;dec hl			 ; go back over the space delim at the end of word 
2007			;	;ld (hl),a 
2007			;	;inc hl                    ;  TODO double check this. Going past the end of string to make sure end of processing buffer is marked 
2007			;	ld a,FORTH_END_BUFFER 
2007			;	ld (hl),a 
2007			;	inc hl 
2007			;	ld a,FORTH_END_BUFFER 
2007			;	ld (hl),a 
2007			; 
2007			;	; init the malloc area data 
2007			;	; set pc for in current area 
2007			;	;ld hl, (os_tok_malloc) 
2007			;	;inc hl 
2007			;	;inc hl 
2007			;	;inc hl 
2007			;	;ex de,hl 
2007			;	;ld hl, (os_tok_malloc) 
2007			;	;ld (hl),e 
2007			;	;inc hl 
2007			;	;ld (hl),d 
2007			; 
2007			; 
2007			;	ld hl,(os_tok_malloc) 
2007			;if DEBUG_FORTH_PARSE_KEY 
2007			;			DMARK "TKU" 
2007			;	CALLMONITOR 
2007			;endif 
2007			; 
2007			;	ret 
2007			 
2007			forthexec: 
2007			 
2007			; line exec: 
2007			; forth parser 
2007			 
2007			; 
2007			;       get current exec line on rsp 
2007			 
2007				FORTH_RSP_TOS 
2007 cd 4e 1b			call macro_forth_rsp_tos 
200a				endm 
# End of macro FORTH_RSP_TOS
200a			 
200a			;       restore current pc - hl points to malloc of data 
200a			 
200a				;ld e, (hl) 
200a				;inc hl 
200a				;ld d, (hl) 
200a				;ex de,hl 
200a			 
200a			 
200a			exec1: 
200a 22 bc e5			ld (os_tok_ptr), hl                 ; here move out of repeated saving in this tight loop 
200d			 
200d				; copy our PC to working vars  
200d 22 3a ea			ld (cli_ptr), hl                    ; here 
2010 22 38 ea			ld (cli_origptr), hl                ; here 
2013			 
2013 7e				ld a,(hl)                           ; here make hl be the ram ptr 
2014 fe 7f			cp FORTH_END_BUFFER 
2016 c8				ret z 
2017			 
2017				; skip any nulls 
2017			 
2017 fe 00			cp 0 
2019 20 03			jr nz, .execword 
201b 23				inc hl 
201c 18 ec			jr exec1 
201e			 
201e			 
201e			.execword: 
201e			 
201e			 
201e			 
201e			if DEBUG_FORTH_PARSE_EXEC 
201e						DMARK "KYQ" 
201e				CALLMONITOR 
201e			endif 
201e			;       while at start of word: 
201e			; get start of dict (in user area first) 
201e			 
201e 21 54 61		ld hl, baseram 
2021			;ld hl, sysdict 
2021 22 3c ea		ld (cli_nextword),hl                            ; here do we need to do this? 
2024			;           match word at pc 
2024			;           exec word 
2024			;           or push to dsp 
2024			;           forward to next token 
2024			;           if line term pop rsp and exit 
2024			;        
2024			 
2024			if DEBUG_FORTH_PARSE_EXEC 
2024						DMARK "KYq" 
2024				CALLMONITOR 
2024			endif 
2024			 
2024			; 
2024			; word comp 
2024			;    get compiled byte and save it (need to decide if code is compiled or not for comparison) 
2024			;    if byte is 0 then end parsing and report failed lookup (or could be something to add to stack etc) 
2024			;    move to start of word  
2024			;    compare word to cli_token 
2024			 
2024			.execpnword:	; HL at start of a word in the dictionary to check 
2024			 
2024 2a 3c ea			ld hl,(cli_nextword)                  ; here remove the need to store???? 
2027			 
2027 cd be 20			call forth_tok_next 
202a			; tok next end here 
202a 22 3c ea			ld (cli_nextword), hl     ; save for next check if no match on this word 
202d eb				ex de, hl 
202e			 
202e			 
202e				; save the pointer of the current token - 1 to check against 
202e				 
202e 22 40 ea			ld (cli_token), hl   
2031				; TODO maybe remove below save if no debug 
2031				; save token string ptr for any debug later 
2031 23				inc hl  
2032 22 42 ea			ld (cli_origtoken), hl 
2035 2b				dec hl 
2036				; save pointer to the start of the next dictionay word 
2036 7e				ld a,(hl)   ; get string length 
2037 47				ld b,a 
2038			.execpnwordinc:  
2038 23				inc hl 
2039 10 fd			djnz .execpnwordinc 
203b 22 3e ea			ld (cli_execword), hl      ; save start of this words code 
203e			 
203e				; now check the word token against the string being parsed 
203e			 
203e 2a 40 ea			ld hl,(cli_token) 
2041 23				inc hl     ; skip string length (use zero term instead to end) 
2042				;ld (cli_token), hl 
2042			 
2042			.execpnchar:    ; compare char between token and string to parse 
2042			 
2042			 
2042				;ld hl, (cli_token)     ; the dict word  
2042 ed 5b 3a ea		ld de, (cli_ptr)     ; cli to parse 
2046			 
2046			 
2046			.execpncharl:    ; compare char between token and string to parse (loop) 
2046			 
2046 1a				ld a,(de) 
2047 cd 52 11			call toUpper 		; make sure the input string matches case 
204a be				cp (hl) 
204b			 
204b c2 64 20			jp nz, .execpnskipword	 ; no match so move to next word 
204e				 
204e			;    if same 
204e			;       scan for string terms 0 for token and 32 for input 
204e 46				ld b,(hl) 
204f 80				add b			 
2050 23				inc hl 
2051 13				inc de 
2052 fe 00			cp 0			 ; add both chars together, if 32 then other must be 0 so at end of string we are parsing? 
2054							; TODO need to make sure last word in zero term string is accounted for 
2054 20 f0			jr nz, .execpncharl 		 ; not at end of strings yet 
2056			 
2056			 
2056				; at end of both strings so both are exact match 
2056			 
2056			;       skip ptr for next word 
2056			 
2056 2a 3a ea			ld hl,(cli_ptr) 	; at input string term 
2059 23				inc hl			 ; at next char 
205a 22 3a ea			ld (cli_ptr), hl     ; save for next round of the parser 
205d 22 38 ea			ld (cli_origptr), hl     ; save for any restart of current string ie a number or string to push to data stack 
2060				 
2060				 
2060			 
2060			 
2060			 
2060			;       exec code block 
2060			if DEBUG_FORTH_JP 
2060				call clear_display 
2060				call update_display 
2060				call delay1s 
2060				ld hl, (cli_execword)     ; save for next check if no match on this word 
2060				ld a,h 
2060				ld hl, os_word_scratch 
2060				call hexout 
2060				ld hl, (cli_execword)     ; save for next check if no match on this word 
2060				ld a,l 
2060				ld hl, os_word_scratch+2 
2060				call hexout 
2060				ld hl, os_word_scratch+4 
2060				ld a,0 
2060				ld (hl),a 
2060				ld de,os_word_scratch 
2060				call str_at_display 
2060					ld a, display_row_2 
2060					call str_at_display 
2060				ld de, (cli_origtoken) 
2060				ld a, display_row_1+10 
2060					call str_at_display 
2060			 
2060				ld a,display_row_1 
2060				ld de, .foundword 
2060				ld a, display_row_3 
2060				call str_at_display 
2060				call update_display 
2060				call delay1s 
2060				call delay1s 
2060				call delay1s 
2060			endif 
2060			 
2060			if DEBUG_FORTH_PARSE_EXEC 
2060						DMARK "KYj" 
2060			endif 
2060				; TODO save the word pointer in this exec 
2060			 
2060 2a 3e ea			ld hl,(cli_execword) 
2063 e9				jp (hl) 
2064			 
2064			 
2064			;    if not same 
2064			;	scan for zero term 
2064			;	get ptr for next word 
2064			;	goto word comp 
2064			 
2064			.execpnskipword:	; get pointer to next word 
2064 2a 3c ea			ld hl,(cli_nextword) 
2067			 
2067 7e				ld a,(hl) 
2068 fe 00			cp WORD_SYS_END 
206a			;	cp 0 
206a 28 09			jr z, .execendofdict			 ; at end of words 
206c			 
206c			if DEBUG_FORTH_PARSE_EXEC 
206c						DMARK "KY4" 
206c			endif 
206c			if DEBUG_FORTH_PARSE_EXEC 
206c			 
206c				; see if disabled 
206c			 
206c			;	ld a, (os_view_disable) 
206c			;	cp '*' 
206c				ld a,(debug_vector) 
206c				cp $c9   ; RET 
206c				jr z, .noskip 
206c			 
206c			 
206c				ld de, .nowordfound 
206c				ld a, display_row_3 
206c				call str_at_display 
206c				call update_display 
206c				ld a, 100 
206c				call aDelayInMS 
206c				 
206c				if DEBUG_FORTH_PARSE_EXEC_SLOW 
206c					call delay250ms 
206c				endif 
206c			.noskip:  
206c			 
206c			endif	 
206c			 
206c 2a 38 ea			ld hl,(cli_origptr) 
206f 22 3a ea			ld (cli_ptr),hl 
2072			 
2072			if DEBUG_FORTH_PARSE_EXEC 
2072						DMARK "KY5" 
2072			endif 
2072 c3 24 20			jp .execpnword			; else go to next word 
2075			 
2075			.execendofdict:  
2075			 
2075			if DEBUG_FORTH_PARSE_EXEC 
2075						DMARK "KYe" 
2075			endif 
2075			if DEBUG_FORTH_PARSE_EXEC 
2075				; see if disabled 
2075			 
2075			;	ld a, (os_view_disable) 
2075			;	cp '*' 
2075				ld a,(debug_vector) 
2075				cp $c9   ; ret 
2075				jr z, .ispskip 
2075			 
2075				call clear_display 
2075				call update_display 
2075				call delay1s 
2075				ld de, (cli_origptr) 
2075				ld a, display_row_1 
2075				call str_at_display 
2075				 
2075				ld de, .enddict 
2075				ld a, display_row_3 
2075				call str_at_display 
2075				call update_display 
2075				ld a, 100 
2075				call aDelayInMS 
2075				if DEBUG_FORTH_PARSE_EXEC_SLOW 
2075				call delay1s 
2075				call delay1s 
2075				call delay1s 
2075				endif 
2075			.ispskip:  
2075				 
2075			endif	 
2075			 
2075			 
2075			 
2075				; if the word is not a keyword then must be a literal so push it to stack 
2075			 
2075			; push token to stack to end of word 
2075			 
2075				STACKFRAME ON $1efe $2f9f 
2075				if DEBUG_STACK_IMB 
2075					if ON 
2075						exx 
2075						ld de, $1efe 
2075						ld a, d 
2075						ld hl, curframe 
2075						call hexout 
2075						ld a, e 
2075						ld hl, curframe+2 
2075						call hexout 
2075						ld hl, $1efe 
2075						push hl 
2075						ld hl, $2f9f 
2075						push hl 
2075						exx 
2075					endif 
2075				endif 
2075			endm 
# End of macro STACKFRAME
2075			 
2075 2a bc e5		ld hl,(os_tok_ptr) 
2078 cd f9 1c		call forth_apush 
207b			 
207b				STACKFRAMECHK ON $1efe $2f9f 
207b				if DEBUG_STACK_IMB 
207b					if ON 
207b						exx 
207b						ld hl, $2f9f 
207b						pop de   ; $2f9f 
207b						call cmp16 
207b						jr nz, .spnosame 
207b						ld hl, $1efe 
207b						pop de   ; $1efe 
207b						call cmp16 
207b						jr z, .spfrsame 
207b						.spnosame: call showsperror 
207b						.spfrsame: nop 
207b						exx 
207b					endif 
207b				endif 
207b			endm 
# End of macro STACKFRAMECHK
207b			 
207b			execnext: 
207b			 
207b			if DEBUG_FORTH_PARSE_EXEC 
207b						DMARK "KY>" 
207b			endif 
207b			; move past token to next word 
207b			 
207b 2a bc e5		ld hl, (os_tok_ptr) 
207e 3e 00		ld a, 0 
2080 01 ff 00		ld bc, 255     ; input buffer size 
2083 ed b1		cpir 
2085			 
2085			if DEBUG_FORTH_PARSE_EXEC 
2085						DMARK "KY!" 
2085				CALLMONITOR 
2085			endif	 
2085			; TODO this might place hl on the null, so will need to forward on??? 
2085			;inc hl   ; see if this gets onto the next item 
2085			 
2085			 
2085			; TODO pass a pointer to the buffer to push 
2085			; TODO call function to push 
2085			 
2085			; look for end of input 
2085			 
2085			;inc hl 
2085			;ld a,(hl) 
2085			;cp FORTH_END_BUFFER 
2085			;ret z 
2085			 
2085			 
2085 c3 0a 20		jp exec1 
2088			 
2088			 
2088			 
2088			 
2088			 
2088			 
2088			 
2088			 
2088			 
2088			findnexttok: 
2088			 
2088				; hl is pointer to move 
2088				; de is the token to locate 
2088			 
2088					if DEBUG_FORTH 
2088						DMARK "NTK" 
2088						CALLMONITOR 
2088					endif 
2088 d5				push de 
2089			 
2089			.fnt1:	 
2089				; find first char of token to locate 
2089			 
2089 1a				ld a, (de) 
208a 4f				ld c,a 
208b 7e				ld a,(hl) 
208c cd 52 11			call toUpper 
208f					if DEBUG_FORTH 
208f						DMARK "NT1" 
208f						CALLMONITOR 
208f					endif 
208f b9				cp c 
2090			 
2090 28 03			jr z, .fnt2cmpmorefirst	 
2092			 
2092				; first char not found move to next char 
2092			 
2092 23				inc hl 
2093 18 f4			jr .fnt1 
2095			 
2095			.fnt2cmpmorefirst:	 
2095				; first char of token found.  
2095			 
2095 e5				push hl     ; save start of token just in case it is the right one 
2096 d9				exx 
2097 e1				pop hl        ; save it to hl' 
2098 d9				exx 
2099			 
2099			 
2099			.fnt2cmpmore:	 
2099				; compare the rest 
2099				 
2099 23				inc hl 
209a 13				inc de 
209b				 
209b 1a				ld a, (de) 
209c 4f				ld c,a 
209d 7e				ld a,(hl) 
209e cd 52 11			call toUpper 
20a1			 
20a1					if DEBUG_FORTH 
20a1						DMARK "NT2" 
20a1						CALLMONITOR 
20a1					endif 
20a1				; c has the token to find char 
20a1				; a has the mem to scan char 
20a1			 
20a1 b9				cp c 
20a2 28 04			jr z,.fntmatch1 
20a4			 
20a4				; they are not the same 
20a4			 
20a4					if DEBUG_FORTH 
20a4						DMARK "NT3" 
20a4						CALLMONITOR 
20a4					endif 
20a4 d1				pop de	; reset de token to look for 
20a5 d5				push de 
20a6 18 e1			jr .fnt1 
20a8				 
20a8			.fntmatch1: 
20a8			 
20a8				; is the same char a null which means we might have a full hit? 
20a8					if DEBUG_FORTH 
20a8						DMARK "NT4" 
20a8						CALLMONITOR 
20a8					endif 
20a8			 
20a8 fe 00			cp 0 
20aa 28 0b			jr z, .fntmatchyes 
20ac			 
20ac				; are we at the end of the token to find? 
20ac			 
20ac					if DEBUG_FORTH 
20ac						DMARK "NT5" 
20ac						CALLMONITOR 
20ac					endif 
20ac 3e 00			ld a, 0 
20ae b9				cp c 
20af			 
20af c2 99 20			jp nz, .fnt2cmpmore    ; no, so keep going to a direct hit 
20b2			 
20b2					if DEBUG_FORTH 
20b2						DMARK "NT6" 
20b2						CALLMONITOR 
20b2					endif 
20b2				; token to find is exhusted but no match to stream 
20b2			 
20b2				; restore tok pointer and continue on 
20b2 d1				pop de 
20b3 d5				push de 
20b4 c3 89 20			jp .fnt1 
20b7			 
20b7			 
20b7			.fntmatchyes: 
20b7			 
20b7				; hl now contains the end of the found token 
20b7			 
20b7				; get rid of saved token pointer to find 
20b7			 
20b7 d1				pop de 
20b8			 
20b8					if DEBUG_FORTH 
20b8						DMARK "NT9" 
20b8						CALLMONITOR 
20b8					endif 
20b8			 
20b8				; hl will be on the null term so forward on 
20b8			 
20b8				; get back the saved start of the token 
20b8			 
20b8 d9				exx 
20b9 e5				push hl     ; save start of token just in case it is the right one 
20ba d9				exx 
20bb e1				pop hl        ; save it to hl 
20bc			 
20bc c9				ret 
20bd			 
20bd			 
20bd			; LIST needs to find a specific token   
20bd			; FORGET needs to find a spefici token 
20bd			 
20bd			; SAVE needs to find all tokens by flag 
20bd			; WORDS just needs to scan through all  by flag 
20bd			; UWORDS needs to scan through all by flag 
20bd			 
20bd			 
20bd			; given hl as pointer to start of dict look up string 
20bd			; return hl as pointer to start of word block 
20bd			; or 0 if not found 
20bd			 
20bd			forth_find_tok: 
20bd c9				ret 
20be			 
20be			; given hl as pointer to dict structure 
20be			; move to the next dict block structure 
20be			 
20be			forth_tok_next: 
20be				; hl now points to the address of the next word pointer  
20be				; TODO skip compiled symbol for now 
20be			;	push de 
20be 23				inc hl 
20bf 5e				ld e, (hl) 
20c0 23				inc hl 
20c1 56				ld d, (hl) 
20c2 23				inc hl 
20c3			 
20c3 eb				ex de,hl 
20c4			if DEBUG_FORTH_PARSE_NEXTWORD 
20c4				push bc 
20c4				ld bc, (cli_nextword) 
20c4						DMARK "NXW" 
20c4				CALLMONITOR 
20c4				pop bc 
20c4			endif 
20c4			;	pop de	 
20c4 c9				ret 
20c5			 
20c5			 
20c5			 
20c5			; eof 
# End of file forth_parserv6.asm
20c5				include "forth_wordsv4.asm" 
20c5			 
20c5			; the core word dictionary v4 
20c5			; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Notation.html#Notation 
20c5			 
20c5			; this is a linked list for each of the system words used 
20c5			; user defined words will follow the same format but will be in ram 
20c5			 
20c5			 
20c5			; 
20c5			; 
20c5			; define linked list: 
20c5			; 
20c5			; 1. compiled byte op code 
20c5			; 2. len of text word 
20c5			; 3. text word 
20c5			; 4. ptr to next dictionary word 
20c5			; 5. asm, calls etc for the word 
20c5			; 
20c5			;  if 1 == 0 then last word in dict  
20c5			;   
20c5			; set the start of dictionary scanning to be in ram and the last word point to the system dict 
20c5			;  
20c5			;  
20c5			; create basic standard set of words 
20c5			; 
20c5			;  
20c5			; + - / * DUP EMIT . SWAP IF..THEN..ELSE DO..LOOP  : ; DROP  
20c5			; 2DUP 2DROP 2SWAP  
20c5			; @ C@ - get byte  
20c5			; ! C! - store byte 
20c5			; 0< true if less than zero 
20c5			; 0= true if zero 
20c5			; < >  
20c5			; = true if same 
20c5			; variables 
20c5			 
20c5			 
20c5			; Hardware specific words I may need 
20c5			; 
20c5			; IN OUT  
20c5			; calls to key util functions 
20c5			; calls to hardward abstraction stuff 
20c5			; easy control of frame buffers and lcd i/o 
20c5			; keyboard  
20c5			 
20c5			 
20c5			;DICT: macro 
20c5			; op_code, len, word, next 
20c5			;    word: 
20c5			;    db op_code 
20c5			;    ds word zero term 
20c5			;    dw next 
20c5			;    endm 
20c5			 
20c5			 
20c5			 
20c5			 
20c5			; op code 1 is a flag for user define words which are to be handled differently 
20c5			 
20c5			 
20c5			; 
20c5			; 
20c5			;    TODO on entry to a word this should be the expected environment 
20c5			;    hl - tos value if number then held, if string this is the ptr 
20c5			;    de -  
20c5			 
20c5			 
20c5			; opcode ranges 
20c5			; 0 - end of word dict 
20c5			; 255 - user define words 
20c5			 
20c5			sysdict: 
20c5			include "forth_opcodes.asm" 
20c5			; op codes for forth keywords 
20c5			 
20c5			; Changing use of opcodes to flag is the word exists in compiled form or not.  
20c5			; This provides a means to compile uwords if required for higher performance 
20c5			; by avoiding the use of the keyword parser and just jumping directly to the code 
20c5			; Actually there is already a flag for if the code exists as binary thinking about it... 
20c5			 
20c5			 
20c5			 
20c5			 
20c5			 
20c5			; free to use code 0  
20c5				OPCODE_HEAP: equ  1 
20c5				OPCODE_EXEC: equ 2 
20c5				OPCODE_DUP: equ 3 
20c5				OPCODE_SWAP: equ 4 
20c5				OPCODE_COLN: equ 5 
20c5				OPCODE_SCOLN: equ 6 
20c5				OPCODE_DROP: equ 7 
20c5				OPCODE_DUP2: equ 8 
20c5				OPCODE_DROP2: equ 9 
20c5				OPCODE_SWAP2: equ 10 
20c5				OPCODE_AT: equ 11 
20c5				OPCODE_CAT: equ 12 
20c5				OPCODE_BANG: equ 13 
20c5				OPCODE_CBANG: equ 14 
20c5				OPCODE_SCALL: equ 15 
20c5				OPCODE_DEPTH: equ 16 
20c5				OPCODE_OVER: equ 17 
20c5				OPCODE_PAUSE: equ 18 
20c5				OPCODE_PAUSES: equ 19 
20c5				OPCODE_ROT: equ 20 
20c5			;free to reuse	OPCODE_WORDS: equ 21 
20c5			        OPCODE_NOT: equ 21 
20c5				OPCODE_UWORDS: equ 22 
20c5				OPCODE_BP: equ 23 
20c5				OPCODE_MONITOR: equ 24  
20c5				OPCODE_MALLOC: equ 25 
20c5				OPCODE_FREE: equ 26 
20c5				OPCODE_LIST: equ 27 
20c5				OPCODE_FORGET: equ 28 
20c5				OPCODE_NOP: equ 29 
20c5				OPCODE_COMO: equ 30 
20c5				OPCODE_COMC: equ 31 
20c5			;free to reuse	OPCODE_ENDCORE: equ 32 
20c5				OPCODE_AFTERSOUND: equ 33 
20c5				OPCODE_GP2: equ 34 
20c5				OPCODE_GP3: equ 35 
20c5				OPCODE_GP4: equ 36 
20c5				OPCODE_SIN: equ 37 
20c5				OPCODE_SOUT: equ 38 
20c5				OPCODE_SPIO: equ 39 
20c5				OPCODE_SPICEH: equ 40 
20c5				OPCODE_SPIOb: equ 41 
20c5				OPCODE_SPII: equ 42 
20c5				OPCODE_SESEL: equ 43 
20c5				OPCODE_CARTDEV: equ 44 
20c5			; free to reuse	OPCODE_ENDDEVICE: equ 45 
20c5				OPCODE_FB: equ 46 
20c5				OPCODE_EMIT: equ 47 
20c5				OPCODE_DOTH: equ 48 
20c5				OPCODE_DOTF: equ 49 
20c5				OPCODE_DOT: equ 50 
20c5				OPCODE_CLS: equ 51 
20c5				OPCODE_DRAW: equ 52 
20c5				OPCODE_DUMP: equ 53 
20c5				OPCODE_CDUMP: equ 54 
20c5				OPCODE_DAT: equ 55 
20c5				OPCODE_HOME: equ 56 
20c5				OPCODE_SPACE: equ 57 
20c5				OPCODE_SPACES: equ 58 
20c5				OPCODE_SCROLL: equ 59 
20c5				OPCODE_ATQ: equ 60 
20c5				OPCODE_AUTODSP: equ 61 
20c5				OPCODE_MENU: equ 62 
20c5			; free to reuse	OPCODE_ENDDISPLAY: equ 63  
20c5				OPCODE_THEN: equ 64 
20c5				OPCODE_ELSE: equ 65 
20c5				OPCODE_DO: equ 66 
20c5				OPCODE_LOOP: equ 67 
20c5				OPCODE_I: equ 68 
20c5				OPCODE_DLOOP: equ 69  
20c5				OPCODE_REPEAT: equ 70  
20c5				OPCODE_UNTIL: equ 71 
20c5				OPCODE_ENDFLOW: equ 72 
20c5				OPCODE_WAITK: equ 73 
20c5				OPCODE_ACCEPT: equ 74 
20c5				OPCODE_EDIT: equ 75 
20c5			;free to reuse	OPCODE_ENDKEY: equ 76 
20c5				OPCODE_LZERO: equ 77 
20c5				OPCODE_TZERO: equ 78 
20c5				OPCODE_LESS: equ 79 
20c5				OPCODE_GT: equ 80 
20c5				OPCODE_EQUAL: equ 81  
20c5			;free to reuse	OPCODE_ENDLOGIC: equ 82 
20c5				OPCODE_NEG: equ 83 
20c5				OPCODE_DIV: equ 84 
20c5				OPCODE_MUL: equ 85 
20c5				OPCODE_MIN: equ 86 
20c5				OPCODE_MAX: equ 87 
20c5				OPCODE_RND16: equ 88 
20c5				OPCODE_RND8: equ 89 
20c5				OPCODE_RND: equ 90 
20c5			;free to reuse	OPCODE_ENDMATHS: equ 91  
20c5				OPCODE_BYNAME: equ 92 
20c5				OPCODE_DIR: equ 93 
20c5				OPCODE_SAVE: equ 94 
20c5				OPCODE_LOAD: equ 95 
20c5				OPCODE_BSAVE: equ 96 
20c5				OPCODE_BLOAD: equ 97 
20c5				OPCODE_SEO: equ 98  
20c5				OPCODE_SEI: equ 99 
20c5				OPCODE_SFREE: equ 100 
20c5				OPCODE_SIZE: equ 101 
20c5				OPCODE_CREATE: equ 102 
20c5				OPCODE_APPEND: equ 103 
20c5				OPCODE_SDEL: equ 104 
20c5				OPCODE_OPEN: equ 105 
20c5				OPCODE_READ: equ 106 
20c5				OPCODE_EOF: equ 106 
20c5				OPCODE_FORMAT: equ 107 
20c5				OPCODE_LABEL: equ 108 
20c5				OPCODE_LABELS: equ 109 
20c5			;free to reuse	OPCODE_ENDSTORAGE: equ 110  
20c5				OPCODE_UPPER: equ 111 
20c5				OPCODE_LOWER: equ 112 
20c5				OPCODE_SUBSTR: equ 113 
20c5				OPCODE_LEFT: equ 114 
20c5				OPCODE_RIGHT: equ 115 
20c5				OPCODE_STR2NUM: equ 116 
20c5				OPCODE_NUM2STR: equ 117 
20c5				OPCODE_CONCAT: equ 118 
20c5				OPCODE_FIND: equ 119 
20c5				OPCODE_LEN: equ 120 
20c5				OPCODE_CHAR: equ 121 
20c5			; free to reuse	OPCODE_STRLEN: equ 122 
20c5			; free to reuse	OPCODE_ENDSTR: equ 123 
20c5				OPCODE_V0S: equ 124 
20c5				OPCODE_V0Q: equ 125 
20c5				OPCODE_V1S: equ 126 
20c5				OPCODE_V1Q: equ 127 
20c5				OPCODE_V2S: equ 128 
20c5				OPCODE_V2Q: equ 129 
20c5				OPCODE_V3S: equ 130 
20c5				OPCODE_V3Q: equ 131 
20c5			;free to reuse	OPCODE_END: equ 132 
20c5				OPCODE_ZDUP: equ 133 
20c5			 
20c5			; eof 
# End of file forth_opcodes.asm
20c5			 
20c5			include "forth_words_core.asm" 
20c5			 
20c5			; | ## Core Words 
20c5			 
20c5			;if MALLOC_4 
20c5			 
20c5			.HEAP: 
20c5			CWHEAD .EXEC OPCODE_HEAP "HEAP" 4 WORD_FLAG_CODE 
20c5 15				db WORD_SYS_CORE+OPCODE_HEAP             
20c6 04 21			dw .EXEC            
20c8 05				db 4 + 1 
20c9 .. 00			db "HEAP",0              
20ce				endm 
# End of macro CWHEAD
20ce			; | HEAP ( -- u1 u2 )   Pushes u1 the current number of bytes in the heap and u2 the remaining bytes - Only present if using my MALLOC | DONE 
20ce			; | | u1 - Current number of bytes in the heap 
20ce			; | | u2 - Remaining bytes left on the heap 
20ce			; | |  
20ce			; | | The heap is used for storing user defined words as well as any values pushed to stack. 
20ce			 
20ce			 
20ce				if DEBUG_FORTH_WORDS_KEY 
20ce					DMARK "HEP" 
20ce f5				push af  
20cf 3a e3 20			ld a, (.dmark)  
20d2 32 65 ee			ld (debug_mark),a  
20d5 3a e4 20			ld a, (.dmark+1)  
20d8 32 66 ee			ld (debug_mark+1),a  
20db 3a e5 20			ld a, (.dmark+2)  
20de 32 67 ee			ld (debug_mark+2),a  
20e1 18 03			jr .pastdmark  
20e3 ..			.dmark: db "HEP"  
20e6 f1			.pastdmark: pop af  
20e7			endm  
# End of macro DMARK
20e7					CALLMONITOR 
20e7 cd 6f ee			call debug_vector  
20ea				endm  
# End of macro CALLMONITOR
20ea				endif 
20ea 2a 5e 61			ld hl, (free_list )      
20ed 11 63 61			ld de, heap_start 
20f0			 
20f0 ed 52			sbc hl, de  
20f2			 
20f2 cd 90 1b			call forth_push_numhl 
20f5			 
20f5			 
20f5 ed 5b 5e 61		ld de, (free_list )      
20f9 21 96 e2			ld hl, heap_end 
20fc			 
20fc ed 52			sbc hl, de 
20fe			 
20fe cd 90 1b			call forth_push_numhl 
2101				 
2101			 
2101				 
2101			 
2101			 
2101			 
2101				NEXTW 
2101 c3 81 1f			jp macro_next 
2104				endm 
# End of macro NEXTW
2104			;endif 
2104			 
2104			.EXEC: 
2104			;	CWHEAD .STKEXEC OPCODE_EXEC "EXEC" 4 WORD_FLAG_CODE 
2104			;; > EXEC ( u -- )    Execs the string on TOS as a FORTH expression > CRASHES ON NEXTW 
2104			;; > > u - A qutoed string which can consist of any valid Forth expression excluding : defintions (use LOAD instead) 
2104			;; > > 
2104			;; > >   
2104			;	STACKFRAME OFF $5efe $5f9f 
2104			; 
2104			;		if DEBUG_FORTH_WORDS_KEY 
2104			;			DMARK "EXE" 
2104			;			CALLMONITOR 
2104			;		endif 
2104			; 
2104			;	FORTH_DSP_VALUEHL 
2104			; 
2104			;	FORTH_DSP_POP 
2104			; 
2104			;		if DEBUG_FORTH_WORDS 
2104			;			DMARK "EX1" 
2104			;			CALLMONITOR 
2104			;		endif 
2104			;;	ld e,(hl) 
2104			;;	inc hl 
2104			;;	ld d,(hl) 
2104			;;	ex de,hl 
2104			; 
2104			;;		if DEBUG_FORTH_WORDS 
2104			;;			DMARK "EX2" 
2104			;;			CALLMONITOR 
2104			;;		endif 
2104			;	push hl 
2104			; 
2104			;	;ld a, 0 
2104			;	;ld a, FORTH_END_BUFFER 
2104			;	call strlenz 
2104			;	inc hl   ; include zero term to copy 
2104			;	inc hl   ; include term 
2104			;	inc hl   ; include term 
2104			;	ld b,0 
2104			;	ld c,l 
2104			;	pop hl 
2104			;	ld de, execscratch 
2104			;		if DEBUG_FORTH_WORDS 
2104			;			DMARK "EX3" 
2104			;			CALLMONITOR 
2104			;		endif 
2104			;	ldir 
2104			; 
2104			; 
2104			;	ld hl, execscratch 
2104			; 
2104			;		if DEBUG_FORTH_WORDS 
2104			;			DMARK "EXe" 
2104			;			CALLMONITOR 
2104			;		endif 
2104			; 
2104			;	call forthparse 
2104			;	call forthexec 
2104			;;	call forthexec_cleanup 
2104			;;	call forthparse 
2104			;;	call forthexec 
2104			; 
2104			;	STACKFRAMECHK OFF $5efe $5f9f 
2104			; 
2104			;	; an immediate word so no need to process any more words 
2104			;	ret 
2104			;	NEXTW 
2104			 
2104			; dead code - old version  
2104			;	FORTH_RSP_NEXT 
2104			 
2104			;  
2104			;	ld bc,(cli_ptr)   ; move to next token to parse in the input stream 
2104			;	ld de,(cli_origptr)   ; move to next token to parse in the input stream 
2104			;	ld hl,(os_tok_ptr)   ; move to next token to parse in the input stream 
2104			;	push hl 
2104			;	push de 
2104			;	push bc 
2104			; 
2104			; 
2104			;		if DEBUG_FORTH_WORDS_KEY 
2104			;			DMARK "EXR" 
2104			;			CALLMONITOR 
2104			;		endif 
2104			; 
2104			; 
2104			; 
2104			;	;v5 FORTH_DSP_VALUE 
2104			;	FORTH_DSP_VALUEHL 
2104			; 
2104			;	; TODO do string type checks 
2104			; 
2104			;;v5	inc hl   ; skip type 
2104			; 
2104			;	push hl  ; source code  
2104			;		if DEBUG_FORTH_WORDS 
2104			;			DMARK "EX1" 
2104			;			CALLMONITOR 
2104			;		endif 
2104			;	ld a, 0 
2104			;	call strlent 
2104			; 
2104			;	inc hl 
2104			;	inc hl 
2104			;	inc hl 
2104			;	inc hl 
2104			; 
2104			;	push hl    ; size 
2104			; 
2104			;		if DEBUG_FORTH_WORDS 
2104			;			DMARK "EX2" 
2104			;			CALLMONITOR 
2104			;		endif 
2104			;	call malloc 
2104			; 
2104			;	ex de, hl    ; de now contains malloc area 
2104			;	pop bc   	; get byte count 
2104			;	pop hl      ; get string to copy 
2104			; 
2104			;	push de     ; save malloc for free later 
2104			; 
2104			;		if DEBUG_FORTH_WORDS 
2104			;			DMARK "EX3" 
2104			;			CALLMONITOR 
2104			;		endif 
2104			;	ldir       ; duplicate string 
2104			; 
2104			;	; at the end of the string so go back the three extra spaces and fill in with extra terms 
2104			;	 
2104			;	; TODO fix the parse would be better than this...  
2104			;	ex de, hl 
2104			;	dec hl 
2104			;	ld a, 0 
2104			;	ld (hl), a 
2104			;	dec hl 
2104			;	ld a, ' ' 
2104			;	ld (hl), a 
2104			;	dec hl 
2104			;	ld (hl), a 
2104			; 
2104			;	dec hl 
2104			;	ld (hl), a 
2104			; 
2104			; 
2104			;	FORTH_DSP_POP  
2104			; 
2104			;	pop hl     
2104			;	push hl    ; save malloc area 
2104			; 
2104			;		if DEBUG_FORTH_WORDS 
2104			;			DMARK "EX4" 
2104			;			CALLMONITOR 
2104			;		endif 
2104			; 
2104			;	call forthparse 
2104			;	call forthexec 
2104			;	 
2104			;	pop hl 
2104			;	if DEBUG_FORTH_WORDS 
2104			;		DMARK "EX5" 
2104			;		CALLMONITOR 
2104			;	endif 
2104			; 
2104			;	if FORTH_ENABLE_FREE 
2104			;	call free 
2104			;	endif 
2104			; 
2104			;	if DEBUG_FORTH_WORDS 
2104			;		DMARK "EX6" 
2104			;		CALLMONITOR 
2104			;	endif 
2104			; 
2104			;	pop bc 
2104			;	pop de 
2104			;	pop hl 
2104			;;	FORTH_RSP_POP	  
2104			;	ld (cli_ptr),bc   ; move to next token to parse in the input stream 
2104			;	ld (cli_origptr),de   ; move to next token to parse in the input stream 
2104			;	ld (os_tok_ptr),hl   ; move to next token to parse in the input stream 
2104			; 
2104			;	if DEBUG_FORTH_WORDS 
2104			;		DMARK "EX7" 
2104			;		CALLMONITOR 
2104			;	endif 
2104			;	NEXTW 
2104			 
2104			;.STKEXEC: 
2104			;	CWHEAD .ZDUP 43 "STKEXEC" 7 WORD_FLAG_CODE 
2104			;; > STKEXEC ( u .. u c -- ) Taking c count of strings off of the stack the strings are evaluated as code > TO TEST 
2104			; 
2104			; 
2104			;		if DEBUG_FORTH_WORDS_KEY 
2104			;			DMARK "STX" 
2104			;			CALLMONITOR 
2104			;		endif 
2104			; 
2104			;	FORTH_DSP_VALUEHL 
2104			; 
2104			;	ld (store_tmp1), hl    ; count 
2104			; 
2104			;	FORTH_DSP_POP 
2104			;.stkexec1: 
2104			;	ld hl, (store_tmp1)   ; count 
2104			;	ld a, 0 
2104			;	cp l 
2104			;	ret z 
2104			; 
2104			;	dec hl 
2104			;	ld (store_tmp1), hl    ; count 
2104			;	 
2104			;	FORTH_DSP_VALUEHL 
2104			;	push hl 
2104			;	 
2104			;		if DEBUG_FORTH_WORDS 
2104			;			DMARK "EXp" 
2104			;			CALLMONITOR 
2104			;		endif 
2104			;	FORTH_DSP_POP 
2104			; 
2104			;	call strlenz 
2104			;	inc hl   ; include zero term to copy 
2104			;	inc hl   ; include zero term to copy 
2104			;	inc hl   ; include zero term to copy 
2104			;	ld b,0 
2104			;	ld c,l 
2104			;	pop hl 
2104			;	ld de, execscratch 
2104			;		if DEBUG_FORTH_WORDS 
2104			;			DMARK "EX3" 
2104			;			CALLMONITOR 
2104			;		endif 
2104			;	ldir 
2104			; 
2104			; 
2104			;	ld hl, execscratch 
2104			; 
2104			;		if DEBUG_FORTH_WORDS 
2104			;			DMARK "EXP" 
2104			;			CALLMONITOR 
2104			;		endif 
2104			; 
2104			;	call forthparse 
2104			;	ld hl, execscratch 
2104			;		if DEBUG_FORTH_WORDS 
2104			;			DMARK "EXx" 
2104			;			CALLMONITOR 
2104			;		endif 
2104			;	call forthexec 
2104			; 
2104			;	jp .stkexec1 
2104			; 
2104			;	ret 
2104			 
2104			 
2104			.DUP: 
2104			CWHEAD .ZDUP OPCODE_DUP "DUP" 3 WORD_FLAG_CODE 
2104 17				db WORD_SYS_CORE+OPCODE_DUP             
2105 7a 21			dw .ZDUP            
2107 04				db 3 + 1 
2108 .. 00			db "DUP",0              
210c				endm 
# End of macro CWHEAD
210c			; | DUP ( u -- u u )     Duplicate whatever item is on TOS | DONE 
210c			 
210c				if DEBUG_FORTH_WORDS_KEY 
210c					DMARK "DUP" 
210c f5				push af  
210d 3a 21 21			ld a, (.dmark)  
2110 32 65 ee			ld (debug_mark),a  
2113 3a 22 21			ld a, (.dmark+1)  
2116 32 66 ee			ld (debug_mark+1),a  
2119 3a 23 21			ld a, (.dmark+2)  
211c 32 67 ee			ld (debug_mark+2),a  
211f 18 03			jr .pastdmark  
2121 ..			.dmark: db "DUP"  
2124 f1			.pastdmark: pop af  
2125			endm  
# End of macro DMARK
2125					CALLMONITOR 
2125 cd 6f ee			call debug_vector  
2128				endm  
# End of macro CALLMONITOR
2128				endif 
2128			 
2128				FORTH_DSP 
2128 cd 5b 1d			call macro_forth_dsp 
212b				endm 
# End of macro FORTH_DSP
212b			 
212b 7e				ld a, (HL) 
212c fe 01			cp DS_TYPE_STR 
212e 20 25			jr nz, .dupinum 
2130			 
2130				; push another string 
2130			 
2130				FORTH_DSP_VALUEHL     		 
2130 cd 95 1d			call macro_dsp_valuehl 
2133				endm 
# End of macro FORTH_DSP_VALUEHL
2133			 
2133			if DEBUG_FORTH_WORDS 
2133				DMARK "DUs" 
2133 f5				push af  
2134 3a 48 21			ld a, (.dmark)  
2137 32 65 ee			ld (debug_mark),a  
213a 3a 49 21			ld a, (.dmark+1)  
213d 32 66 ee			ld (debug_mark+1),a  
2140 3a 4a 21			ld a, (.dmark+2)  
2143 32 67 ee			ld (debug_mark+2),a  
2146 18 03			jr .pastdmark  
2148 ..			.dmark: db "DUs"  
214b f1			.pastdmark: pop af  
214c			endm  
# End of macro DMARK
214c				CALLMONITOR 
214c cd 6f ee			call debug_vector  
214f				endm  
# End of macro CALLMONITOR
214f			endif 
214f cd fe 1b			call forth_push_str 
2152			 
2152				NEXTW 
2152 c3 81 1f			jp macro_next 
2155				endm 
# End of macro NEXTW
2155			 
2155			 
2155			.dupinum: 
2155				 
2155			 
2155			 
2155				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2155 cd 95 1d			call macro_dsp_valuehl 
2158				endm 
# End of macro FORTH_DSP_VALUEHL
2158			 
2158			; TODO add floating point number detection 
2158			 
2158			if DEBUG_FORTH_WORDS 
2158				DMARK "DUi" 
2158 f5				push af  
2159 3a 6d 21			ld a, (.dmark)  
215c 32 65 ee			ld (debug_mark),a  
215f 3a 6e 21			ld a, (.dmark+1)  
2162 32 66 ee			ld (debug_mark+1),a  
2165 3a 6f 21			ld a, (.dmark+2)  
2168 32 67 ee			ld (debug_mark+2),a  
216b 18 03			jr .pastdmark  
216d ..			.dmark: db "DUi"  
2170 f1			.pastdmark: pop af  
2171			endm  
# End of macro DMARK
2171				CALLMONITOR 
2171 cd 6f ee			call debug_vector  
2174				endm  
# End of macro CALLMONITOR
2174			endif 
2174			 
2174 cd 90 1b			call forth_push_numhl 
2177				NEXTW 
2177 c3 81 1f			jp macro_next 
217a				endm 
# End of macro NEXTW
217a			.ZDUP: 
217a			CWHEAD .SWAP OPCODE_ZDUP "?DUP" 4 WORD_FLAG_CODE 
217a 99				db WORD_SYS_CORE+OPCODE_ZDUP             
217b b2 21			dw .SWAP            
217d 05				db 4 + 1 
217e .. 00			db "?DUP",0              
2183				endm 
# End of macro CWHEAD
2183			; | ?DUP ( u -- u u )     Duplicate item on TOS if the item is non-zero (Only works for numerics) | DONE 
2183			 
2183				if DEBUG_FORTH_WORDS_KEY 
2183					DMARK "qDU" 
2183 f5				push af  
2184 3a 98 21			ld a, (.dmark)  
2187 32 65 ee			ld (debug_mark),a  
218a 3a 99 21			ld a, (.dmark+1)  
218d 32 66 ee			ld (debug_mark+1),a  
2190 3a 9a 21			ld a, (.dmark+2)  
2193 32 67 ee			ld (debug_mark+2),a  
2196 18 03			jr .pastdmark  
2198 ..			.dmark: db "qDU"  
219b f1			.pastdmark: pop af  
219c			endm  
# End of macro DMARK
219c					CALLMONITOR 
219c cd 6f ee			call debug_vector  
219f				endm  
# End of macro CALLMONITOR
219f				endif 
219f				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
219f cd 95 1d			call macro_dsp_valuehl 
21a2				endm 
# End of macro FORTH_DSP_VALUEHL
21a2			 
21a2 e5				push hl 
21a3			 
21a3				; is it a zero? 
21a3			 
21a3 3e 00			ld a, 0 
21a5 84				add h 
21a6 85				add l 
21a7			 
21a7 e1				pop hl 
21a8			 
21a8 fe 00			cp 0 
21aa 28 03			jr z, .dup2orig 
21ac			 
21ac			 
21ac cd 90 1b			call forth_push_numhl 
21af			 
21af			 
21af			; TODO add floating point number detection 
21af			 
21af			.dup2orig: 
21af			 
21af				NEXTW 
21af c3 81 1f			jp macro_next 
21b2				endm 
# End of macro NEXTW
21b2			.SWAP: 
21b2			CWHEAD .COLN OPCODE_SWAP "SWAP" 4 WORD_FLAG_CODE 
21b2 18				db WORD_SYS_CORE+OPCODE_SWAP             
21b3 06 22			dw .COLN            
21b5 05				db 4 + 1 
21b6 .. 00			db "SWAP",0              
21bb				endm 
# End of macro CWHEAD
21bb			; | SWAP ( w1 w2 -- w2 w1 )    Swap top two items on TOS | DONE 
21bb				if DEBUG_FORTH_WORDS_KEY 
21bb					DMARK "SWP" 
21bb f5				push af  
21bc 3a d0 21			ld a, (.dmark)  
21bf 32 65 ee			ld (debug_mark),a  
21c2 3a d1 21			ld a, (.dmark+1)  
21c5 32 66 ee			ld (debug_mark+1),a  
21c8 3a d2 21			ld a, (.dmark+2)  
21cb 32 67 ee			ld (debug_mark+2),a  
21ce 18 03			jr .pastdmark  
21d0 ..			.dmark: db "SWP"  
21d3 f1			.pastdmark: pop af  
21d4			endm  
# End of macro DMARK
21d4					CALLMONITOR 
21d4 cd 6f ee			call debug_vector  
21d7				endm  
# End of macro CALLMONITOR
21d7				endif 
21d7			 
21d7			; DONE Use os stack swap memory 
21d7			 
21d7				FORTH_DSP_PTR 0     ; TOS 
21d7 2a e8 e9			ld hl,(cli_data_sp) 
21da 11 00 00			ld de, 0 * 3 
21dd ed 52			sbc hl, de 
21df				endm 
# End of macro FORTH_DSP_PTR
21df cd cd 1e			call hltostack1 
21e2			  
21e2				FORTH_DSP_PTR 1     ; TOS 
21e2 2a e8 e9			ld hl,(cli_data_sp) 
21e5 11 03 00			ld de, 1 * 3 
21e8 ed 52			sbc hl, de 
21ea				endm 
# End of macro FORTH_DSP_PTR
21ea cd d3 1e			call hltostack2 
21ed			 
21ed				FORTH_DSP_PTR 0     ; TOS 
21ed 2a e8 e9			ld hl,(cli_data_sp) 
21f0 11 00 00			ld de, 0 * 3 
21f3 ed 52			sbc hl, de 
21f5				endm 
# End of macro FORTH_DSP_PTR
21f5 cd eb 1e			call hlfromstack2 
21f8			 
21f8				FORTH_DSP_PTR 1     ; TOS 
21f8 2a e8 e9			ld hl,(cli_data_sp) 
21fb 11 03 00			ld de, 1 * 3 
21fe ed 52			sbc hl, de 
2200				endm 
# End of macro FORTH_DSP_PTR
2200 cd e5 1e			call hlfromstack1 
2203			;	FORTH_DSP_VALUEHL 
2203			;	push hl     ; w2 
2203			; 
2203			;	FORTH_DSP_POP 
2203			; 
2203			;	FORTH_DSP_VALUEHL 
2203			; 
2203			;	FORTH_DSP_POP 
2203			; 
2203			;	pop de     ; w2	, hl = w1 
2203			; 
2203			;	ex de, hl 
2203			;	push de 
2203			; 
2203			;	call forth_push_numhl 
2203			; 
2203			;	pop hl 
2203			; 
2203			;	call forth_push_numhl 
2203				 
2203			 
2203				NEXTW 
2203 c3 81 1f			jp macro_next 
2206				endm 
# End of macro NEXTW
2206			.COLN: 
2206			CWHEAD .SCOLN OPCODE_COLN ":" 1 WORD_FLAG_CODE 
2206 19				db WORD_SYS_CORE+OPCODE_COLN             
2207 92 23			dw .SCOLN            
2209 02				db 1 + 1 
220a .. 00			db ":",0              
220c				endm 
# End of macro CWHEAD
220c			; | : ( -- )         Create new word | DONE 
220c			 
220c				if DEBUG_FORTH_WORDS_KEY 
220c					DMARK "CLN" 
220c f5				push af  
220d 3a 21 22			ld a, (.dmark)  
2210 32 65 ee			ld (debug_mark),a  
2213 3a 22 22			ld a, (.dmark+1)  
2216 32 66 ee			ld (debug_mark+1),a  
2219 3a 23 22			ld a, (.dmark+2)  
221c 32 67 ee			ld (debug_mark+2),a  
221f 18 03			jr .pastdmark  
2221 ..			.dmark: db "CLN"  
2224 f1			.pastdmark: pop af  
2225			endm  
# End of macro DMARK
2225					CALLMONITOR 
2225 cd 6f ee			call debug_vector  
2228				endm  
# End of macro CALLMONITOR
2228				endif 
2228			STACKFRAME OFF $8efe $989f 
2228				if DEBUG_STACK_IMB 
2228					if OFF 
2228						exx 
2228						ld de, $8efe 
2228						ld a, d 
2228						ld hl, curframe 
2228						call hexout 
2228						ld a, e 
2228						ld hl, curframe+2 
2228						call hexout 
2228						ld hl, $8efe 
2228						push hl 
2228						ld hl, $989f 
2228						push hl 
2228						exx 
2228					endif 
2228				endif 
2228			endm 
# End of macro STACKFRAME
2228			; get parser buffer length  of new word 
2228			 
2228			 
2228			 
2228				; move tok past this to start of name defintition 
2228				; TODO get word to define 
2228				; TODO Move past word token 
2228				; TODO get length of string up to the ';' 
2228			 
2228 2a bc e5		ld hl, (os_tok_ptr) 
222b 23			inc hl 
222c 23			inc hl 
222d			 
222d 3e 3b		ld a, ';' 
222f cd 66 11		call strlent 
2232			 
2232 7d			ld a,l 
2233 32 ab e2		ld (os_new_parse_len), a 
2236			 
2236			 
2236			if DEBUG_FORTH_UWORD 
2236 ed 5b bc e5	ld de, (os_tok_ptr) 
223a					DMARK ":01" 
223a f5				push af  
223b 3a 4f 22			ld a, (.dmark)  
223e 32 65 ee			ld (debug_mark),a  
2241 3a 50 22			ld a, (.dmark+1)  
2244 32 66 ee			ld (debug_mark+1),a  
2247 3a 51 22			ld a, (.dmark+2)  
224a 32 67 ee			ld (debug_mark+2),a  
224d 18 03			jr .pastdmark  
224f ..			.dmark: db ":01"  
2252 f1			.pastdmark: pop af  
2253			endm  
# End of macro DMARK
2253			CALLMONITOR 
2253 cd 6f ee			call debug_vector  
2256				endm  
# End of macro CALLMONITOR
2256			endif 
2256			 
2256			; 
2256			;  new word memory layout: 
2256			;  
2256			;    : adg 6666 ;  
2256			; 
2256			;    db   1     ; user defined word  
2256 23			inc hl    
2257			;    dw   sysdict 
2257 23			inc hl 
2258 23			inc hl 
2259			;    db <word len>+1 (for null) 
2259 23			inc hl 
225a			;    db .... <word> 
225a			; 
225a			 
225a 23			inc hl    ; some extras for the word preamble before the above 
225b 23			inc hl 
225c 23			inc hl 
225d 23			inc hl 
225e 23			inc hl 
225f 23			inc hl 
2260 23			inc hl  
2261 23			inc hl 
2262 23			inc hl 
2263 23			inc hl 
2264 23			inc hl 
2265 23			inc hl 
2266 23			inc hl 
2267 23			inc hl     ; TODO how many do we really need?     maybe only 6 
2268			;       exec word buffer 
2268			;	<ptr word>   
2268 23			inc hl 
2269 23			inc hl 
226a			;       <word list><null term> 7F final term 
226a			 
226a			 
226a			if DEBUG_FORTH_UWORD 
226a					DMARK ":02" 
226a f5				push af  
226b 3a 7f 22			ld a, (.dmark)  
226e 32 65 ee			ld (debug_mark),a  
2271 3a 80 22			ld a, (.dmark+1)  
2274 32 66 ee			ld (debug_mark+1),a  
2277 3a 81 22			ld a, (.dmark+2)  
227a 32 67 ee			ld (debug_mark+2),a  
227d 18 03			jr .pastdmark  
227f ..			.dmark: db ":02"  
2282 f1			.pastdmark: pop af  
2283			endm  
# End of macro DMARK
2283			CALLMONITOR 
2283 cd 6f ee			call debug_vector  
2286				endm  
# End of macro CALLMONITOR
2286			endif 
2286			 
2286			 
2286				; malloc the size 
2286			 
2286 cd d0 11			call malloc 
2289 22 ad e2			ld (os_new_malloc), hl     ; save malloc start 
228c			 
228c			;    db   1     ; user defined word  
228c 3e 01			ld a, WORD_SYS_UWORD  
228e 77				ld (hl), a 
228f			 
228f 23			inc hl    
2290			;    dw   sysdict 
2290 11 c5 20		ld de, sysdict       ; continue on with the scan to the system dict 
2293 73			ld (hl), e 
2294 23			inc hl 
2295 72			ld (hl), d 
2296 23			inc hl 
2297			 
2297			 
2297			;    Setup dict word 
2297			 
2297 23			inc hl 
2298 22 a7 e2		ld (os_new_work_ptr), hl     ; save start of dict word  
229b			 
229b			; 1. get length of dict word 
229b			 
229b			 
229b 2a bc e5		ld hl, (os_tok_ptr) 
229e 23			inc hl 
229f 23			inc hl    ; position to start of dict word 
22a0 3e 00		ld a, 0 
22a2 cd 66 11		call strlent 
22a5			 
22a5			 
22a5 23			inc hl    ; to include null??? 
22a6			 
22a6			; write length of dict word 
22a6			 
22a6 ed 5b a7 e2	ld de, (os_new_work_ptr)   ; get dest for copy of word 
22aa 1b			dec de 
22ab eb			ex de, hl 
22ac 73			ld (hl), e 
22ad eb			ex de, hl 
22ae			 
22ae			 
22ae			 
22ae			; copy  
22ae 4d			ld c, l 
22af 06 00		ld b, 0 
22b1 ed 5b a7 e2	ld de, (os_new_work_ptr)   ; get dest for copy of word 
22b5 2a bc e5		ld hl, (os_tok_ptr) 
22b8 23			inc hl 
22b9 23			inc hl    ; position to start of dict word 
22ba			 
22ba			;	ldir       ; copy word - HL now is where we need to be for copy of the line 
22ba			 
22ba			; TODO need to convert word to upper case 
22ba			 
22ba			ucasetok:	 
22ba 7e			ld a,(hl) 
22bb cd 52 11		call toUpper 
22be 77			ld (hl),a 
22bf ed a0		ldi 
22c1 f2 ba 22		jp p, ucasetok 
22c4			 
22c4			 
22c4			 
22c4			; de now points to start of where the word body code should be placed 
22c4 ed 53 a7 e2	ld (os_new_work_ptr), de 
22c8			; hl now points to the words to throw at forthexec which needs to be copied 
22c8 22 a5 e2		ld (os_new_src_ptr), hl 
22cb			 
22cb			; TODO add 'call to forthexec' 
22cb			 
22cb			if DEBUG_FORTH_UWORD 
22cb c5			push bc 
22cc ed 4b ad e2	ld bc, (os_new_malloc) 
22d0					DMARK ":0x" 
22d0 f5				push af  
22d1 3a e5 22			ld a, (.dmark)  
22d4 32 65 ee			ld (debug_mark),a  
22d7 3a e6 22			ld a, (.dmark+1)  
22da 32 66 ee			ld (debug_mark+1),a  
22dd 3a e7 22			ld a, (.dmark+2)  
22e0 32 67 ee			ld (debug_mark+2),a  
22e3 18 03			jr .pastdmark  
22e5 ..			.dmark: db ":0x"  
22e8 f1			.pastdmark: pop af  
22e9			endm  
# End of macro DMARK
22e9			CALLMONITOR 
22e9 cd 6f ee			call debug_vector  
22ec				endm  
# End of macro CALLMONITOR
22ec c1			pop bc 
22ed			endif 
22ed			 
22ed			 
22ed			; create word preamble which should be: 
22ed			 
22ed			; TODO possibly push the current os_tok_ptr to rsp and the current rsp will be the start of the string and not current pc???? 
22ed			 
22ed			;    ld hl, <word code> 
22ed			;    jp user_exec 
22ed			;    <word code bytes> 
22ed			 
22ed			 
22ed			;	inc de     ; TODO ??? or are we already past the word's null 
22ed eb			ex de, hl 
22ee			 
22ee 36 21		ld (hl), 021h     ; TODO get bytes poke "ld hl, " 
22f0			 
22f0 23			inc hl 
22f1 22 a1 e2		ld (os_new_exec_ptr),hl     ; save this location to poke with the address of the word buffer 
22f4 23			inc hl 
22f5			 
22f5 23			inc hl 
22f6 36 c3		ld (hl), 0c3h     ; TODO get bytes poke "jp xx  " 
22f8			 
22f8 01 d8 4e		ld bc, user_exec 
22fb 23			inc hl 
22fc 71			ld (hl), c     ; poke address of user_exec 
22fd 23			inc hl 
22fe 70			ld (hl), b     
22ff			; 
22ff			;	inc hl 
22ff			;	ld (hl), 0cdh     ; TODO get bytes poke "call  " 
22ff			; 
22ff			; 
22ff			;	ld bc, macro_forth_rsp_next 
22ff			;	inc hl 
22ff			;	ld (hl), c     ; poke address of FORTH_RSP_NEXT 
22ff			;	inc hl 
22ff			;	ld (hl), b     
22ff			; 
22ff			;	inc hl 
22ff			;	ld (hl), 0cdh     ; TODO get bytes poke "call  " 
22ff			; 
22ff			; 
22ff			;	inc hl 
22ff			;	ld bc, forthexec 
22ff			;	ld (hl), c     ; poke address of forthexec 
22ff			;	inc hl 
22ff			;	ld (hl), b      
22ff			; 
22ff			;	inc hl 
22ff			;	ld (hl), 0c3h     ; TODO get bytes poke "jp  " 
22ff			; 
22ff			;	ld bc, user_dict_next 
22ff			;	inc hl 
22ff			;	ld (hl), c     ; poke address of forthexec 
22ff			;	inc hl 
22ff			;	ld (hl), b      
22ff			 
22ff			; hl is now where we need to copy the word byte data to save this 
22ff			 
22ff 23			inc hl 
2300 22 a3 e2		ld (os_new_exec), hl 
2303			 
2303			; copy definition 
2303			 
2303 eb			ex de, hl 
2304			;	inc de    ; TODO BUG It appears the exec of a uword requires pc to be set 
2304			;	inc de    ; skip the PC for this parse 
2304 3a ab e2		ld a, (os_new_parse_len) 
2307 4f			ld c, a 
2308 06 00		ld b, 0 
230a ed b0		ldir		 ; copy defintion 
230c			 
230c			 
230c			; poke the address of where the new word bytes live for forthexec 
230c			 
230c 2a a1 e2		ld hl, (os_new_exec_ptr)     ; TODO this isnt correct 
230f			 
230f ed 5b a3 e2	ld de, (os_new_exec)      
2313			 
2313 73			ld (hl), e 
2314 23			inc hl 
2315 72			ld (hl), d 
2316			 
2316				; TODO copy last user dict word next link to this word 
2316				; TODO update last user dict word to point to this word 
2316			; 
2316			; hl f923 de 812a ; bc 811a 
2316			 
2316			if DEBUG_FORTH_UWORD 
2316 c5			push bc 
2317 ed 4b ad e2	ld bc, (os_new_malloc) 
231b					DMARK ":0A" 
231b f5				push af  
231c 3a 30 23			ld a, (.dmark)  
231f 32 65 ee			ld (debug_mark),a  
2322 3a 31 23			ld a, (.dmark+1)  
2325 32 66 ee			ld (debug_mark+1),a  
2328 3a 32 23			ld a, (.dmark+2)  
232b 32 67 ee			ld (debug_mark+2),a  
232e 18 03			jr .pastdmark  
2330 ..			.dmark: db ":0A"  
2333 f1			.pastdmark: pop af  
2334			endm  
# End of macro DMARK
2334			CALLMONITOR 
2334 cd 6f ee			call debug_vector  
2337				endm  
# End of macro CALLMONITOR
2337 c1			pop bc 
2338			endif 
2338			if DEBUG_FORTH_UWORD 
2338 c5			push bc 
2339 ed 4b ad e2	ld bc, (os_new_malloc) 
233d 03			inc bc 
233e 03			inc bc 
233f 03			inc bc 
2340 03			inc bc 
2341 03			inc bc 
2342 03			inc bc 
2343 03			inc bc 
2344 03			inc bc 
2345			 
2345					DMARK ":0B" 
2345 f5				push af  
2346 3a 5a 23			ld a, (.dmark)  
2349 32 65 ee			ld (debug_mark),a  
234c 3a 5b 23			ld a, (.dmark+1)  
234f 32 66 ee			ld (debug_mark+1),a  
2352 3a 5c 23			ld a, (.dmark+2)  
2355 32 67 ee			ld (debug_mark+2),a  
2358 18 03			jr .pastdmark  
235a ..			.dmark: db ":0B"  
235d f1			.pastdmark: pop af  
235e			endm  
# End of macro DMARK
235e			CALLMONITOR 
235e cd 6f ee			call debug_vector  
2361				endm  
# End of macro CALLMONITOR
2361 c1			pop bc 
2362			endif 
2362			 
2362			; update word dict linked list for new word 
2362			 
2362			 
2362 2a b8 e5		ld hl, (os_last_new_uword)		; get the start of the last added uword 
2365 23			inc hl     ; move to next work linked list ptr 
2366			 
2366 ed 5b ad e2	ld de, (os_new_malloc)		 ; new next word 
236a 73			ld (hl), e 
236b 23			inc hl 
236c 72			ld (hl), d 
236d			 
236d			if DEBUG_FORTH_UWORD 
236d ed 4b b8 e5	ld bc, (os_last_new_uword)		; get the last word so we can check it worked in debug 
2371			endif 
2371			 
2371 ed 53 b8 e5	ld (os_last_new_uword), de      ; update last new uword ptr 
2375			 
2375			 
2375			if DEBUG_FORTH_UWORD 
2375					DMARK ":0+" 
2375 f5				push af  
2376 3a 8a 23			ld a, (.dmark)  
2379 32 65 ee			ld (debug_mark),a  
237c 3a 8b 23			ld a, (.dmark+1)  
237f 32 66 ee			ld (debug_mark+1),a  
2382 3a 8c 23			ld a, (.dmark+2)  
2385 32 67 ee			ld (debug_mark+2),a  
2388 18 03			jr .pastdmark  
238a ..			.dmark: db ":0+"  
238d f1			.pastdmark: pop af  
238e			endm  
# End of macro DMARK
238e			CALLMONITOR 
238e cd 6f ee			call debug_vector  
2391				endm  
# End of macro CALLMONITOR
2391			endif 
2391			 
2391			STACKFRAMECHK OFF $8efe $989f 
2391				if DEBUG_STACK_IMB 
2391					if OFF 
2391						exx 
2391						ld hl, $989f 
2391						pop de   ; $989f 
2391						call cmp16 
2391						jr nz, .spnosame 
2391						ld hl, $8efe 
2391						pop de   ; $8efe 
2391						call cmp16 
2391						jr z, .spfrsame 
2391						.spnosame: call showsperror 
2391						.spfrsame: nop 
2391						exx 
2391					endif 
2391				endif 
2391			endm 
# End of macro STACKFRAMECHK
2391			 
2391 c9			ret    ; dont process any remaining parser tokens as they form new word 
2392			 
2392			 
2392			 
2392			 
2392			;		NEXT 
2392			.SCOLN: 
2392			;	CWHEAD .DROP 17 '\;' 1 WORD_FLAG_CODE 
2392 06			db OPCODE_SCOLN 
2393 de 23		dw .DROP 
2395 02			db 2 
2396 .. 00		db ";",0           
2398			; | ; ( -- )     Terminate new word and return exec to previous exec level | DONE 
2398				if DEBUG_FORTH_WORDS_KEY 
2398					DMARK "SCN" 
2398 f5				push af  
2399 3a ad 23			ld a, (.dmark)  
239c 32 65 ee			ld (debug_mark),a  
239f 3a ae 23			ld a, (.dmark+1)  
23a2 32 66 ee			ld (debug_mark+1),a  
23a5 3a af 23			ld a, (.dmark+2)  
23a8 32 67 ee			ld (debug_mark+2),a  
23ab 18 03			jr .pastdmark  
23ad ..			.dmark: db "SCN"  
23b0 f1			.pastdmark: pop af  
23b1			endm  
# End of macro DMARK
23b1					CALLMONITOR 
23b1 cd 6f ee			call debug_vector  
23b4				endm  
# End of macro CALLMONITOR
23b4				endif 
23b4				FORTH_RSP_TOS 
23b4 cd 4e 1b			call macro_forth_rsp_tos 
23b7				endm 
# End of macro FORTH_RSP_TOS
23b7 e5				push hl 
23b8				FORTH_RSP_POP 
23b8 cd 58 1b			call macro_forth_rsp_pop 
23bb				endm 
# End of macro FORTH_RSP_POP
23bb e1				pop hl 
23bc			;		ex de,hl 
23bc 22 bc e5			ld (os_tok_ptr),hl 
23bf			 
23bf			if DEBUG_FORTH_UWORD 
23bf					DMARK "SCL" 
23bf f5				push af  
23c0 3a d4 23			ld a, (.dmark)  
23c3 32 65 ee			ld (debug_mark),a  
23c6 3a d5 23			ld a, (.dmark+1)  
23c9 32 66 ee			ld (debug_mark+1),a  
23cc 3a d6 23			ld a, (.dmark+2)  
23cf 32 67 ee			ld (debug_mark+2),a  
23d2 18 03			jr .pastdmark  
23d4 ..			.dmark: db "SCL"  
23d7 f1			.pastdmark: pop af  
23d8			endm  
# End of macro DMARK
23d8			CALLMONITOR 
23d8 cd 6f ee			call debug_vector  
23db				endm  
# End of macro CALLMONITOR
23db			endif 
23db				NEXTW 
23db c3 81 1f			jp macro_next 
23de				endm 
# End of macro NEXTW
23de			 
23de			.DROP: 
23de			CWHEAD .DUP2 OPCODE_DROP "DROP" 4 WORD_FLAG_CODE 
23de 1b				db WORD_SYS_CORE+OPCODE_DROP             
23df 09 24			dw .DUP2            
23e1 05				db 4 + 1 
23e2 .. 00			db "DROP",0              
23e7				endm 
# End of macro CWHEAD
23e7			; | DROP ( w -- )   drop the TOS item   | DONE 
23e7				if DEBUG_FORTH_WORDS_KEY 
23e7					DMARK "DRP" 
23e7 f5				push af  
23e8 3a fc 23			ld a, (.dmark)  
23eb 32 65 ee			ld (debug_mark),a  
23ee 3a fd 23			ld a, (.dmark+1)  
23f1 32 66 ee			ld (debug_mark+1),a  
23f4 3a fe 23			ld a, (.dmark+2)  
23f7 32 67 ee			ld (debug_mark+2),a  
23fa 18 03			jr .pastdmark  
23fc ..			.dmark: db "DRP"  
23ff f1			.pastdmark: pop af  
2400			endm  
# End of macro DMARK
2400					CALLMONITOR 
2400 cd 6f ee			call debug_vector  
2403				endm  
# End of macro CALLMONITOR
2403				endif 
2403				FORTH_DSP_POP 
2403 cd 4d 1e			call macro_forth_dsp_pop 
2406				endm 
# End of macro FORTH_DSP_POP
2406				NEXTW 
2406 c3 81 1f			jp macro_next 
2409				endm 
# End of macro NEXTW
2409			.DUP2: 
2409			CWHEAD .DROP2 OPCODE_DUP2 "2DUP" 4 WORD_FLAG_CODE 
2409 1c				db WORD_SYS_CORE+OPCODE_DUP2             
240a 4e 24			dw .DROP2            
240c 05				db 4 + 1 
240d .. 00			db "2DUP",0              
2412				endm 
# End of macro CWHEAD
2412			; | 2DUP ( w1 w2 -- w1 w2 w1 w2 ) Duplicate the top two items on TOS  (Only works for numerics) | DONE 
2412				if DEBUG_FORTH_WORDS_KEY 
2412					DMARK "2DU" 
2412 f5				push af  
2413 3a 27 24			ld a, (.dmark)  
2416 32 65 ee			ld (debug_mark),a  
2419 3a 28 24			ld a, (.dmark+1)  
241c 32 66 ee			ld (debug_mark+1),a  
241f 3a 29 24			ld a, (.dmark+2)  
2422 32 67 ee			ld (debug_mark+2),a  
2425 18 03			jr .pastdmark  
2427 ..			.dmark: db "2DU"  
242a f1			.pastdmark: pop af  
242b			endm  
# End of macro DMARK
242b					CALLMONITOR 
242b cd 6f ee			call debug_vector  
242e				endm  
# End of macro CALLMONITOR
242e				endif 
242e				FORTH_DSP_VALUEHL 
242e cd 95 1d			call macro_dsp_valuehl 
2431				endm 
# End of macro FORTH_DSP_VALUEHL
2431 e5				push hl      ; 2 
2432			 
2432				FORTH_DSP_POP 
2432 cd 4d 1e			call macro_forth_dsp_pop 
2435				endm 
# End of macro FORTH_DSP_POP
2435				 
2435				FORTH_DSP_VALUEHL 
2435 cd 95 1d			call macro_dsp_valuehl 
2438				endm 
# End of macro FORTH_DSP_VALUEHL
2438			;		push hl      ; 1 
2438			 
2438				FORTH_DSP_POP 
2438 cd 4d 1e			call macro_forth_dsp_pop 
243b				endm 
# End of macro FORTH_DSP_POP
243b			 
243b			;		pop hl       ; 1 
243b d1				pop de       ; 2 
243c			 
243c cd 90 1b			call forth_push_numhl 
243f eb				ex de, hl 
2440 cd 90 1b			call forth_push_numhl 
2443			 
2443				 
2443 eb				ex de, hl 
2444			 
2444 cd 90 1b			call forth_push_numhl 
2447 eb				ex de, hl 
2448 cd 90 1b			call forth_push_numhl 
244b			 
244b			 
244b				NEXTW 
244b c3 81 1f			jp macro_next 
244e				endm 
# End of macro NEXTW
244e			.DROP2: 
244e			CWHEAD .PICK OPCODE_DROP2 "2DROP" 5 WORD_FLAG_CODE 
244e 1d				db WORD_SYS_CORE+OPCODE_DROP2             
244f 7d 24			dw .PICK            
2451 06				db 5 + 1 
2452 .. 00			db "2DROP",0              
2458				endm 
# End of macro CWHEAD
2458			; | 2DROP ( w w -- )    Double drop | DONE 
2458				if DEBUG_FORTH_WORDS_KEY 
2458					DMARK "2DR" 
2458 f5				push af  
2459 3a 6d 24			ld a, (.dmark)  
245c 32 65 ee			ld (debug_mark),a  
245f 3a 6e 24			ld a, (.dmark+1)  
2462 32 66 ee			ld (debug_mark+1),a  
2465 3a 6f 24			ld a, (.dmark+2)  
2468 32 67 ee			ld (debug_mark+2),a  
246b 18 03			jr .pastdmark  
246d ..			.dmark: db "2DR"  
2470 f1			.pastdmark: pop af  
2471			endm  
# End of macro DMARK
2471					CALLMONITOR 
2471 cd 6f ee			call debug_vector  
2474				endm  
# End of macro CALLMONITOR
2474				endif 
2474				FORTH_DSP_POP 
2474 cd 4d 1e			call macro_forth_dsp_pop 
2477				endm 
# End of macro FORTH_DSP_POP
2477				FORTH_DSP_POP 
2477 cd 4d 1e			call macro_forth_dsp_pop 
247a				endm 
# End of macro FORTH_DSP_POP
247a				NEXTW 
247a c3 81 1f			jp macro_next 
247d				endm 
# End of macro NEXTW
247d			.PICK: 
247d			CWHEAD .SWAP2 99 "PICK" 4 WORD_FLAG_CODE 
247d 77				db WORD_SYS_CORE+99             
247e bc 24			dw .SWAP2            
2480 05				db 4 + 1 
2481 .. 00			db "PICK",0              
2486				endm 
# End of macro CWHEAD
2486			; | PICK ( ux ... u x -- ux ... u n )    Replace x on stack with the item from position x on stack  | TODO 
2486				if DEBUG_FORTH_WORDS_KEY 
2486					DMARK "PIK" 
2486 f5				push af  
2487 3a 9b 24			ld a, (.dmark)  
248a 32 65 ee			ld (debug_mark),a  
248d 3a 9c 24			ld a, (.dmark+1)  
2490 32 66 ee			ld (debug_mark+1),a  
2493 3a 9d 24			ld a, (.dmark+2)  
2496 32 67 ee			ld (debug_mark+2),a  
2499 18 03			jr .pastdmark  
249b ..			.dmark: db "PIK"  
249e f1			.pastdmark: pop af  
249f			endm  
# End of macro DMARK
249f					CALLMONITOR 
249f cd 6f ee			call debug_vector  
24a2				endm  
# End of macro CALLMONITOR
24a2				endif 
24a2			 
24a2				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
24a2 cd 95 1d			call macro_dsp_valuehl 
24a5				endm 
# End of macro FORTH_DSP_VALUEHL
24a5				 
24a5				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
24a5 cd 4d 1e			call macro_forth_dsp_pop 
24a8				endm 
# End of macro FORTH_DSP_POP
24a8			 
24a8				; init from TOS 
24a8 45				ld b, l 
24a9 21 e8 e9			ld hl, cli_data_sp 
24ac			.pkl: 
24ac 2b				dec hl 
24ad 2b				dec hl 
24ae 2b				dec hl 
24af			 
24af 10 fb			djnz .pkl 
24b1			 
24b1				 
24b1				; TODO do type check with correct push 
24b1			 
24b1 23				inc hl 
24b2				;call loadwordinhl 
24b2 5e				ld e, (hl) 
24b3 23				inc hl 
24b4 56				ld d, (hl) 
24b5 eb				ex de,hl 
24b6 cd 90 1b			call forth_push_numhl 
24b9			 
24b9				NEXTW 
24b9 c3 81 1f			jp macro_next 
24bc				endm 
# End of macro NEXTW
24bc			.SWAP2: 
24bc			CWHEAD .AT OPCODE_SWAP2 "2SWAP" 5 WORD_FLAG_CODE 
24bc 1e				db WORD_SYS_CORE+OPCODE_SWAP2             
24bd 3d 25			dw .AT            
24bf 06				db 5 + 1 
24c0 .. 00			db "2SWAP",0              
24c6				endm 
# End of macro CWHEAD
24c6			; | 2SWAP ( w1 w2 w3 w4 -- w3 w4 w1 w2 ) Swap top pair of items | TODO 
24c6				if DEBUG_FORTH_WORDS_KEY 
24c6					DMARK "2SW" 
24c6 f5				push af  
24c7 3a db 24			ld a, (.dmark)  
24ca 32 65 ee			ld (debug_mark),a  
24cd 3a dc 24			ld a, (.dmark+1)  
24d0 32 66 ee			ld (debug_mark+1),a  
24d3 3a dd 24			ld a, (.dmark+2)  
24d6 32 67 ee			ld (debug_mark+2),a  
24d9 18 03			jr .pastdmark  
24db ..			.dmark: db "2SW"  
24de f1			.pastdmark: pop af  
24df			endm  
# End of macro DMARK
24df					CALLMONITOR 
24df cd 6f ee			call debug_vector  
24e2				endm  
# End of macro CALLMONITOR
24e2				endif 
24e2			; TODO Use os stack swap memory 
24e2			 
24e2				FORTH_DSP_PTR 0     ; TOS    w4 
24e2 2a e8 e9			ld hl,(cli_data_sp) 
24e5 11 00 00			ld de, 0 * 3 
24e8 ed 52			sbc hl, de 
24ea				endm 
# End of macro FORTH_DSP_PTR
24ea cd cd 1e			call hltostack1 
24ed			  
24ed				FORTH_DSP_PTR 1     ; TOS    w3 
24ed 2a e8 e9			ld hl,(cli_data_sp) 
24f0 11 03 00			ld de, 1 * 3 
24f3 ed 52			sbc hl, de 
24f5				endm 
# End of macro FORTH_DSP_PTR
24f5 cd d3 1e			call hltostack2 
24f8			 
24f8			 
24f8			 
24f8				FORTH_DSP_PTR 2     ; TOS    w2 
24f8 2a e8 e9			ld hl,(cli_data_sp) 
24fb 11 06 00			ld de, 2 * 3 
24fe ed 52			sbc hl, de 
2500				endm 
# End of macro FORTH_DSP_PTR
2500 cd d9 1e			call hltostack3 
2503			 
2503				FORTH_DSP_PTR 3     ; TOS   w1 
2503 2a e8 e9			ld hl,(cli_data_sp) 
2506 11 09 00			ld de, 3 * 3 
2509 ed 52			sbc hl, de 
250b				endm 
# End of macro FORTH_DSP_PTR
250b cd df 1e			call hltostack4 
250e			 
250e			 
250e			 
250e			 
250e				FORTH_DSP_PTR 0     ; TOS 
250e 2a e8 e9			ld hl,(cli_data_sp) 
2511 11 00 00			ld de, 0 * 3 
2514 ed 52			sbc hl, de 
2516				endm 
# End of macro FORTH_DSP_PTR
2516 cd f1 1e			call hlfromstack3 
2519			 
2519				FORTH_DSP_PTR 1     ; TOS 
2519 2a e8 e9			ld hl,(cli_data_sp) 
251c 11 03 00			ld de, 1 * 3 
251f ed 52			sbc hl, de 
2521				endm 
# End of macro FORTH_DSP_PTR
2521 cd f7 1e			call hlfromstack4 
2524			 
2524			 
2524			 
2524				FORTH_DSP_PTR 2     ; TOS 
2524 2a e8 e9			ld hl,(cli_data_sp) 
2527 11 06 00			ld de, 2 * 3 
252a ed 52			sbc hl, de 
252c				endm 
# End of macro FORTH_DSP_PTR
252c cd e5 1e			call hlfromstack1 
252f			 
252f				FORTH_DSP_PTR 3     ; TOS 
252f 2a e8 e9			ld hl,(cli_data_sp) 
2532 11 09 00			ld de, 3 * 3 
2535 ed 52			sbc hl, de 
2537				endm 
# End of macro FORTH_DSP_PTR
2537 cd eb 1e			call hlfromstack2 
253a			 
253a				NEXTW 
253a c3 81 1f			jp macro_next 
253d				endm 
# End of macro NEXTW
253d			.AT: 
253d			CWHEAD .CAT OPCODE_AT "@" 1 WORD_FLAG_CODE 
253d 1f				db WORD_SYS_CORE+OPCODE_AT             
253e 6f 25			dw .CAT            
2540 02				db 1 + 1 
2541 .. 00			db "@",0              
2543				endm 
# End of macro CWHEAD
2543			; | @ ( w -- ) Push onto TOS byte stored at address   | DONE 
2543			 
2543				if DEBUG_FORTH_WORDS_KEY 
2543					DMARK "AT." 
2543 f5				push af  
2544 3a 58 25			ld a, (.dmark)  
2547 32 65 ee			ld (debug_mark),a  
254a 3a 59 25			ld a, (.dmark+1)  
254d 32 66 ee			ld (debug_mark+1),a  
2550 3a 5a 25			ld a, (.dmark+2)  
2553 32 67 ee			ld (debug_mark+2),a  
2556 18 03			jr .pastdmark  
2558 ..			.dmark: db "AT."  
255b f1			.pastdmark: pop af  
255c			endm  
# End of macro DMARK
255c					CALLMONITOR 
255c cd 6f ee			call debug_vector  
255f				endm  
# End of macro CALLMONITOR
255f				endif 
255f			.getbyteat:	 
255f				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
255f cd 95 1d			call macro_dsp_valuehl 
2562				endm 
# End of macro FORTH_DSP_VALUEHL
2562				 
2562			;		push hl 
2562			 
2562				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2562 cd 4d 1e			call macro_forth_dsp_pop 
2565				endm 
# End of macro FORTH_DSP_POP
2565			 
2565			;		pop hl 
2565			 
2565 7e				ld a, (hl) 
2566			 
2566 6f				ld l, a 
2567 26 00			ld h, 0 
2569 cd 90 1b			call forth_push_numhl 
256c			 
256c				NEXTW 
256c c3 81 1f			jp macro_next 
256f				endm 
# End of macro NEXTW
256f			.CAT: 
256f			CWHEAD .BANG OPCODE_CAT "C@" 2 WORD_FLAG_CODE 
256f 20				db WORD_SYS_CORE+OPCODE_CAT             
2570 98 25			dw .BANG            
2572 03				db 2 + 1 
2573 .. 00			db "C@",0              
2576				endm 
# End of macro CWHEAD
2576			; | C@  ( w -- ) Push onto TOS byte stored at address   | DONE 
2576				if DEBUG_FORTH_WORDS_KEY 
2576					DMARK "CAA" 
2576 f5				push af  
2577 3a 8b 25			ld a, (.dmark)  
257a 32 65 ee			ld (debug_mark),a  
257d 3a 8c 25			ld a, (.dmark+1)  
2580 32 66 ee			ld (debug_mark+1),a  
2583 3a 8d 25			ld a, (.dmark+2)  
2586 32 67 ee			ld (debug_mark+2),a  
2589 18 03			jr .pastdmark  
258b ..			.dmark: db "CAA"  
258e f1			.pastdmark: pop af  
258f			endm  
# End of macro DMARK
258f					CALLMONITOR 
258f cd 6f ee			call debug_vector  
2592				endm  
# End of macro CALLMONITOR
2592				endif 
2592 c3 5f 25			jp .getbyteat 
2595				NEXTW 
2595 c3 81 1f			jp macro_next 
2598				endm 
# End of macro NEXTW
2598			.BANG: 
2598			CWHEAD .CBANG OPCODE_BANG "!" 1 WORD_FLAG_CODE 
2598 21				db WORD_SYS_CORE+OPCODE_BANG             
2599 ce 25			dw .CBANG            
259b 02				db 1 + 1 
259c .. 00			db "!",0              
259e				endm 
# End of macro CWHEAD
259e			; | ! ( x w -- ) Store x at address w      | DONE 
259e				if DEBUG_FORTH_WORDS_KEY 
259e					DMARK "BNG" 
259e f5				push af  
259f 3a b3 25			ld a, (.dmark)  
25a2 32 65 ee			ld (debug_mark),a  
25a5 3a b4 25			ld a, (.dmark+1)  
25a8 32 66 ee			ld (debug_mark+1),a  
25ab 3a b5 25			ld a, (.dmark+2)  
25ae 32 67 ee			ld (debug_mark+2),a  
25b1 18 03			jr .pastdmark  
25b3 ..			.dmark: db "BNG"  
25b6 f1			.pastdmark: pop af  
25b7			endm  
# End of macro DMARK
25b7					CALLMONITOR 
25b7 cd 6f ee			call debug_vector  
25ba				endm  
# End of macro CALLMONITOR
25ba				endif 
25ba			 
25ba			.storebyteat:		 
25ba				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
25ba cd 95 1d			call macro_dsp_valuehl 
25bd				endm 
# End of macro FORTH_DSP_VALUEHL
25bd				 
25bd e5				push hl 
25be			 
25be				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
25be cd 4d 1e			call macro_forth_dsp_pop 
25c1				endm 
# End of macro FORTH_DSP_POP
25c1			 
25c1				; get byte to poke 
25c1			 
25c1				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
25c1 cd 95 1d			call macro_dsp_valuehl 
25c4				endm 
# End of macro FORTH_DSP_VALUEHL
25c4 e5				push hl 
25c5			 
25c5			 
25c5				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
25c5 cd 4d 1e			call macro_forth_dsp_pop 
25c8				endm 
# End of macro FORTH_DSP_POP
25c8			 
25c8			 
25c8 d1				pop de 
25c9 e1				pop hl 
25ca			 
25ca 73				ld (hl),e 
25cb			 
25cb			 
25cb				NEXTW 
25cb c3 81 1f			jp macro_next 
25ce				endm 
# End of macro NEXTW
25ce			.CBANG: 
25ce			CWHEAD .SCALL OPCODE_CBANG "C!" 2 WORD_FLAG_CODE 
25ce 22				db WORD_SYS_CORE+OPCODE_CBANG             
25cf f7 25			dw .SCALL            
25d1 03				db 2 + 1 
25d2 .. 00			db "C!",0              
25d5				endm 
# End of macro CWHEAD
25d5			; | C!  ( x w -- ) Store x at address w  | DONE 
25d5				if DEBUG_FORTH_WORDS_KEY 
25d5					DMARK "CBA" 
25d5 f5				push af  
25d6 3a ea 25			ld a, (.dmark)  
25d9 32 65 ee			ld (debug_mark),a  
25dc 3a eb 25			ld a, (.dmark+1)  
25df 32 66 ee			ld (debug_mark+1),a  
25e2 3a ec 25			ld a, (.dmark+2)  
25e5 32 67 ee			ld (debug_mark+2),a  
25e8 18 03			jr .pastdmark  
25ea ..			.dmark: db "CBA"  
25ed f1			.pastdmark: pop af  
25ee			endm  
# End of macro DMARK
25ee					CALLMONITOR 
25ee cd 6f ee			call debug_vector  
25f1				endm  
# End of macro CALLMONITOR
25f1				endif 
25f1 c3 ba 25			jp .storebyteat 
25f4				NEXTW 
25f4 c3 81 1f			jp macro_next 
25f7				endm 
# End of macro NEXTW
25f7			.SCALL: 
25f7			CWHEAD .DEPTH OPCODE_SCALL "CALL" 4 WORD_FLAG_CODE 
25f7 23				db WORD_SYS_CORE+OPCODE_SCALL             
25f8 2b 26			dw .DEPTH            
25fa 05				db 4 + 1 
25fb .. 00			db "CALL",0              
2600				endm 
# End of macro CWHEAD
2600			; | CALL ( w -- w  ) machine code call to address w  push the result of hl to stack | DONE 
2600				if DEBUG_FORTH_WORDS_KEY 
2600					DMARK "CLL" 
2600 f5				push af  
2601 3a 15 26			ld a, (.dmark)  
2604 32 65 ee			ld (debug_mark),a  
2607 3a 16 26			ld a, (.dmark+1)  
260a 32 66 ee			ld (debug_mark+1),a  
260d 3a 17 26			ld a, (.dmark+2)  
2610 32 67 ee			ld (debug_mark+2),a  
2613 18 03			jr .pastdmark  
2615 ..			.dmark: db "CLL"  
2618 f1			.pastdmark: pop af  
2619			endm  
# End of macro DMARK
2619					CALLMONITOR 
2619 cd 6f ee			call debug_vector  
261c				endm  
# End of macro CALLMONITOR
261c				endif 
261c			 
261c				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
261c cd 95 1d			call macro_dsp_valuehl 
261f				endm 
# End of macro FORTH_DSP_VALUEHL
261f			 
261f			;		push hl 
261f			 
261f				; destroy value TOS 
261f			 
261f				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
261f cd 4d 1e			call macro_forth_dsp_pop 
2622				endm 
# End of macro FORTH_DSP_POP
2622			 
2622					 
2622			;		pop hl 
2622			 
2622				; how to do a call with hl???? save SP? 
2622 cd 25 1f			call forth_call_hl 
2625			 
2625			 
2625				; TODO push value back onto stack for another op etc 
2625			 
2625 cd 90 1b			call forth_push_numhl 
2628				NEXTW 
2628 c3 81 1f			jp macro_next 
262b				endm 
# End of macro NEXTW
262b			.DEPTH: 
262b			CWHEAD .OVER OPCODE_DEPTH "DEPTH" 5 WORD_FLAG_CODE 
262b 24				db WORD_SYS_CORE+OPCODE_DEPTH             
262c 68 26			dw .OVER            
262e 06				db 5 + 1 
262f .. 00			db "DEPTH",0              
2635				endm 
# End of macro CWHEAD
2635			; | DEPTH ( -- u ) Push count of stack | DONE 
2635				; take current TOS and remove from base value div by two to get count 
2635				if DEBUG_FORTH_WORDS_KEY 
2635					DMARK "DEP" 
2635 f5				push af  
2636 3a 4a 26			ld a, (.dmark)  
2639 32 65 ee			ld (debug_mark),a  
263c 3a 4b 26			ld a, (.dmark+1)  
263f 32 66 ee			ld (debug_mark+1),a  
2642 3a 4c 26			ld a, (.dmark+2)  
2645 32 67 ee			ld (debug_mark+2),a  
2648 18 03			jr .pastdmark  
264a ..			.dmark: db "DEP"  
264d f1			.pastdmark: pop af  
264e			endm  
# End of macro DMARK
264e					CALLMONITOR 
264e cd 6f ee			call debug_vector  
2651				endm  
# End of macro CALLMONITOR
2651				endif 
2651			 
2651			 
2651 2a e8 e9		ld hl, (cli_data_sp) 
2654 11 22 e8		ld de, cli_data_stack 
2657 ed 52		sbc hl,de 
2659			 
2659			; div by size of stack item 
2659			 
2659 5d			ld e,l 
265a 0e 03		ld c, 3 
265c cd 85 0d		call Div8 
265f			 
265f 6f			ld l,a 
2660 26 00		ld h,0 
2662			 
2662			;srl h 
2662			;rr l 
2662			 
2662 cd 90 1b			call forth_push_numhl 
2665				NEXTW 
2665 c3 81 1f			jp macro_next 
2668				endm 
# End of macro NEXTW
2668			.OVER: 
2668			CWHEAD .PAUSE 46 "OVER" 4 WORD_FLAG_CODE 
2668 42				db WORD_SYS_CORE+46             
2669 af 26			dw .PAUSE            
266b 05				db 4 + 1 
266c .. 00			db "OVER",0              
2671				endm 
# End of macro CWHEAD
2671			; | OVER ( n1 n2 -- n1 n2 n1 )  Copy one below TOS onto TOS | TOFIX 
2671				if DEBUG_FORTH_WORDS_KEY 
2671					DMARK "OVR" 
2671 f5				push af  
2672 3a 86 26			ld a, (.dmark)  
2675 32 65 ee			ld (debug_mark),a  
2678 3a 87 26			ld a, (.dmark+1)  
267b 32 66 ee			ld (debug_mark+1),a  
267e 3a 88 26			ld a, (.dmark+2)  
2681 32 67 ee			ld (debug_mark+2),a  
2684 18 03			jr .pastdmark  
2686 ..			.dmark: db "OVR"  
2689 f1			.pastdmark: pop af  
268a			endm  
# End of macro DMARK
268a					CALLMONITOR 
268a cd 6f ee			call debug_vector  
268d				endm  
# End of macro CALLMONITOR
268d				endif 
268d			 
268d			; TODO Use os stack swap memory 
268d			 
268d				; work out what type we are looking at 
268d			 
268d				FORTH_DSP_PTR 1 
268d 2a e8 e9			ld hl,(cli_data_sp) 
2690 11 03 00			ld de, 1 * 3 
2693 ed 52			sbc hl, de 
2695				endm 
# End of macro FORTH_DSP_PTR
2695			 
2695 7e				ld a, (hl) 
2696				 
2696 f5				push af 
2697				; whatever the type lets get the pointer or word 
2697 23				inc hl 
2698			;; 
2698			 
2698				; type check now to decide on how to push  
2698			 
2698 cd 03 1f			call loadwordinhl 
269b f1				pop af 
269c fe 01			cp DS_TYPE_STR 
269e 28 06			jr z, .ovstr 
26a0			 
26a0				; we have a numeric so load the word and push 
26a0			;	ld e, (hl) 
26a0			;	inc hl 
26a0			;	ld d, (hl) 
26a0			;	ex de, hl 
26a0 cd 90 1b			call forth_push_numhl 
26a3				NEXTW 
26a3 c3 81 1f			jp macro_next 
26a6				endm 
# End of macro NEXTW
26a6			 
26a6			.ovstr: 
26a6				; ok, a string so get the pointer and push as a string 
26a6			 
26a6			;	call loadwordinhl 
26a6 cd fe 1b			call forth_push_str 
26a9				NEXTW 
26a9 c3 81 1f			jp macro_next 
26ac				endm 
# End of macro NEXTW
26ac			 
26ac			;	FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
26ac			;	push hl    ; n2 
26ac			;	FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
26ac			; 
26ac			;	FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
26ac			;	push hl    ; n1 
26ac			;	FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
26ac			; 
26ac			;	pop de     ; n1 
26ac			;	pop hl     ; n2 
26ac			; 
26ac			;	push de 
26ac			;	push hl 
26ac			;	push de 
26ac			 
26ac				; push back  
26ac			 
26ac			;	pop hl 
26ac			;	call forth_push_numhl 
26ac			;	pop hl 
26ac			;	call forth_push_numhl 
26ac			;	pop hl 
26ac			;	call forth_push_numhl 
26ac				NEXTW 
26ac c3 81 1f			jp macro_next 
26af				endm 
# End of macro NEXTW
26af			 
26af			.PAUSE: 
26af			CWHEAD .PAUSES 47 "PAUSEMS" 7 WORD_FLAG_CODE 
26af 43				db WORD_SYS_CORE+47             
26b0 e4 26			dw .PAUSES            
26b2 08				db 7 + 1 
26b3 .. 00			db "PAUSEMS",0              
26bb				endm 
# End of macro CWHEAD
26bb			; | PAUSEMS ( n -- )  Pause for n millisconds | DONE 
26bb				if DEBUG_FORTH_WORDS_KEY 
26bb					DMARK "PMS" 
26bb f5				push af  
26bc 3a d0 26			ld a, (.dmark)  
26bf 32 65 ee			ld (debug_mark),a  
26c2 3a d1 26			ld a, (.dmark+1)  
26c5 32 66 ee			ld (debug_mark+1),a  
26c8 3a d2 26			ld a, (.dmark+2)  
26cb 32 67 ee			ld (debug_mark+2),a  
26ce 18 03			jr .pastdmark  
26d0 ..			.dmark: db "PMS"  
26d3 f1			.pastdmark: pop af  
26d4			endm  
# End of macro DMARK
26d4					CALLMONITOR 
26d4 cd 6f ee			call debug_vector  
26d7				endm  
# End of macro CALLMONITOR
26d7				endif 
26d7				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
26d7 cd 95 1d			call macro_dsp_valuehl 
26da				endm 
# End of macro FORTH_DSP_VALUEHL
26da			;		push hl    ; n2 
26da				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
26da cd 4d 1e			call macro_forth_dsp_pop 
26dd				endm 
# End of macro FORTH_DSP_POP
26dd			;		pop hl 
26dd			 
26dd 7d				ld a, l 
26de cd e5 0a			call aDelayInMS 
26e1			       NEXTW 
26e1 c3 81 1f			jp macro_next 
26e4				endm 
# End of macro NEXTW
26e4			.PAUSES:  
26e4			CWHEAD .ROT 48 "PAUSE" 5 WORD_FLAG_CODE 
26e4 44				db WORD_SYS_CORE+48             
26e5 53 27			dw .ROT            
26e7 06				db 5 + 1 
26e8 .. 00			db "PAUSE",0              
26ee				endm 
# End of macro CWHEAD
26ee			; | PAUSE ( n -- )  Pause for n seconds | DONE 
26ee				if DEBUG_FORTH_WORDS_KEY 
26ee					DMARK "PAU" 
26ee f5				push af  
26ef 3a 03 27			ld a, (.dmark)  
26f2 32 65 ee			ld (debug_mark),a  
26f5 3a 04 27			ld a, (.dmark+1)  
26f8 32 66 ee			ld (debug_mark+1),a  
26fb 3a 05 27			ld a, (.dmark+2)  
26fe 32 67 ee			ld (debug_mark+2),a  
2701 18 03			jr .pastdmark  
2703 ..			.dmark: db "PAU"  
2706 f1			.pastdmark: pop af  
2707			endm  
# End of macro DMARK
2707					CALLMONITOR 
2707 cd 6f ee			call debug_vector  
270a				endm  
# End of macro CALLMONITOR
270a				endif 
270a				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
270a cd 95 1d			call macro_dsp_valuehl 
270d				endm 
# End of macro FORTH_DSP_VALUEHL
270d			;		push hl    ; n2 
270d				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
270d cd 4d 1e			call macro_forth_dsp_pop 
2710				endm 
# End of macro FORTH_DSP_POP
2710			;		pop hl 
2710 45				ld b, l 
2711				if DEBUG_FORTH_WORDS 
2711					DMARK "PAU" 
2711 f5				push af  
2712 3a 26 27			ld a, (.dmark)  
2715 32 65 ee			ld (debug_mark),a  
2718 3a 27 27			ld a, (.dmark+1)  
271b 32 66 ee			ld (debug_mark+1),a  
271e 3a 28 27			ld a, (.dmark+2)  
2721 32 67 ee			ld (debug_mark+2),a  
2724 18 03			jr .pastdmark  
2726 ..			.dmark: db "PAU"  
2729 f1			.pastdmark: pop af  
272a			endm  
# End of macro DMARK
272a					CALLMONITOR 
272a cd 6f ee			call debug_vector  
272d				endm  
# End of macro CALLMONITOR
272d				endif 
272d c5			.pauses1:	push bc 
272e cd 00 0b			call delay1s 
2731 c1				pop bc 
2732				if DEBUG_FORTH_WORDS 
2732					DMARK "PA1" 
2732 f5				push af  
2733 3a 47 27			ld a, (.dmark)  
2736 32 65 ee			ld (debug_mark),a  
2739 3a 48 27			ld a, (.dmark+1)  
273c 32 66 ee			ld (debug_mark+1),a  
273f 3a 49 27			ld a, (.dmark+2)  
2742 32 67 ee			ld (debug_mark+2),a  
2745 18 03			jr .pastdmark  
2747 ..			.dmark: db "PA1"  
274a f1			.pastdmark: pop af  
274b			endm  
# End of macro DMARK
274b					CALLMONITOR 
274b cd 6f ee			call debug_vector  
274e				endm  
# End of macro CALLMONITOR
274e				endif 
274e 10 dd			djnz .pauses1 
2750			 
2750			       NEXTW 
2750 c3 81 1f			jp macro_next 
2753				endm 
# End of macro NEXTW
2753			.ROT: 
2753			CWHEAD .UWORDS 49 "ROT" 3 WORD_FLAG_CODE 
2753 45				db WORD_SYS_CORE+49             
2754 bc 27			dw .UWORDS            
2756 04				db 3 + 1 
2757 .. 00			db "ROT",0              
275b				endm 
# End of macro CWHEAD
275b			; | ROT ( u1 u2 u3 -- u2 u3 u1 ) Rotate top three items on stack | TOFIX 
275b				if DEBUG_FORTH_WORDS_KEY 
275b					DMARK "ROT" 
275b f5				push af  
275c 3a 70 27			ld a, (.dmark)  
275f 32 65 ee			ld (debug_mark),a  
2762 3a 71 27			ld a, (.dmark+1)  
2765 32 66 ee			ld (debug_mark+1),a  
2768 3a 72 27			ld a, (.dmark+2)  
276b 32 67 ee			ld (debug_mark+2),a  
276e 18 03			jr .pastdmark  
2770 ..			.dmark: db "ROT"  
2773 f1			.pastdmark: pop af  
2774			endm  
# End of macro DMARK
2774					CALLMONITOR 
2774 cd 6f ee			call debug_vector  
2777				endm  
# End of macro CALLMONITOR
2777				endif 
2777			 
2777			; DONE Use os stack swap memory 
2777			 
2777				FORTH_DSP_PTR 0     ; u3 
2777 2a e8 e9			ld hl,(cli_data_sp) 
277a 11 00 00			ld de, 0 * 3 
277d ed 52			sbc hl, de 
277f				endm 
# End of macro FORTH_DSP_PTR
277f cd cd 1e			call hltostack1     
2782			  
2782				FORTH_DSP_PTR 1     ; u2 
2782 2a e8 e9			ld hl,(cli_data_sp) 
2785 11 03 00			ld de, 1 * 3 
2788 ed 52			sbc hl, de 
278a				endm 
# End of macro FORTH_DSP_PTR
278a cd d3 1e			call hltostack2      
278d			 
278d				FORTH_DSP_PTR 2     ; u1 
278d 2a e8 e9			ld hl,(cli_data_sp) 
2790 11 06 00			ld de, 2 * 3 
2793 ed 52			sbc hl, de 
2795				endm 
# End of macro FORTH_DSP_PTR
2795 cd d9 1e			call hltostack3 
2798			 
2798			 
2798				FORTH_DSP_PTR 0     ;  
2798 2a e8 e9			ld hl,(cli_data_sp) 
279b 11 00 00			ld de, 0 * 3 
279e ed 52			sbc hl, de 
27a0				endm 
# End of macro FORTH_DSP_PTR
27a0 cd f1 1e			call hlfromstack3 
27a3			 
27a3				FORTH_DSP_PTR 1     ; TOS 
27a3 2a e8 e9			ld hl,(cli_data_sp) 
27a6 11 03 00			ld de, 1 * 3 
27a9 ed 52			sbc hl, de 
27ab				endm 
# End of macro FORTH_DSP_PTR
27ab cd e5 1e			call hlfromstack1 
27ae			 
27ae				FORTH_DSP_PTR 2     ; TOS 
27ae 2a e8 e9			ld hl,(cli_data_sp) 
27b1 11 06 00			ld de, 2 * 3 
27b4 ed 52			sbc hl, de 
27b6				endm 
# End of macro FORTH_DSP_PTR
27b6 cd eb 1e			call hlfromstack2 
27b9			 
27b9			 
27b9			;	FORTH_DSP_VALUEHL 
27b9			;	push hl    ; u3  
27b9			; 
27b9			;	FORTH_DSP_POP 
27b9			; 
27b9			;	FORTH_DSP_VALUEHL 
27b9			;	push hl     ; u2 
27b9			; 
27b9			;	FORTH_DSP_POP 
27b9			; 
27b9			;	FORTH_DSP_VALUEHL 
27b9			;	push hl     ; u1 
27b9			; 
27b9			;	FORTH_DSP_POP 
27b9			; 
27b9			;	pop bc      ; u1 
27b9			;	pop hl      ; u2 
27b9			;	pop de      ; u3 
27b9			; 
27b9			; 
27b9			;	push bc 
27b9			;	push de 
27b9			;	push hl 
27b9			; 
27b9			; 
27b9			;	pop hl 
27b9			;	call forth_push_numhl 
27b9			; 
27b9			;	pop hl 
27b9			;	call forth_push_numhl 
27b9			; 
27b9			;	pop hl 
27b9			;	call forth_push_numhl 
27b9				 
27b9			 
27b9			 
27b9			 
27b9			 
27b9			 
27b9			       NEXTW 
27b9 c3 81 1f			jp macro_next 
27bc				endm 
# End of macro NEXTW
27bc			 
27bc			.UWORDS: 
27bc			CWHEAD .BP 60 "UWORDS" 6 WORD_FLAG_CODE 
27bc 50				db WORD_SYS_CORE+60             
27bd 7e 28			dw .BP            
27bf 07				db 6 + 1 
27c0 .. 00			db "UWORDS",0              
27c7				endm 
# End of macro CWHEAD
27c7			; | UWORDS (  -- s1 ... sn u )   List user word dict | DONE 
27c7			; | | After use the TOS will have a count of the number of user words that have been pushed to stack. 
27c7			; | | Following the count are the individual words. 
27c7			; | | 
27c7			; | | e.g. UWORDS 
27c7			; | | BOX DIRLIST 2 
27c7			; | |  
27c7			; | | Can be used to save the words to storage via: 
27c7			; | | UWORDS $01 DO $01 APPEND LOOP 
27c7			if DEBUG_FORTH_WORDS_KEY 
27c7				DMARK "UWR" 
27c7 f5				push af  
27c8 3a dc 27			ld a, (.dmark)  
27cb 32 65 ee			ld (debug_mark),a  
27ce 3a dd 27			ld a, (.dmark+1)  
27d1 32 66 ee			ld (debug_mark+1),a  
27d4 3a de 27			ld a, (.dmark+2)  
27d7 32 67 ee			ld (debug_mark+2),a  
27da 18 03			jr .pastdmark  
27dc ..			.dmark: db "UWR"  
27df f1			.pastdmark: pop af  
27e0			endm  
# End of macro DMARK
27e0				CALLMONITOR 
27e0 cd 6f ee			call debug_vector  
27e3				endm  
# End of macro CALLMONITOR
27e3			endif 
27e3 21 54 61			ld hl, baseram 
27e6				;ld hl, baseusermem 
27e6 01 00 00			ld bc, 0    ; start a counter 
27e9			 
27e9			; skip dict stub 
27e9			 
27e9 cd be 20			call forth_tok_next 
27ec			 
27ec			 
27ec			; while we have words to look for 
27ec			 
27ec 7e			.douscan:	ld a, (hl)      
27ed			if DEBUG_FORTH_WORDS 
27ed				DMARK "UWs" 
27ed f5				push af  
27ee 3a 02 28			ld a, (.dmark)  
27f1 32 65 ee			ld (debug_mark),a  
27f4 3a 03 28			ld a, (.dmark+1)  
27f7 32 66 ee			ld (debug_mark+1),a  
27fa 3a 04 28			ld a, (.dmark+2)  
27fd 32 67 ee			ld (debug_mark+2),a  
2800 18 03			jr .pastdmark  
2802 ..			.dmark: db "UWs"  
2805 f1			.pastdmark: pop af  
2806			endm  
# End of macro DMARK
2806				CALLMONITOR 
2806 cd 6f ee			call debug_vector  
2809				endm  
# End of macro CALLMONITOR
2809			endif 
2809 fe 00			cp WORD_SYS_END 
280b 28 4d			jr z, .udone 
280d fe 01			cp WORD_SYS_UWORD 
280f 20 44			jr nz, .nuword 
2811			 
2811			if DEBUG_FORTH_WORDS 
2811				DMARK "UWu" 
2811 f5				push af  
2812 3a 26 28			ld a, (.dmark)  
2815 32 65 ee			ld (debug_mark),a  
2818 3a 27 28			ld a, (.dmark+1)  
281b 32 66 ee			ld (debug_mark+1),a  
281e 3a 28 28			ld a, (.dmark+2)  
2821 32 67 ee			ld (debug_mark+2),a  
2824 18 03			jr .pastdmark  
2826 ..			.dmark: db "UWu"  
2829 f1			.pastdmark: pop af  
282a			endm  
# End of macro DMARK
282a				CALLMONITOR 
282a cd 6f ee			call debug_vector  
282d				endm  
# End of macro CALLMONITOR
282d			endif 
282d				; we have a uword so push its name to the stack 
282d			 
282d e5				push hl  ; save so we can move to next dict block 
282e			 
282e				; skip opcode 
282e 23				inc hl  
282f				; skip next ptr 
282f 23				inc hl  
2830 23				inc hl 
2831				; skip len 
2831 23				inc hl 
2832			if DEBUG_FORTH_WORDS 
2832				DMARK "UWt" 
2832 f5				push af  
2833 3a 47 28			ld a, (.dmark)  
2836 32 65 ee			ld (debug_mark),a  
2839 3a 48 28			ld a, (.dmark+1)  
283c 32 66 ee			ld (debug_mark+1),a  
283f 3a 49 28			ld a, (.dmark+2)  
2842 32 67 ee			ld (debug_mark+2),a  
2845 18 03			jr .pastdmark  
2847 ..			.dmark: db "UWt"  
284a f1			.pastdmark: pop af  
284b			endm  
# End of macro DMARK
284b				CALLMONITOR 
284b cd 6f ee			call debug_vector  
284e				endm  
# End of macro CALLMONITOR
284e			endif 
284e 03				inc bc 
284f			 
284f c5				push bc 
2850 cd fe 1b			call forth_push_str 
2853 c1				pop bc 
2854			 
2854 e1				pop hl 	 
2855			 
2855 cd be 20		.nuword:	call forth_tok_next 
2858 18 92			jr .douscan  
285a			 
285a			.udone:		 ; push count of uwords found 
285a c5				push bc 
285b e1				pop hl 
285c			 
285c			if DEBUG_FORTH_WORDS 
285c				DMARK "UWc" 
285c f5				push af  
285d 3a 71 28			ld a, (.dmark)  
2860 32 65 ee			ld (debug_mark),a  
2863 3a 72 28			ld a, (.dmark+1)  
2866 32 66 ee			ld (debug_mark+1),a  
2869 3a 73 28			ld a, (.dmark+2)  
286c 32 67 ee			ld (debug_mark+2),a  
286f 18 03			jr .pastdmark  
2871 ..			.dmark: db "UWc"  
2874 f1			.pastdmark: pop af  
2875			endm  
# End of macro DMARK
2875				CALLMONITOR 
2875 cd 6f ee			call debug_vector  
2878				endm  
# End of macro CALLMONITOR
2878			endif 
2878 cd 90 1b			call forth_push_numhl 
287b			 
287b			 
287b			       NEXTW 
287b c3 81 1f			jp macro_next 
287e				endm 
# End of macro NEXTW
287e			 
287e			.BP: 
287e			CWHEAD .MONITOR 64 "BP" 2 WORD_FLAG_CODE 
287e 54				db WORD_SYS_CORE+64             
287f b8 28			dw .MONITOR            
2881 03				db 2 + 1 
2882 .. 00			db "BP",0              
2885				endm 
# End of macro CWHEAD
2885			; | BP ( u1 -- ) Enable or disable break point monitoring | DONE 
2885			; | | $00 Will enable the break points within specific code paths 
2885			; | | $01 Will disable break points 
2885			; | |  
2885			; | | By default break points are off. Either the above can be used to enable them 
2885			; | | or if a key is held down during start up the spashscreen will appear to freeze 
2885			; | | and on release of the pressed key the CONFIG menu will be displayed where you 
2885			; | | can disable break points. Exiting will then continue boot process. 
2885				; get byte count 
2885				if DEBUG_FORTH_WORDS_KEY 
2885					DMARK "BP." 
2885 f5				push af  
2886 3a 9a 28			ld a, (.dmark)  
2889 32 65 ee			ld (debug_mark),a  
288c 3a 9b 28			ld a, (.dmark+1)  
288f 32 66 ee			ld (debug_mark+1),a  
2892 3a 9c 28			ld a, (.dmark+2)  
2895 32 67 ee			ld (debug_mark+2),a  
2898 18 03			jr .pastdmark  
289a ..			.dmark: db "BP."  
289d f1			.pastdmark: pop af  
289e			endm  
# End of macro DMARK
289e					CALLMONITOR 
289e cd 6f ee			call debug_vector  
28a1				endm  
# End of macro CALLMONITOR
28a1				endif 
28a1			 
28a1				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
28a1 cd 95 1d			call macro_dsp_valuehl 
28a4				endm 
# End of macro FORTH_DSP_VALUEHL
28a4			 
28a4			;		push hl 
28a4			 
28a4				; destroy value TOS 
28a4			 
28a4				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
28a4 cd 4d 1e			call macro_forth_dsp_pop 
28a7				endm 
# End of macro FORTH_DSP_POP
28a7			 
28a7			;		pop hl 
28a7			 
28a7 3e 00			ld a,0 
28a9 bd				cp l 
28aa 28 06			jr z, .bpset 
28ac			;		ld a, '*' 
28ac cd 0b 15			call bp_off 
28af				NEXTW 
28af c3 81 1f			jp macro_next 
28b2				endm 
# End of macro NEXTW
28b2			 
28b2			.bpset:	 
28b2				;	ld (os_view_disable), a 
28b2 cd ff 14			call bp_on 
28b5			 
28b5			 
28b5				NEXTW 
28b5 c3 81 1f			jp macro_next 
28b8				endm 
# End of macro NEXTW
28b8			 
28b8			 
28b8			.MONITOR: 
28b8			CWHEAD .MALLOC 65 "MONITOR" 7 WORD_FLAG_CODE 
28b8 55				db WORD_SYS_CORE+65             
28b9 e9 28			dw .MALLOC            
28bb 08				db 7 + 1 
28bc .. 00			db "MONITOR",0              
28c4				endm 
# End of macro CWHEAD
28c4			; | MONITOR ( -- ) Display system breakpoint/monitor | DONE 
28c4			; | | At start the current various registers will be displayed with contents. 
28c4			; | | Top right corner will show the most recent debug marker seen. 
28c4			; | | The bottom of the screen will also show the values of the data stack pointer (DSP) 
28c4			; | | and the return stack pointer (RSP). 
28c4			; | | Pressing: 
28c4			; | |    1 - Initial screen 
28c4			; | |    2 - Display a data dump of HL 
28c4			; | |    3 - Display a data dump of DE 
28c4			; | |    4 - Display a data dump of BC 
28c4			; | |    5 - Display a data dump of HL 
28c4			; | |    6 - Display a data dump of DSP 
28c4			; | |    7 - Display a data dump of RSP 
28c4			; | |    8 - Display a data dump of what is at DSP 
28c4			; | |    9 - Display a data dump of what is at RSP 
28c4			; | |    0 - Exit monitor and continue running. This will also enable break points 
28c4			; | |    * - Disable break points 
28c4			; | |    # - Enter traditional monitor mode 
28c4			; | | 
28c4			; | | Monitor Mode 
28c4			; | | ------------ 
28c4			; | | A prompt of '>' will be shown for various commands: 
28c4			; | |    D xxxx - Display a data dump starting from hex address xxxx 
28c4			; | |    C - Continue display a data dump from the last set address 
28c4			; | |    M xxxx - Set start of memory edit at address xx 
28c4			; | |    U xx - Poke the hex byte xx into the address set by M and increment the address to the next location 
28c4			; | |    G xxxx - Exec code at specific address 
28c4			; | |    Q - Return to previous 
28c4				if DEBUG_FORTH_WORDS_KEY 
28c4					DMARK "MON" 
28c4 f5				push af  
28c5 3a d9 28			ld a, (.dmark)  
28c8 32 65 ee			ld (debug_mark),a  
28cb 3a da 28			ld a, (.dmark+1)  
28ce 32 66 ee			ld (debug_mark+1),a  
28d1 3a db 28			ld a, (.dmark+2)  
28d4 32 67 ee			ld (debug_mark+2),a  
28d7 18 03			jr .pastdmark  
28d9 ..			.dmark: db "MON"  
28dc f1			.pastdmark: pop af  
28dd			endm  
# End of macro DMARK
28dd					CALLMONITOR 
28dd cd 6f ee			call debug_vector  
28e0				endm  
# End of macro CALLMONITOR
28e0				endif 
28e0			;		ld a, 0 
28e0			;		ld (os_view_disable), a 
28e0 cd ff 14			call bp_on 
28e3			 
28e3				CALLMONITOR 
28e3 cd 6f ee			call debug_vector  
28e6				endm  
# End of macro CALLMONITOR
28e6			 
28e6			;	call monitor 
28e6			 
28e6				NEXTW 
28e6 c3 81 1f			jp macro_next 
28e9				endm 
# End of macro NEXTW
28e9			 
28e9			 
28e9			.MALLOC: 
28e9			CWHEAD .MALLOC2 66 "ALLOT" 5 WORD_FLAG_CODE 
28e9 56				db WORD_SYS_CORE+66             
28ea 12 29			dw .MALLOC2            
28ec 06				db 5 + 1 
28ed .. 00			db "ALLOT",0              
28f3				endm 
# End of macro CWHEAD
28f3			; | ALLOT ( u -- u ) Allocate u bytes of memory space and push the pointer TOS  | DONE 
28f3				if DEBUG_FORTH_WORDS_KEY 
28f3					DMARK "ALL" 
28f3 f5				push af  
28f4 3a 08 29			ld a, (.dmark)  
28f7 32 65 ee			ld (debug_mark),a  
28fa 3a 09 29			ld a, (.dmark+1)  
28fd 32 66 ee			ld (debug_mark+1),a  
2900 3a 0a 29			ld a, (.dmark+2)  
2903 32 67 ee			ld (debug_mark+2),a  
2906 18 03			jr .pastdmark  
2908 ..			.dmark: db "ALL"  
290b f1			.pastdmark: pop af  
290c			endm  
# End of macro DMARK
290c					CALLMONITOR 
290c cd 6f ee			call debug_vector  
290f				endm  
# End of macro CALLMONITOR
290f				endif 
290f c3 39 29			jp .mallocc 
2912			.MALLOC2: 
2912			CWHEAD .FREE 66 "MALLOC" 6 WORD_FLAG_CODE 
2912 56				db WORD_SYS_CORE+66             
2913 50 29			dw .FREE            
2915 07				db 6 + 1 
2916 .. 00			db "MALLOC",0              
291d				endm 
# End of macro CWHEAD
291d			; | MALLOC ( u -- u ) Allocate u bytes of memory space and push the pointer TOS  | DONE 
291d				; get byte count 
291d				if DEBUG_FORTH_WORDS_KEY 
291d					DMARK "MAL" 
291d f5				push af  
291e 3a 32 29			ld a, (.dmark)  
2921 32 65 ee			ld (debug_mark),a  
2924 3a 33 29			ld a, (.dmark+1)  
2927 32 66 ee			ld (debug_mark+1),a  
292a 3a 34 29			ld a, (.dmark+2)  
292d 32 67 ee			ld (debug_mark+2),a  
2930 18 03			jr .pastdmark  
2932 ..			.dmark: db "MAL"  
2935 f1			.pastdmark: pop af  
2936			endm  
# End of macro DMARK
2936					CALLMONITOR 
2936 cd 6f ee			call debug_vector  
2939				endm  
# End of macro CALLMONITOR
2939				endif 
2939			.mallocc: 
2939				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2939 cd 95 1d			call macro_dsp_valuehl 
293c				endm 
# End of macro FORTH_DSP_VALUEHL
293c			 
293c			;		push hl 
293c			 
293c				; destroy value TOS 
293c			 
293c				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
293c cd 4d 1e			call macro_forth_dsp_pop 
293f				endm 
# End of macro FORTH_DSP_POP
293f			 
293f			;		pop hl 
293f cd d0 11			call malloc 
2942			if DEBUG_FORTH_MALLOC_GUARD 
2942 f5				push af 
2943 cd 1e 0e			call ishlzero 
2946			;		ld a, l 
2946			;		add h 
2946			;		cp 0 
2946 f1				pop af 
2947				 
2947 cc aa 4f			call z,malloc_error 
294a			endif 
294a			 
294a cd 90 1b			call forth_push_numhl 
294d				NEXTW 
294d c3 81 1f			jp macro_next 
2950				endm 
# End of macro NEXTW
2950			 
2950			.FREE: 
2950			CWHEAD .LIST 67 "FREE" 4 WORD_FLAG_CODE 
2950 57				db WORD_SYS_CORE+67             
2951 81 29			dw .LIST            
2953 05				db 4 + 1 
2954 .. 00			db "FREE",0              
2959				endm 
# End of macro CWHEAD
2959			; | FREE ( u --  ) Free memory block from malloc given u address  | DONE 
2959				if DEBUG_FORTH_WORDS_KEY 
2959					DMARK "FRE" 
2959 f5				push af  
295a 3a 6e 29			ld a, (.dmark)  
295d 32 65 ee			ld (debug_mark),a  
2960 3a 6f 29			ld a, (.dmark+1)  
2963 32 66 ee			ld (debug_mark+1),a  
2966 3a 70 29			ld a, (.dmark+2)  
2969 32 67 ee			ld (debug_mark+2),a  
296c 18 03			jr .pastdmark  
296e ..			.dmark: db "FRE"  
2971 f1			.pastdmark: pop af  
2972			endm  
# End of macro DMARK
2972					CALLMONITOR 
2972 cd 6f ee			call debug_vector  
2975				endm  
# End of macro CALLMONITOR
2975				endif 
2975				; get address 
2975			 
2975				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2975 cd 95 1d			call macro_dsp_valuehl 
2978				endm 
# End of macro FORTH_DSP_VALUEHL
2978			 
2978			;		push hl 
2978			 
2978				; destroy value TOS 
2978			 
2978				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2978 cd 4d 1e			call macro_forth_dsp_pop 
297b				endm 
# End of macro FORTH_DSP_POP
297b			 
297b			;		pop hl 
297b			if FORTH_ENABLE_MALLOCFREE 
297b cd 9a 12			call free 
297e			endif 
297e				NEXTW 
297e c3 81 1f			jp macro_next 
2981				endm 
# End of macro NEXTW
2981			.LIST: 
2981			CWHEAD .FORGET 72 "LIST" 4 WORD_FLAG_CODE 
2981 5c				db WORD_SYS_CORE+72             
2982 7d 2b			dw .FORGET            
2984 05				db 4 + 1 
2985 .. 00			db "LIST",0              
298a				endm 
# End of macro CWHEAD
298a			; | LIST ( uword -- u )    List the code to the word that is quoted (so as not to exec) on TOS | DONE 
298a			; | | The quoted word must be in upper case. 
298a			if DEBUG_FORTH_WORDS_KEY 
298a				DMARK "LST" 
298a f5				push af  
298b 3a 9f 29			ld a, (.dmark)  
298e 32 65 ee			ld (debug_mark),a  
2991 3a a0 29			ld a, (.dmark+1)  
2994 32 66 ee			ld (debug_mark+1),a  
2997 3a a1 29			ld a, (.dmark+2)  
299a 32 67 ee			ld (debug_mark+2),a  
299d 18 03			jr .pastdmark  
299f ..			.dmark: db "LST"  
29a2 f1			.pastdmark: pop af  
29a3			endm  
# End of macro DMARK
29a3				CALLMONITOR 
29a3 cd 6f ee			call debug_vector  
29a6				endm  
# End of macro CALLMONITOR
29a6			endif 
29a6			 
29a6				FORTH_DSP_VALUEHL 
29a6 cd 95 1d			call macro_dsp_valuehl 
29a9				endm 
# End of macro FORTH_DSP_VALUEHL
29a9			 
29a9 e5				push hl 
29aa				FORTH_DSP_POP 
29aa cd 4d 1e			call macro_forth_dsp_pop 
29ad				endm 
# End of macro FORTH_DSP_POP
29ad c1				pop bc 
29ae			 
29ae			; Start format of scratch string 
29ae			 
29ae 21 bb e2			ld hl, scratch 
29b1			 
29b1 3e 3a			ld a, ':' 
29b3 77				ld (hl),a 
29b4 23				inc hl 
29b5 3e 20			ld a, ' ' 
29b7 77				ld (hl), a 
29b8			 
29b8				; Get ptr to the word we need to look up 
29b8			 
29b8			;		FORTH_DSP_VALUEHL 
29b8				;v5 FORTH_DSP_VALUE 
29b8			; TODO type check 
29b8			;		inc hl    ; Skip type check  
29b8			;		push hl 
29b8			;		ex de, hl    ; put into DE 
29b8			 
29b8			 
29b8 21 54 61			ld hl, baseram 
29bb				;ld hl, baseusermem 
29bb			 
29bb e5			push hl   ; sacreifical push 
29bc			 
29bc			.ldouscanm: 
29bc e1			pop hl 
29bd			.ldouscan: 
29bd			if DEBUG_FORTH_WORDS 
29bd				DMARK "LSs" 
29bd f5				push af  
29be 3a d2 29			ld a, (.dmark)  
29c1 32 65 ee			ld (debug_mark),a  
29c4 3a d3 29			ld a, (.dmark+1)  
29c7 32 66 ee			ld (debug_mark+1),a  
29ca 3a d4 29			ld a, (.dmark+2)  
29cd 32 67 ee			ld (debug_mark+2),a  
29d0 18 03			jr .pastdmark  
29d2 ..			.dmark: db "LSs"  
29d5 f1			.pastdmark: pop af  
29d6			endm  
# End of macro DMARK
29d6				CALLMONITOR 
29d6 cd 6f ee			call debug_vector  
29d9				endm  
# End of macro CALLMONITOR
29d9			endif 
29d9			; skip dict stub 
29d9 cd be 20			call forth_tok_next 
29dc			 
29dc			 
29dc			; while we have words to look for 
29dc			 
29dc 7e			ld a, (hl)      
29dd			if DEBUG_FORTH_WORDS 
29dd				DMARK "LSk" 
29dd f5				push af  
29de 3a f2 29			ld a, (.dmark)  
29e1 32 65 ee			ld (debug_mark),a  
29e4 3a f3 29			ld a, (.dmark+1)  
29e7 32 66 ee			ld (debug_mark+1),a  
29ea 3a f4 29			ld a, (.dmark+2)  
29ed 32 67 ee			ld (debug_mark+2),a  
29f0 18 03			jr .pastdmark  
29f2 ..			.dmark: db "LSk"  
29f5 f1			.pastdmark: pop af  
29f6			endm  
# End of macro DMARK
29f6				CALLMONITOR 
29f6 cd 6f ee			call debug_vector  
29f9				endm  
# End of macro CALLMONITOR
29f9			endif 
29f9				;cp WORD_SYS_END 
29f9				;jp z, .lunotfound 
29f9			 
29f9					; if we hit non uwords then gone too far 
29f9 fe 01				cp WORD_SYS_UWORD 
29fb c2 39 2b				jp nz, .lunotfound 
29fe			 
29fe				if DEBUG_FORTH_WORDS 
29fe					DMARK "LSu" 
29fe f5				push af  
29ff 3a 13 2a			ld a, (.dmark)  
2a02 32 65 ee			ld (debug_mark),a  
2a05 3a 14 2a			ld a, (.dmark+1)  
2a08 32 66 ee			ld (debug_mark+1),a  
2a0b 3a 15 2a			ld a, (.dmark+2)  
2a0e 32 67 ee			ld (debug_mark+2),a  
2a11 18 03			jr .pastdmark  
2a13 ..			.dmark: db "LSu"  
2a16 f1			.pastdmark: pop af  
2a17			endm  
# End of macro DMARK
2a17					CALLMONITOR 
2a17 cd 6f ee			call debug_vector  
2a1a				endm  
# End of macro CALLMONITOR
2a1a				endif 
2a1a			 
2a1a					; found a uword but is it the one we want... 
2a1a			 
2a1a c5					push bc     ; uword to find is on bc 
2a1b d1					pop de 
2a1c			 
2a1c e5					push hl  ; to save the ptr 
2a1d			 
2a1d					; skip opcode 
2a1d 23					inc hl  
2a1e					; skip next ptr 
2a1e 23					inc hl  
2a1f 23					inc hl 
2a20					; skip len 
2a20 23					inc hl 
2a21			 
2a21				if DEBUG_FORTH_WORDS 
2a21					DMARK "LSc" 
2a21 f5				push af  
2a22 3a 36 2a			ld a, (.dmark)  
2a25 32 65 ee			ld (debug_mark),a  
2a28 3a 37 2a			ld a, (.dmark+1)  
2a2b 32 66 ee			ld (debug_mark+1),a  
2a2e 3a 38 2a			ld a, (.dmark+2)  
2a31 32 67 ee			ld (debug_mark+2),a  
2a34 18 03			jr .pastdmark  
2a36 ..			.dmark: db "LSc"  
2a39 f1			.pastdmark: pop af  
2a3a			endm  
# End of macro DMARK
2a3a					CALLMONITOR 
2a3a cd 6f ee			call debug_vector  
2a3d				endm  
# End of macro CALLMONITOR
2a3d				endif 
2a3d			; was exiting on the shorter of the words. swap and test is in favour of the longer word. 
2a3d			; ie. If WOO is defined first and then WO. Couldnt list WO. 
2a3d			; Nope that has gone the other way. It needs to be exact not on first zero 
2a3d			;		call strcmp 
2a3d c5					push bc 
2a3e cd a0 11				call StrictStrCmp 
2a41 c1					pop bc 
2a42 c2 bc 29				jp nz, .ldouscanm 
2a45				 
2a45			 
2a45			 
2a45					; we have a uword so push its name to the stack 
2a45			 
2a45			;	   	push hl  ; save so we can move to next dict block 
2a45 e1			pop hl 
2a46			 
2a46				if DEBUG_FORTH_WORDS 
2a46					DMARK "LSm" 
2a46 f5				push af  
2a47 3a 5b 2a			ld a, (.dmark)  
2a4a 32 65 ee			ld (debug_mark),a  
2a4d 3a 5c 2a			ld a, (.dmark+1)  
2a50 32 66 ee			ld (debug_mark+1),a  
2a53 3a 5d 2a			ld a, (.dmark+2)  
2a56 32 67 ee			ld (debug_mark+2),a  
2a59 18 03			jr .pastdmark  
2a5b ..			.dmark: db "LSm"  
2a5e f1			.pastdmark: pop af  
2a5f			endm  
# End of macro DMARK
2a5f					CALLMONITOR 
2a5f cd 6f ee			call debug_vector  
2a62				endm  
# End of macro CALLMONITOR
2a62				endif 
2a62			 
2a62					; skip opcode 
2a62 23					inc hl  
2a63					; skip next ptr 
2a63 23					inc hl  
2a64 23					inc hl 
2a65					; skip len 
2a65 7e					ld a, (hl)   ; save length to add 
2a66				if DEBUG_FORTH_WORDS 
2a66					DMARK "LS2" 
2a66 f5				push af  
2a67 3a 7b 2a			ld a, (.dmark)  
2a6a 32 65 ee			ld (debug_mark),a  
2a6d 3a 7c 2a			ld a, (.dmark+1)  
2a70 32 66 ee			ld (debug_mark+1),a  
2a73 3a 7d 2a			ld a, (.dmark+2)  
2a76 32 67 ee			ld (debug_mark+2),a  
2a79 18 03			jr .pastdmark  
2a7b ..			.dmark: db "LS2"  
2a7e f1			.pastdmark: pop af  
2a7f			endm  
# End of macro DMARK
2a7f					CALLMONITOR 
2a7f cd 6f ee			call debug_vector  
2a82				endm  
# End of macro CALLMONITOR
2a82				endif 
2a82			 
2a82					; save this location 
2a82				 
2a82 e5					push hl 
2a83			 
2a83 23					inc hl 
2a84 11 bd e2				ld de, scratch+2 
2a87 4f					ld c, a 
2a88 06 00				ld b, 0 
2a8a			 
2a8a				if DEBUG_FORTH_WORDS 
2a8a					DMARK "LSn" 
2a8a f5				push af  
2a8b 3a 9f 2a			ld a, (.dmark)  
2a8e 32 65 ee			ld (debug_mark),a  
2a91 3a a0 2a			ld a, (.dmark+1)  
2a94 32 66 ee			ld (debug_mark+1),a  
2a97 3a a1 2a			ld a, (.dmark+2)  
2a9a 32 67 ee			ld (debug_mark+2),a  
2a9d 18 03			jr .pastdmark  
2a9f ..			.dmark: db "LSn"  
2aa2 f1			.pastdmark: pop af  
2aa3			endm  
# End of macro DMARK
2aa3					CALLMONITOR 
2aa3 cd 6f ee			call debug_vector  
2aa6				endm  
# End of macro CALLMONITOR
2aa6				endif 
2aa6			 
2aa6					; copy uword name to scratch 
2aa6			 
2aa6			;		ldir 
2aa6			.licplw:	; copy uword name to scratch converting to lower case as we go 
2aa6 ed a0				ldi 
2aa8 1b					dec de 
2aa9 1a					ld a, (de) 
2aaa cd 73 10				call to_lower 
2aad 12					ld (de),a 
2aae 13					inc de 
2aaf 3e 00				ld a, 0 
2ab1 b9					cp c 
2ab2 20 f2				jr nz, .licplw 
2ab4			 
2ab4			 
2ab4			 
2ab4 1b					dec de 
2ab5 3e 20				ld a, ' '    ; change null to space 
2ab7 12					ld (de), a 
2ab8			 
2ab8 13					inc de 
2ab9			 
2ab9 d5					push de 
2aba c1					pop bc     ; move scratch pointer to end of word name and save it 
2abb			 
2abb e1					pop hl 
2abc 7e					ld a, (hl) 
2abd					;inc hl 
2abd					; skip word string 
2abd cd f5 0d				call addatohl 
2ac0			 
2ac0 23					inc hl 
2ac1			 
2ac1				if DEBUG_FORTH_WORDS 
2ac1					DMARK "LS3" 
2ac1 f5				push af  
2ac2 3a d6 2a			ld a, (.dmark)  
2ac5 32 65 ee			ld (debug_mark),a  
2ac8 3a d7 2a			ld a, (.dmark+1)  
2acb 32 66 ee			ld (debug_mark+1),a  
2ace 3a d8 2a			ld a, (.dmark+2)  
2ad1 32 67 ee			ld (debug_mark+2),a  
2ad4 18 03			jr .pastdmark  
2ad6 ..			.dmark: db "LS3"  
2ad9 f1			.pastdmark: pop af  
2ada			endm  
# End of macro DMARK
2ada					CALLMONITOR 
2ada cd 6f ee			call debug_vector  
2add				endm  
# End of macro CALLMONITOR
2add				endif 
2add					; should now be at the start of the machine code to setup the eval of the uword 
2add					; now locate the ptr to the string defintion 
2add			 
2add					; skip ld hl, 
2add					; then load the ptr 
2add			; TODO use get from hl ptr 
2add 23					inc hl 
2ade 5e					ld e, (hl) 
2adf 23					inc hl 
2ae0 56					ld d, (hl) 
2ae1 eb					ex de, hl 
2ae2			 
2ae2			 
2ae2				if DEBUG_FORTH_WORDS 
2ae2					DMARK "LSt" 
2ae2 f5				push af  
2ae3 3a f7 2a			ld a, (.dmark)  
2ae6 32 65 ee			ld (debug_mark),a  
2ae9 3a f8 2a			ld a, (.dmark+1)  
2aec 32 66 ee			ld (debug_mark+1),a  
2aef 3a f9 2a			ld a, (.dmark+2)  
2af2 32 67 ee			ld (debug_mark+2),a  
2af5 18 03			jr .pastdmark  
2af7 ..			.dmark: db "LSt"  
2afa f1			.pastdmark: pop af  
2afb			endm  
# End of macro DMARK
2afb					CALLMONITOR 
2afb cd 6f ee			call debug_vector  
2afe				endm  
# End of macro CALLMONITOR
2afe				endif 
2afe			 
2afe			; cant push right now due to tokenised strings  
2afe			 
2afe			; get the destination of where to copy this definition to. 
2afe			 
2afe c5					push bc 
2aff d1					pop de 
2b00			 
2b00 7e			.listl:         ld a,(hl) 
2b01 fe 00				cp 0 
2b03 28 09				jr z, .lreplsp     ; replace zero with space 
2b05					;cp FORTH_END_BUFFER 
2b05 fe 3b				cp ';'    ; No end buffer flag but the ';' will be a good sign of the end of definition 
2b07 28 0a				jr z, .listdone    ; at end of uword defination to close of scratch and finish 
2b09				 
2b09					; just copy this char as is then 
2b09			 
2b09 12					ld (de), a 
2b0a			 
2b0a 23			.listnxt:	inc hl 
2b0b 13					inc de 
2b0c 18 f2				jr .listl 
2b0e			 
2b0e 3e 20		.lreplsp:	ld a,' ' 
2b10 12					ld (de), a 
2b11 18 f7				jr .listnxt 
2b13			 
2b13			; close up uword def 
2b13			 
2b13			.listdone: 
2b13 12					ld (de), a 
2b14 13					inc de 
2b15 3e 00				ld a, 0 
2b17 12					ld (de), a 
2b18			 
2b18			; now have def so clean up and push to stack 
2b18			 
2b18 21 bb e2				ld hl, scratch 
2b1b				if DEBUG_FORTH_WORDS 
2b1b					DMARK "Ltp" 
2b1b f5				push af  
2b1c 3a 30 2b			ld a, (.dmark)  
2b1f 32 65 ee			ld (debug_mark),a  
2b22 3a 31 2b			ld a, (.dmark+1)  
2b25 32 66 ee			ld (debug_mark+1),a  
2b28 3a 32 2b			ld a, (.dmark+2)  
2b2b 32 67 ee			ld (debug_mark+2),a  
2b2e 18 03			jr .pastdmark  
2b30 ..			.dmark: db "Ltp"  
2b33 f1			.pastdmark: pop af  
2b34			endm  
# End of macro DMARK
2b34					CALLMONITOR 
2b34 cd 6f ee			call debug_vector  
2b37				endm  
# End of macro CALLMONITOR
2b37				endif 
2b37			 
2b37 18 1f			jr .listpush 
2b39			 
2b39			;.lnuword:	pop hl 
2b39			;		call forth_tok_next 
2b39			;		jp .ldouscan  
2b39			 
2b39			.lunotfound:		  
2b39			 
2b39				if DEBUG_FORTH_WORDS 
2b39					DMARK "LSn" 
2b39 f5				push af  
2b3a 3a 4e 2b			ld a, (.dmark)  
2b3d 32 65 ee			ld (debug_mark),a  
2b40 3a 4f 2b			ld a, (.dmark+1)  
2b43 32 66 ee			ld (debug_mark+1),a  
2b46 3a 50 2b			ld a, (.dmark+2)  
2b49 32 67 ee			ld (debug_mark+2),a  
2b4c 18 03			jr .pastdmark  
2b4e ..			.dmark: db "LSn"  
2b51 f1			.pastdmark: pop af  
2b52			endm  
# End of macro DMARK
2b52					CALLMONITOR 
2b52 cd 6f ee			call debug_vector  
2b55				endm  
# End of macro CALLMONITOR
2b55				endif 
2b55			 
2b55					 
2b55			;		FORTH_DSP_POP 
2b55			;		ld hl, .luno 
2b55			 
2b55					NEXTW			 
2b55 c3 81 1f			jp macro_next 
2b58				endm 
# End of macro NEXTW
2b58			 
2b58			.listpush: 
2b58				if DEBUG_FORTH_WORDS 
2b58					DMARK "LS>" 
2b58 f5				push af  
2b59 3a 6d 2b			ld a, (.dmark)  
2b5c 32 65 ee			ld (debug_mark),a  
2b5f 3a 6e 2b			ld a, (.dmark+1)  
2b62 32 66 ee			ld (debug_mark+1),a  
2b65 3a 6f 2b			ld a, (.dmark+2)  
2b68 32 67 ee			ld (debug_mark+2),a  
2b6b 18 03			jr .pastdmark  
2b6d ..			.dmark: db "LS>"  
2b70 f1			.pastdmark: pop af  
2b71			endm  
# End of macro DMARK
2b71					CALLMONITOR 
2b71 cd 6f ee			call debug_vector  
2b74				endm  
# End of macro CALLMONITOR
2b74				endif 
2b74 cd fe 1b				call forth_push_str 
2b77			 
2b77			 
2b77			 
2b77					NEXTW 
2b77 c3 81 1f			jp macro_next 
2b7a				endm 
# End of macro NEXTW
2b7a			 
2b7a			;.luno:    db "Word not found",0 
2b7a			 
2b7a			 
2b7a			 
2b7a			 
2b7a			 
2b7a			;		push hl   ; save pointer to start of uword def string 
2b7a			; 
2b7a			;; look for FORTH_EOL_LINE 
2b7a			;		ld a, FORTH_END_BUFFER 
2b7a			;		call strlent 
2b7a			; 
2b7a			;		inc hl		 ; space for coln def 
2b7a			;		inc hl 
2b7a			;		inc hl          ; space for terms 
2b7a			;		inc hl 
2b7a			; 
2b7a			;		ld a, 20   ; TODO get actual length 
2b7a			;		call addatohl    ; include a random amount of room for the uword name 
2b7a			; 
2b7a			;		 
2b7a			;	if DEBUG_FORTH_WORDS 
2b7a			;		DMARK "Lt1" 
2b7a			;		CALLMONITOR 
2b7a			;	endif 
2b7a			;		 
2b7a			; 
2b7a			;; malloc space for the string because we cant change it 
2b7a			; 
2b7a			;		call malloc 
2b7a			;	if DEBUG_FORTH_MALLOC_GUARD 
2b7a			;		push af 
2b7a			;		call ishlzero 
2b7a			;		pop af 
2b7a			;		 
2b7a			;		call z,malloc_error 
2b7a			;	endif 
2b7a			; 
2b7a			;	if DEBUG_FORTH_WORDS 
2b7a			;		DMARK "Lt2" 
2b7a			;		CALLMONITOR 
2b7a			;	endif 
2b7a			;		pop de 
2b7a			;		push hl    ; push the malloc to release later 
2b7a			;		push hl   ;  push back a copy for the later stack push 
2b7a			;		 
2b7a			;; copy the string swapping out the zero terms for spaces 
2b7a			; 
2b7a			;		; de has our source 
2b7a			;		; hl has our dest 
2b7a			; 
2b7a			;; add the coln def 
2b7a			; 
2b7a			;		ld a, ':' 
2b7a			;		ld (hl), a 
2b7a			;		inc hl 
2b7a			;		ld a, ' ' 
2b7a			;		ld (hl), a 
2b7a			;		inc hl 
2b7a			; 
2b7a			;; add the uname word 
2b7a			;		push de   ; save our string for now 
2b7a			;		ex de, hl 
2b7a			; 
2b7a			;		FORTH_DSP_VALUE 
2b7a			;		;v5 FORTH_DSP_VALUE 
2b7a			; 
2b7a			;		inc hl   ; skip type but we know by now this is OK 
2b7a			; 
2b7a			;.luword:	ld a,(hl) 
2b7a			;		cp 0 
2b7a			;		jr z, .luword2 
2b7a			;		ld (de), a 
2b7a			;		inc de 
2b7a			;		inc hl 
2b7a			;		jr .luword 
2b7a			; 
2b7a			;.luword2:	ld a, ' ' 
2b7a			;		ld (de), a 
2b7a			;;		inc hl 
2b7a			;;		inc de 
2b7a			;;		ld (de), a 
2b7a			;;		inc hl 
2b7a			;		inc de 
2b7a			; 
2b7a			;		ex de, hl 
2b7a			;		pop de 
2b7a			;		 
2b7a			;		 
2b7a			; 
2b7a			;; detoken that string and copy it 
2b7a			; 
2b7a			;	if DEBUG_FORTH_WORDS 
2b7a			;		DMARK "Lt2" 
2b7a			;		CALLMONITOR 
2b7a			;	endif 
2b7a			;.ldetok:	ld a, (de) 
2b7a			;		cp FORTH_END_BUFFER 
2b7a			;		jr z, .ldetokend 
2b7a			;		; swap out any zero term for space 
2b7a			;		cp 0 
2b7a			;		jr nz, .ldetoknext 
2b7a			;		ld a, ' ' 
2b7a			; 
2b7a			;	if DEBUG_FORTH_WORDS 
2b7a			;		DMARK "LtS" 
2b7a			;		CALLMONITOR 
2b7a			;	endif 
2b7a			;.ldetoknext:	ld (hl), a 
2b7a			;		inc de 
2b7a			;		inc hl 
2b7a			;		jr .ldetok 
2b7a			; 
2b7a			;.ldetokend:	ld a, 0    ; replace forth eol with string term for pushing 
2b7a			;		ld (hl), a  
2b7a			; 
2b7a			;; free that temp malloc 
2b7a			; 
2b7a			;		pop hl    
2b7a			; 
2b7a			;	if DEBUG_FORTH_WORDS 
2b7a			;		DMARK "Lt4" 
2b7a			;		CALLMONITOR 
2b7a			;	endif 
2b7a			;		call forth_apushstrhl 
2b7a			; 
2b7a			;		; get rid of temp malloc area 
2b7a			; 
2b7a			;		pop hl 
2b7a			;		call free 
2b7a			; 
2b7a			;		jr .ludone 
2b7a			; 
2b7a			;.lnuword:	pop hl 
2b7a			;		call forth_tok_next 
2b7a			;		jp .ldouscan  
2b7a			; 
2b7a			;.ludone:		 pop hl 
2b7a			; 
2b7a					NEXTW 
2b7a c3 81 1f			jp macro_next 
2b7d				endm 
# End of macro NEXTW
2b7d			 
2b7d			.FORGET: 
2b7d				CWHEAD .NOP 73 "FORGET" 6 WORD_FLAG_CODE 
2b7d 5d				db WORD_SYS_CORE+73             
2b7e f6 2b			dw .NOP            
2b80 07				db 6 + 1 
2b81 .. 00			db "FORGET",0              
2b88				endm 
# End of macro CWHEAD
2b88			; | FORGET ( uword -- )    Forget the uword on TOS | DONE 
2b88			; | | Will flag the word's op code to be deleted as well as replace the first char of the word with '_'. Quoted uword name must be in caps. 
2b88			; | |  
2b88			; | | e.g. "MORE" forget 
2b88					if DEBUG_FORTH_WORDS_KEY 
2b88						DMARK "FRG" 
2b88 f5				push af  
2b89 3a 9d 2b			ld a, (.dmark)  
2b8c 32 65 ee			ld (debug_mark),a  
2b8f 3a 9e 2b			ld a, (.dmark+1)  
2b92 32 66 ee			ld (debug_mark+1),a  
2b95 3a 9f 2b			ld a, (.dmark+2)  
2b98 32 67 ee			ld (debug_mark+2),a  
2b9b 18 03			jr .pastdmark  
2b9d ..			.dmark: db "FRG"  
2ba0 f1			.pastdmark: pop af  
2ba1			endm  
# End of macro DMARK
2ba1						CALLMONITOR 
2ba1 cd 6f ee			call debug_vector  
2ba4				endm  
# End of macro CALLMONITOR
2ba4					endif 
2ba4			 
2ba4				; find uword 
2ba4			        ; update start of word with "_" 
2ba4				; replace uword with deleted flag 
2ba4			 
2ba4			 
2ba4			;	if DEBUG_FORTH_WORDS 
2ba4			;		DMARK "FOG" 
2ba4			;		CALLMONITOR 
2ba4			;	endif 
2ba4			 
2ba4			 
2ba4					; Get ptr to the word we need to look up 
2ba4			 
2ba4					FORTH_DSP_VALUEHL 
2ba4 cd 95 1d			call macro_dsp_valuehl 
2ba7				endm 
# End of macro FORTH_DSP_VALUEHL
2ba7					;v5 FORTH_DSP_VALUE 
2ba7				; TODO type check 
2ba7			;		inc hl    ; Skip type check  
2ba7 e5					push hl 
2ba8 c1					pop bc 
2ba9			;		ex de, hl    ; put into DE 
2ba9			 
2ba9			 
2ba9 21 54 61				ld hl, baseram 
2bac					;ld hl, baseusermem 
2bac			 
2bac				; skip dict stub 
2bac			;	call forth_tok_next 
2bac e5			push hl   ; sacreifical push 
2bad			 
2bad			.fldouscanm: 
2bad e1				pop hl 
2bae			.fldouscan: 
2bae			;	if DEBUG_FORTH_WORDS 
2bae			;		DMARK "LSs" 
2bae			;		CALLMONITOR 
2bae			;	endif 
2bae				; skip dict stub 
2bae cd be 20				call forth_tok_next 
2bb1			 
2bb1			 
2bb1			; while we have words to look for 
2bb1			 
2bb1 7e				ld a, (hl)      
2bb2			;	if DEBUG_FORTH_WORDS 
2bb2			;		DMARK "LSk" 
2bb2			;		CALLMONITOR 
2bb2			;	endif 
2bb2 fe 00				cp WORD_SYS_END 
2bb4 ca f0 2b				jp z, .flunotfound 
2bb7 fe 01				cp WORD_SYS_UWORD 
2bb9 c2 ae 2b				jp nz, .fldouscan 
2bbc			 
2bbc			;	if DEBUG_FORTH_WORDS 
2bbc			;		DMARK "LSu" 
2bbc			;		CALLMONITOR 
2bbc			;	endif 
2bbc			 
2bbc					; found a uword but is it the one we want... 
2bbc			 
2bbc c5					push bc     ; uword to find is on bc 
2bbd d1					pop de 
2bbe			 
2bbe e5					push hl  ; to save the ptr 
2bbf			 
2bbf					; skip opcode 
2bbf 23					inc hl  
2bc0					; skip next ptr 
2bc0 23					inc hl  
2bc1 23					inc hl 
2bc2					; skip len 
2bc2 23					inc hl 
2bc3			 
2bc3			;	if DEBUG_FORTH_WORDS 
2bc3			;		DMARK "LSc" 
2bc3			;		CALLMONITOR 
2bc3			;	endif 
2bc3 cd 93 11				call strcmp 
2bc6 c2 ad 2b				jp nz, .fldouscanm 
2bc9			; 
2bc9			; 
2bc9			;; while we have words to look for 
2bc9			; 
2bc9			;.fdouscan:	ld a, (hl)      
2bc9			;	if DEBUG_FORTH_WORDS 
2bc9			;		DMARK "LSs" 
2bc9			;		CALLMONITOR 
2bc9			;	endif 
2bc9			;		cp WORD_SYS_END 
2bc9			;		jp z, .fudone 
2bc9			;		cp WORD_SYS_UWORD 
2bc9			;		jp nz, .fnuword 
2bc9			; 
2bc9			;	if DEBUG_FORTH_WORDS 
2bc9			;		DMARK "FGu" 
2bc9			;		CALLMONITOR 
2bc9			;	endif 
2bc9			; 
2bc9			;		; found a uword but is it the one we want... 
2bc9			; 
2bc9			; 
2bc9			;	        pop de   ; get back the dsp name 
2bc9			;		push de 
2bc9			; 
2bc9			;		push hl  ; to save the ptr 
2bc9			; 
2bc9			;		; skip opcode 
2bc9			;		inc hl  
2bc9			;		; skip next ptr 
2bc9			;		inc hl  
2bc9			;		inc hl 
2bc9			;		; skip len 
2bc9			;		inc hl 
2bc9			; 
2bc9			;	if DEBUG_FORTH_WORDS 
2bc9			;		DMARK "FGc" 
2bc9			;		CALLMONITOR 
2bc9			;	endif 
2bc9			;		call strcmp 
2bc9			;		jp nz, .fnuword 
2bc9			 
2bc9			 
2bc9 e1			pop hl 
2bca			 
2bca				 
2bca				if DEBUG_FORTH_WORDS 
2bca					DMARK "FGm" 
2bca f5				push af  
2bcb 3a df 2b			ld a, (.dmark)  
2bce 32 65 ee			ld (debug_mark),a  
2bd1 3a e0 2b			ld a, (.dmark+1)  
2bd4 32 66 ee			ld (debug_mark+1),a  
2bd7 3a e1 2b			ld a, (.dmark+2)  
2bda 32 67 ee			ld (debug_mark+2),a  
2bdd 18 03			jr .pastdmark  
2bdf ..			.dmark: db "FGm"  
2be2 f1			.pastdmark: pop af  
2be3			endm  
# End of macro DMARK
2be3					CALLMONITOR 
2be3 cd 6f ee			call debug_vector  
2be6				endm  
# End of macro CALLMONITOR
2be6				endif 
2be6			 
2be6			 
2be6			 
2be6					; we have a uword so push its name to the stack 
2be6			 
2be6			;	   	push hl  ; save so we can move to next dict block 
2be6			;pop hl 
2be6			 
2be6					; update opcode to deleted 
2be6 3e 03				ld a, WORD_SYS_DELETED 
2be8 77					ld (hl), a 
2be9			 
2be9 23					inc hl  
2bea					; skip next ptr 
2bea 23					inc hl  
2beb 23					inc hl 
2bec					; skip len 
2bec 23					inc hl 
2bed			 
2bed					; TODO change parser to skip deleted words but for now mark it out 
2bed 3e 5f				ld a, "_" 
2bef 77					ld  (hl),a 
2bf0			 
2bf0			;		jr .fudone 
2bf0			; 
2bf0			;.fnuword:	pop hl 
2bf0			;		call forth_tok_next 
2bf0			;		jp .fdouscan  
2bf0			 
2bf0			.flunotfound:		  
2bf0			 
2bf0			 
2bf0					 
2bf0					FORTH_DSP_POP 
2bf0 cd 4d 1e			call macro_forth_dsp_pop 
2bf3				endm 
# End of macro FORTH_DSP_POP
2bf3			;		ld hl, .luno 
2bf3			;.fudone:		 pop hl 
2bf3					NEXTW 
2bf3 c3 81 1f			jp macro_next 
2bf6				endm 
# End of macro NEXTW
2bf6			.NOP: 
2bf6				CWHEAD .COMO 77 "NOP" 3 WORD_FLAG_CODE 
2bf6 61				db WORD_SYS_CORE+77             
2bf7 1d 2c			dw .COMO            
2bf9 04				db 3 + 1 
2bfa .. 00			db "NOP",0              
2bfe				endm 
# End of macro CWHEAD
2bfe			; | NOP (  --  ) Do nothing | DONE 
2bfe					if DEBUG_FORTH_WORDS_KEY 
2bfe						DMARK "NOP" 
2bfe f5				push af  
2bff 3a 13 2c			ld a, (.dmark)  
2c02 32 65 ee			ld (debug_mark),a  
2c05 3a 14 2c			ld a, (.dmark+1)  
2c08 32 66 ee			ld (debug_mark+1),a  
2c0b 3a 15 2c			ld a, (.dmark+2)  
2c0e 32 67 ee			ld (debug_mark+2),a  
2c11 18 03			jr .pastdmark  
2c13 ..			.dmark: db "NOP"  
2c16 f1			.pastdmark: pop af  
2c17			endm  
# End of macro DMARK
2c17						CALLMONITOR 
2c17 cd 6f ee			call debug_vector  
2c1a				endm  
# End of macro CALLMONITOR
2c1a					endif 
2c1a				       NEXTW 
2c1a c3 81 1f			jp macro_next 
2c1d				endm 
# End of macro NEXTW
2c1d			.COMO: 
2c1d				CWHEAD .COMC 90 "(" 1 WORD_FLAG_CODE 
2c1d 6e				db WORD_SYS_CORE+90             
2c1e 6f 2c			dw .COMC            
2c20 02				db 1 + 1 
2c21 .. 00			db "(",0              
2c23				endm 
# End of macro CWHEAD
2c23			; | ( ( -- )  Start of comment | DONE 
2c23			 
2c23			 
2c23 2a bc e5				ld hl, ( os_tok_ptr) 
2c26 11 6a 2c			ld de, .closepar 
2c29					 
2c29					if DEBUG_FORTH_WORDS 
2c29						DMARK ").." 
2c29 f5				push af  
2c2a 3a 3e 2c			ld a, (.dmark)  
2c2d 32 65 ee			ld (debug_mark),a  
2c30 3a 3f 2c			ld a, (.dmark+1)  
2c33 32 66 ee			ld (debug_mark+1),a  
2c36 3a 40 2c			ld a, (.dmark+2)  
2c39 32 67 ee			ld (debug_mark+2),a  
2c3c 18 03			jr .pastdmark  
2c3e ..			.dmark: db ").."  
2c41 f1			.pastdmark: pop af  
2c42			endm  
# End of macro DMARK
2c42						CALLMONITOR 
2c42 cd 6f ee			call debug_vector  
2c45				endm  
# End of macro CALLMONITOR
2c45					endif 
2c45 cd 88 20			call findnexttok  
2c48			 
2c48					if DEBUG_FORTH_WORDS 
2c48						DMARK "IF5" 
2c48 f5				push af  
2c49 3a 5d 2c			ld a, (.dmark)  
2c4c 32 65 ee			ld (debug_mark),a  
2c4f 3a 5e 2c			ld a, (.dmark+1)  
2c52 32 66 ee			ld (debug_mark+1),a  
2c55 3a 5f 2c			ld a, (.dmark+2)  
2c58 32 67 ee			ld (debug_mark+2),a  
2c5b 18 03			jr .pastdmark  
2c5d ..			.dmark: db "IF5"  
2c60 f1			.pastdmark: pop af  
2c61			endm  
# End of macro DMARK
2c61						CALLMONITOR 
2c61 cd 6f ee			call debug_vector  
2c64				endm  
# End of macro CALLMONITOR
2c64					endif 
2c64				; replace below with ) exec using tok_ptr 
2c64 22 bc e5			ld (os_tok_ptr), hl 
2c67 c3 0a 20			jp exec1 
2c6a			 
2c6a .. 00			.closepar:   db ")",0 
2c6c			 
2c6c				       NEXTW 
2c6c c3 81 1f			jp macro_next 
2c6f				endm 
# End of macro NEXTW
2c6f			.COMC: 
2c6f				CWHEAD .SCRATCH 91 ")" 1 WORD_FLAG_CODE 
2c6f 6f				db WORD_SYS_CORE+91             
2c70 78 2c			dw .SCRATCH            
2c72 02				db 1 + 1 
2c73 .. 00			db ")",0              
2c75				endm 
# End of macro CWHEAD
2c75			; | ) ( -- )  End of comment |  DONE  
2c75				       NEXTW 
2c75 c3 81 1f			jp macro_next 
2c78				endm 
# End of macro NEXTW
2c78			 
2c78			.SCRATCH: 
2c78				CWHEAD .INC 91 "SCRATCH" 7 WORD_FLAG_CODE 
2c78 6f				db WORD_SYS_CORE+91             
2c79 b3 2c			dw .INC            
2c7b 08				db 7 + 1 
2c7c .. 00			db "SCRATCH",0              
2c84				endm 
# End of macro CWHEAD
2c84			; | SCRATCH ( u -- addr ) Pushes address of offset u to stack | DONE 
2c84			; | | The scratch area provides 32 word array. Can be used as single byte or as a word by passing the offset on stack. Pushes the resulting address to stack.  
2c84			; | | When used with the direct storage writing/malloc and the !@ or word versions it is possible to construct an expanded and flexible variable system 
2c84			; | |  
2c84			; | | e.g.    : score $00 scratch ; 
2c84			; | |  
2c84			; | | $00 score ! 
2c84			; | | $01 score +! 
2c84			; | |  
2c84			; | | e.g.   : varword $0a scratch ;  
2c84			; | | 
2c84			; | | $8000 varword ! 
2c84					if DEBUG_FORTH_WORDS_KEY 
2c84						DMARK "SCR" 
2c84 f5				push af  
2c85 3a 99 2c			ld a, (.dmark)  
2c88 32 65 ee			ld (debug_mark),a  
2c8b 3a 9a 2c			ld a, (.dmark+1)  
2c8e 32 66 ee			ld (debug_mark+1),a  
2c91 3a 9b 2c			ld a, (.dmark+2)  
2c94 32 67 ee			ld (debug_mark+2),a  
2c97 18 03			jr .pastdmark  
2c99 ..			.dmark: db "SCR"  
2c9c f1			.pastdmark: pop af  
2c9d			endm  
# End of macro DMARK
2c9d						CALLMONITOR 
2c9d cd 6f ee			call debug_vector  
2ca0				endm  
# End of macro CALLMONITOR
2ca0					endif 
2ca0			 
2ca0					FORTH_DSP_VALUEHL 
2ca0 cd 95 1d			call macro_dsp_valuehl 
2ca3				endm 
# End of macro FORTH_DSP_VALUEHL
2ca3				 
2ca3					FORTH_DSP_POP 
2ca3 cd 4d 1e			call macro_forth_dsp_pop 
2ca6				endm 
# End of macro FORTH_DSP_POP
2ca6			 
2ca6 7d					ld a, l 
2ca7 21 e0 e7				ld hl, os_var_array 
2caa cd f5 0d				call addatohl 
2cad			 
2cad cd 90 1b				call forth_push_numhl 
2cb0			 
2cb0				       NEXTW 
2cb0 c3 81 1f			jp macro_next 
2cb3				endm 
# End of macro NEXTW
2cb3			 
2cb3			.INC: 
2cb3				CWHEAD .DEC 91 "+!" 2 WORD_FLAG_CODE 
2cb3 6f				db WORD_SYS_CORE+91             
2cb4 09 2d			dw .DEC            
2cb6 03				db 2 + 1 
2cb7 .. 00			db "+!",0              
2cba				endm 
# End of macro CWHEAD
2cba			; | +! ( u a -- )  Increment byte at address a by the value u | DONE 
2cba					if DEBUG_FORTH_WORDS_KEY 
2cba						DMARK "+s_" 
2cba f5				push af  
2cbb 3a cf 2c			ld a, (.dmark)  
2cbe 32 65 ee			ld (debug_mark),a  
2cc1 3a d0 2c			ld a, (.dmark+1)  
2cc4 32 66 ee			ld (debug_mark+1),a  
2cc7 3a d1 2c			ld a, (.dmark+2)  
2cca 32 67 ee			ld (debug_mark+2),a  
2ccd 18 03			jr .pastdmark  
2ccf ..			.dmark: db "+s_"  
2cd2 f1			.pastdmark: pop af  
2cd3			endm  
# End of macro DMARK
2cd3						CALLMONITOR 
2cd3 cd 6f ee			call debug_vector  
2cd6				endm  
# End of macro CALLMONITOR
2cd6					endif 
2cd6			 
2cd6					FORTH_DSP_VALUEHL 
2cd6 cd 95 1d			call macro_dsp_valuehl 
2cd9				endm 
# End of macro FORTH_DSP_VALUEHL
2cd9			 
2cd9 e5					push hl   ; save address 
2cda			 
2cda					FORTH_DSP_POP 
2cda cd 4d 1e			call macro_forth_dsp_pop 
2cdd				endm 
# End of macro FORTH_DSP_POP
2cdd			 
2cdd					FORTH_DSP_VALUEHL 
2cdd cd 95 1d			call macro_dsp_valuehl 
2ce0				endm 
# End of macro FORTH_DSP_VALUEHL
2ce0			 
2ce0 e5					push hl 
2ce1					FORTH_DSP_POP 
2ce1 cd 4d 1e			call macro_forth_dsp_pop 
2ce4				endm 
# End of macro FORTH_DSP_POP
2ce4 e1					pop hl 
2ce5			 
2ce5					; hl contains value to add to byte at a 
2ce5				 
2ce5 eb					ex de, hl 
2ce6			 
2ce6 e1					pop hl 
2ce7			 
2ce7					if DEBUG_FORTH_WORDS 
2ce7						DMARK "INC" 
2ce7 f5				push af  
2ce8 3a fc 2c			ld a, (.dmark)  
2ceb 32 65 ee			ld (debug_mark),a  
2cee 3a fd 2c			ld a, (.dmark+1)  
2cf1 32 66 ee			ld (debug_mark+1),a  
2cf4 3a fe 2c			ld a, (.dmark+2)  
2cf7 32 67 ee			ld (debug_mark+2),a  
2cfa 18 03			jr .pastdmark  
2cfc ..			.dmark: db "INC"  
2cff f1			.pastdmark: pop af  
2d00			endm  
# End of macro DMARK
2d00						CALLMONITOR 
2d00 cd 6f ee			call debug_vector  
2d03				endm  
# End of macro CALLMONITOR
2d03					endif 
2d03			 
2d03 7e					ld a,(hl) 
2d04 83					add e 
2d05 77					ld (hl),a 
2d06			 
2d06			 
2d06			 
2d06				       NEXTW 
2d06 c3 81 1f			jp macro_next 
2d09				endm 
# End of macro NEXTW
2d09			 
2d09			.DEC: 
2d09				CWHEAD .INC2 91 "-!" 2 WORD_FLAG_CODE 
2d09 6f				db WORD_SYS_CORE+91             
2d0a 5d 2d			dw .INC2            
2d0c 03				db 2 + 1 
2d0d .. 00			db "-!",0              
2d10				endm 
# End of macro CWHEAD
2d10			; | -! ( u a -- )  Decrement byte at address a by the value u | DONE 
2d10					if DEBUG_FORTH_WORDS_KEY 
2d10						DMARK "-s_" 
2d10 f5				push af  
2d11 3a 25 2d			ld a, (.dmark)  
2d14 32 65 ee			ld (debug_mark),a  
2d17 3a 26 2d			ld a, (.dmark+1)  
2d1a 32 66 ee			ld (debug_mark+1),a  
2d1d 3a 27 2d			ld a, (.dmark+2)  
2d20 32 67 ee			ld (debug_mark+2),a  
2d23 18 03			jr .pastdmark  
2d25 ..			.dmark: db "-s_"  
2d28 f1			.pastdmark: pop af  
2d29			endm  
# End of macro DMARK
2d29						CALLMONITOR 
2d29 cd 6f ee			call debug_vector  
2d2c				endm  
# End of macro CALLMONITOR
2d2c					endif 
2d2c			 
2d2c					FORTH_DSP_VALUEHL 
2d2c cd 95 1d			call macro_dsp_valuehl 
2d2f				endm 
# End of macro FORTH_DSP_VALUEHL
2d2f			 
2d2f e5					push hl   ; save address 
2d30			 
2d30					FORTH_DSP_POP 
2d30 cd 4d 1e			call macro_forth_dsp_pop 
2d33				endm 
# End of macro FORTH_DSP_POP
2d33			 
2d33					FORTH_DSP_VALUEHL 
2d33 cd 95 1d			call macro_dsp_valuehl 
2d36				endm 
# End of macro FORTH_DSP_VALUEHL
2d36			 
2d36					; hl contains value to add to byte at a 
2d36				 
2d36 eb					ex de, hl 
2d37			 
2d37 e1					pop hl 
2d38			 
2d38					if DEBUG_FORTH_WORDS 
2d38						DMARK "DEC" 
2d38 f5				push af  
2d39 3a 4d 2d			ld a, (.dmark)  
2d3c 32 65 ee			ld (debug_mark),a  
2d3f 3a 4e 2d			ld a, (.dmark+1)  
2d42 32 66 ee			ld (debug_mark+1),a  
2d45 3a 4f 2d			ld a, (.dmark+2)  
2d48 32 67 ee			ld (debug_mark+2),a  
2d4b 18 03			jr .pastdmark  
2d4d ..			.dmark: db "DEC"  
2d50 f1			.pastdmark: pop af  
2d51			endm  
# End of macro DMARK
2d51						CALLMONITOR 
2d51 cd 6f ee			call debug_vector  
2d54				endm  
# End of macro CALLMONITOR
2d54					endif 
2d54			 
2d54 7e					ld a,(hl) 
2d55 93					sub e 
2d56 77					ld (hl),a 
2d57			 
2d57			 
2d57					FORTH_DSP_POP 
2d57 cd 4d 1e			call macro_forth_dsp_pop 
2d5a				endm 
# End of macro FORTH_DSP_POP
2d5a			 
2d5a				       NEXTW 
2d5a c3 81 1f			jp macro_next 
2d5d				endm 
# End of macro NEXTW
2d5d			 
2d5d			.INC2: 
2d5d				CWHEAD .DEC2 91 "+2!" 3 WORD_FLAG_CODE 
2d5d 6f				db WORD_SYS_CORE+91             
2d5e 0a 2e			dw .DEC2            
2d60 04				db 3 + 1 
2d61 .. 00			db "+2!",0              
2d65				endm 
# End of macro CWHEAD
2d65			; | +2! ( u a -- )  Increment word at address a by the value u | DONE 
2d65			 
2d65					if DEBUG_FORTH_WORDS_KEY 
2d65						DMARK "+2s" 
2d65 f5				push af  
2d66 3a 7a 2d			ld a, (.dmark)  
2d69 32 65 ee			ld (debug_mark),a  
2d6c 3a 7b 2d			ld a, (.dmark+1)  
2d6f 32 66 ee			ld (debug_mark+1),a  
2d72 3a 7c 2d			ld a, (.dmark+2)  
2d75 32 67 ee			ld (debug_mark+2),a  
2d78 18 03			jr .pastdmark  
2d7a ..			.dmark: db "+2s"  
2d7d f1			.pastdmark: pop af  
2d7e			endm  
# End of macro DMARK
2d7e						CALLMONITOR 
2d7e cd 6f ee			call debug_vector  
2d81				endm  
# End of macro CALLMONITOR
2d81					endif 
2d81			 
2d81					; Address 
2d81			 
2d81					FORTH_DSP_VALUEHL 
2d81 cd 95 1d			call macro_dsp_valuehl 
2d84				endm 
# End of macro FORTH_DSP_VALUEHL
2d84			 
2d84 e5					push hl    ; save address 
2d85			 
2d85					; load content into de 
2d85			 
2d85 5e					ld e,(hl) 
2d86 23					inc hl 
2d87 56					ld d, (hl) 
2d88			 
2d88					if DEBUG_FORTH_WORDS 
2d88						DMARK "+2a" 
2d88 f5				push af  
2d89 3a 9d 2d			ld a, (.dmark)  
2d8c 32 65 ee			ld (debug_mark),a  
2d8f 3a 9e 2d			ld a, (.dmark+1)  
2d92 32 66 ee			ld (debug_mark+1),a  
2d95 3a 9f 2d			ld a, (.dmark+2)  
2d98 32 67 ee			ld (debug_mark+2),a  
2d9b 18 03			jr .pastdmark  
2d9d ..			.dmark: db "+2a"  
2da0 f1			.pastdmark: pop af  
2da1			endm  
# End of macro DMARK
2da1						CALLMONITOR 
2da1 cd 6f ee			call debug_vector  
2da4				endm  
# End of macro CALLMONITOR
2da4					endif 
2da4			 
2da4					FORTH_DSP_POP 
2da4 cd 4d 1e			call macro_forth_dsp_pop 
2da7				endm 
# End of macro FORTH_DSP_POP
2da7			 
2da7					; Get value to add 
2da7			 
2da7					FORTH_DSP_VALUE 
2da7 cd 7e 1d			call macro_forth_dsp_value 
2daa				endm 
# End of macro FORTH_DSP_VALUE
2daa			 
2daa					if DEBUG_FORTH_WORDS 
2daa						DMARK "+2v" 
2daa f5				push af  
2dab 3a bf 2d			ld a, (.dmark)  
2dae 32 65 ee			ld (debug_mark),a  
2db1 3a c0 2d			ld a, (.dmark+1)  
2db4 32 66 ee			ld (debug_mark+1),a  
2db7 3a c1 2d			ld a, (.dmark+2)  
2dba 32 67 ee			ld (debug_mark+2),a  
2dbd 18 03			jr .pastdmark  
2dbf ..			.dmark: db "+2v"  
2dc2 f1			.pastdmark: pop af  
2dc3			endm  
# End of macro DMARK
2dc3						CALLMONITOR 
2dc3 cd 6f ee			call debug_vector  
2dc6				endm  
# End of macro CALLMONITOR
2dc6					endif 
2dc6			 
2dc6 19					add hl, de 
2dc7			 
2dc7					if DEBUG_FORTH_WORDS 
2dc7						DMARK "+2+" 
2dc7 f5				push af  
2dc8 3a dc 2d			ld a, (.dmark)  
2dcb 32 65 ee			ld (debug_mark),a  
2dce 3a dd 2d			ld a, (.dmark+1)  
2dd1 32 66 ee			ld (debug_mark+1),a  
2dd4 3a de 2d			ld a, (.dmark+2)  
2dd7 32 67 ee			ld (debug_mark+2),a  
2dda 18 03			jr .pastdmark  
2ddc ..			.dmark: db "+2+"  
2ddf f1			.pastdmark: pop af  
2de0			endm  
# End of macro DMARK
2de0						CALLMONITOR 
2de0 cd 6f ee			call debug_vector  
2de3				endm  
# End of macro CALLMONITOR
2de3					endif 
2de3			 
2de3					; move result to de 
2de3			 
2de3 eb					ex de, hl 
2de4			 
2de4					; Address 
2de4			 
2de4 e1					pop hl 
2de5			 
2de5					; save it back 
2de5			 
2de5 73					ld (hl), e 
2de6 23					inc hl 
2de7 72					ld (hl), d 
2de8			 
2de8					if DEBUG_FORTH_WORDS 
2de8						DMARK "+2e" 
2de8 f5				push af  
2de9 3a fd 2d			ld a, (.dmark)  
2dec 32 65 ee			ld (debug_mark),a  
2def 3a fe 2d			ld a, (.dmark+1)  
2df2 32 66 ee			ld (debug_mark+1),a  
2df5 3a ff 2d			ld a, (.dmark+2)  
2df8 32 67 ee			ld (debug_mark+2),a  
2dfb 18 03			jr .pastdmark  
2dfd ..			.dmark: db "+2e"  
2e00 f1			.pastdmark: pop af  
2e01			endm  
# End of macro DMARK
2e01						CALLMONITOR 
2e01 cd 6f ee			call debug_vector  
2e04				endm  
# End of macro CALLMONITOR
2e04					endif 
2e04			 
2e04			 
2e04			 
2e04					FORTH_DSP_POP 
2e04 cd 4d 1e			call macro_forth_dsp_pop 
2e07				endm 
# End of macro FORTH_DSP_POP
2e07			 
2e07			 
2e07				       NEXTW 
2e07 c3 81 1f			jp macro_next 
2e0a				endm 
# End of macro NEXTW
2e0a			 
2e0a			.DEC2: 
2e0a				CWHEAD .GET2 91 "-2!" 3 WORD_FLAG_CODE 
2e0a 6f				db WORD_SYS_CORE+91             
2e0b b9 2e			dw .GET2            
2e0d 04				db 3 + 1 
2e0e .. 00			db "-2!",0              
2e12				endm 
# End of macro CWHEAD
2e12			; | -2! ( u a -- )  Decrement word at address a by the value u | DONE 
2e12			 
2e12			 
2e12					if DEBUG_FORTH_WORDS_KEY 
2e12						DMARK "-2s" 
2e12 f5				push af  
2e13 3a 27 2e			ld a, (.dmark)  
2e16 32 65 ee			ld (debug_mark),a  
2e19 3a 28 2e			ld a, (.dmark+1)  
2e1c 32 66 ee			ld (debug_mark+1),a  
2e1f 3a 29 2e			ld a, (.dmark+2)  
2e22 32 67 ee			ld (debug_mark+2),a  
2e25 18 03			jr .pastdmark  
2e27 ..			.dmark: db "-2s"  
2e2a f1			.pastdmark: pop af  
2e2b			endm  
# End of macro DMARK
2e2b						CALLMONITOR 
2e2b cd 6f ee			call debug_vector  
2e2e				endm  
# End of macro CALLMONITOR
2e2e					endif 
2e2e			 
2e2e					; Address 
2e2e			 
2e2e					FORTH_DSP_VALUEHL 
2e2e cd 95 1d			call macro_dsp_valuehl 
2e31				endm 
# End of macro FORTH_DSP_VALUEHL
2e31			 
2e31 e5					push hl    ; save address 
2e32			 
2e32					; load content into de 
2e32			 
2e32 5e					ld e,(hl) 
2e33 23					inc hl 
2e34 56					ld d, (hl) 
2e35			 
2e35					if DEBUG_FORTH_WORDS 
2e35						DMARK "-2a" 
2e35 f5				push af  
2e36 3a 4a 2e			ld a, (.dmark)  
2e39 32 65 ee			ld (debug_mark),a  
2e3c 3a 4b 2e			ld a, (.dmark+1)  
2e3f 32 66 ee			ld (debug_mark+1),a  
2e42 3a 4c 2e			ld a, (.dmark+2)  
2e45 32 67 ee			ld (debug_mark+2),a  
2e48 18 03			jr .pastdmark  
2e4a ..			.dmark: db "-2a"  
2e4d f1			.pastdmark: pop af  
2e4e			endm  
# End of macro DMARK
2e4e						CALLMONITOR 
2e4e cd 6f ee			call debug_vector  
2e51				endm  
# End of macro CALLMONITOR
2e51					endif 
2e51			 
2e51					FORTH_DSP_POP 
2e51 cd 4d 1e			call macro_forth_dsp_pop 
2e54				endm 
# End of macro FORTH_DSP_POP
2e54			 
2e54					; Get value to remove 
2e54			 
2e54					FORTH_DSP_VALUE 
2e54 cd 7e 1d			call macro_forth_dsp_value 
2e57				endm 
# End of macro FORTH_DSP_VALUE
2e57			 
2e57					if DEBUG_FORTH_WORDS 
2e57						DMARK "-2v" 
2e57 f5				push af  
2e58 3a 6c 2e			ld a, (.dmark)  
2e5b 32 65 ee			ld (debug_mark),a  
2e5e 3a 6d 2e			ld a, (.dmark+1)  
2e61 32 66 ee			ld (debug_mark+1),a  
2e64 3a 6e 2e			ld a, (.dmark+2)  
2e67 32 67 ee			ld (debug_mark+2),a  
2e6a 18 03			jr .pastdmark  
2e6c ..			.dmark: db "-2v"  
2e6f f1			.pastdmark: pop af  
2e70			endm  
# End of macro DMARK
2e70						CALLMONITOR 
2e70 cd 6f ee			call debug_vector  
2e73				endm  
# End of macro CALLMONITOR
2e73					endif 
2e73			 
2e73 eb					ex de, hl 
2e74 ed 52				sbc hl, de 
2e76			 
2e76					if DEBUG_FORTH_WORDS 
2e76						DMARK "-2d" 
2e76 f5				push af  
2e77 3a 8b 2e			ld a, (.dmark)  
2e7a 32 65 ee			ld (debug_mark),a  
2e7d 3a 8c 2e			ld a, (.dmark+1)  
2e80 32 66 ee			ld (debug_mark+1),a  
2e83 3a 8d 2e			ld a, (.dmark+2)  
2e86 32 67 ee			ld (debug_mark+2),a  
2e89 18 03			jr .pastdmark  
2e8b ..			.dmark: db "-2d"  
2e8e f1			.pastdmark: pop af  
2e8f			endm  
# End of macro DMARK
2e8f						CALLMONITOR 
2e8f cd 6f ee			call debug_vector  
2e92				endm  
# End of macro CALLMONITOR
2e92					endif 
2e92			 
2e92					; move result to de 
2e92			 
2e92 eb					ex de, hl 
2e93			 
2e93					; Address 
2e93			 
2e93 e1					pop hl 
2e94			 
2e94					; save it back 
2e94			 
2e94 73					ld (hl), e 
2e95 23					inc hl 
2e96 72					ld (hl), d 
2e97			 
2e97					if DEBUG_FORTH_WORDS 
2e97						DMARK "-2e" 
2e97 f5				push af  
2e98 3a ac 2e			ld a, (.dmark)  
2e9b 32 65 ee			ld (debug_mark),a  
2e9e 3a ad 2e			ld a, (.dmark+1)  
2ea1 32 66 ee			ld (debug_mark+1),a  
2ea4 3a ae 2e			ld a, (.dmark+2)  
2ea7 32 67 ee			ld (debug_mark+2),a  
2eaa 18 03			jr .pastdmark  
2eac ..			.dmark: db "-2e"  
2eaf f1			.pastdmark: pop af  
2eb0			endm  
# End of macro DMARK
2eb0						CALLMONITOR 
2eb0 cd 6f ee			call debug_vector  
2eb3				endm  
# End of macro CALLMONITOR
2eb3					endif 
2eb3			 
2eb3			 
2eb3					FORTH_DSP_POP 
2eb3 cd 4d 1e			call macro_forth_dsp_pop 
2eb6				endm 
# End of macro FORTH_DSP_POP
2eb6			 
2eb6			 
2eb6			 
2eb6				       NEXTW 
2eb6 c3 81 1f			jp macro_next 
2eb9				endm 
# End of macro NEXTW
2eb9			.GET2: 
2eb9				CWHEAD .BANG2 91 "2@" 2 WORD_FLAG_CODE 
2eb9 6f				db WORD_SYS_CORE+91             
2eba ee 2e			dw .BANG2            
2ebc 03				db 2 + 1 
2ebd .. 00			db "2@",0              
2ec0				endm 
# End of macro CWHEAD
2ec0			; | 2@ ( a -- u )  Push word at address a onto stack | DONE 
2ec0					if DEBUG_FORTH_WORDS_KEY 
2ec0						DMARK "2A_" 
2ec0 f5				push af  
2ec1 3a d5 2e			ld a, (.dmark)  
2ec4 32 65 ee			ld (debug_mark),a  
2ec7 3a d6 2e			ld a, (.dmark+1)  
2eca 32 66 ee			ld (debug_mark+1),a  
2ecd 3a d7 2e			ld a, (.dmark+2)  
2ed0 32 67 ee			ld (debug_mark+2),a  
2ed3 18 03			jr .pastdmark  
2ed5 ..			.dmark: db "2A_"  
2ed8 f1			.pastdmark: pop af  
2ed9			endm  
# End of macro DMARK
2ed9						CALLMONITOR 
2ed9 cd 6f ee			call debug_vector  
2edc				endm  
# End of macro CALLMONITOR
2edc					endif 
2edc			 
2edc					FORTH_DSP_VALUEHL 
2edc cd 95 1d			call macro_dsp_valuehl 
2edf				endm 
# End of macro FORTH_DSP_VALUEHL
2edf			 
2edf e5					push hl   ; save address 
2ee0			 
2ee0					FORTH_DSP_POP 
2ee0 cd 4d 1e			call macro_forth_dsp_pop 
2ee3				endm 
# End of macro FORTH_DSP_POP
2ee3			 
2ee3 e1					pop hl 
2ee4			 
2ee4 5e					ld e, (hl) 
2ee5 23					inc hl 
2ee6 56					ld d, (hl) 
2ee7			 
2ee7 eb					ex de, hl 
2ee8			 
2ee8 cd 90 1b				call forth_push_numhl 
2eeb			 
2eeb				       NEXTW 
2eeb c3 81 1f			jp macro_next 
2eee				endm 
# End of macro NEXTW
2eee			.BANG2: 
2eee				CWHEAD .CONFIG 91 "2!" 2 WORD_FLAG_CODE 
2eee 6f				db WORD_SYS_CORE+91             
2eef 26 2f			dw .CONFIG            
2ef1 03				db 2 + 1 
2ef2 .. 00			db "2!",0              
2ef5				endm 
# End of macro CWHEAD
2ef5			; | 2! ( u a -- )  Store value u as a word at address a | DONE 
2ef5					if DEBUG_FORTH_WORDS_KEY 
2ef5						DMARK "2S_" 
2ef5 f5				push af  
2ef6 3a 0a 2f			ld a, (.dmark)  
2ef9 32 65 ee			ld (debug_mark),a  
2efc 3a 0b 2f			ld a, (.dmark+1)  
2eff 32 66 ee			ld (debug_mark+1),a  
2f02 3a 0c 2f			ld a, (.dmark+2)  
2f05 32 67 ee			ld (debug_mark+2),a  
2f08 18 03			jr .pastdmark  
2f0a ..			.dmark: db "2S_"  
2f0d f1			.pastdmark: pop af  
2f0e			endm  
# End of macro DMARK
2f0e						CALLMONITOR 
2f0e cd 6f ee			call debug_vector  
2f11				endm  
# End of macro CALLMONITOR
2f11					endif 
2f11			 
2f11					FORTH_DSP_VALUEHL 
2f11 cd 95 1d			call macro_dsp_valuehl 
2f14				endm 
# End of macro FORTH_DSP_VALUEHL
2f14			 
2f14 e5					push hl   ; save address 
2f15			 
2f15			 
2f15					FORTH_DSP_POP 
2f15 cd 4d 1e			call macro_forth_dsp_pop 
2f18				endm 
# End of macro FORTH_DSP_POP
2f18			 
2f18					 
2f18					FORTH_DSP_VALUEHL 
2f18 cd 95 1d			call macro_dsp_valuehl 
2f1b				endm 
# End of macro FORTH_DSP_VALUEHL
2f1b			 
2f1b					FORTH_DSP_POP 
2f1b cd 4d 1e			call macro_forth_dsp_pop 
2f1e				endm 
# End of macro FORTH_DSP_POP
2f1e			 
2f1e eb					ex de, hl    ; value now in de 
2f1f			 
2f1f e1					pop hl 
2f20			 
2f20 73					ld (hl), e 
2f21			 
2f21 23					inc hl 
2f22			 
2f22 72					ld (hl), d 
2f23			 
2f23			 
2f23				       NEXTW 
2f23 c3 81 1f			jp macro_next 
2f26				endm 
# End of macro NEXTW
2f26			.CONFIG: 
2f26				CWHEAD .ADTOS 91 "CONFIG" 6 WORD_FLAG_CODE 
2f26 6f				db WORD_SYS_CORE+91             
2f27 37 2f			dw .ADTOS            
2f29 07				db 6 + 1 
2f2a .. 00			db "CONFIG",0              
2f31				endm 
# End of macro CWHEAD
2f31			; | CONFIG ( -- )  Access the system configuration menu. Set boot from file, hardware diags, and more! | DONE 
2f31			 
2f31 cd 69 13				call config 
2f34					NEXTW 
2f34 c3 81 1f			jp macro_next 
2f37				endm 
# End of macro NEXTW
2f37			 
2f37			.ADTOS: 
2f37				CWHEAD .SBTOS 91 "1+" 2 WORD_FLAG_CODE 
2f37 6f				db WORD_SYS_CORE+91             
2f38 4d 2f			dw .SBTOS            
2f3a 03				db 2 + 1 
2f3b .. 00			db "1+",0              
2f3e				endm 
# End of macro CWHEAD
2f3e			; | 1+ ( u -- u )  Increment value on TOS | DONE 
2f3e			 
2f3e					FORTH_DSP_VALUEHL 
2f3e cd 95 1d			call macro_dsp_valuehl 
2f41				endm 
# End of macro FORTH_DSP_VALUEHL
2f41 e5					push hl 
2f42			 
2f42					FORTH_DSP_POP 
2f42 cd 4d 1e			call macro_forth_dsp_pop 
2f45				endm 
# End of macro FORTH_DSP_POP
2f45 e1					pop hl 
2f46			 
2f46 23					inc hl 
2f47 cd 90 1b				call forth_push_numhl 
2f4a					 
2f4a					NEXTW 
2f4a c3 81 1f			jp macro_next 
2f4d				endm 
# End of macro NEXTW
2f4d			.SBTOS: 
2f4d				CWHEAD .ADSTORE 91 "1-" 2 WORD_FLAG_CODE 
2f4d 6f				db WORD_SYS_CORE+91             
2f4e 63 2f			dw .ADSTORE            
2f50 03				db 2 + 1 
2f51 .. 00			db "1-",0              
2f54				endm 
# End of macro CWHEAD
2f54			; | 1- ( u -- u )  Decrement value on TOS | DONE 
2f54			 
2f54					FORTH_DSP_VALUEHL 
2f54 cd 95 1d			call macro_dsp_valuehl 
2f57				endm 
# End of macro FORTH_DSP_VALUEHL
2f57 e5					push hl 
2f58			 
2f58					FORTH_DSP_POP 
2f58 cd 4d 1e			call macro_forth_dsp_pop 
2f5b				endm 
# End of macro FORTH_DSP_POP
2f5b e1					pop hl 
2f5c			 
2f5c 2b					dec hl 
2f5d cd 90 1b				call forth_push_numhl 
2f60					 
2f60					NEXTW 
2f60 c3 81 1f			jp macro_next 
2f63				endm 
# End of macro NEXTW
2f63			.ADSTORE: 
2f63				CWHEAD .ADWSTORE 91 "1+!" 3 WORD_FLAG_CODE 
2f63 6f				db WORD_SYS_CORE+91             
2f64 79 2f			dw .ADWSTORE            
2f66 04				db 3 + 1 
2f67 .. 00			db "1+!",0              
2f6b				endm 
# End of macro CWHEAD
2f6b			; | 1+! ( addr -- )  Increment byte at address addr | DONE 
2f6b			 
2f6b					FORTH_DSP_VALUEHL 
2f6b cd 95 1d			call macro_dsp_valuehl 
2f6e				endm 
# End of macro FORTH_DSP_VALUEHL
2f6e e5					push hl 
2f6f			 
2f6f					FORTH_DSP_POP 
2f6f cd 4d 1e			call macro_forth_dsp_pop 
2f72				endm 
# End of macro FORTH_DSP_POP
2f72 e1					pop hl 
2f73			 
2f73 7e					ld a, (hl) 
2f74 3c					inc a 
2f75 77					ld (hl), a 
2f76					 
2f76					NEXTW 
2f76 c3 81 1f			jp macro_next 
2f79				endm 
# End of macro NEXTW
2f79			.ADWSTORE: 
2f79				CWHEAD .SBSTORE 91 "1+2!" 4 WORD_FLAG_CODE 
2f79 6f				db WORD_SYS_CORE+91             
2f7a 97 2f			dw .SBSTORE            
2f7c 05				db 4 + 1 
2f7d .. 00			db "1+2!",0              
2f82				endm 
# End of macro CWHEAD
2f82			; | 1+2! ( addr -- )  Increment word at address addr | DONE 
2f82			 
2f82					FORTH_DSP_VALUEHL 
2f82 cd 95 1d			call macro_dsp_valuehl 
2f85				endm 
# End of macro FORTH_DSP_VALUEHL
2f85 e5					push hl 
2f86			 
2f86					FORTH_DSP_POP 
2f86 cd 4d 1e			call macro_forth_dsp_pop 
2f89				endm 
# End of macro FORTH_DSP_POP
2f89 e1					pop hl 
2f8a			 
2f8a e5					push hl 
2f8b			 
2f8b cd 03 1f				call loadwordinhl 
2f8e 23					inc hl 
2f8f			 
2f8f d1					pop de 
2f90 eb					ex de, hl 
2f91 73					ld (hl), e 
2f92 23					inc hl 
2f93 72					ld (hl), d 
2f94					 
2f94					NEXTW 
2f94 c3 81 1f			jp macro_next 
2f97				endm 
# End of macro NEXTW
2f97			.SBSTORE: 
2f97				CWHEAD .SBWSTORE 91 "1-!" 3 WORD_FLAG_CODE 
2f97 6f				db WORD_SYS_CORE+91             
2f98 ad 2f			dw .SBWSTORE            
2f9a 04				db 3 + 1 
2f9b .. 00			db "1-!",0              
2f9f				endm 
# End of macro CWHEAD
2f9f			; | 1-! ( addr -- )  Decrement byte at address addr | DONE 
2f9f			 
2f9f					FORTH_DSP_VALUEHL 
2f9f cd 95 1d			call macro_dsp_valuehl 
2fa2				endm 
# End of macro FORTH_DSP_VALUEHL
2fa2 e5					push hl 
2fa3			 
2fa3					FORTH_DSP_POP 
2fa3 cd 4d 1e			call macro_forth_dsp_pop 
2fa6				endm 
# End of macro FORTH_DSP_POP
2fa6 e1					pop hl 
2fa7			 
2fa7 7e					ld a, (hl) 
2fa8 3d					dec a 
2fa9 77					ld (hl), a 
2faa					 
2faa					NEXTW 
2faa c3 81 1f			jp macro_next 
2fad				endm 
# End of macro NEXTW
2fad			.SBWSTORE: 
2fad				CWHEAD .ENDCORE 91 "1-2!" 4 WORD_FLAG_CODE 
2fad 6f				db WORD_SYS_CORE+91             
2fae cb 2f			dw .ENDCORE            
2fb0 05				db 4 + 1 
2fb1 .. 00			db "1-2!",0              
2fb6				endm 
# End of macro CWHEAD
2fb6			; | 1-2! ( addr -- )  Decrement word at address addr | DONE 
2fb6			 
2fb6					FORTH_DSP_VALUEHL 
2fb6 cd 95 1d			call macro_dsp_valuehl 
2fb9				endm 
# End of macro FORTH_DSP_VALUEHL
2fb9 e5					push hl 
2fba			 
2fba					FORTH_DSP_POP 
2fba cd 4d 1e			call macro_forth_dsp_pop 
2fbd				endm 
# End of macro FORTH_DSP_POP
2fbd e1					pop hl 
2fbe			 
2fbe e5					push hl 
2fbf			 
2fbf cd 03 1f				call loadwordinhl 
2fc2 2b					dec hl 
2fc3			 
2fc3 d1					pop de 
2fc4 eb					ex de, hl 
2fc5 73					ld (hl), e 
2fc6 23					inc hl 
2fc7 72					ld (hl), d 
2fc8					 
2fc8					NEXTW 
2fc8 c3 81 1f			jp macro_next 
2fcb				endm 
# End of macro NEXTW
2fcb			.ENDCORE: 
2fcb			 
2fcb			; eof 
2fcb			 
2fcb			 
# End of file forth_words_core.asm
2fcb			include "forth_words_flow.asm" 
2fcb			 
2fcb			; | ## Program Flow Words 
2fcb			 
2fcb			.IF: 
2fcb				CWHEAD .THEN 10 "IF" 2 WORD_FLAG_CODE 
2fcb 1e				db WORD_SYS_CORE+10             
2fcc c0 30			dw .THEN            
2fce 03				db 2 + 1 
2fcf .. 00			db "IF",0              
2fd2				endm 
# End of macro CWHEAD
2fd2			; | IF ( w -- f ) If TOS is true exec code following up to THEN - Note: currently not supporting ELSE or nested IF | DONE 
2fd2			; 
2fd2					if DEBUG_FORTH_WORDS_KEY 
2fd2						DMARK "IF." 
2fd2 f5				push af  
2fd3 3a e7 2f			ld a, (.dmark)  
2fd6 32 65 ee			ld (debug_mark),a  
2fd9 3a e8 2f			ld a, (.dmark+1)  
2fdc 32 66 ee			ld (debug_mark+1),a  
2fdf 3a e9 2f			ld a, (.dmark+2)  
2fe2 32 67 ee			ld (debug_mark+2),a  
2fe5 18 03			jr .pastdmark  
2fe7 ..			.dmark: db "IF."  
2fea f1			.pastdmark: pop af  
2feb			endm  
# End of macro DMARK
2feb						CALLMONITOR 
2feb cd 6f ee			call debug_vector  
2fee				endm  
# End of macro CALLMONITOR
2fee					endif 
2fee			; eval TOS 
2fee			 
2fee				FORTH_DSP_VALUEHL 
2fee cd 95 1d			call macro_dsp_valuehl 
2ff1				endm 
# End of macro FORTH_DSP_VALUEHL
2ff1			 
2ff1			;	push hl 
2ff1				FORTH_DSP_POP 
2ff1 cd 4d 1e			call macro_forth_dsp_pop 
2ff4				endm 
# End of macro FORTH_DSP_POP
2ff4			;	pop hl 
2ff4			 
2ff4					if DEBUG_FORTH_WORDS 
2ff4						DMARK "IF1" 
2ff4 f5				push af  
2ff5 3a 09 30			ld a, (.dmark)  
2ff8 32 65 ee			ld (debug_mark),a  
2ffb 3a 0a 30			ld a, (.dmark+1)  
2ffe 32 66 ee			ld (debug_mark+1),a  
3001 3a 0b 30			ld a, (.dmark+2)  
3004 32 67 ee			ld (debug_mark+2),a  
3007 18 03			jr .pastdmark  
3009 ..			.dmark: db "IF1"  
300c f1			.pastdmark: pop af  
300d			endm  
# End of macro DMARK
300d						CALLMONITOR 
300d cd 6f ee			call debug_vector  
3010				endm  
# End of macro CALLMONITOR
3010					endif 
3010 b7				or a        ; clear carry flag 
3011 11 00 00			ld de, 0 
3014 eb				ex de,hl 
3015 ed 52			sbc hl, de 
3017 c2 a1 30			jp nz, .iftrue 
301a			 
301a					if DEBUG_FORTH_WORDS 
301a						DMARK "IF2" 
301a f5				push af  
301b 3a 2f 30			ld a, (.dmark)  
301e 32 65 ee			ld (debug_mark),a  
3021 3a 30 30			ld a, (.dmark+1)  
3024 32 66 ee			ld (debug_mark+1),a  
3027 3a 31 30			ld a, (.dmark+2)  
302a 32 67 ee			ld (debug_mark+2),a  
302d 18 03			jr .pastdmark  
302f ..			.dmark: db "IF2"  
3032 f1			.pastdmark: pop af  
3033			endm  
# End of macro DMARK
3033						CALLMONITOR 
3033 cd 6f ee			call debug_vector  
3036				endm  
# End of macro CALLMONITOR
3036					endif 
3036			 
3036			; if not true then skip to THEN 
3036			 
3036				; TODO get tok_ptr 
3036				; TODO consume toks until we get to THEN 
3036			 
3036 2a bc e5			ld hl, (os_tok_ptr) 
3039					if DEBUG_FORTH_WORDS 
3039						DMARK "IF3" 
3039 f5				push af  
303a 3a 4e 30			ld a, (.dmark)  
303d 32 65 ee			ld (debug_mark),a  
3040 3a 4f 30			ld a, (.dmark+1)  
3043 32 66 ee			ld (debug_mark+1),a  
3046 3a 50 30			ld a, (.dmark+2)  
3049 32 67 ee			ld (debug_mark+2),a  
304c 18 03			jr .pastdmark  
304e ..			.dmark: db "IF3"  
3051 f1			.pastdmark: pop af  
3052			endm  
# End of macro DMARK
3052						CALLMONITOR 
3052 cd 6f ee			call debug_vector  
3055				endm  
# End of macro CALLMONITOR
3055						 
3055					endif 
3055 11 9c 30			ld de, .ifthen 
3058					if DEBUG_FORTH_WORDS 
3058						DMARK "IF4" 
3058 f5				push af  
3059 3a 6d 30			ld a, (.dmark)  
305c 32 65 ee			ld (debug_mark),a  
305f 3a 6e 30			ld a, (.dmark+1)  
3062 32 66 ee			ld (debug_mark+1),a  
3065 3a 6f 30			ld a, (.dmark+2)  
3068 32 67 ee			ld (debug_mark+2),a  
306b 18 03			jr .pastdmark  
306d ..			.dmark: db "IF4"  
3070 f1			.pastdmark: pop af  
3071			endm  
# End of macro DMARK
3071						CALLMONITOR 
3071 cd 6f ee			call debug_vector  
3074				endm  
# End of macro CALLMONITOR
3074					endif 
3074 cd 88 20			call findnexttok  
3077			 
3077					if DEBUG_FORTH_WORDS 
3077						DMARK "IF5" 
3077 f5				push af  
3078 3a 8c 30			ld a, (.dmark)  
307b 32 65 ee			ld (debug_mark),a  
307e 3a 8d 30			ld a, (.dmark+1)  
3081 32 66 ee			ld (debug_mark+1),a  
3084 3a 8e 30			ld a, (.dmark+2)  
3087 32 67 ee			ld (debug_mark+2),a  
308a 18 03			jr .pastdmark  
308c ..			.dmark: db "IF5"  
308f f1			.pastdmark: pop af  
3090			endm  
# End of macro DMARK
3090						CALLMONITOR 
3090 cd 6f ee			call debug_vector  
3093				endm  
# End of macro CALLMONITOR
3093					endif 
3093				; TODO replace below with ; exec using tok_ptr 
3093 22 bc e5			ld (os_tok_ptr), hl 
3096 c3 0a 20			jp exec1 
3099				NEXTW 
3099 c3 81 1f			jp macro_next 
309c				endm 
# End of macro NEXTW
309c			 
309c .. 00		.ifthen:  db "THEN",0 
30a1			 
30a1			.iftrue:		 
30a1				; Exec next words normally 
30a1			 
30a1				; if true then exec following IF as normal 
30a1					if DEBUG_FORTH_WORDS 
30a1						DMARK "IFT" 
30a1 f5				push af  
30a2 3a b6 30			ld a, (.dmark)  
30a5 32 65 ee			ld (debug_mark),a  
30a8 3a b7 30			ld a, (.dmark+1)  
30ab 32 66 ee			ld (debug_mark+1),a  
30ae 3a b8 30			ld a, (.dmark+2)  
30b1 32 67 ee			ld (debug_mark+2),a  
30b4 18 03			jr .pastdmark  
30b6 ..			.dmark: db "IFT"  
30b9 f1			.pastdmark: pop af  
30ba			endm  
# End of macro DMARK
30ba						CALLMONITOR 
30ba cd 6f ee			call debug_vector  
30bd				endm  
# End of macro CALLMONITOR
30bd					endif 
30bd			 
30bd					NEXTW 
30bd c3 81 1f			jp macro_next 
30c0				endm 
# End of macro NEXTW
30c0			.THEN: 
30c0				CWHEAD .ELSE 11 "THEN" 4 WORD_FLAG_CODE 
30c0 1f				db WORD_SYS_CORE+11             
30c1 e8 30			dw .ELSE            
30c3 05				db 4 + 1 
30c4 .. 00			db "THEN",0              
30c9				endm 
# End of macro CWHEAD
30c9			; | THEN ( -- ) Does nothing. It is a marker for the end of an IF block | DONE 
30c9					if DEBUG_FORTH_WORDS_KEY 
30c9						DMARK "THN" 
30c9 f5				push af  
30ca 3a de 30			ld a, (.dmark)  
30cd 32 65 ee			ld (debug_mark),a  
30d0 3a df 30			ld a, (.dmark+1)  
30d3 32 66 ee			ld (debug_mark+1),a  
30d6 3a e0 30			ld a, (.dmark+2)  
30d9 32 67 ee			ld (debug_mark+2),a  
30dc 18 03			jr .pastdmark  
30de ..			.dmark: db "THN"  
30e1 f1			.pastdmark: pop af  
30e2			endm  
# End of macro DMARK
30e2						CALLMONITOR 
30e2 cd 6f ee			call debug_vector  
30e5				endm  
# End of macro CALLMONITOR
30e5					endif 
30e5					NEXTW 
30e5 c3 81 1f			jp macro_next 
30e8				endm 
# End of macro NEXTW
30e8			.ELSE: 
30e8				CWHEAD .DO 12 "ELSE" 2 WORD_FLAG_CODE 
30e8 20				db WORD_SYS_CORE+12             
30e9 10 31			dw .DO            
30eb 03				db 2 + 1 
30ec .. 00			db "ELSE",0              
30f1				endm 
# End of macro CWHEAD
30f1			; | ELSE ( -- ) Not supported - does nothing | TODO 
30f1			 
30f1					if DEBUG_FORTH_WORDS_KEY 
30f1						DMARK "ELS" 
30f1 f5				push af  
30f2 3a 06 31			ld a, (.dmark)  
30f5 32 65 ee			ld (debug_mark),a  
30f8 3a 07 31			ld a, (.dmark+1)  
30fb 32 66 ee			ld (debug_mark+1),a  
30fe 3a 08 31			ld a, (.dmark+2)  
3101 32 67 ee			ld (debug_mark+2),a  
3104 18 03			jr .pastdmark  
3106 ..			.dmark: db "ELS"  
3109 f1			.pastdmark: pop af  
310a			endm  
# End of macro DMARK
310a						CALLMONITOR 
310a cd 6f ee			call debug_vector  
310d				endm  
# End of macro CALLMONITOR
310d					endif 
310d			 
310d			 
310d					NEXTW 
310d c3 81 1f			jp macro_next 
3110				endm 
# End of macro NEXTW
3110			.DO: 
3110				CWHEAD .LOOP 13 "DO" 2 WORD_FLAG_CODE 
3110 21				db WORD_SYS_CORE+13             
3111 37 32			dw .LOOP            
3113 03				db 2 + 1 
3114 .. 00			db "DO",0              
3117				endm 
# End of macro CWHEAD
3117			; | DO ( u1 u2 -- ) Loop starting at u2 with a limit of u1 | DONE 
3117			 
3117					if DEBUG_FORTH_WORDS_KEY 
3117						DMARK "DO." 
3117 f5				push af  
3118 3a 2c 31			ld a, (.dmark)  
311b 32 65 ee			ld (debug_mark),a  
311e 3a 2d 31			ld a, (.dmark+1)  
3121 32 66 ee			ld (debug_mark+1),a  
3124 3a 2e 31			ld a, (.dmark+2)  
3127 32 67 ee			ld (debug_mark+2),a  
312a 18 03			jr .pastdmark  
312c ..			.dmark: db "DO."  
312f f1			.pastdmark: pop af  
3130			endm  
# End of macro DMARK
3130						CALLMONITOR 
3130 cd 6f ee			call debug_vector  
3133				endm  
# End of macro CALLMONITOR
3133					endif 
3133			;  push pc to rsp stack past the DO 
3133			 
3133 2a bc e5				ld hl, (os_tok_ptr) 
3136 23					inc hl   ; D 
3137 23					inc hl  ; O 
3138 23					inc hl   ; null 
3139					if DEBUG_FORTH_WORDS 
3139						DMARK "DO2" 
3139 f5				push af  
313a 3a 4e 31			ld a, (.dmark)  
313d 32 65 ee			ld (debug_mark),a  
3140 3a 4f 31			ld a, (.dmark+1)  
3143 32 66 ee			ld (debug_mark+1),a  
3146 3a 50 31			ld a, (.dmark+2)  
3149 32 67 ee			ld (debug_mark+2),a  
314c 18 03			jr .pastdmark  
314e ..			.dmark: db "DO2"  
3151 f1			.pastdmark: pop af  
3152			endm  
# End of macro DMARK
3152						CALLMONITOR 
3152 cd 6f ee			call debug_vector  
3155				endm  
# End of macro CALLMONITOR
3155					endif 
3155					FORTH_RSP_NEXT 
3155 cd 37 1b			call macro_forth_rsp_next 
3158				endm 
# End of macro FORTH_RSP_NEXT
3158					if DEBUG_FORTH_WORDS 
3158						DMARK "DO3" 
3158 f5				push af  
3159 3a 6d 31			ld a, (.dmark)  
315c 32 65 ee			ld (debug_mark),a  
315f 3a 6e 31			ld a, (.dmark+1)  
3162 32 66 ee			ld (debug_mark+1),a  
3165 3a 6f 31			ld a, (.dmark+2)  
3168 32 67 ee			ld (debug_mark+2),a  
316b 18 03			jr .pastdmark  
316d ..			.dmark: db "DO3"  
3170 f1			.pastdmark: pop af  
3171			endm  
# End of macro DMARK
3171						CALLMONITOR 
3171 cd 6f ee			call debug_vector  
3174				endm  
# End of macro CALLMONITOR
3174					endif 
3174			 
3174					;if DEBUG_FORTH_WORDS 
3174				;		push hl 
3174			;		endif  
3174			 
3174			; get counters from data stack 
3174			 
3174			 
3174					FORTH_DSP_VALUEHL 
3174 cd 95 1d			call macro_dsp_valuehl 
3177				endm 
# End of macro FORTH_DSP_VALUEHL
3177 e5					push hl		 ; hl now has starting counter which needs to be tos 
3178			 
3178					if DEBUG_FORTH_WORDS 
3178						DMARK "DO4" 
3178 f5				push af  
3179 3a 8d 31			ld a, (.dmark)  
317c 32 65 ee			ld (debug_mark),a  
317f 3a 8e 31			ld a, (.dmark+1)  
3182 32 66 ee			ld (debug_mark+1),a  
3185 3a 8f 31			ld a, (.dmark+2)  
3188 32 67 ee			ld (debug_mark+2),a  
318b 18 03			jr .pastdmark  
318d ..			.dmark: db "DO4"  
3190 f1			.pastdmark: pop af  
3191			endm  
# End of macro DMARK
3191						CALLMONITOR 
3191 cd 6f ee			call debug_vector  
3194				endm  
# End of macro CALLMONITOR
3194					endif 
3194					FORTH_DSP_POP 
3194 cd 4d 1e			call macro_forth_dsp_pop 
3197				endm 
# End of macro FORTH_DSP_POP
3197			 
3197					if DEBUG_FORTH_WORDS 
3197						DMARK "DO5" 
3197 f5				push af  
3198 3a ac 31			ld a, (.dmark)  
319b 32 65 ee			ld (debug_mark),a  
319e 3a ad 31			ld a, (.dmark+1)  
31a1 32 66 ee			ld (debug_mark+1),a  
31a4 3a ae 31			ld a, (.dmark+2)  
31a7 32 67 ee			ld (debug_mark+2),a  
31aa 18 03			jr .pastdmark  
31ac ..			.dmark: db "DO5"  
31af f1			.pastdmark: pop af  
31b0			endm  
# End of macro DMARK
31b0						CALLMONITOR 
31b0 cd 6f ee			call debug_vector  
31b3				endm  
# End of macro CALLMONITOR
31b3					endif 
31b3			 
31b3					FORTH_DSP_VALUEHL 
31b3 cd 95 1d			call macro_dsp_valuehl 
31b6				endm 
# End of macro FORTH_DSP_VALUEHL
31b6			;		push hl		 ; hl now has starting limit counter 
31b6			 
31b6					if DEBUG_FORTH_WORDS 
31b6						DMARK "DO6" 
31b6 f5				push af  
31b7 3a cb 31			ld a, (.dmark)  
31ba 32 65 ee			ld (debug_mark),a  
31bd 3a cc 31			ld a, (.dmark+1)  
31c0 32 66 ee			ld (debug_mark+1),a  
31c3 3a cd 31			ld a, (.dmark+2)  
31c6 32 67 ee			ld (debug_mark+2),a  
31c9 18 03			jr .pastdmark  
31cb ..			.dmark: db "DO6"  
31ce f1			.pastdmark: pop af  
31cf			endm  
# End of macro DMARK
31cf						CALLMONITOR 
31cf cd 6f ee			call debug_vector  
31d2				endm  
# End of macro CALLMONITOR
31d2					endif 
31d2					FORTH_DSP_POP 
31d2 cd 4d 1e			call macro_forth_dsp_pop 
31d5				endm 
# End of macro FORTH_DSP_POP
31d5			 
31d5			; put counters on the loop stack 
31d5			 
31d5			;		pop hl			 ; limit counter 
31d5 d1					pop de			; start counter 
31d6			 
31d6					; push limit counter 
31d6			 
31d6					if DEBUG_FORTH_WORDS 
31d6						DMARK "DO7" 
31d6 f5				push af  
31d7 3a eb 31			ld a, (.dmark)  
31da 32 65 ee			ld (debug_mark),a  
31dd 3a ec 31			ld a, (.dmark+1)  
31e0 32 66 ee			ld (debug_mark+1),a  
31e3 3a ed 31			ld a, (.dmark+2)  
31e6 32 67 ee			ld (debug_mark+2),a  
31e9 18 03			jr .pastdmark  
31eb ..			.dmark: db "DO7"  
31ee f1			.pastdmark: pop af  
31ef			endm  
# End of macro DMARK
31ef						CALLMONITOR 
31ef cd 6f ee			call debug_vector  
31f2				endm  
# End of macro CALLMONITOR
31f2					endif 
31f2					FORTH_LOOP_NEXT 
31f2 cd c6 1d			call macro_forth_loop_next 
31f5				endm 
# End of macro FORTH_LOOP_NEXT
31f5			 
31f5					; push start counter 
31f5			 
31f5 eb					ex de, hl 
31f6					if DEBUG_FORTH_WORDS 
31f6						DMARK "DO7" 
31f6 f5				push af  
31f7 3a 0b 32			ld a, (.dmark)  
31fa 32 65 ee			ld (debug_mark),a  
31fd 3a 0c 32			ld a, (.dmark+1)  
3200 32 66 ee			ld (debug_mark+1),a  
3203 3a 0d 32			ld a, (.dmark+2)  
3206 32 67 ee			ld (debug_mark+2),a  
3209 18 03			jr .pastdmark  
320b ..			.dmark: db "DO7"  
320e f1			.pastdmark: pop af  
320f			endm  
# End of macro DMARK
320f						CALLMONITOR 
320f cd 6f ee			call debug_vector  
3212				endm  
# End of macro CALLMONITOR
3212					endif 
3212					FORTH_LOOP_NEXT 
3212 cd c6 1d			call macro_forth_loop_next 
3215				endm 
# End of macro FORTH_LOOP_NEXT
3215			 
3215			 
3215					; init first round of I counter 
3215			 
3215 22 e0 e5				ld (os_current_i), hl 
3218			 
3218					if DEBUG_FORTH_WORDS 
3218						DMARK "DO8" 
3218 f5				push af  
3219 3a 2d 32			ld a, (.dmark)  
321c 32 65 ee			ld (debug_mark),a  
321f 3a 2e 32			ld a, (.dmark+1)  
3222 32 66 ee			ld (debug_mark+1),a  
3225 3a 2f 32			ld a, (.dmark+2)  
3228 32 67 ee			ld (debug_mark+2),a  
322b 18 03			jr .pastdmark  
322d ..			.dmark: db "DO8"  
3230 f1			.pastdmark: pop af  
3231			endm  
# End of macro DMARK
3231						CALLMONITOR 
3231 cd 6f ee			call debug_vector  
3234				endm  
# End of macro CALLMONITOR
3234					endif 
3234			 
3234					NEXTW 
3234 c3 81 1f			jp macro_next 
3237				endm 
# End of macro NEXTW
3237			.LOOP: 
3237				CWHEAD .I 14 "LOOP" 4 WORD_FLAG_CODE 
3237 22				db WORD_SYS_CORE+14             
3238 4f 33			dw .I            
323a 05				db 4 + 1 
323b .. 00			db "LOOP",0              
3240				endm 
# End of macro CWHEAD
3240			; | LOOP ( -- ) Increment and test loop counter  | DONE 
3240			 
3240				; pop tos as current loop count to hl 
3240			 
3240				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
3240			 
3240				FORTH_LOOP_TOS 
3240 cd f9 1d			call macro_forth_loop_tos 
3243				endm 
# End of macro FORTH_LOOP_TOS
3243 e5				push hl 
3244			 
3244					if DEBUG_FORTH_WORDS_KEY 
3244						DMARK "LOP" 
3244 f5				push af  
3245 3a 59 32			ld a, (.dmark)  
3248 32 65 ee			ld (debug_mark),a  
324b 3a 5a 32			ld a, (.dmark+1)  
324e 32 66 ee			ld (debug_mark+1),a  
3251 3a 5b 32			ld a, (.dmark+2)  
3254 32 67 ee			ld (debug_mark+2),a  
3257 18 03			jr .pastdmark  
3259 ..			.dmark: db "LOP"  
325c f1			.pastdmark: pop af  
325d			endm  
# End of macro DMARK
325d						CALLMONITOR 
325d cd 6f ee			call debug_vector  
3260				endm  
# End of macro CALLMONITOR
3260					endif 
3260				; next item on the stack is the limit. get it 
3260			 
3260			 
3260				FORTH_LOOP_POP 
3260 cd 03 1e			call macro_forth_loop_pop 
3263				endm 
# End of macro FORTH_LOOP_POP
3263			 
3263				FORTH_LOOP_TOS 
3263 cd f9 1d			call macro_forth_loop_tos 
3266				endm 
# End of macro FORTH_LOOP_TOS
3266			 
3266 d1				pop de		 ; de = i, hl = limit 
3267			 
3267					if DEBUG_FORTH_WORDS 
3267						DMARK "LP1" 
3267 f5				push af  
3268 3a 7c 32			ld a, (.dmark)  
326b 32 65 ee			ld (debug_mark),a  
326e 3a 7d 32			ld a, (.dmark+1)  
3271 32 66 ee			ld (debug_mark+1),a  
3274 3a 7e 32			ld a, (.dmark+2)  
3277 32 67 ee			ld (debug_mark+2),a  
327a 18 03			jr .pastdmark  
327c ..			.dmark: db "LP1"  
327f f1			.pastdmark: pop af  
3280			endm  
# End of macro DMARK
3280						CALLMONITOR 
3280 cd 6f ee			call debug_vector  
3283				endm  
# End of macro CALLMONITOR
3283					endif 
3283			 
3283				; go back to previous word 
3283			 
3283 d5				push de    ; save I for inc later 
3284			 
3284			 
3284				; get limit 
3284				;  is I at limit? 
3284			 
3284			 
3284					if DEBUG_FORTH_WORDS 
3284						DMARK "LP1" 
3284 f5				push af  
3285 3a 99 32			ld a, (.dmark)  
3288 32 65 ee			ld (debug_mark),a  
328b 3a 9a 32			ld a, (.dmark+1)  
328e 32 66 ee			ld (debug_mark+1),a  
3291 3a 9b 32			ld a, (.dmark+2)  
3294 32 67 ee			ld (debug_mark+2),a  
3297 18 03			jr .pastdmark  
3299 ..			.dmark: db "LP1"  
329c f1			.pastdmark: pop af  
329d			endm  
# End of macro DMARK
329d						CALLMONITOR 
329d cd 6f ee			call debug_vector  
32a0				endm  
# End of macro CALLMONITOR
32a0					endif 
32a0			 
32a0 ed 52			sbc hl, de 
32a2			 
32a2			 
32a2				;  if at limit pop both limit and current off stack do NEXT and get rid of saved DO 
32a2			 
32a2 20 26				jr nz, .loopnotdone 
32a4			 
32a4 e1				pop hl   ; get rid of saved I 
32a5				FORTH_LOOP_POP     ; get rid of limit 
32a5 cd 03 1e			call macro_forth_loop_pop 
32a8				endm 
# End of macro FORTH_LOOP_POP
32a8			 
32a8				FORTH_RSP_POP     ; get rid of DO ptr 
32a8 cd 58 1b			call macro_forth_rsp_pop 
32ab				endm 
# End of macro FORTH_RSP_POP
32ab			 
32ab			if DEBUG_FORTH_WORDS 
32ab						DMARK "LP>" 
32ab f5				push af  
32ac 3a c0 32			ld a, (.dmark)  
32af 32 65 ee			ld (debug_mark),a  
32b2 3a c1 32			ld a, (.dmark+1)  
32b5 32 66 ee			ld (debug_mark+1),a  
32b8 3a c2 32			ld a, (.dmark+2)  
32bb 32 67 ee			ld (debug_mark+2),a  
32be 18 03			jr .pastdmark  
32c0 ..			.dmark: db "LP>"  
32c3 f1			.pastdmark: pop af  
32c4			endm  
# End of macro DMARK
32c4				CALLMONITOR 
32c4 cd 6f ee			call debug_vector  
32c7				endm  
# End of macro CALLMONITOR
32c7			endif 
32c7			 
32c7					NEXTW 
32c7 c3 81 1f			jp macro_next 
32ca				endm 
# End of macro NEXTW
32ca				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
32ca			 
32ca			.loopnotdone: 
32ca			 
32ca e1				pop hl    ; get I 
32cb 23				inc hl 
32cc			 
32cc			   	; save new I 
32cc			 
32cc			 
32cc					; set I counter 
32cc			 
32cc 22 e0 e5				ld (os_current_i), hl 
32cf			 
32cf					if DEBUG_FORTH_WORDS 
32cf						DMARK "LPN" 
32cf f5				push af  
32d0 3a e4 32			ld a, (.dmark)  
32d3 32 65 ee			ld (debug_mark),a  
32d6 3a e5 32			ld a, (.dmark+1)  
32d9 32 66 ee			ld (debug_mark+1),a  
32dc 3a e6 32			ld a, (.dmark+2)  
32df 32 67 ee			ld (debug_mark+2),a  
32e2 18 03			jr .pastdmark  
32e4 ..			.dmark: db "LPN"  
32e7 f1			.pastdmark: pop af  
32e8			endm  
# End of macro DMARK
32e8					CALLMONITOR 
32e8 cd 6f ee			call debug_vector  
32eb				endm  
# End of macro CALLMONITOR
32eb					endif 
32eb					 
32eb				FORTH_LOOP_NEXT 
32eb cd c6 1d			call macro_forth_loop_next 
32ee				endm 
# End of macro FORTH_LOOP_NEXT
32ee			 
32ee			 
32ee					if DEBUG_FORTH_WORDS 
32ee eb						ex de,hl 
32ef					endif 
32ef			 
32ef			;	; get DO ptr 
32ef			; 
32ef					if DEBUG_FORTH_WORDS 
32ef						DMARK "LP7" 
32ef f5				push af  
32f0 3a 04 33			ld a, (.dmark)  
32f3 32 65 ee			ld (debug_mark),a  
32f6 3a 05 33			ld a, (.dmark+1)  
32f9 32 66 ee			ld (debug_mark+1),a  
32fc 3a 06 33			ld a, (.dmark+2)  
32ff 32 67 ee			ld (debug_mark+2),a  
3302 18 03			jr .pastdmark  
3304 ..			.dmark: db "LP7"  
3307 f1			.pastdmark: pop af  
3308			endm  
# End of macro DMARK
3308					CALLMONITOR 
3308 cd 6f ee			call debug_vector  
330b				endm  
# End of macro CALLMONITOR
330b					endif 
330b				FORTH_RSP_TOS 
330b cd 4e 1b			call macro_forth_rsp_tos 
330e				endm 
# End of macro FORTH_RSP_TOS
330e			 
330e					if DEBUG_FORTH_WORDS 
330e						DMARK "LP8" 
330e f5				push af  
330f 3a 23 33			ld a, (.dmark)  
3312 32 65 ee			ld (debug_mark),a  
3315 3a 24 33			ld a, (.dmark+1)  
3318 32 66 ee			ld (debug_mark+1),a  
331b 3a 25 33			ld a, (.dmark+2)  
331e 32 67 ee			ld (debug_mark+2),a  
3321 18 03			jr .pastdmark  
3323 ..			.dmark: db "LP8"  
3326 f1			.pastdmark: pop af  
3327			endm  
# End of macro DMARK
3327					CALLMONITOR 
3327 cd 6f ee			call debug_vector  
332a				endm  
# End of macro CALLMONITOR
332a					endif 
332a				;push hl 
332a			 
332a				; not going to DO any more 
332a				; get rid of the RSP pointer as DO will add it back in 
332a				;FORTH_RSP_POP 
332a				;pop hl 
332a			 
332a				;ld hl,(cli_ret_sp) 
332a				;ld e, (hl) 
332a				;inc hl 
332a				;ld d, (hl) 
332a				;ex de,hl 
332a 22 bc e5			ld (os_tok_ptr), hl 
332d					if DEBUG_FORTH_WORDS 
332d						DMARK "LP<" 
332d f5				push af  
332e 3a 42 33			ld a, (.dmark)  
3331 32 65 ee			ld (debug_mark),a  
3334 3a 43 33			ld a, (.dmark+1)  
3337 32 66 ee			ld (debug_mark+1),a  
333a 3a 44 33			ld a, (.dmark+2)  
333d 32 67 ee			ld (debug_mark+2),a  
3340 18 03			jr .pastdmark  
3342 ..			.dmark: db "LP<"  
3345 f1			.pastdmark: pop af  
3346			endm  
# End of macro DMARK
3346					CALLMONITOR 
3346 cd 6f ee			call debug_vector  
3349				endm  
# End of macro CALLMONITOR
3349				endif 
3349 c3 0a 20			jp exec1 
334c			 
334c					 
334c			 
334c			 
334c					NEXTW 
334c c3 81 1f			jp macro_next 
334f				endm 
# End of macro NEXTW
334f			.I:  
334f			 
334f				CWHEAD .DLOOP 74 "I" 1 WORD_FLAG_CODE 
334f 5e				db WORD_SYS_CORE+74             
3350 7a 33			dw .DLOOP            
3352 02				db 1 + 1 
3353 .. 00			db "I",0              
3355				endm 
# End of macro CWHEAD
3355			; | I ( -- ) Current loop counter | DONE 
3355					if DEBUG_FORTH_WORDS_KEY 
3355						DMARK "I.." 
3355 f5				push af  
3356 3a 6a 33			ld a, (.dmark)  
3359 32 65 ee			ld (debug_mark),a  
335c 3a 6b 33			ld a, (.dmark+1)  
335f 32 66 ee			ld (debug_mark+1),a  
3362 3a 6c 33			ld a, (.dmark+2)  
3365 32 67 ee			ld (debug_mark+2),a  
3368 18 03			jr .pastdmark  
336a ..			.dmark: db "I.."  
336d f1			.pastdmark: pop af  
336e			endm  
# End of macro DMARK
336e						CALLMONITOR 
336e cd 6f ee			call debug_vector  
3371				endm  
# End of macro CALLMONITOR
3371					endif 
3371			 
3371 2a e0 e5				ld hl,(os_current_i) 
3374 cd 90 1b				call forth_push_numhl 
3377			 
3377					NEXTW 
3377 c3 81 1f			jp macro_next 
337a				endm 
# End of macro NEXTW
337a			.DLOOP: 
337a				CWHEAD .REPEAT 75 "-LOOP" 5 WORD_FLAG_CODE 
337a 5f				db WORD_SYS_CORE+75             
337b 5b 34			dw .REPEAT            
337d 06				db 5 + 1 
337e .. 00			db "-LOOP",0              
3384				endm 
# End of macro CWHEAD
3384			; | -LOOP ( -- ) Decrement and test loop counter  | DONE 
3384				; pop tos as current loop count to hl 
3384					if DEBUG_FORTH_WORDS_KEY 
3384						DMARK "-LP" 
3384 f5				push af  
3385 3a 99 33			ld a, (.dmark)  
3388 32 65 ee			ld (debug_mark),a  
338b 3a 9a 33			ld a, (.dmark+1)  
338e 32 66 ee			ld (debug_mark+1),a  
3391 3a 9b 33			ld a, (.dmark+2)  
3394 32 67 ee			ld (debug_mark+2),a  
3397 18 03			jr .pastdmark  
3399 ..			.dmark: db "-LP"  
339c f1			.pastdmark: pop af  
339d			endm  
# End of macro DMARK
339d						CALLMONITOR 
339d cd 6f ee			call debug_vector  
33a0				endm  
# End of macro CALLMONITOR
33a0					endif 
33a0			 
33a0				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
33a0			 
33a0				FORTH_LOOP_TOS 
33a0 cd f9 1d			call macro_forth_loop_tos 
33a3				endm 
# End of macro FORTH_LOOP_TOS
33a3 e5				push hl 
33a4			 
33a4					if DEBUG_FORTH_WORDS 
33a4						DMARK "-LP" 
33a4 f5				push af  
33a5 3a b9 33			ld a, (.dmark)  
33a8 32 65 ee			ld (debug_mark),a  
33ab 3a ba 33			ld a, (.dmark+1)  
33ae 32 66 ee			ld (debug_mark+1),a  
33b1 3a bb 33			ld a, (.dmark+2)  
33b4 32 67 ee			ld (debug_mark+2),a  
33b7 18 03			jr .pastdmark  
33b9 ..			.dmark: db "-LP"  
33bc f1			.pastdmark: pop af  
33bd			endm  
# End of macro DMARK
33bd						CALLMONITOR 
33bd cd 6f ee			call debug_vector  
33c0				endm  
# End of macro CALLMONITOR
33c0					endif 
33c0				; next item on the stack is the limit. get it 
33c0			 
33c0			 
33c0				FORTH_LOOP_POP 
33c0 cd 03 1e			call macro_forth_loop_pop 
33c3				endm 
# End of macro FORTH_LOOP_POP
33c3			 
33c3				FORTH_LOOP_TOS 
33c3 cd f9 1d			call macro_forth_loop_tos 
33c6				endm 
# End of macro FORTH_LOOP_TOS
33c6			 
33c6 d1				pop de		 ; de = i, hl = limit 
33c7			 
33c7					if DEBUG_FORTH_WORDS 
33c7						DMARK "-L1" 
33c7 f5				push af  
33c8 3a dc 33			ld a, (.dmark)  
33cb 32 65 ee			ld (debug_mark),a  
33ce 3a dd 33			ld a, (.dmark+1)  
33d1 32 66 ee			ld (debug_mark+1),a  
33d4 3a de 33			ld a, (.dmark+2)  
33d7 32 67 ee			ld (debug_mark+2),a  
33da 18 03			jr .pastdmark  
33dc ..			.dmark: db "-L1"  
33df f1			.pastdmark: pop af  
33e0			endm  
# End of macro DMARK
33e0						CALLMONITOR 
33e0 cd 6f ee			call debug_vector  
33e3				endm  
# End of macro CALLMONITOR
33e3					endif 
33e3			 
33e3				; go back to previous word 
33e3			 
33e3 d5				push de    ; save I for inc later 
33e4			 
33e4			 
33e4				; get limit 
33e4				;  is I at limit? 
33e4			 
33e4			 
33e4					if DEBUG_FORTH_WORDS 
33e4						DMARK "-L1" 
33e4 f5				push af  
33e5 3a f9 33			ld a, (.dmark)  
33e8 32 65 ee			ld (debug_mark),a  
33eb 3a fa 33			ld a, (.dmark+1)  
33ee 32 66 ee			ld (debug_mark+1),a  
33f1 3a fb 33			ld a, (.dmark+2)  
33f4 32 67 ee			ld (debug_mark+2),a  
33f7 18 03			jr .pastdmark  
33f9 ..			.dmark: db "-L1"  
33fc f1			.pastdmark: pop af  
33fd			endm  
# End of macro DMARK
33fd						CALLMONITOR 
33fd cd 6f ee			call debug_vector  
3400				endm  
# End of macro CALLMONITOR
3400					endif 
3400			 
3400 ed 52			sbc hl, de 
3402			 
3402			 
3402				;  if at limit pop both limit and current off stack do NEXT and get rid of saved DO 
3402			 
3402 20 26				jr nz, .mloopnotdone 
3404			 
3404 e1				pop hl   ; get rid of saved I 
3405				FORTH_LOOP_POP     ; get rid of limit 
3405 cd 03 1e			call macro_forth_loop_pop 
3408				endm 
# End of macro FORTH_LOOP_POP
3408			 
3408				FORTH_RSP_POP     ; get rid of DO ptr 
3408 cd 58 1b			call macro_forth_rsp_pop 
340b				endm 
# End of macro FORTH_RSP_POP
340b			 
340b			if DEBUG_FORTH_WORDS 
340b						DMARK "-L>" 
340b f5				push af  
340c 3a 20 34			ld a, (.dmark)  
340f 32 65 ee			ld (debug_mark),a  
3412 3a 21 34			ld a, (.dmark+1)  
3415 32 66 ee			ld (debug_mark+1),a  
3418 3a 22 34			ld a, (.dmark+2)  
341b 32 67 ee			ld (debug_mark+2),a  
341e 18 03			jr .pastdmark  
3420 ..			.dmark: db "-L>"  
3423 f1			.pastdmark: pop af  
3424			endm  
# End of macro DMARK
3424				CALLMONITOR 
3424 cd 6f ee			call debug_vector  
3427				endm  
# End of macro CALLMONITOR
3427			endif 
3427			 
3427					NEXTW 
3427 c3 81 1f			jp macro_next 
342a				endm 
# End of macro NEXTW
342a				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
342a			 
342a			.mloopnotdone: 
342a			 
342a e1				pop hl    ; get I 
342b 2b				dec hl 
342c			 
342c			   	; save new I 
342c			 
342c			 
342c					; set I counter 
342c			 
342c 22 e0 e5				ld (os_current_i), hl 
342f			 
342f					 
342f				FORTH_LOOP_NEXT 
342f cd c6 1d			call macro_forth_loop_next 
3432				endm 
# End of macro FORTH_LOOP_NEXT
3432			 
3432			 
3432					if DEBUG_FORTH_WORDS 
3432 eb						ex de,hl 
3433					endif 
3433			 
3433			;	; get DO ptr 
3433			; 
3433				FORTH_RSP_TOS 
3433 cd 4e 1b			call macro_forth_rsp_tos 
3436				endm 
# End of macro FORTH_RSP_TOS
3436			 
3436				;push hl 
3436			 
3436				; not going to DO any more 
3436				; get rid of the RSP pointer as DO will add it back in 
3436				;FORTH_RSP_POP 
3436				;pop hl 
3436			 
3436			 
3436 22 bc e5			ld (os_tok_ptr), hl 
3439					if DEBUG_FORTH_WORDS 
3439						DMARK "-L<" 
3439 f5				push af  
343a 3a 4e 34			ld a, (.dmark)  
343d 32 65 ee			ld (debug_mark),a  
3440 3a 4f 34			ld a, (.dmark+1)  
3443 32 66 ee			ld (debug_mark+1),a  
3446 3a 50 34			ld a, (.dmark+2)  
3449 32 67 ee			ld (debug_mark+2),a  
344c 18 03			jr .pastdmark  
344e ..			.dmark: db "-L<"  
3451 f1			.pastdmark: pop af  
3452			endm  
# End of macro DMARK
3452					CALLMONITOR 
3452 cd 6f ee			call debug_vector  
3455				endm  
# End of macro CALLMONITOR
3455				endif 
3455 c3 0a 20			jp exec1 
3458			 
3458					 
3458			 
3458			 
3458			 
3458				NEXTW 
3458 c3 81 1f			jp macro_next 
345b				endm 
# End of macro NEXTW
345b			 
345b			 
345b			 
345b			 
345b			.REPEAT: 
345b				CWHEAD .UNTIL 93 "REPEAT" 5 WORD_FLAG_CODE 
345b 71				db WORD_SYS_CORE+93             
345c ae 34			dw .UNTIL            
345e 06				db 5 + 1 
345f .. 00			db "REPEAT",0              
3466				endm 
# End of macro CWHEAD
3466			; | REPEAT ( --  ) Start REPEAT...UNTIL loop  | DONE 
3466			;  push pc to rsp stack past the REPEAT 
3466					if DEBUG_FORTH_WORDS_KEY 
3466						DMARK "REP" 
3466 f5				push af  
3467 3a 7b 34			ld a, (.dmark)  
346a 32 65 ee			ld (debug_mark),a  
346d 3a 7c 34			ld a, (.dmark+1)  
3470 32 66 ee			ld (debug_mark+1),a  
3473 3a 7d 34			ld a, (.dmark+2)  
3476 32 67 ee			ld (debug_mark+2),a  
3479 18 03			jr .pastdmark  
347b ..			.dmark: db "REP"  
347e f1			.pastdmark: pop af  
347f			endm  
# End of macro DMARK
347f						CALLMONITOR 
347f cd 6f ee			call debug_vector  
3482				endm  
# End of macro CALLMONITOR
3482					endif 
3482			 
3482 2a bc e5				ld hl, (os_tok_ptr) 
3485 23					inc hl   ; R 
3486 23					inc hl  ; E 
3487 23					inc hl   ; P 
3488 23					inc hl   ; E 
3489 23					inc hl   ; A 
348a 23					inc hl   ; T 
348b 23					inc hl   ; zero 
348c					FORTH_RSP_NEXT 
348c cd 37 1b			call macro_forth_rsp_next 
348f				endm 
# End of macro FORTH_RSP_NEXT
348f			 
348f			 
348f					if DEBUG_FORTH_WORDS 
348f						DMARK "REP" 
348f f5				push af  
3490 3a a4 34			ld a, (.dmark)  
3493 32 65 ee			ld (debug_mark),a  
3496 3a a5 34			ld a, (.dmark+1)  
3499 32 66 ee			ld (debug_mark+1),a  
349c 3a a6 34			ld a, (.dmark+2)  
349f 32 67 ee			ld (debug_mark+2),a  
34a2 18 03			jr .pastdmark  
34a4 ..			.dmark: db "REP"  
34a7 f1			.pastdmark: pop af  
34a8			endm  
# End of macro DMARK
34a8						;pop bc    ; TODO BUG ?????? what is this for???? 
34a8						CALLMONITOR 
34a8 cd 6f ee			call debug_vector  
34ab				endm  
# End of macro CALLMONITOR
34ab					endif 
34ab			 
34ab					NEXTW 
34ab c3 81 1f			jp macro_next 
34ae				endm 
# End of macro NEXTW
34ae			;	       NEXTW 
34ae			 
34ae			.UNTIL: 
34ae				CWHEAD .ENDFLOW 94 "UNTIL" 5 WORD_FLAG_CODE 
34ae 72				db WORD_SYS_CORE+94             
34af 45 35			dw .ENDFLOW            
34b1 06				db 5 + 1 
34b2 .. 00			db "UNTIL",0              
34b8				endm 
# End of macro CWHEAD
34b8			; | UNTIL ( u -- ) Exit REPEAT...UNTIL loop if TOS is false  | DONE 
34b8			 
34b8				; pop tos as check 
34b8			 
34b8				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
34b8			 
34b8				FORTH_DSP_VALUEHL 
34b8 cd 95 1d			call macro_dsp_valuehl 
34bb				endm 
# End of macro FORTH_DSP_VALUEHL
34bb			 
34bb					if DEBUG_FORTH_WORDS_KEY 
34bb						DMARK "UNT" 
34bb f5				push af  
34bc 3a d0 34			ld a, (.dmark)  
34bf 32 65 ee			ld (debug_mark),a  
34c2 3a d1 34			ld a, (.dmark+1)  
34c5 32 66 ee			ld (debug_mark+1),a  
34c8 3a d2 34			ld a, (.dmark+2)  
34cb 32 67 ee			ld (debug_mark+2),a  
34ce 18 03			jr .pastdmark  
34d0 ..			.dmark: db "UNT"  
34d3 f1			.pastdmark: pop af  
34d4			endm  
# End of macro DMARK
34d4						CALLMONITOR 
34d4 cd 6f ee			call debug_vector  
34d7				endm  
# End of macro CALLMONITOR
34d7					endif 
34d7			 
34d7			;	push hl 
34d7				FORTH_DSP_POP 
34d7 cd 4d 1e			call macro_forth_dsp_pop 
34da				endm 
# End of macro FORTH_DSP_POP
34da			 
34da			;	pop hl 
34da			 
34da				; test if true 
34da			 
34da cd 1e 0e			call ishlzero 
34dd			;	ld a,l 
34dd			;	add h 
34dd			; 
34dd			;	cp 0 
34dd			 
34dd 20 3e			jr nz, .untilnotdone 
34df			 
34df					if DEBUG_FORTH_WORDS 
34df						DMARK "UNf" 
34df f5				push af  
34e0 3a f4 34			ld a, (.dmark)  
34e3 32 65 ee			ld (debug_mark),a  
34e6 3a f5 34			ld a, (.dmark+1)  
34e9 32 66 ee			ld (debug_mark+1),a  
34ec 3a f6 34			ld a, (.dmark+2)  
34ef 32 67 ee			ld (debug_mark+2),a  
34f2 18 03			jr .pastdmark  
34f4 ..			.dmark: db "UNf"  
34f7 f1			.pastdmark: pop af  
34f8			endm  
# End of macro DMARK
34f8						CALLMONITOR 
34f8 cd 6f ee			call debug_vector  
34fb				endm  
# End of macro CALLMONITOR
34fb					endif 
34fb			 
34fb			 
34fb			 
34fb				FORTH_RSP_POP     ; get rid of DO ptr 
34fb cd 58 1b			call macro_forth_rsp_pop 
34fe				endm 
# End of macro FORTH_RSP_POP
34fe			 
34fe			if DEBUG_FORTH_WORDS 
34fe						DMARK "UN>" 
34fe f5				push af  
34ff 3a 13 35			ld a, (.dmark)  
3502 32 65 ee			ld (debug_mark),a  
3505 3a 14 35			ld a, (.dmark+1)  
3508 32 66 ee			ld (debug_mark+1),a  
350b 3a 15 35			ld a, (.dmark+2)  
350e 32 67 ee			ld (debug_mark+2),a  
3511 18 03			jr .pastdmark  
3513 ..			.dmark: db "UN>"  
3516 f1			.pastdmark: pop af  
3517			endm  
# End of macro DMARK
3517				CALLMONITOR 
3517 cd 6f ee			call debug_vector  
351a				endm  
# End of macro CALLMONITOR
351a			endif 
351a			 
351a					NEXTW 
351a c3 81 1f			jp macro_next 
351d				endm 
# End of macro NEXTW
351d				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
351d			 
351d			.untilnotdone: 
351d			 
351d			 
351d			;	; get DO ptr 
351d			; 
351d				FORTH_RSP_TOS 
351d cd 4e 1b			call macro_forth_rsp_tos 
3520				endm 
# End of macro FORTH_RSP_TOS
3520			 
3520				;push hl 
3520			 
3520				; not going to DO any more 
3520				; get rid of the RSP pointer as DO will add it back in 
3520				;FORTH_RSP_POP 
3520				;pop hl 
3520			 
3520			 
3520 22 bc e5			ld (os_tok_ptr), hl 
3523					if DEBUG_FORTH_WORDS 
3523						DMARK "UN<" 
3523 f5				push af  
3524 3a 38 35			ld a, (.dmark)  
3527 32 65 ee			ld (debug_mark),a  
352a 3a 39 35			ld a, (.dmark+1)  
352d 32 66 ee			ld (debug_mark+1),a  
3530 3a 3a 35			ld a, (.dmark+2)  
3533 32 67 ee			ld (debug_mark+2),a  
3536 18 03			jr .pastdmark  
3538 ..			.dmark: db "UN<"  
353b f1			.pastdmark: pop af  
353c			endm  
# End of macro DMARK
353c					CALLMONITOR 
353c cd 6f ee			call debug_vector  
353f				endm  
# End of macro CALLMONITOR
353f				endif 
353f c3 0a 20			jp exec1 
3542			 
3542					 
3542			 
3542			 
3542					NEXTW 
3542 c3 81 1f			jp macro_next 
3545				endm 
# End of macro NEXTW
3545			 
3545			 
3545			.ENDFLOW: 
3545			 
3545			; eof 
3545			 
# End of file forth_words_flow.asm
3545			; TODO something wrong with the first word of the next word group. no matter which group applies. On device, sc114 is fine. bad memory? 
3545			include "forth_words_logic.asm" 
3545			 
3545			; | ## Logic Words 
3545			 
3545			.NOT: 
3545				CWHEAD .IS 25 "NOT" 3 WORD_FLAG_CODE 
3545 2d				db WORD_SYS_CORE+25             
3546 8d 35			dw .IS            
3548 04				db 3 + 1 
3549 .. 00			db "NOT",0              
354d				endm 
# End of macro CWHEAD
354d			; | NOT ( u  -- u ) Inverse true/false on stack | DONE 
354d					if DEBUG_FORTH_WORDS_KEY 
354d						DMARK "NOT" 
354d f5				push af  
354e 3a 62 35			ld a, (.dmark)  
3551 32 65 ee			ld (debug_mark),a  
3554 3a 63 35			ld a, (.dmark+1)  
3557 32 66 ee			ld (debug_mark+1),a  
355a 3a 64 35			ld a, (.dmark+2)  
355d 32 67 ee			ld (debug_mark+2),a  
3560 18 03			jr .pastdmark  
3562 ..			.dmark: db "NOT"  
3565 f1			.pastdmark: pop af  
3566			endm  
# End of macro DMARK
3566						CALLMONITOR 
3566 cd 6f ee			call debug_vector  
3569				endm  
# End of macro CALLMONITOR
3569					endif 
3569					FORTH_DSP 
3569 cd 5b 1d			call macro_forth_dsp 
356c				endm 
# End of macro FORTH_DSP
356c 7e					ld a,(hl)	; get type of value on TOS 
356d fe 02				cp DS_TYPE_INUM  
356f 28 03				jr z, .noti 
3571					NEXTW 
3571 c3 81 1f			jp macro_next 
3574				endm 
# End of macro NEXTW
3574			.noti:          FORTH_DSP_VALUEHL 
3574 cd 95 1d			call macro_dsp_valuehl 
3577				endm 
# End of macro FORTH_DSP_VALUEHL
3577			;		push hl 
3577					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3577 cd 4d 1e			call macro_forth_dsp_pop 
357a				endm 
# End of macro FORTH_DSP_POP
357a			;		pop hl 
357a 3e 00				ld a,0 
357c bd					cp l 
357d 28 04				jr z, .not2t 
357f 2e 00				ld l, 0 
3581 18 02				jr .notip 
3583			 
3583 2e ff		.not2t:		ld l, 255 
3585			 
3585 26 00		.notip:		ld h, 0	 
3587			 
3587 cd 90 1b				call forth_push_numhl 
358a					NEXTW 
358a c3 81 1f			jp macro_next 
358d				endm 
# End of macro NEXTW
358d			 
358d			.IS: 
358d				CWHEAD .LZERO 25 "IS" 2 WORD_FLAG_CODE 
358d 2d				db WORD_SYS_CORE+25             
358e b3 35			dw .LZERO            
3590 03				db 2 + 1 
3591 .. 00			db "IS",0              
3594				endm 
# End of macro CWHEAD
3594			; | IS ( s1 s2  -- f ) Push true if string s1 is the same as s2 | TODO 
3594					if DEBUG_FORTH_WORDS_KEY 
3594						DMARK "IS." 
3594 f5				push af  
3595 3a a9 35			ld a, (.dmark)  
3598 32 65 ee			ld (debug_mark),a  
359b 3a aa 35			ld a, (.dmark+1)  
359e 32 66 ee			ld (debug_mark+1),a  
35a1 3a ab 35			ld a, (.dmark+2)  
35a4 32 67 ee			ld (debug_mark+2),a  
35a7 18 03			jr .pastdmark  
35a9 ..			.dmark: db "IS."  
35ac f1			.pastdmark: pop af  
35ad			endm  
# End of macro DMARK
35ad						CALLMONITOR 
35ad cd 6f ee			call debug_vector  
35b0				endm  
# End of macro CALLMONITOR
35b0					endif 
35b0					NEXTW 
35b0 c3 81 1f			jp macro_next 
35b3				endm 
# End of macro NEXTW
35b3			.LZERO: 
35b3				CWHEAD .TZERO 25 "0<" 2 WORD_FLAG_CODE 
35b3 2d				db WORD_SYS_CORE+25             
35b4 bd 35			dw .TZERO            
35b6 03				db 2 + 1 
35b7 .. 00			db "0<",0              
35ba				endm 
# End of macro CWHEAD
35ba			; | 0< ( u -- f ) Push true if u is less than o | CANT DO UNTIL FLOAT 
35ba					NEXTW 
35ba c3 81 1f			jp macro_next 
35bd				endm 
# End of macro NEXTW
35bd			.TZERO: 
35bd				CWHEAD .LESS 26 "0=" 2 WORD_FLAG_CODE 
35bd 2e				db WORD_SYS_CORE+26             
35be 04 36			dw .LESS            
35c0 03				db 2 + 1 
35c1 .. 00			db "0=",0              
35c4				endm 
# End of macro CWHEAD
35c4			; | 0= ( u -- f ) Push true if u equals 0 | DONE 
35c4				; TODO add floating point number detection 
35c4					;v5 FORTH_DSP_VALUE 
35c4					if DEBUG_FORTH_WORDS_KEY 
35c4						DMARK "0=." 
35c4 f5				push af  
35c5 3a d9 35			ld a, (.dmark)  
35c8 32 65 ee			ld (debug_mark),a  
35cb 3a da 35			ld a, (.dmark+1)  
35ce 32 66 ee			ld (debug_mark+1),a  
35d1 3a db 35			ld a, (.dmark+2)  
35d4 32 67 ee			ld (debug_mark+2),a  
35d7 18 03			jr .pastdmark  
35d9 ..			.dmark: db "0=."  
35dc f1			.pastdmark: pop af  
35dd			endm  
# End of macro DMARK
35dd						CALLMONITOR 
35dd cd 6f ee			call debug_vector  
35e0				endm  
# End of macro CALLMONITOR
35e0					endif 
35e0					FORTH_DSP 
35e0 cd 5b 1d			call macro_forth_dsp 
35e3				endm 
# End of macro FORTH_DSP
35e3 7e					ld a,(hl)	; get type of value on TOS 
35e4 fe 02				cp DS_TYPE_INUM  
35e6 28 00				jr z, .tz_inum 
35e8			 
35e8				if FORTH_ENABLE_FLOATMATH 
35e8					jr .tz_done 
35e8			 
35e8				endif 
35e8					 
35e8			 
35e8			.tz_inum: 
35e8					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
35e8 cd 95 1d			call macro_dsp_valuehl 
35eb				endm 
# End of macro FORTH_DSP_VALUEHL
35eb			 
35eb			;		push hl 
35eb			 
35eb					; destroy value TOS 
35eb			 
35eb					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
35eb cd 4d 1e			call macro_forth_dsp_pop 
35ee				endm 
# End of macro FORTH_DSP_POP
35ee			 
35ee			;		pop hl 
35ee			 
35ee 3e 00				ld a,0 
35f0			 
35f0 bd					cp l 
35f1 20 08				jr nz, .tz_notzero 
35f3			 
35f3 bc					cp h 
35f4			 
35f4 20 05				jr nz, .tz_notzero 
35f6			 
35f6			 
35f6 21 01 00				ld hl, FORTH_TRUE 
35f9 18 03				jr .tz_done 
35fb			 
35fb 21 00 00		.tz_notzero:	ld hl, FORTH_FALSE 
35fe			 
35fe					; push value back onto stack for another op etc 
35fe			 
35fe			.tz_done: 
35fe cd 90 1b				call forth_push_numhl 
3601			 
3601					NEXTW 
3601 c3 81 1f			jp macro_next 
3604				endm 
# End of macro NEXTW
3604			.LESS: 
3604				CWHEAD .GT 27 "<" 1 WORD_FLAG_CODE 
3604 2f				db WORD_SYS_CORE+27             
3605 6d 36			dw .GT            
3607 02				db 1 + 1 
3608 .. 00			db "<",0              
360a				endm 
# End of macro CWHEAD
360a			; | < ( u1 u2 -- f ) True if u1 is less than u2 | DONE 
360a				; TODO add floating point number detection 
360a					if DEBUG_FORTH_WORDS_KEY 
360a						DMARK "LES" 
360a f5				push af  
360b 3a 1f 36			ld a, (.dmark)  
360e 32 65 ee			ld (debug_mark),a  
3611 3a 20 36			ld a, (.dmark+1)  
3614 32 66 ee			ld (debug_mark+1),a  
3617 3a 21 36			ld a, (.dmark+2)  
361a 32 67 ee			ld (debug_mark+2),a  
361d 18 03			jr .pastdmark  
361f ..			.dmark: db "LES"  
3622 f1			.pastdmark: pop af  
3623			endm  
# End of macro DMARK
3623						CALLMONITOR 
3623 cd 6f ee			call debug_vector  
3626				endm  
# End of macro CALLMONITOR
3626					endif 
3626					FORTH_DSP 
3626 cd 5b 1d			call macro_forth_dsp 
3629				endm 
# End of macro FORTH_DSP
3629					;v5 FORTH_DSP_VALUE 
3629 7e					ld a,(hl)	; get type of value on TOS 
362a fe 02				cp DS_TYPE_INUM  
362c 28 00				jr z, .less_inum 
362e			 
362e				if FORTH_ENABLE_FLOATMATH 
362e					jr .less_done 
362e			 
362e				endif 
362e					 
362e			 
362e			.less_inum: 
362e					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
362e cd 95 1d			call macro_dsp_valuehl 
3631				endm 
# End of macro FORTH_DSP_VALUEHL
3631			 
3631 e5					push hl  ; u2 
3632			 
3632					; destroy value TOS 
3632			 
3632					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3632 cd 4d 1e			call macro_forth_dsp_pop 
3635				endm 
# End of macro FORTH_DSP_POP
3635			 
3635			 
3635					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3635 cd 95 1d			call macro_dsp_valuehl 
3638				endm 
# End of macro FORTH_DSP_VALUEHL
3638			 
3638 e5					push hl    ; u1 
3639			 
3639					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3639 cd 4d 1e			call macro_forth_dsp_pop 
363c				endm 
# End of macro FORTH_DSP_POP
363c			 
363c			 
363c b7			 or a      ;clear carry flag 
363d 01 00 00		 ld bc, FORTH_FALSE 
3640 e1			  pop hl    ; u1 
3641 d1			  pop de    ; u2 
3642 ed 52		  sbc hl,de 
3644 30 03		  jr nc,.lscont   	;	if hl >= de, carry flag will be cleared 
3646			 
3646 01 01 00		 ld bc, FORTH_TRUE 
3649			.lscont:  
3649 c5					push bc 
364a e1					pop hl 
364b			 
364b					if DEBUG_FORTH_WORDS 
364b						DMARK "LT1" 
364b f5				push af  
364c 3a 60 36			ld a, (.dmark)  
364f 32 65 ee			ld (debug_mark),a  
3652 3a 61 36			ld a, (.dmark+1)  
3655 32 66 ee			ld (debug_mark+1),a  
3658 3a 62 36			ld a, (.dmark+2)  
365b 32 67 ee			ld (debug_mark+2),a  
365e 18 03			jr .pastdmark  
3660 ..			.dmark: db "LT1"  
3663 f1			.pastdmark: pop af  
3664			endm  
# End of macro DMARK
3664						CALLMONITOR 
3664 cd 6f ee			call debug_vector  
3667				endm  
# End of macro CALLMONITOR
3667					endif 
3667 cd 90 1b				call forth_push_numhl 
366a			 
366a					NEXTW 
366a c3 81 1f			jp macro_next 
366d				endm 
# End of macro NEXTW
366d			.GT: 
366d				CWHEAD .EQUAL 28 ">" 1 WORD_FLAG_CODE 
366d 30				db WORD_SYS_CORE+28             
366e d6 36			dw .EQUAL            
3670 02				db 1 + 1 
3671 .. 00			db ">",0              
3673				endm 
# End of macro CWHEAD
3673			; | > ( u1 u2 -- f ) True if u1 is greater than u2 | DONE 
3673				; TODO add floating point number detection 
3673					if DEBUG_FORTH_WORDS_KEY 
3673						DMARK "GRT" 
3673 f5				push af  
3674 3a 88 36			ld a, (.dmark)  
3677 32 65 ee			ld (debug_mark),a  
367a 3a 89 36			ld a, (.dmark+1)  
367d 32 66 ee			ld (debug_mark+1),a  
3680 3a 8a 36			ld a, (.dmark+2)  
3683 32 67 ee			ld (debug_mark+2),a  
3686 18 03			jr .pastdmark  
3688 ..			.dmark: db "GRT"  
368b f1			.pastdmark: pop af  
368c			endm  
# End of macro DMARK
368c						CALLMONITOR 
368c cd 6f ee			call debug_vector  
368f				endm  
# End of macro CALLMONITOR
368f					endif 
368f					FORTH_DSP 
368f cd 5b 1d			call macro_forth_dsp 
3692				endm 
# End of macro FORTH_DSP
3692					;FORTH_DSP_VALUE 
3692 7e					ld a,(hl)	; get type of value on TOS 
3693 fe 02				cp DS_TYPE_INUM  
3695 28 00				jr z, .gt_inum 
3697			 
3697				if FORTH_ENABLE_FLOATMATH 
3697					jr .gt_done 
3697			 
3697				endif 
3697					 
3697			 
3697			.gt_inum: 
3697					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3697 cd 95 1d			call macro_dsp_valuehl 
369a				endm 
# End of macro FORTH_DSP_VALUEHL
369a			 
369a e5					push hl  ; u2 
369b			 
369b					; destroy value TOS 
369b			 
369b					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
369b cd 4d 1e			call macro_forth_dsp_pop 
369e				endm 
# End of macro FORTH_DSP_POP
369e			 
369e			 
369e					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
369e cd 95 1d			call macro_dsp_valuehl 
36a1				endm 
# End of macro FORTH_DSP_VALUEHL
36a1			 
36a1 e5					push hl    ; u1 
36a2			 
36a2					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
36a2 cd 4d 1e			call macro_forth_dsp_pop 
36a5				endm 
# End of macro FORTH_DSP_POP
36a5			 
36a5			 
36a5 b7			 or a      ;clear carry flag 
36a6 01 00 00		 ld bc, FORTH_FALSE 
36a9 e1			  pop hl    ; u1 
36aa d1			  pop de    ; u2 
36ab ed 52		  sbc hl,de 
36ad 38 03		  jr c,.gtcont   	;	if hl >= de, carry flag will be cleared 
36af			 
36af 01 01 00		 ld bc, FORTH_TRUE 
36b2			.gtcont:  
36b2 c5					push bc 
36b3 e1					pop hl 
36b4			 
36b4					if DEBUG_FORTH_WORDS 
36b4						DMARK "GT1" 
36b4 f5				push af  
36b5 3a c9 36			ld a, (.dmark)  
36b8 32 65 ee			ld (debug_mark),a  
36bb 3a ca 36			ld a, (.dmark+1)  
36be 32 66 ee			ld (debug_mark+1),a  
36c1 3a cb 36			ld a, (.dmark+2)  
36c4 32 67 ee			ld (debug_mark+2),a  
36c7 18 03			jr .pastdmark  
36c9 ..			.dmark: db "GT1"  
36cc f1			.pastdmark: pop af  
36cd			endm  
# End of macro DMARK
36cd						CALLMONITOR 
36cd cd 6f ee			call debug_vector  
36d0				endm  
# End of macro CALLMONITOR
36d0					endif 
36d0 cd 90 1b				call forth_push_numhl 
36d3			 
36d3					NEXTW 
36d3 c3 81 1f			jp macro_next 
36d6				endm 
# End of macro NEXTW
36d6			.EQUAL: 
36d6				CWHEAD .ENDLOGIC 29 "=" 1 WORD_FLAG_CODE 
36d6 31				db WORD_SYS_CORE+29             
36d7 41 37			dw .ENDLOGIC            
36d9 02				db 1 + 1 
36da .. 00			db "=",0              
36dc				endm 
# End of macro CWHEAD
36dc			; | = ( u1 u2 -- f ) True if u1 equals u2 | DONE 
36dc				; TODO add floating point number detection 
36dc					if DEBUG_FORTH_WORDS_KEY 
36dc						DMARK "EQ." 
36dc f5				push af  
36dd 3a f1 36			ld a, (.dmark)  
36e0 32 65 ee			ld (debug_mark),a  
36e3 3a f2 36			ld a, (.dmark+1)  
36e6 32 66 ee			ld (debug_mark+1),a  
36e9 3a f3 36			ld a, (.dmark+2)  
36ec 32 67 ee			ld (debug_mark+2),a  
36ef 18 03			jr .pastdmark  
36f1 ..			.dmark: db "EQ."  
36f4 f1			.pastdmark: pop af  
36f5			endm  
# End of macro DMARK
36f5						CALLMONITOR 
36f5 cd 6f ee			call debug_vector  
36f8				endm  
# End of macro CALLMONITOR
36f8					endif 
36f8					FORTH_DSP 
36f8 cd 5b 1d			call macro_forth_dsp 
36fb				endm 
# End of macro FORTH_DSP
36fb					;v5 FORTH_DSP_VALUE 
36fb 7e					ld a,(hl)	; get type of value on TOS 
36fc fe 02				cp DS_TYPE_INUM  
36fe 28 00				jr z, .eq_inum 
3700			 
3700				if FORTH_ENABLE_FLOATMATH 
3700					jr .eq_done 
3700			 
3700				endif 
3700					 
3700			 
3700			.eq_inum: 
3700					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3700 cd 95 1d			call macro_dsp_valuehl 
3703				endm 
# End of macro FORTH_DSP_VALUEHL
3703			 
3703 e5					push hl 
3704			 
3704					; destroy value TOS 
3704			 
3704					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3704 cd 4d 1e			call macro_forth_dsp_pop 
3707				endm 
# End of macro FORTH_DSP_POP
3707			 
3707			 
3707					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3707 cd 95 1d			call macro_dsp_valuehl 
370a				endm 
# End of macro FORTH_DSP_VALUEHL
370a			 
370a					; one value on hl get other one back 
370a			 
370a e5					push hl 
370b			 
370b					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
370b cd 4d 1e			call macro_forth_dsp_pop 
370e				endm 
# End of macro FORTH_DSP_POP
370e			 
370e 0e 00				ld c, FORTH_FALSE 
3710			 
3710 e1					pop hl 
3711 d1					pop de 
3712			 
3712 7b					ld a, e 
3713 bd					cp l 
3714			 
3714 20 06				jr nz, .eq_done 
3716			 
3716 7a					ld a, d 
3717 bc					cp h 
3718			 
3718 20 02				jr nz, .eq_done 
371a			 
371a 0e 01				ld c, FORTH_TRUE 
371c					 
371c			 
371c			 
371c			.eq_done: 
371c			 
371c					; TODO push value back onto stack for another op etc 
371c			 
371c 26 00				ld h, 0 
371e 69					ld l, c 
371f					if DEBUG_FORTH_WORDS 
371f						DMARK "EQ1" 
371f f5				push af  
3720 3a 34 37			ld a, (.dmark)  
3723 32 65 ee			ld (debug_mark),a  
3726 3a 35 37			ld a, (.dmark+1)  
3729 32 66 ee			ld (debug_mark+1),a  
372c 3a 36 37			ld a, (.dmark+2)  
372f 32 67 ee			ld (debug_mark+2),a  
3732 18 03			jr .pastdmark  
3734 ..			.dmark: db "EQ1"  
3737 f1			.pastdmark: pop af  
3738			endm  
# End of macro DMARK
3738						CALLMONITOR 
3738 cd 6f ee			call debug_vector  
373b				endm  
# End of macro CALLMONITOR
373b					endif 
373b cd 90 1b				call forth_push_numhl 
373e			 
373e					NEXTW 
373e c3 81 1f			jp macro_next 
3741				endm 
# End of macro NEXTW
3741			 
3741			 
3741			.ENDLOGIC: 
3741			; eof 
3741			 
3741			 
# End of file forth_words_logic.asm
3741			include "forth_words_maths.asm" 
3741			 
3741			; | ## Maths Words 
3741			 
3741			.PLUS:	 
3741				CWHEAD .NEG 1 "+" 1 WORD_FLAG_CODE 
3741 15				db WORD_SYS_CORE+1             
3742 9f 37			dw .NEG            
3744 02				db 1 + 1 
3745 .. 00			db "+",0              
3747				endm 
# End of macro CWHEAD
3747			; | + ( u u -- u )    Add two numbers and push result   | INT DONE 
3747					if DEBUG_FORTH_WORDS_KEY 
3747						DMARK "PLU" 
3747 f5				push af  
3748 3a 5c 37			ld a, (.dmark)  
374b 32 65 ee			ld (debug_mark),a  
374e 3a 5d 37			ld a, (.dmark+1)  
3751 32 66 ee			ld (debug_mark+1),a  
3754 3a 5e 37			ld a, (.dmark+2)  
3757 32 67 ee			ld (debug_mark+2),a  
375a 18 03			jr .pastdmark  
375c ..			.dmark: db "PLU"  
375f f1			.pastdmark: pop af  
3760			endm  
# End of macro DMARK
3760						CALLMONITOR 
3760 cd 6f ee			call debug_vector  
3763				endm  
# End of macro CALLMONITOR
3763					endif 
3763					; add top two values and push back result 
3763			 
3763					;for v5 FORTH_DSP_VALUE 
3763					FORTH_DSP 
3763 cd 5b 1d			call macro_forth_dsp 
3766				endm 
# End of macro FORTH_DSP
3766 7e					ld a,(hl)	; get type of value on TOS 
3767 fe 02				cp DS_TYPE_INUM  
3769 28 03				jr z, .dot_inum 
376b			 
376b					NEXTW 
376b c3 81 1f			jp macro_next 
376e				endm 
# End of macro NEXTW
376e			 
376e			; float maths 
376e			 
376e				if FORTH_ENABLE_FLOATMATH 
376e						inc hl      ; now at start of numeric as string 
376e			 
376e					if DEBUG_FORTH_MATHS 
376e						DMARK "ADD" 
376e				CALLMONITOR 
376e					endif 
376e			 
376e					;ld ix, hl 
376e					call CON 
376e			 
376e			 
376e					push hl 
376e					 
376e					 
376e			 
376e						FORTH_DSP_POP      ; TODO add stock underflow checks and throws  
376e			 
376e					; get next number 
376e			 
376e						FORTH_DSP_VALUE 
376e			 
376e						inc hl      ; now at start of numeric as string 
376e			 
376e					;ld ix, hl 
376e					call CON 
376e			 
376e					push hl 
376e			 
376e			 
376e						FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
376e			 
376e						; TODO do add 
376e			 
376e						call IADD 
376e			 
376e						; TODO get result back as ascii 
376e			 
376e						; TODO push result  
376e			 
376e			 
376e			 
376e						jr .dot_done 
376e				endif 
376e			 
376e			.dot_inum: 
376e			 
376e			 
376e					if DEBUG_FORTH_DOT 
376e						DMARK "+IT" 
376e f5				push af  
376f 3a 83 37			ld a, (.dmark)  
3772 32 65 ee			ld (debug_mark),a  
3775 3a 84 37			ld a, (.dmark+1)  
3778 32 66 ee			ld (debug_mark+1),a  
377b 3a 85 37			ld a, (.dmark+2)  
377e 32 67 ee			ld (debug_mark+2),a  
3781 18 03			jr .pastdmark  
3783 ..			.dmark: db "+IT"  
3786 f1			.pastdmark: pop af  
3787			endm  
# End of macro DMARK
3787				CALLMONITOR 
3787 cd 6f ee			call debug_vector  
378a				endm  
# End of macro CALLMONITOR
378a					endif 
378a			 
378a					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
378a cd 95 1d			call macro_dsp_valuehl 
378d				endm 
# End of macro FORTH_DSP_VALUEHL
378d			 
378d				; TODO add floating point number detection 
378d			 
378d e5					push hl 
378e			 
378e					; destroy value TOS 
378e			 
378e					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
378e cd 4d 1e			call macro_forth_dsp_pop 
3791				endm 
# End of macro FORTH_DSP_POP
3791			 
3791			 
3791					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3791 cd 95 1d			call macro_dsp_valuehl 
3794				endm 
# End of macro FORTH_DSP_VALUEHL
3794			 
3794					; one value on hl get other one back 
3794			 
3794 d1					pop de 
3795			 
3795					; do the add 
3795			 
3795 19					add hl,de 
3796			 
3796					; save it 
3796			 
3796			;		push hl	 
3796			 
3796					; 
3796			 
3796					; destroy value TOS 
3796			 
3796					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3796 cd 4d 1e			call macro_forth_dsp_pop 
3799				endm 
# End of macro FORTH_DSP_POP
3799			 
3799					; TODO push value back onto stack for another op etc 
3799			 
3799			;		pop hl 
3799			 
3799			.dot_done: 
3799 cd 90 1b				call forth_push_numhl 
379c			 
379c					NEXTW 
379c c3 81 1f			jp macro_next 
379f				endm 
# End of macro NEXTW
379f			.NEG: 
379f			 
379f				CWHEAD .DIV 3 "-" 1 WORD_FLAG_CODE 
379f 17				db WORD_SYS_CORE+3             
37a0 e2 37			dw .DIV            
37a2 02				db 1 + 1 
37a3 .. 00			db "-",0              
37a5				endm 
# End of macro CWHEAD
37a5			; | - ( u1 u2 -- u )    Subtract u2 from u1 and push result  | INT DONE 
37a5					if DEBUG_FORTH_WORDS_KEY 
37a5						DMARK "SUB" 
37a5 f5				push af  
37a6 3a ba 37			ld a, (.dmark)  
37a9 32 65 ee			ld (debug_mark),a  
37ac 3a bb 37			ld a, (.dmark+1)  
37af 32 66 ee			ld (debug_mark+1),a  
37b2 3a bc 37			ld a, (.dmark+2)  
37b5 32 67 ee			ld (debug_mark+2),a  
37b8 18 03			jr .pastdmark  
37ba ..			.dmark: db "SUB"  
37bd f1			.pastdmark: pop af  
37be			endm  
# End of macro DMARK
37be						CALLMONITOR 
37be cd 6f ee			call debug_vector  
37c1				endm  
# End of macro CALLMONITOR
37c1					endif 
37c1			 
37c1			 
37c1				; TODO add floating point number detection 
37c1					; v5 FORTH_DSP_VALUE 
37c1					FORTH_DSP 
37c1 cd 5b 1d			call macro_forth_dsp 
37c4				endm 
# End of macro FORTH_DSP
37c4 7e					ld a,(hl)	; get type of value on TOS 
37c5 fe 02				cp DS_TYPE_INUM  
37c7 28 03				jr z, .neg_inum 
37c9			 
37c9					NEXTW 
37c9 c3 81 1f			jp macro_next 
37cc				endm 
# End of macro NEXTW
37cc			 
37cc			; float maths 
37cc			 
37cc				if FORTH_ENABLE_FLOATMATH 
37cc					jr .neg_done 
37cc			 
37cc				endif 
37cc					 
37cc			 
37cc			.neg_inum: 
37cc					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
37cc cd 95 1d			call macro_dsp_valuehl 
37cf				endm 
# End of macro FORTH_DSP_VALUEHL
37cf			 
37cf e5					push hl 
37d0			 
37d0					; destroy value TOS 
37d0			 
37d0					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
37d0 cd 4d 1e			call macro_forth_dsp_pop 
37d3				endm 
# End of macro FORTH_DSP_POP
37d3			 
37d3			 
37d3					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
37d3 cd 95 1d			call macro_dsp_valuehl 
37d6				endm 
# End of macro FORTH_DSP_VALUEHL
37d6			 
37d6					; one value on hl get other one back 
37d6			 
37d6 d1					pop de 
37d7			 
37d7					; do the sub 
37d7			;		ex de, hl 
37d7			 
37d7 ed 52				sbc hl,de 
37d9			 
37d9					; save it 
37d9			 
37d9			;		push hl	 
37d9			 
37d9					; 
37d9			 
37d9					; destroy value TOS 
37d9			 
37d9					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
37d9 cd 4d 1e			call macro_forth_dsp_pop 
37dc				endm 
# End of macro FORTH_DSP_POP
37dc			 
37dc					; TODO push value back onto stack for another op etc 
37dc			 
37dc			;		pop hl 
37dc			 
37dc cd 90 1b				call forth_push_numhl 
37df			.neg_done: 
37df			 
37df					NEXTW 
37df c3 81 1f			jp macro_next 
37e2				endm 
# End of macro NEXTW
37e2			.DIV: 
37e2				CWHEAD .MUL 4 "/" 1 WORD_FLAG_CODE 
37e2 18				db WORD_SYS_CORE+4             
37e3 2f 38			dw .MUL            
37e5 02				db 1 + 1 
37e6 .. 00			db "/",0              
37e8				endm 
# End of macro CWHEAD
37e8			; | / ( u1 u2 -- result remainder )     Divide u1 by u2 and push result | INT DONE 
37e8					if DEBUG_FORTH_WORDS_KEY 
37e8						DMARK "DIV" 
37e8 f5				push af  
37e9 3a fd 37			ld a, (.dmark)  
37ec 32 65 ee			ld (debug_mark),a  
37ef 3a fe 37			ld a, (.dmark+1)  
37f2 32 66 ee			ld (debug_mark+1),a  
37f5 3a ff 37			ld a, (.dmark+2)  
37f8 32 67 ee			ld (debug_mark+2),a  
37fb 18 03			jr .pastdmark  
37fd ..			.dmark: db "DIV"  
3800 f1			.pastdmark: pop af  
3801			endm  
# End of macro DMARK
3801						CALLMONITOR 
3801 cd 6f ee			call debug_vector  
3804				endm  
# End of macro CALLMONITOR
3804					endif 
3804				; TODO add floating point number detection 
3804					; v5 FORTH_DSP_VALUE 
3804					FORTH_DSP 
3804 cd 5b 1d			call macro_forth_dsp 
3807				endm 
# End of macro FORTH_DSP
3807 7e					ld a,(hl)	; get type of value on TOS 
3808 fe 02				cp DS_TYPE_INUM  
380a 28 03				jr z, .div_inum 
380c			 
380c				if FORTH_ENABLE_FLOATMATH 
380c					jr .div_done 
380c			 
380c				endif 
380c					NEXTW 
380c c3 81 1f			jp macro_next 
380f				endm 
# End of macro NEXTW
380f			.div_inum: 
380f			 
380f					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
380f cd 95 1d			call macro_dsp_valuehl 
3812				endm 
# End of macro FORTH_DSP_VALUEHL
3812			 
3812 e5					push hl    ; to go to bc 
3813			 
3813					; destroy value TOS 
3813			 
3813					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3813 cd 4d 1e			call macro_forth_dsp_pop 
3816				endm 
# End of macro FORTH_DSP_POP
3816			 
3816			 
3816					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3816 cd 95 1d			call macro_dsp_valuehl 
3819				endm 
# End of macro FORTH_DSP_VALUEHL
3819			 
3819					; hl to go to de 
3819			 
3819 e5					push hl 
381a			 
381a c1					pop bc 
381b d1					pop de		 
381c			 
381c			 
381c					if DEBUG_FORTH_MATHS 
381c						DMARK "DIV" 
381c				CALLMONITOR 
381c					endif 
381c					; one value on hl but move to a get other one back 
381c			 
381c			        
381c cd 52 0d			call Div16 
381f			 
381f			;	push af	 
381f e5				push hl 
3820 c5				push bc 
3821			 
3821					if DEBUG_FORTH_MATHS 
3821						DMARK "DI1" 
3821				CALLMONITOR 
3821					endif 
3821			 
3821					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3821 cd 4d 1e			call macro_forth_dsp_pop 
3824				endm 
# End of macro FORTH_DSP_POP
3824			 
3824			 
3824			 
3824 e1					pop hl    ; result 
3825			 
3825 cd 90 1b				call forth_push_numhl 
3828			 
3828 e1					pop hl    ; reminder 
3829			;		ld h,0 
3829			;		ld l,d 
3829			 
3829 cd 90 1b				call forth_push_numhl 
382c			.div_done: 
382c					NEXTW 
382c c3 81 1f			jp macro_next 
382f				endm 
# End of macro NEXTW
382f			.MUL: 
382f				CWHEAD .MIN 5 "*" 1 WORD_FLAG_CODE 
382f 19				db WORD_SYS_CORE+5             
3830 74 38			dw .MIN            
3832 02				db 1 + 1 
3833 .. 00			db "*",0              
3835				endm 
# End of macro CWHEAD
3835			; | * ( u1 u2 -- u )     Multiply TOS and push result | INT DONE 
3835				; TODO add floating point number detection 
3835					if DEBUG_FORTH_WORDS_KEY 
3835						DMARK "MUL" 
3835 f5				push af  
3836 3a 4a 38			ld a, (.dmark)  
3839 32 65 ee			ld (debug_mark),a  
383c 3a 4b 38			ld a, (.dmark+1)  
383f 32 66 ee			ld (debug_mark+1),a  
3842 3a 4c 38			ld a, (.dmark+2)  
3845 32 67 ee			ld (debug_mark+2),a  
3848 18 03			jr .pastdmark  
384a ..			.dmark: db "MUL"  
384d f1			.pastdmark: pop af  
384e			endm  
# End of macro DMARK
384e						CALLMONITOR 
384e cd 6f ee			call debug_vector  
3851				endm  
# End of macro CALLMONITOR
3851					endif 
3851					FORTH_DSP 
3851 cd 5b 1d			call macro_forth_dsp 
3854				endm 
# End of macro FORTH_DSP
3854					; v5 FORTH_DSP_VALUE 
3854 7e					ld a,(hl)	; get type of value on TOS 
3855 fe 02				cp DS_TYPE_INUM  
3857 28 03				jr z, .mul_inum 
3859			 
3859				if FORTH_ENABLE_FLOATMATH 
3859					jr .mul_done 
3859			 
3859				endif 
3859			 
3859					NEXTW 
3859 c3 81 1f			jp macro_next 
385c				endm 
# End of macro NEXTW
385c			.mul_inum:	 
385c			 
385c					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
385c cd 95 1d			call macro_dsp_valuehl 
385f				endm 
# End of macro FORTH_DSP_VALUEHL
385f			 
385f e5					push hl 
3860			 
3860					; destroy value TOS 
3860			 
3860					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3860 cd 4d 1e			call macro_forth_dsp_pop 
3863				endm 
# End of macro FORTH_DSP_POP
3863			 
3863			 
3863					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3863 cd 95 1d			call macro_dsp_valuehl 
3866				endm 
# End of macro FORTH_DSP_VALUEHL
3866			 
3866					; one value on hl but move to a get other one back 
3866			 
3866 7d					ld a, l 
3867			 
3867 d1					pop de 
3868			 
3868					; do the mull 
3868			;		ex de, hl 
3868			 
3868 cd 78 0d				call Mult16 
386b					; save it 
386b			 
386b			;		push hl	 
386b			 
386b					; 
386b			 
386b					; destroy value TOS 
386b			 
386b					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
386b cd 4d 1e			call macro_forth_dsp_pop 
386e				endm 
# End of macro FORTH_DSP_POP
386e			 
386e					; TODO push value back onto stack for another op etc 
386e			 
386e			;		pop hl 
386e			 
386e cd 90 1b				call forth_push_numhl 
3871			 
3871			.mul_done: 
3871					NEXTW 
3871 c3 81 1f			jp macro_next 
3874				endm 
# End of macro NEXTW
3874			 
3874			 
3874			 
3874			 
3874			.MIN: 
3874				CWHEAD .MAX 53 "MIN" 3 WORD_FLAG_CODE 
3874 49				db WORD_SYS_CORE+53             
3875 f5 38			dw .MAX            
3877 04				db 3 + 1 
3878 .. 00			db "MIN",0              
387c				endm 
# End of macro CWHEAD
387c			; | MIN (  u1 u2 -- u3 ) Whichever is the smallest value is pushed back onto the stack | DONE 
387c					if DEBUG_FORTH_WORDS_KEY 
387c						DMARK "MIN" 
387c f5				push af  
387d 3a 91 38			ld a, (.dmark)  
3880 32 65 ee			ld (debug_mark),a  
3883 3a 92 38			ld a, (.dmark+1)  
3886 32 66 ee			ld (debug_mark+1),a  
3889 3a 93 38			ld a, (.dmark+2)  
388c 32 67 ee			ld (debug_mark+2),a  
388f 18 03			jr .pastdmark  
3891 ..			.dmark: db "MIN"  
3894 f1			.pastdmark: pop af  
3895			endm  
# End of macro DMARK
3895						CALLMONITOR 
3895 cd 6f ee			call debug_vector  
3898				endm  
# End of macro CALLMONITOR
3898					endif 
3898					; get u2 
3898			 
3898					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3898 cd 95 1d			call macro_dsp_valuehl 
389b				endm 
# End of macro FORTH_DSP_VALUEHL
389b			 
389b e5					push hl   ; u2 
389c			 
389c					; destroy value TOS 
389c			 
389c					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
389c cd 4d 1e			call macro_forth_dsp_pop 
389f				endm 
# End of macro FORTH_DSP_POP
389f			 
389f					; get u1 
389f			 
389f					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
389f cd 95 1d			call macro_dsp_valuehl 
38a2				endm 
# End of macro FORTH_DSP_VALUEHL
38a2			 
38a2 e5					push hl  ; u1 
38a3			 
38a3					; destroy value TOS 
38a3			 
38a3					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
38a3 cd 4d 1e			call macro_forth_dsp_pop 
38a6				endm 
# End of macro FORTH_DSP_POP
38a6			 
38a6 b7			 or a      ;clear carry flag 
38a7 e1			  pop hl    ; u1 
38a8 d1			  pop de    ; u2 
38a9 e5				push hl   ; saved in case hl is lowest 
38aa ed 52		  sbc hl,de 
38ac 30 23		  jr nc,.mincont   	;	if hl >= de, carry flag will be cleared 
38ae			 
38ae e1				pop hl 
38af					if DEBUG_FORTH_WORDS 
38af						DMARK "MIN" 
38af f5				push af  
38b0 3a c4 38			ld a, (.dmark)  
38b3 32 65 ee			ld (debug_mark),a  
38b6 3a c5 38			ld a, (.dmark+1)  
38b9 32 66 ee			ld (debug_mark+1),a  
38bc 3a c6 38			ld a, (.dmark+2)  
38bf 32 67 ee			ld (debug_mark+2),a  
38c2 18 03			jr .pastdmark  
38c4 ..			.dmark: db "MIN"  
38c7 f1			.pastdmark: pop af  
38c8			endm  
# End of macro DMARK
38c8						CALLMONITOR 
38c8 cd 6f ee			call debug_vector  
38cb				endm  
# End of macro CALLMONITOR
38cb					endif 
38cb cd 90 1b				call forth_push_numhl 
38ce			 
38ce				       NEXTW 
38ce c3 81 1f			jp macro_next 
38d1				endm 
# End of macro NEXTW
38d1			 
38d1			.mincont:  
38d1 c1				pop bc   ; tidy up 
38d2 eb				ex de , hl  
38d3					if DEBUG_FORTH_WORDS 
38d3						DMARK "MI1" 
38d3 f5				push af  
38d4 3a e8 38			ld a, (.dmark)  
38d7 32 65 ee			ld (debug_mark),a  
38da 3a e9 38			ld a, (.dmark+1)  
38dd 32 66 ee			ld (debug_mark+1),a  
38e0 3a ea 38			ld a, (.dmark+2)  
38e3 32 67 ee			ld (debug_mark+2),a  
38e6 18 03			jr .pastdmark  
38e8 ..			.dmark: db "MI1"  
38eb f1			.pastdmark: pop af  
38ec			endm  
# End of macro DMARK
38ec						CALLMONITOR 
38ec cd 6f ee			call debug_vector  
38ef				endm  
# End of macro CALLMONITOR
38ef					endif 
38ef cd 90 1b				call forth_push_numhl 
38f2			 
38f2				       NEXTW 
38f2 c3 81 1f			jp macro_next 
38f5				endm 
# End of macro NEXTW
38f5			.MAX: 
38f5				CWHEAD .RND16 54 "MAX" 3 WORD_FLAG_CODE 
38f5 4a				db WORD_SYS_CORE+54             
38f6 76 39			dw .RND16            
38f8 04				db 3 + 1 
38f9 .. 00			db "MAX",0              
38fd				endm 
# End of macro CWHEAD
38fd			; | MAX (  u1 u2 -- u3 )  Whichever is the largest value is pushed back onto the stack | DONE 
38fd					if DEBUG_FORTH_WORDS_KEY 
38fd						DMARK "MAX" 
38fd f5				push af  
38fe 3a 12 39			ld a, (.dmark)  
3901 32 65 ee			ld (debug_mark),a  
3904 3a 13 39			ld a, (.dmark+1)  
3907 32 66 ee			ld (debug_mark+1),a  
390a 3a 14 39			ld a, (.dmark+2)  
390d 32 67 ee			ld (debug_mark+2),a  
3910 18 03			jr .pastdmark  
3912 ..			.dmark: db "MAX"  
3915 f1			.pastdmark: pop af  
3916			endm  
# End of macro DMARK
3916						CALLMONITOR 
3916 cd 6f ee			call debug_vector  
3919				endm  
# End of macro CALLMONITOR
3919					endif 
3919					; get u2 
3919			 
3919					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3919 cd 95 1d			call macro_dsp_valuehl 
391c				endm 
# End of macro FORTH_DSP_VALUEHL
391c			 
391c e5					push hl   ; u2 
391d			 
391d					; destroy value TOS 
391d			 
391d					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
391d cd 4d 1e			call macro_forth_dsp_pop 
3920				endm 
# End of macro FORTH_DSP_POP
3920			 
3920					; get u1 
3920			 
3920					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3920 cd 95 1d			call macro_dsp_valuehl 
3923				endm 
# End of macro FORTH_DSP_VALUEHL
3923			 
3923 e5					push hl  ; u1 
3924			 
3924					; destroy value TOS 
3924			 
3924					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3924 cd 4d 1e			call macro_forth_dsp_pop 
3927				endm 
# End of macro FORTH_DSP_POP
3927			 
3927 b7			 or a      ;clear carry flag 
3928 e1			  pop hl    ; u1 
3929 d1			  pop de    ; u2 
392a e5				push hl   ; saved in case hl is lowest 
392b ed 52		  sbc hl,de 
392d 38 23		  jr c,.maxcont   	;	if hl <= de, carry flag will be cleared 
392f			 
392f e1				pop hl 
3930					if DEBUG_FORTH_WORDS 
3930						DMARK "MAX" 
3930 f5				push af  
3931 3a 45 39			ld a, (.dmark)  
3934 32 65 ee			ld (debug_mark),a  
3937 3a 46 39			ld a, (.dmark+1)  
393a 32 66 ee			ld (debug_mark+1),a  
393d 3a 47 39			ld a, (.dmark+2)  
3940 32 67 ee			ld (debug_mark+2),a  
3943 18 03			jr .pastdmark  
3945 ..			.dmark: db "MAX"  
3948 f1			.pastdmark: pop af  
3949			endm  
# End of macro DMARK
3949						CALLMONITOR 
3949 cd 6f ee			call debug_vector  
394c				endm  
# End of macro CALLMONITOR
394c					endif 
394c cd 90 1b				call forth_push_numhl 
394f			 
394f				       NEXTW 
394f c3 81 1f			jp macro_next 
3952				endm 
# End of macro NEXTW
3952			 
3952			.maxcont:  
3952 c1				pop bc   ; tidy up 
3953 eb				ex de , hl  
3954					if DEBUG_FORTH_WORDS 
3954						DMARK "MA1" 
3954 f5				push af  
3955 3a 69 39			ld a, (.dmark)  
3958 32 65 ee			ld (debug_mark),a  
395b 3a 6a 39			ld a, (.dmark+1)  
395e 32 66 ee			ld (debug_mark+1),a  
3961 3a 6b 39			ld a, (.dmark+2)  
3964 32 67 ee			ld (debug_mark+2),a  
3967 18 03			jr .pastdmark  
3969 ..			.dmark: db "MA1"  
396c f1			.pastdmark: pop af  
396d			endm  
# End of macro DMARK
396d						CALLMONITOR 
396d cd 6f ee			call debug_vector  
3970				endm  
# End of macro CALLMONITOR
3970					endif 
3970 cd 90 1b				call forth_push_numhl 
3973				       NEXTW 
3973 c3 81 1f			jp macro_next 
3976				endm 
# End of macro NEXTW
3976			 
3976			.RND16: 
3976				CWHEAD .RND8 58 "RND16" 5 WORD_FLAG_CODE 
3976 4e				db WORD_SYS_CORE+58             
3977 a5 39			dw .RND8            
3979 06				db 5 + 1 
397a .. 00			db "RND16",0              
3980				endm 
# End of macro CWHEAD
3980			; | RND16 (  -- n ) Generate a random 16bit number and push to stack | DONE 
3980					if DEBUG_FORTH_WORDS_KEY 
3980						DMARK "R16" 
3980 f5				push af  
3981 3a 95 39			ld a, (.dmark)  
3984 32 65 ee			ld (debug_mark),a  
3987 3a 96 39			ld a, (.dmark+1)  
398a 32 66 ee			ld (debug_mark+1),a  
398d 3a 97 39			ld a, (.dmark+2)  
3990 32 67 ee			ld (debug_mark+2),a  
3993 18 03			jr .pastdmark  
3995 ..			.dmark: db "R16"  
3998 f1			.pastdmark: pop af  
3999			endm  
# End of macro DMARK
3999						CALLMONITOR 
3999 cd 6f ee			call debug_vector  
399c				endm  
# End of macro CALLMONITOR
399c					endif 
399c cd 1c 0d				call prng16  
399f cd 90 1b				call forth_push_numhl 
39a2				       NEXTW 
39a2 c3 81 1f			jp macro_next 
39a5				endm 
# End of macro NEXTW
39a5			.RND8: 
39a5				CWHEAD .RND 76 "RND8" 4 WORD_FLAG_CODE 
39a5 60				db WORD_SYS_CORE+76             
39a6 da 39			dw .RND            
39a8 05				db 4 + 1 
39a9 .. 00			db "RND8",0              
39ae				endm 
# End of macro CWHEAD
39ae			; | RND8 (  -- n ) Generate a random 8bit number and push to stack | DONE 
39ae					if DEBUG_FORTH_WORDS_KEY 
39ae						DMARK "RN8" 
39ae f5				push af  
39af 3a c3 39			ld a, (.dmark)  
39b2 32 65 ee			ld (debug_mark),a  
39b5 3a c4 39			ld a, (.dmark+1)  
39b8 32 66 ee			ld (debug_mark+1),a  
39bb 3a c5 39			ld a, (.dmark+2)  
39be 32 67 ee			ld (debug_mark+2),a  
39c1 18 03			jr .pastdmark  
39c3 ..			.dmark: db "RN8"  
39c6 f1			.pastdmark: pop af  
39c7			endm  
# End of macro DMARK
39c7						CALLMONITOR 
39c7 cd 6f ee			call debug_vector  
39ca				endm  
# End of macro CALLMONITOR
39ca					endif 
39ca 2a a3 eb				ld hl,(xrandc) 
39cd 23					inc hl 
39ce cd 36 0d				call xrnd 
39d1 6f					ld l,a	 
39d2 26 00				ld h,0 
39d4 cd 90 1b				call forth_push_numhl 
39d7				       NEXTW 
39d7 c3 81 1f			jp macro_next 
39da				endm 
# End of macro NEXTW
39da			.RND: 
39da				CWHEAD .ENDMATHS 76 "RND" 3 WORD_FLAG_CODE 
39da 60				db WORD_SYS_CORE+76             
39db e0 3a			dw .ENDMATHS            
39dd 04				db 3 + 1 
39de .. 00			db "RND",0              
39e2				endm 
# End of macro CWHEAD
39e2			; | RND ( u1 u2 -- u ) Generate a random number no lower than u1 and no higher than u2 and push to stack | DONE 
39e2			 
39e2					if DEBUG_FORTH_WORDS_KEY 
39e2						DMARK "RND" 
39e2 f5				push af  
39e3 3a f7 39			ld a, (.dmark)  
39e6 32 65 ee			ld (debug_mark),a  
39e9 3a f8 39			ld a, (.dmark+1)  
39ec 32 66 ee			ld (debug_mark+1),a  
39ef 3a f9 39			ld a, (.dmark+2)  
39f2 32 67 ee			ld (debug_mark+2),a  
39f5 18 03			jr .pastdmark  
39f7 ..			.dmark: db "RND"  
39fa f1			.pastdmark: pop af  
39fb			endm  
# End of macro DMARK
39fb						CALLMONITOR 
39fb cd 6f ee			call debug_vector  
39fe				endm  
# End of macro CALLMONITOR
39fe					endif 
39fe					 
39fe					FORTH_DSP_VALUEHL    ; upper range 
39fe cd 95 1d			call macro_dsp_valuehl 
3a01				endm 
# End of macro FORTH_DSP_VALUEHL
3a01			 
3a01 22 a7 eb				ld (LFSRSeed), hl	 
3a04			 
3a04					if DEBUG_FORTH_WORDS 
3a04						DMARK "RN1" 
3a04 f5				push af  
3a05 3a 19 3a			ld a, (.dmark)  
3a08 32 65 ee			ld (debug_mark),a  
3a0b 3a 1a 3a			ld a, (.dmark+1)  
3a0e 32 66 ee			ld (debug_mark+1),a  
3a11 3a 1b 3a			ld a, (.dmark+2)  
3a14 32 67 ee			ld (debug_mark+2),a  
3a17 18 03			jr .pastdmark  
3a19 ..			.dmark: db "RN1"  
3a1c f1			.pastdmark: pop af  
3a1d			endm  
# End of macro DMARK
3a1d						CALLMONITOR 
3a1d cd 6f ee			call debug_vector  
3a20				endm  
# End of macro CALLMONITOR
3a20					endif 
3a20					FORTH_DSP_POP 
3a20 cd 4d 1e			call macro_forth_dsp_pop 
3a23				endm 
# End of macro FORTH_DSP_POP
3a23			 
3a23					FORTH_DSP_VALUEHL    ; low range 
3a23 cd 95 1d			call macro_dsp_valuehl 
3a26				endm 
# End of macro FORTH_DSP_VALUEHL
3a26			 
3a26					if DEBUG_FORTH_WORDS 
3a26						DMARK "RN2" 
3a26 f5				push af  
3a27 3a 3b 3a			ld a, (.dmark)  
3a2a 32 65 ee			ld (debug_mark),a  
3a2d 3a 3c 3a			ld a, (.dmark+1)  
3a30 32 66 ee			ld (debug_mark+1),a  
3a33 3a 3d 3a			ld a, (.dmark+2)  
3a36 32 67 ee			ld (debug_mark+2),a  
3a39 18 03			jr .pastdmark  
3a3b ..			.dmark: db "RN2"  
3a3e f1			.pastdmark: pop af  
3a3f			endm  
# End of macro DMARK
3a3f						CALLMONITOR 
3a3f cd 6f ee			call debug_vector  
3a42				endm  
# End of macro CALLMONITOR
3a42					endif 
3a42 22 a9 eb				ld (LFSRSeed+2), hl 
3a45			 
3a45					FORTH_DSP_POP 
3a45 cd 4d 1e			call macro_forth_dsp_pop 
3a48				endm 
# End of macro FORTH_DSP_POP
3a48			 
3a48 e5					push hl 
3a49			 
3a49 e1			.inrange:	pop hl 
3a4a cd 1c 0d				call prng16  
3a4d					if DEBUG_FORTH_WORDS 
3a4d						DMARK "RN3" 
3a4d f5				push af  
3a4e 3a 62 3a			ld a, (.dmark)  
3a51 32 65 ee			ld (debug_mark),a  
3a54 3a 63 3a			ld a, (.dmark+1)  
3a57 32 66 ee			ld (debug_mark+1),a  
3a5a 3a 64 3a			ld a, (.dmark+2)  
3a5d 32 67 ee			ld (debug_mark+2),a  
3a60 18 03			jr .pastdmark  
3a62 ..			.dmark: db "RN3"  
3a65 f1			.pastdmark: pop af  
3a66			endm  
# End of macro DMARK
3a66						CALLMONITOR 
3a66 cd 6f ee			call debug_vector  
3a69				endm  
# End of macro CALLMONITOR
3a69					endif 
3a69					 
3a69					; if the range is 8bit knock out the high byte 
3a69			 
3a69 ed 5b a7 eb			ld de, (LFSRSeed)     ; check high level 
3a6d			 
3a6d 3e 00				ld a, 0 
3a6f ba					cp d  
3a70 20 1e				jr nz, .hirange 
3a72 26 00				ld h, 0   ; knock it down to 8bit 
3a74			 
3a74					if DEBUG_FORTH_WORDS 
3a74						DMARK "RNk" 
3a74 f5				push af  
3a75 3a 89 3a			ld a, (.dmark)  
3a78 32 65 ee			ld (debug_mark),a  
3a7b 3a 8a 3a			ld a, (.dmark+1)  
3a7e 32 66 ee			ld (debug_mark+1),a  
3a81 3a 8b 3a			ld a, (.dmark+2)  
3a84 32 67 ee			ld (debug_mark+2),a  
3a87 18 03			jr .pastdmark  
3a89 ..			.dmark: db "RNk"  
3a8c f1			.pastdmark: pop af  
3a8d			endm  
# End of macro DMARK
3a8d						CALLMONITOR 
3a8d cd 6f ee			call debug_vector  
3a90				endm  
# End of macro CALLMONITOR
3a90					endif 
3a90			.hirange:   
3a90 e5					push hl  
3a91 b7					or a  
3a92 ed 52		                sbc hl, de 
3a94			 
3a94					;call cmp16 
3a94			 
3a94 30 b3				jr nc, .inrange      ; if hl >= de, carry flag is cleared 
3a96 e1					pop hl 
3a97 e5					push hl 
3a98			 
3a98					if DEBUG_FORTH_WORDS 
3a98						DMARK "RN4" 
3a98 f5				push af  
3a99 3a ad 3a			ld a, (.dmark)  
3a9c 32 65 ee			ld (debug_mark),a  
3a9f 3a ae 3a			ld a, (.dmark+1)  
3aa2 32 66 ee			ld (debug_mark+1),a  
3aa5 3a af 3a			ld a, (.dmark+2)  
3aa8 32 67 ee			ld (debug_mark+2),a  
3aab 18 03			jr .pastdmark  
3aad ..			.dmark: db "RN4"  
3ab0 f1			.pastdmark: pop af  
3ab1			endm  
# End of macro DMARK
3ab1						CALLMONITOR 
3ab1 cd 6f ee			call debug_vector  
3ab4				endm  
# End of macro CALLMONITOR
3ab4					endif 
3ab4 ed 5b a9 eb			ld de, (LFSRSeed+2)   ; check low range 
3ab8					;call cmp16 
3ab8				 
3ab8 b7					or a  
3ab9 ed 52		                sbc hl, de 
3abb 38 8c				jr c, .inrange 
3abd			 
3abd e1					pop hl 
3abe					 
3abe					if DEBUG_FORTH_WORDS 
3abe						DMARK "RNd" 
3abe f5				push af  
3abf 3a d3 3a			ld a, (.dmark)  
3ac2 32 65 ee			ld (debug_mark),a  
3ac5 3a d4 3a			ld a, (.dmark+1)  
3ac8 32 66 ee			ld (debug_mark+1),a  
3acb 3a d5 3a			ld a, (.dmark+2)  
3ace 32 67 ee			ld (debug_mark+2),a  
3ad1 18 03			jr .pastdmark  
3ad3 ..			.dmark: db "RNd"  
3ad6 f1			.pastdmark: pop af  
3ad7			endm  
# End of macro DMARK
3ad7						CALLMONITOR 
3ad7 cd 6f ee			call debug_vector  
3ada				endm  
# End of macro CALLMONITOR
3ada					endif 
3ada			 
3ada			 
3ada cd 90 1b				call forth_push_numhl 
3add				       NEXTW 
3add c3 81 1f			jp macro_next 
3ae0				endm 
# End of macro NEXTW
3ae0			 
3ae0			.ENDMATHS: 
3ae0			 
3ae0			; eof 
3ae0			 
# End of file forth_words_maths.asm
3ae0			include "forth_words_display.asm" 
3ae0			 
3ae0			; | ## Display Words 
3ae0			 
3ae0			.ACT: 
3ae0			 
3ae0				CWHEAD .INFO 78 "ACTIVE" 6 WORD_FLAG_CODE 
3ae0 62				db WORD_SYS_CORE+78             
3ae1 2c 3b			dw .INFO            
3ae3 07				db 6 + 1 
3ae4 .. 00			db "ACTIVE",0              
3aeb				endm 
# End of macro CWHEAD
3aeb			; | ACTIVE ( -- s ) Push the next char for an activity indicator to TOS | DONE 
3aeb			;  
3aeb			; | | To display a pulsing activity indicator in a processing loop do this... 
3aeb			; | | e.g. $ff $00 do active . ..... Your code ..... loop 
3aeb			 
3aeb					if DEBUG_FORTH_WORDS_KEY 
3aeb						DMARK "ACT" 
3aeb f5				push af  
3aec 3a 00 3b			ld a, (.dmark)  
3aef 32 65 ee			ld (debug_mark),a  
3af2 3a 01 3b			ld a, (.dmark+1)  
3af5 32 66 ee			ld (debug_mark+1),a  
3af8 3a 02 3b			ld a, (.dmark+2)  
3afb 32 67 ee			ld (debug_mark+2),a  
3afe 18 03			jr .pastdmark  
3b00 ..			.dmark: db "ACT"  
3b03 f1			.pastdmark: pop af  
3b04			endm  
# End of macro DMARK
3b04						CALLMONITOR 
3b04 cd 6f ee			call debug_vector  
3b07				endm  
# End of macro CALLMONITOR
3b07					endif 
3b07 cd 1f 0b				call active 
3b0a					if DEBUG_FORTH_WORDS 
3b0a						DMARK "ACp" 
3b0a f5				push af  
3b0b 3a 1f 3b			ld a, (.dmark)  
3b0e 32 65 ee			ld (debug_mark),a  
3b11 3a 20 3b			ld a, (.dmark+1)  
3b14 32 66 ee			ld (debug_mark+1),a  
3b17 3a 21 3b			ld a, (.dmark+2)  
3b1a 32 67 ee			ld (debug_mark+2),a  
3b1d 18 03			jr .pastdmark  
3b1f ..			.dmark: db "ACp"  
3b22 f1			.pastdmark: pop af  
3b23			endm  
# End of macro DMARK
3b23						CALLMONITOR 
3b23 cd 6f ee			call debug_vector  
3b26				endm  
# End of macro CALLMONITOR
3b26					endif 
3b26 cd fe 1b				call forth_push_str 
3b29			 
3b29					NEXTW 
3b29 c3 81 1f			jp macro_next 
3b2c				endm 
# End of macro NEXTW
3b2c			.INFO: 
3b2c			 
3b2c				CWHEAD .ATP 78 "INFO" 4 WORD_FLAG_CODE 
3b2c 62				db WORD_SYS_CORE+78             
3b2d 49 3b			dw .ATP            
3b2f 05				db 4 + 1 
3b30 .. 00			db "INFO",0              
3b35				endm 
# End of macro CWHEAD
3b35			; | INFO ( u1 u2 -- )  Use the top two strings on stack to fill in an info window over two lines. Causes a wait for key press to continue. | DONE 
3b35					FORTH_DSP_VALUEHL 
3b35 cd 95 1d			call macro_dsp_valuehl 
3b38				endm 
# End of macro FORTH_DSP_VALUEHL
3b38			 
3b38					FORTH_DSP_POP 
3b38 cd 4d 1e			call macro_forth_dsp_pop 
3b3b				endm 
# End of macro FORTH_DSP_POP
3b3b			 
3b3b e5					push hl 
3b3c			 
3b3c					FORTH_DSP_VALUEHL 
3b3c cd 95 1d			call macro_dsp_valuehl 
3b3f				endm 
# End of macro FORTH_DSP_VALUEHL
3b3f			 
3b3f					FORTH_DSP_POP 
3b3f cd 4d 1e			call macro_forth_dsp_pop 
3b42				endm 
# End of macro FORTH_DSP_POP
3b42			 
3b42 d1					pop de 
3b43			 
3b43 cd 59 0b				call info_panel 
3b46			 
3b46			 
3b46					NEXTW 
3b46 c3 81 1f			jp macro_next 
3b49				endm 
# End of macro NEXTW
3b49			.ATP: 
3b49				CWHEAD .FB 78 "AT?" 3 WORD_FLAG_CODE 
3b49 62				db WORD_SYS_CORE+78             
3b4a c0 3b			dw .FB            
3b4c 04				db 3 + 1 
3b4d .. 00			db "AT?",0              
3b51				endm 
# End of macro CWHEAD
3b51			; | AT? ( -- c r )  Push to stack the current position of the next print | TO TEST 
3b51					if DEBUG_FORTH_WORDS_KEY 
3b51						DMARK "AT?" 
3b51 f5				push af  
3b52 3a 66 3b			ld a, (.dmark)  
3b55 32 65 ee			ld (debug_mark),a  
3b58 3a 67 3b			ld a, (.dmark+1)  
3b5b 32 66 ee			ld (debug_mark+1),a  
3b5e 3a 68 3b			ld a, (.dmark+2)  
3b61 32 67 ee			ld (debug_mark+2),a  
3b64 18 03			jr .pastdmark  
3b66 ..			.dmark: db "AT?"  
3b69 f1			.pastdmark: pop af  
3b6a			endm  
# End of macro DMARK
3b6a						CALLMONITOR 
3b6a cd 6f ee			call debug_vector  
3b6d				endm  
# End of macro CALLMONITOR
3b6d					endif 
3b6d 3a 58 ea				ld a, (f_cursor_ptr) 
3b70			 
3b70			if DEBUG_FORTH_WORDS 
3b70				DMARK "AT?" 
3b70 f5				push af  
3b71 3a 85 3b			ld a, (.dmark)  
3b74 32 65 ee			ld (debug_mark),a  
3b77 3a 86 3b			ld a, (.dmark+1)  
3b7a 32 66 ee			ld (debug_mark+1),a  
3b7d 3a 87 3b			ld a, (.dmark+2)  
3b80 32 67 ee			ld (debug_mark+2),a  
3b83 18 03			jr .pastdmark  
3b85 ..			.dmark: db "AT?"  
3b88 f1			.pastdmark: pop af  
3b89			endm  
# End of macro DMARK
3b89				CALLMONITOR 
3b89 cd 6f ee			call debug_vector  
3b8c				endm  
# End of macro CALLMONITOR
3b8c			endif	 
3b8c					; count the number of rows 
3b8c			 
3b8c 06 00				ld b, 0 
3b8e 4f			.atpr:		ld c, a    ; save in case we go below zero 
3b8f d6 28				sub display_cols 
3b91 f2 97 3b				jp p, .atprunder 
3b94 04					inc b 
3b95 18 f7				jr .atpr 
3b97			.atprunder:	 
3b97			if DEBUG_FORTH_WORDS 
3b97				DMARK "A?2" 
3b97 f5				push af  
3b98 3a ac 3b			ld a, (.dmark)  
3b9b 32 65 ee			ld (debug_mark),a  
3b9e 3a ad 3b			ld a, (.dmark+1)  
3ba1 32 66 ee			ld (debug_mark+1),a  
3ba4 3a ae 3b			ld a, (.dmark+2)  
3ba7 32 67 ee			ld (debug_mark+2),a  
3baa 18 03			jr .pastdmark  
3bac ..			.dmark: db "A?2"  
3baf f1			.pastdmark: pop af  
3bb0			endm  
# End of macro DMARK
3bb0				CALLMONITOR 
3bb0 cd 6f ee			call debug_vector  
3bb3				endm  
# End of macro CALLMONITOR
3bb3			endif	 
3bb3 26 00				ld h, 0 
3bb5 69					ld l, c 
3bb6 cd 90 1b				call forth_push_numhl 
3bb9 68					ld l, b  
3bba cd 90 1b				call forth_push_numhl 
3bbd			 
3bbd			 
3bbd				NEXTW 
3bbd c3 81 1f			jp macro_next 
3bc0				endm 
# End of macro NEXTW
3bc0			 
3bc0			.FB: 
3bc0				CWHEAD .EMIT 7 "FB" 2 WORD_FLAG_CODE 
3bc0 1b				db WORD_SYS_CORE+7             
3bc1 0e 3c			dw .EMIT            
3bc3 03				db 2 + 1 
3bc4 .. 00			db "FB",0              
3bc7				endm 
# End of macro CWHEAD
3bc7			; | FB ( u -- ) Select frame buffer ID u (1-3)  |  DONE 
3bc7			; | | Default frame buffer is 1. System uses 0 which can't be selected for system messages etc. 
3bc7			; | | Selecting the frame buffer wont display unless automatic display is setup (default). 
3bc7			; | | If automatic display is off then updates will not be shown until DRAW is used. 
3bc7					if DEBUG_FORTH_WORDS_KEY 
3bc7						DMARK "FB." 
3bc7 f5				push af  
3bc8 3a dc 3b			ld a, (.dmark)  
3bcb 32 65 ee			ld (debug_mark),a  
3bce 3a dd 3b			ld a, (.dmark+1)  
3bd1 32 66 ee			ld (debug_mark+1),a  
3bd4 3a de 3b			ld a, (.dmark+2)  
3bd7 32 67 ee			ld (debug_mark+2),a  
3bda 18 03			jr .pastdmark  
3bdc ..			.dmark: db "FB."  
3bdf f1			.pastdmark: pop af  
3be0			endm  
# End of macro DMARK
3be0						CALLMONITOR 
3be0 cd 6f ee			call debug_vector  
3be3				endm  
# End of macro CALLMONITOR
3be3					endif 
3be3			 
3be3					FORTH_DSP_VALUEHL 
3be3 cd 95 1d			call macro_dsp_valuehl 
3be6				endm 
# End of macro FORTH_DSP_VALUEHL
3be6			 
3be6 7d					ld a, l 
3be7 fe 01				cp 1 
3be9 20 05				jr nz, .fbn1 
3beb 21 0a ed				ld hl, display_fb1 
3bee 18 15				jr .fbset 
3bf0 fe 02		.fbn1:		cp 2 
3bf2 20 05				jr nz, .fbn2 
3bf4 21 c8 eb				ld hl, display_fb2 
3bf7 18 0c				jr .fbset 
3bf9 fe 03		.fbn2:		cp 3 
3bfb 20 05				jr nz, .fbn3 
3bfd 21 69 ec				ld hl, display_fb3 
3c00 18 03				jr .fbset 
3c02			.fbn3:		 ; if invalid number select first 
3c02 21 0a ed				ld hl, display_fb1 
3c05 22 c6 eb		.fbset:		ld (display_fb_active), hl 
3c08			 
3c08					FORTH_DSP_POP 
3c08 cd 4d 1e			call macro_forth_dsp_pop 
3c0b				endm 
# End of macro FORTH_DSP_POP
3c0b			 
3c0b					NEXTW 
3c0b c3 81 1f			jp macro_next 
3c0e				endm 
# End of macro NEXTW
3c0e			 
3c0e			 
3c0e			.EMIT: 
3c0e				CWHEAD .DOTH 7 "EMIT" 4 WORD_FLAG_CODE 
3c0e 1b				db WORD_SYS_CORE+7             
3c0f 5f 3c			dw .DOTH            
3c11 05				db 4 + 1 
3c12 .. 00			db "EMIT",0              
3c17				endm 
# End of macro CWHEAD
3c17			; |  EMIT ( u -- ) Display ascii character  TOS   | DONE 
3c17					; get value off TOS and display it 
3c17			 
3c17					if DEBUG_FORTH_WORDS_KEY 
3c17						DMARK "EMT" 
3c17 f5				push af  
3c18 3a 2c 3c			ld a, (.dmark)  
3c1b 32 65 ee			ld (debug_mark),a  
3c1e 3a 2d 3c			ld a, (.dmark+1)  
3c21 32 66 ee			ld (debug_mark+1),a  
3c24 3a 2e 3c			ld a, (.dmark+2)  
3c27 32 67 ee			ld (debug_mark+2),a  
3c2a 18 03			jr .pastdmark  
3c2c ..			.dmark: db "EMT"  
3c2f f1			.pastdmark: pop af  
3c30			endm  
# End of macro DMARK
3c30						CALLMONITOR 
3c30 cd 6f ee			call debug_vector  
3c33				endm  
# End of macro CALLMONITOR
3c33					endif 
3c33			 
3c33					FORTH_DSP_VALUEHL 
3c33 cd 95 1d			call macro_dsp_valuehl 
3c36				endm 
# End of macro FORTH_DSP_VALUEHL
3c36			 
3c36 7d					ld a,l 
3c37			 
3c37					; TODO write to display 
3c37			 
3c37 32 b9 e4				ld (os_input), a 
3c3a 3e 00				ld a, 0 
3c3c 32 ba e4				ld (os_input+1), a 
3c3f					 
3c3f 3a 58 ea				ld a, (f_cursor_ptr) 
3c42 11 b9 e4				ld de, os_input 
3c45 cd db 0b				call str_at_display 
3c48			 
3c48			 
3c48 3a 36 ea				ld a,(cli_autodisplay) 
3c4b fe 00				cp 0 
3c4d 28 03				jr z, .enoupdate 
3c4f cd eb 0b						call update_display 
3c52					.enoupdate: 
3c52			 
3c52 3a 58 ea				ld a, (f_cursor_ptr) 
3c55 3c					inc a 
3c56 32 58 ea				ld (f_cursor_ptr), a   ; save new pos 
3c59			 
3c59			 
3c59					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3c59 cd 4d 1e			call macro_forth_dsp_pop 
3c5c				endm 
# End of macro FORTH_DSP_POP
3c5c			  
3c5c			 
3c5c					NEXTW 
3c5c c3 81 1f			jp macro_next 
3c5f				endm 
# End of macro NEXTW
3c5f			.DOTH: 
3c5f				CWHEAD .DOTF 8 ".-" 2 WORD_FLAG_CODE 
3c5f 1c				db WORD_SYS_CORE+8             
3c60 8f 3c			dw .DOTF            
3c62 03				db 2 + 1 
3c63 .. 00			db ".-",0              
3c66				endm 
# End of macro CWHEAD
3c66			        ; | .- ( u -- ) Display TOS replacing any dashes with spaces. Means you dont need to wrap strings in double quotes!   | DONE 
3c66					; get value off TOS and display it 
3c66					if DEBUG_FORTH_WORDS_KEY 
3c66						DMARK "DTD" 
3c66 f5				push af  
3c67 3a 7b 3c			ld a, (.dmark)  
3c6a 32 65 ee			ld (debug_mark),a  
3c6d 3a 7c 3c			ld a, (.dmark+1)  
3c70 32 66 ee			ld (debug_mark+1),a  
3c73 3a 7d 3c			ld a, (.dmark+2)  
3c76 32 67 ee			ld (debug_mark+2),a  
3c79 18 03			jr .pastdmark  
3c7b ..			.dmark: db "DTD"  
3c7e f1			.pastdmark: pop af  
3c7f			endm  
# End of macro DMARK
3c7f						CALLMONITOR 
3c7f cd 6f ee			call debug_vector  
3c82				endm  
# End of macro CALLMONITOR
3c82					endif 
3c82 0e 01			ld c, 1	  ; flag for removal of '-' enabled 
3c84 3e 00			ld a, 0 
3c86 32 37 ea			ld (cli_mvdot), a 
3c89 c3 e6 3c			jp .dotgo 
3c8c				NEXTW 
3c8c c3 81 1f			jp macro_next 
3c8f				endm 
# End of macro NEXTW
3c8f			.DOTF: 
3c8f				CWHEAD .DOT 8 ".>" 2 WORD_FLAG_CODE 
3c8f 1c				db WORD_SYS_CORE+8             
3c90 bd 3c			dw .DOT            
3c92 03				db 2 + 1 
3c93 .. 00			db ".>",0              
3c96				endm 
# End of macro CWHEAD
3c96			        ; | .> ( u -- ) Display TOS and move the next display point with display  | DONE 
3c96					; get value off TOS and display it 
3c96			        ; TODO BUG adds extra spaces 
3c96			        ; TODO BUG handle numerics? 
3c96					if DEBUG_FORTH_WORDS_KEY 
3c96						DMARK "DTC" 
3c96 f5				push af  
3c97 3a ab 3c			ld a, (.dmark)  
3c9a 32 65 ee			ld (debug_mark),a  
3c9d 3a ac 3c			ld a, (.dmark+1)  
3ca0 32 66 ee			ld (debug_mark+1),a  
3ca3 3a ad 3c			ld a, (.dmark+2)  
3ca6 32 67 ee			ld (debug_mark+2),a  
3ca9 18 03			jr .pastdmark  
3cab ..			.dmark: db "DTC"  
3cae f1			.pastdmark: pop af  
3caf			endm  
# End of macro DMARK
3caf						CALLMONITOR 
3caf cd 6f ee			call debug_vector  
3cb2				endm  
# End of macro CALLMONITOR
3cb2					endif 
3cb2 3e 01			ld a, 1 
3cb4 32 37 ea			ld (cli_mvdot), a 
3cb7 c3 e6 3c			jp .dotgo 
3cba				NEXTW 
3cba c3 81 1f			jp macro_next 
3cbd				endm 
# End of macro NEXTW
3cbd			 
3cbd			.DOT: 
3cbd				CWHEAD .CLS 8 "." 1 WORD_FLAG_CODE 
3cbd 1c				db WORD_SYS_CORE+8             
3cbe 99 3e			dw .CLS            
3cc0 02				db 1 + 1 
3cc1 .. 00			db ".",0              
3cc3				endm 
# End of macro CWHEAD
3cc3			        ; | . ( u -- ) Display TOS. Does not move next print position. Use .> if you want that. | DONE 
3cc3					; get value off TOS and display it 
3cc3			 
3cc3					if DEBUG_FORTH_WORDS_KEY 
3cc3						DMARK "DOT" 
3cc3 f5				push af  
3cc4 3a d8 3c			ld a, (.dmark)  
3cc7 32 65 ee			ld (debug_mark),a  
3cca 3a d9 3c			ld a, (.dmark+1)  
3ccd 32 66 ee			ld (debug_mark+1),a  
3cd0 3a da 3c			ld a, (.dmark+2)  
3cd3 32 67 ee			ld (debug_mark+2),a  
3cd6 18 03			jr .pastdmark  
3cd8 ..			.dmark: db "DOT"  
3cdb f1			.pastdmark: pop af  
3cdc			endm  
# End of macro DMARK
3cdc						CALLMONITOR 
3cdc cd 6f ee			call debug_vector  
3cdf				endm  
# End of macro CALLMONITOR
3cdf					endif 
3cdf 3e 00			ld a, 0 
3ce1 32 37 ea			ld (cli_mvdot), a 
3ce4 0e 00		ld c, 0	  ; flag for removal of '-' disabled 
3ce6				 
3ce6			 
3ce6			.dotgo: 
3ce6			 
3ce6			; move up type to on stack for parserv5 
3ce6					FORTH_DSP 
3ce6 cd 5b 1d			call macro_forth_dsp 
3ce9				endm 
# End of macro FORTH_DSP
3ce9				;FORTH_DSP_VALUE  
3ce9			 
3ce9			if DEBUG_FORTH_DOT 
3ce9				DMARK "DOT" 
3ce9 f5				push af  
3cea 3a fe 3c			ld a, (.dmark)  
3ced 32 65 ee			ld (debug_mark),a  
3cf0 3a ff 3c			ld a, (.dmark+1)  
3cf3 32 66 ee			ld (debug_mark+1),a  
3cf6 3a 00 3d			ld a, (.dmark+2)  
3cf9 32 67 ee			ld (debug_mark+2),a  
3cfc 18 03			jr .pastdmark  
3cfe ..			.dmark: db "DOT"  
3d01 f1			.pastdmark: pop af  
3d02			endm  
# End of macro DMARK
3d02				CALLMONITOR 
3d02 cd 6f ee			call debug_vector  
3d05				endm  
# End of macro CALLMONITOR
3d05			endif	 
3d05			;		.print: 
3d05			 
3d05 7e				ld a,(hl)  ; work out what type of value is on the TOS 
3d06 23				inc hl   ; position to the actual value 
3d07 fe 01			cp DS_TYPE_STR 
3d09 20 06			jr nz, .dotnum1  
3d0b			 
3d0b			; display string 
3d0b				FORTH_DSP_VALUE  
3d0b cd 7e 1d			call macro_forth_dsp_value 
3d0e				endm 
# End of macro FORTH_DSP_VALUE
3d0e eb				ex de,hl 
3d0f 18 49			jr .dotwrite 
3d11			 
3d11			.dotnum1: 
3d11 fe 02			cp DS_TYPE_INUM 
3d13 20 44			jr nz, .dotflot 
3d15			 
3d15			 
3d15			; display number 
3d15			 
3d15			;	push hl 
3d15			;	call clear_display 
3d15			;	pop hl 
3d15			 
3d15 5e				ld e, (hl) 
3d16 23				inc hl 
3d17 56				ld d, (hl) 
3d18 21 bb e2			ld hl, scratch 
3d1b			if DEBUG_FORTH_DOT 
3d1b				DMARK "DT1" 
3d1b f5				push af  
3d1c 3a 30 3d			ld a, (.dmark)  
3d1f 32 65 ee			ld (debug_mark),a  
3d22 3a 31 3d			ld a, (.dmark+1)  
3d25 32 66 ee			ld (debug_mark+1),a  
3d28 3a 32 3d			ld a, (.dmark+2)  
3d2b 32 67 ee			ld (debug_mark+2),a  
3d2e 18 03			jr .pastdmark  
3d30 ..			.dmark: db "DT1"  
3d33 f1			.pastdmark: pop af  
3d34			endm  
# End of macro DMARK
3d34				CALLMONITOR 
3d34 cd 6f ee			call debug_vector  
3d37				endm  
# End of macro CALLMONITOR
3d37			endif	 
3d37			 
3d37 cd 0a 11			call uitoa_16 
3d3a eb				ex de,hl 
3d3b			 
3d3b			if DEBUG_FORTH_DOT 
3d3b				DMARK "DT2" 
3d3b f5				push af  
3d3c 3a 50 3d			ld a, (.dmark)  
3d3f 32 65 ee			ld (debug_mark),a  
3d42 3a 51 3d			ld a, (.dmark+1)  
3d45 32 66 ee			ld (debug_mark+1),a  
3d48 3a 52 3d			ld a, (.dmark+2)  
3d4b 32 67 ee			ld (debug_mark+2),a  
3d4e 18 03			jr .pastdmark  
3d50 ..			.dmark: db "DT2"  
3d53 f1			.pastdmark: pop af  
3d54			endm  
# End of macro DMARK
3d54				CALLMONITOR 
3d54 cd 6f ee			call debug_vector  
3d57				endm  
# End of macro CALLMONITOR
3d57			endif	 
3d57			 
3d57			;	ld de, os_word_scratch 
3d57 18 01			jr .dotwrite 
3d59			 
3d59 00			.dotflot:   nop 
3d5a			; TODO print floating point number 
3d5a			 
3d5a			.dotwrite:		 
3d5a			 
3d5a					; if c is set then set all '-' to spaces 
3d5a					; need to also take into account .>  
3d5a			 
3d5a 3e 01				ld a, 1 
3d5c b9					cp c 
3d5d 20 67				jr nz, .nodashswap 
3d5f			 
3d5f					; DE has the string to write, working with HL 
3d5f			 
3d5f 06 ff				ld b, 255 
3d61 d5					push de 
3d62 e1					pop hl 
3d63			 
3d63			if DEBUG_FORTH_DOT 
3d63				DMARK "DT-" 
3d63 f5				push af  
3d64 3a 78 3d			ld a, (.dmark)  
3d67 32 65 ee			ld (debug_mark),a  
3d6a 3a 79 3d			ld a, (.dmark+1)  
3d6d 32 66 ee			ld (debug_mark+1),a  
3d70 3a 7a 3d			ld a, (.dmark+2)  
3d73 32 67 ee			ld (debug_mark+2),a  
3d76 18 03			jr .pastdmark  
3d78 ..			.dmark: db "DT-"  
3d7b f1			.pastdmark: pop af  
3d7c			endm  
# End of macro DMARK
3d7c				CALLMONITOR 
3d7c cd 6f ee			call debug_vector  
3d7f				endm  
# End of macro CALLMONITOR
3d7f			endif	 
3d7f 7e			.dashscan:	ld a, (hl) 
3d80 fe 00				cp 0 
3d82 28 42				jr z, .nodashswap 
3d84 fe 2d				cp '-' 
3d86 20 03				jr nz, .dashskip 
3d88 3e 20				ld a, ' ' 
3d8a 77					ld (hl), a 
3d8b 23			.dashskip:	inc hl 
3d8c			if DEBUG_FORTH_DOT 
3d8c				DMARK "D-2" 
3d8c f5				push af  
3d8d 3a a1 3d			ld a, (.dmark)  
3d90 32 65 ee			ld (debug_mark),a  
3d93 3a a2 3d			ld a, (.dmark+1)  
3d96 32 66 ee			ld (debug_mark+1),a  
3d99 3a a3 3d			ld a, (.dmark+2)  
3d9c 32 67 ee			ld (debug_mark+2),a  
3d9f 18 03			jr .pastdmark  
3da1 ..			.dmark: db "D-2"  
3da4 f1			.pastdmark: pop af  
3da5			endm  
# End of macro DMARK
3da5				CALLMONITOR 
3da5 cd 6f ee			call debug_vector  
3da8				endm  
# End of macro CALLMONITOR
3da8			endif	 
3da8 10 d5				djnz .dashscan 
3daa			 
3daa			if DEBUG_FORTH_DOT 
3daa				DMARK "D-1" 
3daa f5				push af  
3dab 3a bf 3d			ld a, (.dmark)  
3dae 32 65 ee			ld (debug_mark),a  
3db1 3a c0 3d			ld a, (.dmark+1)  
3db4 32 66 ee			ld (debug_mark+1),a  
3db7 3a c1 3d			ld a, (.dmark+2)  
3dba 32 67 ee			ld (debug_mark+2),a  
3dbd 18 03			jr .pastdmark  
3dbf ..			.dmark: db "D-1"  
3dc2 f1			.pastdmark: pop af  
3dc3			endm  
# End of macro DMARK
3dc3				CALLMONITOR 
3dc3 cd 6f ee			call debug_vector  
3dc6				endm  
# End of macro CALLMONITOR
3dc6			endif	 
3dc6			 
3dc6			.nodashswap: 
3dc6			 
3dc6			if DEBUG_FORTH_DOT 
3dc6				DMARK "D-o" 
3dc6 f5				push af  
3dc7 3a db 3d			ld a, (.dmark)  
3dca 32 65 ee			ld (debug_mark),a  
3dcd 3a dc 3d			ld a, (.dmark+1)  
3dd0 32 66 ee			ld (debug_mark+1),a  
3dd3 3a dd 3d			ld a, (.dmark+2)  
3dd6 32 67 ee			ld (debug_mark+2),a  
3dd9 18 03			jr .pastdmark  
3ddb ..			.dmark: db "D-o"  
3dde f1			.pastdmark: pop af  
3ddf			endm  
# End of macro DMARK
3ddf				CALLMONITOR 
3ddf cd 6f ee			call debug_vector  
3de2				endm  
# End of macro CALLMONITOR
3de2			endif	 
3de2			 
3de2 d5					push de   ; save string start in case we need to advance print 
3de3			 
3de3 3a 58 ea				ld a, (f_cursor_ptr) 
3de6 cd db 0b				call str_at_display 
3de9 3a 36 ea				ld a,(cli_autodisplay) 
3dec fe 00				cp 0 
3dee 28 03				jr z, .noupdate 
3df0 cd eb 0b						call update_display 
3df3					.noupdate: 
3df3			 
3df3			 
3df3					; see if we need to advance the print position 
3df3			 
3df3 e1					pop hl   ; get back string 
3df4			;		ex de,hl 
3df4			 
3df4 3a 37 ea				ld a, (cli_mvdot) 
3df7			if DEBUG_FORTH_DOT 
3df7			;		ld e,a 
3df7				DMARK "D>1" 
3df7 f5				push af  
3df8 3a 0c 3e			ld a, (.dmark)  
3dfb 32 65 ee			ld (debug_mark),a  
3dfe 3a 0d 3e			ld a, (.dmark+1)  
3e01 32 66 ee			ld (debug_mark+1),a  
3e04 3a 0e 3e			ld a, (.dmark+2)  
3e07 32 67 ee			ld (debug_mark+2),a  
3e0a 18 03			jr .pastdmark  
3e0c ..			.dmark: db "D>1"  
3e0f f1			.pastdmark: pop af  
3e10			endm  
# End of macro DMARK
3e10				CALLMONITOR 
3e10 cd 6f ee			call debug_vector  
3e13				endm  
# End of macro CALLMONITOR
3e13			endif	 
3e13 fe 00				cp 0 
3e15 28 44				jr z, .noadv 
3e17					; yes, lets advance the print position 
3e17 3e 00				ld a, 0 
3e19 cd 66 11				call strlent 
3e1c			if DEBUG_FORTH_DOT 
3e1c				DMARK "D-?" 
3e1c f5				push af  
3e1d 3a 31 3e			ld a, (.dmark)  
3e20 32 65 ee			ld (debug_mark),a  
3e23 3a 32 3e			ld a, (.dmark+1)  
3e26 32 66 ee			ld (debug_mark+1),a  
3e29 3a 33 3e			ld a, (.dmark+2)  
3e2c 32 67 ee			ld (debug_mark+2),a  
3e2f 18 03			jr .pastdmark  
3e31 ..			.dmark: db "D-?"  
3e34 f1			.pastdmark: pop af  
3e35			endm  
# End of macro DMARK
3e35				CALLMONITOR 
3e35 cd 6f ee			call debug_vector  
3e38				endm  
# End of macro CALLMONITOR
3e38			endif	 
3e38 3a 58 ea				ld a, (f_cursor_ptr) 
3e3b 85					add a,l 
3e3c					;call addatohl 
3e3c					;ld a, l 
3e3c 32 58 ea				ld (f_cursor_ptr), a   ; save new pos 
3e3f			 
3e3f			if DEBUG_FORTH_DOT 
3e3f				DMARK "D->" 
3e3f f5				push af  
3e40 3a 54 3e			ld a, (.dmark)  
3e43 32 65 ee			ld (debug_mark),a  
3e46 3a 55 3e			ld a, (.dmark+1)  
3e49 32 66 ee			ld (debug_mark+1),a  
3e4c 3a 56 3e			ld a, (.dmark+2)  
3e4f 32 67 ee			ld (debug_mark+2),a  
3e52 18 03			jr .pastdmark  
3e54 ..			.dmark: db "D->"  
3e57 f1			.pastdmark: pop af  
3e58			endm  
# End of macro DMARK
3e58				CALLMONITOR 
3e58 cd 6f ee			call debug_vector  
3e5b				endm  
# End of macro CALLMONITOR
3e5b			endif	 
3e5b			 
3e5b			.noadv:	 
3e5b			 
3e5b					if DEBUG_FORTH_DOT_WAIT 
3e5b							call next_page_prompt 
3e5b					endif	 
3e5b			; TODO this pop off the stack causes a crash. i dont know why 
3e5b			 
3e5b			 
3e5b			if DEBUG_FORTH_DOT 
3e5b				DMARK "DTh" 
3e5b f5				push af  
3e5c 3a 70 3e			ld a, (.dmark)  
3e5f 32 65 ee			ld (debug_mark),a  
3e62 3a 71 3e			ld a, (.dmark+1)  
3e65 32 66 ee			ld (debug_mark+1),a  
3e68 3a 72 3e			ld a, (.dmark+2)  
3e6b 32 67 ee			ld (debug_mark+2),a  
3e6e 18 03			jr .pastdmark  
3e70 ..			.dmark: db "DTh"  
3e73 f1			.pastdmark: pop af  
3e74			endm  
# End of macro DMARK
3e74				CALLMONITOR 
3e74 cd 6f ee			call debug_vector  
3e77				endm  
# End of macro CALLMONITOR
3e77			endif	 
3e77			 
3e77					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3e77 cd 4d 1e			call macro_forth_dsp_pop 
3e7a				endm 
# End of macro FORTH_DSP_POP
3e7a			 
3e7a			if DEBUG_FORTH_DOT 
3e7a				DMARK "DTi" 
3e7a f5				push af  
3e7b 3a 8f 3e			ld a, (.dmark)  
3e7e 32 65 ee			ld (debug_mark),a  
3e81 3a 90 3e			ld a, (.dmark+1)  
3e84 32 66 ee			ld (debug_mark+1),a  
3e87 3a 91 3e			ld a, (.dmark+2)  
3e8a 32 67 ee			ld (debug_mark+2),a  
3e8d 18 03			jr .pastdmark  
3e8f ..			.dmark: db "DTi"  
3e92 f1			.pastdmark: pop af  
3e93			endm  
# End of macro DMARK
3e93				CALLMONITOR 
3e93 cd 6f ee			call debug_vector  
3e96				endm  
# End of macro CALLMONITOR
3e96			endif	 
3e96			 
3e96			 
3e96					NEXTW 
3e96 c3 81 1f			jp macro_next 
3e99				endm 
# End of macro NEXTW
3e99			 
3e99			.CLS: 
3e99				CWHEAD .DRAW 33 "CLS" 3 WORD_FLAG_CODE 
3e99 35				db WORD_SYS_CORE+33             
3e9a c6 3e			dw .DRAW            
3e9c 04				db 3 + 1 
3e9d .. 00			db "CLS",0              
3ea1				endm 
# End of macro CWHEAD
3ea1			; | CLS ( -- ) Clear current frame buffer and set next print position to top left corner  | DONE 
3ea1					if DEBUG_FORTH_WORDS_KEY 
3ea1						DMARK "CLS" 
3ea1 f5				push af  
3ea2 3a b6 3e			ld a, (.dmark)  
3ea5 32 65 ee			ld (debug_mark),a  
3ea8 3a b7 3e			ld a, (.dmark+1)  
3eab 32 66 ee			ld (debug_mark+1),a  
3eae 3a b8 3e			ld a, (.dmark+2)  
3eb1 32 67 ee			ld (debug_mark+2),a  
3eb4 18 03			jr .pastdmark  
3eb6 ..			.dmark: db "CLS"  
3eb9 f1			.pastdmark: pop af  
3eba			endm  
# End of macro DMARK
3eba						CALLMONITOR 
3eba cd 6f ee			call debug_vector  
3ebd				endm  
# End of macro CALLMONITOR
3ebd					endif 
3ebd cd c8 0b				call clear_display 
3ec0 c3 d4 3f				jp .home		; and home cursor 
3ec3					NEXTW 
3ec3 c3 81 1f			jp macro_next 
3ec6				endm 
# End of macro NEXTW
3ec6			 
3ec6			.DRAW: 
3ec6				CWHEAD .DUMP 34 "DRAW" 4 WORD_FLAG_CODE 
3ec6 36				db WORD_SYS_CORE+34             
3ec7 f1 3e			dw .DUMP            
3ec9 05				db 4 + 1 
3eca .. 00			db "DRAW",0              
3ecf				endm 
# End of macro CWHEAD
3ecf			; | DRAW ( -- ) Draw contents of current frame buffer  | DONE 
3ecf					if DEBUG_FORTH_WORDS_KEY 
3ecf						DMARK "DRW" 
3ecf f5				push af  
3ed0 3a e4 3e			ld a, (.dmark)  
3ed3 32 65 ee			ld (debug_mark),a  
3ed6 3a e5 3e			ld a, (.dmark+1)  
3ed9 32 66 ee			ld (debug_mark+1),a  
3edc 3a e6 3e			ld a, (.dmark+2)  
3edf 32 67 ee			ld (debug_mark+2),a  
3ee2 18 03			jr .pastdmark  
3ee4 ..			.dmark: db "DRW"  
3ee7 f1			.pastdmark: pop af  
3ee8			endm  
# End of macro DMARK
3ee8						CALLMONITOR 
3ee8 cd 6f ee			call debug_vector  
3eeb				endm  
# End of macro CALLMONITOR
3eeb					endif 
3eeb cd eb 0b				call update_display 
3eee					NEXTW 
3eee c3 81 1f			jp macro_next 
3ef1				endm 
# End of macro NEXTW
3ef1			 
3ef1			.DUMP: 
3ef1				CWHEAD .CDUMP 35 "DUMP" 4 WORD_FLAG_CODE 
3ef1 37				db WORD_SYS_CORE+35             
3ef2 29 3f			dw .CDUMP            
3ef4 05				db 4 + 1 
3ef5 .. 00			db "DUMP",0              
3efa				endm 
# End of macro CWHEAD
3efa			; | DUMP ( x -- ) With address x display dump   | DONE 
3efa			; TODO pop address to use off of the stack 
3efa					if DEBUG_FORTH_WORDS_KEY 
3efa						DMARK "DUM" 
3efa f5				push af  
3efb 3a 0f 3f			ld a, (.dmark)  
3efe 32 65 ee			ld (debug_mark),a  
3f01 3a 10 3f			ld a, (.dmark+1)  
3f04 32 66 ee			ld (debug_mark+1),a  
3f07 3a 11 3f			ld a, (.dmark+2)  
3f0a 32 67 ee			ld (debug_mark+2),a  
3f0d 18 03			jr .pastdmark  
3f0f ..			.dmark: db "DUM"  
3f12 f1			.pastdmark: pop af  
3f13			endm  
# End of macro DMARK
3f13						CALLMONITOR 
3f13 cd 6f ee			call debug_vector  
3f16				endm  
# End of macro CALLMONITOR
3f16					endif 
3f16 cd c8 0b				call clear_display 
3f19			 
3f19					; get address 
3f19			 
3f19					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3f19 cd 95 1d			call macro_dsp_valuehl 
3f1c				endm 
# End of macro FORTH_DSP_VALUEHL
3f1c				 
3f1c					; save it for cdump 
3f1c			 
3f1c 22 de e5				ld (os_cur_ptr),hl 
3f1f			 
3f1f					; destroy value TOS 
3f1f			 
3f1f					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3f1f cd 4d 1e			call macro_forth_dsp_pop 
3f22				endm 
# End of macro FORTH_DSP_POP
3f22			 
3f22 cd 10 1a				call dumpcont	; skip old style of param parsing	 
3f25 c9					ret			; TODO command causes end of remaining parsing so cant do: $0000 DUMP $8000 DUMP 
3f26					NEXTW 
3f26 c3 81 1f			jp macro_next 
3f29				endm 
# End of macro NEXTW
3f29			.CDUMP: 
3f29				CWHEAD .DAT 36 "CDUMP" 5 WORD_FLAG_CODE 
3f29 38				db WORD_SYS_CORE+36             
3f2a 59 3f			dw .DAT            
3f2c 06				db 5 + 1 
3f2d .. 00			db "CDUMP",0              
3f33				endm 
# End of macro CWHEAD
3f33			; | CDUMP ( -- ) Continue dump of memory from DUMP | DONE 
3f33					if DEBUG_FORTH_WORDS_KEY 
3f33						DMARK "CDP" 
3f33 f5				push af  
3f34 3a 48 3f			ld a, (.dmark)  
3f37 32 65 ee			ld (debug_mark),a  
3f3a 3a 49 3f			ld a, (.dmark+1)  
3f3d 32 66 ee			ld (debug_mark+1),a  
3f40 3a 4a 3f			ld a, (.dmark+2)  
3f43 32 67 ee			ld (debug_mark+2),a  
3f46 18 03			jr .pastdmark  
3f48 ..			.dmark: db "CDP"  
3f4b f1			.pastdmark: pop af  
3f4c			endm  
# End of macro DMARK
3f4c						CALLMONITOR 
3f4c cd 6f ee			call debug_vector  
3f4f				endm  
# End of macro CALLMONITOR
3f4f					endif 
3f4f cd c8 0b				call clear_display 
3f52 cd 10 1a				call dumpcont	 
3f55 c9					ret			; TODO command causes end of remaining parsing so cant do: $0000 DUMP CDUMP $8000 DUMP 
3f56					NEXTW 
3f56 c3 81 1f			jp macro_next 
3f59				endm 
# End of macro NEXTW
3f59			 
3f59			 
3f59			 
3f59			 
3f59			.DAT: 
3f59				CWHEAD .HOME 41 "AT" 2 WORD_FLAG_CODE 
3f59 3d				db WORD_SYS_CORE+41             
3f5a af 3f			dw .HOME            
3f5c 03				db 2 + 1 
3f5d .. 00			db "AT",0              
3f60				endm 
# End of macro CWHEAD
3f60			; | AT ( u1 u2 -- ) Set next output via . or emit at row u2 col u1 | DONE 
3f60					if DEBUG_FORTH_WORDS_KEY 
3f60						DMARK "AT." 
3f60 f5				push af  
3f61 3a 75 3f			ld a, (.dmark)  
3f64 32 65 ee			ld (debug_mark),a  
3f67 3a 76 3f			ld a, (.dmark+1)  
3f6a 32 66 ee			ld (debug_mark+1),a  
3f6d 3a 77 3f			ld a, (.dmark+2)  
3f70 32 67 ee			ld (debug_mark+2),a  
3f73 18 03			jr .pastdmark  
3f75 ..			.dmark: db "AT."  
3f78 f1			.pastdmark: pop af  
3f79			endm  
# End of macro DMARK
3f79						CALLMONITOR 
3f79 cd 6f ee			call debug_vector  
3f7c				endm  
# End of macro CALLMONITOR
3f7c					endif 
3f7c					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3f7c cd 95 1d			call macro_dsp_valuehl 
3f7f				endm 
# End of macro FORTH_DSP_VALUEHL
3f7f			 
3f7f			 
3f7f					; TODO save cursor row 
3f7f 7d					ld a,l 
3f80 fe 02				cp 2 
3f82 20 04				jr nz, .crow3 
3f84 3e 28				ld a, display_row_2 
3f86 18 12				jr .ccol1 
3f88 fe 03		.crow3:		cp 3 
3f8a 20 04				jr nz, .crow4 
3f8c 3e 50				ld a, display_row_3 
3f8e 18 0a				jr .ccol1 
3f90 fe 04		.crow4:		cp 4 
3f92 20 04				jr nz, .crow1 
3f94 3e 78				ld a, display_row_4 
3f96 18 02				jr .ccol1 
3f98 3e 00		.crow1:		ld a,display_row_1 
3f9a f5			.ccol1:		push af			; got row offset 
3f9b 6f					ld l,a 
3f9c 26 00				ld h,0 
3f9e					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3f9e cd 4d 1e			call macro_forth_dsp_pop 
3fa1				endm 
# End of macro FORTH_DSP_POP
3fa1					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3fa1 cd 95 1d			call macro_dsp_valuehl 
3fa4				endm 
# End of macro FORTH_DSP_VALUEHL
3fa4					; TODO save cursor col 
3fa4 f1					pop af 
3fa5 85					add l		; add col offset 
3fa6 32 58 ea				ld (f_cursor_ptr), a 
3fa9					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3fa9 cd 4d 1e			call macro_forth_dsp_pop 
3fac				endm 
# End of macro FORTH_DSP_POP
3fac			 
3fac					; calculate  
3fac			 
3fac					NEXTW 
3fac c3 81 1f			jp macro_next 
3faf				endm 
# End of macro NEXTW
3faf			 
3faf			 
3faf			.HOME: 
3faf				CWHEAD .CR 45 "HOME" 4 WORD_FLAG_CODE 
3faf 41				db WORD_SYS_CORE+45             
3fb0 dc 3f			dw .CR            
3fb2 05				db 4 + 1 
3fb3 .. 00			db "HOME",0              
3fb8				endm 
# End of macro CWHEAD
3fb8			; | HOME ( -- ) Reset the current cursor for output to home | DONE 
3fb8					if DEBUG_FORTH_WORDS_KEY 
3fb8						DMARK "HOM" 
3fb8 f5				push af  
3fb9 3a cd 3f			ld a, (.dmark)  
3fbc 32 65 ee			ld (debug_mark),a  
3fbf 3a ce 3f			ld a, (.dmark+1)  
3fc2 32 66 ee			ld (debug_mark+1),a  
3fc5 3a cf 3f			ld a, (.dmark+2)  
3fc8 32 67 ee			ld (debug_mark+2),a  
3fcb 18 03			jr .pastdmark  
3fcd ..			.dmark: db "HOM"  
3fd0 f1			.pastdmark: pop af  
3fd1			endm  
# End of macro DMARK
3fd1						CALLMONITOR 
3fd1 cd 6f ee			call debug_vector  
3fd4				endm  
# End of macro CALLMONITOR
3fd4					endif 
3fd4 3e 00		.home:		ld a, 0		; and home cursor 
3fd6 32 58 ea				ld (f_cursor_ptr), a 
3fd9					NEXTW 
3fd9 c3 81 1f			jp macro_next 
3fdc				endm 
# End of macro NEXTW
3fdc			 
3fdc			 
3fdc			.CR: 
3fdc				CWHEAD .SPACE 50 "CR" 2 WORD_FLAG_CODE 
3fdc 46				db WORD_SYS_CORE+50             
3fdd 17 40			dw .SPACE            
3fdf 03				db 2 + 1 
3fe0 .. 00			db "CR",0              
3fe3				endm 
# End of macro CWHEAD
3fe3			; | CR (  -- s ) Push CR/LF pair onto the stack as a string  | DONE 
3fe3					if DEBUG_FORTH_WORDS_KEY 
3fe3						DMARK "CR." 
3fe3 f5				push af  
3fe4 3a f8 3f			ld a, (.dmark)  
3fe7 32 65 ee			ld (debug_mark),a  
3fea 3a f9 3f			ld a, (.dmark+1)  
3fed 32 66 ee			ld (debug_mark+1),a  
3ff0 3a fa 3f			ld a, (.dmark+2)  
3ff3 32 67 ee			ld (debug_mark+2),a  
3ff6 18 03			jr .pastdmark  
3ff8 ..			.dmark: db "CR."  
3ffb f1			.pastdmark: pop af  
3ffc			endm  
# End of macro DMARK
3ffc						CALLMONITOR 
3ffc cd 6f ee			call debug_vector  
3fff				endm  
# End of macro CALLMONITOR
3fff					endif 
3fff 3e 0d				ld a, 13 
4001 32 bb e2				ld (scratch),a 
4004 3e 0a				ld a, 10 
4006 32 bc e2				ld (scratch+1),a 
4009 3e 00				ld a, 0 
400b 32 bd e2				ld (scratch+2),a 
400e 21 bb e2				ld hl, scratch 
4011 cd fe 1b				call forth_push_str 
4014					 
4014				       NEXTW 
4014 c3 81 1f			jp macro_next 
4017				endm 
# End of macro NEXTW
4017			.SPACE: 
4017				CWHEAD .SPACES 50 "BL" 2 WORD_FLAG_CODE 
4017 46				db WORD_SYS_CORE+50             
4018 4d 40			dw .SPACES            
401a 03				db 2 + 1 
401b .. 00			db "BL",0              
401e				endm 
# End of macro CWHEAD
401e			; | BL (  -- c ) Push the value of space onto the stack as a string  | DONE 
401e					if DEBUG_FORTH_WORDS_KEY 
401e						DMARK "BL." 
401e f5				push af  
401f 3a 33 40			ld a, (.dmark)  
4022 32 65 ee			ld (debug_mark),a  
4025 3a 34 40			ld a, (.dmark+1)  
4028 32 66 ee			ld (debug_mark+1),a  
402b 3a 35 40			ld a, (.dmark+2)  
402e 32 67 ee			ld (debug_mark+2),a  
4031 18 03			jr .pastdmark  
4033 ..			.dmark: db "BL."  
4036 f1			.pastdmark: pop af  
4037			endm  
# End of macro DMARK
4037						CALLMONITOR 
4037 cd 6f ee			call debug_vector  
403a				endm  
# End of macro CALLMONITOR
403a					endif 
403a 3e 20				ld a, " " 
403c 32 bb e2				ld (scratch),a 
403f 3e 00				ld a, 0 
4041 32 bc e2				ld (scratch+1),a 
4044 21 bb e2				ld hl, scratch 
4047 cd fe 1b				call forth_push_str 
404a					 
404a				       NEXTW 
404a c3 81 1f			jp macro_next 
404d				endm 
# End of macro NEXTW
404d			 
404d			;.blstr: db " ", 0 
404d			 
404d			.SPACES: 
404d				CWHEAD .SCROLL 51 "SPACES" 6 WORD_FLAG_CODE 
404d 47				db WORD_SYS_CORE+51             
404e e8 40			dw .SCROLL            
4050 07				db 6 + 1 
4051 .. 00			db "SPACES",0              
4058				endm 
# End of macro CWHEAD
4058			; | SPACES ( u -- str ) A string of u spaces is pushed onto the stack | DONE 
4058					if DEBUG_FORTH_WORDS_KEY 
4058						DMARK "SPS" 
4058 f5				push af  
4059 3a 6d 40			ld a, (.dmark)  
405c 32 65 ee			ld (debug_mark),a  
405f 3a 6e 40			ld a, (.dmark+1)  
4062 32 66 ee			ld (debug_mark+1),a  
4065 3a 6f 40			ld a, (.dmark+2)  
4068 32 67 ee			ld (debug_mark+2),a  
406b 18 03			jr .pastdmark  
406d ..			.dmark: db "SPS"  
4070 f1			.pastdmark: pop af  
4071			endm  
# End of macro DMARK
4071						CALLMONITOR 
4071 cd 6f ee			call debug_vector  
4074				endm  
# End of macro CALLMONITOR
4074					endif 
4074			 
4074			 
4074					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4074 cd 95 1d			call macro_dsp_valuehl 
4077				endm 
# End of macro FORTH_DSP_VALUEHL
4077			 
4077 e5					push hl    ; u 
4078					if DEBUG_FORTH_WORDS 
4078						DMARK "SPA" 
4078 f5				push af  
4079 3a 8d 40			ld a, (.dmark)  
407c 32 65 ee			ld (debug_mark),a  
407f 3a 8e 40			ld a, (.dmark+1)  
4082 32 66 ee			ld (debug_mark+1),a  
4085 3a 8f 40			ld a, (.dmark+2)  
4088 32 67 ee			ld (debug_mark+2),a  
408b 18 03			jr .pastdmark  
408d ..			.dmark: db "SPA"  
4090 f1			.pastdmark: pop af  
4091			endm  
# End of macro DMARK
4091						CALLMONITOR 
4091 cd 6f ee			call debug_vector  
4094				endm  
# End of macro CALLMONITOR
4094					endif 
4094			 
4094					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4094 cd 4d 1e			call macro_forth_dsp_pop 
4097				endm 
# End of macro FORTH_DSP_POP
4097 e1					pop hl 
4098 0e 00				ld c, 0 
409a 45					ld b, l 
409b 21 bb e2				ld hl, scratch  
409e			 
409e					if DEBUG_FORTH_WORDS 
409e						DMARK "SP2" 
409e f5				push af  
409f 3a b3 40			ld a, (.dmark)  
40a2 32 65 ee			ld (debug_mark),a  
40a5 3a b4 40			ld a, (.dmark+1)  
40a8 32 66 ee			ld (debug_mark+1),a  
40ab 3a b5 40			ld a, (.dmark+2)  
40ae 32 67 ee			ld (debug_mark+2),a  
40b1 18 03			jr .pastdmark  
40b3 ..			.dmark: db "SP2"  
40b6 f1			.pastdmark: pop af  
40b7			endm  
# End of macro DMARK
40b7						CALLMONITOR 
40b7 cd 6f ee			call debug_vector  
40ba				endm  
# End of macro CALLMONITOR
40ba					endif 
40ba 3e 20				ld a, ' ' 
40bc			.spaces1:	 
40bc 77					ld (hl),a 
40bd 23					inc hl 
40be					 
40be 10 fc				djnz .spaces1 
40c0 3e 00				ld a,0 
40c2 77					ld (hl),a 
40c3 21 bb e2				ld hl, scratch 
40c6					if DEBUG_FORTH_WORDS 
40c6						DMARK "SP3" 
40c6 f5				push af  
40c7 3a db 40			ld a, (.dmark)  
40ca 32 65 ee			ld (debug_mark),a  
40cd 3a dc 40			ld a, (.dmark+1)  
40d0 32 66 ee			ld (debug_mark+1),a  
40d3 3a dd 40			ld a, (.dmark+2)  
40d6 32 67 ee			ld (debug_mark+2),a  
40d9 18 03			jr .pastdmark  
40db ..			.dmark: db "SP3"  
40de f1			.pastdmark: pop af  
40df			endm  
# End of macro DMARK
40df						CALLMONITOR 
40df cd 6f ee			call debug_vector  
40e2				endm  
# End of macro CALLMONITOR
40e2					endif 
40e2 cd fe 1b				call forth_push_str 
40e5			 
40e5				       NEXTW 
40e5 c3 81 1f			jp macro_next 
40e8				endm 
# End of macro NEXTW
40e8			 
40e8			 
40e8			 
40e8			.SCROLL: 
40e8				CWHEAD .SCROLLD 63 "SCROLL" 6 WORD_FLAG_CODE 
40e8 53				db WORD_SYS_CORE+63             
40e9 15 41			dw .SCROLLD            
40eb 07				db 6 + 1 
40ec .. 00			db "SCROLL",0              
40f3				endm 
# End of macro CWHEAD
40f3			; | SCROLL ( -- ) Scroll up one line - next write will update if required | DONE 
40f3					if DEBUG_FORTH_WORDS_KEY 
40f3						DMARK "SCR" 
40f3 f5				push af  
40f4 3a 08 41			ld a, (.dmark)  
40f7 32 65 ee			ld (debug_mark),a  
40fa 3a 09 41			ld a, (.dmark+1)  
40fd 32 66 ee			ld (debug_mark+1),a  
4100 3a 0a 41			ld a, (.dmark+2)  
4103 32 67 ee			ld (debug_mark+2),a  
4106 18 03			jr .pastdmark  
4108 ..			.dmark: db "SCR"  
410b f1			.pastdmark: pop af  
410c			endm  
# End of macro DMARK
410c						CALLMONITOR 
410c cd 6f ee			call debug_vector  
410f				endm  
# End of macro CALLMONITOR
410f					endif 
410f			 
410f cd 8a 0b			call scroll_up 
4112			;	call update_display 
4112			 
4112					NEXTW 
4112 c3 81 1f			jp macro_next 
4115				endm 
# End of macro NEXTW
4115			 
4115			 
4115			 
4115			;		; get dir 
4115			; 
4115			;		FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4115			; 
4115			;		push hl 
4115			; 
4115			;		; destroy value TOS 
4115			; 
4115			;		FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4115			; 
4115			;		; get count 
4115			; 
4115			;		FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4115			; 
4115			;		push hl 
4115			; 
4115			;		; destroy value TOS 
4115			; 
4115			;		FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4115			; 
4115			;		; one value on hl get other one back 
4115			; 
4115			;		pop bc    ; count 
4115			; 
4115			;		pop de   ; dir 
4115			; 
4115			; 
4115			;		ld b, c 
4115			; 
4115			;.scrolldir:     push bc 
4115			;		push de 
4115			; 
4115			;		ld a, 0 
4115			;		cp e 
4115			;		jr z, .scrollup  
4115			;		call scroll_down 
4115			;		jr .scrollnext 
4115			;.scrollup:	call scroll_up 
4115			; 
4115			;		 
4115			;.scrollnext: 
4115			;		pop de 
4115			;		pop bc 
4115			;		djnz .scrolldir 
4115			; 
4115			; 
4115			; 
4115			; 
4115			; 
4115			;		NEXTW 
4115			 
4115			.SCROLLD: 
4115				CWHEAD .ATQ 63 "SCROLLD" 7 WORD_FLAG_CODE 
4115 53				db WORD_SYS_CORE+63             
4116 43 41			dw .ATQ            
4118 08				db 7 + 1 
4119 .. 00			db "SCROLLD",0              
4121				endm 
# End of macro CWHEAD
4121			; | SCROLLD ( -- ) Scroll down one line - next write will update if required | TO DO 
4121					if DEBUG_FORTH_WORDS_KEY 
4121						DMARK "SCD" 
4121 f5				push af  
4122 3a 36 41			ld a, (.dmark)  
4125 32 65 ee			ld (debug_mark),a  
4128 3a 37 41			ld a, (.dmark+1)  
412b 32 66 ee			ld (debug_mark+1),a  
412e 3a 38 41			ld a, (.dmark+2)  
4131 32 67 ee			ld (debug_mark+2),a  
4134 18 03			jr .pastdmark  
4136 ..			.dmark: db "SCD"  
4139 f1			.pastdmark: pop af  
413a			endm  
# End of macro DMARK
413a						CALLMONITOR 
413a cd 6f ee			call debug_vector  
413d				endm  
# End of macro CALLMONITOR
413d					endif 
413d			 
413d cd ae 0b			call scroll_down 
4140			;	call update_display 
4140			 
4140					NEXTW 
4140 c3 81 1f			jp macro_next 
4143				endm 
# End of macro NEXTW
4143			 
4143			 
4143			.ATQ: 
4143				CWHEAD .AUTODSP 78 "AT@" 3 WORD_FLAG_CODE 
4143 62				db WORD_SYS_CORE+78             
4144 a1 41			dw .AUTODSP            
4146 04				db 3 + 1 
4147 .. 00			db "AT@",0              
414b				endm 
# End of macro CWHEAD
414b			; | AT@ ( u1 u2 -- n ) Push to stack ASCII value at row u2 col u1 | DONE 
414b					if DEBUG_FORTH_WORDS_KEY 
414b						DMARK "ATA" 
414b f5				push af  
414c 3a 60 41			ld a, (.dmark)  
414f 32 65 ee			ld (debug_mark),a  
4152 3a 61 41			ld a, (.dmark+1)  
4155 32 66 ee			ld (debug_mark+1),a  
4158 3a 62 41			ld a, (.dmark+2)  
415b 32 67 ee			ld (debug_mark+2),a  
415e 18 03			jr .pastdmark  
4160 ..			.dmark: db "ATA"  
4163 f1			.pastdmark: pop af  
4164			endm  
# End of macro DMARK
4164						CALLMONITOR 
4164 cd 6f ee			call debug_vector  
4167				endm  
# End of macro CALLMONITOR
4167					endif 
4167			 
4167			 
4167					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4167 cd 95 1d			call macro_dsp_valuehl 
416a				endm 
# End of macro FORTH_DSP_VALUEHL
416a			 
416a					; TODO save cursor row 
416a 7d					ld a,l 
416b fe 02				cp 2 
416d 20 04				jr nz, .crow3aq 
416f 3e 28				ld a, display_row_2 
4171 18 12				jr .ccol1aq 
4173 fe 03		.crow3aq:		cp 3 
4175 20 04				jr nz, .crow4aq 
4177 3e 50				ld a, display_row_3 
4179 18 0a				jr .ccol1aq 
417b fe 04		.crow4aq:		cp 4 
417d 20 04				jr nz, .crow1aq 
417f 3e 78				ld a, display_row_4 
4181 18 02				jr .ccol1aq 
4183 3e 00		.crow1aq:		ld a,display_row_1 
4185 f5			.ccol1aq:		push af			; got row offset 
4186 6f					ld l,a 
4187 26 00				ld h,0 
4189					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4189 cd 4d 1e			call macro_forth_dsp_pop 
418c				endm 
# End of macro FORTH_DSP_POP
418c					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
418c cd 95 1d			call macro_dsp_valuehl 
418f				endm 
# End of macro FORTH_DSP_VALUEHL
418f					; TODO save cursor col 
418f f1					pop af 
4190 85					add l		; add col offset 
4191			 
4191					; add current frame buffer address 
4191 2a c6 eb				ld hl, (display_fb_active) 
4194 cd f5 0d				call addatohl 
4197			 
4197			 
4197			 
4197			 
4197					; get char frame buffer location offset in hl 
4197			 
4197 7e					ld a,(hl) 
4198 26 00				ld h, 0 
419a 6f					ld l, a 
419b			 
419b cd 90 1b				call forth_push_numhl 
419e			 
419e			 
419e					NEXTW 
419e c3 81 1f			jp macro_next 
41a1				endm 
# End of macro NEXTW
41a1			 
41a1			.AUTODSP: 
41a1				CWHEAD .MENU 79 "ADSP" 4 WORD_FLAG_CODE 
41a1 63				db WORD_SYS_CORE+79             
41a2 b7 41			dw .MENU            
41a4 05				db 4 + 1 
41a5 .. 00			db "ADSP",0              
41aa				endm 
# End of macro CWHEAD
41aa			; | ADSP ( u1 --  ) Enable/Disable Auto screen updates (SLOW). | DONE 
41aa			; | | If off, use DRAW to refresh. Default is on. $0003 will enable direct screen writes (TODO)  
41aa			 
41aa					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
41aa cd 95 1d			call macro_dsp_valuehl 
41ad				endm 
# End of macro FORTH_DSP_VALUEHL
41ad			 
41ad			;		push hl 
41ad			 
41ad					; destroy value TOS 
41ad			 
41ad					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
41ad cd 4d 1e			call macro_forth_dsp_pop 
41b0				endm 
# End of macro FORTH_DSP_POP
41b0			 
41b0			;		pop hl 
41b0			 
41b0 7d					ld a,l 
41b1 32 36 ea				ld (cli_autodisplay), a 
41b4				       NEXTW 
41b4 c3 81 1f			jp macro_next 
41b7				endm 
# End of macro NEXTW
41b7			 
41b7			.MENU: 
41b7				CWHEAD .ENDDISPLAY 92 "MENU" 4 WORD_FLAG_CODE 
41b7 70				db WORD_SYS_CORE+92             
41b8 60 42			dw .ENDDISPLAY            
41ba 05				db 4 + 1 
41bb .. 00			db "MENU",0              
41c0				endm 
# End of macro CWHEAD
41c0			; | MENU ( u1....ux n -- n ) Create a menu. n is the number of menu items on stack. Push number selection to TOS | DONE 
41c0			 
41c0			;		; get number of items on the stack 
41c0			; 
41c0				 
41c0					FORTH_DSP_VALUEHL 
41c0 cd 95 1d			call macro_dsp_valuehl 
41c3				endm 
# End of macro FORTH_DSP_VALUEHL
41c3				 
41c3					if DEBUG_FORTH_WORDS_KEY 
41c3						DMARK "MNU" 
41c3 f5				push af  
41c4 3a d8 41			ld a, (.dmark)  
41c7 32 65 ee			ld (debug_mark),a  
41ca 3a d9 41			ld a, (.dmark+1)  
41cd 32 66 ee			ld (debug_mark+1),a  
41d0 3a da 41			ld a, (.dmark+2)  
41d3 32 67 ee			ld (debug_mark+2),a  
41d6 18 03			jr .pastdmark  
41d8 ..			.dmark: db "MNU"  
41db f1			.pastdmark: pop af  
41dc			endm  
# End of macro DMARK
41dc						CALLMONITOR 
41dc cd 6f ee			call debug_vector  
41df				endm  
# End of macro CALLMONITOR
41df					endif 
41df			 
41df 45					ld b, l	 
41e0 05					dec b 
41e1			 
41e1					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
41e1 cd 4d 1e			call macro_forth_dsp_pop 
41e4				endm 
# End of macro FORTH_DSP_POP
41e4			 
41e4			 
41e4					; go directly through the stack to pluck out the string pointers and build an array 
41e4			 
41e4			;		FORTH_DSP 
41e4			 
41e4					; hl contains top most stack item 
41e4				 
41e4 11 bb e2				ld de, scratch 
41e7			 
41e7			.mbuild: 
41e7			 
41e7					FORTH_DSP_VALUEHL 
41e7 cd 95 1d			call macro_dsp_valuehl 
41ea				endm 
# End of macro FORTH_DSP_VALUEHL
41ea			 
41ea					if DEBUG_FORTH_WORDS 
41ea						DMARK "MN3" 
41ea f5				push af  
41eb 3a ff 41			ld a, (.dmark)  
41ee 32 65 ee			ld (debug_mark),a  
41f1 3a 00 42			ld a, (.dmark+1)  
41f4 32 66 ee			ld (debug_mark+1),a  
41f7 3a 01 42			ld a, (.dmark+2)  
41fa 32 67 ee			ld (debug_mark+2),a  
41fd 18 03			jr .pastdmark  
41ff ..			.dmark: db "MN3"  
4202 f1			.pastdmark: pop af  
4203			endm  
# End of macro DMARK
4203						CALLMONITOR 
4203 cd 6f ee			call debug_vector  
4206				endm  
# End of macro CALLMONITOR
4206					endif 
4206 eb					ex de, hl 
4207 73					ld (hl), e 
4208 23					inc hl 
4209 72					ld (hl), d 
420a 23					inc hl 
420b eb					ex de, hl 
420c			 
420c					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
420c cd 4d 1e			call macro_forth_dsp_pop 
420f				endm 
# End of macro FORTH_DSP_POP
420f			 
420f 10 d6				djnz .mbuild 
4211			 
4211					; done add term 
4211			 
4211 eb					ex de, hl 
4212 36 00				ld (hl), 0 
4214 23					inc hl 
4215 36 00				ld (hl), 0 
4217			 
4217				 
4217					 
4217 21 bb e2				ld hl, scratch 
421a			 
421a					if DEBUG_FORTH_WORDS 
421a						DMARK "MNx" 
421a f5				push af  
421b 3a 2f 42			ld a, (.dmark)  
421e 32 65 ee			ld (debug_mark),a  
4221 3a 30 42			ld a, (.dmark+1)  
4224 32 66 ee			ld (debug_mark+1),a  
4227 3a 31 42			ld a, (.dmark+2)  
422a 32 67 ee			ld (debug_mark+2),a  
422d 18 03			jr .pastdmark  
422f ..			.dmark: db "MNx"  
4232 f1			.pastdmark: pop af  
4233			endm  
# End of macro DMARK
4233						CALLMONITOR 
4233 cd 6f ee			call debug_vector  
4236				endm  
# End of macro CALLMONITOR
4236					endif 
4236			 
4236			 
4236			 
4236 3e 00				ld a, 0 
4238 cd f9 0b				call menu 
423b			 
423b			 
423b 6f					ld l, a 
423c 26 00				ld h, 0 
423e			 
423e					if DEBUG_FORTH_WORDS 
423e						DMARK "MNr" 
423e f5				push af  
423f 3a 53 42			ld a, (.dmark)  
4242 32 65 ee			ld (debug_mark),a  
4245 3a 54 42			ld a, (.dmark+1)  
4248 32 66 ee			ld (debug_mark+1),a  
424b 3a 55 42			ld a, (.dmark+2)  
424e 32 67 ee			ld (debug_mark+2),a  
4251 18 03			jr .pastdmark  
4253 ..			.dmark: db "MNr"  
4256 f1			.pastdmark: pop af  
4257			endm  
# End of macro DMARK
4257						CALLMONITOR 
4257 cd 6f ee			call debug_vector  
425a				endm  
# End of macro CALLMONITOR
425a					endif 
425a			 
425a cd 90 1b				call forth_push_numhl 
425d			 
425d			 
425d			 
425d			 
425d				       NEXTW 
425d c3 81 1f			jp macro_next 
4260				endm 
# End of macro NEXTW
4260			 
4260			 
4260			.ENDDISPLAY: 
4260			 
4260			; eof 
# End of file forth_words_display.asm
4260			include "forth_words_str.asm" 
4260			 
4260			; | ## String Words 
4260			 
4260			.SPLIT:   
4260			 
4260				CWHEAD .PTR 52 "SPLIT" 5 WORD_FLAG_CODE 
4260 48				db WORD_SYS_CORE+52             
4261 55 43			dw .PTR            
4263 06				db 5 + 1 
4264 .. 00			db "SPLIT",0              
426a				endm 
# End of macro CWHEAD
426a			; | SPLIT ( s d -- s s...sn c ) Using delimter d, add strings found in s to stack pushing item count c | DONE 
426a					if DEBUG_FORTH_WORDS_KEY 
426a						DMARK "SPT" 
426a f5				push af  
426b 3a 7f 42			ld a, (.dmark)  
426e 32 65 ee			ld (debug_mark),a  
4271 3a 80 42			ld a, (.dmark+1)  
4274 32 66 ee			ld (debug_mark+1),a  
4277 3a 81 42			ld a, (.dmark+2)  
427a 32 67 ee			ld (debug_mark+2),a  
427d 18 03			jr .pastdmark  
427f ..			.dmark: db "SPT"  
4282 f1			.pastdmark: pop af  
4283			endm  
# End of macro DMARK
4283						CALLMONITOR 
4283 cd 6f ee			call debug_vector  
4286				endm  
# End of macro CALLMONITOR
4286					endif 
4286			 
4286					; get delim 
4286					FORTH_DSP_VALUEHL 
4286 cd 95 1d			call macro_dsp_valuehl 
4289				endm 
# End of macro FORTH_DSP_VALUEHL
4289			 
4289					FORTH_DSP_POP 
4289 cd 4d 1e			call macro_forth_dsp_pop 
428c				endm 
# End of macro FORTH_DSP_POP
428c					 
428c			 
428c 45					ld b, l    ; move delim to b 
428d 0e 01				ld c, 1   ; count of poritions 
428f			 
428f c5					push bc 
4290			 
4290					if DEBUG_FORTH_WORDS 
4290						DMARK "SPa" 
4290 f5				push af  
4291 3a a5 42			ld a, (.dmark)  
4294 32 65 ee			ld (debug_mark),a  
4297 3a a6 42			ld a, (.dmark+1)  
429a 32 66 ee			ld (debug_mark+1),a  
429d 3a a7 42			ld a, (.dmark+2)  
42a0 32 67 ee			ld (debug_mark+2),a  
42a3 18 03			jr .pastdmark  
42a5 ..			.dmark: db "SPa"  
42a8 f1			.pastdmark: pop af  
42a9			endm  
# End of macro DMARK
42a9						CALLMONITOR 
42a9 cd 6f ee			call debug_vector  
42ac				endm  
# End of macro CALLMONITOR
42ac					endif 
42ac					; get pointer to string to chop up 
42ac					FORTH_DSP_VALUEHL 
42ac cd 95 1d			call macro_dsp_valuehl 
42af				endm 
# End of macro FORTH_DSP_VALUEHL
42af			 
42af			;		push hl 
42af 11 bb e2				ld de, scratch 
42b2			.spllop: 
42b2 c1					pop bc 
42b3 c5					push bc 
42b4			;		pop hl 
42b4					if DEBUG_FORTH_WORDS 
42b4						DMARK "SPl" 
42b4 f5				push af  
42b5 3a c9 42			ld a, (.dmark)  
42b8 32 65 ee			ld (debug_mark),a  
42bb 3a ca 42			ld a, (.dmark+1)  
42be 32 66 ee			ld (debug_mark+1),a  
42c1 3a cb 42			ld a, (.dmark+2)  
42c4 32 67 ee			ld (debug_mark+2),a  
42c7 18 03			jr .pastdmark  
42c9 ..			.dmark: db "SPl"  
42cc f1			.pastdmark: pop af  
42cd			endm  
# End of macro DMARK
42cd						CALLMONITOR 
42cd cd 6f ee			call debug_vector  
42d0				endm  
# End of macro CALLMONITOR
42d0					endif 
42d0 7e					ld a, (hl) 
42d1 b8					cp b 
42d2 28 08				jr z, .splnxt 
42d4 fe 00				cp 0 
42d6 28 34				jr z, .splend 
42d8 ed a0				ldi 
42da 18 d6				jr .spllop 
42dc			 
42dc					; hit dlim 
42dc			 
42dc			.splnxt: 
42dc					if DEBUG_FORTH_WORDS 
42dc						DMARK "SPx" 
42dc f5				push af  
42dd 3a f1 42			ld a, (.dmark)  
42e0 32 65 ee			ld (debug_mark),a  
42e3 3a f2 42			ld a, (.dmark+1)  
42e6 32 66 ee			ld (debug_mark+1),a  
42e9 3a f3 42			ld a, (.dmark+2)  
42ec 32 67 ee			ld (debug_mark+2),a  
42ef 18 03			jr .pastdmark  
42f1 ..			.dmark: db "SPx"  
42f4 f1			.pastdmark: pop af  
42f5			endm  
# End of macro DMARK
42f5						CALLMONITOR 
42f5 cd 6f ee			call debug_vector  
42f8				endm  
# End of macro CALLMONITOR
42f8					endif 
42f8 3e 00				ld a, 0 
42fa 12					ld (de), a 
42fb					;ex de, hl 
42fb e5					push hl 
42fc 21 bb e2				ld hl, scratch 
42ff cd fe 1b				call forth_push_str 
4302 e1					pop hl 
4303					;ex de, hl 
4303 23					inc hl 
4304 c1					pop bc 
4305 0c					inc c 
4306 c5					push bc 
4307 11 bb e2				ld de, scratch 
430a 18 a6				jr .spllop 
430c			 
430c			.splend:		 
430c					if DEBUG_FORTH_WORDS 
430c						DMARK "SPe" 
430c f5				push af  
430d 3a 21 43			ld a, (.dmark)  
4310 32 65 ee			ld (debug_mark),a  
4313 3a 22 43			ld a, (.dmark+1)  
4316 32 66 ee			ld (debug_mark+1),a  
4319 3a 23 43			ld a, (.dmark+2)  
431c 32 67 ee			ld (debug_mark+2),a  
431f 18 03			jr .pastdmark  
4321 ..			.dmark: db "SPe"  
4324 f1			.pastdmark: pop af  
4325			endm  
# End of macro DMARK
4325						CALLMONITOR 
4325 cd 6f ee			call debug_vector  
4328				endm  
# End of macro CALLMONITOR
4328					endif 
4328 12					ld (de), a 
4329 eb					ex de, hl 
432a			;		push hl 
432a 21 bb e2				ld hl, scratch 
432d cd fe 1b				call forth_push_str 
4330					 
4330					if DEBUG_FORTH_WORDS 
4330						DMARK "SPc" 
4330 f5				push af  
4331 3a 45 43			ld a, (.dmark)  
4334 32 65 ee			ld (debug_mark),a  
4337 3a 46 43			ld a, (.dmark+1)  
433a 32 66 ee			ld (debug_mark+1),a  
433d 3a 47 43			ld a, (.dmark+2)  
4340 32 67 ee			ld (debug_mark+2),a  
4343 18 03			jr .pastdmark  
4345 ..			.dmark: db "SPc"  
4348 f1			.pastdmark: pop af  
4349			endm  
# End of macro DMARK
4349						CALLMONITOR 
4349 cd 6f ee			call debug_vector  
434c				endm  
# End of macro CALLMONITOR
434c					endif 
434c			 
434c e1					pop hl    ; get counter from bc which has been push 
434d 26 00				ld h, 0 
434f			;		ld l, c 
434f cd 90 1b				call forth_push_numhl 
4352			 
4352			 
4352				NEXTW 
4352 c3 81 1f			jp macro_next 
4355				endm 
# End of macro NEXTW
4355			.PTR:   
4355			 
4355				CWHEAD .STYPE 52 "PTR" 3 WORD_FLAG_CODE 
4355 48				db WORD_SYS_CORE+52             
4356 82 43			dw .STYPE            
4358 04				db 3 + 1 
4359 .. 00			db "PTR",0              
435d				endm 
# End of macro CWHEAD
435d			; | PTR ( -- addr ) Low level push pointer to the value on TOS | DONE 
435d			; | | If a string will give the address of the string without dropping it. Handy for direct string access 
435d			; | | If a number can then use 2@ and 2! for direct value update without using stack words  
435d			 
435d					if DEBUG_FORTH_WORDS_KEY 
435d						DMARK "PTR" 
435d f5				push af  
435e 3a 72 43			ld a, (.dmark)  
4361 32 65 ee			ld (debug_mark),a  
4364 3a 73 43			ld a, (.dmark+1)  
4367 32 66 ee			ld (debug_mark+1),a  
436a 3a 74 43			ld a, (.dmark+2)  
436d 32 67 ee			ld (debug_mark+2),a  
4370 18 03			jr .pastdmark  
4372 ..			.dmark: db "PTR"  
4375 f1			.pastdmark: pop af  
4376			endm  
# End of macro DMARK
4376						CALLMONITOR 
4376 cd 6f ee			call debug_vector  
4379				endm  
# End of macro CALLMONITOR
4379					endif 
4379					FORTH_DSP_VALUEHL 
4379 cd 95 1d			call macro_dsp_valuehl 
437c				endm 
# End of macro FORTH_DSP_VALUEHL
437c cd 90 1b				call forth_push_numhl 
437f			 
437f			 
437f					NEXTW 
437f c3 81 1f			jp macro_next 
4382				endm 
# End of macro NEXTW
4382			.STYPE: 
4382				CWHEAD .UPPER 52 "STYPE" 5 WORD_FLAG_CODE 
4382 48				db WORD_SYS_CORE+52             
4383 d1 43			dw .UPPER            
4385 06				db 5 + 1 
4386 .. 00			db "STYPE",0              
438c				endm 
# End of macro CWHEAD
438c			; | STYPE ( u -- u type ) Push type of value on TOS - 's' string, 'i' integer...   | DONE 
438c					if DEBUG_FORTH_WORDS_KEY 
438c						DMARK "STY" 
438c f5				push af  
438d 3a a1 43			ld a, (.dmark)  
4390 32 65 ee			ld (debug_mark),a  
4393 3a a2 43			ld a, (.dmark+1)  
4396 32 66 ee			ld (debug_mark+1),a  
4399 3a a3 43			ld a, (.dmark+2)  
439c 32 67 ee			ld (debug_mark+2),a  
439f 18 03			jr .pastdmark  
43a1 ..			.dmark: db "STY"  
43a4 f1			.pastdmark: pop af  
43a5			endm  
# End of macro DMARK
43a5						CALLMONITOR 
43a5 cd 6f ee			call debug_vector  
43a8				endm  
# End of macro CALLMONITOR
43a8					endif 
43a8					FORTH_DSP 
43a8 cd 5b 1d			call macro_forth_dsp 
43ab				endm 
# End of macro FORTH_DSP
43ab					;v5 FORTH_DSP_VALUE 
43ab			 
43ab 7e					ld a, (hl) 
43ac			 
43ac f5					push af 
43ad			 
43ad			; Dont destroy TOS		FORTH_DSP_POP 
43ad			 
43ad f1					pop af 
43ae			 
43ae fe 01				cp DS_TYPE_STR 
43b0 28 09				jr z, .typestr 
43b2			 
43b2 fe 02				cp DS_TYPE_INUM 
43b4 28 0a				jr z, .typeinum 
43b6			 
43b6 21 cf 43				ld hl, .tna 
43b9 18 0a				jr .tpush 
43bb			 
43bb 21 cb 43		.typestr:	ld hl, .tstr 
43be 18 05				jr .tpush 
43c0 21 cd 43		.typeinum:	ld hl, .tinum 
43c3 18 00				jr .tpush 
43c5			 
43c5			.tpush: 
43c5			 
43c5 cd fe 1b				call forth_push_str 
43c8			 
43c8					NEXTW 
43c8 c3 81 1f			jp macro_next 
43cb				endm 
# End of macro NEXTW
43cb .. 00		.tstr:	db "s",0 
43cd .. 00		.tinum:  db "i",0 
43cf .. 00		.tna:   db "?", 0 
43d1			 
43d1			 
43d1			.UPPER: 
43d1				CWHEAD .LOWER 52 "UPPER" 5 WORD_FLAG_CODE 
43d1 48				db WORD_SYS_CORE+52             
43d2 0c 44			dw .LOWER            
43d4 06				db 5 + 1 
43d5 .. 00			db "UPPER",0              
43db				endm 
# End of macro CWHEAD
43db			; | UPPER ( s -- s ) Upper case string s  | DONE 
43db					if DEBUG_FORTH_WORDS_KEY 
43db						DMARK "UPR" 
43db f5				push af  
43dc 3a f0 43			ld a, (.dmark)  
43df 32 65 ee			ld (debug_mark),a  
43e2 3a f1 43			ld a, (.dmark+1)  
43e5 32 66 ee			ld (debug_mark+1),a  
43e8 3a f2 43			ld a, (.dmark+2)  
43eb 32 67 ee			ld (debug_mark+2),a  
43ee 18 03			jr .pastdmark  
43f0 ..			.dmark: db "UPR"  
43f3 f1			.pastdmark: pop af  
43f4			endm  
# End of macro DMARK
43f4						CALLMONITOR 
43f4 cd 6f ee			call debug_vector  
43f7				endm  
# End of macro CALLMONITOR
43f7					endif 
43f7			 
43f7					FORTH_DSP 
43f7 cd 5b 1d			call macro_forth_dsp 
43fa				endm 
# End of macro FORTH_DSP
43fa					 
43fa			; TODO check is string type 
43fa			 
43fa					FORTH_DSP_VALUEHL 
43fa cd 95 1d			call macro_dsp_valuehl 
43fd				endm 
# End of macro FORTH_DSP_VALUEHL
43fd			; get pointer to string in hl 
43fd			 
43fd 7e			.toup:		ld a, (hl) 
43fe fe 00				cp 0 
4400 28 07				jr z, .toupdone 
4402			 
4402 cd 6a 10				call to_upper 
4405			 
4405 77					ld (hl), a 
4406 23					inc hl 
4407 18 f4				jr .toup 
4409			 
4409					 
4409			 
4409			 
4409			; for each char convert to upper 
4409					 
4409			.toupdone: 
4409			 
4409			 
4409					NEXTW 
4409 c3 81 1f			jp macro_next 
440c				endm 
# End of macro NEXTW
440c			.LOWER: 
440c				CWHEAD .TCASE 52 "LOWER" 5 WORD_FLAG_CODE 
440c 48				db WORD_SYS_CORE+52             
440d 47 44			dw .TCASE            
440f 06				db 5 + 1 
4410 .. 00			db "LOWER",0              
4416				endm 
# End of macro CWHEAD
4416			; | LOWER ( s -- s ) Lower case string s  | DONE 
4416					if DEBUG_FORTH_WORDS_KEY 
4416						DMARK "LWR" 
4416 f5				push af  
4417 3a 2b 44			ld a, (.dmark)  
441a 32 65 ee			ld (debug_mark),a  
441d 3a 2c 44			ld a, (.dmark+1)  
4420 32 66 ee			ld (debug_mark+1),a  
4423 3a 2d 44			ld a, (.dmark+2)  
4426 32 67 ee			ld (debug_mark+2),a  
4429 18 03			jr .pastdmark  
442b ..			.dmark: db "LWR"  
442e f1			.pastdmark: pop af  
442f			endm  
# End of macro DMARK
442f						CALLMONITOR 
442f cd 6f ee			call debug_vector  
4432				endm  
# End of macro CALLMONITOR
4432					endif 
4432			 
4432					FORTH_DSP 
4432 cd 5b 1d			call macro_forth_dsp 
4435				endm 
# End of macro FORTH_DSP
4435					 
4435			; TODO check is string type 
4435			 
4435					FORTH_DSP_VALUEHL 
4435 cd 95 1d			call macro_dsp_valuehl 
4438				endm 
# End of macro FORTH_DSP_VALUEHL
4438			; get pointer to string in hl 
4438			 
4438 7e			.tolow:		ld a, (hl) 
4439 fe 00				cp 0 
443b 28 07				jr z, .tolowdone 
443d			 
443d cd 73 10				call to_lower 
4440			 
4440 77					ld (hl), a 
4441 23					inc hl 
4442 18 f4				jr .tolow 
4444			 
4444					 
4444			 
4444			 
4444			; for each char convert to low 
4444					 
4444			.tolowdone: 
4444					NEXTW 
4444 c3 81 1f			jp macro_next 
4447				endm 
# End of macro NEXTW
4447			.TCASE: 
4447				CWHEAD .SUBSTR 52 "TCASE" 5 WORD_FLAG_CODE 
4447 48				db WORD_SYS_CORE+52             
4448 7d 45			dw .SUBSTR            
444a 06				db 5 + 1 
444b .. 00			db "TCASE",0              
4451				endm 
# End of macro CWHEAD
4451			; | TCASE ( s -- s ) Title case string s  | DONE 
4451					if DEBUG_FORTH_WORDS_KEY 
4451						DMARK "TCS" 
4451 f5				push af  
4452 3a 66 44			ld a, (.dmark)  
4455 32 65 ee			ld (debug_mark),a  
4458 3a 67 44			ld a, (.dmark+1)  
445b 32 66 ee			ld (debug_mark+1),a  
445e 3a 68 44			ld a, (.dmark+2)  
4461 32 67 ee			ld (debug_mark+2),a  
4464 18 03			jr .pastdmark  
4466 ..			.dmark: db "TCS"  
4469 f1			.pastdmark: pop af  
446a			endm  
# End of macro DMARK
446a						CALLMONITOR 
446a cd 6f ee			call debug_vector  
446d				endm  
# End of macro CALLMONITOR
446d					endif 
446d			 
446d					FORTH_DSP 
446d cd 5b 1d			call macro_forth_dsp 
4470				endm 
# End of macro FORTH_DSP
4470					 
4470			; TODO check is string type 
4470			 
4470					FORTH_DSP_VALUEHL 
4470 cd 95 1d			call macro_dsp_valuehl 
4473				endm 
# End of macro FORTH_DSP_VALUEHL
4473			; get pointer to string in hl 
4473			 
4473					if DEBUG_FORTH_WORDS 
4473						DMARK "TC1" 
4473 f5				push af  
4474 3a 88 44			ld a, (.dmark)  
4477 32 65 ee			ld (debug_mark),a  
447a 3a 89 44			ld a, (.dmark+1)  
447d 32 66 ee			ld (debug_mark+1),a  
4480 3a 8a 44			ld a, (.dmark+2)  
4483 32 67 ee			ld (debug_mark+2),a  
4486 18 03			jr .pastdmark  
4488 ..			.dmark: db "TC1"  
448b f1			.pastdmark: pop af  
448c			endm  
# End of macro DMARK
448c						CALLMONITOR 
448c cd 6f ee			call debug_vector  
448f				endm  
# End of macro CALLMONITOR
448f					endif 
448f			 
448f					; first time in turn to upper case first char 
448f			 
448f 7e					ld a, (hl) 
4490 c3 1a 45				jp .totsiptou 
4493			 
4493			 
4493 7e			.tot:		ld a, (hl) 
4494 fe 00				cp 0 
4496 ca 5e 45				jp z, .totdone 
4499			 
4499					if DEBUG_FORTH_WORDS 
4499						DMARK "TC2" 
4499 f5				push af  
449a 3a ae 44			ld a, (.dmark)  
449d 32 65 ee			ld (debug_mark),a  
44a0 3a af 44			ld a, (.dmark+1)  
44a3 32 66 ee			ld (debug_mark+1),a  
44a6 3a b0 44			ld a, (.dmark+2)  
44a9 32 67 ee			ld (debug_mark+2),a  
44ac 18 03			jr .pastdmark  
44ae ..			.dmark: db "TC2"  
44b1 f1			.pastdmark: pop af  
44b2			endm  
# End of macro DMARK
44b2						CALLMONITOR 
44b2 cd 6f ee			call debug_vector  
44b5				endm  
# End of macro CALLMONITOR
44b5					endif 
44b5					; check to see if current char is a space 
44b5			 
44b5 fe 20				cp ' ' 
44b7 28 21				jr z, .totsp 
44b9 cd 73 10				call to_lower 
44bc					if DEBUG_FORTH_WORDS 
44bc						DMARK "TC3" 
44bc f5				push af  
44bd 3a d1 44			ld a, (.dmark)  
44c0 32 65 ee			ld (debug_mark),a  
44c3 3a d2 44			ld a, (.dmark+1)  
44c6 32 66 ee			ld (debug_mark+1),a  
44c9 3a d3 44			ld a, (.dmark+2)  
44cc 32 67 ee			ld (debug_mark+2),a  
44cf 18 03			jr .pastdmark  
44d1 ..			.dmark: db "TC3"  
44d4 f1			.pastdmark: pop af  
44d5			endm  
# End of macro DMARK
44d5						CALLMONITOR 
44d5 cd 6f ee			call debug_vector  
44d8				endm  
# End of macro CALLMONITOR
44d8					endif 
44d8 18 63				jr .totnxt 
44da			 
44da			.totsp:         ; on a space, find next char which should be upper 
44da			 
44da					if DEBUG_FORTH_WORDS 
44da						DMARK "TC4" 
44da f5				push af  
44db 3a ef 44			ld a, (.dmark)  
44de 32 65 ee			ld (debug_mark),a  
44e1 3a f0 44			ld a, (.dmark+1)  
44e4 32 66 ee			ld (debug_mark+1),a  
44e7 3a f1 44			ld a, (.dmark+2)  
44ea 32 67 ee			ld (debug_mark+2),a  
44ed 18 03			jr .pastdmark  
44ef ..			.dmark: db "TC4"  
44f2 f1			.pastdmark: pop af  
44f3			endm  
# End of macro DMARK
44f3						CALLMONITOR 
44f3 cd 6f ee			call debug_vector  
44f6				endm  
# End of macro CALLMONITOR
44f6					endif 
44f6					;; 
44f6			 
44f6 fe 20				cp ' ' 
44f8 20 20				jr nz, .totsiptou 
44fa 23					inc hl 
44fb 7e					ld a, (hl) 
44fc					if DEBUG_FORTH_WORDS 
44fc						DMARK "TC5" 
44fc f5				push af  
44fd 3a 11 45			ld a, (.dmark)  
4500 32 65 ee			ld (debug_mark),a  
4503 3a 12 45			ld a, (.dmark+1)  
4506 32 66 ee			ld (debug_mark+1),a  
4509 3a 13 45			ld a, (.dmark+2)  
450c 32 67 ee			ld (debug_mark+2),a  
450f 18 03			jr .pastdmark  
4511 ..			.dmark: db "TC5"  
4514 f1			.pastdmark: pop af  
4515			endm  
# End of macro DMARK
4515						CALLMONITOR 
4515 cd 6f ee			call debug_vector  
4518				endm  
# End of macro CALLMONITOR
4518					endif 
4518 18 c0				jr .totsp 
451a fe 00		.totsiptou:    cp 0 
451c 28 40				jr z, .totdone 
451e					; not space and not zero term so upper case it 
451e cd 6a 10				call to_upper 
4521			 
4521					if DEBUG_FORTH_WORDS 
4521						DMARK "TC6" 
4521 f5				push af  
4522 3a 36 45			ld a, (.dmark)  
4525 32 65 ee			ld (debug_mark),a  
4528 3a 37 45			ld a, (.dmark+1)  
452b 32 66 ee			ld (debug_mark+1),a  
452e 3a 38 45			ld a, (.dmark+2)  
4531 32 67 ee			ld (debug_mark+2),a  
4534 18 03			jr .pastdmark  
4536 ..			.dmark: db "TC6"  
4539 f1			.pastdmark: pop af  
453a			endm  
# End of macro DMARK
453a						CALLMONITOR 
453a cd 6f ee			call debug_vector  
453d				endm  
# End of macro CALLMONITOR
453d					endif 
453d			 
453d			 
453d			.totnxt: 
453d			 
453d 77					ld (hl), a 
453e 23					inc hl 
453f					if DEBUG_FORTH_WORDS 
453f						DMARK "TC7" 
453f f5				push af  
4540 3a 54 45			ld a, (.dmark)  
4543 32 65 ee			ld (debug_mark),a  
4546 3a 55 45			ld a, (.dmark+1)  
4549 32 66 ee			ld (debug_mark+1),a  
454c 3a 56 45			ld a, (.dmark+2)  
454f 32 67 ee			ld (debug_mark+2),a  
4552 18 03			jr .pastdmark  
4554 ..			.dmark: db "TC7"  
4557 f1			.pastdmark: pop af  
4558			endm  
# End of macro DMARK
4558						CALLMONITOR 
4558 cd 6f ee			call debug_vector  
455b				endm  
# End of macro CALLMONITOR
455b					endif 
455b c3 93 44				jp .tot 
455e			 
455e					 
455e			 
455e			 
455e			; for each char convert to low 
455e					 
455e			.totdone: 
455e					if DEBUG_FORTH_WORDS 
455e						DMARK "TCd" 
455e f5				push af  
455f 3a 73 45			ld a, (.dmark)  
4562 32 65 ee			ld (debug_mark),a  
4565 3a 74 45			ld a, (.dmark+1)  
4568 32 66 ee			ld (debug_mark+1),a  
456b 3a 75 45			ld a, (.dmark+2)  
456e 32 67 ee			ld (debug_mark+2),a  
4571 18 03			jr .pastdmark  
4573 ..			.dmark: db "TCd"  
4576 f1			.pastdmark: pop af  
4577			endm  
# End of macro DMARK
4577						CALLMONITOR 
4577 cd 6f ee			call debug_vector  
457a				endm  
# End of macro CALLMONITOR
457a					endif 
457a					NEXTW 
457a c3 81 1f			jp macro_next 
457d				endm 
# End of macro NEXTW
457d			 
457d			.SUBSTR: 
457d				CWHEAD .LEFT 52 "SUBSTR" 6 WORD_FLAG_CODE 
457d 48				db WORD_SYS_CORE+52             
457e db 45			dw .LEFT            
4580 07				db 6 + 1 
4581 .. 00			db "SUBSTR",0              
4588				endm 
# End of macro CWHEAD
4588			; | SUBSTR ( s u1 u2 -- s sb ) Push to TOS chars starting at position u1 and with length u2 from string s  | DONE 
4588			 
4588					if DEBUG_FORTH_WORDS_KEY 
4588						DMARK "SST" 
4588 f5				push af  
4589 3a 9d 45			ld a, (.dmark)  
458c 32 65 ee			ld (debug_mark),a  
458f 3a 9e 45			ld a, (.dmark+1)  
4592 32 66 ee			ld (debug_mark+1),a  
4595 3a 9f 45			ld a, (.dmark+2)  
4598 32 67 ee			ld (debug_mark+2),a  
459b 18 03			jr .pastdmark  
459d ..			.dmark: db "SST"  
45a0 f1			.pastdmark: pop af  
45a1			endm  
# End of macro DMARK
45a1						CALLMONITOR 
45a1 cd 6f ee			call debug_vector  
45a4				endm  
# End of macro CALLMONITOR
45a4					endif 
45a4			; TODO check string type 
45a4					FORTH_DSP_VALUEHL 
45a4 cd 95 1d			call macro_dsp_valuehl 
45a7				endm 
# End of macro FORTH_DSP_VALUEHL
45a7			 
45a7 e5					push hl      ; string length 
45a8			 
45a8					FORTH_DSP_POP 
45a8 cd 4d 1e			call macro_forth_dsp_pop 
45ab				endm 
# End of macro FORTH_DSP_POP
45ab			 
45ab					FORTH_DSP_VALUEHL 
45ab cd 95 1d			call macro_dsp_valuehl 
45ae				endm 
# End of macro FORTH_DSP_VALUEHL
45ae			 
45ae e5					push hl     ; start char 
45af			 
45af					FORTH_DSP_POP 
45af cd 4d 1e			call macro_forth_dsp_pop 
45b2				endm 
# End of macro FORTH_DSP_POP
45b2			 
45b2			 
45b2					FORTH_DSP_VALUE 
45b2 cd 7e 1d			call macro_forth_dsp_value 
45b5				endm 
# End of macro FORTH_DSP_VALUE
45b5			 
45b5 d1					pop de    ; get start post offset 
45b6			 
45b6 19					add hl, de    ; starting offset 
45b7			 
45b7 c1					pop bc 
45b8 c5					push bc      ; grab size of string 
45b9			 
45b9 e5					push hl    ; save string start  
45ba			 
45ba 26 00				ld h, 0 
45bc 69					ld l, c 
45bd 23					inc hl 
45be 23					inc hl 
45bf			 
45bf cd d0 11				call malloc 
45c2				if DEBUG_FORTH_MALLOC_GUARD 
45c2 cc aa 4f				call z,malloc_error 
45c5				endif 
45c5			 
45c5 eb					ex de, hl      ; save malloc area for string copy 
45c6 e1					pop hl    ; get back source 
45c7 c1					pop bc    ; get length of string back 
45c8			 
45c8 d5					push de    ; save malloc area for after we push 
45c9 ed b0				ldir     ; copy substr 
45cb			 
45cb			 
45cb eb					ex de, hl 
45cc 3e 00				ld a, 0 
45ce 77					ld (hl), a   ; term substr 
45cf			 
45cf					 
45cf e1					pop hl    ; get malloc so we can push it 
45d0 e5					push hl   ; save so we can free it afterwards 
45d1			 
45d1 cd fe 1b				call forth_push_str 
45d4			 
45d4 e1					pop hl 
45d5 cd 9a 12				call free 
45d8			 
45d8					 
45d8					 
45d8			 
45d8			 
45d8					NEXTW 
45d8 c3 81 1f			jp macro_next 
45db				endm 
# End of macro NEXTW
45db			 
45db			.LEFT: 
45db				CWHEAD .RIGHT 52 "LEFT" 4 WORD_FLAG_CODE 
45db 48				db WORD_SYS_CORE+52             
45dc 03 46			dw .RIGHT            
45de 05				db 4 + 1 
45df .. 00			db "LEFT",0              
45e4				endm 
# End of macro CWHEAD
45e4			; | LEFT ( s u -- s sub ) Push to TOS string u long starting from left of s  | TODO 
45e4					if DEBUG_FORTH_WORDS_KEY 
45e4						DMARK "LEF" 
45e4 f5				push af  
45e5 3a f9 45			ld a, (.dmark)  
45e8 32 65 ee			ld (debug_mark),a  
45eb 3a fa 45			ld a, (.dmark+1)  
45ee 32 66 ee			ld (debug_mark+1),a  
45f1 3a fb 45			ld a, (.dmark+2)  
45f4 32 67 ee			ld (debug_mark+2),a  
45f7 18 03			jr .pastdmark  
45f9 ..			.dmark: db "LEF"  
45fc f1			.pastdmark: pop af  
45fd			endm  
# End of macro DMARK
45fd						CALLMONITOR 
45fd cd 6f ee			call debug_vector  
4600				endm  
# End of macro CALLMONITOR
4600					endif 
4600			 
4600					NEXTW 
4600 c3 81 1f			jp macro_next 
4603				endm 
# End of macro NEXTW
4603			.RIGHT: 
4603				CWHEAD .STR2NUM 52 "RIGHT" 5 WORD_FLAG_CODE 
4603 48				db WORD_SYS_CORE+52             
4604 2c 46			dw .STR2NUM            
4606 06				db 5 + 1 
4607 .. 00			db "RIGHT",0              
460d				endm 
# End of macro CWHEAD
460d			; | RIGHT ( s u -- s sub ) Push to TOS string u long starting from right of s  | TODO 
460d					if DEBUG_FORTH_WORDS_KEY 
460d						DMARK "RIG" 
460d f5				push af  
460e 3a 22 46			ld a, (.dmark)  
4611 32 65 ee			ld (debug_mark),a  
4614 3a 23 46			ld a, (.dmark+1)  
4617 32 66 ee			ld (debug_mark+1),a  
461a 3a 24 46			ld a, (.dmark+2)  
461d 32 67 ee			ld (debug_mark+2),a  
4620 18 03			jr .pastdmark  
4622 ..			.dmark: db "RIG"  
4625 f1			.pastdmark: pop af  
4626			endm  
# End of macro DMARK
4626						CALLMONITOR 
4626 cd 6f ee			call debug_vector  
4629				endm  
# End of macro CALLMONITOR
4629					endif 
4629			 
4629					NEXTW 
4629 c3 81 1f			jp macro_next 
462c				endm 
# End of macro NEXTW
462c			 
462c			 
462c			.STR2NUM: 
462c				CWHEAD .NUM2STR 52 "STR2NUM" 7 WORD_FLAG_CODE 
462c 48				db WORD_SYS_CORE+52             
462d b8 46			dw .NUM2STR            
462f 08				db 7 + 1 
4630 .. 00			db "STR2NUM",0              
4638				endm 
# End of macro CWHEAD
4638			; | STR2NUM ( s -- n ) Convert a string on TOS to number | DONE 
4638			 
4638			 
4638			; TODO STR type check to do 
4638					if DEBUG_FORTH_WORDS_KEY 
4638						DMARK "S2N" 
4638 f5				push af  
4639 3a 4d 46			ld a, (.dmark)  
463c 32 65 ee			ld (debug_mark),a  
463f 3a 4e 46			ld a, (.dmark+1)  
4642 32 66 ee			ld (debug_mark+1),a  
4645 3a 4f 46			ld a, (.dmark+2)  
4648 32 67 ee			ld (debug_mark+2),a  
464b 18 03			jr .pastdmark  
464d ..			.dmark: db "S2N"  
4650 f1			.pastdmark: pop af  
4651			endm  
# End of macro DMARK
4651						CALLMONITOR 
4651 cd 6f ee			call debug_vector  
4654				endm  
# End of macro CALLMONITOR
4654					endif 
4654			 
4654					;FORTH_DSP 
4654					FORTH_DSP_VALUE 
4654 cd 7e 1d			call macro_forth_dsp_value 
4657				endm 
# End of macro FORTH_DSP_VALUE
4657					;inc hl 
4657			 
4657 eb					ex de, hl 
4658					if DEBUG_FORTH_WORDS 
4658						DMARK "S2a" 
4658 f5				push af  
4659 3a 6d 46			ld a, (.dmark)  
465c 32 65 ee			ld (debug_mark),a  
465f 3a 6e 46			ld a, (.dmark+1)  
4662 32 66 ee			ld (debug_mark+1),a  
4665 3a 6f 46			ld a, (.dmark+2)  
4668 32 67 ee			ld (debug_mark+2),a  
466b 18 03			jr .pastdmark  
466d ..			.dmark: db "S2a"  
4670 f1			.pastdmark: pop af  
4671			endm  
# End of macro DMARK
4671						CALLMONITOR 
4671 cd 6f ee			call debug_vector  
4674				endm  
# End of macro CALLMONITOR
4674					endif 
4674 cd f2 10				call string_to_uint16 
4677			 
4677					if DEBUG_FORTH_WORDS 
4677						DMARK "S2b" 
4677 f5				push af  
4678 3a 8c 46			ld a, (.dmark)  
467b 32 65 ee			ld (debug_mark),a  
467e 3a 8d 46			ld a, (.dmark+1)  
4681 32 66 ee			ld (debug_mark+1),a  
4684 3a 8e 46			ld a, (.dmark+2)  
4687 32 67 ee			ld (debug_mark+2),a  
468a 18 03			jr .pastdmark  
468c ..			.dmark: db "S2b"  
468f f1			.pastdmark: pop af  
4690			endm  
# End of macro DMARK
4690						CALLMONITOR 
4690 cd 6f ee			call debug_vector  
4693				endm  
# End of macro CALLMONITOR
4693					endif 
4693			;		push hl 
4693					FORTH_DSP_POP 
4693 cd 4d 1e			call macro_forth_dsp_pop 
4696				endm 
# End of macro FORTH_DSP_POP
4696			;		pop hl 
4696					 
4696					if DEBUG_FORTH_WORDS 
4696						DMARK "S2b" 
4696 f5				push af  
4697 3a ab 46			ld a, (.dmark)  
469a 32 65 ee			ld (debug_mark),a  
469d 3a ac 46			ld a, (.dmark+1)  
46a0 32 66 ee			ld (debug_mark+1),a  
46a3 3a ad 46			ld a, (.dmark+2)  
46a6 32 67 ee			ld (debug_mark+2),a  
46a9 18 03			jr .pastdmark  
46ab ..			.dmark: db "S2b"  
46ae f1			.pastdmark: pop af  
46af			endm  
# End of macro DMARK
46af						CALLMONITOR 
46af cd 6f ee			call debug_vector  
46b2				endm  
# End of macro CALLMONITOR
46b2					endif 
46b2 cd 90 1b				call forth_push_numhl	 
46b5			 
46b5				 
46b5				       NEXTW 
46b5 c3 81 1f			jp macro_next 
46b8				endm 
# End of macro NEXTW
46b8			.NUM2STR: 
46b8				CWHEAD .CONCAT 52 "NUM2STR" 7 WORD_FLAG_CODE 
46b8 48				db WORD_SYS_CORE+52             
46b9 4a 47			dw .CONCAT            
46bb 08				db 7 + 1 
46bc .. 00			db "NUM2STR",0              
46c4				endm 
# End of macro CWHEAD
46c4			; | NUM2STR ( n -- s ) Convert a number on TOS to zero padded string | DONE 
46c4			 
46c4			;		; malloc a string to target 
46c4			;		ld hl, 10     ; TODO max string size should be fine 
46c4			;		call malloc 
46c4			;		push hl    ; save malloc location 
46c4			; 
46c4			; 
46c4			;; TODO check int type 
46c4					if DEBUG_FORTH_WORDS_KEY 
46c4						DMARK "N2S" 
46c4 f5				push af  
46c5 3a d9 46			ld a, (.dmark)  
46c8 32 65 ee			ld (debug_mark),a  
46cb 3a da 46			ld a, (.dmark+1)  
46ce 32 66 ee			ld (debug_mark+1),a  
46d1 3a db 46			ld a, (.dmark+2)  
46d4 32 67 ee			ld (debug_mark+2),a  
46d7 18 03			jr .pastdmark  
46d9 ..			.dmark: db "N2S"  
46dc f1			.pastdmark: pop af  
46dd			endm  
# End of macro DMARK
46dd						CALLMONITOR 
46dd cd 6f ee			call debug_vector  
46e0				endm  
# End of macro CALLMONITOR
46e0					endif 
46e0			 
46e0					FORTH_DSP_VALUEHL 
46e0 cd 95 1d			call macro_dsp_valuehl 
46e3				endm 
# End of macro FORTH_DSP_VALUEHL
46e3			 
46e3					if DEBUG_FORTH_WORDS 
46e3						DMARK "NS1" 
46e3 f5				push af  
46e4 3a f8 46			ld a, (.dmark)  
46e7 32 65 ee			ld (debug_mark),a  
46ea 3a f9 46			ld a, (.dmark+1)  
46ed 32 66 ee			ld (debug_mark+1),a  
46f0 3a fa 46			ld a, (.dmark+2)  
46f3 32 67 ee			ld (debug_mark+2),a  
46f6 18 03			jr .pastdmark  
46f8 ..			.dmark: db "NS1"  
46fb f1			.pastdmark: pop af  
46fc			endm  
# End of macro DMARK
46fc						CALLMONITOR 
46fc cd 6f ee			call debug_vector  
46ff				endm  
# End of macro CALLMONITOR
46ff					endif 
46ff					FORTH_DSP_POP 
46ff cd 4d 1e			call macro_forth_dsp_pop 
4702				endm 
# End of macro FORTH_DSP_POP
4702			 
4702 eb					ex de, hl 
4703 21 bb e2				ld hl, scratch 
4706					if DEBUG_FORTH_WORDS 
4706						DMARK "NS2" 
4706 f5				push af  
4707 3a 1b 47			ld a, (.dmark)  
470a 32 65 ee			ld (debug_mark),a  
470d 3a 1c 47			ld a, (.dmark+1)  
4710 32 66 ee			ld (debug_mark+1),a  
4713 3a 1d 47			ld a, (.dmark+2)  
4716 32 67 ee			ld (debug_mark+2),a  
4719 18 03			jr .pastdmark  
471b ..			.dmark: db "NS2"  
471e f1			.pastdmark: pop af  
471f			endm  
# End of macro DMARK
471f						CALLMONITOR 
471f cd 6f ee			call debug_vector  
4722				endm  
# End of macro CALLMONITOR
4722					endif 
4722 cd 0a 11				call uitoa_16 
4725 21 bb e2				ld hl, scratch 
4728					if DEBUG_FORTH_WORDS 
4728						DMARK "NS3" 
4728 f5				push af  
4729 3a 3d 47			ld a, (.dmark)  
472c 32 65 ee			ld (debug_mark),a  
472f 3a 3e 47			ld a, (.dmark+1)  
4732 32 66 ee			ld (debug_mark+1),a  
4735 3a 3f 47			ld a, (.dmark+2)  
4738 32 67 ee			ld (debug_mark+2),a  
473b 18 03			jr .pastdmark  
473d ..			.dmark: db "NS3"  
4740 f1			.pastdmark: pop af  
4741			endm  
# End of macro DMARK
4741						CALLMONITOR 
4741 cd 6f ee			call debug_vector  
4744				endm  
# End of macro CALLMONITOR
4744					endif 
4744 cd fe 1b				call forth_push_str 
4747			;		ld a, l 
4747			;		call DispAToASCII   
4747			;;TODO need to chage above call to dump into string 
4747			; 
4747			; 
4747			 
4747				       NEXTW 
4747 c3 81 1f			jp macro_next 
474a				endm 
# End of macro NEXTW
474a			 
474a			.CONCAT: 
474a				CWHEAD .FIND 52 "CONCAT" 6 WORD_FLAG_CODE 
474a 48				db WORD_SYS_CORE+52             
474b fd 47			dw .FIND            
474d 07				db 6 + 1 
474e .. 00			db "CONCAT",0              
4755				endm 
# End of macro CWHEAD
4755			; | CONCAT ( s1 s2 -- s3 ) A s1 + s2 is pushed onto the stack | DONE 
4755			 
4755			; TODO check string type 
4755			; TODO create macro to get pointer for next item on stack. Handy for lots of things 
4755			 
4755					if DEBUG_FORTH_WORDS_KEY 
4755						DMARK "CON" 
4755 f5				push af  
4756 3a 6a 47			ld a, (.dmark)  
4759 32 65 ee			ld (debug_mark),a  
475c 3a 6b 47			ld a, (.dmark+1)  
475f 32 66 ee			ld (debug_mark+1),a  
4762 3a 6c 47			ld a, (.dmark+2)  
4765 32 67 ee			ld (debug_mark+2),a  
4768 18 03			jr .pastdmark  
476a ..			.dmark: db "CON"  
476d f1			.pastdmark: pop af  
476e			endm  
# End of macro DMARK
476e						CALLMONITOR 
476e cd 6f ee			call debug_vector  
4771				endm  
# End of macro CALLMONITOR
4771					endif 
4771			 
4771			 
4771					FORTH_DSP_VALUE 
4771 cd 7e 1d			call macro_forth_dsp_value 
4774				endm 
# End of macro FORTH_DSP_VALUE
4774 e5					push hl   ; s2 
4775			 
4775					FORTH_DSP_POP 
4775 cd 4d 1e			call macro_forth_dsp_pop 
4778				endm 
# End of macro FORTH_DSP_POP
4778			 
4778					FORTH_DSP_VALUE 
4778 cd 7e 1d			call macro_forth_dsp_value 
477b				endm 
# End of macro FORTH_DSP_VALUE
477b			 
477b e5					push hl   ; s1 
477c			 
477c					FORTH_DSP_POP 
477c cd 4d 1e			call macro_forth_dsp_pop 
477f				endm 
# End of macro FORTH_DSP_POP
477f					 
477f			 
477f					; copy s1 
477f			 
477f				 
477f					; save ptr 
477f e1					pop hl  
4780 e5					push hl 
4781 3e 00				ld a, 0 
4783 cd 66 11				call strlent 
4786					;inc hl    ; zer0 
4786 06 00				ld b, 0 
4788 4d					ld c, l 
4789 e1					pop hl		 
478a 11 bb e2				ld de, scratch	 
478d					if DEBUG_FORTH_WORDS 
478d						DMARK "CO1" 
478d f5				push af  
478e 3a a2 47			ld a, (.dmark)  
4791 32 65 ee			ld (debug_mark),a  
4794 3a a3 47			ld a, (.dmark+1)  
4797 32 66 ee			ld (debug_mark+1),a  
479a 3a a4 47			ld a, (.dmark+2)  
479d 32 67 ee			ld (debug_mark+2),a  
47a0 18 03			jr .pastdmark  
47a2 ..			.dmark: db "CO1"  
47a5 f1			.pastdmark: pop af  
47a6			endm  
# End of macro DMARK
47a6						CALLMONITOR 
47a6 cd 6f ee			call debug_vector  
47a9				endm  
# End of macro CALLMONITOR
47a9					endif 
47a9 ed b0				ldir 
47ab			 
47ab e1					pop hl 
47ac e5					push hl 
47ad d5					push de 
47ae			 
47ae			 
47ae 3e 00				ld a, 0 
47b0 cd 66 11				call strlent 
47b3 23					inc hl    ; zer0 
47b4 23					inc hl 
47b5 06 00				ld b, 0 
47b7 4d					ld c, l 
47b8 d1					pop de 
47b9 e1					pop hl		 
47ba					if DEBUG_FORTH_WORDS 
47ba						DMARK "CO2" 
47ba f5				push af  
47bb 3a cf 47			ld a, (.dmark)  
47be 32 65 ee			ld (debug_mark),a  
47c1 3a d0 47			ld a, (.dmark+1)  
47c4 32 66 ee			ld (debug_mark+1),a  
47c7 3a d1 47			ld a, (.dmark+2)  
47ca 32 67 ee			ld (debug_mark+2),a  
47cd 18 03			jr .pastdmark  
47cf ..			.dmark: db "CO2"  
47d2 f1			.pastdmark: pop af  
47d3			endm  
# End of macro DMARK
47d3						CALLMONITOR 
47d3 cd 6f ee			call debug_vector  
47d6				endm  
# End of macro CALLMONITOR
47d6					endif 
47d6 ed b0				ldir 
47d8			 
47d8			 
47d8			 
47d8 21 bb e2				ld hl, scratch 
47db					if DEBUG_FORTH_WORDS 
47db						DMARK "CO5" 
47db f5				push af  
47dc 3a f0 47			ld a, (.dmark)  
47df 32 65 ee			ld (debug_mark),a  
47e2 3a f1 47			ld a, (.dmark+1)  
47e5 32 66 ee			ld (debug_mark+1),a  
47e8 3a f2 47			ld a, (.dmark+2)  
47eb 32 67 ee			ld (debug_mark+2),a  
47ee 18 03			jr .pastdmark  
47f0 ..			.dmark: db "CO5"  
47f3 f1			.pastdmark: pop af  
47f4			endm  
# End of macro DMARK
47f4						CALLMONITOR 
47f4 cd 6f ee			call debug_vector  
47f7				endm  
# End of macro CALLMONITOR
47f7					endif 
47f7			 
47f7 cd fe 1b				call forth_push_str 
47fa			 
47fa			 
47fa			 
47fa			 
47fa				       NEXTW 
47fa c3 81 1f			jp macro_next 
47fd				endm 
# End of macro NEXTW
47fd			 
47fd			 
47fd			.FIND: 
47fd				CWHEAD .LEN 55 "FIND" 4 WORD_FLAG_CODE 
47fd 4b				db WORD_SYS_CORE+55             
47fe bb 48			dw .LEN            
4800 05				db 4 + 1 
4801 .. 00			db "FIND",0              
4806				endm 
# End of macro CWHEAD
4806			; | FIND ( s c -- s u ) Search the string s for the char c and push the position of the first occurance to TOS | DONE 
4806			 
4806					if DEBUG_FORTH_WORDS_KEY 
4806						DMARK "FND" 
4806 f5				push af  
4807 3a 1b 48			ld a, (.dmark)  
480a 32 65 ee			ld (debug_mark),a  
480d 3a 1c 48			ld a, (.dmark+1)  
4810 32 66 ee			ld (debug_mark+1),a  
4813 3a 1d 48			ld a, (.dmark+2)  
4816 32 67 ee			ld (debug_mark+2),a  
4819 18 03			jr .pastdmark  
481b ..			.dmark: db "FND"  
481e f1			.pastdmark: pop af  
481f			endm  
# End of macro DMARK
481f						CALLMONITOR 
481f cd 6f ee			call debug_vector  
4822				endm  
# End of macro CALLMONITOR
4822					endif 
4822			 
4822			; TODO check string type 
4822					FORTH_DSP_VALUE 
4822 cd 7e 1d			call macro_forth_dsp_value 
4825				endm 
# End of macro FORTH_DSP_VALUE
4825			 
4825 e5					push hl    
4826 7e					ld a,(hl)    ; char to find   
4827			; TODO change char to substr 
4827			 
4827 f5					push af 
4828					 
4828			 
4828			 
4828					if DEBUG_FORTH_WORDS 
4828						DMARK "FN1" 
4828 f5				push af  
4829 3a 3d 48			ld a, (.dmark)  
482c 32 65 ee			ld (debug_mark),a  
482f 3a 3e 48			ld a, (.dmark+1)  
4832 32 66 ee			ld (debug_mark+1),a  
4835 3a 3f 48			ld a, (.dmark+2)  
4838 32 67 ee			ld (debug_mark+2),a  
483b 18 03			jr .pastdmark  
483d ..			.dmark: db "FN1"  
4840 f1			.pastdmark: pop af  
4841			endm  
# End of macro DMARK
4841						CALLMONITOR 
4841 cd 6f ee			call debug_vector  
4844				endm  
# End of macro CALLMONITOR
4844					endif 
4844			 
4844					FORTH_DSP_POP 
4844 cd 4d 1e			call macro_forth_dsp_pop 
4847				endm 
# End of macro FORTH_DSP_POP
4847			 
4847					; string to search 
4847			 
4847					FORTH_DSP_VALUE 
4847 cd 7e 1d			call macro_forth_dsp_value 
484a				endm 
# End of macro FORTH_DSP_VALUE
484a			 
484a d1					pop de  ; d is char to find  
484b			 
484b					if DEBUG_FORTH_WORDS 
484b						DMARK "FN2" 
484b f5				push af  
484c 3a 60 48			ld a, (.dmark)  
484f 32 65 ee			ld (debug_mark),a  
4852 3a 61 48			ld a, (.dmark+1)  
4855 32 66 ee			ld (debug_mark+1),a  
4858 3a 62 48			ld a, (.dmark+2)  
485b 32 67 ee			ld (debug_mark+2),a  
485e 18 03			jr .pastdmark  
4860 ..			.dmark: db "FN2"  
4863 f1			.pastdmark: pop af  
4864			endm  
# End of macro DMARK
4864						CALLMONITOR 
4864 cd 6f ee			call debug_vector  
4867				endm  
# End of macro CALLMONITOR
4867					endif 
4867					 
4867 01 00 00				ld bc, 0 
486a 7e			.findchar:      ld a,(hl) 
486b fe 00				cp 0   		 
486d 28 27				jr z, .finddone     
486f ba					cp d 
4870 28 20				jr z, .foundchar 
4872 03					inc bc 
4873 23					inc hl 
4874					if DEBUG_FORTH_WORDS 
4874						DMARK "FN3" 
4874 f5				push af  
4875 3a 89 48			ld a, (.dmark)  
4878 32 65 ee			ld (debug_mark),a  
487b 3a 8a 48			ld a, (.dmark+1)  
487e 32 66 ee			ld (debug_mark+1),a  
4881 3a 8b 48			ld a, (.dmark+2)  
4884 32 67 ee			ld (debug_mark+2),a  
4887 18 03			jr .pastdmark  
4889 ..			.dmark: db "FN3"  
488c f1			.pastdmark: pop af  
488d			endm  
# End of macro DMARK
488d						CALLMONITOR 
488d cd 6f ee			call debug_vector  
4890				endm  
# End of macro CALLMONITOR
4890					endif 
4890 18 d8				jr .findchar 
4892			 
4892			 
4892 c5			.foundchar:	push bc 
4893 e1					pop hl 
4894 18 03				jr .findexit 
4896			 
4896			 
4896							 
4896			 
4896			.finddone:     ; got to end of string with no find 
4896 21 00 00				ld hl, 0 
4899			.findexit: 
4899			 
4899					if DEBUG_FORTH_WORDS 
4899						DMARK "FNd" 
4899 f5				push af  
489a 3a ae 48			ld a, (.dmark)  
489d 32 65 ee			ld (debug_mark),a  
48a0 3a af 48			ld a, (.dmark+1)  
48a3 32 66 ee			ld (debug_mark+1),a  
48a6 3a b0 48			ld a, (.dmark+2)  
48a9 32 67 ee			ld (debug_mark+2),a  
48ac 18 03			jr .pastdmark  
48ae ..			.dmark: db "FNd"  
48b1 f1			.pastdmark: pop af  
48b2			endm  
# End of macro DMARK
48b2						CALLMONITOR 
48b2 cd 6f ee			call debug_vector  
48b5				endm  
# End of macro CALLMONITOR
48b5					endif 
48b5 cd 90 1b			call forth_push_numhl 
48b8			 
48b8				       NEXTW 
48b8 c3 81 1f			jp macro_next 
48bb				endm 
# End of macro NEXTW
48bb			 
48bb			.LEN: 
48bb				CWHEAD .ASC 56 "COUNT" 5 WORD_FLAG_CODE 
48bb 4c				db WORD_SYS_CORE+56             
48bc 25 49			dw .ASC            
48be 06				db 5 + 1 
48bf .. 00			db "COUNT",0              
48c5				endm 
# End of macro CWHEAD
48c5			; | COUNT (  str -- str u1 ) Push the length of the string str on TOS as u1 | DONE 
48c5			 
48c5					if DEBUG_FORTH_WORDS_KEY 
48c5						DMARK "CNT" 
48c5 f5				push af  
48c6 3a da 48			ld a, (.dmark)  
48c9 32 65 ee			ld (debug_mark),a  
48cc 3a db 48			ld a, (.dmark+1)  
48cf 32 66 ee			ld (debug_mark+1),a  
48d2 3a dc 48			ld a, (.dmark+2)  
48d5 32 67 ee			ld (debug_mark+2),a  
48d8 18 03			jr .pastdmark  
48da ..			.dmark: db "CNT"  
48dd f1			.pastdmark: pop af  
48de			endm  
# End of macro DMARK
48de						CALLMONITOR 
48de cd 6f ee			call debug_vector  
48e1				endm  
# End of macro CALLMONITOR
48e1					endif 
48e1			; TODO check string type 
48e1					FORTH_DSP_VALUE 
48e1 cd 7e 1d			call macro_forth_dsp_value 
48e4				endm 
# End of macro FORTH_DSP_VALUE
48e4			 
48e4			 
48e4					if DEBUG_FORTH_WORDS 
48e4						DMARK "CN?" 
48e4 f5				push af  
48e5 3a f9 48			ld a, (.dmark)  
48e8 32 65 ee			ld (debug_mark),a  
48eb 3a fa 48			ld a, (.dmark+1)  
48ee 32 66 ee			ld (debug_mark+1),a  
48f1 3a fb 48			ld a, (.dmark+2)  
48f4 32 67 ee			ld (debug_mark+2),a  
48f7 18 03			jr .pastdmark  
48f9 ..			.dmark: db "CN?"  
48fc f1			.pastdmark: pop af  
48fd			endm  
# End of macro DMARK
48fd						CALLMONITOR 
48fd cd 6f ee			call debug_vector  
4900				endm  
# End of macro CALLMONITOR
4900					endif 
4900 cd 5b 11				call strlenz 
4903					if DEBUG_FORTH_WORDS 
4903						DMARK "CNl" 
4903 f5				push af  
4904 3a 18 49			ld a, (.dmark)  
4907 32 65 ee			ld (debug_mark),a  
490a 3a 19 49			ld a, (.dmark+1)  
490d 32 66 ee			ld (debug_mark+1),a  
4910 3a 1a 49			ld a, (.dmark+2)  
4913 32 67 ee			ld (debug_mark+2),a  
4916 18 03			jr .pastdmark  
4918 ..			.dmark: db "CNl"  
491b f1			.pastdmark: pop af  
491c			endm  
# End of macro DMARK
491c						CALLMONITOR 
491c cd 6f ee			call debug_vector  
491f				endm  
# End of macro CALLMONITOR
491f					endif 
491f			 
491f cd 90 1b				call forth_push_numhl 
4922			 
4922			 
4922			 
4922				       NEXTW 
4922 c3 81 1f			jp macro_next 
4925				endm 
# End of macro NEXTW
4925			.ASC: 
4925				CWHEAD .CHR 57 "ASC" 3 WORD_FLAG_CODE 
4925 4d				db WORD_SYS_CORE+57             
4926 93 49			dw .CHR            
4928 04				db 3 + 1 
4929 .. 00			db "ASC",0              
492d				endm 
# End of macro CWHEAD
492d			; | ASC ( u -- n ) Get the ASCII value of the first character of the string on TOS | DONE 
492d					if DEBUG_FORTH_WORDS_KEY 
492d						DMARK "ASC" 
492d f5				push af  
492e 3a 42 49			ld a, (.dmark)  
4931 32 65 ee			ld (debug_mark),a  
4934 3a 43 49			ld a, (.dmark+1)  
4937 32 66 ee			ld (debug_mark+1),a  
493a 3a 44 49			ld a, (.dmark+2)  
493d 32 67 ee			ld (debug_mark+2),a  
4940 18 03			jr .pastdmark  
4942 ..			.dmark: db "ASC"  
4945 f1			.pastdmark: pop af  
4946			endm  
# End of macro DMARK
4946						CALLMONITOR 
4946 cd 6f ee			call debug_vector  
4949				endm  
# End of macro CALLMONITOR
4949					endif 
4949					FORTH_DSP_VALUE 
4949 cd 7e 1d			call macro_forth_dsp_value 
494c				endm 
# End of macro FORTH_DSP_VALUE
494c					;v5 FORTH_DSP_VALUE 
494c			;		inc hl      ; now at start of numeric as string 
494c			 
494c e5					push hl 
494d			 
494d					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
494d cd 4d 1e			call macro_forth_dsp_pop 
4950				endm 
# End of macro FORTH_DSP_POP
4950			 
4950 e1					pop hl 
4951			 
4951					if DEBUG_FORTH_WORDS 
4951						DMARK "AS1" 
4951 f5				push af  
4952 3a 66 49			ld a, (.dmark)  
4955 32 65 ee			ld (debug_mark),a  
4958 3a 67 49			ld a, (.dmark+1)  
495b 32 66 ee			ld (debug_mark+1),a  
495e 3a 68 49			ld a, (.dmark+2)  
4961 32 67 ee			ld (debug_mark+2),a  
4964 18 03			jr .pastdmark  
4966 ..			.dmark: db "AS1"  
4969 f1			.pastdmark: pop af  
496a			endm  
# End of macro DMARK
496a						CALLMONITOR 
496a cd 6f ee			call debug_vector  
496d				endm  
# End of macro CALLMONITOR
496d					endif 
496d					; push the content of a onto the stack as a value 
496d			 
496d 7e					ld a,(hl)   ; get char 
496e 26 00				ld h,0 
4970 6f					ld l,a 
4971					if DEBUG_FORTH_WORDS 
4971						DMARK "AS2" 
4971 f5				push af  
4972 3a 86 49			ld a, (.dmark)  
4975 32 65 ee			ld (debug_mark),a  
4978 3a 87 49			ld a, (.dmark+1)  
497b 32 66 ee			ld (debug_mark+1),a  
497e 3a 88 49			ld a, (.dmark+2)  
4981 32 67 ee			ld (debug_mark+2),a  
4984 18 03			jr .pastdmark  
4986 ..			.dmark: db "AS2"  
4989 f1			.pastdmark: pop af  
498a			endm  
# End of macro DMARK
498a						CALLMONITOR 
498a cd 6f ee			call debug_vector  
498d				endm  
# End of macro CALLMONITOR
498d					endif 
498d cd 90 1b				call forth_push_numhl 
4990			 
4990				       NEXTW 
4990 c3 81 1f			jp macro_next 
4993				endm 
# End of macro NEXTW
4993			 
4993			.CHR: 
4993				CWHEAD .ENDSTR 57 "CHR" 3 WORD_FLAG_CODE 
4993 4d				db WORD_SYS_CORE+57             
4994 cf 49			dw .ENDSTR            
4996 04				db 3 + 1 
4997 .. 00			db "CHR",0              
499b				endm 
# End of macro CWHEAD
499b			; | CHR ( u -- n ) The ASCII character value of u is turned into a string n on the stack | DONE 
499b					if DEBUG_FORTH_WORDS_KEY 
499b						DMARK "CHR" 
499b f5				push af  
499c 3a b0 49			ld a, (.dmark)  
499f 32 65 ee			ld (debug_mark),a  
49a2 3a b1 49			ld a, (.dmark+1)  
49a5 32 66 ee			ld (debug_mark+1),a  
49a8 3a b2 49			ld a, (.dmark+2)  
49ab 32 67 ee			ld (debug_mark+2),a  
49ae 18 03			jr .pastdmark  
49b0 ..			.dmark: db "CHR"  
49b3 f1			.pastdmark: pop af  
49b4			endm  
# End of macro DMARK
49b4						CALLMONITOR 
49b4 cd 6f ee			call debug_vector  
49b7				endm  
# End of macro CALLMONITOR
49b7					endif 
49b7					FORTH_DSP_VALUEHL 
49b7 cd 95 1d			call macro_dsp_valuehl 
49ba				endm 
# End of macro FORTH_DSP_VALUEHL
49ba			 
49ba					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
49ba cd 4d 1e			call macro_forth_dsp_pop 
49bd				endm 
# End of macro FORTH_DSP_POP
49bd			 
49bd					; save asci byte as a zero term string and push string 
49bd			 
49bd 7d					ld a,l 
49be 32 bb e2				ld (scratch), a 
49c1			 
49c1 3e 00				ld a, 0 
49c3 32 bc e2				ld (scratch+1), a 
49c6			 
49c6 21 bb e2				ld hl, scratch 
49c9 cd fe 1b				call forth_push_str 
49cc			 
49cc			 
49cc				       NEXTW 
49cc c3 81 1f			jp macro_next 
49cf				endm 
# End of macro NEXTW
49cf			 
49cf			 
49cf			 
49cf			 
49cf			.ENDSTR: 
49cf			; eof 
49cf			 
# End of file forth_words_str.asm
49cf			include "forth_words_key.asm" 
49cf			 
49cf			; | ## Keyboard Words 
49cf			 
49cf			.KEY: 
49cf				CWHEAD .KEYDB 42 "KEY" 3 WORD_FLAG_CODE 
49cf 3e				db WORD_SYS_CORE+42             
49d0 ff 49			dw .KEYDB            
49d2 04				db 3 + 1 
49d3 .. 00			db "KEY",0              
49d7				endm 
# End of macro CWHEAD
49d7			; | KEY ( -- u ) A non-blocking read of keypress | DONE 
49d7			; | | The ASCII key (or key code) is pushed to stack. If no key is currently held down then push a 0 
49d7			; | | Can use something like this to process: 
49d7			; | | > repeat active . key ?dup if emit then #1 until  
49d7			 
49d7					if DEBUG_FORTH_WORDS_KEY 
49d7						DMARK "KEY" 
49d7 f5				push af  
49d8 3a ec 49			ld a, (.dmark)  
49db 32 65 ee			ld (debug_mark),a  
49de 3a ed 49			ld a, (.dmark+1)  
49e1 32 66 ee			ld (debug_mark+1),a  
49e4 3a ee 49			ld a, (.dmark+2)  
49e7 32 67 ee			ld (debug_mark+2),a  
49ea 18 03			jr .pastdmark  
49ec ..			.dmark: db "KEY"  
49ef f1			.pastdmark: pop af  
49f0			endm  
# End of macro DMARK
49f0						CALLMONITOR 
49f0 cd 6f ee			call debug_vector  
49f3				endm  
# End of macro CALLMONITOR
49f3					endif 
49f3			; TODO currently waits 
49f3 cd 3b 61				call cinndb 
49f6					;call cin_wait 
49f6 6f					ld l, a 
49f7 26 00				ld h, 0 
49f9 cd 90 1b				call forth_push_numhl 
49fc					NEXTW 
49fc c3 81 1f			jp macro_next 
49ff				endm 
# End of macro NEXTW
49ff			.KEYDB: 
49ff				CWHEAD .WAITK 42 "KEYDB" 5 WORD_FLAG_CODE 
49ff 3e				db WORD_SYS_CORE+42             
4a00 31 4a			dw .WAITK            
4a02 06				db 5 + 1 
4a03 .. 00			db "KEYDB",0              
4a09				endm 
# End of macro CWHEAD
4a09			; | KEYDB ( -- u ) A non-blocking read of keypress with key release debounce | DONE 
4a09			; | | The ASCII key (or key code) is pushed to stack. If no key is currently held down then push a 0 
4a09			; | | Can use something like this to process: 
4a09			; | | > repeat active . key ?dup if emit then #1 until  
4a09			 
4a09					if DEBUG_FORTH_WORDS_KEY 
4a09						DMARK "KEB" 
4a09 f5				push af  
4a0a 3a 1e 4a			ld a, (.dmark)  
4a0d 32 65 ee			ld (debug_mark),a  
4a10 3a 1f 4a			ld a, (.dmark+1)  
4a13 32 66 ee			ld (debug_mark+1),a  
4a16 3a 20 4a			ld a, (.dmark+2)  
4a19 32 67 ee			ld (debug_mark+2),a  
4a1c 18 03			jr .pastdmark  
4a1e ..			.dmark: db "KEB"  
4a21 f1			.pastdmark: pop af  
4a22			endm  
# End of macro DMARK
4a22						CALLMONITOR 
4a22 cd 6f ee			call debug_vector  
4a25				endm  
# End of macro CALLMONITOR
4a25					endif 
4a25			; TODO currently waits 
4a25 cd 3b 61				call cin 
4a28					;call cin_wait 
4a28 6f					ld l, a 
4a29 26 00				ld h, 0 
4a2b cd 90 1b				call forth_push_numhl 
4a2e					NEXTW 
4a2e c3 81 1f			jp macro_next 
4a31				endm 
# End of macro NEXTW
4a31			.WAITK: 
4a31				CWHEAD .ACCEPT 43 "WAITK" 5 WORD_FLAG_CODE 
4a31 3f				db WORD_SYS_CORE+43             
4a32 63 4a			dw .ACCEPT            
4a34 06				db 5 + 1 
4a35 .. 00			db "WAITK",0              
4a3b				endm 
# End of macro CWHEAD
4a3b			; | WAITK ( -- w ) Wait for keypress TOS is key press | DONE 
4a3b					if DEBUG_FORTH_WORDS_KEY 
4a3b						DMARK "WAI" 
4a3b f5				push af  
4a3c 3a 50 4a			ld a, (.dmark)  
4a3f 32 65 ee			ld (debug_mark),a  
4a42 3a 51 4a			ld a, (.dmark+1)  
4a45 32 66 ee			ld (debug_mark+1),a  
4a48 3a 52 4a			ld a, (.dmark+2)  
4a4b 32 67 ee			ld (debug_mark+2),a  
4a4e 18 03			jr .pastdmark  
4a50 ..			.dmark: db "WAI"  
4a53 f1			.pastdmark: pop af  
4a54			endm  
# End of macro DMARK
4a54						CALLMONITOR 
4a54 cd 6f ee			call debug_vector  
4a57				endm  
# End of macro CALLMONITOR
4a57					endif 
4a57 cd 33 61				call cin_wait 
4a5a 6f					ld l, a 
4a5b 26 00				ld h, 0 
4a5d cd 90 1b				call forth_push_numhl 
4a60					NEXTW 
4a60 c3 81 1f			jp macro_next 
4a63				endm 
# End of macro NEXTW
4a63			.ACCEPT: 
4a63				CWHEAD .EDIT 44 "ACCEPT" 6 WORD_FLAG_CODE 
4a63 40				db WORD_SYS_CORE+44             
4a64 c1 4a			dw .EDIT            
4a66 07				db 6 + 1 
4a67 .. 00			db "ACCEPT",0              
4a6e				endm 
# End of macro CWHEAD
4a6e			; | ACCEPT ( -- w ) Prompt for text input and push pointer to string | DONE 
4a6e					; TODO crashes on push 
4a6e					if DEBUG_FORTH_WORDS_KEY 
4a6e						DMARK "ACC" 
4a6e f5				push af  
4a6f 3a 83 4a			ld a, (.dmark)  
4a72 32 65 ee			ld (debug_mark),a  
4a75 3a 84 4a			ld a, (.dmark+1)  
4a78 32 66 ee			ld (debug_mark+1),a  
4a7b 3a 85 4a			ld a, (.dmark+2)  
4a7e 32 67 ee			ld (debug_mark+2),a  
4a81 18 03			jr .pastdmark  
4a83 ..			.dmark: db "ACC"  
4a86 f1			.pastdmark: pop af  
4a87			endm  
# End of macro DMARK
4a87						CALLMONITOR 
4a87 cd 6f ee			call debug_vector  
4a8a				endm  
# End of macro CALLMONITOR
4a8a					endif 
4a8a 21 b9 e4				ld hl, os_input 
4a8d 3e 00				ld a, 0 
4a8f 77					ld (hl),a 
4a90 3a 58 ea				ld a,(f_cursor_ptr) 
4a93 16 64				ld d, 100 
4a95 0e 00				ld c, 0 
4a97 1e 28				ld e, 40 
4a99 cd 22 0e				call input_str 
4a9c					; TODO perhaps do a type check and wrap in quotes if not a number 
4a9c 21 b9 e4				ld hl, os_input 
4a9f					if DEBUG_FORTH_WORDS 
4a9f						DMARK "AC1" 
4a9f f5				push af  
4aa0 3a b4 4a			ld a, (.dmark)  
4aa3 32 65 ee			ld (debug_mark),a  
4aa6 3a b5 4a			ld a, (.dmark+1)  
4aa9 32 66 ee			ld (debug_mark+1),a  
4aac 3a b6 4a			ld a, (.dmark+2)  
4aaf 32 67 ee			ld (debug_mark+2),a  
4ab2 18 03			jr .pastdmark  
4ab4 ..			.dmark: db "AC1"  
4ab7 f1			.pastdmark: pop af  
4ab8			endm  
# End of macro DMARK
4ab8						CALLMONITOR 
4ab8 cd 6f ee			call debug_vector  
4abb				endm  
# End of macro CALLMONITOR
4abb					endif 
4abb cd fe 1b				call forth_push_str 
4abe					NEXTW 
4abe c3 81 1f			jp macro_next 
4ac1				endm 
# End of macro NEXTW
4ac1			 
4ac1			.EDIT: 
4ac1				CWHEAD .DEDIT 44 "EDIT" 4 WORD_FLAG_CODE 
4ac1 40				db WORD_SYS_CORE+44             
4ac2 63 4b			dw .DEDIT            
4ac4 05				db 4 + 1 
4ac5 .. 00			db "EDIT",0              
4aca				endm 
# End of macro CWHEAD
4aca			; | EDIT ( u -- u ) Takes string on TOS and allows editing of it. Pushes it back once done. | DONE 
4aca			 
4aca					; TODO does not copy from stack 
4aca					if DEBUG_FORTH_WORDS_KEY 
4aca						DMARK "EDT" 
4aca f5				push af  
4acb 3a df 4a			ld a, (.dmark)  
4ace 32 65 ee			ld (debug_mark),a  
4ad1 3a e0 4a			ld a, (.dmark+1)  
4ad4 32 66 ee			ld (debug_mark+1),a  
4ad7 3a e1 4a			ld a, (.dmark+2)  
4ada 32 67 ee			ld (debug_mark+2),a  
4add 18 03			jr .pastdmark  
4adf ..			.dmark: db "EDT"  
4ae2 f1			.pastdmark: pop af  
4ae3			endm  
# End of macro DMARK
4ae3						CALLMONITOR 
4ae3 cd 6f ee			call debug_vector  
4ae6				endm  
# End of macro CALLMONITOR
4ae6					endif 
4ae6			 
4ae6					;FORTH_DSP 
4ae6					FORTH_DSP_VALUEHL 
4ae6 cd 95 1d			call macro_dsp_valuehl 
4ae9				endm 
# End of macro FORTH_DSP_VALUEHL
4ae9			;		inc hl    ; TODO do type check 
4ae9			 
4ae9			;		call get_word_hl 
4ae9 e5					push hl 
4aea					if DEBUG_FORTH_WORDS 
4aea						DMARK "EDp" 
4aea f5				push af  
4aeb 3a ff 4a			ld a, (.dmark)  
4aee 32 65 ee			ld (debug_mark),a  
4af1 3a 00 4b			ld a, (.dmark+1)  
4af4 32 66 ee			ld (debug_mark+1),a  
4af7 3a 01 4b			ld a, (.dmark+2)  
4afa 32 67 ee			ld (debug_mark+2),a  
4afd 18 03			jr .pastdmark  
4aff ..			.dmark: db "EDp"  
4b02 f1			.pastdmark: pop af  
4b03			endm  
# End of macro DMARK
4b03						CALLMONITOR 
4b03 cd 6f ee			call debug_vector  
4b06				endm  
# End of macro CALLMONITOR
4b06					endif 
4b06				;	ld a, 0 
4b06 cd 5b 11				call strlenz 
4b09 23					inc hl 
4b0a			 
4b0a 06 00				ld b, 0 
4b0c 4d					ld c, l 
4b0d			 
4b0d e1					pop hl 
4b0e 11 b9 e4				ld de, os_input 
4b11					if DEBUG_FORTH_WORDS_KEY 
4b11						DMARK "EDc" 
4b11 f5				push af  
4b12 3a 26 4b			ld a, (.dmark)  
4b15 32 65 ee			ld (debug_mark),a  
4b18 3a 27 4b			ld a, (.dmark+1)  
4b1b 32 66 ee			ld (debug_mark+1),a  
4b1e 3a 28 4b			ld a, (.dmark+2)  
4b21 32 67 ee			ld (debug_mark+2),a  
4b24 18 03			jr .pastdmark  
4b26 ..			.dmark: db "EDc"  
4b29 f1			.pastdmark: pop af  
4b2a			endm  
# End of macro DMARK
4b2a						CALLMONITOR 
4b2a cd 6f ee			call debug_vector  
4b2d				endm  
# End of macro CALLMONITOR
4b2d					endif 
4b2d ed b0				ldir 
4b2f			 
4b2f			 
4b2f 21 b9 e4				ld hl, os_input 
4b32					;ld a, 0 
4b32					;ld (hl),a 
4b32 3a 58 ea				ld a,(f_cursor_ptr) 
4b35 16 64				ld d, 100 
4b37 0e 00				ld c, 0 
4b39 1e 28				ld e, 40 
4b3b cd 22 0e				call input_str 
4b3e					; TODO perhaps do a type check and wrap in quotes if not a number 
4b3e 21 b9 e4				ld hl, os_input 
4b41					if DEBUG_FORTH_WORDS 
4b41						DMARK "ED1" 
4b41 f5				push af  
4b42 3a 56 4b			ld a, (.dmark)  
4b45 32 65 ee			ld (debug_mark),a  
4b48 3a 57 4b			ld a, (.dmark+1)  
4b4b 32 66 ee			ld (debug_mark+1),a  
4b4e 3a 58 4b			ld a, (.dmark+2)  
4b51 32 67 ee			ld (debug_mark+2),a  
4b54 18 03			jr .pastdmark  
4b56 ..			.dmark: db "ED1"  
4b59 f1			.pastdmark: pop af  
4b5a			endm  
# End of macro DMARK
4b5a						CALLMONITOR 
4b5a cd 6f ee			call debug_vector  
4b5d				endm  
# End of macro CALLMONITOR
4b5d					endif 
4b5d cd fe 1b				call forth_push_str 
4b60					NEXTW 
4b60 c3 81 1f			jp macro_next 
4b63				endm 
# End of macro NEXTW
4b63			 
4b63			.DEDIT: 
4b63				CWHEAD .ENDKEY 44 "DEDIT" 5 WORD_FLAG_CODE 
4b63 40				db WORD_SYS_CORE+44             
4b64 c5 4b			dw .ENDKEY            
4b66 06				db 5 + 1 
4b67 .. 00			db "DEDIT",0              
4b6d				endm 
# End of macro CWHEAD
4b6d			; | DEDIT ( ptr --  ) Takes an address for direct editing in memory. | DONE 
4b6d			 
4b6d					; TODO does not copy from stack 
4b6d					if DEBUG_FORTH_WORDS_KEY 
4b6d						DMARK "DED" 
4b6d f5				push af  
4b6e 3a 82 4b			ld a, (.dmark)  
4b71 32 65 ee			ld (debug_mark),a  
4b74 3a 83 4b			ld a, (.dmark+1)  
4b77 32 66 ee			ld (debug_mark+1),a  
4b7a 3a 84 4b			ld a, (.dmark+2)  
4b7d 32 67 ee			ld (debug_mark+2),a  
4b80 18 03			jr .pastdmark  
4b82 ..			.dmark: db "DED"  
4b85 f1			.pastdmark: pop af  
4b86			endm  
# End of macro DMARK
4b86						CALLMONITOR 
4b86 cd 6f ee			call debug_vector  
4b89				endm  
# End of macro CALLMONITOR
4b89					endif 
4b89			 
4b89					;FORTH_DSP 
4b89					FORTH_DSP_VALUEHL 
4b89 cd 95 1d			call macro_dsp_valuehl 
4b8c				endm 
# End of macro FORTH_DSP_VALUEHL
4b8c			;		inc hl    ; TODO do type check 
4b8c			 
4b8c			;		call get_word_hl 
4b8c e5					push hl 
4b8d e5					push hl 
4b8e					FORTH_DSP_POP 
4b8e cd 4d 1e			call macro_forth_dsp_pop 
4b91				endm 
# End of macro FORTH_DSP_POP
4b91 e1					pop hl 
4b92					if DEBUG_FORTH_WORDS 
4b92						DMARK "EDp" 
4b92 f5				push af  
4b93 3a a7 4b			ld a, (.dmark)  
4b96 32 65 ee			ld (debug_mark),a  
4b99 3a a8 4b			ld a, (.dmark+1)  
4b9c 32 66 ee			ld (debug_mark+1),a  
4b9f 3a a9 4b			ld a, (.dmark+2)  
4ba2 32 67 ee			ld (debug_mark+2),a  
4ba5 18 03			jr .pastdmark  
4ba7 ..			.dmark: db "EDp"  
4baa f1			.pastdmark: pop af  
4bab			endm  
# End of macro DMARK
4bab						CALLMONITOR 
4bab cd 6f ee			call debug_vector  
4bae				endm  
# End of macro CALLMONITOR
4bae					endif 
4bae				;	ld a, 0 
4bae cd 5b 11				call strlenz 
4bb1 23					inc hl 
4bb2			 
4bb2 06 00				ld b, 0 
4bb4 4d					ld c, l 
4bb5			 
4bb5 e1					pop hl 
4bb6			 
4bb6					;ld a, 0 
4bb6					;ld (hl),a 
4bb6 3a 58 ea				ld a,(f_cursor_ptr) 
4bb9 16 64				ld d, 100 
4bbb 0e 00				ld c, 0 
4bbd 1e 28				ld e, 40 
4bbf cd 22 0e				call input_str 
4bc2					; TODO perhaps do a type check and wrap in quotes if not a number 
4bc2					NEXTW 
4bc2 c3 81 1f			jp macro_next 
4bc5				endm 
# End of macro NEXTW
4bc5			 
4bc5			 
4bc5			.ENDKEY: 
4bc5			; eof 
4bc5			 
# End of file forth_words_key.asm
4bc5			include "forth_words_const.asm" 
4bc5			 
4bc5			; | ## Constants (i.e. Useful memory addresses that can set or get features) 
4bc5			 
4bc5			 
4bc5			.SPITIME: 
4bc5				CWHEAD .VA 99 "SPITIME" 7 WORD_FLAG_CODE 
4bc5 77				db WORD_SYS_CORE+99             
4bc6 da 4b			dw .VA            
4bc8 08				db 7 + 1 
4bc9 .. 00			db "SPITIME",0              
4bd1				endm 
# End of macro CWHEAD
4bd1			; | SPITIME ( -- u1 )   Pushes address of the SPI pulse counter/delay to stack | DONE 
4bd1			; 
4bd1			; | | If using BANK devices then leave as is. 
4bd1			; | | Only really useful for the CARTDEV where other devices may be far too slow. In particular 
4bd1			; | | the multiplexing of the PicoSPINet addon which might not be running fast enough for all of the nodes 
4bd1			 
4bd1 21 5e ea				ld hl, spi_clktime  
4bd4 cd 90 1b				call forth_push_numhl 
4bd7			 
4bd7					NEXTW 
4bd7 c3 81 1f			jp macro_next 
4bda				endm 
# End of macro NEXTW
4bda			 
4bda			 
4bda			.VA: 
4bda				CWHEAD .SYMBOL 99 "VA" 2 WORD_FLAG_CODE 
4bda 77				db WORD_SYS_CORE+99             
4bdb ea 4b			dw .SYMBOL            
4bdd 03				db 2 + 1 
4bde .. 00			db "VA",0              
4be1				endm 
# End of macro CWHEAD
4be1			; | VA ( -- u1 )   Pushes address of block of memory used for v1..5 | DONE 
4be1 21 22 ea				ld hl, cli_var_array 
4be4 cd 90 1b				call forth_push_numhl 
4be7			 
4be7					NEXTW 
4be7 c3 81 1f			jp macro_next 
4bea				endm 
# End of macro NEXTW
4bea			 
4bea			.SYMBOL: 
4bea				CWHEAD .ENDCONST 99 "SYMBOL" 6 WORD_FLAG_CODE 
4bea 77				db WORD_SYS_CORE+99             
4beb f4 4c			dw .ENDCONST            
4bed 07				db 6 + 1 
4bee .. 00			db "SYMBOL",0              
4bf5				endm 
# End of macro CWHEAD
4bf5			; | SYMBOL ( u1 -- )  Get the address of a system symbol from a look up table to TOS  | DONE 
4bf5			; | 
4bf5			; | | The value is the number reference and the final address is pushed to stack 
4bf5			 
4bf5			; | | ``` 
4bf5			; | | dw sym_table 
4bf5			; | | dw nmi_vector 
4bf5			; | | dw cli_autodisplay 
4bf5			; | | dw cli_data_sp 
4bf5			; | | dw cli_data_stack 
4bf5			; | | dw cli_loop_sp 
4bf5			; | | dw cli_loop_stack 
4bf5			; | | dw cli_var_array 
4bf5			; | | dw cursor_col 
4bf5			; | | dw cursor_ptr 
4bf5			; | | ; 10 
4bf5			; | | dw cursor_row 
4bf5			; | | dw debug_mark 
4bf5			; | | dw display_fb0 
4bf5			; | | dw display_fb1 
4bf5			; | | dw display_fb2 
4bf5			; | | dw display_fb3 
4bf5			; | | dw display_fb_active 
4bf5			; | | dw execscratch 
4bf5			; | | dw f_cursor_ptr 
4bf5			; | | dw hardware_word 
4bf5			; | | ;20 
4bf5			; | | dw input_at_cursor 
4bf5			; | | dw input_at_pos 
4bf5			; | | dw input_cur_flash 
4bf5			; | | dw input_cur_onoff 
4bf5			; | | dw input_cursor 
4bf5			; | | dw input_display_size 
4bf5			; | | dw input_len 
4bf5			; | | dw input_ptr 
4bf5			; | | dw input_size 
4bf5			; | | dw input_start 
4bf5			; | | ; 30 
4bf5			; | | dw input_str 
4bf5			; | | dw input_under_cursor 
4bf5			; | | dw os_cli_cmd 
4bf5			; | | dw os_cur_ptr 
4bf5			; | | dw os_current_i 
4bf5			; | | dw os_input 
4bf5			; | | dw os_last_cmd 
4bf5			; | | dw os_last_new_uword 
4bf5			; | | dw debug_vector 
4bf5			; | | dw os_view_hl 
4bf5			; | | ;40 
4bf5			; | | dw os_word_scratch 
4bf5			; | | dw portbctl 
4bf5			; | | dw portbdata 
4bf5			; | | dw spi_cartdev 
4bf5			; | | dw spi_cartdev2 
4bf5			; | | dw spi_clktime 
4bf5			; | | dw spi_device 
4bf5			; | | dw spi_device_id 
4bf5			; | | dw spi_portbyte 
4bf5			; | | dw stackstore 
4bf5			; | | ; 50 
4bf5			; | | if STORAGE_SE 
4bf5			; | | dw storage_actl 
4bf5			; | | dw storage_adata 
4bf5			; | | else 
4bf5			; | | dw 0 
4bf5			; | | dw 0 
4bf5			; | | endif 
4bf5			; | | dw storage_append 
4bf5			; | | if STORAGE_SE 
4bf5			; | | dw storage_bctl 
4bf5			; | | else 
4bf5			; | | dw 0 
4bf5			; | | endif 
4bf5			; | | dw store_bank_active 
4bf5			; | | dw store_filecache 
4bf5			; | | dw store_longread 
4bf5			; | | dw store_openaddr 
4bf5			; | | dw store_openext 
4bf5			; | | dw store_openmaxext 
4bf5			; | | ; 60 
4bf5			; | | dw store_page 
4bf5			; | | dw store_readbuf 
4bf5			; | | dw store_readcont 
4bf5			; | | dw store_readptr 
4bf5			; | | dw store_tmpext 
4bf5			; | | dw store_tmpid 
4bf5			; | | dw store_tmppageid 
4bf5			; | | dw malloc 
4bf5			; | | dw free 
4bf5			; | | dw cin 
4bf5			; | | ; 70 
4bf5			; | | dw cin_wait 
4bf5			; | | dw forth_push_numhl 
4bf5			; | | dw forth_push_str 
4bf5			; | | ``` 
4bf5			 
4bf5					if DEBUG_FORTH_WORDS_KEY 
4bf5						DMARK "SYM" 
4bf5 f5				push af  
4bf6 3a 0a 4c			ld a, (.dmark)  
4bf9 32 65 ee			ld (debug_mark),a  
4bfc 3a 0b 4c			ld a, (.dmark+1)  
4bff 32 66 ee			ld (debug_mark+1),a  
4c02 3a 0c 4c			ld a, (.dmark+2)  
4c05 32 67 ee			ld (debug_mark+2),a  
4c08 18 03			jr .pastdmark  
4c0a ..			.dmark: db "SYM"  
4c0d f1			.pastdmark: pop af  
4c0e			endm  
# End of macro DMARK
4c0e						CALLMONITOR 
4c0e cd 6f ee			call debug_vector  
4c11				endm  
# End of macro CALLMONITOR
4c11					endif 
4c11			 
4c11					FORTH_DSP_VALUEHL 
4c11 cd 95 1d			call macro_dsp_valuehl 
4c14				endm 
# End of macro FORTH_DSP_VALUEHL
4c14			 
4c14 7d					ld a, l     
4c15			 
4c15			 
4c15					if DEBUG_FORTH_WORDS 
4c15						DMARK "SY1" 
4c15 f5				push af  
4c16 3a 2a 4c			ld a, (.dmark)  
4c19 32 65 ee			ld (debug_mark),a  
4c1c 3a 2b 4c			ld a, (.dmark+1)  
4c1f 32 66 ee			ld (debug_mark+1),a  
4c22 3a 2c 4c			ld a, (.dmark+2)  
4c25 32 67 ee			ld (debug_mark+2),a  
4c28 18 03			jr .pastdmark  
4c2a ..			.dmark: db "SY1"  
4c2d f1			.pastdmark: pop af  
4c2e			endm  
# End of macro DMARK
4c2e						CALLMONITOR 
4c2e cd 6f ee			call debug_vector  
4c31				endm  
# End of macro CALLMONITOR
4c31					endif 
4c31					 
4c31 f5					push af	 
4c32					FORTH_DSP_POP 
4c32 cd 4d 1e			call macro_forth_dsp_pop 
4c35				endm 
# End of macro FORTH_DSP_POP
4c35 f1					pop af 
4c36			 
4c36 cb 27				sla a  
4c38				 
4c38					 
4c38					if DEBUG_FORTH_WORDS 
4c38						DMARK "SY" 
4c38 f5				push af  
4c39 3a 4d 4c			ld a, (.dmark)  
4c3c 32 65 ee			ld (debug_mark),a  
4c3f 3a 4e 4c			ld a, (.dmark+1)  
4c42 32 66 ee			ld (debug_mark+1),a  
4c45 3a 4f 4c			ld a, (.dmark+2)  
4c48 32 67 ee			ld (debug_mark+2),a  
4c4b 18 02			jr .pastdmark  
4c4d ..			.dmark: db "SY"  
4c4f f1			.pastdmark: pop af  
4c50			endm  
# End of macro DMARK
4c50						CALLMONITOR 
4c50 cd 6f ee			call debug_vector  
4c53				endm  
# End of macro CALLMONITOR
4c53					endif 
4c53			 
4c53 21 62 4c				ld hl, sym_table 
4c56 cd f5 0d				call addatohl 
4c59 cd 03 1f				call loadwordinhl 
4c5c cd 90 1b				call forth_push_numhl 
4c5f			 
4c5f			 
4c5f				       NEXTW 
4c5f c3 81 1f			jp macro_next 
4c62				endm 
# End of macro NEXTW
4c62			 
4c62			sym_table: 
4c62			 
4c62			; 0 
4c62 62 4c		dw sym_table 
4c64 72 ee		dw nmi_vector 
4c66 36 ea		dw cli_autodisplay 
4c68 e8 e9		dw cli_data_sp 
4c6a 22 e8		dw cli_data_stack 
4c6c ea e9		dw cli_loop_sp 
4c6e 24 e9		dw cli_loop_stack 
4c70 22 ea		dw cli_var_array 
4c72 bf eb		dw cursor_col 
4c74 bd eb		dw cursor_ptr 
4c76			; 10 
4c76 be eb		dw cursor_row 
4c78 65 ee		dw debug_mark 
4c7a ab ed		dw display_fb0 
4c7c 0a ed		dw display_fb1 
4c7e c8 eb		dw display_fb2 
4c80 69 ec		dw display_fb3 
4c82 c6 eb		dw display_fb_active 
4c84 ba e3		dw execscratch 
4c86 58 ea		dw f_cursor_ptr 
4c88 75 ee		dw hardware_word 
4c8a			;20 
4c8a 5c ee		dw input_at_cursor 
4c8c 5e ee		dw input_at_pos 
4c8e 5a ee		dw input_cur_flash 
4c90 59 ee		dw input_cur_onoff 
4c92 4f ee		dw input_cursor 
4c94 5f ee		dw input_display_size 
4c96 54 ee		dw input_len 
4c98 63 ee		dw input_ptr 
4c9a 60 ee		dw input_size 
4c9c 61 ee		dw input_start 
4c9e			; 30 
4c9e 22 0e		dw input_str 
4ca0 5d ee		dw input_under_cursor 
4ca2 e2 e5		dw os_cli_cmd 
4ca4 de e5		dw os_cur_ptr 
4ca6 e0 e5		dw os_current_i 
4ca8 b9 e4		dw os_input 
4caa e1 e6		dw os_last_cmd 
4cac b8 e5		dw os_last_new_uword 
4cae 6f ee		dw debug_vector 
4cb0 9d e2		dw os_view_hl 
4cb2			;40 
4cb2 c0 e5		dw os_word_scratch 
4cb4 c3 00		dw portbctl 
4cb6 c1 00		dw portbdata 
4cb8 5d ea		dw spi_cartdev 
4cba 5c ea		dw spi_cartdev2 
4cbc 5e ea		dw spi_clktime 
4cbe 5a ea		dw spi_device 
4cc0 59 ea		dw spi_device_id 
4cc2 5b ea		dw spi_portbyte 
4cc4 a1 eb		dw stackstore 
4cc6			; 50 
4cc6			if STORAGE_SE 
4cc6			dw storage_actl 
4cc6			dw storage_adata 
4cc6			else 
4cc6 00 00		dw 0 
4cc8 00 00		dw 0 
4cca			endif 
4cca 77 09		dw storage_append 
4ccc			if STORAGE_SE 
4ccc			dw storage_bctl 
4ccc			else 
4ccc 00 00		dw 0 
4cce			endif 
4cce 8d eb		dw store_bank_active 
4cd0 61 ea		dw store_filecache 
4cd2 6f ea		dw store_longread 
4cd4 65 ea		dw store_openaddr 
4cd6 64 ea		dw store_openext 
4cd8 63 ea		dw store_openmaxext 
4cda			; 60 
4cda 74 ea		dw store_page 
4cdc 70 ea		dw store_readbuf 
4cde 67 ea		dw store_readcont 
4ce0 72 ea		dw store_readptr 
4ce2 67 ea		dw store_tmpext 
4ce4 68 ea		dw store_tmpid 
4ce6 5f ea		dw store_tmppageid 
4ce8 d0 11		dw malloc 
4cea 9a 12		dw free 
4cec 3b 61		dw cin 
4cee			; 70 
4cee 33 61		dw cin_wait 
4cf0 90 1b		dw forth_push_numhl 
4cf2 fe 1b		dw forth_push_str 
4cf4			 
4cf4			 
4cf4			.ENDCONST: 
4cf4			 
4cf4			; eof 
4cf4			 
4cf4			 
# End of file forth_words_const.asm
4cf4			 
4cf4			if STORAGE_SE 
4cf4			   	include "forth_words_storage.asm" 
4cf4			endif 
4cf4				include "forth_words_device.asm" 
4cf4			; Device related words 
4cf4			 
4cf4			; | ## Device Words 
4cf4			 
4cf4			;if SOUND_ENABLE 
4cf4			;.NOTE: 
4cf4			;	CWHEAD .AFTERSOUND 31 "NOTE" 4 WORD_FLAG_CODE 
4cf4			;; NOTE ( ud uf --  )  Plays a note of frequency uf for the duration of ud millseconds  TODO 
4cf4			;		if DEBUG_FORTH_WORDS_KEY 
4cf4			;			DMARK "NTE" 
4cf4			;			CALLMONITOR 
4cf4			;		endif 
4cf4			; 
4cf4			;	 
4cf4			; 
4cf4			;		NEXTW 
4cf4			;.AFTERSOUND: 
4cf4			;endif 
4cf4			 
4cf4			 
4cf4			USE_GPIO: equ 0 
4cf4			 
4cf4			if USE_GPIO 
4cf4			.GP1: 
4cf4				CWHEAD .GP2 31 "IOIN" 4 WORD_FLAG_CODE 
4cf4			;  IOIN ( u1 -- u )    Perform a GPIO read of pin u1 and push result   
4cf4					NEXTW 
4cf4			.GP2: 
4cf4				CWHEAD .GP3 31 "IOOUT" 5 WORD_FLAG_CODE 
4cf4			;  IOOUT ( u1 u2 --  )    Perform a GPIO write of pin u1 with pin set to 0 or 1 in u2   
4cf4			 
4cf4					NEXTW 
4cf4			 
4cf4			.GP3: 
4cf4				CWHEAD .GP4 31 "IOBYTE" 5 WORD_FLAG_CODE 
4cf4			;  IOBYTE ( u1 --  )    Perform a GPIO write of byte u1   
4cf4			 
4cf4					NEXTW 
4cf4			 
4cf4			.GP4: 
4cf4				CWHEAD .SIN 31 "IOSET" 5 WORD_FLAG_CODE 
4cf4			;  IOSET ( u1 --  )    Setup GPIO pins for I/O direction. Bit is set for write else read pin   
4cf4			 
4cf4					NEXTW 
4cf4			.SIN: 
4cf4			 
4cf4			 
4cf4			endif 
4cf4			 
4cf4			 
4cf4				CWHEAD .SOUT 31 "IN" 2 WORD_FLAG_CODE 
4cf4 33				db WORD_SYS_CORE+31             
4cf5 29 4d			dw .SOUT            
4cf7 03				db 2 + 1 
4cf8 .. 00			db "IN",0              
4cfb				endm 
# End of macro CWHEAD
4cfb			; | IN ( u1 -- u )    Perform Z80 IN with u1 being the port number. Push result to TOS | TO TEST 
4cfb					if DEBUG_FORTH_WORDS_KEY 
4cfb						DMARK "IN." 
4cfb f5				push af  
4cfc 3a 10 4d			ld a, (.dmark)  
4cff 32 65 ee			ld (debug_mark),a  
4d02 3a 11 4d			ld a, (.dmark+1)  
4d05 32 66 ee			ld (debug_mark+1),a  
4d08 3a 12 4d			ld a, (.dmark+2)  
4d0b 32 67 ee			ld (debug_mark+2),a  
4d0e 18 03			jr .pastdmark  
4d10 ..			.dmark: db "IN."  
4d13 f1			.pastdmark: pop af  
4d14			endm  
# End of macro DMARK
4d14						CALLMONITOR 
4d14 cd 6f ee			call debug_vector  
4d17				endm  
# End of macro CALLMONITOR
4d17					endif 
4d17					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4d17 cd 95 1d			call macro_dsp_valuehl 
4d1a				endm 
# End of macro FORTH_DSP_VALUEHL
4d1a			 
4d1a e5					push hl 
4d1b			 
4d1b					; destroy value TOS 
4d1b			 
4d1b					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4d1b cd 4d 1e			call macro_forth_dsp_pop 
4d1e				endm 
# End of macro FORTH_DSP_POP
4d1e			 
4d1e					; one value on hl get other one back 
4d1e			 
4d1e c1					pop bc 
4d1f			 
4d1f					; do the sub 
4d1f			;		ex de, hl 
4d1f			 
4d1f ed 68				in l,(c) 
4d21			 
4d21					; save it 
4d21			 
4d21 26 00				ld h,0 
4d23			 
4d23					; TODO push value back onto stack for another op etc 
4d23			 
4d23 cd 90 1b				call forth_push_numhl 
4d26					NEXTW 
4d26 c3 81 1f			jp macro_next 
4d29				endm 
# End of macro NEXTW
4d29			.SOUT: 
4d29				CWHEAD .SPIO 32 "OUT" 3 WORD_FLAG_CODE 
4d29 34				db WORD_SYS_CORE+32             
4d2a 7c 4d			dw .SPIO            
4d2c 04				db 3 + 1 
4d2d .. 00			db "OUT",0              
4d31				endm 
# End of macro CWHEAD
4d31			; | OUT ( u1 u2 -- ) Perform Z80 OUT to port u2 sending byte u1 | DONE 
4d31					if DEBUG_FORTH_WORDS_KEY 
4d31						DMARK "OUT" 
4d31 f5				push af  
4d32 3a 46 4d			ld a, (.dmark)  
4d35 32 65 ee			ld (debug_mark),a  
4d38 3a 47 4d			ld a, (.dmark+1)  
4d3b 32 66 ee			ld (debug_mark+1),a  
4d3e 3a 48 4d			ld a, (.dmark+2)  
4d41 32 67 ee			ld (debug_mark+2),a  
4d44 18 03			jr .pastdmark  
4d46 ..			.dmark: db "OUT"  
4d49 f1			.pastdmark: pop af  
4d4a			endm  
# End of macro DMARK
4d4a						CALLMONITOR 
4d4a cd 6f ee			call debug_vector  
4d4d				endm  
# End of macro CALLMONITOR
4d4d					endif 
4d4d			 
4d4d					; get port 
4d4d			 
4d4d					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4d4d cd 95 1d			call macro_dsp_valuehl 
4d50				endm 
# End of macro FORTH_DSP_VALUEHL
4d50			 
4d50 e5					push hl 
4d51			 
4d51					; destroy value TOS 
4d51			 
4d51					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4d51 cd 4d 1e			call macro_forth_dsp_pop 
4d54				endm 
# End of macro FORTH_DSP_POP
4d54			 
4d54					; get byte to send 
4d54			 
4d54					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4d54 cd 95 1d			call macro_dsp_valuehl 
4d57				endm 
# End of macro FORTH_DSP_VALUEHL
4d57			 
4d57			;		push hl 
4d57			 
4d57					; destroy value TOS 
4d57			 
4d57					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4d57 cd 4d 1e			call macro_forth_dsp_pop 
4d5a				endm 
# End of macro FORTH_DSP_POP
4d5a			 
4d5a					; one value on hl get other one back 
4d5a			 
4d5a			;		pop hl 
4d5a			 
4d5a c1					pop bc 
4d5b			 
4d5b					if DEBUG_FORTH_WORDS 
4d5b						DMARK "OUT" 
4d5b f5				push af  
4d5c 3a 70 4d			ld a, (.dmark)  
4d5f 32 65 ee			ld (debug_mark),a  
4d62 3a 71 4d			ld a, (.dmark+1)  
4d65 32 66 ee			ld (debug_mark+1),a  
4d68 3a 72 4d			ld a, (.dmark+2)  
4d6b 32 67 ee			ld (debug_mark+2),a  
4d6e 18 03			jr .pastdmark  
4d70 ..			.dmark: db "OUT"  
4d73 f1			.pastdmark: pop af  
4d74			endm  
# End of macro DMARK
4d74						CALLMONITOR 
4d74 cd 6f ee			call debug_vector  
4d77				endm  
# End of macro CALLMONITOR
4d77					endif 
4d77			 
4d77 ed 69				out (c), l 
4d79			 
4d79					NEXTW 
4d79 c3 81 1f			jp macro_next 
4d7c				endm 
# End of macro NEXTW
4d7c			 
4d7c			 
4d7c			.SPIO: 
4d7c			 
4d7c			if STORAGE_SE 
4d7c				CWHEAD .SPICEH 61 "SPICEL" 6 WORD_FLAG_CODE 
4d7c			; | SPICEL ( -- ) Set SPI CE low for the currently selected device |  DONE 
4d7c			 
4d7c					call spi_ce_low 
4d7c			    NEXTW 
4d7c			 
4d7c			.SPICEH: 
4d7c				CWHEAD .SPIOb 61 "SPICEH" 6 WORD_FLAG_CODE 
4d7c			; | SPICEH ( -- ) Set SPI CE high for the currently selected device |  DONE 
4d7c			 
4d7c					call spi_ce_high 
4d7c			    NEXTW 
4d7c			 
4d7c			 
4d7c			.SPIOb: 
4d7c			 
4d7c				CWHEAD .SPII 61 "SPIO" 4 WORD_FLAG_CODE 
4d7c			; | SPIO ( u1 -- ) Send byte u1 to SPI  |  DONE 
4d7c			 
4d7c					if DEBUG_FORTH_WORDS_KEY 
4d7c						DMARK "SPo" 
4d7c						CALLMONITOR 
4d7c					endif 
4d7c					; get port 
4d7c			 
4d7c			 
4d7c					; get byte to send 
4d7c			 
4d7c					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4d7c			 
4d7c			;		push hl    ; u1  
4d7c			 
4d7c					; destroy value TOS 
4d7c			 
4d7c					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4d7c			 
4d7c					; one value on hl get other one back 
4d7c			 
4d7c			;		pop hl   ; u2 - addr 
4d7c			 
4d7c					; TODO Send SPI byte 
4d7c			 
4d7c			;		push hl 
4d7c			;		call spi_ce_low 
4d7c			;		pop hl 
4d7c					ld a, l 
4d7c					call spi_send_byte 
4d7c			;		call spi_ce_high 
4d7c			 
4d7c					NEXTW 
4d7c			 
4d7c			.SPII: 
4d7c				CWHEAD .SESEL 62 "SPII" 5 WORD_FLAG_CODE 
4d7c			; | SPII ( -- u1 ) Get a byte from SPI  | DONE 
4d7c					if DEBUG_FORTH_WORDS_KEY 
4d7c						DMARK "SPi" 
4d7c						CALLMONITOR 
4d7c					endif 
4d7c			 
4d7c					; TODO Get SPI byte 
4d7c			 
4d7c					call spi_read_byte 
4d7c			 
4d7c					if DEBUG_FORTH_WORDS 
4d7c						DMARK "Si2" 
4d7c						CALLMONITOR 
4d7c					endif 
4d7c					ld h, 0 
4d7c					ld l, a 
4d7c					if DEBUG_FORTH_WORDS 
4d7c						DMARK "Si3" 
4d7c						CALLMONITOR 
4d7c					endif 
4d7c					call forth_push_numhl 
4d7c			 
4d7c					NEXTW 
4d7c			 
4d7c			 
4d7c			 
4d7c			.SESEL: 
4d7c				CWHEAD .CARTDEV 82 "BANK" 4 WORD_FLAG_CODE 
4d7c			; | BANK ( u1 -- ) Select Serial EEPROM Bank Device at bank address u1 1-5 (disables CARTDEV). Set to zero to disable storage. | DONE 
4d7c					if DEBUG_FORTH_WORDS_KEY 
4d7c						DMARK "BNK" 
4d7c						CALLMONITOR 
4d7c					endif 
4d7c			 
4d7c					ld a, 255 
4d7c					ld (spi_cartdev), a 
4d7c			 
4d7c					; get bank 
4d7c			 
4d7c					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4d7c			 
4d7c			;		push hl 
4d7c			 
4d7c					; destroy value TOS 
4d7c			 
4d7c					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4d7c			 
4d7c					; one value on hl get other one back 
4d7c			 
4d7c			;		pop hl 
4d7c			 
4d7c			 
4d7c					ld c, SPI_CE_HIGH 
4d7c					ld b, '0'    ; human readable bank number 
4d7c			 
4d7c					ld a, l 
4d7c			 
4d7c					if DEBUG_FORTH_WORDS 
4d7c						DMARK "BNK" 
4d7c						CALLMONITOR 
4d7c					endif 
4d7c			 
4d7c					; active low 
4d7c			 
4d7c					cp 0 
4d7c					jr z, .bset 
4d7c					cp 1 
4d7c					jr nz, .b2 
4d7c					res 0, c 
4d7c					ld b, '1'    ; human readable bank number 
4d7c			.b2:		cp 2 
4d7c					jr nz, .b3 
4d7c					res 1, c 
4d7c					ld b, '2'    ; human readable bank number 
4d7c			.b3:		cp 3 
4d7c					jr nz, .b4 
4d7c					res 2, c 
4d7c					ld b, '3'    ; human readable bank number 
4d7c			.b4:		cp 4 
4d7c					jr nz, .b5 
4d7c					res 3, c 
4d7c					ld b, '4'    ; human readable bank number 
4d7c			.b5:		cp 5 
4d7c					jr nz, .bset 
4d7c					res 4, c 
4d7c					ld b, '5'    ; human readable bank number 
4d7c			 
4d7c			.bset: 
4d7c					ld a, c 
4d7c					ld (spi_device),a 
4d7c					ld a, b 
4d7c					ld (spi_device_id),a 
4d7c					if DEBUG_FORTH_WORDS 
4d7c						DMARK "BN2" 
4d7c						CALLMONITOR 
4d7c					endif 
4d7c			 
4d7c					; set default SPI clk pulse time as disabled for BANK use 
4d7c			 
4d7c					ld a, 0 
4d7c					ld (spi_clktime), a 
4d7c			 
4d7c					NEXTW 
4d7c			 
4d7c			.CARTDEV: 
4d7c				CWHEAD .ENDDEVICE 82 "CARTDEV" 7 WORD_FLAG_CODE 
4d7c			; | CARTDEV ( u1 -- ) Select cart device 1-8 (Disables BANK). Set to zero to disable devices. |  DONE 
4d7c					if DEBUG_FORTH_WORDS_KEY 
4d7c						DMARK "CDV" 
4d7c						CALLMONITOR 
4d7c					endif 
4d7c			 
4d7c					; disable se storage bank selection 
4d7c			 
4d7c					ld a, SPI_CE_HIGH		; ce high 
4d7c					ld (spi_device), a 
4d7c			 
4d7c					; get bank 
4d7c			 
4d7c					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4d7c			 
4d7c			;		push hl 
4d7c			 
4d7c					; destroy value TOS 
4d7c			 
4d7c					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4d7c			 
4d7c					; one value on hl get other one back 
4d7c			 
4d7c			;		pop hl 
4d7c			 
4d7c					; active low 
4d7c			 
4d7c					ld c, 255 
4d7c			 
4d7c					ld a, l 
4d7c					if DEBUG_FORTH_WORDS 
4d7c						DMARK "CDV" 
4d7c						CALLMONITOR 
4d7c					endif 
4d7c					cp 0 
4d7c					jr z, .cset 
4d7c					cp 1 
4d7c					jr nz, .c2 
4d7c					res 0, c 
4d7c			.c2:		cp 2 
4d7c					jr nz, .c3 
4d7c					res 1, c 
4d7c			.c3:		cp 3 
4d7c					jr nz, .c4 
4d7c					res 2, c 
4d7c			.c4:		cp 4 
4d7c					jr nz, .c5 
4d7c					res 3, c 
4d7c			.c5:		cp 5 
4d7c					jr nz, .c6 
4d7c					res 4, c 
4d7c			.c6:		cp 6 
4d7c					jr nz, .c7 
4d7c					res 5, c 
4d7c			.c7:		cp 7 
4d7c					jr nz, .c8 
4d7c					res 6, c 
4d7c			.c8:		cp 8 
4d7c					jr nz, .cset 
4d7c					res 7, c 
4d7c			.cset:		ld a, c 
4d7c					ld (spi_cartdev),a 
4d7c			 
4d7c					if DEBUG_FORTH_WORDS 
4d7c						DMARK "CD2" 
4d7c						CALLMONITOR 
4d7c					endif 
4d7c			 
4d7c					; set default SPI clk pulse time as 10ms for CARTDEV use 
4d7c			 
4d7c					ld a, $0a 
4d7c					ld (spi_clktime), a 
4d7c					NEXTW 
4d7c			endif 
4d7c			 
4d7c			.ENDDEVICE: 
4d7c			; eof 
4d7c			 
# End of file forth_words_device.asm
4d7c			 
4d7c			; var handler 
4d7c			 
4d7c			 
4d7c			.VARS: 
4d7c				CWHEAD .V0 99 "VAR" 3 WORD_FLAG_CODE 
4d7c 77				db WORD_SYS_CORE+99             
4d7d 2d 4e			dw .V0            
4d7f 04				db 3 + 1 
4d80 .. 00			db "VAR",0              
4d84				endm 
# End of macro CWHEAD
4d84			;| VAR ( u1 -- )  Get the address of the variable referenced on TOS  | TO TEST 
4d84			;| 
4d84			;| The variable name should consist of a single letter. e.g. "a" 
4d84			;! If a full string is passed then only the first char is looked at 
4d84			;| Any other char could exceed bounds checks!  
4d84			 
4d84					if DEBUG_FORTH_WORDS_KEY 
4d84						DMARK "VAR" 
4d84 f5				push af  
4d85 3a 99 4d			ld a, (.dmark)  
4d88 32 65 ee			ld (debug_mark),a  
4d8b 3a 9a 4d			ld a, (.dmark+1)  
4d8e 32 66 ee			ld (debug_mark+1),a  
4d91 3a 9b 4d			ld a, (.dmark+2)  
4d94 32 67 ee			ld (debug_mark+2),a  
4d97 18 03			jr .pastdmark  
4d99 ..			.dmark: db "VAR"  
4d9c f1			.pastdmark: pop af  
4d9d			endm  
# End of macro DMARK
4d9d						CALLMONITOR 
4d9d cd 6f ee			call debug_vector  
4da0				endm  
# End of macro CALLMONITOR
4da0					endif 
4da0			 
4da0					FORTH_DSP_VALUEHL 
4da0 cd 95 1d			call macro_dsp_valuehl 
4da3				endm 
# End of macro FORTH_DSP_VALUEHL
4da3			 
4da3 7e					ld a, (hl)    ; get first char on of the string 
4da4			 
4da4			 
4da4					if DEBUG_FORTH_WORDS 
4da4						DMARK "VR1" 
4da4 f5				push af  
4da5 3a b9 4d			ld a, (.dmark)  
4da8 32 65 ee			ld (debug_mark),a  
4dab 3a ba 4d			ld a, (.dmark+1)  
4dae 32 66 ee			ld (debug_mark+1),a  
4db1 3a bb 4d			ld a, (.dmark+2)  
4db4 32 67 ee			ld (debug_mark+2),a  
4db7 18 03			jr .pastdmark  
4db9 ..			.dmark: db "VR1"  
4dbc f1			.pastdmark: pop af  
4dbd			endm  
# End of macro DMARK
4dbd						CALLMONITOR 
4dbd cd 6f ee			call debug_vector  
4dc0				endm  
# End of macro CALLMONITOR
4dc0					endif 
4dc0					 
4dc0 f5					push af	 
4dc1					FORTH_DSP_POP 
4dc1 cd 4d 1e			call macro_forth_dsp_pop 
4dc4				endm 
# End of macro FORTH_DSP_POP
4dc4 f1					pop af 
4dc5			 
4dc5					; convert to upper 
4dc5			 
4dc5 cd 6a 10				call to_upper 
4dc8					if DEBUG_FORTH_WORDS 
4dc8						DMARK "Vaa" 
4dc8 f5				push af  
4dc9 3a dd 4d			ld a, (.dmark)  
4dcc 32 65 ee			ld (debug_mark),a  
4dcf 3a de 4d			ld a, (.dmark+1)  
4dd2 32 66 ee			ld (debug_mark+1),a  
4dd5 3a df 4d			ld a, (.dmark+2)  
4dd8 32 67 ee			ld (debug_mark+2),a  
4ddb 18 03			jr .pastdmark  
4ddd ..			.dmark: db "Vaa"  
4de0 f1			.pastdmark: pop af  
4de1			endm  
# End of macro DMARK
4de1						CALLMONITOR 
4de1 cd 6f ee			call debug_vector  
4de4				endm  
# End of macro CALLMONITOR
4de4					endif 
4de4 06 41				ld b, 'A' 
4de6 90					sub b			; set offset 
4de7					if DEBUG_FORTH_WORDS 
4de7						DMARK "Vbb" 
4de7 f5				push af  
4de8 3a fc 4d			ld a, (.dmark)  
4deb 32 65 ee			ld (debug_mark),a  
4dee 3a fd 4d			ld a, (.dmark+1)  
4df1 32 66 ee			ld (debug_mark+1),a  
4df4 3a fe 4d			ld a, (.dmark+2)  
4df7 32 67 ee			ld (debug_mark+2),a  
4dfa 18 03			jr .pastdmark  
4dfc ..			.dmark: db "Vbb"  
4dff f1			.pastdmark: pop af  
4e00			endm  
# End of macro DMARK
4e00						CALLMONITOR 
4e00 cd 6f ee			call debug_vector  
4e03				endm  
# End of macro CALLMONITOR
4e03					endif 
4e03 cb 27				sla a  
4e05				 
4e05					 
4e05					if DEBUG_FORTH_WORDS 
4e05						DMARK "VR2" 
4e05 f5				push af  
4e06 3a 1a 4e			ld a, (.dmark)  
4e09 32 65 ee			ld (debug_mark),a  
4e0c 3a 1b 4e			ld a, (.dmark+1)  
4e0f 32 66 ee			ld (debug_mark+1),a  
4e12 3a 1c 4e			ld a, (.dmark+2)  
4e15 32 67 ee			ld (debug_mark+2),a  
4e18 18 03			jr .pastdmark  
4e1a ..			.dmark: db "VR2"  
4e1d f1			.pastdmark: pop af  
4e1e			endm  
# End of macro DMARK
4e1e						CALLMONITOR 
4e1e cd 6f ee			call debug_vector  
4e21				endm  
# End of macro CALLMONITOR
4e21					endif 
4e21			 
4e21 21 ee e9				ld hl, cli_var_array2 
4e24 cd f5 0d				call addatohl 
4e27 cd 90 1b				call forth_push_numhl 
4e2a			 
4e2a			 
4e2a				       NEXTW 
4e2a c3 81 1f			jp macro_next 
4e2d				endm 
# End of macro NEXTW
4e2d			.V0: 
4e2d				CWHEAD .V0Q 100 "V0!" 3 WORD_FLAG_CODE 
4e2d 78				db WORD_SYS_CORE+100             
4e2e 45 4e			dw .V0Q            
4e30 04				db 3 + 1 
4e31 .. 00			db "V0!",0              
4e35				endm 
# End of macro CWHEAD
4e35			;| V0! ( u1 -- )  Store value to v0  | DONE 
4e35			 
4e35					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4e35 cd 95 1d			call macro_dsp_valuehl 
4e38				endm 
# End of macro FORTH_DSP_VALUEHL
4e38			 
4e38 11 22 ea				ld de, cli_var_array 
4e3b			 
4e3b eb					ex de, hl 
4e3c 73					ld (hl), e 
4e3d 23					inc hl 
4e3e 72					ld (hl), d 
4e3f			 
4e3f					; destroy value TOS 
4e3f			 
4e3f					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4e3f cd 4d 1e			call macro_forth_dsp_pop 
4e42				endm 
# End of macro FORTH_DSP_POP
4e42			 
4e42				       NEXTW 
4e42 c3 81 1f			jp macro_next 
4e45				endm 
# End of macro NEXTW
4e45			.V0Q: 
4e45				CWHEAD .V1S 101 "V0@" 3 WORD_FLAG_CODE 
4e45 79				db WORD_SYS_CORE+101             
4e46 56 4e			dw .V1S            
4e48 04				db 3 + 1 
4e49 .. 00			db "V0@",0              
4e4d				endm 
# End of macro CWHEAD
4e4d			;| V0@ ( --u )  Put value of v0 onto stack | DONE 
4e4d 2a 22 ea				ld hl, (cli_var_array) 
4e50 cd 90 1b				call forth_push_numhl 
4e53			 
4e53				       NEXTW 
4e53 c3 81 1f			jp macro_next 
4e56				endm 
# End of macro NEXTW
4e56			.V1S: 
4e56				CWHEAD .V1Q 102 "V1!" 3 WORD_FLAG_CODE 
4e56 7a				db WORD_SYS_CORE+102             
4e57 6e 4e			dw .V1Q            
4e59 04				db 3 + 1 
4e5a .. 00			db "V1!",0              
4e5e				endm 
# End of macro CWHEAD
4e5e			;| V1! ( u1 -- )  Store value to v1 | DONE 
4e5e					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4e5e cd 95 1d			call macro_dsp_valuehl 
4e61				endm 
# End of macro FORTH_DSP_VALUEHL
4e61			 
4e61 11 24 ea				ld de, cli_var_array+2 
4e64				 
4e64 eb					ex de, hl 
4e65 73					ld (hl), e 
4e66 23					inc hl 
4e67 72					ld (hl), d 
4e68			 
4e68					; destroy value TOS 
4e68			 
4e68					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4e68 cd 4d 1e			call macro_forth_dsp_pop 
4e6b				endm 
# End of macro FORTH_DSP_POP
4e6b				       NEXTW 
4e6b c3 81 1f			jp macro_next 
4e6e				endm 
# End of macro NEXTW
4e6e			.V1Q: 
4e6e				CWHEAD .V2S 103 "V1@" 3 WORD_FLAG_CODE 
4e6e 7b				db WORD_SYS_CORE+103             
4e6f 7f 4e			dw .V2S            
4e71 04				db 3 + 1 
4e72 .. 00			db "V1@",0              
4e76				endm 
# End of macro CWHEAD
4e76			;| V1@ ( --u )  Put value of v1 onto stack | DONE 
4e76 2a 24 ea				ld hl, (cli_var_array+2) 
4e79 cd 90 1b				call forth_push_numhl 
4e7c				       NEXTW 
4e7c c3 81 1f			jp macro_next 
4e7f				endm 
# End of macro NEXTW
4e7f			.V2S: 
4e7f				CWHEAD .V2Q 104 "V2!" 3 WORD_FLAG_CODE 
4e7f 7c				db WORD_SYS_CORE+104             
4e80 97 4e			dw .V2Q            
4e82 04				db 3 + 1 
4e83 .. 00			db "V2!",0              
4e87				endm 
# End of macro CWHEAD
4e87			;| V2! ( u1 -- )  Store value to v2 | DONE 
4e87					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4e87 cd 95 1d			call macro_dsp_valuehl 
4e8a				endm 
# End of macro FORTH_DSP_VALUEHL
4e8a			 
4e8a 11 26 ea				ld de, cli_var_array+4 
4e8d				 
4e8d eb					ex de, hl 
4e8e 73					ld (hl), e 
4e8f 23					inc hl 
4e90 72					ld (hl), d 
4e91			 
4e91					; destroy value TOS 
4e91			 
4e91					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4e91 cd 4d 1e			call macro_forth_dsp_pop 
4e94				endm 
# End of macro FORTH_DSP_POP
4e94				       NEXTW 
4e94 c3 81 1f			jp macro_next 
4e97				endm 
# End of macro NEXTW
4e97			.V2Q: 
4e97				CWHEAD .V3S 105 "V2@" 3 WORD_FLAG_CODE 
4e97 7d				db WORD_SYS_CORE+105             
4e98 a8 4e			dw .V3S            
4e9a 04				db 3 + 1 
4e9b .. 00			db "V2@",0              
4e9f				endm 
# End of macro CWHEAD
4e9f			;| V2@ ( --u )  Put value of v2 onto stack | DONE 
4e9f 2a 26 ea				ld hl, (cli_var_array+4) 
4ea2 cd 90 1b				call forth_push_numhl 
4ea5				       NEXTW 
4ea5 c3 81 1f			jp macro_next 
4ea8				endm 
# End of macro NEXTW
4ea8			.V3S: 
4ea8				CWHEAD .V3Q 104 "V3!" 3 WORD_FLAG_CODE 
4ea8 7c				db WORD_SYS_CORE+104             
4ea9 c0 4e			dw .V3Q            
4eab 04				db 3 + 1 
4eac .. 00			db "V3!",0              
4eb0				endm 
# End of macro CWHEAD
4eb0			;| V3! ( u1 -- )  Store value to v3 | DONE 
4eb0					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4eb0 cd 95 1d			call macro_dsp_valuehl 
4eb3				endm 
# End of macro FORTH_DSP_VALUEHL
4eb3			 
4eb3 11 28 ea				ld de, cli_var_array+6 
4eb6				 
4eb6 eb					ex de, hl 
4eb7 73					ld (hl), e 
4eb8 23					inc hl 
4eb9 72					ld (hl), d 
4eba			 
4eba					; destroy value TOS 
4eba			 
4eba					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4eba cd 4d 1e			call macro_forth_dsp_pop 
4ebd				endm 
# End of macro FORTH_DSP_POP
4ebd				       NEXTW 
4ebd c3 81 1f			jp macro_next 
4ec0				endm 
# End of macro NEXTW
4ec0			.V3Q: 
4ec0				CWHEAD .END 105 "V3@" 3 WORD_FLAG_CODE 
4ec0 7d				db WORD_SYS_CORE+105             
4ec1 d1 4e			dw .END            
4ec3 04				db 3 + 1 
4ec4 .. 00			db "V3@",0              
4ec8				endm 
# End of macro CWHEAD
4ec8			;| V3@ ( --u )  Put value of v3 onto stack | DONE 
4ec8 2a 28 ea				ld hl, (cli_var_array+6) 
4ecb cd 90 1b				call forth_push_numhl 
4ece				       NEXTW 
4ece c3 81 1f			jp macro_next 
4ed1				endm 
# End of macro NEXTW
4ed1			 
4ed1			 
4ed1			 
4ed1			 
4ed1			 
4ed1			; end of dict marker 
4ed1			 
4ed1 00			.END:    db WORD_SYS_END 
4ed2 00 00			dw 0 
4ed4 00				db 0 
4ed5			 
4ed5			; use to jp here for user dict words to save on macro expansion  
4ed5			 
4ed5			user_dict_next: 
4ed5				NEXTW 
4ed5 c3 81 1f			jp macro_next 
4ed8				endm 
# End of macro NEXTW
4ed8			 
4ed8			 
4ed8			user_exec: 
4ed8				;    ld hl, <word code> 
4ed8				;    FORTH_RSP_NEXT - call macro_forth_rsp_next 
4ed8				;    call forthexec 
4ed8				;    jp user_dict_next   (NEXT) 
4ed8			        ;    <word code bytes> 
4ed8 eb				ex de, hl 
4ed9 2a bc e5			ld hl,(os_tok_ptr) 
4edc				 
4edc				FORTH_RSP_NEXT 
4edc cd 37 1b			call macro_forth_rsp_next 
4edf				endm 
# End of macro FORTH_RSP_NEXT
4edf			 
4edf			if DEBUG_FORTH_UWORD 
4edf						DMARK "UEX" 
4edf f5				push af  
4ee0 3a f4 4e			ld a, (.dmark)  
4ee3 32 65 ee			ld (debug_mark),a  
4ee6 3a f5 4e			ld a, (.dmark+1)  
4ee9 32 66 ee			ld (debug_mark+1),a  
4eec 3a f6 4e			ld a, (.dmark+2)  
4eef 32 67 ee			ld (debug_mark+2),a  
4ef2 18 03			jr .pastdmark  
4ef4 ..			.dmark: db "UEX"  
4ef7 f1			.pastdmark: pop af  
4ef8			endm  
# End of macro DMARK
4ef8				CALLMONITOR 
4ef8 cd 6f ee			call debug_vector  
4efb				endm  
# End of macro CALLMONITOR
4efb			endif 
4efb			 
4efb			 
4efb			 
4efb eb				ex de, hl 
4efc 22 bc e5			ld (os_tok_ptr), hl 
4eff				 
4eff				; Don't use next - Skips the first word in uword. 
4eff			 
4eff c3 0a 20			jp exec1 
4f02			;	NEXT 
4f02			 
4f02			 
4f02			; eof 
# End of file forth_wordsv4.asm
4f02			endif 
4f02			;;;;;;;;;;;;;; Debug code 
4f02			 
4f02			 
4f02			;if DEBUG_FORTH_PARSE 
4f02 .. 00		.nowordfound: db "No match",0 
4f0b .. 00		.compword:	db "Comparing word ",0 
4f1b .. 00		.nextwordat:	db "Next word at",0 
4f28 .. 00		.charmatch:	db "Char match",0 
4f33			;endif 
4f33			if DEBUG_FORTH_JP 
4f33			.foundword:	db "Word match. Exec..",0 
4f33			endif 
4f33			;if DEBUG_FORTH_PUSH 
4f33 .. 00		.enddict:	db "Dict end. Push.",0 
4f43 .. 00		.push_str:	db "Pushing string",0 
4f52 .. 00		.push_num:	db "Pushing number",0 
4f61 .. 00		.data_sp:	db "SP:",0 
4f65 .. 00		.wordinhl:	db "Word in HL (2/0):",0 
4f77 .. 00		.wordinde:	db "Word in DE (3/0):",0 
4f89 .. 00		.wordinbc:	db "Word in BC (4/0):",0 
4f9b			;endif 
4f9b			;if DEBUG_FORTH_MALLOC 
4f9b .. 00		.push_malloc:	db "Malloc address",0 
4faa			;endif 
4faa			 
4faa			 
4faa			 
4faa			; display malloc address and current data stack pointer  
4faa			 
4faa			malloc_error: 
4faa d5				push de 
4fab f5				push af 
4fac e5				push hl 
4fad cd c8 0b			call clear_display 
4fb0 11 d0 4f			ld de, .mallocerr 
4fb3 3e 00			ld a,0 
4fb5			;	ld de,os_word_scratch 
4fb5 cd db 0b			call str_at_display 
4fb8 3e 11			ld a, display_row_1+17 
4fba 11 65 ee			ld de, debug_mark 
4fbd cd db 0b			call str_at_display 
4fc0 cd eb 0b			call update_display 
4fc3				;call break_point_state 
4fc3 cd 33 61			call cin_wait 
4fc6			 
4fc6			;	ld a, ' ' 
4fc6			;	ld (os_view_disable), a 
4fc6 cd ff 14			call bp_on 
4fc9 e1				pop hl 
4fca f1				pop af 
4fcb d1				pop de	 
4fcc				CALLMONITOR 
4fcc cd 6f ee			call debug_vector  
4fcf				endm  
# End of macro CALLMONITOR
4fcf c9				ret 
4fd0			 
4fd0 .. 00		.mallocerr: 	db "Malloc Error",0 
4fdd			;if DEBUG_FORTH_PUSH 
4fdd			display_data_sp: 
4fdd f5				push af 
4fde			 
4fde				; see if disabled 
4fde			 
4fde			 
4fde 3a 6f ee			ld a, (debug_vector) 
4fe1 fe c9			cp $C9  ; RET 
4fe3				;ld a, (os_view_disable) 
4fe3				;cp '*' 
4fe3 28 67			jr z, .skipdsp 
4fe5			 
4fe5 e5				push hl 
4fe6 e5				push hl 
4fe7 e5			push hl 
4fe8 cd c8 0b			call clear_display 
4feb e1			pop hl 
4fec 7c				ld a,h 
4fed 21 c0 e5			ld hl, os_word_scratch 
4ff0 cd fe 0f			call hexout 
4ff3 e1				pop hl 
4ff4 7d				ld a,l 
4ff5 21 c2 e5			ld hl, os_word_scratch+2 
4ff8 cd fe 0f			call hexout 
4ffb 21 c4 e5			ld hl, os_word_scratch+4 
4ffe 3e 00			ld a,0 
5000 77				ld (hl),a 
5001 11 c0 e5			ld de,os_word_scratch 
5004 3e 28				ld a, display_row_2 
5006 cd db 0b				call str_at_display 
5009 11 65 4f			ld de, .wordinhl 
500c 3e 00			ld a, display_row_1 
500e			 
500e cd db 0b				call str_at_display 
5011 11 65 ee			ld de, debug_mark 
5014 3e 11			ld a, display_row_1+17 
5016			 
5016 cd db 0b				call str_at_display 
5019			 
5019				; display current data stack pointer 
5019 11 61 4f			ld de,.data_sp 
501c 3e 30				ld a, display_row_2 + 8 
501e cd db 0b				call str_at_display 
5021			 
5021 2a e8 e9			ld hl,(cli_data_sp) 
5024 e5				push hl 
5025 7c				ld a,h 
5026 21 c0 e5			ld hl, os_word_scratch 
5029 cd fe 0f			call hexout 
502c e1				pop hl 
502d 7d				ld a,l 
502e 21 c2 e5			ld hl, os_word_scratch+2 
5031 cd fe 0f			call hexout 
5034 21 c4 e5			ld hl, os_word_scratch+4 
5037 3e 00			ld a,0 
5039 77				ld (hl),a 
503a 11 c0 e5			ld de,os_word_scratch 
503d 3e 33				ld a, display_row_2 + 11 
503f cd db 0b				call str_at_display 
5042			 
5042			 
5042 cd eb 0b			call update_display 
5045 cd 00 0b			call delay1s 
5048 cd 00 0b			call delay1s 
504b e1				pop hl 
504c			.skipdsp: 
504c f1				pop af 
504d c9				ret 
504e			 
504e			display_data_malloc: 
504e			 
504e f5				push af 
504f e5				push hl 
5050 e5				push hl 
5051 e5			push hl 
5052 cd c8 0b			call clear_display 
5055 e1			pop hl 
5056 7c				ld a,h 
5057 21 c0 e5			ld hl, os_word_scratch 
505a cd fe 0f			call hexout 
505d e1				pop hl 
505e 7d				ld a,l 
505f 21 c2 e5			ld hl, os_word_scratch+2 
5062 cd fe 0f			call hexout 
5065 21 c4 e5			ld hl, os_word_scratch+4 
5068 3e 00			ld a,0 
506a 77				ld (hl),a 
506b 11 c0 e5			ld de,os_word_scratch 
506e 3e 28				ld a, display_row_2 
5070 cd db 0b				call str_at_display 
5073 11 9b 4f			ld de, .push_malloc 
5076 3e 00			ld a, display_row_1 
5078			 
5078 cd db 0b				call str_at_display 
507b			 
507b				; display current data stack pointer 
507b 11 61 4f			ld de,.data_sp 
507e 3e 30				ld a, display_row_2 + 8 
5080 cd db 0b				call str_at_display 
5083			 
5083 2a e8 e9			ld hl,(cli_data_sp) 
5086 e5				push hl 
5087 7c				ld a,h 
5088 21 c0 e5			ld hl, os_word_scratch 
508b cd fe 0f			call hexout 
508e e1				pop hl 
508f 7d				ld a,l 
5090 21 c2 e5			ld hl, os_word_scratch+2 
5093 cd fe 0f			call hexout 
5096 21 c4 e5			ld hl, os_word_scratch+4 
5099 3e 00			ld a,0 
509b 77				ld (hl),a 
509c 11 c0 e5			ld de,os_word_scratch 
509f 3e 33				ld a, display_row_2 + 11 
50a1 cd db 0b				call str_at_display 
50a4			 
50a4 cd eb 0b			call update_display 
50a7 cd 00 0b			call delay1s 
50aa cd 00 0b			call delay1s 
50ad e1				pop hl 
50ae f1				pop af 
50af c9				ret 
50b0			;endif 
50b0			 
50b0			include "forth_autostart.asm" 
50b0			; list of commands to perform at system start up 
50b0			 
50b0			startcmds: 
50b0			;	dw test11 
50b0			;	dw test12 
50b0			;	dw test13 
50b0			;	dw test14 
50b0			;	dw test15 
50b0			;	dw test16 
50b0			;	dw test17 
50b0			;	dw ifthtest1 
50b0			;	dw ifthtest2 
50b0			;	dw ifthtest3 
50b0			;	dw mmtest1 
50b0			;	dw mmtest2 
50b0			;	dw mmtest3 
50b0			;	dw mmtest4 
50b0			;	dw mmtest5 
50b0			;	dw mmtest6 
50b0			;	dw iftest1 
50b0			;	dw iftest2 
50b0			;	dw iftest3 
50b0			;	dw looptest1 
50b0			;	dw looptest2 
50b0			;	dw test1 
50b0			;	dw test2 
50b0			;	dw test3 
50b0			;	dw test4 
50b0			;	dw game2r 
50b0			;	dw game2b1 
50b0			;	dw game2b2 
50b0			 
50b0				; start up words that are actually useful 
50b0			 
50b0			;    dw spi1 
50b0			;    dw spi2 
50b0			;    dw spi3 
50b0			;    dw spi4 
50b0			;    dw spi5 
50b0			;    dw spi6 
50b0			;    dw spi7 
50b0			; 
50b0			;    dw spi8 
50b0			;    dw spi9 
50b0			;    dw spi10 
50b0			 
50b0			; file editor 
50b0			;	dw edit1 
50b0			;	dw edit2 
50b0			;	dw edit3 
50b0			 
50b0			;	dw longread 
50b0 d2 54			dw clrstack 
50b2 06 55			dw type 
50b4			;	dw stest 
50b4 2b 55			dw strncpy 
50b6 9b 56			dw list 
50b8 8c 55			dw start1 
50ba 9c 55			dw start2 
50bc			;	dw start3 
50bc			;	dw start3b 
50bc			;	dw start3c 
50bc			 
50bc				; (unit) testing words 
50bc			 
50bc			;	dw mtesta 
50bc			;	dw mtestb 
50bc			;	dw mtestc 
50bc			;	dw mtestd 
50bc			;	dw mteste 
50bc			 
50bc				; demo/game words 
50bc			 
50bc			;        dw game3w 
50bc			;        dw game3p 
50bc			;        dw game3sc 
50bc			;        dw game3vsi 
50bc			;        dw game3vs 
50bc				 
50bc			;	dw game2b 
50bc			;	dw game2bf 
50bc			;	dw game2mba 
50bc			;	dw game2mbas 
50bc			;	dw game2mb 
50bc			 
50bc cc 58			dw game1 
50be dd 58			dw game1a 
50c0 3f 59			dw game1b 
50c2 74 59			dw game1c 
50c4 aa 59			dw game1d 
50c6 db 59			dw game1s 
50c8 ef 59			dw game1t 
50ca 04 5a			dw game1f 
50cc 38 5a			dw game1z 
50ce 7c 5a			dw game1zz 
50d0			 
50d0 05 57			dw test5 
50d2 3d 57			dw test6 
50d4 75 57			dw test7 
50d6 89 57			dw test8 
50d8 b5 57			dw test9 
50da cb 57			dw test10 
50dc				 
50dc 53 5b		        dw ssv5 
50de 37 5b		        dw ssv4 
50e0 1b 5b		        dw ssv3 
50e2 e5 5a		        dw ssv2 
50e4 6c 5b		        dw ssv1 
50e6 b4 5b		        dw ssv1cpm 
50e8			;	dw keyup 
50e8			;	dw keydown 
50e8			;	dw keyleft 
50e8			;	dw keyright 
50e8			;	dw 	keyf1 
50e8			;	dw keyf2 
50e8			;	dw keyf3 
50e8			;	dw keyf4 
50e8			;	dw keyf5 
50e8			;	dw keyf6 
50e8			;	dw keyf7 
50e8			;	dw keyf8 
50e8			;	dw keyf9 
50e8			;	dw keyf10 
50e8			;	dw keyf11 
50e8			;	dw keyf12 
50e8			;	dw keytab 
50e8			;	dw keycr 
50e8			;	dw keyhome 
50e8			;	dw keyend 
50e8			;	dw keybs 
50e8 00 00			db 0, 0	 
50ea			 
50ea			 
50ea			; File Editor 
50ea			 
50ea			; ( id - ) use 'e' to edit the displayed line 
50ea .. 00		edit1: db ": edc waitk $65 = if ede then ; ", 0 
510b .. 00		edit2: db ": ede storepage ptr $02 + cls dedit filepage bupd ; ", 0 
5140			;edit2: db ": ede v1@ v0@ record drop storepage ptr $02 + cls dedit filepage bupd ; ", 0 
5140 .. 00		edit3: db ": ed dup v0! open $01 do i v0@ record cls . edc loop ; ",0 
5178			;edit3: db ": ed dup v0! open $01 do i v0@ record cls . i v1! edc loop ; ",0 
5178			 
5178			; SPI Net support words 
5178			 
5178			; v0! = node to send to 
5178			; ( str count - ) 
5178 .. 00		spi1:       db ": spitype spiceh $00 do dup i + @ v0@ spicel $10 spio spio spio spiceh $01 pause loop ; ",0 
51d1			 
51d1			; spiputc ( char node - ) 
51d1 .. 00		spi2:       db ": spiputc spicel $10 spio spio ptr @ spio spiceh ; ",0 
5205			; spiputc ( u node - ) 
5205 .. 00		spi2b:       db ": spiputb spicel $10 spio spio spio spiceh ; ",0 
5233			 
5233			; spigetc ( - n ) 
5233 .. 00		spi4:       db ": spigetc spicel $11 spio spii spiceh ; ", 0 
525c			 
525c			; getnode ( - n ) 
525c .. 00		spi5:       db ": getnode spicel $18 spio spii nop spiceh ; ", 0 
5289			 
5289			; ( str node - )  
5289 .. 00		spi3:       db ": sendnode v0! count spiceh $00 do dup i + @ v0@ spicel $10 spio spio spio spiceh $01 pause loop ; ; ",0 
52ef			; store string ( str i - ) 
52ef			 
52ef			;spi3:       db ": storestrold spicel $03 spio spio ptr count clkstro spiceh ; ", 0 
52ef .. 00		spi6:       db ": storestr spicel $12 spio spio count $00 do dup i + @ spio $01 pause loop spiceh ; ", 0 
5344			 
5344			; get string ( addr i -  )    TO FIX 
5344			 
5344 .. 00		spi7:       db ": getstorestr spicel $13 spio spio \" \" repeat spii dup concat $00 = not until spiceh ; ", 0 
539c			 
539c			 
539c			; NETCHAT (TODO) 
539c			; Program to allow two nodes to chat with eachother 
539c			; 
539c			; v0 - target node 
539c			;  
539c			; accept input at 0,0 
539c			; if input is string send spitype to target node 
539c			; starting at row 2,0 , while spigetchr is not zero ->  
539c			; 
539c			; 
539c			; TODO add paging of get request 
539c			 
539c			; ( node - ) 
539c .. 00		spi8:		db ": netchatp $00 $00 at accept ;", 0 
53bb .. 00		spi9: 		db ": netchatr repeat spigetchr dup dup $00 = not if emit then $00 = not until $02 pause ; ",0 
5413 .. 00		spi10:		db ": netchat v0! repeat netchatp count dup $00 > if spitype $01 pause then cls $00 $03 at \">\" . netchatr true until nop ; ", 0 
548b			 
548b			 
548b			; Long read of currently open file 
548b .. 00		longread:   db ": lread read repeat readcont if read concat then readcont until nop ; ", 0 
54d2			 
54d2			; clear stack  
54d2			 
54d2 .. 00		clrstack:  db ": clrstk depth ?dup if $01 do drop loop then nop ; ", 0 
5506			 
5506			; type ( addr count - ) 
5506 .. 00		type:     db ": type $00 do dup i + @ emit loop ; ", 0 
552b			 
552b			; some direct memory words 
552b			; strncpy ( len t f -- t ) 
552b			 
552b .. 00		strncpy:   db ": strncpy $00 scratch 2! $02 scratch 2! do $00 scratch 2@ i + @ $02 scratch 2@ i + ! loop nop  ;",0 
558c			 
558c .. 00		start1:     	db ": bpon $00 bp ;",0 
559c .. 00		start2:     	db ": bpoff $01 bp ;",0 
55ad .. 00		start3b:         db ": ls dir cls drop dup $00 > if $01 do $08 $04 at . $01 $04 at . $04 $04 at . $23 $04 at accept drop scroll loop then nop ;",0 
5628 .. 00		start3c:         db ": dirlist dir cls drop dup $00 > if $01 do \"/\" .> .> \"Ext:\" .> .> \"Id: \" .> .>  loop then nop ;",0 
5688			 
5688 .. 00		tuck:         db ": tuck swap over ;", 0 
569b			 
569b			; a handy word to list items on the stack 
569b			 
569b .. 00		list:            db ": more cls repeat scroll $01 $04 at depth . $0a $04 at .> $01 $01 at accept drop depth 0= not until nop ;",0 
5705			 
5705			 
5705			; test stack  
5705			; rnd8 stest 
5705			 
5705			;stest:   db ": stest cls  v0! v0@ $00 do rnd8 $01 $01 at i . $01 pause loop v0@ $00 do drop $12 $01 at depth . $01 pause loop nop ;",0  
5705			 
5705			; random malloc and free cycles 
5705			 
5705			;mtesta:      db ": mtesta $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . rnd8 dup $13 $01 at . malloc heap $1f $01 at . $1f $02 at . $01 pause free $01 until nop ;", 0 
5705			 
5705			; fixed malloc and free cycles 
5705			 
5705			;mtestb:      db ": mtestb $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 malloc heap $1f $01 at . $1f $02 at . $01 pause free $01 until nop ;", 0 
5705			 
5705			; fixed double string push and drop cycle  
5705			 
5705			;mtestc:      db ": mtestc $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 spaces $2f spaces  heap $1f $01 at . $1f $02 at . $01 pause drop drop $01 until nop ; ", 0 
5705			 
5705			; consistent fixed string push and drop cycle  
5705			 
5705			;mtestd:      db ": mtestd $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 spaces heap $1f $01 at . $1f $02 at . $01 pause drop $01 until nop ; ", 0 
5705			 
5705			;mteste:      db ": mteste $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . rnd8 dup spaces $0f $02 at . heap $1f $01 at . $1f $02 at . $01 pause drop $01 until nop ; ", 0 
5705			 
5705			;test1:		db ": aa 1 2 3 ;", 0 
5705			;test2:     	db "111 aa 888 999",0 
5705			;test3:     	db ": bb 77 ;",0 
5705			;test4:     	db "$02 $01 do i . loop bb",0 
5705			 
5705 .. 00		test5:     	db ": hline $13 $00 do i $01 at 1 . i $04 at 1 . loop nop ;",0 
573d .. 00		test6:     	db ": vline $04 $01 do $00 i at 1 . $13 i at 1 . loop nop ;",0 
5775 .. 00		test7:     	db ": box hline vline ;",0 
5789 .. 00		test8:     	db ": world cls box $03 $03 at Hello-World! . ;",0 
57b5 .. 00		test9:     	db ": sw $01 adsp world ;",0 
57cb .. 00		test10:     	db ": fw $00 adsp world draw $05 pause ;",0 
57f0			;test11:     	db "hello create .",0 
57f0			;test12:     	db "hello2 create .",0 
57f0			 
57f0			;mmtest1:     	db "cls $0001 $0008 MIN . $0002 pause",0 
57f0			;mmtest2:     	db "cls $0101 $0008 MIN . $0002 pause",0 
57f0			;mmtest3:     	db "cls $0001 $0008 MAX . $0002 pause",0 
57f0			;mmtest4:     	db "cls $0101 $0008 MAX . $0002 pause",0 
57f0			;mmtest5:     	db "cls $0001 $0001 MIN . $0002 pause",0 
57f0			;mmtest6:     	db "cls $0001 $0001 MAX . $0002 pause",0 
57f0			 
57f0			;iftest1:     	db "$0001 IF cls .",0 
57f0			;iftest2:     	db "$0000 IF cls .",0 
57f0			;iftest3:     	db "$0002 $0003 - IF cls .",0 
57f0			;looptest1:     	db "$0003 $0001 do i . loop 8",0 
57f0			;looptest2:     	db "$0003 $0001 do i . $0001 pause loop 8",0 
57f0			 
57f0			;ifthtest1:     	db "$0001 IF is-true . $0005 pause THEN next-word . $0005 pause",0 
57f0			;ifthtest2:     	db "$0000 IF is-true . $0005 pause THEN next-word . $0005 pause",0 
57f0			;ifthtest3:     	db "$0002 $0003 - IF is-true . $0005 pause THEN next-word . $0005 pause",0 
57f0			 
57f0			 
57f0 .. 00		sound1: db ": note spicel spio spiceh spicel ; ",0 
5814 .. 00		sound2: db ": slient $9f note $bf note $df note $ff note ; ", 0 
5844 .. 00		sound3: db ": sound $01 cartdev $00 spitime ! ; ",0 
5869 .. 00		sound4: db ": cha $00 ; ",0 
5876 .. 00		sound5: db ": chb $20 ; ",0 
5883 .. 00		sound6: db ": chc $40 ; ",0 
5890 .. 00		sound7: db ": chd $60 ; ",0 
589d .. 00		sound8: db ": cnote $80 + + note ; ", 0 
58b5 .. 00		sound9: db ": cvol $90 + + note ; ", 0 
58cc			 
58cc			 
58cc			 
58cc			 
58cc			; a small guess the number game 
58cc			 
58cc .. 00		game1:          db ": gsn rnd8 v1! ;",0 
58dd .. 00		game1a:          db ": gs $00 $00 at Enter-a-number .- $00 $02 at between-1-and-255 .- $00 $03 at accept str2num v2! ;",0 
593f			 
593f .. 00		game1b:          db ": gcb v2@ v1@ < if $00 $00 at Too-low! .- $01 then ;",0 
5974 .. 00		game1c:          db ": gcc v2@ v1@ > if $00 $00 at Too-high! .- $01 then ;",0 
59aa .. 00		game1d:          db ": gcd v2@ v1@ = if $00 $00 at Yes! .- $00 then ;",0 
59db .. 00		game1s:          db ": gck gcb gcc gcd ;",0 
59ef .. 00		game1t:          db ": sc v3@ $01 + v3! ;",0 
5a04 .. 00		game1f:          db ": fsc v3@ cls $01 $01 at You-Took .- $02 $03 at . ;",0 
5a38 .. 00		game1z:         db ": ga $00 v3! gsn repeat cls gs cls gck $02 pause sc until fsc nop ;",0 
5a7c			 
5a7c			; Using 'ga' save a high score across multiple runs using external storage 
5a7c			 
5a7c .. 00		game1zz:         db ": gas ga $01 bank $80 bread $01 $04 at Prev-Score .> storepage ptr $02 + dup 2@ . v3@ swap 2! $80 bupd ;",0 
5ae5			 
5ae5			 
5ae5			;game2r:          db ": m2r rnd8 v1! ;  ",0, 0, 0, FORTH_END_BUFFER 
5ae5			;game2b1:          db ": m2b1 $1f $00 do i v2@ at rnd8 $30 < if A . then loop nop ;  ",0, 0, 0, FORTH_END_BUFFER 
5ae5			;game2b2:          db ": m2b cls $04 $01 do i v2! m2b1 loop ;  ",0, 0, 0, FORTH_END_BUFFER 
5ae5			 
5ae5			; simple screen saver to test code memory reuse to destruction 
5ae5			 
5ae5 .. 00		ssv2:            db ": ssvchr $2a $2d rnd dup $2c = if drop $20 then nop ;",0 
5b1b .. 00		ssv3:            db ": ssvposx $01 $27 rnd v0! ;",0 
5b37 .. 00		ssv4:            db ": ssvposy $01 $05 rnd v1! ;",0 
5b53 .. 00		ssv5:            db ": ssvt ssvposx ssvposy ;",0 
5b6c .. 00		ssv1:          db ": ssv cls repeat ssvposx ssvposy v0@ v1@ at ssvchr emit $01 until nop ;",0 
5bb4 .. 00		ssv1cpm:          db ": ssvcpm cls repeat ssvposx ssvposy v0@ v1@ at ssvchr emit $01 pausems $01 until nop ;",0 
5c0b			;ssv1:          db ": ssv cls repeat ssvt v0@ v1@ at ssvchr emit $01 until nop ;",0 
5c0b			;ssv1:          db ": ssv ssvposx ssvposy at ssvchr ;",0 
5c0b			;ssv1:            db ": ssv repeat ssvpos rnd8 $10 if               $01 until nop ;",0 
5c0b			;ssv2:            db ": ssvchr v0! v1! at? ;",0 
5c0b			;ssv5:            db ": ssvt ssvposx ssvposy v0@ .> v1@ .> ;",0 
5c0b			;ssv2:            db ": ssvchr $2a $2d rnd  ;",0 
5c0b			 
5c0b			 
5c0b			 
5c0b			; minesweeper/battleship finding game 
5c0b			; draws a game board of random ship/mine positions 
5c0b			; user enters coords to see if it hits on 
5c0b			; game ends when all are hit 
5c0b			; when hit or miss says how many may be in the area 
5c0b			 
5c0b			; setup the game board and then hide it 
5c0b			;game2b:          db ": mbsetup $02 fb cls $04 $01 do i v2! $10 $01 do i v2@ at rnd8 $30 < if A . then loop loop $05 pause $01 fb ;",0 
5c0b			;game2bf:         db ": mbsetupf cls $04 $01 do i v2! $10 $01 do i v2@ at \"+\" . loop loop nop ;",0 
5c0b			;; prompt for where to target 
5c0b			;game2mba:        db ": mbp $12 $04 at Turns .> v3@ . $12 $03 at Score .> v0@ . $12 $01 at Enter-X-__ .- $1a $01 at accept $12 $02 at Enter-Y-__ .- $1a $02 at accept nop ;", 0  
5c0b			;game2mbas:        db ": mbsv str2num v2! str2num v1! nop ;", 0  
5c0b			;; TODO see if the entered coords hits or misses pushes char hit of miss 
5c0b			;game2mbht:      db ": mbckht nop ;",0 
5c0b			;game2mbms:      db ": mbcms nop ;",0 
5c0b			; TODO how many might be near by 
5c0b			;game2mb:          db ": mb $00 v0! $00 v3! mbsetup mbsetupf repeat mbp mbsv $02 fb mbckht mbcms v1@ v2@ at@ $01 fb v1@ v2@ at emit $01 until nop ;",0 
5c0b			 
5c0b			; Game 3 
5c0b			 
5c0b			; Vert scroller ski game - avoid the trees! 
5c0b			 
5c0b			; v0 score (ie turns) 
5c0b			; v1 player pos 
5c0b			; v2 left wall 
5c0b			; v3 right wall 
5c0b			 
5c0b			; Draw side walls randomly 
5c0b			 
5c0b			;game3w:   db ": vsw v2@ $04 at \"|\" . v3@ $04 at \"|\" . nop ;", 0 
5c0b			 
5c0b			; Draw player 
5c0b			;game3p:   db ": vsp v1@ $01 at \"V\" . nop ; ", 0 
5c0b			 
5c0b			; TODO Get Key 
5c0b			 
5c0b			; TODO Move left right 
5c0b			 
5c0b			; scroll and move walls a bit 
5c0b			 
5c0b			;game3sc:  db ": vsscl v2@ $01 + v2! v3@ $01 - v3! scroll nop ;", 0 
5c0b			 
5c0b			; main game loop 
5c0b			 
5c0b			;game3vsi:    db ": vsi $00 v0! $01 v2! $12 v3! $06 v1! nop ;",0 
5c0b			;game3vs:    db ": vs vsi repeat vsw vsp vsscl $05 pause scroll $01 until nop ;",0 
5c0b			 
5c0b			; key board defs 
5c0b			 
5c0b .. 00		keyup:       db ": keyup $05 ;",0 
5c19 .. 00		keydown:       db ": keydown $0a ;",0 
5c29 .. 00		keyleft:       db ": keyleft $0b ;",0 
5c39 .. 00		keyright:       db ": keyright $0c ;",0 
5c4a .. 00		keyf1:       db ": keyf1 $10 ;",0 
5c58 .. 00		keyf2:       db ": keyf2 $11 ;",0 
5c66 .. 00		keyf3:       db ": keyf3 $12 ;",0 
5c74 .. 00		keyf4:       db ": keyf4 $13 ;",0 
5c82 .. 00		keyf5:       db ": keyf5 $14 ;",0 
5c90 .. 00		keyf6:       db ": keyf6 $15 ;",0 
5c9e .. 00		keyf7:       db ": keyf7 $16 ;",0 
5cac .. 00		keyf8:       db ": keyf8 $17 ;",0 
5cba .. 00		keyf9:       db ": keyf9 $18 ;",0 
5cc8 .. 00		keyf10:       db ": keyf10 $19 ;",0 
5cd7 .. 00		keyf11:       db ": keyf11 $1a ;",0 
5ce6 .. 00		keyf12:       db ": keyf12 $1b ;",0 
5cf5			 
5cf5 .. 00		keytab:       db ": keytab $09 ;",0 
5d04 .. 00		keycr:       db ": keycr $0d ;",0 
5d12 .. 00		keyhome:       db ": keyhome $0e ;",0 
5d22 .. 00		keyend:       db ": keyend $0f ;",0 
5d31 .. 00		keybs:       db ": keybs $08 ;",0 
5d3f			 
5d3f			   
5d3f			 
5d3f			 
5d3f			 
5d3f			; eof 
# End of file forth_autostart.asm
5d3f			 
5d3f			 
5d3f			 
5d3f			; stack over and underflow checks 
5d3f			 
5d3f			; init the words to detect the under/overflow 
5d3f			 
5d3f			chk_stk_init: 
5d3f				; a vague random number to check so we dont get any "lucky" hits 
5d3f 3e 2d			ld a, 45 
5d41 6f				ld l, a 
5d42 00				nop 
5d43 3e 17			ld a, 23 
5d45 67				ld h, a 
5d46			 
5d46 22 97 e2			ld (chk_word), hl     ; the word we need to check against 
5d49			 
5d49			;	ld (chk_stund), hl	; stack points.... 
5d49 22 00 ef			ld (chk_stovr), hl 
5d4c 22 e6 e9			ld (chk_ret_und), hl 
5d4f 22 a4 e9			ld (chk_ret_ovr), hl 
5d52 22 22 e9			ld (chk_loop_ovr), hl 
5d55 22 20 e8			ld (chk_data_ovr), hl 
5d58 c9				ret 
5d59				 
5d59			check_stacks: 
5d59				; check all stack words 
5d59			 
5d59 e5				push hl 
5d5a d5				push de 
5d5b			 
5d5b			;	ld de,(chk_word) 
5d5b			;	ld hl, (chk_stund)	; stack points.... 
5d5b			;	if DEBUG_STK_FAULT 
5d5b			;		DMARK "FAa" 
5d5b			;		CALLMONITOR 
5d5b			;	endif 
5d5b			;	call cmp16 
5d5b			;	jp z, .chk_faulta 
5d5b			; 
5d5b			;	ld de, sfaultsu 
5d5b			;	jp .chk_fault 
5d5b			 
5d5b 2a 00 ef		.chk_faulta: ld hl, (chk_stovr) 
5d5e ed 5b 97 e2		ld de,(chk_word) 
5d62				if DEBUG_STK_FAULT 
5d62					DMARK "FAb" 
5d62					CALLMONITOR 
5d62				endif 
5d62 cd 13 0e			call cmp16 
5d65 28 06			jr z, .chk_fault1 
5d67 11 0b 5e			ld de, sfaultso 
5d6a c3 bc 5d			jp .chk_fault 
5d6d			.chk_fault1:  
5d6d 2a e6 e9			ld hl, (chk_ret_und) 
5d70 ed 5b 97 e2		ld de,(chk_word) 
5d74				if DEBUG_STK_FAULT 
5d74					DMARK "FAU" 
5d74					CALLMONITOR 
5d74				endif 
5d74 cd 13 0e			call cmp16 
5d77 ca 80 5d			jp z, .chk_fault2 
5d7a 11 1b 5e			ld de, sfaultru 
5d7d c3 bc 5d			jp .chk_fault 
5d80			.chk_fault2:  
5d80 2a a4 e9			ld hl, (chk_ret_ovr) 
5d83 ed 5b 97 e2		ld de,(chk_word) 
5d87				if DEBUG_STK_FAULT 
5d87					DMARK "FA1" 
5d87					CALLMONITOR 
5d87				endif 
5d87 cd 13 0e			call cmp16 
5d8a ca 93 5d			jp z, .chk_fault3 
5d8d 11 29 5e			ld de, sfaultro 
5d90 c3 bc 5d			jp .chk_fault 
5d93			.chk_fault3:  
5d93 2a 22 e9			ld hl, (chk_loop_ovr) 
5d96 ed 5b 97 e2		ld de,(chk_word) 
5d9a				if DEBUG_STK_FAULT 
5d9a					DMARK "FA2" 
5d9a					CALLMONITOR 
5d9a				endif 
5d9a cd 13 0e			call cmp16 
5d9d ca a6 5d			jp z, .chk_fault4 
5da0 11 43 5e			ld de, sfaultlo 
5da3 c3 bc 5d			jp .chk_fault 
5da6			.chk_fault4:  
5da6 2a 20 e8			ld hl, (chk_data_ovr) 
5da9 ed 5b 97 e2		ld de,(chk_word) 
5dad				if DEBUG_STK_FAULT 
5dad					DMARK "FA3" 
5dad					CALLMONITOR 
5dad				endif 
5dad cd 13 0e			call cmp16 
5db0 ca b9 5d			jp z, .chk_fault5 
5db3 11 5d 5e			ld de, sfaultdo 
5db6 c3 bc 5d			jp .chk_fault 
5db9			 
5db9			 
5db9			.chk_fault5:  
5db9 d1				pop de 
5dba e1				pop hl 
5dbb			 
5dbb c9				ret 
5dbc			 
5dbc cd c8 0b		.chk_fault: 	call clear_display 
5dbf 3e 28				ld a, display_row_2 
5dc1 cd db 0b				call str_at_display 
5dc4 11 ed 5d				   ld de, .stackfault 
5dc7 3e 00				ld a, display_row_1 
5dc9 cd db 0b				call str_at_display 
5dcc 11 65 ee				    ld de, debug_mark 
5dcf 3e 11				ld a, display_row_1+17 
5dd1 cd db 0b				call str_at_display 
5dd4 cd eb 0b				call update_display 
5dd7			 
5dd7				; prompt before entering montior for investigating issue 
5dd7			 
5dd7 3e 78			ld a, display_row_4 
5dd9 11 6e 18			ld de, endprog 
5ddc			 
5ddc cd eb 0b			call update_display		 
5ddf			 
5ddf cd 08 1b			call next_page_prompt 
5de2			 
5de2 d1				pop de 
5de3 e1				pop hl 
5de4 cd c2 18				call monitor 
5de7 cd 27 1f				call forth_warmstart 
5dea c3 be 17				jp warmstart_afterauto 
5ded					;jp 0 
5ded					;halt 
5ded			 
5ded			 
5ded			 
5ded .. 00		.stackfault: 	db "Stack fault:",0 
5dfa			 
5dfa .. 00		sfaultsu: 	db	"Stack under flow",0 
5e0b .. 00		sfaultso: 	db	"Stack over flow",0 
5e1b .. 00		sfaultru:	db "RTS underflow",0 
5e29 .. 00		sfaultro:	db "RTS overflow/LS underflow", 0 
5e43 .. 00		sfaultlo:	db "LS overflow/DTS underflow", 0 
5e5d .. 00		sfaultdo:	db "DTS overflow", 0 
5e6a			 
5e6a			 
5e6a			fault_dsp_under: 
5e6a 11 7c 5e			ld de, .dsp_under 
5e6d c3 32 5f			jp .show_fault 
5e70			 
5e70			fault_rsp_under: 
5e70 11 8a 5e			ld de, .rsp_under 
5e73 c3 32 5f			jp .show_fault 
5e76			fault_loop_under: 
5e76 11 98 5e			ld de, .loop_under 
5e79 c3 32 5f			jp .show_fault 
5e7c			 
5e7c .. 00		.dsp_under: db "DSP Underflow",0 
5e8a .. 00		.rsp_under: db "RSP Underflow",0 
5e98 .. 00		.loop_under: db "LOOP Underflow",0 
5ea7			 
5ea7			 
5ea7 d5			type_faultn: 	push de 
5ea8 e5					push hl 
5ea9 cd c8 0b				call clear_display 
5eac 11 d6 5e				   ld de, .typefaultn 
5eaf 3e 00				ld a, display_row_1 
5eb1 cd db 0b				call str_at_display 
5eb4 11 65 ee				    ld de, debug_mark 
5eb7 3e 11				ld a, display_row_1+17 
5eb9 cd db 0b				call str_at_display 
5ebc cd eb 0b				call update_display 
5ebf			 
5ebf				; prompt before entering montior for investigating issue 
5ebf			 
5ebf 3e 78			ld a, display_row_4 
5ec1 11 6e 18			ld de, endprog 
5ec4			 
5ec4 cd eb 0b			call update_display		 
5ec7			 
5ec7 cd 08 1b			call next_page_prompt 
5eca			 
5eca e5					push hl 
5ecb d5					push de 
5ecc cd c2 18				call monitor 
5ecf cd 27 1f				call forth_warmstart 
5ed2 c3 be 17				jp warmstart_afterauto 
5ed5 76					halt 
5ed6			 
5ed6			 
5ed6 .. 00		.typefaultn: db "NUM Type Expected TOS!",0 
5eed			 
5eed d5			type_faults: 	push de 
5eee e5					push hl 
5eef cd c8 0b				call clear_display 
5ef2 11 1b 5f				   ld de, .typefaults 
5ef5 3e 00				ld a, display_row_1 
5ef7 cd db 0b				call str_at_display 
5efa 11 65 ee				    ld de, debug_mark 
5efd 3e 11				ld a, display_row_1+17 
5eff cd db 0b				call str_at_display 
5f02 cd eb 0b				call update_display 
5f05			 
5f05				; prompt before entering montior for investigating issue 
5f05			 
5f05 3e 78			ld a, display_row_4 
5f07 11 6e 18			ld de, endprog 
5f0a			 
5f0a cd eb 0b			call update_display		 
5f0d			 
5f0d cd 08 1b			call next_page_prompt 
5f10			 
5f10 e1					pop hl 
5f11 d1					pop de 
5f12 cd c2 18				call monitor 
5f15 cd 27 1f				call forth_warmstart 
5f18 c3 be 17				jp warmstart_afterauto 
5f1b			 
5f1b			 
5f1b .. 00		.typefaults: db "STR Type Expected TOS!",0 
5f32			 
5f32			.show_fault: 	 
5f32 d5					push de 
5f33 cd c8 0b				call clear_display 
5f36 d1					pop de 
5f37 3e 00				ld a, display_row_1 
5f39 cd db 0b				call str_at_display 
5f3c 11 65 ee				    ld de, debug_mark 
5f3f 3e 11				ld a, display_row_1+17 
5f41 cd db 0b				call str_at_display 
5f44 cd eb 0b				call update_display 
5f47			 
5f47				; prompt before entering montior for investigating issue 
5f47			 
5f47 3e 78			ld a, display_row_4 
5f49 11 6e 18			ld de, endprog 
5f4c			 
5f4c cd eb 0b			call update_display		 
5f4f			 
5f4f cd 08 1b			call next_page_prompt 
5f52			 
5f52 e1					pop hl 
5f53 d1					pop de 
5f54 cd c2 18				call monitor 
5f57			; do a dump to cli and not warmstart so we preserve all of the uwords.  
5f57			; TODO Make optional fault restart to cli or warm boot? 
5f57					;jp warmstart 
5f57 c3 02 18				jp cli 
5f5a 76					halt 
5f5b			 
5f5b			 
5f5b			; handle the auto run of code from files in storage 
5f5b			 
5f5b			 
5f5b			include "forth_startup.asm" 
5f5b			; Which startup method to use? 
5f5b			; 
5f5b			; version 1 - allows for a single stored file to be selected to run at start up (if se storage is enabled) 
5f5b			; followed by loading of a list of scripts in eeprom 
5f5b			 
5f5b			; version 2 - if se storage is enabled then auto load all files which begin with a '*' else use loading 
5f5b			; from eeprom 
5f5b			 
5f5b			; Select with define in main stubs 
5f5b			 
5f5b			if STARTUP_V1 
5f5b				include "forth_startupv1.asm" 
5f5b			; Startup script loading version 1 
5f5b			 
5f5b			; If SE storage is available first stage is to use the selected file 
5f5b			; then go through the eeprom list 
5f5b			 
5f5b .. 00		sprompt1: db "Startup load...",0 
5f6b .. 00		sprompt2: db "Run? 1=No *=End #=All",0 
5f81			 
5f81			 
5f81			 
5f81			 
5f81			forth_startup: 
5f81 21 b0 50			ld hl, startcmds 
5f84 3e 00			ld a, 0 
5f86 32 e1 e6			ld (os_last_cmd), a    ; tmp var to skip prompts if doing all 
5f89			 
5f89 e5			.start1:	push hl 
5f8a cd c8 0b			call clear_display 
5f8d 11 5b 5f			ld de, sprompt1 
5f90 3e 00		        ld a, display_row_1 
5f92 cd db 0b			call str_at_display 
5f95 11 6b 5f			ld de, sprompt2 
5f98 3e 28		        ld a, display_row_2 
5f9a cd db 0b			call str_at_display 
5f9d e1				pop hl 
5f9e e5				push hl 
5f9f 5e				ld e,(hl) 
5fa0 23				inc hl 
5fa1 56				ld d,(hl) 
5fa2 3e 50		        ld a, display_row_3 
5fa4 cd db 0b			call str_at_display 
5fa7 cd eb 0b			call update_display 
5faa			 
5faa			 
5faa 3a e1 e6			ld a, (os_last_cmd) 
5fad fe 00			cp 0 
5faf 28 05			jr z, .startprompt 
5fb1 cd f4 0a			call delay250ms 
5fb4 18 24			jr .startdo 
5fb6				 
5fb6				 
5fb6			 
5fb6			.startprompt: 
5fb6			 
5fb6 3e 9f			ld a,display_row_4 + display_cols - 1 
5fb8 11 06 1b		        ld de, endprg 
5fbb cd db 0b			call str_at_display 
5fbe cd eb 0b			call update_display 
5fc1 cd 00 0b			call delay1s 
5fc4 cd 33 61			call cin_wait 
5fc7						 
5fc7 fe 2a			cp '*' 
5fc9 28 5e			jr z, .startupend1 
5fcb fe 23			cp '#' 
5fcd 20 07			jr nz, .startno 
5fcf 3e 01			ld a, 1 
5fd1 32 e1 e6			ld (os_last_cmd),a 
5fd4 18 04			jr .startdo 
5fd6 fe 31		.startno:	cp '1' 
5fd8 28 3a			jr z,.startnxt  
5fda			 
5fda				; exec startup line 
5fda			.startdo:	 
5fda e1				pop hl 
5fdb e5				push hl 
5fdc				 
5fdc 5e				ld e,(hl) 
5fdd 23				inc hl 
5fde 56				ld d,(hl) 
5fdf eb				ex de,hl 
5fe0			 
5fe0 e5				push hl 
5fe1			 
5fe1 3e 00			ld a, 0 
5fe3				;ld a, FORTH_END_BUFFER 
5fe3 cd 66 11			call strlent 
5fe6 23				inc hl   ; include zero term to copy 
5fe7 06 00			ld b,0 
5fe9 4d				ld c,l 
5fea e1				pop hl 
5feb 11 bb e2			ld de, scratch 
5fee ed b0			ldir 
5ff0			 
5ff0			 
5ff0 21 bb e2			ld hl, scratch 
5ff3 cd cb 1f			call forthparse 
5ff6 cd 07 20			call forthexec 
5ff9 cd 21 1f			call forthexec_cleanup 
5ffc			 
5ffc 3e 78			ld a, display_row_4 
5ffe 11 6e 18			ld de, endprog 
6001			 
6001 cd eb 0b			call update_display		 
6004			 
6004 3a e1 e6			ld a, (os_last_cmd) 
6007 fe 00			cp 0 
6009 20 09			jr nz, .startnxt 
600b cd 08 1b			call next_page_prompt 
600e cd c8 0b		        call clear_display 
6011 cd eb 0b			call update_display		 
6014			 
6014				; move onto next startup line? 
6014			.startnxt: 
6014			 
6014 cd f4 0a			call delay250ms 
6017 e1				pop hl 
6018			 
6018 23				inc hl 
6019 23				inc hl 
601a			 
601a e5				push hl 
601b 5e				ld e, (hl) 
601c 23				inc hl 
601d 56				ld d, (hl) 
601e e1				pop hl 
601f				; TODO replace 0 test 
601f			 
601f eb				ex de, hl 
6020 cd 1e 0e			call ishlzero 
6023			;	ld a,e 
6023			;	add d 
6023			;	cp 0    ; any left to do? 
6023 eb				ex de, hl 
6024 c2 89 5f			jp nz, .start1 
6027 18 01			jr .startupend 
6029			 
6029 e1			.startupend1: pop hl 
602a			.startupend: 
602a			 
602a cd c8 0b			call clear_display 
602d cd eb 0b			call update_display 
6030 c9				ret 
6031			if STORAGE_SE 
6031			 
6031			sprompt3: db "Loading from start-up file?:",0 
6031			sprompt4: db "(Y=Any key/N=No)",0 
6031			 
6031			 
6031			forth_autoload: 
6031			 
6031				; load block 0 of store 1 
6031				 
6031				ld a, $fe      ; bit 0 clear 
6031				ld (spi_device), a 
6031			 
6031				call storage_get_block_0 
6031			 
6031				ld a, (store_page+STORE_0_AUTOFILE) 
6031			 
6031				cp 0 
6031				ret z     ; auto start not enabled 
6031			 
6031				call clear_display 
6031			 
6031				; set bank 
6031			 
6031					ld a, (store_page+STORE_0_BANKRUN) 
6031					ld (spi_device), a 
6031			 
6031				; get file id to load from and get the file name to display 
6031			 
6031					ld a, (store_page+STORE_0_FILERUN) 
6031			 
6031					ld l, 0 
6031					ld h, a 
6031					ld de, store_page 
6031			 
6031					if DEBUG_FORTH_WORDS 
6031						DMARK "ASp" 
6031						CALLMONITOR 
6031					endif 
6031					call storage_read 
6031			 
6031					if DEBUG_FORTH_WORDS 
6031						DMARK "ASr" 
6031						CALLMONITOR 
6031					endif 
6031			 
6031					call ishlzero 
6031					ret z             ; file not found 
6031			 
6031					ld a, display_row_2 + 10 
6031					ld de, store_page+3 
6031					call str_at_display 
6031				 
6031			; 
6031			 
6031				ld a, display_row_1+5 
6031				ld de, sprompt3 
6031				call str_at_display 
6031				ld a, display_row_3+15 
6031				ld de, sprompt4 
6031				call str_at_display 
6031			 
6031				call update_display 
6031			 
6031				call cin_wait 
6031				cp 'n' 
6031				ret z 
6031				cp 'N' 
6031				ret z 
6031			 
6031				call delay1s 
6031			 
6031				ld a, (store_page+2) 
6031				ld (store_openmaxext), a    ; save count of ext 
6031				ld a, 1  
6031				ld (store_openext), a    ; save count of ext 
6031			 
6031			.autof:  
6031				ld l , a 
6031				 
6031				ld a, (store_page) 
6031				ld h, a	 
6031				ld de, store_page 
6031					if DEBUG_FORTH_WORDS 
6031						DMARK "ASl" 
6031						CALLMONITOR 
6031					endif 
6031					call storage_read 
6031				call ishlzero 
6031				ret z 
6031			;	jr z, .autoend 
6031			 
6031					if DEBUG_FORTH_WORDS 
6031						DMARK "ASc" 
6031						CALLMONITOR 
6031					endif 
6031				ld de, store_page+2 
6031				ld a, display_row_4 
6031				call str_at_display 
6031			 
6031				call update_display 
6031				call delay250ms 
6031			 
6031			 
6031			 
6031				ld hl, store_page+2 
6031				call forthparse 
6031				call forthexec 
6031				call forthexec_cleanup 
6031			 
6031				 
6031				ld a, (store_openext) 
6031				inc a 
6031				ld (store_openext), a    ; save count of ext 
6031			 
6031				jr .autof 
6031			;.autofdone: 
6031			; 
6031			;		if DEBUG_FORTH_WORDS 
6031			;			DMARK "ASx" 
6031			;			CALLMONITOR 
6031			;		endif 
6031			;;	call clear_display 
6031			;	ret 
6031			 
6031			 
6031			 
6031			endif 
# End of file forth_startupv1.asm
6031			endif 
6031			if STARTUP_V2 
6031				include "forth_startupv2.asm" 
6031			endif 
6031			 
# End of file forth_startup.asm
6031			 
6031			; eof 
# End of file forth_kernel.asm
6031			;include "nascombasic.asm" 
6031			 
6031			 
6031			; find out where the code ends if loaded into RAM (for SC114) 
6031			;endofcode:  
6031			;	nop 
6031			 
6031			 
6031			; jump to nmi vector 
6031			 
6031			init_nmi: 
6031 3e c9			ld a, $c9   ; RET 
6033 32 72 ee			ld (nmi_vector), a 
6036 c9				ret 
6037			nmi: 
6037 e5				push hl 
6038 d5				push de 
6039 c5				push bc 
603a f5				push af 
603b cd 72 ee			call nmi_vector 
603e f5				push af 
603f c5				push bc 
6040 d5				push de 
6041 e5				push hl 
6042 ed 4d			reti 
6044			 
6044			 
6044			; eof 
6044			 
# End of file main.asm
6044			;include "firmware_lcd_4x40.asm" 
6044			;;include "firmware_lcd_4x20.asm" 
6044			include "firmware_cpm_display.asm" 
6044			 
6044			; Serial display interface for SC114 
6044			 
6044			 
6044			display_row_1: equ 0 
6044			display_row_2: equ display_row_1+display_cols 
6044			display_row_3: equ display_row_2 + display_cols 
6044			display_row_4: equ display_row_3 + display_cols 
6044			 
6044			kLCDWidth:  EQU display_cols             ;Width in characters 
6044			kLCD_Line1: EQU 0x00  
6044			kLCD_Line2: EQU kLCD_Line1+kLCDWidth 
6044			; E1 
6044			kLCD_Line3: EQU kLCD_Line2+kLCDWidth 
6044			kLCD_Line4: EQU kLCD_Line3+kLCDWidth  
6044			 
6044			lcd_init: 
6044				; no init as handled by the SCM bios 
6044 c9				ret 
6045			 
6045			 
6045			; low level functions for direct screen writes 
6045			 
6045			; output char at pos? 
6045			fLCD_Str: 
6045			        ;out (SC114_SIO_1_OUT),a 
6045 c5				push bc 
6046 d5				push de 
6047 5f				ld e, a 
6048			; TODO Replace with CP/M BIOS call 
6048 0e 02			ld c, $02 
604a cd 05 00			call 5 
604d d1				pop de 
604e c1				pop bc 
604f c9				ret 
6050			 
6050			; position the cursor on the screen using A as realtive point in screen buffer (i.e. A=(x+(width/y))) 
6050			fLCD_Pos: 
6050				; use ASCII escape to position 
6050			        ;out (SC114_SIO_1_OUT),a 
6050 c5				push bc 
6051 d5				push de 
6052 5f				ld e, a 
6053 0e 02			ld c, $02 
6055			; TODO Replace with CP/M BIOS call 
6055 cd 05 00			call 5 
6058 d1				pop de 
6059 c1				pop bc 
605a			 
605a c9				ret 
605b			 
605b			; output char at pos 
605b			fLCD_Data: 
605b			      ;  out (SC114_SIO_1_OUT),a 
605b c5				push bc 
605c d5				push de 
605d 0e 02			ld c, $02 
605f 5f				ld e, a 
6060			; TODO Replace with CP/M BIOS call 
6060 cd 05 00			call 5 
6063 d1				pop de 
6064 c1				pop bc 
6065			 
6065 c9				ret 
6066			 
6066			; ascii cls  
6066			 
6066 1b 5b 48 24	.cls:   db 27, '[', 'H', "$" 
606a			 
606a 0d 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a ..	.clscpm: db 13, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,10,10,10,10,10,"$" 
6081			;.clscpm: db 3, $3c,"$" 
6081			 
6081			; write the frame buffer given in hl to hardware  
6081			write_display: 
6081			 
6081			API: equ 0 
6081			 
6081			if API 
6081				push bc 
6081				ld b, 4 
6081			 
6081			        ld (display_write_tmp), hl 	  
6081			 
6081				; clear and home cursor 
6081			 
6081				ld c, 9 
6081				ld de, .cls 
6081			; TODO Replace with CP/M BIOS call 
6081				call 5 
6081			 
6081			 
6081			.writeln: 
6081			 
6081				ld de, (display_write_tmp) 
6081				ld c, 6 
6081			; TODO Replace with CP/M BIOS call 
6081				rst $30 
6081				ld c, 7 
6081				rst $30 
6081			 
6081				ld hl, (display_write_tmp) 
6081				ld de, display_cols 
6081				add hl,de 
6081				ld (display_write_tmp),hl 
6081			 
6081				djnz  .writeln 
6081			 
6081				pop bc 
6081			 
6081			 
6081				ret 
6081			endif 
6081 e5				push hl 
6082 c5				push bc 
6083 d5				push de 
6084			 
6084			;	ld c, 2 
6084			;	;ld de, .cls 
6084			;	ld a, 27 
6084			;	rst $30 
6084			;	ld c, 2 
6084			;	;ld de, .cls 
6084			;	ld a, '[' 
6084			;	rst $30 
6084			; 
6084			;	ld c, 2 
6084			;	;ld de, .cls 
6084			;	ld a, 'H' 
6084			;	rst $30 
6084			; 
6084			 
6084			 
6084			; lots of CR/LF 
6084			;	ld c, 9 
6084			;	ld de, .clscpm 
6084			;	call 5 
6084			 
6084			; xterm cls 
6084 0e 02			ld c, 2 
6086 1e 1b			ld e, 27 
6088 cd 05 00			call 5 
608b			; cls causes too much flicker 
608b			;	ld c, 2 
608b			;	ld e, 'c' 
608b			;	call 5 
608b			 
608b			; use xterm home instead 
608b 0e 02			ld c, 2 
608d 1e 5b			ld e, '[' 
608f cd 05 00			call 5 
6092 0e 02			ld c, 2 
6094 1e 48			ld e, 'H' 
6096 cd 05 00			call 5 
6099			LLL: equ 0 
6099			 
6099			if LLL 
6099			 
6099				ld c, 2 
6099				;ld de, .cls 
6099				ld e, 27 
6099			; TODO Replace with CP/M BIOS call 
6099				call 5 
6099			 
6099			 
6099				ld c, 2 
6099				;ld de, .cls 
6099				ld e, '[' 
6099			; TODO Replace with CP/M BIOS call 
6099				call 5 
6099				ld c, 2 
6099				;ld de, .cls 
6099				ld e, '2' 
6099			; TODO Replace with CP/M BIOS call 
6099				call 5 
6099				ld c, 2 
6099				;ld de, .cls 
6099				ld e, 'J' 
6099			; TODO Replace with CP/M BIOS call 
6099				call 5 
6099			 
6099			endif 
6099			 
6099 d1				pop de 
609a c1				pop bc 
609b e1				pop hl 
609c			 
609c			 
609c 22 c3 eb		        ld (display_write_tmp), hl 	  
609f 3e 00			ld a, kLCD_Line1 
60a1			        ;    CALL fLCD_Pos       ;Position cursor to location in A 
60a1 06 28			ld b, display_cols 
60a3 ed 5b c3 eb		ld de, (display_write_tmp) 
60a7 cd 2a 61			call write_len_string 
60aa				 
60aa			 
60aa e5			push hl 
60ab d5			push de 
60ac c5			push bc 
60ad 0e 02			ld c, 2 
60af 1e 0a			ld e, 10 
60b1 cd 05 00			call 5 
60b4 0e 02			ld c, 2 
60b6 1e 0d			ld e, 13 
60b8 cd 05 00			call 5 
60bb			; TODO Replace with CP/M BIOS call 
60bb				;rst $30 
60bb c1			pop bc 
60bc d1			pop de 
60bd e1			pop hl 
60be			 
60be				 
60be 2a c3 eb			ld hl, (display_write_tmp) 
60c1 11 28 00			ld de, display_cols 
60c4 19				add hl,de 
60c5 22 c3 eb			ld (display_write_tmp),hl 
60c8			 
60c8				 
60c8 3e 28			ld a, kLCD_Line2 
60ca			        ;    CALL fLCD_Pos       ;Position cursor to location in A 
60ca 06 28			ld b, display_cols 
60cc ed 5b c3 eb		ld de, (display_write_tmp) 
60d0 cd 2a 61			call write_len_string 
60d3				 
60d3 2a c3 eb			ld hl, (display_write_tmp) 
60d6 11 28 00			ld de, display_cols 
60d9 19				add hl,de 
60da 22 c3 eb			ld (display_write_tmp),hl 
60dd			 
60dd e5			push hl 
60de d5			push de 
60df c5			push bc 
60e0 0e 07			ld c, 7 
60e2			; TODO Replace with CP/M BIOS call 
60e2				;rst $30 
60e2 0e 02			ld c, 2 
60e4 1e 0a			ld e, 10 
60e6 cd 05 00			call 5 
60e9 0e 02			ld c, 2 
60eb 1e 0d			ld e, 13 
60ed cd 05 00			call 5 
60f0 c1			pop bc 
60f1 d1			pop de 
60f2 e1			pop hl 
60f3			 
60f3				 
60f3 3e 50			ld a, kLCD_Line3 
60f5			         ;   CALL fLCD_Pos       ;Position cursor to location in A 
60f5 06 28			ld b, display_cols 
60f7 ed 5b c3 eb		ld de, (display_write_tmp) 
60fb cd 2a 61			call write_len_string 
60fe				 
60fe 2a c3 eb			ld hl, (display_write_tmp) 
6101 11 28 00			ld de, display_cols 
6104 19				add hl,de 
6105 22 c3 eb			ld (display_write_tmp),hl 
6108			 
6108 e5			push hl 
6109 d5			push de 
610a c5			push bc 
610b 0e 07			ld c, 7 
610d			; TODO Replace with CP/M BIOS call 
610d				;rst $30 
610d 0e 02			ld c, 2 
610f 1e 0a			ld e, 10 
6111 cd 05 00			call 5 
6114 0e 02			ld c, 2 
6116 1e 0d			ld e, 13 
6118 cd 05 00			call 5 
611b c1			pop bc 
611c d1			pop de 
611d e1			pop hl 
611e			 
611e				 
611e 3e 78			ld a, kLCD_Line4 
6120			          ;  CALL fLCD_Pos       ;Position cursor to location in A 
6120 06 28			ld b, display_cols 
6122 ed 5b c3 eb		ld de, (display_write_tmp) 
6126 cd 2a 61			call write_len_string 
6129 c9					ret 
612a			 
612a			 
612a				; write out a fixed length string given in b from de 
612a			 
612a 1a			write_len_string:   LD   A, (DE)        ;Get character from string 
612b cd 5b 60		            CALL fLCD_Data      ;Write character to display 
612e 13				inc de 
612f 10 f9			djnz write_len_string 
6131 c9				ret 
6132			 
6132			 
6132			; eof 
# End of file firmware_cpm_display.asm
6132			;include "firmware_key_5x10.asm" 
6132			;;include "firmware_key_4x10.asm" 
6132			include "firmware_key_cpm.asm" 
6132			; Serial keyboard interface for SC114 
6132			 
6132			 
6132			key_init: 
6132				; no init as handled by the SCM bios 
6132 c9				ret 
6133			 
6133			 
6133			cin_wait: 
6133			;	ld a, 0 
6133			;	ret 
6133			 
6133				;in a,(SC114_SIO_1_IN) 
6133			        ; Use SCM API to get from whatever console device we are using 
6133			 
6133			; TODO Replace with CP/M BIOS call 
6133 c5				push bc 
6134 0e 01			ld c, $01 
6136 cd 05 00			call 5 
6139 c1				pop bc 
613a c9				ret 
613b			 
613b			cinndb:  
613b			cin: 
613b			 
613b			 
613b c5				push bc 
613c			 
613c				; any key waiting to process? 
613c			; TODO Replace with CP/M BIOS call 
613c 0e 06			ld c, $06 
613e cd 05 00			call 5 
6141 28 0d			jr z, .cin_skip 
6143			 
6143				; yep, get it 
6143			 
6143 0e 01			ld c, $01 
6145			; TODO Replace with CP/M BIOS call 
6145 cd 05 00			call 5 
6148			 
6148 fe 7f			cp $7f     ; back space 
614a 20 02			jr nz, .skipbs 
614c 3e 08			ld a, KEY_BS 
614e			.skipbs: 
614e			 
614e c1				pop bc 
614f c9				ret 
6150			.cin_skip: 
6150 3e 00			ld a, 0 
6152 c1				pop bc 
6153 c9				ret 
6154			 
6154			 
6154			 
6154			 
# End of file firmware_key_cpm.asm
6154			endofcode:  
6154			baseram:  
6154 00				nop 
6155			 
6155			heap_start: equ baseram+15  ; Starting address of heap 
6155			free_list:  equ baseram+10      ; Block struct for start of free list (MUST be 4 bytes) 
6155			heap_size: equ  heap_end-heap_start      ; Number of bytes available in heap   TODO make all of user ram 
6155			;VDU:  EQU     endofcode           ; BASIC Work space 
6155			; eof 
6155			 
# End of file os_mega_cpm.asm
6155
