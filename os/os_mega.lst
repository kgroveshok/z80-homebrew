# File debug_level2.asm
0000			 
0000			; DEBUG Level 2 - All useful debug on and memory courruption guards 
0000			 
0000			; Odd specific debug points for testing hardware dev 
0000			 
0000			;DEBUG_LEVEL0: equ 0 
0000			;DEBUG_LEVEL0: equ 0 
0000			;DEBUG_LEVEL2: equ 1 
0000			DEBUG_LEVEL: equ '2' 
0000			 
0000			DEBUG_SOUND: equ 0      
0000			DEBUG_STK_FAULT: equ 0 
0000			DEBUG_INPUT: equ 0     ; Debug input entry code 
0000			DEBUG_INPUTV2: equ 0     ; Debug input entry code 
0000			DEBUG_KEYCINWAIT: equ 0 
0000			DEBUG_KEYCIN: equ 0 
0000			DEBUG_KEY: equ 0 
0000			DEBUG_KEY_MATRIX: equ 0 
0000			DEBUG_STORECF: equ 0 
0000			DEBUG_STORESE: equ 1        ; TODO  w locks up, r returns.  
0000			DEBUG_SPI_HARD_CE0: equ 0    ; only handshake on CE0 on port A 
0000			DEBUG_SPI: equ 0    ; low level spi tests 
0000			 
0000			; Enable many break points 
0000			 
0000			DEBUG_FORTH_PARSE_EXEC: equ 0     ; 6 
0000			DEBUG_FORTH_PARSE_EXEC_SLOW: equ 0     ; 6 
0000			DEBUG_FORTH_PARSE_NEXTWORD: equ 0 
0000			DEBUG_FORTH_JP: equ 0    ; 4 
0000			DEBUG_FORTH_MALLOC: equ 0 
0000			DEBUG_FORTH_MALLOC_INT: equ 0 
0000			DEBUG_FORTH_DOT: equ 1 
0000			DEBUG_FORTH_DOT_WAIT: equ 0 
0000			DEBUG_FORTH_MATHS: equ 0 
0000			DEBUG_FORTH_TOK: equ 0    ; 4 
0000			DEBUG_FORTH_PARSE: equ 0    ; 3 
0000			DEBUG_FORTH: equ 0  ;2 
0000			DEBUG_FORTH_WORDS: equ 1   ; 1 
0000			DEBUG_FORTH_PUSH: equ 1   ; 1 
0000			DEBUG_FORTH_UWORD: equ 1   ; 1 
0000			 
0000			; Enable key point breakpoints 
0000			 
0000			DEBUG_FORTH_DOT_KEY: equ 0 
0000			DEBUG_FORTH_PARSE_KEY: equ 0   ; 5 
0000			DEBUG_FORTH_WORDS_KEY: equ 1   ; 1 
0000			 
0000			; Debug stack imbalances 
0000			 
0000			ON: equ 1 
0000			OFF: equ 0 
0000			 
0000			DEBUG_STACK_IMB: equ 0 
0000			STACK_IMB_STORE: equ 20 
0000			 
0000			; House keeping and protections 
0000			 
0000			DEBUG_FORTH_STACK_GUARD: equ 1    ; under/over flows 
0000			DEBUG_FORTH_MALLOC_GUARD: equ 1 
0000			DEBUG_FORTH_MALLOC_HIGH: equ 0     ; warn only if more than 255 chars being allocated. would be highly unusual! 
0000			FORTH_ENABLE_FREE: equ 0 
0000			FORTH_ENABLE_MALLOCFREE: equ 1 
0000			FORTH_ENABLE_DSPPOPFREE: equ 1    ; TODO BUG Seems to be OK in some situations but with SW it crashes straight away 
0000			FORTH_ENABLE_FLOATMATH: equ 0 
0000			; eof 
# End of file debug_level2.asm
# File os_mega.asm
0000			 
0000			; Hardware Platform 
0000			 
0000			BASE_SC114: equ 0 
0000			BASE_KEV: equ 1 
0000			BASE_CPM: equ 0 
0000			 
0000			ENABLE_BASIC: equ 0 
0000			 
0000			STARTUP_V1: equ 0 
0000			STARTUP_V2: equ 1 
0000			 
0000			tos:	equ 0fffdh 
0000			; 
0000			; 
0000			; CPU clock 
0000			; 
0000			CPU_CLOCK_4MHZ: equ 1 
0000			CPU_CLOCK_8MHZ: equ  0 
0000			CPU_CLOCK_10MHZ: equ  0 
0000			 
0000			; use microchip serial eeprom for storage 
0000			 
0000			STORAGE_SE: equ 1 
0000			  
0000			; now handled by SPI support 
0000			SOUND_ENABLE: equ 0    
0000			 
0000			; Number of bytes available in heap   TODO make all of user ram 
0000			baseram: equ 08000h 
0000			endofcode: equ 08000h 
0000			heap_start: equ 0800eh  ; Starting address of heap 
0000			free_list:  equ 0800ah      ; Block struct for start of free list (MUST be 4 bytes) 
0000			 
0000			; Full OS but with the 5x10 fullsized keyboard 
0000			 
0000			display_rows: equ 4     
0000			;display_cols: equ 20 
0000			display_cols: equ 40 
0000			 
0000			key_rows: equ 5      
0000			key_cols: equ 10    
0000			 
0000			include "main.asm" 
0000			; z80 homebrew opperating system 
0000			; 
0000			 
0000			STARTUP_ENABLE: equ 1 
0000			 
0000			 
0000			; bios jump points via rst 
0000			 
0000			if BASE_SC114 = 1  
0000			 
0000				org 8000h 
0000			endif 
0000			 
0000			if BASE_KEV = 1  
0000			 
0000				org 0h 
0000			endif 
0000			 
0000			if BASE_CPM = 1  
0000			 
0000				org 100h 
0000			endif 
0000 c3 34 1c			jp coldstart     ; rst 0 - cold boot 
0003			 
0003			 
0003 ..			buildtime: db   "Build: " 
000a					include "romtimestamp.asm" 
000a ..			db '2025-09-04 17:03' 
# End of file romtimestamp.asm
001a 00				   db 0 
001b .. 32 00		debuglevel: db   "DL",DEBUG_LEVEL, 0 
001f			 
001f			 
001f			 
001f			;        nop  
001f			;        nop 
001f			;;	org 05h		; null out bdos call 
001f			; 
001f			;        nop  
001f			;        nop  
001f			;        nop 
001f			;;	org 08h 
001f			;;; 
001f			;;	jp cin		; rst 8 - char in 
001f			;;; 
001f			; 
001f			;        nop 
001f			;        nop 
001f			;        nop 
001f			;        nop 
001f			;        nop 
001f			;        nop 
001f			;        nop 
001f			;        nop 
001f			;	org 010h 
001f			;; 
001f			;	jp cout		; rest 010h  - char out 
001f			;; 
001f			;	org 01bh   
001f			; 
001f			;	;jp  		; rst 01bh   - write string to display 
001f			;	jp str_at_display 
001f			; 
001f			; 
001f			;	org 020h 
001f			; 
001f			;	; jp		 ; rst 020h - read char at screen location 
001f			; 
001f			;	org 028h 
001f			 
001f				; jp		 ; rst 028h  - storage i/o 
001f			 
001f			; 	org 030h 
001f			;	jp break_point_state 
001f			  
001f			; $30  
001f			; org 038h 
001f			; $38 
001f			 
001f			; TODO any more important entry points to add to jump table for easier coding use? 
001f			 
001f			if BASE_KEV = 1  
001f			 
001f				; need to be at $66 for nmi support 
001f 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0025 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
002b 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0031 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0037 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
003d 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0043 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0049 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
004f 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0055 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
005b 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0061 00 ff 00 ff 00 ff		db 0,255,0,255,0,255 
0067 00 ff			db 0,255 
0069 c3 b3 71			jp nmi 
006c			endif 
006c			 
006c			include "firmware.asm" 
006c			  
006c			; main constants (used here and in firmware)  
006c			  
006c			; TODO have page 0 of storage as bios  
006c			  
006c			Device_A: equ 0h  
006c			Device_B: equ 040h          ; Sound  
006c			  
006c			if BASE_KEV  
006c			Device_C: equ 080h          ; Storage and ext cart devices  
006c			endif  
006c			  
006c			if BASE_SC114  
006c			Device_C: equ  SC103_PIO          ; Storage and ext cart devices  
006c			endif  
006c			  
006c			if BASE_CPM  
006c			; TODO fixup for CPM  
006c			Device_C: equ 080h          ; Storage and ext cart devices  
006c			endif  
006c			  
006c			Device_D: equ 0c0h             ; Keyboard and LCD  
006c			  
006c			; Odd specific debug points for testing hardware dev  
006c			  
006c			;if DEBUG_LEVEL0  
006c			;	include "debug_level0.asm"  
006c			;endif  
006c			;if DEBUG_LEVEL1  
006c			;	include "debug_level1.asm"  
006c			;endif  
006c			;if DEBUG_LEVEL2  
006c			;	include "debug_level2.asm"  
006c			;endif  
006c			  
006c			  
006c			CALLMONITOR: macro  
006c			;	call break_point_state  
006c			; now use the break point debug vector  
006c				call debug_vector  
006c				endm  
006c			  
006c			MALLOC_1: equ 1        ; from dk88   
006c			MALLOC_2: equ 0           ; broke  
006c			MALLOC_3: equ 0           ; really broke  
006c			MALLOC_4: equ 0              ; mine pretty basic reuse and max of 250 chars  
006c			  
006c			if BASE_KEV   
006c			;stacksize: equ 256  
006c			; each stack entry is three bytes (type + word)  
006c			stacksize: equ 3*150  
006c			  
006c			STACK_RET_SIZE: equ 64  
006c			STACK_LOOP_SIZE: equ 128  
006c			STACK_DATA_SIZE: equ 512  
006c			endif  
006c			if BASE_SC114  
006c			;tos:	equ 0f000h  
006c			stacksize: equ 256  
006c			STACK_RET_SIZE: equ 64  
006c			STACK_LOOP_SIZE: equ 128  
006c			STACK_DATA_SIZE: equ 256  
006c			endif  
006c			  
006c			if BASE_CPM  
006c			;tos:	equ 0f000h  
006c			stacksize: equ 256  
006c			STACK_RET_SIZE: equ 64  
006c			STACK_LOOP_SIZE: equ 128  
006c			STACK_DATA_SIZE: equ 256  
006c			endif  
006c			  
006c			;if STORAGE_SE == 0  
006c			STORE_BLOCK_PHY:   equ 64    ; physical block size on storage   64byte on 256k eeprom  
006c			STORE_DEVICE_MAXBLOCKS:  equ  255*2 ; how many blocks are there on this storage device  
006c			;endif  
006c			  
006c			; Block 0 at offset $3b is a flag to decide to offer auto start up - 0 = prompt 1-auto run no prompt 2 - dont run  
006c			  
006c			STORE_0_AUTORUN: equ $20  
006c			  
006c			; Block 0 at offset $20+ holds the file number to run at system startup after the display  
006c			  
006c			STORE_0_AUTOFILE: equ $21  
006c			STORE_0_BANKRUN: equ $23  
006c			STORE_0_FILERUN: equ $24  
006c			  
006c			; Block 0 offsets for settings  
006c			  
006c			; if set then skip prompt for start up and accept all  
006c			  
006c			STORE_0_QUICKSTART: equ $25  
006c			  
006c			; Blocks where directory table is held  
006c			  
006c			; Reducing the number of entries increases the max file size  
006c			  
006c			;STORE_DIR_START: equ 1  
006c			;STORE_DIR_END: equ 33  
006c			  
006c			; Blocks from where file data is stored  
006c			  
006c			;STORE_DATA_START: equ STORE_DIR_END + 1  
006c			  
006c			; Block indicators (<32 are data files)  
006c			  
006c			;STORE_BLOCK_CFG: equ $8f       ; config block  
006c			;STORE_BLOCK_DIRF: equ $8e       ; directory block free  
006c			;STORE_BLOCK_DIRU: equ $8d       ; directory block free  
006c			;STORE_BLOCK_FREE: equ $85       ; data block free  
006c			;STORE_BLOCK_AUTO: equ $89       ; auto start code  
006c			  
006c			  
006c			  
006c			; Directory entry flags  
006c			  
006c			;STORE_DIR_FREE: equ 0  
006c			;STORE_DIR_FILE:  equ 1  
006c			  
006c			; Structure offsets to directory entries  
006c			;STORE_DE_FLAG: equ 0  
006c			;STORE_DE_MAXEXT: equ 1  
006c			;STORE_DE_FILENAME: equ 2  
006c			  
006c			; Structure offsets to block 0  
006c			  
006c			;STORE_BK0_ISFOR: equ 1  
006c			;STORE_BK0_LABEL: equ 3  
006c			  
006c			; memory allocation   
006c			  
006c			chk_stund: equ tos+2           ; underflow check word  
006c			chk_stovr: equ chk_stund-stacksize -2; overflow check word  
006c			  
006c			; keyscan table needs rows x cols buffer  
006c			;key_rows: equ 5     ; TODO move out to mini and maxi + 1 null  
006c			;key_cols: equ 10    ; TODO move out to mini and maxi + 1 null  
006c			  
006c			keyscan_table_row1: equ chk_stovr -key_cols-1  
006c			keyscan_table_row2: equ keyscan_table_row1-key_cols-1  
006c			keyscan_table_row3: equ keyscan_table_row2-key_cols-1  
006c			keyscan_table_row4: equ keyscan_table_row3-key_cols-1  
006c			keyscan_table_row5: equ keyscan_table_row4-key_cols-1  
006c			keyscan_table: equ keyscan_table_row5-(key_cols*key_rows)-1  
006c			keyscan_scancol: equ keyscan_table-key_cols  
006c			;keyscan_table_len: equ key_rows*key_cols  
006c			;keybufptr: equ keyscan_table - 2  
006c			;keysymbol: equ keybufptr - 1  
006c			key_held: equ keyscan_scancol-1	; currently held  
006c			key_held_prev: equ key_held - 1   ; previously held (to detect bounce and cycle of key if required)  
006c			key_repeat_ct: equ key_held_prev - 4 ; timers (two words)  
006c			key_fa: equ key_repeat_ct -1 ;  
006c			key_fb: equ key_fa -1 ;  
006c			key_fc: equ key_fb -1 ;  
006c			key_fd: equ key_fc -1 ;  
006c			key_face_held: equ key_fd - 1   
006c			; flag for enabling/disabling various hardware diag loading via block 0 on bank 1  
006c			  
006c			hardware_config: equ key_face_held - 10  
006c			  
006c			; hardware config switches  
006c			; TODO add bitmasks on includes for hardware  
006c			; high byte for expansion ids  
006c			;     0000 0000  no card inserted  
006c			;     0000 0001  storage card inserted  
006c			;     0000 0010  spi sd card active  
006c			  
006c			;       
006c			; low byte:  
006c			;     0000 0001   4x4 keypad  
006c			;     0000 0010   full keyboard  
006c			;     0000 0011   spi/ext keyboard  
006c			;     0000 0100   20x4 lcd  
006c			;     0000 1000   40x4 lcd  
006c			;     0000 1100   spi/ext display  
006c			;     0001 0000   ide interface available  
006c			  
006c			hardware_word: equ hardware_config - 2  
006c			  
006c			; debug marker - optional display of debug point on the debug screens  
006c			  
006c			nmi_vector:  equ hardware_word - 3   ; vector to the nmi handler  
006c			debug_vector:  equ nmi_vector - 3   ; vector to the debug handler  
006c			  
006c			debug_umark: equ debug_vector - 6  ; current user mark  
006c			debug_mark: equ debug_umark - 4    ; internal word debug points  
006c			  
006c			; input_str vars  
006c			input_ptr:  equ debug_mark - 2    ; ptr to the current cursor position of string currently being edited  on entry starting   
006c			input_start:  equ input_ptr - 2    ; ptr to the start of string   
006c			input_size: equ input_start -1  ; number of chars  
006c			input_display_size: equ input_size -1  ; TODO number of chars that are displayable. if < input_size then scroll   
006c			input_at_pos: equ input_display_size - 1 ; frame buffer offset for start of input  
006c			input_under_cursor: equ input_at_pos - 1 ; char under the cursor so we can blink it  
006c			input_at_cursor: equ input_under_cursor - 1 ; offset of cursor to current start of string  
006c			input_cur_flash: equ input_at_cursor - 2 ;  timeout for cursor flash  
006c			input_cur_onoff: equ input_cur_flash - 1 ;  cursor blink on or off  
006c			input_len: equ input_cur_onoff - 5 ; length of current input  
006c			input_cursor: equ input_len - 5 ; offset of cursor to current start of string  
006c			  
006c			; cursor blink rate  
006c			CUR_BLINK_RATE: equ $09  
006c			;CUR_BLINK_RATE: equ 15  
006c			  
006c			key_actual_pressed: equ input_cursor - 1   
006c			key_symbol: equ key_actual_pressed - 1   
006c			key_shift: equ key_symbol - 1   
006c			  
006c			; Display allocation  
006c			  
006c			;display_rows: equ 4     ; move out to mini and mega files  
006c			;display_cols: equ 20  
006c			  
006c			display_fb_len: equ display_rows*display_cols  
006c			  
006c			; primary frame buffer     
006c			display_fb0: equ  key_shift-display_fb_len -1 ; -display_fb_len-1          ; cli input     TODO why is that doubling up?  
006c			; working frame buffers  
006c			display_fb1: equ  display_fb0-display_fb_len -1 ; -display_fb_len-1          ; default running program  
006c			display_fb3: equ  display_fb1-display_fb_len - 1  
006c			display_fb2: equ  display_fb3-display_fb_len - 1  
006c			;  
006c			; pointer to active frame buffer  
006c			display_fb_active: equ display_fb2 - 2  
006c			display_lcde1e2: equ display_fb_active - 1         ; 0=e1, 1=e2   For E1/E2 selection when using the lcd 4x40 display  
006c			display_write_tmp: equ display_lcde1e2 - 2  
006c			display_active:  equ display_write_tmp-3   ; current state of activity char (plus room to write string)  
006c			  
006c			;  
006c			  
006c			;; can load into de directory  
006c			cursor_col: equ display_active-1  
006c			cursor_row: equ cursor_col-1  
006c			cursor_ptr: equ cursor_row - 1     ;  actual offset into lcd memory for row and col combo  
006c			cursor_shape: equ cursor_ptr - 2   ; char used for the current cursor   
006c			  
006c			; maths vars  
006c			  
006c			LFSRSeed: equ cursor_shape -20   
006c			randData: equ LFSRSeed - 2  
006c			xrandc: equ randData - 2  
006c			stackstore: equ xrandc - 2  
006c			seed1: equ  stackstore -2   
006c			seed2: equ seed1 - 2  
006c			  
006c			; cf storage vars  
006c			  
006c			iErrorNum:  equ seed2-1         ;Error number  
006c			iErrorReg:  equ iErrorNum -1              ;Error register  
006c			iErrorVer:  equ iErrorReg - 1              ;Verify error flag  
006c			  
006c			store_bank_active: equ iErrorVer - (5 + 8 ) 		; TODO not used.  indicator of which storage banks are available to use 5 on board and 8 in cart  
006c			  
006c			STORE_BLOCK_LOG:  equ   280      ; TODO remove.... Logical block size     
006c			  
006c			store_page: equ store_bank_active-STORE_BLOCK_LOG-1            ; bigger than page size for eeprom so we can join multiple blocks if they are continuation records  
006c			;?????store_ffpage: equ store_page-STORE_BLOCK_LOG            ; page size for eeprom?????  
006c			store_readptr: equ store_page-2       ; tracks the file extent during storage_read of continuation blocks  
006c			store_readbuf: equ store_readptr-2       ; tracks the position for the buffer during storage_read of continuation blocks  
006c			store_longread: equ store_readbuf -1 ;   if zero then only read one block. If not zero then do a read for as long as required  
006c			store_tmp1: equ store_longread - 2      ; temp pointer holders during ops  
006c			store_tmp2: equ store_tmp1 - 2        ; temp pointer holders during ops  
006c			store_tmp3: equ store_tmp2 - 2        ; temp pointer holders during ops  
006c			store_tmpid: equ store_tmp3 - 1		; page temp id  
006c			store_tmpext: equ store_tmpid - 1		; file extent temp  
006c			store_readcont: equ store_tmpid - 1		; If current read results in an overflow buffer to next record flag it up  
006c			store_openaddr: equ store_readcont - 2		; file block address of current opened file for read  
006c			store_openext: equ store_openaddr - 1		; file extent of current opened file for read  
006c			store_openmaxext: equ store_openext - 1		; max extent of current opened file for read  
006c			store_filecache: equ store_openmaxext-2   ;  TODO (using just one for now)  file id + extent count cache * 5  
006c			store_tmppageid: equ store_filecache-2    ; phyical page id temp  
006c			;  
006c			; spi vars  
006c			  
006c			  
006c			spi_clktime: equ store_tmppageid - 1      ; holds the number of ms that happens between spi clock pulses  
006c			spi_cartdev: equ spi_clktime - 1      ; holds bit mask to send to portb (ext spi) devices  
006c			spi_cartdev2: equ spi_cartdev - 1      ; holds bit mask to send to portb's shift reg devices  
006c			spi_portbyte: equ spi_cartdev2 - 1      ; holds bit mask to send to spi bus   
006c			spi_device: equ spi_portbyte - 1    ; bit mask to send to porta (eeproms) devices  
006c			spi_device_id: equ spi_device - 1    ; human readable bank number  
006c			  
006c			;;;;; forth cli params  
006c			  
006c			; TODO use a different frame buffer for forth???  
006c			  
006c			f_cursor_ptr:  equ spi_device_id - 1  ; offset into frame buffer for any . or EMIT output  
006c			cli_buffer: equ f_cursor_ptr - 20     ; temp hold - maybe not needed  
006c			cli_origtoken: equ cli_buffer - 2     ; pointer to the text of token for this word being checked  
006c			cli_token: equ cli_origtoken - 2     ; pointer to the text of token for this word being checked  
006c			cli_execword: equ cli_token - 2      ; pointer to start of code for this word  
006c			cli_nextword: equ cli_execword - 2      ; pointer to start of next word in dict  
006c			cli_ptr: equ cli_nextword - 2           ; pointer to start of word to parse by forth kernel (working)  
006c			cli_origptr: equ cli_ptr - 2           ; pointer to start of word to parse which resets cli_ptr on each word test  
006c			  
006c			cli_mvdot: equ cli_origptr - 1 ;     ; true will move the cursor once something is displayed  
006c			cli_autodisplay: equ cli_mvdot - 1 ;     ; true will auto update the display (slow) otherwise need to use DRAW  
006c			cli_var_array: equ cli_autodisplay - ( 10 * 2 ) ; word or string pointer variables using V@0-V@9  
006c			cli_var_array2: equ cli_var_array - ( 26 * 2 ) ; word or string pointer variables using VAR word  
006c			cli_ret_sp: equ cli_var_array2 - 2    ; ret stack pointer  
006c			cli_loop_sp: equ cli_ret_sp - 2   ; data stack pointer  
006c			cli_data_sp: equ cli_loop_sp - 2   ; data stack pointer  
006c			  
006c			chk_ret_und: equ cli_data_sp-2           ; underflow check word  
006c			cli_ret_stack: equ chk_ret_und - STACK_RET_SIZE      ; TODO could I just use normal stack for this? - use linked list for looping  
006c			chk_ret_ovr: equ cli_ret_stack -2; overflow check word  
006c			cli_loop_stack: equ chk_ret_ovr - STACK_LOOP_SIZE      ; TODO could I just use normal stack for this? - use linked list for looping  
006c			chk_loop_ovr: equ cli_loop_stack -2; overflow check word  
006c			cli_data_stack: equ chk_loop_ovr - STACK_DATA_SIZE		 ;   
006c			chk_data_ovr: equ cli_data_stack -2; overflow check word  
006c			  
006c			os_var_array: equ chk_data_ovr - (32 * 2)      ;   32 word array for use using the SCRATCH word  
006c			  
006c			; os/forth token vars  
006c			  
006c			os_last_cmd: equ os_var_array-255  
006c			os_cli_cmd: equ os_last_cmd-255              ; cli command entry line  
006c			os_current_i: equ os_cli_cmd-2  
006c			os_cur_ptr: equ os_current_i-2  
006c			os_word_scratch: equ os_cur_ptr-30  
006c			os_tok_len: equ os_word_scratch - 2  
006c			os_tok_ptr: equ os_tok_len - 2               ; our current PC ptr  
006c			os_tok_malloc: equ os_tok_ptr - 2  
006c			os_last_new_uword: equ os_tok_malloc - 2    ; hold start of last user word added  
006c			os_input: equ os_last_new_uword-255    ; buffer for EDIT word  
006c			execscratch: equ os_input-255        ; exec cmd eval buffer  
006c			scratch: equ execscratch-255  
006c			  
006c			os_stack_1: equ scratch - 3       ; stack holding area 1  
006c			os_stack_2: equ os_stack_1 - 3       ; stack holding area 2  
006c			os_stack_3: equ os_stack_2 - 3       ; stack holding area 3  
006c			os_stack_4: equ os_stack_3 - 3       ; stack holding area 4  
006c			  
006c			  
006c			; temp locations for new word processing to save on adding more   
006c			  
006c			os_new_malloc: equ os_stack_4-2  
006c			os_new_parse_len: equ os_new_malloc - 2  
006c			os_new_word_len: equ os_new_parse_len - 2  
006c			os_new_work_ptr: equ os_new_word_len - 2  
006c			os_new_src_ptr: equ os_new_work_ptr - 2  
006c			os_new_exec: equ os_new_src_ptr - 2  
006c			os_new_exec_ptr: equ os_new_exec - 2  
006c			  
006c			; resume memory alloocations....  
006c			  
006c			;os_view_disable: equ os_new_exec_ptr - 1  
006c			os_view_af: equ os_new_exec_ptr - 2  
006c			os_view_hl: equ os_view_af -2  
006c			os_view_de: equ os_view_hl - 2  
006c			os_view_bc: equ os_view_de - 2  
006c			  
006c			; stack checksum word  
006c			if DEBUG_STACK_IMB  
006c				curframe: equ  os_view_de - 5  
006c				store_sp: equ curframe - (STACK_IMB_STORE*4)  
006c				chk_word: equ store_sp - 2		 ; this is the word to init and then check against to detect stack corruption. Held far away from all stacks  
006c			else  
006c				chk_word: equ os_view_bc - 2		 ; this is the word to init and then check against to detect stack corruption. Held far away from all stacks  
006c			endif  
006c			  
006c			; with data stack could see memory filled with junk. need some memory management   
006c			; malloc and free entry points added  
006c			  
006c			;free_list:  equ chk_word - 4     ; Block struct for start of free list (MUST be 4 bytes)  
006c			;heap_size: equ  (free_list-08100h)      ; Number of bytes available in heap   TODO make all of user ram  
006c			;;heap_start: equ free_list - heap_size  ; Starting address of heap  
006c			;heap_end: equ free_list-1  ; Starting address of heap  
006c			;heap_start: equ free_list - heap_size  ; Starting address of heap  
006c			  
006c			;heap_start: equ free_list - heap_size  ; Starting address of heap  
006c			heap_end: equ chk_word-1  ; Starting address of heap  
006c			  
006c			  
006c			;if BASE_KEV   
006c			;heap_start: equ 0800eh  ; Starting address of heap  
006c			;free_list:  equ 0800ah      ; Block struct for start of free list (MUST be 4 bytes)  
006c			;heap_size: equ  heap_end-heap_start      ; Number of bytes available in heap   TODO make all of user ram  
006c			;endif  
006c			  
006c			;if BASE_SC114  
006c			;heap_start: equ baseram+15  ; Starting address of heap  
006c			;free_list:  equ baseram+10      ; Block struct for start of free list (MUST be 4 bytes)  
006c			;endif  
006c			  
006c			  
006c			;;;;  
006c			  
006c			  
006c			; change below to point to last memory alloc above  
006c			topusermem:  equ   heap_start  
006c			  
006c			;if BASE_KEV   
006c			;baseusermem: equ 08000h  
006c			;endif  
006c			  
006c			;if BASE_SC114  
006c			;;aseusermem:     equ    12  
006c			;baseusermem:     equ    prompt  
006c			;;baseusermem:     equ    endofcode  
006c			;endif  
006c			  
006c			  
006c			; **********************************************************************  
006c			; **  Constants  
006c			; **********************************************************************  
006c			  
006c			; Constants used by this code module  
006c			kDataReg:   EQU Device_D           ;PIO port A data register  
006c			kContReg:   EQU Device_D+2           ;PIO port A control register  
006c			  
006c			  
006c			portbdata:  equ Device_D+1    ; port b data  
006c			portbctl:   equ Device_D+3    ; port b control  
006c			  
006c			  
006c			;KEY_SHIFT:   equ 5  
006c			;KEY_SYMBOLSHIFT:  equ 6  
006c			  
006c			KEY_SHIFTLOCK: equ 4  
006c			  
006c			  
006c			KEY_UP: equ 5  
006c			KEY_NEXTWORD: equ 6  
006c			KEY_PREVWORD: equ 7  
006c			KEY_BS: equ 8  
006c			KEY_TAB:  equ 9  
006c			KEY_DOWN: equ 10  
006c			KEY_LEFT: equ 11  
006c			KEY_RIGHT: equ 12  
006c			KEY_CR:   equ 13  
006c			KEY_HOME: equ 14  
006c			KEY_END: equ 15  
006c			  
006c			KEY_F1: equ 16  
006c			KEY_F2: equ 17  
006c			KEY_F3: equ 18  
006c			KEY_F4: equ 19  
006c			  
006c			KEY_F5: equ 20  
006c			KEY_F6: equ 21  
006c			KEY_F7: equ 22  
006c			KEY_F8: equ 23  
006c			  
006c			KEY_F9: equ 24  
006c			KEY_F10: equ 25  
006c			KEY_F11: equ 26  
006c			KEY_F12: equ 27  
006c			  
006c			;if DEBUG_KEY  
006c			;	KEY_MATRIX_NO_PRESS: equ '.'  
006c			;	KEY_SHIFT:   equ '.'  
006c			;	KEY_SYMBOLSHIFT:  equ '.'  
006c			;else  
006c				KEY_SHIFT:   equ '~'  
006c				KEY_SYMBOLSHIFT:  equ '~'  
006c				KEY_MATRIX_NO_PRESS: equ '~'  
006c			;endi  
006c			  
006c			  
006c			  
006c			  
006c			; Macro to make adding debug marks easier  
006c			  
006c			DMARK: macro str  
006c				push af  
006c				ld a, (.dmark)  
006c				ld (debug_mark),a  
006c				ld a, (.dmark+1)  
006c				ld (debug_mark+1),a  
006c				ld a, (.dmark+2)  
006c				ld (debug_mark+2),a  
006c				jr .pastdmark  
006c			.dmark: db str  
006c			.pastdmark: pop af  
006c			  
006c			endm  
006c			  
006c			  
006c			; macro to detect for stack imbalances  
006c			  
006c			include "stackimbal.asm"  
006c			; Macro and code to detect stock imbalances 
006c			 
006c			SPPUSH: equ 0 
006c			 
006c			; Add a stack frame which can be checked before return 
006c			 
006c			STACKFRAME: macro onoff frame1 frame2 
006c			 
006c				if DEBUG_STACK_IMB 
006c					if onoff 
006c						; save current SP 
006c						exx 
006c			 
006c						ld de, frame1 
006c						ld a, d 
006c						ld hl, curframe 
006c						call hexout 
006c						ld a, e 
006c						ld hl, curframe+2 
006c						call hexout 
006c			  
006c						ld hl, frame1 
006c						push hl 
006c						ld hl, frame2 
006c						push hl 
006c						exx 
006c					endif 
006c					 
006c				endif 
006c			endm 
006c			 
006c			STACKFRAMECHK: macro onoff frame1 frame2 
006c			 
006c					 
006c				if DEBUG_STACK_IMB 
006c					if onoff 
006c						exx 
006c						; check stack frame SP 
006c			 
006c						ld hl, frame2 
006c						pop de   ; frame2 
006c			 
006c						call cmp16 
006c						jr nz, .spnosame 
006c						 
006c			 
006c						ld hl, frame1 
006c						pop de   ; frame1 
006c			 
006c						call cmp16 
006c						jr z, .spfrsame 
006c			 
006c						.spnosame: call showsperror 
006c			 
006c						.spfrsame: nop 
006c			 
006c						exx 
006c					endif 
006c					 
006c				endif 
006c			 
006c			 
006c			endm 
006c			 
006c			 
006c			; for a sub routine, wrap SP collection and comparisons 
006c			 
006c			; Usage: 
006c			; 
006c			; SAVESP ON/OFF 0-STACK_IMB_STORE/4 
006c			; CHECKSP ON/OFF 0-STACK_IMB_STORE/4 
006c			 
006c			SAVESP: macro onoff storeword 
006c			 
006c				if DEBUG_STACK_IMB 
006c					if onoff 
006c						; save current SP 
006c			 
006c						ld (store_sp+(storeword*4)), sp 
006c			 
006c					endif 
006c					 
006c				endif 
006c			 
006c			endm 
006c			 
006c			CHECKSP: macro onoff storeword 
006c			 
006c				if DEBUG_STACK_IMB 
006c					if onoff 
006c			 
006c						; save SP after last save 
006c				 
006c						ld (store_sp+(storeword*4)+2), sp 
006c			 
006c						push hl 
006c						ld hl, store_sp+(storeword*4) 
006c						call check_stack_sp  
006c						pop hl 
006c			 
006c			 
006c					endif 
006c					 
006c				endif 
006c			 
006c			endm 
006c			 
006c			if DEBUG_STACK_IMB 
006c			 
006c			check_stack_sp: 
006c					push de 
006c			 
006c					ld e, (hl) 
006c					inc hl 
006c					ld d, (hl) 
006c					inc hl 
006c			 
006c					push de 
006c			 
006c			 
006c					ld e, (hl) 
006c					inc hl 
006c					ld d, (hl) 
006c					inc hl 
006c			 
006c					pop hl 
006c			 
006c			 
006c					; check to see if the same 
006c			 
006c					call cmp16 
006c					jr z, .spsame 
006c			 
006c					; not same 
006c			 
006c					call showsperror 
006c			.spsame: 
006c			 
006c					pop de 
006c			 
006c					ret 
006c			 
006c			.sperr:  db "Stack imbalance",0 
006c			 
006c			 
006c			showsperror: 
006c			 
006c			 
006c				push hl 
006c				push af 
006c				push de 
006c				call clear_display 
006c				ld de, .sperr 
006c				ld a,0 
006c			;	ld de,os_word_scratch 
006c				call str_at_display 
006c				ld a, display_row_1+17 
006c				ld de, debug_mark 
006c				call str_at_display 
006c				ld a, 0 
006c				ld (curframe+4),a 
006c				ld hl, curframe 
006c				ld de, os_word_scratch 
006c				ld a, display_row_4 
006c				call str_at_display 
006c				call update_display 
006c				;call break_point_state 
006c				call cin_wait 
006c			 
006c			;	ld a, ' ' 
006c			;	ld (os_view_disable), a 
006c				call bp_on 
006c				pop de	 
006c				pop af 
006c				pop hl 
006c				CALLMONITOR 
006c				ret 
006c			 
006c			endif 
006c			 
006c			 
006c			 
006c			; eof 
# End of file stackimbal.asm
006c			  
006c			;TODO macro to calc col and row offset into screen  
006c			  
006c			  
006c			  
006c			hardware_init:  
006c			  
006c				  
006c			  
006c					;ld a, 0  
006c					;ld (hardware_diag), a  
006c			  
006c					; clear all the buffers  
006c			  
006c 21 45 fc				ld hl, display_fb1  
006f 22 01 fb				ld (display_fb_active), hl  
0072			  
0072 cd aa 0d				call clear_display  
0075			  
0075 21 03 fb				ld hl, display_fb2  
0078 22 01 fb				ld (display_fb_active), hl  
007b			  
007b cd aa 0d				call clear_display  
007e			  
007e					; init primary frame buffer area  
007e 21 e6 fc				ld hl, display_fb0  
0081 22 01 fb				ld (display_fb_active), hl  
0084			  
0084 cd aa 0d				call clear_display  
0087			  
0087			  
0087 cd c0 71				call lcd_init		; lcd hardware first as some screen functions called during key_init e.g. cursor shapes  
008a			  
008a cd 57 74			call key_init  
008d cd 56 02			call storage_init  
0090			  
0090				; setup malloc functions  
0090			  
0090				if MALLOC_1  
0090 cd 95 13				call  heap_init  
0093				endif  
0093				if MALLOC_4  
0093					call  heap_init  
0093				endif  
0093			  
0093				; init sound hardware if present  
0093			  
0093				if SOUND_ENABLE  
0093					call sound_init  
0093				endif  
0093			  
0093				; lcd test sequence  
0093					  
0093 cd cd 0d			call update_display  
0096 cd ed 0c			call delay1s  
0099 3e 2b			ld a,'+'  
009b cd af 0d			call fill_display  
009e cd cd 0d			call update_display  
00a1 cd ed 0c			call delay1s  
00a4 3e 2a			ld a,'*'  
00a6 cd af 0d			call fill_display  
00a9 cd cd 0d			call update_display  
00ac cd ed 0c			call delay1s  
00af 3e 2d			ld a,'-'  
00b1 cd af 0d			call fill_display  
00b4 cd cd 0d			call update_display  
00b7 cd ed 0c			call delay1s  
00ba			  
00ba			; boot splash screen  
00ba			if display_cols == 20	  
00ba			        ld a, display_row_1    
00ba			else  
00ba 3e 0a		        ld a, display_row_1 +10   
00bc			endif  
00bc 11 24 1b			ld de, prom_bootmsg  
00bf cd bd 0d			call str_at_display  
00c2 cd cd 0d			call update_display  
00c5			  
00c5			  
00c5 cd ed 0c			call delay1s  
00c8 cd ed 0c			call delay1s  
00cb			if display_cols == 20	  
00cb			            LD   A, display_row_3+2  
00cb			else  
00cb 3e 5c		            LD   A, display_row_3+12  
00cd			endif  
00cd 11 39 1b			ld de, prom_bootmsg1  
00d0 cd bd 0d			call str_at_display  
00d3			; display debug level  
00d3 3e 78		            LD   A, display_row_4  
00d5 11 1b 00			ld de, debuglevel  
00d8 cd bd 0d			call str_at_display  
00db			  
00db cd cd 0d			call update_display  
00de cd ed 0c			call delay1s  
00e1 cd ed 0c			call delay1s  
00e4			  
00e4			;	ld a, display_row_4+3  
00e4			;	ld de, bootmsg2  
00e4			;	call str_at_display  
00e4			;	call update_display  
00e4			;	call delay1s  
00e4			;	call delay1s  
00e4			  
00e4			; debug mark setup  
00e4			  
00e4 3e 5f		ld a, '_'  
00e6 32 a0 fd		ld (debug_mark),a  
00e9 32 a1 fd		ld (debug_mark+1),a  
00ec 32 a2 fd		ld (debug_mark+2),a  
00ef 3e 00		ld a,0  
00f1 32 a3 fd		ld (debug_mark+3),a  
00f4 32 a4 fd		ld (debug_umark),a  
00f7			  
00f7 c9					ret  
00f8			  
00f8			  
00f8			;bootmsg2:	db "Firmware v0.1",0  
00f8			  
00f8			; a 4x20 lcd  
00f8			; cout for display, low level positioning and writing functions (TODO) for hardware abstraction  
00f8			  
00f8			;if display_cols == 20  
00f8			;	include "firmware_lcd_4x20.asm"  
00f8			;endif  
00f8			  
00f8			;if display_cols == 40  
00f8			;	include "firmware_lcd_4x40.asm"  
00f8			;endif  
00f8			  
00f8			;  
00f8			; TODO use the low spare two pins on port a of display pio to bit bang a serial out video display to an esp  
00f8			; TODO abstract the bit bang video out interface for dual display  
00f8			; TODO wire video out to tx pin on rc2014 bus  
00f8			  
00f8			; must supply cin, and cin_wait for low level hardware abstraction   
00f8			; moved text_input entry points to here and leave the firmware hardware modules as abstraction layer  
00f8			; test scancode  
00f8			  
00f8			;;;;;  
00f8			;;;  
00f8			; Moved out to mini and maxi versions  
00f8			;  
00f8			; include "firmware_key_4x4.asm"  
00f8			; using existing 4 wire x 4 resistor array for input  
00f8			;include "firmware_key_4x10.asm"  
00f8			; need to mod the board for 5 rows due to resistor array  
00f8			;include "firmware_key_5x10.asm"  
00f8			  
00f8			; storage hardware interface  
00f8			  
00f8			; use microchip serial eeprom for storage  
00f8			  
00f8			  
00f8			if STORAGE_SE  
00f8				include "firmware_spi.asm"  
00f8			; my spi protocol (used by storage) 
00f8			 
00f8			; SPI pins 
00f8			 
00f8			SPI_DI: equ 7       ; chip pin 5 - port a7   pin pin 7 
00f8			SPI_DO: equ 6      ; chip pin 2 - port a6   pin 8 
00f8			SPI_SCLK: equ 5      ; chip pin 6 - port a5  - pin 9 
00f8			 
00f8			; chip pin 3 (WP), 7 (HOLD) and 8 (VCC) +5v 
00f8			; chip pin 4 gnd 
00f8			 
00f8			 
00f8			SPI_CE0: equ 0      ; chip pin 1 - port a3 - pin 15 
00f8			SPI_CE1: equ 1      ;    port a1 pin 14  
00f8			SPI_CE2: equ 2      ;    port a2 pin pin 13 
00f8			SPI_CE3: equ 3      ; port    a3 pin pin 12 
00f8			SPI_CE4: equ 4      ; port a4     pin 10 
00f8			 
00f8			; active low AND masks 
00f8			 
00f8			;SPI_CE0_MASK: equ    255-1 
00f8			;SPI_CE1_MASK: equ   255-2 
00f8			;SPI_CE2_MASK: equ   255-4 
00f8			;SPI_CE3_MASK: equ   255-8 
00f8			;SPI_CE4_MASK: equ   255-16 
00f8			SPI_CE_HIGH:  equ 255 
00f8			 
00f8			 
00f8			 
00f8			;  Perform SCLK wait pulse 
00f8			 
00f8			spi_clk: 
00f8 f5				push af 
00f9 3a 99 f9			ld a, (spi_clktime) 
00fc fe 00			cp 0 
00fe 28 03			jr z, .scskip 
0100 cd d2 0c			call aDelayInMS 
0103			.scskip: 
0103 f1				pop af 
0104 c9				ret 
0105			 
0105			 
0105			 
0105			; TODO store port id for spi device ie dev c 
0105			; TODO store pin for SO 
0105			; TODO store pin for SI 
0105			; TODO store pin for SCLK 
0105			 
0105			; 
0105			 
0105			; ensure that spi bus is in a stable state with default pins  
0105			 
0105			se_stable_spi:   
0105			 
0105				 ; set DI high, CE high , SCLK low 
0105				;ld a, SPI_DI | SPI_CE0 
0105 3e 07			ld a, SPI_DI  
0107 cd 11 02			call spi_ce_high 
010a d3 80			 out (storage_adata),a 
010c 32 96 f9			ld (spi_portbyte),a 
010f			 
010f				if DEBUG_SPI 
010f					push hl 
010f					ld l, a 
010f					DMARK "SPI" 
010f					CALLMONITOR 
010f					pop hl 
010f				endif 
010f c9				ret 
0110			 
0110			; byte to send in a 
0110			 
0110			spi_send_byte: 
0110				; save byte to send for bit mask shift out 
0110 4f			        ld c,a 
0111 3a 96 f9			ld a,(spi_portbyte) 
0114				  
0114				; clock out	each bit of the byte msb first 
0114			 
0114 06 08			ld b, 8 
0116			.ssb1: 
0116				; clear so bit  
0116 cb bf			res SPI_DI, a 
0118 cb 11			rl c 
011a				; if bit 7 is set then carry is set 
011a 30 02			jr nc, .ssb2 
011c cb ff			set SPI_DI,a 
011e			.ssb2:  ; output bit to ensure it is stable 
011e d3 80			out (storage_adata),a 
0120 00				nop 
0121				; clock bit high 
0121 cb ef			set SPI_SCLK,a 
0123 d3 80			out (storage_adata),a 
0125 00				nop 
0126 cd f8 00			call spi_clk 
0129				; then low 
0129 cb af			res SPI_SCLK,a 
012b d3 80			out (storage_adata),a 
012d 00				nop 
012e cd f8 00			call spi_clk 
0131 10 e3			djnz .ssb1 
0133			 
0133 32 96 f9			ld (spi_portbyte),a 
0136 c9				ret 
0137			 
0137			; TODO low level get byte into A on spi 
0137			 
0137			spi_read_byte:  
0137			 
0137				; save byte to send for bit mask shift out 
0137 0e 00		    ld c,0 
0139 3a 96 f9			ld a,(spi_portbyte) 
013c				  
013c				; clock out	each bit of the byte msb first 
013c			 
013c			 
013c				; clock bit high 
013c cb ef			set SPI_SCLK,a 
013e d3 80			out (storage_adata),a 
0140 00				nop 
0141 cd f8 00			call spi_clk 
0144			 
0144			    ; read DO  
0144			 
0144 cb f9		    set 7,c 
0146 db 80			in a,(storage_adata) 
0148 cb 77		    bit SPI_DO,a 
014a 20 02		    jr nz, .b7 
014c cb b9		    res 7,c 
014e			.b7: 
014e				; then low 
014e cb af			res SPI_SCLK,a 
0150 d3 80			out (storage_adata),a 
0152 00				nop 
0153 cd f8 00			call spi_clk 
0156			     
0156			 
0156				; clock bit high 
0156 cb ef			set SPI_SCLK,a 
0158 d3 80			out (storage_adata),a 
015a 00				nop 
015b cd f8 00			call spi_clk 
015e			 
015e			    ; read DO  
015e			 
015e cb f1		    set 6,c 
0160 db 80			in a,(storage_adata) 
0162 cb 77		    bit SPI_DO,a 
0164 20 02		    jr nz, .b6 
0166 cb b1		    res 6,c 
0168			.b6: 
0168				; then low 
0168 cb af			res SPI_SCLK,a 
016a d3 80			out (storage_adata),a 
016c 00				nop 
016d cd f8 00			call spi_clk 
0170			 
0170				; clock bit high 
0170 cb ef			set SPI_SCLK,a 
0172 d3 80			out (storage_adata),a 
0174 00				nop 
0175 cd f8 00			call spi_clk 
0178			 
0178			 
0178			    ; read DO  
0178			 
0178 cb e9		    set 5,c 
017a db 80			in a,(storage_adata) 
017c cb 77		    bit SPI_DO,a 
017e 20 02		    jr nz, .b5 
0180 cb a9		    res 5,c 
0182			.b5: 
0182				; then low 
0182 cb af			res SPI_SCLK,a 
0184 d3 80			out (storage_adata),a 
0186 00				nop 
0187 cd f8 00			call spi_clk 
018a				; clock bit high 
018a cb ef			set SPI_SCLK,a 
018c d3 80			out (storage_adata),a 
018e 00				nop 
018f cd f8 00			call spi_clk 
0192			 
0192			    ; read DO  
0192			 
0192 cb e1		    set 4,c 
0194 db 80			in a,(storage_adata) 
0196 cb 77		    bit SPI_DO,a 
0198 20 02		    jr nz, .b4 
019a cb a1		    res 4,c 
019c			.b4: 
019c				; then low 
019c cb af			res SPI_SCLK,a 
019e d3 80			out (storage_adata),a 
01a0 00				nop 
01a1 cd f8 00			call spi_clk 
01a4				; clock bit high 
01a4 cb ef			set SPI_SCLK,a 
01a6 d3 80			out (storage_adata),a 
01a8 00				nop 
01a9 cd f8 00			call spi_clk 
01ac			 
01ac			    ; read DO  
01ac			 
01ac cb d9		    set 3,c 
01ae db 80			in a,(storage_adata) 
01b0 cb 77		    bit SPI_DO,a 
01b2 20 02		    jr nz, .b3 
01b4 cb 99		    res 3,c 
01b6			.b3: 
01b6				; then low 
01b6 cb af			res SPI_SCLK,a 
01b8 d3 80			out (storage_adata),a 
01ba 00				nop 
01bb cd f8 00			call spi_clk 
01be				; clock bit high 
01be cb ef			set SPI_SCLK,a 
01c0 d3 80			out (storage_adata),a 
01c2 00				nop 
01c3 cd f8 00			call spi_clk 
01c6			 
01c6			    ; read DO  
01c6			 
01c6 cb d1		    set 2,c 
01c8 db 80			in a,(storage_adata) 
01ca cb 77		    bit SPI_DO,a 
01cc 20 02		    jr nz, .b2 
01ce cb 91		    res 2,c 
01d0			.b2: 
01d0				; then low 
01d0 cb af			res SPI_SCLK,a 
01d2 d3 80			out (storage_adata),a 
01d4 00				nop 
01d5 cd f8 00			call spi_clk 
01d8				; clock bit high 
01d8 cb ef			set SPI_SCLK,a 
01da d3 80			out (storage_adata),a 
01dc 00				nop 
01dd cd f8 00			call spi_clk 
01e0			 
01e0			    ; read DO  
01e0			 
01e0 cb c9		    set 1,c 
01e2 db 80			in a,(storage_adata) 
01e4 cb 77		    bit SPI_DO,a 
01e6 20 02		    jr nz, .b1 
01e8 cb 89		    res 1,c 
01ea			.b1: 
01ea				; then low 
01ea cb af			res SPI_SCLK,a 
01ec d3 80			out (storage_adata),a 
01ee 00				nop 
01ef cd f8 00			call spi_clk 
01f2				; clock bit high 
01f2 cb ef			set SPI_SCLK,a 
01f4 d3 80			out (storage_adata),a 
01f6 00				nop 
01f7 cd f8 00			call spi_clk 
01fa			 
01fa			    ; read DO  
01fa			 
01fa cb c1		    set 0,c 
01fc db 80			in a,(storage_adata) 
01fe cb 77		    bit SPI_DO,a 
0200 20 02		    jr nz, .b0 
0202 cb 81		    res 0,c 
0204			.b0: 
0204				; then low 
0204 cb af			res SPI_SCLK,a 
0206 d3 80			out (storage_adata),a 
0208 00				nop 
0209 cd f8 00			call spi_clk 
020c			 
020c			 
020c 32 96 f9			ld (spi_portbyte),a 
020f			 
020f			    ; return byte 
020f 79			    ld a,c 
0210			 
0210			 
0210 c9				ret 
0211			 
0211			 
0211			 
0211			spi_ce_high: 
0211			 
0211				if DEBUG_SPI_HARD_CE0 
0211			       set SPI_CE0,a           ; TODO pass the ce bank bit mask 
0211					ret 
0211			 
0211				endif 
0211			 
0211			 
0211 f5				push af 
0212			 
0212				; send direct ce to port b 
0212 3e ff			ld a, 255 
0214 d3 81			out (storage_bdata), a 
0216			 
0216 f1				pop af 
0217			 
0217				; for port a that shares with spi lines AND the mask 
0217			  
0217				if DEBUG_SPI 
0217					push hl 
0217					ld h, a 
0217				endif 
0217			;	ld c, SPI_CE_HIGH 
0217			;	and c 
0217 cb c7			set SPI_CE0, a 
0219 cb cf			set SPI_CE1, a 
021b cb d7			set SPI_CE2, a 
021d cb df			set SPI_CE3, a 
021f cb e7			set SPI_CE4, a 
0221			 
0221				if DEBUG_SPI 
0221					ld l, a 
0221					DMARK "CEh" 
0221					CALLMONITOR 
0221					pop hl 
0221				endif 
0221 c9				ret 
0222			 
0222			 
0222			spi_ce_low: 
0222			 
0222				if DEBUG_SPI_HARD_CE0 
0222			       res SPI_CE0,a           ; TODO pass the ce bank bit mask 
0222					ret 
0222			 
0222				endif 
0222			 
0222 c5				push bc 
0223 f5				push af 
0224			 
0224				; send direct ce to port b 
0224 3a 98 f9			ld a, (spi_cartdev) 
0227 d3 81			out (storage_bdata), a 
0229			 
0229			 
0229			 
0229				; for port a that shares with spi lines AND the mask 
0229			 
0229 3a 95 f9			ld a, (spi_device)  
022c 4f				ld c, a 
022d			 
022d f1				pop af 
022e			 
022e				; detect CEx 
022e			 
022e				if DEBUG_SPI 
022e					push hl 
022e					ld h, a 
022e				endif 
022e			 
022e cb 41			bit SPI_CE0, c 
0230 20 04			jr nz, .cel1 
0232 cb 87			res SPI_CE0, a 
0234 18 1e			jr .celn 
0236			.cel1: 
0236 cb 49			bit SPI_CE1, c 
0238 20 04			jr nz, .cel2 
023a cb 8f			res SPI_CE1, a 
023c 18 16			jr .celn 
023e			.cel2: 
023e cb 51			bit SPI_CE2, c 
0240 20 04			jr nz, .cel3 
0242 cb 97			res SPI_CE2, a 
0244 18 0e			jr .celn 
0246			.cel3: 
0246 cb 59			bit SPI_CE3, c 
0248 20 04			jr nz, .cel4 
024a cb 9f			res SPI_CE3, a 
024c 18 06			jr .celn 
024e			.cel4: 
024e cb 61			bit SPI_CE4, c 
0250 20 02			jr nz, .celn 
0252 cb a7			res SPI_CE4, a 
0254			.celn: 
0254			 
0254			 
0254			 
0254			;	add c 
0254			 
0254				if DEBUG_SPI 
0254					ld l, a 
0254					DMARK "CEl" 
0254					CALLMONITOR 
0254					pop hl 
0254				endif 
0254 c1				pop bc 
0255 c9				ret 
0256			 
0256			 
0256			 
0256			; eof 
0256			 
0256			 
0256			 
0256			 
0256			 
# End of file firmware_spi.asm
0256				include "firmware_seeprom.asm"  
0256			; 
0256			; persisent storage interface via microchip serial eeprom 
0256			 
0256			; port a pio 2 
0256			; pa 7 - si 
0256			; pa 6 - sclk  
0256			; pa 5 - so 
0256			; pa 4 - cs 
0256			; pa 3 - cs 
0256			; pa 2 - cs 
0256			; pa 1 - cs 
0256			; pa 0 - cs 
0256			; 
0256			; TODO get block 
0256			; TODO save block 
0256			; TODO load file 
0256			; TODO save file 
0256			; TODO get dir  
0256			 
0256			;  
0256			storage_adata: equ Device_C    ; device c port a - onboard storage 
0256			storage_actl: equ Device_C+2     ; device c port a 
0256			storage_bdata: equ Device_C+1    ; device c port b - ext storage cart 
0256			storage_bctl: equ Device_C+3     ; device c port b 
0256			 
0256			 
0256			; TODO move these to hardware driver file 
0256			 
0256			;STORE_BLOCK_PHY:   equ 64    ; physical block size on storage   64byte on 256k eeprom 
0256			;STORE_DEVICE_MAXBLOCKS:  equ  512 ; how many blocks are there on this storage device 
0256			; storage bank file system format 
0256			; 
0256			; first page of bank: 
0256			; 	addr 0 - status check 
0256			;       addr 1 - write protect flag 
0256			;       addr 2 - zero if all data is held on this device. >0 - next device number (not used right now) 
0256			;       addr 3 - last file id (to save on scanning for spare file id). or could have bit mask of file ids in use????  
0256			;         TODO see if scanning whole of for available next file id is fast enough 
0256			;	addr 4 > zero term string of bank label 
0256			; 
0256			;        
0256			;  
0256			; first page of any file: 
0256			;      byte 0 - file id  
0256			;      byte 1-17 - fixed file name  
0256			;      byte 18-end of page - extra meta data tba (date? description? keywords?) 
0256			; 
0256			; other pages of any file: 
0256			;      byte 0 - file id 
0256			;      byte 1> - file data 
0256			; 
0256			; TODO depending on how long it takes to load a file in if scanning the whole bank for the file id, could speed it up by having last file page flag??? high bit? that would max 127 files 
0256			;  
0256			; TODO need a bank format which places a 0 in each of the first byte of every page and updates the meta in page 0 
0256			 
0256			 
0256			;storage_so_bit: 5 
0256			;storage_si_bit: 7 
0256			;storage_sclk_bit: 6 
0256			  
0256			 
0256			; init storage pio 
0256			 
0256			storage_init: 
0256			 
0256			 
0256					; set default SPI clk pulse time as disabled 
0256			 
0256 3e 00				ld a, 0 
0258 32 99 f9				ld (spi_clktime), a 
025b			 
025b					; init hardware 
025b			 
025b 3e cf		            LD   A, 11001111b 
025d d3 82		            OUT  (storage_actl), A  ;Port A = PIO 'control' mode 
025f 3e 00		            LD   A, 00000000b 
0261 cb f7			set SPI_DO,a 
0263			;            LD   A, SPI_DO      ; only one input line  the rest are outputs 
0263 d3 82		            OUT  (storage_actl),A   ;Port A = all lines are outputs 
0265			 
0265 3e cf		            LD   A, 11001111b 
0267 d3 83		            OUT  (storage_bctl), A  ;Port A = PIO 'control' mode 
0269 3e 00		            LD   A, 00000000b 
026b d3 83		            OUT  (storage_bctl),A   ;Port A = all lines are outputs 
026d			 
026d				; set all external spi devices off  
026d 3e ff			ld a, 255 
026f 32 95 f9			ld (spi_device), a 
0272 32 98 f9			ld (spi_cartdev), a 
0275			 
0275					; ensure the spi bus is in a default stable state 
0275 cd 05 01				call se_stable_spi 
0278			 
0278			; TODO scan spi bus and gather which storage banks are present 
0278			 
0278			; populate store_bank_active  
0278			; for each ce line activate and attempt to write first byte of bank and read back 
0278			; if zero is returned then bank is empty 
0278			;   
0278			; 
0278			 
0278					; init file extent cache to save on slow reads 
0278			 
0278			;	ld hl, store_filecache 
0278			;	ld de, 0 
0278			;	ld hl,(de)	 
0278			 
0278			 
0278 c9			    ret 
0279			 
0279			store_read_ins: equ 000000011b   ; Read data from memory array beginning at selected address 
0279			store_write_ins: equ 000000010b  ;  Write data to memory array beginning at selected address 
0279			store_wren_ins: equ 000000110b   ;  Set the write enable latch (enable write operations) 
0279			 
0279			; INSTRUCTION SET 
0279			; READ 0000 0011 Read data from memory array beginning at selected address 
0279			; WRITE 0000 0010 Write data to memory array beginning at selected address 
0279			; WREN 0000 0110 Set the write enable latch (enable write operations) 
0279			; WRDI 0000 0100 Reset the write enable latch (disable write operations) 
0279			; RDSR 0000 0101 Read STATUS register 
0279			; WRSR 0000 0001 Write STATUS register 
0279			; PE 0100 0010 Page Erase – erase one page in memory array 
0279			; SE 1101 1000 Sector Erase – erase one sector in memory array 
0279			; CE 1100 0111 Chip Erase – erase all sectors in memory array 
0279			; RDID 1010 1011 Release from Deep power-down and read electronic signature 
0279			 
0279			; TODO send byte steam for page without setting the address for every single byte 
0279			; TODO read byte  
0279			 
0279			; byte in a 
0279			; address in hl  
0279			se_writebyte: 
0279			        
0279			    ;   ld c, a 
0279 f5			        push af 
027a e5			        push hl 
027b			 
027b			    ; initi write mode 
027b			    ; 
027b			    ;CS low 
027b			 
027b 3a 96 f9		       ld a,(spi_portbyte) 
027e cd 22 02			call spi_ce_low 
0281			       ;res SPI_CE0,a           ; TODO pass the ce bank bit mask 
0281 d3 80		       out (storage_adata),a 
0283 32 96 f9		       ld (spi_portbyte), a 
0286			 
0286			    ;clock out wren instruction 
0286			 
0286 3e 06		    ld a, store_wren_ins 
0288 cd 10 01		    call spi_send_byte  
028b			 
028b			    ;cs high to enable write latch 
028b			 
028b 3a 96 f9		       ld a,(spi_portbyte) 
028e cd 11 02			call spi_ce_high 
0291			;       set SPI_CE0,a           ; TODO pass the ce bank bit mask 
0291 d3 80		       out (storage_adata),a 
0293 32 96 f9		       ld (spi_portbyte), a 
0296			 
0296 00				nop 
0297			    ; 
0297			    ; intial write data 
0297			    ; 
0297			    ; cs low 
0297			     
0297 3a 96 f9		       ld a,(spi_portbyte) 
029a cd 22 02			call spi_ce_low 
029d			       ;res SPI_CE0,a           ; TODO pass the ce bank bit mask 
029d d3 80		       out (storage_adata),a 
029f 32 96 f9		       ld (spi_portbyte), a 
02a2			 
02a2			    ; clock out write instruction 
02a2			     
02a2 3e 02		    ld a, store_write_ins  
02a4 cd 10 01		    call spi_send_byte  
02a7			 
02a7			    ; clock out address (depending on address size) 
02a7			     
02a7 e1			    pop hl 
02a8 7c			    ld a,h    ; address out msb first 
02a9 cd 10 01		    call spi_send_byte  
02ac 7d			    ld a,l 
02ad cd 10 01		    call spi_send_byte  
02b0			 
02b0			    ; clock out byte(s) for page 
02b0			 
02b0 f1			    pop af 
02b1 cd 10 01		    call spi_send_byte  
02b4			 
02b4			    ; end write with ce high 
02b4 3a 96 f9		       ld a,(spi_portbyte) 
02b7			;       set SPI_CE0,a           ; TODO pass the ce bank bit mask - perhaps have a call that sets it 
02b7 cd 11 02			call spi_ce_high 
02ba d3 80		       out (storage_adata),a 
02bc 32 96 f9		       ld (spi_portbyte), a 
02bf			 
02bf				; pause for internal write cycle 
02bf 3e 0a			ld a, 10 
02c1 cd d2 0c			call aDelayInMS 
02c4 c9			    ret 
02c5			 
02c5			; buffer to write in de 
02c5			; address in hl  
02c5			se_writepage: 
02c5			        
02c5			    ;   ld c, a 
02c5 d5				push de 
02c6 e5			        push hl 
02c7			 
02c7			    ; initi write mode 
02c7			    ; 
02c7			    ;CS low 
02c7			 
02c7 3a 96 f9		       ld a,(spi_portbyte) 
02ca cd 22 02			call spi_ce_low 
02cd			       ;res SPI_CE0,a           ; TODO pass the ce bank bit mask 
02cd d3 80		       out (storage_adata),a 
02cf 32 96 f9		       ld (spi_portbyte), a 
02d2			 
02d2			    ;clock out wren instruction 
02d2			 
02d2 3e 06		    ld a, store_wren_ins 
02d4 cd 10 01		    call spi_send_byte  
02d7			 
02d7			    ;cs high to enable write latch 
02d7			 
02d7 3a 96 f9		       ld a,(spi_portbyte) 
02da cd 11 02			call spi_ce_high 
02dd			       ;set SPI_CE0,a           ; TODO pass the ce bank bit mask 
02dd d3 80		       out (storage_adata),a 
02df 32 96 f9		       ld (spi_portbyte), a 
02e2			 
02e2 00				nop 
02e3			    ; 
02e3			    ; intial write data 
02e3			    ; 
02e3			    ; cs low 
02e3			     
02e3 3a 96 f9		       ld a,(spi_portbyte) 
02e6			       ;res SPI_CE0,a           ; TODO pass the ce bank bit mask 
02e6 cd 22 02			call spi_ce_low 
02e9 d3 80		       out (storage_adata),a 
02eb 32 96 f9		       ld (spi_portbyte), a 
02ee			 
02ee			    ; clock out write instruction 
02ee			     
02ee 3e 02		    ld a, store_write_ins  
02f0 cd 10 01		    call spi_send_byte  
02f3			 
02f3			    ; clock out address (depending on address size) 
02f3			     
02f3 e1			    pop hl 
02f4 7c			    ld a,h    ; address out msb first 
02f5 cd 10 01		    call spi_send_byte  
02f8 7d			    ld a,l 
02f9 cd 10 01		    call spi_send_byte  
02fc			 
02fc			    ; clock out byte(s) for page 
02fc			 
02fc e1				pop hl 
02fd 06 40			ld b, STORE_BLOCK_PHY 
02ff			.bytewrite: 
02ff			 
02ff 7e				ld a,(hl) 
0300 e5			    push hl 
0301 c5				push bc 
0302 cd 10 01		    call spi_send_byte  
0305 c1				pop bc 
0306 e1				pop hl 
0307			 
0307			    ; end write with ce high 
0307 3a 96 f9		       ld a,(spi_portbyte) 
030a cd 11 02			call spi_ce_high 
030d			;       set SPI_CE0,a           ; TODO pass the ce bank bit mask - perhaps have a call that sets it 
030d d3 80		       out (storage_adata),a 
030f 32 96 f9		       ld (spi_portbyte), a 
0312			 
0312 23				inc hl 
0313 10 ea			djnz .bytewrite 
0315			 
0315				; pause for internal write cycle 
0315 3e 64			ld a, 100 
0317 cd d2 0c			call aDelayInMS 
031a c9			    ret 
031b			; returns byte in a 
031b			; address in hl  
031b			se_readbyte: 
031b d5				push de 
031c c5				push bc 
031d			 
031d			    ;   ld c, a 
031d e5			        push hl 
031e			 
031e			    ; initi write mode 
031e			    ; 
031e			    ;CS low 
031e			 
031e 3a 96 f9		       ld a,(spi_portbyte) 
0321 cd 22 02			call spi_ce_low 
0324			       ;res SPI_CE0,a           ; TODO pass the ce bank bit mask 
0324 d3 80		       out (storage_adata),a 
0326 32 96 f9		       ld (spi_portbyte), a 
0329			 
0329			    ;clock out wren instruction 
0329			 
0329 3e 03		    ld a, store_read_ins 
032b cd 10 01		    call spi_send_byte  
032e			 
032e			 
032e			    ; clock out address (depending on address size) 
032e			     
032e e1			    pop hl 
032f 7c			    ld a,h    ; address out msb first 
0330 cd 10 01		    call spi_send_byte  
0333 7d			    ld a,l 
0334 cd 10 01		    call spi_send_byte  
0337			 
0337			    ; clock in byte(s) for page 
0337			 
0337 cd 37 01		    call spi_read_byte  
033a f5				push af 
033b			 
033b			    ; end write with ce high 
033b 3a 96 f9		       ld a,(spi_portbyte) 
033e			;       set SPI_CE0,a           ; TODO pass the ce bank bit mask - perhaps have a call that sets it 
033e cd 11 02			call spi_ce_high 
0341 d3 80		       out (storage_adata),a 
0343 32 96 f9		       ld (spi_portbyte), a 
0346			 
0346 f1				pop af 
0347			 
0347 c1				pop bc 
0348 d1				pop de 
0349			 
0349 c9			    ret 
034a			 
034a			if DEBUG_STORESE 
034a			 
034a			storageput:  
034a			 
034a			; get address (so long as it is in first page due to reload otherwise use prom programmer to see if) 
034a			 
034a 21 f8 f0			ld hl,scratch+2 
034d cd 9d 12			call get_word_hl 
0350			 
0350				; stuff it here for the moment as it will be overwritten later anyway 
0350			 
0350 22 19 f4			ld (os_cur_ptr),hl	 
0353			 
0353			 
0353			; get pointer to start of string 
0353			 
0353 21 fd f0			ld hl, scratch+7 
0356			 
0356			; loop writing char of string to eeprom 
0356			 
0356 7e			.writestr:	ld a,(hl) 
0357 fe 00				cp 0 
0359 28 12				jr z, .wsdone		; done writing 
035b e5					push hl 
035c 2a 19 f4				ld hl,(os_cur_ptr) 
035f cd 79 02				call se_writebyte 
0362			 
0362 2a 19 f4				ld hl,(os_cur_ptr)	 ; save next eeprom address 
0365 23					inc hl 
0366 22 19 f4				ld (os_cur_ptr),hl 
0369			 
0369					; restore string pointer and get next char 
0369			 
0369 e1					pop hl 
036a 23					inc hl 
036b 18 e9				jr .writestr 
036d			 
036d			 
036d			 
036d			.wsdone: 
036d			 
036d			 
036d			; when done load first page into a buffer  
036d			 
036d 21 00 80				ld hl,08000h		; start in ram 
0370 22 19 f4				ld (os_cur_ptr),hl 
0373 21 00 00				ld hl, 0		 ; start of page 
0376 22 1e f1				ld (scratch+40),hl	; hang on to it 
0379			 
0379 06 80				ld b, 128		; actually get more then one page 
037b c5			.wsload:	push bc 
037c 2a 1e f1				ld hl,(scratch+40) 
037f e5					push hl 
0380 cd 1b 03				call se_readbyte 
0383			 
0383					; a now as the byte 
0383			 
0383 2a 19 f4				ld hl,(os_cur_ptr) 
0386 77					ld (hl),a 
0387					; inc next buffer area 
0387 23					inc hl 
0388 22 19 f4				ld (os_cur_ptr),hl 
038b			 
038b					; get eeprom position, inc and save for next round 
038b e1					pop hl		 
038c 23					inc hl 
038d 22 1e f1				ld (scratch+40),hl 
0390 c1					pop bc 
0391 10 e8				djnz .wsload 
0393			 
0393			; set 'd' pointer to start of buffer 
0393			 
0393 21 00 80				ld hl,08000h 
0396 22 19 f4				ld (os_cur_ptr),hl 
0399			 
0399			 
0399 c9			ret 
039a			 
039a			 
039a c9			storageread: ret 
039b			 
039b			 
039b			 
039b			 
039b			 
039b			 
039b			endif 
039b			 
039b			 
039b			 
# End of file firmware_seeprom.asm
039b			else  
039b			   ; create some stubs for the labels  
039b			se_readbyte: ret  
039b			se_writebyte: ret  
039b			storage_init: ret  
039b			  
039b			endif  
039b			  
039b			; use cf card for storage - throwing timeout errors. Hardware or software?????  
039b			;include "firmware_cf.asm"  
039b			  
039b			; load up high level storage hardward abstractions  
039b			include "firmware_storage.asm"  
039b			 
039b			; persisent storage hardware abstraction layer  
039b			 
039b			 
039b			 
039b			; Block 0 on storage is a config state 
039b			 
039b			 
039b			 
039b			; TODO add read phy block and write phy block functions 
039b			; TODO add presence check (i.e. read write byte 0 of block 0 for eeprom) 
039b			 
039b			; Abstraction layer  
039b			 
039b			; Logocial block size is same size as physical size - using tape concept 
039b			 
039b			;STORE_BLOCK_PHY2LOG: equ (STORE_BLOCK_LOG/STORE_BLOCK_PHY)       ; How many physical blocks make up a logical block 
039b			;STORE_BLOCK_MAX: equ (STORE_BLOCK_PHY*STORE_DEVICE_MAXBLOCKS)/255    ; Max number of logical blocks on the device 
039b			 
039b			 
039b			 
039b			; Filesystem layout (Logical layout) 
039b			; 
039b			; Block 0 - Bank config  
039b			; 
039b			;      Byte - 0 file id counter 
039b			;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
039b			;      Byte - 3-20 zero terminated bank label 
039b			; 
039b			; Block 1 > File storage 
039b			; 
039b			;      Byte 0 file id    - block 0 file details 
039b			;      Byte 1 block id - block 0 is file  
039b			;            Byte 2-15 - File name 
039b			; 
039b			;       - to end of block data 
039b			; 
039b			 
039b			; Get ID for the file named in pointer held HL 
039b			; Returns ID in HL = 255 if no file found 
039b			 
039b			storage_getid: 
039b			 
039b 22 a8 f9			ld (store_tmp1), hl 
039e			 
039e				if DEBUG_STORESE 
039e					DMARK "SGI" 
039e f5				push af  
039f 3a b3 03			ld a, (.dmark)  
03a2 32 a0 fd			ld (debug_mark),a  
03a5 3a b4 03			ld a, (.dmark+1)  
03a8 32 a1 fd			ld (debug_mark+1),a  
03ab 3a b5 03			ld a, (.dmark+2)  
03ae 32 a2 fd			ld (debug_mark+2),a  
03b1 18 03			jr .pastdmark  
03b3 ..			.dmark: db "SGI"  
03b6 f1			.pastdmark: pop af  
03b7			endm  
# End of macro DMARK
03b7					CALLMONITOR 
03b7 cd aa fd			call debug_vector  
03ba				endm  
# End of macro CALLMONITOR
03ba				endif 
03ba				; get block 0 and set counter for number of files to scan 
03ba			 
03ba cd 25 05			call storage_get_block_0 
03bd			 
03bd 3a af f9			ld a, (store_page) 
03c0 47				ld b, a 
03c1			 
03c1				; get extent 0 of each file id 
03c1			 
03c1				if DEBUG_STORESE 
03c1					DMARK "SGc" 
03c1 f5				push af  
03c2 3a d6 03			ld a, (.dmark)  
03c5 32 a0 fd			ld (debug_mark),a  
03c8 3a d7 03			ld a, (.dmark+1)  
03cb 32 a1 fd			ld (debug_mark+1),a  
03ce 3a d8 03			ld a, (.dmark+2)  
03d1 32 a2 fd			ld (debug_mark+2),a  
03d4 18 03			jr .pastdmark  
03d6 ..			.dmark: db "SGc"  
03d9 f1			.pastdmark: pop af  
03da			endm  
# End of macro DMARK
03da					CALLMONITOR 
03da cd aa fd			call debug_vector  
03dd				endm  
# End of macro CALLMONITOR
03dd				endif 
03dd 60			.getloop:	ld h, b 
03de 2e 00				ld l, 0 
03e0 c5					push bc 
03e1			 
03e1 11 af f9				ld de, store_page 
03e4				if DEBUG_STORESE 
03e4					DMARK "SGr" 
03e4 f5				push af  
03e5 3a f9 03			ld a, (.dmark)  
03e8 32 a0 fd			ld (debug_mark),a  
03eb 3a fa 03			ld a, (.dmark+1)  
03ee 32 a1 fd			ld (debug_mark+1),a  
03f1 3a fb 03			ld a, (.dmark+2)  
03f4 32 a2 fd			ld (debug_mark+2),a  
03f7 18 03			jr .pastdmark  
03f9 ..			.dmark: db "SGr"  
03fc f1			.pastdmark: pop af  
03fd			endm  
# End of macro DMARK
03fd					CALLMONITOR 
03fd cd aa fd			call debug_vector  
0400				endm  
# End of macro CALLMONITOR
0400				endif 
0400 cd cd 09				call storage_read 
0403 cd 07 10				call ishlzero 
0406 28 2d				jr z, .gap 
0408					 
0408					; have a file name read. Is it one we want. 
0408			 
0408 2a a8 f9				ld hl, (store_tmp1) 
040b 11 b2 f9				ld de, store_page+3   ; file name 
040e			 
040e				if DEBUG_STORESE 
040e					DMARK "SGc" 
040e f5				push af  
040f 3a 23 04			ld a, (.dmark)  
0412 32 a0 fd			ld (debug_mark),a  
0415 3a 24 04			ld a, (.dmark+1)  
0418 32 a1 fd			ld (debug_mark+1),a  
041b 3a 25 04			ld a, (.dmark+2)  
041e 32 a2 fd			ld (debug_mark+2),a  
0421 18 03			jr .pastdmark  
0423 ..			.dmark: db "SGc"  
0426 f1			.pastdmark: pop af  
0427			endm  
# End of macro DMARK
0427					CALLMONITOR 
0427 cd aa fd			call debug_vector  
042a				endm  
# End of macro CALLMONITOR
042a				endif 
042a cd 7c 13				call strcmp 
042d 20 06				jr nz, .gap   ; not this one 
042f			 
042f c1				        pop bc 
0430			 
0430 26 00				ld h, 0 
0432 68					ld l, b 
0433 18 22				jr .getdone 
0435						 
0435			 
0435			 
0435			 
0435			.gap: 
0435				if DEBUG_STORESE 
0435					DMARK "SGg" 
0435 f5				push af  
0436 3a 4a 04			ld a, (.dmark)  
0439 32 a0 fd			ld (debug_mark),a  
043c 3a 4b 04			ld a, (.dmark+1)  
043f 32 a1 fd			ld (debug_mark+1),a  
0442 3a 4c 04			ld a, (.dmark+2)  
0445 32 a2 fd			ld (debug_mark+2),a  
0448 18 03			jr .pastdmark  
044a ..			.dmark: db "SGg"  
044d f1			.pastdmark: pop af  
044e			endm  
# End of macro DMARK
044e					CALLMONITOR 
044e cd aa fd			call debug_vector  
0451				endm  
# End of macro CALLMONITOR
0451				endif 
0451			 
0451 c1					pop bc 
0452 10 89				djnz .getloop 
0454 21 ff 00				ld hl, 255 
0457			.getdone: 
0457			 
0457				if DEBUG_STORESE 
0457					DMARK "SGe" 
0457 f5				push af  
0458 3a 6c 04			ld a, (.dmark)  
045b 32 a0 fd			ld (debug_mark),a  
045e 3a 6d 04			ld a, (.dmark+1)  
0461 32 a1 fd			ld (debug_mark+1),a  
0464 3a 6e 04			ld a, (.dmark+2)  
0467 32 a2 fd			ld (debug_mark+2),a  
046a 18 03			jr .pastdmark  
046c ..			.dmark: db "SGe"  
046f f1			.pastdmark: pop af  
0470			endm  
# End of macro DMARK
0470					CALLMONITOR 
0470 cd aa fd			call debug_vector  
0473				endm  
# End of macro CALLMONITOR
0473				endif 
0473			 
0473 c9				ret 
0474			 
0474			 
0474			 
0474			 
0474			 
0474			 
0474			 
0474			 
0474			; Read Block 
0474			; ---------- 
0474			; 
0474			; With current bank 
0474			;  
0474			; Get block number to read 
0474			; Load physical blocks starting at start block into buffer 
0474			 
0474			; de points to buffer to use 
0474			; hl holds logical block number  
0474			 
0474			storage_read_block: 
0474			 
0474				; TODO bank selection 
0474			 
0474				; for each of the physical blocks read it into the buffer 
0474 06 40			ld b, STORE_BLOCK_PHY 
0476			 
0476				if DEBUG_STORESE 
0476 d5					push de 
0477				endif 
0477				 
0477			.rl1:    
0477			 
0477				; read physical block at hl into de 
0477			        ; increment hl and de to next read position on exit 
0477			 
0477 e5				push hl 
0478 d5				push de	 
0479 c5				push bc 
047a			;	if DEBUG_STORESE 
047a			;		push af 
047a			;		ld a, 'R' 
047a			;		ld (debug_mark),a 
047a			;		pop af 
047a			;		CALLMONITOR 
047a			;	endif 
047a cd 1b 03			call se_readbyte 
047d			;	if DEBUG_STORESE 
047d			;		ld a,(spi_portbyte) 
047d			;		ld l, a 
047d			;		push af 
047d			;		ld a, '1' 
047d			;		ld (debug_mark),a 
047d			;		pop af 
047d			;		CALLMONITOR 
047d			;	endif 
047d c1				pop bc 
047e d1				pop de 
047f e1				pop hl 
0480 12				ld (de),a 
0481 23				inc hl 
0482 13				inc de 
0483			 
0483			;	if DEBUG_STORESE 
0483			;		push af 
0483			;		ld a, 'r' 
0483			;		ld (debug_mark),a 
0483			;		pop af 
0483			;		CALLMONITOR 
0483			;	endif 
0483			 
0483 10 f2			djnz .rl1 
0485			 
0485				if DEBUG_STORESE 
0485					DMARK "SRB" 
0485 f5				push af  
0486 3a 9a 04			ld a, (.dmark)  
0489 32 a0 fd			ld (debug_mark),a  
048c 3a 9b 04			ld a, (.dmark+1)  
048f 32 a1 fd			ld (debug_mark+1),a  
0492 3a 9c 04			ld a, (.dmark+2)  
0495 32 a2 fd			ld (debug_mark+2),a  
0498 18 03			jr .pastdmark  
049a ..			.dmark: db "SRB"  
049d f1			.pastdmark: pop af  
049e			endm  
# End of macro DMARK
049e d1					pop de 
049f			; 
049f			;		push af 
049f			;		ld a, 'R' 
049f			;		ld (debug_mark),a 
049f			;		pop af 
049f					CALLMONITOR 
049f cd aa fd			call debug_vector  
04a2				endm  
# End of macro CALLMONITOR
04a2				endif 
04a2 c9				ret	 
04a3				 
04a3			 
04a3			; File Size 
04a3			; --------- 
04a3			; 
04a3			;   hl file id 
04a3			; 
04a3			;  returns in hl the number of blocks 
04a3			 
04a3			storage_file_size: 
04a3 5d				ld e, l 
04a4 16 00			ld d, 0 
04a6 21 40 00			ld hl, STORE_BLOCK_PHY 
04a9					if DEBUG_FORTH_WORDS 
04a9						DMARK "SIZ" 
04a9 f5				push af  
04aa 3a be 04			ld a, (.dmark)  
04ad 32 a0 fd			ld (debug_mark),a  
04b0 3a bf 04			ld a, (.dmark+1)  
04b3 32 a1 fd			ld (debug_mark+1),a  
04b6 3a c0 04			ld a, (.dmark+2)  
04b9 32 a2 fd			ld (debug_mark+2),a  
04bc 18 03			jr .pastdmark  
04be ..			.dmark: db "SIZ"  
04c1 f1			.pastdmark: pop af  
04c2			endm  
# End of macro DMARK
04c2						CALLMONITOR 
04c2 cd aa fd			call debug_vector  
04c5				endm  
# End of macro CALLMONITOR
04c5					endif 
04c5 cd a7 07			call storage_findnextid 
04c8			 
04c8 cd 07 10			call ishlzero 
04cb			;	ld a, l 
04cb			;	add h 
04cb			;	cp 0 
04cb c8				ret z			; block not found so EOF 
04cc			 
04cc 11 af f9			ld de, store_page 
04cf cd 74 04			call storage_read_block 
04d2			 
04d2 3a b1 f9			ld a, (store_page+2)	 ; get extent count 
04d5 6f				ld l, a 
04d6 26 00			ld h, 0 
04d8 c9			 	ret 
04d9			 
04d9			 
04d9			; Write Block 
04d9			; ----------- 
04d9			; 
04d9			; With current bank 
04d9			;  
04d9			; Get block number to write 
04d9			; Write physical blocks starting at start block from buffer 
04d9			  
04d9			storage_write_block: 
04d9				; TODO bank selection 
04d9			 
04d9				; for each of the physical blocks read it into the buffer 
04d9 06 40			ld b, STORE_BLOCK_PHY 
04db			 
04db				if DEBUG_STORESE 
04db					DMARK "SWB" 
04db f5				push af  
04dc 3a f0 04			ld a, (.dmark)  
04df 32 a0 fd			ld (debug_mark),a  
04e2 3a f1 04			ld a, (.dmark+1)  
04e5 32 a1 fd			ld (debug_mark+1),a  
04e8 3a f2 04			ld a, (.dmark+2)  
04eb 32 a2 fd			ld (debug_mark+2),a  
04ee 18 03			jr .pastdmark  
04f0 ..			.dmark: db "SWB"  
04f3 f1			.pastdmark: pop af  
04f4			endm  
# End of macro DMARK
04f4			 
04f4					;push af 
04f4					;ld a, 'W' 
04f4					;ld (debug_mark),a 
04f4					;pop af 
04f4					CALLMONITOR 
04f4 cd aa fd			call debug_vector  
04f7				endm  
# End of macro CALLMONITOR
04f7				endif 
04f7			 
04f7			; might not be working 
04f7			;	call se_writepage 
04f7			 
04f7			;	ret 
04f7			; 
04f7			 
04f7			 
04f7			 
04f7			.wl1:    
04f7			 
04f7				; read physical block at hl into de 
04f7			        ; increment hl and de to next read position on exit 
04f7			 
04f7 e5				push hl 
04f8 d5				push de	 
04f9 c5				push bc 
04fa 1a				ld a,(de) 
04fb				;if DEBUG_STORESE 
04fb			;		push af 
04fb			;		ld a, 'W' 
04fb			;		ld (debug_mark),a 
04fb			;		pop af 
04fb			;		CALLMONITOR 
04fb			;	endif 
04fb cd 79 02			call se_writebyte 
04fe			;	call delay250ms 
04fe 00				nop 
04ff 00				nop 
0500 00				nop 
0501			;	if DEBUG_STORESE 
0501			;		push af 
0501			;		ld a, 'w' 
0501			;		ld (debug_mark),a 
0501			;		pop af 
0501			;		CALLMONITOR 
0501			;	endif 
0501 c1				pop bc 
0502 d1				pop de 
0503 e1				pop hl 
0504 23				inc hl 
0505 13				inc de 
0506			 
0506			 
0506 10 ef			djnz .wl1 
0508			 
0508				if DEBUG_STORESE 
0508					DMARK "SW2" 
0508 f5				push af  
0509 3a 1d 05			ld a, (.dmark)  
050c 32 a0 fd			ld (debug_mark),a  
050f 3a 1e 05			ld a, (.dmark+1)  
0512 32 a1 fd			ld (debug_mark+1),a  
0515 3a 1f 05			ld a, (.dmark+2)  
0518 32 a2 fd			ld (debug_mark+2),a  
051b 18 03			jr .pastdmark  
051d ..			.dmark: db "SW2"  
0520 f1			.pastdmark: pop af  
0521			endm  
# End of macro DMARK
0521			 
0521					;push af 
0521					;ld a, 'W' 
0521					;ld (debug_mark),a 
0521					;pop af 
0521					CALLMONITOR 
0521 cd aa fd			call debug_vector  
0524				endm  
# End of macro CALLMONITOR
0524				endif 
0524 c9				ret	 
0525			 
0525			; Init bank 
0525			; --------- 
0525			; 
0525			; With current bank 
0525			; 
0525			; Setup block 0 config 
0525			;     Set 0 file id counter 
0525			;     Set formatted byte pattern 
0525			;     Zero out bank label 
0525			;      
0525			; For every logical block write 0-1 byte as null 
0525			 
0525			storage_get_block_0: 
0525			 
0525				; TODO check presence 
0525			 
0525				; get block 0 config 
0525			 
0525 21 00 00			ld hl, 0 
0528 11 af f9			ld de, store_page 
052b cd 74 04			call storage_read_block 
052e			 
052e				if DEBUG_STORESE 
052e					DMARK "SB0" 
052e f5				push af  
052f 3a 43 05			ld a, (.dmark)  
0532 32 a0 fd			ld (debug_mark),a  
0535 3a 44 05			ld a, (.dmark+1)  
0538 32 a1 fd			ld (debug_mark+1),a  
053b 3a 45 05			ld a, (.dmark+2)  
053e 32 a2 fd			ld (debug_mark+2),a  
0541 18 03			jr .pastdmark  
0543 ..			.dmark: db "SB0"  
0546 f1			.pastdmark: pop af  
0547			endm  
# End of macro DMARK
0547 11 af f9				ld de, store_page 
054a			;		push af 
054a			;		ld a, 'i' 
054a			;		ld (debug_mark),a 
054a			;		pop af 
054a					CALLMONITOR 
054a cd aa fd			call debug_vector  
054d				endm  
# End of macro CALLMONITOR
054d				endif 
054d			 
054d				; is this area formatted? 
054d			 
054d			;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
054d 2a b0 f9			ld hl, (store_page+1) 
0550 3e 80			ld a,0x80 
0552 bd				cp l 
0553 20 22			jr nz, .ininotformatted 
0555				; do a double check 
0555 3e 27			ld a, 0x27 
0557 bc				cp h 
0558 20 1d			jr nz, .ininotformatted 
055a			 
055a				; formatted then 
055a			 
055a				if DEBUG_STORESE 
055a					DMARK "SB1" 
055a f5				push af  
055b 3a 6f 05			ld a, (.dmark)  
055e 32 a0 fd			ld (debug_mark),a  
0561 3a 70 05			ld a, (.dmark+1)  
0564 32 a1 fd			ld (debug_mark+1),a  
0567 3a 71 05			ld a, (.dmark+2)  
056a 32 a2 fd			ld (debug_mark+2),a  
056d 18 03			jr .pastdmark  
056f ..			.dmark: db "SB1"  
0572 f1			.pastdmark: pop af  
0573			endm  
# End of macro DMARK
0573					;push af 
0573					;ld a, 'I' 
0573					;ld (debug_mark),a 
0573					;pop af 
0573					CALLMONITOR 
0573 cd aa fd			call debug_vector  
0576				endm  
# End of macro CALLMONITOR
0576				endif 
0576 c9				ret 
0577			 
0577			.ininotformatted: 
0577				; bank not formatted so poke various bits to make sure 
0577			 
0577				if DEBUG_STORESE 
0577					DMARK "SB2" 
0577 f5				push af  
0578 3a 8c 05			ld a, (.dmark)  
057b 32 a0 fd			ld (debug_mark),a  
057e 3a 8d 05			ld a, (.dmark+1)  
0581 32 a1 fd			ld (debug_mark+1),a  
0584 3a 8e 05			ld a, (.dmark+2)  
0587 32 a2 fd			ld (debug_mark+2),a  
058a 18 03			jr .pastdmark  
058c ..			.dmark: db "SB2"  
058f f1			.pastdmark: pop af  
0590			endm  
# End of macro DMARK
0590					;push af 
0590					;ld a, 'f' 
0590					;ld (debug_mark),a 
0590					;pop af 
0590					CALLMONITOR 
0590 cd aa fd			call debug_vector  
0593				endm  
# End of macro CALLMONITOR
0593				endif 
0593			 
0593 cd b0 0c			call storage_clear_page 
0596			 
0596 21 af f9			ld hl, store_page 
0599 3e 00			ld a, 0 
059b				 
059b 77				ld (hl),a   ; reset file counter 
059c			 
059c 21 80 27			ld hl, 0x2780     ;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
059f 22 b0 f9		 	ld (store_page+1), hl	 
05a2			 
05a2				; set default label 
05a2			 
05a2 21 3e 06			ld hl, .defaultbanklabl 
05a5 11 b2 f9		 	ld de, store_page+3 
05a8 01 0f 00			ld bc, 15 
05ab ed b0			ldir 
05ad			 
05ad				; Append the current bank id 
05ad 21 bb f9			ld hl, store_page+3+9 
05b0 3a 94 f9			ld a, (spi_device_id) 
05b3 77				ld (hl), a 
05b4			 
05b4				; save default page 0 
05b4			 
05b4 21 00 00			ld hl, 0 
05b7 11 af f9			ld de, store_page 
05ba				if DEBUG_STORESE 
05ba					DMARK "SB3" 
05ba f5				push af  
05bb 3a cf 05			ld a, (.dmark)  
05be 32 a0 fd			ld (debug_mark),a  
05c1 3a d0 05			ld a, (.dmark+1)  
05c4 32 a1 fd			ld (debug_mark+1),a  
05c7 3a d1 05			ld a, (.dmark+2)  
05ca 32 a2 fd			ld (debug_mark+2),a  
05cd 18 03			jr .pastdmark  
05cf ..			.dmark: db "SB3"  
05d2 f1			.pastdmark: pop af  
05d3			endm  
# End of macro DMARK
05d3			;		push af 
05d3			;		ld a, 'F' 
05d3			;		ld (debug_mark),a 
05d3			;		pop af 
05d3					CALLMONITOR 
05d3 cd aa fd			call debug_vector  
05d6				endm  
# End of macro CALLMONITOR
05d6				endif 
05d6 cd d9 04			call storage_write_block 
05d9				if DEBUG_STORESE 
05d9					DMARK "SB4" 
05d9 f5				push af  
05da 3a ee 05			ld a, (.dmark)  
05dd 32 a0 fd			ld (debug_mark),a  
05e0 3a ef 05			ld a, (.dmark+1)  
05e3 32 a1 fd			ld (debug_mark+1),a  
05e6 3a f0 05			ld a, (.dmark+2)  
05e9 32 a2 fd			ld (debug_mark+2),a  
05ec 18 03			jr .pastdmark  
05ee ..			.dmark: db "SB4"  
05f1 f1			.pastdmark: pop af  
05f2			endm  
# End of macro DMARK
05f2			;		push af 
05f2			;		ld a, '>' 
05f2			;		ld (debug_mark),a 
05f2			;		pop af 
05f2					CALLMONITOR 
05f2 cd aa fd			call debug_vector  
05f5				endm  
# End of macro CALLMONITOR
05f5				endif 
05f5			 
05f5 00				nop 
05f6 00				nop 
05f7 00				nop 
05f8			 
05f8				; now set 0 in every page to mark as a free block 
05f8			 
05f8 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
05fa 21 40 00			ld hl, STORE_BLOCK_PHY 
05fd			 
05fd 3e 00		.setmark1:   	ld a,0 
05ff e5					push hl 
0600 c5					push bc 
0601 cd 79 02				call se_writebyte 
0604 3e 0a			ld a, 10 
0606 cd d2 0c			call aDelayInMS 
0609 23				inc hl 
060a cd 79 02				call se_writebyte 
060d 3e 0a			ld a, 10 
060f cd d2 0c			call aDelayInMS 
0612 2b				dec hl 
0613 c1					pop bc 
0614 e1					pop hl 
0615 3e 40				ld a, STORE_BLOCK_PHY 
0617 cd de 0f				call addatohl 
061a 10 e1				djnz .setmark1 
061c			 
061c 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
061e 3e 00		.setmark2:   	ld a,0 
0620 e5					push hl 
0621 c5					push bc 
0622 cd 79 02				call se_writebyte 
0625 3e 0a			ld a, 10 
0627 cd d2 0c			call aDelayInMS 
062a 23				inc hl 
062b cd 79 02				call se_writebyte 
062e 3e 0a			ld a, 10 
0630 cd d2 0c			call aDelayInMS 
0633 2b				dec hl 
0634 c1					pop bc 
0635 e1					pop hl 
0636 3e 40				ld a, STORE_BLOCK_PHY 
0638 cd de 0f				call addatohl 
063b 10 e1				djnz .setmark2 
063d			 
063d					 
063d			 
063d			 
063d c9				ret 
063e			 
063e			 
063e			 
063e			 
063e .. 00		.defaultbanklabl:   db "BankLabel_",0 
0649			 
0649			 
0649			 
0649			; Label Bank 
0649			; ---------- 
0649			; 
0649			; With current bank 
0649			; Read block 0 
0649			; Set label 
0649			; Write block 0 
0649			 
0649			; label str pointer in hl 
0649			 
0649			storage_label:     
0649			 
0649				if DEBUG_STORESE 
0649					DMARK "LBL" 
0649 f5				push af  
064a 3a 5e 06			ld a, (.dmark)  
064d 32 a0 fd			ld (debug_mark),a  
0650 3a 5f 06			ld a, (.dmark+1)  
0653 32 a1 fd			ld (debug_mark+1),a  
0656 3a 60 06			ld a, (.dmark+2)  
0659 32 a2 fd			ld (debug_mark+2),a  
065c 18 03			jr .pastdmark  
065e ..			.dmark: db "LBL"  
0661 f1			.pastdmark: pop af  
0662			endm  
# End of macro DMARK
0662					CALLMONITOR 
0662 cd aa fd			call debug_vector  
0665				endm  
# End of macro CALLMONITOR
0665				endif 
0665			 
0665 e5				push hl 
0666			 
0666 cd 25 05			call storage_get_block_0 
0669			 
0669				; set default label 
0669			 
0669 e1				pop hl 
066a			 
066a 11 b2 f9		 	ld de, store_page+3 
066d 01 0f 00			ld bc, 15 
0670				if DEBUG_STORESE 
0670					DMARK "LB3" 
0670 f5				push af  
0671 3a 85 06			ld a, (.dmark)  
0674 32 a0 fd			ld (debug_mark),a  
0677 3a 86 06			ld a, (.dmark+1)  
067a 32 a1 fd			ld (debug_mark+1),a  
067d 3a 87 06			ld a, (.dmark+2)  
0680 32 a2 fd			ld (debug_mark+2),a  
0683 18 03			jr .pastdmark  
0685 ..			.dmark: db "LB3"  
0688 f1			.pastdmark: pop af  
0689			endm  
# End of macro DMARK
0689					CALLMONITOR 
0689 cd aa fd			call debug_vector  
068c				endm  
# End of macro CALLMONITOR
068c				endif 
068c ed b0			ldir 
068e				; save default page 0 
068e			 
068e 21 00 00			ld hl, 0 
0691 11 af f9			ld de, store_page 
0694				if DEBUG_STORESE 
0694					DMARK "LBW" 
0694 f5				push af  
0695 3a a9 06			ld a, (.dmark)  
0698 32 a0 fd			ld (debug_mark),a  
069b 3a aa 06			ld a, (.dmark+1)  
069e 32 a1 fd			ld (debug_mark+1),a  
06a1 3a ab 06			ld a, (.dmark+2)  
06a4 32 a2 fd			ld (debug_mark+2),a  
06a7 18 03			jr .pastdmark  
06a9 ..			.dmark: db "LBW"  
06ac f1			.pastdmark: pop af  
06ad			endm  
# End of macro DMARK
06ad					CALLMONITOR 
06ad cd aa fd			call debug_vector  
06b0				endm  
# End of macro CALLMONITOR
06b0				endif 
06b0 cd d9 04			call storage_write_block 
06b3			 
06b3 c9				ret 
06b4			 
06b4			 
06b4			 
06b4			; Read Block 0 - Config 
06b4			; --------------------- 
06b4			; 
06b4			; With current bank 
06b4			; Call presence test 
06b4			;    If not present format/init bank  
06b4			; Read block 0  
06b4			;  
06b4			 
06b4			 
06b4			; Dir 
06b4			; --- 
06b4			; 
06b4			; With current bank 
06b4			; Load Block 0 Config 
06b4			; Get max file id number 
06b4			; For each logical block 
06b4			;    Read block read byte 2 
06b4			;      if first block of file 
06b4			;         Display file name 
06b4			;         Display type flags for file 
06b4			;        
06b4			 
06b4			; moving to words as this requires stack control 
06b4			 
06b4			 
06b4			; Delete File 
06b4			; ----------- 
06b4			; 
06b4			; With current bank 
06b4			; 
06b4			; Load Block 0 Config 
06b4			; Get max file id number 
06b4			; For each logical block 
06b4			;    Read block file id 
06b4			;      If first block of file and dont have file id 
06b4			;         if file to delete 
06b4			;         Save file id 
06b4			;         Null file id 
06b4			;         Write this block back 
06b4			;      If file id is one saved 
06b4			;         Null file id 
06b4			;         Write this block back 
06b4			 
06b4			 
06b4			.se_done: 
06b4 e1				pop hl 
06b5 c9				ret 
06b6			 
06b6			storage_erase: 
06b6			 
06b6				; hl contains the file id 
06b6			 
06b6 5d				ld e, l 
06b7 16 00			ld d, 0 
06b9 21 40 00			ld hl, STORE_BLOCK_PHY 
06bc					if DEBUG_FORTH_WORDS 
06bc						DMARK "ERA" 
06bc f5				push af  
06bd 3a d1 06			ld a, (.dmark)  
06c0 32 a0 fd			ld (debug_mark),a  
06c3 3a d2 06			ld a, (.dmark+1)  
06c6 32 a1 fd			ld (debug_mark+1),a  
06c9 3a d3 06			ld a, (.dmark+2)  
06cc 32 a2 fd			ld (debug_mark+2),a  
06cf 18 03			jr .pastdmark  
06d1 ..			.dmark: db "ERA"  
06d4 f1			.pastdmark: pop af  
06d5			endm  
# End of macro DMARK
06d5						CALLMONITOR 
06d5 cd aa fd			call debug_vector  
06d8				endm  
# End of macro CALLMONITOR
06d8					endif 
06d8 cd a7 07			call storage_findnextid 
06db cd 07 10			call ishlzero 
06de c8				ret z 
06df			 
06df e5				push hl 
06e0			 
06e0				; TODO check file not found 
06e0			 
06e0 11 af f9			ld de, store_page 
06e3 cd 74 04			call storage_read_block 
06e6			 
06e6 cd 07 10			call ishlzero 
06e9 ca b4 06			jp z,.se_done 
06ec			 
06ec					if DEBUG_FORTH_WORDS 
06ec						DMARK "ER1" 
06ec f5				push af  
06ed 3a 01 07			ld a, (.dmark)  
06f0 32 a0 fd			ld (debug_mark),a  
06f3 3a 02 07			ld a, (.dmark+1)  
06f6 32 a1 fd			ld (debug_mark+1),a  
06f9 3a 03 07			ld a, (.dmark+2)  
06fc 32 a2 fd			ld (debug_mark+2),a  
06ff 18 03			jr .pastdmark  
0701 ..			.dmark: db "ER1"  
0704 f1			.pastdmark: pop af  
0705			endm  
# End of macro DMARK
0705						CALLMONITOR 
0705 cd aa fd			call debug_vector  
0708				endm  
# End of macro CALLMONITOR
0708					endif 
0708 3a af f9			ld a, (store_page)	; get file id 
070b 32 a3 f9			ld (store_tmpid), a 
070e			 
070e 3a b1 f9			ld a, (store_page+2)    ; get count of extends 
0711 32 a2 f9			ld (store_tmpext), a 
0714			 
0714				; wipe file header 
0714			 
0714 e1				pop hl 
0715 3e 00			ld a, 0 
0717 32 af f9			ld (store_page), a 
071a 32 b0 f9			ld (store_page+1),a 
071d 11 af f9			ld de, store_page 
0720					if DEBUG_FORTH_WORDS 
0720						DMARK "ER2" 
0720 f5				push af  
0721 3a 35 07			ld a, (.dmark)  
0724 32 a0 fd			ld (debug_mark),a  
0727 3a 36 07			ld a, (.dmark+1)  
072a 32 a1 fd			ld (debug_mark+1),a  
072d 3a 37 07			ld a, (.dmark+2)  
0730 32 a2 fd			ld (debug_mark+2),a  
0733 18 03			jr .pastdmark  
0735 ..			.dmark: db "ER2"  
0738 f1			.pastdmark: pop af  
0739			endm  
# End of macro DMARK
0739						CALLMONITOR 
0739 cd aa fd			call debug_vector  
073c				endm  
# End of macro CALLMONITOR
073c					endif 
073c cd d9 04			call storage_write_block 
073f			 
073f			 
073f				; wipe file extents 
073f			 
073f 3a a2 f9			ld a, (store_tmpext) 
0742 47				ld b, a 
0743			 
0743			.eraext:	  
0743 c5				push bc 
0744			 
0744 21 40 00			ld hl, STORE_BLOCK_PHY 
0747 3a a3 f9			ld a,(store_tmpid) 
074a 5f				ld e, a 
074b 50				ld d, b	 
074c					if DEBUG_FORTH_WORDS 
074c						DMARK "ER3" 
074c f5				push af  
074d 3a 61 07			ld a, (.dmark)  
0750 32 a0 fd			ld (debug_mark),a  
0753 3a 62 07			ld a, (.dmark+1)  
0756 32 a1 fd			ld (debug_mark+1),a  
0759 3a 63 07			ld a, (.dmark+2)  
075c 32 a2 fd			ld (debug_mark+2),a  
075f 18 03			jr .pastdmark  
0761 ..			.dmark: db "ER3"  
0764 f1			.pastdmark: pop af  
0765			endm  
# End of macro DMARK
0765						CALLMONITOR 
0765 cd aa fd			call debug_vector  
0768				endm  
# End of macro CALLMONITOR
0768					endif 
0768 cd a7 07			call storage_findnextid 
076b cd 07 10			call ishlzero 
076e ca b4 06			jp z,.se_done 
0771			 
0771 e5				push hl 
0772 11 af f9			ld de, store_page 
0775 cd 74 04			call storage_read_block 
0778			 
0778				; free block	 
0778			 
0778 3e 00			ld a, 0 
077a 32 af f9			ld (store_page), a 
077d 32 b0 f9			ld (store_page+1),a 
0780 11 af f9			ld de, store_page 
0783 e1				pop hl 
0784					if DEBUG_FORTH_WORDS 
0784						DMARK "ER4" 
0784 f5				push af  
0785 3a 99 07			ld a, (.dmark)  
0788 32 a0 fd			ld (debug_mark),a  
078b 3a 9a 07			ld a, (.dmark+1)  
078e 32 a1 fd			ld (debug_mark+1),a  
0791 3a 9b 07			ld a, (.dmark+2)  
0794 32 a2 fd			ld (debug_mark+2),a  
0797 18 03			jr .pastdmark  
0799 ..			.dmark: db "ER4"  
079c f1			.pastdmark: pop af  
079d			endm  
# End of macro DMARK
079d						CALLMONITOR 
079d cd aa fd			call debug_vector  
07a0				endm  
# End of macro CALLMONITOR
07a0					endif 
07a0 cd d9 04			call storage_write_block 
07a3			 
07a3 c1				pop bc 
07a4 10 9d			djnz .eraext 
07a6			 
07a6 c9				ret 
07a7			 
07a7			 
07a7			; Find Free Block 
07a7			; --------------- 
07a7			; 
07a7			; With current bank 
07a7			;  
07a7			; From given starting logical block 
07a7			;    Read block  
07a7			;    If no file id 
07a7			;         Return block id 
07a7			 
07a7			 
07a7			; hl starting page number 
07a7			; hl contains free page number or zero if no pages free 
07a7			; e contains the file id to locate 
07a7			; d contains the block number 
07a7			 
07a7			; TODO change to find file id and use zero for free block 
07a7			 
07a7			storage_findnextid: 
07a7			 
07a7				; now locate first 0 page to mark as a free block 
07a7			 
07a7 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
07a9			;	ld hl, STORE_BLOCK_PHY 
07a9			 
07a9					if DEBUG_FORTH_WORDS 
07a9					DMARK "FNI" 
07a9 f5				push af  
07aa 3a be 07			ld a, (.dmark)  
07ad 32 a0 fd			ld (debug_mark),a  
07b0 3a bf 07			ld a, (.dmark+1)  
07b3 32 a1 fd			ld (debug_mark+1),a  
07b6 3a c0 07			ld a, (.dmark+2)  
07b9 32 a2 fd			ld (debug_mark+2),a  
07bc 18 03			jr .pastdmark  
07be ..			.dmark: db "FNI"  
07c1 f1			.pastdmark: pop af  
07c2			endm  
# End of macro DMARK
07c2						CALLMONITOR 
07c2 cd aa fd			call debug_vector  
07c5				endm  
# End of macro CALLMONITOR
07c5					endif 
07c5			.ff1:   	 
07c5 e5					push hl 
07c6 c5					push bc 
07c7 d5					push de 
07c8 cd 1b 03				call se_readbyte 
07cb 5f					ld e,a 
07cc 23					inc hl 
07cd cd 1b 03				call se_readbyte 
07d0 57					ld d, a 
07d1 e1					pop hl 
07d2 e5					push hl 
07d3 cd fc 0f				call cmp16 
07d6 28 49				jr z, .fffound 
07d8			 
07d8 d1					pop de 
07d9 c1					pop bc 
07da e1					pop hl 
07db			 
07db					; is found? 
07db					;cp e 
07db					;ret z 
07db			 
07db 3e 40				ld a, STORE_BLOCK_PHY 
07dd cd de 0f				call addatohl 
07e0 10 e3				djnz .ff1 
07e2			 
07e2 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
07e4			.ff2:   	 
07e4			 
07e4 e5					push hl 
07e5 c5					push bc 
07e6 d5					push de 
07e7 cd 1b 03				call se_readbyte 
07ea 5f					ld e,a 
07eb 23					inc hl 
07ec cd 1b 03				call se_readbyte 
07ef 57					ld d, a 
07f0			 
07f0 e1					pop hl 
07f1 e5					push hl 
07f2 cd fc 0f				call cmp16 
07f5 28 2a				jr z, .fffound 
07f7			 
07f7 d1					pop de 
07f8 c1					pop bc 
07f9 e1					pop hl 
07fa					; is found? 
07fa					;cp e 
07fa					;ret z 
07fa			 
07fa 3e 40				ld a, STORE_BLOCK_PHY 
07fc cd de 0f				call addatohl 
07ff 10 e3				djnz .ff2 
0801			 
0801			 
0801					if DEBUG_FORTH_WORDS 
0801					DMARK "FN-" 
0801 f5				push af  
0802 3a 16 08			ld a, (.dmark)  
0805 32 a0 fd			ld (debug_mark),a  
0808 3a 17 08			ld a, (.dmark+1)  
080b 32 a1 fd			ld (debug_mark+1),a  
080e 3a 18 08			ld a, (.dmark+2)  
0811 32 a2 fd			ld (debug_mark+2),a  
0814 18 03			jr .pastdmark  
0816 ..			.dmark: db "FN-"  
0819 f1			.pastdmark: pop af  
081a			endm  
# End of macro DMARK
081a					;	push af 
081a					;	ld a, 'n' 
081a					;	ld (debug_mark),a 
081a					;	pop af 
081a						CALLMONITOR 
081a cd aa fd			call debug_vector  
081d				endm  
# End of macro CALLMONITOR
081d					endif 
081d				; no free marks! 
081d 21 00 00				ld hl, 0 
0820 c9				ret 
0821			.fffound: 
0821				 
0821			 
0821 d1					pop de 
0822 c1					pop bc 
0823 e1					pop hl 
0824					if DEBUG_FORTH_WORDS 
0824					DMARK "FNF" 
0824 f5				push af  
0825 3a 39 08			ld a, (.dmark)  
0828 32 a0 fd			ld (debug_mark),a  
082b 3a 3a 08			ld a, (.dmark+1)  
082e 32 a1 fd			ld (debug_mark+1),a  
0831 3a 3b 08			ld a, (.dmark+2)  
0834 32 a2 fd			ld (debug_mark+2),a  
0837 18 03			jr .pastdmark  
0839 ..			.dmark: db "FNF"  
083c f1			.pastdmark: pop af  
083d			endm  
# End of macro DMARK
083d					;	push af 
083d					;	ld a, 'n' 
083d					;	ld (debug_mark),a 
083d					;	pop af 
083d						CALLMONITOR 
083d cd aa fd			call debug_vector  
0840				endm  
# End of macro CALLMONITOR
0840					endif 
0840 c9				ret 
0841			 
0841			 
0841			 
0841			; Free Space 
0841			; ---------- 
0841			; 
0841			; With current bank 
0841			; 
0841			; Set block count to zero 
0841			; Starting with first logical block 
0841			;      Find free block  
0841			;      If block id given, increment block count 
0841			; 
0841			;  
0841			 
0841			 
0841			; hl contains count of free blocks 
0841			 
0841			storage_freeblocks: 
0841			 
0841				; now locate first 0 page to mark as a free block 
0841			 
0841 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
0843 21 40 00			ld hl, STORE_BLOCK_PHY 
0846 11 00 00			ld de, 0 
0849			 
0849			.fb1:   	 
0849 e5					push hl 
084a c5					push bc 
084b d5					push de 
084c cd 1b 03				call se_readbyte 
084f d1					pop de 
0850 c1					pop bc 
0851 e1					pop hl 
0852			 
0852					; is free? 
0852 fe 00				cp 0 
0854 20 01				jr nz, .ff1cont 
0856 13					inc de 
0857			 
0857			.ff1cont: 
0857			 
0857			 
0857 3e 40				ld a, STORE_BLOCK_PHY 
0859 cd de 0f				call addatohl 
085c 10 eb				djnz .fb1 
085e			 
085e 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
0860			.fb2:   	 
0860 e5					push hl 
0861 c5					push bc 
0862 d5					push de 
0863 cd 1b 03				call se_readbyte 
0866 d1					pop de 
0867 c1					pop bc 
0868 e1					pop hl 
0869			 
0869					; is free? 
0869 fe 00				cp 0 
086b 20 01				jr nz, .ff2cont 
086d 13					inc de 
086e			 
086e			.ff2cont: 
086e			 
086e 3e 40				ld a, STORE_BLOCK_PHY 
0870 cd de 0f				call addatohl 
0873 10 eb				djnz .fb2 
0875			 
0875 eb				ex de, hl 
0876 c9				ret 
0877			 
0877			; Get File ID 
0877			; ----------- 
0877			; 
0877			; With current bank 
0877			;  
0877			; Load Block 0 Config 
0877			; Get max file id number 
0877			; For each logical block 
0877			;    Read block file id 
0877			;      If first block of file and dont have file id 
0877			;         if file get id and exit 
0877			 
0877			 
0877			 
0877			 
0877			; Create File 
0877			; ----------- 
0877			; 
0877			; With current bank  
0877			; Load Block 0 Config 
0877			; Get max file id number 
0877			; Increment file id number 
0877			; Save Config 
0877			; Find free block 
0877			; Set buffer with file name and file id 
0877			; Write buffer to free block  
0877			 
0877			 
0877			; hl point to file name 
0877			; hl returns file id 
0877			 
0877			; file format: 
0877			; byte 0 - file id 
0877			; byte 1 - extent number 
0877			; byte 2-> data 
0877			 
0877			; format for extent number 0: 
0877			; 
0877			; byte 0 - file id 
0877			; byte 1 - extent 0 
0877			; byte 2 - extent count 
0877			; byte 3 -> file name and meta data 
0877			 
0877			 
0877			storage_create: 
0877				if DEBUG_STORESE 
0877					DMARK "SCR" 
0877 f5				push af  
0878 3a 8c 08			ld a, (.dmark)  
087b 32 a0 fd			ld (debug_mark),a  
087e 3a 8d 08			ld a, (.dmark+1)  
0881 32 a1 fd			ld (debug_mark+1),a  
0884 3a 8e 08			ld a, (.dmark+2)  
0887 32 a2 fd			ld (debug_mark+2),a  
088a 18 03			jr .pastdmark  
088c ..			.dmark: db "SCR"  
088f f1			.pastdmark: pop af  
0890			endm  
# End of macro DMARK
0890					CALLMONITOR 
0890 cd aa fd			call debug_vector  
0893				endm  
# End of macro CALLMONITOR
0893				endif 
0893			 
0893 e5				push hl		; save file name pointer 
0894			 
0894 cd 25 05			call storage_get_block_0 
0897			 
0897 3a af f9			ld a,(store_page)	; get current file id 
089a 3c				inc a 
089b 32 af f9			ld (store_page),a 
089e				 
089e 32 a3 f9			ld (store_tmpid),a			; save id 
08a1			 
08a1 21 00 00			ld hl, 0 
08a4 11 af f9			ld de, store_page 
08a7				if DEBUG_STORESE 
08a7					DMARK "SCw" 
08a7 f5				push af  
08a8 3a bc 08			ld a, (.dmark)  
08ab 32 a0 fd			ld (debug_mark),a  
08ae 3a bd 08			ld a, (.dmark+1)  
08b1 32 a1 fd			ld (debug_mark+1),a  
08b4 3a be 08			ld a, (.dmark+2)  
08b7 32 a2 fd			ld (debug_mark+2),a  
08ba 18 03			jr .pastdmark  
08bc ..			.dmark: db "SCw"  
08bf f1			.pastdmark: pop af  
08c0			endm  
# End of macro DMARK
08c0					CALLMONITOR 
08c0 cd aa fd			call debug_vector  
08c3				endm  
# End of macro CALLMONITOR
08c3				endif 
08c3 cd d9 04			call storage_write_block	 ; save update 
08c6			 
08c6				if DEBUG_STORESE 
08c6 11 af f9				ld de, store_page 
08c9					DMARK "SCC" 
08c9 f5				push af  
08ca 3a de 08			ld a, (.dmark)  
08cd 32 a0 fd			ld (debug_mark),a  
08d0 3a df 08			ld a, (.dmark+1)  
08d3 32 a1 fd			ld (debug_mark+1),a  
08d6 3a e0 08			ld a, (.dmark+2)  
08d9 32 a2 fd			ld (debug_mark+2),a  
08dc 18 03			jr .pastdmark  
08de ..			.dmark: db "SCC"  
08e1 f1			.pastdmark: pop af  
08e2			endm  
# End of macro DMARK
08e2					CALLMONITOR 
08e2 cd aa fd			call debug_vector  
08e5				endm  
# End of macro CALLMONITOR
08e5				endif 
08e5				;  
08e5				 
08e5 21 40 00			ld hl, STORE_BLOCK_PHY 
08e8 11 00 00			ld de, 0 
08eb cd a7 07			call storage_findnextid 
08ee			 
08ee 22 9a f9			ld (store_tmppageid), hl    ; save page to use  
08f1			 
08f1				; TODO detect 0 = no spare blocks 
08f1			 
08f1				; hl now contains the free page to use for the file header page 
08f1			 
08f1				if DEBUG_STORESE 
08f1				DMARK "SCF" 
08f1 f5				push af  
08f2 3a 06 09			ld a, (.dmark)  
08f5 32 a0 fd			ld (debug_mark),a  
08f8 3a 07 09			ld a, (.dmark+1)  
08fb 32 a1 fd			ld (debug_mark+1),a  
08fe 3a 08 09			ld a, (.dmark+2)  
0901 32 a2 fd			ld (debug_mark+2),a  
0904 18 03			jr .pastdmark  
0906 ..			.dmark: db "SCF"  
0909 f1			.pastdmark: pop af  
090a			endm  
# End of macro DMARK
090a					CALLMONITOR 
090a cd aa fd			call debug_vector  
090d				endm  
# End of macro CALLMONITOR
090d				endif 
090d			 
090d 22 9a f9			ld (store_tmppageid), hl 
0910				 
0910 3a a3 f9			ld a,(store_tmpid)    ; get file id 
0913			;	ld a, (store_filecache)			; save to cache 
0913			 
0913 32 af f9			ld (store_page),a    ; set page id 
0916 3e 00			ld a, 0			 ; extent 0 is file header 
0918 32 b0 f9			ld (store_page+1), a   ; set file extent 
091b			 
091b 32 b1 f9			ld (store_page+2), a   ; extent count for the file 
091e			 
091e			;	inc hl 		; init block 0 of file 
091e			;	inc hl   		; skip file and extent id 
091e			 ;       ld a, 0 
091e			;	ld (hl),a 
091e			;	ld a, (store_filecache+1)  	; save to cache 
091e			 
091e			;	inc hl    ; file name 
091e				 
091e				 
091e 11 b2 f9			ld de, store_page+3    ; get buffer for term string to use as file name 
0921				if DEBUG_STORESE 
0921					DMARK "SCc" 
0921 f5				push af  
0922 3a 36 09			ld a, (.dmark)  
0925 32 a0 fd			ld (debug_mark),a  
0928 3a 37 09			ld a, (.dmark+1)  
092b 32 a1 fd			ld (debug_mark+1),a  
092e 3a 38 09			ld a, (.dmark+2)  
0931 32 a2 fd			ld (debug_mark+2),a  
0934 18 03			jr .pastdmark  
0936 ..			.dmark: db "SCc"  
0939 f1			.pastdmark: pop af  
093a			endm  
# End of macro DMARK
093a					CALLMONITOR 
093a cd aa fd			call debug_vector  
093d				endm  
# End of macro CALLMONITOR
093d				endif 
093d e1				pop hl    ; get zero term string 
093e e5				push hl 
093f 3e 00			ld a, 0 
0941 cd 4f 13			call strlent 
0944 23				inc hl   ; cover zero term 
0945 06 00			ld b,0 
0947 4d				ld c,l 
0948 e1				pop hl 
0949				;ex de, hl 
0949				if DEBUG_STORESE 
0949					DMARK "SCa" 
0949 f5				push af  
094a 3a 5e 09			ld a, (.dmark)  
094d 32 a0 fd			ld (debug_mark),a  
0950 3a 5f 09			ld a, (.dmark+1)  
0953 32 a1 fd			ld (debug_mark+1),a  
0956 3a 60 09			ld a, (.dmark+2)  
0959 32 a2 fd			ld (debug_mark+2),a  
095c 18 03			jr .pastdmark  
095e ..			.dmark: db "SCa"  
0961 f1			.pastdmark: pop af  
0962			endm  
# End of macro DMARK
0962					;push af 
0962					;ld a, 'a' 
0962					;ld (debug_mark),a 
0962					;pop af 
0962					CALLMONITOR 
0962 cd aa fd			call debug_vector  
0965				endm  
# End of macro CALLMONITOR
0965				endif 
0965 ed b0			ldir    ; copy zero term string 
0967				if DEBUG_STORESE 
0967					DMARK "SCA" 
0967 f5				push af  
0968 3a 7c 09			ld a, (.dmark)  
096b 32 a0 fd			ld (debug_mark),a  
096e 3a 7d 09			ld a, (.dmark+1)  
0971 32 a1 fd			ld (debug_mark+1),a  
0974 3a 7e 09			ld a, (.dmark+2)  
0977 32 a2 fd			ld (debug_mark+2),a  
097a 18 03			jr .pastdmark  
097c ..			.dmark: db "SCA"  
097f f1			.pastdmark: pop af  
0980			endm  
# End of macro DMARK
0980					CALLMONITOR 
0980 cd aa fd			call debug_vector  
0983				endm  
# End of macro CALLMONITOR
0983				endif 
0983			 
0983				; write file header page 
0983			 
0983 2a 9a f9			ld hl,(store_tmppageid) 
0986 11 af f9			ld de, store_page 
0989				if DEBUG_STORESE 
0989					DMARK "SCb" 
0989 f5				push af  
098a 3a 9e 09			ld a, (.dmark)  
098d 32 a0 fd			ld (debug_mark),a  
0990 3a 9f 09			ld a, (.dmark+1)  
0993 32 a1 fd			ld (debug_mark+1),a  
0996 3a a0 09			ld a, (.dmark+2)  
0999 32 a2 fd			ld (debug_mark+2),a  
099c 18 03			jr .pastdmark  
099e ..			.dmark: db "SCb"  
09a1 f1			.pastdmark: pop af  
09a2			endm  
# End of macro DMARK
09a2					;push af 
09a2					;ld a, 'b' 
09a2					;ld (debug_mark),a 
09a2					;pop af 
09a2					CALLMONITOR 
09a2 cd aa fd			call debug_vector  
09a5				endm  
# End of macro CALLMONITOR
09a5				endif 
09a5 cd d9 04			call storage_write_block 
09a8			 
09a8 3a a3 f9			ld a, (store_tmpid) 
09ab 6f				ld l, a 
09ac 26 00			ld h,0 
09ae				if DEBUG_STORESE 
09ae					DMARK "SCz" 
09ae f5				push af  
09af 3a c3 09			ld a, (.dmark)  
09b2 32 a0 fd			ld (debug_mark),a  
09b5 3a c4 09			ld a, (.dmark+1)  
09b8 32 a1 fd			ld (debug_mark+1),a  
09bb 3a c5 09			ld a, (.dmark+2)  
09be 32 a2 fd			ld (debug_mark+2),a  
09c1 18 03			jr .pastdmark  
09c3 ..			.dmark: db "SCz"  
09c6 f1			.pastdmark: pop af  
09c7			endm  
# End of macro DMARK
09c7					CALLMONITOR 
09c7 cd aa fd			call debug_vector  
09ca				endm  
# End of macro CALLMONITOR
09ca				endif 
09ca c9				ret 
09cb				 
09cb			 
09cb			 
09cb			; 
09cb			; Read File 
09cb			; 
09cb			; h - file id to locate 
09cb			; l - extent to locate 
09cb			; de - pointer to string to read into 
09cb			; 
09cb			; returns hl is 0 if block not found ie end of file or pointer to start of data read 
09cb			 
09cb			.sr_fail: 
09cb d1				pop de 
09cc c9				ret 
09cd			 
09cd			storage_read: 
09cd			 
09cd			 
09cd d5				push de 
09ce			 
09ce			; TODO BUG the above push is it popped before the RET Z? 
09ce			 
09ce			; TODO how to handle multiple part blocks 
09ce			 
09ce				; locate file extent to read 
09ce			 
09ce 5c				ld e, h 
09cf 55				ld d, l 
09d0			 
09d0			.srext: 
09d0 22 ad f9			ld (store_readptr), hl     ; save the current extent to load 
09d3 ed 53 ab f9		ld (store_readbuf), de     ; save the current buffer to load in to 
09d7			 
09d7 21 40 00			ld hl, STORE_BLOCK_PHY 
09da				if DEBUG_STORESE 
09da					DMARK "sre" 
09da f5				push af  
09db 3a ef 09			ld a, (.dmark)  
09de 32 a0 fd			ld (debug_mark),a  
09e1 3a f0 09			ld a, (.dmark+1)  
09e4 32 a1 fd			ld (debug_mark+1),a  
09e7 3a f1 09			ld a, (.dmark+2)  
09ea 32 a2 fd			ld (debug_mark+2),a  
09ed 18 03			jr .pastdmark  
09ef ..			.dmark: db "sre"  
09f2 f1			.pastdmark: pop af  
09f3			endm  
# End of macro DMARK
09f3					CALLMONITOR 
09f3 cd aa fd			call debug_vector  
09f6				endm  
# End of macro CALLMONITOR
09f6				endif 
09f6 cd a7 07			call storage_findnextid 
09f9			 
09f9				if DEBUG_STORESE 
09f9					DMARK "srf" 
09f9 f5				push af  
09fa 3a 0e 0a			ld a, (.dmark)  
09fd 32 a0 fd			ld (debug_mark),a  
0a00 3a 0f 0a			ld a, (.dmark+1)  
0a03 32 a1 fd			ld (debug_mark+1),a  
0a06 3a 10 0a			ld a, (.dmark+2)  
0a09 32 a2 fd			ld (debug_mark+2),a  
0a0c 18 03			jr .pastdmark  
0a0e ..			.dmark: db "srf"  
0a11 f1			.pastdmark: pop af  
0a12			endm  
# End of macro DMARK
0a12					CALLMONITOR 
0a12 cd aa fd			call debug_vector  
0a15				endm  
# End of macro CALLMONITOR
0a15				endif 
0a15 cd 07 10			call ishlzero 
0a18			;	ld a, l 
0a18			;	add h 
0a18			;	cp 0 
0a18 28 b1			jr z,.sr_fail			; block not found so EOF 
0a1a			 
0a1a				; save current address for use by higher level words etc 
0a1a			 
0a1a 22 a0 f9			ld (store_openaddr),hl 
0a1d			 
0a1d			 
0a1d				; hl contains page number to load 
0a1d d1				pop de   ; get storage 
0a1e ed 53 ab f9		ld (store_readbuf), de     ; current buffer to load in to 
0a22 d5				push de 
0a23				if DEBUG_STORESE 
0a23					DMARK "srg" 
0a23 f5				push af  
0a24 3a 38 0a			ld a, (.dmark)  
0a27 32 a0 fd			ld (debug_mark),a  
0a2a 3a 39 0a			ld a, (.dmark+1)  
0a2d 32 a1 fd			ld (debug_mark+1),a  
0a30 3a 3a 0a			ld a, (.dmark+2)  
0a33 32 a2 fd			ld (debug_mark+2),a  
0a36 18 03			jr .pastdmark  
0a38 ..			.dmark: db "srg"  
0a3b f1			.pastdmark: pop af  
0a3c			endm  
# End of macro DMARK
0a3c					CALLMONITOR 
0a3c cd aa fd			call debug_vector  
0a3f				endm  
# End of macro CALLMONITOR
0a3f				endif 
0a3f cd 74 04			call storage_read_block 
0a42			 
0a42				; if this a continuation read??? 
0a42			 
0a42 2a ab f9			ld hl, (store_readbuf)     ; current buffer to load in to 
0a45			 
0a45 3e 3f			ld a, STORE_BLOCK_PHY-1 
0a47 cd de 0f			call addatohl 
0a4a 7e				ld a,(hl) 
0a4b fe 00			cp 0 
0a4d 28 02			jr z, .markiscont 
0a4f 3e ff			ld a, 255 
0a51			 
0a51			.markiscont: 
0a51 32 a2 f9			ld (store_readcont), a 
0a54			 
0a54				if DEBUG_STORESE 
0a54					DMARK "srC" 
0a54 f5				push af  
0a55 3a 69 0a			ld a, (.dmark)  
0a58 32 a0 fd			ld (debug_mark),a  
0a5b 3a 6a 0a			ld a, (.dmark+1)  
0a5e 32 a1 fd			ld (debug_mark+1),a  
0a61 3a 6b 0a			ld a, (.dmark+2)  
0a64 32 a2 fd			ld (debug_mark+2),a  
0a67 18 03			jr .pastdmark  
0a69 ..			.dmark: db "srC"  
0a6c f1			.pastdmark: pop af  
0a6d			endm  
# End of macro DMARK
0a6d					CALLMONITOR 
0a6d cd aa fd			call debug_vector  
0a70				endm  
# End of macro CALLMONITOR
0a70				endif 
0a70				; only short reads enabled 
0a70			 
0a70 3a aa f9			ld a, (store_longread) 
0a73 fe 00			cp 0 
0a75 ca 42 0b			jp z, .readdone 
0a78			 
0a78			; TODO if block has no zeros then need to read next block  
0a78			; this code appears to be very buggy. Have added above a flag to disable/enable the following code for later debug 
0a78			; check last byte of physical block. 
0a78			; if not zero then the next block needs to be loaded 
0a78			 
0a78			 
0a78 2a ab f9			ld hl, (store_readbuf)     ; current buffer to load in to 
0a7b			 
0a7b 3e 3f			ld a, STORE_BLOCK_PHY-1 
0a7d cd de 0f			call addatohl 
0a80				;dec hl 
0a80 7e				ld a,(hl) 
0a81				if DEBUG_STORESE 
0a81					DMARK "sr?" 
0a81 f5				push af  
0a82 3a 96 0a			ld a, (.dmark)  
0a85 32 a0 fd			ld (debug_mark),a  
0a88 3a 97 0a			ld a, (.dmark+1)  
0a8b 32 a1 fd			ld (debug_mark+1),a  
0a8e 3a 98 0a			ld a, (.dmark+2)  
0a91 32 a2 fd			ld (debug_mark+2),a  
0a94 18 03			jr .pastdmark  
0a96 ..			.dmark: db "sr?"  
0a99 f1			.pastdmark: pop af  
0a9a			endm  
# End of macro DMARK
0a9a					CALLMONITOR 
0a9a cd aa fd			call debug_vector  
0a9d				endm  
# End of macro CALLMONITOR
0a9d				endif 
0a9d fe 00			cp 0 
0a9f ca 42 0b			jp z, .readdone 
0aa2			 
0aa2				; last byte is not zero so there is more in the next extent. Load it on the end.	 
0aa2			 
0aa2 23				inc hl 
0aa3			 
0aa3 22 ab f9			ld (store_readbuf), hl     ; save the current buffer to load in to 
0aa6			 
0aa6 ed 5b ad f9		ld de, (store_readptr)     ; save the current extent to load 
0aaa			 
0aaa eb				ex de, hl 
0aab			 
0aab				; next ext 
0aab			 
0aab 23				inc hl 
0aac 22 ad f9			ld  (store_readptr), hl     ; save the current extent to load 
0aaf			 
0aaf				if DEBUG_STORESE 
0aaf					DMARK "sF2" 
0aaf f5				push af  
0ab0 3a c4 0a			ld a, (.dmark)  
0ab3 32 a0 fd			ld (debug_mark),a  
0ab6 3a c5 0a			ld a, (.dmark+1)  
0ab9 32 a1 fd			ld (debug_mark+1),a  
0abc 3a c6 0a			ld a, (.dmark+2)  
0abf 32 a2 fd			ld (debug_mark+2),a  
0ac2 18 03			jr .pastdmark  
0ac4 ..			.dmark: db "sF2"  
0ac7 f1			.pastdmark: pop af  
0ac8			endm  
# End of macro DMARK
0ac8					CALLMONITOR 
0ac8 cd aa fd			call debug_vector  
0acb				endm  
# End of macro CALLMONITOR
0acb				endif 
0acb			 
0acb				; get and load block 
0acb			 
0acb cd a7 07			call storage_findnextid 
0ace			 
0ace				if DEBUG_STORESE 
0ace					DMARK "sf2" 
0ace f5				push af  
0acf 3a e3 0a			ld a, (.dmark)  
0ad2 32 a0 fd			ld (debug_mark),a  
0ad5 3a e4 0a			ld a, (.dmark+1)  
0ad8 32 a1 fd			ld (debug_mark+1),a  
0adb 3a e5 0a			ld a, (.dmark+2)  
0ade 32 a2 fd			ld (debug_mark+2),a  
0ae1 18 03			jr .pastdmark  
0ae3 ..			.dmark: db "sf2"  
0ae6 f1			.pastdmark: pop af  
0ae7			endm  
# End of macro DMARK
0ae7					CALLMONITOR 
0ae7 cd aa fd			call debug_vector  
0aea				endm  
# End of macro CALLMONITOR
0aea				endif 
0aea cd 07 10			call ishlzero 
0aed			;	ld a, l 
0aed			;	add h 
0aed			;	cp 0 
0aed ca cb 09			jp z,.sr_fail			; block not found so EOF 
0af0				 
0af0				; save current address for use by higher level words etc 
0af0			 
0af0 22 a0 f9			ld (store_openaddr),hl 
0af3			 
0af3 cd 74 04			call storage_read_block 
0af6			 
0af6				; on a continuation block, we now have the file id and ext in the middle of the block 
0af6				; we need to pull everything back  
0af6			 
0af6 ed 5b ab f9		ld de, (store_readbuf)     ; current buffer to nudge into 
0afa 2a ab f9			ld hl, (store_readbuf)     ; current buffer where data actually exists 
0afd 23				inc hl 
0afe 23				inc hl     ; skip id and ext 
0aff 01 40 00			ld bc, STORE_BLOCK_PHY 
0b02				if DEBUG_STORESE 
0b02					DMARK "SR<" 
0b02 f5				push af  
0b03 3a 17 0b			ld a, (.dmark)  
0b06 32 a0 fd			ld (debug_mark),a  
0b09 3a 18 0b			ld a, (.dmark+1)  
0b0c 32 a1 fd			ld (debug_mark+1),a  
0b0f 3a 19 0b			ld a, (.dmark+2)  
0b12 32 a2 fd			ld (debug_mark+2),a  
0b15 18 03			jr .pastdmark  
0b17 ..			.dmark: db "SR<"  
0b1a f1			.pastdmark: pop af  
0b1b			endm  
# End of macro DMARK
0b1b					CALLMONITOR 
0b1b cd aa fd			call debug_vector  
0b1e				endm  
# End of macro CALLMONITOR
0b1e				endif 
0b1e ed b0			ldir     ; copy data 
0b20			 
0b20				; move the pointer back and pretend we have a full buffer for next recheck 
0b20			 
0b20 1b				dec de 
0b21 1b				dec de 
0b22			 
0b22			; TODO do pop below now short circuit loop????? 
0b22 c1				pop bc     ; get rid of spare de on stack 
0b23				if DEBUG_STORESE 
0b23					DMARK "SR>" 
0b23 f5				push af  
0b24 3a 38 0b			ld a, (.dmark)  
0b27 32 a0 fd			ld (debug_mark),a  
0b2a 3a 39 0b			ld a, (.dmark+1)  
0b2d 32 a1 fd			ld (debug_mark+1),a  
0b30 3a 3a 0b			ld a, (.dmark+2)  
0b33 32 a2 fd			ld (debug_mark+2),a  
0b36 18 03			jr .pastdmark  
0b38 ..			.dmark: db "SR>"  
0b3b f1			.pastdmark: pop af  
0b3c			endm  
# End of macro DMARK
0b3c					CALLMONITOR 
0b3c cd aa fd			call debug_vector  
0b3f				endm  
# End of macro CALLMONITOR
0b3f				endif 
0b3f c3 d0 09			jp .srext 
0b42			 
0b42			 
0b42			 
0b42			 
0b42			 
0b42			.readdone:		 
0b42 e1				pop hl 		 ; return start of data to show as not EOF 
0b43 23				inc hl   ; past file id 
0b44 23				inc hl   ; past ext 
0b45				if DEBUG_STORESE 
0b45					DMARK "SRe" 
0b45 f5				push af  
0b46 3a 5a 0b			ld a, (.dmark)  
0b49 32 a0 fd			ld (debug_mark),a  
0b4c 3a 5b 0b			ld a, (.dmark+1)  
0b4f 32 a1 fd			ld (debug_mark+1),a  
0b52 3a 5c 0b			ld a, (.dmark+2)  
0b55 32 a2 fd			ld (debug_mark+2),a  
0b58 18 03			jr .pastdmark  
0b5a ..			.dmark: db "SRe"  
0b5d f1			.pastdmark: pop af  
0b5e			endm  
# End of macro DMARK
0b5e					CALLMONITOR 
0b5e cd aa fd			call debug_vector  
0b61				endm  
# End of macro CALLMONITOR
0b61				endif 
0b61 c9					ret 
0b62			 
0b62			 
0b62			 
0b62			; 
0b62			; Append File 
0b62			; 
0b62			; hl - file id to locate 
0b62			; de - pointer to (multi block) string to write 
0b62			 
0b62			.sa_notfound: 
0b62 d1				pop de 
0b63 c9				ret 
0b64			 
0b64			 
0b64			storage_append: 
0b64				; hl -  file id to append to 
0b64				; de - string to append 
0b64			 
0b64 d5				push de 
0b65				 
0b65				if DEBUG_STORESE 
0b65					DMARK "AP1" 
0b65 f5				push af  
0b66 3a 7a 0b			ld a, (.dmark)  
0b69 32 a0 fd			ld (debug_mark),a  
0b6c 3a 7b 0b			ld a, (.dmark+1)  
0b6f 32 a1 fd			ld (debug_mark+1),a  
0b72 3a 7c 0b			ld a, (.dmark+2)  
0b75 32 a2 fd			ld (debug_mark+2),a  
0b78 18 03			jr .pastdmark  
0b7a ..			.dmark: db "AP1"  
0b7d f1			.pastdmark: pop af  
0b7e			endm  
# End of macro DMARK
0b7e					CALLMONITOR 
0b7e cd aa fd			call debug_vector  
0b81				endm  
# End of macro CALLMONITOR
0b81				endif 
0b81			 
0b81 7d				ld a, l 
0b82 32 a3 f9			ld (store_tmpid), a 
0b85			 
0b85				; get file header  
0b85			 
0b85 16 00			ld d, 0			 ; file extent to locate - file name details at item 0 
0b87 3a a3 f9			ld a, (store_tmpid) 
0b8a 5f				ld e, a 
0b8b			 
0b8b 21 40 00				ld hl, STORE_BLOCK_PHY 
0b8e cd a7 07				call storage_findnextid 
0b91			 
0b91 cd 07 10			call ishlzero 
0b94 28 cc			jr z, .sa_notfound 
0b96			 
0b96 22 9a f9			ld (store_tmppageid), hl 
0b99			 
0b99				; TODO handle file id not found 
0b99			 
0b99				if DEBUG_STORESE 
0b99					DMARK "AP2" 
0b99 f5				push af  
0b9a 3a ae 0b			ld a, (.dmark)  
0b9d 32 a0 fd			ld (debug_mark),a  
0ba0 3a af 0b			ld a, (.dmark+1)  
0ba3 32 a1 fd			ld (debug_mark+1),a  
0ba6 3a b0 0b			ld a, (.dmark+2)  
0ba9 32 a2 fd			ld (debug_mark+2),a  
0bac 18 03			jr .pastdmark  
0bae ..			.dmark: db "AP2"  
0bb1 f1			.pastdmark: pop af  
0bb2			endm  
# End of macro DMARK
0bb2					CALLMONITOR 
0bb2 cd aa fd			call debug_vector  
0bb5				endm  
# End of macro CALLMONITOR
0bb5				endif 
0bb5			 
0bb5				; update file extent count 
0bb5			 
0bb5 11 af f9			ld de, store_page 
0bb8			 
0bb8 cd 74 04			call storage_read_block 
0bbb			 
0bbb				if DEBUG_STORESE 
0bbb					DMARK "AP3" 
0bbb f5				push af  
0bbc 3a d0 0b			ld a, (.dmark)  
0bbf 32 a0 fd			ld (debug_mark),a  
0bc2 3a d1 0b			ld a, (.dmark+1)  
0bc5 32 a1 fd			ld (debug_mark+1),a  
0bc8 3a d2 0b			ld a, (.dmark+2)  
0bcb 32 a2 fd			ld (debug_mark+2),a  
0bce 18 03			jr .pastdmark  
0bd0 ..			.dmark: db "AP3"  
0bd3 f1			.pastdmark: pop af  
0bd4			endm  
# End of macro DMARK
0bd4					CALLMONITOR 
0bd4 cd aa fd			call debug_vector  
0bd7				endm  
# End of macro CALLMONITOR
0bd7				endif 
0bd7			;	ld (store_tmppageid), hl 
0bd7			 
0bd7 3a b1 f9			ld a, (store_page+2) 
0bda 3c				inc a 
0bdb 32 b1 f9			ld (store_page+2), a 
0bde 32 a2 f9			ld (store_tmpext), a 
0be1				 
0be1				if DEBUG_STORESE 
0be1					DMARK "AP3" 
0be1 f5				push af  
0be2 3a f6 0b			ld a, (.dmark)  
0be5 32 a0 fd			ld (debug_mark),a  
0be8 3a f7 0b			ld a, (.dmark+1)  
0beb 32 a1 fd			ld (debug_mark+1),a  
0bee 3a f8 0b			ld a, (.dmark+2)  
0bf1 32 a2 fd			ld (debug_mark+2),a  
0bf4 18 03			jr .pastdmark  
0bf6 ..			.dmark: db "AP3"  
0bf9 f1			.pastdmark: pop af  
0bfa			endm  
# End of macro DMARK
0bfa					CALLMONITOR 
0bfa cd aa fd			call debug_vector  
0bfd				endm  
# End of macro CALLMONITOR
0bfd				endif 
0bfd 2a 9a f9			ld hl, (store_tmppageid) 
0c00 11 af f9			ld de, store_page 
0c03 cd d9 04			call storage_write_block 
0c06			 
0c06				; find free block 
0c06			 
0c06 11 00 00			ld de, 0			 ; file extent to locate 
0c09			 
0c09 21 40 00				ld hl, STORE_BLOCK_PHY 
0c0c cd a7 07				call storage_findnextid 
0c0f cd 07 10			call ishlzero 
0c12 ca 62 0b			jp z, .sa_notfound 
0c15			 
0c15					; TODO handle no space left 
0c15					 
0c15 22 9a f9				ld (store_tmppageid), hl 
0c18			 
0c18				if DEBUG_STORESE 
0c18					DMARK "AP4" 
0c18 f5				push af  
0c19 3a 2d 0c			ld a, (.dmark)  
0c1c 32 a0 fd			ld (debug_mark),a  
0c1f 3a 2e 0c			ld a, (.dmark+1)  
0c22 32 a1 fd			ld (debug_mark+1),a  
0c25 3a 2f 0c			ld a, (.dmark+2)  
0c28 32 a2 fd			ld (debug_mark+2),a  
0c2b 18 03			jr .pastdmark  
0c2d ..			.dmark: db "AP4"  
0c30 f1			.pastdmark: pop af  
0c31			endm  
# End of macro DMARK
0c31					CALLMONITOR 
0c31 cd aa fd			call debug_vector  
0c34				endm  
# End of macro CALLMONITOR
0c34				endif 
0c34					; init the buffer with zeros so we can id if the buffer is full or not 
0c34			 
0c34 e5					push hl 
0c35 c5					push bc 
0c36			 
0c36 21 af f9				ld hl, store_page 
0c39 06 40				ld b, STORE_BLOCK_PHY 
0c3b 3e 00				ld a, 0 
0c3d 77			.zeroblock:	ld (hl), a 
0c3e 23					inc hl 
0c3f 10 fc				djnz .zeroblock 
0c41			 
0c41 c1					pop bc 
0c42 e1					pop hl 
0c43			 
0c43					; construct block 
0c43			 
0c43 3a a3 f9				ld a, (store_tmpid) 
0c46 32 af f9				ld (store_page), a   ; file id 
0c49 3a a2 f9				ld a, (store_tmpext)   ; extent for this block 
0c4c 32 b0 f9				ld (store_page+1), a 
0c4f			 
0c4f e1					pop hl    ; get string to write 
0c50 06 3e				ld b, STORE_BLOCK_PHY-2       ; exclude count of file id and extent 
0c52 11 b1 f9				ld de, store_page+2 
0c55			 
0c55				if DEBUG_STORESE 
0c55					DMARK "AP5" 
0c55 f5				push af  
0c56 3a 6a 0c			ld a, (.dmark)  
0c59 32 a0 fd			ld (debug_mark),a  
0c5c 3a 6b 0c			ld a, (.dmark+1)  
0c5f 32 a1 fd			ld (debug_mark+1),a  
0c62 3a 6c 0c			ld a, (.dmark+2)  
0c65 32 a2 fd			ld (debug_mark+2),a  
0c68 18 03			jr .pastdmark  
0c6a ..			.dmark: db "AP5"  
0c6d f1			.pastdmark: pop af  
0c6e			endm  
# End of macro DMARK
0c6e					CALLMONITOR 
0c6e cd aa fd			call debug_vector  
0c71				endm  
# End of macro CALLMONITOR
0c71				endif 
0c71			 
0c71			 
0c71			 
0c71					; fill buffer with data until end of string or full block 
0c71			 
0c71 7e			.appd:		ld a, (hl) 
0c72 12					ld (de), a 
0c73 fe 00				cp 0 
0c75 28 04				jr z, .appdone 
0c77 23					inc hl 
0c78 13					inc de 
0c79 10 f6				djnz .appd 
0c7b			 
0c7b e5			.appdone:	push hl		 	; save current source in case we need to go around again 
0c7c f5					push af   		; save last byte dumped 
0c7d			 
0c7d			 
0c7d 2a 9a f9			ld hl, (store_tmppageid) 
0c80 11 af f9			ld de, store_page 
0c83				if DEBUG_STORESE 
0c83					DMARK "AP6" 
0c83 f5				push af  
0c84 3a 98 0c			ld a, (.dmark)  
0c87 32 a0 fd			ld (debug_mark),a  
0c8a 3a 99 0c			ld a, (.dmark+1)  
0c8d 32 a1 fd			ld (debug_mark+1),a  
0c90 3a 9a 0c			ld a, (.dmark+2)  
0c93 32 a2 fd			ld (debug_mark+2),a  
0c96 18 03			jr .pastdmark  
0c98 ..			.dmark: db "AP6"  
0c9b f1			.pastdmark: pop af  
0c9c			endm  
# End of macro DMARK
0c9c					CALLMONITOR 
0c9c cd aa fd			call debug_vector  
0c9f				endm  
# End of macro CALLMONITOR
0c9f				endif 
0c9f cd d9 04				call storage_write_block 
0ca2			 
0ca2			 
0ca2				; was that a full block of data written? 
0ca2				; any more to write out? 
0ca2			 
0ca2				; if yes then set vars and jump to start of function again 
0ca2			 
0ca2 f1					pop af 
0ca3 d1					pop de 
0ca4			 
0ca4 fe 00				cp 0		 ; no, string was fully written 
0ca6 c8					ret z 
0ca7			 
0ca7					; setup vars for next cycle 
0ca7			 
0ca7 3a a3 f9				ld a, (store_tmpid) 
0caa 6f					ld l, a 
0cab 26 00				ld h, 0 
0cad			 
0cad c3 64 0b			 	jp storage_append	 ; yes, need to write out some more 
0cb0			 
0cb0			 
0cb0			 
0cb0			 
0cb0			 
0cb0			 
0cb0			 
0cb0			if DEBUG_STORECF 
0cb0			storageput:	 
0cb0					ret 
0cb0			storageread: 
0cb0					ld hl, store_page 
0cb0					ld b, 200 
0cb0					ld a,0 
0cb0			.src:		ld (hl),a 
0cb0					inc hl 
0cb0					djnz .src 
0cb0					 
0cb0			 
0cb0					ld de, 0 
0cb0					ld bc, 1 
0cb0					ld hl, store_page 
0cb0					call cfRead 
0cb0			 
0cb0				call cfGetError 
0cb0				ld hl,scratch 
0cb0				call hexout 
0cb0				ld hl, scratch+2 
0cb0				ld a, 0 
0cb0				ld (hl),a 
0cb0				ld de, scratch 
0cb0				ld a,display_row_1 
0cb0				call str_at_display 
0cb0				call update_display 
0cb0			 
0cb0					ld hl, store_page 
0cb0					ld (os_cur_ptr),hl 
0cb0			 
0cb0					ret 
0cb0			endif 
0cb0			 
0cb0			 
0cb0			; Clear out the main buffer store (used to remove junk before writing a new block) 
0cb0			 
0cb0			storage_clear_page: 
0cb0 e5				push hl 
0cb1 d5				push de 
0cb2 c5				push bc 
0cb3 21 af f9			ld hl, store_page 
0cb6 3e 00			ld a, 0 
0cb8 77				ld (hl), a 
0cb9			 
0cb9 11 b0 f9			ld de, store_page+1 
0cbc 01 19 01			ld bc, STORE_BLOCK_LOG+1 
0cbf			 
0cbf ed b0			ldir 
0cc1				 
0cc1 c1				pop bc 
0cc2 d1				pop de 
0cc3 e1				pop hl 
0cc4 c9				ret 
0cc5			 
0cc5			; eof 
# End of file firmware_storage.asm
0cc5			  
0cc5			; support routines for above hardware abstraction layer  
0cc5			  
0cc5			include "firmware_general.asm"        ; general support functions  
0cc5			 
0cc5			; word look up 
0cc5			 
0cc5			; in 
0cc5			; a is the index 
0cc5			; hl is pointer start of array 
0cc5			; 
0cc5			; returns 
0cc5			; hl to the word 
0cc5			; 
0cc5			 
0cc5			table_lookup:  
0cc5 d5					push de 
0cc6 eb					ex de, hl 
0cc7			 
0cc7 6f					ld l, a 
0cc8 26 00				ld h, 0 
0cca 29					add hl, hl 
0ccb 19					add hl, de 
0ccc 7e					ld a, (hl) 
0ccd 23					inc hl 
0cce 66					ld h,(hl) 
0ccf 6f					ld l, a 
0cd0			 
0cd0 d1					pop de 
0cd1 c9					ret 
0cd2			 
0cd2			; Delay loops 
0cd2			 
0cd2			 
0cd2			 
0cd2			aDelayInMS: 
0cd2 c5				push bc 
0cd3 47				ld b,a 
0cd4			msdelay: 
0cd4 c5				push bc 
0cd5				 
0cd5			 
0cd5 01 41 00			ld bc,041h 
0cd8 cd f0 0c			call delayloop 
0cdb c1				pop bc 
0cdc 05				dec b 
0cdd 20 f5			jr nz,msdelay 
0cdf			 
0cdf			;if CPU_CLOCK_8MHZ 
0cdf			;msdelay8: 
0cdf			;	push bc 
0cdf			;	 
0cdf			; 
0cdf			;	ld bc,041h 
0cdf			;	call delayloop 
0cdf			;	pop bc 
0cdf			;	dec b 
0cdf			;	jr nz,msdelay8 
0cdf			;endif 
0cdf			 
0cdf			 
0cdf c1				pop bc 
0ce0 c9				ret 
0ce1			 
0ce1			 
0ce1			delay250ms: 
0ce1				;push de 
0ce1 01 00 40			ld bc, 04000h 
0ce4 c3 f0 0c			jp delayloop 
0ce7			delay500ms: 
0ce7				;push de 
0ce7 01 00 80			ld bc, 08000h 
0cea c3 f0 0c			jp delayloop 
0ced			delay1s: 
0ced				;push bc 
0ced			   ; Clobbers A, d and e 
0ced 01 00 00		    ld      bc,0      ; # 0ffffh = approx 1s 
0cf0			delayloop: 
0cf0 c5			    push bc 
0cf1			 
0cf1			if BASE_CPM 
0cf1				ld bc, CPM_DELAY_TUNE 
0cf1			.cpmloop: 
0cf1				push bc 
0cf1			 
0cf1			endif 
0cf1			 
0cf1			 
0cf1			 
0cf1			delayloopi: 
0cf1			;	push bc 
0cf1			;.dl: 
0cf1 cb 47		    bit     0,a    	; 8 
0cf3 cb 47		    bit     0,a    	; 8 
0cf5 cb 47		    bit     0,a    	; 8 
0cf7 e6 ff		    and     255  	; 7 
0cf9 0b			    dec     bc      	; 6 
0cfa 79			    ld      a,c     	; 4 
0cfb b0			    or      b     	; 4 
0cfc c2 f1 0c		    jp      nz,delayloopi   	; 10, total = 55 states/iteration 
0cff			    ; 65536 iterations * 55 states = 3604480 states = 2.00248 seconds 
0cff				;pop de 
0cff			;pop bc 
0cff			 
0cff			if BASE_CPM 
0cff				pop bc 
0cff				 
0cff			    dec     bc      	; 6 
0cff			    ld      a,c     	; 4 
0cff			    or      b     	; 4 
0cff			    jp      nz,.cpmloop   	; 10, total = 55 states/iteration 
0cff				 
0cff			 
0cff			endif 
0cff			;if CPU_CLOCK_8MHZ 
0cff			;    pop bc 
0cff			;    push bc 
0cff			;.dl8: 
0cff			;    bit     0,a    	; 8 
0cff			;    bit     0,a    	; 8 
0cff			;    bit     0,a    	; 8 
0cff			;    and     255  	; 7 
0cff			;    dec     bc      	; 6 
0cff			;    ld      a,c     	; 4 
0cff			;    or      b     	; 4 
0cff			;    jp      nz,.dl8   	; 10, total = 55 states/iteration 
0cff			;endif 
0cff			 
0cff			;if CPU_CLOCK_10MHZ 
0cff			;    pop bc 
0cff			;    push bc 
0cff			;.dl8: 
0cff			;    bit     0,a    	; 8 
0cff			;    bit     0,a    	; 8 
0cff			;    bit     0,a    	; 8 
0cff			;    and     255  	; 7 
0cff			;    dec     bc      	; 6 
0cff			;    ld      a,c     	; 4 
0cff			;    or      b     	; 4 
0cff			;    jp      nz,.dl8   	; 10, total = 55 states/iteration 
0cff			;endif 
0cff c1			    pop bc 
0d00			 
0d00 c9				ret 
0d01			 
0d01			 
0d01			 
0d01			; eof 
# End of file firmware_general.asm
0d01			include "firmware_display.asm"      ; frame buffer screen abstraction layer  
0d01			; display routines that use the physical hardware abstraction layer 
0d01			 
0d01			 
0d01			; Display an activity indicator 
0d01			; Each call returns the new char pointed to in hl 
0d01			 
0d01			active: 
0d01 3a fb fa			ld a, (display_active) 
0d04 fe 06			cp 6 
0d06			 
0d06 20 02			jr nz, .sne 
0d08				; gone past the last one reset sequence 
0d08 3e ff			ld a, 255 
0d0a			 
0d0a			.sne:   
0d0a				; get the next char in seq 
0d0a 3c				inc a 
0d0b 32 fb fa			ld (display_active), a 
0d0e			 
0d0e				; look up the string in the table 
0d0e 21 25 0d			ld hl, actseq 
0d11 cb 27			sla a 
0d13 cd de 0f			call addatohl 
0d16 cd bb 23			call loadwordinhl 
0d19			 
0d19				; forth will write the to string when pushing so move from rom to ram 
0d19			 
0d19 11 fc fa			ld de, display_active+1 
0d1c 01 02 00			ld bc, 2 
0d1f ed b0			ldir 
0d21			 
0d21 21 fc fa			ld hl, display_active+1 
0d24 c9				ret 
0d25				 
0d25				 
0d25			 
0d25			 
0d25			;db "|/-\|-\" 
0d25			 
0d25			actseq: 
0d25			 
0d25 33 0d		dw spin0 
0d27 35 0d		dw spin1 
0d29 37 0d		dw spin2 
0d2b 39 0d		dw spin3 
0d2d 37 0d		dw spin2 
0d2f 35 0d		dw spin1 
0d31 33 0d		dw spin0 
0d33			 
0d33 .. 00		spin0: db " ", 0 
0d35 .. 00		spin1: db "-", 0 
0d37 .. 00		spin2: db "+", 0 
0d39 .. 00		spin3: db "#", 0 
0d3b			 
0d3b			 
0d3b			; information window 
0d3b			 
0d3b			; pass hl with 1st string to display 
0d3b			; pass de with 2nd string to display 
0d3b			 
0d3b			info_panel: 
0d3b e5				push hl 
0d3c			 
0d3c 2a 01 fb			ld hl, (display_fb_active) 
0d3f e5				push hl    ; future de destination 
0d40 21 e6 fc				ld hl, display_fb0 
0d43 22 01 fb				ld (display_fb_active), hl 
0d46			 
0d46			;	call clear_display 
0d46			 
0d46				if BASE_CPM 
0d46				ld a, '.' 
0d46				else 
0d46 3e a5			ld a, 165 
0d48				endif 
0d48 cd af 0d			call fill_display 
0d4b			 
0d4b			 
0d4b 3e 55			ld a, display_row_3 + 5 
0d4d cd bd 0d			call str_at_display 
0d50			 
0d50 e1				pop hl 
0d51 d1				pop de 
0d52			 
0d52 e5				push hl 
0d53			 
0d53			 
0d53 3e 2d			ld a, display_row_2 + 5 
0d55 cd bd 0d			call str_at_display 
0d58			 
0d58			 
0d58 cd cd 0d			call update_display 
0d5b cd c0 1f			call next_page_prompt 
0d5e cd aa 0d			call clear_display 
0d61			 
0d61				 
0d61 21 45 fc				ld hl, display_fb1 
0d64 22 01 fb				ld (display_fb_active), hl 
0d67 cd cd 0d			call update_display 
0d6a			 
0d6a e1				pop hl 
0d6b			 
0d6b c9				ret 
0d6c			 
0d6c			 
0d6c			 
0d6c			 
0d6c			; TODO windowing? 
0d6c			 
0d6c			; TODO scroll line up 
0d6c			 
0d6c			scroll_up: 
0d6c			 
0d6c e5				push hl 
0d6d d5				push de 
0d6e c5				push bc 
0d6f			 
0d6f				; get frame buffer  
0d6f			 
0d6f 2a 01 fb			ld hl, (display_fb_active) 
0d72 e5				push hl    ; future de destination 
0d73			 
0d73 11 28 00			ld  de, display_cols 
0d76 19				add hl, de 
0d77			 
0d77 d1				pop de 
0d78			 
0d78				;ex de, hl 
0d78 01 9f 00			ld bc, display_fb_len -1  
0d7b			;if DEBUG_FORTH_WORDS 
0d7b			;	DMARK "SCL" 
0d7b			;	CALLMONITOR 
0d7b			;endif	 
0d7b ed b0			ldir 
0d7d			 
0d7d				; wipe bottom row 
0d7d			 
0d7d			 
0d7d 2a 01 fb			ld hl, (display_fb_active) 
0d80 11 a0 00			ld de, display_cols*display_rows 
0d83 19				add hl, de 
0d84 06 28			ld b, display_cols 
0d86 3e 20			ld a, ' ' 
0d88			.scwipe: 
0d88 77				ld (hl), a 
0d89 2b				dec hl 
0d8a 10 fc			djnz .scwipe 
0d8c			 
0d8c				;pop hl 
0d8c			 
0d8c c1				pop bc 
0d8d d1				pop de 
0d8e e1				pop hl 
0d8f			 
0d8f c9				ret 
0d90			 
0d90			 
0d90			;scroll_upo: 
0d90			;	ld de, display_row_1 
0d90			 ;	ld hl, display_row_2 
0d90			;	ld bc, display_cols 
0d90			;	ldir 
0d90			;	ld de, display_row_2 
0d90			 ;	ld hl, display_row_3 
0d90			;	ld bc, display_cols 
0d90			;	ldir 
0d90			;	ld de, display_row_3 
0d90			 ;	ld hl, display_row_4 
0d90			;	ld bc, display_cols 
0d90			;	ldir 
0d90			 
0d90			; TODO clear row 4 
0d90			 
0d90			;	ret 
0d90			 
0d90				 
0d90			scroll_down: 
0d90			 
0d90 e5				push hl 
0d91 d5				push de 
0d92 c5				push bc 
0d93			 
0d93				; get frame buffer  
0d93			 
0d93 2a 01 fb			ld hl, (display_fb_active) 
0d96			 
0d96 11 9f 00			ld de, display_fb_len - 1 
0d99 19				add hl, de 
0d9a			 
0d9a e5			push hl    ; future de destination 
0d9b			 
0d9b 11 28 00			ld  de, display_cols 
0d9e ed 52			sbc hl, de 
0da0			 
0da0			 
0da0 d1				pop de 
0da1			 
0da1			;	ex de, hl 
0da1 01 9f 00			ld bc, display_fb_len -1  
0da4			 
0da4			 
0da4				 
0da4			 
0da4 ed b0			ldir 
0da6			 
0da6				; wipe bottom row 
0da6			 
0da6			 
0da6			;	ld hl, (display_fb_active) 
0da6			;;	ld de, display_cols*display_rows 
0da6			;;	add hl, de 
0da6			;	ld b, display_cols 
0da6			;	ld a, ' ' 
0da6			;.scwiped: 
0da6			;	ld (hl), a 
0da6			;	dec hl 
0da6			;	djnz .scwiped 
0da6			 
0da6				;pop hl 
0da6			 
0da6 c1				pop bc 
0da7 d1				pop de 
0da8 e1				pop hl 
0da9			 
0da9 c9				ret 
0daa			;scroll_down: 
0daa			;	ld de, display_row_4 
0daa			;	ld hl, display_row_3 
0daa			;	ld bc, display_cols 
0daa			;	ldir 
0daa			;	ld de, display_row_3 
0daa			; 	ld hl, display_row_2 
0daa			;	ld bc, display_cols 
0daa			;	ldir 
0daa			;	ld de, display_row_2 
0daa			;	ld hl, display_row_1 
0daa			;	ld bc, display_cols 
0daa			;	ldir 
0daa			;;; TODO clear row 1 
0daa			;	ret 
0daa			 
0daa			 
0daa			 
0daa			 
0daa			 
0daa			; clear active frame buffer 
0daa			 
0daa			clear_display: 
0daa 3e 20			ld a, ' ' 
0dac c3 af 0d			jp fill_display 
0daf			 
0daf			; fill active frame buffer with a char in A 
0daf			 
0daf			fill_display: 
0daf 06 a0			ld b,display_fb_len 
0db1 2a 01 fb			ld hl, (display_fb_active) 
0db4 77			.fd1:	ld (hl),a 
0db5 23				inc hl 
0db6 10 fc			djnz .fd1 
0db8 23				inc hl 
0db9 3e 00			ld a,0 
0dbb 77				ld (hl),a 
0dbc			 
0dbc			 
0dbc c9				ret 
0dbd			; Write string (DE) at pos (A) to active frame buffer 
0dbd			 
0dbd 2a 01 fb		str_at_display:    ld hl,(display_fb_active) 
0dc0 06 00					ld b,0 
0dc2 4f					ld c,a 
0dc3 09					add hl,bc 
0dc4 1a			.sad1: 		LD   A, (DE)        ;Get character from string 
0dc5 b7			            OR   A              ;Null terminator? 
0dc6 c8			            RET  Z              ;Yes, so finished 
0dc7 77					ld (hl),a 
0dc8 23				inc hl 
0dc9 13			            INC  DE             ;Point to next character 
0dca 18 f8		            JR   .sad1     ;Repeat 
0dcc c9					ret 
0dcd			 
0dcd			; using current frame buffer write to physical display 
0dcd			 
0dcd			update_display: 
0dcd e5				push hl 
0dce 2a 01 fb			ld hl, (display_fb_active) 
0dd1 cd ec 71			call write_display 
0dd4 e1				pop hl 
0dd5 c9				ret 
0dd6			 
0dd6			; TODO scrolling 
0dd6			 
0dd6			 
0dd6			; move cursor right one char 
0dd6			cursor_right: 
0dd6			 
0dd6				; TODO shift right 
0dd6				; TODO if beyond max col 
0dd6				; TODO       cursor_next_line 
0dd6			 
0dd6 c9				ret 
0dd7			 
0dd7			 
0dd7			cursor_next_line: 
0dd7				; TODO first char 
0dd7				; TODO line down 
0dd7				; TODO if past last row 
0dd7				; TODO    scroll up 
0dd7			 
0dd7 c9				ret 
0dd8			 
0dd8			cursor_left: 
0dd8				; TODO shift left 
0dd8				; TODO if beyond left  
0dd8				; TODO     cursor prev line 
0dd8				 
0dd8 c9				ret 
0dd9			 
0dd9			cursor_prev_line: 
0dd9				; TODO last char 
0dd9				; TODO line up 
0dd9				; TODO if past first row 
0dd9				; TODO   scroll down 
0dd9			 
0dd9 c9				ret 
0dda			 
0dda			 
0dda			cout: 
0dda				; A - char 
0dda c9				ret 
0ddb			 
0ddb			 
0ddb			; Display a menu and allow item selection (optional toggle items) 
0ddb			; 
0ddb			; format: 
0ddb			; hl pointer to word array with zero term for items 
0ddb			; e.g.    db item1 
0ddb			;         db .... 
0ddb			;         db 0 
0ddb			; 
0ddb			; a = starting menu item  
0ddb			; 
0ddb			; de = pointer item toggle array   (todo) 
0ddb			; 
0ddb			; returns item selected in a 1-... 
0ddb			; returns 0 if back button pressed 
0ddb			; 
0ddb			; NOTE: Uses system frame buffer to display 
0ddb			; 
0ddb			; LEFT, Q = go back 
0ddb			; RIGHT, SPACE, CR = select 
0ddb			; UP, A - Up 
0ddb			; DOWN, Z - Down 
0ddb			 
0ddb			 
0ddb			 
0ddb			 
0ddb			 
0ddb			menu: 
0ddb			 
0ddb					; keep array pointer 
0ddb			 
0ddb 22 a8 f9				ld (store_tmp1), hl 
0dde 32 a6 f9				ld (store_tmp2), a 
0de1			 
0de1					; check for key bounce 
0de1			 
0de1			if BASE_KEV 
0de1			 
0de1 cd 37 75		.mbounce:	call cin 
0de4 fe 00				cp 0 
0de6 20 f9				jr nz, .mbounce 
0de8			endif 
0de8					; for ease use ex 
0de8			 
0de8					; use menu on fb0 so as not to disrupt user screens ie a menu popup 
0de8 21 e6 fc				ld hl, display_fb0 
0deb 22 01 fb				ld (display_fb_active), hl 
0dee			 
0dee cd aa 0d		.mloop:		call clear_display 
0df1 cd cd 0d				call update_display 
0df4			 
0df4					; draw selection id '>' at 1 
0df4			 
0df4					; init start of list display 
0df4			 
0df4 3e 05				ld a, 5 
0df6 32 a4 f9				ld (store_tmp3), a   ; display row count 
0df9 3a a6 f9				ld a,( store_tmp2) 
0dfc 32 a7 f9				ld (store_tmp2+1), a   ; display item count 
0dff			 
0dff					 
0dff			.mitem:	 
0dff			 
0dff			 
0dff 3a a7 f9				ld a,(store_tmp2+1) 
0e02 6f					ld l, a 
0e03 26 00				ld h, 0 
0e05 29					add hl, hl 
0e06 ed 5b a8 f9			ld de, (store_tmp1) 
0e0a 19					add hl, de 
0e0b 7e					ld a, (hl) 
0e0c 23					inc hl 
0e0d 66					ld h,(hl) 
0e0e 6f					ld l, a 
0e0f			 
0e0f cd 07 10				call ishlzero 
0e12 28 1a				jr z, .mdone 
0e14			 
0e14 eb					ex de, hl 
0e15 3a a4 f9				ld a, (store_tmp3) 
0e18 cd bd 0d				call str_at_display 
0e1b					 
0e1b			 
0e1b					; next item 
0e1b 3a a7 f9				ld a, (store_tmp2+1) 
0e1e 3c					inc a 
0e1f 32 a7 f9				ld (store_tmp2+1), a   ; display item count 
0e22			 
0e22			 		; next row 
0e22			 
0e22 3a a4 f9				ld a, (store_tmp3) 
0e25 c6 28				add display_cols 
0e27 32 a4 f9				ld (store_tmp3), a 
0e2a			 
0e2a					; at end of screen? 
0e2a			 
0e2a fe 10				cp display_rows*4 
0e2c 20 d1				jr nz, .mitem 
0e2e			 
0e2e			 
0e2e			.mdone: 
0e2e cd 07 10				call ishlzero 
0e31 28 08				jr z, .nodn 
0e33			 
0e33 3e 78				ld a, display_row_4 
0e35 11 b4 0e				ld de, .mdown 
0e38 cd bd 0d				call str_at_display 
0e3b			 
0e3b					; draw options to fill the screens with active item on line 1 
0e3b					; if current option is 2 or more then display ^ in top 
0e3b			 
0e3b 3a a6 f9		.nodn:		ld a, (store_tmp2) 
0e3e fe 00				cp 0 
0e40 28 08				jr z, .noup 
0e42			 
0e42 3e 00				ld a, 0 
0e44 11 b2 0e				ld de, .mup 
0e47 cd bd 0d				call str_at_display 
0e4a			 
0e4a 3e 02		.noup:		ld a, 2 
0e4c 11 b0 0e				ld de, .msel 
0e4f cd bd 0d				call str_at_display 
0e52			 
0e52					; if current option + 1 is not null then display V in bottom 
0e52					; get key 
0e52 cd cd 0d				call update_display 
0e55			 
0e55			 
0e55					; handle key 
0e55			 
0e55 cd 26 75				call cin_wait 
0e58			 
0e58 fe 05				cp KEY_UP 
0e5a 28 2b				jr z, .mgoup 
0e5c fe 61				cp 'a' 
0e5e 28 27				jr z, .mgoup 
0e60 fe 0a				cp KEY_DOWN 
0e62 28 32				jr z, .mgod 
0e64 fe 7a				cp 'z' 
0e66 28 2e				jr z, .mgod 
0e68 fe 20				cp ' ' 
0e6a 28 34				jr z, .goend 
0e6c fe 0c				cp KEY_RIGHT 
0e6e 28 30				jr z, .goend 
0e70 fe 0d				cp KEY_CR 
0e72 28 2c				jr z, .goend 
0e74 fe 71				cp 'q' 
0e76 28 0b				jr z, .goback 
0e78			 
0e78 fe 0b				cp KEY_LEFT 
0e7a 28 07				jr z, .goback 
0e7c fe 08				cp KEY_BS 
0e7e 28 03				jr z, .goback 
0e80 c3 ee 0d				jp .mloop 
0e83			 
0e83			.goback: 
0e83 3e 00			ld a, 0 
0e85 18 1d			jr .goend2 
0e87			 
0e87				; move up one 
0e87			.mgoup: 
0e87 3a a6 f9				ld a, (store_tmp2) 
0e8a fe 00				cp 0 
0e8c ca ee 0d				jp z, .mloop 
0e8f 3d					dec a 
0e90 32 a6 f9				ld (store_tmp2), a 
0e93 c3 ee 0d				jp .mloop 
0e96			 
0e96				; move down one 
0e96			.mgod: 
0e96 3a a6 f9				ld a, (store_tmp2) 
0e99 3c					inc a 
0e9a 32 a6 f9				ld (store_tmp2), a 
0e9d c3 ee 0d				jp .mloop 
0ea0			 
0ea0			 
0ea0			.goend: 
0ea0					; get selected item number 
0ea0			 
0ea0 3a a6 f9				ld a, (store_tmp2) 
0ea3 3c					inc a 
0ea4			 
0ea4			.goend2: 
0ea4 f5					push af 
0ea5			 
0ea5					; restore active fb 
0ea5					; TODO BUG assumes fb1 
0ea5			 
0ea5 21 45 fc				ld hl, display_fb1 
0ea8 22 01 fb				ld (display_fb_active), hl 
0eab			 
0eab					; restore main regs 
0eab			 
0eab			 
0eab cd cd 0d				call update_display 
0eae			 
0eae f1					pop af 
0eaf			 
0eaf c9				ret 
0eb0			 
0eb0 .. 00		.msel:   db ">",0 
0eb2 .. 00		.mup:   db "^",0 
0eb4 .. 00		.mdown:   db "v",0 
0eb6			 
0eb6			 
0eb6			; eof 
0eb6			 
# End of file firmware_display.asm
0eb6			include "firmware_maths.asm"     ; any odd maths stuff   TODO removed until I fix up the rng code  
0eb6			; random number generators 
0eb6			 
0eb6			 
0eb6			; https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random 
0eb6			 
0eb6			 
0eb6			;-----> Generate a random number 
0eb6			; output a=answer 0<=a<=255 
0eb6			; all registers are preserved except: af 
0eb6			random: 
0eb6 e5			        push    hl 
0eb7 d5			        push    de 
0eb8 2a e0 fa		        ld      hl,(randData) 
0ebb ed 5f		        ld      a,r 
0ebd 57			        ld      d,a 
0ebe 5e			        ld      e,(hl) 
0ebf 19			        add     hl,de 
0ec0 85			        add     a,l 
0ec1 ac			        xor     h 
0ec2 22 e0 fa		        ld      (randData),hl 
0ec5 d1			        pop     de 
0ec6 e1			        pop     hl 
0ec7 c9			        ret 
0ec8			 
0ec8			 
0ec8			; randData here must be a 2 byte seed located in ram. While this is a fast generator, it's generally not considered very good in terms of randomness. 
0ec8			 
0ec8			 
0ec8			 
0ec8			;------LFSR------ 
0ec8			;James Montelongo 
0ec8			;optimized by Spencer Putt 
0ec8			;out: 
0ec8			; a = 8 bit random number 
0ec8			RandLFSR: 
0ec8 21 e6 fa		        ld hl,LFSRSeed+4 
0ecb 5e			        ld e,(hl) 
0ecc 23			        inc hl 
0ecd 56			        ld d,(hl) 
0ece 23			        inc hl 
0ecf 4e			        ld c,(hl) 
0ed0 23			        inc hl 
0ed1 7e			        ld a,(hl) 
0ed2 47			        ld b,a 
0ed3 cb 13		        rl e  
0ed5 cb 12			rl d 
0ed7 cb 11		        rl c  
0ed9 17				rla 
0eda cb 13		        rl e  
0edc cb 12			rl d 
0ede cb 11		        rl c  
0ee0 17				rla 
0ee1 cb 13		        rl e  
0ee3 cb 12			rl d 
0ee5 cb 11		        rl c  
0ee7 17				rla 
0ee8 67			        ld h,a 
0ee9 cb 13		        rl e  
0eeb cb 12			rl d 
0eed cb 11		        rl c  
0eef 17				rla 
0ef0 a8			        xor b 
0ef1 cb 13		        rl e  
0ef3 cb 12			rl d 
0ef5 ac			        xor h 
0ef6 a9			        xor c 
0ef7 aa			        xor d 
0ef8 21 e8 fa		        ld hl,LFSRSeed+6 
0efb 11 e9 fa		        ld de,LFSRSeed+7 
0efe 01 07 00		        ld bc,7 
0f01 ed b8		        lddr 
0f03 12			        ld (de),a 
0f04 c9			        ret 
0f05			 
0f05			;While this may produces better numbers, it is slower, larger and requires a bigger seed than ionrandom. Assuming theres is a good seed to start, it should generate ~2^56 bytes before repeating. However if there is not a good seed(0 for example), then the numbers created will not be adequate. Unlike Ionrandom and its use of the r register, starting with the same seed the same numbers will be generated. With Ionrandom the code running may have an impact on the number generated. This means this method requires more initialization. 
0f05			 
0f05			;You can initialize with TI-OS's seeds, stored at seed1 and seed2, both are ti-floats but will serve the purpose.  
0f05			 
0f05			 
0f05			;This is a very fast, quality pseudo-random number generator. It combines a 16-bit Linear Feedback Shift Register and a 16-bit LCG. 
0f05			 
0f05			prng16: 
0f05			;Inputs: 
0f05			;   (seed1) contains a 16-bit seed value 
0f05			;   (seed2) contains a NON-ZERO 16-bit seed value 
0f05			;Outputs: 
0f05			;   HL is the result 
0f05			;   BC is the result of the LCG, so not that great of quality 
0f05			;   DE is preserved 
0f05			;Destroys: 
0f05			;   AF 
0f05			;cycle: 4,294,901,760 (almost 4.3 billion) 
0f05			;160cc 
0f05			;26 bytes 
0f05 2a da fa		    ld hl,(seed1) 
0f08 44			    ld b,h 
0f09 4d			    ld c,l 
0f0a 29			    add hl,hl 
0f0b 29			    add hl,hl 
0f0c 2c			    inc l 
0f0d 09			    add hl,bc 
0f0e 22 da fa		    ld (seed1),hl 
0f11 2a d8 fa		    ld hl,(seed2) 
0f14 29			    add hl,hl 
0f15 9f			    sbc a,a 
0f16 e6 2d		    and %00101101 
0f18 ad			    xor l 
0f19 6f			    ld l,a 
0f1a 22 d8 fa		    ld (seed2),hl 
0f1d 09			    add hl,bc 
0f1e c9			    ret 
0f1f			 
0f1f			;On their own, LCGs and LFSRs don't produce great results and are generally very cyclical, but they are very fast to compute. The 16-bit LCG in the above example will bounce around and reach each number from 0 to 65535, but the lower bits are far more predictable than the upper bits. The LFSR mixes up the predictability of a given bit's state, but it hits every number except 0, meaning there is a slightly higher chance of any given bit in the result being a 1 instead of a 0. It turns out that by adding together the outputs of these two generators, we can lose the predictability of a bit's state, while ensuring it has a 50% chance of being 0 or 1. As well, since the periods, 65536 and 65535 are coprime, then the overall period of the generator is 65535*65536, which is over 4 billion.  
0f1f			 
0f1f			rand32: 
0f1f			;Inputs: 
0f1f			;   (seed1_0) holds the lower 16 bits of the first seed 
0f1f			;   (seed1_1) holds the upper 16 bits of the first seed 
0f1f			;   (seed2_0) holds the lower 16 bits of the second seed 
0f1f			;   (seed2_1) holds the upper 16 bits of the second seed 
0f1f			;   **NOTE: seed2 must be non-zero 
0f1f			;Outputs: 
0f1f			;   HL is the result 
0f1f			;   BC,DE can be used as lower quality values, but are not independent of HL. 
0f1f			;Destroys: 
0f1f			;   AF 
0f1f			;Tested and passes all CAcert tests 
0f1f			;Uses a very simple 32-bit LCG and 32-bit LFSR 
0f1f			;it has a period of 18,446,744,069,414,584,320 
0f1f			;roughly 18.4 quintillion. 
0f1f			;LFSR taps: 0,2,6,7  = 11000101 
0f1f			;291cc 
0f1f			;seed1_0=$+1 
0f1f			;    ld hl,12345 
0f1f			;seed1_1=$+1 
0f1f			;    ld de,6789 
0f1f			;    ld b,h 
0f1f			;    ld c,l 
0f1f			;    add hl,hl \ rl e \ rl d 
0f1f			;    add hl,hl \ rl e \ rl d 
0f1f			;    inc l 
0f1f			;    add hl,bc 
0f1f			;    ld (seed1_0),hl 
0f1f			;    ld hl,(seed1_1) 
0f1f			;    adc hl,de 
0f1f			;    ld (seed1_1),hl 
0f1f			;    ex de,hl 
0f1f			;seed2_0=$+1 
0f1f			;    ld hl,9876 
0f1f			;seed2_1=$+1 
0f1f			;    ld bc,54321 
0f1f			;    add hl,hl \ rl c \ rl b 
0f1f			;    ld (seed2_1),bc 
0f1f			;    sbc a,a 
0f1f			;    and %11000101 
0f1f			;    xor l 
0f1f			;    ld l,a 
0f1f			;    ld (seed2_0),hl 
0f1f			;    ex de,hl 
0f1f			;    add hl,bc 
0f1f			;    ret 
0f1f			; 
0f1f			 
0f1f			; 16-bit xorshift pseudorandom number generator by John Metcalf 
0f1f			; 20 bytes, 86 cycles (excluding ret) 
0f1f			 
0f1f			; returns   hl = pseudorandom number 
0f1f			; corrupts   a 
0f1f			 
0f1f			; generates 16-bit pseudorandom numbers with a period of 65535 
0f1f			; using the xorshift method: 
0f1f			 
0f1f			; hl ^= hl << 7 
0f1f			; hl ^= hl >> 9 
0f1f			; hl ^= hl << 8 
0f1f			 
0f1f			; some alternative shift triplets which also perform well are: 
0f1f			; 6, 7, 13; 7, 9, 13; 9, 7, 13. 
0f1f			 
0f1f			;  org 32768 
0f1f			 
0f1f			xrnd: 
0f1f 2a de fa		  ld hl,(xrandc)       ; seed must not be 0 
0f22 3e 00		  ld a,0 
0f24 bd			  cp l 
0f25 20 02		  jr nz, .xrnd1 
0f27 2e 01		  ld l, 1 
0f29			.xrnd1: 
0f29			 
0f29 7c			  ld a,h 
0f2a 1f			  rra 
0f2b 7d			  ld a,l 
0f2c 1f			  rra 
0f2d ac			  xor h 
0f2e 67			  ld h,a 
0f2f 7d			  ld a,l 
0f30 1f			  rra 
0f31 7c			  ld a,h 
0f32 1f			  rra 
0f33 ad			  xor l 
0f34 6f			  ld l,a 
0f35 ac			  xor h 
0f36 67			  ld h,a 
0f37			 
0f37 22 de fa		  ld (xrandc),hl 
0f3a			 
0f3a c9			  ret 
0f3b			;  
0f3b			 
0f3b			 
0f3b			;;;; int maths 
0f3b			 
0f3b			; https://map.grauw.nl/articles/mult_div_shifts.php 
0f3b			; Divide 16-bit values (with 16-bit result) 
0f3b			; In: Divide BC by divider DE 
0f3b			; Out: BC = result, HL = rest 
0f3b			; 
0f3b			Div16: 
0f3b 21 00 00		    ld hl,0 
0f3e 78			    ld a,b 
0f3f 06 08		    ld b,8 
0f41			Div16_Loop1: 
0f41 17			    rla 
0f42 ed 6a		    adc hl,hl 
0f44 ed 52		    sbc hl,de 
0f46 30 01		    jr nc,Div16_NoAdd1 
0f48 19			    add hl,de 
0f49			Div16_NoAdd1: 
0f49 10 f6		    djnz Div16_Loop1 
0f4b 17			    rla 
0f4c 2f			    cpl 
0f4d 47			    ld b,a 
0f4e 79			    ld a,c 
0f4f 48			    ld c,b 
0f50 06 08		    ld b,8 
0f52			Div16_Loop2: 
0f52 17			    rla 
0f53 ed 6a		    adc hl,hl 
0f55 ed 52		    sbc hl,de 
0f57 30 01		    jr nc,Div16_NoAdd2 
0f59 19			    add hl,de 
0f5a			Div16_NoAdd2: 
0f5a 10 f6		    djnz Div16_Loop2 
0f5c 17			    rla 
0f5d 2f			    cpl 
0f5e 41			    ld b,c 
0f5f 4f			    ld c,a 
0f60 c9			ret 
0f61			 
0f61			 
0f61			;http://z80-heaven.wikidot.com/math 
0f61			; 
0f61			;Inputs: 
0f61			;     DE and A are factors 
0f61			;Outputs: 
0f61			;     A is not changed 
0f61			;     B is 0 
0f61			;     C is not changed 
0f61			;     DE is not changed 
0f61			;     HL is the product 
0f61			;Time: 
0f61			;     342+6x 
0f61			; 
0f61			Mult16: 
0f61			 
0f61 06 08		     ld b,8          ;7           7 
0f63 21 00 00		     ld hl,0         ;10         10 
0f66 29			       add hl,hl     ;11*8       88 
0f67 07			       rlca          ;4*8        32 
0f68 30 01		       jr nc,$+3     ;(12|18)*8  96+6x 
0f6a 19			         add hl,de   ;--         -- 
0f6b 10 f9		       djnz $-5      ;13*7+8     99 
0f6d c9			ret 
0f6e			 
0f6e			; 
0f6e			; Square root of 16-bit value 
0f6e			; In:  HL = value 
0f6e			; Out:  D = result (rounded down) 
0f6e			; 
0f6e			;Sqr16: 
0f6e			;    ld de,#0040 
0f6e			;    ld a,l 
0f6e			;    ld l,h 
0f6e			;    ld h,d 
0f6e			;    or a 
0f6e			;    ld b,8 
0f6e			;Sqr16_Loop: 
0f6e			;    sbc hl,de 
0f6e			;    jr nc,Sqr16_Skip 
0f6e			;    add hl,de 
0f6e			;Sqr16_Skip: 
0f6e			;    ccf 
0f6e			;    rl d 
0f6e			;    add a,a 
0f6e			;    adc hl,hl 
0f6e			;    add a,a 
0f6e			;    adc hl,hl 
0f6e			;    djnz Sqr16_Loop 
0f6e			;    ret 
0f6e			; 
0f6e			; 
0f6e			; Divide 8-bit values 
0f6e			; In: Divide E by divider C 
0f6e			; Out: A = result, B = rest 
0f6e			; 
0f6e			Div8: 
0f6e af			    xor a 
0f6f 06 08		    ld b,8 
0f71			Div8_Loop: 
0f71 cb 13		    rl e 
0f73 17			    rla 
0f74 91			    sub c 
0f75 30 01		    jr nc,Div8_NoAdd 
0f77 81			    add a,c 
0f78			Div8_NoAdd: 
0f78 10 f7		    djnz Div8_Loop 
0f7a 47			    ld b,a 
0f7b 7b			    ld a,e 
0f7c 17			    rla 
0f7d 2f			    cpl 
0f7e c9			    ret 
0f7f			 
0f7f			; 
0f7f			; Multiply 8-bit value with a 16-bit value (unrolled) 
0f7f			; In: Multiply A with DE 
0f7f			; Out: HL = result 
0f7f			; 
0f7f			Mult12U: 
0f7f 2e 00		    ld l,0 
0f81 87			    add a,a 
0f82 30 01		    jr nc,Mult12U_NoAdd0 
0f84 19			    add hl,de 
0f85			Mult12U_NoAdd0: 
0f85 29			    add hl,hl 
0f86 87			    add a,a 
0f87 30 01		    jr nc,Mult12U_NoAdd1 
0f89 19			    add hl,de 
0f8a			Mult12U_NoAdd1: 
0f8a 29			    add hl,hl 
0f8b 87			    add a,a 
0f8c 30 01		    jr nc,Mult12U_NoAdd2 
0f8e 19			    add hl,de 
0f8f			Mult12U_NoAdd2: 
0f8f 29			    add hl,hl 
0f90 87			    add a,a 
0f91 30 01		    jr nc,Mult12U_NoAdd3 
0f93 19			    add hl,de 
0f94			Mult12U_NoAdd3: 
0f94 29			    add hl,hl 
0f95 87			    add a,a 
0f96 30 01		    jr nc,Mult12U_NoAdd4 
0f98 19			    add hl,de 
0f99			Mult12U_NoAdd4: 
0f99 29			    add hl,hl 
0f9a 87			    add a,a 
0f9b 30 01		    jr nc,Mult12U_NoAdd5 
0f9d 19			    add hl,de 
0f9e			Mult12U_NoAdd5: 
0f9e 29			    add hl,hl 
0f9f 87			    add a,a 
0fa0 30 01		    jr nc,Mult12U_NoAdd6 
0fa2 19			    add hl,de 
0fa3			Mult12U_NoAdd6: 
0fa3 29			    add hl,hl 
0fa4 87			    add a,a 
0fa5 d0			    ret nc 
0fa6 19			    add hl,de 
0fa7 c9			    ret 
0fa8			 
0fa8			; 
0fa8			; Multiply 8-bit value with a 16-bit value (right rotating) 
0fa8			; In: Multiply A with DE 
0fa8			;      Put lowest value in A for most efficient calculation 
0fa8			; Out: HL = result 
0fa8			; 
0fa8			Mult12R: 
0fa8 21 00 00		    ld hl,0 
0fab			Mult12R_Loop: 
0fab cb 3f		    srl a 
0fad 30 01		    jr nc,Mult12R_NoAdd 
0faf 19			    add hl,de 
0fb0			Mult12R_NoAdd: 
0fb0 cb 23		    sla e 
0fb2 cb 12		    rl d 
0fb4 b7			    or a 
0fb5 c2 ab 0f		    jp nz,Mult12R_Loop 
0fb8 c9			    ret 
0fb9			 
0fb9			; 
0fb9			; Multiply 16-bit values (with 32-bit result) 
0fb9			; In: Multiply BC with DE 
0fb9			; Out: BCHL = result 
0fb9			; 
0fb9			Mult32: 
0fb9 79			    ld a,c 
0fba 48			    ld c,b 
0fbb 21 00 00		    ld hl,0 
0fbe 06 10		    ld b,16 
0fc0			Mult32_Loop: 
0fc0 29			    add hl,hl 
0fc1 17			    rla 
0fc2 cb 11		    rl c 
0fc4 30 07		    jr nc,Mult32_NoAdd 
0fc6 19			    add hl,de 
0fc7 ce 00		    adc a,0 
0fc9 d2 cd 0f		    jp nc,Mult32_NoAdd 
0fcc 0c			    inc c 
0fcd			Mult32_NoAdd: 
0fcd 10 f1		    djnz Mult32_Loop 
0fcf 41			    ld b,c 
0fd0 4f			    ld c,a 
0fd1 c9			    ret 
0fd2			 
0fd2			 
0fd2			 
0fd2			; 
0fd2			; Multiply 8-bit values 
0fd2			; In:  Multiply H with E 
0fd2			; Out: HL = result 
0fd2			; 
0fd2			Mult8: 
0fd2 16 00		    ld d,0 
0fd4 6a			    ld l,d 
0fd5 06 08		    ld b,8 
0fd7			Mult8_Loop: 
0fd7 29			    add hl,hl 
0fd8 30 01		    jr nc,Mult8_NoAdd 
0fda 19			    add hl,de 
0fdb			Mult8_NoAdd: 
0fdb 10 fa		    djnz Mult8_Loop 
0fdd c9			    ret 
0fde			 
0fde			 
0fde			 
0fde			 
0fde			 
0fde			 
0fde			 
0fde			 
0fde			;;http://z80-heaven.wikidot.com/math 
0fde			;;This divides DE by BC, storing the result in DE, remainder in HL 
0fde			; 
0fde			;DE_Div_BC:          ;1281-2x, x is at most 16 
0fde			;     ld a,16        ;7 
0fde			;     ld hl,0        ;10 
0fde			;     jp $+5         ;10 
0fde			;.DivLoop: 
0fde			;       add hl,bc    ;-- 
0fde			;       dec a        ;64 
0fde			;       jr z,.DivLoopEnd        ;86 
0fde			; 
0fde			;       sla e        ;128 
0fde			;       rl d         ;128 
0fde			;       adc hl,hl    ;240 
0fde			;       sbc hl,bc    ;240 
0fde			;       jr nc,.DivLoop ;23|21 
0fde			;       inc e        ;-- 
0fde			;       jp .DivLoop+1 
0fde			; 
0fde			;.DivLoopEnd: 
0fde			 
0fde			;HL_Div_C: 
0fde			;Inputs: 
0fde			;     HL is the numerator 
0fde			;     C is the denominator 
0fde			;Outputs: 
0fde			;     A is the remainder 
0fde			;     B is 0 
0fde			;     C is not changed 
0fde			;     DE is not changed 
0fde			;     HL is the quotient 
0fde			; 
0fde			;       ld b,16 
0fde			;       xor a 
0fde			;         add hl,hl 
0fde			;         rla 
0fde			;         cp c 
0fde			;         jr c,$+4 
0fde			;           inc l 
0fde			;           sub c 
0fde			;         djnz $-7 
0fde			 
0fde			; https://plutiedev.com/z80-add-8bit-to-16bit 
0fde			 
0fde			addatohl: 
0fde 85			    add   a, l    ; A = A+L 
0fdf 6f			    ld    l, a    ; L = A+L 
0fe0 8c			    adc   a, h    ; A = A+L+H+carry 
0fe1 95			    sub   l       ; A = H+carry 
0fe2 67			    ld    h, a    ; H = H+carry 
0fe3 c9			ret 
0fe4			 
0fe4			addatode: 
0fe4 83			    add   a, e    ; A = A+L 
0fe5 5f			    ld    e, a    ; L = A+L 
0fe6 8a			    adc   a, d    ; A = A+L+H+carry 
0fe7 93			    sub   e       ; A = H+carry 
0fe8 57			    ld    d, a    ; H = H+carry 
0fe9 c9			ret 
0fea			 
0fea			 
0fea			addatobc: 
0fea 81			    add   a, c    ; A = A+L 
0feb 4f			    ld    c, a    ; L = A+L 
0fec 88			    adc   a, b    ; A = A+L+H+carry 
0fed 91			    sub   c       ; A = H+carry 
0fee 47			    ld    b, a    ; H = H+carry 
0fef c9			ret 
0ff0			 
0ff0			subafromhl: 
0ff0			   ; If A=0 do nothing 
0ff0			    ; Otherwise flip A's sign. Since 
0ff0			    ; the upper byte becomes -1, also 
0ff0			    ; substract 1 from H. 
0ff0 ed 44		    neg 
0ff2 ca fb 0f		    jp    z, Skip 
0ff5 25			    dec   h 
0ff6			     
0ff6			    ; Now add the low byte as usual 
0ff6			    ; Two's complement takes care of 
0ff6			    ; ensuring the result is correct 
0ff6 85			    add   a, l 
0ff7 6f			    ld    l, a 
0ff8 8c			    adc   a, h 
0ff9 95			    sub   l 
0ffa 67			    ld    h, a 
0ffb			Skip: 
0ffb c9				ret 
0ffc			 
0ffc			 
0ffc			; compare hl and de 
0ffc			; returns:  
0ffc			; if hl = de, z=1, s=0, c0=0 
0ffc			; if hl > de, z=0, s=0, c=0 
0ffc			; if hl < de, z=0, s=1, c=1 
0ffc			cmp16:	 
0ffc b7				or a 
0ffd ed 52			sbc hl,de 
0fff e0				ret po 
1000 7c				ld a,h 
1001 1f				rra 
1002 ee 40			xor 01000000B 
1004 37				scf 
1005 8f				adc a,a 
1006 c9				ret 
1007			 
1007			 
1007			; test if hl contains zero   - A is destroyed 
1007			 
1007			ishlzero:    
1007 b7				or a     ; reset flags 
1008 7c				ld a, h 
1009 b5				or l        	 
100a			 
100a c9				ret 
100b			 
100b			 
100b			 
100b			 
100b			if FORTH_ENABLE_FLOATMATH 
100b			;include "float/bbcmath.z80" 
100b			include "float/lpfpcalc.asm" 
100b			endif 
100b			 
100b			 
100b			; eof 
100b			 
# End of file firmware_maths.asm
100b			include "firmware_strings.asm"   ; string handling  
100b			 
100b			 
100b			; TODO string len 
100b			; input text string, end on cr with zero term 
100b			; a offset into frame buffer to start prompt 
100b			; d is max length 
100b			; e is display size TODO 
100b			; c is current cursor position 
100b			; hl is ptr to where string will be stored and edited directly 
100b			 
100b			 
100b			; TODO check limit of buffer for new inserts 
100b			; TODO check insert does not push beyond buffer 
100b			; TODO scroll in a limited display area 
100b			; TODO scroll whole screen on page wrap 
100b			 
100b			 
100b			; TODO use LCD cursor? 
100b			 
100b			EDIT_V1: equ 0 
100b			EDIT_V2: equ 1 
100b			 
100b			 
100b			 
100b			if EDIT_V2 
100b			input_str: 
100b			 
100b 32 99 fd			    	ld (input_at_pos),a      ; save display position to start 
100e			;		ld (input_at_cursor),a	; save draw pos of cursor relative to start 
100e 22 9c fd				ld (input_start), hl     ; save ptr to buffer 
1011			;		ld a, c 
1011			;		call addatohl 
1011			;		ld (input_ptr), hl     ; save ptr to point under the cursor 
1011 7a					ld a,d 
1012 32 9b fd			        ld (input_size), a       ; save length of input area 
1015 79					ld a, c 
1016 32 8a fd				ld (input_cursor),a      ; init cursor start position relative to start of string 
1019 7b					ld a,e 
101a 32 9a fd			        ld (input_display_size), a       ; save length of input area that is displayed TODO 
101d			 
101d			 
101d					; add a trailing space to make screen refresh nicer 
101d			 
101d					;ld hl, (input_start) 
101d					;push hl 
101d					;ld a, 0 
101d					;call strlent 
101d					;ld a, l 
101d					;pop hl 
101d					;call addatohl 
101d					;dec hl 
101d					;ld a, ' ' 
101d					;ld (hl), a 
101d					;inc hl 
101d					;ld (hl), a 
101d					;inc hl 
101d					;ld a, 0 
101d					;ld (hl), a 
101d			 
101d			; TODO move out to cin as cursor shape is used by the 4x4 ??? 
101d					; init cursor shape if not set by the cin routines 
101d 21 f6 fa				ld hl, cursor_shape 
1020			if BASE_KEV 
1020 3e ff				ld a, 255 
1022			else 
1022					ld a, '#' 
1022			endif 
1022 77					ld (hl), a 
1023 23					inc hl 
1024 3e 00				ld a, 0 
1026 77					ld (hl), a 
1027			 
1027 3e 09				ld a, CUR_BLINK_RATE 
1029 32 95 fd				ld (input_cur_flash), a 
102c 3e 01				ld a, 1 
102e 32 94 fd				ld (input_cur_onoff),a 
1031			.inmain:	 
1031			 
1031 cd 59 11				call input_disp_ref 
1034			 
1034					; save current length of string 
1034			 
1034 2a 9c fd				ld hl, (input_start) 
1037 3e 00				ld a, 0 
1039 cd 4f 13				call strlent 
103c 7d					ld a,l 
103d 32 8f fd				ld (input_len), a 
1040			 
1040					;call input_disp_oncur 
1040			 
1040					; display current state of input buffer 
1040			 
1040					; clean any backspace chars 
1040			 
1040 3e 20				ld a, " " 
1042 32 f6 f0				ld (scratch),a 
1045 3e 00				ld a, 0 
1047 32 f7 f0				ld (scratch+1),a 
104a 3a 99 fd				ld a,(input_at_pos) 
104d 85					add l 
104e 11 f6 f0				ld de, scratch 
1051 cd bd 0d				call str_at_display 
1054			 
1054					; pause 1ms 
1054			 
1054 3e 01				ld a, 1 
1056 cd d2 0c				call aDelayInMS 
1059			 
1059			; display cursor if visible on this cycle 
1059			 
1059					; dec flash counter 
1059 3a 95 fd				ld a, (input_cur_flash) 
105c 3d					dec a 
105d 32 95 fd				ld (input_cur_flash), a 
1060 fe 00				cp 0 
1062 20 0d				jr nz, .inochgstate 
1064			 
1064			 
1064					; reset on change of state 
1064 3e 09				ld a, CUR_BLINK_RATE 
1066 32 95 fd				ld (input_cur_flash), a 
1069			 
1069					; change state 
1069 3a 94 fd				ld a,(input_cur_onoff) 
106c ed 44				neg 
106e 32 94 fd				ld (input_cur_onoff),a 
1071			 
1071			 
1071			 
1071			 
1071					; TODO is cursor visible? 
1071					; TODO if so then over write the char at curspos pos with the cursor shape 
1071			 
1071								 
1071			 
1071			.inochgstate: 
1071 3a 94 fd				ld a,(input_cur_onoff) 
1074 fe ff				cp 255 
1076 28 0e				jr z, .skipcursor 
1078 3a 99 fd				ld a, (input_at_pos) 
107b 47					ld b, a 
107c 3a 8a fd				ld a, (input_cursor) 
107f 80					add b 
1080 11 f6 fa				ld de, cursor_shape 
1083					 
1083 cd bd 0d				call str_at_display 
1086			 
1086			.skipcursor: 
1086				if DEBUG_INPUTV2 
1086			 
1086					ld a,(input_at_pos) 
1086					ld hl, LFSRSeed 
1086					call hexout 
1086					ld a, (input_cursor) 
1086					ld hl, LFSRSeed+2 
1086					call hexout 
1086					ld a,(input_size) 
1086					ld hl, LFSRSeed+4 
1086					call hexout 
1086			 
1086					ld a,(input_cur_onoff) 
1086					ld hl, LFSRSeed+6 
1086					call hexout 
1086			 
1086					ld a,(input_cur_flash) 
1086					ld hl, LFSRSeed+8 
1086					call hexout 
1086			 
1086					ld a,(input_len) 
1086					ld hl, LFSRSeed+10 
1086					call hexout 
1086					ld hl, LFSRSeed+12 
1086					ld a, 0 
1086					ld (hl),a 
1086					ld a, display_row_4 
1086					ld de, LFSRSeed 
1086					call str_at_display 
1086				endif 
1086 cd cd 0d				call update_display 
1089			 
1089					; TODO keyboard processing 
1089			 
1089			if BASE_CPM 
1089					call cin_wait 
1089			else 
1089 cd 37 75				call cin    ; _wait 
108c			endif 
108c fe 00				cp 0 
108e ca 31 10				jp z, .inmain 
1091			 
1091 fe 0b				cp KEY_LEFT    ; cursor left 
1093 ca 4b 11				jp z, input_left 
1096				 
1096 fe 0c				cp KEY_RIGHT      ; cursor right 
1098 ca 52 11				jp z, input_right 
109b			 
109b fe 0d				cp KEY_CR 
109d c8					ret z 
109e			 
109e fe 08				cp KEY_BS 
10a0 ca c0 11				jp z, input_delchar 
10a3			 
10a3 fe 06				cp KEY_NEXTWORD 
10a5 ca cc 10				jp z, input_nxtword 
10a8			 
10a8 fe 07				cp KEY_PREVWORD 
10aa ca f3 10				jp z, input_prvword 
10ad			 
10ad fe 0e				cp KEY_HOME    ; jump to start of line 
10af 20 08				jr nz, .ikh 
10b1 3e 00				ld a, 0 
10b3 32 8a fd				ld (input_cursor), a 
10b6 ca 31 10				jp z, .inmain 
10b9			.ikh: 
10b9			 
10b9 fe 0f				cp KEY_END     ; jump to end of line 
10bb 20 09				jr nz, .ike 
10bd 3a 8f fd				ld a, (input_len) 
10c0 32 8a fd				ld (input_cursor),a 
10c3 ca 31 10				jp z, .inmain 
10c6			.ike: 
10c6 fe 05			        cp KEY_UP      ; recall last command 
10c8 c8					ret z 
10c9			;jr nz, .irec 
10c9			; TODO next word 
10c9			; TODO prev word 
10c9			;  
10c9			; 
10c9			;	ld hl, scratch 
10c9			;	ld de, os_last_cmd 
10c9			;	call strcpy 
10c9			;		jp  .inmain 
10c9			.irec: 
10c9			;		jr .instr1 
10c9			 
10c9			 
10c9			 
10c9					; if any keys not intercepted by above but are special keys like function keys then return them to the program 
10c9			 
10c9			; TODO return if any special keys are given 
10c9			;		ld l, a 
10c9			;		ld a, 28 ; KEY_F12   ; 27 
10c9			;		sub l 
10c9			;		ret m 
10c9			;		ld a, l 
10c9					; if no special key then insert as a char 
10c9			 
10c9 c3 92 11				jp input_inschr 
10cc			 
10cc				 
10cc			input_nxtword: 
10cc				; jump to start next word after the cursor 
10cc			 
10cc			.insknwn:	 
10cc cd 88 11				call input_curptr	 
10cf 7e					ld a,(hl)	 
10d0 fe 00				cp 0 
10d2 ca 31 10				jp z, .inmain    ; end of string 
10d5			 
10d5			; if we are on a word, then move off of it 
10d5			 
10d5 fe 20				cp ' ' 
10d7 28 06				jr z, .inspace     ; we are on space so eat the space until we hit non-space 
10d9 21 8a fd				ld hl, input_cursor 
10dc 34					inc (hl) 
10dd 18 ed				jr .insknwn 
10df			 
10df			.inspace: 
10df			 
10df cd 88 11				call input_curptr	 
10e2 7e					ld a,(hl)	 
10e3 fe 00				cp 0 
10e5 ca 31 10				jp z, .inmain    ; end of string 
10e8			 
10e8			; if we are on a word, then move off of it 
10e8			 
10e8 fe 20				cp ' ' 
10ea c2 31 10				jp nz, .inmain     ; we are on non space so at next word 
10ed 21 8a fd				ld hl, input_cursor 
10f0 34					inc (hl) 
10f1 18 ec				jr .inspace 
10f3			 
10f3			 
10f3			 
10f3			 
10f3			input_prvword: 
10f3				; jump to the start of previous word before the cursor 
10f3			 
10f3			; where are we to start with currently? 
10f3			 
10f3 cd 88 11				call input_curptr	 
10f6 7e					ld a, (hl) 
10f7 fe 20				cp ' ' 
10f9 28 1d				jr z, .inspacep     ; we are on space so eat the space until we hit non-space 
10fb			 
10fb			 
10fb			 
10fb			.inskpwn:	 
10fb 3a 8a fd				ld a,(input_cursor) 
10fe fe 00				cp 0 
1100 ca 31 10				jp z, .inmain    ; start of string 
1103			 
1103			;if we are on a word, then move off of it 
1103			 
1103 cd 88 11				call input_curptr	 
1106 7e					ld a, (hl) 
1107 fe 20				cp ' ' 
1109 28 06				jr z, .iwstart     ; we are on space so eat the space until we hit non-space 
110b					;jp z, .inmain    ; start of string 
110b 21 8a fd				ld hl, input_cursor 
110e 35					dec (hl) 
110f 18 ea				jr .inskpwn 
1111			.iwstart: 
1111 21 8a fd				ld hl, input_cursor 
1114 34					inc (hl) 
1115 c3 31 10				jp .inmain 
1118					 
1118			 
1118			.inspacep: 
1118			 
1118					;jp .inmain    ; start of string 
1118			 
1118			 
1118			 
1118 3a 8a fd				ld a,(input_cursor) 
111b fe 00				cp 0 
111d ca 31 10				jp z, .inmain    ; start of string 
1120			 
1120			; if we are on a word, then move off of it 
1120			 
1120 cd 88 11				call input_curptr	 
1123 7e					ld a, (hl) 
1124 fe 20				cp ' ' 
1126 c2 2f 11				jp nz, .incharp     ; we are on non space so at end of prev word 
1129 21 8a fd				ld hl, input_cursor 
112c 35					dec (hl) 
112d 18 e9				jr .inspacep 
112f			 
112f			 
112f			.incharp:	 
112f					; eat the word to get to the start 
112f 3a 8a fd				ld a,(input_cursor) 
1132 fe 00				cp 0 
1134 ca 31 10				jp z, .inmain    ; start of string 
1137			 
1137			; if we are on a word, then move off of it 
1137			 
1137 cd 88 11				call input_curptr	 
113a 7e					ld a, (hl) 
113b fe 20				cp ' ' 
113d 28 06				jr z, .ipwordst     ; we are on space so eat the space until we hit non-space 
113f 21 8a fd				ld hl, input_cursor 
1142 35					dec (hl) 
1143 18 ea				jr .incharp 
1145			.ipwordst: 
1145					; at space before the prev word so reposition over it 
1145 21 8a fd				ld hl, input_cursor 
1148 34					inc (hl) 
1149 18 b0				jr .inskpwn 
114b					 
114b			 
114b			 
114b			input_left: 
114b				; move cursor left 
114b 21 8a fd			ld hl, input_cursor 
114e 35				dec (hl) 
114f			;	cp 0 
114f			;	jp z, .inmain    ; ignore left as at the start of the string 
114f c3 31 10			jp .inmain 
1152			 
1152			input_right: 
1152				; move cursor right 
1152				 
1152				;ld a, (input_size) 
1152				;ld b, a 
1152 21 8a fd			ld hl, input_cursor 
1155 34				inc (hl) 
1156				;dec b 
1156				;cp 0 
1156				;jp z, .inmain   ; ignore as at end of the string buffer 
1156				;ld a, b 
1156				;inc a 
1156				;ld (input_cursor), a 
1156 c3 31 10			jp .inmain 
1159			 
1159			 
1159			 
1159			input_disp_ref: 
1159				; display the text from start of buffer (ie full refresh) 
1159 3a 99 fd			ld a, (input_at_pos) 
115c 2a 9c fd			ld hl,(input_start) 
115f eb				ex de, hl 
1160 cd bd 0d			call str_at_display  
1163 c9				ret 
1164			input_disp_oncur: 
1164				; display the text from cursor position to end of buffer 
1164				; TODO position start of string at cursor position on screen 
1164				; TODO draw from that point on 
1164 3a 8a fd			ld a, (input_cursor) 
1167 47				ld b, a 
1168 3a 99 fd			ld a, (input_at_pos) 
116b 80				add b 
116c 48				ld c, b     ; save a 
116d 78				ld a, b     ; inc string start for cursor 
116e 2a 9c fd			ld hl,(input_start) 
1171 cd de 0f			call addatohl 
1174 eb				ex de, hl 
1175 79				ld a, c 
1176 cd bd 0d			call str_at_display  
1179 c9				ret 
117a			 
117a			input_nxtw: 
117a				; Find next word 
117a c9				ret 
117b			 
117b			input_prvw: 
117b				; Find previous word 
117b c9				ret 
117c			 
117c			input_lenrem:   
117c				; Calculate the length of string remaining from current cursor 
117c				; position to end of buffer (exc null term) 
117c				 
117c 3a 8a fd			ld a, (input_cursor) 
117f 4f				ld c, a 
1180 3a 9b fd			ld a, (input_size) 
1183 91				sub c 
1184 06 00			ld b, 0 
1186 0d				dec c 
1187 c9				ret	 
1188			 
1188			input_curptr: 
1188				; calc address of the character under the cursor 
1188				 
1188 2a 9c fd			ld hl, (input_start) 
118b 3a 8a fd			ld a, (input_cursor) 
118e cd de 0f			call addatohl 
1191 c9				ret 
1192			 
1192			input_inschr: 
1192				; Insert char at cursor position 
1192 f5				push af   ; save char 
1193				;call input_lenrem    ; get bc length of remaining string 
1193			 
1193				 
1193 cd 88 11			call input_curptr 
1196			;	ld hl, (input_start) 
1196			;	ld a, (input_cursor) 
1196			;	call addatohl 
1196				;push hl   ; save to come back to 
1196			 
1196				; shift everything up one to end of buffer 
1196			 
1196				;push hl 
1196				;dec de 
1196				;inc de 
1196			;	ldir 
1196				 
1196				;pop hl 
1196			 
1196				; are we adding to the end of line? 
1196			 
1196 3a 8a fd			ld a, (input_cursor) 
1199 47				ld b, a 
119a 3a 8f fd			ld a, (input_len) 
119d b8				cp b 
119e 20 09			jr nz, .insmid   ; no, insert in middle of text 
11a0			 
11a0				; tack on the end of the line 
11a0 f1				pop af 
11a1 77				ld (hl), a   ; save new char 
11a2 23				inc hl 
11a3 3e 00			ld a, 0 
11a5 77				ld (hl), a 
11a6 c3 52 11			jp input_right 
11a9				 
11a9			.insmid: 
11a9				; hl has insertion point so move everything up one to allow for insertion 
11a9				;call input_shiftright 
11a9 f1				pop af 
11aa			 
11aa			.shufinsmid: 
11aa 47				ld b, a     ; b contains new char, c prev char at this position  
11ab 7e				ld a, (hl) 
11ac			 
11ac fe 00			cp 0    ; at end of string need to then dump new char and add term 
11ae 28 07			jr z, .endinsmid 
11b0 4f				ld c, a 
11b1 78				ld a, b 
11b2 77				ld (hl), a 
11b3 23				inc hl 
11b4 79				ld a, c 
11b5 18 f3			jr .shufinsmid 
11b7				 
11b7			 
11b7			 
11b7			 
11b7			.endinsmid: 
11b7 78				ld a, b 
11b8 77				ld (hl), a 
11b9 23				inc hl 
11ba 3e 00			ld a, 0 
11bc 77				ld (hl), a 
11bd			 
11bd			 
11bd			;	ld (hl), a   ; save new char 
11bd			 
11bd c3 52 11			jp input_right 
11c0			 
11c0			;input_shiftright: 
11c0			;	; shift text right at cursor, hl has shift start 
11c0			;	push hl 
11c0			;	push de 
11c0			;	push bc 
11c0			; 
11c0			; 
11c0			;	; move to end of string past zero term 
11c0			;	ld hl,(input_start) 
11c0			;	ld a, (input_len) 
11c0			;	call addatohl 
11c0			;	inc hl 
11c0			;;	inc hl 
11c0			;;	inc hl 
11c0			;	ld a, 0 
11c0			;	ld (hl), a 
11c0			;;	dec hl 
11c0			;	 
11c0			;;	ld (hl), a 
11c0			;;	dec hl 
11c0			; 
11c0			;	push hl 
11c0			;	pop de 
11c0			;	inc de 
11c0			;	 
11c0			; 
11c0			;;	ld hl,(input_start) 
11c0			;;	ld a, (input_cursor) 
11c0			;;	call addatohl 
11c0			; 
11c0			; 
11c0			;	; calc how many bytes from cursor pos to end of string we need to shift 
11c0			;	call input_lenrem    ; get bc length of remaining string 
11c0			;	;ld a, (input_cursor) 
11c0			;	;ld c, a 
11c0			;	ld a, (input_len) 
11c0			;	cp 2 
11c0			;	jr z, .iskipzero	 
11c0			;	;sub c 
11c0			;	;inc a 
11c0			;	;ld c, a 
11c0			;	;ld b, 0 
11c0			;	inc c 
11c0			;	inc c 
11c0			;	; move data 
11c0			;	lddr 
11c0			;.iskipzero: 
11c0			; 
11c0			;	pop bc 
11c0			;	pop de 
11c0			;	pop hl 
11c0			;	ret	 
11c0			 
11c0			input_delchar: 
11c0				; Delete char at cursor position 
11c0 cd 7c 11			call input_lenrem    ; get bc length of remaining string 
11c3 2a 9c fd			ld hl, (input_start) 
11c6 3a 8a fd			ld a, (input_cursor) 
11c9 cd de 0f			call addatohl 
11cc			 
11cc e5				push hl 
11cd d1				pop de 
11ce 1b				dec de 
11cf			 
11cf			.dl:	 
11cf ed a0			ldi  
11d1 7e				ld a, (hl) 
11d2 fe 00			cp 0 
11d4 28 02			jr z, .dldone 
11d6 18 f7			jr .dl 
11d8			.dldone: 
11d8 ed a0			ldi 
11da			 
11da c3 4b 11			jp input_left 
11dd			 
11dd			 
11dd			endif 
11dd			 
11dd			 
11dd			 
11dd			if EDIT_V1 
11dd			input_str: 
11dd			 
11dd				    	ld (input_at_pos),a      ; save display position to start 
11dd					add c 
11dd					ld (input_at_cursor),a	; save draw pos of cursor 
11dd					ld (input_start), hl     ; save ptr to buffer 
11dd					ld a, c 
11dd					call addatohl 
11dd					ld (input_ptr), hl     ; save ptr to point under the cursor 
11dd					ld a,d 
11dd				        ld (input_size), a       ; save length of input area 
11dd					ld a, c 
11dd					ld (input_cursor),a      ; init cursor start position  
11dd					ld a,e 
11dd				        ld (input_display_size), a       ; save length of input area that is displayed TODO 
11dd					 
11dd					 
11dd			 
11dd			;		ld a,(input_ptr) 
11dd			;		ld (input_under_cursor),a 	; save what is under the cursor 
11dd			 
11dd			; TODO move out to cin as cursor shape is used by the 4x4 ??? 
11dd					; init cursor shape if not set by the cin routines 
11dd					ld hl, cursor_shape 
11dd			if BASE_KEV 
11dd					ld a, 255 
11dd			else 
11dd					ld a, '#' 
11dd			endif 
11dd					ld (hl), a 
11dd					inc hl 
11dd					ld a, 0 
11dd					ld (hl), a 
11dd			 
11dd					ld a, CUR_BLINK_RATE 
11dd					ld (input_cur_flash), a 
11dd					ld a, 1 
11dd					ld (input_cur_onoff),a 
11dd			 
11dd			;	if DEBUG_INPUT 
11dd			;		push af 
11dd			;		ld a, 'I' 
11dd			;		ld (debug_mark),a 
11dd			;		pop af 
11dd			;		CALLMONITOR 
11dd			;	endif 
11dd			.is1:		; main entry loop 
11dd			 
11dd			 
11dd			 
11dd					; pause 1ms 
11dd			 
11dd					ld a, 1 
11dd					call aDelayInMS 
11dd			 
11dd					; dec flash counter 
11dd					ld a, (input_cur_flash) 
11dd					dec a 
11dd					ld (input_cur_flash), a 
11dd					cp 0 
11dd					jr nz, .nochgstate 
11dd			 
11dd			 
11dd					; change state 
11dd					ld a,(input_cur_onoff) 
11dd					neg 
11dd					ld (input_cur_onoff),a 
11dd			 
11dd			 
11dd					; reset on change of state 
11dd					ld a, CUR_BLINK_RATE 
11dd					ld (input_cur_flash), a 
11dd			 
11dd			.nochgstate: 
11dd					 
11dd					 
11dd			 
11dd					; display cursor  
11dd			 
11dd			;		ld hl, (input_start) 
11dd			;		ld a, (input_cursor) 
11dd			;		call addatohl 
11dd			 
11dd					; get char under cursor and replace with cursor 
11dd			ld hl, (input_ptr) 
11dd			;		ld a, (hl) 
11dd			;		ld (input_under_cursor),a 
11dd			;		ld a, '_' 
11dd			;		ld (hl), a 
11dd			 
11dd					; display string 
11dd			 
11dd					ld de, (input_start) 
11dd					ld a, (input_at_pos) 
11dd					call str_at_display 
11dd			;	        call update_display 
11dd			 
11dd					; find place to put the cursor 
11dd			;		add h 
11dd			;		ld l, display_row_1 
11dd			;		sub l 
11dd			; (input_at_pos) 
11dd					;ld c, a 
11dd			;		ld a, (input_cursor) 
11dd			;		ld l, (input_at_pos) 
11dd			;		;ld b, h 
11dd			;		add l 
11dd			;		ld (input_at_cursor),a 
11dd					;ld l,h 
11dd			 
11dd			;		ld h, 0 
11dd			;		ld l,(input_at_pos) 
11dd			;		ld a, (input_cursor) 
11dd			;		call addatohl 
11dd			;		ld a, 074H-19			; TODO BUG I dont know why offset is showing 74H 
11dd			;		call subafromhl 
11dd			;		ld a,l 
11dd			;		ld (input_at_cursor), a 
11dd			 
11dd				if DEBUG_INPUT 
11dd					ld a, (hardware_diag) 
11dd					cp 0 
11dd					jr z, .skip_input_diag 
11dd			 
11dd					ld a,(input_at_pos) 
11dd					ld hl, LFSRSeed 
11dd					call hexout 
11dd					ld a, (input_cursor) 
11dd					ld hl, LFSRSeed+2 
11dd					call hexout 
11dd					ld a,(input_at_cursor) 
11dd					ld hl, LFSRSeed+4 
11dd					call hexout 
11dd			 
11dd					ld a,(input_cur_onoff) 
11dd					ld hl, LFSRSeed+6 
11dd					call hexout 
11dd			 
11dd					ld a,(input_cur_flash) 
11dd					ld hl, LFSRSeed+8 
11dd					call hexout 
11dd			 
11dd					ld a,(input_len) 
11dd					ld hl, LFSRSeed+10 
11dd					call hexout 
11dd					ld hl, LFSRSeed+12 
11dd					ld a, 0 
11dd					ld (hl),a 
11dd					ld a, display_row_4 
11dd					ld de, LFSRSeed 
11dd					call str_at_display 
11dd					.skip_input_diag: 
11dd				endif 
11dd			 
11dd					; decide on if we are showing the cursor this time round 
11dd			 
11dd					ld a, (input_cur_onoff) 
11dd					cp 255 
11dd					jr z, .skipcur 
11dd			 
11dd			 
11dd					ld a,(input_at_cursor) 
11dd					ld de, cursor_shape 
11dd					call str_at_display 
11dd			 
11dd					; save length of current input string 
11dd					ld hl, (input_start) 
11dd					ld a, 0 
11dd					call strlent 
11dd					ld a,l 
11dd					ld (input_len),a 
11dd			 
11dd			.skipcur: 
11dd			 
11dd				        call update_display 
11dd					 
11dd			 
11dd			 
11dd					; wait 
11dd				 
11dd					; TODO loop without wait to flash the cursor and char under cursor	 
11dd					call cin    ; _wait 
11dd			 
11dd					cp 0 
11dd					jp z, .is1 
11dd			 
11dd					; get ptr to char to input into 
11dd			 
11dd					ld c,a 
11dd					ld hl, (input_start) 
11dd					ld a, (input_cursor) 
11dd					call addatohl 
11dd					ld (input_ptr), hl 
11dd					ld a,c 
11dd			 
11dd					; replace char under cursor 
11dd			 
11dd			;		ld hl, (input_ptr) 
11dd			;		ld a, (input_under_cursor) 	; get what is under the cursor 
11dd			;		ld (hl), a 
11dd			 
11dd			;	if DEBUG_INPUT 
11dd			;		push af 
11dd			;		ld a, 'i' 
11dd			;		ld (debug_mark),a 
11dd			;		pop af 
11dd			;		CALLMONITOR 
11dd			;	endif 
11dd					cp KEY_HOME 
11dd					jr nz, .iske 
11dd			 
11dd					ld a, (input_at_pos) 
11dd					ld (input_at_cursor),a 
11dd					ld a, 0 
11dd					ld (input_cursor), a 
11dd					jp .is1 
11dd					 
11dd			.iske:		cp KEY_END 
11dd					jr nz, .isknw 
11dd					jp .is1 
11dd			 
11dd			.isknw:		cp KEY_NEXTWORD 
11dd					jr nz, .iskpw 
11dd			 
11dd			.isknwm:	ld hl, (input_ptr) 
11dd					ld a,(hl)	 
11dd					cp 0 
11dd					jp z, .is1    ; end of string 
11dd					cp ' ' 
11dd					jp z, .is1    ; end of word 
11dd					inc hl 
11dd					ld (input_ptr), hl 
11dd					ld a, (input_at_cursor) 
11dd					inc a 
11dd					ld (input_at_cursor), a 
11dd					jr .isknwm 
11dd			 
11dd			.iskpw:		cp KEY_PREVWORD 
11dd					jr nz, .iskl 
11dd			.iskpwm:	 
11dd					ld hl, (input_ptr) 
11dd					ld a,(hl)	 
11dd					cp 0  
11dd					jp z, .is1    ; end of string 
11dd					cp ' ' 
11dd					jp z, .is1    ; end of word 
11dd					dec hl 
11dd					ld (input_ptr), hl 
11dd					ld a, (input_at_cursor) 
11dd					dec a 
11dd					ld (input_at_cursor), a 
11dd					jr .iskpwm 
11dd			 
11dd			 
11dd			.iskl:		cp KEY_LEFT 
11dd					jr nz, .isk1 
11dd			 
11dd					ld a, (input_cursor) 
11dd			 
11dd					cp 0 
11dd					jp z, .is1 		; at start of line to ignore  
11dd			 
11dd					dec  a 		; TODO check underflow 
11dd					ld (input_cursor), a 
11dd			 
11dd					ld hl, (input_ptr) 
11dd					dec hl 
11dd					ld (input_ptr), hl 
11dd					 
11dd					ld a, (input_at_cursor) 
11dd					dec a 
11dd					ld (input_at_cursor), a 
11dd			 
11dd					ld a, 1		; show cursor moving 
11dd					ld (input_cur_onoff),a 
11dd					ld a, CUR_BLINK_RATE 
11dd					ld (input_cur_flash), a 
11dd			 
11dd					jp .is1 
11dd			 
11dd			.isk1:		cp KEY_RIGHT 
11dd					jr nz, .isk2 
11dd			 
11dd					ld a,(input_len)		; TODO BUG why cant i load e direct? 
11dd					ld e,a 
11dd					ld a, (input_cursor) 
11dd					cp e 
11dd					jp z, .is1		; at the end of string so dont go right 
11dd			 
11dd					inc  a 		; TODO check overflow 
11dd					ld (input_cursor), a 
11dd			 
11dd					ld a, (input_at_cursor) 
11dd					inc a 
11dd					ld (input_at_cursor), a 
11dd			 
11dd					ld hl, (input_ptr) 
11dd					inc hl 
11dd					ld (input_ptr), hl 
11dd			 
11dd					ld a, 1		; show cursor moving 
11dd					ld (input_cur_onoff),a 
11dd					ld a, CUR_BLINK_RATE 
11dd					ld (input_cur_flash), a 
11dd			 
11dd					jp .is1 
11dd			 
11dd			.isk2:		cp KEY_UP 
11dd			 
11dd					jr nz, .isk3 
11dd			 
11dd					; swap last command with the current on 
11dd			 
11dd					; move cursor to start of string 
11dd					ld hl, (input_start) 
11dd					ld (input_ptr), hl 
11dd			 
11dd					ld a, (input_at_pos) 
11dd					ld (input_at_cursor), a 
11dd			 
11dd					ld a, 0 
11dd					ld (input_cursor), a 
11dd					 
11dd					; swap input and last command buffers 
11dd			 
11dd					ld hl, os_cli_cmd 
11dd					ld de, os_last_cmd 
11dd					ld b, 255 
11dd			.swap1:		ld a, (hl) 
11dd					ld c,a 
11dd					ld a, (de) 
11dd					ld (hl), a 
11dd					ld a,c 
11dd					ld (de),a 
11dd					inc hl 
11dd					inc de 
11dd					djnz .swap1 
11dd			 
11dd			 
11dd			 
11dd			 
11dd			 
11dd					jp .is1 
11dd			 
11dd			.isk3:		cp KEY_BS 
11dd					jr nz, .isk4 
11dd			 
11dd					ld a, (input_cursor) 
11dd			 
11dd					cp 0 
11dd					jp z, .is1 		; at start of line to ignore  
11dd			 
11dd					dec  a 		; TODO check underflow 
11dd					ld (input_cursor), a 
11dd			 
11dd					; hl is source 
11dd					; de needs to be source - 1 
11dd			 
11dd			;		ld a, 0 
11dd			;		dec hl 
11dd			;		ld (hl), a 
11dd			 
11dd					ld hl, (input_ptr) 
11dd					dec hl 
11dd					ld (input_ptr), hl 
11dd			 
11dd					; shift all data 
11dd			 
11dd					push hl 
11dd					inc hl 
11dd					pop de 
11dd					ld a, (input_len)		; TODO BUG WAS ld c, (input... 
11dd					ld c,a 
11dd					ld b,0 
11dd					ldir  
11dd			 
11dd			 
11dd			 
11dd			 
11dd					ld a, (input_at_cursor) 
11dd					dec a 
11dd					ld (input_at_cursor), a 
11dd			 
11dd			 
11dd					ld a, 1		; show cursor moving 
11dd					ld (input_cur_onoff),a 
11dd					ld a, CUR_BLINK_RATE 
11dd					ld (input_cur_flash), a 
11dd			 
11dd					; remove char 
11dd					ld a, (input_at_cursor) 
11dd					inc a 
11dd					ld de,.iblank 
11dd					call str_at_display 
11dd			 
11dd					jp .is1 
11dd			 
11dd			.isk4:		cp KEY_CR 
11dd					jr z, .endinput 
11dd			 
11dd					; else add the key press to the end 
11dd			 
11dd					ld c, a			; save key pressed 
11dd			 
11dd					ld a,(hl)		; get what is currently under char 
11dd			 
11dd					cp 0			; we are at the end of the string 
11dd					jr nz, .onchar 
11dd					 
11dd					; add a char to the end of the string 
11dd				 
11dd					ld (hl),c 
11dd					inc hl 
11dd			;		ld a,' ' 
11dd			;		ld (hl),a 
11dd			;		inc hl 
11dd					ld a,0 
11dd					ld (hl),a 
11dd					dec hl 
11dd			 
11dd					ld a, (input_cursor) 
11dd					inc a				; TODO check max string length and scroll  
11dd					ld (input_cursor), a		; inc cursor pos 
11dd							 
11dd					ld a, (input_at_cursor) 
11dd					inc a 
11dd					ld (input_at_cursor), a 
11dd			 
11dd					ld hl, (input_ptr) 
11dd					inc hl 
11dd					ld (input_ptr), hl 
11dd			 
11dd					ld hl, (input_ptr) 
11dd					inc hl 
11dd					ld (input_ptr), hl 
11dd			;	if DEBUG_INPUT 
11dd			;		push af 
11dd			;		ld a, '+' 
11dd			;		ld (debug_mark),a 
11dd			;		pop af 
11dd			;		CALLMONITOR 
11dd			;	endif 
11dd					ld a, 1		; show cursor moving 
11dd					ld (input_cur_onoff),a 
11dd					ld a, CUR_BLINK_RATE 
11dd					ld (input_cur_flash), a 
11dd					jp .is1 
11dd					 
11dd			 
11dd			 
11dd					; if on a char then insert 
11dd			.onchar: 
11dd			 
11dd					; TODO over flow check: make sure insert does not blow out buffer 
11dd			 
11dd					; need to do some maths to use lddr 
11dd			 
11dd					push hl   ; save char pos 
11dd					push bc 
11dd			 
11dd					ld hl, (input_start) 
11dd					ld a, (input_len) 
11dd					call addatohl  		; end of string 
11dd					inc hl 
11dd					inc hl		; past zero term 
11dd					push hl 
11dd					inc hl 
11dd					push hl  
11dd			 
11dd								; start and end of lddr set, now how much to move? 
11dd			 
11dd							 
11dd					ld a, (input_cursor)		; BUG TODO why cant i load directly into b??? 
11dd					ld b,a 
11dd					ld a,(input_len) 
11dd					ld e,a 
11dd					sub b 
11dd					inc a		;?? 
11dd					inc a		;?? 
11dd					inc a		;?? 
11dd			 
11dd					ld b,0 
11dd					ld c,a 
11dd			 
11dd				if DEBUG_INPUT 
11dd					push af 
11dd					ld a, 'i' 
11dd					ld (debug_mark),a 
11dd					pop af 
11dd			;		CALLMONITOR 
11dd				endif 
11dd					pop de 
11dd					pop hl 
11dd				if DEBUG_INPUT 
11dd					push af 
11dd					ld a, 'I' 
11dd					ld (debug_mark),a 
11dd					pop af 
11dd			;		CALLMONITOR 
11dd				endif 
11dd					lddr 
11dd				 
11dd			 
11dd			 
11dd					; TODO have a key for insert/overwrite mode???? 
11dd					pop bc 
11dd					pop hl 
11dd					ld (hl), c		; otherwise overwrite current char 
11dd					 
11dd			 
11dd			 
11dd			 
11dd					ld a, (input_cursor) 
11dd					inc  a 		; TODO check overflow 
11dd					ld (input_cursor), a 
11dd			 
11dd					ld a, (input_at_cursor) 
11dd					inc a 
11dd					ld (input_at_cursor), a 
11dd			 
11dd					jp .is1 
11dd			 
11dd			.endinput:	; TODO look for end of string 
11dd			 
11dd					; add trailing space for end of token 
11dd			 
11dd					ld hl, (input_start) 
11dd					ld a,(input_len) 
11dd					call addatohl 
11dd					ld a, ' ' 
11dd					ld (hl),a 
11dd					; TODO eof of parse marker 
11dd			 
11dd					inc hl 
11dd					ld a, 0 
11dd					ld (hl),a 
11dd			 
11dd			 
11dd					ret 
11dd			 
11dd			.iblank: db " ",0 
11dd			 
11dd			 
11dd			input_str_prev:	ld (input_at_pos), a 
11dd					ld (input_start), hl 
11dd					ld a,1			; add cursor 
11dd					ld (hl),a 
11dd					inc hl 
11dd					ld a,0 
11dd					ld (hl),a 
11dd					ld (input_ptr), hl 
11dd					ld a,d 
11dd					ld (input_size), a 
11dd					ld a,0 
11dd					ld (input_cursor),a 
11dd			.instr1:	 
11dd			 
11dd					; TODO do block cursor 
11dd					; TODO switch cursor depending on the modifer key 
11dd			 
11dd					; update cursor shape change on key hold 
11dd			 
11dd					ld hl, (input_ptr) 
11dd					dec hl 
11dd					ld a,(cursor_shape) 
11dd					ld (hl), a 
11dd			 
11dd					; display entered text 
11dd					ld a,(input_at_pos) 
11dd			            	CALL fLCD_Pos       ;Position cursor to location in A 
11dd			            	LD   de, (input_start) 
11dd			            	CALL fLCD_Str       ;Display string pointed to by DE 
11dd			 
11dd					call cin 
11dd					cp 0 
11dd					jr z, .instr1 
11dd			 
11dd					; proecess keyboard controls first 
11dd			 
11dd					ld hl,(input_ptr) 
11dd			 
11dd					cp KEY_CR	 ; pressing enter ends input 
11dd					jr z, .instrcr 
11dd			 
11dd					cp KEY_BS 	; back space 
11dd					jr nz, .instr2 
11dd					; process back space 
11dd			 
11dd					; TODO stop back space if at start of string 
11dd					dec hl 
11dd					dec hl ; to over write cursor 
11dd					ld a,(cursor_shape) 
11dd					;ld a,0 
11dd					ld (hl),a 
11dd					inc hl 
11dd					ld a," " 
11dd					ld (hl),a 
11dd					ld (input_ptr),hl 
11dd					 
11dd			 
11dd					jr .instr1 
11dd			 
11dd			.instr2:	cp KEY_LEFT    ; cursor left 
11dd					jr nz, .instr3 
11dd					dec hl 
11dd					ld (input_ptr),hl 
11dd					jr .instr1 
11dd				 
11dd			.instr3:	cp KEY_RIGHT      ; cursor right 
11dd					jr nz, .instr4 
11dd					inc hl 
11dd					ld (input_ptr),hl 
11dd					jr .instr1 
11dd			 
11dd			.instr4:	cp KEY_HOME    ; jump to start of line 
11dd					jr nz, .instr5 
11dd					dec hl 
11dd					ld (input_ptr),hl 
11dd					jr .instr1 
11dd			 
11dd			.instr5:	cp KEY_END     ; jump to end of line 
11dd					jr nz, .instr6 
11dd					dec hl 
11dd					ld (input_ptr),hl 
11dd					jr .instr1 
11dd			.instr6:        cp KEY_UP      ; recall last command 
11dd					jr nz, .instrnew 
11dd			 
11dd				ld hl, scratch 
11dd				ld de, os_last_cmd 
11dd				call strcpy 
11dd					jr .instr1 
11dd			 
11dd			 
11dd			.instrnew:	; no special key pressed to see if we have room to store it 
11dd			 
11dd					; TODO do string size test 
11dd			 
11dd					dec hl ; to over write cursor 
11dd					ld (hl),a 
11dd					inc hl 
11dd					ld a,(cursor_shape) 
11dd					ld (hl),a 
11dd					inc hl 
11dd					ld a,0 
11dd					ld (hl),a 
11dd			 
11dd					ld (input_ptr),hl 
11dd					 
11dd					jr .instr1 
11dd			.instrcr:	dec hl		; remove cursor 
11dd					ld a,' '	; TODO add a trailing space for safety 
11dd					ld (hl),a 
11dd					inc hl 
11dd					ld a,0 
11dd					ld (hl),a 
11dd			 
11dd			 
11dd					; if at end of line scroll up    
11dd					; TODO detecting only end of line 4 for scroll up  
11dd			 
11dd					;ld   
11dd			 
11dd					ret 
11dd			 
11dd			 
11dd			endif 
11dd			; strcpy hl = dest, de source 
11dd			 
11dd 1a			strcpy:   LD   A, (DE)        ;Get character from string 
11de b7			            OR   A              ;Null terminator? 
11df c8			            RET  Z              ;Yes, so finished 
11e0 1a					ld a,(de) 
11e1 77					ld (hl),a 
11e2 13			            INC  DE             ;Point to next character 
11e3 23					inc hl 
11e4 18 f7		            JR   strcpy       ;Repeat 
11e6 c9					ret 
11e7			 
11e7			 
11e7			; TODO string_at  
11e7			; pass string which starts with lcd offset address and then null term string 
11e7			 
11e7			; TODO string to dec 
11e7			; TODO string to hex 
11e7			; TODO byte to string hex 
11e7			; TODO byte to string dec 
11e7			 
11e7			 
11e7			 
11e7			; from z80uartmonitor 
11e7			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
11e7			; OUTPUT VALUE OF A IN HEX ONE NYBBLE AT A TIME 
11e7			; pass hl for where to put the text 
11e7			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
11e7 c5			hexout:	PUSH BC 
11e8 f5					PUSH AF 
11e9 47					LD B, A 
11ea					; Upper nybble 
11ea cb 3f				SRL A 
11ec cb 3f				SRL A 
11ee cb 3f				SRL A 
11f0 cb 3f				SRL A 
11f2 cd 02 12				CALL tohex 
11f5 77					ld (hl),a 
11f6 23					inc hl	 
11f7					 
11f7					; Lower nybble 
11f7 78					LD A, B 
11f8 e6 0f				AND 0FH 
11fa cd 02 12				CALL tohex 
11fd 77					ld (hl),a 
11fe 23					inc hl	 
11ff					 
11ff f1					POP AF 
1200 c1					POP BC 
1201 c9					RET 
1202					 
1202			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
1202			; TRANSLATE value in lower A TO 2 HEX CHAR CODES FOR DISPLAY 
1202			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
1202			tohex: 
1202 e5					PUSH HL 
1203 d5					PUSH DE 
1204 16 00				LD D, 0 
1206 5f					LD E, A 
1207 21 0f 12				LD HL, .DATA 
120a 19					ADD HL, DE 
120b 7e					LD A, (HL) 
120c d1					POP DE 
120d e1					POP HL 
120e c9					RET 
120f			 
120f			.DATA: 
120f 30					DEFB	30h	; 0 
1210 31					DEFB	31h	; 1 
1211 32					DEFB	32h	; 2 
1212 33					DEFB	33h	; 3 
1213 34					DEFB	34h	; 4 
1214 35					DEFB	35h	; 5 
1215 36					DEFB	36h	; 6 
1216 37					DEFB	37h	; 7 
1217 38					DEFB	38h	; 8 
1218 39					DEFB	39h	; 9 
1219 41					DEFB	41h	; A 
121a 42					DEFB	42h	; B 
121b 43					DEFB	43h	; C 
121c 44					DEFB	44h	; D 
121d 45					DEFB	45h	; E 
121e 46					DEFB	46h	; F 
121f			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
121f			;; 	ASCII char code for 0-9,A-F in A to single hex digit 
121f			;;    subtract $30, if result > 9 then subtract $7 more 
121f			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
121f			atohex: 
121f d6 30				SUB $30 
1221 fe 0a				CP 10 
1223 f8					RET M		; If result negative it was 0-9 so we're done 
1224 d6 07				SUB $7		; otherwise, subtract $7 more to get to $0A-$0F 
1226 c9					RET		 
1227			 
1227			 
1227			 
1227			 
1227			; Get 2 ASCII characters as hex byte from pointer in hl 
1227			 
1227			BYTERD: 
1227 16 00			LD	D,00h		;Set up 
1229 cd 31 12			CALL	HEXCON		;Get byte and convert to hex 
122c 87				ADD	A,A		;First nibble so 
122d 87				ADD	A,A		;multiply by 16 
122e 87				ADD	A,A		; 
122f 87				ADD	A,A		; 
1230 57				LD	D,A		;Save hi nibble in D 
1231			HEXCON: 
1231 7e				ld a, (hl)		;Get next chr 
1232 23				inc hl 
1233 d6 30			SUB	030h		;Makes '0'-'9' equal 0-9 
1235 fe 0a			CP	00Ah		;Is it 0-9 ? 
1237 38 02			JR	C,NALPHA	;If so miss next bit 
1239 d6 07			SUB	007h		;Else convert alpha 
123b			NALPHA: 
123b b2				OR	D		;Add hi nibble back 
123c c9				RET			; 
123d			 
123d			 
123d			; 
123d			; Get a word (16 bit) in hexadecimal notation. The result is returned in HL. 
123d			; Since the routines get_byte and therefore get_nibble are called, only valid 
123d			; characters (0-9a-f) are accepted. 
123d			; 
123d			;get_word        push    af 
123d			;                call    get_byte        ; Get the upper byte 
123d			;                ld      h, a 
123d			;                call    get_byte        ; Get the lower byte 
123d			;                ld      l, a 
123d			;                pop     af 
123d			;                ret 
123d			; 
123d			; Get a byte in hexadecimal notation. The result is returned in A. Since 
123d			; the routine get_nibble is used only valid characters are accepted - the  
123d			; input routine only accepts characters 0-9a-f. 
123d			; 
123d c5			get_byte:        push    bc              ; Save contents of B (and C) 
123e 7e					ld a,(hl) 
123f 23					inc hl 
1240 cd 65 12		                call    nibble2val      ; Get upper nibble 
1243 cb 07		                rlc     a 
1245 cb 07		                rlc     a 
1247 cb 07		                rlc     a 
1249 cb 07		                rlc     a 
124b 47			                ld      b, a            ; Save upper four bits 
124c 7e					ld a,(hl) 
124d cd 65 12		                call    nibble2val      ; Get lower nibble 
1250 b0			                or      b               ; Combine both nibbles 
1251 c1			                pop     bc              ; Restore B (and C) 
1252 c9			                ret 
1253			; 
1253			; Get a hexadecimal digit from the serial line. This routine blocks until 
1253			; a valid character (0-9a-f) has been entered. A valid digit will be echoed 
1253			; to the serial line interface. The lower 4 bits of A contain the value of  
1253			; that particular digit. 
1253			; 
1253			;get_nibble      ld a,(hl)           ; Read a character 
1253			;                call    to_upper        ; Convert to upper case 
1253			;                call    is_hex          ; Was it a hex digit? 
1253			;                jr      nc, get_nibble  ; No, get another character 
1253			 ;               call    nibble2val      ; Convert nibble to value 
1253			 ;               call    print_nibble 
1253			 ;               ret 
1253			; 
1253			; is_hex checks a character stored in A for being a valid hexadecimal digit. 
1253			; A valid hexadecimal digit is denoted by a set C flag. 
1253			; 
1253			;is_hex          cp      'F' + 1         ; Greater than 'F'? 
1253			;                ret     nc              ; Yes 
1253			;                cp      '0'             ; Less than '0'? 
1253			;                jr      nc, is_hex_1    ; No, continue 
1253			;                ccf                     ; Complement carry (i.e. clear it) 
1253			;                ret 
1253			;is_hex_1        cp      '9' + 1         ; Less or equal '9*? 
1253			;                ret     c               ; Yes 
1253			;                cp      'A'             ; Less than 'A'? 
1253			;                jr      nc, is_hex_2    ; No, continue 
1253			;                ccf                     ; Yes - clear carry and return 
1253			;                ret 
1253			;is_hex_2        scf                     ; Set carry 
1253			;                ret 
1253			; 
1253			; Convert a single character contained in A to upper case: 
1253			; 
1253 fe 61		to_upper:        cp      'a'             ; Nothing to do if not lower case 
1255 d8			                ret     c 
1256 fe 7b		                cp      'z' + 1         ; > 'z'? 
1258 d0			                ret     nc              ; Nothing to do, either 
1259 e6 5f		                and     $5f             ; Convert to upper case 
125b c9			                ret 
125c			 
125c			 
125c			to_lower: 
125c			 
125c			   ; if char is in [A-Z] make it lower case 
125c			 
125c			   ; enter : a = char 
125c			   ; exit  : a = lower case char 
125c			   ; uses  : af 
125c			 
125c fe 41		   cp 'A' 
125e d8			   ret c 
125f			    
125f fe 5b		   cp 'Z'+1 
1261 d0			   ret nc 
1262			    
1262 f6 20		   or $20 
1264 c9			   ret 
1265			 
1265			; 
1265			; Expects a hexadecimal digit (upper case!) in A and returns the 
1265			; corresponding value in A. 
1265			; 
1265 fe 3a		nibble2val:      cp      '9' + 1         ; Is it a digit (less or equal '9')? 
1267 38 02		                jr      c, nibble2val_1 ; Yes 
1269 d6 07		                sub     7               ; Adjust for A-F 
126b d6 30		nibble2val_1:    sub     '0'             ; Fold back to 0..15 
126d e6 0f		                and     $f              ; Only return lower 4 bits 
126f c9			                ret 
1270			; 
1270			; Print_nibble prints a single hex nibble which is contained in the lower  
1270			; four bits of A: 
1270			; 
1270			;print_nibble    push    af              ; We won't destroy the contents of A 
1270			;                and     $f              ; Just in case... 
1270			;                add     a, '0'             ; If we have a digit we are done here. 
1270			;                cp      '9' + 1         ; Is the result > 9? 
1270			;                jr      c, print_nibble_1 
1270			;                add     a, 'A' - '0' - $a  ; Take care of A-F 
1270			;print_nibble_1  call    putc            ; Print the nibble and 
1270			;                pop     af              ; restore the original value of A 
1270			;                ret 
1270			;; 
1270			;; Send a CR/LF pair: 
1270			; 
1270			;crlf            push    af 
1270			;                ld      a, cr 
1270			;                call    putc 
1270			;                ld      a, lf 
1270			;                call    putc 
1270			;                pop     af 
1270			;                ret 
1270			; 
1270			; Print_word prints the four hex digits of a word to the serial line. The  
1270			; word is expected to be in HL. 
1270			; 
1270			;print_word      push    hl 
1270			;                push    af 
1270			;                ld      a, h 
1270			;                call    print_byte 
1270			;                ld      a, l 
1270			;                call    print_byte 
1270			;                pop     af 
1270			;                pop     hl 
1270			;                ret 
1270			; 
1270			; Print_byte prints a single byte in hexadecimal notation to the serial line. 
1270			; The byte to be printed is expected to be in A. 
1270			; 
1270			;print_byte      push    af              ; Save the contents of the registers 
1270			;                push    bc 
1270			;                ld      b, a 
1270			;                rrca 
1270			;                rrca 
1270			;                rrca 
1270			;                rrca 
1270			;                call    print_nibble    ; Print high nibble 
1270			;                ld      a, b 
1270			;                call    print_nibble    ; Print low nibble 
1270			;                pop     bc              ; Restore original register contents 
1270			;                pop     af 
1270			;                ret 
1270			 
1270			 
1270			 
1270			 
1270			 
1270			fourehexhl:  
1270 7e				ld a,(hl) 
1271 cd 1f 12			call atohex 
1274 cb 3f				SRL A 
1276 cb 3f				SRL A 
1278 cb 3f				SRL A 
127a cb 3f				SRL A 
127c 47				ld b, a 
127d 23				inc hl 
127e 7e				ld a,(hl) 
127f 23				inc hl 
1280 cd 1f 12			call atohex 
1283 80				add b 
1284 57				ld d,a 
1285 7e				ld a,(hl) 
1286 cd 1f 12			call atohex 
1289 cb 3f				SRL A 
128b cb 3f				SRL A 
128d cb 3f				SRL A 
128f cb 3f				SRL A 
1291 47				ld b, a 
1292 23				inc hl 
1293 7e				ld a,(hl) 
1294 23				inc hl 
1295 cd 1f 12			call atohex 
1298 80				add b 
1299 5f				ld e, a 
129a d5				push de 
129b e1				pop hl 
129c c9				ret 
129d			 
129d			; pass hl. returns z set if the byte at hl is a digit 
129d			;isdigithl:  
129d			;	push bc 
129d			;	ld a,(hl) 
129d			;	cp ':' 
129d			;	jr nc, .isdf 		; > 
129d			;	cp '0' 
129d			;	jr c, .isdf		; < 
129d			; 
129d			;	; TODO find a better way to set z 
129d			; 
129d			;	ld b,a 
129d			;	cp b 
129d			;	pop bc 
129d			;	ret 
129d			; 
129d			;.isdf:	; not digit so clear z 
129d			; 
129d			;	; TODO find a better way to unset z 
129d			; 
129d			;	ld b,a 
129d			;	inc b 
129d			;	cp b 
129d			; 
129d			;	pop bc 
129d			;	ret 
129d				 
129d				 
129d			 
129d			 
129d			; pass hl as the four byte address to load 
129d			 
129d			get_word_hl:  
129d e5				push hl 
129e cd 3d 12			call get_byte 
12a1				 
12a1 47				ld b, a 
12a2			 
12a2 e1				pop hl 
12a3 23				inc hl 
12a4 23				inc hl 
12a5			 
12a5			; TODO not able to handle a-f  
12a5 7e				ld a,(hl) 
12a6			;	;cp ':' 
12a6			;	cp 'g' 
12a6			;	jr nc, .single_byte_hl 		; > 
12a6			;	cp 'G' 
12a6			;	jr nc, .single_byte_hl 		; > 
12a6			;	cp '0' 
12a6			;	jr c, .single_byte_hl		; < 
12a6			 
12a6				;call isdigithl 
12a6 fe 00			cp 0 
12a8 28 06			jr z, .single_byte_hl 
12aa			 
12aa			.getwhln:   ; hex word so get next byte 
12aa			 
12aa cd 3d 12			call get_byte 
12ad 6f				ld l, a 
12ae 60				ld h,b 
12af c9				ret 
12b0 68			.single_byte_hl:   ld l,b 
12b1 26 00				ld h,0 
12b3 c9					ret 
12b4			 
12b4			 
12b4			 
12b4			 
12b4 21 23 1d			ld hl,asc+1 
12b7			;	ld a, (hl) 
12b7			;	call nibble2val 
12b7 cd 3d 12			call get_byte 
12ba			 
12ba			;	call fourehexhl 
12ba 32 2a f1			ld (scratch+52),a 
12bd				 
12bd 21 28 f1			ld hl,scratch+50 
12c0 22 19 f4			ld (os_cur_ptr),hl 
12c3			 
12c3 c9				ret 
12c4			 
12c4			 
12c4			; from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Other:DispA 
12c4			 
12c4			; Decimal Unsigned Version 
12c4			 
12c4			;Number in a to decimal ASCII 
12c4			;adapted from 16 bit found in z80 Bits to 8 bit by Galandros 
12c4			;Example: display a=56 as "056" 
12c4			;input: a = number 
12c4			;Output: a=0,value of a in the screen 
12c4			;destroys af,bc (don't know about hl and de) 
12c4			DispAToASCII: 
12c4 0e 9c			ld	c,-100 
12c6 cd d0 12			call	.Na1 
12c9 0e f6			ld	c,-10 
12cb cd d0 12			call	.Na1 
12ce 0e ff			ld	c,-1 
12d0 06 2f		.Na1:	ld	b,'0'-1 
12d2 04			.Na2:	inc	b 
12d3 81				add	a,c 
12d4 38 fc			jr	c,.Na2 
12d6 91				sub	c		;works as add 100/10/1 
12d7 f5				push af		;safer than ld c,a 
12d8 78				ld	a,b		;char is in b 
12d9			;TODO	CALL	PUTCHAR	;plot a char. Replace with bcall(_PutC) or similar. 
12d9 f1				pop af		;safer than ld a,c 
12da c9				ret 
12db			 
12db			; Decimal Signed Version 
12db			 
12db			; DispA 
12db			; -------------------------------------------------------------- 
12db			; Converts a signed integer value to a zero-terminated ASCII 
12db			; string representative of that value (using radix 10). 
12db			; -------------------------------------------------------------- 
12db			; INPUTS: 
12db			;     HL     Value to convert (two's complement integer). 
12db			;     DE     Base address of string destination. (pointer). 
12db			; -------------------------------------------------------------- 
12db			; OUTPUTS: 
12db			;     None 
12db			; -------------------------------------------------------------- 
12db			; REGISTERS/MEMORY DESTROYED 
12db			; AF HL 
12db			; -------------------------------------------------------------- 
12db			 
12db			;DispHLToASCII: 
12db			;   push    de 
12db			;   push    bc 
12db			; 
12db			;; Detect sign of HL. 
12db			;    bit    7, h 
12db			;    jr     z, ._DoConvert 
12db			; 
12db			;; HL is negative. Output '-' to string and negate HL. 
12db			;    ld     a, '-' 
12db			;    ld     (de), a 
12db			;    inc    de 
12db			; 
12db			;; Negate HL (using two's complement) 
12db			;    xor    a 
12db			;    sub    l 
12db			;    ld     l, a 
12db			;    ld     a, 0     ; Note that XOR A or SUB A would disturb CF 
12db			;    sbc    a, h 
12db			;    ld     h, a 
12db			; 
12db			;; Convert HL to digit characters 
12db			;._DoConvert: 
12db			;    ld     b, 0     ; B will count character length of number 
12db			;-   ld     a, 10 
12db			;    syscall  .DivHLByA  ; HL = HL / A, A = remainder 
12db			;    push   af 
12db			;    inc    b 
12db			;    ld     a, h 
12db			;    or     l 
12db			;    jr     nz, - 
12db			; 
12db			;; Retrieve digits from stack 
12db			;-   pop    af 
12db			;    or     $30 
12db			;    ld     (de), a 
12db			;    inc    de 
12db			;    djnz   - 
12db			; 
12db			;; Terminate string with NULL 
12db			;    xor    a 
12db			;    ld     (de), a 
12db			; 
12db			;    pop    bc 
12db			;    pop    de 
12db			;    ret 
12db			 
12db			;Comments 
12db			; 
12db			;    This routine uses the common positive-integer radix conversion algorithm of repeatedly dividing a value by the desired radix (base case: the value is zero) and saving the remainders of each division. 
12db			;    As this algorithm gives the digits in reverse order, they are pushed onto the hardware stack so that subsequently popping them yields the correct order. 
12db			;    Note that the output string will not be fixed-width. 
12db			; 
12db			;Example Usage 
12db			; 
12db			;    ld    hl, -1004 
12db			;    ld    de, OP1 
12db			;    call  DispA 
12db			;    ld    hl, OP1 
12db			;    syscall  PutS 
12db			 
12db			 
12db			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/string_to_uint16.z80 
12db			 
12db			 
12db			;Converts an ASCII string to an unsigned 16-bit integer 
12db			;Quits when it reaches a non-decimal digit 
12db			 
12db			string_to_uint16: 
12db			atoui_16: 
12db			;Input: 
12db			;     DE points to the string 
12db			;Outputs: 
12db			;     HL is the result 
12db			;     A is the 8-bit value of the number 
12db			;     DE points to the byte after the number 
12db			;Destroys: 
12db			;     BC 
12db			;       if the string is non-empty, BC is HL/10 
12db			;Size:  24 bytes 
12db			;Speed: 42+d(104+{0,9}) 
12db			;       d is the number of digits in the number 
12db			;       max is 640 cycles for a 5 digit number 
12db			;Assuming no leading zeros: 
12db			;1 digit:  146cc 
12db			;2 digit:  250cc 
12db			;3 digit:  354cc or 363cc (avg: 354.126cc) 
12db			;4 digit:  458cc or 467cc (avg: 458.27cc) 
12db			;5 digit:  562cc or 571cc or 580cc (avg: 562.4104cc) 
12db			;avg: 544.81158447265625cc (544+13297/16384) 
12db			;=============================================================== 
12db 21 00 00		  ld hl,0 
12de			.u16a: 
12de 1a			  ld a,(de) 
12df d6 30		  sub 30h 
12e1 fe 0a		  cp 10 
12e3 d0			  ret nc 
12e4 13			  inc de 
12e5 44			  ld b,h 
12e6 4d			  ld c,l 
12e7 29			  add hl,hl 
12e8 29			  add hl,hl 
12e9 09			  add hl,bc 
12ea 29			  add hl,hl 
12eb 85			  add a,l 
12ec 6f			  ld l,a 
12ed 30 ef		  jr nc,.u16a 
12ef 24			  inc h 
12f0 c3 de 12		  jp .u16a 
12f3			 
12f3			 
12f3			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/string_to_uint16.z80 
12f3			 
12f3			;written by Zeda 
12f3			;Converts a 16-bit unsigned integer to an ASCII string. 
12f3			 
12f3			uitoa_16: 
12f3			;Input: 
12f3			;   DE is the number to convert 
12f3			;   HL points to where to write the ASCII string (up to 6 bytes needed). 
12f3			;Output: 
12f3			;   HL points to the null-terminated ASCII string 
12f3			;      NOTE: This isn't necessarily the same as the input HL. 
12f3 d5			  push de 
12f4 c5			  push bc 
12f5 f5			  push af 
12f6 eb			  ex de,hl 
12f7			 
12f7 01 f0 d8		  ld bc,-10000 
12fa 3e 2f		  ld a,'0'-1 
12fc 3c			  inc a 
12fd 09			  add hl,bc  
12fe 38 fc		   jr c,$-2 
1300 12			  ld (de),a 
1301 13			  inc de 
1302			 
1302 01 e8 03		  ld bc,1000 
1305 3e 3a		  ld a,'9'+1 
1307 3d			  dec a  
1308 09			  add hl,bc  
1309 30 fc		   jr nc,$-2 
130b 12			  ld (de),a 
130c 13			  inc de 
130d			 
130d 01 9c ff		  ld bc,-100 
1310 3e 2f		  ld a,'0'-1 
1312 3c			  inc a  
1313 09			  add hl,bc  
1314 38 fc		   jr c,$-2 
1316 12			  ld (de),a 
1317 13			  inc de 
1318			 
1318 7d			  ld a,l 
1319 26 3a		  ld h,'9'+1 
131b 25			  dec h  
131c c6 0a		  add a,10  
131e 30 fb		   jr nc,$-3 
1320 c6 30		  add a,'0' 
1322 eb			  ex de,hl 
1323 72			  ld (hl),d 
1324 23			  inc hl 
1325 77			  ld (hl),a 
1326 23			  inc hl 
1327 36 00		  ld (hl),0 
1329			 
1329			;Now strip the leading zeros 
1329 0e fa		  ld c,-6 
132b 09			  add hl,bc 
132c 3e 30		  ld a,'0' 
132e 23			  inc hl  
132f be			  cp (hl)  
1330 28 fc		  jr z,$-2 
1332			 
1332			;Make sure that the string is non-empty! 
1332 7e			  ld a,(hl) 
1333 b7			  or a 
1334 20 01		  jr nz,.atoub 
1336 2b			  dec hl 
1337			.atoub: 
1337			 
1337 f1			  pop af 
1338 c1			  pop bc 
1339 d1			  pop de 
133a c9			  ret 
133b			 
133b			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/toUpper.z80 
133b			 
133b			toUpper: 
133b			;A is the char. 
133b			;If A is a lowercase letter, this sets it to the matching uppercase 
133b			;18cc or 30cc or 41cc 
133b			;avg: 26.75cc 
133b fe 61		  cp 'a' 
133d d8			  ret c 
133e fe 7b		  cp 'z'+1 
1340 d0			  ret nc 
1341 d6 20		  sub 'a'-'A' 
1343 c9			  ret 
1344			 
1344			; https://tutorials.eeems.ca/ASMin28Days/lesson/day16.html#cmp 
1344			 
1344			; String Length 
1344			;With a length-prefixed string, finding the length is trivial. For a null-terminated string, the process is decidedly more involved. This is where CPIR comes in. 
1344			 
1344			; Get the length of the null-terminated string starting at $8000 hl 
1344			;    LD     HL, $8000 
1344			 
1344			strlenz: 
1344			 
1344 af			    XOR    A               ; Zero is the value we are looking for. 
1345 47			    LD     B, A             ; Since we haven't the slightest clue as to the  
1346 4f			    LD     C, A             ; actual size of the string, put 0 in BC to search 
1347			                           ; 65, 536 bytes (the entire addressable memory space). 
1347 ed b1		    CPIR                   ; Begin search for a byte equalling zero. 
1349			 
1349			; BC has been decremented so that it holds -length. Now need to synthesize a NEG BC. 
1349 67			    LD     H, A             ; Zero HL (basically set it to 65, 536) to get the 
134a 6f			    LD     L, A             ; number of bytes 
134b ed 42		    SBC    HL, BC           ; Find the size. CPIR doesn't affect carry. 
134d 2b			    DEC    HL              ; Compensate for null. 
134e c9				ret 
134f			 
134f			; Get the length of the A terminated string starting at $8000 hl 
134f			;    LD     HL, $8000 
134f			 
134f			strlent: 
134f			 
134f			                  ; A is the value we are looking for. 
134f 06 00		    LD     B, 0             ; Since we haven't the slightest clue as to the  
1351 0e 00		    LD     C, 0             ; actual size of the string, put 0 in BC to search 
1353			                           ; 65, 536 bytes (the entire addressable memory space). 
1353 ed b1		    CPIR                   ; Begin search for a byte equalling zero. 
1355			 
1355			; BC has been decremented so that it holds -length. Now need to synthesize a NEG BC. 
1355 26 00		    LD     H, 0             ; Zero HL (basically set it to 65, 536) to get the 
1357 2e 00		    LD     L, 0             ; number of bytes 
1359 ed 42		    SBC    HL, BC           ; Find the size. CPIR doesn't affect carry. 
135b 2b			    DEC    HL              ; Compensate for null. 
135c c9				ret 
135d			 
135d			 
135d			;Comparing Strings 
135d			 
135d			;IN    HL     Address of string1. 
135d			;      DE     Address of string2. 
135d			 
135d			; doc given but wrong??? 
135d			;OUT   zero   Set if string1 = string2, reset if string1 != string2. 
135d			;      carry  Set if string1 > string2, reset if string1 <= string2. 
135d			; tested 
135d			;OUT   carry set  if string1 = string2, carry  reset if string1 != string2. 
135d			 
135d			strcmp_old: 
135d e5			    PUSH   HL 
135e d5			    PUSH   DE 
135f			 
135f 1a			    LD     A, (DE)          ; Compare lengths to determine smaller string 
1360 be			    CP     (HL)            ; (want to minimize work). 
1361 38 01		    JR     C, Str1IsBigger 
1363 7e			    LD     A, (HL) 
1364			 
1364			Str1IsBigger: 
1364 4f			    LD     C, A             ; Put length in BC 
1365 06 00		    LD     B, 0 
1367 13			    INC    DE              ; Increment pointers to meat of string. 
1368 23			    INC    HL 
1369			 
1369			CmpLoop: 
1369 1a			    LD     A, (DE)          ; Compare bytes. 
136a ed a1		    CPI 
136c 20 09		    JR     NZ, NoMatch      ; If (HL) != (DE), abort. 
136e 13			    INC    DE              ; Update pointer. 
136f ea 69 13		    JP     PE, CmpLoop 
1372			 
1372 d1			    POP    DE 
1373 e1			    POP    HL 
1374 1a			    LD     A, (DE)          ; Check string lengths to see if really equal. 
1375 be			    CP     (HL) 
1376 c9			    RET 
1377			 
1377			NoMatch: 
1377 2b			    DEC    HL 
1378 be			    CP     (HL)            ; Compare again to affect carry. 
1379 d1			    POP    DE 
137a e1			    POP    HL 
137b c9			    RET 
137c			 
137c			;; test strmp 
137c			; 
137c			;ld de, .str1 
137c			;ld hl, .str2 
137c			;call strcmp 
137c			;jr z, .z1 
137c			;;this 
137c			;	if DEBUG_FORTH_WORDS 
137c			;		DMARK "NZ1" 
137c			;		CALLMONITOR 
137c			;	endif 
137c			;.z1: 
137c			; 
137c			;	if DEBUG_FORTH_WORDS 
137c			;		DMARK "ZZ1" 
137c			;		CALLMONITOR 
137c			;	endif 
137c			; 
137c			;ld de, .str1 
137c			;ld hl, .str1 
137c			;call strcmp 
137c			;jr z, .z2 
137c			;;this 
137c			;	if DEBUG_FORTH_WORDS 
137c			;		DMARK "NZ2" 
137c			;		CALLMONITOR 
137c			;	endif 
137c			;.z2: 
137c			; 
137c			;	if DEBUG_FORTH_WORDS 
137c			;		DMARK "ZZ2" 
137c			;		CALLMONITOR 
137c			;	endif 
137c			; 
137c			;ld de, .str1 
137c			;ld hl, .str2 
137c			;call strcmp 
137c			;jr c, .c1 
137c			; 
137c			;	if DEBUG_FORTH_WORDS 
137c			;		DMARK "Nc1" 
137c			;		CALLMONITOR 
137c			;	endif 
137c			;.c1: 
137c			;;this 
137c			;	if DEBUG_FORTH_WORDS 
137c			;		DMARK "cc1" 
137c			;		CALLMONITOR 
137c			;	endif 
137c			; 
137c			;ld de, .str1 
137c			;ld hl, .str1 
137c			;call strcmp 
137c			;jr c, .c2 
137c			;;this 
137c			;	if DEBUG_FORTH_WORDS 
137c			;		DMARK "Nc2" 
137c			;		CALLMONITOR 
137c			;	endif 
137c			;.c2: 
137c			; 
137c			;	if DEBUG_FORTH_WORDS 
137c			;		DMARK "cc2" 
137c			;		CALLMONITOR 
137c			;	endif 
137c			;	NEXTW 
137c			;.str1:   db "string1",0 
137c			;.str2:   db "string2",0 
137c			 
137c			; only care about direct match or not 
137c			; hl and de strings 
137c			; zero set if the same 
137c			 
137c			strcmp: 
137c 1a				ld a, (de) 
137d be				cp (hl) 
137e 28 02			jr z, .ssame 
1380 b7				or a 
1381 c9				ret 
1382			 
1382			.ssame:  
1382 fe 00			cp 0 
1384 c8				ret z 
1385			 
1385 23				inc hl 
1386 13				inc de 
1387 18 f3			jr strcmp 
1389				 
1389				 
1389			 
1389			;Copyright (c) 2014, Luke Maurits 
1389			;All rights reserved. 
1389			; 
1389			;Redistribution and use in source and binary forms, with or without 
1389			;modification, are permitted provided that the following conditions are met: 
1389			; 
1389			;* Redistributions of source code must retain the above copyright notice, this 
1389			;  list of conditions and the following disclaimer. 
1389			; 
1389			;* Redistributions in binary form must reproduce the above copyright notice, 
1389			;  this list of conditions and the following disclaimer in the documentation 
1389			;  and/or other materials provided with the distribution. 
1389			; 
1389			;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
1389			;AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
1389			;IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
1389			;DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE 
1389			;FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
1389			;DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
1389			;SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
1389			;CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
1389			;OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
1389			;OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
1389			 
1389			; https://github.com/lmaurits/lm512/blob/master/string.z80 
1389			 
1389			StrictStrCmp: 
1389				; Load next chars of each string 
1389 1a				ld a, (de) 
138a 47				ld b, a 
138b 7e				ld a, (hl) 
138c				; Compare 
138c b8				cp b 
138d				; Return non-zero if chars don't match 
138d c0				ret nz 
138e				; Check for end of both strings 
138e fe 00			cp "\0" 
1390				; Return if strings have ended 
1390 c8				ret z 
1391				; Otherwise, advance to next chars 
1391 23				inc hl 
1392 13				inc de 
1393 18 f4			jr StrictStrCmp 
1395			 
1395			;end 
1395			; eof 
1395			 
1395			 
1395			 
1395			 
1395			 
1395			 
# End of file firmware_strings.asm
1395			include "firmware_memory.asm"   ; malloc and free  
1395			 
1395			if DEBUG_FORTH_MALLOC_HIGH 
1395			.mallocsize: db "Wants malloc >256",0 
1395			.mallocasize: db "MALLOC gives >256",0 
1395			.malloczero: db "MALLOC gives zero",0 
1395			 
1395			malloc_guard_zerolen: 
1395				push hl 
1395				push de 
1395				push af 
1395			 
1395				ld de, 0 
1395			        call cmp16 
1395				jr nz, .lowalloz 
1395			 
1395				push hl 
1395				push de 
1395					ld hl, display_fb0 
1395					ld (display_fb_active), hl 
1395				call clear_display 
1395				ld a, 0 
1395				ld de, .malloczero 
1395				call str_at_display 
1395				call update_display 
1395				call delay1s 
1395				call delay1s 
1395				call bp_on 
1395			;	ld a, 0 
1395			;	ld (os_view_disable), a 
1395			 
1395				pop de 
1395				pop hl 
1395			 
1395				 
1395			 
1395				CALLMONITOR 
1395			.lowalloz: 
1395			 
1395			 
1395				pop af 
1395				pop de 
1395				pop hl 
1395			ret 
1395			 
1395			malloc_guard_entry: 
1395				push hl 
1395				push de 
1395				push af 
1395			 
1395			 	or a      ;clear carry flag 
1395				push hl 
1395				ld de, 255 
1395				sbc hl, de 
1395				jr c, .lowalloc 
1395			 
1395				push de 
1395					ld hl, display_fb0 
1395					ld (display_fb_active), hl 
1395				call clear_display 
1395				ld a, 0 
1395				ld de, .mallocsize 
1395				call str_at_display 
1395				call update_display 
1395				call delay1s 
1395				call delay1s 
1395			;	ld a, 0 
1395			;	ld (os_view_disable), a 
1395				call bp_on 
1395			 
1395				pop de 
1395				pop hl 
1395			 
1395				 
1395			 
1395				CALLMONITOR 
1395				jr .lowdone 
1395			.lowalloc: 
1395			 
1395			 
1395				pop hl 
1395			.lowdone:	pop af 
1395				pop de 
1395				pop hl 
1395			ret 
1395			 
1395			malloc_guard_exit: 
1395				push hl 
1395				push de 
1395				push af 
1395			 
1395			 	or a      ;clear carry flag 
1395				push hl 
1395				ld de, 255 
1395				sbc hl, de 
1395				jr c, .lowallocx 
1395			 
1395				push de 
1395					ld hl, display_fb0 
1395					ld (display_fb_active), hl 
1395				call clear_display 
1395				ld a, 0 
1395				ld de, .mallocasize 
1395				call str_at_display 
1395				call update_display 
1395				call delay1s 
1395				call delay1s 
1395			;	ld a, 0 
1395			;	ld (os_view_disable), a 
1395				call bp_on 
1395				pop de 
1395				pop hl 
1395			 
1395				CALLMONITOR 
1395				jr .lowdonex 
1395			.lowallocx: 
1395			 
1395				pop hl 
1395			.lowdonex:	pop af 
1395				pop de 
1395				pop hl 
1395			ret 
1395			endif 
1395			 
1395			if MALLOC_2 
1395			; Z80 Malloc and Free Functions 
1395			 
1395			; Malloc Function: 
1395			; Input: 
1395			;   HL: Size of block to allocate 
1395			; Output: 
1395			;   HL: Pointer to allocated memory block (NULL if allocation fails) 
1395			 
1395			malloc: 
1395				 
1395			if DEBUG_FORTH_MALLOC_HIGH 
1395			call malloc_guard_entry 
1395			endif 
1395			 
1395			 
1395			 
1395			 
1395					if DEBUG_FORTH_MALLOC 
1395						DMARK "mal" 
1395						CALLMONITOR 
1395					endif 
1395			    push af            ; Save AF register 
1395			    ld a, l            ; Load low byte of size into A 
1395			    or h               ; Check if size is zero 
1395			    jp z, malloc_exit  ; If size is zero, exit with NULL pointer 
1395			 
1395			    ; Allocate memory 
1395			    ld hl, (heap_start) ; Load start of heap into HL 
1395					if DEBUG_FORTH_MALLOC 
1395						DMARK "ma1" 
1395						CALLMONITOR 
1395					endif 
1395			    call malloc_internal ; Call internal malloc function 
1395			    pop af             ; Restore AF register 
1395			if DEBUG_FORTH_MALLOC_HIGH 
1395			call malloc_guard_exit 
1395			call malloc_guard_zerolen 
1395			endif 
1395			    ret                ; Return 
1395			 
1395			; Free Function: 
1395			; Input: 
1395			;   HL: Pointer to memory block to free 
1395			; Output: 
1395			;   None 
1395			 
1395			free: 
1395			    push af            ; Save AF register 
1395			    ld a, l            ; Load low byte of pointer into A 
1395			    or h               ; Check if pointer is NULL 
1395			    jp z, free_exit    ; If pointer is NULL, exit 
1395			 
1395			    ; Free memory 
1395			    ld hl, (heap_start) ; Load start of heap into HL 
1395			    call free_internal  ; Call internal free function 
1395			    pop af             ; Restore AF register 
1395			    ret                ; Return 
1395			 
1395			; Internal Malloc Function: 
1395			; Input: 
1395			;   HL: Size of block to allocate 
1395			; Output: 
1395			;   HL: Pointer to allocated memory block (NULL if allocation fails) 
1395			 
1395			malloc_internal: 
1395			    ld bc, 2           ; Number of bytes to allocate for management overhead 
1395			    add hl, bc         ; Add management overhead to requested size 
1395			    ex de, hl          ; Save total size in DE, and keep it in HL 
1395					if DEBUG_FORTH_MALLOC 
1395						DMARK "ma2" 
1395						CALLMONITOR 
1395					endif 
1395			 
1395			    ; Search for free memory block 
1395			    ld de, (heap_end)  ; Load end of heap into DE 
1395			    ld bc, 0           ; Initialize counter 
1395			 
1395					if DEBUG_FORTH_MALLOC 
1395						DMARK "ma2" 
1395						CALLMONITOR 
1395					endif 
1395			malloc_search_loop: 
1395			    ; Check if current block is free 
1395			    ld a, (hl)         ; Load current block's status (free or used) 
1395			    cp 0               ; Compare with zero (free) 
1395			    jr nz, malloc_skip_block_check  ; If not free, skip to the next block 
1395			 
1395			    ; Check if current block is large enough 
1395			    ld a, (hl+1)       ; Load high byte of block size 
1395			    cp l               ; Compare with low byte of requested size 
1395			    jr nz, malloc_skip_block_check  ; If not large enough, skip to the next block 
1395			 
1395			    ld a, (hl+2)       ; Load low byte of block size 
1395			    cp h               ; Compare with high byte of requested size 
1395			    jr c, malloc_skip_block_check   ; If not large enough, skip to the next block 
1395			 
1395			    ; Mark block as used 
1395			    ld (hl), 0xFF      ; Set status byte to indicate used block 
1395			 
1395			    ; Calculate remaining space in block 
1395			    ld bc, 0           ; Clear BC 
1395			    add hl, bc         ; Increment HL to point to start of data block 
1395			    add hl, de         ; HL = HL + DE (total size) 
1395			    ld bc, 1           ; Number of bytes to allocate for management overhead 
1395			    add hl, bc         ; Add management overhead to start of data block 
1395			 
1395			    ; Save pointer to allocated block in HL 
1395			if DEBUG_FORTH_MALLOC_HIGH 
1395						DMARK "ma5" 
1395			call malloc_guard_exit 
1395			call malloc_guard_zerolen 
1395			endif 
1395			    ret 
1395			 
1395			malloc_skip_block_check: 
1395			    ; Move to the next block 
1395			    ld bc, 3           ; Size of management overhead 
1395			    add hl, bc         ; Move to the next block 
1395			    inc de             ; Increment counter 
1395			 
1395			    ; Check if we have reached the end of heap 
1395			    ld a, e            ; Load low byte of heap end address 
1395			    cp (hl)            ; Compare with low byte of current address 
1395			    jr nz, malloc_search_loop  ; If not equal, continue searching 
1395			    ld a, d            ; Load high byte of heap end address 
1395			    cp 0               ; Check if it's zero (end of memory) 
1395			    jr nz, malloc_search_loop  ; If not zero, continue searching 
1395			 
1395			    ; If we reached here, allocation failed 
1395			    xor a              ; Set result to NULL 
1395			if DEBUG_FORTH_MALLOC_HIGH 
1395						DMARK "ma6" 
1395			call malloc_guard_exit 
1395			call malloc_guard_zerolen 
1395			endif 
1395			    ret 
1395			malloc_exit: 
1395			if DEBUG_FORTH_MALLOC_HIGH 
1395						DMARK "ma7" 
1395			call malloc_guard_exit 
1395			call malloc_guard_zerolen 
1395			endif 
1395			    ret 
1395			 
1395			; Internal Free Function: 
1395			; Input: 
1395			;   HL: Pointer to memory block to free 
1395			; Output: 
1395			;   None 
1395			 
1395			free_internal: 
1395			    ld de, (heap_start) ; Load start of heap into DE 
1395			    ld bc, 0            ; Initialize counter 
1395			 
1395			free_search_loop: 
1395			    ; Check if current block contains the pointer 
1395			    ld a, l             ; Load low byte of pointer 
1395			    cp (hl+1)           ; Compare with high byte of current block's address 
1395			    jr nz, free_skip_block_check  ; If not equal, skip to the next block 
1395			    ld a, h             ; Load high byte of pointer 
1395			    cp (hl+2)           ; Compare with low byte of current block's address 
1395			    jr nz, free_skip_block_check  ; If not equal, skip to the next block 
1395			 
1395			    ; Mark block as free 
1395			    ld (hl), 0          ; Set status byte to indicate free block 
1395			    ret                 ; Return 
1395			 
1395			free_skip_block_check: 
1395			    ; Move to the next block 
1395			    ld bc, 3            ; Size of management overhead 
1395			    add hl, bc          ; Move to the next block 
1395			    inc de              ; Increment counter 
1395			 
1395			    ; Check if we have reached the end of heap 
1395			    ld a, e             ; Load low byte of heap end address 
1395			    cp (hl)             ; Compare with low byte of current address 
1395			    jr nz, free_search_loop  ; If not equal, continue searching 
1395			    ld a, d             ; Load high byte of heap end address 
1395			    cp 0                ; Check if it's zero (end of memory) 
1395			    jr nz, free_search_loop  ; If not zero, continue searching 
1395			 
1395			    ; If we reached here, pointer is not found in heap 
1395			    ret 
1395			 
1395			free_exit: 
1395			    ret                 ; Return 
1395			 
1395			; Define heap start and end addresses 
1395			;heap_start:    .dw 0xC000   ; Start of heap 
1395			;heap_end:      .dw 0xE000   ; End of heap 
1395			 
1395			endif 
1395			 
1395			 
1395			if MALLOC_1 
1395			 
1395			 
1395			 
1395			; from https://gist.github.com/tomstorey/947a8b084bad69391a4b2a1c5b6d69ca 
1395			 
1395			;moved to firmware.asm 
1395			;heap_start        .equ  0x9000      ; Starting address of heap 
1395			;heap_size         .equ  0x0100      ; Number of bytes available in heap 
1395			 
1395			;      .org 0 
1395			;      jp    main 
1395			 
1395			 
1395			;      .org  0x100 
1395			;main: 
1395			;      ld    HL, 0x8100 
1395			;      ld    SP, HL 
1395			; 
1395			;      call  heap_init 
1395			; 
1395			;      ; Make some allocations 
1395			;      ld    HL, 12 
1395			;      call  malloc            ; Allocates 0x9004 
1395			; 
1395			;      ld    HL, 12 
1395			;      call  malloc            ; Allocates 0x9014 
1395			; 
1395			;      ld    HL, 12 
1395			;      call  malloc            ; Allocates 0x9024 
1395			; 
1395			;      ; Free some allocations 
1395			;      ld    HL, 0x9014 
1395			;      call  free 
1395			; 
1395			;      ld    HL, 0x9004 
1395			;      call  free 
1395			; 
1395			;      ld    HL, 0x9024 
1395			;      call  free 
1395			; 
1395			; 
1395			;      halt 
1395			 
1395			 
1395			;------------------------------------------------------------------------------ 
1395			;     heap_init                                                               : 
1395			;                                                                             : 
1395			; Description                                                                 : 
1395			;     Initialise the heap and make it ready for malloc and free operations.   : 
1395			;                                                                             : 
1395			;     The heap is maintained as a linked list, starting with an initial       : 
1395			;     "dummy block" of zero size which is mainly used to hold a pointer to    : 
1395			;     the first free block in the heap. Each block then points to the next    : 
1395			;     free block within the heap, and the free list ends at the first block   : 
1395			;     with a null pointer to the next free block.                             : 
1395			;                                                                             : 
1395			; Parameters                                                                  : 
1395			;     Inputs are compile-time only. Two defines which specify the starting    : 
1395			;     address of the heap and its size are required, along with a memory      : 
1395			;     allocation of 4 consecutive bytes which is used for a dummy block which : 
1395			;     principally stores a pointer to the first free block in the heap.       : 
1395			;                                                                             : 
1395			; Returns                                                                     : 
1395			;     Nothing                                                                 : 
1395			;------------------------------------------------------------------------------ 
1395			heap_init: 
1395 e5			      push  HL 
1396			 
1396			      ; Initialise free list struct 
1396 21 0e 80		      ld    HL, heap_start 
1399 22 0a 80		      ld    (free_list), HL 
139c 21 00 00		      ld    HL, 0 
139f 22 0c 80		      ld    (free_list+2), HL 
13a2			 
13a2			      ; Insert first free block at bottom of heap, consumes entire heap 
13a2 21 cd f0		      ld    HL, heap_start+heap_size-4 
13a5 22 0e 80		      ld    (heap_start), HL        ; Next block (end of free list) 
13a8 21 bf 70		      ld    HL, heap_size-4 
13ab 22 10 80		      ld    (heap_start+2), HL      ; Block size 
13ae			 
13ae			      ; Insert end of free list block at top of heap - two null words will 
13ae			      ; terminate the free list 
13ae 21 00 00		      ld    HL, 0 
13b1 22 cf f0		      ld    (heap_start+heap_size-2), HL 
13b4 22 cd f0		      ld    (heap_start+heap_size-4), HL 
13b7			 
13b7 e1			      pop   HL 
13b8			 
13b8 c9			      ret 
13b9			 
13b9			 
13b9			;------------------------------------------------------------------------------ 
13b9			;     malloc                                                                  : 
13b9			;                                                                             : 
13b9			; Description                                                                 : 
13b9			;     Allocates the wanted space from the heap and returns the address of the : 
13b9			;     first useable byte of the allocation.                                   : 
13b9			;                                                                             : 
13b9			;     Allocations can happen in one of two ways:                              : 
13b9			;                                                                             : 
13b9			;     1. A free block may be found which is the exact size wanted. In this    : 
13b9			;        case the block is removed from the free list and retuedn to the      : 
13b9			;        caller.                                                              : 
13b9			;     2. A free block may be found which is larger than the size wanted. In   : 
13b9			;        this case, the larger block is split into two. The first portion of  : 
13b9			;        this block will become the requested space by the malloc call and    : 
13b9			;        is returned to the caller. The second portion becomes a new free     : 
13b9			;        block, and the free list is adjusted to maintain continuity via this : 
13b9			;        newly created block.                                                 : 
13b9			;                                                                             : 
13b9			;     malloc does not set any initial value in the allocated space, the       : 
13b9			;     caller is required to do this as required.                              : 
13b9			;                                                                             : 
13b9			;     This implementation of malloc uses the stack exclusively, and is        : 
13b9			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
13b9			;     advisable to disable interrupts before calling malloc, and recommended  : 
13b9			;     to avoid the use of malloc inside ISRs in general.                      : 
13b9			;                                                                             : 
13b9			;     NOTE: heap_init must be called before malloc and free can be used.      : 
13b9			;                                                                             : 
13b9			; Parameters                                                                  : 
13b9			;     HL  Number of bytes wanted                                              : 
13b9			;                                                                             : 
13b9			; Returns                                                                     : 
13b9			;     HL  Address of the first useable byte of the allocation                 : 
13b9			;                                                                             : 
13b9			; Flags                                                                       : 
13b9			;     Z   Set if the allocation did not succeed, clear otherwise              : 
13b9			;                                                                             : 
13b9			; Stack frame                                                                 : 
13b9			;       |             |                                                       : 
13b9			;       +-------------+                                                       : 
13b9			;       |     BC      |                                                       : 
13b9			;       +-------------+                                                       : 
13b9			;       |     DE      |                                                       : 
13b9			;       +-------------+                                                       : 
13b9			;       |     IX      |                                                       : 
13b9			;       +-------------+                                                       : 
13b9			;       |  prev_free  |                                                       : 
13b9			;   +4  +-------------+                                                       : 
13b9			;       |  this_free  |                                                       : 
13b9			;   +2  +-------------+                                                       : 
13b9			;       |  next_free  |                                                       : 
13b9			;   +0  +-------------+                                                       : 
13b9			;       |             |                                                       : 
13b9			;                                                                             : 
13b9			;------------------------------------------------------------------------------ 
13b9			 
13b9			 
13b9			;malloc: 
13b9			; 
13b9			;	SAVESP ON 1 
13b9			; 
13b9			;	call malloc_code 
13b9			; 
13b9			;	CHECKSP ON 1 
13b9			;	ret 
13b9			 
13b9			 
13b9			malloc: 
13b9 c5			      push  BC 
13ba d5			      push  DE 
13bb dd e5		      push  IX 
13bd			if DEBUG_FORTH_MALLOC_HIGH 
13bd			call malloc_guard_entry 
13bd			endif 
13bd			 
13bd					if DEBUG_FORTH_MALLOC 
13bd						DMARK "mal" 
13bd						CALLMONITOR 
13bd					endif 
13bd 7c			      ld    A, H                    ; Exit if no space requested 
13be b5			      or    L 
13bf ca 7e 14		      jp    Z, malloc_early_exit 
13c2			 
13c2			;inc hl 
13c2			;inc hl 
13c2			;inc hl 
13c2			; 
13c2			;inc hl 
13c2			;inc hl 
13c2			;inc hl 
13c2			;inc hl 
13c2			;inc hl 
13c2			;inc hl 
13c2			;inc hl 
13c2			;inc hl 
13c2			;inc hl 
13c2			 
13c2			 
13c2			 
13c2			 
13c2					if DEBUG_FORTH_MALLOC 
13c2						DMARK "maA" 
13c2						CALLMONITOR 
13c2					endif 
13c2			      ; Set up stack frame 
13c2 eb			      ex    DE, HL 
13c3 21 fa ff		      ld    HL, -6                  ; Reserve 6 bytes for stack frame 
13c6 39			      add   HL, SP 
13c7 f9			      ld    SP, HL 
13c8 dd 21 00 00	      ld    IX, 0                   ; Use IX as a frame pointer 
13cc dd 39		      add   IX, SP 
13ce			 
13ce			      ; Setup initial state 
13ce 21 04 00		      ld    HL, 4                   ; want must also include space used by block struct 
13d1 19			      add   HL, DE 
13d2			 
13d2 44			      ld    B, H                    ; Move want to BC 
13d3 4d			      ld    C, L 
13d4			 
13d4 21 0a 80		      ld    HL, free_list           ; Store prev_free ptr to stack 
13d7 dd 75 04		      ld    (IX+4), L 
13da dd 74 05		      ld    (IX+5), H 
13dd			 
13dd 5e			      ld    E, (HL)                 ; Store this_free ptr to stack 
13de 23			      inc   HL 
13df 56			      ld    D, (HL) 
13e0 dd 73 02		      ld    (IX+2), E 
13e3 dd 72 03		      ld    (IX+3), D 
13e6 eb			      ex    DE, HL                  ; this_free ptr into HL 
13e7			 
13e7					if DEBUG_FORTH_MALLOC 
13e7						DMARK "maB" 
13e7						CALLMONITOR 
13e7					endif 
13e7			      ; Loop through free block list to find some space 
13e7			malloc_find_space: 
13e7 5e			      ld    E, (HL)                 ; Load next_free ptr into DE 
13e8 23			      inc   HL 
13e9 56			      ld    D, (HL) 
13ea			 
13ea 7a			      ld    A, D                    ; Check for null next_free ptr - end of free list 
13eb b3			      or    E 
13ec ca 78 14		      jp    Z, malloc_no_space 
13ef			 
13ef dd 73 00		      ld    (IX+0), E               ; Store next_free ptr to stack 
13f2 dd 72 01		      ld    (IX+1), D 
13f5			 
13f5			      ; Does this block have enough space to make the allocation? 
13f5 23			      inc   HL                      ; Load free block size into DE 
13f6 5e			      ld    E, (HL) 
13f7 23			      inc   HL 
13f8 56			      ld    D, (HL) 
13f9			 
13f9 eb			      ex    DE, HL                  ; Check size of block against want 
13fa b7			      or    A                       ; Ensure carry flag clear 
13fb ed 42		      sbc   HL, BC 
13fd e5			      push  HL                      ; Store the result for later (new block size) 
13fe			 
13fe ca 4d 14		      jp   Z, malloc_alloc_fit     ; Z means block size matches want - can allocate 
1401 30 1b		      jr    NC, malloc_alloc_split  ; NC means block is bigger than want - can allocate 
1403			 
1403			      ; this_free block is not big enough, setup ptrs to test next free block 
1403 e1			      pop   HL                      ; Discard previous result 
1404			 
1404 dd 6e 02		      ld    L, (IX+2)               ; Move this_free ptr into prev_free 
1407 dd 66 03		      ld    H, (IX+3) 
140a dd 75 04		      ld    (IX+4), L 
140d dd 74 05		      ld    (IX+5), H 
1410			 
1410 dd 6e 00		      ld    L, (IX+0)               ; Move next_free ptr into this_free 
1413 dd 66 01		      ld    H, (IX+1) 
1416 dd 75 02		      ld    (IX+2), L 
1419 dd 74 03		      ld    (IX+3), H 
141c			 
141c					if DEBUG_FORTH_MALLOC 
141c						DMARK "MA>" 
141c						CALLMONITOR 
141c					endif 
141c 18 c9		      jr    malloc_find_space 
141e			 
141e			      ; split a bigger block into two - requested size and remaining size 
141e			malloc_alloc_split: 
141e					if DEBUG_FORTH_MALLOC 
141e						DMARK "MAs" 
141e						CALLMONITOR 
141e					endif 
141e eb			      ex    DE, HL                  ; Calculate address of new free block 
141f 2b			      dec   HL 
1420 2b			      dec   HL 
1421 2b			      dec   HL 
1422 09			      add   HL, BC 
1423			 
1423			      ; Create a new block and point it at next_free 
1423 dd 5e 00		      ld    E, (IX+0)               ; Load next_free ptr into DE 
1426 dd 56 01		      ld    D, (IX+1) 
1429			 
1429 73			      ld    (HL), E                 ; Store next_free ptr into new block 
142a 23			      inc   HL 
142b 72			      ld    (HL), D 
142c			 
142c d1			      pop   DE                      ; Store size of new block into new block 
142d 23			      inc   HL 
142e 73			      ld    (HL), E 
142f 23			      inc   HL 
1430 72			      ld    (HL), D 
1431			 
1431			      ; Update this_free ptr to point to new block 
1431 2b			      dec   HL 
1432 2b			      dec   HL 
1433 2b			      dec   HL 
1434			 
1434 dd 5e 02		      ld    E, (IX+2)               ; Take a copy of current this_free ptr 
1437 dd 56 03		      ld    D, (IX+3) 
143a			 
143a dd 75 02		      ld    (IX+2), L               ; Store new block addr as this_free ptr 
143d dd 74 03		      ld    (IX+3), H 
1440			 
1440			      ; Modify this_free block to be allocation 
1440 eb			      ex    DE, HL 
1441 af			      xor   A                       ; Null the next block ptr of allocated block 
1442 77			      ld    (HL), A 
1443 23			      inc   HL 
1444 77			      ld    (HL), A 
1445			 
1445 23			      inc   HL                      ; Store want size into allocated block 
1446 71			      ld    (HL), C 
1447 23			      inc   HL 
1448 70			      ld    (HL), B 
1449 23			      inc   HL 
144a e5			      push  HL                      ; Address of allocation to return 
144b			 
144b 18 19		      jr    malloc_update_links 
144d			 
144d			malloc_alloc_fit: 
144d e1			      pop   HL                      ; Dont need new block size, want is exact fit 
144e			 
144e					if DEBUG_FORTH_MALLOC 
144e						DMARK "MAf" 
144e						CALLMONITOR 
144e					endif 
144e			      ; Modify this_free block to be allocation 
144e eb			      ex    DE, HL 
144f 2b			      dec   HL 
1450 2b			      dec   HL 
1451 2b			      dec   HL 
1452			 
1452 af			      xor   A                       ; Null the next block ptr of allocated block 
1453 77			      ld    (HL), A 
1454 23			      inc   HL 
1455 77			      ld    (HL), A 
1456			 
1456 23			      inc   HL                      ; Store address of allocation to return 
1457 23			      inc   HL 
1458 23			      inc   HL 
1459 e5			      push  HL 
145a			 
145a			      ; Copy next_free ptr to this_free, remove allocated block from free list 
145a dd 6e 00		      ld    L, (IX+0)               ; next_free to HL 
145d dd 66 01		      ld    H, (IX+1) 
1460			 
1460 dd 75 02		      ld    (IX+2), L               ; HL to this_free 
1463 dd 74 03		      ld    (IX+3), H 
1466			 
1466			 
1466			malloc_update_links: 
1466			      ; Update prev_free ptr to point to this_free 
1466 dd 6e 04		      ld    L, (IX+4)               ; prev_free ptr to HL 
1469 dd 66 05		      ld    H, (IX+5) 
146c			 
146c dd 5e 02		      ld    E, (IX+2)               ; this_free ptr to DE 
146f dd 56 03		      ld    D, (IX+3) 
1472			 
1472 73			      ld    (HL), E                 ; this_free ptr into prev_free 
1473 23			      inc   HL 
1474 72			      ld    (HL), D 
1475			 
1475					if DEBUG_FORTH_MALLOC 
1475						DMARK "Mul" 
1475						CALLMONITOR 
1475					endif 
1475			      ; Clear the Z flag to indicate successful allocation 
1475 7a			      ld    A, D 
1476 b3			      or    E 
1477			 
1477 d1			      pop   DE                      ; Address of allocation 
1478					if DEBUG_FORTH_MALLOC 
1478						DMARK "MAu" 
1478						CALLMONITOR 
1478					endif 
1478			 
1478			malloc_no_space: 
1478 21 06 00		      ld    HL, 6                   ; Clean up stack frame 
147b 39			      add   HL, SP 
147c f9			      ld    SP, HL 
147d			 
147d eb			      ex    DE, HL                  ; Alloc addr into HL for return 
147e					if DEBUG_FORTH_MALLOC 
147e						DMARK "MAN" 
147e						CALLMONITOR 
147e					endif 
147e			 
147e			malloc_early_exit: 
147e					if DEBUG_FORTH_MALLOC 
147e						DMARK "MAx" 
147e						CALLMONITOR 
147e					endif 
147e dd e1		      pop   IX 
1480 d1			      pop   DE 
1481 c1			      pop   BC 
1482			 
1482			if DEBUG_FORTH_MALLOC_HIGH 
1482			call malloc_guard_exit 
1482			call malloc_guard_zerolen 
1482			endif 
1482 c9			      ret 
1483			 
1483			 
1483			;------------------------------------------------------------------------------ 
1483			;     free                                                                    : 
1483			;                                                                             : 
1483			; Description                                                                 : 
1483			;     Return the space pointed to by HL to the heap. HL must be an address as : 
1483			;     returned by malloc, otherwise the behaviour is undefined.               : 
1483			;                                                                             : 
1483			;     Where possible, directly adjacent free blocks will be merged together   : 
1483			;     into larger blocks to help ensure that the heap does not become         : 
1483			;     excessively fragmented.                                                 : 
1483			;                                                                             : 
1483			;     free does not clear or set any other value into the freed space, and    : 
1483			;     therefore its contents may be visible through subsequent malloc's. The  : 
1483			;     caller should clear the freed space as required.                        : 
1483			;                                                                             : 
1483			;     This implementation of free uses the stack exclusively, and is          : 
1483			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
1483			;     advisable to disable interrupts before calling free, and recommended    : 
1483			;     to avoid the use of free inside ISRs in general.                        : 
1483			;                                                                             : 
1483			;     NOTE: heap_init must be called before malloc and free can be used.      : 
1483			;                                                                             : 
1483			; Parameters                                                                  : 
1483			;     HL  Pointer to address of first byte of allocation to be freed          : 
1483			;                                                                             : 
1483			; Returns                                                                     : 
1483			;     Nothing                                                                 : 
1483			;                                                                             : 
1483			; Stack frame                                                                 : 
1483			;       |             |                                                       : 
1483			;       +-------------+                                                       : 
1483			;       |     BC      |                                                       : 
1483			;       +-------------+                                                       : 
1483			;       |     DE      |                                                       : 
1483			;       +-------------+                                                       : 
1483			;       |     IX      |                                                       : 
1483			;       +-------------+                                                       : 
1483			;       |  prev_free  |                                                       : 
1483			;   +2  +-------------+                                                       : 
1483			;       |  next_free  |                                                       : 
1483			;   +0  +-------------+                                                       : 
1483			;       |             |                                                       : 
1483			;                                                                             : 
1483			;------------------------------------------------------------------------------ 
1483			free: 
1483 c5			      push  BC 
1484 d5			      push  DE 
1485 dd e5		      push  IX 
1487			 
1487 7c			      ld    A, H                    ; Exit if ptr is null 
1488 b5			      or    L 
1489 ca 4d 15		      jp    Z, free_early_exit 
148c			 
148c			      ; Set up stack frame 
148c eb			      ex    DE, HL 
148d 21 fc ff		      ld    HL, -4                  ; Reserve 4 bytes for stack frame 
1490 39			      add   HL, SP 
1491 f9			      ld    SP, HL 
1492 dd 21 00 00	      ld    IX, 0                   ; Use IX as a frame pointer 
1496 dd 39		      add   IX, SP 
1498			 
1498			      ; The address in HL points to the start of the useable allocated space, 
1498			      ; but the block struct starts 4 bytes before this. Sub 4 to get the 
1498			      ; address of the block itself. 
1498 eb			      ex    DE, HL 
1499 11 fc ff		      ld    DE, -4 
149c 19			      add   HL, DE 
149d			 
149d			      ; An allocated block must have a null next block pointer in it 
149d 7e			      ld    A, (HL) 
149e 23			      inc   HL 
149f b6			      or    (HL) 
14a0 c2 48 15		      jp    NZ, free_done 
14a3			 
14a3 2b			      dec   HL 
14a4			 
14a4 44			      ld    B, H                    ; Copy HL to BC 
14a5 4d			      ld    C, L 
14a6			 
14a6			      ; Loop through the free list to find the first block with an address 
14a6			      ; higher than the block being freed 
14a6 21 0a 80		      ld    HL, free_list 
14a9			 
14a9			free_find_higher_block: 
14a9 5e			      ld    E, (HL)                 ; Load next ptr from free block 
14aa 23			      inc   HL 
14ab 56			      ld    D, (HL) 
14ac 2b			      dec   HL 
14ad			 
14ad dd 73 00		      ld    (IX+0), E               ; Save ptr to next free block 
14b0 dd 72 01		      ld    (IX+1), D 
14b3 dd 75 02		      ld    (IX+2), L               ; Save ptr to prev free block 
14b6 dd 74 03		      ld    (IX+3), H 
14b9			 
14b9 78			      ld    A, B                    ; Check if DE is greater than BC 
14ba ba			      cp    D                       ; Compare MSB first 
14bb 28 02		      jr    Z, $+4                  ; MSB the same, compare LSB 
14bd 30 04		      jr    NC, free_find_higher_block_skip 
14bf 79			      ld    A, C 
14c0 bb			      cp    E                       ; Then compare LSB 
14c1 38 08		      jr    C, free_found_higher_block 
14c3			 
14c3			free_find_higher_block_skip: 
14c3 7a			      ld    A, D                    ; Reached the end of the free list? 
14c4 b3			      or    E 
14c5 ca 48 15		      jp    Z, free_done 
14c8			 
14c8 eb			      ex    DE, HL 
14c9			 
14c9 18 de		      jr    free_find_higher_block 
14cb			 
14cb			free_found_higher_block: 
14cb			      ; Insert freed block between prev and next free blocks 
14cb 71			      ld    (HL), C                 ; Point prev free block to freed block 
14cc 23			      inc   HL 
14cd 70			      ld    (HL), B 
14ce			 
14ce 60			      ld    H, B                    ; Point freed block at next free block 
14cf 69			      ld    L, C 
14d0 73			      ld    (HL), E 
14d1 23			      inc   HL 
14d2 72			      ld    (HL), D 
14d3			 
14d3			      ; Check if the freed block is adjacent to the next free block 
14d3 23			      inc   HL                      ; Load size of freed block into HL 
14d4 5e			      ld    E, (HL) 
14d5 23			      inc   HL 
14d6 56			      ld    D, (HL) 
14d7 eb			      ex    DE, HL 
14d8			 
14d8 09			      add   HL, BC                  ; Add addr of freed block and its size 
14d9			 
14d9 dd 5e 00		      ld    E, (IX+0)               ; Load addr of next free block into DE 
14dc dd 56 01		      ld    D, (IX+1) 
14df			 
14df b7			      or    A                       ; Clear the carry flag 
14e0 ed 52		      sbc   HL, DE                  ; Subtract addrs to compare adjacency 
14e2 20 22		      jr    NZ, free_check_adjacent_to_prev 
14e4			 
14e4			      ; Freed block is adjacent to next, merge into one bigger block 
14e4 eb			      ex    DE, HL                  ; Load next ptr from next block into DE 
14e5 5e			      ld    E, (HL) 
14e6 23			      inc   HL 
14e7 56			      ld    D, (HL) 
14e8 e5			      push  HL                      ; Save ptr to next block for later 
14e9			 
14e9 60			      ld    H, B                    ; Store ptr from next block into freed block 
14ea 69			      ld    L, C 
14eb 73			      ld    (HL), E 
14ec 23			      inc   HL 
14ed 72			      ld    (HL), D 
14ee			 
14ee e1			      pop   HL                      ; Restore ptr to next block 
14ef 23			      inc   HL                      ; Load size of next block into DE 
14f0 5e			      ld    E, (HL) 
14f1 23			      inc   HL 
14f2 56			      ld    D, (HL) 
14f3 d5			      push  DE                      ; Save next block size for later 
14f4			 
14f4 60			      ld    H, B                    ; Load size of freed block into HL 
14f5 69			      ld    L, C 
14f6 23			      inc   HL 
14f7 23			      inc   HL 
14f8 5e			      ld    E, (HL) 
14f9 23			      inc   HL 
14fa 56			      ld    D, (HL) 
14fb eb			      ex    DE, HL 
14fc			 
14fc d1			      pop   DE                      ; Restore size of next block 
14fd 19			      add   HL, DE                  ; Add sizes of both blocks 
14fe eb			      ex    DE, HL 
14ff			 
14ff 60			      ld    H, B                    ; Store new bigger size into freed block 
1500 69			      ld    L, C 
1501 23			      inc   HL 
1502 23			      inc   HL 
1503 73			      ld    (HL), E 
1504 23			      inc   HL 
1505 72			      ld    (HL), D 
1506			 
1506			free_check_adjacent_to_prev: 
1506			      ; Check if the freed block is adjacent to the prev free block 
1506 dd 6e 02		      ld    L, (IX+2)               ; Prev free block ptr into HL 
1509 dd 66 03		      ld    H, (IX+3) 
150c			 
150c 23			      inc   HL                      ; Size of prev free block into DE 
150d 23			      inc   HL 
150e 5e			      ld    E, (HL) 
150f 23			      inc   HL 
1510 56			      ld    D, (HL) 
1511 2b			      dec   HL 
1512 2b			      dec   HL 
1513 2b			      dec   HL 
1514			 
1514 19			      add   HL, DE                  ; Add prev block addr and size 
1515			 
1515 b7			      or    A                       ; Clear the carry flag 
1516 ed 42		      sbc   HL, BC                  ; Subtract addrs to compare adjacency 
1518 20 2e		      jr    NZ, free_done 
151a			 
151a			      ; Freed block is adjacent to prev, merge into one bigger block 
151a 60			      ld    H, B                    ; Load next ptr from freed block into DE 
151b 69			      ld    L, C 
151c 5e			      ld    E, (HL) 
151d 23			      inc   HL 
151e 56			      ld    D, (HL) 
151f e5			      push  HL                      ; Save freed block ptr for later 
1520			 
1520 dd 6e 02		      ld    L, (IX+2)               ; Store freed block ptr into prev block 
1523 dd 66 03		      ld    H, (IX+3) 
1526 73			      ld    (HL), E 
1527 23			      inc   HL 
1528 72			      ld    (HL), D 
1529			 
1529 e1			      pop   HL                      ; Restore freed block ptr 
152a 23			      inc   HL                      ; Load size of freed block into DE 
152b 5e			      ld    E, (HL) 
152c 23			      inc   HL 
152d 56			      ld    D, (HL) 
152e d5			      push  DE                      ; Save freed block size for later 
152f			 
152f dd 6e 02		      ld    L, (IX+2)               ; Load size of prev block into DE 
1532 dd 66 03		      ld    H, (IX+3) 
1535 23			      inc   HL 
1536 23			      inc   HL 
1537 5e			      ld    E, (HL) 
1538 23			      inc   HL 
1539 56			      ld    D, (HL) 
153a			 
153a e1			      pop   HL                      ; Add sizes of both blocks 
153b 19			      add   HL, DE 
153c eb			      ex    DE, HL 
153d			 
153d dd 6e 02		      ld    L, (IX+2)               ; Store new bigger size into prev block 
1540 dd 66 03		      ld    H, (IX+3) 
1543 23			      inc   HL 
1544 23			      inc   HL 
1545 73			      ld    (HL), E 
1546 23			      inc   HL 
1547 72			      ld    (HL), D 
1548			 
1548			free_done: 
1548 21 04 00		      ld    HL, 4                   ; Clean up stack frame 
154b 39			      add   HL, SP 
154c f9			      ld    SP, HL 
154d			 
154d			free_early_exit: 
154d dd e1		      pop   IX 
154f d1			      pop   DE 
1550 c1			      pop   BC 
1551			 
1551 c9			      ret 
1552			 
1552			; moved to firmware.asm 
1552			; 
1552			;free_list         .dw   0     ; Block struct for start of free list (MUST be 4 bytes) 
1552			;                  .dw   0 
1552			 
1552			 
1552			endif 
1552			 
1552			 
1552			if MALLOC_3 
1552			; https://gist.githubusercontent.com/tomstorey/947a8b084bad69391a4b2a1c5b6d69ca/raw/5a08fb30a480d98c0deb4a6afe2d48961cc8e9d9/z80_malloc.s 
1552			;heap_start        .equ  0x9000      ; Starting address of heap 
1552			;heap_size         .equ  0x0100      ; Number of bytes available in heap 
1552			; 
1552			 ;     .org 0 
1552			  ;    jp    main 
1552			; 
1552			; 
1552			 ;     .org  0x100 
1552			;main: 
1552			 ;     ld    HL, 0x8100 
1552			  ;    ld    SP, HL 
1552			; 
1552			;      call  heap_init 
1552			 
1552			      ; Make some allocations 
1552			;      ld    HL, 12 
1552			;      call  malloc            ; Allocates 0x9004 
1552			; 
1552			 ;     ld    HL, 12 
1552			;      call  malloc            ; Allocates 0x9014 
1552			 
1552			;      ld    HL, 12 
1552			;      call  malloc            ; Allocates 0x9024 
1552			 
1552			      ; Free some allocations 
1552			;      ld    HL, 0x9014 
1552			;      call  free 
1552			 
1552			;      ld    HL, 0x9004 
1552			;      call  free 
1552			; 
1552			;      ld    HL, 0x9024 
1552			;      call  free 
1552			 
1552			 
1552			 ;     halt 
1552			 
1552			 
1552			;------------------------------------------------------------------------------ 
1552			;     heap_init                                                               : 
1552			;                                                                             : 
1552			; Description                                                                 : 
1552			;     Initialise the heap and make it ready for malloc and free operations.   : 
1552			;                                                                             : 
1552			;     The heap is maintained as a linked list, starting with an initial       : 
1552			;     "dummy block" of zero size which is mainly used to hold a pointer to    : 
1552			;     the first free block in the heap. Each block then points to the next    : 
1552			;     free block within the heap, and the free list ends at the first block   : 
1552			;     with a null pointer to the next free block.                             : 
1552			;                                                                             : 
1552			; Parameters                                                                  : 
1552			;     Inputs are compile-time only. Two defines which specify the starting    : 
1552			;     address of the heap and its size are required, along with a memory      : 
1552			;     allocation of 4 consecutive bytes which is used for a dummy block which : 
1552			;     principally stores a pointer to the first free block in the heap.       : 
1552			;                                                                             : 
1552			; Returns                                                                     : 
1552			;     Nothing                                                                 : 
1552			;------------------------------------------------------------------------------ 
1552			heap_init: 
1552			      push  HL 
1552			 
1552			      ; Initialise free list struct 
1552			      ld    HL, heap_start 
1552			      ld    (free_list), HL 
1552			      ld    HL, 0 
1552			      ld    (free_list+2), HL 
1552			 
1552			      ; Insert first free block at bottom of heap, consumes entire heap 
1552			      ld    HL, heap_start+heap_size-4 
1552			      ld    (heap_start), HL        ; Next block (end of free list) 
1552			      ld    HL, heap_size-4 
1552			      ld    (heap_start+2), HL      ; Block size 
1552			 
1552			      ; Insert end of free list block at top of heap - two null words will 
1552			      ; terminate the free list 
1552			      ld    HL, 0 
1552			      ld    (heap_start+heap_size-2), HL 
1552			      ld    (heap_start+heap_size-4), HL 
1552			 
1552			      pop   HL 
1552			 
1552			      ret 
1552			 
1552			 
1552			;------------------------------------------------------------------------------ 
1552			;     malloc                                                                  : 
1552			;                                                                             : 
1552			; Description                                                                 : 
1552			;     Allocates the wanted space from the heap and returns the address of the : 
1552			;     first useable byte of the allocation.                                   : 
1552			;                                                                             : 
1552			;     Allocations can happen in one of two ways:                              : 
1552			;                                                                             : 
1552			;     1. A free block may be found which is the exact size wanted. In this    : 
1552			;        case the block is removed from the free list and retuedn to the      : 
1552			;        caller.                                                              : 
1552			;     2. A free block may be found which is larger than the size wanted. In   : 
1552			;        this case, the larger block is split into two. The first portion of  : 
1552			;        this block will become the requested space by the malloc call and    : 
1552			;        is returned to the caller. The second portion becomes a new free     : 
1552			;        block, and the free list is adjusted to maintain continuity via this : 
1552			;        newly created block.                                                 : 
1552			;                                                                             : 
1552			;     malloc does not set any initial value in the allocated space, the       : 
1552			;     caller is required to do this as required.                              : 
1552			;                                                                             : 
1552			;     This implementation of malloc uses the stack exclusively, and is        : 
1552			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
1552			;     advisable to disable interrupts before calling malloc, and recommended  : 
1552			;     to avoid the use of malloc inside ISRs in general.                      : 
1552			;                                                                             : 
1552			;     NOTE: heap_init must be called before malloc and free can be used.      : 
1552			;                                                                             : 
1552			; Parameters                                                                  : 
1552			;     HL  Number of bytes wanted                                              : 
1552			;                                                                             : 
1552			; Returns                                                                     : 
1552			;     HL  Address of the first useable byte of the allocation                 : 
1552			;                                                                             : 
1552			; Flags                                                                       : 
1552			;     Z   Set if the allocation did not succeed, clear otherwise              : 
1552			;                                                                             : 
1552			; Stack frame                                                                 : 
1552			;       |             |                                                       : 
1552			;       +-------------+                                                       : 
1552			;       |     BC      |                                                       : 
1552			;       +-------------+                                                       : 
1552			;       |     DE      |                                                       : 
1552			;       +-------------+                                                       : 
1552			;       |     IX      |                                                       : 
1552			;       +-------------+                                                       : 
1552			;       |  prev_free  |                                                       : 
1552			;   +4  +-------------+                                                       : 
1552			;       |  this_free  |                                                       : 
1552			;   +2  +-------------+                                                       : 
1552			;       |  next_free  |                                                       : 
1552			;   +0  +-------------+                                                       : 
1552			;       |             |                                                       : 
1552			;                                                                             : 
1552			;------------------------------------------------------------------------------ 
1552			malloc: 
1552			      push  BC 
1552			      push  DE 
1552			      push  IX 
1552			 
1552			      ld    A, H                    ; Exit if no space requested 
1552			      or    L 
1552			      jp    Z, malloc_early_exit 
1552			 
1552			      ; Set up stack frame 
1552			      ex    DE, HL 
1552			      ld    HL, -6                  ; Reserve 6 bytes for stack frame 
1552			      add   HL, SP 
1552			      ld    SP, HL 
1552			      ld    IX, 0                   ; Use IX as a frame pointer 
1552			      add   IX, SP 
1552			 
1552			      ; Setup initial state 
1552			      ld    HL, 4                   ; want must also include space used by block struct 
1552			      add   HL, DE 
1552			 
1552			      ld    B, H                    ; Move want to BC 
1552			      ld    C, L 
1552			 
1552			      ld    HL, free_list           ; Store prev_free ptr to stack 
1552			      ld    (IX+4), L 
1552			      ld    (IX+5), H 
1552			 
1552			      ld    E, (HL)                 ; Store this_free ptr to stack 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			      ld    (IX+2), E 
1552			      ld    (IX+3), D 
1552			      ex    DE, HL                  ; this_free ptr into HL 
1552			 
1552			      ; Loop through free block list to find some space 
1552			malloc_find_space: 
1552			      ld    E, (HL)                 ; Load next_free ptr into DE 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			 
1552			      ld    A, D                    ; Check for null next_free ptr - end of free list 
1552			      or    E 
1552			      jp    Z, malloc_no_space 
1552			 
1552			      ld    (IX+0), E               ; Store next_free ptr to stack 
1552			      ld    (IX+1), D 
1552			 
1552			      ; Does this block have enough space to make the allocation? 
1552			      inc   HL                      ; Load free block size into DE 
1552			      ld    E, (HL) 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			 
1552			      ex    DE, HL                  ; Check size of block against want 
1552			      or    A                       ; Ensure carry flag clear 
1552			      sbc   HL, BC 
1552			      push  HL                      ; Store the result for later (new block size) 
1552			 
1552			      jr    Z, malloc_alloc_fit     ; Z means block size matches want - can allocate 
1552			      jr    NC, malloc_alloc_split  ; NC means block is bigger than want - can allocate 
1552			 
1552			      ; this_free block is not big enough, setup ptrs to test next free block 
1552			      pop   HL                      ; Discard previous result 
1552			 
1552			      ld    L, (IX+2)               ; Move this_free ptr into prev_free 
1552			      ld    H, (IX+3) 
1552			      ld    (IX+4), L 
1552			      ld    (IX+5), H 
1552			 
1552			      ld    L, (IX+0)               ; Move next_free ptr into this_free 
1552			      ld    H, (IX+1) 
1552			      ld    (IX+2), L 
1552			      ld    (IX+3), H 
1552			 
1552			      jr    malloc_find_space 
1552			 
1552			      ; split a bigger block into two - requested size and remaining size 
1552			malloc_alloc_split: 
1552			      ex    DE, HL                  ; Calculate address of new free block 
1552			      dec   HL 
1552			      dec   HL 
1552			      dec   HL 
1552			      add   HL, BC 
1552			 
1552			      ; Create a new block and point it at next_free 
1552			      ld    E, (IX+0)               ; Load next_free ptr into DE 
1552			      ld    D, (IX+1) 
1552			 
1552			      ld    (HL), E                 ; Store next_free ptr into new block 
1552			      inc   HL 
1552			      ld    (HL), D 
1552			 
1552			      pop   DE                      ; Store size of new block into new block 
1552			      inc   HL 
1552			      ld    (HL), E 
1552			      inc   HL 
1552			      ld    (HL), D 
1552			 
1552			      ; Update this_free ptr to point to new block 
1552			      dec   HL 
1552			      dec   HL 
1552			      dec   HL 
1552			 
1552			      ld    E, (IX+2)               ; Take a copy of current this_free ptr 
1552			      ld    D, (IX+3) 
1552			 
1552			      ld    (IX+2), L               ; Store new block addr as this_free ptr 
1552			      ld    (IX+3), H 
1552			 
1552			      ; Modify this_free block to be allocation 
1552			      ex    DE, HL 
1552			      xor   A                       ; Null the next block ptr of allocated block 
1552			      ld    (HL), A 
1552			      inc   HL 
1552			      ld    (HL), A 
1552			 
1552			      inc   HL                      ; Store want size into allocated block 
1552			      ld    (HL), C 
1552			      inc   HL 
1552			      ld    (HL), B 
1552			      inc   HL 
1552			      push  HL                      ; Address of allocation to return 
1552			 
1552			      jr    malloc_update_links 
1552			 
1552			malloc_alloc_fit: 
1552			      pop   HL                      ; Dont need new block size, want is exact fit 
1552			 
1552			      ; Modify this_free block to be allocation 
1552			      ex    DE, HL 
1552			      dec   HL 
1552			      dec   HL 
1552			      dec   HL 
1552			 
1552			      xor   A                       ; Null the next block ptr of allocated block 
1552			      ld    (HL), A 
1552			      inc   HL 
1552			      ld    (HL), A 
1552			 
1552			      inc   HL                      ; Store address of allocation to return 
1552			      inc   HL 
1552			      inc   HL 
1552			      push  HL 
1552			 
1552			      ; Copy next_free ptr to this_free, remove allocated block from free list 
1552			      ld    L, (IX+0)               ; next_free to HL 
1552			      ld    H, (IX+1) 
1552			 
1552			      ld    (IX+2), L               ; HL to this_free 
1552			      ld    (IX+3), H 
1552			 
1552			 
1552			malloc_update_links: 
1552			      ; Update prev_free ptr to point to this_free 
1552			      ld    L, (IX+4)               ; prev_free ptr to HL 
1552			      ld    H, (IX+5) 
1552			 
1552			      ld    E, (IX+2)               ; this_free ptr to DE 
1552			      ld    D, (IX+3) 
1552			 
1552			      ld    (HL), E                 ; this_free ptr into prev_free 
1552			      inc   HL 
1552			      ld    (HL), D 
1552			 
1552			      ; Clear the Z flag to indicate successful allocation 
1552			      ld    A, D 
1552			      or    E 
1552			 
1552			      pop   DE                      ; Address of allocation 
1552			 
1552			malloc_no_space: 
1552			      ld    HL, 6                   ; Clean up stack frame 
1552			      add   HL, SP 
1552			      ld    SP, HL 
1552			 
1552			      ex    DE, HL                  ; Alloc addr into HL for return 
1552			 
1552			malloc_early_exit: 
1552			      pop   IX 
1552			      pop   DE 
1552			      pop   BC 
1552			 
1552			      ret 
1552			 
1552			 
1552			;------------------------------------------------------------------------------ 
1552			;     free                                                                    : 
1552			;                                                                             : 
1552			; Description                                                                 : 
1552			;     Return the space pointed to by HL to the heap. HL must be an address as : 
1552			;     returned by malloc, otherwise the behaviour is undefined.               : 
1552			;                                                                             : 
1552			;     Where possible, directly adjacent free blocks will be merged together   : 
1552			;     into larger blocks to help ensure that the heap does not become         : 
1552			;     excessively fragmented.                                                 : 
1552			;                                                                             : 
1552			;     free does not clear or set any other value into the freed space, and    : 
1552			;     therefore its contents may be visible through subsequent malloc's. The  : 
1552			;     caller should clear the freed space as required.                        : 
1552			;                                                                             : 
1552			;     This implementation of free uses the stack exclusively, and is          : 
1552			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
1552			;     advisable to disable interrupts before calling free, and recommended    : 
1552			;     to avoid the use of free inside ISRs in general.                        : 
1552			;                                                                             : 
1552			;     NOTE: heap_init must be called before malloc and free can be used.      : 
1552			;                                                                             : 
1552			; Parameters                                                                  : 
1552			;     HL  Pointer to address of first byte of allocation to be freed          : 
1552			;                                                                             : 
1552			; Returns                                                                     : 
1552			;     Nothing                                                                 : 
1552			;                                                                             : 
1552			; Stack frame                                                                 : 
1552			;       |             |                                                       : 
1552			;       +-------------+                                                       : 
1552			;       |     BC      |                                                       : 
1552			;       +-------------+                                                       : 
1552			;       |     DE      |                                                       : 
1552			;       +-------------+                                                       : 
1552			;       |     IX      |                                                       : 
1552			;       +-------------+                                                       : 
1552			;       |  prev_free  |                                                       : 
1552			;   +2  +-------------+                                                       : 
1552			;       |  next_free  |                                                       : 
1552			;   +0  +-------------+                                                       : 
1552			;       |             |                                                       : 
1552			;                                                                             : 
1552			;------------------------------------------------------------------------------ 
1552			free: 
1552			      push  BC 
1552			      push  DE 
1552			      push  IX 
1552			 
1552			      ld    A, H                    ; Exit if ptr is null 
1552			      or    L 
1552			      jp    Z, free_early_exit 
1552			 
1552			      ; Set up stack frame 
1552			      ex    DE, HL 
1552			      ld    HL, -4                  ; Reserve 4 bytes for stack frame 
1552			      add   HL, SP 
1552			      ld    SP, HL 
1552			      ld    IX, 0                   ; Use IX as a frame pointer 
1552			      add   IX, SP 
1552			 
1552			      ; The address in HL points to the start of the useable allocated space, 
1552			      ; but the block struct starts 4 bytes before this. Sub 4 to get the 
1552			      ; address of the block itself. 
1552			      ex    DE, HL 
1552			      ld    DE, -4 
1552			      add   HL, DE 
1552			 
1552			      ; An allocated block must have a null next block pointer in it 
1552			      ld    A, (HL) 
1552			      inc   HL 
1552			      or    (HL) 
1552			      jp    NZ, free_done 
1552			 
1552			      dec   HL 
1552			 
1552			      ld    B, H                    ; Copy HL to BC 
1552			      ld    C, L 
1552			 
1552			      ; Loop through the free list to find the first block with an address 
1552			      ; higher than the block being freed 
1552			      ld    HL, free_list 
1552			 
1552			free_find_higher_block: 
1552			      ld    E, (HL)                 ; Load next ptr from free block 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			      dec   HL 
1552			 
1552			      ld    (IX+0), E               ; Save ptr to next free block 
1552			      ld    (IX+1), D 
1552			      ld    (IX+2), L               ; Save ptr to prev free block 
1552			      ld    (IX+3), H 
1552			 
1552			      ld    A, B                    ; Check if DE is greater than BC 
1552			      cp    D                       ; Compare MSB first 
1552			      jr    Z, $+4                  ; MSB the same, compare LSB 
1552			      jr    NC, free_find_higher_block_skip 
1552			      ld    A, C 
1552			      cp    E                       ; Then compare LSB 
1552			      jr    C, free_found_higher_block 
1552			 
1552			free_find_higher_block_skip: 
1552			      ld    A, D                    ; Reached the end of the free list? 
1552			      or    E 
1552			      jp    Z, free_done 
1552			 
1552			      ex    DE, HL 
1552			 
1552			      jr    free_find_higher_block 
1552			 
1552			free_found_higher_block: 
1552			      ; Insert freed block between prev and next free blocks 
1552			      ld    (HL), C                 ; Point prev free block to freed block 
1552			      inc   HL 
1552			      ld    (HL), B 
1552			 
1552			      ld    H, B                    ; Point freed block at next free block 
1552			      ld    L, C 
1552			      ld    (HL), E 
1552			      inc   HL 
1552			      ld    (HL), D 
1552			 
1552			      ; Check if the freed block is adjacent to the next free block 
1552			      inc   HL                      ; Load size of freed block into HL 
1552			      ld    E, (HL) 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			      ex    DE, HL 
1552			 
1552			      add   HL, BC                  ; Add addr of freed block and its size 
1552			 
1552			      ld    E, (IX+0)               ; Load addr of next free block into DE 
1552			      ld    D, (IX+1) 
1552			 
1552			      or    A                       ; Clear the carry flag 
1552			      sbc   HL, DE                  ; Subtract addrs to compare adjacency 
1552			      jr    NZ, free_check_adjacent_to_prev 
1552			 
1552			      ; Freed block is adjacent to next, merge into one bigger block 
1552			      ex    DE, HL                  ; Load next ptr from next block into DE 
1552			      ld    E, (HL) 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			      push  HL                      ; Save ptr to next block for later 
1552			 
1552			      ld    H, B                    ; Store ptr from next block into freed block 
1552			      ld    L, C 
1552			      ld    (HL), E 
1552			      inc   HL 
1552			      ld    (HL), D 
1552			 
1552			      pop   HL                      ; Restore ptr to next block 
1552			      inc   HL                      ; Load size of next block into DE 
1552			      ld    E, (HL) 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			      push  DE                      ; Save next block size for later 
1552			 
1552			      ld    H, B                    ; Load size of freed block into HL 
1552			      ld    L, C 
1552			      inc   HL 
1552			      inc   HL 
1552			      ld    E, (HL) 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			      ex    DE, HL 
1552			 
1552			      pop   DE                      ; Restore size of next block 
1552			      add   HL, DE                  ; Add sizes of both blocks 
1552			      ex    DE, HL 
1552			 
1552			      ld    H, B                    ; Store new bigger size into freed block 
1552			      ld    L, C 
1552			      inc   HL 
1552			      inc   HL 
1552			      ld    (HL), E 
1552			      inc   HL 
1552			      ld    (HL), D 
1552			 
1552			free_check_adjacent_to_prev: 
1552			      ; Check if the freed block is adjacent to the prev free block 
1552			      ld    L, (IX+2)               ; Prev free block ptr into HL 
1552			      ld    H, (IX+3) 
1552			 
1552			      inc   HL                      ; Size of prev free block into DE 
1552			      inc   HL 
1552			      ld    E, (HL) 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			      dec   HL 
1552			      dec   HL 
1552			      dec   HL 
1552			 
1552			      add   HL, DE                  ; Add prev block addr and size 
1552			 
1552			      or    A                       ; Clear the carry flag 
1552			      sbc   HL, BC                  ; Subtract addrs to compare adjacency 
1552			      jr    NZ, free_done 
1552			 
1552			      ; Freed block is adjacent to prev, merge into one bigger block 
1552			      ld    H, B                    ; Load next ptr from freed block into DE 
1552			      ld    L, C 
1552			      ld    E, (HL) 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			      push  HL                      ; Save freed block ptr for later 
1552			 
1552			      ld    L, (IX+2)               ; Store freed block ptr into prev block 
1552			      ld    H, (IX+3) 
1552			      ld    (HL), E 
1552			      inc   HL 
1552			      ld    (HL), D 
1552			 
1552			      pop   HL                      ; Restore freed block ptr 
1552			      inc   HL                      ; Load size of freed block into DE 
1552			      ld    E, (HL) 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			      push  DE                      ; Save freed block size for later 
1552			 
1552			      ld    L, (IX+2)               ; Load size of prev block into DE 
1552			      ld    H, (IX+3) 
1552			      inc   HL 
1552			      inc   HL 
1552			      ld    E, (HL) 
1552			      inc   HL 
1552			      ld    D, (HL) 
1552			 
1552			      pop   HL                      ; Add sizes of both blocks 
1552			      add   HL, DE 
1552			      ex    DE, HL 
1552			 
1552			      ld    L, (IX+2)               ; Store new bigger size into prev block 
1552			      ld    H, (IX+3) 
1552			      inc   HL 
1552			      inc   HL 
1552			      ld    (HL), E 
1552			      inc   HL 
1552			      ld    (HL), D 
1552			 
1552			free_done: 
1552			      ld    HL, 4                   ; Clean up stack frame 
1552			      add   HL, SP 
1552			      ld    SP, HL 
1552			 
1552			free_early_exit: 
1552			      pop   IX 
1552			      pop   DE 
1552			      pop   BC 
1552			 
1552			      ret 
1552			 
1552			 
1552			;      .org 0x8000 
1552			; 
1552			;free_list         .dw   0     ; Block struct for start of free list (MUST be 4 bytes) 
1552			 ;                 .dw   0 
1552			 
1552			endif 
1552			 
1552			 
1552			if MALLOC_4 
1552			 
1552			; My memory allocation code. Very very simple.... 
1552			; allocate space under 250 chars 
1552			 
1552			heap_init: 
1552				; init start of heap as zero 
1552				;  
1552			 
1552				ld hl, heap_start 
1552				ld a, 0 
1552				ld (hl), a      ; empty block 
1552				inc hl 
1552				ld a, 0 
1552				ld (hl), a      ; length of block 
1552				; write end of list 
1552				inc hl 
1552				ld a,(hl) 
1552				inc hl 
1552				ld a,(hl) 
1552				 
1552			 
1552				; init some malloc vars 
1552			 
1552				ld hl, 0 
1552				ld (free_list), hl       ; store last malloc location 
1552			 
1552				ld hl, free_list+3      ; flag for 'free' being used and force a rescan for reuse of block  
1552				ld a, 0 
1552				ld (hl), a 
1552			 
1552			 
1552				ld hl, heap_start 
1552				;  
1552				  
1552				ret 
1552			 
1552			 
1552			;    free block marker 
1552			;    requested size  
1552			;    pointer to next block 
1552			;    .... 
1552			;    next block marker 
1552			 
1552			 
1552			; TODO add a flag that is reset on use of free. if flag is reset then start scan from start of heap otherwise use last location 
1552			; 
1552			 
1552			 
1552			malloc:  
1552				push de 
1552				push bc 
1552				push af 
1552			 
1552				; hl space required 
1552				 
1552				ld c, l    ; hold space   (TODO only a max of 255) 
1552			 
1552			;	inc c     ; TODO BUG need to fix memory leak on push str 
1552			;	inc c 
1552			;	inc c 
1552			;	inc c 
1552			;	inc c 
1552			;	inc c 
1552			;	inc c 
1552			 
1552			 
1552			 
1552				; start at heap if a free has been issued so we can reclaim it otherwise continue from last time 
1552			 
1552				ld a, (free_list+3) 
1552				cp 0 
1552				jr z, .contheap 
1552			 
1552				ld hl, (free_list)     ; get last alloc 
1552					if DEBUG_FORTH_MALLOC_INT 
1552						DMARK "mrs" 
1552						CALLMONITOR 
1552					endif 
1552				jr .startalloc 
1552			 
1552			.contheap: 
1552				ld hl, heap_start 
1552			 
1552			.startalloc: 
1552			 
1552					if DEBUG_FORTH_MALLOC_INT 
1552						DMARK "mym" 
1552						CALLMONITOR 
1552					endif 
1552			.findblock: 
1552					if DEBUG_FORTH_MALLOC_INT 
1552						DMARK "mmf" 
1552						CALLMONITOR 
1552					endif 
1552			 
1552				ld a,(hl)  
1552				; if byte is zero then clear to use 
1552			 
1552				cp 0 
1552				jr z, .foundemptyblock 
1552			 
1552				; if byte is not clear 
1552				;     then byte is offset to next block 
1552			 
1552				inc hl 
1552				ld a, (hl) ; get size 
1552			.nextblock:	inc hl 
1552					ld e, (hl) 
1552					inc hl 
1552					ld d, (hl) 
1552					ex de, hl 
1552			;	inc hl  ; move past the store space 
1552			;	inc hl  ; move past zero index  
1552			 
1552				; TODO detect no more space 
1552			 
1552				push hl 
1552				ld de, heap_end 
1552				call cmp16 
1552				pop hl 
1552				jr nc, .nospace 
1552			 
1552				jr .findblock 
1552			 
1552			.nospace: ld hl, 0 
1552				jp .exit 
1552			 
1552			 
1552			.foundemptyblock:	 
1552					if DEBUG_FORTH_MALLOC_INT 
1552						DMARK "mme" 
1552						CALLMONITOR 
1552					endif 
1552			 
1552			; TODO has block enough space if reusing??? 
1552			 
1552				;  
1552			 
1552			; see if this block has been previously used 
1552				inc hl 
1552				ld a, (hl) 
1552				dec hl 
1552				cp 0 
1552				jr z, .newblock 
1552			 
1552					if DEBUG_FORTH_MALLOC_INT 
1552						DMARK "meR" 
1552						CALLMONITOR 
1552					endif 
1552			 
1552			; no reusing previously allocated block 
1552			 
1552			; is it smaller than previously used? 
1552				 
1552				inc hl    ; move to size 
1552				ld a, c 
1552				sub (hl)        ; we want c < (hl) 
1552				dec hl    ; move back to marker 
1552			        jr z, .findblock 
1552			 
1552				; update with the new size which should be lower 
1552			 
1552			        ;inc  hl   ; negate next move. move back to size  
1552			 
1552			.newblock: 
1552				; need to be at marker here 
1552			 
1552					if DEBUG_FORTH_MALLOC_INT 
1552						DMARK "meN" 
1552						CALLMONITOR 
1552					endif 
1552			 
1552			 
1552				ld a, c 
1552			 
1552				ld (free_list+3), a	 ; flag resume from last malloc  
1552				ld (free_list), hl    ; save out last location 
1552			 
1552			 
1552				;inc a     ; space for length byte 
1552				ld (hl), a     ; save block in use marker 
1552			 
1552				inc hl   ; move to space marker 
1552				ld (hl), a    ; save new space 
1552			 
1552				inc hl   ; move to start of allocated area 
1552				 
1552			;	push hl     ; save where we are - 1  
1552			 
1552			;	inc hl  ; move past zero index  
1552				; skip space to set down new marker 
1552			 
1552				; provide some extra space for now 
1552			 
1552				inc a    ; actual is one fewer than bytes requested. correct if zero index is taken into account 
1552				inc a 
1552				inc a 
1552			 
1552				push hl   ; save where we are in the node block 
1552			 
1552				call addatohl 
1552			 
1552				; write linked list point 
1552			 
1552				pop de     ; get our node position 
1552				ex de, hl 
1552			 
1552				ld (hl), e 
1552				inc hl 
1552				ld (hl), d 
1552			 
1552				inc hl 
1552			 
1552				; now at start of allocated data so save pointer 
1552			 
1552				push hl 
1552			 
1552				; jump to position of next node and setup empty header in DE 
1552			 
1552				ex de, hl 
1552			 
1552			;	inc hl ; move past end of block 
1552			 
1552				ld a, 0 
1552				ld (hl), a   ; empty marker 
1552				inc hl 
1552				ld (hl), a   ; size 
1552				inc hl  
1552				ld (hl), a   ; ptr 
1552				inc hl 
1552				ld (hl), a   ; ptr 
1552			 
1552			 
1552				pop hl 
1552			 
1552					if DEBUG_FORTH_MALLOC_INT 
1552						DMARK "mmr" 
1552						CALLMONITOR 
1552					endif 
1552			 
1552			.exit: 
1552				pop af 
1552				pop bc 
1552				pop de  
1552				ret 
1552			 
1552			 
1552			 
1552			 
1552			free:  
1552				push hl 
1552				push af 
1552				; get address in hl 
1552			 
1552					if DEBUG_FORTH_MALLOC_INT 
1552						DMARK "fre" 
1552						CALLMONITOR 
1552					endif 
1552				; data is at hl - move to block count 
1552				dec hl 
1552				dec hl    ; get past pointer 
1552				dec hl 
1552			 
1552				ld a, (hl)    ; need this for a validation check 
1552			 
1552				dec hl    ; move to block marker 
1552			 
1552				; now check that the block count and block marker are the same  
1552			        ; this checks that we are on a malloc node and not random memory 
1552			        ; OK a faint chance this could be a problem but rare - famous last words! 
1552			 
1552				ld c, a 
1552				ld a, (hl)    
1552			 
1552				cp c 
1552				jr nz, .freeignore      ; not a valid malloc node in use so dont break anything 
1552			 
1552				; yes good chance we are on a malloc node 
1552			 
1552				ld a, 0      
1552				ld (hl), a   ; mark as free 
1552			 
1552				ld (free_list+3), a	 ; flag reuse of existing block on next malloc 
1552			 
1552			.freeignore:  
1552			 
1552				pop af 
1552				pop hl 
1552			 
1552				ret 
1552			 
1552			 
1552			 
1552			endif 
1552			 
1552			; eof 
# End of file firmware_memory.asm
1552			  
1552			; device C  
1552			; Now handled by SPI  
1552			;if SOUND_ENABLE  
1552			;	include "firmware_sound.asm"  
1552			;endif  
1552			  
1552			include "firmware_diags.asm"  
1552			; Hardware diags menu 
1552			 
1552			 
1552			config: 
1552			 
1552 3e 00			ld a, 0 
1554 21 7d 15			ld hl, .configmn 
1557 cd db 0d			call menu 
155a			 
155a fe 00			cp 0 
155c c8				ret z 
155d			 
155d			;	cp 1 
155d			;	call z, .savetostore 
155d			 
155d fe 01			cp 1 
155f			if STARTUP_V1 
155f				call z, .selautoload 
155f			endif 
155f			 
155f			if STARTUP_V2 
155f cc 8b 15			call z, .enautoload 
1562			endif 
1562 fe 02			cp 2 
1564 cc a2 15			call z, .disautoload 
1567			;	cp 3 
1567			;	call z, .selbank 
1567 fe 03			cp 3 
1569 cc 0d 18			call z, .debug_tog 
156c fe 04			cp 4 
156e cc 5b 19			call z, .bpsgo 
1571 fe 05			cp 5 
1573 cc 36 18			call z, hardware_diags 
1576			if STARTUP_V2 
1576 fe 06			cp 6 
1578 cc ce 15			call z, create_startup 
157b			endif 
157b 18 d5			jr config 
157d			 
157d			.configmn: 
157d			;	dw prom_c3 
157d 49 1b			dw prom_c2 
157f 5f 1b			dw prom_c2a 
1581			;	dw prom_c2b 
1581			;	dw prom_c4 
1581 d6 1b			dw prom_m4 
1583 f1 1b			dw prom_m4b 
1585 f9 1b			dw prom_c1 
1587			if STARTUP_V2 
1587 08 1c			dw prom_c9 
1589			endif 
1589 00 00			dw 0 
158b				 
158b			 
158b			if STARTUP_V2 
158b			.enautoload: 
158b				if STORAGE_SE 
158b 3e fe			ld a, $fe      ; bit 0 clear 
158d 32 95 f9			ld (spi_device), a 
1590			 
1590 cd 25 05			call storage_get_block_0 
1593			 
1593 3e 01			ld a, 1 
1595 32 d0 f9			ld (store_page+STORE_0_AUTOFILE), a 
1598			 
1598 21 00 00				ld hl, 0 
159b 11 af f9				ld de, store_page 
159e cd d9 04			call storage_write_block	 ; save update 
15a1				else 
15a1			 
15a1				ld hl, prom_notav 
15a1				ld de, prom_empty 
15a1				call info_panel 
15a1				endif 
15a1			 
15a1			 
15a1 c9				ret 
15a2			endif 
15a2			 
15a2			.disautoload: 
15a2				if STORAGE_SE 
15a2 3e fe			ld a, $fe      ; bit 0 clear 
15a4 32 95 f9			ld (spi_device), a 
15a7			 
15a7 cd 25 05			call storage_get_block_0 
15aa			 
15aa 3e 00			ld a, 0 
15ac 32 d0 f9			ld (store_page+STORE_0_AUTOFILE), a 
15af			 
15af 21 00 00				ld hl, 0 
15b2 11 af f9				ld de, store_page 
15b5 cd d9 04			call storage_write_block	 ; save update 
15b8				else 
15b8			 
15b8				ld hl, prom_notav 
15b8				ld de, prom_empty 
15b8				call info_panel 
15b8				endif 
15b8			 
15b8			 
15b8 c9				ret 
15b9			 
15b9			if STARTUP_V1 
15b9			 
15b9			; Select auto start 
15b9			 
15b9			.selautoload: 
15b9			 
15b9				 
15b9				if STORAGE_SE 
15b9			 
15b9					call config_dir 
15b9				        ld hl, scratch 
15b9					ld a, 0 
15b9					call menu 
15b9			 
15b9					cp 0 
15b9					ret z 
15b9			 
15b9					dec a 
15b9			 
15b9			 
15b9					; locate menu option 
15b9			 
15b9					ld hl, scratch 
15b9					call table_lookup 
15b9			 
15b9					if DEBUG_FORTH_WORDS 
15b9						DMARK "ALl" 
15b9						CALLMONITOR 
15b9					endif 
15b9					; with the pointer to the menu it, the byte following the zero term is the file id 
15b9			 
15b9					ld a, 0 
15b9					ld bc, 50   ; max of bytes to look at 
15b9					cpir  
15b9			 
15b9					if DEBUG_FORTH_WORDS 
15b9						DMARK "ALb" 
15b9						CALLMONITOR 
15b9					endif 
15b9					;inc hl 
15b9			 
15b9					ld a, (hl)   ; file id 
15b9					 
15b9				        ; save bank and file ids 
15b9			 
15b9					push af 
15b9			 
15b9			; TODO need to save to block 0 on bank 1	 
15b9			 
15b9					call storage_get_block_0 
15b9			 
15b9					if DEBUG_FORTH_WORDS 
15b9						DMARK "AL0" 
15b9						CALLMONITOR 
15b9					endif 
15b9					pop af 
15b9			 
15b9					ld (store_page+STORE_0_FILERUN),a 
15b9					 
15b9					; save bank id 
15b9			 
15b9					ld a,(spi_device) 
15b9					ld (store_page+STORE_0_BANKRUN),a 
15b9			 
15b9					; enable auto run of store file 
15b9			 
15b9					ld a, 1 
15b9					ld (store_page+STORE_0_AUTOFILE),a 
15b9			 
15b9					; save buffer 
15b9			 
15b9					ld hl, 0 
15b9					ld de, store_page 
15b9					if DEBUG_FORTH_WORDS 
15b9						DMARK "ALw" 
15b9						CALLMONITOR 
15b9					endif 
15b9				call storage_write_block	 ; save update 
15b9			  
15b9			 
15b9			 
15b9			 
15b9					ld hl, scratch 
15b9					call config_fdir 
15b9			 
15b9				else 
15b9			 
15b9				ld hl, prom_notav 
15b9				ld de, prom_empty 
15b9				call info_panel 
15b9			 
15b9				endif 
15b9				ret 
15b9			endif 
15b9			 
15b9			 
15b9			; Select storage bank 
15b9			 
15b9			.selbank: 
15b9			 
15b9			;	if STORAGE_SE 
15b9			;	else 
15b9			 
15b9 21 1d 1c			ld hl, prom_notav 
15bc 11 33 1c			ld de, prom_empty 
15bf cd 3b 0d			call info_panel 
15c2			;	endif 
15c2				 
15c2 c9				ret 
15c3			 
15c3			if STORAGE_SE 
15c3			 
15c3			.config_ldir:   
15c3				; Load storage bank labels into menu array 
15c3			 
15c3				 
15c3			 
15c3			 
15c3 c9				ret 
15c4			 
15c4			 
15c4			endif 
15c4			 
15c4			 
15c4			; Save user words to storage 
15c4			 
15c4			.savetostore: 
15c4			 
15c4			;	if STORAGE_SE 
15c4			; 
15c4			;		call config_dir 
15c4			;	        ld hl, scratch 
15c4			;		ld a, 0 
15c4			;		call menu 
15c4			;		 
15c4			;		ld hl, scratch 
15c4			;		call config_fdir 
15c4			; 
15c4			;	else 
15c4			 
15c4 21 1d 1c			ld hl, prom_notav 
15c7 11 33 1c			ld de, prom_empty 
15ca cd 3b 0d			call info_panel 
15cd			 
15cd			;	endif 
15cd			 
15cd c9				ret 
15ce			 
15ce			if STARTUP_V2 
15ce			 
15ce			create_startup: 
15ce			 
15ce 3e 00			ld a, 0 
15d0 21 32 17			ld hl, .crstart 
15d3 cd db 0d			call menu 
15d6			 
15d6 fe 00			cp 0 
15d8 c8				ret z 
15d9			 
15d9 fe 01			cp 1 
15db cc 17 16			call z, .genlsword 
15de fe 02			cp 2 
15e0 cc 21 16			call z, .genedword 
15e3			 
15e3 fe 03			cp 3 
15e5 cc 2b 16			call z, .gendemword 
15e8			 
15e8 fe 04			cp 4 
15ea cc 35 16			call z, .genutlword 
15ed fe 05			cp 5 
15ef cc 3f 16			call z, .genspiword 
15f2 fe 06			cp 6 
15f4 cc 49 16			call z, .genkeyword 
15f7 fe 07			cp 7 
15f9 cc 0d 16			call z, .gensoundword 
15fc fe 07			cp 7 
15fe cc 03 16			call z, .genhwword 
1601 18 cb			jr create_startup 
1603			 
1603			.genhwword: 
1603 21 c0 1b			ld hl, crs_hw 
1606 11 96 16			ld de, .hwworddef 
1609 cd 53 16			call .genfile 
160c c9				ret 
160d			.gensoundword: 
160d 21 b4 1b			ld hl, crs_sound 
1610 11 a4 16			ld de, .soundworddef 
1613 cd 53 16			call .genfile 
1616 c9				ret 
1617			.genlsword: 
1617 21 76 1b			ld hl, crs_s1 
161a 11 ca 16			ld de, .lsworddef 
161d cd 53 16			call .genfile 
1620 c9				ret 
1621			 
1621			.genedword: 
1621 11 ce 16			ld de, .edworddef 
1624 21 7f 1b			ld hl, crs_s2 
1627 cd 53 16			call .genfile 
162a c9				ret 
162b			 
162b			.gendemword: 
162b 11 d6 16			ld de, .demoworddef 
162e 21 88 1b			ld hl, crs_s3 
1631 cd 53 16			call .genfile 
1634 c9				ret 
1635			 
1635			.genutlword: 
1635 21 94 1b			ld hl, crs_s4 
1638 11 b8 16			ld de, .utilwordef 
163b cd 53 16			call .genfile 
163e c9				ret 
163f			.genspiword: 
163f 21 9b 1b			ld hl, crs_s5 
1642 11 f8 16			ld de, .spiworddef 
1645 cd 53 16			call .genfile 
1648 c9				ret 
1649			.genkeyword: 
1649 21 a5 1b			ld hl, crs_s6 
164c 11 06 17			ld de, .keyworddef 
164f cd 53 16			call .genfile 
1652 c9				ret 
1653			 
1653			; hl - points to file name 
1653			; de - points to strings to add to file 
1653			 
1653			.genfile: 
1653 e5				push hl 
1654 d5				push de 
1655			 
1655 cd aa 0d			call clear_display 
1658 3e 00			ld a, display_row_1 
165a 11 85 16			ld de, .genfiletxt 
165d cd bd 0d			call str_at_display 
1660 cd cd 0d			call update_display 
1663			 
1663 d1				pop de 
1664 e1				pop hl 
1665			 
1665			 
1665 d5				push de 
1666 cd 77 08			call storage_create 
1669				; id in hl 
1669 d1				pop de   ; table of strings to add 
166a			 
166a			.genloop: 
166a			 
166a e5				push hl ; save id for next time around 
166b d5				push de ; save de for next time around 
166c			 
166c eb				ex de, hl 
166d cd bb 23			call loadwordinhl 
1670 eb				ex de, hl 
1671			 
1671				; need hl to be the id 
1671				; need de to be the string ptr 
1671				 
1671 cd 64 0b			call storage_append 
1674			 
1674 d1				pop de 
1675 e1				pop hl 
1676			 
1676 13				inc de 
1677 13				inc de 
1678			 
1678 1a				ld a,(de) 
1679 fe 00			cp 0 
167b 20 ed			jr nz, .genloop 
167d 13				inc de 
167e 1a				ld a, (de) 
167f 1b				dec de 
1680 fe 00			cp 0 
1682 20 e6			jr nz, .genloop	 
1684			 
1684 c9				ret 
1685			 
1685 .. 00		.genfiletxt:  db "Creating file...",0 
1696			 
1696			.hwworddef: 
1696 76 67			dw test5 
1698 ae 67			dw test6 
169a e6 67			dw test7 
169c fa 67			dw test8 
169e 26 68			dw test9 
16a0 3c 68			dw test10 
16a2 00 00			dw 0 
16a4			 
16a4			.soundworddef: 
16a4 61 68			dw sound1 
16a6 85 68			dw sound2 
16a8 b5 68			dw sound3 
16aa da 68			dw sound4 
16ac e7 68			dw sound5 
16ae f4 68			dw sound6 
16b0 01 69			dw sound7 
16b2 0e 69			dw sound8 
16b4 26 69			dw sound9 
16b6 00 00			dw 0 
16b8			 
16b8			.utilwordef: 
16b8 9c 65			dw strncpy 
16ba 77 65			dw type 
16bc f9 66			dw tuck 
16be 43 65			dw clrstack 
16c0 fc 64			dw longread 
16c2 fd 65			dw start1 
16c4 0d 66			dw start2 
16c6			; duplicated 
16c6			;	dw start3b 
16c6			;	dw start3c 
16c6 0c 67			dw list 
16c8 00 00			dw 0 
16ca			 
16ca			.lsworddef: 
16ca 1e 66			dw start3b 
16cc 00 00			dw 0 
16ce			 
16ce			.edworddef: 
16ce 5b 61			dw edit1 
16d0 7c 61			dw edit2 
16d2 b1 61			dw edit3 
16d4 00 00			dw 0 
16d6			 
16d6			.demoworddef: 
16d6 3d 69			dw game1 
16d8 4e 69			dw game1a 
16da b0 69			dw game1b 
16dc e5 69			dw game1c 
16de 1b 6a			dw game1d 
16e0 4c 6a			dw game1s 
16e2 60 6a			dw game1t 
16e4 75 6a			dw game1f 
16e6 a9 6a			dw game1z 
16e8 ed 6a			dw game1zz 
16ea 56 6b			dw ssv2 
16ec 8c 6b			dw ssv3 
16ee a8 6b			dw ssv4 
16f0 c4 6b			dw ssv5 
16f2 dd 6b			dw ssv1 
16f4 25 6c			dw ssv1cpm	 
16f6			;	dw game2b 
16f6			;	dw game2bf 
16f6			;	dw game2mba 
16f6			;	dw game2mbas	 
16f6			;	dw game2mbht 
16f6			;	dw game2mbms 
16f6			;	dw game2mb 
16f6			;	dw game3w 
16f6			;	dw game3p 
16f6			;	dw game3sc 
16f6			;	dw game3vsi 
16f6			;	dw game3vs 
16f6 00 00			dw 0 
16f8			 
16f8			 
16f8			.spiworddef: 
16f8			 
16f8 e9 61		    dw spi1 
16fa 42 62		    dw spi2 
16fc 76 62		    dw spi2b 
16fe fa 62		    dw spi3 
1700 a4 62		    dw spi4 
1702 cd 62		    dw spi5 
1704			;    dw spi6 
1704			;    dw spi7 
1704			 
1704			;    dw spi8 
1704			;    dw spi9 
1704			;    dw spi10 
1704 00 00		    dw 0 
1706			 
1706			.keyworddef: 
1706			 
1706 7c 6c			dw keyup 
1708 8a 6c			dw keydown 
170a 9a 6c			dw keyleft 
170c aa 6c			dw keyright 
170e bb 6c			dw 	keyf1 
1710 c9 6c			dw keyf2 
1712 d7 6c			dw keyf3 
1714 e5 6c			dw keyf4 
1716 f3 6c			dw keyf5 
1718 01 6d			dw keyf6 
171a 0f 6d			dw keyf7 
171c 1d 6d			dw keyf8 
171e 2b 6d			dw keyf9 
1720 39 6d			dw keyf10 
1722 48 6d			dw keyf11 
1724 57 6d			dw keyf12 
1726 66 6d			dw keytab 
1728 75 6d			dw keycr 
172a 83 6d			dw keyhome 
172c 93 6d			dw keyend 
172e a2 6d			dw keybs 
1730 00 00			dw 0 
1732			 
1732			.crstart: 
1732 76 1b			dw crs_s1 
1734 7f 1b			dw crs_s2 
1736 88 1b			dw crs_s3 
1738 94 1b			dw crs_s4 
173a 9b 1b			dw crs_s5 
173c a5 1b			dw crs_s6 
173e b4 1b			dw crs_sound 
1740 c0 1b			dw crs_hw 
1742 00 00			dw 0 
1744			 
1744			endif 
1744			 
1744			 
1744			if STORAGE_SE 
1744			 
1744			config_fdir: 
1744				; using the scratch dir go through and release the memory allocated for each string 
1744				 
1744 21 f6 f0			ld hl, scratch 
1747 5e			.cfdir:	ld e,(hl) 
1748 23				inc hl 
1749 56				ld d,(hl) 
174a 23				inc hl 
174b			 
174b eb				ex de, hl 
174c cd 07 10			call ishlzero 
174f c8				ret z     ; return on null pointer 
1750 cd 83 14			call free 
1753 eb				ex de, hl 
1754 18 f1			jr .cfdir 
1756			 
1756			 
1756 c9				ret 
1757			 
1757			 
1757			config_dir: 
1757			 
1757				; for the config menus that need to build a directory of storage call this routine 
1757				; it will construct a menu in scratch to pass to menu 
1757			 
1757				; open storage device 
1757			 
1757				; execute DIR to build a list of files and their ids into scratch in menu format 
1757				; once the menu has finished then will need to call config_fdir to release the strings 
1757				 
1757				; c = number items 
1757			 
1757				 
1757 cd 25 05			call storage_get_block_0 
175a			 
175a 21 af f9			ld hl, store_page     ; get current id count 
175d 46				ld b, (hl) 
175e 0e 00			ld c, 0    ; count of files   
1760			 
1760			 
1760 21 f6 f0			ld hl, scratch 
1763 22 a6 f9			ld (store_tmp2), hl    ; location to poke strings 
1766			 
1766				; check for empty drive 
1766			 
1766 3e 00			ld a, 0 
1768 b8				cp b 
1769 ca 03 18			jp z, .dirdone 
176c			 
176c				 
176c					if DEBUG_FORTH_WORDS 
176c						DMARK "Cdc" 
176c f5				push af  
176d 3a 81 17			ld a, (.dmark)  
1770 32 a0 fd			ld (debug_mark),a  
1773 3a 82 17			ld a, (.dmark+1)  
1776 32 a1 fd			ld (debug_mark+1),a  
1779 3a 83 17			ld a, (.dmark+2)  
177c 32 a2 fd			ld (debug_mark+2),a  
177f 18 03			jr .pastdmark  
1781 ..			.dmark: db "Cdc"  
1784 f1			.pastdmark: pop af  
1785			endm  
# End of macro DMARK
1785						CALLMONITOR 
1785 cd aa fd			call debug_vector  
1788				endm  
# End of macro CALLMONITOR
1788					endif 
1788			 
1788			 
1788			.diritem:	 
1788 c5				push bc 
1789				; for each of the current ids do a search for them and if found push to stack 
1789			 
1789 21 40 00				ld hl, STORE_BLOCK_PHY 
178c 16 00				ld d, 0		 ; look for extent 0 of block id as this contains file name 
178e 58					ld e,b 
178f			 
178f cd a7 07				call storage_findnextid 
1792			 
1792			 
1792					; if found hl will be non zero 
1792			 
1792 cd 07 10				call ishlzero 
1795 28 69				jr z, .dirnotfound 
1797			 
1797					; increase count 
1797			 
1797 c1					pop bc	 
1798 0c					inc c 
1799 c5					push bc 
179a					 
179a			 
179a					; get file header and push the file name 
179a			 
179a 11 af f9				ld de, store_page 
179d cd 74 04				call storage_read_block 
17a0			 
17a0					; push file id to stack 
17a0				 
17a0 3a af f9				ld a, (store_page) 
17a3 26 00				ld h, 0 
17a5 6f					ld l, a 
17a6			 
17a6					;call forth_push_numhl 
17a6					; TODO store id 
17a6			 
17a6 e5					push hl 
17a7			 
17a7					; push extent count to stack  
17a7				 
17a7 21 b2 f9				ld hl, store_page+3 
17aa			 
17aa					; get file name length 
17aa			 
17aa cd 44 13				call strlenz   
17ad			 
17ad 23					inc hl   ; cover zero term 
17ae 23					inc hl  ; stick the id at the end of the area 
17af			 
17af e5					push hl 
17b0 c1					pop bc    ; move length to bc 
17b1			 
17b1 cd b9 13				call malloc 
17b4			 
17b4					; TODO save malloc area to scratch 
17b4			 
17b4 eb					ex de, hl 
17b5 2a a6 f9				ld hl, (store_tmp2) 
17b8 73					ld (hl), e 
17b9 23					inc hl 
17ba 72					ld (hl), d 
17bb 23					inc hl 
17bc 22 a6 f9				ld (store_tmp2), hl 
17bf			 
17bf					 
17bf			 
17bf					;pop hl   ; get source 
17bf			;		ex de, hl    ; swap aronund	 
17bf			 
17bf 21 b2 f9				ld hl, store_page+3 
17c2					if DEBUG_FORTH_WORDS 
17c2						DMARK "CFd" 
17c2 f5				push af  
17c3 3a d7 17			ld a, (.dmark)  
17c6 32 a0 fd			ld (debug_mark),a  
17c9 3a d8 17			ld a, (.dmark+1)  
17cc 32 a1 fd			ld (debug_mark+1),a  
17cf 3a d9 17			ld a, (.dmark+2)  
17d2 32 a2 fd			ld (debug_mark+2),a  
17d5 18 03			jr .pastdmark  
17d7 ..			.dmark: db "CFd"  
17da f1			.pastdmark: pop af  
17db			endm  
# End of macro DMARK
17db						CALLMONITOR 
17db cd aa fd			call debug_vector  
17de				endm  
# End of macro CALLMONITOR
17de					endif 
17de ed b0				ldir 
17e0			 
17e0					; de is past string, move back one and store id 
17e0					 
17e0 1b					dec de 
17e1			 
17e1					; store file id 
17e1			 
17e1 e1					pop hl 
17e2 eb					ex de,hl 
17e3 73					ld (hl), e 
17e4			 
17e4					if DEBUG_FORTH_WORDS 
17e4						DMARK "Cdi" 
17e4 f5				push af  
17e5 3a f9 17			ld a, (.dmark)  
17e8 32 a0 fd			ld (debug_mark),a  
17eb 3a fa 17			ld a, (.dmark+1)  
17ee 32 a1 fd			ld (debug_mark+1),a  
17f1 3a fb 17			ld a, (.dmark+2)  
17f4 32 a2 fd			ld (debug_mark+2),a  
17f7 18 03			jr .pastdmark  
17f9 ..			.dmark: db "Cdi"  
17fc f1			.pastdmark: pop af  
17fd			endm  
# End of macro DMARK
17fd						CALLMONITOR 
17fd cd aa fd			call debug_vector  
1800				endm  
# End of macro CALLMONITOR
1800					endif 
1800					 
1800			.dirnotfound: 
1800 c1					pop bc     
1801 10 85				djnz .diritem 
1803				 
1803			.dirdone:	 
1803			 
1803 3e 00				ld a, 0 
1805 2a a6 f9				ld hl, (store_tmp2) 
1808 77					ld (hl), a 
1809 23					inc hl 
180a 77					ld (hl), a 
180b 23					inc hl 
180c					; push a count of the dir items found 
180c			 
180c			;		ld h, 0 
180c			;		ld l, c 
180c			 
180c c9				ret 
180d			 
180d			endif 
180d			 
180d			 
180d			; Settings 
180d			; Run  
180d			 
180d			 
180d			 
180d			;hd_menu1:   db "Diags:  1: Key Matrix   5: Sound",0 
180d			;;hd_menu2:   db "        2: Editor",0   
180d			;hd_menu2:   db "        2: Editor       6: Menu",0   
180d			;hd_menu3:   db "        3: Storage",0 
180d			;hd_menu4:   db "0=quit  4: Debug",0 
180d			;hd_don:     db "ON",0 
180d			;hd_doff:     db "OFF",0 
180d			; 
180d			; 
180d			; 
180d			;hardware_diags_old:       
180d			; 
180d			;.diagmenu: 
180d			;	call clear_display 
180d			;	ld a, display_row_1 
180d			;	ld de, hd_menu1 
180d			;	call str_at_display 
180d			; 
180d			;	ld a, display_row_2 
180d			;	ld de, hd_menu2 
180d			;	call str_at_display 
180d			; 
180d			;	ld a, display_row_3 
180d			;	ld de, hd_menu3 
180d			;	call str_at_display 
180d			; 
180d			;	ld a,  display_row_4 
180d			;	ld de, hd_menu4 
180d			;	call str_at_display 
180d			; 
180d			;	; display debug state 
180d			; 
180d			;	ld de, hd_don 
180d			;	ld a, (os_view_disable) 
180d			;	cp 0 
180d			;	jr z, .distog 
180d			;	ld de, hd_doff 
180d			;.distog: ld a, display_row_4+17 
180d			;	call str_at_display 
180d			; 
180d			;	call update_display 
180d			; 
180d			;	call cin_wait 
180d			; 
180d			; 
180d			; 
180d			;	cp '4' 
180d			;	jr nz, .diagn1 
180d			; 
180d			;	; debug toggle 
180d			; 
180d			;	ld a, (os_view_disable) 
180d			;	ld b, '*' 
180d			;	cp 0 
180d			;	jr z, .debtog 
180d			;	ld b, 0 
180d			;.debtog:	 
180d			;	ld a,b 
180d			;	ld (os_view_disable),a 
180d			; 
180d			;.diagn1: cp '0' 
180d			;	 ret z 
180d			; 
180d			;;	cp '1' 
180d			;;       jp z, matrix	 
180d			;;   TODO keyboard matrix test 
180d			; 
180d			;	cp '2' 
180d			;	jp z, .diagedit 
180d			; 
180d			;;	cp '6' 
180d			;;	jp z, .menutest 
180d			;;if ENABLE_BASIC 
180d			;;	cp '6' 
180d			;;	jp z, basic 
180d			;;endif 
180d			 ; 
180d			;	jp .diagmenu 
180d			; 
180d			; 
180d			;	ret 
180d			 
180d			 
180d			.debug_tog: 
180d 21 57 18			ld hl, .menudebug 
1810				 
1810			;	ld a, (os_view_disable) 
1810			;	cp '*' 
1810 3a aa fd			ld a,(debug_vector) 
1813 fe c9			cp $C9   ; RET 
1815 20 04			jr nz,.tdon  
1817 3e 01			ld a, 1 
1819 18 02			jr .tog1 
181b 3e 00		.tdon: ld a, 0 
181d			 
181d			.tog1: 
181d cd db 0d			call menu 
1820 fe 00			cp 0 
1822 c8				ret z 
1823 fe 01			cp 1    ; disable debug 
1825 28 04			jr z, .dtog0 
1827 3e 2a			ld a, '*' 
1829 18 05			jr .dtogset 
182b			.dtog0:  
182b				;ld a, 0 
182b cd 49 19			call bp_on 
182e 18 dd			jr .debug_tog 
1830			.dtogset:  
1830				; ld (os_view_disable), a 
1830 cd 55 19			call bp_off 
1833 c3 0d 18			jp .debug_tog 
1836			 
1836			 
1836			hardware_diags:       
1836			 
1836			.diagm: 
1836 21 49 18			ld hl, .menuitems 
1839 3e 00			ld a, 0 
183b cd db 0d			call menu 
183e			 
183e fe 00		         cp 0 
1840 c8				 ret z 
1841			 
1841 fe 02			cp 2 
1843 ca a2 18			jp z, .diagedit 
1846			 
1846			;	cp '6' 
1846			;	jp z, .menutest 
1846			;if ENABLE_BASIC 
1846			;	cp '6' 
1846			;	jp z, basic 
1846			;endif 
1846			  
1846 c3 36 18			jp .diagm 
1849			 
1849				 
1849 5d 18		.menuitems:   	dw .m1 
184b 68 18				dw .m2 
184d 6f 18				dw .m3 
184f 77 18				dw .m5 
1851 7d 18				dw .m5a 
1853 86 18				dw .m5b 
1855 00 00				dw 0 
1857			 
1857			.menudebug: 
1857 8f 18				dw .m6 
1859 98 18				dw .m7 
185b 00 00				dw 0 
185d			 
185d .. 00		.m1:   db "Key Matrix",0 
1868 .. 00		.m2:   db "Editor",0 
186f .. 00		.m3:   db "Storage",0 
1877 .. 00		.m5:   db "Sound",0 
187d .. 00		.m5a:  db "RAM Test",0 
1886 .. 00		.m5b:  db "LCD Test",0 
188f			 
188f .. 00		.m6:   db "Debug ON",0 
1898 .. 00		.m7:   db "Debug OFF",0 
18a2			 
18a2			; debug editor 
18a2			 
18a2			.diagedit: 
18a2			 
18a2 21 f6 f0			ld hl, scratch 
18a5			;	ld bc, 250 
18a5			;	ldir 
18a5				; TODO ldir is not working strcpy may not get all the terms on the input line???? 
18a5 3e 00			ld a, 0 
18a7 77				ld (hl), a 
18a8 23				inc hl 
18a9 77				ld (hl), a 
18aa 23				inc hl 
18ab 77				ld (hl), a 
18ac			 
18ac cd aa 0d		        call clear_display 
18af cd cd 0d			call update_display 
18b2				;ld a, 1 
18b2				;ld (hardware_diag), a 
18b2			.diloop: 
18b2 3e 00			ld a, display_row_1 
18b4 0e 00			ld c, 0 
18b6 16 ff			ld d, 255    ; TODO fix input_str to actually take note of max string input length 
18b8 1e 28			ld e, 40 
18ba			 
18ba 21 f6 f0			ld hl, scratch	 
18bd cd 0b 10			call input_str 
18c0			 
18c0 3e 28			ld a, display_row_2 
18c2 11 f6 f0			ld de, scratch 
18c5 cd bd 0d			call str_at_display 
18c8 cd cd 0d			call update_display 
18cb			 
18cb c3 b2 18			jp .diloop 
18ce			 
18ce			 
18ce			; pass word in hl 
18ce			; a has display location 
18ce			display_word_at: 
18ce f5				push af 
18cf e5				push hl 
18d0 7c				ld a,h 
18d1 21 fb f3			ld hl, os_word_scratch 
18d4 cd e7 11			call hexout 
18d7 e1				pop hl 
18d8 7d				ld a,l 
18d9 21 fd f3			ld hl, os_word_scratch+2 
18dc cd e7 11			call hexout 
18df 21 ff f3			ld hl, os_word_scratch+4 
18e2 3e 00			ld a,0 
18e4 77				ld (hl),a 
18e5 11 fb f3			ld de,os_word_scratch 
18e8 f1				pop af 
18e9 cd bd 0d				call str_at_display 
18ec c9				ret 
18ed			 
18ed			display_ptr_state: 
18ed			 
18ed				; to restore afterwards 
18ed			 
18ed d5				push de 
18ee c5				push bc 
18ef e5				push hl 
18f0 f5				push af 
18f1			 
18f1				; for use in here 
18f1			 
18f1			;	push bc 
18f1			;	push de 
18f1			;	push hl 
18f1			;	push af 
18f1			 
18f1 cd aa 0d			call clear_display 
18f4			 
18f4 11 cc 1a			ld de, .ptrstate 
18f7 3e 00			ld a, display_row_1 
18f9 cd bd 0d			call str_at_display 
18fc			 
18fc				; display debug step 
18fc			 
18fc			 
18fc 11 a0 fd			ld de, debug_mark 
18ff 3e 26			ld a, display_row_1+display_cols-2 
1901 cd bd 0d			call str_at_display 
1904			 
1904				; display a 
1904 11 d6 1a			ld de, .ptrcliptr 
1907 3e 28			ld a, display_row_2 
1909 cd bd 0d			call str_at_display 
190c			 
190c f1				pop af 
190d 2a 75 f9			ld hl,(cli_ptr) 
1910 3e 30			ld a, display_row_2+8 
1912 cd ce 18			call display_word_at 
1915			 
1915			 
1915				; display hl 
1915			 
1915			 
1915 11 de 1a			ld de, .ptrclioptr 
1918 3e 32			ld a, display_row_2+10 
191a cd bd 0d			call str_at_display 
191d			; 
191d			;	pop hl 
191d 3e 35			ld a, display_row_2+13 
191f 2a 73 f9			ld hl,(cli_origptr) 
1922 cd ce 18			call display_word_at 
1925			; 
1925			;	 
1925			;	; display de 
1925			 
1925			;	ld de, .regstatede 
1925			;	ld a, display_row_3 
1925			;	call str_at_display 
1925			 
1925			;	pop de 
1925			;	ld h,d 
1925			;	ld l, e 
1925			;	ld a, display_row_3+3 
1925			;	call display_word_at 
1925			 
1925			 
1925				; display bc 
1925			 
1925			;	ld de, .regstatebc 
1925			;	ld a, display_row_3+10 
1925			;	call str_at_display 
1925			 
1925			;	pop bc 
1925			;	ld h,b 
1925			;	ld l, c 
1925			;	ld a, display_row_3+13 
1925			;	call display_word_at 
1925			 
1925			 
1925				; display dsp 
1925			 
1925			;	ld de, .regstatedsp 
1925			;	ld a, display_row_4 
1925			;	call str_at_display 
1925			 
1925				 
1925			;	ld hl,(cli_data_sp) 
1925			;	ld a, display_row_4+4 
1925			;	call display_word_at 
1925			 
1925				; display rsp 
1925			 
1925 11 0d 1b			ld de, .regstatersp 
1928 3e 82			ld a, display_row_4+10 
192a cd bd 0d			call str_at_display 
192d			 
192d				 
192d 2a 27 f9			ld hl,(cli_ret_sp) 
1930 3e 86			ld a, display_row_4+14 
1932 cd ce 18			call display_word_at 
1935			 
1935 cd cd 0d			call update_display 
1938			 
1938 cd ed 0c			call delay1s 
193b cd ed 0c			call delay1s 
193e cd ed 0c			call delay1s 
1941			 
1941			 
1941 cd c0 1f			call next_page_prompt 
1944			 
1944				; restore  
1944			 
1944 f1				pop af 
1945 e1				pop hl 
1946 c1				pop bc 
1947 d1				pop de 
1948 c9				ret 
1949			 
1949			; Update the break point vector so that the user can hook a new routine 
1949			 
1949			bp_on: 
1949 3e c3			ld a, $c3    ; JP 
194b 32 aa fd			ld (debug_vector), a 
194e 21 5b 19			ld hl, break_point_state 
1951 22 ab fd			ld (debug_vector+1), hl 
1954 c9				ret 
1955			 
1955			bp_off: 
1955 3e c9			ld a, $c9    ; RET 
1957 32 aa fd			ld (debug_vector), a 
195a c9				ret 
195b			 
195b			 
195b			break_point_state: 
195b			;	push af 
195b			; 
195b			;	; see if disabled 
195b			; 
195b			;	ld a, (os_view_disable) 
195b			;	cp '*' 
195b			;	jr nz, .bpsgo 
195b			;	pop af 
195b			;	ret 
195b			 
195b			.bpsgo: 
195b			;	pop af 
195b f5				push af 
195c 22 d8 f0			ld (os_view_hl), hl 
195f ed 53 d6 f0		ld (os_view_de), de 
1963 ed 43 d4 f0		ld (os_view_bc), bc 
1967 e5				push hl 
1968 6f				ld l, a 
1969 26 00			ld h, 0 
196b 22 da f0			ld (os_view_af),hl 
196e			 
196e 21 e6 fc				ld hl, display_fb0 
1971 22 01 fb				ld (display_fb_active), hl 
1974 e1				pop hl	 
1975			 
1975 3e 31			ld a, '1' 
1977 fe 2a		.bps1:  cp '*' 
1979 cc 55 19			call z, bp_off 
197c			;	jr nz, .bps1b 
197c			;	ld (os_view_disable),a 
197c fe 31		.bps1b:  cp '1' 
197e 20 14			jr nz, .bps2 
1980			 
1980				; display reg 
1980			 
1980				 
1980			 
1980 3a da f0			ld a, (os_view_af) 
1983 2a d8 f0			ld hl, (os_view_hl) 
1986 ed 5b d6 f0		ld de, (os_view_de) 
198a ed 4b d4 f0		ld bc, (os_view_bc) 
198e cd 28 1a			call display_reg_state 
1991 c3 14 1a			jp .bpschk 
1994			 
1994 fe 32		.bps2:  cp '2' 
1996 20 08			jr nz, .bps3 
1998				 
1998				; display hl 
1998 2a d8 f0			ld hl, (os_view_hl) 
199b cd 12 1b			call display_dump_at_hl 
199e			 
199e 18 74			jr .bpschk 
19a0			 
19a0 fe 33		.bps3:  cp '3' 
19a2 20 08			jr nz, .bps4 
19a4			 
19a4			        ; display de 
19a4 2a d6 f0			ld hl, (os_view_de) 
19a7 cd 12 1b			call display_dump_at_hl 
19aa			 
19aa 18 68			jr .bpschk 
19ac fe 34		.bps4:  cp '4' 
19ae 20 08			jr nz, .bps5 
19b0			 
19b0			        ; display bc 
19b0 2a d4 f0			ld hl, (os_view_bc) 
19b3 cd 12 1b			call display_dump_at_hl 
19b6			 
19b6 18 5c			jr .bpschk 
19b8 fe 35		.bps5:  cp '5' 
19ba 20 08		        jr nz, .bps7 
19bc			 
19bc				; display cur ptr 
19bc 2a 75 f9			ld hl, (cli_ptr) 
19bf cd 12 1b			call display_dump_at_hl 
19c2			 
19c2 18 50			jr .bpschk 
19c4 fe 36		.bps7:  cp '6' 
19c6 20 08			jr nz, .bps8b 
19c8				 
19c8				; display cur orig ptr 
19c8 2a 73 f9			ld hl, (cli_origptr) 
19cb cd 12 1b			call display_dump_at_hl 
19ce 18 44			jr .bpschk 
19d0 fe 37		.bps8b:  cp '7' 
19d2 20 08			jr nz, .bps9 
19d4				 
19d4				; display dsp 
19d4 2a 23 f9			ld hl, (cli_data_sp) 
19d7 cd 12 1b			call display_dump_at_hl 
19da			 
19da 18 38			jr .bpschk 
19dc fe 39		.bps9:  cp '9' 
19de 20 05			jr nz, .bps8c 
19e0				 
19e0				; display SP 
19e0			;	ld hl, sp 
19e0 cd 12 1b			call display_dump_at_hl 
19e3			 
19e3 18 2f			jr .bpschk 
19e5 fe 38		.bps8c:  cp '8' 
19e7 20 08			jr nz, .bps8d 
19e9				 
19e9				; display rsp 
19e9 2a 27 f9			ld hl, (cli_ret_sp) 
19ec cd 12 1b			call display_dump_at_hl 
19ef			 
19ef 18 23			jr .bpschk 
19f1 fe 23		.bps8d:  cp '#'     ; access monitor sub system 
19f3 20 05			jr nz, .bps8 
19f5 cd 7a 1d			call monitor 
19f8			 
19f8 18 1a			jr .bpschk 
19fa fe 30		.bps8:  cp '0' 
19fc 20 16			jr nz, .bpschk 
19fe			 
19fe 21 45 fc				ld hl, display_fb1 
1a01 22 01 fb				ld (display_fb_active), hl 
1a04 cd cd 0d				call update_display 
1a07			 
1a07				;ld a, (os_view_af) 
1a07 2a d8 f0			ld hl, (os_view_hl) 
1a0a ed 5b d6 f0		ld de, (os_view_de) 
1a0e ed 4b d4 f0		ld bc, (os_view_bc) 
1a12 f1				pop af 
1a13 c9				ret 
1a14			 
1a14			.bpschk:   
1a14 cd ed 0c			call delay1s 
1a17 3e 9f		ld a,display_row_4 + display_cols - 1 
1a19 11 be 1f		        ld de, endprg 
1a1c cd bd 0d			call str_at_display 
1a1f cd cd 0d			call update_display 
1a22 cd 26 75			call cin_wait 
1a25			 
1a25 c3 77 19			jp .bps1 
1a28			 
1a28			 
1a28			display_reg_state: 
1a28			 
1a28				; to restore afterwards 
1a28			 
1a28 d5				push de 
1a29 c5				push bc 
1a2a e5				push hl 
1a2b f5				push af 
1a2c			 
1a2c				; for use in here 
1a2c			 
1a2c c5				push bc 
1a2d d5				push de 
1a2e e5				push hl 
1a2f f5				push af 
1a30			 
1a30 cd aa 0d			call clear_display 
1a33			 
1a33 11 e8 1a			ld de, .regstate 
1a36 3e 00			ld a, display_row_1 
1a38 cd bd 0d			call str_at_display 
1a3b			 
1a3b				; display debug step 
1a3b			 
1a3b			 
1a3b 11 a0 fd			ld de, debug_mark 
1a3e 3e 25			ld a, display_row_1+display_cols-3 
1a40 cd bd 0d			call str_at_display 
1a43			 
1a43				; display a 
1a43 11 04 1b			ld de, .regstatea 
1a46 3e 28			ld a, display_row_2 
1a48 cd bd 0d			call str_at_display 
1a4b			 
1a4b e1				pop hl 
1a4c			;	ld h,0 
1a4c			;	ld l, a 
1a4c 3e 2b			ld a, display_row_2+3 
1a4e cd ce 18			call display_word_at 
1a51			 
1a51			 
1a51				; display hl 
1a51			 
1a51			 
1a51 11 f8 1a			ld de, .regstatehl 
1a54 3e 32			ld a, display_row_2+10 
1a56 cd bd 0d			call str_at_display 
1a59			 
1a59 e1				pop hl 
1a5a 3e 35			ld a, display_row_2+13 
1a5c cd ce 18			call display_word_at 
1a5f			 
1a5f				 
1a5f				; display de 
1a5f			 
1a5f 11 fc 1a			ld de, .regstatede 
1a62 3e 50			ld a, display_row_3 
1a64 cd bd 0d			call str_at_display 
1a67			 
1a67 e1				pop hl 
1a68			;	ld h,d 
1a68			;	ld l, e 
1a68 3e 53			ld a, display_row_3+3 
1a6a cd ce 18			call display_word_at 
1a6d			 
1a6d			 
1a6d				; display bc 
1a6d			 
1a6d 11 00 1b			ld de, .regstatebc 
1a70 3e 5a			ld a, display_row_3+10 
1a72 cd bd 0d			call str_at_display 
1a75			 
1a75 e1				pop hl 
1a76			;	ld h,b 
1a76			;	ld l, c 
1a76 3e 5d			ld a, display_row_3+13 
1a78 cd ce 18			call display_word_at 
1a7b			 
1a7b			 
1a7b				; display dsp 
1a7b			 
1a7b 11 08 1b			ld de, .regstatedsp 
1a7e 3e 78			ld a, display_row_4 
1a80 cd bd 0d			call str_at_display 
1a83			 
1a83				 
1a83 2a 23 f9			ld hl,(cli_data_sp) 
1a86 3e 7c			ld a, display_row_4+4 
1a88 cd ce 18			call display_word_at 
1a8b			 
1a8b				; display rsp 
1a8b			 
1a8b 11 0d 1b			ld de, .regstatersp 
1a8e 3e 82			ld a, display_row_4+10 
1a90 cd bd 0d			call str_at_display 
1a93			 
1a93				 
1a93 2a 27 f9			ld hl,(cli_ret_sp) 
1a96 3e 86			ld a, display_row_4+14 
1a98 cd ce 18			call display_word_at 
1a9b			 
1a9b cd cd 0d			call update_display 
1a9e			 
1a9e			;	call delay1s 
1a9e			;	call delay1s 
1a9e			;	call delay1s 
1a9e			 
1a9e			 
1a9e			;	call next_page_prompt 
1a9e			 
1a9e				; restore  
1a9e			 
1a9e f1				pop af 
1a9f e1				pop hl 
1aa0 c1				pop bc 
1aa1 d1				pop de 
1aa2 c9				ret 
1aa3			 
1aa3 .. 00		.wordincurptr:  db "Word in cur_ptr (5)",0 
1ab7 .. 00		.wordincuroptr:  db "Word in cur_optr (6)",0 
1acc .. 00		.ptrstate:	db "Ptr State",0 
1ad6 .. 00		.ptrcliptr:     db "cli_ptr",0 
1ade .. 00		.ptrclioptr:     db "cli_o_ptr",0 
1ae8 .. 00		.regstate:	db "Reg State (1/0)",0 
1af8 .. 00		.regstatehl:	db "HL:",0 
1afc .. 00		.regstatede:	db "DE:",0 
1b00 .. 00		.regstatebc:	db "BC:",0 
1b04 .. 00		.regstatea:	db "A :",0 
1b08 .. 00		.regstatedsp:	db "DSP:",0 
1b0d .. 00		.regstatersp:	db "RSP:",0 
1b12			 
1b12			display_dump_at_hl: 
1b12 e5				push hl 
1b13 d5				push de 
1b14 c5				push bc 
1b15 f5				push af 
1b16			 
1b16 22 19 f4			ld (os_cur_ptr),hl	 
1b19 cd aa 0d			call clear_display 
1b1c cd c8 1e			call dumpcont 
1b1f			;	call delay1s 
1b1f			;	call next_page_prompt 
1b1f			 
1b1f			 
1b1f f1				pop af 
1b20 c1				pop bc 
1b21 d1				pop de 
1b22 e1				pop hl 
1b23 c9				ret 
1b24			 
1b24			;if ENABLE_BASIC 
1b24			;	include "nascombasic.asm" 
1b24			;	basic: 
1b24			;	include "forth/FORTH.ASM" 
1b24			;endif 
1b24			 
1b24			; eof 
1b24			 
1b24			 
# End of file firmware_diags.asm
1b24			  
1b24			include "firmware_prompts.asm"  
1b24			; Prompts  
1b24			 
1b24			; boot messages 
1b24			 
1b24 .. 00		prom_bootmsg:	db "z80-homebrew OS v1.7",0 
1b39 .. 00		prom_bootmsg1:	db "by Kevin Groves",0 
1b49			 
1b49			 
1b49			; config menus 
1b49			 
1b49			;prom_c3: db "Add Dictionary To File",0 
1b49			 
1b49			if STARTUP_V1 
1b49			prom_c2: db "Select Autoload File",0 
1b49			prom_c2a: db "Disable Autoload File", 0 
1b49			endif 
1b49			 
1b49			if STARTUP_V2 
1b49 .. 00		prom_c2: db "Enable Autoload Files",0 
1b5f .. 00		prom_c2a: db "Disable Autoload Files", 0 
1b76			 
1b76 .. 00		crs_s1: db "*ls-word", 0 
1b7f .. 00		crs_s2: db "*ed-word", 0 
1b88 .. 00		crs_s3: db "*Demo-Games", 0 
1b94 .. 00		crs_s4: db "*Utils", 0 
1b9b .. 00		crs_s5: db "*SPI-Util", 0 
1ba5 .. 00		crs_s6: db "*Key-Constants", 0 
1bb4 .. 00		crs_sound: db "*Sound-Util", 0 
1bc0 .. 00		crs_hw: db "*Hello-World",0 
1bcd			 
1bcd			 
1bcd			 
1bcd			endif 
1bcd			;prom_c2b: db "Select Storage Bank",0 
1bcd .. 00		prom_c4: db "Settings",0 
1bd6 .. 00		prom_m4:   db "Debug & Breakpoints On/Off",0 
1bf1 .. 00		prom_m4b:   db "Monitor",0 
1bf9 .. 00		prom_c1: db "Hardware Diags",0 
1c08			 
1c08			 
1c08			if STARTUP_V2 
1c08 .. 00		prom_c9: db "Create Startup Files",0 
1c1d			endif 
1c1d			 
1c1d .. 00		prom_notav:    db "Feature not available",0 
1c33 .. 00		prom_empty:    db "",0 
1c34			 
1c34			; eof 
1c34			 
# End of file firmware_prompts.asm
1c34			  
1c34			  
1c34			; eof  
1c34			  
# End of file firmware.asm
1c34			 
1c34			;; below moved from firmware.asm for strange zero calc of baseusermem label. Scope issue on multipass???? 
1c34			;if BASE_KEV  
1c34			;baseram: equ 08000h 
1c34			;endif 
1c34			 
1c34			;if BASE_SC114 
1c34			;baseram:     equ    endofcode 
1c34			;endif 
1c34			 
1c34			 
1c34			; Add NMI support. A rst 066h when r15z goes neg on clock side of resist. needs to do retn when exiting 
1c34			 
1c34			; start system 
1c34			 
1c34			coldstart: 
1c34				; set sp 
1c34				; di/ei 
1c34			 
1c34 f3				di 
1c35 31 fd ff			ld sp, tos 
1c38 cd ad 71			call init_nmi 
1c3b			;	ei 
1c3b			 
1c3b				; init spinner 
1c3b 3e 00			ld a,0 
1c3d 32 fb fa			ld (display_active), a 
1c40			 
1c40				; disable breakpoint by default 
1c40			 
1c40				;ld a,'*' 
1c40			;	ld a,' ' 
1c40			;	ld (os_view_disable),a 
1c40			 
1c40				; set break point vector as new break point on or off 
1c40 cd 55 19			call bp_off 
1c43			 
1c43				; init hardware 
1c43			 
1c43				; init keyboard and screen hardware 
1c43			 
1c43 cd 6c 00			call hardware_init 
1c46			 
1c46			 
1c46 cd ed 0c			call delay1s 
1c49 3e 58			ld a, display_row_3+8 
1c4b 11 03 00			ld de, buildtime 
1c4e cd bd 0d			call str_at_display 
1c51 cd cd 0d			call update_display 
1c54			 
1c54 cd ed 0c			call delay1s 
1c57 cd ed 0c			call delay1s 
1c5a cd ed 0c			call delay1s 
1c5d			 
1c5d				; detect if any keys are held down to enable breakpoints at start up 
1c5d			 
1c5d cd 37 75			call cin  
1c60 fe 00			cp 0 
1c62 28 03			jr z, .nokeys 
1c64			 
1c64				;call hardware_diags 
1c64 cd 52 15			call config 
1c67			 
1c67			;	ld de, .bpen 
1c67			;	ld a, display_row_4 
1c67			;	call str_at_display 
1c67			;	call update_display 
1c67			; 
1c67			;	ld a,0 
1c67			;	ld (os_view_disable),a 
1c67			; 
1c67			;.bpwait: 
1c67			;	call cin 
1c67			;	cp 0 
1c67			;	jr z, .bpwait 
1c67			;	jr .nokeys 
1c67			; 
1c67			; 
1c67			;.bpen:  db "Break points enabled!",0 
1c67			 
1c67			 
1c67			 
1c67			 
1c67			 
1c67			 
1c67			.nokeys: 
1c67			 
1c67			 
1c67				 
1c67			 
1c67			;jp  testkey 
1c67			 
1c67			;call storage_get_block_0 
1c67			; 
1c67			;ld hl, 0 
1c67			;ld de, store_page 
1c67			;call storage_read_block 
1c67			 
1c67				 
1c67			;ld hl, 10 
1c67			;ld de, store_page 
1c67			;call storage_read_block 
1c67			 
1c67			 
1c67			 
1c67			 
1c67			 
1c67			;stop:	nop 
1c67			;	jp stop 
1c67			 
1c67			 
1c67			 
1c67			main: 
1c67 cd aa 0d			call clear_display 
1c6a cd cd 0d			call update_display 
1c6d			 
1c6d			 
1c6d			 
1c6d			;	call testlcd 
1c6d			 
1c6d			 
1c6d			 
1c6d cd 09 24			call forth_init 
1c70			 
1c70			 
1c70			warmstart: 
1c70 cd df 23			call forth_warmstart 
1c73			 
1c73				; run startup word load 
1c73			        ; TODO prevent this running at warmstart after crash  
1c73			 
1c73				if STARTUP_ENABLE 
1c73			 
1c73					if STARTUP_V1 
1c73			 
1c73						if STORAGE_SE 
1c73							call forth_autoload 
1c73						endif 
1c73						call forth_startup 
1c73					endif 
1c73			 
1c73					if STARTUP_V2 
1c73			 
1c73						if STORAGE_SE 
1c73 cd db 6f						call forth_autoload 
1c76						else 
1c76							call forth_startup 
1c76						endif 
1c76			 
1c76			 
1c76					endif 
1c76			 
1c76				endif 
1c76			 
1c76			warmstart_afterauto: 
1c76			 
1c76				; show free memory after boot 
1c76 11 15 1d			ld de, freeram 
1c79 3e 00			ld a, display_row_1 
1c7b cd bd 0d			call str_at_display 
1c7e			 
1c7e				; get current heap start after loading any uwords 
1c7e			 
1c7e				;ld de, (os_last_new_uword) 
1c7e				;ex de, hl 
1c7e			 
1c7e			; Or use heap_size word???? 
1c7e				;ld hl, heap_end 
1c7e				;ld hl, heap_size 
1c7e				;ld de, topusermem 
1c7e				;ld de, heap_start 
1c7e ed 5b 0a 80			ld de, (free_list )      
1c82 21 d1 f0				ld hl, heap_end 
1c85 ed 52			sbc hl, de 
1c87				;push hl 
1c87				;ld a,h	         	 
1c87				;ld hl, os_word_scratch		; TODO do direct write to frame buffer instead and drop the str_at_display 
1c87				;call hexout 
1c87			   	;pop hl 
1c87			; 
1c87			;	ld a,l 
1c87			;	ld hl, os_word_scratch+2 
1c87			;	call hexout 
1c87			;	ld hl, os_word_scratch+4 
1c87			;	ld a, 0 
1c87			;	ld (hl),a 
1c87 eb				ex de, hl 
1c88 21 fb f3			ld hl, os_word_scratch 
1c8b cd f3 12			call uitoa_16 
1c8e			 
1c8e			 
1c8e 11 fb f3			ld de, os_word_scratch 
1c91 3e 0d			ld a, display_row_1 + 13 
1c93 cd bd 0d			call str_at_display 
1c96 cd cd 0d			call update_display 
1c99			 
1c99			 
1c99				;call demo 
1c99			 
1c99			 
1c99				; init scratch input area for cli commands 
1c99			 
1c99 21 1d f4			ld hl, os_cli_cmd 
1c9c 3e 00			ld a,0 
1c9e 77				ld (hl),a 
1c9f 23				inc hl 
1ca0 77				ld (hl),a 
1ca1			 
1ca1 3e 00			ld a,0 
1ca3 32 1c f5			ld (os_last_cmd),a	; current command in use to enable repeated use with an enter etc 
1ca6			 
1ca6 32 19 f4			ld (os_cur_ptr),a	; ptr to whatever is needed for this command 
1ca9 32 1a f4			ld (os_cur_ptr+1),a	 
1cac			 
1cac 32 fb f3			ld (os_word_scratch),a	; byte or word being used in parsing for this command 
1caf 32 fc f3			ld (os_word_scratch+1),a	 
1cb2				 
1cb2			 
1cb2				;ld a, kLCD_Line2        ; TODO prompt using direct screen line address. Correct this to frame buffer 
1cb2 21 1d f4			ld hl, os_cli_cmd 
1cb5			 
1cb5 3e 00			ld a, 0		 ; init cli input 
1cb7 77				ld (hl), a 
1cb8 3e 28			ld a, display_row_2        ; TODO prompt using direct screen line address. Correct this to frame buffer 
1cba			cli: 
1cba				; show cli prompt 
1cba				;push af 
1cba				;ld a, 0 
1cba				;ld de, prompt 
1cba				;call str_at_display 
1cba			 
1cba				;call update_display 
1cba				;pop af 
1cba				;inc a 
1cba				;ld a, kLCD_Line4+1	 ; TODO using direct screen line writes. Correct this to frame buffer 
1cba			 
1cba			.lastrecall: 
1cba			 
1cba 0e 00			ld c, 0 
1cbc 16 ff			ld d, 255    ; TODO fix input_str to actually take note of max string input length 
1cbe 1e 28			ld e, 40 
1cc0			 
1cc0 21 1d f4			ld hl, os_cli_cmd 
1cc3			 
1cc3				STACKFRAME OFF $fefe $9f9f 
1cc3				if DEBUG_STACK_IMB 
1cc3					if OFF 
1cc3						exx 
1cc3						ld de, $fefe 
1cc3						ld a, d 
1cc3						ld hl, curframe 
1cc3						call hexout 
1cc3						ld a, e 
1cc3						ld hl, curframe+2 
1cc3						call hexout 
1cc3						ld hl, $fefe 
1cc3						push hl 
1cc3						ld hl, $9f9f 
1cc3						push hl 
1cc3						exx 
1cc3					endif 
1cc3				endif 
1cc3			endm 
# End of macro STACKFRAME
1cc3			 
1cc3 cd 0b 10			call input_str 
1cc6			 
1cc6				STACKFRAMECHK OFF $fefe $9f9f 
1cc6				if DEBUG_STACK_IMB 
1cc6					if OFF 
1cc6						exx 
1cc6						ld hl, $9f9f 
1cc6						pop de   ; $9f9f 
1cc6						call cmp16 
1cc6						jr nz, .spnosame 
1cc6						ld hl, $fefe 
1cc6						pop de   ; $fefe 
1cc6						call cmp16 
1cc6						jr z, .spfrsame 
1cc6						.spnosame: call showsperror 
1cc6						.spfrsame: nop 
1cc6						exx 
1cc6					endif 
1cc6				endif 
1cc6			endm 
# End of macro STACKFRAMECHK
1cc6			 
1cc6			 
1cc6				; check to see if last line recall has been requested 
1cc6			 
1cc6			if EDIT_V2 
1cc6 fe 05			cp KEY_UP 
1cc8 20 0f			jr nz, .noexecline 
1cca			 
1cca 11 1d f4			ld de, os_cli_cmd 
1ccd 21 1c f5			ld hl, os_last_cmd 
1cd0 01 ff 00			ld bc, 255 
1cd3 ed b0			ldir 
1cd5 3e 00			ld a, 0 
1cd7 18 e1			jr .lastrecall 
1cd9			endif 
1cd9			 
1cd9			.noexecline: 
1cd9				; no so exec the line		 
1cd9			 
1cd9				; copy input to last command 
1cd9			 
1cd9 21 1d f4			ld hl, os_cli_cmd 
1cdc 11 1c f5			ld de, os_last_cmd 
1cdf 01 ff 00			ld bc, 255 
1ce2 ed b0			ldir 
1ce4			 
1ce4				; wipe current buffer 
1ce4			 
1ce4			;	ld a, 0 
1ce4			;	ld hl, os_cli_cmd 
1ce4			;	ld de, os_cli_cmd+1 
1ce4			;	ld bc, 254 
1ce4			;	ldir 
1ce4				; TODO ldir is not working strcpy may not get all the terms on the input line???? 
1ce4			;	call strcpy 
1ce4			;	ld a, 0 
1ce4			;	ld (hl), a 
1ce4			;	inc hl 
1ce4			;	ld (hl), a 
1ce4			;	inc hl 
1ce4			;	ld (hl), a 
1ce4			 
1ce4				; switch frame buffer to program  
1ce4			 
1ce4 21 45 fc				ld hl, display_fb1 
1ce7 22 01 fb				ld (display_fb_active), hl 
1cea			 
1cea			;	nop 
1cea				STACKFRAME ON $fbfe $8f9f 
1cea				if DEBUG_STACK_IMB 
1cea					if ON 
1cea						exx 
1cea						ld de, $fbfe 
1cea						ld a, d 
1cea						ld hl, curframe 
1cea						call hexout 
1cea						ld a, e 
1cea						ld hl, curframe+2 
1cea						call hexout 
1cea						ld hl, $fbfe 
1cea						push hl 
1cea						ld hl, $8f9f 
1cea						push hl 
1cea						exx 
1cea					endif 
1cea				endif 
1cea			endm 
# End of macro STACKFRAME
1cea				; first time into the parser so pass over the current scratch pad 
1cea 21 1d f4			ld hl,os_cli_cmd 
1ced				; tokenise the entered statement(s) in HL 
1ced cd 83 24			call forthparse 
1cf0			        ; exec forth statements in top of return stack 
1cf0 cd bf 24			call forthexec 
1cf3				;call forthexec_cleanup 
1cf3			;	call parsenext 
1cf3			 
1cf3				STACKFRAMECHK ON $fbfe $8f9f 
1cf3				if DEBUG_STACK_IMB 
1cf3					if ON 
1cf3						exx 
1cf3						ld hl, $8f9f 
1cf3						pop de   ; $8f9f 
1cf3						call cmp16 
1cf3						jr nz, .spnosame 
1cf3						ld hl, $fbfe 
1cf3						pop de   ; $fbfe 
1cf3						call cmp16 
1cf3						jr z, .spfrsame 
1cf3						.spnosame: call showsperror 
1cf3						.spfrsame: nop 
1cf3						exx 
1cf3					endif 
1cf3				endif 
1cf3			endm 
# End of macro STACKFRAMECHK
1cf3				; TODO on return from forth parsing should there be a prompt to return to system? but already in system. 
1cf3			 
1cf3 3e 78			ld a, display_row_4 
1cf5 11 26 1d			ld de, endprog 
1cf8			 
1cf8 cd cd 0d			call update_display		 
1cfb			 
1cfb cd c0 1f			call next_page_prompt 
1cfe			 
1cfe				; switch frame buffer to cli 
1cfe			 
1cfe 21 e6 fc				ld hl, display_fb0 
1d01 22 01 fb				ld (display_fb_active), hl 
1d04			 
1d04			 
1d04 cd aa 0d		        call clear_display 
1d07 cd cd 0d			call update_display		 
1d0a			 
1d0a 21 1d f4			ld hl, os_cli_cmd 
1d0d			 
1d0d 3e 00			ld a, 0		 ; init cli input 
1d0f 77				ld (hl), a 
1d10			 
1d10				; TODO f_cursor_ptr should inc row (scroll if required) and set start of row for next input  
1d10			 
1d10				; now on last line 
1d10			 
1d10				; TODO scroll screen up 
1d10			 
1d10				; TODO instead just clear screen and place at top of screen 
1d10			 
1d10			;	ld a, 0 
1d10			;	ld (f_cursor_ptr),a 
1d10			 
1d10				;call clear_display 
1d10				;call update_display 
1d10			 
1d10				;ld a, kLCD_Line1        ; TODO prompt using direct screen line address. Correct this to frame buffer 
1d10 3e 00			ld a, display_row_1        ; TODO prompt using direct screen line address. Correct this to frame buffer 
1d12 c3 ba 1c			jp cli 
1d15			 
1d15 .. 00		freeram: db "Free bytes: ",0 
1d22 ..			asc: db "1A2F" 
1d26 .. 00		endprog: db "End prog...",0 
1d32			 
1d32			testenter2:   
1d32 21 28 f1			ld hl,scratch+50 
1d35 22 19 f4			ld (os_cur_ptr),hl 
1d38 c3 ba 1c			jp cli 
1d3b			 
1d3b			testenter:  
1d3b			 
1d3b 21 22 1d			ld hl,asc 
1d3e			;	ld a,(hl) 
1d3e			;	call nibble2val 
1d3e cd 3d 12			call get_byte 
1d41			 
1d41			 
1d41			;	ld a,(hl) 
1d41			;	call atohex 
1d41			 
1d41			;	call fourehexhl 
1d41 32 28 f1			ld (scratch+50),a 
1d44			 
1d44			 
1d44			 
1d44 21 24 1d			ld hl,asc+2 
1d47			;	ld a, (hl) 
1d47			;	call nibble2val 
1d47 cd 3d 12			call get_byte 
1d4a			 
1d4a			;	call fourehexhl 
1d4a 32 2a f1			ld (scratch+52),a 
1d4d				 
1d4d 21 28 f1			ld hl,scratch+50 
1d50 22 19 f4			ld (os_cur_ptr),hl 
1d53 c3 ba 1c			jp cli 
1d56			 
1d56			enter:	 
1d56 3a fa f0			ld a,(scratch+4) 
1d59 fe 00			cp 0 
1d5b 28 0c			jr z, .entercont 
1d5d				; no, not a null term line so has an address to work out.... 
1d5d			 
1d5d 21 f8 f0			ld hl,scratch+2 
1d60 cd 9d 12			call get_word_hl 
1d63			 
1d63 22 19 f4			ld (os_cur_ptr),hl	 
1d66 c3 ba 1c			jp cli 
1d69			 
1d69			 
1d69			.entercont:  
1d69			 
1d69 21 f8 f0			ld hl, scratch+2 
1d6c cd 3d 12			call get_byte 
1d6f			 
1d6f 2a 19 f4		   	ld hl,(os_cur_ptr) 
1d72 77					ld (hl),a 
1d73 23					inc hl 
1d74 22 19 f4				ld (os_cur_ptr),hl 
1d77				 
1d77			; get byte  
1d77			 
1d77			 
1d77 c3 ba 1c			jp cli 
1d7a			 
1d7a			 
1d7a			; basic monitor support 
1d7a			 
1d7a			monitor: 
1d7a				;  
1d7a cd aa 0d			call clear_display 
1d7d 3e 00			ld a, 0 
1d7f 11 d3 1d			ld de, .monprompt 
1d82 cd bd 0d			call str_at_display 
1d85 cd cd 0d			call update_display 
1d88			 
1d88				; get a monitor command 
1d88			 
1d88 0e 00			ld c, 0     ; entry at top left 
1d8a 16 64			ld d, 100   ; max buffer size 
1d8c 1e 0f			ld e, 15    ; input scroll area 
1d8e 3e 00			ld a, 0     ; init string 
1d90 21 f4 f2			ld hl, os_input 
1d93 77				ld (hl), a 
1d94 23				inc hl 
1d95 77				ld (hl), a 
1d96 21 f4 f2			ld hl, os_input 
1d99 3e 01			ld a, 1     ; init string 
1d9b cd 0b 10			call input_str 
1d9e			 
1d9e cd aa 0d		        call clear_display 
1da1 cd cd 0d			call update_display		 
1da4			 
1da4 3a f4 f2			ld a, (os_input) 
1da7 cd 3b 13			call toUpper 
1daa fe 48		        cp 'H' 
1dac ca 47 1e		        jp z, .monhelp 
1daf fe 44			cp 'D'		; dump 
1db1 ca 7a 1e			jp z, .mondump	 
1db4 fe 43			cp 'C'		; dump 
1db6 ca 94 1e			jp z, .moncdump	 
1db9 fe 4d			cp 'M'		; dump 
1dbb ca d5 1d			jp z, .moneditstart 
1dbe fe 55			cp 'U'		; dump 
1dc0 ca e1 1d			jp z, .monedit	 
1dc3 fe 47			cp 'G'		; dump 
1dc5 ca 70 1e			jp z, .monjump 
1dc8 fe 42			cp 'B'		; forth breakpoint 
1dca cc 5b 19			call z, break_point_state 
1dcd fe 51			cp 'Q'		; dump 
1dcf c8				ret z	 
1dd0			 
1dd0			 
1dd0				; TODO "S" to access symbol by name and not need the address 
1dd0				; TODO "F" to find a string in memory 
1dd0			 
1dd0 c3 7a 1d			jp monitor 
1dd3			 
1dd3 .. 00		.monprompt: db ">", 0 
1dd5			 
1dd5			.moneditstart: 
1dd5				; get starting address 
1dd5			 
1dd5 21 f6 f2			ld hl,os_input+2 
1dd8 cd 9d 12			call get_word_hl 
1ddb			 
1ddb 22 19 f4			ld (os_cur_ptr),hl	 
1dde			 
1dde c3 7a 1d			jp monitor 
1de1			 
1de1			.monedit: 
1de1				; get byte to load 
1de1			 
1de1 21 f6 f2			ld hl,os_input+2 
1de4 cd 3d 12			call get_byte 
1de7			 
1de7				; get address to update 
1de7 2a 19 f4			ld hl, (os_cur_ptr) 
1dea			 
1dea				; update byte 
1dea			 
1dea 77				ld (hl), a 
1deb			 
1deb				; move to next address and save it 
1deb			 
1deb 23				inc hl 
1dec 22 19 f4			ld (os_cur_ptr),hl	 
1def			 
1def c3 7a 1d			jp monitor 
1df2			 
1df2			 
1df2 .. 00		.monhelptext1: 	db "D-Dump, C-Cont Dump",0 
1e06 .. 00		.monhelptext2:  db "M-Edit Start, U-Update Byte",0 
1e22 .. 00		.monhelptext3:  db "G-Call address, B-Breakpoints",0 
1e40 .. 00		.monhelptext4:  db "Q-Quit",0 
1e47			        
1e47			.monhelp: 
1e47 3e 00			ld a, display_row_1 
1e49 11 f2 1d		        ld de, .monhelptext1 
1e4c			 
1e4c cd bd 0d			call str_at_display 
1e4f 3e 28			ld a, display_row_2 
1e51 11 06 1e		        ld de, .monhelptext2 
1e54					 
1e54 cd bd 0d			call str_at_display 
1e57 3e 50			ld a, display_row_3 
1e59 11 22 1e		        ld de, .monhelptext3 
1e5c					 
1e5c cd bd 0d			call str_at_display 
1e5f 3e 78			ld a, display_row_4 
1e61 11 40 1e		        ld de, .monhelptext4 
1e64 cd bd 0d			call str_at_display 
1e67			 
1e67 cd cd 0d			call update_display		 
1e6a			 
1e6a cd c0 1f			call next_page_prompt 
1e6d c3 7a 1d			jp monitor 
1e70			 
1e70			.monjump:    
1e70 21 f6 f2			ld hl,os_input+2 
1e73 cd 9d 12			call get_word_hl 
1e76			 
1e76 e9				jp (hl) 
1e77 c3 7a 1d			jp monitor 
1e7a			 
1e7a			.mondump:    
1e7a 21 f6 f2			ld hl,os_input+2 
1e7d cd 9d 12			call get_word_hl 
1e80			 
1e80 22 19 f4			ld (os_cur_ptr),hl	 
1e83 cd c8 1e			call dumpcont 
1e86 3e 78			ld a, display_row_4 
1e88 11 26 1d			ld de, endprog 
1e8b			 
1e8b cd cd 0d			call update_display		 
1e8e			 
1e8e cd c0 1f			call next_page_prompt 
1e91 c3 7a 1d			jp monitor 
1e94			.moncdump: 
1e94 cd c8 1e			call dumpcont 
1e97 3e 78			ld a, display_row_4 
1e99 11 26 1d			ld de, endprog 
1e9c			 
1e9c cd cd 0d			call update_display		 
1e9f			 
1e9f cd c0 1f			call next_page_prompt 
1ea2 c3 7a 1d			jp monitor 
1ea5			 
1ea5			 
1ea5			; TODO symbol access  
1ea5			 
1ea5			.symbols:     ;; A list of symbols that can be called up  
1ea5 e6 fc			dw display_fb0 
1ea7 .. 00			db "fb0",0  
1eab af f9		     	dw store_page 
1ead .. 00			db "store_page",0 
1eb8			 
1eb8			 
1eb8			dump:	; see if we are cotinuing on from the last command by not uncluding any address 
1eb8			 
1eb8 3a f7 f0			ld a,(scratch+1) 
1ebb fe 00			cp 0 
1ebd 28 09			jr z, dumpcont 
1ebf			 
1ebf				; no, not a null term line so has an address to work out.... 
1ebf			 
1ebf 21 f8 f0			ld hl,scratch+2 
1ec2 cd 9d 12			call get_word_hl 
1ec5			 
1ec5 22 19 f4			ld (os_cur_ptr),hl	 
1ec8			 
1ec8			 
1ec8			 
1ec8			dumpcont: 
1ec8			 
1ec8				; dump bytes at ptr 
1ec8			 
1ec8			 
1ec8 3e 00			ld a, display_row_1 
1eca 2a 01 fb			ld hl, (display_fb_active) 
1ecd cd de 0f			call addatohl 
1ed0 cd f8 1e			call .dumpbyterow 
1ed3			 
1ed3 3e 28			ld a, display_row_2 
1ed5 2a 01 fb			ld hl, (display_fb_active) 
1ed8 cd de 0f			call addatohl 
1edb cd f8 1e			call .dumpbyterow 
1ede			 
1ede			 
1ede 3e 50			ld a, display_row_3 
1ee0 2a 01 fb			ld hl, (display_fb_active) 
1ee3 cd de 0f			call addatohl 
1ee6 cd f8 1e			call .dumpbyterow 
1ee9			 
1ee9 3e 78			ld a, display_row_4 
1eeb 2a 01 fb			ld hl, (display_fb_active) 
1eee cd de 0f			call addatohl 
1ef1 cd f8 1e			call .dumpbyterow 
1ef4			 
1ef4 cd cd 0d			call update_display 
1ef7			;		jp cli 
1ef7 c9				ret 
1ef8			 
1ef8			.dumpbyterow: 
1ef8			 
1ef8				;push af 
1ef8			 
1ef8 e5				push hl 
1ef9			 
1ef9				; calc where to poke the ascii 
1ef9			if display_cols == 20 
1ef9				ld a, 16 
1ef9			else 
1ef9 3e 1f			ld a, 31 
1efb			endif 
1efb			 
1efb cd de 0f			call addatohl 
1efe 22 fb f3			ld (os_word_scratch),hl  		; save pos for later 
1f01			 
1f01			 
1f01			; display decoding address 
1f01 2a 19 f4		   	ld hl,(os_cur_ptr) 
1f04			 
1f04 7c				ld a,h 
1f05 e1				pop hl 
1f06 e5				push hl 
1f07			;	ld hl, os_word_scratch		; TODO do direct write to frame buffer instead and drop the str_at_display 
1f07 cd e7 11			call hexout 
1f0a 2a 19 f4		   	ld hl,(os_cur_ptr) 
1f0d			 
1f0d 7d				ld a,l 
1f0e e1				pop hl 
1f0f 23				inc hl 
1f10 23				inc hl 
1f11 e5				push hl 
1f12			;	ld hl, os_word_scratch+2 
1f12 cd e7 11			call hexout 
1f15 e1				pop hl 
1f16 23				inc hl 
1f17 23				inc hl 
1f18				;ld hl, os_word_scratch+4 
1f18 3e 3a			ld a, ':' 
1f1a 77				ld (hl),a 
1f1b 23				inc hl 
1f1c				;ld a, 0 
1f1c				;ld (hl),a 
1f1c				;ld de, os_word_scratch 
1f1c				;pop af 
1f1c				;push af 
1f1c			;		ld a, display_row_2 
1f1c			;		call str_at_display 
1f1c			;		call update_display 
1f1c			 
1f1c			 
1f1c			;pop af 
1f1c			;	add 5 
1f1c			 
1f1c			if display_cols == 20 
1f1c				ld b, 4 
1f1c			else 
1f1c 06 08			ld b, 8 
1f1e			endif	 
1f1e			 
1f1e			.dumpbyte: 
1f1e c5				push bc 
1f1f e5				push hl 
1f20			 
1f20			 
1f20 2a 19 f4		   	ld hl,(os_cur_ptr) 
1f23 7e					ld a,(hl) 
1f24			 
1f24					; poke the ascii to display 
1f24 2a fb f3				ld hl,(os_word_scratch) 
1f27 77					ld (hl),a 
1f28 23					inc hl 
1f29 22 fb f3				ld (os_word_scratch),hl 
1f2c			 
1f2c					 
1f2c			 
1f2c			 
1f2c e1					pop hl 
1f2d e5					push hl 
1f2e			 
1f2e cd e7 11				call hexout 
1f31			 
1f31					 
1f31 2a 19 f4		   	ld hl,(os_cur_ptr) 
1f34 23				inc hl 
1f35 22 19 f4		   	ld (os_cur_ptr),hl 
1f38			 
1f38 e1					pop hl 
1f39 23					inc hl 
1f3a 23					inc hl 
1f3b 23					inc hl 
1f3c			 
1f3c			 
1f3c			 
1f3c					;ld a,0 
1f3c					;ld (os_word_scratch+2),a 
1f3c					;pop af 
1f3c					;push af 
1f3c			 
1f3c					;ld de, os_word_scratch 
1f3c					;call str_at_display 
1f3c			;		call update_display 
1f3c			;		pop af 
1f3c c1					pop bc 
1f3d c6 03				add 3 
1f3f 10 dd			djnz .dumpbyte 
1f41			 
1f41				 
1f41			 
1f41 c9				ret 
1f42			 
1f42			jump:	 
1f42			 
1f42 21 f8 f0			ld hl,scratch+2 
1f45 cd 9d 12			call get_word_hl 
1f48				;ld hl,(scratch+2) 
1f48				;call fourehexhl 
1f48			 
1f48 22 19 f4			ld (os_cur_ptr),hl	 
1f4b			 
1f4b e9				jp (hl) 
1f4c			 
1f4c			 
1f4c			 
1f4c			; TODO implement a basic monitor mode to start with 
1f4c			 
1f4c			 
1f4c			 
1f4c			 
1f4c			 
1f4c			 
1f4c			 
1f4c			 
1f4c			 
1f4c			; testing and demo code during development 
1f4c			 
1f4c			 
1f4c .. 00		str1: db "Enter some text...",0 
1f5f .. 00		clear: db "                    ",0 
1f74			 
1f74			demo: 
1f74			 
1f74			 
1f74			 
1f74			;	call update_display 
1f74			 
1f74				; init scratch input area for testing 
1f74 21 f6 f0			ld hl, scratch	 
1f77 3e 00			ld a,0 
1f79 77				ld (hl),a 
1f7a			 
1f7a			 
1f7a 3e 28		            LD   A, display_row_2 
1f7c			;            CALL fLCD_Pos       ;Position cursor to location in A 
1f7c 11 4c 1f		            LD   DE, str1 
1f7f cd bd 0d			call str_at_display 
1f82			 
1f82			;            CALL fLCD_Str       ;Display string pointed to by DE 
1f82			cloop:	 
1f82 3e 50		            LD   A, display_row_3 
1f84			;            CALL fLCD_Pos       ;Position cursor to location in A 
1f84 11 5f 1f		            LD   DE, clear 
1f87			 ;           CALL fLCD_Str       ;Display string pointed to by DE 
1f87 cd bd 0d				call str_at_display 
1f8a 3e 78			ld a, display_row_4 
1f8c 11 bc 1f			ld de, prompt 
1f8f			 
1f8f cd bd 0d				call str_at_display 
1f92 cd cd 0d			call update_display 
1f95			 
1f95 3e 79			ld a, kLCD_Line4+1	 ; TODO using direct screen line writes. Correct this to frame buffer 
1f97 16 0a			ld d, 10 
1f99 21 f6 f0			ld hl, scratch	 
1f9c cd 0b 10			call input_str 
1f9f			 
1f9f			;	call clear_display 
1f9f			;'	call update_display 
1f9f			 
1f9f 3e 00		            LD   A, display_row_1 
1fa1			;            CALL fLCD_Pos       ;Position cursor to location in A 
1fa1 11 5f 1f		            LD   DE, clear 
1fa4 cd bd 0d				call str_at_display 
1fa7			;            CALL fLCD_Str       ;Display string pointed to by DE 
1fa7 3e 00		            LD   A, display_row_1 
1fa9			;            CALL fLCD_Pos       ;Position cursor to location in A 
1fa9 11 f6 f0		            LD   DE, scratch 
1fac			;            CALL fLCD_Str       ;Display string pointed to by DE 
1fac cd bd 0d				call str_at_display 
1faf cd cd 0d			call update_display 
1fb2			 
1fb2 3e 00				ld a,0 
1fb4 21 f6 f0			ld hl, scratch 
1fb7 77				ld (hl),a 
1fb8			 
1fb8 00				nop 
1fb9 c3 82 1f			jp cloop 
1fbc			 
1fbc			 
1fbc			 
1fbc			; OS Prompt 
1fbc			 
1fbc .. 00		prompt: db ">",0 
1fbe .. 00		endprg: db "?",0 
1fc0			 
1fc0			 
1fc0			; handy next page prompt 
1fc0			next_page_prompt: 
1fc0 e5				push hl 
1fc1 d5				push de 
1fc2 f5				push af 
1fc3 c5				push bc 
1fc4			 
1fc4 3e 9f			ld a,display_row_4 + display_cols - 1 
1fc6 11 be 1f		        ld de, endprg 
1fc9 cd bd 0d			call str_at_display 
1fcc cd cd 0d			call update_display 
1fcf cd 26 75			call cin_wait 
1fd2 c1				pop bc 
1fd3 f1				pop af 
1fd4 d1				pop de 
1fd5 e1				pop hl 
1fd6			 
1fd6			 
1fd6 c9				ret 
1fd7			 
1fd7			 
1fd7			; forth parser 
1fd7			 
1fd7			; My forth kernel 
1fd7			include "forth_kernel.asm" 
1fd7			; 
1fd7			; kernel to the forth OS 
1fd7			 
1fd7			DS_TYPE_STR: equ 1     ; string type 
1fd7			DS_TYPE_INUM: equ 2     ; $ 16 bit unsigned int usually a hex address 
1fd7			DS_TYPE_SNUM: equ 3     ; $ 16 bit signed int  
1fd7			;DS_TYPE_FNUM: equ 3      ; 24/32 bit floating point  do string conversion instead of a new type 
1fd7			 
1fd7			FORTH_PARSEV1: equ 0 
1fd7			FORTH_PARSEV2: equ 0 
1fd7			FORTH_PARSEV3: equ 0 
1fd7			FORTH_PARSEV4: equ 0 
1fd7			FORTH_PARSEV5: equ 0 
1fd7			FORTH_PARSEV6: equ 1 
1fd7			 
1fd7			;if FORTH_PARSEV5 
1fd7			;	FORTH_END_BUFFER: equ 0 
1fd7			;else 
1fd7			FORTH_END_BUFFER: equ 127 
1fd7			;endif 
1fd7			 
1fd7			FORTH_TRUE: equ 1 
1fd7			FORTH_FALSE: equ 0 
1fd7			 
1fd7			if FORTH_PARSEV4 
1fd7			include "forth_stackops.asm" 
1fd7			endif 
1fd7			 
1fd7			if FORTH_PARSEV5 
1fd7			include "forth_stackopsv5.asm" 
1fd7			endif 
1fd7			 
1fd7			if FORTH_PARSEV6 
1fd7			include "forth_stackopsv5.asm" 
1fd7			 
1fd7			; Stack operations for v5 parser on wards 
1fd7			; * DATA stack 
1fd7			; * LOOP stack 
1fd7			; * RETURN stack 
1fd7			 
1fd7			 
1fd7			 
1fd7			FORTH_CHK_DSP_UNDER: macro 
1fd7				push hl 
1fd7				push de 
1fd7				ld hl,(cli_data_sp) 
1fd7				ld de, cli_data_stack 
1fd7				call cmp16 
1fd7				jp c, fault_dsp_under 
1fd7				pop de 
1fd7				pop hl 
1fd7				endm 
1fd7			 
1fd7			 
1fd7			FORTH_CHK_RSP_UNDER: macro 
1fd7				push hl 
1fd7				push de 
1fd7				ld hl,(cli_ret_sp) 
1fd7				ld de, cli_ret_stack 
1fd7				call cmp16 
1fd7				jp c, fault_rsp_under 
1fd7				pop de 
1fd7				pop hl 
1fd7				endm 
1fd7			 
1fd7			FORTH_CHK_LOOP_UNDER: macro 
1fd7				push hl 
1fd7				push de 
1fd7				ld hl,(cli_loop_sp) 
1fd7				ld de, cli_loop_stack 
1fd7				call cmp16 
1fd7				jp c, fault_loop_under 
1fd7				pop de 
1fd7				pop hl 
1fd7				endm 
1fd7			 
1fd7			FORTH_ERR_TOS_NOTSTR: macro 
1fd7				; TOSO might need more for checks when used 
1fd7				push af 
1fd7				ld a,(hl) 
1fd7				cp DS_TYPE_STR 
1fd7				jp nz, type_faultn   
1fd7				pop af 
1fd7				endm 
1fd7			 
1fd7			FORTH_ERR_TOS_NOTNUM: macro 
1fd7				push af 
1fd7				ld a,(hl) 
1fd7				cp DS_TYPE_INUM 
1fd7				jp nz, type_faultn   
1fd7				pop af 
1fd7				endm 
1fd7			 
1fd7			 
1fd7			; increase data stack pointer and save hl to it 
1fd7				 
1fd7			FORTH_DSP_NEXT: macro 
1fd7				call macro_forth_dsp_next 
1fd7				endm 
1fd7			 
1fd7			 
1fd7			macro_forth_dsp_next: 
1fd7				if DEBUG_FORTH_STACK_GUARD 
1fd7 cd ca 6d				call check_stacks 
1fda				endif 
1fda e5				push hl 
1fdb d5				push de 
1fdc eb				ex de,hl 
1fdd 2a 23 f9			ld hl,(cli_data_sp) 
1fe0 23				inc hl 
1fe1 23				inc hl 
1fe2			 
1fe2			; PARSEV5 
1fe2 23				inc hl 
1fe3 22 23 f9			ld (cli_data_sp),hl 
1fe6 73				ld (hl), e 
1fe7 23				inc hl 
1fe8 72				ld (hl), d 
1fe9 d1				pop de 
1fea e1				pop hl 
1feb				if DEBUG_FORTH_STACK_GUARD 
1feb cd ca 6d				call check_stacks 
1fee				endif 
1fee c9				ret 
1fef			 
1fef			 
1fef			; increase ret stack pointer and save hl to it 
1fef				 
1fef			FORTH_RSP_NEXT: macro 
1fef				call macro_forth_rsp_next 
1fef				endm 
1fef			 
1fef			macro_forth_rsp_next: 
1fef				if DEBUG_FORTH_STACK_GUARD 
1fef cd ca 6d				call check_stacks 
1ff2				endif 
1ff2 e5				push hl 
1ff3 d5				push de 
1ff4 eb				ex de,hl 
1ff5 2a 27 f9			ld hl,(cli_ret_sp) 
1ff8 23				inc hl 
1ff9 23				inc hl 
1ffa 22 27 f9			ld (cli_ret_sp),hl 
1ffd 73				ld (hl), e 
1ffe 23				inc hl 
1fff 72				ld (hl), d 
2000 d1				pop de 
2001 e1				pop hl 
2002				if DEBUG_FORTH_STACK_GUARD 
2002 cd ca 6d				call check_stacks 
2005				endif 
2005 c9				ret 
2006			 
2006			; get current ret stack pointer and save to hl  
2006				 
2006			FORTH_RSP_TOS: macro 
2006				call macro_forth_rsp_tos 
2006				endm 
2006			 
2006			macro_forth_rsp_tos: 
2006				;push de 
2006 2a 27 f9			ld hl,(cli_ret_sp) 
2009 cd 41 20			call loadhlptrtohl 
200c				;ld e, (hl) 
200c				;inc hl 
200c				;ld d, (hl) 
200c				;ex de, hl 
200c					if DEBUG_FORTH_WORDS 
200c			;			DMARK "RST" 
200c						CALLMONITOR 
200c cd aa fd			call debug_vector  
200f				endm  
# End of macro CALLMONITOR
200f					endif 
200f				;pop de 
200f c9				ret 
2010			 
2010			; pop ret stack pointer 
2010				 
2010			FORTH_RSP_POP: macro 
2010				call macro_forth_rsp_pop 
2010				endm 
2010			 
2010			 
2010			macro_forth_rsp_pop: 
2010				if DEBUG_FORTH_STACK_GUARD 
2010			;		DMARK "RPP" 
2010 cd ca 6d				call check_stacks 
2013					FORTH_CHK_RSP_UNDER 
2013 e5				push hl 
2014 d5				push de 
2015 2a 27 f9			ld hl,(cli_ret_sp) 
2018 11 e1 f8			ld de, cli_ret_stack 
201b cd fc 0f			call cmp16 
201e da e1 6e			jp c, fault_rsp_under 
2021 d1				pop de 
2022 e1				pop hl 
2023				endm 
# End of macro FORTH_CHK_RSP_UNDER
2023				endif 
2023 e5				push hl 
2024 2a 27 f9			ld hl,(cli_ret_sp) 
2027			 
2027			 
2027				if FORTH_ENABLE_FREE 
2027			 
2027					; get pointer 
2027			 
2027					push de 
2027					push hl 
2027			 
2027					ld e, (hl) 
2027					inc hl 
2027					ld d, (hl) 
2027			 
2027					ex de, hl 
2027					call free 
2027			 
2027					pop hl 
2027					pop de 
2027			 
2027			 
2027				endif 
2027			 
2027			 
2027 2b				dec hl 
2028 2b				dec hl 
2029 22 27 f9			ld (cli_ret_sp), hl 
202c				; do stack underflow checks 
202c e1				pop hl 
202d				if DEBUG_FORTH_STACK_GUARD 
202d cd ca 6d				call check_stacks 
2030					FORTH_CHK_RSP_UNDER 
2030 e5				push hl 
2031 d5				push de 
2032 2a 27 f9			ld hl,(cli_ret_sp) 
2035 11 e1 f8			ld de, cli_ret_stack 
2038 cd fc 0f			call cmp16 
203b da e1 6e			jp c, fault_rsp_under 
203e d1				pop de 
203f e1				pop hl 
2040				endm 
# End of macro FORTH_CHK_RSP_UNDER
2040				endif 
2040 c9				ret 
2041			 
2041			 
2041			 
2041			; routine to load word pointed to by hl into hl 
2041			 
2041			loadhlptrtohl: 
2041			 
2041 d5				push de 
2042 5e				ld e, (hl) 
2043 23				inc hl 
2044 56				ld d, (hl) 
2045 eb				ex de, hl 
2046 d1				pop de 
2047			 
2047 c9				ret 
2048			 
2048			 
2048			 
2048			 
2048			 
2048			; push a number held in HL onto the data stack 
2048			; entry point for pushing a value when already in hl used in function above 
2048			 
2048			forth_push_numhl: 
2048			 
2048 e5				push hl    ; save value to push 
2049			 
2049			if DEBUG_FORTH_PUSH 
2049				; see if disabled 
2049			 
2049			 
2049 f5				push af 
204a 3a aa fd			ld a,(debug_vector) 
204d fe c9			cp $c9   ; ret 
204f			;	ld a, (os_view_disable) 
204f			;	cp '*' 
204f 28 34			jr z, .pskip2 
2051 e5				push hl 
2052 e5			push hl 
2053 cd aa 0d			call clear_display 
2056 e1			pop hl 
2057 7c				ld a,h 
2058 21 fb f3			ld hl, os_word_scratch 
205b cd e7 11			call hexout 
205e e1				pop hl 
205f 7d				ld a,l 
2060 21 fd f3			ld hl, os_word_scratch+2 
2063 cd e7 11			call hexout 
2066			 
2066 21 ff f3			ld hl, os_word_scratch+4 
2069 3e 00			ld a,0 
206b 77				ld (hl),a 
206c 11 fb f3			ld de,os_word_scratch 
206f 3e 28				ld a, display_row_2 
2071 cd bd 0d				call str_at_display 
2074 11 c5 5f			ld de, .push_num 
2077 3e 00			ld a, display_row_1 
2079			 
2079 cd bd 0d				call str_at_display 
207c			 
207c			 
207c cd cd 0d			call update_display 
207f cd ed 0c			call delay1s 
2082 cd ed 0c			call delay1s 
2085			.pskip2:  
2085			 
2085 f1				pop af 
2086			endif	 
2086			 
2086			 
2086				FORTH_DSP_NEXT 
2086 cd d7 1f			call macro_forth_dsp_next 
2089				endm 
# End of macro FORTH_DSP_NEXT
2089			 
2089 2a 23 f9			ld hl, (cli_data_sp) 
208c			 
208c				; save item type 
208c 3e 02			ld a,  DS_TYPE_INUM 
208e 77				ld (hl), a 
208f 23				inc hl 
2090			 
2090				; get word off stack 
2090 d1				pop de 
2091 7b				ld a,e 
2092 77				ld (hl), a 
2093 23				inc hl 
2094 7a				ld a,d 
2095 77				ld (hl), a 
2096			 
2096			if DEBUG_FORTH_PUSH 
2096 2b				dec hl 
2097 2b				dec hl 
2098 2b				dec hl 
2099						DMARK "PH5" 
2099 f5				push af  
209a 3a ae 20			ld a, (.dmark)  
209d 32 a0 fd			ld (debug_mark),a  
20a0 3a af 20			ld a, (.dmark+1)  
20a3 32 a1 fd			ld (debug_mark+1),a  
20a6 3a b0 20			ld a, (.dmark+2)  
20a9 32 a2 fd			ld (debug_mark+2),a  
20ac 18 03			jr .pastdmark  
20ae ..			.dmark: db "PH5"  
20b1 f1			.pastdmark: pop af  
20b2			endm  
# End of macro DMARK
20b2				CALLMONITOR 
20b2 cd aa fd			call debug_vector  
20b5				endm  
# End of macro CALLMONITOR
20b5			endif	 
20b5			 
20b5 c9				ret 
20b6			 
20b6			 
20b6			; Push a string to stack pointed to by hl 
20b6			 
20b6			forth_push_str: 
20b6			 
20b6			if DEBUG_FORTH_PUSH 
20b6						DMARK "PSQ" 
20b6 f5				push af  
20b7 3a cb 20			ld a, (.dmark)  
20ba 32 a0 fd			ld (debug_mark),a  
20bd 3a cc 20			ld a, (.dmark+1)  
20c0 32 a1 fd			ld (debug_mark+1),a  
20c3 3a cd 20			ld a, (.dmark+2)  
20c6 32 a2 fd			ld (debug_mark+2),a  
20c9 18 03			jr .pastdmark  
20cb ..			.dmark: db "PSQ"  
20ce f1			.pastdmark: pop af  
20cf			endm  
# End of macro DMARK
20cf				CALLMONITOR 
20cf cd aa fd			call debug_vector  
20d2				endm  
# End of macro CALLMONITOR
20d2			endif	 
20d2			 
20d2			 
20d2			    
20d2 e5				push hl 
20d3 e5				push hl 
20d4			 
20d4			;	ld a, 0   ; find end of string 
20d4 cd 44 13			call strlenz 
20d7			if DEBUG_FORTH_PUSH 
20d7						DMARK "PQ2" 
20d7 f5				push af  
20d8 3a ec 20			ld a, (.dmark)  
20db 32 a0 fd			ld (debug_mark),a  
20de 3a ed 20			ld a, (.dmark+1)  
20e1 32 a1 fd			ld (debug_mark+1),a  
20e4 3a ee 20			ld a, (.dmark+2)  
20e7 32 a2 fd			ld (debug_mark+2),a  
20ea 18 03			jr .pastdmark  
20ec ..			.dmark: db "PQ2"  
20ef f1			.pastdmark: pop af  
20f0			endm  
# End of macro DMARK
20f0				CALLMONITOR 
20f0 cd aa fd			call debug_vector  
20f3				endm  
# End of macro CALLMONITOR
20f3			endif	 
20f3 eb				ex de, hl 
20f4 e1				pop hl   ; get ptr to start of string 
20f5			if DEBUG_FORTH_PUSH 
20f5						DMARK "PQ3" 
20f5 f5				push af  
20f6 3a 0a 21			ld a, (.dmark)  
20f9 32 a0 fd			ld (debug_mark),a  
20fc 3a 0b 21			ld a, (.dmark+1)  
20ff 32 a1 fd			ld (debug_mark+1),a  
2102 3a 0c 21			ld a, (.dmark+2)  
2105 32 a2 fd			ld (debug_mark+2),a  
2108 18 03			jr .pastdmark  
210a ..			.dmark: db "PQ3"  
210d f1			.pastdmark: pop af  
210e			endm  
# End of macro DMARK
210e				CALLMONITOR 
210e cd aa fd			call debug_vector  
2111				endm  
# End of macro CALLMONITOR
2111			endif	 
2111 19				add hl,de 
2112			if DEBUG_FORTH_PUSH 
2112						DMARK "PQE" 
2112 f5				push af  
2113 3a 27 21			ld a, (.dmark)  
2116 32 a0 fd			ld (debug_mark),a  
2119 3a 28 21			ld a, (.dmark+1)  
211c 32 a1 fd			ld (debug_mark+1),a  
211f 3a 29 21			ld a, (.dmark+2)  
2122 32 a2 fd			ld (debug_mark+2),a  
2125 18 03			jr .pastdmark  
2127 ..			.dmark: db "PQE"  
212a f1			.pastdmark: pop af  
212b			endm  
# End of macro DMARK
212b				CALLMONITOR 
212b cd aa fd			call debug_vector  
212e				endm  
# End of macro CALLMONITOR
212e			endif	 
212e			 
212e 2b				dec hl    ; see if there is an optional trailing double quote 
212f 7e				ld a,(hl) 
2130 fe 22			cp '"' 
2132 20 03			jr nz, .strnoq 
2134 3e 00			ld a, 0      ; get rid of double quote 
2136 77				ld (hl), a 
2137 23			.strnoq: inc hl 
2138			 
2138 3e 00			ld a, 0 
213a 77				ld (hl), a     ; add null term and get rid of trailing double quote 
213b			 
213b 13				inc de ; add one for the type string 
213c 13				inc de ; add one for null term??? 
213d			 
213d				; tos is get string pointer again 
213d				; de contains space to allocate 
213d				 
213d d5				push de 
213e			 
213e eb				ex de, hl 
213f			 
213f				;push af 
213f			 
213f			if DEBUG_FORTH_PUSH 
213f						DMARK "PHm" 
213f f5				push af  
2140 3a 54 21			ld a, (.dmark)  
2143 32 a0 fd			ld (debug_mark),a  
2146 3a 55 21			ld a, (.dmark+1)  
2149 32 a1 fd			ld (debug_mark+1),a  
214c 3a 56 21			ld a, (.dmark+2)  
214f 32 a2 fd			ld (debug_mark+2),a  
2152 18 03			jr .pastdmark  
2154 ..			.dmark: db "PHm"  
2157 f1			.pastdmark: pop af  
2158			endm  
# End of macro DMARK
2158				CALLMONITOR 
2158 cd aa fd			call debug_vector  
215b				endm  
# End of macro CALLMONITOR
215b			endif	 
215b cd b9 13			call malloc	; on ret hl now contains allocated memory 
215e				if DEBUG_FORTH_MALLOC_GUARD 
215e cc 1d 60				call z,malloc_error 
2161				endif 
2161			 
2161				 
2161 c1				pop bc    ; get length 
2162 d1				pop de   ;  get string start    
2163			 
2163				; hl has destination from malloc 
2163			 
2163 eb				ex de, hl    ; prep for ldir 
2164			 
2164 d5				push de   ; save malloc area for DSP later 
2165				;push hl   ; save malloc area for DSP later 
2165			 
2165			if DEBUG_FORTH_PUSH 
2165						DMARK "PHc" 
2165 f5				push af  
2166 3a 7a 21			ld a, (.dmark)  
2169 32 a0 fd			ld (debug_mark),a  
216c 3a 7b 21			ld a, (.dmark+1)  
216f 32 a1 fd			ld (debug_mark+1),a  
2172 3a 7c 21			ld a, (.dmark+2)  
2175 32 a2 fd			ld (debug_mark+2),a  
2178 18 03			jr .pastdmark  
217a ..			.dmark: db "PHc"  
217d f1			.pastdmark: pop af  
217e			endm  
# End of macro DMARK
217e				CALLMONITOR 
217e cd aa fd			call debug_vector  
2181				endm  
# End of macro CALLMONITOR
2181			endif	 
2181			 
2181			 
2181 ed b0			ldir 
2183			 
2183			 
2183				; push malloc to data stack     macro?????  
2183			 
2183				FORTH_DSP_NEXT 
2183 cd d7 1f			call macro_forth_dsp_next 
2186				endm 
# End of macro FORTH_DSP_NEXT
2186			 
2186				; save value and type 
2186			 
2186 2a 23 f9			ld hl, (cli_data_sp) 
2189			 
2189				; save item type 
2189 3e 01			ld a,  DS_TYPE_STR 
218b 77				ld (hl), a 
218c 23				inc hl 
218d			 
218d				; get malloc word off stack 
218d d1				pop de 
218e 73				ld (hl), e 
218f 23				inc hl 
2190 72				ld (hl), d 
2191			 
2191			 
2191			 
2191			if DEBUG_FORTH_PUSH 
2191 2a 23 f9			ld hl, (cli_data_sp) 
2194						DMARK "PHS" 
2194 f5				push af  
2195 3a a9 21			ld a, (.dmark)  
2198 32 a0 fd			ld (debug_mark),a  
219b 3a aa 21			ld a, (.dmark+1)  
219e 32 a1 fd			ld (debug_mark+1),a  
21a1 3a ab 21			ld a, (.dmark+2)  
21a4 32 a2 fd			ld (debug_mark+2),a  
21a7 18 03			jr .pastdmark  
21a9 ..			.dmark: db "PHS"  
21ac f1			.pastdmark: pop af  
21ad			endm  
# End of macro DMARK
21ad				CALLMONITOR 
21ad cd aa fd			call debug_vector  
21b0				endm  
# End of macro CALLMONITOR
21b0			;	ex de,hl 
21b0			endif	 
21b0				; in case of spaces, skip the ptr past the copied string 
21b0				;pop af 
21b0				;ld (cli_origptr),hl 
21b0			 
21b0 c9				ret 
21b1			 
21b1			 
21b1			 
21b1			; TODO ascii push input onto stack given hl to start of input 
21b1			 
21b1			; identify type 
21b1			; if starts with a " then a string 
21b1			; otherwise it is a number 
21b1			;  
21b1			; if a string 
21b1			;     scan for ending " to get length of string to malloc for + 1 
21b1			;     malloc 
21b1			;     put pointer to string on stack first byte flags as string 
21b1			; 
21b1			; else a number 
21b1			;    look for number format identifier 
21b1			;    $xx hex 
21b1			;    %xxxxx bin 
21b1			;    xxxxx decimal 
21b1			;    convert number to 16bit word.  
21b1			;    malloc word + 1 with flag to identiy as num 
21b1			;    put pointer to number on stack 
21b1			;   
21b1			;  
21b1			  
21b1			forth_apush: 
21b1				; kernel push 
21b1			 
21b1			if DEBUG_FORTH_PUSH 
21b1						DMARK "PSH" 
21b1 f5				push af  
21b2 3a c6 21			ld a, (.dmark)  
21b5 32 a0 fd			ld (debug_mark),a  
21b8 3a c7 21			ld a, (.dmark+1)  
21bb 32 a1 fd			ld (debug_mark+1),a  
21be 3a c8 21			ld a, (.dmark+2)  
21c1 32 a2 fd			ld (debug_mark+2),a  
21c4 18 03			jr .pastdmark  
21c6 ..			.dmark: db "PSH"  
21c9 f1			.pastdmark: pop af  
21ca			endm  
# End of macro DMARK
21ca				CALLMONITOR 
21ca cd aa fd			call debug_vector  
21cd				endm  
# End of macro CALLMONITOR
21cd			endif	 
21cd				; identify input type 
21cd			 
21cd 7e				ld a,(hl) 
21ce			 
21ce fe 23			cp '#' 
21d0 ca 0a 22			jp z, .fapdec 
21d3			 
21d3			 
21d3 fe 22			cp '"' 
21d5 28 0a			jr z, .fapstr 
21d7 fe 24			cp '$' 
21d9 ca 01 22			jp z, .faphex 
21dc fe 25			cp '%' 
21de ca e9 21			jp z, .fapbin 
21e1			;	cp 'b' 
21e1			;	jp z, .fabin 
21e1				; else decimal 
21e1			 
21e1				; TODO do decimal conversion 
21e1				; decimal is stored as a 16bit word 
21e1			 
21e1				; by default everything is a string if type is not detected 
21e1			.fapstr: ; 
21e1 fe 22			cp '"' 
21e3 20 01			jr nz, .strnoqu 
21e5 23				inc hl 
21e6			.strnoqu: 
21e6 c3 b6 20			jp forth_push_str 
21e9			 
21e9			 
21e9			 
21e9			.fapbin:    ; push a binary string.  
21e9 11 00 00			ld de, 0   ; hold a 16bit value 
21ec			 
21ec 23			.fapbinshift:	inc hl  
21ed 7e				ld a,(hl) 
21ee fe 00			cp 0     ; done scanning  
21f0 28 0b			jr z, .fapbdone  	; got it in HL so push  
21f2			 
21f2				; left shift de 
21f2 eb				ex de, hl	 
21f3 29				add hl, hl 
21f4			 
21f4				; is 1 
21f4 fe 31			cp '1' 
21f6 20 02			jr nz, .binzero 
21f8 cb 4d			bit 1, l 
21fa			.binzero: 
21fa eb				ex de, hl	 ; save current de 
21fb 18 ef			jr .fapbinshift 
21fd			 
21fd			.fapbdone: 
21fd eb				ex de, hl 
21fe c3 48 20			jp forth_push_numhl 
2201			 
2201			 
2201			.faphex:   ; hex is always stored as a 16bit word 
2201				; skip number prefix 
2201 23				inc hl 
2202				; turn ascii into number 
2202 cd 9d 12			call get_word_hl	; ret 16bit word in hl 
2205			 
2205 c3 48 20			jp forth_push_numhl 
2208			 
2208 00				 nop 
2209			 
2209			.fabin:   ; TODO bin conversion 
2209			 
2209			 
2209 c9				ret 
220a			.fapdec:	 
220a				; string to dec conversion 
220a 23				inc hl 
220b eb				ex de, hl 
220c cd db 12			call string_to_uint16 
220f c3 48 20			jp forth_push_numhl 
2212 c9				ret 
2213				 
2213			;atoui_16: 
2213			 
2213			; get either a string ptr or a 16bit word from the data stack 
2213			 
2213			FORTH_DSP: macro 
2213				call macro_forth_dsp 
2213				endm 
2213			 
2213			macro_forth_dsp: 
2213				; data stack pointer points to current word on tos 
2213			 
2213 2a 23 f9			ld hl,(cli_data_sp) 
2216			 
2216				if DEBUG_FORTH_PUSH 
2216						DMARK "DSP" 
2216 f5				push af  
2217 3a 2b 22			ld a, (.dmark)  
221a 32 a0 fd			ld (debug_mark),a  
221d 3a 2c 22			ld a, (.dmark+1)  
2220 32 a1 fd			ld (debug_mark+1),a  
2223 3a 2d 22			ld a, (.dmark+2)  
2226 32 a2 fd			ld (debug_mark+2),a  
2229 18 03			jr .pastdmark  
222b ..			.dmark: db "DSP"  
222e f1			.pastdmark: pop af  
222f			endm  
# End of macro DMARK
222f			 
222f cd 50 60				call display_data_sp 
2232				;call break_point_state 
2232				;rst 030h 
2232				CALLMONITOR 
2232 cd aa fd			call debug_vector  
2235				endm  
# End of macro CALLMONITOR
2235				endif 
2235			 
2235 c9				ret 
2236			 
2236			; return hl to start of value on stack 
2236			 
2236			FORTH_DSP_VALUE: macro 
2236				call macro_forth_dsp_value 
2236				endm 
2236			 
2236			macro_forth_dsp_value: 
2236			 
2236				FORTH_DSP 
2236 cd 13 22			call macro_forth_dsp 
2239				endm 
# End of macro FORTH_DSP
2239			 
2239 d5				push de 
223a			 
223a 23				inc hl ; skip type 
223b			 
223b 5e				ld e, (hl) 
223c 23				inc hl 
223d 56				ld d, (hl) 
223e eb				ex de,hl  
223f			 
223f d1				pop de 
2240			 
2240 c9				ret 
2241			 
2241			; return hl to start of value to second item on stack 
2241			 
2241			FORTH_DSP_VALUEM1: macro 
2241				call macro_forth_dsp_value_m1 
2241				endm 
2241			 
2241			macro_forth_dsp_value_m1: 
2241			 
2241				FORTH_DSP 
2241 cd 13 22			call macro_forth_dsp 
2244				endm 
# End of macro FORTH_DSP
2244			 
2244 2b				dec hl 
2245 2b				dec hl 
2246			;	dec hl 
2246			 
2246 d5				push de 
2247			 
2247 5e				ld e, (hl) 
2248 23				inc hl 
2249 56				ld d, (hl) 
224a eb				ex de,hl  
224b			 
224b d1				pop de 
224c			 
224c c9				ret 
224d			 
224d				 
224d			 
224d			; whatever the current top os stack points to, we are now done with it so return memory to malloc 
224d			 
224d			FORTH_DSP_POP: macro 
224d				call macro_forth_dsp_pop 
224d				endm 
224d			 
224d			 
224d			; get the tos data type 
224d			 
224d			FORTH_DSP_TYPE:   macro 
224d			 
224d				;FORTH_DSP_VALUE 
224d				FORTH_DSP 
224d				 
224d				; hl points to value 
224d				; check type 
224d			 
224d				ld a,(hl) 
224d			 
224d				endm 
224d			 
224d			; load the tos value into hl 
224d			 
224d			 
224d			FORTH_DSP_VALUEHL:  macro 
224d				call macro_dsp_valuehl 
224d				endm 
224d			 
224d			 
224d			 
224d			macro_dsp_valuehl: 
224d				FORTH_DSP_VALUE 
224d cd 36 22			call macro_forth_dsp_value 
2250				endm 
# End of macro FORTH_DSP_VALUE
2250			 
2250				;FORTH_ERR_TOS_NOTNUM 
2250			 
2250				;inc hl   ; skip type id 
2250			 
2250			;	push de 
2250			; 
2250			;	ld e, (hl) 
2250			;	inc hl 
2250			;	ld d, (hl) 
2250			;	ex de,hl  
2250			 
2250			;	pop de 
2250			 
2250				if DEBUG_FORTH_PUSH 
2250						DMARK "DVL" 
2250 f5				push af  
2251 3a 65 22			ld a, (.dmark)  
2254 32 a0 fd			ld (debug_mark),a  
2257 3a 66 22			ld a, (.dmark+1)  
225a 32 a1 fd			ld (debug_mark+1),a  
225d 3a 67 22			ld a, (.dmark+2)  
2260 32 a2 fd			ld (debug_mark+2),a  
2263 18 03			jr .pastdmark  
2265 ..			.dmark: db "DVL"  
2268 f1			.pastdmark: pop af  
2269			endm  
# End of macro DMARK
2269				CALLMONITOR 
2269 cd aa fd			call debug_vector  
226c				endm  
# End of macro CALLMONITOR
226c				endif 
226c c9				ret 
226d			 
226d			forth_apushstrhl:      
226d				; push of string requires use of cli_origptr 
226d				; bodge use 
226d			 
226d				; get current cli_origptr, save, update with temp pointer  
226d ed 5b 73 f9		ld de, (cli_origptr) 
2271 22 73 f9			ld (cli_origptr), hl 
2274 d5				push de 
2275 cd b1 21			call forth_apush 
2278 d1				pop de 
2279 ed 53 73 f9		ld (cli_origptr), de 
227d c9			        ret	 
227e			 
227e			 
227e			; increase loop stack pointer and save hl to it 
227e				 
227e			FORTH_LOOP_NEXT: macro 
227e				call macro_forth_loop_next 
227e				;nop 
227e				endm 
227e			 
227e			macro_forth_loop_next: 
227e				if DEBUG_FORTH_STACK_GUARD 
227e cd ca 6d				call check_stacks 
2281				endif 
2281 e5				push hl 
2282 d5				push de 
2283 eb				ex de,hl 
2284 2a 25 f9			ld hl,(cli_loop_sp) 
2287 23				inc hl 
2288 23				inc hl 
2289					if DEBUG_FORTH_WORDS 
2289						DMARK "LNX" 
2289 f5				push af  
228a 3a 9e 22			ld a, (.dmark)  
228d 32 a0 fd			ld (debug_mark),a  
2290 3a 9f 22			ld a, (.dmark+1)  
2293 32 a1 fd			ld (debug_mark+1),a  
2296 3a a0 22			ld a, (.dmark+2)  
2299 32 a2 fd			ld (debug_mark+2),a  
229c 18 03			jr .pastdmark  
229e ..			.dmark: db "LNX"  
22a1 f1			.pastdmark: pop af  
22a2			endm  
# End of macro DMARK
22a2						CALLMONITOR 
22a2 cd aa fd			call debug_vector  
22a5				endm  
# End of macro CALLMONITOR
22a5					endif 
22a5 22 25 f9			ld (cli_loop_sp),hl 
22a8 73				ld (hl), e 
22a9 23				inc hl 
22aa 72				ld (hl), d 
22ab d1				pop de    ; been reversed so save a swap on restore 
22ac e1				pop hl 
22ad				if DEBUG_FORTH_STACK_GUARD 
22ad cd ca 6d				call check_stacks 
22b0				endif 
22b0 c9				ret 
22b1			 
22b1			; get current ret stack pointer and save to hl  
22b1				 
22b1			FORTH_LOOP_TOS: macro 
22b1				call macro_forth_loop_tos 
22b1				endm 
22b1			 
22b1			macro_forth_loop_tos: 
22b1 d5				push de 
22b2 2a 25 f9			ld hl,(cli_loop_sp) 
22b5 5e				ld e, (hl) 
22b6 23				inc hl 
22b7 56				ld d, (hl) 
22b8 eb				ex de, hl 
22b9 d1				pop de 
22ba c9				ret 
22bb			 
22bb			; pop loop stack pointer 
22bb				 
22bb			FORTH_LOOP_POP: macro 
22bb				call macro_forth_loop_pop 
22bb				endm 
22bb			 
22bb			 
22bb			macro_forth_loop_pop: 
22bb				if DEBUG_FORTH_STACK_GUARD 
22bb					DMARK "LPP" 
22bb f5				push af  
22bc 3a d0 22			ld a, (.dmark)  
22bf 32 a0 fd			ld (debug_mark),a  
22c2 3a d1 22			ld a, (.dmark+1)  
22c5 32 a1 fd			ld (debug_mark+1),a  
22c8 3a d2 22			ld a, (.dmark+2)  
22cb 32 a2 fd			ld (debug_mark+2),a  
22ce 18 03			jr .pastdmark  
22d0 ..			.dmark: db "LPP"  
22d3 f1			.pastdmark: pop af  
22d4			endm  
# End of macro DMARK
22d4 cd ca 6d				call check_stacks 
22d7					FORTH_CHK_LOOP_UNDER 
22d7 e5				push hl 
22d8 d5				push de 
22d9 2a 25 f9			ld hl,(cli_loop_sp) 
22dc 11 5f f8			ld de, cli_loop_stack 
22df cd fc 0f			call cmp16 
22e2 da e7 6e			jp c, fault_loop_under 
22e5 d1				pop de 
22e6 e1				pop hl 
22e7				endm 
# End of macro FORTH_CHK_LOOP_UNDER
22e7				endif 
22e7 e5				push hl 
22e8 2a 25 f9			ld hl,(cli_loop_sp) 
22eb 2b				dec hl 
22ec 2b				dec hl 
22ed 22 25 f9			ld (cli_loop_sp), hl 
22f0				; TODO do stack underflow checks 
22f0 e1				pop hl 
22f1				if DEBUG_FORTH_STACK_GUARD 
22f1 cd ca 6d				call check_stacks 
22f4					FORTH_CHK_LOOP_UNDER 
22f4 e5				push hl 
22f5 d5				push de 
22f6 2a 25 f9			ld hl,(cli_loop_sp) 
22f9 11 5f f8			ld de, cli_loop_stack 
22fc cd fc 0f			call cmp16 
22ff da e7 6e			jp c, fault_loop_under 
2302 d1				pop de 
2303 e1				pop hl 
2304				endm 
# End of macro FORTH_CHK_LOOP_UNDER
2304				endif 
2304 c9				ret 
2305			 
2305			macro_forth_dsp_pop: 
2305			 
2305 e5				push hl 
2306			 
2306				; release malloc data 
2306			 
2306				if DEBUG_FORTH_STACK_GUARD 
2306 cd ca 6d				call check_stacks 
2309					FORTH_CHK_DSP_UNDER 
2309 e5				push hl 
230a d5				push de 
230b 2a 23 f9			ld hl,(cli_data_sp) 
230e 11 5d f6			ld de, cli_data_stack 
2311 cd fc 0f			call cmp16 
2314 da db 6e			jp c, fault_dsp_under 
2317 d1				pop de 
2318 e1				pop hl 
2319				endm 
# End of macro FORTH_CHK_DSP_UNDER
2319				endif 
2319				;ld hl,(cli_data_sp) 
2319			if DEBUG_FORTH_DOT 
2319				DMARK "DPP" 
2319 f5				push af  
231a 3a 2e 23			ld a, (.dmark)  
231d 32 a0 fd			ld (debug_mark),a  
2320 3a 2f 23			ld a, (.dmark+1)  
2323 32 a1 fd			ld (debug_mark+1),a  
2326 3a 30 23			ld a, (.dmark+2)  
2329 32 a2 fd			ld (debug_mark+2),a  
232c 18 03			jr .pastdmark  
232e ..			.dmark: db "DPP"  
2331 f1			.pastdmark: pop af  
2332			endm  
# End of macro DMARK
2332				CALLMONITOR 
2332 cd aa fd			call debug_vector  
2335				endm  
# End of macro CALLMONITOR
2335			endif	 
2335			 
2335			 
2335			if FORTH_ENABLE_DSPPOPFREE 
2335			 
2335				FORTH_DSP 
2335 cd 13 22			call macro_forth_dsp 
2338				endm 
# End of macro FORTH_DSP
2338			 
2338 7e				ld a, (hl) 
2339 fe 01			cp DS_TYPE_STR 
233b 20 23			jr nz, .skippopfree 
233d			 
233d				FORTH_DSP_VALUEHL 
233d cd 4d 22			call macro_dsp_valuehl 
2340				endm 
# End of macro FORTH_DSP_VALUEHL
2340 00				nop 
2341			if DEBUG_FORTH_DOT 
2341				DMARK "DPf" 
2341 f5				push af  
2342 3a 56 23			ld a, (.dmark)  
2345 32 a0 fd			ld (debug_mark),a  
2348 3a 57 23			ld a, (.dmark+1)  
234b 32 a1 fd			ld (debug_mark+1),a  
234e 3a 58 23			ld a, (.dmark+2)  
2351 32 a2 fd			ld (debug_mark+2),a  
2354 18 03			jr .pastdmark  
2356 ..			.dmark: db "DPf"  
2359 f1			.pastdmark: pop af  
235a			endm  
# End of macro DMARK
235a				CALLMONITOR 
235a cd aa fd			call debug_vector  
235d				endm  
# End of macro CALLMONITOR
235d			endif	 
235d cd 83 14			call free 
2360			.skippopfree: 
2360				 
2360			 
2360			endif 
2360			 
2360			if DEBUG_FORTH_DOT_KEY 
2360				DMARK "DP2" 
2360				CALLMONITOR 
2360			endif	 
2360			 
2360				; move pointer down 
2360			 
2360 2a 23 f9			ld hl,(cli_data_sp) 
2363 2b				dec hl 
2364 2b				dec hl 
2365			; PARSEV5 
2365 2b				dec hl 
2366 22 23 f9			ld (cli_data_sp), hl 
2369			 
2369				if DEBUG_FORTH_STACK_GUARD 
2369 cd ca 6d				call check_stacks 
236c					FORTH_CHK_DSP_UNDER 
236c e5				push hl 
236d d5				push de 
236e 2a 23 f9			ld hl,(cli_data_sp) 
2371 11 5d f6			ld de, cli_data_stack 
2374 cd fc 0f			call cmp16 
2377 da db 6e			jp c, fault_dsp_under 
237a d1				pop de 
237b e1				pop hl 
237c				endm 
# End of macro FORTH_CHK_DSP_UNDER
237c				endif 
237c			 
237c e1				pop hl 
237d			 
237d c9				ret 
237e			 
237e			getwordathl: 
237e				; hl points to an address 
237e				; load hl with the word at that address 
237e			 
237e d5				push de 
237f			 
237f 5e				ld e, (hl) 
2380 23				inc hl 
2381 56				ld d, (hl) 
2382 eb				ex de, hl 
2383			 
2383 d1				pop de 
2384 c9				ret 
2385			 
2385			 
2385			; functions to manuplite stack pointers 
2385			 
2385			; generate fragment to set hl to be pointer to a stack item 
2385			 
2385			FORTH_DSP_PTR: macro  x 
2385				ld hl,(cli_data_sp) 
2385				ld de, x * 3 
2385				sbc hl, de 
2385				endm 
2385			 
2385			 
2385			 
2385			; copy point in hl to stack tmp storage slots 1-4 
2385			hltostack1: 
2385 11 f3 f0			ld de, os_stack_1  
2388 c3 b3 23			jp hltostackmv 
238b			 
238b			hltostack2:  
238b 11 f0 f0			ld de, os_stack_2 
238e c3 b3 23			jp hltostackmv 
2391			 
2391			hltostack3:  
2391 11 ed f0			ld de, os_stack_3 
2394 c3 b3 23			jp hltostackmv 
2397			 
2397			hltostack4:  
2397 11 ea f0			ld de, os_stack_4  
239a c3 b3 23			jp hltostackmv 
239d			 
239d			; copy to point in hl from stack tmp storage slots 1-4 
239d			hlfromstack1: 
239d 11 f3 f0			ld de, os_stack_1 
23a0 c3 b2 23			jp hlfromsttackmv 
23a3			 
23a3			hlfromstack2:  
23a3 11 f0 f0			ld de, os_stack_2 
23a6 c3 b2 23			jp hlfromsttackmv 
23a9			 
23a9			hlfromstack3:  
23a9 11 ed f0			ld de, os_stack_3 
23ac c3 b2 23			jp hlfromsttackmv 
23af			 
23af			hlfromstack4:  
23af 11 ea f0			ld de, os_stack_4 
23b2			 
23b2			hlfromsttackmv: 
23b2 eb				ex de, hl 
23b3			 
23b3			hltostackmv: 
23b3			 
23b3				; do stack move 
23b3 c5				push bc 
23b4 01 03 00			ld bc, 3 
23b7 ed b0			ldir  
23b9 c1				pop bc	 
23ba c9				ret 
23bb			 
23bb			; eof 
23bb			 
# End of file forth_stackopsv5.asm
23bb			endif 
23bb			loadwordinhl:	 
23bb			 
23bb d5				push de 
23bc			 
23bc 5e				ld e, (hl) 
23bd 23				inc hl 
23be 56				ld d, (hl) 
23bf eb				ex de,hl  
23c0			 
23c0 d1				pop de 
23c1			 
23c1 c9				ret 
23c2			 
23c2			user_word_eol:  
23c2				; hl contains the pointer to where to create a linked list item from the end 
23c2				; of the user dict to continue on at the system word dict 
23c2				 
23c2				; poke the stub of the word list linked list to repoint to rom words 
23c2			 
23c2				; stub format 
23c2				; db   word id 
23c2				; dw    link to next word 
23c2			        ; db char length of token 
23c2				; db string + 0 term 
23c2				; db exec code....  
23c2			 
23c2 3e 00			ld a, WORD_SYS_ROOT     ; root word 
23c4 77				ld (hl), a		; word id 
23c5 23				inc hl 
23c6			 
23c6 11 7d 25			ld de, sysdict 
23c9 73				ld (hl), e		; next word link ie system dict 
23ca 23				inc hl 
23cb 72				ld (hl), d		; next word link ie system dict 
23cc 23				inc hl	 
23cd			 
23cd			;	ld (hl), sysdict		; next word link ie system dict 
23cd			;	inc hl 
23cd			;	inc hl 
23cd			 
23cd			;	inc hl 
23cd			;	inc hl 
23cd			 
23cd 3e 02			ld a, 2			; word length is 0 
23cf 77				ld (hl), a	 
23d0 23				inc hl 
23d1			 
23d1 3e 7e			ld a, '~'			; word length is 0 
23d3 77				ld (hl), a	 
23d4 23				inc hl 
23d5 3e 00			ld a, 0			; save empty word 
23d7 77				ld (hl), a 
23d8			 
23d8 c9				ret 
23d9			 
23d9				 
23d9			 
23d9			forthexec_cleanup: 
23d9				FORTH_RSP_POP 
23d9 cd 10 20			call macro_forth_rsp_pop 
23dc				endm 
# End of macro FORTH_RSP_POP
23dc c9				ret 
23dd			 
23dd			forth_call_hl: 
23dd				; taking hl 
23dd e5				push hl 
23de c9				ret 
23df			 
23df			; this is called to reset Forth system but keep existing uwords etc 
23df			 
23df			forth_warmstart: 
23df				; setup stack over/under flow checks 
23df				if DEBUG_FORTH_STACK_GUARD 
23df cd b0 6d				call chk_stk_init 
23e2				endif 
23e2			 
23e2				; init stack pointers  - * these stacks go upwards *  
23e2 21 e1 f8			ld hl, cli_ret_stack 
23e5 22 27 f9			ld (cli_ret_sp), hl	 
23e8				; set bottom of stack 
23e8 3e 00			ld a,0 
23ea 77				ld (hl),a 
23eb 23				inc hl 
23ec 77				ld (hl),a 
23ed			 
23ed 21 5d f6			ld hl, cli_data_stack 
23f0 22 23 f9			ld (cli_data_sp), hl	 
23f3				; set bottom of stack 
23f3 3e 00			ld a,0 
23f5 77				ld (hl),a 
23f6 23				inc hl 
23f7 77				ld (hl),a 
23f8			 
23f8 21 5f f8			ld hl, cli_loop_stack 
23fb 22 25 f9			ld (cli_loop_sp), hl	 
23fe				; set bottom of stack 
23fe 3e 00			ld a,0 
2400 77				ld (hl),a 
2401 23				inc hl 
2402 77				ld (hl),a 
2403			 
2403				; init extent of current open file 
2403			 
2403 3e 00			ld a, 0 
2405 32 9f f9			ld (store_openext), a 
2408			 
2408 c9				ret 
2409			 
2409			 
2409			 
2409			; Cold Start - this is called to setup the whole Forth system 
2409			 
2409			forth_init: 
2409			 
2409				; setup stack over/under flow checks 
2409			 
2409			;	if DEBUG_FORTH_STACK_GUARD 
2409			;		call chk_stk_init 
2409			;	endif 
2409			 
2409				; enable auto display updates (slow.....) 
2409			 
2409 3e 01			ld a, 1 
240b 32 71 f9			ld (cli_autodisplay), a 
240e			 
240e				; if storage is in use disable long reads for now 
240e 3e 00			ld a, 0 
2410 32 aa f9			ld (store_longread), a 
2413			 
2413			 
2413				; show start up screen 
2413			 
2413 cd aa 0d			call clear_display 
2416			 
2416 3e 00			ld a,0 
2418 32 93 f9			ld (f_cursor_ptr), a 
241b			 
241b				; set start of word list in start of ram - for use when creating user words 
241b			 
241b 21 00 80			ld hl, baseram 
241e 22 f3 f3			ld (os_last_new_uword), hl 
2421 cd c2 23			call user_word_eol 
2424				 
2424			;		call display_data_sp 
2424			;		call next_page_prompt 
2424			 
2424			 
2424			 
2424			 
2424 c9				ret 
2425			 
2425 .. 00		.bootforth: db " Forth Kernel Init ",0 
2439			 
2439			; TODO push to stack 
2439			 
2439			;  
2439			 
2439			if FORTH_PARSEV2 
2439			 
2439			 
2439				include "forth_parserv2.asm" 
2439			 
2439			endif 
2439			 
2439			 
2439			; parse cli version 1 
2439			 
2439			if FORTH_PARSEV1 
2439			 
2439			 
2439			 
2439			      include "forth_parserv1.asm" 
2439			endif 
2439				 
2439			if FORTH_PARSEV3 
2439			      include "forth_parserv3.asm" 
2439				include "forth_wordsv3.asm" 
2439			endif 
2439			 
2439			if FORTH_PARSEV4 
2439			      include "forth_parserv4.asm" 
2439				include "forth_wordsv4.asm" 
2439			endif 
2439			 
2439			if FORTH_PARSEV5 
2439			      include "forth_parserv5.asm" 
2439				include "forth_wordsv4.asm" 
2439			endif 
2439			 
2439			if FORTH_PARSEV6 
2439			      include "forth_parserv6.asm" 
2439			 
2439			 
2439			; A better parser without using malloc and string copies all over the place.  
2439			; Exec in situ should be faster 
2439			 
2439			;WORD_SYS_LOWPRIM: equ 4    ; Offset for low level prim words opcode 
2439			;WORD_SYS_BRANCH: equ 10    ; Offset for branching and loop words opcode 
2439			WORD_SYS_UWORD: equ 1   ; Opcode for all user words 
2439			WORD_SYS_DELETED: equ 3 ; Op code for a deleted UWORD 
2439			WORD_SYS_ROOT: equ 0   ; Opcode for all user words 
2439			WORD_SYS_END: equ 0   ; Opcode for all user words 
2439			WORD_SYS_CORE: equ 20    ; Offset for dict core words opcode 
2439			WORD_FLAG_CODE: equ 0	   ; opcodeflag to exec pure code for this word 
2439			WORD_FLAG_JP: equ 1	   ; opcodeflag to list zero term jump table words 
2439			 
2439			; Core word preamble macro 
2439			 
2439			CWHEAD:   macro nxtword opcode lit len opflags 
2439				db WORD_SYS_CORE+opcode             
2439				; internal op code number 
2439				dw nxtword            
2439				; link to next dict word block 
2439				db len + 1 
2439				; literal length of dict word inc zero term 
2439				db lit,0              
2439				; literal dict word 
2439			        ; TODO db opflags        
2439				endm 
2439			 
2439			 
2439			NEXTW: macro  
2439				jp macro_next 
2439				endm 
2439			 
2439			macro_next: 
2439			if DEBUG_FORTH_PARSE_EXEC 
2439				DMARK "NXT" 
2439				CALLMONITOR 
2439			endif	 
2439			;	inc hl  ; skip token null term  
2439 ed 4b 75 f9		ld bc,(cli_ptr)   ; move to next token to parse in the input stream 
243d ed 5b 73 f9		ld de,(cli_origptr)   ; move to next token to parse in the input stream 
2441 2a f7 f3			ld hl,(os_tok_ptr)   ; move to next token to parse in the input stream 
2444			if DEBUG_FORTH_PARSE_EXEC 
2444				DMARK "}AA" 
2444				CALLMONITOR 
2444			endif	 
2444 c3 33 25			jp execnext 
2447				;jp exec1 
2447			       
2447			 
2447			 
2447			; Another go at the parser to compile  
2447			 
2447			 
2447			; TODO rework parser to change all of the string words to byte tokens 
2447			; TODO do a search for  
2447			 
2447			; TODO first run normal parser to zero term sections 
2447			; TODO for each word do a token look up to get the op code 
2447			; TODO need some means to flag to the exec that this is a byte code form    
2447			 
2447			 
2447			forthcompile: 
2447			 
2447			; 
2447			; line parse: 
2447			;       parse raw input buffer 
2447			;       tokenise the words 
2447			;       malloc new copy (for looping etc) 
2447			;       copy to malloc + current pc in line to start of string and add line term 
2447			;       save on new rsp 
2447			; 
2447			 
2447			; hl to point to the line to tokenise 
2447			 
2447			;	push hl 
2447 22 f7 f3			ld (os_tok_ptr), hl  ; save ptr to string 
244a			 
244a			;	ld a,0		; string term on input 
244a			;	call strlent 
244a			 
244a			;	ld (os_tok_len), hl	 ; save string length 
244a			 
244a			;if DEBUG_FORTH_TOK 
244a			;	ex de,hl		 
244a			;endif 
244a			 
244a			;	pop hl 		; get back string pointer 
244a			 
244a			if DEBUG_FORTH_TOK 
244a						DMARK "TOc" 
244a				CALLMONITOR 
244a			endif 
244a 7e			.cptoken2:    ld a,(hl) 
244b 23				inc hl 
244c fe 7f			cp FORTH_END_BUFFER 
244e 28 29			jr z, .cptokendone2 
2450 fe 00			cp 0 
2452 28 25			jr z, .cptokendone2 
2454 fe 22			cp '"' 
2456 28 0b			jr z, .cptokenstr2     ; will want to skip until end of string delim 
2458 fe 20			cp ' ' 
245a 20 ee			jr nz,  .cptoken2 
245c			 
245c			; TODO consume comments held between ( and ) 
245c			 
245c				; we have a space so change to zero term for dict match later 
245c 2b				dec hl 
245d 3e 00			ld a,0 
245f 77				ld (hl), a 
2460 23				inc hl 
2461 18 e7			jr .cptoken2 
2463				 
2463			 
2463			.cptokenstr2: 
2463				; skip all white space until either eol (because forgot to term) or end double quote 
2463			        ;   if double quotes spotted ensure to skip any space sep until matched doble quote 
2463				;inc hl ; skip current double quote 
2463 7e				ld a,(hl) 
2464 23				inc hl 
2465 fe 22			cp '"' 
2467 28 e1			jr z, .cptoken2 
2469 fe 7f			cp FORTH_END_BUFFER 
246b 28 0c			jr z, .cptokendone2 
246d fe 00			cp 0 
246f 28 08			jr z, .cptokendone2 
2471 fe 20			cp ' ' 
2473 28 02			jr z, .cptmp2 
2475 18 ec			jr .cptokenstr2 
2477			 
2477			.cptmp2:	; we have a space so change to zero term for dict match later 
2477				;dec hl 
2477				;ld a,"-"	; TODO remove this when working 
2477				;ld (hl), a 
2477				;inc hl 
2477 18 ea			jr .cptokenstr2 
2479			 
2479			.cptokendone2: 
2479				;inc hl 
2479 3e 7f			ld a, FORTH_END_BUFFER 
247b 77				ld (hl),a 
247c			;	inc hl 
247c			;	ld a, '!' 
247c			;	ld (hl),a 
247c			 
247c 2a f7 f3			ld hl,(os_tok_ptr) 
247f			         
247f			if DEBUG_FORTH_TOK 
247f						DMARK "Tc1" 
247f				CALLMONITOR 
247f			endif 
247f			 
247f				; push exec string to top of return stack 
247f				FORTH_RSP_NEXT 
247f cd ef 1f			call macro_forth_rsp_next 
2482				endm 
# End of macro FORTH_RSP_NEXT
2482 c9				ret 
2483			 
2483			; Another go at the parser need to simplify the process 
2483			 
2483			forthparse: 
2483			 
2483			; 
2483			; line parse: 
2483			;       parse raw input buffer 
2483			;       tokenise the words 
2483			;       malloc new copy (for looping etc) 
2483			;       copy to malloc + current pc in line to start of string and add line term 
2483			;       save on new rsp 
2483			; 
2483			 
2483			; hl to point to the line to tokenise 
2483			 
2483			;	push hl 
2483 22 f7 f3			ld (os_tok_ptr), hl  ; save ptr to string 
2486			 
2486			;	ld a,0		; string term on input 
2486			;	call strlent 
2486			 
2486			;	ld (os_tok_len), hl	 ; save string length 
2486			 
2486			;if DEBUG_FORTH_TOK 
2486			;	ex de,hl		 
2486			;endif 
2486			 
2486			;	pop hl 		; get back string pointer 
2486			 
2486			if DEBUG_FORTH_TOK 
2486						DMARK "TOK" 
2486				CALLMONITOR 
2486			endif 
2486 7e			.ptoken2:    ld a,(hl) 
2487 23				inc hl 
2488 fe 7f			cp FORTH_END_BUFFER 
248a 28 29			jr z, .ptokendone2 
248c fe 00			cp 0 
248e 28 25			jr z, .ptokendone2 
2490 fe 22			cp '"' 
2492 28 0b			jr z, .ptokenstr2     ; will want to skip until end of string delim 
2494 fe 20			cp ' ' 
2496 20 ee			jr nz,  .ptoken2 
2498			 
2498			; TODO consume comments held between ( and ) 
2498			 
2498				; we have a space so change to zero term for dict match later 
2498 2b				dec hl 
2499 3e 00			ld a,0 
249b 77				ld (hl), a 
249c 23				inc hl 
249d 18 e7			jr .ptoken2 
249f				 
249f			 
249f			.ptokenstr2: 
249f				; skip all white space until either eol (because forgot to term) or end double quote 
249f			        ;   if double quotes spotted ensure to skip any space sep until matched doble quote 
249f				;inc hl ; skip current double quote 
249f 7e				ld a,(hl) 
24a0 23				inc hl 
24a1 fe 22			cp '"' 
24a3 28 e1			jr z, .ptoken2 
24a5 fe 7f			cp FORTH_END_BUFFER 
24a7 28 0c			jr z, .ptokendone2 
24a9 fe 00			cp 0 
24ab 28 08			jr z, .ptokendone2 
24ad fe 20			cp ' ' 
24af 28 02			jr z, .ptmp2 
24b1 18 ec			jr .ptokenstr2 
24b3			 
24b3			.ptmp2:	; we have a space so change to zero term for dict match later 
24b3				;dec hl 
24b3				;ld a,"-"	; TODO remove this when working 
24b3				;ld (hl), a 
24b3				;inc hl 
24b3 18 ea			jr .ptokenstr2 
24b5			 
24b5			.ptokendone2: 
24b5				;inc hl 
24b5 3e 7f			ld a, FORTH_END_BUFFER 
24b7 77				ld (hl),a 
24b8			;	inc hl 
24b8			;	ld a, '!' 
24b8			;	ld (hl),a 
24b8			 
24b8 2a f7 f3			ld hl,(os_tok_ptr) 
24bb			         
24bb			if DEBUG_FORTH_TOK 
24bb						DMARK "TK1" 
24bb				CALLMONITOR 
24bb			endif 
24bb			 
24bb				; push exec string to top of return stack 
24bb				FORTH_RSP_NEXT 
24bb cd ef 1f			call macro_forth_rsp_next 
24be				endm 
# End of macro FORTH_RSP_NEXT
24be c9				ret 
24bf			 
24bf			; 
24bf			;	; malloc size + buffer pointer + if is loop flag 
24bf			;	ld hl,(os_tok_len) 		 ; get string length 
24bf			; 
24bf			;	ld a,l 
24bf			; 
24bf			;	cp 0			; we dont want to use a null string 
24bf			;	ret z 
24bf			; 
24bf			;;	add 3    ; prefix malloc with buffer for current word ptr 
24bf			; 
24bf			;	add 5     ; TODO when certain not over writing memory remove 
24bf			; 
24bf			;		 
24bf			; 
24bf			;if DEBUG_FORTH_TOK 
24bf			;			DMARK "TKE" 
24bf			;	CALLMONITOR 
24bf			;endif 
24bf			; 
24bf			;	ld l,a 
24bf			;	ld h,0 
24bf			;;	push hl   ; save required space for the copy later 
24bf			;	call malloc 
24bf			;if DEBUG_FORTH_TOK 
24bf			;			DMARK "TKM" 
24bf			;	CALLMONITOR 
24bf			;endif 
24bf			;	if DEBUG_FORTH_MALLOC_GUARD 
24bf			;		push af 
24bf			;		call ishlzero 
24bf			;;		ld a, l 
24bf			;;		add h 
24bf			;;		cp 0 
24bf			;		pop af 
24bf			;		 
24bf			;		call z,malloc_error 
24bf			;	endif 
24bf			;	ld (os_tok_malloc), hl	 ; save malloc ptr 
24bf			; 
24bf			; 
24bf			;if DEBUG_FORTH_TOK 
24bf			;			DMARK "TKR" 
24bf			;	CALLMONITOR 
24bf			;endif 
24bf			; 
24bf			;	FORTH_RSP_NEXT 
24bf			; 
24bf			;	;inc hl	 ; go past current buffer pointer 
24bf			;	;inc hl 
24bf			;	;inc hl   ; and past if loop flag 
24bf			;		; TODO Need to set flag  
24bf			; 
24bf			;	 
24bf			;	 
24bf			;	ex de,hl	; malloc is dest 
24bf			;	ld hl, (os_tok_len) 
24bf			;;	pop bc 
24bf			;	ld c, l                
24bf			;	ld b,0 
24bf			;	ld hl, (os_tok_ptr) 
24bf			; 
24bf			;if DEBUG_FORTH_TOK 
24bf			;			DMARK "TKT" 
24bf			;	CALLMONITOR 
24bf			;endif 
24bf			; 
24bf			;	; do str cpy 
24bf			; 
24bf			;	ldir      ; copy byte in hl to de 
24bf			; 
24bf			;	; set end of buffer to high bit on zero term and use that for end of buffer scan 
24bf			; 
24bf			;if DEBUG_FORTH_TOK 
24bf			; 
24bf			;			DMARK "TKY" 
24bf			;	CALLMONITOR 
24bf			;endif 
24bf			;	;ld a,0 
24bf			;	;ld a,FORTH_END_BUFFER 
24bf			;	ex de, hl 
24bf			;	;dec hl			 ; go back over the space delim at the end of word 
24bf			;	;ld (hl),a 
24bf			;	;inc hl                    ;  TODO double check this. Going past the end of string to make sure end of processing buffer is marked 
24bf			;	ld a,FORTH_END_BUFFER 
24bf			;	ld (hl),a 
24bf			;	inc hl 
24bf			;	ld a,FORTH_END_BUFFER 
24bf			;	ld (hl),a 
24bf			; 
24bf			;	; init the malloc area data 
24bf			;	; set pc for in current area 
24bf			;	;ld hl, (os_tok_malloc) 
24bf			;	;inc hl 
24bf			;	;inc hl 
24bf			;	;inc hl 
24bf			;	;ex de,hl 
24bf			;	;ld hl, (os_tok_malloc) 
24bf			;	;ld (hl),e 
24bf			;	;inc hl 
24bf			;	;ld (hl),d 
24bf			; 
24bf			; 
24bf			;	ld hl,(os_tok_malloc) 
24bf			;if DEBUG_FORTH_PARSE_KEY 
24bf			;			DMARK "TKU" 
24bf			;	CALLMONITOR 
24bf			;endif 
24bf			; 
24bf			;	ret 
24bf			 
24bf			forthexec: 
24bf			 
24bf			; line exec: 
24bf			; forth parser 
24bf			 
24bf			; 
24bf			;       get current exec line on rsp 
24bf			 
24bf				FORTH_RSP_TOS 
24bf cd 06 20			call macro_forth_rsp_tos 
24c2				endm 
# End of macro FORTH_RSP_TOS
24c2			 
24c2			;       restore current pc - hl points to malloc of data 
24c2			 
24c2				;ld e, (hl) 
24c2				;inc hl 
24c2				;ld d, (hl) 
24c2				;ex de,hl 
24c2			 
24c2			 
24c2			exec1: 
24c2 22 f7 f3			ld (os_tok_ptr), hl                 ; here move out of repeated saving in this tight loop 
24c5			 
24c5				; copy our PC to working vars  
24c5 22 75 f9			ld (cli_ptr), hl                    ; here 
24c8 22 73 f9			ld (cli_origptr), hl                ; here 
24cb			 
24cb 7e				ld a,(hl)                           ; here make hl be the ram ptr 
24cc fe 7f			cp FORTH_END_BUFFER 
24ce c8				ret z 
24cf			 
24cf				; skip any nulls 
24cf			 
24cf fe 00			cp 0 
24d1 20 03			jr nz, .execword 
24d3 23				inc hl 
24d4 18 ec			jr exec1 
24d6			 
24d6			 
24d6			.execword: 
24d6			 
24d6			 
24d6			 
24d6			if DEBUG_FORTH_PARSE_EXEC 
24d6						DMARK "KYQ" 
24d6				CALLMONITOR 
24d6			endif 
24d6			;       while at start of word: 
24d6			; get start of dict (in user area first) 
24d6			 
24d6 21 00 80		ld hl, baseram 
24d9			;ld hl, sysdict 
24d9 22 77 f9		ld (cli_nextword),hl                            ; here do we need to do this? 
24dc			;           match word at pc 
24dc			;           exec word 
24dc			;           or push to dsp 
24dc			;           forward to next token 
24dc			;           if line term pop rsp and exit 
24dc			;        
24dc			 
24dc			if DEBUG_FORTH_PARSE_EXEC 
24dc						DMARK "KYq" 
24dc				CALLMONITOR 
24dc			endif 
24dc			 
24dc			; 
24dc			; word comp 
24dc			;    get compiled byte and save it (need to decide if code is compiled or not for comparison) 
24dc			;    if byte is 0 then end parsing and report failed lookup (or could be something to add to stack etc) 
24dc			;    move to start of word  
24dc			;    compare word to cli_token 
24dc			 
24dc			.execpnword:	; HL at start of a word in the dictionary to check 
24dc			 
24dc 2a 77 f9			ld hl,(cli_nextword)                  ; here remove the need to store???? 
24df			 
24df cd 76 25			call forth_tok_next 
24e2			; tok next end here 
24e2 22 77 f9			ld (cli_nextword), hl     ; save for next check if no match on this word 
24e5 eb				ex de, hl 
24e6			 
24e6			 
24e6				; save the pointer of the current token - 1 to check against 
24e6				 
24e6 22 7b f9			ld (cli_token), hl   
24e9				; TODO maybe remove below save if no debug 
24e9				; save token string ptr for any debug later 
24e9 23				inc hl  
24ea 22 7d f9			ld (cli_origtoken), hl 
24ed 2b				dec hl 
24ee				; save pointer to the start of the next dictionay word 
24ee 7e				ld a,(hl)   ; get string length 
24ef 47				ld b,a 
24f0			.execpnwordinc:  
24f0 23				inc hl 
24f1 10 fd			djnz .execpnwordinc 
24f3 22 79 f9			ld (cli_execword), hl      ; save start of this words code 
24f6			 
24f6				; now check the word token against the string being parsed 
24f6			 
24f6 2a 7b f9			ld hl,(cli_token) 
24f9 23				inc hl     ; skip string length (use zero term instead to end) 
24fa				;ld (cli_token), hl 
24fa			 
24fa			.execpnchar:    ; compare char between token and string to parse 
24fa			 
24fa			 
24fa				;ld hl, (cli_token)     ; the dict word  
24fa ed 5b 75 f9		ld de, (cli_ptr)     ; cli to parse 
24fe			 
24fe			 
24fe			.execpncharl:    ; compare char between token and string to parse (loop) 
24fe			 
24fe 1a				ld a,(de) 
24ff cd 3b 13			call toUpper 		; make sure the input string matches case 
2502 be				cp (hl) 
2503			 
2503 c2 1c 25			jp nz, .execpnskipword	 ; no match so move to next word 
2506				 
2506			;    if same 
2506			;       scan for string terms 0 for token and 32 for input 
2506 46				ld b,(hl) 
2507 80				add b			 
2508 23				inc hl 
2509 13				inc de 
250a fe 00			cp 0			 ; add both chars together, if 32 then other must be 0 so at end of string we are parsing? 
250c							; TODO need to make sure last word in zero term string is accounted for 
250c 20 f0			jr nz, .execpncharl 		 ; not at end of strings yet 
250e			 
250e			 
250e				; at end of both strings so both are exact match 
250e			 
250e			;       skip ptr for next word 
250e			 
250e 2a 75 f9			ld hl,(cli_ptr) 	; at input string term 
2511 23				inc hl			 ; at next char 
2512 22 75 f9			ld (cli_ptr), hl     ; save for next round of the parser 
2515 22 73 f9			ld (cli_origptr), hl     ; save for any restart of current string ie a number or string to push to data stack 
2518				 
2518				 
2518			 
2518			 
2518			 
2518			;       exec code block 
2518			if DEBUG_FORTH_JP 
2518				call clear_display 
2518				call update_display 
2518				call delay1s 
2518				ld hl, (cli_execword)     ; save for next check if no match on this word 
2518				ld a,h 
2518				ld hl, os_word_scratch 
2518				call hexout 
2518				ld hl, (cli_execword)     ; save for next check if no match on this word 
2518				ld a,l 
2518				ld hl, os_word_scratch+2 
2518				call hexout 
2518				ld hl, os_word_scratch+4 
2518				ld a,0 
2518				ld (hl),a 
2518				ld de,os_word_scratch 
2518				call str_at_display 
2518					ld a, display_row_2 
2518					call str_at_display 
2518				ld de, (cli_origtoken) 
2518				ld a, display_row_1+10 
2518					call str_at_display 
2518			 
2518				ld a,display_row_1 
2518				ld de, .foundword 
2518				ld a, display_row_3 
2518				call str_at_display 
2518				call update_display 
2518				call delay1s 
2518				call delay1s 
2518				call delay1s 
2518			endif 
2518			 
2518			if DEBUG_FORTH_PARSE_EXEC 
2518						DMARK "KYj" 
2518			endif 
2518				; TODO save the word pointer in this exec 
2518			 
2518 2a 79 f9			ld hl,(cli_execword) 
251b e9				jp (hl) 
251c			 
251c			 
251c			;    if not same 
251c			;	scan for zero term 
251c			;	get ptr for next word 
251c			;	goto word comp 
251c			 
251c			.execpnskipword:	; get pointer to next word 
251c 2a 77 f9			ld hl,(cli_nextword) 
251f			 
251f 7e				ld a,(hl) 
2520 fe 00			cp WORD_SYS_END 
2522			;	cp 0 
2522 28 09			jr z, .execendofdict			 ; at end of words 
2524			 
2524			if DEBUG_FORTH_PARSE_EXEC 
2524						DMARK "KY4" 
2524			endif 
2524			if DEBUG_FORTH_PARSE_EXEC 
2524			 
2524				; see if disabled 
2524			 
2524			;	ld a, (os_view_disable) 
2524			;	cp '*' 
2524				ld a,(debug_vector) 
2524				cp $c9   ; RET 
2524				jr z, .noskip 
2524			 
2524			 
2524				ld de, .nowordfound 
2524				ld a, display_row_3 
2524				call str_at_display 
2524				call update_display 
2524				ld a, 100 
2524				call aDelayInMS 
2524				 
2524				if DEBUG_FORTH_PARSE_EXEC_SLOW 
2524					call delay250ms 
2524				endif 
2524			.noskip:  
2524			 
2524			endif	 
2524			 
2524 2a 73 f9			ld hl,(cli_origptr) 
2527 22 75 f9			ld (cli_ptr),hl 
252a			 
252a			if DEBUG_FORTH_PARSE_EXEC 
252a						DMARK "KY5" 
252a			endif 
252a c3 dc 24			jp .execpnword			; else go to next word 
252d			 
252d			.execendofdict:  
252d			 
252d			if DEBUG_FORTH_PARSE_EXEC 
252d						DMARK "KYe" 
252d			endif 
252d			if DEBUG_FORTH_PARSE_EXEC 
252d				; see if disabled 
252d			 
252d			;	ld a, (os_view_disable) 
252d			;	cp '*' 
252d				ld a,(debug_vector) 
252d				cp $c9   ; ret 
252d				jr z, .ispskip 
252d			 
252d				call clear_display 
252d				call update_display 
252d				call delay1s 
252d				ld de, (cli_origptr) 
252d				ld a, display_row_1 
252d				call str_at_display 
252d				 
252d				ld de, .enddict 
252d				ld a, display_row_3 
252d				call str_at_display 
252d				call update_display 
252d				ld a, 100 
252d				call aDelayInMS 
252d				if DEBUG_FORTH_PARSE_EXEC_SLOW 
252d				call delay1s 
252d				call delay1s 
252d				call delay1s 
252d				endif 
252d			.ispskip:  
252d				 
252d			endif	 
252d			 
252d			 
252d			 
252d				; if the word is not a keyword then must be a literal so push it to stack 
252d			 
252d			; push token to stack to end of word 
252d			 
252d				STACKFRAME ON $1efe $2f9f 
252d				if DEBUG_STACK_IMB 
252d					if ON 
252d						exx 
252d						ld de, $1efe 
252d						ld a, d 
252d						ld hl, curframe 
252d						call hexout 
252d						ld a, e 
252d						ld hl, curframe+2 
252d						call hexout 
252d						ld hl, $1efe 
252d						push hl 
252d						ld hl, $2f9f 
252d						push hl 
252d						exx 
252d					endif 
252d				endif 
252d			endm 
# End of macro STACKFRAME
252d			 
252d 2a f7 f3		ld hl,(os_tok_ptr) 
2530 cd b1 21		call forth_apush 
2533			 
2533				STACKFRAMECHK ON $1efe $2f9f 
2533				if DEBUG_STACK_IMB 
2533					if ON 
2533						exx 
2533						ld hl, $2f9f 
2533						pop de   ; $2f9f 
2533						call cmp16 
2533						jr nz, .spnosame 
2533						ld hl, $1efe 
2533						pop de   ; $1efe 
2533						call cmp16 
2533						jr z, .spfrsame 
2533						.spnosame: call showsperror 
2533						.spfrsame: nop 
2533						exx 
2533					endif 
2533				endif 
2533			endm 
# End of macro STACKFRAMECHK
2533			 
2533			execnext: 
2533			 
2533			if DEBUG_FORTH_PARSE_EXEC 
2533						DMARK "KY>" 
2533			endif 
2533			; move past token to next word 
2533			 
2533 2a f7 f3		ld hl, (os_tok_ptr) 
2536 3e 00		ld a, 0 
2538 01 ff 00		ld bc, 255     ; input buffer size 
253b ed b1		cpir 
253d			 
253d			if DEBUG_FORTH_PARSE_EXEC 
253d						DMARK "KY!" 
253d				CALLMONITOR 
253d			endif	 
253d			; TODO this might place hl on the null, so will need to forward on??? 
253d			;inc hl   ; see if this gets onto the next item 
253d			 
253d			 
253d			; TODO pass a pointer to the buffer to push 
253d			; TODO call function to push 
253d			 
253d			; look for end of input 
253d			 
253d			;inc hl 
253d			;ld a,(hl) 
253d			;cp FORTH_END_BUFFER 
253d			;ret z 
253d			 
253d			 
253d c3 c2 24		jp exec1 
2540			 
2540			 
2540			 
2540			 
2540			 
2540			 
2540			 
2540			 
2540			 
2540			findnexttok: 
2540			 
2540				; hl is pointer to move 
2540				; de is the token to locate 
2540			 
2540					if DEBUG_FORTH 
2540						DMARK "NTK" 
2540						CALLMONITOR 
2540					endif 
2540 d5				push de 
2541			 
2541			.fnt1:	 
2541				; find first char of token to locate 
2541			 
2541 1a				ld a, (de) 
2542 4f				ld c,a 
2543 7e				ld a,(hl) 
2544 cd 3b 13			call toUpper 
2547					if DEBUG_FORTH 
2547						DMARK "NT1" 
2547						CALLMONITOR 
2547					endif 
2547 b9				cp c 
2548			 
2548 28 03			jr z, .fnt2cmpmorefirst	 
254a			 
254a				; first char not found move to next char 
254a			 
254a 23				inc hl 
254b 18 f4			jr .fnt1 
254d			 
254d			.fnt2cmpmorefirst:	 
254d				; first char of token found.  
254d			 
254d e5				push hl     ; save start of token just in case it is the right one 
254e d9				exx 
254f e1				pop hl        ; save it to hl' 
2550 d9				exx 
2551			 
2551			 
2551			.fnt2cmpmore:	 
2551				; compare the rest 
2551				 
2551 23				inc hl 
2552 13				inc de 
2553				 
2553 1a				ld a, (de) 
2554 4f				ld c,a 
2555 7e				ld a,(hl) 
2556 cd 3b 13			call toUpper 
2559			 
2559					if DEBUG_FORTH 
2559						DMARK "NT2" 
2559						CALLMONITOR 
2559					endif 
2559				; c has the token to find char 
2559				; a has the mem to scan char 
2559			 
2559 b9				cp c 
255a 28 04			jr z,.fntmatch1 
255c			 
255c				; they are not the same 
255c			 
255c					if DEBUG_FORTH 
255c						DMARK "NT3" 
255c						CALLMONITOR 
255c					endif 
255c d1				pop de	; reset de token to look for 
255d d5				push de 
255e 18 e1			jr .fnt1 
2560				 
2560			.fntmatch1: 
2560			 
2560				; is the same char a null which means we might have a full hit? 
2560					if DEBUG_FORTH 
2560						DMARK "NT4" 
2560						CALLMONITOR 
2560					endif 
2560			 
2560 fe 00			cp 0 
2562 28 0b			jr z, .fntmatchyes 
2564			 
2564				; are we at the end of the token to find? 
2564			 
2564					if DEBUG_FORTH 
2564						DMARK "NT5" 
2564						CALLMONITOR 
2564					endif 
2564 3e 00			ld a, 0 
2566 b9				cp c 
2567			 
2567 c2 51 25			jp nz, .fnt2cmpmore    ; no, so keep going to a direct hit 
256a			 
256a					if DEBUG_FORTH 
256a						DMARK "NT6" 
256a						CALLMONITOR 
256a					endif 
256a				; token to find is exhusted but no match to stream 
256a			 
256a				; restore tok pointer and continue on 
256a d1				pop de 
256b d5				push de 
256c c3 41 25			jp .fnt1 
256f			 
256f			 
256f			.fntmatchyes: 
256f			 
256f				; hl now contains the end of the found token 
256f			 
256f				; get rid of saved token pointer to find 
256f			 
256f d1				pop de 
2570			 
2570					if DEBUG_FORTH 
2570						DMARK "NT9" 
2570						CALLMONITOR 
2570					endif 
2570			 
2570				; hl will be on the null term so forward on 
2570			 
2570				; get back the saved start of the token 
2570			 
2570 d9				exx 
2571 e5				push hl     ; save start of token just in case it is the right one 
2572 d9				exx 
2573 e1				pop hl        ; save it to hl 
2574			 
2574 c9				ret 
2575			 
2575			 
2575			; LIST needs to find a specific token   
2575			; FORGET needs to find a spefici token 
2575			 
2575			; SAVE needs to find all tokens by flag 
2575			; WORDS just needs to scan through all  by flag 
2575			; UWORDS needs to scan through all by flag 
2575			 
2575			 
2575			; given hl as pointer to start of dict look up string 
2575			; return hl as pointer to start of word block 
2575			; or 0 if not found 
2575			 
2575			forth_find_tok: 
2575 c9				ret 
2576			 
2576			; given hl as pointer to dict structure 
2576			; move to the next dict block structure 
2576			 
2576			forth_tok_next: 
2576				; hl now points to the address of the next word pointer  
2576				; TODO skip compiled symbol for now 
2576			;	push de 
2576 23				inc hl 
2577 5e				ld e, (hl) 
2578 23				inc hl 
2579 56				ld d, (hl) 
257a 23				inc hl 
257b			 
257b eb				ex de,hl 
257c			if DEBUG_FORTH_PARSE_NEXTWORD 
257c				push bc 
257c				ld bc, (cli_nextword) 
257c						DMARK "NXW" 
257c				CALLMONITOR 
257c				pop bc 
257c			endif 
257c			;	pop de	 
257c c9				ret 
257d			 
257d			 
257d			 
257d			; eof 
# End of file forth_parserv6.asm
257d				include "forth_wordsv4.asm" 
257d			 
257d			; the core word dictionary v4 
257d			; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Notation.html#Notation 
257d			 
257d			; this is a linked list for each of the system words used 
257d			; user defined words will follow the same format but will be in ram 
257d			 
257d			 
257d			; 
257d			; 
257d			; define linked list: 
257d			; 
257d			; 1. compiled byte op code 
257d			; 2. len of text word 
257d			; 3. text word 
257d			; 4. ptr to next dictionary word 
257d			; 5. asm, calls etc for the word 
257d			; 
257d			;  if 1 == 0 then last word in dict  
257d			;   
257d			; set the start of dictionary scanning to be in ram and the last word point to the system dict 
257d			;  
257d			;  
257d			; create basic standard set of words 
257d			; 
257d			;  
257d			; + - / * DUP EMIT . SWAP IF..THEN..ELSE DO..LOOP  : ; DROP  
257d			; 2DUP 2DROP 2SWAP  
257d			; @ C@ - get byte  
257d			; ! C! - store byte 
257d			; 0< true if less than zero 
257d			; 0= true if zero 
257d			; < >  
257d			; = true if same 
257d			; variables 
257d			 
257d			 
257d			; Hardware specific words I may need 
257d			; 
257d			; IN OUT  
257d			; calls to key util functions 
257d			; calls to hardward abstraction stuff 
257d			; easy control of frame buffers and lcd i/o 
257d			; keyboard  
257d			 
257d			 
257d			;DICT: macro 
257d			; op_code, len, word, next 
257d			;    word: 
257d			;    db op_code 
257d			;    ds word zero term 
257d			;    dw next 
257d			;    endm 
257d			 
257d			 
257d			 
257d			 
257d			; op code 1 is a flag for user define words which are to be handled differently 
257d			 
257d			 
257d			; 
257d			; 
257d			;    TODO on entry to a word this should be the expected environment 
257d			;    hl - tos value if number then held, if string this is the ptr 
257d			;    de -  
257d			 
257d			 
257d			; opcode ranges 
257d			; 0 - end of word dict 
257d			; 255 - user define words 
257d			 
257d			sysdict: 
257d			include "forth_opcodes.asm" 
257d			; op codes for forth keywords 
257d			 
257d			; Changing use of opcodes to flag is the word exists in compiled form or not.  
257d			; This provides a means to compile uwords if required for higher performance 
257d			; by avoiding the use of the keyword parser and just jumping directly to the code 
257d			; Actually there is already a flag for if the code exists as binary thinking about it... 
257d			 
257d			 
257d			 
257d			 
257d			 
257d			; free to use code 0  
257d				OPCODE_HEAP: equ  1 
257d				OPCODE_EXEC: equ 2 
257d				OPCODE_DUP: equ 3 
257d				OPCODE_SWAP: equ 4 
257d				OPCODE_COLN: equ 5 
257d				OPCODE_SCOLN: equ 6 
257d				OPCODE_DROP: equ 7 
257d				OPCODE_DUP2: equ 8 
257d				OPCODE_DROP2: equ 9 
257d				OPCODE_SWAP2: equ 10 
257d				OPCODE_AT: equ 11 
257d				OPCODE_CAT: equ 12 
257d				OPCODE_BANG: equ 13 
257d				OPCODE_CBANG: equ 14 
257d				OPCODE_SCALL: equ 15 
257d				OPCODE_DEPTH: equ 16 
257d				OPCODE_OVER: equ 17 
257d				OPCODE_PAUSE: equ 18 
257d				OPCODE_PAUSES: equ 19 
257d				OPCODE_ROT: equ 20 
257d			;free to reuse	OPCODE_WORDS: equ 21 
257d			        OPCODE_NOT: equ 21 
257d				OPCODE_UWORDS: equ 22 
257d				OPCODE_BP: equ 23 
257d				OPCODE_MONITOR: equ 24  
257d				OPCODE_MALLOC: equ 25 
257d				OPCODE_FREE: equ 26 
257d				OPCODE_LIST: equ 27 
257d				OPCODE_FORGET: equ 28 
257d				OPCODE_NOP: equ 29 
257d				OPCODE_COMO: equ 30 
257d				OPCODE_COMC: equ 31 
257d			;free to reuse	OPCODE_ENDCORE: equ 32 
257d				OPCODE_AFTERSOUND: equ 33 
257d				OPCODE_GP2: equ 34 
257d				OPCODE_GP3: equ 35 
257d				OPCODE_GP4: equ 36 
257d				OPCODE_SIN: equ 37 
257d				OPCODE_SOUT: equ 38 
257d				OPCODE_SPIO: equ 39 
257d				OPCODE_SPICEH: equ 40 
257d				OPCODE_SPIOb: equ 41 
257d				OPCODE_SPII: equ 42 
257d				OPCODE_SESEL: equ 43 
257d				OPCODE_CARTDEV: equ 44 
257d			; free to reuse	OPCODE_ENDDEVICE: equ 45 
257d				OPCODE_FB: equ 46 
257d				OPCODE_EMIT: equ 47 
257d				OPCODE_DOTH: equ 48 
257d				OPCODE_DOTF: equ 49 
257d				OPCODE_DOT: equ 50 
257d				OPCODE_CLS: equ 51 
257d				OPCODE_DRAW: equ 52 
257d				OPCODE_DUMP: equ 53 
257d				OPCODE_CDUMP: equ 54 
257d				OPCODE_DAT: equ 55 
257d				OPCODE_HOME: equ 56 
257d				OPCODE_SPACE: equ 57 
257d				OPCODE_SPACES: equ 58 
257d				OPCODE_SCROLL: equ 59 
257d				OPCODE_ATQ: equ 60 
257d				OPCODE_AUTODSP: equ 61 
257d				OPCODE_MENU: equ 62 
257d			; free to reuse	OPCODE_ENDDISPLAY: equ 63  
257d				OPCODE_THEN: equ 64 
257d				OPCODE_ELSE: equ 65 
257d				OPCODE_DO: equ 66 
257d				OPCODE_LOOP: equ 67 
257d				OPCODE_I: equ 68 
257d				OPCODE_DLOOP: equ 69  
257d				OPCODE_REPEAT: equ 70  
257d				OPCODE_UNTIL: equ 71 
257d				OPCODE_ENDFLOW: equ 72 
257d				OPCODE_WAITK: equ 73 
257d				OPCODE_ACCEPT: equ 74 
257d				OPCODE_EDIT: equ 75 
257d			;free to reuse	OPCODE_ENDKEY: equ 76 
257d				OPCODE_LZERO: equ 77 
257d				OPCODE_TZERO: equ 78 
257d				OPCODE_LESS: equ 79 
257d				OPCODE_GT: equ 80 
257d				OPCODE_EQUAL: equ 81  
257d			;free to reuse	OPCODE_ENDLOGIC: equ 82 
257d				OPCODE_NEG: equ 83 
257d				OPCODE_DIV: equ 84 
257d				OPCODE_MUL: equ 85 
257d				OPCODE_MIN: equ 86 
257d				OPCODE_MAX: equ 87 
257d				OPCODE_RND16: equ 88 
257d				OPCODE_RND8: equ 89 
257d				OPCODE_RND: equ 90 
257d			;free to reuse	OPCODE_ENDMATHS: equ 91  
257d				OPCODE_BYNAME: equ 92 
257d				OPCODE_DIR: equ 93 
257d				OPCODE_SAVE: equ 94 
257d				OPCODE_LOAD: equ 95 
257d				OPCODE_BSAVE: equ 96 
257d				OPCODE_BLOAD: equ 97 
257d				OPCODE_SEO: equ 98  
257d				OPCODE_SEI: equ 99 
257d				OPCODE_SFREE: equ 100 
257d				OPCODE_SIZE: equ 101 
257d				OPCODE_CREATE: equ 102 
257d				OPCODE_APPEND: equ 103 
257d				OPCODE_SDEL: equ 104 
257d				OPCODE_OPEN: equ 105 
257d				OPCODE_READ: equ 106 
257d				OPCODE_EOF: equ 106 
257d				OPCODE_FORMAT: equ 107 
257d				OPCODE_LABEL: equ 108 
257d				OPCODE_LABELS: equ 109 
257d			;free to reuse	OPCODE_ENDSTORAGE: equ 110  
257d				OPCODE_UPPER: equ 111 
257d				OPCODE_LOWER: equ 112 
257d				OPCODE_SUBSTR: equ 113 
257d				OPCODE_LEFT: equ 114 
257d				OPCODE_RIGHT: equ 115 
257d				OPCODE_STR2NUM: equ 116 
257d				OPCODE_NUM2STR: equ 117 
257d				OPCODE_CONCAT: equ 118 
257d				OPCODE_FIND: equ 119 
257d				OPCODE_LEN: equ 120 
257d				OPCODE_CHAR: equ 121 
257d			; free to reuse	OPCODE_STRLEN: equ 122 
257d			; free to reuse	OPCODE_ENDSTR: equ 123 
257d				OPCODE_V0S: equ 124 
257d				OPCODE_V0Q: equ 125 
257d				OPCODE_V1S: equ 126 
257d				OPCODE_V1Q: equ 127 
257d				OPCODE_V2S: equ 128 
257d				OPCODE_V2Q: equ 129 
257d				OPCODE_V3S: equ 130 
257d				OPCODE_V3Q: equ 131 
257d			;free to reuse	OPCODE_END: equ 132 
257d				OPCODE_ZDUP: equ 133 
257d			 
257d			; eof 
# End of file forth_opcodes.asm
257d			 
257d			include "forth_words_core.asm" 
257d			 
257d			; | ## Core Words 
257d			 
257d			;if MALLOC_4 
257d			 
257d			.HEAP: 
257d			CWHEAD .EXEC OPCODE_HEAP "HEAP" 4 WORD_FLAG_CODE 
257d 15				db WORD_SYS_CORE+OPCODE_HEAP             
257e bc 25			dw .EXEC            
2580 05				db 4 + 1 
2581 .. 00			db "HEAP",0              
2586				endm 
# End of macro CWHEAD
2586			; | HEAP ( -- u1 u2 )   Pushes u1 the current number of bytes in the heap and u2 the remaining bytes - Only present if using my MALLOC | DONE 
2586			; | | u1 - Current number of bytes in the heap 
2586			; | | u2 - Remaining bytes left on the heap 
2586			; | |  
2586			; | | The heap is used for storing user defined words as well as any values pushed to stack. 
2586			 
2586			 
2586				if DEBUG_FORTH_WORDS_KEY 
2586					DMARK "HEP" 
2586 f5				push af  
2587 3a 9b 25			ld a, (.dmark)  
258a 32 a0 fd			ld (debug_mark),a  
258d 3a 9c 25			ld a, (.dmark+1)  
2590 32 a1 fd			ld (debug_mark+1),a  
2593 3a 9d 25			ld a, (.dmark+2)  
2596 32 a2 fd			ld (debug_mark+2),a  
2599 18 03			jr .pastdmark  
259b ..			.dmark: db "HEP"  
259e f1			.pastdmark: pop af  
259f			endm  
# End of macro DMARK
259f					CALLMONITOR 
259f cd aa fd			call debug_vector  
25a2				endm  
# End of macro CALLMONITOR
25a2				endif 
25a2 2a 0a 80			ld hl, (free_list )      
25a5 11 0e 80			ld de, heap_start 
25a8			 
25a8 ed 52			sbc hl, de  
25aa			 
25aa cd 48 20			call forth_push_numhl 
25ad			 
25ad			 
25ad ed 5b 0a 80		ld de, (free_list )      
25b1 21 d1 f0			ld hl, heap_end 
25b4			 
25b4 ed 52			sbc hl, de 
25b6			 
25b6 cd 48 20			call forth_push_numhl 
25b9				 
25b9			 
25b9				 
25b9			 
25b9			 
25b9			 
25b9				NEXTW 
25b9 c3 39 24			jp macro_next 
25bc				endm 
# End of macro NEXTW
25bc			;endif 
25bc			 
25bc			.EXEC: 
25bc			;	CWHEAD .STKEXEC OPCODE_EXEC "EXEC" 4 WORD_FLAG_CODE 
25bc			;; > EXEC ( u -- )    Execs the string on TOS as a FORTH expression > CRASHES ON NEXTW 
25bc			;; > > u - A qutoed string which can consist of any valid Forth expression excluding : defintions (use LOAD instead) 
25bc			;; > > 
25bc			;; > >   
25bc			;	STACKFRAME OFF $5efe $5f9f 
25bc			; 
25bc			;		if DEBUG_FORTH_WORDS_KEY 
25bc			;			DMARK "EXE" 
25bc			;			CALLMONITOR 
25bc			;		endif 
25bc			; 
25bc			;	FORTH_DSP_VALUEHL 
25bc			; 
25bc			;	FORTH_DSP_POP 
25bc			; 
25bc			;		if DEBUG_FORTH_WORDS 
25bc			;			DMARK "EX1" 
25bc			;			CALLMONITOR 
25bc			;		endif 
25bc			;;	ld e,(hl) 
25bc			;;	inc hl 
25bc			;;	ld d,(hl) 
25bc			;;	ex de,hl 
25bc			; 
25bc			;;		if DEBUG_FORTH_WORDS 
25bc			;;			DMARK "EX2" 
25bc			;;			CALLMONITOR 
25bc			;;		endif 
25bc			;	push hl 
25bc			; 
25bc			;	;ld a, 0 
25bc			;	;ld a, FORTH_END_BUFFER 
25bc			;	call strlenz 
25bc			;	inc hl   ; include zero term to copy 
25bc			;	inc hl   ; include term 
25bc			;	inc hl   ; include term 
25bc			;	ld b,0 
25bc			;	ld c,l 
25bc			;	pop hl 
25bc			;	ld de, execscratch 
25bc			;		if DEBUG_FORTH_WORDS 
25bc			;			DMARK "EX3" 
25bc			;			CALLMONITOR 
25bc			;		endif 
25bc			;	ldir 
25bc			; 
25bc			; 
25bc			;	ld hl, execscratch 
25bc			; 
25bc			;		if DEBUG_FORTH_WORDS 
25bc			;			DMARK "EXe" 
25bc			;			CALLMONITOR 
25bc			;		endif 
25bc			; 
25bc			;	call forthparse 
25bc			;	call forthexec 
25bc			;;	call forthexec_cleanup 
25bc			;;	call forthparse 
25bc			;;	call forthexec 
25bc			; 
25bc			;	STACKFRAMECHK OFF $5efe $5f9f 
25bc			; 
25bc			;	; an immediate word so no need to process any more words 
25bc			;	ret 
25bc			;	NEXTW 
25bc			 
25bc			; dead code - old version  
25bc			;	FORTH_RSP_NEXT 
25bc			 
25bc			;  
25bc			;	ld bc,(cli_ptr)   ; move to next token to parse in the input stream 
25bc			;	ld de,(cli_origptr)   ; move to next token to parse in the input stream 
25bc			;	ld hl,(os_tok_ptr)   ; move to next token to parse in the input stream 
25bc			;	push hl 
25bc			;	push de 
25bc			;	push bc 
25bc			; 
25bc			; 
25bc			;		if DEBUG_FORTH_WORDS_KEY 
25bc			;			DMARK "EXR" 
25bc			;			CALLMONITOR 
25bc			;		endif 
25bc			; 
25bc			; 
25bc			; 
25bc			;	;v5 FORTH_DSP_VALUE 
25bc			;	FORTH_DSP_VALUEHL 
25bc			; 
25bc			;	; TODO do string type checks 
25bc			; 
25bc			;;v5	inc hl   ; skip type 
25bc			; 
25bc			;	push hl  ; source code  
25bc			;		if DEBUG_FORTH_WORDS 
25bc			;			DMARK "EX1" 
25bc			;			CALLMONITOR 
25bc			;		endif 
25bc			;	ld a, 0 
25bc			;	call strlent 
25bc			; 
25bc			;	inc hl 
25bc			;	inc hl 
25bc			;	inc hl 
25bc			;	inc hl 
25bc			; 
25bc			;	push hl    ; size 
25bc			; 
25bc			;		if DEBUG_FORTH_WORDS 
25bc			;			DMARK "EX2" 
25bc			;			CALLMONITOR 
25bc			;		endif 
25bc			;	call malloc 
25bc			; 
25bc			;	ex de, hl    ; de now contains malloc area 
25bc			;	pop bc   	; get byte count 
25bc			;	pop hl      ; get string to copy 
25bc			; 
25bc			;	push de     ; save malloc for free later 
25bc			; 
25bc			;		if DEBUG_FORTH_WORDS 
25bc			;			DMARK "EX3" 
25bc			;			CALLMONITOR 
25bc			;		endif 
25bc			;	ldir       ; duplicate string 
25bc			; 
25bc			;	; at the end of the string so go back the three extra spaces and fill in with extra terms 
25bc			;	 
25bc			;	; TODO fix the parse would be better than this...  
25bc			;	ex de, hl 
25bc			;	dec hl 
25bc			;	ld a, 0 
25bc			;	ld (hl), a 
25bc			;	dec hl 
25bc			;	ld a, ' ' 
25bc			;	ld (hl), a 
25bc			;	dec hl 
25bc			;	ld (hl), a 
25bc			; 
25bc			;	dec hl 
25bc			;	ld (hl), a 
25bc			; 
25bc			; 
25bc			;	FORTH_DSP_POP  
25bc			; 
25bc			;	pop hl     
25bc			;	push hl    ; save malloc area 
25bc			; 
25bc			;		if DEBUG_FORTH_WORDS 
25bc			;			DMARK "EX4" 
25bc			;			CALLMONITOR 
25bc			;		endif 
25bc			; 
25bc			;	call forthparse 
25bc			;	call forthexec 
25bc			;	 
25bc			;	pop hl 
25bc			;	if DEBUG_FORTH_WORDS 
25bc			;		DMARK "EX5" 
25bc			;		CALLMONITOR 
25bc			;	endif 
25bc			; 
25bc			;	if FORTH_ENABLE_FREE 
25bc			;	call free 
25bc			;	endif 
25bc			; 
25bc			;	if DEBUG_FORTH_WORDS 
25bc			;		DMARK "EX6" 
25bc			;		CALLMONITOR 
25bc			;	endif 
25bc			; 
25bc			;	pop bc 
25bc			;	pop de 
25bc			;	pop hl 
25bc			;;	FORTH_RSP_POP	  
25bc			;	ld (cli_ptr),bc   ; move to next token to parse in the input stream 
25bc			;	ld (cli_origptr),de   ; move to next token to parse in the input stream 
25bc			;	ld (os_tok_ptr),hl   ; move to next token to parse in the input stream 
25bc			; 
25bc			;	if DEBUG_FORTH_WORDS 
25bc			;		DMARK "EX7" 
25bc			;		CALLMONITOR 
25bc			;	endif 
25bc			;	NEXTW 
25bc			 
25bc			;.STKEXEC: 
25bc			;	CWHEAD .ZDUP 43 "STKEXEC" 7 WORD_FLAG_CODE 
25bc			;; > STKEXEC ( u .. u c -- ) Taking c count of strings off of the stack the strings are evaluated as code > TO TEST 
25bc			; 
25bc			; 
25bc			;		if DEBUG_FORTH_WORDS_KEY 
25bc			;			DMARK "STX" 
25bc			;			CALLMONITOR 
25bc			;		endif 
25bc			; 
25bc			;	FORTH_DSP_VALUEHL 
25bc			; 
25bc			;	ld (store_tmp1), hl    ; count 
25bc			; 
25bc			;	FORTH_DSP_POP 
25bc			;.stkexec1: 
25bc			;	ld hl, (store_tmp1)   ; count 
25bc			;	ld a, 0 
25bc			;	cp l 
25bc			;	ret z 
25bc			; 
25bc			;	dec hl 
25bc			;	ld (store_tmp1), hl    ; count 
25bc			;	 
25bc			;	FORTH_DSP_VALUEHL 
25bc			;	push hl 
25bc			;	 
25bc			;		if DEBUG_FORTH_WORDS 
25bc			;			DMARK "EXp" 
25bc			;			CALLMONITOR 
25bc			;		endif 
25bc			;	FORTH_DSP_POP 
25bc			; 
25bc			;	call strlenz 
25bc			;	inc hl   ; include zero term to copy 
25bc			;	inc hl   ; include zero term to copy 
25bc			;	inc hl   ; include zero term to copy 
25bc			;	ld b,0 
25bc			;	ld c,l 
25bc			;	pop hl 
25bc			;	ld de, execscratch 
25bc			;		if DEBUG_FORTH_WORDS 
25bc			;			DMARK "EX3" 
25bc			;			CALLMONITOR 
25bc			;		endif 
25bc			;	ldir 
25bc			; 
25bc			; 
25bc			;	ld hl, execscratch 
25bc			; 
25bc			;		if DEBUG_FORTH_WORDS 
25bc			;			DMARK "EXP" 
25bc			;			CALLMONITOR 
25bc			;		endif 
25bc			; 
25bc			;	call forthparse 
25bc			;	ld hl, execscratch 
25bc			;		if DEBUG_FORTH_WORDS 
25bc			;			DMARK "EXx" 
25bc			;			CALLMONITOR 
25bc			;		endif 
25bc			;	call forthexec 
25bc			; 
25bc			;	jp .stkexec1 
25bc			; 
25bc			;	ret 
25bc			 
25bc			 
25bc			.DUP: 
25bc			CWHEAD .ZDUP OPCODE_DUP "DUP" 3 WORD_FLAG_CODE 
25bc 17				db WORD_SYS_CORE+OPCODE_DUP             
25bd 32 26			dw .ZDUP            
25bf 04				db 3 + 1 
25c0 .. 00			db "DUP",0              
25c4				endm 
# End of macro CWHEAD
25c4			; | DUP ( u -- u u )     Duplicate whatever item is on TOS | DONE 
25c4			 
25c4				if DEBUG_FORTH_WORDS_KEY 
25c4					DMARK "DUP" 
25c4 f5				push af  
25c5 3a d9 25			ld a, (.dmark)  
25c8 32 a0 fd			ld (debug_mark),a  
25cb 3a da 25			ld a, (.dmark+1)  
25ce 32 a1 fd			ld (debug_mark+1),a  
25d1 3a db 25			ld a, (.dmark+2)  
25d4 32 a2 fd			ld (debug_mark+2),a  
25d7 18 03			jr .pastdmark  
25d9 ..			.dmark: db "DUP"  
25dc f1			.pastdmark: pop af  
25dd			endm  
# End of macro DMARK
25dd					CALLMONITOR 
25dd cd aa fd			call debug_vector  
25e0				endm  
# End of macro CALLMONITOR
25e0				endif 
25e0			 
25e0				FORTH_DSP 
25e0 cd 13 22			call macro_forth_dsp 
25e3				endm 
# End of macro FORTH_DSP
25e3			 
25e3 7e				ld a, (HL) 
25e4 fe 01			cp DS_TYPE_STR 
25e6 20 25			jr nz, .dupinum 
25e8			 
25e8				; push another string 
25e8			 
25e8				FORTH_DSP_VALUEHL     		 
25e8 cd 4d 22			call macro_dsp_valuehl 
25eb				endm 
# End of macro FORTH_DSP_VALUEHL
25eb			 
25eb			if DEBUG_FORTH_WORDS 
25eb				DMARK "DUs" 
25eb f5				push af  
25ec 3a 00 26			ld a, (.dmark)  
25ef 32 a0 fd			ld (debug_mark),a  
25f2 3a 01 26			ld a, (.dmark+1)  
25f5 32 a1 fd			ld (debug_mark+1),a  
25f8 3a 02 26			ld a, (.dmark+2)  
25fb 32 a2 fd			ld (debug_mark+2),a  
25fe 18 03			jr .pastdmark  
2600 ..			.dmark: db "DUs"  
2603 f1			.pastdmark: pop af  
2604			endm  
# End of macro DMARK
2604				CALLMONITOR 
2604 cd aa fd			call debug_vector  
2607				endm  
# End of macro CALLMONITOR
2607			endif 
2607 cd b6 20			call forth_push_str 
260a			 
260a				NEXTW 
260a c3 39 24			jp macro_next 
260d				endm 
# End of macro NEXTW
260d			 
260d			 
260d			.dupinum: 
260d				 
260d			 
260d			 
260d				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
260d cd 4d 22			call macro_dsp_valuehl 
2610				endm 
# End of macro FORTH_DSP_VALUEHL
2610			 
2610			; TODO add floating point number detection 
2610			 
2610			if DEBUG_FORTH_WORDS 
2610				DMARK "DUi" 
2610 f5				push af  
2611 3a 25 26			ld a, (.dmark)  
2614 32 a0 fd			ld (debug_mark),a  
2617 3a 26 26			ld a, (.dmark+1)  
261a 32 a1 fd			ld (debug_mark+1),a  
261d 3a 27 26			ld a, (.dmark+2)  
2620 32 a2 fd			ld (debug_mark+2),a  
2623 18 03			jr .pastdmark  
2625 ..			.dmark: db "DUi"  
2628 f1			.pastdmark: pop af  
2629			endm  
# End of macro DMARK
2629				CALLMONITOR 
2629 cd aa fd			call debug_vector  
262c				endm  
# End of macro CALLMONITOR
262c			endif 
262c			 
262c cd 48 20			call forth_push_numhl 
262f				NEXTW 
262f c3 39 24			jp macro_next 
2632				endm 
# End of macro NEXTW
2632			.ZDUP: 
2632			CWHEAD .SWAP OPCODE_ZDUP "?DUP" 4 WORD_FLAG_CODE 
2632 99				db WORD_SYS_CORE+OPCODE_ZDUP             
2633 6a 26			dw .SWAP            
2635 05				db 4 + 1 
2636 .. 00			db "?DUP",0              
263b				endm 
# End of macro CWHEAD
263b			; | ?DUP ( u -- u u )     Duplicate item on TOS if the item is non-zero (Only works for numerics) | DONE 
263b			 
263b				if DEBUG_FORTH_WORDS_KEY 
263b					DMARK "qDU" 
263b f5				push af  
263c 3a 50 26			ld a, (.dmark)  
263f 32 a0 fd			ld (debug_mark),a  
2642 3a 51 26			ld a, (.dmark+1)  
2645 32 a1 fd			ld (debug_mark+1),a  
2648 3a 52 26			ld a, (.dmark+2)  
264b 32 a2 fd			ld (debug_mark+2),a  
264e 18 03			jr .pastdmark  
2650 ..			.dmark: db "qDU"  
2653 f1			.pastdmark: pop af  
2654			endm  
# End of macro DMARK
2654					CALLMONITOR 
2654 cd aa fd			call debug_vector  
2657				endm  
# End of macro CALLMONITOR
2657				endif 
2657				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2657 cd 4d 22			call macro_dsp_valuehl 
265a				endm 
# End of macro FORTH_DSP_VALUEHL
265a			 
265a e5				push hl 
265b			 
265b				; is it a zero? 
265b			 
265b 3e 00			ld a, 0 
265d 84				add h 
265e 85				add l 
265f			 
265f e1				pop hl 
2660			 
2660 fe 00			cp 0 
2662 28 03			jr z, .dup2orig 
2664			 
2664			 
2664 cd 48 20			call forth_push_numhl 
2667			 
2667			 
2667			; TODO add floating point number detection 
2667			 
2667			.dup2orig: 
2667			 
2667				NEXTW 
2667 c3 39 24			jp macro_next 
266a				endm 
# End of macro NEXTW
266a			.SWAP: 
266a			CWHEAD .COLN OPCODE_SWAP "SWAP" 4 WORD_FLAG_CODE 
266a 18				db WORD_SYS_CORE+OPCODE_SWAP             
266b be 26			dw .COLN            
266d 05				db 4 + 1 
266e .. 00			db "SWAP",0              
2673				endm 
# End of macro CWHEAD
2673			; | SWAP ( w1 w2 -- w2 w1 )    Swap top two items on TOS | DONE 
2673				if DEBUG_FORTH_WORDS_KEY 
2673					DMARK "SWP" 
2673 f5				push af  
2674 3a 88 26			ld a, (.dmark)  
2677 32 a0 fd			ld (debug_mark),a  
267a 3a 89 26			ld a, (.dmark+1)  
267d 32 a1 fd			ld (debug_mark+1),a  
2680 3a 8a 26			ld a, (.dmark+2)  
2683 32 a2 fd			ld (debug_mark+2),a  
2686 18 03			jr .pastdmark  
2688 ..			.dmark: db "SWP"  
268b f1			.pastdmark: pop af  
268c			endm  
# End of macro DMARK
268c					CALLMONITOR 
268c cd aa fd			call debug_vector  
268f				endm  
# End of macro CALLMONITOR
268f				endif 
268f			 
268f			; DONE Use os stack swap memory 
268f			 
268f				FORTH_DSP_PTR 0     ; TOS 
268f 2a 23 f9			ld hl,(cli_data_sp) 
2692 11 00 00			ld de, 0 * 3 
2695 ed 52			sbc hl, de 
2697				endm 
# End of macro FORTH_DSP_PTR
2697 cd 85 23			call hltostack1 
269a			  
269a				FORTH_DSP_PTR 1     ; TOS 
269a 2a 23 f9			ld hl,(cli_data_sp) 
269d 11 03 00			ld de, 1 * 3 
26a0 ed 52			sbc hl, de 
26a2				endm 
# End of macro FORTH_DSP_PTR
26a2 cd 8b 23			call hltostack2 
26a5			 
26a5				FORTH_DSP_PTR 0     ; TOS 
26a5 2a 23 f9			ld hl,(cli_data_sp) 
26a8 11 00 00			ld de, 0 * 3 
26ab ed 52			sbc hl, de 
26ad				endm 
# End of macro FORTH_DSP_PTR
26ad cd a3 23			call hlfromstack2 
26b0			 
26b0				FORTH_DSP_PTR 1     ; TOS 
26b0 2a 23 f9			ld hl,(cli_data_sp) 
26b3 11 03 00			ld de, 1 * 3 
26b6 ed 52			sbc hl, de 
26b8				endm 
# End of macro FORTH_DSP_PTR
26b8 cd 9d 23			call hlfromstack1 
26bb			;	FORTH_DSP_VALUEHL 
26bb			;	push hl     ; w2 
26bb			; 
26bb			;	FORTH_DSP_POP 
26bb			; 
26bb			;	FORTH_DSP_VALUEHL 
26bb			; 
26bb			;	FORTH_DSP_POP 
26bb			; 
26bb			;	pop de     ; w2	, hl = w1 
26bb			; 
26bb			;	ex de, hl 
26bb			;	push de 
26bb			; 
26bb			;	call forth_push_numhl 
26bb			; 
26bb			;	pop hl 
26bb			; 
26bb			;	call forth_push_numhl 
26bb				 
26bb			 
26bb				NEXTW 
26bb c3 39 24			jp macro_next 
26be				endm 
# End of macro NEXTW
26be			.COLN: 
26be			CWHEAD .SCOLN OPCODE_COLN ":" 1 WORD_FLAG_CODE 
26be 19				db WORD_SYS_CORE+OPCODE_COLN             
26bf 4a 28			dw .SCOLN            
26c1 02				db 1 + 1 
26c2 .. 00			db ":",0              
26c4				endm 
# End of macro CWHEAD
26c4			; | : ( -- )         Create new word | DONE 
26c4			 
26c4				if DEBUG_FORTH_WORDS_KEY 
26c4					DMARK "CLN" 
26c4 f5				push af  
26c5 3a d9 26			ld a, (.dmark)  
26c8 32 a0 fd			ld (debug_mark),a  
26cb 3a da 26			ld a, (.dmark+1)  
26ce 32 a1 fd			ld (debug_mark+1),a  
26d1 3a db 26			ld a, (.dmark+2)  
26d4 32 a2 fd			ld (debug_mark+2),a  
26d7 18 03			jr .pastdmark  
26d9 ..			.dmark: db "CLN"  
26dc f1			.pastdmark: pop af  
26dd			endm  
# End of macro DMARK
26dd					CALLMONITOR 
26dd cd aa fd			call debug_vector  
26e0				endm  
# End of macro CALLMONITOR
26e0				endif 
26e0			STACKFRAME OFF $8efe $989f 
26e0				if DEBUG_STACK_IMB 
26e0					if OFF 
26e0						exx 
26e0						ld de, $8efe 
26e0						ld a, d 
26e0						ld hl, curframe 
26e0						call hexout 
26e0						ld a, e 
26e0						ld hl, curframe+2 
26e0						call hexout 
26e0						ld hl, $8efe 
26e0						push hl 
26e0						ld hl, $989f 
26e0						push hl 
26e0						exx 
26e0					endif 
26e0				endif 
26e0			endm 
# End of macro STACKFRAME
26e0			; get parser buffer length  of new word 
26e0			 
26e0			 
26e0			 
26e0				; move tok past this to start of name defintition 
26e0				; TODO get word to define 
26e0				; TODO Move past word token 
26e0				; TODO get length of string up to the ';' 
26e0			 
26e0 2a f7 f3		ld hl, (os_tok_ptr) 
26e3 23			inc hl 
26e4 23			inc hl 
26e5			 
26e5 3e 3b		ld a, ';' 
26e7 cd 4f 13		call strlent 
26ea			 
26ea 7d			ld a,l 
26eb 32 e6 f0		ld (os_new_parse_len), a 
26ee			 
26ee			 
26ee			if DEBUG_FORTH_UWORD 
26ee ed 5b f7 f3	ld de, (os_tok_ptr) 
26f2					DMARK ":01" 
26f2 f5				push af  
26f3 3a 07 27			ld a, (.dmark)  
26f6 32 a0 fd			ld (debug_mark),a  
26f9 3a 08 27			ld a, (.dmark+1)  
26fc 32 a1 fd			ld (debug_mark+1),a  
26ff 3a 09 27			ld a, (.dmark+2)  
2702 32 a2 fd			ld (debug_mark+2),a  
2705 18 03			jr .pastdmark  
2707 ..			.dmark: db ":01"  
270a f1			.pastdmark: pop af  
270b			endm  
# End of macro DMARK
270b			CALLMONITOR 
270b cd aa fd			call debug_vector  
270e				endm  
# End of macro CALLMONITOR
270e			endif 
270e			 
270e			; 
270e			;  new word memory layout: 
270e			;  
270e			;    : adg 6666 ;  
270e			; 
270e			;    db   1     ; user defined word  
270e 23			inc hl    
270f			;    dw   sysdict 
270f 23			inc hl 
2710 23			inc hl 
2711			;    db <word len>+1 (for null) 
2711 23			inc hl 
2712			;    db .... <word> 
2712			; 
2712			 
2712 23			inc hl    ; some extras for the word preamble before the above 
2713 23			inc hl 
2714 23			inc hl 
2715 23			inc hl 
2716 23			inc hl 
2717 23			inc hl 
2718 23			inc hl  
2719 23			inc hl 
271a 23			inc hl 
271b 23			inc hl 
271c 23			inc hl 
271d 23			inc hl 
271e 23			inc hl 
271f 23			inc hl     ; TODO how many do we really need?     maybe only 6 
2720			;       exec word buffer 
2720			;	<ptr word>   
2720 23			inc hl 
2721 23			inc hl 
2722			;       <word list><null term> 7F final term 
2722			 
2722			 
2722			if DEBUG_FORTH_UWORD 
2722					DMARK ":02" 
2722 f5				push af  
2723 3a 37 27			ld a, (.dmark)  
2726 32 a0 fd			ld (debug_mark),a  
2729 3a 38 27			ld a, (.dmark+1)  
272c 32 a1 fd			ld (debug_mark+1),a  
272f 3a 39 27			ld a, (.dmark+2)  
2732 32 a2 fd			ld (debug_mark+2),a  
2735 18 03			jr .pastdmark  
2737 ..			.dmark: db ":02"  
273a f1			.pastdmark: pop af  
273b			endm  
# End of macro DMARK
273b			CALLMONITOR 
273b cd aa fd			call debug_vector  
273e				endm  
# End of macro CALLMONITOR
273e			endif 
273e			 
273e			 
273e				; malloc the size 
273e			 
273e cd b9 13			call malloc 
2741 22 e8 f0			ld (os_new_malloc), hl     ; save malloc start 
2744			 
2744			;    db   1     ; user defined word  
2744 3e 01			ld a, WORD_SYS_UWORD  
2746 77				ld (hl), a 
2747			 
2747 23			inc hl    
2748			;    dw   sysdict 
2748 11 7d 25		ld de, sysdict       ; continue on with the scan to the system dict 
274b 73			ld (hl), e 
274c 23			inc hl 
274d 72			ld (hl), d 
274e 23			inc hl 
274f			 
274f			 
274f			;    Setup dict word 
274f			 
274f 23			inc hl 
2750 22 e2 f0		ld (os_new_work_ptr), hl     ; save start of dict word  
2753			 
2753			; 1. get length of dict word 
2753			 
2753			 
2753 2a f7 f3		ld hl, (os_tok_ptr) 
2756 23			inc hl 
2757 23			inc hl    ; position to start of dict word 
2758 3e 00		ld a, 0 
275a cd 4f 13		call strlent 
275d			 
275d			 
275d 23			inc hl    ; to include null??? 
275e			 
275e			; write length of dict word 
275e			 
275e ed 5b e2 f0	ld de, (os_new_work_ptr)   ; get dest for copy of word 
2762 1b			dec de 
2763 eb			ex de, hl 
2764 73			ld (hl), e 
2765 eb			ex de, hl 
2766			 
2766			 
2766			 
2766			; copy  
2766 4d			ld c, l 
2767 06 00		ld b, 0 
2769 ed 5b e2 f0	ld de, (os_new_work_ptr)   ; get dest for copy of word 
276d 2a f7 f3		ld hl, (os_tok_ptr) 
2770 23			inc hl 
2771 23			inc hl    ; position to start of dict word 
2772			 
2772			;	ldir       ; copy word - HL now is where we need to be for copy of the line 
2772			 
2772			; TODO need to convert word to upper case 
2772			 
2772			ucasetok:	 
2772 7e			ld a,(hl) 
2773 cd 3b 13		call toUpper 
2776 77			ld (hl),a 
2777 ed a0		ldi 
2779 f2 72 27		jp p, ucasetok 
277c			 
277c			 
277c			 
277c			; de now points to start of where the word body code should be placed 
277c ed 53 e2 f0	ld (os_new_work_ptr), de 
2780			; hl now points to the words to throw at forthexec which needs to be copied 
2780 22 e0 f0		ld (os_new_src_ptr), hl 
2783			 
2783			; TODO add 'call to forthexec' 
2783			 
2783			if DEBUG_FORTH_UWORD 
2783 c5			push bc 
2784 ed 4b e8 f0	ld bc, (os_new_malloc) 
2788					DMARK ":0x" 
2788 f5				push af  
2789 3a 9d 27			ld a, (.dmark)  
278c 32 a0 fd			ld (debug_mark),a  
278f 3a 9e 27			ld a, (.dmark+1)  
2792 32 a1 fd			ld (debug_mark+1),a  
2795 3a 9f 27			ld a, (.dmark+2)  
2798 32 a2 fd			ld (debug_mark+2),a  
279b 18 03			jr .pastdmark  
279d ..			.dmark: db ":0x"  
27a0 f1			.pastdmark: pop af  
27a1			endm  
# End of macro DMARK
27a1			CALLMONITOR 
27a1 cd aa fd			call debug_vector  
27a4				endm  
# End of macro CALLMONITOR
27a4 c1			pop bc 
27a5			endif 
27a5			 
27a5			 
27a5			; create word preamble which should be: 
27a5			 
27a5			; TODO possibly push the current os_tok_ptr to rsp and the current rsp will be the start of the string and not current pc???? 
27a5			 
27a5			;    ld hl, <word code> 
27a5			;    jp user_exec 
27a5			;    <word code bytes> 
27a5			 
27a5			 
27a5			;	inc de     ; TODO ??? or are we already past the word's null 
27a5 eb			ex de, hl 
27a6			 
27a6 36 21		ld (hl), 021h     ; TODO get bytes poke "ld hl, " 
27a8			 
27a8 23			inc hl 
27a9 22 dc f0		ld (os_new_exec_ptr),hl     ; save this location to poke with the address of the word buffer 
27ac 23			inc hl 
27ad			 
27ad 23			inc hl 
27ae 36 c3		ld (hl), 0c3h     ; TODO get bytes poke "jp xx  " 
27b0			 
27b0 01 4b 5f		ld bc, user_exec 
27b3 23			inc hl 
27b4 71			ld (hl), c     ; poke address of user_exec 
27b5 23			inc hl 
27b6 70			ld (hl), b     
27b7			; 
27b7			;	inc hl 
27b7			;	ld (hl), 0cdh     ; TODO get bytes poke "call  " 
27b7			; 
27b7			; 
27b7			;	ld bc, macro_forth_rsp_next 
27b7			;	inc hl 
27b7			;	ld (hl), c     ; poke address of FORTH_RSP_NEXT 
27b7			;	inc hl 
27b7			;	ld (hl), b     
27b7			; 
27b7			;	inc hl 
27b7			;	ld (hl), 0cdh     ; TODO get bytes poke "call  " 
27b7			; 
27b7			; 
27b7			;	inc hl 
27b7			;	ld bc, forthexec 
27b7			;	ld (hl), c     ; poke address of forthexec 
27b7			;	inc hl 
27b7			;	ld (hl), b      
27b7			; 
27b7			;	inc hl 
27b7			;	ld (hl), 0c3h     ; TODO get bytes poke "jp  " 
27b7			; 
27b7			;	ld bc, user_dict_next 
27b7			;	inc hl 
27b7			;	ld (hl), c     ; poke address of forthexec 
27b7			;	inc hl 
27b7			;	ld (hl), b      
27b7			 
27b7			; hl is now where we need to copy the word byte data to save this 
27b7			 
27b7 23			inc hl 
27b8 22 de f0		ld (os_new_exec), hl 
27bb			 
27bb			; copy definition 
27bb			 
27bb eb			ex de, hl 
27bc			;	inc de    ; TODO BUG It appears the exec of a uword requires pc to be set 
27bc			;	inc de    ; skip the PC for this parse 
27bc 3a e6 f0		ld a, (os_new_parse_len) 
27bf 4f			ld c, a 
27c0 06 00		ld b, 0 
27c2 ed b0		ldir		 ; copy defintion 
27c4			 
27c4			 
27c4			; poke the address of where the new word bytes live for forthexec 
27c4			 
27c4 2a dc f0		ld hl, (os_new_exec_ptr)     ; TODO this isnt correct 
27c7			 
27c7 ed 5b de f0	ld de, (os_new_exec)      
27cb			 
27cb 73			ld (hl), e 
27cc 23			inc hl 
27cd 72			ld (hl), d 
27ce			 
27ce				; TODO copy last user dict word next link to this word 
27ce				; TODO update last user dict word to point to this word 
27ce			; 
27ce			; hl f923 de 812a ; bc 811a 
27ce			 
27ce			if DEBUG_FORTH_UWORD 
27ce c5			push bc 
27cf ed 4b e8 f0	ld bc, (os_new_malloc) 
27d3					DMARK ":0A" 
27d3 f5				push af  
27d4 3a e8 27			ld a, (.dmark)  
27d7 32 a0 fd			ld (debug_mark),a  
27da 3a e9 27			ld a, (.dmark+1)  
27dd 32 a1 fd			ld (debug_mark+1),a  
27e0 3a ea 27			ld a, (.dmark+2)  
27e3 32 a2 fd			ld (debug_mark+2),a  
27e6 18 03			jr .pastdmark  
27e8 ..			.dmark: db ":0A"  
27eb f1			.pastdmark: pop af  
27ec			endm  
# End of macro DMARK
27ec			CALLMONITOR 
27ec cd aa fd			call debug_vector  
27ef				endm  
# End of macro CALLMONITOR
27ef c1			pop bc 
27f0			endif 
27f0			if DEBUG_FORTH_UWORD 
27f0 c5			push bc 
27f1 ed 4b e8 f0	ld bc, (os_new_malloc) 
27f5 03			inc bc 
27f6 03			inc bc 
27f7 03			inc bc 
27f8 03			inc bc 
27f9 03			inc bc 
27fa 03			inc bc 
27fb 03			inc bc 
27fc 03			inc bc 
27fd			 
27fd					DMARK ":0B" 
27fd f5				push af  
27fe 3a 12 28			ld a, (.dmark)  
2801 32 a0 fd			ld (debug_mark),a  
2804 3a 13 28			ld a, (.dmark+1)  
2807 32 a1 fd			ld (debug_mark+1),a  
280a 3a 14 28			ld a, (.dmark+2)  
280d 32 a2 fd			ld (debug_mark+2),a  
2810 18 03			jr .pastdmark  
2812 ..			.dmark: db ":0B"  
2815 f1			.pastdmark: pop af  
2816			endm  
# End of macro DMARK
2816			CALLMONITOR 
2816 cd aa fd			call debug_vector  
2819				endm  
# End of macro CALLMONITOR
2819 c1			pop bc 
281a			endif 
281a			 
281a			; update word dict linked list for new word 
281a			 
281a			 
281a 2a f3 f3		ld hl, (os_last_new_uword)		; get the start of the last added uword 
281d 23			inc hl     ; move to next work linked list ptr 
281e			 
281e ed 5b e8 f0	ld de, (os_new_malloc)		 ; new next word 
2822 73			ld (hl), e 
2823 23			inc hl 
2824 72			ld (hl), d 
2825			 
2825			if DEBUG_FORTH_UWORD 
2825 ed 4b f3 f3	ld bc, (os_last_new_uword)		; get the last word so we can check it worked in debug 
2829			endif 
2829			 
2829 ed 53 f3 f3	ld (os_last_new_uword), de      ; update last new uword ptr 
282d			 
282d			 
282d			if DEBUG_FORTH_UWORD 
282d					DMARK ":0+" 
282d f5				push af  
282e 3a 42 28			ld a, (.dmark)  
2831 32 a0 fd			ld (debug_mark),a  
2834 3a 43 28			ld a, (.dmark+1)  
2837 32 a1 fd			ld (debug_mark+1),a  
283a 3a 44 28			ld a, (.dmark+2)  
283d 32 a2 fd			ld (debug_mark+2),a  
2840 18 03			jr .pastdmark  
2842 ..			.dmark: db ":0+"  
2845 f1			.pastdmark: pop af  
2846			endm  
# End of macro DMARK
2846			CALLMONITOR 
2846 cd aa fd			call debug_vector  
2849				endm  
# End of macro CALLMONITOR
2849			endif 
2849			 
2849			STACKFRAMECHK OFF $8efe $989f 
2849				if DEBUG_STACK_IMB 
2849					if OFF 
2849						exx 
2849						ld hl, $989f 
2849						pop de   ; $989f 
2849						call cmp16 
2849						jr nz, .spnosame 
2849						ld hl, $8efe 
2849						pop de   ; $8efe 
2849						call cmp16 
2849						jr z, .spfrsame 
2849						.spnosame: call showsperror 
2849						.spfrsame: nop 
2849						exx 
2849					endif 
2849				endif 
2849			endm 
# End of macro STACKFRAMECHK
2849			 
2849 c9			ret    ; dont process any remaining parser tokens as they form new word 
284a			 
284a			 
284a			 
284a			 
284a			;		NEXT 
284a			.SCOLN: 
284a			;	CWHEAD .DROP 17 '\;' 1 WORD_FLAG_CODE 
284a 06			db OPCODE_SCOLN 
284b 96 28		dw .DROP 
284d 02			db 2 
284e .. 00		db ";",0           
2850			; | ; ( -- )     Terminate new word and return exec to previous exec level | DONE 
2850				if DEBUG_FORTH_WORDS_KEY 
2850					DMARK "SCN" 
2850 f5				push af  
2851 3a 65 28			ld a, (.dmark)  
2854 32 a0 fd			ld (debug_mark),a  
2857 3a 66 28			ld a, (.dmark+1)  
285a 32 a1 fd			ld (debug_mark+1),a  
285d 3a 67 28			ld a, (.dmark+2)  
2860 32 a2 fd			ld (debug_mark+2),a  
2863 18 03			jr .pastdmark  
2865 ..			.dmark: db "SCN"  
2868 f1			.pastdmark: pop af  
2869			endm  
# End of macro DMARK
2869					CALLMONITOR 
2869 cd aa fd			call debug_vector  
286c				endm  
# End of macro CALLMONITOR
286c				endif 
286c				FORTH_RSP_TOS 
286c cd 06 20			call macro_forth_rsp_tos 
286f				endm 
# End of macro FORTH_RSP_TOS
286f e5				push hl 
2870				FORTH_RSP_POP 
2870 cd 10 20			call macro_forth_rsp_pop 
2873				endm 
# End of macro FORTH_RSP_POP
2873 e1				pop hl 
2874			;		ex de,hl 
2874 22 f7 f3			ld (os_tok_ptr),hl 
2877			 
2877			if DEBUG_FORTH_UWORD 
2877					DMARK "SCL" 
2877 f5				push af  
2878 3a 8c 28			ld a, (.dmark)  
287b 32 a0 fd			ld (debug_mark),a  
287e 3a 8d 28			ld a, (.dmark+1)  
2881 32 a1 fd			ld (debug_mark+1),a  
2884 3a 8e 28			ld a, (.dmark+2)  
2887 32 a2 fd			ld (debug_mark+2),a  
288a 18 03			jr .pastdmark  
288c ..			.dmark: db "SCL"  
288f f1			.pastdmark: pop af  
2890			endm  
# End of macro DMARK
2890			CALLMONITOR 
2890 cd aa fd			call debug_vector  
2893				endm  
# End of macro CALLMONITOR
2893			endif 
2893				NEXTW 
2893 c3 39 24			jp macro_next 
2896				endm 
# End of macro NEXTW
2896			 
2896			.DROP: 
2896			CWHEAD .DUP2 OPCODE_DROP "DROP" 4 WORD_FLAG_CODE 
2896 1b				db WORD_SYS_CORE+OPCODE_DROP             
2897 c1 28			dw .DUP2            
2899 05				db 4 + 1 
289a .. 00			db "DROP",0              
289f				endm 
# End of macro CWHEAD
289f			; | DROP ( w -- )   drop the TOS item   | DONE 
289f				if DEBUG_FORTH_WORDS_KEY 
289f					DMARK "DRP" 
289f f5				push af  
28a0 3a b4 28			ld a, (.dmark)  
28a3 32 a0 fd			ld (debug_mark),a  
28a6 3a b5 28			ld a, (.dmark+1)  
28a9 32 a1 fd			ld (debug_mark+1),a  
28ac 3a b6 28			ld a, (.dmark+2)  
28af 32 a2 fd			ld (debug_mark+2),a  
28b2 18 03			jr .pastdmark  
28b4 ..			.dmark: db "DRP"  
28b7 f1			.pastdmark: pop af  
28b8			endm  
# End of macro DMARK
28b8					CALLMONITOR 
28b8 cd aa fd			call debug_vector  
28bb				endm  
# End of macro CALLMONITOR
28bb				endif 
28bb				FORTH_DSP_POP 
28bb cd 05 23			call macro_forth_dsp_pop 
28be				endm 
# End of macro FORTH_DSP_POP
28be				NEXTW 
28be c3 39 24			jp macro_next 
28c1				endm 
# End of macro NEXTW
28c1			.DUP2: 
28c1			CWHEAD .DROP2 OPCODE_DUP2 "2DUP" 4 WORD_FLAG_CODE 
28c1 1c				db WORD_SYS_CORE+OPCODE_DUP2             
28c2 06 29			dw .DROP2            
28c4 05				db 4 + 1 
28c5 .. 00			db "2DUP",0              
28ca				endm 
# End of macro CWHEAD
28ca			; | 2DUP ( w1 w2 -- w1 w2 w1 w2 ) Duplicate the top two items on TOS  (Only works for numerics) | DONE 
28ca				if DEBUG_FORTH_WORDS_KEY 
28ca					DMARK "2DU" 
28ca f5				push af  
28cb 3a df 28			ld a, (.dmark)  
28ce 32 a0 fd			ld (debug_mark),a  
28d1 3a e0 28			ld a, (.dmark+1)  
28d4 32 a1 fd			ld (debug_mark+1),a  
28d7 3a e1 28			ld a, (.dmark+2)  
28da 32 a2 fd			ld (debug_mark+2),a  
28dd 18 03			jr .pastdmark  
28df ..			.dmark: db "2DU"  
28e2 f1			.pastdmark: pop af  
28e3			endm  
# End of macro DMARK
28e3					CALLMONITOR 
28e3 cd aa fd			call debug_vector  
28e6				endm  
# End of macro CALLMONITOR
28e6				endif 
28e6				FORTH_DSP_VALUEHL 
28e6 cd 4d 22			call macro_dsp_valuehl 
28e9				endm 
# End of macro FORTH_DSP_VALUEHL
28e9 e5				push hl      ; 2 
28ea			 
28ea				FORTH_DSP_POP 
28ea cd 05 23			call macro_forth_dsp_pop 
28ed				endm 
# End of macro FORTH_DSP_POP
28ed				 
28ed				FORTH_DSP_VALUEHL 
28ed cd 4d 22			call macro_dsp_valuehl 
28f0				endm 
# End of macro FORTH_DSP_VALUEHL
28f0			;		push hl      ; 1 
28f0			 
28f0				FORTH_DSP_POP 
28f0 cd 05 23			call macro_forth_dsp_pop 
28f3				endm 
# End of macro FORTH_DSP_POP
28f3			 
28f3			;		pop hl       ; 1 
28f3 d1				pop de       ; 2 
28f4			 
28f4 cd 48 20			call forth_push_numhl 
28f7 eb				ex de, hl 
28f8 cd 48 20			call forth_push_numhl 
28fb			 
28fb				 
28fb eb				ex de, hl 
28fc			 
28fc cd 48 20			call forth_push_numhl 
28ff eb				ex de, hl 
2900 cd 48 20			call forth_push_numhl 
2903			 
2903			 
2903				NEXTW 
2903 c3 39 24			jp macro_next 
2906				endm 
# End of macro NEXTW
2906			.DROP2: 
2906			CWHEAD .PICK OPCODE_DROP2 "2DROP" 5 WORD_FLAG_CODE 
2906 1d				db WORD_SYS_CORE+OPCODE_DROP2             
2907 35 29			dw .PICK            
2909 06				db 5 + 1 
290a .. 00			db "2DROP",0              
2910				endm 
# End of macro CWHEAD
2910			; | 2DROP ( w w -- )    Double drop | DONE 
2910				if DEBUG_FORTH_WORDS_KEY 
2910					DMARK "2DR" 
2910 f5				push af  
2911 3a 25 29			ld a, (.dmark)  
2914 32 a0 fd			ld (debug_mark),a  
2917 3a 26 29			ld a, (.dmark+1)  
291a 32 a1 fd			ld (debug_mark+1),a  
291d 3a 27 29			ld a, (.dmark+2)  
2920 32 a2 fd			ld (debug_mark+2),a  
2923 18 03			jr .pastdmark  
2925 ..			.dmark: db "2DR"  
2928 f1			.pastdmark: pop af  
2929			endm  
# End of macro DMARK
2929					CALLMONITOR 
2929 cd aa fd			call debug_vector  
292c				endm  
# End of macro CALLMONITOR
292c				endif 
292c				FORTH_DSP_POP 
292c cd 05 23			call macro_forth_dsp_pop 
292f				endm 
# End of macro FORTH_DSP_POP
292f				FORTH_DSP_POP 
292f cd 05 23			call macro_forth_dsp_pop 
2932				endm 
# End of macro FORTH_DSP_POP
2932				NEXTW 
2932 c3 39 24			jp macro_next 
2935				endm 
# End of macro NEXTW
2935			.PICK: 
2935			CWHEAD .SWAP2 99 "PICK" 4 WORD_FLAG_CODE 
2935 77				db WORD_SYS_CORE+99             
2936 74 29			dw .SWAP2            
2938 05				db 4 + 1 
2939 .. 00			db "PICK",0              
293e				endm 
# End of macro CWHEAD
293e			; | PICK ( ux ... u x -- ux ... u n )    Replace x on stack with the item from position x on stack  | TODO 
293e				if DEBUG_FORTH_WORDS_KEY 
293e					DMARK "PIK" 
293e f5				push af  
293f 3a 53 29			ld a, (.dmark)  
2942 32 a0 fd			ld (debug_mark),a  
2945 3a 54 29			ld a, (.dmark+1)  
2948 32 a1 fd			ld (debug_mark+1),a  
294b 3a 55 29			ld a, (.dmark+2)  
294e 32 a2 fd			ld (debug_mark+2),a  
2951 18 03			jr .pastdmark  
2953 ..			.dmark: db "PIK"  
2956 f1			.pastdmark: pop af  
2957			endm  
# End of macro DMARK
2957					CALLMONITOR 
2957 cd aa fd			call debug_vector  
295a				endm  
# End of macro CALLMONITOR
295a				endif 
295a			 
295a				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
295a cd 4d 22			call macro_dsp_valuehl 
295d				endm 
# End of macro FORTH_DSP_VALUEHL
295d				 
295d				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
295d cd 05 23			call macro_forth_dsp_pop 
2960				endm 
# End of macro FORTH_DSP_POP
2960			 
2960				; init from TOS 
2960 45				ld b, l 
2961 21 23 f9			ld hl, cli_data_sp 
2964			.pkl: 
2964 2b				dec hl 
2965 2b				dec hl 
2966 2b				dec hl 
2967			 
2967 10 fb			djnz .pkl 
2969			 
2969				 
2969				; TODO do type check with correct push 
2969			 
2969 23				inc hl 
296a				;call loadwordinhl 
296a 5e				ld e, (hl) 
296b 23				inc hl 
296c 56				ld d, (hl) 
296d eb				ex de,hl 
296e cd 48 20			call forth_push_numhl 
2971			 
2971				NEXTW 
2971 c3 39 24			jp macro_next 
2974				endm 
# End of macro NEXTW
2974			.SWAP2: 
2974			CWHEAD .AT OPCODE_SWAP2 "2SWAP" 5 WORD_FLAG_CODE 
2974 1e				db WORD_SYS_CORE+OPCODE_SWAP2             
2975 9d 29			dw .AT            
2977 06				db 5 + 1 
2978 .. 00			db "2SWAP",0              
297e				endm 
# End of macro CWHEAD
297e			; | 2SWAP ( w1 w2 w3 w4 -- w3 w4 w1 w2 ) Swap top pair of items | TODO 
297e				if DEBUG_FORTH_WORDS_KEY 
297e					DMARK "2SW" 
297e f5				push af  
297f 3a 93 29			ld a, (.dmark)  
2982 32 a0 fd			ld (debug_mark),a  
2985 3a 94 29			ld a, (.dmark+1)  
2988 32 a1 fd			ld (debug_mark+1),a  
298b 3a 95 29			ld a, (.dmark+2)  
298e 32 a2 fd			ld (debug_mark+2),a  
2991 18 03			jr .pastdmark  
2993 ..			.dmark: db "2SW"  
2996 f1			.pastdmark: pop af  
2997			endm  
# End of macro DMARK
2997					CALLMONITOR 
2997 cd aa fd			call debug_vector  
299a				endm  
# End of macro CALLMONITOR
299a				endif 
299a			; TODO Use os stack swap memory 
299a				NEXTW 
299a c3 39 24			jp macro_next 
299d				endm 
# End of macro NEXTW
299d			.AT: 
299d			CWHEAD .CAT OPCODE_AT "@" 1 WORD_FLAG_CODE 
299d 1f				db WORD_SYS_CORE+OPCODE_AT             
299e cf 29			dw .CAT            
29a0 02				db 1 + 1 
29a1 .. 00			db "@",0              
29a3				endm 
# End of macro CWHEAD
29a3			; | @ ( w -- ) Push onto TOS byte stored at address   | DONE 
29a3			 
29a3				if DEBUG_FORTH_WORDS_KEY 
29a3					DMARK "AT." 
29a3 f5				push af  
29a4 3a b8 29			ld a, (.dmark)  
29a7 32 a0 fd			ld (debug_mark),a  
29aa 3a b9 29			ld a, (.dmark+1)  
29ad 32 a1 fd			ld (debug_mark+1),a  
29b0 3a ba 29			ld a, (.dmark+2)  
29b3 32 a2 fd			ld (debug_mark+2),a  
29b6 18 03			jr .pastdmark  
29b8 ..			.dmark: db "AT."  
29bb f1			.pastdmark: pop af  
29bc			endm  
# End of macro DMARK
29bc					CALLMONITOR 
29bc cd aa fd			call debug_vector  
29bf				endm  
# End of macro CALLMONITOR
29bf				endif 
29bf			.getbyteat:	 
29bf				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
29bf cd 4d 22			call macro_dsp_valuehl 
29c2				endm 
# End of macro FORTH_DSP_VALUEHL
29c2				 
29c2			;		push hl 
29c2			 
29c2				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
29c2 cd 05 23			call macro_forth_dsp_pop 
29c5				endm 
# End of macro FORTH_DSP_POP
29c5			 
29c5			;		pop hl 
29c5			 
29c5 7e				ld a, (hl) 
29c6			 
29c6 6f				ld l, a 
29c7 26 00			ld h, 0 
29c9 cd 48 20			call forth_push_numhl 
29cc			 
29cc				NEXTW 
29cc c3 39 24			jp macro_next 
29cf				endm 
# End of macro NEXTW
29cf			.CAT: 
29cf			CWHEAD .BANG OPCODE_CAT "C@" 2 WORD_FLAG_CODE 
29cf 20				db WORD_SYS_CORE+OPCODE_CAT             
29d0 f8 29			dw .BANG            
29d2 03				db 2 + 1 
29d3 .. 00			db "C@",0              
29d6				endm 
# End of macro CWHEAD
29d6			; | C@  ( w -- ) Push onto TOS byte stored at address   | DONE 
29d6				if DEBUG_FORTH_WORDS_KEY 
29d6					DMARK "CAA" 
29d6 f5				push af  
29d7 3a eb 29			ld a, (.dmark)  
29da 32 a0 fd			ld (debug_mark),a  
29dd 3a ec 29			ld a, (.dmark+1)  
29e0 32 a1 fd			ld (debug_mark+1),a  
29e3 3a ed 29			ld a, (.dmark+2)  
29e6 32 a2 fd			ld (debug_mark+2),a  
29e9 18 03			jr .pastdmark  
29eb ..			.dmark: db "CAA"  
29ee f1			.pastdmark: pop af  
29ef			endm  
# End of macro DMARK
29ef					CALLMONITOR 
29ef cd aa fd			call debug_vector  
29f2				endm  
# End of macro CALLMONITOR
29f2				endif 
29f2 c3 bf 29			jp .getbyteat 
29f5				NEXTW 
29f5 c3 39 24			jp macro_next 
29f8				endm 
# End of macro NEXTW
29f8			.BANG: 
29f8			CWHEAD .CBANG OPCODE_BANG "!" 1 WORD_FLAG_CODE 
29f8 21				db WORD_SYS_CORE+OPCODE_BANG             
29f9 2e 2a			dw .CBANG            
29fb 02				db 1 + 1 
29fc .. 00			db "!",0              
29fe				endm 
# End of macro CWHEAD
29fe			; | ! ( x w -- ) Store x at address w      | DONE 
29fe				if DEBUG_FORTH_WORDS_KEY 
29fe					DMARK "BNG" 
29fe f5				push af  
29ff 3a 13 2a			ld a, (.dmark)  
2a02 32 a0 fd			ld (debug_mark),a  
2a05 3a 14 2a			ld a, (.dmark+1)  
2a08 32 a1 fd			ld (debug_mark+1),a  
2a0b 3a 15 2a			ld a, (.dmark+2)  
2a0e 32 a2 fd			ld (debug_mark+2),a  
2a11 18 03			jr .pastdmark  
2a13 ..			.dmark: db "BNG"  
2a16 f1			.pastdmark: pop af  
2a17			endm  
# End of macro DMARK
2a17					CALLMONITOR 
2a17 cd aa fd			call debug_vector  
2a1a				endm  
# End of macro CALLMONITOR
2a1a				endif 
2a1a			 
2a1a			.storebyteat:		 
2a1a				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2a1a cd 4d 22			call macro_dsp_valuehl 
2a1d				endm 
# End of macro FORTH_DSP_VALUEHL
2a1d				 
2a1d e5				push hl 
2a1e			 
2a1e				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2a1e cd 05 23			call macro_forth_dsp_pop 
2a21				endm 
# End of macro FORTH_DSP_POP
2a21			 
2a21				; get byte to poke 
2a21			 
2a21				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2a21 cd 4d 22			call macro_dsp_valuehl 
2a24				endm 
# End of macro FORTH_DSP_VALUEHL
2a24 e5				push hl 
2a25			 
2a25			 
2a25				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2a25 cd 05 23			call macro_forth_dsp_pop 
2a28				endm 
# End of macro FORTH_DSP_POP
2a28			 
2a28			 
2a28 d1				pop de 
2a29 e1				pop hl 
2a2a			 
2a2a 73				ld (hl),e 
2a2b			 
2a2b			 
2a2b				NEXTW 
2a2b c3 39 24			jp macro_next 
2a2e				endm 
# End of macro NEXTW
2a2e			.CBANG: 
2a2e			CWHEAD .SCALL OPCODE_CBANG "C!" 2 WORD_FLAG_CODE 
2a2e 22				db WORD_SYS_CORE+OPCODE_CBANG             
2a2f 57 2a			dw .SCALL            
2a31 03				db 2 + 1 
2a32 .. 00			db "C!",0              
2a35				endm 
# End of macro CWHEAD
2a35			; | C!  ( x w -- ) Store x at address w  | DONE 
2a35				if DEBUG_FORTH_WORDS_KEY 
2a35					DMARK "CBA" 
2a35 f5				push af  
2a36 3a 4a 2a			ld a, (.dmark)  
2a39 32 a0 fd			ld (debug_mark),a  
2a3c 3a 4b 2a			ld a, (.dmark+1)  
2a3f 32 a1 fd			ld (debug_mark+1),a  
2a42 3a 4c 2a			ld a, (.dmark+2)  
2a45 32 a2 fd			ld (debug_mark+2),a  
2a48 18 03			jr .pastdmark  
2a4a ..			.dmark: db "CBA"  
2a4d f1			.pastdmark: pop af  
2a4e			endm  
# End of macro DMARK
2a4e					CALLMONITOR 
2a4e cd aa fd			call debug_vector  
2a51				endm  
# End of macro CALLMONITOR
2a51				endif 
2a51 c3 1a 2a			jp .storebyteat 
2a54				NEXTW 
2a54 c3 39 24			jp macro_next 
2a57				endm 
# End of macro NEXTW
2a57			.SCALL: 
2a57			CWHEAD .DEPTH OPCODE_SCALL "CALL" 4 WORD_FLAG_CODE 
2a57 23				db WORD_SYS_CORE+OPCODE_SCALL             
2a58 8b 2a			dw .DEPTH            
2a5a 05				db 4 + 1 
2a5b .. 00			db "CALL",0              
2a60				endm 
# End of macro CWHEAD
2a60			; | CALL ( w -- w  ) machine code call to address w  push the result of hl to stack | DONE 
2a60				if DEBUG_FORTH_WORDS_KEY 
2a60					DMARK "CLL" 
2a60 f5				push af  
2a61 3a 75 2a			ld a, (.dmark)  
2a64 32 a0 fd			ld (debug_mark),a  
2a67 3a 76 2a			ld a, (.dmark+1)  
2a6a 32 a1 fd			ld (debug_mark+1),a  
2a6d 3a 77 2a			ld a, (.dmark+2)  
2a70 32 a2 fd			ld (debug_mark+2),a  
2a73 18 03			jr .pastdmark  
2a75 ..			.dmark: db "CLL"  
2a78 f1			.pastdmark: pop af  
2a79			endm  
# End of macro DMARK
2a79					CALLMONITOR 
2a79 cd aa fd			call debug_vector  
2a7c				endm  
# End of macro CALLMONITOR
2a7c				endif 
2a7c			 
2a7c				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2a7c cd 4d 22			call macro_dsp_valuehl 
2a7f				endm 
# End of macro FORTH_DSP_VALUEHL
2a7f			 
2a7f			;		push hl 
2a7f			 
2a7f				; destroy value TOS 
2a7f			 
2a7f				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2a7f cd 05 23			call macro_forth_dsp_pop 
2a82				endm 
# End of macro FORTH_DSP_POP
2a82			 
2a82					 
2a82			;		pop hl 
2a82			 
2a82				; how to do a call with hl???? save SP? 
2a82 cd dd 23			call forth_call_hl 
2a85			 
2a85			 
2a85				; TODO push value back onto stack for another op etc 
2a85			 
2a85 cd 48 20			call forth_push_numhl 
2a88				NEXTW 
2a88 c3 39 24			jp macro_next 
2a8b				endm 
# End of macro NEXTW
2a8b			.DEPTH: 
2a8b			CWHEAD .OVER OPCODE_DEPTH "DEPTH" 5 WORD_FLAG_CODE 
2a8b 24				db WORD_SYS_CORE+OPCODE_DEPTH             
2a8c c8 2a			dw .OVER            
2a8e 06				db 5 + 1 
2a8f .. 00			db "DEPTH",0              
2a95				endm 
# End of macro CWHEAD
2a95			; | DEPTH ( -- u ) Push count of stack | DONE 
2a95				; take current TOS and remove from base value div by two to get count 
2a95				if DEBUG_FORTH_WORDS_KEY 
2a95					DMARK "DEP" 
2a95 f5				push af  
2a96 3a aa 2a			ld a, (.dmark)  
2a99 32 a0 fd			ld (debug_mark),a  
2a9c 3a ab 2a			ld a, (.dmark+1)  
2a9f 32 a1 fd			ld (debug_mark+1),a  
2aa2 3a ac 2a			ld a, (.dmark+2)  
2aa5 32 a2 fd			ld (debug_mark+2),a  
2aa8 18 03			jr .pastdmark  
2aaa ..			.dmark: db "DEP"  
2aad f1			.pastdmark: pop af  
2aae			endm  
# End of macro DMARK
2aae					CALLMONITOR 
2aae cd aa fd			call debug_vector  
2ab1				endm  
# End of macro CALLMONITOR
2ab1				endif 
2ab1			 
2ab1			 
2ab1 2a 23 f9		ld hl, (cli_data_sp) 
2ab4 11 5d f6		ld de, cli_data_stack 
2ab7 ed 52		sbc hl,de 
2ab9			 
2ab9			; div by size of stack item 
2ab9			 
2ab9 5d			ld e,l 
2aba 0e 03		ld c, 3 
2abc cd 6e 0f		call Div8 
2abf			 
2abf 6f			ld l,a 
2ac0 26 00		ld h,0 
2ac2			 
2ac2			;srl h 
2ac2			;rr l 
2ac2			 
2ac2 cd 48 20			call forth_push_numhl 
2ac5				NEXTW 
2ac5 c3 39 24			jp macro_next 
2ac8				endm 
# End of macro NEXTW
2ac8			.OVER: 
2ac8			CWHEAD .PAUSE 46 "OVER" 4 WORD_FLAG_CODE 
2ac8 42				db WORD_SYS_CORE+46             
2ac9 0f 2b			dw .PAUSE            
2acb 05				db 4 + 1 
2acc .. 00			db "OVER",0              
2ad1				endm 
# End of macro CWHEAD
2ad1			; | OVER ( n1 n2 -- n1 n2 n1 )  Copy one below TOS onto TOS | TOFIX 
2ad1				if DEBUG_FORTH_WORDS_KEY 
2ad1					DMARK "OVR" 
2ad1 f5				push af  
2ad2 3a e6 2a			ld a, (.dmark)  
2ad5 32 a0 fd			ld (debug_mark),a  
2ad8 3a e7 2a			ld a, (.dmark+1)  
2adb 32 a1 fd			ld (debug_mark+1),a  
2ade 3a e8 2a			ld a, (.dmark+2)  
2ae1 32 a2 fd			ld (debug_mark+2),a  
2ae4 18 03			jr .pastdmark  
2ae6 ..			.dmark: db "OVR"  
2ae9 f1			.pastdmark: pop af  
2aea			endm  
# End of macro DMARK
2aea					CALLMONITOR 
2aea cd aa fd			call debug_vector  
2aed				endm  
# End of macro CALLMONITOR
2aed				endif 
2aed			 
2aed			; TODO Use os stack swap memory 
2aed			 
2aed				; work out what type we are looking at 
2aed			 
2aed				FORTH_DSP_PTR 1 
2aed 2a 23 f9			ld hl,(cli_data_sp) 
2af0 11 03 00			ld de, 1 * 3 
2af3 ed 52			sbc hl, de 
2af5				endm 
# End of macro FORTH_DSP_PTR
2af5			 
2af5 7e				ld a, (hl) 
2af6				 
2af6 f5				push af 
2af7				; whatever the type lets get the pointer or word 
2af7 23				inc hl 
2af8			;; 
2af8			 
2af8				; type check now to decide on how to push  
2af8			 
2af8 cd bb 23			call loadwordinhl 
2afb f1				pop af 
2afc fe 01			cp DS_TYPE_STR 
2afe 28 06			jr z, .ovstr 
2b00			 
2b00				; we have a numeric so load the word and push 
2b00			;	ld e, (hl) 
2b00			;	inc hl 
2b00			;	ld d, (hl) 
2b00			;	ex de, hl 
2b00 cd 48 20			call forth_push_numhl 
2b03				NEXTW 
2b03 c3 39 24			jp macro_next 
2b06				endm 
# End of macro NEXTW
2b06			 
2b06			.ovstr: 
2b06				; ok, a string so get the pointer and push as a string 
2b06			 
2b06			;	call loadwordinhl 
2b06 cd b6 20			call forth_push_str 
2b09				NEXTW 
2b09 c3 39 24			jp macro_next 
2b0c				endm 
# End of macro NEXTW
2b0c			 
2b0c			;	FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2b0c			;	push hl    ; n2 
2b0c			;	FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2b0c			; 
2b0c			;	FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2b0c			;	push hl    ; n1 
2b0c			;	FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2b0c			; 
2b0c			;	pop de     ; n1 
2b0c			;	pop hl     ; n2 
2b0c			; 
2b0c			;	push de 
2b0c			;	push hl 
2b0c			;	push de 
2b0c			 
2b0c				; push back  
2b0c			 
2b0c			;	pop hl 
2b0c			;	call forth_push_numhl 
2b0c			;	pop hl 
2b0c			;	call forth_push_numhl 
2b0c			;	pop hl 
2b0c			;	call forth_push_numhl 
2b0c				NEXTW 
2b0c c3 39 24			jp macro_next 
2b0f				endm 
# End of macro NEXTW
2b0f			 
2b0f			.PAUSE: 
2b0f			CWHEAD .PAUSES 47 "PAUSEMS" 7 WORD_FLAG_CODE 
2b0f 43				db WORD_SYS_CORE+47             
2b10 44 2b			dw .PAUSES            
2b12 08				db 7 + 1 
2b13 .. 00			db "PAUSEMS",0              
2b1b				endm 
# End of macro CWHEAD
2b1b			; | PAUSEMS ( n -- )  Pause for n millisconds | DONE 
2b1b				if DEBUG_FORTH_WORDS_KEY 
2b1b					DMARK "PMS" 
2b1b f5				push af  
2b1c 3a 30 2b			ld a, (.dmark)  
2b1f 32 a0 fd			ld (debug_mark),a  
2b22 3a 31 2b			ld a, (.dmark+1)  
2b25 32 a1 fd			ld (debug_mark+1),a  
2b28 3a 32 2b			ld a, (.dmark+2)  
2b2b 32 a2 fd			ld (debug_mark+2),a  
2b2e 18 03			jr .pastdmark  
2b30 ..			.dmark: db "PMS"  
2b33 f1			.pastdmark: pop af  
2b34			endm  
# End of macro DMARK
2b34					CALLMONITOR 
2b34 cd aa fd			call debug_vector  
2b37				endm  
# End of macro CALLMONITOR
2b37				endif 
2b37				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2b37 cd 4d 22			call macro_dsp_valuehl 
2b3a				endm 
# End of macro FORTH_DSP_VALUEHL
2b3a			;		push hl    ; n2 
2b3a				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2b3a cd 05 23			call macro_forth_dsp_pop 
2b3d				endm 
# End of macro FORTH_DSP_POP
2b3d			;		pop hl 
2b3d			 
2b3d 7d				ld a, l 
2b3e cd d2 0c			call aDelayInMS 
2b41			       NEXTW 
2b41 c3 39 24			jp macro_next 
2b44				endm 
# End of macro NEXTW
2b44			.PAUSES:  
2b44			CWHEAD .ROT 48 "PAUSE" 5 WORD_FLAG_CODE 
2b44 44				db WORD_SYS_CORE+48             
2b45 b3 2b			dw .ROT            
2b47 06				db 5 + 1 
2b48 .. 00			db "PAUSE",0              
2b4e				endm 
# End of macro CWHEAD
2b4e			; | PAUSE ( n -- )  Pause for n seconds | DONE 
2b4e				if DEBUG_FORTH_WORDS_KEY 
2b4e					DMARK "PAU" 
2b4e f5				push af  
2b4f 3a 63 2b			ld a, (.dmark)  
2b52 32 a0 fd			ld (debug_mark),a  
2b55 3a 64 2b			ld a, (.dmark+1)  
2b58 32 a1 fd			ld (debug_mark+1),a  
2b5b 3a 65 2b			ld a, (.dmark+2)  
2b5e 32 a2 fd			ld (debug_mark+2),a  
2b61 18 03			jr .pastdmark  
2b63 ..			.dmark: db "PAU"  
2b66 f1			.pastdmark: pop af  
2b67			endm  
# End of macro DMARK
2b67					CALLMONITOR 
2b67 cd aa fd			call debug_vector  
2b6a				endm  
# End of macro CALLMONITOR
2b6a				endif 
2b6a				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2b6a cd 4d 22			call macro_dsp_valuehl 
2b6d				endm 
# End of macro FORTH_DSP_VALUEHL
2b6d			;		push hl    ; n2 
2b6d				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2b6d cd 05 23			call macro_forth_dsp_pop 
2b70				endm 
# End of macro FORTH_DSP_POP
2b70			;		pop hl 
2b70 45				ld b, l 
2b71				if DEBUG_FORTH_WORDS 
2b71					DMARK "PAU" 
2b71 f5				push af  
2b72 3a 86 2b			ld a, (.dmark)  
2b75 32 a0 fd			ld (debug_mark),a  
2b78 3a 87 2b			ld a, (.dmark+1)  
2b7b 32 a1 fd			ld (debug_mark+1),a  
2b7e 3a 88 2b			ld a, (.dmark+2)  
2b81 32 a2 fd			ld (debug_mark+2),a  
2b84 18 03			jr .pastdmark  
2b86 ..			.dmark: db "PAU"  
2b89 f1			.pastdmark: pop af  
2b8a			endm  
# End of macro DMARK
2b8a					CALLMONITOR 
2b8a cd aa fd			call debug_vector  
2b8d				endm  
# End of macro CALLMONITOR
2b8d				endif 
2b8d c5			.pauses1:	push bc 
2b8e cd ed 0c			call delay1s 
2b91 c1				pop bc 
2b92				if DEBUG_FORTH_WORDS 
2b92					DMARK "PA1" 
2b92 f5				push af  
2b93 3a a7 2b			ld a, (.dmark)  
2b96 32 a0 fd			ld (debug_mark),a  
2b99 3a a8 2b			ld a, (.dmark+1)  
2b9c 32 a1 fd			ld (debug_mark+1),a  
2b9f 3a a9 2b			ld a, (.dmark+2)  
2ba2 32 a2 fd			ld (debug_mark+2),a  
2ba5 18 03			jr .pastdmark  
2ba7 ..			.dmark: db "PA1"  
2baa f1			.pastdmark: pop af  
2bab			endm  
# End of macro DMARK
2bab					CALLMONITOR 
2bab cd aa fd			call debug_vector  
2bae				endm  
# End of macro CALLMONITOR
2bae				endif 
2bae 10 dd			djnz .pauses1 
2bb0			 
2bb0			       NEXTW 
2bb0 c3 39 24			jp macro_next 
2bb3				endm 
# End of macro NEXTW
2bb3			.ROT: 
2bb3			CWHEAD .UWORDS 49 "ROT" 3 WORD_FLAG_CODE 
2bb3 45				db WORD_SYS_CORE+49             
2bb4 1c 2c			dw .UWORDS            
2bb6 04				db 3 + 1 
2bb7 .. 00			db "ROT",0              
2bbb				endm 
# End of macro CWHEAD
2bbb			; | ROT ( u1 u2 u3 -- u2 u3 u1 ) Rotate top three items on stack | TOFIX 
2bbb				if DEBUG_FORTH_WORDS_KEY 
2bbb					DMARK "ROT" 
2bbb f5				push af  
2bbc 3a d0 2b			ld a, (.dmark)  
2bbf 32 a0 fd			ld (debug_mark),a  
2bc2 3a d1 2b			ld a, (.dmark+1)  
2bc5 32 a1 fd			ld (debug_mark+1),a  
2bc8 3a d2 2b			ld a, (.dmark+2)  
2bcb 32 a2 fd			ld (debug_mark+2),a  
2bce 18 03			jr .pastdmark  
2bd0 ..			.dmark: db "ROT"  
2bd3 f1			.pastdmark: pop af  
2bd4			endm  
# End of macro DMARK
2bd4					CALLMONITOR 
2bd4 cd aa fd			call debug_vector  
2bd7				endm  
# End of macro CALLMONITOR
2bd7				endif 
2bd7			 
2bd7			; DONE Use os stack swap memory 
2bd7			 
2bd7				FORTH_DSP_PTR 0     ; u3 
2bd7 2a 23 f9			ld hl,(cli_data_sp) 
2bda 11 00 00			ld de, 0 * 3 
2bdd ed 52			sbc hl, de 
2bdf				endm 
# End of macro FORTH_DSP_PTR
2bdf cd 85 23			call hltostack1     
2be2			  
2be2				FORTH_DSP_PTR 1     ; u2 
2be2 2a 23 f9			ld hl,(cli_data_sp) 
2be5 11 03 00			ld de, 1 * 3 
2be8 ed 52			sbc hl, de 
2bea				endm 
# End of macro FORTH_DSP_PTR
2bea cd 8b 23			call hltostack2      
2bed			 
2bed				FORTH_DSP_PTR 2     ; u1 
2bed 2a 23 f9			ld hl,(cli_data_sp) 
2bf0 11 06 00			ld de, 2 * 3 
2bf3 ed 52			sbc hl, de 
2bf5				endm 
# End of macro FORTH_DSP_PTR
2bf5 cd 91 23			call hltostack3 
2bf8			 
2bf8			 
2bf8				FORTH_DSP_PTR 0     ;  
2bf8 2a 23 f9			ld hl,(cli_data_sp) 
2bfb 11 00 00			ld de, 0 * 3 
2bfe ed 52			sbc hl, de 
2c00				endm 
# End of macro FORTH_DSP_PTR
2c00 cd a9 23			call hlfromstack3 
2c03			 
2c03				FORTH_DSP_PTR 1     ; TOS 
2c03 2a 23 f9			ld hl,(cli_data_sp) 
2c06 11 03 00			ld de, 1 * 3 
2c09 ed 52			sbc hl, de 
2c0b				endm 
# End of macro FORTH_DSP_PTR
2c0b cd 9d 23			call hlfromstack1 
2c0e			 
2c0e				FORTH_DSP_PTR 2     ; TOS 
2c0e 2a 23 f9			ld hl,(cli_data_sp) 
2c11 11 06 00			ld de, 2 * 3 
2c14 ed 52			sbc hl, de 
2c16				endm 
# End of macro FORTH_DSP_PTR
2c16 cd a3 23			call hlfromstack2 
2c19			 
2c19			 
2c19			;	FORTH_DSP_VALUEHL 
2c19			;	push hl    ; u3  
2c19			; 
2c19			;	FORTH_DSP_POP 
2c19			; 
2c19			;	FORTH_DSP_VALUEHL 
2c19			;	push hl     ; u2 
2c19			; 
2c19			;	FORTH_DSP_POP 
2c19			; 
2c19			;	FORTH_DSP_VALUEHL 
2c19			;	push hl     ; u1 
2c19			; 
2c19			;	FORTH_DSP_POP 
2c19			; 
2c19			;	pop bc      ; u1 
2c19			;	pop hl      ; u2 
2c19			;	pop de      ; u3 
2c19			; 
2c19			; 
2c19			;	push bc 
2c19			;	push de 
2c19			;	push hl 
2c19			; 
2c19			; 
2c19			;	pop hl 
2c19			;	call forth_push_numhl 
2c19			; 
2c19			;	pop hl 
2c19			;	call forth_push_numhl 
2c19			; 
2c19			;	pop hl 
2c19			;	call forth_push_numhl 
2c19				 
2c19			 
2c19			 
2c19			 
2c19			 
2c19			 
2c19			       NEXTW 
2c19 c3 39 24			jp macro_next 
2c1c				endm 
# End of macro NEXTW
2c1c			 
2c1c			.UWORDS: 
2c1c			CWHEAD .BP 60 "UWORDS" 6 WORD_FLAG_CODE 
2c1c 50				db WORD_SYS_CORE+60             
2c1d de 2c			dw .BP            
2c1f 07				db 6 + 1 
2c20 .. 00			db "UWORDS",0              
2c27				endm 
# End of macro CWHEAD
2c27			; | UWORDS (  -- s1 ... sn u )   List user word dict | DONE 
2c27			; | | After use the TOS will have a count of the number of user words that have been pushed to stack. 
2c27			; | | Following the count are the individual words. 
2c27			; | | 
2c27			; | | e.g. UWORDS 
2c27			; | | BOX DIRLIST 2 
2c27			; | |  
2c27			; | | Can be used to save the words to storage via: 
2c27			; | | UWORDS $01 DO $01 APPEND LOOP 
2c27			if DEBUG_FORTH_WORDS_KEY 
2c27				DMARK "UWR" 
2c27 f5				push af  
2c28 3a 3c 2c			ld a, (.dmark)  
2c2b 32 a0 fd			ld (debug_mark),a  
2c2e 3a 3d 2c			ld a, (.dmark+1)  
2c31 32 a1 fd			ld (debug_mark+1),a  
2c34 3a 3e 2c			ld a, (.dmark+2)  
2c37 32 a2 fd			ld (debug_mark+2),a  
2c3a 18 03			jr .pastdmark  
2c3c ..			.dmark: db "UWR"  
2c3f f1			.pastdmark: pop af  
2c40			endm  
# End of macro DMARK
2c40				CALLMONITOR 
2c40 cd aa fd			call debug_vector  
2c43				endm  
# End of macro CALLMONITOR
2c43			endif 
2c43 21 00 80			ld hl, baseram 
2c46				;ld hl, baseusermem 
2c46 01 00 00			ld bc, 0    ; start a counter 
2c49			 
2c49			; skip dict stub 
2c49			 
2c49 cd 76 25			call forth_tok_next 
2c4c			 
2c4c			 
2c4c			; while we have words to look for 
2c4c			 
2c4c 7e			.douscan:	ld a, (hl)      
2c4d			if DEBUG_FORTH_WORDS 
2c4d				DMARK "UWs" 
2c4d f5				push af  
2c4e 3a 62 2c			ld a, (.dmark)  
2c51 32 a0 fd			ld (debug_mark),a  
2c54 3a 63 2c			ld a, (.dmark+1)  
2c57 32 a1 fd			ld (debug_mark+1),a  
2c5a 3a 64 2c			ld a, (.dmark+2)  
2c5d 32 a2 fd			ld (debug_mark+2),a  
2c60 18 03			jr .pastdmark  
2c62 ..			.dmark: db "UWs"  
2c65 f1			.pastdmark: pop af  
2c66			endm  
# End of macro DMARK
2c66				CALLMONITOR 
2c66 cd aa fd			call debug_vector  
2c69				endm  
# End of macro CALLMONITOR
2c69			endif 
2c69 fe 00			cp WORD_SYS_END 
2c6b 28 4d			jr z, .udone 
2c6d fe 01			cp WORD_SYS_UWORD 
2c6f 20 44			jr nz, .nuword 
2c71			 
2c71			if DEBUG_FORTH_WORDS 
2c71				DMARK "UWu" 
2c71 f5				push af  
2c72 3a 86 2c			ld a, (.dmark)  
2c75 32 a0 fd			ld (debug_mark),a  
2c78 3a 87 2c			ld a, (.dmark+1)  
2c7b 32 a1 fd			ld (debug_mark+1),a  
2c7e 3a 88 2c			ld a, (.dmark+2)  
2c81 32 a2 fd			ld (debug_mark+2),a  
2c84 18 03			jr .pastdmark  
2c86 ..			.dmark: db "UWu"  
2c89 f1			.pastdmark: pop af  
2c8a			endm  
# End of macro DMARK
2c8a				CALLMONITOR 
2c8a cd aa fd			call debug_vector  
2c8d				endm  
# End of macro CALLMONITOR
2c8d			endif 
2c8d				; we have a uword so push its name to the stack 
2c8d			 
2c8d e5				push hl  ; save so we can move to next dict block 
2c8e			 
2c8e				; skip opcode 
2c8e 23				inc hl  
2c8f				; skip next ptr 
2c8f 23				inc hl  
2c90 23				inc hl 
2c91				; skip len 
2c91 23				inc hl 
2c92			if DEBUG_FORTH_WORDS 
2c92				DMARK "UWt" 
2c92 f5				push af  
2c93 3a a7 2c			ld a, (.dmark)  
2c96 32 a0 fd			ld (debug_mark),a  
2c99 3a a8 2c			ld a, (.dmark+1)  
2c9c 32 a1 fd			ld (debug_mark+1),a  
2c9f 3a a9 2c			ld a, (.dmark+2)  
2ca2 32 a2 fd			ld (debug_mark+2),a  
2ca5 18 03			jr .pastdmark  
2ca7 ..			.dmark: db "UWt"  
2caa f1			.pastdmark: pop af  
2cab			endm  
# End of macro DMARK
2cab				CALLMONITOR 
2cab cd aa fd			call debug_vector  
2cae				endm  
# End of macro CALLMONITOR
2cae			endif 
2cae 03				inc bc 
2caf			 
2caf c5				push bc 
2cb0 cd b6 20			call forth_push_str 
2cb3 c1				pop bc 
2cb4			 
2cb4 e1				pop hl 	 
2cb5			 
2cb5 cd 76 25		.nuword:	call forth_tok_next 
2cb8 18 92			jr .douscan  
2cba			 
2cba			.udone:		 ; push count of uwords found 
2cba c5				push bc 
2cbb e1				pop hl 
2cbc			 
2cbc			if DEBUG_FORTH_WORDS 
2cbc				DMARK "UWc" 
2cbc f5				push af  
2cbd 3a d1 2c			ld a, (.dmark)  
2cc0 32 a0 fd			ld (debug_mark),a  
2cc3 3a d2 2c			ld a, (.dmark+1)  
2cc6 32 a1 fd			ld (debug_mark+1),a  
2cc9 3a d3 2c			ld a, (.dmark+2)  
2ccc 32 a2 fd			ld (debug_mark+2),a  
2ccf 18 03			jr .pastdmark  
2cd1 ..			.dmark: db "UWc"  
2cd4 f1			.pastdmark: pop af  
2cd5			endm  
# End of macro DMARK
2cd5				CALLMONITOR 
2cd5 cd aa fd			call debug_vector  
2cd8				endm  
# End of macro CALLMONITOR
2cd8			endif 
2cd8 cd 48 20			call forth_push_numhl 
2cdb			 
2cdb			 
2cdb			       NEXTW 
2cdb c3 39 24			jp macro_next 
2cde				endm 
# End of macro NEXTW
2cde			 
2cde			.BP: 
2cde			CWHEAD .MONITOR 64 "BP" 2 WORD_FLAG_CODE 
2cde 54				db WORD_SYS_CORE+64             
2cdf 18 2d			dw .MONITOR            
2ce1 03				db 2 + 1 
2ce2 .. 00			db "BP",0              
2ce5				endm 
# End of macro CWHEAD
2ce5			; | BP ( u1 -- ) Enable or disable break point monitoring | DONE 
2ce5			; | | $00 Will enable the break points within specific code paths 
2ce5			; | | $01 Will disable break points 
2ce5			; | |  
2ce5			; | | By default break points are off. Either the above can be used to enable them 
2ce5			; | | or if a key is held down during start up the spashscreen will appear to freeze 
2ce5			; | | and on release of the pressed key the CONFIG menu will be displayed where you 
2ce5			; | | can disable break points. Exiting will then continue boot process. 
2ce5				; get byte count 
2ce5				if DEBUG_FORTH_WORDS_KEY 
2ce5					DMARK "BP." 
2ce5 f5				push af  
2ce6 3a fa 2c			ld a, (.dmark)  
2ce9 32 a0 fd			ld (debug_mark),a  
2cec 3a fb 2c			ld a, (.dmark+1)  
2cef 32 a1 fd			ld (debug_mark+1),a  
2cf2 3a fc 2c			ld a, (.dmark+2)  
2cf5 32 a2 fd			ld (debug_mark+2),a  
2cf8 18 03			jr .pastdmark  
2cfa ..			.dmark: db "BP."  
2cfd f1			.pastdmark: pop af  
2cfe			endm  
# End of macro DMARK
2cfe					CALLMONITOR 
2cfe cd aa fd			call debug_vector  
2d01				endm  
# End of macro CALLMONITOR
2d01				endif 
2d01			 
2d01				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2d01 cd 4d 22			call macro_dsp_valuehl 
2d04				endm 
# End of macro FORTH_DSP_VALUEHL
2d04			 
2d04			;		push hl 
2d04			 
2d04				; destroy value TOS 
2d04			 
2d04				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2d04 cd 05 23			call macro_forth_dsp_pop 
2d07				endm 
# End of macro FORTH_DSP_POP
2d07			 
2d07			;		pop hl 
2d07			 
2d07 3e 00			ld a,0 
2d09 bd				cp l 
2d0a 28 06			jr z, .bpset 
2d0c			;		ld a, '*' 
2d0c cd 55 19			call bp_off 
2d0f				NEXTW 
2d0f c3 39 24			jp macro_next 
2d12				endm 
# End of macro NEXTW
2d12			 
2d12			.bpset:	 
2d12				;	ld (os_view_disable), a 
2d12 cd 49 19			call bp_on 
2d15			 
2d15			 
2d15				NEXTW 
2d15 c3 39 24			jp macro_next 
2d18				endm 
# End of macro NEXTW
2d18			 
2d18			 
2d18			.MONITOR: 
2d18			CWHEAD .MALLOC 65 "MONITOR" 7 WORD_FLAG_CODE 
2d18 55				db WORD_SYS_CORE+65             
2d19 49 2d			dw .MALLOC            
2d1b 08				db 7 + 1 
2d1c .. 00			db "MONITOR",0              
2d24				endm 
# End of macro CWHEAD
2d24			; | MONITOR ( -- ) Display system breakpoint/monitor | DONE 
2d24			; | | At start the current various registers will be displayed with contents. 
2d24			; | | Top right corner will show the most recent debug marker seen. 
2d24			; | | The bottom of the screen will also show the values of the data stack pointer (DSP) 
2d24			; | | and the return stack pointer (RSP). 
2d24			; | | Pressing: 
2d24			; | |    1 - Initial screen 
2d24			; | |    2 - Display a data dump of HL 
2d24			; | |    3 - Display a data dump of DE 
2d24			; | |    4 - Display a data dump of BC 
2d24			; | |    5 - Display a data dump of HL 
2d24			; | |    6 - Display a data dump of DSP 
2d24			; | |    7 - Display a data dump of RSP 
2d24			; | |    8 - Display a data dump of what is at DSP 
2d24			; | |    9 - Display a data dump of what is at RSP 
2d24			; | |    0 - Exit monitor and continue running. This will also enable break points 
2d24			; | |    * - Disable break points 
2d24			; | |    # - Enter traditional monitor mode 
2d24			; | | 
2d24			; | | Monitor Mode 
2d24			; | | ------------ 
2d24			; | | A prompt of '>' will be shown for various commands: 
2d24			; | |    D xxxx - Display a data dump starting from hex address xxxx 
2d24			; | |    C - Continue display a data dump from the last set address 
2d24			; | |    M xxxx - Set start of memory edit at address xx 
2d24			; | |    U xx - Poke the hex byte xx into the address set by M and increment the address to the next location 
2d24			; | |    G xxxx - Exec code at specific address 
2d24			; | |    Q - Return to previous 
2d24				if DEBUG_FORTH_WORDS_KEY 
2d24					DMARK "MON" 
2d24 f5				push af  
2d25 3a 39 2d			ld a, (.dmark)  
2d28 32 a0 fd			ld (debug_mark),a  
2d2b 3a 3a 2d			ld a, (.dmark+1)  
2d2e 32 a1 fd			ld (debug_mark+1),a  
2d31 3a 3b 2d			ld a, (.dmark+2)  
2d34 32 a2 fd			ld (debug_mark+2),a  
2d37 18 03			jr .pastdmark  
2d39 ..			.dmark: db "MON"  
2d3c f1			.pastdmark: pop af  
2d3d			endm  
# End of macro DMARK
2d3d					CALLMONITOR 
2d3d cd aa fd			call debug_vector  
2d40				endm  
# End of macro CALLMONITOR
2d40				endif 
2d40			;		ld a, 0 
2d40			;		ld (os_view_disable), a 
2d40 cd 49 19			call bp_on 
2d43			 
2d43				CALLMONITOR 
2d43 cd aa fd			call debug_vector  
2d46				endm  
# End of macro CALLMONITOR
2d46			 
2d46			;	call monitor 
2d46			 
2d46				NEXTW 
2d46 c3 39 24			jp macro_next 
2d49				endm 
# End of macro NEXTW
2d49			 
2d49			 
2d49			.MALLOC: 
2d49			CWHEAD .MALLOC2 66 "ALLOT" 5 WORD_FLAG_CODE 
2d49 56				db WORD_SYS_CORE+66             
2d4a 72 2d			dw .MALLOC2            
2d4c 06				db 5 + 1 
2d4d .. 00			db "ALLOT",0              
2d53				endm 
# End of macro CWHEAD
2d53			; | ALLOT ( u -- u ) Allocate u bytes of memory space and push the pointer TOS  | DONE 
2d53				if DEBUG_FORTH_WORDS_KEY 
2d53					DMARK "ALL" 
2d53 f5				push af  
2d54 3a 68 2d			ld a, (.dmark)  
2d57 32 a0 fd			ld (debug_mark),a  
2d5a 3a 69 2d			ld a, (.dmark+1)  
2d5d 32 a1 fd			ld (debug_mark+1),a  
2d60 3a 6a 2d			ld a, (.dmark+2)  
2d63 32 a2 fd			ld (debug_mark+2),a  
2d66 18 03			jr .pastdmark  
2d68 ..			.dmark: db "ALL"  
2d6b f1			.pastdmark: pop af  
2d6c			endm  
# End of macro DMARK
2d6c					CALLMONITOR 
2d6c cd aa fd			call debug_vector  
2d6f				endm  
# End of macro CALLMONITOR
2d6f				endif 
2d6f c3 99 2d			jp .mallocc 
2d72			.MALLOC2: 
2d72			CWHEAD .FREE 66 "MALLOC" 6 WORD_FLAG_CODE 
2d72 56				db WORD_SYS_CORE+66             
2d73 b0 2d			dw .FREE            
2d75 07				db 6 + 1 
2d76 .. 00			db "MALLOC",0              
2d7d				endm 
# End of macro CWHEAD
2d7d			; | MALLOC ( u -- u ) Allocate u bytes of memory space and push the pointer TOS  | DONE 
2d7d				; get byte count 
2d7d				if DEBUG_FORTH_WORDS_KEY 
2d7d					DMARK "MAL" 
2d7d f5				push af  
2d7e 3a 92 2d			ld a, (.dmark)  
2d81 32 a0 fd			ld (debug_mark),a  
2d84 3a 93 2d			ld a, (.dmark+1)  
2d87 32 a1 fd			ld (debug_mark+1),a  
2d8a 3a 94 2d			ld a, (.dmark+2)  
2d8d 32 a2 fd			ld (debug_mark+2),a  
2d90 18 03			jr .pastdmark  
2d92 ..			.dmark: db "MAL"  
2d95 f1			.pastdmark: pop af  
2d96			endm  
# End of macro DMARK
2d96					CALLMONITOR 
2d96 cd aa fd			call debug_vector  
2d99				endm  
# End of macro CALLMONITOR
2d99				endif 
2d99			.mallocc: 
2d99				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2d99 cd 4d 22			call macro_dsp_valuehl 
2d9c				endm 
# End of macro FORTH_DSP_VALUEHL
2d9c			 
2d9c			;		push hl 
2d9c			 
2d9c				; destroy value TOS 
2d9c			 
2d9c				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2d9c cd 05 23			call macro_forth_dsp_pop 
2d9f				endm 
# End of macro FORTH_DSP_POP
2d9f			 
2d9f			;		pop hl 
2d9f cd b9 13			call malloc 
2da2			if DEBUG_FORTH_MALLOC_GUARD 
2da2 f5				push af 
2da3 cd 07 10			call ishlzero 
2da6			;		ld a, l 
2da6			;		add h 
2da6			;		cp 0 
2da6 f1				pop af 
2da7				 
2da7 cc 1d 60			call z,malloc_error 
2daa			endif 
2daa			 
2daa cd 48 20			call forth_push_numhl 
2dad				NEXTW 
2dad c3 39 24			jp macro_next 
2db0				endm 
# End of macro NEXTW
2db0			 
2db0			.FREE: 
2db0			CWHEAD .LIST 67 "FREE" 4 WORD_FLAG_CODE 
2db0 57				db WORD_SYS_CORE+67             
2db1 e1 2d			dw .LIST            
2db3 05				db 4 + 1 
2db4 .. 00			db "FREE",0              
2db9				endm 
# End of macro CWHEAD
2db9			; | FREE ( u --  ) Free memory block from malloc given u address  | DONE 
2db9				if DEBUG_FORTH_WORDS_KEY 
2db9					DMARK "FRE" 
2db9 f5				push af  
2dba 3a ce 2d			ld a, (.dmark)  
2dbd 32 a0 fd			ld (debug_mark),a  
2dc0 3a cf 2d			ld a, (.dmark+1)  
2dc3 32 a1 fd			ld (debug_mark+1),a  
2dc6 3a d0 2d			ld a, (.dmark+2)  
2dc9 32 a2 fd			ld (debug_mark+2),a  
2dcc 18 03			jr .pastdmark  
2dce ..			.dmark: db "FRE"  
2dd1 f1			.pastdmark: pop af  
2dd2			endm  
# End of macro DMARK
2dd2					CALLMONITOR 
2dd2 cd aa fd			call debug_vector  
2dd5				endm  
# End of macro CALLMONITOR
2dd5				endif 
2dd5				; get address 
2dd5			 
2dd5				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2dd5 cd 4d 22			call macro_dsp_valuehl 
2dd8				endm 
# End of macro FORTH_DSP_VALUEHL
2dd8			 
2dd8			;		push hl 
2dd8			 
2dd8				; destroy value TOS 
2dd8			 
2dd8				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2dd8 cd 05 23			call macro_forth_dsp_pop 
2ddb				endm 
# End of macro FORTH_DSP_POP
2ddb			 
2ddb			;		pop hl 
2ddb			if FORTH_ENABLE_MALLOCFREE 
2ddb cd 83 14			call free 
2dde			endif 
2dde				NEXTW 
2dde c3 39 24			jp macro_next 
2de1				endm 
# End of macro NEXTW
2de1			.LIST: 
2de1			CWHEAD .FORGET 72 "LIST" 4 WORD_FLAG_CODE 
2de1 5c				db WORD_SYS_CORE+72             
2de2 dd 2f			dw .FORGET            
2de4 05				db 4 + 1 
2de5 .. 00			db "LIST",0              
2dea				endm 
# End of macro CWHEAD
2dea			; | LIST ( uword -- u )    List the code to the word that is quoted (so as not to exec) on TOS | DONE 
2dea			; | | The quoted word must be in upper case. 
2dea			if DEBUG_FORTH_WORDS_KEY 
2dea				DMARK "LST" 
2dea f5				push af  
2deb 3a ff 2d			ld a, (.dmark)  
2dee 32 a0 fd			ld (debug_mark),a  
2df1 3a 00 2e			ld a, (.dmark+1)  
2df4 32 a1 fd			ld (debug_mark+1),a  
2df7 3a 01 2e			ld a, (.dmark+2)  
2dfa 32 a2 fd			ld (debug_mark+2),a  
2dfd 18 03			jr .pastdmark  
2dff ..			.dmark: db "LST"  
2e02 f1			.pastdmark: pop af  
2e03			endm  
# End of macro DMARK
2e03				CALLMONITOR 
2e03 cd aa fd			call debug_vector  
2e06				endm  
# End of macro CALLMONITOR
2e06			endif 
2e06			 
2e06				FORTH_DSP_VALUEHL 
2e06 cd 4d 22			call macro_dsp_valuehl 
2e09				endm 
# End of macro FORTH_DSP_VALUEHL
2e09			 
2e09 e5				push hl 
2e0a				FORTH_DSP_POP 
2e0a cd 05 23			call macro_forth_dsp_pop 
2e0d				endm 
# End of macro FORTH_DSP_POP
2e0d c1				pop bc 
2e0e			 
2e0e			; Start format of scratch string 
2e0e			 
2e0e 21 f6 f0			ld hl, scratch 
2e11			 
2e11 3e 3a			ld a, ':' 
2e13 77				ld (hl),a 
2e14 23				inc hl 
2e15 3e 20			ld a, ' ' 
2e17 77				ld (hl), a 
2e18			 
2e18				; Get ptr to the word we need to look up 
2e18			 
2e18			;		FORTH_DSP_VALUEHL 
2e18				;v5 FORTH_DSP_VALUE 
2e18			; TODO type check 
2e18			;		inc hl    ; Skip type check  
2e18			;		push hl 
2e18			;		ex de, hl    ; put into DE 
2e18			 
2e18			 
2e18 21 00 80			ld hl, baseram 
2e1b				;ld hl, baseusermem 
2e1b			 
2e1b e5			push hl   ; sacreifical push 
2e1c			 
2e1c			.ldouscanm: 
2e1c e1			pop hl 
2e1d			.ldouscan: 
2e1d			if DEBUG_FORTH_WORDS 
2e1d				DMARK "LSs" 
2e1d f5				push af  
2e1e 3a 32 2e			ld a, (.dmark)  
2e21 32 a0 fd			ld (debug_mark),a  
2e24 3a 33 2e			ld a, (.dmark+1)  
2e27 32 a1 fd			ld (debug_mark+1),a  
2e2a 3a 34 2e			ld a, (.dmark+2)  
2e2d 32 a2 fd			ld (debug_mark+2),a  
2e30 18 03			jr .pastdmark  
2e32 ..			.dmark: db "LSs"  
2e35 f1			.pastdmark: pop af  
2e36			endm  
# End of macro DMARK
2e36				CALLMONITOR 
2e36 cd aa fd			call debug_vector  
2e39				endm  
# End of macro CALLMONITOR
2e39			endif 
2e39			; skip dict stub 
2e39 cd 76 25			call forth_tok_next 
2e3c			 
2e3c			 
2e3c			; while we have words to look for 
2e3c			 
2e3c 7e			ld a, (hl)      
2e3d			if DEBUG_FORTH_WORDS 
2e3d				DMARK "LSk" 
2e3d f5				push af  
2e3e 3a 52 2e			ld a, (.dmark)  
2e41 32 a0 fd			ld (debug_mark),a  
2e44 3a 53 2e			ld a, (.dmark+1)  
2e47 32 a1 fd			ld (debug_mark+1),a  
2e4a 3a 54 2e			ld a, (.dmark+2)  
2e4d 32 a2 fd			ld (debug_mark+2),a  
2e50 18 03			jr .pastdmark  
2e52 ..			.dmark: db "LSk"  
2e55 f1			.pastdmark: pop af  
2e56			endm  
# End of macro DMARK
2e56				CALLMONITOR 
2e56 cd aa fd			call debug_vector  
2e59				endm  
# End of macro CALLMONITOR
2e59			endif 
2e59				;cp WORD_SYS_END 
2e59				;jp z, .lunotfound 
2e59			 
2e59					; if we hit non uwords then gone too far 
2e59 fe 01				cp WORD_SYS_UWORD 
2e5b c2 99 2f				jp nz, .lunotfound 
2e5e			 
2e5e				if DEBUG_FORTH_WORDS 
2e5e					DMARK "LSu" 
2e5e f5				push af  
2e5f 3a 73 2e			ld a, (.dmark)  
2e62 32 a0 fd			ld (debug_mark),a  
2e65 3a 74 2e			ld a, (.dmark+1)  
2e68 32 a1 fd			ld (debug_mark+1),a  
2e6b 3a 75 2e			ld a, (.dmark+2)  
2e6e 32 a2 fd			ld (debug_mark+2),a  
2e71 18 03			jr .pastdmark  
2e73 ..			.dmark: db "LSu"  
2e76 f1			.pastdmark: pop af  
2e77			endm  
# End of macro DMARK
2e77					CALLMONITOR 
2e77 cd aa fd			call debug_vector  
2e7a				endm  
# End of macro CALLMONITOR
2e7a				endif 
2e7a			 
2e7a					; found a uword but is it the one we want... 
2e7a			 
2e7a c5					push bc     ; uword to find is on bc 
2e7b d1					pop de 
2e7c			 
2e7c e5					push hl  ; to save the ptr 
2e7d			 
2e7d					; skip opcode 
2e7d 23					inc hl  
2e7e					; skip next ptr 
2e7e 23					inc hl  
2e7f 23					inc hl 
2e80					; skip len 
2e80 23					inc hl 
2e81			 
2e81				if DEBUG_FORTH_WORDS 
2e81					DMARK "LSc" 
2e81 f5				push af  
2e82 3a 96 2e			ld a, (.dmark)  
2e85 32 a0 fd			ld (debug_mark),a  
2e88 3a 97 2e			ld a, (.dmark+1)  
2e8b 32 a1 fd			ld (debug_mark+1),a  
2e8e 3a 98 2e			ld a, (.dmark+2)  
2e91 32 a2 fd			ld (debug_mark+2),a  
2e94 18 03			jr .pastdmark  
2e96 ..			.dmark: db "LSc"  
2e99 f1			.pastdmark: pop af  
2e9a			endm  
# End of macro DMARK
2e9a					CALLMONITOR 
2e9a cd aa fd			call debug_vector  
2e9d				endm  
# End of macro CALLMONITOR
2e9d				endif 
2e9d			; was exiting on the shorter of the words. swap and test is in favour of the longer word. 
2e9d			; ie. If WOO is defined first and then WO. Couldnt list WO. 
2e9d			; Nope that has gone the other way. It needs to be exact not on first zero 
2e9d			;		call strcmp 
2e9d c5					push bc 
2e9e cd 89 13				call StrictStrCmp 
2ea1 c1					pop bc 
2ea2 c2 1c 2e				jp nz, .ldouscanm 
2ea5				 
2ea5			 
2ea5			 
2ea5					; we have a uword so push its name to the stack 
2ea5			 
2ea5			;	   	push hl  ; save so we can move to next dict block 
2ea5 e1			pop hl 
2ea6			 
2ea6				if DEBUG_FORTH_WORDS 
2ea6					DMARK "LSm" 
2ea6 f5				push af  
2ea7 3a bb 2e			ld a, (.dmark)  
2eaa 32 a0 fd			ld (debug_mark),a  
2ead 3a bc 2e			ld a, (.dmark+1)  
2eb0 32 a1 fd			ld (debug_mark+1),a  
2eb3 3a bd 2e			ld a, (.dmark+2)  
2eb6 32 a2 fd			ld (debug_mark+2),a  
2eb9 18 03			jr .pastdmark  
2ebb ..			.dmark: db "LSm"  
2ebe f1			.pastdmark: pop af  
2ebf			endm  
# End of macro DMARK
2ebf					CALLMONITOR 
2ebf cd aa fd			call debug_vector  
2ec2				endm  
# End of macro CALLMONITOR
2ec2				endif 
2ec2			 
2ec2					; skip opcode 
2ec2 23					inc hl  
2ec3					; skip next ptr 
2ec3 23					inc hl  
2ec4 23					inc hl 
2ec5					; skip len 
2ec5 7e					ld a, (hl)   ; save length to add 
2ec6				if DEBUG_FORTH_WORDS 
2ec6					DMARK "LS2" 
2ec6 f5				push af  
2ec7 3a db 2e			ld a, (.dmark)  
2eca 32 a0 fd			ld (debug_mark),a  
2ecd 3a dc 2e			ld a, (.dmark+1)  
2ed0 32 a1 fd			ld (debug_mark+1),a  
2ed3 3a dd 2e			ld a, (.dmark+2)  
2ed6 32 a2 fd			ld (debug_mark+2),a  
2ed9 18 03			jr .pastdmark  
2edb ..			.dmark: db "LS2"  
2ede f1			.pastdmark: pop af  
2edf			endm  
# End of macro DMARK
2edf					CALLMONITOR 
2edf cd aa fd			call debug_vector  
2ee2				endm  
# End of macro CALLMONITOR
2ee2				endif 
2ee2			 
2ee2					; save this location 
2ee2				 
2ee2 e5					push hl 
2ee3			 
2ee3 23					inc hl 
2ee4 11 f8 f0				ld de, scratch+2 
2ee7 4f					ld c, a 
2ee8 06 00				ld b, 0 
2eea			 
2eea				if DEBUG_FORTH_WORDS 
2eea					DMARK "LSn" 
2eea f5				push af  
2eeb 3a ff 2e			ld a, (.dmark)  
2eee 32 a0 fd			ld (debug_mark),a  
2ef1 3a 00 2f			ld a, (.dmark+1)  
2ef4 32 a1 fd			ld (debug_mark+1),a  
2ef7 3a 01 2f			ld a, (.dmark+2)  
2efa 32 a2 fd			ld (debug_mark+2),a  
2efd 18 03			jr .pastdmark  
2eff ..			.dmark: db "LSn"  
2f02 f1			.pastdmark: pop af  
2f03			endm  
# End of macro DMARK
2f03					CALLMONITOR 
2f03 cd aa fd			call debug_vector  
2f06				endm  
# End of macro CALLMONITOR
2f06				endif 
2f06			 
2f06					; copy uword name to scratch 
2f06			 
2f06			;		ldir 
2f06			.licplw:	; copy uword name to scratch converting to lower case as we go 
2f06 ed a0				ldi 
2f08 1b					dec de 
2f09 1a					ld a, (de) 
2f0a cd 5c 12				call to_lower 
2f0d 12					ld (de),a 
2f0e 13					inc de 
2f0f 3e 00				ld a, 0 
2f11 b9					cp c 
2f12 20 f2				jr nz, .licplw 
2f14			 
2f14			 
2f14			 
2f14 1b					dec de 
2f15 3e 20				ld a, ' '    ; change null to space 
2f17 12					ld (de), a 
2f18			 
2f18 13					inc de 
2f19			 
2f19 d5					push de 
2f1a c1					pop bc     ; move scratch pointer to end of word name and save it 
2f1b			 
2f1b e1					pop hl 
2f1c 7e					ld a, (hl) 
2f1d					;inc hl 
2f1d					; skip word string 
2f1d cd de 0f				call addatohl 
2f20			 
2f20 23					inc hl 
2f21			 
2f21				if DEBUG_FORTH_WORDS 
2f21					DMARK "LS3" 
2f21 f5				push af  
2f22 3a 36 2f			ld a, (.dmark)  
2f25 32 a0 fd			ld (debug_mark),a  
2f28 3a 37 2f			ld a, (.dmark+1)  
2f2b 32 a1 fd			ld (debug_mark+1),a  
2f2e 3a 38 2f			ld a, (.dmark+2)  
2f31 32 a2 fd			ld (debug_mark+2),a  
2f34 18 03			jr .pastdmark  
2f36 ..			.dmark: db "LS3"  
2f39 f1			.pastdmark: pop af  
2f3a			endm  
# End of macro DMARK
2f3a					CALLMONITOR 
2f3a cd aa fd			call debug_vector  
2f3d				endm  
# End of macro CALLMONITOR
2f3d				endif 
2f3d					; should now be at the start of the machine code to setup the eval of the uword 
2f3d					; now locate the ptr to the string defintion 
2f3d			 
2f3d					; skip ld hl, 
2f3d					; then load the ptr 
2f3d			; TODO use get from hl ptr 
2f3d 23					inc hl 
2f3e 5e					ld e, (hl) 
2f3f 23					inc hl 
2f40 56					ld d, (hl) 
2f41 eb					ex de, hl 
2f42			 
2f42			 
2f42				if DEBUG_FORTH_WORDS 
2f42					DMARK "LSt" 
2f42 f5				push af  
2f43 3a 57 2f			ld a, (.dmark)  
2f46 32 a0 fd			ld (debug_mark),a  
2f49 3a 58 2f			ld a, (.dmark+1)  
2f4c 32 a1 fd			ld (debug_mark+1),a  
2f4f 3a 59 2f			ld a, (.dmark+2)  
2f52 32 a2 fd			ld (debug_mark+2),a  
2f55 18 03			jr .pastdmark  
2f57 ..			.dmark: db "LSt"  
2f5a f1			.pastdmark: pop af  
2f5b			endm  
# End of macro DMARK
2f5b					CALLMONITOR 
2f5b cd aa fd			call debug_vector  
2f5e				endm  
# End of macro CALLMONITOR
2f5e				endif 
2f5e			 
2f5e			; cant push right now due to tokenised strings  
2f5e			 
2f5e			; get the destination of where to copy this definition to. 
2f5e			 
2f5e c5					push bc 
2f5f d1					pop de 
2f60			 
2f60 7e			.listl:         ld a,(hl) 
2f61 fe 00				cp 0 
2f63 28 09				jr z, .lreplsp     ; replace zero with space 
2f65					;cp FORTH_END_BUFFER 
2f65 fe 3b				cp ';'    ; No end buffer flag but the ';' will be a good sign of the end of definition 
2f67 28 0a				jr z, .listdone    ; at end of uword defination to close of scratch and finish 
2f69				 
2f69					; just copy this char as is then 
2f69			 
2f69 12					ld (de), a 
2f6a			 
2f6a 23			.listnxt:	inc hl 
2f6b 13					inc de 
2f6c 18 f2				jr .listl 
2f6e			 
2f6e 3e 20		.lreplsp:	ld a,' ' 
2f70 12					ld (de), a 
2f71 18 f7				jr .listnxt 
2f73			 
2f73			; close up uword def 
2f73			 
2f73			.listdone: 
2f73 12					ld (de), a 
2f74 13					inc de 
2f75 3e 00				ld a, 0 
2f77 12					ld (de), a 
2f78			 
2f78			; now have def so clean up and push to stack 
2f78			 
2f78 21 f6 f0				ld hl, scratch 
2f7b				if DEBUG_FORTH_WORDS 
2f7b					DMARK "Ltp" 
2f7b f5				push af  
2f7c 3a 90 2f			ld a, (.dmark)  
2f7f 32 a0 fd			ld (debug_mark),a  
2f82 3a 91 2f			ld a, (.dmark+1)  
2f85 32 a1 fd			ld (debug_mark+1),a  
2f88 3a 92 2f			ld a, (.dmark+2)  
2f8b 32 a2 fd			ld (debug_mark+2),a  
2f8e 18 03			jr .pastdmark  
2f90 ..			.dmark: db "Ltp"  
2f93 f1			.pastdmark: pop af  
2f94			endm  
# End of macro DMARK
2f94					CALLMONITOR 
2f94 cd aa fd			call debug_vector  
2f97				endm  
# End of macro CALLMONITOR
2f97				endif 
2f97			 
2f97 18 1f			jr .listpush 
2f99			 
2f99			;.lnuword:	pop hl 
2f99			;		call forth_tok_next 
2f99			;		jp .ldouscan  
2f99			 
2f99			.lunotfound:		  
2f99			 
2f99				if DEBUG_FORTH_WORDS 
2f99					DMARK "LSn" 
2f99 f5				push af  
2f9a 3a ae 2f			ld a, (.dmark)  
2f9d 32 a0 fd			ld (debug_mark),a  
2fa0 3a af 2f			ld a, (.dmark+1)  
2fa3 32 a1 fd			ld (debug_mark+1),a  
2fa6 3a b0 2f			ld a, (.dmark+2)  
2fa9 32 a2 fd			ld (debug_mark+2),a  
2fac 18 03			jr .pastdmark  
2fae ..			.dmark: db "LSn"  
2fb1 f1			.pastdmark: pop af  
2fb2			endm  
# End of macro DMARK
2fb2					CALLMONITOR 
2fb2 cd aa fd			call debug_vector  
2fb5				endm  
# End of macro CALLMONITOR
2fb5				endif 
2fb5			 
2fb5					 
2fb5			;		FORTH_DSP_POP 
2fb5			;		ld hl, .luno 
2fb5			 
2fb5					NEXTW			 
2fb5 c3 39 24			jp macro_next 
2fb8				endm 
# End of macro NEXTW
2fb8			 
2fb8			.listpush: 
2fb8				if DEBUG_FORTH_WORDS 
2fb8					DMARK "LS>" 
2fb8 f5				push af  
2fb9 3a cd 2f			ld a, (.dmark)  
2fbc 32 a0 fd			ld (debug_mark),a  
2fbf 3a ce 2f			ld a, (.dmark+1)  
2fc2 32 a1 fd			ld (debug_mark+1),a  
2fc5 3a cf 2f			ld a, (.dmark+2)  
2fc8 32 a2 fd			ld (debug_mark+2),a  
2fcb 18 03			jr .pastdmark  
2fcd ..			.dmark: db "LS>"  
2fd0 f1			.pastdmark: pop af  
2fd1			endm  
# End of macro DMARK
2fd1					CALLMONITOR 
2fd1 cd aa fd			call debug_vector  
2fd4				endm  
# End of macro CALLMONITOR
2fd4				endif 
2fd4 cd b6 20				call forth_push_str 
2fd7			 
2fd7			 
2fd7			 
2fd7					NEXTW 
2fd7 c3 39 24			jp macro_next 
2fda				endm 
# End of macro NEXTW
2fda			 
2fda			;.luno:    db "Word not found",0 
2fda			 
2fda			 
2fda			 
2fda			 
2fda			 
2fda			;		push hl   ; save pointer to start of uword def string 
2fda			; 
2fda			;; look for FORTH_EOL_LINE 
2fda			;		ld a, FORTH_END_BUFFER 
2fda			;		call strlent 
2fda			; 
2fda			;		inc hl		 ; space for coln def 
2fda			;		inc hl 
2fda			;		inc hl          ; space for terms 
2fda			;		inc hl 
2fda			; 
2fda			;		ld a, 20   ; TODO get actual length 
2fda			;		call addatohl    ; include a random amount of room for the uword name 
2fda			; 
2fda			;		 
2fda			;	if DEBUG_FORTH_WORDS 
2fda			;		DMARK "Lt1" 
2fda			;		CALLMONITOR 
2fda			;	endif 
2fda			;		 
2fda			; 
2fda			;; malloc space for the string because we cant change it 
2fda			; 
2fda			;		call malloc 
2fda			;	if DEBUG_FORTH_MALLOC_GUARD 
2fda			;		push af 
2fda			;		call ishlzero 
2fda			;		pop af 
2fda			;		 
2fda			;		call z,malloc_error 
2fda			;	endif 
2fda			; 
2fda			;	if DEBUG_FORTH_WORDS 
2fda			;		DMARK "Lt2" 
2fda			;		CALLMONITOR 
2fda			;	endif 
2fda			;		pop de 
2fda			;		push hl    ; push the malloc to release later 
2fda			;		push hl   ;  push back a copy for the later stack push 
2fda			;		 
2fda			;; copy the string swapping out the zero terms for spaces 
2fda			; 
2fda			;		; de has our source 
2fda			;		; hl has our dest 
2fda			; 
2fda			;; add the coln def 
2fda			; 
2fda			;		ld a, ':' 
2fda			;		ld (hl), a 
2fda			;		inc hl 
2fda			;		ld a, ' ' 
2fda			;		ld (hl), a 
2fda			;		inc hl 
2fda			; 
2fda			;; add the uname word 
2fda			;		push de   ; save our string for now 
2fda			;		ex de, hl 
2fda			; 
2fda			;		FORTH_DSP_VALUE 
2fda			;		;v5 FORTH_DSP_VALUE 
2fda			; 
2fda			;		inc hl   ; skip type but we know by now this is OK 
2fda			; 
2fda			;.luword:	ld a,(hl) 
2fda			;		cp 0 
2fda			;		jr z, .luword2 
2fda			;		ld (de), a 
2fda			;		inc de 
2fda			;		inc hl 
2fda			;		jr .luword 
2fda			; 
2fda			;.luword2:	ld a, ' ' 
2fda			;		ld (de), a 
2fda			;;		inc hl 
2fda			;;		inc de 
2fda			;;		ld (de), a 
2fda			;;		inc hl 
2fda			;		inc de 
2fda			; 
2fda			;		ex de, hl 
2fda			;		pop de 
2fda			;		 
2fda			;		 
2fda			; 
2fda			;; detoken that string and copy it 
2fda			; 
2fda			;	if DEBUG_FORTH_WORDS 
2fda			;		DMARK "Lt2" 
2fda			;		CALLMONITOR 
2fda			;	endif 
2fda			;.ldetok:	ld a, (de) 
2fda			;		cp FORTH_END_BUFFER 
2fda			;		jr z, .ldetokend 
2fda			;		; swap out any zero term for space 
2fda			;		cp 0 
2fda			;		jr nz, .ldetoknext 
2fda			;		ld a, ' ' 
2fda			; 
2fda			;	if DEBUG_FORTH_WORDS 
2fda			;		DMARK "LtS" 
2fda			;		CALLMONITOR 
2fda			;	endif 
2fda			;.ldetoknext:	ld (hl), a 
2fda			;		inc de 
2fda			;		inc hl 
2fda			;		jr .ldetok 
2fda			; 
2fda			;.ldetokend:	ld a, 0    ; replace forth eol with string term for pushing 
2fda			;		ld (hl), a  
2fda			; 
2fda			;; free that temp malloc 
2fda			; 
2fda			;		pop hl    
2fda			; 
2fda			;	if DEBUG_FORTH_WORDS 
2fda			;		DMARK "Lt4" 
2fda			;		CALLMONITOR 
2fda			;	endif 
2fda			;		call forth_apushstrhl 
2fda			; 
2fda			;		; get rid of temp malloc area 
2fda			; 
2fda			;		pop hl 
2fda			;		call free 
2fda			; 
2fda			;		jr .ludone 
2fda			; 
2fda			;.lnuword:	pop hl 
2fda			;		call forth_tok_next 
2fda			;		jp .ldouscan  
2fda			; 
2fda			;.ludone:		 pop hl 
2fda			; 
2fda					NEXTW 
2fda c3 39 24			jp macro_next 
2fdd				endm 
# End of macro NEXTW
2fdd			 
2fdd			.FORGET: 
2fdd				CWHEAD .NOP 73 "FORGET" 6 WORD_FLAG_CODE 
2fdd 5d				db WORD_SYS_CORE+73             
2fde 56 30			dw .NOP            
2fe0 07				db 6 + 1 
2fe1 .. 00			db "FORGET",0              
2fe8				endm 
# End of macro CWHEAD
2fe8			; | FORGET ( uword -- )    Forget the uword on TOS | DONE 
2fe8			; | | Will flag the word's op code to be deleted as well as replace the first char of the word with '_'. Quoted uword name must be in caps. 
2fe8			; | |  
2fe8			; | | e.g. "MORE" forget 
2fe8					if DEBUG_FORTH_WORDS_KEY 
2fe8						DMARK "FRG" 
2fe8 f5				push af  
2fe9 3a fd 2f			ld a, (.dmark)  
2fec 32 a0 fd			ld (debug_mark),a  
2fef 3a fe 2f			ld a, (.dmark+1)  
2ff2 32 a1 fd			ld (debug_mark+1),a  
2ff5 3a ff 2f			ld a, (.dmark+2)  
2ff8 32 a2 fd			ld (debug_mark+2),a  
2ffb 18 03			jr .pastdmark  
2ffd ..			.dmark: db "FRG"  
3000 f1			.pastdmark: pop af  
3001			endm  
# End of macro DMARK
3001						CALLMONITOR 
3001 cd aa fd			call debug_vector  
3004				endm  
# End of macro CALLMONITOR
3004					endif 
3004			 
3004				; find uword 
3004			        ; update start of word with "_" 
3004				; replace uword with deleted flag 
3004			 
3004			 
3004			;	if DEBUG_FORTH_WORDS 
3004			;		DMARK "FOG" 
3004			;		CALLMONITOR 
3004			;	endif 
3004			 
3004			 
3004					; Get ptr to the word we need to look up 
3004			 
3004					FORTH_DSP_VALUEHL 
3004 cd 4d 22			call macro_dsp_valuehl 
3007				endm 
# End of macro FORTH_DSP_VALUEHL
3007					;v5 FORTH_DSP_VALUE 
3007				; TODO type check 
3007			;		inc hl    ; Skip type check  
3007 e5					push hl 
3008 c1					pop bc 
3009			;		ex de, hl    ; put into DE 
3009			 
3009			 
3009 21 00 80				ld hl, baseram 
300c					;ld hl, baseusermem 
300c			 
300c				; skip dict stub 
300c			;	call forth_tok_next 
300c e5			push hl   ; sacreifical push 
300d			 
300d			.fldouscanm: 
300d e1				pop hl 
300e			.fldouscan: 
300e			;	if DEBUG_FORTH_WORDS 
300e			;		DMARK "LSs" 
300e			;		CALLMONITOR 
300e			;	endif 
300e				; skip dict stub 
300e cd 76 25				call forth_tok_next 
3011			 
3011			 
3011			; while we have words to look for 
3011			 
3011 7e				ld a, (hl)      
3012			;	if DEBUG_FORTH_WORDS 
3012			;		DMARK "LSk" 
3012			;		CALLMONITOR 
3012			;	endif 
3012 fe 00				cp WORD_SYS_END 
3014 ca 50 30				jp z, .flunotfound 
3017 fe 01				cp WORD_SYS_UWORD 
3019 c2 0e 30				jp nz, .fldouscan 
301c			 
301c			;	if DEBUG_FORTH_WORDS 
301c			;		DMARK "LSu" 
301c			;		CALLMONITOR 
301c			;	endif 
301c			 
301c					; found a uword but is it the one we want... 
301c			 
301c c5					push bc     ; uword to find is on bc 
301d d1					pop de 
301e			 
301e e5					push hl  ; to save the ptr 
301f			 
301f					; skip opcode 
301f 23					inc hl  
3020					; skip next ptr 
3020 23					inc hl  
3021 23					inc hl 
3022					; skip len 
3022 23					inc hl 
3023			 
3023			;	if DEBUG_FORTH_WORDS 
3023			;		DMARK "LSc" 
3023			;		CALLMONITOR 
3023			;	endif 
3023 cd 7c 13				call strcmp 
3026 c2 0d 30				jp nz, .fldouscanm 
3029			; 
3029			; 
3029			;; while we have words to look for 
3029			; 
3029			;.fdouscan:	ld a, (hl)      
3029			;	if DEBUG_FORTH_WORDS 
3029			;		DMARK "LSs" 
3029			;		CALLMONITOR 
3029			;	endif 
3029			;		cp WORD_SYS_END 
3029			;		jp z, .fudone 
3029			;		cp WORD_SYS_UWORD 
3029			;		jp nz, .fnuword 
3029			; 
3029			;	if DEBUG_FORTH_WORDS 
3029			;		DMARK "FGu" 
3029			;		CALLMONITOR 
3029			;	endif 
3029			; 
3029			;		; found a uword but is it the one we want... 
3029			; 
3029			; 
3029			;	        pop de   ; get back the dsp name 
3029			;		push de 
3029			; 
3029			;		push hl  ; to save the ptr 
3029			; 
3029			;		; skip opcode 
3029			;		inc hl  
3029			;		; skip next ptr 
3029			;		inc hl  
3029			;		inc hl 
3029			;		; skip len 
3029			;		inc hl 
3029			; 
3029			;	if DEBUG_FORTH_WORDS 
3029			;		DMARK "FGc" 
3029			;		CALLMONITOR 
3029			;	endif 
3029			;		call strcmp 
3029			;		jp nz, .fnuword 
3029			 
3029			 
3029 e1			pop hl 
302a			 
302a				 
302a				if DEBUG_FORTH_WORDS 
302a					DMARK "FGm" 
302a f5				push af  
302b 3a 3f 30			ld a, (.dmark)  
302e 32 a0 fd			ld (debug_mark),a  
3031 3a 40 30			ld a, (.dmark+1)  
3034 32 a1 fd			ld (debug_mark+1),a  
3037 3a 41 30			ld a, (.dmark+2)  
303a 32 a2 fd			ld (debug_mark+2),a  
303d 18 03			jr .pastdmark  
303f ..			.dmark: db "FGm"  
3042 f1			.pastdmark: pop af  
3043			endm  
# End of macro DMARK
3043					CALLMONITOR 
3043 cd aa fd			call debug_vector  
3046				endm  
# End of macro CALLMONITOR
3046				endif 
3046			 
3046			 
3046			 
3046					; we have a uword so push its name to the stack 
3046			 
3046			;	   	push hl  ; save so we can move to next dict block 
3046			;pop hl 
3046			 
3046					; update opcode to deleted 
3046 3e 03				ld a, WORD_SYS_DELETED 
3048 77					ld (hl), a 
3049			 
3049 23					inc hl  
304a					; skip next ptr 
304a 23					inc hl  
304b 23					inc hl 
304c					; skip len 
304c 23					inc hl 
304d			 
304d					; TODO change parser to skip deleted words but for now mark it out 
304d 3e 5f				ld a, "_" 
304f 77					ld  (hl),a 
3050			 
3050			;		jr .fudone 
3050			; 
3050			;.fnuword:	pop hl 
3050			;		call forth_tok_next 
3050			;		jp .fdouscan  
3050			 
3050			.flunotfound:		  
3050			 
3050			 
3050					 
3050					FORTH_DSP_POP 
3050 cd 05 23			call macro_forth_dsp_pop 
3053				endm 
# End of macro FORTH_DSP_POP
3053			;		ld hl, .luno 
3053			;.fudone:		 pop hl 
3053					NEXTW 
3053 c3 39 24			jp macro_next 
3056				endm 
# End of macro NEXTW
3056			.NOP: 
3056				CWHEAD .COMO 77 "NOP" 3 WORD_FLAG_CODE 
3056 61				db WORD_SYS_CORE+77             
3057 7d 30			dw .COMO            
3059 04				db 3 + 1 
305a .. 00			db "NOP",0              
305e				endm 
# End of macro CWHEAD
305e			; | NOP (  --  ) Do nothing | DONE 
305e					if DEBUG_FORTH_WORDS_KEY 
305e						DMARK "NOP" 
305e f5				push af  
305f 3a 73 30			ld a, (.dmark)  
3062 32 a0 fd			ld (debug_mark),a  
3065 3a 74 30			ld a, (.dmark+1)  
3068 32 a1 fd			ld (debug_mark+1),a  
306b 3a 75 30			ld a, (.dmark+2)  
306e 32 a2 fd			ld (debug_mark+2),a  
3071 18 03			jr .pastdmark  
3073 ..			.dmark: db "NOP"  
3076 f1			.pastdmark: pop af  
3077			endm  
# End of macro DMARK
3077						CALLMONITOR 
3077 cd aa fd			call debug_vector  
307a				endm  
# End of macro CALLMONITOR
307a					endif 
307a				       NEXTW 
307a c3 39 24			jp macro_next 
307d				endm 
# End of macro NEXTW
307d			.COMO: 
307d				CWHEAD .COMC 90 "(" 1 WORD_FLAG_CODE 
307d 6e				db WORD_SYS_CORE+90             
307e cf 30			dw .COMC            
3080 02				db 1 + 1 
3081 .. 00			db "(",0              
3083				endm 
# End of macro CWHEAD
3083			; | ( ( -- )  Start of comment | DONE 
3083			 
3083			 
3083 2a f7 f3				ld hl, ( os_tok_ptr) 
3086 11 ca 30			ld de, .closepar 
3089					 
3089					if DEBUG_FORTH_WORDS 
3089						DMARK ").." 
3089 f5				push af  
308a 3a 9e 30			ld a, (.dmark)  
308d 32 a0 fd			ld (debug_mark),a  
3090 3a 9f 30			ld a, (.dmark+1)  
3093 32 a1 fd			ld (debug_mark+1),a  
3096 3a a0 30			ld a, (.dmark+2)  
3099 32 a2 fd			ld (debug_mark+2),a  
309c 18 03			jr .pastdmark  
309e ..			.dmark: db ").."  
30a1 f1			.pastdmark: pop af  
30a2			endm  
# End of macro DMARK
30a2						CALLMONITOR 
30a2 cd aa fd			call debug_vector  
30a5				endm  
# End of macro CALLMONITOR
30a5					endif 
30a5 cd 40 25			call findnexttok  
30a8			 
30a8					if DEBUG_FORTH_WORDS 
30a8						DMARK "IF5" 
30a8 f5				push af  
30a9 3a bd 30			ld a, (.dmark)  
30ac 32 a0 fd			ld (debug_mark),a  
30af 3a be 30			ld a, (.dmark+1)  
30b2 32 a1 fd			ld (debug_mark+1),a  
30b5 3a bf 30			ld a, (.dmark+2)  
30b8 32 a2 fd			ld (debug_mark+2),a  
30bb 18 03			jr .pastdmark  
30bd ..			.dmark: db "IF5"  
30c0 f1			.pastdmark: pop af  
30c1			endm  
# End of macro DMARK
30c1						CALLMONITOR 
30c1 cd aa fd			call debug_vector  
30c4				endm  
# End of macro CALLMONITOR
30c4					endif 
30c4				; replace below with ) exec using tok_ptr 
30c4 22 f7 f3			ld (os_tok_ptr), hl 
30c7 c3 c2 24			jp exec1 
30ca			 
30ca .. 00			.closepar:   db ")",0 
30cc			 
30cc				       NEXTW 
30cc c3 39 24			jp macro_next 
30cf				endm 
# End of macro NEXTW
30cf			.COMC: 
30cf				CWHEAD .SCRATCH 91 ")" 1 WORD_FLAG_CODE 
30cf 6f				db WORD_SYS_CORE+91             
30d0 d8 30			dw .SCRATCH            
30d2 02				db 1 + 1 
30d3 .. 00			db ")",0              
30d5				endm 
# End of macro CWHEAD
30d5			; | ) ( -- )  End of comment |  DONE  
30d5				       NEXTW 
30d5 c3 39 24			jp macro_next 
30d8				endm 
# End of macro NEXTW
30d8			 
30d8			.SCRATCH: 
30d8				CWHEAD .INC 91 "SCRATCH" 7 WORD_FLAG_CODE 
30d8 6f				db WORD_SYS_CORE+91             
30d9 13 31			dw .INC            
30db 08				db 7 + 1 
30dc .. 00			db "SCRATCH",0              
30e4				endm 
# End of macro CWHEAD
30e4			; | SCRATCH ( u -- addr ) Pushes address of offset u to stack | DONE 
30e4			; | | The scratch area provides 32 word array. Can be used as single byte or as a word by passing the offset on stack. Pushes the resulting address to stack.  
30e4			; | | When used with the direct storage writing/malloc and the !@ or word versions it is possible to construct an expanded and flexible variable system 
30e4			; | |  
30e4			; | | e.g.    : score $00 scratch ; 
30e4			; | |  
30e4			; | | $00 score ! 
30e4			; | | $01 score +! 
30e4			; | |  
30e4			; | | e.g.   : varword $0a scratch ;  
30e4			; | | 
30e4			; | | $8000 varword ! 
30e4					if DEBUG_FORTH_WORDS_KEY 
30e4						DMARK "SCR" 
30e4 f5				push af  
30e5 3a f9 30			ld a, (.dmark)  
30e8 32 a0 fd			ld (debug_mark),a  
30eb 3a fa 30			ld a, (.dmark+1)  
30ee 32 a1 fd			ld (debug_mark+1),a  
30f1 3a fb 30			ld a, (.dmark+2)  
30f4 32 a2 fd			ld (debug_mark+2),a  
30f7 18 03			jr .pastdmark  
30f9 ..			.dmark: db "SCR"  
30fc f1			.pastdmark: pop af  
30fd			endm  
# End of macro DMARK
30fd						CALLMONITOR 
30fd cd aa fd			call debug_vector  
3100				endm  
# End of macro CALLMONITOR
3100					endif 
3100			 
3100					FORTH_DSP_VALUEHL 
3100 cd 4d 22			call macro_dsp_valuehl 
3103				endm 
# End of macro FORTH_DSP_VALUEHL
3103				 
3103					FORTH_DSP_POP 
3103 cd 05 23			call macro_forth_dsp_pop 
3106				endm 
# End of macro FORTH_DSP_POP
3106			 
3106 7d					ld a, l 
3107 21 1b f6				ld hl, os_var_array 
310a cd de 0f				call addatohl 
310d			 
310d cd 48 20				call forth_push_numhl 
3110			 
3110				       NEXTW 
3110 c3 39 24			jp macro_next 
3113				endm 
# End of macro NEXTW
3113			 
3113			.INC: 
3113				CWHEAD .DEC 91 "+!" 2 WORD_FLAG_CODE 
3113 6f				db WORD_SYS_CORE+91             
3114 69 31			dw .DEC            
3116 03				db 2 + 1 
3117 .. 00			db "+!",0              
311a				endm 
# End of macro CWHEAD
311a			; | +! ( u a -- )  Increment byte at address a by the value u | DONE 
311a					if DEBUG_FORTH_WORDS_KEY 
311a						DMARK "+s_" 
311a f5				push af  
311b 3a 2f 31			ld a, (.dmark)  
311e 32 a0 fd			ld (debug_mark),a  
3121 3a 30 31			ld a, (.dmark+1)  
3124 32 a1 fd			ld (debug_mark+1),a  
3127 3a 31 31			ld a, (.dmark+2)  
312a 32 a2 fd			ld (debug_mark+2),a  
312d 18 03			jr .pastdmark  
312f ..			.dmark: db "+s_"  
3132 f1			.pastdmark: pop af  
3133			endm  
# End of macro DMARK
3133						CALLMONITOR 
3133 cd aa fd			call debug_vector  
3136				endm  
# End of macro CALLMONITOR
3136					endif 
3136			 
3136					FORTH_DSP_VALUEHL 
3136 cd 4d 22			call macro_dsp_valuehl 
3139				endm 
# End of macro FORTH_DSP_VALUEHL
3139			 
3139 e5					push hl   ; save address 
313a			 
313a					FORTH_DSP_POP 
313a cd 05 23			call macro_forth_dsp_pop 
313d				endm 
# End of macro FORTH_DSP_POP
313d			 
313d					FORTH_DSP_VALUEHL 
313d cd 4d 22			call macro_dsp_valuehl 
3140				endm 
# End of macro FORTH_DSP_VALUEHL
3140			 
3140 e5					push hl 
3141					FORTH_DSP_POP 
3141 cd 05 23			call macro_forth_dsp_pop 
3144				endm 
# End of macro FORTH_DSP_POP
3144 e1					pop hl 
3145			 
3145					; hl contains value to add to byte at a 
3145				 
3145 eb					ex de, hl 
3146			 
3146 e1					pop hl 
3147			 
3147					if DEBUG_FORTH_WORDS 
3147						DMARK "INC" 
3147 f5				push af  
3148 3a 5c 31			ld a, (.dmark)  
314b 32 a0 fd			ld (debug_mark),a  
314e 3a 5d 31			ld a, (.dmark+1)  
3151 32 a1 fd			ld (debug_mark+1),a  
3154 3a 5e 31			ld a, (.dmark+2)  
3157 32 a2 fd			ld (debug_mark+2),a  
315a 18 03			jr .pastdmark  
315c ..			.dmark: db "INC"  
315f f1			.pastdmark: pop af  
3160			endm  
# End of macro DMARK
3160						CALLMONITOR 
3160 cd aa fd			call debug_vector  
3163				endm  
# End of macro CALLMONITOR
3163					endif 
3163			 
3163 7e					ld a,(hl) 
3164 83					add e 
3165 77					ld (hl),a 
3166			 
3166			 
3166			 
3166				       NEXTW 
3166 c3 39 24			jp macro_next 
3169				endm 
# End of macro NEXTW
3169			 
3169			.DEC: 
3169				CWHEAD .INC2 91 "-!" 2 WORD_FLAG_CODE 
3169 6f				db WORD_SYS_CORE+91             
316a bd 31			dw .INC2            
316c 03				db 2 + 1 
316d .. 00			db "-!",0              
3170				endm 
# End of macro CWHEAD
3170			; | -! ( u a -- )  Decrement byte at address a by the value u | DONE 
3170					if DEBUG_FORTH_WORDS_KEY 
3170						DMARK "-s_" 
3170 f5				push af  
3171 3a 85 31			ld a, (.dmark)  
3174 32 a0 fd			ld (debug_mark),a  
3177 3a 86 31			ld a, (.dmark+1)  
317a 32 a1 fd			ld (debug_mark+1),a  
317d 3a 87 31			ld a, (.dmark+2)  
3180 32 a2 fd			ld (debug_mark+2),a  
3183 18 03			jr .pastdmark  
3185 ..			.dmark: db "-s_"  
3188 f1			.pastdmark: pop af  
3189			endm  
# End of macro DMARK
3189						CALLMONITOR 
3189 cd aa fd			call debug_vector  
318c				endm  
# End of macro CALLMONITOR
318c					endif 
318c			 
318c					FORTH_DSP_VALUEHL 
318c cd 4d 22			call macro_dsp_valuehl 
318f				endm 
# End of macro FORTH_DSP_VALUEHL
318f			 
318f e5					push hl   ; save address 
3190			 
3190					FORTH_DSP_POP 
3190 cd 05 23			call macro_forth_dsp_pop 
3193				endm 
# End of macro FORTH_DSP_POP
3193			 
3193					FORTH_DSP_VALUEHL 
3193 cd 4d 22			call macro_dsp_valuehl 
3196				endm 
# End of macro FORTH_DSP_VALUEHL
3196			 
3196					; hl contains value to add to byte at a 
3196				 
3196 eb					ex de, hl 
3197			 
3197 e1					pop hl 
3198			 
3198					if DEBUG_FORTH_WORDS 
3198						DMARK "DEC" 
3198 f5				push af  
3199 3a ad 31			ld a, (.dmark)  
319c 32 a0 fd			ld (debug_mark),a  
319f 3a ae 31			ld a, (.dmark+1)  
31a2 32 a1 fd			ld (debug_mark+1),a  
31a5 3a af 31			ld a, (.dmark+2)  
31a8 32 a2 fd			ld (debug_mark+2),a  
31ab 18 03			jr .pastdmark  
31ad ..			.dmark: db "DEC"  
31b0 f1			.pastdmark: pop af  
31b1			endm  
# End of macro DMARK
31b1						CALLMONITOR 
31b1 cd aa fd			call debug_vector  
31b4				endm  
# End of macro CALLMONITOR
31b4					endif 
31b4			 
31b4 7e					ld a,(hl) 
31b5 93					sub e 
31b6 77					ld (hl),a 
31b7			 
31b7			 
31b7					FORTH_DSP_POP 
31b7 cd 05 23			call macro_forth_dsp_pop 
31ba				endm 
# End of macro FORTH_DSP_POP
31ba			 
31ba				       NEXTW 
31ba c3 39 24			jp macro_next 
31bd				endm 
# End of macro NEXTW
31bd			 
31bd			.INC2: 
31bd				CWHEAD .DEC2 91 "+2!" 3 WORD_FLAG_CODE 
31bd 6f				db WORD_SYS_CORE+91             
31be 6a 32			dw .DEC2            
31c0 04				db 3 + 1 
31c1 .. 00			db "+2!",0              
31c5				endm 
# End of macro CWHEAD
31c5			; | +2! ( u a -- )  Increment word at address a by the value u | DONE 
31c5			 
31c5					if DEBUG_FORTH_WORDS_KEY 
31c5						DMARK "+2s" 
31c5 f5				push af  
31c6 3a da 31			ld a, (.dmark)  
31c9 32 a0 fd			ld (debug_mark),a  
31cc 3a db 31			ld a, (.dmark+1)  
31cf 32 a1 fd			ld (debug_mark+1),a  
31d2 3a dc 31			ld a, (.dmark+2)  
31d5 32 a2 fd			ld (debug_mark+2),a  
31d8 18 03			jr .pastdmark  
31da ..			.dmark: db "+2s"  
31dd f1			.pastdmark: pop af  
31de			endm  
# End of macro DMARK
31de						CALLMONITOR 
31de cd aa fd			call debug_vector  
31e1				endm  
# End of macro CALLMONITOR
31e1					endif 
31e1			 
31e1					; Address 
31e1			 
31e1					FORTH_DSP_VALUEHL 
31e1 cd 4d 22			call macro_dsp_valuehl 
31e4				endm 
# End of macro FORTH_DSP_VALUEHL
31e4			 
31e4 e5					push hl    ; save address 
31e5			 
31e5					; load content into de 
31e5			 
31e5 5e					ld e,(hl) 
31e6 23					inc hl 
31e7 56					ld d, (hl) 
31e8			 
31e8					if DEBUG_FORTH_WORDS 
31e8						DMARK "+2a" 
31e8 f5				push af  
31e9 3a fd 31			ld a, (.dmark)  
31ec 32 a0 fd			ld (debug_mark),a  
31ef 3a fe 31			ld a, (.dmark+1)  
31f2 32 a1 fd			ld (debug_mark+1),a  
31f5 3a ff 31			ld a, (.dmark+2)  
31f8 32 a2 fd			ld (debug_mark+2),a  
31fb 18 03			jr .pastdmark  
31fd ..			.dmark: db "+2a"  
3200 f1			.pastdmark: pop af  
3201			endm  
# End of macro DMARK
3201						CALLMONITOR 
3201 cd aa fd			call debug_vector  
3204				endm  
# End of macro CALLMONITOR
3204					endif 
3204			 
3204					FORTH_DSP_POP 
3204 cd 05 23			call macro_forth_dsp_pop 
3207				endm 
# End of macro FORTH_DSP_POP
3207			 
3207					; Get value to add 
3207			 
3207					FORTH_DSP_VALUE 
3207 cd 36 22			call macro_forth_dsp_value 
320a				endm 
# End of macro FORTH_DSP_VALUE
320a			 
320a					if DEBUG_FORTH_WORDS 
320a						DMARK "+2v" 
320a f5				push af  
320b 3a 1f 32			ld a, (.dmark)  
320e 32 a0 fd			ld (debug_mark),a  
3211 3a 20 32			ld a, (.dmark+1)  
3214 32 a1 fd			ld (debug_mark+1),a  
3217 3a 21 32			ld a, (.dmark+2)  
321a 32 a2 fd			ld (debug_mark+2),a  
321d 18 03			jr .pastdmark  
321f ..			.dmark: db "+2v"  
3222 f1			.pastdmark: pop af  
3223			endm  
# End of macro DMARK
3223						CALLMONITOR 
3223 cd aa fd			call debug_vector  
3226				endm  
# End of macro CALLMONITOR
3226					endif 
3226			 
3226 19					add hl, de 
3227			 
3227					if DEBUG_FORTH_WORDS 
3227						DMARK "+2+" 
3227 f5				push af  
3228 3a 3c 32			ld a, (.dmark)  
322b 32 a0 fd			ld (debug_mark),a  
322e 3a 3d 32			ld a, (.dmark+1)  
3231 32 a1 fd			ld (debug_mark+1),a  
3234 3a 3e 32			ld a, (.dmark+2)  
3237 32 a2 fd			ld (debug_mark+2),a  
323a 18 03			jr .pastdmark  
323c ..			.dmark: db "+2+"  
323f f1			.pastdmark: pop af  
3240			endm  
# End of macro DMARK
3240						CALLMONITOR 
3240 cd aa fd			call debug_vector  
3243				endm  
# End of macro CALLMONITOR
3243					endif 
3243			 
3243					; move result to de 
3243			 
3243 eb					ex de, hl 
3244			 
3244					; Address 
3244			 
3244 e1					pop hl 
3245			 
3245					; save it back 
3245			 
3245 73					ld (hl), e 
3246 23					inc hl 
3247 72					ld (hl), d 
3248			 
3248					if DEBUG_FORTH_WORDS 
3248						DMARK "+2e" 
3248 f5				push af  
3249 3a 5d 32			ld a, (.dmark)  
324c 32 a0 fd			ld (debug_mark),a  
324f 3a 5e 32			ld a, (.dmark+1)  
3252 32 a1 fd			ld (debug_mark+1),a  
3255 3a 5f 32			ld a, (.dmark+2)  
3258 32 a2 fd			ld (debug_mark+2),a  
325b 18 03			jr .pastdmark  
325d ..			.dmark: db "+2e"  
3260 f1			.pastdmark: pop af  
3261			endm  
# End of macro DMARK
3261						CALLMONITOR 
3261 cd aa fd			call debug_vector  
3264				endm  
# End of macro CALLMONITOR
3264					endif 
3264			 
3264			 
3264			 
3264					FORTH_DSP_POP 
3264 cd 05 23			call macro_forth_dsp_pop 
3267				endm 
# End of macro FORTH_DSP_POP
3267			 
3267			 
3267				       NEXTW 
3267 c3 39 24			jp macro_next 
326a				endm 
# End of macro NEXTW
326a			 
326a			.DEC2: 
326a				CWHEAD .GET2 91 "-2!" 3 WORD_FLAG_CODE 
326a 6f				db WORD_SYS_CORE+91             
326b 19 33			dw .GET2            
326d 04				db 3 + 1 
326e .. 00			db "-2!",0              
3272				endm 
# End of macro CWHEAD
3272			; | -2! ( u a -- )  Decrement word at address a by the value u | DONE 
3272			 
3272			 
3272					if DEBUG_FORTH_WORDS_KEY 
3272						DMARK "-2s" 
3272 f5				push af  
3273 3a 87 32			ld a, (.dmark)  
3276 32 a0 fd			ld (debug_mark),a  
3279 3a 88 32			ld a, (.dmark+1)  
327c 32 a1 fd			ld (debug_mark+1),a  
327f 3a 89 32			ld a, (.dmark+2)  
3282 32 a2 fd			ld (debug_mark+2),a  
3285 18 03			jr .pastdmark  
3287 ..			.dmark: db "-2s"  
328a f1			.pastdmark: pop af  
328b			endm  
# End of macro DMARK
328b						CALLMONITOR 
328b cd aa fd			call debug_vector  
328e				endm  
# End of macro CALLMONITOR
328e					endif 
328e			 
328e					; Address 
328e			 
328e					FORTH_DSP_VALUEHL 
328e cd 4d 22			call macro_dsp_valuehl 
3291				endm 
# End of macro FORTH_DSP_VALUEHL
3291			 
3291 e5					push hl    ; save address 
3292			 
3292					; load content into de 
3292			 
3292 5e					ld e,(hl) 
3293 23					inc hl 
3294 56					ld d, (hl) 
3295			 
3295					if DEBUG_FORTH_WORDS 
3295						DMARK "-2a" 
3295 f5				push af  
3296 3a aa 32			ld a, (.dmark)  
3299 32 a0 fd			ld (debug_mark),a  
329c 3a ab 32			ld a, (.dmark+1)  
329f 32 a1 fd			ld (debug_mark+1),a  
32a2 3a ac 32			ld a, (.dmark+2)  
32a5 32 a2 fd			ld (debug_mark+2),a  
32a8 18 03			jr .pastdmark  
32aa ..			.dmark: db "-2a"  
32ad f1			.pastdmark: pop af  
32ae			endm  
# End of macro DMARK
32ae						CALLMONITOR 
32ae cd aa fd			call debug_vector  
32b1				endm  
# End of macro CALLMONITOR
32b1					endif 
32b1			 
32b1					FORTH_DSP_POP 
32b1 cd 05 23			call macro_forth_dsp_pop 
32b4				endm 
# End of macro FORTH_DSP_POP
32b4			 
32b4					; Get value to remove 
32b4			 
32b4					FORTH_DSP_VALUE 
32b4 cd 36 22			call macro_forth_dsp_value 
32b7				endm 
# End of macro FORTH_DSP_VALUE
32b7			 
32b7					if DEBUG_FORTH_WORDS 
32b7						DMARK "-2v" 
32b7 f5				push af  
32b8 3a cc 32			ld a, (.dmark)  
32bb 32 a0 fd			ld (debug_mark),a  
32be 3a cd 32			ld a, (.dmark+1)  
32c1 32 a1 fd			ld (debug_mark+1),a  
32c4 3a ce 32			ld a, (.dmark+2)  
32c7 32 a2 fd			ld (debug_mark+2),a  
32ca 18 03			jr .pastdmark  
32cc ..			.dmark: db "-2v"  
32cf f1			.pastdmark: pop af  
32d0			endm  
# End of macro DMARK
32d0						CALLMONITOR 
32d0 cd aa fd			call debug_vector  
32d3				endm  
# End of macro CALLMONITOR
32d3					endif 
32d3			 
32d3 eb					ex de, hl 
32d4 ed 52				sbc hl, de 
32d6			 
32d6					if DEBUG_FORTH_WORDS 
32d6						DMARK "-2d" 
32d6 f5				push af  
32d7 3a eb 32			ld a, (.dmark)  
32da 32 a0 fd			ld (debug_mark),a  
32dd 3a ec 32			ld a, (.dmark+1)  
32e0 32 a1 fd			ld (debug_mark+1),a  
32e3 3a ed 32			ld a, (.dmark+2)  
32e6 32 a2 fd			ld (debug_mark+2),a  
32e9 18 03			jr .pastdmark  
32eb ..			.dmark: db "-2d"  
32ee f1			.pastdmark: pop af  
32ef			endm  
# End of macro DMARK
32ef						CALLMONITOR 
32ef cd aa fd			call debug_vector  
32f2				endm  
# End of macro CALLMONITOR
32f2					endif 
32f2			 
32f2					; move result to de 
32f2			 
32f2 eb					ex de, hl 
32f3			 
32f3					; Address 
32f3			 
32f3 e1					pop hl 
32f4			 
32f4					; save it back 
32f4			 
32f4 73					ld (hl), e 
32f5 23					inc hl 
32f6 72					ld (hl), d 
32f7			 
32f7					if DEBUG_FORTH_WORDS 
32f7						DMARK "-2e" 
32f7 f5				push af  
32f8 3a 0c 33			ld a, (.dmark)  
32fb 32 a0 fd			ld (debug_mark),a  
32fe 3a 0d 33			ld a, (.dmark+1)  
3301 32 a1 fd			ld (debug_mark+1),a  
3304 3a 0e 33			ld a, (.dmark+2)  
3307 32 a2 fd			ld (debug_mark+2),a  
330a 18 03			jr .pastdmark  
330c ..			.dmark: db "-2e"  
330f f1			.pastdmark: pop af  
3310			endm  
# End of macro DMARK
3310						CALLMONITOR 
3310 cd aa fd			call debug_vector  
3313				endm  
# End of macro CALLMONITOR
3313					endif 
3313			 
3313			 
3313					FORTH_DSP_POP 
3313 cd 05 23			call macro_forth_dsp_pop 
3316				endm 
# End of macro FORTH_DSP_POP
3316			 
3316			 
3316			 
3316				       NEXTW 
3316 c3 39 24			jp macro_next 
3319				endm 
# End of macro NEXTW
3319			.GET2: 
3319				CWHEAD .BANG2 91 "2@" 2 WORD_FLAG_CODE 
3319 6f				db WORD_SYS_CORE+91             
331a 4e 33			dw .BANG2            
331c 03				db 2 + 1 
331d .. 00			db "2@",0              
3320				endm 
# End of macro CWHEAD
3320			; | 2@ ( a -- u )  Push word at address a onto stack | DONE 
3320					if DEBUG_FORTH_WORDS_KEY 
3320						DMARK "2A_" 
3320 f5				push af  
3321 3a 35 33			ld a, (.dmark)  
3324 32 a0 fd			ld (debug_mark),a  
3327 3a 36 33			ld a, (.dmark+1)  
332a 32 a1 fd			ld (debug_mark+1),a  
332d 3a 37 33			ld a, (.dmark+2)  
3330 32 a2 fd			ld (debug_mark+2),a  
3333 18 03			jr .pastdmark  
3335 ..			.dmark: db "2A_"  
3338 f1			.pastdmark: pop af  
3339			endm  
# End of macro DMARK
3339						CALLMONITOR 
3339 cd aa fd			call debug_vector  
333c				endm  
# End of macro CALLMONITOR
333c					endif 
333c			 
333c					FORTH_DSP_VALUEHL 
333c cd 4d 22			call macro_dsp_valuehl 
333f				endm 
# End of macro FORTH_DSP_VALUEHL
333f			 
333f e5					push hl   ; save address 
3340			 
3340					FORTH_DSP_POP 
3340 cd 05 23			call macro_forth_dsp_pop 
3343				endm 
# End of macro FORTH_DSP_POP
3343			 
3343 e1					pop hl 
3344			 
3344 5e					ld e, (hl) 
3345 23					inc hl 
3346 56					ld d, (hl) 
3347			 
3347 eb					ex de, hl 
3348			 
3348 cd 48 20				call forth_push_numhl 
334b			 
334b				       NEXTW 
334b c3 39 24			jp macro_next 
334e				endm 
# End of macro NEXTW
334e			.BANG2: 
334e				CWHEAD .CONFIG 91 "2!" 2 WORD_FLAG_CODE 
334e 6f				db WORD_SYS_CORE+91             
334f 86 33			dw .CONFIG            
3351 03				db 2 + 1 
3352 .. 00			db "2!",0              
3355				endm 
# End of macro CWHEAD
3355			; | 2! ( u a -- )  Store value u as a word at address a | DONE 
3355					if DEBUG_FORTH_WORDS_KEY 
3355						DMARK "2S_" 
3355 f5				push af  
3356 3a 6a 33			ld a, (.dmark)  
3359 32 a0 fd			ld (debug_mark),a  
335c 3a 6b 33			ld a, (.dmark+1)  
335f 32 a1 fd			ld (debug_mark+1),a  
3362 3a 6c 33			ld a, (.dmark+2)  
3365 32 a2 fd			ld (debug_mark+2),a  
3368 18 03			jr .pastdmark  
336a ..			.dmark: db "2S_"  
336d f1			.pastdmark: pop af  
336e			endm  
# End of macro DMARK
336e						CALLMONITOR 
336e cd aa fd			call debug_vector  
3371				endm  
# End of macro CALLMONITOR
3371					endif 
3371			 
3371					FORTH_DSP_VALUEHL 
3371 cd 4d 22			call macro_dsp_valuehl 
3374				endm 
# End of macro FORTH_DSP_VALUEHL
3374			 
3374 e5					push hl   ; save address 
3375			 
3375			 
3375					FORTH_DSP_POP 
3375 cd 05 23			call macro_forth_dsp_pop 
3378				endm 
# End of macro FORTH_DSP_POP
3378			 
3378					 
3378					FORTH_DSP_VALUEHL 
3378 cd 4d 22			call macro_dsp_valuehl 
337b				endm 
# End of macro FORTH_DSP_VALUEHL
337b			 
337b					FORTH_DSP_POP 
337b cd 05 23			call macro_forth_dsp_pop 
337e				endm 
# End of macro FORTH_DSP_POP
337e			 
337e eb					ex de, hl    ; value now in de 
337f			 
337f e1					pop hl 
3380			 
3380 73					ld (hl), e 
3381			 
3381 23					inc hl 
3382			 
3382 72					ld (hl), d 
3383			 
3383			 
3383				       NEXTW 
3383 c3 39 24			jp macro_next 
3386				endm 
# End of macro NEXTW
3386			.CONFIG: 
3386				CWHEAD .ADTOS 91 "CONFIG" 6 WORD_FLAG_CODE 
3386 6f				db WORD_SYS_CORE+91             
3387 97 33			dw .ADTOS            
3389 07				db 6 + 1 
338a .. 00			db "CONFIG",0              
3391				endm 
# End of macro CWHEAD
3391			; | CONFIG ( -- )  Access the system configuration menu. Set boot from file, hardware diags, and more! | DONE 
3391			 
3391 cd 52 15				call config 
3394					NEXTW 
3394 c3 39 24			jp macro_next 
3397				endm 
# End of macro NEXTW
3397			 
3397			.ADTOS: 
3397				CWHEAD .SBTOS 91 "1+" 2 WORD_FLAG_CODE 
3397 6f				db WORD_SYS_CORE+91             
3398 ad 33			dw .SBTOS            
339a 03				db 2 + 1 
339b .. 00			db "1+",0              
339e				endm 
# End of macro CWHEAD
339e			; | 1+ ( u -- u )  Increment value on TOS | DONE 
339e			 
339e					FORTH_DSP_VALUEHL 
339e cd 4d 22			call macro_dsp_valuehl 
33a1				endm 
# End of macro FORTH_DSP_VALUEHL
33a1 e5					push hl 
33a2			 
33a2					FORTH_DSP_POP 
33a2 cd 05 23			call macro_forth_dsp_pop 
33a5				endm 
# End of macro FORTH_DSP_POP
33a5 e1					pop hl 
33a6			 
33a6 23					inc hl 
33a7 cd 48 20				call forth_push_numhl 
33aa					 
33aa					NEXTW 
33aa c3 39 24			jp macro_next 
33ad				endm 
# End of macro NEXTW
33ad			.SBTOS: 
33ad				CWHEAD .ADSTORE 91 "1-" 2 WORD_FLAG_CODE 
33ad 6f				db WORD_SYS_CORE+91             
33ae c3 33			dw .ADSTORE            
33b0 03				db 2 + 1 
33b1 .. 00			db "1-",0              
33b4				endm 
# End of macro CWHEAD
33b4			; | 1- ( u -- u )  Decrement value on TOS | DONE 
33b4			 
33b4					FORTH_DSP_VALUEHL 
33b4 cd 4d 22			call macro_dsp_valuehl 
33b7				endm 
# End of macro FORTH_DSP_VALUEHL
33b7 e5					push hl 
33b8			 
33b8					FORTH_DSP_POP 
33b8 cd 05 23			call macro_forth_dsp_pop 
33bb				endm 
# End of macro FORTH_DSP_POP
33bb e1					pop hl 
33bc			 
33bc 2b					dec hl 
33bd cd 48 20				call forth_push_numhl 
33c0					 
33c0					NEXTW 
33c0 c3 39 24			jp macro_next 
33c3				endm 
# End of macro NEXTW
33c3			.ADSTORE: 
33c3				CWHEAD .ADWSTORE 91 "1+!" 3 WORD_FLAG_CODE 
33c3 6f				db WORD_SYS_CORE+91             
33c4 d9 33			dw .ADWSTORE            
33c6 04				db 3 + 1 
33c7 .. 00			db "1+!",0              
33cb				endm 
# End of macro CWHEAD
33cb			; | 1+! ( addr -- )  Increment byte at address addr | DONE 
33cb			 
33cb					FORTH_DSP_VALUEHL 
33cb cd 4d 22			call macro_dsp_valuehl 
33ce				endm 
# End of macro FORTH_DSP_VALUEHL
33ce e5					push hl 
33cf			 
33cf					FORTH_DSP_POP 
33cf cd 05 23			call macro_forth_dsp_pop 
33d2				endm 
# End of macro FORTH_DSP_POP
33d2 e1					pop hl 
33d3			 
33d3 7e					ld a, (hl) 
33d4 3c					inc a 
33d5 77					ld (hl), a 
33d6					 
33d6					NEXTW 
33d6 c3 39 24			jp macro_next 
33d9				endm 
# End of macro NEXTW
33d9			.ADWSTORE: 
33d9				CWHEAD .SBSTORE 91 "1+2!" 4 WORD_FLAG_CODE 
33d9 6f				db WORD_SYS_CORE+91             
33da f7 33			dw .SBSTORE            
33dc 05				db 4 + 1 
33dd .. 00			db "1+2!",0              
33e2				endm 
# End of macro CWHEAD
33e2			; | 1+2! ( addr -- )  Increment word at address addr | DONE 
33e2			 
33e2					FORTH_DSP_VALUEHL 
33e2 cd 4d 22			call macro_dsp_valuehl 
33e5				endm 
# End of macro FORTH_DSP_VALUEHL
33e5 e5					push hl 
33e6			 
33e6					FORTH_DSP_POP 
33e6 cd 05 23			call macro_forth_dsp_pop 
33e9				endm 
# End of macro FORTH_DSP_POP
33e9 e1					pop hl 
33ea			 
33ea e5					push hl 
33eb			 
33eb cd bb 23				call loadwordinhl 
33ee 23					inc hl 
33ef			 
33ef d1					pop de 
33f0 eb					ex de, hl 
33f1 73					ld (hl), e 
33f2 23					inc hl 
33f3 72					ld (hl), d 
33f4					 
33f4					NEXTW 
33f4 c3 39 24			jp macro_next 
33f7				endm 
# End of macro NEXTW
33f7			.SBSTORE: 
33f7				CWHEAD .SBWSTORE 91 "1-!" 3 WORD_FLAG_CODE 
33f7 6f				db WORD_SYS_CORE+91             
33f8 0d 34			dw .SBWSTORE            
33fa 04				db 3 + 1 
33fb .. 00			db "1-!",0              
33ff				endm 
# End of macro CWHEAD
33ff			; | 1-! ( addr -- )  Decrement byte at address addr | DONE 
33ff			 
33ff					FORTH_DSP_VALUEHL 
33ff cd 4d 22			call macro_dsp_valuehl 
3402				endm 
# End of macro FORTH_DSP_VALUEHL
3402 e5					push hl 
3403			 
3403					FORTH_DSP_POP 
3403 cd 05 23			call macro_forth_dsp_pop 
3406				endm 
# End of macro FORTH_DSP_POP
3406 e1					pop hl 
3407			 
3407 7e					ld a, (hl) 
3408 3d					dec a 
3409 77					ld (hl), a 
340a					 
340a					NEXTW 
340a c3 39 24			jp macro_next 
340d				endm 
# End of macro NEXTW
340d			.SBWSTORE: 
340d				CWHEAD .ENDCORE 91 "1-2!" 4 WORD_FLAG_CODE 
340d 6f				db WORD_SYS_CORE+91             
340e 2b 34			dw .ENDCORE            
3410 05				db 4 + 1 
3411 .. 00			db "1-2!",0              
3416				endm 
# End of macro CWHEAD
3416			; | 1-2! ( addr -- )  Decrement word at address addr | DONE 
3416			 
3416					FORTH_DSP_VALUEHL 
3416 cd 4d 22			call macro_dsp_valuehl 
3419				endm 
# End of macro FORTH_DSP_VALUEHL
3419 e5					push hl 
341a			 
341a					FORTH_DSP_POP 
341a cd 05 23			call macro_forth_dsp_pop 
341d				endm 
# End of macro FORTH_DSP_POP
341d e1					pop hl 
341e			 
341e e5					push hl 
341f			 
341f cd bb 23				call loadwordinhl 
3422 2b					dec hl 
3423			 
3423 d1					pop de 
3424 eb					ex de, hl 
3425 73					ld (hl), e 
3426 23					inc hl 
3427 72					ld (hl), d 
3428					 
3428					NEXTW 
3428 c3 39 24			jp macro_next 
342b				endm 
# End of macro NEXTW
342b			.ENDCORE: 
342b			 
342b			; eof 
342b			 
342b			 
# End of file forth_words_core.asm
342b			include "forth_words_flow.asm" 
342b			 
342b			; | ## Program Flow Words 
342b			 
342b			.IF: 
342b				CWHEAD .THEN 10 "IF" 2 WORD_FLAG_CODE 
342b 1e				db WORD_SYS_CORE+10             
342c 20 35			dw .THEN            
342e 03				db 2 + 1 
342f .. 00			db "IF",0              
3432				endm 
# End of macro CWHEAD
3432			; | IF ( w -- f ) If TOS is true exec code following up to THEN - Note: currently not supporting ELSE or nested IF | DONE 
3432			; 
3432					if DEBUG_FORTH_WORDS_KEY 
3432						DMARK "IF." 
3432 f5				push af  
3433 3a 47 34			ld a, (.dmark)  
3436 32 a0 fd			ld (debug_mark),a  
3439 3a 48 34			ld a, (.dmark+1)  
343c 32 a1 fd			ld (debug_mark+1),a  
343f 3a 49 34			ld a, (.dmark+2)  
3442 32 a2 fd			ld (debug_mark+2),a  
3445 18 03			jr .pastdmark  
3447 ..			.dmark: db "IF."  
344a f1			.pastdmark: pop af  
344b			endm  
# End of macro DMARK
344b						CALLMONITOR 
344b cd aa fd			call debug_vector  
344e				endm  
# End of macro CALLMONITOR
344e					endif 
344e			; eval TOS 
344e			 
344e				FORTH_DSP_VALUEHL 
344e cd 4d 22			call macro_dsp_valuehl 
3451				endm 
# End of macro FORTH_DSP_VALUEHL
3451			 
3451			;	push hl 
3451				FORTH_DSP_POP 
3451 cd 05 23			call macro_forth_dsp_pop 
3454				endm 
# End of macro FORTH_DSP_POP
3454			;	pop hl 
3454			 
3454					if DEBUG_FORTH_WORDS 
3454						DMARK "IF1" 
3454 f5				push af  
3455 3a 69 34			ld a, (.dmark)  
3458 32 a0 fd			ld (debug_mark),a  
345b 3a 6a 34			ld a, (.dmark+1)  
345e 32 a1 fd			ld (debug_mark+1),a  
3461 3a 6b 34			ld a, (.dmark+2)  
3464 32 a2 fd			ld (debug_mark+2),a  
3467 18 03			jr .pastdmark  
3469 ..			.dmark: db "IF1"  
346c f1			.pastdmark: pop af  
346d			endm  
# End of macro DMARK
346d						CALLMONITOR 
346d cd aa fd			call debug_vector  
3470				endm  
# End of macro CALLMONITOR
3470					endif 
3470 b7				or a        ; clear carry flag 
3471 11 00 00			ld de, 0 
3474 eb				ex de,hl 
3475 ed 52			sbc hl, de 
3477 c2 01 35			jp nz, .iftrue 
347a			 
347a					if DEBUG_FORTH_WORDS 
347a						DMARK "IF2" 
347a f5				push af  
347b 3a 8f 34			ld a, (.dmark)  
347e 32 a0 fd			ld (debug_mark),a  
3481 3a 90 34			ld a, (.dmark+1)  
3484 32 a1 fd			ld (debug_mark+1),a  
3487 3a 91 34			ld a, (.dmark+2)  
348a 32 a2 fd			ld (debug_mark+2),a  
348d 18 03			jr .pastdmark  
348f ..			.dmark: db "IF2"  
3492 f1			.pastdmark: pop af  
3493			endm  
# End of macro DMARK
3493						CALLMONITOR 
3493 cd aa fd			call debug_vector  
3496				endm  
# End of macro CALLMONITOR
3496					endif 
3496			 
3496			; if not true then skip to THEN 
3496			 
3496				; TODO get tok_ptr 
3496				; TODO consume toks until we get to THEN 
3496			 
3496 2a f7 f3			ld hl, (os_tok_ptr) 
3499					if DEBUG_FORTH_WORDS 
3499						DMARK "IF3" 
3499 f5				push af  
349a 3a ae 34			ld a, (.dmark)  
349d 32 a0 fd			ld (debug_mark),a  
34a0 3a af 34			ld a, (.dmark+1)  
34a3 32 a1 fd			ld (debug_mark+1),a  
34a6 3a b0 34			ld a, (.dmark+2)  
34a9 32 a2 fd			ld (debug_mark+2),a  
34ac 18 03			jr .pastdmark  
34ae ..			.dmark: db "IF3"  
34b1 f1			.pastdmark: pop af  
34b2			endm  
# End of macro DMARK
34b2						CALLMONITOR 
34b2 cd aa fd			call debug_vector  
34b5				endm  
# End of macro CALLMONITOR
34b5						 
34b5					endif 
34b5 11 fc 34			ld de, .ifthen 
34b8					if DEBUG_FORTH_WORDS 
34b8						DMARK "IF4" 
34b8 f5				push af  
34b9 3a cd 34			ld a, (.dmark)  
34bc 32 a0 fd			ld (debug_mark),a  
34bf 3a ce 34			ld a, (.dmark+1)  
34c2 32 a1 fd			ld (debug_mark+1),a  
34c5 3a cf 34			ld a, (.dmark+2)  
34c8 32 a2 fd			ld (debug_mark+2),a  
34cb 18 03			jr .pastdmark  
34cd ..			.dmark: db "IF4"  
34d0 f1			.pastdmark: pop af  
34d1			endm  
# End of macro DMARK
34d1						CALLMONITOR 
34d1 cd aa fd			call debug_vector  
34d4				endm  
# End of macro CALLMONITOR
34d4					endif 
34d4 cd 40 25			call findnexttok  
34d7			 
34d7					if DEBUG_FORTH_WORDS 
34d7						DMARK "IF5" 
34d7 f5				push af  
34d8 3a ec 34			ld a, (.dmark)  
34db 32 a0 fd			ld (debug_mark),a  
34de 3a ed 34			ld a, (.dmark+1)  
34e1 32 a1 fd			ld (debug_mark+1),a  
34e4 3a ee 34			ld a, (.dmark+2)  
34e7 32 a2 fd			ld (debug_mark+2),a  
34ea 18 03			jr .pastdmark  
34ec ..			.dmark: db "IF5"  
34ef f1			.pastdmark: pop af  
34f0			endm  
# End of macro DMARK
34f0						CALLMONITOR 
34f0 cd aa fd			call debug_vector  
34f3				endm  
# End of macro CALLMONITOR
34f3					endif 
34f3				; TODO replace below with ; exec using tok_ptr 
34f3 22 f7 f3			ld (os_tok_ptr), hl 
34f6 c3 c2 24			jp exec1 
34f9				NEXTW 
34f9 c3 39 24			jp macro_next 
34fc				endm 
# End of macro NEXTW
34fc			 
34fc .. 00		.ifthen:  db "THEN",0 
3501			 
3501			.iftrue:		 
3501				; Exec next words normally 
3501			 
3501				; if true then exec following IF as normal 
3501					if DEBUG_FORTH_WORDS 
3501						DMARK "IFT" 
3501 f5				push af  
3502 3a 16 35			ld a, (.dmark)  
3505 32 a0 fd			ld (debug_mark),a  
3508 3a 17 35			ld a, (.dmark+1)  
350b 32 a1 fd			ld (debug_mark+1),a  
350e 3a 18 35			ld a, (.dmark+2)  
3511 32 a2 fd			ld (debug_mark+2),a  
3514 18 03			jr .pastdmark  
3516 ..			.dmark: db "IFT"  
3519 f1			.pastdmark: pop af  
351a			endm  
# End of macro DMARK
351a						CALLMONITOR 
351a cd aa fd			call debug_vector  
351d				endm  
# End of macro CALLMONITOR
351d					endif 
351d			 
351d					NEXTW 
351d c3 39 24			jp macro_next 
3520				endm 
# End of macro NEXTW
3520			.THEN: 
3520				CWHEAD .ELSE 11 "THEN" 4 WORD_FLAG_CODE 
3520 1f				db WORD_SYS_CORE+11             
3521 48 35			dw .ELSE            
3523 05				db 4 + 1 
3524 .. 00			db "THEN",0              
3529				endm 
# End of macro CWHEAD
3529			; | THEN ( -- ) Does nothing. It is a marker for the end of an IF block | DONE 
3529					if DEBUG_FORTH_WORDS_KEY 
3529						DMARK "THN" 
3529 f5				push af  
352a 3a 3e 35			ld a, (.dmark)  
352d 32 a0 fd			ld (debug_mark),a  
3530 3a 3f 35			ld a, (.dmark+1)  
3533 32 a1 fd			ld (debug_mark+1),a  
3536 3a 40 35			ld a, (.dmark+2)  
3539 32 a2 fd			ld (debug_mark+2),a  
353c 18 03			jr .pastdmark  
353e ..			.dmark: db "THN"  
3541 f1			.pastdmark: pop af  
3542			endm  
# End of macro DMARK
3542						CALLMONITOR 
3542 cd aa fd			call debug_vector  
3545				endm  
# End of macro CALLMONITOR
3545					endif 
3545					NEXTW 
3545 c3 39 24			jp macro_next 
3548				endm 
# End of macro NEXTW
3548			.ELSE: 
3548				CWHEAD .DO 12 "ELSE" 2 WORD_FLAG_CODE 
3548 20				db WORD_SYS_CORE+12             
3549 70 35			dw .DO            
354b 03				db 2 + 1 
354c .. 00			db "ELSE",0              
3551				endm 
# End of macro CWHEAD
3551			; | ELSE ( -- ) Not supported - does nothing | TODO 
3551			 
3551					if DEBUG_FORTH_WORDS_KEY 
3551						DMARK "ELS" 
3551 f5				push af  
3552 3a 66 35			ld a, (.dmark)  
3555 32 a0 fd			ld (debug_mark),a  
3558 3a 67 35			ld a, (.dmark+1)  
355b 32 a1 fd			ld (debug_mark+1),a  
355e 3a 68 35			ld a, (.dmark+2)  
3561 32 a2 fd			ld (debug_mark+2),a  
3564 18 03			jr .pastdmark  
3566 ..			.dmark: db "ELS"  
3569 f1			.pastdmark: pop af  
356a			endm  
# End of macro DMARK
356a						CALLMONITOR 
356a cd aa fd			call debug_vector  
356d				endm  
# End of macro CALLMONITOR
356d					endif 
356d			 
356d			 
356d					NEXTW 
356d c3 39 24			jp macro_next 
3570				endm 
# End of macro NEXTW
3570			.DO: 
3570				CWHEAD .LOOP 13 "DO" 2 WORD_FLAG_CODE 
3570 21				db WORD_SYS_CORE+13             
3571 97 36			dw .LOOP            
3573 03				db 2 + 1 
3574 .. 00			db "DO",0              
3577				endm 
# End of macro CWHEAD
3577			; | DO ( u1 u2 -- ) Loop starting at u2 with a limit of u1 | DONE 
3577			 
3577					if DEBUG_FORTH_WORDS_KEY 
3577						DMARK "DO." 
3577 f5				push af  
3578 3a 8c 35			ld a, (.dmark)  
357b 32 a0 fd			ld (debug_mark),a  
357e 3a 8d 35			ld a, (.dmark+1)  
3581 32 a1 fd			ld (debug_mark+1),a  
3584 3a 8e 35			ld a, (.dmark+2)  
3587 32 a2 fd			ld (debug_mark+2),a  
358a 18 03			jr .pastdmark  
358c ..			.dmark: db "DO."  
358f f1			.pastdmark: pop af  
3590			endm  
# End of macro DMARK
3590						CALLMONITOR 
3590 cd aa fd			call debug_vector  
3593				endm  
# End of macro CALLMONITOR
3593					endif 
3593			;  push pc to rsp stack past the DO 
3593			 
3593 2a f7 f3				ld hl, (os_tok_ptr) 
3596 23					inc hl   ; D 
3597 23					inc hl  ; O 
3598 23					inc hl   ; null 
3599					if DEBUG_FORTH_WORDS 
3599						DMARK "DO2" 
3599 f5				push af  
359a 3a ae 35			ld a, (.dmark)  
359d 32 a0 fd			ld (debug_mark),a  
35a0 3a af 35			ld a, (.dmark+1)  
35a3 32 a1 fd			ld (debug_mark+1),a  
35a6 3a b0 35			ld a, (.dmark+2)  
35a9 32 a2 fd			ld (debug_mark+2),a  
35ac 18 03			jr .pastdmark  
35ae ..			.dmark: db "DO2"  
35b1 f1			.pastdmark: pop af  
35b2			endm  
# End of macro DMARK
35b2						CALLMONITOR 
35b2 cd aa fd			call debug_vector  
35b5				endm  
# End of macro CALLMONITOR
35b5					endif 
35b5					FORTH_RSP_NEXT 
35b5 cd ef 1f			call macro_forth_rsp_next 
35b8				endm 
# End of macro FORTH_RSP_NEXT
35b8					if DEBUG_FORTH_WORDS 
35b8						DMARK "DO3" 
35b8 f5				push af  
35b9 3a cd 35			ld a, (.dmark)  
35bc 32 a0 fd			ld (debug_mark),a  
35bf 3a ce 35			ld a, (.dmark+1)  
35c2 32 a1 fd			ld (debug_mark+1),a  
35c5 3a cf 35			ld a, (.dmark+2)  
35c8 32 a2 fd			ld (debug_mark+2),a  
35cb 18 03			jr .pastdmark  
35cd ..			.dmark: db "DO3"  
35d0 f1			.pastdmark: pop af  
35d1			endm  
# End of macro DMARK
35d1						CALLMONITOR 
35d1 cd aa fd			call debug_vector  
35d4				endm  
# End of macro CALLMONITOR
35d4					endif 
35d4			 
35d4					;if DEBUG_FORTH_WORDS 
35d4				;		push hl 
35d4			;		endif  
35d4			 
35d4			; get counters from data stack 
35d4			 
35d4			 
35d4					FORTH_DSP_VALUEHL 
35d4 cd 4d 22			call macro_dsp_valuehl 
35d7				endm 
# End of macro FORTH_DSP_VALUEHL
35d7 e5					push hl		 ; hl now has starting counter which needs to be tos 
35d8			 
35d8					if DEBUG_FORTH_WORDS 
35d8						DMARK "DO4" 
35d8 f5				push af  
35d9 3a ed 35			ld a, (.dmark)  
35dc 32 a0 fd			ld (debug_mark),a  
35df 3a ee 35			ld a, (.dmark+1)  
35e2 32 a1 fd			ld (debug_mark+1),a  
35e5 3a ef 35			ld a, (.dmark+2)  
35e8 32 a2 fd			ld (debug_mark+2),a  
35eb 18 03			jr .pastdmark  
35ed ..			.dmark: db "DO4"  
35f0 f1			.pastdmark: pop af  
35f1			endm  
# End of macro DMARK
35f1						CALLMONITOR 
35f1 cd aa fd			call debug_vector  
35f4				endm  
# End of macro CALLMONITOR
35f4					endif 
35f4					FORTH_DSP_POP 
35f4 cd 05 23			call macro_forth_dsp_pop 
35f7				endm 
# End of macro FORTH_DSP_POP
35f7			 
35f7					if DEBUG_FORTH_WORDS 
35f7						DMARK "DO5" 
35f7 f5				push af  
35f8 3a 0c 36			ld a, (.dmark)  
35fb 32 a0 fd			ld (debug_mark),a  
35fe 3a 0d 36			ld a, (.dmark+1)  
3601 32 a1 fd			ld (debug_mark+1),a  
3604 3a 0e 36			ld a, (.dmark+2)  
3607 32 a2 fd			ld (debug_mark+2),a  
360a 18 03			jr .pastdmark  
360c ..			.dmark: db "DO5"  
360f f1			.pastdmark: pop af  
3610			endm  
# End of macro DMARK
3610						CALLMONITOR 
3610 cd aa fd			call debug_vector  
3613				endm  
# End of macro CALLMONITOR
3613					endif 
3613			 
3613					FORTH_DSP_VALUEHL 
3613 cd 4d 22			call macro_dsp_valuehl 
3616				endm 
# End of macro FORTH_DSP_VALUEHL
3616			;		push hl		 ; hl now has starting limit counter 
3616			 
3616					if DEBUG_FORTH_WORDS 
3616						DMARK "DO6" 
3616 f5				push af  
3617 3a 2b 36			ld a, (.dmark)  
361a 32 a0 fd			ld (debug_mark),a  
361d 3a 2c 36			ld a, (.dmark+1)  
3620 32 a1 fd			ld (debug_mark+1),a  
3623 3a 2d 36			ld a, (.dmark+2)  
3626 32 a2 fd			ld (debug_mark+2),a  
3629 18 03			jr .pastdmark  
362b ..			.dmark: db "DO6"  
362e f1			.pastdmark: pop af  
362f			endm  
# End of macro DMARK
362f						CALLMONITOR 
362f cd aa fd			call debug_vector  
3632				endm  
# End of macro CALLMONITOR
3632					endif 
3632					FORTH_DSP_POP 
3632 cd 05 23			call macro_forth_dsp_pop 
3635				endm 
# End of macro FORTH_DSP_POP
3635			 
3635			; put counters on the loop stack 
3635			 
3635			;		pop hl			 ; limit counter 
3635 d1					pop de			; start counter 
3636			 
3636					; push limit counter 
3636			 
3636					if DEBUG_FORTH_WORDS 
3636						DMARK "DO7" 
3636 f5				push af  
3637 3a 4b 36			ld a, (.dmark)  
363a 32 a0 fd			ld (debug_mark),a  
363d 3a 4c 36			ld a, (.dmark+1)  
3640 32 a1 fd			ld (debug_mark+1),a  
3643 3a 4d 36			ld a, (.dmark+2)  
3646 32 a2 fd			ld (debug_mark+2),a  
3649 18 03			jr .pastdmark  
364b ..			.dmark: db "DO7"  
364e f1			.pastdmark: pop af  
364f			endm  
# End of macro DMARK
364f						CALLMONITOR 
364f cd aa fd			call debug_vector  
3652				endm  
# End of macro CALLMONITOR
3652					endif 
3652					FORTH_LOOP_NEXT 
3652 cd 7e 22			call macro_forth_loop_next 
3655				endm 
# End of macro FORTH_LOOP_NEXT
3655			 
3655					; push start counter 
3655			 
3655 eb					ex de, hl 
3656					if DEBUG_FORTH_WORDS 
3656						DMARK "DO7" 
3656 f5				push af  
3657 3a 6b 36			ld a, (.dmark)  
365a 32 a0 fd			ld (debug_mark),a  
365d 3a 6c 36			ld a, (.dmark+1)  
3660 32 a1 fd			ld (debug_mark+1),a  
3663 3a 6d 36			ld a, (.dmark+2)  
3666 32 a2 fd			ld (debug_mark+2),a  
3669 18 03			jr .pastdmark  
366b ..			.dmark: db "DO7"  
366e f1			.pastdmark: pop af  
366f			endm  
# End of macro DMARK
366f						CALLMONITOR 
366f cd aa fd			call debug_vector  
3672				endm  
# End of macro CALLMONITOR
3672					endif 
3672					FORTH_LOOP_NEXT 
3672 cd 7e 22			call macro_forth_loop_next 
3675				endm 
# End of macro FORTH_LOOP_NEXT
3675			 
3675			 
3675					; init first round of I counter 
3675			 
3675 22 1b f4				ld (os_current_i), hl 
3678			 
3678					if DEBUG_FORTH_WORDS 
3678						DMARK "DO8" 
3678 f5				push af  
3679 3a 8d 36			ld a, (.dmark)  
367c 32 a0 fd			ld (debug_mark),a  
367f 3a 8e 36			ld a, (.dmark+1)  
3682 32 a1 fd			ld (debug_mark+1),a  
3685 3a 8f 36			ld a, (.dmark+2)  
3688 32 a2 fd			ld (debug_mark+2),a  
368b 18 03			jr .pastdmark  
368d ..			.dmark: db "DO8"  
3690 f1			.pastdmark: pop af  
3691			endm  
# End of macro DMARK
3691						CALLMONITOR 
3691 cd aa fd			call debug_vector  
3694				endm  
# End of macro CALLMONITOR
3694					endif 
3694			 
3694					NEXTW 
3694 c3 39 24			jp macro_next 
3697				endm 
# End of macro NEXTW
3697			.LOOP: 
3697				CWHEAD .I 14 "LOOP" 4 WORD_FLAG_CODE 
3697 22				db WORD_SYS_CORE+14             
3698 af 37			dw .I            
369a 05				db 4 + 1 
369b .. 00			db "LOOP",0              
36a0				endm 
# End of macro CWHEAD
36a0			; | LOOP ( -- ) Increment and test loop counter  | DONE 
36a0			 
36a0				; pop tos as current loop count to hl 
36a0			 
36a0				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
36a0			 
36a0				FORTH_LOOP_TOS 
36a0 cd b1 22			call macro_forth_loop_tos 
36a3				endm 
# End of macro FORTH_LOOP_TOS
36a3 e5				push hl 
36a4			 
36a4					if DEBUG_FORTH_WORDS_KEY 
36a4						DMARK "LOP" 
36a4 f5				push af  
36a5 3a b9 36			ld a, (.dmark)  
36a8 32 a0 fd			ld (debug_mark),a  
36ab 3a ba 36			ld a, (.dmark+1)  
36ae 32 a1 fd			ld (debug_mark+1),a  
36b1 3a bb 36			ld a, (.dmark+2)  
36b4 32 a2 fd			ld (debug_mark+2),a  
36b7 18 03			jr .pastdmark  
36b9 ..			.dmark: db "LOP"  
36bc f1			.pastdmark: pop af  
36bd			endm  
# End of macro DMARK
36bd						CALLMONITOR 
36bd cd aa fd			call debug_vector  
36c0				endm  
# End of macro CALLMONITOR
36c0					endif 
36c0				; next item on the stack is the limit. get it 
36c0			 
36c0			 
36c0				FORTH_LOOP_POP 
36c0 cd bb 22			call macro_forth_loop_pop 
36c3				endm 
# End of macro FORTH_LOOP_POP
36c3			 
36c3				FORTH_LOOP_TOS 
36c3 cd b1 22			call macro_forth_loop_tos 
36c6				endm 
# End of macro FORTH_LOOP_TOS
36c6			 
36c6 d1				pop de		 ; de = i, hl = limit 
36c7			 
36c7					if DEBUG_FORTH_WORDS 
36c7						DMARK "LP1" 
36c7 f5				push af  
36c8 3a dc 36			ld a, (.dmark)  
36cb 32 a0 fd			ld (debug_mark),a  
36ce 3a dd 36			ld a, (.dmark+1)  
36d1 32 a1 fd			ld (debug_mark+1),a  
36d4 3a de 36			ld a, (.dmark+2)  
36d7 32 a2 fd			ld (debug_mark+2),a  
36da 18 03			jr .pastdmark  
36dc ..			.dmark: db "LP1"  
36df f1			.pastdmark: pop af  
36e0			endm  
# End of macro DMARK
36e0						CALLMONITOR 
36e0 cd aa fd			call debug_vector  
36e3				endm  
# End of macro CALLMONITOR
36e3					endif 
36e3			 
36e3				; go back to previous word 
36e3			 
36e3 d5				push de    ; save I for inc later 
36e4			 
36e4			 
36e4				; get limit 
36e4				;  is I at limit? 
36e4			 
36e4			 
36e4					if DEBUG_FORTH_WORDS 
36e4						DMARK "LP1" 
36e4 f5				push af  
36e5 3a f9 36			ld a, (.dmark)  
36e8 32 a0 fd			ld (debug_mark),a  
36eb 3a fa 36			ld a, (.dmark+1)  
36ee 32 a1 fd			ld (debug_mark+1),a  
36f1 3a fb 36			ld a, (.dmark+2)  
36f4 32 a2 fd			ld (debug_mark+2),a  
36f7 18 03			jr .pastdmark  
36f9 ..			.dmark: db "LP1"  
36fc f1			.pastdmark: pop af  
36fd			endm  
# End of macro DMARK
36fd						CALLMONITOR 
36fd cd aa fd			call debug_vector  
3700				endm  
# End of macro CALLMONITOR
3700					endif 
3700			 
3700 ed 52			sbc hl, de 
3702			 
3702			 
3702				;  if at limit pop both limit and current off stack do NEXT and get rid of saved DO 
3702			 
3702 20 26				jr nz, .loopnotdone 
3704			 
3704 e1				pop hl   ; get rid of saved I 
3705				FORTH_LOOP_POP     ; get rid of limit 
3705 cd bb 22			call macro_forth_loop_pop 
3708				endm 
# End of macro FORTH_LOOP_POP
3708			 
3708				FORTH_RSP_POP     ; get rid of DO ptr 
3708 cd 10 20			call macro_forth_rsp_pop 
370b				endm 
# End of macro FORTH_RSP_POP
370b			 
370b			if DEBUG_FORTH_WORDS 
370b						DMARK "LP>" 
370b f5				push af  
370c 3a 20 37			ld a, (.dmark)  
370f 32 a0 fd			ld (debug_mark),a  
3712 3a 21 37			ld a, (.dmark+1)  
3715 32 a1 fd			ld (debug_mark+1),a  
3718 3a 22 37			ld a, (.dmark+2)  
371b 32 a2 fd			ld (debug_mark+2),a  
371e 18 03			jr .pastdmark  
3720 ..			.dmark: db "LP>"  
3723 f1			.pastdmark: pop af  
3724			endm  
# End of macro DMARK
3724				CALLMONITOR 
3724 cd aa fd			call debug_vector  
3727				endm  
# End of macro CALLMONITOR
3727			endif 
3727			 
3727					NEXTW 
3727 c3 39 24			jp macro_next 
372a				endm 
# End of macro NEXTW
372a				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
372a			 
372a			.loopnotdone: 
372a			 
372a e1				pop hl    ; get I 
372b 23				inc hl 
372c			 
372c			   	; save new I 
372c			 
372c			 
372c					; set I counter 
372c			 
372c 22 1b f4				ld (os_current_i), hl 
372f			 
372f					if DEBUG_FORTH_WORDS 
372f						DMARK "LPN" 
372f f5				push af  
3730 3a 44 37			ld a, (.dmark)  
3733 32 a0 fd			ld (debug_mark),a  
3736 3a 45 37			ld a, (.dmark+1)  
3739 32 a1 fd			ld (debug_mark+1),a  
373c 3a 46 37			ld a, (.dmark+2)  
373f 32 a2 fd			ld (debug_mark+2),a  
3742 18 03			jr .pastdmark  
3744 ..			.dmark: db "LPN"  
3747 f1			.pastdmark: pop af  
3748			endm  
# End of macro DMARK
3748					CALLMONITOR 
3748 cd aa fd			call debug_vector  
374b				endm  
# End of macro CALLMONITOR
374b					endif 
374b					 
374b				FORTH_LOOP_NEXT 
374b cd 7e 22			call macro_forth_loop_next 
374e				endm 
# End of macro FORTH_LOOP_NEXT
374e			 
374e			 
374e					if DEBUG_FORTH_WORDS 
374e eb						ex de,hl 
374f					endif 
374f			 
374f			;	; get DO ptr 
374f			; 
374f					if DEBUG_FORTH_WORDS 
374f						DMARK "LP7" 
374f f5				push af  
3750 3a 64 37			ld a, (.dmark)  
3753 32 a0 fd			ld (debug_mark),a  
3756 3a 65 37			ld a, (.dmark+1)  
3759 32 a1 fd			ld (debug_mark+1),a  
375c 3a 66 37			ld a, (.dmark+2)  
375f 32 a2 fd			ld (debug_mark+2),a  
3762 18 03			jr .pastdmark  
3764 ..			.dmark: db "LP7"  
3767 f1			.pastdmark: pop af  
3768			endm  
# End of macro DMARK
3768					CALLMONITOR 
3768 cd aa fd			call debug_vector  
376b				endm  
# End of macro CALLMONITOR
376b					endif 
376b				FORTH_RSP_TOS 
376b cd 06 20			call macro_forth_rsp_tos 
376e				endm 
# End of macro FORTH_RSP_TOS
376e			 
376e					if DEBUG_FORTH_WORDS 
376e						DMARK "LP8" 
376e f5				push af  
376f 3a 83 37			ld a, (.dmark)  
3772 32 a0 fd			ld (debug_mark),a  
3775 3a 84 37			ld a, (.dmark+1)  
3778 32 a1 fd			ld (debug_mark+1),a  
377b 3a 85 37			ld a, (.dmark+2)  
377e 32 a2 fd			ld (debug_mark+2),a  
3781 18 03			jr .pastdmark  
3783 ..			.dmark: db "LP8"  
3786 f1			.pastdmark: pop af  
3787			endm  
# End of macro DMARK
3787					CALLMONITOR 
3787 cd aa fd			call debug_vector  
378a				endm  
# End of macro CALLMONITOR
378a					endif 
378a				;push hl 
378a			 
378a				; not going to DO any more 
378a				; get rid of the RSP pointer as DO will add it back in 
378a				;FORTH_RSP_POP 
378a				;pop hl 
378a			 
378a				;ld hl,(cli_ret_sp) 
378a				;ld e, (hl) 
378a				;inc hl 
378a				;ld d, (hl) 
378a				;ex de,hl 
378a 22 f7 f3			ld (os_tok_ptr), hl 
378d					if DEBUG_FORTH_WORDS 
378d						DMARK "LP<" 
378d f5				push af  
378e 3a a2 37			ld a, (.dmark)  
3791 32 a0 fd			ld (debug_mark),a  
3794 3a a3 37			ld a, (.dmark+1)  
3797 32 a1 fd			ld (debug_mark+1),a  
379a 3a a4 37			ld a, (.dmark+2)  
379d 32 a2 fd			ld (debug_mark+2),a  
37a0 18 03			jr .pastdmark  
37a2 ..			.dmark: db "LP<"  
37a5 f1			.pastdmark: pop af  
37a6			endm  
# End of macro DMARK
37a6					CALLMONITOR 
37a6 cd aa fd			call debug_vector  
37a9				endm  
# End of macro CALLMONITOR
37a9				endif 
37a9 c3 c2 24			jp exec1 
37ac			 
37ac					 
37ac			 
37ac			 
37ac					NEXTW 
37ac c3 39 24			jp macro_next 
37af				endm 
# End of macro NEXTW
37af			.I:  
37af			 
37af				CWHEAD .DLOOP 74 "I" 1 WORD_FLAG_CODE 
37af 5e				db WORD_SYS_CORE+74             
37b0 da 37			dw .DLOOP            
37b2 02				db 1 + 1 
37b3 .. 00			db "I",0              
37b5				endm 
# End of macro CWHEAD
37b5			; | I ( -- ) Current loop counter | DONE 
37b5					if DEBUG_FORTH_WORDS_KEY 
37b5						DMARK "I.." 
37b5 f5				push af  
37b6 3a ca 37			ld a, (.dmark)  
37b9 32 a0 fd			ld (debug_mark),a  
37bc 3a cb 37			ld a, (.dmark+1)  
37bf 32 a1 fd			ld (debug_mark+1),a  
37c2 3a cc 37			ld a, (.dmark+2)  
37c5 32 a2 fd			ld (debug_mark+2),a  
37c8 18 03			jr .pastdmark  
37ca ..			.dmark: db "I.."  
37cd f1			.pastdmark: pop af  
37ce			endm  
# End of macro DMARK
37ce						CALLMONITOR 
37ce cd aa fd			call debug_vector  
37d1				endm  
# End of macro CALLMONITOR
37d1					endif 
37d1			 
37d1 2a 1b f4				ld hl,(os_current_i) 
37d4 cd 48 20				call forth_push_numhl 
37d7			 
37d7					NEXTW 
37d7 c3 39 24			jp macro_next 
37da				endm 
# End of macro NEXTW
37da			.DLOOP: 
37da				CWHEAD .REPEAT 75 "-LOOP" 5 WORD_FLAG_CODE 
37da 5f				db WORD_SYS_CORE+75             
37db bb 38			dw .REPEAT            
37dd 06				db 5 + 1 
37de .. 00			db "-LOOP",0              
37e4				endm 
# End of macro CWHEAD
37e4			; | -LOOP ( -- ) Decrement and test loop counter  | DONE 
37e4				; pop tos as current loop count to hl 
37e4					if DEBUG_FORTH_WORDS_KEY 
37e4						DMARK "-LP" 
37e4 f5				push af  
37e5 3a f9 37			ld a, (.dmark)  
37e8 32 a0 fd			ld (debug_mark),a  
37eb 3a fa 37			ld a, (.dmark+1)  
37ee 32 a1 fd			ld (debug_mark+1),a  
37f1 3a fb 37			ld a, (.dmark+2)  
37f4 32 a2 fd			ld (debug_mark+2),a  
37f7 18 03			jr .pastdmark  
37f9 ..			.dmark: db "-LP"  
37fc f1			.pastdmark: pop af  
37fd			endm  
# End of macro DMARK
37fd						CALLMONITOR 
37fd cd aa fd			call debug_vector  
3800				endm  
# End of macro CALLMONITOR
3800					endif 
3800			 
3800				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
3800			 
3800				FORTH_LOOP_TOS 
3800 cd b1 22			call macro_forth_loop_tos 
3803				endm 
# End of macro FORTH_LOOP_TOS
3803 e5				push hl 
3804			 
3804					if DEBUG_FORTH_WORDS 
3804						DMARK "-LP" 
3804 f5				push af  
3805 3a 19 38			ld a, (.dmark)  
3808 32 a0 fd			ld (debug_mark),a  
380b 3a 1a 38			ld a, (.dmark+1)  
380e 32 a1 fd			ld (debug_mark+1),a  
3811 3a 1b 38			ld a, (.dmark+2)  
3814 32 a2 fd			ld (debug_mark+2),a  
3817 18 03			jr .pastdmark  
3819 ..			.dmark: db "-LP"  
381c f1			.pastdmark: pop af  
381d			endm  
# End of macro DMARK
381d						CALLMONITOR 
381d cd aa fd			call debug_vector  
3820				endm  
# End of macro CALLMONITOR
3820					endif 
3820				; next item on the stack is the limit. get it 
3820			 
3820			 
3820				FORTH_LOOP_POP 
3820 cd bb 22			call macro_forth_loop_pop 
3823				endm 
# End of macro FORTH_LOOP_POP
3823			 
3823				FORTH_LOOP_TOS 
3823 cd b1 22			call macro_forth_loop_tos 
3826				endm 
# End of macro FORTH_LOOP_TOS
3826			 
3826 d1				pop de		 ; de = i, hl = limit 
3827			 
3827					if DEBUG_FORTH_WORDS 
3827						DMARK "-L1" 
3827 f5				push af  
3828 3a 3c 38			ld a, (.dmark)  
382b 32 a0 fd			ld (debug_mark),a  
382e 3a 3d 38			ld a, (.dmark+1)  
3831 32 a1 fd			ld (debug_mark+1),a  
3834 3a 3e 38			ld a, (.dmark+2)  
3837 32 a2 fd			ld (debug_mark+2),a  
383a 18 03			jr .pastdmark  
383c ..			.dmark: db "-L1"  
383f f1			.pastdmark: pop af  
3840			endm  
# End of macro DMARK
3840						CALLMONITOR 
3840 cd aa fd			call debug_vector  
3843				endm  
# End of macro CALLMONITOR
3843					endif 
3843			 
3843				; go back to previous word 
3843			 
3843 d5				push de    ; save I for inc later 
3844			 
3844			 
3844				; get limit 
3844				;  is I at limit? 
3844			 
3844			 
3844					if DEBUG_FORTH_WORDS 
3844						DMARK "-L1" 
3844 f5				push af  
3845 3a 59 38			ld a, (.dmark)  
3848 32 a0 fd			ld (debug_mark),a  
384b 3a 5a 38			ld a, (.dmark+1)  
384e 32 a1 fd			ld (debug_mark+1),a  
3851 3a 5b 38			ld a, (.dmark+2)  
3854 32 a2 fd			ld (debug_mark+2),a  
3857 18 03			jr .pastdmark  
3859 ..			.dmark: db "-L1"  
385c f1			.pastdmark: pop af  
385d			endm  
# End of macro DMARK
385d						CALLMONITOR 
385d cd aa fd			call debug_vector  
3860				endm  
# End of macro CALLMONITOR
3860					endif 
3860			 
3860 ed 52			sbc hl, de 
3862			 
3862			 
3862				;  if at limit pop both limit and current off stack do NEXT and get rid of saved DO 
3862			 
3862 20 26				jr nz, .mloopnotdone 
3864			 
3864 e1				pop hl   ; get rid of saved I 
3865				FORTH_LOOP_POP     ; get rid of limit 
3865 cd bb 22			call macro_forth_loop_pop 
3868				endm 
# End of macro FORTH_LOOP_POP
3868			 
3868				FORTH_RSP_POP     ; get rid of DO ptr 
3868 cd 10 20			call macro_forth_rsp_pop 
386b				endm 
# End of macro FORTH_RSP_POP
386b			 
386b			if DEBUG_FORTH_WORDS 
386b						DMARK "-L>" 
386b f5				push af  
386c 3a 80 38			ld a, (.dmark)  
386f 32 a0 fd			ld (debug_mark),a  
3872 3a 81 38			ld a, (.dmark+1)  
3875 32 a1 fd			ld (debug_mark+1),a  
3878 3a 82 38			ld a, (.dmark+2)  
387b 32 a2 fd			ld (debug_mark+2),a  
387e 18 03			jr .pastdmark  
3880 ..			.dmark: db "-L>"  
3883 f1			.pastdmark: pop af  
3884			endm  
# End of macro DMARK
3884				CALLMONITOR 
3884 cd aa fd			call debug_vector  
3887				endm  
# End of macro CALLMONITOR
3887			endif 
3887			 
3887					NEXTW 
3887 c3 39 24			jp macro_next 
388a				endm 
# End of macro NEXTW
388a				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
388a			 
388a			.mloopnotdone: 
388a			 
388a e1				pop hl    ; get I 
388b 2b				dec hl 
388c			 
388c			   	; save new I 
388c			 
388c			 
388c					; set I counter 
388c			 
388c 22 1b f4				ld (os_current_i), hl 
388f			 
388f					 
388f				FORTH_LOOP_NEXT 
388f cd 7e 22			call macro_forth_loop_next 
3892				endm 
# End of macro FORTH_LOOP_NEXT
3892			 
3892			 
3892					if DEBUG_FORTH_WORDS 
3892 eb						ex de,hl 
3893					endif 
3893			 
3893			;	; get DO ptr 
3893			; 
3893				FORTH_RSP_TOS 
3893 cd 06 20			call macro_forth_rsp_tos 
3896				endm 
# End of macro FORTH_RSP_TOS
3896			 
3896				;push hl 
3896			 
3896				; not going to DO any more 
3896				; get rid of the RSP pointer as DO will add it back in 
3896				;FORTH_RSP_POP 
3896				;pop hl 
3896			 
3896			 
3896 22 f7 f3			ld (os_tok_ptr), hl 
3899					if DEBUG_FORTH_WORDS 
3899						DMARK "-L<" 
3899 f5				push af  
389a 3a ae 38			ld a, (.dmark)  
389d 32 a0 fd			ld (debug_mark),a  
38a0 3a af 38			ld a, (.dmark+1)  
38a3 32 a1 fd			ld (debug_mark+1),a  
38a6 3a b0 38			ld a, (.dmark+2)  
38a9 32 a2 fd			ld (debug_mark+2),a  
38ac 18 03			jr .pastdmark  
38ae ..			.dmark: db "-L<"  
38b1 f1			.pastdmark: pop af  
38b2			endm  
# End of macro DMARK
38b2					CALLMONITOR 
38b2 cd aa fd			call debug_vector  
38b5				endm  
# End of macro CALLMONITOR
38b5				endif 
38b5 c3 c2 24			jp exec1 
38b8			 
38b8					 
38b8			 
38b8			 
38b8			 
38b8				NEXTW 
38b8 c3 39 24			jp macro_next 
38bb				endm 
# End of macro NEXTW
38bb			 
38bb			 
38bb			 
38bb			 
38bb			.REPEAT: 
38bb				CWHEAD .UNTIL 93 "REPEAT" 5 WORD_FLAG_CODE 
38bb 71				db WORD_SYS_CORE+93             
38bc 0e 39			dw .UNTIL            
38be 06				db 5 + 1 
38bf .. 00			db "REPEAT",0              
38c6				endm 
# End of macro CWHEAD
38c6			; | REPEAT ( --  ) Start REPEAT...UNTIL loop  | DONE 
38c6			;  push pc to rsp stack past the REPEAT 
38c6					if DEBUG_FORTH_WORDS_KEY 
38c6						DMARK "REP" 
38c6 f5				push af  
38c7 3a db 38			ld a, (.dmark)  
38ca 32 a0 fd			ld (debug_mark),a  
38cd 3a dc 38			ld a, (.dmark+1)  
38d0 32 a1 fd			ld (debug_mark+1),a  
38d3 3a dd 38			ld a, (.dmark+2)  
38d6 32 a2 fd			ld (debug_mark+2),a  
38d9 18 03			jr .pastdmark  
38db ..			.dmark: db "REP"  
38de f1			.pastdmark: pop af  
38df			endm  
# End of macro DMARK
38df						CALLMONITOR 
38df cd aa fd			call debug_vector  
38e2				endm  
# End of macro CALLMONITOR
38e2					endif 
38e2			 
38e2 2a f7 f3				ld hl, (os_tok_ptr) 
38e5 23					inc hl   ; R 
38e6 23					inc hl  ; E 
38e7 23					inc hl   ; P 
38e8 23					inc hl   ; E 
38e9 23					inc hl   ; A 
38ea 23					inc hl   ; T 
38eb 23					inc hl   ; zero 
38ec					FORTH_RSP_NEXT 
38ec cd ef 1f			call macro_forth_rsp_next 
38ef				endm 
# End of macro FORTH_RSP_NEXT
38ef			 
38ef			 
38ef					if DEBUG_FORTH_WORDS 
38ef						DMARK "REP" 
38ef f5				push af  
38f0 3a 04 39			ld a, (.dmark)  
38f3 32 a0 fd			ld (debug_mark),a  
38f6 3a 05 39			ld a, (.dmark+1)  
38f9 32 a1 fd			ld (debug_mark+1),a  
38fc 3a 06 39			ld a, (.dmark+2)  
38ff 32 a2 fd			ld (debug_mark+2),a  
3902 18 03			jr .pastdmark  
3904 ..			.dmark: db "REP"  
3907 f1			.pastdmark: pop af  
3908			endm  
# End of macro DMARK
3908						;pop bc    ; TODO BUG ?????? what is this for???? 
3908						CALLMONITOR 
3908 cd aa fd			call debug_vector  
390b				endm  
# End of macro CALLMONITOR
390b					endif 
390b			 
390b					NEXTW 
390b c3 39 24			jp macro_next 
390e				endm 
# End of macro NEXTW
390e			;	       NEXTW 
390e			 
390e			.UNTIL: 
390e				CWHEAD .ENDFLOW 94 "UNTIL" 5 WORD_FLAG_CODE 
390e 72				db WORD_SYS_CORE+94             
390f a5 39			dw .ENDFLOW            
3911 06				db 5 + 1 
3912 .. 00			db "UNTIL",0              
3918				endm 
# End of macro CWHEAD
3918			; | UNTIL ( u -- ) Exit REPEAT...UNTIL loop if TOS is false  | DONE 
3918			 
3918				; pop tos as check 
3918			 
3918				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
3918			 
3918				FORTH_DSP_VALUEHL 
3918 cd 4d 22			call macro_dsp_valuehl 
391b				endm 
# End of macro FORTH_DSP_VALUEHL
391b			 
391b					if DEBUG_FORTH_WORDS_KEY 
391b						DMARK "UNT" 
391b f5				push af  
391c 3a 30 39			ld a, (.dmark)  
391f 32 a0 fd			ld (debug_mark),a  
3922 3a 31 39			ld a, (.dmark+1)  
3925 32 a1 fd			ld (debug_mark+1),a  
3928 3a 32 39			ld a, (.dmark+2)  
392b 32 a2 fd			ld (debug_mark+2),a  
392e 18 03			jr .pastdmark  
3930 ..			.dmark: db "UNT"  
3933 f1			.pastdmark: pop af  
3934			endm  
# End of macro DMARK
3934						CALLMONITOR 
3934 cd aa fd			call debug_vector  
3937				endm  
# End of macro CALLMONITOR
3937					endif 
3937			 
3937			;	push hl 
3937				FORTH_DSP_POP 
3937 cd 05 23			call macro_forth_dsp_pop 
393a				endm 
# End of macro FORTH_DSP_POP
393a			 
393a			;	pop hl 
393a			 
393a				; test if true 
393a			 
393a cd 07 10			call ishlzero 
393d			;	ld a,l 
393d			;	add h 
393d			; 
393d			;	cp 0 
393d			 
393d 20 3e			jr nz, .untilnotdone 
393f			 
393f					if DEBUG_FORTH_WORDS 
393f						DMARK "UNf" 
393f f5				push af  
3940 3a 54 39			ld a, (.dmark)  
3943 32 a0 fd			ld (debug_mark),a  
3946 3a 55 39			ld a, (.dmark+1)  
3949 32 a1 fd			ld (debug_mark+1),a  
394c 3a 56 39			ld a, (.dmark+2)  
394f 32 a2 fd			ld (debug_mark+2),a  
3952 18 03			jr .pastdmark  
3954 ..			.dmark: db "UNf"  
3957 f1			.pastdmark: pop af  
3958			endm  
# End of macro DMARK
3958						CALLMONITOR 
3958 cd aa fd			call debug_vector  
395b				endm  
# End of macro CALLMONITOR
395b					endif 
395b			 
395b			 
395b			 
395b				FORTH_RSP_POP     ; get rid of DO ptr 
395b cd 10 20			call macro_forth_rsp_pop 
395e				endm 
# End of macro FORTH_RSP_POP
395e			 
395e			if DEBUG_FORTH_WORDS 
395e						DMARK "UN>" 
395e f5				push af  
395f 3a 73 39			ld a, (.dmark)  
3962 32 a0 fd			ld (debug_mark),a  
3965 3a 74 39			ld a, (.dmark+1)  
3968 32 a1 fd			ld (debug_mark+1),a  
396b 3a 75 39			ld a, (.dmark+2)  
396e 32 a2 fd			ld (debug_mark+2),a  
3971 18 03			jr .pastdmark  
3973 ..			.dmark: db "UN>"  
3976 f1			.pastdmark: pop af  
3977			endm  
# End of macro DMARK
3977				CALLMONITOR 
3977 cd aa fd			call debug_vector  
397a				endm  
# End of macro CALLMONITOR
397a			endif 
397a			 
397a					NEXTW 
397a c3 39 24			jp macro_next 
397d				endm 
# End of macro NEXTW
397d				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
397d			 
397d			.untilnotdone: 
397d			 
397d			 
397d			;	; get DO ptr 
397d			; 
397d				FORTH_RSP_TOS 
397d cd 06 20			call macro_forth_rsp_tos 
3980				endm 
# End of macro FORTH_RSP_TOS
3980			 
3980				;push hl 
3980			 
3980				; not going to DO any more 
3980				; get rid of the RSP pointer as DO will add it back in 
3980				;FORTH_RSP_POP 
3980				;pop hl 
3980			 
3980			 
3980 22 f7 f3			ld (os_tok_ptr), hl 
3983					if DEBUG_FORTH_WORDS 
3983						DMARK "UN<" 
3983 f5				push af  
3984 3a 98 39			ld a, (.dmark)  
3987 32 a0 fd			ld (debug_mark),a  
398a 3a 99 39			ld a, (.dmark+1)  
398d 32 a1 fd			ld (debug_mark+1),a  
3990 3a 9a 39			ld a, (.dmark+2)  
3993 32 a2 fd			ld (debug_mark+2),a  
3996 18 03			jr .pastdmark  
3998 ..			.dmark: db "UN<"  
399b f1			.pastdmark: pop af  
399c			endm  
# End of macro DMARK
399c					CALLMONITOR 
399c cd aa fd			call debug_vector  
399f				endm  
# End of macro CALLMONITOR
399f				endif 
399f c3 c2 24			jp exec1 
39a2			 
39a2					 
39a2			 
39a2			 
39a2					NEXTW 
39a2 c3 39 24			jp macro_next 
39a5				endm 
# End of macro NEXTW
39a5			 
39a5			 
39a5			.ENDFLOW: 
39a5			 
39a5			; eof 
39a5			 
# End of file forth_words_flow.asm
39a5			; TODO something wrong with the first word of the next word group. no matter which group applies. On device, sc114 is fine. bad memory? 
39a5			include "forth_words_logic.asm" 
39a5			 
39a5			; | ## Logic Words 
39a5			 
39a5			.NOT: 
39a5				CWHEAD .IS 25 "NOT" 3 WORD_FLAG_CODE 
39a5 2d				db WORD_SYS_CORE+25             
39a6 ed 39			dw .IS            
39a8 04				db 3 + 1 
39a9 .. 00			db "NOT",0              
39ad				endm 
# End of macro CWHEAD
39ad			; | NOT ( u  -- u ) Inverse true/false on stack | DONE 
39ad					if DEBUG_FORTH_WORDS_KEY 
39ad						DMARK "NOT" 
39ad f5				push af  
39ae 3a c2 39			ld a, (.dmark)  
39b1 32 a0 fd			ld (debug_mark),a  
39b4 3a c3 39			ld a, (.dmark+1)  
39b7 32 a1 fd			ld (debug_mark+1),a  
39ba 3a c4 39			ld a, (.dmark+2)  
39bd 32 a2 fd			ld (debug_mark+2),a  
39c0 18 03			jr .pastdmark  
39c2 ..			.dmark: db "NOT"  
39c5 f1			.pastdmark: pop af  
39c6			endm  
# End of macro DMARK
39c6						CALLMONITOR 
39c6 cd aa fd			call debug_vector  
39c9				endm  
# End of macro CALLMONITOR
39c9					endif 
39c9					FORTH_DSP 
39c9 cd 13 22			call macro_forth_dsp 
39cc				endm 
# End of macro FORTH_DSP
39cc 7e					ld a,(hl)	; get type of value on TOS 
39cd fe 02				cp DS_TYPE_INUM  
39cf 28 03				jr z, .noti 
39d1					NEXTW 
39d1 c3 39 24			jp macro_next 
39d4				endm 
# End of macro NEXTW
39d4			.noti:          FORTH_DSP_VALUEHL 
39d4 cd 4d 22			call macro_dsp_valuehl 
39d7				endm 
# End of macro FORTH_DSP_VALUEHL
39d7			;		push hl 
39d7					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
39d7 cd 05 23			call macro_forth_dsp_pop 
39da				endm 
# End of macro FORTH_DSP_POP
39da			;		pop hl 
39da 3e 00				ld a,0 
39dc bd					cp l 
39dd 28 04				jr z, .not2t 
39df 2e 00				ld l, 0 
39e1 18 02				jr .notip 
39e3			 
39e3 2e ff		.not2t:		ld l, 255 
39e5			 
39e5 26 00		.notip:		ld h, 0	 
39e7			 
39e7 cd 48 20				call forth_push_numhl 
39ea					NEXTW 
39ea c3 39 24			jp macro_next 
39ed				endm 
# End of macro NEXTW
39ed			 
39ed			.IS: 
39ed				CWHEAD .LZERO 25 "IS" 2 WORD_FLAG_CODE 
39ed 2d				db WORD_SYS_CORE+25             
39ee 13 3a			dw .LZERO            
39f0 03				db 2 + 1 
39f1 .. 00			db "IS",0              
39f4				endm 
# End of macro CWHEAD
39f4			; | IS ( s1 s2  -- f ) Push true if string s1 is the same as s2 | TODO 
39f4					if DEBUG_FORTH_WORDS_KEY 
39f4						DMARK "IS." 
39f4 f5				push af  
39f5 3a 09 3a			ld a, (.dmark)  
39f8 32 a0 fd			ld (debug_mark),a  
39fb 3a 0a 3a			ld a, (.dmark+1)  
39fe 32 a1 fd			ld (debug_mark+1),a  
3a01 3a 0b 3a			ld a, (.dmark+2)  
3a04 32 a2 fd			ld (debug_mark+2),a  
3a07 18 03			jr .pastdmark  
3a09 ..			.dmark: db "IS."  
3a0c f1			.pastdmark: pop af  
3a0d			endm  
# End of macro DMARK
3a0d						CALLMONITOR 
3a0d cd aa fd			call debug_vector  
3a10				endm  
# End of macro CALLMONITOR
3a10					endif 
3a10					NEXTW 
3a10 c3 39 24			jp macro_next 
3a13				endm 
# End of macro NEXTW
3a13			.LZERO: 
3a13				CWHEAD .TZERO 25 "0<" 2 WORD_FLAG_CODE 
3a13 2d				db WORD_SYS_CORE+25             
3a14 1d 3a			dw .TZERO            
3a16 03				db 2 + 1 
3a17 .. 00			db "0<",0              
3a1a				endm 
# End of macro CWHEAD
3a1a			; | 0< ( u -- f ) Push true if u is less than o | CANT DO UNTIL FLOAT 
3a1a					NEXTW 
3a1a c3 39 24			jp macro_next 
3a1d				endm 
# End of macro NEXTW
3a1d			.TZERO: 
3a1d				CWHEAD .LESS 26 "0=" 2 WORD_FLAG_CODE 
3a1d 2e				db WORD_SYS_CORE+26             
3a1e 64 3a			dw .LESS            
3a20 03				db 2 + 1 
3a21 .. 00			db "0=",0              
3a24				endm 
# End of macro CWHEAD
3a24			; | 0= ( u -- f ) Push true if u equals 0 | DONE 
3a24				; TODO add floating point number detection 
3a24					;v5 FORTH_DSP_VALUE 
3a24					if DEBUG_FORTH_WORDS_KEY 
3a24						DMARK "0=." 
3a24 f5				push af  
3a25 3a 39 3a			ld a, (.dmark)  
3a28 32 a0 fd			ld (debug_mark),a  
3a2b 3a 3a 3a			ld a, (.dmark+1)  
3a2e 32 a1 fd			ld (debug_mark+1),a  
3a31 3a 3b 3a			ld a, (.dmark+2)  
3a34 32 a2 fd			ld (debug_mark+2),a  
3a37 18 03			jr .pastdmark  
3a39 ..			.dmark: db "0=."  
3a3c f1			.pastdmark: pop af  
3a3d			endm  
# End of macro DMARK
3a3d						CALLMONITOR 
3a3d cd aa fd			call debug_vector  
3a40				endm  
# End of macro CALLMONITOR
3a40					endif 
3a40					FORTH_DSP 
3a40 cd 13 22			call macro_forth_dsp 
3a43				endm 
# End of macro FORTH_DSP
3a43 7e					ld a,(hl)	; get type of value on TOS 
3a44 fe 02				cp DS_TYPE_INUM  
3a46 28 00				jr z, .tz_inum 
3a48			 
3a48				if FORTH_ENABLE_FLOATMATH 
3a48					jr .tz_done 
3a48			 
3a48				endif 
3a48					 
3a48			 
3a48			.tz_inum: 
3a48					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3a48 cd 4d 22			call macro_dsp_valuehl 
3a4b				endm 
# End of macro FORTH_DSP_VALUEHL
3a4b			 
3a4b			;		push hl 
3a4b			 
3a4b					; destroy value TOS 
3a4b			 
3a4b					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3a4b cd 05 23			call macro_forth_dsp_pop 
3a4e				endm 
# End of macro FORTH_DSP_POP
3a4e			 
3a4e			;		pop hl 
3a4e			 
3a4e 3e 00				ld a,0 
3a50			 
3a50 bd					cp l 
3a51 20 08				jr nz, .tz_notzero 
3a53			 
3a53 bc					cp h 
3a54			 
3a54 20 05				jr nz, .tz_notzero 
3a56			 
3a56			 
3a56 21 01 00				ld hl, FORTH_TRUE 
3a59 18 03				jr .tz_done 
3a5b			 
3a5b 21 00 00		.tz_notzero:	ld hl, FORTH_FALSE 
3a5e			 
3a5e					; push value back onto stack for another op etc 
3a5e			 
3a5e			.tz_done: 
3a5e cd 48 20				call forth_push_numhl 
3a61			 
3a61					NEXTW 
3a61 c3 39 24			jp macro_next 
3a64				endm 
# End of macro NEXTW
3a64			.LESS: 
3a64				CWHEAD .GT 27 "<" 1 WORD_FLAG_CODE 
3a64 2f				db WORD_SYS_CORE+27             
3a65 cd 3a			dw .GT            
3a67 02				db 1 + 1 
3a68 .. 00			db "<",0              
3a6a				endm 
# End of macro CWHEAD
3a6a			; | < ( u1 u2 -- f ) True if u1 is less than u2 | DONE 
3a6a				; TODO add floating point number detection 
3a6a					if DEBUG_FORTH_WORDS_KEY 
3a6a						DMARK "LES" 
3a6a f5				push af  
3a6b 3a 7f 3a			ld a, (.dmark)  
3a6e 32 a0 fd			ld (debug_mark),a  
3a71 3a 80 3a			ld a, (.dmark+1)  
3a74 32 a1 fd			ld (debug_mark+1),a  
3a77 3a 81 3a			ld a, (.dmark+2)  
3a7a 32 a2 fd			ld (debug_mark+2),a  
3a7d 18 03			jr .pastdmark  
3a7f ..			.dmark: db "LES"  
3a82 f1			.pastdmark: pop af  
3a83			endm  
# End of macro DMARK
3a83						CALLMONITOR 
3a83 cd aa fd			call debug_vector  
3a86				endm  
# End of macro CALLMONITOR
3a86					endif 
3a86					FORTH_DSP 
3a86 cd 13 22			call macro_forth_dsp 
3a89				endm 
# End of macro FORTH_DSP
3a89					;v5 FORTH_DSP_VALUE 
3a89 7e					ld a,(hl)	; get type of value on TOS 
3a8a fe 02				cp DS_TYPE_INUM  
3a8c 28 00				jr z, .less_inum 
3a8e			 
3a8e				if FORTH_ENABLE_FLOATMATH 
3a8e					jr .less_done 
3a8e			 
3a8e				endif 
3a8e					 
3a8e			 
3a8e			.less_inum: 
3a8e					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3a8e cd 4d 22			call macro_dsp_valuehl 
3a91				endm 
# End of macro FORTH_DSP_VALUEHL
3a91			 
3a91 e5					push hl  ; u2 
3a92			 
3a92					; destroy value TOS 
3a92			 
3a92					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3a92 cd 05 23			call macro_forth_dsp_pop 
3a95				endm 
# End of macro FORTH_DSP_POP
3a95			 
3a95			 
3a95					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3a95 cd 4d 22			call macro_dsp_valuehl 
3a98				endm 
# End of macro FORTH_DSP_VALUEHL
3a98			 
3a98 e5					push hl    ; u1 
3a99			 
3a99					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3a99 cd 05 23			call macro_forth_dsp_pop 
3a9c				endm 
# End of macro FORTH_DSP_POP
3a9c			 
3a9c			 
3a9c b7			 or a      ;clear carry flag 
3a9d 01 00 00		 ld bc, FORTH_FALSE 
3aa0 e1			  pop hl    ; u1 
3aa1 d1			  pop de    ; u2 
3aa2 ed 52		  sbc hl,de 
3aa4 30 03		  jr nc,.lscont   	;	if hl >= de, carry flag will be cleared 
3aa6			 
3aa6 01 01 00		 ld bc, FORTH_TRUE 
3aa9			.lscont:  
3aa9 c5					push bc 
3aaa e1					pop hl 
3aab			 
3aab					if DEBUG_FORTH_WORDS 
3aab						DMARK "LT1" 
3aab f5				push af  
3aac 3a c0 3a			ld a, (.dmark)  
3aaf 32 a0 fd			ld (debug_mark),a  
3ab2 3a c1 3a			ld a, (.dmark+1)  
3ab5 32 a1 fd			ld (debug_mark+1),a  
3ab8 3a c2 3a			ld a, (.dmark+2)  
3abb 32 a2 fd			ld (debug_mark+2),a  
3abe 18 03			jr .pastdmark  
3ac0 ..			.dmark: db "LT1"  
3ac3 f1			.pastdmark: pop af  
3ac4			endm  
# End of macro DMARK
3ac4						CALLMONITOR 
3ac4 cd aa fd			call debug_vector  
3ac7				endm  
# End of macro CALLMONITOR
3ac7					endif 
3ac7 cd 48 20				call forth_push_numhl 
3aca			 
3aca					NEXTW 
3aca c3 39 24			jp macro_next 
3acd				endm 
# End of macro NEXTW
3acd			.GT: 
3acd				CWHEAD .EQUAL 28 ">" 1 WORD_FLAG_CODE 
3acd 30				db WORD_SYS_CORE+28             
3ace 36 3b			dw .EQUAL            
3ad0 02				db 1 + 1 
3ad1 .. 00			db ">",0              
3ad3				endm 
# End of macro CWHEAD
3ad3			; | > ( u1 u2 -- f ) True if u1 is greater than u2 | DONE 
3ad3				; TODO add floating point number detection 
3ad3					if DEBUG_FORTH_WORDS_KEY 
3ad3						DMARK "GRT" 
3ad3 f5				push af  
3ad4 3a e8 3a			ld a, (.dmark)  
3ad7 32 a0 fd			ld (debug_mark),a  
3ada 3a e9 3a			ld a, (.dmark+1)  
3add 32 a1 fd			ld (debug_mark+1),a  
3ae0 3a ea 3a			ld a, (.dmark+2)  
3ae3 32 a2 fd			ld (debug_mark+2),a  
3ae6 18 03			jr .pastdmark  
3ae8 ..			.dmark: db "GRT"  
3aeb f1			.pastdmark: pop af  
3aec			endm  
# End of macro DMARK
3aec						CALLMONITOR 
3aec cd aa fd			call debug_vector  
3aef				endm  
# End of macro CALLMONITOR
3aef					endif 
3aef					FORTH_DSP 
3aef cd 13 22			call macro_forth_dsp 
3af2				endm 
# End of macro FORTH_DSP
3af2					;FORTH_DSP_VALUE 
3af2 7e					ld a,(hl)	; get type of value on TOS 
3af3 fe 02				cp DS_TYPE_INUM  
3af5 28 00				jr z, .gt_inum 
3af7			 
3af7				if FORTH_ENABLE_FLOATMATH 
3af7					jr .gt_done 
3af7			 
3af7				endif 
3af7					 
3af7			 
3af7			.gt_inum: 
3af7					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3af7 cd 4d 22			call macro_dsp_valuehl 
3afa				endm 
# End of macro FORTH_DSP_VALUEHL
3afa			 
3afa e5					push hl  ; u2 
3afb			 
3afb					; destroy value TOS 
3afb			 
3afb					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3afb cd 05 23			call macro_forth_dsp_pop 
3afe				endm 
# End of macro FORTH_DSP_POP
3afe			 
3afe			 
3afe					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3afe cd 4d 22			call macro_dsp_valuehl 
3b01				endm 
# End of macro FORTH_DSP_VALUEHL
3b01			 
3b01 e5					push hl    ; u1 
3b02			 
3b02					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3b02 cd 05 23			call macro_forth_dsp_pop 
3b05				endm 
# End of macro FORTH_DSP_POP
3b05			 
3b05			 
3b05 b7			 or a      ;clear carry flag 
3b06 01 00 00		 ld bc, FORTH_FALSE 
3b09 e1			  pop hl    ; u1 
3b0a d1			  pop de    ; u2 
3b0b ed 52		  sbc hl,de 
3b0d 38 03		  jr c,.gtcont   	;	if hl >= de, carry flag will be cleared 
3b0f			 
3b0f 01 01 00		 ld bc, FORTH_TRUE 
3b12			.gtcont:  
3b12 c5					push bc 
3b13 e1					pop hl 
3b14			 
3b14					if DEBUG_FORTH_WORDS 
3b14						DMARK "GT1" 
3b14 f5				push af  
3b15 3a 29 3b			ld a, (.dmark)  
3b18 32 a0 fd			ld (debug_mark),a  
3b1b 3a 2a 3b			ld a, (.dmark+1)  
3b1e 32 a1 fd			ld (debug_mark+1),a  
3b21 3a 2b 3b			ld a, (.dmark+2)  
3b24 32 a2 fd			ld (debug_mark+2),a  
3b27 18 03			jr .pastdmark  
3b29 ..			.dmark: db "GT1"  
3b2c f1			.pastdmark: pop af  
3b2d			endm  
# End of macro DMARK
3b2d						CALLMONITOR 
3b2d cd aa fd			call debug_vector  
3b30				endm  
# End of macro CALLMONITOR
3b30					endif 
3b30 cd 48 20				call forth_push_numhl 
3b33			 
3b33					NEXTW 
3b33 c3 39 24			jp macro_next 
3b36				endm 
# End of macro NEXTW
3b36			.EQUAL: 
3b36				CWHEAD .ENDLOGIC 29 "=" 1 WORD_FLAG_CODE 
3b36 31				db WORD_SYS_CORE+29             
3b37 a1 3b			dw .ENDLOGIC            
3b39 02				db 1 + 1 
3b3a .. 00			db "=",0              
3b3c				endm 
# End of macro CWHEAD
3b3c			; | = ( u1 u2 -- f ) True if u1 equals u2 | DONE 
3b3c				; TODO add floating point number detection 
3b3c					if DEBUG_FORTH_WORDS_KEY 
3b3c						DMARK "EQ." 
3b3c f5				push af  
3b3d 3a 51 3b			ld a, (.dmark)  
3b40 32 a0 fd			ld (debug_mark),a  
3b43 3a 52 3b			ld a, (.dmark+1)  
3b46 32 a1 fd			ld (debug_mark+1),a  
3b49 3a 53 3b			ld a, (.dmark+2)  
3b4c 32 a2 fd			ld (debug_mark+2),a  
3b4f 18 03			jr .pastdmark  
3b51 ..			.dmark: db "EQ."  
3b54 f1			.pastdmark: pop af  
3b55			endm  
# End of macro DMARK
3b55						CALLMONITOR 
3b55 cd aa fd			call debug_vector  
3b58				endm  
# End of macro CALLMONITOR
3b58					endif 
3b58					FORTH_DSP 
3b58 cd 13 22			call macro_forth_dsp 
3b5b				endm 
# End of macro FORTH_DSP
3b5b					;v5 FORTH_DSP_VALUE 
3b5b 7e					ld a,(hl)	; get type of value on TOS 
3b5c fe 02				cp DS_TYPE_INUM  
3b5e 28 00				jr z, .eq_inum 
3b60			 
3b60				if FORTH_ENABLE_FLOATMATH 
3b60					jr .eq_done 
3b60			 
3b60				endif 
3b60					 
3b60			 
3b60			.eq_inum: 
3b60					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3b60 cd 4d 22			call macro_dsp_valuehl 
3b63				endm 
# End of macro FORTH_DSP_VALUEHL
3b63			 
3b63 e5					push hl 
3b64			 
3b64					; destroy value TOS 
3b64			 
3b64					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3b64 cd 05 23			call macro_forth_dsp_pop 
3b67				endm 
# End of macro FORTH_DSP_POP
3b67			 
3b67			 
3b67					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3b67 cd 4d 22			call macro_dsp_valuehl 
3b6a				endm 
# End of macro FORTH_DSP_VALUEHL
3b6a			 
3b6a					; one value on hl get other one back 
3b6a			 
3b6a e5					push hl 
3b6b			 
3b6b					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3b6b cd 05 23			call macro_forth_dsp_pop 
3b6e				endm 
# End of macro FORTH_DSP_POP
3b6e			 
3b6e 0e 00				ld c, FORTH_FALSE 
3b70			 
3b70 e1					pop hl 
3b71 d1					pop de 
3b72			 
3b72 7b					ld a, e 
3b73 bd					cp l 
3b74			 
3b74 20 06				jr nz, .eq_done 
3b76			 
3b76 7a					ld a, d 
3b77 bc					cp h 
3b78			 
3b78 20 02				jr nz, .eq_done 
3b7a			 
3b7a 0e 01				ld c, FORTH_TRUE 
3b7c					 
3b7c			 
3b7c			 
3b7c			.eq_done: 
3b7c			 
3b7c					; TODO push value back onto stack for another op etc 
3b7c			 
3b7c 26 00				ld h, 0 
3b7e 69					ld l, c 
3b7f					if DEBUG_FORTH_WORDS 
3b7f						DMARK "EQ1" 
3b7f f5				push af  
3b80 3a 94 3b			ld a, (.dmark)  
3b83 32 a0 fd			ld (debug_mark),a  
3b86 3a 95 3b			ld a, (.dmark+1)  
3b89 32 a1 fd			ld (debug_mark+1),a  
3b8c 3a 96 3b			ld a, (.dmark+2)  
3b8f 32 a2 fd			ld (debug_mark+2),a  
3b92 18 03			jr .pastdmark  
3b94 ..			.dmark: db "EQ1"  
3b97 f1			.pastdmark: pop af  
3b98			endm  
# End of macro DMARK
3b98						CALLMONITOR 
3b98 cd aa fd			call debug_vector  
3b9b				endm  
# End of macro CALLMONITOR
3b9b					endif 
3b9b cd 48 20				call forth_push_numhl 
3b9e			 
3b9e					NEXTW 
3b9e c3 39 24			jp macro_next 
3ba1				endm 
# End of macro NEXTW
3ba1			 
3ba1			 
3ba1			.ENDLOGIC: 
3ba1			; eof 
3ba1			 
3ba1			 
# End of file forth_words_logic.asm
3ba1			include "forth_words_maths.asm" 
3ba1			 
3ba1			; | ## Maths Words 
3ba1			 
3ba1			.PLUS:	 
3ba1				CWHEAD .NEG 1 "+" 1 WORD_FLAG_CODE 
3ba1 15				db WORD_SYS_CORE+1             
3ba2 ff 3b			dw .NEG            
3ba4 02				db 1 + 1 
3ba5 .. 00			db "+",0              
3ba7				endm 
# End of macro CWHEAD
3ba7			; | + ( u u -- u )    Add two numbers and push result   | INT DONE 
3ba7					if DEBUG_FORTH_WORDS_KEY 
3ba7						DMARK "PLU" 
3ba7 f5				push af  
3ba8 3a bc 3b			ld a, (.dmark)  
3bab 32 a0 fd			ld (debug_mark),a  
3bae 3a bd 3b			ld a, (.dmark+1)  
3bb1 32 a1 fd			ld (debug_mark+1),a  
3bb4 3a be 3b			ld a, (.dmark+2)  
3bb7 32 a2 fd			ld (debug_mark+2),a  
3bba 18 03			jr .pastdmark  
3bbc ..			.dmark: db "PLU"  
3bbf f1			.pastdmark: pop af  
3bc0			endm  
# End of macro DMARK
3bc0						CALLMONITOR 
3bc0 cd aa fd			call debug_vector  
3bc3				endm  
# End of macro CALLMONITOR
3bc3					endif 
3bc3					; add top two values and push back result 
3bc3			 
3bc3					;for v5 FORTH_DSP_VALUE 
3bc3					FORTH_DSP 
3bc3 cd 13 22			call macro_forth_dsp 
3bc6				endm 
# End of macro FORTH_DSP
3bc6 7e					ld a,(hl)	; get type of value on TOS 
3bc7 fe 02				cp DS_TYPE_INUM  
3bc9 28 03				jr z, .dot_inum 
3bcb			 
3bcb					NEXTW 
3bcb c3 39 24			jp macro_next 
3bce				endm 
# End of macro NEXTW
3bce			 
3bce			; float maths 
3bce			 
3bce				if FORTH_ENABLE_FLOATMATH 
3bce						inc hl      ; now at start of numeric as string 
3bce			 
3bce					if DEBUG_FORTH_MATHS 
3bce						DMARK "ADD" 
3bce				CALLMONITOR 
3bce					endif 
3bce			 
3bce					;ld ix, hl 
3bce					call CON 
3bce			 
3bce			 
3bce					push hl 
3bce					 
3bce					 
3bce			 
3bce						FORTH_DSP_POP      ; TODO add stock underflow checks and throws  
3bce			 
3bce					; get next number 
3bce			 
3bce						FORTH_DSP_VALUE 
3bce			 
3bce						inc hl      ; now at start of numeric as string 
3bce			 
3bce					;ld ix, hl 
3bce					call CON 
3bce			 
3bce					push hl 
3bce			 
3bce			 
3bce						FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3bce			 
3bce						; TODO do add 
3bce			 
3bce						call IADD 
3bce			 
3bce						; TODO get result back as ascii 
3bce			 
3bce						; TODO push result  
3bce			 
3bce			 
3bce			 
3bce						jr .dot_done 
3bce				endif 
3bce			 
3bce			.dot_inum: 
3bce			 
3bce			 
3bce					if DEBUG_FORTH_DOT 
3bce						DMARK "+IT" 
3bce f5				push af  
3bcf 3a e3 3b			ld a, (.dmark)  
3bd2 32 a0 fd			ld (debug_mark),a  
3bd5 3a e4 3b			ld a, (.dmark+1)  
3bd8 32 a1 fd			ld (debug_mark+1),a  
3bdb 3a e5 3b			ld a, (.dmark+2)  
3bde 32 a2 fd			ld (debug_mark+2),a  
3be1 18 03			jr .pastdmark  
3be3 ..			.dmark: db "+IT"  
3be6 f1			.pastdmark: pop af  
3be7			endm  
# End of macro DMARK
3be7				CALLMONITOR 
3be7 cd aa fd			call debug_vector  
3bea				endm  
# End of macro CALLMONITOR
3bea					endif 
3bea			 
3bea					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3bea cd 4d 22			call macro_dsp_valuehl 
3bed				endm 
# End of macro FORTH_DSP_VALUEHL
3bed			 
3bed				; TODO add floating point number detection 
3bed			 
3bed e5					push hl 
3bee			 
3bee					; destroy value TOS 
3bee			 
3bee					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3bee cd 05 23			call macro_forth_dsp_pop 
3bf1				endm 
# End of macro FORTH_DSP_POP
3bf1			 
3bf1			 
3bf1					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3bf1 cd 4d 22			call macro_dsp_valuehl 
3bf4				endm 
# End of macro FORTH_DSP_VALUEHL
3bf4			 
3bf4					; one value on hl get other one back 
3bf4			 
3bf4 d1					pop de 
3bf5			 
3bf5					; do the add 
3bf5			 
3bf5 19					add hl,de 
3bf6			 
3bf6					; save it 
3bf6			 
3bf6			;		push hl	 
3bf6			 
3bf6					; 
3bf6			 
3bf6					; destroy value TOS 
3bf6			 
3bf6					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3bf6 cd 05 23			call macro_forth_dsp_pop 
3bf9				endm 
# End of macro FORTH_DSP_POP
3bf9			 
3bf9					; TODO push value back onto stack for another op etc 
3bf9			 
3bf9			;		pop hl 
3bf9			 
3bf9			.dot_done: 
3bf9 cd 48 20				call forth_push_numhl 
3bfc			 
3bfc					NEXTW 
3bfc c3 39 24			jp macro_next 
3bff				endm 
# End of macro NEXTW
3bff			.NEG: 
3bff			 
3bff				CWHEAD .DIV 3 "-" 1 WORD_FLAG_CODE 
3bff 17				db WORD_SYS_CORE+3             
3c00 42 3c			dw .DIV            
3c02 02				db 1 + 1 
3c03 .. 00			db "-",0              
3c05				endm 
# End of macro CWHEAD
3c05			; | - ( u1 u2 -- u )    Subtract u2 from u1 and push result  | INT DONE 
3c05					if DEBUG_FORTH_WORDS_KEY 
3c05						DMARK "SUB" 
3c05 f5				push af  
3c06 3a 1a 3c			ld a, (.dmark)  
3c09 32 a0 fd			ld (debug_mark),a  
3c0c 3a 1b 3c			ld a, (.dmark+1)  
3c0f 32 a1 fd			ld (debug_mark+1),a  
3c12 3a 1c 3c			ld a, (.dmark+2)  
3c15 32 a2 fd			ld (debug_mark+2),a  
3c18 18 03			jr .pastdmark  
3c1a ..			.dmark: db "SUB"  
3c1d f1			.pastdmark: pop af  
3c1e			endm  
# End of macro DMARK
3c1e						CALLMONITOR 
3c1e cd aa fd			call debug_vector  
3c21				endm  
# End of macro CALLMONITOR
3c21					endif 
3c21			 
3c21			 
3c21				; TODO add floating point number detection 
3c21					; v5 FORTH_DSP_VALUE 
3c21					FORTH_DSP 
3c21 cd 13 22			call macro_forth_dsp 
3c24				endm 
# End of macro FORTH_DSP
3c24 7e					ld a,(hl)	; get type of value on TOS 
3c25 fe 02				cp DS_TYPE_INUM  
3c27 28 03				jr z, .neg_inum 
3c29			 
3c29					NEXTW 
3c29 c3 39 24			jp macro_next 
3c2c				endm 
# End of macro NEXTW
3c2c			 
3c2c			; float maths 
3c2c			 
3c2c				if FORTH_ENABLE_FLOATMATH 
3c2c					jr .neg_done 
3c2c			 
3c2c				endif 
3c2c					 
3c2c			 
3c2c			.neg_inum: 
3c2c					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3c2c cd 4d 22			call macro_dsp_valuehl 
3c2f				endm 
# End of macro FORTH_DSP_VALUEHL
3c2f			 
3c2f e5					push hl 
3c30			 
3c30					; destroy value TOS 
3c30			 
3c30					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3c30 cd 05 23			call macro_forth_dsp_pop 
3c33				endm 
# End of macro FORTH_DSP_POP
3c33			 
3c33			 
3c33					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3c33 cd 4d 22			call macro_dsp_valuehl 
3c36				endm 
# End of macro FORTH_DSP_VALUEHL
3c36			 
3c36					; one value on hl get other one back 
3c36			 
3c36 d1					pop de 
3c37			 
3c37					; do the sub 
3c37			;		ex de, hl 
3c37			 
3c37 ed 52				sbc hl,de 
3c39			 
3c39					; save it 
3c39			 
3c39			;		push hl	 
3c39			 
3c39					; 
3c39			 
3c39					; destroy value TOS 
3c39			 
3c39					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3c39 cd 05 23			call macro_forth_dsp_pop 
3c3c				endm 
# End of macro FORTH_DSP_POP
3c3c			 
3c3c					; TODO push value back onto stack for another op etc 
3c3c			 
3c3c			;		pop hl 
3c3c			 
3c3c cd 48 20				call forth_push_numhl 
3c3f			.neg_done: 
3c3f			 
3c3f					NEXTW 
3c3f c3 39 24			jp macro_next 
3c42				endm 
# End of macro NEXTW
3c42			.DIV: 
3c42				CWHEAD .MUL 4 "/" 1 WORD_FLAG_CODE 
3c42 18				db WORD_SYS_CORE+4             
3c43 8f 3c			dw .MUL            
3c45 02				db 1 + 1 
3c46 .. 00			db "/",0              
3c48				endm 
# End of macro CWHEAD
3c48			; | / ( u1 u2 -- result remainder )     Divide u1 by u2 and push result | INT DONE 
3c48					if DEBUG_FORTH_WORDS_KEY 
3c48						DMARK "DIV" 
3c48 f5				push af  
3c49 3a 5d 3c			ld a, (.dmark)  
3c4c 32 a0 fd			ld (debug_mark),a  
3c4f 3a 5e 3c			ld a, (.dmark+1)  
3c52 32 a1 fd			ld (debug_mark+1),a  
3c55 3a 5f 3c			ld a, (.dmark+2)  
3c58 32 a2 fd			ld (debug_mark+2),a  
3c5b 18 03			jr .pastdmark  
3c5d ..			.dmark: db "DIV"  
3c60 f1			.pastdmark: pop af  
3c61			endm  
# End of macro DMARK
3c61						CALLMONITOR 
3c61 cd aa fd			call debug_vector  
3c64				endm  
# End of macro CALLMONITOR
3c64					endif 
3c64				; TODO add floating point number detection 
3c64					; v5 FORTH_DSP_VALUE 
3c64					FORTH_DSP 
3c64 cd 13 22			call macro_forth_dsp 
3c67				endm 
# End of macro FORTH_DSP
3c67 7e					ld a,(hl)	; get type of value on TOS 
3c68 fe 02				cp DS_TYPE_INUM  
3c6a 28 03				jr z, .div_inum 
3c6c			 
3c6c				if FORTH_ENABLE_FLOATMATH 
3c6c					jr .div_done 
3c6c			 
3c6c				endif 
3c6c					NEXTW 
3c6c c3 39 24			jp macro_next 
3c6f				endm 
# End of macro NEXTW
3c6f			.div_inum: 
3c6f			 
3c6f					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3c6f cd 4d 22			call macro_dsp_valuehl 
3c72				endm 
# End of macro FORTH_DSP_VALUEHL
3c72			 
3c72 e5					push hl    ; to go to bc 
3c73			 
3c73					; destroy value TOS 
3c73			 
3c73					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3c73 cd 05 23			call macro_forth_dsp_pop 
3c76				endm 
# End of macro FORTH_DSP_POP
3c76			 
3c76			 
3c76					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3c76 cd 4d 22			call macro_dsp_valuehl 
3c79				endm 
# End of macro FORTH_DSP_VALUEHL
3c79			 
3c79					; hl to go to de 
3c79			 
3c79 e5					push hl 
3c7a			 
3c7a c1					pop bc 
3c7b d1					pop de		 
3c7c			 
3c7c			 
3c7c					if DEBUG_FORTH_MATHS 
3c7c						DMARK "DIV" 
3c7c				CALLMONITOR 
3c7c					endif 
3c7c					; one value on hl but move to a get other one back 
3c7c			 
3c7c			        
3c7c cd 3b 0f			call Div16 
3c7f			 
3c7f			;	push af	 
3c7f e5				push hl 
3c80 c5				push bc 
3c81			 
3c81					if DEBUG_FORTH_MATHS 
3c81						DMARK "DI1" 
3c81				CALLMONITOR 
3c81					endif 
3c81			 
3c81					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3c81 cd 05 23			call macro_forth_dsp_pop 
3c84				endm 
# End of macro FORTH_DSP_POP
3c84			 
3c84			 
3c84			 
3c84 e1					pop hl    ; result 
3c85			 
3c85 cd 48 20				call forth_push_numhl 
3c88			 
3c88 e1					pop hl    ; reminder 
3c89			;		ld h,0 
3c89			;		ld l,d 
3c89			 
3c89 cd 48 20				call forth_push_numhl 
3c8c			.div_done: 
3c8c					NEXTW 
3c8c c3 39 24			jp macro_next 
3c8f				endm 
# End of macro NEXTW
3c8f			.MUL: 
3c8f				CWHEAD .MIN 5 "*" 1 WORD_FLAG_CODE 
3c8f 19				db WORD_SYS_CORE+5             
3c90 d4 3c			dw .MIN            
3c92 02				db 1 + 1 
3c93 .. 00			db "*",0              
3c95				endm 
# End of macro CWHEAD
3c95			; | * ( u1 u2 -- u )     Multiply TOS and push result | INT DONE 
3c95				; TODO add floating point number detection 
3c95					if DEBUG_FORTH_WORDS_KEY 
3c95						DMARK "MUL" 
3c95 f5				push af  
3c96 3a aa 3c			ld a, (.dmark)  
3c99 32 a0 fd			ld (debug_mark),a  
3c9c 3a ab 3c			ld a, (.dmark+1)  
3c9f 32 a1 fd			ld (debug_mark+1),a  
3ca2 3a ac 3c			ld a, (.dmark+2)  
3ca5 32 a2 fd			ld (debug_mark+2),a  
3ca8 18 03			jr .pastdmark  
3caa ..			.dmark: db "MUL"  
3cad f1			.pastdmark: pop af  
3cae			endm  
# End of macro DMARK
3cae						CALLMONITOR 
3cae cd aa fd			call debug_vector  
3cb1				endm  
# End of macro CALLMONITOR
3cb1					endif 
3cb1					FORTH_DSP 
3cb1 cd 13 22			call macro_forth_dsp 
3cb4				endm 
# End of macro FORTH_DSP
3cb4					; v5 FORTH_DSP_VALUE 
3cb4 7e					ld a,(hl)	; get type of value on TOS 
3cb5 fe 02				cp DS_TYPE_INUM  
3cb7 28 03				jr z, .mul_inum 
3cb9			 
3cb9				if FORTH_ENABLE_FLOATMATH 
3cb9					jr .mul_done 
3cb9			 
3cb9				endif 
3cb9			 
3cb9					NEXTW 
3cb9 c3 39 24			jp macro_next 
3cbc				endm 
# End of macro NEXTW
3cbc			.mul_inum:	 
3cbc			 
3cbc					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3cbc cd 4d 22			call macro_dsp_valuehl 
3cbf				endm 
# End of macro FORTH_DSP_VALUEHL
3cbf			 
3cbf e5					push hl 
3cc0			 
3cc0					; destroy value TOS 
3cc0			 
3cc0					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3cc0 cd 05 23			call macro_forth_dsp_pop 
3cc3				endm 
# End of macro FORTH_DSP_POP
3cc3			 
3cc3			 
3cc3					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3cc3 cd 4d 22			call macro_dsp_valuehl 
3cc6				endm 
# End of macro FORTH_DSP_VALUEHL
3cc6			 
3cc6					; one value on hl but move to a get other one back 
3cc6			 
3cc6 7d					ld a, l 
3cc7			 
3cc7 d1					pop de 
3cc8			 
3cc8					; do the mull 
3cc8			;		ex de, hl 
3cc8			 
3cc8 cd 61 0f				call Mult16 
3ccb					; save it 
3ccb			 
3ccb			;		push hl	 
3ccb			 
3ccb					; 
3ccb			 
3ccb					; destroy value TOS 
3ccb			 
3ccb					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3ccb cd 05 23			call macro_forth_dsp_pop 
3cce				endm 
# End of macro FORTH_DSP_POP
3cce			 
3cce					; TODO push value back onto stack for another op etc 
3cce			 
3cce			;		pop hl 
3cce			 
3cce cd 48 20				call forth_push_numhl 
3cd1			 
3cd1			.mul_done: 
3cd1					NEXTW 
3cd1 c3 39 24			jp macro_next 
3cd4				endm 
# End of macro NEXTW
3cd4			 
3cd4			 
3cd4			 
3cd4			 
3cd4			.MIN: 
3cd4				CWHEAD .MAX 53 "MIN" 3 WORD_FLAG_CODE 
3cd4 49				db WORD_SYS_CORE+53             
3cd5 55 3d			dw .MAX            
3cd7 04				db 3 + 1 
3cd8 .. 00			db "MIN",0              
3cdc				endm 
# End of macro CWHEAD
3cdc			; | MIN (  u1 u2 -- u3 ) Whichever is the smallest value is pushed back onto the stack | DONE 
3cdc					if DEBUG_FORTH_WORDS_KEY 
3cdc						DMARK "MIN" 
3cdc f5				push af  
3cdd 3a f1 3c			ld a, (.dmark)  
3ce0 32 a0 fd			ld (debug_mark),a  
3ce3 3a f2 3c			ld a, (.dmark+1)  
3ce6 32 a1 fd			ld (debug_mark+1),a  
3ce9 3a f3 3c			ld a, (.dmark+2)  
3cec 32 a2 fd			ld (debug_mark+2),a  
3cef 18 03			jr .pastdmark  
3cf1 ..			.dmark: db "MIN"  
3cf4 f1			.pastdmark: pop af  
3cf5			endm  
# End of macro DMARK
3cf5						CALLMONITOR 
3cf5 cd aa fd			call debug_vector  
3cf8				endm  
# End of macro CALLMONITOR
3cf8					endif 
3cf8					; get u2 
3cf8			 
3cf8					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3cf8 cd 4d 22			call macro_dsp_valuehl 
3cfb				endm 
# End of macro FORTH_DSP_VALUEHL
3cfb			 
3cfb e5					push hl   ; u2 
3cfc			 
3cfc					; destroy value TOS 
3cfc			 
3cfc					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3cfc cd 05 23			call macro_forth_dsp_pop 
3cff				endm 
# End of macro FORTH_DSP_POP
3cff			 
3cff					; get u1 
3cff			 
3cff					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3cff cd 4d 22			call macro_dsp_valuehl 
3d02				endm 
# End of macro FORTH_DSP_VALUEHL
3d02			 
3d02 e5					push hl  ; u1 
3d03			 
3d03					; destroy value TOS 
3d03			 
3d03					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3d03 cd 05 23			call macro_forth_dsp_pop 
3d06				endm 
# End of macro FORTH_DSP_POP
3d06			 
3d06 b7			 or a      ;clear carry flag 
3d07 e1			  pop hl    ; u1 
3d08 d1			  pop de    ; u2 
3d09 e5				push hl   ; saved in case hl is lowest 
3d0a ed 52		  sbc hl,de 
3d0c 30 23		  jr nc,.mincont   	;	if hl >= de, carry flag will be cleared 
3d0e			 
3d0e e1				pop hl 
3d0f					if DEBUG_FORTH_WORDS 
3d0f						DMARK "MIN" 
3d0f f5				push af  
3d10 3a 24 3d			ld a, (.dmark)  
3d13 32 a0 fd			ld (debug_mark),a  
3d16 3a 25 3d			ld a, (.dmark+1)  
3d19 32 a1 fd			ld (debug_mark+1),a  
3d1c 3a 26 3d			ld a, (.dmark+2)  
3d1f 32 a2 fd			ld (debug_mark+2),a  
3d22 18 03			jr .pastdmark  
3d24 ..			.dmark: db "MIN"  
3d27 f1			.pastdmark: pop af  
3d28			endm  
# End of macro DMARK
3d28						CALLMONITOR 
3d28 cd aa fd			call debug_vector  
3d2b				endm  
# End of macro CALLMONITOR
3d2b					endif 
3d2b cd 48 20				call forth_push_numhl 
3d2e			 
3d2e				       NEXTW 
3d2e c3 39 24			jp macro_next 
3d31				endm 
# End of macro NEXTW
3d31			 
3d31			.mincont:  
3d31 c1				pop bc   ; tidy up 
3d32 eb				ex de , hl  
3d33					if DEBUG_FORTH_WORDS 
3d33						DMARK "MI1" 
3d33 f5				push af  
3d34 3a 48 3d			ld a, (.dmark)  
3d37 32 a0 fd			ld (debug_mark),a  
3d3a 3a 49 3d			ld a, (.dmark+1)  
3d3d 32 a1 fd			ld (debug_mark+1),a  
3d40 3a 4a 3d			ld a, (.dmark+2)  
3d43 32 a2 fd			ld (debug_mark+2),a  
3d46 18 03			jr .pastdmark  
3d48 ..			.dmark: db "MI1"  
3d4b f1			.pastdmark: pop af  
3d4c			endm  
# End of macro DMARK
3d4c						CALLMONITOR 
3d4c cd aa fd			call debug_vector  
3d4f				endm  
# End of macro CALLMONITOR
3d4f					endif 
3d4f cd 48 20				call forth_push_numhl 
3d52			 
3d52				       NEXTW 
3d52 c3 39 24			jp macro_next 
3d55				endm 
# End of macro NEXTW
3d55			.MAX: 
3d55				CWHEAD .RND16 54 "MAX" 3 WORD_FLAG_CODE 
3d55 4a				db WORD_SYS_CORE+54             
3d56 d6 3d			dw .RND16            
3d58 04				db 3 + 1 
3d59 .. 00			db "MAX",0              
3d5d				endm 
# End of macro CWHEAD
3d5d			; | MAX (  u1 u2 -- u3 )  Whichever is the largest value is pushed back onto the stack | DONE 
3d5d					if DEBUG_FORTH_WORDS_KEY 
3d5d						DMARK "MAX" 
3d5d f5				push af  
3d5e 3a 72 3d			ld a, (.dmark)  
3d61 32 a0 fd			ld (debug_mark),a  
3d64 3a 73 3d			ld a, (.dmark+1)  
3d67 32 a1 fd			ld (debug_mark+1),a  
3d6a 3a 74 3d			ld a, (.dmark+2)  
3d6d 32 a2 fd			ld (debug_mark+2),a  
3d70 18 03			jr .pastdmark  
3d72 ..			.dmark: db "MAX"  
3d75 f1			.pastdmark: pop af  
3d76			endm  
# End of macro DMARK
3d76						CALLMONITOR 
3d76 cd aa fd			call debug_vector  
3d79				endm  
# End of macro CALLMONITOR
3d79					endif 
3d79					; get u2 
3d79			 
3d79					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3d79 cd 4d 22			call macro_dsp_valuehl 
3d7c				endm 
# End of macro FORTH_DSP_VALUEHL
3d7c			 
3d7c e5					push hl   ; u2 
3d7d			 
3d7d					; destroy value TOS 
3d7d			 
3d7d					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3d7d cd 05 23			call macro_forth_dsp_pop 
3d80				endm 
# End of macro FORTH_DSP_POP
3d80			 
3d80					; get u1 
3d80			 
3d80					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3d80 cd 4d 22			call macro_dsp_valuehl 
3d83				endm 
# End of macro FORTH_DSP_VALUEHL
3d83			 
3d83 e5					push hl  ; u1 
3d84			 
3d84					; destroy value TOS 
3d84			 
3d84					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3d84 cd 05 23			call macro_forth_dsp_pop 
3d87				endm 
# End of macro FORTH_DSP_POP
3d87			 
3d87 b7			 or a      ;clear carry flag 
3d88 e1			  pop hl    ; u1 
3d89 d1			  pop de    ; u2 
3d8a e5				push hl   ; saved in case hl is lowest 
3d8b ed 52		  sbc hl,de 
3d8d 38 23		  jr c,.maxcont   	;	if hl <= de, carry flag will be cleared 
3d8f			 
3d8f e1				pop hl 
3d90					if DEBUG_FORTH_WORDS 
3d90						DMARK "MAX" 
3d90 f5				push af  
3d91 3a a5 3d			ld a, (.dmark)  
3d94 32 a0 fd			ld (debug_mark),a  
3d97 3a a6 3d			ld a, (.dmark+1)  
3d9a 32 a1 fd			ld (debug_mark+1),a  
3d9d 3a a7 3d			ld a, (.dmark+2)  
3da0 32 a2 fd			ld (debug_mark+2),a  
3da3 18 03			jr .pastdmark  
3da5 ..			.dmark: db "MAX"  
3da8 f1			.pastdmark: pop af  
3da9			endm  
# End of macro DMARK
3da9						CALLMONITOR 
3da9 cd aa fd			call debug_vector  
3dac				endm  
# End of macro CALLMONITOR
3dac					endif 
3dac cd 48 20				call forth_push_numhl 
3daf			 
3daf				       NEXTW 
3daf c3 39 24			jp macro_next 
3db2				endm 
# End of macro NEXTW
3db2			 
3db2			.maxcont:  
3db2 c1				pop bc   ; tidy up 
3db3 eb				ex de , hl  
3db4					if DEBUG_FORTH_WORDS 
3db4						DMARK "MA1" 
3db4 f5				push af  
3db5 3a c9 3d			ld a, (.dmark)  
3db8 32 a0 fd			ld (debug_mark),a  
3dbb 3a ca 3d			ld a, (.dmark+1)  
3dbe 32 a1 fd			ld (debug_mark+1),a  
3dc1 3a cb 3d			ld a, (.dmark+2)  
3dc4 32 a2 fd			ld (debug_mark+2),a  
3dc7 18 03			jr .pastdmark  
3dc9 ..			.dmark: db "MA1"  
3dcc f1			.pastdmark: pop af  
3dcd			endm  
# End of macro DMARK
3dcd						CALLMONITOR 
3dcd cd aa fd			call debug_vector  
3dd0				endm  
# End of macro CALLMONITOR
3dd0					endif 
3dd0 cd 48 20				call forth_push_numhl 
3dd3				       NEXTW 
3dd3 c3 39 24			jp macro_next 
3dd6				endm 
# End of macro NEXTW
3dd6			 
3dd6			.RND16: 
3dd6				CWHEAD .RND8 58 "RND16" 5 WORD_FLAG_CODE 
3dd6 4e				db WORD_SYS_CORE+58             
3dd7 05 3e			dw .RND8            
3dd9 06				db 5 + 1 
3dda .. 00			db "RND16",0              
3de0				endm 
# End of macro CWHEAD
3de0			; | RND16 (  -- n ) Generate a random 16bit number and push to stack | DONE 
3de0					if DEBUG_FORTH_WORDS_KEY 
3de0						DMARK "R16" 
3de0 f5				push af  
3de1 3a f5 3d			ld a, (.dmark)  
3de4 32 a0 fd			ld (debug_mark),a  
3de7 3a f6 3d			ld a, (.dmark+1)  
3dea 32 a1 fd			ld (debug_mark+1),a  
3ded 3a f7 3d			ld a, (.dmark+2)  
3df0 32 a2 fd			ld (debug_mark+2),a  
3df3 18 03			jr .pastdmark  
3df5 ..			.dmark: db "R16"  
3df8 f1			.pastdmark: pop af  
3df9			endm  
# End of macro DMARK
3df9						CALLMONITOR 
3df9 cd aa fd			call debug_vector  
3dfc				endm  
# End of macro CALLMONITOR
3dfc					endif 
3dfc cd 05 0f				call prng16  
3dff cd 48 20				call forth_push_numhl 
3e02				       NEXTW 
3e02 c3 39 24			jp macro_next 
3e05				endm 
# End of macro NEXTW
3e05			.RND8: 
3e05				CWHEAD .RND 76 "RND8" 4 WORD_FLAG_CODE 
3e05 60				db WORD_SYS_CORE+76             
3e06 3a 3e			dw .RND            
3e08 05				db 4 + 1 
3e09 .. 00			db "RND8",0              
3e0e				endm 
# End of macro CWHEAD
3e0e			; | RND8 (  -- n ) Generate a random 8bit number and push to stack | DONE 
3e0e					if DEBUG_FORTH_WORDS_KEY 
3e0e						DMARK "RN8" 
3e0e f5				push af  
3e0f 3a 23 3e			ld a, (.dmark)  
3e12 32 a0 fd			ld (debug_mark),a  
3e15 3a 24 3e			ld a, (.dmark+1)  
3e18 32 a1 fd			ld (debug_mark+1),a  
3e1b 3a 25 3e			ld a, (.dmark+2)  
3e1e 32 a2 fd			ld (debug_mark+2),a  
3e21 18 03			jr .pastdmark  
3e23 ..			.dmark: db "RN8"  
3e26 f1			.pastdmark: pop af  
3e27			endm  
# End of macro DMARK
3e27						CALLMONITOR 
3e27 cd aa fd			call debug_vector  
3e2a				endm  
# End of macro CALLMONITOR
3e2a					endif 
3e2a 2a de fa				ld hl,(xrandc) 
3e2d 23					inc hl 
3e2e cd 1f 0f				call xrnd 
3e31 6f					ld l,a	 
3e32 26 00				ld h,0 
3e34 cd 48 20				call forth_push_numhl 
3e37				       NEXTW 
3e37 c3 39 24			jp macro_next 
3e3a				endm 
# End of macro NEXTW
3e3a			.RND: 
3e3a				CWHEAD .ENDMATHS 76 "RND" 3 WORD_FLAG_CODE 
3e3a 60				db WORD_SYS_CORE+76             
3e3b 40 3f			dw .ENDMATHS            
3e3d 04				db 3 + 1 
3e3e .. 00			db "RND",0              
3e42				endm 
# End of macro CWHEAD
3e42			; | RND ( u1 u2 -- u ) Generate a random number no lower than u1 and no higher than u2 and push to stack | DONE 
3e42			 
3e42					if DEBUG_FORTH_WORDS_KEY 
3e42						DMARK "RND" 
3e42 f5				push af  
3e43 3a 57 3e			ld a, (.dmark)  
3e46 32 a0 fd			ld (debug_mark),a  
3e49 3a 58 3e			ld a, (.dmark+1)  
3e4c 32 a1 fd			ld (debug_mark+1),a  
3e4f 3a 59 3e			ld a, (.dmark+2)  
3e52 32 a2 fd			ld (debug_mark+2),a  
3e55 18 03			jr .pastdmark  
3e57 ..			.dmark: db "RND"  
3e5a f1			.pastdmark: pop af  
3e5b			endm  
# End of macro DMARK
3e5b						CALLMONITOR 
3e5b cd aa fd			call debug_vector  
3e5e				endm  
# End of macro CALLMONITOR
3e5e					endif 
3e5e					 
3e5e					FORTH_DSP_VALUEHL    ; upper range 
3e5e cd 4d 22			call macro_dsp_valuehl 
3e61				endm 
# End of macro FORTH_DSP_VALUEHL
3e61			 
3e61 22 e2 fa				ld (LFSRSeed), hl	 
3e64			 
3e64					if DEBUG_FORTH_WORDS 
3e64						DMARK "RN1" 
3e64 f5				push af  
3e65 3a 79 3e			ld a, (.dmark)  
3e68 32 a0 fd			ld (debug_mark),a  
3e6b 3a 7a 3e			ld a, (.dmark+1)  
3e6e 32 a1 fd			ld (debug_mark+1),a  
3e71 3a 7b 3e			ld a, (.dmark+2)  
3e74 32 a2 fd			ld (debug_mark+2),a  
3e77 18 03			jr .pastdmark  
3e79 ..			.dmark: db "RN1"  
3e7c f1			.pastdmark: pop af  
3e7d			endm  
# End of macro DMARK
3e7d						CALLMONITOR 
3e7d cd aa fd			call debug_vector  
3e80				endm  
# End of macro CALLMONITOR
3e80					endif 
3e80					FORTH_DSP_POP 
3e80 cd 05 23			call macro_forth_dsp_pop 
3e83				endm 
# End of macro FORTH_DSP_POP
3e83			 
3e83					FORTH_DSP_VALUEHL    ; low range 
3e83 cd 4d 22			call macro_dsp_valuehl 
3e86				endm 
# End of macro FORTH_DSP_VALUEHL
3e86			 
3e86					if DEBUG_FORTH_WORDS 
3e86						DMARK "RN2" 
3e86 f5				push af  
3e87 3a 9b 3e			ld a, (.dmark)  
3e8a 32 a0 fd			ld (debug_mark),a  
3e8d 3a 9c 3e			ld a, (.dmark+1)  
3e90 32 a1 fd			ld (debug_mark+1),a  
3e93 3a 9d 3e			ld a, (.dmark+2)  
3e96 32 a2 fd			ld (debug_mark+2),a  
3e99 18 03			jr .pastdmark  
3e9b ..			.dmark: db "RN2"  
3e9e f1			.pastdmark: pop af  
3e9f			endm  
# End of macro DMARK
3e9f						CALLMONITOR 
3e9f cd aa fd			call debug_vector  
3ea2				endm  
# End of macro CALLMONITOR
3ea2					endif 
3ea2 22 e4 fa				ld (LFSRSeed+2), hl 
3ea5			 
3ea5					FORTH_DSP_POP 
3ea5 cd 05 23			call macro_forth_dsp_pop 
3ea8				endm 
# End of macro FORTH_DSP_POP
3ea8			 
3ea8 e5					push hl 
3ea9			 
3ea9 e1			.inrange:	pop hl 
3eaa cd 05 0f				call prng16  
3ead					if DEBUG_FORTH_WORDS 
3ead						DMARK "RN3" 
3ead f5				push af  
3eae 3a c2 3e			ld a, (.dmark)  
3eb1 32 a0 fd			ld (debug_mark),a  
3eb4 3a c3 3e			ld a, (.dmark+1)  
3eb7 32 a1 fd			ld (debug_mark+1),a  
3eba 3a c4 3e			ld a, (.dmark+2)  
3ebd 32 a2 fd			ld (debug_mark+2),a  
3ec0 18 03			jr .pastdmark  
3ec2 ..			.dmark: db "RN3"  
3ec5 f1			.pastdmark: pop af  
3ec6			endm  
# End of macro DMARK
3ec6						CALLMONITOR 
3ec6 cd aa fd			call debug_vector  
3ec9				endm  
# End of macro CALLMONITOR
3ec9					endif 
3ec9					 
3ec9					; if the range is 8bit knock out the high byte 
3ec9			 
3ec9 ed 5b e2 fa			ld de, (LFSRSeed)     ; check high level 
3ecd			 
3ecd 3e 00				ld a, 0 
3ecf ba					cp d  
3ed0 20 1e				jr nz, .hirange 
3ed2 26 00				ld h, 0   ; knock it down to 8bit 
3ed4			 
3ed4					if DEBUG_FORTH_WORDS 
3ed4						DMARK "RNk" 
3ed4 f5				push af  
3ed5 3a e9 3e			ld a, (.dmark)  
3ed8 32 a0 fd			ld (debug_mark),a  
3edb 3a ea 3e			ld a, (.dmark+1)  
3ede 32 a1 fd			ld (debug_mark+1),a  
3ee1 3a eb 3e			ld a, (.dmark+2)  
3ee4 32 a2 fd			ld (debug_mark+2),a  
3ee7 18 03			jr .pastdmark  
3ee9 ..			.dmark: db "RNk"  
3eec f1			.pastdmark: pop af  
3eed			endm  
# End of macro DMARK
3eed						CALLMONITOR 
3eed cd aa fd			call debug_vector  
3ef0				endm  
# End of macro CALLMONITOR
3ef0					endif 
3ef0			.hirange:   
3ef0 e5					push hl  
3ef1 b7					or a  
3ef2 ed 52		                sbc hl, de 
3ef4			 
3ef4					;call cmp16 
3ef4			 
3ef4 30 b3				jr nc, .inrange      ; if hl >= de, carry flag is cleared 
3ef6 e1					pop hl 
3ef7 e5					push hl 
3ef8			 
3ef8					if DEBUG_FORTH_WORDS 
3ef8						DMARK "RN4" 
3ef8 f5				push af  
3ef9 3a 0d 3f			ld a, (.dmark)  
3efc 32 a0 fd			ld (debug_mark),a  
3eff 3a 0e 3f			ld a, (.dmark+1)  
3f02 32 a1 fd			ld (debug_mark+1),a  
3f05 3a 0f 3f			ld a, (.dmark+2)  
3f08 32 a2 fd			ld (debug_mark+2),a  
3f0b 18 03			jr .pastdmark  
3f0d ..			.dmark: db "RN4"  
3f10 f1			.pastdmark: pop af  
3f11			endm  
# End of macro DMARK
3f11						CALLMONITOR 
3f11 cd aa fd			call debug_vector  
3f14				endm  
# End of macro CALLMONITOR
3f14					endif 
3f14 ed 5b e4 fa			ld de, (LFSRSeed+2)   ; check low range 
3f18					;call cmp16 
3f18				 
3f18 b7					or a  
3f19 ed 52		                sbc hl, de 
3f1b 38 8c				jr c, .inrange 
3f1d			 
3f1d e1					pop hl 
3f1e					 
3f1e					if DEBUG_FORTH_WORDS 
3f1e						DMARK "RNd" 
3f1e f5				push af  
3f1f 3a 33 3f			ld a, (.dmark)  
3f22 32 a0 fd			ld (debug_mark),a  
3f25 3a 34 3f			ld a, (.dmark+1)  
3f28 32 a1 fd			ld (debug_mark+1),a  
3f2b 3a 35 3f			ld a, (.dmark+2)  
3f2e 32 a2 fd			ld (debug_mark+2),a  
3f31 18 03			jr .pastdmark  
3f33 ..			.dmark: db "RNd"  
3f36 f1			.pastdmark: pop af  
3f37			endm  
# End of macro DMARK
3f37						CALLMONITOR 
3f37 cd aa fd			call debug_vector  
3f3a				endm  
# End of macro CALLMONITOR
3f3a					endif 
3f3a			 
3f3a			 
3f3a cd 48 20				call forth_push_numhl 
3f3d				       NEXTW 
3f3d c3 39 24			jp macro_next 
3f40				endm 
# End of macro NEXTW
3f40			 
3f40			.ENDMATHS: 
3f40			 
3f40			; eof 
3f40			 
# End of file forth_words_maths.asm
3f40			include "forth_words_display.asm" 
3f40			 
3f40			; | ## Display Words 
3f40			 
3f40			.ACT: 
3f40			 
3f40				CWHEAD .INFO 78 "ACTIVE" 6 WORD_FLAG_CODE 
3f40 62				db WORD_SYS_CORE+78             
3f41 8c 3f			dw .INFO            
3f43 07				db 6 + 1 
3f44 .. 00			db "ACTIVE",0              
3f4b				endm 
# End of macro CWHEAD
3f4b			; | ACTIVE ( -- s ) Push the next char for an activity indicator to TOS | DONE 
3f4b			;  
3f4b			; | | To display a pulsing activity indicator in a processing loop do this... 
3f4b			; | | e.g. $ff $00 do active . ..... Your code ..... loop 
3f4b			 
3f4b					if DEBUG_FORTH_WORDS_KEY 
3f4b						DMARK "ACT" 
3f4b f5				push af  
3f4c 3a 60 3f			ld a, (.dmark)  
3f4f 32 a0 fd			ld (debug_mark),a  
3f52 3a 61 3f			ld a, (.dmark+1)  
3f55 32 a1 fd			ld (debug_mark+1),a  
3f58 3a 62 3f			ld a, (.dmark+2)  
3f5b 32 a2 fd			ld (debug_mark+2),a  
3f5e 18 03			jr .pastdmark  
3f60 ..			.dmark: db "ACT"  
3f63 f1			.pastdmark: pop af  
3f64			endm  
# End of macro DMARK
3f64						CALLMONITOR 
3f64 cd aa fd			call debug_vector  
3f67				endm  
# End of macro CALLMONITOR
3f67					endif 
3f67 cd 01 0d				call active 
3f6a					if DEBUG_FORTH_WORDS 
3f6a						DMARK "ACp" 
3f6a f5				push af  
3f6b 3a 7f 3f			ld a, (.dmark)  
3f6e 32 a0 fd			ld (debug_mark),a  
3f71 3a 80 3f			ld a, (.dmark+1)  
3f74 32 a1 fd			ld (debug_mark+1),a  
3f77 3a 81 3f			ld a, (.dmark+2)  
3f7a 32 a2 fd			ld (debug_mark+2),a  
3f7d 18 03			jr .pastdmark  
3f7f ..			.dmark: db "ACp"  
3f82 f1			.pastdmark: pop af  
3f83			endm  
# End of macro DMARK
3f83						CALLMONITOR 
3f83 cd aa fd			call debug_vector  
3f86				endm  
# End of macro CALLMONITOR
3f86					endif 
3f86 cd b6 20				call forth_push_str 
3f89			 
3f89					NEXTW 
3f89 c3 39 24			jp macro_next 
3f8c				endm 
# End of macro NEXTW
3f8c			.INFO: 
3f8c			 
3f8c				CWHEAD .ATP 78 "INFO" 4 WORD_FLAG_CODE 
3f8c 62				db WORD_SYS_CORE+78             
3f8d a9 3f			dw .ATP            
3f8f 05				db 4 + 1 
3f90 .. 00			db "INFO",0              
3f95				endm 
# End of macro CWHEAD
3f95			; | INFO ( u1 u2 -- )  Use the top two strings on stack to fill in an info window over two lines. Causes a wait for key press to continue. | DONE 
3f95					FORTH_DSP_VALUEHL 
3f95 cd 4d 22			call macro_dsp_valuehl 
3f98				endm 
# End of macro FORTH_DSP_VALUEHL
3f98			 
3f98					FORTH_DSP_POP 
3f98 cd 05 23			call macro_forth_dsp_pop 
3f9b				endm 
# End of macro FORTH_DSP_POP
3f9b			 
3f9b e5					push hl 
3f9c			 
3f9c					FORTH_DSP_VALUEHL 
3f9c cd 4d 22			call macro_dsp_valuehl 
3f9f				endm 
# End of macro FORTH_DSP_VALUEHL
3f9f			 
3f9f					FORTH_DSP_POP 
3f9f cd 05 23			call macro_forth_dsp_pop 
3fa2				endm 
# End of macro FORTH_DSP_POP
3fa2			 
3fa2 d1					pop de 
3fa3			 
3fa3 cd 3b 0d				call info_panel 
3fa6			 
3fa6			 
3fa6					NEXTW 
3fa6 c3 39 24			jp macro_next 
3fa9				endm 
# End of macro NEXTW
3fa9			.ATP: 
3fa9				CWHEAD .FB 78 "AT?" 3 WORD_FLAG_CODE 
3fa9 62				db WORD_SYS_CORE+78             
3faa 20 40			dw .FB            
3fac 04				db 3 + 1 
3fad .. 00			db "AT?",0              
3fb1				endm 
# End of macro CWHEAD
3fb1			; | AT? ( -- c r )  Push to stack the current position of the next print | TO TEST 
3fb1					if DEBUG_FORTH_WORDS_KEY 
3fb1						DMARK "AT?" 
3fb1 f5				push af  
3fb2 3a c6 3f			ld a, (.dmark)  
3fb5 32 a0 fd			ld (debug_mark),a  
3fb8 3a c7 3f			ld a, (.dmark+1)  
3fbb 32 a1 fd			ld (debug_mark+1),a  
3fbe 3a c8 3f			ld a, (.dmark+2)  
3fc1 32 a2 fd			ld (debug_mark+2),a  
3fc4 18 03			jr .pastdmark  
3fc6 ..			.dmark: db "AT?"  
3fc9 f1			.pastdmark: pop af  
3fca			endm  
# End of macro DMARK
3fca						CALLMONITOR 
3fca cd aa fd			call debug_vector  
3fcd				endm  
# End of macro CALLMONITOR
3fcd					endif 
3fcd 3a 93 f9				ld a, (f_cursor_ptr) 
3fd0			 
3fd0			if DEBUG_FORTH_WORDS 
3fd0				DMARK "AT?" 
3fd0 f5				push af  
3fd1 3a e5 3f			ld a, (.dmark)  
3fd4 32 a0 fd			ld (debug_mark),a  
3fd7 3a e6 3f			ld a, (.dmark+1)  
3fda 32 a1 fd			ld (debug_mark+1),a  
3fdd 3a e7 3f			ld a, (.dmark+2)  
3fe0 32 a2 fd			ld (debug_mark+2),a  
3fe3 18 03			jr .pastdmark  
3fe5 ..			.dmark: db "AT?"  
3fe8 f1			.pastdmark: pop af  
3fe9			endm  
# End of macro DMARK
3fe9				CALLMONITOR 
3fe9 cd aa fd			call debug_vector  
3fec				endm  
# End of macro CALLMONITOR
3fec			endif	 
3fec					; count the number of rows 
3fec			 
3fec 06 00				ld b, 0 
3fee 4f			.atpr:		ld c, a    ; save in case we go below zero 
3fef d6 28				sub display_cols 
3ff1 f2 f7 3f				jp p, .atprunder 
3ff4 04					inc b 
3ff5 18 f7				jr .atpr 
3ff7			.atprunder:	 
3ff7			if DEBUG_FORTH_WORDS 
3ff7				DMARK "A?2" 
3ff7 f5				push af  
3ff8 3a 0c 40			ld a, (.dmark)  
3ffb 32 a0 fd			ld (debug_mark),a  
3ffe 3a 0d 40			ld a, (.dmark+1)  
4001 32 a1 fd			ld (debug_mark+1),a  
4004 3a 0e 40			ld a, (.dmark+2)  
4007 32 a2 fd			ld (debug_mark+2),a  
400a 18 03			jr .pastdmark  
400c ..			.dmark: db "A?2"  
400f f1			.pastdmark: pop af  
4010			endm  
# End of macro DMARK
4010				CALLMONITOR 
4010 cd aa fd			call debug_vector  
4013				endm  
# End of macro CALLMONITOR
4013			endif	 
4013 26 00				ld h, 0 
4015 69					ld l, c 
4016 cd 48 20				call forth_push_numhl 
4019 68					ld l, b  
401a cd 48 20				call forth_push_numhl 
401d			 
401d			 
401d				NEXTW 
401d c3 39 24			jp macro_next 
4020				endm 
# End of macro NEXTW
4020			 
4020			.FB: 
4020				CWHEAD .EMIT 7 "FB" 2 WORD_FLAG_CODE 
4020 1b				db WORD_SYS_CORE+7             
4021 6e 40			dw .EMIT            
4023 03				db 2 + 1 
4024 .. 00			db "FB",0              
4027				endm 
# End of macro CWHEAD
4027			; | FB ( u -- ) Select frame buffer ID u (1-3)  |  DONE 
4027			; | | Default frame buffer is 1. System uses 0 which can't be selected for system messages etc. 
4027			; | | Selecting the frame buffer wont display unless automatic display is setup (default). 
4027			; | | If automatic display is off then updates will not be shown until DRAW is used. 
4027					if DEBUG_FORTH_WORDS_KEY 
4027						DMARK "FB." 
4027 f5				push af  
4028 3a 3c 40			ld a, (.dmark)  
402b 32 a0 fd			ld (debug_mark),a  
402e 3a 3d 40			ld a, (.dmark+1)  
4031 32 a1 fd			ld (debug_mark+1),a  
4034 3a 3e 40			ld a, (.dmark+2)  
4037 32 a2 fd			ld (debug_mark+2),a  
403a 18 03			jr .pastdmark  
403c ..			.dmark: db "FB."  
403f f1			.pastdmark: pop af  
4040			endm  
# End of macro DMARK
4040						CALLMONITOR 
4040 cd aa fd			call debug_vector  
4043				endm  
# End of macro CALLMONITOR
4043					endif 
4043			 
4043					FORTH_DSP_VALUEHL 
4043 cd 4d 22			call macro_dsp_valuehl 
4046				endm 
# End of macro FORTH_DSP_VALUEHL
4046			 
4046 7d					ld a, l 
4047 fe 01				cp 1 
4049 20 05				jr nz, .fbn1 
404b 21 45 fc				ld hl, display_fb1 
404e 18 15				jr .fbset 
4050 fe 02		.fbn1:		cp 2 
4052 20 05				jr nz, .fbn2 
4054 21 03 fb				ld hl, display_fb2 
4057 18 0c				jr .fbset 
4059 fe 03		.fbn2:		cp 3 
405b 20 05				jr nz, .fbn3 
405d 21 a4 fb				ld hl, display_fb3 
4060 18 03				jr .fbset 
4062			.fbn3:		 ; if invalid number select first 
4062 21 45 fc				ld hl, display_fb1 
4065 22 01 fb		.fbset:		ld (display_fb_active), hl 
4068			 
4068					FORTH_DSP_POP 
4068 cd 05 23			call macro_forth_dsp_pop 
406b				endm 
# End of macro FORTH_DSP_POP
406b			 
406b					NEXTW 
406b c3 39 24			jp macro_next 
406e				endm 
# End of macro NEXTW
406e			 
406e			 
406e			.EMIT: 
406e				CWHEAD .DOTH 7 "EMIT" 4 WORD_FLAG_CODE 
406e 1b				db WORD_SYS_CORE+7             
406f bf 40			dw .DOTH            
4071 05				db 4 + 1 
4072 .. 00			db "EMIT",0              
4077				endm 
# End of macro CWHEAD
4077			; |  EMIT ( u -- ) Display ascii character  TOS   | DONE 
4077					; get value off TOS and display it 
4077			 
4077					if DEBUG_FORTH_WORDS_KEY 
4077						DMARK "EMT" 
4077 f5				push af  
4078 3a 8c 40			ld a, (.dmark)  
407b 32 a0 fd			ld (debug_mark),a  
407e 3a 8d 40			ld a, (.dmark+1)  
4081 32 a1 fd			ld (debug_mark+1),a  
4084 3a 8e 40			ld a, (.dmark+2)  
4087 32 a2 fd			ld (debug_mark+2),a  
408a 18 03			jr .pastdmark  
408c ..			.dmark: db "EMT"  
408f f1			.pastdmark: pop af  
4090			endm  
# End of macro DMARK
4090						CALLMONITOR 
4090 cd aa fd			call debug_vector  
4093				endm  
# End of macro CALLMONITOR
4093					endif 
4093			 
4093					FORTH_DSP_VALUEHL 
4093 cd 4d 22			call macro_dsp_valuehl 
4096				endm 
# End of macro FORTH_DSP_VALUEHL
4096			 
4096 7d					ld a,l 
4097			 
4097					; TODO write to display 
4097			 
4097 32 f4 f2				ld (os_input), a 
409a 3e 00				ld a, 0 
409c 32 f5 f2				ld (os_input+1), a 
409f					 
409f 3a 93 f9				ld a, (f_cursor_ptr) 
40a2 11 f4 f2				ld de, os_input 
40a5 cd bd 0d				call str_at_display 
40a8			 
40a8			 
40a8 3a 71 f9				ld a,(cli_autodisplay) 
40ab fe 00				cp 0 
40ad 28 03				jr z, .enoupdate 
40af cd cd 0d						call update_display 
40b2					.enoupdate: 
40b2			 
40b2 3a 93 f9				ld a, (f_cursor_ptr) 
40b5 3c					inc a 
40b6 32 93 f9				ld (f_cursor_ptr), a   ; save new pos 
40b9			 
40b9			 
40b9					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
40b9 cd 05 23			call macro_forth_dsp_pop 
40bc				endm 
# End of macro FORTH_DSP_POP
40bc			  
40bc			 
40bc					NEXTW 
40bc c3 39 24			jp macro_next 
40bf				endm 
# End of macro NEXTW
40bf			.DOTH: 
40bf				CWHEAD .DOTF 8 ".-" 2 WORD_FLAG_CODE 
40bf 1c				db WORD_SYS_CORE+8             
40c0 ef 40			dw .DOTF            
40c2 03				db 2 + 1 
40c3 .. 00			db ".-",0              
40c6				endm 
# End of macro CWHEAD
40c6			        ; | .- ( u -- ) Display TOS replacing any dashes with spaces. Means you dont need to wrap strings in double quotes!   | DONE 
40c6					; get value off TOS and display it 
40c6					if DEBUG_FORTH_WORDS_KEY 
40c6						DMARK "DTD" 
40c6 f5				push af  
40c7 3a db 40			ld a, (.dmark)  
40ca 32 a0 fd			ld (debug_mark),a  
40cd 3a dc 40			ld a, (.dmark+1)  
40d0 32 a1 fd			ld (debug_mark+1),a  
40d3 3a dd 40			ld a, (.dmark+2)  
40d6 32 a2 fd			ld (debug_mark+2),a  
40d9 18 03			jr .pastdmark  
40db ..			.dmark: db "DTD"  
40de f1			.pastdmark: pop af  
40df			endm  
# End of macro DMARK
40df						CALLMONITOR 
40df cd aa fd			call debug_vector  
40e2				endm  
# End of macro CALLMONITOR
40e2					endif 
40e2 0e 01			ld c, 1	  ; flag for removal of '-' enabled 
40e4 3e 00			ld a, 0 
40e6 32 72 f9			ld (cli_mvdot), a 
40e9 c3 46 41			jp .dotgo 
40ec				NEXTW 
40ec c3 39 24			jp macro_next 
40ef				endm 
# End of macro NEXTW
40ef			.DOTF: 
40ef				CWHEAD .DOT 8 ".>" 2 WORD_FLAG_CODE 
40ef 1c				db WORD_SYS_CORE+8             
40f0 1d 41			dw .DOT            
40f2 03				db 2 + 1 
40f3 .. 00			db ".>",0              
40f6				endm 
# End of macro CWHEAD
40f6			        ; | .> ( u -- ) Display TOS and move the next display point with display  | DONE 
40f6					; get value off TOS and display it 
40f6			        ; TODO BUG adds extra spaces 
40f6			        ; TODO BUG handle numerics? 
40f6					if DEBUG_FORTH_WORDS_KEY 
40f6						DMARK "DTC" 
40f6 f5				push af  
40f7 3a 0b 41			ld a, (.dmark)  
40fa 32 a0 fd			ld (debug_mark),a  
40fd 3a 0c 41			ld a, (.dmark+1)  
4100 32 a1 fd			ld (debug_mark+1),a  
4103 3a 0d 41			ld a, (.dmark+2)  
4106 32 a2 fd			ld (debug_mark+2),a  
4109 18 03			jr .pastdmark  
410b ..			.dmark: db "DTC"  
410e f1			.pastdmark: pop af  
410f			endm  
# End of macro DMARK
410f						CALLMONITOR 
410f cd aa fd			call debug_vector  
4112				endm  
# End of macro CALLMONITOR
4112					endif 
4112 3e 01			ld a, 1 
4114 32 72 f9			ld (cli_mvdot), a 
4117 c3 46 41			jp .dotgo 
411a				NEXTW 
411a c3 39 24			jp macro_next 
411d				endm 
# End of macro NEXTW
411d			 
411d			.DOT: 
411d				CWHEAD .CLS 8 "." 1 WORD_FLAG_CODE 
411d 1c				db WORD_SYS_CORE+8             
411e f9 42			dw .CLS            
4120 02				db 1 + 1 
4121 .. 00			db ".",0              
4123				endm 
# End of macro CWHEAD
4123			        ; | . ( u -- ) Display TOS. Does not move next print position. Use .> if you want that. | DONE 
4123					; get value off TOS and display it 
4123			 
4123					if DEBUG_FORTH_WORDS_KEY 
4123						DMARK "DOT" 
4123 f5				push af  
4124 3a 38 41			ld a, (.dmark)  
4127 32 a0 fd			ld (debug_mark),a  
412a 3a 39 41			ld a, (.dmark+1)  
412d 32 a1 fd			ld (debug_mark+1),a  
4130 3a 3a 41			ld a, (.dmark+2)  
4133 32 a2 fd			ld (debug_mark+2),a  
4136 18 03			jr .pastdmark  
4138 ..			.dmark: db "DOT"  
413b f1			.pastdmark: pop af  
413c			endm  
# End of macro DMARK
413c						CALLMONITOR 
413c cd aa fd			call debug_vector  
413f				endm  
# End of macro CALLMONITOR
413f					endif 
413f 3e 00			ld a, 0 
4141 32 72 f9			ld (cli_mvdot), a 
4144 0e 00		ld c, 0	  ; flag for removal of '-' disabled 
4146				 
4146			 
4146			.dotgo: 
4146			 
4146			; move up type to on stack for parserv5 
4146					FORTH_DSP 
4146 cd 13 22			call macro_forth_dsp 
4149				endm 
# End of macro FORTH_DSP
4149				;FORTH_DSP_VALUE  
4149			 
4149			if DEBUG_FORTH_DOT 
4149				DMARK "DOT" 
4149 f5				push af  
414a 3a 5e 41			ld a, (.dmark)  
414d 32 a0 fd			ld (debug_mark),a  
4150 3a 5f 41			ld a, (.dmark+1)  
4153 32 a1 fd			ld (debug_mark+1),a  
4156 3a 60 41			ld a, (.dmark+2)  
4159 32 a2 fd			ld (debug_mark+2),a  
415c 18 03			jr .pastdmark  
415e ..			.dmark: db "DOT"  
4161 f1			.pastdmark: pop af  
4162			endm  
# End of macro DMARK
4162				CALLMONITOR 
4162 cd aa fd			call debug_vector  
4165				endm  
# End of macro CALLMONITOR
4165			endif	 
4165			;		.print: 
4165			 
4165 7e				ld a,(hl)  ; work out what type of value is on the TOS 
4166 23				inc hl   ; position to the actual value 
4167 fe 01			cp DS_TYPE_STR 
4169 20 06			jr nz, .dotnum1  
416b			 
416b			; display string 
416b				FORTH_DSP_VALUE  
416b cd 36 22			call macro_forth_dsp_value 
416e				endm 
# End of macro FORTH_DSP_VALUE
416e eb				ex de,hl 
416f 18 49			jr .dotwrite 
4171			 
4171			.dotnum1: 
4171 fe 02			cp DS_TYPE_INUM 
4173 20 44			jr nz, .dotflot 
4175			 
4175			 
4175			; display number 
4175			 
4175			;	push hl 
4175			;	call clear_display 
4175			;	pop hl 
4175			 
4175 5e				ld e, (hl) 
4176 23				inc hl 
4177 56				ld d, (hl) 
4178 21 f6 f0			ld hl, scratch 
417b			if DEBUG_FORTH_DOT 
417b				DMARK "DT1" 
417b f5				push af  
417c 3a 90 41			ld a, (.dmark)  
417f 32 a0 fd			ld (debug_mark),a  
4182 3a 91 41			ld a, (.dmark+1)  
4185 32 a1 fd			ld (debug_mark+1),a  
4188 3a 92 41			ld a, (.dmark+2)  
418b 32 a2 fd			ld (debug_mark+2),a  
418e 18 03			jr .pastdmark  
4190 ..			.dmark: db "DT1"  
4193 f1			.pastdmark: pop af  
4194			endm  
# End of macro DMARK
4194				CALLMONITOR 
4194 cd aa fd			call debug_vector  
4197				endm  
# End of macro CALLMONITOR
4197			endif	 
4197			 
4197 cd f3 12			call uitoa_16 
419a eb				ex de,hl 
419b			 
419b			if DEBUG_FORTH_DOT 
419b				DMARK "DT2" 
419b f5				push af  
419c 3a b0 41			ld a, (.dmark)  
419f 32 a0 fd			ld (debug_mark),a  
41a2 3a b1 41			ld a, (.dmark+1)  
41a5 32 a1 fd			ld (debug_mark+1),a  
41a8 3a b2 41			ld a, (.dmark+2)  
41ab 32 a2 fd			ld (debug_mark+2),a  
41ae 18 03			jr .pastdmark  
41b0 ..			.dmark: db "DT2"  
41b3 f1			.pastdmark: pop af  
41b4			endm  
# End of macro DMARK
41b4				CALLMONITOR 
41b4 cd aa fd			call debug_vector  
41b7				endm  
# End of macro CALLMONITOR
41b7			endif	 
41b7			 
41b7			;	ld de, os_word_scratch 
41b7 18 01			jr .dotwrite 
41b9			 
41b9 00			.dotflot:   nop 
41ba			; TODO print floating point number 
41ba			 
41ba			.dotwrite:		 
41ba			 
41ba					; if c is set then set all '-' to spaces 
41ba					; need to also take into account .>  
41ba			 
41ba 3e 01				ld a, 1 
41bc b9					cp c 
41bd 20 67				jr nz, .nodashswap 
41bf			 
41bf					; DE has the string to write, working with HL 
41bf			 
41bf 06 ff				ld b, 255 
41c1 d5					push de 
41c2 e1					pop hl 
41c3			 
41c3			if DEBUG_FORTH_DOT 
41c3				DMARK "DT-" 
41c3 f5				push af  
41c4 3a d8 41			ld a, (.dmark)  
41c7 32 a0 fd			ld (debug_mark),a  
41ca 3a d9 41			ld a, (.dmark+1)  
41cd 32 a1 fd			ld (debug_mark+1),a  
41d0 3a da 41			ld a, (.dmark+2)  
41d3 32 a2 fd			ld (debug_mark+2),a  
41d6 18 03			jr .pastdmark  
41d8 ..			.dmark: db "DT-"  
41db f1			.pastdmark: pop af  
41dc			endm  
# End of macro DMARK
41dc				CALLMONITOR 
41dc cd aa fd			call debug_vector  
41df				endm  
# End of macro CALLMONITOR
41df			endif	 
41df 7e			.dashscan:	ld a, (hl) 
41e0 fe 00				cp 0 
41e2 28 42				jr z, .nodashswap 
41e4 fe 2d				cp '-' 
41e6 20 03				jr nz, .dashskip 
41e8 3e 20				ld a, ' ' 
41ea 77					ld (hl), a 
41eb 23			.dashskip:	inc hl 
41ec			if DEBUG_FORTH_DOT 
41ec				DMARK "D-2" 
41ec f5				push af  
41ed 3a 01 42			ld a, (.dmark)  
41f0 32 a0 fd			ld (debug_mark),a  
41f3 3a 02 42			ld a, (.dmark+1)  
41f6 32 a1 fd			ld (debug_mark+1),a  
41f9 3a 03 42			ld a, (.dmark+2)  
41fc 32 a2 fd			ld (debug_mark+2),a  
41ff 18 03			jr .pastdmark  
4201 ..			.dmark: db "D-2"  
4204 f1			.pastdmark: pop af  
4205			endm  
# End of macro DMARK
4205				CALLMONITOR 
4205 cd aa fd			call debug_vector  
4208				endm  
# End of macro CALLMONITOR
4208			endif	 
4208 10 d5				djnz .dashscan 
420a			 
420a			if DEBUG_FORTH_DOT 
420a				DMARK "D-1" 
420a f5				push af  
420b 3a 1f 42			ld a, (.dmark)  
420e 32 a0 fd			ld (debug_mark),a  
4211 3a 20 42			ld a, (.dmark+1)  
4214 32 a1 fd			ld (debug_mark+1),a  
4217 3a 21 42			ld a, (.dmark+2)  
421a 32 a2 fd			ld (debug_mark+2),a  
421d 18 03			jr .pastdmark  
421f ..			.dmark: db "D-1"  
4222 f1			.pastdmark: pop af  
4223			endm  
# End of macro DMARK
4223				CALLMONITOR 
4223 cd aa fd			call debug_vector  
4226				endm  
# End of macro CALLMONITOR
4226			endif	 
4226			 
4226			.nodashswap: 
4226			 
4226			if DEBUG_FORTH_DOT 
4226				DMARK "D-o" 
4226 f5				push af  
4227 3a 3b 42			ld a, (.dmark)  
422a 32 a0 fd			ld (debug_mark),a  
422d 3a 3c 42			ld a, (.dmark+1)  
4230 32 a1 fd			ld (debug_mark+1),a  
4233 3a 3d 42			ld a, (.dmark+2)  
4236 32 a2 fd			ld (debug_mark+2),a  
4239 18 03			jr .pastdmark  
423b ..			.dmark: db "D-o"  
423e f1			.pastdmark: pop af  
423f			endm  
# End of macro DMARK
423f				CALLMONITOR 
423f cd aa fd			call debug_vector  
4242				endm  
# End of macro CALLMONITOR
4242			endif	 
4242			 
4242 d5					push de   ; save string start in case we need to advance print 
4243			 
4243 3a 93 f9				ld a, (f_cursor_ptr) 
4246 cd bd 0d				call str_at_display 
4249 3a 71 f9				ld a,(cli_autodisplay) 
424c fe 00				cp 0 
424e 28 03				jr z, .noupdate 
4250 cd cd 0d						call update_display 
4253					.noupdate: 
4253			 
4253			 
4253					; see if we need to advance the print position 
4253			 
4253 e1					pop hl   ; get back string 
4254			;		ex de,hl 
4254			 
4254 3a 72 f9				ld a, (cli_mvdot) 
4257			if DEBUG_FORTH_DOT 
4257			;		ld e,a 
4257				DMARK "D>1" 
4257 f5				push af  
4258 3a 6c 42			ld a, (.dmark)  
425b 32 a0 fd			ld (debug_mark),a  
425e 3a 6d 42			ld a, (.dmark+1)  
4261 32 a1 fd			ld (debug_mark+1),a  
4264 3a 6e 42			ld a, (.dmark+2)  
4267 32 a2 fd			ld (debug_mark+2),a  
426a 18 03			jr .pastdmark  
426c ..			.dmark: db "D>1"  
426f f1			.pastdmark: pop af  
4270			endm  
# End of macro DMARK
4270				CALLMONITOR 
4270 cd aa fd			call debug_vector  
4273				endm  
# End of macro CALLMONITOR
4273			endif	 
4273 fe 00				cp 0 
4275 28 44				jr z, .noadv 
4277					; yes, lets advance the print position 
4277 3e 00				ld a, 0 
4279 cd 4f 13				call strlent 
427c			if DEBUG_FORTH_DOT 
427c				DMARK "D-?" 
427c f5				push af  
427d 3a 91 42			ld a, (.dmark)  
4280 32 a0 fd			ld (debug_mark),a  
4283 3a 92 42			ld a, (.dmark+1)  
4286 32 a1 fd			ld (debug_mark+1),a  
4289 3a 93 42			ld a, (.dmark+2)  
428c 32 a2 fd			ld (debug_mark+2),a  
428f 18 03			jr .pastdmark  
4291 ..			.dmark: db "D-?"  
4294 f1			.pastdmark: pop af  
4295			endm  
# End of macro DMARK
4295				CALLMONITOR 
4295 cd aa fd			call debug_vector  
4298				endm  
# End of macro CALLMONITOR
4298			endif	 
4298 3a 93 f9				ld a, (f_cursor_ptr) 
429b 85					add a,l 
429c					;call addatohl 
429c					;ld a, l 
429c 32 93 f9				ld (f_cursor_ptr), a   ; save new pos 
429f			 
429f			if DEBUG_FORTH_DOT 
429f				DMARK "D->" 
429f f5				push af  
42a0 3a b4 42			ld a, (.dmark)  
42a3 32 a0 fd			ld (debug_mark),a  
42a6 3a b5 42			ld a, (.dmark+1)  
42a9 32 a1 fd			ld (debug_mark+1),a  
42ac 3a b6 42			ld a, (.dmark+2)  
42af 32 a2 fd			ld (debug_mark+2),a  
42b2 18 03			jr .pastdmark  
42b4 ..			.dmark: db "D->"  
42b7 f1			.pastdmark: pop af  
42b8			endm  
# End of macro DMARK
42b8				CALLMONITOR 
42b8 cd aa fd			call debug_vector  
42bb				endm  
# End of macro CALLMONITOR
42bb			endif	 
42bb			 
42bb			.noadv:	 
42bb			 
42bb					if DEBUG_FORTH_DOT_WAIT 
42bb							call next_page_prompt 
42bb					endif	 
42bb			; TODO this pop off the stack causes a crash. i dont know why 
42bb			 
42bb			 
42bb			if DEBUG_FORTH_DOT 
42bb				DMARK "DTh" 
42bb f5				push af  
42bc 3a d0 42			ld a, (.dmark)  
42bf 32 a0 fd			ld (debug_mark),a  
42c2 3a d1 42			ld a, (.dmark+1)  
42c5 32 a1 fd			ld (debug_mark+1),a  
42c8 3a d2 42			ld a, (.dmark+2)  
42cb 32 a2 fd			ld (debug_mark+2),a  
42ce 18 03			jr .pastdmark  
42d0 ..			.dmark: db "DTh"  
42d3 f1			.pastdmark: pop af  
42d4			endm  
# End of macro DMARK
42d4				CALLMONITOR 
42d4 cd aa fd			call debug_vector  
42d7				endm  
# End of macro CALLMONITOR
42d7			endif	 
42d7			 
42d7					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
42d7 cd 05 23			call macro_forth_dsp_pop 
42da				endm 
# End of macro FORTH_DSP_POP
42da			 
42da			if DEBUG_FORTH_DOT 
42da				DMARK "DTi" 
42da f5				push af  
42db 3a ef 42			ld a, (.dmark)  
42de 32 a0 fd			ld (debug_mark),a  
42e1 3a f0 42			ld a, (.dmark+1)  
42e4 32 a1 fd			ld (debug_mark+1),a  
42e7 3a f1 42			ld a, (.dmark+2)  
42ea 32 a2 fd			ld (debug_mark+2),a  
42ed 18 03			jr .pastdmark  
42ef ..			.dmark: db "DTi"  
42f2 f1			.pastdmark: pop af  
42f3			endm  
# End of macro DMARK
42f3				CALLMONITOR 
42f3 cd aa fd			call debug_vector  
42f6				endm  
# End of macro CALLMONITOR
42f6			endif	 
42f6			 
42f6			 
42f6					NEXTW 
42f6 c3 39 24			jp macro_next 
42f9				endm 
# End of macro NEXTW
42f9			 
42f9			.CLS: 
42f9				CWHEAD .DRAW 33 "CLS" 3 WORD_FLAG_CODE 
42f9 35				db WORD_SYS_CORE+33             
42fa 26 43			dw .DRAW            
42fc 04				db 3 + 1 
42fd .. 00			db "CLS",0              
4301				endm 
# End of macro CWHEAD
4301			; | CLS ( -- ) Clear current frame buffer and set next print position to top left corner  | DONE 
4301					if DEBUG_FORTH_WORDS_KEY 
4301						DMARK "CLS" 
4301 f5				push af  
4302 3a 16 43			ld a, (.dmark)  
4305 32 a0 fd			ld (debug_mark),a  
4308 3a 17 43			ld a, (.dmark+1)  
430b 32 a1 fd			ld (debug_mark+1),a  
430e 3a 18 43			ld a, (.dmark+2)  
4311 32 a2 fd			ld (debug_mark+2),a  
4314 18 03			jr .pastdmark  
4316 ..			.dmark: db "CLS"  
4319 f1			.pastdmark: pop af  
431a			endm  
# End of macro DMARK
431a						CALLMONITOR 
431a cd aa fd			call debug_vector  
431d				endm  
# End of macro CALLMONITOR
431d					endif 
431d cd aa 0d				call clear_display 
4320 c3 34 44				jp .home		; and home cursor 
4323					NEXTW 
4323 c3 39 24			jp macro_next 
4326				endm 
# End of macro NEXTW
4326			 
4326			.DRAW: 
4326				CWHEAD .DUMP 34 "DRAW" 4 WORD_FLAG_CODE 
4326 36				db WORD_SYS_CORE+34             
4327 51 43			dw .DUMP            
4329 05				db 4 + 1 
432a .. 00			db "DRAW",0              
432f				endm 
# End of macro CWHEAD
432f			; | DRAW ( -- ) Draw contents of current frame buffer  | DONE 
432f					if DEBUG_FORTH_WORDS_KEY 
432f						DMARK "DRW" 
432f f5				push af  
4330 3a 44 43			ld a, (.dmark)  
4333 32 a0 fd			ld (debug_mark),a  
4336 3a 45 43			ld a, (.dmark+1)  
4339 32 a1 fd			ld (debug_mark+1),a  
433c 3a 46 43			ld a, (.dmark+2)  
433f 32 a2 fd			ld (debug_mark+2),a  
4342 18 03			jr .pastdmark  
4344 ..			.dmark: db "DRW"  
4347 f1			.pastdmark: pop af  
4348			endm  
# End of macro DMARK
4348						CALLMONITOR 
4348 cd aa fd			call debug_vector  
434b				endm  
# End of macro CALLMONITOR
434b					endif 
434b cd cd 0d				call update_display 
434e					NEXTW 
434e c3 39 24			jp macro_next 
4351				endm 
# End of macro NEXTW
4351			 
4351			.DUMP: 
4351				CWHEAD .CDUMP 35 "DUMP" 4 WORD_FLAG_CODE 
4351 37				db WORD_SYS_CORE+35             
4352 89 43			dw .CDUMP            
4354 05				db 4 + 1 
4355 .. 00			db "DUMP",0              
435a				endm 
# End of macro CWHEAD
435a			; | DUMP ( x -- ) With address x display dump   | DONE 
435a			; TODO pop address to use off of the stack 
435a					if DEBUG_FORTH_WORDS_KEY 
435a						DMARK "DUM" 
435a f5				push af  
435b 3a 6f 43			ld a, (.dmark)  
435e 32 a0 fd			ld (debug_mark),a  
4361 3a 70 43			ld a, (.dmark+1)  
4364 32 a1 fd			ld (debug_mark+1),a  
4367 3a 71 43			ld a, (.dmark+2)  
436a 32 a2 fd			ld (debug_mark+2),a  
436d 18 03			jr .pastdmark  
436f ..			.dmark: db "DUM"  
4372 f1			.pastdmark: pop af  
4373			endm  
# End of macro DMARK
4373						CALLMONITOR 
4373 cd aa fd			call debug_vector  
4376				endm  
# End of macro CALLMONITOR
4376					endif 
4376 cd aa 0d				call clear_display 
4379			 
4379					; get address 
4379			 
4379					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4379 cd 4d 22			call macro_dsp_valuehl 
437c				endm 
# End of macro FORTH_DSP_VALUEHL
437c				 
437c					; save it for cdump 
437c			 
437c 22 19 f4				ld (os_cur_ptr),hl 
437f			 
437f					; destroy value TOS 
437f			 
437f					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
437f cd 05 23			call macro_forth_dsp_pop 
4382				endm 
# End of macro FORTH_DSP_POP
4382			 
4382 cd c8 1e				call dumpcont	; skip old style of param parsing	 
4385 c9					ret			; TODO command causes end of remaining parsing so cant do: $0000 DUMP $8000 DUMP 
4386					NEXTW 
4386 c3 39 24			jp macro_next 
4389				endm 
# End of macro NEXTW
4389			.CDUMP: 
4389				CWHEAD .DAT 36 "CDUMP" 5 WORD_FLAG_CODE 
4389 38				db WORD_SYS_CORE+36             
438a b9 43			dw .DAT            
438c 06				db 5 + 1 
438d .. 00			db "CDUMP",0              
4393				endm 
# End of macro CWHEAD
4393			; | CDUMP ( -- ) Continue dump of memory from DUMP | DONE 
4393					if DEBUG_FORTH_WORDS_KEY 
4393						DMARK "CDP" 
4393 f5				push af  
4394 3a a8 43			ld a, (.dmark)  
4397 32 a0 fd			ld (debug_mark),a  
439a 3a a9 43			ld a, (.dmark+1)  
439d 32 a1 fd			ld (debug_mark+1),a  
43a0 3a aa 43			ld a, (.dmark+2)  
43a3 32 a2 fd			ld (debug_mark+2),a  
43a6 18 03			jr .pastdmark  
43a8 ..			.dmark: db "CDP"  
43ab f1			.pastdmark: pop af  
43ac			endm  
# End of macro DMARK
43ac						CALLMONITOR 
43ac cd aa fd			call debug_vector  
43af				endm  
# End of macro CALLMONITOR
43af					endif 
43af cd aa 0d				call clear_display 
43b2 cd c8 1e				call dumpcont	 
43b5 c9					ret			; TODO command causes end of remaining parsing so cant do: $0000 DUMP CDUMP $8000 DUMP 
43b6					NEXTW 
43b6 c3 39 24			jp macro_next 
43b9				endm 
# End of macro NEXTW
43b9			 
43b9			 
43b9			 
43b9			 
43b9			.DAT: 
43b9				CWHEAD .HOME 41 "AT" 2 WORD_FLAG_CODE 
43b9 3d				db WORD_SYS_CORE+41             
43ba 0f 44			dw .HOME            
43bc 03				db 2 + 1 
43bd .. 00			db "AT",0              
43c0				endm 
# End of macro CWHEAD
43c0			; | AT ( u1 u2 -- ) Set next output via . or emit at row u2 col u1 | DONE 
43c0					if DEBUG_FORTH_WORDS_KEY 
43c0						DMARK "AT." 
43c0 f5				push af  
43c1 3a d5 43			ld a, (.dmark)  
43c4 32 a0 fd			ld (debug_mark),a  
43c7 3a d6 43			ld a, (.dmark+1)  
43ca 32 a1 fd			ld (debug_mark+1),a  
43cd 3a d7 43			ld a, (.dmark+2)  
43d0 32 a2 fd			ld (debug_mark+2),a  
43d3 18 03			jr .pastdmark  
43d5 ..			.dmark: db "AT."  
43d8 f1			.pastdmark: pop af  
43d9			endm  
# End of macro DMARK
43d9						CALLMONITOR 
43d9 cd aa fd			call debug_vector  
43dc				endm  
# End of macro CALLMONITOR
43dc					endif 
43dc					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
43dc cd 4d 22			call macro_dsp_valuehl 
43df				endm 
# End of macro FORTH_DSP_VALUEHL
43df			 
43df			 
43df					; TODO save cursor row 
43df 7d					ld a,l 
43e0 fe 02				cp 2 
43e2 20 04				jr nz, .crow3 
43e4 3e 28				ld a, display_row_2 
43e6 18 12				jr .ccol1 
43e8 fe 03		.crow3:		cp 3 
43ea 20 04				jr nz, .crow4 
43ec 3e 50				ld a, display_row_3 
43ee 18 0a				jr .ccol1 
43f0 fe 04		.crow4:		cp 4 
43f2 20 04				jr nz, .crow1 
43f4 3e 78				ld a, display_row_4 
43f6 18 02				jr .ccol1 
43f8 3e 00		.crow1:		ld a,display_row_1 
43fa f5			.ccol1:		push af			; got row offset 
43fb 6f					ld l,a 
43fc 26 00				ld h,0 
43fe					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
43fe cd 05 23			call macro_forth_dsp_pop 
4401				endm 
# End of macro FORTH_DSP_POP
4401					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4401 cd 4d 22			call macro_dsp_valuehl 
4404				endm 
# End of macro FORTH_DSP_VALUEHL
4404					; TODO save cursor col 
4404 f1					pop af 
4405 85					add l		; add col offset 
4406 32 93 f9				ld (f_cursor_ptr), a 
4409					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4409 cd 05 23			call macro_forth_dsp_pop 
440c				endm 
# End of macro FORTH_DSP_POP
440c			 
440c					; calculate  
440c			 
440c					NEXTW 
440c c3 39 24			jp macro_next 
440f				endm 
# End of macro NEXTW
440f			 
440f			 
440f			.HOME: 
440f				CWHEAD .CR 45 "HOME" 4 WORD_FLAG_CODE 
440f 41				db WORD_SYS_CORE+45             
4410 3c 44			dw .CR            
4412 05				db 4 + 1 
4413 .. 00			db "HOME",0              
4418				endm 
# End of macro CWHEAD
4418			; | HOME ( -- ) Reset the current cursor for output to home | DONE 
4418					if DEBUG_FORTH_WORDS_KEY 
4418						DMARK "HOM" 
4418 f5				push af  
4419 3a 2d 44			ld a, (.dmark)  
441c 32 a0 fd			ld (debug_mark),a  
441f 3a 2e 44			ld a, (.dmark+1)  
4422 32 a1 fd			ld (debug_mark+1),a  
4425 3a 2f 44			ld a, (.dmark+2)  
4428 32 a2 fd			ld (debug_mark+2),a  
442b 18 03			jr .pastdmark  
442d ..			.dmark: db "HOM"  
4430 f1			.pastdmark: pop af  
4431			endm  
# End of macro DMARK
4431						CALLMONITOR 
4431 cd aa fd			call debug_vector  
4434				endm  
# End of macro CALLMONITOR
4434					endif 
4434 3e 00		.home:		ld a, 0		; and home cursor 
4436 32 93 f9				ld (f_cursor_ptr), a 
4439					NEXTW 
4439 c3 39 24			jp macro_next 
443c				endm 
# End of macro NEXTW
443c			 
443c			 
443c			.CR: 
443c				CWHEAD .SPACE 50 "CR" 2 WORD_FLAG_CODE 
443c 46				db WORD_SYS_CORE+50             
443d 77 44			dw .SPACE            
443f 03				db 2 + 1 
4440 .. 00			db "CR",0              
4443				endm 
# End of macro CWHEAD
4443			; | CR (  -- s ) Push CR/LF pair onto the stack as a string  | DONE 
4443					if DEBUG_FORTH_WORDS_KEY 
4443						DMARK "CR." 
4443 f5				push af  
4444 3a 58 44			ld a, (.dmark)  
4447 32 a0 fd			ld (debug_mark),a  
444a 3a 59 44			ld a, (.dmark+1)  
444d 32 a1 fd			ld (debug_mark+1),a  
4450 3a 5a 44			ld a, (.dmark+2)  
4453 32 a2 fd			ld (debug_mark+2),a  
4456 18 03			jr .pastdmark  
4458 ..			.dmark: db "CR."  
445b f1			.pastdmark: pop af  
445c			endm  
# End of macro DMARK
445c						CALLMONITOR 
445c cd aa fd			call debug_vector  
445f				endm  
# End of macro CALLMONITOR
445f					endif 
445f 3e 0d				ld a, 13 
4461 32 f6 f0				ld (scratch),a 
4464 3e 0a				ld a, 10 
4466 32 f7 f0				ld (scratch+1),a 
4469 3e 00				ld a, 0 
446b 32 f8 f0				ld (scratch+2),a 
446e 21 f6 f0				ld hl, scratch 
4471 cd b6 20				call forth_push_str 
4474					 
4474				       NEXTW 
4474 c3 39 24			jp macro_next 
4477				endm 
# End of macro NEXTW
4477			.SPACE: 
4477				CWHEAD .SPACES 50 "BL" 2 WORD_FLAG_CODE 
4477 46				db WORD_SYS_CORE+50             
4478 ad 44			dw .SPACES            
447a 03				db 2 + 1 
447b .. 00			db "BL",0              
447e				endm 
# End of macro CWHEAD
447e			; | BL (  -- c ) Push the value of space onto the stack as a string  | DONE 
447e					if DEBUG_FORTH_WORDS_KEY 
447e						DMARK "BL." 
447e f5				push af  
447f 3a 93 44			ld a, (.dmark)  
4482 32 a0 fd			ld (debug_mark),a  
4485 3a 94 44			ld a, (.dmark+1)  
4488 32 a1 fd			ld (debug_mark+1),a  
448b 3a 95 44			ld a, (.dmark+2)  
448e 32 a2 fd			ld (debug_mark+2),a  
4491 18 03			jr .pastdmark  
4493 ..			.dmark: db "BL."  
4496 f1			.pastdmark: pop af  
4497			endm  
# End of macro DMARK
4497						CALLMONITOR 
4497 cd aa fd			call debug_vector  
449a				endm  
# End of macro CALLMONITOR
449a					endif 
449a 3e 20				ld a, " " 
449c 32 f6 f0				ld (scratch),a 
449f 3e 00				ld a, 0 
44a1 32 f7 f0				ld (scratch+1),a 
44a4 21 f6 f0				ld hl, scratch 
44a7 cd b6 20				call forth_push_str 
44aa					 
44aa				       NEXTW 
44aa c3 39 24			jp macro_next 
44ad				endm 
# End of macro NEXTW
44ad			 
44ad			;.blstr: db " ", 0 
44ad			 
44ad			.SPACES: 
44ad				CWHEAD .SCROLL 51 "SPACES" 6 WORD_FLAG_CODE 
44ad 47				db WORD_SYS_CORE+51             
44ae 48 45			dw .SCROLL            
44b0 07				db 6 + 1 
44b1 .. 00			db "SPACES",0              
44b8				endm 
# End of macro CWHEAD
44b8			; | SPACES ( u -- str ) A string of u spaces is pushed onto the stack | DONE 
44b8					if DEBUG_FORTH_WORDS_KEY 
44b8						DMARK "SPS" 
44b8 f5				push af  
44b9 3a cd 44			ld a, (.dmark)  
44bc 32 a0 fd			ld (debug_mark),a  
44bf 3a ce 44			ld a, (.dmark+1)  
44c2 32 a1 fd			ld (debug_mark+1),a  
44c5 3a cf 44			ld a, (.dmark+2)  
44c8 32 a2 fd			ld (debug_mark+2),a  
44cb 18 03			jr .pastdmark  
44cd ..			.dmark: db "SPS"  
44d0 f1			.pastdmark: pop af  
44d1			endm  
# End of macro DMARK
44d1						CALLMONITOR 
44d1 cd aa fd			call debug_vector  
44d4				endm  
# End of macro CALLMONITOR
44d4					endif 
44d4			 
44d4			 
44d4					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
44d4 cd 4d 22			call macro_dsp_valuehl 
44d7				endm 
# End of macro FORTH_DSP_VALUEHL
44d7			 
44d7 e5					push hl    ; u 
44d8					if DEBUG_FORTH_WORDS 
44d8						DMARK "SPA" 
44d8 f5				push af  
44d9 3a ed 44			ld a, (.dmark)  
44dc 32 a0 fd			ld (debug_mark),a  
44df 3a ee 44			ld a, (.dmark+1)  
44e2 32 a1 fd			ld (debug_mark+1),a  
44e5 3a ef 44			ld a, (.dmark+2)  
44e8 32 a2 fd			ld (debug_mark+2),a  
44eb 18 03			jr .pastdmark  
44ed ..			.dmark: db "SPA"  
44f0 f1			.pastdmark: pop af  
44f1			endm  
# End of macro DMARK
44f1						CALLMONITOR 
44f1 cd aa fd			call debug_vector  
44f4				endm  
# End of macro CALLMONITOR
44f4					endif 
44f4			 
44f4					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
44f4 cd 05 23			call macro_forth_dsp_pop 
44f7				endm 
# End of macro FORTH_DSP_POP
44f7 e1					pop hl 
44f8 0e 00				ld c, 0 
44fa 45					ld b, l 
44fb 21 f6 f0				ld hl, scratch  
44fe			 
44fe					if DEBUG_FORTH_WORDS 
44fe						DMARK "SP2" 
44fe f5				push af  
44ff 3a 13 45			ld a, (.dmark)  
4502 32 a0 fd			ld (debug_mark),a  
4505 3a 14 45			ld a, (.dmark+1)  
4508 32 a1 fd			ld (debug_mark+1),a  
450b 3a 15 45			ld a, (.dmark+2)  
450e 32 a2 fd			ld (debug_mark+2),a  
4511 18 03			jr .pastdmark  
4513 ..			.dmark: db "SP2"  
4516 f1			.pastdmark: pop af  
4517			endm  
# End of macro DMARK
4517						CALLMONITOR 
4517 cd aa fd			call debug_vector  
451a				endm  
# End of macro CALLMONITOR
451a					endif 
451a 3e 20				ld a, ' ' 
451c			.spaces1:	 
451c 77					ld (hl),a 
451d 23					inc hl 
451e					 
451e 10 fc				djnz .spaces1 
4520 3e 00				ld a,0 
4522 77					ld (hl),a 
4523 21 f6 f0				ld hl, scratch 
4526					if DEBUG_FORTH_WORDS 
4526						DMARK "SP3" 
4526 f5				push af  
4527 3a 3b 45			ld a, (.dmark)  
452a 32 a0 fd			ld (debug_mark),a  
452d 3a 3c 45			ld a, (.dmark+1)  
4530 32 a1 fd			ld (debug_mark+1),a  
4533 3a 3d 45			ld a, (.dmark+2)  
4536 32 a2 fd			ld (debug_mark+2),a  
4539 18 03			jr .pastdmark  
453b ..			.dmark: db "SP3"  
453e f1			.pastdmark: pop af  
453f			endm  
# End of macro DMARK
453f						CALLMONITOR 
453f cd aa fd			call debug_vector  
4542				endm  
# End of macro CALLMONITOR
4542					endif 
4542 cd b6 20				call forth_push_str 
4545			 
4545				       NEXTW 
4545 c3 39 24			jp macro_next 
4548				endm 
# End of macro NEXTW
4548			 
4548			 
4548			 
4548			.SCROLL: 
4548				CWHEAD .SCROLLD 63 "SCROLL" 6 WORD_FLAG_CODE 
4548 53				db WORD_SYS_CORE+63             
4549 75 45			dw .SCROLLD            
454b 07				db 6 + 1 
454c .. 00			db "SCROLL",0              
4553				endm 
# End of macro CWHEAD
4553			; | SCROLL ( -- ) Scroll up one line - next write will update if required | DONE 
4553					if DEBUG_FORTH_WORDS_KEY 
4553						DMARK "SCR" 
4553 f5				push af  
4554 3a 68 45			ld a, (.dmark)  
4557 32 a0 fd			ld (debug_mark),a  
455a 3a 69 45			ld a, (.dmark+1)  
455d 32 a1 fd			ld (debug_mark+1),a  
4560 3a 6a 45			ld a, (.dmark+2)  
4563 32 a2 fd			ld (debug_mark+2),a  
4566 18 03			jr .pastdmark  
4568 ..			.dmark: db "SCR"  
456b f1			.pastdmark: pop af  
456c			endm  
# End of macro DMARK
456c						CALLMONITOR 
456c cd aa fd			call debug_vector  
456f				endm  
# End of macro CALLMONITOR
456f					endif 
456f			 
456f cd 6c 0d			call scroll_up 
4572			;	call update_display 
4572			 
4572					NEXTW 
4572 c3 39 24			jp macro_next 
4575				endm 
# End of macro NEXTW
4575			 
4575			 
4575			 
4575			;		; get dir 
4575			; 
4575			;		FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4575			; 
4575			;		push hl 
4575			; 
4575			;		; destroy value TOS 
4575			; 
4575			;		FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4575			; 
4575			;		; get count 
4575			; 
4575			;		FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4575			; 
4575			;		push hl 
4575			; 
4575			;		; destroy value TOS 
4575			; 
4575			;		FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4575			; 
4575			;		; one value on hl get other one back 
4575			; 
4575			;		pop bc    ; count 
4575			; 
4575			;		pop de   ; dir 
4575			; 
4575			; 
4575			;		ld b, c 
4575			; 
4575			;.scrolldir:     push bc 
4575			;		push de 
4575			; 
4575			;		ld a, 0 
4575			;		cp e 
4575			;		jr z, .scrollup  
4575			;		call scroll_down 
4575			;		jr .scrollnext 
4575			;.scrollup:	call scroll_up 
4575			; 
4575			;		 
4575			;.scrollnext: 
4575			;		pop de 
4575			;		pop bc 
4575			;		djnz .scrolldir 
4575			; 
4575			; 
4575			; 
4575			; 
4575			; 
4575			;		NEXTW 
4575			 
4575			.SCROLLD: 
4575				CWHEAD .ATQ 63 "SCROLLD" 7 WORD_FLAG_CODE 
4575 53				db WORD_SYS_CORE+63             
4576 a3 45			dw .ATQ            
4578 08				db 7 + 1 
4579 .. 00			db "SCROLLD",0              
4581				endm 
# End of macro CWHEAD
4581			; | SCROLLD ( -- ) Scroll down one line - next write will update if required | TO DO 
4581					if DEBUG_FORTH_WORDS_KEY 
4581						DMARK "SCD" 
4581 f5				push af  
4582 3a 96 45			ld a, (.dmark)  
4585 32 a0 fd			ld (debug_mark),a  
4588 3a 97 45			ld a, (.dmark+1)  
458b 32 a1 fd			ld (debug_mark+1),a  
458e 3a 98 45			ld a, (.dmark+2)  
4591 32 a2 fd			ld (debug_mark+2),a  
4594 18 03			jr .pastdmark  
4596 ..			.dmark: db "SCD"  
4599 f1			.pastdmark: pop af  
459a			endm  
# End of macro DMARK
459a						CALLMONITOR 
459a cd aa fd			call debug_vector  
459d				endm  
# End of macro CALLMONITOR
459d					endif 
459d			 
459d cd 90 0d			call scroll_down 
45a0			;	call update_display 
45a0			 
45a0					NEXTW 
45a0 c3 39 24			jp macro_next 
45a3				endm 
# End of macro NEXTW
45a3			 
45a3			 
45a3			.ATQ: 
45a3				CWHEAD .AUTODSP 78 "AT@" 3 WORD_FLAG_CODE 
45a3 62				db WORD_SYS_CORE+78             
45a4 01 46			dw .AUTODSP            
45a6 04				db 3 + 1 
45a7 .. 00			db "AT@",0              
45ab				endm 
# End of macro CWHEAD
45ab			; | AT@ ( u1 u2 -- n ) Push to stack ASCII value at row u2 col u1 | DONE 
45ab					if DEBUG_FORTH_WORDS_KEY 
45ab						DMARK "ATA" 
45ab f5				push af  
45ac 3a c0 45			ld a, (.dmark)  
45af 32 a0 fd			ld (debug_mark),a  
45b2 3a c1 45			ld a, (.dmark+1)  
45b5 32 a1 fd			ld (debug_mark+1),a  
45b8 3a c2 45			ld a, (.dmark+2)  
45bb 32 a2 fd			ld (debug_mark+2),a  
45be 18 03			jr .pastdmark  
45c0 ..			.dmark: db "ATA"  
45c3 f1			.pastdmark: pop af  
45c4			endm  
# End of macro DMARK
45c4						CALLMONITOR 
45c4 cd aa fd			call debug_vector  
45c7				endm  
# End of macro CALLMONITOR
45c7					endif 
45c7			 
45c7			 
45c7					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
45c7 cd 4d 22			call macro_dsp_valuehl 
45ca				endm 
# End of macro FORTH_DSP_VALUEHL
45ca			 
45ca					; TODO save cursor row 
45ca 7d					ld a,l 
45cb fe 02				cp 2 
45cd 20 04				jr nz, .crow3aq 
45cf 3e 28				ld a, display_row_2 
45d1 18 12				jr .ccol1aq 
45d3 fe 03		.crow3aq:		cp 3 
45d5 20 04				jr nz, .crow4aq 
45d7 3e 50				ld a, display_row_3 
45d9 18 0a				jr .ccol1aq 
45db fe 04		.crow4aq:		cp 4 
45dd 20 04				jr nz, .crow1aq 
45df 3e 78				ld a, display_row_4 
45e1 18 02				jr .ccol1aq 
45e3 3e 00		.crow1aq:		ld a,display_row_1 
45e5 f5			.ccol1aq:		push af			; got row offset 
45e6 6f					ld l,a 
45e7 26 00				ld h,0 
45e9					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
45e9 cd 05 23			call macro_forth_dsp_pop 
45ec				endm 
# End of macro FORTH_DSP_POP
45ec					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
45ec cd 4d 22			call macro_dsp_valuehl 
45ef				endm 
# End of macro FORTH_DSP_VALUEHL
45ef					; TODO save cursor col 
45ef f1					pop af 
45f0 85					add l		; add col offset 
45f1			 
45f1					; add current frame buffer address 
45f1 2a 01 fb				ld hl, (display_fb_active) 
45f4 cd de 0f				call addatohl 
45f7			 
45f7			 
45f7			 
45f7			 
45f7					; get char frame buffer location offset in hl 
45f7			 
45f7 7e					ld a,(hl) 
45f8 26 00				ld h, 0 
45fa 6f					ld l, a 
45fb			 
45fb cd 48 20				call forth_push_numhl 
45fe			 
45fe			 
45fe					NEXTW 
45fe c3 39 24			jp macro_next 
4601				endm 
# End of macro NEXTW
4601			 
4601			.AUTODSP: 
4601				CWHEAD .MENU 79 "ADSP" 4 WORD_FLAG_CODE 
4601 63				db WORD_SYS_CORE+79             
4602 17 46			dw .MENU            
4604 05				db 4 + 1 
4605 .. 00			db "ADSP",0              
460a				endm 
# End of macro CWHEAD
460a			; | ADSP ( u1 --  ) Enable/Disable Auto screen updates (SLOW). | DONE 
460a			; | | If off, use DRAW to refresh. Default is on. $0003 will enable direct screen writes (TODO)  
460a			 
460a					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
460a cd 4d 22			call macro_dsp_valuehl 
460d				endm 
# End of macro FORTH_DSP_VALUEHL
460d			 
460d			;		push hl 
460d			 
460d					; destroy value TOS 
460d			 
460d					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
460d cd 05 23			call macro_forth_dsp_pop 
4610				endm 
# End of macro FORTH_DSP_POP
4610			 
4610			;		pop hl 
4610			 
4610 7d					ld a,l 
4611 32 71 f9				ld (cli_autodisplay), a 
4614				       NEXTW 
4614 c3 39 24			jp macro_next 
4617				endm 
# End of macro NEXTW
4617			 
4617			.MENU: 
4617				CWHEAD .ENDDISPLAY 92 "MENU" 4 WORD_FLAG_CODE 
4617 70				db WORD_SYS_CORE+92             
4618 c0 46			dw .ENDDISPLAY            
461a 05				db 4 + 1 
461b .. 00			db "MENU",0              
4620				endm 
# End of macro CWHEAD
4620			; | MENU ( u1....ux n -- n ) Create a menu. n is the number of menu items on stack. Push number selection to TOS | DONE 
4620			 
4620			;		; get number of items on the stack 
4620			; 
4620				 
4620					FORTH_DSP_VALUEHL 
4620 cd 4d 22			call macro_dsp_valuehl 
4623				endm 
# End of macro FORTH_DSP_VALUEHL
4623				 
4623					if DEBUG_FORTH_WORDS_KEY 
4623						DMARK "MNU" 
4623 f5				push af  
4624 3a 38 46			ld a, (.dmark)  
4627 32 a0 fd			ld (debug_mark),a  
462a 3a 39 46			ld a, (.dmark+1)  
462d 32 a1 fd			ld (debug_mark+1),a  
4630 3a 3a 46			ld a, (.dmark+2)  
4633 32 a2 fd			ld (debug_mark+2),a  
4636 18 03			jr .pastdmark  
4638 ..			.dmark: db "MNU"  
463b f1			.pastdmark: pop af  
463c			endm  
# End of macro DMARK
463c						CALLMONITOR 
463c cd aa fd			call debug_vector  
463f				endm  
# End of macro CALLMONITOR
463f					endif 
463f			 
463f 45					ld b, l	 
4640 05					dec b 
4641			 
4641					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4641 cd 05 23			call macro_forth_dsp_pop 
4644				endm 
# End of macro FORTH_DSP_POP
4644			 
4644			 
4644					; go directly through the stack to pluck out the string pointers and build an array 
4644			 
4644			;		FORTH_DSP 
4644			 
4644					; hl contains top most stack item 
4644				 
4644 11 f6 f0				ld de, scratch 
4647			 
4647			.mbuild: 
4647			 
4647					FORTH_DSP_VALUEHL 
4647 cd 4d 22			call macro_dsp_valuehl 
464a				endm 
# End of macro FORTH_DSP_VALUEHL
464a			 
464a					if DEBUG_FORTH_WORDS 
464a						DMARK "MN3" 
464a f5				push af  
464b 3a 5f 46			ld a, (.dmark)  
464e 32 a0 fd			ld (debug_mark),a  
4651 3a 60 46			ld a, (.dmark+1)  
4654 32 a1 fd			ld (debug_mark+1),a  
4657 3a 61 46			ld a, (.dmark+2)  
465a 32 a2 fd			ld (debug_mark+2),a  
465d 18 03			jr .pastdmark  
465f ..			.dmark: db "MN3"  
4662 f1			.pastdmark: pop af  
4663			endm  
# End of macro DMARK
4663						CALLMONITOR 
4663 cd aa fd			call debug_vector  
4666				endm  
# End of macro CALLMONITOR
4666					endif 
4666 eb					ex de, hl 
4667 73					ld (hl), e 
4668 23					inc hl 
4669 72					ld (hl), d 
466a 23					inc hl 
466b eb					ex de, hl 
466c			 
466c					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
466c cd 05 23			call macro_forth_dsp_pop 
466f				endm 
# End of macro FORTH_DSP_POP
466f			 
466f 10 d6				djnz .mbuild 
4671			 
4671					; done add term 
4671			 
4671 eb					ex de, hl 
4672 36 00				ld (hl), 0 
4674 23					inc hl 
4675 36 00				ld (hl), 0 
4677			 
4677				 
4677					 
4677 21 f6 f0				ld hl, scratch 
467a			 
467a					if DEBUG_FORTH_WORDS 
467a						DMARK "MNx" 
467a f5				push af  
467b 3a 8f 46			ld a, (.dmark)  
467e 32 a0 fd			ld (debug_mark),a  
4681 3a 90 46			ld a, (.dmark+1)  
4684 32 a1 fd			ld (debug_mark+1),a  
4687 3a 91 46			ld a, (.dmark+2)  
468a 32 a2 fd			ld (debug_mark+2),a  
468d 18 03			jr .pastdmark  
468f ..			.dmark: db "MNx"  
4692 f1			.pastdmark: pop af  
4693			endm  
# End of macro DMARK
4693						CALLMONITOR 
4693 cd aa fd			call debug_vector  
4696				endm  
# End of macro CALLMONITOR
4696					endif 
4696			 
4696			 
4696			 
4696 3e 00				ld a, 0 
4698 cd db 0d				call menu 
469b			 
469b			 
469b 6f					ld l, a 
469c 26 00				ld h, 0 
469e			 
469e					if DEBUG_FORTH_WORDS 
469e						DMARK "MNr" 
469e f5				push af  
469f 3a b3 46			ld a, (.dmark)  
46a2 32 a0 fd			ld (debug_mark),a  
46a5 3a b4 46			ld a, (.dmark+1)  
46a8 32 a1 fd			ld (debug_mark+1),a  
46ab 3a b5 46			ld a, (.dmark+2)  
46ae 32 a2 fd			ld (debug_mark+2),a  
46b1 18 03			jr .pastdmark  
46b3 ..			.dmark: db "MNr"  
46b6 f1			.pastdmark: pop af  
46b7			endm  
# End of macro DMARK
46b7						CALLMONITOR 
46b7 cd aa fd			call debug_vector  
46ba				endm  
# End of macro CALLMONITOR
46ba					endif 
46ba			 
46ba cd 48 20				call forth_push_numhl 
46bd			 
46bd			 
46bd			 
46bd			 
46bd				       NEXTW 
46bd c3 39 24			jp macro_next 
46c0				endm 
# End of macro NEXTW
46c0			 
46c0			 
46c0			.ENDDISPLAY: 
46c0			 
46c0			; eof 
# End of file forth_words_display.asm
46c0			include "forth_words_str.asm" 
46c0			 
46c0			; | ## String Words 
46c0			 
46c0			.SPLIT:   
46c0			 
46c0				CWHEAD .PTR 52 "SPLIT" 5 WORD_FLAG_CODE 
46c0 48				db WORD_SYS_CORE+52             
46c1 b5 47			dw .PTR            
46c3 06				db 5 + 1 
46c4 .. 00			db "SPLIT",0              
46ca				endm 
# End of macro CWHEAD
46ca			; | SPLIT ( s d -- s s...sn c ) Using delimter d, add strings found in s to stack pushing item count c | DONE 
46ca					if DEBUG_FORTH_WORDS_KEY 
46ca						DMARK "SPT" 
46ca f5				push af  
46cb 3a df 46			ld a, (.dmark)  
46ce 32 a0 fd			ld (debug_mark),a  
46d1 3a e0 46			ld a, (.dmark+1)  
46d4 32 a1 fd			ld (debug_mark+1),a  
46d7 3a e1 46			ld a, (.dmark+2)  
46da 32 a2 fd			ld (debug_mark+2),a  
46dd 18 03			jr .pastdmark  
46df ..			.dmark: db "SPT"  
46e2 f1			.pastdmark: pop af  
46e3			endm  
# End of macro DMARK
46e3						CALLMONITOR 
46e3 cd aa fd			call debug_vector  
46e6				endm  
# End of macro CALLMONITOR
46e6					endif 
46e6			 
46e6					; get delim 
46e6					FORTH_DSP_VALUEHL 
46e6 cd 4d 22			call macro_dsp_valuehl 
46e9				endm 
# End of macro FORTH_DSP_VALUEHL
46e9			 
46e9					FORTH_DSP_POP 
46e9 cd 05 23			call macro_forth_dsp_pop 
46ec				endm 
# End of macro FORTH_DSP_POP
46ec					 
46ec			 
46ec 45					ld b, l    ; move delim to b 
46ed 0e 01				ld c, 1   ; count of poritions 
46ef			 
46ef c5					push bc 
46f0			 
46f0					if DEBUG_FORTH_WORDS 
46f0						DMARK "SPa" 
46f0 f5				push af  
46f1 3a 05 47			ld a, (.dmark)  
46f4 32 a0 fd			ld (debug_mark),a  
46f7 3a 06 47			ld a, (.dmark+1)  
46fa 32 a1 fd			ld (debug_mark+1),a  
46fd 3a 07 47			ld a, (.dmark+2)  
4700 32 a2 fd			ld (debug_mark+2),a  
4703 18 03			jr .pastdmark  
4705 ..			.dmark: db "SPa"  
4708 f1			.pastdmark: pop af  
4709			endm  
# End of macro DMARK
4709						CALLMONITOR 
4709 cd aa fd			call debug_vector  
470c				endm  
# End of macro CALLMONITOR
470c					endif 
470c					; get pointer to string to chop up 
470c					FORTH_DSP_VALUEHL 
470c cd 4d 22			call macro_dsp_valuehl 
470f				endm 
# End of macro FORTH_DSP_VALUEHL
470f			 
470f			;		push hl 
470f 11 f6 f0				ld de, scratch 
4712			.spllop: 
4712 c1					pop bc 
4713 c5					push bc 
4714			;		pop hl 
4714					if DEBUG_FORTH_WORDS 
4714						DMARK "SPl" 
4714 f5				push af  
4715 3a 29 47			ld a, (.dmark)  
4718 32 a0 fd			ld (debug_mark),a  
471b 3a 2a 47			ld a, (.dmark+1)  
471e 32 a1 fd			ld (debug_mark+1),a  
4721 3a 2b 47			ld a, (.dmark+2)  
4724 32 a2 fd			ld (debug_mark+2),a  
4727 18 03			jr .pastdmark  
4729 ..			.dmark: db "SPl"  
472c f1			.pastdmark: pop af  
472d			endm  
# End of macro DMARK
472d						CALLMONITOR 
472d cd aa fd			call debug_vector  
4730				endm  
# End of macro CALLMONITOR
4730					endif 
4730 7e					ld a, (hl) 
4731 b8					cp b 
4732 28 08				jr z, .splnxt 
4734 fe 00				cp 0 
4736 28 34				jr z, .splend 
4738 ed a0				ldi 
473a 18 d6				jr .spllop 
473c			 
473c					; hit dlim 
473c			 
473c			.splnxt: 
473c					if DEBUG_FORTH_WORDS 
473c						DMARK "SPx" 
473c f5				push af  
473d 3a 51 47			ld a, (.dmark)  
4740 32 a0 fd			ld (debug_mark),a  
4743 3a 52 47			ld a, (.dmark+1)  
4746 32 a1 fd			ld (debug_mark+1),a  
4749 3a 53 47			ld a, (.dmark+2)  
474c 32 a2 fd			ld (debug_mark+2),a  
474f 18 03			jr .pastdmark  
4751 ..			.dmark: db "SPx"  
4754 f1			.pastdmark: pop af  
4755			endm  
# End of macro DMARK
4755						CALLMONITOR 
4755 cd aa fd			call debug_vector  
4758				endm  
# End of macro CALLMONITOR
4758					endif 
4758 3e 00				ld a, 0 
475a 12					ld (de), a 
475b					;ex de, hl 
475b e5					push hl 
475c 21 f6 f0				ld hl, scratch 
475f cd b6 20				call forth_push_str 
4762 e1					pop hl 
4763					;ex de, hl 
4763 23					inc hl 
4764 c1					pop bc 
4765 0c					inc c 
4766 c5					push bc 
4767 11 f6 f0				ld de, scratch 
476a 18 a6				jr .spllop 
476c			 
476c			.splend:		 
476c					if DEBUG_FORTH_WORDS 
476c						DMARK "SPe" 
476c f5				push af  
476d 3a 81 47			ld a, (.dmark)  
4770 32 a0 fd			ld (debug_mark),a  
4773 3a 82 47			ld a, (.dmark+1)  
4776 32 a1 fd			ld (debug_mark+1),a  
4779 3a 83 47			ld a, (.dmark+2)  
477c 32 a2 fd			ld (debug_mark+2),a  
477f 18 03			jr .pastdmark  
4781 ..			.dmark: db "SPe"  
4784 f1			.pastdmark: pop af  
4785			endm  
# End of macro DMARK
4785						CALLMONITOR 
4785 cd aa fd			call debug_vector  
4788				endm  
# End of macro CALLMONITOR
4788					endif 
4788 12					ld (de), a 
4789 eb					ex de, hl 
478a			;		push hl 
478a 21 f6 f0				ld hl, scratch 
478d cd b6 20				call forth_push_str 
4790					 
4790					if DEBUG_FORTH_WORDS 
4790						DMARK "SPc" 
4790 f5				push af  
4791 3a a5 47			ld a, (.dmark)  
4794 32 a0 fd			ld (debug_mark),a  
4797 3a a6 47			ld a, (.dmark+1)  
479a 32 a1 fd			ld (debug_mark+1),a  
479d 3a a7 47			ld a, (.dmark+2)  
47a0 32 a2 fd			ld (debug_mark+2),a  
47a3 18 03			jr .pastdmark  
47a5 ..			.dmark: db "SPc"  
47a8 f1			.pastdmark: pop af  
47a9			endm  
# End of macro DMARK
47a9						CALLMONITOR 
47a9 cd aa fd			call debug_vector  
47ac				endm  
# End of macro CALLMONITOR
47ac					endif 
47ac			 
47ac e1					pop hl    ; get counter from bc which has been push 
47ad 26 00				ld h, 0 
47af			;		ld l, c 
47af cd 48 20				call forth_push_numhl 
47b2			 
47b2			 
47b2				NEXTW 
47b2 c3 39 24			jp macro_next 
47b5				endm 
# End of macro NEXTW
47b5			.PTR:   
47b5			 
47b5				CWHEAD .STYPE 52 "PTR" 3 WORD_FLAG_CODE 
47b5 48				db WORD_SYS_CORE+52             
47b6 e2 47			dw .STYPE            
47b8 04				db 3 + 1 
47b9 .. 00			db "PTR",0              
47bd				endm 
# End of macro CWHEAD
47bd			; | PTR ( -- addr ) Low level push pointer to the value on TOS | DONE 
47bd			; | | If a string will give the address of the string without dropping it. Handy for direct string access 
47bd			; | | If a number can then use 2@ and 2! for direct value update without using stack words  
47bd			 
47bd					if DEBUG_FORTH_WORDS_KEY 
47bd						DMARK "PTR" 
47bd f5				push af  
47be 3a d2 47			ld a, (.dmark)  
47c1 32 a0 fd			ld (debug_mark),a  
47c4 3a d3 47			ld a, (.dmark+1)  
47c7 32 a1 fd			ld (debug_mark+1),a  
47ca 3a d4 47			ld a, (.dmark+2)  
47cd 32 a2 fd			ld (debug_mark+2),a  
47d0 18 03			jr .pastdmark  
47d2 ..			.dmark: db "PTR"  
47d5 f1			.pastdmark: pop af  
47d6			endm  
# End of macro DMARK
47d6						CALLMONITOR 
47d6 cd aa fd			call debug_vector  
47d9				endm  
# End of macro CALLMONITOR
47d9					endif 
47d9					FORTH_DSP_VALUEHL 
47d9 cd 4d 22			call macro_dsp_valuehl 
47dc				endm 
# End of macro FORTH_DSP_VALUEHL
47dc cd 48 20				call forth_push_numhl 
47df			 
47df			 
47df					NEXTW 
47df c3 39 24			jp macro_next 
47e2				endm 
# End of macro NEXTW
47e2			.STYPE: 
47e2				CWHEAD .UPPER 52 "STYPE" 5 WORD_FLAG_CODE 
47e2 48				db WORD_SYS_CORE+52             
47e3 31 48			dw .UPPER            
47e5 06				db 5 + 1 
47e6 .. 00			db "STYPE",0              
47ec				endm 
# End of macro CWHEAD
47ec			; | STYPE ( u -- u type ) Push type of value on TOS - 's' string, 'i' integer...   | DONE 
47ec					if DEBUG_FORTH_WORDS_KEY 
47ec						DMARK "STY" 
47ec f5				push af  
47ed 3a 01 48			ld a, (.dmark)  
47f0 32 a0 fd			ld (debug_mark),a  
47f3 3a 02 48			ld a, (.dmark+1)  
47f6 32 a1 fd			ld (debug_mark+1),a  
47f9 3a 03 48			ld a, (.dmark+2)  
47fc 32 a2 fd			ld (debug_mark+2),a  
47ff 18 03			jr .pastdmark  
4801 ..			.dmark: db "STY"  
4804 f1			.pastdmark: pop af  
4805			endm  
# End of macro DMARK
4805						CALLMONITOR 
4805 cd aa fd			call debug_vector  
4808				endm  
# End of macro CALLMONITOR
4808					endif 
4808					FORTH_DSP 
4808 cd 13 22			call macro_forth_dsp 
480b				endm 
# End of macro FORTH_DSP
480b					;v5 FORTH_DSP_VALUE 
480b			 
480b 7e					ld a, (hl) 
480c			 
480c f5					push af 
480d			 
480d			; Dont destroy TOS		FORTH_DSP_POP 
480d			 
480d f1					pop af 
480e			 
480e fe 01				cp DS_TYPE_STR 
4810 28 09				jr z, .typestr 
4812			 
4812 fe 02				cp DS_TYPE_INUM 
4814 28 0a				jr z, .typeinum 
4816			 
4816 21 2f 48				ld hl, .tna 
4819 18 0a				jr .tpush 
481b			 
481b 21 2b 48		.typestr:	ld hl, .tstr 
481e 18 05				jr .tpush 
4820 21 2d 48		.typeinum:	ld hl, .tinum 
4823 18 00				jr .tpush 
4825			 
4825			.tpush: 
4825			 
4825 cd b6 20				call forth_push_str 
4828			 
4828					NEXTW 
4828 c3 39 24			jp macro_next 
482b				endm 
# End of macro NEXTW
482b .. 00		.tstr:	db "s",0 
482d .. 00		.tinum:  db "i",0 
482f .. 00		.tna:   db "?", 0 
4831			 
4831			 
4831			.UPPER: 
4831				CWHEAD .LOWER 52 "UPPER" 5 WORD_FLAG_CODE 
4831 48				db WORD_SYS_CORE+52             
4832 6c 48			dw .LOWER            
4834 06				db 5 + 1 
4835 .. 00			db "UPPER",0              
483b				endm 
# End of macro CWHEAD
483b			; | UPPER ( s -- s ) Upper case string s  | DONE 
483b					if DEBUG_FORTH_WORDS_KEY 
483b						DMARK "UPR" 
483b f5				push af  
483c 3a 50 48			ld a, (.dmark)  
483f 32 a0 fd			ld (debug_mark),a  
4842 3a 51 48			ld a, (.dmark+1)  
4845 32 a1 fd			ld (debug_mark+1),a  
4848 3a 52 48			ld a, (.dmark+2)  
484b 32 a2 fd			ld (debug_mark+2),a  
484e 18 03			jr .pastdmark  
4850 ..			.dmark: db "UPR"  
4853 f1			.pastdmark: pop af  
4854			endm  
# End of macro DMARK
4854						CALLMONITOR 
4854 cd aa fd			call debug_vector  
4857				endm  
# End of macro CALLMONITOR
4857					endif 
4857			 
4857					FORTH_DSP 
4857 cd 13 22			call macro_forth_dsp 
485a				endm 
# End of macro FORTH_DSP
485a					 
485a			; TODO check is string type 
485a			 
485a					FORTH_DSP_VALUEHL 
485a cd 4d 22			call macro_dsp_valuehl 
485d				endm 
# End of macro FORTH_DSP_VALUEHL
485d			; get pointer to string in hl 
485d			 
485d 7e			.toup:		ld a, (hl) 
485e fe 00				cp 0 
4860 28 07				jr z, .toupdone 
4862			 
4862 cd 53 12				call to_upper 
4865			 
4865 77					ld (hl), a 
4866 23					inc hl 
4867 18 f4				jr .toup 
4869			 
4869					 
4869			 
4869			 
4869			; for each char convert to upper 
4869					 
4869			.toupdone: 
4869			 
4869			 
4869					NEXTW 
4869 c3 39 24			jp macro_next 
486c				endm 
# End of macro NEXTW
486c			.LOWER: 
486c				CWHEAD .TCASE 52 "LOWER" 5 WORD_FLAG_CODE 
486c 48				db WORD_SYS_CORE+52             
486d a7 48			dw .TCASE            
486f 06				db 5 + 1 
4870 .. 00			db "LOWER",0              
4876				endm 
# End of macro CWHEAD
4876			; | LOWER ( s -- s ) Lower case string s  | DONE 
4876					if DEBUG_FORTH_WORDS_KEY 
4876						DMARK "LWR" 
4876 f5				push af  
4877 3a 8b 48			ld a, (.dmark)  
487a 32 a0 fd			ld (debug_mark),a  
487d 3a 8c 48			ld a, (.dmark+1)  
4880 32 a1 fd			ld (debug_mark+1),a  
4883 3a 8d 48			ld a, (.dmark+2)  
4886 32 a2 fd			ld (debug_mark+2),a  
4889 18 03			jr .pastdmark  
488b ..			.dmark: db "LWR"  
488e f1			.pastdmark: pop af  
488f			endm  
# End of macro DMARK
488f						CALLMONITOR 
488f cd aa fd			call debug_vector  
4892				endm  
# End of macro CALLMONITOR
4892					endif 
4892			 
4892					FORTH_DSP 
4892 cd 13 22			call macro_forth_dsp 
4895				endm 
# End of macro FORTH_DSP
4895					 
4895			; TODO check is string type 
4895			 
4895					FORTH_DSP_VALUEHL 
4895 cd 4d 22			call macro_dsp_valuehl 
4898				endm 
# End of macro FORTH_DSP_VALUEHL
4898			; get pointer to string in hl 
4898			 
4898 7e			.tolow:		ld a, (hl) 
4899 fe 00				cp 0 
489b 28 07				jr z, .tolowdone 
489d			 
489d cd 5c 12				call to_lower 
48a0			 
48a0 77					ld (hl), a 
48a1 23					inc hl 
48a2 18 f4				jr .tolow 
48a4			 
48a4					 
48a4			 
48a4			 
48a4			; for each char convert to low 
48a4					 
48a4			.tolowdone: 
48a4					NEXTW 
48a4 c3 39 24			jp macro_next 
48a7				endm 
# End of macro NEXTW
48a7			.TCASE: 
48a7				CWHEAD .SUBSTR 52 "TCASE" 5 WORD_FLAG_CODE 
48a7 48				db WORD_SYS_CORE+52             
48a8 dd 49			dw .SUBSTR            
48aa 06				db 5 + 1 
48ab .. 00			db "TCASE",0              
48b1				endm 
# End of macro CWHEAD
48b1			; | TCASE ( s -- s ) Title case string s  | DONE 
48b1					if DEBUG_FORTH_WORDS_KEY 
48b1						DMARK "TCS" 
48b1 f5				push af  
48b2 3a c6 48			ld a, (.dmark)  
48b5 32 a0 fd			ld (debug_mark),a  
48b8 3a c7 48			ld a, (.dmark+1)  
48bb 32 a1 fd			ld (debug_mark+1),a  
48be 3a c8 48			ld a, (.dmark+2)  
48c1 32 a2 fd			ld (debug_mark+2),a  
48c4 18 03			jr .pastdmark  
48c6 ..			.dmark: db "TCS"  
48c9 f1			.pastdmark: pop af  
48ca			endm  
# End of macro DMARK
48ca						CALLMONITOR 
48ca cd aa fd			call debug_vector  
48cd				endm  
# End of macro CALLMONITOR
48cd					endif 
48cd			 
48cd					FORTH_DSP 
48cd cd 13 22			call macro_forth_dsp 
48d0				endm 
# End of macro FORTH_DSP
48d0					 
48d0			; TODO check is string type 
48d0			 
48d0					FORTH_DSP_VALUEHL 
48d0 cd 4d 22			call macro_dsp_valuehl 
48d3				endm 
# End of macro FORTH_DSP_VALUEHL
48d3			; get pointer to string in hl 
48d3			 
48d3					if DEBUG_FORTH_WORDS 
48d3						DMARK "TC1" 
48d3 f5				push af  
48d4 3a e8 48			ld a, (.dmark)  
48d7 32 a0 fd			ld (debug_mark),a  
48da 3a e9 48			ld a, (.dmark+1)  
48dd 32 a1 fd			ld (debug_mark+1),a  
48e0 3a ea 48			ld a, (.dmark+2)  
48e3 32 a2 fd			ld (debug_mark+2),a  
48e6 18 03			jr .pastdmark  
48e8 ..			.dmark: db "TC1"  
48eb f1			.pastdmark: pop af  
48ec			endm  
# End of macro DMARK
48ec						CALLMONITOR 
48ec cd aa fd			call debug_vector  
48ef				endm  
# End of macro CALLMONITOR
48ef					endif 
48ef			 
48ef					; first time in turn to upper case first char 
48ef			 
48ef 7e					ld a, (hl) 
48f0 c3 7a 49				jp .totsiptou 
48f3			 
48f3			 
48f3 7e			.tot:		ld a, (hl) 
48f4 fe 00				cp 0 
48f6 ca be 49				jp z, .totdone 
48f9			 
48f9					if DEBUG_FORTH_WORDS 
48f9						DMARK "TC2" 
48f9 f5				push af  
48fa 3a 0e 49			ld a, (.dmark)  
48fd 32 a0 fd			ld (debug_mark),a  
4900 3a 0f 49			ld a, (.dmark+1)  
4903 32 a1 fd			ld (debug_mark+1),a  
4906 3a 10 49			ld a, (.dmark+2)  
4909 32 a2 fd			ld (debug_mark+2),a  
490c 18 03			jr .pastdmark  
490e ..			.dmark: db "TC2"  
4911 f1			.pastdmark: pop af  
4912			endm  
# End of macro DMARK
4912						CALLMONITOR 
4912 cd aa fd			call debug_vector  
4915				endm  
# End of macro CALLMONITOR
4915					endif 
4915					; check to see if current char is a space 
4915			 
4915 fe 20				cp ' ' 
4917 28 21				jr z, .totsp 
4919 cd 5c 12				call to_lower 
491c					if DEBUG_FORTH_WORDS 
491c						DMARK "TC3" 
491c f5				push af  
491d 3a 31 49			ld a, (.dmark)  
4920 32 a0 fd			ld (debug_mark),a  
4923 3a 32 49			ld a, (.dmark+1)  
4926 32 a1 fd			ld (debug_mark+1),a  
4929 3a 33 49			ld a, (.dmark+2)  
492c 32 a2 fd			ld (debug_mark+2),a  
492f 18 03			jr .pastdmark  
4931 ..			.dmark: db "TC3"  
4934 f1			.pastdmark: pop af  
4935			endm  
# End of macro DMARK
4935						CALLMONITOR 
4935 cd aa fd			call debug_vector  
4938				endm  
# End of macro CALLMONITOR
4938					endif 
4938 18 63				jr .totnxt 
493a			 
493a			.totsp:         ; on a space, find next char which should be upper 
493a			 
493a					if DEBUG_FORTH_WORDS 
493a						DMARK "TC4" 
493a f5				push af  
493b 3a 4f 49			ld a, (.dmark)  
493e 32 a0 fd			ld (debug_mark),a  
4941 3a 50 49			ld a, (.dmark+1)  
4944 32 a1 fd			ld (debug_mark+1),a  
4947 3a 51 49			ld a, (.dmark+2)  
494a 32 a2 fd			ld (debug_mark+2),a  
494d 18 03			jr .pastdmark  
494f ..			.dmark: db "TC4"  
4952 f1			.pastdmark: pop af  
4953			endm  
# End of macro DMARK
4953						CALLMONITOR 
4953 cd aa fd			call debug_vector  
4956				endm  
# End of macro CALLMONITOR
4956					endif 
4956					;; 
4956			 
4956 fe 20				cp ' ' 
4958 20 20				jr nz, .totsiptou 
495a 23					inc hl 
495b 7e					ld a, (hl) 
495c					if DEBUG_FORTH_WORDS 
495c						DMARK "TC5" 
495c f5				push af  
495d 3a 71 49			ld a, (.dmark)  
4960 32 a0 fd			ld (debug_mark),a  
4963 3a 72 49			ld a, (.dmark+1)  
4966 32 a1 fd			ld (debug_mark+1),a  
4969 3a 73 49			ld a, (.dmark+2)  
496c 32 a2 fd			ld (debug_mark+2),a  
496f 18 03			jr .pastdmark  
4971 ..			.dmark: db "TC5"  
4974 f1			.pastdmark: pop af  
4975			endm  
# End of macro DMARK
4975						CALLMONITOR 
4975 cd aa fd			call debug_vector  
4978				endm  
# End of macro CALLMONITOR
4978					endif 
4978 18 c0				jr .totsp 
497a fe 00		.totsiptou:    cp 0 
497c 28 40				jr z, .totdone 
497e					; not space and not zero term so upper case it 
497e cd 53 12				call to_upper 
4981			 
4981					if DEBUG_FORTH_WORDS 
4981						DMARK "TC6" 
4981 f5				push af  
4982 3a 96 49			ld a, (.dmark)  
4985 32 a0 fd			ld (debug_mark),a  
4988 3a 97 49			ld a, (.dmark+1)  
498b 32 a1 fd			ld (debug_mark+1),a  
498e 3a 98 49			ld a, (.dmark+2)  
4991 32 a2 fd			ld (debug_mark+2),a  
4994 18 03			jr .pastdmark  
4996 ..			.dmark: db "TC6"  
4999 f1			.pastdmark: pop af  
499a			endm  
# End of macro DMARK
499a						CALLMONITOR 
499a cd aa fd			call debug_vector  
499d				endm  
# End of macro CALLMONITOR
499d					endif 
499d			 
499d			 
499d			.totnxt: 
499d			 
499d 77					ld (hl), a 
499e 23					inc hl 
499f					if DEBUG_FORTH_WORDS 
499f						DMARK "TC7" 
499f f5				push af  
49a0 3a b4 49			ld a, (.dmark)  
49a3 32 a0 fd			ld (debug_mark),a  
49a6 3a b5 49			ld a, (.dmark+1)  
49a9 32 a1 fd			ld (debug_mark+1),a  
49ac 3a b6 49			ld a, (.dmark+2)  
49af 32 a2 fd			ld (debug_mark+2),a  
49b2 18 03			jr .pastdmark  
49b4 ..			.dmark: db "TC7"  
49b7 f1			.pastdmark: pop af  
49b8			endm  
# End of macro DMARK
49b8						CALLMONITOR 
49b8 cd aa fd			call debug_vector  
49bb				endm  
# End of macro CALLMONITOR
49bb					endif 
49bb c3 f3 48				jp .tot 
49be			 
49be					 
49be			 
49be			 
49be			; for each char convert to low 
49be					 
49be			.totdone: 
49be					if DEBUG_FORTH_WORDS 
49be						DMARK "TCd" 
49be f5				push af  
49bf 3a d3 49			ld a, (.dmark)  
49c2 32 a0 fd			ld (debug_mark),a  
49c5 3a d4 49			ld a, (.dmark+1)  
49c8 32 a1 fd			ld (debug_mark+1),a  
49cb 3a d5 49			ld a, (.dmark+2)  
49ce 32 a2 fd			ld (debug_mark+2),a  
49d1 18 03			jr .pastdmark  
49d3 ..			.dmark: db "TCd"  
49d6 f1			.pastdmark: pop af  
49d7			endm  
# End of macro DMARK
49d7						CALLMONITOR 
49d7 cd aa fd			call debug_vector  
49da				endm  
# End of macro CALLMONITOR
49da					endif 
49da					NEXTW 
49da c3 39 24			jp macro_next 
49dd				endm 
# End of macro NEXTW
49dd			 
49dd			.SUBSTR: 
49dd				CWHEAD .LEFT 52 "SUBSTR" 6 WORD_FLAG_CODE 
49dd 48				db WORD_SYS_CORE+52             
49de 3b 4a			dw .LEFT            
49e0 07				db 6 + 1 
49e1 .. 00			db "SUBSTR",0              
49e8				endm 
# End of macro CWHEAD
49e8			; | SUBSTR ( s u1 u2 -- s sb ) Push to TOS chars starting at position u1 and with length u2 from string s  | DONE 
49e8			 
49e8					if DEBUG_FORTH_WORDS_KEY 
49e8						DMARK "SST" 
49e8 f5				push af  
49e9 3a fd 49			ld a, (.dmark)  
49ec 32 a0 fd			ld (debug_mark),a  
49ef 3a fe 49			ld a, (.dmark+1)  
49f2 32 a1 fd			ld (debug_mark+1),a  
49f5 3a ff 49			ld a, (.dmark+2)  
49f8 32 a2 fd			ld (debug_mark+2),a  
49fb 18 03			jr .pastdmark  
49fd ..			.dmark: db "SST"  
4a00 f1			.pastdmark: pop af  
4a01			endm  
# End of macro DMARK
4a01						CALLMONITOR 
4a01 cd aa fd			call debug_vector  
4a04				endm  
# End of macro CALLMONITOR
4a04					endif 
4a04			; TODO check string type 
4a04					FORTH_DSP_VALUEHL 
4a04 cd 4d 22			call macro_dsp_valuehl 
4a07				endm 
# End of macro FORTH_DSP_VALUEHL
4a07			 
4a07 e5					push hl      ; string length 
4a08			 
4a08					FORTH_DSP_POP 
4a08 cd 05 23			call macro_forth_dsp_pop 
4a0b				endm 
# End of macro FORTH_DSP_POP
4a0b			 
4a0b					FORTH_DSP_VALUEHL 
4a0b cd 4d 22			call macro_dsp_valuehl 
4a0e				endm 
# End of macro FORTH_DSP_VALUEHL
4a0e			 
4a0e e5					push hl     ; start char 
4a0f			 
4a0f					FORTH_DSP_POP 
4a0f cd 05 23			call macro_forth_dsp_pop 
4a12				endm 
# End of macro FORTH_DSP_POP
4a12			 
4a12			 
4a12					FORTH_DSP_VALUE 
4a12 cd 36 22			call macro_forth_dsp_value 
4a15				endm 
# End of macro FORTH_DSP_VALUE
4a15			 
4a15 d1					pop de    ; get start post offset 
4a16			 
4a16 19					add hl, de    ; starting offset 
4a17			 
4a17 c1					pop bc 
4a18 c5					push bc      ; grab size of string 
4a19			 
4a19 e5					push hl    ; save string start  
4a1a			 
4a1a 26 00				ld h, 0 
4a1c 69					ld l, c 
4a1d 23					inc hl 
4a1e 23					inc hl 
4a1f			 
4a1f cd b9 13				call malloc 
4a22				if DEBUG_FORTH_MALLOC_GUARD 
4a22 cc 1d 60				call z,malloc_error 
4a25				endif 
4a25			 
4a25 eb					ex de, hl      ; save malloc area for string copy 
4a26 e1					pop hl    ; get back source 
4a27 c1					pop bc    ; get length of string back 
4a28			 
4a28 d5					push de    ; save malloc area for after we push 
4a29 ed b0				ldir     ; copy substr 
4a2b			 
4a2b			 
4a2b eb					ex de, hl 
4a2c 3e 00				ld a, 0 
4a2e 77					ld (hl), a   ; term substr 
4a2f			 
4a2f					 
4a2f e1					pop hl    ; get malloc so we can push it 
4a30 e5					push hl   ; save so we can free it afterwards 
4a31			 
4a31 cd b6 20				call forth_push_str 
4a34			 
4a34 e1					pop hl 
4a35 cd 83 14				call free 
4a38			 
4a38					 
4a38					 
4a38			 
4a38			 
4a38					NEXTW 
4a38 c3 39 24			jp macro_next 
4a3b				endm 
# End of macro NEXTW
4a3b			 
4a3b			.LEFT: 
4a3b				CWHEAD .RIGHT 52 "LEFT" 4 WORD_FLAG_CODE 
4a3b 48				db WORD_SYS_CORE+52             
4a3c 63 4a			dw .RIGHT            
4a3e 05				db 4 + 1 
4a3f .. 00			db "LEFT",0              
4a44				endm 
# End of macro CWHEAD
4a44			; | LEFT ( s u -- s sub ) Push to TOS string u long starting from left of s  | TODO 
4a44					if DEBUG_FORTH_WORDS_KEY 
4a44						DMARK "LEF" 
4a44 f5				push af  
4a45 3a 59 4a			ld a, (.dmark)  
4a48 32 a0 fd			ld (debug_mark),a  
4a4b 3a 5a 4a			ld a, (.dmark+1)  
4a4e 32 a1 fd			ld (debug_mark+1),a  
4a51 3a 5b 4a			ld a, (.dmark+2)  
4a54 32 a2 fd			ld (debug_mark+2),a  
4a57 18 03			jr .pastdmark  
4a59 ..			.dmark: db "LEF"  
4a5c f1			.pastdmark: pop af  
4a5d			endm  
# End of macro DMARK
4a5d						CALLMONITOR 
4a5d cd aa fd			call debug_vector  
4a60				endm  
# End of macro CALLMONITOR
4a60					endif 
4a60			 
4a60					NEXTW 
4a60 c3 39 24			jp macro_next 
4a63				endm 
# End of macro NEXTW
4a63			.RIGHT: 
4a63				CWHEAD .STR2NUM 52 "RIGHT" 5 WORD_FLAG_CODE 
4a63 48				db WORD_SYS_CORE+52             
4a64 8c 4a			dw .STR2NUM            
4a66 06				db 5 + 1 
4a67 .. 00			db "RIGHT",0              
4a6d				endm 
# End of macro CWHEAD
4a6d			; | RIGHT ( s u -- s sub ) Push to TOS string u long starting from right of s  | TODO 
4a6d					if DEBUG_FORTH_WORDS_KEY 
4a6d						DMARK "RIG" 
4a6d f5				push af  
4a6e 3a 82 4a			ld a, (.dmark)  
4a71 32 a0 fd			ld (debug_mark),a  
4a74 3a 83 4a			ld a, (.dmark+1)  
4a77 32 a1 fd			ld (debug_mark+1),a  
4a7a 3a 84 4a			ld a, (.dmark+2)  
4a7d 32 a2 fd			ld (debug_mark+2),a  
4a80 18 03			jr .pastdmark  
4a82 ..			.dmark: db "RIG"  
4a85 f1			.pastdmark: pop af  
4a86			endm  
# End of macro DMARK
4a86						CALLMONITOR 
4a86 cd aa fd			call debug_vector  
4a89				endm  
# End of macro CALLMONITOR
4a89					endif 
4a89			 
4a89					NEXTW 
4a89 c3 39 24			jp macro_next 
4a8c				endm 
# End of macro NEXTW
4a8c			 
4a8c			 
4a8c			.STR2NUM: 
4a8c				CWHEAD .NUM2STR 52 "STR2NUM" 7 WORD_FLAG_CODE 
4a8c 48				db WORD_SYS_CORE+52             
4a8d 18 4b			dw .NUM2STR            
4a8f 08				db 7 + 1 
4a90 .. 00			db "STR2NUM",0              
4a98				endm 
# End of macro CWHEAD
4a98			; | STR2NUM ( s -- n ) Convert a string on TOS to number | DONE 
4a98			 
4a98			 
4a98			; TODO STR type check to do 
4a98					if DEBUG_FORTH_WORDS_KEY 
4a98						DMARK "S2N" 
4a98 f5				push af  
4a99 3a ad 4a			ld a, (.dmark)  
4a9c 32 a0 fd			ld (debug_mark),a  
4a9f 3a ae 4a			ld a, (.dmark+1)  
4aa2 32 a1 fd			ld (debug_mark+1),a  
4aa5 3a af 4a			ld a, (.dmark+2)  
4aa8 32 a2 fd			ld (debug_mark+2),a  
4aab 18 03			jr .pastdmark  
4aad ..			.dmark: db "S2N"  
4ab0 f1			.pastdmark: pop af  
4ab1			endm  
# End of macro DMARK
4ab1						CALLMONITOR 
4ab1 cd aa fd			call debug_vector  
4ab4				endm  
# End of macro CALLMONITOR
4ab4					endif 
4ab4			 
4ab4					;FORTH_DSP 
4ab4					FORTH_DSP_VALUE 
4ab4 cd 36 22			call macro_forth_dsp_value 
4ab7				endm 
# End of macro FORTH_DSP_VALUE
4ab7					;inc hl 
4ab7			 
4ab7 eb					ex de, hl 
4ab8					if DEBUG_FORTH_WORDS 
4ab8						DMARK "S2a" 
4ab8 f5				push af  
4ab9 3a cd 4a			ld a, (.dmark)  
4abc 32 a0 fd			ld (debug_mark),a  
4abf 3a ce 4a			ld a, (.dmark+1)  
4ac2 32 a1 fd			ld (debug_mark+1),a  
4ac5 3a cf 4a			ld a, (.dmark+2)  
4ac8 32 a2 fd			ld (debug_mark+2),a  
4acb 18 03			jr .pastdmark  
4acd ..			.dmark: db "S2a"  
4ad0 f1			.pastdmark: pop af  
4ad1			endm  
# End of macro DMARK
4ad1						CALLMONITOR 
4ad1 cd aa fd			call debug_vector  
4ad4				endm  
# End of macro CALLMONITOR
4ad4					endif 
4ad4 cd db 12				call string_to_uint16 
4ad7			 
4ad7					if DEBUG_FORTH_WORDS 
4ad7						DMARK "S2b" 
4ad7 f5				push af  
4ad8 3a ec 4a			ld a, (.dmark)  
4adb 32 a0 fd			ld (debug_mark),a  
4ade 3a ed 4a			ld a, (.dmark+1)  
4ae1 32 a1 fd			ld (debug_mark+1),a  
4ae4 3a ee 4a			ld a, (.dmark+2)  
4ae7 32 a2 fd			ld (debug_mark+2),a  
4aea 18 03			jr .pastdmark  
4aec ..			.dmark: db "S2b"  
4aef f1			.pastdmark: pop af  
4af0			endm  
# End of macro DMARK
4af0						CALLMONITOR 
4af0 cd aa fd			call debug_vector  
4af3				endm  
# End of macro CALLMONITOR
4af3					endif 
4af3			;		push hl 
4af3					FORTH_DSP_POP 
4af3 cd 05 23			call macro_forth_dsp_pop 
4af6				endm 
# End of macro FORTH_DSP_POP
4af6			;		pop hl 
4af6					 
4af6					if DEBUG_FORTH_WORDS 
4af6						DMARK "S2b" 
4af6 f5				push af  
4af7 3a 0b 4b			ld a, (.dmark)  
4afa 32 a0 fd			ld (debug_mark),a  
4afd 3a 0c 4b			ld a, (.dmark+1)  
4b00 32 a1 fd			ld (debug_mark+1),a  
4b03 3a 0d 4b			ld a, (.dmark+2)  
4b06 32 a2 fd			ld (debug_mark+2),a  
4b09 18 03			jr .pastdmark  
4b0b ..			.dmark: db "S2b"  
4b0e f1			.pastdmark: pop af  
4b0f			endm  
# End of macro DMARK
4b0f						CALLMONITOR 
4b0f cd aa fd			call debug_vector  
4b12				endm  
# End of macro CALLMONITOR
4b12					endif 
4b12 cd 48 20				call forth_push_numhl	 
4b15			 
4b15				 
4b15				       NEXTW 
4b15 c3 39 24			jp macro_next 
4b18				endm 
# End of macro NEXTW
4b18			.NUM2STR: 
4b18				CWHEAD .CONCAT 52 "NUM2STR" 7 WORD_FLAG_CODE 
4b18 48				db WORD_SYS_CORE+52             
4b19 aa 4b			dw .CONCAT            
4b1b 08				db 7 + 1 
4b1c .. 00			db "NUM2STR",0              
4b24				endm 
# End of macro CWHEAD
4b24			; | NUM2STR ( n -- s ) Convert a number on TOS to zero padded string | DONE 
4b24			 
4b24			;		; malloc a string to target 
4b24			;		ld hl, 10     ; TODO max string size should be fine 
4b24			;		call malloc 
4b24			;		push hl    ; save malloc location 
4b24			; 
4b24			; 
4b24			;; TODO check int type 
4b24					if DEBUG_FORTH_WORDS_KEY 
4b24						DMARK "N2S" 
4b24 f5				push af  
4b25 3a 39 4b			ld a, (.dmark)  
4b28 32 a0 fd			ld (debug_mark),a  
4b2b 3a 3a 4b			ld a, (.dmark+1)  
4b2e 32 a1 fd			ld (debug_mark+1),a  
4b31 3a 3b 4b			ld a, (.dmark+2)  
4b34 32 a2 fd			ld (debug_mark+2),a  
4b37 18 03			jr .pastdmark  
4b39 ..			.dmark: db "N2S"  
4b3c f1			.pastdmark: pop af  
4b3d			endm  
# End of macro DMARK
4b3d						CALLMONITOR 
4b3d cd aa fd			call debug_vector  
4b40				endm  
# End of macro CALLMONITOR
4b40					endif 
4b40			 
4b40					FORTH_DSP_VALUEHL 
4b40 cd 4d 22			call macro_dsp_valuehl 
4b43				endm 
# End of macro FORTH_DSP_VALUEHL
4b43			 
4b43					if DEBUG_FORTH_WORDS 
4b43						DMARK "NS1" 
4b43 f5				push af  
4b44 3a 58 4b			ld a, (.dmark)  
4b47 32 a0 fd			ld (debug_mark),a  
4b4a 3a 59 4b			ld a, (.dmark+1)  
4b4d 32 a1 fd			ld (debug_mark+1),a  
4b50 3a 5a 4b			ld a, (.dmark+2)  
4b53 32 a2 fd			ld (debug_mark+2),a  
4b56 18 03			jr .pastdmark  
4b58 ..			.dmark: db "NS1"  
4b5b f1			.pastdmark: pop af  
4b5c			endm  
# End of macro DMARK
4b5c						CALLMONITOR 
4b5c cd aa fd			call debug_vector  
4b5f				endm  
# End of macro CALLMONITOR
4b5f					endif 
4b5f					FORTH_DSP_POP 
4b5f cd 05 23			call macro_forth_dsp_pop 
4b62				endm 
# End of macro FORTH_DSP_POP
4b62			 
4b62 eb					ex de, hl 
4b63 21 f6 f0				ld hl, scratch 
4b66					if DEBUG_FORTH_WORDS 
4b66						DMARK "NS2" 
4b66 f5				push af  
4b67 3a 7b 4b			ld a, (.dmark)  
4b6a 32 a0 fd			ld (debug_mark),a  
4b6d 3a 7c 4b			ld a, (.dmark+1)  
4b70 32 a1 fd			ld (debug_mark+1),a  
4b73 3a 7d 4b			ld a, (.dmark+2)  
4b76 32 a2 fd			ld (debug_mark+2),a  
4b79 18 03			jr .pastdmark  
4b7b ..			.dmark: db "NS2"  
4b7e f1			.pastdmark: pop af  
4b7f			endm  
# End of macro DMARK
4b7f						CALLMONITOR 
4b7f cd aa fd			call debug_vector  
4b82				endm  
# End of macro CALLMONITOR
4b82					endif 
4b82 cd f3 12				call uitoa_16 
4b85 21 f6 f0				ld hl, scratch 
4b88					if DEBUG_FORTH_WORDS 
4b88						DMARK "NS3" 
4b88 f5				push af  
4b89 3a 9d 4b			ld a, (.dmark)  
4b8c 32 a0 fd			ld (debug_mark),a  
4b8f 3a 9e 4b			ld a, (.dmark+1)  
4b92 32 a1 fd			ld (debug_mark+1),a  
4b95 3a 9f 4b			ld a, (.dmark+2)  
4b98 32 a2 fd			ld (debug_mark+2),a  
4b9b 18 03			jr .pastdmark  
4b9d ..			.dmark: db "NS3"  
4ba0 f1			.pastdmark: pop af  
4ba1			endm  
# End of macro DMARK
4ba1						CALLMONITOR 
4ba1 cd aa fd			call debug_vector  
4ba4				endm  
# End of macro CALLMONITOR
4ba4					endif 
4ba4 cd b6 20				call forth_push_str 
4ba7			;		ld a, l 
4ba7			;		call DispAToASCII   
4ba7			;;TODO need to chage above call to dump into string 
4ba7			; 
4ba7			; 
4ba7			 
4ba7				       NEXTW 
4ba7 c3 39 24			jp macro_next 
4baa				endm 
# End of macro NEXTW
4baa			 
4baa			.CONCAT: 
4baa				CWHEAD .FIND 52 "CONCAT" 6 WORD_FLAG_CODE 
4baa 48				db WORD_SYS_CORE+52             
4bab 5d 4c			dw .FIND            
4bad 07				db 6 + 1 
4bae .. 00			db "CONCAT",0              
4bb5				endm 
# End of macro CWHEAD
4bb5			; | CONCAT ( s1 s2 -- s3 ) A s1 + s2 is pushed onto the stack | DONE 
4bb5			 
4bb5			; TODO check string type 
4bb5			; TODO create macro to get pointer for next item on stack. Handy for lots of things 
4bb5			 
4bb5					if DEBUG_FORTH_WORDS_KEY 
4bb5						DMARK "CON" 
4bb5 f5				push af  
4bb6 3a ca 4b			ld a, (.dmark)  
4bb9 32 a0 fd			ld (debug_mark),a  
4bbc 3a cb 4b			ld a, (.dmark+1)  
4bbf 32 a1 fd			ld (debug_mark+1),a  
4bc2 3a cc 4b			ld a, (.dmark+2)  
4bc5 32 a2 fd			ld (debug_mark+2),a  
4bc8 18 03			jr .pastdmark  
4bca ..			.dmark: db "CON"  
4bcd f1			.pastdmark: pop af  
4bce			endm  
# End of macro DMARK
4bce						CALLMONITOR 
4bce cd aa fd			call debug_vector  
4bd1				endm  
# End of macro CALLMONITOR
4bd1					endif 
4bd1			 
4bd1			 
4bd1					FORTH_DSP_VALUE 
4bd1 cd 36 22			call macro_forth_dsp_value 
4bd4				endm 
# End of macro FORTH_DSP_VALUE
4bd4 e5					push hl   ; s2 
4bd5			 
4bd5					FORTH_DSP_POP 
4bd5 cd 05 23			call macro_forth_dsp_pop 
4bd8				endm 
# End of macro FORTH_DSP_POP
4bd8			 
4bd8					FORTH_DSP_VALUE 
4bd8 cd 36 22			call macro_forth_dsp_value 
4bdb				endm 
# End of macro FORTH_DSP_VALUE
4bdb			 
4bdb e5					push hl   ; s1 
4bdc			 
4bdc					FORTH_DSP_POP 
4bdc cd 05 23			call macro_forth_dsp_pop 
4bdf				endm 
# End of macro FORTH_DSP_POP
4bdf					 
4bdf			 
4bdf					; copy s1 
4bdf			 
4bdf				 
4bdf					; save ptr 
4bdf e1					pop hl  
4be0 e5					push hl 
4be1 3e 00				ld a, 0 
4be3 cd 4f 13				call strlent 
4be6					;inc hl    ; zer0 
4be6 06 00				ld b, 0 
4be8 4d					ld c, l 
4be9 e1					pop hl		 
4bea 11 f6 f0				ld de, scratch	 
4bed					if DEBUG_FORTH_WORDS 
4bed						DMARK "CO1" 
4bed f5				push af  
4bee 3a 02 4c			ld a, (.dmark)  
4bf1 32 a0 fd			ld (debug_mark),a  
4bf4 3a 03 4c			ld a, (.dmark+1)  
4bf7 32 a1 fd			ld (debug_mark+1),a  
4bfa 3a 04 4c			ld a, (.dmark+2)  
4bfd 32 a2 fd			ld (debug_mark+2),a  
4c00 18 03			jr .pastdmark  
4c02 ..			.dmark: db "CO1"  
4c05 f1			.pastdmark: pop af  
4c06			endm  
# End of macro DMARK
4c06						CALLMONITOR 
4c06 cd aa fd			call debug_vector  
4c09				endm  
# End of macro CALLMONITOR
4c09					endif 
4c09 ed b0				ldir 
4c0b			 
4c0b e1					pop hl 
4c0c e5					push hl 
4c0d d5					push de 
4c0e			 
4c0e			 
4c0e 3e 00				ld a, 0 
4c10 cd 4f 13				call strlent 
4c13 23					inc hl    ; zer0 
4c14 23					inc hl 
4c15 06 00				ld b, 0 
4c17 4d					ld c, l 
4c18 d1					pop de 
4c19 e1					pop hl		 
4c1a					if DEBUG_FORTH_WORDS 
4c1a						DMARK "CO2" 
4c1a f5				push af  
4c1b 3a 2f 4c			ld a, (.dmark)  
4c1e 32 a0 fd			ld (debug_mark),a  
4c21 3a 30 4c			ld a, (.dmark+1)  
4c24 32 a1 fd			ld (debug_mark+1),a  
4c27 3a 31 4c			ld a, (.dmark+2)  
4c2a 32 a2 fd			ld (debug_mark+2),a  
4c2d 18 03			jr .pastdmark  
4c2f ..			.dmark: db "CO2"  
4c32 f1			.pastdmark: pop af  
4c33			endm  
# End of macro DMARK
4c33						CALLMONITOR 
4c33 cd aa fd			call debug_vector  
4c36				endm  
# End of macro CALLMONITOR
4c36					endif 
4c36 ed b0				ldir 
4c38			 
4c38			 
4c38			 
4c38 21 f6 f0				ld hl, scratch 
4c3b					if DEBUG_FORTH_WORDS 
4c3b						DMARK "CO5" 
4c3b f5				push af  
4c3c 3a 50 4c			ld a, (.dmark)  
4c3f 32 a0 fd			ld (debug_mark),a  
4c42 3a 51 4c			ld a, (.dmark+1)  
4c45 32 a1 fd			ld (debug_mark+1),a  
4c48 3a 52 4c			ld a, (.dmark+2)  
4c4b 32 a2 fd			ld (debug_mark+2),a  
4c4e 18 03			jr .pastdmark  
4c50 ..			.dmark: db "CO5"  
4c53 f1			.pastdmark: pop af  
4c54			endm  
# End of macro DMARK
4c54						CALLMONITOR 
4c54 cd aa fd			call debug_vector  
4c57				endm  
# End of macro CALLMONITOR
4c57					endif 
4c57			 
4c57 cd b6 20				call forth_push_str 
4c5a			 
4c5a			 
4c5a			 
4c5a			 
4c5a				       NEXTW 
4c5a c3 39 24			jp macro_next 
4c5d				endm 
# End of macro NEXTW
4c5d			 
4c5d			 
4c5d			.FIND: 
4c5d				CWHEAD .LEN 55 "FIND" 4 WORD_FLAG_CODE 
4c5d 4b				db WORD_SYS_CORE+55             
4c5e 1b 4d			dw .LEN            
4c60 05				db 4 + 1 
4c61 .. 00			db "FIND",0              
4c66				endm 
# End of macro CWHEAD
4c66			; | FIND ( s c -- s u ) Search the string s for the char c and push the position of the first occurance to TOS | DONE 
4c66			 
4c66					if DEBUG_FORTH_WORDS_KEY 
4c66						DMARK "FND" 
4c66 f5				push af  
4c67 3a 7b 4c			ld a, (.dmark)  
4c6a 32 a0 fd			ld (debug_mark),a  
4c6d 3a 7c 4c			ld a, (.dmark+1)  
4c70 32 a1 fd			ld (debug_mark+1),a  
4c73 3a 7d 4c			ld a, (.dmark+2)  
4c76 32 a2 fd			ld (debug_mark+2),a  
4c79 18 03			jr .pastdmark  
4c7b ..			.dmark: db "FND"  
4c7e f1			.pastdmark: pop af  
4c7f			endm  
# End of macro DMARK
4c7f						CALLMONITOR 
4c7f cd aa fd			call debug_vector  
4c82				endm  
# End of macro CALLMONITOR
4c82					endif 
4c82			 
4c82			; TODO check string type 
4c82					FORTH_DSP_VALUE 
4c82 cd 36 22			call macro_forth_dsp_value 
4c85				endm 
# End of macro FORTH_DSP_VALUE
4c85			 
4c85 e5					push hl    
4c86 7e					ld a,(hl)    ; char to find   
4c87			; TODO change char to substr 
4c87			 
4c87 f5					push af 
4c88					 
4c88			 
4c88			 
4c88					if DEBUG_FORTH_WORDS 
4c88						DMARK "FN1" 
4c88 f5				push af  
4c89 3a 9d 4c			ld a, (.dmark)  
4c8c 32 a0 fd			ld (debug_mark),a  
4c8f 3a 9e 4c			ld a, (.dmark+1)  
4c92 32 a1 fd			ld (debug_mark+1),a  
4c95 3a 9f 4c			ld a, (.dmark+2)  
4c98 32 a2 fd			ld (debug_mark+2),a  
4c9b 18 03			jr .pastdmark  
4c9d ..			.dmark: db "FN1"  
4ca0 f1			.pastdmark: pop af  
4ca1			endm  
# End of macro DMARK
4ca1						CALLMONITOR 
4ca1 cd aa fd			call debug_vector  
4ca4				endm  
# End of macro CALLMONITOR
4ca4					endif 
4ca4			 
4ca4					FORTH_DSP_POP 
4ca4 cd 05 23			call macro_forth_dsp_pop 
4ca7				endm 
# End of macro FORTH_DSP_POP
4ca7			 
4ca7					; string to search 
4ca7			 
4ca7					FORTH_DSP_VALUE 
4ca7 cd 36 22			call macro_forth_dsp_value 
4caa				endm 
# End of macro FORTH_DSP_VALUE
4caa			 
4caa d1					pop de  ; d is char to find  
4cab			 
4cab					if DEBUG_FORTH_WORDS 
4cab						DMARK "FN2" 
4cab f5				push af  
4cac 3a c0 4c			ld a, (.dmark)  
4caf 32 a0 fd			ld (debug_mark),a  
4cb2 3a c1 4c			ld a, (.dmark+1)  
4cb5 32 a1 fd			ld (debug_mark+1),a  
4cb8 3a c2 4c			ld a, (.dmark+2)  
4cbb 32 a2 fd			ld (debug_mark+2),a  
4cbe 18 03			jr .pastdmark  
4cc0 ..			.dmark: db "FN2"  
4cc3 f1			.pastdmark: pop af  
4cc4			endm  
# End of macro DMARK
4cc4						CALLMONITOR 
4cc4 cd aa fd			call debug_vector  
4cc7				endm  
# End of macro CALLMONITOR
4cc7					endif 
4cc7					 
4cc7 01 00 00				ld bc, 0 
4cca 7e			.findchar:      ld a,(hl) 
4ccb fe 00				cp 0   		 
4ccd 28 27				jr z, .finddone     
4ccf ba					cp d 
4cd0 28 20				jr z, .foundchar 
4cd2 03					inc bc 
4cd3 23					inc hl 
4cd4					if DEBUG_FORTH_WORDS 
4cd4						DMARK "FN3" 
4cd4 f5				push af  
4cd5 3a e9 4c			ld a, (.dmark)  
4cd8 32 a0 fd			ld (debug_mark),a  
4cdb 3a ea 4c			ld a, (.dmark+1)  
4cde 32 a1 fd			ld (debug_mark+1),a  
4ce1 3a eb 4c			ld a, (.dmark+2)  
4ce4 32 a2 fd			ld (debug_mark+2),a  
4ce7 18 03			jr .pastdmark  
4ce9 ..			.dmark: db "FN3"  
4cec f1			.pastdmark: pop af  
4ced			endm  
# End of macro DMARK
4ced						CALLMONITOR 
4ced cd aa fd			call debug_vector  
4cf0				endm  
# End of macro CALLMONITOR
4cf0					endif 
4cf0 18 d8				jr .findchar 
4cf2			 
4cf2			 
4cf2 c5			.foundchar:	push bc 
4cf3 e1					pop hl 
4cf4 18 03				jr .findexit 
4cf6			 
4cf6			 
4cf6							 
4cf6			 
4cf6			.finddone:     ; got to end of string with no find 
4cf6 21 00 00				ld hl, 0 
4cf9			.findexit: 
4cf9			 
4cf9					if DEBUG_FORTH_WORDS 
4cf9						DMARK "FNd" 
4cf9 f5				push af  
4cfa 3a 0e 4d			ld a, (.dmark)  
4cfd 32 a0 fd			ld (debug_mark),a  
4d00 3a 0f 4d			ld a, (.dmark+1)  
4d03 32 a1 fd			ld (debug_mark+1),a  
4d06 3a 10 4d			ld a, (.dmark+2)  
4d09 32 a2 fd			ld (debug_mark+2),a  
4d0c 18 03			jr .pastdmark  
4d0e ..			.dmark: db "FNd"  
4d11 f1			.pastdmark: pop af  
4d12			endm  
# End of macro DMARK
4d12						CALLMONITOR 
4d12 cd aa fd			call debug_vector  
4d15				endm  
# End of macro CALLMONITOR
4d15					endif 
4d15 cd 48 20			call forth_push_numhl 
4d18			 
4d18				       NEXTW 
4d18 c3 39 24			jp macro_next 
4d1b				endm 
# End of macro NEXTW
4d1b			 
4d1b			.LEN: 
4d1b				CWHEAD .ASC 56 "COUNT" 5 WORD_FLAG_CODE 
4d1b 4c				db WORD_SYS_CORE+56             
4d1c 85 4d			dw .ASC            
4d1e 06				db 5 + 1 
4d1f .. 00			db "COUNT",0              
4d25				endm 
# End of macro CWHEAD
4d25			; | COUNT (  str -- str u1 ) Push the length of the string str on TOS as u1 | DONE 
4d25			 
4d25					if DEBUG_FORTH_WORDS_KEY 
4d25						DMARK "CNT" 
4d25 f5				push af  
4d26 3a 3a 4d			ld a, (.dmark)  
4d29 32 a0 fd			ld (debug_mark),a  
4d2c 3a 3b 4d			ld a, (.dmark+1)  
4d2f 32 a1 fd			ld (debug_mark+1),a  
4d32 3a 3c 4d			ld a, (.dmark+2)  
4d35 32 a2 fd			ld (debug_mark+2),a  
4d38 18 03			jr .pastdmark  
4d3a ..			.dmark: db "CNT"  
4d3d f1			.pastdmark: pop af  
4d3e			endm  
# End of macro DMARK
4d3e						CALLMONITOR 
4d3e cd aa fd			call debug_vector  
4d41				endm  
# End of macro CALLMONITOR
4d41					endif 
4d41			; TODO check string type 
4d41					FORTH_DSP_VALUE 
4d41 cd 36 22			call macro_forth_dsp_value 
4d44				endm 
# End of macro FORTH_DSP_VALUE
4d44			 
4d44			 
4d44					if DEBUG_FORTH_WORDS 
4d44						DMARK "CN?" 
4d44 f5				push af  
4d45 3a 59 4d			ld a, (.dmark)  
4d48 32 a0 fd			ld (debug_mark),a  
4d4b 3a 5a 4d			ld a, (.dmark+1)  
4d4e 32 a1 fd			ld (debug_mark+1),a  
4d51 3a 5b 4d			ld a, (.dmark+2)  
4d54 32 a2 fd			ld (debug_mark+2),a  
4d57 18 03			jr .pastdmark  
4d59 ..			.dmark: db "CN?"  
4d5c f1			.pastdmark: pop af  
4d5d			endm  
# End of macro DMARK
4d5d						CALLMONITOR 
4d5d cd aa fd			call debug_vector  
4d60				endm  
# End of macro CALLMONITOR
4d60					endif 
4d60 cd 44 13				call strlenz 
4d63					if DEBUG_FORTH_WORDS 
4d63						DMARK "CNl" 
4d63 f5				push af  
4d64 3a 78 4d			ld a, (.dmark)  
4d67 32 a0 fd			ld (debug_mark),a  
4d6a 3a 79 4d			ld a, (.dmark+1)  
4d6d 32 a1 fd			ld (debug_mark+1),a  
4d70 3a 7a 4d			ld a, (.dmark+2)  
4d73 32 a2 fd			ld (debug_mark+2),a  
4d76 18 03			jr .pastdmark  
4d78 ..			.dmark: db "CNl"  
4d7b f1			.pastdmark: pop af  
4d7c			endm  
# End of macro DMARK
4d7c						CALLMONITOR 
4d7c cd aa fd			call debug_vector  
4d7f				endm  
# End of macro CALLMONITOR
4d7f					endif 
4d7f			 
4d7f cd 48 20				call forth_push_numhl 
4d82			 
4d82			 
4d82			 
4d82				       NEXTW 
4d82 c3 39 24			jp macro_next 
4d85				endm 
# End of macro NEXTW
4d85			.ASC: 
4d85				CWHEAD .CHR 57 "ASC" 3 WORD_FLAG_CODE 
4d85 4d				db WORD_SYS_CORE+57             
4d86 f3 4d			dw .CHR            
4d88 04				db 3 + 1 
4d89 .. 00			db "ASC",0              
4d8d				endm 
# End of macro CWHEAD
4d8d			; | ASC ( u -- n ) Get the ASCII value of the first character of the string on TOS | DONE 
4d8d					if DEBUG_FORTH_WORDS_KEY 
4d8d						DMARK "ASC" 
4d8d f5				push af  
4d8e 3a a2 4d			ld a, (.dmark)  
4d91 32 a0 fd			ld (debug_mark),a  
4d94 3a a3 4d			ld a, (.dmark+1)  
4d97 32 a1 fd			ld (debug_mark+1),a  
4d9a 3a a4 4d			ld a, (.dmark+2)  
4d9d 32 a2 fd			ld (debug_mark+2),a  
4da0 18 03			jr .pastdmark  
4da2 ..			.dmark: db "ASC"  
4da5 f1			.pastdmark: pop af  
4da6			endm  
# End of macro DMARK
4da6						CALLMONITOR 
4da6 cd aa fd			call debug_vector  
4da9				endm  
# End of macro CALLMONITOR
4da9					endif 
4da9					FORTH_DSP_VALUE 
4da9 cd 36 22			call macro_forth_dsp_value 
4dac				endm 
# End of macro FORTH_DSP_VALUE
4dac					;v5 FORTH_DSP_VALUE 
4dac			;		inc hl      ; now at start of numeric as string 
4dac			 
4dac e5					push hl 
4dad			 
4dad					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4dad cd 05 23			call macro_forth_dsp_pop 
4db0				endm 
# End of macro FORTH_DSP_POP
4db0			 
4db0 e1					pop hl 
4db1			 
4db1					if DEBUG_FORTH_WORDS 
4db1						DMARK "AS1" 
4db1 f5				push af  
4db2 3a c6 4d			ld a, (.dmark)  
4db5 32 a0 fd			ld (debug_mark),a  
4db8 3a c7 4d			ld a, (.dmark+1)  
4dbb 32 a1 fd			ld (debug_mark+1),a  
4dbe 3a c8 4d			ld a, (.dmark+2)  
4dc1 32 a2 fd			ld (debug_mark+2),a  
4dc4 18 03			jr .pastdmark  
4dc6 ..			.dmark: db "AS1"  
4dc9 f1			.pastdmark: pop af  
4dca			endm  
# End of macro DMARK
4dca						CALLMONITOR 
4dca cd aa fd			call debug_vector  
4dcd				endm  
# End of macro CALLMONITOR
4dcd					endif 
4dcd					; push the content of a onto the stack as a value 
4dcd			 
4dcd 7e					ld a,(hl)   ; get char 
4dce 26 00				ld h,0 
4dd0 6f					ld l,a 
4dd1					if DEBUG_FORTH_WORDS 
4dd1						DMARK "AS2" 
4dd1 f5				push af  
4dd2 3a e6 4d			ld a, (.dmark)  
4dd5 32 a0 fd			ld (debug_mark),a  
4dd8 3a e7 4d			ld a, (.dmark+1)  
4ddb 32 a1 fd			ld (debug_mark+1),a  
4dde 3a e8 4d			ld a, (.dmark+2)  
4de1 32 a2 fd			ld (debug_mark+2),a  
4de4 18 03			jr .pastdmark  
4de6 ..			.dmark: db "AS2"  
4de9 f1			.pastdmark: pop af  
4dea			endm  
# End of macro DMARK
4dea						CALLMONITOR 
4dea cd aa fd			call debug_vector  
4ded				endm  
# End of macro CALLMONITOR
4ded					endif 
4ded cd 48 20				call forth_push_numhl 
4df0			 
4df0				       NEXTW 
4df0 c3 39 24			jp macro_next 
4df3				endm 
# End of macro NEXTW
4df3			 
4df3			.CHR: 
4df3				CWHEAD .ENDSTR 57 "CHR" 3 WORD_FLAG_CODE 
4df3 4d				db WORD_SYS_CORE+57             
4df4 2f 4e			dw .ENDSTR            
4df6 04				db 3 + 1 
4df7 .. 00			db "CHR",0              
4dfb				endm 
# End of macro CWHEAD
4dfb			; | CHR ( u -- n ) The ASCII character value of u is turned into a string n on the stack | DONE 
4dfb					if DEBUG_FORTH_WORDS_KEY 
4dfb						DMARK "CHR" 
4dfb f5				push af  
4dfc 3a 10 4e			ld a, (.dmark)  
4dff 32 a0 fd			ld (debug_mark),a  
4e02 3a 11 4e			ld a, (.dmark+1)  
4e05 32 a1 fd			ld (debug_mark+1),a  
4e08 3a 12 4e			ld a, (.dmark+2)  
4e0b 32 a2 fd			ld (debug_mark+2),a  
4e0e 18 03			jr .pastdmark  
4e10 ..			.dmark: db "CHR"  
4e13 f1			.pastdmark: pop af  
4e14			endm  
# End of macro DMARK
4e14						CALLMONITOR 
4e14 cd aa fd			call debug_vector  
4e17				endm  
# End of macro CALLMONITOR
4e17					endif 
4e17					FORTH_DSP_VALUEHL 
4e17 cd 4d 22			call macro_dsp_valuehl 
4e1a				endm 
# End of macro FORTH_DSP_VALUEHL
4e1a			 
4e1a					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4e1a cd 05 23			call macro_forth_dsp_pop 
4e1d				endm 
# End of macro FORTH_DSP_POP
4e1d			 
4e1d					; save asci byte as a zero term string and push string 
4e1d			 
4e1d 7d					ld a,l 
4e1e 32 f6 f0				ld (scratch), a 
4e21			 
4e21 3e 00				ld a, 0 
4e23 32 f7 f0				ld (scratch+1), a 
4e26			 
4e26 21 f6 f0				ld hl, scratch 
4e29 cd b6 20				call forth_push_str 
4e2c			 
4e2c			 
4e2c				       NEXTW 
4e2c c3 39 24			jp macro_next 
4e2f				endm 
# End of macro NEXTW
4e2f			 
4e2f			 
4e2f			 
4e2f			 
4e2f			.ENDSTR: 
4e2f			; eof 
4e2f			 
# End of file forth_words_str.asm
4e2f			include "forth_words_key.asm" 
4e2f			 
4e2f			; | ## Keyboard Words 
4e2f			 
4e2f			.KEY: 
4e2f				CWHEAD .KEYDB 42 "KEY" 3 WORD_FLAG_CODE 
4e2f 3e				db WORD_SYS_CORE+42             
4e30 5f 4e			dw .KEYDB            
4e32 04				db 3 + 1 
4e33 .. 00			db "KEY",0              
4e37				endm 
# End of macro CWHEAD
4e37			; | KEY ( -- u ) A non-blocking read of keypress | DONE 
4e37			; | | The ASCII key (or key code) is pushed to stack. If no key is currently held down then push a 0 
4e37			; | | Can use something like this to process: 
4e37			; | | > repeat active . key ?dup if emit then #1 until  
4e37			 
4e37					if DEBUG_FORTH_WORDS_KEY 
4e37						DMARK "KEY" 
4e37 f5				push af  
4e38 3a 4c 4e			ld a, (.dmark)  
4e3b 32 a0 fd			ld (debug_mark),a  
4e3e 3a 4d 4e			ld a, (.dmark+1)  
4e41 32 a1 fd			ld (debug_mark+1),a  
4e44 3a 4e 4e			ld a, (.dmark+2)  
4e47 32 a2 fd			ld (debug_mark+2),a  
4e4a 18 03			jr .pastdmark  
4e4c ..			.dmark: db "KEY"  
4e4f f1			.pastdmark: pop af  
4e50			endm  
# End of macro DMARK
4e50						CALLMONITOR 
4e50 cd aa fd			call debug_vector  
4e53				endm  
# End of macro CALLMONITOR
4e53					endif 
4e53			; TODO currently waits 
4e53 cd 4b 75				call cinndb 
4e56					;call cin_wait 
4e56 6f					ld l, a 
4e57 26 00				ld h, 0 
4e59 cd 48 20				call forth_push_numhl 
4e5c					NEXTW 
4e5c c3 39 24			jp macro_next 
4e5f				endm 
# End of macro NEXTW
4e5f			.KEYDB: 
4e5f				CWHEAD .WAITK 42 "KEYDB" 5 WORD_FLAG_CODE 
4e5f 3e				db WORD_SYS_CORE+42             
4e60 91 4e			dw .WAITK            
4e62 06				db 5 + 1 
4e63 .. 00			db "KEYDB",0              
4e69				endm 
# End of macro CWHEAD
4e69			; | KEYDB ( -- u ) A non-blocking read of keypress with key release debounce | DONE 
4e69			; | | The ASCII key (or key code) is pushed to stack. If no key is currently held down then push a 0 
4e69			; | | Can use something like this to process: 
4e69			; | | > repeat active . key ?dup if emit then #1 until  
4e69			 
4e69					if DEBUG_FORTH_WORDS_KEY 
4e69						DMARK "KEB" 
4e69 f5				push af  
4e6a 3a 7e 4e			ld a, (.dmark)  
4e6d 32 a0 fd			ld (debug_mark),a  
4e70 3a 7f 4e			ld a, (.dmark+1)  
4e73 32 a1 fd			ld (debug_mark+1),a  
4e76 3a 80 4e			ld a, (.dmark+2)  
4e79 32 a2 fd			ld (debug_mark+2),a  
4e7c 18 03			jr .pastdmark  
4e7e ..			.dmark: db "KEB"  
4e81 f1			.pastdmark: pop af  
4e82			endm  
# End of macro DMARK
4e82						CALLMONITOR 
4e82 cd aa fd			call debug_vector  
4e85				endm  
# End of macro CALLMONITOR
4e85					endif 
4e85			; TODO currently waits 
4e85 cd 37 75				call cin 
4e88					;call cin_wait 
4e88 6f					ld l, a 
4e89 26 00				ld h, 0 
4e8b cd 48 20				call forth_push_numhl 
4e8e					NEXTW 
4e8e c3 39 24			jp macro_next 
4e91				endm 
# End of macro NEXTW
4e91			.WAITK: 
4e91				CWHEAD .ACCEPT 43 "WAITK" 5 WORD_FLAG_CODE 
4e91 3f				db WORD_SYS_CORE+43             
4e92 c3 4e			dw .ACCEPT            
4e94 06				db 5 + 1 
4e95 .. 00			db "WAITK",0              
4e9b				endm 
# End of macro CWHEAD
4e9b			; | WAITK ( -- w ) Wait for keypress TOS is key press | DONE 
4e9b					if DEBUG_FORTH_WORDS_KEY 
4e9b						DMARK "WAI" 
4e9b f5				push af  
4e9c 3a b0 4e			ld a, (.dmark)  
4e9f 32 a0 fd			ld (debug_mark),a  
4ea2 3a b1 4e			ld a, (.dmark+1)  
4ea5 32 a1 fd			ld (debug_mark+1),a  
4ea8 3a b2 4e			ld a, (.dmark+2)  
4eab 32 a2 fd			ld (debug_mark+2),a  
4eae 18 03			jr .pastdmark  
4eb0 ..			.dmark: db "WAI"  
4eb3 f1			.pastdmark: pop af  
4eb4			endm  
# End of macro DMARK
4eb4						CALLMONITOR 
4eb4 cd aa fd			call debug_vector  
4eb7				endm  
# End of macro CALLMONITOR
4eb7					endif 
4eb7 cd 26 75				call cin_wait 
4eba 6f					ld l, a 
4ebb 26 00				ld h, 0 
4ebd cd 48 20				call forth_push_numhl 
4ec0					NEXTW 
4ec0 c3 39 24			jp macro_next 
4ec3				endm 
# End of macro NEXTW
4ec3			.ACCEPT: 
4ec3				CWHEAD .EDIT 44 "ACCEPT" 6 WORD_FLAG_CODE 
4ec3 40				db WORD_SYS_CORE+44             
4ec4 21 4f			dw .EDIT            
4ec6 07				db 6 + 1 
4ec7 .. 00			db "ACCEPT",0              
4ece				endm 
# End of macro CWHEAD
4ece			; | ACCEPT ( -- w ) Prompt for text input and push pointer to string | DONE 
4ece					; TODO crashes on push 
4ece					if DEBUG_FORTH_WORDS_KEY 
4ece						DMARK "ACC" 
4ece f5				push af  
4ecf 3a e3 4e			ld a, (.dmark)  
4ed2 32 a0 fd			ld (debug_mark),a  
4ed5 3a e4 4e			ld a, (.dmark+1)  
4ed8 32 a1 fd			ld (debug_mark+1),a  
4edb 3a e5 4e			ld a, (.dmark+2)  
4ede 32 a2 fd			ld (debug_mark+2),a  
4ee1 18 03			jr .pastdmark  
4ee3 ..			.dmark: db "ACC"  
4ee6 f1			.pastdmark: pop af  
4ee7			endm  
# End of macro DMARK
4ee7						CALLMONITOR 
4ee7 cd aa fd			call debug_vector  
4eea				endm  
# End of macro CALLMONITOR
4eea					endif 
4eea 21 f4 f2				ld hl, os_input 
4eed 3e 00				ld a, 0 
4eef 77					ld (hl),a 
4ef0 3a 93 f9				ld a,(f_cursor_ptr) 
4ef3 16 64				ld d, 100 
4ef5 0e 00				ld c, 0 
4ef7 1e 28				ld e, 40 
4ef9 cd 0b 10				call input_str 
4efc					; TODO perhaps do a type check and wrap in quotes if not a number 
4efc 21 f4 f2				ld hl, os_input 
4eff					if DEBUG_FORTH_WORDS 
4eff						DMARK "AC1" 
4eff f5				push af  
4f00 3a 14 4f			ld a, (.dmark)  
4f03 32 a0 fd			ld (debug_mark),a  
4f06 3a 15 4f			ld a, (.dmark+1)  
4f09 32 a1 fd			ld (debug_mark+1),a  
4f0c 3a 16 4f			ld a, (.dmark+2)  
4f0f 32 a2 fd			ld (debug_mark+2),a  
4f12 18 03			jr .pastdmark  
4f14 ..			.dmark: db "AC1"  
4f17 f1			.pastdmark: pop af  
4f18			endm  
# End of macro DMARK
4f18						CALLMONITOR 
4f18 cd aa fd			call debug_vector  
4f1b				endm  
# End of macro CALLMONITOR
4f1b					endif 
4f1b cd b6 20				call forth_push_str 
4f1e					NEXTW 
4f1e c3 39 24			jp macro_next 
4f21				endm 
# End of macro NEXTW
4f21			 
4f21			.EDIT: 
4f21				CWHEAD .DEDIT 44 "EDIT" 4 WORD_FLAG_CODE 
4f21 40				db WORD_SYS_CORE+44             
4f22 c3 4f			dw .DEDIT            
4f24 05				db 4 + 1 
4f25 .. 00			db "EDIT",0              
4f2a				endm 
# End of macro CWHEAD
4f2a			; | EDIT ( u -- u ) Takes string on TOS and allows editing of it. Pushes it back once done. | DONE 
4f2a			 
4f2a					; TODO does not copy from stack 
4f2a					if DEBUG_FORTH_WORDS_KEY 
4f2a						DMARK "EDT" 
4f2a f5				push af  
4f2b 3a 3f 4f			ld a, (.dmark)  
4f2e 32 a0 fd			ld (debug_mark),a  
4f31 3a 40 4f			ld a, (.dmark+1)  
4f34 32 a1 fd			ld (debug_mark+1),a  
4f37 3a 41 4f			ld a, (.dmark+2)  
4f3a 32 a2 fd			ld (debug_mark+2),a  
4f3d 18 03			jr .pastdmark  
4f3f ..			.dmark: db "EDT"  
4f42 f1			.pastdmark: pop af  
4f43			endm  
# End of macro DMARK
4f43						CALLMONITOR 
4f43 cd aa fd			call debug_vector  
4f46				endm  
# End of macro CALLMONITOR
4f46					endif 
4f46			 
4f46					;FORTH_DSP 
4f46					FORTH_DSP_VALUEHL 
4f46 cd 4d 22			call macro_dsp_valuehl 
4f49				endm 
# End of macro FORTH_DSP_VALUEHL
4f49			;		inc hl    ; TODO do type check 
4f49			 
4f49			;		call get_word_hl 
4f49 e5					push hl 
4f4a					if DEBUG_FORTH_WORDS 
4f4a						DMARK "EDp" 
4f4a f5				push af  
4f4b 3a 5f 4f			ld a, (.dmark)  
4f4e 32 a0 fd			ld (debug_mark),a  
4f51 3a 60 4f			ld a, (.dmark+1)  
4f54 32 a1 fd			ld (debug_mark+1),a  
4f57 3a 61 4f			ld a, (.dmark+2)  
4f5a 32 a2 fd			ld (debug_mark+2),a  
4f5d 18 03			jr .pastdmark  
4f5f ..			.dmark: db "EDp"  
4f62 f1			.pastdmark: pop af  
4f63			endm  
# End of macro DMARK
4f63						CALLMONITOR 
4f63 cd aa fd			call debug_vector  
4f66				endm  
# End of macro CALLMONITOR
4f66					endif 
4f66				;	ld a, 0 
4f66 cd 44 13				call strlenz 
4f69 23					inc hl 
4f6a			 
4f6a 06 00				ld b, 0 
4f6c 4d					ld c, l 
4f6d			 
4f6d e1					pop hl 
4f6e 11 f4 f2				ld de, os_input 
4f71					if DEBUG_FORTH_WORDS_KEY 
4f71						DMARK "EDc" 
4f71 f5				push af  
4f72 3a 86 4f			ld a, (.dmark)  
4f75 32 a0 fd			ld (debug_mark),a  
4f78 3a 87 4f			ld a, (.dmark+1)  
4f7b 32 a1 fd			ld (debug_mark+1),a  
4f7e 3a 88 4f			ld a, (.dmark+2)  
4f81 32 a2 fd			ld (debug_mark+2),a  
4f84 18 03			jr .pastdmark  
4f86 ..			.dmark: db "EDc"  
4f89 f1			.pastdmark: pop af  
4f8a			endm  
# End of macro DMARK
4f8a						CALLMONITOR 
4f8a cd aa fd			call debug_vector  
4f8d				endm  
# End of macro CALLMONITOR
4f8d					endif 
4f8d ed b0				ldir 
4f8f			 
4f8f			 
4f8f 21 f4 f2				ld hl, os_input 
4f92					;ld a, 0 
4f92					;ld (hl),a 
4f92 3a 93 f9				ld a,(f_cursor_ptr) 
4f95 16 64				ld d, 100 
4f97 0e 00				ld c, 0 
4f99 1e 28				ld e, 40 
4f9b cd 0b 10				call input_str 
4f9e					; TODO perhaps do a type check and wrap in quotes if not a number 
4f9e 21 f4 f2				ld hl, os_input 
4fa1					if DEBUG_FORTH_WORDS 
4fa1						DMARK "ED1" 
4fa1 f5				push af  
4fa2 3a b6 4f			ld a, (.dmark)  
4fa5 32 a0 fd			ld (debug_mark),a  
4fa8 3a b7 4f			ld a, (.dmark+1)  
4fab 32 a1 fd			ld (debug_mark+1),a  
4fae 3a b8 4f			ld a, (.dmark+2)  
4fb1 32 a2 fd			ld (debug_mark+2),a  
4fb4 18 03			jr .pastdmark  
4fb6 ..			.dmark: db "ED1"  
4fb9 f1			.pastdmark: pop af  
4fba			endm  
# End of macro DMARK
4fba						CALLMONITOR 
4fba cd aa fd			call debug_vector  
4fbd				endm  
# End of macro CALLMONITOR
4fbd					endif 
4fbd cd b6 20				call forth_push_str 
4fc0					NEXTW 
4fc0 c3 39 24			jp macro_next 
4fc3				endm 
# End of macro NEXTW
4fc3			 
4fc3			.DEDIT: 
4fc3				CWHEAD .ENDKEY 44 "DEDIT" 5 WORD_FLAG_CODE 
4fc3 40				db WORD_SYS_CORE+44             
4fc4 25 50			dw .ENDKEY            
4fc6 06				db 5 + 1 
4fc7 .. 00			db "DEDIT",0              
4fcd				endm 
# End of macro CWHEAD
4fcd			; | DEDIT ( ptr --  ) Takes an address for direct editing in memory. | DONE 
4fcd			 
4fcd					; TODO does not copy from stack 
4fcd					if DEBUG_FORTH_WORDS_KEY 
4fcd						DMARK "DED" 
4fcd f5				push af  
4fce 3a e2 4f			ld a, (.dmark)  
4fd1 32 a0 fd			ld (debug_mark),a  
4fd4 3a e3 4f			ld a, (.dmark+1)  
4fd7 32 a1 fd			ld (debug_mark+1),a  
4fda 3a e4 4f			ld a, (.dmark+2)  
4fdd 32 a2 fd			ld (debug_mark+2),a  
4fe0 18 03			jr .pastdmark  
4fe2 ..			.dmark: db "DED"  
4fe5 f1			.pastdmark: pop af  
4fe6			endm  
# End of macro DMARK
4fe6						CALLMONITOR 
4fe6 cd aa fd			call debug_vector  
4fe9				endm  
# End of macro CALLMONITOR
4fe9					endif 
4fe9			 
4fe9					;FORTH_DSP 
4fe9					FORTH_DSP_VALUEHL 
4fe9 cd 4d 22			call macro_dsp_valuehl 
4fec				endm 
# End of macro FORTH_DSP_VALUEHL
4fec			;		inc hl    ; TODO do type check 
4fec			 
4fec			;		call get_word_hl 
4fec e5					push hl 
4fed e5					push hl 
4fee					FORTH_DSP_POP 
4fee cd 05 23			call macro_forth_dsp_pop 
4ff1				endm 
# End of macro FORTH_DSP_POP
4ff1 e1					pop hl 
4ff2					if DEBUG_FORTH_WORDS 
4ff2						DMARK "EDp" 
4ff2 f5				push af  
4ff3 3a 07 50			ld a, (.dmark)  
4ff6 32 a0 fd			ld (debug_mark),a  
4ff9 3a 08 50			ld a, (.dmark+1)  
4ffc 32 a1 fd			ld (debug_mark+1),a  
4fff 3a 09 50			ld a, (.dmark+2)  
5002 32 a2 fd			ld (debug_mark+2),a  
5005 18 03			jr .pastdmark  
5007 ..			.dmark: db "EDp"  
500a f1			.pastdmark: pop af  
500b			endm  
# End of macro DMARK
500b						CALLMONITOR 
500b cd aa fd			call debug_vector  
500e				endm  
# End of macro CALLMONITOR
500e					endif 
500e				;	ld a, 0 
500e cd 44 13				call strlenz 
5011 23					inc hl 
5012			 
5012 06 00				ld b, 0 
5014 4d					ld c, l 
5015			 
5015 e1					pop hl 
5016			 
5016					;ld a, 0 
5016					;ld (hl),a 
5016 3a 93 f9				ld a,(f_cursor_ptr) 
5019 16 64				ld d, 100 
501b 0e 00				ld c, 0 
501d 1e 28				ld e, 40 
501f cd 0b 10				call input_str 
5022					; TODO perhaps do a type check and wrap in quotes if not a number 
5022					NEXTW 
5022 c3 39 24			jp macro_next 
5025				endm 
# End of macro NEXTW
5025			 
5025			 
5025			.ENDKEY: 
5025			; eof 
5025			 
# End of file forth_words_key.asm
5025			include "forth_words_const.asm" 
5025			 
5025			; | ## Constants (i.e. Useful memory addresses that can set or get features) 
5025			 
5025			 
5025			.SPITIME: 
5025				CWHEAD .VA 99 "SPITIME" 7 WORD_FLAG_CODE 
5025 77				db WORD_SYS_CORE+99             
5026 3a 50			dw .VA            
5028 08				db 7 + 1 
5029 .. 00			db "SPITIME",0              
5031				endm 
# End of macro CWHEAD
5031			; | SPITIME ( -- u1 )   Pushes address of the SPI pulse counter/delay to stack | DONE 
5031			; 
5031			; | | If using BANK devices then leave as is. 
5031			; | | Only really useful for the CARTDEV where other devices may be far too slow. In particular 
5031			; | | the multiplexing of the PicoSPINet addon which might not be running fast enough for all of the nodes 
5031			 
5031 21 99 f9				ld hl, spi_clktime  
5034 cd 48 20				call forth_push_numhl 
5037			 
5037					NEXTW 
5037 c3 39 24			jp macro_next 
503a				endm 
# End of macro NEXTW
503a			 
503a			 
503a			.VA: 
503a				CWHEAD .SYMBOL 99 "VA" 2 WORD_FLAG_CODE 
503a 77				db WORD_SYS_CORE+99             
503b 4a 50			dw .SYMBOL            
503d 03				db 2 + 1 
503e .. 00			db "VA",0              
5041				endm 
# End of macro CWHEAD
5041			; | VA ( -- u1 )   Pushes address of block of memory used for v1..5 | DONE 
5041 21 5d f9				ld hl, cli_var_array 
5044 cd 48 20				call forth_push_numhl 
5047			 
5047					NEXTW 
5047 c3 39 24			jp macro_next 
504a				endm 
# End of macro NEXTW
504a			 
504a			.SYMBOL: 
504a				CWHEAD .ENDCONST 99 "SYMBOL" 6 WORD_FLAG_CODE 
504a 77				db WORD_SYS_CORE+99             
504b 54 51			dw .ENDCONST            
504d 07				db 6 + 1 
504e .. 00			db "SYMBOL",0              
5055				endm 
# End of macro CWHEAD
5055			; | SYMBOL ( u1 -- )  Get the address of a system symbol from a look up table to TOS  | DONE 
5055			; | 
5055			; | | The value is the number reference and the final address is pushed to stack 
5055			 
5055			; | | ``` 
5055			; | | dw sym_table 
5055			; | | dw nmi_vector 
5055			; | | dw cli_autodisplay 
5055			; | | dw cli_data_sp 
5055			; | | dw cli_data_stack 
5055			; | | dw cli_loop_sp 
5055			; | | dw cli_loop_stack 
5055			; | | dw cli_var_array 
5055			; | | dw cursor_col 
5055			; | | dw cursor_ptr 
5055			; | | ; 10 
5055			; | | dw cursor_row 
5055			; | | dw debug_mark 
5055			; | | dw display_fb0 
5055			; | | dw display_fb1 
5055			; | | dw display_fb2 
5055			; | | dw display_fb3 
5055			; | | dw display_fb_active 
5055			; | | dw execscratch 
5055			; | | dw f_cursor_ptr 
5055			; | | dw hardware_word 
5055			; | | ;20 
5055			; | | dw input_at_cursor 
5055			; | | dw input_at_pos 
5055			; | | dw input_cur_flash 
5055			; | | dw input_cur_onoff 
5055			; | | dw input_cursor 
5055			; | | dw input_display_size 
5055			; | | dw input_len 
5055			; | | dw input_ptr 
5055			; | | dw input_size 
5055			; | | dw input_start 
5055			; | | ; 30 
5055			; | | dw input_str 
5055			; | | dw input_under_cursor 
5055			; | | dw os_cli_cmd 
5055			; | | dw os_cur_ptr 
5055			; | | dw os_current_i 
5055			; | | dw os_input 
5055			; | | dw os_last_cmd 
5055			; | | dw os_last_new_uword 
5055			; | | dw debug_vector 
5055			; | | dw os_view_hl 
5055			; | | ;40 
5055			; | | dw os_word_scratch 
5055			; | | dw portbctl 
5055			; | | dw portbdata 
5055			; | | dw spi_cartdev 
5055			; | | dw spi_cartdev2 
5055			; | | dw spi_clktime 
5055			; | | dw spi_device 
5055			; | | dw spi_device_id 
5055			; | | dw spi_portbyte 
5055			; | | dw stackstore 
5055			; | | ; 50 
5055			; | | if STORAGE_SE 
5055			; | | dw storage_actl 
5055			; | | dw storage_adata 
5055			; | | else 
5055			; | | dw 0 
5055			; | | dw 0 
5055			; | | endif 
5055			; | | dw storage_append 
5055			; | | if STORAGE_SE 
5055			; | | dw storage_bctl 
5055			; | | else 
5055			; | | dw 0 
5055			; | | endif 
5055			; | | dw store_bank_active 
5055			; | | dw store_filecache 
5055			; | | dw store_longread 
5055			; | | dw store_openaddr 
5055			; | | dw store_openext 
5055			; | | dw store_openmaxext 
5055			; | | ; 60 
5055			; | | dw store_page 
5055			; | | dw store_readbuf 
5055			; | | dw store_readcont 
5055			; | | dw store_readptr 
5055			; | | dw store_tmpext 
5055			; | | dw store_tmpid 
5055			; | | dw store_tmppageid 
5055			; | | dw malloc 
5055			; | | dw free 
5055			; | | dw cin 
5055			; | | ; 70 
5055			; | | dw cin_wait 
5055			; | | dw forth_push_numhl 
5055			; | | dw forth_push_str 
5055			; | | ``` 
5055			 
5055					if DEBUG_FORTH_WORDS_KEY 
5055						DMARK "SYM" 
5055 f5				push af  
5056 3a 6a 50			ld a, (.dmark)  
5059 32 a0 fd			ld (debug_mark),a  
505c 3a 6b 50			ld a, (.dmark+1)  
505f 32 a1 fd			ld (debug_mark+1),a  
5062 3a 6c 50			ld a, (.dmark+2)  
5065 32 a2 fd			ld (debug_mark+2),a  
5068 18 03			jr .pastdmark  
506a ..			.dmark: db "SYM"  
506d f1			.pastdmark: pop af  
506e			endm  
# End of macro DMARK
506e						CALLMONITOR 
506e cd aa fd			call debug_vector  
5071				endm  
# End of macro CALLMONITOR
5071					endif 
5071			 
5071					FORTH_DSP_VALUEHL 
5071 cd 4d 22			call macro_dsp_valuehl 
5074				endm 
# End of macro FORTH_DSP_VALUEHL
5074			 
5074 7d					ld a, l     
5075			 
5075			 
5075					if DEBUG_FORTH_WORDS 
5075						DMARK "SY1" 
5075 f5				push af  
5076 3a 8a 50			ld a, (.dmark)  
5079 32 a0 fd			ld (debug_mark),a  
507c 3a 8b 50			ld a, (.dmark+1)  
507f 32 a1 fd			ld (debug_mark+1),a  
5082 3a 8c 50			ld a, (.dmark+2)  
5085 32 a2 fd			ld (debug_mark+2),a  
5088 18 03			jr .pastdmark  
508a ..			.dmark: db "SY1"  
508d f1			.pastdmark: pop af  
508e			endm  
# End of macro DMARK
508e						CALLMONITOR 
508e cd aa fd			call debug_vector  
5091				endm  
# End of macro CALLMONITOR
5091					endif 
5091					 
5091 f5					push af	 
5092					FORTH_DSP_POP 
5092 cd 05 23			call macro_forth_dsp_pop 
5095				endm 
# End of macro FORTH_DSP_POP
5095 f1					pop af 
5096			 
5096 cb 27				sla a  
5098				 
5098					 
5098					if DEBUG_FORTH_WORDS 
5098						DMARK "SY" 
5098 f5				push af  
5099 3a ad 50			ld a, (.dmark)  
509c 32 a0 fd			ld (debug_mark),a  
509f 3a ae 50			ld a, (.dmark+1)  
50a2 32 a1 fd			ld (debug_mark+1),a  
50a5 3a af 50			ld a, (.dmark+2)  
50a8 32 a2 fd			ld (debug_mark+2),a  
50ab 18 02			jr .pastdmark  
50ad ..			.dmark: db "SY"  
50af f1			.pastdmark: pop af  
50b0			endm  
# End of macro DMARK
50b0						CALLMONITOR 
50b0 cd aa fd			call debug_vector  
50b3				endm  
# End of macro CALLMONITOR
50b3					endif 
50b3			 
50b3 21 c2 50				ld hl, sym_table 
50b6 cd de 0f				call addatohl 
50b9 cd bb 23				call loadwordinhl 
50bc cd 48 20				call forth_push_numhl 
50bf			 
50bf			 
50bf				       NEXTW 
50bf c3 39 24			jp macro_next 
50c2				endm 
# End of macro NEXTW
50c2			 
50c2			sym_table: 
50c2			 
50c2			; 0 
50c2 c2 50		dw sym_table 
50c4 ad fd		dw nmi_vector 
50c6 71 f9		dw cli_autodisplay 
50c8 23 f9		dw cli_data_sp 
50ca 5d f6		dw cli_data_stack 
50cc 25 f9		dw cli_loop_sp 
50ce 5f f8		dw cli_loop_stack 
50d0 5d f9		dw cli_var_array 
50d2 fa fa		dw cursor_col 
50d4 f8 fa		dw cursor_ptr 
50d6			; 10 
50d6 f9 fa		dw cursor_row 
50d8 a0 fd		dw debug_mark 
50da e6 fc		dw display_fb0 
50dc 45 fc		dw display_fb1 
50de 03 fb		dw display_fb2 
50e0 a4 fb		dw display_fb3 
50e2 01 fb		dw display_fb_active 
50e4 f5 f1		dw execscratch 
50e6 93 f9		dw f_cursor_ptr 
50e8 b0 fd		dw hardware_word 
50ea			;20 
50ea 97 fd		dw input_at_cursor 
50ec 99 fd		dw input_at_pos 
50ee 95 fd		dw input_cur_flash 
50f0 94 fd		dw input_cur_onoff 
50f2 8a fd		dw input_cursor 
50f4 9a fd		dw input_display_size 
50f6 8f fd		dw input_len 
50f8 9e fd		dw input_ptr 
50fa 9b fd		dw input_size 
50fc 9c fd		dw input_start 
50fe			; 30 
50fe 0b 10		dw input_str 
5100 98 fd		dw input_under_cursor 
5102 1d f4		dw os_cli_cmd 
5104 19 f4		dw os_cur_ptr 
5106 1b f4		dw os_current_i 
5108 f4 f2		dw os_input 
510a 1c f5		dw os_last_cmd 
510c f3 f3		dw os_last_new_uword 
510e aa fd		dw debug_vector 
5110 d8 f0		dw os_view_hl 
5112			;40 
5112 fb f3		dw os_word_scratch 
5114 c3 00		dw portbctl 
5116 c1 00		dw portbdata 
5118 98 f9		dw spi_cartdev 
511a 97 f9		dw spi_cartdev2 
511c 99 f9		dw spi_clktime 
511e 95 f9		dw spi_device 
5120 94 f9		dw spi_device_id 
5122 96 f9		dw spi_portbyte 
5124 dc fa		dw stackstore 
5126			; 50 
5126			if STORAGE_SE 
5126 82 00		dw storage_actl 
5128 80 00		dw storage_adata 
512a			else 
512a			dw 0 
512a			dw 0 
512a			endif 
512a 64 0b		dw storage_append 
512c			if STORAGE_SE 
512c 83 00		dw storage_bctl 
512e			else 
512e			dw 0 
512e			endif 
512e c8 fa		dw store_bank_active 
5130 9c f9		dw store_filecache 
5132 aa f9		dw store_longread 
5134 a0 f9		dw store_openaddr 
5136 9f f9		dw store_openext 
5138 9e f9		dw store_openmaxext 
513a			; 60 
513a af f9		dw store_page 
513c ab f9		dw store_readbuf 
513e a2 f9		dw store_readcont 
5140 ad f9		dw store_readptr 
5142 a2 f9		dw store_tmpext 
5144 a3 f9		dw store_tmpid 
5146 9a f9		dw store_tmppageid 
5148 b9 13		dw malloc 
514a 83 14		dw free 
514c 37 75		dw cin 
514e			; 70 
514e 26 75		dw cin_wait 
5150 48 20		dw forth_push_numhl 
5152 b6 20		dw forth_push_str 
5154			 
5154			 
5154			.ENDCONST: 
5154			 
5154			; eof 
5154			 
5154			 
# End of file forth_words_const.asm
5154			 
5154			if STORAGE_SE 
5154			   	include "forth_words_storage.asm" 
5154			 
5154			; | ## Fixed Storage Words 
5154			 
5154			.RENAME: 
5154			  
5154				CWHEAD .RECORD 38 "RENAME" 6 WORD_FLAG_CODE 
5154 3a				db WORD_SYS_CORE+38             
5155 4a 52			dw .RECORD            
5157 07				db 6 + 1 
5158 .. 00			db "RENAME",0              
515f				endm 
# End of macro CWHEAD
515f			; | RENAME ( s id -- ) With the current bank, rename the file id with the new label s  | DONE 
515f			; | | > [!NOTE] 
515f			; | | > Compatible with PicoSPINet  
515f					if DEBUG_FORTH_WORDS_KEY 
515f						DMARK "REN" 
515f f5				push af  
5160 3a 74 51			ld a, (.dmark)  
5163 32 a0 fd			ld (debug_mark),a  
5166 3a 75 51			ld a, (.dmark+1)  
5169 32 a1 fd			ld (debug_mark+1),a  
516c 3a 76 51			ld a, (.dmark+2)  
516f 32 a2 fd			ld (debug_mark+2),a  
5172 18 03			jr .pastdmark  
5174 ..			.dmark: db "REN"  
5177 f1			.pastdmark: pop af  
5178			endm  
# End of macro DMARK
5178						CALLMONITOR 
5178 cd aa fd			call debug_vector  
517b				endm  
# End of macro CALLMONITOR
517b					endif 
517b			 
517b			 
517b					; preserve some internal vars used by other file handing routines 
517b			 
517b 2a a0 f9				ld hl, (store_openaddr) 
517e e5					push hl 
517f 3a a2 f9				ld a, (store_readcont) 
5182 f5					push af 
5183			 
5183					FORTH_DSP_VALUEHL 
5183 cd 4d 22			call macro_dsp_valuehl 
5186				endm 
# End of macro FORTH_DSP_VALUEHL
5186			 
5186					; move ext and id around for the file header 
5186			 
5186 65					ld h, l 
5187 2e 00				ld l, 0 
5189			 
5189 e5					push hl    ; id 
518a			 
518a					FORTH_DSP_POP 
518a cd 05 23			call macro_forth_dsp_pop 
518d				endm 
# End of macro FORTH_DSP_POP
518d			 
518d					; Locate the file header 
518d			 
518d e1					pop hl 
518e e5					push hl 
518f 11 af f9				ld de, store_page      ; get block zero of file 
5192					if DEBUG_FORTH_WORDS 
5192						DMARK "REr" 
5192 f5				push af  
5193 3a a7 51			ld a, (.dmark)  
5196 32 a0 fd			ld (debug_mark),a  
5199 3a a8 51			ld a, (.dmark+1)  
519c 32 a1 fd			ld (debug_mark+1),a  
519f 3a a9 51			ld a, (.dmark+2)  
51a2 32 a2 fd			ld (debug_mark+2),a  
51a5 18 03			jr .pastdmark  
51a7 ..			.dmark: db "REr"  
51aa f1			.pastdmark: pop af  
51ab			endm  
# End of macro DMARK
51ab						CALLMONITOR 
51ab cd aa fd			call debug_vector  
51ae				endm  
# End of macro CALLMONITOR
51ae					endif 
51ae cd cd 09				call storage_read 
51b1			 
51b1 cd 07 10			call ishlzero 
51b4 20 05			jr nz, .rnfound 
51b6			 
51b6				; file does not exist so indicate with 255 extents in use 
51b6			 
51b6 3e ff			ld a, 255 
51b8 e1				pop hl ; clear dup hl 
51b9 18 7b			jr .skiprneof 
51bb			 
51bb			 
51bb			.rnfound: 
51bb					; file found so rename 
51bb			 
51bb					FORTH_DSP_VALUEHL 
51bb cd 4d 22			call macro_dsp_valuehl 
51be				endm 
# End of macro FORTH_DSP_VALUEHL
51be			 
51be e5				push hl 
51bf 3e 00			ld a, 0 
51c1 cd 4f 13			call strlent 
51c4 23				inc hl   ; cover zero term 
51c5 06 00			ld b,0 
51c7 4d				ld c,l 
51c8 e1				pop hl 
51c9 11 b2 f9				ld de, store_page + 3 
51cc ed b0				ldir 
51ce			 
51ce 11 af f9				ld de, store_page 
51d1					if DEBUG_FORTH_WORDS 
51d1						DMARK "RER" 
51d1 f5				push af  
51d2 3a e6 51			ld a, (.dmark)  
51d5 32 a0 fd			ld (debug_mark),a  
51d8 3a e7 51			ld a, (.dmark+1)  
51db 32 a1 fd			ld (debug_mark+1),a  
51de 3a e8 51			ld a, (.dmark+2)  
51e1 32 a2 fd			ld (debug_mark+2),a  
51e4 18 03			jr .pastdmark  
51e6 ..			.dmark: db "RER"  
51e9 f1			.pastdmark: pop af  
51ea			endm  
# End of macro DMARK
51ea						CALLMONITOR 
51ea cd aa fd			call debug_vector  
51ed				endm  
# End of macro CALLMONITOR
51ed					endif 
51ed			 
51ed e1					pop hl    ; get orig file id and mangle it for find id 
51ee 55					ld d, l 
51ef 5c					ld e, h 
51f0			 
51f0 21 00 00				ld hl, 0 
51f3					if DEBUG_FORTH_WORDS 
51f3						DMARK "REf" 
51f3 f5				push af  
51f4 3a 08 52			ld a, (.dmark)  
51f7 32 a0 fd			ld (debug_mark),a  
51fa 3a 09 52			ld a, (.dmark+1)  
51fd 32 a1 fd			ld (debug_mark+1),a  
5200 3a 0a 52			ld a, (.dmark+2)  
5203 32 a2 fd			ld (debug_mark+2),a  
5206 18 03			jr .pastdmark  
5208 ..			.dmark: db "REf"  
520b f1			.pastdmark: pop af  
520c			endm  
# End of macro DMARK
520c						CALLMONITOR 
520c cd aa fd			call debug_vector  
520f				endm  
# End of macro CALLMONITOR
520f					endif 
520f cd a7 07				call storage_findnextid 
5212 11 af f9				ld de, store_page 
5215					if DEBUG_FORTH_WORDS 
5215						DMARK "REw" 
5215 f5				push af  
5216 3a 2a 52			ld a, (.dmark)  
5219 32 a0 fd			ld (debug_mark),a  
521c 3a 2b 52			ld a, (.dmark+1)  
521f 32 a1 fd			ld (debug_mark+1),a  
5222 3a 2c 52			ld a, (.dmark+2)  
5225 32 a2 fd			ld (debug_mark+2),a  
5228 18 03			jr .pastdmark  
522a ..			.dmark: db "REw"  
522d f1			.pastdmark: pop af  
522e			endm  
# End of macro DMARK
522e						CALLMONITOR 
522e cd aa fd			call debug_vector  
5231				endm  
# End of macro CALLMONITOR
5231					endif 
5231 cd d9 04				call storage_write_block 
5234			 
5234 3e 00				ld a, 0 
5236			.skiprneof: 
5236					; drop file name 
5236					FORTH_DSP_POP 
5236 cd 05 23			call macro_forth_dsp_pop 
5239				endm 
# End of macro FORTH_DSP_POP
5239			 
5239 6f					ld l, a 
523a 26 00				ld h, 0 
523c cd 48 20				call forth_push_numhl 
523f			 
523f			 
523f f1					pop af 
5240 32 a2 f9				ld (store_readcont),a 
5243 e1					pop hl 
5244 22 a0 f9				ld (store_openaddr), hl 
5247						 
5247				NEXTW 
5247 c3 39 24			jp macro_next 
524a				endm 
# End of macro NEXTW
524a			.RECORD: 
524a			  
524a				CWHEAD .BREAD 38 "RECORD" 6 WORD_FLAG_CODE 
524a 3a				db WORD_SYS_CORE+38             
524b ee 52			dw .BREAD            
524d 07				db 6 + 1 
524e .. 00			db "RECORD",0              
5255				endm 
# End of macro CWHEAD
5255			; | RECORD ( u id -- s ) With the current bank, read record number u from file id and push to stack  | DONE 
5255			; | | > [!NOTE] 
5255			; | | > Compatible with PicoSPINet  
5255			 
5255					if DEBUG_FORTH_WORDS_KEY 
5255						DMARK "REC" 
5255 f5				push af  
5256 3a 6a 52			ld a, (.dmark)  
5259 32 a0 fd			ld (debug_mark),a  
525c 3a 6b 52			ld a, (.dmark+1)  
525f 32 a1 fd			ld (debug_mark+1),a  
5262 3a 6c 52			ld a, (.dmark+2)  
5265 32 a2 fd			ld (debug_mark+2),a  
5268 18 03			jr .pastdmark  
526a ..			.dmark: db "REC"  
526d f1			.pastdmark: pop af  
526e			endm  
# End of macro DMARK
526e						CALLMONITOR 
526e cd aa fd			call debug_vector  
5271				endm  
# End of macro CALLMONITOR
5271					endif 
5271			 
5271					FORTH_DSP_VALUEHL 
5271 cd 4d 22			call macro_dsp_valuehl 
5274				endm 
# End of macro FORTH_DSP_VALUEHL
5274			 
5274 e5					push hl    ; id 
5275			 
5275					FORTH_DSP_POP 
5275 cd 05 23			call macro_forth_dsp_pop 
5278				endm 
# End of macro FORTH_DSP_POP
5278			 
5278					FORTH_DSP_VALUEHL 
5278 cd 4d 22			call macro_dsp_valuehl 
527b				endm 
# End of macro FORTH_DSP_VALUEHL
527b			 
527b					FORTH_DSP_POP 
527b cd 05 23			call macro_forth_dsp_pop 
527e				endm 
# End of macro FORTH_DSP_POP
527e			 
527e d1					pop de     ; get file id 
527f			 
527f					; e = file id 
527f					; l = file extent 
527f			 
527f			 
527f					; construct request to access file extent 
527f			 
527f			;		ld a, e 
527f 63					ld h, e 
5280					 
5280					 
5280					 
5280			 
5280					; e has id 
5280			 
5280 11 af f9			ld de, store_page 
5283					if DEBUG_FORTH_WORDS 
5283						DMARK "REr" 
5283 f5				push af  
5284 3a 98 52			ld a, (.dmark)  
5287 32 a0 fd			ld (debug_mark),a  
528a 3a 99 52			ld a, (.dmark+1)  
528d 32 a1 fd			ld (debug_mark+1),a  
5290 3a 9a 52			ld a, (.dmark+2)  
5293 32 a2 fd			ld (debug_mark+2),a  
5296 18 03			jr .pastdmark  
5298 ..			.dmark: db "REr"  
529b f1			.pastdmark: pop af  
529c			endm  
# End of macro DMARK
529c						CALLMONITOR 
529c cd aa fd			call debug_vector  
529f				endm  
# End of macro CALLMONITOR
529f					endif 
529f cd cd 09				call storage_read 
52a2 cd 07 10			call ishlzero 
52a5 28 22			jr z, .recnotfound 
52a7			 
52a7			 
52a7					if DEBUG_FORTH_WORDS 
52a7						DMARK "REe" 
52a7 f5				push af  
52a8 3a bc 52			ld a, (.dmark)  
52ab 32 a0 fd			ld (debug_mark),a  
52ae 3a bd 52			ld a, (.dmark+1)  
52b1 32 a1 fd			ld (debug_mark+1),a  
52b4 3a be 52			ld a, (.dmark+2)  
52b7 32 a2 fd			ld (debug_mark+2),a  
52ba 18 03			jr .pastdmark  
52bc ..			.dmark: db "REe"  
52bf f1			.pastdmark: pop af  
52c0			endm  
# End of macro DMARK
52c0						CALLMONITOR 
52c0 cd aa fd			call debug_vector  
52c3				endm  
# End of macro CALLMONITOR
52c3					endif 
52c3 cd b6 20			call forth_push_str 
52c6			 
52c6					NEXTW 
52c6 c3 39 24			jp macro_next 
52c9				endm 
# End of macro NEXTW
52c9			 
52c9			.recnotfound: 
52c9					if DEBUG_FORTH_WORDS 
52c9						DMARK "REf" 
52c9 f5				push af  
52ca 3a de 52			ld a, (.dmark)  
52cd 32 a0 fd			ld (debug_mark),a  
52d0 3a df 52			ld a, (.dmark+1)  
52d3 32 a1 fd			ld (debug_mark+1),a  
52d6 3a e0 52			ld a, (.dmark+2)  
52d9 32 a2 fd			ld (debug_mark+2),a  
52dc 18 03			jr .pastdmark  
52de ..			.dmark: db "REf"  
52e1 f1			.pastdmark: pop af  
52e2			endm  
# End of macro DMARK
52e2						CALLMONITOR 
52e2 cd aa fd			call debug_vector  
52e5				endm  
# End of macro CALLMONITOR
52e5					endif 
52e5 21 ff 00			ld hl, 255 
52e8 cd 48 20			call forth_push_numhl 
52eb				NEXTW 
52eb c3 39 24			jp macro_next 
52ee				endm 
# End of macro NEXTW
52ee			 
52ee			 
52ee			.BREAD: 
52ee			  
52ee				CWHEAD .BWRITE 38 "BREAD" 5 WORD_FLAG_CODE 
52ee 3a				db WORD_SYS_CORE+38             
52ef 71 53			dw .BWRITE            
52f1 06				db 5 + 1 
52f2 .. 00			db "BREAD",0              
52f8				endm 
# End of macro CWHEAD
52f8			; | BREAD ( u -- u ) Lowlevel storage word. With the current bank, read a block from page id u (1-512) and push to stack  | DONE 
52f8			; | | > [!NOTE] 
52f8			; | | > Compatible with PicoSPINet  
52f8				 
52f8					if DEBUG_FORTH_WORDS_KEY 
52f8						DMARK "BRD" 
52f8 f5				push af  
52f9 3a 0d 53			ld a, (.dmark)  
52fc 32 a0 fd			ld (debug_mark),a  
52ff 3a 0e 53			ld a, (.dmark+1)  
5302 32 a1 fd			ld (debug_mark+1),a  
5305 3a 0f 53			ld a, (.dmark+2)  
5308 32 a2 fd			ld (debug_mark+2),a  
530b 18 03			jr .pastdmark  
530d ..			.dmark: db "BRD"  
5310 f1			.pastdmark: pop af  
5311			endm  
# End of macro DMARK
5311						CALLMONITOR 
5311 cd aa fd			call debug_vector  
5314				endm  
# End of macro CALLMONITOR
5314					endif 
5314			 
5314				FORTH_DSP_VALUEHL 
5314 cd 4d 22			call macro_dsp_valuehl 
5317				endm 
# End of macro FORTH_DSP_VALUEHL
5317			 
5317				FORTH_DSP_POP 
5317 cd 05 23			call macro_forth_dsp_pop 
531a				endm 
# End of macro FORTH_DSP_POP
531a			 
531a				; calc block address 
531a			 
531a eb				ex de, hl 
531b 3e 40			ld a, STORE_BLOCK_PHY 
531d cd 61 0f			call Mult16 
5320			 
5320			 
5320 11 af f9			ld de, store_page 
5323			 
5323					if DEBUG_FORTH_WORDS 
5323						DMARK "BR1" 
5323 f5				push af  
5324 3a 38 53			ld a, (.dmark)  
5327 32 a0 fd			ld (debug_mark),a  
532a 3a 39 53			ld a, (.dmark+1)  
532d 32 a1 fd			ld (debug_mark+1),a  
5330 3a 3a 53			ld a, (.dmark+2)  
5333 32 a2 fd			ld (debug_mark+2),a  
5336 18 03			jr .pastdmark  
5338 ..			.dmark: db "BR1"  
533b f1			.pastdmark: pop af  
533c			endm  
# End of macro DMARK
533c						CALLMONITOR 
533c cd aa fd			call debug_vector  
533f				endm  
# End of macro CALLMONITOR
533f					endif 
533f			 
533f cd 74 04			call storage_read_block 
5342			 
5342 cd 07 10			call ishlzero 
5345 20 05			jr nz, .brfound 
5347			 
5347 cd 48 20			call forth_push_numhl 
534a 18 22			jr .brdone 
534c			 
534c			 
534c			.brfound: 
534c 21 b1 f9		        ld hl, store_page+2 
534f			 
534f					if DEBUG_FORTH_WORDS 
534f						DMARK "BR2" 
534f f5				push af  
5350 3a 64 53			ld a, (.dmark)  
5353 32 a0 fd			ld (debug_mark),a  
5356 3a 65 53			ld a, (.dmark+1)  
5359 32 a1 fd			ld (debug_mark+1),a  
535c 3a 66 53			ld a, (.dmark+2)  
535f 32 a2 fd			ld (debug_mark+2),a  
5362 18 03			jr .pastdmark  
5364 ..			.dmark: db "BR2"  
5367 f1			.pastdmark: pop af  
5368			endm  
# End of macro DMARK
5368						CALLMONITOR 
5368 cd aa fd			call debug_vector  
536b				endm  
# End of macro CALLMONITOR
536b					endif 
536b			 
536b cd b6 20			call forth_push_str 
536e			 
536e			 
536e			.brdone: 
536e			 
536e					NEXTW 
536e c3 39 24			jp macro_next 
5371				endm 
# End of macro NEXTW
5371			.BWRITE: 
5371				CWHEAD .BUPD 38 "BWRITE" 6 WORD_FLAG_CODE 
5371 3a				db WORD_SYS_CORE+38             
5372 06 54			dw .BUPD            
5374 07				db 6 + 1 
5375 .. 00			db "BWRITE",0              
537c				endm 
# End of macro CWHEAD
537c			; | BWRITE ( s u -- ) Lowlevel storage word. With the current bank, write the string s to page id u | DONE 
537c			; | | > [!NOTE] 
537c			; | | > Compatible with PicoSPINet  
537c			 
537c					if DEBUG_FORTH_WORDS_KEY 
537c						DMARK "BWR" 
537c f5				push af  
537d 3a 91 53			ld a, (.dmark)  
5380 32 a0 fd			ld (debug_mark),a  
5383 3a 92 53			ld a, (.dmark+1)  
5386 32 a1 fd			ld (debug_mark+1),a  
5389 3a 93 53			ld a, (.dmark+2)  
538c 32 a2 fd			ld (debug_mark+2),a  
538f 18 03			jr .pastdmark  
5391 ..			.dmark: db "BWR"  
5394 f1			.pastdmark: pop af  
5395			endm  
# End of macro DMARK
5395						CALLMONITOR 
5395 cd aa fd			call debug_vector  
5398				endm  
# End of macro CALLMONITOR
5398					endif 
5398			 
5398				FORTH_DSP_VALUEHL 
5398 cd 4d 22			call macro_dsp_valuehl 
539b				endm 
# End of macro FORTH_DSP_VALUEHL
539b			 
539b				; calc block address 
539b			 
539b eb				ex de, hl 
539c 3e 40			ld a, STORE_BLOCK_PHY 
539e cd 61 0f			call Mult16 
53a1			 
53a1 e5				push hl         ; address 
53a2			 
53a2				FORTH_DSP_POP 
53a2 cd 05 23			call macro_forth_dsp_pop 
53a5				endm 
# End of macro FORTH_DSP_POP
53a5			 
53a5				FORTH_DSP_VALUEHL 
53a5 cd 4d 22			call macro_dsp_valuehl 
53a8				endm 
# End of macro FORTH_DSP_VALUEHL
53a8			 
53a8				FORTH_DSP_POP 
53a8 cd 05 23			call macro_forth_dsp_pop 
53ab				endm 
# End of macro FORTH_DSP_POP
53ab			 
53ab cd b0 0c			call storage_clear_page 
53ae			 
53ae				; copy string to store page 
53ae			 
53ae e5				push hl     ; save string address 
53af			 
53af 3e 00			ld a, 0 
53b1 cd 4f 13			call strlent 
53b4			 
53b4 23				inc hl 
53b5			 
53b5 4d				ld c, l 
53b6 06 00			ld b, 0 
53b8			 
53b8 e1				pop hl 
53b9 11 b1 f9			ld de, store_page + 2 
53bc					if DEBUG_FORTH_WORDS 
53bc						DMARK "BW1" 
53bc f5				push af  
53bd 3a d1 53			ld a, (.dmark)  
53c0 32 a0 fd			ld (debug_mark),a  
53c3 3a d2 53			ld a, (.dmark+1)  
53c6 32 a1 fd			ld (debug_mark+1),a  
53c9 3a d3 53			ld a, (.dmark+2)  
53cc 32 a2 fd			ld (debug_mark+2),a  
53cf 18 03			jr .pastdmark  
53d1 ..			.dmark: db "BW1"  
53d4 f1			.pastdmark: pop af  
53d5			endm  
# End of macro DMARK
53d5						CALLMONITOR 
53d5 cd aa fd			call debug_vector  
53d8				endm  
# End of macro CALLMONITOR
53d8					endif 
53d8 ed b0			ldir 
53da			 
53da			 
53da				; poke the start of the block with flags to prevent high level file ops hitting the block 
53da			 
53da 21 ff ff			ld hl, $ffff 
53dd			 
53dd 22 af f9			ld (store_page), hl	 
53e0				 
53e0 e1				pop hl    ; get address 
53e1 11 af f9			ld de, store_page 
53e4			 
53e4					if DEBUG_FORTH_WORDS 
53e4						DMARK "BW2" 
53e4 f5				push af  
53e5 3a f9 53			ld a, (.dmark)  
53e8 32 a0 fd			ld (debug_mark),a  
53eb 3a fa 53			ld a, (.dmark+1)  
53ee 32 a1 fd			ld (debug_mark+1),a  
53f1 3a fb 53			ld a, (.dmark+2)  
53f4 32 a2 fd			ld (debug_mark+2),a  
53f7 18 03			jr .pastdmark  
53f9 ..			.dmark: db "BW2"  
53fc f1			.pastdmark: pop af  
53fd			endm  
# End of macro DMARK
53fd						CALLMONITOR 
53fd cd aa fd			call debug_vector  
5400				endm  
# End of macro CALLMONITOR
5400					endif 
5400			 
5400 cd d9 04			call storage_write_block 
5403			 
5403					NEXTW 
5403 c3 39 24			jp macro_next 
5406				endm 
# End of macro NEXTW
5406			 
5406			.BUPD: 
5406				CWHEAD .BYID 38 "BUPD" 4 WORD_FLAG_CODE 
5406 3a				db WORD_SYS_CORE+38             
5407 5c 54			dw .BYID            
5409 05				db 4 + 1 
540a .. 00			db "BUPD",0              
540f				endm 
# End of macro CWHEAD
540f			; | BUPD ( u -- ) Lowlevel storage word. Write the contents of the current file system storage buffer directly to page id u | DONE 
540f			; | | Coupled with the use of the BREAD, BWRITE and STOREPAGE words it is possible to implement a direct 
540f			; | | or completely different file system structure. 
540f			; | | > [!NOTE] 
540f			; | | > Compatible with PicoSPINet  
540f			 
540f					if DEBUG_FORTH_WORDS_KEY 
540f						DMARK "BUD" 
540f f5				push af  
5410 3a 24 54			ld a, (.dmark)  
5413 32 a0 fd			ld (debug_mark),a  
5416 3a 25 54			ld a, (.dmark+1)  
5419 32 a1 fd			ld (debug_mark+1),a  
541c 3a 26 54			ld a, (.dmark+2)  
541f 32 a2 fd			ld (debug_mark+2),a  
5422 18 03			jr .pastdmark  
5424 ..			.dmark: db "BUD"  
5427 f1			.pastdmark: pop af  
5428			endm  
# End of macro DMARK
5428						CALLMONITOR 
5428 cd aa fd			call debug_vector  
542b				endm  
# End of macro CALLMONITOR
542b					endif 
542b			 
542b				FORTH_DSP_VALUEHL 
542b cd 4d 22			call macro_dsp_valuehl 
542e				endm 
# End of macro FORTH_DSP_VALUEHL
542e			 
542e				; calc block address 
542e			 
542e eb				ex de, hl 
542f 3e 40			ld a, STORE_BLOCK_PHY 
5431 cd 61 0f			call Mult16 
5434			 
5434				FORTH_DSP_POP 
5434 cd 05 23			call macro_forth_dsp_pop 
5437				endm 
# End of macro FORTH_DSP_POP
5437			 
5437			 
5437 11 af f9			ld de, store_page 
543a			 
543a					if DEBUG_FORTH_WORDS 
543a						DMARK "BUe" 
543a f5				push af  
543b 3a 4f 54			ld a, (.dmark)  
543e 32 a0 fd			ld (debug_mark),a  
5441 3a 50 54			ld a, (.dmark+1)  
5444 32 a1 fd			ld (debug_mark+1),a  
5447 3a 51 54			ld a, (.dmark+2)  
544a 32 a2 fd			ld (debug_mark+2),a  
544d 18 03			jr .pastdmark  
544f ..			.dmark: db "BUe"  
5452 f1			.pastdmark: pop af  
5453			endm  
# End of macro DMARK
5453						CALLMONITOR 
5453 cd aa fd			call debug_vector  
5456				endm  
# End of macro CALLMONITOR
5456					endif 
5456			 
5456 cd d9 04			call storage_write_block 
5459			 
5459					NEXTW 
5459 c3 39 24			jp macro_next 
545c				endm 
# End of macro NEXTW
545c			 
545c			.BYID: 
545c			;	CWHEAD .BYNAME 38 "BYID" 4 WORD_FLAG_CODE 
545c			;; > BYID ( u -- s ) Get the name of the file in the current BANK using the file ID u > TODO 
545c			; 
545c			;		 
545c			;		if DEBUG_FORTH_WORDS_KEY 
545c			;			DMARK "BYID" 
545c			;			CALLMONITOR 
545c			;		endif 
545c			; 
545c			;		; get direct address 
545c			; 
545c			;		FORTH_DSP_VALUEHL 
545c			; 
545c			;		FORTH_DSP_POP 
545c			; 
545c			;	; calc block address 
545c			; 
545c			;	ex de, hl 
545c			;	ld a, STORE_BLOCK_PHY 
545c			;	call Mult16 
545c			;	;	do BREAD with number as param 
545c			;	; push the file name	 
545c			;	ld de, store_page 
545c			;	call storage_read_block 
545c			 ;       ld hl, store_page+2 
545c			; 
545c			; 
545c			;		NEXTW 
545c			;.BYNAME: 
545c				CWHEAD .DIR 38 "GETID" 5 WORD_FLAG_CODE 
545c 3a				db WORD_SYS_CORE+38             
545d 75 54			dw .DIR            
545f 06				db 5 + 1 
5460 .. 00			db "GETID",0              
5466				endm 
# End of macro CWHEAD
5466			; | GETID ( s -- u ) Get the file ID in the current BANK of the file named s | DONE 
5466			; | | > [!NOTE] 
5466			; | | > Compatible with PicoSPINet  
5466			 
5466					; get pointer to file name to seek 
5466			 
5466					FORTH_DSP_VALUEHL 
5466 cd 4d 22			call macro_dsp_valuehl 
5469				endm 
# End of macro FORTH_DSP_VALUEHL
5469			 
5469			 
5469 cd 9b 03				call storage_getid  
546c			 
546c					FORTH_DSP_POP 
546c cd 05 23			call macro_forth_dsp_pop 
546f				endm 
# End of macro FORTH_DSP_POP
546f			 
546f cd 48 20				call forth_push_numhl 
5472			 
5472					NEXTW 
5472 c3 39 24			jp macro_next 
5475				endm 
# End of macro NEXTW
5475			; 
5475			.DIR: 
5475				CWHEAD .SAVE 38 "DIR" 3 WORD_FLAG_CODE 
5475 3a				db WORD_SYS_CORE+38             
5476 79 55			dw .SAVE            
5478 04				db 3 + 1 
5479 .. 00			db "DIR",0              
547d				endm 
# End of macro CWHEAD
547d			; | DIR ( u -- lab id ... c t ) Using bank number u push directory entries from persistent storage as w with count u  | DONE 
547d			; | | > [!NOTE] 
547d			; | | > Compatible with PicoSPINet  
547d			 
547d					if DEBUG_FORTH_WORDS_KEY 
547d						DMARK "DIR" 
547d f5				push af  
547e 3a 92 54			ld a, (.dmark)  
5481 32 a0 fd			ld (debug_mark),a  
5484 3a 93 54			ld a, (.dmark+1)  
5487 32 a1 fd			ld (debug_mark+1),a  
548a 3a 94 54			ld a, (.dmark+2)  
548d 32 a2 fd			ld (debug_mark+2),a  
5490 18 03			jr .pastdmark  
5492 ..			.dmark: db "DIR"  
5495 f1			.pastdmark: pop af  
5496			endm  
# End of macro DMARK
5496						CALLMONITOR 
5496 cd aa fd			call debug_vector  
5499				endm  
# End of macro CALLMONITOR
5499					endif 
5499 cd 25 05			call storage_get_block_0 
549c			 
549c 21 af f9			ld hl, store_page     ; get current id count 
549f 46				ld b, (hl) 
54a0 0e 00			ld c, 0    ; count of files   
54a2					if DEBUG_FORTH_WORDS 
54a2						DMARK "DI1" 
54a2 f5				push af  
54a3 3a b7 54			ld a, (.dmark)  
54a6 32 a0 fd			ld (debug_mark),a  
54a9 3a b8 54			ld a, (.dmark+1)  
54ac 32 a1 fd			ld (debug_mark+1),a  
54af 3a b9 54			ld a, (.dmark+2)  
54b2 32 a2 fd			ld (debug_mark+2),a  
54b5 18 03			jr .pastdmark  
54b7 ..			.dmark: db "DI1"  
54ba f1			.pastdmark: pop af  
54bb			endm  
# End of macro DMARK
54bb						CALLMONITOR 
54bb cd aa fd			call debug_vector  
54be				endm  
# End of macro CALLMONITOR
54be					endif 
54be			 
54be				; check for empty drive 
54be			 
54be 3e 00			ld a, 0 
54c0 b8				cp b 
54c1 ca 2f 55			jp z, .dirdone 
54c4			 
54c4				; for each of the current ids do a search for them and if found push to stack 
54c4			 
54c4 c5			.diritem:	push bc 
54c5 21 40 00				ld hl, STORE_BLOCK_PHY 
54c8 16 00				ld d, 0		 ; look for extent 0 of block id as this contains file name 
54ca 58					ld e,b 
54cb			 
54cb			;		if DEBUG_FORTH_WORDS 
54cb			;			DMARK "DI2" 
54cb			;			CALLMONITOR 
54cb			;		endif 
54cb			 
54cb cd a7 07				call storage_findnextid 
54ce			 
54ce			;		if DEBUG_FORTH_WORDS 
54ce			;			DMARK "DI3" 
54ce			;			CALLMONITOR 
54ce			;		endif 
54ce			 
54ce					; if found hl will be non zero 
54ce			 
54ce cd 07 10				call ishlzero 
54d1			;		ld a, l 
54d1			;		add h 
54d1			; 
54d1			;		cp 0 
54d1 28 59				jr z, .dirnotfound 
54d3			 
54d3					; increase count 
54d3			 
54d3 c1					pop bc	 
54d4 0c					inc c 
54d5 c5					push bc 
54d6					 
54d6			 
54d6					; get file header and push the file name 
54d6			 
54d6 11 af f9				ld de, store_page 
54d9 cd 74 04				call storage_read_block 
54dc			 
54dc					; push file id to stack 
54dc				 
54dc 3a af f9				ld a, (store_page) 
54df 26 00				ld h, 0 
54e1 6f					ld l, a 
54e2 cd 48 20				call forth_push_numhl 
54e5			 
54e5					; push extent count to stack  
54e5				 
54e5 3a b1 f9				ld a, (store_page+2) 
54e8 26 00				ld h, 0 
54ea 6f					ld l, a 
54eb cd 48 20				call forth_push_numhl 
54ee			 
54ee					; push file name 
54ee			 
54ee 21 b2 f9				ld hl, store_page+3 
54f1					if DEBUG_FORTH_WORDS 
54f1						DMARK "DI5" 
54f1 f5				push af  
54f2 3a 06 55			ld a, (.dmark)  
54f5 32 a0 fd			ld (debug_mark),a  
54f8 3a 07 55			ld a, (.dmark+1)  
54fb 32 a1 fd			ld (debug_mark+1),a  
54fe 3a 08 55			ld a, (.dmark+2)  
5501 32 a2 fd			ld (debug_mark+2),a  
5504 18 03			jr .pastdmark  
5506 ..			.dmark: db "DI5"  
5509 f1			.pastdmark: pop af  
550a			endm  
# End of macro DMARK
550a						CALLMONITOR 
550a cd aa fd			call debug_vector  
550d				endm  
# End of macro CALLMONITOR
550d					endif 
550d cd b6 20				call forth_push_str 
5510					if DEBUG_FORTH_WORDS 
5510						DMARK "DI6" 
5510 f5				push af  
5511 3a 25 55			ld a, (.dmark)  
5514 32 a0 fd			ld (debug_mark),a  
5517 3a 26 55			ld a, (.dmark+1)  
551a 32 a1 fd			ld (debug_mark+1),a  
551d 3a 27 55			ld a, (.dmark+2)  
5520 32 a2 fd			ld (debug_mark+2),a  
5523 18 03			jr .pastdmark  
5525 ..			.dmark: db "DI6"  
5528 f1			.pastdmark: pop af  
5529			endm  
# End of macro DMARK
5529						CALLMONITOR 
5529 cd aa fd			call debug_vector  
552c				endm  
# End of macro CALLMONITOR
552c					endif 
552c			.dirnotfound: 
552c c1					pop bc     
552d 10 95				djnz .diritem 
552f				 
552f			.dirdone:	 
552f					if DEBUG_FORTH_WORDS 
552f						DMARK "DI7" 
552f f5				push af  
5530 3a 44 55			ld a, (.dmark)  
5533 32 a0 fd			ld (debug_mark),a  
5536 3a 45 55			ld a, (.dmark+1)  
5539 32 a1 fd			ld (debug_mark+1),a  
553c 3a 46 55			ld a, (.dmark+2)  
553f 32 a2 fd			ld (debug_mark+2),a  
5542 18 03			jr .pastdmark  
5544 ..			.dmark: db "DI7"  
5547 f1			.pastdmark: pop af  
5548			endm  
# End of macro DMARK
5548						CALLMONITOR 
5548 cd aa fd			call debug_vector  
554b				endm  
# End of macro CALLMONITOR
554b					endif 
554b			 
554b					; push a count of the dir items found 
554b			 
554b 26 00				ld h, 0 
554d 69					ld l, c 
554e cd 48 20				call forth_push_numhl 
5551			 
5551					; push the bank label 
5551			 
5551 cd 25 05				call storage_get_block_0 
5554			 
5554				 
5554 21 b2 f9		 		ld hl, store_page+3 
5557			 
5557					if DEBUG_FORTH_WORDS 
5557						DMARK "DI8" 
5557 f5				push af  
5558 3a 6c 55			ld a, (.dmark)  
555b 32 a0 fd			ld (debug_mark),a  
555e 3a 6d 55			ld a, (.dmark+1)  
5561 32 a1 fd			ld (debug_mark+1),a  
5564 3a 6e 55			ld a, (.dmark+2)  
5567 32 a2 fd			ld (debug_mark+2),a  
556a 18 03			jr .pastdmark  
556c ..			.dmark: db "DI8"  
556f f1			.pastdmark: pop af  
5570			endm  
# End of macro DMARK
5570						CALLMONITOR 
5570 cd aa fd			call debug_vector  
5573				endm  
# End of macro CALLMONITOR
5573					endif 
5573 cd b6 20				call forth_push_str 
5576			 
5576			 
5576				 
5576					NEXTW 
5576 c3 39 24			jp macro_next 
5579				endm 
# End of macro NEXTW
5579			.SAVE: 
5579			;	CWHEAD .LOAD 39 "SAVE" 4 WORD_FLAG_CODE 
5579			;; > SAVE  ( w u -- )    Save user word memory to file name w on bank u > TODO 
5579			;		NEXTW 
5579			;.LOAD: 
5579			;	CWHEAD .BSAVE 40 "LOAD" 4 WORD_FLAG_CODE 
5579			;; > LOAD ( u -- )    Load user word memory from file id on current bank > TODO 
5579			;; > > The indivdual records being loaded can be both uword word difintions or interactive commands. 
5579			;; > > The LOAD command can not be used in any user words or compound lines. 
5579			; 
5579			;		; store_openext use it. If zero it is EOF 
5579			; 
5579			;		; read block from current stream id 
5579			;		; if the block does not contain zero term keep reading blocks until zero found 
5579			;		; push the block to stack 
5579			;		; save the block id to stream 
5579			; 
5579			; 
5579			;		FORTH_DSP_VALUEHL 
5579			; 
5579			;;		push hl 
5579			; 
5579			;	if DEBUG_STORESE 
5579			;		DMARK "LOA" 
5579			;		CALLMONITOR 
5579			;	endif 
5579			;		FORTH_DSP_POP 
5579			; 
5579			;;		pop hl 
5579			; 
5579			;		ld h, l 
5579			;		ld l, 0 
5579			; 
5579			;		push hl     ; stack holds current file id and extent to work with 
5579			; 
5579			; 
5579			;		ld de, store_page      ; get block zero of file 
5579			;	if DEBUG_STORESE 
5579			;		DMARK "LO0" 
5579			;		CALLMONITOR 
5579			;	endif 
5579			;		call storage_read 
5579			; 
5579			;		ld a, (store_page+2)    ; max extents for this file 
5579			;		ld  (store_openmaxext),a   ; get our limit 
5579			; 
5579			;	if DEBUG_STORESE 
5579			;		DMARK "LOE" 
5579			;		CALLMONITOR 
5579			;	endif 
5579			; 
5579			;; TODO dont know why max extents are not present 
5579			;;		cp 0 
5579			;;		jp z, .loadeof     ; dont read past eof 
5579			; 
5579			;;		ld a, 1   ; start from the head of the file 
5579			; 
5579			;.loadline:	pop hl 
5579			;		inc hl 
5579			;		ld  a, (store_openmaxext)   ; get our limit 
5579			;	if DEBUG_STORESE 
5579			;		DMARK "LOx" 
5579			;		CALLMONITOR 
5579			;	endif 
5579			;		inc a 
5579			;		cp l 
5579			;		jp z, .loadeof 
5579			;		push hl    ; save current extent 
5579			; 
5579			;		ld de, store_page 
5579			; 
5579			;	if DEBUG_STORESE 
5579			;		DMARK "LO1" 
5579			;		CALLMONITOR 
5579			;	endif 
5579			;		call storage_read 
5579			; 
5579			;	if DEBUG_STORESE 
5579			;		DMARK "LO2" 
5579			;		CALLMONITOR 
5579			;	endif 
5579			;	call ishlzero 
5579			;	ld a, l 
5579			;	add h 
5579			;	cp 0 
5579			;	jr z, .loadeof 
5579			; 
5579			;	; not eof so hl should point to data to exec 
5579			; 
5579			;	; will need to add the FORTH_END_BUFFER flag 
5579			 ; 
5579			;	ld hl, store_page+2 
5579			;	ld bc, 255 
5579			;	ld a, 0 
5579			;	cpir 
5579			;	if DEBUG_STORESE 
5579			;		DMARK "LOt" 
5579			;		CALLMONITOR 
5579			;	endif 
5579			;	dec hl 
5579			;	ld a, ' ' 
5579			;	ld (hl), a 
5579			;	inc hl 
5579			;	ld (hl), a 
5579			;	inc hl 
5579			;	ld (hl), a 
5579			;	inc hl 
5579			;	ld a, FORTH_END_BUFFER 
5579			;	ld (hl), a 
5579			; 
5579			;	; TODO handle more than a single block read 
5579			; 
5579			; 
5579			;	ld hl, store_page+2 
5579			; 
5579			;	ld (os_tok_ptr), hl 
5579			; 
5579			;	if DEBUG_STORESE 
5579			;		DMARK "LO3" 
5579			;		CALLMONITOR 
5579			;	endif 
5579			; 
5579			;	call forthparse 
5579			;	call forthexec 
5579			;	call forthexec_cleanup 
5579			; 
5579			;	; go to next extent 
5579			; 
5579			;	; get next block  or mark as eof 
5579			;	jp .loadline 
5579			; 
5579			; 
5579			; 
5579			;	       NEXTW 
5579			;.loadeof:	ld a, 0 
5579			;		ld (store_openext), a 
5579			; 
5579			;	if DEBUG_STORESE 
5579			;		DMARK "LOF" 
5579			;		CALLMONITOR 
5579			;	endif 
5579			;		ret 
5579			;		;NEXTW 
5579			;.BSAVE:   
5579			; 
5579			;	CWHEAD .BLOAD 70 "BSAVE" 5 WORD_FLAG_CODE 
5579			;; > BSAVE  ( w u a s -- )    Save binary file to file name w on bank u starting at address a for s bytes > TODO 
5579			;		NEXTW 
5579			;.BLOAD: 
5579			;	CWHEAD .SEO 71 "BLOAD" 5 WORD_FLAG_CODE 
5579			;; > BLOAD ( w u a -- )    Load binary file from file name w on bank u into address u > TODO 
5579			;		NEXTW 
5579			;;;; counter gap 
5579			 
5579			 
5579			.SEO: 
5579				CWHEAD .SEI 80 "SEO" 3 WORD_FLAG_CODE 
5579 64				db WORD_SYS_CORE+80             
557a 98 55			dw .SEI            
557c 04				db 3 + 1 
557d .. 00			db "SEO",0              
5581				endm 
# End of macro CWHEAD
5581			; | SEO ( u1 u2 -- ) Send byte u1 to Serial EEPROM device at address u2 | DONE 
5581			 
5581					; get port 
5581			 
5581					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5581 cd 4d 22			call macro_dsp_valuehl 
5584				endm 
# End of macro FORTH_DSP_VALUEHL
5584			 
5584 e5					push hl    ; u2 - byte 
5585			 
5585					; destroy value TOS 
5585			 
5585					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5585 cd 05 23			call macro_forth_dsp_pop 
5588				endm 
# End of macro FORTH_DSP_POP
5588			 
5588					; get byte to send 
5588			 
5588					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5588 cd 4d 22			call macro_dsp_valuehl 
558b				endm 
# End of macro FORTH_DSP_VALUEHL
558b			 
558b e5					push hl    ; u1 - addr 
558c			 
558c					; destroy value TOS 
558c			 
558c					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
558c cd 05 23			call macro_forth_dsp_pop 
558f				endm 
# End of macro FORTH_DSP_POP
558f			 
558f					; one value on hl get other one back 
558f			 
558f d1					pop de   ; u1 - byte 
5590			 
5590 e1					pop hl   ; u2 - addr 
5591			 
5591					; TODO Send SPI byte 
5591			 
5591			 
5591 7b					ld a, e 
5592 cd 79 02				call se_writebyte 
5595			 
5595					 
5595			 
5595					NEXTW 
5595 c3 39 24			jp macro_next 
5598				endm 
# End of macro NEXTW
5598			 
5598			.SEI: 
5598				CWHEAD .SFREE 81 "SEI" 3 WORD_FLAG_CODE 
5598 65				db WORD_SYS_CORE+81             
5599 b2 55			dw .SFREE            
559b 04				db 3 + 1 
559c .. 00			db "SEI",0              
55a0				endm 
# End of macro CWHEAD
55a0			; | SEI ( u2 -- u1 ) Get a byte from Serial EEPROM device at address u2 | DONE 
55a0			 
55a0					; get port 
55a0			 
55a0					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
55a0 cd 4d 22			call macro_dsp_valuehl 
55a3				endm 
# End of macro FORTH_DSP_VALUEHL
55a3			 
55a3			;		push hl 
55a3			 
55a3					; destroy value TOS 
55a3			 
55a3					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
55a3 cd 05 23			call macro_forth_dsp_pop 
55a6				endm 
# End of macro FORTH_DSP_POP
55a6			 
55a6					; one value on hl get other one back 
55a6			 
55a6			;		pop hl 
55a6			 
55a6			 
55a6					; TODO Get SPI byte 
55a6			 
55a6 cd 1b 03				call se_readbyte 
55a9			 
55a9 26 00				ld h, 0 
55ab 6f					ld l, a 
55ac cd 48 20				call forth_push_numhl 
55af			 
55af					NEXTW 
55af c3 39 24			jp macro_next 
55b2				endm 
# End of macro NEXTW
55b2			 
55b2			.SFREE: 
55b2				CWHEAD .SIZE 83 "FFREE" 5 WORD_FLAG_CODE 
55b2 67				db WORD_SYS_CORE+83             
55b3 e1 55			dw .SIZE            
55b5 06				db 5 + 1 
55b6 .. 00			db "FFREE",0              
55bc				endm 
# End of macro CWHEAD
55bc			; | FFREE ( -- n )  Gets number of free file blocks on current storage bank | DONE 
55bc			; | | > [!NOTE] 
55bc			; | | > Compatible with PicoSPINet  
55bc					if DEBUG_FORTH_WORDS_KEY 
55bc						DMARK "FFR" 
55bc f5				push af  
55bd 3a d1 55			ld a, (.dmark)  
55c0 32 a0 fd			ld (debug_mark),a  
55c3 3a d2 55			ld a, (.dmark+1)  
55c6 32 a1 fd			ld (debug_mark+1),a  
55c9 3a d3 55			ld a, (.dmark+2)  
55cc 32 a2 fd			ld (debug_mark+2),a  
55cf 18 03			jr .pastdmark  
55d1 ..			.dmark: db "FFR"  
55d4 f1			.pastdmark: pop af  
55d5			endm  
# End of macro DMARK
55d5						CALLMONITOR 
55d5 cd aa fd			call debug_vector  
55d8				endm  
# End of macro CALLMONITOR
55d8					endif 
55d8			 
55d8 cd 41 08				call storage_freeblocks 
55db			 
55db cd 48 20				call forth_push_numhl 
55de			 
55de				       NEXTW 
55de c3 39 24			jp macro_next 
55e1				endm 
# End of macro NEXTW
55e1			.SIZE: 
55e1				CWHEAD .CREATE 83 "SIZE" 4 WORD_FLAG_CODE 
55e1 67				db WORD_SYS_CORE+83             
55e2 15 56			dw .CREATE            
55e4 05				db 4 + 1 
55e5 .. 00			db "SIZE",0              
55ea				endm 
# End of macro CWHEAD
55ea			; | SIZE ( u -- n )  Gets number of blocks used by file id u and push to stack | DONE 
55ea			; | | > [!NOTE] 
55ea			; | | > Compatible with PicoSPINet  
55ea					if DEBUG_FORTH_WORDS_KEY 
55ea						DMARK "SIZ" 
55ea f5				push af  
55eb 3a ff 55			ld a, (.dmark)  
55ee 32 a0 fd			ld (debug_mark),a  
55f1 3a 00 56			ld a, (.dmark+1)  
55f4 32 a1 fd			ld (debug_mark+1),a  
55f7 3a 01 56			ld a, (.dmark+2)  
55fa 32 a2 fd			ld (debug_mark+2),a  
55fd 18 03			jr .pastdmark  
55ff ..			.dmark: db "SIZ"  
5602 f1			.pastdmark: pop af  
5603			endm  
# End of macro DMARK
5603						CALLMONITOR 
5603 cd aa fd			call debug_vector  
5606				endm  
# End of macro CALLMONITOR
5606					endif 
5606			 
5606					FORTH_DSP_VALUEHL 
5606 cd 4d 22			call macro_dsp_valuehl 
5609				endm 
# End of macro FORTH_DSP_VALUEHL
5609			;		push hl 
5609					FORTH_DSP_POP 
5609 cd 05 23			call macro_forth_dsp_pop 
560c				endm 
# End of macro FORTH_DSP_POP
560c			;		pop hl 
560c cd a3 04				call storage_file_size 
560f			 
560f cd 48 20				call forth_push_numhl 
5612			  
5612			 
5612				       NEXTW 
5612 c3 39 24			jp macro_next 
5615				endm 
# End of macro NEXTW
5615			 
5615			.CREATE: 
5615				CWHEAD .APPEND 84 "CREATE" 6 WORD_FLAG_CODE 
5615 68				db WORD_SYS_CORE+84             
5616 83 56			dw .APPEND            
5618 07				db 6 + 1 
5619 .. 00			db "CREATE",0              
5620				endm 
# End of macro CWHEAD
5620			; | CREATE ( u -- n )  Creates a file with name u on current storage bank and pushes the file id number to TOS | DONE 
5620			; | | e.g.  
5620			; | | TestProgram CREATE 
5620			; | | Top of stack will then be the file ID which needs to be used in all file handling words 
5620			; | |  
5620			; | | Max file IDs are 255. 
5620			; | |  
5620			; | | > [!NOTE] 
5620			; | | > Compatible with PicoSPINet  
5620					 
5620					if DEBUG_FORTH_WORDS_KEY 
5620						DMARK "CRT" 
5620 f5				push af  
5621 3a 35 56			ld a, (.dmark)  
5624 32 a0 fd			ld (debug_mark),a  
5627 3a 36 56			ld a, (.dmark+1)  
562a 32 a1 fd			ld (debug_mark+1),a  
562d 3a 37 56			ld a, (.dmark+2)  
5630 32 a2 fd			ld (debug_mark+2),a  
5633 18 03			jr .pastdmark  
5635 ..			.dmark: db "CRT"  
5638 f1			.pastdmark: pop af  
5639			endm  
# End of macro DMARK
5639						CALLMONITOR 
5639 cd aa fd			call debug_vector  
563c				endm  
# End of macro CALLMONITOR
563c					endif 
563c			;		call storage_get_block_0 
563c			 
563c					; TODO pop hl 
563c			 
563c					;v5 FORTH_DSP_VALUE 
563c					FORTH_DSP_VALUE 
563c cd 36 22			call macro_forth_dsp_value 
563f				endm 
# End of macro FORTH_DSP_VALUE
563f			 
563f				if DEBUG_STORESE 
563f					DMARK "CR1" 
563f f5				push af  
5640 3a 54 56			ld a, (.dmark)  
5643 32 a0 fd			ld (debug_mark),a  
5646 3a 55 56			ld a, (.dmark+1)  
5649 32 a1 fd			ld (debug_mark+1),a  
564c 3a 56 56			ld a, (.dmark+2)  
564f 32 a2 fd			ld (debug_mark+2),a  
5652 18 03			jr .pastdmark  
5654 ..			.dmark: db "CR1"  
5657 f1			.pastdmark: pop af  
5658			endm  
# End of macro DMARK
5658					CALLMONITOR 
5658 cd aa fd			call debug_vector  
565b				endm  
# End of macro CALLMONITOR
565b				endif 
565b			;		push hl 
565b			;		FORTH_DSP_POP 
565b			;		pop hl 
565b			 
565b			;		inc hl   ; move past the type marker 
565b			 
565b cd 77 08				call storage_create 
565e			 
565e				if DEBUG_STORESE 
565e					DMARK "CT1" 
565e f5				push af  
565f 3a 73 56			ld a, (.dmark)  
5662 32 a0 fd			ld (debug_mark),a  
5665 3a 74 56			ld a, (.dmark+1)  
5668 32 a1 fd			ld (debug_mark+1),a  
566b 3a 75 56			ld a, (.dmark+2)  
566e 32 a2 fd			ld (debug_mark+2),a  
5671 18 03			jr .pastdmark  
5673 ..			.dmark: db "CT1"  
5676 f1			.pastdmark: pop af  
5677			endm  
# End of macro DMARK
5677					CALLMONITOR 
5677 cd aa fd			call debug_vector  
567a				endm  
# End of macro CALLMONITOR
567a				endif 
567a			;		push hl 
567a					FORTH_DSP_POP 
567a cd 05 23			call macro_forth_dsp_pop 
567d				endm 
# End of macro FORTH_DSP_POP
567d			;		pop hl 
567d					; push file id to stack 
567d cd 48 20				call forth_push_numhl 
5680			 
5680			 
5680			 
5680				       NEXTW 
5680 c3 39 24			jp macro_next 
5683				endm 
# End of macro NEXTW
5683			 
5683			.APPEND: 
5683				CWHEAD .SDEL 85 "APPEND" 6 WORD_FLAG_CODE 
5683 69				db WORD_SYS_CORE+85             
5684 14 57			dw .SDEL            
5686 07				db 6 + 1 
5687 .. 00			db "APPEND",0              
568e				endm 
# End of macro CWHEAD
568e			; | APPEND ( u n --  )  Appends data u to file id on current storage bank | DONE 
568e			; | | e.g. 
568e			; | | Test CREATE      -> $01 
568e			; | | "A string to add to file" $01 APPEND 
568e			; | |  
568e			; | | The maximum file size currently using 32k serial EEPROMS using 64 byte blocks is 15k. 
568e			; | | > [!NOTE] 
568e			; | | > Compatible with PicoSPINet  
568e					if DEBUG_FORTH_WORDS_KEY 
568e						DMARK "APP" 
568e f5				push af  
568f 3a a3 56			ld a, (.dmark)  
5692 32 a0 fd			ld (debug_mark),a  
5695 3a a4 56			ld a, (.dmark+1)  
5698 32 a1 fd			ld (debug_mark+1),a  
569b 3a a5 56			ld a, (.dmark+2)  
569e 32 a2 fd			ld (debug_mark+2),a  
56a1 18 03			jr .pastdmark  
56a3 ..			.dmark: db "APP"  
56a6 f1			.pastdmark: pop af  
56a7			endm  
# End of macro DMARK
56a7						CALLMONITOR 
56a7 cd aa fd			call debug_vector  
56aa				endm  
# End of macro CALLMONITOR
56aa					endif 
56aa			 
56aa					FORTH_DSP_VALUEHL 
56aa cd 4d 22			call macro_dsp_valuehl 
56ad				endm 
# End of macro FORTH_DSP_VALUEHL
56ad e5					push hl 	; save file id 
56ae			 
56ae				if DEBUG_STORESE 
56ae					DMARK "AP1" 
56ae f5				push af  
56af 3a c3 56			ld a, (.dmark)  
56b2 32 a0 fd			ld (debug_mark),a  
56b5 3a c4 56			ld a, (.dmark+1)  
56b8 32 a1 fd			ld (debug_mark+1),a  
56bb 3a c5 56			ld a, (.dmark+2)  
56be 32 a2 fd			ld (debug_mark+2),a  
56c1 18 03			jr .pastdmark  
56c3 ..			.dmark: db "AP1"  
56c6 f1			.pastdmark: pop af  
56c7			endm  
# End of macro DMARK
56c7					CALLMONITOR 
56c7 cd aa fd			call debug_vector  
56ca				endm  
# End of macro CALLMONITOR
56ca				endif 
56ca					FORTH_DSP_POP 
56ca cd 05 23			call macro_forth_dsp_pop 
56cd				endm 
# End of macro FORTH_DSP_POP
56cd			 
56cd					FORTH_DSP_VALUEHL 
56cd cd 4d 22			call macro_dsp_valuehl 
56d0				endm 
# End of macro FORTH_DSP_VALUEHL
56d0					;v5 FORTH_DSP_VALUE 
56d0 e5					push hl 	; save ptr to string to save 
56d1			 
56d1				if DEBUG_STORESE 
56d1					DMARK "AP1" 
56d1 f5				push af  
56d2 3a e6 56			ld a, (.dmark)  
56d5 32 a0 fd			ld (debug_mark),a  
56d8 3a e7 56			ld a, (.dmark+1)  
56db 32 a1 fd			ld (debug_mark+1),a  
56de 3a e8 56			ld a, (.dmark+2)  
56e1 32 a2 fd			ld (debug_mark+2),a  
56e4 18 03			jr .pastdmark  
56e6 ..			.dmark: db "AP1"  
56e9 f1			.pastdmark: pop af  
56ea			endm  
# End of macro DMARK
56ea					CALLMONITOR 
56ea cd aa fd			call debug_vector  
56ed				endm  
# End of macro CALLMONITOR
56ed				endif 
56ed					FORTH_DSP_POP 
56ed cd 05 23			call macro_forth_dsp_pop 
56f0				endm 
# End of macro FORTH_DSP_POP
56f0			 
56f0 d1					pop de 
56f1 e1					pop hl 
56f2				if DEBUG_STORESE 
56f2					DMARK "AP2" 
56f2 f5				push af  
56f3 3a 07 57			ld a, (.dmark)  
56f6 32 a0 fd			ld (debug_mark),a  
56f9 3a 08 57			ld a, (.dmark+1)  
56fc 32 a1 fd			ld (debug_mark+1),a  
56ff 3a 09 57			ld a, (.dmark+2)  
5702 32 a2 fd			ld (debug_mark+2),a  
5705 18 03			jr .pastdmark  
5707 ..			.dmark: db "AP2"  
570a f1			.pastdmark: pop af  
570b			endm  
# End of macro DMARK
570b					CALLMONITOR 
570b cd aa fd			call debug_vector  
570e				endm  
# End of macro CALLMONITOR
570e				endif 
570e					;inc de ; skip var type indicator 
570e			 
570e					; TODO how to append numerics???? 
570e			 
570e cd 64 0b				call storage_append		 
5711			 
5711				       NEXTW 
5711 c3 39 24			jp macro_next 
5714				endm 
# End of macro NEXTW
5714			.SDEL: 
5714				CWHEAD .OPEN 86 "ERA" 4 WORD_FLAG_CODE 
5714 6a				db WORD_SYS_CORE+86             
5715 60 57			dw .OPEN            
5717 05				db 4 + 1 
5718 .. 00			db "ERA",0              
571c				endm 
# End of macro CWHEAD
571c			; | ERA ( n --  )  Deletes all data for file id n on current storage bank | DONE 
571c			; | | > [!NOTE] 
571c			; | | > Compatible with PicoSPINet  
571c					FORTH_DSP_VALUEHL 
571c cd 4d 22			call macro_dsp_valuehl 
571f				endm 
# End of macro FORTH_DSP_VALUEHL
571f			;		push hl 	; save file id 
571f			 
571f					if DEBUG_FORTH_WORDS_KEY 
571f						DMARK "ERA" 
571f f5				push af  
5720 3a 34 57			ld a, (.dmark)  
5723 32 a0 fd			ld (debug_mark),a  
5726 3a 35 57			ld a, (.dmark+1)  
5729 32 a1 fd			ld (debug_mark+1),a  
572c 3a 36 57			ld a, (.dmark+2)  
572f 32 a2 fd			ld (debug_mark+2),a  
5732 18 03			jr .pastdmark  
5734 ..			.dmark: db "ERA"  
5737 f1			.pastdmark: pop af  
5738			endm  
# End of macro DMARK
5738						CALLMONITOR 
5738 cd aa fd			call debug_vector  
573b				endm  
# End of macro CALLMONITOR
573b					endif 
573b				if DEBUG_STORESE 
573b					DMARK "ER1" 
573b f5				push af  
573c 3a 50 57			ld a, (.dmark)  
573f 32 a0 fd			ld (debug_mark),a  
5742 3a 51 57			ld a, (.dmark+1)  
5745 32 a1 fd			ld (debug_mark+1),a  
5748 3a 52 57			ld a, (.dmark+2)  
574b 32 a2 fd			ld (debug_mark+2),a  
574e 18 03			jr .pastdmark  
5750 ..			.dmark: db "ER1"  
5753 f1			.pastdmark: pop af  
5754			endm  
# End of macro DMARK
5754					CALLMONITOR 
5754 cd aa fd			call debug_vector  
5757				endm  
# End of macro CALLMONITOR
5757				endif 
5757					FORTH_DSP_POP 
5757 cd 05 23			call macro_forth_dsp_pop 
575a				endm 
# End of macro FORTH_DSP_POP
575a			 
575a			;		pop hl 
575a			 
575a cd b6 06				call storage_erase 
575d				       NEXTW 
575d c3 39 24			jp macro_next 
5760				endm 
# End of macro NEXTW
5760			 
5760			.OPEN: 
5760				CWHEAD .READ 87 "OPEN" 4 WORD_FLAG_CODE 
5760 6b				db WORD_SYS_CORE+87             
5761 f4 57			dw .READ            
5763 05				db 4 + 1 
5764 .. 00			db "OPEN",0              
5769				endm 
# End of macro CWHEAD
5769			; | OPEN ( n -- n )  Sets file id to point to first data page for subsequent READs. Pushes the max number of blocks for this file | DONE 
5769			; | | e.g. 
5769			; | | $01 OPEN $01 DO $01 READ . LOOP 
5769			; | | 
5769			; | | Will return with 255 blocks if the file does not exist 
5769			; | | > [!NOTE] 
5769			; | | > Compatible with PicoSPINet  
5769			 
5769					if DEBUG_FORTH_WORDS_KEY 
5769						DMARK "OPN" 
5769 f5				push af  
576a 3a 7e 57			ld a, (.dmark)  
576d 32 a0 fd			ld (debug_mark),a  
5770 3a 7f 57			ld a, (.dmark+1)  
5773 32 a1 fd			ld (debug_mark+1),a  
5776 3a 80 57			ld a, (.dmark+2)  
5779 32 a2 fd			ld (debug_mark+2),a  
577c 18 03			jr .pastdmark  
577e ..			.dmark: db "OPN"  
5781 f1			.pastdmark: pop af  
5782			endm  
# End of macro DMARK
5782						CALLMONITOR 
5782 cd aa fd			call debug_vector  
5785				endm  
# End of macro CALLMONITOR
5785					endif 
5785					; TODO handle multiple file opens 
5785			 
5785 3e 01			       	ld a, 1 
5787 32 9f f9				ld (store_openext), a 
578a			 
578a					; get max extents for this file 
578a				 
578a								 
578a					FORTH_DSP_VALUEHL 
578a cd 4d 22			call macro_dsp_valuehl 
578d				endm 
# End of macro FORTH_DSP_VALUEHL
578d			 
578d 65					ld h, l 
578e 2e 00				ld l, 0 
5790			 
5790					; store file id 
5790			 
5790 7c					ld a, h 
5791 32 9c f9				ld (store_filecache), a 
5794			 
5794				if DEBUG_STORESE 
5794					DMARK "OPN" 
5794 f5				push af  
5795 3a a9 57			ld a, (.dmark)  
5798 32 a0 fd			ld (debug_mark),a  
579b 3a aa 57			ld a, (.dmark+1)  
579e 32 a1 fd			ld (debug_mark+1),a  
57a1 3a ab 57			ld a, (.dmark+2)  
57a4 32 a2 fd			ld (debug_mark+2),a  
57a7 18 03			jr .pastdmark  
57a9 ..			.dmark: db "OPN"  
57ac f1			.pastdmark: pop af  
57ad			endm  
# End of macro DMARK
57ad					CALLMONITOR 
57ad cd aa fd			call debug_vector  
57b0				endm  
# End of macro CALLMONITOR
57b0				endif 
57b0			;		push hl 
57b0					FORTH_DSP_POP     ; TODO for now just get rid of stream id 
57b0 cd 05 23			call macro_forth_dsp_pop 
57b3				endm 
# End of macro FORTH_DSP_POP
57b3			;		pop hl 
57b3						 
57b3 11 af f9				ld de, store_page      ; get block zero of file 
57b6 cd cd 09				call storage_read 
57b9 cd 07 10			call ishlzero 
57bc 20 04			jr nz, .opfound 
57be			 
57be				; file does not exist so indicate with 255 extents in use 
57be			 
57be 3e ff			ld a, 255 
57c0 18 29			jr .skipopeneof 
57c2			 
57c2			 
57c2			.opfound: 
57c2			 
57c2			 
57c2 3a b1 f9				ld a, (store_page+2)    ; max extents for this file 
57c5 32 9e f9				ld  (store_openmaxext), a   ; get our limit and push 
57c8					 
57c8				if DEBUG_STORESE 
57c8					DMARK "OPx" 
57c8 f5				push af  
57c9 3a dd 57			ld a, (.dmark)  
57cc 32 a0 fd			ld (debug_mark),a  
57cf 3a de 57			ld a, (.dmark+1)  
57d2 32 a1 fd			ld (debug_mark+1),a  
57d5 3a df 57			ld a, (.dmark+2)  
57d8 32 a2 fd			ld (debug_mark+2),a  
57db 18 03			jr .pastdmark  
57dd ..			.dmark: db "OPx"  
57e0 f1			.pastdmark: pop af  
57e1			endm  
# End of macro DMARK
57e1					CALLMONITOR 
57e1 cd aa fd			call debug_vector  
57e4				endm  
# End of macro CALLMONITOR
57e4				endif 
57e4 fe 00				cp 0 
57e6 20 03				jr nz, .skipopeneof 
57e8					; have opened an empty file 
57e8					 
57e8 32 9f f9				ld (store_openext), a 
57eb			 
57eb			.skipopeneof: 
57eb			 
57eb 6f					ld l, a 
57ec 26 00				ld h, 0 
57ee cd 48 20				call forth_push_numhl 
57f1			 
57f1			 
57f1				       NEXTW 
57f1 c3 39 24			jp macro_next 
57f4				endm 
# End of macro NEXTW
57f4			.READ: 
57f4				CWHEAD .EOF 88 "READ" 4 WORD_FLAG_CODE 
57f4 6c				db WORD_SYS_CORE+88             
57f5 1e 59			dw .EOF            
57f7 05				db 4 + 1 
57f8 .. 00			db "READ",0              
57fd				endm 
# End of macro CWHEAD
57fd			; | READ ( -- n  )  Reads next page of current file id and push to stack | DONE 
57fd			; | | e.g. 
57fd			; | | $01 OPEN $01 DO READ . LOOP 
57fd			; | | 
57fd			; | | As this word only reads one 64 byte block in at a time, if the APPEND word has created extra blocks for the excess, this READ 
57fd			; | | word is unaware so the long string needs to be joined if the string is a full. A single block read might be what you want, 
57fd			; | | but if not then writing a word to join blocks will be required. The upshot is a full string will be 62 bytes as the first 
57fd			; | | two bytes contain the file id and extent. 
57fd			; | |  
57fd			; | | Note: There is a flag that enables/disables long block reads called 'store_longread' and a poke of a non-zero value will 
57fd			; | | enable the code to automatically read futher blocks if full. It is BUGGY so don't use for now. 
57fd			; | | > [!NOTE] 
57fd			; | | > Compatible with PicoSPINet  
57fd			 
57fd					if DEBUG_FORTH_WORDS_KEY 
57fd						DMARK "REA" 
57fd f5				push af  
57fe 3a 12 58			ld a, (.dmark)  
5801 32 a0 fd			ld (debug_mark),a  
5804 3a 13 58			ld a, (.dmark+1)  
5807 32 a1 fd			ld (debug_mark+1),a  
580a 3a 14 58			ld a, (.dmark+2)  
580d 32 a2 fd			ld (debug_mark+2),a  
5810 18 03			jr .pastdmark  
5812 ..			.dmark: db "REA"  
5815 f1			.pastdmark: pop af  
5816			endm  
# End of macro DMARK
5816						CALLMONITOR 
5816 cd aa fd			call debug_vector  
5819				endm  
# End of macro CALLMONITOR
5819					endif 
5819					; store_openext use it. If zero it is EOF 
5819			 
5819					; read block from current stream id 
5819					; if the block does not contain zero term keep reading blocks until zero found 
5819					; push the block to stack 
5819					; save the block id to stream 
5819			 
5819			 
5819 cd 4b 59				call .testeof 
581c 3e 01				ld a, 1 
581e bd					cp l 
581f ca fa 58				jp z, .ateof 
5822			 
5822			 
5822			;		FORTH_DSP_VALUEHL 
5822			 
5822			;		push hl 
5822			 
5822			;	if DEBUG_STORESE 
5822			;		DMARK "REA" 
5822			;		CALLMONITOR 
5822			;	endif 
5822			;		FORTH_DSP_POP 
5822			 
5822			;		pop hl 
5822				 
5822 3a 9c f9				ld a, (store_filecache) 
5825 67					ld h,a 
5826			 
5826 3a 9f f9				ld a, (store_openext) 
5829 6f					ld l, a 
582a					 
582a fe 00				cp 0 
582c ca fa 58				jp z, .ateof     ; dont read past eof 
582f			 
582f cd b0 0c				call storage_clear_page 
5832			 
5832 11 af f9				ld de, store_page 
5835				if DEBUG_STORESE 
5835					DMARK "RE1" 
5835 f5				push af  
5836 3a 4a 58			ld a, (.dmark)  
5839 32 a0 fd			ld (debug_mark),a  
583c 3a 4b 58			ld a, (.dmark+1)  
583f 32 a1 fd			ld (debug_mark+1),a  
5842 3a 4c 58			ld a, (.dmark+2)  
5845 32 a2 fd			ld (debug_mark+2),a  
5848 18 03			jr .pastdmark  
584a ..			.dmark: db "RE1"  
584d f1			.pastdmark: pop af  
584e			endm  
# End of macro DMARK
584e					CALLMONITOR 
584e cd aa fd			call debug_vector  
5851				endm  
# End of macro CALLMONITOR
5851				endif 
5851 cd cd 09				call storage_read 
5854			 
5854				if DEBUG_STORESE 
5854					DMARK "RE2" 
5854 f5				push af  
5855 3a 69 58			ld a, (.dmark)  
5858 32 a0 fd			ld (debug_mark),a  
585b 3a 6a 58			ld a, (.dmark+1)  
585e 32 a1 fd			ld (debug_mark+1),a  
5861 3a 6b 58			ld a, (.dmark+2)  
5864 32 a2 fd			ld (debug_mark+2),a  
5867 18 03			jr .pastdmark  
5869 ..			.dmark: db "RE2"  
586c f1			.pastdmark: pop af  
586d			endm  
# End of macro DMARK
586d					CALLMONITOR 
586d cd aa fd			call debug_vector  
5870				endm  
# End of macro CALLMONITOR
5870				endif 
5870 cd 07 10			call ishlzero 
5873			;	ld a, l 
5873			;	add h 
5873			;	cp 0 
5873 ca fa 58			jp z, .readeof 
5876			 
5876				; not eof so hl should point to data to push to stack 
5876			 
5876				if DEBUG_STORESE 
5876					DMARK "RE3" 
5876 f5				push af  
5877 3a 8b 58			ld a, (.dmark)  
587a 32 a0 fd			ld (debug_mark),a  
587d 3a 8c 58			ld a, (.dmark+1)  
5880 32 a1 fd			ld (debug_mark+1),a  
5883 3a 8d 58			ld a, (.dmark+2)  
5886 32 a2 fd			ld (debug_mark+2),a  
5889 18 03			jr .pastdmark  
588b ..			.dmark: db "RE3"  
588e f1			.pastdmark: pop af  
588f			endm  
# End of macro DMARK
588f					CALLMONITOR 
588f cd aa fd			call debug_vector  
5892				endm  
# End of macro CALLMONITOR
5892				endif 
5892 cd b6 20			call forth_push_str 
5895			 
5895				if DEBUG_STORESE 
5895					DMARK "RE4" 
5895 f5				push af  
5896 3a aa 58			ld a, (.dmark)  
5899 32 a0 fd			ld (debug_mark),a  
589c 3a ab 58			ld a, (.dmark+1)  
589f 32 a1 fd			ld (debug_mark+1),a  
58a2 3a ac 58			ld a, (.dmark+2)  
58a5 32 a2 fd			ld (debug_mark+2),a  
58a8 18 03			jr .pastdmark  
58aa ..			.dmark: db "RE4"  
58ad f1			.pastdmark: pop af  
58ae			endm  
# End of macro DMARK
58ae					CALLMONITOR 
58ae cd aa fd			call debug_vector  
58b1				endm  
# End of macro CALLMONITOR
58b1				endif 
58b1				; get next block  or mark as eof 
58b1			 
58b1 3a 9e f9			ld a, (store_openmaxext)   ; get our limit 
58b4 4f				ld c, a	 
58b5 3a 9f f9			ld a, (store_openext) 
58b8			 
58b8				if DEBUG_STORESE 
58b8					DMARK "RE5" 
58b8 f5				push af  
58b9 3a cd 58			ld a, (.dmark)  
58bc 32 a0 fd			ld (debug_mark),a  
58bf 3a ce 58			ld a, (.dmark+1)  
58c2 32 a1 fd			ld (debug_mark+1),a  
58c5 3a cf 58			ld a, (.dmark+2)  
58c8 32 a2 fd			ld (debug_mark+2),a  
58cb 18 03			jr .pastdmark  
58cd ..			.dmark: db "RE5"  
58d0 f1			.pastdmark: pop af  
58d1			endm  
# End of macro DMARK
58d1					CALLMONITOR 
58d1 cd aa fd			call debug_vector  
58d4				endm  
# End of macro CALLMONITOR
58d4				endif 
58d4 b9				cp c 
58d5 28 23			jr z, .readeof     ; at last extent 
58d7			 
58d7 3c					inc a 
58d8 32 9f f9				ld (store_openext), a 
58db			 
58db				if DEBUG_STORESE 
58db					DMARK "RE6" 
58db f5				push af  
58dc 3a f0 58			ld a, (.dmark)  
58df 32 a0 fd			ld (debug_mark),a  
58e2 3a f1 58			ld a, (.dmark+1)  
58e5 32 a1 fd			ld (debug_mark+1),a  
58e8 3a f2 58			ld a, (.dmark+2)  
58eb 32 a2 fd			ld (debug_mark+2),a  
58ee 18 03			jr .pastdmark  
58f0 ..			.dmark: db "RE6"  
58f3 f1			.pastdmark: pop af  
58f4			endm  
# End of macro DMARK
58f4					CALLMONITOR 
58f4 cd aa fd			call debug_vector  
58f7				endm  
# End of macro CALLMONITOR
58f7				endif 
58f7			 
58f7			 
58f7				       NEXTW 
58f7 c3 39 24			jp macro_next 
58fa				endm 
# End of macro NEXTW
58fa			.ateof: 
58fa				;	ld hl, .showeof 
58fa				;	call forth_push_str 
58fa 3e 00		.readeof:	ld a, 0 
58fc 32 9f f9				ld (store_openext), a 
58ff			 
58ff					 
58ff				if DEBUG_STORESE 
58ff					DMARK "REF" 
58ff f5				push af  
5900 3a 14 59			ld a, (.dmark)  
5903 32 a0 fd			ld (debug_mark),a  
5906 3a 15 59			ld a, (.dmark+1)  
5909 32 a1 fd			ld (debug_mark+1),a  
590c 3a 16 59			ld a, (.dmark+2)  
590f 32 a2 fd			ld (debug_mark+2),a  
5912 18 03			jr .pastdmark  
5914 ..			.dmark: db "REF"  
5917 f1			.pastdmark: pop af  
5918			endm  
# End of macro DMARK
5918					CALLMONITOR 
5918 cd aa fd			call debug_vector  
591b				endm  
# End of macro CALLMONITOR
591b				endif 
591b				       NEXTW 
591b c3 39 24			jp macro_next 
591e				endm 
# End of macro NEXTW
591e			 
591e			;.showeof:   db "eof", 0 
591e			 
591e			 
591e			.EOF: 
591e				CWHEAD .FORMAT 89 "EOF" 3 WORD_FLAG_CODE 
591e 6d				db WORD_SYS_CORE+89             
591f 60 59			dw .FORMAT            
5921 04				db 3 + 1 
5922 .. 00			db "EOF",0              
5926				endm 
# End of macro CWHEAD
5926			; | EOF ( -- u )  Returns EOF logical state of current open file id | DONE 
5926			; | | e.g. 
5926			; | | $01 OPEN REPEAT READ EOF $00 IF LOOP 
5926			; | | > [!NOTE] 
5926			; | | > Compatible with PicoSPINet  
5926					; TODO if current block id for stream is zero then push true else false 
5926			 
5926					if DEBUG_FORTH_WORDS_KEY 
5926						DMARK "EOF" 
5926 f5				push af  
5927 3a 3b 59			ld a, (.dmark)  
592a 32 a0 fd			ld (debug_mark),a  
592d 3a 3c 59			ld a, (.dmark+1)  
5930 32 a1 fd			ld (debug_mark+1),a  
5933 3a 3d 59			ld a, (.dmark+2)  
5936 32 a2 fd			ld (debug_mark+2),a  
5939 18 03			jr .pastdmark  
593b ..			.dmark: db "EOF"  
593e f1			.pastdmark: pop af  
593f			endm  
# End of macro DMARK
593f						CALLMONITOR 
593f cd aa fd			call debug_vector  
5942				endm  
# End of macro CALLMONITOR
5942					endif 
5942			 
5942					; TODO handlue multiple file streams 
5942			 
5942			;		FORTH_iDSP_POP     ; for now just get rid of stream id 
5942 cd 4b 59				call .testeof 
5945 cd 48 20				call forth_push_numhl 
5948			 
5948			 
5948				       NEXTW 
5948 c3 39 24			jp macro_next 
594b				endm 
# End of macro NEXTW
594b			 
594b			.testeof: 
594b 2e 01				ld l, 1 
594d 3a 9e f9				ld a, (store_openmaxext) 
5950 fe 00				cp 0 
5952 28 09				jr  z, .eofdone   ; empty file 
5954 3a 9f f9				ld a, (store_openext) 
5957 fe 00				cp 0 
5959 28 02				jr  z, .eofdone 
595b 2e 00				ld l, 0 
595d 26 00		.eofdone:	ld h, 0 
595f c9					ret 
5960			 
5960			 
5960			 
5960			 
5960			.FORMAT: 
5960				CWHEAD .LABEL 89 "FORMAT" 6 WORD_FLAG_CODE 
5960 6d				db WORD_SYS_CORE+89             
5961 b1 59			dw .LABEL            
5963 07				db 6 + 1 
5964 .. 00			db "FORMAT",0              
596b				endm 
# End of macro CWHEAD
596b			; | FORMAT (  --  )  Formats the current bank selected (NO PROMPT!) | DONE 
596b			; | | > [!NOTE] 
596b			; | | > Compatible with PicoSPINet  
596b					; TODO if current block id for stream is zero then push true else false 
596b				 
596b				if DEBUG_STORESE 
596b					DMARK "FOR" 
596b f5				push af  
596c 3a 80 59			ld a, (.dmark)  
596f 32 a0 fd			ld (debug_mark),a  
5972 3a 81 59			ld a, (.dmark+1)  
5975 32 a1 fd			ld (debug_mark+1),a  
5978 3a 82 59			ld a, (.dmark+2)  
597b 32 a2 fd			ld (debug_mark+2),a  
597e 18 03			jr .pastdmark  
5980 ..			.dmark: db "FOR"  
5983 f1			.pastdmark: pop af  
5984			endm  
# End of macro DMARK
5984					CALLMONITOR 
5984 cd aa fd			call debug_vector  
5987				endm  
# End of macro CALLMONITOR
5987				endif 
5987					; Wipes the bank check flags to cause a reformat on next block 0 read 
5987			 
5987 21 01 00				ld hl, 1 
598a 3e 00				ld a, 0 
598c cd 79 02				call se_writebyte 
598f			 
598f				if DEBUG_STORESE 
598f					DMARK "FO0" 
598f f5				push af  
5990 3a a4 59			ld a, (.dmark)  
5993 32 a0 fd			ld (debug_mark),a  
5996 3a a5 59			ld a, (.dmark+1)  
5999 32 a1 fd			ld (debug_mark+1),a  
599c 3a a6 59			ld a, (.dmark+2)  
599f 32 a2 fd			ld (debug_mark+2),a  
59a2 18 03			jr .pastdmark  
59a4 ..			.dmark: db "FO0"  
59a7 f1			.pastdmark: pop af  
59a8			endm  
# End of macro DMARK
59a8					CALLMONITOR 
59a8 cd aa fd			call debug_vector  
59ab				endm  
# End of macro CALLMONITOR
59ab				endif 
59ab					; force bank init 
59ab			 
59ab cd 25 05				call storage_get_block_0 
59ae					 
59ae				       NEXTW 
59ae c3 39 24			jp macro_next 
59b1				endm 
# End of macro NEXTW
59b1			.LABEL: 
59b1				CWHEAD .STOREPAGE 89 "LABEL" 5 WORD_FLAG_CODE 
59b1 6d				db WORD_SYS_CORE+89             
59b2 ff 59			dw .STOREPAGE            
59b4 06				db 5 + 1 
59b5 .. 00			db "LABEL",0              
59bb				endm 
# End of macro CWHEAD
59bb			; | LABEL ( u --  )  Sets the storage bank label to string on top of stack  | DONE 
59bb			; | | > [!NOTE] 
59bb			; | | > Compatible with PicoSPINet  
59bb					; TODO test to see if bank is selected 
59bb				 
59bb					if DEBUG_FORTH_WORDS_KEY 
59bb						DMARK "LBL" 
59bb f5				push af  
59bc 3a d0 59			ld a, (.dmark)  
59bf 32 a0 fd			ld (debug_mark),a  
59c2 3a d1 59			ld a, (.dmark+1)  
59c5 32 a1 fd			ld (debug_mark+1),a  
59c8 3a d2 59			ld a, (.dmark+2)  
59cb 32 a2 fd			ld (debug_mark+2),a  
59ce 18 03			jr .pastdmark  
59d0 ..			.dmark: db "LBL"  
59d3 f1			.pastdmark: pop af  
59d4			endm  
# End of macro DMARK
59d4						CALLMONITOR 
59d4 cd aa fd			call debug_vector  
59d7				endm  
# End of macro CALLMONITOR
59d7					endif 
59d7			;	if DEBUG_STORESE 
59d7			;		DMARK "LBL" 
59d7			;		CALLMONITOR 
59d7			;	endif 
59d7					FORTH_DSP_VALUEHL 
59d7 cd 4d 22			call macro_dsp_valuehl 
59da				endm 
# End of macro FORTH_DSP_VALUEHL
59da					;v5FORTH_DSP_VALUE 
59da					 
59da			;		push hl 
59da					FORTH_DSP_POP 
59da cd 05 23			call macro_forth_dsp_pop 
59dd				endm 
# End of macro FORTH_DSP_POP
59dd			;		pop hl 
59dd			 
59dd			;v5		inc hl   ; move past the type marker 
59dd			 
59dd				if DEBUG_STORESE 
59dd					DMARK "LBl" 
59dd f5				push af  
59de 3a f2 59			ld a, (.dmark)  
59e1 32 a0 fd			ld (debug_mark),a  
59e4 3a f3 59			ld a, (.dmark+1)  
59e7 32 a1 fd			ld (debug_mark+1),a  
59ea 3a f4 59			ld a, (.dmark+2)  
59ed 32 a2 fd			ld (debug_mark+2),a  
59f0 18 03			jr .pastdmark  
59f2 ..			.dmark: db "LBl"  
59f5 f1			.pastdmark: pop af  
59f6			endm  
# End of macro DMARK
59f6					CALLMONITOR 
59f6 cd aa fd			call debug_vector  
59f9				endm  
# End of macro CALLMONITOR
59f9				endif 
59f9 cd 49 06				call storage_label 
59fc			 
59fc				       NEXTW 
59fc c3 39 24			jp macro_next 
59ff				endm 
# End of macro NEXTW
59ff			.STOREPAGE: 
59ff				CWHEAD .LABELS 89 "STOREPAGE" 9 WORD_FLAG_CODE 
59ff 6d				db WORD_SYS_CORE+89             
5a00 32 5a			dw .LABELS            
5a02 0a				db 9 + 1 
5a03 .. 00			db "STOREPAGE",0              
5a0d				endm 
# End of macro CWHEAD
5a0d			; | STOREPAGE ( -- addr )  Pushes the address of the file system record buffer to stack for direct access  | DONE 
5a0d			; | | > [!NOTE] 
5a0d			; | | > Compatible with PicoSPINet  
5a0d					; TODO test to see if bank is selected 
5a0d				 
5a0d					if DEBUG_FORTH_WORDS_KEY 
5a0d						DMARK "STP" 
5a0d f5				push af  
5a0e 3a 22 5a			ld a, (.dmark)  
5a11 32 a0 fd			ld (debug_mark),a  
5a14 3a 23 5a			ld a, (.dmark+1)  
5a17 32 a1 fd			ld (debug_mark+1),a  
5a1a 3a 24 5a			ld a, (.dmark+2)  
5a1d 32 a2 fd			ld (debug_mark+2),a  
5a20 18 03			jr .pastdmark  
5a22 ..			.dmark: db "STP"  
5a25 f1			.pastdmark: pop af  
5a26			endm  
# End of macro DMARK
5a26						CALLMONITOR 
5a26 cd aa fd			call debug_vector  
5a29				endm  
# End of macro CALLMONITOR
5a29					endif 
5a29			;	if DEBUG_STORESE 
5a29			;		DMARK "STP" 
5a29			;		CALLMONITOR 
5a29			;	endif 
5a29			 
5a29 21 af f9			ld hl, store_page 
5a2c cd 48 20			call forth_push_numhl 
5a2f			 
5a2f			 
5a2f				       NEXTW 
5a2f c3 39 24			jp macro_next 
5a32				endm 
# End of macro NEXTW
5a32			.LABELS: 
5a32				CWHEAD .SCONST1 89 "LABELS" 6 WORD_FLAG_CODE 
5a32 6d				db WORD_SYS_CORE+89             
5a33 bc 5a			dw .SCONST1            
5a35 07				db 6 + 1 
5a36 .. 00			db "LABELS",0              
5a3d				endm 
# End of macro CWHEAD
5a3d			; | LABELS (  -- b n .... c  )  Pushes each storage bank labels (n) along with id (b) onto the stack giving count (c) of banks  | DONE 
5a3d			; | | > [!CAUTION] 
5a3d			; | | > *NOT* Compatible with PicoSPINet  
5a3d					;  
5a3d			 
5a3d					; save the current device selected to restore afterwards 
5a3d				 
5a3d 3a 95 f9				ld a, (spi_device) 
5a40 f5					push af 
5a41			 
5a41			 
5a41					; run through each of the banks 
5a41			 
5a41 21 01 00				ld hl, 1 
5a44 cd 48 20				call forth_push_numhl 
5a47 3e ff				ld a, SPI_CE_HIGH 
5a49 cb 87				res SPI_CE0, a 
5a4b 32 95 f9				ld (spi_device), a 
5a4e cd 25 05				call storage_get_block_0 
5a51 21 b2 f9				ld hl, store_page+3 
5a54 cd b6 20				call forth_push_str 
5a57			 
5a57					 
5a57 21 02 00				ld hl, 2 
5a5a cd 48 20				call forth_push_numhl 
5a5d 3e ff				ld a, SPI_CE_HIGH 
5a5f cb 8f				res SPI_CE1, a 
5a61 32 95 f9				ld (spi_device), a 
5a64 cd 25 05				call storage_get_block_0 
5a67 21 b2 f9				ld hl, store_page+3 
5a6a cd b6 20				call forth_push_str 
5a6d			 
5a6d					 
5a6d 21 03 00				ld hl, 3 
5a70 cd 48 20				call forth_push_numhl 
5a73 3e ff				ld a, SPI_CE_HIGH 
5a75 cb 97				res SPI_CE2, a 
5a77 32 95 f9				ld (spi_device), a 
5a7a cd 25 05				call storage_get_block_0 
5a7d 21 b2 f9				ld hl, store_page+3 
5a80 cd b6 20				call forth_push_str 
5a83			 
5a83			 
5a83 21 04 00				ld hl, 4 
5a86 cd 48 20				call forth_push_numhl 
5a89 3e ff				ld a, SPI_CE_HIGH 
5a8b cb 9f				res SPI_CE3, a 
5a8d 32 95 f9				ld (spi_device), a 
5a90 cd 25 05				call storage_get_block_0 
5a93 21 b2 f9				ld hl, store_page+3 
5a96 cd b6 20				call forth_push_str 
5a99			 
5a99					 
5a99			 
5a99 21 05 00				ld hl, 5 
5a9c cd 48 20				call forth_push_numhl 
5a9f 3e ff				ld a, SPI_CE_HIGH 
5aa1 cb a7				res SPI_CE4, a 
5aa3 32 95 f9				ld (spi_device), a 
5aa6 cd 25 05				call storage_get_block_0 
5aa9 21 b2 f9				ld hl, store_page+3 
5aac cd b6 20				call forth_push_str 
5aaf			 
5aaf					 
5aaf					; push fixed count of storage devices (on board) for now 
5aaf			 
5aaf 21 05 00				ld hl, 5 
5ab2 cd 48 20				call forth_push_numhl 
5ab5			 
5ab5					; restore selected device  
5ab5				 
5ab5 f1					pop af 
5ab6 32 95 f9				ld (spi_device), a 
5ab9			 
5ab9				       NEXTW 
5ab9 c3 39 24			jp macro_next 
5abc				endm 
# End of macro NEXTW
5abc			 
5abc			.SCONST1: 
5abc				CWHEAD .SCONST2 89 "FILEID" 6 WORD_FLAG_CODE 
5abc 6d				db WORD_SYS_CORE+89             
5abd d3 5a			dw .SCONST2            
5abf 07				db 6 + 1 
5ac0 .. 00			db "FILEID",0              
5ac7				endm 
# End of macro CWHEAD
5ac7			; | FILEID (  -- u1  )  Pushes currently open file ID to stack | DONE 
5ac7			; | | > [!NOTE] 
5ac7			; | | > Compatible with PicoSPINet  
5ac7 3a 9c f9				ld a, (store_filecache) 
5aca 26 00				ld h, 0 
5acc 6f					ld l, a 
5acd cd 48 20				call forth_push_numhl 
5ad0					NEXTW 
5ad0 c3 39 24			jp macro_next 
5ad3				endm 
# End of macro NEXTW
5ad3			.SCONST2: 
5ad3				CWHEAD .SCONST3 89 "FILEEXT" 7 WORD_FLAG_CODE 
5ad3 6d				db WORD_SYS_CORE+89             
5ad4 eb 5a			dw .SCONST3            
5ad6 08				db 7 + 1 
5ad7 .. 00			db "FILEEXT",0              
5adf				endm 
# End of macro CWHEAD
5adf			; | FILEEXT (  -- u1  )  Pushes the currently read file extent of the file to stack | DONE 
5adf			; | | > [!NOTE] 
5adf			; | | > Compatible with PicoSPINet  
5adf 3a 9f f9				ld a, (store_openext) 
5ae2 26 00				ld h, 0 
5ae4 6f					ld l, a 
5ae5 cd 48 20				call forth_push_numhl 
5ae8					NEXTW 
5ae8 c3 39 24			jp macro_next 
5aeb				endm 
# End of macro NEXTW
5aeb			.SCONST3: 
5aeb				CWHEAD .SCONST4 89 "FILEMAX" 7 WORD_FLAG_CODE 
5aeb 6d				db WORD_SYS_CORE+89             
5aec 03 5b			dw .SCONST4            
5aee 08				db 7 + 1 
5aef .. 00			db "FILEMAX",0              
5af7				endm 
# End of macro CWHEAD
5af7			; | FILEMAXEXT (  -- u1  )  Pushes the maximum file extent of the currenlty open file to stack | DONE 
5af7			; | | > [!NOTE] 
5af7			; | | > Compatible with PicoSPINet  
5af7 3a 9e f9				ld a, (store_openmaxext) 
5afa 26 00				ld h, 0 
5afc 6f					ld l, a 
5afd cd 48 20				call forth_push_numhl 
5b00					NEXTW 
5b00 c3 39 24			jp macro_next 
5b03				endm 
# End of macro NEXTW
5b03			.SCONST4: 
5b03				CWHEAD .SCONST5 89 "FILEADDR" 8 WORD_FLAG_CODE 
5b03 6d				db WORD_SYS_CORE+89             
5b04 19 5b			dw .SCONST5            
5b06 09				db 8 + 1 
5b07 .. 00			db "FILEADDR",0              
5b10				endm 
# End of macro CWHEAD
5b10			; | FILEADDR (  -- u1  )  Pushes the address of the block accessed for the currently open file to stack | DONE 
5b10			; | | > [!NOTE] 
5b10			; | | > Compatible with PicoSPINet  
5b10 2a a0 f9				ld hl, (store_openaddr) 
5b13 cd 48 20				call forth_push_numhl 
5b16					NEXTW 
5b16 c3 39 24			jp macro_next 
5b19				endm 
# End of macro NEXTW
5b19			.SCONST5: 
5b19				CWHEAD .SCONST6 89 "FILEPAGE" 8 WORD_FLAG_CODE 
5b19 6d				db WORD_SYS_CORE+89             
5b1a 3a 5b			dw .SCONST6            
5b1c 09				db 8 + 1 
5b1d .. 00			db "FILEPAGE",0              
5b26				endm 
# End of macro CWHEAD
5b26			; | FILEPAGE (  -- u1  )  Pushes the page id block accessed for the currenlty open file to stack | DONE 
5b26			; | | > [!NOTE] 
5b26			; | | > Compatible with PicoSPINet  
5b26 2a a0 f9				ld hl, (store_openaddr) 
5b29 e5					push hl 
5b2a c1					pop bc 
5b2b 16 00				ld d, 0 
5b2d 1e 40				ld e, STORE_BLOCK_PHY 
5b2f cd 3b 0f				call Div16 
5b32 c5					push bc 
5b33 e1					pop hl 
5b34 cd 48 20				call forth_push_numhl 
5b37					NEXTW 
5b37 c3 39 24			jp macro_next 
5b3a				endm 
# End of macro NEXTW
5b3a			.SCONST6: 
5b3a				CWHEAD .ENDSTORAGE 89 "READCONT" 8 WORD_FLAG_CODE 
5b3a 6d				db WORD_SYS_CORE+89             
5b3b 53 5b			dw .ENDSTORAGE            
5b3d 09				db 8 + 1 
5b3e .. 00			db "READCONT",0              
5b47				endm 
# End of macro CWHEAD
5b47			; | READCONT (  -- u1  )  Pushes the READ continuation flag to stack | DONE 
5b47			; | | If the most recent READ results in a full buffer load then this flag is set and will indicate that 
5b47			; | | a further read should, if applicable, be CONCAT to the previous read. 
5b47			; | | > [!NOTE] 
5b47			; | | > Compatible with PicoSPINet  
5b47 3a a2 f9				ld a, (store_readcont) 
5b4a 26 00				ld h, 0 
5b4c 6f					ld l, a 
5b4d cd 48 20				call forth_push_numhl 
5b50					NEXTW 
5b50 c3 39 24			jp macro_next 
5b53				endm 
# End of macro NEXTW
5b53			.ENDSTORAGE: 
5b53			; eof 
# End of file forth_words_storage.asm
5b53			endif 
5b53				include "forth_words_device.asm" 
5b53			; Device related words 
5b53			 
5b53			; | ## Device Words 
5b53			 
5b53			;if SOUND_ENABLE 
5b53			;.NOTE: 
5b53			;	CWHEAD .AFTERSOUND 31 "NOTE" 4 WORD_FLAG_CODE 
5b53			;; NOTE ( ud uf --  )  Plays a note of frequency uf for the duration of ud millseconds  TODO 
5b53			;		if DEBUG_FORTH_WORDS_KEY 
5b53			;			DMARK "NTE" 
5b53			;			CALLMONITOR 
5b53			;		endif 
5b53			; 
5b53			;	 
5b53			; 
5b53			;		NEXTW 
5b53			;.AFTERSOUND: 
5b53			;endif 
5b53			 
5b53			 
5b53			USE_GPIO: equ 0 
5b53			 
5b53			if USE_GPIO 
5b53			.GP1: 
5b53				CWHEAD .GP2 31 "IOIN" 4 WORD_FLAG_CODE 
5b53			;  IOIN ( u1 -- u )    Perform a GPIO read of pin u1 and push result   
5b53					NEXTW 
5b53			.GP2: 
5b53				CWHEAD .GP3 31 "IOOUT" 5 WORD_FLAG_CODE 
5b53			;  IOOUT ( u1 u2 --  )    Perform a GPIO write of pin u1 with pin set to 0 or 1 in u2   
5b53			 
5b53					NEXTW 
5b53			 
5b53			.GP3: 
5b53				CWHEAD .GP4 31 "IOBYTE" 5 WORD_FLAG_CODE 
5b53			;  IOBYTE ( u1 --  )    Perform a GPIO write of byte u1   
5b53			 
5b53					NEXTW 
5b53			 
5b53			.GP4: 
5b53				CWHEAD .SIN 31 "IOSET" 5 WORD_FLAG_CODE 
5b53			;  IOSET ( u1 --  )    Setup GPIO pins for I/O direction. Bit is set for write else read pin   
5b53			 
5b53					NEXTW 
5b53			.SIN: 
5b53			 
5b53			 
5b53			endif 
5b53			 
5b53			 
5b53				CWHEAD .SOUT 31 "IN" 2 WORD_FLAG_CODE 
5b53 33				db WORD_SYS_CORE+31             
5b54 88 5b			dw .SOUT            
5b56 03				db 2 + 1 
5b57 .. 00			db "IN",0              
5b5a				endm 
# End of macro CWHEAD
5b5a			; | IN ( u1 -- u )    Perform Z80 IN with u1 being the port number. Push result to TOS | TO TEST 
5b5a					if DEBUG_FORTH_WORDS_KEY 
5b5a						DMARK "IN." 
5b5a f5				push af  
5b5b 3a 6f 5b			ld a, (.dmark)  
5b5e 32 a0 fd			ld (debug_mark),a  
5b61 3a 70 5b			ld a, (.dmark+1)  
5b64 32 a1 fd			ld (debug_mark+1),a  
5b67 3a 71 5b			ld a, (.dmark+2)  
5b6a 32 a2 fd			ld (debug_mark+2),a  
5b6d 18 03			jr .pastdmark  
5b6f ..			.dmark: db "IN."  
5b72 f1			.pastdmark: pop af  
5b73			endm  
# End of macro DMARK
5b73						CALLMONITOR 
5b73 cd aa fd			call debug_vector  
5b76				endm  
# End of macro CALLMONITOR
5b76					endif 
5b76					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5b76 cd 4d 22			call macro_dsp_valuehl 
5b79				endm 
# End of macro FORTH_DSP_VALUEHL
5b79			 
5b79 e5					push hl 
5b7a			 
5b7a					; destroy value TOS 
5b7a			 
5b7a					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5b7a cd 05 23			call macro_forth_dsp_pop 
5b7d				endm 
# End of macro FORTH_DSP_POP
5b7d			 
5b7d					; one value on hl get other one back 
5b7d			 
5b7d c1					pop bc 
5b7e			 
5b7e					; do the sub 
5b7e			;		ex de, hl 
5b7e			 
5b7e ed 68				in l,(c) 
5b80			 
5b80					; save it 
5b80			 
5b80 26 00				ld h,0 
5b82			 
5b82					; TODO push value back onto stack for another op etc 
5b82			 
5b82 cd 48 20				call forth_push_numhl 
5b85					NEXTW 
5b85 c3 39 24			jp macro_next 
5b88				endm 
# End of macro NEXTW
5b88			.SOUT: 
5b88				CWHEAD .SPIO 32 "OUT" 3 WORD_FLAG_CODE 
5b88 34				db WORD_SYS_CORE+32             
5b89 db 5b			dw .SPIO            
5b8b 04				db 3 + 1 
5b8c .. 00			db "OUT",0              
5b90				endm 
# End of macro CWHEAD
5b90			; | OUT ( u1 u2 -- ) Perform Z80 OUT to port u2 sending byte u1 | DONE 
5b90					if DEBUG_FORTH_WORDS_KEY 
5b90						DMARK "OUT" 
5b90 f5				push af  
5b91 3a a5 5b			ld a, (.dmark)  
5b94 32 a0 fd			ld (debug_mark),a  
5b97 3a a6 5b			ld a, (.dmark+1)  
5b9a 32 a1 fd			ld (debug_mark+1),a  
5b9d 3a a7 5b			ld a, (.dmark+2)  
5ba0 32 a2 fd			ld (debug_mark+2),a  
5ba3 18 03			jr .pastdmark  
5ba5 ..			.dmark: db "OUT"  
5ba8 f1			.pastdmark: pop af  
5ba9			endm  
# End of macro DMARK
5ba9						CALLMONITOR 
5ba9 cd aa fd			call debug_vector  
5bac				endm  
# End of macro CALLMONITOR
5bac					endif 
5bac			 
5bac					; get port 
5bac			 
5bac					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5bac cd 4d 22			call macro_dsp_valuehl 
5baf				endm 
# End of macro FORTH_DSP_VALUEHL
5baf			 
5baf e5					push hl 
5bb0			 
5bb0					; destroy value TOS 
5bb0			 
5bb0					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5bb0 cd 05 23			call macro_forth_dsp_pop 
5bb3				endm 
# End of macro FORTH_DSP_POP
5bb3			 
5bb3					; get byte to send 
5bb3			 
5bb3					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5bb3 cd 4d 22			call macro_dsp_valuehl 
5bb6				endm 
# End of macro FORTH_DSP_VALUEHL
5bb6			 
5bb6			;		push hl 
5bb6			 
5bb6					; destroy value TOS 
5bb6			 
5bb6					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5bb6 cd 05 23			call macro_forth_dsp_pop 
5bb9				endm 
# End of macro FORTH_DSP_POP
5bb9			 
5bb9					; one value on hl get other one back 
5bb9			 
5bb9			;		pop hl 
5bb9			 
5bb9 c1					pop bc 
5bba			 
5bba					if DEBUG_FORTH_WORDS 
5bba						DMARK "OUT" 
5bba f5				push af  
5bbb 3a cf 5b			ld a, (.dmark)  
5bbe 32 a0 fd			ld (debug_mark),a  
5bc1 3a d0 5b			ld a, (.dmark+1)  
5bc4 32 a1 fd			ld (debug_mark+1),a  
5bc7 3a d1 5b			ld a, (.dmark+2)  
5bca 32 a2 fd			ld (debug_mark+2),a  
5bcd 18 03			jr .pastdmark  
5bcf ..			.dmark: db "OUT"  
5bd2 f1			.pastdmark: pop af  
5bd3			endm  
# End of macro DMARK
5bd3						CALLMONITOR 
5bd3 cd aa fd			call debug_vector  
5bd6				endm  
# End of macro CALLMONITOR
5bd6					endif 
5bd6			 
5bd6 ed 69				out (c), l 
5bd8			 
5bd8					NEXTW 
5bd8 c3 39 24			jp macro_next 
5bdb				endm 
# End of macro NEXTW
5bdb			 
5bdb			 
5bdb			.SPIO: 
5bdb			 
5bdb			if STORAGE_SE 
5bdb				CWHEAD .SPICEH 61 "SPICEL" 6 WORD_FLAG_CODE 
5bdb 51				db WORD_SYS_CORE+61             
5bdc ec 5b			dw .SPICEH            
5bde 07				db 6 + 1 
5bdf .. 00			db "SPICEL",0              
5be6				endm 
# End of macro CWHEAD
5be6			; | SPICEL ( -- ) Set SPI CE low for the currently selected device |  DONE 
5be6			 
5be6 cd 22 02				call spi_ce_low 
5be9			    NEXTW 
5be9 c3 39 24			jp macro_next 
5bec				endm 
# End of macro NEXTW
5bec			 
5bec			.SPICEH: 
5bec				CWHEAD .SPIOb 61 "SPICEH" 6 WORD_FLAG_CODE 
5bec 51				db WORD_SYS_CORE+61             
5bed fd 5b			dw .SPIOb            
5bef 07				db 6 + 1 
5bf0 .. 00			db "SPICEH",0              
5bf7				endm 
# End of macro CWHEAD
5bf7			; | SPICEH ( -- ) Set SPI CE high for the currently selected device |  DONE 
5bf7			 
5bf7 cd 11 02				call spi_ce_high 
5bfa			    NEXTW 
5bfa c3 39 24			jp macro_next 
5bfd				endm 
# End of macro NEXTW
5bfd			 
5bfd			 
5bfd			.SPIOb: 
5bfd			 
5bfd				CWHEAD .SPII 61 "SPIO" 4 WORD_FLAG_CODE 
5bfd 51				db WORD_SYS_CORE+61             
5bfe 2f 5c			dw .SPII            
5c00 05				db 4 + 1 
5c01 .. 00			db "SPIO",0              
5c06				endm 
# End of macro CWHEAD
5c06			; | SPIO ( u1 -- ) Send byte u1 to SPI  |  DONE 
5c06			 
5c06					if DEBUG_FORTH_WORDS_KEY 
5c06						DMARK "SPo" 
5c06 f5				push af  
5c07 3a 1b 5c			ld a, (.dmark)  
5c0a 32 a0 fd			ld (debug_mark),a  
5c0d 3a 1c 5c			ld a, (.dmark+1)  
5c10 32 a1 fd			ld (debug_mark+1),a  
5c13 3a 1d 5c			ld a, (.dmark+2)  
5c16 32 a2 fd			ld (debug_mark+2),a  
5c19 18 03			jr .pastdmark  
5c1b ..			.dmark: db "SPo"  
5c1e f1			.pastdmark: pop af  
5c1f			endm  
# End of macro DMARK
5c1f						CALLMONITOR 
5c1f cd aa fd			call debug_vector  
5c22				endm  
# End of macro CALLMONITOR
5c22					endif 
5c22					; get port 
5c22			 
5c22			 
5c22					; get byte to send 
5c22			 
5c22					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5c22 cd 4d 22			call macro_dsp_valuehl 
5c25				endm 
# End of macro FORTH_DSP_VALUEHL
5c25			 
5c25			;		push hl    ; u1  
5c25			 
5c25					; destroy value TOS 
5c25			 
5c25					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5c25 cd 05 23			call macro_forth_dsp_pop 
5c28				endm 
# End of macro FORTH_DSP_POP
5c28			 
5c28					; one value on hl get other one back 
5c28			 
5c28			;		pop hl   ; u2 - addr 
5c28			 
5c28					; TODO Send SPI byte 
5c28			 
5c28			;		push hl 
5c28			;		call spi_ce_low 
5c28			;		pop hl 
5c28 7d					ld a, l 
5c29 cd 10 01				call spi_send_byte 
5c2c			;		call spi_ce_high 
5c2c			 
5c2c					NEXTW 
5c2c c3 39 24			jp macro_next 
5c2f				endm 
# End of macro NEXTW
5c2f			 
5c2f			.SPII: 
5c2f				CWHEAD .SESEL 62 "SPII" 5 WORD_FLAG_CODE 
5c2f 52				db WORD_SYS_CORE+62             
5c30 98 5c			dw .SESEL            
5c32 06				db 5 + 1 
5c33 .. 00			db "SPII",0              
5c38				endm 
# End of macro CWHEAD
5c38			; | SPII ( -- u1 ) Get a byte from SPI  | DONE 
5c38					if DEBUG_FORTH_WORDS_KEY 
5c38						DMARK "SPi" 
5c38 f5				push af  
5c39 3a 4d 5c			ld a, (.dmark)  
5c3c 32 a0 fd			ld (debug_mark),a  
5c3f 3a 4e 5c			ld a, (.dmark+1)  
5c42 32 a1 fd			ld (debug_mark+1),a  
5c45 3a 4f 5c			ld a, (.dmark+2)  
5c48 32 a2 fd			ld (debug_mark+2),a  
5c4b 18 03			jr .pastdmark  
5c4d ..			.dmark: db "SPi"  
5c50 f1			.pastdmark: pop af  
5c51			endm  
# End of macro DMARK
5c51						CALLMONITOR 
5c51 cd aa fd			call debug_vector  
5c54				endm  
# End of macro CALLMONITOR
5c54					endif 
5c54			 
5c54					; TODO Get SPI byte 
5c54			 
5c54 cd 37 01				call spi_read_byte 
5c57			 
5c57					if DEBUG_FORTH_WORDS 
5c57						DMARK "Si2" 
5c57 f5				push af  
5c58 3a 6c 5c			ld a, (.dmark)  
5c5b 32 a0 fd			ld (debug_mark),a  
5c5e 3a 6d 5c			ld a, (.dmark+1)  
5c61 32 a1 fd			ld (debug_mark+1),a  
5c64 3a 6e 5c			ld a, (.dmark+2)  
5c67 32 a2 fd			ld (debug_mark+2),a  
5c6a 18 03			jr .pastdmark  
5c6c ..			.dmark: db "Si2"  
5c6f f1			.pastdmark: pop af  
5c70			endm  
# End of macro DMARK
5c70						CALLMONITOR 
5c70 cd aa fd			call debug_vector  
5c73				endm  
# End of macro CALLMONITOR
5c73					endif 
5c73 26 00				ld h, 0 
5c75 6f					ld l, a 
5c76					if DEBUG_FORTH_WORDS 
5c76						DMARK "Si3" 
5c76 f5				push af  
5c77 3a 8b 5c			ld a, (.dmark)  
5c7a 32 a0 fd			ld (debug_mark),a  
5c7d 3a 8c 5c			ld a, (.dmark+1)  
5c80 32 a1 fd			ld (debug_mark+1),a  
5c83 3a 8d 5c			ld a, (.dmark+2)  
5c86 32 a2 fd			ld (debug_mark+2),a  
5c89 18 03			jr .pastdmark  
5c8b ..			.dmark: db "Si3"  
5c8e f1			.pastdmark: pop af  
5c8f			endm  
# End of macro DMARK
5c8f						CALLMONITOR 
5c8f cd aa fd			call debug_vector  
5c92				endm  
# End of macro CALLMONITOR
5c92					endif 
5c92 cd 48 20				call forth_push_numhl 
5c95			 
5c95					NEXTW 
5c95 c3 39 24			jp macro_next 
5c98				endm 
# End of macro NEXTW
5c98			 
5c98			 
5c98			 
5c98			.SESEL: 
5c98				CWHEAD .CARTDEV 82 "BANK" 4 WORD_FLAG_CODE 
5c98 66				db WORD_SYS_CORE+82             
5c99 41 5d			dw .CARTDEV            
5c9b 05				db 4 + 1 
5c9c .. 00			db "BANK",0              
5ca1				endm 
# End of macro CWHEAD
5ca1			; | BANK ( u1 -- ) Select Serial EEPROM Bank Device at bank address u1 1-5 (disables CARTDEV). Set to zero to disable storage. | DONE 
5ca1					if DEBUG_FORTH_WORDS_KEY 
5ca1						DMARK "BNK" 
5ca1 f5				push af  
5ca2 3a b6 5c			ld a, (.dmark)  
5ca5 32 a0 fd			ld (debug_mark),a  
5ca8 3a b7 5c			ld a, (.dmark+1)  
5cab 32 a1 fd			ld (debug_mark+1),a  
5cae 3a b8 5c			ld a, (.dmark+2)  
5cb1 32 a2 fd			ld (debug_mark+2),a  
5cb4 18 03			jr .pastdmark  
5cb6 ..			.dmark: db "BNK"  
5cb9 f1			.pastdmark: pop af  
5cba			endm  
# End of macro DMARK
5cba						CALLMONITOR 
5cba cd aa fd			call debug_vector  
5cbd				endm  
# End of macro CALLMONITOR
5cbd					endif 
5cbd			 
5cbd 3e ff				ld a, 255 
5cbf 32 98 f9				ld (spi_cartdev), a 
5cc2			 
5cc2					; get bank 
5cc2			 
5cc2					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5cc2 cd 4d 22			call macro_dsp_valuehl 
5cc5				endm 
# End of macro FORTH_DSP_VALUEHL
5cc5			 
5cc5			;		push hl 
5cc5			 
5cc5					; destroy value TOS 
5cc5			 
5cc5					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5cc5 cd 05 23			call macro_forth_dsp_pop 
5cc8				endm 
# End of macro FORTH_DSP_POP
5cc8			 
5cc8					; one value on hl get other one back 
5cc8			 
5cc8			;		pop hl 
5cc8			 
5cc8			 
5cc8 0e ff				ld c, SPI_CE_HIGH 
5cca 06 30				ld b, '0'    ; human readable bank number 
5ccc			 
5ccc 7d					ld a, l 
5ccd			 
5ccd					if DEBUG_FORTH_WORDS 
5ccd						DMARK "BNK" 
5ccd f5				push af  
5cce 3a e2 5c			ld a, (.dmark)  
5cd1 32 a0 fd			ld (debug_mark),a  
5cd4 3a e3 5c			ld a, (.dmark+1)  
5cd7 32 a1 fd			ld (debug_mark+1),a  
5cda 3a e4 5c			ld a, (.dmark+2)  
5cdd 32 a2 fd			ld (debug_mark+2),a  
5ce0 18 03			jr .pastdmark  
5ce2 ..			.dmark: db "BNK"  
5ce5 f1			.pastdmark: pop af  
5ce6			endm  
# End of macro DMARK
5ce6						CALLMONITOR 
5ce6 cd aa fd			call debug_vector  
5ce9				endm  
# End of macro CALLMONITOR
5ce9					endif 
5ce9			 
5ce9					; active low 
5ce9			 
5ce9 fe 00				cp 0 
5ceb 28 28				jr z, .bset 
5ced fe 01				cp 1 
5cef 20 04				jr nz, .b2 
5cf1 cb 81				res 0, c 
5cf3 06 31				ld b, '1'    ; human readable bank number 
5cf5 fe 02		.b2:		cp 2 
5cf7 20 04				jr nz, .b3 
5cf9 cb 89				res 1, c 
5cfb 06 32				ld b, '2'    ; human readable bank number 
5cfd fe 03		.b3:		cp 3 
5cff 20 04				jr nz, .b4 
5d01 cb 91				res 2, c 
5d03 06 33				ld b, '3'    ; human readable bank number 
5d05 fe 04		.b4:		cp 4 
5d07 20 04				jr nz, .b5 
5d09 cb 99				res 3, c 
5d0b 06 34				ld b, '4'    ; human readable bank number 
5d0d fe 05		.b5:		cp 5 
5d0f 20 04				jr nz, .bset 
5d11 cb a1				res 4, c 
5d13 06 35				ld b, '5'    ; human readable bank number 
5d15			 
5d15			.bset: 
5d15 79					ld a, c 
5d16 32 95 f9				ld (spi_device),a 
5d19 78					ld a, b 
5d1a 32 94 f9				ld (spi_device_id),a 
5d1d					if DEBUG_FORTH_WORDS 
5d1d						DMARK "BN2" 
5d1d f5				push af  
5d1e 3a 32 5d			ld a, (.dmark)  
5d21 32 a0 fd			ld (debug_mark),a  
5d24 3a 33 5d			ld a, (.dmark+1)  
5d27 32 a1 fd			ld (debug_mark+1),a  
5d2a 3a 34 5d			ld a, (.dmark+2)  
5d2d 32 a2 fd			ld (debug_mark+2),a  
5d30 18 03			jr .pastdmark  
5d32 ..			.dmark: db "BN2"  
5d35 f1			.pastdmark: pop af  
5d36			endm  
# End of macro DMARK
5d36						CALLMONITOR 
5d36 cd aa fd			call debug_vector  
5d39				endm  
# End of macro CALLMONITOR
5d39					endif 
5d39			 
5d39					; set default SPI clk pulse time as disabled for BANK use 
5d39			 
5d39 3e 00				ld a, 0 
5d3b 32 99 f9				ld (spi_clktime), a 
5d3e			 
5d3e					NEXTW 
5d3e c3 39 24			jp macro_next 
5d41				endm 
# End of macro NEXTW
5d41			 
5d41			.CARTDEV: 
5d41				CWHEAD .ENDDEVICE 82 "CARTDEV" 7 WORD_FLAG_CODE 
5d41 66				db WORD_SYS_CORE+82             
5d42 ef 5d			dw .ENDDEVICE            
5d44 08				db 7 + 1 
5d45 .. 00			db "CARTDEV",0              
5d4d				endm 
# End of macro CWHEAD
5d4d			; | CARTDEV ( u1 -- ) Select cart device 1-8 (Disables BANK). Set to zero to disable devices. |  DONE 
5d4d					if DEBUG_FORTH_WORDS_KEY 
5d4d						DMARK "CDV" 
5d4d f5				push af  
5d4e 3a 62 5d			ld a, (.dmark)  
5d51 32 a0 fd			ld (debug_mark),a  
5d54 3a 63 5d			ld a, (.dmark+1)  
5d57 32 a1 fd			ld (debug_mark+1),a  
5d5a 3a 64 5d			ld a, (.dmark+2)  
5d5d 32 a2 fd			ld (debug_mark+2),a  
5d60 18 03			jr .pastdmark  
5d62 ..			.dmark: db "CDV"  
5d65 f1			.pastdmark: pop af  
5d66			endm  
# End of macro DMARK
5d66						CALLMONITOR 
5d66 cd aa fd			call debug_vector  
5d69				endm  
# End of macro CALLMONITOR
5d69					endif 
5d69			 
5d69					; disable se storage bank selection 
5d69			 
5d69 3e ff				ld a, SPI_CE_HIGH		; ce high 
5d6b 32 95 f9				ld (spi_device), a 
5d6e			 
5d6e					; get bank 
5d6e			 
5d6e					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5d6e cd 4d 22			call macro_dsp_valuehl 
5d71				endm 
# End of macro FORTH_DSP_VALUEHL
5d71			 
5d71			;		push hl 
5d71			 
5d71					; destroy value TOS 
5d71			 
5d71					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5d71 cd 05 23			call macro_forth_dsp_pop 
5d74				endm 
# End of macro FORTH_DSP_POP
5d74			 
5d74					; one value on hl get other one back 
5d74			 
5d74			;		pop hl 
5d74			 
5d74					; active low 
5d74			 
5d74 0e ff				ld c, 255 
5d76			 
5d76 7d					ld a, l 
5d77					if DEBUG_FORTH_WORDS 
5d77						DMARK "CDV" 
5d77 f5				push af  
5d78 3a 8c 5d			ld a, (.dmark)  
5d7b 32 a0 fd			ld (debug_mark),a  
5d7e 3a 8d 5d			ld a, (.dmark+1)  
5d81 32 a1 fd			ld (debug_mark+1),a  
5d84 3a 8e 5d			ld a, (.dmark+2)  
5d87 32 a2 fd			ld (debug_mark+2),a  
5d8a 18 03			jr .pastdmark  
5d8c ..			.dmark: db "CDV"  
5d8f f1			.pastdmark: pop af  
5d90			endm  
# End of macro DMARK
5d90						CALLMONITOR 
5d90 cd aa fd			call debug_vector  
5d93				endm  
# End of macro CALLMONITOR
5d93					endif 
5d93 fe 00				cp 0 
5d95 28 30				jr z, .cset 
5d97 fe 01				cp 1 
5d99 20 02				jr nz, .c2 
5d9b cb 81				res 0, c 
5d9d fe 02		.c2:		cp 2 
5d9f 20 02				jr nz, .c3 
5da1 cb 89				res 1, c 
5da3 fe 03		.c3:		cp 3 
5da5 20 02				jr nz, .c4 
5da7 cb 91				res 2, c 
5da9 fe 04		.c4:		cp 4 
5dab 20 02				jr nz, .c5 
5dad cb 99				res 3, c 
5daf fe 05		.c5:		cp 5 
5db1 20 02				jr nz, .c6 
5db3 cb a1				res 4, c 
5db5 fe 06		.c6:		cp 6 
5db7 20 02				jr nz, .c7 
5db9 cb a9				res 5, c 
5dbb fe 07		.c7:		cp 7 
5dbd 20 02				jr nz, .c8 
5dbf cb b1				res 6, c 
5dc1 fe 08		.c8:		cp 8 
5dc3 20 02				jr nz, .cset 
5dc5 cb b9				res 7, c 
5dc7 79			.cset:		ld a, c 
5dc8 32 98 f9				ld (spi_cartdev),a 
5dcb			 
5dcb					if DEBUG_FORTH_WORDS 
5dcb						DMARK "CD2" 
5dcb f5				push af  
5dcc 3a e0 5d			ld a, (.dmark)  
5dcf 32 a0 fd			ld (debug_mark),a  
5dd2 3a e1 5d			ld a, (.dmark+1)  
5dd5 32 a1 fd			ld (debug_mark+1),a  
5dd8 3a e2 5d			ld a, (.dmark+2)  
5ddb 32 a2 fd			ld (debug_mark+2),a  
5dde 18 03			jr .pastdmark  
5de0 ..			.dmark: db "CD2"  
5de3 f1			.pastdmark: pop af  
5de4			endm  
# End of macro DMARK
5de4						CALLMONITOR 
5de4 cd aa fd			call debug_vector  
5de7				endm  
# End of macro CALLMONITOR
5de7					endif 
5de7			 
5de7					; set default SPI clk pulse time as 10ms for CARTDEV use 
5de7			 
5de7 3e 0a				ld a, $0a 
5de9 32 99 f9				ld (spi_clktime), a 
5dec					NEXTW 
5dec c3 39 24			jp macro_next 
5def				endm 
# End of macro NEXTW
5def			endif 
5def			 
5def			.ENDDEVICE: 
5def			; eof 
5def			 
# End of file forth_words_device.asm
5def			 
5def			; var handler 
5def			 
5def			 
5def			.VARS: 
5def				CWHEAD .V0 99 "VAR" 3 WORD_FLAG_CODE 
5def 77				db WORD_SYS_CORE+99             
5df0 a0 5e			dw .V0            
5df2 04				db 3 + 1 
5df3 .. 00			db "VAR",0              
5df7				endm 
# End of macro CWHEAD
5df7			;| VAR ( u1 -- )  Get the address of the variable referenced on TOS  | TO TEST 
5df7			;| 
5df7			;| The variable name should consist of a single letter. e.g. "a" 
5df7			;! If a full string is passed then only the first char is looked at 
5df7			;| Any other char could exceed bounds checks!  
5df7			 
5df7					if DEBUG_FORTH_WORDS_KEY 
5df7						DMARK "VAR" 
5df7 f5				push af  
5df8 3a 0c 5e			ld a, (.dmark)  
5dfb 32 a0 fd			ld (debug_mark),a  
5dfe 3a 0d 5e			ld a, (.dmark+1)  
5e01 32 a1 fd			ld (debug_mark+1),a  
5e04 3a 0e 5e			ld a, (.dmark+2)  
5e07 32 a2 fd			ld (debug_mark+2),a  
5e0a 18 03			jr .pastdmark  
5e0c ..			.dmark: db "VAR"  
5e0f f1			.pastdmark: pop af  
5e10			endm  
# End of macro DMARK
5e10						CALLMONITOR 
5e10 cd aa fd			call debug_vector  
5e13				endm  
# End of macro CALLMONITOR
5e13					endif 
5e13			 
5e13					FORTH_DSP_VALUEHL 
5e13 cd 4d 22			call macro_dsp_valuehl 
5e16				endm 
# End of macro FORTH_DSP_VALUEHL
5e16			 
5e16 7e					ld a, (hl)    ; get first char on of the string 
5e17			 
5e17			 
5e17					if DEBUG_FORTH_WORDS 
5e17						DMARK "VR1" 
5e17 f5				push af  
5e18 3a 2c 5e			ld a, (.dmark)  
5e1b 32 a0 fd			ld (debug_mark),a  
5e1e 3a 2d 5e			ld a, (.dmark+1)  
5e21 32 a1 fd			ld (debug_mark+1),a  
5e24 3a 2e 5e			ld a, (.dmark+2)  
5e27 32 a2 fd			ld (debug_mark+2),a  
5e2a 18 03			jr .pastdmark  
5e2c ..			.dmark: db "VR1"  
5e2f f1			.pastdmark: pop af  
5e30			endm  
# End of macro DMARK
5e30						CALLMONITOR 
5e30 cd aa fd			call debug_vector  
5e33				endm  
# End of macro CALLMONITOR
5e33					endif 
5e33					 
5e33 f5					push af	 
5e34					FORTH_DSP_POP 
5e34 cd 05 23			call macro_forth_dsp_pop 
5e37				endm 
# End of macro FORTH_DSP_POP
5e37 f1					pop af 
5e38			 
5e38					; convert to upper 
5e38			 
5e38 cd 53 12				call to_upper 
5e3b					if DEBUG_FORTH_WORDS 
5e3b						DMARK "Vaa" 
5e3b f5				push af  
5e3c 3a 50 5e			ld a, (.dmark)  
5e3f 32 a0 fd			ld (debug_mark),a  
5e42 3a 51 5e			ld a, (.dmark+1)  
5e45 32 a1 fd			ld (debug_mark+1),a  
5e48 3a 52 5e			ld a, (.dmark+2)  
5e4b 32 a2 fd			ld (debug_mark+2),a  
5e4e 18 03			jr .pastdmark  
5e50 ..			.dmark: db "Vaa"  
5e53 f1			.pastdmark: pop af  
5e54			endm  
# End of macro DMARK
5e54						CALLMONITOR 
5e54 cd aa fd			call debug_vector  
5e57				endm  
# End of macro CALLMONITOR
5e57					endif 
5e57 06 41				ld b, 'A' 
5e59 90					sub b			; set offset 
5e5a					if DEBUG_FORTH_WORDS 
5e5a						DMARK "Vbb" 
5e5a f5				push af  
5e5b 3a 6f 5e			ld a, (.dmark)  
5e5e 32 a0 fd			ld (debug_mark),a  
5e61 3a 70 5e			ld a, (.dmark+1)  
5e64 32 a1 fd			ld (debug_mark+1),a  
5e67 3a 71 5e			ld a, (.dmark+2)  
5e6a 32 a2 fd			ld (debug_mark+2),a  
5e6d 18 03			jr .pastdmark  
5e6f ..			.dmark: db "Vbb"  
5e72 f1			.pastdmark: pop af  
5e73			endm  
# End of macro DMARK
5e73						CALLMONITOR 
5e73 cd aa fd			call debug_vector  
5e76				endm  
# End of macro CALLMONITOR
5e76					endif 
5e76 cb 27				sla a  
5e78				 
5e78					 
5e78					if DEBUG_FORTH_WORDS 
5e78						DMARK "VR2" 
5e78 f5				push af  
5e79 3a 8d 5e			ld a, (.dmark)  
5e7c 32 a0 fd			ld (debug_mark),a  
5e7f 3a 8e 5e			ld a, (.dmark+1)  
5e82 32 a1 fd			ld (debug_mark+1),a  
5e85 3a 8f 5e			ld a, (.dmark+2)  
5e88 32 a2 fd			ld (debug_mark+2),a  
5e8b 18 03			jr .pastdmark  
5e8d ..			.dmark: db "VR2"  
5e90 f1			.pastdmark: pop af  
5e91			endm  
# End of macro DMARK
5e91						CALLMONITOR 
5e91 cd aa fd			call debug_vector  
5e94				endm  
# End of macro CALLMONITOR
5e94					endif 
5e94			 
5e94 21 29 f9				ld hl, cli_var_array2 
5e97 cd de 0f				call addatohl 
5e9a cd 48 20				call forth_push_numhl 
5e9d			 
5e9d			 
5e9d				       NEXTW 
5e9d c3 39 24			jp macro_next 
5ea0				endm 
# End of macro NEXTW
5ea0			.V0: 
5ea0				CWHEAD .V0Q 100 "V0!" 3 WORD_FLAG_CODE 
5ea0 78				db WORD_SYS_CORE+100             
5ea1 b8 5e			dw .V0Q            
5ea3 04				db 3 + 1 
5ea4 .. 00			db "V0!",0              
5ea8				endm 
# End of macro CWHEAD
5ea8			;| V0! ( u1 -- )  Store value to v0  | DONE 
5ea8			 
5ea8					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5ea8 cd 4d 22			call macro_dsp_valuehl 
5eab				endm 
# End of macro FORTH_DSP_VALUEHL
5eab			 
5eab 11 5d f9				ld de, cli_var_array 
5eae			 
5eae eb					ex de, hl 
5eaf 73					ld (hl), e 
5eb0 23					inc hl 
5eb1 72					ld (hl), d 
5eb2			 
5eb2					; destroy value TOS 
5eb2			 
5eb2					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5eb2 cd 05 23			call macro_forth_dsp_pop 
5eb5				endm 
# End of macro FORTH_DSP_POP
5eb5			 
5eb5				       NEXTW 
5eb5 c3 39 24			jp macro_next 
5eb8				endm 
# End of macro NEXTW
5eb8			.V0Q: 
5eb8				CWHEAD .V1S 101 "V0@" 3 WORD_FLAG_CODE 
5eb8 79				db WORD_SYS_CORE+101             
5eb9 c9 5e			dw .V1S            
5ebb 04				db 3 + 1 
5ebc .. 00			db "V0@",0              
5ec0				endm 
# End of macro CWHEAD
5ec0			;| V0@ ( --u )  Put value of v0 onto stack | DONE 
5ec0 2a 5d f9				ld hl, (cli_var_array) 
5ec3 cd 48 20				call forth_push_numhl 
5ec6			 
5ec6				       NEXTW 
5ec6 c3 39 24			jp macro_next 
5ec9				endm 
# End of macro NEXTW
5ec9			.V1S: 
5ec9				CWHEAD .V1Q 102 "V1!" 3 WORD_FLAG_CODE 
5ec9 7a				db WORD_SYS_CORE+102             
5eca e1 5e			dw .V1Q            
5ecc 04				db 3 + 1 
5ecd .. 00			db "V1!",0              
5ed1				endm 
# End of macro CWHEAD
5ed1			;| V1! ( u1 -- )  Store value to v1 | DONE 
5ed1					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5ed1 cd 4d 22			call macro_dsp_valuehl 
5ed4				endm 
# End of macro FORTH_DSP_VALUEHL
5ed4			 
5ed4 11 5f f9				ld de, cli_var_array+2 
5ed7				 
5ed7 eb					ex de, hl 
5ed8 73					ld (hl), e 
5ed9 23					inc hl 
5eda 72					ld (hl), d 
5edb			 
5edb					; destroy value TOS 
5edb			 
5edb					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5edb cd 05 23			call macro_forth_dsp_pop 
5ede				endm 
# End of macro FORTH_DSP_POP
5ede				       NEXTW 
5ede c3 39 24			jp macro_next 
5ee1				endm 
# End of macro NEXTW
5ee1			.V1Q: 
5ee1				CWHEAD .V2S 103 "V1@" 3 WORD_FLAG_CODE 
5ee1 7b				db WORD_SYS_CORE+103             
5ee2 f2 5e			dw .V2S            
5ee4 04				db 3 + 1 
5ee5 .. 00			db "V1@",0              
5ee9				endm 
# End of macro CWHEAD
5ee9			;| V1@ ( --u )  Put value of v1 onto stack | DONE 
5ee9 2a 5f f9				ld hl, (cli_var_array+2) 
5eec cd 48 20				call forth_push_numhl 
5eef				       NEXTW 
5eef c3 39 24			jp macro_next 
5ef2				endm 
# End of macro NEXTW
5ef2			.V2S: 
5ef2				CWHEAD .V2Q 104 "V2!" 3 WORD_FLAG_CODE 
5ef2 7c				db WORD_SYS_CORE+104             
5ef3 0a 5f			dw .V2Q            
5ef5 04				db 3 + 1 
5ef6 .. 00			db "V2!",0              
5efa				endm 
# End of macro CWHEAD
5efa			;| V2! ( u1 -- )  Store value to v2 | DONE 
5efa					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5efa cd 4d 22			call macro_dsp_valuehl 
5efd				endm 
# End of macro FORTH_DSP_VALUEHL
5efd			 
5efd 11 61 f9				ld de, cli_var_array+4 
5f00				 
5f00 eb					ex de, hl 
5f01 73					ld (hl), e 
5f02 23					inc hl 
5f03 72					ld (hl), d 
5f04			 
5f04					; destroy value TOS 
5f04			 
5f04					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5f04 cd 05 23			call macro_forth_dsp_pop 
5f07				endm 
# End of macro FORTH_DSP_POP
5f07				       NEXTW 
5f07 c3 39 24			jp macro_next 
5f0a				endm 
# End of macro NEXTW
5f0a			.V2Q: 
5f0a				CWHEAD .V3S 105 "V2@" 3 WORD_FLAG_CODE 
5f0a 7d				db WORD_SYS_CORE+105             
5f0b 1b 5f			dw .V3S            
5f0d 04				db 3 + 1 
5f0e .. 00			db "V2@",0              
5f12				endm 
# End of macro CWHEAD
5f12			;| V2@ ( --u )  Put value of v2 onto stack | DONE 
5f12 2a 61 f9				ld hl, (cli_var_array+4) 
5f15 cd 48 20				call forth_push_numhl 
5f18				       NEXTW 
5f18 c3 39 24			jp macro_next 
5f1b				endm 
# End of macro NEXTW
5f1b			.V3S: 
5f1b				CWHEAD .V3Q 104 "V3!" 3 WORD_FLAG_CODE 
5f1b 7c				db WORD_SYS_CORE+104             
5f1c 33 5f			dw .V3Q            
5f1e 04				db 3 + 1 
5f1f .. 00			db "V3!",0              
5f23				endm 
# End of macro CWHEAD
5f23			;| V3! ( u1 -- )  Store value to v3 | DONE 
5f23					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
5f23 cd 4d 22			call macro_dsp_valuehl 
5f26				endm 
# End of macro FORTH_DSP_VALUEHL
5f26			 
5f26 11 63 f9				ld de, cli_var_array+6 
5f29				 
5f29 eb					ex de, hl 
5f2a 73					ld (hl), e 
5f2b 23					inc hl 
5f2c 72					ld (hl), d 
5f2d			 
5f2d					; destroy value TOS 
5f2d			 
5f2d					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
5f2d cd 05 23			call macro_forth_dsp_pop 
5f30				endm 
# End of macro FORTH_DSP_POP
5f30				       NEXTW 
5f30 c3 39 24			jp macro_next 
5f33				endm 
# End of macro NEXTW
5f33			.V3Q: 
5f33				CWHEAD .END 105 "V3@" 3 WORD_FLAG_CODE 
5f33 7d				db WORD_SYS_CORE+105             
5f34 44 5f			dw .END            
5f36 04				db 3 + 1 
5f37 .. 00			db "V3@",0              
5f3b				endm 
# End of macro CWHEAD
5f3b			;| V3@ ( --u )  Put value of v3 onto stack | DONE 
5f3b 2a 63 f9				ld hl, (cli_var_array+6) 
5f3e cd 48 20				call forth_push_numhl 
5f41				       NEXTW 
5f41 c3 39 24			jp macro_next 
5f44				endm 
# End of macro NEXTW
5f44			 
5f44			 
5f44			 
5f44			 
5f44			 
5f44			; end of dict marker 
5f44			 
5f44 00			.END:    db WORD_SYS_END 
5f45 00 00			dw 0 
5f47 00				db 0 
5f48			 
5f48			; use to jp here for user dict words to save on macro expansion  
5f48			 
5f48			user_dict_next: 
5f48				NEXTW 
5f48 c3 39 24			jp macro_next 
5f4b				endm 
# End of macro NEXTW
5f4b			 
5f4b			 
5f4b			user_exec: 
5f4b				;    ld hl, <word code> 
5f4b				;    FORTH_RSP_NEXT - call macro_forth_rsp_next 
5f4b				;    call forthexec 
5f4b				;    jp user_dict_next   (NEXT) 
5f4b			        ;    <word code bytes> 
5f4b eb				ex de, hl 
5f4c 2a f7 f3			ld hl,(os_tok_ptr) 
5f4f				 
5f4f				FORTH_RSP_NEXT 
5f4f cd ef 1f			call macro_forth_rsp_next 
5f52				endm 
# End of macro FORTH_RSP_NEXT
5f52			 
5f52			if DEBUG_FORTH_UWORD 
5f52						DMARK "UEX" 
5f52 f5				push af  
5f53 3a 67 5f			ld a, (.dmark)  
5f56 32 a0 fd			ld (debug_mark),a  
5f59 3a 68 5f			ld a, (.dmark+1)  
5f5c 32 a1 fd			ld (debug_mark+1),a  
5f5f 3a 69 5f			ld a, (.dmark+2)  
5f62 32 a2 fd			ld (debug_mark+2),a  
5f65 18 03			jr .pastdmark  
5f67 ..			.dmark: db "UEX"  
5f6a f1			.pastdmark: pop af  
5f6b			endm  
# End of macro DMARK
5f6b				CALLMONITOR 
5f6b cd aa fd			call debug_vector  
5f6e				endm  
# End of macro CALLMONITOR
5f6e			endif 
5f6e			 
5f6e			 
5f6e			 
5f6e eb				ex de, hl 
5f6f 22 f7 f3			ld (os_tok_ptr), hl 
5f72				 
5f72				; Don't use next - Skips the first word in uword. 
5f72			 
5f72 c3 c2 24			jp exec1 
5f75			;	NEXT 
5f75			 
5f75			 
5f75			; eof 
# End of file forth_wordsv4.asm
5f75			endif 
5f75			;;;;;;;;;;;;;; Debug code 
5f75			 
5f75			 
5f75			;if DEBUG_FORTH_PARSE 
5f75 .. 00		.nowordfound: db "No match",0 
5f7e .. 00		.compword:	db "Comparing word ",0 
5f8e .. 00		.nextwordat:	db "Next word at",0 
5f9b .. 00		.charmatch:	db "Char match",0 
5fa6			;endif 
5fa6			if DEBUG_FORTH_JP 
5fa6			.foundword:	db "Word match. Exec..",0 
5fa6			endif 
5fa6			;if DEBUG_FORTH_PUSH 
5fa6 .. 00		.enddict:	db "Dict end. Push.",0 
5fb6 .. 00		.push_str:	db "Pushing string",0 
5fc5 .. 00		.push_num:	db "Pushing number",0 
5fd4 .. 00		.data_sp:	db "SP:",0 
5fd8 .. 00		.wordinhl:	db "Word in HL (2/0):",0 
5fea .. 00		.wordinde:	db "Word in DE (3/0):",0 
5ffc .. 00		.wordinbc:	db "Word in BC (4/0):",0 
600e			;endif 
600e			;if DEBUG_FORTH_MALLOC 
600e .. 00		.push_malloc:	db "Malloc address",0 
601d			;endif 
601d			 
601d			 
601d			 
601d			; display malloc address and current data stack pointer  
601d			 
601d			malloc_error: 
601d d5				push de 
601e f5				push af 
601f e5				push hl 
6020 cd aa 0d			call clear_display 
6023 11 43 60			ld de, .mallocerr 
6026 3e 00			ld a,0 
6028			;	ld de,os_word_scratch 
6028 cd bd 0d			call str_at_display 
602b 3e 11			ld a, display_row_1+17 
602d 11 a0 fd			ld de, debug_mark 
6030 cd bd 0d			call str_at_display 
6033 cd cd 0d			call update_display 
6036				;call break_point_state 
6036 cd 26 75			call cin_wait 
6039			 
6039			;	ld a, ' ' 
6039			;	ld (os_view_disable), a 
6039 cd 49 19			call bp_on 
603c e1				pop hl 
603d f1				pop af 
603e d1				pop de	 
603f				CALLMONITOR 
603f cd aa fd			call debug_vector  
6042				endm  
# End of macro CALLMONITOR
6042 c9				ret 
6043			 
6043 .. 00		.mallocerr: 	db "Malloc Error",0 
6050			;if DEBUG_FORTH_PUSH 
6050			display_data_sp: 
6050 f5				push af 
6051			 
6051				; see if disabled 
6051			 
6051			 
6051 3a aa fd			ld a, (debug_vector) 
6054 fe c9			cp $C9  ; RET 
6056				;ld a, (os_view_disable) 
6056				;cp '*' 
6056 28 67			jr z, .skipdsp 
6058			 
6058 e5				push hl 
6059 e5				push hl 
605a e5			push hl 
605b cd aa 0d			call clear_display 
605e e1			pop hl 
605f 7c				ld a,h 
6060 21 fb f3			ld hl, os_word_scratch 
6063 cd e7 11			call hexout 
6066 e1				pop hl 
6067 7d				ld a,l 
6068 21 fd f3			ld hl, os_word_scratch+2 
606b cd e7 11			call hexout 
606e 21 ff f3			ld hl, os_word_scratch+4 
6071 3e 00			ld a,0 
6073 77				ld (hl),a 
6074 11 fb f3			ld de,os_word_scratch 
6077 3e 28				ld a, display_row_2 
6079 cd bd 0d				call str_at_display 
607c 11 d8 5f			ld de, .wordinhl 
607f 3e 00			ld a, display_row_1 
6081			 
6081 cd bd 0d				call str_at_display 
6084 11 a0 fd			ld de, debug_mark 
6087 3e 11			ld a, display_row_1+17 
6089			 
6089 cd bd 0d				call str_at_display 
608c			 
608c				; display current data stack pointer 
608c 11 d4 5f			ld de,.data_sp 
608f 3e 30				ld a, display_row_2 + 8 
6091 cd bd 0d				call str_at_display 
6094			 
6094 2a 23 f9			ld hl,(cli_data_sp) 
6097 e5				push hl 
6098 7c				ld a,h 
6099 21 fb f3			ld hl, os_word_scratch 
609c cd e7 11			call hexout 
609f e1				pop hl 
60a0 7d				ld a,l 
60a1 21 fd f3			ld hl, os_word_scratch+2 
60a4 cd e7 11			call hexout 
60a7 21 ff f3			ld hl, os_word_scratch+4 
60aa 3e 00			ld a,0 
60ac 77				ld (hl),a 
60ad 11 fb f3			ld de,os_word_scratch 
60b0 3e 33				ld a, display_row_2 + 11 
60b2 cd bd 0d				call str_at_display 
60b5			 
60b5			 
60b5 cd cd 0d			call update_display 
60b8 cd ed 0c			call delay1s 
60bb cd ed 0c			call delay1s 
60be e1				pop hl 
60bf			.skipdsp: 
60bf f1				pop af 
60c0 c9				ret 
60c1			 
60c1			display_data_malloc: 
60c1			 
60c1 f5				push af 
60c2 e5				push hl 
60c3 e5				push hl 
60c4 e5			push hl 
60c5 cd aa 0d			call clear_display 
60c8 e1			pop hl 
60c9 7c				ld a,h 
60ca 21 fb f3			ld hl, os_word_scratch 
60cd cd e7 11			call hexout 
60d0 e1				pop hl 
60d1 7d				ld a,l 
60d2 21 fd f3			ld hl, os_word_scratch+2 
60d5 cd e7 11			call hexout 
60d8 21 ff f3			ld hl, os_word_scratch+4 
60db 3e 00			ld a,0 
60dd 77				ld (hl),a 
60de 11 fb f3			ld de,os_word_scratch 
60e1 3e 28				ld a, display_row_2 
60e3 cd bd 0d				call str_at_display 
60e6 11 0e 60			ld de, .push_malloc 
60e9 3e 00			ld a, display_row_1 
60eb			 
60eb cd bd 0d				call str_at_display 
60ee			 
60ee				; display current data stack pointer 
60ee 11 d4 5f			ld de,.data_sp 
60f1 3e 30				ld a, display_row_2 + 8 
60f3 cd bd 0d				call str_at_display 
60f6			 
60f6 2a 23 f9			ld hl,(cli_data_sp) 
60f9 e5				push hl 
60fa 7c				ld a,h 
60fb 21 fb f3			ld hl, os_word_scratch 
60fe cd e7 11			call hexout 
6101 e1				pop hl 
6102 7d				ld a,l 
6103 21 fd f3			ld hl, os_word_scratch+2 
6106 cd e7 11			call hexout 
6109 21 ff f3			ld hl, os_word_scratch+4 
610c 3e 00			ld a,0 
610e 77				ld (hl),a 
610f 11 fb f3			ld de,os_word_scratch 
6112 3e 33				ld a, display_row_2 + 11 
6114 cd bd 0d				call str_at_display 
6117			 
6117 cd cd 0d			call update_display 
611a cd ed 0c			call delay1s 
611d cd ed 0c			call delay1s 
6120 e1				pop hl 
6121 f1				pop af 
6122 c9				ret 
6123			;endif 
6123			 
6123			include "forth_autostart.asm" 
6123			; list of commands to perform at system start up 
6123			 
6123			startcmds: 
6123			;	dw test11 
6123			;	dw test12 
6123			;	dw test13 
6123			;	dw test14 
6123			;	dw test15 
6123			;	dw test16 
6123			;	dw test17 
6123			;	dw ifthtest1 
6123			;	dw ifthtest2 
6123			;	dw ifthtest3 
6123			;	dw mmtest1 
6123			;	dw mmtest2 
6123			;	dw mmtest3 
6123			;	dw mmtest4 
6123			;	dw mmtest5 
6123			;	dw mmtest6 
6123			;	dw iftest1 
6123			;	dw iftest2 
6123			;	dw iftest3 
6123			;	dw looptest1 
6123			;	dw looptest2 
6123			;	dw test1 
6123			;	dw test2 
6123			;	dw test3 
6123			;	dw test4 
6123			;	dw game2r 
6123			;	dw game2b1 
6123			;	dw game2b2 
6123			 
6123				; start up words that are actually useful 
6123			 
6123			;    dw spi1 
6123			;    dw spi2 
6123			;    dw spi3 
6123			;    dw spi4 
6123			;    dw spi5 
6123			;    dw spi6 
6123			;    dw spi7 
6123			; 
6123			;    dw spi8 
6123			;    dw spi9 
6123			;    dw spi10 
6123			 
6123			; file editor 
6123			;	dw edit1 
6123			;	dw edit2 
6123			;	dw edit3 
6123			 
6123			;	dw longread 
6123 43 65			dw clrstack 
6125 77 65			dw type 
6127			;	dw stest 
6127 9c 65			dw strncpy 
6129			;	dw list 
6129 fd 65			dw start1 
612b 0d 66			dw start2 
612d			;	dw start3 
612d			;	dw start3b 
612d			;	dw start3c 
612d			 
612d				; (unit) testing words 
612d			 
612d			;	dw mtesta 
612d			;	dw mtestb 
612d			;	dw mtestc 
612d			;	dw mtestd 
612d			;	dw mteste 
612d			 
612d				; demo/game words 
612d			 
612d			;        dw game3w 
612d			;        dw game3p 
612d			;        dw game3sc 
612d			;        dw game3vsi 
612d			;        dw game3vs 
612d				 
612d			;	dw game2b 
612d			;	dw game2bf 
612d			;	dw game2mba 
612d			;	dw game2mbas 
612d			;	dw game2mb 
612d			 
612d 3d 69			dw game1 
612f 4e 69			dw game1a 
6131 b0 69			dw game1b 
6133 e5 69			dw game1c 
6135 1b 6a			dw game1d 
6137 4c 6a			dw game1s 
6139 60 6a			dw game1t 
613b 75 6a			dw game1f 
613d a9 6a			dw game1z 
613f ed 6a			dw game1zz 
6141			 
6141 76 67			dw test5 
6143 ae 67			dw test6 
6145 e6 67			dw test7 
6147 fa 67			dw test8 
6149 26 68			dw test9 
614b 3c 68			dw test10 
614d				 
614d c4 6b		        dw ssv5 
614f a8 6b		        dw ssv4 
6151 8c 6b		        dw ssv3 
6153 56 6b		        dw ssv2 
6155 dd 6b		        dw ssv1 
6157 25 6c		        dw ssv1cpm 
6159			;	dw keyup 
6159			;	dw keydown 
6159			;	dw keyleft 
6159			;	dw keyright 
6159			;	dw 	keyf1 
6159			;	dw keyf2 
6159			;	dw keyf3 
6159			;	dw keyf4 
6159			;	dw keyf5 
6159			;	dw keyf6 
6159			;	dw keyf7 
6159			;	dw keyf8 
6159			;	dw keyf9 
6159			;	dw keyf10 
6159			;	dw keyf11 
6159			;	dw keyf12 
6159			;	dw keytab 
6159			;	dw keycr 
6159			;	dw keyhome 
6159			;	dw keyend 
6159			;	dw keybs 
6159 00 00			db 0, 0	 
615b			 
615b			 
615b			; File Editor 
615b			 
615b			; ( id - ) use 'e' to edit the displayed line 
615b .. 00		edit1: db ": edc waitk $65 = if ede then ; ", 0 
617c .. 00		edit2: db ": ede storepage ptr $02 + cls dedit filepage bupd ; ", 0 
61b1			;edit2: db ": ede v1@ v0@ record drop storepage ptr $02 + cls dedit filepage bupd ; ", 0 
61b1 .. 00		edit3: db ": ed dup v0! open $01 do i v0@ record cls . edc loop ; ",0 
61e9			;edit3: db ": ed dup v0! open $01 do i v0@ record cls . i v1! edc loop ; ",0 
61e9			 
61e9			; SPI Net support words 
61e9			 
61e9			; v0! = node to send to 
61e9			; ( str count - ) 
61e9 .. 00		spi1:       db ": spitype spiceh $00 do dup i + @ v0@ spicel $10 spio spio spio spiceh $01 pause loop ; ",0 
6242			 
6242			; spiputc ( char node - ) 
6242 .. 00		spi2:       db ": spiputc spicel $10 spio spio ptr @ spio spiceh ; ",0 
6276			; spiputc ( u node - ) 
6276 .. 00		spi2b:       db ": spiputb spicel $10 spio spio spio spiceh ; ",0 
62a4			 
62a4			; spigetc ( - n ) 
62a4 .. 00		spi4:       db ": spigetc spicel $11 spio spii spiceh ; ", 0 
62cd			 
62cd			; getnode ( - n ) 
62cd .. 00		spi5:       db ": getnode spicel $18 spio spii nop spiceh ; ", 0 
62fa			 
62fa			; ( str node - )  
62fa .. 00		spi3:       db ": sendnode v0! count spiceh $00 do dup i + @ v0@ spicel $10 spio spio spio spiceh $01 pause loop ; ; ",0 
6360			; store string ( str i - ) 
6360			 
6360			;spi3:       db ": storestrold spicel $03 spio spio ptr count clkstro spiceh ; ", 0 
6360 .. 00		spi6:       db ": storestr spicel $12 spio spio count $00 do dup i + @ spio $01 pause loop spiceh ; ", 0 
63b5			 
63b5			; get string ( addr i -  )    TO FIX 
63b5			 
63b5 .. 00		spi7:       db ": getstorestr spicel $13 spio spio \" \" repeat spii dup concat $00 = not until spiceh ; ", 0 
640d			 
640d			 
640d			; NETCHAT (TODO) 
640d			; Program to allow two nodes to chat with eachother 
640d			; 
640d			; v0 - target node 
640d			;  
640d			; accept input at 0,0 
640d			; if input is string send spitype to target node 
640d			; starting at row 2,0 , while spigetchr is not zero ->  
640d			; 
640d			; 
640d			; TODO add paging of get request 
640d			 
640d			; ( node - ) 
640d .. 00		spi8:		db ": netchatp $00 $00 at accept ;", 0 
642c .. 00		spi9: 		db ": netchatr repeat spigetchr dup dup $00 = not if emit then $00 = not until $02 pause ; ",0 
6484 .. 00		spi10:		db ": netchat v0! repeat netchatp count dup $00 > if spitype $01 pause then cls $00 $03 at \">\" . netchatr true until nop ; ", 0 
64fc			 
64fc			 
64fc			; Long read of currently open file 
64fc .. 00		longread:   db ": lread read repeat readcont if read concat then readcont until nop ; ", 0 
6543			 
6543			; clear stack  
6543			 
6543 .. 00		clrstack:  db ": clrstk depth ?dup if $01 do drop loop then nop ; ", 0 
6577			 
6577			; type ( addr count - ) 
6577 .. 00		type:     db ": type $00 do dup i + @ emit loop ; ", 0 
659c			 
659c			; some direct memory words 
659c			; strncpy ( len t f -- t ) 
659c			 
659c .. 00		strncpy:   db ": strncpy $00 scratch 2! $02 scratch 2! do $00 scratch 2@ i + @ $02 scratch 2@ i + ! loop nop  ;",0 
65fd			 
65fd .. 00		start1:     	db ": bpon $00 bp ;",0 
660d .. 00		start2:     	db ": bpoff $01 bp ;",0 
661e .. 00		start3b:         db ": ls dir cls drop dup $00 > if $01 do $08 $04 at . $01 $04 at . $04 $04 at . $23 $04 at accept drop scroll loop then nop ;",0 
6699 .. 00		start3c:         db ": dirlist dir cls drop dup $00 > if $01 do \"/\" .> .> \"Ext:\" .> .> \"Id: \" .> .>  loop then nop ;",0 
66f9			 
66f9 .. 00		tuck:         db ": tuck swap over ;", 0 
670c			 
670c			; a handy word to list items on the stack 
670c			 
670c .. 00		list:            db ": more cls repeat scroll $01 $04 at depth . $0a $04 at .> $01 $01 at accept drop depth 0= not until nop ;",0 
6776			 
6776			 
6776			; test stack  
6776			; rnd8 stest 
6776			 
6776			;stest:   db ": stest cls  v0! v0@ $00 do rnd8 $01 $01 at i . $01 pause loop v0@ $00 do drop $12 $01 at depth . $01 pause loop nop ;",0  
6776			 
6776			; random malloc and free cycles 
6776			 
6776			;mtesta:      db ": mtesta $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . rnd8 dup $13 $01 at . malloc heap $1f $01 at . $1f $02 at . $01 pause free $01 until nop ;", 0 
6776			 
6776			; fixed malloc and free cycles 
6776			 
6776			;mtestb:      db ": mtestb $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 malloc heap $1f $01 at . $1f $02 at . $01 pause free $01 until nop ;", 0 
6776			 
6776			; fixed double string push and drop cycle  
6776			 
6776			;mtestc:      db ": mtestc $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 spaces $2f spaces  heap $1f $01 at . $1f $02 at . $01 pause drop drop $01 until nop ; ", 0 
6776			 
6776			; consistent fixed string push and drop cycle  
6776			 
6776			;mtestd:      db ": mtestd $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 spaces heap $1f $01 at . $1f $02 at . $01 pause drop $01 until nop ; ", 0 
6776			 
6776			;mteste:      db ": mteste $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . rnd8 dup spaces $0f $02 at . heap $1f $01 at . $1f $02 at . $01 pause drop $01 until nop ; ", 0 
6776			 
6776			;test1:		db ": aa 1 2 3 ;", 0 
6776			;test2:     	db "111 aa 888 999",0 
6776			;test3:     	db ": bb 77 ;",0 
6776			;test4:     	db "$02 $01 do i . loop bb",0 
6776			 
6776 .. 00		test5:     	db ": hline $13 $00 do i $01 at 1 . i $04 at 1 . loop nop ;",0 
67ae .. 00		test6:     	db ": vline $04 $01 do $00 i at 1 . $13 i at 1 . loop nop ;",0 
67e6 .. 00		test7:     	db ": box hline vline ;",0 
67fa .. 00		test8:     	db ": world cls box $03 $03 at Hello-World! . ;",0 
6826 .. 00		test9:     	db ": sw $01 adsp world ;",0 
683c .. 00		test10:     	db ": fw $00 adsp world draw $05 pause ;",0 
6861			;test11:     	db "hello create .",0 
6861			;test12:     	db "hello2 create .",0 
6861			 
6861			;mmtest1:     	db "cls $0001 $0008 MIN . $0002 pause",0 
6861			;mmtest2:     	db "cls $0101 $0008 MIN . $0002 pause",0 
6861			;mmtest3:     	db "cls $0001 $0008 MAX . $0002 pause",0 
6861			;mmtest4:     	db "cls $0101 $0008 MAX . $0002 pause",0 
6861			;mmtest5:     	db "cls $0001 $0001 MIN . $0002 pause",0 
6861			;mmtest6:     	db "cls $0001 $0001 MAX . $0002 pause",0 
6861			 
6861			;iftest1:     	db "$0001 IF cls .",0 
6861			;iftest2:     	db "$0000 IF cls .",0 
6861			;iftest3:     	db "$0002 $0003 - IF cls .",0 
6861			;looptest1:     	db "$0003 $0001 do i . loop 8",0 
6861			;looptest2:     	db "$0003 $0001 do i . $0001 pause loop 8",0 
6861			 
6861			;ifthtest1:     	db "$0001 IF is-true . $0005 pause THEN next-word . $0005 pause",0 
6861			;ifthtest2:     	db "$0000 IF is-true . $0005 pause THEN next-word . $0005 pause",0 
6861			;ifthtest3:     	db "$0002 $0003 - IF is-true . $0005 pause THEN next-word . $0005 pause",0 
6861			 
6861			 
6861 .. 00		sound1: db ": note spicel spio spiceh spicel ; ",0 
6885 .. 00		sound2: db ": slient $9f note $bf note $df note $ff note ; ", 0 
68b5 .. 00		sound3: db ": sound $01 cartdev $00 spitime ! ; ",0 
68da .. 00		sound4: db ": cha $00 ; ",0 
68e7 .. 00		sound5: db ": chb $20 ; ",0 
68f4 .. 00		sound6: db ": chc $40 ; ",0 
6901 .. 00		sound7: db ": chd $60 ; ",0 
690e .. 00		sound8: db ": cnote $80 + + note ; ", 0 
6926 .. 00		sound9: db ": cvol $90 + + note ; ", 0 
693d			 
693d			 
693d			 
693d			 
693d			; a small guess the number game 
693d			 
693d .. 00		game1:          db ": gsn rnd8 v1! ;",0 
694e .. 00		game1a:          db ": gs $00 $00 at Enter-a-number .- $00 $02 at between-1-and-255 .- $00 $03 at accept str2num v2! ;",0 
69b0			 
69b0 .. 00		game1b:          db ": gcb v2@ v1@ < if $00 $00 at Too-low! .- $01 then ;",0 
69e5 .. 00		game1c:          db ": gcc v2@ v1@ > if $00 $00 at Too-high! .- $01 then ;",0 
6a1b .. 00		game1d:          db ": gcd v2@ v1@ = if $00 $00 at Yes! .- $00 then ;",0 
6a4c .. 00		game1s:          db ": gck gcb gcc gcd ;",0 
6a60 .. 00		game1t:          db ": sc v3@ $01 + v3! ;",0 
6a75 .. 00		game1f:          db ": fsc v3@ cls $01 $01 at You-Took .- $02 $03 at . ;",0 
6aa9 .. 00		game1z:         db ": ga $00 v3! gsn repeat cls gs cls gck $02 pause sc until fsc nop ;",0 
6aed			 
6aed			; Using 'ga' save a high score across multiple runs using external storage 
6aed			 
6aed .. 00		game1zz:         db ": gas ga $01 bank $80 bread $01 $04 at Prev-Score .> storepage ptr $02 + dup 2@ . v3@ swap 2! $80 bupd ;",0 
6b56			 
6b56			 
6b56			;game2r:          db ": m2r rnd8 v1! ;  ",0, 0, 0, FORTH_END_BUFFER 
6b56			;game2b1:          db ": m2b1 $1f $00 do i v2@ at rnd8 $30 < if A . then loop nop ;  ",0, 0, 0, FORTH_END_BUFFER 
6b56			;game2b2:          db ": m2b cls $04 $01 do i v2! m2b1 loop ;  ",0, 0, 0, FORTH_END_BUFFER 
6b56			 
6b56			; simple screen saver to test code memory reuse to destruction 
6b56			 
6b56 .. 00		ssv2:            db ": ssvchr $2a $2d rnd dup $2c = if drop $20 then nop ;",0 
6b8c .. 00		ssv3:            db ": ssvposx $01 $27 rnd v0! ;",0 
6ba8 .. 00		ssv4:            db ": ssvposy $01 $05 rnd v1! ;",0 
6bc4 .. 00		ssv5:            db ": ssvt ssvposx ssvposy ;",0 
6bdd .. 00		ssv1:          db ": ssv cls repeat ssvposx ssvposy v0@ v1@ at ssvchr emit $01 until nop ;",0 
6c25 .. 00		ssv1cpm:          db ": ssvcpm cls repeat ssvposx ssvposy v0@ v1@ at ssvchr emit $01 pausems $01 until nop ;",0 
6c7c			;ssv1:          db ": ssv cls repeat ssvt v0@ v1@ at ssvchr emit $01 until nop ;",0 
6c7c			;ssv1:          db ": ssv ssvposx ssvposy at ssvchr ;",0 
6c7c			;ssv1:            db ": ssv repeat ssvpos rnd8 $10 if               $01 until nop ;",0 
6c7c			;ssv2:            db ": ssvchr v0! v1! at? ;",0 
6c7c			;ssv5:            db ": ssvt ssvposx ssvposy v0@ .> v1@ .> ;",0 
6c7c			;ssv2:            db ": ssvchr $2a $2d rnd  ;",0 
6c7c			 
6c7c			 
6c7c			 
6c7c			; minesweeper/battleship finding game 
6c7c			; draws a game board of random ship/mine positions 
6c7c			; user enters coords to see if it hits on 
6c7c			; game ends when all are hit 
6c7c			; when hit or miss says how many may be in the area 
6c7c			 
6c7c			; setup the game board and then hide it 
6c7c			;game2b:          db ": mbsetup $02 fb cls $04 $01 do i v2! $10 $01 do i v2@ at rnd8 $30 < if A . then loop loop $05 pause $01 fb ;",0 
6c7c			;game2bf:         db ": mbsetupf cls $04 $01 do i v2! $10 $01 do i v2@ at \"+\" . loop loop nop ;",0 
6c7c			;; prompt for where to target 
6c7c			;game2mba:        db ": mbp $12 $04 at Turns .> v3@ . $12 $03 at Score .> v0@ . $12 $01 at Enter-X-__ .- $1a $01 at accept $12 $02 at Enter-Y-__ .- $1a $02 at accept nop ;", 0  
6c7c			;game2mbas:        db ": mbsv str2num v2! str2num v1! nop ;", 0  
6c7c			;; TODO see if the entered coords hits or misses pushes char hit of miss 
6c7c			;game2mbht:      db ": mbckht nop ;",0 
6c7c			;game2mbms:      db ": mbcms nop ;",0 
6c7c			; TODO how many might be near by 
6c7c			;game2mb:          db ": mb $00 v0! $00 v3! mbsetup mbsetupf repeat mbp mbsv $02 fb mbckht mbcms v1@ v2@ at@ $01 fb v1@ v2@ at emit $01 until nop ;",0 
6c7c			 
6c7c			; Game 3 
6c7c			 
6c7c			; Vert scroller ski game - avoid the trees! 
6c7c			 
6c7c			; v0 score (ie turns) 
6c7c			; v1 player pos 
6c7c			; v2 left wall 
6c7c			; v3 right wall 
6c7c			 
6c7c			; Draw side walls randomly 
6c7c			 
6c7c			;game3w:   db ": vsw v2@ $04 at \"|\" . v3@ $04 at \"|\" . nop ;", 0 
6c7c			 
6c7c			; Draw player 
6c7c			;game3p:   db ": vsp v1@ $01 at \"V\" . nop ; ", 0 
6c7c			 
6c7c			; TODO Get Key 
6c7c			 
6c7c			; TODO Move left right 
6c7c			 
6c7c			; scroll and move walls a bit 
6c7c			 
6c7c			;game3sc:  db ": vsscl v2@ $01 + v2! v3@ $01 - v3! scroll nop ;", 0 
6c7c			 
6c7c			; main game loop 
6c7c			 
6c7c			;game3vsi:    db ": vsi $00 v0! $01 v2! $12 v3! $06 v1! nop ;",0 
6c7c			;game3vs:    db ": vs vsi repeat vsw vsp vsscl $05 pause scroll $01 until nop ;",0 
6c7c			 
6c7c			; key board defs 
6c7c			 
6c7c .. 00		keyup:       db ": keyup $05 ;",0 
6c8a .. 00		keydown:       db ": keydown $0a ;",0 
6c9a .. 00		keyleft:       db ": keyleft $0b ;",0 
6caa .. 00		keyright:       db ": keyright $0c ;",0 
6cbb .. 00		keyf1:       db ": keyf1 $10 ;",0 
6cc9 .. 00		keyf2:       db ": keyf2 $11 ;",0 
6cd7 .. 00		keyf3:       db ": keyf3 $12 ;",0 
6ce5 .. 00		keyf4:       db ": keyf4 $13 ;",0 
6cf3 .. 00		keyf5:       db ": keyf5 $14 ;",0 
6d01 .. 00		keyf6:       db ": keyf6 $15 ;",0 
6d0f .. 00		keyf7:       db ": keyf7 $16 ;",0 
6d1d .. 00		keyf8:       db ": keyf8 $17 ;",0 
6d2b .. 00		keyf9:       db ": keyf9 $18 ;",0 
6d39 .. 00		keyf10:       db ": keyf10 $19 ;",0 
6d48 .. 00		keyf11:       db ": keyf11 $1a ;",0 
6d57 .. 00		keyf12:       db ": keyf12 $1b ;",0 
6d66			 
6d66 .. 00		keytab:       db ": keytab $09 ;",0 
6d75 .. 00		keycr:       db ": keycr $0d ;",0 
6d83 .. 00		keyhome:       db ": keyhome $0e ;",0 
6d93 .. 00		keyend:       db ": keyend $0f ;",0 
6da2 .. 00		keybs:       db ": keybs $08 ;",0 
6db0			 
6db0			   
6db0			 
6db0			 
6db0			 
6db0			; eof 
# End of file forth_autostart.asm
6db0			 
6db0			 
6db0			 
6db0			; stack over and underflow checks 
6db0			 
6db0			; init the words to detect the under/overflow 
6db0			 
6db0			chk_stk_init: 
6db0				; a vague random number to check so we dont get any "lucky" hits 
6db0 3e 2d			ld a, 45 
6db2 6f				ld l, a 
6db3 00				nop 
6db4 3e 17			ld a, 23 
6db6 67				ld h, a 
6db7			 
6db7 22 d2 f0			ld (chk_word), hl     ; the word we need to check against 
6dba			 
6dba			;	ld (chk_stund), hl	; stack points.... 
6dba 22 3b fe			ld (chk_stovr), hl 
6dbd 22 21 f9			ld (chk_ret_und), hl 
6dc0 22 df f8			ld (chk_ret_ovr), hl 
6dc3 22 5d f8			ld (chk_loop_ovr), hl 
6dc6 22 5b f6			ld (chk_data_ovr), hl 
6dc9 c9				ret 
6dca				 
6dca			check_stacks: 
6dca				; check all stack words 
6dca			 
6dca e5				push hl 
6dcb d5				push de 
6dcc			 
6dcc			;	ld de,(chk_word) 
6dcc			;	ld hl, (chk_stund)	; stack points.... 
6dcc			;	if DEBUG_STK_FAULT 
6dcc			;		DMARK "FAa" 
6dcc			;		CALLMONITOR 
6dcc			;	endif 
6dcc			;	call cmp16 
6dcc			;	jp z, .chk_faulta 
6dcc			; 
6dcc			;	ld de, sfaultsu 
6dcc			;	jp .chk_fault 
6dcc			 
6dcc 2a 3b fe		.chk_faulta: ld hl, (chk_stovr) 
6dcf ed 5b d2 f0		ld de,(chk_word) 
6dd3				if DEBUG_STK_FAULT 
6dd3					DMARK "FAb" 
6dd3					CALLMONITOR 
6dd3				endif 
6dd3 cd fc 0f			call cmp16 
6dd6 28 06			jr z, .chk_fault1 
6dd8 11 7c 6e			ld de, sfaultso 
6ddb c3 2d 6e			jp .chk_fault 
6dde			.chk_fault1:  
6dde 2a 21 f9			ld hl, (chk_ret_und) 
6de1 ed 5b d2 f0		ld de,(chk_word) 
6de5				if DEBUG_STK_FAULT 
6de5					DMARK "FAU" 
6de5					CALLMONITOR 
6de5				endif 
6de5 cd fc 0f			call cmp16 
6de8 ca f1 6d			jp z, .chk_fault2 
6deb 11 8c 6e			ld de, sfaultru 
6dee c3 2d 6e			jp .chk_fault 
6df1			.chk_fault2:  
6df1 2a df f8			ld hl, (chk_ret_ovr) 
6df4 ed 5b d2 f0		ld de,(chk_word) 
6df8				if DEBUG_STK_FAULT 
6df8					DMARK "FA1" 
6df8					CALLMONITOR 
6df8				endif 
6df8 cd fc 0f			call cmp16 
6dfb ca 04 6e			jp z, .chk_fault3 
6dfe 11 9a 6e			ld de, sfaultro 
6e01 c3 2d 6e			jp .chk_fault 
6e04			.chk_fault3:  
6e04 2a 5d f8			ld hl, (chk_loop_ovr) 
6e07 ed 5b d2 f0		ld de,(chk_word) 
6e0b				if DEBUG_STK_FAULT 
6e0b					DMARK "FA2" 
6e0b					CALLMONITOR 
6e0b				endif 
6e0b cd fc 0f			call cmp16 
6e0e ca 17 6e			jp z, .chk_fault4 
6e11 11 b4 6e			ld de, sfaultlo 
6e14 c3 2d 6e			jp .chk_fault 
6e17			.chk_fault4:  
6e17 2a 5b f6			ld hl, (chk_data_ovr) 
6e1a ed 5b d2 f0		ld de,(chk_word) 
6e1e				if DEBUG_STK_FAULT 
6e1e					DMARK "FA3" 
6e1e					CALLMONITOR 
6e1e				endif 
6e1e cd fc 0f			call cmp16 
6e21 ca 2a 6e			jp z, .chk_fault5 
6e24 11 ce 6e			ld de, sfaultdo 
6e27 c3 2d 6e			jp .chk_fault 
6e2a			 
6e2a			 
6e2a			.chk_fault5:  
6e2a d1				pop de 
6e2b e1				pop hl 
6e2c			 
6e2c c9				ret 
6e2d			 
6e2d cd aa 0d		.chk_fault: 	call clear_display 
6e30 3e 28				ld a, display_row_2 
6e32 cd bd 0d				call str_at_display 
6e35 11 5e 6e				   ld de, .stackfault 
6e38 3e 00				ld a, display_row_1 
6e3a cd bd 0d				call str_at_display 
6e3d 11 a0 fd				    ld de, debug_mark 
6e40 3e 11				ld a, display_row_1+17 
6e42 cd bd 0d				call str_at_display 
6e45 cd cd 0d				call update_display 
6e48			 
6e48				; prompt before entering montior for investigating issue 
6e48			 
6e48 3e 78			ld a, display_row_4 
6e4a 11 26 1d			ld de, endprog 
6e4d			 
6e4d cd cd 0d			call update_display		 
6e50			 
6e50 cd c0 1f			call next_page_prompt 
6e53			 
6e53 d1				pop de 
6e54 e1				pop hl 
6e55 cd 7a 1d				call monitor 
6e58 cd df 23				call forth_warmstart 
6e5b c3 76 1c				jp warmstart_afterauto 
6e5e					;jp 0 
6e5e					;halt 
6e5e			 
6e5e			 
6e5e			 
6e5e .. 00		.stackfault: 	db "Stack fault:",0 
6e6b			 
6e6b .. 00		sfaultsu: 	db	"Stack under flow",0 
6e7c .. 00		sfaultso: 	db	"Stack over flow",0 
6e8c .. 00		sfaultru:	db "RTS underflow",0 
6e9a .. 00		sfaultro:	db "RTS overflow/LS underflow", 0 
6eb4 .. 00		sfaultlo:	db "LS overflow/DTS underflow", 0 
6ece .. 00		sfaultdo:	db "DTS overflow", 0 
6edb			 
6edb			 
6edb			fault_dsp_under: 
6edb 11 ed 6e			ld de, .dsp_under 
6ede c3 a3 6f			jp .show_fault 
6ee1			 
6ee1			fault_rsp_under: 
6ee1 11 fb 6e			ld de, .rsp_under 
6ee4 c3 a3 6f			jp .show_fault 
6ee7			fault_loop_under: 
6ee7 11 09 6f			ld de, .loop_under 
6eea c3 a3 6f			jp .show_fault 
6eed			 
6eed .. 00		.dsp_under: db "DSP Underflow",0 
6efb .. 00		.rsp_under: db "RSP Underflow",0 
6f09 .. 00		.loop_under: db "LOOP Underflow",0 
6f18			 
6f18			 
6f18 d5			type_faultn: 	push de 
6f19 e5					push hl 
6f1a cd aa 0d				call clear_display 
6f1d 11 47 6f				   ld de, .typefaultn 
6f20 3e 00				ld a, display_row_1 
6f22 cd bd 0d				call str_at_display 
6f25 11 a0 fd				    ld de, debug_mark 
6f28 3e 11				ld a, display_row_1+17 
6f2a cd bd 0d				call str_at_display 
6f2d cd cd 0d				call update_display 
6f30			 
6f30				; prompt before entering montior for investigating issue 
6f30			 
6f30 3e 78			ld a, display_row_4 
6f32 11 26 1d			ld de, endprog 
6f35			 
6f35 cd cd 0d			call update_display		 
6f38			 
6f38 cd c0 1f			call next_page_prompt 
6f3b			 
6f3b e5					push hl 
6f3c d5					push de 
6f3d cd 7a 1d				call monitor 
6f40 cd df 23				call forth_warmstart 
6f43 c3 76 1c				jp warmstart_afterauto 
6f46 76					halt 
6f47			 
6f47			 
6f47 .. 00		.typefaultn: db "NUM Type Expected TOS!",0 
6f5e			 
6f5e d5			type_faults: 	push de 
6f5f e5					push hl 
6f60 cd aa 0d				call clear_display 
6f63 11 8c 6f				   ld de, .typefaults 
6f66 3e 00				ld a, display_row_1 
6f68 cd bd 0d				call str_at_display 
6f6b 11 a0 fd				    ld de, debug_mark 
6f6e 3e 11				ld a, display_row_1+17 
6f70 cd bd 0d				call str_at_display 
6f73 cd cd 0d				call update_display 
6f76			 
6f76				; prompt before entering montior for investigating issue 
6f76			 
6f76 3e 78			ld a, display_row_4 
6f78 11 26 1d			ld de, endprog 
6f7b			 
6f7b cd cd 0d			call update_display		 
6f7e			 
6f7e cd c0 1f			call next_page_prompt 
6f81			 
6f81 e1					pop hl 
6f82 d1					pop de 
6f83 cd 7a 1d				call monitor 
6f86 cd df 23				call forth_warmstart 
6f89 c3 76 1c				jp warmstart_afterauto 
6f8c			 
6f8c			 
6f8c .. 00		.typefaults: db "STR Type Expected TOS!",0 
6fa3			 
6fa3			.show_fault: 	 
6fa3 d5					push de 
6fa4 cd aa 0d				call clear_display 
6fa7 d1					pop de 
6fa8 3e 00				ld a, display_row_1 
6faa cd bd 0d				call str_at_display 
6fad 11 a0 fd				    ld de, debug_mark 
6fb0 3e 11				ld a, display_row_1+17 
6fb2 cd bd 0d				call str_at_display 
6fb5 cd cd 0d				call update_display 
6fb8			 
6fb8				; prompt before entering montior for investigating issue 
6fb8			 
6fb8 3e 78			ld a, display_row_4 
6fba 11 26 1d			ld de, endprog 
6fbd			 
6fbd cd cd 0d			call update_display		 
6fc0			 
6fc0 cd c0 1f			call next_page_prompt 
6fc3			 
6fc3 e1					pop hl 
6fc4 d1					pop de 
6fc5 cd 7a 1d				call monitor 
6fc8			; do a dump to cli and not warmstart so we preserve all of the uwords.  
6fc8			; TODO Make optional fault restart to cli or warm boot? 
6fc8					;jp warmstart 
6fc8 c3 ba 1c				jp cli 
6fcb 76					halt 
6fcc			 
6fcc			 
6fcc			; handle the auto run of code from files in storage 
6fcc			 
6fcc			 
6fcc			include "forth_startup.asm" 
6fcc			; Which startup method to use? 
6fcc			; 
6fcc			; version 1 - allows for a single stored file to be selected to run at start up (if se storage is enabled) 
6fcc			; followed by loading of a list of scripts in eeprom 
6fcc			 
6fcc			; version 2 - if se storage is enabled then auto load all files which begin with a '*' else use loading 
6fcc			; from eeprom 
6fcc			 
6fcc			; Select with define in main stubs 
6fcc			 
6fcc			if STARTUP_V1 
6fcc				include "forth_startupv1.asm" 
6fcc			endif 
6fcc			if STARTUP_V2 
6fcc				include "forth_startupv2.asm" 
6fcc			; Version 2 of the startup  
6fcc			;  
6fcc			; Auto load any files in bank 1 that start with a '*' 
6fcc			; If no se storage then revert to using eprom 
6fcc			 
6fcc			 
6fcc			if STORAGE_SE = 0 
6fcc			 
6fcc			sprompt1: db "Startup load...",0 
6fcc			sprompt2: db "Run? 1=No *=End #=All",0 
6fcc			 
6fcc			 
6fcc			 
6fcc			 
6fcc			forth_startup: 
6fcc				ld hl, startcmds 
6fcc				ld a, 0 
6fcc				ld (os_last_cmd), a    ; tmp var to skip prompts if doing all 
6fcc			 
6fcc			.start1:	push hl 
6fcc				call clear_display 
6fcc				ld de, sprompt1 
6fcc			        ld a, display_row_1 
6fcc				call str_at_display 
6fcc				ld de, sprompt2 
6fcc			        ld a, display_row_2 
6fcc				call str_at_display 
6fcc				pop hl 
6fcc				push hl 
6fcc				ld e,(hl) 
6fcc				inc hl 
6fcc				ld d,(hl) 
6fcc			        ld a, display_row_3 
6fcc				call str_at_display 
6fcc				call update_display 
6fcc			 
6fcc			 
6fcc				ld a, (os_last_cmd) 
6fcc				cp 0 
6fcc				jr z, .startprompt 
6fcc				call delay250ms 
6fcc				jr .startdo 
6fcc				 
6fcc				 
6fcc			 
6fcc			.startprompt: 
6fcc			 
6fcc				ld a,display_row_4 + display_cols - 1 
6fcc			        ld de, endprg 
6fcc				call str_at_display 
6fcc				call update_display 
6fcc				call delay1s 
6fcc				call cin_wait 
6fcc						 
6fcc				cp '*' 
6fcc				jr z, .startupend1 
6fcc				cp '#' 
6fcc				jr nz, .startno 
6fcc				ld a, 1 
6fcc				ld (os_last_cmd),a 
6fcc				jr .startdo 
6fcc			.startno:	cp '1' 
6fcc				jr z,.startnxt  
6fcc			 
6fcc				; exec startup line 
6fcc			.startdo:	 
6fcc				pop hl 
6fcc				push hl 
6fcc				 
6fcc				ld e,(hl) 
6fcc				inc hl 
6fcc				ld d,(hl) 
6fcc				ex de,hl 
6fcc			 
6fcc				push hl 
6fcc			 
6fcc				ld a, 0 
6fcc				;ld a, FORTH_END_BUFFER 
6fcc				call strlent 
6fcc				inc hl   ; include zero term to copy 
6fcc				ld b,0 
6fcc				ld c,l 
6fcc				pop hl 
6fcc				ld de, scratch 
6fcc				ldir 
6fcc			 
6fcc			 
6fcc				ld hl, scratch 
6fcc				call forthparse 
6fcc				call forthexec 
6fcc				call forthexec_cleanup 
6fcc			 
6fcc				ld a, display_row_4 
6fcc				ld de, endprog 
6fcc			 
6fcc				call update_display		 
6fcc			 
6fcc				ld a, (os_last_cmd) 
6fcc				cp 0 
6fcc				jr nz, .startnxt 
6fcc				call next_page_prompt 
6fcc			        call clear_display 
6fcc				call update_display		 
6fcc			 
6fcc				; move onto next startup line? 
6fcc			.startnxt: 
6fcc			 
6fcc				call delay250ms 
6fcc				pop hl 
6fcc			 
6fcc				inc hl 
6fcc				inc hl 
6fcc			 
6fcc				push hl 
6fcc				ld e, (hl) 
6fcc				inc hl 
6fcc				ld d, (hl) 
6fcc				pop hl 
6fcc				; TODO replace 0 test 
6fcc			 
6fcc				ex de, hl 
6fcc				call ishlzero 
6fcc			;	ld a,e 
6fcc			;	add d 
6fcc			;	cp 0    ; any left to do? 
6fcc				ex de, hl 
6fcc				jp nz, .start1 
6fcc				jr .startupend 
6fcc			 
6fcc			.startupend1: pop hl 
6fcc			.startupend: 
6fcc			 
6fcc				call clear_display 
6fcc				call update_display 
6fcc				ret 
6fcc			endif 
6fcc			 
6fcc			 
6fcc			if STORAGE_SE 
6fcc			 
6fcc			;sprompt3: db "Loading from start-up file:",0 
6fcc .. 00		sprompt3: db "  Searching...",0 
6fdb			;sprompt4: db "(Any key to stop)",0 
6fdb			 
6fdb			 
6fdb			forth_autoload: 
6fdb			 
6fdb				; load block 0 of store 1 
6fdb				 
6fdb 3e fe			ld a, $fe      ; bit 0 clear 
6fdd 32 95 f9			ld (spi_device), a 
6fe0			 
6fe0 cd 25 05			call storage_get_block_0 
6fe3			 
6fe3 3a d0 f9			ld a, (store_page+STORE_0_AUTOFILE) 
6fe6			 
6fe6 fe 00			cp 0 
6fe8 c8				ret z     ; auto start not enabled 
6fe9			 
6fe9 cd aa 0d			call clear_display 
6fec			 
6fec				; set bank 
6fec			 
6fec 3a d2 f9				ld a, (store_page+STORE_0_BANKRUN) 
6fef 32 95 f9				ld (spi_device), a 
6ff2			 
6ff2			 
6ff2				; generate a directory of bank 1 and search for flagged files 
6ff2			 
6ff2					if DEBUG_FORTH_WORDS_KEY 
6ff2						DMARK "DIR" 
6ff2 f5				push af  
6ff3 3a 07 70			ld a, (.dmark)  
6ff6 32 a0 fd			ld (debug_mark),a  
6ff9 3a 08 70			ld a, (.dmark+1)  
6ffc 32 a1 fd			ld (debug_mark+1),a  
6fff 3a 09 70			ld a, (.dmark+2)  
7002 32 a2 fd			ld (debug_mark+2),a  
7005 18 03			jr .pastdmark  
7007 ..			.dmark: db "DIR"  
700a f1			.pastdmark: pop af  
700b			endm  
# End of macro DMARK
700b						CALLMONITOR 
700b cd aa fd			call debug_vector  
700e				endm  
# End of macro CALLMONITOR
700e					endif 
700e			 
700e cd 25 05			call storage_get_block_0 
7011			 
7011 21 af f9			ld hl, store_page     ; get current id count 
7014 46				ld b, (hl) 
7015 0e 00			ld c, 0    ; count of files   
7017					if DEBUG_FORTH_WORDS 
7017						DMARK "DI1" 
7017 f5				push af  
7018 3a 2c 70			ld a, (.dmark)  
701b 32 a0 fd			ld (debug_mark),a  
701e 3a 2d 70			ld a, (.dmark+1)  
7021 32 a1 fd			ld (debug_mark+1),a  
7024 3a 2e 70			ld a, (.dmark+2)  
7027 32 a2 fd			ld (debug_mark+2),a  
702a 18 03			jr .pastdmark  
702c ..			.dmark: db "DI1"  
702f f1			.pastdmark: pop af  
7030			endm  
# End of macro DMARK
7030						CALLMONITOR 
7030 cd aa fd			call debug_vector  
7033				endm  
# End of macro CALLMONITOR
7033					endif 
7033			 
7033				; check for empty drive 
7033			 
7033 3e 00			ld a, 0 
7035 b8				cp b 
7036 ca 83 70			jp z, .dirdone 
7039			 
7039				; for each of the current ids do a search for them and if found push to stack 
7039			 
7039 c5			.diritem:	push bc 
703a 21 40 00				ld hl, STORE_BLOCK_PHY 
703d 16 00				ld d, 0		 ; look for extent 0 of block id as this contains file name 
703f 58					ld e,b 
7040			 
7040 d5					push de 
7041 e5					push hl 
7042 cd aa 0d			call clear_display 
7045 3e 32			ld a, display_row_2 + 10 
7047 11 cc 6f			ld de, sprompt3 
704a cd bd 0d			call str_at_display 
704d cd 01 0d			call active 
7050 eb				ex de, hl 
7051 3e 2f			ld a, display_row_2 + 7 
7053 cd bd 0d			call str_at_display 
7056 cd cd 0d			call update_display 
7059 e1				pop hl 
705a d1				pop de 
705b			 
705b			;		if DEBUG_FORTH_WORDS 
705b			;			DMARK "DI2" 
705b			;			CALLMONITOR 
705b			;		endif 
705b			 
705b cd a7 07				call storage_findnextid 
705e			 
705e			;		if DEBUG_FORTH_WORDS 
705e			;			DMARK "DI3" 
705e			;			CALLMONITOR 
705e			;		endif 
705e			 
705e					; if found hl will be non zero 
705e			 
705e cd 07 10				call ishlzero 
7061			;		ld a, l 
7061			;		add h 
7061			; 
7061			;		cp 0 
7061 28 1d				jr z, .dirnotfound 
7063			 
7063					; increase count 
7063			 
7063 c1					pop bc	 
7064 0c					inc c 
7065 c5					push bc 
7066					 
7066			 
7066					; get file header and push the file name 
7066			 
7066 11 af f9				ld de, store_page 
7069 cd 74 04				call storage_read_block 
706c			 
706c					; push file id to stack 
706c				 
706c			 
706c					; is this a file we want to run? 
706c			 
706c 21 b2 f9				ld hl, store_page+3 
706f 7e					ld a,(hl) 
7070 fe 2a				cp '*' 
7072 20 0c				jr nz,  .dirnotfound 
7074					 
7074			 
7074			 
7074 3a af f9				ld a, (store_page) 
7077 d5					push de 
7078 e5					push hl 
7079 c5					push bc 
707a cd a6 70				call .autorunf 
707d c1					pop bc 
707e e1					pop hl 
707f d1					pop de 
7080			 
7080			 
7080			 
7080				; save this extent 
7080			 
7080					; push file name 
7080			;display file name to run 
7080			 
7080			;		ld hl, store_page+3 
7080			;		if DEBUG_FORTH_WORDS 
7080			;			DMARK "DI5" 
7080			;			CALLMONITOR 
7080			;		endif 
7080			; 
7080			;		 
7080			; 
7080			;		call forth_push_str 
7080			;		if DEBUG_FORTH_WORDS 
7080			;			DMARK "DI6" 
7080			;			CALLMONITOR 
7080			;		endif 
7080			.dirnotfound: 
7080 c1					pop bc     
7081 10 b6				djnz .diritem 
7083				 
7083			.dirdone:	 
7083					if DEBUG_FORTH_WORDS 
7083						DMARK "DI7" 
7083 f5				push af  
7084 3a 98 70			ld a, (.dmark)  
7087 32 a0 fd			ld (debug_mark),a  
708a 3a 99 70			ld a, (.dmark+1)  
708d 32 a1 fd			ld (debug_mark+1),a  
7090 3a 9a 70			ld a, (.dmark+2)  
7093 32 a2 fd			ld (debug_mark+2),a  
7096 18 03			jr .pastdmark  
7098 ..			.dmark: db "DI7"  
709b f1			.pastdmark: pop af  
709c			endm  
# End of macro DMARK
709c						CALLMONITOR 
709c cd aa fd			call debug_vector  
709f				endm  
# End of macro CALLMONITOR
709f					endif 
709f			 
709f cd aa 0d				call clear_display 
70a2 cd cd 0d				call update_display 
70a5			 
70a5 c9					ret 
70a6			 
70a6			 
70a6			 
70a6			 
70a6			 
70a6			.autorunf: 
70a6			 
70a6			 
70a6				; get file id to load from and get the file name to display 
70a6			 
70a6			;		ld a, (store_page+STORE_0_FILERUN) 
70a6			 
70a6 2e 00				ld l, 0 
70a8 67					ld h, a 
70a9 11 af f9				ld de, store_page 
70ac			 
70ac					if DEBUG_FORTH_WORDS 
70ac						DMARK "ASp" 
70ac f5				push af  
70ad 3a c1 70			ld a, (.dmark)  
70b0 32 a0 fd			ld (debug_mark),a  
70b3 3a c2 70			ld a, (.dmark+1)  
70b6 32 a1 fd			ld (debug_mark+1),a  
70b9 3a c3 70			ld a, (.dmark+2)  
70bc 32 a2 fd			ld (debug_mark+2),a  
70bf 18 03			jr .pastdmark  
70c1 ..			.dmark: db "ASp"  
70c4 f1			.pastdmark: pop af  
70c5			endm  
# End of macro DMARK
70c5						CALLMONITOR 
70c5 cd aa fd			call debug_vector  
70c8				endm  
# End of macro CALLMONITOR
70c8					endif 
70c8 cd cd 09				call storage_read 
70cb			 
70cb					if DEBUG_FORTH_WORDS 
70cb						DMARK "ASr" 
70cb f5				push af  
70cc 3a e0 70			ld a, (.dmark)  
70cf 32 a0 fd			ld (debug_mark),a  
70d2 3a e1 70			ld a, (.dmark+1)  
70d5 32 a1 fd			ld (debug_mark+1),a  
70d8 3a e2 70			ld a, (.dmark+2)  
70db 32 a2 fd			ld (debug_mark+2),a  
70de 18 03			jr .pastdmark  
70e0 ..			.dmark: db "ASr"  
70e3 f1			.pastdmark: pop af  
70e4			endm  
# End of macro DMARK
70e4						CALLMONITOR 
70e4 cd aa fd			call debug_vector  
70e7				endm  
# End of macro CALLMONITOR
70e7					endif 
70e7			 
70e7 cd 07 10				call ishlzero 
70ea c8					ret z             ; file not found 
70eb			 
70eb					; display file name we are loading 
70eb			 
70eb cd aa 0d				call clear_display 
70ee			 
70ee 3e 32				ld a, display_row_2 + 10 
70f0 11 b2 f9				ld de, store_page+3 
70f3 cd bd 0d				call str_at_display 
70f6				 
70f6			; 
70f6			 
70f6			;	ld a, display_row_1+5 
70f6			;	ld de, sprompt3 
70f6			;	call str_at_display 
70f6			;	ld a, display_row_2+7 
70f6			;	call active 
70f6			;	ex de, hl 
70f6			;;	ld de, sprompt4 
70f6			;	call str_at_display 
70f6			; 
70f6 cd cd 0d			call update_display 
70f9			 
70f9			;	call cin_wait 
70f9			;	cp 'n' 
70f9			;	ret z 
70f9			;	cp 'N' 
70f9			;	ret z 
70f9			 
70f9			;	call delay1s 
70f9			 
70f9 3a b1 f9			ld a, (store_page+2) 
70fc 32 9e f9			ld (store_openmaxext), a    ; save count of ext 
70ff 3e 01			ld a, 1  
7101 32 9f f9			ld (store_openext), a    ; save count of ext 
7104			 
7104			.autof: 
7104				; begin to read a line from file 
7104			 
7104 21 1d f4			ld hl, os_cli_cmd 
7107 22 1b f6			ld (os_var_array), hl     ; somewhere to hold the line construction pointer 
710a			  
710a			.readext: 
710a 3a 9f f9			ld a, (store_openext) 
710d 6f				ld l , a 
710e				 
710e 3a af f9			ld a, (store_page) 
7111 67				ld h, a	 
7112 11 af f9			ld de, store_page 
7115					if DEBUG_FORTH_WORDS 
7115						DMARK "ASl" 
7115 f5				push af  
7116 3a 2a 71			ld a, (.dmark)  
7119 32 a0 fd			ld (debug_mark),a  
711c 3a 2b 71			ld a, (.dmark+1)  
711f 32 a1 fd			ld (debug_mark+1),a  
7122 3a 2c 71			ld a, (.dmark+2)  
7125 32 a2 fd			ld (debug_mark+2),a  
7128 18 03			jr .pastdmark  
712a ..			.dmark: db "ASl"  
712d f1			.pastdmark: pop af  
712e			endm  
# End of macro DMARK
712e						CALLMONITOR 
712e cd aa fd			call debug_vector  
7131				endm  
# End of macro CALLMONITOR
7131					endif 
7131 cd cd 09				call storage_read 
7134 cd 07 10			call ishlzero 
7137 c8				ret z 
7138			 
7138			; TODO copy to exec buffer 
7138			; check (store_readcont) if 0 then exec, if not then load on the end of the exec buffer until 0 
7138			 
7138				; copy the record buffer to the cli buffer 
7138			 
7138 ed 5b 1b f6		ld de, (os_var_array) 
713c 21 b1 f9			ld hl, store_page+2 
713f			;	ex de, hl 
713f 01 3e 00			ld bc, STORE_BLOCK_PHY-2   ; two for the file ids 
7142 ed b0			ldir 
7144 ed 53 1b f6		ld (os_var_array), de 
7148				 
7148 3a 9f f9			ld a, (store_openext) 
714b 3c				inc a 
714c 32 9f f9			ld (store_openext), a    ; save count of ext 
714f			 
714f			 
714f			; check (store_readcont) if 0 then exec, if not then load on the end of the exec buffer until 0 
714f				 
714f 3a a2 f9			ld a, (store_readcont) 
7152 fe 00			cp 0 
7154 20 b4			jr nz, .readext 
7156			 
7156			;	jr z, .autoend 
7156			 
7156					if DEBUG_FORTH_WORDS 
7156						DMARK "ASc" 
7156 f5				push af  
7157 3a 6b 71			ld a, (.dmark)  
715a 32 a0 fd			ld (debug_mark),a  
715d 3a 6c 71			ld a, (.dmark+1)  
7160 32 a1 fd			ld (debug_mark+1),a  
7163 3a 6d 71			ld a, (.dmark+2)  
7166 32 a2 fd			ld (debug_mark+2),a  
7169 18 03			jr .pastdmark  
716b ..			.dmark: db "ASc"  
716e f1			.pastdmark: pop af  
716f			endm  
# End of macro DMARK
716f						CALLMONITOR 
716f cd aa fd			call debug_vector  
7172				endm  
# End of macro CALLMONITOR
7172					endif 
7172 e5				push hl	 
7173 d5				push de 
7174 cd 01 0d			call active 
7177 eb				ex de, hl 
7178 3e 2f			ld a, display_row_2 + 7 
717a cd bd 0d			call str_at_display 
717d			 
717d cd cd 0d			call update_display 
7180 d1				pop de  
7181 e1				pop hl 
7182			;	call delay250ms 
7182			 
7182			 
7182			 
7182			 
7182			.autoexec: 
7182			 
7182			 
7182 21 1d f4			ld hl, os_cli_cmd 
7185					if DEBUG_FORTH_WORDS 
7185						DMARK "ASx" 
7185 f5				push af  
7186 3a 9a 71			ld a, (.dmark)  
7189 32 a0 fd			ld (debug_mark),a  
718c 3a 9b 71			ld a, (.dmark+1)  
718f 32 a1 fd			ld (debug_mark+1),a  
7192 3a 9c 71			ld a, (.dmark+2)  
7195 32 a2 fd			ld (debug_mark+2),a  
7198 18 03			jr .pastdmark  
719a ..			.dmark: db "ASx"  
719d f1			.pastdmark: pop af  
719e			endm  
# End of macro DMARK
719e						CALLMONITOR 
719e cd aa fd			call debug_vector  
71a1				endm  
# End of macro CALLMONITOR
71a1					endif 
71a1 cd 83 24			call forthparse 
71a4 cd bf 24			call forthexec 
71a7 cd d9 23			call forthexec_cleanup 
71aa			 
71aa			 
71aa			 
71aa c3 04 71			jp .autof 
71ad			;.autofdone: 
71ad			; 
71ad			;		if DEBUG_FORTH_WORDS 
71ad			;			DMARK "ASx" 
71ad			;			CALLMONITOR 
71ad			;		endif 
71ad			;;	call clear_display 
71ad			;	ret 
71ad			 
71ad			 
71ad			 
71ad			endif 
# End of file forth_startupv2.asm
71ad			endif 
71ad			 
# End of file forth_startup.asm
71ad			 
71ad			; eof 
# End of file forth_kernel.asm
71ad			;include "nascombasic.asm" 
71ad			 
71ad			 
71ad			; find out where the code ends if loaded into RAM (for SC114) 
71ad			;endofcode:  
71ad			;	nop 
71ad			 
71ad			 
71ad			; jump to nmi vector 
71ad			 
71ad			init_nmi: 
71ad 3e c9			ld a, $c9   ; RET 
71af 32 ad fd			ld (nmi_vector), a 
71b2 c9				ret 
71b3			nmi: 
71b3 e5				push hl 
71b4 d5				push de 
71b5 c5				push bc 
71b6 f5				push af 
71b7 cd ad fd			call nmi_vector 
71ba f5				push af 
71bb c5				push bc 
71bc d5				push de 
71bd e5				push hl 
71be ed 4d			reti 
71c0			 
71c0			 
71c0			; eof 
71c0			 
# End of file main.asm
71c0			include "firmware_lcd_4x40.asm" 
71c0			; **********************************************************************  
71c0			; **  Alphanumeric LCD example                  by Stephen C Cousins  **  
71c0			; **********************************************************************  
71c0			;  
71c0			; **  Written as a Small Computer Monitor App  
71c0			; **  www.scc.me.uk  
71c0			;  
71c0			; History  
71c0			; 2018-05-20  v0.2.0  SCC  Example for LiNC80 SBC1 only  
71c0			; 2018-06-28  v0.3.0  SCC  Added support for RC2014 and Z280RC  
71c0			; 2019-09-14  v0.4.0  SCC  Added support for SC129 digital I/O module  
71c0			;  
71c0			; **********************************************************************  
71c0			;  
71c0			; This program is an example of one of the methods of interfacing an   
71c0			; alphanumeric LCD module.   
71c0			;  
71c0			; In this example the display is connected to either a Z80 PIO or a   
71c0			; simple 8-bit output port.   
71c0			;  
71c0			; This interfacing method uses 4-bit data mode and uses time delays  
71c0			; rather than polling the display's ready status. As a result the   
71c0			; interface only requires 6 simple output lines:  
71c0			;   Output bit 0 = not used  
71c0			;   Output bit 1 = not used  
71c0			;   Output bit 2 = RS         High = data, Low = instruction  
71c0			;   Output bit 3 = E          Active high  
71c0			;   Output bit 4 = DB4  
71c0			;   Output bit 5 = DB5  
71c0			;   Output bit 6 = DB6  
71c0			;   Output bit 7 = DB7  
71c0			; Display's R/W is connected to 0v so it is always in write mode  
71c0			;  
71c0			; This set up should work with any system supporting the RC2014 bus  
71c0			  
71c0			; To set up PIO port A in mode 3 (control) using LiNC80 as example  
71c0			;   I/O address 0x1A = 0b11001111 (0xCF)   Select mode 3 (control)  
71c0			;   I/O address 0x1A = 0b00000000 (0x00)   All pins are output  
71c0			;  
71c0			; **********************************************************************  
71c0			  
71c0			; Additonal for 4x40. E1 and E2 instead of just E   
71c0			; TODO swipe vidout signal on port a to activate E2  
71c0			  
71c0			; **********************************************************************  
71c0			; **  Constants  
71c0			; **********************************************************************  
71c0			; LCD constants required by LCD support module  
71c0			kLCDPrt:    EQU kDataReg       ;LCD port is the PIO port A data reg  
71c0			kLCDBitRS:  EQU 2              ;Port bit for LCD RS signal  
71c0			kLCDBitE:   EQU 3              ;Port bit for LCD E signal             
71c0			kLCDBitE2:   EQU 0              ;Port bit for LCD E2 signal            VIDOUT  
71c0			; TODO Decide which E is being set  
71c0			kLCDWidth:  EQU display_cols             ;Width in characters  
71c0			  
71c0			; **********************************************************************  
71c0			; **  Code library usage  
71c0			; **********************************************************************  
71c0			  
71c0			; send character to current cursor position  
71c0			; wraps and/or scrolls screen automatically  
71c0			  
71c0			  
71c0			  
71c0			lcd_init:  
71c0			  
71c0			; SCMonAPI functions used  
71c0			  
71c0			; Alphanumeric LCD functions used  
71c0			; no need to specify specific functions for this module  
71c0			  
71c0 3e cf		            LD   A, 11001111b  
71c2 d3 c2		            OUT  (kContReg), A  ;Port A = PIO 'control' mode  
71c4 3e 00		            LD   A, 00000000b  
71c6 d3 c2		            OUT  (kContReg),A   ;Port A = all lines are outputs  
71c8			  
71c8			; Initialise alphanumeric LCD module  
71c8 3e 00				ld a, 0  
71ca 32 00 fb				ld (display_lcde1e2), a  
71cd cd 4e 72		            CALL fLCD_Init      ;Initialise LCD module  
71d0 3e 01				ld a, 1  
71d2 32 00 fb				ld (display_lcde1e2), a  
71d5 cd 4e 72		            CALL fLCD_Init      ;Initialise LCD module  
71d8			  
71d8 c9				ret  
71d9			  
71d9			;  
71d9			;;  
71d9			; lcd functions  
71d9			;  
71d9			;  
71d9			  
71d9			; what is at cursor position   
71d9			  
71d9			;get_cursor:	ld de, (cursor_row)   ;  row + col  
71d9			;		call curptr  
71d9			;		ret  
71d9			  
71d9			  
71d9			; take current custor pos in de (d=row,e=col) and return a pointer to the frame buffer  
71d9			  
71d9			curptr:  
71d9 c5				push bc  
71da 21 e6 fc			ld hl, display_fb0  
71dd			cpr:	  
71dd				; loop for cursor whole row  
71dd 0e 28			ld c, display_cols  
71df 23			cpr1:	inc hl  
71e0 0d				dec c  
71e1 20 fc			jr nz, cpr1  
71e3 05				dec b  
71e4 20 f7			jr nz, cpr  
71e6			  
71e6				; add col	  
71e6			  
71e6 23			cpr2:	inc hl  
71e7 1d				dec e  
71e8 20 fc			jr nz, cpr2  
71ea			  
71ea c1				pop bc  
71eb c9				ret  
71ec				  
71ec			  
71ec			  
71ec			  
71ec			  
71ec			; write the frame buffer given in hl to hardware   
71ec 22 fe fa		write_display: ld (display_write_tmp), hl 	   
71ef 3e 00			ld a, kLCD_Line1  
71f1 cd fb 72		            CALL fLCD_Pos       ;Position cursor to location in A  
71f4 06 28			ld b, display_cols  
71f6 ed 5b fe fa		ld de, (display_write_tmp)  
71fa cd 46 72			call write_len_string  
71fd				  
71fd				  
71fd 2a fe fa			ld hl, (display_write_tmp)  
7200 11 28 00			ld de, display_cols  
7203 19				add hl,de  
7204 22 fe fa			ld (display_write_tmp),hl  
7207			  
7207				  
7207 3e 28			ld a, kLCD_Line2  
7209 cd fb 72		            CALL fLCD_Pos       ;Position cursor to location in A  
720c 06 28			ld b, display_cols  
720e ed 5b fe fa		ld de, (display_write_tmp)  
7212 cd 46 72			call write_len_string  
7215				  
7215 2a fe fa			ld hl, (display_write_tmp)  
7218 11 28 00			ld de, display_cols  
721b 19				add hl,de  
721c 22 fe fa			ld (display_write_tmp),hl  
721f			  
721f				  
721f 3e 50			ld a, kLCD_Line3  
7221 cd fb 72		            CALL fLCD_Pos       ;Position cursor to location in A  
7224 06 28			ld b, display_cols  
7226 ed 5b fe fa		ld de, (display_write_tmp)  
722a cd 46 72			call write_len_string  
722d				  
722d 2a fe fa			ld hl, (display_write_tmp)  
7230 11 28 00			ld de, display_cols  
7233 19				add hl,de  
7234 22 fe fa			ld (display_write_tmp),hl  
7237			  
7237				  
7237 3e 78			ld a, kLCD_Line4  
7239 cd fb 72		            CALL fLCD_Pos       ;Position cursor to location in A  
723c 06 28			ld b, display_cols  
723e ed 5b fe fa		ld de, (display_write_tmp)  
7242 cd 46 72			call write_len_string  
7245 c9					ret  
7246				  
7246				; write out a fixed length string given in b from de  
7246			  
7246 1a			write_len_string:   LD   A, (DE)        ;Get character from string  
7247 cd b3 72		            CALL fLCD_Data      ;Write character to display  
724a 13				inc de  
724b 10 f9			djnz write_len_string  
724d c9				ret  
724e			  
724e			; Some other things to do  
724e			;            LD   A, kLCD_Clear ;Display clear  
724e			;            LD   A, kLCD_Blink ;Display on with blinking block cursor  
724e			;            LD   A, kLCD_Under ;Display on with underscore cursor  
724e			;            LD   A, kLCD_On     ;Display on with no cursor  
724e			;            ;LD   A, kLCD_Off   ;Display off  
724e			;            CALL fLCD_Inst      ;Send instruction to display  
724e			;  
724e			;  
724e			;            halt  
724e			;  
724e			;  
724e			;MsgHello:   DB  "Hello World!",0  
724e			;MsgLiNC80:   DB  "From my Z80-homebrew",0  
724e			  
724e			; Custom characters 5 pixels wide by 8 pixels high  
724e			; Up to 8 custom characters can be defined  
724e			;BitMaps:      
724e			;; Character 0x00 = Battery icon  
724e			;            DB  01110b  
724e			;            DB  11011b  
724e			;            DB  10001b  
724e			;            DB  10001b  
724e			;            DB  11111b  
724e			;            DB  11111b  
724e			;            DB  11111b  
724e			;            DB  11111b  
724e			;; Character 0x01 = Bluetooth icon  
724e			;            DB  01100b  
724e			;            DB  01010b  
724e			;            DB  11100b  
724e			;            DB  01000b  
724e			;            DB  11100b  
724e			;            DB  01010b  
724e			;            DB  01100b  
724e			;            DB  00000b  
724e			;  
724e			  
724e			  
724e			; **********************************************************************  
724e			; **  Alphanumeric LCD support                  by Stephen C Cousins  **  
724e			; **********************************************************************  
724e			;  
724e			; **  Written as a Small Computer Monitor App   
724e			; **  Version 0.1 SCC 2018-05-16  
724e			; **  www.scc.me.uk  
724e			;  
724e			; **********************************************************************  
724e			;  
724e			; This module provides support for alphanumeric LCD modules using with  
724e			; *  HD44780 (or compatible) controller  
724e			; *  5 x 7 pixel fonts  
724e			; *  Up to 80 characters in total (eg. 4 lines of 20 characters)  
724e			; *  Interface via six digital outputs to the display (see below)  
724e			;  
724e			; LCD module pinout:  
724e			;   1  Vss   0v supply  
724e			;   2  Vdd   5v supply  
724e			;   3  Vo    LCD input voltage (near zero volts via potentiometer)  
724e			;   4  RS    High = data, Low = instruction  
724e			;   5  R/W   High = Read, Low = Write  
724e			;   6  E     Enable signal (active high)  
724e			;   7  DB0   Data bit 0  
724e			;   8  DB1   Data bit 1  
724e			;   9  DB2   Data bit 2  
724e			;  10  DB3   Data bit 3  
724e			;  11  DB4   Data bit 4  
724e			;  12  DB5   Data bit 5  
724e			;  13  DB6   Data bit 6  
724e			;  14  DB7   Data bit 7  
724e			;  15  A     Backlight anode (+)  
724e			;  16  K     Backlight cathode (-)  
724e			;  
724e			; This interfacing method uses 4-bit data mode and uses time delays  
724e			; rather than polling the display's ready status. As a result the   
724e			; interface only requires 6 simple output lines:  
724e			;   LCD E   = Microcomputer output port bit <kLCDBitE>  
724e			;   LCD RS  = Microcomputer output port bit <kLCDBitRS>  
724e			;   LCD DB4 = Microcomputer output port bit 4  
724e			;   LCD DB5 = Microcomputer output port bit 5  
724e			;   LCD DB6 = Microcomputer output port bit 6  
724e			;   LCD DB7 = Microcomputer output port bit 7  
724e			; Display's R/W is connected to 0v so it is always in write mode  
724e			; All 6 connections must be on the same port address <kLCDPrt>  
724e			; This method also allows a decent length of cable from micro to LCD  
724e			;  
724e			; **********************************************************************  
724e			;  
724e			; To include the code for any given function provided by this module,   
724e			; add the appropriate #REQUIRES <FunctionName> statement at the top of   
724e			; the parent source file.  
724e			; For example:  #REQUIRES   uHexPrefix  
724e			;  
724e			; Also #INCLUDE this file at some point after the #REQUIRES statements  
724e			; in the parent source file.  
724e			; For example:  #INCLUDE    ..\_CodeLibrary\Utilities.asm  
724e			;  
724e			; These are the function names provided by this module:  
724e			; fLCD_Init                     ;Initialise LCD  
724e			; fLCD_Inst                     ;Send instruction to LCD  
724e			; fLCD_Data                     ;Send data byte to LCD  
724e			; fLCD_Pos                      ;Position cursor  
724e			; fLCD_Str                      ;Display string  
724e			; fLCD_Def                      ;Define custom character  
724e			;  
724e			; **********************************************************************  
724e			;  
724e			; Requires SCMonAPI.asm to also be included in the project  
724e			;  
724e			  
724e			  
724e			; **********************************************************************  
724e			; **  Constants  
724e			; **********************************************************************  
724e			  
724e			; Constants that must be defined externally  
724e			;kLCDPrt:   EQU 0xc0           ;Port address used for LCD  
724e			;kLCDBitRS: EQU 2              ;Port bit for LCD RS signal  
724e			;kLCDBitE:  EQU 3              ;Port bit for LCD E signal  
724e			;kLCDWidth: EQU 20             ;Width in characters  
724e			  
724e			; general line offsets in any frame buffer  
724e			  
724e			  
724e			display_row_1: equ 0  
724e			display_row_2: equ display_row_1+display_cols  
724e			display_row_3: equ display_row_2 + display_cols  
724e			display_row_4: equ display_row_3 + display_cols  
724e			;display_row_4_eol:   
724e			  
724e			  
724e			; Cursor position values for the start of each line  
724e			  
724e			; E  
724e			kLCD_Line1: EQU 0x00   
724e			kLCD_Line2: EQU kLCD_Line1+kLCDWidth  
724e			; E1  
724e			kLCD_Line3: EQU kLCD_Line2+kLCDWidth  
724e			kLCD_Line4: EQU kLCD_Line3+kLCDWidth   
724e			  
724e			; Instructions to send as A register to fLCD_Inst  
724e			kLCD_Clear: EQU 00000001b     ;LCD clear  
724e			kLCD_Off:   EQU 00001000b     ;LCD off  
724e			kLCD_On:    EQU 00001100b     ;LCD on, no cursor or blink  
724e			kLCD_Under: EQU 00001110b     ;LCD on, cursor = underscore  
724e			kLCD_Blink: EQU 00001101b     ;LCD on, cursor = blink block  
724e			kLCD_Both:  EQU 00001111b     ;LCD on, cursor = under+blink  
724e			  
724e			; Constants used by this code module  
724e			kLCD_Clr:   EQU 00000001b     ;LCD command: Clear display  
724e			kLCD_Pos:   EQU 10000000b     ;LCD command: Position cursor  
724e			kLCD_Def:   EQU 01000000b     ;LCD command: Define character  
724e			  
724e			  
724e			  
724e			; **********************************************************************  
724e			; **  LCD support functions  
724e			; **********************************************************************  
724e			  
724e			; Initialise alphanumeric LCD module  
724e			; LCD control register codes:  
724e			;   DL   0 = 4-bit mode        1 = 8-bit mode  
724e			;   N    0 = 1-line mode       1 = 2-line mode  
724e			;   F    0 = Font 5 x 8        1 = Font 5 x 11  
724e			;   D    0 = Display off       1 = Display on  
724e			;   C    0 = Cursor off        1 = Cursor on  
724e			;   B    0 = Blinking off      1 = Blinking on  
724e			;   ID   0 = Decrement mode    1 = Increment mode  
724e			;   SH   0 = Entire shift off  1 = Entire shift on  
724e 3e 28		fLCD_Init:  LD   A, 40  
7250 cd 75 73		            CALL LCDDelay       ;Delay 40ms after power up  
7253			; For reliable reset set 8-bit mode - 3 times  
7253 cd 45 73		            CALL WrFn8bit       ;Function = 8-bit mode  
7256 cd 45 73		            CALL WrFn8bit       ;Function = 8-bit mode  
7259 cd 45 73		            CALL WrFn8bit       ;Function = 8-bit mode  
725c			; Set 4-bit mode  
725c cd 41 73		            CALL WrFn4bit       ;Function = 4-bit mode  
725f cd 73 73		            CALL LCDDelay1      ;Delay 37 us or more  
7262			; Function set  
7262 3e 28		            LD   A, 00101000b  ;Control reg:  0  0  1  DL N  F  x  x  
7264 cd 77 72		            CALL fLCD_Inst      ;2 line, display on  
7267			; Display On/Off control  
7267 3e 0c		            LD   A, 00001100b  ;Control reg:  0  0  0  0  1  D  C  B   
7269 cd 77 72		            CALL fLCD_Inst      ;Display on, cursor on, blink off  
726c			; Display Clear  
726c 3e 01		            LD   A, 00000001b  ;Control reg:  0  0  0  0  0  0  0  1  
726e cd 77 72		            CALL fLCD_Inst      ;Clear display  
7271			; Entry mode  
7271 3e 06		            LD   A, 00000110b  ;Control reg:  0  0  0  0  0  1  ID SH  
7273 cd 77 72		            CALL fLCD_Inst      ;Increment mode, shift off  
7276			; Display module now initialised  
7276 c9			            RET  
7277			; ok to here  
7277			  
7277			; Write instruction to LCD  
7277			;   On entry: A = Instruction byte to be written  
7277			;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved  
7277 f5			fLCD_Inst:  PUSH AF  
7278 f5			            PUSH AF  
7279 cd 8b 72		            CALL Wr4bits       ;Write bits 4 to 7 of instruction  
727c f1			            POP  AF  
727d 17			            RLA                 ;Rotate bits 0-3 into bits 4-7...  
727e 17			            RLA  
727f 17			            RLA  
7280 17			            RLA  
7281 cd 8b 72		            CALL Wr4bits       ;Write bits 0 to 3 of instruction  
7284 3e 02		            LD   A, 2  
7286 cd 75 73		            CALL LCDDelay       ;Delay 2 ms to complete   
7289 f1			            POP  AF  
728a c9			            RET  
728b			Wr4bits:   
728b f5					push af  
728c 3a 00 fb				ld a, (display_lcde1e2)  
728f fe 00				cp 0     ; e  
7291 20 10				jr nz, .wea2	  
7293 f1					pop af  
7294 e6 f0			    AND  0xF0           ;Mask so we only have D4 to D7  
7296 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
7298 cb df		            SET  kLCDBitE, A	    ; TODO decide which E is being set  
729a cb 87		            res  kLCDBitE2, A	    ; TODO decide which E is being set  
729c d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=Low  
729e cb 9f		            RES  kLCDBitE, A        ; TODO decide which E is being set  
72a0 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
72a2 c9			            RET  
72a3 f1			.wea2:		pop af  
72a4 e6 f0			    AND  0xF0           ;Mask so we only have D4 to D7  
72a6 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
72a8 cb c7		            SET  kLCDBitE2, A	    ; TODO decide which E is being set  
72aa cb 9f		            res  kLCDBitE, A	    ; TODO decide which E is being set  
72ac d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=Low  
72ae cb 87		            RES  kLCDBitE2, A        ; TODO decide which E is being set  
72b0 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
72b2 c9			            RET  
72b3			  
72b3			  
72b3			; Write data to LCD  
72b3			;   On entry: A = Data byte to be written  
72b3			;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved  
72b3 f5			fLCD_Data:  PUSH AF  
72b4 f5			            PUSH AF  
72b5 cd c7 72		            CALL Wr4bitsa       ;Write bits 4 to 7 of data byte  
72b8 f1			            POP  AF  
72b9 17			            RLA                 ;Rotate bits 0-3 into bits 4-7...  
72ba 17			            RLA  
72bb 17			            RLA  
72bc 17			            RLA  
72bd cd c7 72		            CALL Wr4bitsa       ;Write bits 0 to 3 of data byte  
72c0 3e 96		            LD   A, 150  
72c2 3d			Wait:      DEC  A              ;Wait a while to allow data   
72c3 20 fd		            JR   NZ, Wait      ;  write to complete  
72c5 f1			            POP  AF  
72c6 c9			            RET  
72c7			Wr4bitsa:     
72c7 f5					push af  
72c8 3a 00 fb				ld a, (display_lcde1e2)  
72cb fe 00				cp 0     ; e1  
72cd 20 16				jr nz, .we2	  
72cf f1					pop af  
72d0 e6 f0			    AND  0xF0           ;Mask so we only have D4 to D7  
72d2 cb d7		            SET  kLCDBitRS, A  
72d4 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=High  
72d6 cb df		            SET  kLCDBitE, A      ; TODO Decide which E is being set  
72d8 cb 87		            res  kLCDBitE2, A      ; TODO Decide which E is being set  
72da d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=High  
72dc cb 9f		            RES  kLCDBitE, A       ; TODO Decide which E is being set  
72de d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=High  
72e0 cb 97		            RES  kLCDBitRS, A  
72e2 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
72e4 c9			            RET  
72e5 f1			.we2:		pop af  
72e6 e6 f0			    AND  0xF0           ;Mask so we only have D4 to D7  
72e8 cb d7		            SET  kLCDBitRS, A  
72ea d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=High  
72ec cb c7		            SET  kLCDBitE2, A      ; TODO Decide which E is being set  
72ee cb 9f		            res  kLCDBitE, A      ; TODO Decide which E is being set  
72f0 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=High  
72f2 cb 87		            RES  kLCDBitE2, A       ; TODO Decide which E is being set  
72f4 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=High  
72f6 cb 97		            RES  kLCDBitRS, A  
72f8 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
72fa c9			            RET  
72fb			  
72fb			  
72fb			; Position cursor to specified location  
72fb			;   On entry: A = Cursor position  
72fb			;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved  
72fb f5			fLCD_Pos:   PUSH AF  
72fc					; at this point set the E1 or E2 flag depending on position  
72fc			  
72fc c5					push bc  
72fd			;		push af  
72fd 06 00				ld b, 0  
72ff 4f					ld c, a  
7300 3e 4f				ld a, kLCD_Line3-1  
7302 b7			 		or a      ;clear carry flag  
7303 99					sbc a,c    ; TODO may need to sub 80 from a to put in context of current frame    
7304 38 04				jr c, .pe1  
7306			  
7306					; E selection  
7306 cb 80				res 0, b         ; bit 0 unset e  
7308			;		pop af    ; before line 3 so recover orig pos  
7308			;		ld c, a    ; save for poking back  
7308 18 06				jr .peset	          
730a			.pe1:          	; E2 selection  
730a cb c0				set 0, b         ; bit 0 set e1  
730c 79					ld a, c  
730d de 4f				sbc a, kLCD_Line3-1  
730f 4f					ld c, a	         ; save caculated offset  
7310			;		pop af     ; bin this original value now we have calculated form  
7310			  
7310			.peset:		; set bit  
7310 78					ld a, b  
7311 32 00 fb				ld (display_lcde1e2), a 	  
7314 79					ld a, c  
7315 c1					pop bc  
7316			  
7316 f6 80		            OR   kLCD_Pos       ;Prepare position cursor instruction  
7318 cd 77 72		            CALL fLCD_Inst      ;Write instruction to LCD  
731b f1			            POP  AF  
731c c9			            RET  
731d			  
731d			  
731d			; Output text string to LCD  
731d			;   On entry: DE = Pointer to null terminated text string  
731d			;   On exit:  BC HL IX IY I AF' BC' DE' HL' preserved  
731d 1a			fLCD_Str:   LD   A, (DE)        ;Get character from string  
731e b7			            OR   A              ;Null terminator?  
731f c8			            RET  Z              ;Yes, so finished  
7320 cd b3 72		            CALL fLCD_Data      ;Write character to display  
7323 13			            INC  DE             ;Point to next character  
7324 18 f7		            JR   fLCD_Str       ;Repeat  
7326 c9					ret  
7327			  
7327			; Define custom character  
7327			;   On entry: A = Character number (0 to 7)  
7327			;             DE = Pointer to character bitmap data  
7327			;   On exit:  A = Next character number  
7327			;             DE = Next location following bitmap  
7327			;             BC HL IX IY I AF' BC' DE' HL' preserved  
7327			; Character is   
7327 c5			fLCD_Def:   PUSH BC  
7328 f5			            PUSH AF  
7329 07			            RLCA                ;Calculate location  
732a 07			            RLCA                ;  for bitmap data  
732b 07			            RLCA                ;  = 8 x CharacterNumber  
732c f6 40		            OR   kLCD_Def       ;Prepare define character instruction  
732e cd 77 72		            CALL fLCD_Inst      ;Write instruction to LCD  
7331 06 00		            LD   B, 0  
7333 1a			Loop:      LD   A, (DE)        ;Get byte from bitmap  
7334 cd b3 72		            CALL fLCD_Data      ;Write byte to display  
7337 13			            INC  DE             ;Point to next byte  
7338 04			            INC  B              ;Count bytes  
7339 cb 58		            BIT  3, B           ;Finish all 8 bytes?  
733b 28 f6		            JR   Z, Loop       ;No, so repeat  
733d f1			            POP  AF  
733e 3c			            INC  A              ;Increment character number  
733f c1			            POP  BC  
7340 c9			            RET  
7341			  
7341			  
7341			; **********************************************************************  
7341			; **  Private functions  
7341			; **********************************************************************  
7341			  
7341			; Write function to LCD  
7341			;   On entry: A = Function byte to be written  
7341			;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved  
7341 3e 20		WrFn4bit:   LD   A, 00100000b  ;4-bit mode  
7343 18 02		            JR   WrFunc  
7345 3e 30		WrFn8bit:   LD   A, 00110000b  ;8-bit mode  
7347 f5			WrFunc:     PUSH AF  
7348 f5					push af  
7349 3a 00 fb				ld a, (display_lcde1e2)  
734c fe 00				cp 0     ; e1  
734e 20 0f				jr nz, .wfea2	  
7350 f1					pop af  
7351 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
7353 cb df		            SET  kLCDBitE, A     ; TODO Decide which E is being set  
7355 cb 87		            RES  kLCDBitE2, A      ; TODO Decide which E is being set  
7357 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=Low  
7359 cb 9f		            RES  kLCDBitE, A      ; TODO Decide which E is being set  
735b d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
735d 18 0d			jr .wfskip  
735f f1			.wfea2:		pop af  
7360 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
7362 cb c7		            SET  kLCDBitE2, A     ; TODO Decide which E is being set  
7364 cb 9f		            RES  kLCDBitE, A      ; TODO Decide which E is being set  
7366 d3 c0		            OUT  (kLCDPrt), A   ;Output with E=High and RS=Low  
7368 cb 87		            RES  kLCDBitE2, A      ; TODO Decide which E is being set  
736a d3 c0		            OUT  (kLCDPrt), A   ;Output with E=Low and RS=Low  
736c 3e 05		.wfskip:            LD  A, 5  
736e cd 75 73		            CALL LCDDelay       ;Delay 5 ms to complete  
7371 f1			            POP  AF  
7372 c9			            RET  
7373			  
7373			  
7373			; Delay in milliseconds  
7373			;   On entry: A = Number of milliseconds delay  
7373			;   On exit:  AF BC DE HL IX IY I AF' BC' DE' HL' preserved  
7373 3e 01		LCDDelay1:  LD   A, 1           ;Delay by 1 ms  
7375 d5			LCDDelay:   PUSH DE  
7376 5f			            LD   E, A           ;Delay by 'A' ms  
7377 16 00		            LD   D, 0  
7379 cd d2 0c		            CALL aDelayInMS  
737c d1			            POP  DE  
737d c9			            RET  
737e			  
737e			  
737e			testlcd:  
737e 3e 00			ld a, kLCD_Line1  
7380 cd fb 72			call fLCD_Pos  
7383 06 28			ld b, 40  
7385 11 b3 73			ld de, .ttext1  
7388 cd 46 72			call write_len_string  
738b			  
738b 3e 28			ld a, kLCD_Line2  
738d cd fb 72			call fLCD_Pos  
7390 06 28			ld b, 40  
7392 11 dc 73			ld de, .ttext2  
7395 cd 46 72			call write_len_string  
7398 3e 50			ld a, kLCD_Line3  
739a cd fb 72			call fLCD_Pos  
739d 06 28			ld b, 40  
739f 11 05 74			ld de, .ttext3  
73a2 cd 46 72			call write_len_string  
73a5 3e 78			ld a, kLCD_Line4  
73a7 cd fb 72			call fLCD_Pos  
73aa 06 28			ld b, 40  
73ac 11 2e 74			ld de, .ttext4  
73af cd 46 72			call write_len_string  
73b2			  
73b2 76				halt  
73b3			  
73b3			  
73b3 .. 00		.ttext1: db "A234567890123456789012345678901234567890",0  
73dc .. 00		.ttext2: db "B234567890123456789012345678901234567890",0  
7405 .. 00		.ttext3: db "C234567890123456789012345678901234567890",0  
742e .. 00		.ttext4: db "D234567890123456789012345678901234567890",0  
7457			   
7457			  
7457			  
7457			; eof  
7457			  
# End of file firmware_lcd_4x40.asm
7457			;include "firmware_lcd_4x20.asm" 
7457			include "firmware_key_5x10.asm" 
7457			; 5 x 10 decade counter scanner  
7457			  
7457			  
7457			; TODO do cursor shape change for shift keys  
7457			; TODO hard coded positions for the shift keys. Change to work like 4x4 and detect and then hide them  
7457			  
7457			  
7457			; bit mask for each scan column and row for teing the matrix  
7457			  
7457			  
7457			key_init:  
7457			  
7457			; SCMonAPI functions used  
7457			  
7457			; Alphanumeric LCD functions used  
7457			; no need to specify specific functions for this module  
7457			  
7457			  
7457 3e cf		            LD   A, 11001111b  
7459 d3 c3		            OUT  (portbctl), A  ;Port A = PIO 'control' mode  
745b			;            LD   A, 00000000b  
745b 3e 1f		            LD   A, 00011111b  
745d d3 c3		            OUT  (portbctl),A   ;Port A = all lines are outputs  
745f			  
745f			  
745f				; TODO Configure cursor shapes  
745f			  
745f				; Load cursor shapes   
745f 3e 01		            LD   A, 1           ;First character to define (0 to 7)  
7461 11 71 74		            LD   DE, .cursor_shapes    ;Pointer to start of bitmap data  
7464 06 02		            LD   B, 2           ;Number of characters to define  
7466 cd 27 73		.DefLoop:   CALL fLCD_Def       ;Define custom character  
7469 10 fb		            DJNZ .DefLoop       ;Repeat for each character  
746b			  
746b 3e 01				ld a, 1  
746d 32 f6 fa			ld (cursor_shape),a  
7470 c9				ret  
7471			  
7471			; Custom characters for cursor shapes 5 pixels wide by 8 pixels high  
7471			; Up to 8 custom characters can be defined  
7471			.cursor_shapes:      
7471			;; Character 0x00 = Normal  
7471 1f			            DB  11111b  
7472 1f			            DB  11111b  
7473 1f			            DB  11111b  
7474 1f			            DB  11111b  
7475 1f			            DB  11111b  
7476 1f			            DB  11111b  
7477 1f			            DB  11111b  
7478 1f			            DB  11111b  
7479			;; Character 0x01 = Modifier  
7479 1f			            DB  11111b  
747a 1b			            DB  11011b  
747b 1b			            DB  11011b  
747c 1b			            DB  11011b  
747d 1b			            DB  11011b  
747e 1f			            DB  11111b  
747f 1b			            DB  11011b  
7480 1f			            DB  11111b  
7481			  
7481			  
7481			  
7481			  
7481			; Display custom character 0  
7481			;            LD   A, kLCD_Line1+14  
7481			;            CALL fLCD_Pos       ;Position cursor to location in A  
7481			;            LD   A, 0  
7481			;            CALL fLCD_Data      ;Write character in A at cursor  
7481			  
7481			; Display custom character 1  
7481			;            LD   A, kLCD_Line2+14  
7481			;            CALL fLCD_Pos      ;Position cursor to location in A  
7481			;            LD   A, 1  
7481			;            CALL fLCD_Data     ;Write character in A at cursor  
7481			  
7481			; keyboard scanning   
7481			  
7481			; character in from keyboard  
7481			  
7481			; mapping for the pcb layout  
7481			  
7481			.matrix_to_char:  
7481 .. 08 05 0a 00			db "1357890",KEY_BS,KEY_UP,KEY_DOWN,0  
748c .. 0b 0c 00			db "qweryiop",KEY_LEFT,KEY_RIGHT,0  
7497 7e .. 0d 00			db KEY_SYMBOLSHIFT,"asdfghjk",KEY_CR,0  
74a2 7e .. 7e 00			db KEY_SHIFT,"zxcvbnm ",KEY_SHIFT,0  
74ad .. 10 11 12 .. 13 00			db "246tu",KEY_F1,KEY_F2,KEY_F3,"l",KEY_F4,0  
74b8			.matrix_to_shift:  
74b8			  
74b8 .. 08 05 0a 00			db "!#%&*()",KEY_BS,KEY_UP,KEY_DOWN,0  
74c3 .. 07 06 00			db "QWERYIOP",KEY_PREVWORD,KEY_NEXTWORD,0  
74ce 7e .. 0d 00			db KEY_SYMBOLSHIFT,"ASDFGHJK",KEY_CR,0  
74d9 7e .. 7e 00			db KEY_SHIFT,"ZXCVBNM|",KEY_SHIFT,0  
74e4 .. .. 14 15 16 .. 17 00			db '"',"$^TU",KEY_F5,KEY_F6,KEY_F7,"L",KEY_F8,0  
74ef			  
74ef			.matrix_to_symbolshift:  
74ef			  
74ef fc ed .. f7 08 05 0a 00			db 252,237,"5789",247,KEY_BS,KEY_UP,KEY_DOWN,0  
74fa .. b0 0e 0f 00			db "-+/=_?~",176,KEY_HOME,KEY_END,0  
7505 7e .. a5 7c db ff 0d 00			db KEY_SYMBOLSHIFT,"[]{}",165,124,219,255,KEY_CR,0  
7510			;		db KEY_SHIFT,"<>,.:;'\\",KEY_SHIFT,0  
7510 7e .. 5c 7e 00	    	 	db KEY_SHIFT,"<>,.:;'",92, KEY_SHIFT,0  
751b .. f6 eb 7d 7e 18 19 1a df 1b 00			db "@",246,235,125,126,KEY_F9,KEY_F10,KEY_F11,223,KEY_F12,0  
7526			  
7526			  
7526			  
7526			; mapping for a simple straight through breadboard layout  
7526			  
7526			;.matrix_to_char:  
7526			;		db KEY_SHIFT,"zxcv",KEY_UP,KEY_DOWN,"m",KEY_LEFT, KEY_RIGHT,0  
7526			;		db KEY_SHIFT,"zxcvbnm ",KEY_SYMBOLSHIFT,0  
7526			;		db "asdfghjkl",KEY_CR,0  
7526			;		db "qwertyuiop",0  
7526			;		 db "1234567890",0  
7526			;.matrix_to_shift:  
7526			;		db KEY_SHIFT,"zxcv",KEY_UP,KEY_DOWN,"m",KEY_HOME, KEY_END,0  
7526			;		db KEY_SHIFT,"ZXCVBNM",KEY_BS,KEY_SYMBOLSHIFT,0  
7526			;		db "ASDFGHJKL",KEY_CR,0  
7526			;		db "QWERTYUIOP",0  
7526			;		 db "!",'"',"#$%^&*()",0  
7526			;.matrix_to_symbolshift:  
7526			;		db KEY_SHIFT,"zxcv",KEY_UP,KEY_DOWN,"m",KEY_LEFT, KEY_RIGHT,0  
7526			;		db KEY_SHIFT,"<>:;b,.",KEY_BS,KEY_SYMBOLSHIFT,0  
7526			;		db "_?*fghjk=",KEY_CR,0  
7526			;		db "-/+*[]{}@#",0  
7526			;		 db "1234567890",0  
7526			  
7526			;.matrix_to_char: db "D#0*C987B654A321"  
7526			  
7526			  
7526				  
7526			  
7526			; add cin and cin_wait  
7526			  
7526 cd 37 75		cin_wait: 	call cin  
7529						if DEBUG_KEYCINWAIT  
7529							push af  
7529							  
7529							ld hl,key_repeat_ct  
7529							ld (hl),a  
7529							inc hl  
7529							call hexout  
7529							ld hl,key_repeat_ct+3  
7529							ld a,0  
7529							ld (hl),a  
7529			  
7529							    LD   A, kLCD_Line1+11  
7529							    CALL fLCD_Pos       ;Position cursor to location in A  
7529							    LD   DE, key_repeat_ct  
7529							    ;LD   DE, MsgHello  
7529							    CALL fLCD_Str       ;Display string pointed to by DE  
7529			  
7529			  
7529			  
7529							pop af  
7529						endif  
7529 fe 00			cp 0  
752b 28 f9			jr z, cin_wait   ; block until key press  
752d			  
752d							if DEBUG_KEYCINWAIT  
752d								push af  
752d			  
752d								ld a, 'A'	  
752d								ld hl,key_repeat_ct  
752d								ld (hl),a  
752d								inc hl  
752d								ld a,0  
752d								ld (hl),a  
752d			  
752d								    LD   A, kLCD_Line2+11  
752d								    CALL fLCD_Pos       ;Position cursor to location in A  
752d								    LD   DE, key_repeat_ct  
752d								    ;LD   DE, MsgHello  
752d								    CALL fLCD_Str       ;Display string pointed to by DE  
752d			  
752d							call delay500ms  
752d			  
752d								pop af  
752d							endif  
752d f5				push af   ; save key pressed  
752e			  
752e			.cin_wait1:	  
752e							if DEBUG_KEYCINWAIT  
752e								push af  
752e			  
752e								ld a, 'b'	  
752e								ld hl,key_repeat_ct  
752e								ld (hl),a  
752e								inc hl  
752e								ld a,0  
752e								ld (hl),a  
752e			  
752e								    LD   A, kLCD_Line2+11  
752e								    CALL fLCD_Pos       ;Position cursor to location in A  
752e								    LD   DE, key_repeat_ct  
752e								    ;LD   DE, MsgHello  
752e								    CALL fLCD_Str       ;Display string pointed to by DE  
752e			  
752e			  
752e							call delay500ms  
752e			  
752e								pop af  
752e							endif  
752e			  
752e cd 37 75		call cin  
7531 fe 00			cp 0  
7533 20 f9			jr nz, .cin_wait1  	; wait for key release  
7535			if DEBUG_KEYCINWAIT  
7535				push af  
7535			  
7535				ld a, '3'	  
7535				ld hl,key_repeat_ct  
7535				ld (hl),a  
7535				inc hl  
7535				ld a,0  
7535				ld (hl),a  
7535			  
7535			            LD   A, kLCD_Line2+11  
7535			            CALL fLCD_Pos       ;Position cursor to location in A  
7535			            LD   DE, key_repeat_ct  
7535			            ;LD   DE, MsgHello  
7535			            CALL fLCD_Str       ;Display string pointed to by DE  
7535			  
7535			  
7535			call delay500ms  
7535			  
7535				pop af  
7535			endif  
7535			  
7535 f1				pop af   ; get key  
7536 c9				ret  
7537			  
7537			  
7537			; cin - key non-blocking except for keybounce release  
7537			  
7537 cd 55 75		cin: 	call .mtoc  
753a			  
753a			if DEBUG_KEYCIN  
753a				push af  
753a				  
753a				ld hl,key_repeat_ct  
753a				ld (hl),a  
753a				inc hl  
753a				call hexout  
753a				ld hl,key_repeat_ct+3  
753a				ld a,0  
753a				ld (hl),a  
753a			  
753a			            LD   A, kLCD_Line3+15  
753a			            CALL fLCD_Pos       ;Position cursor to location in A  
753a			            LD   DE, key_repeat_ct  
753a			            ;LD   DE, MsgHello  
753a			            CALL fLCD_Str       ;Display string pointed to by DE  
753a			  
753a			  
753a			call delay500ms  
753a			  
753a				pop af  
753a			endif  
753a			  
753a			  
753a				; no key held  
753a fe 00			cp 0  
753c c8				ret z  
753d			  
753d			if DEBUG_KEYCIN  
753d				push af  
753d			  
753d				ld a, '1'	  
753d				ld hl,key_repeat_ct  
753d				ld (hl),a  
753d				inc hl  
753d				ld a,0  
753d				ld (hl),a  
753d			  
753d			            LD   A, kLCD_Line4+15  
753d			            CALL fLCD_Pos       ;Position cursor to location in A  
753d			            LD   DE, key_repeat_ct  
753d			            ;LD   DE, MsgHello  
753d			            CALL fLCD_Str       ;Display string pointed to by DE  
753d			  
753d			  
753d			call delay500ms  
753d			  
753d				pop af  
753d			endif  
753d			  
753d				; stop key bounce  
753d			  
753d 32 c6 fd			ld (key_held),a		 ; save it  
7540 47				ld b, a  
7541			  
7541 c5			.cina1:	push bc  
7542			if DEBUG_KEYCIN  
7542				push af  
7542			  
7542				ld hl,key_repeat_ct  
7542				inc hl  
7542				call hexout  
7542				ld hl,key_repeat_ct+3  
7542				ld a,0  
7542				ld (hl),a  
7542				ld hl,key_repeat_ct  
7542				ld a, '2'	  
7542				ld (hl),a  
7542			  
7542			            LD   A, kLCD_Line4+15  
7542			            CALL fLCD_Pos       ;Position cursor to location in A  
7542			            LD   DE, key_repeat_ct  
7542			            ;LD   DE, MsgHello  
7542			            CALL fLCD_Str       ;Display string pointed to by DE  
7542			  
7542				pop af  
7542			endif  
7542 cd 55 75			call .mtoc  
7545 c1				pop bc  
7546 b8				cp b  
7547 28 f8			jr z, .cina1  
7549 78				ld a,b		  
754a			if DEBUG_KEYCIN  
754a				push af  
754a			  
754a				ld hl,key_repeat_ct  
754a				inc hl  
754a				call hexout  
754a				ld hl,key_repeat_ct+3  
754a				ld a,0  
754a				ld (hl),a  
754a				ld hl,key_repeat_ct  
754a				ld a, '3'	  
754a				ld (hl),a  
754a			  
754a			            LD   A, kLCD_Line4+15  
754a			            CALL fLCD_Pos       ;Position cursor to location in A  
754a			            LD   DE, key_repeat_ct  
754a			            ;LD   DE, MsgHello  
754a			            CALL fLCD_Str       ;Display string pointed to by DE  
754a			  
754a				pop af  
754a			endif  
754a c9				ret  
754b			  
754b			; cinndb - key non-blocking without keybounce release  
754b			  
754b cd 55 75		cinndb: 	call .mtoc  
754e			  
754e			if DEBUG_KEYCIN  
754e				push af  
754e				  
754e				ld hl,key_repeat_ct  
754e				ld (hl),a  
754e				inc hl  
754e				call hexout  
754e				ld hl,key_repeat_ct+3  
754e				ld a,0  
754e				ld (hl),a  
754e			  
754e			            LD   A, kLCD_Line3+15  
754e			            CALL fLCD_Pos       ;Position cursor to location in A  
754e			            LD   DE, key_repeat_ct  
754e			            ;LD   DE, MsgHello  
754e			            CALL fLCD_Str       ;Display string pointed to by DE  
754e			  
754e			  
754e			call delay500ms  
754e			  
754e				pop af  
754e			endif  
754e			  
754e			  
754e				; no key held  
754e fe 00			cp 0  
7550 c8				ret z  
7551			  
7551			if DEBUG_KEYCIN  
7551				push af  
7551			  
7551				ld a, '1'	  
7551				ld hl,key_repeat_ct  
7551				ld (hl),a  
7551				inc hl  
7551				ld a,0  
7551				ld (hl),a  
7551			  
7551			            LD   A, kLCD_Line4+15  
7551			            CALL fLCD_Pos       ;Position cursor to location in A  
7551			            LD   DE, key_repeat_ct  
7551			            ;LD   DE, MsgHello  
7551			            CALL fLCD_Str       ;Display string pointed to by DE  
7551			  
7551			  
7551			call delay500ms  
7551			  
7551				pop af  
7551			endif  
7551			  
7551 32 c6 fd			ld (key_held),a		 ; save it  
7554			  
7554			if DEBUG_KEYCIN  
7554				push af  
7554			  
7554				ld hl,key_repeat_ct  
7554				inc hl  
7554				call hexout  
7554				ld hl,key_repeat_ct+3  
7554				ld a,0  
7554				ld (hl),a  
7554				ld hl,key_repeat_ct  
7554				ld a, '3'	  
7554				ld (hl),a  
7554			  
7554			            LD   A, kLCD_Line4+15  
7554			            CALL fLCD_Pos       ;Position cursor to location in A  
7554			            LD   DE, key_repeat_ct  
7554			            ;LD   DE, MsgHello  
7554			            CALL fLCD_Str       ;Display string pointed to by DE  
7554			  
7554				pop af  
7554			endif  
7554 c9				ret  
7555			; detect keyboard modifier key press and apply new overlay to the face key held  
7555			; hl is the key modifer flag, de map to apply to key_face_held and store in key_actual_pressed  
7555			  
7555			;.cin_map_modifier:   
7555			;	ld a, (hl)  
7555			;	and 255  
7555			;	ret NZ		; modifier key not flagged  
7555			;  
7555			;	; get key face  
7555			;  
7555			;	ld b,(key_face_held)  
7555			;  
7555			;	ld b, key_cols * key_rows  
7555			;  
7555			;	push de  
7555			;	pop hl  
7555			;  
7555			;.mmod1: ld a,(hl)   ; get map test  
7555			;	cp b  
7555			;	jr z, .mmod2  
7555			;  
7555			;  
7555			;  
7555			;.mmod2: inc hl    ;   
7555			;  
7555			;	  
7555			;  
7555			;	  
7555			;  
7555			;	ld hl,key_actual_pressed  
7555			;	ld (hl),a,  
7555			;	ret  
7555			  
7555			; map matrix key held to char on face of key  
7555			  
7555			.mtoc:  
7555			  
7555			; test decade counter strobes  
7555			  
7555			;.decadetest1:  
7555			  
7555			; reset counter  
7555			;ld a, 128  
7555			;out (portbdata),a  
7555			  
7555			  
7555			;ld b, 5  
7555			;.dec1:  
7555			;ld a, 0  
7555			;out (portbdata),a  
7555			;call delay1s  
7555			  
7555			;ld a, 32  
7555			;out (portbdata),a  
7555			;call delay1s  
7555			;call delay1s  
7555			;call delay1s  
7555			;  
7555			;ld a, 64+32  
7555			;out (portbdata),a  
7555			;call delay1s  
7555			;;djnz .dec1  
7555			;  
7555			;jp .decadetest1  
7555			  
7555			  
7555			  
7555			  
7555			  
7555			  
7555			  
7555			  
7555			  
7555			  
7555				; scan keyboard matrix and generate raw scan map  
7555 cd e8 75			call matrix  
7558			  
7558				; reuse c bit 0 left modifer button - ie shift  
7558			        ; reuse c bit 1 for right modifer button - ie symbol shift  
7558				; both can be used with their other mappings and if seen together can do extra mappings (forth keywords????)  
7558			  
7558 0e 00			ld c, 0  
755a			  
755a				; TODO set flags for modifer key presses   
755a				; TODO do a search for modifer key...  
755a			  
755a				;ld hl,keyscan_table_row4  
755a 21 25 fe			ld hl,keyscan_table_row2  
755d			  
755d 7e				ld a, (hl)  
755e fe 23			cp '#'  
7560 20 07			jr nz, .nextmodcheck  
7562 cb c1			set 0, c  
7564 21 b8 74			ld hl, .matrix_to_shift  
7567 18 21			jr .dokeymap  
7569				; TODO for now igonre  
7569			.nextmodcheck:  
7569 21 1a fe			ld hl,keyscan_table_row3  
756c			  
756c 7e				ld a, (hl)  
756d fe 23			cp '#'  
756f 20 07			jr nz, .nextmodcheck2  
7571 cb c9			set 1, c   
7573 21 ef 74			ld hl, .matrix_to_symbolshift  
7576 18 12			jr .dokeymap  
7578			.nextmodcheck2:  
7578 21 2e fe			ld hl,keyscan_table_row2+9    ; right shift  
757b			  
757b 7e				ld a, (hl)  
757c fe 23			cp '#'  
757e 20 07			jr nz, .donemodcheck  
7580 cb c9			set 1, c   
7582 21 b8 74			ld hl, .matrix_to_shift  
7585 18 03			jr .dokeymap  
7587			  
7587				; no modifer found so just map to normal keys  
7587				; get mtoc map matrix to respective keys  
7587			;	ld hl, .matrix_to_char  
7587			;	ld hl, .matrix_to_char  
7587			;	ld b, ((key_cols+1)*key_rows)    ; 30 keys to remap + 8 nulls   
7587			;	ld a, KEY_SHIFT  
7587			;	call findchar  
7587			;  
7587			;	; got offset to key modifer in b  
7587			;  
7587			;	ld hl,keyscan_table_row5  
7587			;  
7587			;	ld a,b  
7587			;	call addatohl  
7587			;	ld a,(hl)  
7587			;  
7587			;	cp '#'  
7587			;	jr nz, .nextmodcheck  
7587			;	set 0, c  
7587			;	ld hl, .matrix_to_char  
7587			;	jr .dokeymap  
7587			;	; TODO for now igonre  
7587			;.nextmodcheck:  
7587			;	ld hl, .matrix_to_symbolshift  
7587			;	ld b, ((key_cols+1)*key_rows)    ; 30 keys to remap + 8 nulls   
7587			;	ld a, KEY_SYMBOLSHIFT  
7587			;	call findchar  
7587			;  
7587			;  
7587			;	; got offset to key modifer in b  
7587			;  
7587			;	ld hl,keyscan_table_row5  
7587			;  
7587			;	ld a,b  
7587			;	call addatohl  
7587			;	ld a,(hl)  
7587			;  
7587			;	cp '#'  
7587			;	jr nz, .donemodcheck  
7587			;	set 1, c   
7587			;	ld hl, .matrix_to_symbolshift  
7587			;	jr .dokeymap  
7587			  
7587			  
7587			  
7587			.donemodcheck:  
7587				; no modifer found so just map to normal keys  
7587				; get mtoc map matrix to respective keys  
7587 21 81 74			ld hl, .matrix_to_char  
758a			  
758a			.dokeymap:  
758a				;ld (key_fa), c   
758a cd a3 75			call .mapkeys  
758d			  
758d			  
758d			if DEBUG_KEY  
758d			  
758d			; Display text on first line  
758d			            LD   A, kLCD_Line1  
758d			            CALL fLCD_Pos       ;Position cursor to location in A  
758d			            LD   DE, keyscan_table_row1  
758d			            ;LD   DE, MsgHello  
758d			            CALL fLCD_Str       ;Display string pointed to by DE  
758d			  
758d			; Display text on second line  
758d			            LD   A, kLCD_Line2  
758d			            CALL fLCD_Pos       ;Position cursor to location in A  
758d			            LD   DE, keyscan_table_row2  
758d			            CALL fLCD_Str       ;Display string pointed to by DE  
758d			            LD   A, kLCD_Line3  
758d			            CALL fLCD_Pos       ;Position cursor to location in A  
758d			            LD   DE, keyscan_table_row3  
758d			            CALL fLCD_Str       ;Display string pointed to by DE  
758d			            LD   A, kLCD_Line4  
758d			            CALL fLCD_Pos       ;Position cursor to location in A  
758d			            LD   DE, keyscan_table_row4  
758d			            CALL fLCD_Str       ;Display string pointed to by DE  
758d			            LD   A, kLCD_Line1+10  
758d			            CALL fLCD_Pos       ;Position cursor to location in A  
758d			            LD   DE, keyscan_table_row5  
758d			            CALL fLCD_Str       ;Display string pointed to by DE  
758d			  
758d				;call delay250ms  
758d			endif  
758d			;	jp testkey  
758d			  
758d			; get first char reported  
758d			  
758d 21 04 fe			ld hl,keyscan_table_row5  
7590			  
7590				;ld b, 46   ; 30 keys to remap + 8 nulls   
7590 06 37			ld b, (key_cols+1)*key_rows    ; 30 keys to remap + 8 nulls   
7592			.findkey:  
7592 7e				ld a,(hl)  
7593 fe 00			cp 0  
7595 28 04			jr z, .nextkey  
7597 fe 7e			cp KEY_MATRIX_NO_PRESS  
7599 20 06			jr nz, .foundkey  
759b			.nextkey:  
759b 23				inc hl  
759c 10 f4			djnz .findkey  
759e 3e 00			ld a,0  
75a0 c9				ret  
75a1			.foundkey:  
75a1 7e				ld a,(hl)  
75a2 c9				ret  
75a3				  
75a3			  
75a3			; convert the raw key map given hl for destination key  
75a3			.mapkeys:  
75a3 11 04 fe			ld de,keyscan_table_row5  
75a6			  
75a6 06 37			ld b, (key_cols+1)*key_rows    ; 30 keys to remap + 8 nulls   
75a8			.remap:  
75a8 1a				ld a,(de)  
75a9 fe 23			cp '#'  
75ab 20 02			jr nz, .remapnext  
75ad				;CALLMONITOR  
75ad 7e				ld a,(hl)  
75ae 12				ld (de),a  
75af			  
75af			  
75af			  
75af			.remapnext:  
75af 23				inc hl  
75b0 13				inc de  
75b1 10 f5			djnz .remap  
75b3				  
75b3 c9				ret  
75b4			  
75b4			  
75b4			  
75b4			.mtocold2:  
75b4			  
75b4			;	; flag if key D is held down and remove from reporting  
75b4			;	ld bc, .key_map_fd    
75b4			;	ld hl, keyscan_table  
75b4			;	ld de, key_fd  
75b4			;	call .key_shift_hold  
75b4			;	cp 255  
75b4			;	jr z, .cinmap  
75b4			;	; flag if key C is held down and remove from reporting  
75b4			;	ld bc, .key_map_fc    
75b4			;	ld hl, keyscan_table+key_cols  
75b4			;	ld de, key_fc  
75b4			;	call .key_shift_hold  
75b4			;	cp 255  
75b4			;	jr z, .cinmap  
75b4			;	; flag if key B is held down and remove from reporting  
75b4			;	ld bc, .key_map_fb    
75b4			;	ld hl, keyscan_table+(key_cols*2)  
75b4			;	ld de, key_fb  
75b4			;	call .key_shift_hold  
75b4			;	cp 255  
75b4			;	jr z, .cinmap  
75b4			;	; flag if key A is held down and remove from reporting  
75b4			;	ld bc, .key_map_fa    
75b4			;	ld hl, keyscan_table+(key_cols*3)  
75b4			;	ld de, key_fa  
75b4			;	call .key_shift_hold  
75b4			;	cp 255  
75b4			;	jr z, .cinmap  
75b4			  
75b4 11 81 74			ld de, .matrix_to_char  
75b7			  
75b7			  
75b7			.cinmap1:   
75b7				if DEBUG_KEY  
75b7			            LD   A, kLCD_Line4  
75b7			            CALL fLCD_Pos       ;Position cursor to location in A  
75b7					push de  
75b7			            LD   DE, keyscan_table  
75b7			            CALL fLCD_Str       ;Display string pointed to by DE  
75b7					pop de  
75b7				endif  
75b7			  
75b7				; scan key matrix table for any held key  
75b7			  
75b7				; de holds either the default matrix or one selected above  
75b7			  
75b7 21 d1 fd			ld hl, keyscan_table  
75ba 06 32			ld b,key_cols*key_rows  
75bc			  
75bc 7e			.cin11:	ld a,(hl)  
75bd fe 23			cp '#'  
75bf 28 08			jr z, .cinhit1  
75c1 23				inc hl  
75c2 13				inc de  
75c3 05				dec b  
75c4 20 f6			jr nz, .cin11  
75c6				; no key found held  
75c6 3e 00			ld a,0  
75c8 c9				ret  
75c9 d5			.cinhit1: push de  
75ca e1				pop hl  
75cb 7e				ld a,(hl)  
75cc c9				ret  
75cd			  
75cd			; flag a control key is held   
75cd			; hl is key pin, de is flag indicator  
75cd			  
75cd			.key_shift_hold1:  
75cd c5				push bc  
75ce 3e 01			ld a, 1  
75d0 32 f6 fa			ld (cursor_shape),a  
75d3 06 00			ld b, 0  
75d5 7e				ld a, (hl)  
75d6 fe 2e			cp '.'  
75d8 28 0a			jr z, .key_shift11  
75da 06 ff			ld b, 255  
75dc 3e 2b			ld a, '+'    ; hide key from later scans  
75de 77				ld (hl),a  
75df 3e 02			ld a, 2  
75e1 32 f6 fa			ld (cursor_shape),a  
75e4			.key_shift11:  
75e4				; write flag indicator  
75e4 78				ld a,b  
75e5 12				ld (de),a  
75e6			  
75e6 d1				pop de    ; de now holds the key map ptr  
75e7 c9				ret  
75e8			  
75e8				  
75e8			  
75e8			; scans keyboard matrix and flags key press in memory array	  
75e8				  
75e8			matrix:  
75e8				;call matrix  
75e8				; TODO optimise the code....  
75e8			  
75e8			  
75e8			;ld hl, keyscan_table_row1  
75e8			;ld de, keyscan_table_row1+1  
75e8			;ld bc,46  
75e8			;ld a,KEY_MATRIX_NO_PRESS  
75e8			;ldir  
75e8			  
75e8			  
75e8			  
75e8			; reset counter  
75e8 3e 80		ld a, 128  
75ea d3 c1		out (portbdata),a  
75ec			  
75ec 06 0a		ld b, 10  
75ee 0e 00		ld c, 0       ; current clock toggle  
75f0			  
75f0			.colscan:  
75f0			  
75f0			; set current column  
75f0			; disable clock enable and set clock low  
75f0			  
75f0			;ld a, 0  
75f0			;out (portbdata),a  
75f0			  
75f0			; For each column scan for switches  
75f0			  
75f0 c5			push bc  
75f1 21 c7 fd		ld hl, keyscan_scancol  
75f4 cd fd 76		call .rowscan  
75f7 c1			pop bc  
75f8			  
75f8			  
75f8			; get back current column  
75f8			  
75f8			; translate the row scan  
75f8			  
75f8			;   
75f8			; row 1  
75f8			  
75f8 78			ld a,b  
75f9			  
75f9 21 3a fe		LD   hl, keyscan_table_row1+10  
75fc			  
75fc cd f0 0f		call subafromhl  
75ff			;call addatohl  
75ff			  
75ff 11 c7 fd		ld de, keyscan_scancol  
7602			  
7602 1a			ld a,(de)  
7603 77			ld (hl),a  
7604			  
7604			  
7604			  
7604			  
7604			; row 2  
7604			  
7604 78			ld a,b  
7605			  
7605 21 2f fe		LD   hl, keyscan_table_row2+10  
7608			  
7608			;call addatohl  
7608 cd f0 0f		call subafromhl  
760b			  
760b			  
760b 11 c8 fd		ld de, keyscan_scancol+1  
760e			  
760e 1a			ld a,(de)  
760f 77			ld (hl),a  
7610			  
7610			  
7610			; row 3  
7610			  
7610 78			ld a,b  
7611			  
7611 21 24 fe		LD   hl, keyscan_table_row3+10  
7614			  
7614			;call addatohl  
7614 cd f0 0f		call subafromhl  
7617			  
7617 11 c9 fd		ld de, keyscan_scancol+2  
761a			  
761a 1a			ld a,(de)  
761b 77			ld (hl),a  
761c			  
761c			  
761c			  
761c			; row 4  
761c			  
761c 78			ld a,b  
761d			  
761d 21 19 fe		LD   hl, keyscan_table_row4+10  
7620			  
7620			;call addatohl  
7620 cd f0 0f		call subafromhl  
7623			  
7623 11 ca fd		ld de, keyscan_scancol+3  
7626			  
7626 1a			ld a,(de)  
7627 77			ld (hl),a  
7628			  
7628			; row 5  
7628			  
7628 78			ld a,b  
7629			  
7629 21 0e fe		LD   hl, keyscan_table_row5+10  
762c			  
762c			;call addatohl  
762c cd f0 0f		call subafromhl  
762f			  
762f 11 cb fd		ld de, keyscan_scancol+4  
7632			  
7632 1a			ld a,(de)  
7633 77			ld (hl),a  
7634			  
7634			; handshake next column  
7634			  
7634			  
7634 3e 40		ld a, 64  
7636 d3 c1		out (portbdata),a  
7638			  
7638 3e 00		ld a, 0  
763a d3 c1		out (portbdata),a  
763c			  
763c			; toggle clk and move to next column  
763c			;ld a, 64  
763c			;cp c  
763c			;  
763c			;jr z, .coltoglow  
763c			;ld c, a  
763c			;jr .coltog  
763c			;.coltoglow:  
763c			;ld c, 0  
763c			;.coltog:  
763c			;ld a, c  
763c			;out (portbdata),a  
763c			  
763c 10 b2		djnz .colscan  
763e			  
763e 3e 0a		ld a,10  
7640 21 30 fe		LD   hl, keyscan_table_row1  
7643 cd de 0f		call addatohl  
7646 3e 00		ld a, 0  
7648 77			ld (hl), a  
7649			  
7649			  
7649 3e 0a		ld a,10  
764b 21 25 fe		LD   hl, keyscan_table_row2  
764e cd de 0f		call addatohl  
7651 3e 00		ld a, 0  
7653 77			ld (hl), a  
7654			  
7654 3e 0a		ld a,10  
7656 21 1a fe		LD   hl, keyscan_table_row3  
7659 cd de 0f		call addatohl  
765c 3e 00		ld a, 0  
765e 77			ld (hl), a  
765f			  
765f 3e 0a		ld a,10  
7661 21 0f fe		LD   hl, keyscan_table_row4  
7664 cd de 0f		call addatohl  
7667 3e 00		ld a, 0  
7669 77			ld (hl), a  
766a			  
766a 3e 0a		ld a,10  
766c 21 04 fe		LD   hl, keyscan_table_row5  
766f cd de 0f		call addatohl  
7672 3e 00		ld a, 0  
7674 77			ld (hl), a  
7675			  
7675			if DEBUG_KEY_MATRIX  
7675			  
7675			; Display text on first line  
7675			            LD   A, kLCD_Line1  
7675			            CALL fLCD_Pos       ;Position cursor to location in A  
7675			            LD   DE, keyscan_table_row1  
7675			            ;LD   DE, MsgHello  
7675			            CALL fLCD_Str       ;Display string pointed to by DE  
7675			  
7675			; Display text on second line  
7675			            LD   A, kLCD_Line2  
7675			            CALL fLCD_Pos       ;Position cursor to location in A  
7675			            LD   DE, keyscan_table_row2  
7675			            CALL fLCD_Str       ;Display string pointed to by DE  
7675			            LD   A, kLCD_Line3  
7675			            CALL fLCD_Pos       ;Position cursor to location in A  
7675			            LD   DE, keyscan_table_row3  
7675			            CALL fLCD_Str       ;Display string pointed to by DE  
7675			            LD   A, kLCD_Line4  
7675			            CALL fLCD_Pos       ;Position cursor to location in A  
7675			            LD   DE, keyscan_table_row4  
7675			            CALL fLCD_Str       ;Display string pointed to by DE  
7675			            LD   A, kLCD_Line4+10  
7675			            CALL fLCD_Pos       ;Position cursor to location in A  
7675			            LD   DE, keyscan_table_row5  
7675			            CALL fLCD_Str       ;Display string pointed to by DE  
7675			  
7675			;call delay250ms  
7675				jp matrix  
7675			endif  
7675 c9			ret  
7676			  
7676			; using decade counter....  
7676			  
7676			  
7676			; TODO reset decade counter to start of scan  
7676			  
7676			; reset 15  
7676			; clock 14  
7676			; ce 13  
7676			  
7676			; 1 - q5  
7676			; 2 - q1  
7676			; 3 - q0  
7676			; 4 - q2  
7676			; 5 - q6  
7676			; 6 - q7  
7676			; 7 - q3  
7676			; 8 - vss  
7676			; 9 - q8  
7676			; 10 - q4  
7676			; 11 - q9  
7676			; 12 - cout  
7676			; 16 - vdd  
7676			  
7676			; clock      ce       reset     output  
7676			; 0          x        0         n  
7676			; x          1        0         n  
7676			; x          x        1         q0  
7676			; rising     0        0         n+1  
7676			; falling    x        0         n  
7676			; x          rising   0         n  
7676			; 1          falling  0         x+1  
7676			;  
7676			; x = dont care, if n < 5 carry = 1 otherwise 0  
7676			  
7676			;   
7676			; reset   
7676			; 13=0, 14=0, 15=1 .. 15=0  
7676			;  
7676			; handshake line  
7676			; 14=1.... read line 14=0  
7676			  
7676			  
7676			  
7676			  
7676			  
7676			; TODO hand shake clock for next column scan  
7676			; TODO detect each row  
7676			  
7676			  
7676			  
7676			  
7676			; reset 128  
7676			; clock 64  
7676			; ce 32  
7676			  
7676			  
7676			.cyclestart:  
7676			  
7676			; reset counter  
7676 3e 80		ld a, 128  
7678 d3 c1		out (portbdata),a  
767a			  
767a			; loop leds  
767a 06 0a		ld b,10  
767c			  
767c			.cycle1:  
767c c5			push bc  
767d 3e 00		ld a, 0  
767f d3 c1		out (portbdata),a  
7681 cd e1 0c		call delay250ms  
7684			  
7684 3e 40		ld a, 64  
7686 d3 c1		out (portbdata),a  
7688 cd e1 0c		call delay250ms  
768b			  
768b 3e 00		ld a, 0  
768d d3 c1		out (portbdata),a  
768f cd e1 0c		call delay250ms  
7692			  
7692 c1			pop bc  
7693 10 e7		djnz .cycle1  
7695			  
7695			  
7695 18 df		jr .cyclestart  
7697			  
7697			  
7697			  
7697			  
7697			  
7697			  
7697			  
7697			  
7697			  
7697			; map matrix key held to char on face of key  
7697			  
7697			;.mtocold:  
7697			;  
7697			;  
7697			;; reset counter  
7697			;ld a, 128  
7697			;out (portbdata),a  
7697			;  
7697			;  
7697			;; scan keyboard row 1  
7697			;ld a, 0  
7697			;out (portbdata),a  
7697			;;ld a, 64  
7697			;;out (portbdata),a  
7697			;  
7697			;  
7697			;	ld a, 128  
7697			;	ld hl, keyscan_table  
7697			;	call .rowscan  
7697			;  
7697			;;ld a, 0  
7697			;;out (portbdata),a  
7697			;ld a, 64  
7697			;out (portbdata),a  
7697			;  
7697			;	ld a, 64  
7697			;	ld hl, keyscan_table+key_cols  
7697			;	call .rowscan  
7697			;  
7697			;ld a, 0  
7697			;out (portbdata),a  
7697			;;ld a, 64  
7697			;;out (portbdata),a  
7697			;	ld a, 32  
7697			;	ld hl, keyscan_table+(key_cols*2)  
7697			;	call .rowscan  
7697			;  
7697			;  
7697			;;ld a, 0  
7697			;;out (portbdata),a  
7697			;ld a, 64  
7697			;out (portbdata),a  
7697			;  
7697			;	ld a, 16  
7697			;	ld hl, keyscan_table+(key_cols*3)  
7697			;	call .rowscan  
7697			;  
7697			;  
7697			;	; flag if key D is held down and remove from reporting  
7697			;	ld bc, .key_map_fd    
7697			;	ld hl, keyscan_table  
7697			;	ld de, key_fd  
7697			;	call .key_shift_hold  
7697			;	cp 255  
7697			;	jr z, .cinmap  
7697			;	; flag if key C is held down and remove from reporting  
7697			;	ld bc, .key_map_fc    
7697			;	ld hl, keyscan_table+key_cols  
7697			;	ld de, key_fc  
7697			;	call .key_shift_hold  
7697			;	cp 255  
7697			;	jr z, .cinmap  
7697			;	; flag if key B is held down and remove from reporting  
7697			;	ld bc, .key_map_fb    
7697			;	ld hl, keyscan_table+(key_cols*2)  
7697			;	ld de, key_fb  
7697			;	call .key_shift_hold  
7697			;	cp 255  
7697			;	jr z, .cinmap  
7697			;	; flag if key A is held down and remove from reporting  
7697			;	ld bc, .key_map_fa    
7697			;	ld hl, keyscan_table+(key_cols*3)  
7697			;	ld de, key_fa  
7697			;	call .key_shift_hold  
7697			;	cp 255  
7697			;	jr z, .cinmap  
7697			;  
7697			;	ld de, .matrix_to_char  
7697			;  
7697			;  
7697			;.cinmap:   
7697			;	if DEBUG_KEY  
7697			;            LD   A, kLCD_Line4  
7697			;            CALL fLCD_Pos       ;Position cursor to location in A  
7697			;		push de  
7697			;            LD   DE, keyscan_table  
7697			;            CALL fLCD_Str       ;Display string pointed to by DE  
7697			;		pop de  
7697			;	endif  
7697			  
7697				; scan key matrix table for any held key  
7697			  
7697				; de holds either the default matrix or one selected above  
7697			  
7697			;	ld hl, keyscan_table  
7697			;	ld b,key_cols*key_rows  
7697			;  
7697			;.cin1:	ld a,(hl)  
7697			;	cp '#'  
7697			;	jr z, .cinhit  
7697			;	inc hl  
7697			;	inc de  
7697			;	dec b  
7697			;	jr nz, .cin1  
7697			;	; no key found held  
7697			;	ld a,0  
7697			;	ret  
7697			;.cinhit: push de  
7697			;	pop hl  
7697			;	ld a,(hl)  
7697			;	ret  
7697			  
7697			; flag a control key is held   
7697			; hl is key pin, de is flag indicator  
7697			  
7697			;.key_shift_hold:  
7697			;	push bc  
7697			;	ld a, 1  
7697			;	ld (cursor_shape),a  
7697			;	ld b, 0  
7697			;	ld a, (hl)  
7697			;	cp '.'  
7697			;	jr z, .key_shift1  
7697			;	ld b, 255  
7697			;	ld a, '+'    ; hide key from later scans  
7697			;	ld (hl),a  
7697			;	ld a, 2  
7697			;	ld (cursor_shape),a  
7697			;.key_shift1:  
7697			;	; write flag indicator  
7697			;	ld a,b  
7697			;	ld (de),a  
7697			;  
7697			;	pop de    ; de now holds the key map ptr  
7697			;	ret  
7697			  
7697				  
7697				  
7697			  
7697			  
7697			  
7697			  
7697			  
7697			  
7697			  
7697			  
7697			  
7697			  
7697			  
7697			;	push hl  
7697			;	push de  
7697			;	push bc  
7697			;	call keyscan  
7697			;	; map key matrix to ascii value of key face  
7697			;  
7697			;	ld hl, key_face_map  
7697			;	ld de, keyscan_table  
7697			;  
7697			;	; get how many keys to look at  
7697			;	ld b, keyscan_table_len  
7697			;	  
7697			;  
7697			;	; at this stage fall out on first key hit  
7697			;	; TODO handle multiple key press  
7697			;  
7697			;map1:	ld a,(hl)  
7697			;	cp '#'  
7697			;	jr z, keyhit  
7697			;	inc hl  
7697			;	inc de  
7697			;	dec b  
7697			;	jr nz, map1  
7697			;nohit:	ld a, 0  
7697			;	jr keydone  
7697			;keyhit: push de  
7697			;	pop hl  
7697			;	ld a,(hl)  
7697			;keydone:  
7697			;	push bc  
7697			;	push de  
7697			; 	push hl  
7697			;	ret   
7697			;  
7697			  
7697			  
7697			  
7697			  
7697			; scan physical key matrix  
7697			  
7697			  
7697			;keyscan:  
7697			;  
7697			;; for each key_row use keyscanr bit mask for out  
7697			;; then read in for keyscanc bitmask  
7697			;; save result of row scan to keyscantable  
7697			;  
7697			;; scan keyboard row 1  
7697			;  
7697			;	ld b, key_rows  
7697			;	ld hl, key_scanr  
7697			;	ld de, keyscan_table  
7697			;  
7697			;rowloop:  
7697			;  
7697			;	ld a,(hl)		; out bit mask to energise keyboard row  
7697			;	call rowscan  
7697			;	inc hl  
7697			;	dec b  
7697			;	jr nz, rowloop  
7697			;  
7697			;	ret  
7697			;  
7697			;  
7697			;; pass a out bitmask, b row number  
7697			;arowscan:   
7697			;	push bc  
7697			;  
7697			;	ld d, b  
7697			;  
7697			;	; calculate buffer location for this row  
7697			;  
7697			;	ld hl, keyscan_table	  
7697			;kbufr:  ld e, key_cols  
7697			;kbufc:	inc hl  
7697			;	dec e  
7697			;	jr nz, kbufc  
7697			;	dec d  
7697			;	jr nz, kbufr  
7697			;  
7697			;	; energise row and read columns  
7697			;  
7697			;	out (portbdata),a  
7697			;	in a,(portbdata)  
7697			;	ld c,a  
7697			;  
7697			;  
7697			;	; save buffer loc  
7697			;  
7697			;	ld (keybufptr), hl  
7697			;  
7697			;	ld hl, key_scanc  
7697			;	ld d, key_cols  
7697			;  
7697			;	; for each column check each bit mask  
7697			;  
7697			;colloop:  
7697			;	  
7697			;  
7697			;	; reset flags for the row   
7697			;  
7697			;	ld b,'.'  
7697			;	and (hl)  
7697			;	jr z, maskskip  
7697			;	ld b,'#'  
7697			;maskskip:  
7697			;	; save  key state  
7697			;	push hl  
7697			;	ld hl, (keybufptr)  
7697			;	ld (hl), b  
7697			;	inc hl  
7697			;	ld (keybufptr), hl  
7697			;  
7697			;	; move to next bit mask  
7697			;	pop hl  
7697			;	inc hl  
7697			;  
7697			;	dec d  
7697			;	jr nz, colloop  
7697			;  
7697			;	ret  
7697			;  
7697			;  
7697			;;  
7697			; lcd functions  
7697			;  
7697			;  
7697			  
7697			;if DEBUG_KEY_MATRIX  
7697			  
7697			; test function to display hardware view of matrix state  
7697			  
7697			matrixold:  
7697			  
7697			  
7697			  
7697			; reset counter  
7697 3e 80		ld a, 128  
7699 d3 c1		out (portbdata),a  
769b			; scan keyboard row 1  
769b 3e 00		ld a, 0  
769d d3 c1		out (portbdata),a  
769f			;ld a, 64  
769f			;out (portbdata),a  
769f 3e 80			ld a, 128  
76a1 21 30 fe			ld hl, keyscan_table_row1  
76a4 cd fd 76			call .rowscan  
76a7			  
76a7			;ld a, 0  
76a7			;out (portbdata),a  
76a7 3e 40		ld a, 64  
76a9 d3 c1		out (portbdata),a  
76ab 3e 40			ld a, 64  
76ad 21 25 fe			ld hl, keyscan_table_row2  
76b0 cd fd 76			call .rowscan  
76b3			  
76b3 3e 00		ld a, 0  
76b5 d3 c1		out (portbdata),a  
76b7			;ld a, 64  
76b7			;out (portbdata),a  
76b7 3e 20			ld a, 32  
76b9 21 1a fe			ld hl, keyscan_table_row3  
76bc cd fd 76			call .rowscan  
76bf			  
76bf			;ld a, 0  
76bf			;out (portbdata),a  
76bf 3e 40		ld a, 64  
76c1 d3 c1		out (portbdata),a  
76c3 3e 10			ld a, 16  
76c5 21 0f fe			ld hl, keyscan_table_row4  
76c8 cd fd 76			call .rowscan  
76cb			  
76cb			; Display text on first line  
76cb 3e 00		            LD   A, kLCD_Line1  
76cd cd fb 72		            CALL fLCD_Pos       ;Position cursor to location in A  
76d0 11 30 fe		            LD   DE, keyscan_table_row1  
76d3			            ;LD   DE, MsgHello  
76d3 cd 1d 73		            CALL fLCD_Str       ;Display string pointed to by DE  
76d6			  
76d6			; Display text on second line  
76d6 3e 28		            LD   A, kLCD_Line2  
76d8 cd fb 72		            CALL fLCD_Pos       ;Position cursor to location in A  
76db 11 25 fe		            LD   DE, keyscan_table_row2  
76de cd 1d 73		            CALL fLCD_Str       ;Display string pointed to by DE  
76e1 3e 50		            LD   A, kLCD_Line3  
76e3 cd fb 72		            CALL fLCD_Pos       ;Position cursor to location in A  
76e6 11 1a fe		            LD   DE, keyscan_table_row3  
76e9 cd 1d 73		            CALL fLCD_Str       ;Display string pointed to by DE  
76ec 3e 78		            LD   A, kLCD_Line4  
76ee cd fb 72		            CALL fLCD_Pos       ;Position cursor to location in A  
76f1 11 0f fe		            LD   DE, keyscan_table_row4  
76f4 cd 1d 73		            CALL fLCD_Str       ;Display string pointed to by DE  
76f7			  
76f7 cd e1 0c			call delay250ms  
76fa c3 e8 75			jp matrix  
76fd			  
76fd			; pass de as row display flags  
76fd			.rowscan:   
76fd			;	out (portbdata),a  
76fd db c1			in a,(portbdata)  
76ff 4f				ld c,a  
7700				; reset flags for the row   
7700 06 7e			ld b,KEY_MATRIX_NO_PRESS  
7702 e6 01			and 1  
7704 28 02			jr z, .p1on  
7706 06 23			ld b,'#'  
7708			.p1on:  
7708 70				ld (hl), b  
7709 23				inc hl  
770a			  
770a 06 7e			ld b,KEY_MATRIX_NO_PRESS  
770c 79				ld a,c  
770d e6 02			and 2  
770f			;	bit 0,a  
770f 28 02			jr z, .p2on  
7711 06 23			ld b,'#'  
7713			.p2on:  
7713 70				ld (hl), b  
7714 23				inc hl  
7715			;  
7715 06 7e			ld b,KEY_MATRIX_NO_PRESS  
7717 79				ld a,c  
7718 e6 04			and 4  
771a			;;	bit 0,a  
771a 28 02			jr z, .p3on  
771c 06 23			ld b,'#'  
771e			.p3on:  
771e 70				ld (hl), b  
771f 23				inc hl  
7720			;;  
7720 06 7e			ld b,KEY_MATRIX_NO_PRESS  
7722			;;	bit 0,a  
7722 79				ld a,c  
7723 e6 08			and 8  
7725 28 02			jr z, .p4on  
7727 06 23			ld b,'#'  
7729			.p4on:  
7729 70				ld (hl), b  
772a 23				inc hl  
772b			  
772b 06 7e			ld b,KEY_MATRIX_NO_PRESS  
772d			;;	bit 0,a  
772d 79				ld a,c  
772e e6 10			and 16  
7730 28 02			jr z, .p5on  
7732 06 23			ld b,'#'  
7734			.p5on:  
7734 70				ld (hl), b  
7735 23				inc hl  
7736			; zero term  
7736 06 00			ld b,0  
7738 70				ld (hl), b  
7739			  
7739 c9			.rscandone: ret  
773a			  
773a			;addatohl:  
773a			;  
773a			 ;add   a, l    ; A = A+L  
773a			  ;  ld    l, a    ; L = A+L  
773a			   ; adc   a, h    ; A = A+L+H+carry  
773a			   ; sub   l       ; A = H+carry  
773a			   ; ld    h, a    ; H = H+carry  
773a			  
773a			;ret  
773a			; eof  
# End of file firmware_key_5x10.asm
773a			;include "firmware_key_4x10.asm" 
773a			 
773a			heap_size:    equ heap_end - heap_start 
773a			;eof 
# End of file os_mega.asm
773a
