# File debug_level2.asm
0000			 
0000			; DEBUG Level 2 - All useful debug on and memory courruption guards 
0000			 
0000			; Odd specific debug points for testing hardware dev 
0000			 
0000			;DEBUG_LEVEL0: equ 0 
0000			;DEBUG_LEVEL0: equ 0 
0000			;DEBUG_LEVEL2: equ 1 
0000			DEBUG_LEVEL: equ '2' 
0000			 
0000			DEBUG_SOUND: equ 0      
0000			DEBUG_STK_FAULT: equ 0 
0000			DEBUG_INPUT: equ 0     ; Debug input entry code 
0000			DEBUG_INPUTV2: equ 0     ; Debug input entry code 
0000			DEBUG_KEYCINWAIT: equ 0 
0000			DEBUG_KEYCIN: equ 0 
0000			DEBUG_KEY: equ 0 
0000			DEBUG_KEY_MATRIX: equ 0 
0000			DEBUG_STORECF: equ 0 
0000			DEBUG_STORESE: equ 1        ; TODO  w locks up, r returns.  
0000			DEBUG_SPI_HARD_CE0: equ 0    ; only handshake on CE0 on port A 
0000			DEBUG_SPI: equ 0    ; low level spi tests 
0000			 
0000			; Enable many break points 
0000			 
0000			DEBUG_FORTH_PARSE_EXEC: equ 0     ; 6 
0000			DEBUG_FORTH_PARSE_EXEC_SLOW: equ 0     ; 6 
0000			DEBUG_FORTH_PARSE_NEXTWORD: equ 0 
0000			DEBUG_FORTH_JP: equ 0    ; 4 
0000			DEBUG_FORTH_MALLOC: equ 0 
0000			DEBUG_FORTH_MALLOC_INT: equ 0 
0000			DEBUG_FORTH_DOT: equ 1 
0000			DEBUG_FORTH_DOT_WAIT: equ 0 
0000			DEBUG_FORTH_MATHS: equ 0 
0000			DEBUG_FORTH_TOK: equ 0    ; 4 
0000			DEBUG_FORTH_PARSE: equ 0    ; 3 
0000			DEBUG_FORTH: equ 0  ;2 
0000			DEBUG_FORTH_WORDS: equ 1   ; 1 
0000			DEBUG_FORTH_PUSH: equ 1   ; 1 
0000			DEBUG_FORTH_UWORD: equ 1   ; 1 
0000			 
0000			; Enable key point breakpoints 
0000			 
0000			DEBUG_FORTH_DOT_KEY: equ 0 
0000			DEBUG_FORTH_PARSE_KEY: equ 0   ; 5 
0000			DEBUG_FORTH_WORDS_KEY: equ 1   ; 1 
0000			 
0000			; Debug stack imbalances 
0000			 
0000			ON: equ 1 
0000			OFF: equ 0 
0000			 
0000			DEBUG_STACK_IMB: equ 0 
0000			STACK_IMB_STORE: equ 20 
0000			 
0000			; House keeping and protections 
0000			 
0000			DEBUG_FORTH_STACK_GUARD: equ 1    ; under/over flows 
0000			DEBUG_FORTH_MALLOC_GUARD: equ 1 
0000			DEBUG_FORTH_MALLOC_HIGH: equ 0     ; warn only if more than 255 chars being allocated. would be highly unusual! 
0000			FORTH_ENABLE_FREE: equ 0 
0000			FORTH_ENABLE_MALLOCFREE: equ 1 
0000			FORTH_ENABLE_DSPPOPFREE: equ 1    ; TODO BUG Seems to be OK in some situations but with SW it crashes straight away 
0000			FORTH_ENABLE_FLOATMATH: equ 0 
0000			; eof 
# End of file debug_level2.asm
# File os_mega_cpm.asm
0000			 
0000			; Hardware Platform 
0000			 
0000			BASE_SC114: equ 0 
0000			BASE_KEV: equ 0 
0000			BASE_CPM: equ 1 
0000			 
0000			ENABLE_BASIC: equ 0 
0000			 
0000			STARTUP_V1: equ 1 
0000			STARTUP_V2: equ 0 
0000			 
0000			tos:	equ 0f000h 
0000			; Using SCM API instead 
0000			;SC114_SIO_1_OUT: equ 81 
0000			;SC114_SIO_1_IN: equ 80 
0000			; 
0000			; 
0000			; CPU clock 
0000			; 
0000			CPU_CLOCK_4MHZ: equ 1 
0000			CPU_CLOCK_8MHZ: equ  0 
0000			CPU_CLOCK_10MHZ: equ  0 
0000			 
0000			; Use this to tune the delay functions if your CPU is a bit quick. i.e. RunCPM on a PC 
0000			 
0000			CPM_DELAY_TUNE: equ 4000 
0000			 
0000			; use microchip serial eeprom for storage 
0000			 
0000			STORAGE_SE: equ 0 
0000			SOUND_ENABLE: equ 0 
0000			 
0000			; the port where the PIO using the SC103 card is located 
0000			 
0000			SC103_PIO: equ 068h 
0000			 
0000			; Full OS but with the 5x10 fullsized keyboard 
0000			 
0000			display_rows: equ 4     
0000			;display_cols: equ 20 
0000			display_cols: equ 40 
0000			 
0000			key_rows: equ 5      
0000			key_cols: equ 10    
0000			 
0000			 
0000			include "main.asm" 
0000			; z80 homebrew opperating system 
0000			; 
0000			 
0000			STARTUP_ENABLE: equ 1 
0000			 
0000			 
0000			; bios jump points via rst 
0000			 
0000			if BASE_SC114 = 1  
0000			 
0000				org 8000h 
0000			endif 
0000			 
0000			if BASE_KEV = 1  
0000			 
0000				org 0h 
0000			endif 
0000			 
0000			if BASE_CPM = 1  
0000			 
0000				org 100h 
0100			endif 
0100 c3 7c 17			jp coldstart     ; rst 0 - cold boot 
0103			 
0103			 
0103 ..			buildtime: db   "Build: " 
010a					include "romtimestamp.asm" 
010a ..			db '2025-08-11 13:24' 
# End of file romtimestamp.asm
011a 00				   db 0 
011b .. 32 00		debuglevel: db   "DL",DEBUG_LEVEL, 0 
011f			 
011f			 
011f			 
011f			;        nop  
011f			;        nop 
011f			;;	org 05h		; null out bdos call 
011f			; 
011f			;        nop  
011f			;        nop  
011f			;        nop 
011f			;;	org 08h 
011f			;;; 
011f			;;	jp cin		; rst 8 - char in 
011f			;;; 
011f			; 
011f			;        nop 
011f			;        nop 
011f			;        nop 
011f			;        nop 
011f			;        nop 
011f			;        nop 
011f			;        nop 
011f			;        nop 
011f			;	org 010h 
011f			;; 
011f			;	jp cout		; rest 010h  - char out 
011f			;; 
011f			;	org 01bh   
011f			; 
011f			;	;jp  		; rst 01bh   - write string to display 
011f			;	jp str_at_display 
011f			; 
011f			; 
011f			;	org 020h 
011f			; 
011f			;	; jp		 ; rst 020h - read char at screen location 
011f			; 
011f			;	org 028h 
011f			 
011f				; jp		 ; rst 028h  - storage i/o 
011f			 
011f			; 	org 030h 
011f			;	jp break_point_state 
011f			  
011f			; $30  
011f			; org 038h 
011f			; $38 
011f			 
011f			; TODO any more important entry points to add to jump table for easier coding use? 
011f			 
011f			if BASE_KEV = 1  
011f			 
011f				; need to be at $66 for nmi support 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255 
011f				jp nmi 
011f			endif 
011f			 
011f			include "firmware.asm" 
011f			  
011f			; main constants (used here and in firmware)  
011f			  
011f			; TODO have page 0 of storage as bios  
011f			  
011f			Device_A: equ 0h  
011f			Device_B: equ 040h          ; Sound  
011f			  
011f			if BASE_KEV  
011f			Device_C: equ 080h          ; Storage and ext cart devices  
011f			endif  
011f			  
011f			if BASE_SC114  
011f			Device_C: equ  SC103_PIO          ; Storage and ext cart devices  
011f			endif  
011f			  
011f			if BASE_CPM  
011f			; TODO fixup for CPM  
011f			Device_C: equ 080h          ; Storage and ext cart devices  
011f			endif  
011f			  
011f			Device_D: equ 0c0h             ; Keyboard and LCD  
011f			  
011f			; Odd specific debug points for testing hardware dev  
011f			  
011f			;if DEBUG_LEVEL0  
011f			;	include "debug_level0.asm"  
011f			;endif  
011f			;if DEBUG_LEVEL1  
011f			;	include "debug_level1.asm"  
011f			;endif  
011f			;if DEBUG_LEVEL2  
011f			;	include "debug_level2.asm"  
011f			;endif  
011f			  
011f			  
011f			CALLMONITOR: macro  
011f			;	call break_point_state  
011f			; now use the break point debug vector  
011f				call debug_vector  
011f				endm  
011f			  
011f			MALLOC_1: equ 1        ; from dk88   
011f			MALLOC_2: equ 0           ; broke  
011f			MALLOC_3: equ 0           ; really broke  
011f			MALLOC_4: equ 0              ; mine pretty basic reuse and max of 250 chars  
011f			  
011f			if BASE_KEV   
011f			;stacksize: equ 256  
011f			; each stack entry is three bytes (type + word)  
011f			stacksize: equ 3*150  
011f			  
011f			STACK_RET_SIZE: equ 64  
011f			STACK_LOOP_SIZE: equ 128  
011f			STACK_DATA_SIZE: equ 512  
011f			endif  
011f			if BASE_SC114  
011f			;tos:	equ 0f000h  
011f			stacksize: equ 256  
011f			STACK_RET_SIZE: equ 64  
011f			STACK_LOOP_SIZE: equ 128  
011f			STACK_DATA_SIZE: equ 256  
011f			endif  
011f			  
011f			if BASE_CPM  
011f			;tos:	equ 0f000h  
011f			stacksize: equ 256  
011f			STACK_RET_SIZE: equ 64  
011f			STACK_LOOP_SIZE: equ 128  
011f			STACK_DATA_SIZE: equ 256  
011f			endif  
011f			  
011f			;if STORAGE_SE == 0  
011f			STORE_BLOCK_PHY:   equ 64    ; physical block size on storage   64byte on 256k eeprom  
011f			STORE_DEVICE_MAXBLOCKS:  equ  255*2 ; how many blocks are there on this storage device  
011f			;endif  
011f			  
011f			; Block 0 at offset $3b is a flag to decide to offer auto start up - 0 = prompt 1-auto run no prompt 2 - dont run  
011f			  
011f			STORE_0_AUTORUN: equ $20  
011f			  
011f			; Block 0 at offset $20+ holds the file number to run at system startup after the display  
011f			  
011f			STORE_0_AUTOFILE: equ $21  
011f			STORE_0_BANKRUN: equ $23  
011f			STORE_0_FILERUN: equ $24  
011f			  
011f			; Block 0 offsets for settings  
011f			  
011f			; if set then skip prompt for start up and accept all  
011f			  
011f			STORE_0_QUICKSTART: equ $25  
011f			  
011f			; Blocks where directory table is held  
011f			  
011f			; Reducing the number of entries increases the max file size  
011f			  
011f			;STORE_DIR_START: equ 1  
011f			;STORE_DIR_END: equ 33  
011f			  
011f			; Blocks from where file data is stored  
011f			  
011f			;STORE_DATA_START: equ STORE_DIR_END + 1  
011f			  
011f			; Block indicators (<32 are data files)  
011f			  
011f			;STORE_BLOCK_CFG: equ $8f       ; config block  
011f			;STORE_BLOCK_DIRF: equ $8e       ; directory block free  
011f			;STORE_BLOCK_DIRU: equ $8d       ; directory block free  
011f			;STORE_BLOCK_FREE: equ $85       ; data block free  
011f			;STORE_BLOCK_AUTO: equ $89       ; auto start code  
011f			  
011f			  
011f			  
011f			; Directory entry flags  
011f			  
011f			;STORE_DIR_FREE: equ 0  
011f			;STORE_DIR_FILE:  equ 1  
011f			  
011f			; Structure offsets to directory entries  
011f			;STORE_DE_FLAG: equ 0  
011f			;STORE_DE_MAXEXT: equ 1  
011f			;STORE_DE_FILENAME: equ 2  
011f			  
011f			; Structure offsets to block 0  
011f			  
011f			;STORE_BK0_ISFOR: equ 1  
011f			;STORE_BK0_LABEL: equ 3  
011f			  
011f			; memory allocation   
011f			  
011f			chk_stund: equ tos+2           ; underflow check word  
011f			chk_stovr: equ chk_stund-stacksize -2; overflow check word  
011f			  
011f			; keyscan table needs rows x cols buffer  
011f			;key_rows: equ 5     ; TODO move out to mini and maxi + 1 null  
011f			;key_cols: equ 10    ; TODO move out to mini and maxi + 1 null  
011f			  
011f			keyscan_table_row1: equ chk_stovr -key_cols-1  
011f			keyscan_table_row2: equ keyscan_table_row1-key_cols-1  
011f			keyscan_table_row3: equ keyscan_table_row2-key_cols-1  
011f			keyscan_table_row4: equ keyscan_table_row3-key_cols-1  
011f			keyscan_table_row5: equ keyscan_table_row4-key_cols-1  
011f			keyscan_table: equ keyscan_table_row5-(key_cols*key_rows)-1  
011f			keyscan_scancol: equ keyscan_table-key_cols  
011f			;keyscan_table_len: equ key_rows*key_cols  
011f			;keybufptr: equ keyscan_table - 2  
011f			;keysymbol: equ keybufptr - 1  
011f			key_held: equ keyscan_scancol-1	; currently held  
011f			key_held_prev: equ key_held - 1   ; previously held (to detect bounce and cycle of key if required)  
011f			key_repeat_ct: equ key_held_prev - 4 ; timers (two words)  
011f			key_fa: equ key_repeat_ct -1 ;  
011f			key_fb: equ key_fa -1 ;  
011f			key_fc: equ key_fb -1 ;  
011f			key_fd: equ key_fc -1 ;  
011f			key_face_held: equ key_fd - 1   
011f			; flag for enabling/disabling various hardware diag loading via block 0 on bank 1  
011f			  
011f			hardware_config: equ key_face_held - 10  
011f			  
011f			; hardware config switches  
011f			; TODO add bitmasks on includes for hardware  
011f			; high byte for expansion ids  
011f			;     0000 0000  no card inserted  
011f			;     0000 0001  storage card inserted  
011f			;     0000 0010  spi sd card active  
011f			  
011f			;       
011f			; low byte:  
011f			;     0000 0001   4x4 keypad  
011f			;     0000 0010   full keyboard  
011f			;     0000 0011   spi/ext keyboard  
011f			;     0000 0100   20x4 lcd  
011f			;     0000 1000   40x4 lcd  
011f			;     0000 1100   spi/ext display  
011f			;     0001 0000   ide interface available  
011f			  
011f			hardware_word: equ hardware_config - 2  
011f			  
011f			; debug marker - optional display of debug point on the debug screens  
011f			  
011f			nmi_vector:  equ hardware_word - 3   ; vector to the nmi handler  
011f			debug_vector:  equ nmi_vector - 3   ; vector to the debug handler  
011f			  
011f			debug_umark: equ debug_vector - 6  ; current user mark  
011f			debug_mark: equ debug_umark - 4    ; internal word debug points  
011f			  
011f			; input_str vars  
011f			input_ptr:  equ debug_mark - 2    ; ptr to the current cursor position of string currently being edited  on entry starting   
011f			input_start:  equ input_ptr - 2    ; ptr to the start of string   
011f			input_size: equ input_start -1  ; number of chars  
011f			input_display_size: equ input_size -1  ; TODO number of chars that are displayable. if < input_size then scroll   
011f			input_at_pos: equ input_display_size - 1 ; frame buffer offset for start of input  
011f			input_under_cursor: equ input_at_pos - 1 ; char under the cursor so we can blink it  
011f			input_at_cursor: equ input_under_cursor - 1 ; offset of cursor to current start of string  
011f			input_cur_flash: equ input_at_cursor - 2 ;  timeout for cursor flash  
011f			input_cur_onoff: equ input_cur_flash - 1 ;  cursor blink on or off  
011f			input_len: equ input_cur_onoff - 5 ; length of current input  
011f			input_cursor: equ input_len - 5 ; offset of cursor to current start of string  
011f			  
011f			; cursor blink rate  
011f			CUR_BLINK_RATE: equ $09  
011f			;CUR_BLINK_RATE: equ 15  
011f			  
011f			key_actual_pressed: equ input_cursor - 1   
011f			key_symbol: equ key_actual_pressed - 1   
011f			key_shift: equ key_symbol - 1   
011f			  
011f			; Display allocation  
011f			  
011f			;display_rows: equ 4     ; move out to mini and mega files  
011f			;display_cols: equ 20  
011f			  
011f			display_fb_len: equ display_rows*display_cols  
011f			  
011f			; primary frame buffer     
011f			display_fb0: equ  key_shift-display_fb_len -1 ; -display_fb_len-1          ; cli input     TODO why is that doubling up?  
011f			; working frame buffers  
011f			display_fb1: equ  display_fb0-display_fb_len -1 ; -display_fb_len-1          ; default running program  
011f			display_fb3: equ  display_fb1-display_fb_len - 1  
011f			display_fb2: equ  display_fb3-display_fb_len - 1  
011f			;  
011f			; pointer to active frame buffer  
011f			display_fb_active: equ display_fb2 - 2  
011f			display_lcde1e2: equ display_fb_active - 1         ; 0=e1, 1=e2   For E1/E2 selection when using the lcd 4x40 display  
011f			display_write_tmp: equ display_lcde1e2 - 2  
011f			display_active:  equ display_write_tmp-3   ; current state of activity char (plus room to write string)  
011f			  
011f			;  
011f			  
011f			;; can load into de directory  
011f			cursor_col: equ display_active-1  
011f			cursor_row: equ cursor_col-1  
011f			cursor_ptr: equ cursor_row - 1     ;  actual offset into lcd memory for row and col combo  
011f			cursor_shape: equ cursor_ptr - 2   ; char used for the current cursor   
011f			  
011f			; maths vars  
011f			  
011f			LFSRSeed: equ cursor_shape -20   
011f			randData: equ LFSRSeed - 2  
011f			xrandc: equ randData - 2  
011f			stackstore: equ xrandc - 2  
011f			seed1: equ  stackstore -2   
011f			seed2: equ seed1 - 2  
011f			  
011f			; cf storage vars  
011f			  
011f			iErrorNum:  equ seed2-1         ;Error number  
011f			iErrorReg:  equ iErrorNum -1              ;Error register  
011f			iErrorVer:  equ iErrorReg - 1              ;Verify error flag  
011f			  
011f			store_bank_active: equ iErrorVer - (5 + 8 ) 		; TODO not used.  indicator of which storage banks are available to use 5 on board and 8 in cart  
011f			  
011f			STORE_BLOCK_LOG:  equ   280      ; TODO remove.... Logical block size     
011f			  
011f			store_page: equ store_bank_active-STORE_BLOCK_LOG-1            ; bigger than page size for eeprom so we can join multiple blocks if they are continuation records  
011f			;?????store_ffpage: equ store_page-STORE_BLOCK_LOG            ; page size for eeprom?????  
011f			store_readptr: equ store_page-2       ; tracks the file extent during storage_read of continuation blocks  
011f			store_readbuf: equ store_readptr-2       ; tracks the position for the buffer during storage_read of continuation blocks  
011f			store_longread: equ store_readbuf -1 ;   if zero then only read one block. If not zero then do a read for as long as required  
011f			store_tmp1: equ store_longread - 2      ; temp pointer holders during ops  
011f			store_tmp2: equ store_tmp1 - 2        ; temp pointer holders during ops  
011f			store_tmp3: equ store_tmp2 - 2        ; temp pointer holders during ops  
011f			store_tmpid: equ store_tmp3 - 1		; page temp id  
011f			store_tmpext: equ store_tmpid - 1		; file extent temp  
011f			store_readcont: equ store_tmpid - 1		; If current read results in an overflow buffer to next record flag it up  
011f			store_openaddr: equ store_readcont - 2		; file block address of current opened file for read  
011f			store_openext: equ store_openaddr - 1		; file extent of current opened file for read  
011f			store_openmaxext: equ store_openext - 1		; max extent of current opened file for read  
011f			store_filecache: equ store_openmaxext-2   ;  TODO (using just one for now)  file id + extent count cache * 5  
011f			store_tmppageid: equ store_filecache-2    ; phyical page id temp  
011f			;  
011f			; spi vars  
011f			  
011f			  
011f			spi_clktime: equ store_tmppageid - 1      ; holds the number of ms that happens between spi clock pulses  
011f			spi_cartdev: equ spi_clktime - 1      ; holds bit mask to send to portb (ext spi) devices  
011f			spi_cartdev2: equ spi_cartdev - 1      ; holds bit mask to send to portb's shift reg devices  
011f			spi_portbyte: equ spi_cartdev2 - 1      ; holds bit mask to send to spi bus   
011f			spi_device: equ spi_portbyte - 1    ; bit mask to send to porta (eeproms) devices  
011f			spi_device_id: equ spi_device - 1    ; human readable bank number  
011f			  
011f			;;;;; forth cli params  
011f			  
011f			; TODO use a different frame buffer for forth???  
011f			  
011f			f_cursor_ptr:  equ spi_device_id - 1  ; offset into frame buffer for any . or EMIT output  
011f			cli_buffer: equ f_cursor_ptr - 20     ; temp hold - maybe not needed  
011f			cli_origtoken: equ cli_buffer - 2     ; pointer to the text of token for this word being checked  
011f			cli_token: equ cli_origtoken - 2     ; pointer to the text of token for this word being checked  
011f			cli_execword: equ cli_token - 2      ; pointer to start of code for this word  
011f			cli_nextword: equ cli_execword - 2      ; pointer to start of next word in dict  
011f			cli_ptr: equ cli_nextword - 2           ; pointer to start of word to parse by forth kernel (working)  
011f			cli_origptr: equ cli_ptr - 2           ; pointer to start of word to parse which resets cli_ptr on each word test  
011f			  
011f			cli_mvdot: equ cli_origptr - 1 ;     ; true will move the cursor once something is displayed  
011f			cli_autodisplay: equ cli_mvdot - 1 ;     ; true will auto update the display (slow) otherwise need to use DRAW  
011f			cli_var_array: equ cli_autodisplay - ( 10 * 2 ) ; word or string pointer variables using V@0-V@9  
011f			cli_var_array2: equ cli_var_array - ( 26 * 2 ) ; word or string pointer variables using VAR word  
011f			cli_ret_sp: equ cli_var_array2 - 2    ; ret stack pointer  
011f			cli_loop_sp: equ cli_ret_sp - 2   ; data stack pointer  
011f			cli_data_sp: equ cli_loop_sp - 2   ; data stack pointer  
011f			  
011f			chk_ret_und: equ cli_data_sp-2           ; underflow check word  
011f			cli_ret_stack: equ chk_ret_und - STACK_RET_SIZE      ; TODO could I just use normal stack for this? - use linked list for looping  
011f			chk_ret_ovr: equ cli_ret_stack -2; overflow check word  
011f			cli_loop_stack: equ chk_ret_ovr - STACK_LOOP_SIZE      ; TODO could I just use normal stack for this? - use linked list for looping  
011f			chk_loop_ovr: equ cli_loop_stack -2; overflow check word  
011f			cli_data_stack: equ chk_loop_ovr - STACK_DATA_SIZE		 ;   
011f			chk_data_ovr: equ cli_data_stack -2; overflow check word  
011f			  
011f			os_var_array: equ chk_data_ovr - (32 * 2)      ;   32 word array for use using the SCRATCH word  
011f			  
011f			; os/forth token vars  
011f			  
011f			os_last_cmd: equ os_var_array-255  
011f			os_cli_cmd: equ os_last_cmd-255              ; cli command entry line  
011f			os_current_i: equ os_cli_cmd-2  
011f			os_cur_ptr: equ os_current_i-2  
011f			os_word_scratch: equ os_cur_ptr-30  
011f			os_tok_len: equ os_word_scratch - 2  
011f			os_tok_ptr: equ os_tok_len - 2               ; our current PC ptr  
011f			os_tok_malloc: equ os_tok_ptr - 2  
011f			os_last_new_uword: equ os_tok_malloc - 2    ; hold start of last user word added  
011f			os_input: equ os_last_new_uword-255    ; buffer for EDIT word  
011f			execscratch: equ os_input-255        ; exec cmd eval buffer  
011f			scratch: equ execscratch-255  
011f			  
011f			os_stack_1: equ scratch - 3       ; stack holding area 1  
011f			os_stack_2: equ os_stack_1 - 3       ; stack holding area 2  
011f			os_stack_3: equ os_stack_2 - 3       ; stack holding area 3  
011f			os_stack_4: equ os_stack_3 - 3       ; stack holding area 4  
011f			  
011f			  
011f			; temp locations for new word processing to save on adding more   
011f			  
011f			os_new_malloc: equ os_stack_4-2  
011f			os_new_parse_len: equ os_new_malloc - 2  
011f			os_new_word_len: equ os_new_parse_len - 2  
011f			os_new_work_ptr: equ os_new_word_len - 2  
011f			os_new_src_ptr: equ os_new_work_ptr - 2  
011f			os_new_exec: equ os_new_src_ptr - 2  
011f			os_new_exec_ptr: equ os_new_exec - 2  
011f			  
011f			; resume memory alloocations....  
011f			  
011f			;os_view_disable: equ os_new_exec_ptr - 1  
011f			os_view_af: equ os_new_exec_ptr - 2  
011f			os_view_hl: equ os_view_af -2  
011f			os_view_de: equ os_view_hl - 2  
011f			os_view_bc: equ os_view_de - 2  
011f			  
011f			; stack checksum word  
011f			if DEBUG_STACK_IMB  
011f				curframe: equ  os_view_de - 5  
011f				store_sp: equ curframe - (STACK_IMB_STORE*4)  
011f				chk_word: equ store_sp - 2		 ; this is the word to init and then check against to detect stack corruption. Held far away from all stacks  
011f			else  
011f				chk_word: equ os_view_bc - 2		 ; this is the word to init and then check against to detect stack corruption. Held far away from all stacks  
011f			endif  
011f			  
011f			; with data stack could see memory filled with junk. need some memory management   
011f			; malloc and free entry points added  
011f			  
011f			;free_list:  equ chk_word - 4     ; Block struct for start of free list (MUST be 4 bytes)  
011f			;heap_size: equ  (free_list-08100h)      ; Number of bytes available in heap   TODO make all of user ram  
011f			;;heap_start: equ free_list - heap_size  ; Starting address of heap  
011f			;heap_end: equ free_list-1  ; Starting address of heap  
011f			;heap_start: equ free_list - heap_size  ; Starting address of heap  
011f			  
011f			;heap_start: equ free_list - heap_size  ; Starting address of heap  
011f			heap_end: equ chk_word-1  ; Starting address of heap  
011f			  
011f			  
011f			;if BASE_KEV   
011f			;heap_start: equ 0800eh  ; Starting address of heap  
011f			;free_list:  equ 0800ah      ; Block struct for start of free list (MUST be 4 bytes)  
011f			;heap_size: equ  heap_end-heap_start      ; Number of bytes available in heap   TODO make all of user ram  
011f			;endif  
011f			  
011f			;if BASE_SC114  
011f			;heap_start: equ baseram+15  ; Starting address of heap  
011f			;free_list:  equ baseram+10      ; Block struct for start of free list (MUST be 4 bytes)  
011f			;endif  
011f			  
011f			  
011f			;;;;  
011f			  
011f			  
011f			; change below to point to last memory alloc above  
011f			topusermem:  equ   heap_start  
011f			  
011f			;if BASE_KEV   
011f			;baseusermem: equ 08000h  
011f			;endif  
011f			  
011f			;if BASE_SC114  
011f			;;aseusermem:     equ    12  
011f			;baseusermem:     equ    prompt  
011f			;;baseusermem:     equ    endofcode  
011f			;endif  
011f			  
011f			  
011f			; **********************************************************************  
011f			; **  Constants  
011f			; **********************************************************************  
011f			  
011f			; Constants used by this code module  
011f			kDataReg:   EQU Device_D           ;PIO port A data register  
011f			kContReg:   EQU Device_D+2           ;PIO port A control register  
011f			  
011f			  
011f			portbdata:  equ Device_D+1    ; port b data  
011f			portbctl:   equ Device_D+3    ; port b control  
011f			  
011f			  
011f			;KEY_SHIFT:   equ 5  
011f			;KEY_SYMBOLSHIFT:  equ 6  
011f			  
011f			KEY_SHIFTLOCK: equ 4  
011f			  
011f			  
011f			KEY_UP: equ 5  
011f			KEY_NEXTWORD: equ 6  
011f			KEY_PREVWORD: equ 7  
011f			KEY_BS: equ 8  
011f			KEY_TAB:  equ 9  
011f			KEY_DOWN: equ 10  
011f			KEY_LEFT: equ 11  
011f			KEY_RIGHT: equ 12  
011f			KEY_CR:   equ 13  
011f			KEY_HOME: equ 14  
011f			KEY_END: equ 15  
011f			  
011f			KEY_F1: equ 16  
011f			KEY_F2: equ 17  
011f			KEY_F3: equ 18  
011f			KEY_F4: equ 19  
011f			  
011f			KEY_F5: equ 20  
011f			KEY_F6: equ 21  
011f			KEY_F7: equ 22  
011f			KEY_F8: equ 23  
011f			  
011f			KEY_F9: equ 24  
011f			KEY_F10: equ 25  
011f			KEY_F11: equ 26  
011f			KEY_F12: equ 27  
011f			  
011f			;if DEBUG_KEY  
011f			;	KEY_MATRIX_NO_PRESS: equ '.'  
011f			;	KEY_SHIFT:   equ '.'  
011f			;	KEY_SYMBOLSHIFT:  equ '.'  
011f			;else  
011f				KEY_SHIFT:   equ '~'  
011f				KEY_SYMBOLSHIFT:  equ '~'  
011f				KEY_MATRIX_NO_PRESS: equ '~'  
011f			;endi  
011f			  
011f			  
011f			  
011f			  
011f			; Macro to make adding debug marks easier  
011f			  
011f			DMARK: macro str  
011f				push af  
011f				ld a, (.dmark)  
011f				ld (debug_mark),a  
011f				ld a, (.dmark+1)  
011f				ld (debug_mark+1),a  
011f				ld a, (.dmark+2)  
011f				ld (debug_mark+2),a  
011f				jr .pastdmark  
011f			.dmark: db str  
011f			.pastdmark: pop af  
011f			  
011f			endm  
011f			  
011f			  
011f			; macro to detect for stack imbalances  
011f			  
011f			include "stackimbal.asm"  
011f			; Macro and code to detect stock imbalances 
011f			 
011f			SPPUSH: equ 0 
011f			 
011f			; Add a stack frame which can be checked before return 
011f			 
011f			STACKFRAME: macro onoff frame1 frame2 
011f			 
011f				if DEBUG_STACK_IMB 
011f					if onoff 
011f						; save current SP 
011f						exx 
011f			 
011f						ld de, frame1 
011f						ld a, d 
011f						ld hl, curframe 
011f						call hexout 
011f						ld a, e 
011f						ld hl, curframe+2 
011f						call hexout 
011f			  
011f						ld hl, frame1 
011f						push hl 
011f						ld hl, frame2 
011f						push hl 
011f						exx 
011f					endif 
011f					 
011f				endif 
011f			endm 
011f			 
011f			STACKFRAMECHK: macro onoff frame1 frame2 
011f			 
011f					 
011f				if DEBUG_STACK_IMB 
011f					if onoff 
011f						exx 
011f						; check stack frame SP 
011f			 
011f						ld hl, frame2 
011f						pop de   ; frame2 
011f			 
011f						call cmp16 
011f						jr nz, .spnosame 
011f						 
011f			 
011f						ld hl, frame1 
011f						pop de   ; frame1 
011f			 
011f						call cmp16 
011f						jr z, .spfrsame 
011f			 
011f						.spnosame: call showsperror 
011f			 
011f						.spfrsame: nop 
011f			 
011f						exx 
011f					endif 
011f					 
011f				endif 
011f			 
011f			 
011f			endm 
011f			 
011f			 
011f			; for a sub routine, wrap SP collection and comparisons 
011f			 
011f			; Usage: 
011f			; 
011f			; SAVESP ON/OFF 0-STACK_IMB_STORE/4 
011f			; CHECKSP ON/OFF 0-STACK_IMB_STORE/4 
011f			 
011f			SAVESP: macro onoff storeword 
011f			 
011f				if DEBUG_STACK_IMB 
011f					if onoff 
011f						; save current SP 
011f			 
011f						ld (store_sp+(storeword*4)), sp 
011f			 
011f					endif 
011f					 
011f				endif 
011f			 
011f			endm 
011f			 
011f			CHECKSP: macro onoff storeword 
011f			 
011f				if DEBUG_STACK_IMB 
011f					if onoff 
011f			 
011f						; save SP after last save 
011f				 
011f						ld (store_sp+(storeword*4)+2), sp 
011f			 
011f						push hl 
011f						ld hl, store_sp+(storeword*4) 
011f						call check_stack_sp  
011f						pop hl 
011f			 
011f			 
011f					endif 
011f					 
011f				endif 
011f			 
011f			endm 
011f			 
011f			if DEBUG_STACK_IMB 
011f			 
011f			check_stack_sp: 
011f					push de 
011f			 
011f					ld e, (hl) 
011f					inc hl 
011f					ld d, (hl) 
011f					inc hl 
011f			 
011f					push de 
011f			 
011f			 
011f					ld e, (hl) 
011f					inc hl 
011f					ld d, (hl) 
011f					inc hl 
011f			 
011f					pop hl 
011f			 
011f			 
011f					; check to see if the same 
011f			 
011f					call cmp16 
011f					jr z, .spsame 
011f			 
011f					; not same 
011f			 
011f					call showsperror 
011f			.spsame: 
011f			 
011f					pop de 
011f			 
011f					ret 
011f			 
011f			.sperr:  db "Stack imbalance",0 
011f			 
011f			 
011f			showsperror: 
011f			 
011f			 
011f				push hl 
011f				push af 
011f				push de 
011f				call clear_display 
011f				ld de, .sperr 
011f				ld a,0 
011f			;	ld de,os_word_scratch 
011f				call str_at_display 
011f				ld a, display_row_1+17 
011f				ld de, debug_mark 
011f				call str_at_display 
011f				ld a, 0 
011f				ld (curframe+4),a 
011f				ld hl, curframe 
011f				ld de, os_word_scratch 
011f				ld a, display_row_4 
011f				call str_at_display 
011f				call update_display 
011f				;call break_point_state 
011f				call cin_wait 
011f			 
011f			;	ld a, ' ' 
011f			;	ld (os_view_disable), a 
011f				call bp_on 
011f				pop de	 
011f				pop af 
011f				pop hl 
011f				CALLMONITOR 
011f				ret 
011f			 
011f			endif 
011f			 
011f			 
011f			 
011f			; eof 
# End of file stackimbal.asm
011f			  
011f			;TODO macro to calc col and row offset into screen  
011f			  
011f			  
011f			  
011f			hardware_init:  
011f			  
011f				  
011f			  
011f					;ld a, 0  
011f					;ld (hardware_diag), a  
011f			  
011f					; clear all the buffers  
011f			  
011f 21 0a ed				ld hl, display_fb1  
0122 22 c6 eb				ld (display_fb_active), hl  
0125			  
0125 cd c8 0b				call clear_display  
0128			  
0128 21 c8 eb				ld hl, display_fb2  
012b 22 c6 eb				ld (display_fb_active), hl  
012e			  
012e cd c8 0b				call clear_display  
0131			  
0131					; init primary frame buffer area  
0131 21 ab ed				ld hl, display_fb0  
0134 22 c6 eb				ld (display_fb_active), hl  
0137			  
0137 cd c8 0b				call clear_display  
013a			  
013a			  
013a cd d2 5d				call lcd_init		; lcd hardware first as some screen functions called during key_init e.g. cursor shapes  
013d			  
013d cd c0 5e			call key_init  
0140 cd ad 01			call storage_init  
0143			  
0143				; setup malloc functions  
0143			  
0143				if MALLOC_1  
0143 cd ac 11				call  heap_init  
0146				endif  
0146				if MALLOC_4  
0146					call  heap_init  
0146				endif  
0146			  
0146				; init sound hardware if present  
0146			  
0146				if SOUND_ENABLE  
0146					call sound_init  
0146				endif  
0146			  
0146				; lcd test sequence  
0146					  
0146 cd eb 0b			call update_display  
0149 cd 00 0b			call delay1s  
014c 3e 2b			ld a,'+'  
014e cd cd 0b			call fill_display  
0151 cd eb 0b			call update_display  
0154 cd 00 0b			call delay1s  
0157 3e 2a			ld a,'*'  
0159 cd cd 0b			call fill_display  
015c cd eb 0b			call update_display  
015f cd 00 0b			call delay1s  
0162 3e 2d			ld a,'-'  
0164 cd cd 0b			call fill_display  
0167 cd eb 0b			call update_display  
016a cd 00 0b			call delay1s  
016d			  
016d			; boot splash screen  
016d			if display_cols == 20	  
016d			        ld a, display_row_1    
016d			else  
016d 3e 0a		        ld a, display_row_1 +10   
016f			endif  
016f 11 da 16			ld de, prom_bootmsg  
0172 cd db 0b			call str_at_display  
0175 cd eb 0b			call update_display  
0178			  
0178			  
0178 cd 00 0b			call delay1s  
017b cd 00 0b			call delay1s  
017e			if display_cols == 20	  
017e			            LD   A, display_row_3+2  
017e			else  
017e 3e 5c		            LD   A, display_row_3+12  
0180			endif  
0180 11 ef 16			ld de, prom_bootmsg1  
0183 cd db 0b			call str_at_display  
0186			; display debug level  
0186 3e 78		            LD   A, display_row_4  
0188 11 1b 01			ld de, debuglevel  
018b cd db 0b			call str_at_display  
018e			  
018e cd eb 0b			call update_display  
0191 cd 00 0b			call delay1s  
0194 cd 00 0b			call delay1s  
0197			  
0197			;	ld a, display_row_4+3  
0197			;	ld de, bootmsg2  
0197			;	call str_at_display  
0197			;	call update_display  
0197			;	call delay1s  
0197			;	call delay1s  
0197			  
0197			; debug mark setup  
0197			  
0197 3e 5f		ld a, '_'  
0199 32 65 ee		ld (debug_mark),a  
019c 32 66 ee		ld (debug_mark+1),a  
019f 32 67 ee		ld (debug_mark+2),a  
01a2 3e 00		ld a,0  
01a4 32 68 ee		ld (debug_mark+3),a  
01a7 32 69 ee		ld (debug_umark),a  
01aa			  
01aa c9					ret  
01ab			  
01ab			  
01ab			;bootmsg2:	db "Firmware v0.1",0  
01ab			  
01ab			; a 4x20 lcd  
01ab			; cout for display, low level positioning and writing functions (TODO) for hardware abstraction  
01ab			  
01ab			;if display_cols == 20  
01ab			;	include "firmware_lcd_4x20.asm"  
01ab			;endif  
01ab			  
01ab			;if display_cols == 40  
01ab			;	include "firmware_lcd_4x40.asm"  
01ab			;endif  
01ab			  
01ab			;  
01ab			; TODO use the low spare two pins on port a of display pio to bit bang a serial out video display to an esp  
01ab			; TODO abstract the bit bang video out interface for dual display  
01ab			; TODO wire video out to tx pin on rc2014 bus  
01ab			  
01ab			; must supply cin, and cin_wait for low level hardware abstraction   
01ab			; moved text_input entry points to here and leave the firmware hardware modules as abstraction layer  
01ab			; test scancode  
01ab			  
01ab			;;;;;  
01ab			;;;  
01ab			; Moved out to mini and maxi versions  
01ab			;  
01ab			; include "firmware_key_4x4.asm"  
01ab			; using existing 4 wire x 4 resistor array for input  
01ab			;include "firmware_key_4x10.asm"  
01ab			; need to mod the board for 5 rows due to resistor array  
01ab			;include "firmware_key_5x10.asm"  
01ab			  
01ab			; storage hardware interface  
01ab			  
01ab			; use microchip serial eeprom for storage  
01ab			  
01ab			  
01ab			if STORAGE_SE  
01ab				include "firmware_spi.asm"  
01ab				include "firmware_seeprom.asm"  
01ab			else  
01ab			   ; create some stubs for the labels  
01ab c9			se_readbyte: ret  
01ac c9			se_writebyte: ret  
01ad c9			storage_init: ret  
01ae			  
01ae			endif  
01ae			  
01ae			; use cf card for storage - throwing timeout errors. Hardware or software?????  
01ae			;include "firmware_cf.asm"  
01ae			  
01ae			; load up high level storage hardward abstractions  
01ae			include "firmware_storage.asm"  
01ae			 
01ae			; persisent storage hardware abstraction layer  
01ae			 
01ae			 
01ae			 
01ae			; Block 0 on storage is a config state 
01ae			 
01ae			 
01ae			 
01ae			; TODO add read phy block and write phy block functions 
01ae			; TODO add presence check (i.e. read write byte 0 of block 0 for eeprom) 
01ae			 
01ae			; Abstraction layer  
01ae			 
01ae			; Logocial block size is same size as physical size - using tape concept 
01ae			 
01ae			;STORE_BLOCK_PHY2LOG: equ (STORE_BLOCK_LOG/STORE_BLOCK_PHY)       ; How many physical blocks make up a logical block 
01ae			;STORE_BLOCK_MAX: equ (STORE_BLOCK_PHY*STORE_DEVICE_MAXBLOCKS)/255    ; Max number of logical blocks on the device 
01ae			 
01ae			 
01ae			 
01ae			; Filesystem layout (Logical layout) 
01ae			; 
01ae			; Block 0 - Bank config  
01ae			; 
01ae			;      Byte - 0 file id counter 
01ae			;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
01ae			;      Byte - 3-20 zero terminated bank label 
01ae			; 
01ae			; Block 1 > File storage 
01ae			; 
01ae			;      Byte 0 file id    - block 0 file details 
01ae			;      Byte 1 block id - block 0 is file  
01ae			;            Byte 2-15 - File name 
01ae			; 
01ae			;       - to end of block data 
01ae			; 
01ae			 
01ae			; Get ID for the file named in pointer held HL 
01ae			; Returns ID in HL = 255 if no file found 
01ae			 
01ae			storage_getid: 
01ae			 
01ae 22 6d ea			ld (store_tmp1), hl 
01b1			 
01b1				if DEBUG_STORESE 
01b1					DMARK "SGI" 
01b1 f5				push af  
01b2 3a c6 01			ld a, (.dmark)  
01b5 32 65 ee			ld (debug_mark),a  
01b8 3a c7 01			ld a, (.dmark+1)  
01bb 32 66 ee			ld (debug_mark+1),a  
01be 3a c8 01			ld a, (.dmark+2)  
01c1 32 67 ee			ld (debug_mark+2),a  
01c4 18 03			jr .pastdmark  
01c6 ..			.dmark: db "SGI"  
01c9 f1			.pastdmark: pop af  
01ca			endm  
# End of macro DMARK
01ca					CALLMONITOR 
01ca cd 6f ee			call debug_vector  
01cd				endm  
# End of macro CALLMONITOR
01cd				endif 
01cd				; get block 0 and set counter for number of files to scan 
01cd			 
01cd cd 38 03			call storage_get_block_0 
01d0			 
01d0 3a 74 ea			ld a, (store_page) 
01d3 47				ld b, a 
01d4			 
01d4				; get extent 0 of each file id 
01d4			 
01d4				if DEBUG_STORESE 
01d4					DMARK "SGc" 
01d4 f5				push af  
01d5 3a e9 01			ld a, (.dmark)  
01d8 32 65 ee			ld (debug_mark),a  
01db 3a ea 01			ld a, (.dmark+1)  
01de 32 66 ee			ld (debug_mark+1),a  
01e1 3a eb 01			ld a, (.dmark+2)  
01e4 32 67 ee			ld (debug_mark+2),a  
01e7 18 03			jr .pastdmark  
01e9 ..			.dmark: db "SGc"  
01ec f1			.pastdmark: pop af  
01ed			endm  
# End of macro DMARK
01ed					CALLMONITOR 
01ed cd 6f ee			call debug_vector  
01f0				endm  
# End of macro CALLMONITOR
01f0				endif 
01f0 60			.getloop:	ld h, b 
01f1 2e 00				ld l, 0 
01f3 c5					push bc 
01f4			 
01f4 11 74 ea				ld de, store_page 
01f7				if DEBUG_STORESE 
01f7					DMARK "SGr" 
01f7 f5				push af  
01f8 3a 0c 02			ld a, (.dmark)  
01fb 32 65 ee			ld (debug_mark),a  
01fe 3a 0d 02			ld a, (.dmark+1)  
0201 32 66 ee			ld (debug_mark+1),a  
0204 3a 0e 02			ld a, (.dmark+2)  
0207 32 67 ee			ld (debug_mark+2),a  
020a 18 03			jr .pastdmark  
020c ..			.dmark: db "SGr"  
020f f1			.pastdmark: pop af  
0210			endm  
# End of macro DMARK
0210					CALLMONITOR 
0210 cd 6f ee			call debug_vector  
0213				endm  
# End of macro CALLMONITOR
0213				endif 
0213 cd e0 07				call storage_read 
0216 cd 1e 0e				call ishlzero 
0219 28 2d				jr z, .gap 
021b					 
021b					; have a file name read. Is it one we want. 
021b			 
021b 2a 6d ea				ld hl, (store_tmp1) 
021e 11 77 ea				ld de, store_page+3   ; file name 
0221			 
0221				if DEBUG_STORESE 
0221					DMARK "SGc" 
0221 f5				push af  
0222 3a 36 02			ld a, (.dmark)  
0225 32 65 ee			ld (debug_mark),a  
0228 3a 37 02			ld a, (.dmark+1)  
022b 32 66 ee			ld (debug_mark+1),a  
022e 3a 38 02			ld a, (.dmark+2)  
0231 32 67 ee			ld (debug_mark+2),a  
0234 18 03			jr .pastdmark  
0236 ..			.dmark: db "SGc"  
0239 f1			.pastdmark: pop af  
023a			endm  
# End of macro DMARK
023a					CALLMONITOR 
023a cd 6f ee			call debug_vector  
023d				endm  
# End of macro CALLMONITOR
023d				endif 
023d cd 93 11				call strcmp 
0240 20 06				jr nz, .gap   ; not this one 
0242			 
0242 c1				        pop bc 
0243			 
0243 26 00				ld h, 0 
0245 68					ld l, b 
0246 18 22				jr .getdone 
0248						 
0248			 
0248			 
0248			 
0248			.gap: 
0248				if DEBUG_STORESE 
0248					DMARK "SGg" 
0248 f5				push af  
0249 3a 5d 02			ld a, (.dmark)  
024c 32 65 ee			ld (debug_mark),a  
024f 3a 5e 02			ld a, (.dmark+1)  
0252 32 66 ee			ld (debug_mark+1),a  
0255 3a 5f 02			ld a, (.dmark+2)  
0258 32 67 ee			ld (debug_mark+2),a  
025b 18 03			jr .pastdmark  
025d ..			.dmark: db "SGg"  
0260 f1			.pastdmark: pop af  
0261			endm  
# End of macro DMARK
0261					CALLMONITOR 
0261 cd 6f ee			call debug_vector  
0264				endm  
# End of macro CALLMONITOR
0264				endif 
0264			 
0264 c1					pop bc 
0265 10 89				djnz .getloop 
0267 21 ff 00				ld hl, 255 
026a			.getdone: 
026a			 
026a				if DEBUG_STORESE 
026a					DMARK "SGe" 
026a f5				push af  
026b 3a 7f 02			ld a, (.dmark)  
026e 32 65 ee			ld (debug_mark),a  
0271 3a 80 02			ld a, (.dmark+1)  
0274 32 66 ee			ld (debug_mark+1),a  
0277 3a 81 02			ld a, (.dmark+2)  
027a 32 67 ee			ld (debug_mark+2),a  
027d 18 03			jr .pastdmark  
027f ..			.dmark: db "SGe"  
0282 f1			.pastdmark: pop af  
0283			endm  
# End of macro DMARK
0283					CALLMONITOR 
0283 cd 6f ee			call debug_vector  
0286				endm  
# End of macro CALLMONITOR
0286				endif 
0286			 
0286 c9				ret 
0287			 
0287			 
0287			 
0287			 
0287			 
0287			 
0287			 
0287			 
0287			; Read Block 
0287			; ---------- 
0287			; 
0287			; With current bank 
0287			;  
0287			; Get block number to read 
0287			; Load physical blocks starting at start block into buffer 
0287			 
0287			; de points to buffer to use 
0287			; hl holds logical block number  
0287			 
0287			storage_read_block: 
0287			 
0287				; TODO bank selection 
0287			 
0287				; for each of the physical blocks read it into the buffer 
0287 06 40			ld b, STORE_BLOCK_PHY 
0289			 
0289				if DEBUG_STORESE 
0289 d5					push de 
028a				endif 
028a				 
028a			.rl1:    
028a			 
028a				; read physical block at hl into de 
028a			        ; increment hl and de to next read position on exit 
028a			 
028a e5				push hl 
028b d5				push de	 
028c c5				push bc 
028d			;	if DEBUG_STORESE 
028d			;		push af 
028d			;		ld a, 'R' 
028d			;		ld (debug_mark),a 
028d			;		pop af 
028d			;		CALLMONITOR 
028d			;	endif 
028d cd ab 01			call se_readbyte 
0290			;	if DEBUG_STORESE 
0290			;		ld a,(spi_portbyte) 
0290			;		ld l, a 
0290			;		push af 
0290			;		ld a, '1' 
0290			;		ld (debug_mark),a 
0290			;		pop af 
0290			;		CALLMONITOR 
0290			;	endif 
0290 c1				pop bc 
0291 d1				pop de 
0292 e1				pop hl 
0293 12				ld (de),a 
0294 23				inc hl 
0295 13				inc de 
0296			 
0296			;	if DEBUG_STORESE 
0296			;		push af 
0296			;		ld a, 'r' 
0296			;		ld (debug_mark),a 
0296			;		pop af 
0296			;		CALLMONITOR 
0296			;	endif 
0296			 
0296 10 f2			djnz .rl1 
0298			 
0298				if DEBUG_STORESE 
0298					DMARK "SRB" 
0298 f5				push af  
0299 3a ad 02			ld a, (.dmark)  
029c 32 65 ee			ld (debug_mark),a  
029f 3a ae 02			ld a, (.dmark+1)  
02a2 32 66 ee			ld (debug_mark+1),a  
02a5 3a af 02			ld a, (.dmark+2)  
02a8 32 67 ee			ld (debug_mark+2),a  
02ab 18 03			jr .pastdmark  
02ad ..			.dmark: db "SRB"  
02b0 f1			.pastdmark: pop af  
02b1			endm  
# End of macro DMARK
02b1 d1					pop de 
02b2			; 
02b2			;		push af 
02b2			;		ld a, 'R' 
02b2			;		ld (debug_mark),a 
02b2			;		pop af 
02b2					CALLMONITOR 
02b2 cd 6f ee			call debug_vector  
02b5				endm  
# End of macro CALLMONITOR
02b5				endif 
02b5 c9				ret	 
02b6				 
02b6			 
02b6			; File Size 
02b6			; --------- 
02b6			; 
02b6			;   hl file id 
02b6			; 
02b6			;  returns in hl the number of blocks 
02b6			 
02b6			storage_file_size: 
02b6 5d				ld e, l 
02b7 16 00			ld d, 0 
02b9 21 40 00			ld hl, STORE_BLOCK_PHY 
02bc					if DEBUG_FORTH_WORDS 
02bc						DMARK "SIZ" 
02bc f5				push af  
02bd 3a d1 02			ld a, (.dmark)  
02c0 32 65 ee			ld (debug_mark),a  
02c3 3a d2 02			ld a, (.dmark+1)  
02c6 32 66 ee			ld (debug_mark+1),a  
02c9 3a d3 02			ld a, (.dmark+2)  
02cc 32 67 ee			ld (debug_mark+2),a  
02cf 18 03			jr .pastdmark  
02d1 ..			.dmark: db "SIZ"  
02d4 f1			.pastdmark: pop af  
02d5			endm  
# End of macro DMARK
02d5						CALLMONITOR 
02d5 cd 6f ee			call debug_vector  
02d8				endm  
# End of macro CALLMONITOR
02d8					endif 
02d8 cd ba 05			call storage_findnextid 
02db			 
02db cd 1e 0e			call ishlzero 
02de			;	ld a, l 
02de			;	add h 
02de			;	cp 0 
02de c8				ret z			; block not found so EOF 
02df			 
02df 11 74 ea			ld de, store_page 
02e2 cd 87 02			call storage_read_block 
02e5			 
02e5 3a 76 ea			ld a, (store_page+2)	 ; get extent count 
02e8 6f				ld l, a 
02e9 26 00			ld h, 0 
02eb c9			 	ret 
02ec			 
02ec			 
02ec			; Write Block 
02ec			; ----------- 
02ec			; 
02ec			; With current bank 
02ec			;  
02ec			; Get block number to write 
02ec			; Write physical blocks starting at start block from buffer 
02ec			  
02ec			storage_write_block: 
02ec				; TODO bank selection 
02ec			 
02ec				; for each of the physical blocks read it into the buffer 
02ec 06 40			ld b, STORE_BLOCK_PHY 
02ee			 
02ee				if DEBUG_STORESE 
02ee					DMARK "SWB" 
02ee f5				push af  
02ef 3a 03 03			ld a, (.dmark)  
02f2 32 65 ee			ld (debug_mark),a  
02f5 3a 04 03			ld a, (.dmark+1)  
02f8 32 66 ee			ld (debug_mark+1),a  
02fb 3a 05 03			ld a, (.dmark+2)  
02fe 32 67 ee			ld (debug_mark+2),a  
0301 18 03			jr .pastdmark  
0303 ..			.dmark: db "SWB"  
0306 f1			.pastdmark: pop af  
0307			endm  
# End of macro DMARK
0307			 
0307					;push af 
0307					;ld a, 'W' 
0307					;ld (debug_mark),a 
0307					;pop af 
0307					CALLMONITOR 
0307 cd 6f ee			call debug_vector  
030a				endm  
# End of macro CALLMONITOR
030a				endif 
030a			 
030a			; might not be working 
030a			;	call se_writepage 
030a			 
030a			;	ret 
030a			; 
030a			 
030a			 
030a			 
030a			.wl1:    
030a			 
030a				; read physical block at hl into de 
030a			        ; increment hl and de to next read position on exit 
030a			 
030a e5				push hl 
030b d5				push de	 
030c c5				push bc 
030d 1a				ld a,(de) 
030e				;if DEBUG_STORESE 
030e			;		push af 
030e			;		ld a, 'W' 
030e			;		ld (debug_mark),a 
030e			;		pop af 
030e			;		CALLMONITOR 
030e			;	endif 
030e cd ac 01			call se_writebyte 
0311			;	call delay250ms 
0311 00				nop 
0312 00				nop 
0313 00				nop 
0314			;	if DEBUG_STORESE 
0314			;		push af 
0314			;		ld a, 'w' 
0314			;		ld (debug_mark),a 
0314			;		pop af 
0314			;		CALLMONITOR 
0314			;	endif 
0314 c1				pop bc 
0315 d1				pop de 
0316 e1				pop hl 
0317 23				inc hl 
0318 13				inc de 
0319			 
0319			 
0319 10 ef			djnz .wl1 
031b			 
031b				if DEBUG_STORESE 
031b					DMARK "SW2" 
031b f5				push af  
031c 3a 30 03			ld a, (.dmark)  
031f 32 65 ee			ld (debug_mark),a  
0322 3a 31 03			ld a, (.dmark+1)  
0325 32 66 ee			ld (debug_mark+1),a  
0328 3a 32 03			ld a, (.dmark+2)  
032b 32 67 ee			ld (debug_mark+2),a  
032e 18 03			jr .pastdmark  
0330 ..			.dmark: db "SW2"  
0333 f1			.pastdmark: pop af  
0334			endm  
# End of macro DMARK
0334			 
0334					;push af 
0334					;ld a, 'W' 
0334					;ld (debug_mark),a 
0334					;pop af 
0334					CALLMONITOR 
0334 cd 6f ee			call debug_vector  
0337				endm  
# End of macro CALLMONITOR
0337				endif 
0337 c9				ret	 
0338			 
0338			; Init bank 
0338			; --------- 
0338			; 
0338			; With current bank 
0338			; 
0338			; Setup block 0 config 
0338			;     Set 0 file id counter 
0338			;     Set formatted byte pattern 
0338			;     Zero out bank label 
0338			;      
0338			; For every logical block write 0-1 byte as null 
0338			 
0338			storage_get_block_0: 
0338			 
0338				; TODO check presence 
0338			 
0338				; get block 0 config 
0338			 
0338 21 00 00			ld hl, 0 
033b 11 74 ea			ld de, store_page 
033e cd 87 02			call storage_read_block 
0341			 
0341				if DEBUG_STORESE 
0341					DMARK "SB0" 
0341 f5				push af  
0342 3a 56 03			ld a, (.dmark)  
0345 32 65 ee			ld (debug_mark),a  
0348 3a 57 03			ld a, (.dmark+1)  
034b 32 66 ee			ld (debug_mark+1),a  
034e 3a 58 03			ld a, (.dmark+2)  
0351 32 67 ee			ld (debug_mark+2),a  
0354 18 03			jr .pastdmark  
0356 ..			.dmark: db "SB0"  
0359 f1			.pastdmark: pop af  
035a			endm  
# End of macro DMARK
035a 11 74 ea				ld de, store_page 
035d			;		push af 
035d			;		ld a, 'i' 
035d			;		ld (debug_mark),a 
035d			;		pop af 
035d					CALLMONITOR 
035d cd 6f ee			call debug_vector  
0360				endm  
# End of macro CALLMONITOR
0360				endif 
0360			 
0360				; is this area formatted? 
0360			 
0360			;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
0360 2a 75 ea			ld hl, (store_page+1) 
0363 3e 80			ld a,0x80 
0365 bd				cp l 
0366 20 22			jr nz, .ininotformatted 
0368				; do a double check 
0368 3e 27			ld a, 0x27 
036a bc				cp h 
036b 20 1d			jr nz, .ininotformatted 
036d			 
036d				; formatted then 
036d			 
036d				if DEBUG_STORESE 
036d					DMARK "SB1" 
036d f5				push af  
036e 3a 82 03			ld a, (.dmark)  
0371 32 65 ee			ld (debug_mark),a  
0374 3a 83 03			ld a, (.dmark+1)  
0377 32 66 ee			ld (debug_mark+1),a  
037a 3a 84 03			ld a, (.dmark+2)  
037d 32 67 ee			ld (debug_mark+2),a  
0380 18 03			jr .pastdmark  
0382 ..			.dmark: db "SB1"  
0385 f1			.pastdmark: pop af  
0386			endm  
# End of macro DMARK
0386					;push af 
0386					;ld a, 'I' 
0386					;ld (debug_mark),a 
0386					;pop af 
0386					CALLMONITOR 
0386 cd 6f ee			call debug_vector  
0389				endm  
# End of macro CALLMONITOR
0389				endif 
0389 c9				ret 
038a			 
038a			.ininotformatted: 
038a				; bank not formatted so poke various bits to make sure 
038a			 
038a				if DEBUG_STORESE 
038a					DMARK "SB2" 
038a f5				push af  
038b 3a 9f 03			ld a, (.dmark)  
038e 32 65 ee			ld (debug_mark),a  
0391 3a a0 03			ld a, (.dmark+1)  
0394 32 66 ee			ld (debug_mark+1),a  
0397 3a a1 03			ld a, (.dmark+2)  
039a 32 67 ee			ld (debug_mark+2),a  
039d 18 03			jr .pastdmark  
039f ..			.dmark: db "SB2"  
03a2 f1			.pastdmark: pop af  
03a3			endm  
# End of macro DMARK
03a3					;push af 
03a3					;ld a, 'f' 
03a3					;ld (debug_mark),a 
03a3					;pop af 
03a3					CALLMONITOR 
03a3 cd 6f ee			call debug_vector  
03a6				endm  
# End of macro CALLMONITOR
03a6				endif 
03a6			 
03a6 cd c3 0a			call storage_clear_page 
03a9			 
03a9 21 74 ea			ld hl, store_page 
03ac 3e 00			ld a, 0 
03ae				 
03ae 77				ld (hl),a   ; reset file counter 
03af			 
03af 21 80 27			ld hl, 0x2780     ;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
03b2 22 75 ea		 	ld (store_page+1), hl	 
03b5			 
03b5				; set default label 
03b5			 
03b5 21 51 04			ld hl, .defaultbanklabl 
03b8 11 77 ea		 	ld de, store_page+3 
03bb 01 0f 00			ld bc, 15 
03be ed b0			ldir 
03c0			 
03c0				; Append the current bank id 
03c0 21 80 ea			ld hl, store_page+3+9 
03c3 3a 59 ea			ld a, (spi_device_id) 
03c6 77				ld (hl), a 
03c7			 
03c7				; save default page 0 
03c7			 
03c7 21 00 00			ld hl, 0 
03ca 11 74 ea			ld de, store_page 
03cd				if DEBUG_STORESE 
03cd					DMARK "SB3" 
03cd f5				push af  
03ce 3a e2 03			ld a, (.dmark)  
03d1 32 65 ee			ld (debug_mark),a  
03d4 3a e3 03			ld a, (.dmark+1)  
03d7 32 66 ee			ld (debug_mark+1),a  
03da 3a e4 03			ld a, (.dmark+2)  
03dd 32 67 ee			ld (debug_mark+2),a  
03e0 18 03			jr .pastdmark  
03e2 ..			.dmark: db "SB3"  
03e5 f1			.pastdmark: pop af  
03e6			endm  
# End of macro DMARK
03e6			;		push af 
03e6			;		ld a, 'F' 
03e6			;		ld (debug_mark),a 
03e6			;		pop af 
03e6					CALLMONITOR 
03e6 cd 6f ee			call debug_vector  
03e9				endm  
# End of macro CALLMONITOR
03e9				endif 
03e9 cd ec 02			call storage_write_block 
03ec				if DEBUG_STORESE 
03ec					DMARK "SB4" 
03ec f5				push af  
03ed 3a 01 04			ld a, (.dmark)  
03f0 32 65 ee			ld (debug_mark),a  
03f3 3a 02 04			ld a, (.dmark+1)  
03f6 32 66 ee			ld (debug_mark+1),a  
03f9 3a 03 04			ld a, (.dmark+2)  
03fc 32 67 ee			ld (debug_mark+2),a  
03ff 18 03			jr .pastdmark  
0401 ..			.dmark: db "SB4"  
0404 f1			.pastdmark: pop af  
0405			endm  
# End of macro DMARK
0405			;		push af 
0405			;		ld a, '>' 
0405			;		ld (debug_mark),a 
0405			;		pop af 
0405					CALLMONITOR 
0405 cd 6f ee			call debug_vector  
0408				endm  
# End of macro CALLMONITOR
0408				endif 
0408			 
0408 00				nop 
0409 00				nop 
040a 00				nop 
040b			 
040b				; now set 0 in every page to mark as a free block 
040b			 
040b 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
040d 21 40 00			ld hl, STORE_BLOCK_PHY 
0410			 
0410 3e 00		.setmark1:   	ld a,0 
0412 e5					push hl 
0413 c5					push bc 
0414 cd ac 01				call se_writebyte 
0417 3e 0a			ld a, 10 
0419 cd e5 0a			call aDelayInMS 
041c 23				inc hl 
041d cd ac 01				call se_writebyte 
0420 3e 0a			ld a, 10 
0422 cd e5 0a			call aDelayInMS 
0425 2b				dec hl 
0426 c1					pop bc 
0427 e1					pop hl 
0428 3e 40				ld a, STORE_BLOCK_PHY 
042a cd f5 0d				call addatohl 
042d 10 e1				djnz .setmark1 
042f			 
042f 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
0431 3e 00		.setmark2:   	ld a,0 
0433 e5					push hl 
0434 c5					push bc 
0435 cd ac 01				call se_writebyte 
0438 3e 0a			ld a, 10 
043a cd e5 0a			call aDelayInMS 
043d 23				inc hl 
043e cd ac 01				call se_writebyte 
0441 3e 0a			ld a, 10 
0443 cd e5 0a			call aDelayInMS 
0446 2b				dec hl 
0447 c1					pop bc 
0448 e1					pop hl 
0449 3e 40				ld a, STORE_BLOCK_PHY 
044b cd f5 0d				call addatohl 
044e 10 e1				djnz .setmark2 
0450			 
0450					 
0450			 
0450			 
0450 c9				ret 
0451			 
0451			 
0451			 
0451			 
0451 .. 00		.defaultbanklabl:   db "BankLabel_",0 
045c			 
045c			 
045c			 
045c			; Label Bank 
045c			; ---------- 
045c			; 
045c			; With current bank 
045c			; Read block 0 
045c			; Set label 
045c			; Write block 0 
045c			 
045c			; label str pointer in hl 
045c			 
045c			storage_label:     
045c			 
045c				if DEBUG_STORESE 
045c					DMARK "LBL" 
045c f5				push af  
045d 3a 71 04			ld a, (.dmark)  
0460 32 65 ee			ld (debug_mark),a  
0463 3a 72 04			ld a, (.dmark+1)  
0466 32 66 ee			ld (debug_mark+1),a  
0469 3a 73 04			ld a, (.dmark+2)  
046c 32 67 ee			ld (debug_mark+2),a  
046f 18 03			jr .pastdmark  
0471 ..			.dmark: db "LBL"  
0474 f1			.pastdmark: pop af  
0475			endm  
# End of macro DMARK
0475					CALLMONITOR 
0475 cd 6f ee			call debug_vector  
0478				endm  
# End of macro CALLMONITOR
0478				endif 
0478			 
0478 e5				push hl 
0479			 
0479 cd 38 03			call storage_get_block_0 
047c			 
047c				; set default label 
047c			 
047c e1				pop hl 
047d			 
047d 11 77 ea		 	ld de, store_page+3 
0480 01 0f 00			ld bc, 15 
0483				if DEBUG_STORESE 
0483					DMARK "LB3" 
0483 f5				push af  
0484 3a 98 04			ld a, (.dmark)  
0487 32 65 ee			ld (debug_mark),a  
048a 3a 99 04			ld a, (.dmark+1)  
048d 32 66 ee			ld (debug_mark+1),a  
0490 3a 9a 04			ld a, (.dmark+2)  
0493 32 67 ee			ld (debug_mark+2),a  
0496 18 03			jr .pastdmark  
0498 ..			.dmark: db "LB3"  
049b f1			.pastdmark: pop af  
049c			endm  
# End of macro DMARK
049c					CALLMONITOR 
049c cd 6f ee			call debug_vector  
049f				endm  
# End of macro CALLMONITOR
049f				endif 
049f ed b0			ldir 
04a1				; save default page 0 
04a1			 
04a1 21 00 00			ld hl, 0 
04a4 11 74 ea			ld de, store_page 
04a7				if DEBUG_STORESE 
04a7					DMARK "LBW" 
04a7 f5				push af  
04a8 3a bc 04			ld a, (.dmark)  
04ab 32 65 ee			ld (debug_mark),a  
04ae 3a bd 04			ld a, (.dmark+1)  
04b1 32 66 ee			ld (debug_mark+1),a  
04b4 3a be 04			ld a, (.dmark+2)  
04b7 32 67 ee			ld (debug_mark+2),a  
04ba 18 03			jr .pastdmark  
04bc ..			.dmark: db "LBW"  
04bf f1			.pastdmark: pop af  
04c0			endm  
# End of macro DMARK
04c0					CALLMONITOR 
04c0 cd 6f ee			call debug_vector  
04c3				endm  
# End of macro CALLMONITOR
04c3				endif 
04c3 cd ec 02			call storage_write_block 
04c6			 
04c6 c9				ret 
04c7			 
04c7			 
04c7			 
04c7			; Read Block 0 - Config 
04c7			; --------------------- 
04c7			; 
04c7			; With current bank 
04c7			; Call presence test 
04c7			;    If not present format/init bank  
04c7			; Read block 0  
04c7			;  
04c7			 
04c7			 
04c7			; Dir 
04c7			; --- 
04c7			; 
04c7			; With current bank 
04c7			; Load Block 0 Config 
04c7			; Get max file id number 
04c7			; For each logical block 
04c7			;    Read block read byte 2 
04c7			;      if first block of file 
04c7			;         Display file name 
04c7			;         Display type flags for file 
04c7			;        
04c7			 
04c7			; moving to words as this requires stack control 
04c7			 
04c7			 
04c7			; Delete File 
04c7			; ----------- 
04c7			; 
04c7			; With current bank 
04c7			; 
04c7			; Load Block 0 Config 
04c7			; Get max file id number 
04c7			; For each logical block 
04c7			;    Read block file id 
04c7			;      If first block of file and dont have file id 
04c7			;         if file to delete 
04c7			;         Save file id 
04c7			;         Null file id 
04c7			;         Write this block back 
04c7			;      If file id is one saved 
04c7			;         Null file id 
04c7			;         Write this block back 
04c7			 
04c7			 
04c7			.se_done: 
04c7 e1				pop hl 
04c8 c9				ret 
04c9			 
04c9			storage_erase: 
04c9			 
04c9				; hl contains the file id 
04c9			 
04c9 5d				ld e, l 
04ca 16 00			ld d, 0 
04cc 21 40 00			ld hl, STORE_BLOCK_PHY 
04cf					if DEBUG_FORTH_WORDS 
04cf						DMARK "ERA" 
04cf f5				push af  
04d0 3a e4 04			ld a, (.dmark)  
04d3 32 65 ee			ld (debug_mark),a  
04d6 3a e5 04			ld a, (.dmark+1)  
04d9 32 66 ee			ld (debug_mark+1),a  
04dc 3a e6 04			ld a, (.dmark+2)  
04df 32 67 ee			ld (debug_mark+2),a  
04e2 18 03			jr .pastdmark  
04e4 ..			.dmark: db "ERA"  
04e7 f1			.pastdmark: pop af  
04e8			endm  
# End of macro DMARK
04e8						CALLMONITOR 
04e8 cd 6f ee			call debug_vector  
04eb				endm  
# End of macro CALLMONITOR
04eb					endif 
04eb cd ba 05			call storage_findnextid 
04ee cd 1e 0e			call ishlzero 
04f1 c8				ret z 
04f2			 
04f2 e5				push hl 
04f3			 
04f3				; TODO check file not found 
04f3			 
04f3 11 74 ea			ld de, store_page 
04f6 cd 87 02			call storage_read_block 
04f9			 
04f9 cd 1e 0e			call ishlzero 
04fc ca c7 04			jp z,.se_done 
04ff			 
04ff					if DEBUG_FORTH_WORDS 
04ff						DMARK "ER1" 
04ff f5				push af  
0500 3a 14 05			ld a, (.dmark)  
0503 32 65 ee			ld (debug_mark),a  
0506 3a 15 05			ld a, (.dmark+1)  
0509 32 66 ee			ld (debug_mark+1),a  
050c 3a 16 05			ld a, (.dmark+2)  
050f 32 67 ee			ld (debug_mark+2),a  
0512 18 03			jr .pastdmark  
0514 ..			.dmark: db "ER1"  
0517 f1			.pastdmark: pop af  
0518			endm  
# End of macro DMARK
0518						CALLMONITOR 
0518 cd 6f ee			call debug_vector  
051b				endm  
# End of macro CALLMONITOR
051b					endif 
051b 3a 74 ea			ld a, (store_page)	; get file id 
051e 32 68 ea			ld (store_tmpid), a 
0521			 
0521 3a 76 ea			ld a, (store_page+2)    ; get count of extends 
0524 32 67 ea			ld (store_tmpext), a 
0527			 
0527				; wipe file header 
0527			 
0527 e1				pop hl 
0528 3e 00			ld a, 0 
052a 32 74 ea			ld (store_page), a 
052d 32 75 ea			ld (store_page+1),a 
0530 11 74 ea			ld de, store_page 
0533					if DEBUG_FORTH_WORDS 
0533						DMARK "ER2" 
0533 f5				push af  
0534 3a 48 05			ld a, (.dmark)  
0537 32 65 ee			ld (debug_mark),a  
053a 3a 49 05			ld a, (.dmark+1)  
053d 32 66 ee			ld (debug_mark+1),a  
0540 3a 4a 05			ld a, (.dmark+2)  
0543 32 67 ee			ld (debug_mark+2),a  
0546 18 03			jr .pastdmark  
0548 ..			.dmark: db "ER2"  
054b f1			.pastdmark: pop af  
054c			endm  
# End of macro DMARK
054c						CALLMONITOR 
054c cd 6f ee			call debug_vector  
054f				endm  
# End of macro CALLMONITOR
054f					endif 
054f cd ec 02			call storage_write_block 
0552			 
0552			 
0552				; wipe file extents 
0552			 
0552 3a 67 ea			ld a, (store_tmpext) 
0555 47				ld b, a 
0556			 
0556			.eraext:	  
0556 c5				push bc 
0557			 
0557 21 40 00			ld hl, STORE_BLOCK_PHY 
055a 3a 68 ea			ld a,(store_tmpid) 
055d 5f				ld e, a 
055e 50				ld d, b	 
055f					if DEBUG_FORTH_WORDS 
055f						DMARK "ER3" 
055f f5				push af  
0560 3a 74 05			ld a, (.dmark)  
0563 32 65 ee			ld (debug_mark),a  
0566 3a 75 05			ld a, (.dmark+1)  
0569 32 66 ee			ld (debug_mark+1),a  
056c 3a 76 05			ld a, (.dmark+2)  
056f 32 67 ee			ld (debug_mark+2),a  
0572 18 03			jr .pastdmark  
0574 ..			.dmark: db "ER3"  
0577 f1			.pastdmark: pop af  
0578			endm  
# End of macro DMARK
0578						CALLMONITOR 
0578 cd 6f ee			call debug_vector  
057b				endm  
# End of macro CALLMONITOR
057b					endif 
057b cd ba 05			call storage_findnextid 
057e cd 1e 0e			call ishlzero 
0581 ca c7 04			jp z,.se_done 
0584			 
0584 e5				push hl 
0585 11 74 ea			ld de, store_page 
0588 cd 87 02			call storage_read_block 
058b			 
058b				; free block	 
058b			 
058b 3e 00			ld a, 0 
058d 32 74 ea			ld (store_page), a 
0590 32 75 ea			ld (store_page+1),a 
0593 11 74 ea			ld de, store_page 
0596 e1				pop hl 
0597					if DEBUG_FORTH_WORDS 
0597						DMARK "ER4" 
0597 f5				push af  
0598 3a ac 05			ld a, (.dmark)  
059b 32 65 ee			ld (debug_mark),a  
059e 3a ad 05			ld a, (.dmark+1)  
05a1 32 66 ee			ld (debug_mark+1),a  
05a4 3a ae 05			ld a, (.dmark+2)  
05a7 32 67 ee			ld (debug_mark+2),a  
05aa 18 03			jr .pastdmark  
05ac ..			.dmark: db "ER4"  
05af f1			.pastdmark: pop af  
05b0			endm  
# End of macro DMARK
05b0						CALLMONITOR 
05b0 cd 6f ee			call debug_vector  
05b3				endm  
# End of macro CALLMONITOR
05b3					endif 
05b3 cd ec 02			call storage_write_block 
05b6			 
05b6 c1				pop bc 
05b7 10 9d			djnz .eraext 
05b9			 
05b9 c9				ret 
05ba			 
05ba			 
05ba			; Find Free Block 
05ba			; --------------- 
05ba			; 
05ba			; With current bank 
05ba			;  
05ba			; From given starting logical block 
05ba			;    Read block  
05ba			;    If no file id 
05ba			;         Return block id 
05ba			 
05ba			 
05ba			; hl starting page number 
05ba			; hl contains free page number or zero if no pages free 
05ba			; e contains the file id to locate 
05ba			; d contains the block number 
05ba			 
05ba			; TODO change to find file id and use zero for free block 
05ba			 
05ba			storage_findnextid: 
05ba			 
05ba				; now locate first 0 page to mark as a free block 
05ba			 
05ba 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
05bc			;	ld hl, STORE_BLOCK_PHY 
05bc			 
05bc					if DEBUG_FORTH_WORDS 
05bc					DMARK "FNI" 
05bc f5				push af  
05bd 3a d1 05			ld a, (.dmark)  
05c0 32 65 ee			ld (debug_mark),a  
05c3 3a d2 05			ld a, (.dmark+1)  
05c6 32 66 ee			ld (debug_mark+1),a  
05c9 3a d3 05			ld a, (.dmark+2)  
05cc 32 67 ee			ld (debug_mark+2),a  
05cf 18 03			jr .pastdmark  
05d1 ..			.dmark: db "FNI"  
05d4 f1			.pastdmark: pop af  
05d5			endm  
# End of macro DMARK
05d5						CALLMONITOR 
05d5 cd 6f ee			call debug_vector  
05d8				endm  
# End of macro CALLMONITOR
05d8					endif 
05d8			.ff1:   	 
05d8 e5					push hl 
05d9 c5					push bc 
05da d5					push de 
05db cd ab 01				call se_readbyte 
05de 5f					ld e,a 
05df 23					inc hl 
05e0 cd ab 01				call se_readbyte 
05e3 57					ld d, a 
05e4 e1					pop hl 
05e5 e5					push hl 
05e6 cd 13 0e				call cmp16 
05e9 28 49				jr z, .fffound 
05eb			 
05eb d1					pop de 
05ec c1					pop bc 
05ed e1					pop hl 
05ee			 
05ee					; is found? 
05ee					;cp e 
05ee					;ret z 
05ee			 
05ee 3e 40				ld a, STORE_BLOCK_PHY 
05f0 cd f5 0d				call addatohl 
05f3 10 e3				djnz .ff1 
05f5			 
05f5 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
05f7			.ff2:   	 
05f7			 
05f7 e5					push hl 
05f8 c5					push bc 
05f9 d5					push de 
05fa cd ab 01				call se_readbyte 
05fd 5f					ld e,a 
05fe 23					inc hl 
05ff cd ab 01				call se_readbyte 
0602 57					ld d, a 
0603			 
0603 e1					pop hl 
0604 e5					push hl 
0605 cd 13 0e				call cmp16 
0608 28 2a				jr z, .fffound 
060a			 
060a d1					pop de 
060b c1					pop bc 
060c e1					pop hl 
060d					; is found? 
060d					;cp e 
060d					;ret z 
060d			 
060d 3e 40				ld a, STORE_BLOCK_PHY 
060f cd f5 0d				call addatohl 
0612 10 e3				djnz .ff2 
0614			 
0614			 
0614					if DEBUG_FORTH_WORDS 
0614					DMARK "FN-" 
0614 f5				push af  
0615 3a 29 06			ld a, (.dmark)  
0618 32 65 ee			ld (debug_mark),a  
061b 3a 2a 06			ld a, (.dmark+1)  
061e 32 66 ee			ld (debug_mark+1),a  
0621 3a 2b 06			ld a, (.dmark+2)  
0624 32 67 ee			ld (debug_mark+2),a  
0627 18 03			jr .pastdmark  
0629 ..			.dmark: db "FN-"  
062c f1			.pastdmark: pop af  
062d			endm  
# End of macro DMARK
062d					;	push af 
062d					;	ld a, 'n' 
062d					;	ld (debug_mark),a 
062d					;	pop af 
062d						CALLMONITOR 
062d cd 6f ee			call debug_vector  
0630				endm  
# End of macro CALLMONITOR
0630					endif 
0630				; no free marks! 
0630 21 00 00				ld hl, 0 
0633 c9				ret 
0634			.fffound: 
0634				 
0634			 
0634 d1					pop de 
0635 c1					pop bc 
0636 e1					pop hl 
0637					if DEBUG_FORTH_WORDS 
0637					DMARK "FNF" 
0637 f5				push af  
0638 3a 4c 06			ld a, (.dmark)  
063b 32 65 ee			ld (debug_mark),a  
063e 3a 4d 06			ld a, (.dmark+1)  
0641 32 66 ee			ld (debug_mark+1),a  
0644 3a 4e 06			ld a, (.dmark+2)  
0647 32 67 ee			ld (debug_mark+2),a  
064a 18 03			jr .pastdmark  
064c ..			.dmark: db "FNF"  
064f f1			.pastdmark: pop af  
0650			endm  
# End of macro DMARK
0650					;	push af 
0650					;	ld a, 'n' 
0650					;	ld (debug_mark),a 
0650					;	pop af 
0650						CALLMONITOR 
0650 cd 6f ee			call debug_vector  
0653				endm  
# End of macro CALLMONITOR
0653					endif 
0653 c9				ret 
0654			 
0654			 
0654			 
0654			; Free Space 
0654			; ---------- 
0654			; 
0654			; With current bank 
0654			; 
0654			; Set block count to zero 
0654			; Starting with first logical block 
0654			;      Find free block  
0654			;      If block id given, increment block count 
0654			; 
0654			;  
0654			 
0654			 
0654			; hl contains count of free blocks 
0654			 
0654			storage_freeblocks: 
0654			 
0654				; now locate first 0 page to mark as a free block 
0654			 
0654 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
0656 21 40 00			ld hl, STORE_BLOCK_PHY 
0659 11 00 00			ld de, 0 
065c			 
065c			.fb1:   	 
065c e5					push hl 
065d c5					push bc 
065e d5					push de 
065f cd ab 01				call se_readbyte 
0662 d1					pop de 
0663 c1					pop bc 
0664 e1					pop hl 
0665			 
0665					; is free? 
0665 fe 00				cp 0 
0667 20 01				jr nz, .ff1cont 
0669 13					inc de 
066a			 
066a			.ff1cont: 
066a			 
066a			 
066a 3e 40				ld a, STORE_BLOCK_PHY 
066c cd f5 0d				call addatohl 
066f 10 eb				djnz .fb1 
0671			 
0671 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
0673			.fb2:   	 
0673 e5					push hl 
0674 c5					push bc 
0675 d5					push de 
0676 cd ab 01				call se_readbyte 
0679 d1					pop de 
067a c1					pop bc 
067b e1					pop hl 
067c			 
067c					; is free? 
067c fe 00				cp 0 
067e 20 01				jr nz, .ff2cont 
0680 13					inc de 
0681			 
0681			.ff2cont: 
0681			 
0681 3e 40				ld a, STORE_BLOCK_PHY 
0683 cd f5 0d				call addatohl 
0686 10 eb				djnz .fb2 
0688			 
0688 eb				ex de, hl 
0689 c9				ret 
068a			 
068a			; Get File ID 
068a			; ----------- 
068a			; 
068a			; With current bank 
068a			;  
068a			; Load Block 0 Config 
068a			; Get max file id number 
068a			; For each logical block 
068a			;    Read block file id 
068a			;      If first block of file and dont have file id 
068a			;         if file get id and exit 
068a			 
068a			 
068a			 
068a			 
068a			; Create File 
068a			; ----------- 
068a			; 
068a			; With current bank  
068a			; Load Block 0 Config 
068a			; Get max file id number 
068a			; Increment file id number 
068a			; Save Config 
068a			; Find free block 
068a			; Set buffer with file name and file id 
068a			; Write buffer to free block  
068a			 
068a			 
068a			; hl point to file name 
068a			; hl returns file id 
068a			 
068a			; file format: 
068a			; byte 0 - file id 
068a			; byte 1 - extent number 
068a			; byte 2-> data 
068a			 
068a			; format for extent number 0: 
068a			; 
068a			; byte 0 - file id 
068a			; byte 1 - extent 0 
068a			; byte 2 - extent count 
068a			; byte 3 -> file name and meta data 
068a			 
068a			 
068a			storage_create: 
068a				if DEBUG_STORESE 
068a					DMARK "SCR" 
068a f5				push af  
068b 3a 9f 06			ld a, (.dmark)  
068e 32 65 ee			ld (debug_mark),a  
0691 3a a0 06			ld a, (.dmark+1)  
0694 32 66 ee			ld (debug_mark+1),a  
0697 3a a1 06			ld a, (.dmark+2)  
069a 32 67 ee			ld (debug_mark+2),a  
069d 18 03			jr .pastdmark  
069f ..			.dmark: db "SCR"  
06a2 f1			.pastdmark: pop af  
06a3			endm  
# End of macro DMARK
06a3					CALLMONITOR 
06a3 cd 6f ee			call debug_vector  
06a6				endm  
# End of macro CALLMONITOR
06a6				endif 
06a6			 
06a6 e5				push hl		; save file name pointer 
06a7			 
06a7 cd 38 03			call storage_get_block_0 
06aa			 
06aa 3a 74 ea			ld a,(store_page)	; get current file id 
06ad 3c				inc a 
06ae 32 74 ea			ld (store_page),a 
06b1				 
06b1 32 68 ea			ld (store_tmpid),a			; save id 
06b4			 
06b4 21 00 00			ld hl, 0 
06b7 11 74 ea			ld de, store_page 
06ba				if DEBUG_STORESE 
06ba					DMARK "SCw" 
06ba f5				push af  
06bb 3a cf 06			ld a, (.dmark)  
06be 32 65 ee			ld (debug_mark),a  
06c1 3a d0 06			ld a, (.dmark+1)  
06c4 32 66 ee			ld (debug_mark+1),a  
06c7 3a d1 06			ld a, (.dmark+2)  
06ca 32 67 ee			ld (debug_mark+2),a  
06cd 18 03			jr .pastdmark  
06cf ..			.dmark: db "SCw"  
06d2 f1			.pastdmark: pop af  
06d3			endm  
# End of macro DMARK
06d3					CALLMONITOR 
06d3 cd 6f ee			call debug_vector  
06d6				endm  
# End of macro CALLMONITOR
06d6				endif 
06d6 cd ec 02			call storage_write_block	 ; save update 
06d9			 
06d9				if DEBUG_STORESE 
06d9 11 74 ea				ld de, store_page 
06dc					DMARK "SCC" 
06dc f5				push af  
06dd 3a f1 06			ld a, (.dmark)  
06e0 32 65 ee			ld (debug_mark),a  
06e3 3a f2 06			ld a, (.dmark+1)  
06e6 32 66 ee			ld (debug_mark+1),a  
06e9 3a f3 06			ld a, (.dmark+2)  
06ec 32 67 ee			ld (debug_mark+2),a  
06ef 18 03			jr .pastdmark  
06f1 ..			.dmark: db "SCC"  
06f4 f1			.pastdmark: pop af  
06f5			endm  
# End of macro DMARK
06f5					CALLMONITOR 
06f5 cd 6f ee			call debug_vector  
06f8				endm  
# End of macro CALLMONITOR
06f8				endif 
06f8				;  
06f8				 
06f8 21 40 00			ld hl, STORE_BLOCK_PHY 
06fb 11 00 00			ld de, 0 
06fe cd ba 05			call storage_findnextid 
0701			 
0701 22 5f ea			ld (store_tmppageid), hl    ; save page to use  
0704			 
0704				; TODO detect 0 = no spare blocks 
0704			 
0704				; hl now contains the free page to use for the file header page 
0704			 
0704				if DEBUG_STORESE 
0704				DMARK "SCF" 
0704 f5				push af  
0705 3a 19 07			ld a, (.dmark)  
0708 32 65 ee			ld (debug_mark),a  
070b 3a 1a 07			ld a, (.dmark+1)  
070e 32 66 ee			ld (debug_mark+1),a  
0711 3a 1b 07			ld a, (.dmark+2)  
0714 32 67 ee			ld (debug_mark+2),a  
0717 18 03			jr .pastdmark  
0719 ..			.dmark: db "SCF"  
071c f1			.pastdmark: pop af  
071d			endm  
# End of macro DMARK
071d					CALLMONITOR 
071d cd 6f ee			call debug_vector  
0720				endm  
# End of macro CALLMONITOR
0720				endif 
0720			 
0720 22 5f ea			ld (store_tmppageid), hl 
0723				 
0723 3a 68 ea			ld a,(store_tmpid)    ; get file id 
0726			;	ld a, (store_filecache)			; save to cache 
0726			 
0726 32 74 ea			ld (store_page),a    ; set page id 
0729 3e 00			ld a, 0			 ; extent 0 is file header 
072b 32 75 ea			ld (store_page+1), a   ; set file extent 
072e			 
072e 32 76 ea			ld (store_page+2), a   ; extent count for the file 
0731			 
0731			;	inc hl 		; init block 0 of file 
0731			;	inc hl   		; skip file and extent id 
0731			 ;       ld a, 0 
0731			;	ld (hl),a 
0731			;	ld a, (store_filecache+1)  	; save to cache 
0731			 
0731			;	inc hl    ; file name 
0731				 
0731				 
0731 11 77 ea			ld de, store_page+3    ; get buffer for term string to use as file name 
0734				if DEBUG_STORESE 
0734					DMARK "SCc" 
0734 f5				push af  
0735 3a 49 07			ld a, (.dmark)  
0738 32 65 ee			ld (debug_mark),a  
073b 3a 4a 07			ld a, (.dmark+1)  
073e 32 66 ee			ld (debug_mark+1),a  
0741 3a 4b 07			ld a, (.dmark+2)  
0744 32 67 ee			ld (debug_mark+2),a  
0747 18 03			jr .pastdmark  
0749 ..			.dmark: db "SCc"  
074c f1			.pastdmark: pop af  
074d			endm  
# End of macro DMARK
074d					CALLMONITOR 
074d cd 6f ee			call debug_vector  
0750				endm  
# End of macro CALLMONITOR
0750				endif 
0750 e1				pop hl    ; get zero term string 
0751 e5				push hl 
0752 3e 00			ld a, 0 
0754 cd 66 11			call strlent 
0757 23				inc hl   ; cover zero term 
0758 06 00			ld b,0 
075a 4d				ld c,l 
075b e1				pop hl 
075c				;ex de, hl 
075c				if DEBUG_STORESE 
075c					DMARK "SCa" 
075c f5				push af  
075d 3a 71 07			ld a, (.dmark)  
0760 32 65 ee			ld (debug_mark),a  
0763 3a 72 07			ld a, (.dmark+1)  
0766 32 66 ee			ld (debug_mark+1),a  
0769 3a 73 07			ld a, (.dmark+2)  
076c 32 67 ee			ld (debug_mark+2),a  
076f 18 03			jr .pastdmark  
0771 ..			.dmark: db "SCa"  
0774 f1			.pastdmark: pop af  
0775			endm  
# End of macro DMARK
0775					;push af 
0775					;ld a, 'a' 
0775					;ld (debug_mark),a 
0775					;pop af 
0775					CALLMONITOR 
0775 cd 6f ee			call debug_vector  
0778				endm  
# End of macro CALLMONITOR
0778				endif 
0778 ed b0			ldir    ; copy zero term string 
077a				if DEBUG_STORESE 
077a					DMARK "SCA" 
077a f5				push af  
077b 3a 8f 07			ld a, (.dmark)  
077e 32 65 ee			ld (debug_mark),a  
0781 3a 90 07			ld a, (.dmark+1)  
0784 32 66 ee			ld (debug_mark+1),a  
0787 3a 91 07			ld a, (.dmark+2)  
078a 32 67 ee			ld (debug_mark+2),a  
078d 18 03			jr .pastdmark  
078f ..			.dmark: db "SCA"  
0792 f1			.pastdmark: pop af  
0793			endm  
# End of macro DMARK
0793					CALLMONITOR 
0793 cd 6f ee			call debug_vector  
0796				endm  
# End of macro CALLMONITOR
0796				endif 
0796			 
0796				; write file header page 
0796			 
0796 2a 5f ea			ld hl,(store_tmppageid) 
0799 11 74 ea			ld de, store_page 
079c				if DEBUG_STORESE 
079c					DMARK "SCb" 
079c f5				push af  
079d 3a b1 07			ld a, (.dmark)  
07a0 32 65 ee			ld (debug_mark),a  
07a3 3a b2 07			ld a, (.dmark+1)  
07a6 32 66 ee			ld (debug_mark+1),a  
07a9 3a b3 07			ld a, (.dmark+2)  
07ac 32 67 ee			ld (debug_mark+2),a  
07af 18 03			jr .pastdmark  
07b1 ..			.dmark: db "SCb"  
07b4 f1			.pastdmark: pop af  
07b5			endm  
# End of macro DMARK
07b5					;push af 
07b5					;ld a, 'b' 
07b5					;ld (debug_mark),a 
07b5					;pop af 
07b5					CALLMONITOR 
07b5 cd 6f ee			call debug_vector  
07b8				endm  
# End of macro CALLMONITOR
07b8				endif 
07b8 cd ec 02			call storage_write_block 
07bb			 
07bb 3a 68 ea			ld a, (store_tmpid) 
07be 6f				ld l, a 
07bf 26 00			ld h,0 
07c1				if DEBUG_STORESE 
07c1					DMARK "SCz" 
07c1 f5				push af  
07c2 3a d6 07			ld a, (.dmark)  
07c5 32 65 ee			ld (debug_mark),a  
07c8 3a d7 07			ld a, (.dmark+1)  
07cb 32 66 ee			ld (debug_mark+1),a  
07ce 3a d8 07			ld a, (.dmark+2)  
07d1 32 67 ee			ld (debug_mark+2),a  
07d4 18 03			jr .pastdmark  
07d6 ..			.dmark: db "SCz"  
07d9 f1			.pastdmark: pop af  
07da			endm  
# End of macro DMARK
07da					CALLMONITOR 
07da cd 6f ee			call debug_vector  
07dd				endm  
# End of macro CALLMONITOR
07dd				endif 
07dd c9				ret 
07de				 
07de			 
07de			 
07de			; 
07de			; Read File 
07de			; 
07de			; h - file id to locate 
07de			; l - extent to locate 
07de			; de - pointer to string to read into 
07de			; 
07de			; returns hl is 0 if block not found ie end of file or pointer to start of data read 
07de			 
07de			.sr_fail: 
07de d1				pop de 
07df c9				ret 
07e0			 
07e0			storage_read: 
07e0			 
07e0			 
07e0 d5				push de 
07e1			 
07e1			; TODO BUG the above push is it popped before the RET Z? 
07e1			 
07e1			; TODO how to handle multiple part blocks 
07e1			 
07e1				; locate file extent to read 
07e1			 
07e1 5c				ld e, h 
07e2 55				ld d, l 
07e3			 
07e3			.srext: 
07e3 22 72 ea			ld (store_readptr), hl     ; save the current extent to load 
07e6 ed 53 70 ea		ld (store_readbuf), de     ; save the current buffer to load in to 
07ea			 
07ea 21 40 00			ld hl, STORE_BLOCK_PHY 
07ed				if DEBUG_STORESE 
07ed					DMARK "sre" 
07ed f5				push af  
07ee 3a 02 08			ld a, (.dmark)  
07f1 32 65 ee			ld (debug_mark),a  
07f4 3a 03 08			ld a, (.dmark+1)  
07f7 32 66 ee			ld (debug_mark+1),a  
07fa 3a 04 08			ld a, (.dmark+2)  
07fd 32 67 ee			ld (debug_mark+2),a  
0800 18 03			jr .pastdmark  
0802 ..			.dmark: db "sre"  
0805 f1			.pastdmark: pop af  
0806			endm  
# End of macro DMARK
0806					CALLMONITOR 
0806 cd 6f ee			call debug_vector  
0809				endm  
# End of macro CALLMONITOR
0809				endif 
0809 cd ba 05			call storage_findnextid 
080c			 
080c				if DEBUG_STORESE 
080c					DMARK "srf" 
080c f5				push af  
080d 3a 21 08			ld a, (.dmark)  
0810 32 65 ee			ld (debug_mark),a  
0813 3a 22 08			ld a, (.dmark+1)  
0816 32 66 ee			ld (debug_mark+1),a  
0819 3a 23 08			ld a, (.dmark+2)  
081c 32 67 ee			ld (debug_mark+2),a  
081f 18 03			jr .pastdmark  
0821 ..			.dmark: db "srf"  
0824 f1			.pastdmark: pop af  
0825			endm  
# End of macro DMARK
0825					CALLMONITOR 
0825 cd 6f ee			call debug_vector  
0828				endm  
# End of macro CALLMONITOR
0828				endif 
0828 cd 1e 0e			call ishlzero 
082b			;	ld a, l 
082b			;	add h 
082b			;	cp 0 
082b 28 b1			jr z,.sr_fail			; block not found so EOF 
082d			 
082d				; save current address for use by higher level words etc 
082d			 
082d 22 65 ea			ld (store_openaddr),hl 
0830			 
0830			 
0830				; hl contains page number to load 
0830 d1				pop de   ; get storage 
0831 ed 53 70 ea		ld (store_readbuf), de     ; current buffer to load in to 
0835 d5				push de 
0836				if DEBUG_STORESE 
0836					DMARK "srg" 
0836 f5				push af  
0837 3a 4b 08			ld a, (.dmark)  
083a 32 65 ee			ld (debug_mark),a  
083d 3a 4c 08			ld a, (.dmark+1)  
0840 32 66 ee			ld (debug_mark+1),a  
0843 3a 4d 08			ld a, (.dmark+2)  
0846 32 67 ee			ld (debug_mark+2),a  
0849 18 03			jr .pastdmark  
084b ..			.dmark: db "srg"  
084e f1			.pastdmark: pop af  
084f			endm  
# End of macro DMARK
084f					CALLMONITOR 
084f cd 6f ee			call debug_vector  
0852				endm  
# End of macro CALLMONITOR
0852				endif 
0852 cd 87 02			call storage_read_block 
0855			 
0855				; if this a continuation read??? 
0855			 
0855 2a 70 ea			ld hl, (store_readbuf)     ; current buffer to load in to 
0858			 
0858 3e 3f			ld a, STORE_BLOCK_PHY-1 
085a cd f5 0d			call addatohl 
085d 7e				ld a,(hl) 
085e fe 00			cp 0 
0860 28 02			jr z, .markiscont 
0862 3e ff			ld a, 255 
0864			 
0864			.markiscont: 
0864 32 67 ea			ld (store_readcont), a 
0867			 
0867				if DEBUG_STORESE 
0867					DMARK "srC" 
0867 f5				push af  
0868 3a 7c 08			ld a, (.dmark)  
086b 32 65 ee			ld (debug_mark),a  
086e 3a 7d 08			ld a, (.dmark+1)  
0871 32 66 ee			ld (debug_mark+1),a  
0874 3a 7e 08			ld a, (.dmark+2)  
0877 32 67 ee			ld (debug_mark+2),a  
087a 18 03			jr .pastdmark  
087c ..			.dmark: db "srC"  
087f f1			.pastdmark: pop af  
0880			endm  
# End of macro DMARK
0880					CALLMONITOR 
0880 cd 6f ee			call debug_vector  
0883				endm  
# End of macro CALLMONITOR
0883				endif 
0883				; only short reads enabled 
0883			 
0883 3a 6f ea			ld a, (store_longread) 
0886 fe 00			cp 0 
0888 ca 55 09			jp z, .readdone 
088b			 
088b			; TODO if block has no zeros then need to read next block  
088b			; this code appears to be very buggy. Have added above a flag to disable/enable the following code for later debug 
088b			; check last byte of physical block. 
088b			; if not zero then the next block needs to be loaded 
088b			 
088b			 
088b 2a 70 ea			ld hl, (store_readbuf)     ; current buffer to load in to 
088e			 
088e 3e 3f			ld a, STORE_BLOCK_PHY-1 
0890 cd f5 0d			call addatohl 
0893				;dec hl 
0893 7e				ld a,(hl) 
0894				if DEBUG_STORESE 
0894					DMARK "sr?" 
0894 f5				push af  
0895 3a a9 08			ld a, (.dmark)  
0898 32 65 ee			ld (debug_mark),a  
089b 3a aa 08			ld a, (.dmark+1)  
089e 32 66 ee			ld (debug_mark+1),a  
08a1 3a ab 08			ld a, (.dmark+2)  
08a4 32 67 ee			ld (debug_mark+2),a  
08a7 18 03			jr .pastdmark  
08a9 ..			.dmark: db "sr?"  
08ac f1			.pastdmark: pop af  
08ad			endm  
# End of macro DMARK
08ad					CALLMONITOR 
08ad cd 6f ee			call debug_vector  
08b0				endm  
# End of macro CALLMONITOR
08b0				endif 
08b0 fe 00			cp 0 
08b2 ca 55 09			jp z, .readdone 
08b5			 
08b5				; last byte is not zero so there is more in the next extent. Load it on the end.	 
08b5			 
08b5 23				inc hl 
08b6			 
08b6 22 70 ea			ld (store_readbuf), hl     ; save the current buffer to load in to 
08b9			 
08b9 ed 5b 72 ea		ld de, (store_readptr)     ; save the current extent to load 
08bd			 
08bd eb				ex de, hl 
08be			 
08be				; next ext 
08be			 
08be 23				inc hl 
08bf 22 72 ea			ld  (store_readptr), hl     ; save the current extent to load 
08c2			 
08c2				if DEBUG_STORESE 
08c2					DMARK "sF2" 
08c2 f5				push af  
08c3 3a d7 08			ld a, (.dmark)  
08c6 32 65 ee			ld (debug_mark),a  
08c9 3a d8 08			ld a, (.dmark+1)  
08cc 32 66 ee			ld (debug_mark+1),a  
08cf 3a d9 08			ld a, (.dmark+2)  
08d2 32 67 ee			ld (debug_mark+2),a  
08d5 18 03			jr .pastdmark  
08d7 ..			.dmark: db "sF2"  
08da f1			.pastdmark: pop af  
08db			endm  
# End of macro DMARK
08db					CALLMONITOR 
08db cd 6f ee			call debug_vector  
08de				endm  
# End of macro CALLMONITOR
08de				endif 
08de			 
08de				; get and load block 
08de			 
08de cd ba 05			call storage_findnextid 
08e1			 
08e1				if DEBUG_STORESE 
08e1					DMARK "sf2" 
08e1 f5				push af  
08e2 3a f6 08			ld a, (.dmark)  
08e5 32 65 ee			ld (debug_mark),a  
08e8 3a f7 08			ld a, (.dmark+1)  
08eb 32 66 ee			ld (debug_mark+1),a  
08ee 3a f8 08			ld a, (.dmark+2)  
08f1 32 67 ee			ld (debug_mark+2),a  
08f4 18 03			jr .pastdmark  
08f6 ..			.dmark: db "sf2"  
08f9 f1			.pastdmark: pop af  
08fa			endm  
# End of macro DMARK
08fa					CALLMONITOR 
08fa cd 6f ee			call debug_vector  
08fd				endm  
# End of macro CALLMONITOR
08fd				endif 
08fd cd 1e 0e			call ishlzero 
0900			;	ld a, l 
0900			;	add h 
0900			;	cp 0 
0900 ca de 07			jp z,.sr_fail			; block not found so EOF 
0903				 
0903				; save current address for use by higher level words etc 
0903			 
0903 22 65 ea			ld (store_openaddr),hl 
0906			 
0906 cd 87 02			call storage_read_block 
0909			 
0909				; on a continuation block, we now have the file id and ext in the middle of the block 
0909				; we need to pull everything back  
0909			 
0909 ed 5b 70 ea		ld de, (store_readbuf)     ; current buffer to nudge into 
090d 2a 70 ea			ld hl, (store_readbuf)     ; current buffer where data actually exists 
0910 23				inc hl 
0911 23				inc hl     ; skip id and ext 
0912 01 40 00			ld bc, STORE_BLOCK_PHY 
0915				if DEBUG_STORESE 
0915					DMARK "SR<" 
0915 f5				push af  
0916 3a 2a 09			ld a, (.dmark)  
0919 32 65 ee			ld (debug_mark),a  
091c 3a 2b 09			ld a, (.dmark+1)  
091f 32 66 ee			ld (debug_mark+1),a  
0922 3a 2c 09			ld a, (.dmark+2)  
0925 32 67 ee			ld (debug_mark+2),a  
0928 18 03			jr .pastdmark  
092a ..			.dmark: db "SR<"  
092d f1			.pastdmark: pop af  
092e			endm  
# End of macro DMARK
092e					CALLMONITOR 
092e cd 6f ee			call debug_vector  
0931				endm  
# End of macro CALLMONITOR
0931				endif 
0931 ed b0			ldir     ; copy data 
0933			 
0933				; move the pointer back and pretend we have a full buffer for next recheck 
0933			 
0933 1b				dec de 
0934 1b				dec de 
0935			 
0935			; TODO do pop below now short circuit loop????? 
0935 c1				pop bc     ; get rid of spare de on stack 
0936				if DEBUG_STORESE 
0936					DMARK "SR>" 
0936 f5				push af  
0937 3a 4b 09			ld a, (.dmark)  
093a 32 65 ee			ld (debug_mark),a  
093d 3a 4c 09			ld a, (.dmark+1)  
0940 32 66 ee			ld (debug_mark+1),a  
0943 3a 4d 09			ld a, (.dmark+2)  
0946 32 67 ee			ld (debug_mark+2),a  
0949 18 03			jr .pastdmark  
094b ..			.dmark: db "SR>"  
094e f1			.pastdmark: pop af  
094f			endm  
# End of macro DMARK
094f					CALLMONITOR 
094f cd 6f ee			call debug_vector  
0952				endm  
# End of macro CALLMONITOR
0952				endif 
0952 c3 e3 07			jp .srext 
0955			 
0955			 
0955			 
0955			 
0955			 
0955			.readdone:		 
0955 e1				pop hl 		 ; return start of data to show as not EOF 
0956 23				inc hl   ; past file id 
0957 23				inc hl   ; past ext 
0958				if DEBUG_STORESE 
0958					DMARK "SRe" 
0958 f5				push af  
0959 3a 6d 09			ld a, (.dmark)  
095c 32 65 ee			ld (debug_mark),a  
095f 3a 6e 09			ld a, (.dmark+1)  
0962 32 66 ee			ld (debug_mark+1),a  
0965 3a 6f 09			ld a, (.dmark+2)  
0968 32 67 ee			ld (debug_mark+2),a  
096b 18 03			jr .pastdmark  
096d ..			.dmark: db "SRe"  
0970 f1			.pastdmark: pop af  
0971			endm  
# End of macro DMARK
0971					CALLMONITOR 
0971 cd 6f ee			call debug_vector  
0974				endm  
# End of macro CALLMONITOR
0974				endif 
0974 c9					ret 
0975			 
0975			 
0975			 
0975			; 
0975			; Append File 
0975			; 
0975			; hl - file id to locate 
0975			; de - pointer to (multi block) string to write 
0975			 
0975			.sa_notfound: 
0975 d1				pop de 
0976 c9				ret 
0977			 
0977			 
0977			storage_append: 
0977				; hl -  file id to append to 
0977				; de - string to append 
0977			 
0977 d5				push de 
0978				 
0978				if DEBUG_STORESE 
0978					DMARK "AP1" 
0978 f5				push af  
0979 3a 8d 09			ld a, (.dmark)  
097c 32 65 ee			ld (debug_mark),a  
097f 3a 8e 09			ld a, (.dmark+1)  
0982 32 66 ee			ld (debug_mark+1),a  
0985 3a 8f 09			ld a, (.dmark+2)  
0988 32 67 ee			ld (debug_mark+2),a  
098b 18 03			jr .pastdmark  
098d ..			.dmark: db "AP1"  
0990 f1			.pastdmark: pop af  
0991			endm  
# End of macro DMARK
0991					CALLMONITOR 
0991 cd 6f ee			call debug_vector  
0994				endm  
# End of macro CALLMONITOR
0994				endif 
0994			 
0994 7d				ld a, l 
0995 32 68 ea			ld (store_tmpid), a 
0998			 
0998				; get file header  
0998			 
0998 16 00			ld d, 0			 ; file extent to locate - file name details at item 0 
099a 3a 68 ea			ld a, (store_tmpid) 
099d 5f				ld e, a 
099e			 
099e 21 40 00				ld hl, STORE_BLOCK_PHY 
09a1 cd ba 05				call storage_findnextid 
09a4			 
09a4 cd 1e 0e			call ishlzero 
09a7 28 cc			jr z, .sa_notfound 
09a9			 
09a9 22 5f ea			ld (store_tmppageid), hl 
09ac			 
09ac				; TODO handle file id not found 
09ac			 
09ac				if DEBUG_STORESE 
09ac					DMARK "AP2" 
09ac f5				push af  
09ad 3a c1 09			ld a, (.dmark)  
09b0 32 65 ee			ld (debug_mark),a  
09b3 3a c2 09			ld a, (.dmark+1)  
09b6 32 66 ee			ld (debug_mark+1),a  
09b9 3a c3 09			ld a, (.dmark+2)  
09bc 32 67 ee			ld (debug_mark+2),a  
09bf 18 03			jr .pastdmark  
09c1 ..			.dmark: db "AP2"  
09c4 f1			.pastdmark: pop af  
09c5			endm  
# End of macro DMARK
09c5					CALLMONITOR 
09c5 cd 6f ee			call debug_vector  
09c8				endm  
# End of macro CALLMONITOR
09c8				endif 
09c8			 
09c8				; update file extent count 
09c8			 
09c8 11 74 ea			ld de, store_page 
09cb			 
09cb cd 87 02			call storage_read_block 
09ce			 
09ce				if DEBUG_STORESE 
09ce					DMARK "AP3" 
09ce f5				push af  
09cf 3a e3 09			ld a, (.dmark)  
09d2 32 65 ee			ld (debug_mark),a  
09d5 3a e4 09			ld a, (.dmark+1)  
09d8 32 66 ee			ld (debug_mark+1),a  
09db 3a e5 09			ld a, (.dmark+2)  
09de 32 67 ee			ld (debug_mark+2),a  
09e1 18 03			jr .pastdmark  
09e3 ..			.dmark: db "AP3"  
09e6 f1			.pastdmark: pop af  
09e7			endm  
# End of macro DMARK
09e7					CALLMONITOR 
09e7 cd 6f ee			call debug_vector  
09ea				endm  
# End of macro CALLMONITOR
09ea				endif 
09ea			;	ld (store_tmppageid), hl 
09ea			 
09ea 3a 76 ea			ld a, (store_page+2) 
09ed 3c				inc a 
09ee 32 76 ea			ld (store_page+2), a 
09f1 32 67 ea			ld (store_tmpext), a 
09f4				 
09f4				if DEBUG_STORESE 
09f4					DMARK "AP3" 
09f4 f5				push af  
09f5 3a 09 0a			ld a, (.dmark)  
09f8 32 65 ee			ld (debug_mark),a  
09fb 3a 0a 0a			ld a, (.dmark+1)  
09fe 32 66 ee			ld (debug_mark+1),a  
0a01 3a 0b 0a			ld a, (.dmark+2)  
0a04 32 67 ee			ld (debug_mark+2),a  
0a07 18 03			jr .pastdmark  
0a09 ..			.dmark: db "AP3"  
0a0c f1			.pastdmark: pop af  
0a0d			endm  
# End of macro DMARK
0a0d					CALLMONITOR 
0a0d cd 6f ee			call debug_vector  
0a10				endm  
# End of macro CALLMONITOR
0a10				endif 
0a10 2a 5f ea			ld hl, (store_tmppageid) 
0a13 11 74 ea			ld de, store_page 
0a16 cd ec 02			call storage_write_block 
0a19			 
0a19				; find free block 
0a19			 
0a19 11 00 00			ld de, 0			 ; file extent to locate 
0a1c			 
0a1c 21 40 00				ld hl, STORE_BLOCK_PHY 
0a1f cd ba 05				call storage_findnextid 
0a22 cd 1e 0e			call ishlzero 
0a25 ca 75 09			jp z, .sa_notfound 
0a28			 
0a28					; TODO handle no space left 
0a28					 
0a28 22 5f ea				ld (store_tmppageid), hl 
0a2b			 
0a2b				if DEBUG_STORESE 
0a2b					DMARK "AP4" 
0a2b f5				push af  
0a2c 3a 40 0a			ld a, (.dmark)  
0a2f 32 65 ee			ld (debug_mark),a  
0a32 3a 41 0a			ld a, (.dmark+1)  
0a35 32 66 ee			ld (debug_mark+1),a  
0a38 3a 42 0a			ld a, (.dmark+2)  
0a3b 32 67 ee			ld (debug_mark+2),a  
0a3e 18 03			jr .pastdmark  
0a40 ..			.dmark: db "AP4"  
0a43 f1			.pastdmark: pop af  
0a44			endm  
# End of macro DMARK
0a44					CALLMONITOR 
0a44 cd 6f ee			call debug_vector  
0a47				endm  
# End of macro CALLMONITOR
0a47				endif 
0a47					; init the buffer with zeros so we can id if the buffer is full or not 
0a47			 
0a47 e5					push hl 
0a48 c5					push bc 
0a49			 
0a49 21 74 ea				ld hl, store_page 
0a4c 06 40				ld b, STORE_BLOCK_PHY 
0a4e 3e 00				ld a, 0 
0a50 77			.zeroblock:	ld (hl), a 
0a51 23					inc hl 
0a52 10 fc				djnz .zeroblock 
0a54			 
0a54 c1					pop bc 
0a55 e1					pop hl 
0a56			 
0a56					; construct block 
0a56			 
0a56 3a 68 ea				ld a, (store_tmpid) 
0a59 32 74 ea				ld (store_page), a   ; file id 
0a5c 3a 67 ea				ld a, (store_tmpext)   ; extent for this block 
0a5f 32 75 ea				ld (store_page+1), a 
0a62			 
0a62 e1					pop hl    ; get string to write 
0a63 06 3e				ld b, STORE_BLOCK_PHY-2       ; exclude count of file id and extent 
0a65 11 76 ea				ld de, store_page+2 
0a68			 
0a68				if DEBUG_STORESE 
0a68					DMARK "AP5" 
0a68 f5				push af  
0a69 3a 7d 0a			ld a, (.dmark)  
0a6c 32 65 ee			ld (debug_mark),a  
0a6f 3a 7e 0a			ld a, (.dmark+1)  
0a72 32 66 ee			ld (debug_mark+1),a  
0a75 3a 7f 0a			ld a, (.dmark+2)  
0a78 32 67 ee			ld (debug_mark+2),a  
0a7b 18 03			jr .pastdmark  
0a7d ..			.dmark: db "AP5"  
0a80 f1			.pastdmark: pop af  
0a81			endm  
# End of macro DMARK
0a81					CALLMONITOR 
0a81 cd 6f ee			call debug_vector  
0a84				endm  
# End of macro CALLMONITOR
0a84				endif 
0a84			 
0a84			 
0a84			 
0a84					; fill buffer with data until end of string or full block 
0a84			 
0a84 7e			.appd:		ld a, (hl) 
0a85 12					ld (de), a 
0a86 fe 00				cp 0 
0a88 28 04				jr z, .appdone 
0a8a 23					inc hl 
0a8b 13					inc de 
0a8c 10 f6				djnz .appd 
0a8e			 
0a8e e5			.appdone:	push hl		 	; save current source in case we need to go around again 
0a8f f5					push af   		; save last byte dumped 
0a90			 
0a90			 
0a90 2a 5f ea			ld hl, (store_tmppageid) 
0a93 11 74 ea			ld de, store_page 
0a96				if DEBUG_STORESE 
0a96					DMARK "AP6" 
0a96 f5				push af  
0a97 3a ab 0a			ld a, (.dmark)  
0a9a 32 65 ee			ld (debug_mark),a  
0a9d 3a ac 0a			ld a, (.dmark+1)  
0aa0 32 66 ee			ld (debug_mark+1),a  
0aa3 3a ad 0a			ld a, (.dmark+2)  
0aa6 32 67 ee			ld (debug_mark+2),a  
0aa9 18 03			jr .pastdmark  
0aab ..			.dmark: db "AP6"  
0aae f1			.pastdmark: pop af  
0aaf			endm  
# End of macro DMARK
0aaf					CALLMONITOR 
0aaf cd 6f ee			call debug_vector  
0ab2				endm  
# End of macro CALLMONITOR
0ab2				endif 
0ab2 cd ec 02				call storage_write_block 
0ab5			 
0ab5			 
0ab5				; was that a full block of data written? 
0ab5				; any more to write out? 
0ab5			 
0ab5				; if yes then set vars and jump to start of function again 
0ab5			 
0ab5 f1					pop af 
0ab6 d1					pop de 
0ab7			 
0ab7 fe 00				cp 0		 ; no, string was fully written 
0ab9 c8					ret z 
0aba			 
0aba					; setup vars for next cycle 
0aba			 
0aba 3a 68 ea				ld a, (store_tmpid) 
0abd 6f					ld l, a 
0abe 26 00				ld h, 0 
0ac0			 
0ac0 c3 77 09			 	jp storage_append	 ; yes, need to write out some more 
0ac3			 
0ac3			 
0ac3			 
0ac3			 
0ac3			 
0ac3			 
0ac3			 
0ac3			if DEBUG_STORECF 
0ac3			storageput:	 
0ac3					ret 
0ac3			storageread: 
0ac3					ld hl, store_page 
0ac3					ld b, 200 
0ac3					ld a,0 
0ac3			.src:		ld (hl),a 
0ac3					inc hl 
0ac3					djnz .src 
0ac3					 
0ac3			 
0ac3					ld de, 0 
0ac3					ld bc, 1 
0ac3					ld hl, store_page 
0ac3					call cfRead 
0ac3			 
0ac3				call cfGetError 
0ac3				ld hl,scratch 
0ac3				call hexout 
0ac3				ld hl, scratch+2 
0ac3				ld a, 0 
0ac3				ld (hl),a 
0ac3				ld de, scratch 
0ac3				ld a,display_row_1 
0ac3				call str_at_display 
0ac3				call update_display 
0ac3			 
0ac3					ld hl, store_page 
0ac3					ld (os_cur_ptr),hl 
0ac3			 
0ac3					ret 
0ac3			endif 
0ac3			 
0ac3			 
0ac3			; Clear out the main buffer store (used to remove junk before writing a new block) 
0ac3			 
0ac3			storage_clear_page: 
0ac3 e5				push hl 
0ac4 d5				push de 
0ac5 c5				push bc 
0ac6 21 74 ea			ld hl, store_page 
0ac9 3e 00			ld a, 0 
0acb 77				ld (hl), a 
0acc			 
0acc 11 75 ea			ld de, store_page+1 
0acf 01 19 01			ld bc, STORE_BLOCK_LOG+1 
0ad2			 
0ad2 ed b0			ldir 
0ad4				 
0ad4 c1				pop bc 
0ad5 d1				pop de 
0ad6 e1				pop hl 
0ad7 c9				ret 
0ad8			 
0ad8			; eof 
# End of file firmware_storage.asm
0ad8			  
0ad8			; support routines for above hardware abstraction layer  
0ad8			  
0ad8			include "firmware_general.asm"        ; general support functions  
0ad8			 
0ad8			; word look up 
0ad8			 
0ad8			; in 
0ad8			; a is the index 
0ad8			; hl is pointer start of array 
0ad8			; 
0ad8			; returns 
0ad8			; hl to the word 
0ad8			; 
0ad8			 
0ad8			table_lookup:  
0ad8 d5					push de 
0ad9 eb					ex de, hl 
0ada			 
0ada 6f					ld l, a 
0adb 26 00				ld h, 0 
0add 29					add hl, hl 
0ade 19					add hl, de 
0adf 7e					ld a, (hl) 
0ae0 23					inc hl 
0ae1 66					ld h,(hl) 
0ae2 6f					ld l, a 
0ae3			 
0ae3 d1					pop de 
0ae4 c9					ret 
0ae5			 
0ae5			; Delay loops 
0ae5			 
0ae5			 
0ae5			 
0ae5			aDelayInMS: 
0ae5 c5				push bc 
0ae6 47				ld b,a 
0ae7			msdelay: 
0ae7 c5				push bc 
0ae8				 
0ae8			 
0ae8 01 41 00			ld bc,041h 
0aeb cd 03 0b			call delayloop 
0aee c1				pop bc 
0aef 05				dec b 
0af0 20 f5			jr nz,msdelay 
0af2			 
0af2			;if CPU_CLOCK_8MHZ 
0af2			;msdelay8: 
0af2			;	push bc 
0af2			;	 
0af2			; 
0af2			;	ld bc,041h 
0af2			;	call delayloop 
0af2			;	pop bc 
0af2			;	dec b 
0af2			;	jr nz,msdelay8 
0af2			;endif 
0af2			 
0af2			 
0af2 c1				pop bc 
0af3 c9				ret 
0af4			 
0af4			 
0af4			delay250ms: 
0af4				;push de 
0af4 01 00 40			ld bc, 04000h 
0af7 c3 03 0b			jp delayloop 
0afa			delay500ms: 
0afa				;push de 
0afa 01 00 80			ld bc, 08000h 
0afd c3 03 0b			jp delayloop 
0b00			delay1s: 
0b00				;push bc 
0b00			   ; Clobbers A, d and e 
0b00 01 00 00		    ld      bc,0      ; # 0ffffh = approx 1s 
0b03			delayloop: 
0b03 c5			    push bc 
0b04			 
0b04			if BASE_CPM 
0b04 01 a0 0f			ld bc, CPM_DELAY_TUNE 
0b07			.cpmloop: 
0b07 c5				push bc 
0b08			 
0b08			endif 
0b08			 
0b08			 
0b08			 
0b08			delayloopi: 
0b08			;	push bc 
0b08			;.dl: 
0b08 cb 47		    bit     0,a    	; 8 
0b0a cb 47		    bit     0,a    	; 8 
0b0c cb 47		    bit     0,a    	; 8 
0b0e e6 ff		    and     255  	; 7 
0b10 0b			    dec     bc      	; 6 
0b11 79			    ld      a,c     	; 4 
0b12 b0			    or      b     	; 4 
0b13 c2 08 0b		    jp      nz,delayloopi   	; 10, total = 55 states/iteration 
0b16			    ; 65536 iterations * 55 states = 3604480 states = 2.00248 seconds 
0b16				;pop de 
0b16			;pop bc 
0b16			 
0b16			if BASE_CPM 
0b16 c1				pop bc 
0b17				 
0b17 0b			    dec     bc      	; 6 
0b18 79			    ld      a,c     	; 4 
0b19 b0			    or      b     	; 4 
0b1a c2 07 0b		    jp      nz,.cpmloop   	; 10, total = 55 states/iteration 
0b1d				 
0b1d			 
0b1d			endif 
0b1d			;if CPU_CLOCK_8MHZ 
0b1d			;    pop bc 
0b1d			;    push bc 
0b1d			;.dl8: 
0b1d			;    bit     0,a    	; 8 
0b1d			;    bit     0,a    	; 8 
0b1d			;    bit     0,a    	; 8 
0b1d			;    and     255  	; 7 
0b1d			;    dec     bc      	; 6 
0b1d			;    ld      a,c     	; 4 
0b1d			;    or      b     	; 4 
0b1d			;    jp      nz,.dl8   	; 10, total = 55 states/iteration 
0b1d			;endif 
0b1d			 
0b1d			;if CPU_CLOCK_10MHZ 
0b1d			;    pop bc 
0b1d			;    push bc 
0b1d			;.dl8: 
0b1d			;    bit     0,a    	; 8 
0b1d			;    bit     0,a    	; 8 
0b1d			;    bit     0,a    	; 8 
0b1d			;    and     255  	; 7 
0b1d			;    dec     bc      	; 6 
0b1d			;    ld      a,c     	; 4 
0b1d			;    or      b     	; 4 
0b1d			;    jp      nz,.dl8   	; 10, total = 55 states/iteration 
0b1d			;endif 
0b1d c1			    pop bc 
0b1e			 
0b1e c9				ret 
0b1f			 
0b1f			 
0b1f			 
0b1f			; eof 
# End of file firmware_general.asm
0b1f			include "firmware_display.asm"      ; frame buffer screen abstraction layer  
0b1f			; display routines that use the physical hardware abstraction layer 
0b1f			 
0b1f			 
0b1f			; Display an activity indicator 
0b1f			; Each call returns the new char pointed to in hl 
0b1f			 
0b1f			active: 
0b1f 3a c0 eb			ld a, (display_active) 
0b22 fe 06			cp 6 
0b24			 
0b24 20 02			jr nz, .sne 
0b26				; gone past the last one reset sequence 
0b26 3e ff			ld a, 255 
0b28			 
0b28			.sne:   
0b28				; get the next char in seq 
0b28 3c				inc a 
0b29 32 c0 eb			ld (display_active), a 
0b2c			 
0b2c				; look up the string in the table 
0b2c 21 43 0b			ld hl, actseq 
0b2f cb 27			sla a 
0b31 cd f5 0d			call addatohl 
0b34 cd 03 1f			call loadwordinhl 
0b37			 
0b37				; forth will write the to string when pushing so move from rom to ram 
0b37			 
0b37 11 c1 eb			ld de, display_active+1 
0b3a 01 02 00			ld bc, 2 
0b3d ed b0			ldir 
0b3f			 
0b3f 21 c1 eb			ld hl, display_active+1 
0b42 c9				ret 
0b43				 
0b43				 
0b43			 
0b43			 
0b43			;db "|/-\|-\" 
0b43			 
0b43			actseq: 
0b43			 
0b43 51 0b		dw spin0 
0b45 53 0b		dw spin1 
0b47 55 0b		dw spin2 
0b49 57 0b		dw spin3 
0b4b 55 0b		dw spin2 
0b4d 53 0b		dw spin1 
0b4f 51 0b		dw spin0 
0b51			 
0b51 .. 00		spin0: db " ", 0 
0b53 .. 00		spin1: db "-", 0 
0b55 .. 00		spin2: db "+", 0 
0b57 .. 00		spin3: db "#", 0 
0b59			 
0b59			 
0b59			; information window 
0b59			 
0b59			; pass hl with 1st string to display 
0b59			; pass de with 2nd string to display 
0b59			 
0b59			info_panel: 
0b59 e5				push hl 
0b5a			 
0b5a 2a c6 eb			ld hl, (display_fb_active) 
0b5d e5				push hl    ; future de destination 
0b5e 21 ab ed				ld hl, display_fb0 
0b61 22 c6 eb				ld (display_fb_active), hl 
0b64			 
0b64			;	call clear_display 
0b64			 
0b64				if BASE_CPM 
0b64 3e 2e			ld a, '.' 
0b66				else 
0b66				ld a, 165 
0b66				endif 
0b66 cd cd 0b			call fill_display 
0b69			 
0b69			 
0b69 3e 55			ld a, display_row_3 + 5 
0b6b cd db 0b			call str_at_display 
0b6e			 
0b6e e1				pop hl 
0b6f d1				pop de 
0b70			 
0b70 e5				push hl 
0b71			 
0b71			 
0b71 3e 2d			ld a, display_row_2 + 5 
0b73 cd db 0b			call str_at_display 
0b76			 
0b76			 
0b76 cd eb 0b			call update_display 
0b79 cd 08 1b			call next_page_prompt 
0b7c cd c8 0b			call clear_display 
0b7f			 
0b7f				 
0b7f 21 0a ed				ld hl, display_fb1 
0b82 22 c6 eb				ld (display_fb_active), hl 
0b85 cd eb 0b			call update_display 
0b88			 
0b88 e1				pop hl 
0b89			 
0b89 c9				ret 
0b8a			 
0b8a			 
0b8a			 
0b8a			 
0b8a			; TODO windowing? 
0b8a			 
0b8a			; TODO scroll line up 
0b8a			 
0b8a			scroll_up: 
0b8a			 
0b8a e5				push hl 
0b8b d5				push de 
0b8c c5				push bc 
0b8d			 
0b8d				; get frame buffer  
0b8d			 
0b8d 2a c6 eb			ld hl, (display_fb_active) 
0b90 e5				push hl    ; future de destination 
0b91			 
0b91 11 28 00			ld  de, display_cols 
0b94 19				add hl, de 
0b95			 
0b95 d1				pop de 
0b96			 
0b96				;ex de, hl 
0b96 01 9f 00			ld bc, display_fb_len -1  
0b99			;if DEBUG_FORTH_WORDS 
0b99			;	DMARK "SCL" 
0b99			;	CALLMONITOR 
0b99			;endif	 
0b99 ed b0			ldir 
0b9b			 
0b9b				; wipe bottom row 
0b9b			 
0b9b			 
0b9b 2a c6 eb			ld hl, (display_fb_active) 
0b9e 11 a0 00			ld de, display_cols*display_rows 
0ba1 19				add hl, de 
0ba2 06 28			ld b, display_cols 
0ba4 3e 20			ld a, ' ' 
0ba6			.scwipe: 
0ba6 77				ld (hl), a 
0ba7 2b				dec hl 
0ba8 10 fc			djnz .scwipe 
0baa			 
0baa				;pop hl 
0baa			 
0baa c1				pop bc 
0bab d1				pop de 
0bac e1				pop hl 
0bad			 
0bad c9				ret 
0bae			 
0bae			 
0bae			;scroll_upo: 
0bae			;	ld de, display_row_1 
0bae			 ;	ld hl, display_row_2 
0bae			;	ld bc, display_cols 
0bae			;	ldir 
0bae			;	ld de, display_row_2 
0bae			 ;	ld hl, display_row_3 
0bae			;	ld bc, display_cols 
0bae			;	ldir 
0bae			;	ld de, display_row_3 
0bae			 ;	ld hl, display_row_4 
0bae			;	ld bc, display_cols 
0bae			;	ldir 
0bae			 
0bae			; TODO clear row 4 
0bae			 
0bae			;	ret 
0bae			 
0bae				 
0bae			scroll_down: 
0bae			 
0bae e5				push hl 
0baf d5				push de 
0bb0 c5				push bc 
0bb1			 
0bb1				; get frame buffer  
0bb1			 
0bb1 2a c6 eb			ld hl, (display_fb_active) 
0bb4			 
0bb4 11 9f 00			ld de, display_fb_len - 1 
0bb7 19				add hl, de 
0bb8			 
0bb8 e5			push hl    ; future de destination 
0bb9			 
0bb9 11 28 00			ld  de, display_cols 
0bbc ed 52			sbc hl, de 
0bbe			 
0bbe			 
0bbe d1				pop de 
0bbf			 
0bbf			;	ex de, hl 
0bbf 01 9f 00			ld bc, display_fb_len -1  
0bc2			 
0bc2			 
0bc2				 
0bc2			 
0bc2 ed b0			ldir 
0bc4			 
0bc4				; wipe bottom row 
0bc4			 
0bc4			 
0bc4			;	ld hl, (display_fb_active) 
0bc4			;;	ld de, display_cols*display_rows 
0bc4			;;	add hl, de 
0bc4			;	ld b, display_cols 
0bc4			;	ld a, ' ' 
0bc4			;.scwiped: 
0bc4			;	ld (hl), a 
0bc4			;	dec hl 
0bc4			;	djnz .scwiped 
0bc4			 
0bc4				;pop hl 
0bc4			 
0bc4 c1				pop bc 
0bc5 d1				pop de 
0bc6 e1				pop hl 
0bc7			 
0bc7 c9				ret 
0bc8			;scroll_down: 
0bc8			;	ld de, display_row_4 
0bc8			;	ld hl, display_row_3 
0bc8			;	ld bc, display_cols 
0bc8			;	ldir 
0bc8			;	ld de, display_row_3 
0bc8			; 	ld hl, display_row_2 
0bc8			;	ld bc, display_cols 
0bc8			;	ldir 
0bc8			;	ld de, display_row_2 
0bc8			;	ld hl, display_row_1 
0bc8			;	ld bc, display_cols 
0bc8			;	ldir 
0bc8			;;; TODO clear row 1 
0bc8			;	ret 
0bc8			 
0bc8			 
0bc8			 
0bc8			 
0bc8			 
0bc8			; clear active frame buffer 
0bc8			 
0bc8			clear_display: 
0bc8 3e 20			ld a, ' ' 
0bca c3 cd 0b			jp fill_display 
0bcd			 
0bcd			; fill active frame buffer with a char in A 
0bcd			 
0bcd			fill_display: 
0bcd 06 a0			ld b,display_fb_len 
0bcf 2a c6 eb			ld hl, (display_fb_active) 
0bd2 77			.fd1:	ld (hl),a 
0bd3 23				inc hl 
0bd4 10 fc			djnz .fd1 
0bd6 23				inc hl 
0bd7 3e 00			ld a,0 
0bd9 77				ld (hl),a 
0bda			 
0bda			 
0bda c9				ret 
0bdb			; Write string (DE) at pos (A) to active frame buffer 
0bdb			 
0bdb 2a c6 eb		str_at_display:    ld hl,(display_fb_active) 
0bde 06 00					ld b,0 
0be0 4f					ld c,a 
0be1 09					add hl,bc 
0be2 1a			.sad1: 		LD   A, (DE)        ;Get character from string 
0be3 b7			            OR   A              ;Null terminator? 
0be4 c8			            RET  Z              ;Yes, so finished 
0be5 77					ld (hl),a 
0be6 23				inc hl 
0be7 13			            INC  DE             ;Point to next character 
0be8 18 f8		            JR   .sad1     ;Repeat 
0bea c9					ret 
0beb			 
0beb			; using current frame buffer write to physical display 
0beb			 
0beb			update_display: 
0beb e5				push hl 
0bec 2a c6 eb			ld hl, (display_fb_active) 
0bef cd 0f 5e			call write_display 
0bf2 e1				pop hl 
0bf3 c9				ret 
0bf4			 
0bf4			; TODO scrolling 
0bf4			 
0bf4			 
0bf4			; move cursor right one char 
0bf4			cursor_right: 
0bf4			 
0bf4				; TODO shift right 
0bf4				; TODO if beyond max col 
0bf4				; TODO       cursor_next_line 
0bf4			 
0bf4 c9				ret 
0bf5			 
0bf5			 
0bf5			cursor_next_line: 
0bf5				; TODO first char 
0bf5				; TODO line down 
0bf5				; TODO if past last row 
0bf5				; TODO    scroll up 
0bf5			 
0bf5 c9				ret 
0bf6			 
0bf6			cursor_left: 
0bf6				; TODO shift left 
0bf6				; TODO if beyond left  
0bf6				; TODO     cursor prev line 
0bf6				 
0bf6 c9				ret 
0bf7			 
0bf7			cursor_prev_line: 
0bf7				; TODO last char 
0bf7				; TODO line up 
0bf7				; TODO if past first row 
0bf7				; TODO   scroll down 
0bf7			 
0bf7 c9				ret 
0bf8			 
0bf8			 
0bf8			cout: 
0bf8				; A - char 
0bf8 c9				ret 
0bf9			 
0bf9			 
0bf9			; Display a menu and allow item selection (optional toggle items) 
0bf9			; 
0bf9			; format: 
0bf9			; hl pointer to word array with zero term for items 
0bf9			; e.g.    db item1 
0bf9			;         db .... 
0bf9			;         db 0 
0bf9			; 
0bf9			; a = starting menu item  
0bf9			; 
0bf9			; de = pointer item toggle array   (todo) 
0bf9			; 
0bf9			; returns item selected in a 1-... 
0bf9			; returns 0 if back button pressed 
0bf9			; 
0bf9			; NOTE: Uses system frame buffer to display 
0bf9			; 
0bf9			; LEFT, Q = go back 
0bf9			; RIGHT, SPACE, CR = select 
0bf9			; UP, A - Up 
0bf9			; DOWN, Z - Down 
0bf9			 
0bf9			 
0bf9			 
0bf9			 
0bf9			 
0bf9			menu: 
0bf9			 
0bf9					; keep array pointer 
0bf9			 
0bf9 22 6d ea				ld (store_tmp1), hl 
0bfc 32 6b ea				ld (store_tmp2), a 
0bff			 
0bff					; check for key bounce 
0bff			 
0bff			if BASE_KEV 
0bff			 
0bff			.mbounce:	call cin 
0bff					cp 0 
0bff					jr nz, .mbounce 
0bff			endif 
0bff					; for ease use ex 
0bff			 
0bff					; use menu on fb0 so as not to disrupt user screens ie a menu popup 
0bff 21 ab ed				ld hl, display_fb0 
0c02 22 c6 eb				ld (display_fb_active), hl 
0c05			 
0c05 cd c8 0b		.mloop:		call clear_display 
0c08 cd eb 0b				call update_display 
0c0b			 
0c0b					; draw selection id '>' at 1 
0c0b			 
0c0b					; init start of list display 
0c0b			 
0c0b 3e 05				ld a, 5 
0c0d 32 69 ea				ld (store_tmp3), a   ; display row count 
0c10 3a 6b ea				ld a,( store_tmp2) 
0c13 32 6c ea				ld (store_tmp2+1), a   ; display item count 
0c16			 
0c16					 
0c16			.mitem:	 
0c16			 
0c16			 
0c16 3a 6c ea				ld a,(store_tmp2+1) 
0c19 6f					ld l, a 
0c1a 26 00				ld h, 0 
0c1c 29					add hl, hl 
0c1d ed 5b 6d ea			ld de, (store_tmp1) 
0c21 19					add hl, de 
0c22 7e					ld a, (hl) 
0c23 23					inc hl 
0c24 66					ld h,(hl) 
0c25 6f					ld l, a 
0c26			 
0c26 cd 1e 0e				call ishlzero 
0c29 28 1a				jr z, .mdone 
0c2b			 
0c2b eb					ex de, hl 
0c2c 3a 69 ea				ld a, (store_tmp3) 
0c2f cd db 0b				call str_at_display 
0c32					 
0c32			 
0c32					; next item 
0c32 3a 6c ea				ld a, (store_tmp2+1) 
0c35 3c					inc a 
0c36 32 6c ea				ld (store_tmp2+1), a   ; display item count 
0c39			 
0c39			 		; next row 
0c39			 
0c39 3a 69 ea				ld a, (store_tmp3) 
0c3c c6 28				add display_cols 
0c3e 32 69 ea				ld (store_tmp3), a 
0c41			 
0c41					; at end of screen? 
0c41			 
0c41 fe 10				cp display_rows*4 
0c43 20 d1				jr nz, .mitem 
0c45			 
0c45			 
0c45			.mdone: 
0c45 cd 1e 0e				call ishlzero 
0c48 28 08				jr z, .nodn 
0c4a			 
0c4a 3e 78				ld a, display_row_4 
0c4c 11 cb 0c				ld de, .mdown 
0c4f cd db 0b				call str_at_display 
0c52			 
0c52					; draw options to fill the screens with active item on line 1 
0c52					; if current option is 2 or more then display ^ in top 
0c52			 
0c52 3a 6b ea		.nodn:		ld a, (store_tmp2) 
0c55 fe 00				cp 0 
0c57 28 08				jr z, .noup 
0c59			 
0c59 3e 00				ld a, 0 
0c5b 11 c9 0c				ld de, .mup 
0c5e cd db 0b				call str_at_display 
0c61			 
0c61 3e 02		.noup:		ld a, 2 
0c63 11 c7 0c				ld de, .msel 
0c66 cd db 0b				call str_at_display 
0c69			 
0c69					; if current option + 1 is not null then display V in bottom 
0c69					; get key 
0c69 cd eb 0b				call update_display 
0c6c			 
0c6c			 
0c6c					; handle key 
0c6c			 
0c6c cd c1 5e				call cin_wait 
0c6f			 
0c6f fe 05				cp KEY_UP 
0c71 28 2b				jr z, .mgoup 
0c73 fe 61				cp 'a' 
0c75 28 27				jr z, .mgoup 
0c77 fe 0a				cp KEY_DOWN 
0c79 28 32				jr z, .mgod 
0c7b fe 7a				cp 'z' 
0c7d 28 2e				jr z, .mgod 
0c7f fe 20				cp ' ' 
0c81 28 34				jr z, .goend 
0c83 fe 0c				cp KEY_RIGHT 
0c85 28 30				jr z, .goend 
0c87 fe 0d				cp KEY_CR 
0c89 28 2c				jr z, .goend 
0c8b fe 71				cp 'q' 
0c8d 28 0b				jr z, .goback 
0c8f			 
0c8f fe 0b				cp KEY_LEFT 
0c91 28 07				jr z, .goback 
0c93 fe 08				cp KEY_BS 
0c95 28 03				jr z, .goback 
0c97 c3 05 0c				jp .mloop 
0c9a			 
0c9a			.goback: 
0c9a 3e 00			ld a, 0 
0c9c 18 1d			jr .goend2 
0c9e			 
0c9e				; move up one 
0c9e			.mgoup: 
0c9e 3a 6b ea				ld a, (store_tmp2) 
0ca1 fe 00				cp 0 
0ca3 ca 05 0c				jp z, .mloop 
0ca6 3d					dec a 
0ca7 32 6b ea				ld (store_tmp2), a 
0caa c3 05 0c				jp .mloop 
0cad			 
0cad				; move down one 
0cad			.mgod: 
0cad 3a 6b ea				ld a, (store_tmp2) 
0cb0 3c					inc a 
0cb1 32 6b ea				ld (store_tmp2), a 
0cb4 c3 05 0c				jp .mloop 
0cb7			 
0cb7			 
0cb7			.goend: 
0cb7					; get selected item number 
0cb7			 
0cb7 3a 6b ea				ld a, (store_tmp2) 
0cba 3c					inc a 
0cbb			 
0cbb			.goend2: 
0cbb f5					push af 
0cbc			 
0cbc					; restore active fb 
0cbc					; TODO BUG assumes fb1 
0cbc			 
0cbc 21 0a ed				ld hl, display_fb1 
0cbf 22 c6 eb				ld (display_fb_active), hl 
0cc2			 
0cc2					; restore main regs 
0cc2			 
0cc2			 
0cc2 cd eb 0b				call update_display 
0cc5			 
0cc5 f1					pop af 
0cc6			 
0cc6 c9				ret 
0cc7			 
0cc7 .. 00		.msel:   db ">",0 
0cc9 .. 00		.mup:   db "^",0 
0ccb .. 00		.mdown:   db "v",0 
0ccd			 
0ccd			 
0ccd			; eof 
0ccd			 
# End of file firmware_display.asm
0ccd			include "firmware_maths.asm"     ; any odd maths stuff   TODO removed until I fix up the rng code  
0ccd			; random number generators 
0ccd			 
0ccd			 
0ccd			; https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random 
0ccd			 
0ccd			 
0ccd			;-----> Generate a random number 
0ccd			; output a=answer 0<=a<=255 
0ccd			; all registers are preserved except: af 
0ccd			random: 
0ccd e5			        push    hl 
0cce d5			        push    de 
0ccf 2a a5 eb		        ld      hl,(randData) 
0cd2 ed 5f		        ld      a,r 
0cd4 57			        ld      d,a 
0cd5 5e			        ld      e,(hl) 
0cd6 19			        add     hl,de 
0cd7 85			        add     a,l 
0cd8 ac			        xor     h 
0cd9 22 a5 eb		        ld      (randData),hl 
0cdc d1			        pop     de 
0cdd e1			        pop     hl 
0cde c9			        ret 
0cdf			 
0cdf			 
0cdf			; randData here must be a 2 byte seed located in ram. While this is a fast generator, it's generally not considered very good in terms of randomness. 
0cdf			 
0cdf			 
0cdf			 
0cdf			;------LFSR------ 
0cdf			;James Montelongo 
0cdf			;optimized by Spencer Putt 
0cdf			;out: 
0cdf			; a = 8 bit random number 
0cdf			RandLFSR: 
0cdf 21 ab eb		        ld hl,LFSRSeed+4 
0ce2 5e			        ld e,(hl) 
0ce3 23			        inc hl 
0ce4 56			        ld d,(hl) 
0ce5 23			        inc hl 
0ce6 4e			        ld c,(hl) 
0ce7 23			        inc hl 
0ce8 7e			        ld a,(hl) 
0ce9 47			        ld b,a 
0cea cb 13		        rl e  
0cec cb 12			rl d 
0cee cb 11		        rl c  
0cf0 17				rla 
0cf1 cb 13		        rl e  
0cf3 cb 12			rl d 
0cf5 cb 11		        rl c  
0cf7 17				rla 
0cf8 cb 13		        rl e  
0cfa cb 12			rl d 
0cfc cb 11		        rl c  
0cfe 17				rla 
0cff 67			        ld h,a 
0d00 cb 13		        rl e  
0d02 cb 12			rl d 
0d04 cb 11		        rl c  
0d06 17				rla 
0d07 a8			        xor b 
0d08 cb 13		        rl e  
0d0a cb 12			rl d 
0d0c ac			        xor h 
0d0d a9			        xor c 
0d0e aa			        xor d 
0d0f 21 ad eb		        ld hl,LFSRSeed+6 
0d12 11 ae eb		        ld de,LFSRSeed+7 
0d15 01 07 00		        ld bc,7 
0d18 ed b8		        lddr 
0d1a 12			        ld (de),a 
0d1b c9			        ret 
0d1c			 
0d1c			;While this may produces better numbers, it is slower, larger and requires a bigger seed than ionrandom. Assuming theres is a good seed to start, it should generate ~2^56 bytes before repeating. However if there is not a good seed(0 for example), then the numbers created will not be adequate. Unlike Ionrandom and its use of the r register, starting with the same seed the same numbers will be generated. With Ionrandom the code running may have an impact on the number generated. This means this method requires more initialization. 
0d1c			 
0d1c			;You can initialize with TI-OS's seeds, stored at seed1 and seed2, both are ti-floats but will serve the purpose.  
0d1c			 
0d1c			 
0d1c			;This is a very fast, quality pseudo-random number generator. It combines a 16-bit Linear Feedback Shift Register and a 16-bit LCG. 
0d1c			 
0d1c			prng16: 
0d1c			;Inputs: 
0d1c			;   (seed1) contains a 16-bit seed value 
0d1c			;   (seed2) contains a NON-ZERO 16-bit seed value 
0d1c			;Outputs: 
0d1c			;   HL is the result 
0d1c			;   BC is the result of the LCG, so not that great of quality 
0d1c			;   DE is preserved 
0d1c			;Destroys: 
0d1c			;   AF 
0d1c			;cycle: 4,294,901,760 (almost 4.3 billion) 
0d1c			;160cc 
0d1c			;26 bytes 
0d1c 2a 9f eb		    ld hl,(seed1) 
0d1f 44			    ld b,h 
0d20 4d			    ld c,l 
0d21 29			    add hl,hl 
0d22 29			    add hl,hl 
0d23 2c			    inc l 
0d24 09			    add hl,bc 
0d25 22 9f eb		    ld (seed1),hl 
0d28 2a 9d eb		    ld hl,(seed2) 
0d2b 29			    add hl,hl 
0d2c 9f			    sbc a,a 
0d2d e6 2d		    and %00101101 
0d2f ad			    xor l 
0d30 6f			    ld l,a 
0d31 22 9d eb		    ld (seed2),hl 
0d34 09			    add hl,bc 
0d35 c9			    ret 
0d36			 
0d36			;On their own, LCGs and LFSRs don't produce great results and are generally very cyclical, but they are very fast to compute. The 16-bit LCG in the above example will bounce around and reach each number from 0 to 65535, but the lower bits are far more predictable than the upper bits. The LFSR mixes up the predictability of a given bit's state, but it hits every number except 0, meaning there is a slightly higher chance of any given bit in the result being a 1 instead of a 0. It turns out that by adding together the outputs of these two generators, we can lose the predictability of a bit's state, while ensuring it has a 50% chance of being 0 or 1. As well, since the periods, 65536 and 65535 are coprime, then the overall period of the generator is 65535*65536, which is over 4 billion.  
0d36			 
0d36			rand32: 
0d36			;Inputs: 
0d36			;   (seed1_0) holds the lower 16 bits of the first seed 
0d36			;   (seed1_1) holds the upper 16 bits of the first seed 
0d36			;   (seed2_0) holds the lower 16 bits of the second seed 
0d36			;   (seed2_1) holds the upper 16 bits of the second seed 
0d36			;   **NOTE: seed2 must be non-zero 
0d36			;Outputs: 
0d36			;   HL is the result 
0d36			;   BC,DE can be used as lower quality values, but are not independent of HL. 
0d36			;Destroys: 
0d36			;   AF 
0d36			;Tested and passes all CAcert tests 
0d36			;Uses a very simple 32-bit LCG and 32-bit LFSR 
0d36			;it has a period of 18,446,744,069,414,584,320 
0d36			;roughly 18.4 quintillion. 
0d36			;LFSR taps: 0,2,6,7  = 11000101 
0d36			;291cc 
0d36			;seed1_0=$+1 
0d36			;    ld hl,12345 
0d36			;seed1_1=$+1 
0d36			;    ld de,6789 
0d36			;    ld b,h 
0d36			;    ld c,l 
0d36			;    add hl,hl \ rl e \ rl d 
0d36			;    add hl,hl \ rl e \ rl d 
0d36			;    inc l 
0d36			;    add hl,bc 
0d36			;    ld (seed1_0),hl 
0d36			;    ld hl,(seed1_1) 
0d36			;    adc hl,de 
0d36			;    ld (seed1_1),hl 
0d36			;    ex de,hl 
0d36			;seed2_0=$+1 
0d36			;    ld hl,9876 
0d36			;seed2_1=$+1 
0d36			;    ld bc,54321 
0d36			;    add hl,hl \ rl c \ rl b 
0d36			;    ld (seed2_1),bc 
0d36			;    sbc a,a 
0d36			;    and %11000101 
0d36			;    xor l 
0d36			;    ld l,a 
0d36			;    ld (seed2_0),hl 
0d36			;    ex de,hl 
0d36			;    add hl,bc 
0d36			;    ret 
0d36			; 
0d36			 
0d36			; 16-bit xorshift pseudorandom number generator by John Metcalf 
0d36			; 20 bytes, 86 cycles (excluding ret) 
0d36			 
0d36			; returns   hl = pseudorandom number 
0d36			; corrupts   a 
0d36			 
0d36			; generates 16-bit pseudorandom numbers with a period of 65535 
0d36			; using the xorshift method: 
0d36			 
0d36			; hl ^= hl << 7 
0d36			; hl ^= hl >> 9 
0d36			; hl ^= hl << 8 
0d36			 
0d36			; some alternative shift triplets which also perform well are: 
0d36			; 6, 7, 13; 7, 9, 13; 9, 7, 13. 
0d36			 
0d36			;  org 32768 
0d36			 
0d36			xrnd: 
0d36 2a a3 eb		  ld hl,(xrandc)       ; seed must not be 0 
0d39 3e 00		  ld a,0 
0d3b bd			  cp l 
0d3c 20 02		  jr nz, .xrnd1 
0d3e 2e 01		  ld l, 1 
0d40			.xrnd1: 
0d40			 
0d40 7c			  ld a,h 
0d41 1f			  rra 
0d42 7d			  ld a,l 
0d43 1f			  rra 
0d44 ac			  xor h 
0d45 67			  ld h,a 
0d46 7d			  ld a,l 
0d47 1f			  rra 
0d48 7c			  ld a,h 
0d49 1f			  rra 
0d4a ad			  xor l 
0d4b 6f			  ld l,a 
0d4c ac			  xor h 
0d4d 67			  ld h,a 
0d4e			 
0d4e 22 a3 eb		  ld (xrandc),hl 
0d51			 
0d51 c9			  ret 
0d52			;  
0d52			 
0d52			 
0d52			;;;; int maths 
0d52			 
0d52			; https://map.grauw.nl/articles/mult_div_shifts.php 
0d52			; Divide 16-bit values (with 16-bit result) 
0d52			; In: Divide BC by divider DE 
0d52			; Out: BC = result, HL = rest 
0d52			; 
0d52			Div16: 
0d52 21 00 00		    ld hl,0 
0d55 78			    ld a,b 
0d56 06 08		    ld b,8 
0d58			Div16_Loop1: 
0d58 17			    rla 
0d59 ed 6a		    adc hl,hl 
0d5b ed 52		    sbc hl,de 
0d5d 30 01		    jr nc,Div16_NoAdd1 
0d5f 19			    add hl,de 
0d60			Div16_NoAdd1: 
0d60 10 f6		    djnz Div16_Loop1 
0d62 17			    rla 
0d63 2f			    cpl 
0d64 47			    ld b,a 
0d65 79			    ld a,c 
0d66 48			    ld c,b 
0d67 06 08		    ld b,8 
0d69			Div16_Loop2: 
0d69 17			    rla 
0d6a ed 6a		    adc hl,hl 
0d6c ed 52		    sbc hl,de 
0d6e 30 01		    jr nc,Div16_NoAdd2 
0d70 19			    add hl,de 
0d71			Div16_NoAdd2: 
0d71 10 f6		    djnz Div16_Loop2 
0d73 17			    rla 
0d74 2f			    cpl 
0d75 41			    ld b,c 
0d76 4f			    ld c,a 
0d77 c9			ret 
0d78			 
0d78			 
0d78			;http://z80-heaven.wikidot.com/math 
0d78			; 
0d78			;Inputs: 
0d78			;     DE and A are factors 
0d78			;Outputs: 
0d78			;     A is not changed 
0d78			;     B is 0 
0d78			;     C is not changed 
0d78			;     DE is not changed 
0d78			;     HL is the product 
0d78			;Time: 
0d78			;     342+6x 
0d78			; 
0d78			Mult16: 
0d78			 
0d78 06 08		     ld b,8          ;7           7 
0d7a 21 00 00		     ld hl,0         ;10         10 
0d7d 29			       add hl,hl     ;11*8       88 
0d7e 07			       rlca          ;4*8        32 
0d7f 30 01		       jr nc,$+3     ;(12|18)*8  96+6x 
0d81 19			         add hl,de   ;--         -- 
0d82 10 f9		       djnz $-5      ;13*7+8     99 
0d84 c9			ret 
0d85			 
0d85			; 
0d85			; Square root of 16-bit value 
0d85			; In:  HL = value 
0d85			; Out:  D = result (rounded down) 
0d85			; 
0d85			;Sqr16: 
0d85			;    ld de,#0040 
0d85			;    ld a,l 
0d85			;    ld l,h 
0d85			;    ld h,d 
0d85			;    or a 
0d85			;    ld b,8 
0d85			;Sqr16_Loop: 
0d85			;    sbc hl,de 
0d85			;    jr nc,Sqr16_Skip 
0d85			;    add hl,de 
0d85			;Sqr16_Skip: 
0d85			;    ccf 
0d85			;    rl d 
0d85			;    add a,a 
0d85			;    adc hl,hl 
0d85			;    add a,a 
0d85			;    adc hl,hl 
0d85			;    djnz Sqr16_Loop 
0d85			;    ret 
0d85			; 
0d85			; 
0d85			; Divide 8-bit values 
0d85			; In: Divide E by divider C 
0d85			; Out: A = result, B = rest 
0d85			; 
0d85			Div8: 
0d85 af			    xor a 
0d86 06 08		    ld b,8 
0d88			Div8_Loop: 
0d88 cb 13		    rl e 
0d8a 17			    rla 
0d8b 91			    sub c 
0d8c 30 01		    jr nc,Div8_NoAdd 
0d8e 81			    add a,c 
0d8f			Div8_NoAdd: 
0d8f 10 f7		    djnz Div8_Loop 
0d91 47			    ld b,a 
0d92 7b			    ld a,e 
0d93 17			    rla 
0d94 2f			    cpl 
0d95 c9			    ret 
0d96			 
0d96			; 
0d96			; Multiply 8-bit value with a 16-bit value (unrolled) 
0d96			; In: Multiply A with DE 
0d96			; Out: HL = result 
0d96			; 
0d96			Mult12U: 
0d96 2e 00		    ld l,0 
0d98 87			    add a,a 
0d99 30 01		    jr nc,Mult12U_NoAdd0 
0d9b 19			    add hl,de 
0d9c			Mult12U_NoAdd0: 
0d9c 29			    add hl,hl 
0d9d 87			    add a,a 
0d9e 30 01		    jr nc,Mult12U_NoAdd1 
0da0 19			    add hl,de 
0da1			Mult12U_NoAdd1: 
0da1 29			    add hl,hl 
0da2 87			    add a,a 
0da3 30 01		    jr nc,Mult12U_NoAdd2 
0da5 19			    add hl,de 
0da6			Mult12U_NoAdd2: 
0da6 29			    add hl,hl 
0da7 87			    add a,a 
0da8 30 01		    jr nc,Mult12U_NoAdd3 
0daa 19			    add hl,de 
0dab			Mult12U_NoAdd3: 
0dab 29			    add hl,hl 
0dac 87			    add a,a 
0dad 30 01		    jr nc,Mult12U_NoAdd4 
0daf 19			    add hl,de 
0db0			Mult12U_NoAdd4: 
0db0 29			    add hl,hl 
0db1 87			    add a,a 
0db2 30 01		    jr nc,Mult12U_NoAdd5 
0db4 19			    add hl,de 
0db5			Mult12U_NoAdd5: 
0db5 29			    add hl,hl 
0db6 87			    add a,a 
0db7 30 01		    jr nc,Mult12U_NoAdd6 
0db9 19			    add hl,de 
0dba			Mult12U_NoAdd6: 
0dba 29			    add hl,hl 
0dbb 87			    add a,a 
0dbc d0			    ret nc 
0dbd 19			    add hl,de 
0dbe c9			    ret 
0dbf			 
0dbf			; 
0dbf			; Multiply 8-bit value with a 16-bit value (right rotating) 
0dbf			; In: Multiply A with DE 
0dbf			;      Put lowest value in A for most efficient calculation 
0dbf			; Out: HL = result 
0dbf			; 
0dbf			Mult12R: 
0dbf 21 00 00		    ld hl,0 
0dc2			Mult12R_Loop: 
0dc2 cb 3f		    srl a 
0dc4 30 01		    jr nc,Mult12R_NoAdd 
0dc6 19			    add hl,de 
0dc7			Mult12R_NoAdd: 
0dc7 cb 23		    sla e 
0dc9 cb 12		    rl d 
0dcb b7			    or a 
0dcc c2 c2 0d		    jp nz,Mult12R_Loop 
0dcf c9			    ret 
0dd0			 
0dd0			; 
0dd0			; Multiply 16-bit values (with 32-bit result) 
0dd0			; In: Multiply BC with DE 
0dd0			; Out: BCHL = result 
0dd0			; 
0dd0			Mult32: 
0dd0 79			    ld a,c 
0dd1 48			    ld c,b 
0dd2 21 00 00		    ld hl,0 
0dd5 06 10		    ld b,16 
0dd7			Mult32_Loop: 
0dd7 29			    add hl,hl 
0dd8 17			    rla 
0dd9 cb 11		    rl c 
0ddb 30 07		    jr nc,Mult32_NoAdd 
0ddd 19			    add hl,de 
0dde ce 00		    adc a,0 
0de0 d2 e4 0d		    jp nc,Mult32_NoAdd 
0de3 0c			    inc c 
0de4			Mult32_NoAdd: 
0de4 10 f1		    djnz Mult32_Loop 
0de6 41			    ld b,c 
0de7 4f			    ld c,a 
0de8 c9			    ret 
0de9			 
0de9			 
0de9			 
0de9			; 
0de9			; Multiply 8-bit values 
0de9			; In:  Multiply H with E 
0de9			; Out: HL = result 
0de9			; 
0de9			Mult8: 
0de9 16 00		    ld d,0 
0deb 6a			    ld l,d 
0dec 06 08		    ld b,8 
0dee			Mult8_Loop: 
0dee 29			    add hl,hl 
0def 30 01		    jr nc,Mult8_NoAdd 
0df1 19			    add hl,de 
0df2			Mult8_NoAdd: 
0df2 10 fa		    djnz Mult8_Loop 
0df4 c9			    ret 
0df5			 
0df5			 
0df5			 
0df5			 
0df5			 
0df5			 
0df5			 
0df5			 
0df5			;;http://z80-heaven.wikidot.com/math 
0df5			;;This divides DE by BC, storing the result in DE, remainder in HL 
0df5			; 
0df5			;DE_Div_BC:          ;1281-2x, x is at most 16 
0df5			;     ld a,16        ;7 
0df5			;     ld hl,0        ;10 
0df5			;     jp $+5         ;10 
0df5			;.DivLoop: 
0df5			;       add hl,bc    ;-- 
0df5			;       dec a        ;64 
0df5			;       jr z,.DivLoopEnd        ;86 
0df5			; 
0df5			;       sla e        ;128 
0df5			;       rl d         ;128 
0df5			;       adc hl,hl    ;240 
0df5			;       sbc hl,bc    ;240 
0df5			;       jr nc,.DivLoop ;23|21 
0df5			;       inc e        ;-- 
0df5			;       jp .DivLoop+1 
0df5			; 
0df5			;.DivLoopEnd: 
0df5			 
0df5			;HL_Div_C: 
0df5			;Inputs: 
0df5			;     HL is the numerator 
0df5			;     C is the denominator 
0df5			;Outputs: 
0df5			;     A is the remainder 
0df5			;     B is 0 
0df5			;     C is not changed 
0df5			;     DE is not changed 
0df5			;     HL is the quotient 
0df5			; 
0df5			;       ld b,16 
0df5			;       xor a 
0df5			;         add hl,hl 
0df5			;         rla 
0df5			;         cp c 
0df5			;         jr c,$+4 
0df5			;           inc l 
0df5			;           sub c 
0df5			;         djnz $-7 
0df5			 
0df5			; https://plutiedev.com/z80-add-8bit-to-16bit 
0df5			 
0df5			addatohl: 
0df5 85			    add   a, l    ; A = A+L 
0df6 6f			    ld    l, a    ; L = A+L 
0df7 8c			    adc   a, h    ; A = A+L+H+carry 
0df8 95			    sub   l       ; A = H+carry 
0df9 67			    ld    h, a    ; H = H+carry 
0dfa c9			ret 
0dfb			 
0dfb			addatode: 
0dfb 83			    add   a, e    ; A = A+L 
0dfc 5f			    ld    e, a    ; L = A+L 
0dfd 8a			    adc   a, d    ; A = A+L+H+carry 
0dfe 93			    sub   e       ; A = H+carry 
0dff 57			    ld    d, a    ; H = H+carry 
0e00 c9			ret 
0e01			 
0e01			 
0e01			addatobc: 
0e01 81			    add   a, c    ; A = A+L 
0e02 4f			    ld    c, a    ; L = A+L 
0e03 88			    adc   a, b    ; A = A+L+H+carry 
0e04 91			    sub   c       ; A = H+carry 
0e05 47			    ld    b, a    ; H = H+carry 
0e06 c9			ret 
0e07			 
0e07			subafromhl: 
0e07			   ; If A=0 do nothing 
0e07			    ; Otherwise flip A's sign. Since 
0e07			    ; the upper byte becomes -1, also 
0e07			    ; substract 1 from H. 
0e07 ed 44		    neg 
0e09 ca 12 0e		    jp    z, Skip 
0e0c 25			    dec   h 
0e0d			     
0e0d			    ; Now add the low byte as usual 
0e0d			    ; Two's complement takes care of 
0e0d			    ; ensuring the result is correct 
0e0d 85			    add   a, l 
0e0e 6f			    ld    l, a 
0e0f 8c			    adc   a, h 
0e10 95			    sub   l 
0e11 67			    ld    h, a 
0e12			Skip: 
0e12 c9				ret 
0e13			 
0e13			 
0e13			; compare hl and de 
0e13			; returns:  
0e13			; if hl = de, z=1, s=0, c0=0 
0e13			; if hl > de, z=0, s=0, c=0 
0e13			; if hl < de, z=0, s=1, c=1 
0e13			cmp16:	 
0e13 b7				or a 
0e14 ed 52			sbc hl,de 
0e16 e0				ret po 
0e17 7c				ld a,h 
0e18 1f				rra 
0e19 ee 40			xor 01000000B 
0e1b 37				scf 
0e1c 8f				adc a,a 
0e1d c9				ret 
0e1e			 
0e1e			 
0e1e			; test if hl contains zero   - A is destroyed 
0e1e			 
0e1e			ishlzero:    
0e1e b7				or a     ; reset flags 
0e1f 7c				ld a, h 
0e20 b5				or l        	 
0e21			 
0e21 c9				ret 
0e22			 
0e22			 
0e22			 
0e22			 
0e22			if FORTH_ENABLE_FLOATMATH 
0e22			;include "float/bbcmath.z80" 
0e22			include "float/lpfpcalc.asm" 
0e22			endif 
0e22			 
0e22			 
0e22			; eof 
0e22			 
# End of file firmware_maths.asm
0e22			include "firmware_strings.asm"   ; string handling  
0e22			 
0e22			 
0e22			; TODO string len 
0e22			; input text string, end on cr with zero term 
0e22			; a offset into frame buffer to start prompt 
0e22			; d is max length 
0e22			; e is display size TODO 
0e22			; c is current cursor position 
0e22			; hl is ptr to where string will be stored and edited directly 
0e22			 
0e22			 
0e22			; TODO check limit of buffer for new inserts 
0e22			; TODO check insert does not push beyond buffer 
0e22			; TODO scroll in a limited display area 
0e22			; TODO scroll whole screen on page wrap 
0e22			 
0e22			 
0e22			; TODO use LCD cursor? 
0e22			 
0e22			EDIT_V1: equ 0 
0e22			EDIT_V2: equ 1 
0e22			 
0e22			 
0e22			 
0e22			if EDIT_V2 
0e22			input_str: 
0e22			 
0e22 32 5e ee			    	ld (input_at_pos),a      ; save display position to start 
0e25			;		ld (input_at_cursor),a	; save draw pos of cursor relative to start 
0e25 22 61 ee				ld (input_start), hl     ; save ptr to buffer 
0e28			;		ld a, c 
0e28			;		call addatohl 
0e28			;		ld (input_ptr), hl     ; save ptr to point under the cursor 
0e28 7a					ld a,d 
0e29 32 60 ee			        ld (input_size), a       ; save length of input area 
0e2c 79					ld a, c 
0e2d 32 4f ee				ld (input_cursor),a      ; init cursor start position relative to start of string 
0e30 7b					ld a,e 
0e31 32 5f ee			        ld (input_display_size), a       ; save length of input area that is displayed TODO 
0e34			 
0e34			 
0e34					; add a trailing space to make screen refresh nicer 
0e34			 
0e34					;ld hl, (input_start) 
0e34					;push hl 
0e34					;ld a, 0 
0e34					;call strlent 
0e34					;ld a, l 
0e34					;pop hl 
0e34					;call addatohl 
0e34					;dec hl 
0e34					;ld a, ' ' 
0e34					;ld (hl), a 
0e34					;inc hl 
0e34					;ld (hl), a 
0e34					;inc hl 
0e34					;ld a, 0 
0e34					;ld (hl), a 
0e34			 
0e34			; TODO move out to cin as cursor shape is used by the 4x4 ??? 
0e34					; init cursor shape if not set by the cin routines 
0e34 21 bb eb				ld hl, cursor_shape 
0e37			if BASE_KEV 
0e37					ld a, 255 
0e37			else 
0e37 3e 23				ld a, '#' 
0e39			endif 
0e39 77					ld (hl), a 
0e3a 23					inc hl 
0e3b 3e 00				ld a, 0 
0e3d 77					ld (hl), a 
0e3e			 
0e3e 3e 09				ld a, CUR_BLINK_RATE 
0e40 32 5a ee				ld (input_cur_flash), a 
0e43 3e 01				ld a, 1 
0e45 32 59 ee				ld (input_cur_onoff),a 
0e48			.inmain:	 
0e48			 
0e48 cd 70 0f				call input_disp_ref 
0e4b			 
0e4b					; save current length of string 
0e4b			 
0e4b 2a 61 ee				ld hl, (input_start) 
0e4e 3e 00				ld a, 0 
0e50 cd 66 11				call strlent 
0e53 7d					ld a,l 
0e54 32 54 ee				ld (input_len), a 
0e57			 
0e57					;call input_disp_oncur 
0e57			 
0e57					; display current state of input buffer 
0e57			 
0e57					; clean any backspace chars 
0e57			 
0e57 3e 20				ld a, " " 
0e59 32 bb e2				ld (scratch),a 
0e5c 3e 00				ld a, 0 
0e5e 32 bc e2				ld (scratch+1),a 
0e61 3a 5e ee				ld a,(input_at_pos) 
0e64 85					add l 
0e65 11 bb e2				ld de, scratch 
0e68 cd db 0b				call str_at_display 
0e6b			 
0e6b					; pause 1ms 
0e6b			 
0e6b 3e 01				ld a, 1 
0e6d cd e5 0a				call aDelayInMS 
0e70			 
0e70			; display cursor if visible on this cycle 
0e70			 
0e70					; dec flash counter 
0e70 3a 5a ee				ld a, (input_cur_flash) 
0e73 3d					dec a 
0e74 32 5a ee				ld (input_cur_flash), a 
0e77 fe 00				cp 0 
0e79 20 0d				jr nz, .inochgstate 
0e7b			 
0e7b			 
0e7b					; reset on change of state 
0e7b 3e 09				ld a, CUR_BLINK_RATE 
0e7d 32 5a ee				ld (input_cur_flash), a 
0e80			 
0e80					; change state 
0e80 3a 59 ee				ld a,(input_cur_onoff) 
0e83 ed 44				neg 
0e85 32 59 ee				ld (input_cur_onoff),a 
0e88			 
0e88			 
0e88			 
0e88			 
0e88					; TODO is cursor visible? 
0e88					; TODO if so then over write the char at curspos pos with the cursor shape 
0e88			 
0e88								 
0e88			 
0e88			.inochgstate: 
0e88 3a 59 ee				ld a,(input_cur_onoff) 
0e8b fe ff				cp 255 
0e8d 28 0e				jr z, .skipcursor 
0e8f 3a 5e ee				ld a, (input_at_pos) 
0e92 47					ld b, a 
0e93 3a 4f ee				ld a, (input_cursor) 
0e96 80					add b 
0e97 11 bb eb				ld de, cursor_shape 
0e9a					 
0e9a cd db 0b				call str_at_display 
0e9d			 
0e9d			.skipcursor: 
0e9d				if DEBUG_INPUTV2 
0e9d			 
0e9d					ld a,(input_at_pos) 
0e9d					ld hl, LFSRSeed 
0e9d					call hexout 
0e9d					ld a, (input_cursor) 
0e9d					ld hl, LFSRSeed+2 
0e9d					call hexout 
0e9d					ld a,(input_size) 
0e9d					ld hl, LFSRSeed+4 
0e9d					call hexout 
0e9d			 
0e9d					ld a,(input_cur_onoff) 
0e9d					ld hl, LFSRSeed+6 
0e9d					call hexout 
0e9d			 
0e9d					ld a,(input_cur_flash) 
0e9d					ld hl, LFSRSeed+8 
0e9d					call hexout 
0e9d			 
0e9d					ld a,(input_len) 
0e9d					ld hl, LFSRSeed+10 
0e9d					call hexout 
0e9d					ld hl, LFSRSeed+12 
0e9d					ld a, 0 
0e9d					ld (hl),a 
0e9d					ld a, display_row_4 
0e9d					ld de, LFSRSeed 
0e9d					call str_at_display 
0e9d				endif 
0e9d cd eb 0b				call update_display 
0ea0			 
0ea0					; TODO keyboard processing 
0ea0			 
0ea0			if BASE_CPM 
0ea0 cd c1 5e				call cin_wait 
0ea3			else 
0ea3					call cin    ; _wait 
0ea3			endif 
0ea3 fe 00				cp 0 
0ea5 ca 48 0e				jp z, .inmain 
0ea8			 
0ea8 fe 0b				cp KEY_LEFT    ; cursor left 
0eaa ca 62 0f				jp z, input_left 
0ead				 
0ead fe 0c				cp KEY_RIGHT      ; cursor right 
0eaf ca 69 0f				jp z, input_right 
0eb2			 
0eb2 fe 0d				cp KEY_CR 
0eb4 c8					ret z 
0eb5			 
0eb5 fe 08				cp KEY_BS 
0eb7 ca d7 0f				jp z, input_delchar 
0eba			 
0eba fe 06				cp KEY_NEXTWORD 
0ebc ca e3 0e				jp z, input_nxtword 
0ebf			 
0ebf fe 07				cp KEY_PREVWORD 
0ec1 ca 0a 0f				jp z, input_prvword 
0ec4			 
0ec4 fe 0e				cp KEY_HOME    ; jump to start of line 
0ec6 20 08				jr nz, .ikh 
0ec8 3e 00				ld a, 0 
0eca 32 4f ee				ld (input_cursor), a 
0ecd ca 48 0e				jp z, .inmain 
0ed0			.ikh: 
0ed0			 
0ed0 fe 0f				cp KEY_END     ; jump to end of line 
0ed2 20 09				jr nz, .ike 
0ed4 3a 54 ee				ld a, (input_len) 
0ed7 32 4f ee				ld (input_cursor),a 
0eda ca 48 0e				jp z, .inmain 
0edd			.ike: 
0edd fe 05			        cp KEY_UP      ; recall last command 
0edf c8					ret z 
0ee0			;jr nz, .irec 
0ee0			; TODO next word 
0ee0			; TODO prev word 
0ee0			;  
0ee0			; 
0ee0			;	ld hl, scratch 
0ee0			;	ld de, os_last_cmd 
0ee0			;	call strcpy 
0ee0			;		jp  .inmain 
0ee0			.irec: 
0ee0			;		jr .instr1 
0ee0			 
0ee0			 
0ee0			 
0ee0					; if any keys not intercepted by above but are special keys like function keys then return them to the program 
0ee0			 
0ee0			; TODO return if any special keys are given 
0ee0			;		ld l, a 
0ee0			;		ld a, 28 ; KEY_F12   ; 27 
0ee0			;		sub l 
0ee0			;		ret m 
0ee0			;		ld a, l 
0ee0					; if no special key then insert as a char 
0ee0			 
0ee0 c3 a9 0f				jp input_inschr 
0ee3			 
0ee3				 
0ee3			input_nxtword: 
0ee3				; jump to start next word after the cursor 
0ee3			 
0ee3			.insknwn:	 
0ee3 cd 9f 0f				call input_curptr	 
0ee6 7e					ld a,(hl)	 
0ee7 fe 00				cp 0 
0ee9 ca 48 0e				jp z, .inmain    ; end of string 
0eec			 
0eec			; if we are on a word, then move off of it 
0eec			 
0eec fe 20				cp ' ' 
0eee 28 06				jr z, .inspace     ; we are on space so eat the space until we hit non-space 
0ef0 21 4f ee				ld hl, input_cursor 
0ef3 34					inc (hl) 
0ef4 18 ed				jr .insknwn 
0ef6			 
0ef6			.inspace: 
0ef6			 
0ef6 cd 9f 0f				call input_curptr	 
0ef9 7e					ld a,(hl)	 
0efa fe 00				cp 0 
0efc ca 48 0e				jp z, .inmain    ; end of string 
0eff			 
0eff			; if we are on a word, then move off of it 
0eff			 
0eff fe 20				cp ' ' 
0f01 c2 48 0e				jp nz, .inmain     ; we are on non space so at next word 
0f04 21 4f ee				ld hl, input_cursor 
0f07 34					inc (hl) 
0f08 18 ec				jr .inspace 
0f0a			 
0f0a			 
0f0a			 
0f0a			 
0f0a			input_prvword: 
0f0a				; jump to the start of previous word before the cursor 
0f0a			 
0f0a			; where are we to start with currently? 
0f0a			 
0f0a cd 9f 0f				call input_curptr	 
0f0d 7e					ld a, (hl) 
0f0e fe 20				cp ' ' 
0f10 28 1d				jr z, .inspacep     ; we are on space so eat the space until we hit non-space 
0f12			 
0f12			 
0f12			 
0f12			.inskpwn:	 
0f12 3a 4f ee				ld a,(input_cursor) 
0f15 fe 00				cp 0 
0f17 ca 48 0e				jp z, .inmain    ; start of string 
0f1a			 
0f1a			;if we are on a word, then move off of it 
0f1a			 
0f1a cd 9f 0f				call input_curptr	 
0f1d 7e					ld a, (hl) 
0f1e fe 20				cp ' ' 
0f20 28 06				jr z, .iwstart     ; we are on space so eat the space until we hit non-space 
0f22					;jp z, .inmain    ; start of string 
0f22 21 4f ee				ld hl, input_cursor 
0f25 35					dec (hl) 
0f26 18 ea				jr .inskpwn 
0f28			.iwstart: 
0f28 21 4f ee				ld hl, input_cursor 
0f2b 34					inc (hl) 
0f2c c3 48 0e				jp .inmain 
0f2f					 
0f2f			 
0f2f			.inspacep: 
0f2f			 
0f2f					;jp .inmain    ; start of string 
0f2f			 
0f2f			 
0f2f			 
0f2f 3a 4f ee				ld a,(input_cursor) 
0f32 fe 00				cp 0 
0f34 ca 48 0e				jp z, .inmain    ; start of string 
0f37			 
0f37			; if we are on a word, then move off of it 
0f37			 
0f37 cd 9f 0f				call input_curptr	 
0f3a 7e					ld a, (hl) 
0f3b fe 20				cp ' ' 
0f3d c2 46 0f				jp nz, .incharp     ; we are on non space so at end of prev word 
0f40 21 4f ee				ld hl, input_cursor 
0f43 35					dec (hl) 
0f44 18 e9				jr .inspacep 
0f46			 
0f46			 
0f46			.incharp:	 
0f46					; eat the word to get to the start 
0f46 3a 4f ee				ld a,(input_cursor) 
0f49 fe 00				cp 0 
0f4b ca 48 0e				jp z, .inmain    ; start of string 
0f4e			 
0f4e			; if we are on a word, then move off of it 
0f4e			 
0f4e cd 9f 0f				call input_curptr	 
0f51 7e					ld a, (hl) 
0f52 fe 20				cp ' ' 
0f54 28 06				jr z, .ipwordst     ; we are on space so eat the space until we hit non-space 
0f56 21 4f ee				ld hl, input_cursor 
0f59 35					dec (hl) 
0f5a 18 ea				jr .incharp 
0f5c			.ipwordst: 
0f5c					; at space before the prev word so reposition over it 
0f5c 21 4f ee				ld hl, input_cursor 
0f5f 34					inc (hl) 
0f60 18 b0				jr .inskpwn 
0f62					 
0f62			 
0f62			 
0f62			input_left: 
0f62				; move cursor left 
0f62 21 4f ee			ld hl, input_cursor 
0f65 35				dec (hl) 
0f66			;	cp 0 
0f66			;	jp z, .inmain    ; ignore left as at the start of the string 
0f66 c3 48 0e			jp .inmain 
0f69			 
0f69			input_right: 
0f69				; move cursor right 
0f69				 
0f69				;ld a, (input_size) 
0f69				;ld b, a 
0f69 21 4f ee			ld hl, input_cursor 
0f6c 34				inc (hl) 
0f6d				;dec b 
0f6d				;cp 0 
0f6d				;jp z, .inmain   ; ignore as at end of the string buffer 
0f6d				;ld a, b 
0f6d				;inc a 
0f6d				;ld (input_cursor), a 
0f6d c3 48 0e			jp .inmain 
0f70			 
0f70			 
0f70			 
0f70			input_disp_ref: 
0f70				; display the text from start of buffer (ie full refresh) 
0f70 3a 5e ee			ld a, (input_at_pos) 
0f73 2a 61 ee			ld hl,(input_start) 
0f76 eb				ex de, hl 
0f77 cd db 0b			call str_at_display  
0f7a c9				ret 
0f7b			input_disp_oncur: 
0f7b				; display the text from cursor position to end of buffer 
0f7b				; TODO position start of string at cursor position on screen 
0f7b				; TODO draw from that point on 
0f7b 3a 4f ee			ld a, (input_cursor) 
0f7e 47				ld b, a 
0f7f 3a 5e ee			ld a, (input_at_pos) 
0f82 80				add b 
0f83 48				ld c, b     ; save a 
0f84 78				ld a, b     ; inc string start for cursor 
0f85 2a 61 ee			ld hl,(input_start) 
0f88 cd f5 0d			call addatohl 
0f8b eb				ex de, hl 
0f8c 79				ld a, c 
0f8d cd db 0b			call str_at_display  
0f90 c9				ret 
0f91			 
0f91			input_nxtw: 
0f91				; Find next word 
0f91 c9				ret 
0f92			 
0f92			input_prvw: 
0f92				; Find previous word 
0f92 c9				ret 
0f93			 
0f93			input_lenrem:   
0f93				; Calculate the length of string remaining from current cursor 
0f93				; position to end of buffer (exc null term) 
0f93				 
0f93 3a 4f ee			ld a, (input_cursor) 
0f96 4f				ld c, a 
0f97 3a 60 ee			ld a, (input_size) 
0f9a 91				sub c 
0f9b 06 00			ld b, 0 
0f9d 0d				dec c 
0f9e c9				ret	 
0f9f			 
0f9f			input_curptr: 
0f9f				; calc address of the character under the cursor 
0f9f				 
0f9f 2a 61 ee			ld hl, (input_start) 
0fa2 3a 4f ee			ld a, (input_cursor) 
0fa5 cd f5 0d			call addatohl 
0fa8 c9				ret 
0fa9			 
0fa9			input_inschr: 
0fa9				; Insert char at cursor position 
0fa9 f5				push af   ; save char 
0faa				;call input_lenrem    ; get bc length of remaining string 
0faa			 
0faa				 
0faa cd 9f 0f			call input_curptr 
0fad			;	ld hl, (input_start) 
0fad			;	ld a, (input_cursor) 
0fad			;	call addatohl 
0fad				;push hl   ; save to come back to 
0fad			 
0fad				; shift everything up one to end of buffer 
0fad			 
0fad				;push hl 
0fad				;dec de 
0fad				;inc de 
0fad			;	ldir 
0fad				 
0fad				;pop hl 
0fad			 
0fad				; are we adding to the end of line? 
0fad			 
0fad 3a 4f ee			ld a, (input_cursor) 
0fb0 47				ld b, a 
0fb1 3a 54 ee			ld a, (input_len) 
0fb4 b8				cp b 
0fb5 20 09			jr nz, .insmid   ; no, insert in middle of text 
0fb7			 
0fb7				; tack on the end of the line 
0fb7 f1				pop af 
0fb8 77				ld (hl), a   ; save new char 
0fb9 23				inc hl 
0fba 3e 00			ld a, 0 
0fbc 77				ld (hl), a 
0fbd c3 69 0f			jp input_right 
0fc0				 
0fc0			.insmid: 
0fc0				; hl has insertion point so move everything up one to allow for insertion 
0fc0				;call input_shiftright 
0fc0 f1				pop af 
0fc1			 
0fc1			.shufinsmid: 
0fc1 47				ld b, a     ; b contains new char, c prev char at this position  
0fc2 7e				ld a, (hl) 
0fc3			 
0fc3 fe 00			cp 0    ; at end of string need to then dump new char and add term 
0fc5 28 07			jr z, .endinsmid 
0fc7 4f				ld c, a 
0fc8 78				ld a, b 
0fc9 77				ld (hl), a 
0fca 23				inc hl 
0fcb 79				ld a, c 
0fcc 18 f3			jr .shufinsmid 
0fce				 
0fce			 
0fce			 
0fce			 
0fce			.endinsmid: 
0fce 78				ld a, b 
0fcf 77				ld (hl), a 
0fd0 23				inc hl 
0fd1 3e 00			ld a, 0 
0fd3 77				ld (hl), a 
0fd4			 
0fd4			 
0fd4			;	ld (hl), a   ; save new char 
0fd4			 
0fd4 c3 69 0f			jp input_right 
0fd7			 
0fd7			;input_shiftright: 
0fd7			;	; shift text right at cursor, hl has shift start 
0fd7			;	push hl 
0fd7			;	push de 
0fd7			;	push bc 
0fd7			; 
0fd7			; 
0fd7			;	; move to end of string past zero term 
0fd7			;	ld hl,(input_start) 
0fd7			;	ld a, (input_len) 
0fd7			;	call addatohl 
0fd7			;	inc hl 
0fd7			;;	inc hl 
0fd7			;;	inc hl 
0fd7			;	ld a, 0 
0fd7			;	ld (hl), a 
0fd7			;;	dec hl 
0fd7			;	 
0fd7			;;	ld (hl), a 
0fd7			;;	dec hl 
0fd7			; 
0fd7			;	push hl 
0fd7			;	pop de 
0fd7			;	inc de 
0fd7			;	 
0fd7			; 
0fd7			;;	ld hl,(input_start) 
0fd7			;;	ld a, (input_cursor) 
0fd7			;;	call addatohl 
0fd7			; 
0fd7			; 
0fd7			;	; calc how many bytes from cursor pos to end of string we need to shift 
0fd7			;	call input_lenrem    ; get bc length of remaining string 
0fd7			;	;ld a, (input_cursor) 
0fd7			;	;ld c, a 
0fd7			;	ld a, (input_len) 
0fd7			;	cp 2 
0fd7			;	jr z, .iskipzero	 
0fd7			;	;sub c 
0fd7			;	;inc a 
0fd7			;	;ld c, a 
0fd7			;	;ld b, 0 
0fd7			;	inc c 
0fd7			;	inc c 
0fd7			;	; move data 
0fd7			;	lddr 
0fd7			;.iskipzero: 
0fd7			; 
0fd7			;	pop bc 
0fd7			;	pop de 
0fd7			;	pop hl 
0fd7			;	ret	 
0fd7			 
0fd7			input_delchar: 
0fd7				; Delete char at cursor position 
0fd7 cd 93 0f			call input_lenrem    ; get bc length of remaining string 
0fda 2a 61 ee			ld hl, (input_start) 
0fdd 3a 4f ee			ld a, (input_cursor) 
0fe0 cd f5 0d			call addatohl 
0fe3			 
0fe3 e5				push hl 
0fe4 d1				pop de 
0fe5 1b				dec de 
0fe6			 
0fe6			.dl:	 
0fe6 ed a0			ldi  
0fe8 7e				ld a, (hl) 
0fe9 fe 00			cp 0 
0feb 28 02			jr z, .dldone 
0fed 18 f7			jr .dl 
0fef			.dldone: 
0fef ed a0			ldi 
0ff1			 
0ff1 c3 62 0f			jp input_left 
0ff4			 
0ff4			 
0ff4			endif 
0ff4			 
0ff4			 
0ff4			 
0ff4			if EDIT_V1 
0ff4			input_str: 
0ff4			 
0ff4				    	ld (input_at_pos),a      ; save display position to start 
0ff4					add c 
0ff4					ld (input_at_cursor),a	; save draw pos of cursor 
0ff4					ld (input_start), hl     ; save ptr to buffer 
0ff4					ld a, c 
0ff4					call addatohl 
0ff4					ld (input_ptr), hl     ; save ptr to point under the cursor 
0ff4					ld a,d 
0ff4				        ld (input_size), a       ; save length of input area 
0ff4					ld a, c 
0ff4					ld (input_cursor),a      ; init cursor start position  
0ff4					ld a,e 
0ff4				        ld (input_display_size), a       ; save length of input area that is displayed TODO 
0ff4					 
0ff4					 
0ff4			 
0ff4			;		ld a,(input_ptr) 
0ff4			;		ld (input_under_cursor),a 	; save what is under the cursor 
0ff4			 
0ff4			; TODO move out to cin as cursor shape is used by the 4x4 ??? 
0ff4					; init cursor shape if not set by the cin routines 
0ff4					ld hl, cursor_shape 
0ff4			if BASE_KEV 
0ff4					ld a, 255 
0ff4			else 
0ff4					ld a, '#' 
0ff4			endif 
0ff4					ld (hl), a 
0ff4					inc hl 
0ff4					ld a, 0 
0ff4					ld (hl), a 
0ff4			 
0ff4					ld a, CUR_BLINK_RATE 
0ff4					ld (input_cur_flash), a 
0ff4					ld a, 1 
0ff4					ld (input_cur_onoff),a 
0ff4			 
0ff4			;	if DEBUG_INPUT 
0ff4			;		push af 
0ff4			;		ld a, 'I' 
0ff4			;		ld (debug_mark),a 
0ff4			;		pop af 
0ff4			;		CALLMONITOR 
0ff4			;	endif 
0ff4			.is1:		; main entry loop 
0ff4			 
0ff4			 
0ff4			 
0ff4					; pause 1ms 
0ff4			 
0ff4					ld a, 1 
0ff4					call aDelayInMS 
0ff4			 
0ff4					; dec flash counter 
0ff4					ld a, (input_cur_flash) 
0ff4					dec a 
0ff4					ld (input_cur_flash), a 
0ff4					cp 0 
0ff4					jr nz, .nochgstate 
0ff4			 
0ff4			 
0ff4					; change state 
0ff4					ld a,(input_cur_onoff) 
0ff4					neg 
0ff4					ld (input_cur_onoff),a 
0ff4			 
0ff4			 
0ff4					; reset on change of state 
0ff4					ld a, CUR_BLINK_RATE 
0ff4					ld (input_cur_flash), a 
0ff4			 
0ff4			.nochgstate: 
0ff4					 
0ff4					 
0ff4			 
0ff4					; display cursor  
0ff4			 
0ff4			;		ld hl, (input_start) 
0ff4			;		ld a, (input_cursor) 
0ff4			;		call addatohl 
0ff4			 
0ff4					; get char under cursor and replace with cursor 
0ff4			ld hl, (input_ptr) 
0ff4			;		ld a, (hl) 
0ff4			;		ld (input_under_cursor),a 
0ff4			;		ld a, '_' 
0ff4			;		ld (hl), a 
0ff4			 
0ff4					; display string 
0ff4			 
0ff4					ld de, (input_start) 
0ff4					ld a, (input_at_pos) 
0ff4					call str_at_display 
0ff4			;	        call update_display 
0ff4			 
0ff4					; find place to put the cursor 
0ff4			;		add h 
0ff4			;		ld l, display_row_1 
0ff4			;		sub l 
0ff4			; (input_at_pos) 
0ff4					;ld c, a 
0ff4			;		ld a, (input_cursor) 
0ff4			;		ld l, (input_at_pos) 
0ff4			;		;ld b, h 
0ff4			;		add l 
0ff4			;		ld (input_at_cursor),a 
0ff4					;ld l,h 
0ff4			 
0ff4			;		ld h, 0 
0ff4			;		ld l,(input_at_pos) 
0ff4			;		ld a, (input_cursor) 
0ff4			;		call addatohl 
0ff4			;		ld a, 074H-19			; TODO BUG I dont know why offset is showing 74H 
0ff4			;		call subafromhl 
0ff4			;		ld a,l 
0ff4			;		ld (input_at_cursor), a 
0ff4			 
0ff4				if DEBUG_INPUT 
0ff4					ld a, (hardware_diag) 
0ff4					cp 0 
0ff4					jr z, .skip_input_diag 
0ff4			 
0ff4					ld a,(input_at_pos) 
0ff4					ld hl, LFSRSeed 
0ff4					call hexout 
0ff4					ld a, (input_cursor) 
0ff4					ld hl, LFSRSeed+2 
0ff4					call hexout 
0ff4					ld a,(input_at_cursor) 
0ff4					ld hl, LFSRSeed+4 
0ff4					call hexout 
0ff4			 
0ff4					ld a,(input_cur_onoff) 
0ff4					ld hl, LFSRSeed+6 
0ff4					call hexout 
0ff4			 
0ff4					ld a,(input_cur_flash) 
0ff4					ld hl, LFSRSeed+8 
0ff4					call hexout 
0ff4			 
0ff4					ld a,(input_len) 
0ff4					ld hl, LFSRSeed+10 
0ff4					call hexout 
0ff4					ld hl, LFSRSeed+12 
0ff4					ld a, 0 
0ff4					ld (hl),a 
0ff4					ld a, display_row_4 
0ff4					ld de, LFSRSeed 
0ff4					call str_at_display 
0ff4					.skip_input_diag: 
0ff4				endif 
0ff4			 
0ff4					; decide on if we are showing the cursor this time round 
0ff4			 
0ff4					ld a, (input_cur_onoff) 
0ff4					cp 255 
0ff4					jr z, .skipcur 
0ff4			 
0ff4			 
0ff4					ld a,(input_at_cursor) 
0ff4					ld de, cursor_shape 
0ff4					call str_at_display 
0ff4			 
0ff4					; save length of current input string 
0ff4					ld hl, (input_start) 
0ff4					ld a, 0 
0ff4					call strlent 
0ff4					ld a,l 
0ff4					ld (input_len),a 
0ff4			 
0ff4			.skipcur: 
0ff4			 
0ff4				        call update_display 
0ff4					 
0ff4			 
0ff4			 
0ff4					; wait 
0ff4				 
0ff4					; TODO loop without wait to flash the cursor and char under cursor	 
0ff4					call cin    ; _wait 
0ff4			 
0ff4					cp 0 
0ff4					jp z, .is1 
0ff4			 
0ff4					; get ptr to char to input into 
0ff4			 
0ff4					ld c,a 
0ff4					ld hl, (input_start) 
0ff4					ld a, (input_cursor) 
0ff4					call addatohl 
0ff4					ld (input_ptr), hl 
0ff4					ld a,c 
0ff4			 
0ff4					; replace char under cursor 
0ff4			 
0ff4			;		ld hl, (input_ptr) 
0ff4			;		ld a, (input_under_cursor) 	; get what is under the cursor 
0ff4			;		ld (hl), a 
0ff4			 
0ff4			;	if DEBUG_INPUT 
0ff4			;		push af 
0ff4			;		ld a, 'i' 
0ff4			;		ld (debug_mark),a 
0ff4			;		pop af 
0ff4			;		CALLMONITOR 
0ff4			;	endif 
0ff4					cp KEY_HOME 
0ff4					jr nz, .iske 
0ff4			 
0ff4					ld a, (input_at_pos) 
0ff4					ld (input_at_cursor),a 
0ff4					ld a, 0 
0ff4					ld (input_cursor), a 
0ff4					jp .is1 
0ff4					 
0ff4			.iske:		cp KEY_END 
0ff4					jr nz, .isknw 
0ff4					jp .is1 
0ff4			 
0ff4			.isknw:		cp KEY_NEXTWORD 
0ff4					jr nz, .iskpw 
0ff4			 
0ff4			.isknwm:	ld hl, (input_ptr) 
0ff4					ld a,(hl)	 
0ff4					cp 0 
0ff4					jp z, .is1    ; end of string 
0ff4					cp ' ' 
0ff4					jp z, .is1    ; end of word 
0ff4					inc hl 
0ff4					ld (input_ptr), hl 
0ff4					ld a, (input_at_cursor) 
0ff4					inc a 
0ff4					ld (input_at_cursor), a 
0ff4					jr .isknwm 
0ff4			 
0ff4			.iskpw:		cp KEY_PREVWORD 
0ff4					jr nz, .iskl 
0ff4			.iskpwm:	 
0ff4					ld hl, (input_ptr) 
0ff4					ld a,(hl)	 
0ff4					cp 0  
0ff4					jp z, .is1    ; end of string 
0ff4					cp ' ' 
0ff4					jp z, .is1    ; end of word 
0ff4					dec hl 
0ff4					ld (input_ptr), hl 
0ff4					ld a, (input_at_cursor) 
0ff4					dec a 
0ff4					ld (input_at_cursor), a 
0ff4					jr .iskpwm 
0ff4			 
0ff4			 
0ff4			.iskl:		cp KEY_LEFT 
0ff4					jr nz, .isk1 
0ff4			 
0ff4					ld a, (input_cursor) 
0ff4			 
0ff4					cp 0 
0ff4					jp z, .is1 		; at start of line to ignore  
0ff4			 
0ff4					dec  a 		; TODO check underflow 
0ff4					ld (input_cursor), a 
0ff4			 
0ff4					ld hl, (input_ptr) 
0ff4					dec hl 
0ff4					ld (input_ptr), hl 
0ff4					 
0ff4					ld a, (input_at_cursor) 
0ff4					dec a 
0ff4					ld (input_at_cursor), a 
0ff4			 
0ff4					ld a, 1		; show cursor moving 
0ff4					ld (input_cur_onoff),a 
0ff4					ld a, CUR_BLINK_RATE 
0ff4					ld (input_cur_flash), a 
0ff4			 
0ff4					jp .is1 
0ff4			 
0ff4			.isk1:		cp KEY_RIGHT 
0ff4					jr nz, .isk2 
0ff4			 
0ff4					ld a,(input_len)		; TODO BUG why cant i load e direct? 
0ff4					ld e,a 
0ff4					ld a, (input_cursor) 
0ff4					cp e 
0ff4					jp z, .is1		; at the end of string so dont go right 
0ff4			 
0ff4					inc  a 		; TODO check overflow 
0ff4					ld (input_cursor), a 
0ff4			 
0ff4					ld a, (input_at_cursor) 
0ff4					inc a 
0ff4					ld (input_at_cursor), a 
0ff4			 
0ff4					ld hl, (input_ptr) 
0ff4					inc hl 
0ff4					ld (input_ptr), hl 
0ff4			 
0ff4					ld a, 1		; show cursor moving 
0ff4					ld (input_cur_onoff),a 
0ff4					ld a, CUR_BLINK_RATE 
0ff4					ld (input_cur_flash), a 
0ff4			 
0ff4					jp .is1 
0ff4			 
0ff4			.isk2:		cp KEY_UP 
0ff4			 
0ff4					jr nz, .isk3 
0ff4			 
0ff4					; swap last command with the current on 
0ff4			 
0ff4					; move cursor to start of string 
0ff4					ld hl, (input_start) 
0ff4					ld (input_ptr), hl 
0ff4			 
0ff4					ld a, (input_at_pos) 
0ff4					ld (input_at_cursor), a 
0ff4			 
0ff4					ld a, 0 
0ff4					ld (input_cursor), a 
0ff4					 
0ff4					; swap input and last command buffers 
0ff4			 
0ff4					ld hl, os_cli_cmd 
0ff4					ld de, os_last_cmd 
0ff4					ld b, 255 
0ff4			.swap1:		ld a, (hl) 
0ff4					ld c,a 
0ff4					ld a, (de) 
0ff4					ld (hl), a 
0ff4					ld a,c 
0ff4					ld (de),a 
0ff4					inc hl 
0ff4					inc de 
0ff4					djnz .swap1 
0ff4			 
0ff4			 
0ff4			 
0ff4			 
0ff4			 
0ff4					jp .is1 
0ff4			 
0ff4			.isk3:		cp KEY_BS 
0ff4					jr nz, .isk4 
0ff4			 
0ff4					ld a, (input_cursor) 
0ff4			 
0ff4					cp 0 
0ff4					jp z, .is1 		; at start of line to ignore  
0ff4			 
0ff4					dec  a 		; TODO check underflow 
0ff4					ld (input_cursor), a 
0ff4			 
0ff4					; hl is source 
0ff4					; de needs to be source - 1 
0ff4			 
0ff4			;		ld a, 0 
0ff4			;		dec hl 
0ff4			;		ld (hl), a 
0ff4			 
0ff4					ld hl, (input_ptr) 
0ff4					dec hl 
0ff4					ld (input_ptr), hl 
0ff4			 
0ff4					; shift all data 
0ff4			 
0ff4					push hl 
0ff4					inc hl 
0ff4					pop de 
0ff4					ld a, (input_len)		; TODO BUG WAS ld c, (input... 
0ff4					ld c,a 
0ff4					ld b,0 
0ff4					ldir  
0ff4			 
0ff4			 
0ff4			 
0ff4			 
0ff4					ld a, (input_at_cursor) 
0ff4					dec a 
0ff4					ld (input_at_cursor), a 
0ff4			 
0ff4			 
0ff4					ld a, 1		; show cursor moving 
0ff4					ld (input_cur_onoff),a 
0ff4					ld a, CUR_BLINK_RATE 
0ff4					ld (input_cur_flash), a 
0ff4			 
0ff4					; remove char 
0ff4					ld a, (input_at_cursor) 
0ff4					inc a 
0ff4					ld de,.iblank 
0ff4					call str_at_display 
0ff4			 
0ff4					jp .is1 
0ff4			 
0ff4			.isk4:		cp KEY_CR 
0ff4					jr z, .endinput 
0ff4			 
0ff4					; else add the key press to the end 
0ff4			 
0ff4					ld c, a			; save key pressed 
0ff4			 
0ff4					ld a,(hl)		; get what is currently under char 
0ff4			 
0ff4					cp 0			; we are at the end of the string 
0ff4					jr nz, .onchar 
0ff4					 
0ff4					; add a char to the end of the string 
0ff4				 
0ff4					ld (hl),c 
0ff4					inc hl 
0ff4			;		ld a,' ' 
0ff4			;		ld (hl),a 
0ff4			;		inc hl 
0ff4					ld a,0 
0ff4					ld (hl),a 
0ff4					dec hl 
0ff4			 
0ff4					ld a, (input_cursor) 
0ff4					inc a				; TODO check max string length and scroll  
0ff4					ld (input_cursor), a		; inc cursor pos 
0ff4							 
0ff4					ld a, (input_at_cursor) 
0ff4					inc a 
0ff4					ld (input_at_cursor), a 
0ff4			 
0ff4					ld hl, (input_ptr) 
0ff4					inc hl 
0ff4					ld (input_ptr), hl 
0ff4			 
0ff4					ld hl, (input_ptr) 
0ff4					inc hl 
0ff4					ld (input_ptr), hl 
0ff4			;	if DEBUG_INPUT 
0ff4			;		push af 
0ff4			;		ld a, '+' 
0ff4			;		ld (debug_mark),a 
0ff4			;		pop af 
0ff4			;		CALLMONITOR 
0ff4			;	endif 
0ff4					ld a, 1		; show cursor moving 
0ff4					ld (input_cur_onoff),a 
0ff4					ld a, CUR_BLINK_RATE 
0ff4					ld (input_cur_flash), a 
0ff4					jp .is1 
0ff4					 
0ff4			 
0ff4			 
0ff4					; if on a char then insert 
0ff4			.onchar: 
0ff4			 
0ff4					; TODO over flow check: make sure insert does not blow out buffer 
0ff4			 
0ff4					; need to do some maths to use lddr 
0ff4			 
0ff4					push hl   ; save char pos 
0ff4					push bc 
0ff4			 
0ff4					ld hl, (input_start) 
0ff4					ld a, (input_len) 
0ff4					call addatohl  		; end of string 
0ff4					inc hl 
0ff4					inc hl		; past zero term 
0ff4					push hl 
0ff4					inc hl 
0ff4					push hl  
0ff4			 
0ff4								; start and end of lddr set, now how much to move? 
0ff4			 
0ff4							 
0ff4					ld a, (input_cursor)		; BUG TODO why cant i load directly into b??? 
0ff4					ld b,a 
0ff4					ld a,(input_len) 
0ff4					ld e,a 
0ff4					sub b 
0ff4					inc a		;?? 
0ff4					inc a		;?? 
0ff4					inc a		;?? 
0ff4			 
0ff4					ld b,0 
0ff4					ld c,a 
0ff4			 
0ff4				if DEBUG_INPUT 
0ff4					push af 
0ff4					ld a, 'i' 
0ff4					ld (debug_mark),a 
0ff4					pop af 
0ff4			;		CALLMONITOR 
0ff4				endif 
0ff4					pop de 
0ff4					pop hl 
0ff4				if DEBUG_INPUT 
0ff4					push af 
0ff4					ld a, 'I' 
0ff4					ld (debug_mark),a 
0ff4					pop af 
0ff4			;		CALLMONITOR 
0ff4				endif 
0ff4					lddr 
0ff4				 
0ff4			 
0ff4			 
0ff4					; TODO have a key for insert/overwrite mode???? 
0ff4					pop bc 
0ff4					pop hl 
0ff4					ld (hl), c		; otherwise overwrite current char 
0ff4					 
0ff4			 
0ff4			 
0ff4			 
0ff4					ld a, (input_cursor) 
0ff4					inc  a 		; TODO check overflow 
0ff4					ld (input_cursor), a 
0ff4			 
0ff4					ld a, (input_at_cursor) 
0ff4					inc a 
0ff4					ld (input_at_cursor), a 
0ff4			 
0ff4					jp .is1 
0ff4			 
0ff4			.endinput:	; TODO look for end of string 
0ff4			 
0ff4					; add trailing space for end of token 
0ff4			 
0ff4					ld hl, (input_start) 
0ff4					ld a,(input_len) 
0ff4					call addatohl 
0ff4					ld a, ' ' 
0ff4					ld (hl),a 
0ff4					; TODO eof of parse marker 
0ff4			 
0ff4					inc hl 
0ff4					ld a, 0 
0ff4					ld (hl),a 
0ff4			 
0ff4			 
0ff4					ret 
0ff4			 
0ff4			.iblank: db " ",0 
0ff4			 
0ff4			 
0ff4			input_str_prev:	ld (input_at_pos), a 
0ff4					ld (input_start), hl 
0ff4					ld a,1			; add cursor 
0ff4					ld (hl),a 
0ff4					inc hl 
0ff4					ld a,0 
0ff4					ld (hl),a 
0ff4					ld (input_ptr), hl 
0ff4					ld a,d 
0ff4					ld (input_size), a 
0ff4					ld a,0 
0ff4					ld (input_cursor),a 
0ff4			.instr1:	 
0ff4			 
0ff4					; TODO do block cursor 
0ff4					; TODO switch cursor depending on the modifer key 
0ff4			 
0ff4					; update cursor shape change on key hold 
0ff4			 
0ff4					ld hl, (input_ptr) 
0ff4					dec hl 
0ff4					ld a,(cursor_shape) 
0ff4					ld (hl), a 
0ff4			 
0ff4					; display entered text 
0ff4					ld a,(input_at_pos) 
0ff4			            	CALL fLCD_Pos       ;Position cursor to location in A 
0ff4			            	LD   de, (input_start) 
0ff4			            	CALL fLCD_Str       ;Display string pointed to by DE 
0ff4			 
0ff4					call cin 
0ff4					cp 0 
0ff4					jr z, .instr1 
0ff4			 
0ff4					; proecess keyboard controls first 
0ff4			 
0ff4					ld hl,(input_ptr) 
0ff4			 
0ff4					cp KEY_CR	 ; pressing enter ends input 
0ff4					jr z, .instrcr 
0ff4			 
0ff4					cp KEY_BS 	; back space 
0ff4					jr nz, .instr2 
0ff4					; process back space 
0ff4			 
0ff4					; TODO stop back space if at start of string 
0ff4					dec hl 
0ff4					dec hl ; to over write cursor 
0ff4					ld a,(cursor_shape) 
0ff4					;ld a,0 
0ff4					ld (hl),a 
0ff4					inc hl 
0ff4					ld a," " 
0ff4					ld (hl),a 
0ff4					ld (input_ptr),hl 
0ff4					 
0ff4			 
0ff4					jr .instr1 
0ff4			 
0ff4			.instr2:	cp KEY_LEFT    ; cursor left 
0ff4					jr nz, .instr3 
0ff4					dec hl 
0ff4					ld (input_ptr),hl 
0ff4					jr .instr1 
0ff4				 
0ff4			.instr3:	cp KEY_RIGHT      ; cursor right 
0ff4					jr nz, .instr4 
0ff4					inc hl 
0ff4					ld (input_ptr),hl 
0ff4					jr .instr1 
0ff4			 
0ff4			.instr4:	cp KEY_HOME    ; jump to start of line 
0ff4					jr nz, .instr5 
0ff4					dec hl 
0ff4					ld (input_ptr),hl 
0ff4					jr .instr1 
0ff4			 
0ff4			.instr5:	cp KEY_END     ; jump to end of line 
0ff4					jr nz, .instr6 
0ff4					dec hl 
0ff4					ld (input_ptr),hl 
0ff4					jr .instr1 
0ff4			.instr6:        cp KEY_UP      ; recall last command 
0ff4					jr nz, .instrnew 
0ff4			 
0ff4				ld hl, scratch 
0ff4				ld de, os_last_cmd 
0ff4				call strcpy 
0ff4					jr .instr1 
0ff4			 
0ff4			 
0ff4			.instrnew:	; no special key pressed to see if we have room to store it 
0ff4			 
0ff4					; TODO do string size test 
0ff4			 
0ff4					dec hl ; to over write cursor 
0ff4					ld (hl),a 
0ff4					inc hl 
0ff4					ld a,(cursor_shape) 
0ff4					ld (hl),a 
0ff4					inc hl 
0ff4					ld a,0 
0ff4					ld (hl),a 
0ff4			 
0ff4					ld (input_ptr),hl 
0ff4					 
0ff4					jr .instr1 
0ff4			.instrcr:	dec hl		; remove cursor 
0ff4					ld a,' '	; TODO add a trailing space for safety 
0ff4					ld (hl),a 
0ff4					inc hl 
0ff4					ld a,0 
0ff4					ld (hl),a 
0ff4			 
0ff4			 
0ff4					; if at end of line scroll up    
0ff4					; TODO detecting only end of line 4 for scroll up  
0ff4			 
0ff4					;ld   
0ff4			 
0ff4					ret 
0ff4			 
0ff4			 
0ff4			endif 
0ff4			; strcpy hl = dest, de source 
0ff4			 
0ff4 1a			strcpy:   LD   A, (DE)        ;Get character from string 
0ff5 b7			            OR   A              ;Null terminator? 
0ff6 c8			            RET  Z              ;Yes, so finished 
0ff7 1a					ld a,(de) 
0ff8 77					ld (hl),a 
0ff9 13			            INC  DE             ;Point to next character 
0ffa 23					inc hl 
0ffb 18 f7		            JR   strcpy       ;Repeat 
0ffd c9					ret 
0ffe			 
0ffe			 
0ffe			; TODO string_at  
0ffe			; pass string which starts with lcd offset address and then null term string 
0ffe			 
0ffe			; TODO string to dec 
0ffe			; TODO string to hex 
0ffe			; TODO byte to string hex 
0ffe			; TODO byte to string dec 
0ffe			 
0ffe			 
0ffe			 
0ffe			; from z80uartmonitor 
0ffe			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
0ffe			; OUTPUT VALUE OF A IN HEX ONE NYBBLE AT A TIME 
0ffe			; pass hl for where to put the text 
0ffe			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
0ffe c5			hexout:	PUSH BC 
0fff f5					PUSH AF 
1000 47					LD B, A 
1001					; Upper nybble 
1001 cb 3f				SRL A 
1003 cb 3f				SRL A 
1005 cb 3f				SRL A 
1007 cb 3f				SRL A 
1009 cd 19 10				CALL tohex 
100c 77					ld (hl),a 
100d 23					inc hl	 
100e					 
100e					; Lower nybble 
100e 78					LD A, B 
100f e6 0f				AND 0FH 
1011 cd 19 10				CALL tohex 
1014 77					ld (hl),a 
1015 23					inc hl	 
1016					 
1016 f1					POP AF 
1017 c1					POP BC 
1018 c9					RET 
1019					 
1019			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
1019			; TRANSLATE value in lower A TO 2 HEX CHAR CODES FOR DISPLAY 
1019			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
1019			tohex: 
1019 e5					PUSH HL 
101a d5					PUSH DE 
101b 16 00				LD D, 0 
101d 5f					LD E, A 
101e 21 26 10				LD HL, .DATA 
1021 19					ADD HL, DE 
1022 7e					LD A, (HL) 
1023 d1					POP DE 
1024 e1					POP HL 
1025 c9					RET 
1026			 
1026			.DATA: 
1026 30					DEFB	30h	; 0 
1027 31					DEFB	31h	; 1 
1028 32					DEFB	32h	; 2 
1029 33					DEFB	33h	; 3 
102a 34					DEFB	34h	; 4 
102b 35					DEFB	35h	; 5 
102c 36					DEFB	36h	; 6 
102d 37					DEFB	37h	; 7 
102e 38					DEFB	38h	; 8 
102f 39					DEFB	39h	; 9 
1030 41					DEFB	41h	; A 
1031 42					DEFB	42h	; B 
1032 43					DEFB	43h	; C 
1033 44					DEFB	44h	; D 
1034 45					DEFB	45h	; E 
1035 46					DEFB	46h	; F 
1036			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
1036			;; 	ASCII char code for 0-9,A-F in A to single hex digit 
1036			;;    subtract $30, if result > 9 then subtract $7 more 
1036			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
1036			atohex: 
1036 d6 30				SUB $30 
1038 fe 0a				CP 10 
103a f8					RET M		; If result negative it was 0-9 so we're done 
103b d6 07				SUB $7		; otherwise, subtract $7 more to get to $0A-$0F 
103d c9					RET		 
103e			 
103e			 
103e			 
103e			 
103e			; Get 2 ASCII characters as hex byte from pointer in hl 
103e			 
103e			BYTERD: 
103e 16 00			LD	D,00h		;Set up 
1040 cd 48 10			CALL	HEXCON		;Get byte and convert to hex 
1043 87				ADD	A,A		;First nibble so 
1044 87				ADD	A,A		;multiply by 16 
1045 87				ADD	A,A		; 
1046 87				ADD	A,A		; 
1047 57				LD	D,A		;Save hi nibble in D 
1048			HEXCON: 
1048 7e				ld a, (hl)		;Get next chr 
1049 23				inc hl 
104a d6 30			SUB	030h		;Makes '0'-'9' equal 0-9 
104c fe 0a			CP	00Ah		;Is it 0-9 ? 
104e 38 02			JR	C,NALPHA	;If so miss next bit 
1050 d6 07			SUB	007h		;Else convert alpha 
1052			NALPHA: 
1052 b2				OR	D		;Add hi nibble back 
1053 c9				RET			; 
1054			 
1054			 
1054			; 
1054			; Get a word (16 bit) in hexadecimal notation. The result is returned in HL. 
1054			; Since the routines get_byte and therefore get_nibble are called, only valid 
1054			; characters (0-9a-f) are accepted. 
1054			; 
1054			;get_word        push    af 
1054			;                call    get_byte        ; Get the upper byte 
1054			;                ld      h, a 
1054			;                call    get_byte        ; Get the lower byte 
1054			;                ld      l, a 
1054			;                pop     af 
1054			;                ret 
1054			; 
1054			; Get a byte in hexadecimal notation. The result is returned in A. Since 
1054			; the routine get_nibble is used only valid characters are accepted - the  
1054			; input routine only accepts characters 0-9a-f. 
1054			; 
1054 c5			get_byte:        push    bc              ; Save contents of B (and C) 
1055 7e					ld a,(hl) 
1056 23					inc hl 
1057 cd 7c 10		                call    nibble2val      ; Get upper nibble 
105a cb 07		                rlc     a 
105c cb 07		                rlc     a 
105e cb 07		                rlc     a 
1060 cb 07		                rlc     a 
1062 47			                ld      b, a            ; Save upper four bits 
1063 7e					ld a,(hl) 
1064 cd 7c 10		                call    nibble2val      ; Get lower nibble 
1067 b0			                or      b               ; Combine both nibbles 
1068 c1			                pop     bc              ; Restore B (and C) 
1069 c9			                ret 
106a			; 
106a			; Get a hexadecimal digit from the serial line. This routine blocks until 
106a			; a valid character (0-9a-f) has been entered. A valid digit will be echoed 
106a			; to the serial line interface. The lower 4 bits of A contain the value of  
106a			; that particular digit. 
106a			; 
106a			;get_nibble      ld a,(hl)           ; Read a character 
106a			;                call    to_upper        ; Convert to upper case 
106a			;                call    is_hex          ; Was it a hex digit? 
106a			;                jr      nc, get_nibble  ; No, get another character 
106a			 ;               call    nibble2val      ; Convert nibble to value 
106a			 ;               call    print_nibble 
106a			 ;               ret 
106a			; 
106a			; is_hex checks a character stored in A for being a valid hexadecimal digit. 
106a			; A valid hexadecimal digit is denoted by a set C flag. 
106a			; 
106a			;is_hex          cp      'F' + 1         ; Greater than 'F'? 
106a			;                ret     nc              ; Yes 
106a			;                cp      '0'             ; Less than '0'? 
106a			;                jr      nc, is_hex_1    ; No, continue 
106a			;                ccf                     ; Complement carry (i.e. clear it) 
106a			;                ret 
106a			;is_hex_1        cp      '9' + 1         ; Less or equal '9*? 
106a			;                ret     c               ; Yes 
106a			;                cp      'A'             ; Less than 'A'? 
106a			;                jr      nc, is_hex_2    ; No, continue 
106a			;                ccf                     ; Yes - clear carry and return 
106a			;                ret 
106a			;is_hex_2        scf                     ; Set carry 
106a			;                ret 
106a			; 
106a			; Convert a single character contained in A to upper case: 
106a			; 
106a fe 61		to_upper:        cp      'a'             ; Nothing to do if not lower case 
106c d8			                ret     c 
106d fe 7b		                cp      'z' + 1         ; > 'z'? 
106f d0			                ret     nc              ; Nothing to do, either 
1070 e6 5f		                and     $5f             ; Convert to upper case 
1072 c9			                ret 
1073			 
1073			 
1073			to_lower: 
1073			 
1073			   ; if char is in [A-Z] make it lower case 
1073			 
1073			   ; enter : a = char 
1073			   ; exit  : a = lower case char 
1073			   ; uses  : af 
1073			 
1073 fe 41		   cp 'A' 
1075 d8			   ret c 
1076			    
1076 fe 5b		   cp 'Z'+1 
1078 d0			   ret nc 
1079			    
1079 f6 20		   or $20 
107b c9			   ret 
107c			 
107c			; 
107c			; Expects a hexadecimal digit (upper case!) in A and returns the 
107c			; corresponding value in A. 
107c			; 
107c fe 3a		nibble2val:      cp      '9' + 1         ; Is it a digit (less or equal '9')? 
107e 38 02		                jr      c, nibble2val_1 ; Yes 
1080 d6 07		                sub     7               ; Adjust for A-F 
1082 d6 30		nibble2val_1:    sub     '0'             ; Fold back to 0..15 
1084 e6 0f		                and     $f              ; Only return lower 4 bits 
1086 c9			                ret 
1087			; 
1087			; Print_nibble prints a single hex nibble which is contained in the lower  
1087			; four bits of A: 
1087			; 
1087			;print_nibble    push    af              ; We won't destroy the contents of A 
1087			;                and     $f              ; Just in case... 
1087			;                add     a, '0'             ; If we have a digit we are done here. 
1087			;                cp      '9' + 1         ; Is the result > 9? 
1087			;                jr      c, print_nibble_1 
1087			;                add     a, 'A' - '0' - $a  ; Take care of A-F 
1087			;print_nibble_1  call    putc            ; Print the nibble and 
1087			;                pop     af              ; restore the original value of A 
1087			;                ret 
1087			;; 
1087			;; Send a CR/LF pair: 
1087			; 
1087			;crlf            push    af 
1087			;                ld      a, cr 
1087			;                call    putc 
1087			;                ld      a, lf 
1087			;                call    putc 
1087			;                pop     af 
1087			;                ret 
1087			; 
1087			; Print_word prints the four hex digits of a word to the serial line. The  
1087			; word is expected to be in HL. 
1087			; 
1087			;print_word      push    hl 
1087			;                push    af 
1087			;                ld      a, h 
1087			;                call    print_byte 
1087			;                ld      a, l 
1087			;                call    print_byte 
1087			;                pop     af 
1087			;                pop     hl 
1087			;                ret 
1087			; 
1087			; Print_byte prints a single byte in hexadecimal notation to the serial line. 
1087			; The byte to be printed is expected to be in A. 
1087			; 
1087			;print_byte      push    af              ; Save the contents of the registers 
1087			;                push    bc 
1087			;                ld      b, a 
1087			;                rrca 
1087			;                rrca 
1087			;                rrca 
1087			;                rrca 
1087			;                call    print_nibble    ; Print high nibble 
1087			;                ld      a, b 
1087			;                call    print_nibble    ; Print low nibble 
1087			;                pop     bc              ; Restore original register contents 
1087			;                pop     af 
1087			;                ret 
1087			 
1087			 
1087			 
1087			 
1087			 
1087			fourehexhl:  
1087 7e				ld a,(hl) 
1088 cd 36 10			call atohex 
108b cb 3f				SRL A 
108d cb 3f				SRL A 
108f cb 3f				SRL A 
1091 cb 3f				SRL A 
1093 47				ld b, a 
1094 23				inc hl 
1095 7e				ld a,(hl) 
1096 23				inc hl 
1097 cd 36 10			call atohex 
109a 80				add b 
109b 57				ld d,a 
109c 7e				ld a,(hl) 
109d cd 36 10			call atohex 
10a0 cb 3f				SRL A 
10a2 cb 3f				SRL A 
10a4 cb 3f				SRL A 
10a6 cb 3f				SRL A 
10a8 47				ld b, a 
10a9 23				inc hl 
10aa 7e				ld a,(hl) 
10ab 23				inc hl 
10ac cd 36 10			call atohex 
10af 80				add b 
10b0 5f				ld e, a 
10b1 d5				push de 
10b2 e1				pop hl 
10b3 c9				ret 
10b4			 
10b4			; pass hl. returns z set if the byte at hl is a digit 
10b4			;isdigithl:  
10b4			;	push bc 
10b4			;	ld a,(hl) 
10b4			;	cp ':' 
10b4			;	jr nc, .isdf 		; > 
10b4			;	cp '0' 
10b4			;	jr c, .isdf		; < 
10b4			; 
10b4			;	; TODO find a better way to set z 
10b4			; 
10b4			;	ld b,a 
10b4			;	cp b 
10b4			;	pop bc 
10b4			;	ret 
10b4			; 
10b4			;.isdf:	; not digit so clear z 
10b4			; 
10b4			;	; TODO find a better way to unset z 
10b4			; 
10b4			;	ld b,a 
10b4			;	inc b 
10b4			;	cp b 
10b4			; 
10b4			;	pop bc 
10b4			;	ret 
10b4				 
10b4				 
10b4			 
10b4			 
10b4			; pass hl as the four byte address to load 
10b4			 
10b4			get_word_hl:  
10b4 e5				push hl 
10b5 cd 54 10			call get_byte 
10b8				 
10b8 47				ld b, a 
10b9			 
10b9 e1				pop hl 
10ba 23				inc hl 
10bb 23				inc hl 
10bc			 
10bc			; TODO not able to handle a-f  
10bc 7e				ld a,(hl) 
10bd			;	;cp ':' 
10bd			;	cp 'g' 
10bd			;	jr nc, .single_byte_hl 		; > 
10bd			;	cp 'G' 
10bd			;	jr nc, .single_byte_hl 		; > 
10bd			;	cp '0' 
10bd			;	jr c, .single_byte_hl		; < 
10bd			 
10bd				;call isdigithl 
10bd fe 00			cp 0 
10bf 28 06			jr z, .single_byte_hl 
10c1			 
10c1			.getwhln:   ; hex word so get next byte 
10c1			 
10c1 cd 54 10			call get_byte 
10c4 6f				ld l, a 
10c5 60				ld h,b 
10c6 c9				ret 
10c7 68			.single_byte_hl:   ld l,b 
10c8 26 00				ld h,0 
10ca c9					ret 
10cb			 
10cb			 
10cb			 
10cb			 
10cb 21 6b 18			ld hl,asc+1 
10ce			;	ld a, (hl) 
10ce			;	call nibble2val 
10ce cd 54 10			call get_byte 
10d1			 
10d1			;	call fourehexhl 
10d1 32 ef e2			ld (scratch+52),a 
10d4				 
10d4 21 ed e2			ld hl,scratch+50 
10d7 22 de e5			ld (os_cur_ptr),hl 
10da			 
10da c9				ret 
10db			 
10db			 
10db			; from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Other:DispA 
10db			 
10db			; Decimal Unsigned Version 
10db			 
10db			;Number in a to decimal ASCII 
10db			;adapted from 16 bit found in z80 Bits to 8 bit by Galandros 
10db			;Example: display a=56 as "056" 
10db			;input: a = number 
10db			;Output: a=0,value of a in the screen 
10db			;destroys af,bc (don't know about hl and de) 
10db			DispAToASCII: 
10db 0e 9c			ld	c,-100 
10dd cd e7 10			call	.Na1 
10e0 0e f6			ld	c,-10 
10e2 cd e7 10			call	.Na1 
10e5 0e ff			ld	c,-1 
10e7 06 2f		.Na1:	ld	b,'0'-1 
10e9 04			.Na2:	inc	b 
10ea 81				add	a,c 
10eb 38 fc			jr	c,.Na2 
10ed 91				sub	c		;works as add 100/10/1 
10ee f5				push af		;safer than ld c,a 
10ef 78				ld	a,b		;char is in b 
10f0			;TODO	CALL	PUTCHAR	;plot a char. Replace with bcall(_PutC) or similar. 
10f0 f1				pop af		;safer than ld a,c 
10f1 c9				ret 
10f2			 
10f2			; Decimal Signed Version 
10f2			 
10f2			; DispA 
10f2			; -------------------------------------------------------------- 
10f2			; Converts a signed integer value to a zero-terminated ASCII 
10f2			; string representative of that value (using radix 10). 
10f2			; -------------------------------------------------------------- 
10f2			; INPUTS: 
10f2			;     HL     Value to convert (two's complement integer). 
10f2			;     DE     Base address of string destination. (pointer). 
10f2			; -------------------------------------------------------------- 
10f2			; OUTPUTS: 
10f2			;     None 
10f2			; -------------------------------------------------------------- 
10f2			; REGISTERS/MEMORY DESTROYED 
10f2			; AF HL 
10f2			; -------------------------------------------------------------- 
10f2			 
10f2			;DispHLToASCII: 
10f2			;   push    de 
10f2			;   push    bc 
10f2			; 
10f2			;; Detect sign of HL. 
10f2			;    bit    7, h 
10f2			;    jr     z, ._DoConvert 
10f2			; 
10f2			;; HL is negative. Output '-' to string and negate HL. 
10f2			;    ld     a, '-' 
10f2			;    ld     (de), a 
10f2			;    inc    de 
10f2			; 
10f2			;; Negate HL (using two's complement) 
10f2			;    xor    a 
10f2			;    sub    l 
10f2			;    ld     l, a 
10f2			;    ld     a, 0     ; Note that XOR A or SUB A would disturb CF 
10f2			;    sbc    a, h 
10f2			;    ld     h, a 
10f2			; 
10f2			;; Convert HL to digit characters 
10f2			;._DoConvert: 
10f2			;    ld     b, 0     ; B will count character length of number 
10f2			;-   ld     a, 10 
10f2			;    syscall  .DivHLByA  ; HL = HL / A, A = remainder 
10f2			;    push   af 
10f2			;    inc    b 
10f2			;    ld     a, h 
10f2			;    or     l 
10f2			;    jr     nz, - 
10f2			; 
10f2			;; Retrieve digits from stack 
10f2			;-   pop    af 
10f2			;    or     $30 
10f2			;    ld     (de), a 
10f2			;    inc    de 
10f2			;    djnz   - 
10f2			; 
10f2			;; Terminate string with NULL 
10f2			;    xor    a 
10f2			;    ld     (de), a 
10f2			; 
10f2			;    pop    bc 
10f2			;    pop    de 
10f2			;    ret 
10f2			 
10f2			;Comments 
10f2			; 
10f2			;    This routine uses the common positive-integer radix conversion algorithm of repeatedly dividing a value by the desired radix (base case: the value is zero) and saving the remainders of each division. 
10f2			;    As this algorithm gives the digits in reverse order, they are pushed onto the hardware stack so that subsequently popping them yields the correct order. 
10f2			;    Note that the output string will not be fixed-width. 
10f2			; 
10f2			;Example Usage 
10f2			; 
10f2			;    ld    hl, -1004 
10f2			;    ld    de, OP1 
10f2			;    call  DispA 
10f2			;    ld    hl, OP1 
10f2			;    syscall  PutS 
10f2			 
10f2			 
10f2			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/string_to_uint16.z80 
10f2			 
10f2			 
10f2			;Converts an ASCII string to an unsigned 16-bit integer 
10f2			;Quits when it reaches a non-decimal digit 
10f2			 
10f2			string_to_uint16: 
10f2			atoui_16: 
10f2			;Input: 
10f2			;     DE points to the string 
10f2			;Outputs: 
10f2			;     HL is the result 
10f2			;     A is the 8-bit value of the number 
10f2			;     DE points to the byte after the number 
10f2			;Destroys: 
10f2			;     BC 
10f2			;       if the string is non-empty, BC is HL/10 
10f2			;Size:  24 bytes 
10f2			;Speed: 42+d(104+{0,9}) 
10f2			;       d is the number of digits in the number 
10f2			;       max is 640 cycles for a 5 digit number 
10f2			;Assuming no leading zeros: 
10f2			;1 digit:  146cc 
10f2			;2 digit:  250cc 
10f2			;3 digit:  354cc or 363cc (avg: 354.126cc) 
10f2			;4 digit:  458cc or 467cc (avg: 458.27cc) 
10f2			;5 digit:  562cc or 571cc or 580cc (avg: 562.4104cc) 
10f2			;avg: 544.81158447265625cc (544+13297/16384) 
10f2			;=============================================================== 
10f2 21 00 00		  ld hl,0 
10f5			.u16a: 
10f5 1a			  ld a,(de) 
10f6 d6 30		  sub 30h 
10f8 fe 0a		  cp 10 
10fa d0			  ret nc 
10fb 13			  inc de 
10fc 44			  ld b,h 
10fd 4d			  ld c,l 
10fe 29			  add hl,hl 
10ff 29			  add hl,hl 
1100 09			  add hl,bc 
1101 29			  add hl,hl 
1102 85			  add a,l 
1103 6f			  ld l,a 
1104 30 ef		  jr nc,.u16a 
1106 24			  inc h 
1107 c3 f5 10		  jp .u16a 
110a			 
110a			 
110a			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/string_to_uint16.z80 
110a			 
110a			;written by Zeda 
110a			;Converts a 16-bit unsigned integer to an ASCII string. 
110a			 
110a			uitoa_16: 
110a			;Input: 
110a			;   DE is the number to convert 
110a			;   HL points to where to write the ASCII string (up to 6 bytes needed). 
110a			;Output: 
110a			;   HL points to the null-terminated ASCII string 
110a			;      NOTE: This isn't necessarily the same as the input HL. 
110a d5			  push de 
110b c5			  push bc 
110c f5			  push af 
110d eb			  ex de,hl 
110e			 
110e 01 f0 d8		  ld bc,-10000 
1111 3e 2f		  ld a,'0'-1 
1113 3c			  inc a 
1114 09			  add hl,bc  
1115 38 fc		   jr c,$-2 
1117 12			  ld (de),a 
1118 13			  inc de 
1119			 
1119 01 e8 03		  ld bc,1000 
111c 3e 3a		  ld a,'9'+1 
111e 3d			  dec a  
111f 09			  add hl,bc  
1120 30 fc		   jr nc,$-2 
1122 12			  ld (de),a 
1123 13			  inc de 
1124			 
1124 01 9c ff		  ld bc,-100 
1127 3e 2f		  ld a,'0'-1 
1129 3c			  inc a  
112a 09			  add hl,bc  
112b 38 fc		   jr c,$-2 
112d 12			  ld (de),a 
112e 13			  inc de 
112f			 
112f 7d			  ld a,l 
1130 26 3a		  ld h,'9'+1 
1132 25			  dec h  
1133 c6 0a		  add a,10  
1135 30 fb		   jr nc,$-3 
1137 c6 30		  add a,'0' 
1139 eb			  ex de,hl 
113a 72			  ld (hl),d 
113b 23			  inc hl 
113c 77			  ld (hl),a 
113d 23			  inc hl 
113e 36 00		  ld (hl),0 
1140			 
1140			;Now strip the leading zeros 
1140 0e fa		  ld c,-6 
1142 09			  add hl,bc 
1143 3e 30		  ld a,'0' 
1145 23			  inc hl  
1146 be			  cp (hl)  
1147 28 fc		  jr z,$-2 
1149			 
1149			;Make sure that the string is non-empty! 
1149 7e			  ld a,(hl) 
114a b7			  or a 
114b 20 01		  jr nz,.atoub 
114d 2b			  dec hl 
114e			.atoub: 
114e			 
114e f1			  pop af 
114f c1			  pop bc 
1150 d1			  pop de 
1151 c9			  ret 
1152			 
1152			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/toUpper.z80 
1152			 
1152			toUpper: 
1152			;A is the char. 
1152			;If A is a lowercase letter, this sets it to the matching uppercase 
1152			;18cc or 30cc or 41cc 
1152			;avg: 26.75cc 
1152 fe 61		  cp 'a' 
1154 d8			  ret c 
1155 fe 7b		  cp 'z'+1 
1157 d0			  ret nc 
1158 d6 20		  sub 'a'-'A' 
115a c9			  ret 
115b			 
115b			; https://tutorials.eeems.ca/ASMin28Days/lesson/day16.html#cmp 
115b			 
115b			; String Length 
115b			;With a length-prefixed string, finding the length is trivial. For a null-terminated string, the process is decidedly more involved. This is where CPIR comes in. 
115b			 
115b			; Get the length of the null-terminated string starting at $8000 hl 
115b			;    LD     HL, $8000 
115b			 
115b			strlenz: 
115b			 
115b af			    XOR    A               ; Zero is the value we are looking for. 
115c 47			    LD     B, A             ; Since we haven't the slightest clue as to the  
115d 4f			    LD     C, A             ; actual size of the string, put 0 in BC to search 
115e			                           ; 65, 536 bytes (the entire addressable memory space). 
115e ed b1		    CPIR                   ; Begin search for a byte equalling zero. 
1160			 
1160			; BC has been decremented so that it holds -length. Now need to synthesize a NEG BC. 
1160 67			    LD     H, A             ; Zero HL (basically set it to 65, 536) to get the 
1161 6f			    LD     L, A             ; number of bytes 
1162 ed 42		    SBC    HL, BC           ; Find the size. CPIR doesn't affect carry. 
1164 2b			    DEC    HL              ; Compensate for null. 
1165 c9				ret 
1166			 
1166			; Get the length of the A terminated string starting at $8000 hl 
1166			;    LD     HL, $8000 
1166			 
1166			strlent: 
1166			 
1166			                  ; A is the value we are looking for. 
1166 06 00		    LD     B, 0             ; Since we haven't the slightest clue as to the  
1168 0e 00		    LD     C, 0             ; actual size of the string, put 0 in BC to search 
116a			                           ; 65, 536 bytes (the entire addressable memory space). 
116a ed b1		    CPIR                   ; Begin search for a byte equalling zero. 
116c			 
116c			; BC has been decremented so that it holds -length. Now need to synthesize a NEG BC. 
116c 26 00		    LD     H, 0             ; Zero HL (basically set it to 65, 536) to get the 
116e 2e 00		    LD     L, 0             ; number of bytes 
1170 ed 42		    SBC    HL, BC           ; Find the size. CPIR doesn't affect carry. 
1172 2b			    DEC    HL              ; Compensate for null. 
1173 c9				ret 
1174			 
1174			 
1174			;Comparing Strings 
1174			 
1174			;IN    HL     Address of string1. 
1174			;      DE     Address of string2. 
1174			 
1174			; doc given but wrong??? 
1174			;OUT   zero   Set if string1 = string2, reset if string1 != string2. 
1174			;      carry  Set if string1 > string2, reset if string1 <= string2. 
1174			; tested 
1174			;OUT   carry set  if string1 = string2, carry  reset if string1 != string2. 
1174			 
1174			strcmp_old: 
1174 e5			    PUSH   HL 
1175 d5			    PUSH   DE 
1176			 
1176 1a			    LD     A, (DE)          ; Compare lengths to determine smaller string 
1177 be			    CP     (HL)            ; (want to minimize work). 
1178 38 01		    JR     C, Str1IsBigger 
117a 7e			    LD     A, (HL) 
117b			 
117b			Str1IsBigger: 
117b 4f			    LD     C, A             ; Put length in BC 
117c 06 00		    LD     B, 0 
117e 13			    INC    DE              ; Increment pointers to meat of string. 
117f 23			    INC    HL 
1180			 
1180			CmpLoop: 
1180 1a			    LD     A, (DE)          ; Compare bytes. 
1181 ed a1		    CPI 
1183 20 09		    JR     NZ, NoMatch      ; If (HL) != (DE), abort. 
1185 13			    INC    DE              ; Update pointer. 
1186 ea 80 11		    JP     PE, CmpLoop 
1189			 
1189 d1			    POP    DE 
118a e1			    POP    HL 
118b 1a			    LD     A, (DE)          ; Check string lengths to see if really equal. 
118c be			    CP     (HL) 
118d c9			    RET 
118e			 
118e			NoMatch: 
118e 2b			    DEC    HL 
118f be			    CP     (HL)            ; Compare again to affect carry. 
1190 d1			    POP    DE 
1191 e1			    POP    HL 
1192 c9			    RET 
1193			 
1193			;; test strmp 
1193			; 
1193			;ld de, .str1 
1193			;ld hl, .str2 
1193			;call strcmp 
1193			;jr z, .z1 
1193			;;this 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "NZ1" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			;.z1: 
1193			; 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "ZZ1" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			; 
1193			;ld de, .str1 
1193			;ld hl, .str1 
1193			;call strcmp 
1193			;jr z, .z2 
1193			;;this 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "NZ2" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			;.z2: 
1193			; 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "ZZ2" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			; 
1193			;ld de, .str1 
1193			;ld hl, .str2 
1193			;call strcmp 
1193			;jr c, .c1 
1193			; 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "Nc1" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			;.c1: 
1193			;;this 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "cc1" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			; 
1193			;ld de, .str1 
1193			;ld hl, .str1 
1193			;call strcmp 
1193			;jr c, .c2 
1193			;;this 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "Nc2" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			;.c2: 
1193			; 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "cc2" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			;	NEXTW 
1193			;.str1:   db "string1",0 
1193			;.str2:   db "string2",0 
1193			 
1193			; only care about direct match or not 
1193			; hl and de strings 
1193			; zero set if the same 
1193			 
1193			strcmp: 
1193 1a				ld a, (de) 
1194 be				cp (hl) 
1195 28 02			jr z, .ssame 
1197 b7				or a 
1198 c9				ret 
1199			 
1199			.ssame:  
1199 fe 00			cp 0 
119b c8				ret z 
119c			 
119c 23				inc hl 
119d 13				inc de 
119e 18 f3			jr strcmp 
11a0				 
11a0				 
11a0			 
11a0			;Copyright (c) 2014, Luke Maurits 
11a0			;All rights reserved. 
11a0			; 
11a0			;Redistribution and use in source and binary forms, with or without 
11a0			;modification, are permitted provided that the following conditions are met: 
11a0			; 
11a0			;* Redistributions of source code must retain the above copyright notice, this 
11a0			;  list of conditions and the following disclaimer. 
11a0			; 
11a0			;* Redistributions in binary form must reproduce the above copyright notice, 
11a0			;  this list of conditions and the following disclaimer in the documentation 
11a0			;  and/or other materials provided with the distribution. 
11a0			; 
11a0			;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
11a0			;AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
11a0			;IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
11a0			;DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE 
11a0			;FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
11a0			;DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
11a0			;SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
11a0			;CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
11a0			;OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
11a0			;OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
11a0			 
11a0			; https://github.com/lmaurits/lm512/blob/master/string.z80 
11a0			 
11a0			StrictStrCmp: 
11a0				; Load next chars of each string 
11a0 1a				ld a, (de) 
11a1 47				ld b, a 
11a2 7e				ld a, (hl) 
11a3				; Compare 
11a3 b8				cp b 
11a4				; Return non-zero if chars don't match 
11a4 c0				ret nz 
11a5				; Check for end of both strings 
11a5 fe 00			cp "\0" 
11a7				; Return if strings have ended 
11a7 c8				ret z 
11a8				; Otherwise, advance to next chars 
11a8 23				inc hl 
11a9 13				inc de 
11aa 18 f4			jr StrictStrCmp 
11ac			 
11ac			;end 
11ac			; eof 
11ac			 
11ac			 
11ac			 
11ac			 
11ac			 
11ac			 
# End of file firmware_strings.asm
11ac			include "firmware_memory.asm"   ; malloc and free  
11ac			 
11ac			if DEBUG_FORTH_MALLOC_HIGH 
11ac			.mallocsize: db "Wants malloc >256",0 
11ac			.mallocasize: db "MALLOC gives >256",0 
11ac			.malloczero: db "MALLOC gives zero",0 
11ac			 
11ac			malloc_guard_zerolen: 
11ac				push hl 
11ac				push de 
11ac				push af 
11ac			 
11ac				ld de, 0 
11ac			        call cmp16 
11ac				jr nz, .lowalloz 
11ac			 
11ac				push hl 
11ac				push de 
11ac					ld hl, display_fb0 
11ac					ld (display_fb_active), hl 
11ac				call clear_display 
11ac				ld a, 0 
11ac				ld de, .malloczero 
11ac				call str_at_display 
11ac				call update_display 
11ac				call delay1s 
11ac				call delay1s 
11ac				call bp_on 
11ac			;	ld a, 0 
11ac			;	ld (os_view_disable), a 
11ac			 
11ac				pop de 
11ac				pop hl 
11ac			 
11ac				 
11ac			 
11ac				CALLMONITOR 
11ac			.lowalloz: 
11ac			 
11ac			 
11ac				pop af 
11ac				pop de 
11ac				pop hl 
11ac			ret 
11ac			 
11ac			malloc_guard_entry: 
11ac				push hl 
11ac				push de 
11ac				push af 
11ac			 
11ac			 	or a      ;clear carry flag 
11ac				push hl 
11ac				ld de, 255 
11ac				sbc hl, de 
11ac				jr c, .lowalloc 
11ac			 
11ac				push de 
11ac					ld hl, display_fb0 
11ac					ld (display_fb_active), hl 
11ac				call clear_display 
11ac				ld a, 0 
11ac				ld de, .mallocsize 
11ac				call str_at_display 
11ac				call update_display 
11ac				call delay1s 
11ac				call delay1s 
11ac			;	ld a, 0 
11ac			;	ld (os_view_disable), a 
11ac				call bp_on 
11ac			 
11ac				pop de 
11ac				pop hl 
11ac			 
11ac				 
11ac			 
11ac				CALLMONITOR 
11ac				jr .lowdone 
11ac			.lowalloc: 
11ac			 
11ac			 
11ac				pop hl 
11ac			.lowdone:	pop af 
11ac				pop de 
11ac				pop hl 
11ac			ret 
11ac			 
11ac			malloc_guard_exit: 
11ac				push hl 
11ac				push de 
11ac				push af 
11ac			 
11ac			 	or a      ;clear carry flag 
11ac				push hl 
11ac				ld de, 255 
11ac				sbc hl, de 
11ac				jr c, .lowallocx 
11ac			 
11ac				push de 
11ac					ld hl, display_fb0 
11ac					ld (display_fb_active), hl 
11ac				call clear_display 
11ac				ld a, 0 
11ac				ld de, .mallocasize 
11ac				call str_at_display 
11ac				call update_display 
11ac				call delay1s 
11ac				call delay1s 
11ac			;	ld a, 0 
11ac			;	ld (os_view_disable), a 
11ac				call bp_on 
11ac				pop de 
11ac				pop hl 
11ac			 
11ac				CALLMONITOR 
11ac				jr .lowdonex 
11ac			.lowallocx: 
11ac			 
11ac				pop hl 
11ac			.lowdonex:	pop af 
11ac				pop de 
11ac				pop hl 
11ac			ret 
11ac			endif 
11ac			 
11ac			if MALLOC_2 
11ac			; Z80 Malloc and Free Functions 
11ac			 
11ac			; Malloc Function: 
11ac			; Input: 
11ac			;   HL: Size of block to allocate 
11ac			; Output: 
11ac			;   HL: Pointer to allocated memory block (NULL if allocation fails) 
11ac			 
11ac			malloc: 
11ac				 
11ac			if DEBUG_FORTH_MALLOC_HIGH 
11ac			call malloc_guard_entry 
11ac			endif 
11ac			 
11ac			 
11ac			 
11ac			 
11ac					if DEBUG_FORTH_MALLOC 
11ac						DMARK "mal" 
11ac						CALLMONITOR 
11ac					endif 
11ac			    push af            ; Save AF register 
11ac			    ld a, l            ; Load low byte of size into A 
11ac			    or h               ; Check if size is zero 
11ac			    jp z, malloc_exit  ; If size is zero, exit with NULL pointer 
11ac			 
11ac			    ; Allocate memory 
11ac			    ld hl, (heap_start) ; Load start of heap into HL 
11ac					if DEBUG_FORTH_MALLOC 
11ac						DMARK "ma1" 
11ac						CALLMONITOR 
11ac					endif 
11ac			    call malloc_internal ; Call internal malloc function 
11ac			    pop af             ; Restore AF register 
11ac			if DEBUG_FORTH_MALLOC_HIGH 
11ac			call malloc_guard_exit 
11ac			call malloc_guard_zerolen 
11ac			endif 
11ac			    ret                ; Return 
11ac			 
11ac			; Free Function: 
11ac			; Input: 
11ac			;   HL: Pointer to memory block to free 
11ac			; Output: 
11ac			;   None 
11ac			 
11ac			free: 
11ac			    push af            ; Save AF register 
11ac			    ld a, l            ; Load low byte of pointer into A 
11ac			    or h               ; Check if pointer is NULL 
11ac			    jp z, free_exit    ; If pointer is NULL, exit 
11ac			 
11ac			    ; Free memory 
11ac			    ld hl, (heap_start) ; Load start of heap into HL 
11ac			    call free_internal  ; Call internal free function 
11ac			    pop af             ; Restore AF register 
11ac			    ret                ; Return 
11ac			 
11ac			; Internal Malloc Function: 
11ac			; Input: 
11ac			;   HL: Size of block to allocate 
11ac			; Output: 
11ac			;   HL: Pointer to allocated memory block (NULL if allocation fails) 
11ac			 
11ac			malloc_internal: 
11ac			    ld bc, 2           ; Number of bytes to allocate for management overhead 
11ac			    add hl, bc         ; Add management overhead to requested size 
11ac			    ex de, hl          ; Save total size in DE, and keep it in HL 
11ac					if DEBUG_FORTH_MALLOC 
11ac						DMARK "ma2" 
11ac						CALLMONITOR 
11ac					endif 
11ac			 
11ac			    ; Search for free memory block 
11ac			    ld de, (heap_end)  ; Load end of heap into DE 
11ac			    ld bc, 0           ; Initialize counter 
11ac			 
11ac					if DEBUG_FORTH_MALLOC 
11ac						DMARK "ma2" 
11ac						CALLMONITOR 
11ac					endif 
11ac			malloc_search_loop: 
11ac			    ; Check if current block is free 
11ac			    ld a, (hl)         ; Load current block's status (free or used) 
11ac			    cp 0               ; Compare with zero (free) 
11ac			    jr nz, malloc_skip_block_check  ; If not free, skip to the next block 
11ac			 
11ac			    ; Check if current block is large enough 
11ac			    ld a, (hl+1)       ; Load high byte of block size 
11ac			    cp l               ; Compare with low byte of requested size 
11ac			    jr nz, malloc_skip_block_check  ; If not large enough, skip to the next block 
11ac			 
11ac			    ld a, (hl+2)       ; Load low byte of block size 
11ac			    cp h               ; Compare with high byte of requested size 
11ac			    jr c, malloc_skip_block_check   ; If not large enough, skip to the next block 
11ac			 
11ac			    ; Mark block as used 
11ac			    ld (hl), 0xFF      ; Set status byte to indicate used block 
11ac			 
11ac			    ; Calculate remaining space in block 
11ac			    ld bc, 0           ; Clear BC 
11ac			    add hl, bc         ; Increment HL to point to start of data block 
11ac			    add hl, de         ; HL = HL + DE (total size) 
11ac			    ld bc, 1           ; Number of bytes to allocate for management overhead 
11ac			    add hl, bc         ; Add management overhead to start of data block 
11ac			 
11ac			    ; Save pointer to allocated block in HL 
11ac			if DEBUG_FORTH_MALLOC_HIGH 
11ac						DMARK "ma5" 
11ac			call malloc_guard_exit 
11ac			call malloc_guard_zerolen 
11ac			endif 
11ac			    ret 
11ac			 
11ac			malloc_skip_block_check: 
11ac			    ; Move to the next block 
11ac			    ld bc, 3           ; Size of management overhead 
11ac			    add hl, bc         ; Move to the next block 
11ac			    inc de             ; Increment counter 
11ac			 
11ac			    ; Check if we have reached the end of heap 
11ac			    ld a, e            ; Load low byte of heap end address 
11ac			    cp (hl)            ; Compare with low byte of current address 
11ac			    jr nz, malloc_search_loop  ; If not equal, continue searching 
11ac			    ld a, d            ; Load high byte of heap end address 
11ac			    cp 0               ; Check if it's zero (end of memory) 
11ac			    jr nz, malloc_search_loop  ; If not zero, continue searching 
11ac			 
11ac			    ; If we reached here, allocation failed 
11ac			    xor a              ; Set result to NULL 
11ac			if DEBUG_FORTH_MALLOC_HIGH 
11ac						DMARK "ma6" 
11ac			call malloc_guard_exit 
11ac			call malloc_guard_zerolen 
11ac			endif 
11ac			    ret 
11ac			malloc_exit: 
11ac			if DEBUG_FORTH_MALLOC_HIGH 
11ac						DMARK "ma7" 
11ac			call malloc_guard_exit 
11ac			call malloc_guard_zerolen 
11ac			endif 
11ac			    ret 
11ac			 
11ac			; Internal Free Function: 
11ac			; Input: 
11ac			;   HL: Pointer to memory block to free 
11ac			; Output: 
11ac			;   None 
11ac			 
11ac			free_internal: 
11ac			    ld de, (heap_start) ; Load start of heap into DE 
11ac			    ld bc, 0            ; Initialize counter 
11ac			 
11ac			free_search_loop: 
11ac			    ; Check if current block contains the pointer 
11ac			    ld a, l             ; Load low byte of pointer 
11ac			    cp (hl+1)           ; Compare with high byte of current block's address 
11ac			    jr nz, free_skip_block_check  ; If not equal, skip to the next block 
11ac			    ld a, h             ; Load high byte of pointer 
11ac			    cp (hl+2)           ; Compare with low byte of current block's address 
11ac			    jr nz, free_skip_block_check  ; If not equal, skip to the next block 
11ac			 
11ac			    ; Mark block as free 
11ac			    ld (hl), 0          ; Set status byte to indicate free block 
11ac			    ret                 ; Return 
11ac			 
11ac			free_skip_block_check: 
11ac			    ; Move to the next block 
11ac			    ld bc, 3            ; Size of management overhead 
11ac			    add hl, bc          ; Move to the next block 
11ac			    inc de              ; Increment counter 
11ac			 
11ac			    ; Check if we have reached the end of heap 
11ac			    ld a, e             ; Load low byte of heap end address 
11ac			    cp (hl)             ; Compare with low byte of current address 
11ac			    jr nz, free_search_loop  ; If not equal, continue searching 
11ac			    ld a, d             ; Load high byte of heap end address 
11ac			    cp 0                ; Check if it's zero (end of memory) 
11ac			    jr nz, free_search_loop  ; If not zero, continue searching 
11ac			 
11ac			    ; If we reached here, pointer is not found in heap 
11ac			    ret 
11ac			 
11ac			free_exit: 
11ac			    ret                 ; Return 
11ac			 
11ac			; Define heap start and end addresses 
11ac			;heap_start:    .dw 0xC000   ; Start of heap 
11ac			;heap_end:      .dw 0xE000   ; End of heap 
11ac			 
11ac			endif 
11ac			 
11ac			 
11ac			if MALLOC_1 
11ac			 
11ac			 
11ac			 
11ac			; from https://gist.github.com/tomstorey/947a8b084bad69391a4b2a1c5b6d69ca 
11ac			 
11ac			;moved to firmware.asm 
11ac			;heap_start        .equ  0x9000      ; Starting address of heap 
11ac			;heap_size         .equ  0x0100      ; Number of bytes available in heap 
11ac			 
11ac			;      .org 0 
11ac			;      jp    main 
11ac			 
11ac			 
11ac			;      .org  0x100 
11ac			;main: 
11ac			;      ld    HL, 0x8100 
11ac			;      ld    SP, HL 
11ac			; 
11ac			;      call  heap_init 
11ac			; 
11ac			;      ; Make some allocations 
11ac			;      ld    HL, 12 
11ac			;      call  malloc            ; Allocates 0x9004 
11ac			; 
11ac			;      ld    HL, 12 
11ac			;      call  malloc            ; Allocates 0x9014 
11ac			; 
11ac			;      ld    HL, 12 
11ac			;      call  malloc            ; Allocates 0x9024 
11ac			; 
11ac			;      ; Free some allocations 
11ac			;      ld    HL, 0x9014 
11ac			;      call  free 
11ac			; 
11ac			;      ld    HL, 0x9004 
11ac			;      call  free 
11ac			; 
11ac			;      ld    HL, 0x9024 
11ac			;      call  free 
11ac			; 
11ac			; 
11ac			;      halt 
11ac			 
11ac			 
11ac			;------------------------------------------------------------------------------ 
11ac			;     heap_init                                                               : 
11ac			;                                                                             : 
11ac			; Description                                                                 : 
11ac			;     Initialise the heap and make it ready for malloc and free operations.   : 
11ac			;                                                                             : 
11ac			;     The heap is maintained as a linked list, starting with an initial       : 
11ac			;     "dummy block" of zero size which is mainly used to hold a pointer to    : 
11ac			;     the first free block in the heap. Each block then points to the next    : 
11ac			;     free block within the heap, and the free list ends at the first block   : 
11ac			;     with a null pointer to the next free block.                             : 
11ac			;                                                                             : 
11ac			; Parameters                                                                  : 
11ac			;     Inputs are compile-time only. Two defines which specify the starting    : 
11ac			;     address of the heap and its size are required, along with a memory      : 
11ac			;     allocation of 4 consecutive bytes which is used for a dummy block which : 
11ac			;     principally stores a pointer to the first free block in the heap.       : 
11ac			;                                                                             : 
11ac			; Returns                                                                     : 
11ac			;     Nothing                                                                 : 
11ac			;------------------------------------------------------------------------------ 
11ac			heap_init: 
11ac e5			      push  HL 
11ad			 
11ad			      ; Initialise free list struct 
11ad 21 f1 5e		      ld    HL, heap_start 
11b0 22 ec 5e		      ld    (free_list), HL 
11b3 21 00 00		      ld    HL, 0 
11b6 22 ee 5e		      ld    (free_list+2), HL 
11b9			 
11b9			      ; Insert first free block at bottom of heap, consumes entire heap 
11b9 21 92 e2		      ld    HL, heap_start+heap_size-4 
11bc 22 f1 5e		      ld    (heap_start), HL        ; Next block (end of free list) 
11bf 21 a1 83		      ld    HL, heap_size-4 
11c2 22 f3 5e		      ld    (heap_start+2), HL      ; Block size 
11c5			 
11c5			      ; Insert end of free list block at top of heap - two null words will 
11c5			      ; terminate the free list 
11c5 21 00 00		      ld    HL, 0 
11c8 22 94 e2		      ld    (heap_start+heap_size-2), HL 
11cb 22 92 e2		      ld    (heap_start+heap_size-4), HL 
11ce			 
11ce e1			      pop   HL 
11cf			 
11cf c9			      ret 
11d0			 
11d0			 
11d0			;------------------------------------------------------------------------------ 
11d0			;     malloc                                                                  : 
11d0			;                                                                             : 
11d0			; Description                                                                 : 
11d0			;     Allocates the wanted space from the heap and returns the address of the : 
11d0			;     first useable byte of the allocation.                                   : 
11d0			;                                                                             : 
11d0			;     Allocations can happen in one of two ways:                              : 
11d0			;                                                                             : 
11d0			;     1. A free block may be found which is the exact size wanted. In this    : 
11d0			;        case the block is removed from the free list and retuedn to the      : 
11d0			;        caller.                                                              : 
11d0			;     2. A free block may be found which is larger than the size wanted. In   : 
11d0			;        this case, the larger block is split into two. The first portion of  : 
11d0			;        this block will become the requested space by the malloc call and    : 
11d0			;        is returned to the caller. The second portion becomes a new free     : 
11d0			;        block, and the free list is adjusted to maintain continuity via this : 
11d0			;        newly created block.                                                 : 
11d0			;                                                                             : 
11d0			;     malloc does not set any initial value in the allocated space, the       : 
11d0			;     caller is required to do this as required.                              : 
11d0			;                                                                             : 
11d0			;     This implementation of malloc uses the stack exclusively, and is        : 
11d0			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
11d0			;     advisable to disable interrupts before calling malloc, and recommended  : 
11d0			;     to avoid the use of malloc inside ISRs in general.                      : 
11d0			;                                                                             : 
11d0			;     NOTE: heap_init must be called before malloc and free can be used.      : 
11d0			;                                                                             : 
11d0			; Parameters                                                                  : 
11d0			;     HL  Number of bytes wanted                                              : 
11d0			;                                                                             : 
11d0			; Returns                                                                     : 
11d0			;     HL  Address of the first useable byte of the allocation                 : 
11d0			;                                                                             : 
11d0			; Flags                                                                       : 
11d0			;     Z   Set if the allocation did not succeed, clear otherwise              : 
11d0			;                                                                             : 
11d0			; Stack frame                                                                 : 
11d0			;       |             |                                                       : 
11d0			;       +-------------+                                                       : 
11d0			;       |     BC      |                                                       : 
11d0			;       +-------------+                                                       : 
11d0			;       |     DE      |                                                       : 
11d0			;       +-------------+                                                       : 
11d0			;       |     IX      |                                                       : 
11d0			;       +-------------+                                                       : 
11d0			;       |  prev_free  |                                                       : 
11d0			;   +4  +-------------+                                                       : 
11d0			;       |  this_free  |                                                       : 
11d0			;   +2  +-------------+                                                       : 
11d0			;       |  next_free  |                                                       : 
11d0			;   +0  +-------------+                                                       : 
11d0			;       |             |                                                       : 
11d0			;                                                                             : 
11d0			;------------------------------------------------------------------------------ 
11d0			 
11d0			 
11d0			;malloc: 
11d0			; 
11d0			;	SAVESP ON 1 
11d0			; 
11d0			;	call malloc_code 
11d0			; 
11d0			;	CHECKSP ON 1 
11d0			;	ret 
11d0			 
11d0			 
11d0			malloc: 
11d0 c5			      push  BC 
11d1 d5			      push  DE 
11d2 dd e5		      push  IX 
11d4			if DEBUG_FORTH_MALLOC_HIGH 
11d4			call malloc_guard_entry 
11d4			endif 
11d4			 
11d4					if DEBUG_FORTH_MALLOC 
11d4						DMARK "mal" 
11d4						CALLMONITOR 
11d4					endif 
11d4 7c			      ld    A, H                    ; Exit if no space requested 
11d5 b5			      or    L 
11d6 ca 95 12		      jp    Z, malloc_early_exit 
11d9			 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			; 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			 
11d9			 
11d9			 
11d9			 
11d9					if DEBUG_FORTH_MALLOC 
11d9						DMARK "maA" 
11d9						CALLMONITOR 
11d9					endif 
11d9			      ; Set up stack frame 
11d9 eb			      ex    DE, HL 
11da 21 fa ff		      ld    HL, -6                  ; Reserve 6 bytes for stack frame 
11dd 39			      add   HL, SP 
11de f9			      ld    SP, HL 
11df dd 21 00 00	      ld    IX, 0                   ; Use IX as a frame pointer 
11e3 dd 39		      add   IX, SP 
11e5			 
11e5			      ; Setup initial state 
11e5 21 04 00		      ld    HL, 4                   ; want must also include space used by block struct 
11e8 19			      add   HL, DE 
11e9			 
11e9 44			      ld    B, H                    ; Move want to BC 
11ea 4d			      ld    C, L 
11eb			 
11eb 21 ec 5e		      ld    HL, free_list           ; Store prev_free ptr to stack 
11ee dd 75 04		      ld    (IX+4), L 
11f1 dd 74 05		      ld    (IX+5), H 
11f4			 
11f4 5e			      ld    E, (HL)                 ; Store this_free ptr to stack 
11f5 23			      inc   HL 
11f6 56			      ld    D, (HL) 
11f7 dd 73 02		      ld    (IX+2), E 
11fa dd 72 03		      ld    (IX+3), D 
11fd eb			      ex    DE, HL                  ; this_free ptr into HL 
11fe			 
11fe					if DEBUG_FORTH_MALLOC 
11fe						DMARK "maB" 
11fe						CALLMONITOR 
11fe					endif 
11fe			      ; Loop through free block list to find some space 
11fe			malloc_find_space: 
11fe 5e			      ld    E, (HL)                 ; Load next_free ptr into DE 
11ff 23			      inc   HL 
1200 56			      ld    D, (HL) 
1201			 
1201 7a			      ld    A, D                    ; Check for null next_free ptr - end of free list 
1202 b3			      or    E 
1203 ca 8f 12		      jp    Z, malloc_no_space 
1206			 
1206 dd 73 00		      ld    (IX+0), E               ; Store next_free ptr to stack 
1209 dd 72 01		      ld    (IX+1), D 
120c			 
120c			      ; Does this block have enough space to make the allocation? 
120c 23			      inc   HL                      ; Load free block size into DE 
120d 5e			      ld    E, (HL) 
120e 23			      inc   HL 
120f 56			      ld    D, (HL) 
1210			 
1210 eb			      ex    DE, HL                  ; Check size of block against want 
1211 b7			      or    A                       ; Ensure carry flag clear 
1212 ed 42		      sbc   HL, BC 
1214 e5			      push  HL                      ; Store the result for later (new block size) 
1215			 
1215 ca 64 12		      jp   Z, malloc_alloc_fit     ; Z means block size matches want - can allocate 
1218 30 1b		      jr    NC, malloc_alloc_split  ; NC means block is bigger than want - can allocate 
121a			 
121a			      ; this_free block is not big enough, setup ptrs to test next free block 
121a e1			      pop   HL                      ; Discard previous result 
121b			 
121b dd 6e 02		      ld    L, (IX+2)               ; Move this_free ptr into prev_free 
121e dd 66 03		      ld    H, (IX+3) 
1221 dd 75 04		      ld    (IX+4), L 
1224 dd 74 05		      ld    (IX+5), H 
1227			 
1227 dd 6e 00		      ld    L, (IX+0)               ; Move next_free ptr into this_free 
122a dd 66 01		      ld    H, (IX+1) 
122d dd 75 02		      ld    (IX+2), L 
1230 dd 74 03		      ld    (IX+3), H 
1233			 
1233					if DEBUG_FORTH_MALLOC 
1233						DMARK "MA>" 
1233						CALLMONITOR 
1233					endif 
1233 18 c9		      jr    malloc_find_space 
1235			 
1235			      ; split a bigger block into two - requested size and remaining size 
1235			malloc_alloc_split: 
1235					if DEBUG_FORTH_MALLOC 
1235						DMARK "MAs" 
1235						CALLMONITOR 
1235					endif 
1235 eb			      ex    DE, HL                  ; Calculate address of new free block 
1236 2b			      dec   HL 
1237 2b			      dec   HL 
1238 2b			      dec   HL 
1239 09			      add   HL, BC 
123a			 
123a			      ; Create a new block and point it at next_free 
123a dd 5e 00		      ld    E, (IX+0)               ; Load next_free ptr into DE 
123d dd 56 01		      ld    D, (IX+1) 
1240			 
1240 73			      ld    (HL), E                 ; Store next_free ptr into new block 
1241 23			      inc   HL 
1242 72			      ld    (HL), D 
1243			 
1243 d1			      pop   DE                      ; Store size of new block into new block 
1244 23			      inc   HL 
1245 73			      ld    (HL), E 
1246 23			      inc   HL 
1247 72			      ld    (HL), D 
1248			 
1248			      ; Update this_free ptr to point to new block 
1248 2b			      dec   HL 
1249 2b			      dec   HL 
124a 2b			      dec   HL 
124b			 
124b dd 5e 02		      ld    E, (IX+2)               ; Take a copy of current this_free ptr 
124e dd 56 03		      ld    D, (IX+3) 
1251			 
1251 dd 75 02		      ld    (IX+2), L               ; Store new block addr as this_free ptr 
1254 dd 74 03		      ld    (IX+3), H 
1257			 
1257			      ; Modify this_free block to be allocation 
1257 eb			      ex    DE, HL 
1258 af			      xor   A                       ; Null the next block ptr of allocated block 
1259 77			      ld    (HL), A 
125a 23			      inc   HL 
125b 77			      ld    (HL), A 
125c			 
125c 23			      inc   HL                      ; Store want size into allocated block 
125d 71			      ld    (HL), C 
125e 23			      inc   HL 
125f 70			      ld    (HL), B 
1260 23			      inc   HL 
1261 e5			      push  HL                      ; Address of allocation to return 
1262			 
1262 18 19		      jr    malloc_update_links 
1264			 
1264			malloc_alloc_fit: 
1264 e1			      pop   HL                      ; Dont need new block size, want is exact fit 
1265			 
1265					if DEBUG_FORTH_MALLOC 
1265						DMARK "MAf" 
1265						CALLMONITOR 
1265					endif 
1265			      ; Modify this_free block to be allocation 
1265 eb			      ex    DE, HL 
1266 2b			      dec   HL 
1267 2b			      dec   HL 
1268 2b			      dec   HL 
1269			 
1269 af			      xor   A                       ; Null the next block ptr of allocated block 
126a 77			      ld    (HL), A 
126b 23			      inc   HL 
126c 77			      ld    (HL), A 
126d			 
126d 23			      inc   HL                      ; Store address of allocation to return 
126e 23			      inc   HL 
126f 23			      inc   HL 
1270 e5			      push  HL 
1271			 
1271			      ; Copy next_free ptr to this_free, remove allocated block from free list 
1271 dd 6e 00		      ld    L, (IX+0)               ; next_free to HL 
1274 dd 66 01		      ld    H, (IX+1) 
1277			 
1277 dd 75 02		      ld    (IX+2), L               ; HL to this_free 
127a dd 74 03		      ld    (IX+3), H 
127d			 
127d			 
127d			malloc_update_links: 
127d			      ; Update prev_free ptr to point to this_free 
127d dd 6e 04		      ld    L, (IX+4)               ; prev_free ptr to HL 
1280 dd 66 05		      ld    H, (IX+5) 
1283			 
1283 dd 5e 02		      ld    E, (IX+2)               ; this_free ptr to DE 
1286 dd 56 03		      ld    D, (IX+3) 
1289			 
1289 73			      ld    (HL), E                 ; this_free ptr into prev_free 
128a 23			      inc   HL 
128b 72			      ld    (HL), D 
128c			 
128c					if DEBUG_FORTH_MALLOC 
128c						DMARK "Mul" 
128c						CALLMONITOR 
128c					endif 
128c			      ; Clear the Z flag to indicate successful allocation 
128c 7a			      ld    A, D 
128d b3			      or    E 
128e			 
128e d1			      pop   DE                      ; Address of allocation 
128f					if DEBUG_FORTH_MALLOC 
128f						DMARK "MAu" 
128f						CALLMONITOR 
128f					endif 
128f			 
128f			malloc_no_space: 
128f 21 06 00		      ld    HL, 6                   ; Clean up stack frame 
1292 39			      add   HL, SP 
1293 f9			      ld    SP, HL 
1294			 
1294 eb			      ex    DE, HL                  ; Alloc addr into HL for return 
1295					if DEBUG_FORTH_MALLOC 
1295						DMARK "MAN" 
1295						CALLMONITOR 
1295					endif 
1295			 
1295			malloc_early_exit: 
1295					if DEBUG_FORTH_MALLOC 
1295						DMARK "MAx" 
1295						CALLMONITOR 
1295					endif 
1295 dd e1		      pop   IX 
1297 d1			      pop   DE 
1298 c1			      pop   BC 
1299			 
1299			if DEBUG_FORTH_MALLOC_HIGH 
1299			call malloc_guard_exit 
1299			call malloc_guard_zerolen 
1299			endif 
1299 c9			      ret 
129a			 
129a			 
129a			;------------------------------------------------------------------------------ 
129a			;     free                                                                    : 
129a			;                                                                             : 
129a			; Description                                                                 : 
129a			;     Return the space pointed to by HL to the heap. HL must be an address as : 
129a			;     returned by malloc, otherwise the behaviour is undefined.               : 
129a			;                                                                             : 
129a			;     Where possible, directly adjacent free blocks will be merged together   : 
129a			;     into larger blocks to help ensure that the heap does not become         : 
129a			;     excessively fragmented.                                                 : 
129a			;                                                                             : 
129a			;     free does not clear or set any other value into the freed space, and    : 
129a			;     therefore its contents may be visible through subsequent malloc's. The  : 
129a			;     caller should clear the freed space as required.                        : 
129a			;                                                                             : 
129a			;     This implementation of free uses the stack exclusively, and is          : 
129a			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
129a			;     advisable to disable interrupts before calling free, and recommended    : 
129a			;     to avoid the use of free inside ISRs in general.                        : 
129a			;                                                                             : 
129a			;     NOTE: heap_init must be called before malloc and free can be used.      : 
129a			;                                                                             : 
129a			; Parameters                                                                  : 
129a			;     HL  Pointer to address of first byte of allocation to be freed          : 
129a			;                                                                             : 
129a			; Returns                                                                     : 
129a			;     Nothing                                                                 : 
129a			;                                                                             : 
129a			; Stack frame                                                                 : 
129a			;       |             |                                                       : 
129a			;       +-------------+                                                       : 
129a			;       |     BC      |                                                       : 
129a			;       +-------------+                                                       : 
129a			;       |     DE      |                                                       : 
129a			;       +-------------+                                                       : 
129a			;       |     IX      |                                                       : 
129a			;       +-------------+                                                       : 
129a			;       |  prev_free  |                                                       : 
129a			;   +2  +-------------+                                                       : 
129a			;       |  next_free  |                                                       : 
129a			;   +0  +-------------+                                                       : 
129a			;       |             |                                                       : 
129a			;                                                                             : 
129a			;------------------------------------------------------------------------------ 
129a			free: 
129a c5			      push  BC 
129b d5			      push  DE 
129c dd e5		      push  IX 
129e			 
129e 7c			      ld    A, H                    ; Exit if ptr is null 
129f b5			      or    L 
12a0 ca 64 13		      jp    Z, free_early_exit 
12a3			 
12a3			      ; Set up stack frame 
12a3 eb			      ex    DE, HL 
12a4 21 fc ff		      ld    HL, -4                  ; Reserve 4 bytes for stack frame 
12a7 39			      add   HL, SP 
12a8 f9			      ld    SP, HL 
12a9 dd 21 00 00	      ld    IX, 0                   ; Use IX as a frame pointer 
12ad dd 39		      add   IX, SP 
12af			 
12af			      ; The address in HL points to the start of the useable allocated space, 
12af			      ; but the block struct starts 4 bytes before this. Sub 4 to get the 
12af			      ; address of the block itself. 
12af eb			      ex    DE, HL 
12b0 11 fc ff		      ld    DE, -4 
12b3 19			      add   HL, DE 
12b4			 
12b4			      ; An allocated block must have a null next block pointer in it 
12b4 7e			      ld    A, (HL) 
12b5 23			      inc   HL 
12b6 b6			      or    (HL) 
12b7 c2 5f 13		      jp    NZ, free_done 
12ba			 
12ba 2b			      dec   HL 
12bb			 
12bb 44			      ld    B, H                    ; Copy HL to BC 
12bc 4d			      ld    C, L 
12bd			 
12bd			      ; Loop through the free list to find the first block with an address 
12bd			      ; higher than the block being freed 
12bd 21 ec 5e		      ld    HL, free_list 
12c0			 
12c0			free_find_higher_block: 
12c0 5e			      ld    E, (HL)                 ; Load next ptr from free block 
12c1 23			      inc   HL 
12c2 56			      ld    D, (HL) 
12c3 2b			      dec   HL 
12c4			 
12c4 dd 73 00		      ld    (IX+0), E               ; Save ptr to next free block 
12c7 dd 72 01		      ld    (IX+1), D 
12ca dd 75 02		      ld    (IX+2), L               ; Save ptr to prev free block 
12cd dd 74 03		      ld    (IX+3), H 
12d0			 
12d0 78			      ld    A, B                    ; Check if DE is greater than BC 
12d1 ba			      cp    D                       ; Compare MSB first 
12d2 28 02		      jr    Z, $+4                  ; MSB the same, compare LSB 
12d4 30 04		      jr    NC, free_find_higher_block_skip 
12d6 79			      ld    A, C 
12d7 bb			      cp    E                       ; Then compare LSB 
12d8 38 08		      jr    C, free_found_higher_block 
12da			 
12da			free_find_higher_block_skip: 
12da 7a			      ld    A, D                    ; Reached the end of the free list? 
12db b3			      or    E 
12dc ca 5f 13		      jp    Z, free_done 
12df			 
12df eb			      ex    DE, HL 
12e0			 
12e0 18 de		      jr    free_find_higher_block 
12e2			 
12e2			free_found_higher_block: 
12e2			      ; Insert freed block between prev and next free blocks 
12e2 71			      ld    (HL), C                 ; Point prev free block to freed block 
12e3 23			      inc   HL 
12e4 70			      ld    (HL), B 
12e5			 
12e5 60			      ld    H, B                    ; Point freed block at next free block 
12e6 69			      ld    L, C 
12e7 73			      ld    (HL), E 
12e8 23			      inc   HL 
12e9 72			      ld    (HL), D 
12ea			 
12ea			      ; Check if the freed block is adjacent to the next free block 
12ea 23			      inc   HL                      ; Load size of freed block into HL 
12eb 5e			      ld    E, (HL) 
12ec 23			      inc   HL 
12ed 56			      ld    D, (HL) 
12ee eb			      ex    DE, HL 
12ef			 
12ef 09			      add   HL, BC                  ; Add addr of freed block and its size 
12f0			 
12f0 dd 5e 00		      ld    E, (IX+0)               ; Load addr of next free block into DE 
12f3 dd 56 01		      ld    D, (IX+1) 
12f6			 
12f6 b7			      or    A                       ; Clear the carry flag 
12f7 ed 52		      sbc   HL, DE                  ; Subtract addrs to compare adjacency 
12f9 20 22		      jr    NZ, free_check_adjacent_to_prev 
12fb			 
12fb			      ; Freed block is adjacent to next, merge into one bigger block 
12fb eb			      ex    DE, HL                  ; Load next ptr from next block into DE 
12fc 5e			      ld    E, (HL) 
12fd 23			      inc   HL 
12fe 56			      ld    D, (HL) 
12ff e5			      push  HL                      ; Save ptr to next block for later 
1300			 
1300 60			      ld    H, B                    ; Store ptr from next block into freed block 
1301 69			      ld    L, C 
1302 73			      ld    (HL), E 
1303 23			      inc   HL 
1304 72			      ld    (HL), D 
1305			 
1305 e1			      pop   HL                      ; Restore ptr to next block 
1306 23			      inc   HL                      ; Load size of next block into DE 
1307 5e			      ld    E, (HL) 
1308 23			      inc   HL 
1309 56			      ld    D, (HL) 
130a d5			      push  DE                      ; Save next block size for later 
130b			 
130b 60			      ld    H, B                    ; Load size of freed block into HL 
130c 69			      ld    L, C 
130d 23			      inc   HL 
130e 23			      inc   HL 
130f 5e			      ld    E, (HL) 
1310 23			      inc   HL 
1311 56			      ld    D, (HL) 
1312 eb			      ex    DE, HL 
1313			 
1313 d1			      pop   DE                      ; Restore size of next block 
1314 19			      add   HL, DE                  ; Add sizes of both blocks 
1315 eb			      ex    DE, HL 
1316			 
1316 60			      ld    H, B                    ; Store new bigger size into freed block 
1317 69			      ld    L, C 
1318 23			      inc   HL 
1319 23			      inc   HL 
131a 73			      ld    (HL), E 
131b 23			      inc   HL 
131c 72			      ld    (HL), D 
131d			 
131d			free_check_adjacent_to_prev: 
131d			      ; Check if the freed block is adjacent to the prev free block 
131d dd 6e 02		      ld    L, (IX+2)               ; Prev free block ptr into HL 
1320 dd 66 03		      ld    H, (IX+3) 
1323			 
1323 23			      inc   HL                      ; Size of prev free block into DE 
1324 23			      inc   HL 
1325 5e			      ld    E, (HL) 
1326 23			      inc   HL 
1327 56			      ld    D, (HL) 
1328 2b			      dec   HL 
1329 2b			      dec   HL 
132a 2b			      dec   HL 
132b			 
132b 19			      add   HL, DE                  ; Add prev block addr and size 
132c			 
132c b7			      or    A                       ; Clear the carry flag 
132d ed 42		      sbc   HL, BC                  ; Subtract addrs to compare adjacency 
132f 20 2e		      jr    NZ, free_done 
1331			 
1331			      ; Freed block is adjacent to prev, merge into one bigger block 
1331 60			      ld    H, B                    ; Load next ptr from freed block into DE 
1332 69			      ld    L, C 
1333 5e			      ld    E, (HL) 
1334 23			      inc   HL 
1335 56			      ld    D, (HL) 
1336 e5			      push  HL                      ; Save freed block ptr for later 
1337			 
1337 dd 6e 02		      ld    L, (IX+2)               ; Store freed block ptr into prev block 
133a dd 66 03		      ld    H, (IX+3) 
133d 73			      ld    (HL), E 
133e 23			      inc   HL 
133f 72			      ld    (HL), D 
1340			 
1340 e1			      pop   HL                      ; Restore freed block ptr 
1341 23			      inc   HL                      ; Load size of freed block into DE 
1342 5e			      ld    E, (HL) 
1343 23			      inc   HL 
1344 56			      ld    D, (HL) 
1345 d5			      push  DE                      ; Save freed block size for later 
1346			 
1346 dd 6e 02		      ld    L, (IX+2)               ; Load size of prev block into DE 
1349 dd 66 03		      ld    H, (IX+3) 
134c 23			      inc   HL 
134d 23			      inc   HL 
134e 5e			      ld    E, (HL) 
134f 23			      inc   HL 
1350 56			      ld    D, (HL) 
1351			 
1351 e1			      pop   HL                      ; Add sizes of both blocks 
1352 19			      add   HL, DE 
1353 eb			      ex    DE, HL 
1354			 
1354 dd 6e 02		      ld    L, (IX+2)               ; Store new bigger size into prev block 
1357 dd 66 03		      ld    H, (IX+3) 
135a 23			      inc   HL 
135b 23			      inc   HL 
135c 73			      ld    (HL), E 
135d 23			      inc   HL 
135e 72			      ld    (HL), D 
135f			 
135f			free_done: 
135f 21 04 00		      ld    HL, 4                   ; Clean up stack frame 
1362 39			      add   HL, SP 
1363 f9			      ld    SP, HL 
1364			 
1364			free_early_exit: 
1364 dd e1		      pop   IX 
1366 d1			      pop   DE 
1367 c1			      pop   BC 
1368			 
1368 c9			      ret 
1369			 
1369			; moved to firmware.asm 
1369			; 
1369			;free_list         .dw   0     ; Block struct for start of free list (MUST be 4 bytes) 
1369			;                  .dw   0 
1369			 
1369			 
1369			endif 
1369			 
1369			 
1369			if MALLOC_3 
1369			; https://gist.githubusercontent.com/tomstorey/947a8b084bad69391a4b2a1c5b6d69ca/raw/5a08fb30a480d98c0deb4a6afe2d48961cc8e9d9/z80_malloc.s 
1369			;heap_start        .equ  0x9000      ; Starting address of heap 
1369			;heap_size         .equ  0x0100      ; Number of bytes available in heap 
1369			; 
1369			 ;     .org 0 
1369			  ;    jp    main 
1369			; 
1369			; 
1369			 ;     .org  0x100 
1369			;main: 
1369			 ;     ld    HL, 0x8100 
1369			  ;    ld    SP, HL 
1369			; 
1369			;      call  heap_init 
1369			 
1369			      ; Make some allocations 
1369			;      ld    HL, 12 
1369			;      call  malloc            ; Allocates 0x9004 
1369			; 
1369			 ;     ld    HL, 12 
1369			;      call  malloc            ; Allocates 0x9014 
1369			 
1369			;      ld    HL, 12 
1369			;      call  malloc            ; Allocates 0x9024 
1369			 
1369			      ; Free some allocations 
1369			;      ld    HL, 0x9014 
1369			;      call  free 
1369			 
1369			;      ld    HL, 0x9004 
1369			;      call  free 
1369			; 
1369			;      ld    HL, 0x9024 
1369			;      call  free 
1369			 
1369			 
1369			 ;     halt 
1369			 
1369			 
1369			;------------------------------------------------------------------------------ 
1369			;     heap_init                                                               : 
1369			;                                                                             : 
1369			; Description                                                                 : 
1369			;     Initialise the heap and make it ready for malloc and free operations.   : 
1369			;                                                                             : 
1369			;     The heap is maintained as a linked list, starting with an initial       : 
1369			;     "dummy block" of zero size which is mainly used to hold a pointer to    : 
1369			;     the first free block in the heap. Each block then points to the next    : 
1369			;     free block within the heap, and the free list ends at the first block   : 
1369			;     with a null pointer to the next free block.                             : 
1369			;                                                                             : 
1369			; Parameters                                                                  : 
1369			;     Inputs are compile-time only. Two defines which specify the starting    : 
1369			;     address of the heap and its size are required, along with a memory      : 
1369			;     allocation of 4 consecutive bytes which is used for a dummy block which : 
1369			;     principally stores a pointer to the first free block in the heap.       : 
1369			;                                                                             : 
1369			; Returns                                                                     : 
1369			;     Nothing                                                                 : 
1369			;------------------------------------------------------------------------------ 
1369			heap_init: 
1369			      push  HL 
1369			 
1369			      ; Initialise free list struct 
1369			      ld    HL, heap_start 
1369			      ld    (free_list), HL 
1369			      ld    HL, 0 
1369			      ld    (free_list+2), HL 
1369			 
1369			      ; Insert first free block at bottom of heap, consumes entire heap 
1369			      ld    HL, heap_start+heap_size-4 
1369			      ld    (heap_start), HL        ; Next block (end of free list) 
1369			      ld    HL, heap_size-4 
1369			      ld    (heap_start+2), HL      ; Block size 
1369			 
1369			      ; Insert end of free list block at top of heap - two null words will 
1369			      ; terminate the free list 
1369			      ld    HL, 0 
1369			      ld    (heap_start+heap_size-2), HL 
1369			      ld    (heap_start+heap_size-4), HL 
1369			 
1369			      pop   HL 
1369			 
1369			      ret 
1369			 
1369			 
1369			;------------------------------------------------------------------------------ 
1369			;     malloc                                                                  : 
1369			;                                                                             : 
1369			; Description                                                                 : 
1369			;     Allocates the wanted space from the heap and returns the address of the : 
1369			;     first useable byte of the allocation.                                   : 
1369			;                                                                             : 
1369			;     Allocations can happen in one of two ways:                              : 
1369			;                                                                             : 
1369			;     1. A free block may be found which is the exact size wanted. In this    : 
1369			;        case the block is removed from the free list and retuedn to the      : 
1369			;        caller.                                                              : 
1369			;     2. A free block may be found which is larger than the size wanted. In   : 
1369			;        this case, the larger block is split into two. The first portion of  : 
1369			;        this block will become the requested space by the malloc call and    : 
1369			;        is returned to the caller. The second portion becomes a new free     : 
1369			;        block, and the free list is adjusted to maintain continuity via this : 
1369			;        newly created block.                                                 : 
1369			;                                                                             : 
1369			;     malloc does not set any initial value in the allocated space, the       : 
1369			;     caller is required to do this as required.                              : 
1369			;                                                                             : 
1369			;     This implementation of malloc uses the stack exclusively, and is        : 
1369			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
1369			;     advisable to disable interrupts before calling malloc, and recommended  : 
1369			;     to avoid the use of malloc inside ISRs in general.                      : 
1369			;                                                                             : 
1369			;     NOTE: heap_init must be called before malloc and free can be used.      : 
1369			;                                                                             : 
1369			; Parameters                                                                  : 
1369			;     HL  Number of bytes wanted                                              : 
1369			;                                                                             : 
1369			; Returns                                                                     : 
1369			;     HL  Address of the first useable byte of the allocation                 : 
1369			;                                                                             : 
1369			; Flags                                                                       : 
1369			;     Z   Set if the allocation did not succeed, clear otherwise              : 
1369			;                                                                             : 
1369			; Stack frame                                                                 : 
1369			;       |             |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |     BC      |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |     DE      |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |     IX      |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |  prev_free  |                                                       : 
1369			;   +4  +-------------+                                                       : 
1369			;       |  this_free  |                                                       : 
1369			;   +2  +-------------+                                                       : 
1369			;       |  next_free  |                                                       : 
1369			;   +0  +-------------+                                                       : 
1369			;       |             |                                                       : 
1369			;                                                                             : 
1369			;------------------------------------------------------------------------------ 
1369			malloc: 
1369			      push  BC 
1369			      push  DE 
1369			      push  IX 
1369			 
1369			      ld    A, H                    ; Exit if no space requested 
1369			      or    L 
1369			      jp    Z, malloc_early_exit 
1369			 
1369			      ; Set up stack frame 
1369			      ex    DE, HL 
1369			      ld    HL, -6                  ; Reserve 6 bytes for stack frame 
1369			      add   HL, SP 
1369			      ld    SP, HL 
1369			      ld    IX, 0                   ; Use IX as a frame pointer 
1369			      add   IX, SP 
1369			 
1369			      ; Setup initial state 
1369			      ld    HL, 4                   ; want must also include space used by block struct 
1369			      add   HL, DE 
1369			 
1369			      ld    B, H                    ; Move want to BC 
1369			      ld    C, L 
1369			 
1369			      ld    HL, free_list           ; Store prev_free ptr to stack 
1369			      ld    (IX+4), L 
1369			      ld    (IX+5), H 
1369			 
1369			      ld    E, (HL)                 ; Store this_free ptr to stack 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      ld    (IX+2), E 
1369			      ld    (IX+3), D 
1369			      ex    DE, HL                  ; this_free ptr into HL 
1369			 
1369			      ; Loop through free block list to find some space 
1369			malloc_find_space: 
1369			      ld    E, (HL)                 ; Load next_free ptr into DE 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			 
1369			      ld    A, D                    ; Check for null next_free ptr - end of free list 
1369			      or    E 
1369			      jp    Z, malloc_no_space 
1369			 
1369			      ld    (IX+0), E               ; Store next_free ptr to stack 
1369			      ld    (IX+1), D 
1369			 
1369			      ; Does this block have enough space to make the allocation? 
1369			      inc   HL                      ; Load free block size into DE 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			 
1369			      ex    DE, HL                  ; Check size of block against want 
1369			      or    A                       ; Ensure carry flag clear 
1369			      sbc   HL, BC 
1369			      push  HL                      ; Store the result for later (new block size) 
1369			 
1369			      jr    Z, malloc_alloc_fit     ; Z means block size matches want - can allocate 
1369			      jr    NC, malloc_alloc_split  ; NC means block is bigger than want - can allocate 
1369			 
1369			      ; this_free block is not big enough, setup ptrs to test next free block 
1369			      pop   HL                      ; Discard previous result 
1369			 
1369			      ld    L, (IX+2)               ; Move this_free ptr into prev_free 
1369			      ld    H, (IX+3) 
1369			      ld    (IX+4), L 
1369			      ld    (IX+5), H 
1369			 
1369			      ld    L, (IX+0)               ; Move next_free ptr into this_free 
1369			      ld    H, (IX+1) 
1369			      ld    (IX+2), L 
1369			      ld    (IX+3), H 
1369			 
1369			      jr    malloc_find_space 
1369			 
1369			      ; split a bigger block into two - requested size and remaining size 
1369			malloc_alloc_split: 
1369			      ex    DE, HL                  ; Calculate address of new free block 
1369			      dec   HL 
1369			      dec   HL 
1369			      dec   HL 
1369			      add   HL, BC 
1369			 
1369			      ; Create a new block and point it at next_free 
1369			      ld    E, (IX+0)               ; Load next_free ptr into DE 
1369			      ld    D, (IX+1) 
1369			 
1369			      ld    (HL), E                 ; Store next_free ptr into new block 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			      pop   DE                      ; Store size of new block into new block 
1369			      inc   HL 
1369			      ld    (HL), E 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			      ; Update this_free ptr to point to new block 
1369			      dec   HL 
1369			      dec   HL 
1369			      dec   HL 
1369			 
1369			      ld    E, (IX+2)               ; Take a copy of current this_free ptr 
1369			      ld    D, (IX+3) 
1369			 
1369			      ld    (IX+2), L               ; Store new block addr as this_free ptr 
1369			      ld    (IX+3), H 
1369			 
1369			      ; Modify this_free block to be allocation 
1369			      ex    DE, HL 
1369			      xor   A                       ; Null the next block ptr of allocated block 
1369			      ld    (HL), A 
1369			      inc   HL 
1369			      ld    (HL), A 
1369			 
1369			      inc   HL                      ; Store want size into allocated block 
1369			      ld    (HL), C 
1369			      inc   HL 
1369			      ld    (HL), B 
1369			      inc   HL 
1369			      push  HL                      ; Address of allocation to return 
1369			 
1369			      jr    malloc_update_links 
1369			 
1369			malloc_alloc_fit: 
1369			      pop   HL                      ; Dont need new block size, want is exact fit 
1369			 
1369			      ; Modify this_free block to be allocation 
1369			      ex    DE, HL 
1369			      dec   HL 
1369			      dec   HL 
1369			      dec   HL 
1369			 
1369			      xor   A                       ; Null the next block ptr of allocated block 
1369			      ld    (HL), A 
1369			      inc   HL 
1369			      ld    (HL), A 
1369			 
1369			      inc   HL                      ; Store address of allocation to return 
1369			      inc   HL 
1369			      inc   HL 
1369			      push  HL 
1369			 
1369			      ; Copy next_free ptr to this_free, remove allocated block from free list 
1369			      ld    L, (IX+0)               ; next_free to HL 
1369			      ld    H, (IX+1) 
1369			 
1369			      ld    (IX+2), L               ; HL to this_free 
1369			      ld    (IX+3), H 
1369			 
1369			 
1369			malloc_update_links: 
1369			      ; Update prev_free ptr to point to this_free 
1369			      ld    L, (IX+4)               ; prev_free ptr to HL 
1369			      ld    H, (IX+5) 
1369			 
1369			      ld    E, (IX+2)               ; this_free ptr to DE 
1369			      ld    D, (IX+3) 
1369			 
1369			      ld    (HL), E                 ; this_free ptr into prev_free 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			      ; Clear the Z flag to indicate successful allocation 
1369			      ld    A, D 
1369			      or    E 
1369			 
1369			      pop   DE                      ; Address of allocation 
1369			 
1369			malloc_no_space: 
1369			      ld    HL, 6                   ; Clean up stack frame 
1369			      add   HL, SP 
1369			      ld    SP, HL 
1369			 
1369			      ex    DE, HL                  ; Alloc addr into HL for return 
1369			 
1369			malloc_early_exit: 
1369			      pop   IX 
1369			      pop   DE 
1369			      pop   BC 
1369			 
1369			      ret 
1369			 
1369			 
1369			;------------------------------------------------------------------------------ 
1369			;     free                                                                    : 
1369			;                                                                             : 
1369			; Description                                                                 : 
1369			;     Return the space pointed to by HL to the heap. HL must be an address as : 
1369			;     returned by malloc, otherwise the behaviour is undefined.               : 
1369			;                                                                             : 
1369			;     Where possible, directly adjacent free blocks will be merged together   : 
1369			;     into larger blocks to help ensure that the heap does not become         : 
1369			;     excessively fragmented.                                                 : 
1369			;                                                                             : 
1369			;     free does not clear or set any other value into the freed space, and    : 
1369			;     therefore its contents may be visible through subsequent malloc's. The  : 
1369			;     caller should clear the freed space as required.                        : 
1369			;                                                                             : 
1369			;     This implementation of free uses the stack exclusively, and is          : 
1369			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
1369			;     advisable to disable interrupts before calling free, and recommended    : 
1369			;     to avoid the use of free inside ISRs in general.                        : 
1369			;                                                                             : 
1369			;     NOTE: heap_init must be called before malloc and free can be used.      : 
1369			;                                                                             : 
1369			; Parameters                                                                  : 
1369			;     HL  Pointer to address of first byte of allocation to be freed          : 
1369			;                                                                             : 
1369			; Returns                                                                     : 
1369			;     Nothing                                                                 : 
1369			;                                                                             : 
1369			; Stack frame                                                                 : 
1369			;       |             |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |     BC      |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |     DE      |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |     IX      |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |  prev_free  |                                                       : 
1369			;   +2  +-------------+                                                       : 
1369			;       |  next_free  |                                                       : 
1369			;   +0  +-------------+                                                       : 
1369			;       |             |                                                       : 
1369			;                                                                             : 
1369			;------------------------------------------------------------------------------ 
1369			free: 
1369			      push  BC 
1369			      push  DE 
1369			      push  IX 
1369			 
1369			      ld    A, H                    ; Exit if ptr is null 
1369			      or    L 
1369			      jp    Z, free_early_exit 
1369			 
1369			      ; Set up stack frame 
1369			      ex    DE, HL 
1369			      ld    HL, -4                  ; Reserve 4 bytes for stack frame 
1369			      add   HL, SP 
1369			      ld    SP, HL 
1369			      ld    IX, 0                   ; Use IX as a frame pointer 
1369			      add   IX, SP 
1369			 
1369			      ; The address in HL points to the start of the useable allocated space, 
1369			      ; but the block struct starts 4 bytes before this. Sub 4 to get the 
1369			      ; address of the block itself. 
1369			      ex    DE, HL 
1369			      ld    DE, -4 
1369			      add   HL, DE 
1369			 
1369			      ; An allocated block must have a null next block pointer in it 
1369			      ld    A, (HL) 
1369			      inc   HL 
1369			      or    (HL) 
1369			      jp    NZ, free_done 
1369			 
1369			      dec   HL 
1369			 
1369			      ld    B, H                    ; Copy HL to BC 
1369			      ld    C, L 
1369			 
1369			      ; Loop through the free list to find the first block with an address 
1369			      ; higher than the block being freed 
1369			      ld    HL, free_list 
1369			 
1369			free_find_higher_block: 
1369			      ld    E, (HL)                 ; Load next ptr from free block 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      dec   HL 
1369			 
1369			      ld    (IX+0), E               ; Save ptr to next free block 
1369			      ld    (IX+1), D 
1369			      ld    (IX+2), L               ; Save ptr to prev free block 
1369			      ld    (IX+3), H 
1369			 
1369			      ld    A, B                    ; Check if DE is greater than BC 
1369			      cp    D                       ; Compare MSB first 
1369			      jr    Z, $+4                  ; MSB the same, compare LSB 
1369			      jr    NC, free_find_higher_block_skip 
1369			      ld    A, C 
1369			      cp    E                       ; Then compare LSB 
1369			      jr    C, free_found_higher_block 
1369			 
1369			free_find_higher_block_skip: 
1369			      ld    A, D                    ; Reached the end of the free list? 
1369			      or    E 
1369			      jp    Z, free_done 
1369			 
1369			      ex    DE, HL 
1369			 
1369			      jr    free_find_higher_block 
1369			 
1369			free_found_higher_block: 
1369			      ; Insert freed block between prev and next free blocks 
1369			      ld    (HL), C                 ; Point prev free block to freed block 
1369			      inc   HL 
1369			      ld    (HL), B 
1369			 
1369			      ld    H, B                    ; Point freed block at next free block 
1369			      ld    L, C 
1369			      ld    (HL), E 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			      ; Check if the freed block is adjacent to the next free block 
1369			      inc   HL                      ; Load size of freed block into HL 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      ex    DE, HL 
1369			 
1369			      add   HL, BC                  ; Add addr of freed block and its size 
1369			 
1369			      ld    E, (IX+0)               ; Load addr of next free block into DE 
1369			      ld    D, (IX+1) 
1369			 
1369			      or    A                       ; Clear the carry flag 
1369			      sbc   HL, DE                  ; Subtract addrs to compare adjacency 
1369			      jr    NZ, free_check_adjacent_to_prev 
1369			 
1369			      ; Freed block is adjacent to next, merge into one bigger block 
1369			      ex    DE, HL                  ; Load next ptr from next block into DE 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      push  HL                      ; Save ptr to next block for later 
1369			 
1369			      ld    H, B                    ; Store ptr from next block into freed block 
1369			      ld    L, C 
1369			      ld    (HL), E 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			      pop   HL                      ; Restore ptr to next block 
1369			      inc   HL                      ; Load size of next block into DE 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      push  DE                      ; Save next block size for later 
1369			 
1369			      ld    H, B                    ; Load size of freed block into HL 
1369			      ld    L, C 
1369			      inc   HL 
1369			      inc   HL 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      ex    DE, HL 
1369			 
1369			      pop   DE                      ; Restore size of next block 
1369			      add   HL, DE                  ; Add sizes of both blocks 
1369			      ex    DE, HL 
1369			 
1369			      ld    H, B                    ; Store new bigger size into freed block 
1369			      ld    L, C 
1369			      inc   HL 
1369			      inc   HL 
1369			      ld    (HL), E 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			free_check_adjacent_to_prev: 
1369			      ; Check if the freed block is adjacent to the prev free block 
1369			      ld    L, (IX+2)               ; Prev free block ptr into HL 
1369			      ld    H, (IX+3) 
1369			 
1369			      inc   HL                      ; Size of prev free block into DE 
1369			      inc   HL 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      dec   HL 
1369			      dec   HL 
1369			      dec   HL 
1369			 
1369			      add   HL, DE                  ; Add prev block addr and size 
1369			 
1369			      or    A                       ; Clear the carry flag 
1369			      sbc   HL, BC                  ; Subtract addrs to compare adjacency 
1369			      jr    NZ, free_done 
1369			 
1369			      ; Freed block is adjacent to prev, merge into one bigger block 
1369			      ld    H, B                    ; Load next ptr from freed block into DE 
1369			      ld    L, C 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      push  HL                      ; Save freed block ptr for later 
1369			 
1369			      ld    L, (IX+2)               ; Store freed block ptr into prev block 
1369			      ld    H, (IX+3) 
1369			      ld    (HL), E 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			      pop   HL                      ; Restore freed block ptr 
1369			      inc   HL                      ; Load size of freed block into DE 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      push  DE                      ; Save freed block size for later 
1369			 
1369			      ld    L, (IX+2)               ; Load size of prev block into DE 
1369			      ld    H, (IX+3) 
1369			      inc   HL 
1369			      inc   HL 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			 
1369			      pop   HL                      ; Add sizes of both blocks 
1369			      add   HL, DE 
1369			      ex    DE, HL 
1369			 
1369			      ld    L, (IX+2)               ; Store new bigger size into prev block 
1369			      ld    H, (IX+3) 
1369			      inc   HL 
1369			      inc   HL 
1369			      ld    (HL), E 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			free_done: 
1369			      ld    HL, 4                   ; Clean up stack frame 
1369			      add   HL, SP 
1369			      ld    SP, HL 
1369			 
1369			free_early_exit: 
1369			      pop   IX 
1369			      pop   DE 
1369			      pop   BC 
1369			 
1369			      ret 
1369			 
1369			 
1369			;      .org 0x8000 
1369			; 
1369			;free_list         .dw   0     ; Block struct for start of free list (MUST be 4 bytes) 
1369			 ;                 .dw   0 
1369			 
1369			endif 
1369			 
1369			 
1369			if MALLOC_4 
1369			 
1369			; My memory allocation code. Very very simple.... 
1369			; allocate space under 250 chars 
1369			 
1369			heap_init: 
1369				; init start of heap as zero 
1369				;  
1369			 
1369				ld hl, heap_start 
1369				ld a, 0 
1369				ld (hl), a      ; empty block 
1369				inc hl 
1369				ld a, 0 
1369				ld (hl), a      ; length of block 
1369				; write end of list 
1369				inc hl 
1369				ld a,(hl) 
1369				inc hl 
1369				ld a,(hl) 
1369				 
1369			 
1369				; init some malloc vars 
1369			 
1369				ld hl, 0 
1369				ld (free_list), hl       ; store last malloc location 
1369			 
1369				ld hl, free_list+3      ; flag for 'free' being used and force a rescan for reuse of block  
1369				ld a, 0 
1369				ld (hl), a 
1369			 
1369			 
1369				ld hl, heap_start 
1369				;  
1369				  
1369				ret 
1369			 
1369			 
1369			;    free block marker 
1369			;    requested size  
1369			;    pointer to next block 
1369			;    .... 
1369			;    next block marker 
1369			 
1369			 
1369			; TODO add a flag that is reset on use of free. if flag is reset then start scan from start of heap otherwise use last location 
1369			; 
1369			 
1369			 
1369			malloc:  
1369				push de 
1369				push bc 
1369				push af 
1369			 
1369				; hl space required 
1369				 
1369				ld c, l    ; hold space   (TODO only a max of 255) 
1369			 
1369			;	inc c     ; TODO BUG need to fix memory leak on push str 
1369			;	inc c 
1369			;	inc c 
1369			;	inc c 
1369			;	inc c 
1369			;	inc c 
1369			;	inc c 
1369			 
1369			 
1369			 
1369				; start at heap if a free has been issued so we can reclaim it otherwise continue from last time 
1369			 
1369				ld a, (free_list+3) 
1369				cp 0 
1369				jr z, .contheap 
1369			 
1369				ld hl, (free_list)     ; get last alloc 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "mrs" 
1369						CALLMONITOR 
1369					endif 
1369				jr .startalloc 
1369			 
1369			.contheap: 
1369				ld hl, heap_start 
1369			 
1369			.startalloc: 
1369			 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "mym" 
1369						CALLMONITOR 
1369					endif 
1369			.findblock: 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "mmf" 
1369						CALLMONITOR 
1369					endif 
1369			 
1369				ld a,(hl)  
1369				; if byte is zero then clear to use 
1369			 
1369				cp 0 
1369				jr z, .foundemptyblock 
1369			 
1369				; if byte is not clear 
1369				;     then byte is offset to next block 
1369			 
1369				inc hl 
1369				ld a, (hl) ; get size 
1369			.nextblock:	inc hl 
1369					ld e, (hl) 
1369					inc hl 
1369					ld d, (hl) 
1369					ex de, hl 
1369			;	inc hl  ; move past the store space 
1369			;	inc hl  ; move past zero index  
1369			 
1369				; TODO detect no more space 
1369			 
1369				push hl 
1369				ld de, heap_end 
1369				call cmp16 
1369				pop hl 
1369				jr nc, .nospace 
1369			 
1369				jr .findblock 
1369			 
1369			.nospace: ld hl, 0 
1369				jp .exit 
1369			 
1369			 
1369			.foundemptyblock:	 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "mme" 
1369						CALLMONITOR 
1369					endif 
1369			 
1369			; TODO has block enough space if reusing??? 
1369			 
1369				;  
1369			 
1369			; see if this block has been previously used 
1369				inc hl 
1369				ld a, (hl) 
1369				dec hl 
1369				cp 0 
1369				jr z, .newblock 
1369			 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "meR" 
1369						CALLMONITOR 
1369					endif 
1369			 
1369			; no reusing previously allocated block 
1369			 
1369			; is it smaller than previously used? 
1369				 
1369				inc hl    ; move to size 
1369				ld a, c 
1369				sub (hl)        ; we want c < (hl) 
1369				dec hl    ; move back to marker 
1369			        jr z, .findblock 
1369			 
1369				; update with the new size which should be lower 
1369			 
1369			        ;inc  hl   ; negate next move. move back to size  
1369			 
1369			.newblock: 
1369				; need to be at marker here 
1369			 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "meN" 
1369						CALLMONITOR 
1369					endif 
1369			 
1369			 
1369				ld a, c 
1369			 
1369				ld (free_list+3), a	 ; flag resume from last malloc  
1369				ld (free_list), hl    ; save out last location 
1369			 
1369			 
1369				;inc a     ; space for length byte 
1369				ld (hl), a     ; save block in use marker 
1369			 
1369				inc hl   ; move to space marker 
1369				ld (hl), a    ; save new space 
1369			 
1369				inc hl   ; move to start of allocated area 
1369				 
1369			;	push hl     ; save where we are - 1  
1369			 
1369			;	inc hl  ; move past zero index  
1369				; skip space to set down new marker 
1369			 
1369				; provide some extra space for now 
1369			 
1369				inc a    ; actual is one fewer than bytes requested. correct if zero index is taken into account 
1369				inc a 
1369				inc a 
1369			 
1369				push hl   ; save where we are in the node block 
1369			 
1369				call addatohl 
1369			 
1369				; write linked list point 
1369			 
1369				pop de     ; get our node position 
1369				ex de, hl 
1369			 
1369				ld (hl), e 
1369				inc hl 
1369				ld (hl), d 
1369			 
1369				inc hl 
1369			 
1369				; now at start of allocated data so save pointer 
1369			 
1369				push hl 
1369			 
1369				; jump to position of next node and setup empty header in DE 
1369			 
1369				ex de, hl 
1369			 
1369			;	inc hl ; move past end of block 
1369			 
1369				ld a, 0 
1369				ld (hl), a   ; empty marker 
1369				inc hl 
1369				ld (hl), a   ; size 
1369				inc hl  
1369				ld (hl), a   ; ptr 
1369				inc hl 
1369				ld (hl), a   ; ptr 
1369			 
1369			 
1369				pop hl 
1369			 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "mmr" 
1369						CALLMONITOR 
1369					endif 
1369			 
1369			.exit: 
1369				pop af 
1369				pop bc 
1369				pop de  
1369				ret 
1369			 
1369			 
1369			 
1369			 
1369			free:  
1369				push hl 
1369				push af 
1369				; get address in hl 
1369			 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "fre" 
1369						CALLMONITOR 
1369					endif 
1369				; data is at hl - move to block count 
1369				dec hl 
1369				dec hl    ; get past pointer 
1369				dec hl 
1369			 
1369				ld a, (hl)    ; need this for a validation check 
1369			 
1369				dec hl    ; move to block marker 
1369			 
1369				; now check that the block count and block marker are the same  
1369			        ; this checks that we are on a malloc node and not random memory 
1369			        ; OK a faint chance this could be a problem but rare - famous last words! 
1369			 
1369				ld c, a 
1369				ld a, (hl)    
1369			 
1369				cp c 
1369				jr nz, .freeignore      ; not a valid malloc node in use so dont break anything 
1369			 
1369				; yes good chance we are on a malloc node 
1369			 
1369				ld a, 0      
1369				ld (hl), a   ; mark as free 
1369			 
1369				ld (free_list+3), a	 ; flag reuse of existing block on next malloc 
1369			 
1369			.freeignore:  
1369			 
1369				pop af 
1369				pop hl 
1369			 
1369				ret 
1369			 
1369			 
1369			 
1369			endif 
1369			 
1369			; eof 
# End of file firmware_memory.asm
1369			  
1369			; device C  
1369			; Now handled by SPI  
1369			;if SOUND_ENABLE  
1369			;	include "firmware_sound.asm"  
1369			;endif  
1369			  
1369			include "firmware_diags.asm"  
1369			; Hardware diags menu 
1369			 
1369			 
1369			config: 
1369			 
1369 3e 00			ld a, 0 
136b 21 8f 13			ld hl, .configmn 
136e cd f9 0b			call menu 
1371			 
1371 fe 00			cp 0 
1373 c8				ret z 
1374			 
1374			;	cp 1 
1374			;	call z, .savetostore 
1374			 
1374 fe 01			cp 1 
1376			if STARTUP_V1 
1376 cc a5 13			call z, .selautoload 
1379			endif 
1379			 
1379			if STARTUP_V2 
1379				call z, .enautoload 
1379			endif 
1379 fe 02			cp 2 
137b cc 9b 13			call z, .disautoload 
137e			;	cp 3 
137e			;	call z, .selbank 
137e fe 03			cp 3 
1380 cc c3 13			call z, .debug_tog 
1383 fe 04			cp 4 
1385 cc 11 15			call z, .bpsgo 
1388 fe 05			cp 5 
138a cc ec 13			call z, hardware_diags 
138d			if STARTUP_V2 
138d				cp 6 
138d				call z, create_startup 
138d			endif 
138d 18 da			jr config 
138f			 
138f			.configmn: 
138f			;	dw prom_c3 
138f ff 16			dw prom_c2 
1391 14 17			dw prom_c2a 
1393			;	dw prom_c2b 
1393			;	dw prom_c4 
1393 33 17			dw prom_m4 
1395 4e 17			dw prom_m4b 
1397 56 17			dw prom_c1 
1399			if STARTUP_V2 
1399				dw prom_c9 
1399			endif 
1399 00 00			dw 0 
139b				 
139b			 
139b			if STARTUP_V2 
139b			.enautoload: 
139b				if STORAGE_SE 
139b				ld a, $fe      ; bit 0 clear 
139b				ld (spi_device), a 
139b			 
139b				call storage_get_block_0 
139b			 
139b				ld a, 1 
139b				ld (store_page+STORE_0_AUTOFILE), a 
139b			 
139b					ld hl, 0 
139b					ld de, store_page 
139b				call storage_write_block	 ; save update 
139b				else 
139b			 
139b				ld hl, prom_notav 
139b				ld de, prom_empty 
139b				call info_panel 
139b				endif 
139b			 
139b			 
139b				ret 
139b			endif 
139b			 
139b			.disautoload: 
139b				if STORAGE_SE 
139b				ld a, $fe      ; bit 0 clear 
139b				ld (spi_device), a 
139b			 
139b				call storage_get_block_0 
139b			 
139b				ld a, 0 
139b				ld (store_page+STORE_0_AUTOFILE), a 
139b			 
139b					ld hl, 0 
139b					ld de, store_page 
139b				call storage_write_block	 ; save update 
139b				else 
139b			 
139b 21 65 17			ld hl, prom_notav 
139e 11 7b 17			ld de, prom_empty 
13a1 cd 59 0b			call info_panel 
13a4				endif 
13a4			 
13a4			 
13a4 c9				ret 
13a5			 
13a5			if STARTUP_V1 
13a5			 
13a5			; Select auto start 
13a5			 
13a5			.selautoload: 
13a5			 
13a5				 
13a5				if STORAGE_SE 
13a5			 
13a5					call config_dir 
13a5				        ld hl, scratch 
13a5					ld a, 0 
13a5					call menu 
13a5			 
13a5					cp 0 
13a5					ret z 
13a5			 
13a5					dec a 
13a5			 
13a5			 
13a5					; locate menu option 
13a5			 
13a5					ld hl, scratch 
13a5					call table_lookup 
13a5			 
13a5					if DEBUG_FORTH_WORDS 
13a5						DMARK "ALl" 
13a5						CALLMONITOR 
13a5					endif 
13a5					; with the pointer to the menu it, the byte following the zero term is the file id 
13a5			 
13a5					ld a, 0 
13a5					ld bc, 50   ; max of bytes to look at 
13a5					cpir  
13a5			 
13a5					if DEBUG_FORTH_WORDS 
13a5						DMARK "ALb" 
13a5						CALLMONITOR 
13a5					endif 
13a5					;inc hl 
13a5			 
13a5					ld a, (hl)   ; file id 
13a5					 
13a5				        ; save bank and file ids 
13a5			 
13a5					push af 
13a5			 
13a5			; TODO need to save to block 0 on bank 1	 
13a5			 
13a5					call storage_get_block_0 
13a5			 
13a5					if DEBUG_FORTH_WORDS 
13a5						DMARK "AL0" 
13a5						CALLMONITOR 
13a5					endif 
13a5					pop af 
13a5			 
13a5					ld (store_page+STORE_0_FILERUN),a 
13a5					 
13a5					; save bank id 
13a5			 
13a5					ld a,(spi_device) 
13a5					ld (store_page+STORE_0_BANKRUN),a 
13a5			 
13a5					; enable auto run of store file 
13a5			 
13a5					ld a, 1 
13a5					ld (store_page+STORE_0_AUTOFILE),a 
13a5			 
13a5					; save buffer 
13a5			 
13a5					ld hl, 0 
13a5					ld de, store_page 
13a5					if DEBUG_FORTH_WORDS 
13a5						DMARK "ALw" 
13a5						CALLMONITOR 
13a5					endif 
13a5				call storage_write_block	 ; save update 
13a5			  
13a5			 
13a5			 
13a5			 
13a5					ld hl, scratch 
13a5					call config_fdir 
13a5			 
13a5				else 
13a5			 
13a5 21 65 17			ld hl, prom_notav 
13a8 11 7b 17			ld de, prom_empty 
13ab cd 59 0b			call info_panel 
13ae			 
13ae				endif 
13ae c9				ret 
13af			endif 
13af			 
13af			 
13af			; Select storage bank 
13af			 
13af			.selbank: 
13af			 
13af			;	if STORAGE_SE 
13af			;	else 
13af			 
13af 21 65 17			ld hl, prom_notav 
13b2 11 7b 17			ld de, prom_empty 
13b5 cd 59 0b			call info_panel 
13b8			;	endif 
13b8				 
13b8 c9				ret 
13b9			 
13b9			if STORAGE_SE 
13b9			 
13b9			.config_ldir:   
13b9				; Load storage bank labels into menu array 
13b9			 
13b9				 
13b9			 
13b9			 
13b9				ret 
13b9			 
13b9			 
13b9			endif 
13b9			 
13b9			 
13b9			; Save user words to storage 
13b9			 
13b9			.savetostore: 
13b9			 
13b9			;	if STORAGE_SE 
13b9			; 
13b9			;		call config_dir 
13b9			;	        ld hl, scratch 
13b9			;		ld a, 0 
13b9			;		call menu 
13b9			;		 
13b9			;		ld hl, scratch 
13b9			;		call config_fdir 
13b9			; 
13b9			;	else 
13b9			 
13b9 21 65 17			ld hl, prom_notav 
13bc 11 7b 17			ld de, prom_empty 
13bf cd 59 0b			call info_panel 
13c2			 
13c2			;	endif 
13c2			 
13c2 c9				ret 
13c3			 
13c3			if STARTUP_V2 
13c3			 
13c3			create_startup: 
13c3			 
13c3				ld a, 0 
13c3				ld hl, .crstart 
13c3				call menu 
13c3			 
13c3				cp 0 
13c3				ret z 
13c3			 
13c3				cp 1 
13c3				call z, .genlsword 
13c3				cp 2 
13c3				call z, .genedword 
13c3			 
13c3				cp 3 
13c3				call z, .gendemword 
13c3			 
13c3				cp 4 
13c3				call z, .genutlword 
13c3				cp 5 
13c3				call z, .genspiword 
13c3				cp 6 
13c3				call z, .genkeyword 
13c3				cp 7 
13c3				call z, .gensoundword 
13c3				cp 7 
13c3				call z, .genhwword 
13c3				jr create_startup 
13c3			 
13c3			.genhwword: 
13c3				ld hl, crs_hw 
13c3				ld de, .hwworddef 
13c3				call .genfile 
13c3				ret 
13c3			.gensoundword: 
13c3				ld hl, crs_sound 
13c3				ld de, .soundworddef 
13c3				call .genfile 
13c3				ret 
13c3			.genlsword: 
13c3				ld hl, crs_s1 
13c3				ld de, .lsworddef 
13c3				call .genfile 
13c3				ret 
13c3			 
13c3			.genedword: 
13c3				ld de, .edworddef 
13c3				ld hl, crs_s2 
13c3				call .genfile 
13c3				ret 
13c3			 
13c3			.gendemword: 
13c3				ld de, .demoworddef 
13c3				ld hl, crs_s3 
13c3				call .genfile 
13c3				ret 
13c3			 
13c3			.genutlword: 
13c3				ld hl, crs_s4 
13c3				ld de, .utilwordef 
13c3				call .genfile 
13c3				ret 
13c3			.genspiword: 
13c3				ld hl, crs_s5 
13c3				ld de, .spiworddef 
13c3				call .genfile 
13c3				ret 
13c3			.genkeyword: 
13c3				ld hl, crs_s6 
13c3				ld de, .keyworddef 
13c3				call .genfile 
13c3				ret 
13c3			 
13c3			; hl - points to file name 
13c3			; de - points to strings to add to file 
13c3			 
13c3			.genfile: 
13c3				push hl 
13c3				push de 
13c3			 
13c3				call clear_display 
13c3				ld a, display_row_1 
13c3				ld de, .genfiletxt 
13c3				call str_at_display 
13c3				call update_display 
13c3			 
13c3				pop de 
13c3				pop hl 
13c3			 
13c3			 
13c3				push de 
13c3				call storage_create 
13c3				; id in hl 
13c3				pop de   ; table of strings to add 
13c3			 
13c3			.genloop: 
13c3			 
13c3				push hl ; save id for next time around 
13c3				push de ; save de for next time around 
13c3			 
13c3				ex de, hl 
13c3				call loadwordinhl 
13c3				ex de, hl 
13c3			 
13c3				; need hl to be the id 
13c3				; need de to be the string ptr 
13c3				 
13c3				call storage_append 
13c3			 
13c3				pop de 
13c3				pop hl 
13c3			 
13c3				inc de 
13c3				inc de 
13c3			 
13c3				ld a,(de) 
13c3				cp 0 
13c3				jr nz, .genloop 
13c3				inc de 
13c3				ld a, (de) 
13c3				dec de 
13c3				cp 0 
13c3				jr nz, .genloop	 
13c3			 
13c3				ret 
13c3			 
13c3			.genfiletxt:  db "Creating file...",0 
13c3			 
13c3			.hwworddef: 
13c3				dw test5 
13c3				dw test6 
13c3				dw test7 
13c3				dw test8 
13c3				dw test9 
13c3				dw test10 
13c3				dw 0 
13c3			 
13c3			.soundworddef: 
13c3				dw sound1 
13c3				dw sound2 
13c3				dw sound3 
13c3				dw sound4 
13c3				dw sound5 
13c3				dw sound6 
13c3				dw sound7 
13c3				dw sound8 
13c3				dw sound9 
13c3				dw 0 
13c3			 
13c3			.utilwordef: 
13c3				dw strncpy 
13c3				dw type 
13c3				dw clrstack 
13c3				dw longread 
13c3				dw start1 
13c3				dw start2 
13c3			; duplicated 
13c3			;	dw start3b 
13c3			;	dw start3c 
13c3				dw list 
13c3				dw 0 
13c3			 
13c3			.lsworddef: 
13c3				dw start3b 
13c3				dw 0 
13c3			 
13c3			.edworddef: 
13c3				dw edit1 
13c3				dw edit2 
13c3				dw edit3 
13c3				dw 0 
13c3			 
13c3			.demoworddef: 
13c3				dw game1 
13c3				dw game1a 
13c3				dw game1b 
13c3				dw game1c 
13c3				dw game1d 
13c3				dw game1s 
13c3				dw game1t 
13c3				dw game1f 
13c3				dw game1z 
13c3				dw game1zz 
13c3				dw ssv2 
13c3				dw ssv3 
13c3				dw ssv4 
13c3				dw ssv5 
13c3				dw ssv1 
13c3				dw ssv1cpm	 
13c3			;	dw game2b 
13c3			;	dw game2bf 
13c3			;	dw game2mba 
13c3			;	dw game2mbas	 
13c3			;	dw game2mbht 
13c3			;	dw game2mbms 
13c3			;	dw game2mb 
13c3			;	dw game3w 
13c3			;	dw game3p 
13c3			;	dw game3sc 
13c3			;	dw game3vsi 
13c3			;	dw game3vs 
13c3				dw 0 
13c3			 
13c3			 
13c3			.spiworddef: 
13c3			 
13c3			    dw spi1 
13c3			    dw spi2 
13c3			    dw spi2b 
13c3			    dw spi3 
13c3			    dw spi4 
13c3			    dw spi5 
13c3			;    dw spi6 
13c3			;    dw spi7 
13c3			 
13c3			;    dw spi8 
13c3			;    dw spi9 
13c3			;    dw spi10 
13c3			    dw 0 
13c3			 
13c3			.keyworddef: 
13c3			 
13c3				dw keyup 
13c3				dw keydown 
13c3				dw keyleft 
13c3				dw keyright 
13c3				dw 	keyf1 
13c3				dw keyf2 
13c3				dw keyf3 
13c3				dw keyf4 
13c3				dw keyf5 
13c3				dw keyf6 
13c3				dw keyf7 
13c3				dw keyf8 
13c3				dw keyf9 
13c3				dw keyf10 
13c3				dw keyf11 
13c3				dw keyf12 
13c3				dw keytab 
13c3				dw keycr 
13c3				dw keyhome 
13c3				dw keyend 
13c3				dw keybs 
13c3				dw 0 
13c3			 
13c3			.crstart: 
13c3				dw crs_s1 
13c3				dw crs_s2 
13c3				dw crs_s3 
13c3				dw crs_s4 
13c3				dw crs_s5 
13c3				dw crs_s6 
13c3				dw crs_sound 
13c3				dw crs_hw 
13c3				dw 0 
13c3			 
13c3			endif 
13c3			 
13c3			 
13c3			if STORAGE_SE 
13c3			 
13c3			config_fdir: 
13c3				; using the scratch dir go through and release the memory allocated for each string 
13c3				 
13c3				ld hl, scratch 
13c3			.cfdir:	ld e,(hl) 
13c3				inc hl 
13c3				ld d,(hl) 
13c3				inc hl 
13c3			 
13c3				ex de, hl 
13c3				call ishlzero 
13c3				ret z     ; return on null pointer 
13c3				call free 
13c3				ex de, hl 
13c3				jr .cfdir 
13c3			 
13c3			 
13c3				ret 
13c3			 
13c3			 
13c3			config_dir: 
13c3			 
13c3				; for the config menus that need to build a directory of storage call this routine 
13c3				; it will construct a menu in scratch to pass to menu 
13c3			 
13c3				; open storage device 
13c3			 
13c3				; execute DIR to build a list of files and their ids into scratch in menu format 
13c3				; once the menu has finished then will need to call config_fdir to release the strings 
13c3				 
13c3				; c = number items 
13c3			 
13c3				 
13c3				call storage_get_block_0 
13c3			 
13c3				ld hl, store_page     ; get current id count 
13c3				ld b, (hl) 
13c3				ld c, 0    ; count of files   
13c3			 
13c3			 
13c3				ld hl, scratch 
13c3				ld (store_tmp2), hl    ; location to poke strings 
13c3			 
13c3				; check for empty drive 
13c3			 
13c3				ld a, 0 
13c3				cp b 
13c3				jp z, .dirdone 
13c3			 
13c3				 
13c3					if DEBUG_FORTH_WORDS 
13c3						DMARK "Cdc" 
13c3						CALLMONITOR 
13c3					endif 
13c3			 
13c3			 
13c3			.diritem:	 
13c3				push bc 
13c3				; for each of the current ids do a search for them and if found push to stack 
13c3			 
13c3					ld hl, STORE_BLOCK_PHY 
13c3					ld d, 0		 ; look for extent 0 of block id as this contains file name 
13c3					ld e,b 
13c3			 
13c3					call storage_findnextid 
13c3			 
13c3			 
13c3					; if found hl will be non zero 
13c3			 
13c3					call ishlzero 
13c3					jr z, .dirnotfound 
13c3			 
13c3					; increase count 
13c3			 
13c3					pop bc	 
13c3					inc c 
13c3					push bc 
13c3					 
13c3			 
13c3					; get file header and push the file name 
13c3			 
13c3					ld de, store_page 
13c3					call storage_read_block 
13c3			 
13c3					; push file id to stack 
13c3				 
13c3					ld a, (store_page) 
13c3					ld h, 0 
13c3					ld l, a 
13c3			 
13c3					;call forth_push_numhl 
13c3					; TODO store id 
13c3			 
13c3					push hl 
13c3			 
13c3					; push extent count to stack  
13c3				 
13c3					ld hl, store_page+3 
13c3			 
13c3					; get file name length 
13c3			 
13c3					call strlenz   
13c3			 
13c3					inc hl   ; cover zero term 
13c3					inc hl  ; stick the id at the end of the area 
13c3			 
13c3					push hl 
13c3					pop bc    ; move length to bc 
13c3			 
13c3					call malloc 
13c3			 
13c3					; TODO save malloc area to scratch 
13c3			 
13c3					ex de, hl 
13c3					ld hl, (store_tmp2) 
13c3					ld (hl), e 
13c3					inc hl 
13c3					ld (hl), d 
13c3					inc hl 
13c3					ld (store_tmp2), hl 
13c3			 
13c3					 
13c3			 
13c3					;pop hl   ; get source 
13c3			;		ex de, hl    ; swap aronund	 
13c3			 
13c3					ld hl, store_page+3 
13c3					if DEBUG_FORTH_WORDS 
13c3						DMARK "CFd" 
13c3						CALLMONITOR 
13c3					endif 
13c3					ldir 
13c3			 
13c3					; de is past string, move back one and store id 
13c3					 
13c3					dec de 
13c3			 
13c3					; store file id 
13c3			 
13c3					pop hl 
13c3					ex de,hl 
13c3					ld (hl), e 
13c3			 
13c3					if DEBUG_FORTH_WORDS 
13c3						DMARK "Cdi" 
13c3						CALLMONITOR 
13c3					endif 
13c3					 
13c3			.dirnotfound: 
13c3					pop bc     
13c3					djnz .diritem 
13c3				 
13c3			.dirdone:	 
13c3			 
13c3					ld a, 0 
13c3					ld hl, (store_tmp2) 
13c3					ld (hl), a 
13c3					inc hl 
13c3					ld (hl), a 
13c3					inc hl 
13c3					; push a count of the dir items found 
13c3			 
13c3			;		ld h, 0 
13c3			;		ld l, c 
13c3			 
13c3				ret 
13c3			 
13c3			endif 
13c3			 
13c3			 
13c3			; Settings 
13c3			; Run  
13c3			 
13c3			 
13c3			 
13c3			;hd_menu1:   db "Diags:  1: Key Matrix   5: Sound",0 
13c3			;;hd_menu2:   db "        2: Editor",0   
13c3			;hd_menu2:   db "        2: Editor       6: Menu",0   
13c3			;hd_menu3:   db "        3: Storage",0 
13c3			;hd_menu4:   db "0=quit  4: Debug",0 
13c3			;hd_don:     db "ON",0 
13c3			;hd_doff:     db "OFF",0 
13c3			; 
13c3			; 
13c3			; 
13c3			;hardware_diags_old:       
13c3			; 
13c3			;.diagmenu: 
13c3			;	call clear_display 
13c3			;	ld a, display_row_1 
13c3			;	ld de, hd_menu1 
13c3			;	call str_at_display 
13c3			; 
13c3			;	ld a, display_row_2 
13c3			;	ld de, hd_menu2 
13c3			;	call str_at_display 
13c3			; 
13c3			;	ld a, display_row_3 
13c3			;	ld de, hd_menu3 
13c3			;	call str_at_display 
13c3			; 
13c3			;	ld a,  display_row_4 
13c3			;	ld de, hd_menu4 
13c3			;	call str_at_display 
13c3			; 
13c3			;	; display debug state 
13c3			; 
13c3			;	ld de, hd_don 
13c3			;	ld a, (os_view_disable) 
13c3			;	cp 0 
13c3			;	jr z, .distog 
13c3			;	ld de, hd_doff 
13c3			;.distog: ld a, display_row_4+17 
13c3			;	call str_at_display 
13c3			; 
13c3			;	call update_display 
13c3			; 
13c3			;	call cin_wait 
13c3			; 
13c3			; 
13c3			; 
13c3			;	cp '4' 
13c3			;	jr nz, .diagn1 
13c3			; 
13c3			;	; debug toggle 
13c3			; 
13c3			;	ld a, (os_view_disable) 
13c3			;	ld b, '*' 
13c3			;	cp 0 
13c3			;	jr z, .debtog 
13c3			;	ld b, 0 
13c3			;.debtog:	 
13c3			;	ld a,b 
13c3			;	ld (os_view_disable),a 
13c3			; 
13c3			;.diagn1: cp '0' 
13c3			;	 ret z 
13c3			; 
13c3			;;	cp '1' 
13c3			;;       jp z, matrix	 
13c3			;;   TODO keyboard matrix test 
13c3			; 
13c3			;	cp '2' 
13c3			;	jp z, .diagedit 
13c3			; 
13c3			;;	cp '6' 
13c3			;;	jp z, .menutest 
13c3			;;if ENABLE_BASIC 
13c3			;;	cp '6' 
13c3			;;	jp z, basic 
13c3			;;endif 
13c3			 ; 
13c3			;	jp .diagmenu 
13c3			; 
13c3			; 
13c3			;	ret 
13c3			 
13c3			 
13c3			.debug_tog: 
13c3 21 0d 14			ld hl, .menudebug 
13c6				 
13c6			;	ld a, (os_view_disable) 
13c6			;	cp '*' 
13c6 3a 6f ee			ld a,(debug_vector) 
13c9 fe c9			cp $C9   ; RET 
13cb 20 04			jr nz,.tdon  
13cd 3e 01			ld a, 1 
13cf 18 02			jr .tog1 
13d1 3e 00		.tdon: ld a, 0 
13d3			 
13d3			.tog1: 
13d3 cd f9 0b			call menu 
13d6 fe 00			cp 0 
13d8 c8				ret z 
13d9 fe 01			cp 1    ; disable debug 
13db 28 04			jr z, .dtog0 
13dd 3e 2a			ld a, '*' 
13df 18 05			jr .dtogset 
13e1			.dtog0:  
13e1				;ld a, 0 
13e1 cd ff 14			call bp_on 
13e4 18 dd			jr .debug_tog 
13e6			.dtogset:  
13e6				; ld (os_view_disable), a 
13e6 cd 0b 15			call bp_off 
13e9 c3 c3 13			jp .debug_tog 
13ec			 
13ec			 
13ec			hardware_diags:       
13ec			 
13ec			.diagm: 
13ec 21 ff 13			ld hl, .menuitems 
13ef 3e 00			ld a, 0 
13f1 cd f9 0b			call menu 
13f4			 
13f4 fe 00		         cp 0 
13f6 c8				 ret z 
13f7			 
13f7 fe 02			cp 2 
13f9 ca 58 14			jp z, .diagedit 
13fc			 
13fc			;	cp '6' 
13fc			;	jp z, .menutest 
13fc			;if ENABLE_BASIC 
13fc			;	cp '6' 
13fc			;	jp z, basic 
13fc			;endif 
13fc			  
13fc c3 ec 13			jp .diagm 
13ff			 
13ff				 
13ff 13 14		.menuitems:   	dw .m1 
1401 1e 14				dw .m2 
1403 25 14				dw .m3 
1405 2d 14				dw .m5 
1407 33 14				dw .m5a 
1409 3c 14				dw .m5b 
140b 00 00				dw 0 
140d			 
140d			.menudebug: 
140d 45 14				dw .m6 
140f 4e 14				dw .m7 
1411 00 00				dw 0 
1413			 
1413 .. 00		.m1:   db "Key Matrix",0 
141e .. 00		.m2:   db "Editor",0 
1425 .. 00		.m3:   db "Storage",0 
142d .. 00		.m5:   db "Sound",0 
1433 .. 00		.m5a:  db "RAM Test",0 
143c .. 00		.m5b:  db "LCD Test",0 
1445			 
1445 .. 00		.m6:   db "Debug ON",0 
144e .. 00		.m7:   db "Debug OFF",0 
1458			 
1458			; debug editor 
1458			 
1458			.diagedit: 
1458			 
1458 21 bb e2			ld hl, scratch 
145b			;	ld bc, 250 
145b			;	ldir 
145b				; TODO ldir is not working strcpy may not get all the terms on the input line???? 
145b 3e 00			ld a, 0 
145d 77				ld (hl), a 
145e 23				inc hl 
145f 77				ld (hl), a 
1460 23				inc hl 
1461 77				ld (hl), a 
1462			 
1462 cd c8 0b		        call clear_display 
1465 cd eb 0b			call update_display 
1468				;ld a, 1 
1468				;ld (hardware_diag), a 
1468			.diloop: 
1468 3e 00			ld a, display_row_1 
146a 0e 00			ld c, 0 
146c 16 ff			ld d, 255    ; TODO fix input_str to actually take note of max string input length 
146e 1e 28			ld e, 40 
1470			 
1470 21 bb e2			ld hl, scratch	 
1473 cd 22 0e			call input_str 
1476			 
1476 3e 28			ld a, display_row_2 
1478 11 bb e2			ld de, scratch 
147b cd db 0b			call str_at_display 
147e cd eb 0b			call update_display 
1481			 
1481 c3 68 14			jp .diloop 
1484			 
1484			 
1484			; pass word in hl 
1484			; a has display location 
1484			display_word_at: 
1484 f5				push af 
1485 e5				push hl 
1486 7c				ld a,h 
1487 21 c0 e5			ld hl, os_word_scratch 
148a cd fe 0f			call hexout 
148d e1				pop hl 
148e 7d				ld a,l 
148f 21 c2 e5			ld hl, os_word_scratch+2 
1492 cd fe 0f			call hexout 
1495 21 c4 e5			ld hl, os_word_scratch+4 
1498 3e 00			ld a,0 
149a 77				ld (hl),a 
149b 11 c0 e5			ld de,os_word_scratch 
149e f1				pop af 
149f cd db 0b				call str_at_display 
14a2 c9				ret 
14a3			 
14a3			display_ptr_state: 
14a3			 
14a3				; to restore afterwards 
14a3			 
14a3 d5				push de 
14a4 c5				push bc 
14a5 e5				push hl 
14a6 f5				push af 
14a7			 
14a7				; for use in here 
14a7			 
14a7			;	push bc 
14a7			;	push de 
14a7			;	push hl 
14a7			;	push af 
14a7			 
14a7 cd c8 0b			call clear_display 
14aa			 
14aa 11 82 16			ld de, .ptrstate 
14ad 3e 00			ld a, display_row_1 
14af cd db 0b			call str_at_display 
14b2			 
14b2				; display debug step 
14b2			 
14b2			 
14b2 11 65 ee			ld de, debug_mark 
14b5 3e 26			ld a, display_row_1+display_cols-2 
14b7 cd db 0b			call str_at_display 
14ba			 
14ba				; display a 
14ba 11 8c 16			ld de, .ptrcliptr 
14bd 3e 28			ld a, display_row_2 
14bf cd db 0b			call str_at_display 
14c2			 
14c2 f1				pop af 
14c3 2a 3a ea			ld hl,(cli_ptr) 
14c6 3e 30			ld a, display_row_2+8 
14c8 cd 84 14			call display_word_at 
14cb			 
14cb			 
14cb				; display hl 
14cb			 
14cb			 
14cb 11 94 16			ld de, .ptrclioptr 
14ce 3e 32			ld a, display_row_2+10 
14d0 cd db 0b			call str_at_display 
14d3			; 
14d3			;	pop hl 
14d3 3e 35			ld a, display_row_2+13 
14d5 2a 38 ea			ld hl,(cli_origptr) 
14d8 cd 84 14			call display_word_at 
14db			; 
14db			;	 
14db			;	; display de 
14db			 
14db			;	ld de, .regstatede 
14db			;	ld a, display_row_3 
14db			;	call str_at_display 
14db			 
14db			;	pop de 
14db			;	ld h,d 
14db			;	ld l, e 
14db			;	ld a, display_row_3+3 
14db			;	call display_word_at 
14db			 
14db			 
14db				; display bc 
14db			 
14db			;	ld de, .regstatebc 
14db			;	ld a, display_row_3+10 
14db			;	call str_at_display 
14db			 
14db			;	pop bc 
14db			;	ld h,b 
14db			;	ld l, c 
14db			;	ld a, display_row_3+13 
14db			;	call display_word_at 
14db			 
14db			 
14db				; display dsp 
14db			 
14db			;	ld de, .regstatedsp 
14db			;	ld a, display_row_4 
14db			;	call str_at_display 
14db			 
14db				 
14db			;	ld hl,(cli_data_sp) 
14db			;	ld a, display_row_4+4 
14db			;	call display_word_at 
14db			 
14db				; display rsp 
14db			 
14db 11 c3 16			ld de, .regstatersp 
14de 3e 82			ld a, display_row_4+10 
14e0 cd db 0b			call str_at_display 
14e3			 
14e3				 
14e3 2a ec e9			ld hl,(cli_ret_sp) 
14e6 3e 86			ld a, display_row_4+14 
14e8 cd 84 14			call display_word_at 
14eb			 
14eb cd eb 0b			call update_display 
14ee			 
14ee cd 00 0b			call delay1s 
14f1 cd 00 0b			call delay1s 
14f4 cd 00 0b			call delay1s 
14f7			 
14f7			 
14f7 cd 08 1b			call next_page_prompt 
14fa			 
14fa				; restore  
14fa			 
14fa f1				pop af 
14fb e1				pop hl 
14fc c1				pop bc 
14fd d1				pop de 
14fe c9				ret 
14ff			 
14ff			; Update the break point vector so that the user can hook a new routine 
14ff			 
14ff			bp_on: 
14ff 3e c3			ld a, $c3    ; JP 
1501 32 6f ee			ld (debug_vector), a 
1504 21 11 15			ld hl, break_point_state 
1507 22 70 ee			ld (debug_vector+1), hl 
150a c9				ret 
150b			 
150b			bp_off: 
150b 3e c9			ld a, $c9    ; RET 
150d 32 6f ee			ld (debug_vector), a 
1510 c9				ret 
1511			 
1511			 
1511			break_point_state: 
1511			;	push af 
1511			; 
1511			;	; see if disabled 
1511			; 
1511			;	ld a, (os_view_disable) 
1511			;	cp '*' 
1511			;	jr nz, .bpsgo 
1511			;	pop af 
1511			;	ret 
1511			 
1511			.bpsgo: 
1511			;	pop af 
1511 f5				push af 
1512 22 9d e2			ld (os_view_hl), hl 
1515 ed 53 9b e2		ld (os_view_de), de 
1519 ed 43 99 e2		ld (os_view_bc), bc 
151d e5				push hl 
151e 6f				ld l, a 
151f 26 00			ld h, 0 
1521 22 9f e2			ld (os_view_af),hl 
1524			 
1524 21 ab ed				ld hl, display_fb0 
1527 22 c6 eb				ld (display_fb_active), hl 
152a e1				pop hl	 
152b			 
152b 3e 31			ld a, '1' 
152d fe 2a		.bps1:  cp '*' 
152f cc 0b 15			call z, bp_off 
1532			;	jr nz, .bps1b 
1532			;	ld (os_view_disable),a 
1532 fe 31		.bps1b:  cp '1' 
1534 20 14			jr nz, .bps2 
1536			 
1536				; display reg 
1536			 
1536				 
1536			 
1536 3a 9f e2			ld a, (os_view_af) 
1539 2a 9d e2			ld hl, (os_view_hl) 
153c ed 5b 9b e2		ld de, (os_view_de) 
1540 ed 4b 99 e2		ld bc, (os_view_bc) 
1544 cd de 15			call display_reg_state 
1547 c3 ca 15			jp .bpschk 
154a			 
154a fe 32		.bps2:  cp '2' 
154c 20 08			jr nz, .bps3 
154e				 
154e				; display hl 
154e 2a 9d e2			ld hl, (os_view_hl) 
1551 cd c8 16			call display_dump_at_hl 
1554			 
1554 18 74			jr .bpschk 
1556			 
1556 fe 33		.bps3:  cp '3' 
1558 20 08			jr nz, .bps4 
155a			 
155a			        ; display de 
155a 2a 9b e2			ld hl, (os_view_de) 
155d cd c8 16			call display_dump_at_hl 
1560			 
1560 18 68			jr .bpschk 
1562 fe 34		.bps4:  cp '4' 
1564 20 08			jr nz, .bps5 
1566			 
1566			        ; display bc 
1566 2a 99 e2			ld hl, (os_view_bc) 
1569 cd c8 16			call display_dump_at_hl 
156c			 
156c 18 5c			jr .bpschk 
156e fe 35		.bps5:  cp '5' 
1570 20 08		        jr nz, .bps7 
1572			 
1572				; display cur ptr 
1572 2a 3a ea			ld hl, (cli_ptr) 
1575 cd c8 16			call display_dump_at_hl 
1578			 
1578 18 50			jr .bpschk 
157a fe 36		.bps7:  cp '6' 
157c 20 08			jr nz, .bps8b 
157e				 
157e				; display cur orig ptr 
157e 2a 38 ea			ld hl, (cli_origptr) 
1581 cd c8 16			call display_dump_at_hl 
1584 18 44			jr .bpschk 
1586 fe 37		.bps8b:  cp '7' 
1588 20 08			jr nz, .bps9 
158a				 
158a				; display dsp 
158a 2a e8 e9			ld hl, (cli_data_sp) 
158d cd c8 16			call display_dump_at_hl 
1590			 
1590 18 38			jr .bpschk 
1592 fe 39		.bps9:  cp '9' 
1594 20 05			jr nz, .bps8c 
1596				 
1596				; display SP 
1596			;	ld hl, sp 
1596 cd c8 16			call display_dump_at_hl 
1599			 
1599 18 2f			jr .bpschk 
159b fe 38		.bps8c:  cp '8' 
159d 20 08			jr nz, .bps8d 
159f				 
159f				; display rsp 
159f 2a ec e9			ld hl, (cli_ret_sp) 
15a2 cd c8 16			call display_dump_at_hl 
15a5			 
15a5 18 23			jr .bpschk 
15a7 fe 23		.bps8d:  cp '#'     ; access monitor sub system 
15a9 20 05			jr nz, .bps8 
15ab cd c2 18			call monitor 
15ae			 
15ae 18 1a			jr .bpschk 
15b0 fe 30		.bps8:  cp '0' 
15b2 20 16			jr nz, .bpschk 
15b4			 
15b4 21 0a ed				ld hl, display_fb1 
15b7 22 c6 eb				ld (display_fb_active), hl 
15ba cd eb 0b				call update_display 
15bd			 
15bd				;ld a, (os_view_af) 
15bd 2a 9d e2			ld hl, (os_view_hl) 
15c0 ed 5b 9b e2		ld de, (os_view_de) 
15c4 ed 4b 99 e2		ld bc, (os_view_bc) 
15c8 f1				pop af 
15c9 c9				ret 
15ca			 
15ca			.bpschk:   
15ca cd 00 0b			call delay1s 
15cd 3e 9f		ld a,display_row_4 + display_cols - 1 
15cf 11 06 1b		        ld de, endprg 
15d2 cd db 0b			call str_at_display 
15d5 cd eb 0b			call update_display 
15d8 cd c1 5e			call cin_wait 
15db			 
15db c3 2d 15			jp .bps1 
15de			 
15de			 
15de			display_reg_state: 
15de			 
15de				; to restore afterwards 
15de			 
15de d5				push de 
15df c5				push bc 
15e0 e5				push hl 
15e1 f5				push af 
15e2			 
15e2				; for use in here 
15e2			 
15e2 c5				push bc 
15e3 d5				push de 
15e4 e5				push hl 
15e5 f5				push af 
15e6			 
15e6 cd c8 0b			call clear_display 
15e9			 
15e9 11 9e 16			ld de, .regstate 
15ec 3e 00			ld a, display_row_1 
15ee cd db 0b			call str_at_display 
15f1			 
15f1				; display debug step 
15f1			 
15f1			 
15f1 11 65 ee			ld de, debug_mark 
15f4 3e 25			ld a, display_row_1+display_cols-3 
15f6 cd db 0b			call str_at_display 
15f9			 
15f9				; display a 
15f9 11 ba 16			ld de, .regstatea 
15fc 3e 28			ld a, display_row_2 
15fe cd db 0b			call str_at_display 
1601			 
1601 e1				pop hl 
1602			;	ld h,0 
1602			;	ld l, a 
1602 3e 2b			ld a, display_row_2+3 
1604 cd 84 14			call display_word_at 
1607			 
1607			 
1607				; display hl 
1607			 
1607			 
1607 11 ae 16			ld de, .regstatehl 
160a 3e 32			ld a, display_row_2+10 
160c cd db 0b			call str_at_display 
160f			 
160f e1				pop hl 
1610 3e 35			ld a, display_row_2+13 
1612 cd 84 14			call display_word_at 
1615			 
1615				 
1615				; display de 
1615			 
1615 11 b2 16			ld de, .regstatede 
1618 3e 50			ld a, display_row_3 
161a cd db 0b			call str_at_display 
161d			 
161d e1				pop hl 
161e			;	ld h,d 
161e			;	ld l, e 
161e 3e 53			ld a, display_row_3+3 
1620 cd 84 14			call display_word_at 
1623			 
1623			 
1623				; display bc 
1623			 
1623 11 b6 16			ld de, .regstatebc 
1626 3e 5a			ld a, display_row_3+10 
1628 cd db 0b			call str_at_display 
162b			 
162b e1				pop hl 
162c			;	ld h,b 
162c			;	ld l, c 
162c 3e 5d			ld a, display_row_3+13 
162e cd 84 14			call display_word_at 
1631			 
1631			 
1631				; display dsp 
1631			 
1631 11 be 16			ld de, .regstatedsp 
1634 3e 78			ld a, display_row_4 
1636 cd db 0b			call str_at_display 
1639			 
1639				 
1639 2a e8 e9			ld hl,(cli_data_sp) 
163c 3e 7c			ld a, display_row_4+4 
163e cd 84 14			call display_word_at 
1641			 
1641				; display rsp 
1641			 
1641 11 c3 16			ld de, .regstatersp 
1644 3e 82			ld a, display_row_4+10 
1646 cd db 0b			call str_at_display 
1649			 
1649				 
1649 2a ec e9			ld hl,(cli_ret_sp) 
164c 3e 86			ld a, display_row_4+14 
164e cd 84 14			call display_word_at 
1651			 
1651 cd eb 0b			call update_display 
1654			 
1654			;	call delay1s 
1654			;	call delay1s 
1654			;	call delay1s 
1654			 
1654			 
1654			;	call next_page_prompt 
1654			 
1654				; restore  
1654			 
1654 f1				pop af 
1655 e1				pop hl 
1656 c1				pop bc 
1657 d1				pop de 
1658 c9				ret 
1659			 
1659 .. 00		.wordincurptr:  db "Word in cur_ptr (5)",0 
166d .. 00		.wordincuroptr:  db "Word in cur_optr (6)",0 
1682 .. 00		.ptrstate:	db "Ptr State",0 
168c .. 00		.ptrcliptr:     db "cli_ptr",0 
1694 .. 00		.ptrclioptr:     db "cli_o_ptr",0 
169e .. 00		.regstate:	db "Reg State (1/0)",0 
16ae .. 00		.regstatehl:	db "HL:",0 
16b2 .. 00		.regstatede:	db "DE:",0 
16b6 .. 00		.regstatebc:	db "BC:",0 
16ba .. 00		.regstatea:	db "A :",0 
16be .. 00		.regstatedsp:	db "DSP:",0 
16c3 .. 00		.regstatersp:	db "RSP:",0 
16c8			 
16c8			display_dump_at_hl: 
16c8 e5				push hl 
16c9 d5				push de 
16ca c5				push bc 
16cb f5				push af 
16cc			 
16cc 22 de e5			ld (os_cur_ptr),hl	 
16cf cd c8 0b			call clear_display 
16d2 cd 10 1a			call dumpcont 
16d5			;	call delay1s 
16d5			;	call next_page_prompt 
16d5			 
16d5			 
16d5 f1				pop af 
16d6 c1				pop bc 
16d7 d1				pop de 
16d8 e1				pop hl 
16d9 c9				ret 
16da			 
16da			;if ENABLE_BASIC 
16da			;	include "nascombasic.asm" 
16da			;	basic: 
16da			;	include "forth/FORTH.ASM" 
16da			;endif 
16da			 
16da			; eof 
16da			 
16da			 
# End of file firmware_diags.asm
16da			  
16da			include "firmware_prompts.asm"  
16da			; Prompts  
16da			 
16da			; boot messages 
16da			 
16da .. 00		prom_bootmsg:	db "z80-homebrew OS v1.7",0 
16ef .. 00		prom_bootmsg1:	db "by Kevin Groves",0 
16ff			 
16ff			 
16ff			; config menus 
16ff			 
16ff			;prom_c3: db "Add Dictionary To File",0 
16ff			 
16ff			if STARTUP_V1 
16ff .. 00		prom_c2: db "Select Autoload File",0 
1714 .. 00		prom_c2a: db "Disable Autoload File", 0 
172a			endif 
172a			 
172a			if STARTUP_V2 
172a			prom_c2: db "Enable Autoload Files",0 
172a			prom_c2a: db "Disable Autoload Files", 0 
172a			 
172a			crs_s1: db "*ls-word", 0 
172a			crs_s2: db "*ed-word", 0 
172a			crs_s3: db "*Demo-Games", 0 
172a			crs_s4: db "*Utils", 0 
172a			crs_s5: db "*SPI-Util", 0 
172a			crs_s6: db "*Key-Constants", 0 
172a			crs_sound: db "*Sound-Util", 0 
172a			crs_hw: db "*Hello-World",0 
172a			 
172a			 
172a			 
172a			endif 
172a			;prom_c2b: db "Select Storage Bank",0 
172a .. 00		prom_c4: db "Settings",0 
1733 .. 00		prom_m4:   db "Debug & Breakpoints On/Off",0 
174e .. 00		prom_m4b:   db "Monitor",0 
1756 .. 00		prom_c1: db "Hardware Diags",0 
1765			 
1765			 
1765			if STARTUP_V2 
1765			prom_c9: db "Create Startup Files",0 
1765			endif 
1765			 
1765 .. 00		prom_notav:    db "Feature not available",0 
177b .. 00		prom_empty:    db "",0 
177c			 
177c			; eof 
177c			 
# End of file firmware_prompts.asm
177c			  
177c			  
177c			; eof  
177c			  
# End of file firmware.asm
177c			 
177c			;; below moved from firmware.asm for strange zero calc of baseusermem label. Scope issue on multipass???? 
177c			;if BASE_KEV  
177c			;baseram: equ 08000h 
177c			;endif 
177c			 
177c			;if BASE_SC114 
177c			;baseram:     equ    endofcode 
177c			;endif 
177c			 
177c			 
177c			; Add NMI support. A rst 066h when r15z goes neg on clock side of resist. needs to do retn when exiting 
177c			 
177c			; start system 
177c			 
177c			coldstart: 
177c				; set sp 
177c				; di/ei 
177c			 
177c f3				di 
177d 31 00 f0			ld sp, tos 
1780 cd bf 5d			call init_nmi 
1783			;	ei 
1783			 
1783				; init spinner 
1783 3e 00			ld a,0 
1785 32 c0 eb			ld (display_active), a 
1788			 
1788				; disable breakpoint by default 
1788			 
1788				;ld a,'*' 
1788			;	ld a,' ' 
1788			;	ld (os_view_disable),a 
1788			 
1788				; set break point vector as new break point on or off 
1788 cd 0b 15			call bp_off 
178b			 
178b				; init hardware 
178b			 
178b				; init keyboard and screen hardware 
178b			 
178b cd 1f 01			call hardware_init 
178e			 
178e			 
178e cd 00 0b			call delay1s 
1791 3e 58			ld a, display_row_3+8 
1793 11 03 01			ld de, buildtime 
1796 cd db 0b			call str_at_display 
1799 cd eb 0b			call update_display 
179c			 
179c cd 00 0b			call delay1s 
179f cd 00 0b			call delay1s 
17a2 cd 00 0b			call delay1s 
17a5			 
17a5				; detect if any keys are held down to enable breakpoints at start up 
17a5			 
17a5 cd c9 5e			call cin  
17a8 fe 00			cp 0 
17aa 28 03			jr z, .nokeys 
17ac			 
17ac				;call hardware_diags 
17ac cd 69 13			call config 
17af			 
17af			;	ld de, .bpen 
17af			;	ld a, display_row_4 
17af			;	call str_at_display 
17af			;	call update_display 
17af			; 
17af			;	ld a,0 
17af			;	ld (os_view_disable),a 
17af			; 
17af			;.bpwait: 
17af			;	call cin 
17af			;	cp 0 
17af			;	jr z, .bpwait 
17af			;	jr .nokeys 
17af			; 
17af			; 
17af			;.bpen:  db "Break points enabled!",0 
17af			 
17af			 
17af			 
17af			 
17af			 
17af			 
17af			.nokeys: 
17af			 
17af			 
17af				 
17af			 
17af			;jp  testkey 
17af			 
17af			;call storage_get_block_0 
17af			; 
17af			;ld hl, 0 
17af			;ld de, store_page 
17af			;call storage_read_block 
17af			 
17af				 
17af			;ld hl, 10 
17af			;ld de, store_page 
17af			;call storage_read_block 
17af			 
17af			 
17af			 
17af			 
17af			 
17af			;stop:	nop 
17af			;	jp stop 
17af			 
17af			 
17af			 
17af			main: 
17af cd c8 0b			call clear_display 
17b2 cd eb 0b			call update_display 
17b5			 
17b5			 
17b5			 
17b5			;	call testlcd 
17b5			 
17b5			 
17b5			 
17b5 cd 51 1f			call forth_init 
17b8			 
17b8			 
17b8			warmstart: 
17b8 cd 27 1f			call forth_warmstart 
17bb			 
17bb				; run startup word load 
17bb			        ; TODO prevent this running at warmstart after crash  
17bb			 
17bb				if STARTUP_ENABLE 
17bb			 
17bb					if STARTUP_V1 
17bb			 
17bb						if STORAGE_SE 
17bb							call forth_autoload 
17bb						endif 
17bb cd 0f 5d					call forth_startup 
17be					endif 
17be			 
17be					if STARTUP_V2 
17be			 
17be						if STORAGE_SE 
17be							call forth_autoload 
17be						else 
17be							call forth_startup 
17be						endif 
17be			 
17be			 
17be					endif 
17be			 
17be				endif 
17be			 
17be			warmstart_afterauto: 
17be			 
17be				; show free memory after boot 
17be 11 5d 18			ld de, freeram 
17c1 3e 00			ld a, display_row_1 
17c3 cd db 0b			call str_at_display 
17c6			 
17c6				; get current heap start after loading any uwords 
17c6			 
17c6				;ld de, (os_last_new_uword) 
17c6				;ex de, hl 
17c6			 
17c6			; Or use heap_size word???? 
17c6				;ld hl, heap_end 
17c6				;ld hl, heap_size 
17c6				;ld de, topusermem 
17c6				;ld de, heap_start 
17c6 ed 5b ec 5e			ld de, (free_list )      
17ca 21 96 e2				ld hl, heap_end 
17cd ed 52			sbc hl, de 
17cf				;push hl 
17cf				;ld a,h	         	 
17cf				;ld hl, os_word_scratch		; TODO do direct write to frame buffer instead and drop the str_at_display 
17cf				;call hexout 
17cf			   	;pop hl 
17cf			; 
17cf			;	ld a,l 
17cf			;	ld hl, os_word_scratch+2 
17cf			;	call hexout 
17cf			;	ld hl, os_word_scratch+4 
17cf			;	ld a, 0 
17cf			;	ld (hl),a 
17cf eb				ex de, hl 
17d0 21 c0 e5			ld hl, os_word_scratch 
17d3 cd 0a 11			call uitoa_16 
17d6			 
17d6			 
17d6 11 c0 e5			ld de, os_word_scratch 
17d9 3e 0d			ld a, display_row_1 + 13 
17db cd db 0b			call str_at_display 
17de cd eb 0b			call update_display 
17e1			 
17e1			 
17e1				;call demo 
17e1			 
17e1			 
17e1				; init scratch input area for cli commands 
17e1			 
17e1 21 e2 e5			ld hl, os_cli_cmd 
17e4 3e 00			ld a,0 
17e6 77				ld (hl),a 
17e7 23				inc hl 
17e8 77				ld (hl),a 
17e9			 
17e9 3e 00			ld a,0 
17eb 32 e1 e6			ld (os_last_cmd),a	; current command in use to enable repeated use with an enter etc 
17ee			 
17ee 32 de e5			ld (os_cur_ptr),a	; ptr to whatever is needed for this command 
17f1 32 df e5			ld (os_cur_ptr+1),a	 
17f4			 
17f4 32 c0 e5			ld (os_word_scratch),a	; byte or word being used in parsing for this command 
17f7 32 c1 e5			ld (os_word_scratch+1),a	 
17fa				 
17fa			 
17fa				;ld a, kLCD_Line2        ; TODO prompt using direct screen line address. Correct this to frame buffer 
17fa 21 e2 e5			ld hl, os_cli_cmd 
17fd			 
17fd 3e 00			ld a, 0		 ; init cli input 
17ff 77				ld (hl), a 
1800 3e 28			ld a, display_row_2        ; TODO prompt using direct screen line address. Correct this to frame buffer 
1802			cli: 
1802				; show cli prompt 
1802				;push af 
1802				;ld a, 0 
1802				;ld de, prompt 
1802				;call str_at_display 
1802			 
1802				;call update_display 
1802				;pop af 
1802				;inc a 
1802				;ld a, kLCD_Line4+1	 ; TODO using direct screen line writes. Correct this to frame buffer 
1802			 
1802			.lastrecall: 
1802			 
1802 0e 00			ld c, 0 
1804 16 ff			ld d, 255    ; TODO fix input_str to actually take note of max string input length 
1806 1e 28			ld e, 40 
1808			 
1808 21 e2 e5			ld hl, os_cli_cmd 
180b			 
180b				STACKFRAME OFF $fefe $9f9f 
180b				if DEBUG_STACK_IMB 
180b					if OFF 
180b						exx 
180b						ld de, $fefe 
180b						ld a, d 
180b						ld hl, curframe 
180b						call hexout 
180b						ld a, e 
180b						ld hl, curframe+2 
180b						call hexout 
180b						ld hl, $fefe 
180b						push hl 
180b						ld hl, $9f9f 
180b						push hl 
180b						exx 
180b					endif 
180b				endif 
180b			endm 
# End of macro STACKFRAME
180b			 
180b cd 22 0e			call input_str 
180e			 
180e				STACKFRAMECHK OFF $fefe $9f9f 
180e				if DEBUG_STACK_IMB 
180e					if OFF 
180e						exx 
180e						ld hl, $9f9f 
180e						pop de   ; $9f9f 
180e						call cmp16 
180e						jr nz, .spnosame 
180e						ld hl, $fefe 
180e						pop de   ; $fefe 
180e						call cmp16 
180e						jr z, .spfrsame 
180e						.spnosame: call showsperror 
180e						.spfrsame: nop 
180e						exx 
180e					endif 
180e				endif 
180e			endm 
# End of macro STACKFRAMECHK
180e			 
180e			 
180e				; check to see if last line recall has been requested 
180e			 
180e			if EDIT_V2 
180e fe 05			cp KEY_UP 
1810 20 0f			jr nz, .noexecline 
1812			 
1812 11 e2 e5			ld de, os_cli_cmd 
1815 21 e1 e6			ld hl, os_last_cmd 
1818 01 ff 00			ld bc, 255 
181b ed b0			ldir 
181d 3e 00			ld a, 0 
181f 18 e1			jr .lastrecall 
1821			endif 
1821			 
1821			.noexecline: 
1821				; no so exec the line		 
1821			 
1821				; copy input to last command 
1821			 
1821 21 e2 e5			ld hl, os_cli_cmd 
1824 11 e1 e6			ld de, os_last_cmd 
1827 01 ff 00			ld bc, 255 
182a ed b0			ldir 
182c			 
182c				; wipe current buffer 
182c			 
182c			;	ld a, 0 
182c			;	ld hl, os_cli_cmd 
182c			;	ld de, os_cli_cmd+1 
182c			;	ld bc, 254 
182c			;	ldir 
182c				; TODO ldir is not working strcpy may not get all the terms on the input line???? 
182c			;	call strcpy 
182c			;	ld a, 0 
182c			;	ld (hl), a 
182c			;	inc hl 
182c			;	ld (hl), a 
182c			;	inc hl 
182c			;	ld (hl), a 
182c			 
182c				; switch frame buffer to program  
182c			 
182c 21 0a ed				ld hl, display_fb1 
182f 22 c6 eb				ld (display_fb_active), hl 
1832			 
1832			;	nop 
1832				STACKFRAME ON $fbfe $8f9f 
1832				if DEBUG_STACK_IMB 
1832					if ON 
1832						exx 
1832						ld de, $fbfe 
1832						ld a, d 
1832						ld hl, curframe 
1832						call hexout 
1832						ld a, e 
1832						ld hl, curframe+2 
1832						call hexout 
1832						ld hl, $fbfe 
1832						push hl 
1832						ld hl, $8f9f 
1832						push hl 
1832						exx 
1832					endif 
1832				endif 
1832			endm 
# End of macro STACKFRAME
1832				; first time into the parser so pass over the current scratch pad 
1832 21 e2 e5			ld hl,os_cli_cmd 
1835				; tokenise the entered statement(s) in HL 
1835 cd cf 1f			call forthparse 
1838			        ; exec forth statements in top of return stack 
1838 cd 0f 20			call forthexec 
183b				;call forthexec_cleanup 
183b			;	call parsenext 
183b			 
183b				STACKFRAMECHK ON $fbfe $8f9f 
183b				if DEBUG_STACK_IMB 
183b					if ON 
183b						exx 
183b						ld hl, $8f9f 
183b						pop de   ; $8f9f 
183b						call cmp16 
183b						jr nz, .spnosame 
183b						ld hl, $fbfe 
183b						pop de   ; $fbfe 
183b						call cmp16 
183b						jr z, .spfrsame 
183b						.spnosame: call showsperror 
183b						.spfrsame: nop 
183b						exx 
183b					endif 
183b				endif 
183b			endm 
# End of macro STACKFRAMECHK
183b				; TODO on return from forth parsing should there be a prompt to return to system? but already in system. 
183b			 
183b 3e 78			ld a, display_row_4 
183d 11 6e 18			ld de, endprog 
1840			 
1840 cd eb 0b			call update_display		 
1843			 
1843 cd 08 1b			call next_page_prompt 
1846			 
1846				; switch frame buffer to cli 
1846			 
1846 21 ab ed				ld hl, display_fb0 
1849 22 c6 eb				ld (display_fb_active), hl 
184c			 
184c			 
184c cd c8 0b		        call clear_display 
184f cd eb 0b			call update_display		 
1852			 
1852 21 e2 e5			ld hl, os_cli_cmd 
1855			 
1855 3e 00			ld a, 0		 ; init cli input 
1857 77				ld (hl), a 
1858			 
1858				; TODO f_cursor_ptr should inc row (scroll if required) and set start of row for next input  
1858			 
1858				; now on last line 
1858			 
1858				; TODO scroll screen up 
1858			 
1858				; TODO instead just clear screen and place at top of screen 
1858			 
1858			;	ld a, 0 
1858			;	ld (f_cursor_ptr),a 
1858			 
1858				;call clear_display 
1858				;call update_display 
1858			 
1858				;ld a, kLCD_Line1        ; TODO prompt using direct screen line address. Correct this to frame buffer 
1858 3e 00			ld a, display_row_1        ; TODO prompt using direct screen line address. Correct this to frame buffer 
185a c3 02 18			jp cli 
185d			 
185d .. 00		freeram: db "Free bytes: ",0 
186a ..			asc: db "1A2F" 
186e .. 00		endprog: db "End prog...",0 
187a			 
187a			testenter2:   
187a 21 ed e2			ld hl,scratch+50 
187d 22 de e5			ld (os_cur_ptr),hl 
1880 c3 02 18			jp cli 
1883			 
1883			testenter:  
1883			 
1883 21 6a 18			ld hl,asc 
1886			;	ld a,(hl) 
1886			;	call nibble2val 
1886 cd 54 10			call get_byte 
1889			 
1889			 
1889			;	ld a,(hl) 
1889			;	call atohex 
1889			 
1889			;	call fourehexhl 
1889 32 ed e2			ld (scratch+50),a 
188c			 
188c			 
188c			 
188c 21 6c 18			ld hl,asc+2 
188f			;	ld a, (hl) 
188f			;	call nibble2val 
188f cd 54 10			call get_byte 
1892			 
1892			;	call fourehexhl 
1892 32 ef e2			ld (scratch+52),a 
1895				 
1895 21 ed e2			ld hl,scratch+50 
1898 22 de e5			ld (os_cur_ptr),hl 
189b c3 02 18			jp cli 
189e			 
189e			enter:	 
189e 3a bf e2			ld a,(scratch+4) 
18a1 fe 00			cp 0 
18a3 28 0c			jr z, .entercont 
18a5				; no, not a null term line so has an address to work out.... 
18a5			 
18a5 21 bd e2			ld hl,scratch+2 
18a8 cd b4 10			call get_word_hl 
18ab			 
18ab 22 de e5			ld (os_cur_ptr),hl	 
18ae c3 02 18			jp cli 
18b1			 
18b1			 
18b1			.entercont:  
18b1			 
18b1 21 bd e2			ld hl, scratch+2 
18b4 cd 54 10			call get_byte 
18b7			 
18b7 2a de e5		   	ld hl,(os_cur_ptr) 
18ba 77					ld (hl),a 
18bb 23					inc hl 
18bc 22 de e5				ld (os_cur_ptr),hl 
18bf				 
18bf			; get byte  
18bf			 
18bf			 
18bf c3 02 18			jp cli 
18c2			 
18c2			 
18c2			; basic monitor support 
18c2			 
18c2			monitor: 
18c2				;  
18c2 cd c8 0b			call clear_display 
18c5 3e 00			ld a, 0 
18c7 11 1b 19			ld de, .monprompt 
18ca cd db 0b			call str_at_display 
18cd cd eb 0b			call update_display 
18d0			 
18d0				; get a monitor command 
18d0			 
18d0 0e 00			ld c, 0     ; entry at top left 
18d2 16 64			ld d, 100   ; max buffer size 
18d4 1e 0f			ld e, 15    ; input scroll area 
18d6 3e 00			ld a, 0     ; init string 
18d8 21 b9 e4			ld hl, os_input 
18db 77				ld (hl), a 
18dc 23				inc hl 
18dd 77				ld (hl), a 
18de 21 b9 e4			ld hl, os_input 
18e1 3e 01			ld a, 1     ; init string 
18e3 cd 22 0e			call input_str 
18e6			 
18e6 cd c8 0b		        call clear_display 
18e9 cd eb 0b			call update_display		 
18ec			 
18ec 3a b9 e4			ld a, (os_input) 
18ef cd 52 11			call toUpper 
18f2 fe 48		        cp 'H' 
18f4 ca 8f 19		        jp z, .monhelp 
18f7 fe 44			cp 'D'		; dump 
18f9 ca c2 19			jp z, .mondump	 
18fc fe 43			cp 'C'		; dump 
18fe ca dc 19			jp z, .moncdump	 
1901 fe 4d			cp 'M'		; dump 
1903 ca 1d 19			jp z, .moneditstart 
1906 fe 55			cp 'U'		; dump 
1908 ca 29 19			jp z, .monedit	 
190b fe 47			cp 'G'		; dump 
190d ca b8 19			jp z, .monjump 
1910 fe 42			cp 'B'		; forth breakpoint 
1912 cc 11 15			call z, break_point_state 
1915 fe 51			cp 'Q'		; dump 
1917 c8				ret z	 
1918			 
1918			 
1918				; TODO "S" to access symbol by name and not need the address 
1918				; TODO "F" to find a string in memory 
1918			 
1918 c3 c2 18			jp monitor 
191b			 
191b .. 00		.monprompt: db ">", 0 
191d			 
191d			.moneditstart: 
191d				; get starting address 
191d			 
191d 21 bb e4			ld hl,os_input+2 
1920 cd b4 10			call get_word_hl 
1923			 
1923 22 de e5			ld (os_cur_ptr),hl	 
1926			 
1926 c3 c2 18			jp monitor 
1929			 
1929			.monedit: 
1929				; get byte to load 
1929			 
1929 21 bb e4			ld hl,os_input+2 
192c cd 54 10			call get_byte 
192f			 
192f				; get address to update 
192f 2a de e5			ld hl, (os_cur_ptr) 
1932			 
1932				; update byte 
1932			 
1932 77				ld (hl), a 
1933			 
1933				; move to next address and save it 
1933			 
1933 23				inc hl 
1934 22 de e5			ld (os_cur_ptr),hl	 
1937			 
1937 c3 c2 18			jp monitor 
193a			 
193a			 
193a .. 00		.monhelptext1: 	db "D-Dump, C-Cont Dump",0 
194e .. 00		.monhelptext2:  db "M-Edit Start, U-Update Byte",0 
196a .. 00		.monhelptext3:  db "G-Call address, B-Breakpoints",0 
1988 .. 00		.monhelptext4:  db "Q-Quit",0 
198f			        
198f			.monhelp: 
198f 3e 00			ld a, display_row_1 
1991 11 3a 19		        ld de, .monhelptext1 
1994			 
1994 cd db 0b			call str_at_display 
1997 3e 28			ld a, display_row_2 
1999 11 4e 19		        ld de, .monhelptext2 
199c					 
199c cd db 0b			call str_at_display 
199f 3e 50			ld a, display_row_3 
19a1 11 6a 19		        ld de, .monhelptext3 
19a4					 
19a4 cd db 0b			call str_at_display 
19a7 3e 78			ld a, display_row_4 
19a9 11 88 19		        ld de, .monhelptext4 
19ac cd db 0b			call str_at_display 
19af			 
19af cd eb 0b			call update_display		 
19b2			 
19b2 cd 08 1b			call next_page_prompt 
19b5 c3 c2 18			jp monitor 
19b8			 
19b8			.monjump:    
19b8 21 bb e4			ld hl,os_input+2 
19bb cd b4 10			call get_word_hl 
19be			 
19be e9				jp (hl) 
19bf c3 c2 18			jp monitor 
19c2			 
19c2			.mondump:    
19c2 21 bb e4			ld hl,os_input+2 
19c5 cd b4 10			call get_word_hl 
19c8			 
19c8 22 de e5			ld (os_cur_ptr),hl	 
19cb cd 10 1a			call dumpcont 
19ce 3e 78			ld a, display_row_4 
19d0 11 6e 18			ld de, endprog 
19d3			 
19d3 cd eb 0b			call update_display		 
19d6			 
19d6 cd 08 1b			call next_page_prompt 
19d9 c3 c2 18			jp monitor 
19dc			.moncdump: 
19dc cd 10 1a			call dumpcont 
19df 3e 78			ld a, display_row_4 
19e1 11 6e 18			ld de, endprog 
19e4			 
19e4 cd eb 0b			call update_display		 
19e7			 
19e7 cd 08 1b			call next_page_prompt 
19ea c3 c2 18			jp monitor 
19ed			 
19ed			 
19ed			; TODO symbol access  
19ed			 
19ed			.symbols:     ;; A list of symbols that can be called up  
19ed ab ed			dw display_fb0 
19ef .. 00			db "fb0",0  
19f3 74 ea		     	dw store_page 
19f5 .. 00			db "store_page",0 
1a00			 
1a00			 
1a00			dump:	; see if we are cotinuing on from the last command by not uncluding any address 
1a00			 
1a00 3a bc e2			ld a,(scratch+1) 
1a03 fe 00			cp 0 
1a05 28 09			jr z, dumpcont 
1a07			 
1a07				; no, not a null term line so has an address to work out.... 
1a07			 
1a07 21 bd e2			ld hl,scratch+2 
1a0a cd b4 10			call get_word_hl 
1a0d			 
1a0d 22 de e5			ld (os_cur_ptr),hl	 
1a10			 
1a10			 
1a10			 
1a10			dumpcont: 
1a10			 
1a10				; dump bytes at ptr 
1a10			 
1a10			 
1a10 3e 00			ld a, display_row_1 
1a12 2a c6 eb			ld hl, (display_fb_active) 
1a15 cd f5 0d			call addatohl 
1a18 cd 40 1a			call .dumpbyterow 
1a1b			 
1a1b 3e 28			ld a, display_row_2 
1a1d 2a c6 eb			ld hl, (display_fb_active) 
1a20 cd f5 0d			call addatohl 
1a23 cd 40 1a			call .dumpbyterow 
1a26			 
1a26			 
1a26 3e 50			ld a, display_row_3 
1a28 2a c6 eb			ld hl, (display_fb_active) 
1a2b cd f5 0d			call addatohl 
1a2e cd 40 1a			call .dumpbyterow 
1a31			 
1a31 3e 78			ld a, display_row_4 
1a33 2a c6 eb			ld hl, (display_fb_active) 
1a36 cd f5 0d			call addatohl 
1a39 cd 40 1a			call .dumpbyterow 
1a3c			 
1a3c cd eb 0b			call update_display 
1a3f			;		jp cli 
1a3f c9				ret 
1a40			 
1a40			.dumpbyterow: 
1a40			 
1a40				;push af 
1a40			 
1a40 e5				push hl 
1a41			 
1a41				; calc where to poke the ascii 
1a41			if display_cols == 20 
1a41				ld a, 16 
1a41			else 
1a41 3e 1f			ld a, 31 
1a43			endif 
1a43			 
1a43 cd f5 0d			call addatohl 
1a46 22 c0 e5			ld (os_word_scratch),hl  		; save pos for later 
1a49			 
1a49			 
1a49			; display decoding address 
1a49 2a de e5		   	ld hl,(os_cur_ptr) 
1a4c			 
1a4c 7c				ld a,h 
1a4d e1				pop hl 
1a4e e5				push hl 
1a4f			;	ld hl, os_word_scratch		; TODO do direct write to frame buffer instead and drop the str_at_display 
1a4f cd fe 0f			call hexout 
1a52 2a de e5		   	ld hl,(os_cur_ptr) 
1a55			 
1a55 7d				ld a,l 
1a56 e1				pop hl 
1a57 23				inc hl 
1a58 23				inc hl 
1a59 e5				push hl 
1a5a			;	ld hl, os_word_scratch+2 
1a5a cd fe 0f			call hexout 
1a5d e1				pop hl 
1a5e 23				inc hl 
1a5f 23				inc hl 
1a60				;ld hl, os_word_scratch+4 
1a60 3e 3a			ld a, ':' 
1a62 77				ld (hl),a 
1a63 23				inc hl 
1a64				;ld a, 0 
1a64				;ld (hl),a 
1a64				;ld de, os_word_scratch 
1a64				;pop af 
1a64				;push af 
1a64			;		ld a, display_row_2 
1a64			;		call str_at_display 
1a64			;		call update_display 
1a64			 
1a64			 
1a64			;pop af 
1a64			;	add 5 
1a64			 
1a64			if display_cols == 20 
1a64				ld b, 4 
1a64			else 
1a64 06 08			ld b, 8 
1a66			endif	 
1a66			 
1a66			.dumpbyte: 
1a66 c5				push bc 
1a67 e5				push hl 
1a68			 
1a68			 
1a68 2a de e5		   	ld hl,(os_cur_ptr) 
1a6b 7e					ld a,(hl) 
1a6c			 
1a6c					; poke the ascii to display 
1a6c 2a c0 e5				ld hl,(os_word_scratch) 
1a6f 77					ld (hl),a 
1a70 23					inc hl 
1a71 22 c0 e5				ld (os_word_scratch),hl 
1a74			 
1a74					 
1a74			 
1a74			 
1a74 e1					pop hl 
1a75 e5					push hl 
1a76			 
1a76 cd fe 0f				call hexout 
1a79			 
1a79					 
1a79 2a de e5		   	ld hl,(os_cur_ptr) 
1a7c 23				inc hl 
1a7d 22 de e5		   	ld (os_cur_ptr),hl 
1a80			 
1a80 e1					pop hl 
1a81 23					inc hl 
1a82 23					inc hl 
1a83 23					inc hl 
1a84			 
1a84			 
1a84			 
1a84					;ld a,0 
1a84					;ld (os_word_scratch+2),a 
1a84					;pop af 
1a84					;push af 
1a84			 
1a84					;ld de, os_word_scratch 
1a84					;call str_at_display 
1a84			;		call update_display 
1a84			;		pop af 
1a84 c1					pop bc 
1a85 c6 03				add 3 
1a87 10 dd			djnz .dumpbyte 
1a89			 
1a89				 
1a89			 
1a89 c9				ret 
1a8a			 
1a8a			jump:	 
1a8a			 
1a8a 21 bd e2			ld hl,scratch+2 
1a8d cd b4 10			call get_word_hl 
1a90				;ld hl,(scratch+2) 
1a90				;call fourehexhl 
1a90			 
1a90 22 de e5			ld (os_cur_ptr),hl	 
1a93			 
1a93 e9				jp (hl) 
1a94			 
1a94			 
1a94			 
1a94			; TODO implement a basic monitor mode to start with 
1a94			 
1a94			 
1a94			 
1a94			 
1a94			 
1a94			 
1a94			 
1a94			 
1a94			 
1a94			; testing and demo code during development 
1a94			 
1a94			 
1a94 .. 00		str1: db "Enter some text...",0 
1aa7 .. 00		clear: db "                    ",0 
1abc			 
1abc			demo: 
1abc			 
1abc			 
1abc			 
1abc			;	call update_display 
1abc			 
1abc				; init scratch input area for testing 
1abc 21 bb e2			ld hl, scratch	 
1abf 3e 00			ld a,0 
1ac1 77				ld (hl),a 
1ac2			 
1ac2			 
1ac2 3e 28		            LD   A, display_row_2 
1ac4			;            CALL fLCD_Pos       ;Position cursor to location in A 
1ac4 11 94 1a		            LD   DE, str1 
1ac7 cd db 0b			call str_at_display 
1aca			 
1aca			;            CALL fLCD_Str       ;Display string pointed to by DE 
1aca			cloop:	 
1aca 3e 50		            LD   A, display_row_3 
1acc			;            CALL fLCD_Pos       ;Position cursor to location in A 
1acc 11 a7 1a		            LD   DE, clear 
1acf			 ;           CALL fLCD_Str       ;Display string pointed to by DE 
1acf cd db 0b				call str_at_display 
1ad2 3e 78			ld a, display_row_4 
1ad4 11 04 1b			ld de, prompt 
1ad7			 
1ad7 cd db 0b				call str_at_display 
1ada cd eb 0b			call update_display 
1add			 
1add 3e 79			ld a, kLCD_Line4+1	 ; TODO using direct screen line writes. Correct this to frame buffer 
1adf 16 0a			ld d, 10 
1ae1 21 bb e2			ld hl, scratch	 
1ae4 cd 22 0e			call input_str 
1ae7			 
1ae7			;	call clear_display 
1ae7			;'	call update_display 
1ae7			 
1ae7 3e 00		            LD   A, display_row_1 
1ae9			;            CALL fLCD_Pos       ;Position cursor to location in A 
1ae9 11 a7 1a		            LD   DE, clear 
1aec cd db 0b				call str_at_display 
1aef			;            CALL fLCD_Str       ;Display string pointed to by DE 
1aef 3e 00		            LD   A, display_row_1 
1af1			;            CALL fLCD_Pos       ;Position cursor to location in A 
1af1 11 bb e2		            LD   DE, scratch 
1af4			;            CALL fLCD_Str       ;Display string pointed to by DE 
1af4 cd db 0b				call str_at_display 
1af7 cd eb 0b			call update_display 
1afa			 
1afa 3e 00				ld a,0 
1afc 21 bb e2			ld hl, scratch 
1aff 77				ld (hl),a 
1b00			 
1b00 00				nop 
1b01 c3 ca 1a			jp cloop 
1b04			 
1b04			 
1b04			 
1b04			; OS Prompt 
1b04			 
1b04 .. 00		prompt: db ">",0 
1b06 .. 00		endprg: db "?",0 
1b08			 
1b08			 
1b08			; handy next page prompt 
1b08			next_page_prompt: 
1b08 e5				push hl 
1b09 d5				push de 
1b0a f5				push af 
1b0b c5				push bc 
1b0c			 
1b0c 3e 9f			ld a,display_row_4 + display_cols - 1 
1b0e 11 06 1b		        ld de, endprg 
1b11 cd db 0b			call str_at_display 
1b14 cd eb 0b			call update_display 
1b17 cd c1 5e			call cin_wait 
1b1a c1				pop bc 
1b1b f1				pop af 
1b1c d1				pop de 
1b1d e1				pop hl 
1b1e			 
1b1e			 
1b1e c9				ret 
1b1f			 
1b1f			 
1b1f			; forth parser 
1b1f			 
1b1f			; My forth kernel 
1b1f			include "forth_kernel.asm" 
1b1f			; 
1b1f			; kernel to the forth OS 
1b1f			 
1b1f			DS_TYPE_STR: equ 1     ; string type 
1b1f			DS_TYPE_INUM: equ 2     ; $ 16 bit unsigned int usually a hex address 
1b1f			DS_TYPE_SNUM: equ 3     ; $ 16 bit signed int  
1b1f			;DS_TYPE_FNUM: equ 3      ; 24/32 bit floating point  do string conversion instead of a new type 
1b1f			 
1b1f			FORTH_PARSEV1: equ 0 
1b1f			FORTH_PARSEV2: equ 0 
1b1f			FORTH_PARSEV3: equ 0 
1b1f			FORTH_PARSEV4: equ 0 
1b1f			FORTH_PARSEV5: equ 1 
1b1f			 
1b1f			;if FORTH_PARSEV5 
1b1f			;	FORTH_END_BUFFER: equ 0 
1b1f			;else 
1b1f			FORTH_END_BUFFER: equ 127 
1b1f			;endif 
1b1f			 
1b1f			FORTH_TRUE: equ 1 
1b1f			FORTH_FALSE: equ 0 
1b1f			 
1b1f			if FORTH_PARSEV4 
1b1f			include "forth_stackops.asm" 
1b1f			endif 
1b1f			 
1b1f			if FORTH_PARSEV5 
1b1f			include "forth_stackopsv5.asm" 
1b1f			 
1b1f			; Stack operations for v5 parser on wards 
1b1f			; * DATA stack 
1b1f			; * LOOP stack 
1b1f			; * RETURN stack 
1b1f			 
1b1f			 
1b1f			 
1b1f			FORTH_CHK_DSP_UNDER: macro 
1b1f				push hl 
1b1f				push de 
1b1f				ld hl,(cli_data_sp) 
1b1f				ld de, cli_data_stack 
1b1f				call cmp16 
1b1f				jp c, fault_dsp_under 
1b1f				pop de 
1b1f				pop hl 
1b1f				endm 
1b1f			 
1b1f			 
1b1f			FORTH_CHK_RSP_UNDER: macro 
1b1f				push hl 
1b1f				push de 
1b1f				ld hl,(cli_ret_sp) 
1b1f				ld de, cli_ret_stack 
1b1f				call cmp16 
1b1f				jp c, fault_rsp_under 
1b1f				pop de 
1b1f				pop hl 
1b1f				endm 
1b1f			 
1b1f			FORTH_CHK_LOOP_UNDER: macro 
1b1f				push hl 
1b1f				push de 
1b1f				ld hl,(cli_loop_sp) 
1b1f				ld de, cli_loop_stack 
1b1f				call cmp16 
1b1f				jp c, fault_loop_under 
1b1f				pop de 
1b1f				pop hl 
1b1f				endm 
1b1f			 
1b1f			FORTH_ERR_TOS_NOTSTR: macro 
1b1f				; TOSO might need more for checks when used 
1b1f				push af 
1b1f				ld a,(hl) 
1b1f				cp DS_TYPE_STR 
1b1f				jp nz, type_faultn   
1b1f				pop af 
1b1f				endm 
1b1f			 
1b1f			FORTH_ERR_TOS_NOTNUM: macro 
1b1f				push af 
1b1f				ld a,(hl) 
1b1f				cp DS_TYPE_INUM 
1b1f				jp nz, type_faultn   
1b1f				pop af 
1b1f				endm 
1b1f			 
1b1f			 
1b1f			; increase data stack pointer and save hl to it 
1b1f				 
1b1f			FORTH_DSP_NEXT: macro 
1b1f				call macro_forth_dsp_next 
1b1f				endm 
1b1f			 
1b1f			 
1b1f			macro_forth_dsp_next: 
1b1f				if DEBUG_FORTH_STACK_GUARD 
1b1f cd e7 5a				call check_stacks 
1b22				endif 
1b22 e5				push hl 
1b23 d5				push de 
1b24 eb				ex de,hl 
1b25 2a e8 e9			ld hl,(cli_data_sp) 
1b28 23				inc hl 
1b29 23				inc hl 
1b2a			 
1b2a			; PARSEV5 
1b2a 23				inc hl 
1b2b 22 e8 e9			ld (cli_data_sp),hl 
1b2e 73				ld (hl), e 
1b2f 23				inc hl 
1b30 72				ld (hl), d 
1b31 d1				pop de 
1b32 e1				pop hl 
1b33				if DEBUG_FORTH_STACK_GUARD 
1b33 cd e7 5a				call check_stacks 
1b36				endif 
1b36 c9				ret 
1b37			 
1b37			 
1b37			; increase ret stack pointer and save hl to it 
1b37				 
1b37			FORTH_RSP_NEXT: macro 
1b37				call macro_forth_rsp_next 
1b37				endm 
1b37			 
1b37			macro_forth_rsp_next: 
1b37				if DEBUG_FORTH_STACK_GUARD 
1b37 cd e7 5a				call check_stacks 
1b3a				endif 
1b3a e5				push hl 
1b3b d5				push de 
1b3c eb				ex de,hl 
1b3d 2a ec e9			ld hl,(cli_ret_sp) 
1b40 23				inc hl 
1b41 23				inc hl 
1b42 22 ec e9			ld (cli_ret_sp),hl 
1b45 73				ld (hl), e 
1b46 23				inc hl 
1b47 72				ld (hl), d 
1b48 d1				pop de 
1b49 e1				pop hl 
1b4a				if DEBUG_FORTH_STACK_GUARD 
1b4a cd e7 5a				call check_stacks 
1b4d				endif 
1b4d c9				ret 
1b4e			 
1b4e			; get current ret stack pointer and save to hl  
1b4e				 
1b4e			FORTH_RSP_TOS: macro 
1b4e				call macro_forth_rsp_tos 
1b4e				endm 
1b4e			 
1b4e			macro_forth_rsp_tos: 
1b4e				;push de 
1b4e 2a ec e9			ld hl,(cli_ret_sp) 
1b51 cd 89 1b			call loadhlptrtohl 
1b54				;ld e, (hl) 
1b54				;inc hl 
1b54				;ld d, (hl) 
1b54				;ex de, hl 
1b54					if DEBUG_FORTH_WORDS 
1b54			;			DMARK "RST" 
1b54						CALLMONITOR 
1b54 cd 6f ee			call debug_vector  
1b57				endm  
# End of macro CALLMONITOR
1b57					endif 
1b57				;pop de 
1b57 c9				ret 
1b58			 
1b58			; pop ret stack pointer 
1b58				 
1b58			FORTH_RSP_POP: macro 
1b58				call macro_forth_rsp_pop 
1b58				endm 
1b58			 
1b58			 
1b58			macro_forth_rsp_pop: 
1b58				if DEBUG_FORTH_STACK_GUARD 
1b58			;		DMARK "RPP" 
1b58 cd e7 5a				call check_stacks 
1b5b					FORTH_CHK_RSP_UNDER 
1b5b e5				push hl 
1b5c d5				push de 
1b5d 2a ec e9			ld hl,(cli_ret_sp) 
1b60 11 a6 e9			ld de, cli_ret_stack 
1b63 cd 13 0e			call cmp16 
1b66 da fe 5b			jp c, fault_rsp_under 
1b69 d1				pop de 
1b6a e1				pop hl 
1b6b				endm 
# End of macro FORTH_CHK_RSP_UNDER
1b6b				endif 
1b6b e5				push hl 
1b6c 2a ec e9			ld hl,(cli_ret_sp) 
1b6f			 
1b6f			 
1b6f				if FORTH_ENABLE_FREE 
1b6f			 
1b6f					; get pointer 
1b6f			 
1b6f					push de 
1b6f					push hl 
1b6f			 
1b6f					ld e, (hl) 
1b6f					inc hl 
1b6f					ld d, (hl) 
1b6f			 
1b6f					ex de, hl 
1b6f					call free 
1b6f			 
1b6f					pop hl 
1b6f					pop de 
1b6f			 
1b6f			 
1b6f				endif 
1b6f			 
1b6f			 
1b6f 2b				dec hl 
1b70 2b				dec hl 
1b71 22 ec e9			ld (cli_ret_sp), hl 
1b74				; do stack underflow checks 
1b74 e1				pop hl 
1b75				if DEBUG_FORTH_STACK_GUARD 
1b75 cd e7 5a				call check_stacks 
1b78					FORTH_CHK_RSP_UNDER 
1b78 e5				push hl 
1b79 d5				push de 
1b7a 2a ec e9			ld hl,(cli_ret_sp) 
1b7d 11 a6 e9			ld de, cli_ret_stack 
1b80 cd 13 0e			call cmp16 
1b83 da fe 5b			jp c, fault_rsp_under 
1b86 d1				pop de 
1b87 e1				pop hl 
1b88				endm 
# End of macro FORTH_CHK_RSP_UNDER
1b88				endif 
1b88 c9				ret 
1b89			 
1b89			 
1b89			 
1b89			; routine to load word pointed to by hl into hl 
1b89			 
1b89			loadhlptrtohl: 
1b89			 
1b89 d5				push de 
1b8a 5e				ld e, (hl) 
1b8b 23				inc hl 
1b8c 56				ld d, (hl) 
1b8d eb				ex de, hl 
1b8e d1				pop de 
1b8f			 
1b8f c9				ret 
1b90			 
1b90			 
1b90			 
1b90			 
1b90			 
1b90			; push a number held in HL onto the data stack 
1b90			; entry point for pushing a value when already in hl used in function above 
1b90			 
1b90			forth_push_numhl: 
1b90			 
1b90 e5				push hl    ; save value to push 
1b91			 
1b91			if DEBUG_FORTH_PUSH 
1b91				; see if disabled 
1b91			 
1b91			 
1b91 f5				push af 
1b92 3a 6f ee			ld a,(debug_vector) 
1b95 fe c9			cp $c9   ; ret 
1b97			;	ld a, (os_view_disable) 
1b97			;	cp '*' 
1b97 28 34			jr z, .pskip2 
1b99 e5				push hl 
1b9a e5			push hl 
1b9b cd c8 0b			call clear_display 
1b9e e1			pop hl 
1b9f 7c				ld a,h 
1ba0 21 c0 e5			ld hl, os_word_scratch 
1ba3 cd fe 0f			call hexout 
1ba6 e1				pop hl 
1ba7 7d				ld a,l 
1ba8 21 c2 e5			ld hl, os_word_scratch+2 
1bab cd fe 0f			call hexout 
1bae			 
1bae 21 c4 e5			ld hl, os_word_scratch+4 
1bb1 3e 00			ld a,0 
1bb3 77				ld (hl),a 
1bb4 11 c0 e5			ld de,os_word_scratch 
1bb7 3e 28				ld a, display_row_2 
1bb9 cd db 0b				call str_at_display 
1bbc 11 f5 4c			ld de, .push_num 
1bbf 3e 00			ld a, display_row_1 
1bc1			 
1bc1 cd db 0b				call str_at_display 
1bc4			 
1bc4			 
1bc4 cd eb 0b			call update_display 
1bc7 cd 00 0b			call delay1s 
1bca cd 00 0b			call delay1s 
1bcd			.pskip2:  
1bcd			 
1bcd f1				pop af 
1bce			endif	 
1bce			 
1bce			 
1bce				FORTH_DSP_NEXT 
1bce cd 1f 1b			call macro_forth_dsp_next 
1bd1				endm 
# End of macro FORTH_DSP_NEXT
1bd1			 
1bd1 2a e8 e9			ld hl, (cli_data_sp) 
1bd4			 
1bd4				; save item type 
1bd4 3e 02			ld a,  DS_TYPE_INUM 
1bd6 77				ld (hl), a 
1bd7 23				inc hl 
1bd8			 
1bd8				; get word off stack 
1bd8 d1				pop de 
1bd9 7b				ld a,e 
1bda 77				ld (hl), a 
1bdb 23				inc hl 
1bdc 7a				ld a,d 
1bdd 77				ld (hl), a 
1bde			 
1bde			if DEBUG_FORTH_PUSH 
1bde 2b				dec hl 
1bdf 2b				dec hl 
1be0 2b				dec hl 
1be1						DMARK "PH5" 
1be1 f5				push af  
1be2 3a f6 1b			ld a, (.dmark)  
1be5 32 65 ee			ld (debug_mark),a  
1be8 3a f7 1b			ld a, (.dmark+1)  
1beb 32 66 ee			ld (debug_mark+1),a  
1bee 3a f8 1b			ld a, (.dmark+2)  
1bf1 32 67 ee			ld (debug_mark+2),a  
1bf4 18 03			jr .pastdmark  
1bf6 ..			.dmark: db "PH5"  
1bf9 f1			.pastdmark: pop af  
1bfa			endm  
# End of macro DMARK
1bfa				CALLMONITOR 
1bfa cd 6f ee			call debug_vector  
1bfd				endm  
# End of macro CALLMONITOR
1bfd			endif	 
1bfd			 
1bfd c9				ret 
1bfe			 
1bfe			 
1bfe			; Push a string to stack pointed to by hl 
1bfe			 
1bfe			forth_push_str: 
1bfe			 
1bfe			if DEBUG_FORTH_PUSH 
1bfe						DMARK "PSQ" 
1bfe f5				push af  
1bff 3a 13 1c			ld a, (.dmark)  
1c02 32 65 ee			ld (debug_mark),a  
1c05 3a 14 1c			ld a, (.dmark+1)  
1c08 32 66 ee			ld (debug_mark+1),a  
1c0b 3a 15 1c			ld a, (.dmark+2)  
1c0e 32 67 ee			ld (debug_mark+2),a  
1c11 18 03			jr .pastdmark  
1c13 ..			.dmark: db "PSQ"  
1c16 f1			.pastdmark: pop af  
1c17			endm  
# End of macro DMARK
1c17				CALLMONITOR 
1c17 cd 6f ee			call debug_vector  
1c1a				endm  
# End of macro CALLMONITOR
1c1a			endif	 
1c1a			 
1c1a			 
1c1a			    
1c1a e5				push hl 
1c1b e5				push hl 
1c1c			 
1c1c			;	ld a, 0   ; find end of string 
1c1c cd 5b 11			call strlenz 
1c1f			if DEBUG_FORTH_PUSH 
1c1f						DMARK "PQ2" 
1c1f f5				push af  
1c20 3a 34 1c			ld a, (.dmark)  
1c23 32 65 ee			ld (debug_mark),a  
1c26 3a 35 1c			ld a, (.dmark+1)  
1c29 32 66 ee			ld (debug_mark+1),a  
1c2c 3a 36 1c			ld a, (.dmark+2)  
1c2f 32 67 ee			ld (debug_mark+2),a  
1c32 18 03			jr .pastdmark  
1c34 ..			.dmark: db "PQ2"  
1c37 f1			.pastdmark: pop af  
1c38			endm  
# End of macro DMARK
1c38				CALLMONITOR 
1c38 cd 6f ee			call debug_vector  
1c3b				endm  
# End of macro CALLMONITOR
1c3b			endif	 
1c3b eb				ex de, hl 
1c3c e1				pop hl   ; get ptr to start of string 
1c3d			if DEBUG_FORTH_PUSH 
1c3d						DMARK "PQ3" 
1c3d f5				push af  
1c3e 3a 52 1c			ld a, (.dmark)  
1c41 32 65 ee			ld (debug_mark),a  
1c44 3a 53 1c			ld a, (.dmark+1)  
1c47 32 66 ee			ld (debug_mark+1),a  
1c4a 3a 54 1c			ld a, (.dmark+2)  
1c4d 32 67 ee			ld (debug_mark+2),a  
1c50 18 03			jr .pastdmark  
1c52 ..			.dmark: db "PQ3"  
1c55 f1			.pastdmark: pop af  
1c56			endm  
# End of macro DMARK
1c56				CALLMONITOR 
1c56 cd 6f ee			call debug_vector  
1c59				endm  
# End of macro CALLMONITOR
1c59			endif	 
1c59 19				add hl,de 
1c5a			if DEBUG_FORTH_PUSH 
1c5a						DMARK "PQE" 
1c5a f5				push af  
1c5b 3a 6f 1c			ld a, (.dmark)  
1c5e 32 65 ee			ld (debug_mark),a  
1c61 3a 70 1c			ld a, (.dmark+1)  
1c64 32 66 ee			ld (debug_mark+1),a  
1c67 3a 71 1c			ld a, (.dmark+2)  
1c6a 32 67 ee			ld (debug_mark+2),a  
1c6d 18 03			jr .pastdmark  
1c6f ..			.dmark: db "PQE"  
1c72 f1			.pastdmark: pop af  
1c73			endm  
# End of macro DMARK
1c73				CALLMONITOR 
1c73 cd 6f ee			call debug_vector  
1c76				endm  
# End of macro CALLMONITOR
1c76			endif	 
1c76			 
1c76 2b				dec hl    ; see if there is an optional trailing double quote 
1c77 7e				ld a,(hl) 
1c78 fe 22			cp '"' 
1c7a 20 03			jr nz, .strnoq 
1c7c 3e 00			ld a, 0      ; get rid of double quote 
1c7e 77				ld (hl), a 
1c7f 23			.strnoq: inc hl 
1c80			 
1c80 3e 00			ld a, 0 
1c82 77				ld (hl), a     ; add null term and get rid of trailing double quote 
1c83			 
1c83 13				inc de ; add one for the type string 
1c84 13				inc de ; add one for null term??? 
1c85			 
1c85				; tos is get string pointer again 
1c85				; de contains space to allocate 
1c85				 
1c85 d5				push de 
1c86			 
1c86 eb				ex de, hl 
1c87			 
1c87				;push af 
1c87			 
1c87			if DEBUG_FORTH_PUSH 
1c87						DMARK "PHm" 
1c87 f5				push af  
1c88 3a 9c 1c			ld a, (.dmark)  
1c8b 32 65 ee			ld (debug_mark),a  
1c8e 3a 9d 1c			ld a, (.dmark+1)  
1c91 32 66 ee			ld (debug_mark+1),a  
1c94 3a 9e 1c			ld a, (.dmark+2)  
1c97 32 67 ee			ld (debug_mark+2),a  
1c9a 18 03			jr .pastdmark  
1c9c ..			.dmark: db "PHm"  
1c9f f1			.pastdmark: pop af  
1ca0			endm  
# End of macro DMARK
1ca0				CALLMONITOR 
1ca0 cd 6f ee			call debug_vector  
1ca3				endm  
# End of macro CALLMONITOR
1ca3			endif	 
1ca3 cd d0 11			call malloc	; on ret hl now contains allocated memory 
1ca6				if DEBUG_FORTH_MALLOC_GUARD 
1ca6 cc 4d 4d				call z,malloc_error 
1ca9				endif 
1ca9			 
1ca9				 
1ca9 c1				pop bc    ; get length 
1caa d1				pop de   ;  get string start    
1cab			 
1cab				; hl has destination from malloc 
1cab			 
1cab eb				ex de, hl    ; prep for ldir 
1cac			 
1cac d5				push de   ; save malloc area for DSP later 
1cad				;push hl   ; save malloc area for DSP later 
1cad			 
1cad			if DEBUG_FORTH_PUSH 
1cad						DMARK "PHc" 
1cad f5				push af  
1cae 3a c2 1c			ld a, (.dmark)  
1cb1 32 65 ee			ld (debug_mark),a  
1cb4 3a c3 1c			ld a, (.dmark+1)  
1cb7 32 66 ee			ld (debug_mark+1),a  
1cba 3a c4 1c			ld a, (.dmark+2)  
1cbd 32 67 ee			ld (debug_mark+2),a  
1cc0 18 03			jr .pastdmark  
1cc2 ..			.dmark: db "PHc"  
1cc5 f1			.pastdmark: pop af  
1cc6			endm  
# End of macro DMARK
1cc6				CALLMONITOR 
1cc6 cd 6f ee			call debug_vector  
1cc9				endm  
# End of macro CALLMONITOR
1cc9			endif	 
1cc9			 
1cc9			 
1cc9 ed b0			ldir 
1ccb			 
1ccb			 
1ccb				; push malloc to data stack     macro?????  
1ccb			 
1ccb				FORTH_DSP_NEXT 
1ccb cd 1f 1b			call macro_forth_dsp_next 
1cce				endm 
# End of macro FORTH_DSP_NEXT
1cce			 
1cce				; save value and type 
1cce			 
1cce 2a e8 e9			ld hl, (cli_data_sp) 
1cd1			 
1cd1				; save item type 
1cd1 3e 01			ld a,  DS_TYPE_STR 
1cd3 77				ld (hl), a 
1cd4 23				inc hl 
1cd5			 
1cd5				; get malloc word off stack 
1cd5 d1				pop de 
1cd6 73				ld (hl), e 
1cd7 23				inc hl 
1cd8 72				ld (hl), d 
1cd9			 
1cd9			 
1cd9			 
1cd9			if DEBUG_FORTH_PUSH 
1cd9 2a e8 e9			ld hl, (cli_data_sp) 
1cdc						DMARK "PHS" 
1cdc f5				push af  
1cdd 3a f1 1c			ld a, (.dmark)  
1ce0 32 65 ee			ld (debug_mark),a  
1ce3 3a f2 1c			ld a, (.dmark+1)  
1ce6 32 66 ee			ld (debug_mark+1),a  
1ce9 3a f3 1c			ld a, (.dmark+2)  
1cec 32 67 ee			ld (debug_mark+2),a  
1cef 18 03			jr .pastdmark  
1cf1 ..			.dmark: db "PHS"  
1cf4 f1			.pastdmark: pop af  
1cf5			endm  
# End of macro DMARK
1cf5				CALLMONITOR 
1cf5 cd 6f ee			call debug_vector  
1cf8				endm  
# End of macro CALLMONITOR
1cf8			;	ex de,hl 
1cf8			endif	 
1cf8				; in case of spaces, skip the ptr past the copied string 
1cf8				;pop af 
1cf8				;ld (cli_origptr),hl 
1cf8			 
1cf8 c9				ret 
1cf9			 
1cf9			 
1cf9			 
1cf9			; TODO ascii push input onto stack given hl to start of input 
1cf9			 
1cf9			; identify type 
1cf9			; if starts with a " then a string 
1cf9			; otherwise it is a number 
1cf9			;  
1cf9			; if a string 
1cf9			;     scan for ending " to get length of string to malloc for + 1 
1cf9			;     malloc 
1cf9			;     put pointer to string on stack first byte flags as string 
1cf9			; 
1cf9			; else a number 
1cf9			;    look for number format identifier 
1cf9			;    $xx hex 
1cf9			;    %xxxxx bin 
1cf9			;    xxxxx decimal 
1cf9			;    convert number to 16bit word.  
1cf9			;    malloc word + 1 with flag to identiy as num 
1cf9			;    put pointer to number on stack 
1cf9			;   
1cf9			;  
1cf9			  
1cf9			forth_apush: 
1cf9				; kernel push 
1cf9			 
1cf9			if DEBUG_FORTH_PUSH 
1cf9						DMARK "PSH" 
1cf9 f5				push af  
1cfa 3a 0e 1d			ld a, (.dmark)  
1cfd 32 65 ee			ld (debug_mark),a  
1d00 3a 0f 1d			ld a, (.dmark+1)  
1d03 32 66 ee			ld (debug_mark+1),a  
1d06 3a 10 1d			ld a, (.dmark+2)  
1d09 32 67 ee			ld (debug_mark+2),a  
1d0c 18 03			jr .pastdmark  
1d0e ..			.dmark: db "PSH"  
1d11 f1			.pastdmark: pop af  
1d12			endm  
# End of macro DMARK
1d12				CALLMONITOR 
1d12 cd 6f ee			call debug_vector  
1d15				endm  
# End of macro CALLMONITOR
1d15			endif	 
1d15				; identify input type 
1d15			 
1d15 7e				ld a,(hl) 
1d16			 
1d16 fe 23			cp '#' 
1d18 ca 52 1d			jp z, .fapdec 
1d1b			 
1d1b			 
1d1b fe 22			cp '"' 
1d1d 28 0a			jr z, .fapstr 
1d1f fe 24			cp '$' 
1d21 ca 49 1d			jp z, .faphex 
1d24 fe 25			cp '%' 
1d26 ca 31 1d			jp z, .fapbin 
1d29			;	cp 'b' 
1d29			;	jp z, .fabin 
1d29				; else decimal 
1d29			 
1d29				; TODO do decimal conversion 
1d29				; decimal is stored as a 16bit word 
1d29			 
1d29				; by default everything is a string if type is not detected 
1d29			.fapstr: ; 
1d29 fe 22			cp '"' 
1d2b 20 01			jr nz, .strnoqu 
1d2d 23				inc hl 
1d2e			.strnoqu: 
1d2e c3 fe 1b			jp forth_push_str 
1d31			 
1d31			 
1d31			 
1d31			.fapbin:    ; push a binary string.  
1d31 11 00 00			ld de, 0   ; hold a 16bit value 
1d34			 
1d34 23			.fapbinshift:	inc hl  
1d35 7e				ld a,(hl) 
1d36 fe 00			cp 0     ; done scanning  
1d38 28 0b			jr z, .fapbdone  	; got it in HL so push  
1d3a			 
1d3a				; left shift de 
1d3a eb				ex de, hl	 
1d3b 29				add hl, hl 
1d3c			 
1d3c				; is 1 
1d3c fe 31			cp '1' 
1d3e 20 02			jr nz, .binzero 
1d40 cb 4d			bit 1, l 
1d42			.binzero: 
1d42 eb				ex de, hl	 ; save current de 
1d43 18 ef			jr .fapbinshift 
1d45			 
1d45			.fapbdone: 
1d45 eb				ex de, hl 
1d46 c3 90 1b			jp forth_push_numhl 
1d49			 
1d49			 
1d49			.faphex:   ; hex is always stored as a 16bit word 
1d49				; skip number prefix 
1d49 23				inc hl 
1d4a				; turn ascii into number 
1d4a cd b4 10			call get_word_hl	; ret 16bit word in hl 
1d4d			 
1d4d c3 90 1b			jp forth_push_numhl 
1d50			 
1d50 00				 nop 
1d51			 
1d51			.fabin:   ; TODO bin conversion 
1d51			 
1d51			 
1d51 c9				ret 
1d52			.fapdec:	 
1d52				; string to dec conversion 
1d52 23				inc hl 
1d53 eb				ex de, hl 
1d54 cd f2 10			call string_to_uint16 
1d57 c3 90 1b			jp forth_push_numhl 
1d5a c9				ret 
1d5b				 
1d5b			;atoui_16: 
1d5b			 
1d5b			; get either a string ptr or a 16bit word from the data stack 
1d5b			 
1d5b			FORTH_DSP: macro 
1d5b				call macro_forth_dsp 
1d5b				endm 
1d5b			 
1d5b			macro_forth_dsp: 
1d5b				; data stack pointer points to current word on tos 
1d5b			 
1d5b 2a e8 e9			ld hl,(cli_data_sp) 
1d5e			 
1d5e				if DEBUG_FORTH_PUSH 
1d5e						DMARK "DSP" 
1d5e f5				push af  
1d5f 3a 73 1d			ld a, (.dmark)  
1d62 32 65 ee			ld (debug_mark),a  
1d65 3a 74 1d			ld a, (.dmark+1)  
1d68 32 66 ee			ld (debug_mark+1),a  
1d6b 3a 75 1d			ld a, (.dmark+2)  
1d6e 32 67 ee			ld (debug_mark+2),a  
1d71 18 03			jr .pastdmark  
1d73 ..			.dmark: db "DSP"  
1d76 f1			.pastdmark: pop af  
1d77			endm  
# End of macro DMARK
1d77			 
1d77 cd 80 4d				call display_data_sp 
1d7a				;call break_point_state 
1d7a				;rst 030h 
1d7a				CALLMONITOR 
1d7a cd 6f ee			call debug_vector  
1d7d				endm  
# End of macro CALLMONITOR
1d7d				endif 
1d7d			 
1d7d c9				ret 
1d7e			 
1d7e			; return hl to start of value on stack 
1d7e			 
1d7e			FORTH_DSP_VALUE: macro 
1d7e				call macro_forth_dsp_value 
1d7e				endm 
1d7e			 
1d7e			macro_forth_dsp_value: 
1d7e			 
1d7e				FORTH_DSP 
1d7e cd 5b 1d			call macro_forth_dsp 
1d81				endm 
# End of macro FORTH_DSP
1d81			 
1d81 d5				push de 
1d82			 
1d82 23				inc hl ; skip type 
1d83			 
1d83 5e				ld e, (hl) 
1d84 23				inc hl 
1d85 56				ld d, (hl) 
1d86 eb				ex de,hl  
1d87			 
1d87 d1				pop de 
1d88			 
1d88 c9				ret 
1d89			 
1d89			; return hl to start of value to second item on stack 
1d89			 
1d89			FORTH_DSP_VALUEM1: macro 
1d89				call macro_forth_dsp_value_m1 
1d89				endm 
1d89			 
1d89			macro_forth_dsp_value_m1: 
1d89			 
1d89				FORTH_DSP 
1d89 cd 5b 1d			call macro_forth_dsp 
1d8c				endm 
# End of macro FORTH_DSP
1d8c			 
1d8c 2b				dec hl 
1d8d 2b				dec hl 
1d8e			;	dec hl 
1d8e			 
1d8e d5				push de 
1d8f			 
1d8f 5e				ld e, (hl) 
1d90 23				inc hl 
1d91 56				ld d, (hl) 
1d92 eb				ex de,hl  
1d93			 
1d93 d1				pop de 
1d94			 
1d94 c9				ret 
1d95			 
1d95				 
1d95			 
1d95			; whatever the current top os stack points to, we are now done with it so return memory to malloc 
1d95			 
1d95			FORTH_DSP_POP: macro 
1d95				call macro_forth_dsp_pop 
1d95				endm 
1d95			 
1d95			 
1d95			; get the tos data type 
1d95			 
1d95			FORTH_DSP_TYPE:   macro 
1d95			 
1d95				;FORTH_DSP_VALUE 
1d95				FORTH_DSP 
1d95				 
1d95				; hl points to value 
1d95				; check type 
1d95			 
1d95				ld a,(hl) 
1d95			 
1d95				endm 
1d95			 
1d95			; load the tos value into hl 
1d95			 
1d95			 
1d95			FORTH_DSP_VALUEHL:  macro 
1d95				call macro_dsp_valuehl 
1d95				endm 
1d95			 
1d95			 
1d95			 
1d95			macro_dsp_valuehl: 
1d95				FORTH_DSP_VALUE 
1d95 cd 7e 1d			call macro_forth_dsp_value 
1d98				endm 
# End of macro FORTH_DSP_VALUE
1d98			 
1d98				;FORTH_ERR_TOS_NOTNUM 
1d98			 
1d98				;inc hl   ; skip type id 
1d98			 
1d98			;	push de 
1d98			; 
1d98			;	ld e, (hl) 
1d98			;	inc hl 
1d98			;	ld d, (hl) 
1d98			;	ex de,hl  
1d98			 
1d98			;	pop de 
1d98			 
1d98				if DEBUG_FORTH_PUSH 
1d98						DMARK "DVL" 
1d98 f5				push af  
1d99 3a ad 1d			ld a, (.dmark)  
1d9c 32 65 ee			ld (debug_mark),a  
1d9f 3a ae 1d			ld a, (.dmark+1)  
1da2 32 66 ee			ld (debug_mark+1),a  
1da5 3a af 1d			ld a, (.dmark+2)  
1da8 32 67 ee			ld (debug_mark+2),a  
1dab 18 03			jr .pastdmark  
1dad ..			.dmark: db "DVL"  
1db0 f1			.pastdmark: pop af  
1db1			endm  
# End of macro DMARK
1db1				CALLMONITOR 
1db1 cd 6f ee			call debug_vector  
1db4				endm  
# End of macro CALLMONITOR
1db4				endif 
1db4 c9				ret 
1db5			 
1db5			forth_apushstrhl:      
1db5				; push of string requires use of cli_origptr 
1db5				; bodge use 
1db5			 
1db5				; get current cli_origptr, save, update with temp pointer  
1db5 ed 5b 38 ea		ld de, (cli_origptr) 
1db9 22 38 ea			ld (cli_origptr), hl 
1dbc d5				push de 
1dbd cd f9 1c			call forth_apush 
1dc0 d1				pop de 
1dc1 ed 53 38 ea		ld (cli_origptr), de 
1dc5 c9			        ret	 
1dc6			 
1dc6			 
1dc6			; increase loop stack pointer and save hl to it 
1dc6				 
1dc6			FORTH_LOOP_NEXT: macro 
1dc6				call macro_forth_loop_next 
1dc6				;nop 
1dc6				endm 
1dc6			 
1dc6			macro_forth_loop_next: 
1dc6				if DEBUG_FORTH_STACK_GUARD 
1dc6 cd e7 5a				call check_stacks 
1dc9				endif 
1dc9 e5				push hl 
1dca d5				push de 
1dcb eb				ex de,hl 
1dcc 2a ea e9			ld hl,(cli_loop_sp) 
1dcf 23				inc hl 
1dd0 23				inc hl 
1dd1					if DEBUG_FORTH_WORDS 
1dd1						DMARK "LNX" 
1dd1 f5				push af  
1dd2 3a e6 1d			ld a, (.dmark)  
1dd5 32 65 ee			ld (debug_mark),a  
1dd8 3a e7 1d			ld a, (.dmark+1)  
1ddb 32 66 ee			ld (debug_mark+1),a  
1dde 3a e8 1d			ld a, (.dmark+2)  
1de1 32 67 ee			ld (debug_mark+2),a  
1de4 18 03			jr .pastdmark  
1de6 ..			.dmark: db "LNX"  
1de9 f1			.pastdmark: pop af  
1dea			endm  
# End of macro DMARK
1dea						CALLMONITOR 
1dea cd 6f ee			call debug_vector  
1ded				endm  
# End of macro CALLMONITOR
1ded					endif 
1ded 22 ea e9			ld (cli_loop_sp),hl 
1df0 73				ld (hl), e 
1df1 23				inc hl 
1df2 72				ld (hl), d 
1df3 d1				pop de    ; been reversed so save a swap on restore 
1df4 e1				pop hl 
1df5				if DEBUG_FORTH_STACK_GUARD 
1df5 cd e7 5a				call check_stacks 
1df8				endif 
1df8 c9				ret 
1df9			 
1df9			; get current ret stack pointer and save to hl  
1df9				 
1df9			FORTH_LOOP_TOS: macro 
1df9				call macro_forth_loop_tos 
1df9				endm 
1df9			 
1df9			macro_forth_loop_tos: 
1df9 d5				push de 
1dfa 2a ea e9			ld hl,(cli_loop_sp) 
1dfd 5e				ld e, (hl) 
1dfe 23				inc hl 
1dff 56				ld d, (hl) 
1e00 eb				ex de, hl 
1e01 d1				pop de 
1e02 c9				ret 
1e03			 
1e03			; pop loop stack pointer 
1e03				 
1e03			FORTH_LOOP_POP: macro 
1e03				call macro_forth_loop_pop 
1e03				endm 
1e03			 
1e03			 
1e03			macro_forth_loop_pop: 
1e03				if DEBUG_FORTH_STACK_GUARD 
1e03					DMARK "LPP" 
1e03 f5				push af  
1e04 3a 18 1e			ld a, (.dmark)  
1e07 32 65 ee			ld (debug_mark),a  
1e0a 3a 19 1e			ld a, (.dmark+1)  
1e0d 32 66 ee			ld (debug_mark+1),a  
1e10 3a 1a 1e			ld a, (.dmark+2)  
1e13 32 67 ee			ld (debug_mark+2),a  
1e16 18 03			jr .pastdmark  
1e18 ..			.dmark: db "LPP"  
1e1b f1			.pastdmark: pop af  
1e1c			endm  
# End of macro DMARK
1e1c cd e7 5a				call check_stacks 
1e1f					FORTH_CHK_LOOP_UNDER 
1e1f e5				push hl 
1e20 d5				push de 
1e21 2a ea e9			ld hl,(cli_loop_sp) 
1e24 11 24 e9			ld de, cli_loop_stack 
1e27 cd 13 0e			call cmp16 
1e2a da 04 5c			jp c, fault_loop_under 
1e2d d1				pop de 
1e2e e1				pop hl 
1e2f				endm 
# End of macro FORTH_CHK_LOOP_UNDER
1e2f				endif 
1e2f e5				push hl 
1e30 2a ea e9			ld hl,(cli_loop_sp) 
1e33 2b				dec hl 
1e34 2b				dec hl 
1e35 22 ea e9			ld (cli_loop_sp), hl 
1e38				; TODO do stack underflow checks 
1e38 e1				pop hl 
1e39				if DEBUG_FORTH_STACK_GUARD 
1e39 cd e7 5a				call check_stacks 
1e3c					FORTH_CHK_LOOP_UNDER 
1e3c e5				push hl 
1e3d d5				push de 
1e3e 2a ea e9			ld hl,(cli_loop_sp) 
1e41 11 24 e9			ld de, cli_loop_stack 
1e44 cd 13 0e			call cmp16 
1e47 da 04 5c			jp c, fault_loop_under 
1e4a d1				pop de 
1e4b e1				pop hl 
1e4c				endm 
# End of macro FORTH_CHK_LOOP_UNDER
1e4c				endif 
1e4c c9				ret 
1e4d			 
1e4d			macro_forth_dsp_pop: 
1e4d			 
1e4d e5				push hl 
1e4e			 
1e4e				; release malloc data 
1e4e			 
1e4e				if DEBUG_FORTH_STACK_GUARD 
1e4e cd e7 5a				call check_stacks 
1e51					FORTH_CHK_DSP_UNDER 
1e51 e5				push hl 
1e52 d5				push de 
1e53 2a e8 e9			ld hl,(cli_data_sp) 
1e56 11 22 e8			ld de, cli_data_stack 
1e59 cd 13 0e			call cmp16 
1e5c da f8 5b			jp c, fault_dsp_under 
1e5f d1				pop de 
1e60 e1				pop hl 
1e61				endm 
# End of macro FORTH_CHK_DSP_UNDER
1e61				endif 
1e61				;ld hl,(cli_data_sp) 
1e61			if DEBUG_FORTH_DOT 
1e61				DMARK "DPP" 
1e61 f5				push af  
1e62 3a 76 1e			ld a, (.dmark)  
1e65 32 65 ee			ld (debug_mark),a  
1e68 3a 77 1e			ld a, (.dmark+1)  
1e6b 32 66 ee			ld (debug_mark+1),a  
1e6e 3a 78 1e			ld a, (.dmark+2)  
1e71 32 67 ee			ld (debug_mark+2),a  
1e74 18 03			jr .pastdmark  
1e76 ..			.dmark: db "DPP"  
1e79 f1			.pastdmark: pop af  
1e7a			endm  
# End of macro DMARK
1e7a				CALLMONITOR 
1e7a cd 6f ee			call debug_vector  
1e7d				endm  
# End of macro CALLMONITOR
1e7d			endif	 
1e7d			 
1e7d			 
1e7d			if FORTH_ENABLE_DSPPOPFREE 
1e7d			 
1e7d				FORTH_DSP 
1e7d cd 5b 1d			call macro_forth_dsp 
1e80				endm 
# End of macro FORTH_DSP
1e80			 
1e80 7e				ld a, (hl) 
1e81 fe 01			cp DS_TYPE_STR 
1e83 20 23			jr nz, .skippopfree 
1e85			 
1e85				FORTH_DSP_VALUEHL 
1e85 cd 95 1d			call macro_dsp_valuehl 
1e88				endm 
# End of macro FORTH_DSP_VALUEHL
1e88 00				nop 
1e89			if DEBUG_FORTH_DOT 
1e89				DMARK "DPf" 
1e89 f5				push af  
1e8a 3a 9e 1e			ld a, (.dmark)  
1e8d 32 65 ee			ld (debug_mark),a  
1e90 3a 9f 1e			ld a, (.dmark+1)  
1e93 32 66 ee			ld (debug_mark+1),a  
1e96 3a a0 1e			ld a, (.dmark+2)  
1e99 32 67 ee			ld (debug_mark+2),a  
1e9c 18 03			jr .pastdmark  
1e9e ..			.dmark: db "DPf"  
1ea1 f1			.pastdmark: pop af  
1ea2			endm  
# End of macro DMARK
1ea2				CALLMONITOR 
1ea2 cd 6f ee			call debug_vector  
1ea5				endm  
# End of macro CALLMONITOR
1ea5			endif	 
1ea5 cd 9a 12			call free 
1ea8			.skippopfree: 
1ea8				 
1ea8			 
1ea8			endif 
1ea8			 
1ea8			if DEBUG_FORTH_DOT_KEY 
1ea8				DMARK "DP2" 
1ea8				CALLMONITOR 
1ea8			endif	 
1ea8			 
1ea8				; move pointer down 
1ea8			 
1ea8 2a e8 e9			ld hl,(cli_data_sp) 
1eab 2b				dec hl 
1eac 2b				dec hl 
1ead			; PARSEV5 
1ead 2b				dec hl 
1eae 22 e8 e9			ld (cli_data_sp), hl 
1eb1			 
1eb1				if DEBUG_FORTH_STACK_GUARD 
1eb1 cd e7 5a				call check_stacks 
1eb4					FORTH_CHK_DSP_UNDER 
1eb4 e5				push hl 
1eb5 d5				push de 
1eb6 2a e8 e9			ld hl,(cli_data_sp) 
1eb9 11 22 e8			ld de, cli_data_stack 
1ebc cd 13 0e			call cmp16 
1ebf da f8 5b			jp c, fault_dsp_under 
1ec2 d1				pop de 
1ec3 e1				pop hl 
1ec4				endm 
# End of macro FORTH_CHK_DSP_UNDER
1ec4				endif 
1ec4			 
1ec4 e1				pop hl 
1ec5			 
1ec5 c9				ret 
1ec6			 
1ec6			getwordathl: 
1ec6				; hl points to an address 
1ec6				; load hl with the word at that address 
1ec6			 
1ec6 d5				push de 
1ec7			 
1ec7 5e				ld e, (hl) 
1ec8 23				inc hl 
1ec9 56				ld d, (hl) 
1eca eb				ex de, hl 
1ecb			 
1ecb d1				pop de 
1ecc c9				ret 
1ecd			 
1ecd			 
1ecd			; functions to manuplite stack points 
1ecd			 
1ecd			; copy point in hl to stack tmp storage slots 1-4 
1ecd			hltostack1: 
1ecd 11 b8 e2			ld de, os_stack_1  
1ed0 c3 fb 1e			jp hltostackmv 
1ed3			 
1ed3			hltostack2:  
1ed3 11 b5 e2			ld de, os_stack_2 
1ed6 c3 fb 1e			jp hltostackmv 
1ed9			 
1ed9			hltostack3:  
1ed9 11 b2 e2			ld de, os_stack_3 
1edc c3 fb 1e			jp hltostackmv 
1edf			 
1edf			hltostack4:  
1edf 11 af e2			ld de, os_stack_4  
1ee2 c3 fb 1e			jp hltostackmv 
1ee5			 
1ee5			; copy to point in hl from stack tmp storage slots 1-4 
1ee5			hlfromstack1: 
1ee5 11 b8 e2			ld de, os_stack_1 
1ee8 c3 fa 1e			jp hlfromsttackmv 
1eeb			 
1eeb			hlfromstack2:  
1eeb 11 b5 e2			ld de, os_stack_2 
1eee c3 fa 1e			jp hlfromsttackmv 
1ef1			 
1ef1			hlfromstack3:  
1ef1 11 b2 e2			ld de, os_stack_3 
1ef4 c3 fa 1e			jp hlfromsttackmv 
1ef7			 
1ef7			hlfromstack4:  
1ef7 11 af e2			ld de, os_stack_4 
1efa			 
1efa			hlfromsttackmv: 
1efa eb				ex de, hl 
1efb			 
1efb			hltostackmv: 
1efb			 
1efb				; do stack move 
1efb c5				push bc 
1efc 01 03 00			ld bc, 3 
1eff ed b0			ldir  
1f01 c1				pop bc	 
1f02 c9				ret 
1f03			 
1f03			; eof 
1f03			 
# End of file forth_stackopsv5.asm
1f03			endif 
1f03			 
1f03			loadwordinhl:	 
1f03			 
1f03 d5				push de 
1f04			 
1f04 5e				ld e, (hl) 
1f05 23				inc hl 
1f06 56				ld d, (hl) 
1f07 eb				ex de,hl  
1f08			 
1f08 d1				pop de 
1f09			 
1f09 c9				ret 
1f0a			 
1f0a			user_word_eol:  
1f0a				; hl contains the pointer to where to create a linked list item from the end 
1f0a				; of the user dict to continue on at the system word dict 
1f0a				 
1f0a				; poke the stub of the word list linked list to repoint to rom words 
1f0a			 
1f0a				; stub format 
1f0a				; db   word id 
1f0a				; dw    link to next word 
1f0a			        ; db char length of token 
1f0a				; db string + 0 term 
1f0a				; db exec code....  
1f0a			 
1f0a 3e 00			ld a, WORD_SYS_ROOT     ; root word 
1f0c 77				ld (hl), a		; word id 
1f0d 23				inc hl 
1f0e			 
1f0e 11 d9 20			ld de, sysdict 
1f11 73				ld (hl), e		; next word link ie system dict 
1f12 23				inc hl 
1f13 72				ld (hl), d		; next word link ie system dict 
1f14 23				inc hl	 
1f15			 
1f15			;	ld (hl), sysdict		; next word link ie system dict 
1f15			;	inc hl 
1f15			;	inc hl 
1f15			 
1f15			;	inc hl 
1f15			;	inc hl 
1f15			 
1f15 3e 02			ld a, 2			; word length is 0 
1f17 77				ld (hl), a	 
1f18 23				inc hl 
1f19			 
1f19 3e 7e			ld a, '~'			; word length is 0 
1f1b 77				ld (hl), a	 
1f1c 23				inc hl 
1f1d 3e 00			ld a, 0			; save empty word 
1f1f 77				ld (hl), a 
1f20			 
1f20 c9				ret 
1f21			 
1f21				 
1f21			 
1f21			forthexec_cleanup: 
1f21				FORTH_RSP_POP 
1f21 cd 58 1b			call macro_forth_rsp_pop 
1f24				endm 
# End of macro FORTH_RSP_POP
1f24 c9				ret 
1f25			 
1f25			forth_call_hl: 
1f25				; taking hl 
1f25 e5				push hl 
1f26 c9				ret 
1f27			 
1f27			; this is called to reset Forth system but keep existing uwords etc 
1f27			 
1f27			forth_warmstart: 
1f27				; setup stack over/under flow checks 
1f27				if DEBUG_FORTH_STACK_GUARD 
1f27 cd cd 5a				call chk_stk_init 
1f2a				endif 
1f2a			 
1f2a				; init stack pointers  - * these stacks go upwards *  
1f2a 21 a6 e9			ld hl, cli_ret_stack 
1f2d 22 ec e9			ld (cli_ret_sp), hl	 
1f30				; set bottom of stack 
1f30 3e 00			ld a,0 
1f32 77				ld (hl),a 
1f33 23				inc hl 
1f34 77				ld (hl),a 
1f35			 
1f35 21 22 e8			ld hl, cli_data_stack 
1f38 22 e8 e9			ld (cli_data_sp), hl	 
1f3b				; set bottom of stack 
1f3b 3e 00			ld a,0 
1f3d 77				ld (hl),a 
1f3e 23				inc hl 
1f3f 77				ld (hl),a 
1f40			 
1f40 21 24 e9			ld hl, cli_loop_stack 
1f43 22 ea e9			ld (cli_loop_sp), hl	 
1f46				; set bottom of stack 
1f46 3e 00			ld a,0 
1f48 77				ld (hl),a 
1f49 23				inc hl 
1f4a 77				ld (hl),a 
1f4b			 
1f4b				; init extent of current open file 
1f4b			 
1f4b 3e 00			ld a, 0 
1f4d 32 64 ea			ld (store_openext), a 
1f50			 
1f50 c9				ret 
1f51			 
1f51			 
1f51			 
1f51			; Cold Start - this is called to setup the whole Forth system 
1f51			 
1f51			forth_init: 
1f51			 
1f51				; setup stack over/under flow checks 
1f51			 
1f51			;	if DEBUG_FORTH_STACK_GUARD 
1f51			;		call chk_stk_init 
1f51			;	endif 
1f51			 
1f51				; enable auto display updates (slow.....) 
1f51			 
1f51 3e 01			ld a, 1 
1f53 32 36 ea			ld (cli_autodisplay), a 
1f56			 
1f56				; if storage is in use disable long reads for now 
1f56 3e 00			ld a, 0 
1f58 32 6f ea			ld (store_longread), a 
1f5b			 
1f5b			 
1f5b				; show start up screen 
1f5b			 
1f5b cd c8 0b			call clear_display 
1f5e			 
1f5e 3e 00			ld a,0 
1f60 32 58 ea			ld (f_cursor_ptr), a 
1f63			 
1f63				; set start of word list in start of ram - for use when creating user words 
1f63			 
1f63 21 e2 5e			ld hl, baseram 
1f66 22 b8 e5			ld (os_last_new_uword), hl 
1f69 cd 0a 1f			call user_word_eol 
1f6c				 
1f6c			;		call display_data_sp 
1f6c			;		call next_page_prompt 
1f6c			 
1f6c			 
1f6c			 
1f6c			 
1f6c c9				ret 
1f6d			 
1f6d .. 00		.bootforth: db " Forth Kernel Init ",0 
1f81			 
1f81			; TODO push to stack 
1f81			 
1f81			;  
1f81			 
1f81			if FORTH_PARSEV2 
1f81			 
1f81			 
1f81				include "forth_parserv2.asm" 
1f81			 
1f81			endif 
1f81			 
1f81			 
1f81			; parse cli version 1 
1f81			 
1f81			if FORTH_PARSEV1 
1f81			 
1f81			 
1f81			 
1f81			      include "forth_parserv1.asm" 
1f81			endif 
1f81				 
1f81			if FORTH_PARSEV3 
1f81			 
1f81			 
1f81			 
1f81			      include "forth_parserv3.asm" 
1f81				include "forth_wordsv3.asm" 
1f81			endif 
1f81			 
1f81			if FORTH_PARSEV4 
1f81			 
1f81			 
1f81			 
1f81			      include "forth_parserv4.asm" 
1f81				include "forth_wordsv4.asm" 
1f81			endif 
1f81			 
1f81			if FORTH_PARSEV5 
1f81			 
1f81			 
1f81			 
1f81			      include "forth_parserv5.asm" 
1f81			 
1f81			 
1f81			; A better parser without using malloc and string copies all over the place.  
1f81			; Exec in situ should be faster 
1f81			 
1f81			;WORD_SYS_LOWPRIM: equ 4    ; Offset for low level prim words opcode 
1f81			;WORD_SYS_BRANCH: equ 10    ; Offset for branching and loop words opcode 
1f81			WORD_SYS_UWORD: equ 1   ; Opcode for all user words 
1f81			WORD_SYS_DELETED: equ 3 ; Op code for a deleted UWORD 
1f81			WORD_SYS_ROOT: equ 0   ; Opcode for all user words 
1f81			WORD_SYS_END: equ 0   ; Opcode for all user words 
1f81			WORD_SYS_CORE: equ 20    ; Offset for dict core words opcode 
1f81			WORD_FLAG_CODE: equ 0	   ; opcodeflag to exec pure code for this word 
1f81			WORD_FLAG_JP: equ 1	   ; opcodeflag to list zero term jump table words 
1f81			 
1f81			; Core word preamble macro 
1f81			 
1f81			CWHEAD:   macro nxtword opcode lit len opflags 
1f81				db WORD_SYS_CORE+opcode             
1f81				; internal op code number 
1f81				dw nxtword            
1f81				; link to next dict word block 
1f81				db len + 1 
1f81				; literal length of dict word inc zero term 
1f81				db lit,0              
1f81				; literal dict word 
1f81			        ; TODO db opflags        
1f81				endm 
1f81			 
1f81			 
1f81			NEXTW: macro  
1f81				jp macro_next 
1f81				endm 
1f81			 
1f81			macro_next: 
1f81			if DEBUG_FORTH_PARSE_KEY 
1f81				DMARK "NXT" 
1f81				CALLMONITOR 
1f81			endif	 
1f81			;	inc hl  ; skip token null term  
1f81 ed 4b 3a ea		ld bc,(cli_ptr)   ; move to next token to parse in the input stream 
1f85 ed 5b 38 ea		ld de,(cli_origptr)   ; move to next token to parse in the input stream 
1f89 2a bc e5			ld hl,(os_tok_ptr)   ; move to next token to parse in the input stream 
1f8c			if DEBUG_FORTH_PARSE_KEY 
1f8c				DMARK "}AA" 
1f8c				CALLMONITOR 
1f8c			endif	 
1f8c c3 8f 20			jp execnext 
1f8f				;jp exec1 
1f8f			       
1f8f			 
1f8f			 
1f8f			; Another go at the parser to compile  
1f8f			 
1f8f			 
1f8f			; TODO rework parser to change all of the string words to byte tokens 
1f8f			; TODO do a search for  
1f8f			 
1f8f			; TODO first run normal parser to zero term sections 
1f8f			; TODO for each word do a token look up to get the op code 
1f8f			; TODO need some means to flag to the exec that this is a byte code form    
1f8f			 
1f8f			 
1f8f			forthcompile: 
1f8f			 
1f8f			; 
1f8f			; line parse: 
1f8f			;       parse raw input buffer 
1f8f			;       tokenise the words 
1f8f			;       malloc new copy (for looping etc) 
1f8f			;       copy to malloc + current pc in line to start of string and add line term 
1f8f			;       save on new rsp 
1f8f			; 
1f8f			 
1f8f			; hl to point to the line to tokenise 
1f8f			 
1f8f			;	push hl 
1f8f 22 bc e5			ld (os_tok_ptr), hl  ; save ptr to string 
1f92			 
1f92			;	ld a,0		; string term on input 
1f92			;	call strlent 
1f92			 
1f92			;	ld (os_tok_len), hl	 ; save string length 
1f92			 
1f92			;if DEBUG_FORTH_TOK 
1f92			;	ex de,hl		 
1f92			;endif 
1f92			 
1f92			;	pop hl 		; get back string pointer 
1f92			 
1f92			if DEBUG_FORTH_TOK 
1f92						DMARK "TOc" 
1f92				CALLMONITOR 
1f92			endif 
1f92 7e			.cptoken2:    ld a,(hl) 
1f93 23				inc hl 
1f94 fe 7f			cp FORTH_END_BUFFER 
1f96 28 29			jr z, .cptokendone2 
1f98 fe 00			cp 0 
1f9a 28 25			jr z, .cptokendone2 
1f9c fe 22			cp '"' 
1f9e 28 0b			jr z, .cptokenstr2     ; will want to skip until end of string delim 
1fa0 fe 20			cp ' ' 
1fa2 20 ee			jr nz,  .cptoken2 
1fa4			 
1fa4			; TODO consume comments held between ( and ) 
1fa4			 
1fa4				; we have a space so change to zero term for dict match later 
1fa4 2b				dec hl 
1fa5 3e 00			ld a,0 
1fa7 77				ld (hl), a 
1fa8 23				inc hl 
1fa9 18 e7			jr .cptoken2 
1fab				 
1fab			 
1fab			.cptokenstr2: 
1fab				; skip all white space until either eol (because forgot to term) or end double quote 
1fab			        ;   if double quotes spotted ensure to skip any space sep until matched doble quote 
1fab				;inc hl ; skip current double quote 
1fab 7e				ld a,(hl) 
1fac 23				inc hl 
1fad fe 22			cp '"' 
1faf 28 e1			jr z, .cptoken2 
1fb1 fe 7f			cp FORTH_END_BUFFER 
1fb3 28 0c			jr z, .cptokendone2 
1fb5 fe 00			cp 0 
1fb7 28 08			jr z, .cptokendone2 
1fb9 fe 20			cp ' ' 
1fbb 28 02			jr z, .cptmp2 
1fbd 18 ec			jr .cptokenstr2 
1fbf			 
1fbf			.cptmp2:	; we have a space so change to zero term for dict match later 
1fbf				;dec hl 
1fbf				;ld a,"-"	; TODO remove this when working 
1fbf				;ld (hl), a 
1fbf				;inc hl 
1fbf 18 ea			jr .cptokenstr2 
1fc1			 
1fc1			.cptokendone2: 
1fc1				;inc hl 
1fc1 3e 7f			ld a, FORTH_END_BUFFER 
1fc3 77				ld (hl),a 
1fc4 23				inc hl 
1fc5 3e 21			ld a, '!' 
1fc7 77				ld (hl),a 
1fc8			 
1fc8 2a bc e5			ld hl,(os_tok_ptr) 
1fcb			         
1fcb			if DEBUG_FORTH_TOK 
1fcb						DMARK "Tc1" 
1fcb				CALLMONITOR 
1fcb			endif 
1fcb			 
1fcb				; push exec string to top of return stack 
1fcb				FORTH_RSP_NEXT 
1fcb cd 37 1b			call macro_forth_rsp_next 
1fce				endm 
# End of macro FORTH_RSP_NEXT
1fce c9				ret 
1fcf			 
1fcf			; Another go at the parser need to simplify the process 
1fcf			 
1fcf			forthparse: 
1fcf			 
1fcf			; 
1fcf			; line parse: 
1fcf			;       parse raw input buffer 
1fcf			;       tokenise the words 
1fcf			;       malloc new copy (for looping etc) 
1fcf			;       copy to malloc + current pc in line to start of string and add line term 
1fcf			;       save on new rsp 
1fcf			; 
1fcf			 
1fcf			; hl to point to the line to tokenise 
1fcf			 
1fcf			;	push hl 
1fcf 22 bc e5			ld (os_tok_ptr), hl  ; save ptr to string 
1fd2			 
1fd2			;	ld a,0		; string term on input 
1fd2			;	call strlent 
1fd2			 
1fd2			;	ld (os_tok_len), hl	 ; save string length 
1fd2			 
1fd2			;if DEBUG_FORTH_TOK 
1fd2			;	ex de,hl		 
1fd2			;endif 
1fd2			 
1fd2			;	pop hl 		; get back string pointer 
1fd2			 
1fd2			if DEBUG_FORTH_TOK 
1fd2						DMARK "TOK" 
1fd2				CALLMONITOR 
1fd2			endif 
1fd2 7e			.ptoken2:    ld a,(hl) 
1fd3 23				inc hl 
1fd4 fe 7f			cp FORTH_END_BUFFER 
1fd6 28 29			jr z, .ptokendone2 
1fd8 fe 00			cp 0 
1fda 28 25			jr z, .ptokendone2 
1fdc fe 22			cp '"' 
1fde 28 0b			jr z, .ptokenstr2     ; will want to skip until end of string delim 
1fe0 fe 20			cp ' ' 
1fe2 20 ee			jr nz,  .ptoken2 
1fe4			 
1fe4			; TODO consume comments held between ( and ) 
1fe4			 
1fe4				; we have a space so change to zero term for dict match later 
1fe4 2b				dec hl 
1fe5 3e 00			ld a,0 
1fe7 77				ld (hl), a 
1fe8 23				inc hl 
1fe9 18 e7			jr .ptoken2 
1feb				 
1feb			 
1feb			.ptokenstr2: 
1feb				; skip all white space until either eol (because forgot to term) or end double quote 
1feb			        ;   if double quotes spotted ensure to skip any space sep until matched doble quote 
1feb				;inc hl ; skip current double quote 
1feb 7e				ld a,(hl) 
1fec 23				inc hl 
1fed fe 22			cp '"' 
1fef 28 e1			jr z, .ptoken2 
1ff1 fe 7f			cp FORTH_END_BUFFER 
1ff3 28 0c			jr z, .ptokendone2 
1ff5 fe 00			cp 0 
1ff7 28 08			jr z, .ptokendone2 
1ff9 fe 20			cp ' ' 
1ffb 28 02			jr z, .ptmp2 
1ffd 18 ec			jr .ptokenstr2 
1fff			 
1fff			.ptmp2:	; we have a space so change to zero term for dict match later 
1fff				;dec hl 
1fff				;ld a,"-"	; TODO remove this when working 
1fff				;ld (hl), a 
1fff				;inc hl 
1fff 18 ea			jr .ptokenstr2 
2001			 
2001			.ptokendone2: 
2001				;inc hl 
2001 3e 7f			ld a, FORTH_END_BUFFER 
2003 77				ld (hl),a 
2004 23				inc hl 
2005 3e 21			ld a, '!' 
2007 77				ld (hl),a 
2008			 
2008 2a bc e5			ld hl,(os_tok_ptr) 
200b			         
200b			if DEBUG_FORTH_TOK 
200b						DMARK "TK1" 
200b				CALLMONITOR 
200b			endif 
200b			 
200b				; push exec string to top of return stack 
200b				FORTH_RSP_NEXT 
200b cd 37 1b			call macro_forth_rsp_next 
200e				endm 
# End of macro FORTH_RSP_NEXT
200e c9				ret 
200f			 
200f			; 
200f			;	; malloc size + buffer pointer + if is loop flag 
200f			;	ld hl,(os_tok_len) 		 ; get string length 
200f			; 
200f			;	ld a,l 
200f			; 
200f			;	cp 0			; we dont want to use a null string 
200f			;	ret z 
200f			; 
200f			;;	add 3    ; prefix malloc with buffer for current word ptr 
200f			; 
200f			;	add 5     ; TODO when certain not over writing memory remove 
200f			; 
200f			;		 
200f			; 
200f			;if DEBUG_FORTH_TOK 
200f			;			DMARK "TKE" 
200f			;	CALLMONITOR 
200f			;endif 
200f			; 
200f			;	ld l,a 
200f			;	ld h,0 
200f			;;	push hl   ; save required space for the copy later 
200f			;	call malloc 
200f			;if DEBUG_FORTH_TOK 
200f			;			DMARK "TKM" 
200f			;	CALLMONITOR 
200f			;endif 
200f			;	if DEBUG_FORTH_MALLOC_GUARD 
200f			;		push af 
200f			;		call ishlzero 
200f			;;		ld a, l 
200f			;;		add h 
200f			;;		cp 0 
200f			;		pop af 
200f			;		 
200f			;		call z,malloc_error 
200f			;	endif 
200f			;	ld (os_tok_malloc), hl	 ; save malloc ptr 
200f			; 
200f			; 
200f			;if DEBUG_FORTH_TOK 
200f			;			DMARK "TKR" 
200f			;	CALLMONITOR 
200f			;endif 
200f			; 
200f			;	FORTH_RSP_NEXT 
200f			; 
200f			;	;inc hl	 ; go past current buffer pointer 
200f			;	;inc hl 
200f			;	;inc hl   ; and past if loop flag 
200f			;		; TODO Need to set flag  
200f			; 
200f			;	 
200f			;	 
200f			;	ex de,hl	; malloc is dest 
200f			;	ld hl, (os_tok_len) 
200f			;;	pop bc 
200f			;	ld c, l                
200f			;	ld b,0 
200f			;	ld hl, (os_tok_ptr) 
200f			; 
200f			;if DEBUG_FORTH_TOK 
200f			;			DMARK "TKT" 
200f			;	CALLMONITOR 
200f			;endif 
200f			; 
200f			;	; do str cpy 
200f			; 
200f			;	ldir      ; copy byte in hl to de 
200f			; 
200f			;	; set end of buffer to high bit on zero term and use that for end of buffer scan 
200f			; 
200f			;if DEBUG_FORTH_TOK 
200f			; 
200f			;			DMARK "TKY" 
200f			;	CALLMONITOR 
200f			;endif 
200f			;	;ld a,0 
200f			;	;ld a,FORTH_END_BUFFER 
200f			;	ex de, hl 
200f			;	;dec hl			 ; go back over the space delim at the end of word 
200f			;	;ld (hl),a 
200f			;	;inc hl                    ;  TODO double check this. Going past the end of string to make sure end of processing buffer is marked 
200f			;	ld a,FORTH_END_BUFFER 
200f			;	ld (hl),a 
200f			;	inc hl 
200f			;	ld a,FORTH_END_BUFFER 
200f			;	ld (hl),a 
200f			; 
200f			;	; init the malloc area data 
200f			;	; set pc for in current area 
200f			;	;ld hl, (os_tok_malloc) 
200f			;	;inc hl 
200f			;	;inc hl 
200f			;	;inc hl 
200f			;	;ex de,hl 
200f			;	;ld hl, (os_tok_malloc) 
200f			;	;ld (hl),e 
200f			;	;inc hl 
200f			;	;ld (hl),d 
200f			; 
200f			; 
200f			;	ld hl,(os_tok_malloc) 
200f			;if DEBUG_FORTH_PARSE_KEY 
200f			;			DMARK "TKU" 
200f			;	CALLMONITOR 
200f			;endif 
200f			; 
200f			;	ret 
200f			 
200f			forthexec: 
200f			 
200f			; line exec: 
200f			; forth parser 
200f			 
200f			; 
200f			;       get current exec line on rsp 
200f			 
200f				FORTH_RSP_TOS 
200f cd 4e 1b			call macro_forth_rsp_tos 
2012				endm 
# End of macro FORTH_RSP_TOS
2012			 
2012			;       restore current pc - hl points to malloc of data 
2012			 
2012				;ld e, (hl) 
2012				;inc hl 
2012				;ld d, (hl) 
2012				;ex de,hl 
2012			 
2012			 
2012			exec1: 
2012 22 bc e5			ld (os_tok_ptr), hl 
2015			 
2015				; copy our PC to working vars  
2015 22 3a ea			ld (cli_ptr), hl 
2018 22 38 ea			ld (cli_origptr), hl 
201b			 
201b 7e				ld a,(hl) 
201c fe 7f			cp FORTH_END_BUFFER 
201e c8				ret z 
201f			 
201f				; skip any nulls 
201f			 
201f fe 00			cp 0 
2021 20 03			jr nz, .execword 
2023 23				inc hl 
2024 18 ec			jr exec1 
2026			 
2026			 
2026			.execword: 
2026			 
2026			 
2026			 
2026			if DEBUG_FORTH_PARSE_KEY 
2026						DMARK "KYQ" 
2026				CALLMONITOR 
2026			endif 
2026			;       while at start of word: 
2026			; get start of dict (in user area first) 
2026			 
2026 21 e2 5e		ld hl, baseram 
2029			;ld hl, sysdict 
2029 22 3c ea		ld (cli_nextword),hl 
202c			;           match word at pc 
202c			;           exec word 
202c			;           or push to dsp 
202c			;           forward to next token 
202c			;           if line term pop rsp and exit 
202c			;        
202c			 
202c			if DEBUG_FORTH_PARSE_KEY 
202c						DMARK "KYq" 
202c				CALLMONITOR 
202c			endif 
202c			 
202c			; 
202c			; word comp 
202c			;    get compiled byte and save it (need to decide if code is compiled or not for comparison) 
202c			;    if byte is 0 then end parsing and report failed lookup (or could be something to add to stack etc) 
202c			;    move to start of word  
202c			;    compare word to cli_token 
202c			 
202c			.execpnword:	; HL at start of a word in the dictionary to check 
202c			;	ld hl,(cli_origptr)	 ; reset start of word to look up 
202c			;	ld (cli_ptr), hl 
202c			 
202c 2a 3c ea			ld hl,(cli_nextword) 
202f			 
202f cd d2 20			call forth_tok_next 
2032			; tok next start here 
2032			;	; TODO skip compiled symbol for now 
2032			;	inc hl 
2032			; 
2032			;	; save pointer to next word 
2032			; 
2032			;	; hl now points to the address of the next word pointer  
2032			;	ld e, (hl) 
2032			;	inc hl 
2032			;	ld d, (hl) 
2032			;	inc l 
2032			; 
2032			;	ex de,hl 
2032			;if DEBUG_FORTH_PARSE_NEXTWORD 
2032			;	push bc 
2032			;	ld bc, (cli_nextword) 
2032			;			DMARK "NXW" 
2032			;	CALLMONITOR 
2032			;	pop bc 
2032			;endif 
2032			; tok next end here 
2032 22 3c ea			ld (cli_nextword), hl     ; save for next check if no match on this word 
2035 eb				ex de, hl 
2036			 
2036			 
2036				; save the pointer of the current token - 1 to check against 
2036				 
2036 22 40 ea			ld (cli_token), hl   
2039				; TODO maybe remove below save if no debug 
2039				; save token string ptr for any debug later 
2039 23				inc hl  
203a 22 42 ea			ld (cli_origtoken), hl 
203d 2b				dec hl 
203e				; save pointer to the start of the next dictionay word 
203e 7e				ld a,(hl)   ; get string length 
203f 47				ld b,a 
2040			.execpnwordinc:  
2040 23				inc hl 
2041 10 fd			djnz .execpnwordinc 
2043 22 3e ea			ld (cli_execword), hl      ; save start of this words code 
2046			 
2046				; now check the word token against the string being parsed 
2046			 
2046 2a 40 ea			ld hl,(cli_token) 
2049 23				inc hl     ; skip string length (use zero term instead to end) 
204a 22 40 ea			ld (cli_token), hl 
204d			 
204d			if DEBUG_FORTH_PARSE_KEY 
204d						DMARK "KY2" 
204d			endif 
204d			if DEBUG_FORTH_PARSE_EXEC 
204d				; see if disabled 
204d			 
204d			;	ld a, (os_view_disable) 
204d			;	cp '*' 
204d				ld a, (debug_vector) 
204d				cp $c9   ; RET  
204d				jr z, .skip 
204d			 
204d				push hl 
204d				push hl 
204d				call clear_display 
204d				ld de, .compword 
204d				ld a, display_row_1 
204d				call str_at_display 
204d				pop de 
204d				ld a, display_row_2 
204d				call str_at_display 
204d				ld hl,(cli_ptr) 
204d				ld a,(hl) 
204d			        ld hl, os_word_scratch 
204d				ld (hl),a 
204d				ld a,0 
204d				inc hl 
204d				ld (hl),a 	 
204d				ld de, os_word_scratch 
204d				ld a, display_row_2+10 
204d				call str_at_display 
204d				call update_display 
204d				ld a, 100 
204d				call aDelayInMS 
204d				if DEBUG_FORTH_PARSE_EXEC_SLOW 
204d				call delay250ms 
204d				endif 
204d				pop hl 
204d			.skip:  
204d			endif	 
204d			.execpnchar:    ; compare char between token and string to parse 
204d			 
204d			if DEBUG_FORTH_PARSE_KEY 
204d						DMARK "Ky3" 
204d			endif 
204d			if DEBUG_FORTH_PARSE_EXEC 
204d				; see if disabled 
204d			 
204d			;	ld a, (os_view_disable) 
204d			;	cp '*' 
204d				ld a, (debug_vector) 
204d				cp $C9  ; RET 
204d				jr z, .skip2 
204d			 
204d			;	call clear_display 
204d			ld hl,(cli_token) 
204d			ld a,(hl) 
204d			ld (os_word_scratch),a 
204d				ld hl,(cli_ptr) 
204d			ld a,(hl) 
204d				ld (os_word_scratch+1),a 
204d				ld a,0 
204d				ld (os_word_scratch+2),a 
204d				ld de,os_word_scratch 
204d				ld a,display_row_4 
204d				call str_at_display 
204d				call update_display 
204d			.skip2:  
204d			endif 
204d 2a 40 ea			ld hl,(cli_token) 
2050 7e				ld a, (hl)	 ; char in word token 
2051 23				inc hl 		; move to next char 
2052 22 40 ea			ld (cli_token), hl ; and save it 
2055 47				ld b,a 
2056			 
2056 2a 3a ea			ld hl,(cli_ptr) ;	get the char from the string to parse 
2059 7e				ld a,(hl) 
205a 23				inc hl 
205b 22 3a ea			ld (cli_ptr), hl		; move to next char 
205e cd 52 11			call toUpper 		; make sure the input string matches case 
2061			 
2061			if DEBUG_FORTH_PARSE 
2061			endif 
2061			 
2061				; input stream end of token is a space so get rid of it 
2061			 
2061			;	cp ' ' 
2061			;	jr nz, .pnskipspace 
2061			; 
2061			;	ld a, 0		; make same term as word token term 
2061			; 
2061			;.pnskipspace: 
2061			 
2061			if DEBUG_FORTH_PARSE_KEY 
2061						DMARK "KY7" 
2061			endif 
2061 b8				cp b 
2062 c2 78 20			jp nz, .execpnskipword	 ; no match so move to next word 
2065				 
2065			;    if same 
2065			;       scan for string terms 0 for token and 32 for input 
2065			 
2065				 
2065			if DEBUG_FORTH_PARSE_KEY 
2065						DMARK "KY8" 
2065			endif 
2065			 
2065 80				add b			 
2066 fe 00			cp 0			 ; add both chars together, if 32 then other must be 0 so at end of string we are parsing? 
2068							; TODO need to make sure last word in zero term string is accounted for 
2068 20 e3			jr nz, .execpnchar 		 ; not at end of strings yet 
206a			 
206a			 
206a				; at end of both strings so both are exact match 
206a			 
206a			;       skip ptr for next word 
206a			 
206a 2a 3a ea			ld hl,(cli_ptr) 	; at input string term 
206d 23				inc hl			 ; at next char 
206e 22 3a ea			ld (cli_ptr), hl     ; save for next round of the parser 
2071 22 38 ea			ld (cli_origptr), hl     ; save for any restart of current string ie a number or string to push to data stack 
2074				 
2074				 
2074			if DEBUG_FORTH_PARSE_KEY 
2074						DMARK "KY3" 
2074			endif 
2074			 
2074			 
2074			 
2074			;       exec code block 
2074			if DEBUG_FORTH_JP 
2074				call clear_display 
2074				call update_display 
2074				call delay1s 
2074				ld hl, (cli_execword)     ; save for next check if no match on this word 
2074				ld a,h 
2074				ld hl, os_word_scratch 
2074				call hexout 
2074				ld hl, (cli_execword)     ; save for next check if no match on this word 
2074				ld a,l 
2074				ld hl, os_word_scratch+2 
2074				call hexout 
2074				ld hl, os_word_scratch+4 
2074				ld a,0 
2074				ld (hl),a 
2074				ld de,os_word_scratch 
2074				call str_at_display 
2074					ld a, display_row_2 
2074					call str_at_display 
2074				ld de, (cli_origtoken) 
2074				ld a, display_row_1+10 
2074					call str_at_display 
2074			 
2074				ld a,display_row_1 
2074				ld de, .foundword 
2074				ld a, display_row_3 
2074				call str_at_display 
2074				call update_display 
2074				call delay1s 
2074				call delay1s 
2074				call delay1s 
2074			endif 
2074			 
2074			if DEBUG_FORTH_PARSE_KEY 
2074						DMARK "KYj" 
2074			endif 
2074				; TODO save the word pointer in this exec 
2074			 
2074 2a 3e ea			ld hl,(cli_execword) 
2077 e9				jp (hl) 
2078			 
2078			 
2078			;    if not same 
2078			;	scan for zero term 
2078			;	get ptr for next word 
2078			;	goto word comp 
2078			 
2078			.execpnskipword:	; get pointer to next word 
2078 2a 3c ea			ld hl,(cli_nextword) 
207b			 
207b 7e				ld a,(hl) 
207c fe 00			cp WORD_SYS_END 
207e			;	cp 0 
207e 28 09			jr z, .execendofdict			 ; at end of words 
2080			 
2080			if DEBUG_FORTH_PARSE_KEY 
2080						DMARK "KY4" 
2080			endif 
2080			if DEBUG_FORTH_PARSE_EXEC 
2080			 
2080				; see if disabled 
2080			 
2080			;	ld a, (os_view_disable) 
2080			;	cp '*' 
2080				ld a,(debug_vector) 
2080				cp $c9   ; RET 
2080				jr z, .noskip 
2080			 
2080			 
2080				ld de, .nowordfound 
2080				ld a, display_row_3 
2080				call str_at_display 
2080				call update_display 
2080				ld a, 100 
2080				call aDelayInMS 
2080				 
2080				if DEBUG_FORTH_PARSE_EXEC_SLOW 
2080					call delay250ms 
2080				endif 
2080			.noskip:  
2080			 
2080			endif	 
2080			 
2080 2a 38 ea			ld hl,(cli_origptr) 
2083 22 3a ea			ld (cli_ptr),hl 
2086			 
2086			if DEBUG_FORTH_PARSE_KEY 
2086						DMARK "KY5" 
2086			endif 
2086 c3 2c 20			jp .execpnword			; else go to next word 
2089			 
2089			.execendofdict:  
2089			 
2089			if DEBUG_FORTH_PARSE_KEY 
2089						DMARK "KYe" 
2089			endif 
2089			if DEBUG_FORTH_PARSE_EXEC 
2089				; see if disabled 
2089			 
2089			;	ld a, (os_view_disable) 
2089			;	cp '*' 
2089				ld a,(debug_vector) 
2089				cp $c9   ; ret 
2089				jr z, .ispskip 
2089			 
2089				call clear_display 
2089				call update_display 
2089				call delay1s 
2089				ld de, (cli_origptr) 
2089				ld a, display_row_1 
2089				call str_at_display 
2089				 
2089				ld de, .enddict 
2089				ld a, display_row_3 
2089				call str_at_display 
2089				call update_display 
2089				ld a, 100 
2089				call aDelayInMS 
2089				if DEBUG_FORTH_PARSE_EXEC_SLOW 
2089				call delay1s 
2089				call delay1s 
2089				call delay1s 
2089				endif 
2089			.ispskip:  
2089				 
2089			endif	 
2089			 
2089			 
2089			 
2089				; if the word is not a keyword then must be a literal so push it to stack 
2089			 
2089			; push token to stack to end of word 
2089			 
2089				STACKFRAME ON $1efe $2f9f 
2089				if DEBUG_STACK_IMB 
2089					if ON 
2089						exx 
2089						ld de, $1efe 
2089						ld a, d 
2089						ld hl, curframe 
2089						call hexout 
2089						ld a, e 
2089						ld hl, curframe+2 
2089						call hexout 
2089						ld hl, $1efe 
2089						push hl 
2089						ld hl, $2f9f 
2089						push hl 
2089						exx 
2089					endif 
2089				endif 
2089			endm 
# End of macro STACKFRAME
2089			 
2089 2a bc e5		ld hl,(os_tok_ptr) 
208c cd f9 1c		call forth_apush 
208f			 
208f				STACKFRAMECHK ON $1efe $2f9f 
208f				if DEBUG_STACK_IMB 
208f					if ON 
208f						exx 
208f						ld hl, $2f9f 
208f						pop de   ; $2f9f 
208f						call cmp16 
208f						jr nz, .spnosame 
208f						ld hl, $1efe 
208f						pop de   ; $1efe 
208f						call cmp16 
208f						jr z, .spfrsame 
208f						.spnosame: call showsperror 
208f						.spfrsame: nop 
208f						exx 
208f					endif 
208f				endif 
208f			endm 
# End of macro STACKFRAMECHK
208f			 
208f			execnext: 
208f			 
208f			if DEBUG_FORTH_PARSE_KEY 
208f						DMARK "KY>" 
208f			endif 
208f			; move past token to next word 
208f			 
208f 2a bc e5		ld hl, (os_tok_ptr) 
2092 3e 00		ld a, 0 
2094 01 ff 00		ld bc, 255     ; input buffer size 
2097 ed b1		cpir 
2099			 
2099			if DEBUG_FORTH_PARSE_KEY 
2099						DMARK "KY!" 
2099				CALLMONITOR 
2099			endif	 
2099			; TODO this might place hl on the null, so will need to forward on??? 
2099			;inc hl   ; see if this gets onto the next item 
2099			 
2099			 
2099			; TODO pass a pointer to the buffer to push 
2099			; TODO call function to push 
2099			 
2099			; look for end of input 
2099			 
2099			;inc hl 
2099			;ld a,(hl) 
2099			;cp FORTH_END_BUFFER 
2099			;ret z 
2099			 
2099			 
2099 c3 12 20		jp exec1 
209c			 
209c			 
209c			 
209c			 
209c			 
209c			 
209c			 
209c			 
209c			 
209c			findnexttok: 
209c			 
209c				; hl is pointer to move 
209c				; de is the token to locate 
209c			 
209c					if DEBUG_FORTH 
209c						DMARK "NTK" 
209c						CALLMONITOR 
209c					endif 
209c d5				push de 
209d			 
209d			.fnt1:	 
209d				; find first char of token to locate 
209d			 
209d 1a				ld a, (de) 
209e 4f				ld c,a 
209f 7e				ld a,(hl) 
20a0 cd 52 11			call toUpper 
20a3					if DEBUG_FORTH 
20a3						DMARK "NT1" 
20a3						CALLMONITOR 
20a3					endif 
20a3 b9				cp c 
20a4			 
20a4 28 03			jr z, .fnt2cmpmorefirst	 
20a6			 
20a6				; first char not found move to next char 
20a6			 
20a6 23				inc hl 
20a7 18 f4			jr .fnt1 
20a9			 
20a9			.fnt2cmpmorefirst:	 
20a9				; first char of token found.  
20a9			 
20a9 e5				push hl     ; save start of token just in case it is the right one 
20aa d9				exx 
20ab e1				pop hl        ; save it to hl' 
20ac d9				exx 
20ad			 
20ad			 
20ad			.fnt2cmpmore:	 
20ad				; compare the rest 
20ad				 
20ad 23				inc hl 
20ae 13				inc de 
20af				 
20af 1a				ld a, (de) 
20b0 4f				ld c,a 
20b1 7e				ld a,(hl) 
20b2 cd 52 11			call toUpper 
20b5			 
20b5					if DEBUG_FORTH 
20b5						DMARK "NT2" 
20b5						CALLMONITOR 
20b5					endif 
20b5				; c has the token to find char 
20b5				; a has the mem to scan char 
20b5			 
20b5 b9				cp c 
20b6 28 04			jr z,.fntmatch1 
20b8			 
20b8				; they are not the same 
20b8			 
20b8					if DEBUG_FORTH 
20b8						DMARK "NT3" 
20b8						CALLMONITOR 
20b8					endif 
20b8 d1				pop de	; reset de token to look for 
20b9 d5				push de 
20ba 18 e1			jr .fnt1 
20bc				 
20bc			.fntmatch1: 
20bc			 
20bc				; is the same char a null which means we might have a full hit? 
20bc					if DEBUG_FORTH 
20bc						DMARK "NT4" 
20bc						CALLMONITOR 
20bc					endif 
20bc			 
20bc fe 00			cp 0 
20be 28 0b			jr z, .fntmatchyes 
20c0			 
20c0				; are we at the end of the token to find? 
20c0			 
20c0					if DEBUG_FORTH 
20c0						DMARK "NT5" 
20c0						CALLMONITOR 
20c0					endif 
20c0 3e 00			ld a, 0 
20c2 b9				cp c 
20c3			 
20c3 c2 ad 20			jp nz, .fnt2cmpmore    ; no, so keep going to a direct hit 
20c6			 
20c6					if DEBUG_FORTH 
20c6						DMARK "NT6" 
20c6						CALLMONITOR 
20c6					endif 
20c6				; token to find is exhusted but no match to stream 
20c6			 
20c6				; restore tok pointer and continue on 
20c6 d1				pop de 
20c7 d5				push de 
20c8 c3 9d 20			jp .fnt1 
20cb			 
20cb			 
20cb			.fntmatchyes: 
20cb			 
20cb				; hl now contains the end of the found token 
20cb			 
20cb				; get rid of saved token pointer to find 
20cb			 
20cb d1				pop de 
20cc			 
20cc					if DEBUG_FORTH 
20cc						DMARK "NT9" 
20cc						CALLMONITOR 
20cc					endif 
20cc			 
20cc				; hl will be on the null term so forward on 
20cc			 
20cc				; get back the saved start of the token 
20cc			 
20cc d9				exx 
20cd e5				push hl     ; save start of token just in case it is the right one 
20ce d9				exx 
20cf e1				pop hl        ; save it to hl 
20d0			 
20d0 c9				ret 
20d1			 
20d1			 
20d1			; LIST needs to find a specific token   
20d1			; FORGET needs to find a spefici token 
20d1			 
20d1			; SAVE needs to find all tokens by flag 
20d1			; WORDS just needs to scan through all  by flag 
20d1			; UWORDS needs to scan through all by flag 
20d1			 
20d1			 
20d1			; given hl as pointer to start of dict look up string 
20d1			; return hl as pointer to start of word block 
20d1			; or 0 if not found 
20d1			 
20d1			forth_find_tok: 
20d1 c9				ret 
20d2			 
20d2			; given hl as pointer to dict structure 
20d2			; move to the next dict block structure 
20d2			 
20d2			forth_tok_next: 
20d2				; hl now points to the address of the next word pointer  
20d2				; TODO skip compiled symbol for now 
20d2			;	push de 
20d2 23				inc hl 
20d3 5e				ld e, (hl) 
20d4 23				inc hl 
20d5 56				ld d, (hl) 
20d6 23				inc hl 
20d7			 
20d7 eb				ex de,hl 
20d8			if DEBUG_FORTH_PARSE_NEXTWORD 
20d8				push bc 
20d8				ld bc, (cli_nextword) 
20d8						DMARK "NXW" 
20d8				CALLMONITOR 
20d8				pop bc 
20d8			endif 
20d8			;	pop de	 
20d8 c9				ret 
20d9			 
20d9			 
20d9			 
20d9			; eof 
# End of file forth_parserv5.asm
20d9				include "forth_wordsv4.asm" 
20d9			 
20d9			; the core word dictionary v4 
20d9			; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Notation.html#Notation 
20d9			 
20d9			; this is a linked list for each of the system words used 
20d9			; user defined words will follow the same format but will be in ram 
20d9			 
20d9			 
20d9			; 
20d9			; 
20d9			; define linked list: 
20d9			; 
20d9			; 1. compiled byte op code 
20d9			; 2. len of text word 
20d9			; 3. text word 
20d9			; 4. ptr to next dictionary word 
20d9			; 5. asm, calls etc for the word 
20d9			; 
20d9			;  if 1 == 0 then last word in dict  
20d9			;   
20d9			; set the start of dictionary scanning to be in ram and the last word point to the system dict 
20d9			;  
20d9			;  
20d9			; create basic standard set of words 
20d9			; 
20d9			;  
20d9			; + - / * DUP EMIT . SWAP IF..THEN..ELSE DO..LOOP  : ; DROP  
20d9			; 2DUP 2DROP 2SWAP  
20d9			; @ C@ - get byte  
20d9			; ! C! - store byte 
20d9			; 0< true if less than zero 
20d9			; 0= true if zero 
20d9			; < >  
20d9			; = true if same 
20d9			; variables 
20d9			 
20d9			 
20d9			; Hardware specific words I may need 
20d9			; 
20d9			; IN OUT  
20d9			; calls to key util functions 
20d9			; calls to hardward abstraction stuff 
20d9			; easy control of frame buffers and lcd i/o 
20d9			; keyboard  
20d9			 
20d9			 
20d9			;DICT: macro 
20d9			; op_code, len, word, next 
20d9			;    word: 
20d9			;    db op_code 
20d9			;    ds word zero term 
20d9			;    dw next 
20d9			;    endm 
20d9			 
20d9			 
20d9			 
20d9			 
20d9			; op code 1 is a flag for user define words which are to be handled differently 
20d9			 
20d9			 
20d9			; 
20d9			; 
20d9			;    TODO on entry to a word this should be the expected environment 
20d9			;    hl - tos value if number then held, if string this is the ptr 
20d9			;    de -  
20d9			 
20d9			 
20d9			; opcode ranges 
20d9			; 0 - end of word dict 
20d9			; 255 - user define words 
20d9			 
20d9			sysdict: 
20d9			include "forth_opcodes.asm" 
20d9			; op codes for forth keywords 
20d9			; free to use code 0  
20d9				OPCODE_HEAP: equ  1 
20d9				OPCODE_EXEC: equ 2 
20d9				OPCODE_DUP: equ 3 
20d9				OPCODE_SWAP: equ 4 
20d9				OPCODE_COLN: equ 5 
20d9				OPCODE_SCOLN: equ 6 
20d9				OPCODE_DROP: equ 7 
20d9				OPCODE_DUP2: equ 8 
20d9				OPCODE_DROP2: equ 9 
20d9				OPCODE_SWAP2: equ 10 
20d9				OPCODE_AT: equ 11 
20d9				OPCODE_CAT: equ 12 
20d9				OPCODE_BANG: equ 13 
20d9				OPCODE_CBANG: equ 14 
20d9				OPCODE_SCALL: equ 15 
20d9				OPCODE_DEPTH: equ 16 
20d9				OPCODE_OVER: equ 17 
20d9				OPCODE_PAUSE: equ 18 
20d9				OPCODE_PAUSES: equ 19 
20d9				OPCODE_ROT: equ 20 
20d9			;free to reuse	OPCODE_WORDS: equ 21 
20d9			        OPCODE_NOT: equ 21 
20d9				OPCODE_UWORDS: equ 22 
20d9				OPCODE_BP: equ 23 
20d9				OPCODE_MONITOR: equ 24  
20d9				OPCODE_MALLOC: equ 25 
20d9				OPCODE_FREE: equ 26 
20d9				OPCODE_LIST: equ 27 
20d9				OPCODE_FORGET: equ 28 
20d9				OPCODE_NOP: equ 29 
20d9				OPCODE_COMO: equ 30 
20d9				OPCODE_COMC: equ 31 
20d9			;free to reuse	OPCODE_ENDCORE: equ 32 
20d9				OPCODE_AFTERSOUND: equ 33 
20d9				OPCODE_GP2: equ 34 
20d9				OPCODE_GP3: equ 35 
20d9				OPCODE_GP4: equ 36 
20d9				OPCODE_SIN: equ 37 
20d9				OPCODE_SOUT: equ 38 
20d9				OPCODE_SPIO: equ 39 
20d9				OPCODE_SPICEH: equ 40 
20d9				OPCODE_SPIOb: equ 41 
20d9				OPCODE_SPII: equ 42 
20d9				OPCODE_SESEL: equ 43 
20d9				OPCODE_CARTDEV: equ 44 
20d9			; free to reuse	OPCODE_ENDDEVICE: equ 45 
20d9				OPCODE_FB: equ 46 
20d9				OPCODE_EMIT: equ 47 
20d9				OPCODE_DOTH: equ 48 
20d9				OPCODE_DOTF: equ 49 
20d9				OPCODE_DOT: equ 50 
20d9				OPCODE_CLS: equ 51 
20d9				OPCODE_DRAW: equ 52 
20d9				OPCODE_DUMP: equ 53 
20d9				OPCODE_CDUMP: equ 54 
20d9				OPCODE_DAT: equ 55 
20d9				OPCODE_HOME: equ 56 
20d9				OPCODE_SPACE: equ 57 
20d9				OPCODE_SPACES: equ 58 
20d9				OPCODE_SCROLL: equ 59 
20d9				OPCODE_ATQ: equ 60 
20d9				OPCODE_AUTODSP: equ 61 
20d9				OPCODE_MENU: equ 62 
20d9			; free to reuse	OPCODE_ENDDISPLAY: equ 63  
20d9				OPCODE_THEN: equ 64 
20d9				OPCODE_ELSE: equ 65 
20d9				OPCODE_DO: equ 66 
20d9				OPCODE_LOOP: equ 67 
20d9				OPCODE_I: equ 68 
20d9				OPCODE_DLOOP: equ 69  
20d9				OPCODE_REPEAT: equ 70  
20d9				OPCODE_UNTIL: equ 71 
20d9				OPCODE_ENDFLOW: equ 72 
20d9				OPCODE_WAITK: equ 73 
20d9				OPCODE_ACCEPT: equ 74 
20d9				OPCODE_EDIT: equ 75 
20d9			;free to reuse	OPCODE_ENDKEY: equ 76 
20d9				OPCODE_LZERO: equ 77 
20d9				OPCODE_TZERO: equ 78 
20d9				OPCODE_LESS: equ 79 
20d9				OPCODE_GT: equ 80 
20d9				OPCODE_EQUAL: equ 81  
20d9			;free to reuse	OPCODE_ENDLOGIC: equ 82 
20d9				OPCODE_NEG: equ 83 
20d9				OPCODE_DIV: equ 84 
20d9				OPCODE_MUL: equ 85 
20d9				OPCODE_MIN: equ 86 
20d9				OPCODE_MAX: equ 87 
20d9				OPCODE_RND16: equ 88 
20d9				OPCODE_RND8: equ 89 
20d9				OPCODE_RND: equ 90 
20d9			;free to reuse	OPCODE_ENDMATHS: equ 91  
20d9				OPCODE_BYNAME: equ 92 
20d9				OPCODE_DIR: equ 93 
20d9				OPCODE_SAVE: equ 94 
20d9				OPCODE_LOAD: equ 95 
20d9				OPCODE_BSAVE: equ 96 
20d9				OPCODE_BLOAD: equ 97 
20d9				OPCODE_SEO: equ 98  
20d9				OPCODE_SEI: equ 99 
20d9				OPCODE_SFREE: equ 100 
20d9				OPCODE_SIZE: equ 101 
20d9				OPCODE_CREATE: equ 102 
20d9				OPCODE_APPEND: equ 103 
20d9				OPCODE_SDEL: equ 104 
20d9				OPCODE_OPEN: equ 105 
20d9				OPCODE_READ: equ 106 
20d9				OPCODE_EOF: equ 106 
20d9				OPCODE_FORMAT: equ 107 
20d9				OPCODE_LABEL: equ 108 
20d9				OPCODE_LABELS: equ 109 
20d9			;free to reuse	OPCODE_ENDSTORAGE: equ 110  
20d9				OPCODE_UPPER: equ 111 
20d9				OPCODE_LOWER: equ 112 
20d9				OPCODE_SUBSTR: equ 113 
20d9				OPCODE_LEFT: equ 114 
20d9				OPCODE_RIGHT: equ 115 
20d9				OPCODE_STR2NUM: equ 116 
20d9				OPCODE_NUM2STR: equ 117 
20d9				OPCODE_CONCAT: equ 118 
20d9				OPCODE_FIND: equ 119 
20d9				OPCODE_LEN: equ 120 
20d9				OPCODE_CHAR: equ 121 
20d9			; free to reuse	OPCODE_STRLEN: equ 122 
20d9			; free to reuse	OPCODE_ENDSTR: equ 123 
20d9				OPCODE_V0S: equ 124 
20d9				OPCODE_V0Q: equ 125 
20d9				OPCODE_V1S: equ 126 
20d9				OPCODE_V1Q: equ 127 
20d9				OPCODE_V2S: equ 128 
20d9				OPCODE_V2Q: equ 129 
20d9				OPCODE_V3S: equ 130 
20d9				OPCODE_V3Q: equ 131 
20d9			;free to reuse	OPCODE_END: equ 132 
20d9				OPCODE_ZDUP: equ 133 
20d9			 
20d9			; eof 
# End of file forth_opcodes.asm
20d9			 
20d9			include "forth_words_core.asm" 
20d9			 
20d9			; | ## Core Words 
20d9			 
20d9			;if MALLOC_4 
20d9			 
20d9			.HEAP: 
20d9			CWHEAD .EXEC OPCODE_HEAP "HEAP" 4 WORD_FLAG_CODE 
20d9 15				db WORD_SYS_CORE+OPCODE_HEAP             
20da 18 21			dw .EXEC            
20dc 05				db 4 + 1 
20dd .. 00			db "HEAP",0              
20e2				endm 
# End of macro CWHEAD
20e2			; | HEAP ( -- u1 u2 )   Pushes u1 the current number of bytes in the heap and u2 the remaining bytes - Only present if using my MALLOC | DONE 
20e2			; | | u1 - Current number of bytes in the heap 
20e2			; | | u2 - Remaining bytes left on the heap 
20e2			; | |  
20e2			; | | The heap is used for storing user defined words as well as any values pushed to stack. 
20e2			 
20e2			 
20e2				if DEBUG_FORTH_WORDS_KEY 
20e2					DMARK "HEP" 
20e2 f5				push af  
20e3 3a f7 20			ld a, (.dmark)  
20e6 32 65 ee			ld (debug_mark),a  
20e9 3a f8 20			ld a, (.dmark+1)  
20ec 32 66 ee			ld (debug_mark+1),a  
20ef 3a f9 20			ld a, (.dmark+2)  
20f2 32 67 ee			ld (debug_mark+2),a  
20f5 18 03			jr .pastdmark  
20f7 ..			.dmark: db "HEP"  
20fa f1			.pastdmark: pop af  
20fb			endm  
# End of macro DMARK
20fb					CALLMONITOR 
20fb cd 6f ee			call debug_vector  
20fe				endm  
# End of macro CALLMONITOR
20fe				endif 
20fe 2a ec 5e			ld hl, (free_list )      
2101 11 f1 5e			ld de, heap_start 
2104			 
2104 ed 52			sbc hl, de  
2106			 
2106 cd 90 1b			call forth_push_numhl 
2109			 
2109			 
2109 ed 5b ec 5e		ld de, (free_list )      
210d 21 96 e2			ld hl, heap_end 
2110			 
2110 ed 52			sbc hl, de 
2112			 
2112 cd 90 1b			call forth_push_numhl 
2115				 
2115			 
2115				 
2115			 
2115			 
2115			 
2115				NEXTW 
2115 c3 81 1f			jp macro_next 
2118				endm 
# End of macro NEXTW
2118			;endif 
2118			 
2118			.EXEC: 
2118			;	CWHEAD .STKEXEC OPCODE_EXEC "EXEC" 4 WORD_FLAG_CODE 
2118			;; > EXEC ( u -- )    Execs the string on TOS as a FORTH expression > CRASHES ON NEXTW 
2118			;; > > u - A qutoed string which can consist of any valid Forth expression excluding : defintions (use LOAD instead) 
2118			;; > > 
2118			;; > >   
2118			;	STACKFRAME OFF $5efe $5f9f 
2118			; 
2118			;		if DEBUG_FORTH_WORDS_KEY 
2118			;			DMARK "EXE" 
2118			;			CALLMONITOR 
2118			;		endif 
2118			; 
2118			;	FORTH_DSP_VALUEHL 
2118			; 
2118			;	FORTH_DSP_POP 
2118			; 
2118			;		if DEBUG_FORTH_WORDS 
2118			;			DMARK "EX1" 
2118			;			CALLMONITOR 
2118			;		endif 
2118			;;	ld e,(hl) 
2118			;;	inc hl 
2118			;;	ld d,(hl) 
2118			;;	ex de,hl 
2118			; 
2118			;;		if DEBUG_FORTH_WORDS 
2118			;;			DMARK "EX2" 
2118			;;			CALLMONITOR 
2118			;;		endif 
2118			;	push hl 
2118			; 
2118			;	;ld a, 0 
2118			;	;ld a, FORTH_END_BUFFER 
2118			;	call strlenz 
2118			;	inc hl   ; include zero term to copy 
2118			;	inc hl   ; include term 
2118			;	inc hl   ; include term 
2118			;	ld b,0 
2118			;	ld c,l 
2118			;	pop hl 
2118			;	ld de, execscratch 
2118			;		if DEBUG_FORTH_WORDS 
2118			;			DMARK "EX3" 
2118			;			CALLMONITOR 
2118			;		endif 
2118			;	ldir 
2118			; 
2118			; 
2118			;	ld hl, execscratch 
2118			; 
2118			;		if DEBUG_FORTH_WORDS 
2118			;			DMARK "EXe" 
2118			;			CALLMONITOR 
2118			;		endif 
2118			; 
2118			;	call forthparse 
2118			;	call forthexec 
2118			;;	call forthexec_cleanup 
2118			;;	call forthparse 
2118			;;	call forthexec 
2118			; 
2118			;	STACKFRAMECHK OFF $5efe $5f9f 
2118			; 
2118			;	; an immediate word so no need to process any more words 
2118			;	ret 
2118			;	NEXTW 
2118			 
2118			; dead code - old version  
2118			;	FORTH_RSP_NEXT 
2118			 
2118			;  
2118			;	ld bc,(cli_ptr)   ; move to next token to parse in the input stream 
2118			;	ld de,(cli_origptr)   ; move to next token to parse in the input stream 
2118			;	ld hl,(os_tok_ptr)   ; move to next token to parse in the input stream 
2118			;	push hl 
2118			;	push de 
2118			;	push bc 
2118			; 
2118			; 
2118			;		if DEBUG_FORTH_WORDS_KEY 
2118			;			DMARK "EXR" 
2118			;			CALLMONITOR 
2118			;		endif 
2118			; 
2118			; 
2118			; 
2118			;	;v5 FORTH_DSP_VALUE 
2118			;	FORTH_DSP_VALUEHL 
2118			; 
2118			;	; TODO do string type checks 
2118			; 
2118			;;v5	inc hl   ; skip type 
2118			; 
2118			;	push hl  ; source code  
2118			;		if DEBUG_FORTH_WORDS 
2118			;			DMARK "EX1" 
2118			;			CALLMONITOR 
2118			;		endif 
2118			;	ld a, 0 
2118			;	call strlent 
2118			; 
2118			;	inc hl 
2118			;	inc hl 
2118			;	inc hl 
2118			;	inc hl 
2118			; 
2118			;	push hl    ; size 
2118			; 
2118			;		if DEBUG_FORTH_WORDS 
2118			;			DMARK "EX2" 
2118			;			CALLMONITOR 
2118			;		endif 
2118			;	call malloc 
2118			; 
2118			;	ex de, hl    ; de now contains malloc area 
2118			;	pop bc   	; get byte count 
2118			;	pop hl      ; get string to copy 
2118			; 
2118			;	push de     ; save malloc for free later 
2118			; 
2118			;		if DEBUG_FORTH_WORDS 
2118			;			DMARK "EX3" 
2118			;			CALLMONITOR 
2118			;		endif 
2118			;	ldir       ; duplicate string 
2118			; 
2118			;	; at the end of the string so go back the three extra spaces and fill in with extra terms 
2118			;	 
2118			;	; TODO fix the parse would be better than this...  
2118			;	ex de, hl 
2118			;	dec hl 
2118			;	ld a, 0 
2118			;	ld (hl), a 
2118			;	dec hl 
2118			;	ld a, ' ' 
2118			;	ld (hl), a 
2118			;	dec hl 
2118			;	ld (hl), a 
2118			; 
2118			;	dec hl 
2118			;	ld (hl), a 
2118			; 
2118			; 
2118			;	FORTH_DSP_POP  
2118			; 
2118			;	pop hl     
2118			;	push hl    ; save malloc area 
2118			; 
2118			;		if DEBUG_FORTH_WORDS 
2118			;			DMARK "EX4" 
2118			;			CALLMONITOR 
2118			;		endif 
2118			; 
2118			;	call forthparse 
2118			;	call forthexec 
2118			;	 
2118			;	pop hl 
2118			;	if DEBUG_FORTH_WORDS 
2118			;		DMARK "EX5" 
2118			;		CALLMONITOR 
2118			;	endif 
2118			; 
2118			;	if FORTH_ENABLE_FREE 
2118			;	call free 
2118			;	endif 
2118			; 
2118			;	if DEBUG_FORTH_WORDS 
2118			;		DMARK "EX6" 
2118			;		CALLMONITOR 
2118			;	endif 
2118			; 
2118			;	pop bc 
2118			;	pop de 
2118			;	pop hl 
2118			;;	FORTH_RSP_POP	  
2118			;	ld (cli_ptr),bc   ; move to next token to parse in the input stream 
2118			;	ld (cli_origptr),de   ; move to next token to parse in the input stream 
2118			;	ld (os_tok_ptr),hl   ; move to next token to parse in the input stream 
2118			; 
2118			;	if DEBUG_FORTH_WORDS 
2118			;		DMARK "EX7" 
2118			;		CALLMONITOR 
2118			;	endif 
2118			;	NEXTW 
2118			 
2118			;.STKEXEC: 
2118			;	CWHEAD .ZDUP 43 "STKEXEC" 7 WORD_FLAG_CODE 
2118			;; > STKEXEC ( u .. u c -- ) Taking c count of strings off of the stack the strings are evaluated as code > TO TEST 
2118			; 
2118			; 
2118			;		if DEBUG_FORTH_WORDS_KEY 
2118			;			DMARK "STX" 
2118			;			CALLMONITOR 
2118			;		endif 
2118			; 
2118			;	FORTH_DSP_VALUEHL 
2118			; 
2118			;	ld (store_tmp1), hl    ; count 
2118			; 
2118			;	FORTH_DSP_POP 
2118			;.stkexec1: 
2118			;	ld hl, (store_tmp1)   ; count 
2118			;	ld a, 0 
2118			;	cp l 
2118			;	ret z 
2118			; 
2118			;	dec hl 
2118			;	ld (store_tmp1), hl    ; count 
2118			;	 
2118			;	FORTH_DSP_VALUEHL 
2118			;	push hl 
2118			;	 
2118			;		if DEBUG_FORTH_WORDS 
2118			;			DMARK "EXp" 
2118			;			CALLMONITOR 
2118			;		endif 
2118			;	FORTH_DSP_POP 
2118			; 
2118			;	call strlenz 
2118			;	inc hl   ; include zero term to copy 
2118			;	inc hl   ; include zero term to copy 
2118			;	inc hl   ; include zero term to copy 
2118			;	ld b,0 
2118			;	ld c,l 
2118			;	pop hl 
2118			;	ld de, execscratch 
2118			;		if DEBUG_FORTH_WORDS 
2118			;			DMARK "EX3" 
2118			;			CALLMONITOR 
2118			;		endif 
2118			;	ldir 
2118			; 
2118			; 
2118			;	ld hl, execscratch 
2118			; 
2118			;		if DEBUG_FORTH_WORDS 
2118			;			DMARK "EXP" 
2118			;			CALLMONITOR 
2118			;		endif 
2118			; 
2118			;	call forthparse 
2118			;	ld hl, execscratch 
2118			;		if DEBUG_FORTH_WORDS 
2118			;			DMARK "EXx" 
2118			;			CALLMONITOR 
2118			;		endif 
2118			;	call forthexec 
2118			; 
2118			;	jp .stkexec1 
2118			; 
2118			;	ret 
2118			 
2118			 
2118			.DUP: 
2118			CWHEAD .ZDUP OPCODE_DUP "DUP" 3 WORD_FLAG_CODE 
2118 17				db WORD_SYS_CORE+OPCODE_DUP             
2119 8e 21			dw .ZDUP            
211b 04				db 3 + 1 
211c .. 00			db "DUP",0              
2120				endm 
# End of macro CWHEAD
2120			; | DUP ( u -- u u )     Duplicate whatever item is on TOS | TOFIX 
2120			 
2120				if DEBUG_FORTH_WORDS_KEY 
2120					DMARK "DUP" 
2120 f5				push af  
2121 3a 35 21			ld a, (.dmark)  
2124 32 65 ee			ld (debug_mark),a  
2127 3a 36 21			ld a, (.dmark+1)  
212a 32 66 ee			ld (debug_mark+1),a  
212d 3a 37 21			ld a, (.dmark+2)  
2130 32 67 ee			ld (debug_mark+2),a  
2133 18 03			jr .pastdmark  
2135 ..			.dmark: db "DUP"  
2138 f1			.pastdmark: pop af  
2139			endm  
# End of macro DMARK
2139					CALLMONITOR 
2139 cd 6f ee			call debug_vector  
213c				endm  
# End of macro CALLMONITOR
213c				endif 
213c			 
213c				FORTH_DSP 
213c cd 5b 1d			call macro_forth_dsp 
213f				endm 
# End of macro FORTH_DSP
213f			 
213f 7e				ld a, (HL) 
2140 fe 01			cp DS_TYPE_STR 
2142 20 25			jr nz, .dupinum 
2144			 
2144				; push another string 
2144			 
2144				FORTH_DSP_VALUEHL     		 
2144 cd 95 1d			call macro_dsp_valuehl 
2147				endm 
# End of macro FORTH_DSP_VALUEHL
2147			 
2147			if DEBUG_FORTH_WORDS 
2147				DMARK "DUs" 
2147 f5				push af  
2148 3a 5c 21			ld a, (.dmark)  
214b 32 65 ee			ld (debug_mark),a  
214e 3a 5d 21			ld a, (.dmark+1)  
2151 32 66 ee			ld (debug_mark+1),a  
2154 3a 5e 21			ld a, (.dmark+2)  
2157 32 67 ee			ld (debug_mark+2),a  
215a 18 03			jr .pastdmark  
215c ..			.dmark: db "DUs"  
215f f1			.pastdmark: pop af  
2160			endm  
# End of macro DMARK
2160				CALLMONITOR 
2160 cd 6f ee			call debug_vector  
2163				endm  
# End of macro CALLMONITOR
2163			endif 
2163 cd fe 1b			call forth_push_str 
2166			 
2166				NEXTW 
2166 c3 81 1f			jp macro_next 
2169				endm 
# End of macro NEXTW
2169			 
2169			 
2169			.dupinum: 
2169				 
2169			 
2169			 
2169				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2169 cd 95 1d			call macro_dsp_valuehl 
216c				endm 
# End of macro FORTH_DSP_VALUEHL
216c			 
216c			; TODO add floating point number detection 
216c			 
216c			if DEBUG_FORTH_WORDS 
216c				DMARK "DUi" 
216c f5				push af  
216d 3a 81 21			ld a, (.dmark)  
2170 32 65 ee			ld (debug_mark),a  
2173 3a 82 21			ld a, (.dmark+1)  
2176 32 66 ee			ld (debug_mark+1),a  
2179 3a 83 21			ld a, (.dmark+2)  
217c 32 67 ee			ld (debug_mark+2),a  
217f 18 03			jr .pastdmark  
2181 ..			.dmark: db "DUi"  
2184 f1			.pastdmark: pop af  
2185			endm  
# End of macro DMARK
2185				CALLMONITOR 
2185 cd 6f ee			call debug_vector  
2188				endm  
# End of macro CALLMONITOR
2188			endif 
2188			 
2188 cd 90 1b			call forth_push_numhl 
218b				NEXTW 
218b c3 81 1f			jp macro_next 
218e				endm 
# End of macro NEXTW
218e			.ZDUP: 
218e			CWHEAD .SWAP OPCODE_ZDUP "?DUP" 4 WORD_FLAG_CODE 
218e 99				db WORD_SYS_CORE+OPCODE_ZDUP             
218f c6 21			dw .SWAP            
2191 05				db 4 + 1 
2192 .. 00			db "?DUP",0              
2197				endm 
# End of macro CWHEAD
2197			; | ?DUP ( u -- u u )     Duplicate item on TOS if the item is non-zero | TOFIX 
2197			 
2197				if DEBUG_FORTH_WORDS_KEY 
2197					DMARK "qDU" 
2197 f5				push af  
2198 3a ac 21			ld a, (.dmark)  
219b 32 65 ee			ld (debug_mark),a  
219e 3a ad 21			ld a, (.dmark+1)  
21a1 32 66 ee			ld (debug_mark+1),a  
21a4 3a ae 21			ld a, (.dmark+2)  
21a7 32 67 ee			ld (debug_mark+2),a  
21aa 18 03			jr .pastdmark  
21ac ..			.dmark: db "qDU"  
21af f1			.pastdmark: pop af  
21b0			endm  
# End of macro DMARK
21b0					CALLMONITOR 
21b0 cd 6f ee			call debug_vector  
21b3				endm  
# End of macro CALLMONITOR
21b3				endif 
21b3				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
21b3 cd 95 1d			call macro_dsp_valuehl 
21b6				endm 
# End of macro FORTH_DSP_VALUEHL
21b6			 
21b6 e5				push hl 
21b7			 
21b7				; is it a zero? 
21b7			 
21b7 3e 00			ld a, 0 
21b9 84				add h 
21ba 85				add l 
21bb			 
21bb e1				pop hl 
21bc			 
21bc fe 00			cp 0 
21be 28 03			jr z, .dup2orig 
21c0			 
21c0			 
21c0 cd 90 1b			call forth_push_numhl 
21c3			 
21c3			 
21c3			; TODO add floating point number detection 
21c3			 
21c3			.dup2orig: 
21c3			 
21c3				NEXTW 
21c3 c3 81 1f			jp macro_next 
21c6				endm 
# End of macro NEXTW
21c6			.SWAP: 
21c6			CWHEAD .COLN OPCODE_SWAP "SWAP" 4 WORD_FLAG_CODE 
21c6 18				db WORD_SYS_CORE+OPCODE_SWAP             
21c7 05 22			dw .COLN            
21c9 05				db 4 + 1 
21ca .. 00			db "SWAP",0              
21cf				endm 
# End of macro CWHEAD
21cf			; | SWAP ( w1 w2 -- w2 w1 )    Swap top two items on TOS | TOFIX 
21cf				if DEBUG_FORTH_WORDS_KEY 
21cf					DMARK "SWP" 
21cf f5				push af  
21d0 3a e4 21			ld a, (.dmark)  
21d3 32 65 ee			ld (debug_mark),a  
21d6 3a e5 21			ld a, (.dmark+1)  
21d9 32 66 ee			ld (debug_mark+1),a  
21dc 3a e6 21			ld a, (.dmark+2)  
21df 32 67 ee			ld (debug_mark+2),a  
21e2 18 03			jr .pastdmark  
21e4 ..			.dmark: db "SWP"  
21e7 f1			.pastdmark: pop af  
21e8			endm  
# End of macro DMARK
21e8					CALLMONITOR 
21e8 cd 6f ee			call debug_vector  
21eb				endm  
# End of macro CALLMONITOR
21eb				endif 
21eb			 
21eb			; TODO Use os stack swap memory 
21eb				FORTH_DSP_VALUEHL 
21eb cd 95 1d			call macro_dsp_valuehl 
21ee				endm 
# End of macro FORTH_DSP_VALUEHL
21ee e5				push hl     ; w2 
21ef			 
21ef				FORTH_DSP_POP 
21ef cd 4d 1e			call macro_forth_dsp_pop 
21f2				endm 
# End of macro FORTH_DSP_POP
21f2			 
21f2				FORTH_DSP_VALUEHL 
21f2 cd 95 1d			call macro_dsp_valuehl 
21f5				endm 
# End of macro FORTH_DSP_VALUEHL
21f5			 
21f5				FORTH_DSP_POP 
21f5 cd 4d 1e			call macro_forth_dsp_pop 
21f8				endm 
# End of macro FORTH_DSP_POP
21f8			 
21f8 d1				pop de     ; w2	, hl = w1 
21f9			 
21f9 eb				ex de, hl 
21fa d5				push de 
21fb			 
21fb cd 90 1b			call forth_push_numhl 
21fe			 
21fe e1				pop hl 
21ff			 
21ff cd 90 1b			call forth_push_numhl 
2202				 
2202			 
2202				NEXTW 
2202 c3 81 1f			jp macro_next 
2205				endm 
# End of macro NEXTW
2205			.COLN: 
2205			CWHEAD .SCOLN OPCODE_COLN ":" 1 WORD_FLAG_CODE 
2205 19				db WORD_SYS_CORE+OPCODE_COLN             
2206 91 23			dw .SCOLN            
2208 02				db 1 + 1 
2209 .. 00			db ":",0              
220b				endm 
# End of macro CWHEAD
220b			; | : ( -- )         Create new word | DONE 
220b			 
220b				if DEBUG_FORTH_WORDS_KEY 
220b					DMARK "CLN" 
220b f5				push af  
220c 3a 20 22			ld a, (.dmark)  
220f 32 65 ee			ld (debug_mark),a  
2212 3a 21 22			ld a, (.dmark+1)  
2215 32 66 ee			ld (debug_mark+1),a  
2218 3a 22 22			ld a, (.dmark+2)  
221b 32 67 ee			ld (debug_mark+2),a  
221e 18 03			jr .pastdmark  
2220 ..			.dmark: db "CLN"  
2223 f1			.pastdmark: pop af  
2224			endm  
# End of macro DMARK
2224					CALLMONITOR 
2224 cd 6f ee			call debug_vector  
2227				endm  
# End of macro CALLMONITOR
2227				endif 
2227			STACKFRAME OFF $8efe $989f 
2227				if DEBUG_STACK_IMB 
2227					if OFF 
2227						exx 
2227						ld de, $8efe 
2227						ld a, d 
2227						ld hl, curframe 
2227						call hexout 
2227						ld a, e 
2227						ld hl, curframe+2 
2227						call hexout 
2227						ld hl, $8efe 
2227						push hl 
2227						ld hl, $989f 
2227						push hl 
2227						exx 
2227					endif 
2227				endif 
2227			endm 
# End of macro STACKFRAME
2227			; get parser buffer length  of new word 
2227			 
2227			 
2227			 
2227				; move tok past this to start of name defintition 
2227				; TODO get word to define 
2227				; TODO Move past word token 
2227				; TODO get length of string up to the ';' 
2227			 
2227 2a bc e5		ld hl, (os_tok_ptr) 
222a 23			inc hl 
222b 23			inc hl 
222c			 
222c 3e 3b		ld a, ';' 
222e cd 66 11		call strlent 
2231			 
2231 7d			ld a,l 
2232 32 ab e2		ld (os_new_parse_len), a 
2235			 
2235			 
2235			if DEBUG_FORTH_UWORD 
2235 ed 5b bc e5	ld de, (os_tok_ptr) 
2239					DMARK ":01" 
2239 f5				push af  
223a 3a 4e 22			ld a, (.dmark)  
223d 32 65 ee			ld (debug_mark),a  
2240 3a 4f 22			ld a, (.dmark+1)  
2243 32 66 ee			ld (debug_mark+1),a  
2246 3a 50 22			ld a, (.dmark+2)  
2249 32 67 ee			ld (debug_mark+2),a  
224c 18 03			jr .pastdmark  
224e ..			.dmark: db ":01"  
2251 f1			.pastdmark: pop af  
2252			endm  
# End of macro DMARK
2252			CALLMONITOR 
2252 cd 6f ee			call debug_vector  
2255				endm  
# End of macro CALLMONITOR
2255			endif 
2255			 
2255			; 
2255			;  new word memory layout: 
2255			;  
2255			;    : adg 6666 ;  
2255			; 
2255			;    db   1     ; user defined word  
2255 23			inc hl    
2256			;    dw   sysdict 
2256 23			inc hl 
2257 23			inc hl 
2258			;    db <word len>+1 (for null) 
2258 23			inc hl 
2259			;    db .... <word> 
2259			; 
2259			 
2259 23			inc hl    ; some extras for the word preamble before the above 
225a 23			inc hl 
225b 23			inc hl 
225c 23			inc hl 
225d 23			inc hl 
225e 23			inc hl 
225f 23			inc hl  
2260 23			inc hl 
2261 23			inc hl 
2262 23			inc hl 
2263 23			inc hl 
2264 23			inc hl 
2265 23			inc hl 
2266 23			inc hl     ; TODO how many do we really need?     maybe only 6 
2267			;       exec word buffer 
2267			;	<ptr word>   
2267 23			inc hl 
2268 23			inc hl 
2269			;       <word list><null term> 7F final term 
2269			 
2269			 
2269			if DEBUG_FORTH_UWORD 
2269					DMARK ":02" 
2269 f5				push af  
226a 3a 7e 22			ld a, (.dmark)  
226d 32 65 ee			ld (debug_mark),a  
2270 3a 7f 22			ld a, (.dmark+1)  
2273 32 66 ee			ld (debug_mark+1),a  
2276 3a 80 22			ld a, (.dmark+2)  
2279 32 67 ee			ld (debug_mark+2),a  
227c 18 03			jr .pastdmark  
227e ..			.dmark: db ":02"  
2281 f1			.pastdmark: pop af  
2282			endm  
# End of macro DMARK
2282			CALLMONITOR 
2282 cd 6f ee			call debug_vector  
2285				endm  
# End of macro CALLMONITOR
2285			endif 
2285			 
2285			 
2285				; malloc the size 
2285			 
2285 cd d0 11			call malloc 
2288 22 ad e2			ld (os_new_malloc), hl     ; save malloc start 
228b			 
228b			;    db   1     ; user defined word  
228b 3e 01			ld a, WORD_SYS_UWORD  
228d 77				ld (hl), a 
228e			 
228e 23			inc hl    
228f			;    dw   sysdict 
228f 11 d9 20		ld de, sysdict       ; continue on with the scan to the system dict 
2292 73			ld (hl), e 
2293 23			inc hl 
2294 72			ld (hl), d 
2295 23			inc hl 
2296			 
2296			 
2296			;    Setup dict word 
2296			 
2296 23			inc hl 
2297 22 a7 e2		ld (os_new_work_ptr), hl     ; save start of dict word  
229a			 
229a			; 1. get length of dict word 
229a			 
229a			 
229a 2a bc e5		ld hl, (os_tok_ptr) 
229d 23			inc hl 
229e 23			inc hl    ; position to start of dict word 
229f 3e 00		ld a, 0 
22a1 cd 66 11		call strlent 
22a4			 
22a4			 
22a4 23			inc hl    ; to include null??? 
22a5			 
22a5			; write length of dict word 
22a5			 
22a5 ed 5b a7 e2	ld de, (os_new_work_ptr)   ; get dest for copy of word 
22a9 1b			dec de 
22aa eb			ex de, hl 
22ab 73			ld (hl), e 
22ac eb			ex de, hl 
22ad			 
22ad			 
22ad			 
22ad			; copy  
22ad 4d			ld c, l 
22ae 06 00		ld b, 0 
22b0 ed 5b a7 e2	ld de, (os_new_work_ptr)   ; get dest for copy of word 
22b4 2a bc e5		ld hl, (os_tok_ptr) 
22b7 23			inc hl 
22b8 23			inc hl    ; position to start of dict word 
22b9			 
22b9			;	ldir       ; copy word - HL now is where we need to be for copy of the line 
22b9			 
22b9			; TODO need to convert word to upper case 
22b9			 
22b9			ucasetok:	 
22b9 7e			ld a,(hl) 
22ba cd 52 11		call toUpper 
22bd 77			ld (hl),a 
22be ed a0		ldi 
22c0 f2 b9 22		jp p, ucasetok 
22c3			 
22c3			 
22c3			 
22c3			; de now points to start of where the word body code should be placed 
22c3 ed 53 a7 e2	ld (os_new_work_ptr), de 
22c7			; hl now points to the words to throw at forthexec which needs to be copied 
22c7 22 a5 e2		ld (os_new_src_ptr), hl 
22ca			 
22ca			; TODO add 'call to forthexec' 
22ca			 
22ca			if DEBUG_FORTH_UWORD 
22ca c5			push bc 
22cb ed 4b ad e2	ld bc, (os_new_malloc) 
22cf					DMARK ":0x" 
22cf f5				push af  
22d0 3a e4 22			ld a, (.dmark)  
22d3 32 65 ee			ld (debug_mark),a  
22d6 3a e5 22			ld a, (.dmark+1)  
22d9 32 66 ee			ld (debug_mark+1),a  
22dc 3a e6 22			ld a, (.dmark+2)  
22df 32 67 ee			ld (debug_mark+2),a  
22e2 18 03			jr .pastdmark  
22e4 ..			.dmark: db ":0x"  
22e7 f1			.pastdmark: pop af  
22e8			endm  
# End of macro DMARK
22e8			CALLMONITOR 
22e8 cd 6f ee			call debug_vector  
22eb				endm  
# End of macro CALLMONITOR
22eb c1			pop bc 
22ec			endif 
22ec			 
22ec			 
22ec			; create word preamble which should be: 
22ec			 
22ec			; TODO possibly push the current os_tok_ptr to rsp and the current rsp will be the start of the string and not current pc???? 
22ec			 
22ec			;    ld hl, <word code> 
22ec			;    jp user_exec 
22ec			;    <word code bytes> 
22ec			 
22ec			 
22ec			;	inc de     ; TODO ??? or are we already past the word's null 
22ec eb			ex de, hl 
22ed			 
22ed 36 21		ld (hl), 021h     ; TODO get bytes poke "ld hl, " 
22ef			 
22ef 23			inc hl 
22f0 22 a1 e2		ld (os_new_exec_ptr),hl     ; save this location to poke with the address of the word buffer 
22f3 23			inc hl 
22f4			 
22f4 23			inc hl 
22f5 36 c3		ld (hl), 0c3h     ; TODO get bytes poke "jp xx  " 
22f7			 
22f7 01 7b 4c		ld bc, user_exec 
22fa 23			inc hl 
22fb 71			ld (hl), c     ; poke address of user_exec 
22fc 23			inc hl 
22fd 70			ld (hl), b     
22fe			; 
22fe			;	inc hl 
22fe			;	ld (hl), 0cdh     ; TODO get bytes poke "call  " 
22fe			; 
22fe			; 
22fe			;	ld bc, macro_forth_rsp_next 
22fe			;	inc hl 
22fe			;	ld (hl), c     ; poke address of FORTH_RSP_NEXT 
22fe			;	inc hl 
22fe			;	ld (hl), b     
22fe			; 
22fe			;	inc hl 
22fe			;	ld (hl), 0cdh     ; TODO get bytes poke "call  " 
22fe			; 
22fe			; 
22fe			;	inc hl 
22fe			;	ld bc, forthexec 
22fe			;	ld (hl), c     ; poke address of forthexec 
22fe			;	inc hl 
22fe			;	ld (hl), b      
22fe			; 
22fe			;	inc hl 
22fe			;	ld (hl), 0c3h     ; TODO get bytes poke "jp  " 
22fe			; 
22fe			;	ld bc, user_dict_next 
22fe			;	inc hl 
22fe			;	ld (hl), c     ; poke address of forthexec 
22fe			;	inc hl 
22fe			;	ld (hl), b      
22fe			 
22fe			; hl is now where we need to copy the word byte data to save this 
22fe			 
22fe 23			inc hl 
22ff 22 a3 e2		ld (os_new_exec), hl 
2302			 
2302			; copy definition 
2302			 
2302 eb			ex de, hl 
2303			;	inc de    ; TODO BUG It appears the exec of a uword requires pc to be set 
2303			;	inc de    ; skip the PC for this parse 
2303 3a ab e2		ld a, (os_new_parse_len) 
2306 4f			ld c, a 
2307 06 00		ld b, 0 
2309 ed b0		ldir		 ; copy defintion 
230b			 
230b			 
230b			; poke the address of where the new word bytes live for forthexec 
230b			 
230b 2a a1 e2		ld hl, (os_new_exec_ptr)     ; TODO this isnt correct 
230e			 
230e ed 5b a3 e2	ld de, (os_new_exec)      
2312			 
2312 73			ld (hl), e 
2313 23			inc hl 
2314 72			ld (hl), d 
2315			 
2315				; TODO copy last user dict word next link to this word 
2315				; TODO update last user dict word to point to this word 
2315			; 
2315			; hl f923 de 812a ; bc 811a 
2315			 
2315			if DEBUG_FORTH_UWORD 
2315 c5			push bc 
2316 ed 4b ad e2	ld bc, (os_new_malloc) 
231a					DMARK ":0A" 
231a f5				push af  
231b 3a 2f 23			ld a, (.dmark)  
231e 32 65 ee			ld (debug_mark),a  
2321 3a 30 23			ld a, (.dmark+1)  
2324 32 66 ee			ld (debug_mark+1),a  
2327 3a 31 23			ld a, (.dmark+2)  
232a 32 67 ee			ld (debug_mark+2),a  
232d 18 03			jr .pastdmark  
232f ..			.dmark: db ":0A"  
2332 f1			.pastdmark: pop af  
2333			endm  
# End of macro DMARK
2333			CALLMONITOR 
2333 cd 6f ee			call debug_vector  
2336				endm  
# End of macro CALLMONITOR
2336 c1			pop bc 
2337			endif 
2337			if DEBUG_FORTH_UWORD 
2337 c5			push bc 
2338 ed 4b ad e2	ld bc, (os_new_malloc) 
233c 03			inc bc 
233d 03			inc bc 
233e 03			inc bc 
233f 03			inc bc 
2340 03			inc bc 
2341 03			inc bc 
2342 03			inc bc 
2343 03			inc bc 
2344			 
2344					DMARK ":0B" 
2344 f5				push af  
2345 3a 59 23			ld a, (.dmark)  
2348 32 65 ee			ld (debug_mark),a  
234b 3a 5a 23			ld a, (.dmark+1)  
234e 32 66 ee			ld (debug_mark+1),a  
2351 3a 5b 23			ld a, (.dmark+2)  
2354 32 67 ee			ld (debug_mark+2),a  
2357 18 03			jr .pastdmark  
2359 ..			.dmark: db ":0B"  
235c f1			.pastdmark: pop af  
235d			endm  
# End of macro DMARK
235d			CALLMONITOR 
235d cd 6f ee			call debug_vector  
2360				endm  
# End of macro CALLMONITOR
2360 c1			pop bc 
2361			endif 
2361			 
2361			; update word dict linked list for new word 
2361			 
2361			 
2361 2a b8 e5		ld hl, (os_last_new_uword)		; get the start of the last added uword 
2364 23			inc hl     ; move to next work linked list ptr 
2365			 
2365 ed 5b ad e2	ld de, (os_new_malloc)		 ; new next word 
2369 73			ld (hl), e 
236a 23			inc hl 
236b 72			ld (hl), d 
236c			 
236c			if DEBUG_FORTH_UWORD 
236c ed 4b b8 e5	ld bc, (os_last_new_uword)		; get the last word so we can check it worked in debug 
2370			endif 
2370			 
2370 ed 53 b8 e5	ld (os_last_new_uword), de      ; update last new uword ptr 
2374			 
2374			 
2374			if DEBUG_FORTH_UWORD 
2374					DMARK ":0+" 
2374 f5				push af  
2375 3a 89 23			ld a, (.dmark)  
2378 32 65 ee			ld (debug_mark),a  
237b 3a 8a 23			ld a, (.dmark+1)  
237e 32 66 ee			ld (debug_mark+1),a  
2381 3a 8b 23			ld a, (.dmark+2)  
2384 32 67 ee			ld (debug_mark+2),a  
2387 18 03			jr .pastdmark  
2389 ..			.dmark: db ":0+"  
238c f1			.pastdmark: pop af  
238d			endm  
# End of macro DMARK
238d			CALLMONITOR 
238d cd 6f ee			call debug_vector  
2390				endm  
# End of macro CALLMONITOR
2390			endif 
2390			 
2390			STACKFRAMECHK OFF $8efe $989f 
2390				if DEBUG_STACK_IMB 
2390					if OFF 
2390						exx 
2390						ld hl, $989f 
2390						pop de   ; $989f 
2390						call cmp16 
2390						jr nz, .spnosame 
2390						ld hl, $8efe 
2390						pop de   ; $8efe 
2390						call cmp16 
2390						jr z, .spfrsame 
2390						.spnosame: call showsperror 
2390						.spfrsame: nop 
2390						exx 
2390					endif 
2390				endif 
2390			endm 
# End of macro STACKFRAMECHK
2390			 
2390 c9			ret    ; dont process any remaining parser tokens as they form new word 
2391			 
2391			 
2391			 
2391			 
2391			;		NEXT 
2391			.SCOLN: 
2391			;	CWHEAD .DROP 17 '\;' 1 WORD_FLAG_CODE 
2391 06			db OPCODE_SCOLN 
2392 dd 23		dw .DROP 
2394 02			db 2 
2395 .. 00		db ";",0           
2397			; | ; ( -- )     Terminate new word and return exec to previous exec level | DONE 
2397				if DEBUG_FORTH_WORDS_KEY 
2397					DMARK "SCN" 
2397 f5				push af  
2398 3a ac 23			ld a, (.dmark)  
239b 32 65 ee			ld (debug_mark),a  
239e 3a ad 23			ld a, (.dmark+1)  
23a1 32 66 ee			ld (debug_mark+1),a  
23a4 3a ae 23			ld a, (.dmark+2)  
23a7 32 67 ee			ld (debug_mark+2),a  
23aa 18 03			jr .pastdmark  
23ac ..			.dmark: db "SCN"  
23af f1			.pastdmark: pop af  
23b0			endm  
# End of macro DMARK
23b0					CALLMONITOR 
23b0 cd 6f ee			call debug_vector  
23b3				endm  
# End of macro CALLMONITOR
23b3				endif 
23b3				FORTH_RSP_TOS 
23b3 cd 4e 1b			call macro_forth_rsp_tos 
23b6				endm 
# End of macro FORTH_RSP_TOS
23b6 e5				push hl 
23b7				FORTH_RSP_POP 
23b7 cd 58 1b			call macro_forth_rsp_pop 
23ba				endm 
# End of macro FORTH_RSP_POP
23ba e1				pop hl 
23bb			;		ex de,hl 
23bb 22 bc e5			ld (os_tok_ptr),hl 
23be			 
23be			if DEBUG_FORTH_UWORD 
23be					DMARK "SCL" 
23be f5				push af  
23bf 3a d3 23			ld a, (.dmark)  
23c2 32 65 ee			ld (debug_mark),a  
23c5 3a d4 23			ld a, (.dmark+1)  
23c8 32 66 ee			ld (debug_mark+1),a  
23cb 3a d5 23			ld a, (.dmark+2)  
23ce 32 67 ee			ld (debug_mark+2),a  
23d1 18 03			jr .pastdmark  
23d3 ..			.dmark: db "SCL"  
23d6 f1			.pastdmark: pop af  
23d7			endm  
# End of macro DMARK
23d7			CALLMONITOR 
23d7 cd 6f ee			call debug_vector  
23da				endm  
# End of macro CALLMONITOR
23da			endif 
23da				NEXTW 
23da c3 81 1f			jp macro_next 
23dd				endm 
# End of macro NEXTW
23dd			 
23dd			.DROP: 
23dd			CWHEAD .DUP2 OPCODE_DROP "DROP" 4 WORD_FLAG_CODE 
23dd 1b				db WORD_SYS_CORE+OPCODE_DROP             
23de 08 24			dw .DUP2            
23e0 05				db 4 + 1 
23e1 .. 00			db "DROP",0              
23e6				endm 
# End of macro CWHEAD
23e6			; | DROP ( w -- )   drop the TOS item   | DONE 
23e6				if DEBUG_FORTH_WORDS_KEY 
23e6					DMARK "DRP" 
23e6 f5				push af  
23e7 3a fb 23			ld a, (.dmark)  
23ea 32 65 ee			ld (debug_mark),a  
23ed 3a fc 23			ld a, (.dmark+1)  
23f0 32 66 ee			ld (debug_mark+1),a  
23f3 3a fd 23			ld a, (.dmark+2)  
23f6 32 67 ee			ld (debug_mark+2),a  
23f9 18 03			jr .pastdmark  
23fb ..			.dmark: db "DRP"  
23fe f1			.pastdmark: pop af  
23ff			endm  
# End of macro DMARK
23ff					CALLMONITOR 
23ff cd 6f ee			call debug_vector  
2402				endm  
# End of macro CALLMONITOR
2402				endif 
2402				FORTH_DSP_POP 
2402 cd 4d 1e			call macro_forth_dsp_pop 
2405				endm 
# End of macro FORTH_DSP_POP
2405				NEXTW 
2405 c3 81 1f			jp macro_next 
2408				endm 
# End of macro NEXTW
2408			.DUP2: 
2408			CWHEAD .DROP2 OPCODE_DUP2 "2DUP" 4 WORD_FLAG_CODE 
2408 1c				db WORD_SYS_CORE+OPCODE_DUP2             
2409 4d 24			dw .DROP2            
240b 05				db 4 + 1 
240c .. 00			db "2DUP",0              
2411				endm 
# End of macro CWHEAD
2411			; | 2DUP ( w1 w2 -- w1 w2 w1 w2 ) Duplicate the top two items on TOS  | TOFIX 
2411				if DEBUG_FORTH_WORDS_KEY 
2411					DMARK "2DU" 
2411 f5				push af  
2412 3a 26 24			ld a, (.dmark)  
2415 32 65 ee			ld (debug_mark),a  
2418 3a 27 24			ld a, (.dmark+1)  
241b 32 66 ee			ld (debug_mark+1),a  
241e 3a 28 24			ld a, (.dmark+2)  
2421 32 67 ee			ld (debug_mark+2),a  
2424 18 03			jr .pastdmark  
2426 ..			.dmark: db "2DU"  
2429 f1			.pastdmark: pop af  
242a			endm  
# End of macro DMARK
242a					CALLMONITOR 
242a cd 6f ee			call debug_vector  
242d				endm  
# End of macro CALLMONITOR
242d				endif 
242d				FORTH_DSP_VALUEHL 
242d cd 95 1d			call macro_dsp_valuehl 
2430				endm 
# End of macro FORTH_DSP_VALUEHL
2430 e5				push hl      ; 2 
2431			 
2431				FORTH_DSP_POP 
2431 cd 4d 1e			call macro_forth_dsp_pop 
2434				endm 
# End of macro FORTH_DSP_POP
2434				 
2434				FORTH_DSP_VALUEHL 
2434 cd 95 1d			call macro_dsp_valuehl 
2437				endm 
# End of macro FORTH_DSP_VALUEHL
2437			;		push hl      ; 1 
2437			 
2437				FORTH_DSP_POP 
2437 cd 4d 1e			call macro_forth_dsp_pop 
243a				endm 
# End of macro FORTH_DSP_POP
243a			 
243a			;		pop hl       ; 1 
243a d1				pop de       ; 2 
243b			 
243b cd 90 1b			call forth_push_numhl 
243e eb				ex de, hl 
243f cd 90 1b			call forth_push_numhl 
2442			 
2442				 
2442 eb				ex de, hl 
2443			 
2443 cd 90 1b			call forth_push_numhl 
2446 eb				ex de, hl 
2447 cd 90 1b			call forth_push_numhl 
244a			 
244a			 
244a				NEXTW 
244a c3 81 1f			jp macro_next 
244d				endm 
# End of macro NEXTW
244d			.DROP2: 
244d			CWHEAD .SWAP2 OPCODE_DROP2 "2DROP" 5 WORD_FLAG_CODE 
244d 1d				db WORD_SYS_CORE+OPCODE_DROP2             
244e 7c 24			dw .SWAP2            
2450 06				db 5 + 1 
2451 .. 00			db "2DROP",0              
2457				endm 
# End of macro CWHEAD
2457			; | 2DROP ( w w -- )    Double drop | DONE 
2457				if DEBUG_FORTH_WORDS_KEY 
2457					DMARK "2DR" 
2457 f5				push af  
2458 3a 6c 24			ld a, (.dmark)  
245b 32 65 ee			ld (debug_mark),a  
245e 3a 6d 24			ld a, (.dmark+1)  
2461 32 66 ee			ld (debug_mark+1),a  
2464 3a 6e 24			ld a, (.dmark+2)  
2467 32 67 ee			ld (debug_mark+2),a  
246a 18 03			jr .pastdmark  
246c ..			.dmark: db "2DR"  
246f f1			.pastdmark: pop af  
2470			endm  
# End of macro DMARK
2470					CALLMONITOR 
2470 cd 6f ee			call debug_vector  
2473				endm  
# End of macro CALLMONITOR
2473				endif 
2473				FORTH_DSP_POP 
2473 cd 4d 1e			call macro_forth_dsp_pop 
2476				endm 
# End of macro FORTH_DSP_POP
2476				FORTH_DSP_POP 
2476 cd 4d 1e			call macro_forth_dsp_pop 
2479				endm 
# End of macro FORTH_DSP_POP
2479				NEXTW 
2479 c3 81 1f			jp macro_next 
247c				endm 
# End of macro NEXTW
247c			.SWAP2: 
247c			CWHEAD .AT OPCODE_SWAP2 "2SWAP" 5 WORD_FLAG_CODE 
247c 1e				db WORD_SYS_CORE+OPCODE_SWAP2             
247d a5 24			dw .AT            
247f 06				db 5 + 1 
2480 .. 00			db "2SWAP",0              
2486				endm 
# End of macro CWHEAD
2486			; | 2SWAP ( w1 w2 w3 w4 -- w3 w4 w1 w2 ) Swap top pair of items | TOFIX 
2486				if DEBUG_FORTH_WORDS_KEY 
2486					DMARK "2SW" 
2486 f5				push af  
2487 3a 9b 24			ld a, (.dmark)  
248a 32 65 ee			ld (debug_mark),a  
248d 3a 9c 24			ld a, (.dmark+1)  
2490 32 66 ee			ld (debug_mark+1),a  
2493 3a 9d 24			ld a, (.dmark+2)  
2496 32 67 ee			ld (debug_mark+2),a  
2499 18 03			jr .pastdmark  
249b ..			.dmark: db "2SW"  
249e f1			.pastdmark: pop af  
249f			endm  
# End of macro DMARK
249f					CALLMONITOR 
249f cd 6f ee			call debug_vector  
24a2				endm  
# End of macro CALLMONITOR
24a2				endif 
24a2			; TODO Use os stack swap memory 
24a2				NEXTW 
24a2 c3 81 1f			jp macro_next 
24a5				endm 
# End of macro NEXTW
24a5			.AT: 
24a5			CWHEAD .CAT OPCODE_AT "@" 1 WORD_FLAG_CODE 
24a5 1f				db WORD_SYS_CORE+OPCODE_AT             
24a6 d7 24			dw .CAT            
24a8 02				db 1 + 1 
24a9 .. 00			db "@",0              
24ab				endm 
# End of macro CWHEAD
24ab			; | @ ( w -- ) Push onto TOS byte stored at address   | DONE 
24ab			 
24ab				if DEBUG_FORTH_WORDS_KEY 
24ab					DMARK "AT." 
24ab f5				push af  
24ac 3a c0 24			ld a, (.dmark)  
24af 32 65 ee			ld (debug_mark),a  
24b2 3a c1 24			ld a, (.dmark+1)  
24b5 32 66 ee			ld (debug_mark+1),a  
24b8 3a c2 24			ld a, (.dmark+2)  
24bb 32 67 ee			ld (debug_mark+2),a  
24be 18 03			jr .pastdmark  
24c0 ..			.dmark: db "AT."  
24c3 f1			.pastdmark: pop af  
24c4			endm  
# End of macro DMARK
24c4					CALLMONITOR 
24c4 cd 6f ee			call debug_vector  
24c7				endm  
# End of macro CALLMONITOR
24c7				endif 
24c7			.getbyteat:	 
24c7				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
24c7 cd 95 1d			call macro_dsp_valuehl 
24ca				endm 
# End of macro FORTH_DSP_VALUEHL
24ca				 
24ca			;		push hl 
24ca			 
24ca				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
24ca cd 4d 1e			call macro_forth_dsp_pop 
24cd				endm 
# End of macro FORTH_DSP_POP
24cd			 
24cd			;		pop hl 
24cd			 
24cd 7e				ld a, (hl) 
24ce			 
24ce 6f				ld l, a 
24cf 26 00			ld h, 0 
24d1 cd 90 1b			call forth_push_numhl 
24d4			 
24d4				NEXTW 
24d4 c3 81 1f			jp macro_next 
24d7				endm 
# End of macro NEXTW
24d7			.CAT: 
24d7			CWHEAD .BANG OPCODE_CAT "C@" 2 WORD_FLAG_CODE 
24d7 20				db WORD_SYS_CORE+OPCODE_CAT             
24d8 00 25			dw .BANG            
24da 03				db 2 + 1 
24db .. 00			db "C@",0              
24de				endm 
# End of macro CWHEAD
24de			; | C@  ( w -- ) Push onto TOS byte stored at address   | DONE 
24de				if DEBUG_FORTH_WORDS_KEY 
24de					DMARK "CAA" 
24de f5				push af  
24df 3a f3 24			ld a, (.dmark)  
24e2 32 65 ee			ld (debug_mark),a  
24e5 3a f4 24			ld a, (.dmark+1)  
24e8 32 66 ee			ld (debug_mark+1),a  
24eb 3a f5 24			ld a, (.dmark+2)  
24ee 32 67 ee			ld (debug_mark+2),a  
24f1 18 03			jr .pastdmark  
24f3 ..			.dmark: db "CAA"  
24f6 f1			.pastdmark: pop af  
24f7			endm  
# End of macro DMARK
24f7					CALLMONITOR 
24f7 cd 6f ee			call debug_vector  
24fa				endm  
# End of macro CALLMONITOR
24fa				endif 
24fa c3 c7 24			jp .getbyteat 
24fd				NEXTW 
24fd c3 81 1f			jp macro_next 
2500				endm 
# End of macro NEXTW
2500			.BANG: 
2500			CWHEAD .CBANG OPCODE_BANG "!" 1 WORD_FLAG_CODE 
2500 21				db WORD_SYS_CORE+OPCODE_BANG             
2501 36 25			dw .CBANG            
2503 02				db 1 + 1 
2504 .. 00			db "!",0              
2506				endm 
# End of macro CWHEAD
2506			; | ! ( x w -- ) Store x at address w      | DONE 
2506				if DEBUG_FORTH_WORDS_KEY 
2506					DMARK "BNG" 
2506 f5				push af  
2507 3a 1b 25			ld a, (.dmark)  
250a 32 65 ee			ld (debug_mark),a  
250d 3a 1c 25			ld a, (.dmark+1)  
2510 32 66 ee			ld (debug_mark+1),a  
2513 3a 1d 25			ld a, (.dmark+2)  
2516 32 67 ee			ld (debug_mark+2),a  
2519 18 03			jr .pastdmark  
251b ..			.dmark: db "BNG"  
251e f1			.pastdmark: pop af  
251f			endm  
# End of macro DMARK
251f					CALLMONITOR 
251f cd 6f ee			call debug_vector  
2522				endm  
# End of macro CALLMONITOR
2522				endif 
2522			 
2522			.storebyteat:		 
2522				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2522 cd 95 1d			call macro_dsp_valuehl 
2525				endm 
# End of macro FORTH_DSP_VALUEHL
2525				 
2525 e5				push hl 
2526			 
2526				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2526 cd 4d 1e			call macro_forth_dsp_pop 
2529				endm 
# End of macro FORTH_DSP_POP
2529			 
2529				; get byte to poke 
2529			 
2529				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2529 cd 95 1d			call macro_dsp_valuehl 
252c				endm 
# End of macro FORTH_DSP_VALUEHL
252c e5				push hl 
252d			 
252d			 
252d				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
252d cd 4d 1e			call macro_forth_dsp_pop 
2530				endm 
# End of macro FORTH_DSP_POP
2530			 
2530			 
2530 d1				pop de 
2531 e1				pop hl 
2532			 
2532 73				ld (hl),e 
2533			 
2533			 
2533				NEXTW 
2533 c3 81 1f			jp macro_next 
2536				endm 
# End of macro NEXTW
2536			.CBANG: 
2536			CWHEAD .SCALL OPCODE_CBANG "C!" 2 WORD_FLAG_CODE 
2536 22				db WORD_SYS_CORE+OPCODE_CBANG             
2537 5f 25			dw .SCALL            
2539 03				db 2 + 1 
253a .. 00			db "C!",0              
253d				endm 
# End of macro CWHEAD
253d			; | C!  ( x w -- ) Store x at address w  | DONE 
253d				if DEBUG_FORTH_WORDS_KEY 
253d					DMARK "CBA" 
253d f5				push af  
253e 3a 52 25			ld a, (.dmark)  
2541 32 65 ee			ld (debug_mark),a  
2544 3a 53 25			ld a, (.dmark+1)  
2547 32 66 ee			ld (debug_mark+1),a  
254a 3a 54 25			ld a, (.dmark+2)  
254d 32 67 ee			ld (debug_mark+2),a  
2550 18 03			jr .pastdmark  
2552 ..			.dmark: db "CBA"  
2555 f1			.pastdmark: pop af  
2556			endm  
# End of macro DMARK
2556					CALLMONITOR 
2556 cd 6f ee			call debug_vector  
2559				endm  
# End of macro CALLMONITOR
2559				endif 
2559 c3 22 25			jp .storebyteat 
255c				NEXTW 
255c c3 81 1f			jp macro_next 
255f				endm 
# End of macro NEXTW
255f			.SCALL: 
255f			CWHEAD .DEPTH OPCODE_SCALL "CALL" 4 WORD_FLAG_CODE 
255f 23				db WORD_SYS_CORE+OPCODE_SCALL             
2560 93 25			dw .DEPTH            
2562 05				db 4 + 1 
2563 .. 00			db "CALL",0              
2568				endm 
# End of macro CWHEAD
2568			; | CALL ( w -- w  ) machine code call to address w  push the result of hl to stack | DONE 
2568				if DEBUG_FORTH_WORDS_KEY 
2568					DMARK "CLL" 
2568 f5				push af  
2569 3a 7d 25			ld a, (.dmark)  
256c 32 65 ee			ld (debug_mark),a  
256f 3a 7e 25			ld a, (.dmark+1)  
2572 32 66 ee			ld (debug_mark+1),a  
2575 3a 7f 25			ld a, (.dmark+2)  
2578 32 67 ee			ld (debug_mark+2),a  
257b 18 03			jr .pastdmark  
257d ..			.dmark: db "CLL"  
2580 f1			.pastdmark: pop af  
2581			endm  
# End of macro DMARK
2581					CALLMONITOR 
2581 cd 6f ee			call debug_vector  
2584				endm  
# End of macro CALLMONITOR
2584				endif 
2584			 
2584				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2584 cd 95 1d			call macro_dsp_valuehl 
2587				endm 
# End of macro FORTH_DSP_VALUEHL
2587			 
2587			;		push hl 
2587			 
2587				; destroy value TOS 
2587			 
2587				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2587 cd 4d 1e			call macro_forth_dsp_pop 
258a				endm 
# End of macro FORTH_DSP_POP
258a			 
258a					 
258a			;		pop hl 
258a			 
258a				; how to do a call with hl???? save SP? 
258a cd 25 1f			call forth_call_hl 
258d			 
258d			 
258d				; TODO push value back onto stack for another op etc 
258d			 
258d cd 90 1b			call forth_push_numhl 
2590				NEXTW 
2590 c3 81 1f			jp macro_next 
2593				endm 
# End of macro NEXTW
2593			.DEPTH: 
2593			CWHEAD .OVER OPCODE_DEPTH "DEPTH" 5 WORD_FLAG_CODE 
2593 24				db WORD_SYS_CORE+OPCODE_DEPTH             
2594 d0 25			dw .OVER            
2596 06				db 5 + 1 
2597 .. 00			db "DEPTH",0              
259d				endm 
# End of macro CWHEAD
259d			; | DEPTH ( -- u ) Push count of stack | DONE 
259d				; take current TOS and remove from base value div by two to get count 
259d				if DEBUG_FORTH_WORDS_KEY 
259d					DMARK "DEP" 
259d f5				push af  
259e 3a b2 25			ld a, (.dmark)  
25a1 32 65 ee			ld (debug_mark),a  
25a4 3a b3 25			ld a, (.dmark+1)  
25a7 32 66 ee			ld (debug_mark+1),a  
25aa 3a b4 25			ld a, (.dmark+2)  
25ad 32 67 ee			ld (debug_mark+2),a  
25b0 18 03			jr .pastdmark  
25b2 ..			.dmark: db "DEP"  
25b5 f1			.pastdmark: pop af  
25b6			endm  
# End of macro DMARK
25b6					CALLMONITOR 
25b6 cd 6f ee			call debug_vector  
25b9				endm  
# End of macro CALLMONITOR
25b9				endif 
25b9			 
25b9			 
25b9 2a e8 e9		ld hl, (cli_data_sp) 
25bc 11 22 e8		ld de, cli_data_stack 
25bf ed 52		sbc hl,de 
25c1			 
25c1			; div by size of stack item 
25c1			 
25c1 5d			ld e,l 
25c2 0e 03		ld c, 3 
25c4 cd 85 0d		call Div8 
25c7			 
25c7 6f			ld l,a 
25c8 26 00		ld h,0 
25ca			 
25ca			;srl h 
25ca			;rr l 
25ca			 
25ca cd 90 1b			call forth_push_numhl 
25cd				NEXTW 
25cd c3 81 1f			jp macro_next 
25d0				endm 
# End of macro NEXTW
25d0			.OVER: 
25d0			CWHEAD .PAUSE 46 "OVER" 4 WORD_FLAG_CODE 
25d0 42				db WORD_SYS_CORE+46             
25d1 17 26			dw .PAUSE            
25d3 05				db 4 + 1 
25d4 .. 00			db "OVER",0              
25d9				endm 
# End of macro CWHEAD
25d9			; | OVER ( n1 n2 -- n1 n2 n1 )  Copy one below TOS onto TOS | TOFIX 
25d9				if DEBUG_FORTH_WORDS_KEY 
25d9					DMARK "OVR" 
25d9 f5				push af  
25da 3a ee 25			ld a, (.dmark)  
25dd 32 65 ee			ld (debug_mark),a  
25e0 3a ef 25			ld a, (.dmark+1)  
25e3 32 66 ee			ld (debug_mark+1),a  
25e6 3a f0 25			ld a, (.dmark+2)  
25e9 32 67 ee			ld (debug_mark+2),a  
25ec 18 03			jr .pastdmark  
25ee ..			.dmark: db "OVR"  
25f1 f1			.pastdmark: pop af  
25f2			endm  
# End of macro DMARK
25f2					CALLMONITOR 
25f2 cd 6f ee			call debug_vector  
25f5				endm  
# End of macro CALLMONITOR
25f5				endif 
25f5			 
25f5			; TODO Use os stack swap memory 
25f5				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
25f5 cd 95 1d			call macro_dsp_valuehl 
25f8				endm 
# End of macro FORTH_DSP_VALUEHL
25f8 e5				push hl    ; n2 
25f9				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
25f9 cd 4d 1e			call macro_forth_dsp_pop 
25fc				endm 
# End of macro FORTH_DSP_POP
25fc			 
25fc				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
25fc cd 95 1d			call macro_dsp_valuehl 
25ff				endm 
# End of macro FORTH_DSP_VALUEHL
25ff e5				push hl    ; n1 
2600				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2600 cd 4d 1e			call macro_forth_dsp_pop 
2603				endm 
# End of macro FORTH_DSP_POP
2603			 
2603 d1				pop de     ; n1 
2604 e1				pop hl     ; n2 
2605			 
2605 d5				push de 
2606 e5				push hl 
2607 d5				push de 
2608			 
2608				; push back  
2608			 
2608 e1				pop hl 
2609 cd 90 1b			call forth_push_numhl 
260c e1				pop hl 
260d cd 90 1b			call forth_push_numhl 
2610 e1				pop hl 
2611 cd 90 1b			call forth_push_numhl 
2614				NEXTW 
2614 c3 81 1f			jp macro_next 
2617				endm 
# End of macro NEXTW
2617			 
2617			.PAUSE: 
2617			CWHEAD .PAUSES 47 "PAUSEMS" 7 WORD_FLAG_CODE 
2617 43				db WORD_SYS_CORE+47             
2618 4c 26			dw .PAUSES            
261a 08				db 7 + 1 
261b .. 00			db "PAUSEMS",0              
2623				endm 
# End of macro CWHEAD
2623			; | PAUSEMS ( n -- )  Pause for n millisconds | DONE 
2623				if DEBUG_FORTH_WORDS_KEY 
2623					DMARK "PMS" 
2623 f5				push af  
2624 3a 38 26			ld a, (.dmark)  
2627 32 65 ee			ld (debug_mark),a  
262a 3a 39 26			ld a, (.dmark+1)  
262d 32 66 ee			ld (debug_mark+1),a  
2630 3a 3a 26			ld a, (.dmark+2)  
2633 32 67 ee			ld (debug_mark+2),a  
2636 18 03			jr .pastdmark  
2638 ..			.dmark: db "PMS"  
263b f1			.pastdmark: pop af  
263c			endm  
# End of macro DMARK
263c					CALLMONITOR 
263c cd 6f ee			call debug_vector  
263f				endm  
# End of macro CALLMONITOR
263f				endif 
263f				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
263f cd 95 1d			call macro_dsp_valuehl 
2642				endm 
# End of macro FORTH_DSP_VALUEHL
2642			;		push hl    ; n2 
2642				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2642 cd 4d 1e			call macro_forth_dsp_pop 
2645				endm 
# End of macro FORTH_DSP_POP
2645			;		pop hl 
2645			 
2645 7d				ld a, l 
2646 cd e5 0a			call aDelayInMS 
2649			       NEXTW 
2649 c3 81 1f			jp macro_next 
264c				endm 
# End of macro NEXTW
264c			.PAUSES:  
264c			CWHEAD .ROT 48 "PAUSE" 5 WORD_FLAG_CODE 
264c 44				db WORD_SYS_CORE+48             
264d bb 26			dw .ROT            
264f 06				db 5 + 1 
2650 .. 00			db "PAUSE",0              
2656				endm 
# End of macro CWHEAD
2656			; | PAUSE ( n -- )  Pause for n seconds | DONE 
2656				if DEBUG_FORTH_WORDS_KEY 
2656					DMARK "PAU" 
2656 f5				push af  
2657 3a 6b 26			ld a, (.dmark)  
265a 32 65 ee			ld (debug_mark),a  
265d 3a 6c 26			ld a, (.dmark+1)  
2660 32 66 ee			ld (debug_mark+1),a  
2663 3a 6d 26			ld a, (.dmark+2)  
2666 32 67 ee			ld (debug_mark+2),a  
2669 18 03			jr .pastdmark  
266b ..			.dmark: db "PAU"  
266e f1			.pastdmark: pop af  
266f			endm  
# End of macro DMARK
266f					CALLMONITOR 
266f cd 6f ee			call debug_vector  
2672				endm  
# End of macro CALLMONITOR
2672				endif 
2672				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2672 cd 95 1d			call macro_dsp_valuehl 
2675				endm 
# End of macro FORTH_DSP_VALUEHL
2675			;		push hl    ; n2 
2675				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2675 cd 4d 1e			call macro_forth_dsp_pop 
2678				endm 
# End of macro FORTH_DSP_POP
2678			;		pop hl 
2678 45				ld b, l 
2679				if DEBUG_FORTH_WORDS 
2679					DMARK "PAU" 
2679 f5				push af  
267a 3a 8e 26			ld a, (.dmark)  
267d 32 65 ee			ld (debug_mark),a  
2680 3a 8f 26			ld a, (.dmark+1)  
2683 32 66 ee			ld (debug_mark+1),a  
2686 3a 90 26			ld a, (.dmark+2)  
2689 32 67 ee			ld (debug_mark+2),a  
268c 18 03			jr .pastdmark  
268e ..			.dmark: db "PAU"  
2691 f1			.pastdmark: pop af  
2692			endm  
# End of macro DMARK
2692					CALLMONITOR 
2692 cd 6f ee			call debug_vector  
2695				endm  
# End of macro CALLMONITOR
2695				endif 
2695 c5			.pauses1:	push bc 
2696 cd 00 0b			call delay1s 
2699 c1				pop bc 
269a				if DEBUG_FORTH_WORDS 
269a					DMARK "PA1" 
269a f5				push af  
269b 3a af 26			ld a, (.dmark)  
269e 32 65 ee			ld (debug_mark),a  
26a1 3a b0 26			ld a, (.dmark+1)  
26a4 32 66 ee			ld (debug_mark+1),a  
26a7 3a b1 26			ld a, (.dmark+2)  
26aa 32 67 ee			ld (debug_mark+2),a  
26ad 18 03			jr .pastdmark  
26af ..			.dmark: db "PA1"  
26b2 f1			.pastdmark: pop af  
26b3			endm  
# End of macro DMARK
26b3					CALLMONITOR 
26b3 cd 6f ee			call debug_vector  
26b6				endm  
# End of macro CALLMONITOR
26b6				endif 
26b6 10 dd			djnz .pauses1 
26b8			 
26b8			       NEXTW 
26b8 c3 81 1f			jp macro_next 
26bb				endm 
# End of macro NEXTW
26bb			.ROT: 
26bb			CWHEAD .UWORDS 49 "ROT" 3 WORD_FLAG_CODE 
26bb 45				db WORD_SYS_CORE+49             
26bc 09 27			dw .UWORDS            
26be 04				db 3 + 1 
26bf .. 00			db "ROT",0              
26c3				endm 
# End of macro CWHEAD
26c3			; | ROT ( u1 u2 u3 -- u2 u3 u1 ) Rotate top three items on stack | TOFIX 
26c3				if DEBUG_FORTH_WORDS_KEY 
26c3					DMARK "ROT" 
26c3 f5				push af  
26c4 3a d8 26			ld a, (.dmark)  
26c7 32 65 ee			ld (debug_mark),a  
26ca 3a d9 26			ld a, (.dmark+1)  
26cd 32 66 ee			ld (debug_mark+1),a  
26d0 3a da 26			ld a, (.dmark+2)  
26d3 32 67 ee			ld (debug_mark+2),a  
26d6 18 03			jr .pastdmark  
26d8 ..			.dmark: db "ROT"  
26db f1			.pastdmark: pop af  
26dc			endm  
# End of macro DMARK
26dc					CALLMONITOR 
26dc cd 6f ee			call debug_vector  
26df				endm  
# End of macro CALLMONITOR
26df				endif 
26df			 
26df			; TODO Use os stack swap memory 
26df				FORTH_DSP_VALUEHL 
26df cd 95 1d			call macro_dsp_valuehl 
26e2				endm 
# End of macro FORTH_DSP_VALUEHL
26e2 e5				push hl    ; u3  
26e3			 
26e3				FORTH_DSP_POP 
26e3 cd 4d 1e			call macro_forth_dsp_pop 
26e6				endm 
# End of macro FORTH_DSP_POP
26e6			 
26e6				FORTH_DSP_VALUEHL 
26e6 cd 95 1d			call macro_dsp_valuehl 
26e9				endm 
# End of macro FORTH_DSP_VALUEHL
26e9 e5				push hl     ; u2 
26ea			 
26ea				FORTH_DSP_POP 
26ea cd 4d 1e			call macro_forth_dsp_pop 
26ed				endm 
# End of macro FORTH_DSP_POP
26ed			 
26ed				FORTH_DSP_VALUEHL 
26ed cd 95 1d			call macro_dsp_valuehl 
26f0				endm 
# End of macro FORTH_DSP_VALUEHL
26f0 e5				push hl     ; u1 
26f1			 
26f1				FORTH_DSP_POP 
26f1 cd 4d 1e			call macro_forth_dsp_pop 
26f4				endm 
# End of macro FORTH_DSP_POP
26f4			 
26f4 c1				pop bc      ; u1 
26f5 e1				pop hl      ; u2 
26f6 d1				pop de      ; u3 
26f7			 
26f7			 
26f7 c5				push bc 
26f8 d5				push de 
26f9 e5				push hl 
26fa			 
26fa			 
26fa e1				pop hl 
26fb cd 90 1b			call forth_push_numhl 
26fe			 
26fe e1				pop hl 
26ff cd 90 1b			call forth_push_numhl 
2702			 
2702 e1				pop hl 
2703 cd 90 1b			call forth_push_numhl 
2706				 
2706			 
2706			 
2706			 
2706			 
2706			 
2706			       NEXTW 
2706 c3 81 1f			jp macro_next 
2709				endm 
# End of macro NEXTW
2709			 
2709			.UWORDS: 
2709			CWHEAD .BP 60 "UWORDS" 6 WORD_FLAG_CODE 
2709 50				db WORD_SYS_CORE+60             
270a cb 27			dw .BP            
270c 07				db 6 + 1 
270d .. 00			db "UWORDS",0              
2714				endm 
# End of macro CWHEAD
2714			; | UWORDS (  -- s1 ... sn u )   List user word dict | DONE 
2714			; | | After use the TOS will have a count of the number of user words that have been pushed to stack. 
2714			; | | Following the count are the individual words. 
2714			; | | 
2714			; | | e.g. UWORDS 
2714			; | | BOX DIRLIST 2 
2714			; | |  
2714			; | | Can be used to save the words to storage via: 
2714			; | | UWORDS $01 DO $01 APPEND LOOP 
2714			if DEBUG_FORTH_WORDS_KEY 
2714				DMARK "UWR" 
2714 f5				push af  
2715 3a 29 27			ld a, (.dmark)  
2718 32 65 ee			ld (debug_mark),a  
271b 3a 2a 27			ld a, (.dmark+1)  
271e 32 66 ee			ld (debug_mark+1),a  
2721 3a 2b 27			ld a, (.dmark+2)  
2724 32 67 ee			ld (debug_mark+2),a  
2727 18 03			jr .pastdmark  
2729 ..			.dmark: db "UWR"  
272c f1			.pastdmark: pop af  
272d			endm  
# End of macro DMARK
272d				CALLMONITOR 
272d cd 6f ee			call debug_vector  
2730				endm  
# End of macro CALLMONITOR
2730			endif 
2730 21 e2 5e			ld hl, baseram 
2733				;ld hl, baseusermem 
2733 01 00 00			ld bc, 0    ; start a counter 
2736			 
2736			; skip dict stub 
2736			 
2736 cd d2 20			call forth_tok_next 
2739			 
2739			 
2739			; while we have words to look for 
2739			 
2739 7e			.douscan:	ld a, (hl)      
273a			if DEBUG_FORTH_WORDS 
273a				DMARK "UWs" 
273a f5				push af  
273b 3a 4f 27			ld a, (.dmark)  
273e 32 65 ee			ld (debug_mark),a  
2741 3a 50 27			ld a, (.dmark+1)  
2744 32 66 ee			ld (debug_mark+1),a  
2747 3a 51 27			ld a, (.dmark+2)  
274a 32 67 ee			ld (debug_mark+2),a  
274d 18 03			jr .pastdmark  
274f ..			.dmark: db "UWs"  
2752 f1			.pastdmark: pop af  
2753			endm  
# End of macro DMARK
2753				CALLMONITOR 
2753 cd 6f ee			call debug_vector  
2756				endm  
# End of macro CALLMONITOR
2756			endif 
2756 fe 00			cp WORD_SYS_END 
2758 28 4d			jr z, .udone 
275a fe 01			cp WORD_SYS_UWORD 
275c 20 44			jr nz, .nuword 
275e			 
275e			if DEBUG_FORTH_WORDS 
275e				DMARK "UWu" 
275e f5				push af  
275f 3a 73 27			ld a, (.dmark)  
2762 32 65 ee			ld (debug_mark),a  
2765 3a 74 27			ld a, (.dmark+1)  
2768 32 66 ee			ld (debug_mark+1),a  
276b 3a 75 27			ld a, (.dmark+2)  
276e 32 67 ee			ld (debug_mark+2),a  
2771 18 03			jr .pastdmark  
2773 ..			.dmark: db "UWu"  
2776 f1			.pastdmark: pop af  
2777			endm  
# End of macro DMARK
2777				CALLMONITOR 
2777 cd 6f ee			call debug_vector  
277a				endm  
# End of macro CALLMONITOR
277a			endif 
277a				; we have a uword so push its name to the stack 
277a			 
277a e5				push hl  ; save so we can move to next dict block 
277b			 
277b				; skip opcode 
277b 23				inc hl  
277c				; skip next ptr 
277c 23				inc hl  
277d 23				inc hl 
277e				; skip len 
277e 23				inc hl 
277f			if DEBUG_FORTH_WORDS 
277f				DMARK "UWt" 
277f f5				push af  
2780 3a 94 27			ld a, (.dmark)  
2783 32 65 ee			ld (debug_mark),a  
2786 3a 95 27			ld a, (.dmark+1)  
2789 32 66 ee			ld (debug_mark+1),a  
278c 3a 96 27			ld a, (.dmark+2)  
278f 32 67 ee			ld (debug_mark+2),a  
2792 18 03			jr .pastdmark  
2794 ..			.dmark: db "UWt"  
2797 f1			.pastdmark: pop af  
2798			endm  
# End of macro DMARK
2798				CALLMONITOR 
2798 cd 6f ee			call debug_vector  
279b				endm  
# End of macro CALLMONITOR
279b			endif 
279b 03				inc bc 
279c			 
279c c5				push bc 
279d cd fe 1b			call forth_push_str 
27a0 c1				pop bc 
27a1			 
27a1 e1				pop hl 	 
27a2			 
27a2 cd d2 20		.nuword:	call forth_tok_next 
27a5 18 92			jr .douscan  
27a7			 
27a7			.udone:		 ; push count of uwords found 
27a7 c5				push bc 
27a8 e1				pop hl 
27a9			 
27a9			if DEBUG_FORTH_WORDS 
27a9				DMARK "UWc" 
27a9 f5				push af  
27aa 3a be 27			ld a, (.dmark)  
27ad 32 65 ee			ld (debug_mark),a  
27b0 3a bf 27			ld a, (.dmark+1)  
27b3 32 66 ee			ld (debug_mark+1),a  
27b6 3a c0 27			ld a, (.dmark+2)  
27b9 32 67 ee			ld (debug_mark+2),a  
27bc 18 03			jr .pastdmark  
27be ..			.dmark: db "UWc"  
27c1 f1			.pastdmark: pop af  
27c2			endm  
# End of macro DMARK
27c2				CALLMONITOR 
27c2 cd 6f ee			call debug_vector  
27c5				endm  
# End of macro CALLMONITOR
27c5			endif 
27c5 cd 90 1b			call forth_push_numhl 
27c8			 
27c8			 
27c8			       NEXTW 
27c8 c3 81 1f			jp macro_next 
27cb				endm 
# End of macro NEXTW
27cb			 
27cb			.BP: 
27cb			CWHEAD .MONITOR 64 "BP" 2 WORD_FLAG_CODE 
27cb 54				db WORD_SYS_CORE+64             
27cc 05 28			dw .MONITOR            
27ce 03				db 2 + 1 
27cf .. 00			db "BP",0              
27d2				endm 
# End of macro CWHEAD
27d2			; | BP ( u1 -- ) Enable or disable break point monitoring | DONE 
27d2			; | | $00 Will enable the break points within specific code paths 
27d2			; | | $01 Will disable break points 
27d2			; | |  
27d2			; | | By default break points are off. Either the above can be used to enable them 
27d2			; | | or if a key is held down during start up the spashscreen will appear to freeze 
27d2			; | | and on release of the pressed key the CONFIG menu will be displayed where you 
27d2			; | | can disable break points. Exiting will then continue boot process. 
27d2				; get byte count 
27d2				if DEBUG_FORTH_WORDS_KEY 
27d2					DMARK "BP." 
27d2 f5				push af  
27d3 3a e7 27			ld a, (.dmark)  
27d6 32 65 ee			ld (debug_mark),a  
27d9 3a e8 27			ld a, (.dmark+1)  
27dc 32 66 ee			ld (debug_mark+1),a  
27df 3a e9 27			ld a, (.dmark+2)  
27e2 32 67 ee			ld (debug_mark+2),a  
27e5 18 03			jr .pastdmark  
27e7 ..			.dmark: db "BP."  
27ea f1			.pastdmark: pop af  
27eb			endm  
# End of macro DMARK
27eb					CALLMONITOR 
27eb cd 6f ee			call debug_vector  
27ee				endm  
# End of macro CALLMONITOR
27ee				endif 
27ee			 
27ee				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
27ee cd 95 1d			call macro_dsp_valuehl 
27f1				endm 
# End of macro FORTH_DSP_VALUEHL
27f1			 
27f1			;		push hl 
27f1			 
27f1				; destroy value TOS 
27f1			 
27f1				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
27f1 cd 4d 1e			call macro_forth_dsp_pop 
27f4				endm 
# End of macro FORTH_DSP_POP
27f4			 
27f4			;		pop hl 
27f4			 
27f4 3e 00			ld a,0 
27f6 bd				cp l 
27f7 28 06			jr z, .bpset 
27f9			;		ld a, '*' 
27f9 cd 0b 15			call bp_off 
27fc				NEXTW 
27fc c3 81 1f			jp macro_next 
27ff				endm 
# End of macro NEXTW
27ff			 
27ff			.bpset:	 
27ff				;	ld (os_view_disable), a 
27ff cd ff 14			call bp_on 
2802			 
2802			 
2802				NEXTW 
2802 c3 81 1f			jp macro_next 
2805				endm 
# End of macro NEXTW
2805			 
2805			 
2805			.MONITOR: 
2805			CWHEAD .MALLOC 65 "MONITOR" 7 WORD_FLAG_CODE 
2805 55				db WORD_SYS_CORE+65             
2806 36 28			dw .MALLOC            
2808 08				db 7 + 1 
2809 .. 00			db "MONITOR",0              
2811				endm 
# End of macro CWHEAD
2811			; | MONITOR ( -- ) Display system breakpoint/monitor | DONE 
2811			; | | At start the current various registers will be displayed with contents. 
2811			; | | Top right corner will show the most recent debug marker seen. 
2811			; | | The bottom of the screen will also show the values of the data stack pointer (DSP) 
2811			; | | and the return stack pointer (RSP). 
2811			; | | Pressing: 
2811			; | |    1 - Initial screen 
2811			; | |    2 - Display a data dump of HL 
2811			; | |    3 - Display a data dump of DE 
2811			; | |    4 - Display a data dump of BC 
2811			; | |    5 - Display a data dump of HL 
2811			; | |    6 - Display a data dump of DSP 
2811			; | |    7 - Display a data dump of RSP 
2811			; | |    8 - Display a data dump of what is at DSP 
2811			; | |    9 - Display a data dump of what is at RSP 
2811			; | |    0 - Exit monitor and continue running. This will also enable break points 
2811			; | |    * - Disable break points 
2811			; | |    # - Enter traditional monitor mode 
2811			; | | 
2811			; | | Monitor Mode 
2811			; | | ------------ 
2811			; | | A prompt of '>' will be shown for various commands: 
2811			; | |    D xxxx - Display a data dump starting from hex address xxxx 
2811			; | |    C - Continue display a data dump from the last set address 
2811			; | |    M xxxx - Set start of memory edit at address xx 
2811			; | |    U xx - Poke the hex byte xx into the address set by M and increment the address to the next location 
2811			; | |    G xxxx - Exec code at specific address 
2811			; | |    Q - Return to previous 
2811				if DEBUG_FORTH_WORDS_KEY 
2811					DMARK "MON" 
2811 f5				push af  
2812 3a 26 28			ld a, (.dmark)  
2815 32 65 ee			ld (debug_mark),a  
2818 3a 27 28			ld a, (.dmark+1)  
281b 32 66 ee			ld (debug_mark+1),a  
281e 3a 28 28			ld a, (.dmark+2)  
2821 32 67 ee			ld (debug_mark+2),a  
2824 18 03			jr .pastdmark  
2826 ..			.dmark: db "MON"  
2829 f1			.pastdmark: pop af  
282a			endm  
# End of macro DMARK
282a					CALLMONITOR 
282a cd 6f ee			call debug_vector  
282d				endm  
# End of macro CALLMONITOR
282d				endif 
282d			;		ld a, 0 
282d			;		ld (os_view_disable), a 
282d cd ff 14			call bp_on 
2830			 
2830				CALLMONITOR 
2830 cd 6f ee			call debug_vector  
2833				endm  
# End of macro CALLMONITOR
2833			 
2833			;	call monitor 
2833			 
2833				NEXTW 
2833 c3 81 1f			jp macro_next 
2836				endm 
# End of macro NEXTW
2836			 
2836			 
2836			.MALLOC: 
2836			CWHEAD .MALLOC2 66 "ALLOT" 5 WORD_FLAG_CODE 
2836 56				db WORD_SYS_CORE+66             
2837 5f 28			dw .MALLOC2            
2839 06				db 5 + 1 
283a .. 00			db "ALLOT",0              
2840				endm 
# End of macro CWHEAD
2840			; | ALLOT ( u -- u ) Allocate u bytes of memory space and push the pointer TOS  | DONE 
2840				if DEBUG_FORTH_WORDS_KEY 
2840					DMARK "ALL" 
2840 f5				push af  
2841 3a 55 28			ld a, (.dmark)  
2844 32 65 ee			ld (debug_mark),a  
2847 3a 56 28			ld a, (.dmark+1)  
284a 32 66 ee			ld (debug_mark+1),a  
284d 3a 57 28			ld a, (.dmark+2)  
2850 32 67 ee			ld (debug_mark+2),a  
2853 18 03			jr .pastdmark  
2855 ..			.dmark: db "ALL"  
2858 f1			.pastdmark: pop af  
2859			endm  
# End of macro DMARK
2859					CALLMONITOR 
2859 cd 6f ee			call debug_vector  
285c				endm  
# End of macro CALLMONITOR
285c				endif 
285c c3 86 28			jp .mallocc 
285f			.MALLOC2: 
285f			CWHEAD .FREE 66 "MALLOC" 6 WORD_FLAG_CODE 
285f 56				db WORD_SYS_CORE+66             
2860 9d 28			dw .FREE            
2862 07				db 6 + 1 
2863 .. 00			db "MALLOC",0              
286a				endm 
# End of macro CWHEAD
286a			; | MALLOC ( u -- u ) Allocate u bytes of memory space and push the pointer TOS  | DONE 
286a				; get byte count 
286a				if DEBUG_FORTH_WORDS_KEY 
286a					DMARK "MAL" 
286a f5				push af  
286b 3a 7f 28			ld a, (.dmark)  
286e 32 65 ee			ld (debug_mark),a  
2871 3a 80 28			ld a, (.dmark+1)  
2874 32 66 ee			ld (debug_mark+1),a  
2877 3a 81 28			ld a, (.dmark+2)  
287a 32 67 ee			ld (debug_mark+2),a  
287d 18 03			jr .pastdmark  
287f ..			.dmark: db "MAL"  
2882 f1			.pastdmark: pop af  
2883			endm  
# End of macro DMARK
2883					CALLMONITOR 
2883 cd 6f ee			call debug_vector  
2886				endm  
# End of macro CALLMONITOR
2886				endif 
2886			.mallocc: 
2886				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2886 cd 95 1d			call macro_dsp_valuehl 
2889				endm 
# End of macro FORTH_DSP_VALUEHL
2889			 
2889			;		push hl 
2889			 
2889				; destroy value TOS 
2889			 
2889				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2889 cd 4d 1e			call macro_forth_dsp_pop 
288c				endm 
# End of macro FORTH_DSP_POP
288c			 
288c			;		pop hl 
288c cd d0 11			call malloc 
288f			if DEBUG_FORTH_MALLOC_GUARD 
288f f5				push af 
2890 cd 1e 0e			call ishlzero 
2893			;		ld a, l 
2893			;		add h 
2893			;		cp 0 
2893 f1				pop af 
2894				 
2894 cc 4d 4d			call z,malloc_error 
2897			endif 
2897			 
2897 cd 90 1b			call forth_push_numhl 
289a				NEXTW 
289a c3 81 1f			jp macro_next 
289d				endm 
# End of macro NEXTW
289d			 
289d			.FREE: 
289d			CWHEAD .LIST 67 "FREE" 4 WORD_FLAG_CODE 
289d 57				db WORD_SYS_CORE+67             
289e ce 28			dw .LIST            
28a0 05				db 4 + 1 
28a1 .. 00			db "FREE",0              
28a6				endm 
# End of macro CWHEAD
28a6			; | FREE ( u --  ) Free memory block from malloc given u address  | DONE 
28a6				if DEBUG_FORTH_WORDS_KEY 
28a6					DMARK "FRE" 
28a6 f5				push af  
28a7 3a bb 28			ld a, (.dmark)  
28aa 32 65 ee			ld (debug_mark),a  
28ad 3a bc 28			ld a, (.dmark+1)  
28b0 32 66 ee			ld (debug_mark+1),a  
28b3 3a bd 28			ld a, (.dmark+2)  
28b6 32 67 ee			ld (debug_mark+2),a  
28b9 18 03			jr .pastdmark  
28bb ..			.dmark: db "FRE"  
28be f1			.pastdmark: pop af  
28bf			endm  
# End of macro DMARK
28bf					CALLMONITOR 
28bf cd 6f ee			call debug_vector  
28c2				endm  
# End of macro CALLMONITOR
28c2				endif 
28c2				; get address 
28c2			 
28c2				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
28c2 cd 95 1d			call macro_dsp_valuehl 
28c5				endm 
# End of macro FORTH_DSP_VALUEHL
28c5			 
28c5			;		push hl 
28c5			 
28c5				; destroy value TOS 
28c5			 
28c5				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
28c5 cd 4d 1e			call macro_forth_dsp_pop 
28c8				endm 
# End of macro FORTH_DSP_POP
28c8			 
28c8			;		pop hl 
28c8			if FORTH_ENABLE_MALLOCFREE 
28c8 cd 9a 12			call free 
28cb			endif 
28cb				NEXTW 
28cb c3 81 1f			jp macro_next 
28ce				endm 
# End of macro NEXTW
28ce			.LIST: 
28ce			CWHEAD .FORGET 72 "LIST" 4 WORD_FLAG_CODE 
28ce 5c				db WORD_SYS_CORE+72             
28cf ca 2a			dw .FORGET            
28d1 05				db 4 + 1 
28d2 .. 00			db "LIST",0              
28d7				endm 
# End of macro CWHEAD
28d7			; | LIST ( uword -- u )    List the code to the word that is quoted (so as not to exec) on TOS | DONE 
28d7			; | | The quoted word must be in upper case. 
28d7			if DEBUG_FORTH_WORDS_KEY 
28d7				DMARK "LST" 
28d7 f5				push af  
28d8 3a ec 28			ld a, (.dmark)  
28db 32 65 ee			ld (debug_mark),a  
28de 3a ed 28			ld a, (.dmark+1)  
28e1 32 66 ee			ld (debug_mark+1),a  
28e4 3a ee 28			ld a, (.dmark+2)  
28e7 32 67 ee			ld (debug_mark+2),a  
28ea 18 03			jr .pastdmark  
28ec ..			.dmark: db "LST"  
28ef f1			.pastdmark: pop af  
28f0			endm  
# End of macro DMARK
28f0				CALLMONITOR 
28f0 cd 6f ee			call debug_vector  
28f3				endm  
# End of macro CALLMONITOR
28f3			endif 
28f3			 
28f3				FORTH_DSP_VALUEHL 
28f3 cd 95 1d			call macro_dsp_valuehl 
28f6				endm 
# End of macro FORTH_DSP_VALUEHL
28f6			 
28f6 e5				push hl 
28f7				FORTH_DSP_POP 
28f7 cd 4d 1e			call macro_forth_dsp_pop 
28fa				endm 
# End of macro FORTH_DSP_POP
28fa c1				pop bc 
28fb			 
28fb			; Start format of scratch string 
28fb			 
28fb 21 bb e2			ld hl, scratch 
28fe			 
28fe 3e 3a			ld a, ':' 
2900 77				ld (hl),a 
2901 23				inc hl 
2902 3e 20			ld a, ' ' 
2904 77				ld (hl), a 
2905			 
2905				; Get ptr to the word we need to look up 
2905			 
2905			;		FORTH_DSP_VALUEHL 
2905				;v5 FORTH_DSP_VALUE 
2905			; TODO type check 
2905			;		inc hl    ; Skip type check  
2905			;		push hl 
2905			;		ex de, hl    ; put into DE 
2905			 
2905			 
2905 21 e2 5e			ld hl, baseram 
2908				;ld hl, baseusermem 
2908			 
2908 e5			push hl   ; sacreifical push 
2909			 
2909			.ldouscanm: 
2909 e1			pop hl 
290a			.ldouscan: 
290a			if DEBUG_FORTH_WORDS 
290a				DMARK "LSs" 
290a f5				push af  
290b 3a 1f 29			ld a, (.dmark)  
290e 32 65 ee			ld (debug_mark),a  
2911 3a 20 29			ld a, (.dmark+1)  
2914 32 66 ee			ld (debug_mark+1),a  
2917 3a 21 29			ld a, (.dmark+2)  
291a 32 67 ee			ld (debug_mark+2),a  
291d 18 03			jr .pastdmark  
291f ..			.dmark: db "LSs"  
2922 f1			.pastdmark: pop af  
2923			endm  
# End of macro DMARK
2923				CALLMONITOR 
2923 cd 6f ee			call debug_vector  
2926				endm  
# End of macro CALLMONITOR
2926			endif 
2926			; skip dict stub 
2926 cd d2 20			call forth_tok_next 
2929			 
2929			 
2929			; while we have words to look for 
2929			 
2929 7e			ld a, (hl)      
292a			if DEBUG_FORTH_WORDS 
292a				DMARK "LSk" 
292a f5				push af  
292b 3a 3f 29			ld a, (.dmark)  
292e 32 65 ee			ld (debug_mark),a  
2931 3a 40 29			ld a, (.dmark+1)  
2934 32 66 ee			ld (debug_mark+1),a  
2937 3a 41 29			ld a, (.dmark+2)  
293a 32 67 ee			ld (debug_mark+2),a  
293d 18 03			jr .pastdmark  
293f ..			.dmark: db "LSk"  
2942 f1			.pastdmark: pop af  
2943			endm  
# End of macro DMARK
2943				CALLMONITOR 
2943 cd 6f ee			call debug_vector  
2946				endm  
# End of macro CALLMONITOR
2946			endif 
2946				;cp WORD_SYS_END 
2946				;jp z, .lunotfound 
2946			 
2946					; if we hit non uwords then gone too far 
2946 fe 01				cp WORD_SYS_UWORD 
2948 c2 86 2a				jp nz, .lunotfound 
294b			 
294b				if DEBUG_FORTH_WORDS 
294b					DMARK "LSu" 
294b f5				push af  
294c 3a 60 29			ld a, (.dmark)  
294f 32 65 ee			ld (debug_mark),a  
2952 3a 61 29			ld a, (.dmark+1)  
2955 32 66 ee			ld (debug_mark+1),a  
2958 3a 62 29			ld a, (.dmark+2)  
295b 32 67 ee			ld (debug_mark+2),a  
295e 18 03			jr .pastdmark  
2960 ..			.dmark: db "LSu"  
2963 f1			.pastdmark: pop af  
2964			endm  
# End of macro DMARK
2964					CALLMONITOR 
2964 cd 6f ee			call debug_vector  
2967				endm  
# End of macro CALLMONITOR
2967				endif 
2967			 
2967					; found a uword but is it the one we want... 
2967			 
2967 c5					push bc     ; uword to find is on bc 
2968 d1					pop de 
2969			 
2969 e5					push hl  ; to save the ptr 
296a			 
296a					; skip opcode 
296a 23					inc hl  
296b					; skip next ptr 
296b 23					inc hl  
296c 23					inc hl 
296d					; skip len 
296d 23					inc hl 
296e			 
296e				if DEBUG_FORTH_WORDS 
296e					DMARK "LSc" 
296e f5				push af  
296f 3a 83 29			ld a, (.dmark)  
2972 32 65 ee			ld (debug_mark),a  
2975 3a 84 29			ld a, (.dmark+1)  
2978 32 66 ee			ld (debug_mark+1),a  
297b 3a 85 29			ld a, (.dmark+2)  
297e 32 67 ee			ld (debug_mark+2),a  
2981 18 03			jr .pastdmark  
2983 ..			.dmark: db "LSc"  
2986 f1			.pastdmark: pop af  
2987			endm  
# End of macro DMARK
2987					CALLMONITOR 
2987 cd 6f ee			call debug_vector  
298a				endm  
# End of macro CALLMONITOR
298a				endif 
298a			; was exiting on the shorter of the words. swap and test is in favour of the longer word. 
298a			; ie. If WOO is defined first and then WO. Couldnt list WO. 
298a			; Nope that has gone the other way. It needs to be exact not on first zero 
298a			;		call strcmp 
298a c5					push bc 
298b cd a0 11				call StrictStrCmp 
298e c1					pop bc 
298f c2 09 29				jp nz, .ldouscanm 
2992				 
2992			 
2992			 
2992					; we have a uword so push its name to the stack 
2992			 
2992			;	   	push hl  ; save so we can move to next dict block 
2992 e1			pop hl 
2993			 
2993				if DEBUG_FORTH_WORDS 
2993					DMARK "LSm" 
2993 f5				push af  
2994 3a a8 29			ld a, (.dmark)  
2997 32 65 ee			ld (debug_mark),a  
299a 3a a9 29			ld a, (.dmark+1)  
299d 32 66 ee			ld (debug_mark+1),a  
29a0 3a aa 29			ld a, (.dmark+2)  
29a3 32 67 ee			ld (debug_mark+2),a  
29a6 18 03			jr .pastdmark  
29a8 ..			.dmark: db "LSm"  
29ab f1			.pastdmark: pop af  
29ac			endm  
# End of macro DMARK
29ac					CALLMONITOR 
29ac cd 6f ee			call debug_vector  
29af				endm  
# End of macro CALLMONITOR
29af				endif 
29af			 
29af					; skip opcode 
29af 23					inc hl  
29b0					; skip next ptr 
29b0 23					inc hl  
29b1 23					inc hl 
29b2					; skip len 
29b2 7e					ld a, (hl)   ; save length to add 
29b3				if DEBUG_FORTH_WORDS 
29b3					DMARK "LS2" 
29b3 f5				push af  
29b4 3a c8 29			ld a, (.dmark)  
29b7 32 65 ee			ld (debug_mark),a  
29ba 3a c9 29			ld a, (.dmark+1)  
29bd 32 66 ee			ld (debug_mark+1),a  
29c0 3a ca 29			ld a, (.dmark+2)  
29c3 32 67 ee			ld (debug_mark+2),a  
29c6 18 03			jr .pastdmark  
29c8 ..			.dmark: db "LS2"  
29cb f1			.pastdmark: pop af  
29cc			endm  
# End of macro DMARK
29cc					CALLMONITOR 
29cc cd 6f ee			call debug_vector  
29cf				endm  
# End of macro CALLMONITOR
29cf				endif 
29cf			 
29cf					; save this location 
29cf				 
29cf e5					push hl 
29d0			 
29d0 23					inc hl 
29d1 11 bd e2				ld de, scratch+2 
29d4 4f					ld c, a 
29d5 06 00				ld b, 0 
29d7			 
29d7				if DEBUG_FORTH_WORDS 
29d7					DMARK "LSn" 
29d7 f5				push af  
29d8 3a ec 29			ld a, (.dmark)  
29db 32 65 ee			ld (debug_mark),a  
29de 3a ed 29			ld a, (.dmark+1)  
29e1 32 66 ee			ld (debug_mark+1),a  
29e4 3a ee 29			ld a, (.dmark+2)  
29e7 32 67 ee			ld (debug_mark+2),a  
29ea 18 03			jr .pastdmark  
29ec ..			.dmark: db "LSn"  
29ef f1			.pastdmark: pop af  
29f0			endm  
# End of macro DMARK
29f0					CALLMONITOR 
29f0 cd 6f ee			call debug_vector  
29f3				endm  
# End of macro CALLMONITOR
29f3				endif 
29f3			 
29f3					; copy uword name to scratch 
29f3			 
29f3			;		ldir 
29f3			.licplw:	; copy uword name to scratch converting to lower case as we go 
29f3 ed a0				ldi 
29f5 1b					dec de 
29f6 1a					ld a, (de) 
29f7 cd 73 10				call to_lower 
29fa 12					ld (de),a 
29fb 13					inc de 
29fc 3e 00				ld a, 0 
29fe b9					cp c 
29ff 20 f2				jr nz, .licplw 
2a01			 
2a01			 
2a01			 
2a01 1b					dec de 
2a02 3e 20				ld a, ' '    ; change null to space 
2a04 12					ld (de), a 
2a05			 
2a05 13					inc de 
2a06			 
2a06 d5					push de 
2a07 c1					pop bc     ; move scratch pointer to end of word name and save it 
2a08			 
2a08 e1					pop hl 
2a09 7e					ld a, (hl) 
2a0a					;inc hl 
2a0a					; skip word string 
2a0a cd f5 0d				call addatohl 
2a0d			 
2a0d 23					inc hl 
2a0e			 
2a0e				if DEBUG_FORTH_WORDS 
2a0e					DMARK "LS3" 
2a0e f5				push af  
2a0f 3a 23 2a			ld a, (.dmark)  
2a12 32 65 ee			ld (debug_mark),a  
2a15 3a 24 2a			ld a, (.dmark+1)  
2a18 32 66 ee			ld (debug_mark+1),a  
2a1b 3a 25 2a			ld a, (.dmark+2)  
2a1e 32 67 ee			ld (debug_mark+2),a  
2a21 18 03			jr .pastdmark  
2a23 ..			.dmark: db "LS3"  
2a26 f1			.pastdmark: pop af  
2a27			endm  
# End of macro DMARK
2a27					CALLMONITOR 
2a27 cd 6f ee			call debug_vector  
2a2a				endm  
# End of macro CALLMONITOR
2a2a				endif 
2a2a					; should now be at the start of the machine code to setup the eval of the uword 
2a2a					; now locate the ptr to the string defintion 
2a2a			 
2a2a					; skip ld hl, 
2a2a					; then load the ptr 
2a2a			; TODO use get from hl ptr 
2a2a 23					inc hl 
2a2b 5e					ld e, (hl) 
2a2c 23					inc hl 
2a2d 56					ld d, (hl) 
2a2e eb					ex de, hl 
2a2f			 
2a2f			 
2a2f				if DEBUG_FORTH_WORDS 
2a2f					DMARK "LSt" 
2a2f f5				push af  
2a30 3a 44 2a			ld a, (.dmark)  
2a33 32 65 ee			ld (debug_mark),a  
2a36 3a 45 2a			ld a, (.dmark+1)  
2a39 32 66 ee			ld (debug_mark+1),a  
2a3c 3a 46 2a			ld a, (.dmark+2)  
2a3f 32 67 ee			ld (debug_mark+2),a  
2a42 18 03			jr .pastdmark  
2a44 ..			.dmark: db "LSt"  
2a47 f1			.pastdmark: pop af  
2a48			endm  
# End of macro DMARK
2a48					CALLMONITOR 
2a48 cd 6f ee			call debug_vector  
2a4b				endm  
# End of macro CALLMONITOR
2a4b				endif 
2a4b			 
2a4b			; cant push right now due to tokenised strings  
2a4b			 
2a4b			; get the destination of where to copy this definition to. 
2a4b			 
2a4b c5					push bc 
2a4c d1					pop de 
2a4d			 
2a4d 7e			.listl:         ld a,(hl) 
2a4e fe 00				cp 0 
2a50 28 09				jr z, .lreplsp     ; replace zero with space 
2a52					;cp FORTH_END_BUFFER 
2a52 fe 3b				cp ';'    ; No end buffer flag but the ';' will be a good sign of the end of definition 
2a54 28 0a				jr z, .listdone    ; at end of uword defination to close of scratch and finish 
2a56				 
2a56					; just copy this char as is then 
2a56			 
2a56 12					ld (de), a 
2a57			 
2a57 23			.listnxt:	inc hl 
2a58 13					inc de 
2a59 18 f2				jr .listl 
2a5b			 
2a5b 3e 20		.lreplsp:	ld a,' ' 
2a5d 12					ld (de), a 
2a5e 18 f7				jr .listnxt 
2a60			 
2a60			; close up uword def 
2a60			 
2a60			.listdone: 
2a60 12					ld (de), a 
2a61 13					inc de 
2a62 3e 00				ld a, 0 
2a64 12					ld (de), a 
2a65			 
2a65			; now have def so clean up and push to stack 
2a65			 
2a65 21 bb e2				ld hl, scratch 
2a68				if DEBUG_FORTH_WORDS 
2a68					DMARK "Ltp" 
2a68 f5				push af  
2a69 3a 7d 2a			ld a, (.dmark)  
2a6c 32 65 ee			ld (debug_mark),a  
2a6f 3a 7e 2a			ld a, (.dmark+1)  
2a72 32 66 ee			ld (debug_mark+1),a  
2a75 3a 7f 2a			ld a, (.dmark+2)  
2a78 32 67 ee			ld (debug_mark+2),a  
2a7b 18 03			jr .pastdmark  
2a7d ..			.dmark: db "Ltp"  
2a80 f1			.pastdmark: pop af  
2a81			endm  
# End of macro DMARK
2a81					CALLMONITOR 
2a81 cd 6f ee			call debug_vector  
2a84				endm  
# End of macro CALLMONITOR
2a84				endif 
2a84			 
2a84 18 1f			jr .listpush 
2a86			 
2a86			;.lnuword:	pop hl 
2a86			;		call forth_tok_next 
2a86			;		jp .ldouscan  
2a86			 
2a86			.lunotfound:		  
2a86			 
2a86				if DEBUG_FORTH_WORDS 
2a86					DMARK "LSn" 
2a86 f5				push af  
2a87 3a 9b 2a			ld a, (.dmark)  
2a8a 32 65 ee			ld (debug_mark),a  
2a8d 3a 9c 2a			ld a, (.dmark+1)  
2a90 32 66 ee			ld (debug_mark+1),a  
2a93 3a 9d 2a			ld a, (.dmark+2)  
2a96 32 67 ee			ld (debug_mark+2),a  
2a99 18 03			jr .pastdmark  
2a9b ..			.dmark: db "LSn"  
2a9e f1			.pastdmark: pop af  
2a9f			endm  
# End of macro DMARK
2a9f					CALLMONITOR 
2a9f cd 6f ee			call debug_vector  
2aa2				endm  
# End of macro CALLMONITOR
2aa2				endif 
2aa2			 
2aa2					 
2aa2			;		FORTH_DSP_POP 
2aa2			;		ld hl, .luno 
2aa2			 
2aa2					NEXTW			 
2aa2 c3 81 1f			jp macro_next 
2aa5				endm 
# End of macro NEXTW
2aa5			 
2aa5			.listpush: 
2aa5				if DEBUG_FORTH_WORDS 
2aa5					DMARK "LS>" 
2aa5 f5				push af  
2aa6 3a ba 2a			ld a, (.dmark)  
2aa9 32 65 ee			ld (debug_mark),a  
2aac 3a bb 2a			ld a, (.dmark+1)  
2aaf 32 66 ee			ld (debug_mark+1),a  
2ab2 3a bc 2a			ld a, (.dmark+2)  
2ab5 32 67 ee			ld (debug_mark+2),a  
2ab8 18 03			jr .pastdmark  
2aba ..			.dmark: db "LS>"  
2abd f1			.pastdmark: pop af  
2abe			endm  
# End of macro DMARK
2abe					CALLMONITOR 
2abe cd 6f ee			call debug_vector  
2ac1				endm  
# End of macro CALLMONITOR
2ac1				endif 
2ac1 cd fe 1b				call forth_push_str 
2ac4			 
2ac4			 
2ac4			 
2ac4					NEXTW 
2ac4 c3 81 1f			jp macro_next 
2ac7				endm 
# End of macro NEXTW
2ac7			 
2ac7			;.luno:    db "Word not found",0 
2ac7			 
2ac7			 
2ac7			 
2ac7			 
2ac7			 
2ac7			;		push hl   ; save pointer to start of uword def string 
2ac7			; 
2ac7			;; look for FORTH_EOL_LINE 
2ac7			;		ld a, FORTH_END_BUFFER 
2ac7			;		call strlent 
2ac7			; 
2ac7			;		inc hl		 ; space for coln def 
2ac7			;		inc hl 
2ac7			;		inc hl          ; space for terms 
2ac7			;		inc hl 
2ac7			; 
2ac7			;		ld a, 20   ; TODO get actual length 
2ac7			;		call addatohl    ; include a random amount of room for the uword name 
2ac7			; 
2ac7			;		 
2ac7			;	if DEBUG_FORTH_WORDS 
2ac7			;		DMARK "Lt1" 
2ac7			;		CALLMONITOR 
2ac7			;	endif 
2ac7			;		 
2ac7			; 
2ac7			;; malloc space for the string because we cant change it 
2ac7			; 
2ac7			;		call malloc 
2ac7			;	if DEBUG_FORTH_MALLOC_GUARD 
2ac7			;		push af 
2ac7			;		call ishlzero 
2ac7			;		pop af 
2ac7			;		 
2ac7			;		call z,malloc_error 
2ac7			;	endif 
2ac7			; 
2ac7			;	if DEBUG_FORTH_WORDS 
2ac7			;		DMARK "Lt2" 
2ac7			;		CALLMONITOR 
2ac7			;	endif 
2ac7			;		pop de 
2ac7			;		push hl    ; push the malloc to release later 
2ac7			;		push hl   ;  push back a copy for the later stack push 
2ac7			;		 
2ac7			;; copy the string swapping out the zero terms for spaces 
2ac7			; 
2ac7			;		; de has our source 
2ac7			;		; hl has our dest 
2ac7			; 
2ac7			;; add the coln def 
2ac7			; 
2ac7			;		ld a, ':' 
2ac7			;		ld (hl), a 
2ac7			;		inc hl 
2ac7			;		ld a, ' ' 
2ac7			;		ld (hl), a 
2ac7			;		inc hl 
2ac7			; 
2ac7			;; add the uname word 
2ac7			;		push de   ; save our string for now 
2ac7			;		ex de, hl 
2ac7			; 
2ac7			;		FORTH_DSP_VALUE 
2ac7			;		;v5 FORTH_DSP_VALUE 
2ac7			; 
2ac7			;		inc hl   ; skip type but we know by now this is OK 
2ac7			; 
2ac7			;.luword:	ld a,(hl) 
2ac7			;		cp 0 
2ac7			;		jr z, .luword2 
2ac7			;		ld (de), a 
2ac7			;		inc de 
2ac7			;		inc hl 
2ac7			;		jr .luword 
2ac7			; 
2ac7			;.luword2:	ld a, ' ' 
2ac7			;		ld (de), a 
2ac7			;;		inc hl 
2ac7			;;		inc de 
2ac7			;;		ld (de), a 
2ac7			;;		inc hl 
2ac7			;		inc de 
2ac7			; 
2ac7			;		ex de, hl 
2ac7			;		pop de 
2ac7			;		 
2ac7			;		 
2ac7			; 
2ac7			;; detoken that string and copy it 
2ac7			; 
2ac7			;	if DEBUG_FORTH_WORDS 
2ac7			;		DMARK "Lt2" 
2ac7			;		CALLMONITOR 
2ac7			;	endif 
2ac7			;.ldetok:	ld a, (de) 
2ac7			;		cp FORTH_END_BUFFER 
2ac7			;		jr z, .ldetokend 
2ac7			;		; swap out any zero term for space 
2ac7			;		cp 0 
2ac7			;		jr nz, .ldetoknext 
2ac7			;		ld a, ' ' 
2ac7			; 
2ac7			;	if DEBUG_FORTH_WORDS 
2ac7			;		DMARK "LtS" 
2ac7			;		CALLMONITOR 
2ac7			;	endif 
2ac7			;.ldetoknext:	ld (hl), a 
2ac7			;		inc de 
2ac7			;		inc hl 
2ac7			;		jr .ldetok 
2ac7			; 
2ac7			;.ldetokend:	ld a, 0    ; replace forth eol with string term for pushing 
2ac7			;		ld (hl), a  
2ac7			; 
2ac7			;; free that temp malloc 
2ac7			; 
2ac7			;		pop hl    
2ac7			; 
2ac7			;	if DEBUG_FORTH_WORDS 
2ac7			;		DMARK "Lt4" 
2ac7			;		CALLMONITOR 
2ac7			;	endif 
2ac7			;		call forth_apushstrhl 
2ac7			; 
2ac7			;		; get rid of temp malloc area 
2ac7			; 
2ac7			;		pop hl 
2ac7			;		call free 
2ac7			; 
2ac7			;		jr .ludone 
2ac7			; 
2ac7			;.lnuword:	pop hl 
2ac7			;		call forth_tok_next 
2ac7			;		jp .ldouscan  
2ac7			; 
2ac7			;.ludone:		 pop hl 
2ac7			; 
2ac7					NEXTW 
2ac7 c3 81 1f			jp macro_next 
2aca				endm 
# End of macro NEXTW
2aca			 
2aca			.FORGET: 
2aca				CWHEAD .NOP 73 "FORGET" 6 WORD_FLAG_CODE 
2aca 5d				db WORD_SYS_CORE+73             
2acb 43 2b			dw .NOP            
2acd 07				db 6 + 1 
2ace .. 00			db "FORGET",0              
2ad5				endm 
# End of macro CWHEAD
2ad5			; | FORGET ( uword -- )    Forget the uword on TOS | DONE 
2ad5			; | | Will flag the word's op code to be deleted as well as replace the first char of the word with '_'. Quoted uword name must be in caps. 
2ad5			; | |  
2ad5			; | | e.g. "MORE" forget 
2ad5					if DEBUG_FORTH_WORDS_KEY 
2ad5						DMARK "FRG" 
2ad5 f5				push af  
2ad6 3a ea 2a			ld a, (.dmark)  
2ad9 32 65 ee			ld (debug_mark),a  
2adc 3a eb 2a			ld a, (.dmark+1)  
2adf 32 66 ee			ld (debug_mark+1),a  
2ae2 3a ec 2a			ld a, (.dmark+2)  
2ae5 32 67 ee			ld (debug_mark+2),a  
2ae8 18 03			jr .pastdmark  
2aea ..			.dmark: db "FRG"  
2aed f1			.pastdmark: pop af  
2aee			endm  
# End of macro DMARK
2aee						CALLMONITOR 
2aee cd 6f ee			call debug_vector  
2af1				endm  
# End of macro CALLMONITOR
2af1					endif 
2af1			 
2af1				; find uword 
2af1			        ; update start of word with "_" 
2af1				; replace uword with deleted flag 
2af1			 
2af1			 
2af1			;	if DEBUG_FORTH_WORDS 
2af1			;		DMARK "FOG" 
2af1			;		CALLMONITOR 
2af1			;	endif 
2af1			 
2af1			 
2af1					; Get ptr to the word we need to look up 
2af1			 
2af1					FORTH_DSP_VALUEHL 
2af1 cd 95 1d			call macro_dsp_valuehl 
2af4				endm 
# End of macro FORTH_DSP_VALUEHL
2af4					;v5 FORTH_DSP_VALUE 
2af4				; TODO type check 
2af4			;		inc hl    ; Skip type check  
2af4 e5					push hl 
2af5 c1					pop bc 
2af6			;		ex de, hl    ; put into DE 
2af6			 
2af6			 
2af6 21 e2 5e				ld hl, baseram 
2af9					;ld hl, baseusermem 
2af9			 
2af9				; skip dict stub 
2af9			;	call forth_tok_next 
2af9 e5			push hl   ; sacreifical push 
2afa			 
2afa			.fldouscanm: 
2afa e1				pop hl 
2afb			.fldouscan: 
2afb			;	if DEBUG_FORTH_WORDS 
2afb			;		DMARK "LSs" 
2afb			;		CALLMONITOR 
2afb			;	endif 
2afb				; skip dict stub 
2afb cd d2 20				call forth_tok_next 
2afe			 
2afe			 
2afe			; while we have words to look for 
2afe			 
2afe 7e				ld a, (hl)      
2aff			;	if DEBUG_FORTH_WORDS 
2aff			;		DMARK "LSk" 
2aff			;		CALLMONITOR 
2aff			;	endif 
2aff fe 00				cp WORD_SYS_END 
2b01 ca 3d 2b				jp z, .flunotfound 
2b04 fe 01				cp WORD_SYS_UWORD 
2b06 c2 fb 2a				jp nz, .fldouscan 
2b09			 
2b09			;	if DEBUG_FORTH_WORDS 
2b09			;		DMARK "LSu" 
2b09			;		CALLMONITOR 
2b09			;	endif 
2b09			 
2b09					; found a uword but is it the one we want... 
2b09			 
2b09 c5					push bc     ; uword to find is on bc 
2b0a d1					pop de 
2b0b			 
2b0b e5					push hl  ; to save the ptr 
2b0c			 
2b0c					; skip opcode 
2b0c 23					inc hl  
2b0d					; skip next ptr 
2b0d 23					inc hl  
2b0e 23					inc hl 
2b0f					; skip len 
2b0f 23					inc hl 
2b10			 
2b10			;	if DEBUG_FORTH_WORDS 
2b10			;		DMARK "LSc" 
2b10			;		CALLMONITOR 
2b10			;	endif 
2b10 cd 93 11				call strcmp 
2b13 c2 fa 2a				jp nz, .fldouscanm 
2b16			; 
2b16			; 
2b16			;; while we have words to look for 
2b16			; 
2b16			;.fdouscan:	ld a, (hl)      
2b16			;	if DEBUG_FORTH_WORDS 
2b16			;		DMARK "LSs" 
2b16			;		CALLMONITOR 
2b16			;	endif 
2b16			;		cp WORD_SYS_END 
2b16			;		jp z, .fudone 
2b16			;		cp WORD_SYS_UWORD 
2b16			;		jp nz, .fnuword 
2b16			; 
2b16			;	if DEBUG_FORTH_WORDS 
2b16			;		DMARK "FGu" 
2b16			;		CALLMONITOR 
2b16			;	endif 
2b16			; 
2b16			;		; found a uword but is it the one we want... 
2b16			; 
2b16			; 
2b16			;	        pop de   ; get back the dsp name 
2b16			;		push de 
2b16			; 
2b16			;		push hl  ; to save the ptr 
2b16			; 
2b16			;		; skip opcode 
2b16			;		inc hl  
2b16			;		; skip next ptr 
2b16			;		inc hl  
2b16			;		inc hl 
2b16			;		; skip len 
2b16			;		inc hl 
2b16			; 
2b16			;	if DEBUG_FORTH_WORDS 
2b16			;		DMARK "FGc" 
2b16			;		CALLMONITOR 
2b16			;	endif 
2b16			;		call strcmp 
2b16			;		jp nz, .fnuword 
2b16			 
2b16			 
2b16 e1			pop hl 
2b17			 
2b17				 
2b17				if DEBUG_FORTH_WORDS 
2b17					DMARK "FGm" 
2b17 f5				push af  
2b18 3a 2c 2b			ld a, (.dmark)  
2b1b 32 65 ee			ld (debug_mark),a  
2b1e 3a 2d 2b			ld a, (.dmark+1)  
2b21 32 66 ee			ld (debug_mark+1),a  
2b24 3a 2e 2b			ld a, (.dmark+2)  
2b27 32 67 ee			ld (debug_mark+2),a  
2b2a 18 03			jr .pastdmark  
2b2c ..			.dmark: db "FGm"  
2b2f f1			.pastdmark: pop af  
2b30			endm  
# End of macro DMARK
2b30					CALLMONITOR 
2b30 cd 6f ee			call debug_vector  
2b33				endm  
# End of macro CALLMONITOR
2b33				endif 
2b33			 
2b33			 
2b33			 
2b33					; we have a uword so push its name to the stack 
2b33			 
2b33			;	   	push hl  ; save so we can move to next dict block 
2b33			;pop hl 
2b33			 
2b33					; update opcode to deleted 
2b33 3e 03				ld a, WORD_SYS_DELETED 
2b35 77					ld (hl), a 
2b36			 
2b36 23					inc hl  
2b37					; skip next ptr 
2b37 23					inc hl  
2b38 23					inc hl 
2b39					; skip len 
2b39 23					inc hl 
2b3a			 
2b3a					; TODO change parser to skip deleted words but for now mark it out 
2b3a 3e 5f				ld a, "_" 
2b3c 77					ld  (hl),a 
2b3d			 
2b3d			;		jr .fudone 
2b3d			; 
2b3d			;.fnuword:	pop hl 
2b3d			;		call forth_tok_next 
2b3d			;		jp .fdouscan  
2b3d			 
2b3d			.flunotfound:		  
2b3d			 
2b3d			 
2b3d					 
2b3d					FORTH_DSP_POP 
2b3d cd 4d 1e			call macro_forth_dsp_pop 
2b40				endm 
# End of macro FORTH_DSP_POP
2b40			;		ld hl, .luno 
2b40			;.fudone:		 pop hl 
2b40					NEXTW 
2b40 c3 81 1f			jp macro_next 
2b43				endm 
# End of macro NEXTW
2b43			.NOP: 
2b43				CWHEAD .COMO 77 "NOP" 3 WORD_FLAG_CODE 
2b43 61				db WORD_SYS_CORE+77             
2b44 6a 2b			dw .COMO            
2b46 04				db 3 + 1 
2b47 .. 00			db "NOP",0              
2b4b				endm 
# End of macro CWHEAD
2b4b			; | NOP (  --  ) Do nothing | DONE 
2b4b					if DEBUG_FORTH_WORDS_KEY 
2b4b						DMARK "NOP" 
2b4b f5				push af  
2b4c 3a 60 2b			ld a, (.dmark)  
2b4f 32 65 ee			ld (debug_mark),a  
2b52 3a 61 2b			ld a, (.dmark+1)  
2b55 32 66 ee			ld (debug_mark+1),a  
2b58 3a 62 2b			ld a, (.dmark+2)  
2b5b 32 67 ee			ld (debug_mark+2),a  
2b5e 18 03			jr .pastdmark  
2b60 ..			.dmark: db "NOP"  
2b63 f1			.pastdmark: pop af  
2b64			endm  
# End of macro DMARK
2b64						CALLMONITOR 
2b64 cd 6f ee			call debug_vector  
2b67				endm  
# End of macro CALLMONITOR
2b67					endif 
2b67				       NEXTW 
2b67 c3 81 1f			jp macro_next 
2b6a				endm 
# End of macro NEXTW
2b6a			.COMO: 
2b6a				CWHEAD .COMC 90 "(" 1 WORD_FLAG_CODE 
2b6a 6e				db WORD_SYS_CORE+90             
2b6b bc 2b			dw .COMC            
2b6d 02				db 1 + 1 
2b6e .. 00			db "(",0              
2b70				endm 
# End of macro CWHEAD
2b70			; | ( ( -- )  Start of comment | DONE 
2b70			 
2b70			 
2b70 2a bc e5				ld hl, ( os_tok_ptr) 
2b73 11 b7 2b			ld de, .closepar 
2b76					 
2b76					if DEBUG_FORTH_WORDS 
2b76						DMARK ").." 
2b76 f5				push af  
2b77 3a 8b 2b			ld a, (.dmark)  
2b7a 32 65 ee			ld (debug_mark),a  
2b7d 3a 8c 2b			ld a, (.dmark+1)  
2b80 32 66 ee			ld (debug_mark+1),a  
2b83 3a 8d 2b			ld a, (.dmark+2)  
2b86 32 67 ee			ld (debug_mark+2),a  
2b89 18 03			jr .pastdmark  
2b8b ..			.dmark: db ").."  
2b8e f1			.pastdmark: pop af  
2b8f			endm  
# End of macro DMARK
2b8f						CALLMONITOR 
2b8f cd 6f ee			call debug_vector  
2b92				endm  
# End of macro CALLMONITOR
2b92					endif 
2b92 cd 9c 20			call findnexttok  
2b95			 
2b95					if DEBUG_FORTH_WORDS 
2b95						DMARK "IF5" 
2b95 f5				push af  
2b96 3a aa 2b			ld a, (.dmark)  
2b99 32 65 ee			ld (debug_mark),a  
2b9c 3a ab 2b			ld a, (.dmark+1)  
2b9f 32 66 ee			ld (debug_mark+1),a  
2ba2 3a ac 2b			ld a, (.dmark+2)  
2ba5 32 67 ee			ld (debug_mark+2),a  
2ba8 18 03			jr .pastdmark  
2baa ..			.dmark: db "IF5"  
2bad f1			.pastdmark: pop af  
2bae			endm  
# End of macro DMARK
2bae						CALLMONITOR 
2bae cd 6f ee			call debug_vector  
2bb1				endm  
# End of macro CALLMONITOR
2bb1					endif 
2bb1				; replace below with ) exec using tok_ptr 
2bb1 22 bc e5			ld (os_tok_ptr), hl 
2bb4 c3 12 20			jp exec1 
2bb7			 
2bb7 .. 00			.closepar:   db ")",0 
2bb9			 
2bb9				       NEXTW 
2bb9 c3 81 1f			jp macro_next 
2bbc				endm 
# End of macro NEXTW
2bbc			.COMC: 
2bbc				CWHEAD .SCRATCH 91 ")" 1 WORD_FLAG_CODE 
2bbc 6f				db WORD_SYS_CORE+91             
2bbd c5 2b			dw .SCRATCH            
2bbf 02				db 1 + 1 
2bc0 .. 00			db ")",0              
2bc2				endm 
# End of macro CWHEAD
2bc2			; | ) ( -- )  End of comment |  DONE  
2bc2				       NEXTW 
2bc2 c3 81 1f			jp macro_next 
2bc5				endm 
# End of macro NEXTW
2bc5			 
2bc5			.SCRATCH: 
2bc5				CWHEAD .INC 91 "SCRATCH" 7 WORD_FLAG_CODE 
2bc5 6f				db WORD_SYS_CORE+91             
2bc6 00 2c			dw .INC            
2bc8 08				db 7 + 1 
2bc9 .. 00			db "SCRATCH",0              
2bd1				endm 
# End of macro CWHEAD
2bd1			; | SCRATCH ( u -- addr ) Pushes address of offset u to stack | DONE 
2bd1			; | | The scratch area provides 32 word array. Can be used as single byte or as a word by passing the offset on stack. Pushes the resulting address to stack.  
2bd1			; | | When used with the direct storage writing/malloc and the !@ or word versions it is possible to construct an expanded and flexible variable system 
2bd1			; | |  
2bd1			; | | e.g.    : score $00 scratch ; 
2bd1			; | |  
2bd1			; | | $00 score ! 
2bd1			; | | $01 score +! 
2bd1			; | |  
2bd1			; | | e.g.   : varword $0a scratch ;  
2bd1			; | | 
2bd1			; | | $8000 varword ! 
2bd1					if DEBUG_FORTH_WORDS_KEY 
2bd1						DMARK "SCR" 
2bd1 f5				push af  
2bd2 3a e6 2b			ld a, (.dmark)  
2bd5 32 65 ee			ld (debug_mark),a  
2bd8 3a e7 2b			ld a, (.dmark+1)  
2bdb 32 66 ee			ld (debug_mark+1),a  
2bde 3a e8 2b			ld a, (.dmark+2)  
2be1 32 67 ee			ld (debug_mark+2),a  
2be4 18 03			jr .pastdmark  
2be6 ..			.dmark: db "SCR"  
2be9 f1			.pastdmark: pop af  
2bea			endm  
# End of macro DMARK
2bea						CALLMONITOR 
2bea cd 6f ee			call debug_vector  
2bed				endm  
# End of macro CALLMONITOR
2bed					endif 
2bed			 
2bed					FORTH_DSP_VALUEHL 
2bed cd 95 1d			call macro_dsp_valuehl 
2bf0				endm 
# End of macro FORTH_DSP_VALUEHL
2bf0				 
2bf0					FORTH_DSP_POP 
2bf0 cd 4d 1e			call macro_forth_dsp_pop 
2bf3				endm 
# End of macro FORTH_DSP_POP
2bf3			 
2bf3 7d					ld a, l 
2bf4 21 e0 e7				ld hl, os_var_array 
2bf7 cd f5 0d				call addatohl 
2bfa			 
2bfa cd 90 1b				call forth_push_numhl 
2bfd			 
2bfd				       NEXTW 
2bfd c3 81 1f			jp macro_next 
2c00				endm 
# End of macro NEXTW
2c00			 
2c00			.INC: 
2c00				CWHEAD .DEC 91 "+!" 2 WORD_FLAG_CODE 
2c00 6f				db WORD_SYS_CORE+91             
2c01 56 2c			dw .DEC            
2c03 03				db 2 + 1 
2c04 .. 00			db "+!",0              
2c07				endm 
# End of macro CWHEAD
2c07			; | +! ( u a -- )  Increment byte at address a by the value u | DONE 
2c07					if DEBUG_FORTH_WORDS_KEY 
2c07						DMARK "+s_" 
2c07 f5				push af  
2c08 3a 1c 2c			ld a, (.dmark)  
2c0b 32 65 ee			ld (debug_mark),a  
2c0e 3a 1d 2c			ld a, (.dmark+1)  
2c11 32 66 ee			ld (debug_mark+1),a  
2c14 3a 1e 2c			ld a, (.dmark+2)  
2c17 32 67 ee			ld (debug_mark+2),a  
2c1a 18 03			jr .pastdmark  
2c1c ..			.dmark: db "+s_"  
2c1f f1			.pastdmark: pop af  
2c20			endm  
# End of macro DMARK
2c20						CALLMONITOR 
2c20 cd 6f ee			call debug_vector  
2c23				endm  
# End of macro CALLMONITOR
2c23					endif 
2c23			 
2c23					FORTH_DSP_VALUEHL 
2c23 cd 95 1d			call macro_dsp_valuehl 
2c26				endm 
# End of macro FORTH_DSP_VALUEHL
2c26			 
2c26 e5					push hl   ; save address 
2c27			 
2c27					FORTH_DSP_POP 
2c27 cd 4d 1e			call macro_forth_dsp_pop 
2c2a				endm 
# End of macro FORTH_DSP_POP
2c2a			 
2c2a					FORTH_DSP_VALUEHL 
2c2a cd 95 1d			call macro_dsp_valuehl 
2c2d				endm 
# End of macro FORTH_DSP_VALUEHL
2c2d			 
2c2d e5					push hl 
2c2e					FORTH_DSP_POP 
2c2e cd 4d 1e			call macro_forth_dsp_pop 
2c31				endm 
# End of macro FORTH_DSP_POP
2c31 e1					pop hl 
2c32			 
2c32					; hl contains value to add to byte at a 
2c32				 
2c32 eb					ex de, hl 
2c33			 
2c33 e1					pop hl 
2c34			 
2c34					if DEBUG_FORTH_WORDS 
2c34						DMARK "INC" 
2c34 f5				push af  
2c35 3a 49 2c			ld a, (.dmark)  
2c38 32 65 ee			ld (debug_mark),a  
2c3b 3a 4a 2c			ld a, (.dmark+1)  
2c3e 32 66 ee			ld (debug_mark+1),a  
2c41 3a 4b 2c			ld a, (.dmark+2)  
2c44 32 67 ee			ld (debug_mark+2),a  
2c47 18 03			jr .pastdmark  
2c49 ..			.dmark: db "INC"  
2c4c f1			.pastdmark: pop af  
2c4d			endm  
# End of macro DMARK
2c4d						CALLMONITOR 
2c4d cd 6f ee			call debug_vector  
2c50				endm  
# End of macro CALLMONITOR
2c50					endif 
2c50			 
2c50 7e					ld a,(hl) 
2c51 83					add e 
2c52 77					ld (hl),a 
2c53			 
2c53			 
2c53			 
2c53				       NEXTW 
2c53 c3 81 1f			jp macro_next 
2c56				endm 
# End of macro NEXTW
2c56			 
2c56			.DEC: 
2c56				CWHEAD .INC2 91 "-!" 2 WORD_FLAG_CODE 
2c56 6f				db WORD_SYS_CORE+91             
2c57 aa 2c			dw .INC2            
2c59 03				db 2 + 1 
2c5a .. 00			db "-!",0              
2c5d				endm 
# End of macro CWHEAD
2c5d			; | -! ( u a -- )  Decrement byte at address a by the value u | DONE 
2c5d					if DEBUG_FORTH_WORDS_KEY 
2c5d						DMARK "-s_" 
2c5d f5				push af  
2c5e 3a 72 2c			ld a, (.dmark)  
2c61 32 65 ee			ld (debug_mark),a  
2c64 3a 73 2c			ld a, (.dmark+1)  
2c67 32 66 ee			ld (debug_mark+1),a  
2c6a 3a 74 2c			ld a, (.dmark+2)  
2c6d 32 67 ee			ld (debug_mark+2),a  
2c70 18 03			jr .pastdmark  
2c72 ..			.dmark: db "-s_"  
2c75 f1			.pastdmark: pop af  
2c76			endm  
# End of macro DMARK
2c76						CALLMONITOR 
2c76 cd 6f ee			call debug_vector  
2c79				endm  
# End of macro CALLMONITOR
2c79					endif 
2c79			 
2c79					FORTH_DSP_VALUEHL 
2c79 cd 95 1d			call macro_dsp_valuehl 
2c7c				endm 
# End of macro FORTH_DSP_VALUEHL
2c7c			 
2c7c e5					push hl   ; save address 
2c7d			 
2c7d					FORTH_DSP_POP 
2c7d cd 4d 1e			call macro_forth_dsp_pop 
2c80				endm 
# End of macro FORTH_DSP_POP
2c80			 
2c80					FORTH_DSP_VALUEHL 
2c80 cd 95 1d			call macro_dsp_valuehl 
2c83				endm 
# End of macro FORTH_DSP_VALUEHL
2c83			 
2c83					; hl contains value to add to byte at a 
2c83				 
2c83 eb					ex de, hl 
2c84			 
2c84 e1					pop hl 
2c85			 
2c85					if DEBUG_FORTH_WORDS 
2c85						DMARK "DEC" 
2c85 f5				push af  
2c86 3a 9a 2c			ld a, (.dmark)  
2c89 32 65 ee			ld (debug_mark),a  
2c8c 3a 9b 2c			ld a, (.dmark+1)  
2c8f 32 66 ee			ld (debug_mark+1),a  
2c92 3a 9c 2c			ld a, (.dmark+2)  
2c95 32 67 ee			ld (debug_mark+2),a  
2c98 18 03			jr .pastdmark  
2c9a ..			.dmark: db "DEC"  
2c9d f1			.pastdmark: pop af  
2c9e			endm  
# End of macro DMARK
2c9e						CALLMONITOR 
2c9e cd 6f ee			call debug_vector  
2ca1				endm  
# End of macro CALLMONITOR
2ca1					endif 
2ca1			 
2ca1 7e					ld a,(hl) 
2ca2 93					sub e 
2ca3 77					ld (hl),a 
2ca4			 
2ca4			 
2ca4					FORTH_DSP_POP 
2ca4 cd 4d 1e			call macro_forth_dsp_pop 
2ca7				endm 
# End of macro FORTH_DSP_POP
2ca7			 
2ca7				       NEXTW 
2ca7 c3 81 1f			jp macro_next 
2caa				endm 
# End of macro NEXTW
2caa			 
2caa			.INC2: 
2caa				CWHEAD .DEC2 91 "+2!" 3 WORD_FLAG_CODE 
2caa 6f				db WORD_SYS_CORE+91             
2cab 57 2d			dw .DEC2            
2cad 04				db 3 + 1 
2cae .. 00			db "+2!",0              
2cb2				endm 
# End of macro CWHEAD
2cb2			; | +2! ( u a -- )  Increment word at address a by the value u | DONE 
2cb2			 
2cb2					if DEBUG_FORTH_WORDS_KEY 
2cb2						DMARK "+2s" 
2cb2 f5				push af  
2cb3 3a c7 2c			ld a, (.dmark)  
2cb6 32 65 ee			ld (debug_mark),a  
2cb9 3a c8 2c			ld a, (.dmark+1)  
2cbc 32 66 ee			ld (debug_mark+1),a  
2cbf 3a c9 2c			ld a, (.dmark+2)  
2cc2 32 67 ee			ld (debug_mark+2),a  
2cc5 18 03			jr .pastdmark  
2cc7 ..			.dmark: db "+2s"  
2cca f1			.pastdmark: pop af  
2ccb			endm  
# End of macro DMARK
2ccb						CALLMONITOR 
2ccb cd 6f ee			call debug_vector  
2cce				endm  
# End of macro CALLMONITOR
2cce					endif 
2cce			 
2cce					; Address 
2cce			 
2cce					FORTH_DSP_VALUEHL 
2cce cd 95 1d			call macro_dsp_valuehl 
2cd1				endm 
# End of macro FORTH_DSP_VALUEHL
2cd1			 
2cd1 e5					push hl    ; save address 
2cd2			 
2cd2					; load content into de 
2cd2			 
2cd2 5e					ld e,(hl) 
2cd3 23					inc hl 
2cd4 56					ld d, (hl) 
2cd5			 
2cd5					if DEBUG_FORTH_WORDS 
2cd5						DMARK "+2a" 
2cd5 f5				push af  
2cd6 3a ea 2c			ld a, (.dmark)  
2cd9 32 65 ee			ld (debug_mark),a  
2cdc 3a eb 2c			ld a, (.dmark+1)  
2cdf 32 66 ee			ld (debug_mark+1),a  
2ce2 3a ec 2c			ld a, (.dmark+2)  
2ce5 32 67 ee			ld (debug_mark+2),a  
2ce8 18 03			jr .pastdmark  
2cea ..			.dmark: db "+2a"  
2ced f1			.pastdmark: pop af  
2cee			endm  
# End of macro DMARK
2cee						CALLMONITOR 
2cee cd 6f ee			call debug_vector  
2cf1				endm  
# End of macro CALLMONITOR
2cf1					endif 
2cf1			 
2cf1					FORTH_DSP_POP 
2cf1 cd 4d 1e			call macro_forth_dsp_pop 
2cf4				endm 
# End of macro FORTH_DSP_POP
2cf4			 
2cf4					; Get value to add 
2cf4			 
2cf4					FORTH_DSP_VALUE 
2cf4 cd 7e 1d			call macro_forth_dsp_value 
2cf7				endm 
# End of macro FORTH_DSP_VALUE
2cf7			 
2cf7					if DEBUG_FORTH_WORDS 
2cf7						DMARK "+2v" 
2cf7 f5				push af  
2cf8 3a 0c 2d			ld a, (.dmark)  
2cfb 32 65 ee			ld (debug_mark),a  
2cfe 3a 0d 2d			ld a, (.dmark+1)  
2d01 32 66 ee			ld (debug_mark+1),a  
2d04 3a 0e 2d			ld a, (.dmark+2)  
2d07 32 67 ee			ld (debug_mark+2),a  
2d0a 18 03			jr .pastdmark  
2d0c ..			.dmark: db "+2v"  
2d0f f1			.pastdmark: pop af  
2d10			endm  
# End of macro DMARK
2d10						CALLMONITOR 
2d10 cd 6f ee			call debug_vector  
2d13				endm  
# End of macro CALLMONITOR
2d13					endif 
2d13			 
2d13 19					add hl, de 
2d14			 
2d14					if DEBUG_FORTH_WORDS 
2d14						DMARK "+2+" 
2d14 f5				push af  
2d15 3a 29 2d			ld a, (.dmark)  
2d18 32 65 ee			ld (debug_mark),a  
2d1b 3a 2a 2d			ld a, (.dmark+1)  
2d1e 32 66 ee			ld (debug_mark+1),a  
2d21 3a 2b 2d			ld a, (.dmark+2)  
2d24 32 67 ee			ld (debug_mark+2),a  
2d27 18 03			jr .pastdmark  
2d29 ..			.dmark: db "+2+"  
2d2c f1			.pastdmark: pop af  
2d2d			endm  
# End of macro DMARK
2d2d						CALLMONITOR 
2d2d cd 6f ee			call debug_vector  
2d30				endm  
# End of macro CALLMONITOR
2d30					endif 
2d30			 
2d30					; move result to de 
2d30			 
2d30 eb					ex de, hl 
2d31			 
2d31					; Address 
2d31			 
2d31 e1					pop hl 
2d32			 
2d32					; save it back 
2d32			 
2d32 73					ld (hl), e 
2d33 23					inc hl 
2d34 72					ld (hl), d 
2d35			 
2d35					if DEBUG_FORTH_WORDS 
2d35						DMARK "+2e" 
2d35 f5				push af  
2d36 3a 4a 2d			ld a, (.dmark)  
2d39 32 65 ee			ld (debug_mark),a  
2d3c 3a 4b 2d			ld a, (.dmark+1)  
2d3f 32 66 ee			ld (debug_mark+1),a  
2d42 3a 4c 2d			ld a, (.dmark+2)  
2d45 32 67 ee			ld (debug_mark+2),a  
2d48 18 03			jr .pastdmark  
2d4a ..			.dmark: db "+2e"  
2d4d f1			.pastdmark: pop af  
2d4e			endm  
# End of macro DMARK
2d4e						CALLMONITOR 
2d4e cd 6f ee			call debug_vector  
2d51				endm  
# End of macro CALLMONITOR
2d51					endif 
2d51			 
2d51			 
2d51			 
2d51					FORTH_DSP_POP 
2d51 cd 4d 1e			call macro_forth_dsp_pop 
2d54				endm 
# End of macro FORTH_DSP_POP
2d54			 
2d54			 
2d54				       NEXTW 
2d54 c3 81 1f			jp macro_next 
2d57				endm 
# End of macro NEXTW
2d57			 
2d57			.DEC2: 
2d57				CWHEAD .GET2 91 "-2!" 3 WORD_FLAG_CODE 
2d57 6f				db WORD_SYS_CORE+91             
2d58 06 2e			dw .GET2            
2d5a 04				db 3 + 1 
2d5b .. 00			db "-2!",0              
2d5f				endm 
# End of macro CWHEAD
2d5f			; | -2! ( u a -- )  Decrement word at address a by the value u | DONE 
2d5f			 
2d5f			 
2d5f					if DEBUG_FORTH_WORDS_KEY 
2d5f						DMARK "-2s" 
2d5f f5				push af  
2d60 3a 74 2d			ld a, (.dmark)  
2d63 32 65 ee			ld (debug_mark),a  
2d66 3a 75 2d			ld a, (.dmark+1)  
2d69 32 66 ee			ld (debug_mark+1),a  
2d6c 3a 76 2d			ld a, (.dmark+2)  
2d6f 32 67 ee			ld (debug_mark+2),a  
2d72 18 03			jr .pastdmark  
2d74 ..			.dmark: db "-2s"  
2d77 f1			.pastdmark: pop af  
2d78			endm  
# End of macro DMARK
2d78						CALLMONITOR 
2d78 cd 6f ee			call debug_vector  
2d7b				endm  
# End of macro CALLMONITOR
2d7b					endif 
2d7b			 
2d7b					; Address 
2d7b			 
2d7b					FORTH_DSP_VALUEHL 
2d7b cd 95 1d			call macro_dsp_valuehl 
2d7e				endm 
# End of macro FORTH_DSP_VALUEHL
2d7e			 
2d7e e5					push hl    ; save address 
2d7f			 
2d7f					; load content into de 
2d7f			 
2d7f 5e					ld e,(hl) 
2d80 23					inc hl 
2d81 56					ld d, (hl) 
2d82			 
2d82					if DEBUG_FORTH_WORDS 
2d82						DMARK "-2a" 
2d82 f5				push af  
2d83 3a 97 2d			ld a, (.dmark)  
2d86 32 65 ee			ld (debug_mark),a  
2d89 3a 98 2d			ld a, (.dmark+1)  
2d8c 32 66 ee			ld (debug_mark+1),a  
2d8f 3a 99 2d			ld a, (.dmark+2)  
2d92 32 67 ee			ld (debug_mark+2),a  
2d95 18 03			jr .pastdmark  
2d97 ..			.dmark: db "-2a"  
2d9a f1			.pastdmark: pop af  
2d9b			endm  
# End of macro DMARK
2d9b						CALLMONITOR 
2d9b cd 6f ee			call debug_vector  
2d9e				endm  
# End of macro CALLMONITOR
2d9e					endif 
2d9e			 
2d9e					FORTH_DSP_POP 
2d9e cd 4d 1e			call macro_forth_dsp_pop 
2da1				endm 
# End of macro FORTH_DSP_POP
2da1			 
2da1					; Get value to remove 
2da1			 
2da1					FORTH_DSP_VALUE 
2da1 cd 7e 1d			call macro_forth_dsp_value 
2da4				endm 
# End of macro FORTH_DSP_VALUE
2da4			 
2da4					if DEBUG_FORTH_WORDS 
2da4						DMARK "-2v" 
2da4 f5				push af  
2da5 3a b9 2d			ld a, (.dmark)  
2da8 32 65 ee			ld (debug_mark),a  
2dab 3a ba 2d			ld a, (.dmark+1)  
2dae 32 66 ee			ld (debug_mark+1),a  
2db1 3a bb 2d			ld a, (.dmark+2)  
2db4 32 67 ee			ld (debug_mark+2),a  
2db7 18 03			jr .pastdmark  
2db9 ..			.dmark: db "-2v"  
2dbc f1			.pastdmark: pop af  
2dbd			endm  
# End of macro DMARK
2dbd						CALLMONITOR 
2dbd cd 6f ee			call debug_vector  
2dc0				endm  
# End of macro CALLMONITOR
2dc0					endif 
2dc0			 
2dc0 eb					ex de, hl 
2dc1 ed 52				sbc hl, de 
2dc3			 
2dc3					if DEBUG_FORTH_WORDS 
2dc3						DMARK "-2d" 
2dc3 f5				push af  
2dc4 3a d8 2d			ld a, (.dmark)  
2dc7 32 65 ee			ld (debug_mark),a  
2dca 3a d9 2d			ld a, (.dmark+1)  
2dcd 32 66 ee			ld (debug_mark+1),a  
2dd0 3a da 2d			ld a, (.dmark+2)  
2dd3 32 67 ee			ld (debug_mark+2),a  
2dd6 18 03			jr .pastdmark  
2dd8 ..			.dmark: db "-2d"  
2ddb f1			.pastdmark: pop af  
2ddc			endm  
# End of macro DMARK
2ddc						CALLMONITOR 
2ddc cd 6f ee			call debug_vector  
2ddf				endm  
# End of macro CALLMONITOR
2ddf					endif 
2ddf			 
2ddf					; move result to de 
2ddf			 
2ddf eb					ex de, hl 
2de0			 
2de0					; Address 
2de0			 
2de0 e1					pop hl 
2de1			 
2de1					; save it back 
2de1			 
2de1 73					ld (hl), e 
2de2 23					inc hl 
2de3 72					ld (hl), d 
2de4			 
2de4					if DEBUG_FORTH_WORDS 
2de4						DMARK "-2e" 
2de4 f5				push af  
2de5 3a f9 2d			ld a, (.dmark)  
2de8 32 65 ee			ld (debug_mark),a  
2deb 3a fa 2d			ld a, (.dmark+1)  
2dee 32 66 ee			ld (debug_mark+1),a  
2df1 3a fb 2d			ld a, (.dmark+2)  
2df4 32 67 ee			ld (debug_mark+2),a  
2df7 18 03			jr .pastdmark  
2df9 ..			.dmark: db "-2e"  
2dfc f1			.pastdmark: pop af  
2dfd			endm  
# End of macro DMARK
2dfd						CALLMONITOR 
2dfd cd 6f ee			call debug_vector  
2e00				endm  
# End of macro CALLMONITOR
2e00					endif 
2e00			 
2e00			 
2e00					FORTH_DSP_POP 
2e00 cd 4d 1e			call macro_forth_dsp_pop 
2e03				endm 
# End of macro FORTH_DSP_POP
2e03			 
2e03			 
2e03			 
2e03				       NEXTW 
2e03 c3 81 1f			jp macro_next 
2e06				endm 
# End of macro NEXTW
2e06			.GET2: 
2e06				CWHEAD .BANG2 91 "2@" 2 WORD_FLAG_CODE 
2e06 6f				db WORD_SYS_CORE+91             
2e07 3b 2e			dw .BANG2            
2e09 03				db 2 + 1 
2e0a .. 00			db "2@",0              
2e0d				endm 
# End of macro CWHEAD
2e0d			; | 2@ ( a -- u )  Push word at address a onto stack | DONE 
2e0d					if DEBUG_FORTH_WORDS_KEY 
2e0d						DMARK "2A_" 
2e0d f5				push af  
2e0e 3a 22 2e			ld a, (.dmark)  
2e11 32 65 ee			ld (debug_mark),a  
2e14 3a 23 2e			ld a, (.dmark+1)  
2e17 32 66 ee			ld (debug_mark+1),a  
2e1a 3a 24 2e			ld a, (.dmark+2)  
2e1d 32 67 ee			ld (debug_mark+2),a  
2e20 18 03			jr .pastdmark  
2e22 ..			.dmark: db "2A_"  
2e25 f1			.pastdmark: pop af  
2e26			endm  
# End of macro DMARK
2e26						CALLMONITOR 
2e26 cd 6f ee			call debug_vector  
2e29				endm  
# End of macro CALLMONITOR
2e29					endif 
2e29			 
2e29					FORTH_DSP_VALUEHL 
2e29 cd 95 1d			call macro_dsp_valuehl 
2e2c				endm 
# End of macro FORTH_DSP_VALUEHL
2e2c			 
2e2c e5					push hl   ; save address 
2e2d			 
2e2d					FORTH_DSP_POP 
2e2d cd 4d 1e			call macro_forth_dsp_pop 
2e30				endm 
# End of macro FORTH_DSP_POP
2e30			 
2e30 e1					pop hl 
2e31			 
2e31 5e					ld e, (hl) 
2e32 23					inc hl 
2e33 56					ld d, (hl) 
2e34			 
2e34 eb					ex de, hl 
2e35			 
2e35 cd 90 1b				call forth_push_numhl 
2e38			 
2e38				       NEXTW 
2e38 c3 81 1f			jp macro_next 
2e3b				endm 
# End of macro NEXTW
2e3b			.BANG2: 
2e3b				CWHEAD .CONFIG 91 "2!" 2 WORD_FLAG_CODE 
2e3b 6f				db WORD_SYS_CORE+91             
2e3c 73 2e			dw .CONFIG            
2e3e 03				db 2 + 1 
2e3f .. 00			db "2!",0              
2e42				endm 
# End of macro CWHEAD
2e42			; | 2! ( u a -- )  Store value u as a word at address a | DONE 
2e42					if DEBUG_FORTH_WORDS_KEY 
2e42						DMARK "2S_" 
2e42 f5				push af  
2e43 3a 57 2e			ld a, (.dmark)  
2e46 32 65 ee			ld (debug_mark),a  
2e49 3a 58 2e			ld a, (.dmark+1)  
2e4c 32 66 ee			ld (debug_mark+1),a  
2e4f 3a 59 2e			ld a, (.dmark+2)  
2e52 32 67 ee			ld (debug_mark+2),a  
2e55 18 03			jr .pastdmark  
2e57 ..			.dmark: db "2S_"  
2e5a f1			.pastdmark: pop af  
2e5b			endm  
# End of macro DMARK
2e5b						CALLMONITOR 
2e5b cd 6f ee			call debug_vector  
2e5e				endm  
# End of macro CALLMONITOR
2e5e					endif 
2e5e			 
2e5e					FORTH_DSP_VALUEHL 
2e5e cd 95 1d			call macro_dsp_valuehl 
2e61				endm 
# End of macro FORTH_DSP_VALUEHL
2e61			 
2e61 e5					push hl   ; save address 
2e62			 
2e62			 
2e62					FORTH_DSP_POP 
2e62 cd 4d 1e			call macro_forth_dsp_pop 
2e65				endm 
# End of macro FORTH_DSP_POP
2e65			 
2e65					 
2e65					FORTH_DSP_VALUEHL 
2e65 cd 95 1d			call macro_dsp_valuehl 
2e68				endm 
# End of macro FORTH_DSP_VALUEHL
2e68			 
2e68					FORTH_DSP_POP 
2e68 cd 4d 1e			call macro_forth_dsp_pop 
2e6b				endm 
# End of macro FORTH_DSP_POP
2e6b			 
2e6b eb					ex de, hl    ; value now in de 
2e6c			 
2e6c e1					pop hl 
2e6d			 
2e6d 73					ld (hl), e 
2e6e			 
2e6e 23					inc hl 
2e6f			 
2e6f 72					ld (hl), d 
2e70			 
2e70			 
2e70				       NEXTW 
2e70 c3 81 1f			jp macro_next 
2e73				endm 
# End of macro NEXTW
2e73			.CONFIG: 
2e73				CWHEAD .ADTOS 91 "CONFIG" 6 WORD_FLAG_CODE 
2e73 6f				db WORD_SYS_CORE+91             
2e74 84 2e			dw .ADTOS            
2e76 07				db 6 + 1 
2e77 .. 00			db "CONFIG",0              
2e7e				endm 
# End of macro CWHEAD
2e7e			; | CONFIG ( -- )  Access the system configuration menu. Set boot from file, hardware diags, and more! | DONE 
2e7e			 
2e7e cd 69 13				call config 
2e81					NEXTW 
2e81 c3 81 1f			jp macro_next 
2e84				endm 
# End of macro NEXTW
2e84			 
2e84			.ADTOS: 
2e84				CWHEAD .SBTOS 91 "1+" 2 WORD_FLAG_CODE 
2e84 6f				db WORD_SYS_CORE+91             
2e85 9a 2e			dw .SBTOS            
2e87 03				db 2 + 1 
2e88 .. 00			db "1+",0              
2e8b				endm 
# End of macro CWHEAD
2e8b			; | 1+ ( u -- u )  Increment value on TOS | DONE 
2e8b			 
2e8b					FORTH_DSP_VALUEHL 
2e8b cd 95 1d			call macro_dsp_valuehl 
2e8e				endm 
# End of macro FORTH_DSP_VALUEHL
2e8e e5					push hl 
2e8f			 
2e8f					FORTH_DSP_POP 
2e8f cd 4d 1e			call macro_forth_dsp_pop 
2e92				endm 
# End of macro FORTH_DSP_POP
2e92 e1					pop hl 
2e93			 
2e93 23					inc hl 
2e94 cd 90 1b				call forth_push_numhl 
2e97					 
2e97					NEXTW 
2e97 c3 81 1f			jp macro_next 
2e9a				endm 
# End of macro NEXTW
2e9a			.SBTOS: 
2e9a				CWHEAD .ADSTORE 91 "1-" 2 WORD_FLAG_CODE 
2e9a 6f				db WORD_SYS_CORE+91             
2e9b b0 2e			dw .ADSTORE            
2e9d 03				db 2 + 1 
2e9e .. 00			db "1-",0              
2ea1				endm 
# End of macro CWHEAD
2ea1			; | 1- ( u -- u )  Decrement value on TOS | DONE 
2ea1			 
2ea1					FORTH_DSP_VALUEHL 
2ea1 cd 95 1d			call macro_dsp_valuehl 
2ea4				endm 
# End of macro FORTH_DSP_VALUEHL
2ea4 e5					push hl 
2ea5			 
2ea5					FORTH_DSP_POP 
2ea5 cd 4d 1e			call macro_forth_dsp_pop 
2ea8				endm 
# End of macro FORTH_DSP_POP
2ea8 e1					pop hl 
2ea9			 
2ea9 2b					dec hl 
2eaa cd 90 1b				call forth_push_numhl 
2ead					 
2ead					NEXTW 
2ead c3 81 1f			jp macro_next 
2eb0				endm 
# End of macro NEXTW
2eb0			.ADSTORE: 
2eb0				CWHEAD .ADWSTORE 91 "1+!" 3 WORD_FLAG_CODE 
2eb0 6f				db WORD_SYS_CORE+91             
2eb1 c6 2e			dw .ADWSTORE            
2eb3 04				db 3 + 1 
2eb4 .. 00			db "1+!",0              
2eb8				endm 
# End of macro CWHEAD
2eb8			; | 1+! ( addr -- )  Increment byte at address addr | DONE 
2eb8			 
2eb8					FORTH_DSP_VALUEHL 
2eb8 cd 95 1d			call macro_dsp_valuehl 
2ebb				endm 
# End of macro FORTH_DSP_VALUEHL
2ebb e5					push hl 
2ebc			 
2ebc					FORTH_DSP_POP 
2ebc cd 4d 1e			call macro_forth_dsp_pop 
2ebf				endm 
# End of macro FORTH_DSP_POP
2ebf e1					pop hl 
2ec0			 
2ec0 7e					ld a, (hl) 
2ec1 3c					inc a 
2ec2 77					ld (hl), a 
2ec3					 
2ec3					NEXTW 
2ec3 c3 81 1f			jp macro_next 
2ec6				endm 
# End of macro NEXTW
2ec6			.ADWSTORE: 
2ec6				CWHEAD .SBSTORE 91 "1+2!" 4 WORD_FLAG_CODE 
2ec6 6f				db WORD_SYS_CORE+91             
2ec7 e4 2e			dw .SBSTORE            
2ec9 05				db 4 + 1 
2eca .. 00			db "1+2!",0              
2ecf				endm 
# End of macro CWHEAD
2ecf			; | 1+2! ( addr -- )  Increment word at address addr | DONE 
2ecf			 
2ecf					FORTH_DSP_VALUEHL 
2ecf cd 95 1d			call macro_dsp_valuehl 
2ed2				endm 
# End of macro FORTH_DSP_VALUEHL
2ed2 e5					push hl 
2ed3			 
2ed3					FORTH_DSP_POP 
2ed3 cd 4d 1e			call macro_forth_dsp_pop 
2ed6				endm 
# End of macro FORTH_DSP_POP
2ed6 e1					pop hl 
2ed7			 
2ed7 e5					push hl 
2ed8			 
2ed8 cd 03 1f				call loadwordinhl 
2edb 23					inc hl 
2edc			 
2edc d1					pop de 
2edd eb					ex de, hl 
2ede 73					ld (hl), e 
2edf 23					inc hl 
2ee0 72					ld (hl), d 
2ee1					 
2ee1					NEXTW 
2ee1 c3 81 1f			jp macro_next 
2ee4				endm 
# End of macro NEXTW
2ee4			.SBSTORE: 
2ee4				CWHEAD .SBWSTORE 91 "1-!" 3 WORD_FLAG_CODE 
2ee4 6f				db WORD_SYS_CORE+91             
2ee5 fa 2e			dw .SBWSTORE            
2ee7 04				db 3 + 1 
2ee8 .. 00			db "1-!",0              
2eec				endm 
# End of macro CWHEAD
2eec			; | 1-! ( addr -- )  Decrement byte at address addr | DONE 
2eec			 
2eec					FORTH_DSP_VALUEHL 
2eec cd 95 1d			call macro_dsp_valuehl 
2eef				endm 
# End of macro FORTH_DSP_VALUEHL
2eef e5					push hl 
2ef0			 
2ef0					FORTH_DSP_POP 
2ef0 cd 4d 1e			call macro_forth_dsp_pop 
2ef3				endm 
# End of macro FORTH_DSP_POP
2ef3 e1					pop hl 
2ef4			 
2ef4 7e					ld a, (hl) 
2ef5 3d					dec a 
2ef6 77					ld (hl), a 
2ef7					 
2ef7					NEXTW 
2ef7 c3 81 1f			jp macro_next 
2efa				endm 
# End of macro NEXTW
2efa			.SBWSTORE: 
2efa				CWHEAD .ENDCORE 91 "1-2!" 4 WORD_FLAG_CODE 
2efa 6f				db WORD_SYS_CORE+91             
2efb 18 2f			dw .ENDCORE            
2efd 05				db 4 + 1 
2efe .. 00			db "1-2!",0              
2f03				endm 
# End of macro CWHEAD
2f03			; | 1-2! ( addr -- )  Decrement word at address addr | DONE 
2f03			 
2f03					FORTH_DSP_VALUEHL 
2f03 cd 95 1d			call macro_dsp_valuehl 
2f06				endm 
# End of macro FORTH_DSP_VALUEHL
2f06 e5					push hl 
2f07			 
2f07					FORTH_DSP_POP 
2f07 cd 4d 1e			call macro_forth_dsp_pop 
2f0a				endm 
# End of macro FORTH_DSP_POP
2f0a e1					pop hl 
2f0b			 
2f0b e5					push hl 
2f0c			 
2f0c cd 03 1f				call loadwordinhl 
2f0f 2b					dec hl 
2f10			 
2f10 d1					pop de 
2f11 eb					ex de, hl 
2f12 73					ld (hl), e 
2f13 23					inc hl 
2f14 72					ld (hl), d 
2f15					 
2f15					NEXTW 
2f15 c3 81 1f			jp macro_next 
2f18				endm 
# End of macro NEXTW
2f18			.ENDCORE: 
2f18			 
2f18			; eof 
2f18			 
2f18			 
# End of file forth_words_core.asm
2f18			include "forth_words_flow.asm" 
2f18			 
2f18			; | ## Program Flow Words 
2f18			 
2f18			.IF: 
2f18				CWHEAD .THEN 10 "IF" 2 WORD_FLAG_CODE 
2f18 1e				db WORD_SYS_CORE+10             
2f19 0d 30			dw .THEN            
2f1b 03				db 2 + 1 
2f1c .. 00			db "IF",0              
2f1f				endm 
# End of macro CWHEAD
2f1f			; | IF ( w -- f ) If TOS is true exec code following up to THEN - Note: currently not supporting ELSE or nested IF | DONE 
2f1f			; 
2f1f					if DEBUG_FORTH_WORDS_KEY 
2f1f						DMARK "IF." 
2f1f f5				push af  
2f20 3a 34 2f			ld a, (.dmark)  
2f23 32 65 ee			ld (debug_mark),a  
2f26 3a 35 2f			ld a, (.dmark+1)  
2f29 32 66 ee			ld (debug_mark+1),a  
2f2c 3a 36 2f			ld a, (.dmark+2)  
2f2f 32 67 ee			ld (debug_mark+2),a  
2f32 18 03			jr .pastdmark  
2f34 ..			.dmark: db "IF."  
2f37 f1			.pastdmark: pop af  
2f38			endm  
# End of macro DMARK
2f38						CALLMONITOR 
2f38 cd 6f ee			call debug_vector  
2f3b				endm  
# End of macro CALLMONITOR
2f3b					endif 
2f3b			; eval TOS 
2f3b			 
2f3b				FORTH_DSP_VALUEHL 
2f3b cd 95 1d			call macro_dsp_valuehl 
2f3e				endm 
# End of macro FORTH_DSP_VALUEHL
2f3e			 
2f3e			;	push hl 
2f3e				FORTH_DSP_POP 
2f3e cd 4d 1e			call macro_forth_dsp_pop 
2f41				endm 
# End of macro FORTH_DSP_POP
2f41			;	pop hl 
2f41			 
2f41					if DEBUG_FORTH_WORDS 
2f41						DMARK "IF1" 
2f41 f5				push af  
2f42 3a 56 2f			ld a, (.dmark)  
2f45 32 65 ee			ld (debug_mark),a  
2f48 3a 57 2f			ld a, (.dmark+1)  
2f4b 32 66 ee			ld (debug_mark+1),a  
2f4e 3a 58 2f			ld a, (.dmark+2)  
2f51 32 67 ee			ld (debug_mark+2),a  
2f54 18 03			jr .pastdmark  
2f56 ..			.dmark: db "IF1"  
2f59 f1			.pastdmark: pop af  
2f5a			endm  
# End of macro DMARK
2f5a						CALLMONITOR 
2f5a cd 6f ee			call debug_vector  
2f5d				endm  
# End of macro CALLMONITOR
2f5d					endif 
2f5d b7				or a        ; clear carry flag 
2f5e 11 00 00			ld de, 0 
2f61 eb				ex de,hl 
2f62 ed 52			sbc hl, de 
2f64 c2 ee 2f			jp nz, .iftrue 
2f67			 
2f67					if DEBUG_FORTH_WORDS 
2f67						DMARK "IF2" 
2f67 f5				push af  
2f68 3a 7c 2f			ld a, (.dmark)  
2f6b 32 65 ee			ld (debug_mark),a  
2f6e 3a 7d 2f			ld a, (.dmark+1)  
2f71 32 66 ee			ld (debug_mark+1),a  
2f74 3a 7e 2f			ld a, (.dmark+2)  
2f77 32 67 ee			ld (debug_mark+2),a  
2f7a 18 03			jr .pastdmark  
2f7c ..			.dmark: db "IF2"  
2f7f f1			.pastdmark: pop af  
2f80			endm  
# End of macro DMARK
2f80						CALLMONITOR 
2f80 cd 6f ee			call debug_vector  
2f83				endm  
# End of macro CALLMONITOR
2f83					endif 
2f83			 
2f83			; if not true then skip to THEN 
2f83			 
2f83				; TODO get tok_ptr 
2f83				; TODO consume toks until we get to THEN 
2f83			 
2f83 2a bc e5			ld hl, (os_tok_ptr) 
2f86					if DEBUG_FORTH_WORDS 
2f86						DMARK "IF3" 
2f86 f5				push af  
2f87 3a 9b 2f			ld a, (.dmark)  
2f8a 32 65 ee			ld (debug_mark),a  
2f8d 3a 9c 2f			ld a, (.dmark+1)  
2f90 32 66 ee			ld (debug_mark+1),a  
2f93 3a 9d 2f			ld a, (.dmark+2)  
2f96 32 67 ee			ld (debug_mark+2),a  
2f99 18 03			jr .pastdmark  
2f9b ..			.dmark: db "IF3"  
2f9e f1			.pastdmark: pop af  
2f9f			endm  
# End of macro DMARK
2f9f						CALLMONITOR 
2f9f cd 6f ee			call debug_vector  
2fa2				endm  
# End of macro CALLMONITOR
2fa2						 
2fa2					endif 
2fa2 11 e9 2f			ld de, .ifthen 
2fa5					if DEBUG_FORTH_WORDS 
2fa5						DMARK "IF4" 
2fa5 f5				push af  
2fa6 3a ba 2f			ld a, (.dmark)  
2fa9 32 65 ee			ld (debug_mark),a  
2fac 3a bb 2f			ld a, (.dmark+1)  
2faf 32 66 ee			ld (debug_mark+1),a  
2fb2 3a bc 2f			ld a, (.dmark+2)  
2fb5 32 67 ee			ld (debug_mark+2),a  
2fb8 18 03			jr .pastdmark  
2fba ..			.dmark: db "IF4"  
2fbd f1			.pastdmark: pop af  
2fbe			endm  
# End of macro DMARK
2fbe						CALLMONITOR 
2fbe cd 6f ee			call debug_vector  
2fc1				endm  
# End of macro CALLMONITOR
2fc1					endif 
2fc1 cd 9c 20			call findnexttok  
2fc4			 
2fc4					if DEBUG_FORTH_WORDS 
2fc4						DMARK "IF5" 
2fc4 f5				push af  
2fc5 3a d9 2f			ld a, (.dmark)  
2fc8 32 65 ee			ld (debug_mark),a  
2fcb 3a da 2f			ld a, (.dmark+1)  
2fce 32 66 ee			ld (debug_mark+1),a  
2fd1 3a db 2f			ld a, (.dmark+2)  
2fd4 32 67 ee			ld (debug_mark+2),a  
2fd7 18 03			jr .pastdmark  
2fd9 ..			.dmark: db "IF5"  
2fdc f1			.pastdmark: pop af  
2fdd			endm  
# End of macro DMARK
2fdd						CALLMONITOR 
2fdd cd 6f ee			call debug_vector  
2fe0				endm  
# End of macro CALLMONITOR
2fe0					endif 
2fe0				; TODO replace below with ; exec using tok_ptr 
2fe0 22 bc e5			ld (os_tok_ptr), hl 
2fe3 c3 12 20			jp exec1 
2fe6				NEXTW 
2fe6 c3 81 1f			jp macro_next 
2fe9				endm 
# End of macro NEXTW
2fe9			 
2fe9 .. 00		.ifthen:  db "THEN",0 
2fee			 
2fee			.iftrue:		 
2fee				; Exec next words normally 
2fee			 
2fee				; if true then exec following IF as normal 
2fee					if DEBUG_FORTH_WORDS 
2fee						DMARK "IFT" 
2fee f5				push af  
2fef 3a 03 30			ld a, (.dmark)  
2ff2 32 65 ee			ld (debug_mark),a  
2ff5 3a 04 30			ld a, (.dmark+1)  
2ff8 32 66 ee			ld (debug_mark+1),a  
2ffb 3a 05 30			ld a, (.dmark+2)  
2ffe 32 67 ee			ld (debug_mark+2),a  
3001 18 03			jr .pastdmark  
3003 ..			.dmark: db "IFT"  
3006 f1			.pastdmark: pop af  
3007			endm  
# End of macro DMARK
3007						CALLMONITOR 
3007 cd 6f ee			call debug_vector  
300a				endm  
# End of macro CALLMONITOR
300a					endif 
300a			 
300a					NEXTW 
300a c3 81 1f			jp macro_next 
300d				endm 
# End of macro NEXTW
300d			.THEN: 
300d				CWHEAD .ELSE 11 "THEN" 4 WORD_FLAG_CODE 
300d 1f				db WORD_SYS_CORE+11             
300e 35 30			dw .ELSE            
3010 05				db 4 + 1 
3011 .. 00			db "THEN",0              
3016				endm 
# End of macro CWHEAD
3016			; | THEN ( -- ) Does nothing. It is a marker for the end of an IF block | DONE 
3016					if DEBUG_FORTH_WORDS_KEY 
3016						DMARK "THN" 
3016 f5				push af  
3017 3a 2b 30			ld a, (.dmark)  
301a 32 65 ee			ld (debug_mark),a  
301d 3a 2c 30			ld a, (.dmark+1)  
3020 32 66 ee			ld (debug_mark+1),a  
3023 3a 2d 30			ld a, (.dmark+2)  
3026 32 67 ee			ld (debug_mark+2),a  
3029 18 03			jr .pastdmark  
302b ..			.dmark: db "THN"  
302e f1			.pastdmark: pop af  
302f			endm  
# End of macro DMARK
302f						CALLMONITOR 
302f cd 6f ee			call debug_vector  
3032				endm  
# End of macro CALLMONITOR
3032					endif 
3032					NEXTW 
3032 c3 81 1f			jp macro_next 
3035				endm 
# End of macro NEXTW
3035			.ELSE: 
3035				CWHEAD .DO 12 "ELSE" 2 WORD_FLAG_CODE 
3035 20				db WORD_SYS_CORE+12             
3036 5d 30			dw .DO            
3038 03				db 2 + 1 
3039 .. 00			db "ELSE",0              
303e				endm 
# End of macro CWHEAD
303e			; | ELSE ( -- ) Not supported - does nothing | TODO 
303e			 
303e					if DEBUG_FORTH_WORDS_KEY 
303e						DMARK "ELS" 
303e f5				push af  
303f 3a 53 30			ld a, (.dmark)  
3042 32 65 ee			ld (debug_mark),a  
3045 3a 54 30			ld a, (.dmark+1)  
3048 32 66 ee			ld (debug_mark+1),a  
304b 3a 55 30			ld a, (.dmark+2)  
304e 32 67 ee			ld (debug_mark+2),a  
3051 18 03			jr .pastdmark  
3053 ..			.dmark: db "ELS"  
3056 f1			.pastdmark: pop af  
3057			endm  
# End of macro DMARK
3057						CALLMONITOR 
3057 cd 6f ee			call debug_vector  
305a				endm  
# End of macro CALLMONITOR
305a					endif 
305a			 
305a			 
305a					NEXTW 
305a c3 81 1f			jp macro_next 
305d				endm 
# End of macro NEXTW
305d			.DO: 
305d				CWHEAD .LOOP 13 "DO" 2 WORD_FLAG_CODE 
305d 21				db WORD_SYS_CORE+13             
305e 84 31			dw .LOOP            
3060 03				db 2 + 1 
3061 .. 00			db "DO",0              
3064				endm 
# End of macro CWHEAD
3064			; | DO ( u1 u2 -- ) Loop starting at u2 with a limit of u1 | DONE 
3064			 
3064					if DEBUG_FORTH_WORDS_KEY 
3064						DMARK "DO." 
3064 f5				push af  
3065 3a 79 30			ld a, (.dmark)  
3068 32 65 ee			ld (debug_mark),a  
306b 3a 7a 30			ld a, (.dmark+1)  
306e 32 66 ee			ld (debug_mark+1),a  
3071 3a 7b 30			ld a, (.dmark+2)  
3074 32 67 ee			ld (debug_mark+2),a  
3077 18 03			jr .pastdmark  
3079 ..			.dmark: db "DO."  
307c f1			.pastdmark: pop af  
307d			endm  
# End of macro DMARK
307d						CALLMONITOR 
307d cd 6f ee			call debug_vector  
3080				endm  
# End of macro CALLMONITOR
3080					endif 
3080			;  push pc to rsp stack past the DO 
3080			 
3080 2a bc e5				ld hl, (os_tok_ptr) 
3083 23					inc hl   ; D 
3084 23					inc hl  ; O 
3085 23					inc hl   ; null 
3086					if DEBUG_FORTH_WORDS 
3086						DMARK "DO2" 
3086 f5				push af  
3087 3a 9b 30			ld a, (.dmark)  
308a 32 65 ee			ld (debug_mark),a  
308d 3a 9c 30			ld a, (.dmark+1)  
3090 32 66 ee			ld (debug_mark+1),a  
3093 3a 9d 30			ld a, (.dmark+2)  
3096 32 67 ee			ld (debug_mark+2),a  
3099 18 03			jr .pastdmark  
309b ..			.dmark: db "DO2"  
309e f1			.pastdmark: pop af  
309f			endm  
# End of macro DMARK
309f						CALLMONITOR 
309f cd 6f ee			call debug_vector  
30a2				endm  
# End of macro CALLMONITOR
30a2					endif 
30a2					FORTH_RSP_NEXT 
30a2 cd 37 1b			call macro_forth_rsp_next 
30a5				endm 
# End of macro FORTH_RSP_NEXT
30a5					if DEBUG_FORTH_WORDS 
30a5						DMARK "DO3" 
30a5 f5				push af  
30a6 3a ba 30			ld a, (.dmark)  
30a9 32 65 ee			ld (debug_mark),a  
30ac 3a bb 30			ld a, (.dmark+1)  
30af 32 66 ee			ld (debug_mark+1),a  
30b2 3a bc 30			ld a, (.dmark+2)  
30b5 32 67 ee			ld (debug_mark+2),a  
30b8 18 03			jr .pastdmark  
30ba ..			.dmark: db "DO3"  
30bd f1			.pastdmark: pop af  
30be			endm  
# End of macro DMARK
30be						CALLMONITOR 
30be cd 6f ee			call debug_vector  
30c1				endm  
# End of macro CALLMONITOR
30c1					endif 
30c1			 
30c1					;if DEBUG_FORTH_WORDS 
30c1				;		push hl 
30c1			;		endif  
30c1			 
30c1			; get counters from data stack 
30c1			 
30c1			 
30c1					FORTH_DSP_VALUEHL 
30c1 cd 95 1d			call macro_dsp_valuehl 
30c4				endm 
# End of macro FORTH_DSP_VALUEHL
30c4 e5					push hl		 ; hl now has starting counter which needs to be tos 
30c5			 
30c5					if DEBUG_FORTH_WORDS 
30c5						DMARK "DO4" 
30c5 f5				push af  
30c6 3a da 30			ld a, (.dmark)  
30c9 32 65 ee			ld (debug_mark),a  
30cc 3a db 30			ld a, (.dmark+1)  
30cf 32 66 ee			ld (debug_mark+1),a  
30d2 3a dc 30			ld a, (.dmark+2)  
30d5 32 67 ee			ld (debug_mark+2),a  
30d8 18 03			jr .pastdmark  
30da ..			.dmark: db "DO4"  
30dd f1			.pastdmark: pop af  
30de			endm  
# End of macro DMARK
30de						CALLMONITOR 
30de cd 6f ee			call debug_vector  
30e1				endm  
# End of macro CALLMONITOR
30e1					endif 
30e1					FORTH_DSP_POP 
30e1 cd 4d 1e			call macro_forth_dsp_pop 
30e4				endm 
# End of macro FORTH_DSP_POP
30e4			 
30e4					if DEBUG_FORTH_WORDS 
30e4						DMARK "DO5" 
30e4 f5				push af  
30e5 3a f9 30			ld a, (.dmark)  
30e8 32 65 ee			ld (debug_mark),a  
30eb 3a fa 30			ld a, (.dmark+1)  
30ee 32 66 ee			ld (debug_mark+1),a  
30f1 3a fb 30			ld a, (.dmark+2)  
30f4 32 67 ee			ld (debug_mark+2),a  
30f7 18 03			jr .pastdmark  
30f9 ..			.dmark: db "DO5"  
30fc f1			.pastdmark: pop af  
30fd			endm  
# End of macro DMARK
30fd						CALLMONITOR 
30fd cd 6f ee			call debug_vector  
3100				endm  
# End of macro CALLMONITOR
3100					endif 
3100			 
3100					FORTH_DSP_VALUEHL 
3100 cd 95 1d			call macro_dsp_valuehl 
3103				endm 
# End of macro FORTH_DSP_VALUEHL
3103			;		push hl		 ; hl now has starting limit counter 
3103			 
3103					if DEBUG_FORTH_WORDS 
3103						DMARK "DO6" 
3103 f5				push af  
3104 3a 18 31			ld a, (.dmark)  
3107 32 65 ee			ld (debug_mark),a  
310a 3a 19 31			ld a, (.dmark+1)  
310d 32 66 ee			ld (debug_mark+1),a  
3110 3a 1a 31			ld a, (.dmark+2)  
3113 32 67 ee			ld (debug_mark+2),a  
3116 18 03			jr .pastdmark  
3118 ..			.dmark: db "DO6"  
311b f1			.pastdmark: pop af  
311c			endm  
# End of macro DMARK
311c						CALLMONITOR 
311c cd 6f ee			call debug_vector  
311f				endm  
# End of macro CALLMONITOR
311f					endif 
311f					FORTH_DSP_POP 
311f cd 4d 1e			call macro_forth_dsp_pop 
3122				endm 
# End of macro FORTH_DSP_POP
3122			 
3122			; put counters on the loop stack 
3122			 
3122			;		pop hl			 ; limit counter 
3122 d1					pop de			; start counter 
3123			 
3123					; push limit counter 
3123			 
3123					if DEBUG_FORTH_WORDS 
3123						DMARK "DO7" 
3123 f5				push af  
3124 3a 38 31			ld a, (.dmark)  
3127 32 65 ee			ld (debug_mark),a  
312a 3a 39 31			ld a, (.dmark+1)  
312d 32 66 ee			ld (debug_mark+1),a  
3130 3a 3a 31			ld a, (.dmark+2)  
3133 32 67 ee			ld (debug_mark+2),a  
3136 18 03			jr .pastdmark  
3138 ..			.dmark: db "DO7"  
313b f1			.pastdmark: pop af  
313c			endm  
# End of macro DMARK
313c						CALLMONITOR 
313c cd 6f ee			call debug_vector  
313f				endm  
# End of macro CALLMONITOR
313f					endif 
313f					FORTH_LOOP_NEXT 
313f cd c6 1d			call macro_forth_loop_next 
3142				endm 
# End of macro FORTH_LOOP_NEXT
3142			 
3142					; push start counter 
3142			 
3142 eb					ex de, hl 
3143					if DEBUG_FORTH_WORDS 
3143						DMARK "DO7" 
3143 f5				push af  
3144 3a 58 31			ld a, (.dmark)  
3147 32 65 ee			ld (debug_mark),a  
314a 3a 59 31			ld a, (.dmark+1)  
314d 32 66 ee			ld (debug_mark+1),a  
3150 3a 5a 31			ld a, (.dmark+2)  
3153 32 67 ee			ld (debug_mark+2),a  
3156 18 03			jr .pastdmark  
3158 ..			.dmark: db "DO7"  
315b f1			.pastdmark: pop af  
315c			endm  
# End of macro DMARK
315c						CALLMONITOR 
315c cd 6f ee			call debug_vector  
315f				endm  
# End of macro CALLMONITOR
315f					endif 
315f					FORTH_LOOP_NEXT 
315f cd c6 1d			call macro_forth_loop_next 
3162				endm 
# End of macro FORTH_LOOP_NEXT
3162			 
3162			 
3162					; init first round of I counter 
3162			 
3162 22 e0 e5				ld (os_current_i), hl 
3165			 
3165					if DEBUG_FORTH_WORDS 
3165						DMARK "DO8" 
3165 f5				push af  
3166 3a 7a 31			ld a, (.dmark)  
3169 32 65 ee			ld (debug_mark),a  
316c 3a 7b 31			ld a, (.dmark+1)  
316f 32 66 ee			ld (debug_mark+1),a  
3172 3a 7c 31			ld a, (.dmark+2)  
3175 32 67 ee			ld (debug_mark+2),a  
3178 18 03			jr .pastdmark  
317a ..			.dmark: db "DO8"  
317d f1			.pastdmark: pop af  
317e			endm  
# End of macro DMARK
317e						CALLMONITOR 
317e cd 6f ee			call debug_vector  
3181				endm  
# End of macro CALLMONITOR
3181					endif 
3181			 
3181					NEXTW 
3181 c3 81 1f			jp macro_next 
3184				endm 
# End of macro NEXTW
3184			.LOOP: 
3184				CWHEAD .I 14 "LOOP" 4 WORD_FLAG_CODE 
3184 22				db WORD_SYS_CORE+14             
3185 9c 32			dw .I            
3187 05				db 4 + 1 
3188 .. 00			db "LOOP",0              
318d				endm 
# End of macro CWHEAD
318d			; | LOOP ( -- ) Increment and test loop counter  | DONE 
318d			 
318d				; pop tos as current loop count to hl 
318d			 
318d				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
318d			 
318d				FORTH_LOOP_TOS 
318d cd f9 1d			call macro_forth_loop_tos 
3190				endm 
# End of macro FORTH_LOOP_TOS
3190 e5				push hl 
3191			 
3191					if DEBUG_FORTH_WORDS_KEY 
3191						DMARK "LOP" 
3191 f5				push af  
3192 3a a6 31			ld a, (.dmark)  
3195 32 65 ee			ld (debug_mark),a  
3198 3a a7 31			ld a, (.dmark+1)  
319b 32 66 ee			ld (debug_mark+1),a  
319e 3a a8 31			ld a, (.dmark+2)  
31a1 32 67 ee			ld (debug_mark+2),a  
31a4 18 03			jr .pastdmark  
31a6 ..			.dmark: db "LOP"  
31a9 f1			.pastdmark: pop af  
31aa			endm  
# End of macro DMARK
31aa						CALLMONITOR 
31aa cd 6f ee			call debug_vector  
31ad				endm  
# End of macro CALLMONITOR
31ad					endif 
31ad				; next item on the stack is the limit. get it 
31ad			 
31ad			 
31ad				FORTH_LOOP_POP 
31ad cd 03 1e			call macro_forth_loop_pop 
31b0				endm 
# End of macro FORTH_LOOP_POP
31b0			 
31b0				FORTH_LOOP_TOS 
31b0 cd f9 1d			call macro_forth_loop_tos 
31b3				endm 
# End of macro FORTH_LOOP_TOS
31b3			 
31b3 d1				pop de		 ; de = i, hl = limit 
31b4			 
31b4					if DEBUG_FORTH_WORDS 
31b4						DMARK "LP1" 
31b4 f5				push af  
31b5 3a c9 31			ld a, (.dmark)  
31b8 32 65 ee			ld (debug_mark),a  
31bb 3a ca 31			ld a, (.dmark+1)  
31be 32 66 ee			ld (debug_mark+1),a  
31c1 3a cb 31			ld a, (.dmark+2)  
31c4 32 67 ee			ld (debug_mark+2),a  
31c7 18 03			jr .pastdmark  
31c9 ..			.dmark: db "LP1"  
31cc f1			.pastdmark: pop af  
31cd			endm  
# End of macro DMARK
31cd						CALLMONITOR 
31cd cd 6f ee			call debug_vector  
31d0				endm  
# End of macro CALLMONITOR
31d0					endif 
31d0			 
31d0				; go back to previous word 
31d0			 
31d0 d5				push de    ; save I for inc later 
31d1			 
31d1			 
31d1				; get limit 
31d1				;  is I at limit? 
31d1			 
31d1			 
31d1					if DEBUG_FORTH_WORDS 
31d1						DMARK "LP1" 
31d1 f5				push af  
31d2 3a e6 31			ld a, (.dmark)  
31d5 32 65 ee			ld (debug_mark),a  
31d8 3a e7 31			ld a, (.dmark+1)  
31db 32 66 ee			ld (debug_mark+1),a  
31de 3a e8 31			ld a, (.dmark+2)  
31e1 32 67 ee			ld (debug_mark+2),a  
31e4 18 03			jr .pastdmark  
31e6 ..			.dmark: db "LP1"  
31e9 f1			.pastdmark: pop af  
31ea			endm  
# End of macro DMARK
31ea						CALLMONITOR 
31ea cd 6f ee			call debug_vector  
31ed				endm  
# End of macro CALLMONITOR
31ed					endif 
31ed			 
31ed ed 52			sbc hl, de 
31ef			 
31ef			 
31ef				;  if at limit pop both limit and current off stack do NEXT and get rid of saved DO 
31ef			 
31ef 20 26				jr nz, .loopnotdone 
31f1			 
31f1 e1				pop hl   ; get rid of saved I 
31f2				FORTH_LOOP_POP     ; get rid of limit 
31f2 cd 03 1e			call macro_forth_loop_pop 
31f5				endm 
# End of macro FORTH_LOOP_POP
31f5			 
31f5				FORTH_RSP_POP     ; get rid of DO ptr 
31f5 cd 58 1b			call macro_forth_rsp_pop 
31f8				endm 
# End of macro FORTH_RSP_POP
31f8			 
31f8			if DEBUG_FORTH_WORDS 
31f8						DMARK "LP>" 
31f8 f5				push af  
31f9 3a 0d 32			ld a, (.dmark)  
31fc 32 65 ee			ld (debug_mark),a  
31ff 3a 0e 32			ld a, (.dmark+1)  
3202 32 66 ee			ld (debug_mark+1),a  
3205 3a 0f 32			ld a, (.dmark+2)  
3208 32 67 ee			ld (debug_mark+2),a  
320b 18 03			jr .pastdmark  
320d ..			.dmark: db "LP>"  
3210 f1			.pastdmark: pop af  
3211			endm  
# End of macro DMARK
3211				CALLMONITOR 
3211 cd 6f ee			call debug_vector  
3214				endm  
# End of macro CALLMONITOR
3214			endif 
3214			 
3214					NEXTW 
3214 c3 81 1f			jp macro_next 
3217				endm 
# End of macro NEXTW
3217				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
3217			 
3217			.loopnotdone: 
3217			 
3217 e1				pop hl    ; get I 
3218 23				inc hl 
3219			 
3219			   	; save new I 
3219			 
3219			 
3219					; set I counter 
3219			 
3219 22 e0 e5				ld (os_current_i), hl 
321c			 
321c					if DEBUG_FORTH_WORDS 
321c						DMARK "LPN" 
321c f5				push af  
321d 3a 31 32			ld a, (.dmark)  
3220 32 65 ee			ld (debug_mark),a  
3223 3a 32 32			ld a, (.dmark+1)  
3226 32 66 ee			ld (debug_mark+1),a  
3229 3a 33 32			ld a, (.dmark+2)  
322c 32 67 ee			ld (debug_mark+2),a  
322f 18 03			jr .pastdmark  
3231 ..			.dmark: db "LPN"  
3234 f1			.pastdmark: pop af  
3235			endm  
# End of macro DMARK
3235					CALLMONITOR 
3235 cd 6f ee			call debug_vector  
3238				endm  
# End of macro CALLMONITOR
3238					endif 
3238					 
3238				FORTH_LOOP_NEXT 
3238 cd c6 1d			call macro_forth_loop_next 
323b				endm 
# End of macro FORTH_LOOP_NEXT
323b			 
323b			 
323b					if DEBUG_FORTH_WORDS 
323b eb						ex de,hl 
323c					endif 
323c			 
323c			;	; get DO ptr 
323c			; 
323c					if DEBUG_FORTH_WORDS 
323c						DMARK "LP7" 
323c f5				push af  
323d 3a 51 32			ld a, (.dmark)  
3240 32 65 ee			ld (debug_mark),a  
3243 3a 52 32			ld a, (.dmark+1)  
3246 32 66 ee			ld (debug_mark+1),a  
3249 3a 53 32			ld a, (.dmark+2)  
324c 32 67 ee			ld (debug_mark+2),a  
324f 18 03			jr .pastdmark  
3251 ..			.dmark: db "LP7"  
3254 f1			.pastdmark: pop af  
3255			endm  
# End of macro DMARK
3255					CALLMONITOR 
3255 cd 6f ee			call debug_vector  
3258				endm  
# End of macro CALLMONITOR
3258					endif 
3258				FORTH_RSP_TOS 
3258 cd 4e 1b			call macro_forth_rsp_tos 
325b				endm 
# End of macro FORTH_RSP_TOS
325b			 
325b					if DEBUG_FORTH_WORDS 
325b						DMARK "LP8" 
325b f5				push af  
325c 3a 70 32			ld a, (.dmark)  
325f 32 65 ee			ld (debug_mark),a  
3262 3a 71 32			ld a, (.dmark+1)  
3265 32 66 ee			ld (debug_mark+1),a  
3268 3a 72 32			ld a, (.dmark+2)  
326b 32 67 ee			ld (debug_mark+2),a  
326e 18 03			jr .pastdmark  
3270 ..			.dmark: db "LP8"  
3273 f1			.pastdmark: pop af  
3274			endm  
# End of macro DMARK
3274					CALLMONITOR 
3274 cd 6f ee			call debug_vector  
3277				endm  
# End of macro CALLMONITOR
3277					endif 
3277				;push hl 
3277			 
3277				; not going to DO any more 
3277				; get rid of the RSP pointer as DO will add it back in 
3277				;FORTH_RSP_POP 
3277				;pop hl 
3277			 
3277				;ld hl,(cli_ret_sp) 
3277				;ld e, (hl) 
3277				;inc hl 
3277				;ld d, (hl) 
3277				;ex de,hl 
3277 22 bc e5			ld (os_tok_ptr), hl 
327a					if DEBUG_FORTH_WORDS 
327a						DMARK "LP<" 
327a f5				push af  
327b 3a 8f 32			ld a, (.dmark)  
327e 32 65 ee			ld (debug_mark),a  
3281 3a 90 32			ld a, (.dmark+1)  
3284 32 66 ee			ld (debug_mark+1),a  
3287 3a 91 32			ld a, (.dmark+2)  
328a 32 67 ee			ld (debug_mark+2),a  
328d 18 03			jr .pastdmark  
328f ..			.dmark: db "LP<"  
3292 f1			.pastdmark: pop af  
3293			endm  
# End of macro DMARK
3293					CALLMONITOR 
3293 cd 6f ee			call debug_vector  
3296				endm  
# End of macro CALLMONITOR
3296				endif 
3296 c3 12 20			jp exec1 
3299			 
3299					 
3299			 
3299			 
3299					NEXTW 
3299 c3 81 1f			jp macro_next 
329c				endm 
# End of macro NEXTW
329c			.I:  
329c			 
329c				CWHEAD .DLOOP 74 "I" 1 WORD_FLAG_CODE 
329c 5e				db WORD_SYS_CORE+74             
329d c7 32			dw .DLOOP            
329f 02				db 1 + 1 
32a0 .. 00			db "I",0              
32a2				endm 
# End of macro CWHEAD
32a2			; | I ( -- ) Current loop counter | DONE 
32a2					if DEBUG_FORTH_WORDS_KEY 
32a2						DMARK "I.." 
32a2 f5				push af  
32a3 3a b7 32			ld a, (.dmark)  
32a6 32 65 ee			ld (debug_mark),a  
32a9 3a b8 32			ld a, (.dmark+1)  
32ac 32 66 ee			ld (debug_mark+1),a  
32af 3a b9 32			ld a, (.dmark+2)  
32b2 32 67 ee			ld (debug_mark+2),a  
32b5 18 03			jr .pastdmark  
32b7 ..			.dmark: db "I.."  
32ba f1			.pastdmark: pop af  
32bb			endm  
# End of macro DMARK
32bb						CALLMONITOR 
32bb cd 6f ee			call debug_vector  
32be				endm  
# End of macro CALLMONITOR
32be					endif 
32be			 
32be 2a e0 e5				ld hl,(os_current_i) 
32c1 cd 90 1b				call forth_push_numhl 
32c4			 
32c4					NEXTW 
32c4 c3 81 1f			jp macro_next 
32c7				endm 
# End of macro NEXTW
32c7			.DLOOP: 
32c7				CWHEAD .REPEAT 75 "-LOOP" 5 WORD_FLAG_CODE 
32c7 5f				db WORD_SYS_CORE+75             
32c8 a8 33			dw .REPEAT            
32ca 06				db 5 + 1 
32cb .. 00			db "-LOOP",0              
32d1				endm 
# End of macro CWHEAD
32d1			; | -LOOP ( -- ) Decrement and test loop counter  | DONE 
32d1				; pop tos as current loop count to hl 
32d1					if DEBUG_FORTH_WORDS_KEY 
32d1						DMARK "-LP" 
32d1 f5				push af  
32d2 3a e6 32			ld a, (.dmark)  
32d5 32 65 ee			ld (debug_mark),a  
32d8 3a e7 32			ld a, (.dmark+1)  
32db 32 66 ee			ld (debug_mark+1),a  
32de 3a e8 32			ld a, (.dmark+2)  
32e1 32 67 ee			ld (debug_mark+2),a  
32e4 18 03			jr .pastdmark  
32e6 ..			.dmark: db "-LP"  
32e9 f1			.pastdmark: pop af  
32ea			endm  
# End of macro DMARK
32ea						CALLMONITOR 
32ea cd 6f ee			call debug_vector  
32ed				endm  
# End of macro CALLMONITOR
32ed					endif 
32ed			 
32ed				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
32ed			 
32ed				FORTH_LOOP_TOS 
32ed cd f9 1d			call macro_forth_loop_tos 
32f0				endm 
# End of macro FORTH_LOOP_TOS
32f0 e5				push hl 
32f1			 
32f1					if DEBUG_FORTH_WORDS 
32f1						DMARK "-LP" 
32f1 f5				push af  
32f2 3a 06 33			ld a, (.dmark)  
32f5 32 65 ee			ld (debug_mark),a  
32f8 3a 07 33			ld a, (.dmark+1)  
32fb 32 66 ee			ld (debug_mark+1),a  
32fe 3a 08 33			ld a, (.dmark+2)  
3301 32 67 ee			ld (debug_mark+2),a  
3304 18 03			jr .pastdmark  
3306 ..			.dmark: db "-LP"  
3309 f1			.pastdmark: pop af  
330a			endm  
# End of macro DMARK
330a						CALLMONITOR 
330a cd 6f ee			call debug_vector  
330d				endm  
# End of macro CALLMONITOR
330d					endif 
330d				; next item on the stack is the limit. get it 
330d			 
330d			 
330d				FORTH_LOOP_POP 
330d cd 03 1e			call macro_forth_loop_pop 
3310				endm 
# End of macro FORTH_LOOP_POP
3310			 
3310				FORTH_LOOP_TOS 
3310 cd f9 1d			call macro_forth_loop_tos 
3313				endm 
# End of macro FORTH_LOOP_TOS
3313			 
3313 d1				pop de		 ; de = i, hl = limit 
3314			 
3314					if DEBUG_FORTH_WORDS 
3314						DMARK "-L1" 
3314 f5				push af  
3315 3a 29 33			ld a, (.dmark)  
3318 32 65 ee			ld (debug_mark),a  
331b 3a 2a 33			ld a, (.dmark+1)  
331e 32 66 ee			ld (debug_mark+1),a  
3321 3a 2b 33			ld a, (.dmark+2)  
3324 32 67 ee			ld (debug_mark+2),a  
3327 18 03			jr .pastdmark  
3329 ..			.dmark: db "-L1"  
332c f1			.pastdmark: pop af  
332d			endm  
# End of macro DMARK
332d						CALLMONITOR 
332d cd 6f ee			call debug_vector  
3330				endm  
# End of macro CALLMONITOR
3330					endif 
3330			 
3330				; go back to previous word 
3330			 
3330 d5				push de    ; save I for inc later 
3331			 
3331			 
3331				; get limit 
3331				;  is I at limit? 
3331			 
3331			 
3331					if DEBUG_FORTH_WORDS 
3331						DMARK "-L1" 
3331 f5				push af  
3332 3a 46 33			ld a, (.dmark)  
3335 32 65 ee			ld (debug_mark),a  
3338 3a 47 33			ld a, (.dmark+1)  
333b 32 66 ee			ld (debug_mark+1),a  
333e 3a 48 33			ld a, (.dmark+2)  
3341 32 67 ee			ld (debug_mark+2),a  
3344 18 03			jr .pastdmark  
3346 ..			.dmark: db "-L1"  
3349 f1			.pastdmark: pop af  
334a			endm  
# End of macro DMARK
334a						CALLMONITOR 
334a cd 6f ee			call debug_vector  
334d				endm  
# End of macro CALLMONITOR
334d					endif 
334d			 
334d ed 52			sbc hl, de 
334f			 
334f			 
334f				;  if at limit pop both limit and current off stack do NEXT and get rid of saved DO 
334f			 
334f 20 26				jr nz, .mloopnotdone 
3351			 
3351 e1				pop hl   ; get rid of saved I 
3352				FORTH_LOOP_POP     ; get rid of limit 
3352 cd 03 1e			call macro_forth_loop_pop 
3355				endm 
# End of macro FORTH_LOOP_POP
3355			 
3355				FORTH_RSP_POP     ; get rid of DO ptr 
3355 cd 58 1b			call macro_forth_rsp_pop 
3358				endm 
# End of macro FORTH_RSP_POP
3358			 
3358			if DEBUG_FORTH_WORDS 
3358						DMARK "-L>" 
3358 f5				push af  
3359 3a 6d 33			ld a, (.dmark)  
335c 32 65 ee			ld (debug_mark),a  
335f 3a 6e 33			ld a, (.dmark+1)  
3362 32 66 ee			ld (debug_mark+1),a  
3365 3a 6f 33			ld a, (.dmark+2)  
3368 32 67 ee			ld (debug_mark+2),a  
336b 18 03			jr .pastdmark  
336d ..			.dmark: db "-L>"  
3370 f1			.pastdmark: pop af  
3371			endm  
# End of macro DMARK
3371				CALLMONITOR 
3371 cd 6f ee			call debug_vector  
3374				endm  
# End of macro CALLMONITOR
3374			endif 
3374			 
3374					NEXTW 
3374 c3 81 1f			jp macro_next 
3377				endm 
# End of macro NEXTW
3377				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
3377			 
3377			.mloopnotdone: 
3377			 
3377 e1				pop hl    ; get I 
3378 2b				dec hl 
3379			 
3379			   	; save new I 
3379			 
3379			 
3379					; set I counter 
3379			 
3379 22 e0 e5				ld (os_current_i), hl 
337c			 
337c					 
337c				FORTH_LOOP_NEXT 
337c cd c6 1d			call macro_forth_loop_next 
337f				endm 
# End of macro FORTH_LOOP_NEXT
337f			 
337f			 
337f					if DEBUG_FORTH_WORDS 
337f eb						ex de,hl 
3380					endif 
3380			 
3380			;	; get DO ptr 
3380			; 
3380				FORTH_RSP_TOS 
3380 cd 4e 1b			call macro_forth_rsp_tos 
3383				endm 
# End of macro FORTH_RSP_TOS
3383			 
3383				;push hl 
3383			 
3383				; not going to DO any more 
3383				; get rid of the RSP pointer as DO will add it back in 
3383				;FORTH_RSP_POP 
3383				;pop hl 
3383			 
3383			 
3383 22 bc e5			ld (os_tok_ptr), hl 
3386					if DEBUG_FORTH_WORDS 
3386						DMARK "-L<" 
3386 f5				push af  
3387 3a 9b 33			ld a, (.dmark)  
338a 32 65 ee			ld (debug_mark),a  
338d 3a 9c 33			ld a, (.dmark+1)  
3390 32 66 ee			ld (debug_mark+1),a  
3393 3a 9d 33			ld a, (.dmark+2)  
3396 32 67 ee			ld (debug_mark+2),a  
3399 18 03			jr .pastdmark  
339b ..			.dmark: db "-L<"  
339e f1			.pastdmark: pop af  
339f			endm  
# End of macro DMARK
339f					CALLMONITOR 
339f cd 6f ee			call debug_vector  
33a2				endm  
# End of macro CALLMONITOR
33a2				endif 
33a2 c3 12 20			jp exec1 
33a5			 
33a5					 
33a5			 
33a5			 
33a5			 
33a5				NEXTW 
33a5 c3 81 1f			jp macro_next 
33a8				endm 
# End of macro NEXTW
33a8			 
33a8			 
33a8			 
33a8			 
33a8			.REPEAT: 
33a8				CWHEAD .UNTIL 93 "REPEAT" 5 WORD_FLAG_CODE 
33a8 71				db WORD_SYS_CORE+93             
33a9 fb 33			dw .UNTIL            
33ab 06				db 5 + 1 
33ac .. 00			db "REPEAT",0              
33b3				endm 
# End of macro CWHEAD
33b3			; | REPEAT ( --  ) Start REPEAT...UNTIL loop  | DONE 
33b3			;  push pc to rsp stack past the REPEAT 
33b3					if DEBUG_FORTH_WORDS_KEY 
33b3						DMARK "REP" 
33b3 f5				push af  
33b4 3a c8 33			ld a, (.dmark)  
33b7 32 65 ee			ld (debug_mark),a  
33ba 3a c9 33			ld a, (.dmark+1)  
33bd 32 66 ee			ld (debug_mark+1),a  
33c0 3a ca 33			ld a, (.dmark+2)  
33c3 32 67 ee			ld (debug_mark+2),a  
33c6 18 03			jr .pastdmark  
33c8 ..			.dmark: db "REP"  
33cb f1			.pastdmark: pop af  
33cc			endm  
# End of macro DMARK
33cc						CALLMONITOR 
33cc cd 6f ee			call debug_vector  
33cf				endm  
# End of macro CALLMONITOR
33cf					endif 
33cf			 
33cf 2a bc e5				ld hl, (os_tok_ptr) 
33d2 23					inc hl   ; R 
33d3 23					inc hl  ; E 
33d4 23					inc hl   ; P 
33d5 23					inc hl   ; E 
33d6 23					inc hl   ; A 
33d7 23					inc hl   ; T 
33d8 23					inc hl   ; zero 
33d9					FORTH_RSP_NEXT 
33d9 cd 37 1b			call macro_forth_rsp_next 
33dc				endm 
# End of macro FORTH_RSP_NEXT
33dc			 
33dc			 
33dc					if DEBUG_FORTH_WORDS 
33dc						DMARK "REP" 
33dc f5				push af  
33dd 3a f1 33			ld a, (.dmark)  
33e0 32 65 ee			ld (debug_mark),a  
33e3 3a f2 33			ld a, (.dmark+1)  
33e6 32 66 ee			ld (debug_mark+1),a  
33e9 3a f3 33			ld a, (.dmark+2)  
33ec 32 67 ee			ld (debug_mark+2),a  
33ef 18 03			jr .pastdmark  
33f1 ..			.dmark: db "REP"  
33f4 f1			.pastdmark: pop af  
33f5			endm  
# End of macro DMARK
33f5						;pop bc    ; TODO BUG ?????? what is this for???? 
33f5						CALLMONITOR 
33f5 cd 6f ee			call debug_vector  
33f8				endm  
# End of macro CALLMONITOR
33f8					endif 
33f8			 
33f8					NEXTW 
33f8 c3 81 1f			jp macro_next 
33fb				endm 
# End of macro NEXTW
33fb			;	       NEXTW 
33fb			 
33fb			.UNTIL: 
33fb				CWHEAD .ENDFLOW 94 "UNTIL" 5 WORD_FLAG_CODE 
33fb 72				db WORD_SYS_CORE+94             
33fc 92 34			dw .ENDFLOW            
33fe 06				db 5 + 1 
33ff .. 00			db "UNTIL",0              
3405				endm 
# End of macro CWHEAD
3405			; | UNTIL ( u -- ) Exit REPEAT...UNTIL loop if TOS is false  | DONE 
3405			 
3405				; pop tos as check 
3405			 
3405				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
3405			 
3405				FORTH_DSP_VALUEHL 
3405 cd 95 1d			call macro_dsp_valuehl 
3408				endm 
# End of macro FORTH_DSP_VALUEHL
3408			 
3408					if DEBUG_FORTH_WORDS_KEY 
3408						DMARK "UNT" 
3408 f5				push af  
3409 3a 1d 34			ld a, (.dmark)  
340c 32 65 ee			ld (debug_mark),a  
340f 3a 1e 34			ld a, (.dmark+1)  
3412 32 66 ee			ld (debug_mark+1),a  
3415 3a 1f 34			ld a, (.dmark+2)  
3418 32 67 ee			ld (debug_mark+2),a  
341b 18 03			jr .pastdmark  
341d ..			.dmark: db "UNT"  
3420 f1			.pastdmark: pop af  
3421			endm  
# End of macro DMARK
3421						CALLMONITOR 
3421 cd 6f ee			call debug_vector  
3424				endm  
# End of macro CALLMONITOR
3424					endif 
3424			 
3424			;	push hl 
3424				FORTH_DSP_POP 
3424 cd 4d 1e			call macro_forth_dsp_pop 
3427				endm 
# End of macro FORTH_DSP_POP
3427			 
3427			;	pop hl 
3427			 
3427				; test if true 
3427			 
3427 cd 1e 0e			call ishlzero 
342a			;	ld a,l 
342a			;	add h 
342a			; 
342a			;	cp 0 
342a			 
342a 20 3e			jr nz, .untilnotdone 
342c			 
342c					if DEBUG_FORTH_WORDS 
342c						DMARK "UNf" 
342c f5				push af  
342d 3a 41 34			ld a, (.dmark)  
3430 32 65 ee			ld (debug_mark),a  
3433 3a 42 34			ld a, (.dmark+1)  
3436 32 66 ee			ld (debug_mark+1),a  
3439 3a 43 34			ld a, (.dmark+2)  
343c 32 67 ee			ld (debug_mark+2),a  
343f 18 03			jr .pastdmark  
3441 ..			.dmark: db "UNf"  
3444 f1			.pastdmark: pop af  
3445			endm  
# End of macro DMARK
3445						CALLMONITOR 
3445 cd 6f ee			call debug_vector  
3448				endm  
# End of macro CALLMONITOR
3448					endif 
3448			 
3448			 
3448			 
3448				FORTH_RSP_POP     ; get rid of DO ptr 
3448 cd 58 1b			call macro_forth_rsp_pop 
344b				endm 
# End of macro FORTH_RSP_POP
344b			 
344b			if DEBUG_FORTH_WORDS 
344b						DMARK "UN>" 
344b f5				push af  
344c 3a 60 34			ld a, (.dmark)  
344f 32 65 ee			ld (debug_mark),a  
3452 3a 61 34			ld a, (.dmark+1)  
3455 32 66 ee			ld (debug_mark+1),a  
3458 3a 62 34			ld a, (.dmark+2)  
345b 32 67 ee			ld (debug_mark+2),a  
345e 18 03			jr .pastdmark  
3460 ..			.dmark: db "UN>"  
3463 f1			.pastdmark: pop af  
3464			endm  
# End of macro DMARK
3464				CALLMONITOR 
3464 cd 6f ee			call debug_vector  
3467				endm  
# End of macro CALLMONITOR
3467			endif 
3467			 
3467					NEXTW 
3467 c3 81 1f			jp macro_next 
346a				endm 
# End of macro NEXTW
346a				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
346a			 
346a			.untilnotdone: 
346a			 
346a			 
346a			;	; get DO ptr 
346a			; 
346a				FORTH_RSP_TOS 
346a cd 4e 1b			call macro_forth_rsp_tos 
346d				endm 
# End of macro FORTH_RSP_TOS
346d			 
346d				;push hl 
346d			 
346d				; not going to DO any more 
346d				; get rid of the RSP pointer as DO will add it back in 
346d				;FORTH_RSP_POP 
346d				;pop hl 
346d			 
346d			 
346d 22 bc e5			ld (os_tok_ptr), hl 
3470					if DEBUG_FORTH_WORDS 
3470						DMARK "UN<" 
3470 f5				push af  
3471 3a 85 34			ld a, (.dmark)  
3474 32 65 ee			ld (debug_mark),a  
3477 3a 86 34			ld a, (.dmark+1)  
347a 32 66 ee			ld (debug_mark+1),a  
347d 3a 87 34			ld a, (.dmark+2)  
3480 32 67 ee			ld (debug_mark+2),a  
3483 18 03			jr .pastdmark  
3485 ..			.dmark: db "UN<"  
3488 f1			.pastdmark: pop af  
3489			endm  
# End of macro DMARK
3489					CALLMONITOR 
3489 cd 6f ee			call debug_vector  
348c				endm  
# End of macro CALLMONITOR
348c				endif 
348c c3 12 20			jp exec1 
348f			 
348f					 
348f			 
348f			 
348f					NEXTW 
348f c3 81 1f			jp macro_next 
3492				endm 
# End of macro NEXTW
3492			 
3492			 
3492			.ENDFLOW: 
3492			 
3492			; eof 
3492			 
# End of file forth_words_flow.asm
3492			; TODO something wrong with the first word of the next word group. no matter which group applies. On device, sc114 is fine. bad memory? 
3492			include "forth_words_logic.asm" 
3492			 
3492			; | ## Logic Words 
3492			 
3492			.NOT: 
3492				CWHEAD .IS 25 "NOT" 3 WORD_FLAG_CODE 
3492 2d				db WORD_SYS_CORE+25             
3493 da 34			dw .IS            
3495 04				db 3 + 1 
3496 .. 00			db "NOT",0              
349a				endm 
# End of macro CWHEAD
349a			; | NOT ( u  -- u ) Inverse true/false on stack | DONE 
349a					if DEBUG_FORTH_WORDS_KEY 
349a						DMARK "NOT" 
349a f5				push af  
349b 3a af 34			ld a, (.dmark)  
349e 32 65 ee			ld (debug_mark),a  
34a1 3a b0 34			ld a, (.dmark+1)  
34a4 32 66 ee			ld (debug_mark+1),a  
34a7 3a b1 34			ld a, (.dmark+2)  
34aa 32 67 ee			ld (debug_mark+2),a  
34ad 18 03			jr .pastdmark  
34af ..			.dmark: db "NOT"  
34b2 f1			.pastdmark: pop af  
34b3			endm  
# End of macro DMARK
34b3						CALLMONITOR 
34b3 cd 6f ee			call debug_vector  
34b6				endm  
# End of macro CALLMONITOR
34b6					endif 
34b6					FORTH_DSP 
34b6 cd 5b 1d			call macro_forth_dsp 
34b9				endm 
# End of macro FORTH_DSP
34b9 7e					ld a,(hl)	; get type of value on TOS 
34ba fe 02				cp DS_TYPE_INUM  
34bc 28 03				jr z, .noti 
34be					NEXTW 
34be c3 81 1f			jp macro_next 
34c1				endm 
# End of macro NEXTW
34c1			.noti:          FORTH_DSP_VALUEHL 
34c1 cd 95 1d			call macro_dsp_valuehl 
34c4				endm 
# End of macro FORTH_DSP_VALUEHL
34c4			;		push hl 
34c4					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
34c4 cd 4d 1e			call macro_forth_dsp_pop 
34c7				endm 
# End of macro FORTH_DSP_POP
34c7			;		pop hl 
34c7 3e 00				ld a,0 
34c9 bd					cp l 
34ca 28 04				jr z, .not2t 
34cc 2e 00				ld l, 0 
34ce 18 02				jr .notip 
34d0			 
34d0 2e ff		.not2t:		ld l, 255 
34d2			 
34d2 26 00		.notip:		ld h, 0	 
34d4			 
34d4 cd 90 1b				call forth_push_numhl 
34d7					NEXTW 
34d7 c3 81 1f			jp macro_next 
34da				endm 
# End of macro NEXTW
34da			 
34da			.IS: 
34da				CWHEAD .LZERO 25 "IS" 2 WORD_FLAG_CODE 
34da 2d				db WORD_SYS_CORE+25             
34db 00 35			dw .LZERO            
34dd 03				db 2 + 1 
34de .. 00			db "IS",0              
34e1				endm 
# End of macro CWHEAD
34e1			; | IS ( s1 s2  -- f ) Push true if string s1 is the same as s2 | TODO 
34e1					if DEBUG_FORTH_WORDS_KEY 
34e1						DMARK "IS." 
34e1 f5				push af  
34e2 3a f6 34			ld a, (.dmark)  
34e5 32 65 ee			ld (debug_mark),a  
34e8 3a f7 34			ld a, (.dmark+1)  
34eb 32 66 ee			ld (debug_mark+1),a  
34ee 3a f8 34			ld a, (.dmark+2)  
34f1 32 67 ee			ld (debug_mark+2),a  
34f4 18 03			jr .pastdmark  
34f6 ..			.dmark: db "IS."  
34f9 f1			.pastdmark: pop af  
34fa			endm  
# End of macro DMARK
34fa						CALLMONITOR 
34fa cd 6f ee			call debug_vector  
34fd				endm  
# End of macro CALLMONITOR
34fd					endif 
34fd					NEXTW 
34fd c3 81 1f			jp macro_next 
3500				endm 
# End of macro NEXTW
3500			.LZERO: 
3500				CWHEAD .TZERO 25 "0<" 2 WORD_FLAG_CODE 
3500 2d				db WORD_SYS_CORE+25             
3501 0a 35			dw .TZERO            
3503 03				db 2 + 1 
3504 .. 00			db "0<",0              
3507				endm 
# End of macro CWHEAD
3507			; | 0< ( u -- f ) Push true if u is less than o | CANT DO UNTIL FLOAT 
3507					NEXTW 
3507 c3 81 1f			jp macro_next 
350a				endm 
# End of macro NEXTW
350a			.TZERO: 
350a				CWHEAD .LESS 26 "0=" 2 WORD_FLAG_CODE 
350a 2e				db WORD_SYS_CORE+26             
350b 51 35			dw .LESS            
350d 03				db 2 + 1 
350e .. 00			db "0=",0              
3511				endm 
# End of macro CWHEAD
3511			; | 0= ( u -- f ) Push true if u equals 0 | DONE 
3511				; TODO add floating point number detection 
3511					;v5 FORTH_DSP_VALUE 
3511					if DEBUG_FORTH_WORDS_KEY 
3511						DMARK "0=." 
3511 f5				push af  
3512 3a 26 35			ld a, (.dmark)  
3515 32 65 ee			ld (debug_mark),a  
3518 3a 27 35			ld a, (.dmark+1)  
351b 32 66 ee			ld (debug_mark+1),a  
351e 3a 28 35			ld a, (.dmark+2)  
3521 32 67 ee			ld (debug_mark+2),a  
3524 18 03			jr .pastdmark  
3526 ..			.dmark: db "0=."  
3529 f1			.pastdmark: pop af  
352a			endm  
# End of macro DMARK
352a						CALLMONITOR 
352a cd 6f ee			call debug_vector  
352d				endm  
# End of macro CALLMONITOR
352d					endif 
352d					FORTH_DSP 
352d cd 5b 1d			call macro_forth_dsp 
3530				endm 
# End of macro FORTH_DSP
3530 7e					ld a,(hl)	; get type of value on TOS 
3531 fe 02				cp DS_TYPE_INUM  
3533 28 00				jr z, .tz_inum 
3535			 
3535				if FORTH_ENABLE_FLOATMATH 
3535					jr .tz_done 
3535			 
3535				endif 
3535					 
3535			 
3535			.tz_inum: 
3535					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3535 cd 95 1d			call macro_dsp_valuehl 
3538				endm 
# End of macro FORTH_DSP_VALUEHL
3538			 
3538			;		push hl 
3538			 
3538					; destroy value TOS 
3538			 
3538					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3538 cd 4d 1e			call macro_forth_dsp_pop 
353b				endm 
# End of macro FORTH_DSP_POP
353b			 
353b			;		pop hl 
353b			 
353b 3e 00				ld a,0 
353d			 
353d bd					cp l 
353e 20 08				jr nz, .tz_notzero 
3540			 
3540 bc					cp h 
3541			 
3541 20 05				jr nz, .tz_notzero 
3543			 
3543			 
3543 21 01 00				ld hl, FORTH_TRUE 
3546 18 03				jr .tz_done 
3548			 
3548 21 00 00		.tz_notzero:	ld hl, FORTH_FALSE 
354b			 
354b					; push value back onto stack for another op etc 
354b			 
354b			.tz_done: 
354b cd 90 1b				call forth_push_numhl 
354e			 
354e					NEXTW 
354e c3 81 1f			jp macro_next 
3551				endm 
# End of macro NEXTW
3551			.LESS: 
3551				CWHEAD .GT 27 "<" 1 WORD_FLAG_CODE 
3551 2f				db WORD_SYS_CORE+27             
3552 ba 35			dw .GT            
3554 02				db 1 + 1 
3555 .. 00			db "<",0              
3557				endm 
# End of macro CWHEAD
3557			; | < ( u1 u2 -- f ) True if u1 is less than u2 | DONE 
3557				; TODO add floating point number detection 
3557					if DEBUG_FORTH_WORDS_KEY 
3557						DMARK "LES" 
3557 f5				push af  
3558 3a 6c 35			ld a, (.dmark)  
355b 32 65 ee			ld (debug_mark),a  
355e 3a 6d 35			ld a, (.dmark+1)  
3561 32 66 ee			ld (debug_mark+1),a  
3564 3a 6e 35			ld a, (.dmark+2)  
3567 32 67 ee			ld (debug_mark+2),a  
356a 18 03			jr .pastdmark  
356c ..			.dmark: db "LES"  
356f f1			.pastdmark: pop af  
3570			endm  
# End of macro DMARK
3570						CALLMONITOR 
3570 cd 6f ee			call debug_vector  
3573				endm  
# End of macro CALLMONITOR
3573					endif 
3573					FORTH_DSP 
3573 cd 5b 1d			call macro_forth_dsp 
3576				endm 
# End of macro FORTH_DSP
3576					;v5 FORTH_DSP_VALUE 
3576 7e					ld a,(hl)	; get type of value on TOS 
3577 fe 02				cp DS_TYPE_INUM  
3579 28 00				jr z, .less_inum 
357b			 
357b				if FORTH_ENABLE_FLOATMATH 
357b					jr .less_done 
357b			 
357b				endif 
357b					 
357b			 
357b			.less_inum: 
357b					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
357b cd 95 1d			call macro_dsp_valuehl 
357e				endm 
# End of macro FORTH_DSP_VALUEHL
357e			 
357e e5					push hl  ; u2 
357f			 
357f					; destroy value TOS 
357f			 
357f					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
357f cd 4d 1e			call macro_forth_dsp_pop 
3582				endm 
# End of macro FORTH_DSP_POP
3582			 
3582			 
3582					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3582 cd 95 1d			call macro_dsp_valuehl 
3585				endm 
# End of macro FORTH_DSP_VALUEHL
3585			 
3585 e5					push hl    ; u1 
3586			 
3586					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3586 cd 4d 1e			call macro_forth_dsp_pop 
3589				endm 
# End of macro FORTH_DSP_POP
3589			 
3589			 
3589 b7			 or a      ;clear carry flag 
358a 01 00 00		 ld bc, FORTH_FALSE 
358d e1			  pop hl    ; u1 
358e d1			  pop de    ; u2 
358f ed 52		  sbc hl,de 
3591 30 03		  jr nc,.lscont   	;	if hl >= de, carry flag will be cleared 
3593			 
3593 01 01 00		 ld bc, FORTH_TRUE 
3596			.lscont:  
3596 c5					push bc 
3597 e1					pop hl 
3598			 
3598					if DEBUG_FORTH_WORDS 
3598						DMARK "LT1" 
3598 f5				push af  
3599 3a ad 35			ld a, (.dmark)  
359c 32 65 ee			ld (debug_mark),a  
359f 3a ae 35			ld a, (.dmark+1)  
35a2 32 66 ee			ld (debug_mark+1),a  
35a5 3a af 35			ld a, (.dmark+2)  
35a8 32 67 ee			ld (debug_mark+2),a  
35ab 18 03			jr .pastdmark  
35ad ..			.dmark: db "LT1"  
35b0 f1			.pastdmark: pop af  
35b1			endm  
# End of macro DMARK
35b1						CALLMONITOR 
35b1 cd 6f ee			call debug_vector  
35b4				endm  
# End of macro CALLMONITOR
35b4					endif 
35b4 cd 90 1b				call forth_push_numhl 
35b7			 
35b7					NEXTW 
35b7 c3 81 1f			jp macro_next 
35ba				endm 
# End of macro NEXTW
35ba			.GT: 
35ba				CWHEAD .EQUAL 28 ">" 1 WORD_FLAG_CODE 
35ba 30				db WORD_SYS_CORE+28             
35bb 23 36			dw .EQUAL            
35bd 02				db 1 + 1 
35be .. 00			db ">",0              
35c0				endm 
# End of macro CWHEAD
35c0			; | > ( u1 u2 -- f ) True if u1 is greater than u2 | DONE 
35c0				; TODO add floating point number detection 
35c0					if DEBUG_FORTH_WORDS_KEY 
35c0						DMARK "GRT" 
35c0 f5				push af  
35c1 3a d5 35			ld a, (.dmark)  
35c4 32 65 ee			ld (debug_mark),a  
35c7 3a d6 35			ld a, (.dmark+1)  
35ca 32 66 ee			ld (debug_mark+1),a  
35cd 3a d7 35			ld a, (.dmark+2)  
35d0 32 67 ee			ld (debug_mark+2),a  
35d3 18 03			jr .pastdmark  
35d5 ..			.dmark: db "GRT"  
35d8 f1			.pastdmark: pop af  
35d9			endm  
# End of macro DMARK
35d9						CALLMONITOR 
35d9 cd 6f ee			call debug_vector  
35dc				endm  
# End of macro CALLMONITOR
35dc					endif 
35dc					FORTH_DSP 
35dc cd 5b 1d			call macro_forth_dsp 
35df				endm 
# End of macro FORTH_DSP
35df					;FORTH_DSP_VALUE 
35df 7e					ld a,(hl)	; get type of value on TOS 
35e0 fe 02				cp DS_TYPE_INUM  
35e2 28 00				jr z, .gt_inum 
35e4			 
35e4				if FORTH_ENABLE_FLOATMATH 
35e4					jr .gt_done 
35e4			 
35e4				endif 
35e4					 
35e4			 
35e4			.gt_inum: 
35e4					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
35e4 cd 95 1d			call macro_dsp_valuehl 
35e7				endm 
# End of macro FORTH_DSP_VALUEHL
35e7			 
35e7 e5					push hl  ; u2 
35e8			 
35e8					; destroy value TOS 
35e8			 
35e8					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
35e8 cd 4d 1e			call macro_forth_dsp_pop 
35eb				endm 
# End of macro FORTH_DSP_POP
35eb			 
35eb			 
35eb					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
35eb cd 95 1d			call macro_dsp_valuehl 
35ee				endm 
# End of macro FORTH_DSP_VALUEHL
35ee			 
35ee e5					push hl    ; u1 
35ef			 
35ef					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
35ef cd 4d 1e			call macro_forth_dsp_pop 
35f2				endm 
# End of macro FORTH_DSP_POP
35f2			 
35f2			 
35f2 b7			 or a      ;clear carry flag 
35f3 01 00 00		 ld bc, FORTH_FALSE 
35f6 e1			  pop hl    ; u1 
35f7 d1			  pop de    ; u2 
35f8 ed 52		  sbc hl,de 
35fa 38 03		  jr c,.gtcont   	;	if hl >= de, carry flag will be cleared 
35fc			 
35fc 01 01 00		 ld bc, FORTH_TRUE 
35ff			.gtcont:  
35ff c5					push bc 
3600 e1					pop hl 
3601			 
3601					if DEBUG_FORTH_WORDS 
3601						DMARK "GT1" 
3601 f5				push af  
3602 3a 16 36			ld a, (.dmark)  
3605 32 65 ee			ld (debug_mark),a  
3608 3a 17 36			ld a, (.dmark+1)  
360b 32 66 ee			ld (debug_mark+1),a  
360e 3a 18 36			ld a, (.dmark+2)  
3611 32 67 ee			ld (debug_mark+2),a  
3614 18 03			jr .pastdmark  
3616 ..			.dmark: db "GT1"  
3619 f1			.pastdmark: pop af  
361a			endm  
# End of macro DMARK
361a						CALLMONITOR 
361a cd 6f ee			call debug_vector  
361d				endm  
# End of macro CALLMONITOR
361d					endif 
361d cd 90 1b				call forth_push_numhl 
3620			 
3620					NEXTW 
3620 c3 81 1f			jp macro_next 
3623				endm 
# End of macro NEXTW
3623			.EQUAL: 
3623				CWHEAD .ENDLOGIC 29 "=" 1 WORD_FLAG_CODE 
3623 31				db WORD_SYS_CORE+29             
3624 8e 36			dw .ENDLOGIC            
3626 02				db 1 + 1 
3627 .. 00			db "=",0              
3629				endm 
# End of macro CWHEAD
3629			; | = ( u1 u2 -- f ) True if u1 equals u2 | DONE 
3629				; TODO add floating point number detection 
3629					if DEBUG_FORTH_WORDS_KEY 
3629						DMARK "EQ." 
3629 f5				push af  
362a 3a 3e 36			ld a, (.dmark)  
362d 32 65 ee			ld (debug_mark),a  
3630 3a 3f 36			ld a, (.dmark+1)  
3633 32 66 ee			ld (debug_mark+1),a  
3636 3a 40 36			ld a, (.dmark+2)  
3639 32 67 ee			ld (debug_mark+2),a  
363c 18 03			jr .pastdmark  
363e ..			.dmark: db "EQ."  
3641 f1			.pastdmark: pop af  
3642			endm  
# End of macro DMARK
3642						CALLMONITOR 
3642 cd 6f ee			call debug_vector  
3645				endm  
# End of macro CALLMONITOR
3645					endif 
3645					FORTH_DSP 
3645 cd 5b 1d			call macro_forth_dsp 
3648				endm 
# End of macro FORTH_DSP
3648					;v5 FORTH_DSP_VALUE 
3648 7e					ld a,(hl)	; get type of value on TOS 
3649 fe 02				cp DS_TYPE_INUM  
364b 28 00				jr z, .eq_inum 
364d			 
364d				if FORTH_ENABLE_FLOATMATH 
364d					jr .eq_done 
364d			 
364d				endif 
364d					 
364d			 
364d			.eq_inum: 
364d					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
364d cd 95 1d			call macro_dsp_valuehl 
3650				endm 
# End of macro FORTH_DSP_VALUEHL
3650			 
3650 e5					push hl 
3651			 
3651					; destroy value TOS 
3651			 
3651					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3651 cd 4d 1e			call macro_forth_dsp_pop 
3654				endm 
# End of macro FORTH_DSP_POP
3654			 
3654			 
3654					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3654 cd 95 1d			call macro_dsp_valuehl 
3657				endm 
# End of macro FORTH_DSP_VALUEHL
3657			 
3657					; one value on hl get other one back 
3657			 
3657 e5					push hl 
3658			 
3658					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3658 cd 4d 1e			call macro_forth_dsp_pop 
365b				endm 
# End of macro FORTH_DSP_POP
365b			 
365b 0e 00				ld c, FORTH_FALSE 
365d			 
365d e1					pop hl 
365e d1					pop de 
365f			 
365f 7b					ld a, e 
3660 bd					cp l 
3661			 
3661 20 06				jr nz, .eq_done 
3663			 
3663 7a					ld a, d 
3664 bc					cp h 
3665			 
3665 20 02				jr nz, .eq_done 
3667			 
3667 0e 01				ld c, FORTH_TRUE 
3669					 
3669			 
3669			 
3669			.eq_done: 
3669			 
3669					; TODO push value back onto stack for another op etc 
3669			 
3669 26 00				ld h, 0 
366b 69					ld l, c 
366c					if DEBUG_FORTH_WORDS 
366c						DMARK "EQ1" 
366c f5				push af  
366d 3a 81 36			ld a, (.dmark)  
3670 32 65 ee			ld (debug_mark),a  
3673 3a 82 36			ld a, (.dmark+1)  
3676 32 66 ee			ld (debug_mark+1),a  
3679 3a 83 36			ld a, (.dmark+2)  
367c 32 67 ee			ld (debug_mark+2),a  
367f 18 03			jr .pastdmark  
3681 ..			.dmark: db "EQ1"  
3684 f1			.pastdmark: pop af  
3685			endm  
# End of macro DMARK
3685						CALLMONITOR 
3685 cd 6f ee			call debug_vector  
3688				endm  
# End of macro CALLMONITOR
3688					endif 
3688 cd 90 1b				call forth_push_numhl 
368b			 
368b					NEXTW 
368b c3 81 1f			jp macro_next 
368e				endm 
# End of macro NEXTW
368e			 
368e			 
368e			.ENDLOGIC: 
368e			; eof 
368e			 
368e			 
# End of file forth_words_logic.asm
368e			include "forth_words_maths.asm" 
368e			 
368e			; | ## Maths Words 
368e			 
368e			.PLUS:	 
368e				CWHEAD .NEG 1 "+" 1 WORD_FLAG_CODE 
368e 15				db WORD_SYS_CORE+1             
368f ec 36			dw .NEG            
3691 02				db 1 + 1 
3692 .. 00			db "+",0              
3694				endm 
# End of macro CWHEAD
3694			; | + ( u u -- u )    Add two numbers and push result   | INT DONE 
3694					if DEBUG_FORTH_WORDS_KEY 
3694						DMARK "PLU" 
3694 f5				push af  
3695 3a a9 36			ld a, (.dmark)  
3698 32 65 ee			ld (debug_mark),a  
369b 3a aa 36			ld a, (.dmark+1)  
369e 32 66 ee			ld (debug_mark+1),a  
36a1 3a ab 36			ld a, (.dmark+2)  
36a4 32 67 ee			ld (debug_mark+2),a  
36a7 18 03			jr .pastdmark  
36a9 ..			.dmark: db "PLU"  
36ac f1			.pastdmark: pop af  
36ad			endm  
# End of macro DMARK
36ad						CALLMONITOR 
36ad cd 6f ee			call debug_vector  
36b0				endm  
# End of macro CALLMONITOR
36b0					endif 
36b0					; add top two values and push back result 
36b0			 
36b0					;for v5 FORTH_DSP_VALUE 
36b0					FORTH_DSP 
36b0 cd 5b 1d			call macro_forth_dsp 
36b3				endm 
# End of macro FORTH_DSP
36b3 7e					ld a,(hl)	; get type of value on TOS 
36b4 fe 02				cp DS_TYPE_INUM  
36b6 28 03				jr z, .dot_inum 
36b8			 
36b8					NEXTW 
36b8 c3 81 1f			jp macro_next 
36bb				endm 
# End of macro NEXTW
36bb			 
36bb			; float maths 
36bb			 
36bb				if FORTH_ENABLE_FLOATMATH 
36bb						inc hl      ; now at start of numeric as string 
36bb			 
36bb					if DEBUG_FORTH_MATHS 
36bb						DMARK "ADD" 
36bb				CALLMONITOR 
36bb					endif 
36bb			 
36bb					;ld ix, hl 
36bb					call CON 
36bb			 
36bb			 
36bb					push hl 
36bb					 
36bb					 
36bb			 
36bb						FORTH_DSP_POP      ; TODO add stock underflow checks and throws  
36bb			 
36bb					; get next number 
36bb			 
36bb						FORTH_DSP_VALUE 
36bb			 
36bb						inc hl      ; now at start of numeric as string 
36bb			 
36bb					;ld ix, hl 
36bb					call CON 
36bb			 
36bb					push hl 
36bb			 
36bb			 
36bb						FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
36bb			 
36bb						; TODO do add 
36bb			 
36bb						call IADD 
36bb			 
36bb						; TODO get result back as ascii 
36bb			 
36bb						; TODO push result  
36bb			 
36bb			 
36bb			 
36bb						jr .dot_done 
36bb				endif 
36bb			 
36bb			.dot_inum: 
36bb			 
36bb			 
36bb					if DEBUG_FORTH_DOT 
36bb						DMARK "+IT" 
36bb f5				push af  
36bc 3a d0 36			ld a, (.dmark)  
36bf 32 65 ee			ld (debug_mark),a  
36c2 3a d1 36			ld a, (.dmark+1)  
36c5 32 66 ee			ld (debug_mark+1),a  
36c8 3a d2 36			ld a, (.dmark+2)  
36cb 32 67 ee			ld (debug_mark+2),a  
36ce 18 03			jr .pastdmark  
36d0 ..			.dmark: db "+IT"  
36d3 f1			.pastdmark: pop af  
36d4			endm  
# End of macro DMARK
36d4				CALLMONITOR 
36d4 cd 6f ee			call debug_vector  
36d7				endm  
# End of macro CALLMONITOR
36d7					endif 
36d7			 
36d7					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
36d7 cd 95 1d			call macro_dsp_valuehl 
36da				endm 
# End of macro FORTH_DSP_VALUEHL
36da			 
36da				; TODO add floating point number detection 
36da			 
36da e5					push hl 
36db			 
36db					; destroy value TOS 
36db			 
36db					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
36db cd 4d 1e			call macro_forth_dsp_pop 
36de				endm 
# End of macro FORTH_DSP_POP
36de			 
36de			 
36de					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
36de cd 95 1d			call macro_dsp_valuehl 
36e1				endm 
# End of macro FORTH_DSP_VALUEHL
36e1			 
36e1					; one value on hl get other one back 
36e1			 
36e1 d1					pop de 
36e2			 
36e2					; do the add 
36e2			 
36e2 19					add hl,de 
36e3			 
36e3					; save it 
36e3			 
36e3			;		push hl	 
36e3			 
36e3					; 
36e3			 
36e3					; destroy value TOS 
36e3			 
36e3					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
36e3 cd 4d 1e			call macro_forth_dsp_pop 
36e6				endm 
# End of macro FORTH_DSP_POP
36e6			 
36e6					; TODO push value back onto stack for another op etc 
36e6			 
36e6			;		pop hl 
36e6			 
36e6			.dot_done: 
36e6 cd 90 1b				call forth_push_numhl 
36e9			 
36e9					NEXTW 
36e9 c3 81 1f			jp macro_next 
36ec				endm 
# End of macro NEXTW
36ec			.NEG: 
36ec			 
36ec				CWHEAD .DIV 3 "-" 1 WORD_FLAG_CODE 
36ec 17				db WORD_SYS_CORE+3             
36ed 2f 37			dw .DIV            
36ef 02				db 1 + 1 
36f0 .. 00			db "-",0              
36f2				endm 
# End of macro CWHEAD
36f2			; | - ( u1 u2 -- u )    Subtract u2 from u1 and push result  | INT DONE 
36f2					if DEBUG_FORTH_WORDS_KEY 
36f2						DMARK "SUB" 
36f2 f5				push af  
36f3 3a 07 37			ld a, (.dmark)  
36f6 32 65 ee			ld (debug_mark),a  
36f9 3a 08 37			ld a, (.dmark+1)  
36fc 32 66 ee			ld (debug_mark+1),a  
36ff 3a 09 37			ld a, (.dmark+2)  
3702 32 67 ee			ld (debug_mark+2),a  
3705 18 03			jr .pastdmark  
3707 ..			.dmark: db "SUB"  
370a f1			.pastdmark: pop af  
370b			endm  
# End of macro DMARK
370b						CALLMONITOR 
370b cd 6f ee			call debug_vector  
370e				endm  
# End of macro CALLMONITOR
370e					endif 
370e			 
370e			 
370e				; TODO add floating point number detection 
370e					; v5 FORTH_DSP_VALUE 
370e					FORTH_DSP 
370e cd 5b 1d			call macro_forth_dsp 
3711				endm 
# End of macro FORTH_DSP
3711 7e					ld a,(hl)	; get type of value on TOS 
3712 fe 02				cp DS_TYPE_INUM  
3714 28 03				jr z, .neg_inum 
3716			 
3716					NEXTW 
3716 c3 81 1f			jp macro_next 
3719				endm 
# End of macro NEXTW
3719			 
3719			; float maths 
3719			 
3719				if FORTH_ENABLE_FLOATMATH 
3719					jr .neg_done 
3719			 
3719				endif 
3719					 
3719			 
3719			.neg_inum: 
3719					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3719 cd 95 1d			call macro_dsp_valuehl 
371c				endm 
# End of macro FORTH_DSP_VALUEHL
371c			 
371c e5					push hl 
371d			 
371d					; destroy value TOS 
371d			 
371d					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
371d cd 4d 1e			call macro_forth_dsp_pop 
3720				endm 
# End of macro FORTH_DSP_POP
3720			 
3720			 
3720					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3720 cd 95 1d			call macro_dsp_valuehl 
3723				endm 
# End of macro FORTH_DSP_VALUEHL
3723			 
3723					; one value on hl get other one back 
3723			 
3723 d1					pop de 
3724			 
3724					; do the sub 
3724			;		ex de, hl 
3724			 
3724 ed 52				sbc hl,de 
3726			 
3726					; save it 
3726			 
3726			;		push hl	 
3726			 
3726					; 
3726			 
3726					; destroy value TOS 
3726			 
3726					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3726 cd 4d 1e			call macro_forth_dsp_pop 
3729				endm 
# End of macro FORTH_DSP_POP
3729			 
3729					; TODO push value back onto stack for another op etc 
3729			 
3729			;		pop hl 
3729			 
3729 cd 90 1b				call forth_push_numhl 
372c			.neg_done: 
372c			 
372c					NEXTW 
372c c3 81 1f			jp macro_next 
372f				endm 
# End of macro NEXTW
372f			.DIV: 
372f				CWHEAD .MUL 4 "/" 1 WORD_FLAG_CODE 
372f 18				db WORD_SYS_CORE+4             
3730 7c 37			dw .MUL            
3732 02				db 1 + 1 
3733 .. 00			db "/",0              
3735				endm 
# End of macro CWHEAD
3735			; | / ( u1 u2 -- result remainder )     Divide u1 by u2 and push result | INT DONE 
3735					if DEBUG_FORTH_WORDS_KEY 
3735						DMARK "DIV" 
3735 f5				push af  
3736 3a 4a 37			ld a, (.dmark)  
3739 32 65 ee			ld (debug_mark),a  
373c 3a 4b 37			ld a, (.dmark+1)  
373f 32 66 ee			ld (debug_mark+1),a  
3742 3a 4c 37			ld a, (.dmark+2)  
3745 32 67 ee			ld (debug_mark+2),a  
3748 18 03			jr .pastdmark  
374a ..			.dmark: db "DIV"  
374d f1			.pastdmark: pop af  
374e			endm  
# End of macro DMARK
374e						CALLMONITOR 
374e cd 6f ee			call debug_vector  
3751				endm  
# End of macro CALLMONITOR
3751					endif 
3751				; TODO add floating point number detection 
3751					; v5 FORTH_DSP_VALUE 
3751					FORTH_DSP 
3751 cd 5b 1d			call macro_forth_dsp 
3754				endm 
# End of macro FORTH_DSP
3754 7e					ld a,(hl)	; get type of value on TOS 
3755 fe 02				cp DS_TYPE_INUM  
3757 28 03				jr z, .div_inum 
3759			 
3759				if FORTH_ENABLE_FLOATMATH 
3759					jr .div_done 
3759			 
3759				endif 
3759					NEXTW 
3759 c3 81 1f			jp macro_next 
375c				endm 
# End of macro NEXTW
375c			.div_inum: 
375c			 
375c					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
375c cd 95 1d			call macro_dsp_valuehl 
375f				endm 
# End of macro FORTH_DSP_VALUEHL
375f			 
375f e5					push hl    ; to go to bc 
3760			 
3760					; destroy value TOS 
3760			 
3760					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3760 cd 4d 1e			call macro_forth_dsp_pop 
3763				endm 
# End of macro FORTH_DSP_POP
3763			 
3763			 
3763					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3763 cd 95 1d			call macro_dsp_valuehl 
3766				endm 
# End of macro FORTH_DSP_VALUEHL
3766			 
3766					; hl to go to de 
3766			 
3766 e5					push hl 
3767			 
3767 c1					pop bc 
3768 d1					pop de		 
3769			 
3769			 
3769					if DEBUG_FORTH_MATHS 
3769						DMARK "DIV" 
3769				CALLMONITOR 
3769					endif 
3769					; one value on hl but move to a get other one back 
3769			 
3769			        
3769 cd 52 0d			call Div16 
376c			 
376c			;	push af	 
376c e5				push hl 
376d c5				push bc 
376e			 
376e					if DEBUG_FORTH_MATHS 
376e						DMARK "DI1" 
376e				CALLMONITOR 
376e					endif 
376e			 
376e					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
376e cd 4d 1e			call macro_forth_dsp_pop 
3771				endm 
# End of macro FORTH_DSP_POP
3771			 
3771			 
3771			 
3771 e1					pop hl    ; result 
3772			 
3772 cd 90 1b				call forth_push_numhl 
3775			 
3775 e1					pop hl    ; reminder 
3776			;		ld h,0 
3776			;		ld l,d 
3776			 
3776 cd 90 1b				call forth_push_numhl 
3779			.div_done: 
3779					NEXTW 
3779 c3 81 1f			jp macro_next 
377c				endm 
# End of macro NEXTW
377c			.MUL: 
377c				CWHEAD .MIN 5 "*" 1 WORD_FLAG_CODE 
377c 19				db WORD_SYS_CORE+5             
377d c1 37			dw .MIN            
377f 02				db 1 + 1 
3780 .. 00			db "*",0              
3782				endm 
# End of macro CWHEAD
3782			; | * ( u1 u2 -- u )     Multiply TOS and push result | INT DONE 
3782				; TODO add floating point number detection 
3782					if DEBUG_FORTH_WORDS_KEY 
3782						DMARK "MUL" 
3782 f5				push af  
3783 3a 97 37			ld a, (.dmark)  
3786 32 65 ee			ld (debug_mark),a  
3789 3a 98 37			ld a, (.dmark+1)  
378c 32 66 ee			ld (debug_mark+1),a  
378f 3a 99 37			ld a, (.dmark+2)  
3792 32 67 ee			ld (debug_mark+2),a  
3795 18 03			jr .pastdmark  
3797 ..			.dmark: db "MUL"  
379a f1			.pastdmark: pop af  
379b			endm  
# End of macro DMARK
379b						CALLMONITOR 
379b cd 6f ee			call debug_vector  
379e				endm  
# End of macro CALLMONITOR
379e					endif 
379e					FORTH_DSP 
379e cd 5b 1d			call macro_forth_dsp 
37a1				endm 
# End of macro FORTH_DSP
37a1					; v5 FORTH_DSP_VALUE 
37a1 7e					ld a,(hl)	; get type of value on TOS 
37a2 fe 02				cp DS_TYPE_INUM  
37a4 28 03				jr z, .mul_inum 
37a6			 
37a6				if FORTH_ENABLE_FLOATMATH 
37a6					jr .mul_done 
37a6			 
37a6				endif 
37a6			 
37a6					NEXTW 
37a6 c3 81 1f			jp macro_next 
37a9				endm 
# End of macro NEXTW
37a9			.mul_inum:	 
37a9			 
37a9					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
37a9 cd 95 1d			call macro_dsp_valuehl 
37ac				endm 
# End of macro FORTH_DSP_VALUEHL
37ac			 
37ac e5					push hl 
37ad			 
37ad					; destroy value TOS 
37ad			 
37ad					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
37ad cd 4d 1e			call macro_forth_dsp_pop 
37b0				endm 
# End of macro FORTH_DSP_POP
37b0			 
37b0			 
37b0					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
37b0 cd 95 1d			call macro_dsp_valuehl 
37b3				endm 
# End of macro FORTH_DSP_VALUEHL
37b3			 
37b3					; one value on hl but move to a get other one back 
37b3			 
37b3 7d					ld a, l 
37b4			 
37b4 d1					pop de 
37b5			 
37b5					; do the mull 
37b5			;		ex de, hl 
37b5			 
37b5 cd 78 0d				call Mult16 
37b8					; save it 
37b8			 
37b8			;		push hl	 
37b8			 
37b8					; 
37b8			 
37b8					; destroy value TOS 
37b8			 
37b8					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
37b8 cd 4d 1e			call macro_forth_dsp_pop 
37bb				endm 
# End of macro FORTH_DSP_POP
37bb			 
37bb					; TODO push value back onto stack for another op etc 
37bb			 
37bb			;		pop hl 
37bb			 
37bb cd 90 1b				call forth_push_numhl 
37be			 
37be			.mul_done: 
37be					NEXTW 
37be c3 81 1f			jp macro_next 
37c1				endm 
# End of macro NEXTW
37c1			 
37c1			 
37c1			 
37c1			 
37c1			.MIN: 
37c1				CWHEAD .MAX 53 "MIN" 3 WORD_FLAG_CODE 
37c1 49				db WORD_SYS_CORE+53             
37c2 42 38			dw .MAX            
37c4 04				db 3 + 1 
37c5 .. 00			db "MIN",0              
37c9				endm 
# End of macro CWHEAD
37c9			; | MIN (  u1 u2 -- u3 ) Whichever is the smallest value is pushed back onto the stack | DONE 
37c9					if DEBUG_FORTH_WORDS_KEY 
37c9						DMARK "MIN" 
37c9 f5				push af  
37ca 3a de 37			ld a, (.dmark)  
37cd 32 65 ee			ld (debug_mark),a  
37d0 3a df 37			ld a, (.dmark+1)  
37d3 32 66 ee			ld (debug_mark+1),a  
37d6 3a e0 37			ld a, (.dmark+2)  
37d9 32 67 ee			ld (debug_mark+2),a  
37dc 18 03			jr .pastdmark  
37de ..			.dmark: db "MIN"  
37e1 f1			.pastdmark: pop af  
37e2			endm  
# End of macro DMARK
37e2						CALLMONITOR 
37e2 cd 6f ee			call debug_vector  
37e5				endm  
# End of macro CALLMONITOR
37e5					endif 
37e5					; get u2 
37e5			 
37e5					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
37e5 cd 95 1d			call macro_dsp_valuehl 
37e8				endm 
# End of macro FORTH_DSP_VALUEHL
37e8			 
37e8 e5					push hl   ; u2 
37e9			 
37e9					; destroy value TOS 
37e9			 
37e9					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
37e9 cd 4d 1e			call macro_forth_dsp_pop 
37ec				endm 
# End of macro FORTH_DSP_POP
37ec			 
37ec					; get u1 
37ec			 
37ec					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
37ec cd 95 1d			call macro_dsp_valuehl 
37ef				endm 
# End of macro FORTH_DSP_VALUEHL
37ef			 
37ef e5					push hl  ; u1 
37f0			 
37f0					; destroy value TOS 
37f0			 
37f0					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
37f0 cd 4d 1e			call macro_forth_dsp_pop 
37f3				endm 
# End of macro FORTH_DSP_POP
37f3			 
37f3 b7			 or a      ;clear carry flag 
37f4 e1			  pop hl    ; u1 
37f5 d1			  pop de    ; u2 
37f6 e5				push hl   ; saved in case hl is lowest 
37f7 ed 52		  sbc hl,de 
37f9 30 23		  jr nc,.mincont   	;	if hl >= de, carry flag will be cleared 
37fb			 
37fb e1				pop hl 
37fc					if DEBUG_FORTH_WORDS 
37fc						DMARK "MIN" 
37fc f5				push af  
37fd 3a 11 38			ld a, (.dmark)  
3800 32 65 ee			ld (debug_mark),a  
3803 3a 12 38			ld a, (.dmark+1)  
3806 32 66 ee			ld (debug_mark+1),a  
3809 3a 13 38			ld a, (.dmark+2)  
380c 32 67 ee			ld (debug_mark+2),a  
380f 18 03			jr .pastdmark  
3811 ..			.dmark: db "MIN"  
3814 f1			.pastdmark: pop af  
3815			endm  
# End of macro DMARK
3815						CALLMONITOR 
3815 cd 6f ee			call debug_vector  
3818				endm  
# End of macro CALLMONITOR
3818					endif 
3818 cd 90 1b				call forth_push_numhl 
381b			 
381b				       NEXTW 
381b c3 81 1f			jp macro_next 
381e				endm 
# End of macro NEXTW
381e			 
381e			.mincont:  
381e c1				pop bc   ; tidy up 
381f eb				ex de , hl  
3820					if DEBUG_FORTH_WORDS 
3820						DMARK "MI1" 
3820 f5				push af  
3821 3a 35 38			ld a, (.dmark)  
3824 32 65 ee			ld (debug_mark),a  
3827 3a 36 38			ld a, (.dmark+1)  
382a 32 66 ee			ld (debug_mark+1),a  
382d 3a 37 38			ld a, (.dmark+2)  
3830 32 67 ee			ld (debug_mark+2),a  
3833 18 03			jr .pastdmark  
3835 ..			.dmark: db "MI1"  
3838 f1			.pastdmark: pop af  
3839			endm  
# End of macro DMARK
3839						CALLMONITOR 
3839 cd 6f ee			call debug_vector  
383c				endm  
# End of macro CALLMONITOR
383c					endif 
383c cd 90 1b				call forth_push_numhl 
383f			 
383f				       NEXTW 
383f c3 81 1f			jp macro_next 
3842				endm 
# End of macro NEXTW
3842			.MAX: 
3842				CWHEAD .RND16 54 "MAX" 3 WORD_FLAG_CODE 
3842 4a				db WORD_SYS_CORE+54             
3843 c3 38			dw .RND16            
3845 04				db 3 + 1 
3846 .. 00			db "MAX",0              
384a				endm 
# End of macro CWHEAD
384a			; | MAX (  u1 u2 -- u3 )  Whichever is the largest value is pushed back onto the stack | DONE 
384a					if DEBUG_FORTH_WORDS_KEY 
384a						DMARK "MAX" 
384a f5				push af  
384b 3a 5f 38			ld a, (.dmark)  
384e 32 65 ee			ld (debug_mark),a  
3851 3a 60 38			ld a, (.dmark+1)  
3854 32 66 ee			ld (debug_mark+1),a  
3857 3a 61 38			ld a, (.dmark+2)  
385a 32 67 ee			ld (debug_mark+2),a  
385d 18 03			jr .pastdmark  
385f ..			.dmark: db "MAX"  
3862 f1			.pastdmark: pop af  
3863			endm  
# End of macro DMARK
3863						CALLMONITOR 
3863 cd 6f ee			call debug_vector  
3866				endm  
# End of macro CALLMONITOR
3866					endif 
3866					; get u2 
3866			 
3866					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3866 cd 95 1d			call macro_dsp_valuehl 
3869				endm 
# End of macro FORTH_DSP_VALUEHL
3869			 
3869 e5					push hl   ; u2 
386a			 
386a					; destroy value TOS 
386a			 
386a					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
386a cd 4d 1e			call macro_forth_dsp_pop 
386d				endm 
# End of macro FORTH_DSP_POP
386d			 
386d					; get u1 
386d			 
386d					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
386d cd 95 1d			call macro_dsp_valuehl 
3870				endm 
# End of macro FORTH_DSP_VALUEHL
3870			 
3870 e5					push hl  ; u1 
3871			 
3871					; destroy value TOS 
3871			 
3871					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3871 cd 4d 1e			call macro_forth_dsp_pop 
3874				endm 
# End of macro FORTH_DSP_POP
3874			 
3874 b7			 or a      ;clear carry flag 
3875 e1			  pop hl    ; u1 
3876 d1			  pop de    ; u2 
3877 e5				push hl   ; saved in case hl is lowest 
3878 ed 52		  sbc hl,de 
387a 38 23		  jr c,.maxcont   	;	if hl <= de, carry flag will be cleared 
387c			 
387c e1				pop hl 
387d					if DEBUG_FORTH_WORDS 
387d						DMARK "MAX" 
387d f5				push af  
387e 3a 92 38			ld a, (.dmark)  
3881 32 65 ee			ld (debug_mark),a  
3884 3a 93 38			ld a, (.dmark+1)  
3887 32 66 ee			ld (debug_mark+1),a  
388a 3a 94 38			ld a, (.dmark+2)  
388d 32 67 ee			ld (debug_mark+2),a  
3890 18 03			jr .pastdmark  
3892 ..			.dmark: db "MAX"  
3895 f1			.pastdmark: pop af  
3896			endm  
# End of macro DMARK
3896						CALLMONITOR 
3896 cd 6f ee			call debug_vector  
3899				endm  
# End of macro CALLMONITOR
3899					endif 
3899 cd 90 1b				call forth_push_numhl 
389c			 
389c				       NEXTW 
389c c3 81 1f			jp macro_next 
389f				endm 
# End of macro NEXTW
389f			 
389f			.maxcont:  
389f c1				pop bc   ; tidy up 
38a0 eb				ex de , hl  
38a1					if DEBUG_FORTH_WORDS 
38a1						DMARK "MA1" 
38a1 f5				push af  
38a2 3a b6 38			ld a, (.dmark)  
38a5 32 65 ee			ld (debug_mark),a  
38a8 3a b7 38			ld a, (.dmark+1)  
38ab 32 66 ee			ld (debug_mark+1),a  
38ae 3a b8 38			ld a, (.dmark+2)  
38b1 32 67 ee			ld (debug_mark+2),a  
38b4 18 03			jr .pastdmark  
38b6 ..			.dmark: db "MA1"  
38b9 f1			.pastdmark: pop af  
38ba			endm  
# End of macro DMARK
38ba						CALLMONITOR 
38ba cd 6f ee			call debug_vector  
38bd				endm  
# End of macro CALLMONITOR
38bd					endif 
38bd cd 90 1b				call forth_push_numhl 
38c0				       NEXTW 
38c0 c3 81 1f			jp macro_next 
38c3				endm 
# End of macro NEXTW
38c3			 
38c3			.RND16: 
38c3				CWHEAD .RND8 58 "RND16" 5 WORD_FLAG_CODE 
38c3 4e				db WORD_SYS_CORE+58             
38c4 f2 38			dw .RND8            
38c6 06				db 5 + 1 
38c7 .. 00			db "RND16",0              
38cd				endm 
# End of macro CWHEAD
38cd			; | RND16 (  -- n ) Generate a random 16bit number and push to stack | DONE 
38cd					if DEBUG_FORTH_WORDS_KEY 
38cd						DMARK "R16" 
38cd f5				push af  
38ce 3a e2 38			ld a, (.dmark)  
38d1 32 65 ee			ld (debug_mark),a  
38d4 3a e3 38			ld a, (.dmark+1)  
38d7 32 66 ee			ld (debug_mark+1),a  
38da 3a e4 38			ld a, (.dmark+2)  
38dd 32 67 ee			ld (debug_mark+2),a  
38e0 18 03			jr .pastdmark  
38e2 ..			.dmark: db "R16"  
38e5 f1			.pastdmark: pop af  
38e6			endm  
# End of macro DMARK
38e6						CALLMONITOR 
38e6 cd 6f ee			call debug_vector  
38e9				endm  
# End of macro CALLMONITOR
38e9					endif 
38e9 cd 1c 0d				call prng16  
38ec cd 90 1b				call forth_push_numhl 
38ef				       NEXTW 
38ef c3 81 1f			jp macro_next 
38f2				endm 
# End of macro NEXTW
38f2			.RND8: 
38f2				CWHEAD .RND 76 "RND8" 4 WORD_FLAG_CODE 
38f2 60				db WORD_SYS_CORE+76             
38f3 27 39			dw .RND            
38f5 05				db 4 + 1 
38f6 .. 00			db "RND8",0              
38fb				endm 
# End of macro CWHEAD
38fb			; | RND8 (  -- n ) Generate a random 8bit number and push to stack | DONE 
38fb					if DEBUG_FORTH_WORDS_KEY 
38fb						DMARK "RN8" 
38fb f5				push af  
38fc 3a 10 39			ld a, (.dmark)  
38ff 32 65 ee			ld (debug_mark),a  
3902 3a 11 39			ld a, (.dmark+1)  
3905 32 66 ee			ld (debug_mark+1),a  
3908 3a 12 39			ld a, (.dmark+2)  
390b 32 67 ee			ld (debug_mark+2),a  
390e 18 03			jr .pastdmark  
3910 ..			.dmark: db "RN8"  
3913 f1			.pastdmark: pop af  
3914			endm  
# End of macro DMARK
3914						CALLMONITOR 
3914 cd 6f ee			call debug_vector  
3917				endm  
# End of macro CALLMONITOR
3917					endif 
3917 2a a3 eb				ld hl,(xrandc) 
391a 23					inc hl 
391b cd 36 0d				call xrnd 
391e 6f					ld l,a	 
391f 26 00				ld h,0 
3921 cd 90 1b				call forth_push_numhl 
3924				       NEXTW 
3924 c3 81 1f			jp macro_next 
3927				endm 
# End of macro NEXTW
3927			.RND: 
3927				CWHEAD .ENDMATHS 76 "RND" 3 WORD_FLAG_CODE 
3927 60				db WORD_SYS_CORE+76             
3928 2d 3a			dw .ENDMATHS            
392a 04				db 3 + 1 
392b .. 00			db "RND",0              
392f				endm 
# End of macro CWHEAD
392f			; | RND ( u1 u2 -- u ) Generate a random number no lower than u1 and no higher than u2 and push to stack | DONE 
392f			 
392f					if DEBUG_FORTH_WORDS_KEY 
392f						DMARK "RND" 
392f f5				push af  
3930 3a 44 39			ld a, (.dmark)  
3933 32 65 ee			ld (debug_mark),a  
3936 3a 45 39			ld a, (.dmark+1)  
3939 32 66 ee			ld (debug_mark+1),a  
393c 3a 46 39			ld a, (.dmark+2)  
393f 32 67 ee			ld (debug_mark+2),a  
3942 18 03			jr .pastdmark  
3944 ..			.dmark: db "RND"  
3947 f1			.pastdmark: pop af  
3948			endm  
# End of macro DMARK
3948						CALLMONITOR 
3948 cd 6f ee			call debug_vector  
394b				endm  
# End of macro CALLMONITOR
394b					endif 
394b					 
394b					FORTH_DSP_VALUEHL    ; upper range 
394b cd 95 1d			call macro_dsp_valuehl 
394e				endm 
# End of macro FORTH_DSP_VALUEHL
394e			 
394e 22 a7 eb				ld (LFSRSeed), hl	 
3951			 
3951					if DEBUG_FORTH_WORDS 
3951						DMARK "RN1" 
3951 f5				push af  
3952 3a 66 39			ld a, (.dmark)  
3955 32 65 ee			ld (debug_mark),a  
3958 3a 67 39			ld a, (.dmark+1)  
395b 32 66 ee			ld (debug_mark+1),a  
395e 3a 68 39			ld a, (.dmark+2)  
3961 32 67 ee			ld (debug_mark+2),a  
3964 18 03			jr .pastdmark  
3966 ..			.dmark: db "RN1"  
3969 f1			.pastdmark: pop af  
396a			endm  
# End of macro DMARK
396a						CALLMONITOR 
396a cd 6f ee			call debug_vector  
396d				endm  
# End of macro CALLMONITOR
396d					endif 
396d					FORTH_DSP_POP 
396d cd 4d 1e			call macro_forth_dsp_pop 
3970				endm 
# End of macro FORTH_DSP_POP
3970			 
3970					FORTH_DSP_VALUEHL    ; low range 
3970 cd 95 1d			call macro_dsp_valuehl 
3973				endm 
# End of macro FORTH_DSP_VALUEHL
3973			 
3973					if DEBUG_FORTH_WORDS 
3973						DMARK "RN2" 
3973 f5				push af  
3974 3a 88 39			ld a, (.dmark)  
3977 32 65 ee			ld (debug_mark),a  
397a 3a 89 39			ld a, (.dmark+1)  
397d 32 66 ee			ld (debug_mark+1),a  
3980 3a 8a 39			ld a, (.dmark+2)  
3983 32 67 ee			ld (debug_mark+2),a  
3986 18 03			jr .pastdmark  
3988 ..			.dmark: db "RN2"  
398b f1			.pastdmark: pop af  
398c			endm  
# End of macro DMARK
398c						CALLMONITOR 
398c cd 6f ee			call debug_vector  
398f				endm  
# End of macro CALLMONITOR
398f					endif 
398f 22 a9 eb				ld (LFSRSeed+2), hl 
3992			 
3992					FORTH_DSP_POP 
3992 cd 4d 1e			call macro_forth_dsp_pop 
3995				endm 
# End of macro FORTH_DSP_POP
3995			 
3995 e5					push hl 
3996			 
3996 e1			.inrange:	pop hl 
3997 cd 1c 0d				call prng16  
399a					if DEBUG_FORTH_WORDS 
399a						DMARK "RN3" 
399a f5				push af  
399b 3a af 39			ld a, (.dmark)  
399e 32 65 ee			ld (debug_mark),a  
39a1 3a b0 39			ld a, (.dmark+1)  
39a4 32 66 ee			ld (debug_mark+1),a  
39a7 3a b1 39			ld a, (.dmark+2)  
39aa 32 67 ee			ld (debug_mark+2),a  
39ad 18 03			jr .pastdmark  
39af ..			.dmark: db "RN3"  
39b2 f1			.pastdmark: pop af  
39b3			endm  
# End of macro DMARK
39b3						CALLMONITOR 
39b3 cd 6f ee			call debug_vector  
39b6				endm  
# End of macro CALLMONITOR
39b6					endif 
39b6					 
39b6					; if the range is 8bit knock out the high byte 
39b6			 
39b6 ed 5b a7 eb			ld de, (LFSRSeed)     ; check high level 
39ba			 
39ba 3e 00				ld a, 0 
39bc ba					cp d  
39bd 20 1e				jr nz, .hirange 
39bf 26 00				ld h, 0   ; knock it down to 8bit 
39c1			 
39c1					if DEBUG_FORTH_WORDS 
39c1						DMARK "RNk" 
39c1 f5				push af  
39c2 3a d6 39			ld a, (.dmark)  
39c5 32 65 ee			ld (debug_mark),a  
39c8 3a d7 39			ld a, (.dmark+1)  
39cb 32 66 ee			ld (debug_mark+1),a  
39ce 3a d8 39			ld a, (.dmark+2)  
39d1 32 67 ee			ld (debug_mark+2),a  
39d4 18 03			jr .pastdmark  
39d6 ..			.dmark: db "RNk"  
39d9 f1			.pastdmark: pop af  
39da			endm  
# End of macro DMARK
39da						CALLMONITOR 
39da cd 6f ee			call debug_vector  
39dd				endm  
# End of macro CALLMONITOR
39dd					endif 
39dd			.hirange:   
39dd e5					push hl  
39de b7					or a  
39df ed 52		                sbc hl, de 
39e1			 
39e1					;call cmp16 
39e1			 
39e1 30 b3				jr nc, .inrange      ; if hl >= de, carry flag is cleared 
39e3 e1					pop hl 
39e4 e5					push hl 
39e5			 
39e5					if DEBUG_FORTH_WORDS 
39e5						DMARK "RN4" 
39e5 f5				push af  
39e6 3a fa 39			ld a, (.dmark)  
39e9 32 65 ee			ld (debug_mark),a  
39ec 3a fb 39			ld a, (.dmark+1)  
39ef 32 66 ee			ld (debug_mark+1),a  
39f2 3a fc 39			ld a, (.dmark+2)  
39f5 32 67 ee			ld (debug_mark+2),a  
39f8 18 03			jr .pastdmark  
39fa ..			.dmark: db "RN4"  
39fd f1			.pastdmark: pop af  
39fe			endm  
# End of macro DMARK
39fe						CALLMONITOR 
39fe cd 6f ee			call debug_vector  
3a01				endm  
# End of macro CALLMONITOR
3a01					endif 
3a01 ed 5b a9 eb			ld de, (LFSRSeed+2)   ; check low range 
3a05					;call cmp16 
3a05				 
3a05 b7					or a  
3a06 ed 52		                sbc hl, de 
3a08 38 8c				jr c, .inrange 
3a0a			 
3a0a e1					pop hl 
3a0b					 
3a0b					if DEBUG_FORTH_WORDS 
3a0b						DMARK "RNd" 
3a0b f5				push af  
3a0c 3a 20 3a			ld a, (.dmark)  
3a0f 32 65 ee			ld (debug_mark),a  
3a12 3a 21 3a			ld a, (.dmark+1)  
3a15 32 66 ee			ld (debug_mark+1),a  
3a18 3a 22 3a			ld a, (.dmark+2)  
3a1b 32 67 ee			ld (debug_mark+2),a  
3a1e 18 03			jr .pastdmark  
3a20 ..			.dmark: db "RNd"  
3a23 f1			.pastdmark: pop af  
3a24			endm  
# End of macro DMARK
3a24						CALLMONITOR 
3a24 cd 6f ee			call debug_vector  
3a27				endm  
# End of macro CALLMONITOR
3a27					endif 
3a27			 
3a27			 
3a27 cd 90 1b				call forth_push_numhl 
3a2a				       NEXTW 
3a2a c3 81 1f			jp macro_next 
3a2d				endm 
# End of macro NEXTW
3a2d			 
3a2d			.ENDMATHS: 
3a2d			 
3a2d			; eof 
3a2d			 
# End of file forth_words_maths.asm
3a2d			include "forth_words_display.asm" 
3a2d			 
3a2d			; | ## Display Words 
3a2d			 
3a2d			.ACT: 
3a2d			 
3a2d				CWHEAD .INFO 78 "ACTIVE" 6 WORD_FLAG_CODE 
3a2d 62				db WORD_SYS_CORE+78             
3a2e 79 3a			dw .INFO            
3a30 07				db 6 + 1 
3a31 .. 00			db "ACTIVE",0              
3a38				endm 
# End of macro CWHEAD
3a38			; | ACTIVE ( -- s ) Push the next char for an activity indicator to TOS | DONE 
3a38			;  
3a38			; | | To display a pulsing activity indicator in a processing loop do this... 
3a38			; | | e.g. $ff $00 do active . ..... Your code ..... loop 
3a38			 
3a38					if DEBUG_FORTH_WORDS_KEY 
3a38						DMARK "ACT" 
3a38 f5				push af  
3a39 3a 4d 3a			ld a, (.dmark)  
3a3c 32 65 ee			ld (debug_mark),a  
3a3f 3a 4e 3a			ld a, (.dmark+1)  
3a42 32 66 ee			ld (debug_mark+1),a  
3a45 3a 4f 3a			ld a, (.dmark+2)  
3a48 32 67 ee			ld (debug_mark+2),a  
3a4b 18 03			jr .pastdmark  
3a4d ..			.dmark: db "ACT"  
3a50 f1			.pastdmark: pop af  
3a51			endm  
# End of macro DMARK
3a51						CALLMONITOR 
3a51 cd 6f ee			call debug_vector  
3a54				endm  
# End of macro CALLMONITOR
3a54					endif 
3a54 cd 1f 0b				call active 
3a57					if DEBUG_FORTH_WORDS 
3a57						DMARK "ACp" 
3a57 f5				push af  
3a58 3a 6c 3a			ld a, (.dmark)  
3a5b 32 65 ee			ld (debug_mark),a  
3a5e 3a 6d 3a			ld a, (.dmark+1)  
3a61 32 66 ee			ld (debug_mark+1),a  
3a64 3a 6e 3a			ld a, (.dmark+2)  
3a67 32 67 ee			ld (debug_mark+2),a  
3a6a 18 03			jr .pastdmark  
3a6c ..			.dmark: db "ACp"  
3a6f f1			.pastdmark: pop af  
3a70			endm  
# End of macro DMARK
3a70						CALLMONITOR 
3a70 cd 6f ee			call debug_vector  
3a73				endm  
# End of macro CALLMONITOR
3a73					endif 
3a73 cd fe 1b				call forth_push_str 
3a76			 
3a76					NEXTW 
3a76 c3 81 1f			jp macro_next 
3a79				endm 
# End of macro NEXTW
3a79			.INFO: 
3a79			 
3a79				CWHEAD .ATP 78 "INFO" 4 WORD_FLAG_CODE 
3a79 62				db WORD_SYS_CORE+78             
3a7a 96 3a			dw .ATP            
3a7c 05				db 4 + 1 
3a7d .. 00			db "INFO",0              
3a82				endm 
# End of macro CWHEAD
3a82			; | INFO ( u1 u2 -- )  Use the top two strings on stack to fill in an info window over two lines. Causes a wait for key press to continue. | DONE 
3a82					FORTH_DSP_VALUEHL 
3a82 cd 95 1d			call macro_dsp_valuehl 
3a85				endm 
# End of macro FORTH_DSP_VALUEHL
3a85			 
3a85					FORTH_DSP_POP 
3a85 cd 4d 1e			call macro_forth_dsp_pop 
3a88				endm 
# End of macro FORTH_DSP_POP
3a88			 
3a88 e5					push hl 
3a89			 
3a89					FORTH_DSP_VALUEHL 
3a89 cd 95 1d			call macro_dsp_valuehl 
3a8c				endm 
# End of macro FORTH_DSP_VALUEHL
3a8c			 
3a8c					FORTH_DSP_POP 
3a8c cd 4d 1e			call macro_forth_dsp_pop 
3a8f				endm 
# End of macro FORTH_DSP_POP
3a8f			 
3a8f d1					pop de 
3a90			 
3a90 cd 59 0b				call info_panel 
3a93			 
3a93			 
3a93					NEXTW 
3a93 c3 81 1f			jp macro_next 
3a96				endm 
# End of macro NEXTW
3a96			.ATP: 
3a96				CWHEAD .FB 78 "AT?" 3 WORD_FLAG_CODE 
3a96 62				db WORD_SYS_CORE+78             
3a97 0d 3b			dw .FB            
3a99 04				db 3 + 1 
3a9a .. 00			db "AT?",0              
3a9e				endm 
# End of macro CWHEAD
3a9e			; | AT? ( -- c r )  Push to stack the current position of the next print | TO TEST 
3a9e					if DEBUG_FORTH_WORDS_KEY 
3a9e						DMARK "AT?" 
3a9e f5				push af  
3a9f 3a b3 3a			ld a, (.dmark)  
3aa2 32 65 ee			ld (debug_mark),a  
3aa5 3a b4 3a			ld a, (.dmark+1)  
3aa8 32 66 ee			ld (debug_mark+1),a  
3aab 3a b5 3a			ld a, (.dmark+2)  
3aae 32 67 ee			ld (debug_mark+2),a  
3ab1 18 03			jr .pastdmark  
3ab3 ..			.dmark: db "AT?"  
3ab6 f1			.pastdmark: pop af  
3ab7			endm  
# End of macro DMARK
3ab7						CALLMONITOR 
3ab7 cd 6f ee			call debug_vector  
3aba				endm  
# End of macro CALLMONITOR
3aba					endif 
3aba 3a 58 ea				ld a, (f_cursor_ptr) 
3abd			 
3abd			if DEBUG_FORTH_WORDS 
3abd				DMARK "AT?" 
3abd f5				push af  
3abe 3a d2 3a			ld a, (.dmark)  
3ac1 32 65 ee			ld (debug_mark),a  
3ac4 3a d3 3a			ld a, (.dmark+1)  
3ac7 32 66 ee			ld (debug_mark+1),a  
3aca 3a d4 3a			ld a, (.dmark+2)  
3acd 32 67 ee			ld (debug_mark+2),a  
3ad0 18 03			jr .pastdmark  
3ad2 ..			.dmark: db "AT?"  
3ad5 f1			.pastdmark: pop af  
3ad6			endm  
# End of macro DMARK
3ad6				CALLMONITOR 
3ad6 cd 6f ee			call debug_vector  
3ad9				endm  
# End of macro CALLMONITOR
3ad9			endif	 
3ad9					; count the number of rows 
3ad9			 
3ad9 06 00				ld b, 0 
3adb 4f			.atpr:		ld c, a    ; save in case we go below zero 
3adc d6 28				sub display_cols 
3ade f2 e4 3a				jp p, .atprunder 
3ae1 04					inc b 
3ae2 18 f7				jr .atpr 
3ae4			.atprunder:	 
3ae4			if DEBUG_FORTH_WORDS 
3ae4				DMARK "A?2" 
3ae4 f5				push af  
3ae5 3a f9 3a			ld a, (.dmark)  
3ae8 32 65 ee			ld (debug_mark),a  
3aeb 3a fa 3a			ld a, (.dmark+1)  
3aee 32 66 ee			ld (debug_mark+1),a  
3af1 3a fb 3a			ld a, (.dmark+2)  
3af4 32 67 ee			ld (debug_mark+2),a  
3af7 18 03			jr .pastdmark  
3af9 ..			.dmark: db "A?2"  
3afc f1			.pastdmark: pop af  
3afd			endm  
# End of macro DMARK
3afd				CALLMONITOR 
3afd cd 6f ee			call debug_vector  
3b00				endm  
# End of macro CALLMONITOR
3b00			endif	 
3b00 26 00				ld h, 0 
3b02 69					ld l, c 
3b03 cd 90 1b				call forth_push_numhl 
3b06 68					ld l, b  
3b07 cd 90 1b				call forth_push_numhl 
3b0a			 
3b0a			 
3b0a				NEXTW 
3b0a c3 81 1f			jp macro_next 
3b0d				endm 
# End of macro NEXTW
3b0d			 
3b0d			.FB: 
3b0d				CWHEAD .EMIT 7 "FB" 2 WORD_FLAG_CODE 
3b0d 1b				db WORD_SYS_CORE+7             
3b0e 5b 3b			dw .EMIT            
3b10 03				db 2 + 1 
3b11 .. 00			db "FB",0              
3b14				endm 
# End of macro CWHEAD
3b14			; | FB ( u -- ) Select frame buffer ID u (1-3)  |  DONE 
3b14			; | | Default frame buffer is 1. System uses 0 which can't be selected for system messages etc. 
3b14			; | | Selecting the frame buffer wont display unless automatic display is setup (default). 
3b14			; | | If automatic display is off then updates will not be shown until DRAW is used. 
3b14					if DEBUG_FORTH_WORDS_KEY 
3b14						DMARK "FB." 
3b14 f5				push af  
3b15 3a 29 3b			ld a, (.dmark)  
3b18 32 65 ee			ld (debug_mark),a  
3b1b 3a 2a 3b			ld a, (.dmark+1)  
3b1e 32 66 ee			ld (debug_mark+1),a  
3b21 3a 2b 3b			ld a, (.dmark+2)  
3b24 32 67 ee			ld (debug_mark+2),a  
3b27 18 03			jr .pastdmark  
3b29 ..			.dmark: db "FB."  
3b2c f1			.pastdmark: pop af  
3b2d			endm  
# End of macro DMARK
3b2d						CALLMONITOR 
3b2d cd 6f ee			call debug_vector  
3b30				endm  
# End of macro CALLMONITOR
3b30					endif 
3b30			 
3b30					FORTH_DSP_VALUEHL 
3b30 cd 95 1d			call macro_dsp_valuehl 
3b33				endm 
# End of macro FORTH_DSP_VALUEHL
3b33			 
3b33 7d					ld a, l 
3b34 fe 01				cp 1 
3b36 20 05				jr nz, .fbn1 
3b38 21 0a ed				ld hl, display_fb1 
3b3b 18 15				jr .fbset 
3b3d fe 02		.fbn1:		cp 2 
3b3f 20 05				jr nz, .fbn2 
3b41 21 c8 eb				ld hl, display_fb2 
3b44 18 0c				jr .fbset 
3b46 fe 03		.fbn2:		cp 3 
3b48 20 05				jr nz, .fbn3 
3b4a 21 69 ec				ld hl, display_fb3 
3b4d 18 03				jr .fbset 
3b4f			.fbn3:		 ; if invalid number select first 
3b4f 21 0a ed				ld hl, display_fb1 
3b52 22 c6 eb		.fbset:		ld (display_fb_active), hl 
3b55			 
3b55					FORTH_DSP_POP 
3b55 cd 4d 1e			call macro_forth_dsp_pop 
3b58				endm 
# End of macro FORTH_DSP_POP
3b58			 
3b58					NEXTW 
3b58 c3 81 1f			jp macro_next 
3b5b				endm 
# End of macro NEXTW
3b5b			 
3b5b			 
3b5b			.EMIT: 
3b5b				CWHEAD .DOTH 7 "EMIT" 4 WORD_FLAG_CODE 
3b5b 1b				db WORD_SYS_CORE+7             
3b5c ac 3b			dw .DOTH            
3b5e 05				db 4 + 1 
3b5f .. 00			db "EMIT",0              
3b64				endm 
# End of macro CWHEAD
3b64			; |  EMIT ( u -- ) Display ascii character  TOS   | DONE 
3b64					; get value off TOS and display it 
3b64			 
3b64					if DEBUG_FORTH_WORDS_KEY 
3b64						DMARK "EMT" 
3b64 f5				push af  
3b65 3a 79 3b			ld a, (.dmark)  
3b68 32 65 ee			ld (debug_mark),a  
3b6b 3a 7a 3b			ld a, (.dmark+1)  
3b6e 32 66 ee			ld (debug_mark+1),a  
3b71 3a 7b 3b			ld a, (.dmark+2)  
3b74 32 67 ee			ld (debug_mark+2),a  
3b77 18 03			jr .pastdmark  
3b79 ..			.dmark: db "EMT"  
3b7c f1			.pastdmark: pop af  
3b7d			endm  
# End of macro DMARK
3b7d						CALLMONITOR 
3b7d cd 6f ee			call debug_vector  
3b80				endm  
# End of macro CALLMONITOR
3b80					endif 
3b80			 
3b80					FORTH_DSP_VALUEHL 
3b80 cd 95 1d			call macro_dsp_valuehl 
3b83				endm 
# End of macro FORTH_DSP_VALUEHL
3b83			 
3b83 7d					ld a,l 
3b84			 
3b84					; TODO write to display 
3b84			 
3b84 32 b9 e4				ld (os_input), a 
3b87 3e 00				ld a, 0 
3b89 32 ba e4				ld (os_input+1), a 
3b8c					 
3b8c 3a 58 ea				ld a, (f_cursor_ptr) 
3b8f 11 b9 e4				ld de, os_input 
3b92 cd db 0b				call str_at_display 
3b95			 
3b95			 
3b95 3a 36 ea				ld a,(cli_autodisplay) 
3b98 fe 00				cp 0 
3b9a 28 03				jr z, .enoupdate 
3b9c cd eb 0b						call update_display 
3b9f					.enoupdate: 
3b9f			 
3b9f 3a 58 ea				ld a, (f_cursor_ptr) 
3ba2 3c					inc a 
3ba3 32 58 ea				ld (f_cursor_ptr), a   ; save new pos 
3ba6			 
3ba6			 
3ba6					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3ba6 cd 4d 1e			call macro_forth_dsp_pop 
3ba9				endm 
# End of macro FORTH_DSP_POP
3ba9			  
3ba9			 
3ba9					NEXTW 
3ba9 c3 81 1f			jp macro_next 
3bac				endm 
# End of macro NEXTW
3bac			.DOTH: 
3bac				CWHEAD .DOTF 8 ".-" 2 WORD_FLAG_CODE 
3bac 1c				db WORD_SYS_CORE+8             
3bad dc 3b			dw .DOTF            
3baf 03				db 2 + 1 
3bb0 .. 00			db ".-",0              
3bb3				endm 
# End of macro CWHEAD
3bb3			        ; | .- ( u -- ) Display TOS replacing any dashes with spaces. Means you dont need to wrap strings in double quotes!   | DONE 
3bb3					; get value off TOS and display it 
3bb3					if DEBUG_FORTH_WORDS_KEY 
3bb3						DMARK "DTD" 
3bb3 f5				push af  
3bb4 3a c8 3b			ld a, (.dmark)  
3bb7 32 65 ee			ld (debug_mark),a  
3bba 3a c9 3b			ld a, (.dmark+1)  
3bbd 32 66 ee			ld (debug_mark+1),a  
3bc0 3a ca 3b			ld a, (.dmark+2)  
3bc3 32 67 ee			ld (debug_mark+2),a  
3bc6 18 03			jr .pastdmark  
3bc8 ..			.dmark: db "DTD"  
3bcb f1			.pastdmark: pop af  
3bcc			endm  
# End of macro DMARK
3bcc						CALLMONITOR 
3bcc cd 6f ee			call debug_vector  
3bcf				endm  
# End of macro CALLMONITOR
3bcf					endif 
3bcf 0e 01			ld c, 1	  ; flag for removal of '-' enabled 
3bd1 3e 00			ld a, 0 
3bd3 32 37 ea			ld (cli_mvdot), a 
3bd6 c3 33 3c			jp .dotgo 
3bd9				NEXTW 
3bd9 c3 81 1f			jp macro_next 
3bdc				endm 
# End of macro NEXTW
3bdc			.DOTF: 
3bdc				CWHEAD .DOT 8 ".>" 2 WORD_FLAG_CODE 
3bdc 1c				db WORD_SYS_CORE+8             
3bdd 0a 3c			dw .DOT            
3bdf 03				db 2 + 1 
3be0 .. 00			db ".>",0              
3be3				endm 
# End of macro CWHEAD
3be3			        ; | .> ( u -- ) Display TOS and move the next display point with display  | DONE 
3be3					; get value off TOS and display it 
3be3			        ; TODO BUG adds extra spaces 
3be3			        ; TODO BUG handle numerics? 
3be3					if DEBUG_FORTH_WORDS_KEY 
3be3						DMARK "DTC" 
3be3 f5				push af  
3be4 3a f8 3b			ld a, (.dmark)  
3be7 32 65 ee			ld (debug_mark),a  
3bea 3a f9 3b			ld a, (.dmark+1)  
3bed 32 66 ee			ld (debug_mark+1),a  
3bf0 3a fa 3b			ld a, (.dmark+2)  
3bf3 32 67 ee			ld (debug_mark+2),a  
3bf6 18 03			jr .pastdmark  
3bf8 ..			.dmark: db "DTC"  
3bfb f1			.pastdmark: pop af  
3bfc			endm  
# End of macro DMARK
3bfc						CALLMONITOR 
3bfc cd 6f ee			call debug_vector  
3bff				endm  
# End of macro CALLMONITOR
3bff					endif 
3bff 3e 01			ld a, 1 
3c01 32 37 ea			ld (cli_mvdot), a 
3c04 c3 33 3c			jp .dotgo 
3c07				NEXTW 
3c07 c3 81 1f			jp macro_next 
3c0a				endm 
# End of macro NEXTW
3c0a			 
3c0a			.DOT: 
3c0a				CWHEAD .CLS 8 "." 1 WORD_FLAG_CODE 
3c0a 1c				db WORD_SYS_CORE+8             
3c0b e6 3d			dw .CLS            
3c0d 02				db 1 + 1 
3c0e .. 00			db ".",0              
3c10				endm 
# End of macro CWHEAD
3c10			        ; | . ( u -- ) Display TOS. Does not move next print position. Use .> if you want that. | DONE 
3c10					; get value off TOS and display it 
3c10			 
3c10					if DEBUG_FORTH_WORDS_KEY 
3c10						DMARK "DOT" 
3c10 f5				push af  
3c11 3a 25 3c			ld a, (.dmark)  
3c14 32 65 ee			ld (debug_mark),a  
3c17 3a 26 3c			ld a, (.dmark+1)  
3c1a 32 66 ee			ld (debug_mark+1),a  
3c1d 3a 27 3c			ld a, (.dmark+2)  
3c20 32 67 ee			ld (debug_mark+2),a  
3c23 18 03			jr .pastdmark  
3c25 ..			.dmark: db "DOT"  
3c28 f1			.pastdmark: pop af  
3c29			endm  
# End of macro DMARK
3c29						CALLMONITOR 
3c29 cd 6f ee			call debug_vector  
3c2c				endm  
# End of macro CALLMONITOR
3c2c					endif 
3c2c 3e 00			ld a, 0 
3c2e 32 37 ea			ld (cli_mvdot), a 
3c31 0e 00		ld c, 0	  ; flag for removal of '-' disabled 
3c33				 
3c33			 
3c33			.dotgo: 
3c33			 
3c33			; move up type to on stack for parserv5 
3c33					FORTH_DSP 
3c33 cd 5b 1d			call macro_forth_dsp 
3c36				endm 
# End of macro FORTH_DSP
3c36				;FORTH_DSP_VALUE  
3c36			 
3c36			if DEBUG_FORTH_DOT 
3c36				DMARK "DOT" 
3c36 f5				push af  
3c37 3a 4b 3c			ld a, (.dmark)  
3c3a 32 65 ee			ld (debug_mark),a  
3c3d 3a 4c 3c			ld a, (.dmark+1)  
3c40 32 66 ee			ld (debug_mark+1),a  
3c43 3a 4d 3c			ld a, (.dmark+2)  
3c46 32 67 ee			ld (debug_mark+2),a  
3c49 18 03			jr .pastdmark  
3c4b ..			.dmark: db "DOT"  
3c4e f1			.pastdmark: pop af  
3c4f			endm  
# End of macro DMARK
3c4f				CALLMONITOR 
3c4f cd 6f ee			call debug_vector  
3c52				endm  
# End of macro CALLMONITOR
3c52			endif	 
3c52			;		.print: 
3c52			 
3c52 7e				ld a,(hl)  ; work out what type of value is on the TOS 
3c53 23				inc hl   ; position to the actual value 
3c54 fe 01			cp DS_TYPE_STR 
3c56 20 06			jr nz, .dotnum1  
3c58			 
3c58			; display string 
3c58				FORTH_DSP_VALUE  
3c58 cd 7e 1d			call macro_forth_dsp_value 
3c5b				endm 
# End of macro FORTH_DSP_VALUE
3c5b eb				ex de,hl 
3c5c 18 49			jr .dotwrite 
3c5e			 
3c5e			.dotnum1: 
3c5e fe 02			cp DS_TYPE_INUM 
3c60 20 44			jr nz, .dotflot 
3c62			 
3c62			 
3c62			; display number 
3c62			 
3c62			;	push hl 
3c62			;	call clear_display 
3c62			;	pop hl 
3c62			 
3c62 5e				ld e, (hl) 
3c63 23				inc hl 
3c64 56				ld d, (hl) 
3c65 21 bb e2			ld hl, scratch 
3c68			if DEBUG_FORTH_DOT 
3c68				DMARK "DT1" 
3c68 f5				push af  
3c69 3a 7d 3c			ld a, (.dmark)  
3c6c 32 65 ee			ld (debug_mark),a  
3c6f 3a 7e 3c			ld a, (.dmark+1)  
3c72 32 66 ee			ld (debug_mark+1),a  
3c75 3a 7f 3c			ld a, (.dmark+2)  
3c78 32 67 ee			ld (debug_mark+2),a  
3c7b 18 03			jr .pastdmark  
3c7d ..			.dmark: db "DT1"  
3c80 f1			.pastdmark: pop af  
3c81			endm  
# End of macro DMARK
3c81				CALLMONITOR 
3c81 cd 6f ee			call debug_vector  
3c84				endm  
# End of macro CALLMONITOR
3c84			endif	 
3c84			 
3c84 cd 0a 11			call uitoa_16 
3c87 eb				ex de,hl 
3c88			 
3c88			if DEBUG_FORTH_DOT 
3c88				DMARK "DT2" 
3c88 f5				push af  
3c89 3a 9d 3c			ld a, (.dmark)  
3c8c 32 65 ee			ld (debug_mark),a  
3c8f 3a 9e 3c			ld a, (.dmark+1)  
3c92 32 66 ee			ld (debug_mark+1),a  
3c95 3a 9f 3c			ld a, (.dmark+2)  
3c98 32 67 ee			ld (debug_mark+2),a  
3c9b 18 03			jr .pastdmark  
3c9d ..			.dmark: db "DT2"  
3ca0 f1			.pastdmark: pop af  
3ca1			endm  
# End of macro DMARK
3ca1				CALLMONITOR 
3ca1 cd 6f ee			call debug_vector  
3ca4				endm  
# End of macro CALLMONITOR
3ca4			endif	 
3ca4			 
3ca4			;	ld de, os_word_scratch 
3ca4 18 01			jr .dotwrite 
3ca6			 
3ca6 00			.dotflot:   nop 
3ca7			; TODO print floating point number 
3ca7			 
3ca7			.dotwrite:		 
3ca7			 
3ca7					; if c is set then set all '-' to spaces 
3ca7					; need to also take into account .>  
3ca7			 
3ca7 3e 01				ld a, 1 
3ca9 b9					cp c 
3caa 20 67				jr nz, .nodashswap 
3cac			 
3cac					; DE has the string to write, working with HL 
3cac			 
3cac 06 ff				ld b, 255 
3cae d5					push de 
3caf e1					pop hl 
3cb0			 
3cb0			if DEBUG_FORTH_DOT 
3cb0				DMARK "DT-" 
3cb0 f5				push af  
3cb1 3a c5 3c			ld a, (.dmark)  
3cb4 32 65 ee			ld (debug_mark),a  
3cb7 3a c6 3c			ld a, (.dmark+1)  
3cba 32 66 ee			ld (debug_mark+1),a  
3cbd 3a c7 3c			ld a, (.dmark+2)  
3cc0 32 67 ee			ld (debug_mark+2),a  
3cc3 18 03			jr .pastdmark  
3cc5 ..			.dmark: db "DT-"  
3cc8 f1			.pastdmark: pop af  
3cc9			endm  
# End of macro DMARK
3cc9				CALLMONITOR 
3cc9 cd 6f ee			call debug_vector  
3ccc				endm  
# End of macro CALLMONITOR
3ccc			endif	 
3ccc 7e			.dashscan:	ld a, (hl) 
3ccd fe 00				cp 0 
3ccf 28 42				jr z, .nodashswap 
3cd1 fe 2d				cp '-' 
3cd3 20 03				jr nz, .dashskip 
3cd5 3e 20				ld a, ' ' 
3cd7 77					ld (hl), a 
3cd8 23			.dashskip:	inc hl 
3cd9			if DEBUG_FORTH_DOT 
3cd9				DMARK "D-2" 
3cd9 f5				push af  
3cda 3a ee 3c			ld a, (.dmark)  
3cdd 32 65 ee			ld (debug_mark),a  
3ce0 3a ef 3c			ld a, (.dmark+1)  
3ce3 32 66 ee			ld (debug_mark+1),a  
3ce6 3a f0 3c			ld a, (.dmark+2)  
3ce9 32 67 ee			ld (debug_mark+2),a  
3cec 18 03			jr .pastdmark  
3cee ..			.dmark: db "D-2"  
3cf1 f1			.pastdmark: pop af  
3cf2			endm  
# End of macro DMARK
3cf2				CALLMONITOR 
3cf2 cd 6f ee			call debug_vector  
3cf5				endm  
# End of macro CALLMONITOR
3cf5			endif	 
3cf5 10 d5				djnz .dashscan 
3cf7			 
3cf7			if DEBUG_FORTH_DOT 
3cf7				DMARK "D-1" 
3cf7 f5				push af  
3cf8 3a 0c 3d			ld a, (.dmark)  
3cfb 32 65 ee			ld (debug_mark),a  
3cfe 3a 0d 3d			ld a, (.dmark+1)  
3d01 32 66 ee			ld (debug_mark+1),a  
3d04 3a 0e 3d			ld a, (.dmark+2)  
3d07 32 67 ee			ld (debug_mark+2),a  
3d0a 18 03			jr .pastdmark  
3d0c ..			.dmark: db "D-1"  
3d0f f1			.pastdmark: pop af  
3d10			endm  
# End of macro DMARK
3d10				CALLMONITOR 
3d10 cd 6f ee			call debug_vector  
3d13				endm  
# End of macro CALLMONITOR
3d13			endif	 
3d13			 
3d13			.nodashswap: 
3d13			 
3d13			if DEBUG_FORTH_DOT 
3d13				DMARK "D-o" 
3d13 f5				push af  
3d14 3a 28 3d			ld a, (.dmark)  
3d17 32 65 ee			ld (debug_mark),a  
3d1a 3a 29 3d			ld a, (.dmark+1)  
3d1d 32 66 ee			ld (debug_mark+1),a  
3d20 3a 2a 3d			ld a, (.dmark+2)  
3d23 32 67 ee			ld (debug_mark+2),a  
3d26 18 03			jr .pastdmark  
3d28 ..			.dmark: db "D-o"  
3d2b f1			.pastdmark: pop af  
3d2c			endm  
# End of macro DMARK
3d2c				CALLMONITOR 
3d2c cd 6f ee			call debug_vector  
3d2f				endm  
# End of macro CALLMONITOR
3d2f			endif	 
3d2f			 
3d2f d5					push de   ; save string start in case we need to advance print 
3d30			 
3d30 3a 58 ea				ld a, (f_cursor_ptr) 
3d33 cd db 0b				call str_at_display 
3d36 3a 36 ea				ld a,(cli_autodisplay) 
3d39 fe 00				cp 0 
3d3b 28 03				jr z, .noupdate 
3d3d cd eb 0b						call update_display 
3d40					.noupdate: 
3d40			 
3d40			 
3d40					; see if we need to advance the print position 
3d40			 
3d40 e1					pop hl   ; get back string 
3d41			;		ex de,hl 
3d41			 
3d41 3a 37 ea				ld a, (cli_mvdot) 
3d44			if DEBUG_FORTH_DOT 
3d44			;		ld e,a 
3d44				DMARK "D>1" 
3d44 f5				push af  
3d45 3a 59 3d			ld a, (.dmark)  
3d48 32 65 ee			ld (debug_mark),a  
3d4b 3a 5a 3d			ld a, (.dmark+1)  
3d4e 32 66 ee			ld (debug_mark+1),a  
3d51 3a 5b 3d			ld a, (.dmark+2)  
3d54 32 67 ee			ld (debug_mark+2),a  
3d57 18 03			jr .pastdmark  
3d59 ..			.dmark: db "D>1"  
3d5c f1			.pastdmark: pop af  
3d5d			endm  
# End of macro DMARK
3d5d				CALLMONITOR 
3d5d cd 6f ee			call debug_vector  
3d60				endm  
# End of macro CALLMONITOR
3d60			endif	 
3d60 fe 00				cp 0 
3d62 28 44				jr z, .noadv 
3d64					; yes, lets advance the print position 
3d64 3e 00				ld a, 0 
3d66 cd 66 11				call strlent 
3d69			if DEBUG_FORTH_DOT 
3d69				DMARK "D-?" 
3d69 f5				push af  
3d6a 3a 7e 3d			ld a, (.dmark)  
3d6d 32 65 ee			ld (debug_mark),a  
3d70 3a 7f 3d			ld a, (.dmark+1)  
3d73 32 66 ee			ld (debug_mark+1),a  
3d76 3a 80 3d			ld a, (.dmark+2)  
3d79 32 67 ee			ld (debug_mark+2),a  
3d7c 18 03			jr .pastdmark  
3d7e ..			.dmark: db "D-?"  
3d81 f1			.pastdmark: pop af  
3d82			endm  
# End of macro DMARK
3d82				CALLMONITOR 
3d82 cd 6f ee			call debug_vector  
3d85				endm  
# End of macro CALLMONITOR
3d85			endif	 
3d85 3a 58 ea				ld a, (f_cursor_ptr) 
3d88 85					add a,l 
3d89					;call addatohl 
3d89					;ld a, l 
3d89 32 58 ea				ld (f_cursor_ptr), a   ; save new pos 
3d8c			 
3d8c			if DEBUG_FORTH_DOT 
3d8c				DMARK "D->" 
3d8c f5				push af  
3d8d 3a a1 3d			ld a, (.dmark)  
3d90 32 65 ee			ld (debug_mark),a  
3d93 3a a2 3d			ld a, (.dmark+1)  
3d96 32 66 ee			ld (debug_mark+1),a  
3d99 3a a3 3d			ld a, (.dmark+2)  
3d9c 32 67 ee			ld (debug_mark+2),a  
3d9f 18 03			jr .pastdmark  
3da1 ..			.dmark: db "D->"  
3da4 f1			.pastdmark: pop af  
3da5			endm  
# End of macro DMARK
3da5				CALLMONITOR 
3da5 cd 6f ee			call debug_vector  
3da8				endm  
# End of macro CALLMONITOR
3da8			endif	 
3da8			 
3da8			.noadv:	 
3da8			 
3da8					if DEBUG_FORTH_DOT_WAIT 
3da8							call next_page_prompt 
3da8					endif	 
3da8			; TODO this pop off the stack causes a crash. i dont know why 
3da8			 
3da8			 
3da8			if DEBUG_FORTH_DOT 
3da8				DMARK "DTh" 
3da8 f5				push af  
3da9 3a bd 3d			ld a, (.dmark)  
3dac 32 65 ee			ld (debug_mark),a  
3daf 3a be 3d			ld a, (.dmark+1)  
3db2 32 66 ee			ld (debug_mark+1),a  
3db5 3a bf 3d			ld a, (.dmark+2)  
3db8 32 67 ee			ld (debug_mark+2),a  
3dbb 18 03			jr .pastdmark  
3dbd ..			.dmark: db "DTh"  
3dc0 f1			.pastdmark: pop af  
3dc1			endm  
# End of macro DMARK
3dc1				CALLMONITOR 
3dc1 cd 6f ee			call debug_vector  
3dc4				endm  
# End of macro CALLMONITOR
3dc4			endif	 
3dc4			 
3dc4					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3dc4 cd 4d 1e			call macro_forth_dsp_pop 
3dc7				endm 
# End of macro FORTH_DSP_POP
3dc7			 
3dc7			if DEBUG_FORTH_DOT 
3dc7				DMARK "DTi" 
3dc7 f5				push af  
3dc8 3a dc 3d			ld a, (.dmark)  
3dcb 32 65 ee			ld (debug_mark),a  
3dce 3a dd 3d			ld a, (.dmark+1)  
3dd1 32 66 ee			ld (debug_mark+1),a  
3dd4 3a de 3d			ld a, (.dmark+2)  
3dd7 32 67 ee			ld (debug_mark+2),a  
3dda 18 03			jr .pastdmark  
3ddc ..			.dmark: db "DTi"  
3ddf f1			.pastdmark: pop af  
3de0			endm  
# End of macro DMARK
3de0				CALLMONITOR 
3de0 cd 6f ee			call debug_vector  
3de3				endm  
# End of macro CALLMONITOR
3de3			endif	 
3de3			 
3de3			 
3de3					NEXTW 
3de3 c3 81 1f			jp macro_next 
3de6				endm 
# End of macro NEXTW
3de6			 
3de6			.CLS: 
3de6				CWHEAD .DRAW 33 "CLS" 3 WORD_FLAG_CODE 
3de6 35				db WORD_SYS_CORE+33             
3de7 13 3e			dw .DRAW            
3de9 04				db 3 + 1 
3dea .. 00			db "CLS",0              
3dee				endm 
# End of macro CWHEAD
3dee			; | CLS ( -- ) Clear current frame buffer and set next print position to top left corner  | DONE 
3dee					if DEBUG_FORTH_WORDS_KEY 
3dee						DMARK "CLS" 
3dee f5				push af  
3def 3a 03 3e			ld a, (.dmark)  
3df2 32 65 ee			ld (debug_mark),a  
3df5 3a 04 3e			ld a, (.dmark+1)  
3df8 32 66 ee			ld (debug_mark+1),a  
3dfb 3a 05 3e			ld a, (.dmark+2)  
3dfe 32 67 ee			ld (debug_mark+2),a  
3e01 18 03			jr .pastdmark  
3e03 ..			.dmark: db "CLS"  
3e06 f1			.pastdmark: pop af  
3e07			endm  
# End of macro DMARK
3e07						CALLMONITOR 
3e07 cd 6f ee			call debug_vector  
3e0a				endm  
# End of macro CALLMONITOR
3e0a					endif 
3e0a cd c8 0b				call clear_display 
3e0d c3 21 3f				jp .home		; and home cursor 
3e10					NEXTW 
3e10 c3 81 1f			jp macro_next 
3e13				endm 
# End of macro NEXTW
3e13			 
3e13			.DRAW: 
3e13				CWHEAD .DUMP 34 "DRAW" 4 WORD_FLAG_CODE 
3e13 36				db WORD_SYS_CORE+34             
3e14 3e 3e			dw .DUMP            
3e16 05				db 4 + 1 
3e17 .. 00			db "DRAW",0              
3e1c				endm 
# End of macro CWHEAD
3e1c			; | DRAW ( -- ) Draw contents of current frame buffer  | DONE 
3e1c					if DEBUG_FORTH_WORDS_KEY 
3e1c						DMARK "DRW" 
3e1c f5				push af  
3e1d 3a 31 3e			ld a, (.dmark)  
3e20 32 65 ee			ld (debug_mark),a  
3e23 3a 32 3e			ld a, (.dmark+1)  
3e26 32 66 ee			ld (debug_mark+1),a  
3e29 3a 33 3e			ld a, (.dmark+2)  
3e2c 32 67 ee			ld (debug_mark+2),a  
3e2f 18 03			jr .pastdmark  
3e31 ..			.dmark: db "DRW"  
3e34 f1			.pastdmark: pop af  
3e35			endm  
# End of macro DMARK
3e35						CALLMONITOR 
3e35 cd 6f ee			call debug_vector  
3e38				endm  
# End of macro CALLMONITOR
3e38					endif 
3e38 cd eb 0b				call update_display 
3e3b					NEXTW 
3e3b c3 81 1f			jp macro_next 
3e3e				endm 
# End of macro NEXTW
3e3e			 
3e3e			.DUMP: 
3e3e				CWHEAD .CDUMP 35 "DUMP" 4 WORD_FLAG_CODE 
3e3e 37				db WORD_SYS_CORE+35             
3e3f 76 3e			dw .CDUMP            
3e41 05				db 4 + 1 
3e42 .. 00			db "DUMP",0              
3e47				endm 
# End of macro CWHEAD
3e47			; | DUMP ( x -- ) With address x display dump   | DONE 
3e47			; TODO pop address to use off of the stack 
3e47					if DEBUG_FORTH_WORDS_KEY 
3e47						DMARK "DUM" 
3e47 f5				push af  
3e48 3a 5c 3e			ld a, (.dmark)  
3e4b 32 65 ee			ld (debug_mark),a  
3e4e 3a 5d 3e			ld a, (.dmark+1)  
3e51 32 66 ee			ld (debug_mark+1),a  
3e54 3a 5e 3e			ld a, (.dmark+2)  
3e57 32 67 ee			ld (debug_mark+2),a  
3e5a 18 03			jr .pastdmark  
3e5c ..			.dmark: db "DUM"  
3e5f f1			.pastdmark: pop af  
3e60			endm  
# End of macro DMARK
3e60						CALLMONITOR 
3e60 cd 6f ee			call debug_vector  
3e63				endm  
# End of macro CALLMONITOR
3e63					endif 
3e63 cd c8 0b				call clear_display 
3e66			 
3e66					; get address 
3e66			 
3e66					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3e66 cd 95 1d			call macro_dsp_valuehl 
3e69				endm 
# End of macro FORTH_DSP_VALUEHL
3e69				 
3e69					; save it for cdump 
3e69			 
3e69 22 de e5				ld (os_cur_ptr),hl 
3e6c			 
3e6c					; destroy value TOS 
3e6c			 
3e6c					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3e6c cd 4d 1e			call macro_forth_dsp_pop 
3e6f				endm 
# End of macro FORTH_DSP_POP
3e6f			 
3e6f cd 10 1a				call dumpcont	; skip old style of param parsing	 
3e72 c9					ret			; TODO command causes end of remaining parsing so cant do: $0000 DUMP $8000 DUMP 
3e73					NEXTW 
3e73 c3 81 1f			jp macro_next 
3e76				endm 
# End of macro NEXTW
3e76			.CDUMP: 
3e76				CWHEAD .DAT 36 "CDUMP" 5 WORD_FLAG_CODE 
3e76 38				db WORD_SYS_CORE+36             
3e77 a6 3e			dw .DAT            
3e79 06				db 5 + 1 
3e7a .. 00			db "CDUMP",0              
3e80				endm 
# End of macro CWHEAD
3e80			; | CDUMP ( -- ) Continue dump of memory from DUMP | DONE 
3e80					if DEBUG_FORTH_WORDS_KEY 
3e80						DMARK "CDP" 
3e80 f5				push af  
3e81 3a 95 3e			ld a, (.dmark)  
3e84 32 65 ee			ld (debug_mark),a  
3e87 3a 96 3e			ld a, (.dmark+1)  
3e8a 32 66 ee			ld (debug_mark+1),a  
3e8d 3a 97 3e			ld a, (.dmark+2)  
3e90 32 67 ee			ld (debug_mark+2),a  
3e93 18 03			jr .pastdmark  
3e95 ..			.dmark: db "CDP"  
3e98 f1			.pastdmark: pop af  
3e99			endm  
# End of macro DMARK
3e99						CALLMONITOR 
3e99 cd 6f ee			call debug_vector  
3e9c				endm  
# End of macro CALLMONITOR
3e9c					endif 
3e9c cd c8 0b				call clear_display 
3e9f cd 10 1a				call dumpcont	 
3ea2 c9					ret			; TODO command causes end of remaining parsing so cant do: $0000 DUMP CDUMP $8000 DUMP 
3ea3					NEXTW 
3ea3 c3 81 1f			jp macro_next 
3ea6				endm 
# End of macro NEXTW
3ea6			 
3ea6			 
3ea6			 
3ea6			 
3ea6			.DAT: 
3ea6				CWHEAD .HOME 41 "AT" 2 WORD_FLAG_CODE 
3ea6 3d				db WORD_SYS_CORE+41             
3ea7 fc 3e			dw .HOME            
3ea9 03				db 2 + 1 
3eaa .. 00			db "AT",0              
3ead				endm 
# End of macro CWHEAD
3ead			; | AT ( u1 u2 -- ) Set next output via . or emit at row u2 col u1 | DONE 
3ead					if DEBUG_FORTH_WORDS_KEY 
3ead						DMARK "AT." 
3ead f5				push af  
3eae 3a c2 3e			ld a, (.dmark)  
3eb1 32 65 ee			ld (debug_mark),a  
3eb4 3a c3 3e			ld a, (.dmark+1)  
3eb7 32 66 ee			ld (debug_mark+1),a  
3eba 3a c4 3e			ld a, (.dmark+2)  
3ebd 32 67 ee			ld (debug_mark+2),a  
3ec0 18 03			jr .pastdmark  
3ec2 ..			.dmark: db "AT."  
3ec5 f1			.pastdmark: pop af  
3ec6			endm  
# End of macro DMARK
3ec6						CALLMONITOR 
3ec6 cd 6f ee			call debug_vector  
3ec9				endm  
# End of macro CALLMONITOR
3ec9					endif 
3ec9					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3ec9 cd 95 1d			call macro_dsp_valuehl 
3ecc				endm 
# End of macro FORTH_DSP_VALUEHL
3ecc			 
3ecc			 
3ecc					; TODO save cursor row 
3ecc 7d					ld a,l 
3ecd fe 02				cp 2 
3ecf 20 04				jr nz, .crow3 
3ed1 3e 28				ld a, display_row_2 
3ed3 18 12				jr .ccol1 
3ed5 fe 03		.crow3:		cp 3 
3ed7 20 04				jr nz, .crow4 
3ed9 3e 50				ld a, display_row_3 
3edb 18 0a				jr .ccol1 
3edd fe 04		.crow4:		cp 4 
3edf 20 04				jr nz, .crow1 
3ee1 3e 78				ld a, display_row_4 
3ee3 18 02				jr .ccol1 
3ee5 3e 00		.crow1:		ld a,display_row_1 
3ee7 f5			.ccol1:		push af			; got row offset 
3ee8 6f					ld l,a 
3ee9 26 00				ld h,0 
3eeb					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3eeb cd 4d 1e			call macro_forth_dsp_pop 
3eee				endm 
# End of macro FORTH_DSP_POP
3eee					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3eee cd 95 1d			call macro_dsp_valuehl 
3ef1				endm 
# End of macro FORTH_DSP_VALUEHL
3ef1					; TODO save cursor col 
3ef1 f1					pop af 
3ef2 85					add l		; add col offset 
3ef3 32 58 ea				ld (f_cursor_ptr), a 
3ef6					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3ef6 cd 4d 1e			call macro_forth_dsp_pop 
3ef9				endm 
# End of macro FORTH_DSP_POP
3ef9			 
3ef9					; calculate  
3ef9			 
3ef9					NEXTW 
3ef9 c3 81 1f			jp macro_next 
3efc				endm 
# End of macro NEXTW
3efc			 
3efc			 
3efc			.HOME: 
3efc				CWHEAD .CR 45 "HOME" 4 WORD_FLAG_CODE 
3efc 41				db WORD_SYS_CORE+45             
3efd 29 3f			dw .CR            
3eff 05				db 4 + 1 
3f00 .. 00			db "HOME",0              
3f05				endm 
# End of macro CWHEAD
3f05			; | HOME ( -- ) Reset the current cursor for output to home | DONE 
3f05					if DEBUG_FORTH_WORDS_KEY 
3f05						DMARK "HOM" 
3f05 f5				push af  
3f06 3a 1a 3f			ld a, (.dmark)  
3f09 32 65 ee			ld (debug_mark),a  
3f0c 3a 1b 3f			ld a, (.dmark+1)  
3f0f 32 66 ee			ld (debug_mark+1),a  
3f12 3a 1c 3f			ld a, (.dmark+2)  
3f15 32 67 ee			ld (debug_mark+2),a  
3f18 18 03			jr .pastdmark  
3f1a ..			.dmark: db "HOM"  
3f1d f1			.pastdmark: pop af  
3f1e			endm  
# End of macro DMARK
3f1e						CALLMONITOR 
3f1e cd 6f ee			call debug_vector  
3f21				endm  
# End of macro CALLMONITOR
3f21					endif 
3f21 3e 00		.home:		ld a, 0		; and home cursor 
3f23 32 58 ea				ld (f_cursor_ptr), a 
3f26					NEXTW 
3f26 c3 81 1f			jp macro_next 
3f29				endm 
# End of macro NEXTW
3f29			 
3f29			 
3f29			.CR: 
3f29				CWHEAD .SPACE 50 "CR" 2 WORD_FLAG_CODE 
3f29 46				db WORD_SYS_CORE+50             
3f2a 64 3f			dw .SPACE            
3f2c 03				db 2 + 1 
3f2d .. 00			db "CR",0              
3f30				endm 
# End of macro CWHEAD
3f30			; | CR (  -- s ) Push CR/LF pair onto the stack as a string  | DONE 
3f30					if DEBUG_FORTH_WORDS_KEY 
3f30						DMARK "CR." 
3f30 f5				push af  
3f31 3a 45 3f			ld a, (.dmark)  
3f34 32 65 ee			ld (debug_mark),a  
3f37 3a 46 3f			ld a, (.dmark+1)  
3f3a 32 66 ee			ld (debug_mark+1),a  
3f3d 3a 47 3f			ld a, (.dmark+2)  
3f40 32 67 ee			ld (debug_mark+2),a  
3f43 18 03			jr .pastdmark  
3f45 ..			.dmark: db "CR."  
3f48 f1			.pastdmark: pop af  
3f49			endm  
# End of macro DMARK
3f49						CALLMONITOR 
3f49 cd 6f ee			call debug_vector  
3f4c				endm  
# End of macro CALLMONITOR
3f4c					endif 
3f4c 3e 0d				ld a, 13 
3f4e 32 bb e2				ld (scratch),a 
3f51 3e 0a				ld a, 10 
3f53 32 bc e2				ld (scratch+1),a 
3f56 3e 00				ld a, 0 
3f58 32 bd e2				ld (scratch+2),a 
3f5b 21 bb e2				ld hl, scratch 
3f5e cd fe 1b				call forth_push_str 
3f61					 
3f61				       NEXTW 
3f61 c3 81 1f			jp macro_next 
3f64				endm 
# End of macro NEXTW
3f64			.SPACE: 
3f64				CWHEAD .SPACES 50 "BL" 2 WORD_FLAG_CODE 
3f64 46				db WORD_SYS_CORE+50             
3f65 9a 3f			dw .SPACES            
3f67 03				db 2 + 1 
3f68 .. 00			db "BL",0              
3f6b				endm 
# End of macro CWHEAD
3f6b			; | BL (  -- c ) Push the value of space onto the stack as a string  | DONE 
3f6b					if DEBUG_FORTH_WORDS_KEY 
3f6b						DMARK "BL." 
3f6b f5				push af  
3f6c 3a 80 3f			ld a, (.dmark)  
3f6f 32 65 ee			ld (debug_mark),a  
3f72 3a 81 3f			ld a, (.dmark+1)  
3f75 32 66 ee			ld (debug_mark+1),a  
3f78 3a 82 3f			ld a, (.dmark+2)  
3f7b 32 67 ee			ld (debug_mark+2),a  
3f7e 18 03			jr .pastdmark  
3f80 ..			.dmark: db "BL."  
3f83 f1			.pastdmark: pop af  
3f84			endm  
# End of macro DMARK
3f84						CALLMONITOR 
3f84 cd 6f ee			call debug_vector  
3f87				endm  
# End of macro CALLMONITOR
3f87					endif 
3f87 3e 20				ld a, " " 
3f89 32 bb e2				ld (scratch),a 
3f8c 3e 00				ld a, 0 
3f8e 32 bc e2				ld (scratch+1),a 
3f91 21 bb e2				ld hl, scratch 
3f94 cd fe 1b				call forth_push_str 
3f97					 
3f97				       NEXTW 
3f97 c3 81 1f			jp macro_next 
3f9a				endm 
# End of macro NEXTW
3f9a			 
3f9a			;.blstr: db " ", 0 
3f9a			 
3f9a			.SPACES: 
3f9a				CWHEAD .SCROLL 51 "SPACES" 6 WORD_FLAG_CODE 
3f9a 47				db WORD_SYS_CORE+51             
3f9b 35 40			dw .SCROLL            
3f9d 07				db 6 + 1 
3f9e .. 00			db "SPACES",0              
3fa5				endm 
# End of macro CWHEAD
3fa5			; | SPACES ( u -- str ) A string of u spaces is pushed onto the stack | DONE 
3fa5					if DEBUG_FORTH_WORDS_KEY 
3fa5						DMARK "SPS" 
3fa5 f5				push af  
3fa6 3a ba 3f			ld a, (.dmark)  
3fa9 32 65 ee			ld (debug_mark),a  
3fac 3a bb 3f			ld a, (.dmark+1)  
3faf 32 66 ee			ld (debug_mark+1),a  
3fb2 3a bc 3f			ld a, (.dmark+2)  
3fb5 32 67 ee			ld (debug_mark+2),a  
3fb8 18 03			jr .pastdmark  
3fba ..			.dmark: db "SPS"  
3fbd f1			.pastdmark: pop af  
3fbe			endm  
# End of macro DMARK
3fbe						CALLMONITOR 
3fbe cd 6f ee			call debug_vector  
3fc1				endm  
# End of macro CALLMONITOR
3fc1					endif 
3fc1			 
3fc1			 
3fc1					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3fc1 cd 95 1d			call macro_dsp_valuehl 
3fc4				endm 
# End of macro FORTH_DSP_VALUEHL
3fc4			 
3fc4 e5					push hl    ; u 
3fc5					if DEBUG_FORTH_WORDS 
3fc5						DMARK "SPA" 
3fc5 f5				push af  
3fc6 3a da 3f			ld a, (.dmark)  
3fc9 32 65 ee			ld (debug_mark),a  
3fcc 3a db 3f			ld a, (.dmark+1)  
3fcf 32 66 ee			ld (debug_mark+1),a  
3fd2 3a dc 3f			ld a, (.dmark+2)  
3fd5 32 67 ee			ld (debug_mark+2),a  
3fd8 18 03			jr .pastdmark  
3fda ..			.dmark: db "SPA"  
3fdd f1			.pastdmark: pop af  
3fde			endm  
# End of macro DMARK
3fde						CALLMONITOR 
3fde cd 6f ee			call debug_vector  
3fe1				endm  
# End of macro CALLMONITOR
3fe1					endif 
3fe1			 
3fe1					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3fe1 cd 4d 1e			call macro_forth_dsp_pop 
3fe4				endm 
# End of macro FORTH_DSP_POP
3fe4 e1					pop hl 
3fe5 0e 00				ld c, 0 
3fe7 45					ld b, l 
3fe8 21 bb e2				ld hl, scratch  
3feb			 
3feb					if DEBUG_FORTH_WORDS 
3feb						DMARK "SP2" 
3feb f5				push af  
3fec 3a 00 40			ld a, (.dmark)  
3fef 32 65 ee			ld (debug_mark),a  
3ff2 3a 01 40			ld a, (.dmark+1)  
3ff5 32 66 ee			ld (debug_mark+1),a  
3ff8 3a 02 40			ld a, (.dmark+2)  
3ffb 32 67 ee			ld (debug_mark+2),a  
3ffe 18 03			jr .pastdmark  
4000 ..			.dmark: db "SP2"  
4003 f1			.pastdmark: pop af  
4004			endm  
# End of macro DMARK
4004						CALLMONITOR 
4004 cd 6f ee			call debug_vector  
4007				endm  
# End of macro CALLMONITOR
4007					endif 
4007 3e 20				ld a, ' ' 
4009			.spaces1:	 
4009 77					ld (hl),a 
400a 23					inc hl 
400b					 
400b 10 fc				djnz .spaces1 
400d 3e 00				ld a,0 
400f 77					ld (hl),a 
4010 21 bb e2				ld hl, scratch 
4013					if DEBUG_FORTH_WORDS 
4013						DMARK "SP3" 
4013 f5				push af  
4014 3a 28 40			ld a, (.dmark)  
4017 32 65 ee			ld (debug_mark),a  
401a 3a 29 40			ld a, (.dmark+1)  
401d 32 66 ee			ld (debug_mark+1),a  
4020 3a 2a 40			ld a, (.dmark+2)  
4023 32 67 ee			ld (debug_mark+2),a  
4026 18 03			jr .pastdmark  
4028 ..			.dmark: db "SP3"  
402b f1			.pastdmark: pop af  
402c			endm  
# End of macro DMARK
402c						CALLMONITOR 
402c cd 6f ee			call debug_vector  
402f				endm  
# End of macro CALLMONITOR
402f					endif 
402f cd fe 1b				call forth_push_str 
4032			 
4032				       NEXTW 
4032 c3 81 1f			jp macro_next 
4035				endm 
# End of macro NEXTW
4035			 
4035			 
4035			 
4035			.SCROLL: 
4035				CWHEAD .SCROLLD 63 "SCROLL" 6 WORD_FLAG_CODE 
4035 53				db WORD_SYS_CORE+63             
4036 62 40			dw .SCROLLD            
4038 07				db 6 + 1 
4039 .. 00			db "SCROLL",0              
4040				endm 
# End of macro CWHEAD
4040			; | SCROLL ( -- ) Scroll up one line - next write will update if required | DONE 
4040					if DEBUG_FORTH_WORDS_KEY 
4040						DMARK "SCR" 
4040 f5				push af  
4041 3a 55 40			ld a, (.dmark)  
4044 32 65 ee			ld (debug_mark),a  
4047 3a 56 40			ld a, (.dmark+1)  
404a 32 66 ee			ld (debug_mark+1),a  
404d 3a 57 40			ld a, (.dmark+2)  
4050 32 67 ee			ld (debug_mark+2),a  
4053 18 03			jr .pastdmark  
4055 ..			.dmark: db "SCR"  
4058 f1			.pastdmark: pop af  
4059			endm  
# End of macro DMARK
4059						CALLMONITOR 
4059 cd 6f ee			call debug_vector  
405c				endm  
# End of macro CALLMONITOR
405c					endif 
405c			 
405c cd 8a 0b			call scroll_up 
405f			;	call update_display 
405f			 
405f					NEXTW 
405f c3 81 1f			jp macro_next 
4062				endm 
# End of macro NEXTW
4062			 
4062			 
4062			 
4062			;		; get dir 
4062			; 
4062			;		FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4062			; 
4062			;		push hl 
4062			; 
4062			;		; destroy value TOS 
4062			; 
4062			;		FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4062			; 
4062			;		; get count 
4062			; 
4062			;		FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4062			; 
4062			;		push hl 
4062			; 
4062			;		; destroy value TOS 
4062			; 
4062			;		FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4062			; 
4062			;		; one value on hl get other one back 
4062			; 
4062			;		pop bc    ; count 
4062			; 
4062			;		pop de   ; dir 
4062			; 
4062			; 
4062			;		ld b, c 
4062			; 
4062			;.scrolldir:     push bc 
4062			;		push de 
4062			; 
4062			;		ld a, 0 
4062			;		cp e 
4062			;		jr z, .scrollup  
4062			;		call scroll_down 
4062			;		jr .scrollnext 
4062			;.scrollup:	call scroll_up 
4062			; 
4062			;		 
4062			;.scrollnext: 
4062			;		pop de 
4062			;		pop bc 
4062			;		djnz .scrolldir 
4062			; 
4062			; 
4062			; 
4062			; 
4062			; 
4062			;		NEXTW 
4062			 
4062			.SCROLLD: 
4062				CWHEAD .ATQ 63 "SCROLLD" 7 WORD_FLAG_CODE 
4062 53				db WORD_SYS_CORE+63             
4063 90 40			dw .ATQ            
4065 08				db 7 + 1 
4066 .. 00			db "SCROLLD",0              
406e				endm 
# End of macro CWHEAD
406e			; | SCROLLD ( -- ) Scroll down one line - next write will update if required | TO DO 
406e					if DEBUG_FORTH_WORDS_KEY 
406e						DMARK "SCD" 
406e f5				push af  
406f 3a 83 40			ld a, (.dmark)  
4072 32 65 ee			ld (debug_mark),a  
4075 3a 84 40			ld a, (.dmark+1)  
4078 32 66 ee			ld (debug_mark+1),a  
407b 3a 85 40			ld a, (.dmark+2)  
407e 32 67 ee			ld (debug_mark+2),a  
4081 18 03			jr .pastdmark  
4083 ..			.dmark: db "SCD"  
4086 f1			.pastdmark: pop af  
4087			endm  
# End of macro DMARK
4087						CALLMONITOR 
4087 cd 6f ee			call debug_vector  
408a				endm  
# End of macro CALLMONITOR
408a					endif 
408a			 
408a cd ae 0b			call scroll_down 
408d			;	call update_display 
408d			 
408d					NEXTW 
408d c3 81 1f			jp macro_next 
4090				endm 
# End of macro NEXTW
4090			 
4090			 
4090			.ATQ: 
4090				CWHEAD .AUTODSP 78 "AT@" 3 WORD_FLAG_CODE 
4090 62				db WORD_SYS_CORE+78             
4091 ee 40			dw .AUTODSP            
4093 04				db 3 + 1 
4094 .. 00			db "AT@",0              
4098				endm 
# End of macro CWHEAD
4098			; | AT@ ( u1 u2 -- n ) Push to stack ASCII value at row u2 col u1 | DONE 
4098					if DEBUG_FORTH_WORDS_KEY 
4098						DMARK "ATA" 
4098 f5				push af  
4099 3a ad 40			ld a, (.dmark)  
409c 32 65 ee			ld (debug_mark),a  
409f 3a ae 40			ld a, (.dmark+1)  
40a2 32 66 ee			ld (debug_mark+1),a  
40a5 3a af 40			ld a, (.dmark+2)  
40a8 32 67 ee			ld (debug_mark+2),a  
40ab 18 03			jr .pastdmark  
40ad ..			.dmark: db "ATA"  
40b0 f1			.pastdmark: pop af  
40b1			endm  
# End of macro DMARK
40b1						CALLMONITOR 
40b1 cd 6f ee			call debug_vector  
40b4				endm  
# End of macro CALLMONITOR
40b4					endif 
40b4			 
40b4			 
40b4					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
40b4 cd 95 1d			call macro_dsp_valuehl 
40b7				endm 
# End of macro FORTH_DSP_VALUEHL
40b7			 
40b7					; TODO save cursor row 
40b7 7d					ld a,l 
40b8 fe 02				cp 2 
40ba 20 04				jr nz, .crow3aq 
40bc 3e 28				ld a, display_row_2 
40be 18 12				jr .ccol1aq 
40c0 fe 03		.crow3aq:		cp 3 
40c2 20 04				jr nz, .crow4aq 
40c4 3e 50				ld a, display_row_3 
40c6 18 0a				jr .ccol1aq 
40c8 fe 04		.crow4aq:		cp 4 
40ca 20 04				jr nz, .crow1aq 
40cc 3e 78				ld a, display_row_4 
40ce 18 02				jr .ccol1aq 
40d0 3e 00		.crow1aq:		ld a,display_row_1 
40d2 f5			.ccol1aq:		push af			; got row offset 
40d3 6f					ld l,a 
40d4 26 00				ld h,0 
40d6					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
40d6 cd 4d 1e			call macro_forth_dsp_pop 
40d9				endm 
# End of macro FORTH_DSP_POP
40d9					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
40d9 cd 95 1d			call macro_dsp_valuehl 
40dc				endm 
# End of macro FORTH_DSP_VALUEHL
40dc					; TODO save cursor col 
40dc f1					pop af 
40dd 85					add l		; add col offset 
40de			 
40de					; add current frame buffer address 
40de 2a c6 eb				ld hl, (display_fb_active) 
40e1 cd f5 0d				call addatohl 
40e4			 
40e4			 
40e4			 
40e4			 
40e4					; get char frame buffer location offset in hl 
40e4			 
40e4 7e					ld a,(hl) 
40e5 26 00				ld h, 0 
40e7 6f					ld l, a 
40e8			 
40e8 cd 90 1b				call forth_push_numhl 
40eb			 
40eb			 
40eb					NEXTW 
40eb c3 81 1f			jp macro_next 
40ee				endm 
# End of macro NEXTW
40ee			 
40ee			.AUTODSP: 
40ee				CWHEAD .MENU 79 "ADSP" 4 WORD_FLAG_CODE 
40ee 63				db WORD_SYS_CORE+79             
40ef 04 41			dw .MENU            
40f1 05				db 4 + 1 
40f2 .. 00			db "ADSP",0              
40f7				endm 
# End of macro CWHEAD
40f7			; | ADSP ( u1 --  ) Enable/Disable Auto screen updates (SLOW). | DONE 
40f7			; | | If off, use DRAW to refresh. Default is on. $0003 will enable direct screen writes (TODO)  
40f7			 
40f7					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
40f7 cd 95 1d			call macro_dsp_valuehl 
40fa				endm 
# End of macro FORTH_DSP_VALUEHL
40fa			 
40fa			;		push hl 
40fa			 
40fa					; destroy value TOS 
40fa			 
40fa					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
40fa cd 4d 1e			call macro_forth_dsp_pop 
40fd				endm 
# End of macro FORTH_DSP_POP
40fd			 
40fd			;		pop hl 
40fd			 
40fd 7d					ld a,l 
40fe 32 36 ea				ld (cli_autodisplay), a 
4101				       NEXTW 
4101 c3 81 1f			jp macro_next 
4104				endm 
# End of macro NEXTW
4104			 
4104			.MENU: 
4104				CWHEAD .ENDDISPLAY 92 "MENU" 4 WORD_FLAG_CODE 
4104 70				db WORD_SYS_CORE+92             
4105 ad 41			dw .ENDDISPLAY            
4107 05				db 4 + 1 
4108 .. 00			db "MENU",0              
410d				endm 
# End of macro CWHEAD
410d			; | MENU ( u1....ux n -- n ) Create a menu. n is the number of menu items on stack. Push number selection to TOS | DONE 
410d			 
410d			;		; get number of items on the stack 
410d			; 
410d				 
410d					FORTH_DSP_VALUEHL 
410d cd 95 1d			call macro_dsp_valuehl 
4110				endm 
# End of macro FORTH_DSP_VALUEHL
4110				 
4110					if DEBUG_FORTH_WORDS_KEY 
4110						DMARK "MNU" 
4110 f5				push af  
4111 3a 25 41			ld a, (.dmark)  
4114 32 65 ee			ld (debug_mark),a  
4117 3a 26 41			ld a, (.dmark+1)  
411a 32 66 ee			ld (debug_mark+1),a  
411d 3a 27 41			ld a, (.dmark+2)  
4120 32 67 ee			ld (debug_mark+2),a  
4123 18 03			jr .pastdmark  
4125 ..			.dmark: db "MNU"  
4128 f1			.pastdmark: pop af  
4129			endm  
# End of macro DMARK
4129						CALLMONITOR 
4129 cd 6f ee			call debug_vector  
412c				endm  
# End of macro CALLMONITOR
412c					endif 
412c			 
412c 45					ld b, l	 
412d 05					dec b 
412e			 
412e					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
412e cd 4d 1e			call macro_forth_dsp_pop 
4131				endm 
# End of macro FORTH_DSP_POP
4131			 
4131			 
4131					; go directly through the stack to pluck out the string pointers and build an array 
4131			 
4131			;		FORTH_DSP 
4131			 
4131					; hl contains top most stack item 
4131				 
4131 11 bb e2				ld de, scratch 
4134			 
4134			.mbuild: 
4134			 
4134					FORTH_DSP_VALUEHL 
4134 cd 95 1d			call macro_dsp_valuehl 
4137				endm 
# End of macro FORTH_DSP_VALUEHL
4137			 
4137					if DEBUG_FORTH_WORDS 
4137						DMARK "MN3" 
4137 f5				push af  
4138 3a 4c 41			ld a, (.dmark)  
413b 32 65 ee			ld (debug_mark),a  
413e 3a 4d 41			ld a, (.dmark+1)  
4141 32 66 ee			ld (debug_mark+1),a  
4144 3a 4e 41			ld a, (.dmark+2)  
4147 32 67 ee			ld (debug_mark+2),a  
414a 18 03			jr .pastdmark  
414c ..			.dmark: db "MN3"  
414f f1			.pastdmark: pop af  
4150			endm  
# End of macro DMARK
4150						CALLMONITOR 
4150 cd 6f ee			call debug_vector  
4153				endm  
# End of macro CALLMONITOR
4153					endif 
4153 eb					ex de, hl 
4154 73					ld (hl), e 
4155 23					inc hl 
4156 72					ld (hl), d 
4157 23					inc hl 
4158 eb					ex de, hl 
4159			 
4159					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4159 cd 4d 1e			call macro_forth_dsp_pop 
415c				endm 
# End of macro FORTH_DSP_POP
415c			 
415c 10 d6				djnz .mbuild 
415e			 
415e					; done add term 
415e			 
415e eb					ex de, hl 
415f 36 00				ld (hl), 0 
4161 23					inc hl 
4162 36 00				ld (hl), 0 
4164			 
4164				 
4164					 
4164 21 bb e2				ld hl, scratch 
4167			 
4167					if DEBUG_FORTH_WORDS 
4167						DMARK "MNx" 
4167 f5				push af  
4168 3a 7c 41			ld a, (.dmark)  
416b 32 65 ee			ld (debug_mark),a  
416e 3a 7d 41			ld a, (.dmark+1)  
4171 32 66 ee			ld (debug_mark+1),a  
4174 3a 7e 41			ld a, (.dmark+2)  
4177 32 67 ee			ld (debug_mark+2),a  
417a 18 03			jr .pastdmark  
417c ..			.dmark: db "MNx"  
417f f1			.pastdmark: pop af  
4180			endm  
# End of macro DMARK
4180						CALLMONITOR 
4180 cd 6f ee			call debug_vector  
4183				endm  
# End of macro CALLMONITOR
4183					endif 
4183			 
4183			 
4183			 
4183 3e 00				ld a, 0 
4185 cd f9 0b				call menu 
4188			 
4188			 
4188 6f					ld l, a 
4189 26 00				ld h, 0 
418b			 
418b					if DEBUG_FORTH_WORDS 
418b						DMARK "MNr" 
418b f5				push af  
418c 3a a0 41			ld a, (.dmark)  
418f 32 65 ee			ld (debug_mark),a  
4192 3a a1 41			ld a, (.dmark+1)  
4195 32 66 ee			ld (debug_mark+1),a  
4198 3a a2 41			ld a, (.dmark+2)  
419b 32 67 ee			ld (debug_mark+2),a  
419e 18 03			jr .pastdmark  
41a0 ..			.dmark: db "MNr"  
41a3 f1			.pastdmark: pop af  
41a4			endm  
# End of macro DMARK
41a4						CALLMONITOR 
41a4 cd 6f ee			call debug_vector  
41a7				endm  
# End of macro CALLMONITOR
41a7					endif 
41a7			 
41a7 cd 90 1b				call forth_push_numhl 
41aa			 
41aa			 
41aa			 
41aa			 
41aa				       NEXTW 
41aa c3 81 1f			jp macro_next 
41ad				endm 
# End of macro NEXTW
41ad			 
41ad			 
41ad			.ENDDISPLAY: 
41ad			 
41ad			; eof 
# End of file forth_words_display.asm
41ad			include "forth_words_str.asm" 
41ad			 
41ad			; | ## String Words 
41ad			 
41ad			.PTR:   
41ad			 
41ad				CWHEAD .STYPE 52 "PTR" 3 WORD_FLAG_CODE 
41ad 48				db WORD_SYS_CORE+52             
41ae da 41			dw .STYPE            
41b0 04				db 3 + 1 
41b1 .. 00			db "PTR",0              
41b5				endm 
# End of macro CWHEAD
41b5			; | PTR ( -- addr ) Low level push pointer to the value on TOS | DONE 
41b5			; | | If a string will give the address of the string without dropping it. Handy for direct string access 
41b5			; | | If a number can then use 2@ and 2! for direct value update without using stack words  
41b5			 
41b5					if DEBUG_FORTH_WORDS_KEY 
41b5						DMARK "PTR" 
41b5 f5				push af  
41b6 3a ca 41			ld a, (.dmark)  
41b9 32 65 ee			ld (debug_mark),a  
41bc 3a cb 41			ld a, (.dmark+1)  
41bf 32 66 ee			ld (debug_mark+1),a  
41c2 3a cc 41			ld a, (.dmark+2)  
41c5 32 67 ee			ld (debug_mark+2),a  
41c8 18 03			jr .pastdmark  
41ca ..			.dmark: db "PTR"  
41cd f1			.pastdmark: pop af  
41ce			endm  
# End of macro DMARK
41ce						CALLMONITOR 
41ce cd 6f ee			call debug_vector  
41d1				endm  
# End of macro CALLMONITOR
41d1					endif 
41d1					FORTH_DSP_VALUEHL 
41d1 cd 95 1d			call macro_dsp_valuehl 
41d4				endm 
# End of macro FORTH_DSP_VALUEHL
41d4 cd 90 1b				call forth_push_numhl 
41d7			 
41d7			 
41d7					NEXTW 
41d7 c3 81 1f			jp macro_next 
41da				endm 
# End of macro NEXTW
41da			.STYPE: 
41da				CWHEAD .UPPER 52 "STYPE" 5 WORD_FLAG_CODE 
41da 48				db WORD_SYS_CORE+52             
41db 29 42			dw .UPPER            
41dd 06				db 5 + 1 
41de .. 00			db "STYPE",0              
41e4				endm 
# End of macro CWHEAD
41e4			; | STYPE ( u -- u type ) Push type of value on TOS - 's' string, 'i' integer...   | DONE 
41e4					if DEBUG_FORTH_WORDS_KEY 
41e4						DMARK "STY" 
41e4 f5				push af  
41e5 3a f9 41			ld a, (.dmark)  
41e8 32 65 ee			ld (debug_mark),a  
41eb 3a fa 41			ld a, (.dmark+1)  
41ee 32 66 ee			ld (debug_mark+1),a  
41f1 3a fb 41			ld a, (.dmark+2)  
41f4 32 67 ee			ld (debug_mark+2),a  
41f7 18 03			jr .pastdmark  
41f9 ..			.dmark: db "STY"  
41fc f1			.pastdmark: pop af  
41fd			endm  
# End of macro DMARK
41fd						CALLMONITOR 
41fd cd 6f ee			call debug_vector  
4200				endm  
# End of macro CALLMONITOR
4200					endif 
4200					FORTH_DSP 
4200 cd 5b 1d			call macro_forth_dsp 
4203				endm 
# End of macro FORTH_DSP
4203					;v5 FORTH_DSP_VALUE 
4203			 
4203 7e					ld a, (hl) 
4204			 
4204 f5					push af 
4205			 
4205			; Dont destroy TOS		FORTH_DSP_POP 
4205			 
4205 f1					pop af 
4206			 
4206 fe 01				cp DS_TYPE_STR 
4208 28 09				jr z, .typestr 
420a			 
420a fe 02				cp DS_TYPE_INUM 
420c 28 0a				jr z, .typeinum 
420e			 
420e 21 27 42				ld hl, .tna 
4211 18 0a				jr .tpush 
4213			 
4213 21 23 42		.typestr:	ld hl, .tstr 
4216 18 05				jr .tpush 
4218 21 25 42		.typeinum:	ld hl, .tinum 
421b 18 00				jr .tpush 
421d			 
421d			.tpush: 
421d			 
421d cd fe 1b				call forth_push_str 
4220			 
4220					NEXTW 
4220 c3 81 1f			jp macro_next 
4223				endm 
# End of macro NEXTW
4223 .. 00		.tstr:	db "s",0 
4225 .. 00		.tinum:  db "i",0 
4227 .. 00		.tna:   db "?", 0 
4229			 
4229			 
4229			.UPPER: 
4229				CWHEAD .LOWER 52 "UPPER" 5 WORD_FLAG_CODE 
4229 48				db WORD_SYS_CORE+52             
422a 64 42			dw .LOWER            
422c 06				db 5 + 1 
422d .. 00			db "UPPER",0              
4233				endm 
# End of macro CWHEAD
4233			; | UPPER ( s -- s ) Upper case string s  | DONE 
4233					if DEBUG_FORTH_WORDS_KEY 
4233						DMARK "UPR" 
4233 f5				push af  
4234 3a 48 42			ld a, (.dmark)  
4237 32 65 ee			ld (debug_mark),a  
423a 3a 49 42			ld a, (.dmark+1)  
423d 32 66 ee			ld (debug_mark+1),a  
4240 3a 4a 42			ld a, (.dmark+2)  
4243 32 67 ee			ld (debug_mark+2),a  
4246 18 03			jr .pastdmark  
4248 ..			.dmark: db "UPR"  
424b f1			.pastdmark: pop af  
424c			endm  
# End of macro DMARK
424c						CALLMONITOR 
424c cd 6f ee			call debug_vector  
424f				endm  
# End of macro CALLMONITOR
424f					endif 
424f			 
424f					FORTH_DSP 
424f cd 5b 1d			call macro_forth_dsp 
4252				endm 
# End of macro FORTH_DSP
4252					 
4252			; TODO check is string type 
4252			 
4252					FORTH_DSP_VALUEHL 
4252 cd 95 1d			call macro_dsp_valuehl 
4255				endm 
# End of macro FORTH_DSP_VALUEHL
4255			; get pointer to string in hl 
4255			 
4255 7e			.toup:		ld a, (hl) 
4256 fe 00				cp 0 
4258 28 07				jr z, .toupdone 
425a			 
425a cd 6a 10				call to_upper 
425d			 
425d 77					ld (hl), a 
425e 23					inc hl 
425f 18 f4				jr .toup 
4261			 
4261					 
4261			 
4261			 
4261			; for each char convert to upper 
4261					 
4261			.toupdone: 
4261			 
4261			 
4261					NEXTW 
4261 c3 81 1f			jp macro_next 
4264				endm 
# End of macro NEXTW
4264			.LOWER: 
4264				CWHEAD .TCASE 52 "LOWER" 5 WORD_FLAG_CODE 
4264 48				db WORD_SYS_CORE+52             
4265 9f 42			dw .TCASE            
4267 06				db 5 + 1 
4268 .. 00			db "LOWER",0              
426e				endm 
# End of macro CWHEAD
426e			; | LOWER ( s -- s ) Lower case string s  | DONE 
426e					if DEBUG_FORTH_WORDS_KEY 
426e						DMARK "LWR" 
426e f5				push af  
426f 3a 83 42			ld a, (.dmark)  
4272 32 65 ee			ld (debug_mark),a  
4275 3a 84 42			ld a, (.dmark+1)  
4278 32 66 ee			ld (debug_mark+1),a  
427b 3a 85 42			ld a, (.dmark+2)  
427e 32 67 ee			ld (debug_mark+2),a  
4281 18 03			jr .pastdmark  
4283 ..			.dmark: db "LWR"  
4286 f1			.pastdmark: pop af  
4287			endm  
# End of macro DMARK
4287						CALLMONITOR 
4287 cd 6f ee			call debug_vector  
428a				endm  
# End of macro CALLMONITOR
428a					endif 
428a			 
428a					FORTH_DSP 
428a cd 5b 1d			call macro_forth_dsp 
428d				endm 
# End of macro FORTH_DSP
428d					 
428d			; TODO check is string type 
428d			 
428d					FORTH_DSP_VALUEHL 
428d cd 95 1d			call macro_dsp_valuehl 
4290				endm 
# End of macro FORTH_DSP_VALUEHL
4290			; get pointer to string in hl 
4290			 
4290 7e			.tolow:		ld a, (hl) 
4291 fe 00				cp 0 
4293 28 07				jr z, .tolowdone 
4295			 
4295 cd 73 10				call to_lower 
4298			 
4298 77					ld (hl), a 
4299 23					inc hl 
429a 18 f4				jr .tolow 
429c			 
429c					 
429c			 
429c			 
429c			; for each char convert to low 
429c					 
429c			.tolowdone: 
429c					NEXTW 
429c c3 81 1f			jp macro_next 
429f				endm 
# End of macro NEXTW
429f			.TCASE: 
429f				CWHEAD .SUBSTR 52 "TCASE" 5 WORD_FLAG_CODE 
429f 48				db WORD_SYS_CORE+52             
42a0 d5 43			dw .SUBSTR            
42a2 06				db 5 + 1 
42a3 .. 00			db "TCASE",0              
42a9				endm 
# End of macro CWHEAD
42a9			; | TCASE ( s -- s ) Title case string s  | DONE 
42a9					if DEBUG_FORTH_WORDS_KEY 
42a9						DMARK "TCS" 
42a9 f5				push af  
42aa 3a be 42			ld a, (.dmark)  
42ad 32 65 ee			ld (debug_mark),a  
42b0 3a bf 42			ld a, (.dmark+1)  
42b3 32 66 ee			ld (debug_mark+1),a  
42b6 3a c0 42			ld a, (.dmark+2)  
42b9 32 67 ee			ld (debug_mark+2),a  
42bc 18 03			jr .pastdmark  
42be ..			.dmark: db "TCS"  
42c1 f1			.pastdmark: pop af  
42c2			endm  
# End of macro DMARK
42c2						CALLMONITOR 
42c2 cd 6f ee			call debug_vector  
42c5				endm  
# End of macro CALLMONITOR
42c5					endif 
42c5			 
42c5					FORTH_DSP 
42c5 cd 5b 1d			call macro_forth_dsp 
42c8				endm 
# End of macro FORTH_DSP
42c8					 
42c8			; TODO check is string type 
42c8			 
42c8					FORTH_DSP_VALUEHL 
42c8 cd 95 1d			call macro_dsp_valuehl 
42cb				endm 
# End of macro FORTH_DSP_VALUEHL
42cb			; get pointer to string in hl 
42cb			 
42cb					if DEBUG_FORTH_WORDS 
42cb						DMARK "TC1" 
42cb f5				push af  
42cc 3a e0 42			ld a, (.dmark)  
42cf 32 65 ee			ld (debug_mark),a  
42d2 3a e1 42			ld a, (.dmark+1)  
42d5 32 66 ee			ld (debug_mark+1),a  
42d8 3a e2 42			ld a, (.dmark+2)  
42db 32 67 ee			ld (debug_mark+2),a  
42de 18 03			jr .pastdmark  
42e0 ..			.dmark: db "TC1"  
42e3 f1			.pastdmark: pop af  
42e4			endm  
# End of macro DMARK
42e4						CALLMONITOR 
42e4 cd 6f ee			call debug_vector  
42e7				endm  
# End of macro CALLMONITOR
42e7					endif 
42e7			 
42e7					; first time in turn to upper case first char 
42e7			 
42e7 7e					ld a, (hl) 
42e8 c3 72 43				jp .totsiptou 
42eb			 
42eb			 
42eb 7e			.tot:		ld a, (hl) 
42ec fe 00				cp 0 
42ee ca b6 43				jp z, .totdone 
42f1			 
42f1					if DEBUG_FORTH_WORDS 
42f1						DMARK "TC2" 
42f1 f5				push af  
42f2 3a 06 43			ld a, (.dmark)  
42f5 32 65 ee			ld (debug_mark),a  
42f8 3a 07 43			ld a, (.dmark+1)  
42fb 32 66 ee			ld (debug_mark+1),a  
42fe 3a 08 43			ld a, (.dmark+2)  
4301 32 67 ee			ld (debug_mark+2),a  
4304 18 03			jr .pastdmark  
4306 ..			.dmark: db "TC2"  
4309 f1			.pastdmark: pop af  
430a			endm  
# End of macro DMARK
430a						CALLMONITOR 
430a cd 6f ee			call debug_vector  
430d				endm  
# End of macro CALLMONITOR
430d					endif 
430d					; check to see if current char is a space 
430d			 
430d fe 20				cp ' ' 
430f 28 21				jr z, .totsp 
4311 cd 73 10				call to_lower 
4314					if DEBUG_FORTH_WORDS 
4314						DMARK "TC3" 
4314 f5				push af  
4315 3a 29 43			ld a, (.dmark)  
4318 32 65 ee			ld (debug_mark),a  
431b 3a 2a 43			ld a, (.dmark+1)  
431e 32 66 ee			ld (debug_mark+1),a  
4321 3a 2b 43			ld a, (.dmark+2)  
4324 32 67 ee			ld (debug_mark+2),a  
4327 18 03			jr .pastdmark  
4329 ..			.dmark: db "TC3"  
432c f1			.pastdmark: pop af  
432d			endm  
# End of macro DMARK
432d						CALLMONITOR 
432d cd 6f ee			call debug_vector  
4330				endm  
# End of macro CALLMONITOR
4330					endif 
4330 18 63				jr .totnxt 
4332			 
4332			.totsp:         ; on a space, find next char which should be upper 
4332			 
4332					if DEBUG_FORTH_WORDS 
4332						DMARK "TC4" 
4332 f5				push af  
4333 3a 47 43			ld a, (.dmark)  
4336 32 65 ee			ld (debug_mark),a  
4339 3a 48 43			ld a, (.dmark+1)  
433c 32 66 ee			ld (debug_mark+1),a  
433f 3a 49 43			ld a, (.dmark+2)  
4342 32 67 ee			ld (debug_mark+2),a  
4345 18 03			jr .pastdmark  
4347 ..			.dmark: db "TC4"  
434a f1			.pastdmark: pop af  
434b			endm  
# End of macro DMARK
434b						CALLMONITOR 
434b cd 6f ee			call debug_vector  
434e				endm  
# End of macro CALLMONITOR
434e					endif 
434e					;; 
434e			 
434e fe 20				cp ' ' 
4350 20 20				jr nz, .totsiptou 
4352 23					inc hl 
4353 7e					ld a, (hl) 
4354					if DEBUG_FORTH_WORDS 
4354						DMARK "TC5" 
4354 f5				push af  
4355 3a 69 43			ld a, (.dmark)  
4358 32 65 ee			ld (debug_mark),a  
435b 3a 6a 43			ld a, (.dmark+1)  
435e 32 66 ee			ld (debug_mark+1),a  
4361 3a 6b 43			ld a, (.dmark+2)  
4364 32 67 ee			ld (debug_mark+2),a  
4367 18 03			jr .pastdmark  
4369 ..			.dmark: db "TC5"  
436c f1			.pastdmark: pop af  
436d			endm  
# End of macro DMARK
436d						CALLMONITOR 
436d cd 6f ee			call debug_vector  
4370				endm  
# End of macro CALLMONITOR
4370					endif 
4370 18 c0				jr .totsp 
4372 fe 00		.totsiptou:    cp 0 
4374 28 40				jr z, .totdone 
4376					; not space and not zero term so upper case it 
4376 cd 6a 10				call to_upper 
4379			 
4379					if DEBUG_FORTH_WORDS 
4379						DMARK "TC6" 
4379 f5				push af  
437a 3a 8e 43			ld a, (.dmark)  
437d 32 65 ee			ld (debug_mark),a  
4380 3a 8f 43			ld a, (.dmark+1)  
4383 32 66 ee			ld (debug_mark+1),a  
4386 3a 90 43			ld a, (.dmark+2)  
4389 32 67 ee			ld (debug_mark+2),a  
438c 18 03			jr .pastdmark  
438e ..			.dmark: db "TC6"  
4391 f1			.pastdmark: pop af  
4392			endm  
# End of macro DMARK
4392						CALLMONITOR 
4392 cd 6f ee			call debug_vector  
4395				endm  
# End of macro CALLMONITOR
4395					endif 
4395			 
4395			 
4395			.totnxt: 
4395			 
4395 77					ld (hl), a 
4396 23					inc hl 
4397					if DEBUG_FORTH_WORDS 
4397						DMARK "TC7" 
4397 f5				push af  
4398 3a ac 43			ld a, (.dmark)  
439b 32 65 ee			ld (debug_mark),a  
439e 3a ad 43			ld a, (.dmark+1)  
43a1 32 66 ee			ld (debug_mark+1),a  
43a4 3a ae 43			ld a, (.dmark+2)  
43a7 32 67 ee			ld (debug_mark+2),a  
43aa 18 03			jr .pastdmark  
43ac ..			.dmark: db "TC7"  
43af f1			.pastdmark: pop af  
43b0			endm  
# End of macro DMARK
43b0						CALLMONITOR 
43b0 cd 6f ee			call debug_vector  
43b3				endm  
# End of macro CALLMONITOR
43b3					endif 
43b3 c3 eb 42				jp .tot 
43b6			 
43b6					 
43b6			 
43b6			 
43b6			; for each char convert to low 
43b6					 
43b6			.totdone: 
43b6					if DEBUG_FORTH_WORDS 
43b6						DMARK "TCd" 
43b6 f5				push af  
43b7 3a cb 43			ld a, (.dmark)  
43ba 32 65 ee			ld (debug_mark),a  
43bd 3a cc 43			ld a, (.dmark+1)  
43c0 32 66 ee			ld (debug_mark+1),a  
43c3 3a cd 43			ld a, (.dmark+2)  
43c6 32 67 ee			ld (debug_mark+2),a  
43c9 18 03			jr .pastdmark  
43cb ..			.dmark: db "TCd"  
43ce f1			.pastdmark: pop af  
43cf			endm  
# End of macro DMARK
43cf						CALLMONITOR 
43cf cd 6f ee			call debug_vector  
43d2				endm  
# End of macro CALLMONITOR
43d2					endif 
43d2					NEXTW 
43d2 c3 81 1f			jp macro_next 
43d5				endm 
# End of macro NEXTW
43d5			 
43d5			.SUBSTR: 
43d5				CWHEAD .LEFT 52 "SUBSTR" 6 WORD_FLAG_CODE 
43d5 48				db WORD_SYS_CORE+52             
43d6 33 44			dw .LEFT            
43d8 07				db 6 + 1 
43d9 .. 00			db "SUBSTR",0              
43e0				endm 
# End of macro CWHEAD
43e0			; | SUBSTR ( s u1 u2 -- s sb ) Push to TOS chars starting at position u1 and with length u2 from string s  | DONE 
43e0			 
43e0					if DEBUG_FORTH_WORDS_KEY 
43e0						DMARK "SST" 
43e0 f5				push af  
43e1 3a f5 43			ld a, (.dmark)  
43e4 32 65 ee			ld (debug_mark),a  
43e7 3a f6 43			ld a, (.dmark+1)  
43ea 32 66 ee			ld (debug_mark+1),a  
43ed 3a f7 43			ld a, (.dmark+2)  
43f0 32 67 ee			ld (debug_mark+2),a  
43f3 18 03			jr .pastdmark  
43f5 ..			.dmark: db "SST"  
43f8 f1			.pastdmark: pop af  
43f9			endm  
# End of macro DMARK
43f9						CALLMONITOR 
43f9 cd 6f ee			call debug_vector  
43fc				endm  
# End of macro CALLMONITOR
43fc					endif 
43fc			; TODO check string type 
43fc					FORTH_DSP_VALUEHL 
43fc cd 95 1d			call macro_dsp_valuehl 
43ff				endm 
# End of macro FORTH_DSP_VALUEHL
43ff			 
43ff e5					push hl      ; string length 
4400			 
4400					FORTH_DSP_POP 
4400 cd 4d 1e			call macro_forth_dsp_pop 
4403				endm 
# End of macro FORTH_DSP_POP
4403			 
4403					FORTH_DSP_VALUEHL 
4403 cd 95 1d			call macro_dsp_valuehl 
4406				endm 
# End of macro FORTH_DSP_VALUEHL
4406			 
4406 e5					push hl     ; start char 
4407			 
4407					FORTH_DSP_POP 
4407 cd 4d 1e			call macro_forth_dsp_pop 
440a				endm 
# End of macro FORTH_DSP_POP
440a			 
440a			 
440a					FORTH_DSP_VALUE 
440a cd 7e 1d			call macro_forth_dsp_value 
440d				endm 
# End of macro FORTH_DSP_VALUE
440d			 
440d d1					pop de    ; get start post offset 
440e			 
440e 19					add hl, de    ; starting offset 
440f			 
440f c1					pop bc 
4410 c5					push bc      ; grab size of string 
4411			 
4411 e5					push hl    ; save string start  
4412			 
4412 26 00				ld h, 0 
4414 69					ld l, c 
4415 23					inc hl 
4416 23					inc hl 
4417			 
4417 cd d0 11				call malloc 
441a				if DEBUG_FORTH_MALLOC_GUARD 
441a cc 4d 4d				call z,malloc_error 
441d				endif 
441d			 
441d eb					ex de, hl      ; save malloc area for string copy 
441e e1					pop hl    ; get back source 
441f c1					pop bc    ; get length of string back 
4420			 
4420 d5					push de    ; save malloc area for after we push 
4421 ed b0				ldir     ; copy substr 
4423			 
4423			 
4423 eb					ex de, hl 
4424 3e 00				ld a, 0 
4426 77					ld (hl), a   ; term substr 
4427			 
4427					 
4427 e1					pop hl    ; get malloc so we can push it 
4428 e5					push hl   ; save so we can free it afterwards 
4429			 
4429 cd fe 1b				call forth_push_str 
442c			 
442c e1					pop hl 
442d cd 9a 12				call free 
4430			 
4430					 
4430					 
4430			 
4430			 
4430					NEXTW 
4430 c3 81 1f			jp macro_next 
4433				endm 
# End of macro NEXTW
4433			 
4433			.LEFT: 
4433				CWHEAD .RIGHT 52 "LEFT" 4 WORD_FLAG_CODE 
4433 48				db WORD_SYS_CORE+52             
4434 5b 44			dw .RIGHT            
4436 05				db 4 + 1 
4437 .. 00			db "LEFT",0              
443c				endm 
# End of macro CWHEAD
443c			; | LEFT ( s u -- s sub ) Push to TOS string u long starting from left of s  | TODO 
443c					if DEBUG_FORTH_WORDS_KEY 
443c						DMARK "LEF" 
443c f5				push af  
443d 3a 51 44			ld a, (.dmark)  
4440 32 65 ee			ld (debug_mark),a  
4443 3a 52 44			ld a, (.dmark+1)  
4446 32 66 ee			ld (debug_mark+1),a  
4449 3a 53 44			ld a, (.dmark+2)  
444c 32 67 ee			ld (debug_mark+2),a  
444f 18 03			jr .pastdmark  
4451 ..			.dmark: db "LEF"  
4454 f1			.pastdmark: pop af  
4455			endm  
# End of macro DMARK
4455						CALLMONITOR 
4455 cd 6f ee			call debug_vector  
4458				endm  
# End of macro CALLMONITOR
4458					endif 
4458			 
4458					NEXTW 
4458 c3 81 1f			jp macro_next 
445b				endm 
# End of macro NEXTW
445b			.RIGHT: 
445b				CWHEAD .STR2NUM 52 "RIGHT" 5 WORD_FLAG_CODE 
445b 48				db WORD_SYS_CORE+52             
445c 84 44			dw .STR2NUM            
445e 06				db 5 + 1 
445f .. 00			db "RIGHT",0              
4465				endm 
# End of macro CWHEAD
4465			; | RIGHT ( s u -- s sub ) Push to TOS string u long starting from right of s  | TODO 
4465					if DEBUG_FORTH_WORDS_KEY 
4465						DMARK "RIG" 
4465 f5				push af  
4466 3a 7a 44			ld a, (.dmark)  
4469 32 65 ee			ld (debug_mark),a  
446c 3a 7b 44			ld a, (.dmark+1)  
446f 32 66 ee			ld (debug_mark+1),a  
4472 3a 7c 44			ld a, (.dmark+2)  
4475 32 67 ee			ld (debug_mark+2),a  
4478 18 03			jr .pastdmark  
447a ..			.dmark: db "RIG"  
447d f1			.pastdmark: pop af  
447e			endm  
# End of macro DMARK
447e						CALLMONITOR 
447e cd 6f ee			call debug_vector  
4481				endm  
# End of macro CALLMONITOR
4481					endif 
4481			 
4481					NEXTW 
4481 c3 81 1f			jp macro_next 
4484				endm 
# End of macro NEXTW
4484			 
4484			 
4484			.STR2NUM: 
4484				CWHEAD .NUM2STR 52 "STR2NUM" 7 WORD_FLAG_CODE 
4484 48				db WORD_SYS_CORE+52             
4485 10 45			dw .NUM2STR            
4487 08				db 7 + 1 
4488 .. 00			db "STR2NUM",0              
4490				endm 
# End of macro CWHEAD
4490			; | STR2NUM ( s -- n ) Convert a string on TOS to number | DONE 
4490			 
4490			 
4490			; TODO STR type check to do 
4490					if DEBUG_FORTH_WORDS_KEY 
4490						DMARK "S2N" 
4490 f5				push af  
4491 3a a5 44			ld a, (.dmark)  
4494 32 65 ee			ld (debug_mark),a  
4497 3a a6 44			ld a, (.dmark+1)  
449a 32 66 ee			ld (debug_mark+1),a  
449d 3a a7 44			ld a, (.dmark+2)  
44a0 32 67 ee			ld (debug_mark+2),a  
44a3 18 03			jr .pastdmark  
44a5 ..			.dmark: db "S2N"  
44a8 f1			.pastdmark: pop af  
44a9			endm  
# End of macro DMARK
44a9						CALLMONITOR 
44a9 cd 6f ee			call debug_vector  
44ac				endm  
# End of macro CALLMONITOR
44ac					endif 
44ac			 
44ac					;FORTH_DSP 
44ac					FORTH_DSP_VALUE 
44ac cd 7e 1d			call macro_forth_dsp_value 
44af				endm 
# End of macro FORTH_DSP_VALUE
44af					;inc hl 
44af			 
44af eb					ex de, hl 
44b0					if DEBUG_FORTH_WORDS 
44b0						DMARK "S2a" 
44b0 f5				push af  
44b1 3a c5 44			ld a, (.dmark)  
44b4 32 65 ee			ld (debug_mark),a  
44b7 3a c6 44			ld a, (.dmark+1)  
44ba 32 66 ee			ld (debug_mark+1),a  
44bd 3a c7 44			ld a, (.dmark+2)  
44c0 32 67 ee			ld (debug_mark+2),a  
44c3 18 03			jr .pastdmark  
44c5 ..			.dmark: db "S2a"  
44c8 f1			.pastdmark: pop af  
44c9			endm  
# End of macro DMARK
44c9						CALLMONITOR 
44c9 cd 6f ee			call debug_vector  
44cc				endm  
# End of macro CALLMONITOR
44cc					endif 
44cc cd f2 10				call string_to_uint16 
44cf			 
44cf					if DEBUG_FORTH_WORDS 
44cf						DMARK "S2b" 
44cf f5				push af  
44d0 3a e4 44			ld a, (.dmark)  
44d3 32 65 ee			ld (debug_mark),a  
44d6 3a e5 44			ld a, (.dmark+1)  
44d9 32 66 ee			ld (debug_mark+1),a  
44dc 3a e6 44			ld a, (.dmark+2)  
44df 32 67 ee			ld (debug_mark+2),a  
44e2 18 03			jr .pastdmark  
44e4 ..			.dmark: db "S2b"  
44e7 f1			.pastdmark: pop af  
44e8			endm  
# End of macro DMARK
44e8						CALLMONITOR 
44e8 cd 6f ee			call debug_vector  
44eb				endm  
# End of macro CALLMONITOR
44eb					endif 
44eb			;		push hl 
44eb					FORTH_DSP_POP 
44eb cd 4d 1e			call macro_forth_dsp_pop 
44ee				endm 
# End of macro FORTH_DSP_POP
44ee			;		pop hl 
44ee					 
44ee					if DEBUG_FORTH_WORDS 
44ee						DMARK "S2b" 
44ee f5				push af  
44ef 3a 03 45			ld a, (.dmark)  
44f2 32 65 ee			ld (debug_mark),a  
44f5 3a 04 45			ld a, (.dmark+1)  
44f8 32 66 ee			ld (debug_mark+1),a  
44fb 3a 05 45			ld a, (.dmark+2)  
44fe 32 67 ee			ld (debug_mark+2),a  
4501 18 03			jr .pastdmark  
4503 ..			.dmark: db "S2b"  
4506 f1			.pastdmark: pop af  
4507			endm  
# End of macro DMARK
4507						CALLMONITOR 
4507 cd 6f ee			call debug_vector  
450a				endm  
# End of macro CALLMONITOR
450a					endif 
450a cd 90 1b				call forth_push_numhl	 
450d			 
450d				 
450d				       NEXTW 
450d c3 81 1f			jp macro_next 
4510				endm 
# End of macro NEXTW
4510			.NUM2STR: 
4510				CWHEAD .CONCAT 52 "NUM2STR" 7 WORD_FLAG_CODE 
4510 48				db WORD_SYS_CORE+52             
4511 1f 45			dw .CONCAT            
4513 08				db 7 + 1 
4514 .. 00			db "NUM2STR",0              
451c				endm 
# End of macro CWHEAD
451c			; | NUM2STR ( n -- s ) Convert a number on TOS to string | TODO 
451c			 
451c			;		; malloc a string to target 
451c			;		ld hl, 10     ; TODO max string size should be fine 
451c			;		call malloc 
451c			;		push hl    ; save malloc location 
451c			; 
451c			; 
451c			;; TODO check int type 
451c			;		FORTH_DSP_VALUEHL 
451c			;		ld a, l 
451c			;		call DispAToASCII   
451c			;;TODO need to chage above call to dump into string 
451c			; 
451c			; 
451c			 
451c				       NEXTW 
451c c3 81 1f			jp macro_next 
451f				endm 
# End of macro NEXTW
451f			 
451f			.CONCAT: 
451f				CWHEAD .FIND 52 "CONCAT" 6 WORD_FLAG_CODE 
451f 48				db WORD_SYS_CORE+52             
4520 d2 45			dw .FIND            
4522 07				db 6 + 1 
4523 .. 00			db "CONCAT",0              
452a				endm 
# End of macro CWHEAD
452a			; | CONCAT ( s1 s2 -- s3 ) A s1 + s2 is pushed onto the stack | DONE 
452a			 
452a			; TODO check string type 
452a			; TODO create macro to get pointer for next item on stack. Handy for lots of things 
452a			 
452a					if DEBUG_FORTH_WORDS_KEY 
452a						DMARK "CON" 
452a f5				push af  
452b 3a 3f 45			ld a, (.dmark)  
452e 32 65 ee			ld (debug_mark),a  
4531 3a 40 45			ld a, (.dmark+1)  
4534 32 66 ee			ld (debug_mark+1),a  
4537 3a 41 45			ld a, (.dmark+2)  
453a 32 67 ee			ld (debug_mark+2),a  
453d 18 03			jr .pastdmark  
453f ..			.dmark: db "CON"  
4542 f1			.pastdmark: pop af  
4543			endm  
# End of macro DMARK
4543						CALLMONITOR 
4543 cd 6f ee			call debug_vector  
4546				endm  
# End of macro CALLMONITOR
4546					endif 
4546			 
4546			 
4546					FORTH_DSP_VALUE 
4546 cd 7e 1d			call macro_forth_dsp_value 
4549				endm 
# End of macro FORTH_DSP_VALUE
4549 e5					push hl   ; s2 
454a			 
454a					FORTH_DSP_POP 
454a cd 4d 1e			call macro_forth_dsp_pop 
454d				endm 
# End of macro FORTH_DSP_POP
454d			 
454d					FORTH_DSP_VALUE 
454d cd 7e 1d			call macro_forth_dsp_value 
4550				endm 
# End of macro FORTH_DSP_VALUE
4550			 
4550 e5					push hl   ; s1 
4551			 
4551					FORTH_DSP_POP 
4551 cd 4d 1e			call macro_forth_dsp_pop 
4554				endm 
# End of macro FORTH_DSP_POP
4554					 
4554			 
4554					; copy s1 
4554			 
4554				 
4554					; save ptr 
4554 e1					pop hl  
4555 e5					push hl 
4556 3e 00				ld a, 0 
4558 cd 66 11				call strlent 
455b					;inc hl    ; zer0 
455b 06 00				ld b, 0 
455d 4d					ld c, l 
455e e1					pop hl		 
455f 11 bb e2				ld de, scratch	 
4562					if DEBUG_FORTH_WORDS 
4562						DMARK "CO1" 
4562 f5				push af  
4563 3a 77 45			ld a, (.dmark)  
4566 32 65 ee			ld (debug_mark),a  
4569 3a 78 45			ld a, (.dmark+1)  
456c 32 66 ee			ld (debug_mark+1),a  
456f 3a 79 45			ld a, (.dmark+2)  
4572 32 67 ee			ld (debug_mark+2),a  
4575 18 03			jr .pastdmark  
4577 ..			.dmark: db "CO1"  
457a f1			.pastdmark: pop af  
457b			endm  
# End of macro DMARK
457b						CALLMONITOR 
457b cd 6f ee			call debug_vector  
457e				endm  
# End of macro CALLMONITOR
457e					endif 
457e ed b0				ldir 
4580			 
4580 e1					pop hl 
4581 e5					push hl 
4582 d5					push de 
4583			 
4583			 
4583 3e 00				ld a, 0 
4585 cd 66 11				call strlent 
4588 23					inc hl    ; zer0 
4589 23					inc hl 
458a 06 00				ld b, 0 
458c 4d					ld c, l 
458d d1					pop de 
458e e1					pop hl		 
458f					if DEBUG_FORTH_WORDS 
458f						DMARK "CO2" 
458f f5				push af  
4590 3a a4 45			ld a, (.dmark)  
4593 32 65 ee			ld (debug_mark),a  
4596 3a a5 45			ld a, (.dmark+1)  
4599 32 66 ee			ld (debug_mark+1),a  
459c 3a a6 45			ld a, (.dmark+2)  
459f 32 67 ee			ld (debug_mark+2),a  
45a2 18 03			jr .pastdmark  
45a4 ..			.dmark: db "CO2"  
45a7 f1			.pastdmark: pop af  
45a8			endm  
# End of macro DMARK
45a8						CALLMONITOR 
45a8 cd 6f ee			call debug_vector  
45ab				endm  
# End of macro CALLMONITOR
45ab					endif 
45ab ed b0				ldir 
45ad			 
45ad			 
45ad			 
45ad 21 bb e2				ld hl, scratch 
45b0					if DEBUG_FORTH_WORDS 
45b0						DMARK "CO5" 
45b0 f5				push af  
45b1 3a c5 45			ld a, (.dmark)  
45b4 32 65 ee			ld (debug_mark),a  
45b7 3a c6 45			ld a, (.dmark+1)  
45ba 32 66 ee			ld (debug_mark+1),a  
45bd 3a c7 45			ld a, (.dmark+2)  
45c0 32 67 ee			ld (debug_mark+2),a  
45c3 18 03			jr .pastdmark  
45c5 ..			.dmark: db "CO5"  
45c8 f1			.pastdmark: pop af  
45c9			endm  
# End of macro DMARK
45c9						CALLMONITOR 
45c9 cd 6f ee			call debug_vector  
45cc				endm  
# End of macro CALLMONITOR
45cc					endif 
45cc			 
45cc cd fe 1b				call forth_push_str 
45cf			 
45cf			 
45cf			 
45cf			 
45cf				       NEXTW 
45cf c3 81 1f			jp macro_next 
45d2				endm 
# End of macro NEXTW
45d2			 
45d2			 
45d2			.FIND: 
45d2				CWHEAD .LEN 55 "FIND" 4 WORD_FLAG_CODE 
45d2 4b				db WORD_SYS_CORE+55             
45d3 90 46			dw .LEN            
45d5 05				db 4 + 1 
45d6 .. 00			db "FIND",0              
45db				endm 
# End of macro CWHEAD
45db			; | FIND ( s c -- s u ) Search the string s for the char c and push the position of the first occurance to TOS | DONE 
45db			 
45db					if DEBUG_FORTH_WORDS_KEY 
45db						DMARK "FND" 
45db f5				push af  
45dc 3a f0 45			ld a, (.dmark)  
45df 32 65 ee			ld (debug_mark),a  
45e2 3a f1 45			ld a, (.dmark+1)  
45e5 32 66 ee			ld (debug_mark+1),a  
45e8 3a f2 45			ld a, (.dmark+2)  
45eb 32 67 ee			ld (debug_mark+2),a  
45ee 18 03			jr .pastdmark  
45f0 ..			.dmark: db "FND"  
45f3 f1			.pastdmark: pop af  
45f4			endm  
# End of macro DMARK
45f4						CALLMONITOR 
45f4 cd 6f ee			call debug_vector  
45f7				endm  
# End of macro CALLMONITOR
45f7					endif 
45f7			 
45f7			; TODO check string type 
45f7					FORTH_DSP_VALUE 
45f7 cd 7e 1d			call macro_forth_dsp_value 
45fa				endm 
# End of macro FORTH_DSP_VALUE
45fa			 
45fa e5					push hl    
45fb 7e					ld a,(hl)    ; char to find   
45fc			; TODO change char to substr 
45fc			 
45fc f5					push af 
45fd					 
45fd			 
45fd			 
45fd					if DEBUG_FORTH_WORDS 
45fd						DMARK "FN1" 
45fd f5				push af  
45fe 3a 12 46			ld a, (.dmark)  
4601 32 65 ee			ld (debug_mark),a  
4604 3a 13 46			ld a, (.dmark+1)  
4607 32 66 ee			ld (debug_mark+1),a  
460a 3a 14 46			ld a, (.dmark+2)  
460d 32 67 ee			ld (debug_mark+2),a  
4610 18 03			jr .pastdmark  
4612 ..			.dmark: db "FN1"  
4615 f1			.pastdmark: pop af  
4616			endm  
# End of macro DMARK
4616						CALLMONITOR 
4616 cd 6f ee			call debug_vector  
4619				endm  
# End of macro CALLMONITOR
4619					endif 
4619			 
4619					FORTH_DSP_POP 
4619 cd 4d 1e			call macro_forth_dsp_pop 
461c				endm 
# End of macro FORTH_DSP_POP
461c			 
461c					; string to search 
461c			 
461c					FORTH_DSP_VALUE 
461c cd 7e 1d			call macro_forth_dsp_value 
461f				endm 
# End of macro FORTH_DSP_VALUE
461f			 
461f d1					pop de  ; d is char to find  
4620			 
4620					if DEBUG_FORTH_WORDS 
4620						DMARK "FN2" 
4620 f5				push af  
4621 3a 35 46			ld a, (.dmark)  
4624 32 65 ee			ld (debug_mark),a  
4627 3a 36 46			ld a, (.dmark+1)  
462a 32 66 ee			ld (debug_mark+1),a  
462d 3a 37 46			ld a, (.dmark+2)  
4630 32 67 ee			ld (debug_mark+2),a  
4633 18 03			jr .pastdmark  
4635 ..			.dmark: db "FN2"  
4638 f1			.pastdmark: pop af  
4639			endm  
# End of macro DMARK
4639						CALLMONITOR 
4639 cd 6f ee			call debug_vector  
463c				endm  
# End of macro CALLMONITOR
463c					endif 
463c					 
463c 01 00 00				ld bc, 0 
463f 7e			.findchar:      ld a,(hl) 
4640 fe 00				cp 0   		 
4642 28 27				jr z, .finddone     
4644 ba					cp d 
4645 28 20				jr z, .foundchar 
4647 03					inc bc 
4648 23					inc hl 
4649					if DEBUG_FORTH_WORDS 
4649						DMARK "FN3" 
4649 f5				push af  
464a 3a 5e 46			ld a, (.dmark)  
464d 32 65 ee			ld (debug_mark),a  
4650 3a 5f 46			ld a, (.dmark+1)  
4653 32 66 ee			ld (debug_mark+1),a  
4656 3a 60 46			ld a, (.dmark+2)  
4659 32 67 ee			ld (debug_mark+2),a  
465c 18 03			jr .pastdmark  
465e ..			.dmark: db "FN3"  
4661 f1			.pastdmark: pop af  
4662			endm  
# End of macro DMARK
4662						CALLMONITOR 
4662 cd 6f ee			call debug_vector  
4665				endm  
# End of macro CALLMONITOR
4665					endif 
4665 18 d8				jr .findchar 
4667			 
4667			 
4667 c5			.foundchar:	push bc 
4668 e1					pop hl 
4669 18 03				jr .findexit 
466b			 
466b			 
466b							 
466b			 
466b			.finddone:     ; got to end of string with no find 
466b 21 00 00				ld hl, 0 
466e			.findexit: 
466e			 
466e					if DEBUG_FORTH_WORDS 
466e						DMARK "FNd" 
466e f5				push af  
466f 3a 83 46			ld a, (.dmark)  
4672 32 65 ee			ld (debug_mark),a  
4675 3a 84 46			ld a, (.dmark+1)  
4678 32 66 ee			ld (debug_mark+1),a  
467b 3a 85 46			ld a, (.dmark+2)  
467e 32 67 ee			ld (debug_mark+2),a  
4681 18 03			jr .pastdmark  
4683 ..			.dmark: db "FNd"  
4686 f1			.pastdmark: pop af  
4687			endm  
# End of macro DMARK
4687						CALLMONITOR 
4687 cd 6f ee			call debug_vector  
468a				endm  
# End of macro CALLMONITOR
468a					endif 
468a cd 90 1b			call forth_push_numhl 
468d			 
468d				       NEXTW 
468d c3 81 1f			jp macro_next 
4690				endm 
# End of macro NEXTW
4690			 
4690			.LEN: 
4690				CWHEAD .ASC 56 "COUNT" 5 WORD_FLAG_CODE 
4690 4c				db WORD_SYS_CORE+56             
4691 fa 46			dw .ASC            
4693 06				db 5 + 1 
4694 .. 00			db "COUNT",0              
469a				endm 
# End of macro CWHEAD
469a			; | COUNT (  str -- str u1 ) Push the length of the string str on TOS as u1 | DONE 
469a			 
469a					if DEBUG_FORTH_WORDS_KEY 
469a						DMARK "CNT" 
469a f5				push af  
469b 3a af 46			ld a, (.dmark)  
469e 32 65 ee			ld (debug_mark),a  
46a1 3a b0 46			ld a, (.dmark+1)  
46a4 32 66 ee			ld (debug_mark+1),a  
46a7 3a b1 46			ld a, (.dmark+2)  
46aa 32 67 ee			ld (debug_mark+2),a  
46ad 18 03			jr .pastdmark  
46af ..			.dmark: db "CNT"  
46b2 f1			.pastdmark: pop af  
46b3			endm  
# End of macro DMARK
46b3						CALLMONITOR 
46b3 cd 6f ee			call debug_vector  
46b6				endm  
# End of macro CALLMONITOR
46b6					endif 
46b6			; TODO check string type 
46b6					FORTH_DSP_VALUE 
46b6 cd 7e 1d			call macro_forth_dsp_value 
46b9				endm 
# End of macro FORTH_DSP_VALUE
46b9			 
46b9			 
46b9					if DEBUG_FORTH_WORDS 
46b9						DMARK "CN?" 
46b9 f5				push af  
46ba 3a ce 46			ld a, (.dmark)  
46bd 32 65 ee			ld (debug_mark),a  
46c0 3a cf 46			ld a, (.dmark+1)  
46c3 32 66 ee			ld (debug_mark+1),a  
46c6 3a d0 46			ld a, (.dmark+2)  
46c9 32 67 ee			ld (debug_mark+2),a  
46cc 18 03			jr .pastdmark  
46ce ..			.dmark: db "CN?"  
46d1 f1			.pastdmark: pop af  
46d2			endm  
# End of macro DMARK
46d2						CALLMONITOR 
46d2 cd 6f ee			call debug_vector  
46d5				endm  
# End of macro CALLMONITOR
46d5					endif 
46d5 cd 5b 11				call strlenz 
46d8					if DEBUG_FORTH_WORDS 
46d8						DMARK "CNl" 
46d8 f5				push af  
46d9 3a ed 46			ld a, (.dmark)  
46dc 32 65 ee			ld (debug_mark),a  
46df 3a ee 46			ld a, (.dmark+1)  
46e2 32 66 ee			ld (debug_mark+1),a  
46e5 3a ef 46			ld a, (.dmark+2)  
46e8 32 67 ee			ld (debug_mark+2),a  
46eb 18 03			jr .pastdmark  
46ed ..			.dmark: db "CNl"  
46f0 f1			.pastdmark: pop af  
46f1			endm  
# End of macro DMARK
46f1						CALLMONITOR 
46f1 cd 6f ee			call debug_vector  
46f4				endm  
# End of macro CALLMONITOR
46f4					endif 
46f4			 
46f4 cd 90 1b				call forth_push_numhl 
46f7			 
46f7			 
46f7			 
46f7				       NEXTW 
46f7 c3 81 1f			jp macro_next 
46fa				endm 
# End of macro NEXTW
46fa			.ASC: 
46fa				CWHEAD .CHR 57 "ASC" 3 WORD_FLAG_CODE 
46fa 4d				db WORD_SYS_CORE+57             
46fb 68 47			dw .CHR            
46fd 04				db 3 + 1 
46fe .. 00			db "ASC",0              
4702				endm 
# End of macro CWHEAD
4702			; | ASC ( u -- n ) Get the ASCII value of the first character of the string on TOS | DONE 
4702					if DEBUG_FORTH_WORDS_KEY 
4702						DMARK "ASC" 
4702 f5				push af  
4703 3a 17 47			ld a, (.dmark)  
4706 32 65 ee			ld (debug_mark),a  
4709 3a 18 47			ld a, (.dmark+1)  
470c 32 66 ee			ld (debug_mark+1),a  
470f 3a 19 47			ld a, (.dmark+2)  
4712 32 67 ee			ld (debug_mark+2),a  
4715 18 03			jr .pastdmark  
4717 ..			.dmark: db "ASC"  
471a f1			.pastdmark: pop af  
471b			endm  
# End of macro DMARK
471b						CALLMONITOR 
471b cd 6f ee			call debug_vector  
471e				endm  
# End of macro CALLMONITOR
471e					endif 
471e					FORTH_DSP_VALUE 
471e cd 7e 1d			call macro_forth_dsp_value 
4721				endm 
# End of macro FORTH_DSP_VALUE
4721					;v5 FORTH_DSP_VALUE 
4721			;		inc hl      ; now at start of numeric as string 
4721			 
4721 e5					push hl 
4722			 
4722					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4722 cd 4d 1e			call macro_forth_dsp_pop 
4725				endm 
# End of macro FORTH_DSP_POP
4725			 
4725 e1					pop hl 
4726			 
4726					if DEBUG_FORTH_WORDS 
4726						DMARK "AS1" 
4726 f5				push af  
4727 3a 3b 47			ld a, (.dmark)  
472a 32 65 ee			ld (debug_mark),a  
472d 3a 3c 47			ld a, (.dmark+1)  
4730 32 66 ee			ld (debug_mark+1),a  
4733 3a 3d 47			ld a, (.dmark+2)  
4736 32 67 ee			ld (debug_mark+2),a  
4739 18 03			jr .pastdmark  
473b ..			.dmark: db "AS1"  
473e f1			.pastdmark: pop af  
473f			endm  
# End of macro DMARK
473f						CALLMONITOR 
473f cd 6f ee			call debug_vector  
4742				endm  
# End of macro CALLMONITOR
4742					endif 
4742					; push the content of a onto the stack as a value 
4742			 
4742 7e					ld a,(hl)   ; get char 
4743 26 00				ld h,0 
4745 6f					ld l,a 
4746					if DEBUG_FORTH_WORDS 
4746						DMARK "AS2" 
4746 f5				push af  
4747 3a 5b 47			ld a, (.dmark)  
474a 32 65 ee			ld (debug_mark),a  
474d 3a 5c 47			ld a, (.dmark+1)  
4750 32 66 ee			ld (debug_mark+1),a  
4753 3a 5d 47			ld a, (.dmark+2)  
4756 32 67 ee			ld (debug_mark+2),a  
4759 18 03			jr .pastdmark  
475b ..			.dmark: db "AS2"  
475e f1			.pastdmark: pop af  
475f			endm  
# End of macro DMARK
475f						CALLMONITOR 
475f cd 6f ee			call debug_vector  
4762				endm  
# End of macro CALLMONITOR
4762					endif 
4762 cd 90 1b				call forth_push_numhl 
4765			 
4765				       NEXTW 
4765 c3 81 1f			jp macro_next 
4768				endm 
# End of macro NEXTW
4768			 
4768			.CHR: 
4768				CWHEAD .ENDSTR 57 "CHR" 3 WORD_FLAG_CODE 
4768 4d				db WORD_SYS_CORE+57             
4769 a4 47			dw .ENDSTR            
476b 04				db 3 + 1 
476c .. 00			db "CHR",0              
4770				endm 
# End of macro CWHEAD
4770			; | CHR ( u -- n ) The ASCII character value of u is turned into a string n on the stack | DONE 
4770					if DEBUG_FORTH_WORDS_KEY 
4770						DMARK "CHR" 
4770 f5				push af  
4771 3a 85 47			ld a, (.dmark)  
4774 32 65 ee			ld (debug_mark),a  
4777 3a 86 47			ld a, (.dmark+1)  
477a 32 66 ee			ld (debug_mark+1),a  
477d 3a 87 47			ld a, (.dmark+2)  
4780 32 67 ee			ld (debug_mark+2),a  
4783 18 03			jr .pastdmark  
4785 ..			.dmark: db "CHR"  
4788 f1			.pastdmark: pop af  
4789			endm  
# End of macro DMARK
4789						CALLMONITOR 
4789 cd 6f ee			call debug_vector  
478c				endm  
# End of macro CALLMONITOR
478c					endif 
478c					FORTH_DSP_VALUEHL 
478c cd 95 1d			call macro_dsp_valuehl 
478f				endm 
# End of macro FORTH_DSP_VALUEHL
478f			 
478f					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
478f cd 4d 1e			call macro_forth_dsp_pop 
4792				endm 
# End of macro FORTH_DSP_POP
4792			 
4792					; save asci byte as a zero term string and push string 
4792			 
4792 7d					ld a,l 
4793 32 bb e2				ld (scratch), a 
4796			 
4796 3e 00				ld a, 0 
4798 32 bc e2				ld (scratch+1), a 
479b			 
479b 21 bb e2				ld hl, scratch 
479e cd fe 1b				call forth_push_str 
47a1			 
47a1			 
47a1				       NEXTW 
47a1 c3 81 1f			jp macro_next 
47a4				endm 
# End of macro NEXTW
47a4			 
47a4			 
47a4			 
47a4			 
47a4			.ENDSTR: 
47a4			; eof 
47a4			 
# End of file forth_words_str.asm
47a4			include "forth_words_key.asm" 
47a4			 
47a4			; | ## Keyboard Words 
47a4			 
47a4			.KEY: 
47a4				CWHEAD .WAITK 42 "KEY" 3 WORD_FLAG_CODE 
47a4 3e				db WORD_SYS_CORE+42             
47a5 d4 47			dw .WAITK            
47a7 04				db 3 + 1 
47a8 .. 00			db "KEY",0              
47ac				endm 
# End of macro CWHEAD
47ac			; | KEY ( -- u ) A non-blocking read of keypress | DONE 
47ac			; | | The ASCII key (or key code) is pushed to stack. If no key is currently held down then push a 0 
47ac			; | | Can use something like this to process: 
47ac			; | | > repeat active . key ?dup if emit then #1 until  
47ac			 
47ac					if DEBUG_FORTH_WORDS_KEY 
47ac						DMARK "KEY" 
47ac f5				push af  
47ad 3a c1 47			ld a, (.dmark)  
47b0 32 65 ee			ld (debug_mark),a  
47b3 3a c2 47			ld a, (.dmark+1)  
47b6 32 66 ee			ld (debug_mark+1),a  
47b9 3a c3 47			ld a, (.dmark+2)  
47bc 32 67 ee			ld (debug_mark+2),a  
47bf 18 03			jr .pastdmark  
47c1 ..			.dmark: db "KEY"  
47c4 f1			.pastdmark: pop af  
47c5			endm  
# End of macro DMARK
47c5						CALLMONITOR 
47c5 cd 6f ee			call debug_vector  
47c8				endm  
# End of macro CALLMONITOR
47c8					endif 
47c8			; TODO currently waits 
47c8 cd c9 5e				call cin 
47cb					;call cin_wait 
47cb 6f					ld l, a 
47cc 26 00				ld h, 0 
47ce cd 90 1b				call forth_push_numhl 
47d1					NEXTW 
47d1 c3 81 1f			jp macro_next 
47d4				endm 
# End of macro NEXTW
47d4			.WAITK: 
47d4				CWHEAD .ACCEPT 43 "WAITK" 5 WORD_FLAG_CODE 
47d4 3f				db WORD_SYS_CORE+43             
47d5 06 48			dw .ACCEPT            
47d7 06				db 5 + 1 
47d8 .. 00			db "WAITK",0              
47de				endm 
# End of macro CWHEAD
47de			; | WAITK ( -- w ) Wait for keypress TOS is key press | DONE 
47de					if DEBUG_FORTH_WORDS_KEY 
47de						DMARK "WAI" 
47de f5				push af  
47df 3a f3 47			ld a, (.dmark)  
47e2 32 65 ee			ld (debug_mark),a  
47e5 3a f4 47			ld a, (.dmark+1)  
47e8 32 66 ee			ld (debug_mark+1),a  
47eb 3a f5 47			ld a, (.dmark+2)  
47ee 32 67 ee			ld (debug_mark+2),a  
47f1 18 03			jr .pastdmark  
47f3 ..			.dmark: db "WAI"  
47f6 f1			.pastdmark: pop af  
47f7			endm  
# End of macro DMARK
47f7						CALLMONITOR 
47f7 cd 6f ee			call debug_vector  
47fa				endm  
# End of macro CALLMONITOR
47fa					endif 
47fa cd c1 5e				call cin_wait 
47fd 6f					ld l, a 
47fe 26 00				ld h, 0 
4800 cd 90 1b				call forth_push_numhl 
4803					NEXTW 
4803 c3 81 1f			jp macro_next 
4806				endm 
# End of macro NEXTW
4806			.ACCEPT: 
4806				CWHEAD .EDIT 44 "ACCEPT" 6 WORD_FLAG_CODE 
4806 40				db WORD_SYS_CORE+44             
4807 64 48			dw .EDIT            
4809 07				db 6 + 1 
480a .. 00			db "ACCEPT",0              
4811				endm 
# End of macro CWHEAD
4811			; | ACCEPT ( -- w ) Prompt for text input and push pointer to string | DONE 
4811					; TODO crashes on push 
4811					if DEBUG_FORTH_WORDS_KEY 
4811						DMARK "ACC" 
4811 f5				push af  
4812 3a 26 48			ld a, (.dmark)  
4815 32 65 ee			ld (debug_mark),a  
4818 3a 27 48			ld a, (.dmark+1)  
481b 32 66 ee			ld (debug_mark+1),a  
481e 3a 28 48			ld a, (.dmark+2)  
4821 32 67 ee			ld (debug_mark+2),a  
4824 18 03			jr .pastdmark  
4826 ..			.dmark: db "ACC"  
4829 f1			.pastdmark: pop af  
482a			endm  
# End of macro DMARK
482a						CALLMONITOR 
482a cd 6f ee			call debug_vector  
482d				endm  
# End of macro CALLMONITOR
482d					endif 
482d 21 b9 e4				ld hl, os_input 
4830 3e 00				ld a, 0 
4832 77					ld (hl),a 
4833 3a 58 ea				ld a,(f_cursor_ptr) 
4836 16 64				ld d, 100 
4838 0e 00				ld c, 0 
483a 1e 28				ld e, 40 
483c cd 22 0e				call input_str 
483f					; TODO perhaps do a type check and wrap in quotes if not a number 
483f 21 b9 e4				ld hl, os_input 
4842					if DEBUG_FORTH_WORDS 
4842						DMARK "AC1" 
4842 f5				push af  
4843 3a 57 48			ld a, (.dmark)  
4846 32 65 ee			ld (debug_mark),a  
4849 3a 58 48			ld a, (.dmark+1)  
484c 32 66 ee			ld (debug_mark+1),a  
484f 3a 59 48			ld a, (.dmark+2)  
4852 32 67 ee			ld (debug_mark+2),a  
4855 18 03			jr .pastdmark  
4857 ..			.dmark: db "AC1"  
485a f1			.pastdmark: pop af  
485b			endm  
# End of macro DMARK
485b						CALLMONITOR 
485b cd 6f ee			call debug_vector  
485e				endm  
# End of macro CALLMONITOR
485e					endif 
485e cd fe 1b				call forth_push_str 
4861					NEXTW 
4861 c3 81 1f			jp macro_next 
4864				endm 
# End of macro NEXTW
4864			 
4864			.EDIT: 
4864				CWHEAD .DEDIT 44 "EDIT" 4 WORD_FLAG_CODE 
4864 40				db WORD_SYS_CORE+44             
4865 06 49			dw .DEDIT            
4867 05				db 4 + 1 
4868 .. 00			db "EDIT",0              
486d				endm 
# End of macro CWHEAD
486d			; | EDIT ( u -- u ) Takes string on TOS and allows editing of it. Pushes it back once done. | DONE 
486d			 
486d					; TODO does not copy from stack 
486d					if DEBUG_FORTH_WORDS_KEY 
486d						DMARK "EDT" 
486d f5				push af  
486e 3a 82 48			ld a, (.dmark)  
4871 32 65 ee			ld (debug_mark),a  
4874 3a 83 48			ld a, (.dmark+1)  
4877 32 66 ee			ld (debug_mark+1),a  
487a 3a 84 48			ld a, (.dmark+2)  
487d 32 67 ee			ld (debug_mark+2),a  
4880 18 03			jr .pastdmark  
4882 ..			.dmark: db "EDT"  
4885 f1			.pastdmark: pop af  
4886			endm  
# End of macro DMARK
4886						CALLMONITOR 
4886 cd 6f ee			call debug_vector  
4889				endm  
# End of macro CALLMONITOR
4889					endif 
4889			 
4889					;FORTH_DSP 
4889					FORTH_DSP_VALUEHL 
4889 cd 95 1d			call macro_dsp_valuehl 
488c				endm 
# End of macro FORTH_DSP_VALUEHL
488c			;		inc hl    ; TODO do type check 
488c			 
488c			;		call get_word_hl 
488c e5					push hl 
488d					if DEBUG_FORTH_WORDS 
488d						DMARK "EDp" 
488d f5				push af  
488e 3a a2 48			ld a, (.dmark)  
4891 32 65 ee			ld (debug_mark),a  
4894 3a a3 48			ld a, (.dmark+1)  
4897 32 66 ee			ld (debug_mark+1),a  
489a 3a a4 48			ld a, (.dmark+2)  
489d 32 67 ee			ld (debug_mark+2),a  
48a0 18 03			jr .pastdmark  
48a2 ..			.dmark: db "EDp"  
48a5 f1			.pastdmark: pop af  
48a6			endm  
# End of macro DMARK
48a6						CALLMONITOR 
48a6 cd 6f ee			call debug_vector  
48a9				endm  
# End of macro CALLMONITOR
48a9					endif 
48a9				;	ld a, 0 
48a9 cd 5b 11				call strlenz 
48ac 23					inc hl 
48ad			 
48ad 06 00				ld b, 0 
48af 4d					ld c, l 
48b0			 
48b0 e1					pop hl 
48b1 11 b9 e4				ld de, os_input 
48b4					if DEBUG_FORTH_WORDS_KEY 
48b4						DMARK "EDc" 
48b4 f5				push af  
48b5 3a c9 48			ld a, (.dmark)  
48b8 32 65 ee			ld (debug_mark),a  
48bb 3a ca 48			ld a, (.dmark+1)  
48be 32 66 ee			ld (debug_mark+1),a  
48c1 3a cb 48			ld a, (.dmark+2)  
48c4 32 67 ee			ld (debug_mark+2),a  
48c7 18 03			jr .pastdmark  
48c9 ..			.dmark: db "EDc"  
48cc f1			.pastdmark: pop af  
48cd			endm  
# End of macro DMARK
48cd						CALLMONITOR 
48cd cd 6f ee			call debug_vector  
48d0				endm  
# End of macro CALLMONITOR
48d0					endif 
48d0 ed b0				ldir 
48d2			 
48d2			 
48d2 21 b9 e4				ld hl, os_input 
48d5					;ld a, 0 
48d5					;ld (hl),a 
48d5 3a 58 ea				ld a,(f_cursor_ptr) 
48d8 16 64				ld d, 100 
48da 0e 00				ld c, 0 
48dc 1e 28				ld e, 40 
48de cd 22 0e				call input_str 
48e1					; TODO perhaps do a type check and wrap in quotes if not a number 
48e1 21 b9 e4				ld hl, os_input 
48e4					if DEBUG_FORTH_WORDS 
48e4						DMARK "ED1" 
48e4 f5				push af  
48e5 3a f9 48			ld a, (.dmark)  
48e8 32 65 ee			ld (debug_mark),a  
48eb 3a fa 48			ld a, (.dmark+1)  
48ee 32 66 ee			ld (debug_mark+1),a  
48f1 3a fb 48			ld a, (.dmark+2)  
48f4 32 67 ee			ld (debug_mark+2),a  
48f7 18 03			jr .pastdmark  
48f9 ..			.dmark: db "ED1"  
48fc f1			.pastdmark: pop af  
48fd			endm  
# End of macro DMARK
48fd						CALLMONITOR 
48fd cd 6f ee			call debug_vector  
4900				endm  
# End of macro CALLMONITOR
4900					endif 
4900 cd fe 1b				call forth_push_str 
4903					NEXTW 
4903 c3 81 1f			jp macro_next 
4906				endm 
# End of macro NEXTW
4906			 
4906			.DEDIT: 
4906				CWHEAD .ENDKEY 44 "DEDIT" 5 WORD_FLAG_CODE 
4906 40				db WORD_SYS_CORE+44             
4907 68 49			dw .ENDKEY            
4909 06				db 5 + 1 
490a .. 00			db "DEDIT",0              
4910				endm 
# End of macro CWHEAD
4910			; | DEDIT ( ptr --  ) Takes an address for direct editing in memory. | TO TEST 
4910			 
4910					; TODO does not copy from stack 
4910					if DEBUG_FORTH_WORDS_KEY 
4910						DMARK "DED" 
4910 f5				push af  
4911 3a 25 49			ld a, (.dmark)  
4914 32 65 ee			ld (debug_mark),a  
4917 3a 26 49			ld a, (.dmark+1)  
491a 32 66 ee			ld (debug_mark+1),a  
491d 3a 27 49			ld a, (.dmark+2)  
4920 32 67 ee			ld (debug_mark+2),a  
4923 18 03			jr .pastdmark  
4925 ..			.dmark: db "DED"  
4928 f1			.pastdmark: pop af  
4929			endm  
# End of macro DMARK
4929						CALLMONITOR 
4929 cd 6f ee			call debug_vector  
492c				endm  
# End of macro CALLMONITOR
492c					endif 
492c			 
492c					;FORTH_DSP 
492c					FORTH_DSP_VALUEHL 
492c cd 95 1d			call macro_dsp_valuehl 
492f				endm 
# End of macro FORTH_DSP_VALUEHL
492f			;		inc hl    ; TODO do type check 
492f			 
492f			;		call get_word_hl 
492f e5					push hl 
4930 e5					push hl 
4931					FORTH_DSP_POP 
4931 cd 4d 1e			call macro_forth_dsp_pop 
4934				endm 
# End of macro FORTH_DSP_POP
4934 e1					pop hl 
4935					if DEBUG_FORTH_WORDS 
4935						DMARK "EDp" 
4935 f5				push af  
4936 3a 4a 49			ld a, (.dmark)  
4939 32 65 ee			ld (debug_mark),a  
493c 3a 4b 49			ld a, (.dmark+1)  
493f 32 66 ee			ld (debug_mark+1),a  
4942 3a 4c 49			ld a, (.dmark+2)  
4945 32 67 ee			ld (debug_mark+2),a  
4948 18 03			jr .pastdmark  
494a ..			.dmark: db "EDp"  
494d f1			.pastdmark: pop af  
494e			endm  
# End of macro DMARK
494e						CALLMONITOR 
494e cd 6f ee			call debug_vector  
4951				endm  
# End of macro CALLMONITOR
4951					endif 
4951				;	ld a, 0 
4951 cd 5b 11				call strlenz 
4954 23					inc hl 
4955			 
4955 06 00				ld b, 0 
4957 4d					ld c, l 
4958			 
4958 e1					pop hl 
4959			 
4959					;ld a, 0 
4959					;ld (hl),a 
4959 3a 58 ea				ld a,(f_cursor_ptr) 
495c 16 64				ld d, 100 
495e 0e 00				ld c, 0 
4960 1e 28				ld e, 40 
4962 cd 22 0e				call input_str 
4965					; TODO perhaps do a type check and wrap in quotes if not a number 
4965					NEXTW 
4965 c3 81 1f			jp macro_next 
4968				endm 
# End of macro NEXTW
4968			 
4968			 
4968			.ENDKEY: 
4968			; eof 
4968			 
# End of file forth_words_key.asm
4968			include "forth_words_const.asm" 
4968			 
4968			; | ## Constants (i.e. Useful memory addresses that can set or get features) 
4968			 
4968			 
4968			.SPITIME: 
4968				CWHEAD .VA 99 "SPITIME" 7 WORD_FLAG_CODE 
4968 77				db WORD_SYS_CORE+99             
4969 7d 49			dw .VA            
496b 08				db 7 + 1 
496c .. 00			db "SPITIME",0              
4974				endm 
# End of macro CWHEAD
4974			; | SPITIME ( -- u1 )   Pushes address of the SPI pulse counter/delay to stack | DONE 
4974			; 
4974			; | | If using BANK devices then leave as is. 
4974			; | | Only really useful for the CARTDEV where other devices may be far too slow. In particular 
4974			; | | the multiplexing of the PicoSPINet addon which might not be running fast enough for all of the nodes 
4974			 
4974 21 5e ea				ld hl, spi_clktime  
4977 cd 90 1b				call forth_push_numhl 
497a			 
497a					NEXTW 
497a c3 81 1f			jp macro_next 
497d				endm 
# End of macro NEXTW
497d			 
497d			 
497d			.VA: 
497d				CWHEAD .SYMBOL 99 "VA" 2 WORD_FLAG_CODE 
497d 77				db WORD_SYS_CORE+99             
497e 8d 49			dw .SYMBOL            
4980 03				db 2 + 1 
4981 .. 00			db "VA",0              
4984				endm 
# End of macro CWHEAD
4984			; | VA ( -- u1 )   Pushes address of block of memory used for v1..5 | DONE 
4984 21 22 ea				ld hl, cli_var_array 
4987 cd 90 1b				call forth_push_numhl 
498a			 
498a					NEXTW 
498a c3 81 1f			jp macro_next 
498d				endm 
# End of macro NEXTW
498d			 
498d			.SYMBOL: 
498d				CWHEAD .ENDCONST 99 "SYMBOL" 6 WORD_FLAG_CODE 
498d 77				db WORD_SYS_CORE+99             
498e 97 4a			dw .ENDCONST            
4990 07				db 6 + 1 
4991 .. 00			db "SYMBOL",0              
4998				endm 
# End of macro CWHEAD
4998			; | SYMBOL ( u1 -- )  Get the address of a system symbol from a look up table to TOS  | DONE 
4998			; | 
4998			; | | The value is the number reference and the final address is pushed to stack 
4998			 
4998			; | | ``` 
4998			; | | dw sym_table 
4998			; | | dw nmi_vector 
4998			; | | dw cli_autodisplay 
4998			; | | dw cli_data_sp 
4998			; | | dw cli_data_stack 
4998			; | | dw cli_loop_sp 
4998			; | | dw cli_loop_stack 
4998			; | | dw cli_var_array 
4998			; | | dw cursor_col 
4998			; | | dw cursor_ptr 
4998			; | | ; 10 
4998			; | | dw cursor_row 
4998			; | | dw debug_mark 
4998			; | | dw display_fb0 
4998			; | | dw display_fb1 
4998			; | | dw display_fb2 
4998			; | | dw display_fb3 
4998			; | | dw display_fb_active 
4998			; | | dw execscratch 
4998			; | | dw f_cursor_ptr 
4998			; | | dw hardware_word 
4998			; | | ;20 
4998			; | | dw input_at_cursor 
4998			; | | dw input_at_pos 
4998			; | | dw input_cur_flash 
4998			; | | dw input_cur_onoff 
4998			; | | dw input_cursor 
4998			; | | dw input_display_size 
4998			; | | dw input_len 
4998			; | | dw input_ptr 
4998			; | | dw input_size 
4998			; | | dw input_start 
4998			; | | ; 30 
4998			; | | dw input_str 
4998			; | | dw input_under_cursor 
4998			; | | dw os_cli_cmd 
4998			; | | dw os_cur_ptr 
4998			; | | dw os_current_i 
4998			; | | dw os_input 
4998			; | | dw os_last_cmd 
4998			; | | dw os_last_new_uword 
4998			; | | dw debug_vector 
4998			; | | dw os_view_hl 
4998			; | | ;40 
4998			; | | dw os_word_scratch 
4998			; | | dw portbctl 
4998			; | | dw portbdata 
4998			; | | dw spi_cartdev 
4998			; | | dw spi_cartdev2 
4998			; | | dw spi_clktime 
4998			; | | dw spi_device 
4998			; | | dw spi_device_id 
4998			; | | dw spi_portbyte 
4998			; | | dw stackstore 
4998			; | | ; 50 
4998			; | | if STORAGE_SE 
4998			; | | dw storage_actl 
4998			; | | dw storage_adata 
4998			; | | else 
4998			; | | dw 0 
4998			; | | dw 0 
4998			; | | endif 
4998			; | | dw storage_append 
4998			; | | if STORAGE_SE 
4998			; | | dw storage_bctl 
4998			; | | else 
4998			; | | dw 0 
4998			; | | endif 
4998			; | | dw store_bank_active 
4998			; | | dw store_filecache 
4998			; | | dw store_longread 
4998			; | | dw store_openaddr 
4998			; | | dw store_openext 
4998			; | | dw store_openmaxext 
4998			; | | ; 60 
4998			; | | dw store_page 
4998			; | | dw store_readbuf 
4998			; | | dw store_readcont 
4998			; | | dw store_readptr 
4998			; | | dw store_tmpext 
4998			; | | dw store_tmpid 
4998			; | | dw store_tmppageid 
4998			; | | dw malloc 
4998			; | | dw free 
4998			; | | dw cin 
4998			; | | ; 70 
4998			; | | dw cin_wait 
4998			; | | dw forth_push_numhl 
4998			; | | dw forth_push_str 
4998			; | | ``` 
4998			 
4998					if DEBUG_FORTH_WORDS_KEY 
4998						DMARK "SYM" 
4998 f5				push af  
4999 3a ad 49			ld a, (.dmark)  
499c 32 65 ee			ld (debug_mark),a  
499f 3a ae 49			ld a, (.dmark+1)  
49a2 32 66 ee			ld (debug_mark+1),a  
49a5 3a af 49			ld a, (.dmark+2)  
49a8 32 67 ee			ld (debug_mark+2),a  
49ab 18 03			jr .pastdmark  
49ad ..			.dmark: db "SYM"  
49b0 f1			.pastdmark: pop af  
49b1			endm  
# End of macro DMARK
49b1						CALLMONITOR 
49b1 cd 6f ee			call debug_vector  
49b4				endm  
# End of macro CALLMONITOR
49b4					endif 
49b4			 
49b4					FORTH_DSP_VALUEHL 
49b4 cd 95 1d			call macro_dsp_valuehl 
49b7				endm 
# End of macro FORTH_DSP_VALUEHL
49b7			 
49b7 7d					ld a, l     
49b8			 
49b8			 
49b8					if DEBUG_FORTH_WORDS 
49b8						DMARK "SY1" 
49b8 f5				push af  
49b9 3a cd 49			ld a, (.dmark)  
49bc 32 65 ee			ld (debug_mark),a  
49bf 3a ce 49			ld a, (.dmark+1)  
49c2 32 66 ee			ld (debug_mark+1),a  
49c5 3a cf 49			ld a, (.dmark+2)  
49c8 32 67 ee			ld (debug_mark+2),a  
49cb 18 03			jr .pastdmark  
49cd ..			.dmark: db "SY1"  
49d0 f1			.pastdmark: pop af  
49d1			endm  
# End of macro DMARK
49d1						CALLMONITOR 
49d1 cd 6f ee			call debug_vector  
49d4				endm  
# End of macro CALLMONITOR
49d4					endif 
49d4					 
49d4 f5					push af	 
49d5					FORTH_DSP_POP 
49d5 cd 4d 1e			call macro_forth_dsp_pop 
49d8				endm 
# End of macro FORTH_DSP_POP
49d8 f1					pop af 
49d9			 
49d9 cb 27				sla a  
49db				 
49db					 
49db					if DEBUG_FORTH_WORDS 
49db						DMARK "SY" 
49db f5				push af  
49dc 3a f0 49			ld a, (.dmark)  
49df 32 65 ee			ld (debug_mark),a  
49e2 3a f1 49			ld a, (.dmark+1)  
49e5 32 66 ee			ld (debug_mark+1),a  
49e8 3a f2 49			ld a, (.dmark+2)  
49eb 32 67 ee			ld (debug_mark+2),a  
49ee 18 02			jr .pastdmark  
49f0 ..			.dmark: db "SY"  
49f2 f1			.pastdmark: pop af  
49f3			endm  
# End of macro DMARK
49f3						CALLMONITOR 
49f3 cd 6f ee			call debug_vector  
49f6				endm  
# End of macro CALLMONITOR
49f6					endif 
49f6			 
49f6 21 05 4a				ld hl, sym_table 
49f9 cd f5 0d				call addatohl 
49fc cd 03 1f				call loadwordinhl 
49ff cd 90 1b				call forth_push_numhl 
4a02			 
4a02			 
4a02				       NEXTW 
4a02 c3 81 1f			jp macro_next 
4a05				endm 
# End of macro NEXTW
4a05			 
4a05			sym_table: 
4a05			 
4a05			; 0 
4a05 05 4a		dw sym_table 
4a07 72 ee		dw nmi_vector 
4a09 36 ea		dw cli_autodisplay 
4a0b e8 e9		dw cli_data_sp 
4a0d 22 e8		dw cli_data_stack 
4a0f ea e9		dw cli_loop_sp 
4a11 24 e9		dw cli_loop_stack 
4a13 22 ea		dw cli_var_array 
4a15 bf eb		dw cursor_col 
4a17 bd eb		dw cursor_ptr 
4a19			; 10 
4a19 be eb		dw cursor_row 
4a1b 65 ee		dw debug_mark 
4a1d ab ed		dw display_fb0 
4a1f 0a ed		dw display_fb1 
4a21 c8 eb		dw display_fb2 
4a23 69 ec		dw display_fb3 
4a25 c6 eb		dw display_fb_active 
4a27 ba e3		dw execscratch 
4a29 58 ea		dw f_cursor_ptr 
4a2b 75 ee		dw hardware_word 
4a2d			;20 
4a2d 5c ee		dw input_at_cursor 
4a2f 5e ee		dw input_at_pos 
4a31 5a ee		dw input_cur_flash 
4a33 59 ee		dw input_cur_onoff 
4a35 4f ee		dw input_cursor 
4a37 5f ee		dw input_display_size 
4a39 54 ee		dw input_len 
4a3b 63 ee		dw input_ptr 
4a3d 60 ee		dw input_size 
4a3f 61 ee		dw input_start 
4a41			; 30 
4a41 22 0e		dw input_str 
4a43 5d ee		dw input_under_cursor 
4a45 e2 e5		dw os_cli_cmd 
4a47 de e5		dw os_cur_ptr 
4a49 e0 e5		dw os_current_i 
4a4b b9 e4		dw os_input 
4a4d e1 e6		dw os_last_cmd 
4a4f b8 e5		dw os_last_new_uword 
4a51 6f ee		dw debug_vector 
4a53 9d e2		dw os_view_hl 
4a55			;40 
4a55 c0 e5		dw os_word_scratch 
4a57 c3 00		dw portbctl 
4a59 c1 00		dw portbdata 
4a5b 5d ea		dw spi_cartdev 
4a5d 5c ea		dw spi_cartdev2 
4a5f 5e ea		dw spi_clktime 
4a61 5a ea		dw spi_device 
4a63 59 ea		dw spi_device_id 
4a65 5b ea		dw spi_portbyte 
4a67 a1 eb		dw stackstore 
4a69			; 50 
4a69			if STORAGE_SE 
4a69			dw storage_actl 
4a69			dw storage_adata 
4a69			else 
4a69 00 00		dw 0 
4a6b 00 00		dw 0 
4a6d			endif 
4a6d 77 09		dw storage_append 
4a6f			if STORAGE_SE 
4a6f			dw storage_bctl 
4a6f			else 
4a6f 00 00		dw 0 
4a71			endif 
4a71 8d eb		dw store_bank_active 
4a73 61 ea		dw store_filecache 
4a75 6f ea		dw store_longread 
4a77 65 ea		dw store_openaddr 
4a79 64 ea		dw store_openext 
4a7b 63 ea		dw store_openmaxext 
4a7d			; 60 
4a7d 74 ea		dw store_page 
4a7f 70 ea		dw store_readbuf 
4a81 67 ea		dw store_readcont 
4a83 72 ea		dw store_readptr 
4a85 67 ea		dw store_tmpext 
4a87 68 ea		dw store_tmpid 
4a89 5f ea		dw store_tmppageid 
4a8b d0 11		dw malloc 
4a8d 9a 12		dw free 
4a8f c9 5e		dw cin 
4a91			; 70 
4a91 c1 5e		dw cin_wait 
4a93 90 1b		dw forth_push_numhl 
4a95 fe 1b		dw forth_push_str 
4a97			 
4a97			 
4a97			.ENDCONST: 
4a97			 
4a97			; eof 
4a97			 
4a97			 
# End of file forth_words_const.asm
4a97			 
4a97			if STORAGE_SE 
4a97			   	include "forth_words_storage.asm" 
4a97			endif 
4a97				include "forth_words_device.asm" 
4a97			; Device related words 
4a97			 
4a97			; | ## Device Words 
4a97			 
4a97			;if SOUND_ENABLE 
4a97			;.NOTE: 
4a97			;	CWHEAD .AFTERSOUND 31 "NOTE" 4 WORD_FLAG_CODE 
4a97			;; NOTE ( ud uf --  )  Plays a note of frequency uf for the duration of ud millseconds  TODO 
4a97			;		if DEBUG_FORTH_WORDS_KEY 
4a97			;			DMARK "NTE" 
4a97			;			CALLMONITOR 
4a97			;		endif 
4a97			; 
4a97			;	 
4a97			; 
4a97			;		NEXTW 
4a97			;.AFTERSOUND: 
4a97			;endif 
4a97			 
4a97			 
4a97			USE_GPIO: equ 0 
4a97			 
4a97			if USE_GPIO 
4a97			.GP1: 
4a97				CWHEAD .GP2 31 "IOIN" 4 WORD_FLAG_CODE 
4a97			;  IOIN ( u1 -- u )    Perform a GPIO read of pin u1 and push result   
4a97					NEXTW 
4a97			.GP2: 
4a97				CWHEAD .GP3 31 "IOOUT" 5 WORD_FLAG_CODE 
4a97			;  IOOUT ( u1 u2 --  )    Perform a GPIO write of pin u1 with pin set to 0 or 1 in u2   
4a97			 
4a97					NEXTW 
4a97			 
4a97			.GP3: 
4a97				CWHEAD .GP4 31 "IOBYTE" 5 WORD_FLAG_CODE 
4a97			;  IOBYTE ( u1 --  )    Perform a GPIO write of byte u1   
4a97			 
4a97					NEXTW 
4a97			 
4a97			.GP4: 
4a97				CWHEAD .SIN 31 "IOSET" 5 WORD_FLAG_CODE 
4a97			;  IOSET ( u1 --  )    Setup GPIO pins for I/O direction. Bit is set for write else read pin   
4a97			 
4a97					NEXTW 
4a97			.SIN: 
4a97			 
4a97			 
4a97			endif 
4a97			 
4a97			 
4a97				CWHEAD .SOUT 31 "IN" 2 WORD_FLAG_CODE 
4a97 33				db WORD_SYS_CORE+31             
4a98 cc 4a			dw .SOUT            
4a9a 03				db 2 + 1 
4a9b .. 00			db "IN",0              
4a9e				endm 
# End of macro CWHEAD
4a9e			; | IN ( u1 -- u )    Perform Z80 IN with u1 being the port number. Push result to TOS | TO TEST 
4a9e					if DEBUG_FORTH_WORDS_KEY 
4a9e						DMARK "IN." 
4a9e f5				push af  
4a9f 3a b3 4a			ld a, (.dmark)  
4aa2 32 65 ee			ld (debug_mark),a  
4aa5 3a b4 4a			ld a, (.dmark+1)  
4aa8 32 66 ee			ld (debug_mark+1),a  
4aab 3a b5 4a			ld a, (.dmark+2)  
4aae 32 67 ee			ld (debug_mark+2),a  
4ab1 18 03			jr .pastdmark  
4ab3 ..			.dmark: db "IN."  
4ab6 f1			.pastdmark: pop af  
4ab7			endm  
# End of macro DMARK
4ab7						CALLMONITOR 
4ab7 cd 6f ee			call debug_vector  
4aba				endm  
# End of macro CALLMONITOR
4aba					endif 
4aba					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4aba cd 95 1d			call macro_dsp_valuehl 
4abd				endm 
# End of macro FORTH_DSP_VALUEHL
4abd			 
4abd e5					push hl 
4abe			 
4abe					; destroy value TOS 
4abe			 
4abe					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4abe cd 4d 1e			call macro_forth_dsp_pop 
4ac1				endm 
# End of macro FORTH_DSP_POP
4ac1			 
4ac1					; one value on hl get other one back 
4ac1			 
4ac1 c1					pop bc 
4ac2			 
4ac2					; do the sub 
4ac2			;		ex de, hl 
4ac2			 
4ac2 ed 68				in l,(c) 
4ac4			 
4ac4					; save it 
4ac4			 
4ac4 26 00				ld h,0 
4ac6			 
4ac6					; TODO push value back onto stack for another op etc 
4ac6			 
4ac6 cd 90 1b				call forth_push_numhl 
4ac9					NEXTW 
4ac9 c3 81 1f			jp macro_next 
4acc				endm 
# End of macro NEXTW
4acc			.SOUT: 
4acc				CWHEAD .SPIO 32 "OUT" 3 WORD_FLAG_CODE 
4acc 34				db WORD_SYS_CORE+32             
4acd 1f 4b			dw .SPIO            
4acf 04				db 3 + 1 
4ad0 .. 00			db "OUT",0              
4ad4				endm 
# End of macro CWHEAD
4ad4			; | OUT ( u1 u2 -- ) Perform Z80 OUT to port u2 sending byte u1 | DONE 
4ad4					if DEBUG_FORTH_WORDS_KEY 
4ad4						DMARK "OUT" 
4ad4 f5				push af  
4ad5 3a e9 4a			ld a, (.dmark)  
4ad8 32 65 ee			ld (debug_mark),a  
4adb 3a ea 4a			ld a, (.dmark+1)  
4ade 32 66 ee			ld (debug_mark+1),a  
4ae1 3a eb 4a			ld a, (.dmark+2)  
4ae4 32 67 ee			ld (debug_mark+2),a  
4ae7 18 03			jr .pastdmark  
4ae9 ..			.dmark: db "OUT"  
4aec f1			.pastdmark: pop af  
4aed			endm  
# End of macro DMARK
4aed						CALLMONITOR 
4aed cd 6f ee			call debug_vector  
4af0				endm  
# End of macro CALLMONITOR
4af0					endif 
4af0			 
4af0					; get port 
4af0			 
4af0					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4af0 cd 95 1d			call macro_dsp_valuehl 
4af3				endm 
# End of macro FORTH_DSP_VALUEHL
4af3			 
4af3 e5					push hl 
4af4			 
4af4					; destroy value TOS 
4af4			 
4af4					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4af4 cd 4d 1e			call macro_forth_dsp_pop 
4af7				endm 
# End of macro FORTH_DSP_POP
4af7			 
4af7					; get byte to send 
4af7			 
4af7					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4af7 cd 95 1d			call macro_dsp_valuehl 
4afa				endm 
# End of macro FORTH_DSP_VALUEHL
4afa			 
4afa			;		push hl 
4afa			 
4afa					; destroy value TOS 
4afa			 
4afa					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4afa cd 4d 1e			call macro_forth_dsp_pop 
4afd				endm 
# End of macro FORTH_DSP_POP
4afd			 
4afd					; one value on hl get other one back 
4afd			 
4afd			;		pop hl 
4afd			 
4afd c1					pop bc 
4afe			 
4afe					if DEBUG_FORTH_WORDS 
4afe						DMARK "OUT" 
4afe f5				push af  
4aff 3a 13 4b			ld a, (.dmark)  
4b02 32 65 ee			ld (debug_mark),a  
4b05 3a 14 4b			ld a, (.dmark+1)  
4b08 32 66 ee			ld (debug_mark+1),a  
4b0b 3a 15 4b			ld a, (.dmark+2)  
4b0e 32 67 ee			ld (debug_mark+2),a  
4b11 18 03			jr .pastdmark  
4b13 ..			.dmark: db "OUT"  
4b16 f1			.pastdmark: pop af  
4b17			endm  
# End of macro DMARK
4b17						CALLMONITOR 
4b17 cd 6f ee			call debug_vector  
4b1a				endm  
# End of macro CALLMONITOR
4b1a					endif 
4b1a			 
4b1a ed 69				out (c), l 
4b1c			 
4b1c					NEXTW 
4b1c c3 81 1f			jp macro_next 
4b1f				endm 
# End of macro NEXTW
4b1f			 
4b1f			 
4b1f			.SPIO: 
4b1f			 
4b1f			if STORAGE_SE 
4b1f				CWHEAD .SPICEH 61 "SPICEL" 6 WORD_FLAG_CODE 
4b1f			; | SPICEL ( -- ) Set SPI CE low for the currently selected device |  DONE 
4b1f			 
4b1f					call spi_ce_low 
4b1f			    NEXTW 
4b1f			 
4b1f			.SPICEH: 
4b1f				CWHEAD .SPIOb 61 "SPICEH" 6 WORD_FLAG_CODE 
4b1f			; | SPICEH ( -- ) Set SPI CE high for the currently selected device |  DONE 
4b1f			 
4b1f					call spi_ce_high 
4b1f			    NEXTW 
4b1f			 
4b1f			 
4b1f			.SPIOb: 
4b1f			 
4b1f				CWHEAD .SPII 61 "SPIO" 4 WORD_FLAG_CODE 
4b1f			; | SPIO ( u1 -- ) Send byte u1 to SPI  |  DONE 
4b1f			 
4b1f					if DEBUG_FORTH_WORDS_KEY 
4b1f						DMARK "SPo" 
4b1f						CALLMONITOR 
4b1f					endif 
4b1f					; get port 
4b1f			 
4b1f			 
4b1f					; get byte to send 
4b1f			 
4b1f					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4b1f			 
4b1f			;		push hl    ; u1  
4b1f			 
4b1f					; destroy value TOS 
4b1f			 
4b1f					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4b1f			 
4b1f					; one value on hl get other one back 
4b1f			 
4b1f			;		pop hl   ; u2 - addr 
4b1f			 
4b1f					; TODO Send SPI byte 
4b1f			 
4b1f			;		push hl 
4b1f			;		call spi_ce_low 
4b1f			;		pop hl 
4b1f					ld a, l 
4b1f					call spi_send_byte 
4b1f			;		call spi_ce_high 
4b1f			 
4b1f					NEXTW 
4b1f			 
4b1f			.SPII: 
4b1f				CWHEAD .SESEL 62 "SPII" 5 WORD_FLAG_CODE 
4b1f			; | SPII ( -- u1 ) Get a byte from SPI  | DONE 
4b1f					if DEBUG_FORTH_WORDS_KEY 
4b1f						DMARK "SPi" 
4b1f						CALLMONITOR 
4b1f					endif 
4b1f			 
4b1f					; TODO Get SPI byte 
4b1f			 
4b1f					call spi_read_byte 
4b1f			 
4b1f					if DEBUG_FORTH_WORDS 
4b1f						DMARK "Si2" 
4b1f						CALLMONITOR 
4b1f					endif 
4b1f					ld h, 0 
4b1f					ld l, a 
4b1f					if DEBUG_FORTH_WORDS 
4b1f						DMARK "Si3" 
4b1f						CALLMONITOR 
4b1f					endif 
4b1f					call forth_push_numhl 
4b1f			 
4b1f					NEXTW 
4b1f			 
4b1f			 
4b1f			 
4b1f			.SESEL: 
4b1f				CWHEAD .CARTDEV 82 "BANK" 4 WORD_FLAG_CODE 
4b1f			; | BANK ( u1 -- ) Select Serial EEPROM Bank Device at bank address u1 1-5 (disables CARTDEV). Set to zero to disable storage. | DONE 
4b1f					if DEBUG_FORTH_WORDS_KEY 
4b1f						DMARK "BNK" 
4b1f						CALLMONITOR 
4b1f					endif 
4b1f			 
4b1f					ld a, 255 
4b1f					ld (spi_cartdev), a 
4b1f			 
4b1f					; get bank 
4b1f			 
4b1f					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4b1f			 
4b1f			;		push hl 
4b1f			 
4b1f					; destroy value TOS 
4b1f			 
4b1f					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4b1f			 
4b1f					; one value on hl get other one back 
4b1f			 
4b1f			;		pop hl 
4b1f			 
4b1f			 
4b1f					ld c, SPI_CE_HIGH 
4b1f					ld b, '0'    ; human readable bank number 
4b1f			 
4b1f					ld a, l 
4b1f			 
4b1f					if DEBUG_FORTH_WORDS 
4b1f						DMARK "BNK" 
4b1f						CALLMONITOR 
4b1f					endif 
4b1f			 
4b1f					; active low 
4b1f			 
4b1f					cp 0 
4b1f					jr z, .bset 
4b1f					cp 1 
4b1f					jr nz, .b2 
4b1f					res 0, c 
4b1f					ld b, '1'    ; human readable bank number 
4b1f			.b2:		cp 2 
4b1f					jr nz, .b3 
4b1f					res 1, c 
4b1f					ld b, '2'    ; human readable bank number 
4b1f			.b3:		cp 3 
4b1f					jr nz, .b4 
4b1f					res 2, c 
4b1f					ld b, '3'    ; human readable bank number 
4b1f			.b4:		cp 4 
4b1f					jr nz, .b5 
4b1f					res 3, c 
4b1f					ld b, '4'    ; human readable bank number 
4b1f			.b5:		cp 5 
4b1f					jr nz, .bset 
4b1f					res 4, c 
4b1f					ld b, '5'    ; human readable bank number 
4b1f			 
4b1f			.bset: 
4b1f					ld a, c 
4b1f					ld (spi_device),a 
4b1f					ld a, b 
4b1f					ld (spi_device_id),a 
4b1f					if DEBUG_FORTH_WORDS 
4b1f						DMARK "BN2" 
4b1f						CALLMONITOR 
4b1f					endif 
4b1f			 
4b1f					; set default SPI clk pulse time as disabled for BANK use 
4b1f			 
4b1f					ld a, 0 
4b1f					ld (spi_clktime), a 
4b1f			 
4b1f					NEXTW 
4b1f			 
4b1f			.CARTDEV: 
4b1f				CWHEAD .ENDDEVICE 82 "CARTDEV" 7 WORD_FLAG_CODE 
4b1f			; | CARTDEV ( u1 -- ) Select cart device 1-8 (Disables BANK). Set to zero to disable devices. |  DONE 
4b1f					if DEBUG_FORTH_WORDS_KEY 
4b1f						DMARK "CDV" 
4b1f						CALLMONITOR 
4b1f					endif 
4b1f			 
4b1f					; disable se storage bank selection 
4b1f			 
4b1f					ld a, SPI_CE_HIGH		; ce high 
4b1f					ld (spi_device), a 
4b1f			 
4b1f					; get bank 
4b1f			 
4b1f					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4b1f			 
4b1f			;		push hl 
4b1f			 
4b1f					; destroy value TOS 
4b1f			 
4b1f					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4b1f			 
4b1f					; one value on hl get other one back 
4b1f			 
4b1f			;		pop hl 
4b1f			 
4b1f					; active low 
4b1f			 
4b1f					ld c, 255 
4b1f			 
4b1f					ld a, l 
4b1f					if DEBUG_FORTH_WORDS 
4b1f						DMARK "CDV" 
4b1f						CALLMONITOR 
4b1f					endif 
4b1f					cp 0 
4b1f					jr z, .cset 
4b1f					cp 1 
4b1f					jr nz, .c2 
4b1f					res 0, c 
4b1f			.c2:		cp 2 
4b1f					jr nz, .c3 
4b1f					res 1, c 
4b1f			.c3:		cp 3 
4b1f					jr nz, .c4 
4b1f					res 2, c 
4b1f			.c4:		cp 4 
4b1f					jr nz, .c5 
4b1f					res 3, c 
4b1f			.c5:		cp 5 
4b1f					jr nz, .c6 
4b1f					res 4, c 
4b1f			.c6:		cp 6 
4b1f					jr nz, .c7 
4b1f					res 5, c 
4b1f			.c7:		cp 7 
4b1f					jr nz, .c8 
4b1f					res 6, c 
4b1f			.c8:		cp 8 
4b1f					jr nz, .cset 
4b1f					res 7, c 
4b1f			.cset:		ld a, c 
4b1f					ld (spi_cartdev),a 
4b1f			 
4b1f					if DEBUG_FORTH_WORDS 
4b1f						DMARK "CD2" 
4b1f						CALLMONITOR 
4b1f					endif 
4b1f			 
4b1f					; set default SPI clk pulse time as 10ms for CARTDEV use 
4b1f			 
4b1f					ld a, $0a 
4b1f					ld (spi_clktime), a 
4b1f					NEXTW 
4b1f			endif 
4b1f			 
4b1f			.ENDDEVICE: 
4b1f			; eof 
4b1f			 
# End of file forth_words_device.asm
4b1f			 
4b1f			; var handler 
4b1f			 
4b1f			 
4b1f			.VARS: 
4b1f				CWHEAD .V0 99 "VAR" 3 WORD_FLAG_CODE 
4b1f 77				db WORD_SYS_CORE+99             
4b20 d0 4b			dw .V0            
4b22 04				db 3 + 1 
4b23 .. 00			db "VAR",0              
4b27				endm 
# End of macro CWHEAD
4b27			;| VAR ( u1 -- )  Get the address of the variable referenced on TOS  | TO TEST 
4b27			;| 
4b27			;| The variable name should consist of a single letter. e.g. "a" 
4b27			;! If a full string is passed then only the first char is looked at 
4b27			;| Any other char could exceed bounds checks!  
4b27			 
4b27					if DEBUG_FORTH_WORDS_KEY 
4b27						DMARK "VAR" 
4b27 f5				push af  
4b28 3a 3c 4b			ld a, (.dmark)  
4b2b 32 65 ee			ld (debug_mark),a  
4b2e 3a 3d 4b			ld a, (.dmark+1)  
4b31 32 66 ee			ld (debug_mark+1),a  
4b34 3a 3e 4b			ld a, (.dmark+2)  
4b37 32 67 ee			ld (debug_mark+2),a  
4b3a 18 03			jr .pastdmark  
4b3c ..			.dmark: db "VAR"  
4b3f f1			.pastdmark: pop af  
4b40			endm  
# End of macro DMARK
4b40						CALLMONITOR 
4b40 cd 6f ee			call debug_vector  
4b43				endm  
# End of macro CALLMONITOR
4b43					endif 
4b43			 
4b43					FORTH_DSP_VALUEHL 
4b43 cd 95 1d			call macro_dsp_valuehl 
4b46				endm 
# End of macro FORTH_DSP_VALUEHL
4b46			 
4b46 7e					ld a, (hl)    ; get first char on of the string 
4b47			 
4b47			 
4b47					if DEBUG_FORTH_WORDS 
4b47						DMARK "VR1" 
4b47 f5				push af  
4b48 3a 5c 4b			ld a, (.dmark)  
4b4b 32 65 ee			ld (debug_mark),a  
4b4e 3a 5d 4b			ld a, (.dmark+1)  
4b51 32 66 ee			ld (debug_mark+1),a  
4b54 3a 5e 4b			ld a, (.dmark+2)  
4b57 32 67 ee			ld (debug_mark+2),a  
4b5a 18 03			jr .pastdmark  
4b5c ..			.dmark: db "VR1"  
4b5f f1			.pastdmark: pop af  
4b60			endm  
# End of macro DMARK
4b60						CALLMONITOR 
4b60 cd 6f ee			call debug_vector  
4b63				endm  
# End of macro CALLMONITOR
4b63					endif 
4b63					 
4b63 f5					push af	 
4b64					FORTH_DSP_POP 
4b64 cd 4d 1e			call macro_forth_dsp_pop 
4b67				endm 
# End of macro FORTH_DSP_POP
4b67 f1					pop af 
4b68			 
4b68					; convert to upper 
4b68			 
4b68 cd 6a 10				call to_upper 
4b6b					if DEBUG_FORTH_WORDS 
4b6b						DMARK "Vaa" 
4b6b f5				push af  
4b6c 3a 80 4b			ld a, (.dmark)  
4b6f 32 65 ee			ld (debug_mark),a  
4b72 3a 81 4b			ld a, (.dmark+1)  
4b75 32 66 ee			ld (debug_mark+1),a  
4b78 3a 82 4b			ld a, (.dmark+2)  
4b7b 32 67 ee			ld (debug_mark+2),a  
4b7e 18 03			jr .pastdmark  
4b80 ..			.dmark: db "Vaa"  
4b83 f1			.pastdmark: pop af  
4b84			endm  
# End of macro DMARK
4b84						CALLMONITOR 
4b84 cd 6f ee			call debug_vector  
4b87				endm  
# End of macro CALLMONITOR
4b87					endif 
4b87 06 41				ld b, 'A' 
4b89 90					sub b			; set offset 
4b8a					if DEBUG_FORTH_WORDS 
4b8a						DMARK "Vbb" 
4b8a f5				push af  
4b8b 3a 9f 4b			ld a, (.dmark)  
4b8e 32 65 ee			ld (debug_mark),a  
4b91 3a a0 4b			ld a, (.dmark+1)  
4b94 32 66 ee			ld (debug_mark+1),a  
4b97 3a a1 4b			ld a, (.dmark+2)  
4b9a 32 67 ee			ld (debug_mark+2),a  
4b9d 18 03			jr .pastdmark  
4b9f ..			.dmark: db "Vbb"  
4ba2 f1			.pastdmark: pop af  
4ba3			endm  
# End of macro DMARK
4ba3						CALLMONITOR 
4ba3 cd 6f ee			call debug_vector  
4ba6				endm  
# End of macro CALLMONITOR
4ba6					endif 
4ba6 cb 27				sla a  
4ba8				 
4ba8					 
4ba8					if DEBUG_FORTH_WORDS 
4ba8						DMARK "VR2" 
4ba8 f5				push af  
4ba9 3a bd 4b			ld a, (.dmark)  
4bac 32 65 ee			ld (debug_mark),a  
4baf 3a be 4b			ld a, (.dmark+1)  
4bb2 32 66 ee			ld (debug_mark+1),a  
4bb5 3a bf 4b			ld a, (.dmark+2)  
4bb8 32 67 ee			ld (debug_mark+2),a  
4bbb 18 03			jr .pastdmark  
4bbd ..			.dmark: db "VR2"  
4bc0 f1			.pastdmark: pop af  
4bc1			endm  
# End of macro DMARK
4bc1						CALLMONITOR 
4bc1 cd 6f ee			call debug_vector  
4bc4				endm  
# End of macro CALLMONITOR
4bc4					endif 
4bc4			 
4bc4 21 ee e9				ld hl, cli_var_array2 
4bc7 cd f5 0d				call addatohl 
4bca cd 90 1b				call forth_push_numhl 
4bcd			 
4bcd			 
4bcd				       NEXTW 
4bcd c3 81 1f			jp macro_next 
4bd0				endm 
# End of macro NEXTW
4bd0			.V0: 
4bd0				CWHEAD .V0Q 100 "V0!" 3 WORD_FLAG_CODE 
4bd0 78				db WORD_SYS_CORE+100             
4bd1 e8 4b			dw .V0Q            
4bd3 04				db 3 + 1 
4bd4 .. 00			db "V0!",0              
4bd8				endm 
# End of macro CWHEAD
4bd8			;| V0! ( u1 -- )  Store value to v0  | DONE 
4bd8			 
4bd8					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4bd8 cd 95 1d			call macro_dsp_valuehl 
4bdb				endm 
# End of macro FORTH_DSP_VALUEHL
4bdb			 
4bdb 11 22 ea				ld de, cli_var_array 
4bde			 
4bde eb					ex de, hl 
4bdf 73					ld (hl), e 
4be0 23					inc hl 
4be1 72					ld (hl), d 
4be2			 
4be2					; destroy value TOS 
4be2			 
4be2					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4be2 cd 4d 1e			call macro_forth_dsp_pop 
4be5				endm 
# End of macro FORTH_DSP_POP
4be5			 
4be5				       NEXTW 
4be5 c3 81 1f			jp macro_next 
4be8				endm 
# End of macro NEXTW
4be8			.V0Q: 
4be8				CWHEAD .V1S 101 "V0@" 3 WORD_FLAG_CODE 
4be8 79				db WORD_SYS_CORE+101             
4be9 f9 4b			dw .V1S            
4beb 04				db 3 + 1 
4bec .. 00			db "V0@",0              
4bf0				endm 
# End of macro CWHEAD
4bf0			;| V0@ ( --u )  Put value of v0 onto stack | DONE 
4bf0 2a 22 ea				ld hl, (cli_var_array) 
4bf3 cd 90 1b				call forth_push_numhl 
4bf6			 
4bf6				       NEXTW 
4bf6 c3 81 1f			jp macro_next 
4bf9				endm 
# End of macro NEXTW
4bf9			.V1S: 
4bf9				CWHEAD .V1Q 102 "V1!" 3 WORD_FLAG_CODE 
4bf9 7a				db WORD_SYS_CORE+102             
4bfa 11 4c			dw .V1Q            
4bfc 04				db 3 + 1 
4bfd .. 00			db "V1!",0              
4c01				endm 
# End of macro CWHEAD
4c01			;| V1! ( u1 -- )  Store value to v1 | DONE 
4c01					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4c01 cd 95 1d			call macro_dsp_valuehl 
4c04				endm 
# End of macro FORTH_DSP_VALUEHL
4c04			 
4c04 11 24 ea				ld de, cli_var_array+2 
4c07				 
4c07 eb					ex de, hl 
4c08 73					ld (hl), e 
4c09 23					inc hl 
4c0a 72					ld (hl), d 
4c0b			 
4c0b					; destroy value TOS 
4c0b			 
4c0b					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4c0b cd 4d 1e			call macro_forth_dsp_pop 
4c0e				endm 
# End of macro FORTH_DSP_POP
4c0e				       NEXTW 
4c0e c3 81 1f			jp macro_next 
4c11				endm 
# End of macro NEXTW
4c11			.V1Q: 
4c11				CWHEAD .V2S 103 "V1@" 3 WORD_FLAG_CODE 
4c11 7b				db WORD_SYS_CORE+103             
4c12 22 4c			dw .V2S            
4c14 04				db 3 + 1 
4c15 .. 00			db "V1@",0              
4c19				endm 
# End of macro CWHEAD
4c19			;| V1@ ( --u )  Put value of v1 onto stack | DONE 
4c19 2a 24 ea				ld hl, (cli_var_array+2) 
4c1c cd 90 1b				call forth_push_numhl 
4c1f				       NEXTW 
4c1f c3 81 1f			jp macro_next 
4c22				endm 
# End of macro NEXTW
4c22			.V2S: 
4c22				CWHEAD .V2Q 104 "V2!" 3 WORD_FLAG_CODE 
4c22 7c				db WORD_SYS_CORE+104             
4c23 3a 4c			dw .V2Q            
4c25 04				db 3 + 1 
4c26 .. 00			db "V2!",0              
4c2a				endm 
# End of macro CWHEAD
4c2a			;| V2! ( u1 -- )  Store value to v2 | DONE 
4c2a					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4c2a cd 95 1d			call macro_dsp_valuehl 
4c2d				endm 
# End of macro FORTH_DSP_VALUEHL
4c2d			 
4c2d 11 26 ea				ld de, cli_var_array+4 
4c30				 
4c30 eb					ex de, hl 
4c31 73					ld (hl), e 
4c32 23					inc hl 
4c33 72					ld (hl), d 
4c34			 
4c34					; destroy value TOS 
4c34			 
4c34					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4c34 cd 4d 1e			call macro_forth_dsp_pop 
4c37				endm 
# End of macro FORTH_DSP_POP
4c37				       NEXTW 
4c37 c3 81 1f			jp macro_next 
4c3a				endm 
# End of macro NEXTW
4c3a			.V2Q: 
4c3a				CWHEAD .V3S 105 "V2@" 3 WORD_FLAG_CODE 
4c3a 7d				db WORD_SYS_CORE+105             
4c3b 4b 4c			dw .V3S            
4c3d 04				db 3 + 1 
4c3e .. 00			db "V2@",0              
4c42				endm 
# End of macro CWHEAD
4c42			;| V2@ ( --u )  Put value of v2 onto stack | DONE 
4c42 2a 26 ea				ld hl, (cli_var_array+4) 
4c45 cd 90 1b				call forth_push_numhl 
4c48				       NEXTW 
4c48 c3 81 1f			jp macro_next 
4c4b				endm 
# End of macro NEXTW
4c4b			.V3S: 
4c4b				CWHEAD .V3Q 104 "V3!" 3 WORD_FLAG_CODE 
4c4b 7c				db WORD_SYS_CORE+104             
4c4c 63 4c			dw .V3Q            
4c4e 04				db 3 + 1 
4c4f .. 00			db "V3!",0              
4c53				endm 
# End of macro CWHEAD
4c53			;| V3! ( u1 -- )  Store value to v3 | DONE 
4c53					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4c53 cd 95 1d			call macro_dsp_valuehl 
4c56				endm 
# End of macro FORTH_DSP_VALUEHL
4c56			 
4c56 11 28 ea				ld de, cli_var_array+6 
4c59				 
4c59 eb					ex de, hl 
4c5a 73					ld (hl), e 
4c5b 23					inc hl 
4c5c 72					ld (hl), d 
4c5d			 
4c5d					; destroy value TOS 
4c5d			 
4c5d					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4c5d cd 4d 1e			call macro_forth_dsp_pop 
4c60				endm 
# End of macro FORTH_DSP_POP
4c60				       NEXTW 
4c60 c3 81 1f			jp macro_next 
4c63				endm 
# End of macro NEXTW
4c63			.V3Q: 
4c63				CWHEAD .END 105 "V3@" 3 WORD_FLAG_CODE 
4c63 7d				db WORD_SYS_CORE+105             
4c64 74 4c			dw .END            
4c66 04				db 3 + 1 
4c67 .. 00			db "V3@",0              
4c6b				endm 
# End of macro CWHEAD
4c6b			;| V3@ ( --u )  Put value of v3 onto stack | DONE 
4c6b 2a 28 ea				ld hl, (cli_var_array+6) 
4c6e cd 90 1b				call forth_push_numhl 
4c71				       NEXTW 
4c71 c3 81 1f			jp macro_next 
4c74				endm 
# End of macro NEXTW
4c74			 
4c74			 
4c74			 
4c74			 
4c74			 
4c74			; end of dict marker 
4c74			 
4c74 00			.END:    db WORD_SYS_END 
4c75 00 00			dw 0 
4c77 00				db 0 
4c78			 
4c78			; use to jp here for user dict words to save on macro expansion  
4c78			 
4c78			user_dict_next: 
4c78				NEXTW 
4c78 c3 81 1f			jp macro_next 
4c7b				endm 
# End of macro NEXTW
4c7b			 
4c7b			 
4c7b			user_exec: 
4c7b				;    ld hl, <word code> 
4c7b				;    FORTH_RSP_NEXT - call macro_forth_rsp_next 
4c7b				;    call forthexec 
4c7b				;    jp user_dict_next   (NEXT) 
4c7b			        ;    <word code bytes> 
4c7b eb				ex de, hl 
4c7c 2a bc e5			ld hl,(os_tok_ptr) 
4c7f				 
4c7f				FORTH_RSP_NEXT 
4c7f cd 37 1b			call macro_forth_rsp_next 
4c82				endm 
# End of macro FORTH_RSP_NEXT
4c82			 
4c82			if DEBUG_FORTH_UWORD 
4c82						DMARK "UEX" 
4c82 f5				push af  
4c83 3a 97 4c			ld a, (.dmark)  
4c86 32 65 ee			ld (debug_mark),a  
4c89 3a 98 4c			ld a, (.dmark+1)  
4c8c 32 66 ee			ld (debug_mark+1),a  
4c8f 3a 99 4c			ld a, (.dmark+2)  
4c92 32 67 ee			ld (debug_mark+2),a  
4c95 18 03			jr .pastdmark  
4c97 ..			.dmark: db "UEX"  
4c9a f1			.pastdmark: pop af  
4c9b			endm  
# End of macro DMARK
4c9b				CALLMONITOR 
4c9b cd 6f ee			call debug_vector  
4c9e				endm  
# End of macro CALLMONITOR
4c9e			endif 
4c9e			 
4c9e			 
4c9e			 
4c9e eb				ex de, hl 
4c9f 22 bc e5			ld (os_tok_ptr), hl 
4ca2				 
4ca2				; Don't use next - Skips the first word in uword. 
4ca2			 
4ca2 c3 12 20			jp exec1 
4ca5			;	NEXT 
4ca5			 
4ca5			 
4ca5			; eof 
# End of file forth_wordsv4.asm
4ca5			endif 
4ca5			;;;;;;;;;;;;;; Debug code 
4ca5			 
4ca5			 
4ca5			;if DEBUG_FORTH_PARSE 
4ca5 .. 00		.nowordfound: db "No match",0 
4cae .. 00		.compword:	db "Comparing word ",0 
4cbe .. 00		.nextwordat:	db "Next word at",0 
4ccb .. 00		.charmatch:	db "Char match",0 
4cd6			;endif 
4cd6			if DEBUG_FORTH_JP 
4cd6			.foundword:	db "Word match. Exec..",0 
4cd6			endif 
4cd6			;if DEBUG_FORTH_PUSH 
4cd6 .. 00		.enddict:	db "Dict end. Push.",0 
4ce6 .. 00		.push_str:	db "Pushing string",0 
4cf5 .. 00		.push_num:	db "Pushing number",0 
4d04 .. 00		.data_sp:	db "SP:",0 
4d08 .. 00		.wordinhl:	db "Word in HL (2/0):",0 
4d1a .. 00		.wordinde:	db "Word in DE (3/0):",0 
4d2c .. 00		.wordinbc:	db "Word in BC (4/0):",0 
4d3e			;endif 
4d3e			;if DEBUG_FORTH_MALLOC 
4d3e .. 00		.push_malloc:	db "Malloc address",0 
4d4d			;endif 
4d4d			 
4d4d			 
4d4d			 
4d4d			; display malloc address and current data stack pointer  
4d4d			 
4d4d			malloc_error: 
4d4d d5				push de 
4d4e f5				push af 
4d4f e5				push hl 
4d50 cd c8 0b			call clear_display 
4d53 11 73 4d			ld de, .mallocerr 
4d56 3e 00			ld a,0 
4d58			;	ld de,os_word_scratch 
4d58 cd db 0b			call str_at_display 
4d5b 3e 11			ld a, display_row_1+17 
4d5d 11 65 ee			ld de, debug_mark 
4d60 cd db 0b			call str_at_display 
4d63 cd eb 0b			call update_display 
4d66				;call break_point_state 
4d66 cd c1 5e			call cin_wait 
4d69			 
4d69			;	ld a, ' ' 
4d69			;	ld (os_view_disable), a 
4d69 cd ff 14			call bp_on 
4d6c e1				pop hl 
4d6d f1				pop af 
4d6e d1				pop de	 
4d6f				CALLMONITOR 
4d6f cd 6f ee			call debug_vector  
4d72				endm  
# End of macro CALLMONITOR
4d72 c9				ret 
4d73			 
4d73 .. 00		.mallocerr: 	db "Malloc Error",0 
4d80			;if DEBUG_FORTH_PUSH 
4d80			display_data_sp: 
4d80 f5				push af 
4d81			 
4d81				; see if disabled 
4d81			 
4d81			 
4d81 3a 6f ee			ld a, (debug_vector) 
4d84 fe c9			cp $C9  ; RET 
4d86				;ld a, (os_view_disable) 
4d86				;cp '*' 
4d86 28 67			jr z, .skipdsp 
4d88			 
4d88 e5				push hl 
4d89 e5				push hl 
4d8a e5			push hl 
4d8b cd c8 0b			call clear_display 
4d8e e1			pop hl 
4d8f 7c				ld a,h 
4d90 21 c0 e5			ld hl, os_word_scratch 
4d93 cd fe 0f			call hexout 
4d96 e1				pop hl 
4d97 7d				ld a,l 
4d98 21 c2 e5			ld hl, os_word_scratch+2 
4d9b cd fe 0f			call hexout 
4d9e 21 c4 e5			ld hl, os_word_scratch+4 
4da1 3e 00			ld a,0 
4da3 77				ld (hl),a 
4da4 11 c0 e5			ld de,os_word_scratch 
4da7 3e 28				ld a, display_row_2 
4da9 cd db 0b				call str_at_display 
4dac 11 08 4d			ld de, .wordinhl 
4daf 3e 00			ld a, display_row_1 
4db1			 
4db1 cd db 0b				call str_at_display 
4db4 11 65 ee			ld de, debug_mark 
4db7 3e 11			ld a, display_row_1+17 
4db9			 
4db9 cd db 0b				call str_at_display 
4dbc			 
4dbc				; display current data stack pointer 
4dbc 11 04 4d			ld de,.data_sp 
4dbf 3e 30				ld a, display_row_2 + 8 
4dc1 cd db 0b				call str_at_display 
4dc4			 
4dc4 2a e8 e9			ld hl,(cli_data_sp) 
4dc7 e5				push hl 
4dc8 7c				ld a,h 
4dc9 21 c0 e5			ld hl, os_word_scratch 
4dcc cd fe 0f			call hexout 
4dcf e1				pop hl 
4dd0 7d				ld a,l 
4dd1 21 c2 e5			ld hl, os_word_scratch+2 
4dd4 cd fe 0f			call hexout 
4dd7 21 c4 e5			ld hl, os_word_scratch+4 
4dda 3e 00			ld a,0 
4ddc 77				ld (hl),a 
4ddd 11 c0 e5			ld de,os_word_scratch 
4de0 3e 33				ld a, display_row_2 + 11 
4de2 cd db 0b				call str_at_display 
4de5			 
4de5			 
4de5 cd eb 0b			call update_display 
4de8 cd 00 0b			call delay1s 
4deb cd 00 0b			call delay1s 
4dee e1				pop hl 
4def			.skipdsp: 
4def f1				pop af 
4df0 c9				ret 
4df1			 
4df1			display_data_malloc: 
4df1			 
4df1 f5				push af 
4df2 e5				push hl 
4df3 e5				push hl 
4df4 e5			push hl 
4df5 cd c8 0b			call clear_display 
4df8 e1			pop hl 
4df9 7c				ld a,h 
4dfa 21 c0 e5			ld hl, os_word_scratch 
4dfd cd fe 0f			call hexout 
4e00 e1				pop hl 
4e01 7d				ld a,l 
4e02 21 c2 e5			ld hl, os_word_scratch+2 
4e05 cd fe 0f			call hexout 
4e08 21 c4 e5			ld hl, os_word_scratch+4 
4e0b 3e 00			ld a,0 
4e0d 77				ld (hl),a 
4e0e 11 c0 e5			ld de,os_word_scratch 
4e11 3e 28				ld a, display_row_2 
4e13 cd db 0b				call str_at_display 
4e16 11 3e 4d			ld de, .push_malloc 
4e19 3e 00			ld a, display_row_1 
4e1b			 
4e1b cd db 0b				call str_at_display 
4e1e			 
4e1e				; display current data stack pointer 
4e1e 11 04 4d			ld de,.data_sp 
4e21 3e 30				ld a, display_row_2 + 8 
4e23 cd db 0b				call str_at_display 
4e26			 
4e26 2a e8 e9			ld hl,(cli_data_sp) 
4e29 e5				push hl 
4e2a 7c				ld a,h 
4e2b 21 c0 e5			ld hl, os_word_scratch 
4e2e cd fe 0f			call hexout 
4e31 e1				pop hl 
4e32 7d				ld a,l 
4e33 21 c2 e5			ld hl, os_word_scratch+2 
4e36 cd fe 0f			call hexout 
4e39 21 c4 e5			ld hl, os_word_scratch+4 
4e3c 3e 00			ld a,0 
4e3e 77				ld (hl),a 
4e3f 11 c0 e5			ld de,os_word_scratch 
4e42 3e 33				ld a, display_row_2 + 11 
4e44 cd db 0b				call str_at_display 
4e47			 
4e47 cd eb 0b			call update_display 
4e4a cd 00 0b			call delay1s 
4e4d cd 00 0b			call delay1s 
4e50 e1				pop hl 
4e51 f1				pop af 
4e52 c9				ret 
4e53			;endif 
4e53			 
4e53			include "forth_autostart.asm" 
4e53			; list of commands to perform at system start up 
4e53			 
4e53			startcmds: 
4e53			;	dw test11 
4e53			;	dw test12 
4e53			;	dw test13 
4e53			;	dw test14 
4e53			;	dw test15 
4e53			;	dw test16 
4e53			;	dw test17 
4e53			;	dw ifthtest1 
4e53			;	dw ifthtest2 
4e53			;	dw ifthtest3 
4e53			;	dw mmtest1 
4e53			;	dw mmtest2 
4e53			;	dw mmtest3 
4e53			;	dw mmtest4 
4e53			;	dw mmtest5 
4e53			;	dw mmtest6 
4e53			;	dw iftest1 
4e53			;	dw iftest2 
4e53			;	dw iftest3 
4e53			;	dw looptest1 
4e53			;	dw looptest2 
4e53			;	dw test1 
4e53			;	dw test2 
4e53			;	dw test3 
4e53			;	dw test4 
4e53			;	dw game2r 
4e53			;	dw game2b1 
4e53			;	dw game2b2 
4e53			 
4e53				; start up words that are actually useful 
4e53			 
4e53			;    dw spi1 
4e53			;    dw spi2 
4e53			;    dw spi3 
4e53			;    dw spi4 
4e53			;    dw spi5 
4e53			;    dw spi6 
4e53			;    dw spi7 
4e53			; 
4e53			;    dw spi8 
4e53			;    dw spi9 
4e53			;    dw spi10 
4e53			 
4e53			; file editor 
4e53			;	dw edit1 
4e53			;	dw edit2 
4e53			;	dw edit3 
4e53			 
4e53			;	dw longread 
4e53 73 52			dw clrstack 
4e55 a7 52			dw type 
4e57			;	dw stest 
4e57 cc 52			dw strncpy 
4e59			;	dw list 
4e59 2d 53			dw start1 
4e5b 3d 53			dw start2 
4e5d			;	dw start3 
4e5d			;	dw start3b 
4e5d			;	dw start3c 
4e5d			 
4e5d				; (unit) testing words 
4e5d			 
4e5d			;	dw mtesta 
4e5d			;	dw mtestb 
4e5d			;	dw mtestc 
4e5d			;	dw mtestd 
4e5d			;	dw mteste 
4e5d			 
4e5d				; demo/game words 
4e5d			 
4e5d			;        dw game3w 
4e5d			;        dw game3p 
4e5d			;        dw game3sc 
4e5d			;        dw game3vsi 
4e5d			;        dw game3vs 
4e5d				 
4e5d			;	dw game2b 
4e5d			;	dw game2bf 
4e5d			;	dw game2mba 
4e5d			;	dw game2mbas 
4e5d			;	dw game2mb 
4e5d			 
4e5d 5a 56			dw game1 
4e5f 6b 56			dw game1a 
4e61 cd 56			dw game1b 
4e63 02 57			dw game1c 
4e65 38 57			dw game1d 
4e67 69 57			dw game1s 
4e69 7d 57			dw game1t 
4e6b 92 57			dw game1f 
4e6d c6 57			dw game1z 
4e6f 0a 58			dw game1zz 
4e71			 
4e71 93 54			dw test5 
4e73 cb 54			dw test6 
4e75 03 55			dw test7 
4e77 17 55			dw test8 
4e79 43 55			dw test9 
4e7b 59 55			dw test10 
4e7d				 
4e7d e1 58		        dw ssv5 
4e7f c5 58		        dw ssv4 
4e81 a9 58		        dw ssv3 
4e83 73 58		        dw ssv2 
4e85 fa 58		        dw ssv1 
4e87 42 59		        dw ssv1cpm 
4e89			;	dw keyup 
4e89			;	dw keydown 
4e89			;	dw keyleft 
4e89			;	dw keyright 
4e89			;	dw 	keyf1 
4e89			;	dw keyf2 
4e89			;	dw keyf3 
4e89			;	dw keyf4 
4e89			;	dw keyf5 
4e89			;	dw keyf6 
4e89			;	dw keyf7 
4e89			;	dw keyf8 
4e89			;	dw keyf9 
4e89			;	dw keyf10 
4e89			;	dw keyf11 
4e89			;	dw keyf12 
4e89			;	dw keytab 
4e89			;	dw keycr 
4e89			;	dw keyhome 
4e89			;	dw keyend 
4e89			;	dw keybs 
4e89 00 00			db 0, 0	 
4e8b			 
4e8b			 
4e8b			; File Editor 
4e8b			 
4e8b			; ( id - ) use 'e' to edit the displayed line 
4e8b .. 00		edit1: db ": edc waitk $65 = if ede then ; ", 0 
4eac .. 00		edit2: db ": ede storepage ptr $02 + cls dedit filepage bupd ; ", 0 
4ee1			;edit2: db ": ede v1@ v0@ record drop storepage ptr $02 + cls dedit filepage bupd ; ", 0 
4ee1 .. 00		edit3: db ": ed dup v0! open $01 do i v0@ record cls . edc loop ; ",0 
4f19			;edit3: db ": ed dup v0! open $01 do i v0@ record cls . i v1! edc loop ; ",0 
4f19			 
4f19			; SPI Net support words 
4f19			 
4f19			; v0! = node to send to 
4f19			; ( str count - ) 
4f19 .. 00		spi1:       db ": spitype spiceh $00 do dup i + @ v0@ spicel $10 spio spio spio spiceh $01 pause loop ; ",0 
4f72			 
4f72			; spiputc ( char node - ) 
4f72 .. 00		spi2:       db ": spiputc spicel $10 spio spio ptr @ spio spiceh ; ",0 
4fa6			; spiputc ( u node - ) 
4fa6 .. 00		spi2b:       db ": spiputb spicel $10 spio spio spio spiceh ; ",0 
4fd4			 
4fd4			; spigetc ( - n ) 
4fd4 .. 00		spi4:       db ": spigetc spicel $11 spio spii spiceh ; ", 0 
4ffd			 
4ffd			; getnode ( - n ) 
4ffd .. 00		spi5:       db ": getnode spicel $18 spio spii nop spiceh ; ", 0 
502a			 
502a			; ( str node - )  
502a .. 00		spi3:       db ": sendnode v0! count spiceh $00 do dup i + @ v0@ spicel $10 spio spio spio spiceh $01 pause loop ; ; ",0 
5090			; store string ( str i - ) 
5090			 
5090			;spi3:       db ": storestrold spicel $03 spio spio ptr count clkstro spiceh ; ", 0 
5090 .. 00		spi6:       db ": storestr spicel $12 spio spio count $00 do dup i + @ spio $01 pause loop spiceh ; ", 0 
50e5			 
50e5			; get string ( addr i -  )    TO FIX 
50e5			 
50e5 .. 00		spi7:       db ": getstorestr spicel $13 spio spio \" \" repeat spii dup concat $00 = not until spiceh ; ", 0 
513d			 
513d			 
513d			; NETCHAT (TODO) 
513d			; Program to allow two nodes to chat with eachother 
513d			; 
513d			; v0 - target node 
513d			;  
513d			; accept input at 0,0 
513d			; if input is string send spitype to target node 
513d			; starting at row 2,0 , while spigetchr is not zero ->  
513d			; 
513d			; 
513d			; TODO add paging of get request 
513d			 
513d			; ( node - ) 
513d .. 00		spi8:		db ": netchatp $00 $00 at accept ;", 0 
515c .. 00		spi9: 		db ": netchatr repeat spigetchr dup dup $00 = not if emit then $00 = not until $02 pause ; ",0 
51b4 .. 00		spi10:		db ": netchat v0! repeat netchatp count dup $00 > if spitype $01 pause then cls $00 $03 at \">\" . netchatr true until nop ; ", 0 
522c			 
522c			 
522c			; Long read of currently open file 
522c .. 00		longread:   db ": lread read repeat readcont if read concat then readcont until nop ; ", 0 
5273			 
5273			; clear stack  
5273			 
5273 .. 00		clrstack:  db ": clrstk depth ?dup if $01 do drop loop then nop ; ", 0 
52a7			 
52a7			; type ( addr count - ) 
52a7 .. 00		type:     db ": type $00 do dup i + @ emit loop ; ", 0 
52cc			 
52cc			; some direct memory words 
52cc			; strncpy ( len t f -- t ) 
52cc			 
52cc .. 00		strncpy:   db ": strncpy $00 scratch 2! $02 scratch 2! do $00 scratch 2@ i + @ $02 scratch 2@ i + ! loop nop  ;",0 
532d			 
532d .. 00		start1:     	db ": bpon $00 bp ;",0 
533d .. 00		start2:     	db ": bpoff $01 bp ;",0 
534e .. 00		start3b:         db ": ls dir cls drop dup $00 > if $01 do $08 $04 at . $01 $04 at . $04 $04 at . $23 $04 at accept drop scroll loop then nop ;",0 
53c9 .. 00		start3c:         db ": dirlist dir cls drop dup $00 > if $01 do \"/\" .> .> \"Ext:\" .> .> \"Id: \" .> .>  loop then nop ;",0 
5429			 
5429			 
5429			; a handy word to list items on the stack 
5429			 
5429 .. 00		list:            db ": more cls repeat scroll $01 $04 at depth . $0a $04 at .> $01 $01 at accept drop depth 0= not until nop ;",0 
5493			 
5493			 
5493			; test stack  
5493			; rnd8 stest 
5493			 
5493			;stest:   db ": stest cls  v0! v0@ $00 do rnd8 $01 $01 at i . $01 pause loop v0@ $00 do drop $12 $01 at depth . $01 pause loop nop ;",0  
5493			 
5493			; random malloc and free cycles 
5493			 
5493			;mtesta:      db ": mtesta $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . rnd8 dup $13 $01 at . malloc heap $1f $01 at . $1f $02 at . $01 pause free $01 until nop ;", 0 
5493			 
5493			; fixed malloc and free cycles 
5493			 
5493			;mtestb:      db ": mtestb $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 malloc heap $1f $01 at . $1f $02 at . $01 pause free $01 until nop ;", 0 
5493			 
5493			; fixed double string push and drop cycle  
5493			 
5493			;mtestc:      db ": mtestc $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 spaces $2f spaces  heap $1f $01 at . $1f $02 at . $01 pause drop drop $01 until nop ; ", 0 
5493			 
5493			; consistent fixed string push and drop cycle  
5493			 
5493			;mtestd:      db ": mtestd $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 spaces heap $1f $01 at . $1f $02 at . $01 pause drop $01 until nop ; ", 0 
5493			 
5493			;mteste:      db ": mteste $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . rnd8 dup spaces $0f $02 at . heap $1f $01 at . $1f $02 at . $01 pause drop $01 until nop ; ", 0 
5493			 
5493			;test1:		db ": aa 1 2 3 ;", 0 
5493			;test2:     	db "111 aa 888 999",0 
5493			;test3:     	db ": bb 77 ;",0 
5493			;test4:     	db "$02 $01 do i . loop bb",0 
5493			 
5493 .. 00		test5:     	db ": hline $13 $00 do i $01 at 1 . i $04 at 1 . loop nop ;",0 
54cb .. 00		test6:     	db ": vline $04 $01 do $00 i at 1 . $13 i at 1 . loop nop ;",0 
5503 .. 00		test7:     	db ": box hline vline ;",0 
5517 .. 00		test8:     	db ": world cls box $03 $03 at Hello-World! . ;",0 
5543 .. 00		test9:     	db ": sw $01 adsp world ;",0 
5559 .. 00		test10:     	db ": fw $00 adsp world draw $05 pause ;",0 
557e			;test11:     	db "hello create .",0 
557e			;test12:     	db "hello2 create .",0 
557e			 
557e			;mmtest1:     	db "cls $0001 $0008 MIN . $0002 pause",0 
557e			;mmtest2:     	db "cls $0101 $0008 MIN . $0002 pause",0 
557e			;mmtest3:     	db "cls $0001 $0008 MAX . $0002 pause",0 
557e			;mmtest4:     	db "cls $0101 $0008 MAX . $0002 pause",0 
557e			;mmtest5:     	db "cls $0001 $0001 MIN . $0002 pause",0 
557e			;mmtest6:     	db "cls $0001 $0001 MAX . $0002 pause",0 
557e			 
557e			;iftest1:     	db "$0001 IF cls .",0 
557e			;iftest2:     	db "$0000 IF cls .",0 
557e			;iftest3:     	db "$0002 $0003 - IF cls .",0 
557e			;looptest1:     	db "$0003 $0001 do i . loop 8",0 
557e			;looptest2:     	db "$0003 $0001 do i . $0001 pause loop 8",0 
557e			 
557e			;ifthtest1:     	db "$0001 IF is-true . $0005 pause THEN next-word . $0005 pause",0 
557e			;ifthtest2:     	db "$0000 IF is-true . $0005 pause THEN next-word . $0005 pause",0 
557e			;ifthtest3:     	db "$0002 $0003 - IF is-true . $0005 pause THEN next-word . $0005 pause",0 
557e			 
557e			 
557e .. 00		sound1: db ": note spicel spio spiceh spicel ; ",0 
55a2 .. 00		sound2: db ": slient $9f note $bf note $df note $ff note ; ", 0 
55d2 .. 00		sound3: db ": sound $01 cartdev $00 spitime ! ; ",0 
55f7 .. 00		sound4: db ": cha $00 ; ",0 
5604 .. 00		sound5: db ": chb $20 ; ",0 
5611 .. 00		sound6: db ": chc $40 ; ",0 
561e .. 00		sound7: db ": chd $60 ; ",0 
562b .. 00		sound8: db ": cnote $80 + + note ; ", 0 
5643 .. 00		sound9: db ": cvol $90 + + note ; ", 0 
565a			 
565a			 
565a			 
565a			 
565a			; a small guess the number game 
565a			 
565a .. 00		game1:          db ": gsn rnd8 v1! ;",0 
566b .. 00		game1a:          db ": gs $00 $00 at Enter-a-number .- $00 $02 at between-1-and-255 .- $00 $03 at accept str2num v2! ;",0 
56cd			 
56cd .. 00		game1b:          db ": gcb v2@ v1@ < if $00 $00 at Too-low! .- $01 then ;",0 
5702 .. 00		game1c:          db ": gcc v2@ v1@ > if $00 $00 at Too-high! .- $01 then ;",0 
5738 .. 00		game1d:          db ": gcd v2@ v1@ = if $00 $00 at Yes! .- $00 then ;",0 
5769 .. 00		game1s:          db ": gck gcb gcc gcd ;",0 
577d .. 00		game1t:          db ": sc v3@ $01 + v3! ;",0 
5792 .. 00		game1f:          db ": fsc v3@ cls $01 $01 at You-Took .- $02 $03 at . ;",0 
57c6 .. 00		game1z:         db ": ga $00 v3! gsn repeat cls gs cls gck $02 pause sc until fsc nop ;",0 
580a			 
580a			; Using 'ga' save a high score across multiple runs using external storage 
580a			 
580a .. 00		game1zz:         db ": gas ga $01 bank $80 bread $01 $04 at Prev-Score .> storepage ptr $02 + dup 2@ . v3@ swap 2! $80 bupd ;",0 
5873			 
5873			 
5873			;game2r:          db ": m2r rnd8 v1! ;  ",0, 0, 0, FORTH_END_BUFFER 
5873			;game2b1:          db ": m2b1 $1f $00 do i v2@ at rnd8 $30 < if A . then loop nop ;  ",0, 0, 0, FORTH_END_BUFFER 
5873			;game2b2:          db ": m2b cls $04 $01 do i v2! m2b1 loop ;  ",0, 0, 0, FORTH_END_BUFFER 
5873			 
5873			; simple screen saver to test code memory reuse to destruction 
5873			 
5873 .. 00		ssv2:            db ": ssvchr $2a $2d rnd dup $2c = if drop $20 then nop ;",0 
58a9 .. 00		ssv3:            db ": ssvposx $01 $27 rnd v0! ;",0 
58c5 .. 00		ssv4:            db ": ssvposy $01 $05 rnd v1! ;",0 
58e1 .. 00		ssv5:            db ": ssvt ssvposx ssvposy ;",0 
58fa .. 00		ssv1:          db ": ssv cls repeat ssvposx ssvposy v0@ v1@ at ssvchr emit $01 until nop ;",0 
5942 .. 00		ssv1cpm:          db ": ssvcpm cls repeat ssvposx ssvposy v0@ v1@ at ssvchr emit $01 pausems $01 until nop ;",0 
5999			;ssv1:          db ": ssv cls repeat ssvt v0@ v1@ at ssvchr emit $01 until nop ;",0 
5999			;ssv1:          db ": ssv ssvposx ssvposy at ssvchr ;",0 
5999			;ssv1:            db ": ssv repeat ssvpos rnd8 $10 if               $01 until nop ;",0 
5999			;ssv2:            db ": ssvchr v0! v1! at? ;",0 
5999			;ssv5:            db ": ssvt ssvposx ssvposy v0@ .> v1@ .> ;",0 
5999			;ssv2:            db ": ssvchr $2a $2d rnd  ;",0 
5999			 
5999			 
5999			 
5999			; minesweeper/battleship finding game 
5999			; draws a game board of random ship/mine positions 
5999			; user enters coords to see if it hits on 
5999			; game ends when all are hit 
5999			; when hit or miss says how many may be in the area 
5999			 
5999			; setup the game board and then hide it 
5999			;game2b:          db ": mbsetup $02 fb cls $04 $01 do i v2! $10 $01 do i v2@ at rnd8 $30 < if A . then loop loop $05 pause $01 fb ;",0 
5999			;game2bf:         db ": mbsetupf cls $04 $01 do i v2! $10 $01 do i v2@ at \"+\" . loop loop nop ;",0 
5999			;; prompt for where to target 
5999			;game2mba:        db ": mbp $12 $04 at Turns .> v3@ . $12 $03 at Score .> v0@ . $12 $01 at Enter-X-__ .- $1a $01 at accept $12 $02 at Enter-Y-__ .- $1a $02 at accept nop ;", 0  
5999			;game2mbas:        db ": mbsv str2num v2! str2num v1! nop ;", 0  
5999			;; TODO see if the entered coords hits or misses pushes char hit of miss 
5999			;game2mbht:      db ": mbckht nop ;",0 
5999			;game2mbms:      db ": mbcms nop ;",0 
5999			; TODO how many might be near by 
5999			;game2mb:          db ": mb $00 v0! $00 v3! mbsetup mbsetupf repeat mbp mbsv $02 fb mbckht mbcms v1@ v2@ at@ $01 fb v1@ v2@ at emit $01 until nop ;",0 
5999			 
5999			; Game 3 
5999			 
5999			; Vert scroller ski game - avoid the trees! 
5999			 
5999			; v0 score (ie turns) 
5999			; v1 player pos 
5999			; v2 left wall 
5999			; v3 right wall 
5999			 
5999			; Draw side walls randomly 
5999			 
5999			;game3w:   db ": vsw v2@ $04 at \"|\" . v3@ $04 at \"|\" . nop ;", 0 
5999			 
5999			; Draw player 
5999			;game3p:   db ": vsp v1@ $01 at \"V\" . nop ; ", 0 
5999			 
5999			; TODO Get Key 
5999			 
5999			; TODO Move left right 
5999			 
5999			; scroll and move walls a bit 
5999			 
5999			;game3sc:  db ": vsscl v2@ $01 + v2! v3@ $01 - v3! scroll nop ;", 0 
5999			 
5999			; main game loop 
5999			 
5999			;game3vsi:    db ": vsi $00 v0! $01 v2! $12 v3! $06 v1! nop ;",0 
5999			;game3vs:    db ": vs vsi repeat vsw vsp vsscl $05 pause scroll $01 until nop ;",0 
5999			 
5999			; key board defs 
5999			 
5999 .. 00		keyup:       db ": keyup $05 ;",0 
59a7 .. 00		keydown:       db ": keydown $0a ;",0 
59b7 .. 00		keyleft:       db ": keyleft $0b ;",0 
59c7 .. 00		keyright:       db ": keyright $0c ;",0 
59d8 .. 00		keyf1:       db ": keyf1 $10 ;",0 
59e6 .. 00		keyf2:       db ": keyf2 $11 ;",0 
59f4 .. 00		keyf3:       db ": keyf3 $12 ;",0 
5a02 .. 00		keyf4:       db ": keyf4 $13 ;",0 
5a10 .. 00		keyf5:       db ": keyf5 $14 ;",0 
5a1e .. 00		keyf6:       db ": keyf6 $15 ;",0 
5a2c .. 00		keyf7:       db ": keyf7 $16 ;",0 
5a3a .. 00		keyf8:       db ": keyf8 $17 ;",0 
5a48 .. 00		keyf9:       db ": keyf9 $18 ;",0 
5a56 .. 00		keyf10:       db ": keyf10 $19 ;",0 
5a65 .. 00		keyf11:       db ": keyf11 $1a ;",0 
5a74 .. 00		keyf12:       db ": keyf12 $1b ;",0 
5a83			 
5a83 .. 00		keytab:       db ": keytab $09 ;",0 
5a92 .. 00		keycr:       db ": keycr $0d ;",0 
5aa0 .. 00		keyhome:       db ": keyhome $0e ;",0 
5ab0 .. 00		keyend:       db ": keyend $0f ;",0 
5abf .. 00		keybs:       db ": keybs $08 ;",0 
5acd			 
5acd			   
5acd			 
5acd			 
5acd			 
5acd			; eof 
# End of file forth_autostart.asm
5acd			 
5acd			 
5acd			 
5acd			; stack over and underflow checks 
5acd			 
5acd			; init the words to detect the under/overflow 
5acd			 
5acd			chk_stk_init: 
5acd				; a vague random number to check so we dont get any "lucky" hits 
5acd 3e 2d			ld a, 45 
5acf 6f				ld l, a 
5ad0 00				nop 
5ad1 3e 17			ld a, 23 
5ad3 67				ld h, a 
5ad4			 
5ad4 22 97 e2			ld (chk_word), hl     ; the word we need to check against 
5ad7			 
5ad7			;	ld (chk_stund), hl	; stack points.... 
5ad7 22 00 ef			ld (chk_stovr), hl 
5ada 22 e6 e9			ld (chk_ret_und), hl 
5add 22 a4 e9			ld (chk_ret_ovr), hl 
5ae0 22 22 e9			ld (chk_loop_ovr), hl 
5ae3 22 20 e8			ld (chk_data_ovr), hl 
5ae6 c9				ret 
5ae7				 
5ae7			check_stacks: 
5ae7				; check all stack words 
5ae7			 
5ae7 e5				push hl 
5ae8 d5				push de 
5ae9			 
5ae9			;	ld de,(chk_word) 
5ae9			;	ld hl, (chk_stund)	; stack points.... 
5ae9			;	if DEBUG_STK_FAULT 
5ae9			;		DMARK "FAa" 
5ae9			;		CALLMONITOR 
5ae9			;	endif 
5ae9			;	call cmp16 
5ae9			;	jp z, .chk_faulta 
5ae9			; 
5ae9			;	ld de, sfaultsu 
5ae9			;	jp .chk_fault 
5ae9			 
5ae9 2a 00 ef		.chk_faulta: ld hl, (chk_stovr) 
5aec ed 5b 97 e2		ld de,(chk_word) 
5af0				if DEBUG_STK_FAULT 
5af0					DMARK "FAb" 
5af0					CALLMONITOR 
5af0				endif 
5af0 cd 13 0e			call cmp16 
5af3 28 06			jr z, .chk_fault1 
5af5 11 99 5b			ld de, sfaultso 
5af8 c3 4a 5b			jp .chk_fault 
5afb			.chk_fault1:  
5afb 2a e6 e9			ld hl, (chk_ret_und) 
5afe ed 5b 97 e2		ld de,(chk_word) 
5b02				if DEBUG_STK_FAULT 
5b02					DMARK "FAU" 
5b02					CALLMONITOR 
5b02				endif 
5b02 cd 13 0e			call cmp16 
5b05 ca 0e 5b			jp z, .chk_fault2 
5b08 11 a9 5b			ld de, sfaultru 
5b0b c3 4a 5b			jp .chk_fault 
5b0e			.chk_fault2:  
5b0e 2a a4 e9			ld hl, (chk_ret_ovr) 
5b11 ed 5b 97 e2		ld de,(chk_word) 
5b15				if DEBUG_STK_FAULT 
5b15					DMARK "FA1" 
5b15					CALLMONITOR 
5b15				endif 
5b15 cd 13 0e			call cmp16 
5b18 ca 21 5b			jp z, .chk_fault3 
5b1b 11 b7 5b			ld de, sfaultro 
5b1e c3 4a 5b			jp .chk_fault 
5b21			.chk_fault3:  
5b21 2a 22 e9			ld hl, (chk_loop_ovr) 
5b24 ed 5b 97 e2		ld de,(chk_word) 
5b28				if DEBUG_STK_FAULT 
5b28					DMARK "FA2" 
5b28					CALLMONITOR 
5b28				endif 
5b28 cd 13 0e			call cmp16 
5b2b ca 34 5b			jp z, .chk_fault4 
5b2e 11 d1 5b			ld de, sfaultlo 
5b31 c3 4a 5b			jp .chk_fault 
5b34			.chk_fault4:  
5b34 2a 20 e8			ld hl, (chk_data_ovr) 
5b37 ed 5b 97 e2		ld de,(chk_word) 
5b3b				if DEBUG_STK_FAULT 
5b3b					DMARK "FA3" 
5b3b					CALLMONITOR 
5b3b				endif 
5b3b cd 13 0e			call cmp16 
5b3e ca 47 5b			jp z, .chk_fault5 
5b41 11 eb 5b			ld de, sfaultdo 
5b44 c3 4a 5b			jp .chk_fault 
5b47			 
5b47			 
5b47			.chk_fault5:  
5b47 d1				pop de 
5b48 e1				pop hl 
5b49			 
5b49 c9				ret 
5b4a			 
5b4a cd c8 0b		.chk_fault: 	call clear_display 
5b4d 3e 28				ld a, display_row_2 
5b4f cd db 0b				call str_at_display 
5b52 11 7b 5b				   ld de, .stackfault 
5b55 3e 00				ld a, display_row_1 
5b57 cd db 0b				call str_at_display 
5b5a 11 65 ee				    ld de, debug_mark 
5b5d 3e 11				ld a, display_row_1+17 
5b5f cd db 0b				call str_at_display 
5b62 cd eb 0b				call update_display 
5b65			 
5b65				; prompt before entering montior for investigating issue 
5b65			 
5b65 3e 78			ld a, display_row_4 
5b67 11 6e 18			ld de, endprog 
5b6a			 
5b6a cd eb 0b			call update_display		 
5b6d			 
5b6d cd 08 1b			call next_page_prompt 
5b70			 
5b70 d1				pop de 
5b71 e1				pop hl 
5b72 cd c2 18				call monitor 
5b75 cd 27 1f				call forth_warmstart 
5b78 c3 be 17				jp warmstart_afterauto 
5b7b					;jp 0 
5b7b					;halt 
5b7b			 
5b7b			 
5b7b			 
5b7b .. 00		.stackfault: 	db "Stack fault:",0 
5b88			 
5b88 .. 00		sfaultsu: 	db	"Stack under flow",0 
5b99 .. 00		sfaultso: 	db	"Stack over flow",0 
5ba9 .. 00		sfaultru:	db "RTS underflow",0 
5bb7 .. 00		sfaultro:	db "RTS overflow/LS underflow", 0 
5bd1 .. 00		sfaultlo:	db "LS overflow/DTS underflow", 0 
5beb .. 00		sfaultdo:	db "DTS overflow", 0 
5bf8			 
5bf8			 
5bf8			fault_dsp_under: 
5bf8 11 0a 5c			ld de, .dsp_under 
5bfb c3 c0 5c			jp .show_fault 
5bfe			 
5bfe			fault_rsp_under: 
5bfe 11 18 5c			ld de, .rsp_under 
5c01 c3 c0 5c			jp .show_fault 
5c04			fault_loop_under: 
5c04 11 26 5c			ld de, .loop_under 
5c07 c3 c0 5c			jp .show_fault 
5c0a			 
5c0a .. 00		.dsp_under: db "DSP Underflow",0 
5c18 .. 00		.rsp_under: db "RSP Underflow",0 
5c26 .. 00		.loop_under: db "LOOP Underflow",0 
5c35			 
5c35			 
5c35 d5			type_faultn: 	push de 
5c36 e5					push hl 
5c37 cd c8 0b				call clear_display 
5c3a 11 64 5c				   ld de, .typefaultn 
5c3d 3e 00				ld a, display_row_1 
5c3f cd db 0b				call str_at_display 
5c42 11 65 ee				    ld de, debug_mark 
5c45 3e 11				ld a, display_row_1+17 
5c47 cd db 0b				call str_at_display 
5c4a cd eb 0b				call update_display 
5c4d			 
5c4d				; prompt before entering montior for investigating issue 
5c4d			 
5c4d 3e 78			ld a, display_row_4 
5c4f 11 6e 18			ld de, endprog 
5c52			 
5c52 cd eb 0b			call update_display		 
5c55			 
5c55 cd 08 1b			call next_page_prompt 
5c58			 
5c58 e5					push hl 
5c59 d5					push de 
5c5a cd c2 18				call monitor 
5c5d cd 27 1f				call forth_warmstart 
5c60 c3 be 17				jp warmstart_afterauto 
5c63 76					halt 
5c64			 
5c64			 
5c64 .. 00		.typefaultn: db "NUM Type Expected TOS!",0 
5c7b			 
5c7b d5			type_faults: 	push de 
5c7c e5					push hl 
5c7d cd c8 0b				call clear_display 
5c80 11 a9 5c				   ld de, .typefaults 
5c83 3e 00				ld a, display_row_1 
5c85 cd db 0b				call str_at_display 
5c88 11 65 ee				    ld de, debug_mark 
5c8b 3e 11				ld a, display_row_1+17 
5c8d cd db 0b				call str_at_display 
5c90 cd eb 0b				call update_display 
5c93			 
5c93				; prompt before entering montior for investigating issue 
5c93			 
5c93 3e 78			ld a, display_row_4 
5c95 11 6e 18			ld de, endprog 
5c98			 
5c98 cd eb 0b			call update_display		 
5c9b			 
5c9b cd 08 1b			call next_page_prompt 
5c9e			 
5c9e e1					pop hl 
5c9f d1					pop de 
5ca0 cd c2 18				call monitor 
5ca3 cd 27 1f				call forth_warmstart 
5ca6 c3 be 17				jp warmstart_afterauto 
5ca9			 
5ca9			 
5ca9 .. 00		.typefaults: db "STR Type Expected TOS!",0 
5cc0			 
5cc0			.show_fault: 	 
5cc0 d5					push de 
5cc1 cd c8 0b				call clear_display 
5cc4 d1					pop de 
5cc5 3e 00				ld a, display_row_1 
5cc7 cd db 0b				call str_at_display 
5cca 11 65 ee				    ld de, debug_mark 
5ccd 3e 11				ld a, display_row_1+17 
5ccf cd db 0b				call str_at_display 
5cd2 cd eb 0b				call update_display 
5cd5			 
5cd5				; prompt before entering montior for investigating issue 
5cd5			 
5cd5 3e 78			ld a, display_row_4 
5cd7 11 6e 18			ld de, endprog 
5cda			 
5cda cd eb 0b			call update_display		 
5cdd			 
5cdd cd 08 1b			call next_page_prompt 
5ce0			 
5ce0 e1					pop hl 
5ce1 d1					pop de 
5ce2 cd c2 18				call monitor 
5ce5			; do a dump to cli and not warmstart so we preserve all of the uwords.  
5ce5			; TODO Make optional fault restart to cli or warm boot? 
5ce5					;jp warmstart 
5ce5 c3 02 18				jp cli 
5ce8 76					halt 
5ce9			 
5ce9			 
5ce9			; handle the auto run of code from files in storage 
5ce9			 
5ce9			 
5ce9			include "forth_startup.asm" 
5ce9			; Which startup method to use? 
5ce9			; 
5ce9			; version 1 - allows for a single stored file to be selected to run at start up (if se storage is enabled) 
5ce9			; followed by loading of a list of scripts in eeprom 
5ce9			 
5ce9			; version 2 - if se storage is enabled then auto load all files which begin with a '*' else use loading 
5ce9			; from eeprom 
5ce9			 
5ce9			; Select with define in main stubs 
5ce9			 
5ce9			if STARTUP_V1 
5ce9				include "forth_startupv1.asm" 
5ce9			; Startup script loading version 1 
5ce9			 
5ce9			; If SE storage is available first stage is to use the selected file 
5ce9			; then go through the eeprom list 
5ce9			 
5ce9 .. 00		sprompt1: db "Startup load...",0 
5cf9 .. 00		sprompt2: db "Run? 1=No *=End #=All",0 
5d0f			 
5d0f			 
5d0f			 
5d0f			 
5d0f			forth_startup: 
5d0f 21 53 4e			ld hl, startcmds 
5d12 3e 00			ld a, 0 
5d14 32 e1 e6			ld (os_last_cmd), a    ; tmp var to skip prompts if doing all 
5d17			 
5d17 e5			.start1:	push hl 
5d18 cd c8 0b			call clear_display 
5d1b 11 e9 5c			ld de, sprompt1 
5d1e 3e 00		        ld a, display_row_1 
5d20 cd db 0b			call str_at_display 
5d23 11 f9 5c			ld de, sprompt2 
5d26 3e 28		        ld a, display_row_2 
5d28 cd db 0b			call str_at_display 
5d2b e1				pop hl 
5d2c e5				push hl 
5d2d 5e				ld e,(hl) 
5d2e 23				inc hl 
5d2f 56				ld d,(hl) 
5d30 3e 50		        ld a, display_row_3 
5d32 cd db 0b			call str_at_display 
5d35 cd eb 0b			call update_display 
5d38			 
5d38			 
5d38 3a e1 e6			ld a, (os_last_cmd) 
5d3b fe 00			cp 0 
5d3d 28 05			jr z, .startprompt 
5d3f cd f4 0a			call delay250ms 
5d42 18 24			jr .startdo 
5d44				 
5d44				 
5d44			 
5d44			.startprompt: 
5d44			 
5d44 3e 9f			ld a,display_row_4 + display_cols - 1 
5d46 11 06 1b		        ld de, endprg 
5d49 cd db 0b			call str_at_display 
5d4c cd eb 0b			call update_display 
5d4f cd 00 0b			call delay1s 
5d52 cd c1 5e			call cin_wait 
5d55						 
5d55 fe 2a			cp '*' 
5d57 28 5e			jr z, .startupend1 
5d59 fe 23			cp '#' 
5d5b 20 07			jr nz, .startno 
5d5d 3e 01			ld a, 1 
5d5f 32 e1 e6			ld (os_last_cmd),a 
5d62 18 04			jr .startdo 
5d64 fe 31		.startno:	cp '1' 
5d66 28 3a			jr z,.startnxt  
5d68			 
5d68				; exec startup line 
5d68			.startdo:	 
5d68 e1				pop hl 
5d69 e5				push hl 
5d6a				 
5d6a 5e				ld e,(hl) 
5d6b 23				inc hl 
5d6c 56				ld d,(hl) 
5d6d eb				ex de,hl 
5d6e			 
5d6e e5				push hl 
5d6f			 
5d6f 3e 00			ld a, 0 
5d71				;ld a, FORTH_END_BUFFER 
5d71 cd 66 11			call strlent 
5d74 23				inc hl   ; include zero term to copy 
5d75 06 00			ld b,0 
5d77 4d				ld c,l 
5d78 e1				pop hl 
5d79 11 bb e2			ld de, scratch 
5d7c ed b0			ldir 
5d7e			 
5d7e			 
5d7e 21 bb e2			ld hl, scratch 
5d81 cd cf 1f			call forthparse 
5d84 cd 0f 20			call forthexec 
5d87 cd 21 1f			call forthexec_cleanup 
5d8a			 
5d8a 3e 78			ld a, display_row_4 
5d8c 11 6e 18			ld de, endprog 
5d8f			 
5d8f cd eb 0b			call update_display		 
5d92			 
5d92 3a e1 e6			ld a, (os_last_cmd) 
5d95 fe 00			cp 0 
5d97 20 09			jr nz, .startnxt 
5d99 cd 08 1b			call next_page_prompt 
5d9c cd c8 0b		        call clear_display 
5d9f cd eb 0b			call update_display		 
5da2			 
5da2				; move onto next startup line? 
5da2			.startnxt: 
5da2			 
5da2 cd f4 0a			call delay250ms 
5da5 e1				pop hl 
5da6			 
5da6 23				inc hl 
5da7 23				inc hl 
5da8			 
5da8 e5				push hl 
5da9 5e				ld e, (hl) 
5daa 23				inc hl 
5dab 56				ld d, (hl) 
5dac e1				pop hl 
5dad				; TODO replace 0 test 
5dad			 
5dad eb				ex de, hl 
5dae cd 1e 0e			call ishlzero 
5db1			;	ld a,e 
5db1			;	add d 
5db1			;	cp 0    ; any left to do? 
5db1 eb				ex de, hl 
5db2 c2 17 5d			jp nz, .start1 
5db5 18 01			jr .startupend 
5db7			 
5db7 e1			.startupend1: pop hl 
5db8			.startupend: 
5db8			 
5db8 cd c8 0b			call clear_display 
5dbb cd eb 0b			call update_display 
5dbe c9				ret 
5dbf			if STORAGE_SE 
5dbf			 
5dbf			sprompt3: db "Loading from start-up file?:",0 
5dbf			sprompt4: db "(Y=Any key/N=No)",0 
5dbf			 
5dbf			 
5dbf			forth_autoload: 
5dbf			 
5dbf				; load block 0 of store 1 
5dbf				 
5dbf				ld a, $fe      ; bit 0 clear 
5dbf				ld (spi_device), a 
5dbf			 
5dbf				call storage_get_block_0 
5dbf			 
5dbf				ld a, (store_page+STORE_0_AUTOFILE) 
5dbf			 
5dbf				cp 0 
5dbf				ret z     ; auto start not enabled 
5dbf			 
5dbf				call clear_display 
5dbf			 
5dbf				; set bank 
5dbf			 
5dbf					ld a, (store_page+STORE_0_BANKRUN) 
5dbf					ld (spi_device), a 
5dbf			 
5dbf				; get file id to load from and get the file name to display 
5dbf			 
5dbf					ld a, (store_page+STORE_0_FILERUN) 
5dbf			 
5dbf					ld l, 0 
5dbf					ld h, a 
5dbf					ld de, store_page 
5dbf			 
5dbf					if DEBUG_FORTH_WORDS 
5dbf						DMARK "ASp" 
5dbf						CALLMONITOR 
5dbf					endif 
5dbf					call storage_read 
5dbf			 
5dbf					if DEBUG_FORTH_WORDS 
5dbf						DMARK "ASr" 
5dbf						CALLMONITOR 
5dbf					endif 
5dbf			 
5dbf					call ishlzero 
5dbf					ret z             ; file not found 
5dbf			 
5dbf					ld a, display_row_2 + 10 
5dbf					ld de, store_page+3 
5dbf					call str_at_display 
5dbf				 
5dbf			; 
5dbf			 
5dbf				ld a, display_row_1+5 
5dbf				ld de, sprompt3 
5dbf				call str_at_display 
5dbf				ld a, display_row_3+15 
5dbf				ld de, sprompt4 
5dbf				call str_at_display 
5dbf			 
5dbf				call update_display 
5dbf			 
5dbf				call cin_wait 
5dbf				cp 'n' 
5dbf				ret z 
5dbf				cp 'N' 
5dbf				ret z 
5dbf			 
5dbf				call delay1s 
5dbf			 
5dbf				ld a, (store_page+2) 
5dbf				ld (store_openmaxext), a    ; save count of ext 
5dbf				ld a, 1  
5dbf				ld (store_openext), a    ; save count of ext 
5dbf			 
5dbf			.autof:  
5dbf				ld l , a 
5dbf				 
5dbf				ld a, (store_page) 
5dbf				ld h, a	 
5dbf				ld de, store_page 
5dbf					if DEBUG_FORTH_WORDS 
5dbf						DMARK "ASl" 
5dbf						CALLMONITOR 
5dbf					endif 
5dbf					call storage_read 
5dbf				call ishlzero 
5dbf				ret z 
5dbf			;	jr z, .autoend 
5dbf			 
5dbf					if DEBUG_FORTH_WORDS 
5dbf						DMARK "ASc" 
5dbf						CALLMONITOR 
5dbf					endif 
5dbf				ld de, store_page+2 
5dbf				ld a, display_row_4 
5dbf				call str_at_display 
5dbf			 
5dbf				call update_display 
5dbf				call delay250ms 
5dbf			 
5dbf			 
5dbf			 
5dbf				ld hl, store_page+2 
5dbf				call forthparse 
5dbf				call forthexec 
5dbf				call forthexec_cleanup 
5dbf			 
5dbf				 
5dbf				ld a, (store_openext) 
5dbf				inc a 
5dbf				ld (store_openext), a    ; save count of ext 
5dbf			 
5dbf				jr .autof 
5dbf			;.autofdone: 
5dbf			; 
5dbf			;		if DEBUG_FORTH_WORDS 
5dbf			;			DMARK "ASx" 
5dbf			;			CALLMONITOR 
5dbf			;		endif 
5dbf			;;	call clear_display 
5dbf			;	ret 
5dbf			 
5dbf			 
5dbf			 
5dbf			endif 
# End of file forth_startupv1.asm
5dbf			endif 
5dbf			if STARTUP_V2 
5dbf				include "forth_startupv2.asm" 
5dbf			endif 
5dbf			 
# End of file forth_startup.asm
5dbf			 
5dbf			; eof 
# End of file forth_kernel.asm
5dbf			;include "nascombasic.asm" 
5dbf			 
5dbf			 
5dbf			; find out where the code ends if loaded into RAM (for SC114) 
5dbf			;endofcode:  
5dbf			;	nop 
5dbf			 
5dbf			 
5dbf			; jump to nmi vector 
5dbf			 
5dbf			init_nmi: 
5dbf 3e c9			ld a, $c9   ; RET 
5dc1 32 72 ee			ld (nmi_vector), a 
5dc4 c9				ret 
5dc5			nmi: 
5dc5 e5				push hl 
5dc6 d5				push de 
5dc7 c5				push bc 
5dc8 f5				push af 
5dc9 cd 72 ee			call nmi_vector 
5dcc f5				push af 
5dcd c5				push bc 
5dce d5				push de 
5dcf e5				push hl 
5dd0 ed 4d			reti 
5dd2			 
5dd2			 
5dd2			; eof 
5dd2			 
# End of file main.asm
5dd2			;include "firmware_lcd_4x40.asm" 
5dd2			;;include "firmware_lcd_4x20.asm" 
5dd2			include "firmware_cpm_display.asm" 
5dd2			 
5dd2			; Serial display interface for SC114 
5dd2			 
5dd2			 
5dd2			display_row_1: equ 0 
5dd2			display_row_2: equ display_row_1+display_cols 
5dd2			display_row_3: equ display_row_2 + display_cols 
5dd2			display_row_4: equ display_row_3 + display_cols 
5dd2			 
5dd2			kLCDWidth:  EQU display_cols             ;Width in characters 
5dd2			kLCD_Line1: EQU 0x00  
5dd2			kLCD_Line2: EQU kLCD_Line1+kLCDWidth 
5dd2			; E1 
5dd2			kLCD_Line3: EQU kLCD_Line2+kLCDWidth 
5dd2			kLCD_Line4: EQU kLCD_Line3+kLCDWidth  
5dd2			 
5dd2			lcd_init: 
5dd2				; no init as handled by the SCM bios 
5dd2 c9				ret 
5dd3			 
5dd3			 
5dd3			; low level functions for direct screen writes 
5dd3			 
5dd3			; output char at pos? 
5dd3			fLCD_Str: 
5dd3			        ;out (SC114_SIO_1_OUT),a 
5dd3 c5				push bc 
5dd4 d5				push de 
5dd5 5f				ld e, a 
5dd6			; TODO Replace with CP/M BIOS call 
5dd6 0e 02			ld c, $02 
5dd8 cd 05 00			call 5 
5ddb d1				pop de 
5ddc c1				pop bc 
5ddd c9				ret 
5dde			 
5dde			; position the cursor on the screen using A as realtive point in screen buffer (i.e. A=(x+(width/y))) 
5dde			fLCD_Pos: 
5dde				; use ASCII escape to position 
5dde			        ;out (SC114_SIO_1_OUT),a 
5dde c5				push bc 
5ddf d5				push de 
5de0 5f				ld e, a 
5de1 0e 02			ld c, $02 
5de3			; TODO Replace with CP/M BIOS call 
5de3 cd 05 00			call 5 
5de6 d1				pop de 
5de7 c1				pop bc 
5de8			 
5de8 c9				ret 
5de9			 
5de9			; output char at pos 
5de9			fLCD_Data: 
5de9			      ;  out (SC114_SIO_1_OUT),a 
5de9 c5				push bc 
5dea d5				push de 
5deb 0e 02			ld c, $02 
5ded 5f				ld e, a 
5dee			; TODO Replace with CP/M BIOS call 
5dee cd 05 00			call 5 
5df1 d1				pop de 
5df2 c1				pop bc 
5df3			 
5df3 c9				ret 
5df4			 
5df4			; ascii cls  
5df4			 
5df4 1b 5b 48 24	.cls:   db 27, '[', 'H', "$" 
5df8			 
5df8 0d 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a ..	.clscpm: db 13, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,10,10,10,10,10,"$" 
5e0f			;.clscpm: db 3, $3c,"$" 
5e0f			 
5e0f			; write the frame buffer given in hl to hardware  
5e0f			write_display: 
5e0f			 
5e0f			API: equ 0 
5e0f			 
5e0f			if API 
5e0f				push bc 
5e0f				ld b, 4 
5e0f			 
5e0f			        ld (display_write_tmp), hl 	  
5e0f			 
5e0f				; clear and home cursor 
5e0f			 
5e0f				ld c, 9 
5e0f				ld de, .cls 
5e0f			; TODO Replace with CP/M BIOS call 
5e0f				call 5 
5e0f			 
5e0f			 
5e0f			.writeln: 
5e0f			 
5e0f				ld de, (display_write_tmp) 
5e0f				ld c, 6 
5e0f			; TODO Replace with CP/M BIOS call 
5e0f				rst $30 
5e0f				ld c, 7 
5e0f				rst $30 
5e0f			 
5e0f				ld hl, (display_write_tmp) 
5e0f				ld de, display_cols 
5e0f				add hl,de 
5e0f				ld (display_write_tmp),hl 
5e0f			 
5e0f				djnz  .writeln 
5e0f			 
5e0f				pop bc 
5e0f			 
5e0f			 
5e0f				ret 
5e0f			endif 
5e0f e5				push hl 
5e10 c5				push bc 
5e11 d5				push de 
5e12			 
5e12			;	ld c, 2 
5e12			;	;ld de, .cls 
5e12			;	ld a, 27 
5e12			;	rst $30 
5e12			;	ld c, 2 
5e12			;	;ld de, .cls 
5e12			;	ld a, '[' 
5e12			;	rst $30 
5e12			; 
5e12			;	ld c, 2 
5e12			;	;ld de, .cls 
5e12			;	ld a, 'H' 
5e12			;	rst $30 
5e12			; 
5e12			 
5e12			 
5e12			; lots of CR/LF 
5e12			;	ld c, 9 
5e12			;	ld de, .clscpm 
5e12			;	call 5 
5e12			 
5e12			; xterm cls 
5e12 0e 02			ld c, 2 
5e14 1e 1b			ld e, 27 
5e16 cd 05 00			call 5 
5e19			; cls causes too much flicker 
5e19			;	ld c, 2 
5e19			;	ld e, 'c' 
5e19			;	call 5 
5e19			 
5e19			; use xterm home instead 
5e19 0e 02			ld c, 2 
5e1b 1e 5b			ld e, '[' 
5e1d cd 05 00			call 5 
5e20 0e 02			ld c, 2 
5e22 1e 48			ld e, 'H' 
5e24 cd 05 00			call 5 
5e27			LLL: equ 0 
5e27			 
5e27			if LLL 
5e27			 
5e27				ld c, 2 
5e27				;ld de, .cls 
5e27				ld e, 27 
5e27			; TODO Replace with CP/M BIOS call 
5e27				call 5 
5e27			 
5e27			 
5e27				ld c, 2 
5e27				;ld de, .cls 
5e27				ld e, '[' 
5e27			; TODO Replace with CP/M BIOS call 
5e27				call 5 
5e27				ld c, 2 
5e27				;ld de, .cls 
5e27				ld e, '2' 
5e27			; TODO Replace with CP/M BIOS call 
5e27				call 5 
5e27				ld c, 2 
5e27				;ld de, .cls 
5e27				ld e, 'J' 
5e27			; TODO Replace with CP/M BIOS call 
5e27				call 5 
5e27			 
5e27			endif 
5e27			 
5e27 d1				pop de 
5e28 c1				pop bc 
5e29 e1				pop hl 
5e2a			 
5e2a			 
5e2a 22 c3 eb		        ld (display_write_tmp), hl 	  
5e2d 3e 00			ld a, kLCD_Line1 
5e2f			        ;    CALL fLCD_Pos       ;Position cursor to location in A 
5e2f 06 28			ld b, display_cols 
5e31 ed 5b c3 eb		ld de, (display_write_tmp) 
5e35 cd b8 5e			call write_len_string 
5e38				 
5e38			 
5e38 e5			push hl 
5e39 d5			push de 
5e3a c5			push bc 
5e3b 0e 02			ld c, 2 
5e3d 1e 0a			ld e, 10 
5e3f cd 05 00			call 5 
5e42 0e 02			ld c, 2 
5e44 1e 0d			ld e, 13 
5e46 cd 05 00			call 5 
5e49			; TODO Replace with CP/M BIOS call 
5e49				;rst $30 
5e49 c1			pop bc 
5e4a d1			pop de 
5e4b e1			pop hl 
5e4c			 
5e4c				 
5e4c 2a c3 eb			ld hl, (display_write_tmp) 
5e4f 11 28 00			ld de, display_cols 
5e52 19				add hl,de 
5e53 22 c3 eb			ld (display_write_tmp),hl 
5e56			 
5e56				 
5e56 3e 28			ld a, kLCD_Line2 
5e58			        ;    CALL fLCD_Pos       ;Position cursor to location in A 
5e58 06 28			ld b, display_cols 
5e5a ed 5b c3 eb		ld de, (display_write_tmp) 
5e5e cd b8 5e			call write_len_string 
5e61				 
5e61 2a c3 eb			ld hl, (display_write_tmp) 
5e64 11 28 00			ld de, display_cols 
5e67 19				add hl,de 
5e68 22 c3 eb			ld (display_write_tmp),hl 
5e6b			 
5e6b e5			push hl 
5e6c d5			push de 
5e6d c5			push bc 
5e6e 0e 07			ld c, 7 
5e70			; TODO Replace with CP/M BIOS call 
5e70				;rst $30 
5e70 0e 02			ld c, 2 
5e72 1e 0a			ld e, 10 
5e74 cd 05 00			call 5 
5e77 0e 02			ld c, 2 
5e79 1e 0d			ld e, 13 
5e7b cd 05 00			call 5 
5e7e c1			pop bc 
5e7f d1			pop de 
5e80 e1			pop hl 
5e81			 
5e81				 
5e81 3e 50			ld a, kLCD_Line3 
5e83			         ;   CALL fLCD_Pos       ;Position cursor to location in A 
5e83 06 28			ld b, display_cols 
5e85 ed 5b c3 eb		ld de, (display_write_tmp) 
5e89 cd b8 5e			call write_len_string 
5e8c				 
5e8c 2a c3 eb			ld hl, (display_write_tmp) 
5e8f 11 28 00			ld de, display_cols 
5e92 19				add hl,de 
5e93 22 c3 eb			ld (display_write_tmp),hl 
5e96			 
5e96 e5			push hl 
5e97 d5			push de 
5e98 c5			push bc 
5e99 0e 07			ld c, 7 
5e9b			; TODO Replace with CP/M BIOS call 
5e9b				;rst $30 
5e9b 0e 02			ld c, 2 
5e9d 1e 0a			ld e, 10 
5e9f cd 05 00			call 5 
5ea2 0e 02			ld c, 2 
5ea4 1e 0d			ld e, 13 
5ea6 cd 05 00			call 5 
5ea9 c1			pop bc 
5eaa d1			pop de 
5eab e1			pop hl 
5eac			 
5eac				 
5eac 3e 78			ld a, kLCD_Line4 
5eae			          ;  CALL fLCD_Pos       ;Position cursor to location in A 
5eae 06 28			ld b, display_cols 
5eb0 ed 5b c3 eb		ld de, (display_write_tmp) 
5eb4 cd b8 5e			call write_len_string 
5eb7 c9					ret 
5eb8			 
5eb8			 
5eb8				; write out a fixed length string given in b from de 
5eb8			 
5eb8 1a			write_len_string:   LD   A, (DE)        ;Get character from string 
5eb9 cd e9 5d		            CALL fLCD_Data      ;Write character to display 
5ebc 13				inc de 
5ebd 10 f9			djnz write_len_string 
5ebf c9				ret 
5ec0			 
5ec0			 
5ec0			; eof 
# End of file firmware_cpm_display.asm
5ec0			;include "firmware_key_5x10.asm" 
5ec0			;;include "firmware_key_4x10.asm" 
5ec0			include "firmware_key_cpm.asm" 
5ec0			; Serial keyboard interface for SC114 
5ec0			 
5ec0			 
5ec0			key_init: 
5ec0				; no init as handled by the SCM bios 
5ec0 c9				ret 
5ec1			 
5ec1			 
5ec1			cin_wait: 
5ec1			;	ld a, 0 
5ec1			;	ret 
5ec1			 
5ec1				;in a,(SC114_SIO_1_IN) 
5ec1			        ; Use SCM API to get from whatever console device we are using 
5ec1			 
5ec1			; TODO Replace with CP/M BIOS call 
5ec1 c5				push bc 
5ec2 0e 01			ld c, $01 
5ec4 cd 05 00			call 5 
5ec7 c1				pop bc 
5ec8 c9				ret 
5ec9			 
5ec9			cin: 
5ec9			 
5ec9			 
5ec9 c5				push bc 
5eca			 
5eca				; any key waiting to process? 
5eca			; TODO Replace with CP/M BIOS call 
5eca 0e 06			ld c, $06 
5ecc cd 05 00			call 5 
5ecf 28 0d			jr z, .cin_skip 
5ed1			 
5ed1				; yep, get it 
5ed1			 
5ed1 0e 01			ld c, $01 
5ed3			; TODO Replace with CP/M BIOS call 
5ed3 cd 05 00			call 5 
5ed6			 
5ed6 fe 7f			cp $7f     ; back space 
5ed8 20 02			jr nz, .skipbs 
5eda 3e 08			ld a, KEY_BS 
5edc			.skipbs: 
5edc			 
5edc c1				pop bc 
5edd c9				ret 
5ede			.cin_skip: 
5ede 3e 00			ld a, 0 
5ee0 c1				pop bc 
5ee1 c9				ret 
5ee2			 
5ee2			 
5ee2			 
5ee2			 
# End of file firmware_key_cpm.asm
5ee2			endofcode:  
5ee2			baseram:  
5ee2 00				nop 
5ee3			 
5ee3			heap_start: equ baseram+15  ; Starting address of heap 
5ee3			free_list:  equ baseram+10      ; Block struct for start of free list (MUST be 4 bytes) 
5ee3			heap_size: equ  heap_end-heap_start      ; Number of bytes available in heap   TODO make all of user ram 
5ee3			;VDU:  EQU     endofcode           ; BASIC Work space 
5ee3			; eof 
5ee3			 
# End of file os_mega_cpm.asm
5ee3
