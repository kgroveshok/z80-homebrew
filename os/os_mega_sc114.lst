# File debug_level2.asm
0000			 
0000			; DEBUG Level 2 - All useful debug on and memory courruption guards 
0000			 
0000			; Odd specific debug points for testing hardware dev 
0000			 
0000			;DEBUG_LEVEL0: equ 0 
0000			;DEBUG_LEVEL0: equ 0 
0000			;DEBUG_LEVEL2: equ 1 
0000			DEBUG_LEVEL: equ '2' 
0000			 
0000			DEBUG_SOUND: equ 0      
0000			DEBUG_STK_FAULT: equ 0 
0000			DEBUG_INPUT: equ 0     ; Debug input entry code 
0000			DEBUG_INPUTV2: equ 0     ; Debug input entry code 
0000			DEBUG_KEYCINWAIT: equ 0 
0000			DEBUG_KEYCIN: equ 0 
0000			DEBUG_KEY: equ 0 
0000			DEBUG_KEY_MATRIX: equ 0 
0000			DEBUG_STORECF: equ 0 
0000			DEBUG_STORESE: equ 1        ; TODO  w locks up, r returns.  
0000			DEBUG_SPI_HARD_CE0: equ 0    ; only handshake on CE0 on port A 
0000			DEBUG_SPI: equ 0    ; low level spi tests 
0000			 
0000			; Enable many break points 
0000			 
0000			DEBUG_FORTH_PARSE_EXEC: equ 0     ; 6 
0000			DEBUG_FORTH_PARSE_EXEC_SLOW: equ 0     ; 6 
0000			DEBUG_FORTH_PARSE_NEXTWORD: equ 0 
0000			DEBUG_FORTH_JP: equ 0    ; 4 
0000			DEBUG_FORTH_MALLOC: equ 0 
0000			DEBUG_FORTH_MALLOC_INT: equ 0 
0000			DEBUG_FORTH_DOT: equ 1 
0000			DEBUG_FORTH_DOT_WAIT: equ 0 
0000			DEBUG_FORTH_MATHS: equ 0 
0000			DEBUG_FORTH_TOK: equ 0    ; 4 
0000			DEBUG_FORTH_PARSE: equ 0    ; 3 
0000			DEBUG_FORTH: equ 0  ;2 
0000			DEBUG_FORTH_WORDS: equ 1   ; 1 
0000			DEBUG_FORTH_PUSH: equ 1   ; 1 
0000			DEBUG_FORTH_UWORD: equ 1   ; 1 
0000			 
0000			; Enable key point breakpoints 
0000			 
0000			DEBUG_FORTH_DOT_KEY: equ 0 
0000			DEBUG_FORTH_PARSE_KEY: equ 0   ; 5 
0000			DEBUG_FORTH_WORDS_KEY: equ 1   ; 1 
0000			 
0000			; Debug stack imbalances 
0000			 
0000			ON: equ 1 
0000			OFF: equ 0 
0000			 
0000			DEBUG_STACK_IMB: equ 0 
0000			STACK_IMB_STORE: equ 20 
0000			 
0000			; House keeping and protections 
0000			 
0000			DEBUG_FORTH_STACK_GUARD: equ 1    ; under/over flows 
0000			DEBUG_FORTH_MALLOC_GUARD: equ 1 
0000			DEBUG_FORTH_MALLOC_HIGH: equ 0     ; warn only if more than 255 chars being allocated. would be highly unusual! 
0000			FORTH_ENABLE_FREE: equ 0 
0000			FORTH_ENABLE_MALLOCFREE: equ 1 
0000			FORTH_ENABLE_DSPPOPFREE: equ 1    ; TODO BUG Seems to be OK in some situations but with SW it crashes straight away 
0000			FORTH_ENABLE_FLOATMATH: equ 0 
0000			; eof 
# End of file debug_level2.asm
# File os_mega_sc114.asm
0000			 
0000			; Hardware Platform 
0000			 
0000			BASE_SC114: equ 1 
0000			BASE_KEV: equ 0 
0000			BASE_CPM: equ 0 
0000			 
0000			ENABLE_BASIC: equ 0 
0000			 
0000			STARTUP_V1: equ 1 
0000			STARTUP_V2: equ 0 
0000			 
0000			tos:	equ 0f000h 
0000			; Using SCM API instead 
0000			;SC114_SIO_1_OUT: equ 81 
0000			;SC114_SIO_1_IN: equ 80 
0000			; 
0000			; 
0000			; CPU clock 
0000			; 
0000			CPU_CLOCK_4MHZ: equ 1 
0000			CPU_CLOCK_8MHZ: equ  0 
0000			CPU_CLOCK_10MHZ: equ  0 
0000			 
0000			; use microchip serial eeprom for storage 
0000			 
0000			STORAGE_SE: equ 0 
0000			SOUND_ENABLE: equ 0 
0000			 
0000			; the port where the PIO using the SC103 card is located 
0000			 
0000			SC103_PIO: equ 068h 
0000			 
0000			; Full OS but with the 5x10 fullsized keyboard 
0000			 
0000			display_rows: equ 4     
0000			;display_cols: equ 20 
0000			display_cols: equ 40 
0000			 
0000			key_rows: equ 5      
0000			key_cols: equ 10    
0000			 
0000			 
0000			include "main.asm" 
0000			; z80 homebrew opperating system 
0000			; 
0000			 
0000			STARTUP_ENABLE: equ 1 
0000			 
0000			 
0000			; bios jump points via rst 
0000			 
0000			if BASE_SC114 = 1  
0000			 
0000				org 8000h 
8000			endif 
8000			 
8000			if BASE_KEV = 1  
8000			 
8000				org 0h 
8000			endif 
8000			 
8000			if BASE_CPM = 1  
8000			 
8000				org 100h 
8000			endif 
8000 c3 71 96			jp coldstart     ; rst 0 - cold boot 
8003			 
8003			 
8003 ..			buildtime: db   "Build: " 
800a					include "romtimestamp.asm" 
800a ..			db '2025-09-05 22:22' 
# End of file romtimestamp.asm
801a 00				   db 0 
801b .. 32 00		debuglevel: db   "DL",DEBUG_LEVEL, 0 
801f			 
801f			 
801f			 
801f			;        nop  
801f			;        nop 
801f			;;	org 05h		; null out bdos call 
801f			; 
801f			;        nop  
801f			;        nop  
801f			;        nop 
801f			;;	org 08h 
801f			;;; 
801f			;;	jp cin		; rst 8 - char in 
801f			;;; 
801f			; 
801f			;        nop 
801f			;        nop 
801f			;        nop 
801f			;        nop 
801f			;        nop 
801f			;        nop 
801f			;        nop 
801f			;        nop 
801f			;	org 010h 
801f			;; 
801f			;	jp cout		; rest 010h  - char out 
801f			;; 
801f			;	org 01bh   
801f			; 
801f			;	;jp  		; rst 01bh   - write string to display 
801f			;	jp str_at_display 
801f			; 
801f			; 
801f			;	org 020h 
801f			; 
801f			;	; jp		 ; rst 020h - read char at screen location 
801f			; 
801f			;	org 028h 
801f			 
801f				; jp		 ; rst 028h  - storage i/o 
801f			 
801f			; 	org 030h 
801f			;	jp break_point_state 
801f			  
801f			; $30  
801f			; org 038h 
801f			; $38 
801f			 
801f			; TODO any more important entry points to add to jump table for easier coding use? 
801f			 
801f			if BASE_KEV = 1  
801f			 
801f				; need to be at $66 for nmi support 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255 
801f				jp nmi 
801f			endif 
801f			 
801f			include "firmware.asm" 
801f			  
801f			; main constants (used here and in firmware)  
801f			  
801f			; TODO have page 0 of storage as bios  
801f			  
801f			Device_A: equ 0h  
801f			Device_B: equ 040h          ; Sound  
801f			  
801f			if BASE_KEV  
801f			Device_C: equ 080h          ; Storage and ext cart devices  
801f			endif  
801f			  
801f			if BASE_SC114  
801f			Device_C: equ  SC103_PIO          ; Storage and ext cart devices  
801f			endif  
801f			  
801f			if BASE_CPM  
801f			; TODO fixup for CPM  
801f			Device_C: equ 080h          ; Storage and ext cart devices  
801f			endif  
801f			  
801f			Device_D: equ 0c0h             ; Keyboard and LCD  
801f			  
801f			; Odd specific debug points for testing hardware dev  
801f			  
801f			;if DEBUG_LEVEL0  
801f			;	include "debug_level0.asm"  
801f			;endif  
801f			;if DEBUG_LEVEL1  
801f			;	include "debug_level1.asm"  
801f			;endif  
801f			;if DEBUG_LEVEL2  
801f			;	include "debug_level2.asm"  
801f			;endif  
801f			  
801f			  
801f			CALLMONITOR: macro  
801f			;	call break_point_state  
801f			; now use the break point debug vector  
801f				call debug_vector  
801f				endm  
801f			  
801f			MALLOC_1: equ 1        ; from dk88   
801f			MALLOC_2: equ 0           ; broke  
801f			MALLOC_3: equ 0           ; really broke  
801f			MALLOC_4: equ 0              ; mine pretty basic reuse and max of 250 chars  
801f			  
801f			if BASE_KEV   
801f			;stacksize: equ 256  
801f			; each stack entry is three bytes (type + word)  
801f			stacksize: equ 3*150  
801f			  
801f			STACK_RET_SIZE: equ 64  
801f			STACK_LOOP_SIZE: equ 128  
801f			STACK_DATA_SIZE: equ 512  
801f			endif  
801f			if BASE_SC114  
801f			;tos:	equ 0f000h  
801f			stacksize: equ 256  
801f			STACK_RET_SIZE: equ 64  
801f			STACK_LOOP_SIZE: equ 128  
801f			STACK_DATA_SIZE: equ 256  
801f			endif  
801f			  
801f			if BASE_CPM  
801f			;tos:	equ 0f000h  
801f			stacksize: equ 256  
801f			STACK_RET_SIZE: equ 64  
801f			STACK_LOOP_SIZE: equ 128  
801f			STACK_DATA_SIZE: equ 256  
801f			endif  
801f			  
801f			;if STORAGE_SE == 0  
801f			STORE_BLOCK_PHY:   equ 64    ; physical block size on storage   64byte on 256k eeprom  
801f			STORE_DEVICE_MAXBLOCKS:  equ  255*2 ; how many blocks are there on this storage device  
801f			;endif  
801f			  
801f			; Block 0 at offset $3b is a flag to decide to offer auto start up - 0 = prompt 1-auto run no prompt 2 - dont run  
801f			  
801f			STORE_0_AUTORUN: equ $20  
801f			  
801f			; Block 0 at offset $20+ holds the file number to run at system startup after the display  
801f			  
801f			STORE_0_AUTOFILE: equ $21  
801f			STORE_0_BANKRUN: equ $23  
801f			STORE_0_FILERUN: equ $24  
801f			  
801f			; Block 0 offsets for settings  
801f			  
801f			; if set then skip prompt for start up and accept all  
801f			  
801f			STORE_0_QUICKSTART: equ $25  
801f			  
801f			; Blocks where directory table is held  
801f			  
801f			; Reducing the number of entries increases the max file size  
801f			  
801f			;STORE_DIR_START: equ 1  
801f			;STORE_DIR_END: equ 33  
801f			  
801f			; Blocks from where file data is stored  
801f			  
801f			;STORE_DATA_START: equ STORE_DIR_END + 1  
801f			  
801f			; Block indicators (<32 are data files)  
801f			  
801f			;STORE_BLOCK_CFG: equ $8f       ; config block  
801f			;STORE_BLOCK_DIRF: equ $8e       ; directory block free  
801f			;STORE_BLOCK_DIRU: equ $8d       ; directory block free  
801f			;STORE_BLOCK_FREE: equ $85       ; data block free  
801f			;STORE_BLOCK_AUTO: equ $89       ; auto start code  
801f			  
801f			  
801f			  
801f			; Directory entry flags  
801f			  
801f			;STORE_DIR_FREE: equ 0  
801f			;STORE_DIR_FILE:  equ 1  
801f			  
801f			; Structure offsets to directory entries  
801f			;STORE_DE_FLAG: equ 0  
801f			;STORE_DE_MAXEXT: equ 1  
801f			;STORE_DE_FILENAME: equ 2  
801f			  
801f			; Structure offsets to block 0  
801f			  
801f			;STORE_BK0_ISFOR: equ 1  
801f			;STORE_BK0_LABEL: equ 3  
801f			  
801f			; memory allocation   
801f			  
801f			chk_stund: equ tos+2           ; underflow check word  
801f			chk_stovr: equ chk_stund-stacksize -2; overflow check word  
801f			  
801f			; keyscan table needs rows x cols buffer  
801f			;key_rows: equ 5     ; TODO move out to mini and maxi + 1 null  
801f			;key_cols: equ 10    ; TODO move out to mini and maxi + 1 null  
801f			  
801f			keyscan_table_row1: equ chk_stovr -key_cols-1  
801f			keyscan_table_row2: equ keyscan_table_row1-key_cols-1  
801f			keyscan_table_row3: equ keyscan_table_row2-key_cols-1  
801f			keyscan_table_row4: equ keyscan_table_row3-key_cols-1  
801f			keyscan_table_row5: equ keyscan_table_row4-key_cols-1  
801f			keyscan_table: equ keyscan_table_row5-(key_cols*key_rows)-1  
801f			keyscan_scancol: equ keyscan_table-key_cols  
801f			;keyscan_table_len: equ key_rows*key_cols  
801f			;keybufptr: equ keyscan_table - 2  
801f			;keysymbol: equ keybufptr - 1  
801f			key_held: equ keyscan_scancol-1	; currently held  
801f			key_held_prev: equ key_held - 1   ; previously held (to detect bounce and cycle of key if required)  
801f			key_repeat_ct: equ key_held_prev - 4 ; timers (two words)  
801f			key_fa: equ key_repeat_ct -1 ;  
801f			key_fb: equ key_fa -1 ;  
801f			key_fc: equ key_fb -1 ;  
801f			key_fd: equ key_fc -1 ;  
801f			key_face_held: equ key_fd - 1   
801f			; flag for enabling/disabling various hardware diag loading via block 0 on bank 1  
801f			  
801f			hardware_config: equ key_face_held - 10  
801f			  
801f			; hardware config switches  
801f			; TODO add bitmasks on includes for hardware  
801f			; high byte for expansion ids  
801f			;     0000 0000  no card inserted  
801f			;     0000 0001  storage card inserted  
801f			;     0000 0010  spi sd card active  
801f			  
801f			;       
801f			; low byte:  
801f			;     0000 0001   4x4 keypad  
801f			;     0000 0010   full keyboard  
801f			;     0000 0011   spi/ext keyboard  
801f			;     0000 0100   20x4 lcd  
801f			;     0000 1000   40x4 lcd  
801f			;     0000 1100   spi/ext display  
801f			;     0001 0000   ide interface available  
801f			  
801f			hardware_word: equ hardware_config - 2  
801f			  
801f			; debug marker - optional display of debug point on the debug screens  
801f			  
801f			nmi_vector:  equ hardware_word - 3   ; vector to the nmi handler  
801f			debug_vector:  equ nmi_vector - 3   ; vector to the debug handler  
801f			  
801f			debug_umark: equ debug_vector - 6  ; current user mark  
801f			debug_mark: equ debug_umark - 4    ; internal word debug points  
801f			  
801f			; input_str vars  
801f			input_ptr:  equ debug_mark - 2    ; ptr to the current cursor position of string currently being edited  on entry starting   
801f			input_start:  equ input_ptr - 2    ; ptr to the start of string   
801f			input_size: equ input_start -1  ; number of chars  
801f			input_display_size: equ input_size -1  ; TODO number of chars that are displayable. if < input_size then scroll   
801f			input_at_pos: equ input_display_size - 1 ; frame buffer offset for start of input  
801f			input_under_cursor: equ input_at_pos - 1 ; char under the cursor so we can blink it  
801f			input_at_cursor: equ input_under_cursor - 1 ; offset of cursor to current start of string  
801f			input_cur_flash: equ input_at_cursor - 2 ;  timeout for cursor flash  
801f			input_cur_onoff: equ input_cur_flash - 1 ;  cursor blink on or off  
801f			input_len: equ input_cur_onoff - 5 ; length of current input  
801f			input_cursor: equ input_len - 5 ; offset of cursor to current start of string  
801f			  
801f			; cursor blink rate  
801f			CUR_BLINK_RATE: equ $09  
801f			;CUR_BLINK_RATE: equ 15  
801f			  
801f			key_actual_pressed: equ input_cursor - 1   
801f			key_symbol: equ key_actual_pressed - 1   
801f			key_shift: equ key_symbol - 1   
801f			  
801f			; Display allocation  
801f			  
801f			;display_rows: equ 4     ; move out to mini and mega files  
801f			;display_cols: equ 20  
801f			  
801f			display_fb_len: equ display_rows*display_cols  
801f			  
801f			; primary frame buffer     
801f			display_fb0: equ  key_shift-display_fb_len -1 ; -display_fb_len-1          ; cli input     TODO why is that doubling up?  
801f			; working frame buffers  
801f			display_fb1: equ  display_fb0-display_fb_len -1 ; -display_fb_len-1          ; default running program  
801f			display_fb3: equ  display_fb1-display_fb_len - 1  
801f			display_fb2: equ  display_fb3-display_fb_len - 1  
801f			;  
801f			; pointer to active frame buffer  
801f			display_fb_active: equ display_fb2 - 2  
801f			display_lcde1e2: equ display_fb_active - 1         ; 0=e1, 1=e2   For E1/E2 selection when using the lcd 4x40 display  
801f			display_write_tmp: equ display_lcde1e2 - 2  
801f			display_active:  equ display_write_tmp-3   ; current state of activity char (plus room to write string)  
801f			  
801f			;  
801f			  
801f			;; can load into de directory  
801f			cursor_col: equ display_active-1  
801f			cursor_row: equ cursor_col-1  
801f			cursor_ptr: equ cursor_row - 1     ;  actual offset into lcd memory for row and col combo  
801f			cursor_shape: equ cursor_ptr - 2   ; char used for the current cursor   
801f			  
801f			; maths vars  
801f			  
801f			LFSRSeed: equ cursor_shape -20   
801f			randData: equ LFSRSeed - 2  
801f			xrandc: equ randData - 2  
801f			stackstore: equ xrandc - 2  
801f			seed1: equ  stackstore -2   
801f			seed2: equ seed1 - 2  
801f			  
801f			; cf storage vars  
801f			  
801f			iErrorNum:  equ seed2-1         ;Error number  
801f			iErrorReg:  equ iErrorNum -1              ;Error register  
801f			iErrorVer:  equ iErrorReg - 1              ;Verify error flag  
801f			  
801f			store_bank_active: equ iErrorVer - (5 + 8 ) 		; TODO not used.  indicator of which storage banks are available to use 5 on board and 8 in cart  
801f			  
801f			STORE_BLOCK_LOG:  equ   280      ; TODO remove.... Logical block size     
801f			  
801f			store_page: equ store_bank_active-STORE_BLOCK_LOG-1            ; bigger than page size for eeprom so we can join multiple blocks if they are continuation records  
801f			;?????store_ffpage: equ store_page-STORE_BLOCK_LOG            ; page size for eeprom?????  
801f			store_readptr: equ store_page-2       ; tracks the file extent during storage_read of continuation blocks  
801f			store_readbuf: equ store_readptr-2       ; tracks the position for the buffer during storage_read of continuation blocks  
801f			store_longread: equ store_readbuf -1 ;   if zero then only read one block. If not zero then do a read for as long as required  
801f			store_tmp1: equ store_longread - 2      ; temp pointer holders during ops  
801f			store_tmp2: equ store_tmp1 - 2        ; temp pointer holders during ops  
801f			store_tmp3: equ store_tmp2 - 2        ; temp pointer holders during ops  
801f			store_tmpid: equ store_tmp3 - 1		; page temp id  
801f			store_tmpext: equ store_tmpid - 1		; file extent temp  
801f			store_readcont: equ store_tmpid - 1		; If current read results in an overflow buffer to next record flag it up  
801f			store_openaddr: equ store_readcont - 2		; file block address of current opened file for read  
801f			store_openext: equ store_openaddr - 1		; file extent of current opened file for read  
801f			store_openmaxext: equ store_openext - 1		; max extent of current opened file for read  
801f			store_filecache: equ store_openmaxext-2   ;  TODO (using just one for now)  file id + extent count cache * 5  
801f			store_tmppageid: equ store_filecache-2    ; phyical page id temp  
801f			;  
801f			; spi vars  
801f			  
801f			  
801f			spi_clktime: equ store_tmppageid - 1      ; holds the number of ms that happens between spi clock pulses  
801f			spi_cartdev: equ spi_clktime - 1      ; holds bit mask to send to portb (ext spi) devices  
801f			spi_cartdev2: equ spi_cartdev - 1      ; holds bit mask to send to portb's shift reg devices  
801f			spi_portbyte: equ spi_cartdev2 - 1      ; holds bit mask to send to spi bus   
801f			spi_device: equ spi_portbyte - 1    ; bit mask to send to porta (eeproms) devices  
801f			spi_device_id: equ spi_device - 1    ; human readable bank number  
801f			  
801f			;;;;; forth cli params  
801f			  
801f			; TODO use a different frame buffer for forth???  
801f			  
801f			f_cursor_ptr:  equ spi_device_id - 1  ; offset into frame buffer for any . or EMIT output  
801f			cli_buffer: equ f_cursor_ptr - 20     ; temp hold - maybe not needed  
801f			cli_origtoken: equ cli_buffer - 2     ; pointer to the text of token for this word being checked  
801f			cli_token: equ cli_origtoken - 2     ; pointer to the text of token for this word being checked  
801f			cli_execword: equ cli_token - 2      ; pointer to start of code for this word  
801f			cli_nextword: equ cli_execword - 2      ; pointer to start of next word in dict  
801f			cli_ptr: equ cli_nextword - 2           ; pointer to start of word to parse by forth kernel (working)  
801f			cli_origptr: equ cli_ptr - 2           ; pointer to start of word to parse which resets cli_ptr on each word test  
801f			  
801f			cli_mvdot: equ cli_origptr - 1 ;     ; true will move the cursor once something is displayed  
801f			cli_autodisplay: equ cli_mvdot - 1 ;     ; true will auto update the display (slow) otherwise need to use DRAW  
801f			cli_var_array: equ cli_autodisplay - ( 10 * 2 ) ; word or string pointer variables using V@0-V@9  
801f			cli_var_array2: equ cli_var_array - ( 26 * 2 ) ; word or string pointer variables using VAR word  
801f			cli_ret_sp: equ cli_var_array2 - 2    ; ret stack pointer  
801f			cli_loop_sp: equ cli_ret_sp - 2   ; data stack pointer  
801f			cli_data_sp: equ cli_loop_sp - 2   ; data stack pointer  
801f			  
801f			chk_ret_und: equ cli_data_sp-2           ; underflow check word  
801f			cli_ret_stack: equ chk_ret_und - STACK_RET_SIZE      ; TODO could I just use normal stack for this? - use linked list for looping  
801f			chk_ret_ovr: equ cli_ret_stack -2; overflow check word  
801f			cli_loop_stack: equ chk_ret_ovr - STACK_LOOP_SIZE      ; TODO could I just use normal stack for this? - use linked list for looping  
801f			chk_loop_ovr: equ cli_loop_stack -2; overflow check word  
801f			cli_data_stack: equ chk_loop_ovr - STACK_DATA_SIZE		 ;   
801f			chk_data_ovr: equ cli_data_stack -2; overflow check word  
801f			  
801f			os_var_array: equ chk_data_ovr - (32 * 2)      ;   32 word array for use using the SCRATCH word  
801f			  
801f			; os/forth token vars  
801f			  
801f			os_last_cmd: equ os_var_array-255  
801f			os_cli_cmd: equ os_last_cmd-255              ; cli command entry line  
801f			os_current_i: equ os_cli_cmd-2  
801f			os_cur_ptr: equ os_current_i-2  
801f			os_word_scratch: equ os_cur_ptr-30  
801f			os_tok_len: equ os_word_scratch - 2  
801f			os_tok_ptr: equ os_tok_len - 2               ; our current PC ptr  
801f			os_tok_malloc: equ os_tok_ptr - 2  
801f			os_last_new_uword: equ os_tok_malloc - 2    ; hold start of last user word added  
801f			os_input: equ os_last_new_uword-255    ; buffer for EDIT word  
801f			execscratch: equ os_input-255        ; exec cmd eval buffer  
801f			scratch: equ execscratch-255  
801f			  
801f			os_stack_1: equ scratch - 3       ; stack holding area 1  
801f			os_stack_2: equ os_stack_1 - 3       ; stack holding area 2  
801f			os_stack_3: equ os_stack_2 - 3       ; stack holding area 3  
801f			os_stack_4: equ os_stack_3 - 3       ; stack holding area 4  
801f			  
801f			  
801f			; temp locations for new word processing to save on adding more   
801f			  
801f			os_new_malloc: equ os_stack_4-2  
801f			os_new_parse_len: equ os_new_malloc - 2  
801f			os_new_word_len: equ os_new_parse_len - 2  
801f			os_new_work_ptr: equ os_new_word_len - 2  
801f			os_new_src_ptr: equ os_new_work_ptr - 2  
801f			os_new_exec: equ os_new_src_ptr - 2  
801f			os_new_exec_ptr: equ os_new_exec - 2  
801f			  
801f			; resume memory alloocations....  
801f			  
801f			;os_view_disable: equ os_new_exec_ptr - 1  
801f			os_view_af: equ os_new_exec_ptr - 2  
801f			os_view_hl: equ os_view_af -2  
801f			os_view_de: equ os_view_hl - 2  
801f			os_view_bc: equ os_view_de - 2  
801f			  
801f			; stack checksum word  
801f			if DEBUG_STACK_IMB  
801f				curframe: equ  os_view_de - 5  
801f				store_sp: equ curframe - (STACK_IMB_STORE*4)  
801f				chk_word: equ store_sp - 2		 ; this is the word to init and then check against to detect stack corruption. Held far away from all stacks  
801f			else  
801f				chk_word: equ os_view_bc - 2		 ; this is the word to init and then check against to detect stack corruption. Held far away from all stacks  
801f			endif  
801f			  
801f			; with data stack could see memory filled with junk. need some memory management   
801f			; malloc and free entry points added  
801f			  
801f			;free_list:  equ chk_word - 4     ; Block struct for start of free list (MUST be 4 bytes)  
801f			;heap_size: equ  (free_list-08100h)      ; Number of bytes available in heap   TODO make all of user ram  
801f			;;heap_start: equ free_list - heap_size  ; Starting address of heap  
801f			;heap_end: equ free_list-1  ; Starting address of heap  
801f			;heap_start: equ free_list - heap_size  ; Starting address of heap  
801f			  
801f			;heap_start: equ free_list - heap_size  ; Starting address of heap  
801f			heap_end: equ chk_word-1  ; Starting address of heap  
801f			  
801f			  
801f			;if BASE_KEV   
801f			;heap_start: equ 0800eh  ; Starting address of heap  
801f			;free_list:  equ 0800ah      ; Block struct for start of free list (MUST be 4 bytes)  
801f			;heap_size: equ  heap_end-heap_start      ; Number of bytes available in heap   TODO make all of user ram  
801f			;endif  
801f			  
801f			;if BASE_SC114  
801f			;heap_start: equ baseram+15  ; Starting address of heap  
801f			;free_list:  equ baseram+10      ; Block struct for start of free list (MUST be 4 bytes)  
801f			;endif  
801f			  
801f			  
801f			;;;;  
801f			  
801f			  
801f			; change below to point to last memory alloc above  
801f			topusermem:  equ   heap_start  
801f			  
801f			;if BASE_KEV   
801f			;baseusermem: equ 08000h  
801f			;endif  
801f			  
801f			;if BASE_SC114  
801f			;;aseusermem:     equ    12  
801f			;baseusermem:     equ    prompt  
801f			;;baseusermem:     equ    endofcode  
801f			;endif  
801f			  
801f			  
801f			; **********************************************************************  
801f			; **  Constants  
801f			; **********************************************************************  
801f			  
801f			; Constants used by this code module  
801f			kDataReg:   EQU Device_D           ;PIO port A data register  
801f			kContReg:   EQU Device_D+2           ;PIO port A control register  
801f			  
801f			  
801f			portbdata:  equ Device_D+1    ; port b data  
801f			portbctl:   equ Device_D+3    ; port b control  
801f			  
801f			  
801f			;KEY_SHIFT:   equ 5  
801f			;KEY_SYMBOLSHIFT:  equ 6  
801f			  
801f			KEY_SHIFTLOCK: equ 4  
801f			  
801f			  
801f			KEY_UP: equ 5  
801f			KEY_NEXTWORD: equ 6  
801f			KEY_PREVWORD: equ 7  
801f			KEY_BS: equ 8  
801f			KEY_TAB:  equ 9  
801f			KEY_DOWN: equ 10  
801f			KEY_LEFT: equ 11  
801f			KEY_RIGHT: equ 12  
801f			KEY_CR:   equ 13  
801f			KEY_HOME: equ 14  
801f			KEY_END: equ 15  
801f			  
801f			KEY_F1: equ 16  
801f			KEY_F2: equ 17  
801f			KEY_F3: equ 18  
801f			KEY_F4: equ 19  
801f			  
801f			KEY_F5: equ 20  
801f			KEY_F6: equ 21  
801f			KEY_F7: equ 22  
801f			KEY_F8: equ 23  
801f			  
801f			KEY_F9: equ 24  
801f			KEY_F10: equ 25  
801f			KEY_F11: equ 26  
801f			KEY_F12: equ 27  
801f			  
801f			;if DEBUG_KEY  
801f			;	KEY_MATRIX_NO_PRESS: equ '.'  
801f			;	KEY_SHIFT:   equ '.'  
801f			;	KEY_SYMBOLSHIFT:  equ '.'  
801f			;else  
801f				KEY_SHIFT:   equ '~'  
801f				KEY_SYMBOLSHIFT:  equ '~'  
801f				KEY_MATRIX_NO_PRESS: equ '~'  
801f			;endi  
801f			  
801f			  
801f			  
801f			  
801f			; Macro to make adding debug marks easier  
801f			  
801f			DMARK: macro str  
801f				push af  
801f				ld a, (.dmark)  
801f				ld (debug_mark),a  
801f				ld a, (.dmark+1)  
801f				ld (debug_mark+1),a  
801f				ld a, (.dmark+2)  
801f				ld (debug_mark+2),a  
801f				jr .pastdmark  
801f			.dmark: db str  
801f			.pastdmark: pop af  
801f			  
801f			endm  
801f			  
801f			  
801f			; macro to detect for stack imbalances  
801f			  
801f			include "stackimbal.asm"  
801f			; Macro and code to detect stock imbalances 
801f			 
801f			SPPUSH: equ 0 
801f			 
801f			; Add a stack frame which can be checked before return 
801f			 
801f			STACKFRAME: macro onoff frame1 frame2 
801f			 
801f				if DEBUG_STACK_IMB 
801f					if onoff 
801f						; save current SP 
801f						exx 
801f			 
801f						ld de, frame1 
801f						ld a, d 
801f						ld hl, curframe 
801f						call hexout 
801f						ld a, e 
801f						ld hl, curframe+2 
801f						call hexout 
801f			  
801f						ld hl, frame1 
801f						push hl 
801f						ld hl, frame2 
801f						push hl 
801f						exx 
801f					endif 
801f					 
801f				endif 
801f			endm 
801f			 
801f			STACKFRAMECHK: macro onoff frame1 frame2 
801f			 
801f					 
801f				if DEBUG_STACK_IMB 
801f					if onoff 
801f						exx 
801f						; check stack frame SP 
801f			 
801f						ld hl, frame2 
801f						pop de   ; frame2 
801f			 
801f						call cmp16 
801f						jr nz, .spnosame 
801f						 
801f			 
801f						ld hl, frame1 
801f						pop de   ; frame1 
801f			 
801f						call cmp16 
801f						jr z, .spfrsame 
801f			 
801f						.spnosame: call showsperror 
801f			 
801f						.spfrsame: nop 
801f			 
801f						exx 
801f					endif 
801f					 
801f				endif 
801f			 
801f			 
801f			endm 
801f			 
801f			 
801f			; for a sub routine, wrap SP collection and comparisons 
801f			 
801f			; Usage: 
801f			; 
801f			; SAVESP ON/OFF 0-STACK_IMB_STORE/4 
801f			; CHECKSP ON/OFF 0-STACK_IMB_STORE/4 
801f			 
801f			SAVESP: macro onoff storeword 
801f			 
801f				if DEBUG_STACK_IMB 
801f					if onoff 
801f						; save current SP 
801f			 
801f						ld (store_sp+(storeword*4)), sp 
801f			 
801f					endif 
801f					 
801f				endif 
801f			 
801f			endm 
801f			 
801f			CHECKSP: macro onoff storeword 
801f			 
801f				if DEBUG_STACK_IMB 
801f					if onoff 
801f			 
801f						; save SP after last save 
801f				 
801f						ld (store_sp+(storeword*4)+2), sp 
801f			 
801f						push hl 
801f						ld hl, store_sp+(storeword*4) 
801f						call check_stack_sp  
801f						pop hl 
801f			 
801f			 
801f					endif 
801f					 
801f				endif 
801f			 
801f			endm 
801f			 
801f			if DEBUG_STACK_IMB 
801f			 
801f			check_stack_sp: 
801f					push de 
801f			 
801f					ld e, (hl) 
801f					inc hl 
801f					ld d, (hl) 
801f					inc hl 
801f			 
801f					push de 
801f			 
801f			 
801f					ld e, (hl) 
801f					inc hl 
801f					ld d, (hl) 
801f					inc hl 
801f			 
801f					pop hl 
801f			 
801f			 
801f					; check to see if the same 
801f			 
801f					call cmp16 
801f					jr z, .spsame 
801f			 
801f					; not same 
801f			 
801f					call showsperror 
801f			.spsame: 
801f			 
801f					pop de 
801f			 
801f					ret 
801f			 
801f			.sperr:  db "Stack imbalance",0 
801f			 
801f			 
801f			showsperror: 
801f			 
801f			 
801f				push hl 
801f				push af 
801f				push de 
801f				call clear_display 
801f				ld de, .sperr 
801f				ld a,0 
801f			;	ld de,os_word_scratch 
801f				call str_at_display 
801f				ld a, display_row_1+17 
801f				ld de, debug_mark 
801f				call str_at_display 
801f				ld a, 0 
801f				ld (curframe+4),a 
801f				ld hl, curframe 
801f				ld de, os_word_scratch 
801f				ld a, display_row_4 
801f				call str_at_display 
801f				call update_display 
801f				;call break_point_state 
801f				call cin_wait 
801f			 
801f			;	ld a, ' ' 
801f			;	ld (os_view_disable), a 
801f				call bp_on 
801f				pop de	 
801f				pop af 
801f				pop hl 
801f				CALLMONITOR 
801f				ret 
801f			 
801f			endif 
801f			 
801f			 
801f			 
801f			; eof 
# End of file stackimbal.asm
801f			  
801f			;TODO macro to calc col and row offset into screen  
801f			  
801f			  
801f			  
801f			hardware_init:  
801f			  
801f				  
801f			  
801f					;ld a, 0  
801f					;ld (hardware_diag), a  
801f			  
801f					; clear all the buffers  
801f			  
801f 21 0a ed				ld hl, display_fb1  
8022 22 c6 eb				ld (display_fb_active), hl  
8025			  
8025 cd bd 8a				call clear_display  
8028			  
8028 21 c8 eb				ld hl, display_fb2  
802b 22 c6 eb				ld (display_fb_active), hl  
802e			  
802e cd bd 8a				call clear_display  
8031			  
8031					; init primary frame buffer area  
8031 21 ab ed				ld hl, display_fb0  
8034 22 c6 eb				ld (display_fb_active), hl  
8037			  
8037 cd bd 8a				call clear_display  
803a			  
803a			  
803a cd fe df				call lcd_init		; lcd hardware first as some screen functions called during key_init e.g. cursor shapes  
803d			  
803d cd a0 e0			call key_init  
8040 cd ad 80			call storage_init  
8043			  
8043				; setup malloc functions  
8043			  
8043				if MALLOC_1  
8043 cd a1 90				call  heap_init  
8046				endif  
8046				if MALLOC_4  
8046					call  heap_init  
8046				endif  
8046			  
8046				; init sound hardware if present  
8046			  
8046				if SOUND_ENABLE  
8046					call sound_init  
8046				endif  
8046			  
8046				; lcd test sequence  
8046					  
8046 cd e0 8a			call update_display  
8049 cd 00 8a			call delay1s  
804c 3e 2b			ld a,'+'  
804e cd c2 8a			call fill_display  
8051 cd e0 8a			call update_display  
8054 cd 00 8a			call delay1s  
8057 3e 2a			ld a,'*'  
8059 cd c2 8a			call fill_display  
805c cd e0 8a			call update_display  
805f cd 00 8a			call delay1s  
8062 3e 2d			ld a,'-'  
8064 cd c2 8a			call fill_display  
8067 cd e0 8a			call update_display  
806a cd 00 8a			call delay1s  
806d			  
806d			; boot splash screen  
806d			if display_cols == 20	  
806d			        ld a, display_row_1    
806d			else  
806d 3e 0a		        ld a, display_row_1 +10   
806f			endif  
806f 11 cf 95			ld de, prom_bootmsg  
8072 cd d0 8a			call str_at_display  
8075 cd e0 8a			call update_display  
8078			  
8078			  
8078 cd 00 8a			call delay1s  
807b cd 00 8a			call delay1s  
807e			if display_cols == 20	  
807e			            LD   A, display_row_3+2  
807e			else  
807e 3e 5c		            LD   A, display_row_3+12  
8080			endif  
8080 11 e4 95			ld de, prom_bootmsg1  
8083 cd d0 8a			call str_at_display  
8086			; display debug level  
8086 3e 78		            LD   A, display_row_4  
8088 11 1b 80			ld de, debuglevel  
808b cd d0 8a			call str_at_display  
808e			  
808e cd e0 8a			call update_display  
8091 cd 00 8a			call delay1s  
8094 cd 00 8a			call delay1s  
8097			  
8097			;	ld a, display_row_4+3  
8097			;	ld de, bootmsg2  
8097			;	call str_at_display  
8097			;	call update_display  
8097			;	call delay1s  
8097			;	call delay1s  
8097			  
8097			; debug mark setup  
8097			  
8097 3e 5f		ld a, '_'  
8099 32 65 ee		ld (debug_mark),a  
809c 32 66 ee		ld (debug_mark+1),a  
809f 32 67 ee		ld (debug_mark+2),a  
80a2 3e 00		ld a,0  
80a4 32 68 ee		ld (debug_mark+3),a  
80a7 32 69 ee		ld (debug_umark),a  
80aa			  
80aa c9					ret  
80ab			  
80ab			  
80ab			;bootmsg2:	db "Firmware v0.1",0  
80ab			  
80ab			; a 4x20 lcd  
80ab			; cout for display, low level positioning and writing functions (TODO) for hardware abstraction  
80ab			  
80ab			;if display_cols == 20  
80ab			;	include "firmware_lcd_4x20.asm"  
80ab			;endif  
80ab			  
80ab			;if display_cols == 40  
80ab			;	include "firmware_lcd_4x40.asm"  
80ab			;endif  
80ab			  
80ab			;  
80ab			; TODO use the low spare two pins on port a of display pio to bit bang a serial out video display to an esp  
80ab			; TODO abstract the bit bang video out interface for dual display  
80ab			; TODO wire video out to tx pin on rc2014 bus  
80ab			  
80ab			; must supply cin, and cin_wait for low level hardware abstraction   
80ab			; moved text_input entry points to here and leave the firmware hardware modules as abstraction layer  
80ab			; test scancode  
80ab			  
80ab			;;;;;  
80ab			;;;  
80ab			; Moved out to mini and maxi versions  
80ab			;  
80ab			; include "firmware_key_4x4.asm"  
80ab			; using existing 4 wire x 4 resistor array for input  
80ab			;include "firmware_key_4x10.asm"  
80ab			; need to mod the board for 5 rows due to resistor array  
80ab			;include "firmware_key_5x10.asm"  
80ab			  
80ab			; storage hardware interface  
80ab			  
80ab			; use microchip serial eeprom for storage  
80ab			  
80ab			  
80ab			if STORAGE_SE  
80ab				include "firmware_spi.asm"  
80ab				include "firmware_seeprom.asm"  
80ab			else  
80ab			   ; create some stubs for the labels  
80ab c9			se_readbyte: ret  
80ac c9			se_writebyte: ret  
80ad c9			storage_init: ret  
80ae			  
80ae			endif  
80ae			  
80ae			; use cf card for storage - throwing timeout errors. Hardware or software?????  
80ae			;include "firmware_cf.asm"  
80ae			  
80ae			; load up high level storage hardward abstractions  
80ae			include "firmware_storage.asm"  
80ae			 
80ae			; persisent storage hardware abstraction layer  
80ae			 
80ae			 
80ae			 
80ae			; Block 0 on storage is a config state 
80ae			 
80ae			 
80ae			 
80ae			; TODO add read phy block and write phy block functions 
80ae			; TODO add presence check (i.e. read write byte 0 of block 0 for eeprom) 
80ae			 
80ae			; Abstraction layer  
80ae			 
80ae			; Logocial block size is same size as physical size - using tape concept 
80ae			 
80ae			;STORE_BLOCK_PHY2LOG: equ (STORE_BLOCK_LOG/STORE_BLOCK_PHY)       ; How many physical blocks make up a logical block 
80ae			;STORE_BLOCK_MAX: equ (STORE_BLOCK_PHY*STORE_DEVICE_MAXBLOCKS)/255    ; Max number of logical blocks on the device 
80ae			 
80ae			 
80ae			 
80ae			; Filesystem layout (Logical layout) 
80ae			; 
80ae			; Block 0 - Bank config  
80ae			; 
80ae			;      Byte - 0 file id counter 
80ae			;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
80ae			;      Byte - 3-20 zero terminated bank label 
80ae			; 
80ae			; Block 1 > File storage 
80ae			; 
80ae			;      Byte 0 file id    - block 0 file details 
80ae			;      Byte 1 block id - block 0 is file  
80ae			;            Byte 2-15 - File name 
80ae			; 
80ae			;       - to end of block data 
80ae			; 
80ae			 
80ae			; Get ID for the file named in pointer held HL 
80ae			; Returns ID in HL = 255 if no file found 
80ae			 
80ae			storage_getid: 
80ae			 
80ae 22 6d ea			ld (store_tmp1), hl 
80b1			 
80b1				if DEBUG_STORESE 
80b1					DMARK "SGI" 
80b1 f5				push af  
80b2 3a c6 80			ld a, (.dmark)  
80b5 32 65 ee			ld (debug_mark),a  
80b8 3a c7 80			ld a, (.dmark+1)  
80bb 32 66 ee			ld (debug_mark+1),a  
80be 3a c8 80			ld a, (.dmark+2)  
80c1 32 67 ee			ld (debug_mark+2),a  
80c4 18 03			jr .pastdmark  
80c6 ..			.dmark: db "SGI"  
80c9 f1			.pastdmark: pop af  
80ca			endm  
# End of macro DMARK
80ca					CALLMONITOR 
80ca cd 6f ee			call debug_vector  
80cd				endm  
# End of macro CALLMONITOR
80cd				endif 
80cd				; get block 0 and set counter for number of files to scan 
80cd			 
80cd cd 38 82			call storage_get_block_0 
80d0			 
80d0 3a 74 ea			ld a, (store_page) 
80d3 47				ld b, a 
80d4			 
80d4				; get extent 0 of each file id 
80d4			 
80d4				if DEBUG_STORESE 
80d4					DMARK "SGc" 
80d4 f5				push af  
80d5 3a e9 80			ld a, (.dmark)  
80d8 32 65 ee			ld (debug_mark),a  
80db 3a ea 80			ld a, (.dmark+1)  
80de 32 66 ee			ld (debug_mark+1),a  
80e1 3a eb 80			ld a, (.dmark+2)  
80e4 32 67 ee			ld (debug_mark+2),a  
80e7 18 03			jr .pastdmark  
80e9 ..			.dmark: db "SGc"  
80ec f1			.pastdmark: pop af  
80ed			endm  
# End of macro DMARK
80ed					CALLMONITOR 
80ed cd 6f ee			call debug_vector  
80f0				endm  
# End of macro CALLMONITOR
80f0				endif 
80f0 60			.getloop:	ld h, b 
80f1 2e 00				ld l, 0 
80f3 c5					push bc 
80f4			 
80f4 11 74 ea				ld de, store_page 
80f7				if DEBUG_STORESE 
80f7					DMARK "SGr" 
80f7 f5				push af  
80f8 3a 0c 81			ld a, (.dmark)  
80fb 32 65 ee			ld (debug_mark),a  
80fe 3a 0d 81			ld a, (.dmark+1)  
8101 32 66 ee			ld (debug_mark+1),a  
8104 3a 0e 81			ld a, (.dmark+2)  
8107 32 67 ee			ld (debug_mark+2),a  
810a 18 03			jr .pastdmark  
810c ..			.dmark: db "SGr"  
810f f1			.pastdmark: pop af  
8110			endm  
# End of macro DMARK
8110					CALLMONITOR 
8110 cd 6f ee			call debug_vector  
8113				endm  
# End of macro CALLMONITOR
8113				endif 
8113 cd e0 86				call storage_read 
8116 cd 13 8d				call ishlzero 
8119 28 2d				jr z, .gap 
811b					 
811b					; have a file name read. Is it one we want. 
811b			 
811b 2a 6d ea				ld hl, (store_tmp1) 
811e 11 77 ea				ld de, store_page+3   ; file name 
8121			 
8121				if DEBUG_STORESE 
8121					DMARK "SGc" 
8121 f5				push af  
8122 3a 36 81			ld a, (.dmark)  
8125 32 65 ee			ld (debug_mark),a  
8128 3a 37 81			ld a, (.dmark+1)  
812b 32 66 ee			ld (debug_mark+1),a  
812e 3a 38 81			ld a, (.dmark+2)  
8131 32 67 ee			ld (debug_mark+2),a  
8134 18 03			jr .pastdmark  
8136 ..			.dmark: db "SGc"  
8139 f1			.pastdmark: pop af  
813a			endm  
# End of macro DMARK
813a					CALLMONITOR 
813a cd 6f ee			call debug_vector  
813d				endm  
# End of macro CALLMONITOR
813d				endif 
813d cd 88 90				call strcmp 
8140 20 06				jr nz, .gap   ; not this one 
8142			 
8142 c1				        pop bc 
8143			 
8143 26 00				ld h, 0 
8145 68					ld l, b 
8146 18 22				jr .getdone 
8148						 
8148			 
8148			 
8148			 
8148			.gap: 
8148				if DEBUG_STORESE 
8148					DMARK "SGg" 
8148 f5				push af  
8149 3a 5d 81			ld a, (.dmark)  
814c 32 65 ee			ld (debug_mark),a  
814f 3a 5e 81			ld a, (.dmark+1)  
8152 32 66 ee			ld (debug_mark+1),a  
8155 3a 5f 81			ld a, (.dmark+2)  
8158 32 67 ee			ld (debug_mark+2),a  
815b 18 03			jr .pastdmark  
815d ..			.dmark: db "SGg"  
8160 f1			.pastdmark: pop af  
8161			endm  
# End of macro DMARK
8161					CALLMONITOR 
8161 cd 6f ee			call debug_vector  
8164				endm  
# End of macro CALLMONITOR
8164				endif 
8164			 
8164 c1					pop bc 
8165 10 89				djnz .getloop 
8167 21 ff 00				ld hl, 255 
816a			.getdone: 
816a			 
816a				if DEBUG_STORESE 
816a					DMARK "SGe" 
816a f5				push af  
816b 3a 7f 81			ld a, (.dmark)  
816e 32 65 ee			ld (debug_mark),a  
8171 3a 80 81			ld a, (.dmark+1)  
8174 32 66 ee			ld (debug_mark+1),a  
8177 3a 81 81			ld a, (.dmark+2)  
817a 32 67 ee			ld (debug_mark+2),a  
817d 18 03			jr .pastdmark  
817f ..			.dmark: db "SGe"  
8182 f1			.pastdmark: pop af  
8183			endm  
# End of macro DMARK
8183					CALLMONITOR 
8183 cd 6f ee			call debug_vector  
8186				endm  
# End of macro CALLMONITOR
8186				endif 
8186			 
8186 c9				ret 
8187			 
8187			 
8187			 
8187			 
8187			 
8187			 
8187			 
8187			 
8187			; Read Block 
8187			; ---------- 
8187			; 
8187			; With current bank 
8187			;  
8187			; Get block number to read 
8187			; Load physical blocks starting at start block into buffer 
8187			 
8187			; de points to buffer to use 
8187			; hl holds logical block number  
8187			 
8187			storage_read_block: 
8187			 
8187				; TODO bank selection 
8187			 
8187				; for each of the physical blocks read it into the buffer 
8187 06 40			ld b, STORE_BLOCK_PHY 
8189			 
8189				if DEBUG_STORESE 
8189 d5					push de 
818a				endif 
818a				 
818a			.rl1:    
818a			 
818a				; read physical block at hl into de 
818a			        ; increment hl and de to next read position on exit 
818a			 
818a e5				push hl 
818b d5				push de	 
818c c5				push bc 
818d			;	if DEBUG_STORESE 
818d			;		push af 
818d			;		ld a, 'R' 
818d			;		ld (debug_mark),a 
818d			;		pop af 
818d			;		CALLMONITOR 
818d			;	endif 
818d cd ab 80			call se_readbyte 
8190			;	if DEBUG_STORESE 
8190			;		ld a,(spi_portbyte) 
8190			;		ld l, a 
8190			;		push af 
8190			;		ld a, '1' 
8190			;		ld (debug_mark),a 
8190			;		pop af 
8190			;		CALLMONITOR 
8190			;	endif 
8190 c1				pop bc 
8191 d1				pop de 
8192 e1				pop hl 
8193 12				ld (de),a 
8194 23				inc hl 
8195 13				inc de 
8196			 
8196			;	if DEBUG_STORESE 
8196			;		push af 
8196			;		ld a, 'r' 
8196			;		ld (debug_mark),a 
8196			;		pop af 
8196			;		CALLMONITOR 
8196			;	endif 
8196			 
8196 10 f2			djnz .rl1 
8198			 
8198				if DEBUG_STORESE 
8198					DMARK "SRB" 
8198 f5				push af  
8199 3a ad 81			ld a, (.dmark)  
819c 32 65 ee			ld (debug_mark),a  
819f 3a ae 81			ld a, (.dmark+1)  
81a2 32 66 ee			ld (debug_mark+1),a  
81a5 3a af 81			ld a, (.dmark+2)  
81a8 32 67 ee			ld (debug_mark+2),a  
81ab 18 03			jr .pastdmark  
81ad ..			.dmark: db "SRB"  
81b0 f1			.pastdmark: pop af  
81b1			endm  
# End of macro DMARK
81b1 d1					pop de 
81b2			; 
81b2			;		push af 
81b2			;		ld a, 'R' 
81b2			;		ld (debug_mark),a 
81b2			;		pop af 
81b2					CALLMONITOR 
81b2 cd 6f ee			call debug_vector  
81b5				endm  
# End of macro CALLMONITOR
81b5				endif 
81b5 c9				ret	 
81b6				 
81b6			 
81b6			; File Size 
81b6			; --------- 
81b6			; 
81b6			;   hl file id 
81b6			; 
81b6			;  returns in hl the number of blocks 
81b6			 
81b6			storage_file_size: 
81b6 5d				ld e, l 
81b7 16 00			ld d, 0 
81b9 21 40 00			ld hl, STORE_BLOCK_PHY 
81bc					if DEBUG_FORTH_WORDS 
81bc						DMARK "SIZ" 
81bc f5				push af  
81bd 3a d1 81			ld a, (.dmark)  
81c0 32 65 ee			ld (debug_mark),a  
81c3 3a d2 81			ld a, (.dmark+1)  
81c6 32 66 ee			ld (debug_mark+1),a  
81c9 3a d3 81			ld a, (.dmark+2)  
81cc 32 67 ee			ld (debug_mark+2),a  
81cf 18 03			jr .pastdmark  
81d1 ..			.dmark: db "SIZ"  
81d4 f1			.pastdmark: pop af  
81d5			endm  
# End of macro DMARK
81d5						CALLMONITOR 
81d5 cd 6f ee			call debug_vector  
81d8				endm  
# End of macro CALLMONITOR
81d8					endif 
81d8 cd ba 84			call storage_findnextid 
81db			 
81db cd 13 8d			call ishlzero 
81de			;	ld a, l 
81de			;	add h 
81de			;	cp 0 
81de c8				ret z			; block not found so EOF 
81df			 
81df 11 74 ea			ld de, store_page 
81e2 cd 87 81			call storage_read_block 
81e5			 
81e5 3a 76 ea			ld a, (store_page+2)	 ; get extent count 
81e8 6f				ld l, a 
81e9 26 00			ld h, 0 
81eb c9			 	ret 
81ec			 
81ec			 
81ec			; Write Block 
81ec			; ----------- 
81ec			; 
81ec			; With current bank 
81ec			;  
81ec			; Get block number to write 
81ec			; Write physical blocks starting at start block from buffer 
81ec			  
81ec			storage_write_block: 
81ec				; TODO bank selection 
81ec			 
81ec				; for each of the physical blocks read it into the buffer 
81ec 06 40			ld b, STORE_BLOCK_PHY 
81ee			 
81ee				if DEBUG_STORESE 
81ee					DMARK "SWB" 
81ee f5				push af  
81ef 3a 03 82			ld a, (.dmark)  
81f2 32 65 ee			ld (debug_mark),a  
81f5 3a 04 82			ld a, (.dmark+1)  
81f8 32 66 ee			ld (debug_mark+1),a  
81fb 3a 05 82			ld a, (.dmark+2)  
81fe 32 67 ee			ld (debug_mark+2),a  
8201 18 03			jr .pastdmark  
8203 ..			.dmark: db "SWB"  
8206 f1			.pastdmark: pop af  
8207			endm  
# End of macro DMARK
8207			 
8207					;push af 
8207					;ld a, 'W' 
8207					;ld (debug_mark),a 
8207					;pop af 
8207					CALLMONITOR 
8207 cd 6f ee			call debug_vector  
820a				endm  
# End of macro CALLMONITOR
820a				endif 
820a			 
820a			; might not be working 
820a			;	call se_writepage 
820a			 
820a			;	ret 
820a			; 
820a			 
820a			 
820a			 
820a			.wl1:    
820a			 
820a				; read physical block at hl into de 
820a			        ; increment hl and de to next read position on exit 
820a			 
820a e5				push hl 
820b d5				push de	 
820c c5				push bc 
820d 1a				ld a,(de) 
820e				;if DEBUG_STORESE 
820e			;		push af 
820e			;		ld a, 'W' 
820e			;		ld (debug_mark),a 
820e			;		pop af 
820e			;		CALLMONITOR 
820e			;	endif 
820e cd ac 80			call se_writebyte 
8211			;	call delay250ms 
8211 00				nop 
8212 00				nop 
8213 00				nop 
8214			;	if DEBUG_STORESE 
8214			;		push af 
8214			;		ld a, 'w' 
8214			;		ld (debug_mark),a 
8214			;		pop af 
8214			;		CALLMONITOR 
8214			;	endif 
8214 c1				pop bc 
8215 d1				pop de 
8216 e1				pop hl 
8217 23				inc hl 
8218 13				inc de 
8219			 
8219			 
8219 10 ef			djnz .wl1 
821b			 
821b				if DEBUG_STORESE 
821b					DMARK "SW2" 
821b f5				push af  
821c 3a 30 82			ld a, (.dmark)  
821f 32 65 ee			ld (debug_mark),a  
8222 3a 31 82			ld a, (.dmark+1)  
8225 32 66 ee			ld (debug_mark+1),a  
8228 3a 32 82			ld a, (.dmark+2)  
822b 32 67 ee			ld (debug_mark+2),a  
822e 18 03			jr .pastdmark  
8230 ..			.dmark: db "SW2"  
8233 f1			.pastdmark: pop af  
8234			endm  
# End of macro DMARK
8234			 
8234					;push af 
8234					;ld a, 'W' 
8234					;ld (debug_mark),a 
8234					;pop af 
8234					CALLMONITOR 
8234 cd 6f ee			call debug_vector  
8237				endm  
# End of macro CALLMONITOR
8237				endif 
8237 c9				ret	 
8238			 
8238			; Init bank 
8238			; --------- 
8238			; 
8238			; With current bank 
8238			; 
8238			; Setup block 0 config 
8238			;     Set 0 file id counter 
8238			;     Set formatted byte pattern 
8238			;     Zero out bank label 
8238			;      
8238			; For every logical block write 0-1 byte as null 
8238			 
8238			storage_get_block_0: 
8238			 
8238				; TODO check presence 
8238			 
8238				; get block 0 config 
8238			 
8238 21 00 00			ld hl, 0 
823b 11 74 ea			ld de, store_page 
823e cd 87 81			call storage_read_block 
8241			 
8241				if DEBUG_STORESE 
8241					DMARK "SB0" 
8241 f5				push af  
8242 3a 56 82			ld a, (.dmark)  
8245 32 65 ee			ld (debug_mark),a  
8248 3a 57 82			ld a, (.dmark+1)  
824b 32 66 ee			ld (debug_mark+1),a  
824e 3a 58 82			ld a, (.dmark+2)  
8251 32 67 ee			ld (debug_mark+2),a  
8254 18 03			jr .pastdmark  
8256 ..			.dmark: db "SB0"  
8259 f1			.pastdmark: pop af  
825a			endm  
# End of macro DMARK
825a 11 74 ea				ld de, store_page 
825d			;		push af 
825d			;		ld a, 'i' 
825d			;		ld (debug_mark),a 
825d			;		pop af 
825d					CALLMONITOR 
825d cd 6f ee			call debug_vector  
8260				endm  
# End of macro CALLMONITOR
8260				endif 
8260			 
8260				; is this area formatted? 
8260			 
8260			;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
8260 2a 75 ea			ld hl, (store_page+1) 
8263 3e 80			ld a,0x80 
8265 bd				cp l 
8266 20 22			jr nz, .ininotformatted 
8268				; do a double check 
8268 3e 27			ld a, 0x27 
826a bc				cp h 
826b 20 1d			jr nz, .ininotformatted 
826d			 
826d				; formatted then 
826d			 
826d				if DEBUG_STORESE 
826d					DMARK "SB1" 
826d f5				push af  
826e 3a 82 82			ld a, (.dmark)  
8271 32 65 ee			ld (debug_mark),a  
8274 3a 83 82			ld a, (.dmark+1)  
8277 32 66 ee			ld (debug_mark+1),a  
827a 3a 84 82			ld a, (.dmark+2)  
827d 32 67 ee			ld (debug_mark+2),a  
8280 18 03			jr .pastdmark  
8282 ..			.dmark: db "SB1"  
8285 f1			.pastdmark: pop af  
8286			endm  
# End of macro DMARK
8286					;push af 
8286					;ld a, 'I' 
8286					;ld (debug_mark),a 
8286					;pop af 
8286					CALLMONITOR 
8286 cd 6f ee			call debug_vector  
8289				endm  
# End of macro CALLMONITOR
8289				endif 
8289 c9				ret 
828a			 
828a			.ininotformatted: 
828a				; bank not formatted so poke various bits to make sure 
828a			 
828a				if DEBUG_STORESE 
828a					DMARK "SB2" 
828a f5				push af  
828b 3a 9f 82			ld a, (.dmark)  
828e 32 65 ee			ld (debug_mark),a  
8291 3a a0 82			ld a, (.dmark+1)  
8294 32 66 ee			ld (debug_mark+1),a  
8297 3a a1 82			ld a, (.dmark+2)  
829a 32 67 ee			ld (debug_mark+2),a  
829d 18 03			jr .pastdmark  
829f ..			.dmark: db "SB2"  
82a2 f1			.pastdmark: pop af  
82a3			endm  
# End of macro DMARK
82a3					;push af 
82a3					;ld a, 'f' 
82a3					;ld (debug_mark),a 
82a3					;pop af 
82a3					CALLMONITOR 
82a3 cd 6f ee			call debug_vector  
82a6				endm  
# End of macro CALLMONITOR
82a6				endif 
82a6			 
82a6 cd c3 89			call storage_clear_page 
82a9			 
82a9 21 74 ea			ld hl, store_page 
82ac 3e 00			ld a, 0 
82ae				 
82ae 77				ld (hl),a   ; reset file counter 
82af			 
82af 21 80 27			ld hl, 0x2780     ;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
82b2 22 75 ea		 	ld (store_page+1), hl	 
82b5			 
82b5				; set default label 
82b5			 
82b5 21 51 83			ld hl, .defaultbanklabl 
82b8 11 77 ea		 	ld de, store_page+3 
82bb 01 0f 00			ld bc, 15 
82be ed b0			ldir 
82c0			 
82c0				; Append the current bank id 
82c0 21 80 ea			ld hl, store_page+3+9 
82c3 3a 59 ea			ld a, (spi_device_id) 
82c6 77				ld (hl), a 
82c7			 
82c7				; save default page 0 
82c7			 
82c7 21 00 00			ld hl, 0 
82ca 11 74 ea			ld de, store_page 
82cd				if DEBUG_STORESE 
82cd					DMARK "SB3" 
82cd f5				push af  
82ce 3a e2 82			ld a, (.dmark)  
82d1 32 65 ee			ld (debug_mark),a  
82d4 3a e3 82			ld a, (.dmark+1)  
82d7 32 66 ee			ld (debug_mark+1),a  
82da 3a e4 82			ld a, (.dmark+2)  
82dd 32 67 ee			ld (debug_mark+2),a  
82e0 18 03			jr .pastdmark  
82e2 ..			.dmark: db "SB3"  
82e5 f1			.pastdmark: pop af  
82e6			endm  
# End of macro DMARK
82e6			;		push af 
82e6			;		ld a, 'F' 
82e6			;		ld (debug_mark),a 
82e6			;		pop af 
82e6					CALLMONITOR 
82e6 cd 6f ee			call debug_vector  
82e9				endm  
# End of macro CALLMONITOR
82e9				endif 
82e9 cd ec 81			call storage_write_block 
82ec				if DEBUG_STORESE 
82ec					DMARK "SB4" 
82ec f5				push af  
82ed 3a 01 83			ld a, (.dmark)  
82f0 32 65 ee			ld (debug_mark),a  
82f3 3a 02 83			ld a, (.dmark+1)  
82f6 32 66 ee			ld (debug_mark+1),a  
82f9 3a 03 83			ld a, (.dmark+2)  
82fc 32 67 ee			ld (debug_mark+2),a  
82ff 18 03			jr .pastdmark  
8301 ..			.dmark: db "SB4"  
8304 f1			.pastdmark: pop af  
8305			endm  
# End of macro DMARK
8305			;		push af 
8305			;		ld a, '>' 
8305			;		ld (debug_mark),a 
8305			;		pop af 
8305					CALLMONITOR 
8305 cd 6f ee			call debug_vector  
8308				endm  
# End of macro CALLMONITOR
8308				endif 
8308			 
8308 00				nop 
8309 00				nop 
830a 00				nop 
830b			 
830b				; now set 0 in every page to mark as a free block 
830b			 
830b 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
830d 21 40 00			ld hl, STORE_BLOCK_PHY 
8310			 
8310 3e 00		.setmark1:   	ld a,0 
8312 e5					push hl 
8313 c5					push bc 
8314 cd ac 80				call se_writebyte 
8317 3e 0a			ld a, 10 
8319 cd e5 89			call aDelayInMS 
831c 23				inc hl 
831d cd ac 80				call se_writebyte 
8320 3e 0a			ld a, 10 
8322 cd e5 89			call aDelayInMS 
8325 2b				dec hl 
8326 c1					pop bc 
8327 e1					pop hl 
8328 3e 40				ld a, STORE_BLOCK_PHY 
832a cd ea 8c				call addatohl 
832d 10 e1				djnz .setmark1 
832f			 
832f 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
8331 3e 00		.setmark2:   	ld a,0 
8333 e5					push hl 
8334 c5					push bc 
8335 cd ac 80				call se_writebyte 
8338 3e 0a			ld a, 10 
833a cd e5 89			call aDelayInMS 
833d 23				inc hl 
833e cd ac 80				call se_writebyte 
8341 3e 0a			ld a, 10 
8343 cd e5 89			call aDelayInMS 
8346 2b				dec hl 
8347 c1					pop bc 
8348 e1					pop hl 
8349 3e 40				ld a, STORE_BLOCK_PHY 
834b cd ea 8c				call addatohl 
834e 10 e1				djnz .setmark2 
8350			 
8350					 
8350			 
8350			 
8350 c9				ret 
8351			 
8351			 
8351			 
8351			 
8351 .. 00		.defaultbanklabl:   db "BankLabel_",0 
835c			 
835c			 
835c			 
835c			; Label Bank 
835c			; ---------- 
835c			; 
835c			; With current bank 
835c			; Read block 0 
835c			; Set label 
835c			; Write block 0 
835c			 
835c			; label str pointer in hl 
835c			 
835c			storage_label:     
835c			 
835c				if DEBUG_STORESE 
835c					DMARK "LBL" 
835c f5				push af  
835d 3a 71 83			ld a, (.dmark)  
8360 32 65 ee			ld (debug_mark),a  
8363 3a 72 83			ld a, (.dmark+1)  
8366 32 66 ee			ld (debug_mark+1),a  
8369 3a 73 83			ld a, (.dmark+2)  
836c 32 67 ee			ld (debug_mark+2),a  
836f 18 03			jr .pastdmark  
8371 ..			.dmark: db "LBL"  
8374 f1			.pastdmark: pop af  
8375			endm  
# End of macro DMARK
8375					CALLMONITOR 
8375 cd 6f ee			call debug_vector  
8378				endm  
# End of macro CALLMONITOR
8378				endif 
8378			 
8378 e5				push hl 
8379			 
8379 cd 38 82			call storage_get_block_0 
837c			 
837c				; set default label 
837c			 
837c e1				pop hl 
837d			 
837d 11 77 ea		 	ld de, store_page+3 
8380 01 0f 00			ld bc, 15 
8383				if DEBUG_STORESE 
8383					DMARK "LB3" 
8383 f5				push af  
8384 3a 98 83			ld a, (.dmark)  
8387 32 65 ee			ld (debug_mark),a  
838a 3a 99 83			ld a, (.dmark+1)  
838d 32 66 ee			ld (debug_mark+1),a  
8390 3a 9a 83			ld a, (.dmark+2)  
8393 32 67 ee			ld (debug_mark+2),a  
8396 18 03			jr .pastdmark  
8398 ..			.dmark: db "LB3"  
839b f1			.pastdmark: pop af  
839c			endm  
# End of macro DMARK
839c					CALLMONITOR 
839c cd 6f ee			call debug_vector  
839f				endm  
# End of macro CALLMONITOR
839f				endif 
839f ed b0			ldir 
83a1				; save default page 0 
83a1			 
83a1 21 00 00			ld hl, 0 
83a4 11 74 ea			ld de, store_page 
83a7				if DEBUG_STORESE 
83a7					DMARK "LBW" 
83a7 f5				push af  
83a8 3a bc 83			ld a, (.dmark)  
83ab 32 65 ee			ld (debug_mark),a  
83ae 3a bd 83			ld a, (.dmark+1)  
83b1 32 66 ee			ld (debug_mark+1),a  
83b4 3a be 83			ld a, (.dmark+2)  
83b7 32 67 ee			ld (debug_mark+2),a  
83ba 18 03			jr .pastdmark  
83bc ..			.dmark: db "LBW"  
83bf f1			.pastdmark: pop af  
83c0			endm  
# End of macro DMARK
83c0					CALLMONITOR 
83c0 cd 6f ee			call debug_vector  
83c3				endm  
# End of macro CALLMONITOR
83c3				endif 
83c3 cd ec 81			call storage_write_block 
83c6			 
83c6 c9				ret 
83c7			 
83c7			 
83c7			 
83c7			; Read Block 0 - Config 
83c7			; --------------------- 
83c7			; 
83c7			; With current bank 
83c7			; Call presence test 
83c7			;    If not present format/init bank  
83c7			; Read block 0  
83c7			;  
83c7			 
83c7			 
83c7			; Dir 
83c7			; --- 
83c7			; 
83c7			; With current bank 
83c7			; Load Block 0 Config 
83c7			; Get max file id number 
83c7			; For each logical block 
83c7			;    Read block read byte 2 
83c7			;      if first block of file 
83c7			;         Display file name 
83c7			;         Display type flags for file 
83c7			;        
83c7			 
83c7			; moving to words as this requires stack control 
83c7			 
83c7			 
83c7			; Delete File 
83c7			; ----------- 
83c7			; 
83c7			; With current bank 
83c7			; 
83c7			; Load Block 0 Config 
83c7			; Get max file id number 
83c7			; For each logical block 
83c7			;    Read block file id 
83c7			;      If first block of file and dont have file id 
83c7			;         if file to delete 
83c7			;         Save file id 
83c7			;         Null file id 
83c7			;         Write this block back 
83c7			;      If file id is one saved 
83c7			;         Null file id 
83c7			;         Write this block back 
83c7			 
83c7			 
83c7			.se_done: 
83c7 e1				pop hl 
83c8 c9				ret 
83c9			 
83c9			storage_erase: 
83c9			 
83c9				; hl contains the file id 
83c9			 
83c9 5d				ld e, l 
83ca 16 00			ld d, 0 
83cc 21 40 00			ld hl, STORE_BLOCK_PHY 
83cf					if DEBUG_FORTH_WORDS 
83cf						DMARK "ERA" 
83cf f5				push af  
83d0 3a e4 83			ld a, (.dmark)  
83d3 32 65 ee			ld (debug_mark),a  
83d6 3a e5 83			ld a, (.dmark+1)  
83d9 32 66 ee			ld (debug_mark+1),a  
83dc 3a e6 83			ld a, (.dmark+2)  
83df 32 67 ee			ld (debug_mark+2),a  
83e2 18 03			jr .pastdmark  
83e4 ..			.dmark: db "ERA"  
83e7 f1			.pastdmark: pop af  
83e8			endm  
# End of macro DMARK
83e8						CALLMONITOR 
83e8 cd 6f ee			call debug_vector  
83eb				endm  
# End of macro CALLMONITOR
83eb					endif 
83eb cd ba 84			call storage_findnextid 
83ee cd 13 8d			call ishlzero 
83f1 c8				ret z 
83f2			 
83f2 e5				push hl 
83f3			 
83f3				; TODO check file not found 
83f3			 
83f3 11 74 ea			ld de, store_page 
83f6 cd 87 81			call storage_read_block 
83f9			 
83f9 cd 13 8d			call ishlzero 
83fc ca c7 83			jp z,.se_done 
83ff			 
83ff					if DEBUG_FORTH_WORDS 
83ff						DMARK "ER1" 
83ff f5				push af  
8400 3a 14 84			ld a, (.dmark)  
8403 32 65 ee			ld (debug_mark),a  
8406 3a 15 84			ld a, (.dmark+1)  
8409 32 66 ee			ld (debug_mark+1),a  
840c 3a 16 84			ld a, (.dmark+2)  
840f 32 67 ee			ld (debug_mark+2),a  
8412 18 03			jr .pastdmark  
8414 ..			.dmark: db "ER1"  
8417 f1			.pastdmark: pop af  
8418			endm  
# End of macro DMARK
8418						CALLMONITOR 
8418 cd 6f ee			call debug_vector  
841b				endm  
# End of macro CALLMONITOR
841b					endif 
841b 3a 74 ea			ld a, (store_page)	; get file id 
841e 32 68 ea			ld (store_tmpid), a 
8421			 
8421 3a 76 ea			ld a, (store_page+2)    ; get count of extends 
8424 32 67 ea			ld (store_tmpext), a 
8427			 
8427				; wipe file header 
8427			 
8427 e1				pop hl 
8428 3e 00			ld a, 0 
842a 32 74 ea			ld (store_page), a 
842d 32 75 ea			ld (store_page+1),a 
8430 11 74 ea			ld de, store_page 
8433					if DEBUG_FORTH_WORDS 
8433						DMARK "ER2" 
8433 f5				push af  
8434 3a 48 84			ld a, (.dmark)  
8437 32 65 ee			ld (debug_mark),a  
843a 3a 49 84			ld a, (.dmark+1)  
843d 32 66 ee			ld (debug_mark+1),a  
8440 3a 4a 84			ld a, (.dmark+2)  
8443 32 67 ee			ld (debug_mark+2),a  
8446 18 03			jr .pastdmark  
8448 ..			.dmark: db "ER2"  
844b f1			.pastdmark: pop af  
844c			endm  
# End of macro DMARK
844c						CALLMONITOR 
844c cd 6f ee			call debug_vector  
844f				endm  
# End of macro CALLMONITOR
844f					endif 
844f cd ec 81			call storage_write_block 
8452			 
8452			 
8452				; wipe file extents 
8452			 
8452 3a 67 ea			ld a, (store_tmpext) 
8455 47				ld b, a 
8456			 
8456			.eraext:	  
8456 c5				push bc 
8457			 
8457 21 40 00			ld hl, STORE_BLOCK_PHY 
845a 3a 68 ea			ld a,(store_tmpid) 
845d 5f				ld e, a 
845e 50				ld d, b	 
845f					if DEBUG_FORTH_WORDS 
845f						DMARK "ER3" 
845f f5				push af  
8460 3a 74 84			ld a, (.dmark)  
8463 32 65 ee			ld (debug_mark),a  
8466 3a 75 84			ld a, (.dmark+1)  
8469 32 66 ee			ld (debug_mark+1),a  
846c 3a 76 84			ld a, (.dmark+2)  
846f 32 67 ee			ld (debug_mark+2),a  
8472 18 03			jr .pastdmark  
8474 ..			.dmark: db "ER3"  
8477 f1			.pastdmark: pop af  
8478			endm  
# End of macro DMARK
8478						CALLMONITOR 
8478 cd 6f ee			call debug_vector  
847b				endm  
# End of macro CALLMONITOR
847b					endif 
847b cd ba 84			call storage_findnextid 
847e cd 13 8d			call ishlzero 
8481 ca c7 83			jp z,.se_done 
8484			 
8484 e5				push hl 
8485 11 74 ea			ld de, store_page 
8488 cd 87 81			call storage_read_block 
848b			 
848b				; free block	 
848b			 
848b 3e 00			ld a, 0 
848d 32 74 ea			ld (store_page), a 
8490 32 75 ea			ld (store_page+1),a 
8493 11 74 ea			ld de, store_page 
8496 e1				pop hl 
8497					if DEBUG_FORTH_WORDS 
8497						DMARK "ER4" 
8497 f5				push af  
8498 3a ac 84			ld a, (.dmark)  
849b 32 65 ee			ld (debug_mark),a  
849e 3a ad 84			ld a, (.dmark+1)  
84a1 32 66 ee			ld (debug_mark+1),a  
84a4 3a ae 84			ld a, (.dmark+2)  
84a7 32 67 ee			ld (debug_mark+2),a  
84aa 18 03			jr .pastdmark  
84ac ..			.dmark: db "ER4"  
84af f1			.pastdmark: pop af  
84b0			endm  
# End of macro DMARK
84b0						CALLMONITOR 
84b0 cd 6f ee			call debug_vector  
84b3				endm  
# End of macro CALLMONITOR
84b3					endif 
84b3 cd ec 81			call storage_write_block 
84b6			 
84b6 c1				pop bc 
84b7 10 9d			djnz .eraext 
84b9			 
84b9 c9				ret 
84ba			 
84ba			 
84ba			; Find Free Block 
84ba			; --------------- 
84ba			; 
84ba			; With current bank 
84ba			;  
84ba			; From given starting logical block 
84ba			;    Read block  
84ba			;    If no file id 
84ba			;         Return block id 
84ba			 
84ba			 
84ba			; hl starting page number 
84ba			; hl contains free page number or zero if no pages free 
84ba			; e contains the file id to locate 
84ba			; d contains the block number 
84ba			 
84ba			; TODO change to find file id and use zero for free block 
84ba			 
84ba			storage_findnextid: 
84ba			 
84ba				; now locate first 0 page to mark as a free block 
84ba			 
84ba 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
84bc			;	ld hl, STORE_BLOCK_PHY 
84bc			 
84bc					if DEBUG_FORTH_WORDS 
84bc					DMARK "FNI" 
84bc f5				push af  
84bd 3a d1 84			ld a, (.dmark)  
84c0 32 65 ee			ld (debug_mark),a  
84c3 3a d2 84			ld a, (.dmark+1)  
84c6 32 66 ee			ld (debug_mark+1),a  
84c9 3a d3 84			ld a, (.dmark+2)  
84cc 32 67 ee			ld (debug_mark+2),a  
84cf 18 03			jr .pastdmark  
84d1 ..			.dmark: db "FNI"  
84d4 f1			.pastdmark: pop af  
84d5			endm  
# End of macro DMARK
84d5						CALLMONITOR 
84d5 cd 6f ee			call debug_vector  
84d8				endm  
# End of macro CALLMONITOR
84d8					endif 
84d8			.ff1:   	 
84d8 e5					push hl 
84d9 c5					push bc 
84da d5					push de 
84db cd ab 80				call se_readbyte 
84de 5f					ld e,a 
84df 23					inc hl 
84e0 cd ab 80				call se_readbyte 
84e3 57					ld d, a 
84e4 e1					pop hl 
84e5 e5					push hl 
84e6 cd 08 8d				call cmp16 
84e9 28 49				jr z, .fffound 
84eb			 
84eb d1					pop de 
84ec c1					pop bc 
84ed e1					pop hl 
84ee			 
84ee					; is found? 
84ee					;cp e 
84ee					;ret z 
84ee			 
84ee 3e 40				ld a, STORE_BLOCK_PHY 
84f0 cd ea 8c				call addatohl 
84f3 10 e3				djnz .ff1 
84f5			 
84f5 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
84f7			.ff2:   	 
84f7			 
84f7 e5					push hl 
84f8 c5					push bc 
84f9 d5					push de 
84fa cd ab 80				call se_readbyte 
84fd 5f					ld e,a 
84fe 23					inc hl 
84ff cd ab 80				call se_readbyte 
8502 57					ld d, a 
8503			 
8503 e1					pop hl 
8504 e5					push hl 
8505 cd 08 8d				call cmp16 
8508 28 2a				jr z, .fffound 
850a			 
850a d1					pop de 
850b c1					pop bc 
850c e1					pop hl 
850d					; is found? 
850d					;cp e 
850d					;ret z 
850d			 
850d 3e 40				ld a, STORE_BLOCK_PHY 
850f cd ea 8c				call addatohl 
8512 10 e3				djnz .ff2 
8514			 
8514			 
8514					if DEBUG_FORTH_WORDS 
8514					DMARK "FN-" 
8514 f5				push af  
8515 3a 29 85			ld a, (.dmark)  
8518 32 65 ee			ld (debug_mark),a  
851b 3a 2a 85			ld a, (.dmark+1)  
851e 32 66 ee			ld (debug_mark+1),a  
8521 3a 2b 85			ld a, (.dmark+2)  
8524 32 67 ee			ld (debug_mark+2),a  
8527 18 03			jr .pastdmark  
8529 ..			.dmark: db "FN-"  
852c f1			.pastdmark: pop af  
852d			endm  
# End of macro DMARK
852d					;	push af 
852d					;	ld a, 'n' 
852d					;	ld (debug_mark),a 
852d					;	pop af 
852d						CALLMONITOR 
852d cd 6f ee			call debug_vector  
8530				endm  
# End of macro CALLMONITOR
8530					endif 
8530				; no free marks! 
8530 21 00 00				ld hl, 0 
8533 c9				ret 
8534			.fffound: 
8534				 
8534			 
8534 d1					pop de 
8535 c1					pop bc 
8536 e1					pop hl 
8537					if DEBUG_FORTH_WORDS 
8537					DMARK "FNF" 
8537 f5				push af  
8538 3a 4c 85			ld a, (.dmark)  
853b 32 65 ee			ld (debug_mark),a  
853e 3a 4d 85			ld a, (.dmark+1)  
8541 32 66 ee			ld (debug_mark+1),a  
8544 3a 4e 85			ld a, (.dmark+2)  
8547 32 67 ee			ld (debug_mark+2),a  
854a 18 03			jr .pastdmark  
854c ..			.dmark: db "FNF"  
854f f1			.pastdmark: pop af  
8550			endm  
# End of macro DMARK
8550					;	push af 
8550					;	ld a, 'n' 
8550					;	ld (debug_mark),a 
8550					;	pop af 
8550						CALLMONITOR 
8550 cd 6f ee			call debug_vector  
8553				endm  
# End of macro CALLMONITOR
8553					endif 
8553 c9				ret 
8554			 
8554			 
8554			 
8554			; Free Space 
8554			; ---------- 
8554			; 
8554			; With current bank 
8554			; 
8554			; Set block count to zero 
8554			; Starting with first logical block 
8554			;      Find free block  
8554			;      If block id given, increment block count 
8554			; 
8554			;  
8554			 
8554			 
8554			; hl contains count of free blocks 
8554			 
8554			storage_freeblocks: 
8554			 
8554				; now locate first 0 page to mark as a free block 
8554			 
8554 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
8556 21 40 00			ld hl, STORE_BLOCK_PHY 
8559 11 00 00			ld de, 0 
855c			 
855c			.fb1:   	 
855c e5					push hl 
855d c5					push bc 
855e d5					push de 
855f cd ab 80				call se_readbyte 
8562 d1					pop de 
8563 c1					pop bc 
8564 e1					pop hl 
8565			 
8565					; is free? 
8565 fe 00				cp 0 
8567 20 01				jr nz, .ff1cont 
8569 13					inc de 
856a			 
856a			.ff1cont: 
856a			 
856a			 
856a 3e 40				ld a, STORE_BLOCK_PHY 
856c cd ea 8c				call addatohl 
856f 10 eb				djnz .fb1 
8571			 
8571 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
8573			.fb2:   	 
8573 e5					push hl 
8574 c5					push bc 
8575 d5					push de 
8576 cd ab 80				call se_readbyte 
8579 d1					pop de 
857a c1					pop bc 
857b e1					pop hl 
857c			 
857c					; is free? 
857c fe 00				cp 0 
857e 20 01				jr nz, .ff2cont 
8580 13					inc de 
8581			 
8581			.ff2cont: 
8581			 
8581 3e 40				ld a, STORE_BLOCK_PHY 
8583 cd ea 8c				call addatohl 
8586 10 eb				djnz .fb2 
8588			 
8588 eb				ex de, hl 
8589 c9				ret 
858a			 
858a			; Get File ID 
858a			; ----------- 
858a			; 
858a			; With current bank 
858a			;  
858a			; Load Block 0 Config 
858a			; Get max file id number 
858a			; For each logical block 
858a			;    Read block file id 
858a			;      If first block of file and dont have file id 
858a			;         if file get id and exit 
858a			 
858a			 
858a			 
858a			 
858a			; Create File 
858a			; ----------- 
858a			; 
858a			; With current bank  
858a			; Load Block 0 Config 
858a			; Get max file id number 
858a			; Increment file id number 
858a			; Save Config 
858a			; Find free block 
858a			; Set buffer with file name and file id 
858a			; Write buffer to free block  
858a			 
858a			 
858a			; hl point to file name 
858a			; hl returns file id 
858a			 
858a			; file format: 
858a			; byte 0 - file id 
858a			; byte 1 - extent number 
858a			; byte 2-> data 
858a			 
858a			; format for extent number 0: 
858a			; 
858a			; byte 0 - file id 
858a			; byte 1 - extent 0 
858a			; byte 2 - extent count 
858a			; byte 3 -> file name and meta data 
858a			 
858a			 
858a			storage_create: 
858a				if DEBUG_STORESE 
858a					DMARK "SCR" 
858a f5				push af  
858b 3a 9f 85			ld a, (.dmark)  
858e 32 65 ee			ld (debug_mark),a  
8591 3a a0 85			ld a, (.dmark+1)  
8594 32 66 ee			ld (debug_mark+1),a  
8597 3a a1 85			ld a, (.dmark+2)  
859a 32 67 ee			ld (debug_mark+2),a  
859d 18 03			jr .pastdmark  
859f ..			.dmark: db "SCR"  
85a2 f1			.pastdmark: pop af  
85a3			endm  
# End of macro DMARK
85a3					CALLMONITOR 
85a3 cd 6f ee			call debug_vector  
85a6				endm  
# End of macro CALLMONITOR
85a6				endif 
85a6			 
85a6 e5				push hl		; save file name pointer 
85a7			 
85a7 cd 38 82			call storage_get_block_0 
85aa			 
85aa 3a 74 ea			ld a,(store_page)	; get current file id 
85ad 3c				inc a 
85ae 32 74 ea			ld (store_page),a 
85b1				 
85b1 32 68 ea			ld (store_tmpid),a			; save id 
85b4			 
85b4 21 00 00			ld hl, 0 
85b7 11 74 ea			ld de, store_page 
85ba				if DEBUG_STORESE 
85ba					DMARK "SCw" 
85ba f5				push af  
85bb 3a cf 85			ld a, (.dmark)  
85be 32 65 ee			ld (debug_mark),a  
85c1 3a d0 85			ld a, (.dmark+1)  
85c4 32 66 ee			ld (debug_mark+1),a  
85c7 3a d1 85			ld a, (.dmark+2)  
85ca 32 67 ee			ld (debug_mark+2),a  
85cd 18 03			jr .pastdmark  
85cf ..			.dmark: db "SCw"  
85d2 f1			.pastdmark: pop af  
85d3			endm  
# End of macro DMARK
85d3					CALLMONITOR 
85d3 cd 6f ee			call debug_vector  
85d6				endm  
# End of macro CALLMONITOR
85d6				endif 
85d6 cd ec 81			call storage_write_block	 ; save update 
85d9			 
85d9				if DEBUG_STORESE 
85d9 11 74 ea				ld de, store_page 
85dc					DMARK "SCC" 
85dc f5				push af  
85dd 3a f1 85			ld a, (.dmark)  
85e0 32 65 ee			ld (debug_mark),a  
85e3 3a f2 85			ld a, (.dmark+1)  
85e6 32 66 ee			ld (debug_mark+1),a  
85e9 3a f3 85			ld a, (.dmark+2)  
85ec 32 67 ee			ld (debug_mark+2),a  
85ef 18 03			jr .pastdmark  
85f1 ..			.dmark: db "SCC"  
85f4 f1			.pastdmark: pop af  
85f5			endm  
# End of macro DMARK
85f5					CALLMONITOR 
85f5 cd 6f ee			call debug_vector  
85f8				endm  
# End of macro CALLMONITOR
85f8				endif 
85f8				;  
85f8				 
85f8 21 40 00			ld hl, STORE_BLOCK_PHY 
85fb 11 00 00			ld de, 0 
85fe cd ba 84			call storage_findnextid 
8601			 
8601 22 5f ea			ld (store_tmppageid), hl    ; save page to use  
8604			 
8604				; TODO detect 0 = no spare blocks 
8604			 
8604				; hl now contains the free page to use for the file header page 
8604			 
8604				if DEBUG_STORESE 
8604				DMARK "SCF" 
8604 f5				push af  
8605 3a 19 86			ld a, (.dmark)  
8608 32 65 ee			ld (debug_mark),a  
860b 3a 1a 86			ld a, (.dmark+1)  
860e 32 66 ee			ld (debug_mark+1),a  
8611 3a 1b 86			ld a, (.dmark+2)  
8614 32 67 ee			ld (debug_mark+2),a  
8617 18 03			jr .pastdmark  
8619 ..			.dmark: db "SCF"  
861c f1			.pastdmark: pop af  
861d			endm  
# End of macro DMARK
861d					CALLMONITOR 
861d cd 6f ee			call debug_vector  
8620				endm  
# End of macro CALLMONITOR
8620				endif 
8620			 
8620 22 5f ea			ld (store_tmppageid), hl 
8623				 
8623 3a 68 ea			ld a,(store_tmpid)    ; get file id 
8626			;	ld a, (store_filecache)			; save to cache 
8626			 
8626 32 74 ea			ld (store_page),a    ; set page id 
8629 3e 00			ld a, 0			 ; extent 0 is file header 
862b 32 75 ea			ld (store_page+1), a   ; set file extent 
862e			 
862e 32 76 ea			ld (store_page+2), a   ; extent count for the file 
8631			 
8631			;	inc hl 		; init block 0 of file 
8631			;	inc hl   		; skip file and extent id 
8631			 ;       ld a, 0 
8631			;	ld (hl),a 
8631			;	ld a, (store_filecache+1)  	; save to cache 
8631			 
8631			;	inc hl    ; file name 
8631				 
8631				 
8631 11 77 ea			ld de, store_page+3    ; get buffer for term string to use as file name 
8634				if DEBUG_STORESE 
8634					DMARK "SCc" 
8634 f5				push af  
8635 3a 49 86			ld a, (.dmark)  
8638 32 65 ee			ld (debug_mark),a  
863b 3a 4a 86			ld a, (.dmark+1)  
863e 32 66 ee			ld (debug_mark+1),a  
8641 3a 4b 86			ld a, (.dmark+2)  
8644 32 67 ee			ld (debug_mark+2),a  
8647 18 03			jr .pastdmark  
8649 ..			.dmark: db "SCc"  
864c f1			.pastdmark: pop af  
864d			endm  
# End of macro DMARK
864d					CALLMONITOR 
864d cd 6f ee			call debug_vector  
8650				endm  
# End of macro CALLMONITOR
8650				endif 
8650 e1				pop hl    ; get zero term string 
8651 e5				push hl 
8652 3e 00			ld a, 0 
8654 cd 5b 90			call strlent 
8657 23				inc hl   ; cover zero term 
8658 06 00			ld b,0 
865a 4d				ld c,l 
865b e1				pop hl 
865c				;ex de, hl 
865c				if DEBUG_STORESE 
865c					DMARK "SCa" 
865c f5				push af  
865d 3a 71 86			ld a, (.dmark)  
8660 32 65 ee			ld (debug_mark),a  
8663 3a 72 86			ld a, (.dmark+1)  
8666 32 66 ee			ld (debug_mark+1),a  
8669 3a 73 86			ld a, (.dmark+2)  
866c 32 67 ee			ld (debug_mark+2),a  
866f 18 03			jr .pastdmark  
8671 ..			.dmark: db "SCa"  
8674 f1			.pastdmark: pop af  
8675			endm  
# End of macro DMARK
8675					;push af 
8675					;ld a, 'a' 
8675					;ld (debug_mark),a 
8675					;pop af 
8675					CALLMONITOR 
8675 cd 6f ee			call debug_vector  
8678				endm  
# End of macro CALLMONITOR
8678				endif 
8678 ed b0			ldir    ; copy zero term string 
867a				if DEBUG_STORESE 
867a					DMARK "SCA" 
867a f5				push af  
867b 3a 8f 86			ld a, (.dmark)  
867e 32 65 ee			ld (debug_mark),a  
8681 3a 90 86			ld a, (.dmark+1)  
8684 32 66 ee			ld (debug_mark+1),a  
8687 3a 91 86			ld a, (.dmark+2)  
868a 32 67 ee			ld (debug_mark+2),a  
868d 18 03			jr .pastdmark  
868f ..			.dmark: db "SCA"  
8692 f1			.pastdmark: pop af  
8693			endm  
# End of macro DMARK
8693					CALLMONITOR 
8693 cd 6f ee			call debug_vector  
8696				endm  
# End of macro CALLMONITOR
8696				endif 
8696			 
8696				; write file header page 
8696			 
8696 2a 5f ea			ld hl,(store_tmppageid) 
8699 11 74 ea			ld de, store_page 
869c				if DEBUG_STORESE 
869c					DMARK "SCb" 
869c f5				push af  
869d 3a b1 86			ld a, (.dmark)  
86a0 32 65 ee			ld (debug_mark),a  
86a3 3a b2 86			ld a, (.dmark+1)  
86a6 32 66 ee			ld (debug_mark+1),a  
86a9 3a b3 86			ld a, (.dmark+2)  
86ac 32 67 ee			ld (debug_mark+2),a  
86af 18 03			jr .pastdmark  
86b1 ..			.dmark: db "SCb"  
86b4 f1			.pastdmark: pop af  
86b5			endm  
# End of macro DMARK
86b5					;push af 
86b5					;ld a, 'b' 
86b5					;ld (debug_mark),a 
86b5					;pop af 
86b5					CALLMONITOR 
86b5 cd 6f ee			call debug_vector  
86b8				endm  
# End of macro CALLMONITOR
86b8				endif 
86b8 cd ec 81			call storage_write_block 
86bb			 
86bb 3a 68 ea			ld a, (store_tmpid) 
86be 6f				ld l, a 
86bf 26 00			ld h,0 
86c1				if DEBUG_STORESE 
86c1					DMARK "SCz" 
86c1 f5				push af  
86c2 3a d6 86			ld a, (.dmark)  
86c5 32 65 ee			ld (debug_mark),a  
86c8 3a d7 86			ld a, (.dmark+1)  
86cb 32 66 ee			ld (debug_mark+1),a  
86ce 3a d8 86			ld a, (.dmark+2)  
86d1 32 67 ee			ld (debug_mark+2),a  
86d4 18 03			jr .pastdmark  
86d6 ..			.dmark: db "SCz"  
86d9 f1			.pastdmark: pop af  
86da			endm  
# End of macro DMARK
86da					CALLMONITOR 
86da cd 6f ee			call debug_vector  
86dd				endm  
# End of macro CALLMONITOR
86dd				endif 
86dd c9				ret 
86de				 
86de			 
86de			 
86de			; 
86de			; Read File 
86de			; 
86de			; h - file id to locate 
86de			; l - extent to locate 
86de			; de - pointer to string to read into 
86de			; 
86de			; returns hl is 0 if block not found ie end of file or pointer to start of data read 
86de			 
86de			.sr_fail: 
86de d1				pop de 
86df c9				ret 
86e0			 
86e0			storage_read: 
86e0			 
86e0			 
86e0 d5				push de 
86e1			 
86e1			; TODO BUG the above push is it popped before the RET Z? 
86e1			 
86e1			; TODO how to handle multiple part blocks 
86e1			 
86e1				; locate file extent to read 
86e1			 
86e1 5c				ld e, h 
86e2 55				ld d, l 
86e3			 
86e3			.srext: 
86e3 22 72 ea			ld (store_readptr), hl     ; save the current extent to load 
86e6 ed 53 70 ea		ld (store_readbuf), de     ; save the current buffer to load in to 
86ea			 
86ea 21 40 00			ld hl, STORE_BLOCK_PHY 
86ed				if DEBUG_STORESE 
86ed					DMARK "sre" 
86ed f5				push af  
86ee 3a 02 87			ld a, (.dmark)  
86f1 32 65 ee			ld (debug_mark),a  
86f4 3a 03 87			ld a, (.dmark+1)  
86f7 32 66 ee			ld (debug_mark+1),a  
86fa 3a 04 87			ld a, (.dmark+2)  
86fd 32 67 ee			ld (debug_mark+2),a  
8700 18 03			jr .pastdmark  
8702 ..			.dmark: db "sre"  
8705 f1			.pastdmark: pop af  
8706			endm  
# End of macro DMARK
8706					CALLMONITOR 
8706 cd 6f ee			call debug_vector  
8709				endm  
# End of macro CALLMONITOR
8709				endif 
8709 cd ba 84			call storage_findnextid 
870c			 
870c				if DEBUG_STORESE 
870c					DMARK "srf" 
870c f5				push af  
870d 3a 21 87			ld a, (.dmark)  
8710 32 65 ee			ld (debug_mark),a  
8713 3a 22 87			ld a, (.dmark+1)  
8716 32 66 ee			ld (debug_mark+1),a  
8719 3a 23 87			ld a, (.dmark+2)  
871c 32 67 ee			ld (debug_mark+2),a  
871f 18 03			jr .pastdmark  
8721 ..			.dmark: db "srf"  
8724 f1			.pastdmark: pop af  
8725			endm  
# End of macro DMARK
8725					CALLMONITOR 
8725 cd 6f ee			call debug_vector  
8728				endm  
# End of macro CALLMONITOR
8728				endif 
8728 cd 13 8d			call ishlzero 
872b			;	ld a, l 
872b			;	add h 
872b			;	cp 0 
872b 28 b1			jr z,.sr_fail			; block not found so EOF 
872d			 
872d				; save current address for use by higher level words etc 
872d			 
872d 22 65 ea			ld (store_openaddr),hl 
8730			 
8730			 
8730				; hl contains page number to load 
8730 d1				pop de   ; get storage 
8731 ed 53 70 ea		ld (store_readbuf), de     ; current buffer to load in to 
8735 d5				push de 
8736				if DEBUG_STORESE 
8736					DMARK "srg" 
8736 f5				push af  
8737 3a 4b 87			ld a, (.dmark)  
873a 32 65 ee			ld (debug_mark),a  
873d 3a 4c 87			ld a, (.dmark+1)  
8740 32 66 ee			ld (debug_mark+1),a  
8743 3a 4d 87			ld a, (.dmark+2)  
8746 32 67 ee			ld (debug_mark+2),a  
8749 18 03			jr .pastdmark  
874b ..			.dmark: db "srg"  
874e f1			.pastdmark: pop af  
874f			endm  
# End of macro DMARK
874f					CALLMONITOR 
874f cd 6f ee			call debug_vector  
8752				endm  
# End of macro CALLMONITOR
8752				endif 
8752 cd 87 81			call storage_read_block 
8755			 
8755				; if this a continuation read??? 
8755			 
8755 2a 70 ea			ld hl, (store_readbuf)     ; current buffer to load in to 
8758			 
8758 3e 3f			ld a, STORE_BLOCK_PHY-1 
875a cd ea 8c			call addatohl 
875d 7e				ld a,(hl) 
875e fe 00			cp 0 
8760 28 02			jr z, .markiscont 
8762 3e ff			ld a, 255 
8764			 
8764			.markiscont: 
8764 32 67 ea			ld (store_readcont), a 
8767			 
8767				if DEBUG_STORESE 
8767					DMARK "srC" 
8767 f5				push af  
8768 3a 7c 87			ld a, (.dmark)  
876b 32 65 ee			ld (debug_mark),a  
876e 3a 7d 87			ld a, (.dmark+1)  
8771 32 66 ee			ld (debug_mark+1),a  
8774 3a 7e 87			ld a, (.dmark+2)  
8777 32 67 ee			ld (debug_mark+2),a  
877a 18 03			jr .pastdmark  
877c ..			.dmark: db "srC"  
877f f1			.pastdmark: pop af  
8780			endm  
# End of macro DMARK
8780					CALLMONITOR 
8780 cd 6f ee			call debug_vector  
8783				endm  
# End of macro CALLMONITOR
8783				endif 
8783				; only short reads enabled 
8783			 
8783 3a 6f ea			ld a, (store_longread) 
8786 fe 00			cp 0 
8788 ca 55 88			jp z, .readdone 
878b			 
878b			; TODO if block has no zeros then need to read next block  
878b			; this code appears to be very buggy. Have added above a flag to disable/enable the following code for later debug 
878b			; check last byte of physical block. 
878b			; if not zero then the next block needs to be loaded 
878b			 
878b			 
878b 2a 70 ea			ld hl, (store_readbuf)     ; current buffer to load in to 
878e			 
878e 3e 3f			ld a, STORE_BLOCK_PHY-1 
8790 cd ea 8c			call addatohl 
8793				;dec hl 
8793 7e				ld a,(hl) 
8794				if DEBUG_STORESE 
8794					DMARK "sr?" 
8794 f5				push af  
8795 3a a9 87			ld a, (.dmark)  
8798 32 65 ee			ld (debug_mark),a  
879b 3a aa 87			ld a, (.dmark+1)  
879e 32 66 ee			ld (debug_mark+1),a  
87a1 3a ab 87			ld a, (.dmark+2)  
87a4 32 67 ee			ld (debug_mark+2),a  
87a7 18 03			jr .pastdmark  
87a9 ..			.dmark: db "sr?"  
87ac f1			.pastdmark: pop af  
87ad			endm  
# End of macro DMARK
87ad					CALLMONITOR 
87ad cd 6f ee			call debug_vector  
87b0				endm  
# End of macro CALLMONITOR
87b0				endif 
87b0 fe 00			cp 0 
87b2 ca 55 88			jp z, .readdone 
87b5			 
87b5				; last byte is not zero so there is more in the next extent. Load it on the end.	 
87b5			 
87b5 23				inc hl 
87b6			 
87b6 22 70 ea			ld (store_readbuf), hl     ; save the current buffer to load in to 
87b9			 
87b9 ed 5b 72 ea		ld de, (store_readptr)     ; save the current extent to load 
87bd			 
87bd eb				ex de, hl 
87be			 
87be				; next ext 
87be			 
87be 23				inc hl 
87bf 22 72 ea			ld  (store_readptr), hl     ; save the current extent to load 
87c2			 
87c2				if DEBUG_STORESE 
87c2					DMARK "sF2" 
87c2 f5				push af  
87c3 3a d7 87			ld a, (.dmark)  
87c6 32 65 ee			ld (debug_mark),a  
87c9 3a d8 87			ld a, (.dmark+1)  
87cc 32 66 ee			ld (debug_mark+1),a  
87cf 3a d9 87			ld a, (.dmark+2)  
87d2 32 67 ee			ld (debug_mark+2),a  
87d5 18 03			jr .pastdmark  
87d7 ..			.dmark: db "sF2"  
87da f1			.pastdmark: pop af  
87db			endm  
# End of macro DMARK
87db					CALLMONITOR 
87db cd 6f ee			call debug_vector  
87de				endm  
# End of macro CALLMONITOR
87de				endif 
87de			 
87de				; get and load block 
87de			 
87de cd ba 84			call storage_findnextid 
87e1			 
87e1				if DEBUG_STORESE 
87e1					DMARK "sf2" 
87e1 f5				push af  
87e2 3a f6 87			ld a, (.dmark)  
87e5 32 65 ee			ld (debug_mark),a  
87e8 3a f7 87			ld a, (.dmark+1)  
87eb 32 66 ee			ld (debug_mark+1),a  
87ee 3a f8 87			ld a, (.dmark+2)  
87f1 32 67 ee			ld (debug_mark+2),a  
87f4 18 03			jr .pastdmark  
87f6 ..			.dmark: db "sf2"  
87f9 f1			.pastdmark: pop af  
87fa			endm  
# End of macro DMARK
87fa					CALLMONITOR 
87fa cd 6f ee			call debug_vector  
87fd				endm  
# End of macro CALLMONITOR
87fd				endif 
87fd cd 13 8d			call ishlzero 
8800			;	ld a, l 
8800			;	add h 
8800			;	cp 0 
8800 ca de 86			jp z,.sr_fail			; block not found so EOF 
8803				 
8803				; save current address for use by higher level words etc 
8803			 
8803 22 65 ea			ld (store_openaddr),hl 
8806			 
8806 cd 87 81			call storage_read_block 
8809			 
8809				; on a continuation block, we now have the file id and ext in the middle of the block 
8809				; we need to pull everything back  
8809			 
8809 ed 5b 70 ea		ld de, (store_readbuf)     ; current buffer to nudge into 
880d 2a 70 ea			ld hl, (store_readbuf)     ; current buffer where data actually exists 
8810 23				inc hl 
8811 23				inc hl     ; skip id and ext 
8812 01 40 00			ld bc, STORE_BLOCK_PHY 
8815				if DEBUG_STORESE 
8815					DMARK "SR<" 
8815 f5				push af  
8816 3a 2a 88			ld a, (.dmark)  
8819 32 65 ee			ld (debug_mark),a  
881c 3a 2b 88			ld a, (.dmark+1)  
881f 32 66 ee			ld (debug_mark+1),a  
8822 3a 2c 88			ld a, (.dmark+2)  
8825 32 67 ee			ld (debug_mark+2),a  
8828 18 03			jr .pastdmark  
882a ..			.dmark: db "SR<"  
882d f1			.pastdmark: pop af  
882e			endm  
# End of macro DMARK
882e					CALLMONITOR 
882e cd 6f ee			call debug_vector  
8831				endm  
# End of macro CALLMONITOR
8831				endif 
8831 ed b0			ldir     ; copy data 
8833			 
8833				; move the pointer back and pretend we have a full buffer for next recheck 
8833			 
8833 1b				dec de 
8834 1b				dec de 
8835			 
8835			; TODO do pop below now short circuit loop????? 
8835 c1				pop bc     ; get rid of spare de on stack 
8836				if DEBUG_STORESE 
8836					DMARK "SR>" 
8836 f5				push af  
8837 3a 4b 88			ld a, (.dmark)  
883a 32 65 ee			ld (debug_mark),a  
883d 3a 4c 88			ld a, (.dmark+1)  
8840 32 66 ee			ld (debug_mark+1),a  
8843 3a 4d 88			ld a, (.dmark+2)  
8846 32 67 ee			ld (debug_mark+2),a  
8849 18 03			jr .pastdmark  
884b ..			.dmark: db "SR>"  
884e f1			.pastdmark: pop af  
884f			endm  
# End of macro DMARK
884f					CALLMONITOR 
884f cd 6f ee			call debug_vector  
8852				endm  
# End of macro CALLMONITOR
8852				endif 
8852 c3 e3 86			jp .srext 
8855			 
8855			 
8855			 
8855			 
8855			 
8855			.readdone:		 
8855 e1				pop hl 		 ; return start of data to show as not EOF 
8856 23				inc hl   ; past file id 
8857 23				inc hl   ; past ext 
8858				if DEBUG_STORESE 
8858					DMARK "SRe" 
8858 f5				push af  
8859 3a 6d 88			ld a, (.dmark)  
885c 32 65 ee			ld (debug_mark),a  
885f 3a 6e 88			ld a, (.dmark+1)  
8862 32 66 ee			ld (debug_mark+1),a  
8865 3a 6f 88			ld a, (.dmark+2)  
8868 32 67 ee			ld (debug_mark+2),a  
886b 18 03			jr .pastdmark  
886d ..			.dmark: db "SRe"  
8870 f1			.pastdmark: pop af  
8871			endm  
# End of macro DMARK
8871					CALLMONITOR 
8871 cd 6f ee			call debug_vector  
8874				endm  
# End of macro CALLMONITOR
8874				endif 
8874 c9					ret 
8875			 
8875			 
8875			 
8875			; 
8875			; Append File 
8875			; 
8875			; hl - file id to locate 
8875			; de - pointer to (multi block) string to write 
8875			 
8875			.sa_notfound: 
8875 d1				pop de 
8876 c9				ret 
8877			 
8877			 
8877			storage_append: 
8877				; hl -  file id to append to 
8877				; de - string to append 
8877			 
8877 d5				push de 
8878				 
8878				if DEBUG_STORESE 
8878					DMARK "AP1" 
8878 f5				push af  
8879 3a 8d 88			ld a, (.dmark)  
887c 32 65 ee			ld (debug_mark),a  
887f 3a 8e 88			ld a, (.dmark+1)  
8882 32 66 ee			ld (debug_mark+1),a  
8885 3a 8f 88			ld a, (.dmark+2)  
8888 32 67 ee			ld (debug_mark+2),a  
888b 18 03			jr .pastdmark  
888d ..			.dmark: db "AP1"  
8890 f1			.pastdmark: pop af  
8891			endm  
# End of macro DMARK
8891					CALLMONITOR 
8891 cd 6f ee			call debug_vector  
8894				endm  
# End of macro CALLMONITOR
8894				endif 
8894			 
8894 7d				ld a, l 
8895 32 68 ea			ld (store_tmpid), a 
8898			 
8898				; get file header  
8898			 
8898 16 00			ld d, 0			 ; file extent to locate - file name details at item 0 
889a 3a 68 ea			ld a, (store_tmpid) 
889d 5f				ld e, a 
889e			 
889e 21 40 00				ld hl, STORE_BLOCK_PHY 
88a1 cd ba 84				call storage_findnextid 
88a4			 
88a4 cd 13 8d			call ishlzero 
88a7 28 cc			jr z, .sa_notfound 
88a9			 
88a9 22 5f ea			ld (store_tmppageid), hl 
88ac			 
88ac				; TODO handle file id not found 
88ac			 
88ac				if DEBUG_STORESE 
88ac					DMARK "AP2" 
88ac f5				push af  
88ad 3a c1 88			ld a, (.dmark)  
88b0 32 65 ee			ld (debug_mark),a  
88b3 3a c2 88			ld a, (.dmark+1)  
88b6 32 66 ee			ld (debug_mark+1),a  
88b9 3a c3 88			ld a, (.dmark+2)  
88bc 32 67 ee			ld (debug_mark+2),a  
88bf 18 03			jr .pastdmark  
88c1 ..			.dmark: db "AP2"  
88c4 f1			.pastdmark: pop af  
88c5			endm  
# End of macro DMARK
88c5					CALLMONITOR 
88c5 cd 6f ee			call debug_vector  
88c8				endm  
# End of macro CALLMONITOR
88c8				endif 
88c8			 
88c8				; update file extent count 
88c8			 
88c8 11 74 ea			ld de, store_page 
88cb			 
88cb cd 87 81			call storage_read_block 
88ce			 
88ce				if DEBUG_STORESE 
88ce					DMARK "AP3" 
88ce f5				push af  
88cf 3a e3 88			ld a, (.dmark)  
88d2 32 65 ee			ld (debug_mark),a  
88d5 3a e4 88			ld a, (.dmark+1)  
88d8 32 66 ee			ld (debug_mark+1),a  
88db 3a e5 88			ld a, (.dmark+2)  
88de 32 67 ee			ld (debug_mark+2),a  
88e1 18 03			jr .pastdmark  
88e3 ..			.dmark: db "AP3"  
88e6 f1			.pastdmark: pop af  
88e7			endm  
# End of macro DMARK
88e7					CALLMONITOR 
88e7 cd 6f ee			call debug_vector  
88ea				endm  
# End of macro CALLMONITOR
88ea				endif 
88ea			;	ld (store_tmppageid), hl 
88ea			 
88ea 3a 76 ea			ld a, (store_page+2) 
88ed 3c				inc a 
88ee 32 76 ea			ld (store_page+2), a 
88f1 32 67 ea			ld (store_tmpext), a 
88f4				 
88f4				if DEBUG_STORESE 
88f4					DMARK "AP3" 
88f4 f5				push af  
88f5 3a 09 89			ld a, (.dmark)  
88f8 32 65 ee			ld (debug_mark),a  
88fb 3a 0a 89			ld a, (.dmark+1)  
88fe 32 66 ee			ld (debug_mark+1),a  
8901 3a 0b 89			ld a, (.dmark+2)  
8904 32 67 ee			ld (debug_mark+2),a  
8907 18 03			jr .pastdmark  
8909 ..			.dmark: db "AP3"  
890c f1			.pastdmark: pop af  
890d			endm  
# End of macro DMARK
890d					CALLMONITOR 
890d cd 6f ee			call debug_vector  
8910				endm  
# End of macro CALLMONITOR
8910				endif 
8910 2a 5f ea			ld hl, (store_tmppageid) 
8913 11 74 ea			ld de, store_page 
8916 cd ec 81			call storage_write_block 
8919			 
8919				; find free block 
8919			 
8919 11 00 00			ld de, 0			 ; file extent to locate 
891c			 
891c 21 40 00				ld hl, STORE_BLOCK_PHY 
891f cd ba 84				call storage_findnextid 
8922 cd 13 8d			call ishlzero 
8925 ca 75 88			jp z, .sa_notfound 
8928			 
8928					; TODO handle no space left 
8928					 
8928 22 5f ea				ld (store_tmppageid), hl 
892b			 
892b				if DEBUG_STORESE 
892b					DMARK "AP4" 
892b f5				push af  
892c 3a 40 89			ld a, (.dmark)  
892f 32 65 ee			ld (debug_mark),a  
8932 3a 41 89			ld a, (.dmark+1)  
8935 32 66 ee			ld (debug_mark+1),a  
8938 3a 42 89			ld a, (.dmark+2)  
893b 32 67 ee			ld (debug_mark+2),a  
893e 18 03			jr .pastdmark  
8940 ..			.dmark: db "AP4"  
8943 f1			.pastdmark: pop af  
8944			endm  
# End of macro DMARK
8944					CALLMONITOR 
8944 cd 6f ee			call debug_vector  
8947				endm  
# End of macro CALLMONITOR
8947				endif 
8947					; init the buffer with zeros so we can id if the buffer is full or not 
8947			 
8947 e5					push hl 
8948 c5					push bc 
8949			 
8949 21 74 ea				ld hl, store_page 
894c 06 40				ld b, STORE_BLOCK_PHY 
894e 3e 00				ld a, 0 
8950 77			.zeroblock:	ld (hl), a 
8951 23					inc hl 
8952 10 fc				djnz .zeroblock 
8954			 
8954 c1					pop bc 
8955 e1					pop hl 
8956			 
8956					; construct block 
8956			 
8956 3a 68 ea				ld a, (store_tmpid) 
8959 32 74 ea				ld (store_page), a   ; file id 
895c 3a 67 ea				ld a, (store_tmpext)   ; extent for this block 
895f 32 75 ea				ld (store_page+1), a 
8962			 
8962 e1					pop hl    ; get string to write 
8963 06 3e				ld b, STORE_BLOCK_PHY-2       ; exclude count of file id and extent 
8965 11 76 ea				ld de, store_page+2 
8968			 
8968				if DEBUG_STORESE 
8968					DMARK "AP5" 
8968 f5				push af  
8969 3a 7d 89			ld a, (.dmark)  
896c 32 65 ee			ld (debug_mark),a  
896f 3a 7e 89			ld a, (.dmark+1)  
8972 32 66 ee			ld (debug_mark+1),a  
8975 3a 7f 89			ld a, (.dmark+2)  
8978 32 67 ee			ld (debug_mark+2),a  
897b 18 03			jr .pastdmark  
897d ..			.dmark: db "AP5"  
8980 f1			.pastdmark: pop af  
8981			endm  
# End of macro DMARK
8981					CALLMONITOR 
8981 cd 6f ee			call debug_vector  
8984				endm  
# End of macro CALLMONITOR
8984				endif 
8984			 
8984			 
8984			 
8984					; fill buffer with data until end of string or full block 
8984			 
8984 7e			.appd:		ld a, (hl) 
8985 12					ld (de), a 
8986 fe 00				cp 0 
8988 28 04				jr z, .appdone 
898a 23					inc hl 
898b 13					inc de 
898c 10 f6				djnz .appd 
898e			 
898e e5			.appdone:	push hl		 	; save current source in case we need to go around again 
898f f5					push af   		; save last byte dumped 
8990			 
8990			 
8990 2a 5f ea			ld hl, (store_tmppageid) 
8993 11 74 ea			ld de, store_page 
8996				if DEBUG_STORESE 
8996					DMARK "AP6" 
8996 f5				push af  
8997 3a ab 89			ld a, (.dmark)  
899a 32 65 ee			ld (debug_mark),a  
899d 3a ac 89			ld a, (.dmark+1)  
89a0 32 66 ee			ld (debug_mark+1),a  
89a3 3a ad 89			ld a, (.dmark+2)  
89a6 32 67 ee			ld (debug_mark+2),a  
89a9 18 03			jr .pastdmark  
89ab ..			.dmark: db "AP6"  
89ae f1			.pastdmark: pop af  
89af			endm  
# End of macro DMARK
89af					CALLMONITOR 
89af cd 6f ee			call debug_vector  
89b2				endm  
# End of macro CALLMONITOR
89b2				endif 
89b2 cd ec 81				call storage_write_block 
89b5			 
89b5			 
89b5				; was that a full block of data written? 
89b5				; any more to write out? 
89b5			 
89b5				; if yes then set vars and jump to start of function again 
89b5			 
89b5 f1					pop af 
89b6 d1					pop de 
89b7			 
89b7 fe 00				cp 0		 ; no, string was fully written 
89b9 c8					ret z 
89ba			 
89ba					; setup vars for next cycle 
89ba			 
89ba 3a 68 ea				ld a, (store_tmpid) 
89bd 6f					ld l, a 
89be 26 00				ld h, 0 
89c0			 
89c0 c3 77 88			 	jp storage_append	 ; yes, need to write out some more 
89c3			 
89c3			 
89c3			 
89c3			 
89c3			 
89c3			 
89c3			 
89c3			if DEBUG_STORECF 
89c3			storageput:	 
89c3					ret 
89c3			storageread: 
89c3					ld hl, store_page 
89c3					ld b, 200 
89c3					ld a,0 
89c3			.src:		ld (hl),a 
89c3					inc hl 
89c3					djnz .src 
89c3					 
89c3			 
89c3					ld de, 0 
89c3					ld bc, 1 
89c3					ld hl, store_page 
89c3					call cfRead 
89c3			 
89c3				call cfGetError 
89c3				ld hl,scratch 
89c3				call hexout 
89c3				ld hl, scratch+2 
89c3				ld a, 0 
89c3				ld (hl),a 
89c3				ld de, scratch 
89c3				ld a,display_row_1 
89c3				call str_at_display 
89c3				call update_display 
89c3			 
89c3					ld hl, store_page 
89c3					ld (os_cur_ptr),hl 
89c3			 
89c3					ret 
89c3			endif 
89c3			 
89c3			 
89c3			; Clear out the main buffer store (used to remove junk before writing a new block) 
89c3			 
89c3			storage_clear_page: 
89c3 e5				push hl 
89c4 d5				push de 
89c5 c5				push bc 
89c6 21 74 ea			ld hl, store_page 
89c9 3e 00			ld a, 0 
89cb 77				ld (hl), a 
89cc			 
89cc 11 75 ea			ld de, store_page+1 
89cf 01 19 01			ld bc, STORE_BLOCK_LOG+1 
89d2			 
89d2 ed b0			ldir 
89d4				 
89d4 c1				pop bc 
89d5 d1				pop de 
89d6 e1				pop hl 
89d7 c9				ret 
89d8			 
89d8			; eof 
# End of file firmware_storage.asm
89d8			  
89d8			; support routines for above hardware abstraction layer  
89d8			  
89d8			include "firmware_general.asm"        ; general support functions  
89d8			 
89d8			; word look up 
89d8			 
89d8			; in 
89d8			; a is the index 
89d8			; hl is pointer start of array 
89d8			; 
89d8			; returns 
89d8			; hl to the word 
89d8			; 
89d8			 
89d8			table_lookup:  
89d8 d5					push de 
89d9 eb					ex de, hl 
89da			 
89da 6f					ld l, a 
89db 26 00				ld h, 0 
89dd 29					add hl, hl 
89de 19					add hl, de 
89df 7e					ld a, (hl) 
89e0 23					inc hl 
89e1 66					ld h,(hl) 
89e2 6f					ld l, a 
89e3			 
89e3 d1					pop de 
89e4 c9					ret 
89e5			 
89e5			; Delay loops 
89e5			 
89e5			 
89e5			 
89e5			aDelayInMS: 
89e5 c5				push bc 
89e6 47				ld b,a 
89e7			msdelay: 
89e7 c5				push bc 
89e8				 
89e8			 
89e8 01 41 00			ld bc,041h 
89eb cd 03 8a			call delayloop 
89ee c1				pop bc 
89ef 05				dec b 
89f0 20 f5			jr nz,msdelay 
89f2			 
89f2			;if CPU_CLOCK_8MHZ 
89f2			;msdelay8: 
89f2			;	push bc 
89f2			;	 
89f2			; 
89f2			;	ld bc,041h 
89f2			;	call delayloop 
89f2			;	pop bc 
89f2			;	dec b 
89f2			;	jr nz,msdelay8 
89f2			;endif 
89f2			 
89f2			 
89f2 c1				pop bc 
89f3 c9				ret 
89f4			 
89f4			 
89f4			delay250ms: 
89f4				;push de 
89f4 01 00 40			ld bc, 04000h 
89f7 c3 03 8a			jp delayloop 
89fa			delay500ms: 
89fa				;push de 
89fa 01 00 80			ld bc, 08000h 
89fd c3 03 8a			jp delayloop 
8a00			delay1s: 
8a00				;push bc 
8a00			   ; Clobbers A, d and e 
8a00 01 00 00		    ld      bc,0      ; # 0ffffh = approx 1s 
8a03			delayloop: 
8a03 c5			    push bc 
8a04			 
8a04			if BASE_CPM 
8a04				ld bc, CPM_DELAY_TUNE 
8a04			.cpmloop: 
8a04				push bc 
8a04			 
8a04			endif 
8a04			 
8a04			 
8a04			 
8a04			delayloopi: 
8a04			;	push bc 
8a04			;.dl: 
8a04 cb 47		    bit     0,a    	; 8 
8a06 cb 47		    bit     0,a    	; 8 
8a08 cb 47		    bit     0,a    	; 8 
8a0a e6 ff		    and     255  	; 7 
8a0c 0b			    dec     bc      	; 6 
8a0d 79			    ld      a,c     	; 4 
8a0e b0			    or      b     	; 4 
8a0f c2 04 8a		    jp      nz,delayloopi   	; 10, total = 55 states/iteration 
8a12			    ; 65536 iterations * 55 states = 3604480 states = 2.00248 seconds 
8a12				;pop de 
8a12			;pop bc 
8a12			 
8a12			if BASE_CPM 
8a12				pop bc 
8a12				 
8a12			    dec     bc      	; 6 
8a12			    ld      a,c     	; 4 
8a12			    or      b     	; 4 
8a12			    jp      nz,.cpmloop   	; 10, total = 55 states/iteration 
8a12				 
8a12			 
8a12			endif 
8a12			;if CPU_CLOCK_8MHZ 
8a12			;    pop bc 
8a12			;    push bc 
8a12			;.dl8: 
8a12			;    bit     0,a    	; 8 
8a12			;    bit     0,a    	; 8 
8a12			;    bit     0,a    	; 8 
8a12			;    and     255  	; 7 
8a12			;    dec     bc      	; 6 
8a12			;    ld      a,c     	; 4 
8a12			;    or      b     	; 4 
8a12			;    jp      nz,.dl8   	; 10, total = 55 states/iteration 
8a12			;endif 
8a12			 
8a12			;if CPU_CLOCK_10MHZ 
8a12			;    pop bc 
8a12			;    push bc 
8a12			;.dl8: 
8a12			;    bit     0,a    	; 8 
8a12			;    bit     0,a    	; 8 
8a12			;    bit     0,a    	; 8 
8a12			;    and     255  	; 7 
8a12			;    dec     bc      	; 6 
8a12			;    ld      a,c     	; 4 
8a12			;    or      b     	; 4 
8a12			;    jp      nz,.dl8   	; 10, total = 55 states/iteration 
8a12			;endif 
8a12 c1			    pop bc 
8a13			 
8a13 c9				ret 
8a14			 
8a14			 
8a14			 
8a14			; eof 
# End of file firmware_general.asm
8a14			include "firmware_display.asm"      ; frame buffer screen abstraction layer  
8a14			; display routines that use the physical hardware abstraction layer 
8a14			 
8a14			 
8a14			; Display an activity indicator 
8a14			; Each call returns the new char pointed to in hl 
8a14			 
8a14			active: 
8a14 3a c0 eb			ld a, (display_active) 
8a17 fe 06			cp 6 
8a19			 
8a19 20 02			jr nz, .sne 
8a1b				; gone past the last one reset sequence 
8a1b 3e ff			ld a, 255 
8a1d			 
8a1d			.sne:   
8a1d				; get the next char in seq 
8a1d 3c				inc a 
8a1e 32 c0 eb			ld (display_active), a 
8a21			 
8a21				; look up the string in the table 
8a21 21 38 8a			ld hl, actseq 
8a24 cb 27			sla a 
8a26 cd ea 8c			call addatohl 
8a29 cd f7 9d			call loadwordinhl 
8a2c			 
8a2c				; forth will write the to string when pushing so move from rom to ram 
8a2c			 
8a2c 11 c1 eb			ld de, display_active+1 
8a2f 01 02 00			ld bc, 2 
8a32 ed b0			ldir 
8a34			 
8a34 21 c1 eb			ld hl, display_active+1 
8a37 c9				ret 
8a38				 
8a38				 
8a38			 
8a38			 
8a38			;db "|/-\|-\" 
8a38			 
8a38			actseq: 
8a38			 
8a38 46 8a		dw spin0 
8a3a 48 8a		dw spin1 
8a3c 4a 8a		dw spin2 
8a3e 4c 8a		dw spin3 
8a40 4a 8a		dw spin2 
8a42 48 8a		dw spin1 
8a44 46 8a		dw spin0 
8a46			 
8a46 .. 00		spin0: db " ", 0 
8a48 .. 00		spin1: db "-", 0 
8a4a .. 00		spin2: db "+", 0 
8a4c .. 00		spin3: db "#", 0 
8a4e			 
8a4e			 
8a4e			; information window 
8a4e			 
8a4e			; pass hl with 1st string to display 
8a4e			; pass de with 2nd string to display 
8a4e			 
8a4e			info_panel: 
8a4e e5				push hl 
8a4f			 
8a4f 2a c6 eb			ld hl, (display_fb_active) 
8a52 e5				push hl    ; future de destination 
8a53 21 ab ed				ld hl, display_fb0 
8a56 22 c6 eb				ld (display_fb_active), hl 
8a59			 
8a59			;	call clear_display 
8a59			 
8a59				if BASE_CPM 
8a59				ld a, '.' 
8a59				else 
8a59 3e a5			ld a, 165 
8a5b				endif 
8a5b cd c2 8a			call fill_display 
8a5e			 
8a5e			 
8a5e 3e 55			ld a, display_row_3 + 5 
8a60 cd d0 8a			call str_at_display 
8a63			 
8a63 e1				pop hl 
8a64 d1				pop de 
8a65			 
8a65 e5				push hl 
8a66			 
8a66			 
8a66 3e 2d			ld a, display_row_2 + 5 
8a68 cd d0 8a			call str_at_display 
8a6b			 
8a6b			 
8a6b cd e0 8a			call update_display 
8a6e cd fd 99			call next_page_prompt 
8a71 cd bd 8a			call clear_display 
8a74			 
8a74				 
8a74 21 0a ed				ld hl, display_fb1 
8a77 22 c6 eb				ld (display_fb_active), hl 
8a7a cd e0 8a			call update_display 
8a7d			 
8a7d e1				pop hl 
8a7e			 
8a7e c9				ret 
8a7f			 
8a7f			 
8a7f			 
8a7f			 
8a7f			; TODO windowing? 
8a7f			 
8a7f			; TODO scroll line up 
8a7f			 
8a7f			scroll_up: 
8a7f			 
8a7f e5				push hl 
8a80 d5				push de 
8a81 c5				push bc 
8a82			 
8a82				; get frame buffer  
8a82			 
8a82 2a c6 eb			ld hl, (display_fb_active) 
8a85 e5				push hl    ; future de destination 
8a86			 
8a86 11 28 00			ld  de, display_cols 
8a89 19				add hl, de 
8a8a			 
8a8a d1				pop de 
8a8b			 
8a8b				;ex de, hl 
8a8b 01 9f 00			ld bc, display_fb_len -1  
8a8e			;if DEBUG_FORTH_WORDS 
8a8e			;	DMARK "SCL" 
8a8e			;	CALLMONITOR 
8a8e			;endif	 
8a8e ed b0			ldir 
8a90			 
8a90				; wipe bottom row 
8a90			 
8a90			 
8a90 2a c6 eb			ld hl, (display_fb_active) 
8a93 11 a0 00			ld de, display_cols*display_rows 
8a96 19				add hl, de 
8a97 06 28			ld b, display_cols 
8a99 3e 20			ld a, ' ' 
8a9b			.scwipe: 
8a9b 77				ld (hl), a 
8a9c 2b				dec hl 
8a9d 10 fc			djnz .scwipe 
8a9f			 
8a9f				;pop hl 
8a9f			 
8a9f c1				pop bc 
8aa0 d1				pop de 
8aa1 e1				pop hl 
8aa2			 
8aa2 c9				ret 
8aa3			 
8aa3			 
8aa3			;scroll_upo: 
8aa3			;	ld de, display_row_1 
8aa3			 ;	ld hl, display_row_2 
8aa3			;	ld bc, display_cols 
8aa3			;	ldir 
8aa3			;	ld de, display_row_2 
8aa3			 ;	ld hl, display_row_3 
8aa3			;	ld bc, display_cols 
8aa3			;	ldir 
8aa3			;	ld de, display_row_3 
8aa3			 ;	ld hl, display_row_4 
8aa3			;	ld bc, display_cols 
8aa3			;	ldir 
8aa3			 
8aa3			; TODO clear row 4 
8aa3			 
8aa3			;	ret 
8aa3			 
8aa3				 
8aa3			scroll_down: 
8aa3			 
8aa3 e5				push hl 
8aa4 d5				push de 
8aa5 c5				push bc 
8aa6			 
8aa6				; get frame buffer  
8aa6			 
8aa6 2a c6 eb			ld hl, (display_fb_active) 
8aa9			 
8aa9 11 9f 00			ld de, display_fb_len - 1 
8aac 19				add hl, de 
8aad			 
8aad e5			push hl    ; future de destination 
8aae			 
8aae 11 28 00			ld  de, display_cols 
8ab1 ed 52			sbc hl, de 
8ab3			 
8ab3			 
8ab3 d1				pop de 
8ab4			 
8ab4			;	ex de, hl 
8ab4 01 9f 00			ld bc, display_fb_len -1  
8ab7			 
8ab7			 
8ab7				 
8ab7			 
8ab7 ed b0			ldir 
8ab9			 
8ab9				; wipe bottom row 
8ab9			 
8ab9			 
8ab9			;	ld hl, (display_fb_active) 
8ab9			;;	ld de, display_cols*display_rows 
8ab9			;;	add hl, de 
8ab9			;	ld b, display_cols 
8ab9			;	ld a, ' ' 
8ab9			;.scwiped: 
8ab9			;	ld (hl), a 
8ab9			;	dec hl 
8ab9			;	djnz .scwiped 
8ab9			 
8ab9				;pop hl 
8ab9			 
8ab9 c1				pop bc 
8aba d1				pop de 
8abb e1				pop hl 
8abc			 
8abc c9				ret 
8abd			;scroll_down: 
8abd			;	ld de, display_row_4 
8abd			;	ld hl, display_row_3 
8abd			;	ld bc, display_cols 
8abd			;	ldir 
8abd			;	ld de, display_row_3 
8abd			; 	ld hl, display_row_2 
8abd			;	ld bc, display_cols 
8abd			;	ldir 
8abd			;	ld de, display_row_2 
8abd			;	ld hl, display_row_1 
8abd			;	ld bc, display_cols 
8abd			;	ldir 
8abd			;;; TODO clear row 1 
8abd			;	ret 
8abd			 
8abd			 
8abd			 
8abd			 
8abd			 
8abd			; clear active frame buffer 
8abd			 
8abd			clear_display: 
8abd 3e 20			ld a, ' ' 
8abf c3 c2 8a			jp fill_display 
8ac2			 
8ac2			; fill active frame buffer with a char in A 
8ac2			 
8ac2			fill_display: 
8ac2 06 a0			ld b,display_fb_len 
8ac4 2a c6 eb			ld hl, (display_fb_active) 
8ac7 77			.fd1:	ld (hl),a 
8ac8 23				inc hl 
8ac9 10 fc			djnz .fd1 
8acb 23				inc hl 
8acc 3e 00			ld a,0 
8ace 77				ld (hl),a 
8acf			 
8acf			 
8acf c9				ret 
8ad0			; Write string (DE) at pos (A) to active frame buffer 
8ad0			 
8ad0 2a c6 eb		str_at_display:    ld hl,(display_fb_active) 
8ad3 06 00					ld b,0 
8ad5 4f					ld c,a 
8ad6 09					add hl,bc 
8ad7 1a			.sad1: 		LD   A, (DE)        ;Get character from string 
8ad8 b7			            OR   A              ;Null terminator? 
8ad9 c8			            RET  Z              ;Yes, so finished 
8ada 77					ld (hl),a 
8adb 23				inc hl 
8adc 13			            INC  DE             ;Point to next character 
8add 18 f8		            JR   .sad1     ;Repeat 
8adf c9					ret 
8ae0			 
8ae0			; using current frame buffer write to physical display 
8ae0			 
8ae0			update_display: 
8ae0 e5				push hl 
8ae1 2a c6 eb			ld hl, (display_fb_active) 
8ae4 cd 15 e0			call write_display 
8ae7 e1				pop hl 
8ae8 c9				ret 
8ae9			 
8ae9			; TODO scrolling 
8ae9			 
8ae9			 
8ae9			; move cursor right one char 
8ae9			cursor_right: 
8ae9			 
8ae9				; TODO shift right 
8ae9				; TODO if beyond max col 
8ae9				; TODO       cursor_next_line 
8ae9			 
8ae9 c9				ret 
8aea			 
8aea			 
8aea			cursor_next_line: 
8aea				; TODO first char 
8aea				; TODO line down 
8aea				; TODO if past last row 
8aea				; TODO    scroll up 
8aea			 
8aea c9				ret 
8aeb			 
8aeb			cursor_left: 
8aeb				; TODO shift left 
8aeb				; TODO if beyond left  
8aeb				; TODO     cursor prev line 
8aeb				 
8aeb c9				ret 
8aec			 
8aec			cursor_prev_line: 
8aec				; TODO last char 
8aec				; TODO line up 
8aec				; TODO if past first row 
8aec				; TODO   scroll down 
8aec			 
8aec c9				ret 
8aed			 
8aed			 
8aed			cout: 
8aed				; A - char 
8aed c9				ret 
8aee			 
8aee			 
8aee			; Display a menu and allow item selection (optional toggle items) 
8aee			; 
8aee			; format: 
8aee			; hl pointer to word array with zero term for items 
8aee			; e.g.    db item1 
8aee			;         db .... 
8aee			;         db 0 
8aee			; 
8aee			; a = starting menu item  
8aee			; 
8aee			; de = pointer item toggle array   (todo) 
8aee			; 
8aee			; returns item selected in a 1-... 
8aee			; returns 0 if back button pressed 
8aee			; 
8aee			; NOTE: Uses system frame buffer to display 
8aee			; 
8aee			; LEFT, Q = go back 
8aee			; RIGHT, SPACE, CR = select 
8aee			; UP, A - Up 
8aee			; DOWN, Z - Down 
8aee			 
8aee			 
8aee			 
8aee			 
8aee			 
8aee			menu: 
8aee			 
8aee					; keep array pointer 
8aee			 
8aee 22 6d ea				ld (store_tmp1), hl 
8af1 32 6b ea				ld (store_tmp2), a 
8af4			 
8af4					; check for key bounce 
8af4			 
8af4			if BASE_KEV 
8af4			 
8af4			.mbounce:	call cin 
8af4					cp 0 
8af4					jr nz, .mbounce 
8af4			endif 
8af4					; for ease use ex 
8af4			 
8af4					; use menu on fb0 so as not to disrupt user screens ie a menu popup 
8af4 21 ab ed				ld hl, display_fb0 
8af7 22 c6 eb				ld (display_fb_active), hl 
8afa			 
8afa cd bd 8a		.mloop:		call clear_display 
8afd cd e0 8a				call update_display 
8b00			 
8b00					; draw selection id '>' at 1 
8b00			 
8b00					; init start of list display 
8b00			 
8b00 3e 05				ld a, 5 
8b02 32 69 ea				ld (store_tmp3), a   ; display row count 
8b05 3a 6b ea				ld a,( store_tmp2) 
8b08 32 6c ea				ld (store_tmp2+1), a   ; display item count 
8b0b			 
8b0b					 
8b0b			.mitem:	 
8b0b			 
8b0b			 
8b0b 3a 6c ea				ld a,(store_tmp2+1) 
8b0e 6f					ld l, a 
8b0f 26 00				ld h, 0 
8b11 29					add hl, hl 
8b12 ed 5b 6d ea			ld de, (store_tmp1) 
8b16 19					add hl, de 
8b17 7e					ld a, (hl) 
8b18 23					inc hl 
8b19 66					ld h,(hl) 
8b1a 6f					ld l, a 
8b1b			 
8b1b cd 13 8d				call ishlzero 
8b1e 28 1a				jr z, .mdone 
8b20			 
8b20 eb					ex de, hl 
8b21 3a 69 ea				ld a, (store_tmp3) 
8b24 cd d0 8a				call str_at_display 
8b27					 
8b27			 
8b27					; next item 
8b27 3a 6c ea				ld a, (store_tmp2+1) 
8b2a 3c					inc a 
8b2b 32 6c ea				ld (store_tmp2+1), a   ; display item count 
8b2e			 
8b2e			 		; next row 
8b2e			 
8b2e 3a 69 ea				ld a, (store_tmp3) 
8b31 c6 28				add display_cols 
8b33 32 69 ea				ld (store_tmp3), a 
8b36			 
8b36					; at end of screen? 
8b36			 
8b36 fe 10				cp display_rows*4 
8b38 20 d1				jr nz, .mitem 
8b3a			 
8b3a			 
8b3a			.mdone: 
8b3a cd 13 8d				call ishlzero 
8b3d 28 08				jr z, .nodn 
8b3f			 
8b3f 3e 78				ld a, display_row_4 
8b41 11 c0 8b				ld de, .mdown 
8b44 cd d0 8a				call str_at_display 
8b47			 
8b47					; draw options to fill the screens with active item on line 1 
8b47					; if current option is 2 or more then display ^ in top 
8b47			 
8b47 3a 6b ea		.nodn:		ld a, (store_tmp2) 
8b4a fe 00				cp 0 
8b4c 28 08				jr z, .noup 
8b4e			 
8b4e 3e 00				ld a, 0 
8b50 11 be 8b				ld de, .mup 
8b53 cd d0 8a				call str_at_display 
8b56			 
8b56 3e 02		.noup:		ld a, 2 
8b58 11 bc 8b				ld de, .msel 
8b5b cd d0 8a				call str_at_display 
8b5e			 
8b5e					; if current option + 1 is not null then display V in bottom 
8b5e					; get key 
8b5e cd e0 8a				call update_display 
8b61			 
8b61			 
8b61					; handle key 
8b61			 
8b61 cd a1 e0				call cin_wait 
8b64			 
8b64 fe 05				cp KEY_UP 
8b66 28 2b				jr z, .mgoup 
8b68 fe 61				cp 'a' 
8b6a 28 27				jr z, .mgoup 
8b6c fe 0a				cp KEY_DOWN 
8b6e 28 32				jr z, .mgod 
8b70 fe 7a				cp 'z' 
8b72 28 2e				jr z, .mgod 
8b74 fe 20				cp ' ' 
8b76 28 34				jr z, .goend 
8b78 fe 0c				cp KEY_RIGHT 
8b7a 28 30				jr z, .goend 
8b7c fe 0d				cp KEY_CR 
8b7e 28 2c				jr z, .goend 
8b80 fe 71				cp 'q' 
8b82 28 0b				jr z, .goback 
8b84			 
8b84 fe 0b				cp KEY_LEFT 
8b86 28 07				jr z, .goback 
8b88 fe 08				cp KEY_BS 
8b8a 28 03				jr z, .goback 
8b8c c3 fa 8a				jp .mloop 
8b8f			 
8b8f			.goback: 
8b8f 3e 00			ld a, 0 
8b91 18 1d			jr .goend2 
8b93			 
8b93				; move up one 
8b93			.mgoup: 
8b93 3a 6b ea				ld a, (store_tmp2) 
8b96 fe 00				cp 0 
8b98 ca fa 8a				jp z, .mloop 
8b9b 3d					dec a 
8b9c 32 6b ea				ld (store_tmp2), a 
8b9f c3 fa 8a				jp .mloop 
8ba2			 
8ba2				; move down one 
8ba2			.mgod: 
8ba2 3a 6b ea				ld a, (store_tmp2) 
8ba5 3c					inc a 
8ba6 32 6b ea				ld (store_tmp2), a 
8ba9 c3 fa 8a				jp .mloop 
8bac			 
8bac			 
8bac			.goend: 
8bac					; get selected item number 
8bac			 
8bac 3a 6b ea				ld a, (store_tmp2) 
8baf 3c					inc a 
8bb0			 
8bb0			.goend2: 
8bb0 f5					push af 
8bb1			 
8bb1					; restore active fb 
8bb1					; TODO BUG assumes fb1 
8bb1			 
8bb1 21 0a ed				ld hl, display_fb1 
8bb4 22 c6 eb				ld (display_fb_active), hl 
8bb7			 
8bb7					; restore main regs 
8bb7			 
8bb7			 
8bb7 cd e0 8a				call update_display 
8bba			 
8bba f1					pop af 
8bbb			 
8bbb c9				ret 
8bbc			 
8bbc .. 00		.msel:   db ">",0 
8bbe .. 00		.mup:   db "^",0 
8bc0 .. 00		.mdown:   db "v",0 
8bc2			 
8bc2			 
8bc2			; eof 
8bc2			 
# End of file firmware_display.asm
8bc2			include "firmware_maths.asm"     ; any odd maths stuff   TODO removed until I fix up the rng code  
8bc2			; random number generators 
8bc2			 
8bc2			 
8bc2			; https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random 
8bc2			 
8bc2			 
8bc2			;-----> Generate a random number 
8bc2			; output a=answer 0<=a<=255 
8bc2			; all registers are preserved except: af 
8bc2			random: 
8bc2 e5			        push    hl 
8bc3 d5			        push    de 
8bc4 2a a5 eb		        ld      hl,(randData) 
8bc7 ed 5f		        ld      a,r 
8bc9 57			        ld      d,a 
8bca 5e			        ld      e,(hl) 
8bcb 19			        add     hl,de 
8bcc 85			        add     a,l 
8bcd ac			        xor     h 
8bce 22 a5 eb		        ld      (randData),hl 
8bd1 d1			        pop     de 
8bd2 e1			        pop     hl 
8bd3 c9			        ret 
8bd4			 
8bd4			 
8bd4			; randData here must be a 2 byte seed located in ram. While this is a fast generator, it's generally not considered very good in terms of randomness. 
8bd4			 
8bd4			 
8bd4			 
8bd4			;------LFSR------ 
8bd4			;James Montelongo 
8bd4			;optimized by Spencer Putt 
8bd4			;out: 
8bd4			; a = 8 bit random number 
8bd4			RandLFSR: 
8bd4 21 ab eb		        ld hl,LFSRSeed+4 
8bd7 5e			        ld e,(hl) 
8bd8 23			        inc hl 
8bd9 56			        ld d,(hl) 
8bda 23			        inc hl 
8bdb 4e			        ld c,(hl) 
8bdc 23			        inc hl 
8bdd 7e			        ld a,(hl) 
8bde 47			        ld b,a 
8bdf cb 13		        rl e  
8be1 cb 12			rl d 
8be3 cb 11		        rl c  
8be5 17				rla 
8be6 cb 13		        rl e  
8be8 cb 12			rl d 
8bea cb 11		        rl c  
8bec 17				rla 
8bed cb 13		        rl e  
8bef cb 12			rl d 
8bf1 cb 11		        rl c  
8bf3 17				rla 
8bf4 67			        ld h,a 
8bf5 cb 13		        rl e  
8bf7 cb 12			rl d 
8bf9 cb 11		        rl c  
8bfb 17				rla 
8bfc a8			        xor b 
8bfd cb 13		        rl e  
8bff cb 12			rl d 
8c01 ac			        xor h 
8c02 a9			        xor c 
8c03 aa			        xor d 
8c04 21 ad eb		        ld hl,LFSRSeed+6 
8c07 11 ae eb		        ld de,LFSRSeed+7 
8c0a 01 07 00		        ld bc,7 
8c0d ed b8		        lddr 
8c0f 12			        ld (de),a 
8c10 c9			        ret 
8c11			 
8c11			;While this may produces better numbers, it is slower, larger and requires a bigger seed than ionrandom. Assuming theres is a good seed to start, it should generate ~2^56 bytes before repeating. However if there is not a good seed(0 for example), then the numbers created will not be adequate. Unlike Ionrandom and its use of the r register, starting with the same seed the same numbers will be generated. With Ionrandom the code running may have an impact on the number generated. This means this method requires more initialization. 
8c11			 
8c11			;You can initialize with TI-OS's seeds, stored at seed1 and seed2, both are ti-floats but will serve the purpose.  
8c11			 
8c11			 
8c11			;This is a very fast, quality pseudo-random number generator. It combines a 16-bit Linear Feedback Shift Register and a 16-bit LCG. 
8c11			 
8c11			prng16: 
8c11			;Inputs: 
8c11			;   (seed1) contains a 16-bit seed value 
8c11			;   (seed2) contains a NON-ZERO 16-bit seed value 
8c11			;Outputs: 
8c11			;   HL is the result 
8c11			;   BC is the result of the LCG, so not that great of quality 
8c11			;   DE is preserved 
8c11			;Destroys: 
8c11			;   AF 
8c11			;cycle: 4,294,901,760 (almost 4.3 billion) 
8c11			;160cc 
8c11			;26 bytes 
8c11 2a 9f eb		    ld hl,(seed1) 
8c14 44			    ld b,h 
8c15 4d			    ld c,l 
8c16 29			    add hl,hl 
8c17 29			    add hl,hl 
8c18 2c			    inc l 
8c19 09			    add hl,bc 
8c1a 22 9f eb		    ld (seed1),hl 
8c1d 2a 9d eb		    ld hl,(seed2) 
8c20 29			    add hl,hl 
8c21 9f			    sbc a,a 
8c22 e6 2d		    and %00101101 
8c24 ad			    xor l 
8c25 6f			    ld l,a 
8c26 22 9d eb		    ld (seed2),hl 
8c29 09			    add hl,bc 
8c2a c9			    ret 
8c2b			 
8c2b			;On their own, LCGs and LFSRs don't produce great results and are generally very cyclical, but they are very fast to compute. The 16-bit LCG in the above example will bounce around and reach each number from 0 to 65535, but the lower bits are far more predictable than the upper bits. The LFSR mixes up the predictability of a given bit's state, but it hits every number except 0, meaning there is a slightly higher chance of any given bit in the result being a 1 instead of a 0. It turns out that by adding together the outputs of these two generators, we can lose the predictability of a bit's state, while ensuring it has a 50% chance of being 0 or 1. As well, since the periods, 65536 and 65535 are coprime, then the overall period of the generator is 65535*65536, which is over 4 billion.  
8c2b			 
8c2b			rand32: 
8c2b			;Inputs: 
8c2b			;   (seed1_0) holds the lower 16 bits of the first seed 
8c2b			;   (seed1_1) holds the upper 16 bits of the first seed 
8c2b			;   (seed2_0) holds the lower 16 bits of the second seed 
8c2b			;   (seed2_1) holds the upper 16 bits of the second seed 
8c2b			;   **NOTE: seed2 must be non-zero 
8c2b			;Outputs: 
8c2b			;   HL is the result 
8c2b			;   BC,DE can be used as lower quality values, but are not independent of HL. 
8c2b			;Destroys: 
8c2b			;   AF 
8c2b			;Tested and passes all CAcert tests 
8c2b			;Uses a very simple 32-bit LCG and 32-bit LFSR 
8c2b			;it has a period of 18,446,744,069,414,584,320 
8c2b			;roughly 18.4 quintillion. 
8c2b			;LFSR taps: 0,2,6,7  = 11000101 
8c2b			;291cc 
8c2b			;seed1_0=$+1 
8c2b			;    ld hl,12345 
8c2b			;seed1_1=$+1 
8c2b			;    ld de,6789 
8c2b			;    ld b,h 
8c2b			;    ld c,l 
8c2b			;    add hl,hl \ rl e \ rl d 
8c2b			;    add hl,hl \ rl e \ rl d 
8c2b			;    inc l 
8c2b			;    add hl,bc 
8c2b			;    ld (seed1_0),hl 
8c2b			;    ld hl,(seed1_1) 
8c2b			;    adc hl,de 
8c2b			;    ld (seed1_1),hl 
8c2b			;    ex de,hl 
8c2b			;seed2_0=$+1 
8c2b			;    ld hl,9876 
8c2b			;seed2_1=$+1 
8c2b			;    ld bc,54321 
8c2b			;    add hl,hl \ rl c \ rl b 
8c2b			;    ld (seed2_1),bc 
8c2b			;    sbc a,a 
8c2b			;    and %11000101 
8c2b			;    xor l 
8c2b			;    ld l,a 
8c2b			;    ld (seed2_0),hl 
8c2b			;    ex de,hl 
8c2b			;    add hl,bc 
8c2b			;    ret 
8c2b			; 
8c2b			 
8c2b			; 16-bit xorshift pseudorandom number generator by John Metcalf 
8c2b			; 20 bytes, 86 cycles (excluding ret) 
8c2b			 
8c2b			; returns   hl = pseudorandom number 
8c2b			; corrupts   a 
8c2b			 
8c2b			; generates 16-bit pseudorandom numbers with a period of 65535 
8c2b			; using the xorshift method: 
8c2b			 
8c2b			; hl ^= hl << 7 
8c2b			; hl ^= hl >> 9 
8c2b			; hl ^= hl << 8 
8c2b			 
8c2b			; some alternative shift triplets which also perform well are: 
8c2b			; 6, 7, 13; 7, 9, 13; 9, 7, 13. 
8c2b			 
8c2b			;  org 32768 
8c2b			 
8c2b			xrnd: 
8c2b 2a a3 eb		  ld hl,(xrandc)       ; seed must not be 0 
8c2e 3e 00		  ld a,0 
8c30 bd			  cp l 
8c31 20 02		  jr nz, .xrnd1 
8c33 2e 01		  ld l, 1 
8c35			.xrnd1: 
8c35			 
8c35 7c			  ld a,h 
8c36 1f			  rra 
8c37 7d			  ld a,l 
8c38 1f			  rra 
8c39 ac			  xor h 
8c3a 67			  ld h,a 
8c3b 7d			  ld a,l 
8c3c 1f			  rra 
8c3d 7c			  ld a,h 
8c3e 1f			  rra 
8c3f ad			  xor l 
8c40 6f			  ld l,a 
8c41 ac			  xor h 
8c42 67			  ld h,a 
8c43			 
8c43 22 a3 eb		  ld (xrandc),hl 
8c46			 
8c46 c9			  ret 
8c47			;  
8c47			 
8c47			 
8c47			;;;; int maths 
8c47			 
8c47			; https://map.grauw.nl/articles/mult_div_shifts.php 
8c47			; Divide 16-bit values (with 16-bit result) 
8c47			; In: Divide BC by divider DE 
8c47			; Out: BC = result, HL = rest 
8c47			; 
8c47			Div16: 
8c47 21 00 00		    ld hl,0 
8c4a 78			    ld a,b 
8c4b 06 08		    ld b,8 
8c4d			Div16_Loop1: 
8c4d 17			    rla 
8c4e ed 6a		    adc hl,hl 
8c50 ed 52		    sbc hl,de 
8c52 30 01		    jr nc,Div16_NoAdd1 
8c54 19			    add hl,de 
8c55			Div16_NoAdd1: 
8c55 10 f6		    djnz Div16_Loop1 
8c57 17			    rla 
8c58 2f			    cpl 
8c59 47			    ld b,a 
8c5a 79			    ld a,c 
8c5b 48			    ld c,b 
8c5c 06 08		    ld b,8 
8c5e			Div16_Loop2: 
8c5e 17			    rla 
8c5f ed 6a		    adc hl,hl 
8c61 ed 52		    sbc hl,de 
8c63 30 01		    jr nc,Div16_NoAdd2 
8c65 19			    add hl,de 
8c66			Div16_NoAdd2: 
8c66 10 f6		    djnz Div16_Loop2 
8c68 17			    rla 
8c69 2f			    cpl 
8c6a 41			    ld b,c 
8c6b 4f			    ld c,a 
8c6c c9			ret 
8c6d			 
8c6d			 
8c6d			;http://z80-heaven.wikidot.com/math 
8c6d			; 
8c6d			;Inputs: 
8c6d			;     DE and A are factors 
8c6d			;Outputs: 
8c6d			;     A is not changed 
8c6d			;     B is 0 
8c6d			;     C is not changed 
8c6d			;     DE is not changed 
8c6d			;     HL is the product 
8c6d			;Time: 
8c6d			;     342+6x 
8c6d			; 
8c6d			Mult16: 
8c6d			 
8c6d 06 08		     ld b,8          ;7           7 
8c6f 21 00 00		     ld hl,0         ;10         10 
8c72 29			       add hl,hl     ;11*8       88 
8c73 07			       rlca          ;4*8        32 
8c74 30 01		       jr nc,$+3     ;(12|18)*8  96+6x 
8c76 19			         add hl,de   ;--         -- 
8c77 10 f9		       djnz $-5      ;13*7+8     99 
8c79 c9			ret 
8c7a			 
8c7a			; 
8c7a			; Square root of 16-bit value 
8c7a			; In:  HL = value 
8c7a			; Out:  D = result (rounded down) 
8c7a			; 
8c7a			;Sqr16: 
8c7a			;    ld de,#0040 
8c7a			;    ld a,l 
8c7a			;    ld l,h 
8c7a			;    ld h,d 
8c7a			;    or a 
8c7a			;    ld b,8 
8c7a			;Sqr16_Loop: 
8c7a			;    sbc hl,de 
8c7a			;    jr nc,Sqr16_Skip 
8c7a			;    add hl,de 
8c7a			;Sqr16_Skip: 
8c7a			;    ccf 
8c7a			;    rl d 
8c7a			;    add a,a 
8c7a			;    adc hl,hl 
8c7a			;    add a,a 
8c7a			;    adc hl,hl 
8c7a			;    djnz Sqr16_Loop 
8c7a			;    ret 
8c7a			; 
8c7a			; 
8c7a			; Divide 8-bit values 
8c7a			; In: Divide E by divider C 
8c7a			; Out: A = result, B = rest 
8c7a			; 
8c7a			Div8: 
8c7a af			    xor a 
8c7b 06 08		    ld b,8 
8c7d			Div8_Loop: 
8c7d cb 13		    rl e 
8c7f 17			    rla 
8c80 91			    sub c 
8c81 30 01		    jr nc,Div8_NoAdd 
8c83 81			    add a,c 
8c84			Div8_NoAdd: 
8c84 10 f7		    djnz Div8_Loop 
8c86 47			    ld b,a 
8c87 7b			    ld a,e 
8c88 17			    rla 
8c89 2f			    cpl 
8c8a c9			    ret 
8c8b			 
8c8b			; 
8c8b			; Multiply 8-bit value with a 16-bit value (unrolled) 
8c8b			; In: Multiply A with DE 
8c8b			; Out: HL = result 
8c8b			; 
8c8b			Mult12U: 
8c8b 2e 00		    ld l,0 
8c8d 87			    add a,a 
8c8e 30 01		    jr nc,Mult12U_NoAdd0 
8c90 19			    add hl,de 
8c91			Mult12U_NoAdd0: 
8c91 29			    add hl,hl 
8c92 87			    add a,a 
8c93 30 01		    jr nc,Mult12U_NoAdd1 
8c95 19			    add hl,de 
8c96			Mult12U_NoAdd1: 
8c96 29			    add hl,hl 
8c97 87			    add a,a 
8c98 30 01		    jr nc,Mult12U_NoAdd2 
8c9a 19			    add hl,de 
8c9b			Mult12U_NoAdd2: 
8c9b 29			    add hl,hl 
8c9c 87			    add a,a 
8c9d 30 01		    jr nc,Mult12U_NoAdd3 
8c9f 19			    add hl,de 
8ca0			Mult12U_NoAdd3: 
8ca0 29			    add hl,hl 
8ca1 87			    add a,a 
8ca2 30 01		    jr nc,Mult12U_NoAdd4 
8ca4 19			    add hl,de 
8ca5			Mult12U_NoAdd4: 
8ca5 29			    add hl,hl 
8ca6 87			    add a,a 
8ca7 30 01		    jr nc,Mult12U_NoAdd5 
8ca9 19			    add hl,de 
8caa			Mult12U_NoAdd5: 
8caa 29			    add hl,hl 
8cab 87			    add a,a 
8cac 30 01		    jr nc,Mult12U_NoAdd6 
8cae 19			    add hl,de 
8caf			Mult12U_NoAdd6: 
8caf 29			    add hl,hl 
8cb0 87			    add a,a 
8cb1 d0			    ret nc 
8cb2 19			    add hl,de 
8cb3 c9			    ret 
8cb4			 
8cb4			; 
8cb4			; Multiply 8-bit value with a 16-bit value (right rotating) 
8cb4			; In: Multiply A with DE 
8cb4			;      Put lowest value in A for most efficient calculation 
8cb4			; Out: HL = result 
8cb4			; 
8cb4			Mult12R: 
8cb4 21 00 00		    ld hl,0 
8cb7			Mult12R_Loop: 
8cb7 cb 3f		    srl a 
8cb9 30 01		    jr nc,Mult12R_NoAdd 
8cbb 19			    add hl,de 
8cbc			Mult12R_NoAdd: 
8cbc cb 23		    sla e 
8cbe cb 12		    rl d 
8cc0 b7			    or a 
8cc1 c2 b7 8c		    jp nz,Mult12R_Loop 
8cc4 c9			    ret 
8cc5			 
8cc5			; 
8cc5			; Multiply 16-bit values (with 32-bit result) 
8cc5			; In: Multiply BC with DE 
8cc5			; Out: BCHL = result 
8cc5			; 
8cc5			Mult32: 
8cc5 79			    ld a,c 
8cc6 48			    ld c,b 
8cc7 21 00 00		    ld hl,0 
8cca 06 10		    ld b,16 
8ccc			Mult32_Loop: 
8ccc 29			    add hl,hl 
8ccd 17			    rla 
8cce cb 11		    rl c 
8cd0 30 07		    jr nc,Mult32_NoAdd 
8cd2 19			    add hl,de 
8cd3 ce 00		    adc a,0 
8cd5 d2 d9 8c		    jp nc,Mult32_NoAdd 
8cd8 0c			    inc c 
8cd9			Mult32_NoAdd: 
8cd9 10 f1		    djnz Mult32_Loop 
8cdb 41			    ld b,c 
8cdc 4f			    ld c,a 
8cdd c9			    ret 
8cde			 
8cde			 
8cde			 
8cde			; 
8cde			; Multiply 8-bit values 
8cde			; In:  Multiply H with E 
8cde			; Out: HL = result 
8cde			; 
8cde			Mult8: 
8cde 16 00		    ld d,0 
8ce0 6a			    ld l,d 
8ce1 06 08		    ld b,8 
8ce3			Mult8_Loop: 
8ce3 29			    add hl,hl 
8ce4 30 01		    jr nc,Mult8_NoAdd 
8ce6 19			    add hl,de 
8ce7			Mult8_NoAdd: 
8ce7 10 fa		    djnz Mult8_Loop 
8ce9 c9			    ret 
8cea			 
8cea			 
8cea			 
8cea			 
8cea			 
8cea			 
8cea			 
8cea			 
8cea			;;http://z80-heaven.wikidot.com/math 
8cea			;;This divides DE by BC, storing the result in DE, remainder in HL 
8cea			; 
8cea			;DE_Div_BC:          ;1281-2x, x is at most 16 
8cea			;     ld a,16        ;7 
8cea			;     ld hl,0        ;10 
8cea			;     jp $+5         ;10 
8cea			;.DivLoop: 
8cea			;       add hl,bc    ;-- 
8cea			;       dec a        ;64 
8cea			;       jr z,.DivLoopEnd        ;86 
8cea			; 
8cea			;       sla e        ;128 
8cea			;       rl d         ;128 
8cea			;       adc hl,hl    ;240 
8cea			;       sbc hl,bc    ;240 
8cea			;       jr nc,.DivLoop ;23|21 
8cea			;       inc e        ;-- 
8cea			;       jp .DivLoop+1 
8cea			; 
8cea			;.DivLoopEnd: 
8cea			 
8cea			;HL_Div_C: 
8cea			;Inputs: 
8cea			;     HL is the numerator 
8cea			;     C is the denominator 
8cea			;Outputs: 
8cea			;     A is the remainder 
8cea			;     B is 0 
8cea			;     C is not changed 
8cea			;     DE is not changed 
8cea			;     HL is the quotient 
8cea			; 
8cea			;       ld b,16 
8cea			;       xor a 
8cea			;         add hl,hl 
8cea			;         rla 
8cea			;         cp c 
8cea			;         jr c,$+4 
8cea			;           inc l 
8cea			;           sub c 
8cea			;         djnz $-7 
8cea			 
8cea			; https://plutiedev.com/z80-add-8bit-to-16bit 
8cea			 
8cea			addatohl: 
8cea 85			    add   a, l    ; A = A+L 
8ceb 6f			    ld    l, a    ; L = A+L 
8cec 8c			    adc   a, h    ; A = A+L+H+carry 
8ced 95			    sub   l       ; A = H+carry 
8cee 67			    ld    h, a    ; H = H+carry 
8cef c9			ret 
8cf0			 
8cf0			addatode: 
8cf0 83			    add   a, e    ; A = A+L 
8cf1 5f			    ld    e, a    ; L = A+L 
8cf2 8a			    adc   a, d    ; A = A+L+H+carry 
8cf3 93			    sub   e       ; A = H+carry 
8cf4 57			    ld    d, a    ; H = H+carry 
8cf5 c9			ret 
8cf6			 
8cf6			 
8cf6			addatobc: 
8cf6 81			    add   a, c    ; A = A+L 
8cf7 4f			    ld    c, a    ; L = A+L 
8cf8 88			    adc   a, b    ; A = A+L+H+carry 
8cf9 91			    sub   c       ; A = H+carry 
8cfa 47			    ld    b, a    ; H = H+carry 
8cfb c9			ret 
8cfc			 
8cfc			subafromhl: 
8cfc			   ; If A=0 do nothing 
8cfc			    ; Otherwise flip A's sign. Since 
8cfc			    ; the upper byte becomes -1, also 
8cfc			    ; substract 1 from H. 
8cfc ed 44		    neg 
8cfe ca 07 8d		    jp    z, Skip 
8d01 25			    dec   h 
8d02			     
8d02			    ; Now add the low byte as usual 
8d02			    ; Two's complement takes care of 
8d02			    ; ensuring the result is correct 
8d02 85			    add   a, l 
8d03 6f			    ld    l, a 
8d04 8c			    adc   a, h 
8d05 95			    sub   l 
8d06 67			    ld    h, a 
8d07			Skip: 
8d07 c9				ret 
8d08			 
8d08			 
8d08			; compare hl and de 
8d08			; returns:  
8d08			; if hl = de, z=1, s=0, c0=0 
8d08			; if hl > de, z=0, s=0, c=0 
8d08			; if hl < de, z=0, s=1, c=1 
8d08			cmp16:	 
8d08 b7				or a 
8d09 ed 52			sbc hl,de 
8d0b e0				ret po 
8d0c 7c				ld a,h 
8d0d 1f				rra 
8d0e ee 40			xor 01000000B 
8d10 37				scf 
8d11 8f				adc a,a 
8d12 c9				ret 
8d13			 
8d13			 
8d13			; test if hl contains zero   - A is destroyed 
8d13			 
8d13			ishlzero:    
8d13 b7				or a     ; reset flags 
8d14 7c				ld a, h 
8d15 b5				or l        	 
8d16			 
8d16 c9				ret 
8d17			 
8d17			 
8d17			 
8d17			 
8d17			if FORTH_ENABLE_FLOATMATH 
8d17			;include "float/bbcmath.z80" 
8d17			include "float/lpfpcalc.asm" 
8d17			endif 
8d17			 
8d17			 
8d17			; eof 
8d17			 
# End of file firmware_maths.asm
8d17			include "firmware_strings.asm"   ; string handling  
8d17			 
8d17			 
8d17			; TODO string len 
8d17			; input text string, end on cr with zero term 
8d17			; a offset into frame buffer to start prompt 
8d17			; d is max length 
8d17			; e is display size TODO 
8d17			; c is current cursor position 
8d17			; hl is ptr to where string will be stored and edited directly 
8d17			 
8d17			 
8d17			; TODO check limit of buffer for new inserts 
8d17			; TODO check insert does not push beyond buffer 
8d17			; TODO scroll in a limited display area 
8d17			; TODO scroll whole screen on page wrap 
8d17			 
8d17			 
8d17			; TODO use LCD cursor? 
8d17			 
8d17			EDIT_V1: equ 0 
8d17			EDIT_V2: equ 1 
8d17			 
8d17			 
8d17			 
8d17			if EDIT_V2 
8d17			input_str: 
8d17			 
8d17 32 5e ee			    	ld (input_at_pos),a      ; save display position to start 
8d1a			;		ld (input_at_cursor),a	; save draw pos of cursor relative to start 
8d1a 22 61 ee				ld (input_start), hl     ; save ptr to buffer 
8d1d			;		ld a, c 
8d1d			;		call addatohl 
8d1d			;		ld (input_ptr), hl     ; save ptr to point under the cursor 
8d1d 7a					ld a,d 
8d1e 32 60 ee			        ld (input_size), a       ; save length of input area 
8d21 79					ld a, c 
8d22 32 4f ee				ld (input_cursor),a      ; init cursor start position relative to start of string 
8d25 7b					ld a,e 
8d26 32 5f ee			        ld (input_display_size), a       ; save length of input area that is displayed TODO 
8d29			 
8d29			 
8d29					; add a trailing space to make screen refresh nicer 
8d29			 
8d29					;ld hl, (input_start) 
8d29					;push hl 
8d29					;ld a, 0 
8d29					;call strlent 
8d29					;ld a, l 
8d29					;pop hl 
8d29					;call addatohl 
8d29					;dec hl 
8d29					;ld a, ' ' 
8d29					;ld (hl), a 
8d29					;inc hl 
8d29					;ld (hl), a 
8d29					;inc hl 
8d29					;ld a, 0 
8d29					;ld (hl), a 
8d29			 
8d29			; TODO move out to cin as cursor shape is used by the 4x4 ??? 
8d29					; init cursor shape if not set by the cin routines 
8d29 21 bb eb				ld hl, cursor_shape 
8d2c			if BASE_KEV 
8d2c					ld a, 255 
8d2c			else 
8d2c 3e 23				ld a, '#' 
8d2e			endif 
8d2e 77					ld (hl), a 
8d2f 23					inc hl 
8d30 3e 00				ld a, 0 
8d32 77					ld (hl), a 
8d33			 
8d33 3e 09				ld a, CUR_BLINK_RATE 
8d35 32 5a ee				ld (input_cur_flash), a 
8d38 3e 01				ld a, 1 
8d3a 32 59 ee				ld (input_cur_onoff),a 
8d3d			.inmain:	 
8d3d			 
8d3d cd 65 8e				call input_disp_ref 
8d40			 
8d40					; save current length of string 
8d40			 
8d40 2a 61 ee				ld hl, (input_start) 
8d43 3e 00				ld a, 0 
8d45 cd 5b 90				call strlent 
8d48 7d					ld a,l 
8d49 32 54 ee				ld (input_len), a 
8d4c			 
8d4c					;call input_disp_oncur 
8d4c			 
8d4c					; display current state of input buffer 
8d4c			 
8d4c					; clean any backspace chars 
8d4c			 
8d4c 3e 20				ld a, " " 
8d4e 32 bb e2				ld (scratch),a 
8d51 3e 00				ld a, 0 
8d53 32 bc e2				ld (scratch+1),a 
8d56 3a 5e ee				ld a,(input_at_pos) 
8d59 85					add l 
8d5a 11 bb e2				ld de, scratch 
8d5d cd d0 8a				call str_at_display 
8d60			 
8d60					; pause 1ms 
8d60			 
8d60 3e 01				ld a, 1 
8d62 cd e5 89				call aDelayInMS 
8d65			 
8d65			; display cursor if visible on this cycle 
8d65			 
8d65					; dec flash counter 
8d65 3a 5a ee				ld a, (input_cur_flash) 
8d68 3d					dec a 
8d69 32 5a ee				ld (input_cur_flash), a 
8d6c fe 00				cp 0 
8d6e 20 0d				jr nz, .inochgstate 
8d70			 
8d70			 
8d70					; reset on change of state 
8d70 3e 09				ld a, CUR_BLINK_RATE 
8d72 32 5a ee				ld (input_cur_flash), a 
8d75			 
8d75					; change state 
8d75 3a 59 ee				ld a,(input_cur_onoff) 
8d78 ed 44				neg 
8d7a 32 59 ee				ld (input_cur_onoff),a 
8d7d			 
8d7d			 
8d7d			 
8d7d			 
8d7d					; TODO is cursor visible? 
8d7d					; TODO if so then over write the char at curspos pos with the cursor shape 
8d7d			 
8d7d								 
8d7d			 
8d7d			.inochgstate: 
8d7d 3a 59 ee				ld a,(input_cur_onoff) 
8d80 fe ff				cp 255 
8d82 28 0e				jr z, .skipcursor 
8d84 3a 5e ee				ld a, (input_at_pos) 
8d87 47					ld b, a 
8d88 3a 4f ee				ld a, (input_cursor) 
8d8b 80					add b 
8d8c 11 bb eb				ld de, cursor_shape 
8d8f					 
8d8f cd d0 8a				call str_at_display 
8d92			 
8d92			.skipcursor: 
8d92				if DEBUG_INPUTV2 
8d92			 
8d92					ld a,(input_at_pos) 
8d92					ld hl, LFSRSeed 
8d92					call hexout 
8d92					ld a, (input_cursor) 
8d92					ld hl, LFSRSeed+2 
8d92					call hexout 
8d92					ld a,(input_size) 
8d92					ld hl, LFSRSeed+4 
8d92					call hexout 
8d92			 
8d92					ld a,(input_cur_onoff) 
8d92					ld hl, LFSRSeed+6 
8d92					call hexout 
8d92			 
8d92					ld a,(input_cur_flash) 
8d92					ld hl, LFSRSeed+8 
8d92					call hexout 
8d92			 
8d92					ld a,(input_len) 
8d92					ld hl, LFSRSeed+10 
8d92					call hexout 
8d92					ld hl, LFSRSeed+12 
8d92					ld a, 0 
8d92					ld (hl),a 
8d92					ld a, display_row_4 
8d92					ld de, LFSRSeed 
8d92					call str_at_display 
8d92				endif 
8d92 cd e0 8a				call update_display 
8d95			 
8d95					; TODO keyboard processing 
8d95			 
8d95			if BASE_CPM 
8d95					call cin_wait 
8d95			else 
8d95 cd a7 e0				call cin    ; _wait 
8d98			endif 
8d98 fe 00				cp 0 
8d9a ca 3d 8d				jp z, .inmain 
8d9d			 
8d9d fe 0b				cp KEY_LEFT    ; cursor left 
8d9f ca 57 8e				jp z, input_left 
8da2				 
8da2 fe 0c				cp KEY_RIGHT      ; cursor right 
8da4 ca 5e 8e				jp z, input_right 
8da7			 
8da7 fe 0d				cp KEY_CR 
8da9 c8					ret z 
8daa			 
8daa fe 08				cp KEY_BS 
8dac ca cc 8e				jp z, input_delchar 
8daf			 
8daf fe 06				cp KEY_NEXTWORD 
8db1 ca d8 8d				jp z, input_nxtword 
8db4			 
8db4 fe 07				cp KEY_PREVWORD 
8db6 ca ff 8d				jp z, input_prvword 
8db9			 
8db9 fe 0e				cp KEY_HOME    ; jump to start of line 
8dbb 20 08				jr nz, .ikh 
8dbd 3e 00				ld a, 0 
8dbf 32 4f ee				ld (input_cursor), a 
8dc2 ca 3d 8d				jp z, .inmain 
8dc5			.ikh: 
8dc5			 
8dc5 fe 0f				cp KEY_END     ; jump to end of line 
8dc7 20 09				jr nz, .ike 
8dc9 3a 54 ee				ld a, (input_len) 
8dcc 32 4f ee				ld (input_cursor),a 
8dcf ca 3d 8d				jp z, .inmain 
8dd2			.ike: 
8dd2 fe 05			        cp KEY_UP      ; recall last command 
8dd4 c8					ret z 
8dd5			;jr nz, .irec 
8dd5			; TODO next word 
8dd5			; TODO prev word 
8dd5			;  
8dd5			; 
8dd5			;	ld hl, scratch 
8dd5			;	ld de, os_last_cmd 
8dd5			;	call strcpy 
8dd5			;		jp  .inmain 
8dd5			.irec: 
8dd5			;		jr .instr1 
8dd5			 
8dd5			 
8dd5			 
8dd5					; if any keys not intercepted by above but are special keys like function keys then return them to the program 
8dd5			 
8dd5			; TODO return if any special keys are given 
8dd5			;		ld l, a 
8dd5			;		ld a, 28 ; KEY_F12   ; 27 
8dd5			;		sub l 
8dd5			;		ret m 
8dd5			;		ld a, l 
8dd5					; if no special key then insert as a char 
8dd5			 
8dd5 c3 9e 8e				jp input_inschr 
8dd8			 
8dd8				 
8dd8			input_nxtword: 
8dd8				; jump to start next word after the cursor 
8dd8			 
8dd8			.insknwn:	 
8dd8 cd 94 8e				call input_curptr	 
8ddb 7e					ld a,(hl)	 
8ddc fe 00				cp 0 
8dde ca 3d 8d				jp z, .inmain    ; end of string 
8de1			 
8de1			; if we are on a word, then move off of it 
8de1			 
8de1 fe 20				cp ' ' 
8de3 28 06				jr z, .inspace     ; we are on space so eat the space until we hit non-space 
8de5 21 4f ee				ld hl, input_cursor 
8de8 34					inc (hl) 
8de9 18 ed				jr .insknwn 
8deb			 
8deb			.inspace: 
8deb			 
8deb cd 94 8e				call input_curptr	 
8dee 7e					ld a,(hl)	 
8def fe 00				cp 0 
8df1 ca 3d 8d				jp z, .inmain    ; end of string 
8df4			 
8df4			; if we are on a word, then move off of it 
8df4			 
8df4 fe 20				cp ' ' 
8df6 c2 3d 8d				jp nz, .inmain     ; we are on non space so at next word 
8df9 21 4f ee				ld hl, input_cursor 
8dfc 34					inc (hl) 
8dfd 18 ec				jr .inspace 
8dff			 
8dff			 
8dff			 
8dff			 
8dff			input_prvword: 
8dff				; jump to the start of previous word before the cursor 
8dff			 
8dff			; where are we to start with currently? 
8dff			 
8dff cd 94 8e				call input_curptr	 
8e02 7e					ld a, (hl) 
8e03 fe 20				cp ' ' 
8e05 28 1d				jr z, .inspacep     ; we are on space so eat the space until we hit non-space 
8e07			 
8e07			 
8e07			 
8e07			.inskpwn:	 
8e07 3a 4f ee				ld a,(input_cursor) 
8e0a fe 00				cp 0 
8e0c ca 3d 8d				jp z, .inmain    ; start of string 
8e0f			 
8e0f			;if we are on a word, then move off of it 
8e0f			 
8e0f cd 94 8e				call input_curptr	 
8e12 7e					ld a, (hl) 
8e13 fe 20				cp ' ' 
8e15 28 06				jr z, .iwstart     ; we are on space so eat the space until we hit non-space 
8e17					;jp z, .inmain    ; start of string 
8e17 21 4f ee				ld hl, input_cursor 
8e1a 35					dec (hl) 
8e1b 18 ea				jr .inskpwn 
8e1d			.iwstart: 
8e1d 21 4f ee				ld hl, input_cursor 
8e20 34					inc (hl) 
8e21 c3 3d 8d				jp .inmain 
8e24					 
8e24			 
8e24			.inspacep: 
8e24			 
8e24					;jp .inmain    ; start of string 
8e24			 
8e24			 
8e24			 
8e24 3a 4f ee				ld a,(input_cursor) 
8e27 fe 00				cp 0 
8e29 ca 3d 8d				jp z, .inmain    ; start of string 
8e2c			 
8e2c			; if we are on a word, then move off of it 
8e2c			 
8e2c cd 94 8e				call input_curptr	 
8e2f 7e					ld a, (hl) 
8e30 fe 20				cp ' ' 
8e32 c2 3b 8e				jp nz, .incharp     ; we are on non space so at end of prev word 
8e35 21 4f ee				ld hl, input_cursor 
8e38 35					dec (hl) 
8e39 18 e9				jr .inspacep 
8e3b			 
8e3b			 
8e3b			.incharp:	 
8e3b					; eat the word to get to the start 
8e3b 3a 4f ee				ld a,(input_cursor) 
8e3e fe 00				cp 0 
8e40 ca 3d 8d				jp z, .inmain    ; start of string 
8e43			 
8e43			; if we are on a word, then move off of it 
8e43			 
8e43 cd 94 8e				call input_curptr	 
8e46 7e					ld a, (hl) 
8e47 fe 20				cp ' ' 
8e49 28 06				jr z, .ipwordst     ; we are on space so eat the space until we hit non-space 
8e4b 21 4f ee				ld hl, input_cursor 
8e4e 35					dec (hl) 
8e4f 18 ea				jr .incharp 
8e51			.ipwordst: 
8e51					; at space before the prev word so reposition over it 
8e51 21 4f ee				ld hl, input_cursor 
8e54 34					inc (hl) 
8e55 18 b0				jr .inskpwn 
8e57					 
8e57			 
8e57			 
8e57			input_left: 
8e57				; move cursor left 
8e57 21 4f ee			ld hl, input_cursor 
8e5a 35				dec (hl) 
8e5b			;	cp 0 
8e5b			;	jp z, .inmain    ; ignore left as at the start of the string 
8e5b c3 3d 8d			jp .inmain 
8e5e			 
8e5e			input_right: 
8e5e				; move cursor right 
8e5e				 
8e5e				;ld a, (input_size) 
8e5e				;ld b, a 
8e5e 21 4f ee			ld hl, input_cursor 
8e61 34				inc (hl) 
8e62				;dec b 
8e62				;cp 0 
8e62				;jp z, .inmain   ; ignore as at end of the string buffer 
8e62				;ld a, b 
8e62				;inc a 
8e62				;ld (input_cursor), a 
8e62 c3 3d 8d			jp .inmain 
8e65			 
8e65			 
8e65			 
8e65			input_disp_ref: 
8e65				; display the text from start of buffer (ie full refresh) 
8e65 3a 5e ee			ld a, (input_at_pos) 
8e68 2a 61 ee			ld hl,(input_start) 
8e6b eb				ex de, hl 
8e6c cd d0 8a			call str_at_display  
8e6f c9				ret 
8e70			input_disp_oncur: 
8e70				; display the text from cursor position to end of buffer 
8e70				; TODO position start of string at cursor position on screen 
8e70				; TODO draw from that point on 
8e70 3a 4f ee			ld a, (input_cursor) 
8e73 47				ld b, a 
8e74 3a 5e ee			ld a, (input_at_pos) 
8e77 80				add b 
8e78 48				ld c, b     ; save a 
8e79 78				ld a, b     ; inc string start for cursor 
8e7a 2a 61 ee			ld hl,(input_start) 
8e7d cd ea 8c			call addatohl 
8e80 eb				ex de, hl 
8e81 79				ld a, c 
8e82 cd d0 8a			call str_at_display  
8e85 c9				ret 
8e86			 
8e86			input_nxtw: 
8e86				; Find next word 
8e86 c9				ret 
8e87			 
8e87			input_prvw: 
8e87				; Find previous word 
8e87 c9				ret 
8e88			 
8e88			input_lenrem:   
8e88				; Calculate the length of string remaining from current cursor 
8e88				; position to end of buffer (exc null term) 
8e88				 
8e88 3a 4f ee			ld a, (input_cursor) 
8e8b 4f				ld c, a 
8e8c 3a 60 ee			ld a, (input_size) 
8e8f 91				sub c 
8e90 06 00			ld b, 0 
8e92 0d				dec c 
8e93 c9				ret	 
8e94			 
8e94			input_curptr: 
8e94				; calc address of the character under the cursor 
8e94				 
8e94 2a 61 ee			ld hl, (input_start) 
8e97 3a 4f ee			ld a, (input_cursor) 
8e9a cd ea 8c			call addatohl 
8e9d c9				ret 
8e9e			 
8e9e			input_inschr: 
8e9e				; Insert char at cursor position 
8e9e f5				push af   ; save char 
8e9f				;call input_lenrem    ; get bc length of remaining string 
8e9f			 
8e9f				 
8e9f cd 94 8e			call input_curptr 
8ea2			;	ld hl, (input_start) 
8ea2			;	ld a, (input_cursor) 
8ea2			;	call addatohl 
8ea2				;push hl   ; save to come back to 
8ea2			 
8ea2				; shift everything up one to end of buffer 
8ea2			 
8ea2				;push hl 
8ea2				;dec de 
8ea2				;inc de 
8ea2			;	ldir 
8ea2				 
8ea2				;pop hl 
8ea2			 
8ea2				; are we adding to the end of line? 
8ea2			 
8ea2 3a 4f ee			ld a, (input_cursor) 
8ea5 47				ld b, a 
8ea6 3a 54 ee			ld a, (input_len) 
8ea9 b8				cp b 
8eaa 20 09			jr nz, .insmid   ; no, insert in middle of text 
8eac			 
8eac				; tack on the end of the line 
8eac f1				pop af 
8ead 77				ld (hl), a   ; save new char 
8eae 23				inc hl 
8eaf 3e 00			ld a, 0 
8eb1 77				ld (hl), a 
8eb2 c3 5e 8e			jp input_right 
8eb5				 
8eb5			.insmid: 
8eb5				; hl has insertion point so move everything up one to allow for insertion 
8eb5				;call input_shiftright 
8eb5 f1				pop af 
8eb6			 
8eb6			.shufinsmid: 
8eb6 47				ld b, a     ; b contains new char, c prev char at this position  
8eb7 7e				ld a, (hl) 
8eb8			 
8eb8 fe 00			cp 0    ; at end of string need to then dump new char and add term 
8eba 28 07			jr z, .endinsmid 
8ebc 4f				ld c, a 
8ebd 78				ld a, b 
8ebe 77				ld (hl), a 
8ebf 23				inc hl 
8ec0 79				ld a, c 
8ec1 18 f3			jr .shufinsmid 
8ec3				 
8ec3			 
8ec3			 
8ec3			 
8ec3			.endinsmid: 
8ec3 78				ld a, b 
8ec4 77				ld (hl), a 
8ec5 23				inc hl 
8ec6 3e 00			ld a, 0 
8ec8 77				ld (hl), a 
8ec9			 
8ec9			 
8ec9			;	ld (hl), a   ; save new char 
8ec9			 
8ec9 c3 5e 8e			jp input_right 
8ecc			 
8ecc			;input_shiftright: 
8ecc			;	; shift text right at cursor, hl has shift start 
8ecc			;	push hl 
8ecc			;	push de 
8ecc			;	push bc 
8ecc			; 
8ecc			; 
8ecc			;	; move to end of string past zero term 
8ecc			;	ld hl,(input_start) 
8ecc			;	ld a, (input_len) 
8ecc			;	call addatohl 
8ecc			;	inc hl 
8ecc			;;	inc hl 
8ecc			;;	inc hl 
8ecc			;	ld a, 0 
8ecc			;	ld (hl), a 
8ecc			;;	dec hl 
8ecc			;	 
8ecc			;;	ld (hl), a 
8ecc			;;	dec hl 
8ecc			; 
8ecc			;	push hl 
8ecc			;	pop de 
8ecc			;	inc de 
8ecc			;	 
8ecc			; 
8ecc			;;	ld hl,(input_start) 
8ecc			;;	ld a, (input_cursor) 
8ecc			;;	call addatohl 
8ecc			; 
8ecc			; 
8ecc			;	; calc how many bytes from cursor pos to end of string we need to shift 
8ecc			;	call input_lenrem    ; get bc length of remaining string 
8ecc			;	;ld a, (input_cursor) 
8ecc			;	;ld c, a 
8ecc			;	ld a, (input_len) 
8ecc			;	cp 2 
8ecc			;	jr z, .iskipzero	 
8ecc			;	;sub c 
8ecc			;	;inc a 
8ecc			;	;ld c, a 
8ecc			;	;ld b, 0 
8ecc			;	inc c 
8ecc			;	inc c 
8ecc			;	; move data 
8ecc			;	lddr 
8ecc			;.iskipzero: 
8ecc			; 
8ecc			;	pop bc 
8ecc			;	pop de 
8ecc			;	pop hl 
8ecc			;	ret	 
8ecc			 
8ecc			input_delchar: 
8ecc				; Delete char at cursor position 
8ecc cd 88 8e			call input_lenrem    ; get bc length of remaining string 
8ecf 2a 61 ee			ld hl, (input_start) 
8ed2 3a 4f ee			ld a, (input_cursor) 
8ed5 cd ea 8c			call addatohl 
8ed8			 
8ed8 e5				push hl 
8ed9 d1				pop de 
8eda 1b				dec de 
8edb			 
8edb			.dl:	 
8edb ed a0			ldi  
8edd 7e				ld a, (hl) 
8ede fe 00			cp 0 
8ee0 28 02			jr z, .dldone 
8ee2 18 f7			jr .dl 
8ee4			.dldone: 
8ee4 ed a0			ldi 
8ee6			 
8ee6 c3 57 8e			jp input_left 
8ee9			 
8ee9			 
8ee9			endif 
8ee9			 
8ee9			 
8ee9			 
8ee9			if EDIT_V1 
8ee9			input_str: 
8ee9			 
8ee9				    	ld (input_at_pos),a      ; save display position to start 
8ee9					add c 
8ee9					ld (input_at_cursor),a	; save draw pos of cursor 
8ee9					ld (input_start), hl     ; save ptr to buffer 
8ee9					ld a, c 
8ee9					call addatohl 
8ee9					ld (input_ptr), hl     ; save ptr to point under the cursor 
8ee9					ld a,d 
8ee9				        ld (input_size), a       ; save length of input area 
8ee9					ld a, c 
8ee9					ld (input_cursor),a      ; init cursor start position  
8ee9					ld a,e 
8ee9				        ld (input_display_size), a       ; save length of input area that is displayed TODO 
8ee9					 
8ee9					 
8ee9			 
8ee9			;		ld a,(input_ptr) 
8ee9			;		ld (input_under_cursor),a 	; save what is under the cursor 
8ee9			 
8ee9			; TODO move out to cin as cursor shape is used by the 4x4 ??? 
8ee9					; init cursor shape if not set by the cin routines 
8ee9					ld hl, cursor_shape 
8ee9			if BASE_KEV 
8ee9					ld a, 255 
8ee9			else 
8ee9					ld a, '#' 
8ee9			endif 
8ee9					ld (hl), a 
8ee9					inc hl 
8ee9					ld a, 0 
8ee9					ld (hl), a 
8ee9			 
8ee9					ld a, CUR_BLINK_RATE 
8ee9					ld (input_cur_flash), a 
8ee9					ld a, 1 
8ee9					ld (input_cur_onoff),a 
8ee9			 
8ee9			;	if DEBUG_INPUT 
8ee9			;		push af 
8ee9			;		ld a, 'I' 
8ee9			;		ld (debug_mark),a 
8ee9			;		pop af 
8ee9			;		CALLMONITOR 
8ee9			;	endif 
8ee9			.is1:		; main entry loop 
8ee9			 
8ee9			 
8ee9			 
8ee9					; pause 1ms 
8ee9			 
8ee9					ld a, 1 
8ee9					call aDelayInMS 
8ee9			 
8ee9					; dec flash counter 
8ee9					ld a, (input_cur_flash) 
8ee9					dec a 
8ee9					ld (input_cur_flash), a 
8ee9					cp 0 
8ee9					jr nz, .nochgstate 
8ee9			 
8ee9			 
8ee9					; change state 
8ee9					ld a,(input_cur_onoff) 
8ee9					neg 
8ee9					ld (input_cur_onoff),a 
8ee9			 
8ee9			 
8ee9					; reset on change of state 
8ee9					ld a, CUR_BLINK_RATE 
8ee9					ld (input_cur_flash), a 
8ee9			 
8ee9			.nochgstate: 
8ee9					 
8ee9					 
8ee9			 
8ee9					; display cursor  
8ee9			 
8ee9			;		ld hl, (input_start) 
8ee9			;		ld a, (input_cursor) 
8ee9			;		call addatohl 
8ee9			 
8ee9					; get char under cursor and replace with cursor 
8ee9			ld hl, (input_ptr) 
8ee9			;		ld a, (hl) 
8ee9			;		ld (input_under_cursor),a 
8ee9			;		ld a, '_' 
8ee9			;		ld (hl), a 
8ee9			 
8ee9					; display string 
8ee9			 
8ee9					ld de, (input_start) 
8ee9					ld a, (input_at_pos) 
8ee9					call str_at_display 
8ee9			;	        call update_display 
8ee9			 
8ee9					; find place to put the cursor 
8ee9			;		add h 
8ee9			;		ld l, display_row_1 
8ee9			;		sub l 
8ee9			; (input_at_pos) 
8ee9					;ld c, a 
8ee9			;		ld a, (input_cursor) 
8ee9			;		ld l, (input_at_pos) 
8ee9			;		;ld b, h 
8ee9			;		add l 
8ee9			;		ld (input_at_cursor),a 
8ee9					;ld l,h 
8ee9			 
8ee9			;		ld h, 0 
8ee9			;		ld l,(input_at_pos) 
8ee9			;		ld a, (input_cursor) 
8ee9			;		call addatohl 
8ee9			;		ld a, 074H-19			; TODO BUG I dont know why offset is showing 74H 
8ee9			;		call subafromhl 
8ee9			;		ld a,l 
8ee9			;		ld (input_at_cursor), a 
8ee9			 
8ee9				if DEBUG_INPUT 
8ee9					ld a, (hardware_diag) 
8ee9					cp 0 
8ee9					jr z, .skip_input_diag 
8ee9			 
8ee9					ld a,(input_at_pos) 
8ee9					ld hl, LFSRSeed 
8ee9					call hexout 
8ee9					ld a, (input_cursor) 
8ee9					ld hl, LFSRSeed+2 
8ee9					call hexout 
8ee9					ld a,(input_at_cursor) 
8ee9					ld hl, LFSRSeed+4 
8ee9					call hexout 
8ee9			 
8ee9					ld a,(input_cur_onoff) 
8ee9					ld hl, LFSRSeed+6 
8ee9					call hexout 
8ee9			 
8ee9					ld a,(input_cur_flash) 
8ee9					ld hl, LFSRSeed+8 
8ee9					call hexout 
8ee9			 
8ee9					ld a,(input_len) 
8ee9					ld hl, LFSRSeed+10 
8ee9					call hexout 
8ee9					ld hl, LFSRSeed+12 
8ee9					ld a, 0 
8ee9					ld (hl),a 
8ee9					ld a, display_row_4 
8ee9					ld de, LFSRSeed 
8ee9					call str_at_display 
8ee9					.skip_input_diag: 
8ee9				endif 
8ee9			 
8ee9					; decide on if we are showing the cursor this time round 
8ee9			 
8ee9					ld a, (input_cur_onoff) 
8ee9					cp 255 
8ee9					jr z, .skipcur 
8ee9			 
8ee9			 
8ee9					ld a,(input_at_cursor) 
8ee9					ld de, cursor_shape 
8ee9					call str_at_display 
8ee9			 
8ee9					; save length of current input string 
8ee9					ld hl, (input_start) 
8ee9					ld a, 0 
8ee9					call strlent 
8ee9					ld a,l 
8ee9					ld (input_len),a 
8ee9			 
8ee9			.skipcur: 
8ee9			 
8ee9				        call update_display 
8ee9					 
8ee9			 
8ee9			 
8ee9					; wait 
8ee9				 
8ee9					; TODO loop without wait to flash the cursor and char under cursor	 
8ee9					call cin    ; _wait 
8ee9			 
8ee9					cp 0 
8ee9					jp z, .is1 
8ee9			 
8ee9					; get ptr to char to input into 
8ee9			 
8ee9					ld c,a 
8ee9					ld hl, (input_start) 
8ee9					ld a, (input_cursor) 
8ee9					call addatohl 
8ee9					ld (input_ptr), hl 
8ee9					ld a,c 
8ee9			 
8ee9					; replace char under cursor 
8ee9			 
8ee9			;		ld hl, (input_ptr) 
8ee9			;		ld a, (input_under_cursor) 	; get what is under the cursor 
8ee9			;		ld (hl), a 
8ee9			 
8ee9			;	if DEBUG_INPUT 
8ee9			;		push af 
8ee9			;		ld a, 'i' 
8ee9			;		ld (debug_mark),a 
8ee9			;		pop af 
8ee9			;		CALLMONITOR 
8ee9			;	endif 
8ee9					cp KEY_HOME 
8ee9					jr nz, .iske 
8ee9			 
8ee9					ld a, (input_at_pos) 
8ee9					ld (input_at_cursor),a 
8ee9					ld a, 0 
8ee9					ld (input_cursor), a 
8ee9					jp .is1 
8ee9					 
8ee9			.iske:		cp KEY_END 
8ee9					jr nz, .isknw 
8ee9					jp .is1 
8ee9			 
8ee9			.isknw:		cp KEY_NEXTWORD 
8ee9					jr nz, .iskpw 
8ee9			 
8ee9			.isknwm:	ld hl, (input_ptr) 
8ee9					ld a,(hl)	 
8ee9					cp 0 
8ee9					jp z, .is1    ; end of string 
8ee9					cp ' ' 
8ee9					jp z, .is1    ; end of word 
8ee9					inc hl 
8ee9					ld (input_ptr), hl 
8ee9					ld a, (input_at_cursor) 
8ee9					inc a 
8ee9					ld (input_at_cursor), a 
8ee9					jr .isknwm 
8ee9			 
8ee9			.iskpw:		cp KEY_PREVWORD 
8ee9					jr nz, .iskl 
8ee9			.iskpwm:	 
8ee9					ld hl, (input_ptr) 
8ee9					ld a,(hl)	 
8ee9					cp 0  
8ee9					jp z, .is1    ; end of string 
8ee9					cp ' ' 
8ee9					jp z, .is1    ; end of word 
8ee9					dec hl 
8ee9					ld (input_ptr), hl 
8ee9					ld a, (input_at_cursor) 
8ee9					dec a 
8ee9					ld (input_at_cursor), a 
8ee9					jr .iskpwm 
8ee9			 
8ee9			 
8ee9			.iskl:		cp KEY_LEFT 
8ee9					jr nz, .isk1 
8ee9			 
8ee9					ld a, (input_cursor) 
8ee9			 
8ee9					cp 0 
8ee9					jp z, .is1 		; at start of line to ignore  
8ee9			 
8ee9					dec  a 		; TODO check underflow 
8ee9					ld (input_cursor), a 
8ee9			 
8ee9					ld hl, (input_ptr) 
8ee9					dec hl 
8ee9					ld (input_ptr), hl 
8ee9					 
8ee9					ld a, (input_at_cursor) 
8ee9					dec a 
8ee9					ld (input_at_cursor), a 
8ee9			 
8ee9					ld a, 1		; show cursor moving 
8ee9					ld (input_cur_onoff),a 
8ee9					ld a, CUR_BLINK_RATE 
8ee9					ld (input_cur_flash), a 
8ee9			 
8ee9					jp .is1 
8ee9			 
8ee9			.isk1:		cp KEY_RIGHT 
8ee9					jr nz, .isk2 
8ee9			 
8ee9					ld a,(input_len)		; TODO BUG why cant i load e direct? 
8ee9					ld e,a 
8ee9					ld a, (input_cursor) 
8ee9					cp e 
8ee9					jp z, .is1		; at the end of string so dont go right 
8ee9			 
8ee9					inc  a 		; TODO check overflow 
8ee9					ld (input_cursor), a 
8ee9			 
8ee9					ld a, (input_at_cursor) 
8ee9					inc a 
8ee9					ld (input_at_cursor), a 
8ee9			 
8ee9					ld hl, (input_ptr) 
8ee9					inc hl 
8ee9					ld (input_ptr), hl 
8ee9			 
8ee9					ld a, 1		; show cursor moving 
8ee9					ld (input_cur_onoff),a 
8ee9					ld a, CUR_BLINK_RATE 
8ee9					ld (input_cur_flash), a 
8ee9			 
8ee9					jp .is1 
8ee9			 
8ee9			.isk2:		cp KEY_UP 
8ee9			 
8ee9					jr nz, .isk3 
8ee9			 
8ee9					; swap last command with the current on 
8ee9			 
8ee9					; move cursor to start of string 
8ee9					ld hl, (input_start) 
8ee9					ld (input_ptr), hl 
8ee9			 
8ee9					ld a, (input_at_pos) 
8ee9					ld (input_at_cursor), a 
8ee9			 
8ee9					ld a, 0 
8ee9					ld (input_cursor), a 
8ee9					 
8ee9					; swap input and last command buffers 
8ee9			 
8ee9					ld hl, os_cli_cmd 
8ee9					ld de, os_last_cmd 
8ee9					ld b, 255 
8ee9			.swap1:		ld a, (hl) 
8ee9					ld c,a 
8ee9					ld a, (de) 
8ee9					ld (hl), a 
8ee9					ld a,c 
8ee9					ld (de),a 
8ee9					inc hl 
8ee9					inc de 
8ee9					djnz .swap1 
8ee9			 
8ee9			 
8ee9			 
8ee9			 
8ee9			 
8ee9					jp .is1 
8ee9			 
8ee9			.isk3:		cp KEY_BS 
8ee9					jr nz, .isk4 
8ee9			 
8ee9					ld a, (input_cursor) 
8ee9			 
8ee9					cp 0 
8ee9					jp z, .is1 		; at start of line to ignore  
8ee9			 
8ee9					dec  a 		; TODO check underflow 
8ee9					ld (input_cursor), a 
8ee9			 
8ee9					; hl is source 
8ee9					; de needs to be source - 1 
8ee9			 
8ee9			;		ld a, 0 
8ee9			;		dec hl 
8ee9			;		ld (hl), a 
8ee9			 
8ee9					ld hl, (input_ptr) 
8ee9					dec hl 
8ee9					ld (input_ptr), hl 
8ee9			 
8ee9					; shift all data 
8ee9			 
8ee9					push hl 
8ee9					inc hl 
8ee9					pop de 
8ee9					ld a, (input_len)		; TODO BUG WAS ld c, (input... 
8ee9					ld c,a 
8ee9					ld b,0 
8ee9					ldir  
8ee9			 
8ee9			 
8ee9			 
8ee9			 
8ee9					ld a, (input_at_cursor) 
8ee9					dec a 
8ee9					ld (input_at_cursor), a 
8ee9			 
8ee9			 
8ee9					ld a, 1		; show cursor moving 
8ee9					ld (input_cur_onoff),a 
8ee9					ld a, CUR_BLINK_RATE 
8ee9					ld (input_cur_flash), a 
8ee9			 
8ee9					; remove char 
8ee9					ld a, (input_at_cursor) 
8ee9					inc a 
8ee9					ld de,.iblank 
8ee9					call str_at_display 
8ee9			 
8ee9					jp .is1 
8ee9			 
8ee9			.isk4:		cp KEY_CR 
8ee9					jr z, .endinput 
8ee9			 
8ee9					; else add the key press to the end 
8ee9			 
8ee9					ld c, a			; save key pressed 
8ee9			 
8ee9					ld a,(hl)		; get what is currently under char 
8ee9			 
8ee9					cp 0			; we are at the end of the string 
8ee9					jr nz, .onchar 
8ee9					 
8ee9					; add a char to the end of the string 
8ee9				 
8ee9					ld (hl),c 
8ee9					inc hl 
8ee9			;		ld a,' ' 
8ee9			;		ld (hl),a 
8ee9			;		inc hl 
8ee9					ld a,0 
8ee9					ld (hl),a 
8ee9					dec hl 
8ee9			 
8ee9					ld a, (input_cursor) 
8ee9					inc a				; TODO check max string length and scroll  
8ee9					ld (input_cursor), a		; inc cursor pos 
8ee9							 
8ee9					ld a, (input_at_cursor) 
8ee9					inc a 
8ee9					ld (input_at_cursor), a 
8ee9			 
8ee9					ld hl, (input_ptr) 
8ee9					inc hl 
8ee9					ld (input_ptr), hl 
8ee9			 
8ee9					ld hl, (input_ptr) 
8ee9					inc hl 
8ee9					ld (input_ptr), hl 
8ee9			;	if DEBUG_INPUT 
8ee9			;		push af 
8ee9			;		ld a, '+' 
8ee9			;		ld (debug_mark),a 
8ee9			;		pop af 
8ee9			;		CALLMONITOR 
8ee9			;	endif 
8ee9					ld a, 1		; show cursor moving 
8ee9					ld (input_cur_onoff),a 
8ee9					ld a, CUR_BLINK_RATE 
8ee9					ld (input_cur_flash), a 
8ee9					jp .is1 
8ee9					 
8ee9			 
8ee9			 
8ee9					; if on a char then insert 
8ee9			.onchar: 
8ee9			 
8ee9					; TODO over flow check: make sure insert does not blow out buffer 
8ee9			 
8ee9					; need to do some maths to use lddr 
8ee9			 
8ee9					push hl   ; save char pos 
8ee9					push bc 
8ee9			 
8ee9					ld hl, (input_start) 
8ee9					ld a, (input_len) 
8ee9					call addatohl  		; end of string 
8ee9					inc hl 
8ee9					inc hl		; past zero term 
8ee9					push hl 
8ee9					inc hl 
8ee9					push hl  
8ee9			 
8ee9								; start and end of lddr set, now how much to move? 
8ee9			 
8ee9							 
8ee9					ld a, (input_cursor)		; BUG TODO why cant i load directly into b??? 
8ee9					ld b,a 
8ee9					ld a,(input_len) 
8ee9					ld e,a 
8ee9					sub b 
8ee9					inc a		;?? 
8ee9					inc a		;?? 
8ee9					inc a		;?? 
8ee9			 
8ee9					ld b,0 
8ee9					ld c,a 
8ee9			 
8ee9				if DEBUG_INPUT 
8ee9					push af 
8ee9					ld a, 'i' 
8ee9					ld (debug_mark),a 
8ee9					pop af 
8ee9			;		CALLMONITOR 
8ee9				endif 
8ee9					pop de 
8ee9					pop hl 
8ee9				if DEBUG_INPUT 
8ee9					push af 
8ee9					ld a, 'I' 
8ee9					ld (debug_mark),a 
8ee9					pop af 
8ee9			;		CALLMONITOR 
8ee9				endif 
8ee9					lddr 
8ee9				 
8ee9			 
8ee9			 
8ee9					; TODO have a key for insert/overwrite mode???? 
8ee9					pop bc 
8ee9					pop hl 
8ee9					ld (hl), c		; otherwise overwrite current char 
8ee9					 
8ee9			 
8ee9			 
8ee9			 
8ee9					ld a, (input_cursor) 
8ee9					inc  a 		; TODO check overflow 
8ee9					ld (input_cursor), a 
8ee9			 
8ee9					ld a, (input_at_cursor) 
8ee9					inc a 
8ee9					ld (input_at_cursor), a 
8ee9			 
8ee9					jp .is1 
8ee9			 
8ee9			.endinput:	; TODO look for end of string 
8ee9			 
8ee9					; add trailing space for end of token 
8ee9			 
8ee9					ld hl, (input_start) 
8ee9					ld a,(input_len) 
8ee9					call addatohl 
8ee9					ld a, ' ' 
8ee9					ld (hl),a 
8ee9					; TODO eof of parse marker 
8ee9			 
8ee9					inc hl 
8ee9					ld a, 0 
8ee9					ld (hl),a 
8ee9			 
8ee9			 
8ee9					ret 
8ee9			 
8ee9			.iblank: db " ",0 
8ee9			 
8ee9			 
8ee9			input_str_prev:	ld (input_at_pos), a 
8ee9					ld (input_start), hl 
8ee9					ld a,1			; add cursor 
8ee9					ld (hl),a 
8ee9					inc hl 
8ee9					ld a,0 
8ee9					ld (hl),a 
8ee9					ld (input_ptr), hl 
8ee9					ld a,d 
8ee9					ld (input_size), a 
8ee9					ld a,0 
8ee9					ld (input_cursor),a 
8ee9			.instr1:	 
8ee9			 
8ee9					; TODO do block cursor 
8ee9					; TODO switch cursor depending on the modifer key 
8ee9			 
8ee9					; update cursor shape change on key hold 
8ee9			 
8ee9					ld hl, (input_ptr) 
8ee9					dec hl 
8ee9					ld a,(cursor_shape) 
8ee9					ld (hl), a 
8ee9			 
8ee9					; display entered text 
8ee9					ld a,(input_at_pos) 
8ee9			            	CALL fLCD_Pos       ;Position cursor to location in A 
8ee9			            	LD   de, (input_start) 
8ee9			            	CALL fLCD_Str       ;Display string pointed to by DE 
8ee9			 
8ee9					call cin 
8ee9					cp 0 
8ee9					jr z, .instr1 
8ee9			 
8ee9					; proecess keyboard controls first 
8ee9			 
8ee9					ld hl,(input_ptr) 
8ee9			 
8ee9					cp KEY_CR	 ; pressing enter ends input 
8ee9					jr z, .instrcr 
8ee9			 
8ee9					cp KEY_BS 	; back space 
8ee9					jr nz, .instr2 
8ee9					; process back space 
8ee9			 
8ee9					; TODO stop back space if at start of string 
8ee9					dec hl 
8ee9					dec hl ; to over write cursor 
8ee9					ld a,(cursor_shape) 
8ee9					;ld a,0 
8ee9					ld (hl),a 
8ee9					inc hl 
8ee9					ld a," " 
8ee9					ld (hl),a 
8ee9					ld (input_ptr),hl 
8ee9					 
8ee9			 
8ee9					jr .instr1 
8ee9			 
8ee9			.instr2:	cp KEY_LEFT    ; cursor left 
8ee9					jr nz, .instr3 
8ee9					dec hl 
8ee9					ld (input_ptr),hl 
8ee9					jr .instr1 
8ee9				 
8ee9			.instr3:	cp KEY_RIGHT      ; cursor right 
8ee9					jr nz, .instr4 
8ee9					inc hl 
8ee9					ld (input_ptr),hl 
8ee9					jr .instr1 
8ee9			 
8ee9			.instr4:	cp KEY_HOME    ; jump to start of line 
8ee9					jr nz, .instr5 
8ee9					dec hl 
8ee9					ld (input_ptr),hl 
8ee9					jr .instr1 
8ee9			 
8ee9			.instr5:	cp KEY_END     ; jump to end of line 
8ee9					jr nz, .instr6 
8ee9					dec hl 
8ee9					ld (input_ptr),hl 
8ee9					jr .instr1 
8ee9			.instr6:        cp KEY_UP      ; recall last command 
8ee9					jr nz, .instrnew 
8ee9			 
8ee9				ld hl, scratch 
8ee9				ld de, os_last_cmd 
8ee9				call strcpy 
8ee9					jr .instr1 
8ee9			 
8ee9			 
8ee9			.instrnew:	; no special key pressed to see if we have room to store it 
8ee9			 
8ee9					; TODO do string size test 
8ee9			 
8ee9					dec hl ; to over write cursor 
8ee9					ld (hl),a 
8ee9					inc hl 
8ee9					ld a,(cursor_shape) 
8ee9					ld (hl),a 
8ee9					inc hl 
8ee9					ld a,0 
8ee9					ld (hl),a 
8ee9			 
8ee9					ld (input_ptr),hl 
8ee9					 
8ee9					jr .instr1 
8ee9			.instrcr:	dec hl		; remove cursor 
8ee9					ld a,' '	; TODO add a trailing space for safety 
8ee9					ld (hl),a 
8ee9					inc hl 
8ee9					ld a,0 
8ee9					ld (hl),a 
8ee9			 
8ee9			 
8ee9					; if at end of line scroll up    
8ee9					; TODO detecting only end of line 4 for scroll up  
8ee9			 
8ee9					;ld   
8ee9			 
8ee9					ret 
8ee9			 
8ee9			 
8ee9			endif 
8ee9			; strcpy hl = dest, de source 
8ee9			 
8ee9 1a			strcpy:   LD   A, (DE)        ;Get character from string 
8eea b7			            OR   A              ;Null terminator? 
8eeb c8			            RET  Z              ;Yes, so finished 
8eec 1a					ld a,(de) 
8eed 77					ld (hl),a 
8eee 13			            INC  DE             ;Point to next character 
8eef 23					inc hl 
8ef0 18 f7		            JR   strcpy       ;Repeat 
8ef2 c9					ret 
8ef3			 
8ef3			 
8ef3			; TODO string_at  
8ef3			; pass string which starts with lcd offset address and then null term string 
8ef3			 
8ef3			; TODO string to dec 
8ef3			; TODO string to hex 
8ef3			; TODO byte to string hex 
8ef3			; TODO byte to string dec 
8ef3			 
8ef3			 
8ef3			 
8ef3			; from z80uartmonitor 
8ef3			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
8ef3			; OUTPUT VALUE OF A IN HEX ONE NYBBLE AT A TIME 
8ef3			; pass hl for where to put the text 
8ef3			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
8ef3 c5			hexout:	PUSH BC 
8ef4 f5					PUSH AF 
8ef5 47					LD B, A 
8ef6					; Upper nybble 
8ef6 cb 3f				SRL A 
8ef8 cb 3f				SRL A 
8efa cb 3f				SRL A 
8efc cb 3f				SRL A 
8efe cd 0e 8f				CALL tohex 
8f01 77					ld (hl),a 
8f02 23					inc hl	 
8f03					 
8f03					; Lower nybble 
8f03 78					LD A, B 
8f04 e6 0f				AND 0FH 
8f06 cd 0e 8f				CALL tohex 
8f09 77					ld (hl),a 
8f0a 23					inc hl	 
8f0b					 
8f0b f1					POP AF 
8f0c c1					POP BC 
8f0d c9					RET 
8f0e					 
8f0e			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
8f0e			; TRANSLATE value in lower A TO 2 HEX CHAR CODES FOR DISPLAY 
8f0e			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
8f0e			tohex: 
8f0e e5					PUSH HL 
8f0f d5					PUSH DE 
8f10 16 00				LD D, 0 
8f12 5f					LD E, A 
8f13 21 1b 8f				LD HL, .DATA 
8f16 19					ADD HL, DE 
8f17 7e					LD A, (HL) 
8f18 d1					POP DE 
8f19 e1					POP HL 
8f1a c9					RET 
8f1b			 
8f1b			.DATA: 
8f1b 30					DEFB	30h	; 0 
8f1c 31					DEFB	31h	; 1 
8f1d 32					DEFB	32h	; 2 
8f1e 33					DEFB	33h	; 3 
8f1f 34					DEFB	34h	; 4 
8f20 35					DEFB	35h	; 5 
8f21 36					DEFB	36h	; 6 
8f22 37					DEFB	37h	; 7 
8f23 38					DEFB	38h	; 8 
8f24 39					DEFB	39h	; 9 
8f25 41					DEFB	41h	; A 
8f26 42					DEFB	42h	; B 
8f27 43					DEFB	43h	; C 
8f28 44					DEFB	44h	; D 
8f29 45					DEFB	45h	; E 
8f2a 46					DEFB	46h	; F 
8f2b			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
8f2b			;; 	ASCII char code for 0-9,A-F in A to single hex digit 
8f2b			;;    subtract $30, if result > 9 then subtract $7 more 
8f2b			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
8f2b			atohex: 
8f2b d6 30				SUB $30 
8f2d fe 0a				CP 10 
8f2f f8					RET M		; If result negative it was 0-9 so we're done 
8f30 d6 07				SUB $7		; otherwise, subtract $7 more to get to $0A-$0F 
8f32 c9					RET		 
8f33			 
8f33			 
8f33			 
8f33			 
8f33			; Get 2 ASCII characters as hex byte from pointer in hl 
8f33			 
8f33			BYTERD: 
8f33 16 00			LD	D,00h		;Set up 
8f35 cd 3d 8f			CALL	HEXCON		;Get byte and convert to hex 
8f38 87				ADD	A,A		;First nibble so 
8f39 87				ADD	A,A		;multiply by 16 
8f3a 87				ADD	A,A		; 
8f3b 87				ADD	A,A		; 
8f3c 57				LD	D,A		;Save hi nibble in D 
8f3d			HEXCON: 
8f3d 7e				ld a, (hl)		;Get next chr 
8f3e 23				inc hl 
8f3f d6 30			SUB	030h		;Makes '0'-'9' equal 0-9 
8f41 fe 0a			CP	00Ah		;Is it 0-9 ? 
8f43 38 02			JR	C,NALPHA	;If so miss next bit 
8f45 d6 07			SUB	007h		;Else convert alpha 
8f47			NALPHA: 
8f47 b2				OR	D		;Add hi nibble back 
8f48 c9				RET			; 
8f49			 
8f49			 
8f49			; 
8f49			; Get a word (16 bit) in hexadecimal notation. The result is returned in HL. 
8f49			; Since the routines get_byte and therefore get_nibble are called, only valid 
8f49			; characters (0-9a-f) are accepted. 
8f49			; 
8f49			;get_word        push    af 
8f49			;                call    get_byte        ; Get the upper byte 
8f49			;                ld      h, a 
8f49			;                call    get_byte        ; Get the lower byte 
8f49			;                ld      l, a 
8f49			;                pop     af 
8f49			;                ret 
8f49			; 
8f49			; Get a byte in hexadecimal notation. The result is returned in A. Since 
8f49			; the routine get_nibble is used only valid characters are accepted - the  
8f49			; input routine only accepts characters 0-9a-f. 
8f49			; 
8f49 c5			get_byte:        push    bc              ; Save contents of B (and C) 
8f4a 7e					ld a,(hl) 
8f4b 23					inc hl 
8f4c cd 71 8f		                call    nibble2val      ; Get upper nibble 
8f4f cb 07		                rlc     a 
8f51 cb 07		                rlc     a 
8f53 cb 07		                rlc     a 
8f55 cb 07		                rlc     a 
8f57 47			                ld      b, a            ; Save upper four bits 
8f58 7e					ld a,(hl) 
8f59 cd 71 8f		                call    nibble2val      ; Get lower nibble 
8f5c b0			                or      b               ; Combine both nibbles 
8f5d c1			                pop     bc              ; Restore B (and C) 
8f5e c9			                ret 
8f5f			; 
8f5f			; Get a hexadecimal digit from the serial line. This routine blocks until 
8f5f			; a valid character (0-9a-f) has been entered. A valid digit will be echoed 
8f5f			; to the serial line interface. The lower 4 bits of A contain the value of  
8f5f			; that particular digit. 
8f5f			; 
8f5f			;get_nibble      ld a,(hl)           ; Read a character 
8f5f			;                call    to_upper        ; Convert to upper case 
8f5f			;                call    is_hex          ; Was it a hex digit? 
8f5f			;                jr      nc, get_nibble  ; No, get another character 
8f5f			 ;               call    nibble2val      ; Convert nibble to value 
8f5f			 ;               call    print_nibble 
8f5f			 ;               ret 
8f5f			; 
8f5f			; is_hex checks a character stored in A for being a valid hexadecimal digit. 
8f5f			; A valid hexadecimal digit is denoted by a set C flag. 
8f5f			; 
8f5f			;is_hex          cp      'F' + 1         ; Greater than 'F'? 
8f5f			;                ret     nc              ; Yes 
8f5f			;                cp      '0'             ; Less than '0'? 
8f5f			;                jr      nc, is_hex_1    ; No, continue 
8f5f			;                ccf                     ; Complement carry (i.e. clear it) 
8f5f			;                ret 
8f5f			;is_hex_1        cp      '9' + 1         ; Less or equal '9*? 
8f5f			;                ret     c               ; Yes 
8f5f			;                cp      'A'             ; Less than 'A'? 
8f5f			;                jr      nc, is_hex_2    ; No, continue 
8f5f			;                ccf                     ; Yes - clear carry and return 
8f5f			;                ret 
8f5f			;is_hex_2        scf                     ; Set carry 
8f5f			;                ret 
8f5f			; 
8f5f			; Convert a single character contained in A to upper case: 
8f5f			; 
8f5f fe 61		to_upper:        cp      'a'             ; Nothing to do if not lower case 
8f61 d8			                ret     c 
8f62 fe 7b		                cp      'z' + 1         ; > 'z'? 
8f64 d0			                ret     nc              ; Nothing to do, either 
8f65 e6 5f		                and     $5f             ; Convert to upper case 
8f67 c9			                ret 
8f68			 
8f68			 
8f68			to_lower: 
8f68			 
8f68			   ; if char is in [A-Z] make it lower case 
8f68			 
8f68			   ; enter : a = char 
8f68			   ; exit  : a = lower case char 
8f68			   ; uses  : af 
8f68			 
8f68 fe 41		   cp 'A' 
8f6a d8			   ret c 
8f6b			    
8f6b fe 5b		   cp 'Z'+1 
8f6d d0			   ret nc 
8f6e			    
8f6e f6 20		   or $20 
8f70 c9			   ret 
8f71			 
8f71			; 
8f71			; Expects a hexadecimal digit (upper case!) in A and returns the 
8f71			; corresponding value in A. 
8f71			; 
8f71 fe 3a		nibble2val:      cp      '9' + 1         ; Is it a digit (less or equal '9')? 
8f73 38 02		                jr      c, nibble2val_1 ; Yes 
8f75 d6 07		                sub     7               ; Adjust for A-F 
8f77 d6 30		nibble2val_1:    sub     '0'             ; Fold back to 0..15 
8f79 e6 0f		                and     $f              ; Only return lower 4 bits 
8f7b c9			                ret 
8f7c			; 
8f7c			; Print_nibble prints a single hex nibble which is contained in the lower  
8f7c			; four bits of A: 
8f7c			; 
8f7c			;print_nibble    push    af              ; We won't destroy the contents of A 
8f7c			;                and     $f              ; Just in case... 
8f7c			;                add     a, '0'             ; If we have a digit we are done here. 
8f7c			;                cp      '9' + 1         ; Is the result > 9? 
8f7c			;                jr      c, print_nibble_1 
8f7c			;                add     a, 'A' - '0' - $a  ; Take care of A-F 
8f7c			;print_nibble_1  call    putc            ; Print the nibble and 
8f7c			;                pop     af              ; restore the original value of A 
8f7c			;                ret 
8f7c			;; 
8f7c			;; Send a CR/LF pair: 
8f7c			; 
8f7c			;crlf            push    af 
8f7c			;                ld      a, cr 
8f7c			;                call    putc 
8f7c			;                ld      a, lf 
8f7c			;                call    putc 
8f7c			;                pop     af 
8f7c			;                ret 
8f7c			; 
8f7c			; Print_word prints the four hex digits of a word to the serial line. The  
8f7c			; word is expected to be in HL. 
8f7c			; 
8f7c			;print_word      push    hl 
8f7c			;                push    af 
8f7c			;                ld      a, h 
8f7c			;                call    print_byte 
8f7c			;                ld      a, l 
8f7c			;                call    print_byte 
8f7c			;                pop     af 
8f7c			;                pop     hl 
8f7c			;                ret 
8f7c			; 
8f7c			; Print_byte prints a single byte in hexadecimal notation to the serial line. 
8f7c			; The byte to be printed is expected to be in A. 
8f7c			; 
8f7c			;print_byte      push    af              ; Save the contents of the registers 
8f7c			;                push    bc 
8f7c			;                ld      b, a 
8f7c			;                rrca 
8f7c			;                rrca 
8f7c			;                rrca 
8f7c			;                rrca 
8f7c			;                call    print_nibble    ; Print high nibble 
8f7c			;                ld      a, b 
8f7c			;                call    print_nibble    ; Print low nibble 
8f7c			;                pop     bc              ; Restore original register contents 
8f7c			;                pop     af 
8f7c			;                ret 
8f7c			 
8f7c			 
8f7c			 
8f7c			 
8f7c			 
8f7c			fourehexhl:  
8f7c 7e				ld a,(hl) 
8f7d cd 2b 8f			call atohex 
8f80 cb 3f				SRL A 
8f82 cb 3f				SRL A 
8f84 cb 3f				SRL A 
8f86 cb 3f				SRL A 
8f88 47				ld b, a 
8f89 23				inc hl 
8f8a 7e				ld a,(hl) 
8f8b 23				inc hl 
8f8c cd 2b 8f			call atohex 
8f8f 80				add b 
8f90 57				ld d,a 
8f91 7e				ld a,(hl) 
8f92 cd 2b 8f			call atohex 
8f95 cb 3f				SRL A 
8f97 cb 3f				SRL A 
8f99 cb 3f				SRL A 
8f9b cb 3f				SRL A 
8f9d 47				ld b, a 
8f9e 23				inc hl 
8f9f 7e				ld a,(hl) 
8fa0 23				inc hl 
8fa1 cd 2b 8f			call atohex 
8fa4 80				add b 
8fa5 5f				ld e, a 
8fa6 d5				push de 
8fa7 e1				pop hl 
8fa8 c9				ret 
8fa9			 
8fa9			; pass hl. returns z set if the byte at hl is a digit 
8fa9			;isdigithl:  
8fa9			;	push bc 
8fa9			;	ld a,(hl) 
8fa9			;	cp ':' 
8fa9			;	jr nc, .isdf 		; > 
8fa9			;	cp '0' 
8fa9			;	jr c, .isdf		; < 
8fa9			; 
8fa9			;	; TODO find a better way to set z 
8fa9			; 
8fa9			;	ld b,a 
8fa9			;	cp b 
8fa9			;	pop bc 
8fa9			;	ret 
8fa9			; 
8fa9			;.isdf:	; not digit so clear z 
8fa9			; 
8fa9			;	; TODO find a better way to unset z 
8fa9			; 
8fa9			;	ld b,a 
8fa9			;	inc b 
8fa9			;	cp b 
8fa9			; 
8fa9			;	pop bc 
8fa9			;	ret 
8fa9				 
8fa9				 
8fa9			 
8fa9			 
8fa9			; pass hl as the four byte address to load 
8fa9			 
8fa9			get_word_hl:  
8fa9 e5				push hl 
8faa cd 49 8f			call get_byte 
8fad				 
8fad 47				ld b, a 
8fae			 
8fae e1				pop hl 
8faf 23				inc hl 
8fb0 23				inc hl 
8fb1			 
8fb1			; TODO not able to handle a-f  
8fb1 7e				ld a,(hl) 
8fb2			;	;cp ':' 
8fb2			;	cp 'g' 
8fb2			;	jr nc, .single_byte_hl 		; > 
8fb2			;	cp 'G' 
8fb2			;	jr nc, .single_byte_hl 		; > 
8fb2			;	cp '0' 
8fb2			;	jr c, .single_byte_hl		; < 
8fb2			 
8fb2				;call isdigithl 
8fb2 fe 00			cp 0 
8fb4 28 06			jr z, .single_byte_hl 
8fb6			 
8fb6			.getwhln:   ; hex word so get next byte 
8fb6			 
8fb6 cd 49 8f			call get_byte 
8fb9 6f				ld l, a 
8fba 60				ld h,b 
8fbb c9				ret 
8fbc 68			.single_byte_hl:   ld l,b 
8fbd 26 00				ld h,0 
8fbf c9					ret 
8fc0			 
8fc0			 
8fc0			 
8fc0			 
8fc0 21 60 97			ld hl,asc+1 
8fc3			;	ld a, (hl) 
8fc3			;	call nibble2val 
8fc3 cd 49 8f			call get_byte 
8fc6			 
8fc6			;	call fourehexhl 
8fc6 32 ef e2			ld (scratch+52),a 
8fc9				 
8fc9 21 ed e2			ld hl,scratch+50 
8fcc 22 de e5			ld (os_cur_ptr),hl 
8fcf			 
8fcf c9				ret 
8fd0			 
8fd0			 
8fd0			; from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Other:DispA 
8fd0			 
8fd0			; Decimal Unsigned Version 
8fd0			 
8fd0			;Number in a to decimal ASCII 
8fd0			;adapted from 16 bit found in z80 Bits to 8 bit by Galandros 
8fd0			;Example: display a=56 as "056" 
8fd0			;input: a = number 
8fd0			;Output: a=0,value of a in the screen 
8fd0			;destroys af,bc (don't know about hl and de) 
8fd0			DispAToASCII: 
8fd0 0e 9c			ld	c,-100 
8fd2 cd dc 8f			call	.Na1 
8fd5 0e f6			ld	c,-10 
8fd7 cd dc 8f			call	.Na1 
8fda 0e ff			ld	c,-1 
8fdc 06 2f		.Na1:	ld	b,'0'-1 
8fde 04			.Na2:	inc	b 
8fdf 81				add	a,c 
8fe0 38 fc			jr	c,.Na2 
8fe2 91				sub	c		;works as add 100/10/1 
8fe3 f5				push af		;safer than ld c,a 
8fe4 78				ld	a,b		;char is in b 
8fe5			;TODO	CALL	PUTCHAR	;plot a char. Replace with bcall(_PutC) or similar. 
8fe5 f1				pop af		;safer than ld a,c 
8fe6 c9				ret 
8fe7			 
8fe7			; Decimal Signed Version 
8fe7			 
8fe7			; DispA 
8fe7			; -------------------------------------------------------------- 
8fe7			; Converts a signed integer value to a zero-terminated ASCII 
8fe7			; string representative of that value (using radix 10). 
8fe7			; -------------------------------------------------------------- 
8fe7			; INPUTS: 
8fe7			;     HL     Value to convert (two's complement integer). 
8fe7			;     DE     Base address of string destination. (pointer). 
8fe7			; -------------------------------------------------------------- 
8fe7			; OUTPUTS: 
8fe7			;     None 
8fe7			; -------------------------------------------------------------- 
8fe7			; REGISTERS/MEMORY DESTROYED 
8fe7			; AF HL 
8fe7			; -------------------------------------------------------------- 
8fe7			 
8fe7			;DispHLToASCII: 
8fe7			;   push    de 
8fe7			;   push    bc 
8fe7			; 
8fe7			;; Detect sign of HL. 
8fe7			;    bit    7, h 
8fe7			;    jr     z, ._DoConvert 
8fe7			; 
8fe7			;; HL is negative. Output '-' to string and negate HL. 
8fe7			;    ld     a, '-' 
8fe7			;    ld     (de), a 
8fe7			;    inc    de 
8fe7			; 
8fe7			;; Negate HL (using two's complement) 
8fe7			;    xor    a 
8fe7			;    sub    l 
8fe7			;    ld     l, a 
8fe7			;    ld     a, 0     ; Note that XOR A or SUB A would disturb CF 
8fe7			;    sbc    a, h 
8fe7			;    ld     h, a 
8fe7			; 
8fe7			;; Convert HL to digit characters 
8fe7			;._DoConvert: 
8fe7			;    ld     b, 0     ; B will count character length of number 
8fe7			;-   ld     a, 10 
8fe7			;    syscall  .DivHLByA  ; HL = HL / A, A = remainder 
8fe7			;    push   af 
8fe7			;    inc    b 
8fe7			;    ld     a, h 
8fe7			;    or     l 
8fe7			;    jr     nz, - 
8fe7			; 
8fe7			;; Retrieve digits from stack 
8fe7			;-   pop    af 
8fe7			;    or     $30 
8fe7			;    ld     (de), a 
8fe7			;    inc    de 
8fe7			;    djnz   - 
8fe7			; 
8fe7			;; Terminate string with NULL 
8fe7			;    xor    a 
8fe7			;    ld     (de), a 
8fe7			; 
8fe7			;    pop    bc 
8fe7			;    pop    de 
8fe7			;    ret 
8fe7			 
8fe7			;Comments 
8fe7			; 
8fe7			;    This routine uses the common positive-integer radix conversion algorithm of repeatedly dividing a value by the desired radix (base case: the value is zero) and saving the remainders of each division. 
8fe7			;    As this algorithm gives the digits in reverse order, they are pushed onto the hardware stack so that subsequently popping them yields the correct order. 
8fe7			;    Note that the output string will not be fixed-width. 
8fe7			; 
8fe7			;Example Usage 
8fe7			; 
8fe7			;    ld    hl, -1004 
8fe7			;    ld    de, OP1 
8fe7			;    call  DispA 
8fe7			;    ld    hl, OP1 
8fe7			;    syscall  PutS 
8fe7			 
8fe7			 
8fe7			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/string_to_uint16.z80 
8fe7			 
8fe7			 
8fe7			;Converts an ASCII string to an unsigned 16-bit integer 
8fe7			;Quits when it reaches a non-decimal digit 
8fe7			 
8fe7			string_to_uint16: 
8fe7			atoui_16: 
8fe7			;Input: 
8fe7			;     DE points to the string 
8fe7			;Outputs: 
8fe7			;     HL is the result 
8fe7			;     A is the 8-bit value of the number 
8fe7			;     DE points to the byte after the number 
8fe7			;Destroys: 
8fe7			;     BC 
8fe7			;       if the string is non-empty, BC is HL/10 
8fe7			;Size:  24 bytes 
8fe7			;Speed: 42+d(104+{0,9}) 
8fe7			;       d is the number of digits in the number 
8fe7			;       max is 640 cycles for a 5 digit number 
8fe7			;Assuming no leading zeros: 
8fe7			;1 digit:  146cc 
8fe7			;2 digit:  250cc 
8fe7			;3 digit:  354cc or 363cc (avg: 354.126cc) 
8fe7			;4 digit:  458cc or 467cc (avg: 458.27cc) 
8fe7			;5 digit:  562cc or 571cc or 580cc (avg: 562.4104cc) 
8fe7			;avg: 544.81158447265625cc (544+13297/16384) 
8fe7			;=============================================================== 
8fe7 21 00 00		  ld hl,0 
8fea			.u16a: 
8fea 1a			  ld a,(de) 
8feb d6 30		  sub 30h 
8fed fe 0a		  cp 10 
8fef d0			  ret nc 
8ff0 13			  inc de 
8ff1 44			  ld b,h 
8ff2 4d			  ld c,l 
8ff3 29			  add hl,hl 
8ff4 29			  add hl,hl 
8ff5 09			  add hl,bc 
8ff6 29			  add hl,hl 
8ff7 85			  add a,l 
8ff8 6f			  ld l,a 
8ff9 30 ef		  jr nc,.u16a 
8ffb 24			  inc h 
8ffc c3 ea 8f		  jp .u16a 
8fff			 
8fff			 
8fff			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/string_to_uint16.z80 
8fff			 
8fff			;written by Zeda 
8fff			;Converts a 16-bit unsigned integer to an ASCII string. 
8fff			 
8fff			uitoa_16: 
8fff			;Input: 
8fff			;   DE is the number to convert 
8fff			;   HL points to where to write the ASCII string (up to 6 bytes needed). 
8fff			;Output: 
8fff			;   HL points to the null-terminated ASCII string 
8fff			;      NOTE: This isn't necessarily the same as the input HL. 
8fff d5			  push de 
9000 c5			  push bc 
9001 f5			  push af 
9002 eb			  ex de,hl 
9003			 
9003 01 f0 d8		  ld bc,-10000 
9006 3e 2f		  ld a,'0'-1 
9008 3c			  inc a 
9009 09			  add hl,bc  
900a 38 fc		   jr c,$-2 
900c 12			  ld (de),a 
900d 13			  inc de 
900e			 
900e 01 e8 03		  ld bc,1000 
9011 3e 3a		  ld a,'9'+1 
9013 3d			  dec a  
9014 09			  add hl,bc  
9015 30 fc		   jr nc,$-2 
9017 12			  ld (de),a 
9018 13			  inc de 
9019			 
9019 01 9c ff		  ld bc,-100 
901c 3e 2f		  ld a,'0'-1 
901e 3c			  inc a  
901f 09			  add hl,bc  
9020 38 fc		   jr c,$-2 
9022 12			  ld (de),a 
9023 13			  inc de 
9024			 
9024 7d			  ld a,l 
9025 26 3a		  ld h,'9'+1 
9027 25			  dec h  
9028 c6 0a		  add a,10  
902a 30 fb		   jr nc,$-3 
902c c6 30		  add a,'0' 
902e eb			  ex de,hl 
902f 72			  ld (hl),d 
9030 23			  inc hl 
9031 77			  ld (hl),a 
9032 23			  inc hl 
9033 36 00		  ld (hl),0 
9035			 
9035			;Now strip the leading zeros 
9035 0e fa		  ld c,-6 
9037 09			  add hl,bc 
9038 3e 30		  ld a,'0' 
903a 23			  inc hl  
903b be			  cp (hl)  
903c 28 fc		  jr z,$-2 
903e			 
903e			;Make sure that the string is non-empty! 
903e 7e			  ld a,(hl) 
903f b7			  or a 
9040 20 01		  jr nz,.atoub 
9042 2b			  dec hl 
9043			.atoub: 
9043			 
9043 f1			  pop af 
9044 c1			  pop bc 
9045 d1			  pop de 
9046 c9			  ret 
9047			 
9047			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/toUpper.z80 
9047			 
9047			toUpper: 
9047			;A is the char. 
9047			;If A is a lowercase letter, this sets it to the matching uppercase 
9047			;18cc or 30cc or 41cc 
9047			;avg: 26.75cc 
9047 fe 61		  cp 'a' 
9049 d8			  ret c 
904a fe 7b		  cp 'z'+1 
904c d0			  ret nc 
904d d6 20		  sub 'a'-'A' 
904f c9			  ret 
9050			 
9050			; https://tutorials.eeems.ca/ASMin28Days/lesson/day16.html#cmp 
9050			 
9050			; String Length 
9050			;With a length-prefixed string, finding the length is trivial. For a null-terminated string, the process is decidedly more involved. This is where CPIR comes in. 
9050			 
9050			; Get the length of the null-terminated string starting at $8000 hl 
9050			;    LD     HL, $8000 
9050			 
9050			strlenz: 
9050			 
9050 af			    XOR    A               ; Zero is the value we are looking for. 
9051 47			    LD     B, A             ; Since we haven't the slightest clue as to the  
9052 4f			    LD     C, A             ; actual size of the string, put 0 in BC to search 
9053			                           ; 65, 536 bytes (the entire addressable memory space). 
9053 ed b1		    CPIR                   ; Begin search for a byte equalling zero. 
9055			 
9055			; BC has been decremented so that it holds -length. Now need to synthesize a NEG BC. 
9055 67			    LD     H, A             ; Zero HL (basically set it to 65, 536) to get the 
9056 6f			    LD     L, A             ; number of bytes 
9057 ed 42		    SBC    HL, BC           ; Find the size. CPIR doesn't affect carry. 
9059 2b			    DEC    HL              ; Compensate for null. 
905a c9				ret 
905b			 
905b			; Get the length of the A terminated string starting at $8000 hl 
905b			;    LD     HL, $8000 
905b			 
905b			strlent: 
905b			 
905b			                  ; A is the value we are looking for. 
905b 06 00		    LD     B, 0             ; Since we haven't the slightest clue as to the  
905d 0e 00		    LD     C, 0             ; actual size of the string, put 0 in BC to search 
905f			                           ; 65, 536 bytes (the entire addressable memory space). 
905f ed b1		    CPIR                   ; Begin search for a byte equalling zero. 
9061			 
9061			; BC has been decremented so that it holds -length. Now need to synthesize a NEG BC. 
9061 26 00		    LD     H, 0             ; Zero HL (basically set it to 65, 536) to get the 
9063 2e 00		    LD     L, 0             ; number of bytes 
9065 ed 42		    SBC    HL, BC           ; Find the size. CPIR doesn't affect carry. 
9067 2b			    DEC    HL              ; Compensate for null. 
9068 c9				ret 
9069			 
9069			 
9069			;Comparing Strings 
9069			 
9069			;IN    HL     Address of string1. 
9069			;      DE     Address of string2. 
9069			 
9069			; doc given but wrong??? 
9069			;OUT   zero   Set if string1 = string2, reset if string1 != string2. 
9069			;      carry  Set if string1 > string2, reset if string1 <= string2. 
9069			; tested 
9069			;OUT   carry set  if string1 = string2, carry  reset if string1 != string2. 
9069			 
9069			strcmp_old: 
9069 e5			    PUSH   HL 
906a d5			    PUSH   DE 
906b			 
906b 1a			    LD     A, (DE)          ; Compare lengths to determine smaller string 
906c be			    CP     (HL)            ; (want to minimize work). 
906d 38 01		    JR     C, Str1IsBigger 
906f 7e			    LD     A, (HL) 
9070			 
9070			Str1IsBigger: 
9070 4f			    LD     C, A             ; Put length in BC 
9071 06 00		    LD     B, 0 
9073 13			    INC    DE              ; Increment pointers to meat of string. 
9074 23			    INC    HL 
9075			 
9075			CmpLoop: 
9075 1a			    LD     A, (DE)          ; Compare bytes. 
9076 ed a1		    CPI 
9078 20 09		    JR     NZ, NoMatch      ; If (HL) != (DE), abort. 
907a 13			    INC    DE              ; Update pointer. 
907b ea 75 90		    JP     PE, CmpLoop 
907e			 
907e d1			    POP    DE 
907f e1			    POP    HL 
9080 1a			    LD     A, (DE)          ; Check string lengths to see if really equal. 
9081 be			    CP     (HL) 
9082 c9			    RET 
9083			 
9083			NoMatch: 
9083 2b			    DEC    HL 
9084 be			    CP     (HL)            ; Compare again to affect carry. 
9085 d1			    POP    DE 
9086 e1			    POP    HL 
9087 c9			    RET 
9088			 
9088			;; test strmp 
9088			; 
9088			;ld de, .str1 
9088			;ld hl, .str2 
9088			;call strcmp 
9088			;jr z, .z1 
9088			;;this 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "NZ1" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			;.z1: 
9088			; 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "ZZ1" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			; 
9088			;ld de, .str1 
9088			;ld hl, .str1 
9088			;call strcmp 
9088			;jr z, .z2 
9088			;;this 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "NZ2" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			;.z2: 
9088			; 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "ZZ2" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			; 
9088			;ld de, .str1 
9088			;ld hl, .str2 
9088			;call strcmp 
9088			;jr c, .c1 
9088			; 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "Nc1" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			;.c1: 
9088			;;this 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "cc1" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			; 
9088			;ld de, .str1 
9088			;ld hl, .str1 
9088			;call strcmp 
9088			;jr c, .c2 
9088			;;this 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "Nc2" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			;.c2: 
9088			; 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "cc2" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			;	NEXTW 
9088			;.str1:   db "string1",0 
9088			;.str2:   db "string2",0 
9088			 
9088			; only care about direct match or not 
9088			; hl and de strings 
9088			; zero set if the same 
9088			 
9088			strcmp: 
9088 1a				ld a, (de) 
9089 be				cp (hl) 
908a 28 02			jr z, .ssame 
908c b7				or a 
908d c9				ret 
908e			 
908e			.ssame:  
908e fe 00			cp 0 
9090 c8				ret z 
9091			 
9091 23				inc hl 
9092 13				inc de 
9093 18 f3			jr strcmp 
9095				 
9095				 
9095			 
9095			;Copyright (c) 2014, Luke Maurits 
9095			;All rights reserved. 
9095			; 
9095			;Redistribution and use in source and binary forms, with or without 
9095			;modification, are permitted provided that the following conditions are met: 
9095			; 
9095			;* Redistributions of source code must retain the above copyright notice, this 
9095			;  list of conditions and the following disclaimer. 
9095			; 
9095			;* Redistributions in binary form must reproduce the above copyright notice, 
9095			;  this list of conditions and the following disclaimer in the documentation 
9095			;  and/or other materials provided with the distribution. 
9095			; 
9095			;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
9095			;AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
9095			;IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
9095			;DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE 
9095			;FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
9095			;DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
9095			;SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
9095			;CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
9095			;OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
9095			;OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
9095			 
9095			; https://github.com/lmaurits/lm512/blob/master/string.z80 
9095			 
9095			StrictStrCmp: 
9095				; Load next chars of each string 
9095 1a				ld a, (de) 
9096 47				ld b, a 
9097 7e				ld a, (hl) 
9098				; Compare 
9098 b8				cp b 
9099				; Return non-zero if chars don't match 
9099 c0				ret nz 
909a				; Check for end of both strings 
909a fe 00			cp "\0" 
909c				; Return if strings have ended 
909c c8				ret z 
909d				; Otherwise, advance to next chars 
909d 23				inc hl 
909e 13				inc de 
909f 18 f4			jr StrictStrCmp 
90a1			 
90a1			;end 
90a1			; eof 
90a1			 
90a1			 
90a1			 
90a1			 
90a1			 
90a1			 
# End of file firmware_strings.asm
90a1			include "firmware_memory.asm"   ; malloc and free  
90a1			 
90a1			if DEBUG_FORTH_MALLOC_HIGH 
90a1			.mallocsize: db "Wants malloc >256",0 
90a1			.mallocasize: db "MALLOC gives >256",0 
90a1			.malloczero: db "MALLOC gives zero",0 
90a1			 
90a1			malloc_guard_zerolen: 
90a1				push hl 
90a1				push de 
90a1				push af 
90a1			 
90a1				ld de, 0 
90a1			        call cmp16 
90a1				jr nz, .lowalloz 
90a1			 
90a1				push hl 
90a1				push de 
90a1					ld hl, display_fb0 
90a1					ld (display_fb_active), hl 
90a1				call clear_display 
90a1				ld a, 0 
90a1				ld de, .malloczero 
90a1				call str_at_display 
90a1				call update_display 
90a1				call delay1s 
90a1				call delay1s 
90a1				call bp_on 
90a1			;	ld a, 0 
90a1			;	ld (os_view_disable), a 
90a1			 
90a1				pop de 
90a1				pop hl 
90a1			 
90a1				 
90a1			 
90a1				CALLMONITOR 
90a1			.lowalloz: 
90a1			 
90a1			 
90a1				pop af 
90a1				pop de 
90a1				pop hl 
90a1			ret 
90a1			 
90a1			malloc_guard_entry: 
90a1				push hl 
90a1				push de 
90a1				push af 
90a1			 
90a1			 	or a      ;clear carry flag 
90a1				push hl 
90a1				ld de, 255 
90a1				sbc hl, de 
90a1				jr c, .lowalloc 
90a1			 
90a1				push de 
90a1					ld hl, display_fb0 
90a1					ld (display_fb_active), hl 
90a1				call clear_display 
90a1				ld a, 0 
90a1				ld de, .mallocsize 
90a1				call str_at_display 
90a1				call update_display 
90a1				call delay1s 
90a1				call delay1s 
90a1			;	ld a, 0 
90a1			;	ld (os_view_disable), a 
90a1				call bp_on 
90a1			 
90a1				pop de 
90a1				pop hl 
90a1			 
90a1				 
90a1			 
90a1				CALLMONITOR 
90a1				jr .lowdone 
90a1			.lowalloc: 
90a1			 
90a1			 
90a1				pop hl 
90a1			.lowdone:	pop af 
90a1				pop de 
90a1				pop hl 
90a1			ret 
90a1			 
90a1			malloc_guard_exit: 
90a1				push hl 
90a1				push de 
90a1				push af 
90a1			 
90a1			 	or a      ;clear carry flag 
90a1				push hl 
90a1				ld de, 255 
90a1				sbc hl, de 
90a1				jr c, .lowallocx 
90a1			 
90a1				push de 
90a1					ld hl, display_fb0 
90a1					ld (display_fb_active), hl 
90a1				call clear_display 
90a1				ld a, 0 
90a1				ld de, .mallocasize 
90a1				call str_at_display 
90a1				call update_display 
90a1				call delay1s 
90a1				call delay1s 
90a1			;	ld a, 0 
90a1			;	ld (os_view_disable), a 
90a1				call bp_on 
90a1				pop de 
90a1				pop hl 
90a1			 
90a1				CALLMONITOR 
90a1				jr .lowdonex 
90a1			.lowallocx: 
90a1			 
90a1				pop hl 
90a1			.lowdonex:	pop af 
90a1				pop de 
90a1				pop hl 
90a1			ret 
90a1			endif 
90a1			 
90a1			if MALLOC_2 
90a1			; Z80 Malloc and Free Functions 
90a1			 
90a1			; Malloc Function: 
90a1			; Input: 
90a1			;   HL: Size of block to allocate 
90a1			; Output: 
90a1			;   HL: Pointer to allocated memory block (NULL if allocation fails) 
90a1			 
90a1			malloc: 
90a1				 
90a1			if DEBUG_FORTH_MALLOC_HIGH 
90a1			call malloc_guard_entry 
90a1			endif 
90a1			 
90a1			 
90a1			 
90a1			 
90a1					if DEBUG_FORTH_MALLOC 
90a1						DMARK "mal" 
90a1						CALLMONITOR 
90a1					endif 
90a1			    push af            ; Save AF register 
90a1			    ld a, l            ; Load low byte of size into A 
90a1			    or h               ; Check if size is zero 
90a1			    jp z, malloc_exit  ; If size is zero, exit with NULL pointer 
90a1			 
90a1			    ; Allocate memory 
90a1			    ld hl, (heap_start) ; Load start of heap into HL 
90a1					if DEBUG_FORTH_MALLOC 
90a1						DMARK "ma1" 
90a1						CALLMONITOR 
90a1					endif 
90a1			    call malloc_internal ; Call internal malloc function 
90a1			    pop af             ; Restore AF register 
90a1			if DEBUG_FORTH_MALLOC_HIGH 
90a1			call malloc_guard_exit 
90a1			call malloc_guard_zerolen 
90a1			endif 
90a1			    ret                ; Return 
90a1			 
90a1			; Free Function: 
90a1			; Input: 
90a1			;   HL: Pointer to memory block to free 
90a1			; Output: 
90a1			;   None 
90a1			 
90a1			free: 
90a1			    push af            ; Save AF register 
90a1			    ld a, l            ; Load low byte of pointer into A 
90a1			    or h               ; Check if pointer is NULL 
90a1			    jp z, free_exit    ; If pointer is NULL, exit 
90a1			 
90a1			    ; Free memory 
90a1			    ld hl, (heap_start) ; Load start of heap into HL 
90a1			    call free_internal  ; Call internal free function 
90a1			    pop af             ; Restore AF register 
90a1			    ret                ; Return 
90a1			 
90a1			; Internal Malloc Function: 
90a1			; Input: 
90a1			;   HL: Size of block to allocate 
90a1			; Output: 
90a1			;   HL: Pointer to allocated memory block (NULL if allocation fails) 
90a1			 
90a1			malloc_internal: 
90a1			    ld bc, 2           ; Number of bytes to allocate for management overhead 
90a1			    add hl, bc         ; Add management overhead to requested size 
90a1			    ex de, hl          ; Save total size in DE, and keep it in HL 
90a1					if DEBUG_FORTH_MALLOC 
90a1						DMARK "ma2" 
90a1						CALLMONITOR 
90a1					endif 
90a1			 
90a1			    ; Search for free memory block 
90a1			    ld de, (heap_end)  ; Load end of heap into DE 
90a1			    ld bc, 0           ; Initialize counter 
90a1			 
90a1					if DEBUG_FORTH_MALLOC 
90a1						DMARK "ma2" 
90a1						CALLMONITOR 
90a1					endif 
90a1			malloc_search_loop: 
90a1			    ; Check if current block is free 
90a1			    ld a, (hl)         ; Load current block's status (free or used) 
90a1			    cp 0               ; Compare with zero (free) 
90a1			    jr nz, malloc_skip_block_check  ; If not free, skip to the next block 
90a1			 
90a1			    ; Check if current block is large enough 
90a1			    ld a, (hl+1)       ; Load high byte of block size 
90a1			    cp l               ; Compare with low byte of requested size 
90a1			    jr nz, malloc_skip_block_check  ; If not large enough, skip to the next block 
90a1			 
90a1			    ld a, (hl+2)       ; Load low byte of block size 
90a1			    cp h               ; Compare with high byte of requested size 
90a1			    jr c, malloc_skip_block_check   ; If not large enough, skip to the next block 
90a1			 
90a1			    ; Mark block as used 
90a1			    ld (hl), 0xFF      ; Set status byte to indicate used block 
90a1			 
90a1			    ; Calculate remaining space in block 
90a1			    ld bc, 0           ; Clear BC 
90a1			    add hl, bc         ; Increment HL to point to start of data block 
90a1			    add hl, de         ; HL = HL + DE (total size) 
90a1			    ld bc, 1           ; Number of bytes to allocate for management overhead 
90a1			    add hl, bc         ; Add management overhead to start of data block 
90a1			 
90a1			    ; Save pointer to allocated block in HL 
90a1			if DEBUG_FORTH_MALLOC_HIGH 
90a1						DMARK "ma5" 
90a1			call malloc_guard_exit 
90a1			call malloc_guard_zerolen 
90a1			endif 
90a1			    ret 
90a1			 
90a1			malloc_skip_block_check: 
90a1			    ; Move to the next block 
90a1			    ld bc, 3           ; Size of management overhead 
90a1			    add hl, bc         ; Move to the next block 
90a1			    inc de             ; Increment counter 
90a1			 
90a1			    ; Check if we have reached the end of heap 
90a1			    ld a, e            ; Load low byte of heap end address 
90a1			    cp (hl)            ; Compare with low byte of current address 
90a1			    jr nz, malloc_search_loop  ; If not equal, continue searching 
90a1			    ld a, d            ; Load high byte of heap end address 
90a1			    cp 0               ; Check if it's zero (end of memory) 
90a1			    jr nz, malloc_search_loop  ; If not zero, continue searching 
90a1			 
90a1			    ; If we reached here, allocation failed 
90a1			    xor a              ; Set result to NULL 
90a1			if DEBUG_FORTH_MALLOC_HIGH 
90a1						DMARK "ma6" 
90a1			call malloc_guard_exit 
90a1			call malloc_guard_zerolen 
90a1			endif 
90a1			    ret 
90a1			malloc_exit: 
90a1			if DEBUG_FORTH_MALLOC_HIGH 
90a1						DMARK "ma7" 
90a1			call malloc_guard_exit 
90a1			call malloc_guard_zerolen 
90a1			endif 
90a1			    ret 
90a1			 
90a1			; Internal Free Function: 
90a1			; Input: 
90a1			;   HL: Pointer to memory block to free 
90a1			; Output: 
90a1			;   None 
90a1			 
90a1			free_internal: 
90a1			    ld de, (heap_start) ; Load start of heap into DE 
90a1			    ld bc, 0            ; Initialize counter 
90a1			 
90a1			free_search_loop: 
90a1			    ; Check if current block contains the pointer 
90a1			    ld a, l             ; Load low byte of pointer 
90a1			    cp (hl+1)           ; Compare with high byte of current block's address 
90a1			    jr nz, free_skip_block_check  ; If not equal, skip to the next block 
90a1			    ld a, h             ; Load high byte of pointer 
90a1			    cp (hl+2)           ; Compare with low byte of current block's address 
90a1			    jr nz, free_skip_block_check  ; If not equal, skip to the next block 
90a1			 
90a1			    ; Mark block as free 
90a1			    ld (hl), 0          ; Set status byte to indicate free block 
90a1			    ret                 ; Return 
90a1			 
90a1			free_skip_block_check: 
90a1			    ; Move to the next block 
90a1			    ld bc, 3            ; Size of management overhead 
90a1			    add hl, bc          ; Move to the next block 
90a1			    inc de              ; Increment counter 
90a1			 
90a1			    ; Check if we have reached the end of heap 
90a1			    ld a, e             ; Load low byte of heap end address 
90a1			    cp (hl)             ; Compare with low byte of current address 
90a1			    jr nz, free_search_loop  ; If not equal, continue searching 
90a1			    ld a, d             ; Load high byte of heap end address 
90a1			    cp 0                ; Check if it's zero (end of memory) 
90a1			    jr nz, free_search_loop  ; If not zero, continue searching 
90a1			 
90a1			    ; If we reached here, pointer is not found in heap 
90a1			    ret 
90a1			 
90a1			free_exit: 
90a1			    ret                 ; Return 
90a1			 
90a1			; Define heap start and end addresses 
90a1			;heap_start:    .dw 0xC000   ; Start of heap 
90a1			;heap_end:      .dw 0xE000   ; End of heap 
90a1			 
90a1			endif 
90a1			 
90a1			 
90a1			if MALLOC_1 
90a1			 
90a1			 
90a1			 
90a1			; from https://gist.github.com/tomstorey/947a8b084bad69391a4b2a1c5b6d69ca 
90a1			 
90a1			;moved to firmware.asm 
90a1			;heap_start        .equ  0x9000      ; Starting address of heap 
90a1			;heap_size         .equ  0x0100      ; Number of bytes available in heap 
90a1			 
90a1			;      .org 0 
90a1			;      jp    main 
90a1			 
90a1			 
90a1			;      .org  0x100 
90a1			;main: 
90a1			;      ld    HL, 0x8100 
90a1			;      ld    SP, HL 
90a1			; 
90a1			;      call  heap_init 
90a1			; 
90a1			;      ; Make some allocations 
90a1			;      ld    HL, 12 
90a1			;      call  malloc            ; Allocates 0x9004 
90a1			; 
90a1			;      ld    HL, 12 
90a1			;      call  malloc            ; Allocates 0x9014 
90a1			; 
90a1			;      ld    HL, 12 
90a1			;      call  malloc            ; Allocates 0x9024 
90a1			; 
90a1			;      ; Free some allocations 
90a1			;      ld    HL, 0x9014 
90a1			;      call  free 
90a1			; 
90a1			;      ld    HL, 0x9004 
90a1			;      call  free 
90a1			; 
90a1			;      ld    HL, 0x9024 
90a1			;      call  free 
90a1			; 
90a1			; 
90a1			;      halt 
90a1			 
90a1			 
90a1			;------------------------------------------------------------------------------ 
90a1			;     heap_init                                                               : 
90a1			;                                                                             : 
90a1			; Description                                                                 : 
90a1			;     Initialise the heap and make it ready for malloc and free operations.   : 
90a1			;                                                                             : 
90a1			;     The heap is maintained as a linked list, starting with an initial       : 
90a1			;     "dummy block" of zero size which is mainly used to hold a pointer to    : 
90a1			;     the first free block in the heap. Each block then points to the next    : 
90a1			;     free block within the heap, and the free list ends at the first block   : 
90a1			;     with a null pointer to the next free block.                             : 
90a1			;                                                                             : 
90a1			; Parameters                                                                  : 
90a1			;     Inputs are compile-time only. Two defines which specify the starting    : 
90a1			;     address of the heap and its size are required, along with a memory      : 
90a1			;     allocation of 4 consecutive bytes which is used for a dummy block which : 
90a1			;     principally stores a pointer to the first free block in the heap.       : 
90a1			;                                                                             : 
90a1			; Returns                                                                     : 
90a1			;     Nothing                                                                 : 
90a1			;------------------------------------------------------------------------------ 
90a1			heap_init: 
90a1 e5			      push  HL 
90a2			 
90a2			      ; Initialise free list struct 
90a2 21 c5 e0		      ld    HL, heap_start 
90a5 22 c0 e0		      ld    (free_list), HL 
90a8 21 00 00		      ld    HL, 0 
90ab 22 c2 e0		      ld    (free_list+2), HL 
90ae			 
90ae			      ; Insert first free block at bottom of heap, consumes entire heap 
90ae 21 92 e2		      ld    HL, heap_start+heap_size-4 
90b1 22 c5 e0		      ld    (heap_start), HL        ; Next block (end of free list) 
90b4 21 cd 01		      ld    HL, heap_size-4 
90b7 22 c7 e0		      ld    (heap_start+2), HL      ; Block size 
90ba			 
90ba			      ; Insert end of free list block at top of heap - two null words will 
90ba			      ; terminate the free list 
90ba 21 00 00		      ld    HL, 0 
90bd 22 94 e2		      ld    (heap_start+heap_size-2), HL 
90c0 22 92 e2		      ld    (heap_start+heap_size-4), HL 
90c3			 
90c3 e1			      pop   HL 
90c4			 
90c4 c9			      ret 
90c5			 
90c5			 
90c5			;------------------------------------------------------------------------------ 
90c5			;     malloc                                                                  : 
90c5			;                                                                             : 
90c5			; Description                                                                 : 
90c5			;     Allocates the wanted space from the heap and returns the address of the : 
90c5			;     first useable byte of the allocation.                                   : 
90c5			;                                                                             : 
90c5			;     Allocations can happen in one of two ways:                              : 
90c5			;                                                                             : 
90c5			;     1. A free block may be found which is the exact size wanted. In this    : 
90c5			;        case the block is removed from the free list and retuedn to the      : 
90c5			;        caller.                                                              : 
90c5			;     2. A free block may be found which is larger than the size wanted. In   : 
90c5			;        this case, the larger block is split into two. The first portion of  : 
90c5			;        this block will become the requested space by the malloc call and    : 
90c5			;        is returned to the caller. The second portion becomes a new free     : 
90c5			;        block, and the free list is adjusted to maintain continuity via this : 
90c5			;        newly created block.                                                 : 
90c5			;                                                                             : 
90c5			;     malloc does not set any initial value in the allocated space, the       : 
90c5			;     caller is required to do this as required.                              : 
90c5			;                                                                             : 
90c5			;     This implementation of malloc uses the stack exclusively, and is        : 
90c5			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
90c5			;     advisable to disable interrupts before calling malloc, and recommended  : 
90c5			;     to avoid the use of malloc inside ISRs in general.                      : 
90c5			;                                                                             : 
90c5			;     NOTE: heap_init must be called before malloc and free can be used.      : 
90c5			;                                                                             : 
90c5			; Parameters                                                                  : 
90c5			;     HL  Number of bytes wanted                                              : 
90c5			;                                                                             : 
90c5			; Returns                                                                     : 
90c5			;     HL  Address of the first useable byte of the allocation                 : 
90c5			;                                                                             : 
90c5			; Flags                                                                       : 
90c5			;     Z   Set if the allocation did not succeed, clear otherwise              : 
90c5			;                                                                             : 
90c5			; Stack frame                                                                 : 
90c5			;       |             |                                                       : 
90c5			;       +-------------+                                                       : 
90c5			;       |     BC      |                                                       : 
90c5			;       +-------------+                                                       : 
90c5			;       |     DE      |                                                       : 
90c5			;       +-------------+                                                       : 
90c5			;       |     IX      |                                                       : 
90c5			;       +-------------+                                                       : 
90c5			;       |  prev_free  |                                                       : 
90c5			;   +4  +-------------+                                                       : 
90c5			;       |  this_free  |                                                       : 
90c5			;   +2  +-------------+                                                       : 
90c5			;       |  next_free  |                                                       : 
90c5			;   +0  +-------------+                                                       : 
90c5			;       |             |                                                       : 
90c5			;                                                                             : 
90c5			;------------------------------------------------------------------------------ 
90c5			 
90c5			 
90c5			;malloc: 
90c5			; 
90c5			;	SAVESP ON 1 
90c5			; 
90c5			;	call malloc_code 
90c5			; 
90c5			;	CHECKSP ON 1 
90c5			;	ret 
90c5			 
90c5			 
90c5			malloc: 
90c5 c5			      push  BC 
90c6 d5			      push  DE 
90c7 dd e5		      push  IX 
90c9			if DEBUG_FORTH_MALLOC_HIGH 
90c9			call malloc_guard_entry 
90c9			endif 
90c9			 
90c9					if DEBUG_FORTH_MALLOC 
90c9						DMARK "mal" 
90c9						CALLMONITOR 
90c9					endif 
90c9 7c			      ld    A, H                    ; Exit if no space requested 
90ca b5			      or    L 
90cb ca 8a 91		      jp    Z, malloc_early_exit 
90ce			 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			; 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			 
90ce			 
90ce			 
90ce			 
90ce					if DEBUG_FORTH_MALLOC 
90ce						DMARK "maA" 
90ce						CALLMONITOR 
90ce					endif 
90ce			      ; Set up stack frame 
90ce eb			      ex    DE, HL 
90cf 21 fa ff		      ld    HL, -6                  ; Reserve 6 bytes for stack frame 
90d2 39			      add   HL, SP 
90d3 f9			      ld    SP, HL 
90d4 dd 21 00 00	      ld    IX, 0                   ; Use IX as a frame pointer 
90d8 dd 39		      add   IX, SP 
90da			 
90da			      ; Setup initial state 
90da 21 04 00		      ld    HL, 4                   ; want must also include space used by block struct 
90dd 19			      add   HL, DE 
90de			 
90de 44			      ld    B, H                    ; Move want to BC 
90df 4d			      ld    C, L 
90e0			 
90e0 21 c0 e0		      ld    HL, free_list           ; Store prev_free ptr to stack 
90e3 dd 75 04		      ld    (IX+4), L 
90e6 dd 74 05		      ld    (IX+5), H 
90e9			 
90e9 5e			      ld    E, (HL)                 ; Store this_free ptr to stack 
90ea 23			      inc   HL 
90eb 56			      ld    D, (HL) 
90ec dd 73 02		      ld    (IX+2), E 
90ef dd 72 03		      ld    (IX+3), D 
90f2 eb			      ex    DE, HL                  ; this_free ptr into HL 
90f3			 
90f3					if DEBUG_FORTH_MALLOC 
90f3						DMARK "maB" 
90f3						CALLMONITOR 
90f3					endif 
90f3			      ; Loop through free block list to find some space 
90f3			malloc_find_space: 
90f3 5e			      ld    E, (HL)                 ; Load next_free ptr into DE 
90f4 23			      inc   HL 
90f5 56			      ld    D, (HL) 
90f6			 
90f6 7a			      ld    A, D                    ; Check for null next_free ptr - end of free list 
90f7 b3			      or    E 
90f8 ca 84 91		      jp    Z, malloc_no_space 
90fb			 
90fb dd 73 00		      ld    (IX+0), E               ; Store next_free ptr to stack 
90fe dd 72 01		      ld    (IX+1), D 
9101			 
9101			      ; Does this block have enough space to make the allocation? 
9101 23			      inc   HL                      ; Load free block size into DE 
9102 5e			      ld    E, (HL) 
9103 23			      inc   HL 
9104 56			      ld    D, (HL) 
9105			 
9105 eb			      ex    DE, HL                  ; Check size of block against want 
9106 b7			      or    A                       ; Ensure carry flag clear 
9107 ed 42		      sbc   HL, BC 
9109 e5			      push  HL                      ; Store the result for later (new block size) 
910a			 
910a ca 59 91		      jp   Z, malloc_alloc_fit     ; Z means block size matches want - can allocate 
910d 30 1b		      jr    NC, malloc_alloc_split  ; NC means block is bigger than want - can allocate 
910f			 
910f			      ; this_free block is not big enough, setup ptrs to test next free block 
910f e1			      pop   HL                      ; Discard previous result 
9110			 
9110 dd 6e 02		      ld    L, (IX+2)               ; Move this_free ptr into prev_free 
9113 dd 66 03		      ld    H, (IX+3) 
9116 dd 75 04		      ld    (IX+4), L 
9119 dd 74 05		      ld    (IX+5), H 
911c			 
911c dd 6e 00		      ld    L, (IX+0)               ; Move next_free ptr into this_free 
911f dd 66 01		      ld    H, (IX+1) 
9122 dd 75 02		      ld    (IX+2), L 
9125 dd 74 03		      ld    (IX+3), H 
9128			 
9128					if DEBUG_FORTH_MALLOC 
9128						DMARK "MA>" 
9128						CALLMONITOR 
9128					endif 
9128 18 c9		      jr    malloc_find_space 
912a			 
912a			      ; split a bigger block into two - requested size and remaining size 
912a			malloc_alloc_split: 
912a					if DEBUG_FORTH_MALLOC 
912a						DMARK "MAs" 
912a						CALLMONITOR 
912a					endif 
912a eb			      ex    DE, HL                  ; Calculate address of new free block 
912b 2b			      dec   HL 
912c 2b			      dec   HL 
912d 2b			      dec   HL 
912e 09			      add   HL, BC 
912f			 
912f			      ; Create a new block and point it at next_free 
912f dd 5e 00		      ld    E, (IX+0)               ; Load next_free ptr into DE 
9132 dd 56 01		      ld    D, (IX+1) 
9135			 
9135 73			      ld    (HL), E                 ; Store next_free ptr into new block 
9136 23			      inc   HL 
9137 72			      ld    (HL), D 
9138			 
9138 d1			      pop   DE                      ; Store size of new block into new block 
9139 23			      inc   HL 
913a 73			      ld    (HL), E 
913b 23			      inc   HL 
913c 72			      ld    (HL), D 
913d			 
913d			      ; Update this_free ptr to point to new block 
913d 2b			      dec   HL 
913e 2b			      dec   HL 
913f 2b			      dec   HL 
9140			 
9140 dd 5e 02		      ld    E, (IX+2)               ; Take a copy of current this_free ptr 
9143 dd 56 03		      ld    D, (IX+3) 
9146			 
9146 dd 75 02		      ld    (IX+2), L               ; Store new block addr as this_free ptr 
9149 dd 74 03		      ld    (IX+3), H 
914c			 
914c			      ; Modify this_free block to be allocation 
914c eb			      ex    DE, HL 
914d af			      xor   A                       ; Null the next block ptr of allocated block 
914e 77			      ld    (HL), A 
914f 23			      inc   HL 
9150 77			      ld    (HL), A 
9151			 
9151 23			      inc   HL                      ; Store want size into allocated block 
9152 71			      ld    (HL), C 
9153 23			      inc   HL 
9154 70			      ld    (HL), B 
9155 23			      inc   HL 
9156 e5			      push  HL                      ; Address of allocation to return 
9157			 
9157 18 19		      jr    malloc_update_links 
9159			 
9159			malloc_alloc_fit: 
9159 e1			      pop   HL                      ; Dont need new block size, want is exact fit 
915a			 
915a					if DEBUG_FORTH_MALLOC 
915a						DMARK "MAf" 
915a						CALLMONITOR 
915a					endif 
915a			      ; Modify this_free block to be allocation 
915a eb			      ex    DE, HL 
915b 2b			      dec   HL 
915c 2b			      dec   HL 
915d 2b			      dec   HL 
915e			 
915e af			      xor   A                       ; Null the next block ptr of allocated block 
915f 77			      ld    (HL), A 
9160 23			      inc   HL 
9161 77			      ld    (HL), A 
9162			 
9162 23			      inc   HL                      ; Store address of allocation to return 
9163 23			      inc   HL 
9164 23			      inc   HL 
9165 e5			      push  HL 
9166			 
9166			      ; Copy next_free ptr to this_free, remove allocated block from free list 
9166 dd 6e 00		      ld    L, (IX+0)               ; next_free to HL 
9169 dd 66 01		      ld    H, (IX+1) 
916c			 
916c dd 75 02		      ld    (IX+2), L               ; HL to this_free 
916f dd 74 03		      ld    (IX+3), H 
9172			 
9172			 
9172			malloc_update_links: 
9172			      ; Update prev_free ptr to point to this_free 
9172 dd 6e 04		      ld    L, (IX+4)               ; prev_free ptr to HL 
9175 dd 66 05		      ld    H, (IX+5) 
9178			 
9178 dd 5e 02		      ld    E, (IX+2)               ; this_free ptr to DE 
917b dd 56 03		      ld    D, (IX+3) 
917e			 
917e 73			      ld    (HL), E                 ; this_free ptr into prev_free 
917f 23			      inc   HL 
9180 72			      ld    (HL), D 
9181			 
9181					if DEBUG_FORTH_MALLOC 
9181						DMARK "Mul" 
9181						CALLMONITOR 
9181					endif 
9181			      ; Clear the Z flag to indicate successful allocation 
9181 7a			      ld    A, D 
9182 b3			      or    E 
9183			 
9183 d1			      pop   DE                      ; Address of allocation 
9184					if DEBUG_FORTH_MALLOC 
9184						DMARK "MAu" 
9184						CALLMONITOR 
9184					endif 
9184			 
9184			malloc_no_space: 
9184 21 06 00		      ld    HL, 6                   ; Clean up stack frame 
9187 39			      add   HL, SP 
9188 f9			      ld    SP, HL 
9189			 
9189 eb			      ex    DE, HL                  ; Alloc addr into HL for return 
918a					if DEBUG_FORTH_MALLOC 
918a						DMARK "MAN" 
918a						CALLMONITOR 
918a					endif 
918a			 
918a			malloc_early_exit: 
918a					if DEBUG_FORTH_MALLOC 
918a						DMARK "MAx" 
918a						CALLMONITOR 
918a					endif 
918a dd e1		      pop   IX 
918c d1			      pop   DE 
918d c1			      pop   BC 
918e			 
918e			if DEBUG_FORTH_MALLOC_HIGH 
918e			call malloc_guard_exit 
918e			call malloc_guard_zerolen 
918e			endif 
918e c9			      ret 
918f			 
918f			 
918f			;------------------------------------------------------------------------------ 
918f			;     free                                                                    : 
918f			;                                                                             : 
918f			; Description                                                                 : 
918f			;     Return the space pointed to by HL to the heap. HL must be an address as : 
918f			;     returned by malloc, otherwise the behaviour is undefined.               : 
918f			;                                                                             : 
918f			;     Where possible, directly adjacent free blocks will be merged together   : 
918f			;     into larger blocks to help ensure that the heap does not become         : 
918f			;     excessively fragmented.                                                 : 
918f			;                                                                             : 
918f			;     free does not clear or set any other value into the freed space, and    : 
918f			;     therefore its contents may be visible through subsequent malloc's. The  : 
918f			;     caller should clear the freed space as required.                        : 
918f			;                                                                             : 
918f			;     This implementation of free uses the stack exclusively, and is          : 
918f			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
918f			;     advisable to disable interrupts before calling free, and recommended    : 
918f			;     to avoid the use of free inside ISRs in general.                        : 
918f			;                                                                             : 
918f			;     NOTE: heap_init must be called before malloc and free can be used.      : 
918f			;                                                                             : 
918f			; Parameters                                                                  : 
918f			;     HL  Pointer to address of first byte of allocation to be freed          : 
918f			;                                                                             : 
918f			; Returns                                                                     : 
918f			;     Nothing                                                                 : 
918f			;                                                                             : 
918f			; Stack frame                                                                 : 
918f			;       |             |                                                       : 
918f			;       +-------------+                                                       : 
918f			;       |     BC      |                                                       : 
918f			;       +-------------+                                                       : 
918f			;       |     DE      |                                                       : 
918f			;       +-------------+                                                       : 
918f			;       |     IX      |                                                       : 
918f			;       +-------------+                                                       : 
918f			;       |  prev_free  |                                                       : 
918f			;   +2  +-------------+                                                       : 
918f			;       |  next_free  |                                                       : 
918f			;   +0  +-------------+                                                       : 
918f			;       |             |                                                       : 
918f			;                                                                             : 
918f			;------------------------------------------------------------------------------ 
918f			free: 
918f c5			      push  BC 
9190 d5			      push  DE 
9191 dd e5		      push  IX 
9193			 
9193 7c			      ld    A, H                    ; Exit if ptr is null 
9194 b5			      or    L 
9195 ca 59 92		      jp    Z, free_early_exit 
9198			 
9198			      ; Set up stack frame 
9198 eb			      ex    DE, HL 
9199 21 fc ff		      ld    HL, -4                  ; Reserve 4 bytes for stack frame 
919c 39			      add   HL, SP 
919d f9			      ld    SP, HL 
919e dd 21 00 00	      ld    IX, 0                   ; Use IX as a frame pointer 
91a2 dd 39		      add   IX, SP 
91a4			 
91a4			      ; The address in HL points to the start of the useable allocated space, 
91a4			      ; but the block struct starts 4 bytes before this. Sub 4 to get the 
91a4			      ; address of the block itself. 
91a4 eb			      ex    DE, HL 
91a5 11 fc ff		      ld    DE, -4 
91a8 19			      add   HL, DE 
91a9			 
91a9			      ; An allocated block must have a null next block pointer in it 
91a9 7e			      ld    A, (HL) 
91aa 23			      inc   HL 
91ab b6			      or    (HL) 
91ac c2 54 92		      jp    NZ, free_done 
91af			 
91af 2b			      dec   HL 
91b0			 
91b0 44			      ld    B, H                    ; Copy HL to BC 
91b1 4d			      ld    C, L 
91b2			 
91b2			      ; Loop through the free list to find the first block with an address 
91b2			      ; higher than the block being freed 
91b2 21 c0 e0		      ld    HL, free_list 
91b5			 
91b5			free_find_higher_block: 
91b5 5e			      ld    E, (HL)                 ; Load next ptr from free block 
91b6 23			      inc   HL 
91b7 56			      ld    D, (HL) 
91b8 2b			      dec   HL 
91b9			 
91b9 dd 73 00		      ld    (IX+0), E               ; Save ptr to next free block 
91bc dd 72 01		      ld    (IX+1), D 
91bf dd 75 02		      ld    (IX+2), L               ; Save ptr to prev free block 
91c2 dd 74 03		      ld    (IX+3), H 
91c5			 
91c5 78			      ld    A, B                    ; Check if DE is greater than BC 
91c6 ba			      cp    D                       ; Compare MSB first 
91c7 28 02		      jr    Z, $+4                  ; MSB the same, compare LSB 
91c9 30 04		      jr    NC, free_find_higher_block_skip 
91cb 79			      ld    A, C 
91cc bb			      cp    E                       ; Then compare LSB 
91cd 38 08		      jr    C, free_found_higher_block 
91cf			 
91cf			free_find_higher_block_skip: 
91cf 7a			      ld    A, D                    ; Reached the end of the free list? 
91d0 b3			      or    E 
91d1 ca 54 92		      jp    Z, free_done 
91d4			 
91d4 eb			      ex    DE, HL 
91d5			 
91d5 18 de		      jr    free_find_higher_block 
91d7			 
91d7			free_found_higher_block: 
91d7			      ; Insert freed block between prev and next free blocks 
91d7 71			      ld    (HL), C                 ; Point prev free block to freed block 
91d8 23			      inc   HL 
91d9 70			      ld    (HL), B 
91da			 
91da 60			      ld    H, B                    ; Point freed block at next free block 
91db 69			      ld    L, C 
91dc 73			      ld    (HL), E 
91dd 23			      inc   HL 
91de 72			      ld    (HL), D 
91df			 
91df			      ; Check if the freed block is adjacent to the next free block 
91df 23			      inc   HL                      ; Load size of freed block into HL 
91e0 5e			      ld    E, (HL) 
91e1 23			      inc   HL 
91e2 56			      ld    D, (HL) 
91e3 eb			      ex    DE, HL 
91e4			 
91e4 09			      add   HL, BC                  ; Add addr of freed block and its size 
91e5			 
91e5 dd 5e 00		      ld    E, (IX+0)               ; Load addr of next free block into DE 
91e8 dd 56 01		      ld    D, (IX+1) 
91eb			 
91eb b7			      or    A                       ; Clear the carry flag 
91ec ed 52		      sbc   HL, DE                  ; Subtract addrs to compare adjacency 
91ee 20 22		      jr    NZ, free_check_adjacent_to_prev 
91f0			 
91f0			      ; Freed block is adjacent to next, merge into one bigger block 
91f0 eb			      ex    DE, HL                  ; Load next ptr from next block into DE 
91f1 5e			      ld    E, (HL) 
91f2 23			      inc   HL 
91f3 56			      ld    D, (HL) 
91f4 e5			      push  HL                      ; Save ptr to next block for later 
91f5			 
91f5 60			      ld    H, B                    ; Store ptr from next block into freed block 
91f6 69			      ld    L, C 
91f7 73			      ld    (HL), E 
91f8 23			      inc   HL 
91f9 72			      ld    (HL), D 
91fa			 
91fa e1			      pop   HL                      ; Restore ptr to next block 
91fb 23			      inc   HL                      ; Load size of next block into DE 
91fc 5e			      ld    E, (HL) 
91fd 23			      inc   HL 
91fe 56			      ld    D, (HL) 
91ff d5			      push  DE                      ; Save next block size for later 
9200			 
9200 60			      ld    H, B                    ; Load size of freed block into HL 
9201 69			      ld    L, C 
9202 23			      inc   HL 
9203 23			      inc   HL 
9204 5e			      ld    E, (HL) 
9205 23			      inc   HL 
9206 56			      ld    D, (HL) 
9207 eb			      ex    DE, HL 
9208			 
9208 d1			      pop   DE                      ; Restore size of next block 
9209 19			      add   HL, DE                  ; Add sizes of both blocks 
920a eb			      ex    DE, HL 
920b			 
920b 60			      ld    H, B                    ; Store new bigger size into freed block 
920c 69			      ld    L, C 
920d 23			      inc   HL 
920e 23			      inc   HL 
920f 73			      ld    (HL), E 
9210 23			      inc   HL 
9211 72			      ld    (HL), D 
9212			 
9212			free_check_adjacent_to_prev: 
9212			      ; Check if the freed block is adjacent to the prev free block 
9212 dd 6e 02		      ld    L, (IX+2)               ; Prev free block ptr into HL 
9215 dd 66 03		      ld    H, (IX+3) 
9218			 
9218 23			      inc   HL                      ; Size of prev free block into DE 
9219 23			      inc   HL 
921a 5e			      ld    E, (HL) 
921b 23			      inc   HL 
921c 56			      ld    D, (HL) 
921d 2b			      dec   HL 
921e 2b			      dec   HL 
921f 2b			      dec   HL 
9220			 
9220 19			      add   HL, DE                  ; Add prev block addr and size 
9221			 
9221 b7			      or    A                       ; Clear the carry flag 
9222 ed 42		      sbc   HL, BC                  ; Subtract addrs to compare adjacency 
9224 20 2e		      jr    NZ, free_done 
9226			 
9226			      ; Freed block is adjacent to prev, merge into one bigger block 
9226 60			      ld    H, B                    ; Load next ptr from freed block into DE 
9227 69			      ld    L, C 
9228 5e			      ld    E, (HL) 
9229 23			      inc   HL 
922a 56			      ld    D, (HL) 
922b e5			      push  HL                      ; Save freed block ptr for later 
922c			 
922c dd 6e 02		      ld    L, (IX+2)               ; Store freed block ptr into prev block 
922f dd 66 03		      ld    H, (IX+3) 
9232 73			      ld    (HL), E 
9233 23			      inc   HL 
9234 72			      ld    (HL), D 
9235			 
9235 e1			      pop   HL                      ; Restore freed block ptr 
9236 23			      inc   HL                      ; Load size of freed block into DE 
9237 5e			      ld    E, (HL) 
9238 23			      inc   HL 
9239 56			      ld    D, (HL) 
923a d5			      push  DE                      ; Save freed block size for later 
923b			 
923b dd 6e 02		      ld    L, (IX+2)               ; Load size of prev block into DE 
923e dd 66 03		      ld    H, (IX+3) 
9241 23			      inc   HL 
9242 23			      inc   HL 
9243 5e			      ld    E, (HL) 
9244 23			      inc   HL 
9245 56			      ld    D, (HL) 
9246			 
9246 e1			      pop   HL                      ; Add sizes of both blocks 
9247 19			      add   HL, DE 
9248 eb			      ex    DE, HL 
9249			 
9249 dd 6e 02		      ld    L, (IX+2)               ; Store new bigger size into prev block 
924c dd 66 03		      ld    H, (IX+3) 
924f 23			      inc   HL 
9250 23			      inc   HL 
9251 73			      ld    (HL), E 
9252 23			      inc   HL 
9253 72			      ld    (HL), D 
9254			 
9254			free_done: 
9254 21 04 00		      ld    HL, 4                   ; Clean up stack frame 
9257 39			      add   HL, SP 
9258 f9			      ld    SP, HL 
9259			 
9259			free_early_exit: 
9259 dd e1		      pop   IX 
925b d1			      pop   DE 
925c c1			      pop   BC 
925d			 
925d c9			      ret 
925e			 
925e			; moved to firmware.asm 
925e			; 
925e			;free_list         .dw   0     ; Block struct for start of free list (MUST be 4 bytes) 
925e			;                  .dw   0 
925e			 
925e			 
925e			endif 
925e			 
925e			 
925e			if MALLOC_3 
925e			; https://gist.githubusercontent.com/tomstorey/947a8b084bad69391a4b2a1c5b6d69ca/raw/5a08fb30a480d98c0deb4a6afe2d48961cc8e9d9/z80_malloc.s 
925e			;heap_start        .equ  0x9000      ; Starting address of heap 
925e			;heap_size         .equ  0x0100      ; Number of bytes available in heap 
925e			; 
925e			 ;     .org 0 
925e			  ;    jp    main 
925e			; 
925e			; 
925e			 ;     .org  0x100 
925e			;main: 
925e			 ;     ld    HL, 0x8100 
925e			  ;    ld    SP, HL 
925e			; 
925e			;      call  heap_init 
925e			 
925e			      ; Make some allocations 
925e			;      ld    HL, 12 
925e			;      call  malloc            ; Allocates 0x9004 
925e			; 
925e			 ;     ld    HL, 12 
925e			;      call  malloc            ; Allocates 0x9014 
925e			 
925e			;      ld    HL, 12 
925e			;      call  malloc            ; Allocates 0x9024 
925e			 
925e			      ; Free some allocations 
925e			;      ld    HL, 0x9014 
925e			;      call  free 
925e			 
925e			;      ld    HL, 0x9004 
925e			;      call  free 
925e			; 
925e			;      ld    HL, 0x9024 
925e			;      call  free 
925e			 
925e			 
925e			 ;     halt 
925e			 
925e			 
925e			;------------------------------------------------------------------------------ 
925e			;     heap_init                                                               : 
925e			;                                                                             : 
925e			; Description                                                                 : 
925e			;     Initialise the heap and make it ready for malloc and free operations.   : 
925e			;                                                                             : 
925e			;     The heap is maintained as a linked list, starting with an initial       : 
925e			;     "dummy block" of zero size which is mainly used to hold a pointer to    : 
925e			;     the first free block in the heap. Each block then points to the next    : 
925e			;     free block within the heap, and the free list ends at the first block   : 
925e			;     with a null pointer to the next free block.                             : 
925e			;                                                                             : 
925e			; Parameters                                                                  : 
925e			;     Inputs are compile-time only. Two defines which specify the starting    : 
925e			;     address of the heap and its size are required, along with a memory      : 
925e			;     allocation of 4 consecutive bytes which is used for a dummy block which : 
925e			;     principally stores a pointer to the first free block in the heap.       : 
925e			;                                                                             : 
925e			; Returns                                                                     : 
925e			;     Nothing                                                                 : 
925e			;------------------------------------------------------------------------------ 
925e			heap_init: 
925e			      push  HL 
925e			 
925e			      ; Initialise free list struct 
925e			      ld    HL, heap_start 
925e			      ld    (free_list), HL 
925e			      ld    HL, 0 
925e			      ld    (free_list+2), HL 
925e			 
925e			      ; Insert first free block at bottom of heap, consumes entire heap 
925e			      ld    HL, heap_start+heap_size-4 
925e			      ld    (heap_start), HL        ; Next block (end of free list) 
925e			      ld    HL, heap_size-4 
925e			      ld    (heap_start+2), HL      ; Block size 
925e			 
925e			      ; Insert end of free list block at top of heap - two null words will 
925e			      ; terminate the free list 
925e			      ld    HL, 0 
925e			      ld    (heap_start+heap_size-2), HL 
925e			      ld    (heap_start+heap_size-4), HL 
925e			 
925e			      pop   HL 
925e			 
925e			      ret 
925e			 
925e			 
925e			;------------------------------------------------------------------------------ 
925e			;     malloc                                                                  : 
925e			;                                                                             : 
925e			; Description                                                                 : 
925e			;     Allocates the wanted space from the heap and returns the address of the : 
925e			;     first useable byte of the allocation.                                   : 
925e			;                                                                             : 
925e			;     Allocations can happen in one of two ways:                              : 
925e			;                                                                             : 
925e			;     1. A free block may be found which is the exact size wanted. In this    : 
925e			;        case the block is removed from the free list and retuedn to the      : 
925e			;        caller.                                                              : 
925e			;     2. A free block may be found which is larger than the size wanted. In   : 
925e			;        this case, the larger block is split into two. The first portion of  : 
925e			;        this block will become the requested space by the malloc call and    : 
925e			;        is returned to the caller. The second portion becomes a new free     : 
925e			;        block, and the free list is adjusted to maintain continuity via this : 
925e			;        newly created block.                                                 : 
925e			;                                                                             : 
925e			;     malloc does not set any initial value in the allocated space, the       : 
925e			;     caller is required to do this as required.                              : 
925e			;                                                                             : 
925e			;     This implementation of malloc uses the stack exclusively, and is        : 
925e			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
925e			;     advisable to disable interrupts before calling malloc, and recommended  : 
925e			;     to avoid the use of malloc inside ISRs in general.                      : 
925e			;                                                                             : 
925e			;     NOTE: heap_init must be called before malloc and free can be used.      : 
925e			;                                                                             : 
925e			; Parameters                                                                  : 
925e			;     HL  Number of bytes wanted                                              : 
925e			;                                                                             : 
925e			; Returns                                                                     : 
925e			;     HL  Address of the first useable byte of the allocation                 : 
925e			;                                                                             : 
925e			; Flags                                                                       : 
925e			;     Z   Set if the allocation did not succeed, clear otherwise              : 
925e			;                                                                             : 
925e			; Stack frame                                                                 : 
925e			;       |             |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |     BC      |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |     DE      |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |     IX      |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |  prev_free  |                                                       : 
925e			;   +4  +-------------+                                                       : 
925e			;       |  this_free  |                                                       : 
925e			;   +2  +-------------+                                                       : 
925e			;       |  next_free  |                                                       : 
925e			;   +0  +-------------+                                                       : 
925e			;       |             |                                                       : 
925e			;                                                                             : 
925e			;------------------------------------------------------------------------------ 
925e			malloc: 
925e			      push  BC 
925e			      push  DE 
925e			      push  IX 
925e			 
925e			      ld    A, H                    ; Exit if no space requested 
925e			      or    L 
925e			      jp    Z, malloc_early_exit 
925e			 
925e			      ; Set up stack frame 
925e			      ex    DE, HL 
925e			      ld    HL, -6                  ; Reserve 6 bytes for stack frame 
925e			      add   HL, SP 
925e			      ld    SP, HL 
925e			      ld    IX, 0                   ; Use IX as a frame pointer 
925e			      add   IX, SP 
925e			 
925e			      ; Setup initial state 
925e			      ld    HL, 4                   ; want must also include space used by block struct 
925e			      add   HL, DE 
925e			 
925e			      ld    B, H                    ; Move want to BC 
925e			      ld    C, L 
925e			 
925e			      ld    HL, free_list           ; Store prev_free ptr to stack 
925e			      ld    (IX+4), L 
925e			      ld    (IX+5), H 
925e			 
925e			      ld    E, (HL)                 ; Store this_free ptr to stack 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      ld    (IX+2), E 
925e			      ld    (IX+3), D 
925e			      ex    DE, HL                  ; this_free ptr into HL 
925e			 
925e			      ; Loop through free block list to find some space 
925e			malloc_find_space: 
925e			      ld    E, (HL)                 ; Load next_free ptr into DE 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			 
925e			      ld    A, D                    ; Check for null next_free ptr - end of free list 
925e			      or    E 
925e			      jp    Z, malloc_no_space 
925e			 
925e			      ld    (IX+0), E               ; Store next_free ptr to stack 
925e			      ld    (IX+1), D 
925e			 
925e			      ; Does this block have enough space to make the allocation? 
925e			      inc   HL                      ; Load free block size into DE 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			 
925e			      ex    DE, HL                  ; Check size of block against want 
925e			      or    A                       ; Ensure carry flag clear 
925e			      sbc   HL, BC 
925e			      push  HL                      ; Store the result for later (new block size) 
925e			 
925e			      jr    Z, malloc_alloc_fit     ; Z means block size matches want - can allocate 
925e			      jr    NC, malloc_alloc_split  ; NC means block is bigger than want - can allocate 
925e			 
925e			      ; this_free block is not big enough, setup ptrs to test next free block 
925e			      pop   HL                      ; Discard previous result 
925e			 
925e			      ld    L, (IX+2)               ; Move this_free ptr into prev_free 
925e			      ld    H, (IX+3) 
925e			      ld    (IX+4), L 
925e			      ld    (IX+5), H 
925e			 
925e			      ld    L, (IX+0)               ; Move next_free ptr into this_free 
925e			      ld    H, (IX+1) 
925e			      ld    (IX+2), L 
925e			      ld    (IX+3), H 
925e			 
925e			      jr    malloc_find_space 
925e			 
925e			      ; split a bigger block into two - requested size and remaining size 
925e			malloc_alloc_split: 
925e			      ex    DE, HL                  ; Calculate address of new free block 
925e			      dec   HL 
925e			      dec   HL 
925e			      dec   HL 
925e			      add   HL, BC 
925e			 
925e			      ; Create a new block and point it at next_free 
925e			      ld    E, (IX+0)               ; Load next_free ptr into DE 
925e			      ld    D, (IX+1) 
925e			 
925e			      ld    (HL), E                 ; Store next_free ptr into new block 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			      pop   DE                      ; Store size of new block into new block 
925e			      inc   HL 
925e			      ld    (HL), E 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			      ; Update this_free ptr to point to new block 
925e			      dec   HL 
925e			      dec   HL 
925e			      dec   HL 
925e			 
925e			      ld    E, (IX+2)               ; Take a copy of current this_free ptr 
925e			      ld    D, (IX+3) 
925e			 
925e			      ld    (IX+2), L               ; Store new block addr as this_free ptr 
925e			      ld    (IX+3), H 
925e			 
925e			      ; Modify this_free block to be allocation 
925e			      ex    DE, HL 
925e			      xor   A                       ; Null the next block ptr of allocated block 
925e			      ld    (HL), A 
925e			      inc   HL 
925e			      ld    (HL), A 
925e			 
925e			      inc   HL                      ; Store want size into allocated block 
925e			      ld    (HL), C 
925e			      inc   HL 
925e			      ld    (HL), B 
925e			      inc   HL 
925e			      push  HL                      ; Address of allocation to return 
925e			 
925e			      jr    malloc_update_links 
925e			 
925e			malloc_alloc_fit: 
925e			      pop   HL                      ; Dont need new block size, want is exact fit 
925e			 
925e			      ; Modify this_free block to be allocation 
925e			      ex    DE, HL 
925e			      dec   HL 
925e			      dec   HL 
925e			      dec   HL 
925e			 
925e			      xor   A                       ; Null the next block ptr of allocated block 
925e			      ld    (HL), A 
925e			      inc   HL 
925e			      ld    (HL), A 
925e			 
925e			      inc   HL                      ; Store address of allocation to return 
925e			      inc   HL 
925e			      inc   HL 
925e			      push  HL 
925e			 
925e			      ; Copy next_free ptr to this_free, remove allocated block from free list 
925e			      ld    L, (IX+0)               ; next_free to HL 
925e			      ld    H, (IX+1) 
925e			 
925e			      ld    (IX+2), L               ; HL to this_free 
925e			      ld    (IX+3), H 
925e			 
925e			 
925e			malloc_update_links: 
925e			      ; Update prev_free ptr to point to this_free 
925e			      ld    L, (IX+4)               ; prev_free ptr to HL 
925e			      ld    H, (IX+5) 
925e			 
925e			      ld    E, (IX+2)               ; this_free ptr to DE 
925e			      ld    D, (IX+3) 
925e			 
925e			      ld    (HL), E                 ; this_free ptr into prev_free 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			      ; Clear the Z flag to indicate successful allocation 
925e			      ld    A, D 
925e			      or    E 
925e			 
925e			      pop   DE                      ; Address of allocation 
925e			 
925e			malloc_no_space: 
925e			      ld    HL, 6                   ; Clean up stack frame 
925e			      add   HL, SP 
925e			      ld    SP, HL 
925e			 
925e			      ex    DE, HL                  ; Alloc addr into HL for return 
925e			 
925e			malloc_early_exit: 
925e			      pop   IX 
925e			      pop   DE 
925e			      pop   BC 
925e			 
925e			      ret 
925e			 
925e			 
925e			;------------------------------------------------------------------------------ 
925e			;     free                                                                    : 
925e			;                                                                             : 
925e			; Description                                                                 : 
925e			;     Return the space pointed to by HL to the heap. HL must be an address as : 
925e			;     returned by malloc, otherwise the behaviour is undefined.               : 
925e			;                                                                             : 
925e			;     Where possible, directly adjacent free blocks will be merged together   : 
925e			;     into larger blocks to help ensure that the heap does not become         : 
925e			;     excessively fragmented.                                                 : 
925e			;                                                                             : 
925e			;     free does not clear or set any other value into the freed space, and    : 
925e			;     therefore its contents may be visible through subsequent malloc's. The  : 
925e			;     caller should clear the freed space as required.                        : 
925e			;                                                                             : 
925e			;     This implementation of free uses the stack exclusively, and is          : 
925e			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
925e			;     advisable to disable interrupts before calling free, and recommended    : 
925e			;     to avoid the use of free inside ISRs in general.                        : 
925e			;                                                                             : 
925e			;     NOTE: heap_init must be called before malloc and free can be used.      : 
925e			;                                                                             : 
925e			; Parameters                                                                  : 
925e			;     HL  Pointer to address of first byte of allocation to be freed          : 
925e			;                                                                             : 
925e			; Returns                                                                     : 
925e			;     Nothing                                                                 : 
925e			;                                                                             : 
925e			; Stack frame                                                                 : 
925e			;       |             |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |     BC      |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |     DE      |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |     IX      |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |  prev_free  |                                                       : 
925e			;   +2  +-------------+                                                       : 
925e			;       |  next_free  |                                                       : 
925e			;   +0  +-------------+                                                       : 
925e			;       |             |                                                       : 
925e			;                                                                             : 
925e			;------------------------------------------------------------------------------ 
925e			free: 
925e			      push  BC 
925e			      push  DE 
925e			      push  IX 
925e			 
925e			      ld    A, H                    ; Exit if ptr is null 
925e			      or    L 
925e			      jp    Z, free_early_exit 
925e			 
925e			      ; Set up stack frame 
925e			      ex    DE, HL 
925e			      ld    HL, -4                  ; Reserve 4 bytes for stack frame 
925e			      add   HL, SP 
925e			      ld    SP, HL 
925e			      ld    IX, 0                   ; Use IX as a frame pointer 
925e			      add   IX, SP 
925e			 
925e			      ; The address in HL points to the start of the useable allocated space, 
925e			      ; but the block struct starts 4 bytes before this. Sub 4 to get the 
925e			      ; address of the block itself. 
925e			      ex    DE, HL 
925e			      ld    DE, -4 
925e			      add   HL, DE 
925e			 
925e			      ; An allocated block must have a null next block pointer in it 
925e			      ld    A, (HL) 
925e			      inc   HL 
925e			      or    (HL) 
925e			      jp    NZ, free_done 
925e			 
925e			      dec   HL 
925e			 
925e			      ld    B, H                    ; Copy HL to BC 
925e			      ld    C, L 
925e			 
925e			      ; Loop through the free list to find the first block with an address 
925e			      ; higher than the block being freed 
925e			      ld    HL, free_list 
925e			 
925e			free_find_higher_block: 
925e			      ld    E, (HL)                 ; Load next ptr from free block 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      dec   HL 
925e			 
925e			      ld    (IX+0), E               ; Save ptr to next free block 
925e			      ld    (IX+1), D 
925e			      ld    (IX+2), L               ; Save ptr to prev free block 
925e			      ld    (IX+3), H 
925e			 
925e			      ld    A, B                    ; Check if DE is greater than BC 
925e			      cp    D                       ; Compare MSB first 
925e			      jr    Z, $+4                  ; MSB the same, compare LSB 
925e			      jr    NC, free_find_higher_block_skip 
925e			      ld    A, C 
925e			      cp    E                       ; Then compare LSB 
925e			      jr    C, free_found_higher_block 
925e			 
925e			free_find_higher_block_skip: 
925e			      ld    A, D                    ; Reached the end of the free list? 
925e			      or    E 
925e			      jp    Z, free_done 
925e			 
925e			      ex    DE, HL 
925e			 
925e			      jr    free_find_higher_block 
925e			 
925e			free_found_higher_block: 
925e			      ; Insert freed block between prev and next free blocks 
925e			      ld    (HL), C                 ; Point prev free block to freed block 
925e			      inc   HL 
925e			      ld    (HL), B 
925e			 
925e			      ld    H, B                    ; Point freed block at next free block 
925e			      ld    L, C 
925e			      ld    (HL), E 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			      ; Check if the freed block is adjacent to the next free block 
925e			      inc   HL                      ; Load size of freed block into HL 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      ex    DE, HL 
925e			 
925e			      add   HL, BC                  ; Add addr of freed block and its size 
925e			 
925e			      ld    E, (IX+0)               ; Load addr of next free block into DE 
925e			      ld    D, (IX+1) 
925e			 
925e			      or    A                       ; Clear the carry flag 
925e			      sbc   HL, DE                  ; Subtract addrs to compare adjacency 
925e			      jr    NZ, free_check_adjacent_to_prev 
925e			 
925e			      ; Freed block is adjacent to next, merge into one bigger block 
925e			      ex    DE, HL                  ; Load next ptr from next block into DE 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      push  HL                      ; Save ptr to next block for later 
925e			 
925e			      ld    H, B                    ; Store ptr from next block into freed block 
925e			      ld    L, C 
925e			      ld    (HL), E 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			      pop   HL                      ; Restore ptr to next block 
925e			      inc   HL                      ; Load size of next block into DE 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      push  DE                      ; Save next block size for later 
925e			 
925e			      ld    H, B                    ; Load size of freed block into HL 
925e			      ld    L, C 
925e			      inc   HL 
925e			      inc   HL 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      ex    DE, HL 
925e			 
925e			      pop   DE                      ; Restore size of next block 
925e			      add   HL, DE                  ; Add sizes of both blocks 
925e			      ex    DE, HL 
925e			 
925e			      ld    H, B                    ; Store new bigger size into freed block 
925e			      ld    L, C 
925e			      inc   HL 
925e			      inc   HL 
925e			      ld    (HL), E 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			free_check_adjacent_to_prev: 
925e			      ; Check if the freed block is adjacent to the prev free block 
925e			      ld    L, (IX+2)               ; Prev free block ptr into HL 
925e			      ld    H, (IX+3) 
925e			 
925e			      inc   HL                      ; Size of prev free block into DE 
925e			      inc   HL 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      dec   HL 
925e			      dec   HL 
925e			      dec   HL 
925e			 
925e			      add   HL, DE                  ; Add prev block addr and size 
925e			 
925e			      or    A                       ; Clear the carry flag 
925e			      sbc   HL, BC                  ; Subtract addrs to compare adjacency 
925e			      jr    NZ, free_done 
925e			 
925e			      ; Freed block is adjacent to prev, merge into one bigger block 
925e			      ld    H, B                    ; Load next ptr from freed block into DE 
925e			      ld    L, C 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      push  HL                      ; Save freed block ptr for later 
925e			 
925e			      ld    L, (IX+2)               ; Store freed block ptr into prev block 
925e			      ld    H, (IX+3) 
925e			      ld    (HL), E 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			      pop   HL                      ; Restore freed block ptr 
925e			      inc   HL                      ; Load size of freed block into DE 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      push  DE                      ; Save freed block size for later 
925e			 
925e			      ld    L, (IX+2)               ; Load size of prev block into DE 
925e			      ld    H, (IX+3) 
925e			      inc   HL 
925e			      inc   HL 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			 
925e			      pop   HL                      ; Add sizes of both blocks 
925e			      add   HL, DE 
925e			      ex    DE, HL 
925e			 
925e			      ld    L, (IX+2)               ; Store new bigger size into prev block 
925e			      ld    H, (IX+3) 
925e			      inc   HL 
925e			      inc   HL 
925e			      ld    (HL), E 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			free_done: 
925e			      ld    HL, 4                   ; Clean up stack frame 
925e			      add   HL, SP 
925e			      ld    SP, HL 
925e			 
925e			free_early_exit: 
925e			      pop   IX 
925e			      pop   DE 
925e			      pop   BC 
925e			 
925e			      ret 
925e			 
925e			 
925e			;      .org 0x8000 
925e			; 
925e			;free_list         .dw   0     ; Block struct for start of free list (MUST be 4 bytes) 
925e			 ;                 .dw   0 
925e			 
925e			endif 
925e			 
925e			 
925e			if MALLOC_4 
925e			 
925e			; My memory allocation code. Very very simple.... 
925e			; allocate space under 250 chars 
925e			 
925e			heap_init: 
925e				; init start of heap as zero 
925e				;  
925e			 
925e				ld hl, heap_start 
925e				ld a, 0 
925e				ld (hl), a      ; empty block 
925e				inc hl 
925e				ld a, 0 
925e				ld (hl), a      ; length of block 
925e				; write end of list 
925e				inc hl 
925e				ld a,(hl) 
925e				inc hl 
925e				ld a,(hl) 
925e				 
925e			 
925e				; init some malloc vars 
925e			 
925e				ld hl, 0 
925e				ld (free_list), hl       ; store last malloc location 
925e			 
925e				ld hl, free_list+3      ; flag for 'free' being used and force a rescan for reuse of block  
925e				ld a, 0 
925e				ld (hl), a 
925e			 
925e			 
925e				ld hl, heap_start 
925e				;  
925e				  
925e				ret 
925e			 
925e			 
925e			;    free block marker 
925e			;    requested size  
925e			;    pointer to next block 
925e			;    .... 
925e			;    next block marker 
925e			 
925e			 
925e			; TODO add a flag that is reset on use of free. if flag is reset then start scan from start of heap otherwise use last location 
925e			; 
925e			 
925e			 
925e			malloc:  
925e				push de 
925e				push bc 
925e				push af 
925e			 
925e				; hl space required 
925e				 
925e				ld c, l    ; hold space   (TODO only a max of 255) 
925e			 
925e			;	inc c     ; TODO BUG need to fix memory leak on push str 
925e			;	inc c 
925e			;	inc c 
925e			;	inc c 
925e			;	inc c 
925e			;	inc c 
925e			;	inc c 
925e			 
925e			 
925e			 
925e				; start at heap if a free has been issued so we can reclaim it otherwise continue from last time 
925e			 
925e				ld a, (free_list+3) 
925e				cp 0 
925e				jr z, .contheap 
925e			 
925e				ld hl, (free_list)     ; get last alloc 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "mrs" 
925e						CALLMONITOR 
925e					endif 
925e				jr .startalloc 
925e			 
925e			.contheap: 
925e				ld hl, heap_start 
925e			 
925e			.startalloc: 
925e			 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "mym" 
925e						CALLMONITOR 
925e					endif 
925e			.findblock: 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "mmf" 
925e						CALLMONITOR 
925e					endif 
925e			 
925e				ld a,(hl)  
925e				; if byte is zero then clear to use 
925e			 
925e				cp 0 
925e				jr z, .foundemptyblock 
925e			 
925e				; if byte is not clear 
925e				;     then byte is offset to next block 
925e			 
925e				inc hl 
925e				ld a, (hl) ; get size 
925e			.nextblock:	inc hl 
925e					ld e, (hl) 
925e					inc hl 
925e					ld d, (hl) 
925e					ex de, hl 
925e			;	inc hl  ; move past the store space 
925e			;	inc hl  ; move past zero index  
925e			 
925e				; TODO detect no more space 
925e			 
925e				push hl 
925e				ld de, heap_end 
925e				call cmp16 
925e				pop hl 
925e				jr nc, .nospace 
925e			 
925e				jr .findblock 
925e			 
925e			.nospace: ld hl, 0 
925e				jp .exit 
925e			 
925e			 
925e			.foundemptyblock:	 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "mme" 
925e						CALLMONITOR 
925e					endif 
925e			 
925e			; TODO has block enough space if reusing??? 
925e			 
925e				;  
925e			 
925e			; see if this block has been previously used 
925e				inc hl 
925e				ld a, (hl) 
925e				dec hl 
925e				cp 0 
925e				jr z, .newblock 
925e			 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "meR" 
925e						CALLMONITOR 
925e					endif 
925e			 
925e			; no reusing previously allocated block 
925e			 
925e			; is it smaller than previously used? 
925e				 
925e				inc hl    ; move to size 
925e				ld a, c 
925e				sub (hl)        ; we want c < (hl) 
925e				dec hl    ; move back to marker 
925e			        jr z, .findblock 
925e			 
925e				; update with the new size which should be lower 
925e			 
925e			        ;inc  hl   ; negate next move. move back to size  
925e			 
925e			.newblock: 
925e				; need to be at marker here 
925e			 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "meN" 
925e						CALLMONITOR 
925e					endif 
925e			 
925e			 
925e				ld a, c 
925e			 
925e				ld (free_list+3), a	 ; flag resume from last malloc  
925e				ld (free_list), hl    ; save out last location 
925e			 
925e			 
925e				;inc a     ; space for length byte 
925e				ld (hl), a     ; save block in use marker 
925e			 
925e				inc hl   ; move to space marker 
925e				ld (hl), a    ; save new space 
925e			 
925e				inc hl   ; move to start of allocated area 
925e				 
925e			;	push hl     ; save where we are - 1  
925e			 
925e			;	inc hl  ; move past zero index  
925e				; skip space to set down new marker 
925e			 
925e				; provide some extra space for now 
925e			 
925e				inc a    ; actual is one fewer than bytes requested. correct if zero index is taken into account 
925e				inc a 
925e				inc a 
925e			 
925e				push hl   ; save where we are in the node block 
925e			 
925e				call addatohl 
925e			 
925e				; write linked list point 
925e			 
925e				pop de     ; get our node position 
925e				ex de, hl 
925e			 
925e				ld (hl), e 
925e				inc hl 
925e				ld (hl), d 
925e			 
925e				inc hl 
925e			 
925e				; now at start of allocated data so save pointer 
925e			 
925e				push hl 
925e			 
925e				; jump to position of next node and setup empty header in DE 
925e			 
925e				ex de, hl 
925e			 
925e			;	inc hl ; move past end of block 
925e			 
925e				ld a, 0 
925e				ld (hl), a   ; empty marker 
925e				inc hl 
925e				ld (hl), a   ; size 
925e				inc hl  
925e				ld (hl), a   ; ptr 
925e				inc hl 
925e				ld (hl), a   ; ptr 
925e			 
925e			 
925e				pop hl 
925e			 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "mmr" 
925e						CALLMONITOR 
925e					endif 
925e			 
925e			.exit: 
925e				pop af 
925e				pop bc 
925e				pop de  
925e				ret 
925e			 
925e			 
925e			 
925e			 
925e			free:  
925e				push hl 
925e				push af 
925e				; get address in hl 
925e			 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "fre" 
925e						CALLMONITOR 
925e					endif 
925e				; data is at hl - move to block count 
925e				dec hl 
925e				dec hl    ; get past pointer 
925e				dec hl 
925e			 
925e				ld a, (hl)    ; need this for a validation check 
925e			 
925e				dec hl    ; move to block marker 
925e			 
925e				; now check that the block count and block marker are the same  
925e			        ; this checks that we are on a malloc node and not random memory 
925e			        ; OK a faint chance this could be a problem but rare - famous last words! 
925e			 
925e				ld c, a 
925e				ld a, (hl)    
925e			 
925e				cp c 
925e				jr nz, .freeignore      ; not a valid malloc node in use so dont break anything 
925e			 
925e				; yes good chance we are on a malloc node 
925e			 
925e				ld a, 0      
925e				ld (hl), a   ; mark as free 
925e			 
925e				ld (free_list+3), a	 ; flag reuse of existing block on next malloc 
925e			 
925e			.freeignore:  
925e			 
925e				pop af 
925e				pop hl 
925e			 
925e				ret 
925e			 
925e			 
925e			 
925e			endif 
925e			 
925e			; eof 
# End of file firmware_memory.asm
925e			  
925e			; device C  
925e			; Now handled by SPI  
925e			;if SOUND_ENABLE  
925e			;	include "firmware_sound.asm"  
925e			;endif  
925e			  
925e			include "firmware_diags.asm"  
925e			; Hardware diags menu 
925e			 
925e			 
925e			config: 
925e			 
925e 3e 00			ld a, 0 
9260 21 84 92			ld hl, .configmn 
9263 cd ee 8a			call menu 
9266			 
9266 fe 00			cp 0 
9268 c8				ret z 
9269			 
9269			;	cp 1 
9269			;	call z, .savetostore 
9269			 
9269 fe 01			cp 1 
926b			if STARTUP_V1 
926b cc 9a 92			call z, .selautoload 
926e			endif 
926e			 
926e			if STARTUP_V2 
926e				call z, .enautoload 
926e			endif 
926e fe 02			cp 2 
9270 cc 90 92			call z, .disautoload 
9273			;	cp 3 
9273			;	call z, .selbank 
9273 fe 03			cp 3 
9275 cc b8 92			call z, .debug_tog 
9278 fe 04			cp 4 
927a cc 06 94			call z, .bpsgo 
927d fe 05			cp 5 
927f cc e1 92			call z, hardware_diags 
9282			if STARTUP_V2 
9282				cp 6 
9282				call z, create_startup 
9282			endif 
9282 18 da			jr config 
9284			 
9284			.configmn: 
9284			;	dw prom_c3 
9284 f4 95			dw prom_c2 
9286 09 96			dw prom_c2a 
9288			;	dw prom_c2b 
9288			;	dw prom_c4 
9288 28 96			dw prom_m4 
928a 43 96			dw prom_m4b 
928c 4b 96			dw prom_c1 
928e			if STARTUP_V2 
928e				dw prom_c9 
928e			endif 
928e 00 00			dw 0 
9290				 
9290			 
9290			if STARTUP_V2 
9290			.enautoload: 
9290				if STORAGE_SE 
9290				ld a, $fe      ; bit 0 clear 
9290				ld (spi_device), a 
9290			 
9290				call storage_get_block_0 
9290			 
9290				ld a, 1 
9290				ld (store_page+STORE_0_AUTOFILE), a 
9290			 
9290					ld hl, 0 
9290					ld de, store_page 
9290				call storage_write_block	 ; save update 
9290				else 
9290			 
9290				ld hl, prom_notav 
9290				ld de, prom_empty 
9290				call info_panel 
9290				endif 
9290			 
9290			 
9290				ret 
9290			endif 
9290			 
9290			.disautoload: 
9290				if STORAGE_SE 
9290				ld a, $fe      ; bit 0 clear 
9290				ld (spi_device), a 
9290			 
9290				call storage_get_block_0 
9290			 
9290				ld a, 0 
9290				ld (store_page+STORE_0_AUTOFILE), a 
9290			 
9290					ld hl, 0 
9290					ld de, store_page 
9290				call storage_write_block	 ; save update 
9290				else 
9290			 
9290 21 5a 96			ld hl, prom_notav 
9293 11 70 96			ld de, prom_empty 
9296 cd 4e 8a			call info_panel 
9299				endif 
9299			 
9299			 
9299 c9				ret 
929a			 
929a			if STARTUP_V1 
929a			 
929a			; Select auto start 
929a			 
929a			.selautoload: 
929a			 
929a				 
929a				if STORAGE_SE 
929a			 
929a					call config_dir 
929a				        ld hl, scratch 
929a					ld a, 0 
929a					call menu 
929a			 
929a					cp 0 
929a					ret z 
929a			 
929a					dec a 
929a			 
929a			 
929a					; locate menu option 
929a			 
929a					ld hl, scratch 
929a					call table_lookup 
929a			 
929a					if DEBUG_FORTH_WORDS 
929a						DMARK "ALl" 
929a						CALLMONITOR 
929a					endif 
929a					; with the pointer to the menu it, the byte following the zero term is the file id 
929a			 
929a					ld a, 0 
929a					ld bc, 50   ; max of bytes to look at 
929a					cpir  
929a			 
929a					if DEBUG_FORTH_WORDS 
929a						DMARK "ALb" 
929a						CALLMONITOR 
929a					endif 
929a					;inc hl 
929a			 
929a					ld a, (hl)   ; file id 
929a					 
929a				        ; save bank and file ids 
929a			 
929a					push af 
929a			 
929a			; TODO need to save to block 0 on bank 1	 
929a			 
929a					call storage_get_block_0 
929a			 
929a					if DEBUG_FORTH_WORDS 
929a						DMARK "AL0" 
929a						CALLMONITOR 
929a					endif 
929a					pop af 
929a			 
929a					ld (store_page+STORE_0_FILERUN),a 
929a					 
929a					; save bank id 
929a			 
929a					ld a,(spi_device) 
929a					ld (store_page+STORE_0_BANKRUN),a 
929a			 
929a					; enable auto run of store file 
929a			 
929a					ld a, 1 
929a					ld (store_page+STORE_0_AUTOFILE),a 
929a			 
929a					; save buffer 
929a			 
929a					ld hl, 0 
929a					ld de, store_page 
929a					if DEBUG_FORTH_WORDS 
929a						DMARK "ALw" 
929a						CALLMONITOR 
929a					endif 
929a				call storage_write_block	 ; save update 
929a			  
929a			 
929a			 
929a			 
929a					ld hl, scratch 
929a					call config_fdir 
929a			 
929a				else 
929a			 
929a 21 5a 96			ld hl, prom_notav 
929d 11 70 96			ld de, prom_empty 
92a0 cd 4e 8a			call info_panel 
92a3			 
92a3				endif 
92a3 c9				ret 
92a4			endif 
92a4			 
92a4			 
92a4			; Select storage bank 
92a4			 
92a4			.selbank: 
92a4			 
92a4			;	if STORAGE_SE 
92a4			;	else 
92a4			 
92a4 21 5a 96			ld hl, prom_notav 
92a7 11 70 96			ld de, prom_empty 
92aa cd 4e 8a			call info_panel 
92ad			;	endif 
92ad				 
92ad c9				ret 
92ae			 
92ae			if STORAGE_SE 
92ae			 
92ae			.config_ldir:   
92ae				; Load storage bank labels into menu array 
92ae			 
92ae				 
92ae			 
92ae			 
92ae				ret 
92ae			 
92ae			 
92ae			endif 
92ae			 
92ae			 
92ae			; Save user words to storage 
92ae			 
92ae			.savetostore: 
92ae			 
92ae			;	if STORAGE_SE 
92ae			; 
92ae			;		call config_dir 
92ae			;	        ld hl, scratch 
92ae			;		ld a, 0 
92ae			;		call menu 
92ae			;		 
92ae			;		ld hl, scratch 
92ae			;		call config_fdir 
92ae			; 
92ae			;	else 
92ae			 
92ae 21 5a 96			ld hl, prom_notav 
92b1 11 70 96			ld de, prom_empty 
92b4 cd 4e 8a			call info_panel 
92b7			 
92b7			;	endif 
92b7			 
92b7 c9				ret 
92b8			 
92b8			if STARTUP_V2 
92b8			 
92b8			create_startup: 
92b8			 
92b8				ld a, 0 
92b8				ld hl, .crstart 
92b8				call menu 
92b8			 
92b8				cp 0 
92b8				ret z 
92b8			 
92b8				cp 1 
92b8				call z, .genlsword 
92b8				cp 2 
92b8				call z, .genedword 
92b8			 
92b8				cp 3 
92b8				call z, .gendemword 
92b8			 
92b8				cp 4 
92b8				call z, .genutlword 
92b8				cp 5 
92b8				call z, .genspiword 
92b8				cp 6 
92b8				call z, .genkeyword 
92b8				cp 7 
92b8				call z, .gensoundword 
92b8				cp 8 
92b8				call z, .genhwword 
92b8				jr create_startup 
92b8			 
92b8			.genhwword: 
92b8				ld hl, crs_hw 
92b8				ld de, .hwworddef 
92b8				call .genfile 
92b8				ret 
92b8			.gensoundword: 
92b8				ld hl, crs_sound 
92b8				ld de, .soundworddef 
92b8				call .genfile 
92b8				ret 
92b8			.genlsword: 
92b8				ld hl, crs_s1 
92b8				ld de, .lsworddef 
92b8				call .genfile 
92b8				ret 
92b8			 
92b8			.genedword: 
92b8				ld de, .edworddef 
92b8				ld hl, crs_s2 
92b8				call .genfile 
92b8				ret 
92b8			 
92b8			.gendemword: 
92b8				ld de, .demoworddef 
92b8				ld hl, crs_s3 
92b8				call .genfile 
92b8				ret 
92b8			 
92b8			.genutlword: 
92b8				ld hl, crs_s4 
92b8				ld de, .utilwordef 
92b8				call .genfile 
92b8				ret 
92b8			.genspiword: 
92b8				ld hl, crs_s5 
92b8				ld de, .spiworddef 
92b8				call .genfile 
92b8				ret 
92b8			.genkeyword: 
92b8				ld hl, crs_s6 
92b8				ld de, .keyworddef 
92b8				call .genfile 
92b8				ret 
92b8			 
92b8			; hl - points to file name 
92b8			; de - points to strings to add to file 
92b8			 
92b8			.genfile: 
92b8				push hl 
92b8				push de 
92b8			 
92b8				call clear_display 
92b8				ld a, display_row_1 
92b8				ld de, .genfiletxt 
92b8				call str_at_display 
92b8				call update_display 
92b8			 
92b8				pop de 
92b8				pop hl 
92b8			 
92b8			 
92b8				push de 
92b8				call storage_create 
92b8				; id in hl 
92b8				pop de   ; table of strings to add 
92b8			 
92b8			.genloop: 
92b8			 
92b8				push hl ; save id for next time around 
92b8				push de ; save de for next time around 
92b8			 
92b8				ex de, hl 
92b8				call loadwordinhl 
92b8				ex de, hl 
92b8			 
92b8				; need hl to be the id 
92b8				; need de to be the string ptr 
92b8				 
92b8				call storage_append 
92b8			 
92b8				pop de 
92b8				pop hl 
92b8			 
92b8				inc de 
92b8				inc de 
92b8			 
92b8				ld a,(de) 
92b8				cp 0 
92b8				jr nz, .genloop 
92b8				inc de 
92b8				ld a, (de) 
92b8				dec de 
92b8				cp 0 
92b8				jr nz, .genloop	 
92b8			 
92b8				ret 
92b8			 
92b8			.genfiletxt:  db "Creating file...",0 
92b8			 
92b8			.hwworddef: 
92b8				dw test5 
92b8				dw test6 
92b8				dw test7 
92b8				dw test8 
92b8				dw test9 
92b8				dw test10 
92b8				dw 0 
92b8			 
92b8			.soundworddef: 
92b8				dw sound1 
92b8				dw sound2 
92b8				dw sound3 
92b8				dw sound4 
92b8				dw sound5 
92b8				dw sound6 
92b8				dw sound7 
92b8				dw sound8 
92b8				dw sound9 
92b8				dw 0 
92b8			 
92b8			.utilwordef: 
92b8				dw strncpy 
92b8				dw type 
92b8				dw tuck 
92b8				dw clrstack 
92b8				dw longread 
92b8				dw start1 
92b8				dw start2 
92b8			; duplicated 
92b8			;	dw start3b 
92b8			;	dw start3c 
92b8				dw list 
92b8				dw 0 
92b8			 
92b8			.lsworddef: 
92b8				dw start3b 
92b8				dw 0 
92b8			 
92b8			.edworddef: 
92b8				dw edit1 
92b8				dw edit2 
92b8				dw edit3 
92b8				dw 0 
92b8			 
92b8			.demoworddef: 
92b8				dw game1 
92b8				dw game1a 
92b8				dw game1b 
92b8				dw game1c 
92b8				dw game1d 
92b8				dw game1s 
92b8				dw game1t 
92b8				dw game1f 
92b8				dw game1z 
92b8				dw game1zz 
92b8				dw ssv2 
92b8				dw ssv3 
92b8				dw ssv4 
92b8				dw ssv5 
92b8				dw ssv1 
92b8				dw ssv1cpm	 
92b8			;	dw game2b 
92b8			;	dw game2bf 
92b8			;	dw game2mba 
92b8			;	dw game2mbas	 
92b8			;	dw game2mbht 
92b8			;	dw game2mbms 
92b8			;	dw game2mb 
92b8			;	dw game3w 
92b8			;	dw game3p 
92b8			;	dw game3sc 
92b8			;	dw game3vsi 
92b8			;	dw game3vs 
92b8				dw 0 
92b8			 
92b8			 
92b8			.spiworddef: 
92b8			 
92b8			    dw spi1 
92b8			    dw spi2 
92b8			    dw spi2b 
92b8			    dw spi3 
92b8			    dw spi4 
92b8			    dw spi5 
92b8			;    dw spi6 
92b8			;    dw spi7 
92b8			 
92b8			;    dw spi8 
92b8			;    dw spi9 
92b8			;    dw spi10 
92b8			    dw 0 
92b8			 
92b8			.keyworddef: 
92b8			 
92b8				dw keyup 
92b8				dw keydown 
92b8				dw keyleft 
92b8				dw keyright 
92b8				dw 	keyf1 
92b8				dw keyf2 
92b8				dw keyf3 
92b8				dw keyf4 
92b8				dw keyf5 
92b8				dw keyf6 
92b8				dw keyf7 
92b8				dw keyf8 
92b8				dw keyf9 
92b8				dw keyf10 
92b8				dw keyf11 
92b8				dw keyf12 
92b8				dw keytab 
92b8				dw keycr 
92b8				dw keyhome 
92b8				dw keyend 
92b8				dw keybs 
92b8				dw 0 
92b8			 
92b8			.crstart: 
92b8				dw crs_s1 
92b8				dw crs_s2 
92b8				dw crs_s3 
92b8				dw crs_s4 
92b8				dw crs_s5 
92b8				dw crs_s6 
92b8				dw crs_sound 
92b8				dw crs_hw 
92b8				dw 0 
92b8			 
92b8			endif 
92b8			 
92b8			 
92b8			if STORAGE_SE 
92b8			 
92b8			config_fdir: 
92b8				; using the scratch dir go through and release the memory allocated for each string 
92b8				 
92b8				ld hl, scratch 
92b8			.cfdir:	ld e,(hl) 
92b8				inc hl 
92b8				ld d,(hl) 
92b8				inc hl 
92b8			 
92b8				ex de, hl 
92b8				call ishlzero 
92b8				ret z     ; return on null pointer 
92b8				call free 
92b8				ex de, hl 
92b8				jr .cfdir 
92b8			 
92b8			 
92b8				ret 
92b8			 
92b8			 
92b8			config_dir: 
92b8			 
92b8				; for the config menus that need to build a directory of storage call this routine 
92b8				; it will construct a menu in scratch to pass to menu 
92b8			 
92b8				; open storage device 
92b8			 
92b8				; execute DIR to build a list of files and their ids into scratch in menu format 
92b8				; once the menu has finished then will need to call config_fdir to release the strings 
92b8				 
92b8				; c = number items 
92b8			 
92b8				 
92b8				call storage_get_block_0 
92b8			 
92b8				ld hl, store_page     ; get current id count 
92b8				ld b, (hl) 
92b8				ld c, 0    ; count of files   
92b8			 
92b8			 
92b8				ld hl, scratch 
92b8				ld (store_tmp2), hl    ; location to poke strings 
92b8			 
92b8				; check for empty drive 
92b8			 
92b8				ld a, 0 
92b8				cp b 
92b8				jp z, .dirdone 
92b8			 
92b8				 
92b8					if DEBUG_FORTH_WORDS 
92b8						DMARK "Cdc" 
92b8						CALLMONITOR 
92b8					endif 
92b8			 
92b8			 
92b8			.diritem:	 
92b8				push bc 
92b8				; for each of the current ids do a search for them and if found push to stack 
92b8			 
92b8					ld hl, STORE_BLOCK_PHY 
92b8					ld d, 0		 ; look for extent 0 of block id as this contains file name 
92b8					ld e,b 
92b8			 
92b8					call storage_findnextid 
92b8			 
92b8			 
92b8					; if found hl will be non zero 
92b8			 
92b8					call ishlzero 
92b8					jr z, .dirnotfound 
92b8			 
92b8					; increase count 
92b8			 
92b8					pop bc	 
92b8					inc c 
92b8					push bc 
92b8					 
92b8			 
92b8					; get file header and push the file name 
92b8			 
92b8					ld de, store_page 
92b8					call storage_read_block 
92b8			 
92b8					; push file id to stack 
92b8				 
92b8					ld a, (store_page) 
92b8					ld h, 0 
92b8					ld l, a 
92b8			 
92b8					;call forth_push_numhl 
92b8					; TODO store id 
92b8			 
92b8					push hl 
92b8			 
92b8					; push extent count to stack  
92b8				 
92b8					ld hl, store_page+3 
92b8			 
92b8					; get file name length 
92b8			 
92b8					call strlenz   
92b8			 
92b8					inc hl   ; cover zero term 
92b8					inc hl  ; stick the id at the end of the area 
92b8			 
92b8					push hl 
92b8					pop bc    ; move length to bc 
92b8			 
92b8					call malloc 
92b8			 
92b8					; TODO save malloc area to scratch 
92b8			 
92b8					ex de, hl 
92b8					ld hl, (store_tmp2) 
92b8					ld (hl), e 
92b8					inc hl 
92b8					ld (hl), d 
92b8					inc hl 
92b8					ld (store_tmp2), hl 
92b8			 
92b8					 
92b8			 
92b8					;pop hl   ; get source 
92b8			;		ex de, hl    ; swap aronund	 
92b8			 
92b8					ld hl, store_page+3 
92b8					if DEBUG_FORTH_WORDS 
92b8						DMARK "CFd" 
92b8						CALLMONITOR 
92b8					endif 
92b8					ldir 
92b8			 
92b8					; de is past string, move back one and store id 
92b8					 
92b8					dec de 
92b8			 
92b8					; store file id 
92b8			 
92b8					pop hl 
92b8					ex de,hl 
92b8					ld (hl), e 
92b8			 
92b8					if DEBUG_FORTH_WORDS 
92b8						DMARK "Cdi" 
92b8						CALLMONITOR 
92b8					endif 
92b8					 
92b8			.dirnotfound: 
92b8					pop bc     
92b8					djnz .diritem 
92b8				 
92b8			.dirdone:	 
92b8			 
92b8					ld a, 0 
92b8					ld hl, (store_tmp2) 
92b8					ld (hl), a 
92b8					inc hl 
92b8					ld (hl), a 
92b8					inc hl 
92b8					; push a count of the dir items found 
92b8			 
92b8			;		ld h, 0 
92b8			;		ld l, c 
92b8			 
92b8				ret 
92b8			 
92b8			endif 
92b8			 
92b8			 
92b8			; Settings 
92b8			; Run  
92b8			 
92b8			 
92b8			 
92b8			;hd_menu1:   db "Diags:  1: Key Matrix   5: Sound",0 
92b8			;;hd_menu2:   db "        2: Editor",0   
92b8			;hd_menu2:   db "        2: Editor       6: Menu",0   
92b8			;hd_menu3:   db "        3: Storage",0 
92b8			;hd_menu4:   db "0=quit  4: Debug",0 
92b8			;hd_don:     db "ON",0 
92b8			;hd_doff:     db "OFF",0 
92b8			; 
92b8			; 
92b8			; 
92b8			;hardware_diags_old:       
92b8			; 
92b8			;.diagmenu: 
92b8			;	call clear_display 
92b8			;	ld a, display_row_1 
92b8			;	ld de, hd_menu1 
92b8			;	call str_at_display 
92b8			; 
92b8			;	ld a, display_row_2 
92b8			;	ld de, hd_menu2 
92b8			;	call str_at_display 
92b8			; 
92b8			;	ld a, display_row_3 
92b8			;	ld de, hd_menu3 
92b8			;	call str_at_display 
92b8			; 
92b8			;	ld a,  display_row_4 
92b8			;	ld de, hd_menu4 
92b8			;	call str_at_display 
92b8			; 
92b8			;	; display debug state 
92b8			; 
92b8			;	ld de, hd_don 
92b8			;	ld a, (os_view_disable) 
92b8			;	cp 0 
92b8			;	jr z, .distog 
92b8			;	ld de, hd_doff 
92b8			;.distog: ld a, display_row_4+17 
92b8			;	call str_at_display 
92b8			; 
92b8			;	call update_display 
92b8			; 
92b8			;	call cin_wait 
92b8			; 
92b8			; 
92b8			; 
92b8			;	cp '4' 
92b8			;	jr nz, .diagn1 
92b8			; 
92b8			;	; debug toggle 
92b8			; 
92b8			;	ld a, (os_view_disable) 
92b8			;	ld b, '*' 
92b8			;	cp 0 
92b8			;	jr z, .debtog 
92b8			;	ld b, 0 
92b8			;.debtog:	 
92b8			;	ld a,b 
92b8			;	ld (os_view_disable),a 
92b8			; 
92b8			;.diagn1: cp '0' 
92b8			;	 ret z 
92b8			; 
92b8			;;	cp '1' 
92b8			;;       jp z, matrix	 
92b8			;;   TODO keyboard matrix test 
92b8			; 
92b8			;	cp '2' 
92b8			;	jp z, .diagedit 
92b8			; 
92b8			;;	cp '6' 
92b8			;;	jp z, .menutest 
92b8			;;if ENABLE_BASIC 
92b8			;;	cp '6' 
92b8			;;	jp z, basic 
92b8			;;endif 
92b8			 ; 
92b8			;	jp .diagmenu 
92b8			; 
92b8			; 
92b8			;	ret 
92b8			 
92b8			 
92b8			.debug_tog: 
92b8 21 02 93			ld hl, .menudebug 
92bb				 
92bb			;	ld a, (os_view_disable) 
92bb			;	cp '*' 
92bb 3a 6f ee			ld a,(debug_vector) 
92be fe c9			cp $C9   ; RET 
92c0 20 04			jr nz,.tdon  
92c2 3e 01			ld a, 1 
92c4 18 02			jr .tog1 
92c6 3e 00		.tdon: ld a, 0 
92c8			 
92c8			.tog1: 
92c8 cd ee 8a			call menu 
92cb fe 00			cp 0 
92cd c8				ret z 
92ce fe 01			cp 1    ; disable debug 
92d0 28 04			jr z, .dtog0 
92d2 3e 2a			ld a, '*' 
92d4 18 05			jr .dtogset 
92d6			.dtog0:  
92d6				;ld a, 0 
92d6 cd f4 93			call bp_on 
92d9 18 dd			jr .debug_tog 
92db			.dtogset:  
92db				; ld (os_view_disable), a 
92db cd 00 94			call bp_off 
92de c3 b8 92			jp .debug_tog 
92e1			 
92e1			 
92e1			hardware_diags:       
92e1			 
92e1			.diagm: 
92e1 21 f4 92			ld hl, .menuitems 
92e4 3e 00			ld a, 0 
92e6 cd ee 8a			call menu 
92e9			 
92e9 fe 00		         cp 0 
92eb c8				 ret z 
92ec			 
92ec fe 02			cp 2 
92ee ca 4d 93			jp z, .diagedit 
92f1			 
92f1			;	cp '6' 
92f1			;	jp z, .menutest 
92f1			;if ENABLE_BASIC 
92f1			;	cp '6' 
92f1			;	jp z, basic 
92f1			;endif 
92f1			  
92f1 c3 e1 92			jp .diagm 
92f4			 
92f4				 
92f4 08 93		.menuitems:   	dw .m1 
92f6 13 93				dw .m2 
92f8 1a 93				dw .m3 
92fa 22 93				dw .m5 
92fc 28 93				dw .m5a 
92fe 31 93				dw .m5b 
9300 00 00				dw 0 
9302			 
9302			.menudebug: 
9302 3a 93				dw .m6 
9304 43 93				dw .m7 
9306 00 00				dw 0 
9308			 
9308 .. 00		.m1:   db "Key Matrix",0 
9313 .. 00		.m2:   db "Editor",0 
931a .. 00		.m3:   db "Storage",0 
9322 .. 00		.m5:   db "Sound",0 
9328 .. 00		.m5a:  db "RAM Test",0 
9331 .. 00		.m5b:  db "LCD Test",0 
933a			 
933a .. 00		.m6:   db "Debug ON",0 
9343 .. 00		.m7:   db "Debug OFF",0 
934d			 
934d			; debug editor 
934d			 
934d			.diagedit: 
934d			 
934d 21 bb e2			ld hl, scratch 
9350			;	ld bc, 250 
9350			;	ldir 
9350				; TODO ldir is not working strcpy may not get all the terms on the input line???? 
9350 3e 00			ld a, 0 
9352 77				ld (hl), a 
9353 23				inc hl 
9354 77				ld (hl), a 
9355 23				inc hl 
9356 77				ld (hl), a 
9357			 
9357 cd bd 8a		        call clear_display 
935a cd e0 8a			call update_display 
935d				;ld a, 1 
935d				;ld (hardware_diag), a 
935d			.diloop: 
935d 3e 00			ld a, display_row_1 
935f 0e 00			ld c, 0 
9361 16 ff			ld d, 255    ; TODO fix input_str to actually take note of max string input length 
9363 1e 28			ld e, 40 
9365			 
9365 21 bb e2			ld hl, scratch	 
9368 cd 17 8d			call input_str 
936b			 
936b 3e 28			ld a, display_row_2 
936d 11 bb e2			ld de, scratch 
9370 cd d0 8a			call str_at_display 
9373 cd e0 8a			call update_display 
9376			 
9376 c3 5d 93			jp .diloop 
9379			 
9379			 
9379			; pass word in hl 
9379			; a has display location 
9379			display_word_at: 
9379 f5				push af 
937a e5				push hl 
937b 7c				ld a,h 
937c 21 c0 e5			ld hl, os_word_scratch 
937f cd f3 8e			call hexout 
9382 e1				pop hl 
9383 7d				ld a,l 
9384 21 c2 e5			ld hl, os_word_scratch+2 
9387 cd f3 8e			call hexout 
938a 21 c4 e5			ld hl, os_word_scratch+4 
938d 3e 00			ld a,0 
938f 77				ld (hl),a 
9390 11 c0 e5			ld de,os_word_scratch 
9393 f1				pop af 
9394 cd d0 8a				call str_at_display 
9397 c9				ret 
9398			 
9398			display_ptr_state: 
9398			 
9398				; to restore afterwards 
9398			 
9398 d5				push de 
9399 c5				push bc 
939a e5				push hl 
939b f5				push af 
939c			 
939c				; for use in here 
939c			 
939c			;	push bc 
939c			;	push de 
939c			;	push hl 
939c			;	push af 
939c			 
939c cd bd 8a			call clear_display 
939f			 
939f 11 77 95			ld de, .ptrstate 
93a2 3e 00			ld a, display_row_1 
93a4 cd d0 8a			call str_at_display 
93a7			 
93a7				; display debug step 
93a7			 
93a7			 
93a7 11 65 ee			ld de, debug_mark 
93aa 3e 26			ld a, display_row_1+display_cols-2 
93ac cd d0 8a			call str_at_display 
93af			 
93af				; display a 
93af 11 81 95			ld de, .ptrcliptr 
93b2 3e 28			ld a, display_row_2 
93b4 cd d0 8a			call str_at_display 
93b7			 
93b7 f1				pop af 
93b8 2a 3a ea			ld hl,(cli_ptr) 
93bb 3e 30			ld a, display_row_2+8 
93bd cd 79 93			call display_word_at 
93c0			 
93c0			 
93c0				; display hl 
93c0			 
93c0			 
93c0 11 89 95			ld de, .ptrclioptr 
93c3 3e 32			ld a, display_row_2+10 
93c5 cd d0 8a			call str_at_display 
93c8			; 
93c8			;	pop hl 
93c8 3e 35			ld a, display_row_2+13 
93ca 2a 38 ea			ld hl,(cli_origptr) 
93cd cd 79 93			call display_word_at 
93d0			; 
93d0			;	 
93d0			;	; display de 
93d0			 
93d0			;	ld de, .regstatede 
93d0			;	ld a, display_row_3 
93d0			;	call str_at_display 
93d0			 
93d0			;	pop de 
93d0			;	ld h,d 
93d0			;	ld l, e 
93d0			;	ld a, display_row_3+3 
93d0			;	call display_word_at 
93d0			 
93d0			 
93d0				; display bc 
93d0			 
93d0			;	ld de, .regstatebc 
93d0			;	ld a, display_row_3+10 
93d0			;	call str_at_display 
93d0			 
93d0			;	pop bc 
93d0			;	ld h,b 
93d0			;	ld l, c 
93d0			;	ld a, display_row_3+13 
93d0			;	call display_word_at 
93d0			 
93d0			 
93d0				; display dsp 
93d0			 
93d0			;	ld de, .regstatedsp 
93d0			;	ld a, display_row_4 
93d0			;	call str_at_display 
93d0			 
93d0				 
93d0			;	ld hl,(cli_data_sp) 
93d0			;	ld a, display_row_4+4 
93d0			;	call display_word_at 
93d0			 
93d0				; display rsp 
93d0			 
93d0 11 b8 95			ld de, .regstatersp 
93d3 3e 82			ld a, display_row_4+10 
93d5 cd d0 8a			call str_at_display 
93d8			 
93d8				 
93d8 2a ec e9			ld hl,(cli_ret_sp) 
93db 3e 86			ld a, display_row_4+14 
93dd cd 79 93			call display_word_at 
93e0			 
93e0 cd e0 8a			call update_display 
93e3			 
93e3 cd 00 8a			call delay1s 
93e6 cd 00 8a			call delay1s 
93e9 cd 00 8a			call delay1s 
93ec			 
93ec			 
93ec cd fd 99			call next_page_prompt 
93ef			 
93ef				; restore  
93ef			 
93ef f1				pop af 
93f0 e1				pop hl 
93f1 c1				pop bc 
93f2 d1				pop de 
93f3 c9				ret 
93f4			 
93f4			; Update the break point vector so that the user can hook a new routine 
93f4			 
93f4			bp_on: 
93f4 3e c3			ld a, $c3    ; JP 
93f6 32 6f ee			ld (debug_vector), a 
93f9 21 06 94			ld hl, break_point_state 
93fc 22 70 ee			ld (debug_vector+1), hl 
93ff c9				ret 
9400			 
9400			bp_off: 
9400 3e c9			ld a, $c9    ; RET 
9402 32 6f ee			ld (debug_vector), a 
9405 c9				ret 
9406			 
9406			 
9406			break_point_state: 
9406			;	push af 
9406			; 
9406			;	; see if disabled 
9406			; 
9406			;	ld a, (os_view_disable) 
9406			;	cp '*' 
9406			;	jr nz, .bpsgo 
9406			;	pop af 
9406			;	ret 
9406			 
9406			.bpsgo: 
9406			;	pop af 
9406 f5				push af 
9407 22 9d e2			ld (os_view_hl), hl 
940a ed 53 9b e2		ld (os_view_de), de 
940e ed 43 99 e2		ld (os_view_bc), bc 
9412 e5				push hl 
9413 6f				ld l, a 
9414 26 00			ld h, 0 
9416 22 9f e2			ld (os_view_af),hl 
9419			 
9419 21 ab ed				ld hl, display_fb0 
941c 22 c6 eb				ld (display_fb_active), hl 
941f e1				pop hl	 
9420			 
9420 3e 31			ld a, '1' 
9422 fe 2a		.bps1:  cp '*' 
9424 cc 00 94			call z, bp_off 
9427			;	jr nz, .bps1b 
9427			;	ld (os_view_disable),a 
9427 fe 31		.bps1b:  cp '1' 
9429 20 14			jr nz, .bps2 
942b			 
942b				; display reg 
942b			 
942b				 
942b			 
942b 3a 9f e2			ld a, (os_view_af) 
942e 2a 9d e2			ld hl, (os_view_hl) 
9431 ed 5b 9b e2		ld de, (os_view_de) 
9435 ed 4b 99 e2		ld bc, (os_view_bc) 
9439 cd d3 94			call display_reg_state 
943c c3 bf 94			jp .bpschk 
943f			 
943f fe 32		.bps2:  cp '2' 
9441 20 08			jr nz, .bps3 
9443				 
9443				; display hl 
9443 2a 9d e2			ld hl, (os_view_hl) 
9446 cd bd 95			call display_dump_at_hl 
9449			 
9449 18 74			jr .bpschk 
944b			 
944b fe 33		.bps3:  cp '3' 
944d 20 08			jr nz, .bps4 
944f			 
944f			        ; display de 
944f 2a 9b e2			ld hl, (os_view_de) 
9452 cd bd 95			call display_dump_at_hl 
9455			 
9455 18 68			jr .bpschk 
9457 fe 34		.bps4:  cp '4' 
9459 20 08			jr nz, .bps5 
945b			 
945b			        ; display bc 
945b 2a 99 e2			ld hl, (os_view_bc) 
945e cd bd 95			call display_dump_at_hl 
9461			 
9461 18 5c			jr .bpschk 
9463 fe 35		.bps5:  cp '5' 
9465 20 08		        jr nz, .bps7 
9467			 
9467				; display cur ptr 
9467 2a 3a ea			ld hl, (cli_ptr) 
946a cd bd 95			call display_dump_at_hl 
946d			 
946d 18 50			jr .bpschk 
946f fe 36		.bps7:  cp '6' 
9471 20 08			jr nz, .bps8b 
9473				 
9473				; display cur orig ptr 
9473 2a 38 ea			ld hl, (cli_origptr) 
9476 cd bd 95			call display_dump_at_hl 
9479 18 44			jr .bpschk 
947b fe 37		.bps8b:  cp '7' 
947d 20 08			jr nz, .bps9 
947f				 
947f				; display dsp 
947f 2a e8 e9			ld hl, (cli_data_sp) 
9482 cd bd 95			call display_dump_at_hl 
9485			 
9485 18 38			jr .bpschk 
9487 fe 39		.bps9:  cp '9' 
9489 20 05			jr nz, .bps8c 
948b				 
948b				; display SP 
948b			;	ld hl, sp 
948b cd bd 95			call display_dump_at_hl 
948e			 
948e 18 2f			jr .bpschk 
9490 fe 38		.bps8c:  cp '8' 
9492 20 08			jr nz, .bps8d 
9494				 
9494				; display rsp 
9494 2a ec e9			ld hl, (cli_ret_sp) 
9497 cd bd 95			call display_dump_at_hl 
949a			 
949a 18 23			jr .bpschk 
949c fe 23		.bps8d:  cp '#'     ; access monitor sub system 
949e 20 05			jr nz, .bps8 
94a0 cd b7 97			call monitor 
94a3			 
94a3 18 1a			jr .bpschk 
94a5 fe 30		.bps8:  cp '0' 
94a7 20 16			jr nz, .bpschk 
94a9			 
94a9 21 0a ed				ld hl, display_fb1 
94ac 22 c6 eb				ld (display_fb_active), hl 
94af cd e0 8a				call update_display 
94b2			 
94b2				;ld a, (os_view_af) 
94b2 2a 9d e2			ld hl, (os_view_hl) 
94b5 ed 5b 9b e2		ld de, (os_view_de) 
94b9 ed 4b 99 e2		ld bc, (os_view_bc) 
94bd f1				pop af 
94be c9				ret 
94bf			 
94bf			.bpschk:   
94bf cd 00 8a			call delay1s 
94c2 3e 9f		ld a,display_row_4 + display_cols - 1 
94c4 11 fb 99		        ld de, endprg 
94c7 cd d0 8a			call str_at_display 
94ca cd e0 8a			call update_display 
94cd cd a1 e0			call cin_wait 
94d0			 
94d0 c3 22 94			jp .bps1 
94d3			 
94d3			 
94d3			display_reg_state: 
94d3			 
94d3				; to restore afterwards 
94d3			 
94d3 d5				push de 
94d4 c5				push bc 
94d5 e5				push hl 
94d6 f5				push af 
94d7			 
94d7				; for use in here 
94d7			 
94d7 c5				push bc 
94d8 d5				push de 
94d9 e5				push hl 
94da f5				push af 
94db			 
94db cd bd 8a			call clear_display 
94de			 
94de 11 93 95			ld de, .regstate 
94e1 3e 00			ld a, display_row_1 
94e3 cd d0 8a			call str_at_display 
94e6			 
94e6				; display debug step 
94e6			 
94e6			 
94e6 11 65 ee			ld de, debug_mark 
94e9 3e 25			ld a, display_row_1+display_cols-3 
94eb cd d0 8a			call str_at_display 
94ee			 
94ee				; display a 
94ee 11 af 95			ld de, .regstatea 
94f1 3e 28			ld a, display_row_2 
94f3 cd d0 8a			call str_at_display 
94f6			 
94f6 e1				pop hl 
94f7			;	ld h,0 
94f7			;	ld l, a 
94f7 3e 2b			ld a, display_row_2+3 
94f9 cd 79 93			call display_word_at 
94fc			 
94fc			 
94fc				; display hl 
94fc			 
94fc			 
94fc 11 a3 95			ld de, .regstatehl 
94ff 3e 32			ld a, display_row_2+10 
9501 cd d0 8a			call str_at_display 
9504			 
9504 e1				pop hl 
9505 3e 35			ld a, display_row_2+13 
9507 cd 79 93			call display_word_at 
950a			 
950a				 
950a				; display de 
950a			 
950a 11 a7 95			ld de, .regstatede 
950d 3e 50			ld a, display_row_3 
950f cd d0 8a			call str_at_display 
9512			 
9512 e1				pop hl 
9513			;	ld h,d 
9513			;	ld l, e 
9513 3e 53			ld a, display_row_3+3 
9515 cd 79 93			call display_word_at 
9518			 
9518			 
9518				; display bc 
9518			 
9518 11 ab 95			ld de, .regstatebc 
951b 3e 5a			ld a, display_row_3+10 
951d cd d0 8a			call str_at_display 
9520			 
9520 e1				pop hl 
9521			;	ld h,b 
9521			;	ld l, c 
9521 3e 5d			ld a, display_row_3+13 
9523 cd 79 93			call display_word_at 
9526			 
9526			 
9526				; display dsp 
9526			 
9526 11 b3 95			ld de, .regstatedsp 
9529 3e 78			ld a, display_row_4 
952b cd d0 8a			call str_at_display 
952e			 
952e				 
952e 2a e8 e9			ld hl,(cli_data_sp) 
9531 3e 7c			ld a, display_row_4+4 
9533 cd 79 93			call display_word_at 
9536			 
9536				; display rsp 
9536			 
9536 11 b8 95			ld de, .regstatersp 
9539 3e 82			ld a, display_row_4+10 
953b cd d0 8a			call str_at_display 
953e			 
953e				 
953e 2a ec e9			ld hl,(cli_ret_sp) 
9541 3e 86			ld a, display_row_4+14 
9543 cd 79 93			call display_word_at 
9546			 
9546 cd e0 8a			call update_display 
9549			 
9549			;	call delay1s 
9549			;	call delay1s 
9549			;	call delay1s 
9549			 
9549			 
9549			;	call next_page_prompt 
9549			 
9549				; restore  
9549			 
9549 f1				pop af 
954a e1				pop hl 
954b c1				pop bc 
954c d1				pop de 
954d c9				ret 
954e			 
954e .. 00		.wordincurptr:  db "Word in cur_ptr (5)",0 
9562 .. 00		.wordincuroptr:  db "Word in cur_optr (6)",0 
9577 .. 00		.ptrstate:	db "Ptr State",0 
9581 .. 00		.ptrcliptr:     db "cli_ptr",0 
9589 .. 00		.ptrclioptr:     db "cli_o_ptr",0 
9593 .. 00		.regstate:	db "Reg State (1/0)",0 
95a3 .. 00		.regstatehl:	db "HL:",0 
95a7 .. 00		.regstatede:	db "DE:",0 
95ab .. 00		.regstatebc:	db "BC:",0 
95af .. 00		.regstatea:	db "A :",0 
95b3 .. 00		.regstatedsp:	db "DSP:",0 
95b8 .. 00		.regstatersp:	db "RSP:",0 
95bd			 
95bd			display_dump_at_hl: 
95bd e5				push hl 
95be d5				push de 
95bf c5				push bc 
95c0 f5				push af 
95c1			 
95c1 22 de e5			ld (os_cur_ptr),hl	 
95c4 cd bd 8a			call clear_display 
95c7 cd 05 99			call dumpcont 
95ca			;	call delay1s 
95ca			;	call next_page_prompt 
95ca			 
95ca			 
95ca f1				pop af 
95cb c1				pop bc 
95cc d1				pop de 
95cd e1				pop hl 
95ce c9				ret 
95cf			 
95cf			;if ENABLE_BASIC 
95cf			;	include "nascombasic.asm" 
95cf			;	basic: 
95cf			;	include "forth/FORTH.ASM" 
95cf			;endif 
95cf			 
95cf			; eof 
95cf			 
95cf			 
# End of file firmware_diags.asm
95cf			  
95cf			include "firmware_prompts.asm"  
95cf			; Prompts  
95cf			 
95cf			; boot messages 
95cf			 
95cf .. 00		prom_bootmsg:	db "z80-homebrew OS v1.7",0 
95e4 .. 00		prom_bootmsg1:	db "by Kevin Groves",0 
95f4			 
95f4			 
95f4			; config menus 
95f4			 
95f4			;prom_c3: db "Add Dictionary To File",0 
95f4			 
95f4			if STARTUP_V1 
95f4 .. 00		prom_c2: db "Select Autoload File",0 
9609 .. 00		prom_c2a: db "Disable Autoload File", 0 
961f			endif 
961f			 
961f			if STARTUP_V2 
961f			prom_c2: db "Enable Autoload Files",0 
961f			prom_c2a: db "Disable Autoload Files", 0 
961f			 
961f			crs_s1: db "*ls-word", 0 
961f			crs_s2: db "*ed-word", 0 
961f			crs_s3: db "*Demo-Games", 0 
961f			crs_s4: db "*Utils", 0 
961f			crs_s5: db "*SPI-Util", 0 
961f			crs_s6: db "*Key-Constants", 0 
961f			crs_sound: db "*Sound-Util", 0 
961f			crs_hw: db "*Hello-World",0 
961f			 
961f			 
961f			 
961f			endif 
961f			;prom_c2b: db "Select Storage Bank",0 
961f .. 00		prom_c4: db "Settings",0 
9628 .. 00		prom_m4:   db "Debug & Breakpoints On/Off",0 
9643 .. 00		prom_m4b:   db "Monitor",0 
964b .. 00		prom_c1: db "Hardware Diags",0 
965a			 
965a			 
965a			if STARTUP_V2 
965a			prom_c9: db "Create Startup Files",0 
965a			endif 
965a			 
965a .. 00		prom_notav:    db "Feature not available",0 
9670 .. 00		prom_empty:    db "",0 
9671			 
9671			; eof 
9671			 
# End of file firmware_prompts.asm
9671			  
9671			  
9671			; eof  
9671			  
# End of file firmware.asm
9671			 
9671			;; below moved from firmware.asm for strange zero calc of baseusermem label. Scope issue on multipass???? 
9671			;if BASE_KEV  
9671			;baseram: equ 08000h 
9671			;endif 
9671			 
9671			;if BASE_SC114 
9671			;baseram:     equ    endofcode 
9671			;endif 
9671			 
9671			 
9671			; Add NMI support. A rst 066h when r15z goes neg on clock side of resist. needs to do retn when exiting 
9671			 
9671			; start system 
9671			 
9671			coldstart: 
9671				; set sp 
9671				; di/ei 
9671			 
9671 f3				di 
9672 31 00 f0			ld sp, tos 
9675 cd eb df			call init_nmi 
9678			;	ei 
9678			 
9678				; init spinner 
9678 3e 00			ld a,0 
967a 32 c0 eb			ld (display_active), a 
967d			 
967d				; disable breakpoint by default 
967d			 
967d				;ld a,'*' 
967d			;	ld a,' ' 
967d			;	ld (os_view_disable),a 
967d			 
967d				; set break point vector as new break point on or off 
967d cd 00 94			call bp_off 
9680			 
9680				; init hardware 
9680			 
9680				; init keyboard and screen hardware 
9680			 
9680 cd 1f 80			call hardware_init 
9683			 
9683			 
9683 cd 00 8a			call delay1s 
9686 3e 58			ld a, display_row_3+8 
9688 11 03 80			ld de, buildtime 
968b cd d0 8a			call str_at_display 
968e cd e0 8a			call update_display 
9691			 
9691 cd 00 8a			call delay1s 
9694 cd 00 8a			call delay1s 
9697 cd 00 8a			call delay1s 
969a			 
969a				; detect if any keys are held down to enable breakpoints at start up 
969a			 
969a cd a7 e0			call cin  
969d fe 00			cp 0 
969f 28 03			jr z, .nokeys 
96a1			 
96a1				;call hardware_diags 
96a1 cd 5e 92			call config 
96a4			 
96a4			;	ld de, .bpen 
96a4			;	ld a, display_row_4 
96a4			;	call str_at_display 
96a4			;	call update_display 
96a4			; 
96a4			;	ld a,0 
96a4			;	ld (os_view_disable),a 
96a4			; 
96a4			;.bpwait: 
96a4			;	call cin 
96a4			;	cp 0 
96a4			;	jr z, .bpwait 
96a4			;	jr .nokeys 
96a4			; 
96a4			; 
96a4			;.bpen:  db "Break points enabled!",0 
96a4			 
96a4			 
96a4			 
96a4			 
96a4			 
96a4			 
96a4			.nokeys: 
96a4			 
96a4			 
96a4				 
96a4			 
96a4			;jp  testkey 
96a4			 
96a4			;call storage_get_block_0 
96a4			; 
96a4			;ld hl, 0 
96a4			;ld de, store_page 
96a4			;call storage_read_block 
96a4			 
96a4				 
96a4			;ld hl, 10 
96a4			;ld de, store_page 
96a4			;call storage_read_block 
96a4			 
96a4			 
96a4			 
96a4			 
96a4			 
96a4			;stop:	nop 
96a4			;	jp stop 
96a4			 
96a4			 
96a4			 
96a4			main: 
96a4 cd bd 8a			call clear_display 
96a7 cd e0 8a			call update_display 
96aa			 
96aa			 
96aa			 
96aa			;	call testlcd 
96aa			 
96aa			 
96aa			 
96aa cd 45 9e			call forth_init 
96ad			 
96ad			 
96ad			warmstart: 
96ad cd 1b 9e			call forth_warmstart 
96b0			 
96b0				; run startup word load 
96b0			        ; TODO prevent this running at warmstart after crash  
96b0			 
96b0				if STARTUP_ENABLE 
96b0			 
96b0					if STARTUP_V1 
96b0			 
96b0						if STORAGE_SE 
96b0							call forth_autoload 
96b0						endif 
96b0 cd 3b df					call forth_startup 
96b3					endif 
96b3			 
96b3					if STARTUP_V2 
96b3			 
96b3						if STORAGE_SE 
96b3							call forth_autoload 
96b3						else 
96b3							call forth_startup 
96b3						endif 
96b3			 
96b3			 
96b3					endif 
96b3			 
96b3				endif 
96b3			 
96b3			warmstart_afterauto: 
96b3			 
96b3				; show free memory after boot 
96b3 11 52 97			ld de, freeram 
96b6 3e 00			ld a, display_row_1 
96b8 cd d0 8a			call str_at_display 
96bb			 
96bb				; get current heap start after loading any uwords 
96bb			 
96bb				;ld de, (os_last_new_uword) 
96bb				;ex de, hl 
96bb			 
96bb			; Or use heap_size word???? 
96bb				;ld hl, heap_end 
96bb				;ld hl, heap_size 
96bb				;ld de, topusermem 
96bb				;ld de, heap_start 
96bb ed 5b c0 e0			ld de, (free_list )      
96bf 21 96 e2				ld hl, heap_end 
96c2 ed 52			sbc hl, de 
96c4				;push hl 
96c4				;ld a,h	         	 
96c4				;ld hl, os_word_scratch		; TODO do direct write to frame buffer instead and drop the str_at_display 
96c4				;call hexout 
96c4			   	;pop hl 
96c4			; 
96c4			;	ld a,l 
96c4			;	ld hl, os_word_scratch+2 
96c4			;	call hexout 
96c4			;	ld hl, os_word_scratch+4 
96c4			;	ld a, 0 
96c4			;	ld (hl),a 
96c4 eb				ex de, hl 
96c5 21 c0 e5			ld hl, os_word_scratch 
96c8 cd ff 8f			call uitoa_16 
96cb			 
96cb			 
96cb 11 c0 e5			ld de, os_word_scratch 
96ce 3e 0d			ld a, display_row_1 + 13 
96d0 cd d0 8a			call str_at_display 
96d3 cd e0 8a			call update_display 
96d6			 
96d6			 
96d6				;call demo 
96d6			 
96d6			 
96d6				; init scratch input area for cli commands 
96d6			 
96d6 21 e2 e5			ld hl, os_cli_cmd 
96d9 3e 00			ld a,0 
96db 77				ld (hl),a 
96dc 23				inc hl 
96dd 77				ld (hl),a 
96de			 
96de 3e 00			ld a,0 
96e0 32 e1 e6			ld (os_last_cmd),a	; current command in use to enable repeated use with an enter etc 
96e3			 
96e3 32 de e5			ld (os_cur_ptr),a	; ptr to whatever is needed for this command 
96e6 32 df e5			ld (os_cur_ptr+1),a	 
96e9			 
96e9 32 c0 e5			ld (os_word_scratch),a	; byte or word being used in parsing for this command 
96ec 32 c1 e5			ld (os_word_scratch+1),a	 
96ef				 
96ef			 
96ef				;ld a, kLCD_Line2        ; TODO prompt using direct screen line address. Correct this to frame buffer 
96ef 21 e2 e5			ld hl, os_cli_cmd 
96f2			 
96f2 3e 00			ld a, 0		 ; init cli input 
96f4 77				ld (hl), a 
96f5 3e 28			ld a, display_row_2        ; TODO prompt using direct screen line address. Correct this to frame buffer 
96f7			cli: 
96f7				; show cli prompt 
96f7				;push af 
96f7				;ld a, 0 
96f7				;ld de, prompt 
96f7				;call str_at_display 
96f7			 
96f7				;call update_display 
96f7				;pop af 
96f7				;inc a 
96f7				;ld a, kLCD_Line4+1	 ; TODO using direct screen line writes. Correct this to frame buffer 
96f7			 
96f7			.lastrecall: 
96f7			 
96f7 0e 00			ld c, 0 
96f9 16 ff			ld d, 255    ; TODO fix input_str to actually take note of max string input length 
96fb 1e 28			ld e, 40 
96fd			 
96fd 21 e2 e5			ld hl, os_cli_cmd 
9700			 
9700				STACKFRAME OFF $fefe $9f9f 
9700				if DEBUG_STACK_IMB 
9700					if OFF 
9700						exx 
9700						ld de, $fefe 
9700						ld a, d 
9700						ld hl, curframe 
9700						call hexout 
9700						ld a, e 
9700						ld hl, curframe+2 
9700						call hexout 
9700						ld hl, $fefe 
9700						push hl 
9700						ld hl, $9f9f 
9700						push hl 
9700						exx 
9700					endif 
9700				endif 
9700			endm 
# End of macro STACKFRAME
9700			 
9700 cd 17 8d			call input_str 
9703			 
9703				STACKFRAMECHK OFF $fefe $9f9f 
9703				if DEBUG_STACK_IMB 
9703					if OFF 
9703						exx 
9703						ld hl, $9f9f 
9703						pop de   ; $9f9f 
9703						call cmp16 
9703						jr nz, .spnosame 
9703						ld hl, $fefe 
9703						pop de   ; $fefe 
9703						call cmp16 
9703						jr z, .spfrsame 
9703						.spnosame: call showsperror 
9703						.spfrsame: nop 
9703						exx 
9703					endif 
9703				endif 
9703			endm 
# End of macro STACKFRAMECHK
9703			 
9703			 
9703				; check to see if last line recall has been requested 
9703			 
9703			if EDIT_V2 
9703 fe 05			cp KEY_UP 
9705 20 0f			jr nz, .noexecline 
9707			 
9707 11 e2 e5			ld de, os_cli_cmd 
970a 21 e1 e6			ld hl, os_last_cmd 
970d 01 ff 00			ld bc, 255 
9710 ed b0			ldir 
9712 3e 00			ld a, 0 
9714 18 e1			jr .lastrecall 
9716			endif 
9716			 
9716			.noexecline: 
9716				; no so exec the line		 
9716			 
9716				; copy input to last command 
9716			 
9716 21 e2 e5			ld hl, os_cli_cmd 
9719 11 e1 e6			ld de, os_last_cmd 
971c 01 ff 00			ld bc, 255 
971f ed b0			ldir 
9721			 
9721				; wipe current buffer 
9721			 
9721			;	ld a, 0 
9721			;	ld hl, os_cli_cmd 
9721			;	ld de, os_cli_cmd+1 
9721			;	ld bc, 254 
9721			;	ldir 
9721				; TODO ldir is not working strcpy may not get all the terms on the input line???? 
9721			;	call strcpy 
9721			;	ld a, 0 
9721			;	ld (hl), a 
9721			;	inc hl 
9721			;	ld (hl), a 
9721			;	inc hl 
9721			;	ld (hl), a 
9721			 
9721				; switch frame buffer to program  
9721			 
9721 21 0a ed				ld hl, display_fb1 
9724 22 c6 eb				ld (display_fb_active), hl 
9727			 
9727			;	nop 
9727				STACKFRAME ON $fbfe $8f9f 
9727				if DEBUG_STACK_IMB 
9727					if ON 
9727						exx 
9727						ld de, $fbfe 
9727						ld a, d 
9727						ld hl, curframe 
9727						call hexout 
9727						ld a, e 
9727						ld hl, curframe+2 
9727						call hexout 
9727						ld hl, $fbfe 
9727						push hl 
9727						ld hl, $8f9f 
9727						push hl 
9727						exx 
9727					endif 
9727				endif 
9727			endm 
# End of macro STACKFRAME
9727				; first time into the parser so pass over the current scratch pad 
9727 21 e2 e5			ld hl,os_cli_cmd 
972a				; tokenise the entered statement(s) in HL 
972a cd bf 9e			call forthparse 
972d			        ; exec forth statements in top of return stack 
972d cd fb 9e			call forthexec 
9730				;call forthexec_cleanup 
9730			;	call parsenext 
9730			 
9730				STACKFRAMECHK ON $fbfe $8f9f 
9730				if DEBUG_STACK_IMB 
9730					if ON 
9730						exx 
9730						ld hl, $8f9f 
9730						pop de   ; $8f9f 
9730						call cmp16 
9730						jr nz, .spnosame 
9730						ld hl, $fbfe 
9730						pop de   ; $fbfe 
9730						call cmp16 
9730						jr z, .spfrsame 
9730						.spnosame: call showsperror 
9730						.spfrsame: nop 
9730						exx 
9730					endif 
9730				endif 
9730			endm 
# End of macro STACKFRAMECHK
9730				; TODO on return from forth parsing should there be a prompt to return to system? but already in system. 
9730			 
9730 3e 78			ld a, display_row_4 
9732 11 63 97			ld de, endprog 
9735			 
9735 cd e0 8a			call update_display		 
9738			 
9738 cd fd 99			call next_page_prompt 
973b			 
973b				; switch frame buffer to cli 
973b			 
973b 21 ab ed				ld hl, display_fb0 
973e 22 c6 eb				ld (display_fb_active), hl 
9741			 
9741			 
9741 cd bd 8a		        call clear_display 
9744 cd e0 8a			call update_display		 
9747			 
9747 21 e2 e5			ld hl, os_cli_cmd 
974a			 
974a 3e 00			ld a, 0		 ; init cli input 
974c 77				ld (hl), a 
974d			 
974d				; TODO f_cursor_ptr should inc row (scroll if required) and set start of row for next input  
974d			 
974d				; now on last line 
974d			 
974d				; TODO scroll screen up 
974d			 
974d				; TODO instead just clear screen and place at top of screen 
974d			 
974d			;	ld a, 0 
974d			;	ld (f_cursor_ptr),a 
974d			 
974d				;call clear_display 
974d				;call update_display 
974d			 
974d				;ld a, kLCD_Line1        ; TODO prompt using direct screen line address. Correct this to frame buffer 
974d 3e 00			ld a, display_row_1        ; TODO prompt using direct screen line address. Correct this to frame buffer 
974f c3 f7 96			jp cli 
9752			 
9752 .. 00		freeram: db "Free bytes: ",0 
975f ..			asc: db "1A2F" 
9763 .. 00		endprog: db "End prog...",0 
976f			 
976f			testenter2:   
976f 21 ed e2			ld hl,scratch+50 
9772 22 de e5			ld (os_cur_ptr),hl 
9775 c3 f7 96			jp cli 
9778			 
9778			testenter:  
9778			 
9778 21 5f 97			ld hl,asc 
977b			;	ld a,(hl) 
977b			;	call nibble2val 
977b cd 49 8f			call get_byte 
977e			 
977e			 
977e			;	ld a,(hl) 
977e			;	call atohex 
977e			 
977e			;	call fourehexhl 
977e 32 ed e2			ld (scratch+50),a 
9781			 
9781			 
9781			 
9781 21 61 97			ld hl,asc+2 
9784			;	ld a, (hl) 
9784			;	call nibble2val 
9784 cd 49 8f			call get_byte 
9787			 
9787			;	call fourehexhl 
9787 32 ef e2			ld (scratch+52),a 
978a				 
978a 21 ed e2			ld hl,scratch+50 
978d 22 de e5			ld (os_cur_ptr),hl 
9790 c3 f7 96			jp cli 
9793			 
9793			enter:	 
9793 3a bf e2			ld a,(scratch+4) 
9796 fe 00			cp 0 
9798 28 0c			jr z, .entercont 
979a				; no, not a null term line so has an address to work out.... 
979a			 
979a 21 bd e2			ld hl,scratch+2 
979d cd a9 8f			call get_word_hl 
97a0			 
97a0 22 de e5			ld (os_cur_ptr),hl	 
97a3 c3 f7 96			jp cli 
97a6			 
97a6			 
97a6			.entercont:  
97a6			 
97a6 21 bd e2			ld hl, scratch+2 
97a9 cd 49 8f			call get_byte 
97ac			 
97ac 2a de e5		   	ld hl,(os_cur_ptr) 
97af 77					ld (hl),a 
97b0 23					inc hl 
97b1 22 de e5				ld (os_cur_ptr),hl 
97b4				 
97b4			; get byte  
97b4			 
97b4			 
97b4 c3 f7 96			jp cli 
97b7			 
97b7			 
97b7			; basic monitor support 
97b7			 
97b7			monitor: 
97b7				;  
97b7 cd bd 8a			call clear_display 
97ba 3e 00			ld a, 0 
97bc 11 10 98			ld de, .monprompt 
97bf cd d0 8a			call str_at_display 
97c2 cd e0 8a			call update_display 
97c5			 
97c5				; get a monitor command 
97c5			 
97c5 0e 00			ld c, 0     ; entry at top left 
97c7 16 64			ld d, 100   ; max buffer size 
97c9 1e 0f			ld e, 15    ; input scroll area 
97cb 3e 00			ld a, 0     ; init string 
97cd 21 b9 e4			ld hl, os_input 
97d0 77				ld (hl), a 
97d1 23				inc hl 
97d2 77				ld (hl), a 
97d3 21 b9 e4			ld hl, os_input 
97d6 3e 01			ld a, 1     ; init string 
97d8 cd 17 8d			call input_str 
97db			 
97db cd bd 8a		        call clear_display 
97de cd e0 8a			call update_display		 
97e1			 
97e1 3a b9 e4			ld a, (os_input) 
97e4 cd 47 90			call toUpper 
97e7 fe 48		        cp 'H' 
97e9 ca 84 98		        jp z, .monhelp 
97ec fe 44			cp 'D'		; dump 
97ee ca b7 98			jp z, .mondump	 
97f1 fe 43			cp 'C'		; dump 
97f3 ca d1 98			jp z, .moncdump	 
97f6 fe 4d			cp 'M'		; dump 
97f8 ca 12 98			jp z, .moneditstart 
97fb fe 55			cp 'U'		; dump 
97fd ca 1e 98			jp z, .monedit	 
9800 fe 47			cp 'G'		; dump 
9802 ca ad 98			jp z, .monjump 
9805 fe 42			cp 'B'		; forth breakpoint 
9807 cc 06 94			call z, break_point_state 
980a fe 51			cp 'Q'		; dump 
980c c8				ret z	 
980d			 
980d			 
980d				; TODO "S" to access symbol by name and not need the address 
980d				; TODO "F" to find a string in memory 
980d			 
980d c3 b7 97			jp monitor 
9810			 
9810 .. 00		.monprompt: db ">", 0 
9812			 
9812			.moneditstart: 
9812				; get starting address 
9812			 
9812 21 bb e4			ld hl,os_input+2 
9815 cd a9 8f			call get_word_hl 
9818			 
9818 22 de e5			ld (os_cur_ptr),hl	 
981b			 
981b c3 b7 97			jp monitor 
981e			 
981e			.monedit: 
981e				; get byte to load 
981e			 
981e 21 bb e4			ld hl,os_input+2 
9821 cd 49 8f			call get_byte 
9824			 
9824				; get address to update 
9824 2a de e5			ld hl, (os_cur_ptr) 
9827			 
9827				; update byte 
9827			 
9827 77				ld (hl), a 
9828			 
9828				; move to next address and save it 
9828			 
9828 23				inc hl 
9829 22 de e5			ld (os_cur_ptr),hl	 
982c			 
982c c3 b7 97			jp monitor 
982f			 
982f			 
982f .. 00		.monhelptext1: 	db "D-Dump, C-Cont Dump",0 
9843 .. 00		.monhelptext2:  db "M-Edit Start, U-Update Byte",0 
985f .. 00		.monhelptext3:  db "G-Call address, B-Breakpoints",0 
987d .. 00		.monhelptext4:  db "Q-Quit",0 
9884			        
9884			.monhelp: 
9884 3e 00			ld a, display_row_1 
9886 11 2f 98		        ld de, .monhelptext1 
9889			 
9889 cd d0 8a			call str_at_display 
988c 3e 28			ld a, display_row_2 
988e 11 43 98		        ld de, .monhelptext2 
9891					 
9891 cd d0 8a			call str_at_display 
9894 3e 50			ld a, display_row_3 
9896 11 5f 98		        ld de, .monhelptext3 
9899					 
9899 cd d0 8a			call str_at_display 
989c 3e 78			ld a, display_row_4 
989e 11 7d 98		        ld de, .monhelptext4 
98a1 cd d0 8a			call str_at_display 
98a4			 
98a4 cd e0 8a			call update_display		 
98a7			 
98a7 cd fd 99			call next_page_prompt 
98aa c3 b7 97			jp monitor 
98ad			 
98ad			.monjump:    
98ad 21 bb e4			ld hl,os_input+2 
98b0 cd a9 8f			call get_word_hl 
98b3			 
98b3 e9				jp (hl) 
98b4 c3 b7 97			jp monitor 
98b7			 
98b7			.mondump:    
98b7 21 bb e4			ld hl,os_input+2 
98ba cd a9 8f			call get_word_hl 
98bd			 
98bd 22 de e5			ld (os_cur_ptr),hl	 
98c0 cd 05 99			call dumpcont 
98c3 3e 78			ld a, display_row_4 
98c5 11 63 97			ld de, endprog 
98c8			 
98c8 cd e0 8a			call update_display		 
98cb			 
98cb cd fd 99			call next_page_prompt 
98ce c3 b7 97			jp monitor 
98d1			.moncdump: 
98d1 cd 05 99			call dumpcont 
98d4 3e 78			ld a, display_row_4 
98d6 11 63 97			ld de, endprog 
98d9			 
98d9 cd e0 8a			call update_display		 
98dc			 
98dc cd fd 99			call next_page_prompt 
98df c3 b7 97			jp monitor 
98e2			 
98e2			 
98e2			; TODO symbol access  
98e2			 
98e2			.symbols:     ;; A list of symbols that can be called up  
98e2 ab ed			dw display_fb0 
98e4 .. 00			db "fb0",0  
98e8 74 ea		     	dw store_page 
98ea .. 00			db "store_page",0 
98f5			 
98f5			 
98f5			dump:	; see if we are cotinuing on from the last command by not uncluding any address 
98f5			 
98f5 3a bc e2			ld a,(scratch+1) 
98f8 fe 00			cp 0 
98fa 28 09			jr z, dumpcont 
98fc			 
98fc				; no, not a null term line so has an address to work out.... 
98fc			 
98fc 21 bd e2			ld hl,scratch+2 
98ff cd a9 8f			call get_word_hl 
9902			 
9902 22 de e5			ld (os_cur_ptr),hl	 
9905			 
9905			 
9905			 
9905			dumpcont: 
9905			 
9905				; dump bytes at ptr 
9905			 
9905			 
9905 3e 00			ld a, display_row_1 
9907 2a c6 eb			ld hl, (display_fb_active) 
990a cd ea 8c			call addatohl 
990d cd 35 99			call .dumpbyterow 
9910			 
9910 3e 28			ld a, display_row_2 
9912 2a c6 eb			ld hl, (display_fb_active) 
9915 cd ea 8c			call addatohl 
9918 cd 35 99			call .dumpbyterow 
991b			 
991b			 
991b 3e 50			ld a, display_row_3 
991d 2a c6 eb			ld hl, (display_fb_active) 
9920 cd ea 8c			call addatohl 
9923 cd 35 99			call .dumpbyterow 
9926			 
9926 3e 78			ld a, display_row_4 
9928 2a c6 eb			ld hl, (display_fb_active) 
992b cd ea 8c			call addatohl 
992e cd 35 99			call .dumpbyterow 
9931			 
9931 cd e0 8a			call update_display 
9934			;		jp cli 
9934 c9				ret 
9935			 
9935			.dumpbyterow: 
9935			 
9935				;push af 
9935			 
9935 e5				push hl 
9936			 
9936				; calc where to poke the ascii 
9936			if display_cols == 20 
9936				ld a, 16 
9936			else 
9936 3e 1f			ld a, 31 
9938			endif 
9938			 
9938 cd ea 8c			call addatohl 
993b 22 c0 e5			ld (os_word_scratch),hl  		; save pos for later 
993e			 
993e			 
993e			; display decoding address 
993e 2a de e5		   	ld hl,(os_cur_ptr) 
9941			 
9941 7c				ld a,h 
9942 e1				pop hl 
9943 e5				push hl 
9944			;	ld hl, os_word_scratch		; TODO do direct write to frame buffer instead and drop the str_at_display 
9944 cd f3 8e			call hexout 
9947 2a de e5		   	ld hl,(os_cur_ptr) 
994a			 
994a 7d				ld a,l 
994b e1				pop hl 
994c 23				inc hl 
994d 23				inc hl 
994e e5				push hl 
994f			;	ld hl, os_word_scratch+2 
994f cd f3 8e			call hexout 
9952 e1				pop hl 
9953 23				inc hl 
9954 23				inc hl 
9955				;ld hl, os_word_scratch+4 
9955 3e 3a			ld a, ':' 
9957 77				ld (hl),a 
9958 23				inc hl 
9959				;ld a, 0 
9959				;ld (hl),a 
9959				;ld de, os_word_scratch 
9959				;pop af 
9959				;push af 
9959			;		ld a, display_row_2 
9959			;		call str_at_display 
9959			;		call update_display 
9959			 
9959			 
9959			;pop af 
9959			;	add 5 
9959			 
9959			if display_cols == 20 
9959				ld b, 4 
9959			else 
9959 06 08			ld b, 8 
995b			endif	 
995b			 
995b			.dumpbyte: 
995b c5				push bc 
995c e5				push hl 
995d			 
995d			 
995d 2a de e5		   	ld hl,(os_cur_ptr) 
9960 7e					ld a,(hl) 
9961			 
9961					; poke the ascii to display 
9961 2a c0 e5				ld hl,(os_word_scratch) 
9964 77					ld (hl),a 
9965 23					inc hl 
9966 22 c0 e5				ld (os_word_scratch),hl 
9969			 
9969					 
9969			 
9969			 
9969 e1					pop hl 
996a e5					push hl 
996b			 
996b cd f3 8e				call hexout 
996e			 
996e					 
996e 2a de e5		   	ld hl,(os_cur_ptr) 
9971 23				inc hl 
9972 22 de e5		   	ld (os_cur_ptr),hl 
9975			 
9975 e1					pop hl 
9976 23					inc hl 
9977 23					inc hl 
9978 23					inc hl 
9979			 
9979			 
9979			 
9979					;ld a,0 
9979					;ld (os_word_scratch+2),a 
9979					;pop af 
9979					;push af 
9979			 
9979					;ld de, os_word_scratch 
9979					;call str_at_display 
9979			;		call update_display 
9979			;		pop af 
9979 c1					pop bc 
997a c6 03				add 3 
997c 10 dd			djnz .dumpbyte 
997e			 
997e				 
997e			 
997e c9				ret 
997f			 
997f			jump:	 
997f			 
997f 21 bd e2			ld hl,scratch+2 
9982 cd a9 8f			call get_word_hl 
9985				;ld hl,(scratch+2) 
9985				;call fourehexhl 
9985			 
9985 22 de e5			ld (os_cur_ptr),hl	 
9988			 
9988 e9				jp (hl) 
9989			 
9989			 
9989			 
9989			; TODO implement a basic monitor mode to start with 
9989			 
9989			 
9989			 
9989			 
9989			 
9989			 
9989			 
9989			 
9989			 
9989			; testing and demo code during development 
9989			 
9989			 
9989 .. 00		str1: db "Enter some text...",0 
999c .. 00		clear: db "                    ",0 
99b1			 
99b1			demo: 
99b1			 
99b1			 
99b1			 
99b1			;	call update_display 
99b1			 
99b1				; init scratch input area for testing 
99b1 21 bb e2			ld hl, scratch	 
99b4 3e 00			ld a,0 
99b6 77				ld (hl),a 
99b7			 
99b7			 
99b7 3e 28		            LD   A, display_row_2 
99b9			;            CALL fLCD_Pos       ;Position cursor to location in A 
99b9 11 89 99		            LD   DE, str1 
99bc cd d0 8a			call str_at_display 
99bf			 
99bf			;            CALL fLCD_Str       ;Display string pointed to by DE 
99bf			cloop:	 
99bf 3e 50		            LD   A, display_row_3 
99c1			;            CALL fLCD_Pos       ;Position cursor to location in A 
99c1 11 9c 99		            LD   DE, clear 
99c4			 ;           CALL fLCD_Str       ;Display string pointed to by DE 
99c4 cd d0 8a				call str_at_display 
99c7 3e 78			ld a, display_row_4 
99c9 11 f9 99			ld de, prompt 
99cc			 
99cc cd d0 8a				call str_at_display 
99cf cd e0 8a			call update_display 
99d2			 
99d2 3e 79			ld a, kLCD_Line4+1	 ; TODO using direct screen line writes. Correct this to frame buffer 
99d4 16 0a			ld d, 10 
99d6 21 bb e2			ld hl, scratch	 
99d9 cd 17 8d			call input_str 
99dc			 
99dc			;	call clear_display 
99dc			;'	call update_display 
99dc			 
99dc 3e 00		            LD   A, display_row_1 
99de			;            CALL fLCD_Pos       ;Position cursor to location in A 
99de 11 9c 99		            LD   DE, clear 
99e1 cd d0 8a				call str_at_display 
99e4			;            CALL fLCD_Str       ;Display string pointed to by DE 
99e4 3e 00		            LD   A, display_row_1 
99e6			;            CALL fLCD_Pos       ;Position cursor to location in A 
99e6 11 bb e2		            LD   DE, scratch 
99e9			;            CALL fLCD_Str       ;Display string pointed to by DE 
99e9 cd d0 8a				call str_at_display 
99ec cd e0 8a			call update_display 
99ef			 
99ef 3e 00				ld a,0 
99f1 21 bb e2			ld hl, scratch 
99f4 77				ld (hl),a 
99f5			 
99f5 00				nop 
99f6 c3 bf 99			jp cloop 
99f9			 
99f9			 
99f9			 
99f9			; OS Prompt 
99f9			 
99f9 .. 00		prompt: db ">",0 
99fb .. 00		endprg: db "?",0 
99fd			 
99fd			 
99fd			; handy next page prompt 
99fd			next_page_prompt: 
99fd e5				push hl 
99fe d5				push de 
99ff f5				push af 
9a00 c5				push bc 
9a01			 
9a01 3e 9f			ld a,display_row_4 + display_cols - 1 
9a03 11 fb 99		        ld de, endprg 
9a06 cd d0 8a			call str_at_display 
9a09 cd e0 8a			call update_display 
9a0c cd a1 e0			call cin_wait 
9a0f c1				pop bc 
9a10 f1				pop af 
9a11 d1				pop de 
9a12 e1				pop hl 
9a13			 
9a13			 
9a13 c9				ret 
9a14			 
9a14			 
9a14			; forth parser 
9a14			 
9a14			; My forth kernel 
9a14			include "forth_kernel.asm" 
9a14			; 
9a14			; kernel to the forth OS 
9a14			 
9a14			DS_TYPE_STR: equ 1     ; string type 
9a14			DS_TYPE_INUM: equ 2     ; $ 16 bit unsigned int usually a hex address 
9a14			DS_TYPE_SNUM: equ 3     ; $ 16 bit signed int  
9a14			;DS_TYPE_FNUM: equ 3      ; 24/32 bit floating point  do string conversion instead of a new type 
9a14			 
9a14			FORTH_PARSEV1: equ 0 
9a14			FORTH_PARSEV2: equ 0 
9a14			FORTH_PARSEV3: equ 0 
9a14			FORTH_PARSEV4: equ 0 
9a14			FORTH_PARSEV5: equ 0 
9a14			FORTH_PARSEV6: equ 1 
9a14			 
9a14			;if FORTH_PARSEV5 
9a14			;	FORTH_END_BUFFER: equ 0 
9a14			;else 
9a14			FORTH_END_BUFFER: equ 127 
9a14			;endif 
9a14			 
9a14			FORTH_TRUE: equ 1 
9a14			FORTH_FALSE: equ 0 
9a14			 
9a14			if FORTH_PARSEV4 
9a14			include "forth_stackops.asm" 
9a14			endif 
9a14			 
9a14			if FORTH_PARSEV5 
9a14			include "forth_stackopsv5.asm" 
9a14			endif 
9a14			 
9a14			if FORTH_PARSEV6 
9a14			include "forth_stackopsv5.asm" 
9a14			 
9a14			; Stack operations for v5 parser on wards 
9a14			; * DATA stack 
9a14			; * LOOP stack 
9a14			; * RETURN stack 
9a14			 
9a14			 
9a14			 
9a14			FORTH_CHK_DSP_UNDER: macro 
9a14				push hl 
9a14				push de 
9a14				ld hl,(cli_data_sp) 
9a14				ld de, cli_data_stack 
9a14				call cmp16 
9a14				jp c, fault_dsp_under 
9a14				pop de 
9a14				pop hl 
9a14				endm 
9a14			 
9a14			 
9a14			FORTH_CHK_RSP_UNDER: macro 
9a14				push hl 
9a14				push de 
9a14				ld hl,(cli_ret_sp) 
9a14				ld de, cli_ret_stack 
9a14				call cmp16 
9a14				jp c, fault_rsp_under 
9a14				pop de 
9a14				pop hl 
9a14				endm 
9a14			 
9a14			FORTH_CHK_LOOP_UNDER: macro 
9a14				push hl 
9a14				push de 
9a14				ld hl,(cli_loop_sp) 
9a14				ld de, cli_loop_stack 
9a14				call cmp16 
9a14				jp c, fault_loop_under 
9a14				pop de 
9a14				pop hl 
9a14				endm 
9a14			 
9a14			FORTH_ERR_TOS_NOTSTR: macro 
9a14				; TOSO might need more for checks when used 
9a14				push af 
9a14				ld a,(hl) 
9a14				cp DS_TYPE_STR 
9a14				jp nz, type_faultn   
9a14				pop af 
9a14				endm 
9a14			 
9a14			FORTH_ERR_TOS_NOTNUM: macro 
9a14				push af 
9a14				ld a,(hl) 
9a14				cp DS_TYPE_INUM 
9a14				jp nz, type_faultn   
9a14				pop af 
9a14				endm 
9a14			 
9a14			 
9a14			; increase data stack pointer and save hl to it 
9a14				 
9a14			FORTH_DSP_NEXT: macro 
9a14				call macro_forth_dsp_next 
9a14				endm 
9a14			 
9a14			 
9a14			macro_forth_dsp_next: 
9a14				if DEBUG_FORTH_STACK_GUARD 
9a14 cd 13 dd				call check_stacks 
9a17				endif 
9a17 e5				push hl 
9a18 d5				push de 
9a19 eb				ex de,hl 
9a1a 2a e8 e9			ld hl,(cli_data_sp) 
9a1d 23				inc hl 
9a1e 23				inc hl 
9a1f			 
9a1f			; PARSEV5 
9a1f 23				inc hl 
9a20 22 e8 e9			ld (cli_data_sp),hl 
9a23 73				ld (hl), e 
9a24 23				inc hl 
9a25 72				ld (hl), d 
9a26 d1				pop de 
9a27 e1				pop hl 
9a28				if DEBUG_FORTH_STACK_GUARD 
9a28 cd 13 dd				call check_stacks 
9a2b				endif 
9a2b c9				ret 
9a2c			 
9a2c			 
9a2c			; increase ret stack pointer and save hl to it 
9a2c				 
9a2c			FORTH_RSP_NEXT: macro 
9a2c				call macro_forth_rsp_next 
9a2c				endm 
9a2c			 
9a2c			macro_forth_rsp_next: 
9a2c				if DEBUG_FORTH_STACK_GUARD 
9a2c cd 13 dd				call check_stacks 
9a2f				endif 
9a2f e5				push hl 
9a30 d5				push de 
9a31 eb				ex de,hl 
9a32 2a ec e9			ld hl,(cli_ret_sp) 
9a35 23				inc hl 
9a36 23				inc hl 
9a37 22 ec e9			ld (cli_ret_sp),hl 
9a3a 73				ld (hl), e 
9a3b 23				inc hl 
9a3c 72				ld (hl), d 
9a3d d1				pop de 
9a3e e1				pop hl 
9a3f				if DEBUG_FORTH_STACK_GUARD 
9a3f cd 13 dd				call check_stacks 
9a42				endif 
9a42 c9				ret 
9a43			 
9a43			; get current ret stack pointer and save to hl  
9a43				 
9a43			FORTH_RSP_TOS: macro 
9a43				call macro_forth_rsp_tos 
9a43				endm 
9a43			 
9a43			macro_forth_rsp_tos: 
9a43				;push de 
9a43 2a ec e9			ld hl,(cli_ret_sp) 
9a46 cd 7e 9a			call loadhlptrtohl 
9a49				;ld e, (hl) 
9a49				;inc hl 
9a49				;ld d, (hl) 
9a49				;ex de, hl 
9a49					if DEBUG_FORTH_WORDS 
9a49			;			DMARK "RST" 
9a49						CALLMONITOR 
9a49 cd 6f ee			call debug_vector  
9a4c				endm  
# End of macro CALLMONITOR
9a4c					endif 
9a4c				;pop de 
9a4c c9				ret 
9a4d			 
9a4d			; pop ret stack pointer 
9a4d				 
9a4d			FORTH_RSP_POP: macro 
9a4d				call macro_forth_rsp_pop 
9a4d				endm 
9a4d			 
9a4d			 
9a4d			macro_forth_rsp_pop: 
9a4d				if DEBUG_FORTH_STACK_GUARD 
9a4d			;		DMARK "RPP" 
9a4d cd 13 dd				call check_stacks 
9a50					FORTH_CHK_RSP_UNDER 
9a50 e5				push hl 
9a51 d5				push de 
9a52 2a ec e9			ld hl,(cli_ret_sp) 
9a55 11 a6 e9			ld de, cli_ret_stack 
9a58 cd 08 8d			call cmp16 
9a5b da 2a de			jp c, fault_rsp_under 
9a5e d1				pop de 
9a5f e1				pop hl 
9a60				endm 
# End of macro FORTH_CHK_RSP_UNDER
9a60				endif 
9a60 e5				push hl 
9a61 2a ec e9			ld hl,(cli_ret_sp) 
9a64			 
9a64			 
9a64				if FORTH_ENABLE_FREE 
9a64			 
9a64					; get pointer 
9a64			 
9a64					push de 
9a64					push hl 
9a64			 
9a64					ld e, (hl) 
9a64					inc hl 
9a64					ld d, (hl) 
9a64			 
9a64					ex de, hl 
9a64					call free 
9a64			 
9a64					pop hl 
9a64					pop de 
9a64			 
9a64			 
9a64				endif 
9a64			 
9a64			 
9a64 2b				dec hl 
9a65 2b				dec hl 
9a66 22 ec e9			ld (cli_ret_sp), hl 
9a69				; do stack underflow checks 
9a69 e1				pop hl 
9a6a				if DEBUG_FORTH_STACK_GUARD 
9a6a cd 13 dd				call check_stacks 
9a6d					FORTH_CHK_RSP_UNDER 
9a6d e5				push hl 
9a6e d5				push de 
9a6f 2a ec e9			ld hl,(cli_ret_sp) 
9a72 11 a6 e9			ld de, cli_ret_stack 
9a75 cd 08 8d			call cmp16 
9a78 da 2a de			jp c, fault_rsp_under 
9a7b d1				pop de 
9a7c e1				pop hl 
9a7d				endm 
# End of macro FORTH_CHK_RSP_UNDER
9a7d				endif 
9a7d c9				ret 
9a7e			 
9a7e			 
9a7e			 
9a7e			; routine to load word pointed to by hl into hl 
9a7e			 
9a7e			loadhlptrtohl: 
9a7e			 
9a7e d5				push de 
9a7f 5e				ld e, (hl) 
9a80 23				inc hl 
9a81 56				ld d, (hl) 
9a82 eb				ex de, hl 
9a83 d1				pop de 
9a84			 
9a84 c9				ret 
9a85			 
9a85			 
9a85			 
9a85			 
9a85			 
9a85			; push a number held in HL onto the data stack 
9a85			; entry point for pushing a value when already in hl used in function above 
9a85			 
9a85			forth_push_numhl: 
9a85			 
9a85 e5				push hl    ; save value to push 
9a86			 
9a86			if DEBUG_FORTH_PUSH 
9a86				; see if disabled 
9a86			 
9a86			 
9a86 f5				push af 
9a87 3a 6f ee			ld a,(debug_vector) 
9a8a fe c9			cp $c9   ; ret 
9a8c			;	ld a, (os_view_disable) 
9a8c			;	cp '*' 
9a8c 28 34			jr z, .pskip2 
9a8e e5				push hl 
9a8f e5			push hl 
9a90 cd bd 8a			call clear_display 
9a93 e1			pop hl 
9a94 7c				ld a,h 
9a95 21 c0 e5			ld hl, os_word_scratch 
9a98 cd f3 8e			call hexout 
9a9b e1				pop hl 
9a9c 7d				ld a,l 
9a9d 21 c2 e5			ld hl, os_word_scratch+2 
9aa0 cd f3 8e			call hexout 
9aa3			 
9aa3 21 c4 e5			ld hl, os_word_scratch+4 
9aa6 3e 00			ld a,0 
9aa8 77				ld (hl),a 
9aa9 11 c0 e5			ld de,os_word_scratch 
9aac 3e 28				ld a, display_row_2 
9aae cd d0 8a				call str_at_display 
9ab1 11 0c cf			ld de, .push_num 
9ab4 3e 00			ld a, display_row_1 
9ab6			 
9ab6 cd d0 8a				call str_at_display 
9ab9			 
9ab9			 
9ab9 cd e0 8a			call update_display 
9abc cd 00 8a			call delay1s 
9abf cd 00 8a			call delay1s 
9ac2			.pskip2:  
9ac2			 
9ac2 f1				pop af 
9ac3			endif	 
9ac3			 
9ac3			 
9ac3				FORTH_DSP_NEXT 
9ac3 cd 14 9a			call macro_forth_dsp_next 
9ac6				endm 
# End of macro FORTH_DSP_NEXT
9ac6			 
9ac6 2a e8 e9			ld hl, (cli_data_sp) 
9ac9			 
9ac9				; save item type 
9ac9 3e 02			ld a,  DS_TYPE_INUM 
9acb 77				ld (hl), a 
9acc 23				inc hl 
9acd			 
9acd				; get word off stack 
9acd d1				pop de 
9ace 7b				ld a,e 
9acf 77				ld (hl), a 
9ad0 23				inc hl 
9ad1 7a				ld a,d 
9ad2 77				ld (hl), a 
9ad3			 
9ad3			if DEBUG_FORTH_PUSH 
9ad3 2b				dec hl 
9ad4 2b				dec hl 
9ad5 2b				dec hl 
9ad6						DMARK "PH5" 
9ad6 f5				push af  
9ad7 3a eb 9a			ld a, (.dmark)  
9ada 32 65 ee			ld (debug_mark),a  
9add 3a ec 9a			ld a, (.dmark+1)  
9ae0 32 66 ee			ld (debug_mark+1),a  
9ae3 3a ed 9a			ld a, (.dmark+2)  
9ae6 32 67 ee			ld (debug_mark+2),a  
9ae9 18 03			jr .pastdmark  
9aeb ..			.dmark: db "PH5"  
9aee f1			.pastdmark: pop af  
9aef			endm  
# End of macro DMARK
9aef				CALLMONITOR 
9aef cd 6f ee			call debug_vector  
9af2				endm  
# End of macro CALLMONITOR
9af2			endif	 
9af2			 
9af2 c9				ret 
9af3			 
9af3			 
9af3			; Push a string to stack pointed to by hl 
9af3			 
9af3			forth_push_str: 
9af3			 
9af3			if DEBUG_FORTH_PUSH 
9af3						DMARK "PSQ" 
9af3 f5				push af  
9af4 3a 08 9b			ld a, (.dmark)  
9af7 32 65 ee			ld (debug_mark),a  
9afa 3a 09 9b			ld a, (.dmark+1)  
9afd 32 66 ee			ld (debug_mark+1),a  
9b00 3a 0a 9b			ld a, (.dmark+2)  
9b03 32 67 ee			ld (debug_mark+2),a  
9b06 18 03			jr .pastdmark  
9b08 ..			.dmark: db "PSQ"  
9b0b f1			.pastdmark: pop af  
9b0c			endm  
# End of macro DMARK
9b0c				CALLMONITOR 
9b0c cd 6f ee			call debug_vector  
9b0f				endm  
# End of macro CALLMONITOR
9b0f			endif	 
9b0f			 
9b0f			 
9b0f			    
9b0f e5				push hl 
9b10 e5				push hl 
9b11			 
9b11			;	ld a, 0   ; find end of string 
9b11 cd 50 90			call strlenz 
9b14			if DEBUG_FORTH_PUSH 
9b14						DMARK "PQ2" 
9b14 f5				push af  
9b15 3a 29 9b			ld a, (.dmark)  
9b18 32 65 ee			ld (debug_mark),a  
9b1b 3a 2a 9b			ld a, (.dmark+1)  
9b1e 32 66 ee			ld (debug_mark+1),a  
9b21 3a 2b 9b			ld a, (.dmark+2)  
9b24 32 67 ee			ld (debug_mark+2),a  
9b27 18 03			jr .pastdmark  
9b29 ..			.dmark: db "PQ2"  
9b2c f1			.pastdmark: pop af  
9b2d			endm  
# End of macro DMARK
9b2d				CALLMONITOR 
9b2d cd 6f ee			call debug_vector  
9b30				endm  
# End of macro CALLMONITOR
9b30			endif	 
9b30 eb				ex de, hl 
9b31 e1				pop hl   ; get ptr to start of string 
9b32			if DEBUG_FORTH_PUSH 
9b32						DMARK "PQ3" 
9b32 f5				push af  
9b33 3a 47 9b			ld a, (.dmark)  
9b36 32 65 ee			ld (debug_mark),a  
9b39 3a 48 9b			ld a, (.dmark+1)  
9b3c 32 66 ee			ld (debug_mark+1),a  
9b3f 3a 49 9b			ld a, (.dmark+2)  
9b42 32 67 ee			ld (debug_mark+2),a  
9b45 18 03			jr .pastdmark  
9b47 ..			.dmark: db "PQ3"  
9b4a f1			.pastdmark: pop af  
9b4b			endm  
# End of macro DMARK
9b4b				CALLMONITOR 
9b4b cd 6f ee			call debug_vector  
9b4e				endm  
# End of macro CALLMONITOR
9b4e			endif	 
9b4e 19				add hl,de 
9b4f			if DEBUG_FORTH_PUSH 
9b4f						DMARK "PQE" 
9b4f f5				push af  
9b50 3a 64 9b			ld a, (.dmark)  
9b53 32 65 ee			ld (debug_mark),a  
9b56 3a 65 9b			ld a, (.dmark+1)  
9b59 32 66 ee			ld (debug_mark+1),a  
9b5c 3a 66 9b			ld a, (.dmark+2)  
9b5f 32 67 ee			ld (debug_mark+2),a  
9b62 18 03			jr .pastdmark  
9b64 ..			.dmark: db "PQE"  
9b67 f1			.pastdmark: pop af  
9b68			endm  
# End of macro DMARK
9b68				CALLMONITOR 
9b68 cd 6f ee			call debug_vector  
9b6b				endm  
# End of macro CALLMONITOR
9b6b			endif	 
9b6b			 
9b6b 2b				dec hl    ; see if there is an optional trailing double quote 
9b6c 7e				ld a,(hl) 
9b6d fe 22			cp '"' 
9b6f 20 03			jr nz, .strnoq 
9b71 3e 00			ld a, 0      ; get rid of double quote 
9b73 77				ld (hl), a 
9b74 23			.strnoq: inc hl 
9b75			 
9b75 3e 00			ld a, 0 
9b77 77				ld (hl), a     ; add null term and get rid of trailing double quote 
9b78			 
9b78 13				inc de ; add one for the type string 
9b79 13				inc de ; add one for null term??? 
9b7a			 
9b7a				; tos is get string pointer again 
9b7a				; de contains space to allocate 
9b7a				 
9b7a d5				push de 
9b7b			 
9b7b eb				ex de, hl 
9b7c			 
9b7c				;push af 
9b7c			 
9b7c			if DEBUG_FORTH_PUSH 
9b7c						DMARK "PHm" 
9b7c f5				push af  
9b7d 3a 91 9b			ld a, (.dmark)  
9b80 32 65 ee			ld (debug_mark),a  
9b83 3a 92 9b			ld a, (.dmark+1)  
9b86 32 66 ee			ld (debug_mark+1),a  
9b89 3a 93 9b			ld a, (.dmark+2)  
9b8c 32 67 ee			ld (debug_mark+2),a  
9b8f 18 03			jr .pastdmark  
9b91 ..			.dmark: db "PHm"  
9b94 f1			.pastdmark: pop af  
9b95			endm  
# End of macro DMARK
9b95				CALLMONITOR 
9b95 cd 6f ee			call debug_vector  
9b98				endm  
# End of macro CALLMONITOR
9b98			endif	 
9b98 cd c5 90			call malloc	; on ret hl now contains allocated memory 
9b9b				if DEBUG_FORTH_MALLOC_GUARD 
9b9b cc 64 cf				call z,malloc_error 
9b9e				endif 
9b9e			 
9b9e				 
9b9e c1				pop bc    ; get length 
9b9f d1				pop de   ;  get string start    
9ba0			 
9ba0				; hl has destination from malloc 
9ba0			 
9ba0 eb				ex de, hl    ; prep for ldir 
9ba1			 
9ba1 d5				push de   ; save malloc area for DSP later 
9ba2				;push hl   ; save malloc area for DSP later 
9ba2			 
9ba2			if DEBUG_FORTH_PUSH 
9ba2						DMARK "PHc" 
9ba2 f5				push af  
9ba3 3a b7 9b			ld a, (.dmark)  
9ba6 32 65 ee			ld (debug_mark),a  
9ba9 3a b8 9b			ld a, (.dmark+1)  
9bac 32 66 ee			ld (debug_mark+1),a  
9baf 3a b9 9b			ld a, (.dmark+2)  
9bb2 32 67 ee			ld (debug_mark+2),a  
9bb5 18 03			jr .pastdmark  
9bb7 ..			.dmark: db "PHc"  
9bba f1			.pastdmark: pop af  
9bbb			endm  
# End of macro DMARK
9bbb				CALLMONITOR 
9bbb cd 6f ee			call debug_vector  
9bbe				endm  
# End of macro CALLMONITOR
9bbe			endif	 
9bbe			 
9bbe			 
9bbe ed b0			ldir 
9bc0			 
9bc0			 
9bc0				; push malloc to data stack     macro?????  
9bc0			 
9bc0				FORTH_DSP_NEXT 
9bc0 cd 14 9a			call macro_forth_dsp_next 
9bc3				endm 
# End of macro FORTH_DSP_NEXT
9bc3			 
9bc3				; save value and type 
9bc3			 
9bc3 2a e8 e9			ld hl, (cli_data_sp) 
9bc6			 
9bc6				; save item type 
9bc6 3e 01			ld a,  DS_TYPE_STR 
9bc8 77				ld (hl), a 
9bc9 23				inc hl 
9bca			 
9bca				; get malloc word off stack 
9bca d1				pop de 
9bcb 73				ld (hl), e 
9bcc 23				inc hl 
9bcd 72				ld (hl), d 
9bce			 
9bce			 
9bce			 
9bce			if DEBUG_FORTH_PUSH 
9bce 2a e8 e9			ld hl, (cli_data_sp) 
9bd1						DMARK "PHS" 
9bd1 f5				push af  
9bd2 3a e6 9b			ld a, (.dmark)  
9bd5 32 65 ee			ld (debug_mark),a  
9bd8 3a e7 9b			ld a, (.dmark+1)  
9bdb 32 66 ee			ld (debug_mark+1),a  
9bde 3a e8 9b			ld a, (.dmark+2)  
9be1 32 67 ee			ld (debug_mark+2),a  
9be4 18 03			jr .pastdmark  
9be6 ..			.dmark: db "PHS"  
9be9 f1			.pastdmark: pop af  
9bea			endm  
# End of macro DMARK
9bea				CALLMONITOR 
9bea cd 6f ee			call debug_vector  
9bed				endm  
# End of macro CALLMONITOR
9bed			;	ex de,hl 
9bed			endif	 
9bed				; in case of spaces, skip the ptr past the copied string 
9bed				;pop af 
9bed				;ld (cli_origptr),hl 
9bed			 
9bed c9				ret 
9bee			 
9bee			 
9bee			 
9bee			; TODO ascii push input onto stack given hl to start of input 
9bee			 
9bee			; identify type 
9bee			; if starts with a " then a string 
9bee			; otherwise it is a number 
9bee			;  
9bee			; if a string 
9bee			;     scan for ending " to get length of string to malloc for + 1 
9bee			;     malloc 
9bee			;     put pointer to string on stack first byte flags as string 
9bee			; 
9bee			; else a number 
9bee			;    look for number format identifier 
9bee			;    $xx hex 
9bee			;    %xxxxx bin 
9bee			;    xxxxx decimal 
9bee			;    convert number to 16bit word.  
9bee			;    malloc word + 1 with flag to identiy as num 
9bee			;    put pointer to number on stack 
9bee			;   
9bee			;  
9bee			  
9bee			forth_apush: 
9bee				; kernel push 
9bee			 
9bee			if DEBUG_FORTH_PUSH 
9bee						DMARK "PSH" 
9bee f5				push af  
9bef 3a 03 9c			ld a, (.dmark)  
9bf2 32 65 ee			ld (debug_mark),a  
9bf5 3a 04 9c			ld a, (.dmark+1)  
9bf8 32 66 ee			ld (debug_mark+1),a  
9bfb 3a 05 9c			ld a, (.dmark+2)  
9bfe 32 67 ee			ld (debug_mark+2),a  
9c01 18 03			jr .pastdmark  
9c03 ..			.dmark: db "PSH"  
9c06 f1			.pastdmark: pop af  
9c07			endm  
# End of macro DMARK
9c07				CALLMONITOR 
9c07 cd 6f ee			call debug_vector  
9c0a				endm  
# End of macro CALLMONITOR
9c0a			endif	 
9c0a				; identify input type 
9c0a			 
9c0a 7e				ld a,(hl) 
9c0b			 
9c0b fe 23			cp '#' 
9c0d ca 47 9c			jp z, .fapdec 
9c10			 
9c10			 
9c10 fe 22			cp '"' 
9c12 28 0a			jr z, .fapstr 
9c14 fe 24			cp '$' 
9c16 ca 3e 9c			jp z, .faphex 
9c19 fe 25			cp '%' 
9c1b ca 26 9c			jp z, .fapbin 
9c1e			;	cp 'b' 
9c1e			;	jp z, .fabin 
9c1e				; else decimal 
9c1e			 
9c1e				; TODO do decimal conversion 
9c1e				; decimal is stored as a 16bit word 
9c1e			 
9c1e				; by default everything is a string if type is not detected 
9c1e			.fapstr: ; 
9c1e fe 22			cp '"' 
9c20 20 01			jr nz, .strnoqu 
9c22 23				inc hl 
9c23			.strnoqu: 
9c23 c3 f3 9a			jp forth_push_str 
9c26			 
9c26			 
9c26			 
9c26			.fapbin:    ; push a binary string.  
9c26 11 00 00			ld de, 0   ; hold a 16bit value 
9c29			 
9c29 23			.fapbinshift:	inc hl  
9c2a 7e				ld a,(hl) 
9c2b fe 00			cp 0     ; done scanning  
9c2d 28 0b			jr z, .fapbdone  	; got it in HL so push  
9c2f			 
9c2f				; left shift de 
9c2f eb				ex de, hl	 
9c30 29				add hl, hl 
9c31			 
9c31				; is 1 
9c31 fe 31			cp '1' 
9c33 20 02			jr nz, .binzero 
9c35 cb 4d			bit 1, l 
9c37			.binzero: 
9c37 eb				ex de, hl	 ; save current de 
9c38 18 ef			jr .fapbinshift 
9c3a			 
9c3a			.fapbdone: 
9c3a eb				ex de, hl 
9c3b c3 85 9a			jp forth_push_numhl 
9c3e			 
9c3e			 
9c3e			.faphex:   ; hex is always stored as a 16bit word 
9c3e				; skip number prefix 
9c3e 23				inc hl 
9c3f				; turn ascii into number 
9c3f cd a9 8f			call get_word_hl	; ret 16bit word in hl 
9c42			 
9c42 c3 85 9a			jp forth_push_numhl 
9c45			 
9c45 00				 nop 
9c46			 
9c46			.fabin:   ; TODO bin conversion 
9c46			 
9c46			 
9c46 c9				ret 
9c47			.fapdec:	 
9c47				; string to dec conversion 
9c47 23				inc hl 
9c48 eb				ex de, hl 
9c49 cd e7 8f			call string_to_uint16 
9c4c c3 85 9a			jp forth_push_numhl 
9c4f c9				ret 
9c50				 
9c50			;atoui_16: 
9c50			 
9c50			; get either a string ptr or a 16bit word from the data stack 
9c50			 
9c50			FORTH_DSP: macro 
9c50				call macro_forth_dsp 
9c50				endm 
9c50			 
9c50			macro_forth_dsp: 
9c50				; data stack pointer points to current word on tos 
9c50			 
9c50 2a e8 e9			ld hl,(cli_data_sp) 
9c53			 
9c53				if DEBUG_FORTH_PUSH 
9c53						DMARK "DSP" 
9c53 f5				push af  
9c54 3a 68 9c			ld a, (.dmark)  
9c57 32 65 ee			ld (debug_mark),a  
9c5a 3a 69 9c			ld a, (.dmark+1)  
9c5d 32 66 ee			ld (debug_mark+1),a  
9c60 3a 6a 9c			ld a, (.dmark+2)  
9c63 32 67 ee			ld (debug_mark+2),a  
9c66 18 03			jr .pastdmark  
9c68 ..			.dmark: db "DSP"  
9c6b f1			.pastdmark: pop af  
9c6c			endm  
# End of macro DMARK
9c6c			 
9c6c cd 97 cf				call display_data_sp 
9c6f				;call break_point_state 
9c6f				;rst 030h 
9c6f				CALLMONITOR 
9c6f cd 6f ee			call debug_vector  
9c72				endm  
# End of macro CALLMONITOR
9c72				endif 
9c72			 
9c72 c9				ret 
9c73			 
9c73			; return hl to start of value on stack 
9c73			 
9c73			FORTH_DSP_VALUE: macro 
9c73				call macro_forth_dsp_value 
9c73				endm 
9c73			 
9c73			macro_forth_dsp_value: 
9c73			 
9c73				FORTH_DSP 
9c73 cd 50 9c			call macro_forth_dsp 
9c76				endm 
# End of macro FORTH_DSP
9c76			 
9c76 d5				push de 
9c77			 
9c77 23				inc hl ; skip type 
9c78			 
9c78 5e				ld e, (hl) 
9c79 23				inc hl 
9c7a 56				ld d, (hl) 
9c7b eb				ex de,hl  
9c7c			 
9c7c d1				pop de 
9c7d			 
9c7d c9				ret 
9c7e			 
9c7e			; return hl to start of value to second item on stack 
9c7e			 
9c7e			FORTH_DSP_VALUEM1: macro 
9c7e				call macro_forth_dsp_value_m1 
9c7e				endm 
9c7e			 
9c7e			macro_forth_dsp_value_m1: 
9c7e			 
9c7e				FORTH_DSP 
9c7e cd 50 9c			call macro_forth_dsp 
9c81				endm 
# End of macro FORTH_DSP
9c81			 
9c81 2b				dec hl 
9c82 2b				dec hl 
9c83			;	dec hl 
9c83			 
9c83 d5				push de 
9c84			 
9c84 5e				ld e, (hl) 
9c85 23				inc hl 
9c86 56				ld d, (hl) 
9c87 eb				ex de,hl  
9c88			 
9c88 d1				pop de 
9c89			 
9c89 c9				ret 
9c8a			 
9c8a				 
9c8a			 
9c8a			; whatever the current top os stack points to, we are now done with it so return memory to malloc 
9c8a			 
9c8a			FORTH_DSP_POP: macro 
9c8a				call macro_forth_dsp_pop 
9c8a				endm 
9c8a			 
9c8a			 
9c8a			; get the tos data type 
9c8a			 
9c8a			FORTH_DSP_TYPE:   macro 
9c8a			 
9c8a				;FORTH_DSP_VALUE 
9c8a				FORTH_DSP 
9c8a				 
9c8a				; hl points to value 
9c8a				; check type 
9c8a			 
9c8a				ld a,(hl) 
9c8a			 
9c8a				endm 
9c8a			 
9c8a			; load the tos value into hl 
9c8a			 
9c8a			 
9c8a			FORTH_DSP_VALUEHL:  macro 
9c8a				call macro_dsp_valuehl 
9c8a				endm 
9c8a			 
9c8a			 
9c8a			 
9c8a			macro_dsp_valuehl: 
9c8a				FORTH_DSP_VALUE 
9c8a cd 73 9c			call macro_forth_dsp_value 
9c8d				endm 
# End of macro FORTH_DSP_VALUE
9c8d			 
9c8d				;FORTH_ERR_TOS_NOTNUM 
9c8d			 
9c8d				;inc hl   ; skip type id 
9c8d			 
9c8d			;	push de 
9c8d			; 
9c8d			;	ld e, (hl) 
9c8d			;	inc hl 
9c8d			;	ld d, (hl) 
9c8d			;	ex de,hl  
9c8d			 
9c8d			;	pop de 
9c8d			 
9c8d				if DEBUG_FORTH_PUSH 
9c8d						DMARK "DVL" 
9c8d f5				push af  
9c8e 3a a2 9c			ld a, (.dmark)  
9c91 32 65 ee			ld (debug_mark),a  
9c94 3a a3 9c			ld a, (.dmark+1)  
9c97 32 66 ee			ld (debug_mark+1),a  
9c9a 3a a4 9c			ld a, (.dmark+2)  
9c9d 32 67 ee			ld (debug_mark+2),a  
9ca0 18 03			jr .pastdmark  
9ca2 ..			.dmark: db "DVL"  
9ca5 f1			.pastdmark: pop af  
9ca6			endm  
# End of macro DMARK
9ca6				CALLMONITOR 
9ca6 cd 6f ee			call debug_vector  
9ca9				endm  
# End of macro CALLMONITOR
9ca9				endif 
9ca9 c9				ret 
9caa			 
9caa			forth_apushstrhl:      
9caa				; push of string requires use of cli_origptr 
9caa				; bodge use 
9caa			 
9caa				; get current cli_origptr, save, update with temp pointer  
9caa ed 5b 38 ea		ld de, (cli_origptr) 
9cae 22 38 ea			ld (cli_origptr), hl 
9cb1 d5				push de 
9cb2 cd ee 9b			call forth_apush 
9cb5 d1				pop de 
9cb6 ed 53 38 ea		ld (cli_origptr), de 
9cba c9			        ret	 
9cbb			 
9cbb			 
9cbb			; increase loop stack pointer and save hl to it 
9cbb				 
9cbb			FORTH_LOOP_NEXT: macro 
9cbb				call macro_forth_loop_next 
9cbb				;nop 
9cbb				endm 
9cbb			 
9cbb			macro_forth_loop_next: 
9cbb				if DEBUG_FORTH_STACK_GUARD 
9cbb cd 13 dd				call check_stacks 
9cbe				endif 
9cbe e5				push hl 
9cbf d5				push de 
9cc0 eb				ex de,hl 
9cc1 2a ea e9			ld hl,(cli_loop_sp) 
9cc4 23				inc hl 
9cc5 23				inc hl 
9cc6					if DEBUG_FORTH_WORDS 
9cc6						DMARK "LNX" 
9cc6 f5				push af  
9cc7 3a db 9c			ld a, (.dmark)  
9cca 32 65 ee			ld (debug_mark),a  
9ccd 3a dc 9c			ld a, (.dmark+1)  
9cd0 32 66 ee			ld (debug_mark+1),a  
9cd3 3a dd 9c			ld a, (.dmark+2)  
9cd6 32 67 ee			ld (debug_mark+2),a  
9cd9 18 03			jr .pastdmark  
9cdb ..			.dmark: db "LNX"  
9cde f1			.pastdmark: pop af  
9cdf			endm  
# End of macro DMARK
9cdf						CALLMONITOR 
9cdf cd 6f ee			call debug_vector  
9ce2				endm  
# End of macro CALLMONITOR
9ce2					endif 
9ce2 22 ea e9			ld (cli_loop_sp),hl 
9ce5 73				ld (hl), e 
9ce6 23				inc hl 
9ce7 72				ld (hl), d 
9ce8 d1				pop de    ; been reversed so save a swap on restore 
9ce9 e1				pop hl 
9cea				if DEBUG_FORTH_STACK_GUARD 
9cea cd 13 dd				call check_stacks 
9ced				endif 
9ced c9				ret 
9cee			 
9cee			; get current ret stack pointer and save to hl  
9cee				 
9cee			FORTH_LOOP_TOS: macro 
9cee				call macro_forth_loop_tos 
9cee				endm 
9cee			 
9cee			macro_forth_loop_tos: 
9cee d5				push de 
9cef 2a ea e9			ld hl,(cli_loop_sp) 
9cf2 5e				ld e, (hl) 
9cf3 23				inc hl 
9cf4 56				ld d, (hl) 
9cf5 eb				ex de, hl 
9cf6 d1				pop de 
9cf7 c9				ret 
9cf8			 
9cf8			; pop loop stack pointer 
9cf8				 
9cf8			FORTH_LOOP_POP: macro 
9cf8				call macro_forth_loop_pop 
9cf8				endm 
9cf8			 
9cf8			 
9cf8			macro_forth_loop_pop: 
9cf8				if DEBUG_FORTH_STACK_GUARD 
9cf8					DMARK "LPP" 
9cf8 f5				push af  
9cf9 3a 0d 9d			ld a, (.dmark)  
9cfc 32 65 ee			ld (debug_mark),a  
9cff 3a 0e 9d			ld a, (.dmark+1)  
9d02 32 66 ee			ld (debug_mark+1),a  
9d05 3a 0f 9d			ld a, (.dmark+2)  
9d08 32 67 ee			ld (debug_mark+2),a  
9d0b 18 03			jr .pastdmark  
9d0d ..			.dmark: db "LPP"  
9d10 f1			.pastdmark: pop af  
9d11			endm  
# End of macro DMARK
9d11 cd 13 dd				call check_stacks 
9d14					FORTH_CHK_LOOP_UNDER 
9d14 e5				push hl 
9d15 d5				push de 
9d16 2a ea e9			ld hl,(cli_loop_sp) 
9d19 11 24 e9			ld de, cli_loop_stack 
9d1c cd 08 8d			call cmp16 
9d1f da 30 de			jp c, fault_loop_under 
9d22 d1				pop de 
9d23 e1				pop hl 
9d24				endm 
# End of macro FORTH_CHK_LOOP_UNDER
9d24				endif 
9d24 e5				push hl 
9d25 2a ea e9			ld hl,(cli_loop_sp) 
9d28 2b				dec hl 
9d29 2b				dec hl 
9d2a 22 ea e9			ld (cli_loop_sp), hl 
9d2d				; TODO do stack underflow checks 
9d2d e1				pop hl 
9d2e				if DEBUG_FORTH_STACK_GUARD 
9d2e cd 13 dd				call check_stacks 
9d31					FORTH_CHK_LOOP_UNDER 
9d31 e5				push hl 
9d32 d5				push de 
9d33 2a ea e9			ld hl,(cli_loop_sp) 
9d36 11 24 e9			ld de, cli_loop_stack 
9d39 cd 08 8d			call cmp16 
9d3c da 30 de			jp c, fault_loop_under 
9d3f d1				pop de 
9d40 e1				pop hl 
9d41				endm 
# End of macro FORTH_CHK_LOOP_UNDER
9d41				endif 
9d41 c9				ret 
9d42			 
9d42			macro_forth_dsp_pop: 
9d42			 
9d42 e5				push hl 
9d43			 
9d43				; release malloc data 
9d43			 
9d43				if DEBUG_FORTH_STACK_GUARD 
9d43 cd 13 dd				call check_stacks 
9d46					FORTH_CHK_DSP_UNDER 
9d46 e5				push hl 
9d47 d5				push de 
9d48 2a e8 e9			ld hl,(cli_data_sp) 
9d4b 11 22 e8			ld de, cli_data_stack 
9d4e cd 08 8d			call cmp16 
9d51 da 24 de			jp c, fault_dsp_under 
9d54 d1				pop de 
9d55 e1				pop hl 
9d56				endm 
# End of macro FORTH_CHK_DSP_UNDER
9d56				endif 
9d56				;ld hl,(cli_data_sp) 
9d56			if DEBUG_FORTH_DOT 
9d56				DMARK "DPP" 
9d56 f5				push af  
9d57 3a 6b 9d			ld a, (.dmark)  
9d5a 32 65 ee			ld (debug_mark),a  
9d5d 3a 6c 9d			ld a, (.dmark+1)  
9d60 32 66 ee			ld (debug_mark+1),a  
9d63 3a 6d 9d			ld a, (.dmark+2)  
9d66 32 67 ee			ld (debug_mark+2),a  
9d69 18 03			jr .pastdmark  
9d6b ..			.dmark: db "DPP"  
9d6e f1			.pastdmark: pop af  
9d6f			endm  
# End of macro DMARK
9d6f				CALLMONITOR 
9d6f cd 6f ee			call debug_vector  
9d72				endm  
# End of macro CALLMONITOR
9d72			endif	 
9d72			 
9d72			 
9d72			if FORTH_ENABLE_DSPPOPFREE 
9d72			 
9d72				FORTH_DSP 
9d72 cd 50 9c			call macro_forth_dsp 
9d75				endm 
# End of macro FORTH_DSP
9d75			 
9d75 7e				ld a, (hl) 
9d76 fe 01			cp DS_TYPE_STR 
9d78 20 22			jr nz, .skippopfree 
9d7a			 
9d7a				FORTH_DSP_VALUEHL 
9d7a cd 8a 9c			call macro_dsp_valuehl 
9d7d				endm 
# End of macro FORTH_DSP_VALUEHL
9d7d			;	nop 
9d7d			if DEBUG_FORTH_DOT 
9d7d				DMARK "DPf" 
9d7d f5				push af  
9d7e 3a 92 9d			ld a, (.dmark)  
9d81 32 65 ee			ld (debug_mark),a  
9d84 3a 93 9d			ld a, (.dmark+1)  
9d87 32 66 ee			ld (debug_mark+1),a  
9d8a 3a 94 9d			ld a, (.dmark+2)  
9d8d 32 67 ee			ld (debug_mark+2),a  
9d90 18 03			jr .pastdmark  
9d92 ..			.dmark: db "DPf"  
9d95 f1			.pastdmark: pop af  
9d96			endm  
# End of macro DMARK
9d96				CALLMONITOR 
9d96 cd 6f ee			call debug_vector  
9d99				endm  
# End of macro CALLMONITOR
9d99			endif	 
9d99 cd 8f 91			call free 
9d9c			.skippopfree: 
9d9c				 
9d9c			 
9d9c			endif 
9d9c			 
9d9c			if DEBUG_FORTH_DOT_KEY 
9d9c				DMARK "DP2" 
9d9c				CALLMONITOR 
9d9c			endif	 
9d9c			 
9d9c				; move pointer down 
9d9c			 
9d9c 2a e8 e9			ld hl,(cli_data_sp) 
9d9f 2b				dec hl 
9da0 2b				dec hl 
9da1			; PARSEV5 
9da1 2b				dec hl 
9da2 22 e8 e9			ld (cli_data_sp), hl 
9da5			 
9da5				if DEBUG_FORTH_STACK_GUARD 
9da5 cd 13 dd				call check_stacks 
9da8					FORTH_CHK_DSP_UNDER 
9da8 e5				push hl 
9da9 d5				push de 
9daa 2a e8 e9			ld hl,(cli_data_sp) 
9dad 11 22 e8			ld de, cli_data_stack 
9db0 cd 08 8d			call cmp16 
9db3 da 24 de			jp c, fault_dsp_under 
9db6 d1				pop de 
9db7 e1				pop hl 
9db8				endm 
# End of macro FORTH_CHK_DSP_UNDER
9db8				endif 
9db8			 
9db8 e1				pop hl 
9db9			 
9db9 c9				ret 
9dba			 
9dba			getwordathl: 
9dba				; hl points to an address 
9dba				; load hl with the word at that address 
9dba			 
9dba d5				push de 
9dbb			 
9dbb 5e				ld e, (hl) 
9dbc 23				inc hl 
9dbd 56				ld d, (hl) 
9dbe eb				ex de, hl 
9dbf			 
9dbf d1				pop de 
9dc0 c9				ret 
9dc1			 
9dc1			 
9dc1			; functions to manuplite stack pointers 
9dc1			 
9dc1			; generate fragment to set hl to be pointer to a stack item 
9dc1			 
9dc1			FORTH_DSP_PTR: macro  x 
9dc1				ld hl,(cli_data_sp) 
9dc1				ld de, x * 3 
9dc1				sbc hl, de 
9dc1				endm 
9dc1			 
9dc1			 
9dc1			 
9dc1			; copy point in hl to stack tmp storage slots 1-4 
9dc1			hltostack1: 
9dc1 11 b8 e2			ld de, os_stack_1  
9dc4 c3 ef 9d			jp hltostackmv 
9dc7			 
9dc7			hltostack2:  
9dc7 11 b5 e2			ld de, os_stack_2 
9dca c3 ef 9d			jp hltostackmv 
9dcd			 
9dcd			hltostack3:  
9dcd 11 b2 e2			ld de, os_stack_3 
9dd0 c3 ef 9d			jp hltostackmv 
9dd3			 
9dd3			hltostack4:  
9dd3 11 af e2			ld de, os_stack_4  
9dd6 c3 ef 9d			jp hltostackmv 
9dd9			 
9dd9			; copy to point in hl from stack tmp storage slots 1-4 
9dd9			hlfromstack1: 
9dd9 11 b8 e2			ld de, os_stack_1 
9ddc c3 ee 9d			jp hlfromsttackmv 
9ddf			 
9ddf			hlfromstack2:  
9ddf 11 b5 e2			ld de, os_stack_2 
9de2 c3 ee 9d			jp hlfromsttackmv 
9de5			 
9de5			hlfromstack3:  
9de5 11 b2 e2			ld de, os_stack_3 
9de8 c3 ee 9d			jp hlfromsttackmv 
9deb			 
9deb			hlfromstack4:  
9deb 11 af e2			ld de, os_stack_4 
9dee			 
9dee			hlfromsttackmv: 
9dee eb				ex de, hl 
9def			 
9def			hltostackmv: 
9def			 
9def				; do stack move 
9def c5				push bc 
9df0 01 03 00			ld bc, 3 
9df3 ed b0			ldir  
9df5 c1				pop bc	 
9df6 c9				ret 
9df7			 
9df7			; eof 
9df7			 
# End of file forth_stackopsv5.asm
9df7			endif 
9df7			loadwordinhl:	 
9df7			 
9df7 d5				push de 
9df8			 
9df8 5e				ld e, (hl) 
9df9 23				inc hl 
9dfa 56				ld d, (hl) 
9dfb eb				ex de,hl  
9dfc			 
9dfc d1				pop de 
9dfd			 
9dfd c9				ret 
9dfe			 
9dfe			user_word_eol:  
9dfe				; hl contains the pointer to where to create a linked list item from the end 
9dfe				; of the user dict to continue on at the system word dict 
9dfe				 
9dfe				; poke the stub of the word list linked list to repoint to rom words 
9dfe			 
9dfe				; stub format 
9dfe				; db   word id 
9dfe				; dw    link to next word 
9dfe			        ; db char length of token 
9dfe				; db string + 0 term 
9dfe				; db exec code....  
9dfe			 
9dfe 3e 00			ld a, WORD_SYS_ROOT     ; root word 
9e00 77				ld (hl), a		; word id 
9e01 23				inc hl 
9e02			 
9e02 11 b9 9f			ld de, sysdict 
9e05 73				ld (hl), e		; next word link ie system dict 
9e06 23				inc hl 
9e07 72				ld (hl), d		; next word link ie system dict 
9e08 23				inc hl	 
9e09			 
9e09			;	ld (hl), sysdict		; next word link ie system dict 
9e09			;	inc hl 
9e09			;	inc hl 
9e09			 
9e09			;	inc hl 
9e09			;	inc hl 
9e09			 
9e09 3e 02			ld a, 2			; word length is 0 
9e0b 77				ld (hl), a	 
9e0c 23				inc hl 
9e0d			 
9e0d 3e 7e			ld a, '~'			; word length is 0 
9e0f 77				ld (hl), a	 
9e10 23				inc hl 
9e11 3e 00			ld a, 0			; save empty word 
9e13 77				ld (hl), a 
9e14			 
9e14 c9				ret 
9e15			 
9e15				 
9e15			 
9e15			forthexec_cleanup: 
9e15				FORTH_RSP_POP 
9e15 cd 4d 9a			call macro_forth_rsp_pop 
9e18				endm 
# End of macro FORTH_RSP_POP
9e18 c9				ret 
9e19			 
9e19			forth_call_hl: 
9e19				; taking hl 
9e19 e5				push hl 
9e1a c9				ret 
9e1b			 
9e1b			; this is called to reset Forth system but keep existing uwords etc 
9e1b			 
9e1b			forth_warmstart: 
9e1b				; setup stack over/under flow checks 
9e1b				if DEBUG_FORTH_STACK_GUARD 
9e1b cd f9 dc				call chk_stk_init 
9e1e				endif 
9e1e			 
9e1e				; init stack pointers  - * these stacks go upwards *  
9e1e 21 a6 e9			ld hl, cli_ret_stack 
9e21 22 ec e9			ld (cli_ret_sp), hl	 
9e24				; set bottom of stack 
9e24 3e 00			ld a,0 
9e26 77				ld (hl),a 
9e27 23				inc hl 
9e28 77				ld (hl),a 
9e29			 
9e29 21 22 e8			ld hl, cli_data_stack 
9e2c 22 e8 e9			ld (cli_data_sp), hl	 
9e2f				; set bottom of stack 
9e2f 3e 00			ld a,0 
9e31 77				ld (hl),a 
9e32 23				inc hl 
9e33 77				ld (hl),a 
9e34			 
9e34 21 24 e9			ld hl, cli_loop_stack 
9e37 22 ea e9			ld (cli_loop_sp), hl	 
9e3a				; set bottom of stack 
9e3a 3e 00			ld a,0 
9e3c 77				ld (hl),a 
9e3d 23				inc hl 
9e3e 77				ld (hl),a 
9e3f			 
9e3f				; init extent of current open file 
9e3f			 
9e3f 3e 00			ld a, 0 
9e41 32 64 ea			ld (store_openext), a 
9e44			 
9e44 c9				ret 
9e45			 
9e45			 
9e45			 
9e45			; Cold Start - this is called to setup the whole Forth system 
9e45			 
9e45			forth_init: 
9e45			 
9e45				; setup stack over/under flow checks 
9e45			 
9e45			;	if DEBUG_FORTH_STACK_GUARD 
9e45			;		call chk_stk_init 
9e45			;	endif 
9e45			 
9e45				; enable auto display updates (slow.....) 
9e45			 
9e45 3e 01			ld a, 1 
9e47 32 36 ea			ld (cli_autodisplay), a 
9e4a			 
9e4a				; if storage is in use disable long reads for now 
9e4a 3e 00			ld a, 0 
9e4c 32 6f ea			ld (store_longread), a 
9e4f			 
9e4f			 
9e4f				; show start up screen 
9e4f			 
9e4f cd bd 8a			call clear_display 
9e52			 
9e52 3e 00			ld a,0 
9e54 32 58 ea			ld (f_cursor_ptr), a 
9e57			 
9e57				; set start of word list in start of ram - for use when creating user words 
9e57			 
9e57 21 b6 e0			ld hl, baseram 
9e5a 22 b8 e5			ld (os_last_new_uword), hl 
9e5d cd fe 9d			call user_word_eol 
9e60				 
9e60			;		call display_data_sp 
9e60			;		call next_page_prompt 
9e60			 
9e60			 
9e60			 
9e60			 
9e60 c9				ret 
9e61			 
9e61 .. 00		.bootforth: db " Forth Kernel Init ",0 
9e75			 
9e75			; TODO push to stack 
9e75			 
9e75			;  
9e75			 
9e75			if FORTH_PARSEV2 
9e75			 
9e75			 
9e75				include "forth_parserv2.asm" 
9e75			 
9e75			endif 
9e75			 
9e75			 
9e75			; parse cli version 1 
9e75			 
9e75			if FORTH_PARSEV1 
9e75			 
9e75			 
9e75			 
9e75			      include "forth_parserv1.asm" 
9e75			endif 
9e75				 
9e75			if FORTH_PARSEV3 
9e75			      include "forth_parserv3.asm" 
9e75				include "forth_wordsv3.asm" 
9e75			endif 
9e75			 
9e75			if FORTH_PARSEV4 
9e75			      include "forth_parserv4.asm" 
9e75				include "forth_wordsv4.asm" 
9e75			endif 
9e75			 
9e75			if FORTH_PARSEV5 
9e75			      include "forth_parserv5.asm" 
9e75				include "forth_wordsv4.asm" 
9e75			endif 
9e75			 
9e75			if FORTH_PARSEV6 
9e75			      include "forth_parserv6.asm" 
9e75			 
9e75			 
9e75			; A better parser without using malloc and string copies all over the place.  
9e75			; Exec in situ should be faster 
9e75			 
9e75			;WORD_SYS_LOWPRIM: equ 4    ; Offset for low level prim words opcode 
9e75			;WORD_SYS_BRANCH: equ 10    ; Offset for branching and loop words opcode 
9e75			WORD_SYS_UWORD: equ 1   ; Opcode for all user words 
9e75			WORD_SYS_DELETED: equ 3 ; Op code for a deleted UWORD 
9e75			WORD_SYS_ROOT: equ 0   ; Opcode for all user words 
9e75			WORD_SYS_END: equ 0   ; Opcode for all user words 
9e75			WORD_SYS_CORE: equ 20    ; Offset for dict core words opcode 
9e75			WORD_FLAG_CODE: equ 0	   ; opcodeflag to exec pure code for this word 
9e75			WORD_FLAG_JP: equ 1	   ; opcodeflag to list zero term jump table words 
9e75			 
9e75			; Core word preamble macro 
9e75			 
9e75			CWHEAD:   macro nxtword opcode lit len opflags 
9e75				db WORD_SYS_CORE+opcode             
9e75				; internal op code number 
9e75				dw nxtword            
9e75				; link to next dict word block 
9e75				db len + 1 
9e75				; literal length of dict word inc zero term 
9e75				db lit,0              
9e75				; literal dict word 
9e75			        ; TODO db opflags        
9e75				endm 
9e75			 
9e75			 
9e75			NEXTW: macro  
9e75				jp macro_next 
9e75				endm 
9e75			 
9e75			macro_next: 
9e75			if DEBUG_FORTH_PARSE_EXEC 
9e75				DMARK "NXT" 
9e75				CALLMONITOR 
9e75			endif	 
9e75			;	inc hl  ; skip token null term  
9e75 ed 4b 3a ea		ld bc,(cli_ptr)   ; move to next token to parse in the input stream 
9e79 ed 5b 38 ea		ld de,(cli_origptr)   ; move to next token to parse in the input stream 
9e7d 2a bc e5			ld hl,(os_tok_ptr)   ; move to next token to parse in the input stream 
9e80			if DEBUG_FORTH_PARSE_EXEC 
9e80				DMARK "}AA" 
9e80				CALLMONITOR 
9e80			endif	 
9e80 c3 6f 9f			jp execnext 
9e83				;jp exec1 
9e83			       
9e83			 
9e83			 
9e83			; Another go at the parser to compile  
9e83			 
9e83			 
9e83			; TODO rework parser to change all of the string words to byte tokens 
9e83			; TODO do a search for  
9e83			 
9e83			; TODO first run normal parser to zero term sections 
9e83			; TODO for each word do a token look up to get the op code 
9e83			; TODO need some means to flag to the exec that this is a byte code form    
9e83			 
9e83			 
9e83			forthcompile: 
9e83			 
9e83			; 
9e83			; line parse: 
9e83			;       parse raw input buffer 
9e83			;       tokenise the words 
9e83			;       malloc new copy (for looping etc) 
9e83			;       copy to malloc + current pc in line to start of string and add line term 
9e83			;       save on new rsp 
9e83			; 
9e83			 
9e83			; hl to point to the line to tokenise 
9e83			 
9e83			;	push hl 
9e83 22 bc e5			ld (os_tok_ptr), hl  ; save ptr to string 
9e86			 
9e86			;	ld a,0		; string term on input 
9e86			;	call strlent 
9e86			 
9e86			;	ld (os_tok_len), hl	 ; save string length 
9e86			 
9e86			;if DEBUG_FORTH_TOK 
9e86			;	ex de,hl		 
9e86			;endif 
9e86			 
9e86			;	pop hl 		; get back string pointer 
9e86			 
9e86			if DEBUG_FORTH_TOK 
9e86						DMARK "TOc" 
9e86				CALLMONITOR 
9e86			endif 
9e86 7e			.cptoken2:    ld a,(hl) 
9e87 23				inc hl 
9e88 fe 7f			cp FORTH_END_BUFFER 
9e8a 28 29			jr z, .cptokendone2 
9e8c fe 00			cp 0 
9e8e 28 25			jr z, .cptokendone2 
9e90 fe 22			cp '"' 
9e92 28 0b			jr z, .cptokenstr2     ; will want to skip until end of string delim 
9e94 fe 20			cp ' ' 
9e96 20 ee			jr nz,  .cptoken2 
9e98			 
9e98			; TODO consume comments held between ( and ) 
9e98			 
9e98				; we have a space so change to zero term for dict match later 
9e98 2b				dec hl 
9e99 3e 00			ld a,0 
9e9b 77				ld (hl), a 
9e9c 23				inc hl 
9e9d 18 e7			jr .cptoken2 
9e9f				 
9e9f			 
9e9f			.cptokenstr2: 
9e9f				; skip all white space until either eol (because forgot to term) or end double quote 
9e9f			        ;   if double quotes spotted ensure to skip any space sep until matched doble quote 
9e9f				;inc hl ; skip current double quote 
9e9f 7e				ld a,(hl) 
9ea0 23				inc hl 
9ea1 fe 22			cp '"' 
9ea3 28 e1			jr z, .cptoken2 
9ea5 fe 7f			cp FORTH_END_BUFFER 
9ea7 28 0c			jr z, .cptokendone2 
9ea9 fe 00			cp 0 
9eab 28 08			jr z, .cptokendone2 
9ead fe 20			cp ' ' 
9eaf 28 02			jr z, .cptmp2 
9eb1 18 ec			jr .cptokenstr2 
9eb3			 
9eb3			.cptmp2:	; we have a space so change to zero term for dict match later 
9eb3				;dec hl 
9eb3				;ld a,"-"	; TODO remove this when working 
9eb3				;ld (hl), a 
9eb3				;inc hl 
9eb3 18 ea			jr .cptokenstr2 
9eb5			 
9eb5			.cptokendone2: 
9eb5				;inc hl 
9eb5 3e 7f			ld a, FORTH_END_BUFFER 
9eb7 77				ld (hl),a 
9eb8			;	inc hl 
9eb8			;	ld a, '!' 
9eb8			;	ld (hl),a 
9eb8			 
9eb8 2a bc e5			ld hl,(os_tok_ptr) 
9ebb			         
9ebb			if DEBUG_FORTH_TOK 
9ebb						DMARK "Tc1" 
9ebb				CALLMONITOR 
9ebb			endif 
9ebb			 
9ebb				; push exec string to top of return stack 
9ebb				FORTH_RSP_NEXT 
9ebb cd 2c 9a			call macro_forth_rsp_next 
9ebe				endm 
# End of macro FORTH_RSP_NEXT
9ebe c9				ret 
9ebf			 
9ebf			; Another go at the parser need to simplify the process 
9ebf			 
9ebf			forthparse: 
9ebf			 
9ebf			; 
9ebf			; line parse: 
9ebf			;       parse raw input buffer 
9ebf			;       tokenise the words 
9ebf			;       malloc new copy (for looping etc) 
9ebf			;       copy to malloc + current pc in line to start of string and add line term 
9ebf			;       save on new rsp 
9ebf			; 
9ebf			 
9ebf			; hl to point to the line to tokenise 
9ebf			 
9ebf			;	push hl 
9ebf 22 bc e5			ld (os_tok_ptr), hl  ; save ptr to string 
9ec2			 
9ec2			;	ld a,0		; string term on input 
9ec2			;	call strlent 
9ec2			 
9ec2			;	ld (os_tok_len), hl	 ; save string length 
9ec2			 
9ec2			;if DEBUG_FORTH_TOK 
9ec2			;	ex de,hl		 
9ec2			;endif 
9ec2			 
9ec2			;	pop hl 		; get back string pointer 
9ec2			 
9ec2			if DEBUG_FORTH_TOK 
9ec2						DMARK "TOK" 
9ec2				CALLMONITOR 
9ec2			endif 
9ec2 7e			.ptoken2:    ld a,(hl) 
9ec3 23				inc hl 
9ec4 fe 7f			cp FORTH_END_BUFFER 
9ec6 28 29			jr z, .ptokendone2 
9ec8 fe 00			cp 0 
9eca 28 25			jr z, .ptokendone2 
9ecc fe 22			cp '"' 
9ece 28 0b			jr z, .ptokenstr2     ; will want to skip until end of string delim 
9ed0 fe 20			cp ' ' 
9ed2 20 ee			jr nz,  .ptoken2 
9ed4			 
9ed4			; TODO consume comments held between ( and ) 
9ed4			 
9ed4				; we have a space so change to zero term for dict match later 
9ed4 2b				dec hl 
9ed5 3e 00			ld a,0 
9ed7 77				ld (hl), a 
9ed8 23				inc hl 
9ed9 18 e7			jr .ptoken2 
9edb				 
9edb			 
9edb			.ptokenstr2: 
9edb				; skip all white space until either eol (because forgot to term) or end double quote 
9edb			        ;   if double quotes spotted ensure to skip any space sep until matched doble quote 
9edb				;inc hl ; skip current double quote 
9edb 7e				ld a,(hl) 
9edc 23				inc hl 
9edd fe 22			cp '"' 
9edf 28 e1			jr z, .ptoken2 
9ee1 fe 7f			cp FORTH_END_BUFFER 
9ee3 28 0c			jr z, .ptokendone2 
9ee5 fe 00			cp 0 
9ee7 28 08			jr z, .ptokendone2 
9ee9 fe 20			cp ' ' 
9eeb 28 02			jr z, .ptmp2 
9eed 18 ec			jr .ptokenstr2 
9eef			 
9eef			.ptmp2:	; we have a space so change to zero term for dict match later 
9eef				;dec hl 
9eef				;ld a,"-"	; TODO remove this when working 
9eef				;ld (hl), a 
9eef				;inc hl 
9eef 18 ea			jr .ptokenstr2 
9ef1			 
9ef1			.ptokendone2: 
9ef1				;inc hl 
9ef1 3e 7f			ld a, FORTH_END_BUFFER 
9ef3 77				ld (hl),a 
9ef4			;	inc hl 
9ef4			;	ld a, '!' 
9ef4			;	ld (hl),a 
9ef4			 
9ef4 2a bc e5			ld hl,(os_tok_ptr) 
9ef7			         
9ef7			if DEBUG_FORTH_TOK 
9ef7						DMARK "TK1" 
9ef7				CALLMONITOR 
9ef7			endif 
9ef7			 
9ef7				; push exec string to top of return stack 
9ef7				FORTH_RSP_NEXT 
9ef7 cd 2c 9a			call macro_forth_rsp_next 
9efa				endm 
# End of macro FORTH_RSP_NEXT
9efa c9				ret 
9efb			 
9efb			; 
9efb			;	; malloc size + buffer pointer + if is loop flag 
9efb			;	ld hl,(os_tok_len) 		 ; get string length 
9efb			; 
9efb			;	ld a,l 
9efb			; 
9efb			;	cp 0			; we dont want to use a null string 
9efb			;	ret z 
9efb			; 
9efb			;;	add 3    ; prefix malloc with buffer for current word ptr 
9efb			; 
9efb			;	add 5     ; TODO when certain not over writing memory remove 
9efb			; 
9efb			;		 
9efb			; 
9efb			;if DEBUG_FORTH_TOK 
9efb			;			DMARK "TKE" 
9efb			;	CALLMONITOR 
9efb			;endif 
9efb			; 
9efb			;	ld l,a 
9efb			;	ld h,0 
9efb			;;	push hl   ; save required space for the copy later 
9efb			;	call malloc 
9efb			;if DEBUG_FORTH_TOK 
9efb			;			DMARK "TKM" 
9efb			;	CALLMONITOR 
9efb			;endif 
9efb			;	if DEBUG_FORTH_MALLOC_GUARD 
9efb			;		push af 
9efb			;		call ishlzero 
9efb			;;		ld a, l 
9efb			;;		add h 
9efb			;;		cp 0 
9efb			;		pop af 
9efb			;		 
9efb			;		call z,malloc_error 
9efb			;	endif 
9efb			;	ld (os_tok_malloc), hl	 ; save malloc ptr 
9efb			; 
9efb			; 
9efb			;if DEBUG_FORTH_TOK 
9efb			;			DMARK "TKR" 
9efb			;	CALLMONITOR 
9efb			;endif 
9efb			; 
9efb			;	FORTH_RSP_NEXT 
9efb			; 
9efb			;	;inc hl	 ; go past current buffer pointer 
9efb			;	;inc hl 
9efb			;	;inc hl   ; and past if loop flag 
9efb			;		; TODO Need to set flag  
9efb			; 
9efb			;	 
9efb			;	 
9efb			;	ex de,hl	; malloc is dest 
9efb			;	ld hl, (os_tok_len) 
9efb			;;	pop bc 
9efb			;	ld c, l                
9efb			;	ld b,0 
9efb			;	ld hl, (os_tok_ptr) 
9efb			; 
9efb			;if DEBUG_FORTH_TOK 
9efb			;			DMARK "TKT" 
9efb			;	CALLMONITOR 
9efb			;endif 
9efb			; 
9efb			;	; do str cpy 
9efb			; 
9efb			;	ldir      ; copy byte in hl to de 
9efb			; 
9efb			;	; set end of buffer to high bit on zero term and use that for end of buffer scan 
9efb			; 
9efb			;if DEBUG_FORTH_TOK 
9efb			; 
9efb			;			DMARK "TKY" 
9efb			;	CALLMONITOR 
9efb			;endif 
9efb			;	;ld a,0 
9efb			;	;ld a,FORTH_END_BUFFER 
9efb			;	ex de, hl 
9efb			;	;dec hl			 ; go back over the space delim at the end of word 
9efb			;	;ld (hl),a 
9efb			;	;inc hl                    ;  TODO double check this. Going past the end of string to make sure end of processing buffer is marked 
9efb			;	ld a,FORTH_END_BUFFER 
9efb			;	ld (hl),a 
9efb			;	inc hl 
9efb			;	ld a,FORTH_END_BUFFER 
9efb			;	ld (hl),a 
9efb			; 
9efb			;	; init the malloc area data 
9efb			;	; set pc for in current area 
9efb			;	;ld hl, (os_tok_malloc) 
9efb			;	;inc hl 
9efb			;	;inc hl 
9efb			;	;inc hl 
9efb			;	;ex de,hl 
9efb			;	;ld hl, (os_tok_malloc) 
9efb			;	;ld (hl),e 
9efb			;	;inc hl 
9efb			;	;ld (hl),d 
9efb			; 
9efb			; 
9efb			;	ld hl,(os_tok_malloc) 
9efb			;if DEBUG_FORTH_PARSE_KEY 
9efb			;			DMARK "TKU" 
9efb			;	CALLMONITOR 
9efb			;endif 
9efb			; 
9efb			;	ret 
9efb			 
9efb			forthexec: 
9efb			 
9efb			; line exec: 
9efb			; forth parser 
9efb			 
9efb			; 
9efb			;       get current exec line on rsp 
9efb			 
9efb				FORTH_RSP_TOS 
9efb cd 43 9a			call macro_forth_rsp_tos 
9efe				endm 
# End of macro FORTH_RSP_TOS
9efe			 
9efe			;       restore current pc - hl points to malloc of data 
9efe			 
9efe				;ld e, (hl) 
9efe				;inc hl 
9efe				;ld d, (hl) 
9efe				;ex de,hl 
9efe			 
9efe			 
9efe			exec1: 
9efe 22 bc e5			ld (os_tok_ptr), hl                 ; here move out of repeated saving in this tight loop 
9f01			 
9f01				; copy our PC to working vars  
9f01 22 3a ea			ld (cli_ptr), hl                    ; here 
9f04 22 38 ea			ld (cli_origptr), hl                ; here 
9f07			 
9f07 7e				ld a,(hl)                           ; here make hl be the ram ptr 
9f08 fe 7f			cp FORTH_END_BUFFER 
9f0a c8				ret z 
9f0b			 
9f0b				; skip any nulls 
9f0b			 
9f0b fe 00			cp 0 
9f0d 20 03			jr nz, .execword 
9f0f 23				inc hl 
9f10 18 ec			jr exec1 
9f12			 
9f12			 
9f12			.execword: 
9f12			 
9f12			 
9f12			 
9f12			if DEBUG_FORTH_PARSE_EXEC 
9f12						DMARK "KYQ" 
9f12				CALLMONITOR 
9f12			endif 
9f12			;       while at start of word: 
9f12			; get start of dict (in user area first) 
9f12			 
9f12 21 b6 e0		ld hl, baseram 
9f15			;ld hl, sysdict 
9f15 22 3c ea		ld (cli_nextword),hl                            ; here do we need to do this? 
9f18			;           match word at pc 
9f18			;           exec word 
9f18			;           or push to dsp 
9f18			;           forward to next token 
9f18			;           if line term pop rsp and exit 
9f18			;        
9f18			 
9f18			if DEBUG_FORTH_PARSE_EXEC 
9f18						DMARK "KYq" 
9f18				CALLMONITOR 
9f18			endif 
9f18			 
9f18			; 
9f18			; word comp 
9f18			;    get compiled byte and save it (need to decide if code is compiled or not for comparison) 
9f18			;    if byte is 0 then end parsing and report failed lookup (or could be something to add to stack etc) 
9f18			;    move to start of word  
9f18			;    compare word to cli_token 
9f18			 
9f18			.execpnword:	; HL at start of a word in the dictionary to check 
9f18			 
9f18 2a 3c ea			ld hl,(cli_nextword)                  ; here remove the need to store???? 
9f1b			 
9f1b cd b2 9f			call forth_tok_next 
9f1e			; tok next end here 
9f1e 22 3c ea			ld (cli_nextword), hl     ; save for next check if no match on this word 
9f21 eb				ex de, hl 
9f22			 
9f22			 
9f22				; save the pointer of the current token - 1 to check against 
9f22				 
9f22 22 40 ea			ld (cli_token), hl   
9f25				; TODO maybe remove below save if no debug 
9f25				; save token string ptr for any debug later 
9f25 23				inc hl  
9f26 22 42 ea			ld (cli_origtoken), hl 
9f29 2b				dec hl 
9f2a				; save pointer to the start of the next dictionay word 
9f2a 7e				ld a,(hl)   ; get string length 
9f2b 47				ld b,a 
9f2c			.execpnwordinc:  
9f2c 23				inc hl 
9f2d 10 fd			djnz .execpnwordinc 
9f2f 22 3e ea			ld (cli_execword), hl      ; save start of this words code 
9f32			 
9f32				; now check the word token against the string being parsed 
9f32			 
9f32 2a 40 ea			ld hl,(cli_token) 
9f35 23				inc hl     ; skip string length (use zero term instead to end) 
9f36				;ld (cli_token), hl 
9f36			 
9f36			.execpnchar:    ; compare char between token and string to parse 
9f36			 
9f36			 
9f36				;ld hl, (cli_token)     ; the dict word  
9f36 ed 5b 3a ea		ld de, (cli_ptr)     ; cli to parse 
9f3a			 
9f3a			 
9f3a			.execpncharl:    ; compare char between token and string to parse (loop) 
9f3a			 
9f3a 1a				ld a,(de) 
9f3b cd 47 90			call toUpper 		; make sure the input string matches case 
9f3e be				cp (hl) 
9f3f			 
9f3f c2 58 9f			jp nz, .execpnskipword	 ; no match so move to next word 
9f42				 
9f42			;    if same 
9f42			;       scan for string terms 0 for token and 32 for input 
9f42 46				ld b,(hl) 
9f43 80				add b			 
9f44 23				inc hl 
9f45 13				inc de 
9f46 fe 00			cp 0			 ; add both chars together, if 32 then other must be 0 so at end of string we are parsing? 
9f48							; TODO need to make sure last word in zero term string is accounted for 
9f48 20 f0			jr nz, .execpncharl 		 ; not at end of strings yet 
9f4a			 
9f4a			 
9f4a				; at end of both strings so both are exact match 
9f4a			 
9f4a			;       skip ptr for next word 
9f4a			 
9f4a 2a 3a ea			ld hl,(cli_ptr) 	; at input string term 
9f4d 23				inc hl			 ; at next char 
9f4e 22 3a ea			ld (cli_ptr), hl     ; save for next round of the parser 
9f51 22 38 ea			ld (cli_origptr), hl     ; save for any restart of current string ie a number or string to push to data stack 
9f54				 
9f54				 
9f54			 
9f54			 
9f54			 
9f54			;       exec code block 
9f54			if DEBUG_FORTH_JP 
9f54				call clear_display 
9f54				call update_display 
9f54				call delay1s 
9f54				ld hl, (cli_execword)     ; save for next check if no match on this word 
9f54				ld a,h 
9f54				ld hl, os_word_scratch 
9f54				call hexout 
9f54				ld hl, (cli_execword)     ; save for next check if no match on this word 
9f54				ld a,l 
9f54				ld hl, os_word_scratch+2 
9f54				call hexout 
9f54				ld hl, os_word_scratch+4 
9f54				ld a,0 
9f54				ld (hl),a 
9f54				ld de,os_word_scratch 
9f54				call str_at_display 
9f54					ld a, display_row_2 
9f54					call str_at_display 
9f54				ld de, (cli_origtoken) 
9f54				ld a, display_row_1+10 
9f54					call str_at_display 
9f54			 
9f54				ld a,display_row_1 
9f54				ld de, .foundword 
9f54				ld a, display_row_3 
9f54				call str_at_display 
9f54				call update_display 
9f54				call delay1s 
9f54				call delay1s 
9f54				call delay1s 
9f54			endif 
9f54			 
9f54			if DEBUG_FORTH_PARSE_EXEC 
9f54						DMARK "KYj" 
9f54			endif 
9f54				; TODO save the word pointer in this exec 
9f54			 
9f54 2a 3e ea			ld hl,(cli_execword) 
9f57 e9				jp (hl) 
9f58			 
9f58			 
9f58			;    if not same 
9f58			;	scan for zero term 
9f58			;	get ptr for next word 
9f58			;	goto word comp 
9f58			 
9f58			.execpnskipword:	; get pointer to next word 
9f58 2a 3c ea			ld hl,(cli_nextword) 
9f5b			 
9f5b 7e				ld a,(hl) 
9f5c fe 00			cp WORD_SYS_END 
9f5e			;	cp 0 
9f5e 28 09			jr z, .execendofdict			 ; at end of words 
9f60			 
9f60			if DEBUG_FORTH_PARSE_EXEC 
9f60						DMARK "KY4" 
9f60			endif 
9f60			if DEBUG_FORTH_PARSE_EXEC 
9f60			 
9f60				; see if disabled 
9f60			 
9f60			;	ld a, (os_view_disable) 
9f60			;	cp '*' 
9f60				ld a,(debug_vector) 
9f60				cp $c9   ; RET 
9f60				jr z, .noskip 
9f60			 
9f60			 
9f60				ld de, .nowordfound 
9f60				ld a, display_row_3 
9f60				call str_at_display 
9f60				call update_display 
9f60				ld a, 100 
9f60				call aDelayInMS 
9f60				 
9f60				if DEBUG_FORTH_PARSE_EXEC_SLOW 
9f60					call delay250ms 
9f60				endif 
9f60			.noskip:  
9f60			 
9f60			endif	 
9f60			 
9f60 2a 38 ea			ld hl,(cli_origptr) 
9f63 22 3a ea			ld (cli_ptr),hl 
9f66			 
9f66			if DEBUG_FORTH_PARSE_EXEC 
9f66						DMARK "KY5" 
9f66			endif 
9f66 c3 18 9f			jp .execpnword			; else go to next word 
9f69			 
9f69			.execendofdict:  
9f69			 
9f69			if DEBUG_FORTH_PARSE_EXEC 
9f69						DMARK "KYe" 
9f69			endif 
9f69			if DEBUG_FORTH_PARSE_EXEC 
9f69				; see if disabled 
9f69			 
9f69			;	ld a, (os_view_disable) 
9f69			;	cp '*' 
9f69				ld a,(debug_vector) 
9f69				cp $c9   ; ret 
9f69				jr z, .ispskip 
9f69			 
9f69				call clear_display 
9f69				call update_display 
9f69				call delay1s 
9f69				ld de, (cli_origptr) 
9f69				ld a, display_row_1 
9f69				call str_at_display 
9f69				 
9f69				ld de, .enddict 
9f69				ld a, display_row_3 
9f69				call str_at_display 
9f69				call update_display 
9f69				ld a, 100 
9f69				call aDelayInMS 
9f69				if DEBUG_FORTH_PARSE_EXEC_SLOW 
9f69				call delay1s 
9f69				call delay1s 
9f69				call delay1s 
9f69				endif 
9f69			.ispskip:  
9f69				 
9f69			endif	 
9f69			 
9f69			 
9f69			 
9f69				; if the word is not a keyword then must be a literal so push it to stack 
9f69			 
9f69			; push token to stack to end of word 
9f69			 
9f69				STACKFRAME ON $1efe $2f9f 
9f69				if DEBUG_STACK_IMB 
9f69					if ON 
9f69						exx 
9f69						ld de, $1efe 
9f69						ld a, d 
9f69						ld hl, curframe 
9f69						call hexout 
9f69						ld a, e 
9f69						ld hl, curframe+2 
9f69						call hexout 
9f69						ld hl, $1efe 
9f69						push hl 
9f69						ld hl, $2f9f 
9f69						push hl 
9f69						exx 
9f69					endif 
9f69				endif 
9f69			endm 
# End of macro STACKFRAME
9f69			 
9f69 2a bc e5		ld hl,(os_tok_ptr) 
9f6c cd ee 9b		call forth_apush 
9f6f			 
9f6f				STACKFRAMECHK ON $1efe $2f9f 
9f6f				if DEBUG_STACK_IMB 
9f6f					if ON 
9f6f						exx 
9f6f						ld hl, $2f9f 
9f6f						pop de   ; $2f9f 
9f6f						call cmp16 
9f6f						jr nz, .spnosame 
9f6f						ld hl, $1efe 
9f6f						pop de   ; $1efe 
9f6f						call cmp16 
9f6f						jr z, .spfrsame 
9f6f						.spnosame: call showsperror 
9f6f						.spfrsame: nop 
9f6f						exx 
9f6f					endif 
9f6f				endif 
9f6f			endm 
# End of macro STACKFRAMECHK
9f6f			 
9f6f			execnext: 
9f6f			 
9f6f			if DEBUG_FORTH_PARSE_EXEC 
9f6f						DMARK "KY>" 
9f6f			endif 
9f6f			; move past token to next word 
9f6f			 
9f6f 2a bc e5		ld hl, (os_tok_ptr) 
9f72 3e 00		ld a, 0 
9f74 01 ff 00		ld bc, 255     ; input buffer size 
9f77 ed b1		cpir 
9f79			 
9f79			if DEBUG_FORTH_PARSE_EXEC 
9f79						DMARK "KY!" 
9f79				CALLMONITOR 
9f79			endif	 
9f79			; TODO this might place hl on the null, so will need to forward on??? 
9f79			;inc hl   ; see if this gets onto the next item 
9f79			 
9f79			 
9f79			; TODO pass a pointer to the buffer to push 
9f79			; TODO call function to push 
9f79			 
9f79			; look for end of input 
9f79			 
9f79			;inc hl 
9f79			;ld a,(hl) 
9f79			;cp FORTH_END_BUFFER 
9f79			;ret z 
9f79			 
9f79			 
9f79 c3 fe 9e		jp exec1 
9f7c			 
9f7c			 
9f7c			 
9f7c			 
9f7c			 
9f7c			 
9f7c			 
9f7c			 
9f7c			 
9f7c			findnexttok: 
9f7c			 
9f7c				; hl is pointer to move 
9f7c				; de is the token to locate 
9f7c			 
9f7c					if DEBUG_FORTH 
9f7c						DMARK "NTK" 
9f7c						CALLMONITOR 
9f7c					endif 
9f7c d5				push de 
9f7d			 
9f7d			.fnt1:	 
9f7d				; find first char of token to locate 
9f7d			 
9f7d 1a				ld a, (de) 
9f7e 4f				ld c,a 
9f7f 7e				ld a,(hl) 
9f80 cd 47 90			call toUpper 
9f83					if DEBUG_FORTH 
9f83						DMARK "NT1" 
9f83						CALLMONITOR 
9f83					endif 
9f83 b9				cp c 
9f84			 
9f84 28 03			jr z, .fnt2cmpmorefirst	 
9f86			 
9f86				; first char not found move to next char 
9f86			 
9f86 23				inc hl 
9f87 18 f4			jr .fnt1 
9f89			 
9f89			.fnt2cmpmorefirst:	 
9f89				; first char of token found.  
9f89			 
9f89 e5				push hl     ; save start of token just in case it is the right one 
9f8a d9				exx 
9f8b e1				pop hl        ; save it to hl' 
9f8c d9				exx 
9f8d			 
9f8d			 
9f8d			.fnt2cmpmore:	 
9f8d				; compare the rest 
9f8d				 
9f8d 23				inc hl 
9f8e 13				inc de 
9f8f				 
9f8f 1a				ld a, (de) 
9f90 4f				ld c,a 
9f91 7e				ld a,(hl) 
9f92 cd 47 90			call toUpper 
9f95			 
9f95					if DEBUG_FORTH 
9f95						DMARK "NT2" 
9f95						CALLMONITOR 
9f95					endif 
9f95				; c has the token to find char 
9f95				; a has the mem to scan char 
9f95			 
9f95 b9				cp c 
9f96 28 04			jr z,.fntmatch1 
9f98			 
9f98				; they are not the same 
9f98			 
9f98					if DEBUG_FORTH 
9f98						DMARK "NT3" 
9f98						CALLMONITOR 
9f98					endif 
9f98 d1				pop de	; reset de token to look for 
9f99 d5				push de 
9f9a 18 e1			jr .fnt1 
9f9c				 
9f9c			.fntmatch1: 
9f9c			 
9f9c				; is the same char a null which means we might have a full hit? 
9f9c					if DEBUG_FORTH 
9f9c						DMARK "NT4" 
9f9c						CALLMONITOR 
9f9c					endif 
9f9c			 
9f9c fe 00			cp 0 
9f9e 28 0b			jr z, .fntmatchyes 
9fa0			 
9fa0				; are we at the end of the token to find? 
9fa0			 
9fa0					if DEBUG_FORTH 
9fa0						DMARK "NT5" 
9fa0						CALLMONITOR 
9fa0					endif 
9fa0 3e 00			ld a, 0 
9fa2 b9				cp c 
9fa3			 
9fa3 c2 8d 9f			jp nz, .fnt2cmpmore    ; no, so keep going to a direct hit 
9fa6			 
9fa6					if DEBUG_FORTH 
9fa6						DMARK "NT6" 
9fa6						CALLMONITOR 
9fa6					endif 
9fa6				; token to find is exhusted but no match to stream 
9fa6			 
9fa6				; restore tok pointer and continue on 
9fa6 d1				pop de 
9fa7 d5				push de 
9fa8 c3 7d 9f			jp .fnt1 
9fab			 
9fab			 
9fab			.fntmatchyes: 
9fab			 
9fab				; hl now contains the end of the found token 
9fab			 
9fab				; get rid of saved token pointer to find 
9fab			 
9fab d1				pop de 
9fac			 
9fac					if DEBUG_FORTH 
9fac						DMARK "NT9" 
9fac						CALLMONITOR 
9fac					endif 
9fac			 
9fac				; hl will be on the null term so forward on 
9fac			 
9fac				; get back the saved start of the token 
9fac			 
9fac d9				exx 
9fad e5				push hl     ; save start of token just in case it is the right one 
9fae d9				exx 
9faf e1				pop hl        ; save it to hl 
9fb0			 
9fb0 c9				ret 
9fb1			 
9fb1			 
9fb1			; LIST needs to find a specific token   
9fb1			; FORGET needs to find a spefici token 
9fb1			 
9fb1			; SAVE needs to find all tokens by flag 
9fb1			; WORDS just needs to scan through all  by flag 
9fb1			; UWORDS needs to scan through all by flag 
9fb1			 
9fb1			 
9fb1			; given hl as pointer to start of dict look up string 
9fb1			; return hl as pointer to start of word block 
9fb1			; or 0 if not found 
9fb1			 
9fb1			forth_find_tok: 
9fb1 c9				ret 
9fb2			 
9fb2			; given hl as pointer to dict structure 
9fb2			; move to the next dict block structure 
9fb2			 
9fb2			forth_tok_next: 
9fb2				; hl now points to the address of the next word pointer  
9fb2				; TODO skip compiled symbol for now 
9fb2			;	push de 
9fb2 23				inc hl 
9fb3 5e				ld e, (hl) 
9fb4 23				inc hl 
9fb5 56				ld d, (hl) 
9fb6 23				inc hl 
9fb7			 
9fb7 eb				ex de,hl 
9fb8			if DEBUG_FORTH_PARSE_NEXTWORD 
9fb8				push bc 
9fb8				ld bc, (cli_nextword) 
9fb8						DMARK "NXW" 
9fb8				CALLMONITOR 
9fb8				pop bc 
9fb8			endif 
9fb8			;	pop de	 
9fb8 c9				ret 
9fb9			 
9fb9			 
9fb9			 
9fb9			; eof 
# End of file forth_parserv6.asm
9fb9				include "forth_wordsv4.asm" 
9fb9			 
9fb9			; the core word dictionary v4 
9fb9			; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Notation.html#Notation 
9fb9			 
9fb9			; this is a linked list for each of the system words used 
9fb9			; user defined words will follow the same format but will be in ram 
9fb9			 
9fb9			 
9fb9			; 
9fb9			; 
9fb9			; define linked list: 
9fb9			; 
9fb9			; 1. compiled byte op code 
9fb9			; 2. len of text word 
9fb9			; 3. text word 
9fb9			; 4. ptr to next dictionary word 
9fb9			; 5. asm, calls etc for the word 
9fb9			; 
9fb9			;  if 1 == 0 then last word in dict  
9fb9			;   
9fb9			; set the start of dictionary scanning to be in ram and the last word point to the system dict 
9fb9			;  
9fb9			;  
9fb9			; create basic standard set of words 
9fb9			; 
9fb9			;  
9fb9			; + - / * DUP EMIT . SWAP IF..THEN..ELSE DO..LOOP  : ; DROP  
9fb9			; 2DUP 2DROP 2SWAP  
9fb9			; @ C@ - get byte  
9fb9			; ! C! - store byte 
9fb9			; 0< true if less than zero 
9fb9			; 0= true if zero 
9fb9			; < >  
9fb9			; = true if same 
9fb9			; variables 
9fb9			 
9fb9			 
9fb9			; Hardware specific words I may need 
9fb9			; 
9fb9			; IN OUT  
9fb9			; calls to key util functions 
9fb9			; calls to hardward abstraction stuff 
9fb9			; easy control of frame buffers and lcd i/o 
9fb9			; keyboard  
9fb9			 
9fb9			 
9fb9			;DICT: macro 
9fb9			; op_code, len, word, next 
9fb9			;    word: 
9fb9			;    db op_code 
9fb9			;    ds word zero term 
9fb9			;    dw next 
9fb9			;    endm 
9fb9			 
9fb9			 
9fb9			 
9fb9			 
9fb9			; op code 1 is a flag for user define words which are to be handled differently 
9fb9			 
9fb9			 
9fb9			; 
9fb9			; 
9fb9			;    TODO on entry to a word this should be the expected environment 
9fb9			;    hl - tos value if number then held, if string this is the ptr 
9fb9			;    de -  
9fb9			 
9fb9			 
9fb9			; opcode ranges 
9fb9			; 0 - end of word dict 
9fb9			; 255 - user define words 
9fb9			 
9fb9			sysdict: 
9fb9			include "forth_opcodes.asm" 
9fb9			; op codes for forth keywords 
9fb9			 
9fb9			; Changing use of opcodes to flag is the word exists in compiled form or not.  
9fb9			; This provides a means to compile uwords if required for higher performance 
9fb9			; by avoiding the use of the keyword parser and just jumping directly to the code 
9fb9			; Actually there is already a flag for if the code exists as binary thinking about it... 
9fb9			 
9fb9			 
9fb9			 
9fb9			 
9fb9			 
9fb9			; free to use code 0  
9fb9				OPCODE_HEAP: equ  1 
9fb9				OPCODE_EXEC: equ 2 
9fb9				OPCODE_DUP: equ 3 
9fb9				OPCODE_SWAP: equ 4 
9fb9				OPCODE_COLN: equ 5 
9fb9				OPCODE_SCOLN: equ 6 
9fb9				OPCODE_DROP: equ 7 
9fb9				OPCODE_DUP2: equ 8 
9fb9				OPCODE_DROP2: equ 9 
9fb9				OPCODE_SWAP2: equ 10 
9fb9				OPCODE_AT: equ 11 
9fb9				OPCODE_CAT: equ 12 
9fb9				OPCODE_BANG: equ 13 
9fb9				OPCODE_CBANG: equ 14 
9fb9				OPCODE_SCALL: equ 15 
9fb9				OPCODE_DEPTH: equ 16 
9fb9				OPCODE_OVER: equ 17 
9fb9				OPCODE_PAUSE: equ 18 
9fb9				OPCODE_PAUSES: equ 19 
9fb9				OPCODE_ROT: equ 20 
9fb9			;free to reuse	OPCODE_WORDS: equ 21 
9fb9			        OPCODE_NOT: equ 21 
9fb9				OPCODE_UWORDS: equ 22 
9fb9				OPCODE_BP: equ 23 
9fb9				OPCODE_MONITOR: equ 24  
9fb9				OPCODE_MALLOC: equ 25 
9fb9				OPCODE_FREE: equ 26 
9fb9				OPCODE_LIST: equ 27 
9fb9				OPCODE_FORGET: equ 28 
9fb9				OPCODE_NOP: equ 29 
9fb9				OPCODE_COMO: equ 30 
9fb9				OPCODE_COMC: equ 31 
9fb9			;free to reuse	OPCODE_ENDCORE: equ 32 
9fb9				OPCODE_AFTERSOUND: equ 33 
9fb9				OPCODE_GP2: equ 34 
9fb9				OPCODE_GP3: equ 35 
9fb9				OPCODE_GP4: equ 36 
9fb9				OPCODE_SIN: equ 37 
9fb9				OPCODE_SOUT: equ 38 
9fb9				OPCODE_SPIO: equ 39 
9fb9				OPCODE_SPICEH: equ 40 
9fb9				OPCODE_SPIOb: equ 41 
9fb9				OPCODE_SPII: equ 42 
9fb9				OPCODE_SESEL: equ 43 
9fb9				OPCODE_CARTDEV: equ 44 
9fb9			; free to reuse	OPCODE_ENDDEVICE: equ 45 
9fb9				OPCODE_FB: equ 46 
9fb9				OPCODE_EMIT: equ 47 
9fb9				OPCODE_DOTH: equ 48 
9fb9				OPCODE_DOTF: equ 49 
9fb9				OPCODE_DOT: equ 50 
9fb9				OPCODE_CLS: equ 51 
9fb9				OPCODE_DRAW: equ 52 
9fb9				OPCODE_DUMP: equ 53 
9fb9				OPCODE_CDUMP: equ 54 
9fb9				OPCODE_DAT: equ 55 
9fb9				OPCODE_HOME: equ 56 
9fb9				OPCODE_SPACE: equ 57 
9fb9				OPCODE_SPACES: equ 58 
9fb9				OPCODE_SCROLL: equ 59 
9fb9				OPCODE_ATQ: equ 60 
9fb9				OPCODE_AUTODSP: equ 61 
9fb9				OPCODE_MENU: equ 62 
9fb9			; free to reuse	OPCODE_ENDDISPLAY: equ 63  
9fb9				OPCODE_THEN: equ 64 
9fb9				OPCODE_ELSE: equ 65 
9fb9				OPCODE_DO: equ 66 
9fb9				OPCODE_LOOP: equ 67 
9fb9				OPCODE_I: equ 68 
9fb9				OPCODE_DLOOP: equ 69  
9fb9				OPCODE_REPEAT: equ 70  
9fb9				OPCODE_UNTIL: equ 71 
9fb9				OPCODE_ENDFLOW: equ 72 
9fb9				OPCODE_WAITK: equ 73 
9fb9				OPCODE_ACCEPT: equ 74 
9fb9				OPCODE_EDIT: equ 75 
9fb9			;free to reuse	OPCODE_ENDKEY: equ 76 
9fb9				OPCODE_LZERO: equ 77 
9fb9				OPCODE_TZERO: equ 78 
9fb9				OPCODE_LESS: equ 79 
9fb9				OPCODE_GT: equ 80 
9fb9				OPCODE_EQUAL: equ 81  
9fb9			;free to reuse	OPCODE_ENDLOGIC: equ 82 
9fb9				OPCODE_NEG: equ 83 
9fb9				OPCODE_DIV: equ 84 
9fb9				OPCODE_MUL: equ 85 
9fb9				OPCODE_MIN: equ 86 
9fb9				OPCODE_MAX: equ 87 
9fb9				OPCODE_RND16: equ 88 
9fb9				OPCODE_RND8: equ 89 
9fb9				OPCODE_RND: equ 90 
9fb9			;free to reuse	OPCODE_ENDMATHS: equ 91  
9fb9				OPCODE_BYNAME: equ 92 
9fb9				OPCODE_DIR: equ 93 
9fb9				OPCODE_SAVE: equ 94 
9fb9				OPCODE_LOAD: equ 95 
9fb9				OPCODE_BSAVE: equ 96 
9fb9				OPCODE_BLOAD: equ 97 
9fb9				OPCODE_SEO: equ 98  
9fb9				OPCODE_SEI: equ 99 
9fb9				OPCODE_SFREE: equ 100 
9fb9				OPCODE_SIZE: equ 101 
9fb9				OPCODE_CREATE: equ 102 
9fb9				OPCODE_APPEND: equ 103 
9fb9				OPCODE_SDEL: equ 104 
9fb9				OPCODE_OPEN: equ 105 
9fb9				OPCODE_READ: equ 106 
9fb9				OPCODE_EOF: equ 106 
9fb9				OPCODE_FORMAT: equ 107 
9fb9				OPCODE_LABEL: equ 108 
9fb9				OPCODE_LABELS: equ 109 
9fb9			;free to reuse	OPCODE_ENDSTORAGE: equ 110  
9fb9				OPCODE_UPPER: equ 111 
9fb9				OPCODE_LOWER: equ 112 
9fb9				OPCODE_SUBSTR: equ 113 
9fb9				OPCODE_LEFT: equ 114 
9fb9				OPCODE_RIGHT: equ 115 
9fb9				OPCODE_STR2NUM: equ 116 
9fb9				OPCODE_NUM2STR: equ 117 
9fb9				OPCODE_CONCAT: equ 118 
9fb9				OPCODE_FIND: equ 119 
9fb9				OPCODE_LEN: equ 120 
9fb9				OPCODE_CHAR: equ 121 
9fb9			; free to reuse	OPCODE_STRLEN: equ 122 
9fb9			; free to reuse	OPCODE_ENDSTR: equ 123 
9fb9				OPCODE_V0S: equ 124 
9fb9				OPCODE_V0Q: equ 125 
9fb9				OPCODE_V1S: equ 126 
9fb9				OPCODE_V1Q: equ 127 
9fb9				OPCODE_V2S: equ 128 
9fb9				OPCODE_V2Q: equ 129 
9fb9				OPCODE_V3S: equ 130 
9fb9				OPCODE_V3Q: equ 131 
9fb9			;free to reuse	OPCODE_END: equ 132 
9fb9				OPCODE_ZDUP: equ 133 
9fb9			 
9fb9			; eof 
# End of file forth_opcodes.asm
9fb9			 
9fb9			include "forth_words_core.asm" 
9fb9			 
9fb9			; | ## Core Words 
9fb9			 
9fb9			;if MALLOC_4 
9fb9			 
9fb9			.HEAP: 
9fb9			CWHEAD .EXEC OPCODE_HEAP "HEAP" 4 WORD_FLAG_CODE 
9fb9 15				db WORD_SYS_CORE+OPCODE_HEAP             
9fba f8 9f			dw .EXEC            
9fbc 05				db 4 + 1 
9fbd .. 00			db "HEAP",0              
9fc2				endm 
# End of macro CWHEAD
9fc2			; | HEAP ( -- u1 u2 )   Pushes u1 the current number of bytes in the heap and u2 the remaining bytes - Only present if using my MALLOC | DONE 
9fc2			; | | u1 - Current number of bytes in the heap 
9fc2			; | | u2 - Remaining bytes left on the heap 
9fc2			; | |  
9fc2			; | | The heap is used for storing user defined words as well as any values pushed to stack. 
9fc2			 
9fc2			 
9fc2				if DEBUG_FORTH_WORDS_KEY 
9fc2					DMARK "HEP" 
9fc2 f5				push af  
9fc3 3a d7 9f			ld a, (.dmark)  
9fc6 32 65 ee			ld (debug_mark),a  
9fc9 3a d8 9f			ld a, (.dmark+1)  
9fcc 32 66 ee			ld (debug_mark+1),a  
9fcf 3a d9 9f			ld a, (.dmark+2)  
9fd2 32 67 ee			ld (debug_mark+2),a  
9fd5 18 03			jr .pastdmark  
9fd7 ..			.dmark: db "HEP"  
9fda f1			.pastdmark: pop af  
9fdb			endm  
# End of macro DMARK
9fdb					CALLMONITOR 
9fdb cd 6f ee			call debug_vector  
9fde				endm  
# End of macro CALLMONITOR
9fde				endif 
9fde 2a c0 e0			ld hl, (free_list )      
9fe1 11 c5 e0			ld de, heap_start 
9fe4			 
9fe4 ed 52			sbc hl, de  
9fe6			 
9fe6 cd 85 9a			call forth_push_numhl 
9fe9			 
9fe9			 
9fe9 ed 5b c0 e0		ld de, (free_list )      
9fed 21 96 e2			ld hl, heap_end 
9ff0			 
9ff0 ed 52			sbc hl, de 
9ff2			 
9ff2 cd 85 9a			call forth_push_numhl 
9ff5				 
9ff5			 
9ff5				 
9ff5			 
9ff5			 
9ff5			 
9ff5				NEXTW 
9ff5 c3 75 9e			jp macro_next 
9ff8				endm 
# End of macro NEXTW
9ff8			;endif 
9ff8			 
9ff8			.EXEC: 
9ff8			;	CWHEAD .STKEXEC OPCODE_EXEC "EXEC" 4 WORD_FLAG_CODE 
9ff8			;; > EXEC ( u -- )    Execs the string on TOS as a FORTH expression > CRASHES ON NEXTW 
9ff8			;; > > u - A qutoed string which can consist of any valid Forth expression excluding : defintions (use LOAD instead) 
9ff8			;; > > 
9ff8			;; > >   
9ff8			;	STACKFRAME OFF $5efe $5f9f 
9ff8			; 
9ff8			;		if DEBUG_FORTH_WORDS_KEY 
9ff8			;			DMARK "EXE" 
9ff8			;			CALLMONITOR 
9ff8			;		endif 
9ff8			; 
9ff8			;	FORTH_DSP_VALUEHL 
9ff8			; 
9ff8			;	FORTH_DSP_POP 
9ff8			; 
9ff8			;		if DEBUG_FORTH_WORDS 
9ff8			;			DMARK "EX1" 
9ff8			;			CALLMONITOR 
9ff8			;		endif 
9ff8			;;	ld e,(hl) 
9ff8			;;	inc hl 
9ff8			;;	ld d,(hl) 
9ff8			;;	ex de,hl 
9ff8			; 
9ff8			;;		if DEBUG_FORTH_WORDS 
9ff8			;;			DMARK "EX2" 
9ff8			;;			CALLMONITOR 
9ff8			;;		endif 
9ff8			;	push hl 
9ff8			; 
9ff8			;	;ld a, 0 
9ff8			;	;ld a, FORTH_END_BUFFER 
9ff8			;	call strlenz 
9ff8			;	inc hl   ; include zero term to copy 
9ff8			;	inc hl   ; include term 
9ff8			;	inc hl   ; include term 
9ff8			;	ld b,0 
9ff8			;	ld c,l 
9ff8			;	pop hl 
9ff8			;	ld de, execscratch 
9ff8			;		if DEBUG_FORTH_WORDS 
9ff8			;			DMARK "EX3" 
9ff8			;			CALLMONITOR 
9ff8			;		endif 
9ff8			;	ldir 
9ff8			; 
9ff8			; 
9ff8			;	ld hl, execscratch 
9ff8			; 
9ff8			;		if DEBUG_FORTH_WORDS 
9ff8			;			DMARK "EXe" 
9ff8			;			CALLMONITOR 
9ff8			;		endif 
9ff8			; 
9ff8			;	call forthparse 
9ff8			;	call forthexec 
9ff8			;;	call forthexec_cleanup 
9ff8			;;	call forthparse 
9ff8			;;	call forthexec 
9ff8			; 
9ff8			;	STACKFRAMECHK OFF $5efe $5f9f 
9ff8			; 
9ff8			;	; an immediate word so no need to process any more words 
9ff8			;	ret 
9ff8			;	NEXTW 
9ff8			 
9ff8			; dead code - old version  
9ff8			;	FORTH_RSP_NEXT 
9ff8			 
9ff8			;  
9ff8			;	ld bc,(cli_ptr)   ; move to next token to parse in the input stream 
9ff8			;	ld de,(cli_origptr)   ; move to next token to parse in the input stream 
9ff8			;	ld hl,(os_tok_ptr)   ; move to next token to parse in the input stream 
9ff8			;	push hl 
9ff8			;	push de 
9ff8			;	push bc 
9ff8			; 
9ff8			; 
9ff8			;		if DEBUG_FORTH_WORDS_KEY 
9ff8			;			DMARK "EXR" 
9ff8			;			CALLMONITOR 
9ff8			;		endif 
9ff8			; 
9ff8			; 
9ff8			; 
9ff8			;	;v5 FORTH_DSP_VALUE 
9ff8			;	FORTH_DSP_VALUEHL 
9ff8			; 
9ff8			;	; TODO do string type checks 
9ff8			; 
9ff8			;;v5	inc hl   ; skip type 
9ff8			; 
9ff8			;	push hl  ; source code  
9ff8			;		if DEBUG_FORTH_WORDS 
9ff8			;			DMARK "EX1" 
9ff8			;			CALLMONITOR 
9ff8			;		endif 
9ff8			;	ld a, 0 
9ff8			;	call strlent 
9ff8			; 
9ff8			;	inc hl 
9ff8			;	inc hl 
9ff8			;	inc hl 
9ff8			;	inc hl 
9ff8			; 
9ff8			;	push hl    ; size 
9ff8			; 
9ff8			;		if DEBUG_FORTH_WORDS 
9ff8			;			DMARK "EX2" 
9ff8			;			CALLMONITOR 
9ff8			;		endif 
9ff8			;	call malloc 
9ff8			; 
9ff8			;	ex de, hl    ; de now contains malloc area 
9ff8			;	pop bc   	; get byte count 
9ff8			;	pop hl      ; get string to copy 
9ff8			; 
9ff8			;	push de     ; save malloc for free later 
9ff8			; 
9ff8			;		if DEBUG_FORTH_WORDS 
9ff8			;			DMARK "EX3" 
9ff8			;			CALLMONITOR 
9ff8			;		endif 
9ff8			;	ldir       ; duplicate string 
9ff8			; 
9ff8			;	; at the end of the string so go back the three extra spaces and fill in with extra terms 
9ff8			;	 
9ff8			;	; TODO fix the parse would be better than this...  
9ff8			;	ex de, hl 
9ff8			;	dec hl 
9ff8			;	ld a, 0 
9ff8			;	ld (hl), a 
9ff8			;	dec hl 
9ff8			;	ld a, ' ' 
9ff8			;	ld (hl), a 
9ff8			;	dec hl 
9ff8			;	ld (hl), a 
9ff8			; 
9ff8			;	dec hl 
9ff8			;	ld (hl), a 
9ff8			; 
9ff8			; 
9ff8			;	FORTH_DSP_POP  
9ff8			; 
9ff8			;	pop hl     
9ff8			;	push hl    ; save malloc area 
9ff8			; 
9ff8			;		if DEBUG_FORTH_WORDS 
9ff8			;			DMARK "EX4" 
9ff8			;			CALLMONITOR 
9ff8			;		endif 
9ff8			; 
9ff8			;	call forthparse 
9ff8			;	call forthexec 
9ff8			;	 
9ff8			;	pop hl 
9ff8			;	if DEBUG_FORTH_WORDS 
9ff8			;		DMARK "EX5" 
9ff8			;		CALLMONITOR 
9ff8			;	endif 
9ff8			; 
9ff8			;	if FORTH_ENABLE_FREE 
9ff8			;	call free 
9ff8			;	endif 
9ff8			; 
9ff8			;	if DEBUG_FORTH_WORDS 
9ff8			;		DMARK "EX6" 
9ff8			;		CALLMONITOR 
9ff8			;	endif 
9ff8			; 
9ff8			;	pop bc 
9ff8			;	pop de 
9ff8			;	pop hl 
9ff8			;;	FORTH_RSP_POP	  
9ff8			;	ld (cli_ptr),bc   ; move to next token to parse in the input stream 
9ff8			;	ld (cli_origptr),de   ; move to next token to parse in the input stream 
9ff8			;	ld (os_tok_ptr),hl   ; move to next token to parse in the input stream 
9ff8			; 
9ff8			;	if DEBUG_FORTH_WORDS 
9ff8			;		DMARK "EX7" 
9ff8			;		CALLMONITOR 
9ff8			;	endif 
9ff8			;	NEXTW 
9ff8			 
9ff8			;.STKEXEC: 
9ff8			;	CWHEAD .ZDUP 43 "STKEXEC" 7 WORD_FLAG_CODE 
9ff8			;; > STKEXEC ( u .. u c -- ) Taking c count of strings off of the stack the strings are evaluated as code > TO TEST 
9ff8			; 
9ff8			; 
9ff8			;		if DEBUG_FORTH_WORDS_KEY 
9ff8			;			DMARK "STX" 
9ff8			;			CALLMONITOR 
9ff8			;		endif 
9ff8			; 
9ff8			;	FORTH_DSP_VALUEHL 
9ff8			; 
9ff8			;	ld (store_tmp1), hl    ; count 
9ff8			; 
9ff8			;	FORTH_DSP_POP 
9ff8			;.stkexec1: 
9ff8			;	ld hl, (store_tmp1)   ; count 
9ff8			;	ld a, 0 
9ff8			;	cp l 
9ff8			;	ret z 
9ff8			; 
9ff8			;	dec hl 
9ff8			;	ld (store_tmp1), hl    ; count 
9ff8			;	 
9ff8			;	FORTH_DSP_VALUEHL 
9ff8			;	push hl 
9ff8			;	 
9ff8			;		if DEBUG_FORTH_WORDS 
9ff8			;			DMARK "EXp" 
9ff8			;			CALLMONITOR 
9ff8			;		endif 
9ff8			;	FORTH_DSP_POP 
9ff8			; 
9ff8			;	call strlenz 
9ff8			;	inc hl   ; include zero term to copy 
9ff8			;	inc hl   ; include zero term to copy 
9ff8			;	inc hl   ; include zero term to copy 
9ff8			;	ld b,0 
9ff8			;	ld c,l 
9ff8			;	pop hl 
9ff8			;	ld de, execscratch 
9ff8			;		if DEBUG_FORTH_WORDS 
9ff8			;			DMARK "EX3" 
9ff8			;			CALLMONITOR 
9ff8			;		endif 
9ff8			;	ldir 
9ff8			; 
9ff8			; 
9ff8			;	ld hl, execscratch 
9ff8			; 
9ff8			;		if DEBUG_FORTH_WORDS 
9ff8			;			DMARK "EXP" 
9ff8			;			CALLMONITOR 
9ff8			;		endif 
9ff8			; 
9ff8			;	call forthparse 
9ff8			;	ld hl, execscratch 
9ff8			;		if DEBUG_FORTH_WORDS 
9ff8			;			DMARK "EXx" 
9ff8			;			CALLMONITOR 
9ff8			;		endif 
9ff8			;	call forthexec 
9ff8			; 
9ff8			;	jp .stkexec1 
9ff8			; 
9ff8			;	ret 
9ff8			 
9ff8			 
9ff8			.DUP: 
9ff8			CWHEAD .ZDUP OPCODE_DUP "DUP" 3 WORD_FLAG_CODE 
9ff8 17				db WORD_SYS_CORE+OPCODE_DUP             
9ff9 6e a0			dw .ZDUP            
9ffb 04				db 3 + 1 
9ffc .. 00			db "DUP",0              
a000				endm 
# End of macro CWHEAD
a000			; | DUP ( u -- u u )     Duplicate whatever item is on TOS | DONE 
a000			 
a000				if DEBUG_FORTH_WORDS_KEY 
a000					DMARK "DUP" 
a000 f5				push af  
a001 3a 15 a0			ld a, (.dmark)  
a004 32 65 ee			ld (debug_mark),a  
a007 3a 16 a0			ld a, (.dmark+1)  
a00a 32 66 ee			ld (debug_mark+1),a  
a00d 3a 17 a0			ld a, (.dmark+2)  
a010 32 67 ee			ld (debug_mark+2),a  
a013 18 03			jr .pastdmark  
a015 ..			.dmark: db "DUP"  
a018 f1			.pastdmark: pop af  
a019			endm  
# End of macro DMARK
a019					CALLMONITOR 
a019 cd 6f ee			call debug_vector  
a01c				endm  
# End of macro CALLMONITOR
a01c				endif 
a01c			 
a01c				FORTH_DSP 
a01c cd 50 9c			call macro_forth_dsp 
a01f				endm 
# End of macro FORTH_DSP
a01f			 
a01f 7e				ld a, (HL) 
a020 fe 01			cp DS_TYPE_STR 
a022 20 25			jr nz, .dupinum 
a024			 
a024				; push another string 
a024			 
a024				FORTH_DSP_VALUEHL     		 
a024 cd 8a 9c			call macro_dsp_valuehl 
a027				endm 
# End of macro FORTH_DSP_VALUEHL
a027			 
a027			if DEBUG_FORTH_WORDS 
a027				DMARK "DUs" 
a027 f5				push af  
a028 3a 3c a0			ld a, (.dmark)  
a02b 32 65 ee			ld (debug_mark),a  
a02e 3a 3d a0			ld a, (.dmark+1)  
a031 32 66 ee			ld (debug_mark+1),a  
a034 3a 3e a0			ld a, (.dmark+2)  
a037 32 67 ee			ld (debug_mark+2),a  
a03a 18 03			jr .pastdmark  
a03c ..			.dmark: db "DUs"  
a03f f1			.pastdmark: pop af  
a040			endm  
# End of macro DMARK
a040				CALLMONITOR 
a040 cd 6f ee			call debug_vector  
a043				endm  
# End of macro CALLMONITOR
a043			endif 
a043 cd f3 9a			call forth_push_str 
a046			 
a046				NEXTW 
a046 c3 75 9e			jp macro_next 
a049				endm 
# End of macro NEXTW
a049			 
a049			 
a049			.dupinum: 
a049				 
a049			 
a049			 
a049				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a049 cd 8a 9c			call macro_dsp_valuehl 
a04c				endm 
# End of macro FORTH_DSP_VALUEHL
a04c			 
a04c			; TODO add floating point number detection 
a04c			 
a04c			if DEBUG_FORTH_WORDS 
a04c				DMARK "DUi" 
a04c f5				push af  
a04d 3a 61 a0			ld a, (.dmark)  
a050 32 65 ee			ld (debug_mark),a  
a053 3a 62 a0			ld a, (.dmark+1)  
a056 32 66 ee			ld (debug_mark+1),a  
a059 3a 63 a0			ld a, (.dmark+2)  
a05c 32 67 ee			ld (debug_mark+2),a  
a05f 18 03			jr .pastdmark  
a061 ..			.dmark: db "DUi"  
a064 f1			.pastdmark: pop af  
a065			endm  
# End of macro DMARK
a065				CALLMONITOR 
a065 cd 6f ee			call debug_vector  
a068				endm  
# End of macro CALLMONITOR
a068			endif 
a068			 
a068 cd 85 9a			call forth_push_numhl 
a06b				NEXTW 
a06b c3 75 9e			jp macro_next 
a06e				endm 
# End of macro NEXTW
a06e			.ZDUP: 
a06e			CWHEAD .LSHIFT OPCODE_ZDUP "?DUP" 4 WORD_FLAG_CODE 
a06e 99				db WORD_SYS_CORE+OPCODE_ZDUP             
a06f a6 a0			dw .LSHIFT            
a071 05				db 4 + 1 
a072 .. 00			db "?DUP",0              
a077				endm 
# End of macro CWHEAD
a077			; | ?DUP ( u -- u u )     Duplicate item on TOS if the item is non-zero (Only works for numerics) | DONE 
a077			 
a077				if DEBUG_FORTH_WORDS_KEY 
a077					DMARK "qDU" 
a077 f5				push af  
a078 3a 8c a0			ld a, (.dmark)  
a07b 32 65 ee			ld (debug_mark),a  
a07e 3a 8d a0			ld a, (.dmark+1)  
a081 32 66 ee			ld (debug_mark+1),a  
a084 3a 8e a0			ld a, (.dmark+2)  
a087 32 67 ee			ld (debug_mark+2),a  
a08a 18 03			jr .pastdmark  
a08c ..			.dmark: db "qDU"  
a08f f1			.pastdmark: pop af  
a090			endm  
# End of macro DMARK
a090					CALLMONITOR 
a090 cd 6f ee			call debug_vector  
a093				endm  
# End of macro CALLMONITOR
a093				endif 
a093				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a093 cd 8a 9c			call macro_dsp_valuehl 
a096				endm 
# End of macro FORTH_DSP_VALUEHL
a096			 
a096 e5				push hl 
a097			 
a097				; is it a zero? 
a097			 
a097 3e 00			ld a, 0 
a099 84				add h 
a09a 85				add l 
a09b			 
a09b e1				pop hl 
a09c			 
a09c fe 00			cp 0 
a09e 28 03			jr z, .dup2orig 
a0a0			 
a0a0			 
a0a0 cd 85 9a			call forth_push_numhl 
a0a3			 
a0a3			 
a0a3			; TODO add floating point number detection 
a0a3			 
a0a3			.dup2orig: 
a0a3			 
a0a3				NEXTW 
a0a3 c3 75 9e			jp macro_next 
a0a6				endm 
# End of macro NEXTW
a0a6			.LSHIFT: 
a0a6			CWHEAD .RSHIFT OPCODE_ZDUP "LSHIFT" 6 WORD_FLAG_CODE 
a0a6 99				db WORD_SYS_CORE+OPCODE_ZDUP             
a0a7 da a0			dw .RSHIFT            
a0a9 07				db 6 + 1 
a0aa .. 00			db "LSHIFT",0              
a0b1				endm 
# End of macro CWHEAD
a0b1			; | LSHIFT ( w -- w )    16 bit left shift | DONE 
a0b1				if DEBUG_FORTH_WORDS_KEY 
a0b1					DMARK "LSH" 
a0b1 f5				push af  
a0b2 3a c6 a0			ld a, (.dmark)  
a0b5 32 65 ee			ld (debug_mark),a  
a0b8 3a c7 a0			ld a, (.dmark+1)  
a0bb 32 66 ee			ld (debug_mark+1),a  
a0be 3a c8 a0			ld a, (.dmark+2)  
a0c1 32 67 ee			ld (debug_mark+2),a  
a0c4 18 03			jr .pastdmark  
a0c6 ..			.dmark: db "LSH"  
a0c9 f1			.pastdmark: pop af  
a0ca			endm  
# End of macro DMARK
a0ca					CALLMONITOR 
a0ca cd 6f ee			call debug_vector  
a0cd				endm  
# End of macro CALLMONITOR
a0cd				endif 
a0cd				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a0cd cd 8a 9c			call macro_dsp_valuehl 
a0d0				endm 
# End of macro FORTH_DSP_VALUEHL
a0d0				FORTH_DSP_POP 
a0d0 cd 42 9d			call macro_forth_dsp_pop 
a0d3				endm 
# End of macro FORTH_DSP_POP
a0d3			 
a0d3 29				add hl, hl 
a0d4 cd 85 9a			call forth_push_numhl 
a0d7				NEXTW 
a0d7 c3 75 9e			jp macro_next 
a0da				endm 
# End of macro NEXTW
a0da			.RSHIFT: 
a0da			CWHEAD .SWAP OPCODE_ZDUP "RSHIFT" 6 WORD_FLAG_CODE 
a0da 99				db WORD_SYS_CORE+OPCODE_ZDUP             
a0db 11 a1			dw .SWAP            
a0dd 07				db 6 + 1 
a0de .. 00			db "RSHIFT",0              
a0e5				endm 
# End of macro CWHEAD
a0e5			; | RSHIFT ( w -- w )    16 bit right shift | DONE 
a0e5				if DEBUG_FORTH_WORDS_KEY 
a0e5					DMARK "RSH" 
a0e5 f5				push af  
a0e6 3a fa a0			ld a, (.dmark)  
a0e9 32 65 ee			ld (debug_mark),a  
a0ec 3a fb a0			ld a, (.dmark+1)  
a0ef 32 66 ee			ld (debug_mark+1),a  
a0f2 3a fc a0			ld a, (.dmark+2)  
a0f5 32 67 ee			ld (debug_mark+2),a  
a0f8 18 03			jr .pastdmark  
a0fa ..			.dmark: db "RSH"  
a0fd f1			.pastdmark: pop af  
a0fe			endm  
# End of macro DMARK
a0fe					CALLMONITOR 
a0fe cd 6f ee			call debug_vector  
a101				endm  
# End of macro CALLMONITOR
a101				endif 
a101				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a101 cd 8a 9c			call macro_dsp_valuehl 
a104				endm 
# End of macro FORTH_DSP_VALUEHL
a104				FORTH_DSP_POP 
a104 cd 42 9d			call macro_forth_dsp_pop 
a107				endm 
# End of macro FORTH_DSP_POP
a107 cb 3c			srl h 
a109 cb 1d			rr l 
a10b cd 85 9a			call forth_push_numhl 
a10e				NEXTW 
a10e c3 75 9e			jp macro_next 
a111				endm 
# End of macro NEXTW
a111			.SWAP: 
a111			CWHEAD .COLN OPCODE_SWAP "SWAP" 4 WORD_FLAG_CODE 
a111 18				db WORD_SYS_CORE+OPCODE_SWAP             
a112 65 a1			dw .COLN            
a114 05				db 4 + 1 
a115 .. 00			db "SWAP",0              
a11a				endm 
# End of macro CWHEAD
a11a			; | SWAP ( w1 w2 -- w2 w1 )    Swap top two items on TOS | DONE 
a11a				if DEBUG_FORTH_WORDS_KEY 
a11a					DMARK "SWP" 
a11a f5				push af  
a11b 3a 2f a1			ld a, (.dmark)  
a11e 32 65 ee			ld (debug_mark),a  
a121 3a 30 a1			ld a, (.dmark+1)  
a124 32 66 ee			ld (debug_mark+1),a  
a127 3a 31 a1			ld a, (.dmark+2)  
a12a 32 67 ee			ld (debug_mark+2),a  
a12d 18 03			jr .pastdmark  
a12f ..			.dmark: db "SWP"  
a132 f1			.pastdmark: pop af  
a133			endm  
# End of macro DMARK
a133					CALLMONITOR 
a133 cd 6f ee			call debug_vector  
a136				endm  
# End of macro CALLMONITOR
a136				endif 
a136			 
a136			; DONE Use os stack swap memory 
a136			 
a136				FORTH_DSP_PTR 0     ; TOS 
a136 2a e8 e9			ld hl,(cli_data_sp) 
a139 11 00 00			ld de, 0 * 3 
a13c ed 52			sbc hl, de 
a13e				endm 
# End of macro FORTH_DSP_PTR
a13e cd c1 9d			call hltostack1 
a141			  
a141				FORTH_DSP_PTR 1     ; TOS 
a141 2a e8 e9			ld hl,(cli_data_sp) 
a144 11 03 00			ld de, 1 * 3 
a147 ed 52			sbc hl, de 
a149				endm 
# End of macro FORTH_DSP_PTR
a149 cd c7 9d			call hltostack2 
a14c			 
a14c				FORTH_DSP_PTR 0     ; TOS 
a14c 2a e8 e9			ld hl,(cli_data_sp) 
a14f 11 00 00			ld de, 0 * 3 
a152 ed 52			sbc hl, de 
a154				endm 
# End of macro FORTH_DSP_PTR
a154 cd df 9d			call hlfromstack2 
a157			 
a157				FORTH_DSP_PTR 1     ; TOS 
a157 2a e8 e9			ld hl,(cli_data_sp) 
a15a 11 03 00			ld de, 1 * 3 
a15d ed 52			sbc hl, de 
a15f				endm 
# End of macro FORTH_DSP_PTR
a15f cd d9 9d			call hlfromstack1 
a162			;	FORTH_DSP_VALUEHL 
a162			;	push hl     ; w2 
a162			; 
a162			;	FORTH_DSP_POP 
a162			; 
a162			;	FORTH_DSP_VALUEHL 
a162			; 
a162			;	FORTH_DSP_POP 
a162			; 
a162			;	pop de     ; w2	, hl = w1 
a162			; 
a162			;	ex de, hl 
a162			;	push de 
a162			; 
a162			;	call forth_push_numhl 
a162			; 
a162			;	pop hl 
a162			; 
a162			;	call forth_push_numhl 
a162				 
a162			 
a162				NEXTW 
a162 c3 75 9e			jp macro_next 
a165				endm 
# End of macro NEXTW
a165			.COLN: 
a165			CWHEAD .SCOLN OPCODE_COLN ":" 1 WORD_FLAG_CODE 
a165 19				db WORD_SYS_CORE+OPCODE_COLN             
a166 f1 a2			dw .SCOLN            
a168 02				db 1 + 1 
a169 .. 00			db ":",0              
a16b				endm 
# End of macro CWHEAD
a16b			; | : ( -- )         Create new word | DONE 
a16b			 
a16b				if DEBUG_FORTH_WORDS_KEY 
a16b					DMARK "CLN" 
a16b f5				push af  
a16c 3a 80 a1			ld a, (.dmark)  
a16f 32 65 ee			ld (debug_mark),a  
a172 3a 81 a1			ld a, (.dmark+1)  
a175 32 66 ee			ld (debug_mark+1),a  
a178 3a 82 a1			ld a, (.dmark+2)  
a17b 32 67 ee			ld (debug_mark+2),a  
a17e 18 03			jr .pastdmark  
a180 ..			.dmark: db "CLN"  
a183 f1			.pastdmark: pop af  
a184			endm  
# End of macro DMARK
a184					CALLMONITOR 
a184 cd 6f ee			call debug_vector  
a187				endm  
# End of macro CALLMONITOR
a187				endif 
a187			STACKFRAME OFF $8efe $989f 
a187				if DEBUG_STACK_IMB 
a187					if OFF 
a187						exx 
a187						ld de, $8efe 
a187						ld a, d 
a187						ld hl, curframe 
a187						call hexout 
a187						ld a, e 
a187						ld hl, curframe+2 
a187						call hexout 
a187						ld hl, $8efe 
a187						push hl 
a187						ld hl, $989f 
a187						push hl 
a187						exx 
a187					endif 
a187				endif 
a187			endm 
# End of macro STACKFRAME
a187			; get parser buffer length  of new word 
a187			 
a187			 
a187			 
a187				; move tok past this to start of name defintition 
a187				; TODO get word to define 
a187				; TODO Move past word token 
a187				; TODO get length of string up to the ';' 
a187			 
a187 2a bc e5		ld hl, (os_tok_ptr) 
a18a 23			inc hl 
a18b 23			inc hl 
a18c			 
a18c 3e 3b		ld a, ';' 
a18e cd 5b 90		call strlent 
a191			 
a191 7d			ld a,l 
a192 32 ab e2		ld (os_new_parse_len), a 
a195			 
a195			 
a195			if DEBUG_FORTH_UWORD 
a195 ed 5b bc e5	ld de, (os_tok_ptr) 
a199					DMARK ":01" 
a199 f5				push af  
a19a 3a ae a1			ld a, (.dmark)  
a19d 32 65 ee			ld (debug_mark),a  
a1a0 3a af a1			ld a, (.dmark+1)  
a1a3 32 66 ee			ld (debug_mark+1),a  
a1a6 3a b0 a1			ld a, (.dmark+2)  
a1a9 32 67 ee			ld (debug_mark+2),a  
a1ac 18 03			jr .pastdmark  
a1ae ..			.dmark: db ":01"  
a1b1 f1			.pastdmark: pop af  
a1b2			endm  
# End of macro DMARK
a1b2			CALLMONITOR 
a1b2 cd 6f ee			call debug_vector  
a1b5				endm  
# End of macro CALLMONITOR
a1b5			endif 
a1b5			 
a1b5			; 
a1b5			;  new word memory layout: 
a1b5			;  
a1b5			;    : adg 6666 ;  
a1b5			; 
a1b5			;    db   1     ; user defined word  
a1b5 23			inc hl    
a1b6			;    dw   sysdict 
a1b6 23			inc hl 
a1b7 23			inc hl 
a1b8			;    db <word len>+1 (for null) 
a1b8 23			inc hl 
a1b9			;    db .... <word> 
a1b9			; 
a1b9			 
a1b9 23			inc hl    ; some extras for the word preamble before the above 
a1ba 23			inc hl 
a1bb 23			inc hl 
a1bc 23			inc hl 
a1bd 23			inc hl 
a1be 23			inc hl 
a1bf 23			inc hl  
a1c0 23			inc hl 
a1c1 23			inc hl 
a1c2 23			inc hl 
a1c3 23			inc hl 
a1c4 23			inc hl 
a1c5 23			inc hl 
a1c6 23			inc hl     ; TODO how many do we really need?     maybe only 6 
a1c7			;       exec word buffer 
a1c7			;	<ptr word>   
a1c7 23			inc hl 
a1c8 23			inc hl 
a1c9			;       <word list><null term> 7F final term 
a1c9			 
a1c9			 
a1c9			if DEBUG_FORTH_UWORD 
a1c9					DMARK ":02" 
a1c9 f5				push af  
a1ca 3a de a1			ld a, (.dmark)  
a1cd 32 65 ee			ld (debug_mark),a  
a1d0 3a df a1			ld a, (.dmark+1)  
a1d3 32 66 ee			ld (debug_mark+1),a  
a1d6 3a e0 a1			ld a, (.dmark+2)  
a1d9 32 67 ee			ld (debug_mark+2),a  
a1dc 18 03			jr .pastdmark  
a1de ..			.dmark: db ":02"  
a1e1 f1			.pastdmark: pop af  
a1e2			endm  
# End of macro DMARK
a1e2			CALLMONITOR 
a1e2 cd 6f ee			call debug_vector  
a1e5				endm  
# End of macro CALLMONITOR
a1e5			endif 
a1e5			 
a1e5			 
a1e5				; malloc the size 
a1e5			 
a1e5 cd c5 90			call malloc 
a1e8 22 ad e2			ld (os_new_malloc), hl     ; save malloc start 
a1eb			 
a1eb			;    db   1     ; user defined word  
a1eb 3e 01			ld a, WORD_SYS_UWORD  
a1ed 77				ld (hl), a 
a1ee			 
a1ee 23			inc hl    
a1ef			;    dw   sysdict 
a1ef 11 b9 9f		ld de, sysdict       ; continue on with the scan to the system dict 
a1f2 73			ld (hl), e 
a1f3 23			inc hl 
a1f4 72			ld (hl), d 
a1f5 23			inc hl 
a1f6			 
a1f6			 
a1f6			;    Setup dict word 
a1f6			 
a1f6 23			inc hl 
a1f7 22 a7 e2		ld (os_new_work_ptr), hl     ; save start of dict word  
a1fa			 
a1fa			; 1. get length of dict word 
a1fa			 
a1fa			 
a1fa 2a bc e5		ld hl, (os_tok_ptr) 
a1fd 23			inc hl 
a1fe 23			inc hl    ; position to start of dict word 
a1ff 3e 00		ld a, 0 
a201 cd 5b 90		call strlent 
a204			 
a204			 
a204 23			inc hl    ; to include null??? 
a205			 
a205			; write length of dict word 
a205			 
a205 ed 5b a7 e2	ld de, (os_new_work_ptr)   ; get dest for copy of word 
a209 1b			dec de 
a20a eb			ex de, hl 
a20b 73			ld (hl), e 
a20c eb			ex de, hl 
a20d			 
a20d			 
a20d			 
a20d			; copy  
a20d 4d			ld c, l 
a20e 06 00		ld b, 0 
a210 ed 5b a7 e2	ld de, (os_new_work_ptr)   ; get dest for copy of word 
a214 2a bc e5		ld hl, (os_tok_ptr) 
a217 23			inc hl 
a218 23			inc hl    ; position to start of dict word 
a219			 
a219			;	ldir       ; copy word - HL now is where we need to be for copy of the line 
a219			 
a219			; TODO need to convert word to upper case 
a219			 
a219			ucasetok:	 
a219 7e			ld a,(hl) 
a21a cd 47 90		call toUpper 
a21d 77			ld (hl),a 
a21e ed a0		ldi 
a220 f2 19 a2		jp p, ucasetok 
a223			 
a223			 
a223			 
a223			; de now points to start of where the word body code should be placed 
a223 ed 53 a7 e2	ld (os_new_work_ptr), de 
a227			; hl now points to the words to throw at forthexec which needs to be copied 
a227 22 a5 e2		ld (os_new_src_ptr), hl 
a22a			 
a22a			; TODO add 'call to forthexec' 
a22a			 
a22a			if DEBUG_FORTH_UWORD 
a22a c5			push bc 
a22b ed 4b ad e2	ld bc, (os_new_malloc) 
a22f					DMARK ":0x" 
a22f f5				push af  
a230 3a 44 a2			ld a, (.dmark)  
a233 32 65 ee			ld (debug_mark),a  
a236 3a 45 a2			ld a, (.dmark+1)  
a239 32 66 ee			ld (debug_mark+1),a  
a23c 3a 46 a2			ld a, (.dmark+2)  
a23f 32 67 ee			ld (debug_mark+2),a  
a242 18 03			jr .pastdmark  
a244 ..			.dmark: db ":0x"  
a247 f1			.pastdmark: pop af  
a248			endm  
# End of macro DMARK
a248			CALLMONITOR 
a248 cd 6f ee			call debug_vector  
a24b				endm  
# End of macro CALLMONITOR
a24b c1			pop bc 
a24c			endif 
a24c			 
a24c			 
a24c			; create word preamble which should be: 
a24c			 
a24c			; TODO possibly push the current os_tok_ptr to rsp and the current rsp will be the start of the string and not current pc???? 
a24c			 
a24c			;    ld hl, <word code> 
a24c			;    jp user_exec 
a24c			;    <word code bytes> 
a24c			 
a24c			 
a24c			;	inc de     ; TODO ??? or are we already past the word's null 
a24c eb			ex de, hl 
a24d			 
a24d 36 21		ld (hl), 021h     ; TODO get bytes poke "ld hl, " 
a24f			 
a24f 23			inc hl 
a250 22 a1 e2		ld (os_new_exec_ptr),hl     ; save this location to poke with the address of the word buffer 
a253 23			inc hl 
a254			 
a254 23			inc hl 
a255 36 c3		ld (hl), 0c3h     ; TODO get bytes poke "jp xx  " 
a257			 
a257 01 92 ce		ld bc, user_exec 
a25a 23			inc hl 
a25b 71			ld (hl), c     ; poke address of user_exec 
a25c 23			inc hl 
a25d 70			ld (hl), b     
a25e			; 
a25e			;	inc hl 
a25e			;	ld (hl), 0cdh     ; TODO get bytes poke "call  " 
a25e			; 
a25e			; 
a25e			;	ld bc, macro_forth_rsp_next 
a25e			;	inc hl 
a25e			;	ld (hl), c     ; poke address of FORTH_RSP_NEXT 
a25e			;	inc hl 
a25e			;	ld (hl), b     
a25e			; 
a25e			;	inc hl 
a25e			;	ld (hl), 0cdh     ; TODO get bytes poke "call  " 
a25e			; 
a25e			; 
a25e			;	inc hl 
a25e			;	ld bc, forthexec 
a25e			;	ld (hl), c     ; poke address of forthexec 
a25e			;	inc hl 
a25e			;	ld (hl), b      
a25e			; 
a25e			;	inc hl 
a25e			;	ld (hl), 0c3h     ; TODO get bytes poke "jp  " 
a25e			; 
a25e			;	ld bc, user_dict_next 
a25e			;	inc hl 
a25e			;	ld (hl), c     ; poke address of forthexec 
a25e			;	inc hl 
a25e			;	ld (hl), b      
a25e			 
a25e			; hl is now where we need to copy the word byte data to save this 
a25e			 
a25e 23			inc hl 
a25f 22 a3 e2		ld (os_new_exec), hl 
a262			 
a262			; copy definition 
a262			 
a262 eb			ex de, hl 
a263			;	inc de    ; TODO BUG It appears the exec of a uword requires pc to be set 
a263			;	inc de    ; skip the PC for this parse 
a263 3a ab e2		ld a, (os_new_parse_len) 
a266 4f			ld c, a 
a267 06 00		ld b, 0 
a269 ed b0		ldir		 ; copy defintion 
a26b			 
a26b			 
a26b			; poke the address of where the new word bytes live for forthexec 
a26b			 
a26b 2a a1 e2		ld hl, (os_new_exec_ptr)     ; TODO this isnt correct 
a26e			 
a26e ed 5b a3 e2	ld de, (os_new_exec)      
a272			 
a272 73			ld (hl), e 
a273 23			inc hl 
a274 72			ld (hl), d 
a275			 
a275				; TODO copy last user dict word next link to this word 
a275				; TODO update last user dict word to point to this word 
a275			; 
a275			; hl f923 de 812a ; bc 811a 
a275			 
a275			if DEBUG_FORTH_UWORD 
a275 c5			push bc 
a276 ed 4b ad e2	ld bc, (os_new_malloc) 
a27a					DMARK ":0A" 
a27a f5				push af  
a27b 3a 8f a2			ld a, (.dmark)  
a27e 32 65 ee			ld (debug_mark),a  
a281 3a 90 a2			ld a, (.dmark+1)  
a284 32 66 ee			ld (debug_mark+1),a  
a287 3a 91 a2			ld a, (.dmark+2)  
a28a 32 67 ee			ld (debug_mark+2),a  
a28d 18 03			jr .pastdmark  
a28f ..			.dmark: db ":0A"  
a292 f1			.pastdmark: pop af  
a293			endm  
# End of macro DMARK
a293			CALLMONITOR 
a293 cd 6f ee			call debug_vector  
a296				endm  
# End of macro CALLMONITOR
a296 c1			pop bc 
a297			endif 
a297			if DEBUG_FORTH_UWORD 
a297 c5			push bc 
a298 ed 4b ad e2	ld bc, (os_new_malloc) 
a29c 03			inc bc 
a29d 03			inc bc 
a29e 03			inc bc 
a29f 03			inc bc 
a2a0 03			inc bc 
a2a1 03			inc bc 
a2a2 03			inc bc 
a2a3 03			inc bc 
a2a4			 
a2a4					DMARK ":0B" 
a2a4 f5				push af  
a2a5 3a b9 a2			ld a, (.dmark)  
a2a8 32 65 ee			ld (debug_mark),a  
a2ab 3a ba a2			ld a, (.dmark+1)  
a2ae 32 66 ee			ld (debug_mark+1),a  
a2b1 3a bb a2			ld a, (.dmark+2)  
a2b4 32 67 ee			ld (debug_mark+2),a  
a2b7 18 03			jr .pastdmark  
a2b9 ..			.dmark: db ":0B"  
a2bc f1			.pastdmark: pop af  
a2bd			endm  
# End of macro DMARK
a2bd			CALLMONITOR 
a2bd cd 6f ee			call debug_vector  
a2c0				endm  
# End of macro CALLMONITOR
a2c0 c1			pop bc 
a2c1			endif 
a2c1			 
a2c1			; update word dict linked list for new word 
a2c1			 
a2c1			 
a2c1 2a b8 e5		ld hl, (os_last_new_uword)		; get the start of the last added uword 
a2c4 23			inc hl     ; move to next work linked list ptr 
a2c5			 
a2c5 ed 5b ad e2	ld de, (os_new_malloc)		 ; new next word 
a2c9 73			ld (hl), e 
a2ca 23			inc hl 
a2cb 72			ld (hl), d 
a2cc			 
a2cc			if DEBUG_FORTH_UWORD 
a2cc ed 4b b8 e5	ld bc, (os_last_new_uword)		; get the last word so we can check it worked in debug 
a2d0			endif 
a2d0			 
a2d0 ed 53 b8 e5	ld (os_last_new_uword), de      ; update last new uword ptr 
a2d4			 
a2d4			 
a2d4			if DEBUG_FORTH_UWORD 
a2d4					DMARK ":0+" 
a2d4 f5				push af  
a2d5 3a e9 a2			ld a, (.dmark)  
a2d8 32 65 ee			ld (debug_mark),a  
a2db 3a ea a2			ld a, (.dmark+1)  
a2de 32 66 ee			ld (debug_mark+1),a  
a2e1 3a eb a2			ld a, (.dmark+2)  
a2e4 32 67 ee			ld (debug_mark+2),a  
a2e7 18 03			jr .pastdmark  
a2e9 ..			.dmark: db ":0+"  
a2ec f1			.pastdmark: pop af  
a2ed			endm  
# End of macro DMARK
a2ed			CALLMONITOR 
a2ed cd 6f ee			call debug_vector  
a2f0				endm  
# End of macro CALLMONITOR
a2f0			endif 
a2f0			 
a2f0			STACKFRAMECHK OFF $8efe $989f 
a2f0				if DEBUG_STACK_IMB 
a2f0					if OFF 
a2f0						exx 
a2f0						ld hl, $989f 
a2f0						pop de   ; $989f 
a2f0						call cmp16 
a2f0						jr nz, .spnosame 
a2f0						ld hl, $8efe 
a2f0						pop de   ; $8efe 
a2f0						call cmp16 
a2f0						jr z, .spfrsame 
a2f0						.spnosame: call showsperror 
a2f0						.spfrsame: nop 
a2f0						exx 
a2f0					endif 
a2f0				endif 
a2f0			endm 
# End of macro STACKFRAMECHK
a2f0			 
a2f0 c9			ret    ; dont process any remaining parser tokens as they form new word 
a2f1			 
a2f1			 
a2f1			 
a2f1			 
a2f1			;		NEXT 
a2f1			.SCOLN: 
a2f1			;	CWHEAD .DROP 17 '\;' 1 WORD_FLAG_CODE 
a2f1 06			db OPCODE_SCOLN 
a2f2 3d a3		dw .DROP 
a2f4 02			db 2 
a2f5 .. 00		db ";",0           
a2f7			; | ; ( -- )     Terminate new word and return exec to previous exec level | DONE 
a2f7				if DEBUG_FORTH_WORDS_KEY 
a2f7					DMARK "SCN" 
a2f7 f5				push af  
a2f8 3a 0c a3			ld a, (.dmark)  
a2fb 32 65 ee			ld (debug_mark),a  
a2fe 3a 0d a3			ld a, (.dmark+1)  
a301 32 66 ee			ld (debug_mark+1),a  
a304 3a 0e a3			ld a, (.dmark+2)  
a307 32 67 ee			ld (debug_mark+2),a  
a30a 18 03			jr .pastdmark  
a30c ..			.dmark: db "SCN"  
a30f f1			.pastdmark: pop af  
a310			endm  
# End of macro DMARK
a310					CALLMONITOR 
a310 cd 6f ee			call debug_vector  
a313				endm  
# End of macro CALLMONITOR
a313				endif 
a313				FORTH_RSP_TOS 
a313 cd 43 9a			call macro_forth_rsp_tos 
a316				endm 
# End of macro FORTH_RSP_TOS
a316 e5				push hl 
a317				FORTH_RSP_POP 
a317 cd 4d 9a			call macro_forth_rsp_pop 
a31a				endm 
# End of macro FORTH_RSP_POP
a31a e1				pop hl 
a31b			;		ex de,hl 
a31b 22 bc e5			ld (os_tok_ptr),hl 
a31e			 
a31e			if DEBUG_FORTH_UWORD 
a31e					DMARK "SCL" 
a31e f5				push af  
a31f 3a 33 a3			ld a, (.dmark)  
a322 32 65 ee			ld (debug_mark),a  
a325 3a 34 a3			ld a, (.dmark+1)  
a328 32 66 ee			ld (debug_mark+1),a  
a32b 3a 35 a3			ld a, (.dmark+2)  
a32e 32 67 ee			ld (debug_mark+2),a  
a331 18 03			jr .pastdmark  
a333 ..			.dmark: db "SCL"  
a336 f1			.pastdmark: pop af  
a337			endm  
# End of macro DMARK
a337			CALLMONITOR 
a337 cd 6f ee			call debug_vector  
a33a				endm  
# End of macro CALLMONITOR
a33a			endif 
a33a				NEXTW 
a33a c3 75 9e			jp macro_next 
a33d				endm 
# End of macro NEXTW
a33d			 
a33d			.DROP: 
a33d			CWHEAD .DUP2 OPCODE_DROP "DROP" 4 WORD_FLAG_CODE 
a33d 1b				db WORD_SYS_CORE+OPCODE_DROP             
a33e 68 a3			dw .DUP2            
a340 05				db 4 + 1 
a341 .. 00			db "DROP",0              
a346				endm 
# End of macro CWHEAD
a346			; | DROP ( w -- )   drop the TOS item   | DONE 
a346				if DEBUG_FORTH_WORDS_KEY 
a346					DMARK "DRP" 
a346 f5				push af  
a347 3a 5b a3			ld a, (.dmark)  
a34a 32 65 ee			ld (debug_mark),a  
a34d 3a 5c a3			ld a, (.dmark+1)  
a350 32 66 ee			ld (debug_mark+1),a  
a353 3a 5d a3			ld a, (.dmark+2)  
a356 32 67 ee			ld (debug_mark+2),a  
a359 18 03			jr .pastdmark  
a35b ..			.dmark: db "DRP"  
a35e f1			.pastdmark: pop af  
a35f			endm  
# End of macro DMARK
a35f					CALLMONITOR 
a35f cd 6f ee			call debug_vector  
a362				endm  
# End of macro CALLMONITOR
a362				endif 
a362				FORTH_DSP_POP 
a362 cd 42 9d			call macro_forth_dsp_pop 
a365				endm 
# End of macro FORTH_DSP_POP
a365				NEXTW 
a365 c3 75 9e			jp macro_next 
a368				endm 
# End of macro NEXTW
a368			.DUP2: 
a368			CWHEAD .DROP2 OPCODE_DUP2 "2DUP" 4 WORD_FLAG_CODE 
a368 1c				db WORD_SYS_CORE+OPCODE_DUP2             
a369 ad a3			dw .DROP2            
a36b 05				db 4 + 1 
a36c .. 00			db "2DUP",0              
a371				endm 
# End of macro CWHEAD
a371			; | 2DUP ( w1 w2 -- w1 w2 w1 w2 ) Duplicate the top two items on TOS  (Only works for numerics) | DONE 
a371				if DEBUG_FORTH_WORDS_KEY 
a371					DMARK "2DU" 
a371 f5				push af  
a372 3a 86 a3			ld a, (.dmark)  
a375 32 65 ee			ld (debug_mark),a  
a378 3a 87 a3			ld a, (.dmark+1)  
a37b 32 66 ee			ld (debug_mark+1),a  
a37e 3a 88 a3			ld a, (.dmark+2)  
a381 32 67 ee			ld (debug_mark+2),a  
a384 18 03			jr .pastdmark  
a386 ..			.dmark: db "2DU"  
a389 f1			.pastdmark: pop af  
a38a			endm  
# End of macro DMARK
a38a					CALLMONITOR 
a38a cd 6f ee			call debug_vector  
a38d				endm  
# End of macro CALLMONITOR
a38d				endif 
a38d				FORTH_DSP_VALUEHL 
a38d cd 8a 9c			call macro_dsp_valuehl 
a390				endm 
# End of macro FORTH_DSP_VALUEHL
a390 e5				push hl      ; 2 
a391			 
a391				FORTH_DSP_POP 
a391 cd 42 9d			call macro_forth_dsp_pop 
a394				endm 
# End of macro FORTH_DSP_POP
a394				 
a394				FORTH_DSP_VALUEHL 
a394 cd 8a 9c			call macro_dsp_valuehl 
a397				endm 
# End of macro FORTH_DSP_VALUEHL
a397			;		push hl      ; 1 
a397			 
a397				FORTH_DSP_POP 
a397 cd 42 9d			call macro_forth_dsp_pop 
a39a				endm 
# End of macro FORTH_DSP_POP
a39a			 
a39a			;		pop hl       ; 1 
a39a d1				pop de       ; 2 
a39b			 
a39b cd 85 9a			call forth_push_numhl 
a39e eb				ex de, hl 
a39f cd 85 9a			call forth_push_numhl 
a3a2			 
a3a2				 
a3a2 eb				ex de, hl 
a3a3			 
a3a3 cd 85 9a			call forth_push_numhl 
a3a6 eb				ex de, hl 
a3a7 cd 85 9a			call forth_push_numhl 
a3aa			 
a3aa			 
a3aa				NEXTW 
a3aa c3 75 9e			jp macro_next 
a3ad				endm 
# End of macro NEXTW
a3ad			.DROP2: 
a3ad			CWHEAD .PICK OPCODE_DROP2 "2DROP" 5 WORD_FLAG_CODE 
a3ad 1d				db WORD_SYS_CORE+OPCODE_DROP2             
a3ae dc a3			dw .PICK            
a3b0 06				db 5 + 1 
a3b1 .. 00			db "2DROP",0              
a3b7				endm 
# End of macro CWHEAD
a3b7			; | 2DROP ( w w -- )    Double drop | DONE 
a3b7				if DEBUG_FORTH_WORDS_KEY 
a3b7					DMARK "2DR" 
a3b7 f5				push af  
a3b8 3a cc a3			ld a, (.dmark)  
a3bb 32 65 ee			ld (debug_mark),a  
a3be 3a cd a3			ld a, (.dmark+1)  
a3c1 32 66 ee			ld (debug_mark+1),a  
a3c4 3a ce a3			ld a, (.dmark+2)  
a3c7 32 67 ee			ld (debug_mark+2),a  
a3ca 18 03			jr .pastdmark  
a3cc ..			.dmark: db "2DR"  
a3cf f1			.pastdmark: pop af  
a3d0			endm  
# End of macro DMARK
a3d0					CALLMONITOR 
a3d0 cd 6f ee			call debug_vector  
a3d3				endm  
# End of macro CALLMONITOR
a3d3				endif 
a3d3				FORTH_DSP_POP 
a3d3 cd 42 9d			call macro_forth_dsp_pop 
a3d6				endm 
# End of macro FORTH_DSP_POP
a3d6				FORTH_DSP_POP 
a3d6 cd 42 9d			call macro_forth_dsp_pop 
a3d9				endm 
# End of macro FORTH_DSP_POP
a3d9				NEXTW 
a3d9 c3 75 9e			jp macro_next 
a3dc				endm 
# End of macro NEXTW
a3dc			.PICK: 
a3dc			CWHEAD .SWAP2 99 "PICK" 4 WORD_FLAG_CODE 
a3dc 77				db WORD_SYS_CORE+99             
a3dd 76 a4			dw .SWAP2            
a3df 05				db 4 + 1 
a3e0 .. 00			db "PICK",0              
a3e5				endm 
# End of macro CWHEAD
a3e5			; | PICK ( ux ... u x -- ux ... u n )    Replace x on stack with the item from position x on stack  | TODO 
a3e5				if DEBUG_FORTH_WORDS_KEY 
a3e5					DMARK "PIK" 
a3e5 f5				push af  
a3e6 3a fa a3			ld a, (.dmark)  
a3e9 32 65 ee			ld (debug_mark),a  
a3ec 3a fb a3			ld a, (.dmark+1)  
a3ef 32 66 ee			ld (debug_mark+1),a  
a3f2 3a fc a3			ld a, (.dmark+2)  
a3f5 32 67 ee			ld (debug_mark+2),a  
a3f8 18 03			jr .pastdmark  
a3fa ..			.dmark: db "PIK"  
a3fd f1			.pastdmark: pop af  
a3fe			endm  
# End of macro DMARK
a3fe					CALLMONITOR 
a3fe cd 6f ee			call debug_vector  
a401				endm  
# End of macro CALLMONITOR
a401				endif 
a401			 
a401				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a401 cd 8a 9c			call macro_dsp_valuehl 
a404				endm 
# End of macro FORTH_DSP_VALUEHL
a404				 
a404				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a404 cd 42 9d			call macro_forth_dsp_pop 
a407				endm 
# End of macro FORTH_DSP_POP
a407			 
a407				; init from TOS 
a407 e5				push hl 
a408				FORTH_DSP 
a408 cd 50 9c			call macro_forth_dsp 
a40b				endm 
# End of macro FORTH_DSP
a40b			;	ld hl, cli_data_sp 
a40b				if DEBUG_FORTH_WORDS 
a40b					DMARK "PK1" 
a40b f5				push af  
a40c 3a 20 a4			ld a, (.dmark)  
a40f 32 65 ee			ld (debug_mark),a  
a412 3a 21 a4			ld a, (.dmark+1)  
a415 32 66 ee			ld (debug_mark+1),a  
a418 3a 22 a4			ld a, (.dmark+2)  
a41b 32 67 ee			ld (debug_mark+2),a  
a41e 18 03			jr .pastdmark  
a420 ..			.dmark: db "PK1"  
a423 f1			.pastdmark: pop af  
a424			endm  
# End of macro DMARK
a424					CALLMONITOR 
a424 cd 6f ee			call debug_vector  
a427				endm  
# End of macro CALLMONITOR
a427				endif 
a427 c1				pop bc 
a428 41				ld b,c 
a429 3e 00			ld a, 0 
a42b b8				cp b 
a42c 28 21			jr z, .pdone	 
a42e			.pkl: 
a42e 2b				dec hl 
a42f 2b				dec hl 
a430 2b				dec hl 
a431			 
a431				if DEBUG_FORTH_WORDS 
a431					DMARK "PKl" 
a431 f5				push af  
a432 3a 46 a4			ld a, (.dmark)  
a435 32 65 ee			ld (debug_mark),a  
a438 3a 47 a4			ld a, (.dmark+1)  
a43b 32 66 ee			ld (debug_mark+1),a  
a43e 3a 48 a4			ld a, (.dmark+2)  
a441 32 67 ee			ld (debug_mark+2),a  
a444 18 03			jr .pastdmark  
a446 ..			.dmark: db "PKl"  
a449 f1			.pastdmark: pop af  
a44a			endm  
# End of macro DMARK
a44a					CALLMONITOR 
a44a cd 6f ee			call debug_vector  
a44d				endm  
# End of macro CALLMONITOR
a44d				endif 
a44d 10 df			djnz .pkl 
a44f			.pdone: 
a44f				 
a44f				; TODO do type check with correct push 
a44f			 
a44f 23				inc hl 
a450				;call loadwordinhl 
a450 5e				ld e, (hl) 
a451 23				inc hl 
a452 56				ld d, (hl) 
a453 eb				ex de,hl 
a454				if DEBUG_FORTH_WORDS 
a454					DMARK "PKp" 
a454 f5				push af  
a455 3a 69 a4			ld a, (.dmark)  
a458 32 65 ee			ld (debug_mark),a  
a45b 3a 6a a4			ld a, (.dmark+1)  
a45e 32 66 ee			ld (debug_mark+1),a  
a461 3a 6b a4			ld a, (.dmark+2)  
a464 32 67 ee			ld (debug_mark+2),a  
a467 18 03			jr .pastdmark  
a469 ..			.dmark: db "PKp"  
a46c f1			.pastdmark: pop af  
a46d			endm  
# End of macro DMARK
a46d					CALLMONITOR 
a46d cd 6f ee			call debug_vector  
a470				endm  
# End of macro CALLMONITOR
a470				endif 
a470 cd 85 9a			call forth_push_numhl 
a473			 
a473				NEXTW 
a473 c3 75 9e			jp macro_next 
a476				endm 
# End of macro NEXTW
a476			.SWAP2: 
a476			CWHEAD .AT OPCODE_SWAP2 "2SWAP" 5 WORD_FLAG_CODE 
a476 1e				db WORD_SYS_CORE+OPCODE_SWAP2             
a477 f7 a4			dw .AT            
a479 06				db 5 + 1 
a47a .. 00			db "2SWAP",0              
a480				endm 
# End of macro CWHEAD
a480			; | 2SWAP ( w1 w2 w3 w4 -- w3 w4 w1 w2 ) Swap top pair of items | TODO 
a480				if DEBUG_FORTH_WORDS_KEY 
a480					DMARK "2SW" 
a480 f5				push af  
a481 3a 95 a4			ld a, (.dmark)  
a484 32 65 ee			ld (debug_mark),a  
a487 3a 96 a4			ld a, (.dmark+1)  
a48a 32 66 ee			ld (debug_mark+1),a  
a48d 3a 97 a4			ld a, (.dmark+2)  
a490 32 67 ee			ld (debug_mark+2),a  
a493 18 03			jr .pastdmark  
a495 ..			.dmark: db "2SW"  
a498 f1			.pastdmark: pop af  
a499			endm  
# End of macro DMARK
a499					CALLMONITOR 
a499 cd 6f ee			call debug_vector  
a49c				endm  
# End of macro CALLMONITOR
a49c				endif 
a49c			; TODO Use os stack swap memory 
a49c			 
a49c				FORTH_DSP_PTR 0     ; TOS    w4 
a49c 2a e8 e9			ld hl,(cli_data_sp) 
a49f 11 00 00			ld de, 0 * 3 
a4a2 ed 52			sbc hl, de 
a4a4				endm 
# End of macro FORTH_DSP_PTR
a4a4 cd c1 9d			call hltostack1 
a4a7			  
a4a7				FORTH_DSP_PTR 1     ; TOS    w3 
a4a7 2a e8 e9			ld hl,(cli_data_sp) 
a4aa 11 03 00			ld de, 1 * 3 
a4ad ed 52			sbc hl, de 
a4af				endm 
# End of macro FORTH_DSP_PTR
a4af cd c7 9d			call hltostack2 
a4b2			 
a4b2			 
a4b2			 
a4b2				FORTH_DSP_PTR 2     ; TOS    w2 
a4b2 2a e8 e9			ld hl,(cli_data_sp) 
a4b5 11 06 00			ld de, 2 * 3 
a4b8 ed 52			sbc hl, de 
a4ba				endm 
# End of macro FORTH_DSP_PTR
a4ba cd cd 9d			call hltostack3 
a4bd			 
a4bd				FORTH_DSP_PTR 3     ; TOS   w1 
a4bd 2a e8 e9			ld hl,(cli_data_sp) 
a4c0 11 09 00			ld de, 3 * 3 
a4c3 ed 52			sbc hl, de 
a4c5				endm 
# End of macro FORTH_DSP_PTR
a4c5 cd d3 9d			call hltostack4 
a4c8			 
a4c8			 
a4c8			 
a4c8			 
a4c8				FORTH_DSP_PTR 0     ; TOS 
a4c8 2a e8 e9			ld hl,(cli_data_sp) 
a4cb 11 00 00			ld de, 0 * 3 
a4ce ed 52			sbc hl, de 
a4d0				endm 
# End of macro FORTH_DSP_PTR
a4d0 cd e5 9d			call hlfromstack3 
a4d3			 
a4d3				FORTH_DSP_PTR 1     ; TOS 
a4d3 2a e8 e9			ld hl,(cli_data_sp) 
a4d6 11 03 00			ld de, 1 * 3 
a4d9 ed 52			sbc hl, de 
a4db				endm 
# End of macro FORTH_DSP_PTR
a4db cd eb 9d			call hlfromstack4 
a4de			 
a4de			 
a4de			 
a4de				FORTH_DSP_PTR 2     ; TOS 
a4de 2a e8 e9			ld hl,(cli_data_sp) 
a4e1 11 06 00			ld de, 2 * 3 
a4e4 ed 52			sbc hl, de 
a4e6				endm 
# End of macro FORTH_DSP_PTR
a4e6 cd d9 9d			call hlfromstack1 
a4e9			 
a4e9				FORTH_DSP_PTR 3     ; TOS 
a4e9 2a e8 e9			ld hl,(cli_data_sp) 
a4ec 11 09 00			ld de, 3 * 3 
a4ef ed 52			sbc hl, de 
a4f1				endm 
# End of macro FORTH_DSP_PTR
a4f1 cd df 9d			call hlfromstack2 
a4f4			 
a4f4				NEXTW 
a4f4 c3 75 9e			jp macro_next 
a4f7				endm 
# End of macro NEXTW
a4f7			.AT: 
a4f7			CWHEAD .CAT OPCODE_AT "@" 1 WORD_FLAG_CODE 
a4f7 1f				db WORD_SYS_CORE+OPCODE_AT             
a4f8 29 a5			dw .CAT            
a4fa 02				db 1 + 1 
a4fb .. 00			db "@",0              
a4fd				endm 
# End of macro CWHEAD
a4fd			; | @ ( w -- ) Push onto TOS byte stored at address   | DONE 
a4fd			 
a4fd				if DEBUG_FORTH_WORDS_KEY 
a4fd					DMARK "AT." 
a4fd f5				push af  
a4fe 3a 12 a5			ld a, (.dmark)  
a501 32 65 ee			ld (debug_mark),a  
a504 3a 13 a5			ld a, (.dmark+1)  
a507 32 66 ee			ld (debug_mark+1),a  
a50a 3a 14 a5			ld a, (.dmark+2)  
a50d 32 67 ee			ld (debug_mark+2),a  
a510 18 03			jr .pastdmark  
a512 ..			.dmark: db "AT."  
a515 f1			.pastdmark: pop af  
a516			endm  
# End of macro DMARK
a516					CALLMONITOR 
a516 cd 6f ee			call debug_vector  
a519				endm  
# End of macro CALLMONITOR
a519				endif 
a519			.getbyteat:	 
a519				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a519 cd 8a 9c			call macro_dsp_valuehl 
a51c				endm 
# End of macro FORTH_DSP_VALUEHL
a51c				 
a51c			;		push hl 
a51c			 
a51c				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a51c cd 42 9d			call macro_forth_dsp_pop 
a51f				endm 
# End of macro FORTH_DSP_POP
a51f			 
a51f			;		pop hl 
a51f			 
a51f 7e				ld a, (hl) 
a520			 
a520 6f				ld l, a 
a521 26 00			ld h, 0 
a523 cd 85 9a			call forth_push_numhl 
a526			 
a526				NEXTW 
a526 c3 75 9e			jp macro_next 
a529				endm 
# End of macro NEXTW
a529			.CAT: 
a529			CWHEAD .BANG OPCODE_CAT "C@" 2 WORD_FLAG_CODE 
a529 20				db WORD_SYS_CORE+OPCODE_CAT             
a52a 52 a5			dw .BANG            
a52c 03				db 2 + 1 
a52d .. 00			db "C@",0              
a530				endm 
# End of macro CWHEAD
a530			; | C@  ( w -- ) Push onto TOS byte stored at address   | DONE 
a530				if DEBUG_FORTH_WORDS_KEY 
a530					DMARK "CAA" 
a530 f5				push af  
a531 3a 45 a5			ld a, (.dmark)  
a534 32 65 ee			ld (debug_mark),a  
a537 3a 46 a5			ld a, (.dmark+1)  
a53a 32 66 ee			ld (debug_mark+1),a  
a53d 3a 47 a5			ld a, (.dmark+2)  
a540 32 67 ee			ld (debug_mark+2),a  
a543 18 03			jr .pastdmark  
a545 ..			.dmark: db "CAA"  
a548 f1			.pastdmark: pop af  
a549			endm  
# End of macro DMARK
a549					CALLMONITOR 
a549 cd 6f ee			call debug_vector  
a54c				endm  
# End of macro CALLMONITOR
a54c				endif 
a54c c3 19 a5			jp .getbyteat 
a54f				NEXTW 
a54f c3 75 9e			jp macro_next 
a552				endm 
# End of macro NEXTW
a552			.BANG: 
a552			CWHEAD .CBANG OPCODE_BANG "!" 1 WORD_FLAG_CODE 
a552 21				db WORD_SYS_CORE+OPCODE_BANG             
a553 88 a5			dw .CBANG            
a555 02				db 1 + 1 
a556 .. 00			db "!",0              
a558				endm 
# End of macro CWHEAD
a558			; | ! ( x w -- ) Store x at address w      | DONE 
a558				if DEBUG_FORTH_WORDS_KEY 
a558					DMARK "BNG" 
a558 f5				push af  
a559 3a 6d a5			ld a, (.dmark)  
a55c 32 65 ee			ld (debug_mark),a  
a55f 3a 6e a5			ld a, (.dmark+1)  
a562 32 66 ee			ld (debug_mark+1),a  
a565 3a 6f a5			ld a, (.dmark+2)  
a568 32 67 ee			ld (debug_mark+2),a  
a56b 18 03			jr .pastdmark  
a56d ..			.dmark: db "BNG"  
a570 f1			.pastdmark: pop af  
a571			endm  
# End of macro DMARK
a571					CALLMONITOR 
a571 cd 6f ee			call debug_vector  
a574				endm  
# End of macro CALLMONITOR
a574				endif 
a574			 
a574			.storebyteat:		 
a574				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a574 cd 8a 9c			call macro_dsp_valuehl 
a577				endm 
# End of macro FORTH_DSP_VALUEHL
a577				 
a577 e5				push hl 
a578			 
a578				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a578 cd 42 9d			call macro_forth_dsp_pop 
a57b				endm 
# End of macro FORTH_DSP_POP
a57b			 
a57b				; get byte to poke 
a57b			 
a57b				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a57b cd 8a 9c			call macro_dsp_valuehl 
a57e				endm 
# End of macro FORTH_DSP_VALUEHL
a57e e5				push hl 
a57f			 
a57f			 
a57f				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a57f cd 42 9d			call macro_forth_dsp_pop 
a582				endm 
# End of macro FORTH_DSP_POP
a582			 
a582			 
a582 d1				pop de 
a583 e1				pop hl 
a584			 
a584 73				ld (hl),e 
a585			 
a585			 
a585				NEXTW 
a585 c3 75 9e			jp macro_next 
a588				endm 
# End of macro NEXTW
a588			.CBANG: 
a588			CWHEAD .SCALL OPCODE_CBANG "C!" 2 WORD_FLAG_CODE 
a588 22				db WORD_SYS_CORE+OPCODE_CBANG             
a589 b1 a5			dw .SCALL            
a58b 03				db 2 + 1 
a58c .. 00			db "C!",0              
a58f				endm 
# End of macro CWHEAD
a58f			; | C!  ( x w -- ) Store x at address w  | DONE 
a58f				if DEBUG_FORTH_WORDS_KEY 
a58f					DMARK "CBA" 
a58f f5				push af  
a590 3a a4 a5			ld a, (.dmark)  
a593 32 65 ee			ld (debug_mark),a  
a596 3a a5 a5			ld a, (.dmark+1)  
a599 32 66 ee			ld (debug_mark+1),a  
a59c 3a a6 a5			ld a, (.dmark+2)  
a59f 32 67 ee			ld (debug_mark+2),a  
a5a2 18 03			jr .pastdmark  
a5a4 ..			.dmark: db "CBA"  
a5a7 f1			.pastdmark: pop af  
a5a8			endm  
# End of macro DMARK
a5a8					CALLMONITOR 
a5a8 cd 6f ee			call debug_vector  
a5ab				endm  
# End of macro CALLMONITOR
a5ab				endif 
a5ab c3 74 a5			jp .storebyteat 
a5ae				NEXTW 
a5ae c3 75 9e			jp macro_next 
a5b1				endm 
# End of macro NEXTW
a5b1			.SCALL: 
a5b1			CWHEAD .DEPTH OPCODE_SCALL "CALL" 4 WORD_FLAG_CODE 
a5b1 23				db WORD_SYS_CORE+OPCODE_SCALL             
a5b2 e5 a5			dw .DEPTH            
a5b4 05				db 4 + 1 
a5b5 .. 00			db "CALL",0              
a5ba				endm 
# End of macro CWHEAD
a5ba			; | CALL ( w -- w  ) machine code call to address w  push the result of hl to stack | DONE 
a5ba				if DEBUG_FORTH_WORDS_KEY 
a5ba					DMARK "CLL" 
a5ba f5				push af  
a5bb 3a cf a5			ld a, (.dmark)  
a5be 32 65 ee			ld (debug_mark),a  
a5c1 3a d0 a5			ld a, (.dmark+1)  
a5c4 32 66 ee			ld (debug_mark+1),a  
a5c7 3a d1 a5			ld a, (.dmark+2)  
a5ca 32 67 ee			ld (debug_mark+2),a  
a5cd 18 03			jr .pastdmark  
a5cf ..			.dmark: db "CLL"  
a5d2 f1			.pastdmark: pop af  
a5d3			endm  
# End of macro DMARK
a5d3					CALLMONITOR 
a5d3 cd 6f ee			call debug_vector  
a5d6				endm  
# End of macro CALLMONITOR
a5d6				endif 
a5d6			 
a5d6				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a5d6 cd 8a 9c			call macro_dsp_valuehl 
a5d9				endm 
# End of macro FORTH_DSP_VALUEHL
a5d9			 
a5d9			;		push hl 
a5d9			 
a5d9				; destroy value TOS 
a5d9			 
a5d9				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a5d9 cd 42 9d			call macro_forth_dsp_pop 
a5dc				endm 
# End of macro FORTH_DSP_POP
a5dc			 
a5dc					 
a5dc			;		pop hl 
a5dc			 
a5dc				; how to do a call with hl???? save SP? 
a5dc cd 19 9e			call forth_call_hl 
a5df			 
a5df			 
a5df				; TODO push value back onto stack for another op etc 
a5df			 
a5df cd 85 9a			call forth_push_numhl 
a5e2				NEXTW 
a5e2 c3 75 9e			jp macro_next 
a5e5				endm 
# End of macro NEXTW
a5e5			.DEPTH: 
a5e5			CWHEAD .OVER OPCODE_DEPTH "DEPTH" 5 WORD_FLAG_CODE 
a5e5 24				db WORD_SYS_CORE+OPCODE_DEPTH             
a5e6 22 a6			dw .OVER            
a5e8 06				db 5 + 1 
a5e9 .. 00			db "DEPTH",0              
a5ef				endm 
# End of macro CWHEAD
a5ef			; | DEPTH ( -- u ) Push count of stack | DONE 
a5ef				; take current TOS and remove from base value div by two to get count 
a5ef				if DEBUG_FORTH_WORDS_KEY 
a5ef					DMARK "DEP" 
a5ef f5				push af  
a5f0 3a 04 a6			ld a, (.dmark)  
a5f3 32 65 ee			ld (debug_mark),a  
a5f6 3a 05 a6			ld a, (.dmark+1)  
a5f9 32 66 ee			ld (debug_mark+1),a  
a5fc 3a 06 a6			ld a, (.dmark+2)  
a5ff 32 67 ee			ld (debug_mark+2),a  
a602 18 03			jr .pastdmark  
a604 ..			.dmark: db "DEP"  
a607 f1			.pastdmark: pop af  
a608			endm  
# End of macro DMARK
a608					CALLMONITOR 
a608 cd 6f ee			call debug_vector  
a60b				endm  
# End of macro CALLMONITOR
a60b				endif 
a60b			 
a60b			 
a60b 2a e8 e9		ld hl, (cli_data_sp) 
a60e 11 22 e8		ld de, cli_data_stack 
a611 ed 52		sbc hl,de 
a613			 
a613			; div by size of stack item 
a613			 
a613 5d			ld e,l 
a614 0e 03		ld c, 3 
a616 cd 7a 8c		call Div8 
a619			 
a619 6f			ld l,a 
a61a 26 00		ld h,0 
a61c			 
a61c			;srl h 
a61c			;rr l 
a61c			 
a61c cd 85 9a			call forth_push_numhl 
a61f				NEXTW 
a61f c3 75 9e			jp macro_next 
a622				endm 
# End of macro NEXTW
a622			.OVER: 
a622			CWHEAD .PAUSE 46 "OVER" 4 WORD_FLAG_CODE 
a622 42				db WORD_SYS_CORE+46             
a623 69 a6			dw .PAUSE            
a625 05				db 4 + 1 
a626 .. 00			db "OVER",0              
a62b				endm 
# End of macro CWHEAD
a62b			; | OVER ( n1 n2 -- n1 n2 n1 )  Copy one below TOS onto TOS | TOFIX 
a62b				if DEBUG_FORTH_WORDS_KEY 
a62b					DMARK "OVR" 
a62b f5				push af  
a62c 3a 40 a6			ld a, (.dmark)  
a62f 32 65 ee			ld (debug_mark),a  
a632 3a 41 a6			ld a, (.dmark+1)  
a635 32 66 ee			ld (debug_mark+1),a  
a638 3a 42 a6			ld a, (.dmark+2)  
a63b 32 67 ee			ld (debug_mark+2),a  
a63e 18 03			jr .pastdmark  
a640 ..			.dmark: db "OVR"  
a643 f1			.pastdmark: pop af  
a644			endm  
# End of macro DMARK
a644					CALLMONITOR 
a644 cd 6f ee			call debug_vector  
a647				endm  
# End of macro CALLMONITOR
a647				endif 
a647			 
a647			; TODO Use os stack swap memory 
a647			 
a647				; work out what type we are looking at 
a647			 
a647				FORTH_DSP_PTR 1 
a647 2a e8 e9			ld hl,(cli_data_sp) 
a64a 11 03 00			ld de, 1 * 3 
a64d ed 52			sbc hl, de 
a64f				endm 
# End of macro FORTH_DSP_PTR
a64f			 
a64f 7e				ld a, (hl) 
a650				 
a650 f5				push af 
a651				; whatever the type lets get the pointer or word 
a651 23				inc hl 
a652			;; 
a652			 
a652				; type check now to decide on how to push  
a652			 
a652 cd f7 9d			call loadwordinhl 
a655 f1				pop af 
a656 fe 01			cp DS_TYPE_STR 
a658 28 06			jr z, .ovstr 
a65a			 
a65a				; we have a numeric so load the word and push 
a65a			;	ld e, (hl) 
a65a			;	inc hl 
a65a			;	ld d, (hl) 
a65a			;	ex de, hl 
a65a cd 85 9a			call forth_push_numhl 
a65d				NEXTW 
a65d c3 75 9e			jp macro_next 
a660				endm 
# End of macro NEXTW
a660			 
a660			.ovstr: 
a660				; ok, a string so get the pointer and push as a string 
a660			 
a660			;	call loadwordinhl 
a660 cd f3 9a			call forth_push_str 
a663				NEXTW 
a663 c3 75 9e			jp macro_next 
a666				endm 
# End of macro NEXTW
a666			 
a666			;	FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a666			;	push hl    ; n2 
a666			;	FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a666			; 
a666			;	FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a666			;	push hl    ; n1 
a666			;	FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a666			; 
a666			;	pop de     ; n1 
a666			;	pop hl     ; n2 
a666			; 
a666			;	push de 
a666			;	push hl 
a666			;	push de 
a666			 
a666				; push back  
a666			 
a666			;	pop hl 
a666			;	call forth_push_numhl 
a666			;	pop hl 
a666			;	call forth_push_numhl 
a666			;	pop hl 
a666			;	call forth_push_numhl 
a666				NEXTW 
a666 c3 75 9e			jp macro_next 
a669				endm 
# End of macro NEXTW
a669			 
a669			.PAUSE: 
a669			CWHEAD .PAUSES 47 "PAUSEMS" 7 WORD_FLAG_CODE 
a669 43				db WORD_SYS_CORE+47             
a66a 9e a6			dw .PAUSES            
a66c 08				db 7 + 1 
a66d .. 00			db "PAUSEMS",0              
a675				endm 
# End of macro CWHEAD
a675			; | PAUSEMS ( n -- )  Pause for n millisconds | DONE 
a675				if DEBUG_FORTH_WORDS_KEY 
a675					DMARK "PMS" 
a675 f5				push af  
a676 3a 8a a6			ld a, (.dmark)  
a679 32 65 ee			ld (debug_mark),a  
a67c 3a 8b a6			ld a, (.dmark+1)  
a67f 32 66 ee			ld (debug_mark+1),a  
a682 3a 8c a6			ld a, (.dmark+2)  
a685 32 67 ee			ld (debug_mark+2),a  
a688 18 03			jr .pastdmark  
a68a ..			.dmark: db "PMS"  
a68d f1			.pastdmark: pop af  
a68e			endm  
# End of macro DMARK
a68e					CALLMONITOR 
a68e cd 6f ee			call debug_vector  
a691				endm  
# End of macro CALLMONITOR
a691				endif 
a691				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a691 cd 8a 9c			call macro_dsp_valuehl 
a694				endm 
# End of macro FORTH_DSP_VALUEHL
a694			;		push hl    ; n2 
a694				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a694 cd 42 9d			call macro_forth_dsp_pop 
a697				endm 
# End of macro FORTH_DSP_POP
a697			;		pop hl 
a697			 
a697 7d				ld a, l 
a698 cd e5 89			call aDelayInMS 
a69b			       NEXTW 
a69b c3 75 9e			jp macro_next 
a69e				endm 
# End of macro NEXTW
a69e			.PAUSES:  
a69e			CWHEAD .ROT 48 "PAUSE" 5 WORD_FLAG_CODE 
a69e 44				db WORD_SYS_CORE+48             
a69f 0d a7			dw .ROT            
a6a1 06				db 5 + 1 
a6a2 .. 00			db "PAUSE",0              
a6a8				endm 
# End of macro CWHEAD
a6a8			; | PAUSE ( n -- )  Pause for n seconds | DONE 
a6a8				if DEBUG_FORTH_WORDS_KEY 
a6a8					DMARK "PAU" 
a6a8 f5				push af  
a6a9 3a bd a6			ld a, (.dmark)  
a6ac 32 65 ee			ld (debug_mark),a  
a6af 3a be a6			ld a, (.dmark+1)  
a6b2 32 66 ee			ld (debug_mark+1),a  
a6b5 3a bf a6			ld a, (.dmark+2)  
a6b8 32 67 ee			ld (debug_mark+2),a  
a6bb 18 03			jr .pastdmark  
a6bd ..			.dmark: db "PAU"  
a6c0 f1			.pastdmark: pop af  
a6c1			endm  
# End of macro DMARK
a6c1					CALLMONITOR 
a6c1 cd 6f ee			call debug_vector  
a6c4				endm  
# End of macro CALLMONITOR
a6c4				endif 
a6c4				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a6c4 cd 8a 9c			call macro_dsp_valuehl 
a6c7				endm 
# End of macro FORTH_DSP_VALUEHL
a6c7			;		push hl    ; n2 
a6c7				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a6c7 cd 42 9d			call macro_forth_dsp_pop 
a6ca				endm 
# End of macro FORTH_DSP_POP
a6ca			;		pop hl 
a6ca 45				ld b, l 
a6cb				if DEBUG_FORTH_WORDS 
a6cb					DMARK "PAU" 
a6cb f5				push af  
a6cc 3a e0 a6			ld a, (.dmark)  
a6cf 32 65 ee			ld (debug_mark),a  
a6d2 3a e1 a6			ld a, (.dmark+1)  
a6d5 32 66 ee			ld (debug_mark+1),a  
a6d8 3a e2 a6			ld a, (.dmark+2)  
a6db 32 67 ee			ld (debug_mark+2),a  
a6de 18 03			jr .pastdmark  
a6e0 ..			.dmark: db "PAU"  
a6e3 f1			.pastdmark: pop af  
a6e4			endm  
# End of macro DMARK
a6e4					CALLMONITOR 
a6e4 cd 6f ee			call debug_vector  
a6e7				endm  
# End of macro CALLMONITOR
a6e7				endif 
a6e7 c5			.pauses1:	push bc 
a6e8 cd 00 8a			call delay1s 
a6eb c1				pop bc 
a6ec				if DEBUG_FORTH_WORDS 
a6ec					DMARK "PA1" 
a6ec f5				push af  
a6ed 3a 01 a7			ld a, (.dmark)  
a6f0 32 65 ee			ld (debug_mark),a  
a6f3 3a 02 a7			ld a, (.dmark+1)  
a6f6 32 66 ee			ld (debug_mark+1),a  
a6f9 3a 03 a7			ld a, (.dmark+2)  
a6fc 32 67 ee			ld (debug_mark+2),a  
a6ff 18 03			jr .pastdmark  
a701 ..			.dmark: db "PA1"  
a704 f1			.pastdmark: pop af  
a705			endm  
# End of macro DMARK
a705					CALLMONITOR 
a705 cd 6f ee			call debug_vector  
a708				endm  
# End of macro CALLMONITOR
a708				endif 
a708 10 dd			djnz .pauses1 
a70a			 
a70a			       NEXTW 
a70a c3 75 9e			jp macro_next 
a70d				endm 
# End of macro NEXTW
a70d			.ROT: 
a70d			CWHEAD .UWORDS 49 "ROT" 3 WORD_FLAG_CODE 
a70d 45				db WORD_SYS_CORE+49             
a70e 76 a7			dw .UWORDS            
a710 04				db 3 + 1 
a711 .. 00			db "ROT",0              
a715				endm 
# End of macro CWHEAD
a715			; | ROT ( u1 u2 u3 -- u2 u3 u1 ) Rotate top three items on stack | TOFIX 
a715				if DEBUG_FORTH_WORDS_KEY 
a715					DMARK "ROT" 
a715 f5				push af  
a716 3a 2a a7			ld a, (.dmark)  
a719 32 65 ee			ld (debug_mark),a  
a71c 3a 2b a7			ld a, (.dmark+1)  
a71f 32 66 ee			ld (debug_mark+1),a  
a722 3a 2c a7			ld a, (.dmark+2)  
a725 32 67 ee			ld (debug_mark+2),a  
a728 18 03			jr .pastdmark  
a72a ..			.dmark: db "ROT"  
a72d f1			.pastdmark: pop af  
a72e			endm  
# End of macro DMARK
a72e					CALLMONITOR 
a72e cd 6f ee			call debug_vector  
a731				endm  
# End of macro CALLMONITOR
a731				endif 
a731			 
a731			; DONE Use os stack swap memory 
a731			 
a731				FORTH_DSP_PTR 0     ; u3 
a731 2a e8 e9			ld hl,(cli_data_sp) 
a734 11 00 00			ld de, 0 * 3 
a737 ed 52			sbc hl, de 
a739				endm 
# End of macro FORTH_DSP_PTR
a739 cd c1 9d			call hltostack1     
a73c			  
a73c				FORTH_DSP_PTR 1     ; u2 
a73c 2a e8 e9			ld hl,(cli_data_sp) 
a73f 11 03 00			ld de, 1 * 3 
a742 ed 52			sbc hl, de 
a744				endm 
# End of macro FORTH_DSP_PTR
a744 cd c7 9d			call hltostack2      
a747			 
a747				FORTH_DSP_PTR 2     ; u1 
a747 2a e8 e9			ld hl,(cli_data_sp) 
a74a 11 06 00			ld de, 2 * 3 
a74d ed 52			sbc hl, de 
a74f				endm 
# End of macro FORTH_DSP_PTR
a74f cd cd 9d			call hltostack3 
a752			 
a752			 
a752				FORTH_DSP_PTR 0     ;  
a752 2a e8 e9			ld hl,(cli_data_sp) 
a755 11 00 00			ld de, 0 * 3 
a758 ed 52			sbc hl, de 
a75a				endm 
# End of macro FORTH_DSP_PTR
a75a cd e5 9d			call hlfromstack3 
a75d			 
a75d				FORTH_DSP_PTR 1     ; TOS 
a75d 2a e8 e9			ld hl,(cli_data_sp) 
a760 11 03 00			ld de, 1 * 3 
a763 ed 52			sbc hl, de 
a765				endm 
# End of macro FORTH_DSP_PTR
a765 cd d9 9d			call hlfromstack1 
a768			 
a768				FORTH_DSP_PTR 2     ; TOS 
a768 2a e8 e9			ld hl,(cli_data_sp) 
a76b 11 06 00			ld de, 2 * 3 
a76e ed 52			sbc hl, de 
a770				endm 
# End of macro FORTH_DSP_PTR
a770 cd df 9d			call hlfromstack2 
a773			 
a773			 
a773			;	FORTH_DSP_VALUEHL 
a773			;	push hl    ; u3  
a773			; 
a773			;	FORTH_DSP_POP 
a773			; 
a773			;	FORTH_DSP_VALUEHL 
a773			;	push hl     ; u2 
a773			; 
a773			;	FORTH_DSP_POP 
a773			; 
a773			;	FORTH_DSP_VALUEHL 
a773			;	push hl     ; u1 
a773			; 
a773			;	FORTH_DSP_POP 
a773			; 
a773			;	pop bc      ; u1 
a773			;	pop hl      ; u2 
a773			;	pop de      ; u3 
a773			; 
a773			; 
a773			;	push bc 
a773			;	push de 
a773			;	push hl 
a773			; 
a773			; 
a773			;	pop hl 
a773			;	call forth_push_numhl 
a773			; 
a773			;	pop hl 
a773			;	call forth_push_numhl 
a773			; 
a773			;	pop hl 
a773			;	call forth_push_numhl 
a773				 
a773			 
a773			 
a773			 
a773			 
a773			 
a773			       NEXTW 
a773 c3 75 9e			jp macro_next 
a776				endm 
# End of macro NEXTW
a776			 
a776			.UWORDS: 
a776			CWHEAD .BP 60 "UWORDS" 6 WORD_FLAG_CODE 
a776 50				db WORD_SYS_CORE+60             
a777 38 a8			dw .BP            
a779 07				db 6 + 1 
a77a .. 00			db "UWORDS",0              
a781				endm 
# End of macro CWHEAD
a781			; | UWORDS (  -- s1 ... sn u )   List user word dict | DONE 
a781			; | | After use the TOS will have a count of the number of user words that have been pushed to stack. 
a781			; | | Following the count are the individual words. 
a781			; | | 
a781			; | | e.g. UWORDS 
a781			; | | BOX DIRLIST 2 
a781			; | |  
a781			; | | Can be used to save the words to storage via: 
a781			; | | UWORDS $01 DO $01 APPEND LOOP 
a781			if DEBUG_FORTH_WORDS_KEY 
a781				DMARK "UWR" 
a781 f5				push af  
a782 3a 96 a7			ld a, (.dmark)  
a785 32 65 ee			ld (debug_mark),a  
a788 3a 97 a7			ld a, (.dmark+1)  
a78b 32 66 ee			ld (debug_mark+1),a  
a78e 3a 98 a7			ld a, (.dmark+2)  
a791 32 67 ee			ld (debug_mark+2),a  
a794 18 03			jr .pastdmark  
a796 ..			.dmark: db "UWR"  
a799 f1			.pastdmark: pop af  
a79a			endm  
# End of macro DMARK
a79a				CALLMONITOR 
a79a cd 6f ee			call debug_vector  
a79d				endm  
# End of macro CALLMONITOR
a79d			endif 
a79d 21 b6 e0			ld hl, baseram 
a7a0				;ld hl, baseusermem 
a7a0 01 00 00			ld bc, 0    ; start a counter 
a7a3			 
a7a3			; skip dict stub 
a7a3			 
a7a3 cd b2 9f			call forth_tok_next 
a7a6			 
a7a6			 
a7a6			; while we have words to look for 
a7a6			 
a7a6 7e			.douscan:	ld a, (hl)      
a7a7			if DEBUG_FORTH_WORDS 
a7a7				DMARK "UWs" 
a7a7 f5				push af  
a7a8 3a bc a7			ld a, (.dmark)  
a7ab 32 65 ee			ld (debug_mark),a  
a7ae 3a bd a7			ld a, (.dmark+1)  
a7b1 32 66 ee			ld (debug_mark+1),a  
a7b4 3a be a7			ld a, (.dmark+2)  
a7b7 32 67 ee			ld (debug_mark+2),a  
a7ba 18 03			jr .pastdmark  
a7bc ..			.dmark: db "UWs"  
a7bf f1			.pastdmark: pop af  
a7c0			endm  
# End of macro DMARK
a7c0				CALLMONITOR 
a7c0 cd 6f ee			call debug_vector  
a7c3				endm  
# End of macro CALLMONITOR
a7c3			endif 
a7c3 fe 00			cp WORD_SYS_END 
a7c5 28 4d			jr z, .udone 
a7c7 fe 01			cp WORD_SYS_UWORD 
a7c9 20 44			jr nz, .nuword 
a7cb			 
a7cb			if DEBUG_FORTH_WORDS 
a7cb				DMARK "UWu" 
a7cb f5				push af  
a7cc 3a e0 a7			ld a, (.dmark)  
a7cf 32 65 ee			ld (debug_mark),a  
a7d2 3a e1 a7			ld a, (.dmark+1)  
a7d5 32 66 ee			ld (debug_mark+1),a  
a7d8 3a e2 a7			ld a, (.dmark+2)  
a7db 32 67 ee			ld (debug_mark+2),a  
a7de 18 03			jr .pastdmark  
a7e0 ..			.dmark: db "UWu"  
a7e3 f1			.pastdmark: pop af  
a7e4			endm  
# End of macro DMARK
a7e4				CALLMONITOR 
a7e4 cd 6f ee			call debug_vector  
a7e7				endm  
# End of macro CALLMONITOR
a7e7			endif 
a7e7				; we have a uword so push its name to the stack 
a7e7			 
a7e7 e5				push hl  ; save so we can move to next dict block 
a7e8			 
a7e8				; skip opcode 
a7e8 23				inc hl  
a7e9				; skip next ptr 
a7e9 23				inc hl  
a7ea 23				inc hl 
a7eb				; skip len 
a7eb 23				inc hl 
a7ec			if DEBUG_FORTH_WORDS 
a7ec				DMARK "UWt" 
a7ec f5				push af  
a7ed 3a 01 a8			ld a, (.dmark)  
a7f0 32 65 ee			ld (debug_mark),a  
a7f3 3a 02 a8			ld a, (.dmark+1)  
a7f6 32 66 ee			ld (debug_mark+1),a  
a7f9 3a 03 a8			ld a, (.dmark+2)  
a7fc 32 67 ee			ld (debug_mark+2),a  
a7ff 18 03			jr .pastdmark  
a801 ..			.dmark: db "UWt"  
a804 f1			.pastdmark: pop af  
a805			endm  
# End of macro DMARK
a805				CALLMONITOR 
a805 cd 6f ee			call debug_vector  
a808				endm  
# End of macro CALLMONITOR
a808			endif 
a808 03				inc bc 
a809			 
a809 c5				push bc 
a80a cd f3 9a			call forth_push_str 
a80d c1				pop bc 
a80e			 
a80e e1				pop hl 	 
a80f			 
a80f cd b2 9f		.nuword:	call forth_tok_next 
a812 18 92			jr .douscan  
a814			 
a814			.udone:		 ; push count of uwords found 
a814 c5				push bc 
a815 e1				pop hl 
a816			 
a816			if DEBUG_FORTH_WORDS 
a816				DMARK "UWc" 
a816 f5				push af  
a817 3a 2b a8			ld a, (.dmark)  
a81a 32 65 ee			ld (debug_mark),a  
a81d 3a 2c a8			ld a, (.dmark+1)  
a820 32 66 ee			ld (debug_mark+1),a  
a823 3a 2d a8			ld a, (.dmark+2)  
a826 32 67 ee			ld (debug_mark+2),a  
a829 18 03			jr .pastdmark  
a82b ..			.dmark: db "UWc"  
a82e f1			.pastdmark: pop af  
a82f			endm  
# End of macro DMARK
a82f				CALLMONITOR 
a82f cd 6f ee			call debug_vector  
a832				endm  
# End of macro CALLMONITOR
a832			endif 
a832 cd 85 9a			call forth_push_numhl 
a835			 
a835			 
a835			       NEXTW 
a835 c3 75 9e			jp macro_next 
a838				endm 
# End of macro NEXTW
a838			 
a838			.BP: 
a838			CWHEAD .MONITOR 64 "BP" 2 WORD_FLAG_CODE 
a838 54				db WORD_SYS_CORE+64             
a839 72 a8			dw .MONITOR            
a83b 03				db 2 + 1 
a83c .. 00			db "BP",0              
a83f				endm 
# End of macro CWHEAD
a83f			; | BP ( u1 -- ) Enable or disable break point monitoring | DONE 
a83f			; | | $00 Will enable the break points within specific code paths 
a83f			; | | $01 Will disable break points 
a83f			; | |  
a83f			; | | By default break points are off. Either the above can be used to enable them 
a83f			; | | or if a key is held down during start up the spashscreen will appear to freeze 
a83f			; | | and on release of the pressed key the CONFIG menu will be displayed where you 
a83f			; | | can disable break points. Exiting will then continue boot process. 
a83f				; get byte count 
a83f				if DEBUG_FORTH_WORDS_KEY 
a83f					DMARK "BP." 
a83f f5				push af  
a840 3a 54 a8			ld a, (.dmark)  
a843 32 65 ee			ld (debug_mark),a  
a846 3a 55 a8			ld a, (.dmark+1)  
a849 32 66 ee			ld (debug_mark+1),a  
a84c 3a 56 a8			ld a, (.dmark+2)  
a84f 32 67 ee			ld (debug_mark+2),a  
a852 18 03			jr .pastdmark  
a854 ..			.dmark: db "BP."  
a857 f1			.pastdmark: pop af  
a858			endm  
# End of macro DMARK
a858					CALLMONITOR 
a858 cd 6f ee			call debug_vector  
a85b				endm  
# End of macro CALLMONITOR
a85b				endif 
a85b			 
a85b				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a85b cd 8a 9c			call macro_dsp_valuehl 
a85e				endm 
# End of macro FORTH_DSP_VALUEHL
a85e			 
a85e			;		push hl 
a85e			 
a85e				; destroy value TOS 
a85e			 
a85e				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a85e cd 42 9d			call macro_forth_dsp_pop 
a861				endm 
# End of macro FORTH_DSP_POP
a861			 
a861			;		pop hl 
a861			 
a861 3e 00			ld a,0 
a863 bd				cp l 
a864 28 06			jr z, .bpset 
a866			;		ld a, '*' 
a866 cd 00 94			call bp_off 
a869				NEXTW 
a869 c3 75 9e			jp macro_next 
a86c				endm 
# End of macro NEXTW
a86c			 
a86c			.bpset:	 
a86c				;	ld (os_view_disable), a 
a86c cd f4 93			call bp_on 
a86f			 
a86f			 
a86f				NEXTW 
a86f c3 75 9e			jp macro_next 
a872				endm 
# End of macro NEXTW
a872			 
a872			 
a872			.MONITOR: 
a872			CWHEAD .MALLOC 65 "MONITOR" 7 WORD_FLAG_CODE 
a872 55				db WORD_SYS_CORE+65             
a873 a3 a8			dw .MALLOC            
a875 08				db 7 + 1 
a876 .. 00			db "MONITOR",0              
a87e				endm 
# End of macro CWHEAD
a87e			; | MONITOR ( -- ) Display system breakpoint/monitor | DONE 
a87e			; | | At start the current various registers will be displayed with contents. 
a87e			; | | Top right corner will show the most recent debug marker seen. 
a87e			; | | The bottom of the screen will also show the values of the data stack pointer (DSP) 
a87e			; | | and the return stack pointer (RSP). 
a87e			; | | Pressing: 
a87e			; | |    1 - Initial screen 
a87e			; | |    2 - Display a data dump of HL 
a87e			; | |    3 - Display a data dump of DE 
a87e			; | |    4 - Display a data dump of BC 
a87e			; | |    5 - Display a data dump of HL 
a87e			; | |    6 - Display a data dump of DSP 
a87e			; | |    7 - Display a data dump of RSP 
a87e			; | |    8 - Display a data dump of what is at DSP 
a87e			; | |    9 - Display a data dump of what is at RSP 
a87e			; | |    0 - Exit monitor and continue running. This will also enable break points 
a87e			; | |    * - Disable break points 
a87e			; | |    # - Enter traditional monitor mode 
a87e			; | | 
a87e			; | | Monitor Mode 
a87e			; | | ------------ 
a87e			; | | A prompt of '>' will be shown for various commands: 
a87e			; | |    D xxxx - Display a data dump starting from hex address xxxx 
a87e			; | |    C - Continue display a data dump from the last set address 
a87e			; | |    M xxxx - Set start of memory edit at address xx 
a87e			; | |    U xx - Poke the hex byte xx into the address set by M and increment the address to the next location 
a87e			; | |    G xxxx - Exec code at specific address 
a87e			; | |    Q - Return to previous 
a87e				if DEBUG_FORTH_WORDS_KEY 
a87e					DMARK "MON" 
a87e f5				push af  
a87f 3a 93 a8			ld a, (.dmark)  
a882 32 65 ee			ld (debug_mark),a  
a885 3a 94 a8			ld a, (.dmark+1)  
a888 32 66 ee			ld (debug_mark+1),a  
a88b 3a 95 a8			ld a, (.dmark+2)  
a88e 32 67 ee			ld (debug_mark+2),a  
a891 18 03			jr .pastdmark  
a893 ..			.dmark: db "MON"  
a896 f1			.pastdmark: pop af  
a897			endm  
# End of macro DMARK
a897					CALLMONITOR 
a897 cd 6f ee			call debug_vector  
a89a				endm  
# End of macro CALLMONITOR
a89a				endif 
a89a			;		ld a, 0 
a89a			;		ld (os_view_disable), a 
a89a cd f4 93			call bp_on 
a89d			 
a89d				CALLMONITOR 
a89d cd 6f ee			call debug_vector  
a8a0				endm  
# End of macro CALLMONITOR
a8a0			 
a8a0			;	call monitor 
a8a0			 
a8a0				NEXTW 
a8a0 c3 75 9e			jp macro_next 
a8a3				endm 
# End of macro NEXTW
a8a3			 
a8a3			 
a8a3			.MALLOC: 
a8a3			CWHEAD .MALLOC2 66 "ALLOT" 5 WORD_FLAG_CODE 
a8a3 56				db WORD_SYS_CORE+66             
a8a4 cc a8			dw .MALLOC2            
a8a6 06				db 5 + 1 
a8a7 .. 00			db "ALLOT",0              
a8ad				endm 
# End of macro CWHEAD
a8ad			; | ALLOT ( u -- u ) Allocate u bytes of memory space and push the pointer TOS  | DONE 
a8ad				if DEBUG_FORTH_WORDS_KEY 
a8ad					DMARK "ALL" 
a8ad f5				push af  
a8ae 3a c2 a8			ld a, (.dmark)  
a8b1 32 65 ee			ld (debug_mark),a  
a8b4 3a c3 a8			ld a, (.dmark+1)  
a8b7 32 66 ee			ld (debug_mark+1),a  
a8ba 3a c4 a8			ld a, (.dmark+2)  
a8bd 32 67 ee			ld (debug_mark+2),a  
a8c0 18 03			jr .pastdmark  
a8c2 ..			.dmark: db "ALL"  
a8c5 f1			.pastdmark: pop af  
a8c6			endm  
# End of macro DMARK
a8c6					CALLMONITOR 
a8c6 cd 6f ee			call debug_vector  
a8c9				endm  
# End of macro CALLMONITOR
a8c9				endif 
a8c9 c3 f3 a8			jp .mallocc 
a8cc			.MALLOC2: 
a8cc			CWHEAD .FREE 66 "MALLOC" 6 WORD_FLAG_CODE 
a8cc 56				db WORD_SYS_CORE+66             
a8cd 0a a9			dw .FREE            
a8cf 07				db 6 + 1 
a8d0 .. 00			db "MALLOC",0              
a8d7				endm 
# End of macro CWHEAD
a8d7			; | MALLOC ( u -- u ) Allocate u bytes of memory space and push the pointer TOS  | DONE 
a8d7				; get byte count 
a8d7				if DEBUG_FORTH_WORDS_KEY 
a8d7					DMARK "MAL" 
a8d7 f5				push af  
a8d8 3a ec a8			ld a, (.dmark)  
a8db 32 65 ee			ld (debug_mark),a  
a8de 3a ed a8			ld a, (.dmark+1)  
a8e1 32 66 ee			ld (debug_mark+1),a  
a8e4 3a ee a8			ld a, (.dmark+2)  
a8e7 32 67 ee			ld (debug_mark+2),a  
a8ea 18 03			jr .pastdmark  
a8ec ..			.dmark: db "MAL"  
a8ef f1			.pastdmark: pop af  
a8f0			endm  
# End of macro DMARK
a8f0					CALLMONITOR 
a8f0 cd 6f ee			call debug_vector  
a8f3				endm  
# End of macro CALLMONITOR
a8f3				endif 
a8f3			.mallocc: 
a8f3				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a8f3 cd 8a 9c			call macro_dsp_valuehl 
a8f6				endm 
# End of macro FORTH_DSP_VALUEHL
a8f6			 
a8f6			;		push hl 
a8f6			 
a8f6				; destroy value TOS 
a8f6			 
a8f6				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a8f6 cd 42 9d			call macro_forth_dsp_pop 
a8f9				endm 
# End of macro FORTH_DSP_POP
a8f9			 
a8f9			;		pop hl 
a8f9 cd c5 90			call malloc 
a8fc			if DEBUG_FORTH_MALLOC_GUARD 
a8fc f5				push af 
a8fd cd 13 8d			call ishlzero 
a900			;		ld a, l 
a900			;		add h 
a900			;		cp 0 
a900 f1				pop af 
a901				 
a901 cc 64 cf			call z,malloc_error 
a904			endif 
a904			 
a904 cd 85 9a			call forth_push_numhl 
a907				NEXTW 
a907 c3 75 9e			jp macro_next 
a90a				endm 
# End of macro NEXTW
a90a			 
a90a			.FREE: 
a90a			CWHEAD .LIST 67 "FREE" 4 WORD_FLAG_CODE 
a90a 57				db WORD_SYS_CORE+67             
a90b 3b a9			dw .LIST            
a90d 05				db 4 + 1 
a90e .. 00			db "FREE",0              
a913				endm 
# End of macro CWHEAD
a913			; | FREE ( u --  ) Free memory block from malloc given u address  | DONE 
a913				if DEBUG_FORTH_WORDS_KEY 
a913					DMARK "FRE" 
a913 f5				push af  
a914 3a 28 a9			ld a, (.dmark)  
a917 32 65 ee			ld (debug_mark),a  
a91a 3a 29 a9			ld a, (.dmark+1)  
a91d 32 66 ee			ld (debug_mark+1),a  
a920 3a 2a a9			ld a, (.dmark+2)  
a923 32 67 ee			ld (debug_mark+2),a  
a926 18 03			jr .pastdmark  
a928 ..			.dmark: db "FRE"  
a92b f1			.pastdmark: pop af  
a92c			endm  
# End of macro DMARK
a92c					CALLMONITOR 
a92c cd 6f ee			call debug_vector  
a92f				endm  
# End of macro CALLMONITOR
a92f				endif 
a92f				; get address 
a92f			 
a92f				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a92f cd 8a 9c			call macro_dsp_valuehl 
a932				endm 
# End of macro FORTH_DSP_VALUEHL
a932			 
a932			;		push hl 
a932			 
a932				; destroy value TOS 
a932			 
a932				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a932 cd 42 9d			call macro_forth_dsp_pop 
a935				endm 
# End of macro FORTH_DSP_POP
a935			 
a935			;		pop hl 
a935			if FORTH_ENABLE_MALLOCFREE 
a935 cd 8f 91			call free 
a938			endif 
a938				NEXTW 
a938 c3 75 9e			jp macro_next 
a93b				endm 
# End of macro NEXTW
a93b			.LIST: 
a93b			CWHEAD .FORGET 72 "LIST" 4 WORD_FLAG_CODE 
a93b 5c				db WORD_SYS_CORE+72             
a93c 37 ab			dw .FORGET            
a93e 05				db 4 + 1 
a93f .. 00			db "LIST",0              
a944				endm 
# End of macro CWHEAD
a944			; | LIST ( uword -- u )    List the code to the word that is quoted (so as not to exec) on TOS | DONE 
a944			; | | The quoted word must be in upper case. 
a944			if DEBUG_FORTH_WORDS_KEY 
a944				DMARK "LST" 
a944 f5				push af  
a945 3a 59 a9			ld a, (.dmark)  
a948 32 65 ee			ld (debug_mark),a  
a94b 3a 5a a9			ld a, (.dmark+1)  
a94e 32 66 ee			ld (debug_mark+1),a  
a951 3a 5b a9			ld a, (.dmark+2)  
a954 32 67 ee			ld (debug_mark+2),a  
a957 18 03			jr .pastdmark  
a959 ..			.dmark: db "LST"  
a95c f1			.pastdmark: pop af  
a95d			endm  
# End of macro DMARK
a95d				CALLMONITOR 
a95d cd 6f ee			call debug_vector  
a960				endm  
# End of macro CALLMONITOR
a960			endif 
a960			 
a960				FORTH_DSP_VALUEHL 
a960 cd 8a 9c			call macro_dsp_valuehl 
a963				endm 
# End of macro FORTH_DSP_VALUEHL
a963			 
a963 e5				push hl 
a964				FORTH_DSP_POP 
a964 cd 42 9d			call macro_forth_dsp_pop 
a967				endm 
# End of macro FORTH_DSP_POP
a967 c1				pop bc 
a968			 
a968			; Start format of scratch string 
a968			 
a968 21 bb e2			ld hl, scratch 
a96b			 
a96b 3e 3a			ld a, ':' 
a96d 77				ld (hl),a 
a96e 23				inc hl 
a96f 3e 20			ld a, ' ' 
a971 77				ld (hl), a 
a972			 
a972				; Get ptr to the word we need to look up 
a972			 
a972			;		FORTH_DSP_VALUEHL 
a972				;v5 FORTH_DSP_VALUE 
a972			; TODO type check 
a972			;		inc hl    ; Skip type check  
a972			;		push hl 
a972			;		ex de, hl    ; put into DE 
a972			 
a972			 
a972 21 b6 e0			ld hl, baseram 
a975				;ld hl, baseusermem 
a975			 
a975 e5			push hl   ; sacreifical push 
a976			 
a976			.ldouscanm: 
a976 e1			pop hl 
a977			.ldouscan: 
a977			if DEBUG_FORTH_WORDS 
a977				DMARK "LSs" 
a977 f5				push af  
a978 3a 8c a9			ld a, (.dmark)  
a97b 32 65 ee			ld (debug_mark),a  
a97e 3a 8d a9			ld a, (.dmark+1)  
a981 32 66 ee			ld (debug_mark+1),a  
a984 3a 8e a9			ld a, (.dmark+2)  
a987 32 67 ee			ld (debug_mark+2),a  
a98a 18 03			jr .pastdmark  
a98c ..			.dmark: db "LSs"  
a98f f1			.pastdmark: pop af  
a990			endm  
# End of macro DMARK
a990				CALLMONITOR 
a990 cd 6f ee			call debug_vector  
a993				endm  
# End of macro CALLMONITOR
a993			endif 
a993			; skip dict stub 
a993 cd b2 9f			call forth_tok_next 
a996			 
a996			 
a996			; while we have words to look for 
a996			 
a996 7e			ld a, (hl)      
a997			if DEBUG_FORTH_WORDS 
a997				DMARK "LSk" 
a997 f5				push af  
a998 3a ac a9			ld a, (.dmark)  
a99b 32 65 ee			ld (debug_mark),a  
a99e 3a ad a9			ld a, (.dmark+1)  
a9a1 32 66 ee			ld (debug_mark+1),a  
a9a4 3a ae a9			ld a, (.dmark+2)  
a9a7 32 67 ee			ld (debug_mark+2),a  
a9aa 18 03			jr .pastdmark  
a9ac ..			.dmark: db "LSk"  
a9af f1			.pastdmark: pop af  
a9b0			endm  
# End of macro DMARK
a9b0				CALLMONITOR 
a9b0 cd 6f ee			call debug_vector  
a9b3				endm  
# End of macro CALLMONITOR
a9b3			endif 
a9b3				;cp WORD_SYS_END 
a9b3				;jp z, .lunotfound 
a9b3			 
a9b3					; if we hit non uwords then gone too far 
a9b3 fe 01				cp WORD_SYS_UWORD 
a9b5 c2 f3 aa				jp nz, .lunotfound 
a9b8			 
a9b8				if DEBUG_FORTH_WORDS 
a9b8					DMARK "LSu" 
a9b8 f5				push af  
a9b9 3a cd a9			ld a, (.dmark)  
a9bc 32 65 ee			ld (debug_mark),a  
a9bf 3a ce a9			ld a, (.dmark+1)  
a9c2 32 66 ee			ld (debug_mark+1),a  
a9c5 3a cf a9			ld a, (.dmark+2)  
a9c8 32 67 ee			ld (debug_mark+2),a  
a9cb 18 03			jr .pastdmark  
a9cd ..			.dmark: db "LSu"  
a9d0 f1			.pastdmark: pop af  
a9d1			endm  
# End of macro DMARK
a9d1					CALLMONITOR 
a9d1 cd 6f ee			call debug_vector  
a9d4				endm  
# End of macro CALLMONITOR
a9d4				endif 
a9d4			 
a9d4					; found a uword but is it the one we want... 
a9d4			 
a9d4 c5					push bc     ; uword to find is on bc 
a9d5 d1					pop de 
a9d6			 
a9d6 e5					push hl  ; to save the ptr 
a9d7			 
a9d7					; skip opcode 
a9d7 23					inc hl  
a9d8					; skip next ptr 
a9d8 23					inc hl  
a9d9 23					inc hl 
a9da					; skip len 
a9da 23					inc hl 
a9db			 
a9db				if DEBUG_FORTH_WORDS 
a9db					DMARK "LSc" 
a9db f5				push af  
a9dc 3a f0 a9			ld a, (.dmark)  
a9df 32 65 ee			ld (debug_mark),a  
a9e2 3a f1 a9			ld a, (.dmark+1)  
a9e5 32 66 ee			ld (debug_mark+1),a  
a9e8 3a f2 a9			ld a, (.dmark+2)  
a9eb 32 67 ee			ld (debug_mark+2),a  
a9ee 18 03			jr .pastdmark  
a9f0 ..			.dmark: db "LSc"  
a9f3 f1			.pastdmark: pop af  
a9f4			endm  
# End of macro DMARK
a9f4					CALLMONITOR 
a9f4 cd 6f ee			call debug_vector  
a9f7				endm  
# End of macro CALLMONITOR
a9f7				endif 
a9f7			; was exiting on the shorter of the words. swap and test is in favour of the longer word. 
a9f7			; ie. If WOO is defined first and then WO. Couldnt list WO. 
a9f7			; Nope that has gone the other way. It needs to be exact not on first zero 
a9f7			;		call strcmp 
a9f7 c5					push bc 
a9f8 cd 95 90				call StrictStrCmp 
a9fb c1					pop bc 
a9fc c2 76 a9				jp nz, .ldouscanm 
a9ff				 
a9ff			 
a9ff			 
a9ff					; we have a uword so push its name to the stack 
a9ff			 
a9ff			;	   	push hl  ; save so we can move to next dict block 
a9ff e1			pop hl 
aa00			 
aa00				if DEBUG_FORTH_WORDS 
aa00					DMARK "LSm" 
aa00 f5				push af  
aa01 3a 15 aa			ld a, (.dmark)  
aa04 32 65 ee			ld (debug_mark),a  
aa07 3a 16 aa			ld a, (.dmark+1)  
aa0a 32 66 ee			ld (debug_mark+1),a  
aa0d 3a 17 aa			ld a, (.dmark+2)  
aa10 32 67 ee			ld (debug_mark+2),a  
aa13 18 03			jr .pastdmark  
aa15 ..			.dmark: db "LSm"  
aa18 f1			.pastdmark: pop af  
aa19			endm  
# End of macro DMARK
aa19					CALLMONITOR 
aa19 cd 6f ee			call debug_vector  
aa1c				endm  
# End of macro CALLMONITOR
aa1c				endif 
aa1c			 
aa1c					; skip opcode 
aa1c 23					inc hl  
aa1d					; skip next ptr 
aa1d 23					inc hl  
aa1e 23					inc hl 
aa1f					; skip len 
aa1f 7e					ld a, (hl)   ; save length to add 
aa20				if DEBUG_FORTH_WORDS 
aa20					DMARK "LS2" 
aa20 f5				push af  
aa21 3a 35 aa			ld a, (.dmark)  
aa24 32 65 ee			ld (debug_mark),a  
aa27 3a 36 aa			ld a, (.dmark+1)  
aa2a 32 66 ee			ld (debug_mark+1),a  
aa2d 3a 37 aa			ld a, (.dmark+2)  
aa30 32 67 ee			ld (debug_mark+2),a  
aa33 18 03			jr .pastdmark  
aa35 ..			.dmark: db "LS2"  
aa38 f1			.pastdmark: pop af  
aa39			endm  
# End of macro DMARK
aa39					CALLMONITOR 
aa39 cd 6f ee			call debug_vector  
aa3c				endm  
# End of macro CALLMONITOR
aa3c				endif 
aa3c			 
aa3c					; save this location 
aa3c				 
aa3c e5					push hl 
aa3d			 
aa3d 23					inc hl 
aa3e 11 bd e2				ld de, scratch+2 
aa41 4f					ld c, a 
aa42 06 00				ld b, 0 
aa44			 
aa44				if DEBUG_FORTH_WORDS 
aa44					DMARK "LSn" 
aa44 f5				push af  
aa45 3a 59 aa			ld a, (.dmark)  
aa48 32 65 ee			ld (debug_mark),a  
aa4b 3a 5a aa			ld a, (.dmark+1)  
aa4e 32 66 ee			ld (debug_mark+1),a  
aa51 3a 5b aa			ld a, (.dmark+2)  
aa54 32 67 ee			ld (debug_mark+2),a  
aa57 18 03			jr .pastdmark  
aa59 ..			.dmark: db "LSn"  
aa5c f1			.pastdmark: pop af  
aa5d			endm  
# End of macro DMARK
aa5d					CALLMONITOR 
aa5d cd 6f ee			call debug_vector  
aa60				endm  
# End of macro CALLMONITOR
aa60				endif 
aa60			 
aa60					; copy uword name to scratch 
aa60			 
aa60			;		ldir 
aa60			.licplw:	; copy uword name to scratch converting to lower case as we go 
aa60 ed a0				ldi 
aa62 1b					dec de 
aa63 1a					ld a, (de) 
aa64 cd 68 8f				call to_lower 
aa67 12					ld (de),a 
aa68 13					inc de 
aa69 3e 00				ld a, 0 
aa6b b9					cp c 
aa6c 20 f2				jr nz, .licplw 
aa6e			 
aa6e			 
aa6e			 
aa6e 1b					dec de 
aa6f 3e 20				ld a, ' '    ; change null to space 
aa71 12					ld (de), a 
aa72			 
aa72 13					inc de 
aa73			 
aa73 d5					push de 
aa74 c1					pop bc     ; move scratch pointer to end of word name and save it 
aa75			 
aa75 e1					pop hl 
aa76 7e					ld a, (hl) 
aa77					;inc hl 
aa77					; skip word string 
aa77 cd ea 8c				call addatohl 
aa7a			 
aa7a 23					inc hl 
aa7b			 
aa7b				if DEBUG_FORTH_WORDS 
aa7b					DMARK "LS3" 
aa7b f5				push af  
aa7c 3a 90 aa			ld a, (.dmark)  
aa7f 32 65 ee			ld (debug_mark),a  
aa82 3a 91 aa			ld a, (.dmark+1)  
aa85 32 66 ee			ld (debug_mark+1),a  
aa88 3a 92 aa			ld a, (.dmark+2)  
aa8b 32 67 ee			ld (debug_mark+2),a  
aa8e 18 03			jr .pastdmark  
aa90 ..			.dmark: db "LS3"  
aa93 f1			.pastdmark: pop af  
aa94			endm  
# End of macro DMARK
aa94					CALLMONITOR 
aa94 cd 6f ee			call debug_vector  
aa97				endm  
# End of macro CALLMONITOR
aa97				endif 
aa97					; should now be at the start of the machine code to setup the eval of the uword 
aa97					; now locate the ptr to the string defintion 
aa97			 
aa97					; skip ld hl, 
aa97					; then load the ptr 
aa97			; TODO use get from hl ptr 
aa97 23					inc hl 
aa98 5e					ld e, (hl) 
aa99 23					inc hl 
aa9a 56					ld d, (hl) 
aa9b eb					ex de, hl 
aa9c			 
aa9c			 
aa9c				if DEBUG_FORTH_WORDS 
aa9c					DMARK "LSt" 
aa9c f5				push af  
aa9d 3a b1 aa			ld a, (.dmark)  
aaa0 32 65 ee			ld (debug_mark),a  
aaa3 3a b2 aa			ld a, (.dmark+1)  
aaa6 32 66 ee			ld (debug_mark+1),a  
aaa9 3a b3 aa			ld a, (.dmark+2)  
aaac 32 67 ee			ld (debug_mark+2),a  
aaaf 18 03			jr .pastdmark  
aab1 ..			.dmark: db "LSt"  
aab4 f1			.pastdmark: pop af  
aab5			endm  
# End of macro DMARK
aab5					CALLMONITOR 
aab5 cd 6f ee			call debug_vector  
aab8				endm  
# End of macro CALLMONITOR
aab8				endif 
aab8			 
aab8			; cant push right now due to tokenised strings  
aab8			 
aab8			; get the destination of where to copy this definition to. 
aab8			 
aab8 c5					push bc 
aab9 d1					pop de 
aaba			 
aaba 7e			.listl:         ld a,(hl) 
aabb fe 00				cp 0 
aabd 28 09				jr z, .lreplsp     ; replace zero with space 
aabf					;cp FORTH_END_BUFFER 
aabf fe 3b				cp ';'    ; No end buffer flag but the ';' will be a good sign of the end of definition 
aac1 28 0a				jr z, .listdone    ; at end of uword defination to close of scratch and finish 
aac3				 
aac3					; just copy this char as is then 
aac3			 
aac3 12					ld (de), a 
aac4			 
aac4 23			.listnxt:	inc hl 
aac5 13					inc de 
aac6 18 f2				jr .listl 
aac8			 
aac8 3e 20		.lreplsp:	ld a,' ' 
aaca 12					ld (de), a 
aacb 18 f7				jr .listnxt 
aacd			 
aacd			; close up uword def 
aacd			 
aacd			.listdone: 
aacd 12					ld (de), a 
aace 13					inc de 
aacf 3e 00				ld a, 0 
aad1 12					ld (de), a 
aad2			 
aad2			; now have def so clean up and push to stack 
aad2			 
aad2 21 bb e2				ld hl, scratch 
aad5				if DEBUG_FORTH_WORDS 
aad5					DMARK "Ltp" 
aad5 f5				push af  
aad6 3a ea aa			ld a, (.dmark)  
aad9 32 65 ee			ld (debug_mark),a  
aadc 3a eb aa			ld a, (.dmark+1)  
aadf 32 66 ee			ld (debug_mark+1),a  
aae2 3a ec aa			ld a, (.dmark+2)  
aae5 32 67 ee			ld (debug_mark+2),a  
aae8 18 03			jr .pastdmark  
aaea ..			.dmark: db "Ltp"  
aaed f1			.pastdmark: pop af  
aaee			endm  
# End of macro DMARK
aaee					CALLMONITOR 
aaee cd 6f ee			call debug_vector  
aaf1				endm  
# End of macro CALLMONITOR
aaf1				endif 
aaf1			 
aaf1 18 1f			jr .listpush 
aaf3			 
aaf3			;.lnuword:	pop hl 
aaf3			;		call forth_tok_next 
aaf3			;		jp .ldouscan  
aaf3			 
aaf3			.lunotfound:		  
aaf3			 
aaf3				if DEBUG_FORTH_WORDS 
aaf3					DMARK "LSn" 
aaf3 f5				push af  
aaf4 3a 08 ab			ld a, (.dmark)  
aaf7 32 65 ee			ld (debug_mark),a  
aafa 3a 09 ab			ld a, (.dmark+1)  
aafd 32 66 ee			ld (debug_mark+1),a  
ab00 3a 0a ab			ld a, (.dmark+2)  
ab03 32 67 ee			ld (debug_mark+2),a  
ab06 18 03			jr .pastdmark  
ab08 ..			.dmark: db "LSn"  
ab0b f1			.pastdmark: pop af  
ab0c			endm  
# End of macro DMARK
ab0c					CALLMONITOR 
ab0c cd 6f ee			call debug_vector  
ab0f				endm  
# End of macro CALLMONITOR
ab0f				endif 
ab0f			 
ab0f					 
ab0f			;		FORTH_DSP_POP 
ab0f			;		ld hl, .luno 
ab0f			 
ab0f					NEXTW			 
ab0f c3 75 9e			jp macro_next 
ab12				endm 
# End of macro NEXTW
ab12			 
ab12			.listpush: 
ab12				if DEBUG_FORTH_WORDS 
ab12					DMARK "LS>" 
ab12 f5				push af  
ab13 3a 27 ab			ld a, (.dmark)  
ab16 32 65 ee			ld (debug_mark),a  
ab19 3a 28 ab			ld a, (.dmark+1)  
ab1c 32 66 ee			ld (debug_mark+1),a  
ab1f 3a 29 ab			ld a, (.dmark+2)  
ab22 32 67 ee			ld (debug_mark+2),a  
ab25 18 03			jr .pastdmark  
ab27 ..			.dmark: db "LS>"  
ab2a f1			.pastdmark: pop af  
ab2b			endm  
# End of macro DMARK
ab2b					CALLMONITOR 
ab2b cd 6f ee			call debug_vector  
ab2e				endm  
# End of macro CALLMONITOR
ab2e				endif 
ab2e cd f3 9a				call forth_push_str 
ab31			 
ab31			 
ab31			 
ab31					NEXTW 
ab31 c3 75 9e			jp macro_next 
ab34				endm 
# End of macro NEXTW
ab34			 
ab34			;.luno:    db "Word not found",0 
ab34			 
ab34			 
ab34			 
ab34			 
ab34			 
ab34			;		push hl   ; save pointer to start of uword def string 
ab34			; 
ab34			;; look for FORTH_EOL_LINE 
ab34			;		ld a, FORTH_END_BUFFER 
ab34			;		call strlent 
ab34			; 
ab34			;		inc hl		 ; space for coln def 
ab34			;		inc hl 
ab34			;		inc hl          ; space for terms 
ab34			;		inc hl 
ab34			; 
ab34			;		ld a, 20   ; TODO get actual length 
ab34			;		call addatohl    ; include a random amount of room for the uword name 
ab34			; 
ab34			;		 
ab34			;	if DEBUG_FORTH_WORDS 
ab34			;		DMARK "Lt1" 
ab34			;		CALLMONITOR 
ab34			;	endif 
ab34			;		 
ab34			; 
ab34			;; malloc space for the string because we cant change it 
ab34			; 
ab34			;		call malloc 
ab34			;	if DEBUG_FORTH_MALLOC_GUARD 
ab34			;		push af 
ab34			;		call ishlzero 
ab34			;		pop af 
ab34			;		 
ab34			;		call z,malloc_error 
ab34			;	endif 
ab34			; 
ab34			;	if DEBUG_FORTH_WORDS 
ab34			;		DMARK "Lt2" 
ab34			;		CALLMONITOR 
ab34			;	endif 
ab34			;		pop de 
ab34			;		push hl    ; push the malloc to release later 
ab34			;		push hl   ;  push back a copy for the later stack push 
ab34			;		 
ab34			;; copy the string swapping out the zero terms for spaces 
ab34			; 
ab34			;		; de has our source 
ab34			;		; hl has our dest 
ab34			; 
ab34			;; add the coln def 
ab34			; 
ab34			;		ld a, ':' 
ab34			;		ld (hl), a 
ab34			;		inc hl 
ab34			;		ld a, ' ' 
ab34			;		ld (hl), a 
ab34			;		inc hl 
ab34			; 
ab34			;; add the uname word 
ab34			;		push de   ; save our string for now 
ab34			;		ex de, hl 
ab34			; 
ab34			;		FORTH_DSP_VALUE 
ab34			;		;v5 FORTH_DSP_VALUE 
ab34			; 
ab34			;		inc hl   ; skip type but we know by now this is OK 
ab34			; 
ab34			;.luword:	ld a,(hl) 
ab34			;		cp 0 
ab34			;		jr z, .luword2 
ab34			;		ld (de), a 
ab34			;		inc de 
ab34			;		inc hl 
ab34			;		jr .luword 
ab34			; 
ab34			;.luword2:	ld a, ' ' 
ab34			;		ld (de), a 
ab34			;;		inc hl 
ab34			;;		inc de 
ab34			;;		ld (de), a 
ab34			;;		inc hl 
ab34			;		inc de 
ab34			; 
ab34			;		ex de, hl 
ab34			;		pop de 
ab34			;		 
ab34			;		 
ab34			; 
ab34			;; detoken that string and copy it 
ab34			; 
ab34			;	if DEBUG_FORTH_WORDS 
ab34			;		DMARK "Lt2" 
ab34			;		CALLMONITOR 
ab34			;	endif 
ab34			;.ldetok:	ld a, (de) 
ab34			;		cp FORTH_END_BUFFER 
ab34			;		jr z, .ldetokend 
ab34			;		; swap out any zero term for space 
ab34			;		cp 0 
ab34			;		jr nz, .ldetoknext 
ab34			;		ld a, ' ' 
ab34			; 
ab34			;	if DEBUG_FORTH_WORDS 
ab34			;		DMARK "LtS" 
ab34			;		CALLMONITOR 
ab34			;	endif 
ab34			;.ldetoknext:	ld (hl), a 
ab34			;		inc de 
ab34			;		inc hl 
ab34			;		jr .ldetok 
ab34			; 
ab34			;.ldetokend:	ld a, 0    ; replace forth eol with string term for pushing 
ab34			;		ld (hl), a  
ab34			; 
ab34			;; free that temp malloc 
ab34			; 
ab34			;		pop hl    
ab34			; 
ab34			;	if DEBUG_FORTH_WORDS 
ab34			;		DMARK "Lt4" 
ab34			;		CALLMONITOR 
ab34			;	endif 
ab34			;		call forth_apushstrhl 
ab34			; 
ab34			;		; get rid of temp malloc area 
ab34			; 
ab34			;		pop hl 
ab34			;		call free 
ab34			; 
ab34			;		jr .ludone 
ab34			; 
ab34			;.lnuword:	pop hl 
ab34			;		call forth_tok_next 
ab34			;		jp .ldouscan  
ab34			; 
ab34			;.ludone:		 pop hl 
ab34			; 
ab34					NEXTW 
ab34 c3 75 9e			jp macro_next 
ab37				endm 
# End of macro NEXTW
ab37			 
ab37			.FORGET: 
ab37				CWHEAD .NOP 73 "FORGET" 6 WORD_FLAG_CODE 
ab37 5d				db WORD_SYS_CORE+73             
ab38 b0 ab			dw .NOP            
ab3a 07				db 6 + 1 
ab3b .. 00			db "FORGET",0              
ab42				endm 
# End of macro CWHEAD
ab42			; | FORGET ( uword -- )    Forget the uword on TOS | DONE 
ab42			; | | Will flag the word's op code to be deleted as well as replace the first char of the word with '_'. Quoted uword name must be in caps. 
ab42			; | |  
ab42			; | | e.g. "MORE" forget 
ab42					if DEBUG_FORTH_WORDS_KEY 
ab42						DMARK "FRG" 
ab42 f5				push af  
ab43 3a 57 ab			ld a, (.dmark)  
ab46 32 65 ee			ld (debug_mark),a  
ab49 3a 58 ab			ld a, (.dmark+1)  
ab4c 32 66 ee			ld (debug_mark+1),a  
ab4f 3a 59 ab			ld a, (.dmark+2)  
ab52 32 67 ee			ld (debug_mark+2),a  
ab55 18 03			jr .pastdmark  
ab57 ..			.dmark: db "FRG"  
ab5a f1			.pastdmark: pop af  
ab5b			endm  
# End of macro DMARK
ab5b						CALLMONITOR 
ab5b cd 6f ee			call debug_vector  
ab5e				endm  
# End of macro CALLMONITOR
ab5e					endif 
ab5e			 
ab5e				; find uword 
ab5e			        ; update start of word with "_" 
ab5e				; replace uword with deleted flag 
ab5e			 
ab5e			 
ab5e			;	if DEBUG_FORTH_WORDS 
ab5e			;		DMARK "FOG" 
ab5e			;		CALLMONITOR 
ab5e			;	endif 
ab5e			 
ab5e			 
ab5e					; Get ptr to the word we need to look up 
ab5e			 
ab5e					FORTH_DSP_VALUEHL 
ab5e cd 8a 9c			call macro_dsp_valuehl 
ab61				endm 
# End of macro FORTH_DSP_VALUEHL
ab61					;v5 FORTH_DSP_VALUE 
ab61				; TODO type check 
ab61			;		inc hl    ; Skip type check  
ab61 e5					push hl 
ab62 c1					pop bc 
ab63			;		ex de, hl    ; put into DE 
ab63			 
ab63			 
ab63 21 b6 e0				ld hl, baseram 
ab66					;ld hl, baseusermem 
ab66			 
ab66				; skip dict stub 
ab66			;	call forth_tok_next 
ab66 e5			push hl   ; sacreifical push 
ab67			 
ab67			.fldouscanm: 
ab67 e1				pop hl 
ab68			.fldouscan: 
ab68			;	if DEBUG_FORTH_WORDS 
ab68			;		DMARK "LSs" 
ab68			;		CALLMONITOR 
ab68			;	endif 
ab68				; skip dict stub 
ab68 cd b2 9f				call forth_tok_next 
ab6b			 
ab6b			 
ab6b			; while we have words to look for 
ab6b			 
ab6b 7e				ld a, (hl)      
ab6c			;	if DEBUG_FORTH_WORDS 
ab6c			;		DMARK "LSk" 
ab6c			;		CALLMONITOR 
ab6c			;	endif 
ab6c fe 00				cp WORD_SYS_END 
ab6e ca aa ab				jp z, .flunotfound 
ab71 fe 01				cp WORD_SYS_UWORD 
ab73 c2 68 ab				jp nz, .fldouscan 
ab76			 
ab76			;	if DEBUG_FORTH_WORDS 
ab76			;		DMARK "LSu" 
ab76			;		CALLMONITOR 
ab76			;	endif 
ab76			 
ab76					; found a uword but is it the one we want... 
ab76			 
ab76 c5					push bc     ; uword to find is on bc 
ab77 d1					pop de 
ab78			 
ab78 e5					push hl  ; to save the ptr 
ab79			 
ab79					; skip opcode 
ab79 23					inc hl  
ab7a					; skip next ptr 
ab7a 23					inc hl  
ab7b 23					inc hl 
ab7c					; skip len 
ab7c 23					inc hl 
ab7d			 
ab7d			;	if DEBUG_FORTH_WORDS 
ab7d			;		DMARK "LSc" 
ab7d			;		CALLMONITOR 
ab7d			;	endif 
ab7d cd 88 90				call strcmp 
ab80 c2 67 ab				jp nz, .fldouscanm 
ab83			; 
ab83			; 
ab83			;; while we have words to look for 
ab83			; 
ab83			;.fdouscan:	ld a, (hl)      
ab83			;	if DEBUG_FORTH_WORDS 
ab83			;		DMARK "LSs" 
ab83			;		CALLMONITOR 
ab83			;	endif 
ab83			;		cp WORD_SYS_END 
ab83			;		jp z, .fudone 
ab83			;		cp WORD_SYS_UWORD 
ab83			;		jp nz, .fnuword 
ab83			; 
ab83			;	if DEBUG_FORTH_WORDS 
ab83			;		DMARK "FGu" 
ab83			;		CALLMONITOR 
ab83			;	endif 
ab83			; 
ab83			;		; found a uword but is it the one we want... 
ab83			; 
ab83			; 
ab83			;	        pop de   ; get back the dsp name 
ab83			;		push de 
ab83			; 
ab83			;		push hl  ; to save the ptr 
ab83			; 
ab83			;		; skip opcode 
ab83			;		inc hl  
ab83			;		; skip next ptr 
ab83			;		inc hl  
ab83			;		inc hl 
ab83			;		; skip len 
ab83			;		inc hl 
ab83			; 
ab83			;	if DEBUG_FORTH_WORDS 
ab83			;		DMARK "FGc" 
ab83			;		CALLMONITOR 
ab83			;	endif 
ab83			;		call strcmp 
ab83			;		jp nz, .fnuword 
ab83			 
ab83			 
ab83 e1			pop hl 
ab84			 
ab84				 
ab84				if DEBUG_FORTH_WORDS 
ab84					DMARK "FGm" 
ab84 f5				push af  
ab85 3a 99 ab			ld a, (.dmark)  
ab88 32 65 ee			ld (debug_mark),a  
ab8b 3a 9a ab			ld a, (.dmark+1)  
ab8e 32 66 ee			ld (debug_mark+1),a  
ab91 3a 9b ab			ld a, (.dmark+2)  
ab94 32 67 ee			ld (debug_mark+2),a  
ab97 18 03			jr .pastdmark  
ab99 ..			.dmark: db "FGm"  
ab9c f1			.pastdmark: pop af  
ab9d			endm  
# End of macro DMARK
ab9d					CALLMONITOR 
ab9d cd 6f ee			call debug_vector  
aba0				endm  
# End of macro CALLMONITOR
aba0				endif 
aba0			 
aba0			 
aba0			 
aba0					; we have a uword so push its name to the stack 
aba0			 
aba0			;	   	push hl  ; save so we can move to next dict block 
aba0			;pop hl 
aba0			 
aba0					; update opcode to deleted 
aba0 3e 03				ld a, WORD_SYS_DELETED 
aba2 77					ld (hl), a 
aba3			 
aba3 23					inc hl  
aba4					; skip next ptr 
aba4 23					inc hl  
aba5 23					inc hl 
aba6					; skip len 
aba6 23					inc hl 
aba7			 
aba7					; TODO change parser to skip deleted words but for now mark it out 
aba7 3e 5f				ld a, "_" 
aba9 77					ld  (hl),a 
abaa			 
abaa			;		jr .fudone 
abaa			; 
abaa			;.fnuword:	pop hl 
abaa			;		call forth_tok_next 
abaa			;		jp .fdouscan  
abaa			 
abaa			.flunotfound:		  
abaa			 
abaa			 
abaa					 
abaa					FORTH_DSP_POP 
abaa cd 42 9d			call macro_forth_dsp_pop 
abad				endm 
# End of macro FORTH_DSP_POP
abad			;		ld hl, .luno 
abad			;.fudone:		 pop hl 
abad					NEXTW 
abad c3 75 9e			jp macro_next 
abb0				endm 
# End of macro NEXTW
abb0			.NOP: 
abb0				CWHEAD .COMO 77 "NOP" 3 WORD_FLAG_CODE 
abb0 61				db WORD_SYS_CORE+77             
abb1 d7 ab			dw .COMO            
abb3 04				db 3 + 1 
abb4 .. 00			db "NOP",0              
abb8				endm 
# End of macro CWHEAD
abb8			; | NOP (  --  ) Do nothing | DONE 
abb8					if DEBUG_FORTH_WORDS_KEY 
abb8						DMARK "NOP" 
abb8 f5				push af  
abb9 3a cd ab			ld a, (.dmark)  
abbc 32 65 ee			ld (debug_mark),a  
abbf 3a ce ab			ld a, (.dmark+1)  
abc2 32 66 ee			ld (debug_mark+1),a  
abc5 3a cf ab			ld a, (.dmark+2)  
abc8 32 67 ee			ld (debug_mark+2),a  
abcb 18 03			jr .pastdmark  
abcd ..			.dmark: db "NOP"  
abd0 f1			.pastdmark: pop af  
abd1			endm  
# End of macro DMARK
abd1						CALLMONITOR 
abd1 cd 6f ee			call debug_vector  
abd4				endm  
# End of macro CALLMONITOR
abd4					endif 
abd4				       NEXTW 
abd4 c3 75 9e			jp macro_next 
abd7				endm 
# End of macro NEXTW
abd7			.COMO: 
abd7				CWHEAD .COMC 90 "(" 1 WORD_FLAG_CODE 
abd7 6e				db WORD_SYS_CORE+90             
abd8 29 ac			dw .COMC            
abda 02				db 1 + 1 
abdb .. 00			db "(",0              
abdd				endm 
# End of macro CWHEAD
abdd			; | ( ( -- )  Start of comment | DONE 
abdd			 
abdd			 
abdd 2a bc e5				ld hl, ( os_tok_ptr) 
abe0 11 24 ac			ld de, .closepar 
abe3					 
abe3					if DEBUG_FORTH_WORDS 
abe3						DMARK ").." 
abe3 f5				push af  
abe4 3a f8 ab			ld a, (.dmark)  
abe7 32 65 ee			ld (debug_mark),a  
abea 3a f9 ab			ld a, (.dmark+1)  
abed 32 66 ee			ld (debug_mark+1),a  
abf0 3a fa ab			ld a, (.dmark+2)  
abf3 32 67 ee			ld (debug_mark+2),a  
abf6 18 03			jr .pastdmark  
abf8 ..			.dmark: db ").."  
abfb f1			.pastdmark: pop af  
abfc			endm  
# End of macro DMARK
abfc						CALLMONITOR 
abfc cd 6f ee			call debug_vector  
abff				endm  
# End of macro CALLMONITOR
abff					endif 
abff cd 7c 9f			call findnexttok  
ac02			 
ac02					if DEBUG_FORTH_WORDS 
ac02						DMARK "IF5" 
ac02 f5				push af  
ac03 3a 17 ac			ld a, (.dmark)  
ac06 32 65 ee			ld (debug_mark),a  
ac09 3a 18 ac			ld a, (.dmark+1)  
ac0c 32 66 ee			ld (debug_mark+1),a  
ac0f 3a 19 ac			ld a, (.dmark+2)  
ac12 32 67 ee			ld (debug_mark+2),a  
ac15 18 03			jr .pastdmark  
ac17 ..			.dmark: db "IF5"  
ac1a f1			.pastdmark: pop af  
ac1b			endm  
# End of macro DMARK
ac1b						CALLMONITOR 
ac1b cd 6f ee			call debug_vector  
ac1e				endm  
# End of macro CALLMONITOR
ac1e					endif 
ac1e				; replace below with ) exec using tok_ptr 
ac1e 22 bc e5			ld (os_tok_ptr), hl 
ac21 c3 fe 9e			jp exec1 
ac24			 
ac24 .. 00			.closepar:   db ")",0 
ac26			 
ac26				       NEXTW 
ac26 c3 75 9e			jp macro_next 
ac29				endm 
# End of macro NEXTW
ac29			.COMC: 
ac29				CWHEAD .SCRATCH 91 ")" 1 WORD_FLAG_CODE 
ac29 6f				db WORD_SYS_CORE+91             
ac2a 32 ac			dw .SCRATCH            
ac2c 02				db 1 + 1 
ac2d .. 00			db ")",0              
ac2f				endm 
# End of macro CWHEAD
ac2f			; | ) ( -- )  End of comment |  DONE  
ac2f				       NEXTW 
ac2f c3 75 9e			jp macro_next 
ac32				endm 
# End of macro NEXTW
ac32			 
ac32			.SCRATCH: 
ac32				CWHEAD .INC 91 "SCRATCH" 7 WORD_FLAG_CODE 
ac32 6f				db WORD_SYS_CORE+91             
ac33 6d ac			dw .INC            
ac35 08				db 7 + 1 
ac36 .. 00			db "SCRATCH",0              
ac3e				endm 
# End of macro CWHEAD
ac3e			; | SCRATCH ( u -- addr ) Pushes address of offset u to stack | DONE 
ac3e			; | | The scratch area provides 32 word array. Can be used as single byte or as a word by passing the offset on stack. Pushes the resulting address to stack.  
ac3e			; | | When used with the direct storage writing/malloc and the !@ or word versions it is possible to construct an expanded and flexible variable system 
ac3e			; | |  
ac3e			; | | e.g.    : score $00 scratch ; 
ac3e			; | |  
ac3e			; | | $00 score ! 
ac3e			; | | $01 score +! 
ac3e			; | |  
ac3e			; | | e.g.   : varword $0a scratch ;  
ac3e			; | | 
ac3e			; | | $8000 varword ! 
ac3e					if DEBUG_FORTH_WORDS_KEY 
ac3e						DMARK "SCR" 
ac3e f5				push af  
ac3f 3a 53 ac			ld a, (.dmark)  
ac42 32 65 ee			ld (debug_mark),a  
ac45 3a 54 ac			ld a, (.dmark+1)  
ac48 32 66 ee			ld (debug_mark+1),a  
ac4b 3a 55 ac			ld a, (.dmark+2)  
ac4e 32 67 ee			ld (debug_mark+2),a  
ac51 18 03			jr .pastdmark  
ac53 ..			.dmark: db "SCR"  
ac56 f1			.pastdmark: pop af  
ac57			endm  
# End of macro DMARK
ac57						CALLMONITOR 
ac57 cd 6f ee			call debug_vector  
ac5a				endm  
# End of macro CALLMONITOR
ac5a					endif 
ac5a			 
ac5a					FORTH_DSP_VALUEHL 
ac5a cd 8a 9c			call macro_dsp_valuehl 
ac5d				endm 
# End of macro FORTH_DSP_VALUEHL
ac5d				 
ac5d					FORTH_DSP_POP 
ac5d cd 42 9d			call macro_forth_dsp_pop 
ac60				endm 
# End of macro FORTH_DSP_POP
ac60			 
ac60 7d					ld a, l 
ac61 21 e0 e7				ld hl, os_var_array 
ac64 cd ea 8c				call addatohl 
ac67			 
ac67 cd 85 9a				call forth_push_numhl 
ac6a			 
ac6a				       NEXTW 
ac6a c3 75 9e			jp macro_next 
ac6d				endm 
# End of macro NEXTW
ac6d			 
ac6d			.INC: 
ac6d				CWHEAD .DEC 91 "+!" 2 WORD_FLAG_CODE 
ac6d 6f				db WORD_SYS_CORE+91             
ac6e c3 ac			dw .DEC            
ac70 03				db 2 + 1 
ac71 .. 00			db "+!",0              
ac74				endm 
# End of macro CWHEAD
ac74			; | +! ( u a -- )  Increment byte at address a by the value u | DONE 
ac74					if DEBUG_FORTH_WORDS_KEY 
ac74						DMARK "+s_" 
ac74 f5				push af  
ac75 3a 89 ac			ld a, (.dmark)  
ac78 32 65 ee			ld (debug_mark),a  
ac7b 3a 8a ac			ld a, (.dmark+1)  
ac7e 32 66 ee			ld (debug_mark+1),a  
ac81 3a 8b ac			ld a, (.dmark+2)  
ac84 32 67 ee			ld (debug_mark+2),a  
ac87 18 03			jr .pastdmark  
ac89 ..			.dmark: db "+s_"  
ac8c f1			.pastdmark: pop af  
ac8d			endm  
# End of macro DMARK
ac8d						CALLMONITOR 
ac8d cd 6f ee			call debug_vector  
ac90				endm  
# End of macro CALLMONITOR
ac90					endif 
ac90			 
ac90					FORTH_DSP_VALUEHL 
ac90 cd 8a 9c			call macro_dsp_valuehl 
ac93				endm 
# End of macro FORTH_DSP_VALUEHL
ac93			 
ac93 e5					push hl   ; save address 
ac94			 
ac94					FORTH_DSP_POP 
ac94 cd 42 9d			call macro_forth_dsp_pop 
ac97				endm 
# End of macro FORTH_DSP_POP
ac97			 
ac97					FORTH_DSP_VALUEHL 
ac97 cd 8a 9c			call macro_dsp_valuehl 
ac9a				endm 
# End of macro FORTH_DSP_VALUEHL
ac9a			 
ac9a e5					push hl 
ac9b					FORTH_DSP_POP 
ac9b cd 42 9d			call macro_forth_dsp_pop 
ac9e				endm 
# End of macro FORTH_DSP_POP
ac9e e1					pop hl 
ac9f			 
ac9f					; hl contains value to add to byte at a 
ac9f				 
ac9f eb					ex de, hl 
aca0			 
aca0 e1					pop hl 
aca1			 
aca1					if DEBUG_FORTH_WORDS 
aca1						DMARK "INC" 
aca1 f5				push af  
aca2 3a b6 ac			ld a, (.dmark)  
aca5 32 65 ee			ld (debug_mark),a  
aca8 3a b7 ac			ld a, (.dmark+1)  
acab 32 66 ee			ld (debug_mark+1),a  
acae 3a b8 ac			ld a, (.dmark+2)  
acb1 32 67 ee			ld (debug_mark+2),a  
acb4 18 03			jr .pastdmark  
acb6 ..			.dmark: db "INC"  
acb9 f1			.pastdmark: pop af  
acba			endm  
# End of macro DMARK
acba						CALLMONITOR 
acba cd 6f ee			call debug_vector  
acbd				endm  
# End of macro CALLMONITOR
acbd					endif 
acbd			 
acbd 7e					ld a,(hl) 
acbe 83					add e 
acbf 77					ld (hl),a 
acc0			 
acc0			 
acc0			 
acc0				       NEXTW 
acc0 c3 75 9e			jp macro_next 
acc3				endm 
# End of macro NEXTW
acc3			 
acc3			.DEC: 
acc3				CWHEAD .INC2 91 "-!" 2 WORD_FLAG_CODE 
acc3 6f				db WORD_SYS_CORE+91             
acc4 17 ad			dw .INC2            
acc6 03				db 2 + 1 
acc7 .. 00			db "-!",0              
acca				endm 
# End of macro CWHEAD
acca			; | -! ( u a -- )  Decrement byte at address a by the value u | DONE 
acca					if DEBUG_FORTH_WORDS_KEY 
acca						DMARK "-s_" 
acca f5				push af  
accb 3a df ac			ld a, (.dmark)  
acce 32 65 ee			ld (debug_mark),a  
acd1 3a e0 ac			ld a, (.dmark+1)  
acd4 32 66 ee			ld (debug_mark+1),a  
acd7 3a e1 ac			ld a, (.dmark+2)  
acda 32 67 ee			ld (debug_mark+2),a  
acdd 18 03			jr .pastdmark  
acdf ..			.dmark: db "-s_"  
ace2 f1			.pastdmark: pop af  
ace3			endm  
# End of macro DMARK
ace3						CALLMONITOR 
ace3 cd 6f ee			call debug_vector  
ace6				endm  
# End of macro CALLMONITOR
ace6					endif 
ace6			 
ace6					FORTH_DSP_VALUEHL 
ace6 cd 8a 9c			call macro_dsp_valuehl 
ace9				endm 
# End of macro FORTH_DSP_VALUEHL
ace9			 
ace9 e5					push hl   ; save address 
acea			 
acea					FORTH_DSP_POP 
acea cd 42 9d			call macro_forth_dsp_pop 
aced				endm 
# End of macro FORTH_DSP_POP
aced			 
aced					FORTH_DSP_VALUEHL 
aced cd 8a 9c			call macro_dsp_valuehl 
acf0				endm 
# End of macro FORTH_DSP_VALUEHL
acf0			 
acf0					; hl contains value to add to byte at a 
acf0				 
acf0 eb					ex de, hl 
acf1			 
acf1 e1					pop hl 
acf2			 
acf2					if DEBUG_FORTH_WORDS 
acf2						DMARK "DEC" 
acf2 f5				push af  
acf3 3a 07 ad			ld a, (.dmark)  
acf6 32 65 ee			ld (debug_mark),a  
acf9 3a 08 ad			ld a, (.dmark+1)  
acfc 32 66 ee			ld (debug_mark+1),a  
acff 3a 09 ad			ld a, (.dmark+2)  
ad02 32 67 ee			ld (debug_mark+2),a  
ad05 18 03			jr .pastdmark  
ad07 ..			.dmark: db "DEC"  
ad0a f1			.pastdmark: pop af  
ad0b			endm  
# End of macro DMARK
ad0b						CALLMONITOR 
ad0b cd 6f ee			call debug_vector  
ad0e				endm  
# End of macro CALLMONITOR
ad0e					endif 
ad0e			 
ad0e 7e					ld a,(hl) 
ad0f 93					sub e 
ad10 77					ld (hl),a 
ad11			 
ad11			 
ad11					FORTH_DSP_POP 
ad11 cd 42 9d			call macro_forth_dsp_pop 
ad14				endm 
# End of macro FORTH_DSP_POP
ad14			 
ad14				       NEXTW 
ad14 c3 75 9e			jp macro_next 
ad17				endm 
# End of macro NEXTW
ad17			 
ad17			.INC2: 
ad17				CWHEAD .DEC2 91 "+2!" 3 WORD_FLAG_CODE 
ad17 6f				db WORD_SYS_CORE+91             
ad18 c4 ad			dw .DEC2            
ad1a 04				db 3 + 1 
ad1b .. 00			db "+2!",0              
ad1f				endm 
# End of macro CWHEAD
ad1f			; | +2! ( u a -- )  Increment word at address a by the value u | DONE 
ad1f			 
ad1f					if DEBUG_FORTH_WORDS_KEY 
ad1f						DMARK "+2s" 
ad1f f5				push af  
ad20 3a 34 ad			ld a, (.dmark)  
ad23 32 65 ee			ld (debug_mark),a  
ad26 3a 35 ad			ld a, (.dmark+1)  
ad29 32 66 ee			ld (debug_mark+1),a  
ad2c 3a 36 ad			ld a, (.dmark+2)  
ad2f 32 67 ee			ld (debug_mark+2),a  
ad32 18 03			jr .pastdmark  
ad34 ..			.dmark: db "+2s"  
ad37 f1			.pastdmark: pop af  
ad38			endm  
# End of macro DMARK
ad38						CALLMONITOR 
ad38 cd 6f ee			call debug_vector  
ad3b				endm  
# End of macro CALLMONITOR
ad3b					endif 
ad3b			 
ad3b					; Address 
ad3b			 
ad3b					FORTH_DSP_VALUEHL 
ad3b cd 8a 9c			call macro_dsp_valuehl 
ad3e				endm 
# End of macro FORTH_DSP_VALUEHL
ad3e			 
ad3e e5					push hl    ; save address 
ad3f			 
ad3f					; load content into de 
ad3f			 
ad3f 5e					ld e,(hl) 
ad40 23					inc hl 
ad41 56					ld d, (hl) 
ad42			 
ad42					if DEBUG_FORTH_WORDS 
ad42						DMARK "+2a" 
ad42 f5				push af  
ad43 3a 57 ad			ld a, (.dmark)  
ad46 32 65 ee			ld (debug_mark),a  
ad49 3a 58 ad			ld a, (.dmark+1)  
ad4c 32 66 ee			ld (debug_mark+1),a  
ad4f 3a 59 ad			ld a, (.dmark+2)  
ad52 32 67 ee			ld (debug_mark+2),a  
ad55 18 03			jr .pastdmark  
ad57 ..			.dmark: db "+2a"  
ad5a f1			.pastdmark: pop af  
ad5b			endm  
# End of macro DMARK
ad5b						CALLMONITOR 
ad5b cd 6f ee			call debug_vector  
ad5e				endm  
# End of macro CALLMONITOR
ad5e					endif 
ad5e			 
ad5e					FORTH_DSP_POP 
ad5e cd 42 9d			call macro_forth_dsp_pop 
ad61				endm 
# End of macro FORTH_DSP_POP
ad61			 
ad61					; Get value to add 
ad61			 
ad61					FORTH_DSP_VALUE 
ad61 cd 73 9c			call macro_forth_dsp_value 
ad64				endm 
# End of macro FORTH_DSP_VALUE
ad64			 
ad64					if DEBUG_FORTH_WORDS 
ad64						DMARK "+2v" 
ad64 f5				push af  
ad65 3a 79 ad			ld a, (.dmark)  
ad68 32 65 ee			ld (debug_mark),a  
ad6b 3a 7a ad			ld a, (.dmark+1)  
ad6e 32 66 ee			ld (debug_mark+1),a  
ad71 3a 7b ad			ld a, (.dmark+2)  
ad74 32 67 ee			ld (debug_mark+2),a  
ad77 18 03			jr .pastdmark  
ad79 ..			.dmark: db "+2v"  
ad7c f1			.pastdmark: pop af  
ad7d			endm  
# End of macro DMARK
ad7d						CALLMONITOR 
ad7d cd 6f ee			call debug_vector  
ad80				endm  
# End of macro CALLMONITOR
ad80					endif 
ad80			 
ad80 19					add hl, de 
ad81			 
ad81					if DEBUG_FORTH_WORDS 
ad81						DMARK "+2+" 
ad81 f5				push af  
ad82 3a 96 ad			ld a, (.dmark)  
ad85 32 65 ee			ld (debug_mark),a  
ad88 3a 97 ad			ld a, (.dmark+1)  
ad8b 32 66 ee			ld (debug_mark+1),a  
ad8e 3a 98 ad			ld a, (.dmark+2)  
ad91 32 67 ee			ld (debug_mark+2),a  
ad94 18 03			jr .pastdmark  
ad96 ..			.dmark: db "+2+"  
ad99 f1			.pastdmark: pop af  
ad9a			endm  
# End of macro DMARK
ad9a						CALLMONITOR 
ad9a cd 6f ee			call debug_vector  
ad9d				endm  
# End of macro CALLMONITOR
ad9d					endif 
ad9d			 
ad9d					; move result to de 
ad9d			 
ad9d eb					ex de, hl 
ad9e			 
ad9e					; Address 
ad9e			 
ad9e e1					pop hl 
ad9f			 
ad9f					; save it back 
ad9f			 
ad9f 73					ld (hl), e 
ada0 23					inc hl 
ada1 72					ld (hl), d 
ada2			 
ada2					if DEBUG_FORTH_WORDS 
ada2						DMARK "+2e" 
ada2 f5				push af  
ada3 3a b7 ad			ld a, (.dmark)  
ada6 32 65 ee			ld (debug_mark),a  
ada9 3a b8 ad			ld a, (.dmark+1)  
adac 32 66 ee			ld (debug_mark+1),a  
adaf 3a b9 ad			ld a, (.dmark+2)  
adb2 32 67 ee			ld (debug_mark+2),a  
adb5 18 03			jr .pastdmark  
adb7 ..			.dmark: db "+2e"  
adba f1			.pastdmark: pop af  
adbb			endm  
# End of macro DMARK
adbb						CALLMONITOR 
adbb cd 6f ee			call debug_vector  
adbe				endm  
# End of macro CALLMONITOR
adbe					endif 
adbe			 
adbe			 
adbe			 
adbe					FORTH_DSP_POP 
adbe cd 42 9d			call macro_forth_dsp_pop 
adc1				endm 
# End of macro FORTH_DSP_POP
adc1			 
adc1			 
adc1				       NEXTW 
adc1 c3 75 9e			jp macro_next 
adc4				endm 
# End of macro NEXTW
adc4			 
adc4			.DEC2: 
adc4				CWHEAD .GET2 91 "-2!" 3 WORD_FLAG_CODE 
adc4 6f				db WORD_SYS_CORE+91             
adc5 73 ae			dw .GET2            
adc7 04				db 3 + 1 
adc8 .. 00			db "-2!",0              
adcc				endm 
# End of macro CWHEAD
adcc			; | -2! ( u a -- )  Decrement word at address a by the value u | DONE 
adcc			 
adcc			 
adcc					if DEBUG_FORTH_WORDS_KEY 
adcc						DMARK "-2s" 
adcc f5				push af  
adcd 3a e1 ad			ld a, (.dmark)  
add0 32 65 ee			ld (debug_mark),a  
add3 3a e2 ad			ld a, (.dmark+1)  
add6 32 66 ee			ld (debug_mark+1),a  
add9 3a e3 ad			ld a, (.dmark+2)  
addc 32 67 ee			ld (debug_mark+2),a  
addf 18 03			jr .pastdmark  
ade1 ..			.dmark: db "-2s"  
ade4 f1			.pastdmark: pop af  
ade5			endm  
# End of macro DMARK
ade5						CALLMONITOR 
ade5 cd 6f ee			call debug_vector  
ade8				endm  
# End of macro CALLMONITOR
ade8					endif 
ade8			 
ade8					; Address 
ade8			 
ade8					FORTH_DSP_VALUEHL 
ade8 cd 8a 9c			call macro_dsp_valuehl 
adeb				endm 
# End of macro FORTH_DSP_VALUEHL
adeb			 
adeb e5					push hl    ; save address 
adec			 
adec					; load content into de 
adec			 
adec 5e					ld e,(hl) 
aded 23					inc hl 
adee 56					ld d, (hl) 
adef			 
adef					if DEBUG_FORTH_WORDS 
adef						DMARK "-2a" 
adef f5				push af  
adf0 3a 04 ae			ld a, (.dmark)  
adf3 32 65 ee			ld (debug_mark),a  
adf6 3a 05 ae			ld a, (.dmark+1)  
adf9 32 66 ee			ld (debug_mark+1),a  
adfc 3a 06 ae			ld a, (.dmark+2)  
adff 32 67 ee			ld (debug_mark+2),a  
ae02 18 03			jr .pastdmark  
ae04 ..			.dmark: db "-2a"  
ae07 f1			.pastdmark: pop af  
ae08			endm  
# End of macro DMARK
ae08						CALLMONITOR 
ae08 cd 6f ee			call debug_vector  
ae0b				endm  
# End of macro CALLMONITOR
ae0b					endif 
ae0b			 
ae0b					FORTH_DSP_POP 
ae0b cd 42 9d			call macro_forth_dsp_pop 
ae0e				endm 
# End of macro FORTH_DSP_POP
ae0e			 
ae0e					; Get value to remove 
ae0e			 
ae0e					FORTH_DSP_VALUE 
ae0e cd 73 9c			call macro_forth_dsp_value 
ae11				endm 
# End of macro FORTH_DSP_VALUE
ae11			 
ae11					if DEBUG_FORTH_WORDS 
ae11						DMARK "-2v" 
ae11 f5				push af  
ae12 3a 26 ae			ld a, (.dmark)  
ae15 32 65 ee			ld (debug_mark),a  
ae18 3a 27 ae			ld a, (.dmark+1)  
ae1b 32 66 ee			ld (debug_mark+1),a  
ae1e 3a 28 ae			ld a, (.dmark+2)  
ae21 32 67 ee			ld (debug_mark+2),a  
ae24 18 03			jr .pastdmark  
ae26 ..			.dmark: db "-2v"  
ae29 f1			.pastdmark: pop af  
ae2a			endm  
# End of macro DMARK
ae2a						CALLMONITOR 
ae2a cd 6f ee			call debug_vector  
ae2d				endm  
# End of macro CALLMONITOR
ae2d					endif 
ae2d			 
ae2d eb					ex de, hl 
ae2e ed 52				sbc hl, de 
ae30			 
ae30					if DEBUG_FORTH_WORDS 
ae30						DMARK "-2d" 
ae30 f5				push af  
ae31 3a 45 ae			ld a, (.dmark)  
ae34 32 65 ee			ld (debug_mark),a  
ae37 3a 46 ae			ld a, (.dmark+1)  
ae3a 32 66 ee			ld (debug_mark+1),a  
ae3d 3a 47 ae			ld a, (.dmark+2)  
ae40 32 67 ee			ld (debug_mark+2),a  
ae43 18 03			jr .pastdmark  
ae45 ..			.dmark: db "-2d"  
ae48 f1			.pastdmark: pop af  
ae49			endm  
# End of macro DMARK
ae49						CALLMONITOR 
ae49 cd 6f ee			call debug_vector  
ae4c				endm  
# End of macro CALLMONITOR
ae4c					endif 
ae4c			 
ae4c					; move result to de 
ae4c			 
ae4c eb					ex de, hl 
ae4d			 
ae4d					; Address 
ae4d			 
ae4d e1					pop hl 
ae4e			 
ae4e					; save it back 
ae4e			 
ae4e 73					ld (hl), e 
ae4f 23					inc hl 
ae50 72					ld (hl), d 
ae51			 
ae51					if DEBUG_FORTH_WORDS 
ae51						DMARK "-2e" 
ae51 f5				push af  
ae52 3a 66 ae			ld a, (.dmark)  
ae55 32 65 ee			ld (debug_mark),a  
ae58 3a 67 ae			ld a, (.dmark+1)  
ae5b 32 66 ee			ld (debug_mark+1),a  
ae5e 3a 68 ae			ld a, (.dmark+2)  
ae61 32 67 ee			ld (debug_mark+2),a  
ae64 18 03			jr .pastdmark  
ae66 ..			.dmark: db "-2e"  
ae69 f1			.pastdmark: pop af  
ae6a			endm  
# End of macro DMARK
ae6a						CALLMONITOR 
ae6a cd 6f ee			call debug_vector  
ae6d				endm  
# End of macro CALLMONITOR
ae6d					endif 
ae6d			 
ae6d			 
ae6d					FORTH_DSP_POP 
ae6d cd 42 9d			call macro_forth_dsp_pop 
ae70				endm 
# End of macro FORTH_DSP_POP
ae70			 
ae70			 
ae70			 
ae70				       NEXTW 
ae70 c3 75 9e			jp macro_next 
ae73				endm 
# End of macro NEXTW
ae73			.GET2: 
ae73				CWHEAD .BANG2 91 "2@" 2 WORD_FLAG_CODE 
ae73 6f				db WORD_SYS_CORE+91             
ae74 a8 ae			dw .BANG2            
ae76 03				db 2 + 1 
ae77 .. 00			db "2@",0              
ae7a				endm 
# End of macro CWHEAD
ae7a			; | 2@ ( a -- u )  Push word at address a onto stack | DONE 
ae7a					if DEBUG_FORTH_WORDS_KEY 
ae7a						DMARK "2A_" 
ae7a f5				push af  
ae7b 3a 8f ae			ld a, (.dmark)  
ae7e 32 65 ee			ld (debug_mark),a  
ae81 3a 90 ae			ld a, (.dmark+1)  
ae84 32 66 ee			ld (debug_mark+1),a  
ae87 3a 91 ae			ld a, (.dmark+2)  
ae8a 32 67 ee			ld (debug_mark+2),a  
ae8d 18 03			jr .pastdmark  
ae8f ..			.dmark: db "2A_"  
ae92 f1			.pastdmark: pop af  
ae93			endm  
# End of macro DMARK
ae93						CALLMONITOR 
ae93 cd 6f ee			call debug_vector  
ae96				endm  
# End of macro CALLMONITOR
ae96					endif 
ae96			 
ae96					FORTH_DSP_VALUEHL 
ae96 cd 8a 9c			call macro_dsp_valuehl 
ae99				endm 
# End of macro FORTH_DSP_VALUEHL
ae99			 
ae99 e5					push hl   ; save address 
ae9a			 
ae9a					FORTH_DSP_POP 
ae9a cd 42 9d			call macro_forth_dsp_pop 
ae9d				endm 
# End of macro FORTH_DSP_POP
ae9d			 
ae9d e1					pop hl 
ae9e			 
ae9e 5e					ld e, (hl) 
ae9f 23					inc hl 
aea0 56					ld d, (hl) 
aea1			 
aea1 eb					ex de, hl 
aea2			 
aea2 cd 85 9a				call forth_push_numhl 
aea5			 
aea5				       NEXTW 
aea5 c3 75 9e			jp macro_next 
aea8				endm 
# End of macro NEXTW
aea8			.BANG2: 
aea8				CWHEAD .CONFIG 91 "2!" 2 WORD_FLAG_CODE 
aea8 6f				db WORD_SYS_CORE+91             
aea9 e0 ae			dw .CONFIG            
aeab 03				db 2 + 1 
aeac .. 00			db "2!",0              
aeaf				endm 
# End of macro CWHEAD
aeaf			; | 2! ( u a -- )  Store value u as a word at address a | DONE 
aeaf					if DEBUG_FORTH_WORDS_KEY 
aeaf						DMARK "2S_" 
aeaf f5				push af  
aeb0 3a c4 ae			ld a, (.dmark)  
aeb3 32 65 ee			ld (debug_mark),a  
aeb6 3a c5 ae			ld a, (.dmark+1)  
aeb9 32 66 ee			ld (debug_mark+1),a  
aebc 3a c6 ae			ld a, (.dmark+2)  
aebf 32 67 ee			ld (debug_mark+2),a  
aec2 18 03			jr .pastdmark  
aec4 ..			.dmark: db "2S_"  
aec7 f1			.pastdmark: pop af  
aec8			endm  
# End of macro DMARK
aec8						CALLMONITOR 
aec8 cd 6f ee			call debug_vector  
aecb				endm  
# End of macro CALLMONITOR
aecb					endif 
aecb			 
aecb					FORTH_DSP_VALUEHL 
aecb cd 8a 9c			call macro_dsp_valuehl 
aece				endm 
# End of macro FORTH_DSP_VALUEHL
aece			 
aece e5					push hl   ; save address 
aecf			 
aecf			 
aecf					FORTH_DSP_POP 
aecf cd 42 9d			call macro_forth_dsp_pop 
aed2				endm 
# End of macro FORTH_DSP_POP
aed2			 
aed2					 
aed2					FORTH_DSP_VALUEHL 
aed2 cd 8a 9c			call macro_dsp_valuehl 
aed5				endm 
# End of macro FORTH_DSP_VALUEHL
aed5			 
aed5					FORTH_DSP_POP 
aed5 cd 42 9d			call macro_forth_dsp_pop 
aed8				endm 
# End of macro FORTH_DSP_POP
aed8			 
aed8 eb					ex de, hl    ; value now in de 
aed9			 
aed9 e1					pop hl 
aeda			 
aeda 73					ld (hl), e 
aedb			 
aedb 23					inc hl 
aedc			 
aedc 72					ld (hl), d 
aedd			 
aedd			 
aedd				       NEXTW 
aedd c3 75 9e			jp macro_next 
aee0				endm 
# End of macro NEXTW
aee0			.CONFIG: 
aee0				CWHEAD .ADTOS 91 "CONFIG" 6 WORD_FLAG_CODE 
aee0 6f				db WORD_SYS_CORE+91             
aee1 f1 ae			dw .ADTOS            
aee3 07				db 6 + 1 
aee4 .. 00			db "CONFIG",0              
aeeb				endm 
# End of macro CWHEAD
aeeb			; | CONFIG ( -- )  Access the system configuration menu. Set boot from file, hardware diags, and more! | DONE 
aeeb			 
aeeb cd 5e 92				call config 
aeee					NEXTW 
aeee c3 75 9e			jp macro_next 
aef1				endm 
# End of macro NEXTW
aef1			 
aef1			.ADTOS: 
aef1				CWHEAD .SBTOS 91 "1+" 2 WORD_FLAG_CODE 
aef1 6f				db WORD_SYS_CORE+91             
aef2 07 af			dw .SBTOS            
aef4 03				db 2 + 1 
aef5 .. 00			db "1+",0              
aef8				endm 
# End of macro CWHEAD
aef8			; | 1+ ( u -- u )  Increment value on TOS | DONE 
aef8			 
aef8					FORTH_DSP_VALUEHL 
aef8 cd 8a 9c			call macro_dsp_valuehl 
aefb				endm 
# End of macro FORTH_DSP_VALUEHL
aefb e5					push hl 
aefc			 
aefc					FORTH_DSP_POP 
aefc cd 42 9d			call macro_forth_dsp_pop 
aeff				endm 
# End of macro FORTH_DSP_POP
aeff e1					pop hl 
af00			 
af00 23					inc hl 
af01 cd 85 9a				call forth_push_numhl 
af04					 
af04					NEXTW 
af04 c3 75 9e			jp macro_next 
af07				endm 
# End of macro NEXTW
af07			.SBTOS: 
af07				CWHEAD .ADSTORE 91 "1-" 2 WORD_FLAG_CODE 
af07 6f				db WORD_SYS_CORE+91             
af08 1d af			dw .ADSTORE            
af0a 03				db 2 + 1 
af0b .. 00			db "1-",0              
af0e				endm 
# End of macro CWHEAD
af0e			; | 1- ( u -- u )  Decrement value on TOS | DONE 
af0e			 
af0e					FORTH_DSP_VALUEHL 
af0e cd 8a 9c			call macro_dsp_valuehl 
af11				endm 
# End of macro FORTH_DSP_VALUEHL
af11 e5					push hl 
af12			 
af12					FORTH_DSP_POP 
af12 cd 42 9d			call macro_forth_dsp_pop 
af15				endm 
# End of macro FORTH_DSP_POP
af15 e1					pop hl 
af16			 
af16 2b					dec hl 
af17 cd 85 9a				call forth_push_numhl 
af1a					 
af1a					NEXTW 
af1a c3 75 9e			jp macro_next 
af1d				endm 
# End of macro NEXTW
af1d			.ADSTORE: 
af1d				CWHEAD .ADWSTORE 91 "1+!" 3 WORD_FLAG_CODE 
af1d 6f				db WORD_SYS_CORE+91             
af1e 33 af			dw .ADWSTORE            
af20 04				db 3 + 1 
af21 .. 00			db "1+!",0              
af25				endm 
# End of macro CWHEAD
af25			; | 1+! ( addr -- )  Increment byte at address addr | DONE 
af25			 
af25					FORTH_DSP_VALUEHL 
af25 cd 8a 9c			call macro_dsp_valuehl 
af28				endm 
# End of macro FORTH_DSP_VALUEHL
af28 e5					push hl 
af29			 
af29					FORTH_DSP_POP 
af29 cd 42 9d			call macro_forth_dsp_pop 
af2c				endm 
# End of macro FORTH_DSP_POP
af2c e1					pop hl 
af2d			 
af2d 7e					ld a, (hl) 
af2e 3c					inc a 
af2f 77					ld (hl), a 
af30					 
af30					NEXTW 
af30 c3 75 9e			jp macro_next 
af33				endm 
# End of macro NEXTW
af33			.ADWSTORE: 
af33				CWHEAD .SBSTORE 91 "1+2!" 4 WORD_FLAG_CODE 
af33 6f				db WORD_SYS_CORE+91             
af34 51 af			dw .SBSTORE            
af36 05				db 4 + 1 
af37 .. 00			db "1+2!",0              
af3c				endm 
# End of macro CWHEAD
af3c			; | 1+2! ( addr -- )  Increment word at address addr | DONE 
af3c			 
af3c					FORTH_DSP_VALUEHL 
af3c cd 8a 9c			call macro_dsp_valuehl 
af3f				endm 
# End of macro FORTH_DSP_VALUEHL
af3f e5					push hl 
af40			 
af40					FORTH_DSP_POP 
af40 cd 42 9d			call macro_forth_dsp_pop 
af43				endm 
# End of macro FORTH_DSP_POP
af43 e1					pop hl 
af44			 
af44 e5					push hl 
af45			 
af45 cd f7 9d				call loadwordinhl 
af48 23					inc hl 
af49			 
af49 d1					pop de 
af4a eb					ex de, hl 
af4b 73					ld (hl), e 
af4c 23					inc hl 
af4d 72					ld (hl), d 
af4e					 
af4e					NEXTW 
af4e c3 75 9e			jp macro_next 
af51				endm 
# End of macro NEXTW
af51			.SBSTORE: 
af51				CWHEAD .SBWSTORE 91 "1-!" 3 WORD_FLAG_CODE 
af51 6f				db WORD_SYS_CORE+91             
af52 67 af			dw .SBWSTORE            
af54 04				db 3 + 1 
af55 .. 00			db "1-!",0              
af59				endm 
# End of macro CWHEAD
af59			; | 1-! ( addr -- )  Decrement byte at address addr | DONE 
af59			 
af59					FORTH_DSP_VALUEHL 
af59 cd 8a 9c			call macro_dsp_valuehl 
af5c				endm 
# End of macro FORTH_DSP_VALUEHL
af5c e5					push hl 
af5d			 
af5d					FORTH_DSP_POP 
af5d cd 42 9d			call macro_forth_dsp_pop 
af60				endm 
# End of macro FORTH_DSP_POP
af60 e1					pop hl 
af61			 
af61 7e					ld a, (hl) 
af62 3d					dec a 
af63 77					ld (hl), a 
af64					 
af64					NEXTW 
af64 c3 75 9e			jp macro_next 
af67				endm 
# End of macro NEXTW
af67			.SBWSTORE: 
af67				CWHEAD .ENDCORE 91 "1-2!" 4 WORD_FLAG_CODE 
af67 6f				db WORD_SYS_CORE+91             
af68 85 af			dw .ENDCORE            
af6a 05				db 4 + 1 
af6b .. 00			db "1-2!",0              
af70				endm 
# End of macro CWHEAD
af70			; | 1-2! ( addr -- )  Decrement word at address addr | DONE 
af70			 
af70					FORTH_DSP_VALUEHL 
af70 cd 8a 9c			call macro_dsp_valuehl 
af73				endm 
# End of macro FORTH_DSP_VALUEHL
af73 e5					push hl 
af74			 
af74					FORTH_DSP_POP 
af74 cd 42 9d			call macro_forth_dsp_pop 
af77				endm 
# End of macro FORTH_DSP_POP
af77 e1					pop hl 
af78			 
af78 e5					push hl 
af79			 
af79 cd f7 9d				call loadwordinhl 
af7c 2b					dec hl 
af7d			 
af7d d1					pop de 
af7e eb					ex de, hl 
af7f 73					ld (hl), e 
af80 23					inc hl 
af81 72					ld (hl), d 
af82					 
af82					NEXTW 
af82 c3 75 9e			jp macro_next 
af85				endm 
# End of macro NEXTW
af85			.ENDCORE: 
af85			 
af85			; eof 
af85			 
af85			 
# End of file forth_words_core.asm
af85			include "forth_words_flow.asm" 
af85			 
af85			; | ## Program Flow Words 
af85			 
af85			.IF: 
af85				CWHEAD .THEN 10 "IF" 2 WORD_FLAG_CODE 
af85 1e				db WORD_SYS_CORE+10             
af86 7a b0			dw .THEN            
af88 03				db 2 + 1 
af89 .. 00			db "IF",0              
af8c				endm 
# End of macro CWHEAD
af8c			; | IF ( w -- f ) If TOS is true exec code following up to THEN - Note: currently not supporting ELSE or nested IF | DONE 
af8c			; 
af8c					if DEBUG_FORTH_WORDS_KEY 
af8c						DMARK "IF." 
af8c f5				push af  
af8d 3a a1 af			ld a, (.dmark)  
af90 32 65 ee			ld (debug_mark),a  
af93 3a a2 af			ld a, (.dmark+1)  
af96 32 66 ee			ld (debug_mark+1),a  
af99 3a a3 af			ld a, (.dmark+2)  
af9c 32 67 ee			ld (debug_mark+2),a  
af9f 18 03			jr .pastdmark  
afa1 ..			.dmark: db "IF."  
afa4 f1			.pastdmark: pop af  
afa5			endm  
# End of macro DMARK
afa5						CALLMONITOR 
afa5 cd 6f ee			call debug_vector  
afa8				endm  
# End of macro CALLMONITOR
afa8					endif 
afa8			; eval TOS 
afa8			 
afa8				FORTH_DSP_VALUEHL 
afa8 cd 8a 9c			call macro_dsp_valuehl 
afab				endm 
# End of macro FORTH_DSP_VALUEHL
afab			 
afab			;	push hl 
afab				FORTH_DSP_POP 
afab cd 42 9d			call macro_forth_dsp_pop 
afae				endm 
# End of macro FORTH_DSP_POP
afae			;	pop hl 
afae			 
afae					if DEBUG_FORTH_WORDS 
afae						DMARK "IF1" 
afae f5				push af  
afaf 3a c3 af			ld a, (.dmark)  
afb2 32 65 ee			ld (debug_mark),a  
afb5 3a c4 af			ld a, (.dmark+1)  
afb8 32 66 ee			ld (debug_mark+1),a  
afbb 3a c5 af			ld a, (.dmark+2)  
afbe 32 67 ee			ld (debug_mark+2),a  
afc1 18 03			jr .pastdmark  
afc3 ..			.dmark: db "IF1"  
afc6 f1			.pastdmark: pop af  
afc7			endm  
# End of macro DMARK
afc7						CALLMONITOR 
afc7 cd 6f ee			call debug_vector  
afca				endm  
# End of macro CALLMONITOR
afca					endif 
afca b7				or a        ; clear carry flag 
afcb 11 00 00			ld de, 0 
afce eb				ex de,hl 
afcf ed 52			sbc hl, de 
afd1 c2 5b b0			jp nz, .iftrue 
afd4			 
afd4					if DEBUG_FORTH_WORDS 
afd4						DMARK "IF2" 
afd4 f5				push af  
afd5 3a e9 af			ld a, (.dmark)  
afd8 32 65 ee			ld (debug_mark),a  
afdb 3a ea af			ld a, (.dmark+1)  
afde 32 66 ee			ld (debug_mark+1),a  
afe1 3a eb af			ld a, (.dmark+2)  
afe4 32 67 ee			ld (debug_mark+2),a  
afe7 18 03			jr .pastdmark  
afe9 ..			.dmark: db "IF2"  
afec f1			.pastdmark: pop af  
afed			endm  
# End of macro DMARK
afed						CALLMONITOR 
afed cd 6f ee			call debug_vector  
aff0				endm  
# End of macro CALLMONITOR
aff0					endif 
aff0			 
aff0			; if not true then skip to THEN 
aff0			 
aff0				; TODO get tok_ptr 
aff0				; TODO consume toks until we get to THEN 
aff0			 
aff0 2a bc e5			ld hl, (os_tok_ptr) 
aff3					if DEBUG_FORTH_WORDS 
aff3						DMARK "IF3" 
aff3 f5				push af  
aff4 3a 08 b0			ld a, (.dmark)  
aff7 32 65 ee			ld (debug_mark),a  
affa 3a 09 b0			ld a, (.dmark+1)  
affd 32 66 ee			ld (debug_mark+1),a  
b000 3a 0a b0			ld a, (.dmark+2)  
b003 32 67 ee			ld (debug_mark+2),a  
b006 18 03			jr .pastdmark  
b008 ..			.dmark: db "IF3"  
b00b f1			.pastdmark: pop af  
b00c			endm  
# End of macro DMARK
b00c						CALLMONITOR 
b00c cd 6f ee			call debug_vector  
b00f				endm  
# End of macro CALLMONITOR
b00f						 
b00f					endif 
b00f 11 56 b0			ld de, .ifthen 
b012					if DEBUG_FORTH_WORDS 
b012						DMARK "IF4" 
b012 f5				push af  
b013 3a 27 b0			ld a, (.dmark)  
b016 32 65 ee			ld (debug_mark),a  
b019 3a 28 b0			ld a, (.dmark+1)  
b01c 32 66 ee			ld (debug_mark+1),a  
b01f 3a 29 b0			ld a, (.dmark+2)  
b022 32 67 ee			ld (debug_mark+2),a  
b025 18 03			jr .pastdmark  
b027 ..			.dmark: db "IF4"  
b02a f1			.pastdmark: pop af  
b02b			endm  
# End of macro DMARK
b02b						CALLMONITOR 
b02b cd 6f ee			call debug_vector  
b02e				endm  
# End of macro CALLMONITOR
b02e					endif 
b02e cd 7c 9f			call findnexttok  
b031			 
b031					if DEBUG_FORTH_WORDS 
b031						DMARK "IF5" 
b031 f5				push af  
b032 3a 46 b0			ld a, (.dmark)  
b035 32 65 ee			ld (debug_mark),a  
b038 3a 47 b0			ld a, (.dmark+1)  
b03b 32 66 ee			ld (debug_mark+1),a  
b03e 3a 48 b0			ld a, (.dmark+2)  
b041 32 67 ee			ld (debug_mark+2),a  
b044 18 03			jr .pastdmark  
b046 ..			.dmark: db "IF5"  
b049 f1			.pastdmark: pop af  
b04a			endm  
# End of macro DMARK
b04a						CALLMONITOR 
b04a cd 6f ee			call debug_vector  
b04d				endm  
# End of macro CALLMONITOR
b04d					endif 
b04d				; TODO replace below with ; exec using tok_ptr 
b04d 22 bc e5			ld (os_tok_ptr), hl 
b050 c3 fe 9e			jp exec1 
b053				NEXTW 
b053 c3 75 9e			jp macro_next 
b056				endm 
# End of macro NEXTW
b056			 
b056 .. 00		.ifthen:  db "THEN",0 
b05b			 
b05b			.iftrue:		 
b05b				; Exec next words normally 
b05b			 
b05b				; if true then exec following IF as normal 
b05b					if DEBUG_FORTH_WORDS 
b05b						DMARK "IFT" 
b05b f5				push af  
b05c 3a 70 b0			ld a, (.dmark)  
b05f 32 65 ee			ld (debug_mark),a  
b062 3a 71 b0			ld a, (.dmark+1)  
b065 32 66 ee			ld (debug_mark+1),a  
b068 3a 72 b0			ld a, (.dmark+2)  
b06b 32 67 ee			ld (debug_mark+2),a  
b06e 18 03			jr .pastdmark  
b070 ..			.dmark: db "IFT"  
b073 f1			.pastdmark: pop af  
b074			endm  
# End of macro DMARK
b074						CALLMONITOR 
b074 cd 6f ee			call debug_vector  
b077				endm  
# End of macro CALLMONITOR
b077					endif 
b077			 
b077					NEXTW 
b077 c3 75 9e			jp macro_next 
b07a				endm 
# End of macro NEXTW
b07a			.THEN: 
b07a				CWHEAD .ELSE 11 "THEN" 4 WORD_FLAG_CODE 
b07a 1f				db WORD_SYS_CORE+11             
b07b a2 b0			dw .ELSE            
b07d 05				db 4 + 1 
b07e .. 00			db "THEN",0              
b083				endm 
# End of macro CWHEAD
b083			; | THEN ( -- ) Does nothing. It is a marker for the end of an IF block | DONE 
b083					if DEBUG_FORTH_WORDS_KEY 
b083						DMARK "THN" 
b083 f5				push af  
b084 3a 98 b0			ld a, (.dmark)  
b087 32 65 ee			ld (debug_mark),a  
b08a 3a 99 b0			ld a, (.dmark+1)  
b08d 32 66 ee			ld (debug_mark+1),a  
b090 3a 9a b0			ld a, (.dmark+2)  
b093 32 67 ee			ld (debug_mark+2),a  
b096 18 03			jr .pastdmark  
b098 ..			.dmark: db "THN"  
b09b f1			.pastdmark: pop af  
b09c			endm  
# End of macro DMARK
b09c						CALLMONITOR 
b09c cd 6f ee			call debug_vector  
b09f				endm  
# End of macro CALLMONITOR
b09f					endif 
b09f					NEXTW 
b09f c3 75 9e			jp macro_next 
b0a2				endm 
# End of macro NEXTW
b0a2			.ELSE: 
b0a2				CWHEAD .DO 12 "ELSE" 2 WORD_FLAG_CODE 
b0a2 20				db WORD_SYS_CORE+12             
b0a3 ca b0			dw .DO            
b0a5 03				db 2 + 1 
b0a6 .. 00			db "ELSE",0              
b0ab				endm 
# End of macro CWHEAD
b0ab			; | ELSE ( -- ) Not supported - does nothing | TODO 
b0ab			 
b0ab					if DEBUG_FORTH_WORDS_KEY 
b0ab						DMARK "ELS" 
b0ab f5				push af  
b0ac 3a c0 b0			ld a, (.dmark)  
b0af 32 65 ee			ld (debug_mark),a  
b0b2 3a c1 b0			ld a, (.dmark+1)  
b0b5 32 66 ee			ld (debug_mark+1),a  
b0b8 3a c2 b0			ld a, (.dmark+2)  
b0bb 32 67 ee			ld (debug_mark+2),a  
b0be 18 03			jr .pastdmark  
b0c0 ..			.dmark: db "ELS"  
b0c3 f1			.pastdmark: pop af  
b0c4			endm  
# End of macro DMARK
b0c4						CALLMONITOR 
b0c4 cd 6f ee			call debug_vector  
b0c7				endm  
# End of macro CALLMONITOR
b0c7					endif 
b0c7			 
b0c7			 
b0c7					NEXTW 
b0c7 c3 75 9e			jp macro_next 
b0ca				endm 
# End of macro NEXTW
b0ca			.DO: 
b0ca				CWHEAD .LOOP 13 "DO" 2 WORD_FLAG_CODE 
b0ca 21				db WORD_SYS_CORE+13             
b0cb f1 b1			dw .LOOP            
b0cd 03				db 2 + 1 
b0ce .. 00			db "DO",0              
b0d1				endm 
# End of macro CWHEAD
b0d1			; | DO ( u1 u2 -- ) Loop starting at u2 with a limit of u1 | DONE 
b0d1			 
b0d1					if DEBUG_FORTH_WORDS_KEY 
b0d1						DMARK "DO." 
b0d1 f5				push af  
b0d2 3a e6 b0			ld a, (.dmark)  
b0d5 32 65 ee			ld (debug_mark),a  
b0d8 3a e7 b0			ld a, (.dmark+1)  
b0db 32 66 ee			ld (debug_mark+1),a  
b0de 3a e8 b0			ld a, (.dmark+2)  
b0e1 32 67 ee			ld (debug_mark+2),a  
b0e4 18 03			jr .pastdmark  
b0e6 ..			.dmark: db "DO."  
b0e9 f1			.pastdmark: pop af  
b0ea			endm  
# End of macro DMARK
b0ea						CALLMONITOR 
b0ea cd 6f ee			call debug_vector  
b0ed				endm  
# End of macro CALLMONITOR
b0ed					endif 
b0ed			;  push pc to rsp stack past the DO 
b0ed			 
b0ed 2a bc e5				ld hl, (os_tok_ptr) 
b0f0 23					inc hl   ; D 
b0f1 23					inc hl  ; O 
b0f2 23					inc hl   ; null 
b0f3					if DEBUG_FORTH_WORDS 
b0f3						DMARK "DO2" 
b0f3 f5				push af  
b0f4 3a 08 b1			ld a, (.dmark)  
b0f7 32 65 ee			ld (debug_mark),a  
b0fa 3a 09 b1			ld a, (.dmark+1)  
b0fd 32 66 ee			ld (debug_mark+1),a  
b100 3a 0a b1			ld a, (.dmark+2)  
b103 32 67 ee			ld (debug_mark+2),a  
b106 18 03			jr .pastdmark  
b108 ..			.dmark: db "DO2"  
b10b f1			.pastdmark: pop af  
b10c			endm  
# End of macro DMARK
b10c						CALLMONITOR 
b10c cd 6f ee			call debug_vector  
b10f				endm  
# End of macro CALLMONITOR
b10f					endif 
b10f					FORTH_RSP_NEXT 
b10f cd 2c 9a			call macro_forth_rsp_next 
b112				endm 
# End of macro FORTH_RSP_NEXT
b112					if DEBUG_FORTH_WORDS 
b112						DMARK "DO3" 
b112 f5				push af  
b113 3a 27 b1			ld a, (.dmark)  
b116 32 65 ee			ld (debug_mark),a  
b119 3a 28 b1			ld a, (.dmark+1)  
b11c 32 66 ee			ld (debug_mark+1),a  
b11f 3a 29 b1			ld a, (.dmark+2)  
b122 32 67 ee			ld (debug_mark+2),a  
b125 18 03			jr .pastdmark  
b127 ..			.dmark: db "DO3"  
b12a f1			.pastdmark: pop af  
b12b			endm  
# End of macro DMARK
b12b						CALLMONITOR 
b12b cd 6f ee			call debug_vector  
b12e				endm  
# End of macro CALLMONITOR
b12e					endif 
b12e			 
b12e					;if DEBUG_FORTH_WORDS 
b12e				;		push hl 
b12e			;		endif  
b12e			 
b12e			; get counters from data stack 
b12e			 
b12e			 
b12e					FORTH_DSP_VALUEHL 
b12e cd 8a 9c			call macro_dsp_valuehl 
b131				endm 
# End of macro FORTH_DSP_VALUEHL
b131 e5					push hl		 ; hl now has starting counter which needs to be tos 
b132			 
b132					if DEBUG_FORTH_WORDS 
b132						DMARK "DO4" 
b132 f5				push af  
b133 3a 47 b1			ld a, (.dmark)  
b136 32 65 ee			ld (debug_mark),a  
b139 3a 48 b1			ld a, (.dmark+1)  
b13c 32 66 ee			ld (debug_mark+1),a  
b13f 3a 49 b1			ld a, (.dmark+2)  
b142 32 67 ee			ld (debug_mark+2),a  
b145 18 03			jr .pastdmark  
b147 ..			.dmark: db "DO4"  
b14a f1			.pastdmark: pop af  
b14b			endm  
# End of macro DMARK
b14b						CALLMONITOR 
b14b cd 6f ee			call debug_vector  
b14e				endm  
# End of macro CALLMONITOR
b14e					endif 
b14e					FORTH_DSP_POP 
b14e cd 42 9d			call macro_forth_dsp_pop 
b151				endm 
# End of macro FORTH_DSP_POP
b151			 
b151					if DEBUG_FORTH_WORDS 
b151						DMARK "DO5" 
b151 f5				push af  
b152 3a 66 b1			ld a, (.dmark)  
b155 32 65 ee			ld (debug_mark),a  
b158 3a 67 b1			ld a, (.dmark+1)  
b15b 32 66 ee			ld (debug_mark+1),a  
b15e 3a 68 b1			ld a, (.dmark+2)  
b161 32 67 ee			ld (debug_mark+2),a  
b164 18 03			jr .pastdmark  
b166 ..			.dmark: db "DO5"  
b169 f1			.pastdmark: pop af  
b16a			endm  
# End of macro DMARK
b16a						CALLMONITOR 
b16a cd 6f ee			call debug_vector  
b16d				endm  
# End of macro CALLMONITOR
b16d					endif 
b16d			 
b16d					FORTH_DSP_VALUEHL 
b16d cd 8a 9c			call macro_dsp_valuehl 
b170				endm 
# End of macro FORTH_DSP_VALUEHL
b170			;		push hl		 ; hl now has starting limit counter 
b170			 
b170					if DEBUG_FORTH_WORDS 
b170						DMARK "DO6" 
b170 f5				push af  
b171 3a 85 b1			ld a, (.dmark)  
b174 32 65 ee			ld (debug_mark),a  
b177 3a 86 b1			ld a, (.dmark+1)  
b17a 32 66 ee			ld (debug_mark+1),a  
b17d 3a 87 b1			ld a, (.dmark+2)  
b180 32 67 ee			ld (debug_mark+2),a  
b183 18 03			jr .pastdmark  
b185 ..			.dmark: db "DO6"  
b188 f1			.pastdmark: pop af  
b189			endm  
# End of macro DMARK
b189						CALLMONITOR 
b189 cd 6f ee			call debug_vector  
b18c				endm  
# End of macro CALLMONITOR
b18c					endif 
b18c					FORTH_DSP_POP 
b18c cd 42 9d			call macro_forth_dsp_pop 
b18f				endm 
# End of macro FORTH_DSP_POP
b18f			 
b18f			; put counters on the loop stack 
b18f			 
b18f			;		pop hl			 ; limit counter 
b18f d1					pop de			; start counter 
b190			 
b190					; push limit counter 
b190			 
b190					if DEBUG_FORTH_WORDS 
b190						DMARK "DO7" 
b190 f5				push af  
b191 3a a5 b1			ld a, (.dmark)  
b194 32 65 ee			ld (debug_mark),a  
b197 3a a6 b1			ld a, (.dmark+1)  
b19a 32 66 ee			ld (debug_mark+1),a  
b19d 3a a7 b1			ld a, (.dmark+2)  
b1a0 32 67 ee			ld (debug_mark+2),a  
b1a3 18 03			jr .pastdmark  
b1a5 ..			.dmark: db "DO7"  
b1a8 f1			.pastdmark: pop af  
b1a9			endm  
# End of macro DMARK
b1a9						CALLMONITOR 
b1a9 cd 6f ee			call debug_vector  
b1ac				endm  
# End of macro CALLMONITOR
b1ac					endif 
b1ac					FORTH_LOOP_NEXT 
b1ac cd bb 9c			call macro_forth_loop_next 
b1af				endm 
# End of macro FORTH_LOOP_NEXT
b1af			 
b1af					; push start counter 
b1af			 
b1af eb					ex de, hl 
b1b0					if DEBUG_FORTH_WORDS 
b1b0						DMARK "DO7" 
b1b0 f5				push af  
b1b1 3a c5 b1			ld a, (.dmark)  
b1b4 32 65 ee			ld (debug_mark),a  
b1b7 3a c6 b1			ld a, (.dmark+1)  
b1ba 32 66 ee			ld (debug_mark+1),a  
b1bd 3a c7 b1			ld a, (.dmark+2)  
b1c0 32 67 ee			ld (debug_mark+2),a  
b1c3 18 03			jr .pastdmark  
b1c5 ..			.dmark: db "DO7"  
b1c8 f1			.pastdmark: pop af  
b1c9			endm  
# End of macro DMARK
b1c9						CALLMONITOR 
b1c9 cd 6f ee			call debug_vector  
b1cc				endm  
# End of macro CALLMONITOR
b1cc					endif 
b1cc					FORTH_LOOP_NEXT 
b1cc cd bb 9c			call macro_forth_loop_next 
b1cf				endm 
# End of macro FORTH_LOOP_NEXT
b1cf			 
b1cf			 
b1cf					; init first round of I counter 
b1cf			 
b1cf 22 e0 e5				ld (os_current_i), hl 
b1d2			 
b1d2					if DEBUG_FORTH_WORDS 
b1d2						DMARK "DO8" 
b1d2 f5				push af  
b1d3 3a e7 b1			ld a, (.dmark)  
b1d6 32 65 ee			ld (debug_mark),a  
b1d9 3a e8 b1			ld a, (.dmark+1)  
b1dc 32 66 ee			ld (debug_mark+1),a  
b1df 3a e9 b1			ld a, (.dmark+2)  
b1e2 32 67 ee			ld (debug_mark+2),a  
b1e5 18 03			jr .pastdmark  
b1e7 ..			.dmark: db "DO8"  
b1ea f1			.pastdmark: pop af  
b1eb			endm  
# End of macro DMARK
b1eb						CALLMONITOR 
b1eb cd 6f ee			call debug_vector  
b1ee				endm  
# End of macro CALLMONITOR
b1ee					endif 
b1ee			 
b1ee					NEXTW 
b1ee c3 75 9e			jp macro_next 
b1f1				endm 
# End of macro NEXTW
b1f1			.LOOP: 
b1f1				CWHEAD .I 14 "LOOP" 4 WORD_FLAG_CODE 
b1f1 22				db WORD_SYS_CORE+14             
b1f2 09 b3			dw .I            
b1f4 05				db 4 + 1 
b1f5 .. 00			db "LOOP",0              
b1fa				endm 
# End of macro CWHEAD
b1fa			; | LOOP ( -- ) Increment and test loop counter  | DONE 
b1fa			 
b1fa				; pop tos as current loop count to hl 
b1fa			 
b1fa				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
b1fa			 
b1fa				FORTH_LOOP_TOS 
b1fa cd ee 9c			call macro_forth_loop_tos 
b1fd				endm 
# End of macro FORTH_LOOP_TOS
b1fd e5				push hl 
b1fe			 
b1fe					if DEBUG_FORTH_WORDS_KEY 
b1fe						DMARK "LOP" 
b1fe f5				push af  
b1ff 3a 13 b2			ld a, (.dmark)  
b202 32 65 ee			ld (debug_mark),a  
b205 3a 14 b2			ld a, (.dmark+1)  
b208 32 66 ee			ld (debug_mark+1),a  
b20b 3a 15 b2			ld a, (.dmark+2)  
b20e 32 67 ee			ld (debug_mark+2),a  
b211 18 03			jr .pastdmark  
b213 ..			.dmark: db "LOP"  
b216 f1			.pastdmark: pop af  
b217			endm  
# End of macro DMARK
b217						CALLMONITOR 
b217 cd 6f ee			call debug_vector  
b21a				endm  
# End of macro CALLMONITOR
b21a					endif 
b21a				; next item on the stack is the limit. get it 
b21a			 
b21a			 
b21a				FORTH_LOOP_POP 
b21a cd f8 9c			call macro_forth_loop_pop 
b21d				endm 
# End of macro FORTH_LOOP_POP
b21d			 
b21d				FORTH_LOOP_TOS 
b21d cd ee 9c			call macro_forth_loop_tos 
b220				endm 
# End of macro FORTH_LOOP_TOS
b220			 
b220 d1				pop de		 ; de = i, hl = limit 
b221			 
b221					if DEBUG_FORTH_WORDS 
b221						DMARK "LP1" 
b221 f5				push af  
b222 3a 36 b2			ld a, (.dmark)  
b225 32 65 ee			ld (debug_mark),a  
b228 3a 37 b2			ld a, (.dmark+1)  
b22b 32 66 ee			ld (debug_mark+1),a  
b22e 3a 38 b2			ld a, (.dmark+2)  
b231 32 67 ee			ld (debug_mark+2),a  
b234 18 03			jr .pastdmark  
b236 ..			.dmark: db "LP1"  
b239 f1			.pastdmark: pop af  
b23a			endm  
# End of macro DMARK
b23a						CALLMONITOR 
b23a cd 6f ee			call debug_vector  
b23d				endm  
# End of macro CALLMONITOR
b23d					endif 
b23d			 
b23d				; go back to previous word 
b23d			 
b23d d5				push de    ; save I for inc later 
b23e			 
b23e			 
b23e				; get limit 
b23e				;  is I at limit? 
b23e			 
b23e			 
b23e					if DEBUG_FORTH_WORDS 
b23e						DMARK "LP1" 
b23e f5				push af  
b23f 3a 53 b2			ld a, (.dmark)  
b242 32 65 ee			ld (debug_mark),a  
b245 3a 54 b2			ld a, (.dmark+1)  
b248 32 66 ee			ld (debug_mark+1),a  
b24b 3a 55 b2			ld a, (.dmark+2)  
b24e 32 67 ee			ld (debug_mark+2),a  
b251 18 03			jr .pastdmark  
b253 ..			.dmark: db "LP1"  
b256 f1			.pastdmark: pop af  
b257			endm  
# End of macro DMARK
b257						CALLMONITOR 
b257 cd 6f ee			call debug_vector  
b25a				endm  
# End of macro CALLMONITOR
b25a					endif 
b25a			 
b25a ed 52			sbc hl, de 
b25c			 
b25c			 
b25c				;  if at limit pop both limit and current off stack do NEXT and get rid of saved DO 
b25c			 
b25c 20 26				jr nz, .loopnotdone 
b25e			 
b25e e1				pop hl   ; get rid of saved I 
b25f				FORTH_LOOP_POP     ; get rid of limit 
b25f cd f8 9c			call macro_forth_loop_pop 
b262				endm 
# End of macro FORTH_LOOP_POP
b262			 
b262				FORTH_RSP_POP     ; get rid of DO ptr 
b262 cd 4d 9a			call macro_forth_rsp_pop 
b265				endm 
# End of macro FORTH_RSP_POP
b265			 
b265			if DEBUG_FORTH_WORDS 
b265						DMARK "LP>" 
b265 f5				push af  
b266 3a 7a b2			ld a, (.dmark)  
b269 32 65 ee			ld (debug_mark),a  
b26c 3a 7b b2			ld a, (.dmark+1)  
b26f 32 66 ee			ld (debug_mark+1),a  
b272 3a 7c b2			ld a, (.dmark+2)  
b275 32 67 ee			ld (debug_mark+2),a  
b278 18 03			jr .pastdmark  
b27a ..			.dmark: db "LP>"  
b27d f1			.pastdmark: pop af  
b27e			endm  
# End of macro DMARK
b27e				CALLMONITOR 
b27e cd 6f ee			call debug_vector  
b281				endm  
# End of macro CALLMONITOR
b281			endif 
b281			 
b281					NEXTW 
b281 c3 75 9e			jp macro_next 
b284				endm 
# End of macro NEXTW
b284				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
b284			 
b284			.loopnotdone: 
b284			 
b284 e1				pop hl    ; get I 
b285 23				inc hl 
b286			 
b286			   	; save new I 
b286			 
b286			 
b286					; set I counter 
b286			 
b286 22 e0 e5				ld (os_current_i), hl 
b289			 
b289					if DEBUG_FORTH_WORDS 
b289						DMARK "LPN" 
b289 f5				push af  
b28a 3a 9e b2			ld a, (.dmark)  
b28d 32 65 ee			ld (debug_mark),a  
b290 3a 9f b2			ld a, (.dmark+1)  
b293 32 66 ee			ld (debug_mark+1),a  
b296 3a a0 b2			ld a, (.dmark+2)  
b299 32 67 ee			ld (debug_mark+2),a  
b29c 18 03			jr .pastdmark  
b29e ..			.dmark: db "LPN"  
b2a1 f1			.pastdmark: pop af  
b2a2			endm  
# End of macro DMARK
b2a2					CALLMONITOR 
b2a2 cd 6f ee			call debug_vector  
b2a5				endm  
# End of macro CALLMONITOR
b2a5					endif 
b2a5					 
b2a5				FORTH_LOOP_NEXT 
b2a5 cd bb 9c			call macro_forth_loop_next 
b2a8				endm 
# End of macro FORTH_LOOP_NEXT
b2a8			 
b2a8			 
b2a8					if DEBUG_FORTH_WORDS 
b2a8 eb						ex de,hl 
b2a9					endif 
b2a9			 
b2a9			;	; get DO ptr 
b2a9			; 
b2a9					if DEBUG_FORTH_WORDS 
b2a9						DMARK "LP7" 
b2a9 f5				push af  
b2aa 3a be b2			ld a, (.dmark)  
b2ad 32 65 ee			ld (debug_mark),a  
b2b0 3a bf b2			ld a, (.dmark+1)  
b2b3 32 66 ee			ld (debug_mark+1),a  
b2b6 3a c0 b2			ld a, (.dmark+2)  
b2b9 32 67 ee			ld (debug_mark+2),a  
b2bc 18 03			jr .pastdmark  
b2be ..			.dmark: db "LP7"  
b2c1 f1			.pastdmark: pop af  
b2c2			endm  
# End of macro DMARK
b2c2					CALLMONITOR 
b2c2 cd 6f ee			call debug_vector  
b2c5				endm  
# End of macro CALLMONITOR
b2c5					endif 
b2c5				FORTH_RSP_TOS 
b2c5 cd 43 9a			call macro_forth_rsp_tos 
b2c8				endm 
# End of macro FORTH_RSP_TOS
b2c8			 
b2c8					if DEBUG_FORTH_WORDS 
b2c8						DMARK "LP8" 
b2c8 f5				push af  
b2c9 3a dd b2			ld a, (.dmark)  
b2cc 32 65 ee			ld (debug_mark),a  
b2cf 3a de b2			ld a, (.dmark+1)  
b2d2 32 66 ee			ld (debug_mark+1),a  
b2d5 3a df b2			ld a, (.dmark+2)  
b2d8 32 67 ee			ld (debug_mark+2),a  
b2db 18 03			jr .pastdmark  
b2dd ..			.dmark: db "LP8"  
b2e0 f1			.pastdmark: pop af  
b2e1			endm  
# End of macro DMARK
b2e1					CALLMONITOR 
b2e1 cd 6f ee			call debug_vector  
b2e4				endm  
# End of macro CALLMONITOR
b2e4					endif 
b2e4				;push hl 
b2e4			 
b2e4				; not going to DO any more 
b2e4				; get rid of the RSP pointer as DO will add it back in 
b2e4				;FORTH_RSP_POP 
b2e4				;pop hl 
b2e4			 
b2e4				;ld hl,(cli_ret_sp) 
b2e4				;ld e, (hl) 
b2e4				;inc hl 
b2e4				;ld d, (hl) 
b2e4				;ex de,hl 
b2e4 22 bc e5			ld (os_tok_ptr), hl 
b2e7					if DEBUG_FORTH_WORDS 
b2e7						DMARK "LP<" 
b2e7 f5				push af  
b2e8 3a fc b2			ld a, (.dmark)  
b2eb 32 65 ee			ld (debug_mark),a  
b2ee 3a fd b2			ld a, (.dmark+1)  
b2f1 32 66 ee			ld (debug_mark+1),a  
b2f4 3a fe b2			ld a, (.dmark+2)  
b2f7 32 67 ee			ld (debug_mark+2),a  
b2fa 18 03			jr .pastdmark  
b2fc ..			.dmark: db "LP<"  
b2ff f1			.pastdmark: pop af  
b300			endm  
# End of macro DMARK
b300					CALLMONITOR 
b300 cd 6f ee			call debug_vector  
b303				endm  
# End of macro CALLMONITOR
b303				endif 
b303 c3 fe 9e			jp exec1 
b306			 
b306					 
b306			 
b306			 
b306					NEXTW 
b306 c3 75 9e			jp macro_next 
b309				endm 
# End of macro NEXTW
b309			.I:  
b309			 
b309				CWHEAD .DLOOP 74 "I" 1 WORD_FLAG_CODE 
b309 5e				db WORD_SYS_CORE+74             
b30a 34 b3			dw .DLOOP            
b30c 02				db 1 + 1 
b30d .. 00			db "I",0              
b30f				endm 
# End of macro CWHEAD
b30f			; | I ( -- ) Current loop counter | DONE 
b30f					if DEBUG_FORTH_WORDS_KEY 
b30f						DMARK "I.." 
b30f f5				push af  
b310 3a 24 b3			ld a, (.dmark)  
b313 32 65 ee			ld (debug_mark),a  
b316 3a 25 b3			ld a, (.dmark+1)  
b319 32 66 ee			ld (debug_mark+1),a  
b31c 3a 26 b3			ld a, (.dmark+2)  
b31f 32 67 ee			ld (debug_mark+2),a  
b322 18 03			jr .pastdmark  
b324 ..			.dmark: db "I.."  
b327 f1			.pastdmark: pop af  
b328			endm  
# End of macro DMARK
b328						CALLMONITOR 
b328 cd 6f ee			call debug_vector  
b32b				endm  
# End of macro CALLMONITOR
b32b					endif 
b32b			 
b32b 2a e0 e5				ld hl,(os_current_i) 
b32e cd 85 9a				call forth_push_numhl 
b331			 
b331					NEXTW 
b331 c3 75 9e			jp macro_next 
b334				endm 
# End of macro NEXTW
b334			.DLOOP: 
b334				CWHEAD .REPEAT 75 "-LOOP" 5 WORD_FLAG_CODE 
b334 5f				db WORD_SYS_CORE+75             
b335 15 b4			dw .REPEAT            
b337 06				db 5 + 1 
b338 .. 00			db "-LOOP",0              
b33e				endm 
# End of macro CWHEAD
b33e			; | -LOOP ( -- ) Decrement and test loop counter  | DONE 
b33e				; pop tos as current loop count to hl 
b33e					if DEBUG_FORTH_WORDS_KEY 
b33e						DMARK "-LP" 
b33e f5				push af  
b33f 3a 53 b3			ld a, (.dmark)  
b342 32 65 ee			ld (debug_mark),a  
b345 3a 54 b3			ld a, (.dmark+1)  
b348 32 66 ee			ld (debug_mark+1),a  
b34b 3a 55 b3			ld a, (.dmark+2)  
b34e 32 67 ee			ld (debug_mark+2),a  
b351 18 03			jr .pastdmark  
b353 ..			.dmark: db "-LP"  
b356 f1			.pastdmark: pop af  
b357			endm  
# End of macro DMARK
b357						CALLMONITOR 
b357 cd 6f ee			call debug_vector  
b35a				endm  
# End of macro CALLMONITOR
b35a					endif 
b35a			 
b35a				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
b35a			 
b35a				FORTH_LOOP_TOS 
b35a cd ee 9c			call macro_forth_loop_tos 
b35d				endm 
# End of macro FORTH_LOOP_TOS
b35d e5				push hl 
b35e			 
b35e					if DEBUG_FORTH_WORDS 
b35e						DMARK "-LP" 
b35e f5				push af  
b35f 3a 73 b3			ld a, (.dmark)  
b362 32 65 ee			ld (debug_mark),a  
b365 3a 74 b3			ld a, (.dmark+1)  
b368 32 66 ee			ld (debug_mark+1),a  
b36b 3a 75 b3			ld a, (.dmark+2)  
b36e 32 67 ee			ld (debug_mark+2),a  
b371 18 03			jr .pastdmark  
b373 ..			.dmark: db "-LP"  
b376 f1			.pastdmark: pop af  
b377			endm  
# End of macro DMARK
b377						CALLMONITOR 
b377 cd 6f ee			call debug_vector  
b37a				endm  
# End of macro CALLMONITOR
b37a					endif 
b37a				; next item on the stack is the limit. get it 
b37a			 
b37a			 
b37a				FORTH_LOOP_POP 
b37a cd f8 9c			call macro_forth_loop_pop 
b37d				endm 
# End of macro FORTH_LOOP_POP
b37d			 
b37d				FORTH_LOOP_TOS 
b37d cd ee 9c			call macro_forth_loop_tos 
b380				endm 
# End of macro FORTH_LOOP_TOS
b380			 
b380 d1				pop de		 ; de = i, hl = limit 
b381			 
b381					if DEBUG_FORTH_WORDS 
b381						DMARK "-L1" 
b381 f5				push af  
b382 3a 96 b3			ld a, (.dmark)  
b385 32 65 ee			ld (debug_mark),a  
b388 3a 97 b3			ld a, (.dmark+1)  
b38b 32 66 ee			ld (debug_mark+1),a  
b38e 3a 98 b3			ld a, (.dmark+2)  
b391 32 67 ee			ld (debug_mark+2),a  
b394 18 03			jr .pastdmark  
b396 ..			.dmark: db "-L1"  
b399 f1			.pastdmark: pop af  
b39a			endm  
# End of macro DMARK
b39a						CALLMONITOR 
b39a cd 6f ee			call debug_vector  
b39d				endm  
# End of macro CALLMONITOR
b39d					endif 
b39d			 
b39d				; go back to previous word 
b39d			 
b39d d5				push de    ; save I for inc later 
b39e			 
b39e			 
b39e				; get limit 
b39e				;  is I at limit? 
b39e			 
b39e			 
b39e					if DEBUG_FORTH_WORDS 
b39e						DMARK "-L1" 
b39e f5				push af  
b39f 3a b3 b3			ld a, (.dmark)  
b3a2 32 65 ee			ld (debug_mark),a  
b3a5 3a b4 b3			ld a, (.dmark+1)  
b3a8 32 66 ee			ld (debug_mark+1),a  
b3ab 3a b5 b3			ld a, (.dmark+2)  
b3ae 32 67 ee			ld (debug_mark+2),a  
b3b1 18 03			jr .pastdmark  
b3b3 ..			.dmark: db "-L1"  
b3b6 f1			.pastdmark: pop af  
b3b7			endm  
# End of macro DMARK
b3b7						CALLMONITOR 
b3b7 cd 6f ee			call debug_vector  
b3ba				endm  
# End of macro CALLMONITOR
b3ba					endif 
b3ba			 
b3ba ed 52			sbc hl, de 
b3bc			 
b3bc			 
b3bc				;  if at limit pop both limit and current off stack do NEXT and get rid of saved DO 
b3bc			 
b3bc 20 26				jr nz, .mloopnotdone 
b3be			 
b3be e1				pop hl   ; get rid of saved I 
b3bf				FORTH_LOOP_POP     ; get rid of limit 
b3bf cd f8 9c			call macro_forth_loop_pop 
b3c2				endm 
# End of macro FORTH_LOOP_POP
b3c2			 
b3c2				FORTH_RSP_POP     ; get rid of DO ptr 
b3c2 cd 4d 9a			call macro_forth_rsp_pop 
b3c5				endm 
# End of macro FORTH_RSP_POP
b3c5			 
b3c5			if DEBUG_FORTH_WORDS 
b3c5						DMARK "-L>" 
b3c5 f5				push af  
b3c6 3a da b3			ld a, (.dmark)  
b3c9 32 65 ee			ld (debug_mark),a  
b3cc 3a db b3			ld a, (.dmark+1)  
b3cf 32 66 ee			ld (debug_mark+1),a  
b3d2 3a dc b3			ld a, (.dmark+2)  
b3d5 32 67 ee			ld (debug_mark+2),a  
b3d8 18 03			jr .pastdmark  
b3da ..			.dmark: db "-L>"  
b3dd f1			.pastdmark: pop af  
b3de			endm  
# End of macro DMARK
b3de				CALLMONITOR 
b3de cd 6f ee			call debug_vector  
b3e1				endm  
# End of macro CALLMONITOR
b3e1			endif 
b3e1			 
b3e1					NEXTW 
b3e1 c3 75 9e			jp macro_next 
b3e4				endm 
# End of macro NEXTW
b3e4				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
b3e4			 
b3e4			.mloopnotdone: 
b3e4			 
b3e4 e1				pop hl    ; get I 
b3e5 2b				dec hl 
b3e6			 
b3e6			   	; save new I 
b3e6			 
b3e6			 
b3e6					; set I counter 
b3e6			 
b3e6 22 e0 e5				ld (os_current_i), hl 
b3e9			 
b3e9					 
b3e9				FORTH_LOOP_NEXT 
b3e9 cd bb 9c			call macro_forth_loop_next 
b3ec				endm 
# End of macro FORTH_LOOP_NEXT
b3ec			 
b3ec			 
b3ec					if DEBUG_FORTH_WORDS 
b3ec eb						ex de,hl 
b3ed					endif 
b3ed			 
b3ed			;	; get DO ptr 
b3ed			; 
b3ed				FORTH_RSP_TOS 
b3ed cd 43 9a			call macro_forth_rsp_tos 
b3f0				endm 
# End of macro FORTH_RSP_TOS
b3f0			 
b3f0				;push hl 
b3f0			 
b3f0				; not going to DO any more 
b3f0				; get rid of the RSP pointer as DO will add it back in 
b3f0				;FORTH_RSP_POP 
b3f0				;pop hl 
b3f0			 
b3f0			 
b3f0 22 bc e5			ld (os_tok_ptr), hl 
b3f3					if DEBUG_FORTH_WORDS 
b3f3						DMARK "-L<" 
b3f3 f5				push af  
b3f4 3a 08 b4			ld a, (.dmark)  
b3f7 32 65 ee			ld (debug_mark),a  
b3fa 3a 09 b4			ld a, (.dmark+1)  
b3fd 32 66 ee			ld (debug_mark+1),a  
b400 3a 0a b4			ld a, (.dmark+2)  
b403 32 67 ee			ld (debug_mark+2),a  
b406 18 03			jr .pastdmark  
b408 ..			.dmark: db "-L<"  
b40b f1			.pastdmark: pop af  
b40c			endm  
# End of macro DMARK
b40c					CALLMONITOR 
b40c cd 6f ee			call debug_vector  
b40f				endm  
# End of macro CALLMONITOR
b40f				endif 
b40f c3 fe 9e			jp exec1 
b412			 
b412					 
b412			 
b412			 
b412			 
b412				NEXTW 
b412 c3 75 9e			jp macro_next 
b415				endm 
# End of macro NEXTW
b415			 
b415			 
b415			 
b415			 
b415			.REPEAT: 
b415				CWHEAD .UNTIL 93 "REPEAT" 5 WORD_FLAG_CODE 
b415 71				db WORD_SYS_CORE+93             
b416 68 b4			dw .UNTIL            
b418 06				db 5 + 1 
b419 .. 00			db "REPEAT",0              
b420				endm 
# End of macro CWHEAD
b420			; | REPEAT ( --  ) Start REPEAT...UNTIL loop  | DONE 
b420			;  push pc to rsp stack past the REPEAT 
b420					if DEBUG_FORTH_WORDS_KEY 
b420						DMARK "REP" 
b420 f5				push af  
b421 3a 35 b4			ld a, (.dmark)  
b424 32 65 ee			ld (debug_mark),a  
b427 3a 36 b4			ld a, (.dmark+1)  
b42a 32 66 ee			ld (debug_mark+1),a  
b42d 3a 37 b4			ld a, (.dmark+2)  
b430 32 67 ee			ld (debug_mark+2),a  
b433 18 03			jr .pastdmark  
b435 ..			.dmark: db "REP"  
b438 f1			.pastdmark: pop af  
b439			endm  
# End of macro DMARK
b439						CALLMONITOR 
b439 cd 6f ee			call debug_vector  
b43c				endm  
# End of macro CALLMONITOR
b43c					endif 
b43c			 
b43c 2a bc e5				ld hl, (os_tok_ptr) 
b43f 23					inc hl   ; R 
b440 23					inc hl  ; E 
b441 23					inc hl   ; P 
b442 23					inc hl   ; E 
b443 23					inc hl   ; A 
b444 23					inc hl   ; T 
b445 23					inc hl   ; zero 
b446					FORTH_RSP_NEXT 
b446 cd 2c 9a			call macro_forth_rsp_next 
b449				endm 
# End of macro FORTH_RSP_NEXT
b449			 
b449			 
b449					if DEBUG_FORTH_WORDS 
b449						DMARK "REP" 
b449 f5				push af  
b44a 3a 5e b4			ld a, (.dmark)  
b44d 32 65 ee			ld (debug_mark),a  
b450 3a 5f b4			ld a, (.dmark+1)  
b453 32 66 ee			ld (debug_mark+1),a  
b456 3a 60 b4			ld a, (.dmark+2)  
b459 32 67 ee			ld (debug_mark+2),a  
b45c 18 03			jr .pastdmark  
b45e ..			.dmark: db "REP"  
b461 f1			.pastdmark: pop af  
b462			endm  
# End of macro DMARK
b462						;pop bc    ; TODO BUG ?????? what is this for???? 
b462						CALLMONITOR 
b462 cd 6f ee			call debug_vector  
b465				endm  
# End of macro CALLMONITOR
b465					endif 
b465			 
b465					NEXTW 
b465 c3 75 9e			jp macro_next 
b468				endm 
# End of macro NEXTW
b468			;	       NEXTW 
b468			 
b468			.UNTIL: 
b468				CWHEAD .ENDFLOW 94 "UNTIL" 5 WORD_FLAG_CODE 
b468 72				db WORD_SYS_CORE+94             
b469 ff b4			dw .ENDFLOW            
b46b 06				db 5 + 1 
b46c .. 00			db "UNTIL",0              
b472				endm 
# End of macro CWHEAD
b472			; | UNTIL ( u -- ) Exit REPEAT...UNTIL loop if TOS is false  | DONE 
b472			 
b472				; pop tos as check 
b472			 
b472				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
b472			 
b472				FORTH_DSP_VALUEHL 
b472 cd 8a 9c			call macro_dsp_valuehl 
b475				endm 
# End of macro FORTH_DSP_VALUEHL
b475			 
b475					if DEBUG_FORTH_WORDS_KEY 
b475						DMARK "UNT" 
b475 f5				push af  
b476 3a 8a b4			ld a, (.dmark)  
b479 32 65 ee			ld (debug_mark),a  
b47c 3a 8b b4			ld a, (.dmark+1)  
b47f 32 66 ee			ld (debug_mark+1),a  
b482 3a 8c b4			ld a, (.dmark+2)  
b485 32 67 ee			ld (debug_mark+2),a  
b488 18 03			jr .pastdmark  
b48a ..			.dmark: db "UNT"  
b48d f1			.pastdmark: pop af  
b48e			endm  
# End of macro DMARK
b48e						CALLMONITOR 
b48e cd 6f ee			call debug_vector  
b491				endm  
# End of macro CALLMONITOR
b491					endif 
b491			 
b491			;	push hl 
b491				FORTH_DSP_POP 
b491 cd 42 9d			call macro_forth_dsp_pop 
b494				endm 
# End of macro FORTH_DSP_POP
b494			 
b494			;	pop hl 
b494			 
b494				; test if true 
b494			 
b494 cd 13 8d			call ishlzero 
b497			;	ld a,l 
b497			;	add h 
b497			; 
b497			;	cp 0 
b497			 
b497 20 3e			jr nz, .untilnotdone 
b499			 
b499					if DEBUG_FORTH_WORDS 
b499						DMARK "UNf" 
b499 f5				push af  
b49a 3a ae b4			ld a, (.dmark)  
b49d 32 65 ee			ld (debug_mark),a  
b4a0 3a af b4			ld a, (.dmark+1)  
b4a3 32 66 ee			ld (debug_mark+1),a  
b4a6 3a b0 b4			ld a, (.dmark+2)  
b4a9 32 67 ee			ld (debug_mark+2),a  
b4ac 18 03			jr .pastdmark  
b4ae ..			.dmark: db "UNf"  
b4b1 f1			.pastdmark: pop af  
b4b2			endm  
# End of macro DMARK
b4b2						CALLMONITOR 
b4b2 cd 6f ee			call debug_vector  
b4b5				endm  
# End of macro CALLMONITOR
b4b5					endif 
b4b5			 
b4b5			 
b4b5			 
b4b5				FORTH_RSP_POP     ; get rid of DO ptr 
b4b5 cd 4d 9a			call macro_forth_rsp_pop 
b4b8				endm 
# End of macro FORTH_RSP_POP
b4b8			 
b4b8			if DEBUG_FORTH_WORDS 
b4b8						DMARK "UN>" 
b4b8 f5				push af  
b4b9 3a cd b4			ld a, (.dmark)  
b4bc 32 65 ee			ld (debug_mark),a  
b4bf 3a ce b4			ld a, (.dmark+1)  
b4c2 32 66 ee			ld (debug_mark+1),a  
b4c5 3a cf b4			ld a, (.dmark+2)  
b4c8 32 67 ee			ld (debug_mark+2),a  
b4cb 18 03			jr .pastdmark  
b4cd ..			.dmark: db "UN>"  
b4d0 f1			.pastdmark: pop af  
b4d1			endm  
# End of macro DMARK
b4d1				CALLMONITOR 
b4d1 cd 6f ee			call debug_vector  
b4d4				endm  
# End of macro CALLMONITOR
b4d4			endif 
b4d4			 
b4d4					NEXTW 
b4d4 c3 75 9e			jp macro_next 
b4d7				endm 
# End of macro NEXTW
b4d7				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
b4d7			 
b4d7			.untilnotdone: 
b4d7			 
b4d7			 
b4d7			;	; get DO ptr 
b4d7			; 
b4d7				FORTH_RSP_TOS 
b4d7 cd 43 9a			call macro_forth_rsp_tos 
b4da				endm 
# End of macro FORTH_RSP_TOS
b4da			 
b4da				;push hl 
b4da			 
b4da				; not going to DO any more 
b4da				; get rid of the RSP pointer as DO will add it back in 
b4da				;FORTH_RSP_POP 
b4da				;pop hl 
b4da			 
b4da			 
b4da 22 bc e5			ld (os_tok_ptr), hl 
b4dd					if DEBUG_FORTH_WORDS 
b4dd						DMARK "UN<" 
b4dd f5				push af  
b4de 3a f2 b4			ld a, (.dmark)  
b4e1 32 65 ee			ld (debug_mark),a  
b4e4 3a f3 b4			ld a, (.dmark+1)  
b4e7 32 66 ee			ld (debug_mark+1),a  
b4ea 3a f4 b4			ld a, (.dmark+2)  
b4ed 32 67 ee			ld (debug_mark+2),a  
b4f0 18 03			jr .pastdmark  
b4f2 ..			.dmark: db "UN<"  
b4f5 f1			.pastdmark: pop af  
b4f6			endm  
# End of macro DMARK
b4f6					CALLMONITOR 
b4f6 cd 6f ee			call debug_vector  
b4f9				endm  
# End of macro CALLMONITOR
b4f9				endif 
b4f9 c3 fe 9e			jp exec1 
b4fc			 
b4fc					 
b4fc			 
b4fc			 
b4fc					NEXTW 
b4fc c3 75 9e			jp macro_next 
b4ff				endm 
# End of macro NEXTW
b4ff			 
b4ff			 
b4ff			.ENDFLOW: 
b4ff			 
b4ff			; eof 
b4ff			 
# End of file forth_words_flow.asm
b4ff			; TODO something wrong with the first word of the next word group. no matter which group applies. On device, sc114 is fine. bad memory? 
b4ff			include "forth_words_logic.asm" 
b4ff			 
b4ff			; | ## Logic Words 
b4ff			 
b4ff			.NOT: 
b4ff				CWHEAD .IS 25 "NOT" 3 WORD_FLAG_CODE 
b4ff 2d				db WORD_SYS_CORE+25             
b500 47 b5			dw .IS            
b502 04				db 3 + 1 
b503 .. 00			db "NOT",0              
b507				endm 
# End of macro CWHEAD
b507			; | NOT ( u  -- u ) Inverse true/false on stack | DONE 
b507					if DEBUG_FORTH_WORDS_KEY 
b507						DMARK "NOT" 
b507 f5				push af  
b508 3a 1c b5			ld a, (.dmark)  
b50b 32 65 ee			ld (debug_mark),a  
b50e 3a 1d b5			ld a, (.dmark+1)  
b511 32 66 ee			ld (debug_mark+1),a  
b514 3a 1e b5			ld a, (.dmark+2)  
b517 32 67 ee			ld (debug_mark+2),a  
b51a 18 03			jr .pastdmark  
b51c ..			.dmark: db "NOT"  
b51f f1			.pastdmark: pop af  
b520			endm  
# End of macro DMARK
b520						CALLMONITOR 
b520 cd 6f ee			call debug_vector  
b523				endm  
# End of macro CALLMONITOR
b523					endif 
b523					FORTH_DSP 
b523 cd 50 9c			call macro_forth_dsp 
b526				endm 
# End of macro FORTH_DSP
b526 7e					ld a,(hl)	; get type of value on TOS 
b527 fe 02				cp DS_TYPE_INUM  
b529 28 03				jr z, .noti 
b52b					NEXTW 
b52b c3 75 9e			jp macro_next 
b52e				endm 
# End of macro NEXTW
b52e			.noti:          FORTH_DSP_VALUEHL 
b52e cd 8a 9c			call macro_dsp_valuehl 
b531				endm 
# End of macro FORTH_DSP_VALUEHL
b531			;		push hl 
b531					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b531 cd 42 9d			call macro_forth_dsp_pop 
b534				endm 
# End of macro FORTH_DSP_POP
b534			;		pop hl 
b534 3e 00				ld a,0 
b536 bd					cp l 
b537 28 04				jr z, .not2t 
b539 2e 00				ld l, 0 
b53b 18 02				jr .notip 
b53d			 
b53d 2e ff		.not2t:		ld l, 255 
b53f			 
b53f 26 00		.notip:		ld h, 0	 
b541			 
b541 cd 85 9a				call forth_push_numhl 
b544					NEXTW 
b544 c3 75 9e			jp macro_next 
b547				endm 
# End of macro NEXTW
b547			 
b547			.IS: 
b547				CWHEAD .LZERO 25 "IS" 2 WORD_FLAG_CODE 
b547 2d				db WORD_SYS_CORE+25             
b548 6d b5			dw .LZERO            
b54a 03				db 2 + 1 
b54b .. 00			db "IS",0              
b54e				endm 
# End of macro CWHEAD
b54e			; | IS ( s1 s2  -- f ) Push true if string s1 is the same as s2 | TODO 
b54e					if DEBUG_FORTH_WORDS_KEY 
b54e						DMARK "IS." 
b54e f5				push af  
b54f 3a 63 b5			ld a, (.dmark)  
b552 32 65 ee			ld (debug_mark),a  
b555 3a 64 b5			ld a, (.dmark+1)  
b558 32 66 ee			ld (debug_mark+1),a  
b55b 3a 65 b5			ld a, (.dmark+2)  
b55e 32 67 ee			ld (debug_mark+2),a  
b561 18 03			jr .pastdmark  
b563 ..			.dmark: db "IS."  
b566 f1			.pastdmark: pop af  
b567			endm  
# End of macro DMARK
b567						CALLMONITOR 
b567 cd 6f ee			call debug_vector  
b56a				endm  
# End of macro CALLMONITOR
b56a					endif 
b56a					NEXTW 
b56a c3 75 9e			jp macro_next 
b56d				endm 
# End of macro NEXTW
b56d			.LZERO: 
b56d				CWHEAD .TZERO 25 "0<" 2 WORD_FLAG_CODE 
b56d 2d				db WORD_SYS_CORE+25             
b56e 77 b5			dw .TZERO            
b570 03				db 2 + 1 
b571 .. 00			db "0<",0              
b574				endm 
# End of macro CWHEAD
b574			; | 0< ( u -- f ) Push true if u is less than o | CANT DO UNTIL FLOAT 
b574					NEXTW 
b574 c3 75 9e			jp macro_next 
b577				endm 
# End of macro NEXTW
b577			.TZERO: 
b577				CWHEAD .LESS 26 "0=" 2 WORD_FLAG_CODE 
b577 2e				db WORD_SYS_CORE+26             
b578 be b5			dw .LESS            
b57a 03				db 2 + 1 
b57b .. 00			db "0=",0              
b57e				endm 
# End of macro CWHEAD
b57e			; | 0= ( u -- f ) Push true if u equals 0 | DONE 
b57e				; TODO add floating point number detection 
b57e					;v5 FORTH_DSP_VALUE 
b57e					if DEBUG_FORTH_WORDS_KEY 
b57e						DMARK "0=." 
b57e f5				push af  
b57f 3a 93 b5			ld a, (.dmark)  
b582 32 65 ee			ld (debug_mark),a  
b585 3a 94 b5			ld a, (.dmark+1)  
b588 32 66 ee			ld (debug_mark+1),a  
b58b 3a 95 b5			ld a, (.dmark+2)  
b58e 32 67 ee			ld (debug_mark+2),a  
b591 18 03			jr .pastdmark  
b593 ..			.dmark: db "0=."  
b596 f1			.pastdmark: pop af  
b597			endm  
# End of macro DMARK
b597						CALLMONITOR 
b597 cd 6f ee			call debug_vector  
b59a				endm  
# End of macro CALLMONITOR
b59a					endif 
b59a					FORTH_DSP 
b59a cd 50 9c			call macro_forth_dsp 
b59d				endm 
# End of macro FORTH_DSP
b59d 7e					ld a,(hl)	; get type of value on TOS 
b59e fe 02				cp DS_TYPE_INUM  
b5a0 28 00				jr z, .tz_inum 
b5a2			 
b5a2				if FORTH_ENABLE_FLOATMATH 
b5a2					jr .tz_done 
b5a2			 
b5a2				endif 
b5a2					 
b5a2			 
b5a2			.tz_inum: 
b5a2					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b5a2 cd 8a 9c			call macro_dsp_valuehl 
b5a5				endm 
# End of macro FORTH_DSP_VALUEHL
b5a5			 
b5a5			;		push hl 
b5a5			 
b5a5					; destroy value TOS 
b5a5			 
b5a5					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b5a5 cd 42 9d			call macro_forth_dsp_pop 
b5a8				endm 
# End of macro FORTH_DSP_POP
b5a8			 
b5a8			;		pop hl 
b5a8			 
b5a8 3e 00				ld a,0 
b5aa			 
b5aa bd					cp l 
b5ab 20 08				jr nz, .tz_notzero 
b5ad			 
b5ad bc					cp h 
b5ae			 
b5ae 20 05				jr nz, .tz_notzero 
b5b0			 
b5b0			 
b5b0 21 01 00				ld hl, FORTH_TRUE 
b5b3 18 03				jr .tz_done 
b5b5			 
b5b5 21 00 00		.tz_notzero:	ld hl, FORTH_FALSE 
b5b8			 
b5b8					; push value back onto stack for another op etc 
b5b8			 
b5b8			.tz_done: 
b5b8 cd 85 9a				call forth_push_numhl 
b5bb			 
b5bb					NEXTW 
b5bb c3 75 9e			jp macro_next 
b5be				endm 
# End of macro NEXTW
b5be			.LESS: 
b5be				CWHEAD .GT 27 "<" 1 WORD_FLAG_CODE 
b5be 2f				db WORD_SYS_CORE+27             
b5bf 27 b6			dw .GT            
b5c1 02				db 1 + 1 
b5c2 .. 00			db "<",0              
b5c4				endm 
# End of macro CWHEAD
b5c4			; | < ( u1 u2 -- f ) True if u1 is less than u2 | DONE 
b5c4				; TODO add floating point number detection 
b5c4					if DEBUG_FORTH_WORDS_KEY 
b5c4						DMARK "LES" 
b5c4 f5				push af  
b5c5 3a d9 b5			ld a, (.dmark)  
b5c8 32 65 ee			ld (debug_mark),a  
b5cb 3a da b5			ld a, (.dmark+1)  
b5ce 32 66 ee			ld (debug_mark+1),a  
b5d1 3a db b5			ld a, (.dmark+2)  
b5d4 32 67 ee			ld (debug_mark+2),a  
b5d7 18 03			jr .pastdmark  
b5d9 ..			.dmark: db "LES"  
b5dc f1			.pastdmark: pop af  
b5dd			endm  
# End of macro DMARK
b5dd						CALLMONITOR 
b5dd cd 6f ee			call debug_vector  
b5e0				endm  
# End of macro CALLMONITOR
b5e0					endif 
b5e0					FORTH_DSP 
b5e0 cd 50 9c			call macro_forth_dsp 
b5e3				endm 
# End of macro FORTH_DSP
b5e3					;v5 FORTH_DSP_VALUE 
b5e3 7e					ld a,(hl)	; get type of value on TOS 
b5e4 fe 02				cp DS_TYPE_INUM  
b5e6 28 00				jr z, .less_inum 
b5e8			 
b5e8				if FORTH_ENABLE_FLOATMATH 
b5e8					jr .less_done 
b5e8			 
b5e8				endif 
b5e8					 
b5e8			 
b5e8			.less_inum: 
b5e8					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b5e8 cd 8a 9c			call macro_dsp_valuehl 
b5eb				endm 
# End of macro FORTH_DSP_VALUEHL
b5eb			 
b5eb e5					push hl  ; u2 
b5ec			 
b5ec					; destroy value TOS 
b5ec			 
b5ec					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b5ec cd 42 9d			call macro_forth_dsp_pop 
b5ef				endm 
# End of macro FORTH_DSP_POP
b5ef			 
b5ef			 
b5ef					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b5ef cd 8a 9c			call macro_dsp_valuehl 
b5f2				endm 
# End of macro FORTH_DSP_VALUEHL
b5f2			 
b5f2 e5					push hl    ; u1 
b5f3			 
b5f3					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b5f3 cd 42 9d			call macro_forth_dsp_pop 
b5f6				endm 
# End of macro FORTH_DSP_POP
b5f6			 
b5f6			 
b5f6 b7			 or a      ;clear carry flag 
b5f7 01 00 00		 ld bc, FORTH_FALSE 
b5fa e1			  pop hl    ; u1 
b5fb d1			  pop de    ; u2 
b5fc ed 52		  sbc hl,de 
b5fe 30 03		  jr nc,.lscont   	;	if hl >= de, carry flag will be cleared 
b600			 
b600 01 01 00		 ld bc, FORTH_TRUE 
b603			.lscont:  
b603 c5					push bc 
b604 e1					pop hl 
b605			 
b605					if DEBUG_FORTH_WORDS 
b605						DMARK "LT1" 
b605 f5				push af  
b606 3a 1a b6			ld a, (.dmark)  
b609 32 65 ee			ld (debug_mark),a  
b60c 3a 1b b6			ld a, (.dmark+1)  
b60f 32 66 ee			ld (debug_mark+1),a  
b612 3a 1c b6			ld a, (.dmark+2)  
b615 32 67 ee			ld (debug_mark+2),a  
b618 18 03			jr .pastdmark  
b61a ..			.dmark: db "LT1"  
b61d f1			.pastdmark: pop af  
b61e			endm  
# End of macro DMARK
b61e						CALLMONITOR 
b61e cd 6f ee			call debug_vector  
b621				endm  
# End of macro CALLMONITOR
b621					endif 
b621 cd 85 9a				call forth_push_numhl 
b624			 
b624					NEXTW 
b624 c3 75 9e			jp macro_next 
b627				endm 
# End of macro NEXTW
b627			.GT: 
b627				CWHEAD .EQUAL 28 ">" 1 WORD_FLAG_CODE 
b627 30				db WORD_SYS_CORE+28             
b628 90 b6			dw .EQUAL            
b62a 02				db 1 + 1 
b62b .. 00			db ">",0              
b62d				endm 
# End of macro CWHEAD
b62d			; | > ( u1 u2 -- f ) True if u1 is greater than u2 | DONE 
b62d				; TODO add floating point number detection 
b62d					if DEBUG_FORTH_WORDS_KEY 
b62d						DMARK "GRT" 
b62d f5				push af  
b62e 3a 42 b6			ld a, (.dmark)  
b631 32 65 ee			ld (debug_mark),a  
b634 3a 43 b6			ld a, (.dmark+1)  
b637 32 66 ee			ld (debug_mark+1),a  
b63a 3a 44 b6			ld a, (.dmark+2)  
b63d 32 67 ee			ld (debug_mark+2),a  
b640 18 03			jr .pastdmark  
b642 ..			.dmark: db "GRT"  
b645 f1			.pastdmark: pop af  
b646			endm  
# End of macro DMARK
b646						CALLMONITOR 
b646 cd 6f ee			call debug_vector  
b649				endm  
# End of macro CALLMONITOR
b649					endif 
b649					FORTH_DSP 
b649 cd 50 9c			call macro_forth_dsp 
b64c				endm 
# End of macro FORTH_DSP
b64c					;FORTH_DSP_VALUE 
b64c 7e					ld a,(hl)	; get type of value on TOS 
b64d fe 02				cp DS_TYPE_INUM  
b64f 28 00				jr z, .gt_inum 
b651			 
b651				if FORTH_ENABLE_FLOATMATH 
b651					jr .gt_done 
b651			 
b651				endif 
b651					 
b651			 
b651			.gt_inum: 
b651					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b651 cd 8a 9c			call macro_dsp_valuehl 
b654				endm 
# End of macro FORTH_DSP_VALUEHL
b654			 
b654 e5					push hl  ; u2 
b655			 
b655					; destroy value TOS 
b655			 
b655					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b655 cd 42 9d			call macro_forth_dsp_pop 
b658				endm 
# End of macro FORTH_DSP_POP
b658			 
b658			 
b658					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b658 cd 8a 9c			call macro_dsp_valuehl 
b65b				endm 
# End of macro FORTH_DSP_VALUEHL
b65b			 
b65b e5					push hl    ; u1 
b65c			 
b65c					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b65c cd 42 9d			call macro_forth_dsp_pop 
b65f				endm 
# End of macro FORTH_DSP_POP
b65f			 
b65f			 
b65f b7			 or a      ;clear carry flag 
b660 01 00 00		 ld bc, FORTH_FALSE 
b663 e1			  pop hl    ; u1 
b664 d1			  pop de    ; u2 
b665 ed 52		  sbc hl,de 
b667 38 03		  jr c,.gtcont   	;	if hl >= de, carry flag will be cleared 
b669			 
b669 01 01 00		 ld bc, FORTH_TRUE 
b66c			.gtcont:  
b66c c5					push bc 
b66d e1					pop hl 
b66e			 
b66e					if DEBUG_FORTH_WORDS 
b66e						DMARK "GT1" 
b66e f5				push af  
b66f 3a 83 b6			ld a, (.dmark)  
b672 32 65 ee			ld (debug_mark),a  
b675 3a 84 b6			ld a, (.dmark+1)  
b678 32 66 ee			ld (debug_mark+1),a  
b67b 3a 85 b6			ld a, (.dmark+2)  
b67e 32 67 ee			ld (debug_mark+2),a  
b681 18 03			jr .pastdmark  
b683 ..			.dmark: db "GT1"  
b686 f1			.pastdmark: pop af  
b687			endm  
# End of macro DMARK
b687						CALLMONITOR 
b687 cd 6f ee			call debug_vector  
b68a				endm  
# End of macro CALLMONITOR
b68a					endif 
b68a cd 85 9a				call forth_push_numhl 
b68d			 
b68d					NEXTW 
b68d c3 75 9e			jp macro_next 
b690				endm 
# End of macro NEXTW
b690			.EQUAL: 
b690				CWHEAD .ENDLOGIC 29 "=" 1 WORD_FLAG_CODE 
b690 31				db WORD_SYS_CORE+29             
b691 fb b6			dw .ENDLOGIC            
b693 02				db 1 + 1 
b694 .. 00			db "=",0              
b696				endm 
# End of macro CWHEAD
b696			; | = ( u1 u2 -- f ) True if u1 equals u2 | DONE 
b696				; TODO add floating point number detection 
b696					if DEBUG_FORTH_WORDS_KEY 
b696						DMARK "EQ." 
b696 f5				push af  
b697 3a ab b6			ld a, (.dmark)  
b69a 32 65 ee			ld (debug_mark),a  
b69d 3a ac b6			ld a, (.dmark+1)  
b6a0 32 66 ee			ld (debug_mark+1),a  
b6a3 3a ad b6			ld a, (.dmark+2)  
b6a6 32 67 ee			ld (debug_mark+2),a  
b6a9 18 03			jr .pastdmark  
b6ab ..			.dmark: db "EQ."  
b6ae f1			.pastdmark: pop af  
b6af			endm  
# End of macro DMARK
b6af						CALLMONITOR 
b6af cd 6f ee			call debug_vector  
b6b2				endm  
# End of macro CALLMONITOR
b6b2					endif 
b6b2					FORTH_DSP 
b6b2 cd 50 9c			call macro_forth_dsp 
b6b5				endm 
# End of macro FORTH_DSP
b6b5					;v5 FORTH_DSP_VALUE 
b6b5 7e					ld a,(hl)	; get type of value on TOS 
b6b6 fe 02				cp DS_TYPE_INUM  
b6b8 28 00				jr z, .eq_inum 
b6ba			 
b6ba				if FORTH_ENABLE_FLOATMATH 
b6ba					jr .eq_done 
b6ba			 
b6ba				endif 
b6ba					 
b6ba			 
b6ba			.eq_inum: 
b6ba					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b6ba cd 8a 9c			call macro_dsp_valuehl 
b6bd				endm 
# End of macro FORTH_DSP_VALUEHL
b6bd			 
b6bd e5					push hl 
b6be			 
b6be					; destroy value TOS 
b6be			 
b6be					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b6be cd 42 9d			call macro_forth_dsp_pop 
b6c1				endm 
# End of macro FORTH_DSP_POP
b6c1			 
b6c1			 
b6c1					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b6c1 cd 8a 9c			call macro_dsp_valuehl 
b6c4				endm 
# End of macro FORTH_DSP_VALUEHL
b6c4			 
b6c4					; one value on hl get other one back 
b6c4			 
b6c4 e5					push hl 
b6c5			 
b6c5					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b6c5 cd 42 9d			call macro_forth_dsp_pop 
b6c8				endm 
# End of macro FORTH_DSP_POP
b6c8			 
b6c8 0e 00				ld c, FORTH_FALSE 
b6ca			 
b6ca e1					pop hl 
b6cb d1					pop de 
b6cc			 
b6cc 7b					ld a, e 
b6cd bd					cp l 
b6ce			 
b6ce 20 06				jr nz, .eq_done 
b6d0			 
b6d0 7a					ld a, d 
b6d1 bc					cp h 
b6d2			 
b6d2 20 02				jr nz, .eq_done 
b6d4			 
b6d4 0e 01				ld c, FORTH_TRUE 
b6d6					 
b6d6			 
b6d6			 
b6d6			.eq_done: 
b6d6			 
b6d6					; TODO push value back onto stack for another op etc 
b6d6			 
b6d6 26 00				ld h, 0 
b6d8 69					ld l, c 
b6d9					if DEBUG_FORTH_WORDS 
b6d9						DMARK "EQ1" 
b6d9 f5				push af  
b6da 3a ee b6			ld a, (.dmark)  
b6dd 32 65 ee			ld (debug_mark),a  
b6e0 3a ef b6			ld a, (.dmark+1)  
b6e3 32 66 ee			ld (debug_mark+1),a  
b6e6 3a f0 b6			ld a, (.dmark+2)  
b6e9 32 67 ee			ld (debug_mark+2),a  
b6ec 18 03			jr .pastdmark  
b6ee ..			.dmark: db "EQ1"  
b6f1 f1			.pastdmark: pop af  
b6f2			endm  
# End of macro DMARK
b6f2						CALLMONITOR 
b6f2 cd 6f ee			call debug_vector  
b6f5				endm  
# End of macro CALLMONITOR
b6f5					endif 
b6f5 cd 85 9a				call forth_push_numhl 
b6f8			 
b6f8					NEXTW 
b6f8 c3 75 9e			jp macro_next 
b6fb				endm 
# End of macro NEXTW
b6fb			 
b6fb			 
b6fb			.ENDLOGIC: 
b6fb			; eof 
b6fb			 
b6fb			 
# End of file forth_words_logic.asm
b6fb			include "forth_words_maths.asm" 
b6fb			 
b6fb			; | ## Maths Words 
b6fb			 
b6fb			.PLUS:	 
b6fb				CWHEAD .NEG 1 "+" 1 WORD_FLAG_CODE 
b6fb 15				db WORD_SYS_CORE+1             
b6fc 59 b7			dw .NEG            
b6fe 02				db 1 + 1 
b6ff .. 00			db "+",0              
b701				endm 
# End of macro CWHEAD
b701			; | + ( u u -- u )    Add two numbers and push result   | INT DONE 
b701					if DEBUG_FORTH_WORDS_KEY 
b701						DMARK "PLU" 
b701 f5				push af  
b702 3a 16 b7			ld a, (.dmark)  
b705 32 65 ee			ld (debug_mark),a  
b708 3a 17 b7			ld a, (.dmark+1)  
b70b 32 66 ee			ld (debug_mark+1),a  
b70e 3a 18 b7			ld a, (.dmark+2)  
b711 32 67 ee			ld (debug_mark+2),a  
b714 18 03			jr .pastdmark  
b716 ..			.dmark: db "PLU"  
b719 f1			.pastdmark: pop af  
b71a			endm  
# End of macro DMARK
b71a						CALLMONITOR 
b71a cd 6f ee			call debug_vector  
b71d				endm  
# End of macro CALLMONITOR
b71d					endif 
b71d					; add top two values and push back result 
b71d			 
b71d					;for v5 FORTH_DSP_VALUE 
b71d					FORTH_DSP 
b71d cd 50 9c			call macro_forth_dsp 
b720				endm 
# End of macro FORTH_DSP
b720 7e					ld a,(hl)	; get type of value on TOS 
b721 fe 02				cp DS_TYPE_INUM  
b723 28 03				jr z, .dot_inum 
b725			 
b725					NEXTW 
b725 c3 75 9e			jp macro_next 
b728				endm 
# End of macro NEXTW
b728			 
b728			; float maths 
b728			 
b728				if FORTH_ENABLE_FLOATMATH 
b728						inc hl      ; now at start of numeric as string 
b728			 
b728					if DEBUG_FORTH_MATHS 
b728						DMARK "ADD" 
b728				CALLMONITOR 
b728					endif 
b728			 
b728					;ld ix, hl 
b728					call CON 
b728			 
b728			 
b728					push hl 
b728					 
b728					 
b728			 
b728						FORTH_DSP_POP      ; TODO add stock underflow checks and throws  
b728			 
b728					; get next number 
b728			 
b728						FORTH_DSP_VALUE 
b728			 
b728						inc hl      ; now at start of numeric as string 
b728			 
b728					;ld ix, hl 
b728					call CON 
b728			 
b728					push hl 
b728			 
b728			 
b728						FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b728			 
b728						; TODO do add 
b728			 
b728						call IADD 
b728			 
b728						; TODO get result back as ascii 
b728			 
b728						; TODO push result  
b728			 
b728			 
b728			 
b728						jr .dot_done 
b728				endif 
b728			 
b728			.dot_inum: 
b728			 
b728			 
b728					if DEBUG_FORTH_DOT 
b728						DMARK "+IT" 
b728 f5				push af  
b729 3a 3d b7			ld a, (.dmark)  
b72c 32 65 ee			ld (debug_mark),a  
b72f 3a 3e b7			ld a, (.dmark+1)  
b732 32 66 ee			ld (debug_mark+1),a  
b735 3a 3f b7			ld a, (.dmark+2)  
b738 32 67 ee			ld (debug_mark+2),a  
b73b 18 03			jr .pastdmark  
b73d ..			.dmark: db "+IT"  
b740 f1			.pastdmark: pop af  
b741			endm  
# End of macro DMARK
b741				CALLMONITOR 
b741 cd 6f ee			call debug_vector  
b744				endm  
# End of macro CALLMONITOR
b744					endif 
b744			 
b744					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b744 cd 8a 9c			call macro_dsp_valuehl 
b747				endm 
# End of macro FORTH_DSP_VALUEHL
b747			 
b747				; TODO add floating point number detection 
b747			 
b747 e5					push hl 
b748			 
b748					; destroy value TOS 
b748			 
b748					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b748 cd 42 9d			call macro_forth_dsp_pop 
b74b				endm 
# End of macro FORTH_DSP_POP
b74b			 
b74b			 
b74b					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b74b cd 8a 9c			call macro_dsp_valuehl 
b74e				endm 
# End of macro FORTH_DSP_VALUEHL
b74e			 
b74e					; one value on hl get other one back 
b74e			 
b74e d1					pop de 
b74f			 
b74f					; do the add 
b74f			 
b74f 19					add hl,de 
b750			 
b750					; save it 
b750			 
b750			;		push hl	 
b750			 
b750					; 
b750			 
b750					; destroy value TOS 
b750			 
b750					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b750 cd 42 9d			call macro_forth_dsp_pop 
b753				endm 
# End of macro FORTH_DSP_POP
b753			 
b753					; TODO push value back onto stack for another op etc 
b753			 
b753			;		pop hl 
b753			 
b753			.dot_done: 
b753 cd 85 9a				call forth_push_numhl 
b756			 
b756					NEXTW 
b756 c3 75 9e			jp macro_next 
b759				endm 
# End of macro NEXTW
b759			.NEG: 
b759			 
b759				CWHEAD .DIV 3 "-" 1 WORD_FLAG_CODE 
b759 17				db WORD_SYS_CORE+3             
b75a 9c b7			dw .DIV            
b75c 02				db 1 + 1 
b75d .. 00			db "-",0              
b75f				endm 
# End of macro CWHEAD
b75f			; | - ( u1 u2 -- u )    Subtract u2 from u1 and push result  | INT DONE 
b75f					if DEBUG_FORTH_WORDS_KEY 
b75f						DMARK "SUB" 
b75f f5				push af  
b760 3a 74 b7			ld a, (.dmark)  
b763 32 65 ee			ld (debug_mark),a  
b766 3a 75 b7			ld a, (.dmark+1)  
b769 32 66 ee			ld (debug_mark+1),a  
b76c 3a 76 b7			ld a, (.dmark+2)  
b76f 32 67 ee			ld (debug_mark+2),a  
b772 18 03			jr .pastdmark  
b774 ..			.dmark: db "SUB"  
b777 f1			.pastdmark: pop af  
b778			endm  
# End of macro DMARK
b778						CALLMONITOR 
b778 cd 6f ee			call debug_vector  
b77b				endm  
# End of macro CALLMONITOR
b77b					endif 
b77b			 
b77b			 
b77b				; TODO add floating point number detection 
b77b					; v5 FORTH_DSP_VALUE 
b77b					FORTH_DSP 
b77b cd 50 9c			call macro_forth_dsp 
b77e				endm 
# End of macro FORTH_DSP
b77e 7e					ld a,(hl)	; get type of value on TOS 
b77f fe 02				cp DS_TYPE_INUM  
b781 28 03				jr z, .neg_inum 
b783			 
b783					NEXTW 
b783 c3 75 9e			jp macro_next 
b786				endm 
# End of macro NEXTW
b786			 
b786			; float maths 
b786			 
b786				if FORTH_ENABLE_FLOATMATH 
b786					jr .neg_done 
b786			 
b786				endif 
b786					 
b786			 
b786			.neg_inum: 
b786					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b786 cd 8a 9c			call macro_dsp_valuehl 
b789				endm 
# End of macro FORTH_DSP_VALUEHL
b789			 
b789 e5					push hl 
b78a			 
b78a					; destroy value TOS 
b78a			 
b78a					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b78a cd 42 9d			call macro_forth_dsp_pop 
b78d				endm 
# End of macro FORTH_DSP_POP
b78d			 
b78d			 
b78d					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b78d cd 8a 9c			call macro_dsp_valuehl 
b790				endm 
# End of macro FORTH_DSP_VALUEHL
b790			 
b790					; one value on hl get other one back 
b790			 
b790 d1					pop de 
b791			 
b791					; do the sub 
b791			;		ex de, hl 
b791			 
b791 ed 52				sbc hl,de 
b793			 
b793					; save it 
b793			 
b793			;		push hl	 
b793			 
b793					; 
b793			 
b793					; destroy value TOS 
b793			 
b793					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b793 cd 42 9d			call macro_forth_dsp_pop 
b796				endm 
# End of macro FORTH_DSP_POP
b796			 
b796					; TODO push value back onto stack for another op etc 
b796			 
b796			;		pop hl 
b796			 
b796 cd 85 9a				call forth_push_numhl 
b799			.neg_done: 
b799			 
b799					NEXTW 
b799 c3 75 9e			jp macro_next 
b79c				endm 
# End of macro NEXTW
b79c			.DIV: 
b79c				CWHEAD .MUL 4 "/" 1 WORD_FLAG_CODE 
b79c 18				db WORD_SYS_CORE+4             
b79d e9 b7			dw .MUL            
b79f 02				db 1 + 1 
b7a0 .. 00			db "/",0              
b7a2				endm 
# End of macro CWHEAD
b7a2			; | / ( u1 u2 -- result remainder )     Divide u1 by u2 and push result | INT DONE 
b7a2					if DEBUG_FORTH_WORDS_KEY 
b7a2						DMARK "DIV" 
b7a2 f5				push af  
b7a3 3a b7 b7			ld a, (.dmark)  
b7a6 32 65 ee			ld (debug_mark),a  
b7a9 3a b8 b7			ld a, (.dmark+1)  
b7ac 32 66 ee			ld (debug_mark+1),a  
b7af 3a b9 b7			ld a, (.dmark+2)  
b7b2 32 67 ee			ld (debug_mark+2),a  
b7b5 18 03			jr .pastdmark  
b7b7 ..			.dmark: db "DIV"  
b7ba f1			.pastdmark: pop af  
b7bb			endm  
# End of macro DMARK
b7bb						CALLMONITOR 
b7bb cd 6f ee			call debug_vector  
b7be				endm  
# End of macro CALLMONITOR
b7be					endif 
b7be				; TODO add floating point number detection 
b7be					; v5 FORTH_DSP_VALUE 
b7be					FORTH_DSP 
b7be cd 50 9c			call macro_forth_dsp 
b7c1				endm 
# End of macro FORTH_DSP
b7c1 7e					ld a,(hl)	; get type of value on TOS 
b7c2 fe 02				cp DS_TYPE_INUM  
b7c4 28 03				jr z, .div_inum 
b7c6			 
b7c6				if FORTH_ENABLE_FLOATMATH 
b7c6					jr .div_done 
b7c6			 
b7c6				endif 
b7c6					NEXTW 
b7c6 c3 75 9e			jp macro_next 
b7c9				endm 
# End of macro NEXTW
b7c9			.div_inum: 
b7c9			 
b7c9					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b7c9 cd 8a 9c			call macro_dsp_valuehl 
b7cc				endm 
# End of macro FORTH_DSP_VALUEHL
b7cc			 
b7cc e5					push hl    ; to go to bc 
b7cd			 
b7cd					; destroy value TOS 
b7cd			 
b7cd					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b7cd cd 42 9d			call macro_forth_dsp_pop 
b7d0				endm 
# End of macro FORTH_DSP_POP
b7d0			 
b7d0			 
b7d0					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b7d0 cd 8a 9c			call macro_dsp_valuehl 
b7d3				endm 
# End of macro FORTH_DSP_VALUEHL
b7d3			 
b7d3					; hl to go to de 
b7d3			 
b7d3 e5					push hl 
b7d4			 
b7d4 c1					pop bc 
b7d5 d1					pop de		 
b7d6			 
b7d6			 
b7d6					if DEBUG_FORTH_MATHS 
b7d6						DMARK "DIV" 
b7d6				CALLMONITOR 
b7d6					endif 
b7d6					; one value on hl but move to a get other one back 
b7d6			 
b7d6			        
b7d6 cd 47 8c			call Div16 
b7d9			 
b7d9			;	push af	 
b7d9 e5				push hl 
b7da c5				push bc 
b7db			 
b7db					if DEBUG_FORTH_MATHS 
b7db						DMARK "DI1" 
b7db				CALLMONITOR 
b7db					endif 
b7db			 
b7db					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b7db cd 42 9d			call macro_forth_dsp_pop 
b7de				endm 
# End of macro FORTH_DSP_POP
b7de			 
b7de			 
b7de			 
b7de e1					pop hl    ; result 
b7df			 
b7df cd 85 9a				call forth_push_numhl 
b7e2			 
b7e2 e1					pop hl    ; reminder 
b7e3			;		ld h,0 
b7e3			;		ld l,d 
b7e3			 
b7e3 cd 85 9a				call forth_push_numhl 
b7e6			.div_done: 
b7e6					NEXTW 
b7e6 c3 75 9e			jp macro_next 
b7e9				endm 
# End of macro NEXTW
b7e9			.MUL: 
b7e9				CWHEAD .MIN 5 "*" 1 WORD_FLAG_CODE 
b7e9 19				db WORD_SYS_CORE+5             
b7ea 2e b8			dw .MIN            
b7ec 02				db 1 + 1 
b7ed .. 00			db "*",0              
b7ef				endm 
# End of macro CWHEAD
b7ef			; | * ( u1 u2 -- u )     Multiply TOS and push result | INT DONE 
b7ef				; TODO add floating point number detection 
b7ef					if DEBUG_FORTH_WORDS_KEY 
b7ef						DMARK "MUL" 
b7ef f5				push af  
b7f0 3a 04 b8			ld a, (.dmark)  
b7f3 32 65 ee			ld (debug_mark),a  
b7f6 3a 05 b8			ld a, (.dmark+1)  
b7f9 32 66 ee			ld (debug_mark+1),a  
b7fc 3a 06 b8			ld a, (.dmark+2)  
b7ff 32 67 ee			ld (debug_mark+2),a  
b802 18 03			jr .pastdmark  
b804 ..			.dmark: db "MUL"  
b807 f1			.pastdmark: pop af  
b808			endm  
# End of macro DMARK
b808						CALLMONITOR 
b808 cd 6f ee			call debug_vector  
b80b				endm  
# End of macro CALLMONITOR
b80b					endif 
b80b					FORTH_DSP 
b80b cd 50 9c			call macro_forth_dsp 
b80e				endm 
# End of macro FORTH_DSP
b80e					; v5 FORTH_DSP_VALUE 
b80e 7e					ld a,(hl)	; get type of value on TOS 
b80f fe 02				cp DS_TYPE_INUM  
b811 28 03				jr z, .mul_inum 
b813			 
b813				if FORTH_ENABLE_FLOATMATH 
b813					jr .mul_done 
b813			 
b813				endif 
b813			 
b813					NEXTW 
b813 c3 75 9e			jp macro_next 
b816				endm 
# End of macro NEXTW
b816			.mul_inum:	 
b816			 
b816					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b816 cd 8a 9c			call macro_dsp_valuehl 
b819				endm 
# End of macro FORTH_DSP_VALUEHL
b819			 
b819 e5					push hl 
b81a			 
b81a					; destroy value TOS 
b81a			 
b81a					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b81a cd 42 9d			call macro_forth_dsp_pop 
b81d				endm 
# End of macro FORTH_DSP_POP
b81d			 
b81d			 
b81d					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b81d cd 8a 9c			call macro_dsp_valuehl 
b820				endm 
# End of macro FORTH_DSP_VALUEHL
b820			 
b820					; one value on hl but move to a get other one back 
b820			 
b820 7d					ld a, l 
b821			 
b821 d1					pop de 
b822			 
b822					; do the mull 
b822			;		ex de, hl 
b822			 
b822 cd 6d 8c				call Mult16 
b825					; save it 
b825			 
b825			;		push hl	 
b825			 
b825					; 
b825			 
b825					; destroy value TOS 
b825			 
b825					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b825 cd 42 9d			call macro_forth_dsp_pop 
b828				endm 
# End of macro FORTH_DSP_POP
b828			 
b828					; TODO push value back onto stack for another op etc 
b828			 
b828			;		pop hl 
b828			 
b828 cd 85 9a				call forth_push_numhl 
b82b			 
b82b			.mul_done: 
b82b					NEXTW 
b82b c3 75 9e			jp macro_next 
b82e				endm 
# End of macro NEXTW
b82e			 
b82e			 
b82e			 
b82e			 
b82e			.MIN: 
b82e				CWHEAD .MAX 53 "MIN" 3 WORD_FLAG_CODE 
b82e 49				db WORD_SYS_CORE+53             
b82f af b8			dw .MAX            
b831 04				db 3 + 1 
b832 .. 00			db "MIN",0              
b836				endm 
# End of macro CWHEAD
b836			; | MIN (  u1 u2 -- u3 ) Whichever is the smallest value is pushed back onto the stack | DONE 
b836					if DEBUG_FORTH_WORDS_KEY 
b836						DMARK "MIN" 
b836 f5				push af  
b837 3a 4b b8			ld a, (.dmark)  
b83a 32 65 ee			ld (debug_mark),a  
b83d 3a 4c b8			ld a, (.dmark+1)  
b840 32 66 ee			ld (debug_mark+1),a  
b843 3a 4d b8			ld a, (.dmark+2)  
b846 32 67 ee			ld (debug_mark+2),a  
b849 18 03			jr .pastdmark  
b84b ..			.dmark: db "MIN"  
b84e f1			.pastdmark: pop af  
b84f			endm  
# End of macro DMARK
b84f						CALLMONITOR 
b84f cd 6f ee			call debug_vector  
b852				endm  
# End of macro CALLMONITOR
b852					endif 
b852					; get u2 
b852			 
b852					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b852 cd 8a 9c			call macro_dsp_valuehl 
b855				endm 
# End of macro FORTH_DSP_VALUEHL
b855			 
b855 e5					push hl   ; u2 
b856			 
b856					; destroy value TOS 
b856			 
b856					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b856 cd 42 9d			call macro_forth_dsp_pop 
b859				endm 
# End of macro FORTH_DSP_POP
b859			 
b859					; get u1 
b859			 
b859					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b859 cd 8a 9c			call macro_dsp_valuehl 
b85c				endm 
# End of macro FORTH_DSP_VALUEHL
b85c			 
b85c e5					push hl  ; u1 
b85d			 
b85d					; destroy value TOS 
b85d			 
b85d					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b85d cd 42 9d			call macro_forth_dsp_pop 
b860				endm 
# End of macro FORTH_DSP_POP
b860			 
b860 b7			 or a      ;clear carry flag 
b861 e1			  pop hl    ; u1 
b862 d1			  pop de    ; u2 
b863 e5				push hl   ; saved in case hl is lowest 
b864 ed 52		  sbc hl,de 
b866 30 23		  jr nc,.mincont   	;	if hl >= de, carry flag will be cleared 
b868			 
b868 e1				pop hl 
b869					if DEBUG_FORTH_WORDS 
b869						DMARK "MIN" 
b869 f5				push af  
b86a 3a 7e b8			ld a, (.dmark)  
b86d 32 65 ee			ld (debug_mark),a  
b870 3a 7f b8			ld a, (.dmark+1)  
b873 32 66 ee			ld (debug_mark+1),a  
b876 3a 80 b8			ld a, (.dmark+2)  
b879 32 67 ee			ld (debug_mark+2),a  
b87c 18 03			jr .pastdmark  
b87e ..			.dmark: db "MIN"  
b881 f1			.pastdmark: pop af  
b882			endm  
# End of macro DMARK
b882						CALLMONITOR 
b882 cd 6f ee			call debug_vector  
b885				endm  
# End of macro CALLMONITOR
b885					endif 
b885 cd 85 9a				call forth_push_numhl 
b888			 
b888				       NEXTW 
b888 c3 75 9e			jp macro_next 
b88b				endm 
# End of macro NEXTW
b88b			 
b88b			.mincont:  
b88b c1				pop bc   ; tidy up 
b88c eb				ex de , hl  
b88d					if DEBUG_FORTH_WORDS 
b88d						DMARK "MI1" 
b88d f5				push af  
b88e 3a a2 b8			ld a, (.dmark)  
b891 32 65 ee			ld (debug_mark),a  
b894 3a a3 b8			ld a, (.dmark+1)  
b897 32 66 ee			ld (debug_mark+1),a  
b89a 3a a4 b8			ld a, (.dmark+2)  
b89d 32 67 ee			ld (debug_mark+2),a  
b8a0 18 03			jr .pastdmark  
b8a2 ..			.dmark: db "MI1"  
b8a5 f1			.pastdmark: pop af  
b8a6			endm  
# End of macro DMARK
b8a6						CALLMONITOR 
b8a6 cd 6f ee			call debug_vector  
b8a9				endm  
# End of macro CALLMONITOR
b8a9					endif 
b8a9 cd 85 9a				call forth_push_numhl 
b8ac			 
b8ac				       NEXTW 
b8ac c3 75 9e			jp macro_next 
b8af				endm 
# End of macro NEXTW
b8af			.MAX: 
b8af				CWHEAD .RND16 54 "MAX" 3 WORD_FLAG_CODE 
b8af 4a				db WORD_SYS_CORE+54             
b8b0 30 b9			dw .RND16            
b8b2 04				db 3 + 1 
b8b3 .. 00			db "MAX",0              
b8b7				endm 
# End of macro CWHEAD
b8b7			; | MAX (  u1 u2 -- u3 )  Whichever is the largest value is pushed back onto the stack | DONE 
b8b7					if DEBUG_FORTH_WORDS_KEY 
b8b7						DMARK "MAX" 
b8b7 f5				push af  
b8b8 3a cc b8			ld a, (.dmark)  
b8bb 32 65 ee			ld (debug_mark),a  
b8be 3a cd b8			ld a, (.dmark+1)  
b8c1 32 66 ee			ld (debug_mark+1),a  
b8c4 3a ce b8			ld a, (.dmark+2)  
b8c7 32 67 ee			ld (debug_mark+2),a  
b8ca 18 03			jr .pastdmark  
b8cc ..			.dmark: db "MAX"  
b8cf f1			.pastdmark: pop af  
b8d0			endm  
# End of macro DMARK
b8d0						CALLMONITOR 
b8d0 cd 6f ee			call debug_vector  
b8d3				endm  
# End of macro CALLMONITOR
b8d3					endif 
b8d3					; get u2 
b8d3			 
b8d3					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b8d3 cd 8a 9c			call macro_dsp_valuehl 
b8d6				endm 
# End of macro FORTH_DSP_VALUEHL
b8d6			 
b8d6 e5					push hl   ; u2 
b8d7			 
b8d7					; destroy value TOS 
b8d7			 
b8d7					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b8d7 cd 42 9d			call macro_forth_dsp_pop 
b8da				endm 
# End of macro FORTH_DSP_POP
b8da			 
b8da					; get u1 
b8da			 
b8da					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b8da cd 8a 9c			call macro_dsp_valuehl 
b8dd				endm 
# End of macro FORTH_DSP_VALUEHL
b8dd			 
b8dd e5					push hl  ; u1 
b8de			 
b8de					; destroy value TOS 
b8de			 
b8de					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b8de cd 42 9d			call macro_forth_dsp_pop 
b8e1				endm 
# End of macro FORTH_DSP_POP
b8e1			 
b8e1 b7			 or a      ;clear carry flag 
b8e2 e1			  pop hl    ; u1 
b8e3 d1			  pop de    ; u2 
b8e4 e5				push hl   ; saved in case hl is lowest 
b8e5 ed 52		  sbc hl,de 
b8e7 38 23		  jr c,.maxcont   	;	if hl <= de, carry flag will be cleared 
b8e9			 
b8e9 e1				pop hl 
b8ea					if DEBUG_FORTH_WORDS 
b8ea						DMARK "MAX" 
b8ea f5				push af  
b8eb 3a ff b8			ld a, (.dmark)  
b8ee 32 65 ee			ld (debug_mark),a  
b8f1 3a 00 b9			ld a, (.dmark+1)  
b8f4 32 66 ee			ld (debug_mark+1),a  
b8f7 3a 01 b9			ld a, (.dmark+2)  
b8fa 32 67 ee			ld (debug_mark+2),a  
b8fd 18 03			jr .pastdmark  
b8ff ..			.dmark: db "MAX"  
b902 f1			.pastdmark: pop af  
b903			endm  
# End of macro DMARK
b903						CALLMONITOR 
b903 cd 6f ee			call debug_vector  
b906				endm  
# End of macro CALLMONITOR
b906					endif 
b906 cd 85 9a				call forth_push_numhl 
b909			 
b909				       NEXTW 
b909 c3 75 9e			jp macro_next 
b90c				endm 
# End of macro NEXTW
b90c			 
b90c			.maxcont:  
b90c c1				pop bc   ; tidy up 
b90d eb				ex de , hl  
b90e					if DEBUG_FORTH_WORDS 
b90e						DMARK "MA1" 
b90e f5				push af  
b90f 3a 23 b9			ld a, (.dmark)  
b912 32 65 ee			ld (debug_mark),a  
b915 3a 24 b9			ld a, (.dmark+1)  
b918 32 66 ee			ld (debug_mark+1),a  
b91b 3a 25 b9			ld a, (.dmark+2)  
b91e 32 67 ee			ld (debug_mark+2),a  
b921 18 03			jr .pastdmark  
b923 ..			.dmark: db "MA1"  
b926 f1			.pastdmark: pop af  
b927			endm  
# End of macro DMARK
b927						CALLMONITOR 
b927 cd 6f ee			call debug_vector  
b92a				endm  
# End of macro CALLMONITOR
b92a					endif 
b92a cd 85 9a				call forth_push_numhl 
b92d				       NEXTW 
b92d c3 75 9e			jp macro_next 
b930				endm 
# End of macro NEXTW
b930			 
b930			.RND16: 
b930				CWHEAD .RND8 58 "RND16" 5 WORD_FLAG_CODE 
b930 4e				db WORD_SYS_CORE+58             
b931 5f b9			dw .RND8            
b933 06				db 5 + 1 
b934 .. 00			db "RND16",0              
b93a				endm 
# End of macro CWHEAD
b93a			; | RND16 (  -- n ) Generate a random 16bit number and push to stack | DONE 
b93a					if DEBUG_FORTH_WORDS_KEY 
b93a						DMARK "R16" 
b93a f5				push af  
b93b 3a 4f b9			ld a, (.dmark)  
b93e 32 65 ee			ld (debug_mark),a  
b941 3a 50 b9			ld a, (.dmark+1)  
b944 32 66 ee			ld (debug_mark+1),a  
b947 3a 51 b9			ld a, (.dmark+2)  
b94a 32 67 ee			ld (debug_mark+2),a  
b94d 18 03			jr .pastdmark  
b94f ..			.dmark: db "R16"  
b952 f1			.pastdmark: pop af  
b953			endm  
# End of macro DMARK
b953						CALLMONITOR 
b953 cd 6f ee			call debug_vector  
b956				endm  
# End of macro CALLMONITOR
b956					endif 
b956 cd 11 8c				call prng16  
b959 cd 85 9a				call forth_push_numhl 
b95c				       NEXTW 
b95c c3 75 9e			jp macro_next 
b95f				endm 
# End of macro NEXTW
b95f			.RND8: 
b95f				CWHEAD .RND 76 "RND8" 4 WORD_FLAG_CODE 
b95f 60				db WORD_SYS_CORE+76             
b960 94 b9			dw .RND            
b962 05				db 4 + 1 
b963 .. 00			db "RND8",0              
b968				endm 
# End of macro CWHEAD
b968			; | RND8 (  -- n ) Generate a random 8bit number and push to stack | DONE 
b968					if DEBUG_FORTH_WORDS_KEY 
b968						DMARK "RN8" 
b968 f5				push af  
b969 3a 7d b9			ld a, (.dmark)  
b96c 32 65 ee			ld (debug_mark),a  
b96f 3a 7e b9			ld a, (.dmark+1)  
b972 32 66 ee			ld (debug_mark+1),a  
b975 3a 7f b9			ld a, (.dmark+2)  
b978 32 67 ee			ld (debug_mark+2),a  
b97b 18 03			jr .pastdmark  
b97d ..			.dmark: db "RN8"  
b980 f1			.pastdmark: pop af  
b981			endm  
# End of macro DMARK
b981						CALLMONITOR 
b981 cd 6f ee			call debug_vector  
b984				endm  
# End of macro CALLMONITOR
b984					endif 
b984 2a a3 eb				ld hl,(xrandc) 
b987 23					inc hl 
b988 cd 2b 8c				call xrnd 
b98b 6f					ld l,a	 
b98c 26 00				ld h,0 
b98e cd 85 9a				call forth_push_numhl 
b991				       NEXTW 
b991 c3 75 9e			jp macro_next 
b994				endm 
# End of macro NEXTW
b994			.RND: 
b994				CWHEAD .ENDMATHS 76 "RND" 3 WORD_FLAG_CODE 
b994 60				db WORD_SYS_CORE+76             
b995 9a ba			dw .ENDMATHS            
b997 04				db 3 + 1 
b998 .. 00			db "RND",0              
b99c				endm 
# End of macro CWHEAD
b99c			; | RND ( u1 u2 -- u ) Generate a random number no lower than u1 and no higher than u2 and push to stack | DONE 
b99c			 
b99c					if DEBUG_FORTH_WORDS_KEY 
b99c						DMARK "RND" 
b99c f5				push af  
b99d 3a b1 b9			ld a, (.dmark)  
b9a0 32 65 ee			ld (debug_mark),a  
b9a3 3a b2 b9			ld a, (.dmark+1)  
b9a6 32 66 ee			ld (debug_mark+1),a  
b9a9 3a b3 b9			ld a, (.dmark+2)  
b9ac 32 67 ee			ld (debug_mark+2),a  
b9af 18 03			jr .pastdmark  
b9b1 ..			.dmark: db "RND"  
b9b4 f1			.pastdmark: pop af  
b9b5			endm  
# End of macro DMARK
b9b5						CALLMONITOR 
b9b5 cd 6f ee			call debug_vector  
b9b8				endm  
# End of macro CALLMONITOR
b9b8					endif 
b9b8					 
b9b8					FORTH_DSP_VALUEHL    ; upper range 
b9b8 cd 8a 9c			call macro_dsp_valuehl 
b9bb				endm 
# End of macro FORTH_DSP_VALUEHL
b9bb			 
b9bb 22 a7 eb				ld (LFSRSeed), hl	 
b9be			 
b9be					if DEBUG_FORTH_WORDS 
b9be						DMARK "RN1" 
b9be f5				push af  
b9bf 3a d3 b9			ld a, (.dmark)  
b9c2 32 65 ee			ld (debug_mark),a  
b9c5 3a d4 b9			ld a, (.dmark+1)  
b9c8 32 66 ee			ld (debug_mark+1),a  
b9cb 3a d5 b9			ld a, (.dmark+2)  
b9ce 32 67 ee			ld (debug_mark+2),a  
b9d1 18 03			jr .pastdmark  
b9d3 ..			.dmark: db "RN1"  
b9d6 f1			.pastdmark: pop af  
b9d7			endm  
# End of macro DMARK
b9d7						CALLMONITOR 
b9d7 cd 6f ee			call debug_vector  
b9da				endm  
# End of macro CALLMONITOR
b9da					endif 
b9da					FORTH_DSP_POP 
b9da cd 42 9d			call macro_forth_dsp_pop 
b9dd				endm 
# End of macro FORTH_DSP_POP
b9dd			 
b9dd					FORTH_DSP_VALUEHL    ; low range 
b9dd cd 8a 9c			call macro_dsp_valuehl 
b9e0				endm 
# End of macro FORTH_DSP_VALUEHL
b9e0			 
b9e0					if DEBUG_FORTH_WORDS 
b9e0						DMARK "RN2" 
b9e0 f5				push af  
b9e1 3a f5 b9			ld a, (.dmark)  
b9e4 32 65 ee			ld (debug_mark),a  
b9e7 3a f6 b9			ld a, (.dmark+1)  
b9ea 32 66 ee			ld (debug_mark+1),a  
b9ed 3a f7 b9			ld a, (.dmark+2)  
b9f0 32 67 ee			ld (debug_mark+2),a  
b9f3 18 03			jr .pastdmark  
b9f5 ..			.dmark: db "RN2"  
b9f8 f1			.pastdmark: pop af  
b9f9			endm  
# End of macro DMARK
b9f9						CALLMONITOR 
b9f9 cd 6f ee			call debug_vector  
b9fc				endm  
# End of macro CALLMONITOR
b9fc					endif 
b9fc 22 a9 eb				ld (LFSRSeed+2), hl 
b9ff			 
b9ff					FORTH_DSP_POP 
b9ff cd 42 9d			call macro_forth_dsp_pop 
ba02				endm 
# End of macro FORTH_DSP_POP
ba02			 
ba02 e5					push hl 
ba03			 
ba03 e1			.inrange:	pop hl 
ba04 cd 11 8c				call prng16  
ba07					if DEBUG_FORTH_WORDS 
ba07						DMARK "RN3" 
ba07 f5				push af  
ba08 3a 1c ba			ld a, (.dmark)  
ba0b 32 65 ee			ld (debug_mark),a  
ba0e 3a 1d ba			ld a, (.dmark+1)  
ba11 32 66 ee			ld (debug_mark+1),a  
ba14 3a 1e ba			ld a, (.dmark+2)  
ba17 32 67 ee			ld (debug_mark+2),a  
ba1a 18 03			jr .pastdmark  
ba1c ..			.dmark: db "RN3"  
ba1f f1			.pastdmark: pop af  
ba20			endm  
# End of macro DMARK
ba20						CALLMONITOR 
ba20 cd 6f ee			call debug_vector  
ba23				endm  
# End of macro CALLMONITOR
ba23					endif 
ba23					 
ba23					; if the range is 8bit knock out the high byte 
ba23			 
ba23 ed 5b a7 eb			ld de, (LFSRSeed)     ; check high level 
ba27			 
ba27 3e 00				ld a, 0 
ba29 ba					cp d  
ba2a 20 1e				jr nz, .hirange 
ba2c 26 00				ld h, 0   ; knock it down to 8bit 
ba2e			 
ba2e					if DEBUG_FORTH_WORDS 
ba2e						DMARK "RNk" 
ba2e f5				push af  
ba2f 3a 43 ba			ld a, (.dmark)  
ba32 32 65 ee			ld (debug_mark),a  
ba35 3a 44 ba			ld a, (.dmark+1)  
ba38 32 66 ee			ld (debug_mark+1),a  
ba3b 3a 45 ba			ld a, (.dmark+2)  
ba3e 32 67 ee			ld (debug_mark+2),a  
ba41 18 03			jr .pastdmark  
ba43 ..			.dmark: db "RNk"  
ba46 f1			.pastdmark: pop af  
ba47			endm  
# End of macro DMARK
ba47						CALLMONITOR 
ba47 cd 6f ee			call debug_vector  
ba4a				endm  
# End of macro CALLMONITOR
ba4a					endif 
ba4a			.hirange:   
ba4a e5					push hl  
ba4b b7					or a  
ba4c ed 52		                sbc hl, de 
ba4e			 
ba4e					;call cmp16 
ba4e			 
ba4e 30 b3				jr nc, .inrange      ; if hl >= de, carry flag is cleared 
ba50 e1					pop hl 
ba51 e5					push hl 
ba52			 
ba52					if DEBUG_FORTH_WORDS 
ba52						DMARK "RN4" 
ba52 f5				push af  
ba53 3a 67 ba			ld a, (.dmark)  
ba56 32 65 ee			ld (debug_mark),a  
ba59 3a 68 ba			ld a, (.dmark+1)  
ba5c 32 66 ee			ld (debug_mark+1),a  
ba5f 3a 69 ba			ld a, (.dmark+2)  
ba62 32 67 ee			ld (debug_mark+2),a  
ba65 18 03			jr .pastdmark  
ba67 ..			.dmark: db "RN4"  
ba6a f1			.pastdmark: pop af  
ba6b			endm  
# End of macro DMARK
ba6b						CALLMONITOR 
ba6b cd 6f ee			call debug_vector  
ba6e				endm  
# End of macro CALLMONITOR
ba6e					endif 
ba6e ed 5b a9 eb			ld de, (LFSRSeed+2)   ; check low range 
ba72					;call cmp16 
ba72				 
ba72 b7					or a  
ba73 ed 52		                sbc hl, de 
ba75 38 8c				jr c, .inrange 
ba77			 
ba77 e1					pop hl 
ba78					 
ba78					if DEBUG_FORTH_WORDS 
ba78						DMARK "RNd" 
ba78 f5				push af  
ba79 3a 8d ba			ld a, (.dmark)  
ba7c 32 65 ee			ld (debug_mark),a  
ba7f 3a 8e ba			ld a, (.dmark+1)  
ba82 32 66 ee			ld (debug_mark+1),a  
ba85 3a 8f ba			ld a, (.dmark+2)  
ba88 32 67 ee			ld (debug_mark+2),a  
ba8b 18 03			jr .pastdmark  
ba8d ..			.dmark: db "RNd"  
ba90 f1			.pastdmark: pop af  
ba91			endm  
# End of macro DMARK
ba91						CALLMONITOR 
ba91 cd 6f ee			call debug_vector  
ba94				endm  
# End of macro CALLMONITOR
ba94					endif 
ba94			 
ba94			 
ba94 cd 85 9a				call forth_push_numhl 
ba97				       NEXTW 
ba97 c3 75 9e			jp macro_next 
ba9a				endm 
# End of macro NEXTW
ba9a			 
ba9a			.ENDMATHS: 
ba9a			 
ba9a			; eof 
ba9a			 
# End of file forth_words_maths.asm
ba9a			include "forth_words_display.asm" 
ba9a			 
ba9a			; | ## Display Words 
ba9a			 
ba9a			.ACT: 
ba9a			 
ba9a				CWHEAD .INFO 78 "ACTIVE" 6 WORD_FLAG_CODE 
ba9a 62				db WORD_SYS_CORE+78             
ba9b e6 ba			dw .INFO            
ba9d 07				db 6 + 1 
ba9e .. 00			db "ACTIVE",0              
baa5				endm 
# End of macro CWHEAD
baa5			; | ACTIVE ( -- s ) Push the next char for an activity indicator to TOS | DONE 
baa5			;  
baa5			; | | To display a pulsing activity indicator in a processing loop do this... 
baa5			; | | e.g. $ff $00 do active . ..... Your code ..... loop 
baa5			 
baa5					if DEBUG_FORTH_WORDS_KEY 
baa5						DMARK "ACT" 
baa5 f5				push af  
baa6 3a ba ba			ld a, (.dmark)  
baa9 32 65 ee			ld (debug_mark),a  
baac 3a bb ba			ld a, (.dmark+1)  
baaf 32 66 ee			ld (debug_mark+1),a  
bab2 3a bc ba			ld a, (.dmark+2)  
bab5 32 67 ee			ld (debug_mark+2),a  
bab8 18 03			jr .pastdmark  
baba ..			.dmark: db "ACT"  
babd f1			.pastdmark: pop af  
babe			endm  
# End of macro DMARK
babe						CALLMONITOR 
babe cd 6f ee			call debug_vector  
bac1				endm  
# End of macro CALLMONITOR
bac1					endif 
bac1 cd 14 8a				call active 
bac4					if DEBUG_FORTH_WORDS 
bac4						DMARK "ACp" 
bac4 f5				push af  
bac5 3a d9 ba			ld a, (.dmark)  
bac8 32 65 ee			ld (debug_mark),a  
bacb 3a da ba			ld a, (.dmark+1)  
bace 32 66 ee			ld (debug_mark+1),a  
bad1 3a db ba			ld a, (.dmark+2)  
bad4 32 67 ee			ld (debug_mark+2),a  
bad7 18 03			jr .pastdmark  
bad9 ..			.dmark: db "ACp"  
badc f1			.pastdmark: pop af  
badd			endm  
# End of macro DMARK
badd						CALLMONITOR 
badd cd 6f ee			call debug_vector  
bae0				endm  
# End of macro CALLMONITOR
bae0					endif 
bae0 cd f3 9a				call forth_push_str 
bae3			 
bae3					NEXTW 
bae3 c3 75 9e			jp macro_next 
bae6				endm 
# End of macro NEXTW
bae6			.INFO: 
bae6			 
bae6				CWHEAD .ATP 78 "INFO" 4 WORD_FLAG_CODE 
bae6 62				db WORD_SYS_CORE+78             
bae7 03 bb			dw .ATP            
bae9 05				db 4 + 1 
baea .. 00			db "INFO",0              
baef				endm 
# End of macro CWHEAD
baef			; | INFO ( u1 u2 -- )  Use the top two strings on stack to fill in an info window over two lines. Causes a wait for key press to continue. | DONE 
baef					FORTH_DSP_VALUEHL 
baef cd 8a 9c			call macro_dsp_valuehl 
baf2				endm 
# End of macro FORTH_DSP_VALUEHL
baf2			 
baf2					FORTH_DSP_POP 
baf2 cd 42 9d			call macro_forth_dsp_pop 
baf5				endm 
# End of macro FORTH_DSP_POP
baf5			 
baf5 e5					push hl 
baf6			 
baf6					FORTH_DSP_VALUEHL 
baf6 cd 8a 9c			call macro_dsp_valuehl 
baf9				endm 
# End of macro FORTH_DSP_VALUEHL
baf9			 
baf9					FORTH_DSP_POP 
baf9 cd 42 9d			call macro_forth_dsp_pop 
bafc				endm 
# End of macro FORTH_DSP_POP
bafc			 
bafc d1					pop de 
bafd			 
bafd cd 4e 8a				call info_panel 
bb00			 
bb00			 
bb00					NEXTW 
bb00 c3 75 9e			jp macro_next 
bb03				endm 
# End of macro NEXTW
bb03			.ATP: 
bb03				CWHEAD .FB 78 "AT?" 3 WORD_FLAG_CODE 
bb03 62				db WORD_SYS_CORE+78             
bb04 7a bb			dw .FB            
bb06 04				db 3 + 1 
bb07 .. 00			db "AT?",0              
bb0b				endm 
# End of macro CWHEAD
bb0b			; | AT? ( -- c r )  Push to stack the current position of the next print | TO TEST 
bb0b					if DEBUG_FORTH_WORDS_KEY 
bb0b						DMARK "AT?" 
bb0b f5				push af  
bb0c 3a 20 bb			ld a, (.dmark)  
bb0f 32 65 ee			ld (debug_mark),a  
bb12 3a 21 bb			ld a, (.dmark+1)  
bb15 32 66 ee			ld (debug_mark+1),a  
bb18 3a 22 bb			ld a, (.dmark+2)  
bb1b 32 67 ee			ld (debug_mark+2),a  
bb1e 18 03			jr .pastdmark  
bb20 ..			.dmark: db "AT?"  
bb23 f1			.pastdmark: pop af  
bb24			endm  
# End of macro DMARK
bb24						CALLMONITOR 
bb24 cd 6f ee			call debug_vector  
bb27				endm  
# End of macro CALLMONITOR
bb27					endif 
bb27 3a 58 ea				ld a, (f_cursor_ptr) 
bb2a			 
bb2a			if DEBUG_FORTH_WORDS 
bb2a				DMARK "AT?" 
bb2a f5				push af  
bb2b 3a 3f bb			ld a, (.dmark)  
bb2e 32 65 ee			ld (debug_mark),a  
bb31 3a 40 bb			ld a, (.dmark+1)  
bb34 32 66 ee			ld (debug_mark+1),a  
bb37 3a 41 bb			ld a, (.dmark+2)  
bb3a 32 67 ee			ld (debug_mark+2),a  
bb3d 18 03			jr .pastdmark  
bb3f ..			.dmark: db "AT?"  
bb42 f1			.pastdmark: pop af  
bb43			endm  
# End of macro DMARK
bb43				CALLMONITOR 
bb43 cd 6f ee			call debug_vector  
bb46				endm  
# End of macro CALLMONITOR
bb46			endif	 
bb46					; count the number of rows 
bb46			 
bb46 06 00				ld b, 0 
bb48 4f			.atpr:		ld c, a    ; save in case we go below zero 
bb49 d6 28				sub display_cols 
bb4b f2 51 bb				jp p, .atprunder 
bb4e 04					inc b 
bb4f 18 f7				jr .atpr 
bb51			.atprunder:	 
bb51			if DEBUG_FORTH_WORDS 
bb51				DMARK "A?2" 
bb51 f5				push af  
bb52 3a 66 bb			ld a, (.dmark)  
bb55 32 65 ee			ld (debug_mark),a  
bb58 3a 67 bb			ld a, (.dmark+1)  
bb5b 32 66 ee			ld (debug_mark+1),a  
bb5e 3a 68 bb			ld a, (.dmark+2)  
bb61 32 67 ee			ld (debug_mark+2),a  
bb64 18 03			jr .pastdmark  
bb66 ..			.dmark: db "A?2"  
bb69 f1			.pastdmark: pop af  
bb6a			endm  
# End of macro DMARK
bb6a				CALLMONITOR 
bb6a cd 6f ee			call debug_vector  
bb6d				endm  
# End of macro CALLMONITOR
bb6d			endif	 
bb6d 26 00				ld h, 0 
bb6f 69					ld l, c 
bb70 cd 85 9a				call forth_push_numhl 
bb73 68					ld l, b  
bb74 cd 85 9a				call forth_push_numhl 
bb77			 
bb77			 
bb77				NEXTW 
bb77 c3 75 9e			jp macro_next 
bb7a				endm 
# End of macro NEXTW
bb7a			 
bb7a			.FB: 
bb7a				CWHEAD .EMIT 7 "FB" 2 WORD_FLAG_CODE 
bb7a 1b				db WORD_SYS_CORE+7             
bb7b c8 bb			dw .EMIT            
bb7d 03				db 2 + 1 
bb7e .. 00			db "FB",0              
bb81				endm 
# End of macro CWHEAD
bb81			; | FB ( u -- ) Select frame buffer ID u (1-3)  |  DONE 
bb81			; | | Default frame buffer is 1. System uses 0 which can't be selected for system messages etc. 
bb81			; | | Selecting the frame buffer wont display unless automatic display is setup (default). 
bb81			; | | If automatic display is off then updates will not be shown until DRAW is used. 
bb81					if DEBUG_FORTH_WORDS_KEY 
bb81						DMARK "FB." 
bb81 f5				push af  
bb82 3a 96 bb			ld a, (.dmark)  
bb85 32 65 ee			ld (debug_mark),a  
bb88 3a 97 bb			ld a, (.dmark+1)  
bb8b 32 66 ee			ld (debug_mark+1),a  
bb8e 3a 98 bb			ld a, (.dmark+2)  
bb91 32 67 ee			ld (debug_mark+2),a  
bb94 18 03			jr .pastdmark  
bb96 ..			.dmark: db "FB."  
bb99 f1			.pastdmark: pop af  
bb9a			endm  
# End of macro DMARK
bb9a						CALLMONITOR 
bb9a cd 6f ee			call debug_vector  
bb9d				endm  
# End of macro CALLMONITOR
bb9d					endif 
bb9d			 
bb9d					FORTH_DSP_VALUEHL 
bb9d cd 8a 9c			call macro_dsp_valuehl 
bba0				endm 
# End of macro FORTH_DSP_VALUEHL
bba0			 
bba0 7d					ld a, l 
bba1 fe 01				cp 1 
bba3 20 05				jr nz, .fbn1 
bba5 21 0a ed				ld hl, display_fb1 
bba8 18 15				jr .fbset 
bbaa fe 02		.fbn1:		cp 2 
bbac 20 05				jr nz, .fbn2 
bbae 21 c8 eb				ld hl, display_fb2 
bbb1 18 0c				jr .fbset 
bbb3 fe 03		.fbn2:		cp 3 
bbb5 20 05				jr nz, .fbn3 
bbb7 21 69 ec				ld hl, display_fb3 
bbba 18 03				jr .fbset 
bbbc			.fbn3:		 ; if invalid number select first 
bbbc 21 0a ed				ld hl, display_fb1 
bbbf 22 c6 eb		.fbset:		ld (display_fb_active), hl 
bbc2			 
bbc2					FORTH_DSP_POP 
bbc2 cd 42 9d			call macro_forth_dsp_pop 
bbc5				endm 
# End of macro FORTH_DSP_POP
bbc5			 
bbc5					NEXTW 
bbc5 c3 75 9e			jp macro_next 
bbc8				endm 
# End of macro NEXTW
bbc8			 
bbc8			 
bbc8			.EMIT: 
bbc8				CWHEAD .DOTH 7 "EMIT" 4 WORD_FLAG_CODE 
bbc8 1b				db WORD_SYS_CORE+7             
bbc9 19 bc			dw .DOTH            
bbcb 05				db 4 + 1 
bbcc .. 00			db "EMIT",0              
bbd1				endm 
# End of macro CWHEAD
bbd1			; |  EMIT ( u -- ) Display ascii character  TOS   | DONE 
bbd1					; get value off TOS and display it 
bbd1			 
bbd1					if DEBUG_FORTH_WORDS_KEY 
bbd1						DMARK "EMT" 
bbd1 f5				push af  
bbd2 3a e6 bb			ld a, (.dmark)  
bbd5 32 65 ee			ld (debug_mark),a  
bbd8 3a e7 bb			ld a, (.dmark+1)  
bbdb 32 66 ee			ld (debug_mark+1),a  
bbde 3a e8 bb			ld a, (.dmark+2)  
bbe1 32 67 ee			ld (debug_mark+2),a  
bbe4 18 03			jr .pastdmark  
bbe6 ..			.dmark: db "EMT"  
bbe9 f1			.pastdmark: pop af  
bbea			endm  
# End of macro DMARK
bbea						CALLMONITOR 
bbea cd 6f ee			call debug_vector  
bbed				endm  
# End of macro CALLMONITOR
bbed					endif 
bbed			 
bbed					FORTH_DSP_VALUEHL 
bbed cd 8a 9c			call macro_dsp_valuehl 
bbf0				endm 
# End of macro FORTH_DSP_VALUEHL
bbf0			 
bbf0 7d					ld a,l 
bbf1			 
bbf1					; TODO write to display 
bbf1			 
bbf1 32 b9 e4				ld (os_input), a 
bbf4 3e 00				ld a, 0 
bbf6 32 ba e4				ld (os_input+1), a 
bbf9					 
bbf9 3a 58 ea				ld a, (f_cursor_ptr) 
bbfc 11 b9 e4				ld de, os_input 
bbff cd d0 8a				call str_at_display 
bc02			 
bc02			 
bc02 3a 36 ea				ld a,(cli_autodisplay) 
bc05 fe 00				cp 0 
bc07 28 03				jr z, .enoupdate 
bc09 cd e0 8a						call update_display 
bc0c					.enoupdate: 
bc0c			 
bc0c 3a 58 ea				ld a, (f_cursor_ptr) 
bc0f 3c					inc a 
bc10 32 58 ea				ld (f_cursor_ptr), a   ; save new pos 
bc13			 
bc13			 
bc13					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bc13 cd 42 9d			call macro_forth_dsp_pop 
bc16				endm 
# End of macro FORTH_DSP_POP
bc16			  
bc16			 
bc16					NEXTW 
bc16 c3 75 9e			jp macro_next 
bc19				endm 
# End of macro NEXTW
bc19			.DOTH: 
bc19				CWHEAD .DOTF 8 ".-" 2 WORD_FLAG_CODE 
bc19 1c				db WORD_SYS_CORE+8             
bc1a 49 bc			dw .DOTF            
bc1c 03				db 2 + 1 
bc1d .. 00			db ".-",0              
bc20				endm 
# End of macro CWHEAD
bc20			        ; | .- ( u -- ) Display TOS replacing any dashes with spaces. Means you dont need to wrap strings in double quotes!   | DONE 
bc20					; get value off TOS and display it 
bc20					if DEBUG_FORTH_WORDS_KEY 
bc20						DMARK "DTD" 
bc20 f5				push af  
bc21 3a 35 bc			ld a, (.dmark)  
bc24 32 65 ee			ld (debug_mark),a  
bc27 3a 36 bc			ld a, (.dmark+1)  
bc2a 32 66 ee			ld (debug_mark+1),a  
bc2d 3a 37 bc			ld a, (.dmark+2)  
bc30 32 67 ee			ld (debug_mark+2),a  
bc33 18 03			jr .pastdmark  
bc35 ..			.dmark: db "DTD"  
bc38 f1			.pastdmark: pop af  
bc39			endm  
# End of macro DMARK
bc39						CALLMONITOR 
bc39 cd 6f ee			call debug_vector  
bc3c				endm  
# End of macro CALLMONITOR
bc3c					endif 
bc3c 0e 01			ld c, 1	  ; flag for removal of '-' enabled 
bc3e 3e 00			ld a, 0 
bc40 32 37 ea			ld (cli_mvdot), a 
bc43 c3 a0 bc			jp .dotgo 
bc46				NEXTW 
bc46 c3 75 9e			jp macro_next 
bc49				endm 
# End of macro NEXTW
bc49			.DOTF: 
bc49				CWHEAD .DOT 8 ".>" 2 WORD_FLAG_CODE 
bc49 1c				db WORD_SYS_CORE+8             
bc4a 77 bc			dw .DOT            
bc4c 03				db 2 + 1 
bc4d .. 00			db ".>",0              
bc50				endm 
# End of macro CWHEAD
bc50			        ; | .> ( u -- ) Display TOS and move the next display point with display  | DONE 
bc50					; get value off TOS and display it 
bc50			        ; TODO BUG adds extra spaces 
bc50			        ; TODO BUG handle numerics? 
bc50					if DEBUG_FORTH_WORDS_KEY 
bc50						DMARK "DTC" 
bc50 f5				push af  
bc51 3a 65 bc			ld a, (.dmark)  
bc54 32 65 ee			ld (debug_mark),a  
bc57 3a 66 bc			ld a, (.dmark+1)  
bc5a 32 66 ee			ld (debug_mark+1),a  
bc5d 3a 67 bc			ld a, (.dmark+2)  
bc60 32 67 ee			ld (debug_mark+2),a  
bc63 18 03			jr .pastdmark  
bc65 ..			.dmark: db "DTC"  
bc68 f1			.pastdmark: pop af  
bc69			endm  
# End of macro DMARK
bc69						CALLMONITOR 
bc69 cd 6f ee			call debug_vector  
bc6c				endm  
# End of macro CALLMONITOR
bc6c					endif 
bc6c 3e 01			ld a, 1 
bc6e 32 37 ea			ld (cli_mvdot), a 
bc71 c3 a0 bc			jp .dotgo 
bc74				NEXTW 
bc74 c3 75 9e			jp macro_next 
bc77				endm 
# End of macro NEXTW
bc77			 
bc77			.DOT: 
bc77				CWHEAD .CLS 8 "." 1 WORD_FLAG_CODE 
bc77 1c				db WORD_SYS_CORE+8             
bc78 53 be			dw .CLS            
bc7a 02				db 1 + 1 
bc7b .. 00			db ".",0              
bc7d				endm 
# End of macro CWHEAD
bc7d			        ; | . ( u -- ) Display TOS. Does not move next print position. Use .> if you want that. | DONE 
bc7d					; get value off TOS and display it 
bc7d			 
bc7d					if DEBUG_FORTH_WORDS_KEY 
bc7d						DMARK "DOT" 
bc7d f5				push af  
bc7e 3a 92 bc			ld a, (.dmark)  
bc81 32 65 ee			ld (debug_mark),a  
bc84 3a 93 bc			ld a, (.dmark+1)  
bc87 32 66 ee			ld (debug_mark+1),a  
bc8a 3a 94 bc			ld a, (.dmark+2)  
bc8d 32 67 ee			ld (debug_mark+2),a  
bc90 18 03			jr .pastdmark  
bc92 ..			.dmark: db "DOT"  
bc95 f1			.pastdmark: pop af  
bc96			endm  
# End of macro DMARK
bc96						CALLMONITOR 
bc96 cd 6f ee			call debug_vector  
bc99				endm  
# End of macro CALLMONITOR
bc99					endif 
bc99 3e 00			ld a, 0 
bc9b 32 37 ea			ld (cli_mvdot), a 
bc9e 0e 00		ld c, 0	  ; flag for removal of '-' disabled 
bca0				 
bca0			 
bca0			.dotgo: 
bca0			 
bca0			; move up type to on stack for parserv5 
bca0					FORTH_DSP 
bca0 cd 50 9c			call macro_forth_dsp 
bca3				endm 
# End of macro FORTH_DSP
bca3				;FORTH_DSP_VALUE  
bca3			 
bca3			if DEBUG_FORTH_DOT 
bca3				DMARK "DOT" 
bca3 f5				push af  
bca4 3a b8 bc			ld a, (.dmark)  
bca7 32 65 ee			ld (debug_mark),a  
bcaa 3a b9 bc			ld a, (.dmark+1)  
bcad 32 66 ee			ld (debug_mark+1),a  
bcb0 3a ba bc			ld a, (.dmark+2)  
bcb3 32 67 ee			ld (debug_mark+2),a  
bcb6 18 03			jr .pastdmark  
bcb8 ..			.dmark: db "DOT"  
bcbb f1			.pastdmark: pop af  
bcbc			endm  
# End of macro DMARK
bcbc				CALLMONITOR 
bcbc cd 6f ee			call debug_vector  
bcbf				endm  
# End of macro CALLMONITOR
bcbf			endif	 
bcbf			;		.print: 
bcbf			 
bcbf 7e				ld a,(hl)  ; work out what type of value is on the TOS 
bcc0 23				inc hl   ; position to the actual value 
bcc1 fe 01			cp DS_TYPE_STR 
bcc3 20 06			jr nz, .dotnum1  
bcc5			 
bcc5			; display string 
bcc5				FORTH_DSP_VALUE  
bcc5 cd 73 9c			call macro_forth_dsp_value 
bcc8				endm 
# End of macro FORTH_DSP_VALUE
bcc8 eb				ex de,hl 
bcc9 18 49			jr .dotwrite 
bccb			 
bccb			.dotnum1: 
bccb fe 02			cp DS_TYPE_INUM 
bccd 20 44			jr nz, .dotflot 
bccf			 
bccf			 
bccf			; display number 
bccf			 
bccf			;	push hl 
bccf			;	call clear_display 
bccf			;	pop hl 
bccf			 
bccf 5e				ld e, (hl) 
bcd0 23				inc hl 
bcd1 56				ld d, (hl) 
bcd2 21 bb e2			ld hl, scratch 
bcd5			if DEBUG_FORTH_DOT 
bcd5				DMARK "DT1" 
bcd5 f5				push af  
bcd6 3a ea bc			ld a, (.dmark)  
bcd9 32 65 ee			ld (debug_mark),a  
bcdc 3a eb bc			ld a, (.dmark+1)  
bcdf 32 66 ee			ld (debug_mark+1),a  
bce2 3a ec bc			ld a, (.dmark+2)  
bce5 32 67 ee			ld (debug_mark+2),a  
bce8 18 03			jr .pastdmark  
bcea ..			.dmark: db "DT1"  
bced f1			.pastdmark: pop af  
bcee			endm  
# End of macro DMARK
bcee				CALLMONITOR 
bcee cd 6f ee			call debug_vector  
bcf1				endm  
# End of macro CALLMONITOR
bcf1			endif	 
bcf1			 
bcf1 cd ff 8f			call uitoa_16 
bcf4 eb				ex de,hl 
bcf5			 
bcf5			if DEBUG_FORTH_DOT 
bcf5				DMARK "DT2" 
bcf5 f5				push af  
bcf6 3a 0a bd			ld a, (.dmark)  
bcf9 32 65 ee			ld (debug_mark),a  
bcfc 3a 0b bd			ld a, (.dmark+1)  
bcff 32 66 ee			ld (debug_mark+1),a  
bd02 3a 0c bd			ld a, (.dmark+2)  
bd05 32 67 ee			ld (debug_mark+2),a  
bd08 18 03			jr .pastdmark  
bd0a ..			.dmark: db "DT2"  
bd0d f1			.pastdmark: pop af  
bd0e			endm  
# End of macro DMARK
bd0e				CALLMONITOR 
bd0e cd 6f ee			call debug_vector  
bd11				endm  
# End of macro CALLMONITOR
bd11			endif	 
bd11			 
bd11			;	ld de, os_word_scratch 
bd11 18 01			jr .dotwrite 
bd13			 
bd13 00			.dotflot:   nop 
bd14			; TODO print floating point number 
bd14			 
bd14			.dotwrite:		 
bd14			 
bd14					; if c is set then set all '-' to spaces 
bd14					; need to also take into account .>  
bd14			 
bd14 3e 01				ld a, 1 
bd16 b9					cp c 
bd17 20 67				jr nz, .nodashswap 
bd19			 
bd19					; DE has the string to write, working with HL 
bd19			 
bd19 06 ff				ld b, 255 
bd1b d5					push de 
bd1c e1					pop hl 
bd1d			 
bd1d			if DEBUG_FORTH_DOT 
bd1d				DMARK "DT-" 
bd1d f5				push af  
bd1e 3a 32 bd			ld a, (.dmark)  
bd21 32 65 ee			ld (debug_mark),a  
bd24 3a 33 bd			ld a, (.dmark+1)  
bd27 32 66 ee			ld (debug_mark+1),a  
bd2a 3a 34 bd			ld a, (.dmark+2)  
bd2d 32 67 ee			ld (debug_mark+2),a  
bd30 18 03			jr .pastdmark  
bd32 ..			.dmark: db "DT-"  
bd35 f1			.pastdmark: pop af  
bd36			endm  
# End of macro DMARK
bd36				CALLMONITOR 
bd36 cd 6f ee			call debug_vector  
bd39				endm  
# End of macro CALLMONITOR
bd39			endif	 
bd39 7e			.dashscan:	ld a, (hl) 
bd3a fe 00				cp 0 
bd3c 28 42				jr z, .nodashswap 
bd3e fe 2d				cp '-' 
bd40 20 03				jr nz, .dashskip 
bd42 3e 20				ld a, ' ' 
bd44 77					ld (hl), a 
bd45 23			.dashskip:	inc hl 
bd46			if DEBUG_FORTH_DOT 
bd46				DMARK "D-2" 
bd46 f5				push af  
bd47 3a 5b bd			ld a, (.dmark)  
bd4a 32 65 ee			ld (debug_mark),a  
bd4d 3a 5c bd			ld a, (.dmark+1)  
bd50 32 66 ee			ld (debug_mark+1),a  
bd53 3a 5d bd			ld a, (.dmark+2)  
bd56 32 67 ee			ld (debug_mark+2),a  
bd59 18 03			jr .pastdmark  
bd5b ..			.dmark: db "D-2"  
bd5e f1			.pastdmark: pop af  
bd5f			endm  
# End of macro DMARK
bd5f				CALLMONITOR 
bd5f cd 6f ee			call debug_vector  
bd62				endm  
# End of macro CALLMONITOR
bd62			endif	 
bd62 10 d5				djnz .dashscan 
bd64			 
bd64			if DEBUG_FORTH_DOT 
bd64				DMARK "D-1" 
bd64 f5				push af  
bd65 3a 79 bd			ld a, (.dmark)  
bd68 32 65 ee			ld (debug_mark),a  
bd6b 3a 7a bd			ld a, (.dmark+1)  
bd6e 32 66 ee			ld (debug_mark+1),a  
bd71 3a 7b bd			ld a, (.dmark+2)  
bd74 32 67 ee			ld (debug_mark+2),a  
bd77 18 03			jr .pastdmark  
bd79 ..			.dmark: db "D-1"  
bd7c f1			.pastdmark: pop af  
bd7d			endm  
# End of macro DMARK
bd7d				CALLMONITOR 
bd7d cd 6f ee			call debug_vector  
bd80				endm  
# End of macro CALLMONITOR
bd80			endif	 
bd80			 
bd80			.nodashswap: 
bd80			 
bd80			if DEBUG_FORTH_DOT 
bd80				DMARK "D-o" 
bd80 f5				push af  
bd81 3a 95 bd			ld a, (.dmark)  
bd84 32 65 ee			ld (debug_mark),a  
bd87 3a 96 bd			ld a, (.dmark+1)  
bd8a 32 66 ee			ld (debug_mark+1),a  
bd8d 3a 97 bd			ld a, (.dmark+2)  
bd90 32 67 ee			ld (debug_mark+2),a  
bd93 18 03			jr .pastdmark  
bd95 ..			.dmark: db "D-o"  
bd98 f1			.pastdmark: pop af  
bd99			endm  
# End of macro DMARK
bd99				CALLMONITOR 
bd99 cd 6f ee			call debug_vector  
bd9c				endm  
# End of macro CALLMONITOR
bd9c			endif	 
bd9c			 
bd9c d5					push de   ; save string start in case we need to advance print 
bd9d			 
bd9d 3a 58 ea				ld a, (f_cursor_ptr) 
bda0 cd d0 8a				call str_at_display 
bda3 3a 36 ea				ld a,(cli_autodisplay) 
bda6 fe 00				cp 0 
bda8 28 03				jr z, .noupdate 
bdaa cd e0 8a						call update_display 
bdad					.noupdate: 
bdad			 
bdad			 
bdad					; see if we need to advance the print position 
bdad			 
bdad e1					pop hl   ; get back string 
bdae			;		ex de,hl 
bdae			 
bdae 3a 37 ea				ld a, (cli_mvdot) 
bdb1			if DEBUG_FORTH_DOT 
bdb1			;		ld e,a 
bdb1				DMARK "D>1" 
bdb1 f5				push af  
bdb2 3a c6 bd			ld a, (.dmark)  
bdb5 32 65 ee			ld (debug_mark),a  
bdb8 3a c7 bd			ld a, (.dmark+1)  
bdbb 32 66 ee			ld (debug_mark+1),a  
bdbe 3a c8 bd			ld a, (.dmark+2)  
bdc1 32 67 ee			ld (debug_mark+2),a  
bdc4 18 03			jr .pastdmark  
bdc6 ..			.dmark: db "D>1"  
bdc9 f1			.pastdmark: pop af  
bdca			endm  
# End of macro DMARK
bdca				CALLMONITOR 
bdca cd 6f ee			call debug_vector  
bdcd				endm  
# End of macro CALLMONITOR
bdcd			endif	 
bdcd fe 00				cp 0 
bdcf 28 44				jr z, .noadv 
bdd1					; yes, lets advance the print position 
bdd1 3e 00				ld a, 0 
bdd3 cd 5b 90				call strlent 
bdd6			if DEBUG_FORTH_DOT 
bdd6				DMARK "D-?" 
bdd6 f5				push af  
bdd7 3a eb bd			ld a, (.dmark)  
bdda 32 65 ee			ld (debug_mark),a  
bddd 3a ec bd			ld a, (.dmark+1)  
bde0 32 66 ee			ld (debug_mark+1),a  
bde3 3a ed bd			ld a, (.dmark+2)  
bde6 32 67 ee			ld (debug_mark+2),a  
bde9 18 03			jr .pastdmark  
bdeb ..			.dmark: db "D-?"  
bdee f1			.pastdmark: pop af  
bdef			endm  
# End of macro DMARK
bdef				CALLMONITOR 
bdef cd 6f ee			call debug_vector  
bdf2				endm  
# End of macro CALLMONITOR
bdf2			endif	 
bdf2 3a 58 ea				ld a, (f_cursor_ptr) 
bdf5 85					add a,l 
bdf6					;call addatohl 
bdf6					;ld a, l 
bdf6 32 58 ea				ld (f_cursor_ptr), a   ; save new pos 
bdf9			 
bdf9			if DEBUG_FORTH_DOT 
bdf9				DMARK "D->" 
bdf9 f5				push af  
bdfa 3a 0e be			ld a, (.dmark)  
bdfd 32 65 ee			ld (debug_mark),a  
be00 3a 0f be			ld a, (.dmark+1)  
be03 32 66 ee			ld (debug_mark+1),a  
be06 3a 10 be			ld a, (.dmark+2)  
be09 32 67 ee			ld (debug_mark+2),a  
be0c 18 03			jr .pastdmark  
be0e ..			.dmark: db "D->"  
be11 f1			.pastdmark: pop af  
be12			endm  
# End of macro DMARK
be12				CALLMONITOR 
be12 cd 6f ee			call debug_vector  
be15				endm  
# End of macro CALLMONITOR
be15			endif	 
be15			 
be15			.noadv:	 
be15			 
be15					if DEBUG_FORTH_DOT_WAIT 
be15							call next_page_prompt 
be15					endif	 
be15			; TODO this pop off the stack causes a crash. i dont know why 
be15			 
be15			 
be15			if DEBUG_FORTH_DOT 
be15				DMARK "DTh" 
be15 f5				push af  
be16 3a 2a be			ld a, (.dmark)  
be19 32 65 ee			ld (debug_mark),a  
be1c 3a 2b be			ld a, (.dmark+1)  
be1f 32 66 ee			ld (debug_mark+1),a  
be22 3a 2c be			ld a, (.dmark+2)  
be25 32 67 ee			ld (debug_mark+2),a  
be28 18 03			jr .pastdmark  
be2a ..			.dmark: db "DTh"  
be2d f1			.pastdmark: pop af  
be2e			endm  
# End of macro DMARK
be2e				CALLMONITOR 
be2e cd 6f ee			call debug_vector  
be31				endm  
# End of macro CALLMONITOR
be31			endif	 
be31			 
be31					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
be31 cd 42 9d			call macro_forth_dsp_pop 
be34				endm 
# End of macro FORTH_DSP_POP
be34			 
be34			if DEBUG_FORTH_DOT 
be34				DMARK "DTi" 
be34 f5				push af  
be35 3a 49 be			ld a, (.dmark)  
be38 32 65 ee			ld (debug_mark),a  
be3b 3a 4a be			ld a, (.dmark+1)  
be3e 32 66 ee			ld (debug_mark+1),a  
be41 3a 4b be			ld a, (.dmark+2)  
be44 32 67 ee			ld (debug_mark+2),a  
be47 18 03			jr .pastdmark  
be49 ..			.dmark: db "DTi"  
be4c f1			.pastdmark: pop af  
be4d			endm  
# End of macro DMARK
be4d				CALLMONITOR 
be4d cd 6f ee			call debug_vector  
be50				endm  
# End of macro CALLMONITOR
be50			endif	 
be50			 
be50			 
be50					NEXTW 
be50 c3 75 9e			jp macro_next 
be53				endm 
# End of macro NEXTW
be53			 
be53			.CLS: 
be53				CWHEAD .DRAW 33 "CLS" 3 WORD_FLAG_CODE 
be53 35				db WORD_SYS_CORE+33             
be54 80 be			dw .DRAW            
be56 04				db 3 + 1 
be57 .. 00			db "CLS",0              
be5b				endm 
# End of macro CWHEAD
be5b			; | CLS ( -- ) Clear current frame buffer and set next print position to top left corner  | DONE 
be5b					if DEBUG_FORTH_WORDS_KEY 
be5b						DMARK "CLS" 
be5b f5				push af  
be5c 3a 70 be			ld a, (.dmark)  
be5f 32 65 ee			ld (debug_mark),a  
be62 3a 71 be			ld a, (.dmark+1)  
be65 32 66 ee			ld (debug_mark+1),a  
be68 3a 72 be			ld a, (.dmark+2)  
be6b 32 67 ee			ld (debug_mark+2),a  
be6e 18 03			jr .pastdmark  
be70 ..			.dmark: db "CLS"  
be73 f1			.pastdmark: pop af  
be74			endm  
# End of macro DMARK
be74						CALLMONITOR 
be74 cd 6f ee			call debug_vector  
be77				endm  
# End of macro CALLMONITOR
be77					endif 
be77 cd bd 8a				call clear_display 
be7a c3 8e bf				jp .home		; and home cursor 
be7d					NEXTW 
be7d c3 75 9e			jp macro_next 
be80				endm 
# End of macro NEXTW
be80			 
be80			.DRAW: 
be80				CWHEAD .DUMP 34 "DRAW" 4 WORD_FLAG_CODE 
be80 36				db WORD_SYS_CORE+34             
be81 ab be			dw .DUMP            
be83 05				db 4 + 1 
be84 .. 00			db "DRAW",0              
be89				endm 
# End of macro CWHEAD
be89			; | DRAW ( -- ) Draw contents of current frame buffer  | DONE 
be89					if DEBUG_FORTH_WORDS_KEY 
be89						DMARK "DRW" 
be89 f5				push af  
be8a 3a 9e be			ld a, (.dmark)  
be8d 32 65 ee			ld (debug_mark),a  
be90 3a 9f be			ld a, (.dmark+1)  
be93 32 66 ee			ld (debug_mark+1),a  
be96 3a a0 be			ld a, (.dmark+2)  
be99 32 67 ee			ld (debug_mark+2),a  
be9c 18 03			jr .pastdmark  
be9e ..			.dmark: db "DRW"  
bea1 f1			.pastdmark: pop af  
bea2			endm  
# End of macro DMARK
bea2						CALLMONITOR 
bea2 cd 6f ee			call debug_vector  
bea5				endm  
# End of macro CALLMONITOR
bea5					endif 
bea5 cd e0 8a				call update_display 
bea8					NEXTW 
bea8 c3 75 9e			jp macro_next 
beab				endm 
# End of macro NEXTW
beab			 
beab			.DUMP: 
beab				CWHEAD .CDUMP 35 "DUMP" 4 WORD_FLAG_CODE 
beab 37				db WORD_SYS_CORE+35             
beac e3 be			dw .CDUMP            
beae 05				db 4 + 1 
beaf .. 00			db "DUMP",0              
beb4				endm 
# End of macro CWHEAD
beb4			; | DUMP ( x -- ) With address x display dump   | DONE 
beb4			; TODO pop address to use off of the stack 
beb4					if DEBUG_FORTH_WORDS_KEY 
beb4						DMARK "DUM" 
beb4 f5				push af  
beb5 3a c9 be			ld a, (.dmark)  
beb8 32 65 ee			ld (debug_mark),a  
bebb 3a ca be			ld a, (.dmark+1)  
bebe 32 66 ee			ld (debug_mark+1),a  
bec1 3a cb be			ld a, (.dmark+2)  
bec4 32 67 ee			ld (debug_mark+2),a  
bec7 18 03			jr .pastdmark  
bec9 ..			.dmark: db "DUM"  
becc f1			.pastdmark: pop af  
becd			endm  
# End of macro DMARK
becd						CALLMONITOR 
becd cd 6f ee			call debug_vector  
bed0				endm  
# End of macro CALLMONITOR
bed0					endif 
bed0 cd bd 8a				call clear_display 
bed3			 
bed3					; get address 
bed3			 
bed3					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
bed3 cd 8a 9c			call macro_dsp_valuehl 
bed6				endm 
# End of macro FORTH_DSP_VALUEHL
bed6				 
bed6					; save it for cdump 
bed6			 
bed6 22 de e5				ld (os_cur_ptr),hl 
bed9			 
bed9					; destroy value TOS 
bed9			 
bed9					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bed9 cd 42 9d			call macro_forth_dsp_pop 
bedc				endm 
# End of macro FORTH_DSP_POP
bedc			 
bedc cd 05 99				call dumpcont	; skip old style of param parsing	 
bedf c9					ret			; TODO command causes end of remaining parsing so cant do: $0000 DUMP $8000 DUMP 
bee0					NEXTW 
bee0 c3 75 9e			jp macro_next 
bee3				endm 
# End of macro NEXTW
bee3			.CDUMP: 
bee3				CWHEAD .DAT 36 "CDUMP" 5 WORD_FLAG_CODE 
bee3 38				db WORD_SYS_CORE+36             
bee4 13 bf			dw .DAT            
bee6 06				db 5 + 1 
bee7 .. 00			db "CDUMP",0              
beed				endm 
# End of macro CWHEAD
beed			; | CDUMP ( -- ) Continue dump of memory from DUMP | DONE 
beed					if DEBUG_FORTH_WORDS_KEY 
beed						DMARK "CDP" 
beed f5				push af  
beee 3a 02 bf			ld a, (.dmark)  
bef1 32 65 ee			ld (debug_mark),a  
bef4 3a 03 bf			ld a, (.dmark+1)  
bef7 32 66 ee			ld (debug_mark+1),a  
befa 3a 04 bf			ld a, (.dmark+2)  
befd 32 67 ee			ld (debug_mark+2),a  
bf00 18 03			jr .pastdmark  
bf02 ..			.dmark: db "CDP"  
bf05 f1			.pastdmark: pop af  
bf06			endm  
# End of macro DMARK
bf06						CALLMONITOR 
bf06 cd 6f ee			call debug_vector  
bf09				endm  
# End of macro CALLMONITOR
bf09					endif 
bf09 cd bd 8a				call clear_display 
bf0c cd 05 99				call dumpcont	 
bf0f c9					ret			; TODO command causes end of remaining parsing so cant do: $0000 DUMP CDUMP $8000 DUMP 
bf10					NEXTW 
bf10 c3 75 9e			jp macro_next 
bf13				endm 
# End of macro NEXTW
bf13			 
bf13			 
bf13			 
bf13			 
bf13			.DAT: 
bf13				CWHEAD .HOME 41 "AT" 2 WORD_FLAG_CODE 
bf13 3d				db WORD_SYS_CORE+41             
bf14 69 bf			dw .HOME            
bf16 03				db 2 + 1 
bf17 .. 00			db "AT",0              
bf1a				endm 
# End of macro CWHEAD
bf1a			; | AT ( u1 u2 -- ) Set next output via . or emit at row u2 col u1 | DONE 
bf1a					if DEBUG_FORTH_WORDS_KEY 
bf1a						DMARK "AT." 
bf1a f5				push af  
bf1b 3a 2f bf			ld a, (.dmark)  
bf1e 32 65 ee			ld (debug_mark),a  
bf21 3a 30 bf			ld a, (.dmark+1)  
bf24 32 66 ee			ld (debug_mark+1),a  
bf27 3a 31 bf			ld a, (.dmark+2)  
bf2a 32 67 ee			ld (debug_mark+2),a  
bf2d 18 03			jr .pastdmark  
bf2f ..			.dmark: db "AT."  
bf32 f1			.pastdmark: pop af  
bf33			endm  
# End of macro DMARK
bf33						CALLMONITOR 
bf33 cd 6f ee			call debug_vector  
bf36				endm  
# End of macro CALLMONITOR
bf36					endif 
bf36					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
bf36 cd 8a 9c			call macro_dsp_valuehl 
bf39				endm 
# End of macro FORTH_DSP_VALUEHL
bf39			 
bf39			 
bf39					; TODO save cursor row 
bf39 7d					ld a,l 
bf3a fe 02				cp 2 
bf3c 20 04				jr nz, .crow3 
bf3e 3e 28				ld a, display_row_2 
bf40 18 12				jr .ccol1 
bf42 fe 03		.crow3:		cp 3 
bf44 20 04				jr nz, .crow4 
bf46 3e 50				ld a, display_row_3 
bf48 18 0a				jr .ccol1 
bf4a fe 04		.crow4:		cp 4 
bf4c 20 04				jr nz, .crow1 
bf4e 3e 78				ld a, display_row_4 
bf50 18 02				jr .ccol1 
bf52 3e 00		.crow1:		ld a,display_row_1 
bf54 f5			.ccol1:		push af			; got row offset 
bf55 6f					ld l,a 
bf56 26 00				ld h,0 
bf58					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bf58 cd 42 9d			call macro_forth_dsp_pop 
bf5b				endm 
# End of macro FORTH_DSP_POP
bf5b					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
bf5b cd 8a 9c			call macro_dsp_valuehl 
bf5e				endm 
# End of macro FORTH_DSP_VALUEHL
bf5e					; TODO save cursor col 
bf5e f1					pop af 
bf5f 85					add l		; add col offset 
bf60 32 58 ea				ld (f_cursor_ptr), a 
bf63					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bf63 cd 42 9d			call macro_forth_dsp_pop 
bf66				endm 
# End of macro FORTH_DSP_POP
bf66			 
bf66					; calculate  
bf66			 
bf66					NEXTW 
bf66 c3 75 9e			jp macro_next 
bf69				endm 
# End of macro NEXTW
bf69			 
bf69			 
bf69			.HOME: 
bf69				CWHEAD .CR 45 "HOME" 4 WORD_FLAG_CODE 
bf69 41				db WORD_SYS_CORE+45             
bf6a 96 bf			dw .CR            
bf6c 05				db 4 + 1 
bf6d .. 00			db "HOME",0              
bf72				endm 
# End of macro CWHEAD
bf72			; | HOME ( -- ) Reset the current cursor for output to home | DONE 
bf72					if DEBUG_FORTH_WORDS_KEY 
bf72						DMARK "HOM" 
bf72 f5				push af  
bf73 3a 87 bf			ld a, (.dmark)  
bf76 32 65 ee			ld (debug_mark),a  
bf79 3a 88 bf			ld a, (.dmark+1)  
bf7c 32 66 ee			ld (debug_mark+1),a  
bf7f 3a 89 bf			ld a, (.dmark+2)  
bf82 32 67 ee			ld (debug_mark+2),a  
bf85 18 03			jr .pastdmark  
bf87 ..			.dmark: db "HOM"  
bf8a f1			.pastdmark: pop af  
bf8b			endm  
# End of macro DMARK
bf8b						CALLMONITOR 
bf8b cd 6f ee			call debug_vector  
bf8e				endm  
# End of macro CALLMONITOR
bf8e					endif 
bf8e 3e 00		.home:		ld a, 0		; and home cursor 
bf90 32 58 ea				ld (f_cursor_ptr), a 
bf93					NEXTW 
bf93 c3 75 9e			jp macro_next 
bf96				endm 
# End of macro NEXTW
bf96			 
bf96			 
bf96			.CR: 
bf96				CWHEAD .SPACE 50 "CR" 2 WORD_FLAG_CODE 
bf96 46				db WORD_SYS_CORE+50             
bf97 d1 bf			dw .SPACE            
bf99 03				db 2 + 1 
bf9a .. 00			db "CR",0              
bf9d				endm 
# End of macro CWHEAD
bf9d			; | CR (  -- s ) Push CR/LF pair onto the stack as a string  | DONE 
bf9d					if DEBUG_FORTH_WORDS_KEY 
bf9d						DMARK "CR." 
bf9d f5				push af  
bf9e 3a b2 bf			ld a, (.dmark)  
bfa1 32 65 ee			ld (debug_mark),a  
bfa4 3a b3 bf			ld a, (.dmark+1)  
bfa7 32 66 ee			ld (debug_mark+1),a  
bfaa 3a b4 bf			ld a, (.dmark+2)  
bfad 32 67 ee			ld (debug_mark+2),a  
bfb0 18 03			jr .pastdmark  
bfb2 ..			.dmark: db "CR."  
bfb5 f1			.pastdmark: pop af  
bfb6			endm  
# End of macro DMARK
bfb6						CALLMONITOR 
bfb6 cd 6f ee			call debug_vector  
bfb9				endm  
# End of macro CALLMONITOR
bfb9					endif 
bfb9 3e 0d				ld a, 13 
bfbb 32 bb e2				ld (scratch),a 
bfbe 3e 0a				ld a, 10 
bfc0 32 bc e2				ld (scratch+1),a 
bfc3 3e 00				ld a, 0 
bfc5 32 bd e2				ld (scratch+2),a 
bfc8 21 bb e2				ld hl, scratch 
bfcb cd f3 9a				call forth_push_str 
bfce					 
bfce				       NEXTW 
bfce c3 75 9e			jp macro_next 
bfd1				endm 
# End of macro NEXTW
bfd1			.SPACE: 
bfd1				CWHEAD .SPACES 50 "BL" 2 WORD_FLAG_CODE 
bfd1 46				db WORD_SYS_CORE+50             
bfd2 07 c0			dw .SPACES            
bfd4 03				db 2 + 1 
bfd5 .. 00			db "BL",0              
bfd8				endm 
# End of macro CWHEAD
bfd8			; | BL (  -- c ) Push the value of space onto the stack as a string  | DONE 
bfd8					if DEBUG_FORTH_WORDS_KEY 
bfd8						DMARK "BL." 
bfd8 f5				push af  
bfd9 3a ed bf			ld a, (.dmark)  
bfdc 32 65 ee			ld (debug_mark),a  
bfdf 3a ee bf			ld a, (.dmark+1)  
bfe2 32 66 ee			ld (debug_mark+1),a  
bfe5 3a ef bf			ld a, (.dmark+2)  
bfe8 32 67 ee			ld (debug_mark+2),a  
bfeb 18 03			jr .pastdmark  
bfed ..			.dmark: db "BL."  
bff0 f1			.pastdmark: pop af  
bff1			endm  
# End of macro DMARK
bff1						CALLMONITOR 
bff1 cd 6f ee			call debug_vector  
bff4				endm  
# End of macro CALLMONITOR
bff4					endif 
bff4 3e 20				ld a, " " 
bff6 32 bb e2				ld (scratch),a 
bff9 3e 00				ld a, 0 
bffb 32 bc e2				ld (scratch+1),a 
bffe 21 bb e2				ld hl, scratch 
c001 cd f3 9a				call forth_push_str 
c004					 
c004				       NEXTW 
c004 c3 75 9e			jp macro_next 
c007				endm 
# End of macro NEXTW
c007			 
c007			;.blstr: db " ", 0 
c007			 
c007			.SPACES: 
c007				CWHEAD .SCROLL 51 "SPACES" 6 WORD_FLAG_CODE 
c007 47				db WORD_SYS_CORE+51             
c008 a2 c0			dw .SCROLL            
c00a 07				db 6 + 1 
c00b .. 00			db "SPACES",0              
c012				endm 
# End of macro CWHEAD
c012			; | SPACES ( u -- str ) A string of u spaces is pushed onto the stack | DONE 
c012					if DEBUG_FORTH_WORDS_KEY 
c012						DMARK "SPS" 
c012 f5				push af  
c013 3a 27 c0			ld a, (.dmark)  
c016 32 65 ee			ld (debug_mark),a  
c019 3a 28 c0			ld a, (.dmark+1)  
c01c 32 66 ee			ld (debug_mark+1),a  
c01f 3a 29 c0			ld a, (.dmark+2)  
c022 32 67 ee			ld (debug_mark+2),a  
c025 18 03			jr .pastdmark  
c027 ..			.dmark: db "SPS"  
c02a f1			.pastdmark: pop af  
c02b			endm  
# End of macro DMARK
c02b						CALLMONITOR 
c02b cd 6f ee			call debug_vector  
c02e				endm  
# End of macro CALLMONITOR
c02e					endif 
c02e			 
c02e			 
c02e					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
c02e cd 8a 9c			call macro_dsp_valuehl 
c031				endm 
# End of macro FORTH_DSP_VALUEHL
c031			 
c031 e5					push hl    ; u 
c032					if DEBUG_FORTH_WORDS 
c032						DMARK "SPA" 
c032 f5				push af  
c033 3a 47 c0			ld a, (.dmark)  
c036 32 65 ee			ld (debug_mark),a  
c039 3a 48 c0			ld a, (.dmark+1)  
c03c 32 66 ee			ld (debug_mark+1),a  
c03f 3a 49 c0			ld a, (.dmark+2)  
c042 32 67 ee			ld (debug_mark+2),a  
c045 18 03			jr .pastdmark  
c047 ..			.dmark: db "SPA"  
c04a f1			.pastdmark: pop af  
c04b			endm  
# End of macro DMARK
c04b						CALLMONITOR 
c04b cd 6f ee			call debug_vector  
c04e				endm  
# End of macro CALLMONITOR
c04e					endif 
c04e			 
c04e					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c04e cd 42 9d			call macro_forth_dsp_pop 
c051				endm 
# End of macro FORTH_DSP_POP
c051 e1					pop hl 
c052 0e 00				ld c, 0 
c054 45					ld b, l 
c055 21 bb e2				ld hl, scratch  
c058			 
c058					if DEBUG_FORTH_WORDS 
c058						DMARK "SP2" 
c058 f5				push af  
c059 3a 6d c0			ld a, (.dmark)  
c05c 32 65 ee			ld (debug_mark),a  
c05f 3a 6e c0			ld a, (.dmark+1)  
c062 32 66 ee			ld (debug_mark+1),a  
c065 3a 6f c0			ld a, (.dmark+2)  
c068 32 67 ee			ld (debug_mark+2),a  
c06b 18 03			jr .pastdmark  
c06d ..			.dmark: db "SP2"  
c070 f1			.pastdmark: pop af  
c071			endm  
# End of macro DMARK
c071						CALLMONITOR 
c071 cd 6f ee			call debug_vector  
c074				endm  
# End of macro CALLMONITOR
c074					endif 
c074 3e 20				ld a, ' ' 
c076			.spaces1:	 
c076 77					ld (hl),a 
c077 23					inc hl 
c078					 
c078 10 fc				djnz .spaces1 
c07a 3e 00				ld a,0 
c07c 77					ld (hl),a 
c07d 21 bb e2				ld hl, scratch 
c080					if DEBUG_FORTH_WORDS 
c080						DMARK "SP3" 
c080 f5				push af  
c081 3a 95 c0			ld a, (.dmark)  
c084 32 65 ee			ld (debug_mark),a  
c087 3a 96 c0			ld a, (.dmark+1)  
c08a 32 66 ee			ld (debug_mark+1),a  
c08d 3a 97 c0			ld a, (.dmark+2)  
c090 32 67 ee			ld (debug_mark+2),a  
c093 18 03			jr .pastdmark  
c095 ..			.dmark: db "SP3"  
c098 f1			.pastdmark: pop af  
c099			endm  
# End of macro DMARK
c099						CALLMONITOR 
c099 cd 6f ee			call debug_vector  
c09c				endm  
# End of macro CALLMONITOR
c09c					endif 
c09c cd f3 9a				call forth_push_str 
c09f			 
c09f				       NEXTW 
c09f c3 75 9e			jp macro_next 
c0a2				endm 
# End of macro NEXTW
c0a2			 
c0a2			 
c0a2			 
c0a2			.SCROLL: 
c0a2				CWHEAD .SCROLLD 63 "SCROLL" 6 WORD_FLAG_CODE 
c0a2 53				db WORD_SYS_CORE+63             
c0a3 cf c0			dw .SCROLLD            
c0a5 07				db 6 + 1 
c0a6 .. 00			db "SCROLL",0              
c0ad				endm 
# End of macro CWHEAD
c0ad			; | SCROLL ( -- ) Scroll up one line - next write will update if required | DONE 
c0ad					if DEBUG_FORTH_WORDS_KEY 
c0ad						DMARK "SCR" 
c0ad f5				push af  
c0ae 3a c2 c0			ld a, (.dmark)  
c0b1 32 65 ee			ld (debug_mark),a  
c0b4 3a c3 c0			ld a, (.dmark+1)  
c0b7 32 66 ee			ld (debug_mark+1),a  
c0ba 3a c4 c0			ld a, (.dmark+2)  
c0bd 32 67 ee			ld (debug_mark+2),a  
c0c0 18 03			jr .pastdmark  
c0c2 ..			.dmark: db "SCR"  
c0c5 f1			.pastdmark: pop af  
c0c6			endm  
# End of macro DMARK
c0c6						CALLMONITOR 
c0c6 cd 6f ee			call debug_vector  
c0c9				endm  
# End of macro CALLMONITOR
c0c9					endif 
c0c9			 
c0c9 cd 7f 8a			call scroll_up 
c0cc			;	call update_display 
c0cc			 
c0cc					NEXTW 
c0cc c3 75 9e			jp macro_next 
c0cf				endm 
# End of macro NEXTW
c0cf			 
c0cf			 
c0cf			 
c0cf			;		; get dir 
c0cf			; 
c0cf			;		FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
c0cf			; 
c0cf			;		push hl 
c0cf			; 
c0cf			;		; destroy value TOS 
c0cf			; 
c0cf			;		FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c0cf			; 
c0cf			;		; get count 
c0cf			; 
c0cf			;		FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
c0cf			; 
c0cf			;		push hl 
c0cf			; 
c0cf			;		; destroy value TOS 
c0cf			; 
c0cf			;		FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c0cf			; 
c0cf			;		; one value on hl get other one back 
c0cf			; 
c0cf			;		pop bc    ; count 
c0cf			; 
c0cf			;		pop de   ; dir 
c0cf			; 
c0cf			; 
c0cf			;		ld b, c 
c0cf			; 
c0cf			;.scrolldir:     push bc 
c0cf			;		push de 
c0cf			; 
c0cf			;		ld a, 0 
c0cf			;		cp e 
c0cf			;		jr z, .scrollup  
c0cf			;		call scroll_down 
c0cf			;		jr .scrollnext 
c0cf			;.scrollup:	call scroll_up 
c0cf			; 
c0cf			;		 
c0cf			;.scrollnext: 
c0cf			;		pop de 
c0cf			;		pop bc 
c0cf			;		djnz .scrolldir 
c0cf			; 
c0cf			; 
c0cf			; 
c0cf			; 
c0cf			; 
c0cf			;		NEXTW 
c0cf			 
c0cf			.SCROLLD: 
c0cf				CWHEAD .ATQ 63 "SCROLLD" 7 WORD_FLAG_CODE 
c0cf 53				db WORD_SYS_CORE+63             
c0d0 fd c0			dw .ATQ            
c0d2 08				db 7 + 1 
c0d3 .. 00			db "SCROLLD",0              
c0db				endm 
# End of macro CWHEAD
c0db			; | SCROLLD ( -- ) Scroll down one line - next write will update if required | TO DO 
c0db					if DEBUG_FORTH_WORDS_KEY 
c0db						DMARK "SCD" 
c0db f5				push af  
c0dc 3a f0 c0			ld a, (.dmark)  
c0df 32 65 ee			ld (debug_mark),a  
c0e2 3a f1 c0			ld a, (.dmark+1)  
c0e5 32 66 ee			ld (debug_mark+1),a  
c0e8 3a f2 c0			ld a, (.dmark+2)  
c0eb 32 67 ee			ld (debug_mark+2),a  
c0ee 18 03			jr .pastdmark  
c0f0 ..			.dmark: db "SCD"  
c0f3 f1			.pastdmark: pop af  
c0f4			endm  
# End of macro DMARK
c0f4						CALLMONITOR 
c0f4 cd 6f ee			call debug_vector  
c0f7				endm  
# End of macro CALLMONITOR
c0f7					endif 
c0f7			 
c0f7 cd a3 8a			call scroll_down 
c0fa			;	call update_display 
c0fa			 
c0fa					NEXTW 
c0fa c3 75 9e			jp macro_next 
c0fd				endm 
# End of macro NEXTW
c0fd			 
c0fd			 
c0fd			.ATQ: 
c0fd				CWHEAD .AUTODSP 78 "AT@" 3 WORD_FLAG_CODE 
c0fd 62				db WORD_SYS_CORE+78             
c0fe 5b c1			dw .AUTODSP            
c100 04				db 3 + 1 
c101 .. 00			db "AT@",0              
c105				endm 
# End of macro CWHEAD
c105			; | AT@ ( u1 u2 -- n ) Push to stack ASCII value at row u2 col u1 | DONE 
c105					if DEBUG_FORTH_WORDS_KEY 
c105						DMARK "ATA" 
c105 f5				push af  
c106 3a 1a c1			ld a, (.dmark)  
c109 32 65 ee			ld (debug_mark),a  
c10c 3a 1b c1			ld a, (.dmark+1)  
c10f 32 66 ee			ld (debug_mark+1),a  
c112 3a 1c c1			ld a, (.dmark+2)  
c115 32 67 ee			ld (debug_mark+2),a  
c118 18 03			jr .pastdmark  
c11a ..			.dmark: db "ATA"  
c11d f1			.pastdmark: pop af  
c11e			endm  
# End of macro DMARK
c11e						CALLMONITOR 
c11e cd 6f ee			call debug_vector  
c121				endm  
# End of macro CALLMONITOR
c121					endif 
c121			 
c121			 
c121					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
c121 cd 8a 9c			call macro_dsp_valuehl 
c124				endm 
# End of macro FORTH_DSP_VALUEHL
c124			 
c124					; TODO save cursor row 
c124 7d					ld a,l 
c125 fe 02				cp 2 
c127 20 04				jr nz, .crow3aq 
c129 3e 28				ld a, display_row_2 
c12b 18 12				jr .ccol1aq 
c12d fe 03		.crow3aq:		cp 3 
c12f 20 04				jr nz, .crow4aq 
c131 3e 50				ld a, display_row_3 
c133 18 0a				jr .ccol1aq 
c135 fe 04		.crow4aq:		cp 4 
c137 20 04				jr nz, .crow1aq 
c139 3e 78				ld a, display_row_4 
c13b 18 02				jr .ccol1aq 
c13d 3e 00		.crow1aq:		ld a,display_row_1 
c13f f5			.ccol1aq:		push af			; got row offset 
c140 6f					ld l,a 
c141 26 00				ld h,0 
c143					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c143 cd 42 9d			call macro_forth_dsp_pop 
c146				endm 
# End of macro FORTH_DSP_POP
c146					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
c146 cd 8a 9c			call macro_dsp_valuehl 
c149				endm 
# End of macro FORTH_DSP_VALUEHL
c149					; TODO save cursor col 
c149 f1					pop af 
c14a 85					add l		; add col offset 
c14b			 
c14b					; add current frame buffer address 
c14b 2a c6 eb				ld hl, (display_fb_active) 
c14e cd ea 8c				call addatohl 
c151			 
c151			 
c151			 
c151			 
c151					; get char frame buffer location offset in hl 
c151			 
c151 7e					ld a,(hl) 
c152 26 00				ld h, 0 
c154 6f					ld l, a 
c155			 
c155 cd 85 9a				call forth_push_numhl 
c158			 
c158			 
c158					NEXTW 
c158 c3 75 9e			jp macro_next 
c15b				endm 
# End of macro NEXTW
c15b			 
c15b			.AUTODSP: 
c15b				CWHEAD .MENU 79 "ADSP" 4 WORD_FLAG_CODE 
c15b 63				db WORD_SYS_CORE+79             
c15c 71 c1			dw .MENU            
c15e 05				db 4 + 1 
c15f .. 00			db "ADSP",0              
c164				endm 
# End of macro CWHEAD
c164			; | ADSP ( u1 --  ) Enable/Disable Auto screen updates (SLOW). | DONE 
c164			; | | If off, use DRAW to refresh. Default is on. $0003 will enable direct screen writes (TODO)  
c164			 
c164					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
c164 cd 8a 9c			call macro_dsp_valuehl 
c167				endm 
# End of macro FORTH_DSP_VALUEHL
c167			 
c167			;		push hl 
c167			 
c167					; destroy value TOS 
c167			 
c167					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c167 cd 42 9d			call macro_forth_dsp_pop 
c16a				endm 
# End of macro FORTH_DSP_POP
c16a			 
c16a			;		pop hl 
c16a			 
c16a 7d					ld a,l 
c16b 32 36 ea				ld (cli_autodisplay), a 
c16e				       NEXTW 
c16e c3 75 9e			jp macro_next 
c171				endm 
# End of macro NEXTW
c171			 
c171			.MENU: 
c171				CWHEAD .ENDDISPLAY 92 "MENU" 4 WORD_FLAG_CODE 
c171 70				db WORD_SYS_CORE+92             
c172 1a c2			dw .ENDDISPLAY            
c174 05				db 4 + 1 
c175 .. 00			db "MENU",0              
c17a				endm 
# End of macro CWHEAD
c17a			; | MENU ( u1....ux n -- n ) Create a menu. n is the number of menu items on stack. Push number selection to TOS | DONE 
c17a			 
c17a			;		; get number of items on the stack 
c17a			; 
c17a				 
c17a					FORTH_DSP_VALUEHL 
c17a cd 8a 9c			call macro_dsp_valuehl 
c17d				endm 
# End of macro FORTH_DSP_VALUEHL
c17d				 
c17d					if DEBUG_FORTH_WORDS_KEY 
c17d						DMARK "MNU" 
c17d f5				push af  
c17e 3a 92 c1			ld a, (.dmark)  
c181 32 65 ee			ld (debug_mark),a  
c184 3a 93 c1			ld a, (.dmark+1)  
c187 32 66 ee			ld (debug_mark+1),a  
c18a 3a 94 c1			ld a, (.dmark+2)  
c18d 32 67 ee			ld (debug_mark+2),a  
c190 18 03			jr .pastdmark  
c192 ..			.dmark: db "MNU"  
c195 f1			.pastdmark: pop af  
c196			endm  
# End of macro DMARK
c196						CALLMONITOR 
c196 cd 6f ee			call debug_vector  
c199				endm  
# End of macro CALLMONITOR
c199					endif 
c199			 
c199 45					ld b, l	 
c19a 05					dec b 
c19b			 
c19b					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c19b cd 42 9d			call macro_forth_dsp_pop 
c19e				endm 
# End of macro FORTH_DSP_POP
c19e			 
c19e			 
c19e					; go directly through the stack to pluck out the string pointers and build an array 
c19e			 
c19e			;		FORTH_DSP 
c19e			 
c19e					; hl contains top most stack item 
c19e				 
c19e 11 bb e2				ld de, scratch 
c1a1			 
c1a1			.mbuild: 
c1a1			 
c1a1					FORTH_DSP_VALUEHL 
c1a1 cd 8a 9c			call macro_dsp_valuehl 
c1a4				endm 
# End of macro FORTH_DSP_VALUEHL
c1a4			 
c1a4					if DEBUG_FORTH_WORDS 
c1a4						DMARK "MN3" 
c1a4 f5				push af  
c1a5 3a b9 c1			ld a, (.dmark)  
c1a8 32 65 ee			ld (debug_mark),a  
c1ab 3a ba c1			ld a, (.dmark+1)  
c1ae 32 66 ee			ld (debug_mark+1),a  
c1b1 3a bb c1			ld a, (.dmark+2)  
c1b4 32 67 ee			ld (debug_mark+2),a  
c1b7 18 03			jr .pastdmark  
c1b9 ..			.dmark: db "MN3"  
c1bc f1			.pastdmark: pop af  
c1bd			endm  
# End of macro DMARK
c1bd						CALLMONITOR 
c1bd cd 6f ee			call debug_vector  
c1c0				endm  
# End of macro CALLMONITOR
c1c0					endif 
c1c0 eb					ex de, hl 
c1c1 73					ld (hl), e 
c1c2 23					inc hl 
c1c3 72					ld (hl), d 
c1c4 23					inc hl 
c1c5 eb					ex de, hl 
c1c6			 
c1c6					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c1c6 cd 42 9d			call macro_forth_dsp_pop 
c1c9				endm 
# End of macro FORTH_DSP_POP
c1c9			 
c1c9 10 d6				djnz .mbuild 
c1cb			 
c1cb					; done add term 
c1cb			 
c1cb eb					ex de, hl 
c1cc 36 00				ld (hl), 0 
c1ce 23					inc hl 
c1cf 36 00				ld (hl), 0 
c1d1			 
c1d1				 
c1d1					 
c1d1 21 bb e2				ld hl, scratch 
c1d4			 
c1d4					if DEBUG_FORTH_WORDS 
c1d4						DMARK "MNx" 
c1d4 f5				push af  
c1d5 3a e9 c1			ld a, (.dmark)  
c1d8 32 65 ee			ld (debug_mark),a  
c1db 3a ea c1			ld a, (.dmark+1)  
c1de 32 66 ee			ld (debug_mark+1),a  
c1e1 3a eb c1			ld a, (.dmark+2)  
c1e4 32 67 ee			ld (debug_mark+2),a  
c1e7 18 03			jr .pastdmark  
c1e9 ..			.dmark: db "MNx"  
c1ec f1			.pastdmark: pop af  
c1ed			endm  
# End of macro DMARK
c1ed						CALLMONITOR 
c1ed cd 6f ee			call debug_vector  
c1f0				endm  
# End of macro CALLMONITOR
c1f0					endif 
c1f0			 
c1f0			 
c1f0			 
c1f0 3e 00				ld a, 0 
c1f2 cd ee 8a				call menu 
c1f5			 
c1f5			 
c1f5 6f					ld l, a 
c1f6 26 00				ld h, 0 
c1f8			 
c1f8					if DEBUG_FORTH_WORDS 
c1f8						DMARK "MNr" 
c1f8 f5				push af  
c1f9 3a 0d c2			ld a, (.dmark)  
c1fc 32 65 ee			ld (debug_mark),a  
c1ff 3a 0e c2			ld a, (.dmark+1)  
c202 32 66 ee			ld (debug_mark+1),a  
c205 3a 0f c2			ld a, (.dmark+2)  
c208 32 67 ee			ld (debug_mark+2),a  
c20b 18 03			jr .pastdmark  
c20d ..			.dmark: db "MNr"  
c210 f1			.pastdmark: pop af  
c211			endm  
# End of macro DMARK
c211						CALLMONITOR 
c211 cd 6f ee			call debug_vector  
c214				endm  
# End of macro CALLMONITOR
c214					endif 
c214			 
c214 cd 85 9a				call forth_push_numhl 
c217			 
c217			 
c217			 
c217			 
c217				       NEXTW 
c217 c3 75 9e			jp macro_next 
c21a				endm 
# End of macro NEXTW
c21a			 
c21a			 
c21a			.ENDDISPLAY: 
c21a			 
c21a			; eof 
# End of file forth_words_display.asm
c21a			include "forth_words_str.asm" 
c21a			 
c21a			; | ## String Words 
c21a			 
c21a			.SPLIT:   
c21a			 
c21a				CWHEAD .PTR 52 "SPLIT" 5 WORD_FLAG_CODE 
c21a 48				db WORD_SYS_CORE+52             
c21b 0f c3			dw .PTR            
c21d 06				db 5 + 1 
c21e .. 00			db "SPLIT",0              
c224				endm 
# End of macro CWHEAD
c224			; | SPLIT ( s d -- s s...sn c ) Using delimter d, add strings found in s to stack pushing item count c | DONE 
c224					if DEBUG_FORTH_WORDS_KEY 
c224						DMARK "SPT" 
c224 f5				push af  
c225 3a 39 c2			ld a, (.dmark)  
c228 32 65 ee			ld (debug_mark),a  
c22b 3a 3a c2			ld a, (.dmark+1)  
c22e 32 66 ee			ld (debug_mark+1),a  
c231 3a 3b c2			ld a, (.dmark+2)  
c234 32 67 ee			ld (debug_mark+2),a  
c237 18 03			jr .pastdmark  
c239 ..			.dmark: db "SPT"  
c23c f1			.pastdmark: pop af  
c23d			endm  
# End of macro DMARK
c23d						CALLMONITOR 
c23d cd 6f ee			call debug_vector  
c240				endm  
# End of macro CALLMONITOR
c240					endif 
c240			 
c240					; get delim 
c240					FORTH_DSP_VALUEHL 
c240 cd 8a 9c			call macro_dsp_valuehl 
c243				endm 
# End of macro FORTH_DSP_VALUEHL
c243			 
c243					FORTH_DSP_POP 
c243 cd 42 9d			call macro_forth_dsp_pop 
c246				endm 
# End of macro FORTH_DSP_POP
c246					 
c246			 
c246 45					ld b, l    ; move delim to b 
c247 0e 01				ld c, 1   ; count of poritions 
c249			 
c249 c5					push bc 
c24a			 
c24a					if DEBUG_FORTH_WORDS 
c24a						DMARK "SPa" 
c24a f5				push af  
c24b 3a 5f c2			ld a, (.dmark)  
c24e 32 65 ee			ld (debug_mark),a  
c251 3a 60 c2			ld a, (.dmark+1)  
c254 32 66 ee			ld (debug_mark+1),a  
c257 3a 61 c2			ld a, (.dmark+2)  
c25a 32 67 ee			ld (debug_mark+2),a  
c25d 18 03			jr .pastdmark  
c25f ..			.dmark: db "SPa"  
c262 f1			.pastdmark: pop af  
c263			endm  
# End of macro DMARK
c263						CALLMONITOR 
c263 cd 6f ee			call debug_vector  
c266				endm  
# End of macro CALLMONITOR
c266					endif 
c266					; get pointer to string to chop up 
c266					FORTH_DSP_VALUEHL 
c266 cd 8a 9c			call macro_dsp_valuehl 
c269				endm 
# End of macro FORTH_DSP_VALUEHL
c269			 
c269			;		push hl 
c269 11 bb e2				ld de, scratch 
c26c			.spllop: 
c26c c1					pop bc 
c26d c5					push bc 
c26e			;		pop hl 
c26e					if DEBUG_FORTH_WORDS 
c26e						DMARK "SPl" 
c26e f5				push af  
c26f 3a 83 c2			ld a, (.dmark)  
c272 32 65 ee			ld (debug_mark),a  
c275 3a 84 c2			ld a, (.dmark+1)  
c278 32 66 ee			ld (debug_mark+1),a  
c27b 3a 85 c2			ld a, (.dmark+2)  
c27e 32 67 ee			ld (debug_mark+2),a  
c281 18 03			jr .pastdmark  
c283 ..			.dmark: db "SPl"  
c286 f1			.pastdmark: pop af  
c287			endm  
# End of macro DMARK
c287						CALLMONITOR 
c287 cd 6f ee			call debug_vector  
c28a				endm  
# End of macro CALLMONITOR
c28a					endif 
c28a 7e					ld a, (hl) 
c28b b8					cp b 
c28c 28 08				jr z, .splnxt 
c28e fe 00				cp 0 
c290 28 34				jr z, .splend 
c292 ed a0				ldi 
c294 18 d6				jr .spllop 
c296			 
c296					; hit dlim 
c296			 
c296			.splnxt: 
c296					if DEBUG_FORTH_WORDS 
c296						DMARK "SPx" 
c296 f5				push af  
c297 3a ab c2			ld a, (.dmark)  
c29a 32 65 ee			ld (debug_mark),a  
c29d 3a ac c2			ld a, (.dmark+1)  
c2a0 32 66 ee			ld (debug_mark+1),a  
c2a3 3a ad c2			ld a, (.dmark+2)  
c2a6 32 67 ee			ld (debug_mark+2),a  
c2a9 18 03			jr .pastdmark  
c2ab ..			.dmark: db "SPx"  
c2ae f1			.pastdmark: pop af  
c2af			endm  
# End of macro DMARK
c2af						CALLMONITOR 
c2af cd 6f ee			call debug_vector  
c2b2				endm  
# End of macro CALLMONITOR
c2b2					endif 
c2b2 3e 00				ld a, 0 
c2b4 12					ld (de), a 
c2b5					;ex de, hl 
c2b5 e5					push hl 
c2b6 21 bb e2				ld hl, scratch 
c2b9 cd f3 9a				call forth_push_str 
c2bc e1					pop hl 
c2bd					;ex de, hl 
c2bd 23					inc hl 
c2be c1					pop bc 
c2bf 0c					inc c 
c2c0 c5					push bc 
c2c1 11 bb e2				ld de, scratch 
c2c4 18 a6				jr .spllop 
c2c6			 
c2c6			.splend:		 
c2c6					if DEBUG_FORTH_WORDS 
c2c6						DMARK "SPe" 
c2c6 f5				push af  
c2c7 3a db c2			ld a, (.dmark)  
c2ca 32 65 ee			ld (debug_mark),a  
c2cd 3a dc c2			ld a, (.dmark+1)  
c2d0 32 66 ee			ld (debug_mark+1),a  
c2d3 3a dd c2			ld a, (.dmark+2)  
c2d6 32 67 ee			ld (debug_mark+2),a  
c2d9 18 03			jr .pastdmark  
c2db ..			.dmark: db "SPe"  
c2de f1			.pastdmark: pop af  
c2df			endm  
# End of macro DMARK
c2df						CALLMONITOR 
c2df cd 6f ee			call debug_vector  
c2e2				endm  
# End of macro CALLMONITOR
c2e2					endif 
c2e2 12					ld (de), a 
c2e3 eb					ex de, hl 
c2e4			;		push hl 
c2e4 21 bb e2				ld hl, scratch 
c2e7 cd f3 9a				call forth_push_str 
c2ea					 
c2ea					if DEBUG_FORTH_WORDS 
c2ea						DMARK "SPc" 
c2ea f5				push af  
c2eb 3a ff c2			ld a, (.dmark)  
c2ee 32 65 ee			ld (debug_mark),a  
c2f1 3a 00 c3			ld a, (.dmark+1)  
c2f4 32 66 ee			ld (debug_mark+1),a  
c2f7 3a 01 c3			ld a, (.dmark+2)  
c2fa 32 67 ee			ld (debug_mark+2),a  
c2fd 18 03			jr .pastdmark  
c2ff ..			.dmark: db "SPc"  
c302 f1			.pastdmark: pop af  
c303			endm  
# End of macro DMARK
c303						CALLMONITOR 
c303 cd 6f ee			call debug_vector  
c306				endm  
# End of macro CALLMONITOR
c306					endif 
c306			 
c306 e1					pop hl    ; get counter from bc which has been push 
c307 26 00				ld h, 0 
c309			;		ld l, c 
c309 cd 85 9a				call forth_push_numhl 
c30c			 
c30c			 
c30c				NEXTW 
c30c c3 75 9e			jp macro_next 
c30f				endm 
# End of macro NEXTW
c30f			.PTR:   
c30f			 
c30f				CWHEAD .STYPE 52 "PTR" 3 WORD_FLAG_CODE 
c30f 48				db WORD_SYS_CORE+52             
c310 3c c3			dw .STYPE            
c312 04				db 3 + 1 
c313 .. 00			db "PTR",0              
c317				endm 
# End of macro CWHEAD
c317			; | PTR ( -- addr ) Low level push pointer to the value on TOS | DONE 
c317			; | | If a string will give the address of the string without dropping it. Handy for direct string access 
c317			; | | If a number can then use 2@ and 2! for direct value update without using stack words  
c317			 
c317					if DEBUG_FORTH_WORDS_KEY 
c317						DMARK "PTR" 
c317 f5				push af  
c318 3a 2c c3			ld a, (.dmark)  
c31b 32 65 ee			ld (debug_mark),a  
c31e 3a 2d c3			ld a, (.dmark+1)  
c321 32 66 ee			ld (debug_mark+1),a  
c324 3a 2e c3			ld a, (.dmark+2)  
c327 32 67 ee			ld (debug_mark+2),a  
c32a 18 03			jr .pastdmark  
c32c ..			.dmark: db "PTR"  
c32f f1			.pastdmark: pop af  
c330			endm  
# End of macro DMARK
c330						CALLMONITOR 
c330 cd 6f ee			call debug_vector  
c333				endm  
# End of macro CALLMONITOR
c333					endif 
c333					FORTH_DSP_VALUEHL 
c333 cd 8a 9c			call macro_dsp_valuehl 
c336				endm 
# End of macro FORTH_DSP_VALUEHL
c336 cd 85 9a				call forth_push_numhl 
c339			 
c339			 
c339					NEXTW 
c339 c3 75 9e			jp macro_next 
c33c				endm 
# End of macro NEXTW
c33c			.STYPE: 
c33c				CWHEAD .UPPER 52 "STYPE" 5 WORD_FLAG_CODE 
c33c 48				db WORD_SYS_CORE+52             
c33d 8b c3			dw .UPPER            
c33f 06				db 5 + 1 
c340 .. 00			db "STYPE",0              
c346				endm 
# End of macro CWHEAD
c346			; | STYPE ( u -- u type ) Push type of value on TOS - 's' string, 'i' integer...   | DONE 
c346					if DEBUG_FORTH_WORDS_KEY 
c346						DMARK "STY" 
c346 f5				push af  
c347 3a 5b c3			ld a, (.dmark)  
c34a 32 65 ee			ld (debug_mark),a  
c34d 3a 5c c3			ld a, (.dmark+1)  
c350 32 66 ee			ld (debug_mark+1),a  
c353 3a 5d c3			ld a, (.dmark+2)  
c356 32 67 ee			ld (debug_mark+2),a  
c359 18 03			jr .pastdmark  
c35b ..			.dmark: db "STY"  
c35e f1			.pastdmark: pop af  
c35f			endm  
# End of macro DMARK
c35f						CALLMONITOR 
c35f cd 6f ee			call debug_vector  
c362				endm  
# End of macro CALLMONITOR
c362					endif 
c362					FORTH_DSP 
c362 cd 50 9c			call macro_forth_dsp 
c365				endm 
# End of macro FORTH_DSP
c365					;v5 FORTH_DSP_VALUE 
c365			 
c365 7e					ld a, (hl) 
c366			 
c366 f5					push af 
c367			 
c367			; Dont destroy TOS		FORTH_DSP_POP 
c367			 
c367 f1					pop af 
c368			 
c368 fe 01				cp DS_TYPE_STR 
c36a 28 09				jr z, .typestr 
c36c			 
c36c fe 02				cp DS_TYPE_INUM 
c36e 28 0a				jr z, .typeinum 
c370			 
c370 21 89 c3				ld hl, .tna 
c373 18 0a				jr .tpush 
c375			 
c375 21 85 c3		.typestr:	ld hl, .tstr 
c378 18 05				jr .tpush 
c37a 21 87 c3		.typeinum:	ld hl, .tinum 
c37d 18 00				jr .tpush 
c37f			 
c37f			.tpush: 
c37f			 
c37f cd f3 9a				call forth_push_str 
c382			 
c382					NEXTW 
c382 c3 75 9e			jp macro_next 
c385				endm 
# End of macro NEXTW
c385 .. 00		.tstr:	db "s",0 
c387 .. 00		.tinum:  db "i",0 
c389 .. 00		.tna:   db "?", 0 
c38b			 
c38b			 
c38b			.UPPER: 
c38b				CWHEAD .LOWER 52 "UPPER" 5 WORD_FLAG_CODE 
c38b 48				db WORD_SYS_CORE+52             
c38c c6 c3			dw .LOWER            
c38e 06				db 5 + 1 
c38f .. 00			db "UPPER",0              
c395				endm 
# End of macro CWHEAD
c395			; | UPPER ( s -- s ) Upper case string s  | DONE 
c395					if DEBUG_FORTH_WORDS_KEY 
c395						DMARK "UPR" 
c395 f5				push af  
c396 3a aa c3			ld a, (.dmark)  
c399 32 65 ee			ld (debug_mark),a  
c39c 3a ab c3			ld a, (.dmark+1)  
c39f 32 66 ee			ld (debug_mark+1),a  
c3a2 3a ac c3			ld a, (.dmark+2)  
c3a5 32 67 ee			ld (debug_mark+2),a  
c3a8 18 03			jr .pastdmark  
c3aa ..			.dmark: db "UPR"  
c3ad f1			.pastdmark: pop af  
c3ae			endm  
# End of macro DMARK
c3ae						CALLMONITOR 
c3ae cd 6f ee			call debug_vector  
c3b1				endm  
# End of macro CALLMONITOR
c3b1					endif 
c3b1			 
c3b1					FORTH_DSP 
c3b1 cd 50 9c			call macro_forth_dsp 
c3b4				endm 
# End of macro FORTH_DSP
c3b4					 
c3b4			; TODO check is string type 
c3b4			 
c3b4					FORTH_DSP_VALUEHL 
c3b4 cd 8a 9c			call macro_dsp_valuehl 
c3b7				endm 
# End of macro FORTH_DSP_VALUEHL
c3b7			; get pointer to string in hl 
c3b7			 
c3b7 7e			.toup:		ld a, (hl) 
c3b8 fe 00				cp 0 
c3ba 28 07				jr z, .toupdone 
c3bc			 
c3bc cd 5f 8f				call to_upper 
c3bf			 
c3bf 77					ld (hl), a 
c3c0 23					inc hl 
c3c1 18 f4				jr .toup 
c3c3			 
c3c3					 
c3c3			 
c3c3			 
c3c3			; for each char convert to upper 
c3c3					 
c3c3			.toupdone: 
c3c3			 
c3c3			 
c3c3					NEXTW 
c3c3 c3 75 9e			jp macro_next 
c3c6				endm 
# End of macro NEXTW
c3c6			.LOWER: 
c3c6				CWHEAD .TCASE 52 "LOWER" 5 WORD_FLAG_CODE 
c3c6 48				db WORD_SYS_CORE+52             
c3c7 01 c4			dw .TCASE            
c3c9 06				db 5 + 1 
c3ca .. 00			db "LOWER",0              
c3d0				endm 
# End of macro CWHEAD
c3d0			; | LOWER ( s -- s ) Lower case string s  | DONE 
c3d0					if DEBUG_FORTH_WORDS_KEY 
c3d0						DMARK "LWR" 
c3d0 f5				push af  
c3d1 3a e5 c3			ld a, (.dmark)  
c3d4 32 65 ee			ld (debug_mark),a  
c3d7 3a e6 c3			ld a, (.dmark+1)  
c3da 32 66 ee			ld (debug_mark+1),a  
c3dd 3a e7 c3			ld a, (.dmark+2)  
c3e0 32 67 ee			ld (debug_mark+2),a  
c3e3 18 03			jr .pastdmark  
c3e5 ..			.dmark: db "LWR"  
c3e8 f1			.pastdmark: pop af  
c3e9			endm  
# End of macro DMARK
c3e9						CALLMONITOR 
c3e9 cd 6f ee			call debug_vector  
c3ec				endm  
# End of macro CALLMONITOR
c3ec					endif 
c3ec			 
c3ec					FORTH_DSP 
c3ec cd 50 9c			call macro_forth_dsp 
c3ef				endm 
# End of macro FORTH_DSP
c3ef					 
c3ef			; TODO check is string type 
c3ef			 
c3ef					FORTH_DSP_VALUEHL 
c3ef cd 8a 9c			call macro_dsp_valuehl 
c3f2				endm 
# End of macro FORTH_DSP_VALUEHL
c3f2			; get pointer to string in hl 
c3f2			 
c3f2 7e			.tolow:		ld a, (hl) 
c3f3 fe 00				cp 0 
c3f5 28 07				jr z, .tolowdone 
c3f7			 
c3f7 cd 68 8f				call to_lower 
c3fa			 
c3fa 77					ld (hl), a 
c3fb 23					inc hl 
c3fc 18 f4				jr .tolow 
c3fe			 
c3fe					 
c3fe			 
c3fe			 
c3fe			; for each char convert to low 
c3fe					 
c3fe			.tolowdone: 
c3fe					NEXTW 
c3fe c3 75 9e			jp macro_next 
c401				endm 
# End of macro NEXTW
c401			.TCASE: 
c401				CWHEAD .SUBSTR 52 "TCASE" 5 WORD_FLAG_CODE 
c401 48				db WORD_SYS_CORE+52             
c402 37 c5			dw .SUBSTR            
c404 06				db 5 + 1 
c405 .. 00			db "TCASE",0              
c40b				endm 
# End of macro CWHEAD
c40b			; | TCASE ( s -- s ) Title case string s  | DONE 
c40b					if DEBUG_FORTH_WORDS_KEY 
c40b						DMARK "TCS" 
c40b f5				push af  
c40c 3a 20 c4			ld a, (.dmark)  
c40f 32 65 ee			ld (debug_mark),a  
c412 3a 21 c4			ld a, (.dmark+1)  
c415 32 66 ee			ld (debug_mark+1),a  
c418 3a 22 c4			ld a, (.dmark+2)  
c41b 32 67 ee			ld (debug_mark+2),a  
c41e 18 03			jr .pastdmark  
c420 ..			.dmark: db "TCS"  
c423 f1			.pastdmark: pop af  
c424			endm  
# End of macro DMARK
c424						CALLMONITOR 
c424 cd 6f ee			call debug_vector  
c427				endm  
# End of macro CALLMONITOR
c427					endif 
c427			 
c427					FORTH_DSP 
c427 cd 50 9c			call macro_forth_dsp 
c42a				endm 
# End of macro FORTH_DSP
c42a					 
c42a			; TODO check is string type 
c42a			 
c42a					FORTH_DSP_VALUEHL 
c42a cd 8a 9c			call macro_dsp_valuehl 
c42d				endm 
# End of macro FORTH_DSP_VALUEHL
c42d			; get pointer to string in hl 
c42d			 
c42d					if DEBUG_FORTH_WORDS 
c42d						DMARK "TC1" 
c42d f5				push af  
c42e 3a 42 c4			ld a, (.dmark)  
c431 32 65 ee			ld (debug_mark),a  
c434 3a 43 c4			ld a, (.dmark+1)  
c437 32 66 ee			ld (debug_mark+1),a  
c43a 3a 44 c4			ld a, (.dmark+2)  
c43d 32 67 ee			ld (debug_mark+2),a  
c440 18 03			jr .pastdmark  
c442 ..			.dmark: db "TC1"  
c445 f1			.pastdmark: pop af  
c446			endm  
# End of macro DMARK
c446						CALLMONITOR 
c446 cd 6f ee			call debug_vector  
c449				endm  
# End of macro CALLMONITOR
c449					endif 
c449			 
c449					; first time in turn to upper case first char 
c449			 
c449 7e					ld a, (hl) 
c44a c3 d4 c4				jp .totsiptou 
c44d			 
c44d			 
c44d 7e			.tot:		ld a, (hl) 
c44e fe 00				cp 0 
c450 ca 18 c5				jp z, .totdone 
c453			 
c453					if DEBUG_FORTH_WORDS 
c453						DMARK "TC2" 
c453 f5				push af  
c454 3a 68 c4			ld a, (.dmark)  
c457 32 65 ee			ld (debug_mark),a  
c45a 3a 69 c4			ld a, (.dmark+1)  
c45d 32 66 ee			ld (debug_mark+1),a  
c460 3a 6a c4			ld a, (.dmark+2)  
c463 32 67 ee			ld (debug_mark+2),a  
c466 18 03			jr .pastdmark  
c468 ..			.dmark: db "TC2"  
c46b f1			.pastdmark: pop af  
c46c			endm  
# End of macro DMARK
c46c						CALLMONITOR 
c46c cd 6f ee			call debug_vector  
c46f				endm  
# End of macro CALLMONITOR
c46f					endif 
c46f					; check to see if current char is a space 
c46f			 
c46f fe 20				cp ' ' 
c471 28 21				jr z, .totsp 
c473 cd 68 8f				call to_lower 
c476					if DEBUG_FORTH_WORDS 
c476						DMARK "TC3" 
c476 f5				push af  
c477 3a 8b c4			ld a, (.dmark)  
c47a 32 65 ee			ld (debug_mark),a  
c47d 3a 8c c4			ld a, (.dmark+1)  
c480 32 66 ee			ld (debug_mark+1),a  
c483 3a 8d c4			ld a, (.dmark+2)  
c486 32 67 ee			ld (debug_mark+2),a  
c489 18 03			jr .pastdmark  
c48b ..			.dmark: db "TC3"  
c48e f1			.pastdmark: pop af  
c48f			endm  
# End of macro DMARK
c48f						CALLMONITOR 
c48f cd 6f ee			call debug_vector  
c492				endm  
# End of macro CALLMONITOR
c492					endif 
c492 18 63				jr .totnxt 
c494			 
c494			.totsp:         ; on a space, find next char which should be upper 
c494			 
c494					if DEBUG_FORTH_WORDS 
c494						DMARK "TC4" 
c494 f5				push af  
c495 3a a9 c4			ld a, (.dmark)  
c498 32 65 ee			ld (debug_mark),a  
c49b 3a aa c4			ld a, (.dmark+1)  
c49e 32 66 ee			ld (debug_mark+1),a  
c4a1 3a ab c4			ld a, (.dmark+2)  
c4a4 32 67 ee			ld (debug_mark+2),a  
c4a7 18 03			jr .pastdmark  
c4a9 ..			.dmark: db "TC4"  
c4ac f1			.pastdmark: pop af  
c4ad			endm  
# End of macro DMARK
c4ad						CALLMONITOR 
c4ad cd 6f ee			call debug_vector  
c4b0				endm  
# End of macro CALLMONITOR
c4b0					endif 
c4b0					;; 
c4b0			 
c4b0 fe 20				cp ' ' 
c4b2 20 20				jr nz, .totsiptou 
c4b4 23					inc hl 
c4b5 7e					ld a, (hl) 
c4b6					if DEBUG_FORTH_WORDS 
c4b6						DMARK "TC5" 
c4b6 f5				push af  
c4b7 3a cb c4			ld a, (.dmark)  
c4ba 32 65 ee			ld (debug_mark),a  
c4bd 3a cc c4			ld a, (.dmark+1)  
c4c0 32 66 ee			ld (debug_mark+1),a  
c4c3 3a cd c4			ld a, (.dmark+2)  
c4c6 32 67 ee			ld (debug_mark+2),a  
c4c9 18 03			jr .pastdmark  
c4cb ..			.dmark: db "TC5"  
c4ce f1			.pastdmark: pop af  
c4cf			endm  
# End of macro DMARK
c4cf						CALLMONITOR 
c4cf cd 6f ee			call debug_vector  
c4d2				endm  
# End of macro CALLMONITOR
c4d2					endif 
c4d2 18 c0				jr .totsp 
c4d4 fe 00		.totsiptou:    cp 0 
c4d6 28 40				jr z, .totdone 
c4d8					; not space and not zero term so upper case it 
c4d8 cd 5f 8f				call to_upper 
c4db			 
c4db					if DEBUG_FORTH_WORDS 
c4db						DMARK "TC6" 
c4db f5				push af  
c4dc 3a f0 c4			ld a, (.dmark)  
c4df 32 65 ee			ld (debug_mark),a  
c4e2 3a f1 c4			ld a, (.dmark+1)  
c4e5 32 66 ee			ld (debug_mark+1),a  
c4e8 3a f2 c4			ld a, (.dmark+2)  
c4eb 32 67 ee			ld (debug_mark+2),a  
c4ee 18 03			jr .pastdmark  
c4f0 ..			.dmark: db "TC6"  
c4f3 f1			.pastdmark: pop af  
c4f4			endm  
# End of macro DMARK
c4f4						CALLMONITOR 
c4f4 cd 6f ee			call debug_vector  
c4f7				endm  
# End of macro CALLMONITOR
c4f7					endif 
c4f7			 
c4f7			 
c4f7			.totnxt: 
c4f7			 
c4f7 77					ld (hl), a 
c4f8 23					inc hl 
c4f9					if DEBUG_FORTH_WORDS 
c4f9						DMARK "TC7" 
c4f9 f5				push af  
c4fa 3a 0e c5			ld a, (.dmark)  
c4fd 32 65 ee			ld (debug_mark),a  
c500 3a 0f c5			ld a, (.dmark+1)  
c503 32 66 ee			ld (debug_mark+1),a  
c506 3a 10 c5			ld a, (.dmark+2)  
c509 32 67 ee			ld (debug_mark+2),a  
c50c 18 03			jr .pastdmark  
c50e ..			.dmark: db "TC7"  
c511 f1			.pastdmark: pop af  
c512			endm  
# End of macro DMARK
c512						CALLMONITOR 
c512 cd 6f ee			call debug_vector  
c515				endm  
# End of macro CALLMONITOR
c515					endif 
c515 c3 4d c4				jp .tot 
c518			 
c518					 
c518			 
c518			 
c518			; for each char convert to low 
c518					 
c518			.totdone: 
c518					if DEBUG_FORTH_WORDS 
c518						DMARK "TCd" 
c518 f5				push af  
c519 3a 2d c5			ld a, (.dmark)  
c51c 32 65 ee			ld (debug_mark),a  
c51f 3a 2e c5			ld a, (.dmark+1)  
c522 32 66 ee			ld (debug_mark+1),a  
c525 3a 2f c5			ld a, (.dmark+2)  
c528 32 67 ee			ld (debug_mark+2),a  
c52b 18 03			jr .pastdmark  
c52d ..			.dmark: db "TCd"  
c530 f1			.pastdmark: pop af  
c531			endm  
# End of macro DMARK
c531						CALLMONITOR 
c531 cd 6f ee			call debug_vector  
c534				endm  
# End of macro CALLMONITOR
c534					endif 
c534					NEXTW 
c534 c3 75 9e			jp macro_next 
c537				endm 
# End of macro NEXTW
c537			 
c537			.SUBSTR: 
c537				CWHEAD .LEFT 52 "SUBSTR" 6 WORD_FLAG_CODE 
c537 48				db WORD_SYS_CORE+52             
c538 95 c5			dw .LEFT            
c53a 07				db 6 + 1 
c53b .. 00			db "SUBSTR",0              
c542				endm 
# End of macro CWHEAD
c542			; | SUBSTR ( s u1 u2 -- s sb ) Push to TOS chars starting at position u1 and with length u2 from string s  | DONE 
c542			 
c542					if DEBUG_FORTH_WORDS_KEY 
c542						DMARK "SST" 
c542 f5				push af  
c543 3a 57 c5			ld a, (.dmark)  
c546 32 65 ee			ld (debug_mark),a  
c549 3a 58 c5			ld a, (.dmark+1)  
c54c 32 66 ee			ld (debug_mark+1),a  
c54f 3a 59 c5			ld a, (.dmark+2)  
c552 32 67 ee			ld (debug_mark+2),a  
c555 18 03			jr .pastdmark  
c557 ..			.dmark: db "SST"  
c55a f1			.pastdmark: pop af  
c55b			endm  
# End of macro DMARK
c55b						CALLMONITOR 
c55b cd 6f ee			call debug_vector  
c55e				endm  
# End of macro CALLMONITOR
c55e					endif 
c55e			; TODO check string type 
c55e					FORTH_DSP_VALUEHL 
c55e cd 8a 9c			call macro_dsp_valuehl 
c561				endm 
# End of macro FORTH_DSP_VALUEHL
c561			 
c561 e5					push hl      ; string length 
c562			 
c562					FORTH_DSP_POP 
c562 cd 42 9d			call macro_forth_dsp_pop 
c565				endm 
# End of macro FORTH_DSP_POP
c565			 
c565					FORTH_DSP_VALUEHL 
c565 cd 8a 9c			call macro_dsp_valuehl 
c568				endm 
# End of macro FORTH_DSP_VALUEHL
c568			 
c568 e5					push hl     ; start char 
c569			 
c569					FORTH_DSP_POP 
c569 cd 42 9d			call macro_forth_dsp_pop 
c56c				endm 
# End of macro FORTH_DSP_POP
c56c			 
c56c			 
c56c					FORTH_DSP_VALUE 
c56c cd 73 9c			call macro_forth_dsp_value 
c56f				endm 
# End of macro FORTH_DSP_VALUE
c56f			 
c56f d1					pop de    ; get start post offset 
c570			 
c570 19					add hl, de    ; starting offset 
c571			 
c571 c1					pop bc 
c572 c5					push bc      ; grab size of string 
c573			 
c573 e5					push hl    ; save string start  
c574			 
c574 26 00				ld h, 0 
c576 69					ld l, c 
c577 23					inc hl 
c578 23					inc hl 
c579			 
c579 cd c5 90				call malloc 
c57c				if DEBUG_FORTH_MALLOC_GUARD 
c57c cc 64 cf				call z,malloc_error 
c57f				endif 
c57f			 
c57f eb					ex de, hl      ; save malloc area for string copy 
c580 e1					pop hl    ; get back source 
c581 c1					pop bc    ; get length of string back 
c582			 
c582 d5					push de    ; save malloc area for after we push 
c583 ed b0				ldir     ; copy substr 
c585			 
c585			 
c585 eb					ex de, hl 
c586 3e 00				ld a, 0 
c588 77					ld (hl), a   ; term substr 
c589			 
c589					 
c589 e1					pop hl    ; get malloc so we can push it 
c58a e5					push hl   ; save so we can free it afterwards 
c58b			 
c58b cd f3 9a				call forth_push_str 
c58e			 
c58e e1					pop hl 
c58f cd 8f 91				call free 
c592			 
c592					 
c592					 
c592			 
c592			 
c592					NEXTW 
c592 c3 75 9e			jp macro_next 
c595				endm 
# End of macro NEXTW
c595			 
c595			.LEFT: 
c595				CWHEAD .RIGHT 52 "LEFT" 4 WORD_FLAG_CODE 
c595 48				db WORD_SYS_CORE+52             
c596 bd c5			dw .RIGHT            
c598 05				db 4 + 1 
c599 .. 00			db "LEFT",0              
c59e				endm 
# End of macro CWHEAD
c59e			; | LEFT ( s u -- s sub ) Push to TOS string u long starting from left of s  | TODO 
c59e					if DEBUG_FORTH_WORDS_KEY 
c59e						DMARK "LEF" 
c59e f5				push af  
c59f 3a b3 c5			ld a, (.dmark)  
c5a2 32 65 ee			ld (debug_mark),a  
c5a5 3a b4 c5			ld a, (.dmark+1)  
c5a8 32 66 ee			ld (debug_mark+1),a  
c5ab 3a b5 c5			ld a, (.dmark+2)  
c5ae 32 67 ee			ld (debug_mark+2),a  
c5b1 18 03			jr .pastdmark  
c5b3 ..			.dmark: db "LEF"  
c5b6 f1			.pastdmark: pop af  
c5b7			endm  
# End of macro DMARK
c5b7						CALLMONITOR 
c5b7 cd 6f ee			call debug_vector  
c5ba				endm  
# End of macro CALLMONITOR
c5ba					endif 
c5ba			 
c5ba					NEXTW 
c5ba c3 75 9e			jp macro_next 
c5bd				endm 
# End of macro NEXTW
c5bd			.RIGHT: 
c5bd				CWHEAD .STR2NUM 52 "RIGHT" 5 WORD_FLAG_CODE 
c5bd 48				db WORD_SYS_CORE+52             
c5be e6 c5			dw .STR2NUM            
c5c0 06				db 5 + 1 
c5c1 .. 00			db "RIGHT",0              
c5c7				endm 
# End of macro CWHEAD
c5c7			; | RIGHT ( s u -- s sub ) Push to TOS string u long starting from right of s  | TODO 
c5c7					if DEBUG_FORTH_WORDS_KEY 
c5c7						DMARK "RIG" 
c5c7 f5				push af  
c5c8 3a dc c5			ld a, (.dmark)  
c5cb 32 65 ee			ld (debug_mark),a  
c5ce 3a dd c5			ld a, (.dmark+1)  
c5d1 32 66 ee			ld (debug_mark+1),a  
c5d4 3a de c5			ld a, (.dmark+2)  
c5d7 32 67 ee			ld (debug_mark+2),a  
c5da 18 03			jr .pastdmark  
c5dc ..			.dmark: db "RIG"  
c5df f1			.pastdmark: pop af  
c5e0			endm  
# End of macro DMARK
c5e0						CALLMONITOR 
c5e0 cd 6f ee			call debug_vector  
c5e3				endm  
# End of macro CALLMONITOR
c5e3					endif 
c5e3			 
c5e3					NEXTW 
c5e3 c3 75 9e			jp macro_next 
c5e6				endm 
# End of macro NEXTW
c5e6			 
c5e6			 
c5e6			.STR2NUM: 
c5e6				CWHEAD .NUM2STR 52 "STR2NUM" 7 WORD_FLAG_CODE 
c5e6 48				db WORD_SYS_CORE+52             
c5e7 72 c6			dw .NUM2STR            
c5e9 08				db 7 + 1 
c5ea .. 00			db "STR2NUM",0              
c5f2				endm 
# End of macro CWHEAD
c5f2			; | STR2NUM ( s -- n ) Convert a string on TOS to number | DONE 
c5f2			 
c5f2			 
c5f2			; TODO STR type check to do 
c5f2					if DEBUG_FORTH_WORDS_KEY 
c5f2						DMARK "S2N" 
c5f2 f5				push af  
c5f3 3a 07 c6			ld a, (.dmark)  
c5f6 32 65 ee			ld (debug_mark),a  
c5f9 3a 08 c6			ld a, (.dmark+1)  
c5fc 32 66 ee			ld (debug_mark+1),a  
c5ff 3a 09 c6			ld a, (.dmark+2)  
c602 32 67 ee			ld (debug_mark+2),a  
c605 18 03			jr .pastdmark  
c607 ..			.dmark: db "S2N"  
c60a f1			.pastdmark: pop af  
c60b			endm  
# End of macro DMARK
c60b						CALLMONITOR 
c60b cd 6f ee			call debug_vector  
c60e				endm  
# End of macro CALLMONITOR
c60e					endif 
c60e			 
c60e					;FORTH_DSP 
c60e					FORTH_DSP_VALUE 
c60e cd 73 9c			call macro_forth_dsp_value 
c611				endm 
# End of macro FORTH_DSP_VALUE
c611					;inc hl 
c611			 
c611 eb					ex de, hl 
c612					if DEBUG_FORTH_WORDS 
c612						DMARK "S2a" 
c612 f5				push af  
c613 3a 27 c6			ld a, (.dmark)  
c616 32 65 ee			ld (debug_mark),a  
c619 3a 28 c6			ld a, (.dmark+1)  
c61c 32 66 ee			ld (debug_mark+1),a  
c61f 3a 29 c6			ld a, (.dmark+2)  
c622 32 67 ee			ld (debug_mark+2),a  
c625 18 03			jr .pastdmark  
c627 ..			.dmark: db "S2a"  
c62a f1			.pastdmark: pop af  
c62b			endm  
# End of macro DMARK
c62b						CALLMONITOR 
c62b cd 6f ee			call debug_vector  
c62e				endm  
# End of macro CALLMONITOR
c62e					endif 
c62e cd e7 8f				call string_to_uint16 
c631			 
c631					if DEBUG_FORTH_WORDS 
c631						DMARK "S2b" 
c631 f5				push af  
c632 3a 46 c6			ld a, (.dmark)  
c635 32 65 ee			ld (debug_mark),a  
c638 3a 47 c6			ld a, (.dmark+1)  
c63b 32 66 ee			ld (debug_mark+1),a  
c63e 3a 48 c6			ld a, (.dmark+2)  
c641 32 67 ee			ld (debug_mark+2),a  
c644 18 03			jr .pastdmark  
c646 ..			.dmark: db "S2b"  
c649 f1			.pastdmark: pop af  
c64a			endm  
# End of macro DMARK
c64a						CALLMONITOR 
c64a cd 6f ee			call debug_vector  
c64d				endm  
# End of macro CALLMONITOR
c64d					endif 
c64d			;		push hl 
c64d					FORTH_DSP_POP 
c64d cd 42 9d			call macro_forth_dsp_pop 
c650				endm 
# End of macro FORTH_DSP_POP
c650			;		pop hl 
c650					 
c650					if DEBUG_FORTH_WORDS 
c650						DMARK "S2b" 
c650 f5				push af  
c651 3a 65 c6			ld a, (.dmark)  
c654 32 65 ee			ld (debug_mark),a  
c657 3a 66 c6			ld a, (.dmark+1)  
c65a 32 66 ee			ld (debug_mark+1),a  
c65d 3a 67 c6			ld a, (.dmark+2)  
c660 32 67 ee			ld (debug_mark+2),a  
c663 18 03			jr .pastdmark  
c665 ..			.dmark: db "S2b"  
c668 f1			.pastdmark: pop af  
c669			endm  
# End of macro DMARK
c669						CALLMONITOR 
c669 cd 6f ee			call debug_vector  
c66c				endm  
# End of macro CALLMONITOR
c66c					endif 
c66c cd 85 9a				call forth_push_numhl	 
c66f			 
c66f				 
c66f				       NEXTW 
c66f c3 75 9e			jp macro_next 
c672				endm 
# End of macro NEXTW
c672			.NUM2STR: 
c672				CWHEAD .CONCAT 52 "NUM2STR" 7 WORD_FLAG_CODE 
c672 48				db WORD_SYS_CORE+52             
c673 04 c7			dw .CONCAT            
c675 08				db 7 + 1 
c676 .. 00			db "NUM2STR",0              
c67e				endm 
# End of macro CWHEAD
c67e			; | NUM2STR ( n -- s ) Convert a number on TOS to zero padded string | DONE 
c67e			 
c67e			;		; malloc a string to target 
c67e			;		ld hl, 10     ; TODO max string size should be fine 
c67e			;		call malloc 
c67e			;		push hl    ; save malloc location 
c67e			; 
c67e			; 
c67e			;; TODO check int type 
c67e					if DEBUG_FORTH_WORDS_KEY 
c67e						DMARK "N2S" 
c67e f5				push af  
c67f 3a 93 c6			ld a, (.dmark)  
c682 32 65 ee			ld (debug_mark),a  
c685 3a 94 c6			ld a, (.dmark+1)  
c688 32 66 ee			ld (debug_mark+1),a  
c68b 3a 95 c6			ld a, (.dmark+2)  
c68e 32 67 ee			ld (debug_mark+2),a  
c691 18 03			jr .pastdmark  
c693 ..			.dmark: db "N2S"  
c696 f1			.pastdmark: pop af  
c697			endm  
# End of macro DMARK
c697						CALLMONITOR 
c697 cd 6f ee			call debug_vector  
c69a				endm  
# End of macro CALLMONITOR
c69a					endif 
c69a			 
c69a					FORTH_DSP_VALUEHL 
c69a cd 8a 9c			call macro_dsp_valuehl 
c69d				endm 
# End of macro FORTH_DSP_VALUEHL
c69d			 
c69d					if DEBUG_FORTH_WORDS 
c69d						DMARK "NS1" 
c69d f5				push af  
c69e 3a b2 c6			ld a, (.dmark)  
c6a1 32 65 ee			ld (debug_mark),a  
c6a4 3a b3 c6			ld a, (.dmark+1)  
c6a7 32 66 ee			ld (debug_mark+1),a  
c6aa 3a b4 c6			ld a, (.dmark+2)  
c6ad 32 67 ee			ld (debug_mark+2),a  
c6b0 18 03			jr .pastdmark  
c6b2 ..			.dmark: db "NS1"  
c6b5 f1			.pastdmark: pop af  
c6b6			endm  
# End of macro DMARK
c6b6						CALLMONITOR 
c6b6 cd 6f ee			call debug_vector  
c6b9				endm  
# End of macro CALLMONITOR
c6b9					endif 
c6b9					FORTH_DSP_POP 
c6b9 cd 42 9d			call macro_forth_dsp_pop 
c6bc				endm 
# End of macro FORTH_DSP_POP
c6bc			 
c6bc eb					ex de, hl 
c6bd 21 bb e2				ld hl, scratch 
c6c0					if DEBUG_FORTH_WORDS 
c6c0						DMARK "NS2" 
c6c0 f5				push af  
c6c1 3a d5 c6			ld a, (.dmark)  
c6c4 32 65 ee			ld (debug_mark),a  
c6c7 3a d6 c6			ld a, (.dmark+1)  
c6ca 32 66 ee			ld (debug_mark+1),a  
c6cd 3a d7 c6			ld a, (.dmark+2)  
c6d0 32 67 ee			ld (debug_mark+2),a  
c6d3 18 03			jr .pastdmark  
c6d5 ..			.dmark: db "NS2"  
c6d8 f1			.pastdmark: pop af  
c6d9			endm  
# End of macro DMARK
c6d9						CALLMONITOR 
c6d9 cd 6f ee			call debug_vector  
c6dc				endm  
# End of macro CALLMONITOR
c6dc					endif 
c6dc cd ff 8f				call uitoa_16 
c6df 21 bb e2				ld hl, scratch 
c6e2					if DEBUG_FORTH_WORDS 
c6e2						DMARK "NS3" 
c6e2 f5				push af  
c6e3 3a f7 c6			ld a, (.dmark)  
c6e6 32 65 ee			ld (debug_mark),a  
c6e9 3a f8 c6			ld a, (.dmark+1)  
c6ec 32 66 ee			ld (debug_mark+1),a  
c6ef 3a f9 c6			ld a, (.dmark+2)  
c6f2 32 67 ee			ld (debug_mark+2),a  
c6f5 18 03			jr .pastdmark  
c6f7 ..			.dmark: db "NS3"  
c6fa f1			.pastdmark: pop af  
c6fb			endm  
# End of macro DMARK
c6fb						CALLMONITOR 
c6fb cd 6f ee			call debug_vector  
c6fe				endm  
# End of macro CALLMONITOR
c6fe					endif 
c6fe cd f3 9a				call forth_push_str 
c701			;		ld a, l 
c701			;		call DispAToASCII   
c701			;;TODO need to chage above call to dump into string 
c701			; 
c701			; 
c701			 
c701				       NEXTW 
c701 c3 75 9e			jp macro_next 
c704				endm 
# End of macro NEXTW
c704			 
c704			.CONCAT: 
c704				CWHEAD .FIND 52 "CONCAT" 6 WORD_FLAG_CODE 
c704 48				db WORD_SYS_CORE+52             
c705 b7 c7			dw .FIND            
c707 07				db 6 + 1 
c708 .. 00			db "CONCAT",0              
c70f				endm 
# End of macro CWHEAD
c70f			; | CONCAT ( s1 s2 -- s3 ) A s1 + s2 is pushed onto the stack | DONE 
c70f			 
c70f			; TODO check string type 
c70f			; TODO create macro to get pointer for next item on stack. Handy for lots of things 
c70f			 
c70f					if DEBUG_FORTH_WORDS_KEY 
c70f						DMARK "CON" 
c70f f5				push af  
c710 3a 24 c7			ld a, (.dmark)  
c713 32 65 ee			ld (debug_mark),a  
c716 3a 25 c7			ld a, (.dmark+1)  
c719 32 66 ee			ld (debug_mark+1),a  
c71c 3a 26 c7			ld a, (.dmark+2)  
c71f 32 67 ee			ld (debug_mark+2),a  
c722 18 03			jr .pastdmark  
c724 ..			.dmark: db "CON"  
c727 f1			.pastdmark: pop af  
c728			endm  
# End of macro DMARK
c728						CALLMONITOR 
c728 cd 6f ee			call debug_vector  
c72b				endm  
# End of macro CALLMONITOR
c72b					endif 
c72b			 
c72b			 
c72b					FORTH_DSP_VALUE 
c72b cd 73 9c			call macro_forth_dsp_value 
c72e				endm 
# End of macro FORTH_DSP_VALUE
c72e e5					push hl   ; s2 
c72f			 
c72f					FORTH_DSP_POP 
c72f cd 42 9d			call macro_forth_dsp_pop 
c732				endm 
# End of macro FORTH_DSP_POP
c732			 
c732					FORTH_DSP_VALUE 
c732 cd 73 9c			call macro_forth_dsp_value 
c735				endm 
# End of macro FORTH_DSP_VALUE
c735			 
c735 e5					push hl   ; s1 
c736			 
c736					FORTH_DSP_POP 
c736 cd 42 9d			call macro_forth_dsp_pop 
c739				endm 
# End of macro FORTH_DSP_POP
c739					 
c739			 
c739					; copy s1 
c739			 
c739				 
c739					; save ptr 
c739 e1					pop hl  
c73a e5					push hl 
c73b 3e 00				ld a, 0 
c73d cd 5b 90				call strlent 
c740					;inc hl    ; zer0 
c740 06 00				ld b, 0 
c742 4d					ld c, l 
c743 e1					pop hl		 
c744 11 bb e2				ld de, scratch	 
c747					if DEBUG_FORTH_WORDS 
c747						DMARK "CO1" 
c747 f5				push af  
c748 3a 5c c7			ld a, (.dmark)  
c74b 32 65 ee			ld (debug_mark),a  
c74e 3a 5d c7			ld a, (.dmark+1)  
c751 32 66 ee			ld (debug_mark+1),a  
c754 3a 5e c7			ld a, (.dmark+2)  
c757 32 67 ee			ld (debug_mark+2),a  
c75a 18 03			jr .pastdmark  
c75c ..			.dmark: db "CO1"  
c75f f1			.pastdmark: pop af  
c760			endm  
# End of macro DMARK
c760						CALLMONITOR 
c760 cd 6f ee			call debug_vector  
c763				endm  
# End of macro CALLMONITOR
c763					endif 
c763 ed b0				ldir 
c765			 
c765 e1					pop hl 
c766 e5					push hl 
c767 d5					push de 
c768			 
c768			 
c768 3e 00				ld a, 0 
c76a cd 5b 90				call strlent 
c76d 23					inc hl    ; zer0 
c76e 23					inc hl 
c76f 06 00				ld b, 0 
c771 4d					ld c, l 
c772 d1					pop de 
c773 e1					pop hl		 
c774					if DEBUG_FORTH_WORDS 
c774						DMARK "CO2" 
c774 f5				push af  
c775 3a 89 c7			ld a, (.dmark)  
c778 32 65 ee			ld (debug_mark),a  
c77b 3a 8a c7			ld a, (.dmark+1)  
c77e 32 66 ee			ld (debug_mark+1),a  
c781 3a 8b c7			ld a, (.dmark+2)  
c784 32 67 ee			ld (debug_mark+2),a  
c787 18 03			jr .pastdmark  
c789 ..			.dmark: db "CO2"  
c78c f1			.pastdmark: pop af  
c78d			endm  
# End of macro DMARK
c78d						CALLMONITOR 
c78d cd 6f ee			call debug_vector  
c790				endm  
# End of macro CALLMONITOR
c790					endif 
c790 ed b0				ldir 
c792			 
c792			 
c792			 
c792 21 bb e2				ld hl, scratch 
c795					if DEBUG_FORTH_WORDS 
c795						DMARK "CO5" 
c795 f5				push af  
c796 3a aa c7			ld a, (.dmark)  
c799 32 65 ee			ld (debug_mark),a  
c79c 3a ab c7			ld a, (.dmark+1)  
c79f 32 66 ee			ld (debug_mark+1),a  
c7a2 3a ac c7			ld a, (.dmark+2)  
c7a5 32 67 ee			ld (debug_mark+2),a  
c7a8 18 03			jr .pastdmark  
c7aa ..			.dmark: db "CO5"  
c7ad f1			.pastdmark: pop af  
c7ae			endm  
# End of macro DMARK
c7ae						CALLMONITOR 
c7ae cd 6f ee			call debug_vector  
c7b1				endm  
# End of macro CALLMONITOR
c7b1					endif 
c7b1			 
c7b1 cd f3 9a				call forth_push_str 
c7b4			 
c7b4			 
c7b4			 
c7b4			 
c7b4				       NEXTW 
c7b4 c3 75 9e			jp macro_next 
c7b7				endm 
# End of macro NEXTW
c7b7			 
c7b7			 
c7b7			.FIND: 
c7b7				CWHEAD .LEN 55 "FIND" 4 WORD_FLAG_CODE 
c7b7 4b				db WORD_SYS_CORE+55             
c7b8 75 c8			dw .LEN            
c7ba 05				db 4 + 1 
c7bb .. 00			db "FIND",0              
c7c0				endm 
# End of macro CWHEAD
c7c0			; | FIND ( s c -- s u ) Search the string s for the char c and push the position of the first occurance to TOS | DONE 
c7c0			 
c7c0					if DEBUG_FORTH_WORDS_KEY 
c7c0						DMARK "FND" 
c7c0 f5				push af  
c7c1 3a d5 c7			ld a, (.dmark)  
c7c4 32 65 ee			ld (debug_mark),a  
c7c7 3a d6 c7			ld a, (.dmark+1)  
c7ca 32 66 ee			ld (debug_mark+1),a  
c7cd 3a d7 c7			ld a, (.dmark+2)  
c7d0 32 67 ee			ld (debug_mark+2),a  
c7d3 18 03			jr .pastdmark  
c7d5 ..			.dmark: db "FND"  
c7d8 f1			.pastdmark: pop af  
c7d9			endm  
# End of macro DMARK
c7d9						CALLMONITOR 
c7d9 cd 6f ee			call debug_vector  
c7dc				endm  
# End of macro CALLMONITOR
c7dc					endif 
c7dc			 
c7dc			; TODO check string type 
c7dc					FORTH_DSP_VALUE 
c7dc cd 73 9c			call macro_forth_dsp_value 
c7df				endm 
# End of macro FORTH_DSP_VALUE
c7df			 
c7df e5					push hl    
c7e0 7e					ld a,(hl)    ; char to find   
c7e1			; TODO change char to substr 
c7e1			 
c7e1 f5					push af 
c7e2					 
c7e2			 
c7e2			 
c7e2					if DEBUG_FORTH_WORDS 
c7e2						DMARK "FN1" 
c7e2 f5				push af  
c7e3 3a f7 c7			ld a, (.dmark)  
c7e6 32 65 ee			ld (debug_mark),a  
c7e9 3a f8 c7			ld a, (.dmark+1)  
c7ec 32 66 ee			ld (debug_mark+1),a  
c7ef 3a f9 c7			ld a, (.dmark+2)  
c7f2 32 67 ee			ld (debug_mark+2),a  
c7f5 18 03			jr .pastdmark  
c7f7 ..			.dmark: db "FN1"  
c7fa f1			.pastdmark: pop af  
c7fb			endm  
# End of macro DMARK
c7fb						CALLMONITOR 
c7fb cd 6f ee			call debug_vector  
c7fe				endm  
# End of macro CALLMONITOR
c7fe					endif 
c7fe			 
c7fe					FORTH_DSP_POP 
c7fe cd 42 9d			call macro_forth_dsp_pop 
c801				endm 
# End of macro FORTH_DSP_POP
c801			 
c801					; string to search 
c801			 
c801					FORTH_DSP_VALUE 
c801 cd 73 9c			call macro_forth_dsp_value 
c804				endm 
# End of macro FORTH_DSP_VALUE
c804			 
c804 d1					pop de  ; d is char to find  
c805			 
c805					if DEBUG_FORTH_WORDS 
c805						DMARK "FN2" 
c805 f5				push af  
c806 3a 1a c8			ld a, (.dmark)  
c809 32 65 ee			ld (debug_mark),a  
c80c 3a 1b c8			ld a, (.dmark+1)  
c80f 32 66 ee			ld (debug_mark+1),a  
c812 3a 1c c8			ld a, (.dmark+2)  
c815 32 67 ee			ld (debug_mark+2),a  
c818 18 03			jr .pastdmark  
c81a ..			.dmark: db "FN2"  
c81d f1			.pastdmark: pop af  
c81e			endm  
# End of macro DMARK
c81e						CALLMONITOR 
c81e cd 6f ee			call debug_vector  
c821				endm  
# End of macro CALLMONITOR
c821					endif 
c821					 
c821 01 00 00				ld bc, 0 
c824 7e			.findchar:      ld a,(hl) 
c825 fe 00				cp 0   		 
c827 28 27				jr z, .finddone     
c829 ba					cp d 
c82a 28 20				jr z, .foundchar 
c82c 03					inc bc 
c82d 23					inc hl 
c82e					if DEBUG_FORTH_WORDS 
c82e						DMARK "FN3" 
c82e f5				push af  
c82f 3a 43 c8			ld a, (.dmark)  
c832 32 65 ee			ld (debug_mark),a  
c835 3a 44 c8			ld a, (.dmark+1)  
c838 32 66 ee			ld (debug_mark+1),a  
c83b 3a 45 c8			ld a, (.dmark+2)  
c83e 32 67 ee			ld (debug_mark+2),a  
c841 18 03			jr .pastdmark  
c843 ..			.dmark: db "FN3"  
c846 f1			.pastdmark: pop af  
c847			endm  
# End of macro DMARK
c847						CALLMONITOR 
c847 cd 6f ee			call debug_vector  
c84a				endm  
# End of macro CALLMONITOR
c84a					endif 
c84a 18 d8				jr .findchar 
c84c			 
c84c			 
c84c c5			.foundchar:	push bc 
c84d e1					pop hl 
c84e 18 03				jr .findexit 
c850			 
c850			 
c850							 
c850			 
c850			.finddone:     ; got to end of string with no find 
c850 21 00 00				ld hl, 0 
c853			.findexit: 
c853			 
c853					if DEBUG_FORTH_WORDS 
c853						DMARK "FNd" 
c853 f5				push af  
c854 3a 68 c8			ld a, (.dmark)  
c857 32 65 ee			ld (debug_mark),a  
c85a 3a 69 c8			ld a, (.dmark+1)  
c85d 32 66 ee			ld (debug_mark+1),a  
c860 3a 6a c8			ld a, (.dmark+2)  
c863 32 67 ee			ld (debug_mark+2),a  
c866 18 03			jr .pastdmark  
c868 ..			.dmark: db "FNd"  
c86b f1			.pastdmark: pop af  
c86c			endm  
# End of macro DMARK
c86c						CALLMONITOR 
c86c cd 6f ee			call debug_vector  
c86f				endm  
# End of macro CALLMONITOR
c86f					endif 
c86f cd 85 9a			call forth_push_numhl 
c872			 
c872				       NEXTW 
c872 c3 75 9e			jp macro_next 
c875				endm 
# End of macro NEXTW
c875			 
c875			.LEN: 
c875				CWHEAD .ASC 56 "COUNT" 5 WORD_FLAG_CODE 
c875 4c				db WORD_SYS_CORE+56             
c876 df c8			dw .ASC            
c878 06				db 5 + 1 
c879 .. 00			db "COUNT",0              
c87f				endm 
# End of macro CWHEAD
c87f			; | COUNT (  str -- str u1 ) Push the length of the string str on TOS as u1 | DONE 
c87f			 
c87f					if DEBUG_FORTH_WORDS_KEY 
c87f						DMARK "CNT" 
c87f f5				push af  
c880 3a 94 c8			ld a, (.dmark)  
c883 32 65 ee			ld (debug_mark),a  
c886 3a 95 c8			ld a, (.dmark+1)  
c889 32 66 ee			ld (debug_mark+1),a  
c88c 3a 96 c8			ld a, (.dmark+2)  
c88f 32 67 ee			ld (debug_mark+2),a  
c892 18 03			jr .pastdmark  
c894 ..			.dmark: db "CNT"  
c897 f1			.pastdmark: pop af  
c898			endm  
# End of macro DMARK
c898						CALLMONITOR 
c898 cd 6f ee			call debug_vector  
c89b				endm  
# End of macro CALLMONITOR
c89b					endif 
c89b			; TODO check string type 
c89b					FORTH_DSP_VALUE 
c89b cd 73 9c			call macro_forth_dsp_value 
c89e				endm 
# End of macro FORTH_DSP_VALUE
c89e			 
c89e			 
c89e					if DEBUG_FORTH_WORDS 
c89e						DMARK "CN?" 
c89e f5				push af  
c89f 3a b3 c8			ld a, (.dmark)  
c8a2 32 65 ee			ld (debug_mark),a  
c8a5 3a b4 c8			ld a, (.dmark+1)  
c8a8 32 66 ee			ld (debug_mark+1),a  
c8ab 3a b5 c8			ld a, (.dmark+2)  
c8ae 32 67 ee			ld (debug_mark+2),a  
c8b1 18 03			jr .pastdmark  
c8b3 ..			.dmark: db "CN?"  
c8b6 f1			.pastdmark: pop af  
c8b7			endm  
# End of macro DMARK
c8b7						CALLMONITOR 
c8b7 cd 6f ee			call debug_vector  
c8ba				endm  
# End of macro CALLMONITOR
c8ba					endif 
c8ba cd 50 90				call strlenz 
c8bd					if DEBUG_FORTH_WORDS 
c8bd						DMARK "CNl" 
c8bd f5				push af  
c8be 3a d2 c8			ld a, (.dmark)  
c8c1 32 65 ee			ld (debug_mark),a  
c8c4 3a d3 c8			ld a, (.dmark+1)  
c8c7 32 66 ee			ld (debug_mark+1),a  
c8ca 3a d4 c8			ld a, (.dmark+2)  
c8cd 32 67 ee			ld (debug_mark+2),a  
c8d0 18 03			jr .pastdmark  
c8d2 ..			.dmark: db "CNl"  
c8d5 f1			.pastdmark: pop af  
c8d6			endm  
# End of macro DMARK
c8d6						CALLMONITOR 
c8d6 cd 6f ee			call debug_vector  
c8d9				endm  
# End of macro CALLMONITOR
c8d9					endif 
c8d9			 
c8d9 cd 85 9a				call forth_push_numhl 
c8dc			 
c8dc			 
c8dc			 
c8dc				       NEXTW 
c8dc c3 75 9e			jp macro_next 
c8df				endm 
# End of macro NEXTW
c8df			.ASC: 
c8df				CWHEAD .CHR 57 "ASC" 3 WORD_FLAG_CODE 
c8df 4d				db WORD_SYS_CORE+57             
c8e0 4d c9			dw .CHR            
c8e2 04				db 3 + 1 
c8e3 .. 00			db "ASC",0              
c8e7				endm 
# End of macro CWHEAD
c8e7			; | ASC ( u -- n ) Get the ASCII value of the first character of the string on TOS | DONE 
c8e7					if DEBUG_FORTH_WORDS_KEY 
c8e7						DMARK "ASC" 
c8e7 f5				push af  
c8e8 3a fc c8			ld a, (.dmark)  
c8eb 32 65 ee			ld (debug_mark),a  
c8ee 3a fd c8			ld a, (.dmark+1)  
c8f1 32 66 ee			ld (debug_mark+1),a  
c8f4 3a fe c8			ld a, (.dmark+2)  
c8f7 32 67 ee			ld (debug_mark+2),a  
c8fa 18 03			jr .pastdmark  
c8fc ..			.dmark: db "ASC"  
c8ff f1			.pastdmark: pop af  
c900			endm  
# End of macro DMARK
c900						CALLMONITOR 
c900 cd 6f ee			call debug_vector  
c903				endm  
# End of macro CALLMONITOR
c903					endif 
c903					FORTH_DSP_VALUE 
c903 cd 73 9c			call macro_forth_dsp_value 
c906				endm 
# End of macro FORTH_DSP_VALUE
c906					;v5 FORTH_DSP_VALUE 
c906			;		inc hl      ; now at start of numeric as string 
c906			 
c906 e5					push hl 
c907			 
c907					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c907 cd 42 9d			call macro_forth_dsp_pop 
c90a				endm 
# End of macro FORTH_DSP_POP
c90a			 
c90a e1					pop hl 
c90b			 
c90b					if DEBUG_FORTH_WORDS 
c90b						DMARK "AS1" 
c90b f5				push af  
c90c 3a 20 c9			ld a, (.dmark)  
c90f 32 65 ee			ld (debug_mark),a  
c912 3a 21 c9			ld a, (.dmark+1)  
c915 32 66 ee			ld (debug_mark+1),a  
c918 3a 22 c9			ld a, (.dmark+2)  
c91b 32 67 ee			ld (debug_mark+2),a  
c91e 18 03			jr .pastdmark  
c920 ..			.dmark: db "AS1"  
c923 f1			.pastdmark: pop af  
c924			endm  
# End of macro DMARK
c924						CALLMONITOR 
c924 cd 6f ee			call debug_vector  
c927				endm  
# End of macro CALLMONITOR
c927					endif 
c927					; push the content of a onto the stack as a value 
c927			 
c927 7e					ld a,(hl)   ; get char 
c928 26 00				ld h,0 
c92a 6f					ld l,a 
c92b					if DEBUG_FORTH_WORDS 
c92b						DMARK "AS2" 
c92b f5				push af  
c92c 3a 40 c9			ld a, (.dmark)  
c92f 32 65 ee			ld (debug_mark),a  
c932 3a 41 c9			ld a, (.dmark+1)  
c935 32 66 ee			ld (debug_mark+1),a  
c938 3a 42 c9			ld a, (.dmark+2)  
c93b 32 67 ee			ld (debug_mark+2),a  
c93e 18 03			jr .pastdmark  
c940 ..			.dmark: db "AS2"  
c943 f1			.pastdmark: pop af  
c944			endm  
# End of macro DMARK
c944						CALLMONITOR 
c944 cd 6f ee			call debug_vector  
c947				endm  
# End of macro CALLMONITOR
c947					endif 
c947 cd 85 9a				call forth_push_numhl 
c94a			 
c94a				       NEXTW 
c94a c3 75 9e			jp macro_next 
c94d				endm 
# End of macro NEXTW
c94d			 
c94d			.CHR: 
c94d				CWHEAD .ENDSTR 57 "CHR" 3 WORD_FLAG_CODE 
c94d 4d				db WORD_SYS_CORE+57             
c94e 89 c9			dw .ENDSTR            
c950 04				db 3 + 1 
c951 .. 00			db "CHR",0              
c955				endm 
# End of macro CWHEAD
c955			; | CHR ( u -- n ) The ASCII character value of u is turned into a string n on the stack | DONE 
c955					if DEBUG_FORTH_WORDS_KEY 
c955						DMARK "CHR" 
c955 f5				push af  
c956 3a 6a c9			ld a, (.dmark)  
c959 32 65 ee			ld (debug_mark),a  
c95c 3a 6b c9			ld a, (.dmark+1)  
c95f 32 66 ee			ld (debug_mark+1),a  
c962 3a 6c c9			ld a, (.dmark+2)  
c965 32 67 ee			ld (debug_mark+2),a  
c968 18 03			jr .pastdmark  
c96a ..			.dmark: db "CHR"  
c96d f1			.pastdmark: pop af  
c96e			endm  
# End of macro DMARK
c96e						CALLMONITOR 
c96e cd 6f ee			call debug_vector  
c971				endm  
# End of macro CALLMONITOR
c971					endif 
c971					FORTH_DSP_VALUEHL 
c971 cd 8a 9c			call macro_dsp_valuehl 
c974				endm 
# End of macro FORTH_DSP_VALUEHL
c974			 
c974					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c974 cd 42 9d			call macro_forth_dsp_pop 
c977				endm 
# End of macro FORTH_DSP_POP
c977			 
c977					; save asci byte as a zero term string and push string 
c977			 
c977 7d					ld a,l 
c978 32 bb e2				ld (scratch), a 
c97b			 
c97b 3e 00				ld a, 0 
c97d 32 bc e2				ld (scratch+1), a 
c980			 
c980 21 bb e2				ld hl, scratch 
c983 cd f3 9a				call forth_push_str 
c986			 
c986			 
c986				       NEXTW 
c986 c3 75 9e			jp macro_next 
c989				endm 
# End of macro NEXTW
c989			 
c989			 
c989			 
c989			 
c989			.ENDSTR: 
c989			; eof 
c989			 
# End of file forth_words_str.asm
c989			include "forth_words_key.asm" 
c989			 
c989			; | ## Keyboard Words 
c989			 
c989			.KEY: 
c989				CWHEAD .KEYDB 42 "KEY" 3 WORD_FLAG_CODE 
c989 3e				db WORD_SYS_CORE+42             
c98a b9 c9			dw .KEYDB            
c98c 04				db 3 + 1 
c98d .. 00			db "KEY",0              
c991				endm 
# End of macro CWHEAD
c991			; | KEY ( -- u ) A non-blocking read of keypress | DONE 
c991			; | | The ASCII key (or key code) is pushed to stack. If no key is currently held down then push a 0 
c991			; | | Can use something like this to process: 
c991			; | | > repeat active . key ?dup if emit then #1 until  
c991			 
c991					if DEBUG_FORTH_WORDS_KEY 
c991						DMARK "KEY" 
c991 f5				push af  
c992 3a a6 c9			ld a, (.dmark)  
c995 32 65 ee			ld (debug_mark),a  
c998 3a a7 c9			ld a, (.dmark+1)  
c99b 32 66 ee			ld (debug_mark+1),a  
c99e 3a a8 c9			ld a, (.dmark+2)  
c9a1 32 67 ee			ld (debug_mark+2),a  
c9a4 18 03			jr .pastdmark  
c9a6 ..			.dmark: db "KEY"  
c9a9 f1			.pastdmark: pop af  
c9aa			endm  
# End of macro DMARK
c9aa						CALLMONITOR 
c9aa cd 6f ee			call debug_vector  
c9ad				endm  
# End of macro CALLMONITOR
c9ad					endif 
c9ad			; TODO currently waits 
c9ad cd a7 e0				call cinndb 
c9b0					;call cin_wait 
c9b0 6f					ld l, a 
c9b1 26 00				ld h, 0 
c9b3 cd 85 9a				call forth_push_numhl 
c9b6					NEXTW 
c9b6 c3 75 9e			jp macro_next 
c9b9				endm 
# End of macro NEXTW
c9b9			.KEYDB: 
c9b9				CWHEAD .WAITK 42 "KEYDB" 5 WORD_FLAG_CODE 
c9b9 3e				db WORD_SYS_CORE+42             
c9ba eb c9			dw .WAITK            
c9bc 06				db 5 + 1 
c9bd .. 00			db "KEYDB",0              
c9c3				endm 
# End of macro CWHEAD
c9c3			; | KEYDB ( -- u ) A non-blocking read of keypress with key release debounce | DONE 
c9c3			; | | The ASCII key (or key code) is pushed to stack. If no key is currently held down then push a 0 
c9c3			; | | Can use something like this to process: 
c9c3			; | | > repeat active . key ?dup if emit then #1 until  
c9c3			 
c9c3					if DEBUG_FORTH_WORDS_KEY 
c9c3						DMARK "KEB" 
c9c3 f5				push af  
c9c4 3a d8 c9			ld a, (.dmark)  
c9c7 32 65 ee			ld (debug_mark),a  
c9ca 3a d9 c9			ld a, (.dmark+1)  
c9cd 32 66 ee			ld (debug_mark+1),a  
c9d0 3a da c9			ld a, (.dmark+2)  
c9d3 32 67 ee			ld (debug_mark+2),a  
c9d6 18 03			jr .pastdmark  
c9d8 ..			.dmark: db "KEB"  
c9db f1			.pastdmark: pop af  
c9dc			endm  
# End of macro DMARK
c9dc						CALLMONITOR 
c9dc cd 6f ee			call debug_vector  
c9df				endm  
# End of macro CALLMONITOR
c9df					endif 
c9df			; TODO currently waits 
c9df cd a7 e0				call cin 
c9e2					;call cin_wait 
c9e2 6f					ld l, a 
c9e3 26 00				ld h, 0 
c9e5 cd 85 9a				call forth_push_numhl 
c9e8					NEXTW 
c9e8 c3 75 9e			jp macro_next 
c9eb				endm 
# End of macro NEXTW
c9eb			.WAITK: 
c9eb				CWHEAD .ACCEPT 43 "WAITK" 5 WORD_FLAG_CODE 
c9eb 3f				db WORD_SYS_CORE+43             
c9ec 1d ca			dw .ACCEPT            
c9ee 06				db 5 + 1 
c9ef .. 00			db "WAITK",0              
c9f5				endm 
# End of macro CWHEAD
c9f5			; | WAITK ( -- w ) Wait for keypress TOS is key press | DONE 
c9f5					if DEBUG_FORTH_WORDS_KEY 
c9f5						DMARK "WAI" 
c9f5 f5				push af  
c9f6 3a 0a ca			ld a, (.dmark)  
c9f9 32 65 ee			ld (debug_mark),a  
c9fc 3a 0b ca			ld a, (.dmark+1)  
c9ff 32 66 ee			ld (debug_mark+1),a  
ca02 3a 0c ca			ld a, (.dmark+2)  
ca05 32 67 ee			ld (debug_mark+2),a  
ca08 18 03			jr .pastdmark  
ca0a ..			.dmark: db "WAI"  
ca0d f1			.pastdmark: pop af  
ca0e			endm  
# End of macro DMARK
ca0e						CALLMONITOR 
ca0e cd 6f ee			call debug_vector  
ca11				endm  
# End of macro CALLMONITOR
ca11					endif 
ca11 cd a1 e0				call cin_wait 
ca14 6f					ld l, a 
ca15 26 00				ld h, 0 
ca17 cd 85 9a				call forth_push_numhl 
ca1a					NEXTW 
ca1a c3 75 9e			jp macro_next 
ca1d				endm 
# End of macro NEXTW
ca1d			.ACCEPT: 
ca1d				CWHEAD .EDIT 44 "ACCEPT" 6 WORD_FLAG_CODE 
ca1d 40				db WORD_SYS_CORE+44             
ca1e 7b ca			dw .EDIT            
ca20 07				db 6 + 1 
ca21 .. 00			db "ACCEPT",0              
ca28				endm 
# End of macro CWHEAD
ca28			; | ACCEPT ( -- w ) Prompt for text input and push pointer to string | DONE 
ca28					; TODO crashes on push 
ca28					if DEBUG_FORTH_WORDS_KEY 
ca28						DMARK "ACC" 
ca28 f5				push af  
ca29 3a 3d ca			ld a, (.dmark)  
ca2c 32 65 ee			ld (debug_mark),a  
ca2f 3a 3e ca			ld a, (.dmark+1)  
ca32 32 66 ee			ld (debug_mark+1),a  
ca35 3a 3f ca			ld a, (.dmark+2)  
ca38 32 67 ee			ld (debug_mark+2),a  
ca3b 18 03			jr .pastdmark  
ca3d ..			.dmark: db "ACC"  
ca40 f1			.pastdmark: pop af  
ca41			endm  
# End of macro DMARK
ca41						CALLMONITOR 
ca41 cd 6f ee			call debug_vector  
ca44				endm  
# End of macro CALLMONITOR
ca44					endif 
ca44 21 b9 e4				ld hl, os_input 
ca47 3e 00				ld a, 0 
ca49 77					ld (hl),a 
ca4a 3a 58 ea				ld a,(f_cursor_ptr) 
ca4d 16 64				ld d, 100 
ca4f 0e 00				ld c, 0 
ca51 1e 28				ld e, 40 
ca53 cd 17 8d				call input_str 
ca56					; TODO perhaps do a type check and wrap in quotes if not a number 
ca56 21 b9 e4				ld hl, os_input 
ca59					if DEBUG_FORTH_WORDS 
ca59						DMARK "AC1" 
ca59 f5				push af  
ca5a 3a 6e ca			ld a, (.dmark)  
ca5d 32 65 ee			ld (debug_mark),a  
ca60 3a 6f ca			ld a, (.dmark+1)  
ca63 32 66 ee			ld (debug_mark+1),a  
ca66 3a 70 ca			ld a, (.dmark+2)  
ca69 32 67 ee			ld (debug_mark+2),a  
ca6c 18 03			jr .pastdmark  
ca6e ..			.dmark: db "AC1"  
ca71 f1			.pastdmark: pop af  
ca72			endm  
# End of macro DMARK
ca72						CALLMONITOR 
ca72 cd 6f ee			call debug_vector  
ca75				endm  
# End of macro CALLMONITOR
ca75					endif 
ca75 cd f3 9a				call forth_push_str 
ca78					NEXTW 
ca78 c3 75 9e			jp macro_next 
ca7b				endm 
# End of macro NEXTW
ca7b			 
ca7b			.EDIT: 
ca7b				CWHEAD .DEDIT 44 "EDIT" 4 WORD_FLAG_CODE 
ca7b 40				db WORD_SYS_CORE+44             
ca7c 1d cb			dw .DEDIT            
ca7e 05				db 4 + 1 
ca7f .. 00			db "EDIT",0              
ca84				endm 
# End of macro CWHEAD
ca84			; | EDIT ( u -- u ) Takes string on TOS and allows editing of it. Pushes it back once done. | DONE 
ca84			 
ca84					; TODO does not copy from stack 
ca84					if DEBUG_FORTH_WORDS_KEY 
ca84						DMARK "EDT" 
ca84 f5				push af  
ca85 3a 99 ca			ld a, (.dmark)  
ca88 32 65 ee			ld (debug_mark),a  
ca8b 3a 9a ca			ld a, (.dmark+1)  
ca8e 32 66 ee			ld (debug_mark+1),a  
ca91 3a 9b ca			ld a, (.dmark+2)  
ca94 32 67 ee			ld (debug_mark+2),a  
ca97 18 03			jr .pastdmark  
ca99 ..			.dmark: db "EDT"  
ca9c f1			.pastdmark: pop af  
ca9d			endm  
# End of macro DMARK
ca9d						CALLMONITOR 
ca9d cd 6f ee			call debug_vector  
caa0				endm  
# End of macro CALLMONITOR
caa0					endif 
caa0			 
caa0					;FORTH_DSP 
caa0					FORTH_DSP_VALUEHL 
caa0 cd 8a 9c			call macro_dsp_valuehl 
caa3				endm 
# End of macro FORTH_DSP_VALUEHL
caa3			;		inc hl    ; TODO do type check 
caa3			 
caa3			;		call get_word_hl 
caa3 e5					push hl 
caa4					if DEBUG_FORTH_WORDS 
caa4						DMARK "EDp" 
caa4 f5				push af  
caa5 3a b9 ca			ld a, (.dmark)  
caa8 32 65 ee			ld (debug_mark),a  
caab 3a ba ca			ld a, (.dmark+1)  
caae 32 66 ee			ld (debug_mark+1),a  
cab1 3a bb ca			ld a, (.dmark+2)  
cab4 32 67 ee			ld (debug_mark+2),a  
cab7 18 03			jr .pastdmark  
cab9 ..			.dmark: db "EDp"  
cabc f1			.pastdmark: pop af  
cabd			endm  
# End of macro DMARK
cabd						CALLMONITOR 
cabd cd 6f ee			call debug_vector  
cac0				endm  
# End of macro CALLMONITOR
cac0					endif 
cac0				;	ld a, 0 
cac0 cd 50 90				call strlenz 
cac3 23					inc hl 
cac4			 
cac4 06 00				ld b, 0 
cac6 4d					ld c, l 
cac7			 
cac7 e1					pop hl 
cac8 11 b9 e4				ld de, os_input 
cacb					if DEBUG_FORTH_WORDS_KEY 
cacb						DMARK "EDc" 
cacb f5				push af  
cacc 3a e0 ca			ld a, (.dmark)  
cacf 32 65 ee			ld (debug_mark),a  
cad2 3a e1 ca			ld a, (.dmark+1)  
cad5 32 66 ee			ld (debug_mark+1),a  
cad8 3a e2 ca			ld a, (.dmark+2)  
cadb 32 67 ee			ld (debug_mark+2),a  
cade 18 03			jr .pastdmark  
cae0 ..			.dmark: db "EDc"  
cae3 f1			.pastdmark: pop af  
cae4			endm  
# End of macro DMARK
cae4						CALLMONITOR 
cae4 cd 6f ee			call debug_vector  
cae7				endm  
# End of macro CALLMONITOR
cae7					endif 
cae7 ed b0				ldir 
cae9			 
cae9			 
cae9 21 b9 e4				ld hl, os_input 
caec					;ld a, 0 
caec					;ld (hl),a 
caec 3a 58 ea				ld a,(f_cursor_ptr) 
caef 16 64				ld d, 100 
caf1 0e 00				ld c, 0 
caf3 1e 28				ld e, 40 
caf5 cd 17 8d				call input_str 
caf8					; TODO perhaps do a type check and wrap in quotes if not a number 
caf8 21 b9 e4				ld hl, os_input 
cafb					if DEBUG_FORTH_WORDS 
cafb						DMARK "ED1" 
cafb f5				push af  
cafc 3a 10 cb			ld a, (.dmark)  
caff 32 65 ee			ld (debug_mark),a  
cb02 3a 11 cb			ld a, (.dmark+1)  
cb05 32 66 ee			ld (debug_mark+1),a  
cb08 3a 12 cb			ld a, (.dmark+2)  
cb0b 32 67 ee			ld (debug_mark+2),a  
cb0e 18 03			jr .pastdmark  
cb10 ..			.dmark: db "ED1"  
cb13 f1			.pastdmark: pop af  
cb14			endm  
# End of macro DMARK
cb14						CALLMONITOR 
cb14 cd 6f ee			call debug_vector  
cb17				endm  
# End of macro CALLMONITOR
cb17					endif 
cb17 cd f3 9a				call forth_push_str 
cb1a					NEXTW 
cb1a c3 75 9e			jp macro_next 
cb1d				endm 
# End of macro NEXTW
cb1d			 
cb1d			.DEDIT: 
cb1d				CWHEAD .ENDKEY 44 "DEDIT" 5 WORD_FLAG_CODE 
cb1d 40				db WORD_SYS_CORE+44             
cb1e 7f cb			dw .ENDKEY            
cb20 06				db 5 + 1 
cb21 .. 00			db "DEDIT",0              
cb27				endm 
# End of macro CWHEAD
cb27			; | DEDIT ( ptr --  ) Takes an address for direct editing in memory. | DONE 
cb27			 
cb27					; TODO does not copy from stack 
cb27					if DEBUG_FORTH_WORDS_KEY 
cb27						DMARK "DED" 
cb27 f5				push af  
cb28 3a 3c cb			ld a, (.dmark)  
cb2b 32 65 ee			ld (debug_mark),a  
cb2e 3a 3d cb			ld a, (.dmark+1)  
cb31 32 66 ee			ld (debug_mark+1),a  
cb34 3a 3e cb			ld a, (.dmark+2)  
cb37 32 67 ee			ld (debug_mark+2),a  
cb3a 18 03			jr .pastdmark  
cb3c ..			.dmark: db "DED"  
cb3f f1			.pastdmark: pop af  
cb40			endm  
# End of macro DMARK
cb40						CALLMONITOR 
cb40 cd 6f ee			call debug_vector  
cb43				endm  
# End of macro CALLMONITOR
cb43					endif 
cb43			 
cb43					;FORTH_DSP 
cb43					FORTH_DSP_VALUEHL 
cb43 cd 8a 9c			call macro_dsp_valuehl 
cb46				endm 
# End of macro FORTH_DSP_VALUEHL
cb46			;		inc hl    ; TODO do type check 
cb46			 
cb46			;		call get_word_hl 
cb46 e5					push hl 
cb47 e5					push hl 
cb48					FORTH_DSP_POP 
cb48 cd 42 9d			call macro_forth_dsp_pop 
cb4b				endm 
# End of macro FORTH_DSP_POP
cb4b e1					pop hl 
cb4c					if DEBUG_FORTH_WORDS 
cb4c						DMARK "EDp" 
cb4c f5				push af  
cb4d 3a 61 cb			ld a, (.dmark)  
cb50 32 65 ee			ld (debug_mark),a  
cb53 3a 62 cb			ld a, (.dmark+1)  
cb56 32 66 ee			ld (debug_mark+1),a  
cb59 3a 63 cb			ld a, (.dmark+2)  
cb5c 32 67 ee			ld (debug_mark+2),a  
cb5f 18 03			jr .pastdmark  
cb61 ..			.dmark: db "EDp"  
cb64 f1			.pastdmark: pop af  
cb65			endm  
# End of macro DMARK
cb65						CALLMONITOR 
cb65 cd 6f ee			call debug_vector  
cb68				endm  
# End of macro CALLMONITOR
cb68					endif 
cb68				;	ld a, 0 
cb68 cd 50 90				call strlenz 
cb6b 23					inc hl 
cb6c			 
cb6c 06 00				ld b, 0 
cb6e 4d					ld c, l 
cb6f			 
cb6f e1					pop hl 
cb70			 
cb70					;ld a, 0 
cb70					;ld (hl),a 
cb70 3a 58 ea				ld a,(f_cursor_ptr) 
cb73 16 64				ld d, 100 
cb75 0e 00				ld c, 0 
cb77 1e 28				ld e, 40 
cb79 cd 17 8d				call input_str 
cb7c					; TODO perhaps do a type check and wrap in quotes if not a number 
cb7c					NEXTW 
cb7c c3 75 9e			jp macro_next 
cb7f				endm 
# End of macro NEXTW
cb7f			 
cb7f			 
cb7f			.ENDKEY: 
cb7f			; eof 
cb7f			 
# End of file forth_words_key.asm
cb7f			include "forth_words_const.asm" 
cb7f			 
cb7f			; | ## Constants (i.e. Useful memory addresses that can set or get features) 
cb7f			 
cb7f			 
cb7f			.SPITIME: 
cb7f				CWHEAD .VA 99 "SPITIME" 7 WORD_FLAG_CODE 
cb7f 77				db WORD_SYS_CORE+99             
cb80 94 cb			dw .VA            
cb82 08				db 7 + 1 
cb83 .. 00			db "SPITIME",0              
cb8b				endm 
# End of macro CWHEAD
cb8b			; | SPITIME ( -- u1 )   Pushes address of the SPI pulse counter/delay to stack | DONE 
cb8b			; 
cb8b			; | | If using BANK devices then leave as is. 
cb8b			; | | Only really useful for the CARTDEV where other devices may be far too slow. In particular 
cb8b			; | | the multiplexing of the PicoSPINet addon which might not be running fast enough for all of the nodes 
cb8b			 
cb8b 21 5e ea				ld hl, spi_clktime  
cb8e cd 85 9a				call forth_push_numhl 
cb91			 
cb91					NEXTW 
cb91 c3 75 9e			jp macro_next 
cb94				endm 
# End of macro NEXTW
cb94			 
cb94			 
cb94			.VA: 
cb94				CWHEAD .SYMBOL 99 "VA" 2 WORD_FLAG_CODE 
cb94 77				db WORD_SYS_CORE+99             
cb95 a4 cb			dw .SYMBOL            
cb97 03				db 2 + 1 
cb98 .. 00			db "VA",0              
cb9b				endm 
# End of macro CWHEAD
cb9b			; | VA ( -- u1 )   Pushes address of block of memory used for v1..5 | DONE 
cb9b 21 22 ea				ld hl, cli_var_array 
cb9e cd 85 9a				call forth_push_numhl 
cba1			 
cba1					NEXTW 
cba1 c3 75 9e			jp macro_next 
cba4				endm 
# End of macro NEXTW
cba4			 
cba4			.SYMBOL: 
cba4				CWHEAD .ENDCONST 99 "SYMBOL" 6 WORD_FLAG_CODE 
cba4 77				db WORD_SYS_CORE+99             
cba5 ae cc			dw .ENDCONST            
cba7 07				db 6 + 1 
cba8 .. 00			db "SYMBOL",0              
cbaf				endm 
# End of macro CWHEAD
cbaf			; | SYMBOL ( u1 -- )  Get the address of a system symbol from a look up table to TOS  | DONE 
cbaf			; | 
cbaf			; | | The value is the number reference and the final address is pushed to stack 
cbaf			 
cbaf			; | | ``` 
cbaf			; | | dw sym_table 
cbaf			; | | dw nmi_vector 
cbaf			; | | dw cli_autodisplay 
cbaf			; | | dw cli_data_sp 
cbaf			; | | dw cli_data_stack 
cbaf			; | | dw cli_loop_sp 
cbaf			; | | dw cli_loop_stack 
cbaf			; | | dw cli_var_array 
cbaf			; | | dw cursor_col 
cbaf			; | | dw cursor_ptr 
cbaf			; | | ; 10 
cbaf			; | | dw cursor_row 
cbaf			; | | dw debug_mark 
cbaf			; | | dw display_fb0 
cbaf			; | | dw display_fb1 
cbaf			; | | dw display_fb2 
cbaf			; | | dw display_fb3 
cbaf			; | | dw display_fb_active 
cbaf			; | | dw execscratch 
cbaf			; | | dw f_cursor_ptr 
cbaf			; | | dw hardware_word 
cbaf			; | | ;20 
cbaf			; | | dw input_at_cursor 
cbaf			; | | dw input_at_pos 
cbaf			; | | dw input_cur_flash 
cbaf			; | | dw input_cur_onoff 
cbaf			; | | dw input_cursor 
cbaf			; | | dw input_display_size 
cbaf			; | | dw input_len 
cbaf			; | | dw input_ptr 
cbaf			; | | dw input_size 
cbaf			; | | dw input_start 
cbaf			; | | ; 30 
cbaf			; | | dw input_str 
cbaf			; | | dw input_under_cursor 
cbaf			; | | dw os_cli_cmd 
cbaf			; | | dw os_cur_ptr 
cbaf			; | | dw os_current_i 
cbaf			; | | dw os_input 
cbaf			; | | dw os_last_cmd 
cbaf			; | | dw os_last_new_uword 
cbaf			; | | dw debug_vector 
cbaf			; | | dw os_view_hl 
cbaf			; | | ;40 
cbaf			; | | dw os_word_scratch 
cbaf			; | | dw portbctl 
cbaf			; | | dw portbdata 
cbaf			; | | dw spi_cartdev 
cbaf			; | | dw spi_cartdev2 
cbaf			; | | dw spi_clktime 
cbaf			; | | dw spi_device 
cbaf			; | | dw spi_device_id 
cbaf			; | | dw spi_portbyte 
cbaf			; | | dw stackstore 
cbaf			; | | ; 50 
cbaf			; | | if STORAGE_SE 
cbaf			; | | dw storage_actl 
cbaf			; | | dw storage_adata 
cbaf			; | | else 
cbaf			; | | dw 0 
cbaf			; | | dw 0 
cbaf			; | | endif 
cbaf			; | | dw storage_append 
cbaf			; | | if STORAGE_SE 
cbaf			; | | dw storage_bctl 
cbaf			; | | else 
cbaf			; | | dw 0 
cbaf			; | | endif 
cbaf			; | | dw store_bank_active 
cbaf			; | | dw store_filecache 
cbaf			; | | dw store_longread 
cbaf			; | | dw store_openaddr 
cbaf			; | | dw store_openext 
cbaf			; | | dw store_openmaxext 
cbaf			; | | ; 60 
cbaf			; | | dw store_page 
cbaf			; | | dw store_readbuf 
cbaf			; | | dw store_readcont 
cbaf			; | | dw store_readptr 
cbaf			; | | dw store_tmpext 
cbaf			; | | dw store_tmpid 
cbaf			; | | dw store_tmppageid 
cbaf			; | | dw malloc 
cbaf			; | | dw free 
cbaf			; | | dw cin 
cbaf			; | | ; 70 
cbaf			; | | dw cin_wait 
cbaf			; | | dw forth_push_numhl 
cbaf			; | | dw forth_push_str 
cbaf			; | | ``` 
cbaf			 
cbaf					if DEBUG_FORTH_WORDS_KEY 
cbaf						DMARK "SYM" 
cbaf f5				push af  
cbb0 3a c4 cb			ld a, (.dmark)  
cbb3 32 65 ee			ld (debug_mark),a  
cbb6 3a c5 cb			ld a, (.dmark+1)  
cbb9 32 66 ee			ld (debug_mark+1),a  
cbbc 3a c6 cb			ld a, (.dmark+2)  
cbbf 32 67 ee			ld (debug_mark+2),a  
cbc2 18 03			jr .pastdmark  
cbc4 ..			.dmark: db "SYM"  
cbc7 f1			.pastdmark: pop af  
cbc8			endm  
# End of macro DMARK
cbc8						CALLMONITOR 
cbc8 cd 6f ee			call debug_vector  
cbcb				endm  
# End of macro CALLMONITOR
cbcb					endif 
cbcb			 
cbcb					FORTH_DSP_VALUEHL 
cbcb cd 8a 9c			call macro_dsp_valuehl 
cbce				endm 
# End of macro FORTH_DSP_VALUEHL
cbce			 
cbce 7d					ld a, l     
cbcf			 
cbcf			 
cbcf					if DEBUG_FORTH_WORDS 
cbcf						DMARK "SY1" 
cbcf f5				push af  
cbd0 3a e4 cb			ld a, (.dmark)  
cbd3 32 65 ee			ld (debug_mark),a  
cbd6 3a e5 cb			ld a, (.dmark+1)  
cbd9 32 66 ee			ld (debug_mark+1),a  
cbdc 3a e6 cb			ld a, (.dmark+2)  
cbdf 32 67 ee			ld (debug_mark+2),a  
cbe2 18 03			jr .pastdmark  
cbe4 ..			.dmark: db "SY1"  
cbe7 f1			.pastdmark: pop af  
cbe8			endm  
# End of macro DMARK
cbe8						CALLMONITOR 
cbe8 cd 6f ee			call debug_vector  
cbeb				endm  
# End of macro CALLMONITOR
cbeb					endif 
cbeb					 
cbeb f5					push af	 
cbec					FORTH_DSP_POP 
cbec cd 42 9d			call macro_forth_dsp_pop 
cbef				endm 
# End of macro FORTH_DSP_POP
cbef f1					pop af 
cbf0			 
cbf0 cb 27				sla a  
cbf2				 
cbf2					 
cbf2					if DEBUG_FORTH_WORDS 
cbf2						DMARK "SY" 
cbf2 f5				push af  
cbf3 3a 07 cc			ld a, (.dmark)  
cbf6 32 65 ee			ld (debug_mark),a  
cbf9 3a 08 cc			ld a, (.dmark+1)  
cbfc 32 66 ee			ld (debug_mark+1),a  
cbff 3a 09 cc			ld a, (.dmark+2)  
cc02 32 67 ee			ld (debug_mark+2),a  
cc05 18 02			jr .pastdmark  
cc07 ..			.dmark: db "SY"  
cc09 f1			.pastdmark: pop af  
cc0a			endm  
# End of macro DMARK
cc0a						CALLMONITOR 
cc0a cd 6f ee			call debug_vector  
cc0d				endm  
# End of macro CALLMONITOR
cc0d					endif 
cc0d			 
cc0d 21 1c cc				ld hl, sym_table 
cc10 cd ea 8c				call addatohl 
cc13 cd f7 9d				call loadwordinhl 
cc16 cd 85 9a				call forth_push_numhl 
cc19			 
cc19			 
cc19				       NEXTW 
cc19 c3 75 9e			jp macro_next 
cc1c				endm 
# End of macro NEXTW
cc1c			 
cc1c			sym_table: 
cc1c			 
cc1c			; 0 
cc1c 1c cc		dw sym_table 
cc1e 72 ee		dw nmi_vector 
cc20 36 ea		dw cli_autodisplay 
cc22 e8 e9		dw cli_data_sp 
cc24 22 e8		dw cli_data_stack 
cc26 ea e9		dw cli_loop_sp 
cc28 24 e9		dw cli_loop_stack 
cc2a 22 ea		dw cli_var_array 
cc2c bf eb		dw cursor_col 
cc2e bd eb		dw cursor_ptr 
cc30			; 10 
cc30 be eb		dw cursor_row 
cc32 65 ee		dw debug_mark 
cc34 ab ed		dw display_fb0 
cc36 0a ed		dw display_fb1 
cc38 c8 eb		dw display_fb2 
cc3a 69 ec		dw display_fb3 
cc3c c6 eb		dw display_fb_active 
cc3e ba e3		dw execscratch 
cc40 58 ea		dw f_cursor_ptr 
cc42 75 ee		dw hardware_word 
cc44			;20 
cc44 5c ee		dw input_at_cursor 
cc46 5e ee		dw input_at_pos 
cc48 5a ee		dw input_cur_flash 
cc4a 59 ee		dw input_cur_onoff 
cc4c 4f ee		dw input_cursor 
cc4e 5f ee		dw input_display_size 
cc50 54 ee		dw input_len 
cc52 63 ee		dw input_ptr 
cc54 60 ee		dw input_size 
cc56 61 ee		dw input_start 
cc58			; 30 
cc58 17 8d		dw input_str 
cc5a 5d ee		dw input_under_cursor 
cc5c e2 e5		dw os_cli_cmd 
cc5e de e5		dw os_cur_ptr 
cc60 e0 e5		dw os_current_i 
cc62 b9 e4		dw os_input 
cc64 e1 e6		dw os_last_cmd 
cc66 b8 e5		dw os_last_new_uword 
cc68 6f ee		dw debug_vector 
cc6a 9d e2		dw os_view_hl 
cc6c			;40 
cc6c c0 e5		dw os_word_scratch 
cc6e c3 00		dw portbctl 
cc70 c1 00		dw portbdata 
cc72 5d ea		dw spi_cartdev 
cc74 5c ea		dw spi_cartdev2 
cc76 5e ea		dw spi_clktime 
cc78 5a ea		dw spi_device 
cc7a 59 ea		dw spi_device_id 
cc7c 5b ea		dw spi_portbyte 
cc7e a1 eb		dw stackstore 
cc80			; 50 
cc80			if STORAGE_SE 
cc80			dw storage_actl 
cc80			dw storage_adata 
cc80			else 
cc80 00 00		dw 0 
cc82 00 00		dw 0 
cc84			endif 
cc84 77 88		dw storage_append 
cc86			if STORAGE_SE 
cc86			dw storage_bctl 
cc86			else 
cc86 00 00		dw 0 
cc88			endif 
cc88 8d eb		dw store_bank_active 
cc8a 61 ea		dw store_filecache 
cc8c 6f ea		dw store_longread 
cc8e 65 ea		dw store_openaddr 
cc90 64 ea		dw store_openext 
cc92 63 ea		dw store_openmaxext 
cc94			; 60 
cc94 74 ea		dw store_page 
cc96 70 ea		dw store_readbuf 
cc98 67 ea		dw store_readcont 
cc9a 72 ea		dw store_readptr 
cc9c 67 ea		dw store_tmpext 
cc9e 68 ea		dw store_tmpid 
cca0 5f ea		dw store_tmppageid 
cca2 c5 90		dw malloc 
cca4 8f 91		dw free 
cca6 a7 e0		dw cin 
cca8			; 70 
cca8 a1 e0		dw cin_wait 
ccaa 85 9a		dw forth_push_numhl 
ccac f3 9a		dw forth_push_str 
ccae			 
ccae			 
ccae			.ENDCONST: 
ccae			 
ccae			; eof 
ccae			 
ccae			 
# End of file forth_words_const.asm
ccae			 
ccae			if STORAGE_SE 
ccae			   	include "forth_words_storage.asm" 
ccae			endif 
ccae				include "forth_words_device.asm" 
ccae			; Device related words 
ccae			 
ccae			; | ## Device Words 
ccae			 
ccae			;if SOUND_ENABLE 
ccae			;.NOTE: 
ccae			;	CWHEAD .AFTERSOUND 31 "NOTE" 4 WORD_FLAG_CODE 
ccae			;; NOTE ( ud uf --  )  Plays a note of frequency uf for the duration of ud millseconds  TODO 
ccae			;		if DEBUG_FORTH_WORDS_KEY 
ccae			;			DMARK "NTE" 
ccae			;			CALLMONITOR 
ccae			;		endif 
ccae			; 
ccae			;	 
ccae			; 
ccae			;		NEXTW 
ccae			;.AFTERSOUND: 
ccae			;endif 
ccae			 
ccae			 
ccae			USE_GPIO: equ 0 
ccae			 
ccae			if USE_GPIO 
ccae			.GP1: 
ccae				CWHEAD .GP2 31 "IOIN" 4 WORD_FLAG_CODE 
ccae			;  IOIN ( u1 -- u )    Perform a GPIO read of pin u1 and push result   
ccae					NEXTW 
ccae			.GP2: 
ccae				CWHEAD .GP3 31 "IOOUT" 5 WORD_FLAG_CODE 
ccae			;  IOOUT ( u1 u2 --  )    Perform a GPIO write of pin u1 with pin set to 0 or 1 in u2   
ccae			 
ccae					NEXTW 
ccae			 
ccae			.GP3: 
ccae				CWHEAD .GP4 31 "IOBYTE" 5 WORD_FLAG_CODE 
ccae			;  IOBYTE ( u1 --  )    Perform a GPIO write of byte u1   
ccae			 
ccae					NEXTW 
ccae			 
ccae			.GP4: 
ccae				CWHEAD .SIN 31 "IOSET" 5 WORD_FLAG_CODE 
ccae			;  IOSET ( u1 --  )    Setup GPIO pins for I/O direction. Bit is set for write else read pin   
ccae			 
ccae					NEXTW 
ccae			.SIN: 
ccae			 
ccae			 
ccae			endif 
ccae			 
ccae			 
ccae				CWHEAD .SOUT 31 "IN" 2 WORD_FLAG_CODE 
ccae 33				db WORD_SYS_CORE+31             
ccaf e3 cc			dw .SOUT            
ccb1 03				db 2 + 1 
ccb2 .. 00			db "IN",0              
ccb5				endm 
# End of macro CWHEAD
ccb5			; | IN ( u1 -- u )    Perform Z80 IN with u1 being the port number. Push result to TOS | TO TEST 
ccb5					if DEBUG_FORTH_WORDS_KEY 
ccb5						DMARK "IN." 
ccb5 f5				push af  
ccb6 3a ca cc			ld a, (.dmark)  
ccb9 32 65 ee			ld (debug_mark),a  
ccbc 3a cb cc			ld a, (.dmark+1)  
ccbf 32 66 ee			ld (debug_mark+1),a  
ccc2 3a cc cc			ld a, (.dmark+2)  
ccc5 32 67 ee			ld (debug_mark+2),a  
ccc8 18 03			jr .pastdmark  
ccca ..			.dmark: db "IN."  
cccd f1			.pastdmark: pop af  
ccce			endm  
# End of macro DMARK
ccce						CALLMONITOR 
ccce cd 6f ee			call debug_vector  
ccd1				endm  
# End of macro CALLMONITOR
ccd1					endif 
ccd1					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
ccd1 cd 8a 9c			call macro_dsp_valuehl 
ccd4				endm 
# End of macro FORTH_DSP_VALUEHL
ccd4			 
ccd4 e5					push hl 
ccd5			 
ccd5					; destroy value TOS 
ccd5			 
ccd5					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
ccd5 cd 42 9d			call macro_forth_dsp_pop 
ccd8				endm 
# End of macro FORTH_DSP_POP
ccd8			 
ccd8					; one value on hl get other one back 
ccd8			 
ccd8 c1					pop bc 
ccd9			 
ccd9					; do the sub 
ccd9			;		ex de, hl 
ccd9			 
ccd9 ed 68				in l,(c) 
ccdb			 
ccdb					; save it 
ccdb			 
ccdb 26 00				ld h,0 
ccdd			 
ccdd					; TODO push value back onto stack for another op etc 
ccdd			 
ccdd cd 85 9a				call forth_push_numhl 
cce0					NEXTW 
cce0 c3 75 9e			jp macro_next 
cce3				endm 
# End of macro NEXTW
cce3			.SOUT: 
cce3				CWHEAD .SPIO 32 "OUT" 3 WORD_FLAG_CODE 
cce3 34				db WORD_SYS_CORE+32             
cce4 36 cd			dw .SPIO            
cce6 04				db 3 + 1 
cce7 .. 00			db "OUT",0              
cceb				endm 
# End of macro CWHEAD
cceb			; | OUT ( u1 u2 -- ) Perform Z80 OUT to port u2 sending byte u1 | DONE 
cceb					if DEBUG_FORTH_WORDS_KEY 
cceb						DMARK "OUT" 
cceb f5				push af  
ccec 3a 00 cd			ld a, (.dmark)  
ccef 32 65 ee			ld (debug_mark),a  
ccf2 3a 01 cd			ld a, (.dmark+1)  
ccf5 32 66 ee			ld (debug_mark+1),a  
ccf8 3a 02 cd			ld a, (.dmark+2)  
ccfb 32 67 ee			ld (debug_mark+2),a  
ccfe 18 03			jr .pastdmark  
cd00 ..			.dmark: db "OUT"  
cd03 f1			.pastdmark: pop af  
cd04			endm  
# End of macro DMARK
cd04						CALLMONITOR 
cd04 cd 6f ee			call debug_vector  
cd07				endm  
# End of macro CALLMONITOR
cd07					endif 
cd07			 
cd07					; get port 
cd07			 
cd07					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
cd07 cd 8a 9c			call macro_dsp_valuehl 
cd0a				endm 
# End of macro FORTH_DSP_VALUEHL
cd0a			 
cd0a e5					push hl 
cd0b			 
cd0b					; destroy value TOS 
cd0b			 
cd0b					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
cd0b cd 42 9d			call macro_forth_dsp_pop 
cd0e				endm 
# End of macro FORTH_DSP_POP
cd0e			 
cd0e					; get byte to send 
cd0e			 
cd0e					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
cd0e cd 8a 9c			call macro_dsp_valuehl 
cd11				endm 
# End of macro FORTH_DSP_VALUEHL
cd11			 
cd11			;		push hl 
cd11			 
cd11					; destroy value TOS 
cd11			 
cd11					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
cd11 cd 42 9d			call macro_forth_dsp_pop 
cd14				endm 
# End of macro FORTH_DSP_POP
cd14			 
cd14					; one value on hl get other one back 
cd14			 
cd14			;		pop hl 
cd14			 
cd14 c1					pop bc 
cd15			 
cd15					if DEBUG_FORTH_WORDS 
cd15						DMARK "OUT" 
cd15 f5				push af  
cd16 3a 2a cd			ld a, (.dmark)  
cd19 32 65 ee			ld (debug_mark),a  
cd1c 3a 2b cd			ld a, (.dmark+1)  
cd1f 32 66 ee			ld (debug_mark+1),a  
cd22 3a 2c cd			ld a, (.dmark+2)  
cd25 32 67 ee			ld (debug_mark+2),a  
cd28 18 03			jr .pastdmark  
cd2a ..			.dmark: db "OUT"  
cd2d f1			.pastdmark: pop af  
cd2e			endm  
# End of macro DMARK
cd2e						CALLMONITOR 
cd2e cd 6f ee			call debug_vector  
cd31				endm  
# End of macro CALLMONITOR
cd31					endif 
cd31			 
cd31 ed 69				out (c), l 
cd33			 
cd33					NEXTW 
cd33 c3 75 9e			jp macro_next 
cd36				endm 
# End of macro NEXTW
cd36			 
cd36			 
cd36			.SPIO: 
cd36			 
cd36			if STORAGE_SE 
cd36				CWHEAD .SPICEH 61 "SPICEL" 6 WORD_FLAG_CODE 
cd36			; | SPICEL ( -- ) Set SPI CE low for the currently selected device |  DONE 
cd36			 
cd36					call spi_ce_low 
cd36			    NEXTW 
cd36			 
cd36			.SPICEH: 
cd36				CWHEAD .SPIOb 61 "SPICEH" 6 WORD_FLAG_CODE 
cd36			; | SPICEH ( -- ) Set SPI CE high for the currently selected device |  DONE 
cd36			 
cd36					call spi_ce_high 
cd36			    NEXTW 
cd36			 
cd36			 
cd36			.SPIOb: 
cd36			 
cd36				CWHEAD .SPII 61 "SPIO" 4 WORD_FLAG_CODE 
cd36			; | SPIO ( u1 -- ) Send byte u1 to SPI  |  DONE 
cd36			 
cd36					if DEBUG_FORTH_WORDS_KEY 
cd36						DMARK "SPo" 
cd36						CALLMONITOR 
cd36					endif 
cd36					; get port 
cd36			 
cd36			 
cd36					; get byte to send 
cd36			 
cd36					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
cd36			 
cd36			;		push hl    ; u1  
cd36			 
cd36					; destroy value TOS 
cd36			 
cd36					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
cd36			 
cd36					; one value on hl get other one back 
cd36			 
cd36			;		pop hl   ; u2 - addr 
cd36			 
cd36					; TODO Send SPI byte 
cd36			 
cd36			;		push hl 
cd36			;		call spi_ce_low 
cd36			;		pop hl 
cd36					ld a, l 
cd36					call spi_send_byte 
cd36			;		call spi_ce_high 
cd36			 
cd36					NEXTW 
cd36			 
cd36			.SPII: 
cd36				CWHEAD .SESEL 62 "SPII" 5 WORD_FLAG_CODE 
cd36			; | SPII ( -- u1 ) Get a byte from SPI  | DONE 
cd36					if DEBUG_FORTH_WORDS_KEY 
cd36						DMARK "SPi" 
cd36						CALLMONITOR 
cd36					endif 
cd36			 
cd36					; TODO Get SPI byte 
cd36			 
cd36					call spi_read_byte 
cd36			 
cd36					if DEBUG_FORTH_WORDS 
cd36						DMARK "Si2" 
cd36						CALLMONITOR 
cd36					endif 
cd36					ld h, 0 
cd36					ld l, a 
cd36					if DEBUG_FORTH_WORDS 
cd36						DMARK "Si3" 
cd36						CALLMONITOR 
cd36					endif 
cd36					call forth_push_numhl 
cd36			 
cd36					NEXTW 
cd36			 
cd36			 
cd36			 
cd36			.SESEL: 
cd36				CWHEAD .CARTDEV 82 "BANK" 4 WORD_FLAG_CODE 
cd36			; | BANK ( u1 -- ) Select Serial EEPROM Bank Device at bank address u1 1-5 (disables CARTDEV). Set to zero to disable storage. | DONE 
cd36					if DEBUG_FORTH_WORDS_KEY 
cd36						DMARK "BNK" 
cd36						CALLMONITOR 
cd36					endif 
cd36			 
cd36					ld a, 255 
cd36					ld (spi_cartdev), a 
cd36			 
cd36					; get bank 
cd36			 
cd36					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
cd36			 
cd36			;		push hl 
cd36			 
cd36					; destroy value TOS 
cd36			 
cd36					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
cd36			 
cd36					; one value on hl get other one back 
cd36			 
cd36			;		pop hl 
cd36			 
cd36			 
cd36					ld c, SPI_CE_HIGH 
cd36					ld b, '0'    ; human readable bank number 
cd36			 
cd36					ld a, l 
cd36			 
cd36					if DEBUG_FORTH_WORDS 
cd36						DMARK "BNK" 
cd36						CALLMONITOR 
cd36					endif 
cd36			 
cd36					; active low 
cd36			 
cd36					cp 0 
cd36					jr z, .bset 
cd36					cp 1 
cd36					jr nz, .b2 
cd36					res 0, c 
cd36					ld b, '1'    ; human readable bank number 
cd36			.b2:		cp 2 
cd36					jr nz, .b3 
cd36					res 1, c 
cd36					ld b, '2'    ; human readable bank number 
cd36			.b3:		cp 3 
cd36					jr nz, .b4 
cd36					res 2, c 
cd36					ld b, '3'    ; human readable bank number 
cd36			.b4:		cp 4 
cd36					jr nz, .b5 
cd36					res 3, c 
cd36					ld b, '4'    ; human readable bank number 
cd36			.b5:		cp 5 
cd36					jr nz, .bset 
cd36					res 4, c 
cd36					ld b, '5'    ; human readable bank number 
cd36			 
cd36			.bset: 
cd36					ld a, c 
cd36					ld (spi_device),a 
cd36					ld a, b 
cd36					ld (spi_device_id),a 
cd36					if DEBUG_FORTH_WORDS 
cd36						DMARK "BN2" 
cd36						CALLMONITOR 
cd36					endif 
cd36			 
cd36					; set default SPI clk pulse time as disabled for BANK use 
cd36			 
cd36					ld a, 0 
cd36					ld (spi_clktime), a 
cd36			 
cd36					NEXTW 
cd36			 
cd36			.CARTDEV: 
cd36				CWHEAD .ENDDEVICE 82 "CARTDEV" 7 WORD_FLAG_CODE 
cd36			; | CARTDEV ( u1 -- ) Select cart device 1-8 (Disables BANK). Set to zero to disable devices. |  DONE 
cd36					if DEBUG_FORTH_WORDS_KEY 
cd36						DMARK "CDV" 
cd36						CALLMONITOR 
cd36					endif 
cd36			 
cd36					; disable se storage bank selection 
cd36			 
cd36					ld a, SPI_CE_HIGH		; ce high 
cd36					ld (spi_device), a 
cd36			 
cd36					; get bank 
cd36			 
cd36					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
cd36			 
cd36			;		push hl 
cd36			 
cd36					; destroy value TOS 
cd36			 
cd36					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
cd36			 
cd36					; one value on hl get other one back 
cd36			 
cd36			;		pop hl 
cd36			 
cd36					; active low 
cd36			 
cd36					ld c, 255 
cd36			 
cd36					ld a, l 
cd36					if DEBUG_FORTH_WORDS 
cd36						DMARK "CDV" 
cd36						CALLMONITOR 
cd36					endif 
cd36					cp 0 
cd36					jr z, .cset 
cd36					cp 1 
cd36					jr nz, .c2 
cd36					res 0, c 
cd36			.c2:		cp 2 
cd36					jr nz, .c3 
cd36					res 1, c 
cd36			.c3:		cp 3 
cd36					jr nz, .c4 
cd36					res 2, c 
cd36			.c4:		cp 4 
cd36					jr nz, .c5 
cd36					res 3, c 
cd36			.c5:		cp 5 
cd36					jr nz, .c6 
cd36					res 4, c 
cd36			.c6:		cp 6 
cd36					jr nz, .c7 
cd36					res 5, c 
cd36			.c7:		cp 7 
cd36					jr nz, .c8 
cd36					res 6, c 
cd36			.c8:		cp 8 
cd36					jr nz, .cset 
cd36					res 7, c 
cd36			.cset:		ld a, c 
cd36					ld (spi_cartdev),a 
cd36			 
cd36					if DEBUG_FORTH_WORDS 
cd36						DMARK "CD2" 
cd36						CALLMONITOR 
cd36					endif 
cd36			 
cd36					; set default SPI clk pulse time as 10ms for CARTDEV use 
cd36			 
cd36					ld a, $0a 
cd36					ld (spi_clktime), a 
cd36					NEXTW 
cd36			endif 
cd36			 
cd36			.ENDDEVICE: 
cd36			; eof 
cd36			 
# End of file forth_words_device.asm
cd36			 
cd36			; var handler 
cd36			 
cd36			 
cd36			.VARS: 
cd36				CWHEAD .V0 99 "VAR" 3 WORD_FLAG_CODE 
cd36 77				db WORD_SYS_CORE+99             
cd37 e7 cd			dw .V0            
cd39 04				db 3 + 1 
cd3a .. 00			db "VAR",0              
cd3e				endm 
# End of macro CWHEAD
cd3e			;| VAR ( u1 -- )  Get the address of the variable referenced on TOS  | TO TEST 
cd3e			;| 
cd3e			;| The variable name should consist of a single letter. e.g. "a" 
cd3e			;! If a full string is passed then only the first char is looked at 
cd3e			;| Any other char could exceed bounds checks!  
cd3e			 
cd3e					if DEBUG_FORTH_WORDS_KEY 
cd3e						DMARK "VAR" 
cd3e f5				push af  
cd3f 3a 53 cd			ld a, (.dmark)  
cd42 32 65 ee			ld (debug_mark),a  
cd45 3a 54 cd			ld a, (.dmark+1)  
cd48 32 66 ee			ld (debug_mark+1),a  
cd4b 3a 55 cd			ld a, (.dmark+2)  
cd4e 32 67 ee			ld (debug_mark+2),a  
cd51 18 03			jr .pastdmark  
cd53 ..			.dmark: db "VAR"  
cd56 f1			.pastdmark: pop af  
cd57			endm  
# End of macro DMARK
cd57						CALLMONITOR 
cd57 cd 6f ee			call debug_vector  
cd5a				endm  
# End of macro CALLMONITOR
cd5a					endif 
cd5a			 
cd5a					FORTH_DSP_VALUEHL 
cd5a cd 8a 9c			call macro_dsp_valuehl 
cd5d				endm 
# End of macro FORTH_DSP_VALUEHL
cd5d			 
cd5d 7e					ld a, (hl)    ; get first char on of the string 
cd5e			 
cd5e			 
cd5e					if DEBUG_FORTH_WORDS 
cd5e						DMARK "VR1" 
cd5e f5				push af  
cd5f 3a 73 cd			ld a, (.dmark)  
cd62 32 65 ee			ld (debug_mark),a  
cd65 3a 74 cd			ld a, (.dmark+1)  
cd68 32 66 ee			ld (debug_mark+1),a  
cd6b 3a 75 cd			ld a, (.dmark+2)  
cd6e 32 67 ee			ld (debug_mark+2),a  
cd71 18 03			jr .pastdmark  
cd73 ..			.dmark: db "VR1"  
cd76 f1			.pastdmark: pop af  
cd77			endm  
# End of macro DMARK
cd77						CALLMONITOR 
cd77 cd 6f ee			call debug_vector  
cd7a				endm  
# End of macro CALLMONITOR
cd7a					endif 
cd7a					 
cd7a f5					push af	 
cd7b					FORTH_DSP_POP 
cd7b cd 42 9d			call macro_forth_dsp_pop 
cd7e				endm 
# End of macro FORTH_DSP_POP
cd7e f1					pop af 
cd7f			 
cd7f					; convert to upper 
cd7f			 
cd7f cd 5f 8f				call to_upper 
cd82					if DEBUG_FORTH_WORDS 
cd82						DMARK "Vaa" 
cd82 f5				push af  
cd83 3a 97 cd			ld a, (.dmark)  
cd86 32 65 ee			ld (debug_mark),a  
cd89 3a 98 cd			ld a, (.dmark+1)  
cd8c 32 66 ee			ld (debug_mark+1),a  
cd8f 3a 99 cd			ld a, (.dmark+2)  
cd92 32 67 ee			ld (debug_mark+2),a  
cd95 18 03			jr .pastdmark  
cd97 ..			.dmark: db "Vaa"  
cd9a f1			.pastdmark: pop af  
cd9b			endm  
# End of macro DMARK
cd9b						CALLMONITOR 
cd9b cd 6f ee			call debug_vector  
cd9e				endm  
# End of macro CALLMONITOR
cd9e					endif 
cd9e 06 41				ld b, 'A' 
cda0 90					sub b			; set offset 
cda1					if DEBUG_FORTH_WORDS 
cda1						DMARK "Vbb" 
cda1 f5				push af  
cda2 3a b6 cd			ld a, (.dmark)  
cda5 32 65 ee			ld (debug_mark),a  
cda8 3a b7 cd			ld a, (.dmark+1)  
cdab 32 66 ee			ld (debug_mark+1),a  
cdae 3a b8 cd			ld a, (.dmark+2)  
cdb1 32 67 ee			ld (debug_mark+2),a  
cdb4 18 03			jr .pastdmark  
cdb6 ..			.dmark: db "Vbb"  
cdb9 f1			.pastdmark: pop af  
cdba			endm  
# End of macro DMARK
cdba						CALLMONITOR 
cdba cd 6f ee			call debug_vector  
cdbd				endm  
# End of macro CALLMONITOR
cdbd					endif 
cdbd cb 27				sla a  
cdbf				 
cdbf					 
cdbf					if DEBUG_FORTH_WORDS 
cdbf						DMARK "VR2" 
cdbf f5				push af  
cdc0 3a d4 cd			ld a, (.dmark)  
cdc3 32 65 ee			ld (debug_mark),a  
cdc6 3a d5 cd			ld a, (.dmark+1)  
cdc9 32 66 ee			ld (debug_mark+1),a  
cdcc 3a d6 cd			ld a, (.dmark+2)  
cdcf 32 67 ee			ld (debug_mark+2),a  
cdd2 18 03			jr .pastdmark  
cdd4 ..			.dmark: db "VR2"  
cdd7 f1			.pastdmark: pop af  
cdd8			endm  
# End of macro DMARK
cdd8						CALLMONITOR 
cdd8 cd 6f ee			call debug_vector  
cddb				endm  
# End of macro CALLMONITOR
cddb					endif 
cddb			 
cddb 21 ee e9				ld hl, cli_var_array2 
cdde cd ea 8c				call addatohl 
cde1 cd 85 9a				call forth_push_numhl 
cde4			 
cde4			 
cde4				       NEXTW 
cde4 c3 75 9e			jp macro_next 
cde7				endm 
# End of macro NEXTW
cde7			.V0: 
cde7				CWHEAD .V0Q 100 "V0!" 3 WORD_FLAG_CODE 
cde7 78				db WORD_SYS_CORE+100             
cde8 ff cd			dw .V0Q            
cdea 04				db 3 + 1 
cdeb .. 00			db "V0!",0              
cdef				endm 
# End of macro CWHEAD
cdef			;| V0! ( u1 -- )  Store value to v0  | DONE 
cdef			 
cdef					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
cdef cd 8a 9c			call macro_dsp_valuehl 
cdf2				endm 
# End of macro FORTH_DSP_VALUEHL
cdf2			 
cdf2 11 22 ea				ld de, cli_var_array 
cdf5			 
cdf5 eb					ex de, hl 
cdf6 73					ld (hl), e 
cdf7 23					inc hl 
cdf8 72					ld (hl), d 
cdf9			 
cdf9					; destroy value TOS 
cdf9			 
cdf9					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
cdf9 cd 42 9d			call macro_forth_dsp_pop 
cdfc				endm 
# End of macro FORTH_DSP_POP
cdfc			 
cdfc				       NEXTW 
cdfc c3 75 9e			jp macro_next 
cdff				endm 
# End of macro NEXTW
cdff			.V0Q: 
cdff				CWHEAD .V1S 101 "V0@" 3 WORD_FLAG_CODE 
cdff 79				db WORD_SYS_CORE+101             
ce00 10 ce			dw .V1S            
ce02 04				db 3 + 1 
ce03 .. 00			db "V0@",0              
ce07				endm 
# End of macro CWHEAD
ce07			;| V0@ ( --u )  Put value of v0 onto stack | DONE 
ce07 2a 22 ea				ld hl, (cli_var_array) 
ce0a cd 85 9a				call forth_push_numhl 
ce0d			 
ce0d				       NEXTW 
ce0d c3 75 9e			jp macro_next 
ce10				endm 
# End of macro NEXTW
ce10			.V1S: 
ce10				CWHEAD .V1Q 102 "V1!" 3 WORD_FLAG_CODE 
ce10 7a				db WORD_SYS_CORE+102             
ce11 28 ce			dw .V1Q            
ce13 04				db 3 + 1 
ce14 .. 00			db "V1!",0              
ce18				endm 
# End of macro CWHEAD
ce18			;| V1! ( u1 -- )  Store value to v1 | DONE 
ce18					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
ce18 cd 8a 9c			call macro_dsp_valuehl 
ce1b				endm 
# End of macro FORTH_DSP_VALUEHL
ce1b			 
ce1b 11 24 ea				ld de, cli_var_array+2 
ce1e				 
ce1e eb					ex de, hl 
ce1f 73					ld (hl), e 
ce20 23					inc hl 
ce21 72					ld (hl), d 
ce22			 
ce22					; destroy value TOS 
ce22			 
ce22					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
ce22 cd 42 9d			call macro_forth_dsp_pop 
ce25				endm 
# End of macro FORTH_DSP_POP
ce25				       NEXTW 
ce25 c3 75 9e			jp macro_next 
ce28				endm 
# End of macro NEXTW
ce28			.V1Q: 
ce28				CWHEAD .V2S 103 "V1@" 3 WORD_FLAG_CODE 
ce28 7b				db WORD_SYS_CORE+103             
ce29 39 ce			dw .V2S            
ce2b 04				db 3 + 1 
ce2c .. 00			db "V1@",0              
ce30				endm 
# End of macro CWHEAD
ce30			;| V1@ ( --u )  Put value of v1 onto stack | DONE 
ce30 2a 24 ea				ld hl, (cli_var_array+2) 
ce33 cd 85 9a				call forth_push_numhl 
ce36				       NEXTW 
ce36 c3 75 9e			jp macro_next 
ce39				endm 
# End of macro NEXTW
ce39			.V2S: 
ce39				CWHEAD .V2Q 104 "V2!" 3 WORD_FLAG_CODE 
ce39 7c				db WORD_SYS_CORE+104             
ce3a 51 ce			dw .V2Q            
ce3c 04				db 3 + 1 
ce3d .. 00			db "V2!",0              
ce41				endm 
# End of macro CWHEAD
ce41			;| V2! ( u1 -- )  Store value to v2 | DONE 
ce41					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
ce41 cd 8a 9c			call macro_dsp_valuehl 
ce44				endm 
# End of macro FORTH_DSP_VALUEHL
ce44			 
ce44 11 26 ea				ld de, cli_var_array+4 
ce47				 
ce47 eb					ex de, hl 
ce48 73					ld (hl), e 
ce49 23					inc hl 
ce4a 72					ld (hl), d 
ce4b			 
ce4b					; destroy value TOS 
ce4b			 
ce4b					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
ce4b cd 42 9d			call macro_forth_dsp_pop 
ce4e				endm 
# End of macro FORTH_DSP_POP
ce4e				       NEXTW 
ce4e c3 75 9e			jp macro_next 
ce51				endm 
# End of macro NEXTW
ce51			.V2Q: 
ce51				CWHEAD .V3S 105 "V2@" 3 WORD_FLAG_CODE 
ce51 7d				db WORD_SYS_CORE+105             
ce52 62 ce			dw .V3S            
ce54 04				db 3 + 1 
ce55 .. 00			db "V2@",0              
ce59				endm 
# End of macro CWHEAD
ce59			;| V2@ ( --u )  Put value of v2 onto stack | DONE 
ce59 2a 26 ea				ld hl, (cli_var_array+4) 
ce5c cd 85 9a				call forth_push_numhl 
ce5f				       NEXTW 
ce5f c3 75 9e			jp macro_next 
ce62				endm 
# End of macro NEXTW
ce62			.V3S: 
ce62				CWHEAD .V3Q 104 "V3!" 3 WORD_FLAG_CODE 
ce62 7c				db WORD_SYS_CORE+104             
ce63 7a ce			dw .V3Q            
ce65 04				db 3 + 1 
ce66 .. 00			db "V3!",0              
ce6a				endm 
# End of macro CWHEAD
ce6a			;| V3! ( u1 -- )  Store value to v3 | DONE 
ce6a					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
ce6a cd 8a 9c			call macro_dsp_valuehl 
ce6d				endm 
# End of macro FORTH_DSP_VALUEHL
ce6d			 
ce6d 11 28 ea				ld de, cli_var_array+6 
ce70				 
ce70 eb					ex de, hl 
ce71 73					ld (hl), e 
ce72 23					inc hl 
ce73 72					ld (hl), d 
ce74			 
ce74					; destroy value TOS 
ce74			 
ce74					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
ce74 cd 42 9d			call macro_forth_dsp_pop 
ce77				endm 
# End of macro FORTH_DSP_POP
ce77				       NEXTW 
ce77 c3 75 9e			jp macro_next 
ce7a				endm 
# End of macro NEXTW
ce7a			.V3Q: 
ce7a				CWHEAD .END 105 "V3@" 3 WORD_FLAG_CODE 
ce7a 7d				db WORD_SYS_CORE+105             
ce7b 8b ce			dw .END            
ce7d 04				db 3 + 1 
ce7e .. 00			db "V3@",0              
ce82				endm 
# End of macro CWHEAD
ce82			;| V3@ ( --u )  Put value of v3 onto stack | DONE 
ce82 2a 28 ea				ld hl, (cli_var_array+6) 
ce85 cd 85 9a				call forth_push_numhl 
ce88				       NEXTW 
ce88 c3 75 9e			jp macro_next 
ce8b				endm 
# End of macro NEXTW
ce8b			 
ce8b			 
ce8b			 
ce8b			 
ce8b			 
ce8b			; end of dict marker 
ce8b			 
ce8b 00			.END:    db WORD_SYS_END 
ce8c 00 00			dw 0 
ce8e 00				db 0 
ce8f			 
ce8f			; use to jp here for user dict words to save on macro expansion  
ce8f			 
ce8f			user_dict_next: 
ce8f				NEXTW 
ce8f c3 75 9e			jp macro_next 
ce92				endm 
# End of macro NEXTW
ce92			 
ce92			 
ce92			user_exec: 
ce92				;    ld hl, <word code> 
ce92				;    FORTH_RSP_NEXT - call macro_forth_rsp_next 
ce92				;    call forthexec 
ce92				;    jp user_dict_next   (NEXT) 
ce92			        ;    <word code bytes> 
ce92 eb				ex de, hl 
ce93 2a bc e5			ld hl,(os_tok_ptr) 
ce96				 
ce96				FORTH_RSP_NEXT 
ce96 cd 2c 9a			call macro_forth_rsp_next 
ce99				endm 
# End of macro FORTH_RSP_NEXT
ce99			 
ce99			if DEBUG_FORTH_UWORD 
ce99						DMARK "UEX" 
ce99 f5				push af  
ce9a 3a ae ce			ld a, (.dmark)  
ce9d 32 65 ee			ld (debug_mark),a  
cea0 3a af ce			ld a, (.dmark+1)  
cea3 32 66 ee			ld (debug_mark+1),a  
cea6 3a b0 ce			ld a, (.dmark+2)  
cea9 32 67 ee			ld (debug_mark+2),a  
ceac 18 03			jr .pastdmark  
ceae ..			.dmark: db "UEX"  
ceb1 f1			.pastdmark: pop af  
ceb2			endm  
# End of macro DMARK
ceb2				CALLMONITOR 
ceb2 cd 6f ee			call debug_vector  
ceb5				endm  
# End of macro CALLMONITOR
ceb5			endif 
ceb5			 
ceb5			 
ceb5			 
ceb5 eb				ex de, hl 
ceb6 22 bc e5			ld (os_tok_ptr), hl 
ceb9				 
ceb9				; Don't use next - Skips the first word in uword. 
ceb9			 
ceb9 c3 fe 9e			jp exec1 
cebc			;	NEXT 
cebc			 
cebc			 
cebc			; eof 
# End of file forth_wordsv4.asm
cebc			endif 
cebc			;;;;;;;;;;;;;; Debug code 
cebc			 
cebc			 
cebc			;if DEBUG_FORTH_PARSE 
cebc .. 00		.nowordfound: db "No match",0 
cec5 .. 00		.compword:	db "Comparing word ",0 
ced5 .. 00		.nextwordat:	db "Next word at",0 
cee2 .. 00		.charmatch:	db "Char match",0 
ceed			;endif 
ceed			if DEBUG_FORTH_JP 
ceed			.foundword:	db "Word match. Exec..",0 
ceed			endif 
ceed			;if DEBUG_FORTH_PUSH 
ceed .. 00		.enddict:	db "Dict end. Push.",0 
cefd .. 00		.push_str:	db "Pushing string",0 
cf0c .. 00		.push_num:	db "Pushing number",0 
cf1b .. 00		.data_sp:	db "SP:",0 
cf1f .. 00		.wordinhl:	db "Word in HL (2/0):",0 
cf31 .. 00		.wordinde:	db "Word in DE (3/0):",0 
cf43 .. 00		.wordinbc:	db "Word in BC (4/0):",0 
cf55			;endif 
cf55			;if DEBUG_FORTH_MALLOC 
cf55 .. 00		.push_malloc:	db "Malloc address",0 
cf64			;endif 
cf64			 
cf64			 
cf64			 
cf64			; display malloc address and current data stack pointer  
cf64			 
cf64			malloc_error: 
cf64 d5				push de 
cf65 f5				push af 
cf66 e5				push hl 
cf67 cd bd 8a			call clear_display 
cf6a 11 8a cf			ld de, .mallocerr 
cf6d 3e 00			ld a,0 
cf6f			;	ld de,os_word_scratch 
cf6f cd d0 8a			call str_at_display 
cf72 3e 11			ld a, display_row_1+17 
cf74 11 65 ee			ld de, debug_mark 
cf77 cd d0 8a			call str_at_display 
cf7a cd e0 8a			call update_display 
cf7d				;call break_point_state 
cf7d cd a1 e0			call cin_wait 
cf80			 
cf80			;	ld a, ' ' 
cf80			;	ld (os_view_disable), a 
cf80 cd f4 93			call bp_on 
cf83 e1				pop hl 
cf84 f1				pop af 
cf85 d1				pop de	 
cf86				CALLMONITOR 
cf86 cd 6f ee			call debug_vector  
cf89				endm  
# End of macro CALLMONITOR
cf89 c9				ret 
cf8a			 
cf8a .. 00		.mallocerr: 	db "Malloc Error",0 
cf97			;if DEBUG_FORTH_PUSH 
cf97			display_data_sp: 
cf97 f5				push af 
cf98			 
cf98				; see if disabled 
cf98			 
cf98			 
cf98 3a 6f ee			ld a, (debug_vector) 
cf9b fe c9			cp $C9  ; RET 
cf9d				;ld a, (os_view_disable) 
cf9d				;cp '*' 
cf9d 28 67			jr z, .skipdsp 
cf9f			 
cf9f e5				push hl 
cfa0 e5				push hl 
cfa1 e5			push hl 
cfa2 cd bd 8a			call clear_display 
cfa5 e1			pop hl 
cfa6 7c				ld a,h 
cfa7 21 c0 e5			ld hl, os_word_scratch 
cfaa cd f3 8e			call hexout 
cfad e1				pop hl 
cfae 7d				ld a,l 
cfaf 21 c2 e5			ld hl, os_word_scratch+2 
cfb2 cd f3 8e			call hexout 
cfb5 21 c4 e5			ld hl, os_word_scratch+4 
cfb8 3e 00			ld a,0 
cfba 77				ld (hl),a 
cfbb 11 c0 e5			ld de,os_word_scratch 
cfbe 3e 28				ld a, display_row_2 
cfc0 cd d0 8a				call str_at_display 
cfc3 11 1f cf			ld de, .wordinhl 
cfc6 3e 00			ld a, display_row_1 
cfc8			 
cfc8 cd d0 8a				call str_at_display 
cfcb 11 65 ee			ld de, debug_mark 
cfce 3e 11			ld a, display_row_1+17 
cfd0			 
cfd0 cd d0 8a				call str_at_display 
cfd3			 
cfd3				; display current data stack pointer 
cfd3 11 1b cf			ld de,.data_sp 
cfd6 3e 30				ld a, display_row_2 + 8 
cfd8 cd d0 8a				call str_at_display 
cfdb			 
cfdb 2a e8 e9			ld hl,(cli_data_sp) 
cfde e5				push hl 
cfdf 7c				ld a,h 
cfe0 21 c0 e5			ld hl, os_word_scratch 
cfe3 cd f3 8e			call hexout 
cfe6 e1				pop hl 
cfe7 7d				ld a,l 
cfe8 21 c2 e5			ld hl, os_word_scratch+2 
cfeb cd f3 8e			call hexout 
cfee 21 c4 e5			ld hl, os_word_scratch+4 
cff1 3e 00			ld a,0 
cff3 77				ld (hl),a 
cff4 11 c0 e5			ld de,os_word_scratch 
cff7 3e 33				ld a, display_row_2 + 11 
cff9 cd d0 8a				call str_at_display 
cffc			 
cffc			 
cffc cd e0 8a			call update_display 
cfff cd 00 8a			call delay1s 
d002 cd 00 8a			call delay1s 
d005 e1				pop hl 
d006			.skipdsp: 
d006 f1				pop af 
d007 c9				ret 
d008			 
d008			display_data_malloc: 
d008			 
d008 f5				push af 
d009 e5				push hl 
d00a e5				push hl 
d00b e5			push hl 
d00c cd bd 8a			call clear_display 
d00f e1			pop hl 
d010 7c				ld a,h 
d011 21 c0 e5			ld hl, os_word_scratch 
d014 cd f3 8e			call hexout 
d017 e1				pop hl 
d018 7d				ld a,l 
d019 21 c2 e5			ld hl, os_word_scratch+2 
d01c cd f3 8e			call hexout 
d01f 21 c4 e5			ld hl, os_word_scratch+4 
d022 3e 00			ld a,0 
d024 77				ld (hl),a 
d025 11 c0 e5			ld de,os_word_scratch 
d028 3e 28				ld a, display_row_2 
d02a cd d0 8a				call str_at_display 
d02d 11 55 cf			ld de, .push_malloc 
d030 3e 00			ld a, display_row_1 
d032			 
d032 cd d0 8a				call str_at_display 
d035			 
d035				; display current data stack pointer 
d035 11 1b cf			ld de,.data_sp 
d038 3e 30				ld a, display_row_2 + 8 
d03a cd d0 8a				call str_at_display 
d03d			 
d03d 2a e8 e9			ld hl,(cli_data_sp) 
d040 e5				push hl 
d041 7c				ld a,h 
d042 21 c0 e5			ld hl, os_word_scratch 
d045 cd f3 8e			call hexout 
d048 e1				pop hl 
d049 7d				ld a,l 
d04a 21 c2 e5			ld hl, os_word_scratch+2 
d04d cd f3 8e			call hexout 
d050 21 c4 e5			ld hl, os_word_scratch+4 
d053 3e 00			ld a,0 
d055 77				ld (hl),a 
d056 11 c0 e5			ld de,os_word_scratch 
d059 3e 33				ld a, display_row_2 + 11 
d05b cd d0 8a				call str_at_display 
d05e			 
d05e cd e0 8a			call update_display 
d061 cd 00 8a			call delay1s 
d064 cd 00 8a			call delay1s 
d067 e1				pop hl 
d068 f1				pop af 
d069 c9				ret 
d06a			;endif 
d06a			 
d06a			include "forth_autostart.asm" 
d06a			; list of commands to perform at system start up 
d06a			 
d06a			startcmds: 
d06a			;	dw test11 
d06a			;	dw test12 
d06a			;	dw test13 
d06a			;	dw test14 
d06a			;	dw test15 
d06a			;	dw test16 
d06a			;	dw test17 
d06a			;	dw ifthtest1 
d06a			;	dw ifthtest2 
d06a			;	dw ifthtest3 
d06a			;	dw mmtest1 
d06a			;	dw mmtest2 
d06a			;	dw mmtest3 
d06a			;	dw mmtest4 
d06a			;	dw mmtest5 
d06a			;	dw mmtest6 
d06a			;	dw iftest1 
d06a			;	dw iftest2 
d06a			;	dw iftest3 
d06a			;	dw looptest1 
d06a			;	dw looptest2 
d06a			;	dw test1 
d06a			;	dw test2 
d06a			;	dw test3 
d06a			;	dw test4 
d06a			;	dw game2r 
d06a			;	dw game2b1 
d06a			;	dw game2b2 
d06a			 
d06a				; start up words that are actually useful 
d06a			 
d06a			;    dw spi1 
d06a			;    dw spi2 
d06a			;    dw spi3 
d06a			;    dw spi4 
d06a			;    dw spi5 
d06a			;    dw spi6 
d06a			;    dw spi7 
d06a			; 
d06a			;    dw spi8 
d06a			;    dw spi9 
d06a			;    dw spi10 
d06a			 
d06a			; file editor 
d06a			;	dw edit1 
d06a			;	dw edit2 
d06a			;	dw edit3 
d06a			 
d06a			;	dw longread 
d06a 8c d4			dw clrstack 
d06c c0 d4			dw type 
d06e			;	dw stest 
d06e e5 d4			dw strncpy 
d070 55 d6			dw list 
d072 46 d5			dw start1 
d074 56 d5			dw start2 
d076			;	dw start3 
d076			;	dw start3b 
d076			;	dw start3c 
d076			 
d076				; (unit) testing words 
d076			 
d076			;	dw mtesta 
d076			;	dw mtestb 
d076			;	dw mtestc 
d076			;	dw mtestd 
d076			;	dw mteste 
d076			 
d076				; demo/game words 
d076			 
d076			;        dw game3w 
d076			;        dw game3p 
d076			;        dw game3sc 
d076			;        dw game3vsi 
d076			;        dw game3vs 
d076				 
d076			;	dw game2b 
d076			;	dw game2bf 
d076			;	dw game2mba 
d076			;	dw game2mbas 
d076			;	dw game2mb 
d076			 
d076 86 d8			dw game1 
d078 97 d8			dw game1a 
d07a f9 d8			dw game1b 
d07c 2e d9			dw game1c 
d07e 64 d9			dw game1d 
d080 95 d9			dw game1s 
d082 a9 d9			dw game1t 
d084 be d9			dw game1f 
d086 f2 d9			dw game1z 
d088 36 da			dw game1zz 
d08a			 
d08a bf d6			dw test5 
d08c f7 d6			dw test6 
d08e 2f d7			dw test7 
d090 43 d7			dw test8 
d092 6f d7			dw test9 
d094 85 d7			dw test10 
d096				 
d096 0d db		        dw ssv5 
d098 f1 da		        dw ssv4 
d09a d5 da		        dw ssv3 
d09c 9f da		        dw ssv2 
d09e 26 db		        dw ssv1 
d0a0 6e db		        dw ssv1cpm 
d0a2			;	dw keyup 
d0a2			;	dw keydown 
d0a2			;	dw keyleft 
d0a2			;	dw keyright 
d0a2			;	dw 	keyf1 
d0a2			;	dw keyf2 
d0a2			;	dw keyf3 
d0a2			;	dw keyf4 
d0a2			;	dw keyf5 
d0a2			;	dw keyf6 
d0a2			;	dw keyf7 
d0a2			;	dw keyf8 
d0a2			;	dw keyf9 
d0a2			;	dw keyf10 
d0a2			;	dw keyf11 
d0a2			;	dw keyf12 
d0a2			;	dw keytab 
d0a2			;	dw keycr 
d0a2			;	dw keyhome 
d0a2			;	dw keyend 
d0a2			;	dw keybs 
d0a2 00 00			db 0, 0	 
d0a4			 
d0a4			 
d0a4			; File Editor 
d0a4			 
d0a4			; ( id - ) use 'e' to edit the displayed line 
d0a4 .. 00		edit1: db ": edc waitk $65 = if ede then ; ", 0 
d0c5 .. 00		edit2: db ": ede storepage ptr $02 + cls dedit filepage bupd ; ", 0 
d0fa			;edit2: db ": ede v1@ v0@ record drop storepage ptr $02 + cls dedit filepage bupd ; ", 0 
d0fa .. 00		edit3: db ": ed dup v0! open $01 do i v0@ record cls . edc loop ; ",0 
d132			;edit3: db ": ed dup v0! open $01 do i v0@ record cls . i v1! edc loop ; ",0 
d132			 
d132			; SPI Net support words 
d132			 
d132			; v0! = node to send to 
d132			; ( str count - ) 
d132 .. 00		spi1:       db ": spitype spiceh $00 do dup i + @ v0@ spicel $10 spio spio spio spiceh $01 pause loop ; ",0 
d18b			 
d18b			; spiputc ( char node - ) 
d18b .. 00		spi2:       db ": spiputc spicel $10 spio spio ptr @ spio spiceh ; ",0 
d1bf			; spiputc ( u node - ) 
d1bf .. 00		spi2b:       db ": spiputb spicel $10 spio spio spio spiceh ; ",0 
d1ed			 
d1ed			; spigetc ( - n ) 
d1ed .. 00		spi4:       db ": spigetc spicel $11 spio spii spiceh ; ", 0 
d216			 
d216			; getnode ( - n ) 
d216 .. 00		spi5:       db ": getnode spicel $18 spio spii nop spiceh ; ", 0 
d243			 
d243			; ( str node - )  
d243 .. 00		spi3:       db ": sendnode v0! count spiceh $00 do dup i + @ v0@ spicel $10 spio spio spio spiceh $01 pause loop ; ; ",0 
d2a9			; store string ( str i - ) 
d2a9			 
d2a9			;spi3:       db ": storestrold spicel $03 spio spio ptr count clkstro spiceh ; ", 0 
d2a9 .. 00		spi6:       db ": storestr spicel $12 spio spio count $00 do dup i + @ spio $01 pause loop spiceh ; ", 0 
d2fe			 
d2fe			; get string ( addr i -  )    TO FIX 
d2fe			 
d2fe .. 00		spi7:       db ": getstorestr spicel $13 spio spio \" \" repeat spii dup concat $00 = not until spiceh ; ", 0 
d356			 
d356			 
d356			; NETCHAT (TODO) 
d356			; Program to allow two nodes to chat with eachother 
d356			; 
d356			; v0 - target node 
d356			;  
d356			; accept input at 0,0 
d356			; if input is string send spitype to target node 
d356			; starting at row 2,0 , while spigetchr is not zero ->  
d356			; 
d356			; 
d356			; TODO add paging of get request 
d356			 
d356			; ( node - ) 
d356 .. 00		spi8:		db ": netchatp $00 $00 at accept ;", 0 
d375 .. 00		spi9: 		db ": netchatr repeat spigetchr dup dup $00 = not if emit then $00 = not until $02 pause ; ",0 
d3cd .. 00		spi10:		db ": netchat v0! repeat netchatp count dup $00 > if spitype $01 pause then cls $00 $03 at \">\" . netchatr true until nop ; ", 0 
d445			 
d445			 
d445			; Long read of currently open file 
d445 .. 00		longread:   db ": lread read repeat readcont if read concat then readcont until nop ; ", 0 
d48c			 
d48c			; clear stack  
d48c			 
d48c .. 00		clrstack:  db ": clrstk depth ?dup if $01 do drop loop then nop ; ", 0 
d4c0			 
d4c0			; type ( addr count - ) 
d4c0 .. 00		type:     db ": type $00 do dup i + @ emit loop ; ", 0 
d4e5			 
d4e5			; some direct memory words 
d4e5			; strncpy ( len t f -- t ) 
d4e5			 
d4e5 .. 00		strncpy:   db ": strncpy $00 scratch 2! $02 scratch 2! do $00 scratch 2@ i + @ $02 scratch 2@ i + ! loop nop  ;",0 
d546			 
d546 .. 00		start1:     	db ": bpon $00 bp ;",0 
d556 .. 00		start2:     	db ": bpoff $01 bp ;",0 
d567 .. 00		start3b:         db ": ls dir cls drop dup $00 > if $01 do $08 $04 at . $01 $04 at . $04 $04 at . $23 $04 at accept drop scroll loop then nop ;",0 
d5e2 .. 00		start3c:         db ": dirlist dir cls drop dup $00 > if $01 do \"/\" .> .> \"Ext:\" .> .> \"Id: \" .> .>  loop then nop ;",0 
d642			 
d642 .. 00		tuck:         db ": tuck swap over ;", 0 
d655			 
d655			; a handy word to list items on the stack 
d655			 
d655 .. 00		list:            db ": more cls repeat scroll $01 $04 at depth . $0a $04 at .> $01 $01 at accept drop depth 0= not until nop ;",0 
d6bf			 
d6bf			 
d6bf			; test stack  
d6bf			; rnd8 stest 
d6bf			 
d6bf			;stest:   db ": stest cls  v0! v0@ $00 do rnd8 $01 $01 at i . $01 pause loop v0@ $00 do drop $12 $01 at depth . $01 pause loop nop ;",0  
d6bf			 
d6bf			; random malloc and free cycles 
d6bf			 
d6bf			;mtesta:      db ": mtesta $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . rnd8 dup $13 $01 at . malloc heap $1f $01 at . $1f $02 at . $01 pause free $01 until nop ;", 0 
d6bf			 
d6bf			; fixed malloc and free cycles 
d6bf			 
d6bf			;mtestb:      db ": mtestb $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 malloc heap $1f $01 at . $1f $02 at . $01 pause free $01 until nop ;", 0 
d6bf			 
d6bf			; fixed double string push and drop cycle  
d6bf			 
d6bf			;mtestc:      db ": mtestc $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 spaces $2f spaces  heap $1f $01 at . $1f $02 at . $01 pause drop drop $01 until nop ; ", 0 
d6bf			 
d6bf			; consistent fixed string push and drop cycle  
d6bf			 
d6bf			;mtestd:      db ": mtestd $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 spaces heap $1f $01 at . $1f $02 at . $01 pause drop $01 until nop ; ", 0 
d6bf			 
d6bf			;mteste:      db ": mteste $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . rnd8 dup spaces $0f $02 at . heap $1f $01 at . $1f $02 at . $01 pause drop $01 until nop ; ", 0 
d6bf			 
d6bf			;test1:		db ": aa 1 2 3 ;", 0 
d6bf			;test2:     	db "111 aa 888 999",0 
d6bf			;test3:     	db ": bb 77 ;",0 
d6bf			;test4:     	db "$02 $01 do i . loop bb",0 
d6bf			 
d6bf .. 00		test5:     	db ": hline $13 $00 do i $01 at 1 . i $04 at 1 . loop nop ;",0 
d6f7 .. 00		test6:     	db ": vline $04 $01 do $00 i at 1 . $13 i at 1 . loop nop ;",0 
d72f .. 00		test7:     	db ": box hline vline ;",0 
d743 .. 00		test8:     	db ": world cls box $03 $03 at Hello-World! . ;",0 
d76f .. 00		test9:     	db ": sw $01 adsp world ;",0 
d785 .. 00		test10:     	db ": fw $00 adsp world draw $05 pause ;",0 
d7aa			;test11:     	db "hello create .",0 
d7aa			;test12:     	db "hello2 create .",0 
d7aa			 
d7aa			;mmtest1:     	db "cls $0001 $0008 MIN . $0002 pause",0 
d7aa			;mmtest2:     	db "cls $0101 $0008 MIN . $0002 pause",0 
d7aa			;mmtest3:     	db "cls $0001 $0008 MAX . $0002 pause",0 
d7aa			;mmtest4:     	db "cls $0101 $0008 MAX . $0002 pause",0 
d7aa			;mmtest5:     	db "cls $0001 $0001 MIN . $0002 pause",0 
d7aa			;mmtest6:     	db "cls $0001 $0001 MAX . $0002 pause",0 
d7aa			 
d7aa			;iftest1:     	db "$0001 IF cls .",0 
d7aa			;iftest2:     	db "$0000 IF cls .",0 
d7aa			;iftest3:     	db "$0002 $0003 - IF cls .",0 
d7aa			;looptest1:     	db "$0003 $0001 do i . loop 8",0 
d7aa			;looptest2:     	db "$0003 $0001 do i . $0001 pause loop 8",0 
d7aa			 
d7aa			;ifthtest1:     	db "$0001 IF is-true . $0005 pause THEN next-word . $0005 pause",0 
d7aa			;ifthtest2:     	db "$0000 IF is-true . $0005 pause THEN next-word . $0005 pause",0 
d7aa			;ifthtest3:     	db "$0002 $0003 - IF is-true . $0005 pause THEN next-word . $0005 pause",0 
d7aa			 
d7aa			 
d7aa .. 00		sound1: db ": note spicel spio spiceh spicel ; ",0 
d7ce .. 00		sound2: db ": slient $9f note $bf note $df note $ff note ; ", 0 
d7fe .. 00		sound3: db ": sound $01 cartdev $00 spitime ! ; ",0 
d823 .. 00		sound4: db ": cha $00 ; ",0 
d830 .. 00		sound5: db ": chb $20 ; ",0 
d83d .. 00		sound6: db ": chc $40 ; ",0 
d84a .. 00		sound7: db ": chd $60 ; ",0 
d857 .. 00		sound8: db ": cnote $80 + + note ; ", 0 
d86f .. 00		sound9: db ": cvol $90 + + note ; ", 0 
d886			 
d886			 
d886			 
d886			 
d886			; a small guess the number game 
d886			 
d886 .. 00		game1:          db ": gsn rnd8 v1! ;",0 
d897 .. 00		game1a:          db ": gs $00 $00 at Enter-a-number .- $00 $02 at between-1-and-255 .- $00 $03 at accept str2num v2! ;",0 
d8f9			 
d8f9 .. 00		game1b:          db ": gcb v2@ v1@ < if $00 $00 at Too-low! .- $01 then ;",0 
d92e .. 00		game1c:          db ": gcc v2@ v1@ > if $00 $00 at Too-high! .- $01 then ;",0 
d964 .. 00		game1d:          db ": gcd v2@ v1@ = if $00 $00 at Yes! .- $00 then ;",0 
d995 .. 00		game1s:          db ": gck gcb gcc gcd ;",0 
d9a9 .. 00		game1t:          db ": sc v3@ $01 + v3! ;",0 
d9be .. 00		game1f:          db ": fsc v3@ cls $01 $01 at You-Took .- $02 $03 at . ;",0 
d9f2 .. 00		game1z:         db ": ga $00 v3! gsn repeat cls gs cls gck $02 pause sc until fsc nop ;",0 
da36			 
da36			; Using 'ga' save a high score across multiple runs using external storage 
da36			 
da36 .. 00		game1zz:         db ": gas ga $01 bank $80 bread $01 $04 at Prev-Score .> storepage ptr $02 + dup 2@ . v3@ swap 2! $80 bupd ;",0 
da9f			 
da9f			 
da9f			;game2r:          db ": m2r rnd8 v1! ;  ",0, 0, 0, FORTH_END_BUFFER 
da9f			;game2b1:          db ": m2b1 $1f $00 do i v2@ at rnd8 $30 < if A . then loop nop ;  ",0, 0, 0, FORTH_END_BUFFER 
da9f			;game2b2:          db ": m2b cls $04 $01 do i v2! m2b1 loop ;  ",0, 0, 0, FORTH_END_BUFFER 
da9f			 
da9f			; simple screen saver to test code memory reuse to destruction 
da9f			 
da9f .. 00		ssv2:            db ": ssvchr $2a $2d rnd dup $2c = if drop $20 then nop ;",0 
dad5 .. 00		ssv3:            db ": ssvposx $01 $27 rnd v0! ;",0 
daf1 .. 00		ssv4:            db ": ssvposy $01 $05 rnd v1! ;",0 
db0d .. 00		ssv5:            db ": ssvt ssvposx ssvposy ;",0 
db26 .. 00		ssv1:          db ": ssv cls repeat ssvposx ssvposy v0@ v1@ at ssvchr emit $01 until nop ;",0 
db6e .. 00		ssv1cpm:          db ": ssvcpm cls repeat ssvposx ssvposy v0@ v1@ at ssvchr emit $01 pausems $01 until nop ;",0 
dbc5			;ssv1:          db ": ssv cls repeat ssvt v0@ v1@ at ssvchr emit $01 until nop ;",0 
dbc5			;ssv1:          db ": ssv ssvposx ssvposy at ssvchr ;",0 
dbc5			;ssv1:            db ": ssv repeat ssvpos rnd8 $10 if               $01 until nop ;",0 
dbc5			;ssv2:            db ": ssvchr v0! v1! at? ;",0 
dbc5			;ssv5:            db ": ssvt ssvposx ssvposy v0@ .> v1@ .> ;",0 
dbc5			;ssv2:            db ": ssvchr $2a $2d rnd  ;",0 
dbc5			 
dbc5			 
dbc5			 
dbc5			; minesweeper/battleship finding game 
dbc5			; draws a game board of random ship/mine positions 
dbc5			; user enters coords to see if it hits on 
dbc5			; game ends when all are hit 
dbc5			; when hit or miss says how many may be in the area 
dbc5			 
dbc5			; setup the game board and then hide it 
dbc5			;game2b:          db ": mbsetup $02 fb cls $04 $01 do i v2! $10 $01 do i v2@ at rnd8 $30 < if A . then loop loop $05 pause $01 fb ;",0 
dbc5			;game2bf:         db ": mbsetupf cls $04 $01 do i v2! $10 $01 do i v2@ at \"+\" . loop loop nop ;",0 
dbc5			;; prompt for where to target 
dbc5			;game2mba:        db ": mbp $12 $04 at Turns .> v3@ . $12 $03 at Score .> v0@ . $12 $01 at Enter-X-__ .- $1a $01 at accept $12 $02 at Enter-Y-__ .- $1a $02 at accept nop ;", 0  
dbc5			;game2mbas:        db ": mbsv str2num v2! str2num v1! nop ;", 0  
dbc5			;; TODO see if the entered coords hits or misses pushes char hit of miss 
dbc5			;game2mbht:      db ": mbckht nop ;",0 
dbc5			;game2mbms:      db ": mbcms nop ;",0 
dbc5			; TODO how many might be near by 
dbc5			;game2mb:          db ": mb $00 v0! $00 v3! mbsetup mbsetupf repeat mbp mbsv $02 fb mbckht mbcms v1@ v2@ at@ $01 fb v1@ v2@ at emit $01 until nop ;",0 
dbc5			 
dbc5			; Game 3 
dbc5			 
dbc5			; Vert scroller ski game - avoid the trees! 
dbc5			 
dbc5			; v0 score (ie turns) 
dbc5			; v1 player pos 
dbc5			; v2 left wall 
dbc5			; v3 right wall 
dbc5			 
dbc5			; Draw side walls randomly 
dbc5			 
dbc5			;game3w:   db ": vsw v2@ $04 at \"|\" . v3@ $04 at \"|\" . nop ;", 0 
dbc5			 
dbc5			; Draw player 
dbc5			;game3p:   db ": vsp v1@ $01 at \"V\" . nop ; ", 0 
dbc5			 
dbc5			; TODO Get Key 
dbc5			 
dbc5			; TODO Move left right 
dbc5			 
dbc5			; scroll and move walls a bit 
dbc5			 
dbc5			;game3sc:  db ": vsscl v2@ $01 + v2! v3@ $01 - v3! scroll nop ;", 0 
dbc5			 
dbc5			; main game loop 
dbc5			 
dbc5			;game3vsi:    db ": vsi $00 v0! $01 v2! $12 v3! $06 v1! nop ;",0 
dbc5			;game3vs:    db ": vs vsi repeat vsw vsp vsscl $05 pause scroll $01 until nop ;",0 
dbc5			 
dbc5			; key board defs 
dbc5			 
dbc5 .. 00		keyup:       db ": keyup $05 ;",0 
dbd3 .. 00		keydown:       db ": keydown $0a ;",0 
dbe3 .. 00		keyleft:       db ": keyleft $0b ;",0 
dbf3 .. 00		keyright:       db ": keyright $0c ;",0 
dc04 .. 00		keyf1:       db ": keyf1 $10 ;",0 
dc12 .. 00		keyf2:       db ": keyf2 $11 ;",0 
dc20 .. 00		keyf3:       db ": keyf3 $12 ;",0 
dc2e .. 00		keyf4:       db ": keyf4 $13 ;",0 
dc3c .. 00		keyf5:       db ": keyf5 $14 ;",0 
dc4a .. 00		keyf6:       db ": keyf6 $15 ;",0 
dc58 .. 00		keyf7:       db ": keyf7 $16 ;",0 
dc66 .. 00		keyf8:       db ": keyf8 $17 ;",0 
dc74 .. 00		keyf9:       db ": keyf9 $18 ;",0 
dc82 .. 00		keyf10:       db ": keyf10 $19 ;",0 
dc91 .. 00		keyf11:       db ": keyf11 $1a ;",0 
dca0 .. 00		keyf12:       db ": keyf12 $1b ;",0 
dcaf			 
dcaf .. 00		keytab:       db ": keytab $09 ;",0 
dcbe .. 00		keycr:       db ": keycr $0d ;",0 
dccc .. 00		keyhome:       db ": keyhome $0e ;",0 
dcdc .. 00		keyend:       db ": keyend $0f ;",0 
dceb .. 00		keybs:       db ": keybs $08 ;",0 
dcf9			 
dcf9			   
dcf9			 
dcf9			 
dcf9			 
dcf9			; eof 
# End of file forth_autostart.asm
dcf9			 
dcf9			 
dcf9			 
dcf9			; stack over and underflow checks 
dcf9			 
dcf9			; init the words to detect the under/overflow 
dcf9			 
dcf9			chk_stk_init: 
dcf9				; a vague random number to check so we dont get any "lucky" hits 
dcf9 3e 2d			ld a, 45 
dcfb 6f				ld l, a 
dcfc 00				nop 
dcfd 3e 17			ld a, 23 
dcff 67				ld h, a 
dd00			 
dd00 22 97 e2			ld (chk_word), hl     ; the word we need to check against 
dd03			 
dd03			;	ld (chk_stund), hl	; stack points.... 
dd03 22 00 ef			ld (chk_stovr), hl 
dd06 22 e6 e9			ld (chk_ret_und), hl 
dd09 22 a4 e9			ld (chk_ret_ovr), hl 
dd0c 22 22 e9			ld (chk_loop_ovr), hl 
dd0f 22 20 e8			ld (chk_data_ovr), hl 
dd12 c9				ret 
dd13				 
dd13			check_stacks: 
dd13				; check all stack words 
dd13			 
dd13 e5				push hl 
dd14 d5				push de 
dd15			 
dd15			;	ld de,(chk_word) 
dd15			;	ld hl, (chk_stund)	; stack points.... 
dd15			;	if DEBUG_STK_FAULT 
dd15			;		DMARK "FAa" 
dd15			;		CALLMONITOR 
dd15			;	endif 
dd15			;	call cmp16 
dd15			;	jp z, .chk_faulta 
dd15			; 
dd15			;	ld de, sfaultsu 
dd15			;	jp .chk_fault 
dd15			 
dd15 2a 00 ef		.chk_faulta: ld hl, (chk_stovr) 
dd18 ed 5b 97 e2		ld de,(chk_word) 
dd1c				if DEBUG_STK_FAULT 
dd1c					DMARK "FAb" 
dd1c					CALLMONITOR 
dd1c				endif 
dd1c cd 08 8d			call cmp16 
dd1f 28 06			jr z, .chk_fault1 
dd21 11 c5 dd			ld de, sfaultso 
dd24 c3 76 dd			jp .chk_fault 
dd27			.chk_fault1:  
dd27 2a e6 e9			ld hl, (chk_ret_und) 
dd2a ed 5b 97 e2		ld de,(chk_word) 
dd2e				if DEBUG_STK_FAULT 
dd2e					DMARK "FAU" 
dd2e					CALLMONITOR 
dd2e				endif 
dd2e cd 08 8d			call cmp16 
dd31 ca 3a dd			jp z, .chk_fault2 
dd34 11 d5 dd			ld de, sfaultru 
dd37 c3 76 dd			jp .chk_fault 
dd3a			.chk_fault2:  
dd3a 2a a4 e9			ld hl, (chk_ret_ovr) 
dd3d ed 5b 97 e2		ld de,(chk_word) 
dd41				if DEBUG_STK_FAULT 
dd41					DMARK "FA1" 
dd41					CALLMONITOR 
dd41				endif 
dd41 cd 08 8d			call cmp16 
dd44 ca 4d dd			jp z, .chk_fault3 
dd47 11 e3 dd			ld de, sfaultro 
dd4a c3 76 dd			jp .chk_fault 
dd4d			.chk_fault3:  
dd4d 2a 22 e9			ld hl, (chk_loop_ovr) 
dd50 ed 5b 97 e2		ld de,(chk_word) 
dd54				if DEBUG_STK_FAULT 
dd54					DMARK "FA2" 
dd54					CALLMONITOR 
dd54				endif 
dd54 cd 08 8d			call cmp16 
dd57 ca 60 dd			jp z, .chk_fault4 
dd5a 11 fd dd			ld de, sfaultlo 
dd5d c3 76 dd			jp .chk_fault 
dd60			.chk_fault4:  
dd60 2a 20 e8			ld hl, (chk_data_ovr) 
dd63 ed 5b 97 e2		ld de,(chk_word) 
dd67				if DEBUG_STK_FAULT 
dd67					DMARK "FA3" 
dd67					CALLMONITOR 
dd67				endif 
dd67 cd 08 8d			call cmp16 
dd6a ca 73 dd			jp z, .chk_fault5 
dd6d 11 17 de			ld de, sfaultdo 
dd70 c3 76 dd			jp .chk_fault 
dd73			 
dd73			 
dd73			.chk_fault5:  
dd73 d1				pop de 
dd74 e1				pop hl 
dd75			 
dd75 c9				ret 
dd76			 
dd76 cd bd 8a		.chk_fault: 	call clear_display 
dd79 3e 28				ld a, display_row_2 
dd7b cd d0 8a				call str_at_display 
dd7e 11 a7 dd				   ld de, .stackfault 
dd81 3e 00				ld a, display_row_1 
dd83 cd d0 8a				call str_at_display 
dd86 11 65 ee				    ld de, debug_mark 
dd89 3e 11				ld a, display_row_1+17 
dd8b cd d0 8a				call str_at_display 
dd8e cd e0 8a				call update_display 
dd91			 
dd91				; prompt before entering montior for investigating issue 
dd91			 
dd91 3e 78			ld a, display_row_4 
dd93 11 63 97			ld de, endprog 
dd96			 
dd96 cd e0 8a			call update_display		 
dd99			 
dd99 cd fd 99			call next_page_prompt 
dd9c			 
dd9c d1				pop de 
dd9d e1				pop hl 
dd9e cd b7 97				call monitor 
dda1 cd 1b 9e				call forth_warmstart 
dda4 c3 b3 96				jp warmstart_afterauto 
dda7					;jp 0 
dda7					;halt 
dda7			 
dda7			 
dda7			 
dda7 .. 00		.stackfault: 	db "Stack fault:",0 
ddb4			 
ddb4 .. 00		sfaultsu: 	db	"Stack under flow",0 
ddc5 .. 00		sfaultso: 	db	"Stack over flow",0 
ddd5 .. 00		sfaultru:	db "RTS underflow",0 
dde3 .. 00		sfaultro:	db "RTS overflow/LS underflow", 0 
ddfd .. 00		sfaultlo:	db "LS overflow/DTS underflow", 0 
de17 .. 00		sfaultdo:	db "DTS overflow", 0 
de24			 
de24			 
de24			fault_dsp_under: 
de24 11 36 de			ld de, .dsp_under 
de27 c3 ec de			jp .show_fault 
de2a			 
de2a			fault_rsp_under: 
de2a 11 44 de			ld de, .rsp_under 
de2d c3 ec de			jp .show_fault 
de30			fault_loop_under: 
de30 11 52 de			ld de, .loop_under 
de33 c3 ec de			jp .show_fault 
de36			 
de36 .. 00		.dsp_under: db "DSP Underflow",0 
de44 .. 00		.rsp_under: db "RSP Underflow",0 
de52 .. 00		.loop_under: db "LOOP Underflow",0 
de61			 
de61			 
de61 d5			type_faultn: 	push de 
de62 e5					push hl 
de63 cd bd 8a				call clear_display 
de66 11 90 de				   ld de, .typefaultn 
de69 3e 00				ld a, display_row_1 
de6b cd d0 8a				call str_at_display 
de6e 11 65 ee				    ld de, debug_mark 
de71 3e 11				ld a, display_row_1+17 
de73 cd d0 8a				call str_at_display 
de76 cd e0 8a				call update_display 
de79			 
de79				; prompt before entering montior for investigating issue 
de79			 
de79 3e 78			ld a, display_row_4 
de7b 11 63 97			ld de, endprog 
de7e			 
de7e cd e0 8a			call update_display		 
de81			 
de81 cd fd 99			call next_page_prompt 
de84			 
de84 e5					push hl 
de85 d5					push de 
de86 cd b7 97				call monitor 
de89 cd 1b 9e				call forth_warmstart 
de8c c3 b3 96				jp warmstart_afterauto 
de8f 76					halt 
de90			 
de90			 
de90 .. 00		.typefaultn: db "NUM Type Expected TOS!",0 
dea7			 
dea7 d5			type_faults: 	push de 
dea8 e5					push hl 
dea9 cd bd 8a				call clear_display 
deac 11 d5 de				   ld de, .typefaults 
deaf 3e 00				ld a, display_row_1 
deb1 cd d0 8a				call str_at_display 
deb4 11 65 ee				    ld de, debug_mark 
deb7 3e 11				ld a, display_row_1+17 
deb9 cd d0 8a				call str_at_display 
debc cd e0 8a				call update_display 
debf			 
debf				; prompt before entering montior for investigating issue 
debf			 
debf 3e 78			ld a, display_row_4 
dec1 11 63 97			ld de, endprog 
dec4			 
dec4 cd e0 8a			call update_display		 
dec7			 
dec7 cd fd 99			call next_page_prompt 
deca			 
deca e1					pop hl 
decb d1					pop de 
decc cd b7 97				call monitor 
decf cd 1b 9e				call forth_warmstart 
ded2 c3 b3 96				jp warmstart_afterauto 
ded5			 
ded5			 
ded5 .. 00		.typefaults: db "STR Type Expected TOS!",0 
deec			 
deec			.show_fault: 	 
deec d5					push de 
deed cd bd 8a				call clear_display 
def0 d1					pop de 
def1 3e 00				ld a, display_row_1 
def3 cd d0 8a				call str_at_display 
def6 11 65 ee				    ld de, debug_mark 
def9 3e 11				ld a, display_row_1+17 
defb cd d0 8a				call str_at_display 
defe cd e0 8a				call update_display 
df01			 
df01				; prompt before entering montior for investigating issue 
df01			 
df01 3e 78			ld a, display_row_4 
df03 11 63 97			ld de, endprog 
df06			 
df06 cd e0 8a			call update_display		 
df09			 
df09 cd fd 99			call next_page_prompt 
df0c			 
df0c e1					pop hl 
df0d d1					pop de 
df0e cd b7 97				call monitor 
df11			; do a dump to cli and not warmstart so we preserve all of the uwords.  
df11			; TODO Make optional fault restart to cli or warm boot? 
df11					;jp warmstart 
df11 c3 f7 96				jp cli 
df14 76					halt 
df15			 
df15			 
df15			; handle the auto run of code from files in storage 
df15			 
df15			 
df15			include "forth_startup.asm" 
df15			; Which startup method to use? 
df15			; 
df15			; version 1 - allows for a single stored file to be selected to run at start up (if se storage is enabled) 
df15			; followed by loading of a list of scripts in eeprom 
df15			 
df15			; version 2 - if se storage is enabled then auto load all files which begin with a '*' else use loading 
df15			; from eeprom 
df15			 
df15			; Select with define in main stubs 
df15			 
df15			if STARTUP_V1 
df15				include "forth_startupv1.asm" 
df15			; Startup script loading version 1 
df15			 
df15			; If SE storage is available first stage is to use the selected file 
df15			; then go through the eeprom list 
df15			 
df15 .. 00		sprompt1: db "Startup load...",0 
df25 .. 00		sprompt2: db "Run? 1=No *=End #=All",0 
df3b			 
df3b			 
df3b			 
df3b			 
df3b			forth_startup: 
df3b 21 6a d0			ld hl, startcmds 
df3e 3e 00			ld a, 0 
df40 32 e1 e6			ld (os_last_cmd), a    ; tmp var to skip prompts if doing all 
df43			 
df43 e5			.start1:	push hl 
df44 cd bd 8a			call clear_display 
df47 11 15 df			ld de, sprompt1 
df4a 3e 00		        ld a, display_row_1 
df4c cd d0 8a			call str_at_display 
df4f 11 25 df			ld de, sprompt2 
df52 3e 28		        ld a, display_row_2 
df54 cd d0 8a			call str_at_display 
df57 e1				pop hl 
df58 e5				push hl 
df59 5e				ld e,(hl) 
df5a 23				inc hl 
df5b 56				ld d,(hl) 
df5c 3e 50		        ld a, display_row_3 
df5e cd d0 8a			call str_at_display 
df61 cd e0 8a			call update_display 
df64			 
df64			 
df64 3a e1 e6			ld a, (os_last_cmd) 
df67 fe 00			cp 0 
df69 28 05			jr z, .startprompt 
df6b cd f4 89			call delay250ms 
df6e 18 24			jr .startdo 
df70				 
df70				 
df70			 
df70			.startprompt: 
df70			 
df70 3e 9f			ld a,display_row_4 + display_cols - 1 
df72 11 fb 99		        ld de, endprg 
df75 cd d0 8a			call str_at_display 
df78 cd e0 8a			call update_display 
df7b cd 00 8a			call delay1s 
df7e cd a1 e0			call cin_wait 
df81						 
df81 fe 2a			cp '*' 
df83 28 5e			jr z, .startupend1 
df85 fe 23			cp '#' 
df87 20 07			jr nz, .startno 
df89 3e 01			ld a, 1 
df8b 32 e1 e6			ld (os_last_cmd),a 
df8e 18 04			jr .startdo 
df90 fe 31		.startno:	cp '1' 
df92 28 3a			jr z,.startnxt  
df94			 
df94				; exec startup line 
df94			.startdo:	 
df94 e1				pop hl 
df95 e5				push hl 
df96				 
df96 5e				ld e,(hl) 
df97 23				inc hl 
df98 56				ld d,(hl) 
df99 eb				ex de,hl 
df9a			 
df9a e5				push hl 
df9b			 
df9b 3e 00			ld a, 0 
df9d				;ld a, FORTH_END_BUFFER 
df9d cd 5b 90			call strlent 
dfa0 23				inc hl   ; include zero term to copy 
dfa1 06 00			ld b,0 
dfa3 4d				ld c,l 
dfa4 e1				pop hl 
dfa5 11 bb e2			ld de, scratch 
dfa8 ed b0			ldir 
dfaa			 
dfaa			 
dfaa 21 bb e2			ld hl, scratch 
dfad cd bf 9e			call forthparse 
dfb0 cd fb 9e			call forthexec 
dfb3 cd 15 9e			call forthexec_cleanup 
dfb6			 
dfb6 3e 78			ld a, display_row_4 
dfb8 11 63 97			ld de, endprog 
dfbb			 
dfbb cd e0 8a			call update_display		 
dfbe			 
dfbe 3a e1 e6			ld a, (os_last_cmd) 
dfc1 fe 00			cp 0 
dfc3 20 09			jr nz, .startnxt 
dfc5 cd fd 99			call next_page_prompt 
dfc8 cd bd 8a		        call clear_display 
dfcb cd e0 8a			call update_display		 
dfce			 
dfce				; move onto next startup line? 
dfce			.startnxt: 
dfce			 
dfce cd f4 89			call delay250ms 
dfd1 e1				pop hl 
dfd2			 
dfd2 23				inc hl 
dfd3 23				inc hl 
dfd4			 
dfd4 e5				push hl 
dfd5 5e				ld e, (hl) 
dfd6 23				inc hl 
dfd7 56				ld d, (hl) 
dfd8 e1				pop hl 
dfd9				; TODO replace 0 test 
dfd9			 
dfd9 eb				ex de, hl 
dfda cd 13 8d			call ishlzero 
dfdd			;	ld a,e 
dfdd			;	add d 
dfdd			;	cp 0    ; any left to do? 
dfdd eb				ex de, hl 
dfde c2 43 df			jp nz, .start1 
dfe1 18 01			jr .startupend 
dfe3			 
dfe3 e1			.startupend1: pop hl 
dfe4			.startupend: 
dfe4			 
dfe4 cd bd 8a			call clear_display 
dfe7 cd e0 8a			call update_display 
dfea c9				ret 
dfeb			if STORAGE_SE 
dfeb			 
dfeb			sprompt3: db "Loading from start-up file?:",0 
dfeb			sprompt4: db "(Y=Any key/N=No)",0 
dfeb			 
dfeb			 
dfeb			forth_autoload: 
dfeb			 
dfeb				; load block 0 of store 1 
dfeb				 
dfeb				ld a, $fe      ; bit 0 clear 
dfeb				ld (spi_device), a 
dfeb			 
dfeb				call storage_get_block_0 
dfeb			 
dfeb				ld a, (store_page+STORE_0_AUTOFILE) 
dfeb			 
dfeb				cp 0 
dfeb				ret z     ; auto start not enabled 
dfeb			 
dfeb				call clear_display 
dfeb			 
dfeb				; set bank 
dfeb			 
dfeb					ld a, (store_page+STORE_0_BANKRUN) 
dfeb					ld (spi_device), a 
dfeb			 
dfeb				; get file id to load from and get the file name to display 
dfeb			 
dfeb					ld a, (store_page+STORE_0_FILERUN) 
dfeb			 
dfeb					ld l, 0 
dfeb					ld h, a 
dfeb					ld de, store_page 
dfeb			 
dfeb					if DEBUG_FORTH_WORDS 
dfeb						DMARK "ASp" 
dfeb						CALLMONITOR 
dfeb					endif 
dfeb					call storage_read 
dfeb			 
dfeb					if DEBUG_FORTH_WORDS 
dfeb						DMARK "ASr" 
dfeb						CALLMONITOR 
dfeb					endif 
dfeb			 
dfeb					call ishlzero 
dfeb					ret z             ; file not found 
dfeb			 
dfeb					ld a, display_row_2 + 10 
dfeb					ld de, store_page+3 
dfeb					call str_at_display 
dfeb				 
dfeb			; 
dfeb			 
dfeb				ld a, display_row_1+5 
dfeb				ld de, sprompt3 
dfeb				call str_at_display 
dfeb				ld a, display_row_3+15 
dfeb				ld de, sprompt4 
dfeb				call str_at_display 
dfeb			 
dfeb				call update_display 
dfeb			 
dfeb				call cin_wait 
dfeb				cp 'n' 
dfeb				ret z 
dfeb				cp 'N' 
dfeb				ret z 
dfeb			 
dfeb				call delay1s 
dfeb			 
dfeb				ld a, (store_page+2) 
dfeb				ld (store_openmaxext), a    ; save count of ext 
dfeb				ld a, 1  
dfeb				ld (store_openext), a    ; save count of ext 
dfeb			 
dfeb			.autof:  
dfeb				ld l , a 
dfeb				 
dfeb				ld a, (store_page) 
dfeb				ld h, a	 
dfeb				ld de, store_page 
dfeb					if DEBUG_FORTH_WORDS 
dfeb						DMARK "ASl" 
dfeb						CALLMONITOR 
dfeb					endif 
dfeb					call storage_read 
dfeb				call ishlzero 
dfeb				ret z 
dfeb			;	jr z, .autoend 
dfeb			 
dfeb					if DEBUG_FORTH_WORDS 
dfeb						DMARK "ASc" 
dfeb						CALLMONITOR 
dfeb					endif 
dfeb				ld de, store_page+2 
dfeb				ld a, display_row_4 
dfeb				call str_at_display 
dfeb			 
dfeb				call update_display 
dfeb				call delay250ms 
dfeb			 
dfeb			 
dfeb			 
dfeb				ld hl, store_page+2 
dfeb				call forthparse 
dfeb				call forthexec 
dfeb				call forthexec_cleanup 
dfeb			 
dfeb				 
dfeb				ld a, (store_openext) 
dfeb				inc a 
dfeb				ld (store_openext), a    ; save count of ext 
dfeb			 
dfeb				jr .autof 
dfeb			;.autofdone: 
dfeb			; 
dfeb			;		if DEBUG_FORTH_WORDS 
dfeb			;			DMARK "ASx" 
dfeb			;			CALLMONITOR 
dfeb			;		endif 
dfeb			;;	call clear_display 
dfeb			;	ret 
dfeb			 
dfeb			 
dfeb			 
dfeb			endif 
# End of file forth_startupv1.asm
dfeb			endif 
dfeb			if STARTUP_V2 
dfeb				include "forth_startupv2.asm" 
dfeb			endif 
dfeb			 
# End of file forth_startup.asm
dfeb			 
dfeb			; eof 
# End of file forth_kernel.asm
dfeb			;include "nascombasic.asm" 
dfeb			 
dfeb			 
dfeb			; find out where the code ends if loaded into RAM (for SC114) 
dfeb			;endofcode:  
dfeb			;	nop 
dfeb			 
dfeb			 
dfeb			; jump to nmi vector 
dfeb			 
dfeb			init_nmi: 
dfeb 3e c9			ld a, $c9   ; RET 
dfed 32 72 ee			ld (nmi_vector), a 
dff0 c9				ret 
dff1			nmi: 
dff1 e5				push hl 
dff2 d5				push de 
dff3 c5				push bc 
dff4 f5				push af 
dff5 cd 72 ee			call nmi_vector 
dff8 f5				push af 
dff9 c5				push bc 
dffa d5				push de 
dffb e5				push hl 
dffc ed 4d			reti 
dffe			 
dffe			 
dffe			; eof 
dffe			 
# End of file main.asm
dffe			;include "firmware_lcd_4x40.asm" 
dffe			;;include "firmware_lcd_4x20.asm" 
dffe			include "firmware_serial_display.asm" 
dffe			 
dffe			; Serial display interface for SC114 
dffe			 
dffe			 
dffe			display_row_1: equ 0 
dffe			display_row_2: equ display_row_1+display_cols 
dffe			display_row_3: equ display_row_2 + display_cols 
dffe			display_row_4: equ display_row_3 + display_cols 
dffe			 
dffe			kLCDWidth:  EQU display_cols             ;Width in characters 
dffe			kLCD_Line1: EQU 0x00  
dffe			kLCD_Line2: EQU kLCD_Line1+kLCDWidth 
dffe			; E1 
dffe			kLCD_Line3: EQU kLCD_Line2+kLCDWidth 
dffe			kLCD_Line4: EQU kLCD_Line3+kLCDWidth  
dffe			 
dffe			lcd_init: 
dffe				; no init as handled by the SCM bios 
dffe c9				ret 
dfff			 
dfff			 
dfff			; low level functions for direct screen writes 
dfff			 
dfff			; output char at pos? 
dfff			fLCD_Str: 
dfff			        ;out (SC114_SIO_1_OUT),a 
dfff c5				push bc 
e000 0e 02			ld c, $02 
e002 f7				rst $30 
e003 c1				pop bc 
e004 c9				ret 
e005			 
e005			; position the cursor on the screen using A as realtive point in screen buffer (i.e. A=(x+(width/y))) 
e005			fLCD_Pos: 
e005				; use ASCII escape to position 
e005			        ;out (SC114_SIO_1_OUT),a 
e005 c5				push bc 
e006 0e 02			ld c, $02 
e008 f7				rst $30 
e009 c1				pop bc 
e00a			 
e00a c9				ret 
e00b			 
e00b			; output char at pos 
e00b			fLCD_Data: 
e00b			      ;  out (SC114_SIO_1_OUT),a 
e00b c5				push bc 
e00c 0e 02			ld c, $02 
e00e f7				rst $30 
e00f c1				pop bc 
e010			 
e010 c9				ret 
e011			 
e011			; ascii cls  
e011			 
e011 1b 5b 48 00	.cls:   db 27, '[', 'H', 0 
e015			 
e015			; write the frame buffer given in hl to hardware  
e015			write_display: 
e015			 
e015			API: equ 0 
e015			 
e015			if API 
e015				push bc 
e015				ld b, 4 
e015			 
e015			        ld (display_write_tmp), hl 	  
e015			 
e015				; clear and home cursor 
e015			 
e015				ld c, 6 
e015				ld de, .cls 
e015				rst $30 
e015			 
e015			 
e015			.writeln: 
e015			 
e015				ld de, (display_write_tmp) 
e015				ld c, 6 
e015				rst $30 
e015				ld c, 7 
e015				rst $30 
e015			 
e015				ld hl, (display_write_tmp) 
e015				ld de, display_cols 
e015				add hl,de 
e015				ld (display_write_tmp),hl 
e015			 
e015				djnz  .writeln 
e015			 
e015				pop bc 
e015			 
e015			 
e015				ret 
e015			endif 
e015 e5				push hl 
e016 c5				push bc 
e017 d5				push de 
e018			 
e018			;	ld c, 2 
e018			;	;ld de, .cls 
e018			;	ld a, 27 
e018			;	rst $30 
e018			;	ld c, 2 
e018			;	;ld de, .cls 
e018			;	ld a, '[' 
e018			;	rst $30 
e018			; 
e018			;	ld c, 2 
e018			;	;ld de, .cls 
e018			;	ld a, 'H' 
e018			;	rst $30 
e018			; 
e018			 
e018 0e 02			ld c, 2 
e01a				;ld de, .cls 
e01a 3e 1b			ld a, 27 
e01c f7				rst $30 
e01d			 
e01d			 
e01d 0e 02			ld c, 2 
e01f				;ld de, .cls 
e01f 3e 5b			ld a, '[' 
e021 f7				rst $30 
e022 0e 02			ld c, 2 
e024				;ld de, .cls 
e024 3e 32			ld a, '2' 
e026 f7				rst $30 
e027 0e 02			ld c, 2 
e029				;ld de, .cls 
e029 3e 4a			ld a, 'J' 
e02b f7				rst $30 
e02c d1				pop de 
e02d c1				pop bc 
e02e e1				pop hl 
e02f			 
e02f			 
e02f 22 c3 eb		        ld (display_write_tmp), hl 	  
e032 3e 00			ld a, kLCD_Line1 
e034			        ;    CALL fLCD_Pos       ;Position cursor to location in A 
e034 06 28			ld b, display_cols 
e036 ed 5b c3 eb		ld de, (display_write_tmp) 
e03a cd 98 e0			call write_len_string 
e03d				 
e03d			 
e03d e5			push hl 
e03e d5			push de 
e03f c5			push bc 
e040 0e 07			ld c, 7 
e042 f7				rst $30 
e043 c1			pop bc 
e044 d1			pop de 
e045 e1			pop hl 
e046			 
e046				 
e046 2a c3 eb			ld hl, (display_write_tmp) 
e049 11 28 00			ld de, display_cols 
e04c 19				add hl,de 
e04d 22 c3 eb			ld (display_write_tmp),hl 
e050			 
e050				 
e050 3e 28			ld a, kLCD_Line2 
e052			        ;    CALL fLCD_Pos       ;Position cursor to location in A 
e052 06 28			ld b, display_cols 
e054 ed 5b c3 eb		ld de, (display_write_tmp) 
e058 cd 98 e0			call write_len_string 
e05b				 
e05b 2a c3 eb			ld hl, (display_write_tmp) 
e05e 11 28 00			ld de, display_cols 
e061 19				add hl,de 
e062 22 c3 eb			ld (display_write_tmp),hl 
e065			 
e065 e5			push hl 
e066 d5			push de 
e067 c5			push bc 
e068 0e 07			ld c, 7 
e06a f7				rst $30 
e06b c1			pop bc 
e06c d1			pop de 
e06d e1			pop hl 
e06e			 
e06e				 
e06e 3e 50			ld a, kLCD_Line3 
e070			         ;   CALL fLCD_Pos       ;Position cursor to location in A 
e070 06 28			ld b, display_cols 
e072 ed 5b c3 eb		ld de, (display_write_tmp) 
e076 cd 98 e0			call write_len_string 
e079				 
e079 2a c3 eb			ld hl, (display_write_tmp) 
e07c 11 28 00			ld de, display_cols 
e07f 19				add hl,de 
e080 22 c3 eb			ld (display_write_tmp),hl 
e083			 
e083 e5			push hl 
e084 d5			push de 
e085 c5			push bc 
e086 0e 07			ld c, 7 
e088 f7				rst $30 
e089 c1			pop bc 
e08a d1			pop de 
e08b e1			pop hl 
e08c			 
e08c				 
e08c 3e 78			ld a, kLCD_Line4 
e08e			          ;  CALL fLCD_Pos       ;Position cursor to location in A 
e08e 06 28			ld b, display_cols 
e090 ed 5b c3 eb		ld de, (display_write_tmp) 
e094 cd 98 e0			call write_len_string 
e097 c9					ret 
e098			 
e098			 
e098				; write out a fixed length string given in b from de 
e098			 
e098 1a			write_len_string:   LD   A, (DE)        ;Get character from string 
e099 cd 0b e0		            CALL fLCD_Data      ;Write character to display 
e09c 13				inc de 
e09d 10 f9			djnz write_len_string 
e09f c9				ret 
e0a0			 
e0a0			 
e0a0			; eof 
# End of file firmware_serial_display.asm
e0a0			;include "firmware_key_5x10.asm" 
e0a0			;;include "firmware_key_4x10.asm" 
e0a0			include "firmware_key_serial.asm" 
e0a0			; Serial keyboard interface for SC114 
e0a0			 
e0a0			key_init: 
e0a0				; no init as handled by the SCM bios 
e0a0 c9				ret 
e0a1			 
e0a1			 
e0a1			cin_wait: 
e0a1			;	ld a, 0 
e0a1			;	ret 
e0a1			 
e0a1				;in a,(SC114_SIO_1_IN) 
e0a1			        ; Use SCM API to get from whatever console device we are using 
e0a1 c5				push bc 
e0a2 0e 01			ld c, $01 
e0a4 f7				rst $30 
e0a5 c1				pop bc 
e0a6 c9				ret 
e0a7			 
e0a7			cinndb: 	 
e0a7			cin: 
e0a7			 
e0a7			 
e0a7 c5				push bc 
e0a8			 
e0a8				; any key waiting to process? 
e0a8 0e 03			ld c, $03 
e0aa f7				rst $30 
e0ab 28 05			jr z, .cin_skip 
e0ad			 
e0ad				; yep, get it 
e0ad			 
e0ad 0e 01			ld c, $01 
e0af f7				rst $30 
e0b0 c1				pop bc 
e0b1 c9				ret 
e0b2			.cin_skip: 
e0b2 3e 00			ld a, 0 
e0b4 c1				pop bc 
e0b5 c9				ret 
e0b6			 
e0b6			 
e0b6			 
e0b6			 
# End of file firmware_key_serial.asm
e0b6			endofcode:  
e0b6			baseram:  
e0b6 00				nop 
e0b7			 
e0b7			heap_start: equ baseram+15  ; Starting address of heap 
e0b7			free_list:  equ baseram+10      ; Block struct for start of free list (MUST be 4 bytes) 
e0b7			heap_size: equ  heap_end-heap_start      ; Number of bytes available in heap   TODO make all of user ram 
e0b7			;VDU:  EQU     endofcode           ; BASIC Work space 
e0b7			; eof 
e0b7			 
# End of file os_mega_sc114.asm
e0b7
