# File debug_level2.asm
0000			 
0000			; DEBUG Level 2 - All useful debug on and memory courruption guards 
0000			 
0000			; Odd specific debug points for testing hardware dev 
0000			 
0000			;DEBUG_LEVEL0: equ 0 
0000			;DEBUG_LEVEL0: equ 0 
0000			;DEBUG_LEVEL2: equ 1 
0000			DEBUG_LEVEL: equ '2' 
0000			 
0000			DEBUG_SOUND: equ 0      
0000			DEBUG_STK_FAULT: equ 0 
0000			DEBUG_INPUT: equ 0     ; Debug input entry code 
0000			DEBUG_INPUTV2: equ 0     ; Debug input entry code 
0000			DEBUG_KEYCINWAIT: equ 0 
0000			DEBUG_KEYCIN: equ 0 
0000			DEBUG_KEY: equ 0 
0000			DEBUG_KEY_MATRIX: equ 0 
0000			DEBUG_STORECF: equ 0 
0000			DEBUG_STORESE: equ 1        ; TODO  w locks up, r returns.  
0000			DEBUG_SPI_HARD_CE0: equ 0    ; only handshake on CE0 on port A 
0000			DEBUG_SPI: equ 0    ; low level spi tests 
0000			 
0000			; Enable many break points 
0000			 
0000			DEBUG_FORTH_PARSE_EXEC: equ 0     ; 6 
0000			DEBUG_FORTH_PARSE_EXEC_SLOW: equ 0     ; 6 
0000			DEBUG_FORTH_PARSE_NEXTWORD: equ 0 
0000			DEBUG_FORTH_JP: equ 0    ; 4 
0000			DEBUG_FORTH_MALLOC: equ 0 
0000			DEBUG_FORTH_MALLOC_INT: equ 0 
0000			DEBUG_FORTH_DOT: equ 1 
0000			DEBUG_FORTH_DOT_WAIT: equ 0 
0000			DEBUG_FORTH_MATHS: equ 0 
0000			DEBUG_FORTH_TOK: equ 0    ; 4 
0000			DEBUG_FORTH_PARSE: equ 0    ; 3 
0000			DEBUG_FORTH: equ 0  ;2 
0000			DEBUG_FORTH_WORDS: equ 1   ; 1 
0000			DEBUG_FORTH_PUSH: equ 1   ; 1 
0000			DEBUG_FORTH_UWORD: equ 1   ; 1 
0000			 
0000			; Enable key point breakpoints 
0000			 
0000			DEBUG_FORTH_DOT_KEY: equ 0 
0000			DEBUG_FORTH_PARSE_KEY: equ 0   ; 5 
0000			DEBUG_FORTH_WORDS_KEY: equ 1   ; 1 
0000			 
0000			; Debug stack imbalances 
0000			 
0000			ON: equ 1 
0000			OFF: equ 0 
0000			 
0000			DEBUG_STACK_IMB: equ 0 
0000			STACK_IMB_STORE: equ 20 
0000			 
0000			; House keeping and protections 
0000			 
0000			DEBUG_FORTH_STACK_GUARD: equ 1    ; under/over flows 
0000			DEBUG_FORTH_MALLOC_GUARD: equ 1 
0000			DEBUG_FORTH_MALLOC_HIGH: equ 0     ; warn only if more than 255 chars being allocated. would be highly unusual! 
0000			FORTH_ENABLE_FREE: equ 0 
0000			FORTH_ENABLE_MALLOCFREE: equ 1 
0000			FORTH_ENABLE_DSPPOPFREE: equ 1    ; TODO BUG Seems to be OK in some situations but with SW it crashes straight away 
0000			FORTH_ENABLE_FLOATMATH: equ 0 
0000			; eof 
# End of file debug_level2.asm
# File os_mega_sc114.asm
0000			 
0000			; Hardware Platform 
0000			 
0000			BASE_SC114: equ 1 
0000			BASE_KEV: equ 0 
0000			BASE_CPM: equ 0 
0000			 
0000			ENABLE_BASIC: equ 0 
0000			 
0000			STARTUP_V1: equ 1 
0000			STARTUP_V2: equ 0 
0000			 
0000			tos:	equ 0f000h 
0000			; Using SCM API instead 
0000			;SC114_SIO_1_OUT: equ 81 
0000			;SC114_SIO_1_IN: equ 80 
0000			; 
0000			; 
0000			; CPU clock 
0000			; 
0000			CPU_CLOCK_4MHZ: equ 1 
0000			CPU_CLOCK_8MHZ: equ  0 
0000			CPU_CLOCK_10MHZ: equ  0 
0000			 
0000			; use microchip serial eeprom for storage 
0000			 
0000			STORAGE_SE: equ 0 
0000			SOUND_ENABLE: equ 0 
0000			 
0000			; the port where the PIO using the SC103 card is located 
0000			 
0000			SC103_PIO: equ 068h 
0000			 
0000			; Full OS but with the 5x10 fullsized keyboard 
0000			 
0000			display_rows: equ 4     
0000			;display_cols: equ 20 
0000			display_cols: equ 40 
0000			 
0000			key_rows: equ 5      
0000			key_cols: equ 10    
0000			 
0000			 
0000			include "main.asm" 
0000			; z80 homebrew opperating system 
0000			; 
0000			 
0000			STARTUP_ENABLE: equ 1 
0000			 
0000			 
0000			; bios jump points via rst 
0000			 
0000			if BASE_SC114 = 1  
0000			 
0000				org 8000h 
8000			endif 
8000			 
8000			if BASE_KEV = 1  
8000			 
8000				org 0h 
8000			endif 
8000			 
8000			if BASE_CPM = 1  
8000			 
8000				org 100h 
8000			endif 
8000 c3 71 96			jp coldstart     ; rst 0 - cold boot 
8003			 
8003			 
8003 ..			buildtime: db   "Build: " 
800a					include "romtimestamp.asm" 
800a ..			db '2025-09-05 21:49' 
# End of file romtimestamp.asm
801a 00				   db 0 
801b .. 32 00		debuglevel: db   "DL",DEBUG_LEVEL, 0 
801f			 
801f			 
801f			 
801f			;        nop  
801f			;        nop 
801f			;;	org 05h		; null out bdos call 
801f			; 
801f			;        nop  
801f			;        nop  
801f			;        nop 
801f			;;	org 08h 
801f			;;; 
801f			;;	jp cin		; rst 8 - char in 
801f			;;; 
801f			; 
801f			;        nop 
801f			;        nop 
801f			;        nop 
801f			;        nop 
801f			;        nop 
801f			;        nop 
801f			;        nop 
801f			;        nop 
801f			;	org 010h 
801f			;; 
801f			;	jp cout		; rest 010h  - char out 
801f			;; 
801f			;	org 01bh   
801f			; 
801f			;	;jp  		; rst 01bh   - write string to display 
801f			;	jp str_at_display 
801f			; 
801f			; 
801f			;	org 020h 
801f			; 
801f			;	; jp		 ; rst 020h - read char at screen location 
801f			; 
801f			;	org 028h 
801f			 
801f				; jp		 ; rst 028h  - storage i/o 
801f			 
801f			; 	org 030h 
801f			;	jp break_point_state 
801f			  
801f			; $30  
801f			; org 038h 
801f			; $38 
801f			 
801f			; TODO any more important entry points to add to jump table for easier coding use? 
801f			 
801f			if BASE_KEV = 1  
801f			 
801f				; need to be at $66 for nmi support 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255 
801f				jp nmi 
801f			endif 
801f			 
801f			include "firmware.asm" 
801f			  
801f			; main constants (used here and in firmware)  
801f			  
801f			; TODO have page 0 of storage as bios  
801f			  
801f			Device_A: equ 0h  
801f			Device_B: equ 040h          ; Sound  
801f			  
801f			if BASE_KEV  
801f			Device_C: equ 080h          ; Storage and ext cart devices  
801f			endif  
801f			  
801f			if BASE_SC114  
801f			Device_C: equ  SC103_PIO          ; Storage and ext cart devices  
801f			endif  
801f			  
801f			if BASE_CPM  
801f			; TODO fixup for CPM  
801f			Device_C: equ 080h          ; Storage and ext cart devices  
801f			endif  
801f			  
801f			Device_D: equ 0c0h             ; Keyboard and LCD  
801f			  
801f			; Odd specific debug points for testing hardware dev  
801f			  
801f			;if DEBUG_LEVEL0  
801f			;	include "debug_level0.asm"  
801f			;endif  
801f			;if DEBUG_LEVEL1  
801f			;	include "debug_level1.asm"  
801f			;endif  
801f			;if DEBUG_LEVEL2  
801f			;	include "debug_level2.asm"  
801f			;endif  
801f			  
801f			  
801f			CALLMONITOR: macro  
801f			;	call break_point_state  
801f			; now use the break point debug vector  
801f				call debug_vector  
801f				endm  
801f			  
801f			MALLOC_1: equ 1        ; from dk88   
801f			MALLOC_2: equ 0           ; broke  
801f			MALLOC_3: equ 0           ; really broke  
801f			MALLOC_4: equ 0              ; mine pretty basic reuse and max of 250 chars  
801f			  
801f			if BASE_KEV   
801f			;stacksize: equ 256  
801f			; each stack entry is three bytes (type + word)  
801f			stacksize: equ 3*150  
801f			  
801f			STACK_RET_SIZE: equ 64  
801f			STACK_LOOP_SIZE: equ 128  
801f			STACK_DATA_SIZE: equ 512  
801f			endif  
801f			if BASE_SC114  
801f			;tos:	equ 0f000h  
801f			stacksize: equ 256  
801f			STACK_RET_SIZE: equ 64  
801f			STACK_LOOP_SIZE: equ 128  
801f			STACK_DATA_SIZE: equ 256  
801f			endif  
801f			  
801f			if BASE_CPM  
801f			;tos:	equ 0f000h  
801f			stacksize: equ 256  
801f			STACK_RET_SIZE: equ 64  
801f			STACK_LOOP_SIZE: equ 128  
801f			STACK_DATA_SIZE: equ 256  
801f			endif  
801f			  
801f			;if STORAGE_SE == 0  
801f			STORE_BLOCK_PHY:   equ 64    ; physical block size on storage   64byte on 256k eeprom  
801f			STORE_DEVICE_MAXBLOCKS:  equ  255*2 ; how many blocks are there on this storage device  
801f			;endif  
801f			  
801f			; Block 0 at offset $3b is a flag to decide to offer auto start up - 0 = prompt 1-auto run no prompt 2 - dont run  
801f			  
801f			STORE_0_AUTORUN: equ $20  
801f			  
801f			; Block 0 at offset $20+ holds the file number to run at system startup after the display  
801f			  
801f			STORE_0_AUTOFILE: equ $21  
801f			STORE_0_BANKRUN: equ $23  
801f			STORE_0_FILERUN: equ $24  
801f			  
801f			; Block 0 offsets for settings  
801f			  
801f			; if set then skip prompt for start up and accept all  
801f			  
801f			STORE_0_QUICKSTART: equ $25  
801f			  
801f			; Blocks where directory table is held  
801f			  
801f			; Reducing the number of entries increases the max file size  
801f			  
801f			;STORE_DIR_START: equ 1  
801f			;STORE_DIR_END: equ 33  
801f			  
801f			; Blocks from where file data is stored  
801f			  
801f			;STORE_DATA_START: equ STORE_DIR_END + 1  
801f			  
801f			; Block indicators (<32 are data files)  
801f			  
801f			;STORE_BLOCK_CFG: equ $8f       ; config block  
801f			;STORE_BLOCK_DIRF: equ $8e       ; directory block free  
801f			;STORE_BLOCK_DIRU: equ $8d       ; directory block free  
801f			;STORE_BLOCK_FREE: equ $85       ; data block free  
801f			;STORE_BLOCK_AUTO: equ $89       ; auto start code  
801f			  
801f			  
801f			  
801f			; Directory entry flags  
801f			  
801f			;STORE_DIR_FREE: equ 0  
801f			;STORE_DIR_FILE:  equ 1  
801f			  
801f			; Structure offsets to directory entries  
801f			;STORE_DE_FLAG: equ 0  
801f			;STORE_DE_MAXEXT: equ 1  
801f			;STORE_DE_FILENAME: equ 2  
801f			  
801f			; Structure offsets to block 0  
801f			  
801f			;STORE_BK0_ISFOR: equ 1  
801f			;STORE_BK0_LABEL: equ 3  
801f			  
801f			; memory allocation   
801f			  
801f			chk_stund: equ tos+2           ; underflow check word  
801f			chk_stovr: equ chk_stund-stacksize -2; overflow check word  
801f			  
801f			; keyscan table needs rows x cols buffer  
801f			;key_rows: equ 5     ; TODO move out to mini and maxi + 1 null  
801f			;key_cols: equ 10    ; TODO move out to mini and maxi + 1 null  
801f			  
801f			keyscan_table_row1: equ chk_stovr -key_cols-1  
801f			keyscan_table_row2: equ keyscan_table_row1-key_cols-1  
801f			keyscan_table_row3: equ keyscan_table_row2-key_cols-1  
801f			keyscan_table_row4: equ keyscan_table_row3-key_cols-1  
801f			keyscan_table_row5: equ keyscan_table_row4-key_cols-1  
801f			keyscan_table: equ keyscan_table_row5-(key_cols*key_rows)-1  
801f			keyscan_scancol: equ keyscan_table-key_cols  
801f			;keyscan_table_len: equ key_rows*key_cols  
801f			;keybufptr: equ keyscan_table - 2  
801f			;keysymbol: equ keybufptr - 1  
801f			key_held: equ keyscan_scancol-1	; currently held  
801f			key_held_prev: equ key_held - 1   ; previously held (to detect bounce and cycle of key if required)  
801f			key_repeat_ct: equ key_held_prev - 4 ; timers (two words)  
801f			key_fa: equ key_repeat_ct -1 ;  
801f			key_fb: equ key_fa -1 ;  
801f			key_fc: equ key_fb -1 ;  
801f			key_fd: equ key_fc -1 ;  
801f			key_face_held: equ key_fd - 1   
801f			; flag for enabling/disabling various hardware diag loading via block 0 on bank 1  
801f			  
801f			hardware_config: equ key_face_held - 10  
801f			  
801f			; hardware config switches  
801f			; TODO add bitmasks on includes for hardware  
801f			; high byte for expansion ids  
801f			;     0000 0000  no card inserted  
801f			;     0000 0001  storage card inserted  
801f			;     0000 0010  spi sd card active  
801f			  
801f			;       
801f			; low byte:  
801f			;     0000 0001   4x4 keypad  
801f			;     0000 0010   full keyboard  
801f			;     0000 0011   spi/ext keyboard  
801f			;     0000 0100   20x4 lcd  
801f			;     0000 1000   40x4 lcd  
801f			;     0000 1100   spi/ext display  
801f			;     0001 0000   ide interface available  
801f			  
801f			hardware_word: equ hardware_config - 2  
801f			  
801f			; debug marker - optional display of debug point on the debug screens  
801f			  
801f			nmi_vector:  equ hardware_word - 3   ; vector to the nmi handler  
801f			debug_vector:  equ nmi_vector - 3   ; vector to the debug handler  
801f			  
801f			debug_umark: equ debug_vector - 6  ; current user mark  
801f			debug_mark: equ debug_umark - 4    ; internal word debug points  
801f			  
801f			; input_str vars  
801f			input_ptr:  equ debug_mark - 2    ; ptr to the current cursor position of string currently being edited  on entry starting   
801f			input_start:  equ input_ptr - 2    ; ptr to the start of string   
801f			input_size: equ input_start -1  ; number of chars  
801f			input_display_size: equ input_size -1  ; TODO number of chars that are displayable. if < input_size then scroll   
801f			input_at_pos: equ input_display_size - 1 ; frame buffer offset for start of input  
801f			input_under_cursor: equ input_at_pos - 1 ; char under the cursor so we can blink it  
801f			input_at_cursor: equ input_under_cursor - 1 ; offset of cursor to current start of string  
801f			input_cur_flash: equ input_at_cursor - 2 ;  timeout for cursor flash  
801f			input_cur_onoff: equ input_cur_flash - 1 ;  cursor blink on or off  
801f			input_len: equ input_cur_onoff - 5 ; length of current input  
801f			input_cursor: equ input_len - 5 ; offset of cursor to current start of string  
801f			  
801f			; cursor blink rate  
801f			CUR_BLINK_RATE: equ $09  
801f			;CUR_BLINK_RATE: equ 15  
801f			  
801f			key_actual_pressed: equ input_cursor - 1   
801f			key_symbol: equ key_actual_pressed - 1   
801f			key_shift: equ key_symbol - 1   
801f			  
801f			; Display allocation  
801f			  
801f			;display_rows: equ 4     ; move out to mini and mega files  
801f			;display_cols: equ 20  
801f			  
801f			display_fb_len: equ display_rows*display_cols  
801f			  
801f			; primary frame buffer     
801f			display_fb0: equ  key_shift-display_fb_len -1 ; -display_fb_len-1          ; cli input     TODO why is that doubling up?  
801f			; working frame buffers  
801f			display_fb1: equ  display_fb0-display_fb_len -1 ; -display_fb_len-1          ; default running program  
801f			display_fb3: equ  display_fb1-display_fb_len - 1  
801f			display_fb2: equ  display_fb3-display_fb_len - 1  
801f			;  
801f			; pointer to active frame buffer  
801f			display_fb_active: equ display_fb2 - 2  
801f			display_lcde1e2: equ display_fb_active - 1         ; 0=e1, 1=e2   For E1/E2 selection when using the lcd 4x40 display  
801f			display_write_tmp: equ display_lcde1e2 - 2  
801f			display_active:  equ display_write_tmp-3   ; current state of activity char (plus room to write string)  
801f			  
801f			;  
801f			  
801f			;; can load into de directory  
801f			cursor_col: equ display_active-1  
801f			cursor_row: equ cursor_col-1  
801f			cursor_ptr: equ cursor_row - 1     ;  actual offset into lcd memory for row and col combo  
801f			cursor_shape: equ cursor_ptr - 2   ; char used for the current cursor   
801f			  
801f			; maths vars  
801f			  
801f			LFSRSeed: equ cursor_shape -20   
801f			randData: equ LFSRSeed - 2  
801f			xrandc: equ randData - 2  
801f			stackstore: equ xrandc - 2  
801f			seed1: equ  stackstore -2   
801f			seed2: equ seed1 - 2  
801f			  
801f			; cf storage vars  
801f			  
801f			iErrorNum:  equ seed2-1         ;Error number  
801f			iErrorReg:  equ iErrorNum -1              ;Error register  
801f			iErrorVer:  equ iErrorReg - 1              ;Verify error flag  
801f			  
801f			store_bank_active: equ iErrorVer - (5 + 8 ) 		; TODO not used.  indicator of which storage banks are available to use 5 on board and 8 in cart  
801f			  
801f			STORE_BLOCK_LOG:  equ   280      ; TODO remove.... Logical block size     
801f			  
801f			store_page: equ store_bank_active-STORE_BLOCK_LOG-1            ; bigger than page size for eeprom so we can join multiple blocks if they are continuation records  
801f			;?????store_ffpage: equ store_page-STORE_BLOCK_LOG            ; page size for eeprom?????  
801f			store_readptr: equ store_page-2       ; tracks the file extent during storage_read of continuation blocks  
801f			store_readbuf: equ store_readptr-2       ; tracks the position for the buffer during storage_read of continuation blocks  
801f			store_longread: equ store_readbuf -1 ;   if zero then only read one block. If not zero then do a read for as long as required  
801f			store_tmp1: equ store_longread - 2      ; temp pointer holders during ops  
801f			store_tmp2: equ store_tmp1 - 2        ; temp pointer holders during ops  
801f			store_tmp3: equ store_tmp2 - 2        ; temp pointer holders during ops  
801f			store_tmpid: equ store_tmp3 - 1		; page temp id  
801f			store_tmpext: equ store_tmpid - 1		; file extent temp  
801f			store_readcont: equ store_tmpid - 1		; If current read results in an overflow buffer to next record flag it up  
801f			store_openaddr: equ store_readcont - 2		; file block address of current opened file for read  
801f			store_openext: equ store_openaddr - 1		; file extent of current opened file for read  
801f			store_openmaxext: equ store_openext - 1		; max extent of current opened file for read  
801f			store_filecache: equ store_openmaxext-2   ;  TODO (using just one for now)  file id + extent count cache * 5  
801f			store_tmppageid: equ store_filecache-2    ; phyical page id temp  
801f			;  
801f			; spi vars  
801f			  
801f			  
801f			spi_clktime: equ store_tmppageid - 1      ; holds the number of ms that happens between spi clock pulses  
801f			spi_cartdev: equ spi_clktime - 1      ; holds bit mask to send to portb (ext spi) devices  
801f			spi_cartdev2: equ spi_cartdev - 1      ; holds bit mask to send to portb's shift reg devices  
801f			spi_portbyte: equ spi_cartdev2 - 1      ; holds bit mask to send to spi bus   
801f			spi_device: equ spi_portbyte - 1    ; bit mask to send to porta (eeproms) devices  
801f			spi_device_id: equ spi_device - 1    ; human readable bank number  
801f			  
801f			;;;;; forth cli params  
801f			  
801f			; TODO use a different frame buffer for forth???  
801f			  
801f			f_cursor_ptr:  equ spi_device_id - 1  ; offset into frame buffer for any . or EMIT output  
801f			cli_buffer: equ f_cursor_ptr - 20     ; temp hold - maybe not needed  
801f			cli_origtoken: equ cli_buffer - 2     ; pointer to the text of token for this word being checked  
801f			cli_token: equ cli_origtoken - 2     ; pointer to the text of token for this word being checked  
801f			cli_execword: equ cli_token - 2      ; pointer to start of code for this word  
801f			cli_nextword: equ cli_execword - 2      ; pointer to start of next word in dict  
801f			cli_ptr: equ cli_nextword - 2           ; pointer to start of word to parse by forth kernel (working)  
801f			cli_origptr: equ cli_ptr - 2           ; pointer to start of word to parse which resets cli_ptr on each word test  
801f			  
801f			cli_mvdot: equ cli_origptr - 1 ;     ; true will move the cursor once something is displayed  
801f			cli_autodisplay: equ cli_mvdot - 1 ;     ; true will auto update the display (slow) otherwise need to use DRAW  
801f			cli_var_array: equ cli_autodisplay - ( 10 * 2 ) ; word or string pointer variables using V@0-V@9  
801f			cli_var_array2: equ cli_var_array - ( 26 * 2 ) ; word or string pointer variables using VAR word  
801f			cli_ret_sp: equ cli_var_array2 - 2    ; ret stack pointer  
801f			cli_loop_sp: equ cli_ret_sp - 2   ; data stack pointer  
801f			cli_data_sp: equ cli_loop_sp - 2   ; data stack pointer  
801f			  
801f			chk_ret_und: equ cli_data_sp-2           ; underflow check word  
801f			cli_ret_stack: equ chk_ret_und - STACK_RET_SIZE      ; TODO could I just use normal stack for this? - use linked list for looping  
801f			chk_ret_ovr: equ cli_ret_stack -2; overflow check word  
801f			cli_loop_stack: equ chk_ret_ovr - STACK_LOOP_SIZE      ; TODO could I just use normal stack for this? - use linked list for looping  
801f			chk_loop_ovr: equ cli_loop_stack -2; overflow check word  
801f			cli_data_stack: equ chk_loop_ovr - STACK_DATA_SIZE		 ;   
801f			chk_data_ovr: equ cli_data_stack -2; overflow check word  
801f			  
801f			os_var_array: equ chk_data_ovr - (32 * 2)      ;   32 word array for use using the SCRATCH word  
801f			  
801f			; os/forth token vars  
801f			  
801f			os_last_cmd: equ os_var_array-255  
801f			os_cli_cmd: equ os_last_cmd-255              ; cli command entry line  
801f			os_current_i: equ os_cli_cmd-2  
801f			os_cur_ptr: equ os_current_i-2  
801f			os_word_scratch: equ os_cur_ptr-30  
801f			os_tok_len: equ os_word_scratch - 2  
801f			os_tok_ptr: equ os_tok_len - 2               ; our current PC ptr  
801f			os_tok_malloc: equ os_tok_ptr - 2  
801f			os_last_new_uword: equ os_tok_malloc - 2    ; hold start of last user word added  
801f			os_input: equ os_last_new_uword-255    ; buffer for EDIT word  
801f			execscratch: equ os_input-255        ; exec cmd eval buffer  
801f			scratch: equ execscratch-255  
801f			  
801f			os_stack_1: equ scratch - 3       ; stack holding area 1  
801f			os_stack_2: equ os_stack_1 - 3       ; stack holding area 2  
801f			os_stack_3: equ os_stack_2 - 3       ; stack holding area 3  
801f			os_stack_4: equ os_stack_3 - 3       ; stack holding area 4  
801f			  
801f			  
801f			; temp locations for new word processing to save on adding more   
801f			  
801f			os_new_malloc: equ os_stack_4-2  
801f			os_new_parse_len: equ os_new_malloc - 2  
801f			os_new_word_len: equ os_new_parse_len - 2  
801f			os_new_work_ptr: equ os_new_word_len - 2  
801f			os_new_src_ptr: equ os_new_work_ptr - 2  
801f			os_new_exec: equ os_new_src_ptr - 2  
801f			os_new_exec_ptr: equ os_new_exec - 2  
801f			  
801f			; resume memory alloocations....  
801f			  
801f			;os_view_disable: equ os_new_exec_ptr - 1  
801f			os_view_af: equ os_new_exec_ptr - 2  
801f			os_view_hl: equ os_view_af -2  
801f			os_view_de: equ os_view_hl - 2  
801f			os_view_bc: equ os_view_de - 2  
801f			  
801f			; stack checksum word  
801f			if DEBUG_STACK_IMB  
801f				curframe: equ  os_view_de - 5  
801f				store_sp: equ curframe - (STACK_IMB_STORE*4)  
801f				chk_word: equ store_sp - 2		 ; this is the word to init and then check against to detect stack corruption. Held far away from all stacks  
801f			else  
801f				chk_word: equ os_view_bc - 2		 ; this is the word to init and then check against to detect stack corruption. Held far away from all stacks  
801f			endif  
801f			  
801f			; with data stack could see memory filled with junk. need some memory management   
801f			; malloc and free entry points added  
801f			  
801f			;free_list:  equ chk_word - 4     ; Block struct for start of free list (MUST be 4 bytes)  
801f			;heap_size: equ  (free_list-08100h)      ; Number of bytes available in heap   TODO make all of user ram  
801f			;;heap_start: equ free_list - heap_size  ; Starting address of heap  
801f			;heap_end: equ free_list-1  ; Starting address of heap  
801f			;heap_start: equ free_list - heap_size  ; Starting address of heap  
801f			  
801f			;heap_start: equ free_list - heap_size  ; Starting address of heap  
801f			heap_end: equ chk_word-1  ; Starting address of heap  
801f			  
801f			  
801f			;if BASE_KEV   
801f			;heap_start: equ 0800eh  ; Starting address of heap  
801f			;free_list:  equ 0800ah      ; Block struct for start of free list (MUST be 4 bytes)  
801f			;heap_size: equ  heap_end-heap_start      ; Number of bytes available in heap   TODO make all of user ram  
801f			;endif  
801f			  
801f			;if BASE_SC114  
801f			;heap_start: equ baseram+15  ; Starting address of heap  
801f			;free_list:  equ baseram+10      ; Block struct for start of free list (MUST be 4 bytes)  
801f			;endif  
801f			  
801f			  
801f			;;;;  
801f			  
801f			  
801f			; change below to point to last memory alloc above  
801f			topusermem:  equ   heap_start  
801f			  
801f			;if BASE_KEV   
801f			;baseusermem: equ 08000h  
801f			;endif  
801f			  
801f			;if BASE_SC114  
801f			;;aseusermem:     equ    12  
801f			;baseusermem:     equ    prompt  
801f			;;baseusermem:     equ    endofcode  
801f			;endif  
801f			  
801f			  
801f			; **********************************************************************  
801f			; **  Constants  
801f			; **********************************************************************  
801f			  
801f			; Constants used by this code module  
801f			kDataReg:   EQU Device_D           ;PIO port A data register  
801f			kContReg:   EQU Device_D+2           ;PIO port A control register  
801f			  
801f			  
801f			portbdata:  equ Device_D+1    ; port b data  
801f			portbctl:   equ Device_D+3    ; port b control  
801f			  
801f			  
801f			;KEY_SHIFT:   equ 5  
801f			;KEY_SYMBOLSHIFT:  equ 6  
801f			  
801f			KEY_SHIFTLOCK: equ 4  
801f			  
801f			  
801f			KEY_UP: equ 5  
801f			KEY_NEXTWORD: equ 6  
801f			KEY_PREVWORD: equ 7  
801f			KEY_BS: equ 8  
801f			KEY_TAB:  equ 9  
801f			KEY_DOWN: equ 10  
801f			KEY_LEFT: equ 11  
801f			KEY_RIGHT: equ 12  
801f			KEY_CR:   equ 13  
801f			KEY_HOME: equ 14  
801f			KEY_END: equ 15  
801f			  
801f			KEY_F1: equ 16  
801f			KEY_F2: equ 17  
801f			KEY_F3: equ 18  
801f			KEY_F4: equ 19  
801f			  
801f			KEY_F5: equ 20  
801f			KEY_F6: equ 21  
801f			KEY_F7: equ 22  
801f			KEY_F8: equ 23  
801f			  
801f			KEY_F9: equ 24  
801f			KEY_F10: equ 25  
801f			KEY_F11: equ 26  
801f			KEY_F12: equ 27  
801f			  
801f			;if DEBUG_KEY  
801f			;	KEY_MATRIX_NO_PRESS: equ '.'  
801f			;	KEY_SHIFT:   equ '.'  
801f			;	KEY_SYMBOLSHIFT:  equ '.'  
801f			;else  
801f				KEY_SHIFT:   equ '~'  
801f				KEY_SYMBOLSHIFT:  equ '~'  
801f				KEY_MATRIX_NO_PRESS: equ '~'  
801f			;endi  
801f			  
801f			  
801f			  
801f			  
801f			; Macro to make adding debug marks easier  
801f			  
801f			DMARK: macro str  
801f				push af  
801f				ld a, (.dmark)  
801f				ld (debug_mark),a  
801f				ld a, (.dmark+1)  
801f				ld (debug_mark+1),a  
801f				ld a, (.dmark+2)  
801f				ld (debug_mark+2),a  
801f				jr .pastdmark  
801f			.dmark: db str  
801f			.pastdmark: pop af  
801f			  
801f			endm  
801f			  
801f			  
801f			; macro to detect for stack imbalances  
801f			  
801f			include "stackimbal.asm"  
801f			; Macro and code to detect stock imbalances 
801f			 
801f			SPPUSH: equ 0 
801f			 
801f			; Add a stack frame which can be checked before return 
801f			 
801f			STACKFRAME: macro onoff frame1 frame2 
801f			 
801f				if DEBUG_STACK_IMB 
801f					if onoff 
801f						; save current SP 
801f						exx 
801f			 
801f						ld de, frame1 
801f						ld a, d 
801f						ld hl, curframe 
801f						call hexout 
801f						ld a, e 
801f						ld hl, curframe+2 
801f						call hexout 
801f			  
801f						ld hl, frame1 
801f						push hl 
801f						ld hl, frame2 
801f						push hl 
801f						exx 
801f					endif 
801f					 
801f				endif 
801f			endm 
801f			 
801f			STACKFRAMECHK: macro onoff frame1 frame2 
801f			 
801f					 
801f				if DEBUG_STACK_IMB 
801f					if onoff 
801f						exx 
801f						; check stack frame SP 
801f			 
801f						ld hl, frame2 
801f						pop de   ; frame2 
801f			 
801f						call cmp16 
801f						jr nz, .spnosame 
801f						 
801f			 
801f						ld hl, frame1 
801f						pop de   ; frame1 
801f			 
801f						call cmp16 
801f						jr z, .spfrsame 
801f			 
801f						.spnosame: call showsperror 
801f			 
801f						.spfrsame: nop 
801f			 
801f						exx 
801f					endif 
801f					 
801f				endif 
801f			 
801f			 
801f			endm 
801f			 
801f			 
801f			; for a sub routine, wrap SP collection and comparisons 
801f			 
801f			; Usage: 
801f			; 
801f			; SAVESP ON/OFF 0-STACK_IMB_STORE/4 
801f			; CHECKSP ON/OFF 0-STACK_IMB_STORE/4 
801f			 
801f			SAVESP: macro onoff storeword 
801f			 
801f				if DEBUG_STACK_IMB 
801f					if onoff 
801f						; save current SP 
801f			 
801f						ld (store_sp+(storeword*4)), sp 
801f			 
801f					endif 
801f					 
801f				endif 
801f			 
801f			endm 
801f			 
801f			CHECKSP: macro onoff storeword 
801f			 
801f				if DEBUG_STACK_IMB 
801f					if onoff 
801f			 
801f						; save SP after last save 
801f				 
801f						ld (store_sp+(storeword*4)+2), sp 
801f			 
801f						push hl 
801f						ld hl, store_sp+(storeword*4) 
801f						call check_stack_sp  
801f						pop hl 
801f			 
801f			 
801f					endif 
801f					 
801f				endif 
801f			 
801f			endm 
801f			 
801f			if DEBUG_STACK_IMB 
801f			 
801f			check_stack_sp: 
801f					push de 
801f			 
801f					ld e, (hl) 
801f					inc hl 
801f					ld d, (hl) 
801f					inc hl 
801f			 
801f					push de 
801f			 
801f			 
801f					ld e, (hl) 
801f					inc hl 
801f					ld d, (hl) 
801f					inc hl 
801f			 
801f					pop hl 
801f			 
801f			 
801f					; check to see if the same 
801f			 
801f					call cmp16 
801f					jr z, .spsame 
801f			 
801f					; not same 
801f			 
801f					call showsperror 
801f			.spsame: 
801f			 
801f					pop de 
801f			 
801f					ret 
801f			 
801f			.sperr:  db "Stack imbalance",0 
801f			 
801f			 
801f			showsperror: 
801f			 
801f			 
801f				push hl 
801f				push af 
801f				push de 
801f				call clear_display 
801f				ld de, .sperr 
801f				ld a,0 
801f			;	ld de,os_word_scratch 
801f				call str_at_display 
801f				ld a, display_row_1+17 
801f				ld de, debug_mark 
801f				call str_at_display 
801f				ld a, 0 
801f				ld (curframe+4),a 
801f				ld hl, curframe 
801f				ld de, os_word_scratch 
801f				ld a, display_row_4 
801f				call str_at_display 
801f				call update_display 
801f				;call break_point_state 
801f				call cin_wait 
801f			 
801f			;	ld a, ' ' 
801f			;	ld (os_view_disable), a 
801f				call bp_on 
801f				pop de	 
801f				pop af 
801f				pop hl 
801f				CALLMONITOR 
801f				ret 
801f			 
801f			endif 
801f			 
801f			 
801f			 
801f			; eof 
# End of file stackimbal.asm
801f			  
801f			;TODO macro to calc col and row offset into screen  
801f			  
801f			  
801f			  
801f			hardware_init:  
801f			  
801f				  
801f			  
801f					;ld a, 0  
801f					;ld (hardware_diag), a  
801f			  
801f					; clear all the buffers  
801f			  
801f 21 0a ed				ld hl, display_fb1  
8022 22 c6 eb				ld (display_fb_active), hl  
8025			  
8025 cd bd 8a				call clear_display  
8028			  
8028 21 c8 eb				ld hl, display_fb2  
802b 22 c6 eb				ld (display_fb_active), hl  
802e			  
802e cd bd 8a				call clear_display  
8031			  
8031					; init primary frame buffer area  
8031 21 ab ed				ld hl, display_fb0  
8034 22 c6 eb				ld (display_fb_active), hl  
8037			  
8037 cd bd 8a				call clear_display  
803a			  
803a			  
803a cd a4 df				call lcd_init		; lcd hardware first as some screen functions called during key_init e.g. cursor shapes  
803d			  
803d cd 46 e0			call key_init  
8040 cd ad 80			call storage_init  
8043			  
8043				; setup malloc functions  
8043			  
8043				if MALLOC_1  
8043 cd a1 90				call  heap_init  
8046				endif  
8046				if MALLOC_4  
8046					call  heap_init  
8046				endif  
8046			  
8046				; init sound hardware if present  
8046			  
8046				if SOUND_ENABLE  
8046					call sound_init  
8046				endif  
8046			  
8046				; lcd test sequence  
8046					  
8046 cd e0 8a			call update_display  
8049 cd 00 8a			call delay1s  
804c 3e 2b			ld a,'+'  
804e cd c2 8a			call fill_display  
8051 cd e0 8a			call update_display  
8054 cd 00 8a			call delay1s  
8057 3e 2a			ld a,'*'  
8059 cd c2 8a			call fill_display  
805c cd e0 8a			call update_display  
805f cd 00 8a			call delay1s  
8062 3e 2d			ld a,'-'  
8064 cd c2 8a			call fill_display  
8067 cd e0 8a			call update_display  
806a cd 00 8a			call delay1s  
806d			  
806d			; boot splash screen  
806d			if display_cols == 20	  
806d			        ld a, display_row_1    
806d			else  
806d 3e 0a		        ld a, display_row_1 +10   
806f			endif  
806f 11 cf 95			ld de, prom_bootmsg  
8072 cd d0 8a			call str_at_display  
8075 cd e0 8a			call update_display  
8078			  
8078			  
8078 cd 00 8a			call delay1s  
807b cd 00 8a			call delay1s  
807e			if display_cols == 20	  
807e			            LD   A, display_row_3+2  
807e			else  
807e 3e 5c		            LD   A, display_row_3+12  
8080			endif  
8080 11 e4 95			ld de, prom_bootmsg1  
8083 cd d0 8a			call str_at_display  
8086			; display debug level  
8086 3e 78		            LD   A, display_row_4  
8088 11 1b 80			ld de, debuglevel  
808b cd d0 8a			call str_at_display  
808e			  
808e cd e0 8a			call update_display  
8091 cd 00 8a			call delay1s  
8094 cd 00 8a			call delay1s  
8097			  
8097			;	ld a, display_row_4+3  
8097			;	ld de, bootmsg2  
8097			;	call str_at_display  
8097			;	call update_display  
8097			;	call delay1s  
8097			;	call delay1s  
8097			  
8097			; debug mark setup  
8097			  
8097 3e 5f		ld a, '_'  
8099 32 65 ee		ld (debug_mark),a  
809c 32 66 ee		ld (debug_mark+1),a  
809f 32 67 ee		ld (debug_mark+2),a  
80a2 3e 00		ld a,0  
80a4 32 68 ee		ld (debug_mark+3),a  
80a7 32 69 ee		ld (debug_umark),a  
80aa			  
80aa c9					ret  
80ab			  
80ab			  
80ab			;bootmsg2:	db "Firmware v0.1",0  
80ab			  
80ab			; a 4x20 lcd  
80ab			; cout for display, low level positioning and writing functions (TODO) for hardware abstraction  
80ab			  
80ab			;if display_cols == 20  
80ab			;	include "firmware_lcd_4x20.asm"  
80ab			;endif  
80ab			  
80ab			;if display_cols == 40  
80ab			;	include "firmware_lcd_4x40.asm"  
80ab			;endif  
80ab			  
80ab			;  
80ab			; TODO use the low spare two pins on port a of display pio to bit bang a serial out video display to an esp  
80ab			; TODO abstract the bit bang video out interface for dual display  
80ab			; TODO wire video out to tx pin on rc2014 bus  
80ab			  
80ab			; must supply cin, and cin_wait for low level hardware abstraction   
80ab			; moved text_input entry points to here and leave the firmware hardware modules as abstraction layer  
80ab			; test scancode  
80ab			  
80ab			;;;;;  
80ab			;;;  
80ab			; Moved out to mini and maxi versions  
80ab			;  
80ab			; include "firmware_key_4x4.asm"  
80ab			; using existing 4 wire x 4 resistor array for input  
80ab			;include "firmware_key_4x10.asm"  
80ab			; need to mod the board for 5 rows due to resistor array  
80ab			;include "firmware_key_5x10.asm"  
80ab			  
80ab			; storage hardware interface  
80ab			  
80ab			; use microchip serial eeprom for storage  
80ab			  
80ab			  
80ab			if STORAGE_SE  
80ab				include "firmware_spi.asm"  
80ab				include "firmware_seeprom.asm"  
80ab			else  
80ab			   ; create some stubs for the labels  
80ab c9			se_readbyte: ret  
80ac c9			se_writebyte: ret  
80ad c9			storage_init: ret  
80ae			  
80ae			endif  
80ae			  
80ae			; use cf card for storage - throwing timeout errors. Hardware or software?????  
80ae			;include "firmware_cf.asm"  
80ae			  
80ae			; load up high level storage hardward abstractions  
80ae			include "firmware_storage.asm"  
80ae			 
80ae			; persisent storage hardware abstraction layer  
80ae			 
80ae			 
80ae			 
80ae			; Block 0 on storage is a config state 
80ae			 
80ae			 
80ae			 
80ae			; TODO add read phy block and write phy block functions 
80ae			; TODO add presence check (i.e. read write byte 0 of block 0 for eeprom) 
80ae			 
80ae			; Abstraction layer  
80ae			 
80ae			; Logocial block size is same size as physical size - using tape concept 
80ae			 
80ae			;STORE_BLOCK_PHY2LOG: equ (STORE_BLOCK_LOG/STORE_BLOCK_PHY)       ; How many physical blocks make up a logical block 
80ae			;STORE_BLOCK_MAX: equ (STORE_BLOCK_PHY*STORE_DEVICE_MAXBLOCKS)/255    ; Max number of logical blocks on the device 
80ae			 
80ae			 
80ae			 
80ae			; Filesystem layout (Logical layout) 
80ae			; 
80ae			; Block 0 - Bank config  
80ae			; 
80ae			;      Byte - 0 file id counter 
80ae			;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
80ae			;      Byte - 3-20 zero terminated bank label 
80ae			; 
80ae			; Block 1 > File storage 
80ae			; 
80ae			;      Byte 0 file id    - block 0 file details 
80ae			;      Byte 1 block id - block 0 is file  
80ae			;            Byte 2-15 - File name 
80ae			; 
80ae			;       - to end of block data 
80ae			; 
80ae			 
80ae			; Get ID for the file named in pointer held HL 
80ae			; Returns ID in HL = 255 if no file found 
80ae			 
80ae			storage_getid: 
80ae			 
80ae 22 6d ea			ld (store_tmp1), hl 
80b1			 
80b1				if DEBUG_STORESE 
80b1					DMARK "SGI" 
80b1 f5				push af  
80b2 3a c6 80			ld a, (.dmark)  
80b5 32 65 ee			ld (debug_mark),a  
80b8 3a c7 80			ld a, (.dmark+1)  
80bb 32 66 ee			ld (debug_mark+1),a  
80be 3a c8 80			ld a, (.dmark+2)  
80c1 32 67 ee			ld (debug_mark+2),a  
80c4 18 03			jr .pastdmark  
80c6 ..			.dmark: db "SGI"  
80c9 f1			.pastdmark: pop af  
80ca			endm  
# End of macro DMARK
80ca					CALLMONITOR 
80ca cd 6f ee			call debug_vector  
80cd				endm  
# End of macro CALLMONITOR
80cd				endif 
80cd				; get block 0 and set counter for number of files to scan 
80cd			 
80cd cd 38 82			call storage_get_block_0 
80d0			 
80d0 3a 74 ea			ld a, (store_page) 
80d3 47				ld b, a 
80d4			 
80d4				; get extent 0 of each file id 
80d4			 
80d4				if DEBUG_STORESE 
80d4					DMARK "SGc" 
80d4 f5				push af  
80d5 3a e9 80			ld a, (.dmark)  
80d8 32 65 ee			ld (debug_mark),a  
80db 3a ea 80			ld a, (.dmark+1)  
80de 32 66 ee			ld (debug_mark+1),a  
80e1 3a eb 80			ld a, (.dmark+2)  
80e4 32 67 ee			ld (debug_mark+2),a  
80e7 18 03			jr .pastdmark  
80e9 ..			.dmark: db "SGc"  
80ec f1			.pastdmark: pop af  
80ed			endm  
# End of macro DMARK
80ed					CALLMONITOR 
80ed cd 6f ee			call debug_vector  
80f0				endm  
# End of macro CALLMONITOR
80f0				endif 
80f0 60			.getloop:	ld h, b 
80f1 2e 00				ld l, 0 
80f3 c5					push bc 
80f4			 
80f4 11 74 ea				ld de, store_page 
80f7				if DEBUG_STORESE 
80f7					DMARK "SGr" 
80f7 f5				push af  
80f8 3a 0c 81			ld a, (.dmark)  
80fb 32 65 ee			ld (debug_mark),a  
80fe 3a 0d 81			ld a, (.dmark+1)  
8101 32 66 ee			ld (debug_mark+1),a  
8104 3a 0e 81			ld a, (.dmark+2)  
8107 32 67 ee			ld (debug_mark+2),a  
810a 18 03			jr .pastdmark  
810c ..			.dmark: db "SGr"  
810f f1			.pastdmark: pop af  
8110			endm  
# End of macro DMARK
8110					CALLMONITOR 
8110 cd 6f ee			call debug_vector  
8113				endm  
# End of macro CALLMONITOR
8113				endif 
8113 cd e0 86				call storage_read 
8116 cd 13 8d				call ishlzero 
8119 28 2d				jr z, .gap 
811b					 
811b					; have a file name read. Is it one we want. 
811b			 
811b 2a 6d ea				ld hl, (store_tmp1) 
811e 11 77 ea				ld de, store_page+3   ; file name 
8121			 
8121				if DEBUG_STORESE 
8121					DMARK "SGc" 
8121 f5				push af  
8122 3a 36 81			ld a, (.dmark)  
8125 32 65 ee			ld (debug_mark),a  
8128 3a 37 81			ld a, (.dmark+1)  
812b 32 66 ee			ld (debug_mark+1),a  
812e 3a 38 81			ld a, (.dmark+2)  
8131 32 67 ee			ld (debug_mark+2),a  
8134 18 03			jr .pastdmark  
8136 ..			.dmark: db "SGc"  
8139 f1			.pastdmark: pop af  
813a			endm  
# End of macro DMARK
813a					CALLMONITOR 
813a cd 6f ee			call debug_vector  
813d				endm  
# End of macro CALLMONITOR
813d				endif 
813d cd 88 90				call strcmp 
8140 20 06				jr nz, .gap   ; not this one 
8142			 
8142 c1				        pop bc 
8143			 
8143 26 00				ld h, 0 
8145 68					ld l, b 
8146 18 22				jr .getdone 
8148						 
8148			 
8148			 
8148			 
8148			.gap: 
8148				if DEBUG_STORESE 
8148					DMARK "SGg" 
8148 f5				push af  
8149 3a 5d 81			ld a, (.dmark)  
814c 32 65 ee			ld (debug_mark),a  
814f 3a 5e 81			ld a, (.dmark+1)  
8152 32 66 ee			ld (debug_mark+1),a  
8155 3a 5f 81			ld a, (.dmark+2)  
8158 32 67 ee			ld (debug_mark+2),a  
815b 18 03			jr .pastdmark  
815d ..			.dmark: db "SGg"  
8160 f1			.pastdmark: pop af  
8161			endm  
# End of macro DMARK
8161					CALLMONITOR 
8161 cd 6f ee			call debug_vector  
8164				endm  
# End of macro CALLMONITOR
8164				endif 
8164			 
8164 c1					pop bc 
8165 10 89				djnz .getloop 
8167 21 ff 00				ld hl, 255 
816a			.getdone: 
816a			 
816a				if DEBUG_STORESE 
816a					DMARK "SGe" 
816a f5				push af  
816b 3a 7f 81			ld a, (.dmark)  
816e 32 65 ee			ld (debug_mark),a  
8171 3a 80 81			ld a, (.dmark+1)  
8174 32 66 ee			ld (debug_mark+1),a  
8177 3a 81 81			ld a, (.dmark+2)  
817a 32 67 ee			ld (debug_mark+2),a  
817d 18 03			jr .pastdmark  
817f ..			.dmark: db "SGe"  
8182 f1			.pastdmark: pop af  
8183			endm  
# End of macro DMARK
8183					CALLMONITOR 
8183 cd 6f ee			call debug_vector  
8186				endm  
# End of macro CALLMONITOR
8186				endif 
8186			 
8186 c9				ret 
8187			 
8187			 
8187			 
8187			 
8187			 
8187			 
8187			 
8187			 
8187			; Read Block 
8187			; ---------- 
8187			; 
8187			; With current bank 
8187			;  
8187			; Get block number to read 
8187			; Load physical blocks starting at start block into buffer 
8187			 
8187			; de points to buffer to use 
8187			; hl holds logical block number  
8187			 
8187			storage_read_block: 
8187			 
8187				; TODO bank selection 
8187			 
8187				; for each of the physical blocks read it into the buffer 
8187 06 40			ld b, STORE_BLOCK_PHY 
8189			 
8189				if DEBUG_STORESE 
8189 d5					push de 
818a				endif 
818a				 
818a			.rl1:    
818a			 
818a				; read physical block at hl into de 
818a			        ; increment hl and de to next read position on exit 
818a			 
818a e5				push hl 
818b d5				push de	 
818c c5				push bc 
818d			;	if DEBUG_STORESE 
818d			;		push af 
818d			;		ld a, 'R' 
818d			;		ld (debug_mark),a 
818d			;		pop af 
818d			;		CALLMONITOR 
818d			;	endif 
818d cd ab 80			call se_readbyte 
8190			;	if DEBUG_STORESE 
8190			;		ld a,(spi_portbyte) 
8190			;		ld l, a 
8190			;		push af 
8190			;		ld a, '1' 
8190			;		ld (debug_mark),a 
8190			;		pop af 
8190			;		CALLMONITOR 
8190			;	endif 
8190 c1				pop bc 
8191 d1				pop de 
8192 e1				pop hl 
8193 12				ld (de),a 
8194 23				inc hl 
8195 13				inc de 
8196			 
8196			;	if DEBUG_STORESE 
8196			;		push af 
8196			;		ld a, 'r' 
8196			;		ld (debug_mark),a 
8196			;		pop af 
8196			;		CALLMONITOR 
8196			;	endif 
8196			 
8196 10 f2			djnz .rl1 
8198			 
8198				if DEBUG_STORESE 
8198					DMARK "SRB" 
8198 f5				push af  
8199 3a ad 81			ld a, (.dmark)  
819c 32 65 ee			ld (debug_mark),a  
819f 3a ae 81			ld a, (.dmark+1)  
81a2 32 66 ee			ld (debug_mark+1),a  
81a5 3a af 81			ld a, (.dmark+2)  
81a8 32 67 ee			ld (debug_mark+2),a  
81ab 18 03			jr .pastdmark  
81ad ..			.dmark: db "SRB"  
81b0 f1			.pastdmark: pop af  
81b1			endm  
# End of macro DMARK
81b1 d1					pop de 
81b2			; 
81b2			;		push af 
81b2			;		ld a, 'R' 
81b2			;		ld (debug_mark),a 
81b2			;		pop af 
81b2					CALLMONITOR 
81b2 cd 6f ee			call debug_vector  
81b5				endm  
# End of macro CALLMONITOR
81b5				endif 
81b5 c9				ret	 
81b6				 
81b6			 
81b6			; File Size 
81b6			; --------- 
81b6			; 
81b6			;   hl file id 
81b6			; 
81b6			;  returns in hl the number of blocks 
81b6			 
81b6			storage_file_size: 
81b6 5d				ld e, l 
81b7 16 00			ld d, 0 
81b9 21 40 00			ld hl, STORE_BLOCK_PHY 
81bc					if DEBUG_FORTH_WORDS 
81bc						DMARK "SIZ" 
81bc f5				push af  
81bd 3a d1 81			ld a, (.dmark)  
81c0 32 65 ee			ld (debug_mark),a  
81c3 3a d2 81			ld a, (.dmark+1)  
81c6 32 66 ee			ld (debug_mark+1),a  
81c9 3a d3 81			ld a, (.dmark+2)  
81cc 32 67 ee			ld (debug_mark+2),a  
81cf 18 03			jr .pastdmark  
81d1 ..			.dmark: db "SIZ"  
81d4 f1			.pastdmark: pop af  
81d5			endm  
# End of macro DMARK
81d5						CALLMONITOR 
81d5 cd 6f ee			call debug_vector  
81d8				endm  
# End of macro CALLMONITOR
81d8					endif 
81d8 cd ba 84			call storage_findnextid 
81db			 
81db cd 13 8d			call ishlzero 
81de			;	ld a, l 
81de			;	add h 
81de			;	cp 0 
81de c8				ret z			; block not found so EOF 
81df			 
81df 11 74 ea			ld de, store_page 
81e2 cd 87 81			call storage_read_block 
81e5			 
81e5 3a 76 ea			ld a, (store_page+2)	 ; get extent count 
81e8 6f				ld l, a 
81e9 26 00			ld h, 0 
81eb c9			 	ret 
81ec			 
81ec			 
81ec			; Write Block 
81ec			; ----------- 
81ec			; 
81ec			; With current bank 
81ec			;  
81ec			; Get block number to write 
81ec			; Write physical blocks starting at start block from buffer 
81ec			  
81ec			storage_write_block: 
81ec				; TODO bank selection 
81ec			 
81ec				; for each of the physical blocks read it into the buffer 
81ec 06 40			ld b, STORE_BLOCK_PHY 
81ee			 
81ee				if DEBUG_STORESE 
81ee					DMARK "SWB" 
81ee f5				push af  
81ef 3a 03 82			ld a, (.dmark)  
81f2 32 65 ee			ld (debug_mark),a  
81f5 3a 04 82			ld a, (.dmark+1)  
81f8 32 66 ee			ld (debug_mark+1),a  
81fb 3a 05 82			ld a, (.dmark+2)  
81fe 32 67 ee			ld (debug_mark+2),a  
8201 18 03			jr .pastdmark  
8203 ..			.dmark: db "SWB"  
8206 f1			.pastdmark: pop af  
8207			endm  
# End of macro DMARK
8207			 
8207					;push af 
8207					;ld a, 'W' 
8207					;ld (debug_mark),a 
8207					;pop af 
8207					CALLMONITOR 
8207 cd 6f ee			call debug_vector  
820a				endm  
# End of macro CALLMONITOR
820a				endif 
820a			 
820a			; might not be working 
820a			;	call se_writepage 
820a			 
820a			;	ret 
820a			; 
820a			 
820a			 
820a			 
820a			.wl1:    
820a			 
820a				; read physical block at hl into de 
820a			        ; increment hl and de to next read position on exit 
820a			 
820a e5				push hl 
820b d5				push de	 
820c c5				push bc 
820d 1a				ld a,(de) 
820e				;if DEBUG_STORESE 
820e			;		push af 
820e			;		ld a, 'W' 
820e			;		ld (debug_mark),a 
820e			;		pop af 
820e			;		CALLMONITOR 
820e			;	endif 
820e cd ac 80			call se_writebyte 
8211			;	call delay250ms 
8211 00				nop 
8212 00				nop 
8213 00				nop 
8214			;	if DEBUG_STORESE 
8214			;		push af 
8214			;		ld a, 'w' 
8214			;		ld (debug_mark),a 
8214			;		pop af 
8214			;		CALLMONITOR 
8214			;	endif 
8214 c1				pop bc 
8215 d1				pop de 
8216 e1				pop hl 
8217 23				inc hl 
8218 13				inc de 
8219			 
8219			 
8219 10 ef			djnz .wl1 
821b			 
821b				if DEBUG_STORESE 
821b					DMARK "SW2" 
821b f5				push af  
821c 3a 30 82			ld a, (.dmark)  
821f 32 65 ee			ld (debug_mark),a  
8222 3a 31 82			ld a, (.dmark+1)  
8225 32 66 ee			ld (debug_mark+1),a  
8228 3a 32 82			ld a, (.dmark+2)  
822b 32 67 ee			ld (debug_mark+2),a  
822e 18 03			jr .pastdmark  
8230 ..			.dmark: db "SW2"  
8233 f1			.pastdmark: pop af  
8234			endm  
# End of macro DMARK
8234			 
8234					;push af 
8234					;ld a, 'W' 
8234					;ld (debug_mark),a 
8234					;pop af 
8234					CALLMONITOR 
8234 cd 6f ee			call debug_vector  
8237				endm  
# End of macro CALLMONITOR
8237				endif 
8237 c9				ret	 
8238			 
8238			; Init bank 
8238			; --------- 
8238			; 
8238			; With current bank 
8238			; 
8238			; Setup block 0 config 
8238			;     Set 0 file id counter 
8238			;     Set formatted byte pattern 
8238			;     Zero out bank label 
8238			;      
8238			; For every logical block write 0-1 byte as null 
8238			 
8238			storage_get_block_0: 
8238			 
8238				; TODO check presence 
8238			 
8238				; get block 0 config 
8238			 
8238 21 00 00			ld hl, 0 
823b 11 74 ea			ld de, store_page 
823e cd 87 81			call storage_read_block 
8241			 
8241				if DEBUG_STORESE 
8241					DMARK "SB0" 
8241 f5				push af  
8242 3a 56 82			ld a, (.dmark)  
8245 32 65 ee			ld (debug_mark),a  
8248 3a 57 82			ld a, (.dmark+1)  
824b 32 66 ee			ld (debug_mark+1),a  
824e 3a 58 82			ld a, (.dmark+2)  
8251 32 67 ee			ld (debug_mark+2),a  
8254 18 03			jr .pastdmark  
8256 ..			.dmark: db "SB0"  
8259 f1			.pastdmark: pop af  
825a			endm  
# End of macro DMARK
825a 11 74 ea				ld de, store_page 
825d			;		push af 
825d			;		ld a, 'i' 
825d			;		ld (debug_mark),a 
825d			;		pop af 
825d					CALLMONITOR 
825d cd 6f ee			call debug_vector  
8260				endm  
# End of macro CALLMONITOR
8260				endif 
8260			 
8260				; is this area formatted? 
8260			 
8260			;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
8260 2a 75 ea			ld hl, (store_page+1) 
8263 3e 80			ld a,0x80 
8265 bd				cp l 
8266 20 22			jr nz, .ininotformatted 
8268				; do a double check 
8268 3e 27			ld a, 0x27 
826a bc				cp h 
826b 20 1d			jr nz, .ininotformatted 
826d			 
826d				; formatted then 
826d			 
826d				if DEBUG_STORESE 
826d					DMARK "SB1" 
826d f5				push af  
826e 3a 82 82			ld a, (.dmark)  
8271 32 65 ee			ld (debug_mark),a  
8274 3a 83 82			ld a, (.dmark+1)  
8277 32 66 ee			ld (debug_mark+1),a  
827a 3a 84 82			ld a, (.dmark+2)  
827d 32 67 ee			ld (debug_mark+2),a  
8280 18 03			jr .pastdmark  
8282 ..			.dmark: db "SB1"  
8285 f1			.pastdmark: pop af  
8286			endm  
# End of macro DMARK
8286					;push af 
8286					;ld a, 'I' 
8286					;ld (debug_mark),a 
8286					;pop af 
8286					CALLMONITOR 
8286 cd 6f ee			call debug_vector  
8289				endm  
# End of macro CALLMONITOR
8289				endif 
8289 c9				ret 
828a			 
828a			.ininotformatted: 
828a				; bank not formatted so poke various bits to make sure 
828a			 
828a				if DEBUG_STORESE 
828a					DMARK "SB2" 
828a f5				push af  
828b 3a 9f 82			ld a, (.dmark)  
828e 32 65 ee			ld (debug_mark),a  
8291 3a a0 82			ld a, (.dmark+1)  
8294 32 66 ee			ld (debug_mark+1),a  
8297 3a a1 82			ld a, (.dmark+2)  
829a 32 67 ee			ld (debug_mark+2),a  
829d 18 03			jr .pastdmark  
829f ..			.dmark: db "SB2"  
82a2 f1			.pastdmark: pop af  
82a3			endm  
# End of macro DMARK
82a3					;push af 
82a3					;ld a, 'f' 
82a3					;ld (debug_mark),a 
82a3					;pop af 
82a3					CALLMONITOR 
82a3 cd 6f ee			call debug_vector  
82a6				endm  
# End of macro CALLMONITOR
82a6				endif 
82a6			 
82a6 cd c3 89			call storage_clear_page 
82a9			 
82a9 21 74 ea			ld hl, store_page 
82ac 3e 00			ld a, 0 
82ae				 
82ae 77				ld (hl),a   ; reset file counter 
82af			 
82af 21 80 27			ld hl, 0x2780     ;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
82b2 22 75 ea		 	ld (store_page+1), hl	 
82b5			 
82b5				; set default label 
82b5			 
82b5 21 51 83			ld hl, .defaultbanklabl 
82b8 11 77 ea		 	ld de, store_page+3 
82bb 01 0f 00			ld bc, 15 
82be ed b0			ldir 
82c0			 
82c0				; Append the current bank id 
82c0 21 80 ea			ld hl, store_page+3+9 
82c3 3a 59 ea			ld a, (spi_device_id) 
82c6 77				ld (hl), a 
82c7			 
82c7				; save default page 0 
82c7			 
82c7 21 00 00			ld hl, 0 
82ca 11 74 ea			ld de, store_page 
82cd				if DEBUG_STORESE 
82cd					DMARK "SB3" 
82cd f5				push af  
82ce 3a e2 82			ld a, (.dmark)  
82d1 32 65 ee			ld (debug_mark),a  
82d4 3a e3 82			ld a, (.dmark+1)  
82d7 32 66 ee			ld (debug_mark+1),a  
82da 3a e4 82			ld a, (.dmark+2)  
82dd 32 67 ee			ld (debug_mark+2),a  
82e0 18 03			jr .pastdmark  
82e2 ..			.dmark: db "SB3"  
82e5 f1			.pastdmark: pop af  
82e6			endm  
# End of macro DMARK
82e6			;		push af 
82e6			;		ld a, 'F' 
82e6			;		ld (debug_mark),a 
82e6			;		pop af 
82e6					CALLMONITOR 
82e6 cd 6f ee			call debug_vector  
82e9				endm  
# End of macro CALLMONITOR
82e9				endif 
82e9 cd ec 81			call storage_write_block 
82ec				if DEBUG_STORESE 
82ec					DMARK "SB4" 
82ec f5				push af  
82ed 3a 01 83			ld a, (.dmark)  
82f0 32 65 ee			ld (debug_mark),a  
82f3 3a 02 83			ld a, (.dmark+1)  
82f6 32 66 ee			ld (debug_mark+1),a  
82f9 3a 03 83			ld a, (.dmark+2)  
82fc 32 67 ee			ld (debug_mark+2),a  
82ff 18 03			jr .pastdmark  
8301 ..			.dmark: db "SB4"  
8304 f1			.pastdmark: pop af  
8305			endm  
# End of macro DMARK
8305			;		push af 
8305			;		ld a, '>' 
8305			;		ld (debug_mark),a 
8305			;		pop af 
8305					CALLMONITOR 
8305 cd 6f ee			call debug_vector  
8308				endm  
# End of macro CALLMONITOR
8308				endif 
8308			 
8308 00				nop 
8309 00				nop 
830a 00				nop 
830b			 
830b				; now set 0 in every page to mark as a free block 
830b			 
830b 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
830d 21 40 00			ld hl, STORE_BLOCK_PHY 
8310			 
8310 3e 00		.setmark1:   	ld a,0 
8312 e5					push hl 
8313 c5					push bc 
8314 cd ac 80				call se_writebyte 
8317 3e 0a			ld a, 10 
8319 cd e5 89			call aDelayInMS 
831c 23				inc hl 
831d cd ac 80				call se_writebyte 
8320 3e 0a			ld a, 10 
8322 cd e5 89			call aDelayInMS 
8325 2b				dec hl 
8326 c1					pop bc 
8327 e1					pop hl 
8328 3e 40				ld a, STORE_BLOCK_PHY 
832a cd ea 8c				call addatohl 
832d 10 e1				djnz .setmark1 
832f			 
832f 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
8331 3e 00		.setmark2:   	ld a,0 
8333 e5					push hl 
8334 c5					push bc 
8335 cd ac 80				call se_writebyte 
8338 3e 0a			ld a, 10 
833a cd e5 89			call aDelayInMS 
833d 23				inc hl 
833e cd ac 80				call se_writebyte 
8341 3e 0a			ld a, 10 
8343 cd e5 89			call aDelayInMS 
8346 2b				dec hl 
8347 c1					pop bc 
8348 e1					pop hl 
8349 3e 40				ld a, STORE_BLOCK_PHY 
834b cd ea 8c				call addatohl 
834e 10 e1				djnz .setmark2 
8350			 
8350					 
8350			 
8350			 
8350 c9				ret 
8351			 
8351			 
8351			 
8351			 
8351 .. 00		.defaultbanklabl:   db "BankLabel_",0 
835c			 
835c			 
835c			 
835c			; Label Bank 
835c			; ---------- 
835c			; 
835c			; With current bank 
835c			; Read block 0 
835c			; Set label 
835c			; Write block 0 
835c			 
835c			; label str pointer in hl 
835c			 
835c			storage_label:     
835c			 
835c				if DEBUG_STORESE 
835c					DMARK "LBL" 
835c f5				push af  
835d 3a 71 83			ld a, (.dmark)  
8360 32 65 ee			ld (debug_mark),a  
8363 3a 72 83			ld a, (.dmark+1)  
8366 32 66 ee			ld (debug_mark+1),a  
8369 3a 73 83			ld a, (.dmark+2)  
836c 32 67 ee			ld (debug_mark+2),a  
836f 18 03			jr .pastdmark  
8371 ..			.dmark: db "LBL"  
8374 f1			.pastdmark: pop af  
8375			endm  
# End of macro DMARK
8375					CALLMONITOR 
8375 cd 6f ee			call debug_vector  
8378				endm  
# End of macro CALLMONITOR
8378				endif 
8378			 
8378 e5				push hl 
8379			 
8379 cd 38 82			call storage_get_block_0 
837c			 
837c				; set default label 
837c			 
837c e1				pop hl 
837d			 
837d 11 77 ea		 	ld de, store_page+3 
8380 01 0f 00			ld bc, 15 
8383				if DEBUG_STORESE 
8383					DMARK "LB3" 
8383 f5				push af  
8384 3a 98 83			ld a, (.dmark)  
8387 32 65 ee			ld (debug_mark),a  
838a 3a 99 83			ld a, (.dmark+1)  
838d 32 66 ee			ld (debug_mark+1),a  
8390 3a 9a 83			ld a, (.dmark+2)  
8393 32 67 ee			ld (debug_mark+2),a  
8396 18 03			jr .pastdmark  
8398 ..			.dmark: db "LB3"  
839b f1			.pastdmark: pop af  
839c			endm  
# End of macro DMARK
839c					CALLMONITOR 
839c cd 6f ee			call debug_vector  
839f				endm  
# End of macro CALLMONITOR
839f				endif 
839f ed b0			ldir 
83a1				; save default page 0 
83a1			 
83a1 21 00 00			ld hl, 0 
83a4 11 74 ea			ld de, store_page 
83a7				if DEBUG_STORESE 
83a7					DMARK "LBW" 
83a7 f5				push af  
83a8 3a bc 83			ld a, (.dmark)  
83ab 32 65 ee			ld (debug_mark),a  
83ae 3a bd 83			ld a, (.dmark+1)  
83b1 32 66 ee			ld (debug_mark+1),a  
83b4 3a be 83			ld a, (.dmark+2)  
83b7 32 67 ee			ld (debug_mark+2),a  
83ba 18 03			jr .pastdmark  
83bc ..			.dmark: db "LBW"  
83bf f1			.pastdmark: pop af  
83c0			endm  
# End of macro DMARK
83c0					CALLMONITOR 
83c0 cd 6f ee			call debug_vector  
83c3				endm  
# End of macro CALLMONITOR
83c3				endif 
83c3 cd ec 81			call storage_write_block 
83c6			 
83c6 c9				ret 
83c7			 
83c7			 
83c7			 
83c7			; Read Block 0 - Config 
83c7			; --------------------- 
83c7			; 
83c7			; With current bank 
83c7			; Call presence test 
83c7			;    If not present format/init bank  
83c7			; Read block 0  
83c7			;  
83c7			 
83c7			 
83c7			; Dir 
83c7			; --- 
83c7			; 
83c7			; With current bank 
83c7			; Load Block 0 Config 
83c7			; Get max file id number 
83c7			; For each logical block 
83c7			;    Read block read byte 2 
83c7			;      if first block of file 
83c7			;         Display file name 
83c7			;         Display type flags for file 
83c7			;        
83c7			 
83c7			; moving to words as this requires stack control 
83c7			 
83c7			 
83c7			; Delete File 
83c7			; ----------- 
83c7			; 
83c7			; With current bank 
83c7			; 
83c7			; Load Block 0 Config 
83c7			; Get max file id number 
83c7			; For each logical block 
83c7			;    Read block file id 
83c7			;      If first block of file and dont have file id 
83c7			;         if file to delete 
83c7			;         Save file id 
83c7			;         Null file id 
83c7			;         Write this block back 
83c7			;      If file id is one saved 
83c7			;         Null file id 
83c7			;         Write this block back 
83c7			 
83c7			 
83c7			.se_done: 
83c7 e1				pop hl 
83c8 c9				ret 
83c9			 
83c9			storage_erase: 
83c9			 
83c9				; hl contains the file id 
83c9			 
83c9 5d				ld e, l 
83ca 16 00			ld d, 0 
83cc 21 40 00			ld hl, STORE_BLOCK_PHY 
83cf					if DEBUG_FORTH_WORDS 
83cf						DMARK "ERA" 
83cf f5				push af  
83d0 3a e4 83			ld a, (.dmark)  
83d3 32 65 ee			ld (debug_mark),a  
83d6 3a e5 83			ld a, (.dmark+1)  
83d9 32 66 ee			ld (debug_mark+1),a  
83dc 3a e6 83			ld a, (.dmark+2)  
83df 32 67 ee			ld (debug_mark+2),a  
83e2 18 03			jr .pastdmark  
83e4 ..			.dmark: db "ERA"  
83e7 f1			.pastdmark: pop af  
83e8			endm  
# End of macro DMARK
83e8						CALLMONITOR 
83e8 cd 6f ee			call debug_vector  
83eb				endm  
# End of macro CALLMONITOR
83eb					endif 
83eb cd ba 84			call storage_findnextid 
83ee cd 13 8d			call ishlzero 
83f1 c8				ret z 
83f2			 
83f2 e5				push hl 
83f3			 
83f3				; TODO check file not found 
83f3			 
83f3 11 74 ea			ld de, store_page 
83f6 cd 87 81			call storage_read_block 
83f9			 
83f9 cd 13 8d			call ishlzero 
83fc ca c7 83			jp z,.se_done 
83ff			 
83ff					if DEBUG_FORTH_WORDS 
83ff						DMARK "ER1" 
83ff f5				push af  
8400 3a 14 84			ld a, (.dmark)  
8403 32 65 ee			ld (debug_mark),a  
8406 3a 15 84			ld a, (.dmark+1)  
8409 32 66 ee			ld (debug_mark+1),a  
840c 3a 16 84			ld a, (.dmark+2)  
840f 32 67 ee			ld (debug_mark+2),a  
8412 18 03			jr .pastdmark  
8414 ..			.dmark: db "ER1"  
8417 f1			.pastdmark: pop af  
8418			endm  
# End of macro DMARK
8418						CALLMONITOR 
8418 cd 6f ee			call debug_vector  
841b				endm  
# End of macro CALLMONITOR
841b					endif 
841b 3a 74 ea			ld a, (store_page)	; get file id 
841e 32 68 ea			ld (store_tmpid), a 
8421			 
8421 3a 76 ea			ld a, (store_page+2)    ; get count of extends 
8424 32 67 ea			ld (store_tmpext), a 
8427			 
8427				; wipe file header 
8427			 
8427 e1				pop hl 
8428 3e 00			ld a, 0 
842a 32 74 ea			ld (store_page), a 
842d 32 75 ea			ld (store_page+1),a 
8430 11 74 ea			ld de, store_page 
8433					if DEBUG_FORTH_WORDS 
8433						DMARK "ER2" 
8433 f5				push af  
8434 3a 48 84			ld a, (.dmark)  
8437 32 65 ee			ld (debug_mark),a  
843a 3a 49 84			ld a, (.dmark+1)  
843d 32 66 ee			ld (debug_mark+1),a  
8440 3a 4a 84			ld a, (.dmark+2)  
8443 32 67 ee			ld (debug_mark+2),a  
8446 18 03			jr .pastdmark  
8448 ..			.dmark: db "ER2"  
844b f1			.pastdmark: pop af  
844c			endm  
# End of macro DMARK
844c						CALLMONITOR 
844c cd 6f ee			call debug_vector  
844f				endm  
# End of macro CALLMONITOR
844f					endif 
844f cd ec 81			call storage_write_block 
8452			 
8452			 
8452				; wipe file extents 
8452			 
8452 3a 67 ea			ld a, (store_tmpext) 
8455 47				ld b, a 
8456			 
8456			.eraext:	  
8456 c5				push bc 
8457			 
8457 21 40 00			ld hl, STORE_BLOCK_PHY 
845a 3a 68 ea			ld a,(store_tmpid) 
845d 5f				ld e, a 
845e 50				ld d, b	 
845f					if DEBUG_FORTH_WORDS 
845f						DMARK "ER3" 
845f f5				push af  
8460 3a 74 84			ld a, (.dmark)  
8463 32 65 ee			ld (debug_mark),a  
8466 3a 75 84			ld a, (.dmark+1)  
8469 32 66 ee			ld (debug_mark+1),a  
846c 3a 76 84			ld a, (.dmark+2)  
846f 32 67 ee			ld (debug_mark+2),a  
8472 18 03			jr .pastdmark  
8474 ..			.dmark: db "ER3"  
8477 f1			.pastdmark: pop af  
8478			endm  
# End of macro DMARK
8478						CALLMONITOR 
8478 cd 6f ee			call debug_vector  
847b				endm  
# End of macro CALLMONITOR
847b					endif 
847b cd ba 84			call storage_findnextid 
847e cd 13 8d			call ishlzero 
8481 ca c7 83			jp z,.se_done 
8484			 
8484 e5				push hl 
8485 11 74 ea			ld de, store_page 
8488 cd 87 81			call storage_read_block 
848b			 
848b				; free block	 
848b			 
848b 3e 00			ld a, 0 
848d 32 74 ea			ld (store_page), a 
8490 32 75 ea			ld (store_page+1),a 
8493 11 74 ea			ld de, store_page 
8496 e1				pop hl 
8497					if DEBUG_FORTH_WORDS 
8497						DMARK "ER4" 
8497 f5				push af  
8498 3a ac 84			ld a, (.dmark)  
849b 32 65 ee			ld (debug_mark),a  
849e 3a ad 84			ld a, (.dmark+1)  
84a1 32 66 ee			ld (debug_mark+1),a  
84a4 3a ae 84			ld a, (.dmark+2)  
84a7 32 67 ee			ld (debug_mark+2),a  
84aa 18 03			jr .pastdmark  
84ac ..			.dmark: db "ER4"  
84af f1			.pastdmark: pop af  
84b0			endm  
# End of macro DMARK
84b0						CALLMONITOR 
84b0 cd 6f ee			call debug_vector  
84b3				endm  
# End of macro CALLMONITOR
84b3					endif 
84b3 cd ec 81			call storage_write_block 
84b6			 
84b6 c1				pop bc 
84b7 10 9d			djnz .eraext 
84b9			 
84b9 c9				ret 
84ba			 
84ba			 
84ba			; Find Free Block 
84ba			; --------------- 
84ba			; 
84ba			; With current bank 
84ba			;  
84ba			; From given starting logical block 
84ba			;    Read block  
84ba			;    If no file id 
84ba			;         Return block id 
84ba			 
84ba			 
84ba			; hl starting page number 
84ba			; hl contains free page number or zero if no pages free 
84ba			; e contains the file id to locate 
84ba			; d contains the block number 
84ba			 
84ba			; TODO change to find file id and use zero for free block 
84ba			 
84ba			storage_findnextid: 
84ba			 
84ba				; now locate first 0 page to mark as a free block 
84ba			 
84ba 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
84bc			;	ld hl, STORE_BLOCK_PHY 
84bc			 
84bc					if DEBUG_FORTH_WORDS 
84bc					DMARK "FNI" 
84bc f5				push af  
84bd 3a d1 84			ld a, (.dmark)  
84c0 32 65 ee			ld (debug_mark),a  
84c3 3a d2 84			ld a, (.dmark+1)  
84c6 32 66 ee			ld (debug_mark+1),a  
84c9 3a d3 84			ld a, (.dmark+2)  
84cc 32 67 ee			ld (debug_mark+2),a  
84cf 18 03			jr .pastdmark  
84d1 ..			.dmark: db "FNI"  
84d4 f1			.pastdmark: pop af  
84d5			endm  
# End of macro DMARK
84d5						CALLMONITOR 
84d5 cd 6f ee			call debug_vector  
84d8				endm  
# End of macro CALLMONITOR
84d8					endif 
84d8			.ff1:   	 
84d8 e5					push hl 
84d9 c5					push bc 
84da d5					push de 
84db cd ab 80				call se_readbyte 
84de 5f					ld e,a 
84df 23					inc hl 
84e0 cd ab 80				call se_readbyte 
84e3 57					ld d, a 
84e4 e1					pop hl 
84e5 e5					push hl 
84e6 cd 08 8d				call cmp16 
84e9 28 49				jr z, .fffound 
84eb			 
84eb d1					pop de 
84ec c1					pop bc 
84ed e1					pop hl 
84ee			 
84ee					; is found? 
84ee					;cp e 
84ee					;ret z 
84ee			 
84ee 3e 40				ld a, STORE_BLOCK_PHY 
84f0 cd ea 8c				call addatohl 
84f3 10 e3				djnz .ff1 
84f5			 
84f5 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
84f7			.ff2:   	 
84f7			 
84f7 e5					push hl 
84f8 c5					push bc 
84f9 d5					push de 
84fa cd ab 80				call se_readbyte 
84fd 5f					ld e,a 
84fe 23					inc hl 
84ff cd ab 80				call se_readbyte 
8502 57					ld d, a 
8503			 
8503 e1					pop hl 
8504 e5					push hl 
8505 cd 08 8d				call cmp16 
8508 28 2a				jr z, .fffound 
850a			 
850a d1					pop de 
850b c1					pop bc 
850c e1					pop hl 
850d					; is found? 
850d					;cp e 
850d					;ret z 
850d			 
850d 3e 40				ld a, STORE_BLOCK_PHY 
850f cd ea 8c				call addatohl 
8512 10 e3				djnz .ff2 
8514			 
8514			 
8514					if DEBUG_FORTH_WORDS 
8514					DMARK "FN-" 
8514 f5				push af  
8515 3a 29 85			ld a, (.dmark)  
8518 32 65 ee			ld (debug_mark),a  
851b 3a 2a 85			ld a, (.dmark+1)  
851e 32 66 ee			ld (debug_mark+1),a  
8521 3a 2b 85			ld a, (.dmark+2)  
8524 32 67 ee			ld (debug_mark+2),a  
8527 18 03			jr .pastdmark  
8529 ..			.dmark: db "FN-"  
852c f1			.pastdmark: pop af  
852d			endm  
# End of macro DMARK
852d					;	push af 
852d					;	ld a, 'n' 
852d					;	ld (debug_mark),a 
852d					;	pop af 
852d						CALLMONITOR 
852d cd 6f ee			call debug_vector  
8530				endm  
# End of macro CALLMONITOR
8530					endif 
8530				; no free marks! 
8530 21 00 00				ld hl, 0 
8533 c9				ret 
8534			.fffound: 
8534				 
8534			 
8534 d1					pop de 
8535 c1					pop bc 
8536 e1					pop hl 
8537					if DEBUG_FORTH_WORDS 
8537					DMARK "FNF" 
8537 f5				push af  
8538 3a 4c 85			ld a, (.dmark)  
853b 32 65 ee			ld (debug_mark),a  
853e 3a 4d 85			ld a, (.dmark+1)  
8541 32 66 ee			ld (debug_mark+1),a  
8544 3a 4e 85			ld a, (.dmark+2)  
8547 32 67 ee			ld (debug_mark+2),a  
854a 18 03			jr .pastdmark  
854c ..			.dmark: db "FNF"  
854f f1			.pastdmark: pop af  
8550			endm  
# End of macro DMARK
8550					;	push af 
8550					;	ld a, 'n' 
8550					;	ld (debug_mark),a 
8550					;	pop af 
8550						CALLMONITOR 
8550 cd 6f ee			call debug_vector  
8553				endm  
# End of macro CALLMONITOR
8553					endif 
8553 c9				ret 
8554			 
8554			 
8554			 
8554			; Free Space 
8554			; ---------- 
8554			; 
8554			; With current bank 
8554			; 
8554			; Set block count to zero 
8554			; Starting with first logical block 
8554			;      Find free block  
8554			;      If block id given, increment block count 
8554			; 
8554			;  
8554			 
8554			 
8554			; hl contains count of free blocks 
8554			 
8554			storage_freeblocks: 
8554			 
8554				; now locate first 0 page to mark as a free block 
8554			 
8554 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
8556 21 40 00			ld hl, STORE_BLOCK_PHY 
8559 11 00 00			ld de, 0 
855c			 
855c			.fb1:   	 
855c e5					push hl 
855d c5					push bc 
855e d5					push de 
855f cd ab 80				call se_readbyte 
8562 d1					pop de 
8563 c1					pop bc 
8564 e1					pop hl 
8565			 
8565					; is free? 
8565 fe 00				cp 0 
8567 20 01				jr nz, .ff1cont 
8569 13					inc de 
856a			 
856a			.ff1cont: 
856a			 
856a			 
856a 3e 40				ld a, STORE_BLOCK_PHY 
856c cd ea 8c				call addatohl 
856f 10 eb				djnz .fb1 
8571			 
8571 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
8573			.fb2:   	 
8573 e5					push hl 
8574 c5					push bc 
8575 d5					push de 
8576 cd ab 80				call se_readbyte 
8579 d1					pop de 
857a c1					pop bc 
857b e1					pop hl 
857c			 
857c					; is free? 
857c fe 00				cp 0 
857e 20 01				jr nz, .ff2cont 
8580 13					inc de 
8581			 
8581			.ff2cont: 
8581			 
8581 3e 40				ld a, STORE_BLOCK_PHY 
8583 cd ea 8c				call addatohl 
8586 10 eb				djnz .fb2 
8588			 
8588 eb				ex de, hl 
8589 c9				ret 
858a			 
858a			; Get File ID 
858a			; ----------- 
858a			; 
858a			; With current bank 
858a			;  
858a			; Load Block 0 Config 
858a			; Get max file id number 
858a			; For each logical block 
858a			;    Read block file id 
858a			;      If first block of file and dont have file id 
858a			;         if file get id and exit 
858a			 
858a			 
858a			 
858a			 
858a			; Create File 
858a			; ----------- 
858a			; 
858a			; With current bank  
858a			; Load Block 0 Config 
858a			; Get max file id number 
858a			; Increment file id number 
858a			; Save Config 
858a			; Find free block 
858a			; Set buffer with file name and file id 
858a			; Write buffer to free block  
858a			 
858a			 
858a			; hl point to file name 
858a			; hl returns file id 
858a			 
858a			; file format: 
858a			; byte 0 - file id 
858a			; byte 1 - extent number 
858a			; byte 2-> data 
858a			 
858a			; format for extent number 0: 
858a			; 
858a			; byte 0 - file id 
858a			; byte 1 - extent 0 
858a			; byte 2 - extent count 
858a			; byte 3 -> file name and meta data 
858a			 
858a			 
858a			storage_create: 
858a				if DEBUG_STORESE 
858a					DMARK "SCR" 
858a f5				push af  
858b 3a 9f 85			ld a, (.dmark)  
858e 32 65 ee			ld (debug_mark),a  
8591 3a a0 85			ld a, (.dmark+1)  
8594 32 66 ee			ld (debug_mark+1),a  
8597 3a a1 85			ld a, (.dmark+2)  
859a 32 67 ee			ld (debug_mark+2),a  
859d 18 03			jr .pastdmark  
859f ..			.dmark: db "SCR"  
85a2 f1			.pastdmark: pop af  
85a3			endm  
# End of macro DMARK
85a3					CALLMONITOR 
85a3 cd 6f ee			call debug_vector  
85a6				endm  
# End of macro CALLMONITOR
85a6				endif 
85a6			 
85a6 e5				push hl		; save file name pointer 
85a7			 
85a7 cd 38 82			call storage_get_block_0 
85aa			 
85aa 3a 74 ea			ld a,(store_page)	; get current file id 
85ad 3c				inc a 
85ae 32 74 ea			ld (store_page),a 
85b1				 
85b1 32 68 ea			ld (store_tmpid),a			; save id 
85b4			 
85b4 21 00 00			ld hl, 0 
85b7 11 74 ea			ld de, store_page 
85ba				if DEBUG_STORESE 
85ba					DMARK "SCw" 
85ba f5				push af  
85bb 3a cf 85			ld a, (.dmark)  
85be 32 65 ee			ld (debug_mark),a  
85c1 3a d0 85			ld a, (.dmark+1)  
85c4 32 66 ee			ld (debug_mark+1),a  
85c7 3a d1 85			ld a, (.dmark+2)  
85ca 32 67 ee			ld (debug_mark+2),a  
85cd 18 03			jr .pastdmark  
85cf ..			.dmark: db "SCw"  
85d2 f1			.pastdmark: pop af  
85d3			endm  
# End of macro DMARK
85d3					CALLMONITOR 
85d3 cd 6f ee			call debug_vector  
85d6				endm  
# End of macro CALLMONITOR
85d6				endif 
85d6 cd ec 81			call storage_write_block	 ; save update 
85d9			 
85d9				if DEBUG_STORESE 
85d9 11 74 ea				ld de, store_page 
85dc					DMARK "SCC" 
85dc f5				push af  
85dd 3a f1 85			ld a, (.dmark)  
85e0 32 65 ee			ld (debug_mark),a  
85e3 3a f2 85			ld a, (.dmark+1)  
85e6 32 66 ee			ld (debug_mark+1),a  
85e9 3a f3 85			ld a, (.dmark+2)  
85ec 32 67 ee			ld (debug_mark+2),a  
85ef 18 03			jr .pastdmark  
85f1 ..			.dmark: db "SCC"  
85f4 f1			.pastdmark: pop af  
85f5			endm  
# End of macro DMARK
85f5					CALLMONITOR 
85f5 cd 6f ee			call debug_vector  
85f8				endm  
# End of macro CALLMONITOR
85f8				endif 
85f8				;  
85f8				 
85f8 21 40 00			ld hl, STORE_BLOCK_PHY 
85fb 11 00 00			ld de, 0 
85fe cd ba 84			call storage_findnextid 
8601			 
8601 22 5f ea			ld (store_tmppageid), hl    ; save page to use  
8604			 
8604				; TODO detect 0 = no spare blocks 
8604			 
8604				; hl now contains the free page to use for the file header page 
8604			 
8604				if DEBUG_STORESE 
8604				DMARK "SCF" 
8604 f5				push af  
8605 3a 19 86			ld a, (.dmark)  
8608 32 65 ee			ld (debug_mark),a  
860b 3a 1a 86			ld a, (.dmark+1)  
860e 32 66 ee			ld (debug_mark+1),a  
8611 3a 1b 86			ld a, (.dmark+2)  
8614 32 67 ee			ld (debug_mark+2),a  
8617 18 03			jr .pastdmark  
8619 ..			.dmark: db "SCF"  
861c f1			.pastdmark: pop af  
861d			endm  
# End of macro DMARK
861d					CALLMONITOR 
861d cd 6f ee			call debug_vector  
8620				endm  
# End of macro CALLMONITOR
8620				endif 
8620			 
8620 22 5f ea			ld (store_tmppageid), hl 
8623				 
8623 3a 68 ea			ld a,(store_tmpid)    ; get file id 
8626			;	ld a, (store_filecache)			; save to cache 
8626			 
8626 32 74 ea			ld (store_page),a    ; set page id 
8629 3e 00			ld a, 0			 ; extent 0 is file header 
862b 32 75 ea			ld (store_page+1), a   ; set file extent 
862e			 
862e 32 76 ea			ld (store_page+2), a   ; extent count for the file 
8631			 
8631			;	inc hl 		; init block 0 of file 
8631			;	inc hl   		; skip file and extent id 
8631			 ;       ld a, 0 
8631			;	ld (hl),a 
8631			;	ld a, (store_filecache+1)  	; save to cache 
8631			 
8631			;	inc hl    ; file name 
8631				 
8631				 
8631 11 77 ea			ld de, store_page+3    ; get buffer for term string to use as file name 
8634				if DEBUG_STORESE 
8634					DMARK "SCc" 
8634 f5				push af  
8635 3a 49 86			ld a, (.dmark)  
8638 32 65 ee			ld (debug_mark),a  
863b 3a 4a 86			ld a, (.dmark+1)  
863e 32 66 ee			ld (debug_mark+1),a  
8641 3a 4b 86			ld a, (.dmark+2)  
8644 32 67 ee			ld (debug_mark+2),a  
8647 18 03			jr .pastdmark  
8649 ..			.dmark: db "SCc"  
864c f1			.pastdmark: pop af  
864d			endm  
# End of macro DMARK
864d					CALLMONITOR 
864d cd 6f ee			call debug_vector  
8650				endm  
# End of macro CALLMONITOR
8650				endif 
8650 e1				pop hl    ; get zero term string 
8651 e5				push hl 
8652 3e 00			ld a, 0 
8654 cd 5b 90			call strlent 
8657 23				inc hl   ; cover zero term 
8658 06 00			ld b,0 
865a 4d				ld c,l 
865b e1				pop hl 
865c				;ex de, hl 
865c				if DEBUG_STORESE 
865c					DMARK "SCa" 
865c f5				push af  
865d 3a 71 86			ld a, (.dmark)  
8660 32 65 ee			ld (debug_mark),a  
8663 3a 72 86			ld a, (.dmark+1)  
8666 32 66 ee			ld (debug_mark+1),a  
8669 3a 73 86			ld a, (.dmark+2)  
866c 32 67 ee			ld (debug_mark+2),a  
866f 18 03			jr .pastdmark  
8671 ..			.dmark: db "SCa"  
8674 f1			.pastdmark: pop af  
8675			endm  
# End of macro DMARK
8675					;push af 
8675					;ld a, 'a' 
8675					;ld (debug_mark),a 
8675					;pop af 
8675					CALLMONITOR 
8675 cd 6f ee			call debug_vector  
8678				endm  
# End of macro CALLMONITOR
8678				endif 
8678 ed b0			ldir    ; copy zero term string 
867a				if DEBUG_STORESE 
867a					DMARK "SCA" 
867a f5				push af  
867b 3a 8f 86			ld a, (.dmark)  
867e 32 65 ee			ld (debug_mark),a  
8681 3a 90 86			ld a, (.dmark+1)  
8684 32 66 ee			ld (debug_mark+1),a  
8687 3a 91 86			ld a, (.dmark+2)  
868a 32 67 ee			ld (debug_mark+2),a  
868d 18 03			jr .pastdmark  
868f ..			.dmark: db "SCA"  
8692 f1			.pastdmark: pop af  
8693			endm  
# End of macro DMARK
8693					CALLMONITOR 
8693 cd 6f ee			call debug_vector  
8696				endm  
# End of macro CALLMONITOR
8696				endif 
8696			 
8696				; write file header page 
8696			 
8696 2a 5f ea			ld hl,(store_tmppageid) 
8699 11 74 ea			ld de, store_page 
869c				if DEBUG_STORESE 
869c					DMARK "SCb" 
869c f5				push af  
869d 3a b1 86			ld a, (.dmark)  
86a0 32 65 ee			ld (debug_mark),a  
86a3 3a b2 86			ld a, (.dmark+1)  
86a6 32 66 ee			ld (debug_mark+1),a  
86a9 3a b3 86			ld a, (.dmark+2)  
86ac 32 67 ee			ld (debug_mark+2),a  
86af 18 03			jr .pastdmark  
86b1 ..			.dmark: db "SCb"  
86b4 f1			.pastdmark: pop af  
86b5			endm  
# End of macro DMARK
86b5					;push af 
86b5					;ld a, 'b' 
86b5					;ld (debug_mark),a 
86b5					;pop af 
86b5					CALLMONITOR 
86b5 cd 6f ee			call debug_vector  
86b8				endm  
# End of macro CALLMONITOR
86b8				endif 
86b8 cd ec 81			call storage_write_block 
86bb			 
86bb 3a 68 ea			ld a, (store_tmpid) 
86be 6f				ld l, a 
86bf 26 00			ld h,0 
86c1				if DEBUG_STORESE 
86c1					DMARK "SCz" 
86c1 f5				push af  
86c2 3a d6 86			ld a, (.dmark)  
86c5 32 65 ee			ld (debug_mark),a  
86c8 3a d7 86			ld a, (.dmark+1)  
86cb 32 66 ee			ld (debug_mark+1),a  
86ce 3a d8 86			ld a, (.dmark+2)  
86d1 32 67 ee			ld (debug_mark+2),a  
86d4 18 03			jr .pastdmark  
86d6 ..			.dmark: db "SCz"  
86d9 f1			.pastdmark: pop af  
86da			endm  
# End of macro DMARK
86da					CALLMONITOR 
86da cd 6f ee			call debug_vector  
86dd				endm  
# End of macro CALLMONITOR
86dd				endif 
86dd c9				ret 
86de				 
86de			 
86de			 
86de			; 
86de			; Read File 
86de			; 
86de			; h - file id to locate 
86de			; l - extent to locate 
86de			; de - pointer to string to read into 
86de			; 
86de			; returns hl is 0 if block not found ie end of file or pointer to start of data read 
86de			 
86de			.sr_fail: 
86de d1				pop de 
86df c9				ret 
86e0			 
86e0			storage_read: 
86e0			 
86e0			 
86e0 d5				push de 
86e1			 
86e1			; TODO BUG the above push is it popped before the RET Z? 
86e1			 
86e1			; TODO how to handle multiple part blocks 
86e1			 
86e1				; locate file extent to read 
86e1			 
86e1 5c				ld e, h 
86e2 55				ld d, l 
86e3			 
86e3			.srext: 
86e3 22 72 ea			ld (store_readptr), hl     ; save the current extent to load 
86e6 ed 53 70 ea		ld (store_readbuf), de     ; save the current buffer to load in to 
86ea			 
86ea 21 40 00			ld hl, STORE_BLOCK_PHY 
86ed				if DEBUG_STORESE 
86ed					DMARK "sre" 
86ed f5				push af  
86ee 3a 02 87			ld a, (.dmark)  
86f1 32 65 ee			ld (debug_mark),a  
86f4 3a 03 87			ld a, (.dmark+1)  
86f7 32 66 ee			ld (debug_mark+1),a  
86fa 3a 04 87			ld a, (.dmark+2)  
86fd 32 67 ee			ld (debug_mark+2),a  
8700 18 03			jr .pastdmark  
8702 ..			.dmark: db "sre"  
8705 f1			.pastdmark: pop af  
8706			endm  
# End of macro DMARK
8706					CALLMONITOR 
8706 cd 6f ee			call debug_vector  
8709				endm  
# End of macro CALLMONITOR
8709				endif 
8709 cd ba 84			call storage_findnextid 
870c			 
870c				if DEBUG_STORESE 
870c					DMARK "srf" 
870c f5				push af  
870d 3a 21 87			ld a, (.dmark)  
8710 32 65 ee			ld (debug_mark),a  
8713 3a 22 87			ld a, (.dmark+1)  
8716 32 66 ee			ld (debug_mark+1),a  
8719 3a 23 87			ld a, (.dmark+2)  
871c 32 67 ee			ld (debug_mark+2),a  
871f 18 03			jr .pastdmark  
8721 ..			.dmark: db "srf"  
8724 f1			.pastdmark: pop af  
8725			endm  
# End of macro DMARK
8725					CALLMONITOR 
8725 cd 6f ee			call debug_vector  
8728				endm  
# End of macro CALLMONITOR
8728				endif 
8728 cd 13 8d			call ishlzero 
872b			;	ld a, l 
872b			;	add h 
872b			;	cp 0 
872b 28 b1			jr z,.sr_fail			; block not found so EOF 
872d			 
872d				; save current address for use by higher level words etc 
872d			 
872d 22 65 ea			ld (store_openaddr),hl 
8730			 
8730			 
8730				; hl contains page number to load 
8730 d1				pop de   ; get storage 
8731 ed 53 70 ea		ld (store_readbuf), de     ; current buffer to load in to 
8735 d5				push de 
8736				if DEBUG_STORESE 
8736					DMARK "srg" 
8736 f5				push af  
8737 3a 4b 87			ld a, (.dmark)  
873a 32 65 ee			ld (debug_mark),a  
873d 3a 4c 87			ld a, (.dmark+1)  
8740 32 66 ee			ld (debug_mark+1),a  
8743 3a 4d 87			ld a, (.dmark+2)  
8746 32 67 ee			ld (debug_mark+2),a  
8749 18 03			jr .pastdmark  
874b ..			.dmark: db "srg"  
874e f1			.pastdmark: pop af  
874f			endm  
# End of macro DMARK
874f					CALLMONITOR 
874f cd 6f ee			call debug_vector  
8752				endm  
# End of macro CALLMONITOR
8752				endif 
8752 cd 87 81			call storage_read_block 
8755			 
8755				; if this a continuation read??? 
8755			 
8755 2a 70 ea			ld hl, (store_readbuf)     ; current buffer to load in to 
8758			 
8758 3e 3f			ld a, STORE_BLOCK_PHY-1 
875a cd ea 8c			call addatohl 
875d 7e				ld a,(hl) 
875e fe 00			cp 0 
8760 28 02			jr z, .markiscont 
8762 3e ff			ld a, 255 
8764			 
8764			.markiscont: 
8764 32 67 ea			ld (store_readcont), a 
8767			 
8767				if DEBUG_STORESE 
8767					DMARK "srC" 
8767 f5				push af  
8768 3a 7c 87			ld a, (.dmark)  
876b 32 65 ee			ld (debug_mark),a  
876e 3a 7d 87			ld a, (.dmark+1)  
8771 32 66 ee			ld (debug_mark+1),a  
8774 3a 7e 87			ld a, (.dmark+2)  
8777 32 67 ee			ld (debug_mark+2),a  
877a 18 03			jr .pastdmark  
877c ..			.dmark: db "srC"  
877f f1			.pastdmark: pop af  
8780			endm  
# End of macro DMARK
8780					CALLMONITOR 
8780 cd 6f ee			call debug_vector  
8783				endm  
# End of macro CALLMONITOR
8783				endif 
8783				; only short reads enabled 
8783			 
8783 3a 6f ea			ld a, (store_longread) 
8786 fe 00			cp 0 
8788 ca 55 88			jp z, .readdone 
878b			 
878b			; TODO if block has no zeros then need to read next block  
878b			; this code appears to be very buggy. Have added above a flag to disable/enable the following code for later debug 
878b			; check last byte of physical block. 
878b			; if not zero then the next block needs to be loaded 
878b			 
878b			 
878b 2a 70 ea			ld hl, (store_readbuf)     ; current buffer to load in to 
878e			 
878e 3e 3f			ld a, STORE_BLOCK_PHY-1 
8790 cd ea 8c			call addatohl 
8793				;dec hl 
8793 7e				ld a,(hl) 
8794				if DEBUG_STORESE 
8794					DMARK "sr?" 
8794 f5				push af  
8795 3a a9 87			ld a, (.dmark)  
8798 32 65 ee			ld (debug_mark),a  
879b 3a aa 87			ld a, (.dmark+1)  
879e 32 66 ee			ld (debug_mark+1),a  
87a1 3a ab 87			ld a, (.dmark+2)  
87a4 32 67 ee			ld (debug_mark+2),a  
87a7 18 03			jr .pastdmark  
87a9 ..			.dmark: db "sr?"  
87ac f1			.pastdmark: pop af  
87ad			endm  
# End of macro DMARK
87ad					CALLMONITOR 
87ad cd 6f ee			call debug_vector  
87b0				endm  
# End of macro CALLMONITOR
87b0				endif 
87b0 fe 00			cp 0 
87b2 ca 55 88			jp z, .readdone 
87b5			 
87b5				; last byte is not zero so there is more in the next extent. Load it on the end.	 
87b5			 
87b5 23				inc hl 
87b6			 
87b6 22 70 ea			ld (store_readbuf), hl     ; save the current buffer to load in to 
87b9			 
87b9 ed 5b 72 ea		ld de, (store_readptr)     ; save the current extent to load 
87bd			 
87bd eb				ex de, hl 
87be			 
87be				; next ext 
87be			 
87be 23				inc hl 
87bf 22 72 ea			ld  (store_readptr), hl     ; save the current extent to load 
87c2			 
87c2				if DEBUG_STORESE 
87c2					DMARK "sF2" 
87c2 f5				push af  
87c3 3a d7 87			ld a, (.dmark)  
87c6 32 65 ee			ld (debug_mark),a  
87c9 3a d8 87			ld a, (.dmark+1)  
87cc 32 66 ee			ld (debug_mark+1),a  
87cf 3a d9 87			ld a, (.dmark+2)  
87d2 32 67 ee			ld (debug_mark+2),a  
87d5 18 03			jr .pastdmark  
87d7 ..			.dmark: db "sF2"  
87da f1			.pastdmark: pop af  
87db			endm  
# End of macro DMARK
87db					CALLMONITOR 
87db cd 6f ee			call debug_vector  
87de				endm  
# End of macro CALLMONITOR
87de				endif 
87de			 
87de				; get and load block 
87de			 
87de cd ba 84			call storage_findnextid 
87e1			 
87e1				if DEBUG_STORESE 
87e1					DMARK "sf2" 
87e1 f5				push af  
87e2 3a f6 87			ld a, (.dmark)  
87e5 32 65 ee			ld (debug_mark),a  
87e8 3a f7 87			ld a, (.dmark+1)  
87eb 32 66 ee			ld (debug_mark+1),a  
87ee 3a f8 87			ld a, (.dmark+2)  
87f1 32 67 ee			ld (debug_mark+2),a  
87f4 18 03			jr .pastdmark  
87f6 ..			.dmark: db "sf2"  
87f9 f1			.pastdmark: pop af  
87fa			endm  
# End of macro DMARK
87fa					CALLMONITOR 
87fa cd 6f ee			call debug_vector  
87fd				endm  
# End of macro CALLMONITOR
87fd				endif 
87fd cd 13 8d			call ishlzero 
8800			;	ld a, l 
8800			;	add h 
8800			;	cp 0 
8800 ca de 86			jp z,.sr_fail			; block not found so EOF 
8803				 
8803				; save current address for use by higher level words etc 
8803			 
8803 22 65 ea			ld (store_openaddr),hl 
8806			 
8806 cd 87 81			call storage_read_block 
8809			 
8809				; on a continuation block, we now have the file id and ext in the middle of the block 
8809				; we need to pull everything back  
8809			 
8809 ed 5b 70 ea		ld de, (store_readbuf)     ; current buffer to nudge into 
880d 2a 70 ea			ld hl, (store_readbuf)     ; current buffer where data actually exists 
8810 23				inc hl 
8811 23				inc hl     ; skip id and ext 
8812 01 40 00			ld bc, STORE_BLOCK_PHY 
8815				if DEBUG_STORESE 
8815					DMARK "SR<" 
8815 f5				push af  
8816 3a 2a 88			ld a, (.dmark)  
8819 32 65 ee			ld (debug_mark),a  
881c 3a 2b 88			ld a, (.dmark+1)  
881f 32 66 ee			ld (debug_mark+1),a  
8822 3a 2c 88			ld a, (.dmark+2)  
8825 32 67 ee			ld (debug_mark+2),a  
8828 18 03			jr .pastdmark  
882a ..			.dmark: db "SR<"  
882d f1			.pastdmark: pop af  
882e			endm  
# End of macro DMARK
882e					CALLMONITOR 
882e cd 6f ee			call debug_vector  
8831				endm  
# End of macro CALLMONITOR
8831				endif 
8831 ed b0			ldir     ; copy data 
8833			 
8833				; move the pointer back and pretend we have a full buffer for next recheck 
8833			 
8833 1b				dec de 
8834 1b				dec de 
8835			 
8835			; TODO do pop below now short circuit loop????? 
8835 c1				pop bc     ; get rid of spare de on stack 
8836				if DEBUG_STORESE 
8836					DMARK "SR>" 
8836 f5				push af  
8837 3a 4b 88			ld a, (.dmark)  
883a 32 65 ee			ld (debug_mark),a  
883d 3a 4c 88			ld a, (.dmark+1)  
8840 32 66 ee			ld (debug_mark+1),a  
8843 3a 4d 88			ld a, (.dmark+2)  
8846 32 67 ee			ld (debug_mark+2),a  
8849 18 03			jr .pastdmark  
884b ..			.dmark: db "SR>"  
884e f1			.pastdmark: pop af  
884f			endm  
# End of macro DMARK
884f					CALLMONITOR 
884f cd 6f ee			call debug_vector  
8852				endm  
# End of macro CALLMONITOR
8852				endif 
8852 c3 e3 86			jp .srext 
8855			 
8855			 
8855			 
8855			 
8855			 
8855			.readdone:		 
8855 e1				pop hl 		 ; return start of data to show as not EOF 
8856 23				inc hl   ; past file id 
8857 23				inc hl   ; past ext 
8858				if DEBUG_STORESE 
8858					DMARK "SRe" 
8858 f5				push af  
8859 3a 6d 88			ld a, (.dmark)  
885c 32 65 ee			ld (debug_mark),a  
885f 3a 6e 88			ld a, (.dmark+1)  
8862 32 66 ee			ld (debug_mark+1),a  
8865 3a 6f 88			ld a, (.dmark+2)  
8868 32 67 ee			ld (debug_mark+2),a  
886b 18 03			jr .pastdmark  
886d ..			.dmark: db "SRe"  
8870 f1			.pastdmark: pop af  
8871			endm  
# End of macro DMARK
8871					CALLMONITOR 
8871 cd 6f ee			call debug_vector  
8874				endm  
# End of macro CALLMONITOR
8874				endif 
8874 c9					ret 
8875			 
8875			 
8875			 
8875			; 
8875			; Append File 
8875			; 
8875			; hl - file id to locate 
8875			; de - pointer to (multi block) string to write 
8875			 
8875			.sa_notfound: 
8875 d1				pop de 
8876 c9				ret 
8877			 
8877			 
8877			storage_append: 
8877				; hl -  file id to append to 
8877				; de - string to append 
8877			 
8877 d5				push de 
8878				 
8878				if DEBUG_STORESE 
8878					DMARK "AP1" 
8878 f5				push af  
8879 3a 8d 88			ld a, (.dmark)  
887c 32 65 ee			ld (debug_mark),a  
887f 3a 8e 88			ld a, (.dmark+1)  
8882 32 66 ee			ld (debug_mark+1),a  
8885 3a 8f 88			ld a, (.dmark+2)  
8888 32 67 ee			ld (debug_mark+2),a  
888b 18 03			jr .pastdmark  
888d ..			.dmark: db "AP1"  
8890 f1			.pastdmark: pop af  
8891			endm  
# End of macro DMARK
8891					CALLMONITOR 
8891 cd 6f ee			call debug_vector  
8894				endm  
# End of macro CALLMONITOR
8894				endif 
8894			 
8894 7d				ld a, l 
8895 32 68 ea			ld (store_tmpid), a 
8898			 
8898				; get file header  
8898			 
8898 16 00			ld d, 0			 ; file extent to locate - file name details at item 0 
889a 3a 68 ea			ld a, (store_tmpid) 
889d 5f				ld e, a 
889e			 
889e 21 40 00				ld hl, STORE_BLOCK_PHY 
88a1 cd ba 84				call storage_findnextid 
88a4			 
88a4 cd 13 8d			call ishlzero 
88a7 28 cc			jr z, .sa_notfound 
88a9			 
88a9 22 5f ea			ld (store_tmppageid), hl 
88ac			 
88ac				; TODO handle file id not found 
88ac			 
88ac				if DEBUG_STORESE 
88ac					DMARK "AP2" 
88ac f5				push af  
88ad 3a c1 88			ld a, (.dmark)  
88b0 32 65 ee			ld (debug_mark),a  
88b3 3a c2 88			ld a, (.dmark+1)  
88b6 32 66 ee			ld (debug_mark+1),a  
88b9 3a c3 88			ld a, (.dmark+2)  
88bc 32 67 ee			ld (debug_mark+2),a  
88bf 18 03			jr .pastdmark  
88c1 ..			.dmark: db "AP2"  
88c4 f1			.pastdmark: pop af  
88c5			endm  
# End of macro DMARK
88c5					CALLMONITOR 
88c5 cd 6f ee			call debug_vector  
88c8				endm  
# End of macro CALLMONITOR
88c8				endif 
88c8			 
88c8				; update file extent count 
88c8			 
88c8 11 74 ea			ld de, store_page 
88cb			 
88cb cd 87 81			call storage_read_block 
88ce			 
88ce				if DEBUG_STORESE 
88ce					DMARK "AP3" 
88ce f5				push af  
88cf 3a e3 88			ld a, (.dmark)  
88d2 32 65 ee			ld (debug_mark),a  
88d5 3a e4 88			ld a, (.dmark+1)  
88d8 32 66 ee			ld (debug_mark+1),a  
88db 3a e5 88			ld a, (.dmark+2)  
88de 32 67 ee			ld (debug_mark+2),a  
88e1 18 03			jr .pastdmark  
88e3 ..			.dmark: db "AP3"  
88e6 f1			.pastdmark: pop af  
88e7			endm  
# End of macro DMARK
88e7					CALLMONITOR 
88e7 cd 6f ee			call debug_vector  
88ea				endm  
# End of macro CALLMONITOR
88ea				endif 
88ea			;	ld (store_tmppageid), hl 
88ea			 
88ea 3a 76 ea			ld a, (store_page+2) 
88ed 3c				inc a 
88ee 32 76 ea			ld (store_page+2), a 
88f1 32 67 ea			ld (store_tmpext), a 
88f4				 
88f4				if DEBUG_STORESE 
88f4					DMARK "AP3" 
88f4 f5				push af  
88f5 3a 09 89			ld a, (.dmark)  
88f8 32 65 ee			ld (debug_mark),a  
88fb 3a 0a 89			ld a, (.dmark+1)  
88fe 32 66 ee			ld (debug_mark+1),a  
8901 3a 0b 89			ld a, (.dmark+2)  
8904 32 67 ee			ld (debug_mark+2),a  
8907 18 03			jr .pastdmark  
8909 ..			.dmark: db "AP3"  
890c f1			.pastdmark: pop af  
890d			endm  
# End of macro DMARK
890d					CALLMONITOR 
890d cd 6f ee			call debug_vector  
8910				endm  
# End of macro CALLMONITOR
8910				endif 
8910 2a 5f ea			ld hl, (store_tmppageid) 
8913 11 74 ea			ld de, store_page 
8916 cd ec 81			call storage_write_block 
8919			 
8919				; find free block 
8919			 
8919 11 00 00			ld de, 0			 ; file extent to locate 
891c			 
891c 21 40 00				ld hl, STORE_BLOCK_PHY 
891f cd ba 84				call storage_findnextid 
8922 cd 13 8d			call ishlzero 
8925 ca 75 88			jp z, .sa_notfound 
8928			 
8928					; TODO handle no space left 
8928					 
8928 22 5f ea				ld (store_tmppageid), hl 
892b			 
892b				if DEBUG_STORESE 
892b					DMARK "AP4" 
892b f5				push af  
892c 3a 40 89			ld a, (.dmark)  
892f 32 65 ee			ld (debug_mark),a  
8932 3a 41 89			ld a, (.dmark+1)  
8935 32 66 ee			ld (debug_mark+1),a  
8938 3a 42 89			ld a, (.dmark+2)  
893b 32 67 ee			ld (debug_mark+2),a  
893e 18 03			jr .pastdmark  
8940 ..			.dmark: db "AP4"  
8943 f1			.pastdmark: pop af  
8944			endm  
# End of macro DMARK
8944					CALLMONITOR 
8944 cd 6f ee			call debug_vector  
8947				endm  
# End of macro CALLMONITOR
8947				endif 
8947					; init the buffer with zeros so we can id if the buffer is full or not 
8947			 
8947 e5					push hl 
8948 c5					push bc 
8949			 
8949 21 74 ea				ld hl, store_page 
894c 06 40				ld b, STORE_BLOCK_PHY 
894e 3e 00				ld a, 0 
8950 77			.zeroblock:	ld (hl), a 
8951 23					inc hl 
8952 10 fc				djnz .zeroblock 
8954			 
8954 c1					pop bc 
8955 e1					pop hl 
8956			 
8956					; construct block 
8956			 
8956 3a 68 ea				ld a, (store_tmpid) 
8959 32 74 ea				ld (store_page), a   ; file id 
895c 3a 67 ea				ld a, (store_tmpext)   ; extent for this block 
895f 32 75 ea				ld (store_page+1), a 
8962			 
8962 e1					pop hl    ; get string to write 
8963 06 3e				ld b, STORE_BLOCK_PHY-2       ; exclude count of file id and extent 
8965 11 76 ea				ld de, store_page+2 
8968			 
8968				if DEBUG_STORESE 
8968					DMARK "AP5" 
8968 f5				push af  
8969 3a 7d 89			ld a, (.dmark)  
896c 32 65 ee			ld (debug_mark),a  
896f 3a 7e 89			ld a, (.dmark+1)  
8972 32 66 ee			ld (debug_mark+1),a  
8975 3a 7f 89			ld a, (.dmark+2)  
8978 32 67 ee			ld (debug_mark+2),a  
897b 18 03			jr .pastdmark  
897d ..			.dmark: db "AP5"  
8980 f1			.pastdmark: pop af  
8981			endm  
# End of macro DMARK
8981					CALLMONITOR 
8981 cd 6f ee			call debug_vector  
8984				endm  
# End of macro CALLMONITOR
8984				endif 
8984			 
8984			 
8984			 
8984					; fill buffer with data until end of string or full block 
8984			 
8984 7e			.appd:		ld a, (hl) 
8985 12					ld (de), a 
8986 fe 00				cp 0 
8988 28 04				jr z, .appdone 
898a 23					inc hl 
898b 13					inc de 
898c 10 f6				djnz .appd 
898e			 
898e e5			.appdone:	push hl		 	; save current source in case we need to go around again 
898f f5					push af   		; save last byte dumped 
8990			 
8990			 
8990 2a 5f ea			ld hl, (store_tmppageid) 
8993 11 74 ea			ld de, store_page 
8996				if DEBUG_STORESE 
8996					DMARK "AP6" 
8996 f5				push af  
8997 3a ab 89			ld a, (.dmark)  
899a 32 65 ee			ld (debug_mark),a  
899d 3a ac 89			ld a, (.dmark+1)  
89a0 32 66 ee			ld (debug_mark+1),a  
89a3 3a ad 89			ld a, (.dmark+2)  
89a6 32 67 ee			ld (debug_mark+2),a  
89a9 18 03			jr .pastdmark  
89ab ..			.dmark: db "AP6"  
89ae f1			.pastdmark: pop af  
89af			endm  
# End of macro DMARK
89af					CALLMONITOR 
89af cd 6f ee			call debug_vector  
89b2				endm  
# End of macro CALLMONITOR
89b2				endif 
89b2 cd ec 81				call storage_write_block 
89b5			 
89b5			 
89b5				; was that a full block of data written? 
89b5				; any more to write out? 
89b5			 
89b5				; if yes then set vars and jump to start of function again 
89b5			 
89b5 f1					pop af 
89b6 d1					pop de 
89b7			 
89b7 fe 00				cp 0		 ; no, string was fully written 
89b9 c8					ret z 
89ba			 
89ba					; setup vars for next cycle 
89ba			 
89ba 3a 68 ea				ld a, (store_tmpid) 
89bd 6f					ld l, a 
89be 26 00				ld h, 0 
89c0			 
89c0 c3 77 88			 	jp storage_append	 ; yes, need to write out some more 
89c3			 
89c3			 
89c3			 
89c3			 
89c3			 
89c3			 
89c3			 
89c3			if DEBUG_STORECF 
89c3			storageput:	 
89c3					ret 
89c3			storageread: 
89c3					ld hl, store_page 
89c3					ld b, 200 
89c3					ld a,0 
89c3			.src:		ld (hl),a 
89c3					inc hl 
89c3					djnz .src 
89c3					 
89c3			 
89c3					ld de, 0 
89c3					ld bc, 1 
89c3					ld hl, store_page 
89c3					call cfRead 
89c3			 
89c3				call cfGetError 
89c3				ld hl,scratch 
89c3				call hexout 
89c3				ld hl, scratch+2 
89c3				ld a, 0 
89c3				ld (hl),a 
89c3				ld de, scratch 
89c3				ld a,display_row_1 
89c3				call str_at_display 
89c3				call update_display 
89c3			 
89c3					ld hl, store_page 
89c3					ld (os_cur_ptr),hl 
89c3			 
89c3					ret 
89c3			endif 
89c3			 
89c3			 
89c3			; Clear out the main buffer store (used to remove junk before writing a new block) 
89c3			 
89c3			storage_clear_page: 
89c3 e5				push hl 
89c4 d5				push de 
89c5 c5				push bc 
89c6 21 74 ea			ld hl, store_page 
89c9 3e 00			ld a, 0 
89cb 77				ld (hl), a 
89cc			 
89cc 11 75 ea			ld de, store_page+1 
89cf 01 19 01			ld bc, STORE_BLOCK_LOG+1 
89d2			 
89d2 ed b0			ldir 
89d4				 
89d4 c1				pop bc 
89d5 d1				pop de 
89d6 e1				pop hl 
89d7 c9				ret 
89d8			 
89d8			; eof 
# End of file firmware_storage.asm
89d8			  
89d8			; support routines for above hardware abstraction layer  
89d8			  
89d8			include "firmware_general.asm"        ; general support functions  
89d8			 
89d8			; word look up 
89d8			 
89d8			; in 
89d8			; a is the index 
89d8			; hl is pointer start of array 
89d8			; 
89d8			; returns 
89d8			; hl to the word 
89d8			; 
89d8			 
89d8			table_lookup:  
89d8 d5					push de 
89d9 eb					ex de, hl 
89da			 
89da 6f					ld l, a 
89db 26 00				ld h, 0 
89dd 29					add hl, hl 
89de 19					add hl, de 
89df 7e					ld a, (hl) 
89e0 23					inc hl 
89e1 66					ld h,(hl) 
89e2 6f					ld l, a 
89e3			 
89e3 d1					pop de 
89e4 c9					ret 
89e5			 
89e5			; Delay loops 
89e5			 
89e5			 
89e5			 
89e5			aDelayInMS: 
89e5 c5				push bc 
89e6 47				ld b,a 
89e7			msdelay: 
89e7 c5				push bc 
89e8				 
89e8			 
89e8 01 41 00			ld bc,041h 
89eb cd 03 8a			call delayloop 
89ee c1				pop bc 
89ef 05				dec b 
89f0 20 f5			jr nz,msdelay 
89f2			 
89f2			;if CPU_CLOCK_8MHZ 
89f2			;msdelay8: 
89f2			;	push bc 
89f2			;	 
89f2			; 
89f2			;	ld bc,041h 
89f2			;	call delayloop 
89f2			;	pop bc 
89f2			;	dec b 
89f2			;	jr nz,msdelay8 
89f2			;endif 
89f2			 
89f2			 
89f2 c1				pop bc 
89f3 c9				ret 
89f4			 
89f4			 
89f4			delay250ms: 
89f4				;push de 
89f4 01 00 40			ld bc, 04000h 
89f7 c3 03 8a			jp delayloop 
89fa			delay500ms: 
89fa				;push de 
89fa 01 00 80			ld bc, 08000h 
89fd c3 03 8a			jp delayloop 
8a00			delay1s: 
8a00				;push bc 
8a00			   ; Clobbers A, d and e 
8a00 01 00 00		    ld      bc,0      ; # 0ffffh = approx 1s 
8a03			delayloop: 
8a03 c5			    push bc 
8a04			 
8a04			if BASE_CPM 
8a04				ld bc, CPM_DELAY_TUNE 
8a04			.cpmloop: 
8a04				push bc 
8a04			 
8a04			endif 
8a04			 
8a04			 
8a04			 
8a04			delayloopi: 
8a04			;	push bc 
8a04			;.dl: 
8a04 cb 47		    bit     0,a    	; 8 
8a06 cb 47		    bit     0,a    	; 8 
8a08 cb 47		    bit     0,a    	; 8 
8a0a e6 ff		    and     255  	; 7 
8a0c 0b			    dec     bc      	; 6 
8a0d 79			    ld      a,c     	; 4 
8a0e b0			    or      b     	; 4 
8a0f c2 04 8a		    jp      nz,delayloopi   	; 10, total = 55 states/iteration 
8a12			    ; 65536 iterations * 55 states = 3604480 states = 2.00248 seconds 
8a12				;pop de 
8a12			;pop bc 
8a12			 
8a12			if BASE_CPM 
8a12				pop bc 
8a12				 
8a12			    dec     bc      	; 6 
8a12			    ld      a,c     	; 4 
8a12			    or      b     	; 4 
8a12			    jp      nz,.cpmloop   	; 10, total = 55 states/iteration 
8a12				 
8a12			 
8a12			endif 
8a12			;if CPU_CLOCK_8MHZ 
8a12			;    pop bc 
8a12			;    push bc 
8a12			;.dl8: 
8a12			;    bit     0,a    	; 8 
8a12			;    bit     0,a    	; 8 
8a12			;    bit     0,a    	; 8 
8a12			;    and     255  	; 7 
8a12			;    dec     bc      	; 6 
8a12			;    ld      a,c     	; 4 
8a12			;    or      b     	; 4 
8a12			;    jp      nz,.dl8   	; 10, total = 55 states/iteration 
8a12			;endif 
8a12			 
8a12			;if CPU_CLOCK_10MHZ 
8a12			;    pop bc 
8a12			;    push bc 
8a12			;.dl8: 
8a12			;    bit     0,a    	; 8 
8a12			;    bit     0,a    	; 8 
8a12			;    bit     0,a    	; 8 
8a12			;    and     255  	; 7 
8a12			;    dec     bc      	; 6 
8a12			;    ld      a,c     	; 4 
8a12			;    or      b     	; 4 
8a12			;    jp      nz,.dl8   	; 10, total = 55 states/iteration 
8a12			;endif 
8a12 c1			    pop bc 
8a13			 
8a13 c9				ret 
8a14			 
8a14			 
8a14			 
8a14			; eof 
# End of file firmware_general.asm
8a14			include "firmware_display.asm"      ; frame buffer screen abstraction layer  
8a14			; display routines that use the physical hardware abstraction layer 
8a14			 
8a14			 
8a14			; Display an activity indicator 
8a14			; Each call returns the new char pointed to in hl 
8a14			 
8a14			active: 
8a14 3a c0 eb			ld a, (display_active) 
8a17 fe 06			cp 6 
8a19			 
8a19 20 02			jr nz, .sne 
8a1b				; gone past the last one reset sequence 
8a1b 3e ff			ld a, 255 
8a1d			 
8a1d			.sne:   
8a1d				; get the next char in seq 
8a1d 3c				inc a 
8a1e 32 c0 eb			ld (display_active), a 
8a21			 
8a21				; look up the string in the table 
8a21 21 38 8a			ld hl, actseq 
8a24 cb 27			sla a 
8a26 cd ea 8c			call addatohl 
8a29 cd f8 9d			call loadwordinhl 
8a2c			 
8a2c				; forth will write the to string when pushing so move from rom to ram 
8a2c			 
8a2c 11 c1 eb			ld de, display_active+1 
8a2f 01 02 00			ld bc, 2 
8a32 ed b0			ldir 
8a34			 
8a34 21 c1 eb			ld hl, display_active+1 
8a37 c9				ret 
8a38				 
8a38				 
8a38			 
8a38			 
8a38			;db "|/-\|-\" 
8a38			 
8a38			actseq: 
8a38			 
8a38 46 8a		dw spin0 
8a3a 48 8a		dw spin1 
8a3c 4a 8a		dw spin2 
8a3e 4c 8a		dw spin3 
8a40 4a 8a		dw spin2 
8a42 48 8a		dw spin1 
8a44 46 8a		dw spin0 
8a46			 
8a46 .. 00		spin0: db " ", 0 
8a48 .. 00		spin1: db "-", 0 
8a4a .. 00		spin2: db "+", 0 
8a4c .. 00		spin3: db "#", 0 
8a4e			 
8a4e			 
8a4e			; information window 
8a4e			 
8a4e			; pass hl with 1st string to display 
8a4e			; pass de with 2nd string to display 
8a4e			 
8a4e			info_panel: 
8a4e e5				push hl 
8a4f			 
8a4f 2a c6 eb			ld hl, (display_fb_active) 
8a52 e5				push hl    ; future de destination 
8a53 21 ab ed				ld hl, display_fb0 
8a56 22 c6 eb				ld (display_fb_active), hl 
8a59			 
8a59			;	call clear_display 
8a59			 
8a59				if BASE_CPM 
8a59				ld a, '.' 
8a59				else 
8a59 3e a5			ld a, 165 
8a5b				endif 
8a5b cd c2 8a			call fill_display 
8a5e			 
8a5e			 
8a5e 3e 55			ld a, display_row_3 + 5 
8a60 cd d0 8a			call str_at_display 
8a63			 
8a63 e1				pop hl 
8a64 d1				pop de 
8a65			 
8a65 e5				push hl 
8a66			 
8a66			 
8a66 3e 2d			ld a, display_row_2 + 5 
8a68 cd d0 8a			call str_at_display 
8a6b			 
8a6b			 
8a6b cd e0 8a			call update_display 
8a6e cd fd 99			call next_page_prompt 
8a71 cd bd 8a			call clear_display 
8a74			 
8a74				 
8a74 21 0a ed				ld hl, display_fb1 
8a77 22 c6 eb				ld (display_fb_active), hl 
8a7a cd e0 8a			call update_display 
8a7d			 
8a7d e1				pop hl 
8a7e			 
8a7e c9				ret 
8a7f			 
8a7f			 
8a7f			 
8a7f			 
8a7f			; TODO windowing? 
8a7f			 
8a7f			; TODO scroll line up 
8a7f			 
8a7f			scroll_up: 
8a7f			 
8a7f e5				push hl 
8a80 d5				push de 
8a81 c5				push bc 
8a82			 
8a82				; get frame buffer  
8a82			 
8a82 2a c6 eb			ld hl, (display_fb_active) 
8a85 e5				push hl    ; future de destination 
8a86			 
8a86 11 28 00			ld  de, display_cols 
8a89 19				add hl, de 
8a8a			 
8a8a d1				pop de 
8a8b			 
8a8b				;ex de, hl 
8a8b 01 9f 00			ld bc, display_fb_len -1  
8a8e			;if DEBUG_FORTH_WORDS 
8a8e			;	DMARK "SCL" 
8a8e			;	CALLMONITOR 
8a8e			;endif	 
8a8e ed b0			ldir 
8a90			 
8a90				; wipe bottom row 
8a90			 
8a90			 
8a90 2a c6 eb			ld hl, (display_fb_active) 
8a93 11 a0 00			ld de, display_cols*display_rows 
8a96 19				add hl, de 
8a97 06 28			ld b, display_cols 
8a99 3e 20			ld a, ' ' 
8a9b			.scwipe: 
8a9b 77				ld (hl), a 
8a9c 2b				dec hl 
8a9d 10 fc			djnz .scwipe 
8a9f			 
8a9f				;pop hl 
8a9f			 
8a9f c1				pop bc 
8aa0 d1				pop de 
8aa1 e1				pop hl 
8aa2			 
8aa2 c9				ret 
8aa3			 
8aa3			 
8aa3			;scroll_upo: 
8aa3			;	ld de, display_row_1 
8aa3			 ;	ld hl, display_row_2 
8aa3			;	ld bc, display_cols 
8aa3			;	ldir 
8aa3			;	ld de, display_row_2 
8aa3			 ;	ld hl, display_row_3 
8aa3			;	ld bc, display_cols 
8aa3			;	ldir 
8aa3			;	ld de, display_row_3 
8aa3			 ;	ld hl, display_row_4 
8aa3			;	ld bc, display_cols 
8aa3			;	ldir 
8aa3			 
8aa3			; TODO clear row 4 
8aa3			 
8aa3			;	ret 
8aa3			 
8aa3				 
8aa3			scroll_down: 
8aa3			 
8aa3 e5				push hl 
8aa4 d5				push de 
8aa5 c5				push bc 
8aa6			 
8aa6				; get frame buffer  
8aa6			 
8aa6 2a c6 eb			ld hl, (display_fb_active) 
8aa9			 
8aa9 11 9f 00			ld de, display_fb_len - 1 
8aac 19				add hl, de 
8aad			 
8aad e5			push hl    ; future de destination 
8aae			 
8aae 11 28 00			ld  de, display_cols 
8ab1 ed 52			sbc hl, de 
8ab3			 
8ab3			 
8ab3 d1				pop de 
8ab4			 
8ab4			;	ex de, hl 
8ab4 01 9f 00			ld bc, display_fb_len -1  
8ab7			 
8ab7			 
8ab7				 
8ab7			 
8ab7 ed b0			ldir 
8ab9			 
8ab9				; wipe bottom row 
8ab9			 
8ab9			 
8ab9			;	ld hl, (display_fb_active) 
8ab9			;;	ld de, display_cols*display_rows 
8ab9			;;	add hl, de 
8ab9			;	ld b, display_cols 
8ab9			;	ld a, ' ' 
8ab9			;.scwiped: 
8ab9			;	ld (hl), a 
8ab9			;	dec hl 
8ab9			;	djnz .scwiped 
8ab9			 
8ab9				;pop hl 
8ab9			 
8ab9 c1				pop bc 
8aba d1				pop de 
8abb e1				pop hl 
8abc			 
8abc c9				ret 
8abd			;scroll_down: 
8abd			;	ld de, display_row_4 
8abd			;	ld hl, display_row_3 
8abd			;	ld bc, display_cols 
8abd			;	ldir 
8abd			;	ld de, display_row_3 
8abd			; 	ld hl, display_row_2 
8abd			;	ld bc, display_cols 
8abd			;	ldir 
8abd			;	ld de, display_row_2 
8abd			;	ld hl, display_row_1 
8abd			;	ld bc, display_cols 
8abd			;	ldir 
8abd			;;; TODO clear row 1 
8abd			;	ret 
8abd			 
8abd			 
8abd			 
8abd			 
8abd			 
8abd			; clear active frame buffer 
8abd			 
8abd			clear_display: 
8abd 3e 20			ld a, ' ' 
8abf c3 c2 8a			jp fill_display 
8ac2			 
8ac2			; fill active frame buffer with a char in A 
8ac2			 
8ac2			fill_display: 
8ac2 06 a0			ld b,display_fb_len 
8ac4 2a c6 eb			ld hl, (display_fb_active) 
8ac7 77			.fd1:	ld (hl),a 
8ac8 23				inc hl 
8ac9 10 fc			djnz .fd1 
8acb 23				inc hl 
8acc 3e 00			ld a,0 
8ace 77				ld (hl),a 
8acf			 
8acf			 
8acf c9				ret 
8ad0			; Write string (DE) at pos (A) to active frame buffer 
8ad0			 
8ad0 2a c6 eb		str_at_display:    ld hl,(display_fb_active) 
8ad3 06 00					ld b,0 
8ad5 4f					ld c,a 
8ad6 09					add hl,bc 
8ad7 1a			.sad1: 		LD   A, (DE)        ;Get character from string 
8ad8 b7			            OR   A              ;Null terminator? 
8ad9 c8			            RET  Z              ;Yes, so finished 
8ada 77					ld (hl),a 
8adb 23				inc hl 
8adc 13			            INC  DE             ;Point to next character 
8add 18 f8		            JR   .sad1     ;Repeat 
8adf c9					ret 
8ae0			 
8ae0			; using current frame buffer write to physical display 
8ae0			 
8ae0			update_display: 
8ae0 e5				push hl 
8ae1 2a c6 eb			ld hl, (display_fb_active) 
8ae4 cd bb df			call write_display 
8ae7 e1				pop hl 
8ae8 c9				ret 
8ae9			 
8ae9			; TODO scrolling 
8ae9			 
8ae9			 
8ae9			; move cursor right one char 
8ae9			cursor_right: 
8ae9			 
8ae9				; TODO shift right 
8ae9				; TODO if beyond max col 
8ae9				; TODO       cursor_next_line 
8ae9			 
8ae9 c9				ret 
8aea			 
8aea			 
8aea			cursor_next_line: 
8aea				; TODO first char 
8aea				; TODO line down 
8aea				; TODO if past last row 
8aea				; TODO    scroll up 
8aea			 
8aea c9				ret 
8aeb			 
8aeb			cursor_left: 
8aeb				; TODO shift left 
8aeb				; TODO if beyond left  
8aeb				; TODO     cursor prev line 
8aeb				 
8aeb c9				ret 
8aec			 
8aec			cursor_prev_line: 
8aec				; TODO last char 
8aec				; TODO line up 
8aec				; TODO if past first row 
8aec				; TODO   scroll down 
8aec			 
8aec c9				ret 
8aed			 
8aed			 
8aed			cout: 
8aed				; A - char 
8aed c9				ret 
8aee			 
8aee			 
8aee			; Display a menu and allow item selection (optional toggle items) 
8aee			; 
8aee			; format: 
8aee			; hl pointer to word array with zero term for items 
8aee			; e.g.    db item1 
8aee			;         db .... 
8aee			;         db 0 
8aee			; 
8aee			; a = starting menu item  
8aee			; 
8aee			; de = pointer item toggle array   (todo) 
8aee			; 
8aee			; returns item selected in a 1-... 
8aee			; returns 0 if back button pressed 
8aee			; 
8aee			; NOTE: Uses system frame buffer to display 
8aee			; 
8aee			; LEFT, Q = go back 
8aee			; RIGHT, SPACE, CR = select 
8aee			; UP, A - Up 
8aee			; DOWN, Z - Down 
8aee			 
8aee			 
8aee			 
8aee			 
8aee			 
8aee			menu: 
8aee			 
8aee					; keep array pointer 
8aee			 
8aee 22 6d ea				ld (store_tmp1), hl 
8af1 32 6b ea				ld (store_tmp2), a 
8af4			 
8af4					; check for key bounce 
8af4			 
8af4			if BASE_KEV 
8af4			 
8af4			.mbounce:	call cin 
8af4					cp 0 
8af4					jr nz, .mbounce 
8af4			endif 
8af4					; for ease use ex 
8af4			 
8af4					; use menu on fb0 so as not to disrupt user screens ie a menu popup 
8af4 21 ab ed				ld hl, display_fb0 
8af7 22 c6 eb				ld (display_fb_active), hl 
8afa			 
8afa cd bd 8a		.mloop:		call clear_display 
8afd cd e0 8a				call update_display 
8b00			 
8b00					; draw selection id '>' at 1 
8b00			 
8b00					; init start of list display 
8b00			 
8b00 3e 05				ld a, 5 
8b02 32 69 ea				ld (store_tmp3), a   ; display row count 
8b05 3a 6b ea				ld a,( store_tmp2) 
8b08 32 6c ea				ld (store_tmp2+1), a   ; display item count 
8b0b			 
8b0b					 
8b0b			.mitem:	 
8b0b			 
8b0b			 
8b0b 3a 6c ea				ld a,(store_tmp2+1) 
8b0e 6f					ld l, a 
8b0f 26 00				ld h, 0 
8b11 29					add hl, hl 
8b12 ed 5b 6d ea			ld de, (store_tmp1) 
8b16 19					add hl, de 
8b17 7e					ld a, (hl) 
8b18 23					inc hl 
8b19 66					ld h,(hl) 
8b1a 6f					ld l, a 
8b1b			 
8b1b cd 13 8d				call ishlzero 
8b1e 28 1a				jr z, .mdone 
8b20			 
8b20 eb					ex de, hl 
8b21 3a 69 ea				ld a, (store_tmp3) 
8b24 cd d0 8a				call str_at_display 
8b27					 
8b27			 
8b27					; next item 
8b27 3a 6c ea				ld a, (store_tmp2+1) 
8b2a 3c					inc a 
8b2b 32 6c ea				ld (store_tmp2+1), a   ; display item count 
8b2e			 
8b2e			 		; next row 
8b2e			 
8b2e 3a 69 ea				ld a, (store_tmp3) 
8b31 c6 28				add display_cols 
8b33 32 69 ea				ld (store_tmp3), a 
8b36			 
8b36					; at end of screen? 
8b36			 
8b36 fe 10				cp display_rows*4 
8b38 20 d1				jr nz, .mitem 
8b3a			 
8b3a			 
8b3a			.mdone: 
8b3a cd 13 8d				call ishlzero 
8b3d 28 08				jr z, .nodn 
8b3f			 
8b3f 3e 78				ld a, display_row_4 
8b41 11 c0 8b				ld de, .mdown 
8b44 cd d0 8a				call str_at_display 
8b47			 
8b47					; draw options to fill the screens with active item on line 1 
8b47					; if current option is 2 or more then display ^ in top 
8b47			 
8b47 3a 6b ea		.nodn:		ld a, (store_tmp2) 
8b4a fe 00				cp 0 
8b4c 28 08				jr z, .noup 
8b4e			 
8b4e 3e 00				ld a, 0 
8b50 11 be 8b				ld de, .mup 
8b53 cd d0 8a				call str_at_display 
8b56			 
8b56 3e 02		.noup:		ld a, 2 
8b58 11 bc 8b				ld de, .msel 
8b5b cd d0 8a				call str_at_display 
8b5e			 
8b5e					; if current option + 1 is not null then display V in bottom 
8b5e					; get key 
8b5e cd e0 8a				call update_display 
8b61			 
8b61			 
8b61					; handle key 
8b61			 
8b61 cd 47 e0				call cin_wait 
8b64			 
8b64 fe 05				cp KEY_UP 
8b66 28 2b				jr z, .mgoup 
8b68 fe 61				cp 'a' 
8b6a 28 27				jr z, .mgoup 
8b6c fe 0a				cp KEY_DOWN 
8b6e 28 32				jr z, .mgod 
8b70 fe 7a				cp 'z' 
8b72 28 2e				jr z, .mgod 
8b74 fe 20				cp ' ' 
8b76 28 34				jr z, .goend 
8b78 fe 0c				cp KEY_RIGHT 
8b7a 28 30				jr z, .goend 
8b7c fe 0d				cp KEY_CR 
8b7e 28 2c				jr z, .goend 
8b80 fe 71				cp 'q' 
8b82 28 0b				jr z, .goback 
8b84			 
8b84 fe 0b				cp KEY_LEFT 
8b86 28 07				jr z, .goback 
8b88 fe 08				cp KEY_BS 
8b8a 28 03				jr z, .goback 
8b8c c3 fa 8a				jp .mloop 
8b8f			 
8b8f			.goback: 
8b8f 3e 00			ld a, 0 
8b91 18 1d			jr .goend2 
8b93			 
8b93				; move up one 
8b93			.mgoup: 
8b93 3a 6b ea				ld a, (store_tmp2) 
8b96 fe 00				cp 0 
8b98 ca fa 8a				jp z, .mloop 
8b9b 3d					dec a 
8b9c 32 6b ea				ld (store_tmp2), a 
8b9f c3 fa 8a				jp .mloop 
8ba2			 
8ba2				; move down one 
8ba2			.mgod: 
8ba2 3a 6b ea				ld a, (store_tmp2) 
8ba5 3c					inc a 
8ba6 32 6b ea				ld (store_tmp2), a 
8ba9 c3 fa 8a				jp .mloop 
8bac			 
8bac			 
8bac			.goend: 
8bac					; get selected item number 
8bac			 
8bac 3a 6b ea				ld a, (store_tmp2) 
8baf 3c					inc a 
8bb0			 
8bb0			.goend2: 
8bb0 f5					push af 
8bb1			 
8bb1					; restore active fb 
8bb1					; TODO BUG assumes fb1 
8bb1			 
8bb1 21 0a ed				ld hl, display_fb1 
8bb4 22 c6 eb				ld (display_fb_active), hl 
8bb7			 
8bb7					; restore main regs 
8bb7			 
8bb7			 
8bb7 cd e0 8a				call update_display 
8bba			 
8bba f1					pop af 
8bbb			 
8bbb c9				ret 
8bbc			 
8bbc .. 00		.msel:   db ">",0 
8bbe .. 00		.mup:   db "^",0 
8bc0 .. 00		.mdown:   db "v",0 
8bc2			 
8bc2			 
8bc2			; eof 
8bc2			 
# End of file firmware_display.asm
8bc2			include "firmware_maths.asm"     ; any odd maths stuff   TODO removed until I fix up the rng code  
8bc2			; random number generators 
8bc2			 
8bc2			 
8bc2			; https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random 
8bc2			 
8bc2			 
8bc2			;-----> Generate a random number 
8bc2			; output a=answer 0<=a<=255 
8bc2			; all registers are preserved except: af 
8bc2			random: 
8bc2 e5			        push    hl 
8bc3 d5			        push    de 
8bc4 2a a5 eb		        ld      hl,(randData) 
8bc7 ed 5f		        ld      a,r 
8bc9 57			        ld      d,a 
8bca 5e			        ld      e,(hl) 
8bcb 19			        add     hl,de 
8bcc 85			        add     a,l 
8bcd ac			        xor     h 
8bce 22 a5 eb		        ld      (randData),hl 
8bd1 d1			        pop     de 
8bd2 e1			        pop     hl 
8bd3 c9			        ret 
8bd4			 
8bd4			 
8bd4			; randData here must be a 2 byte seed located in ram. While this is a fast generator, it's generally not considered very good in terms of randomness. 
8bd4			 
8bd4			 
8bd4			 
8bd4			;------LFSR------ 
8bd4			;James Montelongo 
8bd4			;optimized by Spencer Putt 
8bd4			;out: 
8bd4			; a = 8 bit random number 
8bd4			RandLFSR: 
8bd4 21 ab eb		        ld hl,LFSRSeed+4 
8bd7 5e			        ld e,(hl) 
8bd8 23			        inc hl 
8bd9 56			        ld d,(hl) 
8bda 23			        inc hl 
8bdb 4e			        ld c,(hl) 
8bdc 23			        inc hl 
8bdd 7e			        ld a,(hl) 
8bde 47			        ld b,a 
8bdf cb 13		        rl e  
8be1 cb 12			rl d 
8be3 cb 11		        rl c  
8be5 17				rla 
8be6 cb 13		        rl e  
8be8 cb 12			rl d 
8bea cb 11		        rl c  
8bec 17				rla 
8bed cb 13		        rl e  
8bef cb 12			rl d 
8bf1 cb 11		        rl c  
8bf3 17				rla 
8bf4 67			        ld h,a 
8bf5 cb 13		        rl e  
8bf7 cb 12			rl d 
8bf9 cb 11		        rl c  
8bfb 17				rla 
8bfc a8			        xor b 
8bfd cb 13		        rl e  
8bff cb 12			rl d 
8c01 ac			        xor h 
8c02 a9			        xor c 
8c03 aa			        xor d 
8c04 21 ad eb		        ld hl,LFSRSeed+6 
8c07 11 ae eb		        ld de,LFSRSeed+7 
8c0a 01 07 00		        ld bc,7 
8c0d ed b8		        lddr 
8c0f 12			        ld (de),a 
8c10 c9			        ret 
8c11			 
8c11			;While this may produces better numbers, it is slower, larger and requires a bigger seed than ionrandom. Assuming theres is a good seed to start, it should generate ~2^56 bytes before repeating. However if there is not a good seed(0 for example), then the numbers created will not be adequate. Unlike Ionrandom and its use of the r register, starting with the same seed the same numbers will be generated. With Ionrandom the code running may have an impact on the number generated. This means this method requires more initialization. 
8c11			 
8c11			;You can initialize with TI-OS's seeds, stored at seed1 and seed2, both are ti-floats but will serve the purpose.  
8c11			 
8c11			 
8c11			;This is a very fast, quality pseudo-random number generator. It combines a 16-bit Linear Feedback Shift Register and a 16-bit LCG. 
8c11			 
8c11			prng16: 
8c11			;Inputs: 
8c11			;   (seed1) contains a 16-bit seed value 
8c11			;   (seed2) contains a NON-ZERO 16-bit seed value 
8c11			;Outputs: 
8c11			;   HL is the result 
8c11			;   BC is the result of the LCG, so not that great of quality 
8c11			;   DE is preserved 
8c11			;Destroys: 
8c11			;   AF 
8c11			;cycle: 4,294,901,760 (almost 4.3 billion) 
8c11			;160cc 
8c11			;26 bytes 
8c11 2a 9f eb		    ld hl,(seed1) 
8c14 44			    ld b,h 
8c15 4d			    ld c,l 
8c16 29			    add hl,hl 
8c17 29			    add hl,hl 
8c18 2c			    inc l 
8c19 09			    add hl,bc 
8c1a 22 9f eb		    ld (seed1),hl 
8c1d 2a 9d eb		    ld hl,(seed2) 
8c20 29			    add hl,hl 
8c21 9f			    sbc a,a 
8c22 e6 2d		    and %00101101 
8c24 ad			    xor l 
8c25 6f			    ld l,a 
8c26 22 9d eb		    ld (seed2),hl 
8c29 09			    add hl,bc 
8c2a c9			    ret 
8c2b			 
8c2b			;On their own, LCGs and LFSRs don't produce great results and are generally very cyclical, but they are very fast to compute. The 16-bit LCG in the above example will bounce around and reach each number from 0 to 65535, but the lower bits are far more predictable than the upper bits. The LFSR mixes up the predictability of a given bit's state, but it hits every number except 0, meaning there is a slightly higher chance of any given bit in the result being a 1 instead of a 0. It turns out that by adding together the outputs of these two generators, we can lose the predictability of a bit's state, while ensuring it has a 50% chance of being 0 or 1. As well, since the periods, 65536 and 65535 are coprime, then the overall period of the generator is 65535*65536, which is over 4 billion.  
8c2b			 
8c2b			rand32: 
8c2b			;Inputs: 
8c2b			;   (seed1_0) holds the lower 16 bits of the first seed 
8c2b			;   (seed1_1) holds the upper 16 bits of the first seed 
8c2b			;   (seed2_0) holds the lower 16 bits of the second seed 
8c2b			;   (seed2_1) holds the upper 16 bits of the second seed 
8c2b			;   **NOTE: seed2 must be non-zero 
8c2b			;Outputs: 
8c2b			;   HL is the result 
8c2b			;   BC,DE can be used as lower quality values, but are not independent of HL. 
8c2b			;Destroys: 
8c2b			;   AF 
8c2b			;Tested and passes all CAcert tests 
8c2b			;Uses a very simple 32-bit LCG and 32-bit LFSR 
8c2b			;it has a period of 18,446,744,069,414,584,320 
8c2b			;roughly 18.4 quintillion. 
8c2b			;LFSR taps: 0,2,6,7  = 11000101 
8c2b			;291cc 
8c2b			;seed1_0=$+1 
8c2b			;    ld hl,12345 
8c2b			;seed1_1=$+1 
8c2b			;    ld de,6789 
8c2b			;    ld b,h 
8c2b			;    ld c,l 
8c2b			;    add hl,hl \ rl e \ rl d 
8c2b			;    add hl,hl \ rl e \ rl d 
8c2b			;    inc l 
8c2b			;    add hl,bc 
8c2b			;    ld (seed1_0),hl 
8c2b			;    ld hl,(seed1_1) 
8c2b			;    adc hl,de 
8c2b			;    ld (seed1_1),hl 
8c2b			;    ex de,hl 
8c2b			;seed2_0=$+1 
8c2b			;    ld hl,9876 
8c2b			;seed2_1=$+1 
8c2b			;    ld bc,54321 
8c2b			;    add hl,hl \ rl c \ rl b 
8c2b			;    ld (seed2_1),bc 
8c2b			;    sbc a,a 
8c2b			;    and %11000101 
8c2b			;    xor l 
8c2b			;    ld l,a 
8c2b			;    ld (seed2_0),hl 
8c2b			;    ex de,hl 
8c2b			;    add hl,bc 
8c2b			;    ret 
8c2b			; 
8c2b			 
8c2b			; 16-bit xorshift pseudorandom number generator by John Metcalf 
8c2b			; 20 bytes, 86 cycles (excluding ret) 
8c2b			 
8c2b			; returns   hl = pseudorandom number 
8c2b			; corrupts   a 
8c2b			 
8c2b			; generates 16-bit pseudorandom numbers with a period of 65535 
8c2b			; using the xorshift method: 
8c2b			 
8c2b			; hl ^= hl << 7 
8c2b			; hl ^= hl >> 9 
8c2b			; hl ^= hl << 8 
8c2b			 
8c2b			; some alternative shift triplets which also perform well are: 
8c2b			; 6, 7, 13; 7, 9, 13; 9, 7, 13. 
8c2b			 
8c2b			;  org 32768 
8c2b			 
8c2b			xrnd: 
8c2b 2a a3 eb		  ld hl,(xrandc)       ; seed must not be 0 
8c2e 3e 00		  ld a,0 
8c30 bd			  cp l 
8c31 20 02		  jr nz, .xrnd1 
8c33 2e 01		  ld l, 1 
8c35			.xrnd1: 
8c35			 
8c35 7c			  ld a,h 
8c36 1f			  rra 
8c37 7d			  ld a,l 
8c38 1f			  rra 
8c39 ac			  xor h 
8c3a 67			  ld h,a 
8c3b 7d			  ld a,l 
8c3c 1f			  rra 
8c3d 7c			  ld a,h 
8c3e 1f			  rra 
8c3f ad			  xor l 
8c40 6f			  ld l,a 
8c41 ac			  xor h 
8c42 67			  ld h,a 
8c43			 
8c43 22 a3 eb		  ld (xrandc),hl 
8c46			 
8c46 c9			  ret 
8c47			;  
8c47			 
8c47			 
8c47			;;;; int maths 
8c47			 
8c47			; https://map.grauw.nl/articles/mult_div_shifts.php 
8c47			; Divide 16-bit values (with 16-bit result) 
8c47			; In: Divide BC by divider DE 
8c47			; Out: BC = result, HL = rest 
8c47			; 
8c47			Div16: 
8c47 21 00 00		    ld hl,0 
8c4a 78			    ld a,b 
8c4b 06 08		    ld b,8 
8c4d			Div16_Loop1: 
8c4d 17			    rla 
8c4e ed 6a		    adc hl,hl 
8c50 ed 52		    sbc hl,de 
8c52 30 01		    jr nc,Div16_NoAdd1 
8c54 19			    add hl,de 
8c55			Div16_NoAdd1: 
8c55 10 f6		    djnz Div16_Loop1 
8c57 17			    rla 
8c58 2f			    cpl 
8c59 47			    ld b,a 
8c5a 79			    ld a,c 
8c5b 48			    ld c,b 
8c5c 06 08		    ld b,8 
8c5e			Div16_Loop2: 
8c5e 17			    rla 
8c5f ed 6a		    adc hl,hl 
8c61 ed 52		    sbc hl,de 
8c63 30 01		    jr nc,Div16_NoAdd2 
8c65 19			    add hl,de 
8c66			Div16_NoAdd2: 
8c66 10 f6		    djnz Div16_Loop2 
8c68 17			    rla 
8c69 2f			    cpl 
8c6a 41			    ld b,c 
8c6b 4f			    ld c,a 
8c6c c9			ret 
8c6d			 
8c6d			 
8c6d			;http://z80-heaven.wikidot.com/math 
8c6d			; 
8c6d			;Inputs: 
8c6d			;     DE and A are factors 
8c6d			;Outputs: 
8c6d			;     A is not changed 
8c6d			;     B is 0 
8c6d			;     C is not changed 
8c6d			;     DE is not changed 
8c6d			;     HL is the product 
8c6d			;Time: 
8c6d			;     342+6x 
8c6d			; 
8c6d			Mult16: 
8c6d			 
8c6d 06 08		     ld b,8          ;7           7 
8c6f 21 00 00		     ld hl,0         ;10         10 
8c72 29			       add hl,hl     ;11*8       88 
8c73 07			       rlca          ;4*8        32 
8c74 30 01		       jr nc,$+3     ;(12|18)*8  96+6x 
8c76 19			         add hl,de   ;--         -- 
8c77 10 f9		       djnz $-5      ;13*7+8     99 
8c79 c9			ret 
8c7a			 
8c7a			; 
8c7a			; Square root of 16-bit value 
8c7a			; In:  HL = value 
8c7a			; Out:  D = result (rounded down) 
8c7a			; 
8c7a			;Sqr16: 
8c7a			;    ld de,#0040 
8c7a			;    ld a,l 
8c7a			;    ld l,h 
8c7a			;    ld h,d 
8c7a			;    or a 
8c7a			;    ld b,8 
8c7a			;Sqr16_Loop: 
8c7a			;    sbc hl,de 
8c7a			;    jr nc,Sqr16_Skip 
8c7a			;    add hl,de 
8c7a			;Sqr16_Skip: 
8c7a			;    ccf 
8c7a			;    rl d 
8c7a			;    add a,a 
8c7a			;    adc hl,hl 
8c7a			;    add a,a 
8c7a			;    adc hl,hl 
8c7a			;    djnz Sqr16_Loop 
8c7a			;    ret 
8c7a			; 
8c7a			; 
8c7a			; Divide 8-bit values 
8c7a			; In: Divide E by divider C 
8c7a			; Out: A = result, B = rest 
8c7a			; 
8c7a			Div8: 
8c7a af			    xor a 
8c7b 06 08		    ld b,8 
8c7d			Div8_Loop: 
8c7d cb 13		    rl e 
8c7f 17			    rla 
8c80 91			    sub c 
8c81 30 01		    jr nc,Div8_NoAdd 
8c83 81			    add a,c 
8c84			Div8_NoAdd: 
8c84 10 f7		    djnz Div8_Loop 
8c86 47			    ld b,a 
8c87 7b			    ld a,e 
8c88 17			    rla 
8c89 2f			    cpl 
8c8a c9			    ret 
8c8b			 
8c8b			; 
8c8b			; Multiply 8-bit value with a 16-bit value (unrolled) 
8c8b			; In: Multiply A with DE 
8c8b			; Out: HL = result 
8c8b			; 
8c8b			Mult12U: 
8c8b 2e 00		    ld l,0 
8c8d 87			    add a,a 
8c8e 30 01		    jr nc,Mult12U_NoAdd0 
8c90 19			    add hl,de 
8c91			Mult12U_NoAdd0: 
8c91 29			    add hl,hl 
8c92 87			    add a,a 
8c93 30 01		    jr nc,Mult12U_NoAdd1 
8c95 19			    add hl,de 
8c96			Mult12U_NoAdd1: 
8c96 29			    add hl,hl 
8c97 87			    add a,a 
8c98 30 01		    jr nc,Mult12U_NoAdd2 
8c9a 19			    add hl,de 
8c9b			Mult12U_NoAdd2: 
8c9b 29			    add hl,hl 
8c9c 87			    add a,a 
8c9d 30 01		    jr nc,Mult12U_NoAdd3 
8c9f 19			    add hl,de 
8ca0			Mult12U_NoAdd3: 
8ca0 29			    add hl,hl 
8ca1 87			    add a,a 
8ca2 30 01		    jr nc,Mult12U_NoAdd4 
8ca4 19			    add hl,de 
8ca5			Mult12U_NoAdd4: 
8ca5 29			    add hl,hl 
8ca6 87			    add a,a 
8ca7 30 01		    jr nc,Mult12U_NoAdd5 
8ca9 19			    add hl,de 
8caa			Mult12U_NoAdd5: 
8caa 29			    add hl,hl 
8cab 87			    add a,a 
8cac 30 01		    jr nc,Mult12U_NoAdd6 
8cae 19			    add hl,de 
8caf			Mult12U_NoAdd6: 
8caf 29			    add hl,hl 
8cb0 87			    add a,a 
8cb1 d0			    ret nc 
8cb2 19			    add hl,de 
8cb3 c9			    ret 
8cb4			 
8cb4			; 
8cb4			; Multiply 8-bit value with a 16-bit value (right rotating) 
8cb4			; In: Multiply A with DE 
8cb4			;      Put lowest value in A for most efficient calculation 
8cb4			; Out: HL = result 
8cb4			; 
8cb4			Mult12R: 
8cb4 21 00 00		    ld hl,0 
8cb7			Mult12R_Loop: 
8cb7 cb 3f		    srl a 
8cb9 30 01		    jr nc,Mult12R_NoAdd 
8cbb 19			    add hl,de 
8cbc			Mult12R_NoAdd: 
8cbc cb 23		    sla e 
8cbe cb 12		    rl d 
8cc0 b7			    or a 
8cc1 c2 b7 8c		    jp nz,Mult12R_Loop 
8cc4 c9			    ret 
8cc5			 
8cc5			; 
8cc5			; Multiply 16-bit values (with 32-bit result) 
8cc5			; In: Multiply BC with DE 
8cc5			; Out: BCHL = result 
8cc5			; 
8cc5			Mult32: 
8cc5 79			    ld a,c 
8cc6 48			    ld c,b 
8cc7 21 00 00		    ld hl,0 
8cca 06 10		    ld b,16 
8ccc			Mult32_Loop: 
8ccc 29			    add hl,hl 
8ccd 17			    rla 
8cce cb 11		    rl c 
8cd0 30 07		    jr nc,Mult32_NoAdd 
8cd2 19			    add hl,de 
8cd3 ce 00		    adc a,0 
8cd5 d2 d9 8c		    jp nc,Mult32_NoAdd 
8cd8 0c			    inc c 
8cd9			Mult32_NoAdd: 
8cd9 10 f1		    djnz Mult32_Loop 
8cdb 41			    ld b,c 
8cdc 4f			    ld c,a 
8cdd c9			    ret 
8cde			 
8cde			 
8cde			 
8cde			; 
8cde			; Multiply 8-bit values 
8cde			; In:  Multiply H with E 
8cde			; Out: HL = result 
8cde			; 
8cde			Mult8: 
8cde 16 00		    ld d,0 
8ce0 6a			    ld l,d 
8ce1 06 08		    ld b,8 
8ce3			Mult8_Loop: 
8ce3 29			    add hl,hl 
8ce4 30 01		    jr nc,Mult8_NoAdd 
8ce6 19			    add hl,de 
8ce7			Mult8_NoAdd: 
8ce7 10 fa		    djnz Mult8_Loop 
8ce9 c9			    ret 
8cea			 
8cea			 
8cea			 
8cea			 
8cea			 
8cea			 
8cea			 
8cea			 
8cea			;;http://z80-heaven.wikidot.com/math 
8cea			;;This divides DE by BC, storing the result in DE, remainder in HL 
8cea			; 
8cea			;DE_Div_BC:          ;1281-2x, x is at most 16 
8cea			;     ld a,16        ;7 
8cea			;     ld hl,0        ;10 
8cea			;     jp $+5         ;10 
8cea			;.DivLoop: 
8cea			;       add hl,bc    ;-- 
8cea			;       dec a        ;64 
8cea			;       jr z,.DivLoopEnd        ;86 
8cea			; 
8cea			;       sla e        ;128 
8cea			;       rl d         ;128 
8cea			;       adc hl,hl    ;240 
8cea			;       sbc hl,bc    ;240 
8cea			;       jr nc,.DivLoop ;23|21 
8cea			;       inc e        ;-- 
8cea			;       jp .DivLoop+1 
8cea			; 
8cea			;.DivLoopEnd: 
8cea			 
8cea			;HL_Div_C: 
8cea			;Inputs: 
8cea			;     HL is the numerator 
8cea			;     C is the denominator 
8cea			;Outputs: 
8cea			;     A is the remainder 
8cea			;     B is 0 
8cea			;     C is not changed 
8cea			;     DE is not changed 
8cea			;     HL is the quotient 
8cea			; 
8cea			;       ld b,16 
8cea			;       xor a 
8cea			;         add hl,hl 
8cea			;         rla 
8cea			;         cp c 
8cea			;         jr c,$+4 
8cea			;           inc l 
8cea			;           sub c 
8cea			;         djnz $-7 
8cea			 
8cea			; https://plutiedev.com/z80-add-8bit-to-16bit 
8cea			 
8cea			addatohl: 
8cea 85			    add   a, l    ; A = A+L 
8ceb 6f			    ld    l, a    ; L = A+L 
8cec 8c			    adc   a, h    ; A = A+L+H+carry 
8ced 95			    sub   l       ; A = H+carry 
8cee 67			    ld    h, a    ; H = H+carry 
8cef c9			ret 
8cf0			 
8cf0			addatode: 
8cf0 83			    add   a, e    ; A = A+L 
8cf1 5f			    ld    e, a    ; L = A+L 
8cf2 8a			    adc   a, d    ; A = A+L+H+carry 
8cf3 93			    sub   e       ; A = H+carry 
8cf4 57			    ld    d, a    ; H = H+carry 
8cf5 c9			ret 
8cf6			 
8cf6			 
8cf6			addatobc: 
8cf6 81			    add   a, c    ; A = A+L 
8cf7 4f			    ld    c, a    ; L = A+L 
8cf8 88			    adc   a, b    ; A = A+L+H+carry 
8cf9 91			    sub   c       ; A = H+carry 
8cfa 47			    ld    b, a    ; H = H+carry 
8cfb c9			ret 
8cfc			 
8cfc			subafromhl: 
8cfc			   ; If A=0 do nothing 
8cfc			    ; Otherwise flip A's sign. Since 
8cfc			    ; the upper byte becomes -1, also 
8cfc			    ; substract 1 from H. 
8cfc ed 44		    neg 
8cfe ca 07 8d		    jp    z, Skip 
8d01 25			    dec   h 
8d02			     
8d02			    ; Now add the low byte as usual 
8d02			    ; Two's complement takes care of 
8d02			    ; ensuring the result is correct 
8d02 85			    add   a, l 
8d03 6f			    ld    l, a 
8d04 8c			    adc   a, h 
8d05 95			    sub   l 
8d06 67			    ld    h, a 
8d07			Skip: 
8d07 c9				ret 
8d08			 
8d08			 
8d08			; compare hl and de 
8d08			; returns:  
8d08			; if hl = de, z=1, s=0, c0=0 
8d08			; if hl > de, z=0, s=0, c=0 
8d08			; if hl < de, z=0, s=1, c=1 
8d08			cmp16:	 
8d08 b7				or a 
8d09 ed 52			sbc hl,de 
8d0b e0				ret po 
8d0c 7c				ld a,h 
8d0d 1f				rra 
8d0e ee 40			xor 01000000B 
8d10 37				scf 
8d11 8f				adc a,a 
8d12 c9				ret 
8d13			 
8d13			 
8d13			; test if hl contains zero   - A is destroyed 
8d13			 
8d13			ishlzero:    
8d13 b7				or a     ; reset flags 
8d14 7c				ld a, h 
8d15 b5				or l        	 
8d16			 
8d16 c9				ret 
8d17			 
8d17			 
8d17			 
8d17			 
8d17			if FORTH_ENABLE_FLOATMATH 
8d17			;include "float/bbcmath.z80" 
8d17			include "float/lpfpcalc.asm" 
8d17			endif 
8d17			 
8d17			 
8d17			; eof 
8d17			 
# End of file firmware_maths.asm
8d17			include "firmware_strings.asm"   ; string handling  
8d17			 
8d17			 
8d17			; TODO string len 
8d17			; input text string, end on cr with zero term 
8d17			; a offset into frame buffer to start prompt 
8d17			; d is max length 
8d17			; e is display size TODO 
8d17			; c is current cursor position 
8d17			; hl is ptr to where string will be stored and edited directly 
8d17			 
8d17			 
8d17			; TODO check limit of buffer for new inserts 
8d17			; TODO check insert does not push beyond buffer 
8d17			; TODO scroll in a limited display area 
8d17			; TODO scroll whole screen on page wrap 
8d17			 
8d17			 
8d17			; TODO use LCD cursor? 
8d17			 
8d17			EDIT_V1: equ 0 
8d17			EDIT_V2: equ 1 
8d17			 
8d17			 
8d17			 
8d17			if EDIT_V2 
8d17			input_str: 
8d17			 
8d17 32 5e ee			    	ld (input_at_pos),a      ; save display position to start 
8d1a			;		ld (input_at_cursor),a	; save draw pos of cursor relative to start 
8d1a 22 61 ee				ld (input_start), hl     ; save ptr to buffer 
8d1d			;		ld a, c 
8d1d			;		call addatohl 
8d1d			;		ld (input_ptr), hl     ; save ptr to point under the cursor 
8d1d 7a					ld a,d 
8d1e 32 60 ee			        ld (input_size), a       ; save length of input area 
8d21 79					ld a, c 
8d22 32 4f ee				ld (input_cursor),a      ; init cursor start position relative to start of string 
8d25 7b					ld a,e 
8d26 32 5f ee			        ld (input_display_size), a       ; save length of input area that is displayed TODO 
8d29			 
8d29			 
8d29					; add a trailing space to make screen refresh nicer 
8d29			 
8d29					;ld hl, (input_start) 
8d29					;push hl 
8d29					;ld a, 0 
8d29					;call strlent 
8d29					;ld a, l 
8d29					;pop hl 
8d29					;call addatohl 
8d29					;dec hl 
8d29					;ld a, ' ' 
8d29					;ld (hl), a 
8d29					;inc hl 
8d29					;ld (hl), a 
8d29					;inc hl 
8d29					;ld a, 0 
8d29					;ld (hl), a 
8d29			 
8d29			; TODO move out to cin as cursor shape is used by the 4x4 ??? 
8d29					; init cursor shape if not set by the cin routines 
8d29 21 bb eb				ld hl, cursor_shape 
8d2c			if BASE_KEV 
8d2c					ld a, 255 
8d2c			else 
8d2c 3e 23				ld a, '#' 
8d2e			endif 
8d2e 77					ld (hl), a 
8d2f 23					inc hl 
8d30 3e 00				ld a, 0 
8d32 77					ld (hl), a 
8d33			 
8d33 3e 09				ld a, CUR_BLINK_RATE 
8d35 32 5a ee				ld (input_cur_flash), a 
8d38 3e 01				ld a, 1 
8d3a 32 59 ee				ld (input_cur_onoff),a 
8d3d			.inmain:	 
8d3d			 
8d3d cd 65 8e				call input_disp_ref 
8d40			 
8d40					; save current length of string 
8d40			 
8d40 2a 61 ee				ld hl, (input_start) 
8d43 3e 00				ld a, 0 
8d45 cd 5b 90				call strlent 
8d48 7d					ld a,l 
8d49 32 54 ee				ld (input_len), a 
8d4c			 
8d4c					;call input_disp_oncur 
8d4c			 
8d4c					; display current state of input buffer 
8d4c			 
8d4c					; clean any backspace chars 
8d4c			 
8d4c 3e 20				ld a, " " 
8d4e 32 bb e2				ld (scratch),a 
8d51 3e 00				ld a, 0 
8d53 32 bc e2				ld (scratch+1),a 
8d56 3a 5e ee				ld a,(input_at_pos) 
8d59 85					add l 
8d5a 11 bb e2				ld de, scratch 
8d5d cd d0 8a				call str_at_display 
8d60			 
8d60					; pause 1ms 
8d60			 
8d60 3e 01				ld a, 1 
8d62 cd e5 89				call aDelayInMS 
8d65			 
8d65			; display cursor if visible on this cycle 
8d65			 
8d65					; dec flash counter 
8d65 3a 5a ee				ld a, (input_cur_flash) 
8d68 3d					dec a 
8d69 32 5a ee				ld (input_cur_flash), a 
8d6c fe 00				cp 0 
8d6e 20 0d				jr nz, .inochgstate 
8d70			 
8d70			 
8d70					; reset on change of state 
8d70 3e 09				ld a, CUR_BLINK_RATE 
8d72 32 5a ee				ld (input_cur_flash), a 
8d75			 
8d75					; change state 
8d75 3a 59 ee				ld a,(input_cur_onoff) 
8d78 ed 44				neg 
8d7a 32 59 ee				ld (input_cur_onoff),a 
8d7d			 
8d7d			 
8d7d			 
8d7d			 
8d7d					; TODO is cursor visible? 
8d7d					; TODO if so then over write the char at curspos pos with the cursor shape 
8d7d			 
8d7d								 
8d7d			 
8d7d			.inochgstate: 
8d7d 3a 59 ee				ld a,(input_cur_onoff) 
8d80 fe ff				cp 255 
8d82 28 0e				jr z, .skipcursor 
8d84 3a 5e ee				ld a, (input_at_pos) 
8d87 47					ld b, a 
8d88 3a 4f ee				ld a, (input_cursor) 
8d8b 80					add b 
8d8c 11 bb eb				ld de, cursor_shape 
8d8f					 
8d8f cd d0 8a				call str_at_display 
8d92			 
8d92			.skipcursor: 
8d92				if DEBUG_INPUTV2 
8d92			 
8d92					ld a,(input_at_pos) 
8d92					ld hl, LFSRSeed 
8d92					call hexout 
8d92					ld a, (input_cursor) 
8d92					ld hl, LFSRSeed+2 
8d92					call hexout 
8d92					ld a,(input_size) 
8d92					ld hl, LFSRSeed+4 
8d92					call hexout 
8d92			 
8d92					ld a,(input_cur_onoff) 
8d92					ld hl, LFSRSeed+6 
8d92					call hexout 
8d92			 
8d92					ld a,(input_cur_flash) 
8d92					ld hl, LFSRSeed+8 
8d92					call hexout 
8d92			 
8d92					ld a,(input_len) 
8d92					ld hl, LFSRSeed+10 
8d92					call hexout 
8d92					ld hl, LFSRSeed+12 
8d92					ld a, 0 
8d92					ld (hl),a 
8d92					ld a, display_row_4 
8d92					ld de, LFSRSeed 
8d92					call str_at_display 
8d92				endif 
8d92 cd e0 8a				call update_display 
8d95			 
8d95					; TODO keyboard processing 
8d95			 
8d95			if BASE_CPM 
8d95					call cin_wait 
8d95			else 
8d95 cd 4d e0				call cin    ; _wait 
8d98			endif 
8d98 fe 00				cp 0 
8d9a ca 3d 8d				jp z, .inmain 
8d9d			 
8d9d fe 0b				cp KEY_LEFT    ; cursor left 
8d9f ca 57 8e				jp z, input_left 
8da2				 
8da2 fe 0c				cp KEY_RIGHT      ; cursor right 
8da4 ca 5e 8e				jp z, input_right 
8da7			 
8da7 fe 0d				cp KEY_CR 
8da9 c8					ret z 
8daa			 
8daa fe 08				cp KEY_BS 
8dac ca cc 8e				jp z, input_delchar 
8daf			 
8daf fe 06				cp KEY_NEXTWORD 
8db1 ca d8 8d				jp z, input_nxtword 
8db4			 
8db4 fe 07				cp KEY_PREVWORD 
8db6 ca ff 8d				jp z, input_prvword 
8db9			 
8db9 fe 0e				cp KEY_HOME    ; jump to start of line 
8dbb 20 08				jr nz, .ikh 
8dbd 3e 00				ld a, 0 
8dbf 32 4f ee				ld (input_cursor), a 
8dc2 ca 3d 8d				jp z, .inmain 
8dc5			.ikh: 
8dc5			 
8dc5 fe 0f				cp KEY_END     ; jump to end of line 
8dc7 20 09				jr nz, .ike 
8dc9 3a 54 ee				ld a, (input_len) 
8dcc 32 4f ee				ld (input_cursor),a 
8dcf ca 3d 8d				jp z, .inmain 
8dd2			.ike: 
8dd2 fe 05			        cp KEY_UP      ; recall last command 
8dd4 c8					ret z 
8dd5			;jr nz, .irec 
8dd5			; TODO next word 
8dd5			; TODO prev word 
8dd5			;  
8dd5			; 
8dd5			;	ld hl, scratch 
8dd5			;	ld de, os_last_cmd 
8dd5			;	call strcpy 
8dd5			;		jp  .inmain 
8dd5			.irec: 
8dd5			;		jr .instr1 
8dd5			 
8dd5			 
8dd5			 
8dd5					; if any keys not intercepted by above but are special keys like function keys then return them to the program 
8dd5			 
8dd5			; TODO return if any special keys are given 
8dd5			;		ld l, a 
8dd5			;		ld a, 28 ; KEY_F12   ; 27 
8dd5			;		sub l 
8dd5			;		ret m 
8dd5			;		ld a, l 
8dd5					; if no special key then insert as a char 
8dd5			 
8dd5 c3 9e 8e				jp input_inschr 
8dd8			 
8dd8				 
8dd8			input_nxtword: 
8dd8				; jump to start next word after the cursor 
8dd8			 
8dd8			.insknwn:	 
8dd8 cd 94 8e				call input_curptr	 
8ddb 7e					ld a,(hl)	 
8ddc fe 00				cp 0 
8dde ca 3d 8d				jp z, .inmain    ; end of string 
8de1			 
8de1			; if we are on a word, then move off of it 
8de1			 
8de1 fe 20				cp ' ' 
8de3 28 06				jr z, .inspace     ; we are on space so eat the space until we hit non-space 
8de5 21 4f ee				ld hl, input_cursor 
8de8 34					inc (hl) 
8de9 18 ed				jr .insknwn 
8deb			 
8deb			.inspace: 
8deb			 
8deb cd 94 8e				call input_curptr	 
8dee 7e					ld a,(hl)	 
8def fe 00				cp 0 
8df1 ca 3d 8d				jp z, .inmain    ; end of string 
8df4			 
8df4			; if we are on a word, then move off of it 
8df4			 
8df4 fe 20				cp ' ' 
8df6 c2 3d 8d				jp nz, .inmain     ; we are on non space so at next word 
8df9 21 4f ee				ld hl, input_cursor 
8dfc 34					inc (hl) 
8dfd 18 ec				jr .inspace 
8dff			 
8dff			 
8dff			 
8dff			 
8dff			input_prvword: 
8dff				; jump to the start of previous word before the cursor 
8dff			 
8dff			; where are we to start with currently? 
8dff			 
8dff cd 94 8e				call input_curptr	 
8e02 7e					ld a, (hl) 
8e03 fe 20				cp ' ' 
8e05 28 1d				jr z, .inspacep     ; we are on space so eat the space until we hit non-space 
8e07			 
8e07			 
8e07			 
8e07			.inskpwn:	 
8e07 3a 4f ee				ld a,(input_cursor) 
8e0a fe 00				cp 0 
8e0c ca 3d 8d				jp z, .inmain    ; start of string 
8e0f			 
8e0f			;if we are on a word, then move off of it 
8e0f			 
8e0f cd 94 8e				call input_curptr	 
8e12 7e					ld a, (hl) 
8e13 fe 20				cp ' ' 
8e15 28 06				jr z, .iwstart     ; we are on space so eat the space until we hit non-space 
8e17					;jp z, .inmain    ; start of string 
8e17 21 4f ee				ld hl, input_cursor 
8e1a 35					dec (hl) 
8e1b 18 ea				jr .inskpwn 
8e1d			.iwstart: 
8e1d 21 4f ee				ld hl, input_cursor 
8e20 34					inc (hl) 
8e21 c3 3d 8d				jp .inmain 
8e24					 
8e24			 
8e24			.inspacep: 
8e24			 
8e24					;jp .inmain    ; start of string 
8e24			 
8e24			 
8e24			 
8e24 3a 4f ee				ld a,(input_cursor) 
8e27 fe 00				cp 0 
8e29 ca 3d 8d				jp z, .inmain    ; start of string 
8e2c			 
8e2c			; if we are on a word, then move off of it 
8e2c			 
8e2c cd 94 8e				call input_curptr	 
8e2f 7e					ld a, (hl) 
8e30 fe 20				cp ' ' 
8e32 c2 3b 8e				jp nz, .incharp     ; we are on non space so at end of prev word 
8e35 21 4f ee				ld hl, input_cursor 
8e38 35					dec (hl) 
8e39 18 e9				jr .inspacep 
8e3b			 
8e3b			 
8e3b			.incharp:	 
8e3b					; eat the word to get to the start 
8e3b 3a 4f ee				ld a,(input_cursor) 
8e3e fe 00				cp 0 
8e40 ca 3d 8d				jp z, .inmain    ; start of string 
8e43			 
8e43			; if we are on a word, then move off of it 
8e43			 
8e43 cd 94 8e				call input_curptr	 
8e46 7e					ld a, (hl) 
8e47 fe 20				cp ' ' 
8e49 28 06				jr z, .ipwordst     ; we are on space so eat the space until we hit non-space 
8e4b 21 4f ee				ld hl, input_cursor 
8e4e 35					dec (hl) 
8e4f 18 ea				jr .incharp 
8e51			.ipwordst: 
8e51					; at space before the prev word so reposition over it 
8e51 21 4f ee				ld hl, input_cursor 
8e54 34					inc (hl) 
8e55 18 b0				jr .inskpwn 
8e57					 
8e57			 
8e57			 
8e57			input_left: 
8e57				; move cursor left 
8e57 21 4f ee			ld hl, input_cursor 
8e5a 35				dec (hl) 
8e5b			;	cp 0 
8e5b			;	jp z, .inmain    ; ignore left as at the start of the string 
8e5b c3 3d 8d			jp .inmain 
8e5e			 
8e5e			input_right: 
8e5e				; move cursor right 
8e5e				 
8e5e				;ld a, (input_size) 
8e5e				;ld b, a 
8e5e 21 4f ee			ld hl, input_cursor 
8e61 34				inc (hl) 
8e62				;dec b 
8e62				;cp 0 
8e62				;jp z, .inmain   ; ignore as at end of the string buffer 
8e62				;ld a, b 
8e62				;inc a 
8e62				;ld (input_cursor), a 
8e62 c3 3d 8d			jp .inmain 
8e65			 
8e65			 
8e65			 
8e65			input_disp_ref: 
8e65				; display the text from start of buffer (ie full refresh) 
8e65 3a 5e ee			ld a, (input_at_pos) 
8e68 2a 61 ee			ld hl,(input_start) 
8e6b eb				ex de, hl 
8e6c cd d0 8a			call str_at_display  
8e6f c9				ret 
8e70			input_disp_oncur: 
8e70				; display the text from cursor position to end of buffer 
8e70				; TODO position start of string at cursor position on screen 
8e70				; TODO draw from that point on 
8e70 3a 4f ee			ld a, (input_cursor) 
8e73 47				ld b, a 
8e74 3a 5e ee			ld a, (input_at_pos) 
8e77 80				add b 
8e78 48				ld c, b     ; save a 
8e79 78				ld a, b     ; inc string start for cursor 
8e7a 2a 61 ee			ld hl,(input_start) 
8e7d cd ea 8c			call addatohl 
8e80 eb				ex de, hl 
8e81 79				ld a, c 
8e82 cd d0 8a			call str_at_display  
8e85 c9				ret 
8e86			 
8e86			input_nxtw: 
8e86				; Find next word 
8e86 c9				ret 
8e87			 
8e87			input_prvw: 
8e87				; Find previous word 
8e87 c9				ret 
8e88			 
8e88			input_lenrem:   
8e88				; Calculate the length of string remaining from current cursor 
8e88				; position to end of buffer (exc null term) 
8e88				 
8e88 3a 4f ee			ld a, (input_cursor) 
8e8b 4f				ld c, a 
8e8c 3a 60 ee			ld a, (input_size) 
8e8f 91				sub c 
8e90 06 00			ld b, 0 
8e92 0d				dec c 
8e93 c9				ret	 
8e94			 
8e94			input_curptr: 
8e94				; calc address of the character under the cursor 
8e94				 
8e94 2a 61 ee			ld hl, (input_start) 
8e97 3a 4f ee			ld a, (input_cursor) 
8e9a cd ea 8c			call addatohl 
8e9d c9				ret 
8e9e			 
8e9e			input_inschr: 
8e9e				; Insert char at cursor position 
8e9e f5				push af   ; save char 
8e9f				;call input_lenrem    ; get bc length of remaining string 
8e9f			 
8e9f				 
8e9f cd 94 8e			call input_curptr 
8ea2			;	ld hl, (input_start) 
8ea2			;	ld a, (input_cursor) 
8ea2			;	call addatohl 
8ea2				;push hl   ; save to come back to 
8ea2			 
8ea2				; shift everything up one to end of buffer 
8ea2			 
8ea2				;push hl 
8ea2				;dec de 
8ea2				;inc de 
8ea2			;	ldir 
8ea2				 
8ea2				;pop hl 
8ea2			 
8ea2				; are we adding to the end of line? 
8ea2			 
8ea2 3a 4f ee			ld a, (input_cursor) 
8ea5 47				ld b, a 
8ea6 3a 54 ee			ld a, (input_len) 
8ea9 b8				cp b 
8eaa 20 09			jr nz, .insmid   ; no, insert in middle of text 
8eac			 
8eac				; tack on the end of the line 
8eac f1				pop af 
8ead 77				ld (hl), a   ; save new char 
8eae 23				inc hl 
8eaf 3e 00			ld a, 0 
8eb1 77				ld (hl), a 
8eb2 c3 5e 8e			jp input_right 
8eb5				 
8eb5			.insmid: 
8eb5				; hl has insertion point so move everything up one to allow for insertion 
8eb5				;call input_shiftright 
8eb5 f1				pop af 
8eb6			 
8eb6			.shufinsmid: 
8eb6 47				ld b, a     ; b contains new char, c prev char at this position  
8eb7 7e				ld a, (hl) 
8eb8			 
8eb8 fe 00			cp 0    ; at end of string need to then dump new char and add term 
8eba 28 07			jr z, .endinsmid 
8ebc 4f				ld c, a 
8ebd 78				ld a, b 
8ebe 77				ld (hl), a 
8ebf 23				inc hl 
8ec0 79				ld a, c 
8ec1 18 f3			jr .shufinsmid 
8ec3				 
8ec3			 
8ec3			 
8ec3			 
8ec3			.endinsmid: 
8ec3 78				ld a, b 
8ec4 77				ld (hl), a 
8ec5 23				inc hl 
8ec6 3e 00			ld a, 0 
8ec8 77				ld (hl), a 
8ec9			 
8ec9			 
8ec9			;	ld (hl), a   ; save new char 
8ec9			 
8ec9 c3 5e 8e			jp input_right 
8ecc			 
8ecc			;input_shiftright: 
8ecc			;	; shift text right at cursor, hl has shift start 
8ecc			;	push hl 
8ecc			;	push de 
8ecc			;	push bc 
8ecc			; 
8ecc			; 
8ecc			;	; move to end of string past zero term 
8ecc			;	ld hl,(input_start) 
8ecc			;	ld a, (input_len) 
8ecc			;	call addatohl 
8ecc			;	inc hl 
8ecc			;;	inc hl 
8ecc			;;	inc hl 
8ecc			;	ld a, 0 
8ecc			;	ld (hl), a 
8ecc			;;	dec hl 
8ecc			;	 
8ecc			;;	ld (hl), a 
8ecc			;;	dec hl 
8ecc			; 
8ecc			;	push hl 
8ecc			;	pop de 
8ecc			;	inc de 
8ecc			;	 
8ecc			; 
8ecc			;;	ld hl,(input_start) 
8ecc			;;	ld a, (input_cursor) 
8ecc			;;	call addatohl 
8ecc			; 
8ecc			; 
8ecc			;	; calc how many bytes from cursor pos to end of string we need to shift 
8ecc			;	call input_lenrem    ; get bc length of remaining string 
8ecc			;	;ld a, (input_cursor) 
8ecc			;	;ld c, a 
8ecc			;	ld a, (input_len) 
8ecc			;	cp 2 
8ecc			;	jr z, .iskipzero	 
8ecc			;	;sub c 
8ecc			;	;inc a 
8ecc			;	;ld c, a 
8ecc			;	;ld b, 0 
8ecc			;	inc c 
8ecc			;	inc c 
8ecc			;	; move data 
8ecc			;	lddr 
8ecc			;.iskipzero: 
8ecc			; 
8ecc			;	pop bc 
8ecc			;	pop de 
8ecc			;	pop hl 
8ecc			;	ret	 
8ecc			 
8ecc			input_delchar: 
8ecc				; Delete char at cursor position 
8ecc cd 88 8e			call input_lenrem    ; get bc length of remaining string 
8ecf 2a 61 ee			ld hl, (input_start) 
8ed2 3a 4f ee			ld a, (input_cursor) 
8ed5 cd ea 8c			call addatohl 
8ed8			 
8ed8 e5				push hl 
8ed9 d1				pop de 
8eda 1b				dec de 
8edb			 
8edb			.dl:	 
8edb ed a0			ldi  
8edd 7e				ld a, (hl) 
8ede fe 00			cp 0 
8ee0 28 02			jr z, .dldone 
8ee2 18 f7			jr .dl 
8ee4			.dldone: 
8ee4 ed a0			ldi 
8ee6			 
8ee6 c3 57 8e			jp input_left 
8ee9			 
8ee9			 
8ee9			endif 
8ee9			 
8ee9			 
8ee9			 
8ee9			if EDIT_V1 
8ee9			input_str: 
8ee9			 
8ee9				    	ld (input_at_pos),a      ; save display position to start 
8ee9					add c 
8ee9					ld (input_at_cursor),a	; save draw pos of cursor 
8ee9					ld (input_start), hl     ; save ptr to buffer 
8ee9					ld a, c 
8ee9					call addatohl 
8ee9					ld (input_ptr), hl     ; save ptr to point under the cursor 
8ee9					ld a,d 
8ee9				        ld (input_size), a       ; save length of input area 
8ee9					ld a, c 
8ee9					ld (input_cursor),a      ; init cursor start position  
8ee9					ld a,e 
8ee9				        ld (input_display_size), a       ; save length of input area that is displayed TODO 
8ee9					 
8ee9					 
8ee9			 
8ee9			;		ld a,(input_ptr) 
8ee9			;		ld (input_under_cursor),a 	; save what is under the cursor 
8ee9			 
8ee9			; TODO move out to cin as cursor shape is used by the 4x4 ??? 
8ee9					; init cursor shape if not set by the cin routines 
8ee9					ld hl, cursor_shape 
8ee9			if BASE_KEV 
8ee9					ld a, 255 
8ee9			else 
8ee9					ld a, '#' 
8ee9			endif 
8ee9					ld (hl), a 
8ee9					inc hl 
8ee9					ld a, 0 
8ee9					ld (hl), a 
8ee9			 
8ee9					ld a, CUR_BLINK_RATE 
8ee9					ld (input_cur_flash), a 
8ee9					ld a, 1 
8ee9					ld (input_cur_onoff),a 
8ee9			 
8ee9			;	if DEBUG_INPUT 
8ee9			;		push af 
8ee9			;		ld a, 'I' 
8ee9			;		ld (debug_mark),a 
8ee9			;		pop af 
8ee9			;		CALLMONITOR 
8ee9			;	endif 
8ee9			.is1:		; main entry loop 
8ee9			 
8ee9			 
8ee9			 
8ee9					; pause 1ms 
8ee9			 
8ee9					ld a, 1 
8ee9					call aDelayInMS 
8ee9			 
8ee9					; dec flash counter 
8ee9					ld a, (input_cur_flash) 
8ee9					dec a 
8ee9					ld (input_cur_flash), a 
8ee9					cp 0 
8ee9					jr nz, .nochgstate 
8ee9			 
8ee9			 
8ee9					; change state 
8ee9					ld a,(input_cur_onoff) 
8ee9					neg 
8ee9					ld (input_cur_onoff),a 
8ee9			 
8ee9			 
8ee9					; reset on change of state 
8ee9					ld a, CUR_BLINK_RATE 
8ee9					ld (input_cur_flash), a 
8ee9			 
8ee9			.nochgstate: 
8ee9					 
8ee9					 
8ee9			 
8ee9					; display cursor  
8ee9			 
8ee9			;		ld hl, (input_start) 
8ee9			;		ld a, (input_cursor) 
8ee9			;		call addatohl 
8ee9			 
8ee9					; get char under cursor and replace with cursor 
8ee9			ld hl, (input_ptr) 
8ee9			;		ld a, (hl) 
8ee9			;		ld (input_under_cursor),a 
8ee9			;		ld a, '_' 
8ee9			;		ld (hl), a 
8ee9			 
8ee9					; display string 
8ee9			 
8ee9					ld de, (input_start) 
8ee9					ld a, (input_at_pos) 
8ee9					call str_at_display 
8ee9			;	        call update_display 
8ee9			 
8ee9					; find place to put the cursor 
8ee9			;		add h 
8ee9			;		ld l, display_row_1 
8ee9			;		sub l 
8ee9			; (input_at_pos) 
8ee9					;ld c, a 
8ee9			;		ld a, (input_cursor) 
8ee9			;		ld l, (input_at_pos) 
8ee9			;		;ld b, h 
8ee9			;		add l 
8ee9			;		ld (input_at_cursor),a 
8ee9					;ld l,h 
8ee9			 
8ee9			;		ld h, 0 
8ee9			;		ld l,(input_at_pos) 
8ee9			;		ld a, (input_cursor) 
8ee9			;		call addatohl 
8ee9			;		ld a, 074H-19			; TODO BUG I dont know why offset is showing 74H 
8ee9			;		call subafromhl 
8ee9			;		ld a,l 
8ee9			;		ld (input_at_cursor), a 
8ee9			 
8ee9				if DEBUG_INPUT 
8ee9					ld a, (hardware_diag) 
8ee9					cp 0 
8ee9					jr z, .skip_input_diag 
8ee9			 
8ee9					ld a,(input_at_pos) 
8ee9					ld hl, LFSRSeed 
8ee9					call hexout 
8ee9					ld a, (input_cursor) 
8ee9					ld hl, LFSRSeed+2 
8ee9					call hexout 
8ee9					ld a,(input_at_cursor) 
8ee9					ld hl, LFSRSeed+4 
8ee9					call hexout 
8ee9			 
8ee9					ld a,(input_cur_onoff) 
8ee9					ld hl, LFSRSeed+6 
8ee9					call hexout 
8ee9			 
8ee9					ld a,(input_cur_flash) 
8ee9					ld hl, LFSRSeed+8 
8ee9					call hexout 
8ee9			 
8ee9					ld a,(input_len) 
8ee9					ld hl, LFSRSeed+10 
8ee9					call hexout 
8ee9					ld hl, LFSRSeed+12 
8ee9					ld a, 0 
8ee9					ld (hl),a 
8ee9					ld a, display_row_4 
8ee9					ld de, LFSRSeed 
8ee9					call str_at_display 
8ee9					.skip_input_diag: 
8ee9				endif 
8ee9			 
8ee9					; decide on if we are showing the cursor this time round 
8ee9			 
8ee9					ld a, (input_cur_onoff) 
8ee9					cp 255 
8ee9					jr z, .skipcur 
8ee9			 
8ee9			 
8ee9					ld a,(input_at_cursor) 
8ee9					ld de, cursor_shape 
8ee9					call str_at_display 
8ee9			 
8ee9					; save length of current input string 
8ee9					ld hl, (input_start) 
8ee9					ld a, 0 
8ee9					call strlent 
8ee9					ld a,l 
8ee9					ld (input_len),a 
8ee9			 
8ee9			.skipcur: 
8ee9			 
8ee9				        call update_display 
8ee9					 
8ee9			 
8ee9			 
8ee9					; wait 
8ee9				 
8ee9					; TODO loop without wait to flash the cursor and char under cursor	 
8ee9					call cin    ; _wait 
8ee9			 
8ee9					cp 0 
8ee9					jp z, .is1 
8ee9			 
8ee9					; get ptr to char to input into 
8ee9			 
8ee9					ld c,a 
8ee9					ld hl, (input_start) 
8ee9					ld a, (input_cursor) 
8ee9					call addatohl 
8ee9					ld (input_ptr), hl 
8ee9					ld a,c 
8ee9			 
8ee9					; replace char under cursor 
8ee9			 
8ee9			;		ld hl, (input_ptr) 
8ee9			;		ld a, (input_under_cursor) 	; get what is under the cursor 
8ee9			;		ld (hl), a 
8ee9			 
8ee9			;	if DEBUG_INPUT 
8ee9			;		push af 
8ee9			;		ld a, 'i' 
8ee9			;		ld (debug_mark),a 
8ee9			;		pop af 
8ee9			;		CALLMONITOR 
8ee9			;	endif 
8ee9					cp KEY_HOME 
8ee9					jr nz, .iske 
8ee9			 
8ee9					ld a, (input_at_pos) 
8ee9					ld (input_at_cursor),a 
8ee9					ld a, 0 
8ee9					ld (input_cursor), a 
8ee9					jp .is1 
8ee9					 
8ee9			.iske:		cp KEY_END 
8ee9					jr nz, .isknw 
8ee9					jp .is1 
8ee9			 
8ee9			.isknw:		cp KEY_NEXTWORD 
8ee9					jr nz, .iskpw 
8ee9			 
8ee9			.isknwm:	ld hl, (input_ptr) 
8ee9					ld a,(hl)	 
8ee9					cp 0 
8ee9					jp z, .is1    ; end of string 
8ee9					cp ' ' 
8ee9					jp z, .is1    ; end of word 
8ee9					inc hl 
8ee9					ld (input_ptr), hl 
8ee9					ld a, (input_at_cursor) 
8ee9					inc a 
8ee9					ld (input_at_cursor), a 
8ee9					jr .isknwm 
8ee9			 
8ee9			.iskpw:		cp KEY_PREVWORD 
8ee9					jr nz, .iskl 
8ee9			.iskpwm:	 
8ee9					ld hl, (input_ptr) 
8ee9					ld a,(hl)	 
8ee9					cp 0  
8ee9					jp z, .is1    ; end of string 
8ee9					cp ' ' 
8ee9					jp z, .is1    ; end of word 
8ee9					dec hl 
8ee9					ld (input_ptr), hl 
8ee9					ld a, (input_at_cursor) 
8ee9					dec a 
8ee9					ld (input_at_cursor), a 
8ee9					jr .iskpwm 
8ee9			 
8ee9			 
8ee9			.iskl:		cp KEY_LEFT 
8ee9					jr nz, .isk1 
8ee9			 
8ee9					ld a, (input_cursor) 
8ee9			 
8ee9					cp 0 
8ee9					jp z, .is1 		; at start of line to ignore  
8ee9			 
8ee9					dec  a 		; TODO check underflow 
8ee9					ld (input_cursor), a 
8ee9			 
8ee9					ld hl, (input_ptr) 
8ee9					dec hl 
8ee9					ld (input_ptr), hl 
8ee9					 
8ee9					ld a, (input_at_cursor) 
8ee9					dec a 
8ee9					ld (input_at_cursor), a 
8ee9			 
8ee9					ld a, 1		; show cursor moving 
8ee9					ld (input_cur_onoff),a 
8ee9					ld a, CUR_BLINK_RATE 
8ee9					ld (input_cur_flash), a 
8ee9			 
8ee9					jp .is1 
8ee9			 
8ee9			.isk1:		cp KEY_RIGHT 
8ee9					jr nz, .isk2 
8ee9			 
8ee9					ld a,(input_len)		; TODO BUG why cant i load e direct? 
8ee9					ld e,a 
8ee9					ld a, (input_cursor) 
8ee9					cp e 
8ee9					jp z, .is1		; at the end of string so dont go right 
8ee9			 
8ee9					inc  a 		; TODO check overflow 
8ee9					ld (input_cursor), a 
8ee9			 
8ee9					ld a, (input_at_cursor) 
8ee9					inc a 
8ee9					ld (input_at_cursor), a 
8ee9			 
8ee9					ld hl, (input_ptr) 
8ee9					inc hl 
8ee9					ld (input_ptr), hl 
8ee9			 
8ee9					ld a, 1		; show cursor moving 
8ee9					ld (input_cur_onoff),a 
8ee9					ld a, CUR_BLINK_RATE 
8ee9					ld (input_cur_flash), a 
8ee9			 
8ee9					jp .is1 
8ee9			 
8ee9			.isk2:		cp KEY_UP 
8ee9			 
8ee9					jr nz, .isk3 
8ee9			 
8ee9					; swap last command with the current on 
8ee9			 
8ee9					; move cursor to start of string 
8ee9					ld hl, (input_start) 
8ee9					ld (input_ptr), hl 
8ee9			 
8ee9					ld a, (input_at_pos) 
8ee9					ld (input_at_cursor), a 
8ee9			 
8ee9					ld a, 0 
8ee9					ld (input_cursor), a 
8ee9					 
8ee9					; swap input and last command buffers 
8ee9			 
8ee9					ld hl, os_cli_cmd 
8ee9					ld de, os_last_cmd 
8ee9					ld b, 255 
8ee9			.swap1:		ld a, (hl) 
8ee9					ld c,a 
8ee9					ld a, (de) 
8ee9					ld (hl), a 
8ee9					ld a,c 
8ee9					ld (de),a 
8ee9					inc hl 
8ee9					inc de 
8ee9					djnz .swap1 
8ee9			 
8ee9			 
8ee9			 
8ee9			 
8ee9			 
8ee9					jp .is1 
8ee9			 
8ee9			.isk3:		cp KEY_BS 
8ee9					jr nz, .isk4 
8ee9			 
8ee9					ld a, (input_cursor) 
8ee9			 
8ee9					cp 0 
8ee9					jp z, .is1 		; at start of line to ignore  
8ee9			 
8ee9					dec  a 		; TODO check underflow 
8ee9					ld (input_cursor), a 
8ee9			 
8ee9					; hl is source 
8ee9					; de needs to be source - 1 
8ee9			 
8ee9			;		ld a, 0 
8ee9			;		dec hl 
8ee9			;		ld (hl), a 
8ee9			 
8ee9					ld hl, (input_ptr) 
8ee9					dec hl 
8ee9					ld (input_ptr), hl 
8ee9			 
8ee9					; shift all data 
8ee9			 
8ee9					push hl 
8ee9					inc hl 
8ee9					pop de 
8ee9					ld a, (input_len)		; TODO BUG WAS ld c, (input... 
8ee9					ld c,a 
8ee9					ld b,0 
8ee9					ldir  
8ee9			 
8ee9			 
8ee9			 
8ee9			 
8ee9					ld a, (input_at_cursor) 
8ee9					dec a 
8ee9					ld (input_at_cursor), a 
8ee9			 
8ee9			 
8ee9					ld a, 1		; show cursor moving 
8ee9					ld (input_cur_onoff),a 
8ee9					ld a, CUR_BLINK_RATE 
8ee9					ld (input_cur_flash), a 
8ee9			 
8ee9					; remove char 
8ee9					ld a, (input_at_cursor) 
8ee9					inc a 
8ee9					ld de,.iblank 
8ee9					call str_at_display 
8ee9			 
8ee9					jp .is1 
8ee9			 
8ee9			.isk4:		cp KEY_CR 
8ee9					jr z, .endinput 
8ee9			 
8ee9					; else add the key press to the end 
8ee9			 
8ee9					ld c, a			; save key pressed 
8ee9			 
8ee9					ld a,(hl)		; get what is currently under char 
8ee9			 
8ee9					cp 0			; we are at the end of the string 
8ee9					jr nz, .onchar 
8ee9					 
8ee9					; add a char to the end of the string 
8ee9				 
8ee9					ld (hl),c 
8ee9					inc hl 
8ee9			;		ld a,' ' 
8ee9			;		ld (hl),a 
8ee9			;		inc hl 
8ee9					ld a,0 
8ee9					ld (hl),a 
8ee9					dec hl 
8ee9			 
8ee9					ld a, (input_cursor) 
8ee9					inc a				; TODO check max string length and scroll  
8ee9					ld (input_cursor), a		; inc cursor pos 
8ee9							 
8ee9					ld a, (input_at_cursor) 
8ee9					inc a 
8ee9					ld (input_at_cursor), a 
8ee9			 
8ee9					ld hl, (input_ptr) 
8ee9					inc hl 
8ee9					ld (input_ptr), hl 
8ee9			 
8ee9					ld hl, (input_ptr) 
8ee9					inc hl 
8ee9					ld (input_ptr), hl 
8ee9			;	if DEBUG_INPUT 
8ee9			;		push af 
8ee9			;		ld a, '+' 
8ee9			;		ld (debug_mark),a 
8ee9			;		pop af 
8ee9			;		CALLMONITOR 
8ee9			;	endif 
8ee9					ld a, 1		; show cursor moving 
8ee9					ld (input_cur_onoff),a 
8ee9					ld a, CUR_BLINK_RATE 
8ee9					ld (input_cur_flash), a 
8ee9					jp .is1 
8ee9					 
8ee9			 
8ee9			 
8ee9					; if on a char then insert 
8ee9			.onchar: 
8ee9			 
8ee9					; TODO over flow check: make sure insert does not blow out buffer 
8ee9			 
8ee9					; need to do some maths to use lddr 
8ee9			 
8ee9					push hl   ; save char pos 
8ee9					push bc 
8ee9			 
8ee9					ld hl, (input_start) 
8ee9					ld a, (input_len) 
8ee9					call addatohl  		; end of string 
8ee9					inc hl 
8ee9					inc hl		; past zero term 
8ee9					push hl 
8ee9					inc hl 
8ee9					push hl  
8ee9			 
8ee9								; start and end of lddr set, now how much to move? 
8ee9			 
8ee9							 
8ee9					ld a, (input_cursor)		; BUG TODO why cant i load directly into b??? 
8ee9					ld b,a 
8ee9					ld a,(input_len) 
8ee9					ld e,a 
8ee9					sub b 
8ee9					inc a		;?? 
8ee9					inc a		;?? 
8ee9					inc a		;?? 
8ee9			 
8ee9					ld b,0 
8ee9					ld c,a 
8ee9			 
8ee9				if DEBUG_INPUT 
8ee9					push af 
8ee9					ld a, 'i' 
8ee9					ld (debug_mark),a 
8ee9					pop af 
8ee9			;		CALLMONITOR 
8ee9				endif 
8ee9					pop de 
8ee9					pop hl 
8ee9				if DEBUG_INPUT 
8ee9					push af 
8ee9					ld a, 'I' 
8ee9					ld (debug_mark),a 
8ee9					pop af 
8ee9			;		CALLMONITOR 
8ee9				endif 
8ee9					lddr 
8ee9				 
8ee9			 
8ee9			 
8ee9					; TODO have a key for insert/overwrite mode???? 
8ee9					pop bc 
8ee9					pop hl 
8ee9					ld (hl), c		; otherwise overwrite current char 
8ee9					 
8ee9			 
8ee9			 
8ee9			 
8ee9					ld a, (input_cursor) 
8ee9					inc  a 		; TODO check overflow 
8ee9					ld (input_cursor), a 
8ee9			 
8ee9					ld a, (input_at_cursor) 
8ee9					inc a 
8ee9					ld (input_at_cursor), a 
8ee9			 
8ee9					jp .is1 
8ee9			 
8ee9			.endinput:	; TODO look for end of string 
8ee9			 
8ee9					; add trailing space for end of token 
8ee9			 
8ee9					ld hl, (input_start) 
8ee9					ld a,(input_len) 
8ee9					call addatohl 
8ee9					ld a, ' ' 
8ee9					ld (hl),a 
8ee9					; TODO eof of parse marker 
8ee9			 
8ee9					inc hl 
8ee9					ld a, 0 
8ee9					ld (hl),a 
8ee9			 
8ee9			 
8ee9					ret 
8ee9			 
8ee9			.iblank: db " ",0 
8ee9			 
8ee9			 
8ee9			input_str_prev:	ld (input_at_pos), a 
8ee9					ld (input_start), hl 
8ee9					ld a,1			; add cursor 
8ee9					ld (hl),a 
8ee9					inc hl 
8ee9					ld a,0 
8ee9					ld (hl),a 
8ee9					ld (input_ptr), hl 
8ee9					ld a,d 
8ee9					ld (input_size), a 
8ee9					ld a,0 
8ee9					ld (input_cursor),a 
8ee9			.instr1:	 
8ee9			 
8ee9					; TODO do block cursor 
8ee9					; TODO switch cursor depending on the modifer key 
8ee9			 
8ee9					; update cursor shape change on key hold 
8ee9			 
8ee9					ld hl, (input_ptr) 
8ee9					dec hl 
8ee9					ld a,(cursor_shape) 
8ee9					ld (hl), a 
8ee9			 
8ee9					; display entered text 
8ee9					ld a,(input_at_pos) 
8ee9			            	CALL fLCD_Pos       ;Position cursor to location in A 
8ee9			            	LD   de, (input_start) 
8ee9			            	CALL fLCD_Str       ;Display string pointed to by DE 
8ee9			 
8ee9					call cin 
8ee9					cp 0 
8ee9					jr z, .instr1 
8ee9			 
8ee9					; proecess keyboard controls first 
8ee9			 
8ee9					ld hl,(input_ptr) 
8ee9			 
8ee9					cp KEY_CR	 ; pressing enter ends input 
8ee9					jr z, .instrcr 
8ee9			 
8ee9					cp KEY_BS 	; back space 
8ee9					jr nz, .instr2 
8ee9					; process back space 
8ee9			 
8ee9					; TODO stop back space if at start of string 
8ee9					dec hl 
8ee9					dec hl ; to over write cursor 
8ee9					ld a,(cursor_shape) 
8ee9					;ld a,0 
8ee9					ld (hl),a 
8ee9					inc hl 
8ee9					ld a," " 
8ee9					ld (hl),a 
8ee9					ld (input_ptr),hl 
8ee9					 
8ee9			 
8ee9					jr .instr1 
8ee9			 
8ee9			.instr2:	cp KEY_LEFT    ; cursor left 
8ee9					jr nz, .instr3 
8ee9					dec hl 
8ee9					ld (input_ptr),hl 
8ee9					jr .instr1 
8ee9				 
8ee9			.instr3:	cp KEY_RIGHT      ; cursor right 
8ee9					jr nz, .instr4 
8ee9					inc hl 
8ee9					ld (input_ptr),hl 
8ee9					jr .instr1 
8ee9			 
8ee9			.instr4:	cp KEY_HOME    ; jump to start of line 
8ee9					jr nz, .instr5 
8ee9					dec hl 
8ee9					ld (input_ptr),hl 
8ee9					jr .instr1 
8ee9			 
8ee9			.instr5:	cp KEY_END     ; jump to end of line 
8ee9					jr nz, .instr6 
8ee9					dec hl 
8ee9					ld (input_ptr),hl 
8ee9					jr .instr1 
8ee9			.instr6:        cp KEY_UP      ; recall last command 
8ee9					jr nz, .instrnew 
8ee9			 
8ee9				ld hl, scratch 
8ee9				ld de, os_last_cmd 
8ee9				call strcpy 
8ee9					jr .instr1 
8ee9			 
8ee9			 
8ee9			.instrnew:	; no special key pressed to see if we have room to store it 
8ee9			 
8ee9					; TODO do string size test 
8ee9			 
8ee9					dec hl ; to over write cursor 
8ee9					ld (hl),a 
8ee9					inc hl 
8ee9					ld a,(cursor_shape) 
8ee9					ld (hl),a 
8ee9					inc hl 
8ee9					ld a,0 
8ee9					ld (hl),a 
8ee9			 
8ee9					ld (input_ptr),hl 
8ee9					 
8ee9					jr .instr1 
8ee9			.instrcr:	dec hl		; remove cursor 
8ee9					ld a,' '	; TODO add a trailing space for safety 
8ee9					ld (hl),a 
8ee9					inc hl 
8ee9					ld a,0 
8ee9					ld (hl),a 
8ee9			 
8ee9			 
8ee9					; if at end of line scroll up    
8ee9					; TODO detecting only end of line 4 for scroll up  
8ee9			 
8ee9					;ld   
8ee9			 
8ee9					ret 
8ee9			 
8ee9			 
8ee9			endif 
8ee9			; strcpy hl = dest, de source 
8ee9			 
8ee9 1a			strcpy:   LD   A, (DE)        ;Get character from string 
8eea b7			            OR   A              ;Null terminator? 
8eeb c8			            RET  Z              ;Yes, so finished 
8eec 1a					ld a,(de) 
8eed 77					ld (hl),a 
8eee 13			            INC  DE             ;Point to next character 
8eef 23					inc hl 
8ef0 18 f7		            JR   strcpy       ;Repeat 
8ef2 c9					ret 
8ef3			 
8ef3			 
8ef3			; TODO string_at  
8ef3			; pass string which starts with lcd offset address and then null term string 
8ef3			 
8ef3			; TODO string to dec 
8ef3			; TODO string to hex 
8ef3			; TODO byte to string hex 
8ef3			; TODO byte to string dec 
8ef3			 
8ef3			 
8ef3			 
8ef3			; from z80uartmonitor 
8ef3			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
8ef3			; OUTPUT VALUE OF A IN HEX ONE NYBBLE AT A TIME 
8ef3			; pass hl for where to put the text 
8ef3			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
8ef3 c5			hexout:	PUSH BC 
8ef4 f5					PUSH AF 
8ef5 47					LD B, A 
8ef6					; Upper nybble 
8ef6 cb 3f				SRL A 
8ef8 cb 3f				SRL A 
8efa cb 3f				SRL A 
8efc cb 3f				SRL A 
8efe cd 0e 8f				CALL tohex 
8f01 77					ld (hl),a 
8f02 23					inc hl	 
8f03					 
8f03					; Lower nybble 
8f03 78					LD A, B 
8f04 e6 0f				AND 0FH 
8f06 cd 0e 8f				CALL tohex 
8f09 77					ld (hl),a 
8f0a 23					inc hl	 
8f0b					 
8f0b f1					POP AF 
8f0c c1					POP BC 
8f0d c9					RET 
8f0e					 
8f0e			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
8f0e			; TRANSLATE value in lower A TO 2 HEX CHAR CODES FOR DISPLAY 
8f0e			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
8f0e			tohex: 
8f0e e5					PUSH HL 
8f0f d5					PUSH DE 
8f10 16 00				LD D, 0 
8f12 5f					LD E, A 
8f13 21 1b 8f				LD HL, .DATA 
8f16 19					ADD HL, DE 
8f17 7e					LD A, (HL) 
8f18 d1					POP DE 
8f19 e1					POP HL 
8f1a c9					RET 
8f1b			 
8f1b			.DATA: 
8f1b 30					DEFB	30h	; 0 
8f1c 31					DEFB	31h	; 1 
8f1d 32					DEFB	32h	; 2 
8f1e 33					DEFB	33h	; 3 
8f1f 34					DEFB	34h	; 4 
8f20 35					DEFB	35h	; 5 
8f21 36					DEFB	36h	; 6 
8f22 37					DEFB	37h	; 7 
8f23 38					DEFB	38h	; 8 
8f24 39					DEFB	39h	; 9 
8f25 41					DEFB	41h	; A 
8f26 42					DEFB	42h	; B 
8f27 43					DEFB	43h	; C 
8f28 44					DEFB	44h	; D 
8f29 45					DEFB	45h	; E 
8f2a 46					DEFB	46h	; F 
8f2b			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
8f2b			;; 	ASCII char code for 0-9,A-F in A to single hex digit 
8f2b			;;    subtract $30, if result > 9 then subtract $7 more 
8f2b			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
8f2b			atohex: 
8f2b d6 30				SUB $30 
8f2d fe 0a				CP 10 
8f2f f8					RET M		; If result negative it was 0-9 so we're done 
8f30 d6 07				SUB $7		; otherwise, subtract $7 more to get to $0A-$0F 
8f32 c9					RET		 
8f33			 
8f33			 
8f33			 
8f33			 
8f33			; Get 2 ASCII characters as hex byte from pointer in hl 
8f33			 
8f33			BYTERD: 
8f33 16 00			LD	D,00h		;Set up 
8f35 cd 3d 8f			CALL	HEXCON		;Get byte and convert to hex 
8f38 87				ADD	A,A		;First nibble so 
8f39 87				ADD	A,A		;multiply by 16 
8f3a 87				ADD	A,A		; 
8f3b 87				ADD	A,A		; 
8f3c 57				LD	D,A		;Save hi nibble in D 
8f3d			HEXCON: 
8f3d 7e				ld a, (hl)		;Get next chr 
8f3e 23				inc hl 
8f3f d6 30			SUB	030h		;Makes '0'-'9' equal 0-9 
8f41 fe 0a			CP	00Ah		;Is it 0-9 ? 
8f43 38 02			JR	C,NALPHA	;If so miss next bit 
8f45 d6 07			SUB	007h		;Else convert alpha 
8f47			NALPHA: 
8f47 b2				OR	D		;Add hi nibble back 
8f48 c9				RET			; 
8f49			 
8f49			 
8f49			; 
8f49			; Get a word (16 bit) in hexadecimal notation. The result is returned in HL. 
8f49			; Since the routines get_byte and therefore get_nibble are called, only valid 
8f49			; characters (0-9a-f) are accepted. 
8f49			; 
8f49			;get_word        push    af 
8f49			;                call    get_byte        ; Get the upper byte 
8f49			;                ld      h, a 
8f49			;                call    get_byte        ; Get the lower byte 
8f49			;                ld      l, a 
8f49			;                pop     af 
8f49			;                ret 
8f49			; 
8f49			; Get a byte in hexadecimal notation. The result is returned in A. Since 
8f49			; the routine get_nibble is used only valid characters are accepted - the  
8f49			; input routine only accepts characters 0-9a-f. 
8f49			; 
8f49 c5			get_byte:        push    bc              ; Save contents of B (and C) 
8f4a 7e					ld a,(hl) 
8f4b 23					inc hl 
8f4c cd 71 8f		                call    nibble2val      ; Get upper nibble 
8f4f cb 07		                rlc     a 
8f51 cb 07		                rlc     a 
8f53 cb 07		                rlc     a 
8f55 cb 07		                rlc     a 
8f57 47			                ld      b, a            ; Save upper four bits 
8f58 7e					ld a,(hl) 
8f59 cd 71 8f		                call    nibble2val      ; Get lower nibble 
8f5c b0			                or      b               ; Combine both nibbles 
8f5d c1			                pop     bc              ; Restore B (and C) 
8f5e c9			                ret 
8f5f			; 
8f5f			; Get a hexadecimal digit from the serial line. This routine blocks until 
8f5f			; a valid character (0-9a-f) has been entered. A valid digit will be echoed 
8f5f			; to the serial line interface. The lower 4 bits of A contain the value of  
8f5f			; that particular digit. 
8f5f			; 
8f5f			;get_nibble      ld a,(hl)           ; Read a character 
8f5f			;                call    to_upper        ; Convert to upper case 
8f5f			;                call    is_hex          ; Was it a hex digit? 
8f5f			;                jr      nc, get_nibble  ; No, get another character 
8f5f			 ;               call    nibble2val      ; Convert nibble to value 
8f5f			 ;               call    print_nibble 
8f5f			 ;               ret 
8f5f			; 
8f5f			; is_hex checks a character stored in A for being a valid hexadecimal digit. 
8f5f			; A valid hexadecimal digit is denoted by a set C flag. 
8f5f			; 
8f5f			;is_hex          cp      'F' + 1         ; Greater than 'F'? 
8f5f			;                ret     nc              ; Yes 
8f5f			;                cp      '0'             ; Less than '0'? 
8f5f			;                jr      nc, is_hex_1    ; No, continue 
8f5f			;                ccf                     ; Complement carry (i.e. clear it) 
8f5f			;                ret 
8f5f			;is_hex_1        cp      '9' + 1         ; Less or equal '9*? 
8f5f			;                ret     c               ; Yes 
8f5f			;                cp      'A'             ; Less than 'A'? 
8f5f			;                jr      nc, is_hex_2    ; No, continue 
8f5f			;                ccf                     ; Yes - clear carry and return 
8f5f			;                ret 
8f5f			;is_hex_2        scf                     ; Set carry 
8f5f			;                ret 
8f5f			; 
8f5f			; Convert a single character contained in A to upper case: 
8f5f			; 
8f5f fe 61		to_upper:        cp      'a'             ; Nothing to do if not lower case 
8f61 d8			                ret     c 
8f62 fe 7b		                cp      'z' + 1         ; > 'z'? 
8f64 d0			                ret     nc              ; Nothing to do, either 
8f65 e6 5f		                and     $5f             ; Convert to upper case 
8f67 c9			                ret 
8f68			 
8f68			 
8f68			to_lower: 
8f68			 
8f68			   ; if char is in [A-Z] make it lower case 
8f68			 
8f68			   ; enter : a = char 
8f68			   ; exit  : a = lower case char 
8f68			   ; uses  : af 
8f68			 
8f68 fe 41		   cp 'A' 
8f6a d8			   ret c 
8f6b			    
8f6b fe 5b		   cp 'Z'+1 
8f6d d0			   ret nc 
8f6e			    
8f6e f6 20		   or $20 
8f70 c9			   ret 
8f71			 
8f71			; 
8f71			; Expects a hexadecimal digit (upper case!) in A and returns the 
8f71			; corresponding value in A. 
8f71			; 
8f71 fe 3a		nibble2val:      cp      '9' + 1         ; Is it a digit (less or equal '9')? 
8f73 38 02		                jr      c, nibble2val_1 ; Yes 
8f75 d6 07		                sub     7               ; Adjust for A-F 
8f77 d6 30		nibble2val_1:    sub     '0'             ; Fold back to 0..15 
8f79 e6 0f		                and     $f              ; Only return lower 4 bits 
8f7b c9			                ret 
8f7c			; 
8f7c			; Print_nibble prints a single hex nibble which is contained in the lower  
8f7c			; four bits of A: 
8f7c			; 
8f7c			;print_nibble    push    af              ; We won't destroy the contents of A 
8f7c			;                and     $f              ; Just in case... 
8f7c			;                add     a, '0'             ; If we have a digit we are done here. 
8f7c			;                cp      '9' + 1         ; Is the result > 9? 
8f7c			;                jr      c, print_nibble_1 
8f7c			;                add     a, 'A' - '0' - $a  ; Take care of A-F 
8f7c			;print_nibble_1  call    putc            ; Print the nibble and 
8f7c			;                pop     af              ; restore the original value of A 
8f7c			;                ret 
8f7c			;; 
8f7c			;; Send a CR/LF pair: 
8f7c			; 
8f7c			;crlf            push    af 
8f7c			;                ld      a, cr 
8f7c			;                call    putc 
8f7c			;                ld      a, lf 
8f7c			;                call    putc 
8f7c			;                pop     af 
8f7c			;                ret 
8f7c			; 
8f7c			; Print_word prints the four hex digits of a word to the serial line. The  
8f7c			; word is expected to be in HL. 
8f7c			; 
8f7c			;print_word      push    hl 
8f7c			;                push    af 
8f7c			;                ld      a, h 
8f7c			;                call    print_byte 
8f7c			;                ld      a, l 
8f7c			;                call    print_byte 
8f7c			;                pop     af 
8f7c			;                pop     hl 
8f7c			;                ret 
8f7c			; 
8f7c			; Print_byte prints a single byte in hexadecimal notation to the serial line. 
8f7c			; The byte to be printed is expected to be in A. 
8f7c			; 
8f7c			;print_byte      push    af              ; Save the contents of the registers 
8f7c			;                push    bc 
8f7c			;                ld      b, a 
8f7c			;                rrca 
8f7c			;                rrca 
8f7c			;                rrca 
8f7c			;                rrca 
8f7c			;                call    print_nibble    ; Print high nibble 
8f7c			;                ld      a, b 
8f7c			;                call    print_nibble    ; Print low nibble 
8f7c			;                pop     bc              ; Restore original register contents 
8f7c			;                pop     af 
8f7c			;                ret 
8f7c			 
8f7c			 
8f7c			 
8f7c			 
8f7c			 
8f7c			fourehexhl:  
8f7c 7e				ld a,(hl) 
8f7d cd 2b 8f			call atohex 
8f80 cb 3f				SRL A 
8f82 cb 3f				SRL A 
8f84 cb 3f				SRL A 
8f86 cb 3f				SRL A 
8f88 47				ld b, a 
8f89 23				inc hl 
8f8a 7e				ld a,(hl) 
8f8b 23				inc hl 
8f8c cd 2b 8f			call atohex 
8f8f 80				add b 
8f90 57				ld d,a 
8f91 7e				ld a,(hl) 
8f92 cd 2b 8f			call atohex 
8f95 cb 3f				SRL A 
8f97 cb 3f				SRL A 
8f99 cb 3f				SRL A 
8f9b cb 3f				SRL A 
8f9d 47				ld b, a 
8f9e 23				inc hl 
8f9f 7e				ld a,(hl) 
8fa0 23				inc hl 
8fa1 cd 2b 8f			call atohex 
8fa4 80				add b 
8fa5 5f				ld e, a 
8fa6 d5				push de 
8fa7 e1				pop hl 
8fa8 c9				ret 
8fa9			 
8fa9			; pass hl. returns z set if the byte at hl is a digit 
8fa9			;isdigithl:  
8fa9			;	push bc 
8fa9			;	ld a,(hl) 
8fa9			;	cp ':' 
8fa9			;	jr nc, .isdf 		; > 
8fa9			;	cp '0' 
8fa9			;	jr c, .isdf		; < 
8fa9			; 
8fa9			;	; TODO find a better way to set z 
8fa9			; 
8fa9			;	ld b,a 
8fa9			;	cp b 
8fa9			;	pop bc 
8fa9			;	ret 
8fa9			; 
8fa9			;.isdf:	; not digit so clear z 
8fa9			; 
8fa9			;	; TODO find a better way to unset z 
8fa9			; 
8fa9			;	ld b,a 
8fa9			;	inc b 
8fa9			;	cp b 
8fa9			; 
8fa9			;	pop bc 
8fa9			;	ret 
8fa9				 
8fa9				 
8fa9			 
8fa9			 
8fa9			; pass hl as the four byte address to load 
8fa9			 
8fa9			get_word_hl:  
8fa9 e5				push hl 
8faa cd 49 8f			call get_byte 
8fad				 
8fad 47				ld b, a 
8fae			 
8fae e1				pop hl 
8faf 23				inc hl 
8fb0 23				inc hl 
8fb1			 
8fb1			; TODO not able to handle a-f  
8fb1 7e				ld a,(hl) 
8fb2			;	;cp ':' 
8fb2			;	cp 'g' 
8fb2			;	jr nc, .single_byte_hl 		; > 
8fb2			;	cp 'G' 
8fb2			;	jr nc, .single_byte_hl 		; > 
8fb2			;	cp '0' 
8fb2			;	jr c, .single_byte_hl		; < 
8fb2			 
8fb2				;call isdigithl 
8fb2 fe 00			cp 0 
8fb4 28 06			jr z, .single_byte_hl 
8fb6			 
8fb6			.getwhln:   ; hex word so get next byte 
8fb6			 
8fb6 cd 49 8f			call get_byte 
8fb9 6f				ld l, a 
8fba 60				ld h,b 
8fbb c9				ret 
8fbc 68			.single_byte_hl:   ld l,b 
8fbd 26 00				ld h,0 
8fbf c9					ret 
8fc0			 
8fc0			 
8fc0			 
8fc0			 
8fc0 21 60 97			ld hl,asc+1 
8fc3			;	ld a, (hl) 
8fc3			;	call nibble2val 
8fc3 cd 49 8f			call get_byte 
8fc6			 
8fc6			;	call fourehexhl 
8fc6 32 ef e2			ld (scratch+52),a 
8fc9				 
8fc9 21 ed e2			ld hl,scratch+50 
8fcc 22 de e5			ld (os_cur_ptr),hl 
8fcf			 
8fcf c9				ret 
8fd0			 
8fd0			 
8fd0			; from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Other:DispA 
8fd0			 
8fd0			; Decimal Unsigned Version 
8fd0			 
8fd0			;Number in a to decimal ASCII 
8fd0			;adapted from 16 bit found in z80 Bits to 8 bit by Galandros 
8fd0			;Example: display a=56 as "056" 
8fd0			;input: a = number 
8fd0			;Output: a=0,value of a in the screen 
8fd0			;destroys af,bc (don't know about hl and de) 
8fd0			DispAToASCII: 
8fd0 0e 9c			ld	c,-100 
8fd2 cd dc 8f			call	.Na1 
8fd5 0e f6			ld	c,-10 
8fd7 cd dc 8f			call	.Na1 
8fda 0e ff			ld	c,-1 
8fdc 06 2f		.Na1:	ld	b,'0'-1 
8fde 04			.Na2:	inc	b 
8fdf 81				add	a,c 
8fe0 38 fc			jr	c,.Na2 
8fe2 91				sub	c		;works as add 100/10/1 
8fe3 f5				push af		;safer than ld c,a 
8fe4 78				ld	a,b		;char is in b 
8fe5			;TODO	CALL	PUTCHAR	;plot a char. Replace with bcall(_PutC) or similar. 
8fe5 f1				pop af		;safer than ld a,c 
8fe6 c9				ret 
8fe7			 
8fe7			; Decimal Signed Version 
8fe7			 
8fe7			; DispA 
8fe7			; -------------------------------------------------------------- 
8fe7			; Converts a signed integer value to a zero-terminated ASCII 
8fe7			; string representative of that value (using radix 10). 
8fe7			; -------------------------------------------------------------- 
8fe7			; INPUTS: 
8fe7			;     HL     Value to convert (two's complement integer). 
8fe7			;     DE     Base address of string destination. (pointer). 
8fe7			; -------------------------------------------------------------- 
8fe7			; OUTPUTS: 
8fe7			;     None 
8fe7			; -------------------------------------------------------------- 
8fe7			; REGISTERS/MEMORY DESTROYED 
8fe7			; AF HL 
8fe7			; -------------------------------------------------------------- 
8fe7			 
8fe7			;DispHLToASCII: 
8fe7			;   push    de 
8fe7			;   push    bc 
8fe7			; 
8fe7			;; Detect sign of HL. 
8fe7			;    bit    7, h 
8fe7			;    jr     z, ._DoConvert 
8fe7			; 
8fe7			;; HL is negative. Output '-' to string and negate HL. 
8fe7			;    ld     a, '-' 
8fe7			;    ld     (de), a 
8fe7			;    inc    de 
8fe7			; 
8fe7			;; Negate HL (using two's complement) 
8fe7			;    xor    a 
8fe7			;    sub    l 
8fe7			;    ld     l, a 
8fe7			;    ld     a, 0     ; Note that XOR A or SUB A would disturb CF 
8fe7			;    sbc    a, h 
8fe7			;    ld     h, a 
8fe7			; 
8fe7			;; Convert HL to digit characters 
8fe7			;._DoConvert: 
8fe7			;    ld     b, 0     ; B will count character length of number 
8fe7			;-   ld     a, 10 
8fe7			;    syscall  .DivHLByA  ; HL = HL / A, A = remainder 
8fe7			;    push   af 
8fe7			;    inc    b 
8fe7			;    ld     a, h 
8fe7			;    or     l 
8fe7			;    jr     nz, - 
8fe7			; 
8fe7			;; Retrieve digits from stack 
8fe7			;-   pop    af 
8fe7			;    or     $30 
8fe7			;    ld     (de), a 
8fe7			;    inc    de 
8fe7			;    djnz   - 
8fe7			; 
8fe7			;; Terminate string with NULL 
8fe7			;    xor    a 
8fe7			;    ld     (de), a 
8fe7			; 
8fe7			;    pop    bc 
8fe7			;    pop    de 
8fe7			;    ret 
8fe7			 
8fe7			;Comments 
8fe7			; 
8fe7			;    This routine uses the common positive-integer radix conversion algorithm of repeatedly dividing a value by the desired radix (base case: the value is zero) and saving the remainders of each division. 
8fe7			;    As this algorithm gives the digits in reverse order, they are pushed onto the hardware stack so that subsequently popping them yields the correct order. 
8fe7			;    Note that the output string will not be fixed-width. 
8fe7			; 
8fe7			;Example Usage 
8fe7			; 
8fe7			;    ld    hl, -1004 
8fe7			;    ld    de, OP1 
8fe7			;    call  DispA 
8fe7			;    ld    hl, OP1 
8fe7			;    syscall  PutS 
8fe7			 
8fe7			 
8fe7			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/string_to_uint16.z80 
8fe7			 
8fe7			 
8fe7			;Converts an ASCII string to an unsigned 16-bit integer 
8fe7			;Quits when it reaches a non-decimal digit 
8fe7			 
8fe7			string_to_uint16: 
8fe7			atoui_16: 
8fe7			;Input: 
8fe7			;     DE points to the string 
8fe7			;Outputs: 
8fe7			;     HL is the result 
8fe7			;     A is the 8-bit value of the number 
8fe7			;     DE points to the byte after the number 
8fe7			;Destroys: 
8fe7			;     BC 
8fe7			;       if the string is non-empty, BC is HL/10 
8fe7			;Size:  24 bytes 
8fe7			;Speed: 42+d(104+{0,9}) 
8fe7			;       d is the number of digits in the number 
8fe7			;       max is 640 cycles for a 5 digit number 
8fe7			;Assuming no leading zeros: 
8fe7			;1 digit:  146cc 
8fe7			;2 digit:  250cc 
8fe7			;3 digit:  354cc or 363cc (avg: 354.126cc) 
8fe7			;4 digit:  458cc or 467cc (avg: 458.27cc) 
8fe7			;5 digit:  562cc or 571cc or 580cc (avg: 562.4104cc) 
8fe7			;avg: 544.81158447265625cc (544+13297/16384) 
8fe7			;=============================================================== 
8fe7 21 00 00		  ld hl,0 
8fea			.u16a: 
8fea 1a			  ld a,(de) 
8feb d6 30		  sub 30h 
8fed fe 0a		  cp 10 
8fef d0			  ret nc 
8ff0 13			  inc de 
8ff1 44			  ld b,h 
8ff2 4d			  ld c,l 
8ff3 29			  add hl,hl 
8ff4 29			  add hl,hl 
8ff5 09			  add hl,bc 
8ff6 29			  add hl,hl 
8ff7 85			  add a,l 
8ff8 6f			  ld l,a 
8ff9 30 ef		  jr nc,.u16a 
8ffb 24			  inc h 
8ffc c3 ea 8f		  jp .u16a 
8fff			 
8fff			 
8fff			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/string_to_uint16.z80 
8fff			 
8fff			;written by Zeda 
8fff			;Converts a 16-bit unsigned integer to an ASCII string. 
8fff			 
8fff			uitoa_16: 
8fff			;Input: 
8fff			;   DE is the number to convert 
8fff			;   HL points to where to write the ASCII string (up to 6 bytes needed). 
8fff			;Output: 
8fff			;   HL points to the null-terminated ASCII string 
8fff			;      NOTE: This isn't necessarily the same as the input HL. 
8fff d5			  push de 
9000 c5			  push bc 
9001 f5			  push af 
9002 eb			  ex de,hl 
9003			 
9003 01 f0 d8		  ld bc,-10000 
9006 3e 2f		  ld a,'0'-1 
9008 3c			  inc a 
9009 09			  add hl,bc  
900a 38 fc		   jr c,$-2 
900c 12			  ld (de),a 
900d 13			  inc de 
900e			 
900e 01 e8 03		  ld bc,1000 
9011 3e 3a		  ld a,'9'+1 
9013 3d			  dec a  
9014 09			  add hl,bc  
9015 30 fc		   jr nc,$-2 
9017 12			  ld (de),a 
9018 13			  inc de 
9019			 
9019 01 9c ff		  ld bc,-100 
901c 3e 2f		  ld a,'0'-1 
901e 3c			  inc a  
901f 09			  add hl,bc  
9020 38 fc		   jr c,$-2 
9022 12			  ld (de),a 
9023 13			  inc de 
9024			 
9024 7d			  ld a,l 
9025 26 3a		  ld h,'9'+1 
9027 25			  dec h  
9028 c6 0a		  add a,10  
902a 30 fb		   jr nc,$-3 
902c c6 30		  add a,'0' 
902e eb			  ex de,hl 
902f 72			  ld (hl),d 
9030 23			  inc hl 
9031 77			  ld (hl),a 
9032 23			  inc hl 
9033 36 00		  ld (hl),0 
9035			 
9035			;Now strip the leading zeros 
9035 0e fa		  ld c,-6 
9037 09			  add hl,bc 
9038 3e 30		  ld a,'0' 
903a 23			  inc hl  
903b be			  cp (hl)  
903c 28 fc		  jr z,$-2 
903e			 
903e			;Make sure that the string is non-empty! 
903e 7e			  ld a,(hl) 
903f b7			  or a 
9040 20 01		  jr nz,.atoub 
9042 2b			  dec hl 
9043			.atoub: 
9043			 
9043 f1			  pop af 
9044 c1			  pop bc 
9045 d1			  pop de 
9046 c9			  ret 
9047			 
9047			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/toUpper.z80 
9047			 
9047			toUpper: 
9047			;A is the char. 
9047			;If A is a lowercase letter, this sets it to the matching uppercase 
9047			;18cc or 30cc or 41cc 
9047			;avg: 26.75cc 
9047 fe 61		  cp 'a' 
9049 d8			  ret c 
904a fe 7b		  cp 'z'+1 
904c d0			  ret nc 
904d d6 20		  sub 'a'-'A' 
904f c9			  ret 
9050			 
9050			; https://tutorials.eeems.ca/ASMin28Days/lesson/day16.html#cmp 
9050			 
9050			; String Length 
9050			;With a length-prefixed string, finding the length is trivial. For a null-terminated string, the process is decidedly more involved. This is where CPIR comes in. 
9050			 
9050			; Get the length of the null-terminated string starting at $8000 hl 
9050			;    LD     HL, $8000 
9050			 
9050			strlenz: 
9050			 
9050 af			    XOR    A               ; Zero is the value we are looking for. 
9051 47			    LD     B, A             ; Since we haven't the slightest clue as to the  
9052 4f			    LD     C, A             ; actual size of the string, put 0 in BC to search 
9053			                           ; 65, 536 bytes (the entire addressable memory space). 
9053 ed b1		    CPIR                   ; Begin search for a byte equalling zero. 
9055			 
9055			; BC has been decremented so that it holds -length. Now need to synthesize a NEG BC. 
9055 67			    LD     H, A             ; Zero HL (basically set it to 65, 536) to get the 
9056 6f			    LD     L, A             ; number of bytes 
9057 ed 42		    SBC    HL, BC           ; Find the size. CPIR doesn't affect carry. 
9059 2b			    DEC    HL              ; Compensate for null. 
905a c9				ret 
905b			 
905b			; Get the length of the A terminated string starting at $8000 hl 
905b			;    LD     HL, $8000 
905b			 
905b			strlent: 
905b			 
905b			                  ; A is the value we are looking for. 
905b 06 00		    LD     B, 0             ; Since we haven't the slightest clue as to the  
905d 0e 00		    LD     C, 0             ; actual size of the string, put 0 in BC to search 
905f			                           ; 65, 536 bytes (the entire addressable memory space). 
905f ed b1		    CPIR                   ; Begin search for a byte equalling zero. 
9061			 
9061			; BC has been decremented so that it holds -length. Now need to synthesize a NEG BC. 
9061 26 00		    LD     H, 0             ; Zero HL (basically set it to 65, 536) to get the 
9063 2e 00		    LD     L, 0             ; number of bytes 
9065 ed 42		    SBC    HL, BC           ; Find the size. CPIR doesn't affect carry. 
9067 2b			    DEC    HL              ; Compensate for null. 
9068 c9				ret 
9069			 
9069			 
9069			;Comparing Strings 
9069			 
9069			;IN    HL     Address of string1. 
9069			;      DE     Address of string2. 
9069			 
9069			; doc given but wrong??? 
9069			;OUT   zero   Set if string1 = string2, reset if string1 != string2. 
9069			;      carry  Set if string1 > string2, reset if string1 <= string2. 
9069			; tested 
9069			;OUT   carry set  if string1 = string2, carry  reset if string1 != string2. 
9069			 
9069			strcmp_old: 
9069 e5			    PUSH   HL 
906a d5			    PUSH   DE 
906b			 
906b 1a			    LD     A, (DE)          ; Compare lengths to determine smaller string 
906c be			    CP     (HL)            ; (want to minimize work). 
906d 38 01		    JR     C, Str1IsBigger 
906f 7e			    LD     A, (HL) 
9070			 
9070			Str1IsBigger: 
9070 4f			    LD     C, A             ; Put length in BC 
9071 06 00		    LD     B, 0 
9073 13			    INC    DE              ; Increment pointers to meat of string. 
9074 23			    INC    HL 
9075			 
9075			CmpLoop: 
9075 1a			    LD     A, (DE)          ; Compare bytes. 
9076 ed a1		    CPI 
9078 20 09		    JR     NZ, NoMatch      ; If (HL) != (DE), abort. 
907a 13			    INC    DE              ; Update pointer. 
907b ea 75 90		    JP     PE, CmpLoop 
907e			 
907e d1			    POP    DE 
907f e1			    POP    HL 
9080 1a			    LD     A, (DE)          ; Check string lengths to see if really equal. 
9081 be			    CP     (HL) 
9082 c9			    RET 
9083			 
9083			NoMatch: 
9083 2b			    DEC    HL 
9084 be			    CP     (HL)            ; Compare again to affect carry. 
9085 d1			    POP    DE 
9086 e1			    POP    HL 
9087 c9			    RET 
9088			 
9088			;; test strmp 
9088			; 
9088			;ld de, .str1 
9088			;ld hl, .str2 
9088			;call strcmp 
9088			;jr z, .z1 
9088			;;this 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "NZ1" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			;.z1: 
9088			; 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "ZZ1" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			; 
9088			;ld de, .str1 
9088			;ld hl, .str1 
9088			;call strcmp 
9088			;jr z, .z2 
9088			;;this 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "NZ2" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			;.z2: 
9088			; 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "ZZ2" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			; 
9088			;ld de, .str1 
9088			;ld hl, .str2 
9088			;call strcmp 
9088			;jr c, .c1 
9088			; 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "Nc1" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			;.c1: 
9088			;;this 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "cc1" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			; 
9088			;ld de, .str1 
9088			;ld hl, .str1 
9088			;call strcmp 
9088			;jr c, .c2 
9088			;;this 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "Nc2" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			;.c2: 
9088			; 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "cc2" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			;	NEXTW 
9088			;.str1:   db "string1",0 
9088			;.str2:   db "string2",0 
9088			 
9088			; only care about direct match or not 
9088			; hl and de strings 
9088			; zero set if the same 
9088			 
9088			strcmp: 
9088 1a				ld a, (de) 
9089 be				cp (hl) 
908a 28 02			jr z, .ssame 
908c b7				or a 
908d c9				ret 
908e			 
908e			.ssame:  
908e fe 00			cp 0 
9090 c8				ret z 
9091			 
9091 23				inc hl 
9092 13				inc de 
9093 18 f3			jr strcmp 
9095				 
9095				 
9095			 
9095			;Copyright (c) 2014, Luke Maurits 
9095			;All rights reserved. 
9095			; 
9095			;Redistribution and use in source and binary forms, with or without 
9095			;modification, are permitted provided that the following conditions are met: 
9095			; 
9095			;* Redistributions of source code must retain the above copyright notice, this 
9095			;  list of conditions and the following disclaimer. 
9095			; 
9095			;* Redistributions in binary form must reproduce the above copyright notice, 
9095			;  this list of conditions and the following disclaimer in the documentation 
9095			;  and/or other materials provided with the distribution. 
9095			; 
9095			;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
9095			;AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
9095			;IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
9095			;DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE 
9095			;FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
9095			;DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
9095			;SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
9095			;CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
9095			;OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
9095			;OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
9095			 
9095			; https://github.com/lmaurits/lm512/blob/master/string.z80 
9095			 
9095			StrictStrCmp: 
9095				; Load next chars of each string 
9095 1a				ld a, (de) 
9096 47				ld b, a 
9097 7e				ld a, (hl) 
9098				; Compare 
9098 b8				cp b 
9099				; Return non-zero if chars don't match 
9099 c0				ret nz 
909a				; Check for end of both strings 
909a fe 00			cp "\0" 
909c				; Return if strings have ended 
909c c8				ret z 
909d				; Otherwise, advance to next chars 
909d 23				inc hl 
909e 13				inc de 
909f 18 f4			jr StrictStrCmp 
90a1			 
90a1			;end 
90a1			; eof 
90a1			 
90a1			 
90a1			 
90a1			 
90a1			 
90a1			 
# End of file firmware_strings.asm
90a1			include "firmware_memory.asm"   ; malloc and free  
90a1			 
90a1			if DEBUG_FORTH_MALLOC_HIGH 
90a1			.mallocsize: db "Wants malloc >256",0 
90a1			.mallocasize: db "MALLOC gives >256",0 
90a1			.malloczero: db "MALLOC gives zero",0 
90a1			 
90a1			malloc_guard_zerolen: 
90a1				push hl 
90a1				push de 
90a1				push af 
90a1			 
90a1				ld de, 0 
90a1			        call cmp16 
90a1				jr nz, .lowalloz 
90a1			 
90a1				push hl 
90a1				push de 
90a1					ld hl, display_fb0 
90a1					ld (display_fb_active), hl 
90a1				call clear_display 
90a1				ld a, 0 
90a1				ld de, .malloczero 
90a1				call str_at_display 
90a1				call update_display 
90a1				call delay1s 
90a1				call delay1s 
90a1				call bp_on 
90a1			;	ld a, 0 
90a1			;	ld (os_view_disable), a 
90a1			 
90a1				pop de 
90a1				pop hl 
90a1			 
90a1				 
90a1			 
90a1				CALLMONITOR 
90a1			.lowalloz: 
90a1			 
90a1			 
90a1				pop af 
90a1				pop de 
90a1				pop hl 
90a1			ret 
90a1			 
90a1			malloc_guard_entry: 
90a1				push hl 
90a1				push de 
90a1				push af 
90a1			 
90a1			 	or a      ;clear carry flag 
90a1				push hl 
90a1				ld de, 255 
90a1				sbc hl, de 
90a1				jr c, .lowalloc 
90a1			 
90a1				push de 
90a1					ld hl, display_fb0 
90a1					ld (display_fb_active), hl 
90a1				call clear_display 
90a1				ld a, 0 
90a1				ld de, .mallocsize 
90a1				call str_at_display 
90a1				call update_display 
90a1				call delay1s 
90a1				call delay1s 
90a1			;	ld a, 0 
90a1			;	ld (os_view_disable), a 
90a1				call bp_on 
90a1			 
90a1				pop de 
90a1				pop hl 
90a1			 
90a1				 
90a1			 
90a1				CALLMONITOR 
90a1				jr .lowdone 
90a1			.lowalloc: 
90a1			 
90a1			 
90a1				pop hl 
90a1			.lowdone:	pop af 
90a1				pop de 
90a1				pop hl 
90a1			ret 
90a1			 
90a1			malloc_guard_exit: 
90a1				push hl 
90a1				push de 
90a1				push af 
90a1			 
90a1			 	or a      ;clear carry flag 
90a1				push hl 
90a1				ld de, 255 
90a1				sbc hl, de 
90a1				jr c, .lowallocx 
90a1			 
90a1				push de 
90a1					ld hl, display_fb0 
90a1					ld (display_fb_active), hl 
90a1				call clear_display 
90a1				ld a, 0 
90a1				ld de, .mallocasize 
90a1				call str_at_display 
90a1				call update_display 
90a1				call delay1s 
90a1				call delay1s 
90a1			;	ld a, 0 
90a1			;	ld (os_view_disable), a 
90a1				call bp_on 
90a1				pop de 
90a1				pop hl 
90a1			 
90a1				CALLMONITOR 
90a1				jr .lowdonex 
90a1			.lowallocx: 
90a1			 
90a1				pop hl 
90a1			.lowdonex:	pop af 
90a1				pop de 
90a1				pop hl 
90a1			ret 
90a1			endif 
90a1			 
90a1			if MALLOC_2 
90a1			; Z80 Malloc and Free Functions 
90a1			 
90a1			; Malloc Function: 
90a1			; Input: 
90a1			;   HL: Size of block to allocate 
90a1			; Output: 
90a1			;   HL: Pointer to allocated memory block (NULL if allocation fails) 
90a1			 
90a1			malloc: 
90a1				 
90a1			if DEBUG_FORTH_MALLOC_HIGH 
90a1			call malloc_guard_entry 
90a1			endif 
90a1			 
90a1			 
90a1			 
90a1			 
90a1					if DEBUG_FORTH_MALLOC 
90a1						DMARK "mal" 
90a1						CALLMONITOR 
90a1					endif 
90a1			    push af            ; Save AF register 
90a1			    ld a, l            ; Load low byte of size into A 
90a1			    or h               ; Check if size is zero 
90a1			    jp z, malloc_exit  ; If size is zero, exit with NULL pointer 
90a1			 
90a1			    ; Allocate memory 
90a1			    ld hl, (heap_start) ; Load start of heap into HL 
90a1					if DEBUG_FORTH_MALLOC 
90a1						DMARK "ma1" 
90a1						CALLMONITOR 
90a1					endif 
90a1			    call malloc_internal ; Call internal malloc function 
90a1			    pop af             ; Restore AF register 
90a1			if DEBUG_FORTH_MALLOC_HIGH 
90a1			call malloc_guard_exit 
90a1			call malloc_guard_zerolen 
90a1			endif 
90a1			    ret                ; Return 
90a1			 
90a1			; Free Function: 
90a1			; Input: 
90a1			;   HL: Pointer to memory block to free 
90a1			; Output: 
90a1			;   None 
90a1			 
90a1			free: 
90a1			    push af            ; Save AF register 
90a1			    ld a, l            ; Load low byte of pointer into A 
90a1			    or h               ; Check if pointer is NULL 
90a1			    jp z, free_exit    ; If pointer is NULL, exit 
90a1			 
90a1			    ; Free memory 
90a1			    ld hl, (heap_start) ; Load start of heap into HL 
90a1			    call free_internal  ; Call internal free function 
90a1			    pop af             ; Restore AF register 
90a1			    ret                ; Return 
90a1			 
90a1			; Internal Malloc Function: 
90a1			; Input: 
90a1			;   HL: Size of block to allocate 
90a1			; Output: 
90a1			;   HL: Pointer to allocated memory block (NULL if allocation fails) 
90a1			 
90a1			malloc_internal: 
90a1			    ld bc, 2           ; Number of bytes to allocate for management overhead 
90a1			    add hl, bc         ; Add management overhead to requested size 
90a1			    ex de, hl          ; Save total size in DE, and keep it in HL 
90a1					if DEBUG_FORTH_MALLOC 
90a1						DMARK "ma2" 
90a1						CALLMONITOR 
90a1					endif 
90a1			 
90a1			    ; Search for free memory block 
90a1			    ld de, (heap_end)  ; Load end of heap into DE 
90a1			    ld bc, 0           ; Initialize counter 
90a1			 
90a1					if DEBUG_FORTH_MALLOC 
90a1						DMARK "ma2" 
90a1						CALLMONITOR 
90a1					endif 
90a1			malloc_search_loop: 
90a1			    ; Check if current block is free 
90a1			    ld a, (hl)         ; Load current block's status (free or used) 
90a1			    cp 0               ; Compare with zero (free) 
90a1			    jr nz, malloc_skip_block_check  ; If not free, skip to the next block 
90a1			 
90a1			    ; Check if current block is large enough 
90a1			    ld a, (hl+1)       ; Load high byte of block size 
90a1			    cp l               ; Compare with low byte of requested size 
90a1			    jr nz, malloc_skip_block_check  ; If not large enough, skip to the next block 
90a1			 
90a1			    ld a, (hl+2)       ; Load low byte of block size 
90a1			    cp h               ; Compare with high byte of requested size 
90a1			    jr c, malloc_skip_block_check   ; If not large enough, skip to the next block 
90a1			 
90a1			    ; Mark block as used 
90a1			    ld (hl), 0xFF      ; Set status byte to indicate used block 
90a1			 
90a1			    ; Calculate remaining space in block 
90a1			    ld bc, 0           ; Clear BC 
90a1			    add hl, bc         ; Increment HL to point to start of data block 
90a1			    add hl, de         ; HL = HL + DE (total size) 
90a1			    ld bc, 1           ; Number of bytes to allocate for management overhead 
90a1			    add hl, bc         ; Add management overhead to start of data block 
90a1			 
90a1			    ; Save pointer to allocated block in HL 
90a1			if DEBUG_FORTH_MALLOC_HIGH 
90a1						DMARK "ma5" 
90a1			call malloc_guard_exit 
90a1			call malloc_guard_zerolen 
90a1			endif 
90a1			    ret 
90a1			 
90a1			malloc_skip_block_check: 
90a1			    ; Move to the next block 
90a1			    ld bc, 3           ; Size of management overhead 
90a1			    add hl, bc         ; Move to the next block 
90a1			    inc de             ; Increment counter 
90a1			 
90a1			    ; Check if we have reached the end of heap 
90a1			    ld a, e            ; Load low byte of heap end address 
90a1			    cp (hl)            ; Compare with low byte of current address 
90a1			    jr nz, malloc_search_loop  ; If not equal, continue searching 
90a1			    ld a, d            ; Load high byte of heap end address 
90a1			    cp 0               ; Check if it's zero (end of memory) 
90a1			    jr nz, malloc_search_loop  ; If not zero, continue searching 
90a1			 
90a1			    ; If we reached here, allocation failed 
90a1			    xor a              ; Set result to NULL 
90a1			if DEBUG_FORTH_MALLOC_HIGH 
90a1						DMARK "ma6" 
90a1			call malloc_guard_exit 
90a1			call malloc_guard_zerolen 
90a1			endif 
90a1			    ret 
90a1			malloc_exit: 
90a1			if DEBUG_FORTH_MALLOC_HIGH 
90a1						DMARK "ma7" 
90a1			call malloc_guard_exit 
90a1			call malloc_guard_zerolen 
90a1			endif 
90a1			    ret 
90a1			 
90a1			; Internal Free Function: 
90a1			; Input: 
90a1			;   HL: Pointer to memory block to free 
90a1			; Output: 
90a1			;   None 
90a1			 
90a1			free_internal: 
90a1			    ld de, (heap_start) ; Load start of heap into DE 
90a1			    ld bc, 0            ; Initialize counter 
90a1			 
90a1			free_search_loop: 
90a1			    ; Check if current block contains the pointer 
90a1			    ld a, l             ; Load low byte of pointer 
90a1			    cp (hl+1)           ; Compare with high byte of current block's address 
90a1			    jr nz, free_skip_block_check  ; If not equal, skip to the next block 
90a1			    ld a, h             ; Load high byte of pointer 
90a1			    cp (hl+2)           ; Compare with low byte of current block's address 
90a1			    jr nz, free_skip_block_check  ; If not equal, skip to the next block 
90a1			 
90a1			    ; Mark block as free 
90a1			    ld (hl), 0          ; Set status byte to indicate free block 
90a1			    ret                 ; Return 
90a1			 
90a1			free_skip_block_check: 
90a1			    ; Move to the next block 
90a1			    ld bc, 3            ; Size of management overhead 
90a1			    add hl, bc          ; Move to the next block 
90a1			    inc de              ; Increment counter 
90a1			 
90a1			    ; Check if we have reached the end of heap 
90a1			    ld a, e             ; Load low byte of heap end address 
90a1			    cp (hl)             ; Compare with low byte of current address 
90a1			    jr nz, free_search_loop  ; If not equal, continue searching 
90a1			    ld a, d             ; Load high byte of heap end address 
90a1			    cp 0                ; Check if it's zero (end of memory) 
90a1			    jr nz, free_search_loop  ; If not zero, continue searching 
90a1			 
90a1			    ; If we reached here, pointer is not found in heap 
90a1			    ret 
90a1			 
90a1			free_exit: 
90a1			    ret                 ; Return 
90a1			 
90a1			; Define heap start and end addresses 
90a1			;heap_start:    .dw 0xC000   ; Start of heap 
90a1			;heap_end:      .dw 0xE000   ; End of heap 
90a1			 
90a1			endif 
90a1			 
90a1			 
90a1			if MALLOC_1 
90a1			 
90a1			 
90a1			 
90a1			; from https://gist.github.com/tomstorey/947a8b084bad69391a4b2a1c5b6d69ca 
90a1			 
90a1			;moved to firmware.asm 
90a1			;heap_start        .equ  0x9000      ; Starting address of heap 
90a1			;heap_size         .equ  0x0100      ; Number of bytes available in heap 
90a1			 
90a1			;      .org 0 
90a1			;      jp    main 
90a1			 
90a1			 
90a1			;      .org  0x100 
90a1			;main: 
90a1			;      ld    HL, 0x8100 
90a1			;      ld    SP, HL 
90a1			; 
90a1			;      call  heap_init 
90a1			; 
90a1			;      ; Make some allocations 
90a1			;      ld    HL, 12 
90a1			;      call  malloc            ; Allocates 0x9004 
90a1			; 
90a1			;      ld    HL, 12 
90a1			;      call  malloc            ; Allocates 0x9014 
90a1			; 
90a1			;      ld    HL, 12 
90a1			;      call  malloc            ; Allocates 0x9024 
90a1			; 
90a1			;      ; Free some allocations 
90a1			;      ld    HL, 0x9014 
90a1			;      call  free 
90a1			; 
90a1			;      ld    HL, 0x9004 
90a1			;      call  free 
90a1			; 
90a1			;      ld    HL, 0x9024 
90a1			;      call  free 
90a1			; 
90a1			; 
90a1			;      halt 
90a1			 
90a1			 
90a1			;------------------------------------------------------------------------------ 
90a1			;     heap_init                                                               : 
90a1			;                                                                             : 
90a1			; Description                                                                 : 
90a1			;     Initialise the heap and make it ready for malloc and free operations.   : 
90a1			;                                                                             : 
90a1			;     The heap is maintained as a linked list, starting with an initial       : 
90a1			;     "dummy block" of zero size which is mainly used to hold a pointer to    : 
90a1			;     the first free block in the heap. Each block then points to the next    : 
90a1			;     free block within the heap, and the free list ends at the first block   : 
90a1			;     with a null pointer to the next free block.                             : 
90a1			;                                                                             : 
90a1			; Parameters                                                                  : 
90a1			;     Inputs are compile-time only. Two defines which specify the starting    : 
90a1			;     address of the heap and its size are required, along with a memory      : 
90a1			;     allocation of 4 consecutive bytes which is used for a dummy block which : 
90a1			;     principally stores a pointer to the first free block in the heap.       : 
90a1			;                                                                             : 
90a1			; Returns                                                                     : 
90a1			;     Nothing                                                                 : 
90a1			;------------------------------------------------------------------------------ 
90a1			heap_init: 
90a1 e5			      push  HL 
90a2			 
90a2			      ; Initialise free list struct 
90a2 21 6b e0		      ld    HL, heap_start 
90a5 22 66 e0		      ld    (free_list), HL 
90a8 21 00 00		      ld    HL, 0 
90ab 22 68 e0		      ld    (free_list+2), HL 
90ae			 
90ae			      ; Insert first free block at bottom of heap, consumes entire heap 
90ae 21 92 e2		      ld    HL, heap_start+heap_size-4 
90b1 22 6b e0		      ld    (heap_start), HL        ; Next block (end of free list) 
90b4 21 27 02		      ld    HL, heap_size-4 
90b7 22 6d e0		      ld    (heap_start+2), HL      ; Block size 
90ba			 
90ba			      ; Insert end of free list block at top of heap - two null words will 
90ba			      ; terminate the free list 
90ba 21 00 00		      ld    HL, 0 
90bd 22 94 e2		      ld    (heap_start+heap_size-2), HL 
90c0 22 92 e2		      ld    (heap_start+heap_size-4), HL 
90c3			 
90c3 e1			      pop   HL 
90c4			 
90c4 c9			      ret 
90c5			 
90c5			 
90c5			;------------------------------------------------------------------------------ 
90c5			;     malloc                                                                  : 
90c5			;                                                                             : 
90c5			; Description                                                                 : 
90c5			;     Allocates the wanted space from the heap and returns the address of the : 
90c5			;     first useable byte of the allocation.                                   : 
90c5			;                                                                             : 
90c5			;     Allocations can happen in one of two ways:                              : 
90c5			;                                                                             : 
90c5			;     1. A free block may be found which is the exact size wanted. In this    : 
90c5			;        case the block is removed from the free list and retuedn to the      : 
90c5			;        caller.                                                              : 
90c5			;     2. A free block may be found which is larger than the size wanted. In   : 
90c5			;        this case, the larger block is split into two. The first portion of  : 
90c5			;        this block will become the requested space by the malloc call and    : 
90c5			;        is returned to the caller. The second portion becomes a new free     : 
90c5			;        block, and the free list is adjusted to maintain continuity via this : 
90c5			;        newly created block.                                                 : 
90c5			;                                                                             : 
90c5			;     malloc does not set any initial value in the allocated space, the       : 
90c5			;     caller is required to do this as required.                              : 
90c5			;                                                                             : 
90c5			;     This implementation of malloc uses the stack exclusively, and is        : 
90c5			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
90c5			;     advisable to disable interrupts before calling malloc, and recommended  : 
90c5			;     to avoid the use of malloc inside ISRs in general.                      : 
90c5			;                                                                             : 
90c5			;     NOTE: heap_init must be called before malloc and free can be used.      : 
90c5			;                                                                             : 
90c5			; Parameters                                                                  : 
90c5			;     HL  Number of bytes wanted                                              : 
90c5			;                                                                             : 
90c5			; Returns                                                                     : 
90c5			;     HL  Address of the first useable byte of the allocation                 : 
90c5			;                                                                             : 
90c5			; Flags                                                                       : 
90c5			;     Z   Set if the allocation did not succeed, clear otherwise              : 
90c5			;                                                                             : 
90c5			; Stack frame                                                                 : 
90c5			;       |             |                                                       : 
90c5			;       +-------------+                                                       : 
90c5			;       |     BC      |                                                       : 
90c5			;       +-------------+                                                       : 
90c5			;       |     DE      |                                                       : 
90c5			;       +-------------+                                                       : 
90c5			;       |     IX      |                                                       : 
90c5			;       +-------------+                                                       : 
90c5			;       |  prev_free  |                                                       : 
90c5			;   +4  +-------------+                                                       : 
90c5			;       |  this_free  |                                                       : 
90c5			;   +2  +-------------+                                                       : 
90c5			;       |  next_free  |                                                       : 
90c5			;   +0  +-------------+                                                       : 
90c5			;       |             |                                                       : 
90c5			;                                                                             : 
90c5			;------------------------------------------------------------------------------ 
90c5			 
90c5			 
90c5			;malloc: 
90c5			; 
90c5			;	SAVESP ON 1 
90c5			; 
90c5			;	call malloc_code 
90c5			; 
90c5			;	CHECKSP ON 1 
90c5			;	ret 
90c5			 
90c5			 
90c5			malloc: 
90c5 c5			      push  BC 
90c6 d5			      push  DE 
90c7 dd e5		      push  IX 
90c9			if DEBUG_FORTH_MALLOC_HIGH 
90c9			call malloc_guard_entry 
90c9			endif 
90c9			 
90c9					if DEBUG_FORTH_MALLOC 
90c9						DMARK "mal" 
90c9						CALLMONITOR 
90c9					endif 
90c9 7c			      ld    A, H                    ; Exit if no space requested 
90ca b5			      or    L 
90cb ca 8a 91		      jp    Z, malloc_early_exit 
90ce			 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			; 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			 
90ce			 
90ce			 
90ce			 
90ce					if DEBUG_FORTH_MALLOC 
90ce						DMARK "maA" 
90ce						CALLMONITOR 
90ce					endif 
90ce			      ; Set up stack frame 
90ce eb			      ex    DE, HL 
90cf 21 fa ff		      ld    HL, -6                  ; Reserve 6 bytes for stack frame 
90d2 39			      add   HL, SP 
90d3 f9			      ld    SP, HL 
90d4 dd 21 00 00	      ld    IX, 0                   ; Use IX as a frame pointer 
90d8 dd 39		      add   IX, SP 
90da			 
90da			      ; Setup initial state 
90da 21 04 00		      ld    HL, 4                   ; want must also include space used by block struct 
90dd 19			      add   HL, DE 
90de			 
90de 44			      ld    B, H                    ; Move want to BC 
90df 4d			      ld    C, L 
90e0			 
90e0 21 66 e0		      ld    HL, free_list           ; Store prev_free ptr to stack 
90e3 dd 75 04		      ld    (IX+4), L 
90e6 dd 74 05		      ld    (IX+5), H 
90e9			 
90e9 5e			      ld    E, (HL)                 ; Store this_free ptr to stack 
90ea 23			      inc   HL 
90eb 56			      ld    D, (HL) 
90ec dd 73 02		      ld    (IX+2), E 
90ef dd 72 03		      ld    (IX+3), D 
90f2 eb			      ex    DE, HL                  ; this_free ptr into HL 
90f3			 
90f3					if DEBUG_FORTH_MALLOC 
90f3						DMARK "maB" 
90f3						CALLMONITOR 
90f3					endif 
90f3			      ; Loop through free block list to find some space 
90f3			malloc_find_space: 
90f3 5e			      ld    E, (HL)                 ; Load next_free ptr into DE 
90f4 23			      inc   HL 
90f5 56			      ld    D, (HL) 
90f6			 
90f6 7a			      ld    A, D                    ; Check for null next_free ptr - end of free list 
90f7 b3			      or    E 
90f8 ca 84 91		      jp    Z, malloc_no_space 
90fb			 
90fb dd 73 00		      ld    (IX+0), E               ; Store next_free ptr to stack 
90fe dd 72 01		      ld    (IX+1), D 
9101			 
9101			      ; Does this block have enough space to make the allocation? 
9101 23			      inc   HL                      ; Load free block size into DE 
9102 5e			      ld    E, (HL) 
9103 23			      inc   HL 
9104 56			      ld    D, (HL) 
9105			 
9105 eb			      ex    DE, HL                  ; Check size of block against want 
9106 b7			      or    A                       ; Ensure carry flag clear 
9107 ed 42		      sbc   HL, BC 
9109 e5			      push  HL                      ; Store the result for later (new block size) 
910a			 
910a ca 59 91		      jp   Z, malloc_alloc_fit     ; Z means block size matches want - can allocate 
910d 30 1b		      jr    NC, malloc_alloc_split  ; NC means block is bigger than want - can allocate 
910f			 
910f			      ; this_free block is not big enough, setup ptrs to test next free block 
910f e1			      pop   HL                      ; Discard previous result 
9110			 
9110 dd 6e 02		      ld    L, (IX+2)               ; Move this_free ptr into prev_free 
9113 dd 66 03		      ld    H, (IX+3) 
9116 dd 75 04		      ld    (IX+4), L 
9119 dd 74 05		      ld    (IX+5), H 
911c			 
911c dd 6e 00		      ld    L, (IX+0)               ; Move next_free ptr into this_free 
911f dd 66 01		      ld    H, (IX+1) 
9122 dd 75 02		      ld    (IX+2), L 
9125 dd 74 03		      ld    (IX+3), H 
9128			 
9128					if DEBUG_FORTH_MALLOC 
9128						DMARK "MA>" 
9128						CALLMONITOR 
9128					endif 
9128 18 c9		      jr    malloc_find_space 
912a			 
912a			      ; split a bigger block into two - requested size and remaining size 
912a			malloc_alloc_split: 
912a					if DEBUG_FORTH_MALLOC 
912a						DMARK "MAs" 
912a						CALLMONITOR 
912a					endif 
912a eb			      ex    DE, HL                  ; Calculate address of new free block 
912b 2b			      dec   HL 
912c 2b			      dec   HL 
912d 2b			      dec   HL 
912e 09			      add   HL, BC 
912f			 
912f			      ; Create a new block and point it at next_free 
912f dd 5e 00		      ld    E, (IX+0)               ; Load next_free ptr into DE 
9132 dd 56 01		      ld    D, (IX+1) 
9135			 
9135 73			      ld    (HL), E                 ; Store next_free ptr into new block 
9136 23			      inc   HL 
9137 72			      ld    (HL), D 
9138			 
9138 d1			      pop   DE                      ; Store size of new block into new block 
9139 23			      inc   HL 
913a 73			      ld    (HL), E 
913b 23			      inc   HL 
913c 72			      ld    (HL), D 
913d			 
913d			      ; Update this_free ptr to point to new block 
913d 2b			      dec   HL 
913e 2b			      dec   HL 
913f 2b			      dec   HL 
9140			 
9140 dd 5e 02		      ld    E, (IX+2)               ; Take a copy of current this_free ptr 
9143 dd 56 03		      ld    D, (IX+3) 
9146			 
9146 dd 75 02		      ld    (IX+2), L               ; Store new block addr as this_free ptr 
9149 dd 74 03		      ld    (IX+3), H 
914c			 
914c			      ; Modify this_free block to be allocation 
914c eb			      ex    DE, HL 
914d af			      xor   A                       ; Null the next block ptr of allocated block 
914e 77			      ld    (HL), A 
914f 23			      inc   HL 
9150 77			      ld    (HL), A 
9151			 
9151 23			      inc   HL                      ; Store want size into allocated block 
9152 71			      ld    (HL), C 
9153 23			      inc   HL 
9154 70			      ld    (HL), B 
9155 23			      inc   HL 
9156 e5			      push  HL                      ; Address of allocation to return 
9157			 
9157 18 19		      jr    malloc_update_links 
9159			 
9159			malloc_alloc_fit: 
9159 e1			      pop   HL                      ; Dont need new block size, want is exact fit 
915a			 
915a					if DEBUG_FORTH_MALLOC 
915a						DMARK "MAf" 
915a						CALLMONITOR 
915a					endif 
915a			      ; Modify this_free block to be allocation 
915a eb			      ex    DE, HL 
915b 2b			      dec   HL 
915c 2b			      dec   HL 
915d 2b			      dec   HL 
915e			 
915e af			      xor   A                       ; Null the next block ptr of allocated block 
915f 77			      ld    (HL), A 
9160 23			      inc   HL 
9161 77			      ld    (HL), A 
9162			 
9162 23			      inc   HL                      ; Store address of allocation to return 
9163 23			      inc   HL 
9164 23			      inc   HL 
9165 e5			      push  HL 
9166			 
9166			      ; Copy next_free ptr to this_free, remove allocated block from free list 
9166 dd 6e 00		      ld    L, (IX+0)               ; next_free to HL 
9169 dd 66 01		      ld    H, (IX+1) 
916c			 
916c dd 75 02		      ld    (IX+2), L               ; HL to this_free 
916f dd 74 03		      ld    (IX+3), H 
9172			 
9172			 
9172			malloc_update_links: 
9172			      ; Update prev_free ptr to point to this_free 
9172 dd 6e 04		      ld    L, (IX+4)               ; prev_free ptr to HL 
9175 dd 66 05		      ld    H, (IX+5) 
9178			 
9178 dd 5e 02		      ld    E, (IX+2)               ; this_free ptr to DE 
917b dd 56 03		      ld    D, (IX+3) 
917e			 
917e 73			      ld    (HL), E                 ; this_free ptr into prev_free 
917f 23			      inc   HL 
9180 72			      ld    (HL), D 
9181			 
9181					if DEBUG_FORTH_MALLOC 
9181						DMARK "Mul" 
9181						CALLMONITOR 
9181					endif 
9181			      ; Clear the Z flag to indicate successful allocation 
9181 7a			      ld    A, D 
9182 b3			      or    E 
9183			 
9183 d1			      pop   DE                      ; Address of allocation 
9184					if DEBUG_FORTH_MALLOC 
9184						DMARK "MAu" 
9184						CALLMONITOR 
9184					endif 
9184			 
9184			malloc_no_space: 
9184 21 06 00		      ld    HL, 6                   ; Clean up stack frame 
9187 39			      add   HL, SP 
9188 f9			      ld    SP, HL 
9189			 
9189 eb			      ex    DE, HL                  ; Alloc addr into HL for return 
918a					if DEBUG_FORTH_MALLOC 
918a						DMARK "MAN" 
918a						CALLMONITOR 
918a					endif 
918a			 
918a			malloc_early_exit: 
918a					if DEBUG_FORTH_MALLOC 
918a						DMARK "MAx" 
918a						CALLMONITOR 
918a					endif 
918a dd e1		      pop   IX 
918c d1			      pop   DE 
918d c1			      pop   BC 
918e			 
918e			if DEBUG_FORTH_MALLOC_HIGH 
918e			call malloc_guard_exit 
918e			call malloc_guard_zerolen 
918e			endif 
918e c9			      ret 
918f			 
918f			 
918f			;------------------------------------------------------------------------------ 
918f			;     free                                                                    : 
918f			;                                                                             : 
918f			; Description                                                                 : 
918f			;     Return the space pointed to by HL to the heap. HL must be an address as : 
918f			;     returned by malloc, otherwise the behaviour is undefined.               : 
918f			;                                                                             : 
918f			;     Where possible, directly adjacent free blocks will be merged together   : 
918f			;     into larger blocks to help ensure that the heap does not become         : 
918f			;     excessively fragmented.                                                 : 
918f			;                                                                             : 
918f			;     free does not clear or set any other value into the freed space, and    : 
918f			;     therefore its contents may be visible through subsequent malloc's. The  : 
918f			;     caller should clear the freed space as required.                        : 
918f			;                                                                             : 
918f			;     This implementation of free uses the stack exclusively, and is          : 
918f			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
918f			;     advisable to disable interrupts before calling free, and recommended    : 
918f			;     to avoid the use of free inside ISRs in general.                        : 
918f			;                                                                             : 
918f			;     NOTE: heap_init must be called before malloc and free can be used.      : 
918f			;                                                                             : 
918f			; Parameters                                                                  : 
918f			;     HL  Pointer to address of first byte of allocation to be freed          : 
918f			;                                                                             : 
918f			; Returns                                                                     : 
918f			;     Nothing                                                                 : 
918f			;                                                                             : 
918f			; Stack frame                                                                 : 
918f			;       |             |                                                       : 
918f			;       +-------------+                                                       : 
918f			;       |     BC      |                                                       : 
918f			;       +-------------+                                                       : 
918f			;       |     DE      |                                                       : 
918f			;       +-------------+                                                       : 
918f			;       |     IX      |                                                       : 
918f			;       +-------------+                                                       : 
918f			;       |  prev_free  |                                                       : 
918f			;   +2  +-------------+                                                       : 
918f			;       |  next_free  |                                                       : 
918f			;   +0  +-------------+                                                       : 
918f			;       |             |                                                       : 
918f			;                                                                             : 
918f			;------------------------------------------------------------------------------ 
918f			free: 
918f c5			      push  BC 
9190 d5			      push  DE 
9191 dd e5		      push  IX 
9193			 
9193 7c			      ld    A, H                    ; Exit if ptr is null 
9194 b5			      or    L 
9195 ca 59 92		      jp    Z, free_early_exit 
9198			 
9198			      ; Set up stack frame 
9198 eb			      ex    DE, HL 
9199 21 fc ff		      ld    HL, -4                  ; Reserve 4 bytes for stack frame 
919c 39			      add   HL, SP 
919d f9			      ld    SP, HL 
919e dd 21 00 00	      ld    IX, 0                   ; Use IX as a frame pointer 
91a2 dd 39		      add   IX, SP 
91a4			 
91a4			      ; The address in HL points to the start of the useable allocated space, 
91a4			      ; but the block struct starts 4 bytes before this. Sub 4 to get the 
91a4			      ; address of the block itself. 
91a4 eb			      ex    DE, HL 
91a5 11 fc ff		      ld    DE, -4 
91a8 19			      add   HL, DE 
91a9			 
91a9			      ; An allocated block must have a null next block pointer in it 
91a9 7e			      ld    A, (HL) 
91aa 23			      inc   HL 
91ab b6			      or    (HL) 
91ac c2 54 92		      jp    NZ, free_done 
91af			 
91af 2b			      dec   HL 
91b0			 
91b0 44			      ld    B, H                    ; Copy HL to BC 
91b1 4d			      ld    C, L 
91b2			 
91b2			      ; Loop through the free list to find the first block with an address 
91b2			      ; higher than the block being freed 
91b2 21 66 e0		      ld    HL, free_list 
91b5			 
91b5			free_find_higher_block: 
91b5 5e			      ld    E, (HL)                 ; Load next ptr from free block 
91b6 23			      inc   HL 
91b7 56			      ld    D, (HL) 
91b8 2b			      dec   HL 
91b9			 
91b9 dd 73 00		      ld    (IX+0), E               ; Save ptr to next free block 
91bc dd 72 01		      ld    (IX+1), D 
91bf dd 75 02		      ld    (IX+2), L               ; Save ptr to prev free block 
91c2 dd 74 03		      ld    (IX+3), H 
91c5			 
91c5 78			      ld    A, B                    ; Check if DE is greater than BC 
91c6 ba			      cp    D                       ; Compare MSB first 
91c7 28 02		      jr    Z, $+4                  ; MSB the same, compare LSB 
91c9 30 04		      jr    NC, free_find_higher_block_skip 
91cb 79			      ld    A, C 
91cc bb			      cp    E                       ; Then compare LSB 
91cd 38 08		      jr    C, free_found_higher_block 
91cf			 
91cf			free_find_higher_block_skip: 
91cf 7a			      ld    A, D                    ; Reached the end of the free list? 
91d0 b3			      or    E 
91d1 ca 54 92		      jp    Z, free_done 
91d4			 
91d4 eb			      ex    DE, HL 
91d5			 
91d5 18 de		      jr    free_find_higher_block 
91d7			 
91d7			free_found_higher_block: 
91d7			      ; Insert freed block between prev and next free blocks 
91d7 71			      ld    (HL), C                 ; Point prev free block to freed block 
91d8 23			      inc   HL 
91d9 70			      ld    (HL), B 
91da			 
91da 60			      ld    H, B                    ; Point freed block at next free block 
91db 69			      ld    L, C 
91dc 73			      ld    (HL), E 
91dd 23			      inc   HL 
91de 72			      ld    (HL), D 
91df			 
91df			      ; Check if the freed block is adjacent to the next free block 
91df 23			      inc   HL                      ; Load size of freed block into HL 
91e0 5e			      ld    E, (HL) 
91e1 23			      inc   HL 
91e2 56			      ld    D, (HL) 
91e3 eb			      ex    DE, HL 
91e4			 
91e4 09			      add   HL, BC                  ; Add addr of freed block and its size 
91e5			 
91e5 dd 5e 00		      ld    E, (IX+0)               ; Load addr of next free block into DE 
91e8 dd 56 01		      ld    D, (IX+1) 
91eb			 
91eb b7			      or    A                       ; Clear the carry flag 
91ec ed 52		      sbc   HL, DE                  ; Subtract addrs to compare adjacency 
91ee 20 22		      jr    NZ, free_check_adjacent_to_prev 
91f0			 
91f0			      ; Freed block is adjacent to next, merge into one bigger block 
91f0 eb			      ex    DE, HL                  ; Load next ptr from next block into DE 
91f1 5e			      ld    E, (HL) 
91f2 23			      inc   HL 
91f3 56			      ld    D, (HL) 
91f4 e5			      push  HL                      ; Save ptr to next block for later 
91f5			 
91f5 60			      ld    H, B                    ; Store ptr from next block into freed block 
91f6 69			      ld    L, C 
91f7 73			      ld    (HL), E 
91f8 23			      inc   HL 
91f9 72			      ld    (HL), D 
91fa			 
91fa e1			      pop   HL                      ; Restore ptr to next block 
91fb 23			      inc   HL                      ; Load size of next block into DE 
91fc 5e			      ld    E, (HL) 
91fd 23			      inc   HL 
91fe 56			      ld    D, (HL) 
91ff d5			      push  DE                      ; Save next block size for later 
9200			 
9200 60			      ld    H, B                    ; Load size of freed block into HL 
9201 69			      ld    L, C 
9202 23			      inc   HL 
9203 23			      inc   HL 
9204 5e			      ld    E, (HL) 
9205 23			      inc   HL 
9206 56			      ld    D, (HL) 
9207 eb			      ex    DE, HL 
9208			 
9208 d1			      pop   DE                      ; Restore size of next block 
9209 19			      add   HL, DE                  ; Add sizes of both blocks 
920a eb			      ex    DE, HL 
920b			 
920b 60			      ld    H, B                    ; Store new bigger size into freed block 
920c 69			      ld    L, C 
920d 23			      inc   HL 
920e 23			      inc   HL 
920f 73			      ld    (HL), E 
9210 23			      inc   HL 
9211 72			      ld    (HL), D 
9212			 
9212			free_check_adjacent_to_prev: 
9212			      ; Check if the freed block is adjacent to the prev free block 
9212 dd 6e 02		      ld    L, (IX+2)               ; Prev free block ptr into HL 
9215 dd 66 03		      ld    H, (IX+3) 
9218			 
9218 23			      inc   HL                      ; Size of prev free block into DE 
9219 23			      inc   HL 
921a 5e			      ld    E, (HL) 
921b 23			      inc   HL 
921c 56			      ld    D, (HL) 
921d 2b			      dec   HL 
921e 2b			      dec   HL 
921f 2b			      dec   HL 
9220			 
9220 19			      add   HL, DE                  ; Add prev block addr and size 
9221			 
9221 b7			      or    A                       ; Clear the carry flag 
9222 ed 42		      sbc   HL, BC                  ; Subtract addrs to compare adjacency 
9224 20 2e		      jr    NZ, free_done 
9226			 
9226			      ; Freed block is adjacent to prev, merge into one bigger block 
9226 60			      ld    H, B                    ; Load next ptr from freed block into DE 
9227 69			      ld    L, C 
9228 5e			      ld    E, (HL) 
9229 23			      inc   HL 
922a 56			      ld    D, (HL) 
922b e5			      push  HL                      ; Save freed block ptr for later 
922c			 
922c dd 6e 02		      ld    L, (IX+2)               ; Store freed block ptr into prev block 
922f dd 66 03		      ld    H, (IX+3) 
9232 73			      ld    (HL), E 
9233 23			      inc   HL 
9234 72			      ld    (HL), D 
9235			 
9235 e1			      pop   HL                      ; Restore freed block ptr 
9236 23			      inc   HL                      ; Load size of freed block into DE 
9237 5e			      ld    E, (HL) 
9238 23			      inc   HL 
9239 56			      ld    D, (HL) 
923a d5			      push  DE                      ; Save freed block size for later 
923b			 
923b dd 6e 02		      ld    L, (IX+2)               ; Load size of prev block into DE 
923e dd 66 03		      ld    H, (IX+3) 
9241 23			      inc   HL 
9242 23			      inc   HL 
9243 5e			      ld    E, (HL) 
9244 23			      inc   HL 
9245 56			      ld    D, (HL) 
9246			 
9246 e1			      pop   HL                      ; Add sizes of both blocks 
9247 19			      add   HL, DE 
9248 eb			      ex    DE, HL 
9249			 
9249 dd 6e 02		      ld    L, (IX+2)               ; Store new bigger size into prev block 
924c dd 66 03		      ld    H, (IX+3) 
924f 23			      inc   HL 
9250 23			      inc   HL 
9251 73			      ld    (HL), E 
9252 23			      inc   HL 
9253 72			      ld    (HL), D 
9254			 
9254			free_done: 
9254 21 04 00		      ld    HL, 4                   ; Clean up stack frame 
9257 39			      add   HL, SP 
9258 f9			      ld    SP, HL 
9259			 
9259			free_early_exit: 
9259 dd e1		      pop   IX 
925b d1			      pop   DE 
925c c1			      pop   BC 
925d			 
925d c9			      ret 
925e			 
925e			; moved to firmware.asm 
925e			; 
925e			;free_list         .dw   0     ; Block struct for start of free list (MUST be 4 bytes) 
925e			;                  .dw   0 
925e			 
925e			 
925e			endif 
925e			 
925e			 
925e			if MALLOC_3 
925e			; https://gist.githubusercontent.com/tomstorey/947a8b084bad69391a4b2a1c5b6d69ca/raw/5a08fb30a480d98c0deb4a6afe2d48961cc8e9d9/z80_malloc.s 
925e			;heap_start        .equ  0x9000      ; Starting address of heap 
925e			;heap_size         .equ  0x0100      ; Number of bytes available in heap 
925e			; 
925e			 ;     .org 0 
925e			  ;    jp    main 
925e			; 
925e			; 
925e			 ;     .org  0x100 
925e			;main: 
925e			 ;     ld    HL, 0x8100 
925e			  ;    ld    SP, HL 
925e			; 
925e			;      call  heap_init 
925e			 
925e			      ; Make some allocations 
925e			;      ld    HL, 12 
925e			;      call  malloc            ; Allocates 0x9004 
925e			; 
925e			 ;     ld    HL, 12 
925e			;      call  malloc            ; Allocates 0x9014 
925e			 
925e			;      ld    HL, 12 
925e			;      call  malloc            ; Allocates 0x9024 
925e			 
925e			      ; Free some allocations 
925e			;      ld    HL, 0x9014 
925e			;      call  free 
925e			 
925e			;      ld    HL, 0x9004 
925e			;      call  free 
925e			; 
925e			;      ld    HL, 0x9024 
925e			;      call  free 
925e			 
925e			 
925e			 ;     halt 
925e			 
925e			 
925e			;------------------------------------------------------------------------------ 
925e			;     heap_init                                                               : 
925e			;                                                                             : 
925e			; Description                                                                 : 
925e			;     Initialise the heap and make it ready for malloc and free operations.   : 
925e			;                                                                             : 
925e			;     The heap is maintained as a linked list, starting with an initial       : 
925e			;     "dummy block" of zero size which is mainly used to hold a pointer to    : 
925e			;     the first free block in the heap. Each block then points to the next    : 
925e			;     free block within the heap, and the free list ends at the first block   : 
925e			;     with a null pointer to the next free block.                             : 
925e			;                                                                             : 
925e			; Parameters                                                                  : 
925e			;     Inputs are compile-time only. Two defines which specify the starting    : 
925e			;     address of the heap and its size are required, along with a memory      : 
925e			;     allocation of 4 consecutive bytes which is used for a dummy block which : 
925e			;     principally stores a pointer to the first free block in the heap.       : 
925e			;                                                                             : 
925e			; Returns                                                                     : 
925e			;     Nothing                                                                 : 
925e			;------------------------------------------------------------------------------ 
925e			heap_init: 
925e			      push  HL 
925e			 
925e			      ; Initialise free list struct 
925e			      ld    HL, heap_start 
925e			      ld    (free_list), HL 
925e			      ld    HL, 0 
925e			      ld    (free_list+2), HL 
925e			 
925e			      ; Insert first free block at bottom of heap, consumes entire heap 
925e			      ld    HL, heap_start+heap_size-4 
925e			      ld    (heap_start), HL        ; Next block (end of free list) 
925e			      ld    HL, heap_size-4 
925e			      ld    (heap_start+2), HL      ; Block size 
925e			 
925e			      ; Insert end of free list block at top of heap - two null words will 
925e			      ; terminate the free list 
925e			      ld    HL, 0 
925e			      ld    (heap_start+heap_size-2), HL 
925e			      ld    (heap_start+heap_size-4), HL 
925e			 
925e			      pop   HL 
925e			 
925e			      ret 
925e			 
925e			 
925e			;------------------------------------------------------------------------------ 
925e			;     malloc                                                                  : 
925e			;                                                                             : 
925e			; Description                                                                 : 
925e			;     Allocates the wanted space from the heap and returns the address of the : 
925e			;     first useable byte of the allocation.                                   : 
925e			;                                                                             : 
925e			;     Allocations can happen in one of two ways:                              : 
925e			;                                                                             : 
925e			;     1. A free block may be found which is the exact size wanted. In this    : 
925e			;        case the block is removed from the free list and retuedn to the      : 
925e			;        caller.                                                              : 
925e			;     2. A free block may be found which is larger than the size wanted. In   : 
925e			;        this case, the larger block is split into two. The first portion of  : 
925e			;        this block will become the requested space by the malloc call and    : 
925e			;        is returned to the caller. The second portion becomes a new free     : 
925e			;        block, and the free list is adjusted to maintain continuity via this : 
925e			;        newly created block.                                                 : 
925e			;                                                                             : 
925e			;     malloc does not set any initial value in the allocated space, the       : 
925e			;     caller is required to do this as required.                              : 
925e			;                                                                             : 
925e			;     This implementation of malloc uses the stack exclusively, and is        : 
925e			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
925e			;     advisable to disable interrupts before calling malloc, and recommended  : 
925e			;     to avoid the use of malloc inside ISRs in general.                      : 
925e			;                                                                             : 
925e			;     NOTE: heap_init must be called before malloc and free can be used.      : 
925e			;                                                                             : 
925e			; Parameters                                                                  : 
925e			;     HL  Number of bytes wanted                                              : 
925e			;                                                                             : 
925e			; Returns                                                                     : 
925e			;     HL  Address of the first useable byte of the allocation                 : 
925e			;                                                                             : 
925e			; Flags                                                                       : 
925e			;     Z   Set if the allocation did not succeed, clear otherwise              : 
925e			;                                                                             : 
925e			; Stack frame                                                                 : 
925e			;       |             |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |     BC      |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |     DE      |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |     IX      |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |  prev_free  |                                                       : 
925e			;   +4  +-------------+                                                       : 
925e			;       |  this_free  |                                                       : 
925e			;   +2  +-------------+                                                       : 
925e			;       |  next_free  |                                                       : 
925e			;   +0  +-------------+                                                       : 
925e			;       |             |                                                       : 
925e			;                                                                             : 
925e			;------------------------------------------------------------------------------ 
925e			malloc: 
925e			      push  BC 
925e			      push  DE 
925e			      push  IX 
925e			 
925e			      ld    A, H                    ; Exit if no space requested 
925e			      or    L 
925e			      jp    Z, malloc_early_exit 
925e			 
925e			      ; Set up stack frame 
925e			      ex    DE, HL 
925e			      ld    HL, -6                  ; Reserve 6 bytes for stack frame 
925e			      add   HL, SP 
925e			      ld    SP, HL 
925e			      ld    IX, 0                   ; Use IX as a frame pointer 
925e			      add   IX, SP 
925e			 
925e			      ; Setup initial state 
925e			      ld    HL, 4                   ; want must also include space used by block struct 
925e			      add   HL, DE 
925e			 
925e			      ld    B, H                    ; Move want to BC 
925e			      ld    C, L 
925e			 
925e			      ld    HL, free_list           ; Store prev_free ptr to stack 
925e			      ld    (IX+4), L 
925e			      ld    (IX+5), H 
925e			 
925e			      ld    E, (HL)                 ; Store this_free ptr to stack 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      ld    (IX+2), E 
925e			      ld    (IX+3), D 
925e			      ex    DE, HL                  ; this_free ptr into HL 
925e			 
925e			      ; Loop through free block list to find some space 
925e			malloc_find_space: 
925e			      ld    E, (HL)                 ; Load next_free ptr into DE 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			 
925e			      ld    A, D                    ; Check for null next_free ptr - end of free list 
925e			      or    E 
925e			      jp    Z, malloc_no_space 
925e			 
925e			      ld    (IX+0), E               ; Store next_free ptr to stack 
925e			      ld    (IX+1), D 
925e			 
925e			      ; Does this block have enough space to make the allocation? 
925e			      inc   HL                      ; Load free block size into DE 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			 
925e			      ex    DE, HL                  ; Check size of block against want 
925e			      or    A                       ; Ensure carry flag clear 
925e			      sbc   HL, BC 
925e			      push  HL                      ; Store the result for later (new block size) 
925e			 
925e			      jr    Z, malloc_alloc_fit     ; Z means block size matches want - can allocate 
925e			      jr    NC, malloc_alloc_split  ; NC means block is bigger than want - can allocate 
925e			 
925e			      ; this_free block is not big enough, setup ptrs to test next free block 
925e			      pop   HL                      ; Discard previous result 
925e			 
925e			      ld    L, (IX+2)               ; Move this_free ptr into prev_free 
925e			      ld    H, (IX+3) 
925e			      ld    (IX+4), L 
925e			      ld    (IX+5), H 
925e			 
925e			      ld    L, (IX+0)               ; Move next_free ptr into this_free 
925e			      ld    H, (IX+1) 
925e			      ld    (IX+2), L 
925e			      ld    (IX+3), H 
925e			 
925e			      jr    malloc_find_space 
925e			 
925e			      ; split a bigger block into two - requested size and remaining size 
925e			malloc_alloc_split: 
925e			      ex    DE, HL                  ; Calculate address of new free block 
925e			      dec   HL 
925e			      dec   HL 
925e			      dec   HL 
925e			      add   HL, BC 
925e			 
925e			      ; Create a new block and point it at next_free 
925e			      ld    E, (IX+0)               ; Load next_free ptr into DE 
925e			      ld    D, (IX+1) 
925e			 
925e			      ld    (HL), E                 ; Store next_free ptr into new block 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			      pop   DE                      ; Store size of new block into new block 
925e			      inc   HL 
925e			      ld    (HL), E 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			      ; Update this_free ptr to point to new block 
925e			      dec   HL 
925e			      dec   HL 
925e			      dec   HL 
925e			 
925e			      ld    E, (IX+2)               ; Take a copy of current this_free ptr 
925e			      ld    D, (IX+3) 
925e			 
925e			      ld    (IX+2), L               ; Store new block addr as this_free ptr 
925e			      ld    (IX+3), H 
925e			 
925e			      ; Modify this_free block to be allocation 
925e			      ex    DE, HL 
925e			      xor   A                       ; Null the next block ptr of allocated block 
925e			      ld    (HL), A 
925e			      inc   HL 
925e			      ld    (HL), A 
925e			 
925e			      inc   HL                      ; Store want size into allocated block 
925e			      ld    (HL), C 
925e			      inc   HL 
925e			      ld    (HL), B 
925e			      inc   HL 
925e			      push  HL                      ; Address of allocation to return 
925e			 
925e			      jr    malloc_update_links 
925e			 
925e			malloc_alloc_fit: 
925e			      pop   HL                      ; Dont need new block size, want is exact fit 
925e			 
925e			      ; Modify this_free block to be allocation 
925e			      ex    DE, HL 
925e			      dec   HL 
925e			      dec   HL 
925e			      dec   HL 
925e			 
925e			      xor   A                       ; Null the next block ptr of allocated block 
925e			      ld    (HL), A 
925e			      inc   HL 
925e			      ld    (HL), A 
925e			 
925e			      inc   HL                      ; Store address of allocation to return 
925e			      inc   HL 
925e			      inc   HL 
925e			      push  HL 
925e			 
925e			      ; Copy next_free ptr to this_free, remove allocated block from free list 
925e			      ld    L, (IX+0)               ; next_free to HL 
925e			      ld    H, (IX+1) 
925e			 
925e			      ld    (IX+2), L               ; HL to this_free 
925e			      ld    (IX+3), H 
925e			 
925e			 
925e			malloc_update_links: 
925e			      ; Update prev_free ptr to point to this_free 
925e			      ld    L, (IX+4)               ; prev_free ptr to HL 
925e			      ld    H, (IX+5) 
925e			 
925e			      ld    E, (IX+2)               ; this_free ptr to DE 
925e			      ld    D, (IX+3) 
925e			 
925e			      ld    (HL), E                 ; this_free ptr into prev_free 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			      ; Clear the Z flag to indicate successful allocation 
925e			      ld    A, D 
925e			      or    E 
925e			 
925e			      pop   DE                      ; Address of allocation 
925e			 
925e			malloc_no_space: 
925e			      ld    HL, 6                   ; Clean up stack frame 
925e			      add   HL, SP 
925e			      ld    SP, HL 
925e			 
925e			      ex    DE, HL                  ; Alloc addr into HL for return 
925e			 
925e			malloc_early_exit: 
925e			      pop   IX 
925e			      pop   DE 
925e			      pop   BC 
925e			 
925e			      ret 
925e			 
925e			 
925e			;------------------------------------------------------------------------------ 
925e			;     free                                                                    : 
925e			;                                                                             : 
925e			; Description                                                                 : 
925e			;     Return the space pointed to by HL to the heap. HL must be an address as : 
925e			;     returned by malloc, otherwise the behaviour is undefined.               : 
925e			;                                                                             : 
925e			;     Where possible, directly adjacent free blocks will be merged together   : 
925e			;     into larger blocks to help ensure that the heap does not become         : 
925e			;     excessively fragmented.                                                 : 
925e			;                                                                             : 
925e			;     free does not clear or set any other value into the freed space, and    : 
925e			;     therefore its contents may be visible through subsequent malloc's. The  : 
925e			;     caller should clear the freed space as required.                        : 
925e			;                                                                             : 
925e			;     This implementation of free uses the stack exclusively, and is          : 
925e			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
925e			;     advisable to disable interrupts before calling free, and recommended    : 
925e			;     to avoid the use of free inside ISRs in general.                        : 
925e			;                                                                             : 
925e			;     NOTE: heap_init must be called before malloc and free can be used.      : 
925e			;                                                                             : 
925e			; Parameters                                                                  : 
925e			;     HL  Pointer to address of first byte of allocation to be freed          : 
925e			;                                                                             : 
925e			; Returns                                                                     : 
925e			;     Nothing                                                                 : 
925e			;                                                                             : 
925e			; Stack frame                                                                 : 
925e			;       |             |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |     BC      |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |     DE      |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |     IX      |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |  prev_free  |                                                       : 
925e			;   +2  +-------------+                                                       : 
925e			;       |  next_free  |                                                       : 
925e			;   +0  +-------------+                                                       : 
925e			;       |             |                                                       : 
925e			;                                                                             : 
925e			;------------------------------------------------------------------------------ 
925e			free: 
925e			      push  BC 
925e			      push  DE 
925e			      push  IX 
925e			 
925e			      ld    A, H                    ; Exit if ptr is null 
925e			      or    L 
925e			      jp    Z, free_early_exit 
925e			 
925e			      ; Set up stack frame 
925e			      ex    DE, HL 
925e			      ld    HL, -4                  ; Reserve 4 bytes for stack frame 
925e			      add   HL, SP 
925e			      ld    SP, HL 
925e			      ld    IX, 0                   ; Use IX as a frame pointer 
925e			      add   IX, SP 
925e			 
925e			      ; The address in HL points to the start of the useable allocated space, 
925e			      ; but the block struct starts 4 bytes before this. Sub 4 to get the 
925e			      ; address of the block itself. 
925e			      ex    DE, HL 
925e			      ld    DE, -4 
925e			      add   HL, DE 
925e			 
925e			      ; An allocated block must have a null next block pointer in it 
925e			      ld    A, (HL) 
925e			      inc   HL 
925e			      or    (HL) 
925e			      jp    NZ, free_done 
925e			 
925e			      dec   HL 
925e			 
925e			      ld    B, H                    ; Copy HL to BC 
925e			      ld    C, L 
925e			 
925e			      ; Loop through the free list to find the first block with an address 
925e			      ; higher than the block being freed 
925e			      ld    HL, free_list 
925e			 
925e			free_find_higher_block: 
925e			      ld    E, (HL)                 ; Load next ptr from free block 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      dec   HL 
925e			 
925e			      ld    (IX+0), E               ; Save ptr to next free block 
925e			      ld    (IX+1), D 
925e			      ld    (IX+2), L               ; Save ptr to prev free block 
925e			      ld    (IX+3), H 
925e			 
925e			      ld    A, B                    ; Check if DE is greater than BC 
925e			      cp    D                       ; Compare MSB first 
925e			      jr    Z, $+4                  ; MSB the same, compare LSB 
925e			      jr    NC, free_find_higher_block_skip 
925e			      ld    A, C 
925e			      cp    E                       ; Then compare LSB 
925e			      jr    C, free_found_higher_block 
925e			 
925e			free_find_higher_block_skip: 
925e			      ld    A, D                    ; Reached the end of the free list? 
925e			      or    E 
925e			      jp    Z, free_done 
925e			 
925e			      ex    DE, HL 
925e			 
925e			      jr    free_find_higher_block 
925e			 
925e			free_found_higher_block: 
925e			      ; Insert freed block between prev and next free blocks 
925e			      ld    (HL), C                 ; Point prev free block to freed block 
925e			      inc   HL 
925e			      ld    (HL), B 
925e			 
925e			      ld    H, B                    ; Point freed block at next free block 
925e			      ld    L, C 
925e			      ld    (HL), E 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			      ; Check if the freed block is adjacent to the next free block 
925e			      inc   HL                      ; Load size of freed block into HL 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      ex    DE, HL 
925e			 
925e			      add   HL, BC                  ; Add addr of freed block and its size 
925e			 
925e			      ld    E, (IX+0)               ; Load addr of next free block into DE 
925e			      ld    D, (IX+1) 
925e			 
925e			      or    A                       ; Clear the carry flag 
925e			      sbc   HL, DE                  ; Subtract addrs to compare adjacency 
925e			      jr    NZ, free_check_adjacent_to_prev 
925e			 
925e			      ; Freed block is adjacent to next, merge into one bigger block 
925e			      ex    DE, HL                  ; Load next ptr from next block into DE 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      push  HL                      ; Save ptr to next block for later 
925e			 
925e			      ld    H, B                    ; Store ptr from next block into freed block 
925e			      ld    L, C 
925e			      ld    (HL), E 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			      pop   HL                      ; Restore ptr to next block 
925e			      inc   HL                      ; Load size of next block into DE 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      push  DE                      ; Save next block size for later 
925e			 
925e			      ld    H, B                    ; Load size of freed block into HL 
925e			      ld    L, C 
925e			      inc   HL 
925e			      inc   HL 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      ex    DE, HL 
925e			 
925e			      pop   DE                      ; Restore size of next block 
925e			      add   HL, DE                  ; Add sizes of both blocks 
925e			      ex    DE, HL 
925e			 
925e			      ld    H, B                    ; Store new bigger size into freed block 
925e			      ld    L, C 
925e			      inc   HL 
925e			      inc   HL 
925e			      ld    (HL), E 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			free_check_adjacent_to_prev: 
925e			      ; Check if the freed block is adjacent to the prev free block 
925e			      ld    L, (IX+2)               ; Prev free block ptr into HL 
925e			      ld    H, (IX+3) 
925e			 
925e			      inc   HL                      ; Size of prev free block into DE 
925e			      inc   HL 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      dec   HL 
925e			      dec   HL 
925e			      dec   HL 
925e			 
925e			      add   HL, DE                  ; Add prev block addr and size 
925e			 
925e			      or    A                       ; Clear the carry flag 
925e			      sbc   HL, BC                  ; Subtract addrs to compare adjacency 
925e			      jr    NZ, free_done 
925e			 
925e			      ; Freed block is adjacent to prev, merge into one bigger block 
925e			      ld    H, B                    ; Load next ptr from freed block into DE 
925e			      ld    L, C 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      push  HL                      ; Save freed block ptr for later 
925e			 
925e			      ld    L, (IX+2)               ; Store freed block ptr into prev block 
925e			      ld    H, (IX+3) 
925e			      ld    (HL), E 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			      pop   HL                      ; Restore freed block ptr 
925e			      inc   HL                      ; Load size of freed block into DE 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      push  DE                      ; Save freed block size for later 
925e			 
925e			      ld    L, (IX+2)               ; Load size of prev block into DE 
925e			      ld    H, (IX+3) 
925e			      inc   HL 
925e			      inc   HL 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			 
925e			      pop   HL                      ; Add sizes of both blocks 
925e			      add   HL, DE 
925e			      ex    DE, HL 
925e			 
925e			      ld    L, (IX+2)               ; Store new bigger size into prev block 
925e			      ld    H, (IX+3) 
925e			      inc   HL 
925e			      inc   HL 
925e			      ld    (HL), E 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			free_done: 
925e			      ld    HL, 4                   ; Clean up stack frame 
925e			      add   HL, SP 
925e			      ld    SP, HL 
925e			 
925e			free_early_exit: 
925e			      pop   IX 
925e			      pop   DE 
925e			      pop   BC 
925e			 
925e			      ret 
925e			 
925e			 
925e			;      .org 0x8000 
925e			; 
925e			;free_list         .dw   0     ; Block struct for start of free list (MUST be 4 bytes) 
925e			 ;                 .dw   0 
925e			 
925e			endif 
925e			 
925e			 
925e			if MALLOC_4 
925e			 
925e			; My memory allocation code. Very very simple.... 
925e			; allocate space under 250 chars 
925e			 
925e			heap_init: 
925e				; init start of heap as zero 
925e				;  
925e			 
925e				ld hl, heap_start 
925e				ld a, 0 
925e				ld (hl), a      ; empty block 
925e				inc hl 
925e				ld a, 0 
925e				ld (hl), a      ; length of block 
925e				; write end of list 
925e				inc hl 
925e				ld a,(hl) 
925e				inc hl 
925e				ld a,(hl) 
925e				 
925e			 
925e				; init some malloc vars 
925e			 
925e				ld hl, 0 
925e				ld (free_list), hl       ; store last malloc location 
925e			 
925e				ld hl, free_list+3      ; flag for 'free' being used and force a rescan for reuse of block  
925e				ld a, 0 
925e				ld (hl), a 
925e			 
925e			 
925e				ld hl, heap_start 
925e				;  
925e				  
925e				ret 
925e			 
925e			 
925e			;    free block marker 
925e			;    requested size  
925e			;    pointer to next block 
925e			;    .... 
925e			;    next block marker 
925e			 
925e			 
925e			; TODO add a flag that is reset on use of free. if flag is reset then start scan from start of heap otherwise use last location 
925e			; 
925e			 
925e			 
925e			malloc:  
925e				push de 
925e				push bc 
925e				push af 
925e			 
925e				; hl space required 
925e				 
925e				ld c, l    ; hold space   (TODO only a max of 255) 
925e			 
925e			;	inc c     ; TODO BUG need to fix memory leak on push str 
925e			;	inc c 
925e			;	inc c 
925e			;	inc c 
925e			;	inc c 
925e			;	inc c 
925e			;	inc c 
925e			 
925e			 
925e			 
925e				; start at heap if a free has been issued so we can reclaim it otherwise continue from last time 
925e			 
925e				ld a, (free_list+3) 
925e				cp 0 
925e				jr z, .contheap 
925e			 
925e				ld hl, (free_list)     ; get last alloc 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "mrs" 
925e						CALLMONITOR 
925e					endif 
925e				jr .startalloc 
925e			 
925e			.contheap: 
925e				ld hl, heap_start 
925e			 
925e			.startalloc: 
925e			 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "mym" 
925e						CALLMONITOR 
925e					endif 
925e			.findblock: 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "mmf" 
925e						CALLMONITOR 
925e					endif 
925e			 
925e				ld a,(hl)  
925e				; if byte is zero then clear to use 
925e			 
925e				cp 0 
925e				jr z, .foundemptyblock 
925e			 
925e				; if byte is not clear 
925e				;     then byte is offset to next block 
925e			 
925e				inc hl 
925e				ld a, (hl) ; get size 
925e			.nextblock:	inc hl 
925e					ld e, (hl) 
925e					inc hl 
925e					ld d, (hl) 
925e					ex de, hl 
925e			;	inc hl  ; move past the store space 
925e			;	inc hl  ; move past zero index  
925e			 
925e				; TODO detect no more space 
925e			 
925e				push hl 
925e				ld de, heap_end 
925e				call cmp16 
925e				pop hl 
925e				jr nc, .nospace 
925e			 
925e				jr .findblock 
925e			 
925e			.nospace: ld hl, 0 
925e				jp .exit 
925e			 
925e			 
925e			.foundemptyblock:	 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "mme" 
925e						CALLMONITOR 
925e					endif 
925e			 
925e			; TODO has block enough space if reusing??? 
925e			 
925e				;  
925e			 
925e			; see if this block has been previously used 
925e				inc hl 
925e				ld a, (hl) 
925e				dec hl 
925e				cp 0 
925e				jr z, .newblock 
925e			 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "meR" 
925e						CALLMONITOR 
925e					endif 
925e			 
925e			; no reusing previously allocated block 
925e			 
925e			; is it smaller than previously used? 
925e				 
925e				inc hl    ; move to size 
925e				ld a, c 
925e				sub (hl)        ; we want c < (hl) 
925e				dec hl    ; move back to marker 
925e			        jr z, .findblock 
925e			 
925e				; update with the new size which should be lower 
925e			 
925e			        ;inc  hl   ; negate next move. move back to size  
925e			 
925e			.newblock: 
925e				; need to be at marker here 
925e			 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "meN" 
925e						CALLMONITOR 
925e					endif 
925e			 
925e			 
925e				ld a, c 
925e			 
925e				ld (free_list+3), a	 ; flag resume from last malloc  
925e				ld (free_list), hl    ; save out last location 
925e			 
925e			 
925e				;inc a     ; space for length byte 
925e				ld (hl), a     ; save block in use marker 
925e			 
925e				inc hl   ; move to space marker 
925e				ld (hl), a    ; save new space 
925e			 
925e				inc hl   ; move to start of allocated area 
925e				 
925e			;	push hl     ; save where we are - 1  
925e			 
925e			;	inc hl  ; move past zero index  
925e				; skip space to set down new marker 
925e			 
925e				; provide some extra space for now 
925e			 
925e				inc a    ; actual is one fewer than bytes requested. correct if zero index is taken into account 
925e				inc a 
925e				inc a 
925e			 
925e				push hl   ; save where we are in the node block 
925e			 
925e				call addatohl 
925e			 
925e				; write linked list point 
925e			 
925e				pop de     ; get our node position 
925e				ex de, hl 
925e			 
925e				ld (hl), e 
925e				inc hl 
925e				ld (hl), d 
925e			 
925e				inc hl 
925e			 
925e				; now at start of allocated data so save pointer 
925e			 
925e				push hl 
925e			 
925e				; jump to position of next node and setup empty header in DE 
925e			 
925e				ex de, hl 
925e			 
925e			;	inc hl ; move past end of block 
925e			 
925e				ld a, 0 
925e				ld (hl), a   ; empty marker 
925e				inc hl 
925e				ld (hl), a   ; size 
925e				inc hl  
925e				ld (hl), a   ; ptr 
925e				inc hl 
925e				ld (hl), a   ; ptr 
925e			 
925e			 
925e				pop hl 
925e			 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "mmr" 
925e						CALLMONITOR 
925e					endif 
925e			 
925e			.exit: 
925e				pop af 
925e				pop bc 
925e				pop de  
925e				ret 
925e			 
925e			 
925e			 
925e			 
925e			free:  
925e				push hl 
925e				push af 
925e				; get address in hl 
925e			 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "fre" 
925e						CALLMONITOR 
925e					endif 
925e				; data is at hl - move to block count 
925e				dec hl 
925e				dec hl    ; get past pointer 
925e				dec hl 
925e			 
925e				ld a, (hl)    ; need this for a validation check 
925e			 
925e				dec hl    ; move to block marker 
925e			 
925e				; now check that the block count and block marker are the same  
925e			        ; this checks that we are on a malloc node and not random memory 
925e			        ; OK a faint chance this could be a problem but rare - famous last words! 
925e			 
925e				ld c, a 
925e				ld a, (hl)    
925e			 
925e				cp c 
925e				jr nz, .freeignore      ; not a valid malloc node in use so dont break anything 
925e			 
925e				; yes good chance we are on a malloc node 
925e			 
925e				ld a, 0      
925e				ld (hl), a   ; mark as free 
925e			 
925e				ld (free_list+3), a	 ; flag reuse of existing block on next malloc 
925e			 
925e			.freeignore:  
925e			 
925e				pop af 
925e				pop hl 
925e			 
925e				ret 
925e			 
925e			 
925e			 
925e			endif 
925e			 
925e			; eof 
# End of file firmware_memory.asm
925e			  
925e			; device C  
925e			; Now handled by SPI  
925e			;if SOUND_ENABLE  
925e			;	include "firmware_sound.asm"  
925e			;endif  
925e			  
925e			include "firmware_diags.asm"  
925e			; Hardware diags menu 
925e			 
925e			 
925e			config: 
925e			 
925e 3e 00			ld a, 0 
9260 21 84 92			ld hl, .configmn 
9263 cd ee 8a			call menu 
9266			 
9266 fe 00			cp 0 
9268 c8				ret z 
9269			 
9269			;	cp 1 
9269			;	call z, .savetostore 
9269			 
9269 fe 01			cp 1 
926b			if STARTUP_V1 
926b cc 9a 92			call z, .selautoload 
926e			endif 
926e			 
926e			if STARTUP_V2 
926e				call z, .enautoload 
926e			endif 
926e fe 02			cp 2 
9270 cc 90 92			call z, .disautoload 
9273			;	cp 3 
9273			;	call z, .selbank 
9273 fe 03			cp 3 
9275 cc b8 92			call z, .debug_tog 
9278 fe 04			cp 4 
927a cc 06 94			call z, .bpsgo 
927d fe 05			cp 5 
927f cc e1 92			call z, hardware_diags 
9282			if STARTUP_V2 
9282				cp 6 
9282				call z, create_startup 
9282			endif 
9282 18 da			jr config 
9284			 
9284			.configmn: 
9284			;	dw prom_c3 
9284 f4 95			dw prom_c2 
9286 09 96			dw prom_c2a 
9288			;	dw prom_c2b 
9288			;	dw prom_c4 
9288 28 96			dw prom_m4 
928a 43 96			dw prom_m4b 
928c 4b 96			dw prom_c1 
928e			if STARTUP_V2 
928e				dw prom_c9 
928e			endif 
928e 00 00			dw 0 
9290				 
9290			 
9290			if STARTUP_V2 
9290			.enautoload: 
9290				if STORAGE_SE 
9290				ld a, $fe      ; bit 0 clear 
9290				ld (spi_device), a 
9290			 
9290				call storage_get_block_0 
9290			 
9290				ld a, 1 
9290				ld (store_page+STORE_0_AUTOFILE), a 
9290			 
9290					ld hl, 0 
9290					ld de, store_page 
9290				call storage_write_block	 ; save update 
9290				else 
9290			 
9290				ld hl, prom_notav 
9290				ld de, prom_empty 
9290				call info_panel 
9290				endif 
9290			 
9290			 
9290				ret 
9290			endif 
9290			 
9290			.disautoload: 
9290				if STORAGE_SE 
9290				ld a, $fe      ; bit 0 clear 
9290				ld (spi_device), a 
9290			 
9290				call storage_get_block_0 
9290			 
9290				ld a, 0 
9290				ld (store_page+STORE_0_AUTOFILE), a 
9290			 
9290					ld hl, 0 
9290					ld de, store_page 
9290				call storage_write_block	 ; save update 
9290				else 
9290			 
9290 21 5a 96			ld hl, prom_notav 
9293 11 70 96			ld de, prom_empty 
9296 cd 4e 8a			call info_panel 
9299				endif 
9299			 
9299			 
9299 c9				ret 
929a			 
929a			if STARTUP_V1 
929a			 
929a			; Select auto start 
929a			 
929a			.selautoload: 
929a			 
929a				 
929a				if STORAGE_SE 
929a			 
929a					call config_dir 
929a				        ld hl, scratch 
929a					ld a, 0 
929a					call menu 
929a			 
929a					cp 0 
929a					ret z 
929a			 
929a					dec a 
929a			 
929a			 
929a					; locate menu option 
929a			 
929a					ld hl, scratch 
929a					call table_lookup 
929a			 
929a					if DEBUG_FORTH_WORDS 
929a						DMARK "ALl" 
929a						CALLMONITOR 
929a					endif 
929a					; with the pointer to the menu it, the byte following the zero term is the file id 
929a			 
929a					ld a, 0 
929a					ld bc, 50   ; max of bytes to look at 
929a					cpir  
929a			 
929a					if DEBUG_FORTH_WORDS 
929a						DMARK "ALb" 
929a						CALLMONITOR 
929a					endif 
929a					;inc hl 
929a			 
929a					ld a, (hl)   ; file id 
929a					 
929a				        ; save bank and file ids 
929a			 
929a					push af 
929a			 
929a			; TODO need to save to block 0 on bank 1	 
929a			 
929a					call storage_get_block_0 
929a			 
929a					if DEBUG_FORTH_WORDS 
929a						DMARK "AL0" 
929a						CALLMONITOR 
929a					endif 
929a					pop af 
929a			 
929a					ld (store_page+STORE_0_FILERUN),a 
929a					 
929a					; save bank id 
929a			 
929a					ld a,(spi_device) 
929a					ld (store_page+STORE_0_BANKRUN),a 
929a			 
929a					; enable auto run of store file 
929a			 
929a					ld a, 1 
929a					ld (store_page+STORE_0_AUTOFILE),a 
929a			 
929a					; save buffer 
929a			 
929a					ld hl, 0 
929a					ld de, store_page 
929a					if DEBUG_FORTH_WORDS 
929a						DMARK "ALw" 
929a						CALLMONITOR 
929a					endif 
929a				call storage_write_block	 ; save update 
929a			  
929a			 
929a			 
929a			 
929a					ld hl, scratch 
929a					call config_fdir 
929a			 
929a				else 
929a			 
929a 21 5a 96			ld hl, prom_notav 
929d 11 70 96			ld de, prom_empty 
92a0 cd 4e 8a			call info_panel 
92a3			 
92a3				endif 
92a3 c9				ret 
92a4			endif 
92a4			 
92a4			 
92a4			; Select storage bank 
92a4			 
92a4			.selbank: 
92a4			 
92a4			;	if STORAGE_SE 
92a4			;	else 
92a4			 
92a4 21 5a 96			ld hl, prom_notav 
92a7 11 70 96			ld de, prom_empty 
92aa cd 4e 8a			call info_panel 
92ad			;	endif 
92ad				 
92ad c9				ret 
92ae			 
92ae			if STORAGE_SE 
92ae			 
92ae			.config_ldir:   
92ae				; Load storage bank labels into menu array 
92ae			 
92ae				 
92ae			 
92ae			 
92ae				ret 
92ae			 
92ae			 
92ae			endif 
92ae			 
92ae			 
92ae			; Save user words to storage 
92ae			 
92ae			.savetostore: 
92ae			 
92ae			;	if STORAGE_SE 
92ae			; 
92ae			;		call config_dir 
92ae			;	        ld hl, scratch 
92ae			;		ld a, 0 
92ae			;		call menu 
92ae			;		 
92ae			;		ld hl, scratch 
92ae			;		call config_fdir 
92ae			; 
92ae			;	else 
92ae			 
92ae 21 5a 96			ld hl, prom_notav 
92b1 11 70 96			ld de, prom_empty 
92b4 cd 4e 8a			call info_panel 
92b7			 
92b7			;	endif 
92b7			 
92b7 c9				ret 
92b8			 
92b8			if STARTUP_V2 
92b8			 
92b8			create_startup: 
92b8			 
92b8				ld a, 0 
92b8				ld hl, .crstart 
92b8				call menu 
92b8			 
92b8				cp 0 
92b8				ret z 
92b8			 
92b8				cp 1 
92b8				call z, .genlsword 
92b8				cp 2 
92b8				call z, .genedword 
92b8			 
92b8				cp 3 
92b8				call z, .gendemword 
92b8			 
92b8				cp 4 
92b8				call z, .genutlword 
92b8				cp 5 
92b8				call z, .genspiword 
92b8				cp 6 
92b8				call z, .genkeyword 
92b8				cp 7 
92b8				call z, .gensoundword 
92b8				cp 8 
92b8				call z, .genhwword 
92b8				jr create_startup 
92b8			 
92b8			.genhwword: 
92b8				ld hl, crs_hw 
92b8				ld de, .hwworddef 
92b8				call .genfile 
92b8				ret 
92b8			.gensoundword: 
92b8				ld hl, crs_sound 
92b8				ld de, .soundworddef 
92b8				call .genfile 
92b8				ret 
92b8			.genlsword: 
92b8				ld hl, crs_s1 
92b8				ld de, .lsworddef 
92b8				call .genfile 
92b8				ret 
92b8			 
92b8			.genedword: 
92b8				ld de, .edworddef 
92b8				ld hl, crs_s2 
92b8				call .genfile 
92b8				ret 
92b8			 
92b8			.gendemword: 
92b8				ld de, .demoworddef 
92b8				ld hl, crs_s3 
92b8				call .genfile 
92b8				ret 
92b8			 
92b8			.genutlword: 
92b8				ld hl, crs_s4 
92b8				ld de, .utilwordef 
92b8				call .genfile 
92b8				ret 
92b8			.genspiword: 
92b8				ld hl, crs_s5 
92b8				ld de, .spiworddef 
92b8				call .genfile 
92b8				ret 
92b8			.genkeyword: 
92b8				ld hl, crs_s6 
92b8				ld de, .keyworddef 
92b8				call .genfile 
92b8				ret 
92b8			 
92b8			; hl - points to file name 
92b8			; de - points to strings to add to file 
92b8			 
92b8			.genfile: 
92b8				push hl 
92b8				push de 
92b8			 
92b8				call clear_display 
92b8				ld a, display_row_1 
92b8				ld de, .genfiletxt 
92b8				call str_at_display 
92b8				call update_display 
92b8			 
92b8				pop de 
92b8				pop hl 
92b8			 
92b8			 
92b8				push de 
92b8				call storage_create 
92b8				; id in hl 
92b8				pop de   ; table of strings to add 
92b8			 
92b8			.genloop: 
92b8			 
92b8				push hl ; save id for next time around 
92b8				push de ; save de for next time around 
92b8			 
92b8				ex de, hl 
92b8				call loadwordinhl 
92b8				ex de, hl 
92b8			 
92b8				; need hl to be the id 
92b8				; need de to be the string ptr 
92b8				 
92b8				call storage_append 
92b8			 
92b8				pop de 
92b8				pop hl 
92b8			 
92b8				inc de 
92b8				inc de 
92b8			 
92b8				ld a,(de) 
92b8				cp 0 
92b8				jr nz, .genloop 
92b8				inc de 
92b8				ld a, (de) 
92b8				dec de 
92b8				cp 0 
92b8				jr nz, .genloop	 
92b8			 
92b8				ret 
92b8			 
92b8			.genfiletxt:  db "Creating file...",0 
92b8			 
92b8			.hwworddef: 
92b8				dw test5 
92b8				dw test6 
92b8				dw test7 
92b8				dw test8 
92b8				dw test9 
92b8				dw test10 
92b8				dw 0 
92b8			 
92b8			.soundworddef: 
92b8				dw sound1 
92b8				dw sound2 
92b8				dw sound3 
92b8				dw sound4 
92b8				dw sound5 
92b8				dw sound6 
92b8				dw sound7 
92b8				dw sound8 
92b8				dw sound9 
92b8				dw 0 
92b8			 
92b8			.utilwordef: 
92b8				dw strncpy 
92b8				dw type 
92b8				dw tuck 
92b8				dw clrstack 
92b8				dw longread 
92b8				dw start1 
92b8				dw start2 
92b8			; duplicated 
92b8			;	dw start3b 
92b8			;	dw start3c 
92b8				dw list 
92b8				dw 0 
92b8			 
92b8			.lsworddef: 
92b8				dw start3b 
92b8				dw 0 
92b8			 
92b8			.edworddef: 
92b8				dw edit1 
92b8				dw edit2 
92b8				dw edit3 
92b8				dw 0 
92b8			 
92b8			.demoworddef: 
92b8				dw game1 
92b8				dw game1a 
92b8				dw game1b 
92b8				dw game1c 
92b8				dw game1d 
92b8				dw game1s 
92b8				dw game1t 
92b8				dw game1f 
92b8				dw game1z 
92b8				dw game1zz 
92b8				dw ssv2 
92b8				dw ssv3 
92b8				dw ssv4 
92b8				dw ssv5 
92b8				dw ssv1 
92b8				dw ssv1cpm	 
92b8			;	dw game2b 
92b8			;	dw game2bf 
92b8			;	dw game2mba 
92b8			;	dw game2mbas	 
92b8			;	dw game2mbht 
92b8			;	dw game2mbms 
92b8			;	dw game2mb 
92b8			;	dw game3w 
92b8			;	dw game3p 
92b8			;	dw game3sc 
92b8			;	dw game3vsi 
92b8			;	dw game3vs 
92b8				dw 0 
92b8			 
92b8			 
92b8			.spiworddef: 
92b8			 
92b8			    dw spi1 
92b8			    dw spi2 
92b8			    dw spi2b 
92b8			    dw spi3 
92b8			    dw spi4 
92b8			    dw spi5 
92b8			;    dw spi6 
92b8			;    dw spi7 
92b8			 
92b8			;    dw spi8 
92b8			;    dw spi9 
92b8			;    dw spi10 
92b8			    dw 0 
92b8			 
92b8			.keyworddef: 
92b8			 
92b8				dw keyup 
92b8				dw keydown 
92b8				dw keyleft 
92b8				dw keyright 
92b8				dw 	keyf1 
92b8				dw keyf2 
92b8				dw keyf3 
92b8				dw keyf4 
92b8				dw keyf5 
92b8				dw keyf6 
92b8				dw keyf7 
92b8				dw keyf8 
92b8				dw keyf9 
92b8				dw keyf10 
92b8				dw keyf11 
92b8				dw keyf12 
92b8				dw keytab 
92b8				dw keycr 
92b8				dw keyhome 
92b8				dw keyend 
92b8				dw keybs 
92b8				dw 0 
92b8			 
92b8			.crstart: 
92b8				dw crs_s1 
92b8				dw crs_s2 
92b8				dw crs_s3 
92b8				dw crs_s4 
92b8				dw crs_s5 
92b8				dw crs_s6 
92b8				dw crs_sound 
92b8				dw crs_hw 
92b8				dw 0 
92b8			 
92b8			endif 
92b8			 
92b8			 
92b8			if STORAGE_SE 
92b8			 
92b8			config_fdir: 
92b8				; using the scratch dir go through and release the memory allocated for each string 
92b8				 
92b8				ld hl, scratch 
92b8			.cfdir:	ld e,(hl) 
92b8				inc hl 
92b8				ld d,(hl) 
92b8				inc hl 
92b8			 
92b8				ex de, hl 
92b8				call ishlzero 
92b8				ret z     ; return on null pointer 
92b8				call free 
92b8				ex de, hl 
92b8				jr .cfdir 
92b8			 
92b8			 
92b8				ret 
92b8			 
92b8			 
92b8			config_dir: 
92b8			 
92b8				; for the config menus that need to build a directory of storage call this routine 
92b8				; it will construct a menu in scratch to pass to menu 
92b8			 
92b8				; open storage device 
92b8			 
92b8				; execute DIR to build a list of files and their ids into scratch in menu format 
92b8				; once the menu has finished then will need to call config_fdir to release the strings 
92b8				 
92b8				; c = number items 
92b8			 
92b8				 
92b8				call storage_get_block_0 
92b8			 
92b8				ld hl, store_page     ; get current id count 
92b8				ld b, (hl) 
92b8				ld c, 0    ; count of files   
92b8			 
92b8			 
92b8				ld hl, scratch 
92b8				ld (store_tmp2), hl    ; location to poke strings 
92b8			 
92b8				; check for empty drive 
92b8			 
92b8				ld a, 0 
92b8				cp b 
92b8				jp z, .dirdone 
92b8			 
92b8				 
92b8					if DEBUG_FORTH_WORDS 
92b8						DMARK "Cdc" 
92b8						CALLMONITOR 
92b8					endif 
92b8			 
92b8			 
92b8			.diritem:	 
92b8				push bc 
92b8				; for each of the current ids do a search for them and if found push to stack 
92b8			 
92b8					ld hl, STORE_BLOCK_PHY 
92b8					ld d, 0		 ; look for extent 0 of block id as this contains file name 
92b8					ld e,b 
92b8			 
92b8					call storage_findnextid 
92b8			 
92b8			 
92b8					; if found hl will be non zero 
92b8			 
92b8					call ishlzero 
92b8					jr z, .dirnotfound 
92b8			 
92b8					; increase count 
92b8			 
92b8					pop bc	 
92b8					inc c 
92b8					push bc 
92b8					 
92b8			 
92b8					; get file header and push the file name 
92b8			 
92b8					ld de, store_page 
92b8					call storage_read_block 
92b8			 
92b8					; push file id to stack 
92b8				 
92b8					ld a, (store_page) 
92b8					ld h, 0 
92b8					ld l, a 
92b8			 
92b8					;call forth_push_numhl 
92b8					; TODO store id 
92b8			 
92b8					push hl 
92b8			 
92b8					; push extent count to stack  
92b8				 
92b8					ld hl, store_page+3 
92b8			 
92b8					; get file name length 
92b8			 
92b8					call strlenz   
92b8			 
92b8					inc hl   ; cover zero term 
92b8					inc hl  ; stick the id at the end of the area 
92b8			 
92b8					push hl 
92b8					pop bc    ; move length to bc 
92b8			 
92b8					call malloc 
92b8			 
92b8					; TODO save malloc area to scratch 
92b8			 
92b8					ex de, hl 
92b8					ld hl, (store_tmp2) 
92b8					ld (hl), e 
92b8					inc hl 
92b8					ld (hl), d 
92b8					inc hl 
92b8					ld (store_tmp2), hl 
92b8			 
92b8					 
92b8			 
92b8					;pop hl   ; get source 
92b8			;		ex de, hl    ; swap aronund	 
92b8			 
92b8					ld hl, store_page+3 
92b8					if DEBUG_FORTH_WORDS 
92b8						DMARK "CFd" 
92b8						CALLMONITOR 
92b8					endif 
92b8					ldir 
92b8			 
92b8					; de is past string, move back one and store id 
92b8					 
92b8					dec de 
92b8			 
92b8					; store file id 
92b8			 
92b8					pop hl 
92b8					ex de,hl 
92b8					ld (hl), e 
92b8			 
92b8					if DEBUG_FORTH_WORDS 
92b8						DMARK "Cdi" 
92b8						CALLMONITOR 
92b8					endif 
92b8					 
92b8			.dirnotfound: 
92b8					pop bc     
92b8					djnz .diritem 
92b8				 
92b8			.dirdone:	 
92b8			 
92b8					ld a, 0 
92b8					ld hl, (store_tmp2) 
92b8					ld (hl), a 
92b8					inc hl 
92b8					ld (hl), a 
92b8					inc hl 
92b8					; push a count of the dir items found 
92b8			 
92b8			;		ld h, 0 
92b8			;		ld l, c 
92b8			 
92b8				ret 
92b8			 
92b8			endif 
92b8			 
92b8			 
92b8			; Settings 
92b8			; Run  
92b8			 
92b8			 
92b8			 
92b8			;hd_menu1:   db "Diags:  1: Key Matrix   5: Sound",0 
92b8			;;hd_menu2:   db "        2: Editor",0   
92b8			;hd_menu2:   db "        2: Editor       6: Menu",0   
92b8			;hd_menu3:   db "        3: Storage",0 
92b8			;hd_menu4:   db "0=quit  4: Debug",0 
92b8			;hd_don:     db "ON",0 
92b8			;hd_doff:     db "OFF",0 
92b8			; 
92b8			; 
92b8			; 
92b8			;hardware_diags_old:       
92b8			; 
92b8			;.diagmenu: 
92b8			;	call clear_display 
92b8			;	ld a, display_row_1 
92b8			;	ld de, hd_menu1 
92b8			;	call str_at_display 
92b8			; 
92b8			;	ld a, display_row_2 
92b8			;	ld de, hd_menu2 
92b8			;	call str_at_display 
92b8			; 
92b8			;	ld a, display_row_3 
92b8			;	ld de, hd_menu3 
92b8			;	call str_at_display 
92b8			; 
92b8			;	ld a,  display_row_4 
92b8			;	ld de, hd_menu4 
92b8			;	call str_at_display 
92b8			; 
92b8			;	; display debug state 
92b8			; 
92b8			;	ld de, hd_don 
92b8			;	ld a, (os_view_disable) 
92b8			;	cp 0 
92b8			;	jr z, .distog 
92b8			;	ld de, hd_doff 
92b8			;.distog: ld a, display_row_4+17 
92b8			;	call str_at_display 
92b8			; 
92b8			;	call update_display 
92b8			; 
92b8			;	call cin_wait 
92b8			; 
92b8			; 
92b8			; 
92b8			;	cp '4' 
92b8			;	jr nz, .diagn1 
92b8			; 
92b8			;	; debug toggle 
92b8			; 
92b8			;	ld a, (os_view_disable) 
92b8			;	ld b, '*' 
92b8			;	cp 0 
92b8			;	jr z, .debtog 
92b8			;	ld b, 0 
92b8			;.debtog:	 
92b8			;	ld a,b 
92b8			;	ld (os_view_disable),a 
92b8			; 
92b8			;.diagn1: cp '0' 
92b8			;	 ret z 
92b8			; 
92b8			;;	cp '1' 
92b8			;;       jp z, matrix	 
92b8			;;   TODO keyboard matrix test 
92b8			; 
92b8			;	cp '2' 
92b8			;	jp z, .diagedit 
92b8			; 
92b8			;;	cp '6' 
92b8			;;	jp z, .menutest 
92b8			;;if ENABLE_BASIC 
92b8			;;	cp '6' 
92b8			;;	jp z, basic 
92b8			;;endif 
92b8			 ; 
92b8			;	jp .diagmenu 
92b8			; 
92b8			; 
92b8			;	ret 
92b8			 
92b8			 
92b8			.debug_tog: 
92b8 21 02 93			ld hl, .menudebug 
92bb				 
92bb			;	ld a, (os_view_disable) 
92bb			;	cp '*' 
92bb 3a 6f ee			ld a,(debug_vector) 
92be fe c9			cp $C9   ; RET 
92c0 20 04			jr nz,.tdon  
92c2 3e 01			ld a, 1 
92c4 18 02			jr .tog1 
92c6 3e 00		.tdon: ld a, 0 
92c8			 
92c8			.tog1: 
92c8 cd ee 8a			call menu 
92cb fe 00			cp 0 
92cd c8				ret z 
92ce fe 01			cp 1    ; disable debug 
92d0 28 04			jr z, .dtog0 
92d2 3e 2a			ld a, '*' 
92d4 18 05			jr .dtogset 
92d6			.dtog0:  
92d6				;ld a, 0 
92d6 cd f4 93			call bp_on 
92d9 18 dd			jr .debug_tog 
92db			.dtogset:  
92db				; ld (os_view_disable), a 
92db cd 00 94			call bp_off 
92de c3 b8 92			jp .debug_tog 
92e1			 
92e1			 
92e1			hardware_diags:       
92e1			 
92e1			.diagm: 
92e1 21 f4 92			ld hl, .menuitems 
92e4 3e 00			ld a, 0 
92e6 cd ee 8a			call menu 
92e9			 
92e9 fe 00		         cp 0 
92eb c8				 ret z 
92ec			 
92ec fe 02			cp 2 
92ee ca 4d 93			jp z, .diagedit 
92f1			 
92f1			;	cp '6' 
92f1			;	jp z, .menutest 
92f1			;if ENABLE_BASIC 
92f1			;	cp '6' 
92f1			;	jp z, basic 
92f1			;endif 
92f1			  
92f1 c3 e1 92			jp .diagm 
92f4			 
92f4				 
92f4 08 93		.menuitems:   	dw .m1 
92f6 13 93				dw .m2 
92f8 1a 93				dw .m3 
92fa 22 93				dw .m5 
92fc 28 93				dw .m5a 
92fe 31 93				dw .m5b 
9300 00 00				dw 0 
9302			 
9302			.menudebug: 
9302 3a 93				dw .m6 
9304 43 93				dw .m7 
9306 00 00				dw 0 
9308			 
9308 .. 00		.m1:   db "Key Matrix",0 
9313 .. 00		.m2:   db "Editor",0 
931a .. 00		.m3:   db "Storage",0 
9322 .. 00		.m5:   db "Sound",0 
9328 .. 00		.m5a:  db "RAM Test",0 
9331 .. 00		.m5b:  db "LCD Test",0 
933a			 
933a .. 00		.m6:   db "Debug ON",0 
9343 .. 00		.m7:   db "Debug OFF",0 
934d			 
934d			; debug editor 
934d			 
934d			.diagedit: 
934d			 
934d 21 bb e2			ld hl, scratch 
9350			;	ld bc, 250 
9350			;	ldir 
9350				; TODO ldir is not working strcpy may not get all the terms on the input line???? 
9350 3e 00			ld a, 0 
9352 77				ld (hl), a 
9353 23				inc hl 
9354 77				ld (hl), a 
9355 23				inc hl 
9356 77				ld (hl), a 
9357			 
9357 cd bd 8a		        call clear_display 
935a cd e0 8a			call update_display 
935d				;ld a, 1 
935d				;ld (hardware_diag), a 
935d			.diloop: 
935d 3e 00			ld a, display_row_1 
935f 0e 00			ld c, 0 
9361 16 ff			ld d, 255    ; TODO fix input_str to actually take note of max string input length 
9363 1e 28			ld e, 40 
9365			 
9365 21 bb e2			ld hl, scratch	 
9368 cd 17 8d			call input_str 
936b			 
936b 3e 28			ld a, display_row_2 
936d 11 bb e2			ld de, scratch 
9370 cd d0 8a			call str_at_display 
9373 cd e0 8a			call update_display 
9376			 
9376 c3 5d 93			jp .diloop 
9379			 
9379			 
9379			; pass word in hl 
9379			; a has display location 
9379			display_word_at: 
9379 f5				push af 
937a e5				push hl 
937b 7c				ld a,h 
937c 21 c0 e5			ld hl, os_word_scratch 
937f cd f3 8e			call hexout 
9382 e1				pop hl 
9383 7d				ld a,l 
9384 21 c2 e5			ld hl, os_word_scratch+2 
9387 cd f3 8e			call hexout 
938a 21 c4 e5			ld hl, os_word_scratch+4 
938d 3e 00			ld a,0 
938f 77				ld (hl),a 
9390 11 c0 e5			ld de,os_word_scratch 
9393 f1				pop af 
9394 cd d0 8a				call str_at_display 
9397 c9				ret 
9398			 
9398			display_ptr_state: 
9398			 
9398				; to restore afterwards 
9398			 
9398 d5				push de 
9399 c5				push bc 
939a e5				push hl 
939b f5				push af 
939c			 
939c				; for use in here 
939c			 
939c			;	push bc 
939c			;	push de 
939c			;	push hl 
939c			;	push af 
939c			 
939c cd bd 8a			call clear_display 
939f			 
939f 11 77 95			ld de, .ptrstate 
93a2 3e 00			ld a, display_row_1 
93a4 cd d0 8a			call str_at_display 
93a7			 
93a7				; display debug step 
93a7			 
93a7			 
93a7 11 65 ee			ld de, debug_mark 
93aa 3e 26			ld a, display_row_1+display_cols-2 
93ac cd d0 8a			call str_at_display 
93af			 
93af				; display a 
93af 11 81 95			ld de, .ptrcliptr 
93b2 3e 28			ld a, display_row_2 
93b4 cd d0 8a			call str_at_display 
93b7			 
93b7 f1				pop af 
93b8 2a 3a ea			ld hl,(cli_ptr) 
93bb 3e 30			ld a, display_row_2+8 
93bd cd 79 93			call display_word_at 
93c0			 
93c0			 
93c0				; display hl 
93c0			 
93c0			 
93c0 11 89 95			ld de, .ptrclioptr 
93c3 3e 32			ld a, display_row_2+10 
93c5 cd d0 8a			call str_at_display 
93c8			; 
93c8			;	pop hl 
93c8 3e 35			ld a, display_row_2+13 
93ca 2a 38 ea			ld hl,(cli_origptr) 
93cd cd 79 93			call display_word_at 
93d0			; 
93d0			;	 
93d0			;	; display de 
93d0			 
93d0			;	ld de, .regstatede 
93d0			;	ld a, display_row_3 
93d0			;	call str_at_display 
93d0			 
93d0			;	pop de 
93d0			;	ld h,d 
93d0			;	ld l, e 
93d0			;	ld a, display_row_3+3 
93d0			;	call display_word_at 
93d0			 
93d0			 
93d0				; display bc 
93d0			 
93d0			;	ld de, .regstatebc 
93d0			;	ld a, display_row_3+10 
93d0			;	call str_at_display 
93d0			 
93d0			;	pop bc 
93d0			;	ld h,b 
93d0			;	ld l, c 
93d0			;	ld a, display_row_3+13 
93d0			;	call display_word_at 
93d0			 
93d0			 
93d0				; display dsp 
93d0			 
93d0			;	ld de, .regstatedsp 
93d0			;	ld a, display_row_4 
93d0			;	call str_at_display 
93d0			 
93d0				 
93d0			;	ld hl,(cli_data_sp) 
93d0			;	ld a, display_row_4+4 
93d0			;	call display_word_at 
93d0			 
93d0				; display rsp 
93d0			 
93d0 11 b8 95			ld de, .regstatersp 
93d3 3e 82			ld a, display_row_4+10 
93d5 cd d0 8a			call str_at_display 
93d8			 
93d8				 
93d8 2a ec e9			ld hl,(cli_ret_sp) 
93db 3e 86			ld a, display_row_4+14 
93dd cd 79 93			call display_word_at 
93e0			 
93e0 cd e0 8a			call update_display 
93e3			 
93e3 cd 00 8a			call delay1s 
93e6 cd 00 8a			call delay1s 
93e9 cd 00 8a			call delay1s 
93ec			 
93ec			 
93ec cd fd 99			call next_page_prompt 
93ef			 
93ef				; restore  
93ef			 
93ef f1				pop af 
93f0 e1				pop hl 
93f1 c1				pop bc 
93f2 d1				pop de 
93f3 c9				ret 
93f4			 
93f4			; Update the break point vector so that the user can hook a new routine 
93f4			 
93f4			bp_on: 
93f4 3e c3			ld a, $c3    ; JP 
93f6 32 6f ee			ld (debug_vector), a 
93f9 21 06 94			ld hl, break_point_state 
93fc 22 70 ee			ld (debug_vector+1), hl 
93ff c9				ret 
9400			 
9400			bp_off: 
9400 3e c9			ld a, $c9    ; RET 
9402 32 6f ee			ld (debug_vector), a 
9405 c9				ret 
9406			 
9406			 
9406			break_point_state: 
9406			;	push af 
9406			; 
9406			;	; see if disabled 
9406			; 
9406			;	ld a, (os_view_disable) 
9406			;	cp '*' 
9406			;	jr nz, .bpsgo 
9406			;	pop af 
9406			;	ret 
9406			 
9406			.bpsgo: 
9406			;	pop af 
9406 f5				push af 
9407 22 9d e2			ld (os_view_hl), hl 
940a ed 53 9b e2		ld (os_view_de), de 
940e ed 43 99 e2		ld (os_view_bc), bc 
9412 e5				push hl 
9413 6f				ld l, a 
9414 26 00			ld h, 0 
9416 22 9f e2			ld (os_view_af),hl 
9419			 
9419 21 ab ed				ld hl, display_fb0 
941c 22 c6 eb				ld (display_fb_active), hl 
941f e1				pop hl	 
9420			 
9420 3e 31			ld a, '1' 
9422 fe 2a		.bps1:  cp '*' 
9424 cc 00 94			call z, bp_off 
9427			;	jr nz, .bps1b 
9427			;	ld (os_view_disable),a 
9427 fe 31		.bps1b:  cp '1' 
9429 20 14			jr nz, .bps2 
942b			 
942b				; display reg 
942b			 
942b				 
942b			 
942b 3a 9f e2			ld a, (os_view_af) 
942e 2a 9d e2			ld hl, (os_view_hl) 
9431 ed 5b 9b e2		ld de, (os_view_de) 
9435 ed 4b 99 e2		ld bc, (os_view_bc) 
9439 cd d3 94			call display_reg_state 
943c c3 bf 94			jp .bpschk 
943f			 
943f fe 32		.bps2:  cp '2' 
9441 20 08			jr nz, .bps3 
9443				 
9443				; display hl 
9443 2a 9d e2			ld hl, (os_view_hl) 
9446 cd bd 95			call display_dump_at_hl 
9449			 
9449 18 74			jr .bpschk 
944b			 
944b fe 33		.bps3:  cp '3' 
944d 20 08			jr nz, .bps4 
944f			 
944f			        ; display de 
944f 2a 9b e2			ld hl, (os_view_de) 
9452 cd bd 95			call display_dump_at_hl 
9455			 
9455 18 68			jr .bpschk 
9457 fe 34		.bps4:  cp '4' 
9459 20 08			jr nz, .bps5 
945b			 
945b			        ; display bc 
945b 2a 99 e2			ld hl, (os_view_bc) 
945e cd bd 95			call display_dump_at_hl 
9461			 
9461 18 5c			jr .bpschk 
9463 fe 35		.bps5:  cp '5' 
9465 20 08		        jr nz, .bps7 
9467			 
9467				; display cur ptr 
9467 2a 3a ea			ld hl, (cli_ptr) 
946a cd bd 95			call display_dump_at_hl 
946d			 
946d 18 50			jr .bpschk 
946f fe 36		.bps7:  cp '6' 
9471 20 08			jr nz, .bps8b 
9473				 
9473				; display cur orig ptr 
9473 2a 38 ea			ld hl, (cli_origptr) 
9476 cd bd 95			call display_dump_at_hl 
9479 18 44			jr .bpschk 
947b fe 37		.bps8b:  cp '7' 
947d 20 08			jr nz, .bps9 
947f				 
947f				; display dsp 
947f 2a e8 e9			ld hl, (cli_data_sp) 
9482 cd bd 95			call display_dump_at_hl 
9485			 
9485 18 38			jr .bpschk 
9487 fe 39		.bps9:  cp '9' 
9489 20 05			jr nz, .bps8c 
948b				 
948b				; display SP 
948b			;	ld hl, sp 
948b cd bd 95			call display_dump_at_hl 
948e			 
948e 18 2f			jr .bpschk 
9490 fe 38		.bps8c:  cp '8' 
9492 20 08			jr nz, .bps8d 
9494				 
9494				; display rsp 
9494 2a ec e9			ld hl, (cli_ret_sp) 
9497 cd bd 95			call display_dump_at_hl 
949a			 
949a 18 23			jr .bpschk 
949c fe 23		.bps8d:  cp '#'     ; access monitor sub system 
949e 20 05			jr nz, .bps8 
94a0 cd b7 97			call monitor 
94a3			 
94a3 18 1a			jr .bpschk 
94a5 fe 30		.bps8:  cp '0' 
94a7 20 16			jr nz, .bpschk 
94a9			 
94a9 21 0a ed				ld hl, display_fb1 
94ac 22 c6 eb				ld (display_fb_active), hl 
94af cd e0 8a				call update_display 
94b2			 
94b2				;ld a, (os_view_af) 
94b2 2a 9d e2			ld hl, (os_view_hl) 
94b5 ed 5b 9b e2		ld de, (os_view_de) 
94b9 ed 4b 99 e2		ld bc, (os_view_bc) 
94bd f1				pop af 
94be c9				ret 
94bf			 
94bf			.bpschk:   
94bf cd 00 8a			call delay1s 
94c2 3e 9f		ld a,display_row_4 + display_cols - 1 
94c4 11 fb 99		        ld de, endprg 
94c7 cd d0 8a			call str_at_display 
94ca cd e0 8a			call update_display 
94cd cd 47 e0			call cin_wait 
94d0			 
94d0 c3 22 94			jp .bps1 
94d3			 
94d3			 
94d3			display_reg_state: 
94d3			 
94d3				; to restore afterwards 
94d3			 
94d3 d5				push de 
94d4 c5				push bc 
94d5 e5				push hl 
94d6 f5				push af 
94d7			 
94d7				; for use in here 
94d7			 
94d7 c5				push bc 
94d8 d5				push de 
94d9 e5				push hl 
94da f5				push af 
94db			 
94db cd bd 8a			call clear_display 
94de			 
94de 11 93 95			ld de, .regstate 
94e1 3e 00			ld a, display_row_1 
94e3 cd d0 8a			call str_at_display 
94e6			 
94e6				; display debug step 
94e6			 
94e6			 
94e6 11 65 ee			ld de, debug_mark 
94e9 3e 25			ld a, display_row_1+display_cols-3 
94eb cd d0 8a			call str_at_display 
94ee			 
94ee				; display a 
94ee 11 af 95			ld de, .regstatea 
94f1 3e 28			ld a, display_row_2 
94f3 cd d0 8a			call str_at_display 
94f6			 
94f6 e1				pop hl 
94f7			;	ld h,0 
94f7			;	ld l, a 
94f7 3e 2b			ld a, display_row_2+3 
94f9 cd 79 93			call display_word_at 
94fc			 
94fc			 
94fc				; display hl 
94fc			 
94fc			 
94fc 11 a3 95			ld de, .regstatehl 
94ff 3e 32			ld a, display_row_2+10 
9501 cd d0 8a			call str_at_display 
9504			 
9504 e1				pop hl 
9505 3e 35			ld a, display_row_2+13 
9507 cd 79 93			call display_word_at 
950a			 
950a				 
950a				; display de 
950a			 
950a 11 a7 95			ld de, .regstatede 
950d 3e 50			ld a, display_row_3 
950f cd d0 8a			call str_at_display 
9512			 
9512 e1				pop hl 
9513			;	ld h,d 
9513			;	ld l, e 
9513 3e 53			ld a, display_row_3+3 
9515 cd 79 93			call display_word_at 
9518			 
9518			 
9518				; display bc 
9518			 
9518 11 ab 95			ld de, .regstatebc 
951b 3e 5a			ld a, display_row_3+10 
951d cd d0 8a			call str_at_display 
9520			 
9520 e1				pop hl 
9521			;	ld h,b 
9521			;	ld l, c 
9521 3e 5d			ld a, display_row_3+13 
9523 cd 79 93			call display_word_at 
9526			 
9526			 
9526				; display dsp 
9526			 
9526 11 b3 95			ld de, .regstatedsp 
9529 3e 78			ld a, display_row_4 
952b cd d0 8a			call str_at_display 
952e			 
952e				 
952e 2a e8 e9			ld hl,(cli_data_sp) 
9531 3e 7c			ld a, display_row_4+4 
9533 cd 79 93			call display_word_at 
9536			 
9536				; display rsp 
9536			 
9536 11 b8 95			ld de, .regstatersp 
9539 3e 82			ld a, display_row_4+10 
953b cd d0 8a			call str_at_display 
953e			 
953e				 
953e 2a ec e9			ld hl,(cli_ret_sp) 
9541 3e 86			ld a, display_row_4+14 
9543 cd 79 93			call display_word_at 
9546			 
9546 cd e0 8a			call update_display 
9549			 
9549			;	call delay1s 
9549			;	call delay1s 
9549			;	call delay1s 
9549			 
9549			 
9549			;	call next_page_prompt 
9549			 
9549				; restore  
9549			 
9549 f1				pop af 
954a e1				pop hl 
954b c1				pop bc 
954c d1				pop de 
954d c9				ret 
954e			 
954e .. 00		.wordincurptr:  db "Word in cur_ptr (5)",0 
9562 .. 00		.wordincuroptr:  db "Word in cur_optr (6)",0 
9577 .. 00		.ptrstate:	db "Ptr State",0 
9581 .. 00		.ptrcliptr:     db "cli_ptr",0 
9589 .. 00		.ptrclioptr:     db "cli_o_ptr",0 
9593 .. 00		.regstate:	db "Reg State (1/0)",0 
95a3 .. 00		.regstatehl:	db "HL:",0 
95a7 .. 00		.regstatede:	db "DE:",0 
95ab .. 00		.regstatebc:	db "BC:",0 
95af .. 00		.regstatea:	db "A :",0 
95b3 .. 00		.regstatedsp:	db "DSP:",0 
95b8 .. 00		.regstatersp:	db "RSP:",0 
95bd			 
95bd			display_dump_at_hl: 
95bd e5				push hl 
95be d5				push de 
95bf c5				push bc 
95c0 f5				push af 
95c1			 
95c1 22 de e5			ld (os_cur_ptr),hl	 
95c4 cd bd 8a			call clear_display 
95c7 cd 05 99			call dumpcont 
95ca			;	call delay1s 
95ca			;	call next_page_prompt 
95ca			 
95ca			 
95ca f1				pop af 
95cb c1				pop bc 
95cc d1				pop de 
95cd e1				pop hl 
95ce c9				ret 
95cf			 
95cf			;if ENABLE_BASIC 
95cf			;	include "nascombasic.asm" 
95cf			;	basic: 
95cf			;	include "forth/FORTH.ASM" 
95cf			;endif 
95cf			 
95cf			; eof 
95cf			 
95cf			 
# End of file firmware_diags.asm
95cf			  
95cf			include "firmware_prompts.asm"  
95cf			; Prompts  
95cf			 
95cf			; boot messages 
95cf			 
95cf .. 00		prom_bootmsg:	db "z80-homebrew OS v1.7",0 
95e4 .. 00		prom_bootmsg1:	db "by Kevin Groves",0 
95f4			 
95f4			 
95f4			; config menus 
95f4			 
95f4			;prom_c3: db "Add Dictionary To File",0 
95f4			 
95f4			if STARTUP_V1 
95f4 .. 00		prom_c2: db "Select Autoload File",0 
9609 .. 00		prom_c2a: db "Disable Autoload File", 0 
961f			endif 
961f			 
961f			if STARTUP_V2 
961f			prom_c2: db "Enable Autoload Files",0 
961f			prom_c2a: db "Disable Autoload Files", 0 
961f			 
961f			crs_s1: db "*ls-word", 0 
961f			crs_s2: db "*ed-word", 0 
961f			crs_s3: db "*Demo-Games", 0 
961f			crs_s4: db "*Utils", 0 
961f			crs_s5: db "*SPI-Util", 0 
961f			crs_s6: db "*Key-Constants", 0 
961f			crs_sound: db "*Sound-Util", 0 
961f			crs_hw: db "*Hello-World",0 
961f			 
961f			 
961f			 
961f			endif 
961f			;prom_c2b: db "Select Storage Bank",0 
961f .. 00		prom_c4: db "Settings",0 
9628 .. 00		prom_m4:   db "Debug & Breakpoints On/Off",0 
9643 .. 00		prom_m4b:   db "Monitor",0 
964b .. 00		prom_c1: db "Hardware Diags",0 
965a			 
965a			 
965a			if STARTUP_V2 
965a			prom_c9: db "Create Startup Files",0 
965a			endif 
965a			 
965a .. 00		prom_notav:    db "Feature not available",0 
9670 .. 00		prom_empty:    db "",0 
9671			 
9671			; eof 
9671			 
# End of file firmware_prompts.asm
9671			  
9671			  
9671			; eof  
9671			  
# End of file firmware.asm
9671			 
9671			;; below moved from firmware.asm for strange zero calc of baseusermem label. Scope issue on multipass???? 
9671			;if BASE_KEV  
9671			;baseram: equ 08000h 
9671			;endif 
9671			 
9671			;if BASE_SC114 
9671			;baseram:     equ    endofcode 
9671			;endif 
9671			 
9671			 
9671			; Add NMI support. A rst 066h when r15z goes neg on clock side of resist. needs to do retn when exiting 
9671			 
9671			; start system 
9671			 
9671			coldstart: 
9671				; set sp 
9671				; di/ei 
9671			 
9671 f3				di 
9672 31 00 f0			ld sp, tos 
9675 cd 91 df			call init_nmi 
9678			;	ei 
9678			 
9678				; init spinner 
9678 3e 00			ld a,0 
967a 32 c0 eb			ld (display_active), a 
967d			 
967d				; disable breakpoint by default 
967d			 
967d				;ld a,'*' 
967d			;	ld a,' ' 
967d			;	ld (os_view_disable),a 
967d			 
967d				; set break point vector as new break point on or off 
967d cd 00 94			call bp_off 
9680			 
9680				; init hardware 
9680			 
9680				; init keyboard and screen hardware 
9680			 
9680 cd 1f 80			call hardware_init 
9683			 
9683			 
9683 cd 00 8a			call delay1s 
9686 3e 58			ld a, display_row_3+8 
9688 11 03 80			ld de, buildtime 
968b cd d0 8a			call str_at_display 
968e cd e0 8a			call update_display 
9691			 
9691 cd 00 8a			call delay1s 
9694 cd 00 8a			call delay1s 
9697 cd 00 8a			call delay1s 
969a			 
969a				; detect if any keys are held down to enable breakpoints at start up 
969a			 
969a cd 4d e0			call cin  
969d fe 00			cp 0 
969f 28 03			jr z, .nokeys 
96a1			 
96a1				;call hardware_diags 
96a1 cd 5e 92			call config 
96a4			 
96a4			;	ld de, .bpen 
96a4			;	ld a, display_row_4 
96a4			;	call str_at_display 
96a4			;	call update_display 
96a4			; 
96a4			;	ld a,0 
96a4			;	ld (os_view_disable),a 
96a4			; 
96a4			;.bpwait: 
96a4			;	call cin 
96a4			;	cp 0 
96a4			;	jr z, .bpwait 
96a4			;	jr .nokeys 
96a4			; 
96a4			; 
96a4			;.bpen:  db "Break points enabled!",0 
96a4			 
96a4			 
96a4			 
96a4			 
96a4			 
96a4			 
96a4			.nokeys: 
96a4			 
96a4			 
96a4				 
96a4			 
96a4			;jp  testkey 
96a4			 
96a4			;call storage_get_block_0 
96a4			; 
96a4			;ld hl, 0 
96a4			;ld de, store_page 
96a4			;call storage_read_block 
96a4			 
96a4				 
96a4			;ld hl, 10 
96a4			;ld de, store_page 
96a4			;call storage_read_block 
96a4			 
96a4			 
96a4			 
96a4			 
96a4			 
96a4			;stop:	nop 
96a4			;	jp stop 
96a4			 
96a4			 
96a4			 
96a4			main: 
96a4 cd bd 8a			call clear_display 
96a7 cd e0 8a			call update_display 
96aa			 
96aa			 
96aa			 
96aa			;	call testlcd 
96aa			 
96aa			 
96aa			 
96aa cd 46 9e			call forth_init 
96ad			 
96ad			 
96ad			warmstart: 
96ad cd 1c 9e			call forth_warmstart 
96b0			 
96b0				; run startup word load 
96b0			        ; TODO prevent this running at warmstart after crash  
96b0			 
96b0				if STARTUP_ENABLE 
96b0			 
96b0					if STARTUP_V1 
96b0			 
96b0						if STORAGE_SE 
96b0							call forth_autoload 
96b0						endif 
96b0 cd e1 de					call forth_startup 
96b3					endif 
96b3			 
96b3					if STARTUP_V2 
96b3			 
96b3						if STORAGE_SE 
96b3							call forth_autoload 
96b3						else 
96b3							call forth_startup 
96b3						endif 
96b3			 
96b3			 
96b3					endif 
96b3			 
96b3				endif 
96b3			 
96b3			warmstart_afterauto: 
96b3			 
96b3				; show free memory after boot 
96b3 11 52 97			ld de, freeram 
96b6 3e 00			ld a, display_row_1 
96b8 cd d0 8a			call str_at_display 
96bb			 
96bb				; get current heap start after loading any uwords 
96bb			 
96bb				;ld de, (os_last_new_uword) 
96bb				;ex de, hl 
96bb			 
96bb			; Or use heap_size word???? 
96bb				;ld hl, heap_end 
96bb				;ld hl, heap_size 
96bb				;ld de, topusermem 
96bb				;ld de, heap_start 
96bb ed 5b 66 e0			ld de, (free_list )      
96bf 21 96 e2				ld hl, heap_end 
96c2 ed 52			sbc hl, de 
96c4				;push hl 
96c4				;ld a,h	         	 
96c4				;ld hl, os_word_scratch		; TODO do direct write to frame buffer instead and drop the str_at_display 
96c4				;call hexout 
96c4			   	;pop hl 
96c4			; 
96c4			;	ld a,l 
96c4			;	ld hl, os_word_scratch+2 
96c4			;	call hexout 
96c4			;	ld hl, os_word_scratch+4 
96c4			;	ld a, 0 
96c4			;	ld (hl),a 
96c4 eb				ex de, hl 
96c5 21 c0 e5			ld hl, os_word_scratch 
96c8 cd ff 8f			call uitoa_16 
96cb			 
96cb			 
96cb 11 c0 e5			ld de, os_word_scratch 
96ce 3e 0d			ld a, display_row_1 + 13 
96d0 cd d0 8a			call str_at_display 
96d3 cd e0 8a			call update_display 
96d6			 
96d6			 
96d6				;call demo 
96d6			 
96d6			 
96d6				; init scratch input area for cli commands 
96d6			 
96d6 21 e2 e5			ld hl, os_cli_cmd 
96d9 3e 00			ld a,0 
96db 77				ld (hl),a 
96dc 23				inc hl 
96dd 77				ld (hl),a 
96de			 
96de 3e 00			ld a,0 
96e0 32 e1 e6			ld (os_last_cmd),a	; current command in use to enable repeated use with an enter etc 
96e3			 
96e3 32 de e5			ld (os_cur_ptr),a	; ptr to whatever is needed for this command 
96e6 32 df e5			ld (os_cur_ptr+1),a	 
96e9			 
96e9 32 c0 e5			ld (os_word_scratch),a	; byte or word being used in parsing for this command 
96ec 32 c1 e5			ld (os_word_scratch+1),a	 
96ef				 
96ef			 
96ef				;ld a, kLCD_Line2        ; TODO prompt using direct screen line address. Correct this to frame buffer 
96ef 21 e2 e5			ld hl, os_cli_cmd 
96f2			 
96f2 3e 00			ld a, 0		 ; init cli input 
96f4 77				ld (hl), a 
96f5 3e 28			ld a, display_row_2        ; TODO prompt using direct screen line address. Correct this to frame buffer 
96f7			cli: 
96f7				; show cli prompt 
96f7				;push af 
96f7				;ld a, 0 
96f7				;ld de, prompt 
96f7				;call str_at_display 
96f7			 
96f7				;call update_display 
96f7				;pop af 
96f7				;inc a 
96f7				;ld a, kLCD_Line4+1	 ; TODO using direct screen line writes. Correct this to frame buffer 
96f7			 
96f7			.lastrecall: 
96f7			 
96f7 0e 00			ld c, 0 
96f9 16 ff			ld d, 255    ; TODO fix input_str to actually take note of max string input length 
96fb 1e 28			ld e, 40 
96fd			 
96fd 21 e2 e5			ld hl, os_cli_cmd 
9700			 
9700				STACKFRAME OFF $fefe $9f9f 
9700				if DEBUG_STACK_IMB 
9700					if OFF 
9700						exx 
9700						ld de, $fefe 
9700						ld a, d 
9700						ld hl, curframe 
9700						call hexout 
9700						ld a, e 
9700						ld hl, curframe+2 
9700						call hexout 
9700						ld hl, $fefe 
9700						push hl 
9700						ld hl, $9f9f 
9700						push hl 
9700						exx 
9700					endif 
9700				endif 
9700			endm 
# End of macro STACKFRAME
9700			 
9700 cd 17 8d			call input_str 
9703			 
9703				STACKFRAMECHK OFF $fefe $9f9f 
9703				if DEBUG_STACK_IMB 
9703					if OFF 
9703						exx 
9703						ld hl, $9f9f 
9703						pop de   ; $9f9f 
9703						call cmp16 
9703						jr nz, .spnosame 
9703						ld hl, $fefe 
9703						pop de   ; $fefe 
9703						call cmp16 
9703						jr z, .spfrsame 
9703						.spnosame: call showsperror 
9703						.spfrsame: nop 
9703						exx 
9703					endif 
9703				endif 
9703			endm 
# End of macro STACKFRAMECHK
9703			 
9703			 
9703				; check to see if last line recall has been requested 
9703			 
9703			if EDIT_V2 
9703 fe 05			cp KEY_UP 
9705 20 0f			jr nz, .noexecline 
9707			 
9707 11 e2 e5			ld de, os_cli_cmd 
970a 21 e1 e6			ld hl, os_last_cmd 
970d 01 ff 00			ld bc, 255 
9710 ed b0			ldir 
9712 3e 00			ld a, 0 
9714 18 e1			jr .lastrecall 
9716			endif 
9716			 
9716			.noexecline: 
9716				; no so exec the line		 
9716			 
9716				; copy input to last command 
9716			 
9716 21 e2 e5			ld hl, os_cli_cmd 
9719 11 e1 e6			ld de, os_last_cmd 
971c 01 ff 00			ld bc, 255 
971f ed b0			ldir 
9721			 
9721				; wipe current buffer 
9721			 
9721			;	ld a, 0 
9721			;	ld hl, os_cli_cmd 
9721			;	ld de, os_cli_cmd+1 
9721			;	ld bc, 254 
9721			;	ldir 
9721				; TODO ldir is not working strcpy may not get all the terms on the input line???? 
9721			;	call strcpy 
9721			;	ld a, 0 
9721			;	ld (hl), a 
9721			;	inc hl 
9721			;	ld (hl), a 
9721			;	inc hl 
9721			;	ld (hl), a 
9721			 
9721				; switch frame buffer to program  
9721			 
9721 21 0a ed				ld hl, display_fb1 
9724 22 c6 eb				ld (display_fb_active), hl 
9727			 
9727			;	nop 
9727				STACKFRAME ON $fbfe $8f9f 
9727				if DEBUG_STACK_IMB 
9727					if ON 
9727						exx 
9727						ld de, $fbfe 
9727						ld a, d 
9727						ld hl, curframe 
9727						call hexout 
9727						ld a, e 
9727						ld hl, curframe+2 
9727						call hexout 
9727						ld hl, $fbfe 
9727						push hl 
9727						ld hl, $8f9f 
9727						push hl 
9727						exx 
9727					endif 
9727				endif 
9727			endm 
# End of macro STACKFRAME
9727				; first time into the parser so pass over the current scratch pad 
9727 21 e2 e5			ld hl,os_cli_cmd 
972a				; tokenise the entered statement(s) in HL 
972a cd c0 9e			call forthparse 
972d			        ; exec forth statements in top of return stack 
972d cd fc 9e			call forthexec 
9730				;call forthexec_cleanup 
9730			;	call parsenext 
9730			 
9730				STACKFRAMECHK ON $fbfe $8f9f 
9730				if DEBUG_STACK_IMB 
9730					if ON 
9730						exx 
9730						ld hl, $8f9f 
9730						pop de   ; $8f9f 
9730						call cmp16 
9730						jr nz, .spnosame 
9730						ld hl, $fbfe 
9730						pop de   ; $fbfe 
9730						call cmp16 
9730						jr z, .spfrsame 
9730						.spnosame: call showsperror 
9730						.spfrsame: nop 
9730						exx 
9730					endif 
9730				endif 
9730			endm 
# End of macro STACKFRAMECHK
9730				; TODO on return from forth parsing should there be a prompt to return to system? but already in system. 
9730			 
9730 3e 78			ld a, display_row_4 
9732 11 63 97			ld de, endprog 
9735			 
9735 cd e0 8a			call update_display		 
9738			 
9738 cd fd 99			call next_page_prompt 
973b			 
973b				; switch frame buffer to cli 
973b			 
973b 21 ab ed				ld hl, display_fb0 
973e 22 c6 eb				ld (display_fb_active), hl 
9741			 
9741			 
9741 cd bd 8a		        call clear_display 
9744 cd e0 8a			call update_display		 
9747			 
9747 21 e2 e5			ld hl, os_cli_cmd 
974a			 
974a 3e 00			ld a, 0		 ; init cli input 
974c 77				ld (hl), a 
974d			 
974d				; TODO f_cursor_ptr should inc row (scroll if required) and set start of row for next input  
974d			 
974d				; now on last line 
974d			 
974d				; TODO scroll screen up 
974d			 
974d				; TODO instead just clear screen and place at top of screen 
974d			 
974d			;	ld a, 0 
974d			;	ld (f_cursor_ptr),a 
974d			 
974d				;call clear_display 
974d				;call update_display 
974d			 
974d				;ld a, kLCD_Line1        ; TODO prompt using direct screen line address. Correct this to frame buffer 
974d 3e 00			ld a, display_row_1        ; TODO prompt using direct screen line address. Correct this to frame buffer 
974f c3 f7 96			jp cli 
9752			 
9752 .. 00		freeram: db "Free bytes: ",0 
975f ..			asc: db "1A2F" 
9763 .. 00		endprog: db "End prog...",0 
976f			 
976f			testenter2:   
976f 21 ed e2			ld hl,scratch+50 
9772 22 de e5			ld (os_cur_ptr),hl 
9775 c3 f7 96			jp cli 
9778			 
9778			testenter:  
9778			 
9778 21 5f 97			ld hl,asc 
977b			;	ld a,(hl) 
977b			;	call nibble2val 
977b cd 49 8f			call get_byte 
977e			 
977e			 
977e			;	ld a,(hl) 
977e			;	call atohex 
977e			 
977e			;	call fourehexhl 
977e 32 ed e2			ld (scratch+50),a 
9781			 
9781			 
9781			 
9781 21 61 97			ld hl,asc+2 
9784			;	ld a, (hl) 
9784			;	call nibble2val 
9784 cd 49 8f			call get_byte 
9787			 
9787			;	call fourehexhl 
9787 32 ef e2			ld (scratch+52),a 
978a				 
978a 21 ed e2			ld hl,scratch+50 
978d 22 de e5			ld (os_cur_ptr),hl 
9790 c3 f7 96			jp cli 
9793			 
9793			enter:	 
9793 3a bf e2			ld a,(scratch+4) 
9796 fe 00			cp 0 
9798 28 0c			jr z, .entercont 
979a				; no, not a null term line so has an address to work out.... 
979a			 
979a 21 bd e2			ld hl,scratch+2 
979d cd a9 8f			call get_word_hl 
97a0			 
97a0 22 de e5			ld (os_cur_ptr),hl	 
97a3 c3 f7 96			jp cli 
97a6			 
97a6			 
97a6			.entercont:  
97a6			 
97a6 21 bd e2			ld hl, scratch+2 
97a9 cd 49 8f			call get_byte 
97ac			 
97ac 2a de e5		   	ld hl,(os_cur_ptr) 
97af 77					ld (hl),a 
97b0 23					inc hl 
97b1 22 de e5				ld (os_cur_ptr),hl 
97b4				 
97b4			; get byte  
97b4			 
97b4			 
97b4 c3 f7 96			jp cli 
97b7			 
97b7			 
97b7			; basic monitor support 
97b7			 
97b7			monitor: 
97b7				;  
97b7 cd bd 8a			call clear_display 
97ba 3e 00			ld a, 0 
97bc 11 10 98			ld de, .monprompt 
97bf cd d0 8a			call str_at_display 
97c2 cd e0 8a			call update_display 
97c5			 
97c5				; get a monitor command 
97c5			 
97c5 0e 00			ld c, 0     ; entry at top left 
97c7 16 64			ld d, 100   ; max buffer size 
97c9 1e 0f			ld e, 15    ; input scroll area 
97cb 3e 00			ld a, 0     ; init string 
97cd 21 b9 e4			ld hl, os_input 
97d0 77				ld (hl), a 
97d1 23				inc hl 
97d2 77				ld (hl), a 
97d3 21 b9 e4			ld hl, os_input 
97d6 3e 01			ld a, 1     ; init string 
97d8 cd 17 8d			call input_str 
97db			 
97db cd bd 8a		        call clear_display 
97de cd e0 8a			call update_display		 
97e1			 
97e1 3a b9 e4			ld a, (os_input) 
97e4 cd 47 90			call toUpper 
97e7 fe 48		        cp 'H' 
97e9 ca 84 98		        jp z, .monhelp 
97ec fe 44			cp 'D'		; dump 
97ee ca b7 98			jp z, .mondump	 
97f1 fe 43			cp 'C'		; dump 
97f3 ca d1 98			jp z, .moncdump	 
97f6 fe 4d			cp 'M'		; dump 
97f8 ca 12 98			jp z, .moneditstart 
97fb fe 55			cp 'U'		; dump 
97fd ca 1e 98			jp z, .monedit	 
9800 fe 47			cp 'G'		; dump 
9802 ca ad 98			jp z, .monjump 
9805 fe 42			cp 'B'		; forth breakpoint 
9807 cc 06 94			call z, break_point_state 
980a fe 51			cp 'Q'		; dump 
980c c8				ret z	 
980d			 
980d			 
980d				; TODO "S" to access symbol by name and not need the address 
980d				; TODO "F" to find a string in memory 
980d			 
980d c3 b7 97			jp monitor 
9810			 
9810 .. 00		.monprompt: db ">", 0 
9812			 
9812			.moneditstart: 
9812				; get starting address 
9812			 
9812 21 bb e4			ld hl,os_input+2 
9815 cd a9 8f			call get_word_hl 
9818			 
9818 22 de e5			ld (os_cur_ptr),hl	 
981b			 
981b c3 b7 97			jp monitor 
981e			 
981e			.monedit: 
981e				; get byte to load 
981e			 
981e 21 bb e4			ld hl,os_input+2 
9821 cd 49 8f			call get_byte 
9824			 
9824				; get address to update 
9824 2a de e5			ld hl, (os_cur_ptr) 
9827			 
9827				; update byte 
9827			 
9827 77				ld (hl), a 
9828			 
9828				; move to next address and save it 
9828			 
9828 23				inc hl 
9829 22 de e5			ld (os_cur_ptr),hl	 
982c			 
982c c3 b7 97			jp monitor 
982f			 
982f			 
982f .. 00		.monhelptext1: 	db "D-Dump, C-Cont Dump",0 
9843 .. 00		.monhelptext2:  db "M-Edit Start, U-Update Byte",0 
985f .. 00		.monhelptext3:  db "G-Call address, B-Breakpoints",0 
987d .. 00		.monhelptext4:  db "Q-Quit",0 
9884			        
9884			.monhelp: 
9884 3e 00			ld a, display_row_1 
9886 11 2f 98		        ld de, .monhelptext1 
9889			 
9889 cd d0 8a			call str_at_display 
988c 3e 28			ld a, display_row_2 
988e 11 43 98		        ld de, .monhelptext2 
9891					 
9891 cd d0 8a			call str_at_display 
9894 3e 50			ld a, display_row_3 
9896 11 5f 98		        ld de, .monhelptext3 
9899					 
9899 cd d0 8a			call str_at_display 
989c 3e 78			ld a, display_row_4 
989e 11 7d 98		        ld de, .monhelptext4 
98a1 cd d0 8a			call str_at_display 
98a4			 
98a4 cd e0 8a			call update_display		 
98a7			 
98a7 cd fd 99			call next_page_prompt 
98aa c3 b7 97			jp monitor 
98ad			 
98ad			.monjump:    
98ad 21 bb e4			ld hl,os_input+2 
98b0 cd a9 8f			call get_word_hl 
98b3			 
98b3 e9				jp (hl) 
98b4 c3 b7 97			jp monitor 
98b7			 
98b7			.mondump:    
98b7 21 bb e4			ld hl,os_input+2 
98ba cd a9 8f			call get_word_hl 
98bd			 
98bd 22 de e5			ld (os_cur_ptr),hl	 
98c0 cd 05 99			call dumpcont 
98c3 3e 78			ld a, display_row_4 
98c5 11 63 97			ld de, endprog 
98c8			 
98c8 cd e0 8a			call update_display		 
98cb			 
98cb cd fd 99			call next_page_prompt 
98ce c3 b7 97			jp monitor 
98d1			.moncdump: 
98d1 cd 05 99			call dumpcont 
98d4 3e 78			ld a, display_row_4 
98d6 11 63 97			ld de, endprog 
98d9			 
98d9 cd e0 8a			call update_display		 
98dc			 
98dc cd fd 99			call next_page_prompt 
98df c3 b7 97			jp monitor 
98e2			 
98e2			 
98e2			; TODO symbol access  
98e2			 
98e2			.symbols:     ;; A list of symbols that can be called up  
98e2 ab ed			dw display_fb0 
98e4 .. 00			db "fb0",0  
98e8 74 ea		     	dw store_page 
98ea .. 00			db "store_page",0 
98f5			 
98f5			 
98f5			dump:	; see if we are cotinuing on from the last command by not uncluding any address 
98f5			 
98f5 3a bc e2			ld a,(scratch+1) 
98f8 fe 00			cp 0 
98fa 28 09			jr z, dumpcont 
98fc			 
98fc				; no, not a null term line so has an address to work out.... 
98fc			 
98fc 21 bd e2			ld hl,scratch+2 
98ff cd a9 8f			call get_word_hl 
9902			 
9902 22 de e5			ld (os_cur_ptr),hl	 
9905			 
9905			 
9905			 
9905			dumpcont: 
9905			 
9905				; dump bytes at ptr 
9905			 
9905			 
9905 3e 00			ld a, display_row_1 
9907 2a c6 eb			ld hl, (display_fb_active) 
990a cd ea 8c			call addatohl 
990d cd 35 99			call .dumpbyterow 
9910			 
9910 3e 28			ld a, display_row_2 
9912 2a c6 eb			ld hl, (display_fb_active) 
9915 cd ea 8c			call addatohl 
9918 cd 35 99			call .dumpbyterow 
991b			 
991b			 
991b 3e 50			ld a, display_row_3 
991d 2a c6 eb			ld hl, (display_fb_active) 
9920 cd ea 8c			call addatohl 
9923 cd 35 99			call .dumpbyterow 
9926			 
9926 3e 78			ld a, display_row_4 
9928 2a c6 eb			ld hl, (display_fb_active) 
992b cd ea 8c			call addatohl 
992e cd 35 99			call .dumpbyterow 
9931			 
9931 cd e0 8a			call update_display 
9934			;		jp cli 
9934 c9				ret 
9935			 
9935			.dumpbyterow: 
9935			 
9935				;push af 
9935			 
9935 e5				push hl 
9936			 
9936				; calc where to poke the ascii 
9936			if display_cols == 20 
9936				ld a, 16 
9936			else 
9936 3e 1f			ld a, 31 
9938			endif 
9938			 
9938 cd ea 8c			call addatohl 
993b 22 c0 e5			ld (os_word_scratch),hl  		; save pos for later 
993e			 
993e			 
993e			; display decoding address 
993e 2a de e5		   	ld hl,(os_cur_ptr) 
9941			 
9941 7c				ld a,h 
9942 e1				pop hl 
9943 e5				push hl 
9944			;	ld hl, os_word_scratch		; TODO do direct write to frame buffer instead and drop the str_at_display 
9944 cd f3 8e			call hexout 
9947 2a de e5		   	ld hl,(os_cur_ptr) 
994a			 
994a 7d				ld a,l 
994b e1				pop hl 
994c 23				inc hl 
994d 23				inc hl 
994e e5				push hl 
994f			;	ld hl, os_word_scratch+2 
994f cd f3 8e			call hexout 
9952 e1				pop hl 
9953 23				inc hl 
9954 23				inc hl 
9955				;ld hl, os_word_scratch+4 
9955 3e 3a			ld a, ':' 
9957 77				ld (hl),a 
9958 23				inc hl 
9959				;ld a, 0 
9959				;ld (hl),a 
9959				;ld de, os_word_scratch 
9959				;pop af 
9959				;push af 
9959			;		ld a, display_row_2 
9959			;		call str_at_display 
9959			;		call update_display 
9959			 
9959			 
9959			;pop af 
9959			;	add 5 
9959			 
9959			if display_cols == 20 
9959				ld b, 4 
9959			else 
9959 06 08			ld b, 8 
995b			endif	 
995b			 
995b			.dumpbyte: 
995b c5				push bc 
995c e5				push hl 
995d			 
995d			 
995d 2a de e5		   	ld hl,(os_cur_ptr) 
9960 7e					ld a,(hl) 
9961			 
9961					; poke the ascii to display 
9961 2a c0 e5				ld hl,(os_word_scratch) 
9964 77					ld (hl),a 
9965 23					inc hl 
9966 22 c0 e5				ld (os_word_scratch),hl 
9969			 
9969					 
9969			 
9969			 
9969 e1					pop hl 
996a e5					push hl 
996b			 
996b cd f3 8e				call hexout 
996e			 
996e					 
996e 2a de e5		   	ld hl,(os_cur_ptr) 
9971 23				inc hl 
9972 22 de e5		   	ld (os_cur_ptr),hl 
9975			 
9975 e1					pop hl 
9976 23					inc hl 
9977 23					inc hl 
9978 23					inc hl 
9979			 
9979			 
9979			 
9979					;ld a,0 
9979					;ld (os_word_scratch+2),a 
9979					;pop af 
9979					;push af 
9979			 
9979					;ld de, os_word_scratch 
9979					;call str_at_display 
9979			;		call update_display 
9979			;		pop af 
9979 c1					pop bc 
997a c6 03				add 3 
997c 10 dd			djnz .dumpbyte 
997e			 
997e				 
997e			 
997e c9				ret 
997f			 
997f			jump:	 
997f			 
997f 21 bd e2			ld hl,scratch+2 
9982 cd a9 8f			call get_word_hl 
9985				;ld hl,(scratch+2) 
9985				;call fourehexhl 
9985			 
9985 22 de e5			ld (os_cur_ptr),hl	 
9988			 
9988 e9				jp (hl) 
9989			 
9989			 
9989			 
9989			; TODO implement a basic monitor mode to start with 
9989			 
9989			 
9989			 
9989			 
9989			 
9989			 
9989			 
9989			 
9989			 
9989			; testing and demo code during development 
9989			 
9989			 
9989 .. 00		str1: db "Enter some text...",0 
999c .. 00		clear: db "                    ",0 
99b1			 
99b1			demo: 
99b1			 
99b1			 
99b1			 
99b1			;	call update_display 
99b1			 
99b1				; init scratch input area for testing 
99b1 21 bb e2			ld hl, scratch	 
99b4 3e 00			ld a,0 
99b6 77				ld (hl),a 
99b7			 
99b7			 
99b7 3e 28		            LD   A, display_row_2 
99b9			;            CALL fLCD_Pos       ;Position cursor to location in A 
99b9 11 89 99		            LD   DE, str1 
99bc cd d0 8a			call str_at_display 
99bf			 
99bf			;            CALL fLCD_Str       ;Display string pointed to by DE 
99bf			cloop:	 
99bf 3e 50		            LD   A, display_row_3 
99c1			;            CALL fLCD_Pos       ;Position cursor to location in A 
99c1 11 9c 99		            LD   DE, clear 
99c4			 ;           CALL fLCD_Str       ;Display string pointed to by DE 
99c4 cd d0 8a				call str_at_display 
99c7 3e 78			ld a, display_row_4 
99c9 11 f9 99			ld de, prompt 
99cc			 
99cc cd d0 8a				call str_at_display 
99cf cd e0 8a			call update_display 
99d2			 
99d2 3e 79			ld a, kLCD_Line4+1	 ; TODO using direct screen line writes. Correct this to frame buffer 
99d4 16 0a			ld d, 10 
99d6 21 bb e2			ld hl, scratch	 
99d9 cd 17 8d			call input_str 
99dc			 
99dc			;	call clear_display 
99dc			;'	call update_display 
99dc			 
99dc 3e 00		            LD   A, display_row_1 
99de			;            CALL fLCD_Pos       ;Position cursor to location in A 
99de 11 9c 99		            LD   DE, clear 
99e1 cd d0 8a				call str_at_display 
99e4			;            CALL fLCD_Str       ;Display string pointed to by DE 
99e4 3e 00		            LD   A, display_row_1 
99e6			;            CALL fLCD_Pos       ;Position cursor to location in A 
99e6 11 bb e2		            LD   DE, scratch 
99e9			;            CALL fLCD_Str       ;Display string pointed to by DE 
99e9 cd d0 8a				call str_at_display 
99ec cd e0 8a			call update_display 
99ef			 
99ef 3e 00				ld a,0 
99f1 21 bb e2			ld hl, scratch 
99f4 77				ld (hl),a 
99f5			 
99f5 00				nop 
99f6 c3 bf 99			jp cloop 
99f9			 
99f9			 
99f9			 
99f9			; OS Prompt 
99f9			 
99f9 .. 00		prompt: db ">",0 
99fb .. 00		endprg: db "?",0 
99fd			 
99fd			 
99fd			; handy next page prompt 
99fd			next_page_prompt: 
99fd e5				push hl 
99fe d5				push de 
99ff f5				push af 
9a00 c5				push bc 
9a01			 
9a01 3e 9f			ld a,display_row_4 + display_cols - 1 
9a03 11 fb 99		        ld de, endprg 
9a06 cd d0 8a			call str_at_display 
9a09 cd e0 8a			call update_display 
9a0c cd 47 e0			call cin_wait 
9a0f c1				pop bc 
9a10 f1				pop af 
9a11 d1				pop de 
9a12 e1				pop hl 
9a13			 
9a13			 
9a13 c9				ret 
9a14			 
9a14			 
9a14			; forth parser 
9a14			 
9a14			; My forth kernel 
9a14			include "forth_kernel.asm" 
9a14			; 
9a14			; kernel to the forth OS 
9a14			 
9a14			DS_TYPE_STR: equ 1     ; string type 
9a14			DS_TYPE_INUM: equ 2     ; $ 16 bit unsigned int usually a hex address 
9a14			DS_TYPE_SNUM: equ 3     ; $ 16 bit signed int  
9a14			;DS_TYPE_FNUM: equ 3      ; 24/32 bit floating point  do string conversion instead of a new type 
9a14			 
9a14			FORTH_PARSEV1: equ 0 
9a14			FORTH_PARSEV2: equ 0 
9a14			FORTH_PARSEV3: equ 0 
9a14			FORTH_PARSEV4: equ 0 
9a14			FORTH_PARSEV5: equ 0 
9a14			FORTH_PARSEV6: equ 1 
9a14			 
9a14			;if FORTH_PARSEV5 
9a14			;	FORTH_END_BUFFER: equ 0 
9a14			;else 
9a14			FORTH_END_BUFFER: equ 127 
9a14			;endif 
9a14			 
9a14			FORTH_TRUE: equ 1 
9a14			FORTH_FALSE: equ 0 
9a14			 
9a14			if FORTH_PARSEV4 
9a14			include "forth_stackops.asm" 
9a14			endif 
9a14			 
9a14			if FORTH_PARSEV5 
9a14			include "forth_stackopsv5.asm" 
9a14			endif 
9a14			 
9a14			if FORTH_PARSEV6 
9a14			include "forth_stackopsv5.asm" 
9a14			 
9a14			; Stack operations for v5 parser on wards 
9a14			; * DATA stack 
9a14			; * LOOP stack 
9a14			; * RETURN stack 
9a14			 
9a14			 
9a14			 
9a14			FORTH_CHK_DSP_UNDER: macro 
9a14				push hl 
9a14				push de 
9a14				ld hl,(cli_data_sp) 
9a14				ld de, cli_data_stack 
9a14				call cmp16 
9a14				jp c, fault_dsp_under 
9a14				pop de 
9a14				pop hl 
9a14				endm 
9a14			 
9a14			 
9a14			FORTH_CHK_RSP_UNDER: macro 
9a14				push hl 
9a14				push de 
9a14				ld hl,(cli_ret_sp) 
9a14				ld de, cli_ret_stack 
9a14				call cmp16 
9a14				jp c, fault_rsp_under 
9a14				pop de 
9a14				pop hl 
9a14				endm 
9a14			 
9a14			FORTH_CHK_LOOP_UNDER: macro 
9a14				push hl 
9a14				push de 
9a14				ld hl,(cli_loop_sp) 
9a14				ld de, cli_loop_stack 
9a14				call cmp16 
9a14				jp c, fault_loop_under 
9a14				pop de 
9a14				pop hl 
9a14				endm 
9a14			 
9a14			FORTH_ERR_TOS_NOTSTR: macro 
9a14				; TOSO might need more for checks when used 
9a14				push af 
9a14				ld a,(hl) 
9a14				cp DS_TYPE_STR 
9a14				jp nz, type_faultn   
9a14				pop af 
9a14				endm 
9a14			 
9a14			FORTH_ERR_TOS_NOTNUM: macro 
9a14				push af 
9a14				ld a,(hl) 
9a14				cp DS_TYPE_INUM 
9a14				jp nz, type_faultn   
9a14				pop af 
9a14				endm 
9a14			 
9a14			 
9a14			; increase data stack pointer and save hl to it 
9a14				 
9a14			FORTH_DSP_NEXT: macro 
9a14				call macro_forth_dsp_next 
9a14				endm 
9a14			 
9a14			 
9a14			macro_forth_dsp_next: 
9a14				if DEBUG_FORTH_STACK_GUARD 
9a14 cd b9 dc				call check_stacks 
9a17				endif 
9a17 e5				push hl 
9a18 d5				push de 
9a19 eb				ex de,hl 
9a1a 2a e8 e9			ld hl,(cli_data_sp) 
9a1d 23				inc hl 
9a1e 23				inc hl 
9a1f			 
9a1f			; PARSEV5 
9a1f 23				inc hl 
9a20 22 e8 e9			ld (cli_data_sp),hl 
9a23 73				ld (hl), e 
9a24 23				inc hl 
9a25 72				ld (hl), d 
9a26 d1				pop de 
9a27 e1				pop hl 
9a28				if DEBUG_FORTH_STACK_GUARD 
9a28 cd b9 dc				call check_stacks 
9a2b				endif 
9a2b c9				ret 
9a2c			 
9a2c			 
9a2c			; increase ret stack pointer and save hl to it 
9a2c				 
9a2c			FORTH_RSP_NEXT: macro 
9a2c				call macro_forth_rsp_next 
9a2c				endm 
9a2c			 
9a2c			macro_forth_rsp_next: 
9a2c				if DEBUG_FORTH_STACK_GUARD 
9a2c cd b9 dc				call check_stacks 
9a2f				endif 
9a2f e5				push hl 
9a30 d5				push de 
9a31 eb				ex de,hl 
9a32 2a ec e9			ld hl,(cli_ret_sp) 
9a35 23				inc hl 
9a36 23				inc hl 
9a37 22 ec e9			ld (cli_ret_sp),hl 
9a3a 73				ld (hl), e 
9a3b 23				inc hl 
9a3c 72				ld (hl), d 
9a3d d1				pop de 
9a3e e1				pop hl 
9a3f				if DEBUG_FORTH_STACK_GUARD 
9a3f cd b9 dc				call check_stacks 
9a42				endif 
9a42 c9				ret 
9a43			 
9a43			; get current ret stack pointer and save to hl  
9a43				 
9a43			FORTH_RSP_TOS: macro 
9a43				call macro_forth_rsp_tos 
9a43				endm 
9a43			 
9a43			macro_forth_rsp_tos: 
9a43				;push de 
9a43 2a ec e9			ld hl,(cli_ret_sp) 
9a46 cd 7e 9a			call loadhlptrtohl 
9a49				;ld e, (hl) 
9a49				;inc hl 
9a49				;ld d, (hl) 
9a49				;ex de, hl 
9a49					if DEBUG_FORTH_WORDS 
9a49			;			DMARK "RST" 
9a49						CALLMONITOR 
9a49 cd 6f ee			call debug_vector  
9a4c				endm  
# End of macro CALLMONITOR
9a4c					endif 
9a4c				;pop de 
9a4c c9				ret 
9a4d			 
9a4d			; pop ret stack pointer 
9a4d				 
9a4d			FORTH_RSP_POP: macro 
9a4d				call macro_forth_rsp_pop 
9a4d				endm 
9a4d			 
9a4d			 
9a4d			macro_forth_rsp_pop: 
9a4d				if DEBUG_FORTH_STACK_GUARD 
9a4d			;		DMARK "RPP" 
9a4d cd b9 dc				call check_stacks 
9a50					FORTH_CHK_RSP_UNDER 
9a50 e5				push hl 
9a51 d5				push de 
9a52 2a ec e9			ld hl,(cli_ret_sp) 
9a55 11 a6 e9			ld de, cli_ret_stack 
9a58 cd 08 8d			call cmp16 
9a5b da d0 dd			jp c, fault_rsp_under 
9a5e d1				pop de 
9a5f e1				pop hl 
9a60				endm 
# End of macro FORTH_CHK_RSP_UNDER
9a60				endif 
9a60 e5				push hl 
9a61 2a ec e9			ld hl,(cli_ret_sp) 
9a64			 
9a64			 
9a64				if FORTH_ENABLE_FREE 
9a64			 
9a64					; get pointer 
9a64			 
9a64					push de 
9a64					push hl 
9a64			 
9a64					ld e, (hl) 
9a64					inc hl 
9a64					ld d, (hl) 
9a64			 
9a64					ex de, hl 
9a64					call free 
9a64			 
9a64					pop hl 
9a64					pop de 
9a64			 
9a64			 
9a64				endif 
9a64			 
9a64			 
9a64 2b				dec hl 
9a65 2b				dec hl 
9a66 22 ec e9			ld (cli_ret_sp), hl 
9a69				; do stack underflow checks 
9a69 e1				pop hl 
9a6a				if DEBUG_FORTH_STACK_GUARD 
9a6a cd b9 dc				call check_stacks 
9a6d					FORTH_CHK_RSP_UNDER 
9a6d e5				push hl 
9a6e d5				push de 
9a6f 2a ec e9			ld hl,(cli_ret_sp) 
9a72 11 a6 e9			ld de, cli_ret_stack 
9a75 cd 08 8d			call cmp16 
9a78 da d0 dd			jp c, fault_rsp_under 
9a7b d1				pop de 
9a7c e1				pop hl 
9a7d				endm 
# End of macro FORTH_CHK_RSP_UNDER
9a7d				endif 
9a7d c9				ret 
9a7e			 
9a7e			 
9a7e			 
9a7e			; routine to load word pointed to by hl into hl 
9a7e			 
9a7e			loadhlptrtohl: 
9a7e			 
9a7e d5				push de 
9a7f 5e				ld e, (hl) 
9a80 23				inc hl 
9a81 56				ld d, (hl) 
9a82 eb				ex de, hl 
9a83 d1				pop de 
9a84			 
9a84 c9				ret 
9a85			 
9a85			 
9a85			 
9a85			 
9a85			 
9a85			; push a number held in HL onto the data stack 
9a85			; entry point for pushing a value when already in hl used in function above 
9a85			 
9a85			forth_push_numhl: 
9a85			 
9a85 e5				push hl    ; save value to push 
9a86			 
9a86			if DEBUG_FORTH_PUSH 
9a86				; see if disabled 
9a86			 
9a86			 
9a86 f5				push af 
9a87 3a 6f ee			ld a,(debug_vector) 
9a8a fe c9			cp $c9   ; ret 
9a8c			;	ld a, (os_view_disable) 
9a8c			;	cp '*' 
9a8c 28 34			jr z, .pskip2 
9a8e e5				push hl 
9a8f e5			push hl 
9a90 cd bd 8a			call clear_display 
9a93 e1			pop hl 
9a94 7c				ld a,h 
9a95 21 c0 e5			ld hl, os_word_scratch 
9a98 cd f3 8e			call hexout 
9a9b e1				pop hl 
9a9c 7d				ld a,l 
9a9d 21 c2 e5			ld hl, os_word_scratch+2 
9aa0 cd f3 8e			call hexout 
9aa3			 
9aa3 21 c4 e5			ld hl, os_word_scratch+4 
9aa6 3e 00			ld a,0 
9aa8 77				ld (hl),a 
9aa9 11 c0 e5			ld de,os_word_scratch 
9aac 3e 28				ld a, display_row_2 
9aae cd d0 8a				call str_at_display 
9ab1 11 b2 ce			ld de, .push_num 
9ab4 3e 00			ld a, display_row_1 
9ab6			 
9ab6 cd d0 8a				call str_at_display 
9ab9			 
9ab9			 
9ab9 cd e0 8a			call update_display 
9abc cd 00 8a			call delay1s 
9abf cd 00 8a			call delay1s 
9ac2			.pskip2:  
9ac2			 
9ac2 f1				pop af 
9ac3			endif	 
9ac3			 
9ac3			 
9ac3				FORTH_DSP_NEXT 
9ac3 cd 14 9a			call macro_forth_dsp_next 
9ac6				endm 
# End of macro FORTH_DSP_NEXT
9ac6			 
9ac6 2a e8 e9			ld hl, (cli_data_sp) 
9ac9			 
9ac9				; save item type 
9ac9 3e 02			ld a,  DS_TYPE_INUM 
9acb 77				ld (hl), a 
9acc 23				inc hl 
9acd			 
9acd				; get word off stack 
9acd d1				pop de 
9ace 7b				ld a,e 
9acf 77				ld (hl), a 
9ad0 23				inc hl 
9ad1 7a				ld a,d 
9ad2 77				ld (hl), a 
9ad3			 
9ad3			if DEBUG_FORTH_PUSH 
9ad3 2b				dec hl 
9ad4 2b				dec hl 
9ad5 2b				dec hl 
9ad6						DMARK "PH5" 
9ad6 f5				push af  
9ad7 3a eb 9a			ld a, (.dmark)  
9ada 32 65 ee			ld (debug_mark),a  
9add 3a ec 9a			ld a, (.dmark+1)  
9ae0 32 66 ee			ld (debug_mark+1),a  
9ae3 3a ed 9a			ld a, (.dmark+2)  
9ae6 32 67 ee			ld (debug_mark+2),a  
9ae9 18 03			jr .pastdmark  
9aeb ..			.dmark: db "PH5"  
9aee f1			.pastdmark: pop af  
9aef			endm  
# End of macro DMARK
9aef				CALLMONITOR 
9aef cd 6f ee			call debug_vector  
9af2				endm  
# End of macro CALLMONITOR
9af2			endif	 
9af2			 
9af2 c9				ret 
9af3			 
9af3			 
9af3			; Push a string to stack pointed to by hl 
9af3			 
9af3			forth_push_str: 
9af3			 
9af3			if DEBUG_FORTH_PUSH 
9af3						DMARK "PSQ" 
9af3 f5				push af  
9af4 3a 08 9b			ld a, (.dmark)  
9af7 32 65 ee			ld (debug_mark),a  
9afa 3a 09 9b			ld a, (.dmark+1)  
9afd 32 66 ee			ld (debug_mark+1),a  
9b00 3a 0a 9b			ld a, (.dmark+2)  
9b03 32 67 ee			ld (debug_mark+2),a  
9b06 18 03			jr .pastdmark  
9b08 ..			.dmark: db "PSQ"  
9b0b f1			.pastdmark: pop af  
9b0c			endm  
# End of macro DMARK
9b0c				CALLMONITOR 
9b0c cd 6f ee			call debug_vector  
9b0f				endm  
# End of macro CALLMONITOR
9b0f			endif	 
9b0f			 
9b0f			 
9b0f			    
9b0f e5				push hl 
9b10 e5				push hl 
9b11			 
9b11			;	ld a, 0   ; find end of string 
9b11 cd 50 90			call strlenz 
9b14			if DEBUG_FORTH_PUSH 
9b14						DMARK "PQ2" 
9b14 f5				push af  
9b15 3a 29 9b			ld a, (.dmark)  
9b18 32 65 ee			ld (debug_mark),a  
9b1b 3a 2a 9b			ld a, (.dmark+1)  
9b1e 32 66 ee			ld (debug_mark+1),a  
9b21 3a 2b 9b			ld a, (.dmark+2)  
9b24 32 67 ee			ld (debug_mark+2),a  
9b27 18 03			jr .pastdmark  
9b29 ..			.dmark: db "PQ2"  
9b2c f1			.pastdmark: pop af  
9b2d			endm  
# End of macro DMARK
9b2d				CALLMONITOR 
9b2d cd 6f ee			call debug_vector  
9b30				endm  
# End of macro CALLMONITOR
9b30			endif	 
9b30 eb				ex de, hl 
9b31 e1				pop hl   ; get ptr to start of string 
9b32			if DEBUG_FORTH_PUSH 
9b32						DMARK "PQ3" 
9b32 f5				push af  
9b33 3a 47 9b			ld a, (.dmark)  
9b36 32 65 ee			ld (debug_mark),a  
9b39 3a 48 9b			ld a, (.dmark+1)  
9b3c 32 66 ee			ld (debug_mark+1),a  
9b3f 3a 49 9b			ld a, (.dmark+2)  
9b42 32 67 ee			ld (debug_mark+2),a  
9b45 18 03			jr .pastdmark  
9b47 ..			.dmark: db "PQ3"  
9b4a f1			.pastdmark: pop af  
9b4b			endm  
# End of macro DMARK
9b4b				CALLMONITOR 
9b4b cd 6f ee			call debug_vector  
9b4e				endm  
# End of macro CALLMONITOR
9b4e			endif	 
9b4e 19				add hl,de 
9b4f			if DEBUG_FORTH_PUSH 
9b4f						DMARK "PQE" 
9b4f f5				push af  
9b50 3a 64 9b			ld a, (.dmark)  
9b53 32 65 ee			ld (debug_mark),a  
9b56 3a 65 9b			ld a, (.dmark+1)  
9b59 32 66 ee			ld (debug_mark+1),a  
9b5c 3a 66 9b			ld a, (.dmark+2)  
9b5f 32 67 ee			ld (debug_mark+2),a  
9b62 18 03			jr .pastdmark  
9b64 ..			.dmark: db "PQE"  
9b67 f1			.pastdmark: pop af  
9b68			endm  
# End of macro DMARK
9b68				CALLMONITOR 
9b68 cd 6f ee			call debug_vector  
9b6b				endm  
# End of macro CALLMONITOR
9b6b			endif	 
9b6b			 
9b6b 2b				dec hl    ; see if there is an optional trailing double quote 
9b6c 7e				ld a,(hl) 
9b6d fe 22			cp '"' 
9b6f 20 03			jr nz, .strnoq 
9b71 3e 00			ld a, 0      ; get rid of double quote 
9b73 77				ld (hl), a 
9b74 23			.strnoq: inc hl 
9b75			 
9b75 3e 00			ld a, 0 
9b77 77				ld (hl), a     ; add null term and get rid of trailing double quote 
9b78			 
9b78 13				inc de ; add one for the type string 
9b79 13				inc de ; add one for null term??? 
9b7a			 
9b7a				; tos is get string pointer again 
9b7a				; de contains space to allocate 
9b7a				 
9b7a d5				push de 
9b7b			 
9b7b eb				ex de, hl 
9b7c			 
9b7c				;push af 
9b7c			 
9b7c			if DEBUG_FORTH_PUSH 
9b7c						DMARK "PHm" 
9b7c f5				push af  
9b7d 3a 91 9b			ld a, (.dmark)  
9b80 32 65 ee			ld (debug_mark),a  
9b83 3a 92 9b			ld a, (.dmark+1)  
9b86 32 66 ee			ld (debug_mark+1),a  
9b89 3a 93 9b			ld a, (.dmark+2)  
9b8c 32 67 ee			ld (debug_mark+2),a  
9b8f 18 03			jr .pastdmark  
9b91 ..			.dmark: db "PHm"  
9b94 f1			.pastdmark: pop af  
9b95			endm  
# End of macro DMARK
9b95				CALLMONITOR 
9b95 cd 6f ee			call debug_vector  
9b98				endm  
# End of macro CALLMONITOR
9b98			endif	 
9b98 cd c5 90			call malloc	; on ret hl now contains allocated memory 
9b9b				if DEBUG_FORTH_MALLOC_GUARD 
9b9b cc 0a cf				call z,malloc_error 
9b9e				endif 
9b9e			 
9b9e				 
9b9e c1				pop bc    ; get length 
9b9f d1				pop de   ;  get string start    
9ba0			 
9ba0				; hl has destination from malloc 
9ba0			 
9ba0 eb				ex de, hl    ; prep for ldir 
9ba1			 
9ba1 d5				push de   ; save malloc area for DSP later 
9ba2				;push hl   ; save malloc area for DSP later 
9ba2			 
9ba2			if DEBUG_FORTH_PUSH 
9ba2						DMARK "PHc" 
9ba2 f5				push af  
9ba3 3a b7 9b			ld a, (.dmark)  
9ba6 32 65 ee			ld (debug_mark),a  
9ba9 3a b8 9b			ld a, (.dmark+1)  
9bac 32 66 ee			ld (debug_mark+1),a  
9baf 3a b9 9b			ld a, (.dmark+2)  
9bb2 32 67 ee			ld (debug_mark+2),a  
9bb5 18 03			jr .pastdmark  
9bb7 ..			.dmark: db "PHc"  
9bba f1			.pastdmark: pop af  
9bbb			endm  
# End of macro DMARK
9bbb				CALLMONITOR 
9bbb cd 6f ee			call debug_vector  
9bbe				endm  
# End of macro CALLMONITOR
9bbe			endif	 
9bbe			 
9bbe			 
9bbe ed b0			ldir 
9bc0			 
9bc0			 
9bc0				; push malloc to data stack     macro?????  
9bc0			 
9bc0				FORTH_DSP_NEXT 
9bc0 cd 14 9a			call macro_forth_dsp_next 
9bc3				endm 
# End of macro FORTH_DSP_NEXT
9bc3			 
9bc3				; save value and type 
9bc3			 
9bc3 2a e8 e9			ld hl, (cli_data_sp) 
9bc6			 
9bc6				; save item type 
9bc6 3e 01			ld a,  DS_TYPE_STR 
9bc8 77				ld (hl), a 
9bc9 23				inc hl 
9bca			 
9bca				; get malloc word off stack 
9bca d1				pop de 
9bcb 73				ld (hl), e 
9bcc 23				inc hl 
9bcd 72				ld (hl), d 
9bce			 
9bce			 
9bce			 
9bce			if DEBUG_FORTH_PUSH 
9bce 2a e8 e9			ld hl, (cli_data_sp) 
9bd1						DMARK "PHS" 
9bd1 f5				push af  
9bd2 3a e6 9b			ld a, (.dmark)  
9bd5 32 65 ee			ld (debug_mark),a  
9bd8 3a e7 9b			ld a, (.dmark+1)  
9bdb 32 66 ee			ld (debug_mark+1),a  
9bde 3a e8 9b			ld a, (.dmark+2)  
9be1 32 67 ee			ld (debug_mark+2),a  
9be4 18 03			jr .pastdmark  
9be6 ..			.dmark: db "PHS"  
9be9 f1			.pastdmark: pop af  
9bea			endm  
# End of macro DMARK
9bea				CALLMONITOR 
9bea cd 6f ee			call debug_vector  
9bed				endm  
# End of macro CALLMONITOR
9bed			;	ex de,hl 
9bed			endif	 
9bed				; in case of spaces, skip the ptr past the copied string 
9bed				;pop af 
9bed				;ld (cli_origptr),hl 
9bed			 
9bed c9				ret 
9bee			 
9bee			 
9bee			 
9bee			; TODO ascii push input onto stack given hl to start of input 
9bee			 
9bee			; identify type 
9bee			; if starts with a " then a string 
9bee			; otherwise it is a number 
9bee			;  
9bee			; if a string 
9bee			;     scan for ending " to get length of string to malloc for + 1 
9bee			;     malloc 
9bee			;     put pointer to string on stack first byte flags as string 
9bee			; 
9bee			; else a number 
9bee			;    look for number format identifier 
9bee			;    $xx hex 
9bee			;    %xxxxx bin 
9bee			;    xxxxx decimal 
9bee			;    convert number to 16bit word.  
9bee			;    malloc word + 1 with flag to identiy as num 
9bee			;    put pointer to number on stack 
9bee			;   
9bee			;  
9bee			  
9bee			forth_apush: 
9bee				; kernel push 
9bee			 
9bee			if DEBUG_FORTH_PUSH 
9bee						DMARK "PSH" 
9bee f5				push af  
9bef 3a 03 9c			ld a, (.dmark)  
9bf2 32 65 ee			ld (debug_mark),a  
9bf5 3a 04 9c			ld a, (.dmark+1)  
9bf8 32 66 ee			ld (debug_mark+1),a  
9bfb 3a 05 9c			ld a, (.dmark+2)  
9bfe 32 67 ee			ld (debug_mark+2),a  
9c01 18 03			jr .pastdmark  
9c03 ..			.dmark: db "PSH"  
9c06 f1			.pastdmark: pop af  
9c07			endm  
# End of macro DMARK
9c07				CALLMONITOR 
9c07 cd 6f ee			call debug_vector  
9c0a				endm  
# End of macro CALLMONITOR
9c0a			endif	 
9c0a				; identify input type 
9c0a			 
9c0a 7e				ld a,(hl) 
9c0b			 
9c0b fe 23			cp '#' 
9c0d ca 47 9c			jp z, .fapdec 
9c10			 
9c10			 
9c10 fe 22			cp '"' 
9c12 28 0a			jr z, .fapstr 
9c14 fe 24			cp '$' 
9c16 ca 3e 9c			jp z, .faphex 
9c19 fe 25			cp '%' 
9c1b ca 26 9c			jp z, .fapbin 
9c1e			;	cp 'b' 
9c1e			;	jp z, .fabin 
9c1e				; else decimal 
9c1e			 
9c1e				; TODO do decimal conversion 
9c1e				; decimal is stored as a 16bit word 
9c1e			 
9c1e				; by default everything is a string if type is not detected 
9c1e			.fapstr: ; 
9c1e fe 22			cp '"' 
9c20 20 01			jr nz, .strnoqu 
9c22 23				inc hl 
9c23			.strnoqu: 
9c23 c3 f3 9a			jp forth_push_str 
9c26			 
9c26			 
9c26			 
9c26			.fapbin:    ; push a binary string.  
9c26 11 00 00			ld de, 0   ; hold a 16bit value 
9c29			 
9c29 23			.fapbinshift:	inc hl  
9c2a 7e				ld a,(hl) 
9c2b fe 00			cp 0     ; done scanning  
9c2d 28 0b			jr z, .fapbdone  	; got it in HL so push  
9c2f			 
9c2f				; left shift de 
9c2f eb				ex de, hl	 
9c30 29				add hl, hl 
9c31			 
9c31				; is 1 
9c31 fe 31			cp '1' 
9c33 20 02			jr nz, .binzero 
9c35 cb 4d			bit 1, l 
9c37			.binzero: 
9c37 eb				ex de, hl	 ; save current de 
9c38 18 ef			jr .fapbinshift 
9c3a			 
9c3a			.fapbdone: 
9c3a eb				ex de, hl 
9c3b c3 85 9a			jp forth_push_numhl 
9c3e			 
9c3e			 
9c3e			.faphex:   ; hex is always stored as a 16bit word 
9c3e				; skip number prefix 
9c3e 23				inc hl 
9c3f				; turn ascii into number 
9c3f cd a9 8f			call get_word_hl	; ret 16bit word in hl 
9c42			 
9c42 c3 85 9a			jp forth_push_numhl 
9c45			 
9c45 00				 nop 
9c46			 
9c46			.fabin:   ; TODO bin conversion 
9c46			 
9c46			 
9c46 c9				ret 
9c47			.fapdec:	 
9c47				; string to dec conversion 
9c47 23				inc hl 
9c48 eb				ex de, hl 
9c49 cd e7 8f			call string_to_uint16 
9c4c c3 85 9a			jp forth_push_numhl 
9c4f c9				ret 
9c50				 
9c50			;atoui_16: 
9c50			 
9c50			; get either a string ptr or a 16bit word from the data stack 
9c50			 
9c50			FORTH_DSP: macro 
9c50				call macro_forth_dsp 
9c50				endm 
9c50			 
9c50			macro_forth_dsp: 
9c50				; data stack pointer points to current word on tos 
9c50			 
9c50 2a e8 e9			ld hl,(cli_data_sp) 
9c53			 
9c53				if DEBUG_FORTH_PUSH 
9c53						DMARK "DSP" 
9c53 f5				push af  
9c54 3a 68 9c			ld a, (.dmark)  
9c57 32 65 ee			ld (debug_mark),a  
9c5a 3a 69 9c			ld a, (.dmark+1)  
9c5d 32 66 ee			ld (debug_mark+1),a  
9c60 3a 6a 9c			ld a, (.dmark+2)  
9c63 32 67 ee			ld (debug_mark+2),a  
9c66 18 03			jr .pastdmark  
9c68 ..			.dmark: db "DSP"  
9c6b f1			.pastdmark: pop af  
9c6c			endm  
# End of macro DMARK
9c6c			 
9c6c cd 3d cf				call display_data_sp 
9c6f				;call break_point_state 
9c6f				;rst 030h 
9c6f				CALLMONITOR 
9c6f cd 6f ee			call debug_vector  
9c72				endm  
# End of macro CALLMONITOR
9c72				endif 
9c72			 
9c72 c9				ret 
9c73			 
9c73			; return hl to start of value on stack 
9c73			 
9c73			FORTH_DSP_VALUE: macro 
9c73				call macro_forth_dsp_value 
9c73				endm 
9c73			 
9c73			macro_forth_dsp_value: 
9c73			 
9c73				FORTH_DSP 
9c73 cd 50 9c			call macro_forth_dsp 
9c76				endm 
# End of macro FORTH_DSP
9c76			 
9c76 d5				push de 
9c77			 
9c77 23				inc hl ; skip type 
9c78			 
9c78 5e				ld e, (hl) 
9c79 23				inc hl 
9c7a 56				ld d, (hl) 
9c7b eb				ex de,hl  
9c7c			 
9c7c d1				pop de 
9c7d			 
9c7d c9				ret 
9c7e			 
9c7e			; return hl to start of value to second item on stack 
9c7e			 
9c7e			FORTH_DSP_VALUEM1: macro 
9c7e				call macro_forth_dsp_value_m1 
9c7e				endm 
9c7e			 
9c7e			macro_forth_dsp_value_m1: 
9c7e			 
9c7e				FORTH_DSP 
9c7e cd 50 9c			call macro_forth_dsp 
9c81				endm 
# End of macro FORTH_DSP
9c81			 
9c81 2b				dec hl 
9c82 2b				dec hl 
9c83			;	dec hl 
9c83			 
9c83 d5				push de 
9c84			 
9c84 5e				ld e, (hl) 
9c85 23				inc hl 
9c86 56				ld d, (hl) 
9c87 eb				ex de,hl  
9c88			 
9c88 d1				pop de 
9c89			 
9c89 c9				ret 
9c8a			 
9c8a				 
9c8a			 
9c8a			; whatever the current top os stack points to, we are now done with it so return memory to malloc 
9c8a			 
9c8a			FORTH_DSP_POP: macro 
9c8a				call macro_forth_dsp_pop 
9c8a				endm 
9c8a			 
9c8a			 
9c8a			; get the tos data type 
9c8a			 
9c8a			FORTH_DSP_TYPE:   macro 
9c8a			 
9c8a				;FORTH_DSP_VALUE 
9c8a				FORTH_DSP 
9c8a				 
9c8a				; hl points to value 
9c8a				; check type 
9c8a			 
9c8a				ld a,(hl) 
9c8a			 
9c8a				endm 
9c8a			 
9c8a			; load the tos value into hl 
9c8a			 
9c8a			 
9c8a			FORTH_DSP_VALUEHL:  macro 
9c8a				call macro_dsp_valuehl 
9c8a				endm 
9c8a			 
9c8a			 
9c8a			 
9c8a			macro_dsp_valuehl: 
9c8a				FORTH_DSP_VALUE 
9c8a cd 73 9c			call macro_forth_dsp_value 
9c8d				endm 
# End of macro FORTH_DSP_VALUE
9c8d			 
9c8d				;FORTH_ERR_TOS_NOTNUM 
9c8d			 
9c8d				;inc hl   ; skip type id 
9c8d			 
9c8d			;	push de 
9c8d			; 
9c8d			;	ld e, (hl) 
9c8d			;	inc hl 
9c8d			;	ld d, (hl) 
9c8d			;	ex de,hl  
9c8d			 
9c8d			;	pop de 
9c8d			 
9c8d				if DEBUG_FORTH_PUSH 
9c8d						DMARK "DVL" 
9c8d f5				push af  
9c8e 3a a2 9c			ld a, (.dmark)  
9c91 32 65 ee			ld (debug_mark),a  
9c94 3a a3 9c			ld a, (.dmark+1)  
9c97 32 66 ee			ld (debug_mark+1),a  
9c9a 3a a4 9c			ld a, (.dmark+2)  
9c9d 32 67 ee			ld (debug_mark+2),a  
9ca0 18 03			jr .pastdmark  
9ca2 ..			.dmark: db "DVL"  
9ca5 f1			.pastdmark: pop af  
9ca6			endm  
# End of macro DMARK
9ca6				CALLMONITOR 
9ca6 cd 6f ee			call debug_vector  
9ca9				endm  
# End of macro CALLMONITOR
9ca9				endif 
9ca9 c9				ret 
9caa			 
9caa			forth_apushstrhl:      
9caa				; push of string requires use of cli_origptr 
9caa				; bodge use 
9caa			 
9caa				; get current cli_origptr, save, update with temp pointer  
9caa ed 5b 38 ea		ld de, (cli_origptr) 
9cae 22 38 ea			ld (cli_origptr), hl 
9cb1 d5				push de 
9cb2 cd ee 9b			call forth_apush 
9cb5 d1				pop de 
9cb6 ed 53 38 ea		ld (cli_origptr), de 
9cba c9			        ret	 
9cbb			 
9cbb			 
9cbb			; increase loop stack pointer and save hl to it 
9cbb				 
9cbb			FORTH_LOOP_NEXT: macro 
9cbb				call macro_forth_loop_next 
9cbb				;nop 
9cbb				endm 
9cbb			 
9cbb			macro_forth_loop_next: 
9cbb				if DEBUG_FORTH_STACK_GUARD 
9cbb cd b9 dc				call check_stacks 
9cbe				endif 
9cbe e5				push hl 
9cbf d5				push de 
9cc0 eb				ex de,hl 
9cc1 2a ea e9			ld hl,(cli_loop_sp) 
9cc4 23				inc hl 
9cc5 23				inc hl 
9cc6					if DEBUG_FORTH_WORDS 
9cc6						DMARK "LNX" 
9cc6 f5				push af  
9cc7 3a db 9c			ld a, (.dmark)  
9cca 32 65 ee			ld (debug_mark),a  
9ccd 3a dc 9c			ld a, (.dmark+1)  
9cd0 32 66 ee			ld (debug_mark+1),a  
9cd3 3a dd 9c			ld a, (.dmark+2)  
9cd6 32 67 ee			ld (debug_mark+2),a  
9cd9 18 03			jr .pastdmark  
9cdb ..			.dmark: db "LNX"  
9cde f1			.pastdmark: pop af  
9cdf			endm  
# End of macro DMARK
9cdf						CALLMONITOR 
9cdf cd 6f ee			call debug_vector  
9ce2				endm  
# End of macro CALLMONITOR
9ce2					endif 
9ce2 22 ea e9			ld (cli_loop_sp),hl 
9ce5 73				ld (hl), e 
9ce6 23				inc hl 
9ce7 72				ld (hl), d 
9ce8 d1				pop de    ; been reversed so save a swap on restore 
9ce9 e1				pop hl 
9cea				if DEBUG_FORTH_STACK_GUARD 
9cea cd b9 dc				call check_stacks 
9ced				endif 
9ced c9				ret 
9cee			 
9cee			; get current ret stack pointer and save to hl  
9cee				 
9cee			FORTH_LOOP_TOS: macro 
9cee				call macro_forth_loop_tos 
9cee				endm 
9cee			 
9cee			macro_forth_loop_tos: 
9cee d5				push de 
9cef 2a ea e9			ld hl,(cli_loop_sp) 
9cf2 5e				ld e, (hl) 
9cf3 23				inc hl 
9cf4 56				ld d, (hl) 
9cf5 eb				ex de, hl 
9cf6 d1				pop de 
9cf7 c9				ret 
9cf8			 
9cf8			; pop loop stack pointer 
9cf8				 
9cf8			FORTH_LOOP_POP: macro 
9cf8				call macro_forth_loop_pop 
9cf8				endm 
9cf8			 
9cf8			 
9cf8			macro_forth_loop_pop: 
9cf8				if DEBUG_FORTH_STACK_GUARD 
9cf8					DMARK "LPP" 
9cf8 f5				push af  
9cf9 3a 0d 9d			ld a, (.dmark)  
9cfc 32 65 ee			ld (debug_mark),a  
9cff 3a 0e 9d			ld a, (.dmark+1)  
9d02 32 66 ee			ld (debug_mark+1),a  
9d05 3a 0f 9d			ld a, (.dmark+2)  
9d08 32 67 ee			ld (debug_mark+2),a  
9d0b 18 03			jr .pastdmark  
9d0d ..			.dmark: db "LPP"  
9d10 f1			.pastdmark: pop af  
9d11			endm  
# End of macro DMARK
9d11 cd b9 dc				call check_stacks 
9d14					FORTH_CHK_LOOP_UNDER 
9d14 e5				push hl 
9d15 d5				push de 
9d16 2a ea e9			ld hl,(cli_loop_sp) 
9d19 11 24 e9			ld de, cli_loop_stack 
9d1c cd 08 8d			call cmp16 
9d1f da d6 dd			jp c, fault_loop_under 
9d22 d1				pop de 
9d23 e1				pop hl 
9d24				endm 
# End of macro FORTH_CHK_LOOP_UNDER
9d24				endif 
9d24 e5				push hl 
9d25 2a ea e9			ld hl,(cli_loop_sp) 
9d28 2b				dec hl 
9d29 2b				dec hl 
9d2a 22 ea e9			ld (cli_loop_sp), hl 
9d2d				; TODO do stack underflow checks 
9d2d e1				pop hl 
9d2e				if DEBUG_FORTH_STACK_GUARD 
9d2e cd b9 dc				call check_stacks 
9d31					FORTH_CHK_LOOP_UNDER 
9d31 e5				push hl 
9d32 d5				push de 
9d33 2a ea e9			ld hl,(cli_loop_sp) 
9d36 11 24 e9			ld de, cli_loop_stack 
9d39 cd 08 8d			call cmp16 
9d3c da d6 dd			jp c, fault_loop_under 
9d3f d1				pop de 
9d40 e1				pop hl 
9d41				endm 
# End of macro FORTH_CHK_LOOP_UNDER
9d41				endif 
9d41 c9				ret 
9d42			 
9d42			macro_forth_dsp_pop: 
9d42			 
9d42 e5				push hl 
9d43			 
9d43				; release malloc data 
9d43			 
9d43				if DEBUG_FORTH_STACK_GUARD 
9d43 cd b9 dc				call check_stacks 
9d46					FORTH_CHK_DSP_UNDER 
9d46 e5				push hl 
9d47 d5				push de 
9d48 2a e8 e9			ld hl,(cli_data_sp) 
9d4b 11 22 e8			ld de, cli_data_stack 
9d4e cd 08 8d			call cmp16 
9d51 da ca dd			jp c, fault_dsp_under 
9d54 d1				pop de 
9d55 e1				pop hl 
9d56				endm 
# End of macro FORTH_CHK_DSP_UNDER
9d56				endif 
9d56				;ld hl,(cli_data_sp) 
9d56			if DEBUG_FORTH_DOT 
9d56				DMARK "DPP" 
9d56 f5				push af  
9d57 3a 6b 9d			ld a, (.dmark)  
9d5a 32 65 ee			ld (debug_mark),a  
9d5d 3a 6c 9d			ld a, (.dmark+1)  
9d60 32 66 ee			ld (debug_mark+1),a  
9d63 3a 6d 9d			ld a, (.dmark+2)  
9d66 32 67 ee			ld (debug_mark+2),a  
9d69 18 03			jr .pastdmark  
9d6b ..			.dmark: db "DPP"  
9d6e f1			.pastdmark: pop af  
9d6f			endm  
# End of macro DMARK
9d6f				CALLMONITOR 
9d6f cd 6f ee			call debug_vector  
9d72				endm  
# End of macro CALLMONITOR
9d72			endif	 
9d72			 
9d72			 
9d72			if FORTH_ENABLE_DSPPOPFREE 
9d72			 
9d72				FORTH_DSP 
9d72 cd 50 9c			call macro_forth_dsp 
9d75				endm 
# End of macro FORTH_DSP
9d75			 
9d75 7e				ld a, (hl) 
9d76 fe 01			cp DS_TYPE_STR 
9d78 20 23			jr nz, .skippopfree 
9d7a			 
9d7a				FORTH_DSP_VALUEHL 
9d7a cd 8a 9c			call macro_dsp_valuehl 
9d7d				endm 
# End of macro FORTH_DSP_VALUEHL
9d7d 00				nop 
9d7e			if DEBUG_FORTH_DOT 
9d7e				DMARK "DPf" 
9d7e f5				push af  
9d7f 3a 93 9d			ld a, (.dmark)  
9d82 32 65 ee			ld (debug_mark),a  
9d85 3a 94 9d			ld a, (.dmark+1)  
9d88 32 66 ee			ld (debug_mark+1),a  
9d8b 3a 95 9d			ld a, (.dmark+2)  
9d8e 32 67 ee			ld (debug_mark+2),a  
9d91 18 03			jr .pastdmark  
9d93 ..			.dmark: db "DPf"  
9d96 f1			.pastdmark: pop af  
9d97			endm  
# End of macro DMARK
9d97				CALLMONITOR 
9d97 cd 6f ee			call debug_vector  
9d9a				endm  
# End of macro CALLMONITOR
9d9a			endif	 
9d9a cd 8f 91			call free 
9d9d			.skippopfree: 
9d9d				 
9d9d			 
9d9d			endif 
9d9d			 
9d9d			if DEBUG_FORTH_DOT_KEY 
9d9d				DMARK "DP2" 
9d9d				CALLMONITOR 
9d9d			endif	 
9d9d			 
9d9d				; move pointer down 
9d9d			 
9d9d 2a e8 e9			ld hl,(cli_data_sp) 
9da0 2b				dec hl 
9da1 2b				dec hl 
9da2			; PARSEV5 
9da2 2b				dec hl 
9da3 22 e8 e9			ld (cli_data_sp), hl 
9da6			 
9da6				if DEBUG_FORTH_STACK_GUARD 
9da6 cd b9 dc				call check_stacks 
9da9					FORTH_CHK_DSP_UNDER 
9da9 e5				push hl 
9daa d5				push de 
9dab 2a e8 e9			ld hl,(cli_data_sp) 
9dae 11 22 e8			ld de, cli_data_stack 
9db1 cd 08 8d			call cmp16 
9db4 da ca dd			jp c, fault_dsp_under 
9db7 d1				pop de 
9db8 e1				pop hl 
9db9				endm 
# End of macro FORTH_CHK_DSP_UNDER
9db9				endif 
9db9			 
9db9 e1				pop hl 
9dba			 
9dba c9				ret 
9dbb			 
9dbb			getwordathl: 
9dbb				; hl points to an address 
9dbb				; load hl with the word at that address 
9dbb			 
9dbb d5				push de 
9dbc			 
9dbc 5e				ld e, (hl) 
9dbd 23				inc hl 
9dbe 56				ld d, (hl) 
9dbf eb				ex de, hl 
9dc0			 
9dc0 d1				pop de 
9dc1 c9				ret 
9dc2			 
9dc2			 
9dc2			; functions to manuplite stack pointers 
9dc2			 
9dc2			; generate fragment to set hl to be pointer to a stack item 
9dc2			 
9dc2			FORTH_DSP_PTR: macro  x 
9dc2				ld hl,(cli_data_sp) 
9dc2				ld de, x * 3 
9dc2				sbc hl, de 
9dc2				endm 
9dc2			 
9dc2			 
9dc2			 
9dc2			; copy point in hl to stack tmp storage slots 1-4 
9dc2			hltostack1: 
9dc2 11 b8 e2			ld de, os_stack_1  
9dc5 c3 f0 9d			jp hltostackmv 
9dc8			 
9dc8			hltostack2:  
9dc8 11 b5 e2			ld de, os_stack_2 
9dcb c3 f0 9d			jp hltostackmv 
9dce			 
9dce			hltostack3:  
9dce 11 b2 e2			ld de, os_stack_3 
9dd1 c3 f0 9d			jp hltostackmv 
9dd4			 
9dd4			hltostack4:  
9dd4 11 af e2			ld de, os_stack_4  
9dd7 c3 f0 9d			jp hltostackmv 
9dda			 
9dda			; copy to point in hl from stack tmp storage slots 1-4 
9dda			hlfromstack1: 
9dda 11 b8 e2			ld de, os_stack_1 
9ddd c3 ef 9d			jp hlfromsttackmv 
9de0			 
9de0			hlfromstack2:  
9de0 11 b5 e2			ld de, os_stack_2 
9de3 c3 ef 9d			jp hlfromsttackmv 
9de6			 
9de6			hlfromstack3:  
9de6 11 b2 e2			ld de, os_stack_3 
9de9 c3 ef 9d			jp hlfromsttackmv 
9dec			 
9dec			hlfromstack4:  
9dec 11 af e2			ld de, os_stack_4 
9def			 
9def			hlfromsttackmv: 
9def eb				ex de, hl 
9df0			 
9df0			hltostackmv: 
9df0			 
9df0				; do stack move 
9df0 c5				push bc 
9df1 01 03 00			ld bc, 3 
9df4 ed b0			ldir  
9df6 c1				pop bc	 
9df7 c9				ret 
9df8			 
9df8			; eof 
9df8			 
# End of file forth_stackopsv5.asm
9df8			endif 
9df8			loadwordinhl:	 
9df8			 
9df8 d5				push de 
9df9			 
9df9 5e				ld e, (hl) 
9dfa 23				inc hl 
9dfb 56				ld d, (hl) 
9dfc eb				ex de,hl  
9dfd			 
9dfd d1				pop de 
9dfe			 
9dfe c9				ret 
9dff			 
9dff			user_word_eol:  
9dff				; hl contains the pointer to where to create a linked list item from the end 
9dff				; of the user dict to continue on at the system word dict 
9dff				 
9dff				; poke the stub of the word list linked list to repoint to rom words 
9dff			 
9dff				; stub format 
9dff				; db   word id 
9dff				; dw    link to next word 
9dff			        ; db char length of token 
9dff				; db string + 0 term 
9dff				; db exec code....  
9dff			 
9dff 3e 00			ld a, WORD_SYS_ROOT     ; root word 
9e01 77				ld (hl), a		; word id 
9e02 23				inc hl 
9e03			 
9e03 11 ba 9f			ld de, sysdict 
9e06 73				ld (hl), e		; next word link ie system dict 
9e07 23				inc hl 
9e08 72				ld (hl), d		; next word link ie system dict 
9e09 23				inc hl	 
9e0a			 
9e0a			;	ld (hl), sysdict		; next word link ie system dict 
9e0a			;	inc hl 
9e0a			;	inc hl 
9e0a			 
9e0a			;	inc hl 
9e0a			;	inc hl 
9e0a			 
9e0a 3e 02			ld a, 2			; word length is 0 
9e0c 77				ld (hl), a	 
9e0d 23				inc hl 
9e0e			 
9e0e 3e 7e			ld a, '~'			; word length is 0 
9e10 77				ld (hl), a	 
9e11 23				inc hl 
9e12 3e 00			ld a, 0			; save empty word 
9e14 77				ld (hl), a 
9e15			 
9e15 c9				ret 
9e16			 
9e16				 
9e16			 
9e16			forthexec_cleanup: 
9e16				FORTH_RSP_POP 
9e16 cd 4d 9a			call macro_forth_rsp_pop 
9e19				endm 
# End of macro FORTH_RSP_POP
9e19 c9				ret 
9e1a			 
9e1a			forth_call_hl: 
9e1a				; taking hl 
9e1a e5				push hl 
9e1b c9				ret 
9e1c			 
9e1c			; this is called to reset Forth system but keep existing uwords etc 
9e1c			 
9e1c			forth_warmstart: 
9e1c				; setup stack over/under flow checks 
9e1c				if DEBUG_FORTH_STACK_GUARD 
9e1c cd 9f dc				call chk_stk_init 
9e1f				endif 
9e1f			 
9e1f				; init stack pointers  - * these stacks go upwards *  
9e1f 21 a6 e9			ld hl, cli_ret_stack 
9e22 22 ec e9			ld (cli_ret_sp), hl	 
9e25				; set bottom of stack 
9e25 3e 00			ld a,0 
9e27 77				ld (hl),a 
9e28 23				inc hl 
9e29 77				ld (hl),a 
9e2a			 
9e2a 21 22 e8			ld hl, cli_data_stack 
9e2d 22 e8 e9			ld (cli_data_sp), hl	 
9e30				; set bottom of stack 
9e30 3e 00			ld a,0 
9e32 77				ld (hl),a 
9e33 23				inc hl 
9e34 77				ld (hl),a 
9e35			 
9e35 21 24 e9			ld hl, cli_loop_stack 
9e38 22 ea e9			ld (cli_loop_sp), hl	 
9e3b				; set bottom of stack 
9e3b 3e 00			ld a,0 
9e3d 77				ld (hl),a 
9e3e 23				inc hl 
9e3f 77				ld (hl),a 
9e40			 
9e40				; init extent of current open file 
9e40			 
9e40 3e 00			ld a, 0 
9e42 32 64 ea			ld (store_openext), a 
9e45			 
9e45 c9				ret 
9e46			 
9e46			 
9e46			 
9e46			; Cold Start - this is called to setup the whole Forth system 
9e46			 
9e46			forth_init: 
9e46			 
9e46				; setup stack over/under flow checks 
9e46			 
9e46			;	if DEBUG_FORTH_STACK_GUARD 
9e46			;		call chk_stk_init 
9e46			;	endif 
9e46			 
9e46				; enable auto display updates (slow.....) 
9e46			 
9e46 3e 01			ld a, 1 
9e48 32 36 ea			ld (cli_autodisplay), a 
9e4b			 
9e4b				; if storage is in use disable long reads for now 
9e4b 3e 00			ld a, 0 
9e4d 32 6f ea			ld (store_longread), a 
9e50			 
9e50			 
9e50				; show start up screen 
9e50			 
9e50 cd bd 8a			call clear_display 
9e53			 
9e53 3e 00			ld a,0 
9e55 32 58 ea			ld (f_cursor_ptr), a 
9e58			 
9e58				; set start of word list in start of ram - for use when creating user words 
9e58			 
9e58 21 5c e0			ld hl, baseram 
9e5b 22 b8 e5			ld (os_last_new_uword), hl 
9e5e cd ff 9d			call user_word_eol 
9e61				 
9e61			;		call display_data_sp 
9e61			;		call next_page_prompt 
9e61			 
9e61			 
9e61			 
9e61			 
9e61 c9				ret 
9e62			 
9e62 .. 00		.bootforth: db " Forth Kernel Init ",0 
9e76			 
9e76			; TODO push to stack 
9e76			 
9e76			;  
9e76			 
9e76			if FORTH_PARSEV2 
9e76			 
9e76			 
9e76				include "forth_parserv2.asm" 
9e76			 
9e76			endif 
9e76			 
9e76			 
9e76			; parse cli version 1 
9e76			 
9e76			if FORTH_PARSEV1 
9e76			 
9e76			 
9e76			 
9e76			      include "forth_parserv1.asm" 
9e76			endif 
9e76				 
9e76			if FORTH_PARSEV3 
9e76			      include "forth_parserv3.asm" 
9e76				include "forth_wordsv3.asm" 
9e76			endif 
9e76			 
9e76			if FORTH_PARSEV4 
9e76			      include "forth_parserv4.asm" 
9e76				include "forth_wordsv4.asm" 
9e76			endif 
9e76			 
9e76			if FORTH_PARSEV5 
9e76			      include "forth_parserv5.asm" 
9e76				include "forth_wordsv4.asm" 
9e76			endif 
9e76			 
9e76			if FORTH_PARSEV6 
9e76			      include "forth_parserv6.asm" 
9e76			 
9e76			 
9e76			; A better parser without using malloc and string copies all over the place.  
9e76			; Exec in situ should be faster 
9e76			 
9e76			;WORD_SYS_LOWPRIM: equ 4    ; Offset for low level prim words opcode 
9e76			;WORD_SYS_BRANCH: equ 10    ; Offset for branching and loop words opcode 
9e76			WORD_SYS_UWORD: equ 1   ; Opcode for all user words 
9e76			WORD_SYS_DELETED: equ 3 ; Op code for a deleted UWORD 
9e76			WORD_SYS_ROOT: equ 0   ; Opcode for all user words 
9e76			WORD_SYS_END: equ 0   ; Opcode for all user words 
9e76			WORD_SYS_CORE: equ 20    ; Offset for dict core words opcode 
9e76			WORD_FLAG_CODE: equ 0	   ; opcodeflag to exec pure code for this word 
9e76			WORD_FLAG_JP: equ 1	   ; opcodeflag to list zero term jump table words 
9e76			 
9e76			; Core word preamble macro 
9e76			 
9e76			CWHEAD:   macro nxtword opcode lit len opflags 
9e76				db WORD_SYS_CORE+opcode             
9e76				; internal op code number 
9e76				dw nxtword            
9e76				; link to next dict word block 
9e76				db len + 1 
9e76				; literal length of dict word inc zero term 
9e76				db lit,0              
9e76				; literal dict word 
9e76			        ; TODO db opflags        
9e76				endm 
9e76			 
9e76			 
9e76			NEXTW: macro  
9e76				jp macro_next 
9e76				endm 
9e76			 
9e76			macro_next: 
9e76			if DEBUG_FORTH_PARSE_EXEC 
9e76				DMARK "NXT" 
9e76				CALLMONITOR 
9e76			endif	 
9e76			;	inc hl  ; skip token null term  
9e76 ed 4b 3a ea		ld bc,(cli_ptr)   ; move to next token to parse in the input stream 
9e7a ed 5b 38 ea		ld de,(cli_origptr)   ; move to next token to parse in the input stream 
9e7e 2a bc e5			ld hl,(os_tok_ptr)   ; move to next token to parse in the input stream 
9e81			if DEBUG_FORTH_PARSE_EXEC 
9e81				DMARK "}AA" 
9e81				CALLMONITOR 
9e81			endif	 
9e81 c3 70 9f			jp execnext 
9e84				;jp exec1 
9e84			       
9e84			 
9e84			 
9e84			; Another go at the parser to compile  
9e84			 
9e84			 
9e84			; TODO rework parser to change all of the string words to byte tokens 
9e84			; TODO do a search for  
9e84			 
9e84			; TODO first run normal parser to zero term sections 
9e84			; TODO for each word do a token look up to get the op code 
9e84			; TODO need some means to flag to the exec that this is a byte code form    
9e84			 
9e84			 
9e84			forthcompile: 
9e84			 
9e84			; 
9e84			; line parse: 
9e84			;       parse raw input buffer 
9e84			;       tokenise the words 
9e84			;       malloc new copy (for looping etc) 
9e84			;       copy to malloc + current pc in line to start of string and add line term 
9e84			;       save on new rsp 
9e84			; 
9e84			 
9e84			; hl to point to the line to tokenise 
9e84			 
9e84			;	push hl 
9e84 22 bc e5			ld (os_tok_ptr), hl  ; save ptr to string 
9e87			 
9e87			;	ld a,0		; string term on input 
9e87			;	call strlent 
9e87			 
9e87			;	ld (os_tok_len), hl	 ; save string length 
9e87			 
9e87			;if DEBUG_FORTH_TOK 
9e87			;	ex de,hl		 
9e87			;endif 
9e87			 
9e87			;	pop hl 		; get back string pointer 
9e87			 
9e87			if DEBUG_FORTH_TOK 
9e87						DMARK "TOc" 
9e87				CALLMONITOR 
9e87			endif 
9e87 7e			.cptoken2:    ld a,(hl) 
9e88 23				inc hl 
9e89 fe 7f			cp FORTH_END_BUFFER 
9e8b 28 29			jr z, .cptokendone2 
9e8d fe 00			cp 0 
9e8f 28 25			jr z, .cptokendone2 
9e91 fe 22			cp '"' 
9e93 28 0b			jr z, .cptokenstr2     ; will want to skip until end of string delim 
9e95 fe 20			cp ' ' 
9e97 20 ee			jr nz,  .cptoken2 
9e99			 
9e99			; TODO consume comments held between ( and ) 
9e99			 
9e99				; we have a space so change to zero term for dict match later 
9e99 2b				dec hl 
9e9a 3e 00			ld a,0 
9e9c 77				ld (hl), a 
9e9d 23				inc hl 
9e9e 18 e7			jr .cptoken2 
9ea0				 
9ea0			 
9ea0			.cptokenstr2: 
9ea0				; skip all white space until either eol (because forgot to term) or end double quote 
9ea0			        ;   if double quotes spotted ensure to skip any space sep until matched doble quote 
9ea0				;inc hl ; skip current double quote 
9ea0 7e				ld a,(hl) 
9ea1 23				inc hl 
9ea2 fe 22			cp '"' 
9ea4 28 e1			jr z, .cptoken2 
9ea6 fe 7f			cp FORTH_END_BUFFER 
9ea8 28 0c			jr z, .cptokendone2 
9eaa fe 00			cp 0 
9eac 28 08			jr z, .cptokendone2 
9eae fe 20			cp ' ' 
9eb0 28 02			jr z, .cptmp2 
9eb2 18 ec			jr .cptokenstr2 
9eb4			 
9eb4			.cptmp2:	; we have a space so change to zero term for dict match later 
9eb4				;dec hl 
9eb4				;ld a,"-"	; TODO remove this when working 
9eb4				;ld (hl), a 
9eb4				;inc hl 
9eb4 18 ea			jr .cptokenstr2 
9eb6			 
9eb6			.cptokendone2: 
9eb6				;inc hl 
9eb6 3e 7f			ld a, FORTH_END_BUFFER 
9eb8 77				ld (hl),a 
9eb9			;	inc hl 
9eb9			;	ld a, '!' 
9eb9			;	ld (hl),a 
9eb9			 
9eb9 2a bc e5			ld hl,(os_tok_ptr) 
9ebc			         
9ebc			if DEBUG_FORTH_TOK 
9ebc						DMARK "Tc1" 
9ebc				CALLMONITOR 
9ebc			endif 
9ebc			 
9ebc				; push exec string to top of return stack 
9ebc				FORTH_RSP_NEXT 
9ebc cd 2c 9a			call macro_forth_rsp_next 
9ebf				endm 
# End of macro FORTH_RSP_NEXT
9ebf c9				ret 
9ec0			 
9ec0			; Another go at the parser need to simplify the process 
9ec0			 
9ec0			forthparse: 
9ec0			 
9ec0			; 
9ec0			; line parse: 
9ec0			;       parse raw input buffer 
9ec0			;       tokenise the words 
9ec0			;       malloc new copy (for looping etc) 
9ec0			;       copy to malloc + current pc in line to start of string and add line term 
9ec0			;       save on new rsp 
9ec0			; 
9ec0			 
9ec0			; hl to point to the line to tokenise 
9ec0			 
9ec0			;	push hl 
9ec0 22 bc e5			ld (os_tok_ptr), hl  ; save ptr to string 
9ec3			 
9ec3			;	ld a,0		; string term on input 
9ec3			;	call strlent 
9ec3			 
9ec3			;	ld (os_tok_len), hl	 ; save string length 
9ec3			 
9ec3			;if DEBUG_FORTH_TOK 
9ec3			;	ex de,hl		 
9ec3			;endif 
9ec3			 
9ec3			;	pop hl 		; get back string pointer 
9ec3			 
9ec3			if DEBUG_FORTH_TOK 
9ec3						DMARK "TOK" 
9ec3				CALLMONITOR 
9ec3			endif 
9ec3 7e			.ptoken2:    ld a,(hl) 
9ec4 23				inc hl 
9ec5 fe 7f			cp FORTH_END_BUFFER 
9ec7 28 29			jr z, .ptokendone2 
9ec9 fe 00			cp 0 
9ecb 28 25			jr z, .ptokendone2 
9ecd fe 22			cp '"' 
9ecf 28 0b			jr z, .ptokenstr2     ; will want to skip until end of string delim 
9ed1 fe 20			cp ' ' 
9ed3 20 ee			jr nz,  .ptoken2 
9ed5			 
9ed5			; TODO consume comments held between ( and ) 
9ed5			 
9ed5				; we have a space so change to zero term for dict match later 
9ed5 2b				dec hl 
9ed6 3e 00			ld a,0 
9ed8 77				ld (hl), a 
9ed9 23				inc hl 
9eda 18 e7			jr .ptoken2 
9edc				 
9edc			 
9edc			.ptokenstr2: 
9edc				; skip all white space until either eol (because forgot to term) or end double quote 
9edc			        ;   if double quotes spotted ensure to skip any space sep until matched doble quote 
9edc				;inc hl ; skip current double quote 
9edc 7e				ld a,(hl) 
9edd 23				inc hl 
9ede fe 22			cp '"' 
9ee0 28 e1			jr z, .ptoken2 
9ee2 fe 7f			cp FORTH_END_BUFFER 
9ee4 28 0c			jr z, .ptokendone2 
9ee6 fe 00			cp 0 
9ee8 28 08			jr z, .ptokendone2 
9eea fe 20			cp ' ' 
9eec 28 02			jr z, .ptmp2 
9eee 18 ec			jr .ptokenstr2 
9ef0			 
9ef0			.ptmp2:	; we have a space so change to zero term for dict match later 
9ef0				;dec hl 
9ef0				;ld a,"-"	; TODO remove this when working 
9ef0				;ld (hl), a 
9ef0				;inc hl 
9ef0 18 ea			jr .ptokenstr2 
9ef2			 
9ef2			.ptokendone2: 
9ef2				;inc hl 
9ef2 3e 7f			ld a, FORTH_END_BUFFER 
9ef4 77				ld (hl),a 
9ef5			;	inc hl 
9ef5			;	ld a, '!' 
9ef5			;	ld (hl),a 
9ef5			 
9ef5 2a bc e5			ld hl,(os_tok_ptr) 
9ef8			         
9ef8			if DEBUG_FORTH_TOK 
9ef8						DMARK "TK1" 
9ef8				CALLMONITOR 
9ef8			endif 
9ef8			 
9ef8				; push exec string to top of return stack 
9ef8				FORTH_RSP_NEXT 
9ef8 cd 2c 9a			call macro_forth_rsp_next 
9efb				endm 
# End of macro FORTH_RSP_NEXT
9efb c9				ret 
9efc			 
9efc			; 
9efc			;	; malloc size + buffer pointer + if is loop flag 
9efc			;	ld hl,(os_tok_len) 		 ; get string length 
9efc			; 
9efc			;	ld a,l 
9efc			; 
9efc			;	cp 0			; we dont want to use a null string 
9efc			;	ret z 
9efc			; 
9efc			;;	add 3    ; prefix malloc with buffer for current word ptr 
9efc			; 
9efc			;	add 5     ; TODO when certain not over writing memory remove 
9efc			; 
9efc			;		 
9efc			; 
9efc			;if DEBUG_FORTH_TOK 
9efc			;			DMARK "TKE" 
9efc			;	CALLMONITOR 
9efc			;endif 
9efc			; 
9efc			;	ld l,a 
9efc			;	ld h,0 
9efc			;;	push hl   ; save required space for the copy later 
9efc			;	call malloc 
9efc			;if DEBUG_FORTH_TOK 
9efc			;			DMARK "TKM" 
9efc			;	CALLMONITOR 
9efc			;endif 
9efc			;	if DEBUG_FORTH_MALLOC_GUARD 
9efc			;		push af 
9efc			;		call ishlzero 
9efc			;;		ld a, l 
9efc			;;		add h 
9efc			;;		cp 0 
9efc			;		pop af 
9efc			;		 
9efc			;		call z,malloc_error 
9efc			;	endif 
9efc			;	ld (os_tok_malloc), hl	 ; save malloc ptr 
9efc			; 
9efc			; 
9efc			;if DEBUG_FORTH_TOK 
9efc			;			DMARK "TKR" 
9efc			;	CALLMONITOR 
9efc			;endif 
9efc			; 
9efc			;	FORTH_RSP_NEXT 
9efc			; 
9efc			;	;inc hl	 ; go past current buffer pointer 
9efc			;	;inc hl 
9efc			;	;inc hl   ; and past if loop flag 
9efc			;		; TODO Need to set flag  
9efc			; 
9efc			;	 
9efc			;	 
9efc			;	ex de,hl	; malloc is dest 
9efc			;	ld hl, (os_tok_len) 
9efc			;;	pop bc 
9efc			;	ld c, l                
9efc			;	ld b,0 
9efc			;	ld hl, (os_tok_ptr) 
9efc			; 
9efc			;if DEBUG_FORTH_TOK 
9efc			;			DMARK "TKT" 
9efc			;	CALLMONITOR 
9efc			;endif 
9efc			; 
9efc			;	; do str cpy 
9efc			; 
9efc			;	ldir      ; copy byte in hl to de 
9efc			; 
9efc			;	; set end of buffer to high bit on zero term and use that for end of buffer scan 
9efc			; 
9efc			;if DEBUG_FORTH_TOK 
9efc			; 
9efc			;			DMARK "TKY" 
9efc			;	CALLMONITOR 
9efc			;endif 
9efc			;	;ld a,0 
9efc			;	;ld a,FORTH_END_BUFFER 
9efc			;	ex de, hl 
9efc			;	;dec hl			 ; go back over the space delim at the end of word 
9efc			;	;ld (hl),a 
9efc			;	;inc hl                    ;  TODO double check this. Going past the end of string to make sure end of processing buffer is marked 
9efc			;	ld a,FORTH_END_BUFFER 
9efc			;	ld (hl),a 
9efc			;	inc hl 
9efc			;	ld a,FORTH_END_BUFFER 
9efc			;	ld (hl),a 
9efc			; 
9efc			;	; init the malloc area data 
9efc			;	; set pc for in current area 
9efc			;	;ld hl, (os_tok_malloc) 
9efc			;	;inc hl 
9efc			;	;inc hl 
9efc			;	;inc hl 
9efc			;	;ex de,hl 
9efc			;	;ld hl, (os_tok_malloc) 
9efc			;	;ld (hl),e 
9efc			;	;inc hl 
9efc			;	;ld (hl),d 
9efc			; 
9efc			; 
9efc			;	ld hl,(os_tok_malloc) 
9efc			;if DEBUG_FORTH_PARSE_KEY 
9efc			;			DMARK "TKU" 
9efc			;	CALLMONITOR 
9efc			;endif 
9efc			; 
9efc			;	ret 
9efc			 
9efc			forthexec: 
9efc			 
9efc			; line exec: 
9efc			; forth parser 
9efc			 
9efc			; 
9efc			;       get current exec line on rsp 
9efc			 
9efc				FORTH_RSP_TOS 
9efc cd 43 9a			call macro_forth_rsp_tos 
9eff				endm 
# End of macro FORTH_RSP_TOS
9eff			 
9eff			;       restore current pc - hl points to malloc of data 
9eff			 
9eff				;ld e, (hl) 
9eff				;inc hl 
9eff				;ld d, (hl) 
9eff				;ex de,hl 
9eff			 
9eff			 
9eff			exec1: 
9eff 22 bc e5			ld (os_tok_ptr), hl                 ; here move out of repeated saving in this tight loop 
9f02			 
9f02				; copy our PC to working vars  
9f02 22 3a ea			ld (cli_ptr), hl                    ; here 
9f05 22 38 ea			ld (cli_origptr), hl                ; here 
9f08			 
9f08 7e				ld a,(hl)                           ; here make hl be the ram ptr 
9f09 fe 7f			cp FORTH_END_BUFFER 
9f0b c8				ret z 
9f0c			 
9f0c				; skip any nulls 
9f0c			 
9f0c fe 00			cp 0 
9f0e 20 03			jr nz, .execword 
9f10 23				inc hl 
9f11 18 ec			jr exec1 
9f13			 
9f13			 
9f13			.execword: 
9f13			 
9f13			 
9f13			 
9f13			if DEBUG_FORTH_PARSE_EXEC 
9f13						DMARK "KYQ" 
9f13				CALLMONITOR 
9f13			endif 
9f13			;       while at start of word: 
9f13			; get start of dict (in user area first) 
9f13			 
9f13 21 5c e0		ld hl, baseram 
9f16			;ld hl, sysdict 
9f16 22 3c ea		ld (cli_nextword),hl                            ; here do we need to do this? 
9f19			;           match word at pc 
9f19			;           exec word 
9f19			;           or push to dsp 
9f19			;           forward to next token 
9f19			;           if line term pop rsp and exit 
9f19			;        
9f19			 
9f19			if DEBUG_FORTH_PARSE_EXEC 
9f19						DMARK "KYq" 
9f19				CALLMONITOR 
9f19			endif 
9f19			 
9f19			; 
9f19			; word comp 
9f19			;    get compiled byte and save it (need to decide if code is compiled or not for comparison) 
9f19			;    if byte is 0 then end parsing and report failed lookup (or could be something to add to stack etc) 
9f19			;    move to start of word  
9f19			;    compare word to cli_token 
9f19			 
9f19			.execpnword:	; HL at start of a word in the dictionary to check 
9f19			 
9f19 2a 3c ea			ld hl,(cli_nextword)                  ; here remove the need to store???? 
9f1c			 
9f1c cd b3 9f			call forth_tok_next 
9f1f			; tok next end here 
9f1f 22 3c ea			ld (cli_nextword), hl     ; save for next check if no match on this word 
9f22 eb				ex de, hl 
9f23			 
9f23			 
9f23				; save the pointer of the current token - 1 to check against 
9f23				 
9f23 22 40 ea			ld (cli_token), hl   
9f26				; TODO maybe remove below save if no debug 
9f26				; save token string ptr for any debug later 
9f26 23				inc hl  
9f27 22 42 ea			ld (cli_origtoken), hl 
9f2a 2b				dec hl 
9f2b				; save pointer to the start of the next dictionay word 
9f2b 7e				ld a,(hl)   ; get string length 
9f2c 47				ld b,a 
9f2d			.execpnwordinc:  
9f2d 23				inc hl 
9f2e 10 fd			djnz .execpnwordinc 
9f30 22 3e ea			ld (cli_execword), hl      ; save start of this words code 
9f33			 
9f33				; now check the word token against the string being parsed 
9f33			 
9f33 2a 40 ea			ld hl,(cli_token) 
9f36 23				inc hl     ; skip string length (use zero term instead to end) 
9f37				;ld (cli_token), hl 
9f37			 
9f37			.execpnchar:    ; compare char between token and string to parse 
9f37			 
9f37			 
9f37				;ld hl, (cli_token)     ; the dict word  
9f37 ed 5b 3a ea		ld de, (cli_ptr)     ; cli to parse 
9f3b			 
9f3b			 
9f3b			.execpncharl:    ; compare char between token and string to parse (loop) 
9f3b			 
9f3b 1a				ld a,(de) 
9f3c cd 47 90			call toUpper 		; make sure the input string matches case 
9f3f be				cp (hl) 
9f40			 
9f40 c2 59 9f			jp nz, .execpnskipword	 ; no match so move to next word 
9f43				 
9f43			;    if same 
9f43			;       scan for string terms 0 for token and 32 for input 
9f43 46				ld b,(hl) 
9f44 80				add b			 
9f45 23				inc hl 
9f46 13				inc de 
9f47 fe 00			cp 0			 ; add both chars together, if 32 then other must be 0 so at end of string we are parsing? 
9f49							; TODO need to make sure last word in zero term string is accounted for 
9f49 20 f0			jr nz, .execpncharl 		 ; not at end of strings yet 
9f4b			 
9f4b			 
9f4b				; at end of both strings so both are exact match 
9f4b			 
9f4b			;       skip ptr for next word 
9f4b			 
9f4b 2a 3a ea			ld hl,(cli_ptr) 	; at input string term 
9f4e 23				inc hl			 ; at next char 
9f4f 22 3a ea			ld (cli_ptr), hl     ; save for next round of the parser 
9f52 22 38 ea			ld (cli_origptr), hl     ; save for any restart of current string ie a number or string to push to data stack 
9f55				 
9f55				 
9f55			 
9f55			 
9f55			 
9f55			;       exec code block 
9f55			if DEBUG_FORTH_JP 
9f55				call clear_display 
9f55				call update_display 
9f55				call delay1s 
9f55				ld hl, (cli_execword)     ; save for next check if no match on this word 
9f55				ld a,h 
9f55				ld hl, os_word_scratch 
9f55				call hexout 
9f55				ld hl, (cli_execword)     ; save for next check if no match on this word 
9f55				ld a,l 
9f55				ld hl, os_word_scratch+2 
9f55				call hexout 
9f55				ld hl, os_word_scratch+4 
9f55				ld a,0 
9f55				ld (hl),a 
9f55				ld de,os_word_scratch 
9f55				call str_at_display 
9f55					ld a, display_row_2 
9f55					call str_at_display 
9f55				ld de, (cli_origtoken) 
9f55				ld a, display_row_1+10 
9f55					call str_at_display 
9f55			 
9f55				ld a,display_row_1 
9f55				ld de, .foundword 
9f55				ld a, display_row_3 
9f55				call str_at_display 
9f55				call update_display 
9f55				call delay1s 
9f55				call delay1s 
9f55				call delay1s 
9f55			endif 
9f55			 
9f55			if DEBUG_FORTH_PARSE_EXEC 
9f55						DMARK "KYj" 
9f55			endif 
9f55				; TODO save the word pointer in this exec 
9f55			 
9f55 2a 3e ea			ld hl,(cli_execword) 
9f58 e9				jp (hl) 
9f59			 
9f59			 
9f59			;    if not same 
9f59			;	scan for zero term 
9f59			;	get ptr for next word 
9f59			;	goto word comp 
9f59			 
9f59			.execpnskipword:	; get pointer to next word 
9f59 2a 3c ea			ld hl,(cli_nextword) 
9f5c			 
9f5c 7e				ld a,(hl) 
9f5d fe 00			cp WORD_SYS_END 
9f5f			;	cp 0 
9f5f 28 09			jr z, .execendofdict			 ; at end of words 
9f61			 
9f61			if DEBUG_FORTH_PARSE_EXEC 
9f61						DMARK "KY4" 
9f61			endif 
9f61			if DEBUG_FORTH_PARSE_EXEC 
9f61			 
9f61				; see if disabled 
9f61			 
9f61			;	ld a, (os_view_disable) 
9f61			;	cp '*' 
9f61				ld a,(debug_vector) 
9f61				cp $c9   ; RET 
9f61				jr z, .noskip 
9f61			 
9f61			 
9f61				ld de, .nowordfound 
9f61				ld a, display_row_3 
9f61				call str_at_display 
9f61				call update_display 
9f61				ld a, 100 
9f61				call aDelayInMS 
9f61				 
9f61				if DEBUG_FORTH_PARSE_EXEC_SLOW 
9f61					call delay250ms 
9f61				endif 
9f61			.noskip:  
9f61			 
9f61			endif	 
9f61			 
9f61 2a 38 ea			ld hl,(cli_origptr) 
9f64 22 3a ea			ld (cli_ptr),hl 
9f67			 
9f67			if DEBUG_FORTH_PARSE_EXEC 
9f67						DMARK "KY5" 
9f67			endif 
9f67 c3 19 9f			jp .execpnword			; else go to next word 
9f6a			 
9f6a			.execendofdict:  
9f6a			 
9f6a			if DEBUG_FORTH_PARSE_EXEC 
9f6a						DMARK "KYe" 
9f6a			endif 
9f6a			if DEBUG_FORTH_PARSE_EXEC 
9f6a				; see if disabled 
9f6a			 
9f6a			;	ld a, (os_view_disable) 
9f6a			;	cp '*' 
9f6a				ld a,(debug_vector) 
9f6a				cp $c9   ; ret 
9f6a				jr z, .ispskip 
9f6a			 
9f6a				call clear_display 
9f6a				call update_display 
9f6a				call delay1s 
9f6a				ld de, (cli_origptr) 
9f6a				ld a, display_row_1 
9f6a				call str_at_display 
9f6a				 
9f6a				ld de, .enddict 
9f6a				ld a, display_row_3 
9f6a				call str_at_display 
9f6a				call update_display 
9f6a				ld a, 100 
9f6a				call aDelayInMS 
9f6a				if DEBUG_FORTH_PARSE_EXEC_SLOW 
9f6a				call delay1s 
9f6a				call delay1s 
9f6a				call delay1s 
9f6a				endif 
9f6a			.ispskip:  
9f6a				 
9f6a			endif	 
9f6a			 
9f6a			 
9f6a			 
9f6a				; if the word is not a keyword then must be a literal so push it to stack 
9f6a			 
9f6a			; push token to stack to end of word 
9f6a			 
9f6a				STACKFRAME ON $1efe $2f9f 
9f6a				if DEBUG_STACK_IMB 
9f6a					if ON 
9f6a						exx 
9f6a						ld de, $1efe 
9f6a						ld a, d 
9f6a						ld hl, curframe 
9f6a						call hexout 
9f6a						ld a, e 
9f6a						ld hl, curframe+2 
9f6a						call hexout 
9f6a						ld hl, $1efe 
9f6a						push hl 
9f6a						ld hl, $2f9f 
9f6a						push hl 
9f6a						exx 
9f6a					endif 
9f6a				endif 
9f6a			endm 
# End of macro STACKFRAME
9f6a			 
9f6a 2a bc e5		ld hl,(os_tok_ptr) 
9f6d cd ee 9b		call forth_apush 
9f70			 
9f70				STACKFRAMECHK ON $1efe $2f9f 
9f70				if DEBUG_STACK_IMB 
9f70					if ON 
9f70						exx 
9f70						ld hl, $2f9f 
9f70						pop de   ; $2f9f 
9f70						call cmp16 
9f70						jr nz, .spnosame 
9f70						ld hl, $1efe 
9f70						pop de   ; $1efe 
9f70						call cmp16 
9f70						jr z, .spfrsame 
9f70						.spnosame: call showsperror 
9f70						.spfrsame: nop 
9f70						exx 
9f70					endif 
9f70				endif 
9f70			endm 
# End of macro STACKFRAMECHK
9f70			 
9f70			execnext: 
9f70			 
9f70			if DEBUG_FORTH_PARSE_EXEC 
9f70						DMARK "KY>" 
9f70			endif 
9f70			; move past token to next word 
9f70			 
9f70 2a bc e5		ld hl, (os_tok_ptr) 
9f73 3e 00		ld a, 0 
9f75 01 ff 00		ld bc, 255     ; input buffer size 
9f78 ed b1		cpir 
9f7a			 
9f7a			if DEBUG_FORTH_PARSE_EXEC 
9f7a						DMARK "KY!" 
9f7a				CALLMONITOR 
9f7a			endif	 
9f7a			; TODO this might place hl on the null, so will need to forward on??? 
9f7a			;inc hl   ; see if this gets onto the next item 
9f7a			 
9f7a			 
9f7a			; TODO pass a pointer to the buffer to push 
9f7a			; TODO call function to push 
9f7a			 
9f7a			; look for end of input 
9f7a			 
9f7a			;inc hl 
9f7a			;ld a,(hl) 
9f7a			;cp FORTH_END_BUFFER 
9f7a			;ret z 
9f7a			 
9f7a			 
9f7a c3 ff 9e		jp exec1 
9f7d			 
9f7d			 
9f7d			 
9f7d			 
9f7d			 
9f7d			 
9f7d			 
9f7d			 
9f7d			 
9f7d			findnexttok: 
9f7d			 
9f7d				; hl is pointer to move 
9f7d				; de is the token to locate 
9f7d			 
9f7d					if DEBUG_FORTH 
9f7d						DMARK "NTK" 
9f7d						CALLMONITOR 
9f7d					endif 
9f7d d5				push de 
9f7e			 
9f7e			.fnt1:	 
9f7e				; find first char of token to locate 
9f7e			 
9f7e 1a				ld a, (de) 
9f7f 4f				ld c,a 
9f80 7e				ld a,(hl) 
9f81 cd 47 90			call toUpper 
9f84					if DEBUG_FORTH 
9f84						DMARK "NT1" 
9f84						CALLMONITOR 
9f84					endif 
9f84 b9				cp c 
9f85			 
9f85 28 03			jr z, .fnt2cmpmorefirst	 
9f87			 
9f87				; first char not found move to next char 
9f87			 
9f87 23				inc hl 
9f88 18 f4			jr .fnt1 
9f8a			 
9f8a			.fnt2cmpmorefirst:	 
9f8a				; first char of token found.  
9f8a			 
9f8a e5				push hl     ; save start of token just in case it is the right one 
9f8b d9				exx 
9f8c e1				pop hl        ; save it to hl' 
9f8d d9				exx 
9f8e			 
9f8e			 
9f8e			.fnt2cmpmore:	 
9f8e				; compare the rest 
9f8e				 
9f8e 23				inc hl 
9f8f 13				inc de 
9f90				 
9f90 1a				ld a, (de) 
9f91 4f				ld c,a 
9f92 7e				ld a,(hl) 
9f93 cd 47 90			call toUpper 
9f96			 
9f96					if DEBUG_FORTH 
9f96						DMARK "NT2" 
9f96						CALLMONITOR 
9f96					endif 
9f96				; c has the token to find char 
9f96				; a has the mem to scan char 
9f96			 
9f96 b9				cp c 
9f97 28 04			jr z,.fntmatch1 
9f99			 
9f99				; they are not the same 
9f99			 
9f99					if DEBUG_FORTH 
9f99						DMARK "NT3" 
9f99						CALLMONITOR 
9f99					endif 
9f99 d1				pop de	; reset de token to look for 
9f9a d5				push de 
9f9b 18 e1			jr .fnt1 
9f9d				 
9f9d			.fntmatch1: 
9f9d			 
9f9d				; is the same char a null which means we might have a full hit? 
9f9d					if DEBUG_FORTH 
9f9d						DMARK "NT4" 
9f9d						CALLMONITOR 
9f9d					endif 
9f9d			 
9f9d fe 00			cp 0 
9f9f 28 0b			jr z, .fntmatchyes 
9fa1			 
9fa1				; are we at the end of the token to find? 
9fa1			 
9fa1					if DEBUG_FORTH 
9fa1						DMARK "NT5" 
9fa1						CALLMONITOR 
9fa1					endif 
9fa1 3e 00			ld a, 0 
9fa3 b9				cp c 
9fa4			 
9fa4 c2 8e 9f			jp nz, .fnt2cmpmore    ; no, so keep going to a direct hit 
9fa7			 
9fa7					if DEBUG_FORTH 
9fa7						DMARK "NT6" 
9fa7						CALLMONITOR 
9fa7					endif 
9fa7				; token to find is exhusted but no match to stream 
9fa7			 
9fa7				; restore tok pointer and continue on 
9fa7 d1				pop de 
9fa8 d5				push de 
9fa9 c3 7e 9f			jp .fnt1 
9fac			 
9fac			 
9fac			.fntmatchyes: 
9fac			 
9fac				; hl now contains the end of the found token 
9fac			 
9fac				; get rid of saved token pointer to find 
9fac			 
9fac d1				pop de 
9fad			 
9fad					if DEBUG_FORTH 
9fad						DMARK "NT9" 
9fad						CALLMONITOR 
9fad					endif 
9fad			 
9fad				; hl will be on the null term so forward on 
9fad			 
9fad				; get back the saved start of the token 
9fad			 
9fad d9				exx 
9fae e5				push hl     ; save start of token just in case it is the right one 
9faf d9				exx 
9fb0 e1				pop hl        ; save it to hl 
9fb1			 
9fb1 c9				ret 
9fb2			 
9fb2			 
9fb2			; LIST needs to find a specific token   
9fb2			; FORGET needs to find a spefici token 
9fb2			 
9fb2			; SAVE needs to find all tokens by flag 
9fb2			; WORDS just needs to scan through all  by flag 
9fb2			; UWORDS needs to scan through all by flag 
9fb2			 
9fb2			 
9fb2			; given hl as pointer to start of dict look up string 
9fb2			; return hl as pointer to start of word block 
9fb2			; or 0 if not found 
9fb2			 
9fb2			forth_find_tok: 
9fb2 c9				ret 
9fb3			 
9fb3			; given hl as pointer to dict structure 
9fb3			; move to the next dict block structure 
9fb3			 
9fb3			forth_tok_next: 
9fb3				; hl now points to the address of the next word pointer  
9fb3				; TODO skip compiled symbol for now 
9fb3			;	push de 
9fb3 23				inc hl 
9fb4 5e				ld e, (hl) 
9fb5 23				inc hl 
9fb6 56				ld d, (hl) 
9fb7 23				inc hl 
9fb8			 
9fb8 eb				ex de,hl 
9fb9			if DEBUG_FORTH_PARSE_NEXTWORD 
9fb9				push bc 
9fb9				ld bc, (cli_nextword) 
9fb9						DMARK "NXW" 
9fb9				CALLMONITOR 
9fb9				pop bc 
9fb9			endif 
9fb9			;	pop de	 
9fb9 c9				ret 
9fba			 
9fba			 
9fba			 
9fba			; eof 
# End of file forth_parserv6.asm
9fba				include "forth_wordsv4.asm" 
9fba			 
9fba			; the core word dictionary v4 
9fba			; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Notation.html#Notation 
9fba			 
9fba			; this is a linked list for each of the system words used 
9fba			; user defined words will follow the same format but will be in ram 
9fba			 
9fba			 
9fba			; 
9fba			; 
9fba			; define linked list: 
9fba			; 
9fba			; 1. compiled byte op code 
9fba			; 2. len of text word 
9fba			; 3. text word 
9fba			; 4. ptr to next dictionary word 
9fba			; 5. asm, calls etc for the word 
9fba			; 
9fba			;  if 1 == 0 then last word in dict  
9fba			;   
9fba			; set the start of dictionary scanning to be in ram and the last word point to the system dict 
9fba			;  
9fba			;  
9fba			; create basic standard set of words 
9fba			; 
9fba			;  
9fba			; + - / * DUP EMIT . SWAP IF..THEN..ELSE DO..LOOP  : ; DROP  
9fba			; 2DUP 2DROP 2SWAP  
9fba			; @ C@ - get byte  
9fba			; ! C! - store byte 
9fba			; 0< true if less than zero 
9fba			; 0= true if zero 
9fba			; < >  
9fba			; = true if same 
9fba			; variables 
9fba			 
9fba			 
9fba			; Hardware specific words I may need 
9fba			; 
9fba			; IN OUT  
9fba			; calls to key util functions 
9fba			; calls to hardward abstraction stuff 
9fba			; easy control of frame buffers and lcd i/o 
9fba			; keyboard  
9fba			 
9fba			 
9fba			;DICT: macro 
9fba			; op_code, len, word, next 
9fba			;    word: 
9fba			;    db op_code 
9fba			;    ds word zero term 
9fba			;    dw next 
9fba			;    endm 
9fba			 
9fba			 
9fba			 
9fba			 
9fba			; op code 1 is a flag for user define words which are to be handled differently 
9fba			 
9fba			 
9fba			; 
9fba			; 
9fba			;    TODO on entry to a word this should be the expected environment 
9fba			;    hl - tos value if number then held, if string this is the ptr 
9fba			;    de -  
9fba			 
9fba			 
9fba			; opcode ranges 
9fba			; 0 - end of word dict 
9fba			; 255 - user define words 
9fba			 
9fba			sysdict: 
9fba			include "forth_opcodes.asm" 
9fba			; op codes for forth keywords 
9fba			 
9fba			; Changing use of opcodes to flag is the word exists in compiled form or not.  
9fba			; This provides a means to compile uwords if required for higher performance 
9fba			; by avoiding the use of the keyword parser and just jumping directly to the code 
9fba			; Actually there is already a flag for if the code exists as binary thinking about it... 
9fba			 
9fba			 
9fba			 
9fba			 
9fba			 
9fba			; free to use code 0  
9fba				OPCODE_HEAP: equ  1 
9fba				OPCODE_EXEC: equ 2 
9fba				OPCODE_DUP: equ 3 
9fba				OPCODE_SWAP: equ 4 
9fba				OPCODE_COLN: equ 5 
9fba				OPCODE_SCOLN: equ 6 
9fba				OPCODE_DROP: equ 7 
9fba				OPCODE_DUP2: equ 8 
9fba				OPCODE_DROP2: equ 9 
9fba				OPCODE_SWAP2: equ 10 
9fba				OPCODE_AT: equ 11 
9fba				OPCODE_CAT: equ 12 
9fba				OPCODE_BANG: equ 13 
9fba				OPCODE_CBANG: equ 14 
9fba				OPCODE_SCALL: equ 15 
9fba				OPCODE_DEPTH: equ 16 
9fba				OPCODE_OVER: equ 17 
9fba				OPCODE_PAUSE: equ 18 
9fba				OPCODE_PAUSES: equ 19 
9fba				OPCODE_ROT: equ 20 
9fba			;free to reuse	OPCODE_WORDS: equ 21 
9fba			        OPCODE_NOT: equ 21 
9fba				OPCODE_UWORDS: equ 22 
9fba				OPCODE_BP: equ 23 
9fba				OPCODE_MONITOR: equ 24  
9fba				OPCODE_MALLOC: equ 25 
9fba				OPCODE_FREE: equ 26 
9fba				OPCODE_LIST: equ 27 
9fba				OPCODE_FORGET: equ 28 
9fba				OPCODE_NOP: equ 29 
9fba				OPCODE_COMO: equ 30 
9fba				OPCODE_COMC: equ 31 
9fba			;free to reuse	OPCODE_ENDCORE: equ 32 
9fba				OPCODE_AFTERSOUND: equ 33 
9fba				OPCODE_GP2: equ 34 
9fba				OPCODE_GP3: equ 35 
9fba				OPCODE_GP4: equ 36 
9fba				OPCODE_SIN: equ 37 
9fba				OPCODE_SOUT: equ 38 
9fba				OPCODE_SPIO: equ 39 
9fba				OPCODE_SPICEH: equ 40 
9fba				OPCODE_SPIOb: equ 41 
9fba				OPCODE_SPII: equ 42 
9fba				OPCODE_SESEL: equ 43 
9fba				OPCODE_CARTDEV: equ 44 
9fba			; free to reuse	OPCODE_ENDDEVICE: equ 45 
9fba				OPCODE_FB: equ 46 
9fba				OPCODE_EMIT: equ 47 
9fba				OPCODE_DOTH: equ 48 
9fba				OPCODE_DOTF: equ 49 
9fba				OPCODE_DOT: equ 50 
9fba				OPCODE_CLS: equ 51 
9fba				OPCODE_DRAW: equ 52 
9fba				OPCODE_DUMP: equ 53 
9fba				OPCODE_CDUMP: equ 54 
9fba				OPCODE_DAT: equ 55 
9fba				OPCODE_HOME: equ 56 
9fba				OPCODE_SPACE: equ 57 
9fba				OPCODE_SPACES: equ 58 
9fba				OPCODE_SCROLL: equ 59 
9fba				OPCODE_ATQ: equ 60 
9fba				OPCODE_AUTODSP: equ 61 
9fba				OPCODE_MENU: equ 62 
9fba			; free to reuse	OPCODE_ENDDISPLAY: equ 63  
9fba				OPCODE_THEN: equ 64 
9fba				OPCODE_ELSE: equ 65 
9fba				OPCODE_DO: equ 66 
9fba				OPCODE_LOOP: equ 67 
9fba				OPCODE_I: equ 68 
9fba				OPCODE_DLOOP: equ 69  
9fba				OPCODE_REPEAT: equ 70  
9fba				OPCODE_UNTIL: equ 71 
9fba				OPCODE_ENDFLOW: equ 72 
9fba				OPCODE_WAITK: equ 73 
9fba				OPCODE_ACCEPT: equ 74 
9fba				OPCODE_EDIT: equ 75 
9fba			;free to reuse	OPCODE_ENDKEY: equ 76 
9fba				OPCODE_LZERO: equ 77 
9fba				OPCODE_TZERO: equ 78 
9fba				OPCODE_LESS: equ 79 
9fba				OPCODE_GT: equ 80 
9fba				OPCODE_EQUAL: equ 81  
9fba			;free to reuse	OPCODE_ENDLOGIC: equ 82 
9fba				OPCODE_NEG: equ 83 
9fba				OPCODE_DIV: equ 84 
9fba				OPCODE_MUL: equ 85 
9fba				OPCODE_MIN: equ 86 
9fba				OPCODE_MAX: equ 87 
9fba				OPCODE_RND16: equ 88 
9fba				OPCODE_RND8: equ 89 
9fba				OPCODE_RND: equ 90 
9fba			;free to reuse	OPCODE_ENDMATHS: equ 91  
9fba				OPCODE_BYNAME: equ 92 
9fba				OPCODE_DIR: equ 93 
9fba				OPCODE_SAVE: equ 94 
9fba				OPCODE_LOAD: equ 95 
9fba				OPCODE_BSAVE: equ 96 
9fba				OPCODE_BLOAD: equ 97 
9fba				OPCODE_SEO: equ 98  
9fba				OPCODE_SEI: equ 99 
9fba				OPCODE_SFREE: equ 100 
9fba				OPCODE_SIZE: equ 101 
9fba				OPCODE_CREATE: equ 102 
9fba				OPCODE_APPEND: equ 103 
9fba				OPCODE_SDEL: equ 104 
9fba				OPCODE_OPEN: equ 105 
9fba				OPCODE_READ: equ 106 
9fba				OPCODE_EOF: equ 106 
9fba				OPCODE_FORMAT: equ 107 
9fba				OPCODE_LABEL: equ 108 
9fba				OPCODE_LABELS: equ 109 
9fba			;free to reuse	OPCODE_ENDSTORAGE: equ 110  
9fba				OPCODE_UPPER: equ 111 
9fba				OPCODE_LOWER: equ 112 
9fba				OPCODE_SUBSTR: equ 113 
9fba				OPCODE_LEFT: equ 114 
9fba				OPCODE_RIGHT: equ 115 
9fba				OPCODE_STR2NUM: equ 116 
9fba				OPCODE_NUM2STR: equ 117 
9fba				OPCODE_CONCAT: equ 118 
9fba				OPCODE_FIND: equ 119 
9fba				OPCODE_LEN: equ 120 
9fba				OPCODE_CHAR: equ 121 
9fba			; free to reuse	OPCODE_STRLEN: equ 122 
9fba			; free to reuse	OPCODE_ENDSTR: equ 123 
9fba				OPCODE_V0S: equ 124 
9fba				OPCODE_V0Q: equ 125 
9fba				OPCODE_V1S: equ 126 
9fba				OPCODE_V1Q: equ 127 
9fba				OPCODE_V2S: equ 128 
9fba				OPCODE_V2Q: equ 129 
9fba				OPCODE_V3S: equ 130 
9fba				OPCODE_V3Q: equ 131 
9fba			;free to reuse	OPCODE_END: equ 132 
9fba				OPCODE_ZDUP: equ 133 
9fba			 
9fba			; eof 
# End of file forth_opcodes.asm
9fba			 
9fba			include "forth_words_core.asm" 
9fba			 
9fba			; | ## Core Words 
9fba			 
9fba			;if MALLOC_4 
9fba			 
9fba			.HEAP: 
9fba			CWHEAD .EXEC OPCODE_HEAP "HEAP" 4 WORD_FLAG_CODE 
9fba 15				db WORD_SYS_CORE+OPCODE_HEAP             
9fbb f9 9f			dw .EXEC            
9fbd 05				db 4 + 1 
9fbe .. 00			db "HEAP",0              
9fc3				endm 
# End of macro CWHEAD
9fc3			; | HEAP ( -- u1 u2 )   Pushes u1 the current number of bytes in the heap and u2 the remaining bytes - Only present if using my MALLOC | DONE 
9fc3			; | | u1 - Current number of bytes in the heap 
9fc3			; | | u2 - Remaining bytes left on the heap 
9fc3			; | |  
9fc3			; | | The heap is used for storing user defined words as well as any values pushed to stack. 
9fc3			 
9fc3			 
9fc3				if DEBUG_FORTH_WORDS_KEY 
9fc3					DMARK "HEP" 
9fc3 f5				push af  
9fc4 3a d8 9f			ld a, (.dmark)  
9fc7 32 65 ee			ld (debug_mark),a  
9fca 3a d9 9f			ld a, (.dmark+1)  
9fcd 32 66 ee			ld (debug_mark+1),a  
9fd0 3a da 9f			ld a, (.dmark+2)  
9fd3 32 67 ee			ld (debug_mark+2),a  
9fd6 18 03			jr .pastdmark  
9fd8 ..			.dmark: db "HEP"  
9fdb f1			.pastdmark: pop af  
9fdc			endm  
# End of macro DMARK
9fdc					CALLMONITOR 
9fdc cd 6f ee			call debug_vector  
9fdf				endm  
# End of macro CALLMONITOR
9fdf				endif 
9fdf 2a 66 e0			ld hl, (free_list )      
9fe2 11 6b e0			ld de, heap_start 
9fe5			 
9fe5 ed 52			sbc hl, de  
9fe7			 
9fe7 cd 85 9a			call forth_push_numhl 
9fea			 
9fea			 
9fea ed 5b 66 e0		ld de, (free_list )      
9fee 21 96 e2			ld hl, heap_end 
9ff1			 
9ff1 ed 52			sbc hl, de 
9ff3			 
9ff3 cd 85 9a			call forth_push_numhl 
9ff6				 
9ff6			 
9ff6				 
9ff6			 
9ff6			 
9ff6			 
9ff6				NEXTW 
9ff6 c3 76 9e			jp macro_next 
9ff9				endm 
# End of macro NEXTW
9ff9			;endif 
9ff9			 
9ff9			.EXEC: 
9ff9			;	CWHEAD .STKEXEC OPCODE_EXEC "EXEC" 4 WORD_FLAG_CODE 
9ff9			;; > EXEC ( u -- )    Execs the string on TOS as a FORTH expression > CRASHES ON NEXTW 
9ff9			;; > > u - A qutoed string which can consist of any valid Forth expression excluding : defintions (use LOAD instead) 
9ff9			;; > > 
9ff9			;; > >   
9ff9			;	STACKFRAME OFF $5efe $5f9f 
9ff9			; 
9ff9			;		if DEBUG_FORTH_WORDS_KEY 
9ff9			;			DMARK "EXE" 
9ff9			;			CALLMONITOR 
9ff9			;		endif 
9ff9			; 
9ff9			;	FORTH_DSP_VALUEHL 
9ff9			; 
9ff9			;	FORTH_DSP_POP 
9ff9			; 
9ff9			;		if DEBUG_FORTH_WORDS 
9ff9			;			DMARK "EX1" 
9ff9			;			CALLMONITOR 
9ff9			;		endif 
9ff9			;;	ld e,(hl) 
9ff9			;;	inc hl 
9ff9			;;	ld d,(hl) 
9ff9			;;	ex de,hl 
9ff9			; 
9ff9			;;		if DEBUG_FORTH_WORDS 
9ff9			;;			DMARK "EX2" 
9ff9			;;			CALLMONITOR 
9ff9			;;		endif 
9ff9			;	push hl 
9ff9			; 
9ff9			;	;ld a, 0 
9ff9			;	;ld a, FORTH_END_BUFFER 
9ff9			;	call strlenz 
9ff9			;	inc hl   ; include zero term to copy 
9ff9			;	inc hl   ; include term 
9ff9			;	inc hl   ; include term 
9ff9			;	ld b,0 
9ff9			;	ld c,l 
9ff9			;	pop hl 
9ff9			;	ld de, execscratch 
9ff9			;		if DEBUG_FORTH_WORDS 
9ff9			;			DMARK "EX3" 
9ff9			;			CALLMONITOR 
9ff9			;		endif 
9ff9			;	ldir 
9ff9			; 
9ff9			; 
9ff9			;	ld hl, execscratch 
9ff9			; 
9ff9			;		if DEBUG_FORTH_WORDS 
9ff9			;			DMARK "EXe" 
9ff9			;			CALLMONITOR 
9ff9			;		endif 
9ff9			; 
9ff9			;	call forthparse 
9ff9			;	call forthexec 
9ff9			;;	call forthexec_cleanup 
9ff9			;;	call forthparse 
9ff9			;;	call forthexec 
9ff9			; 
9ff9			;	STACKFRAMECHK OFF $5efe $5f9f 
9ff9			; 
9ff9			;	; an immediate word so no need to process any more words 
9ff9			;	ret 
9ff9			;	NEXTW 
9ff9			 
9ff9			; dead code - old version  
9ff9			;	FORTH_RSP_NEXT 
9ff9			 
9ff9			;  
9ff9			;	ld bc,(cli_ptr)   ; move to next token to parse in the input stream 
9ff9			;	ld de,(cli_origptr)   ; move to next token to parse in the input stream 
9ff9			;	ld hl,(os_tok_ptr)   ; move to next token to parse in the input stream 
9ff9			;	push hl 
9ff9			;	push de 
9ff9			;	push bc 
9ff9			; 
9ff9			; 
9ff9			;		if DEBUG_FORTH_WORDS_KEY 
9ff9			;			DMARK "EXR" 
9ff9			;			CALLMONITOR 
9ff9			;		endif 
9ff9			; 
9ff9			; 
9ff9			; 
9ff9			;	;v5 FORTH_DSP_VALUE 
9ff9			;	FORTH_DSP_VALUEHL 
9ff9			; 
9ff9			;	; TODO do string type checks 
9ff9			; 
9ff9			;;v5	inc hl   ; skip type 
9ff9			; 
9ff9			;	push hl  ; source code  
9ff9			;		if DEBUG_FORTH_WORDS 
9ff9			;			DMARK "EX1" 
9ff9			;			CALLMONITOR 
9ff9			;		endif 
9ff9			;	ld a, 0 
9ff9			;	call strlent 
9ff9			; 
9ff9			;	inc hl 
9ff9			;	inc hl 
9ff9			;	inc hl 
9ff9			;	inc hl 
9ff9			; 
9ff9			;	push hl    ; size 
9ff9			; 
9ff9			;		if DEBUG_FORTH_WORDS 
9ff9			;			DMARK "EX2" 
9ff9			;			CALLMONITOR 
9ff9			;		endif 
9ff9			;	call malloc 
9ff9			; 
9ff9			;	ex de, hl    ; de now contains malloc area 
9ff9			;	pop bc   	; get byte count 
9ff9			;	pop hl      ; get string to copy 
9ff9			; 
9ff9			;	push de     ; save malloc for free later 
9ff9			; 
9ff9			;		if DEBUG_FORTH_WORDS 
9ff9			;			DMARK "EX3" 
9ff9			;			CALLMONITOR 
9ff9			;		endif 
9ff9			;	ldir       ; duplicate string 
9ff9			; 
9ff9			;	; at the end of the string so go back the three extra spaces and fill in with extra terms 
9ff9			;	 
9ff9			;	; TODO fix the parse would be better than this...  
9ff9			;	ex de, hl 
9ff9			;	dec hl 
9ff9			;	ld a, 0 
9ff9			;	ld (hl), a 
9ff9			;	dec hl 
9ff9			;	ld a, ' ' 
9ff9			;	ld (hl), a 
9ff9			;	dec hl 
9ff9			;	ld (hl), a 
9ff9			; 
9ff9			;	dec hl 
9ff9			;	ld (hl), a 
9ff9			; 
9ff9			; 
9ff9			;	FORTH_DSP_POP  
9ff9			; 
9ff9			;	pop hl     
9ff9			;	push hl    ; save malloc area 
9ff9			; 
9ff9			;		if DEBUG_FORTH_WORDS 
9ff9			;			DMARK "EX4" 
9ff9			;			CALLMONITOR 
9ff9			;		endif 
9ff9			; 
9ff9			;	call forthparse 
9ff9			;	call forthexec 
9ff9			;	 
9ff9			;	pop hl 
9ff9			;	if DEBUG_FORTH_WORDS 
9ff9			;		DMARK "EX5" 
9ff9			;		CALLMONITOR 
9ff9			;	endif 
9ff9			; 
9ff9			;	if FORTH_ENABLE_FREE 
9ff9			;	call free 
9ff9			;	endif 
9ff9			; 
9ff9			;	if DEBUG_FORTH_WORDS 
9ff9			;		DMARK "EX6" 
9ff9			;		CALLMONITOR 
9ff9			;	endif 
9ff9			; 
9ff9			;	pop bc 
9ff9			;	pop de 
9ff9			;	pop hl 
9ff9			;;	FORTH_RSP_POP	  
9ff9			;	ld (cli_ptr),bc   ; move to next token to parse in the input stream 
9ff9			;	ld (cli_origptr),de   ; move to next token to parse in the input stream 
9ff9			;	ld (os_tok_ptr),hl   ; move to next token to parse in the input stream 
9ff9			; 
9ff9			;	if DEBUG_FORTH_WORDS 
9ff9			;		DMARK "EX7" 
9ff9			;		CALLMONITOR 
9ff9			;	endif 
9ff9			;	NEXTW 
9ff9			 
9ff9			;.STKEXEC: 
9ff9			;	CWHEAD .ZDUP 43 "STKEXEC" 7 WORD_FLAG_CODE 
9ff9			;; > STKEXEC ( u .. u c -- ) Taking c count of strings off of the stack the strings are evaluated as code > TO TEST 
9ff9			; 
9ff9			; 
9ff9			;		if DEBUG_FORTH_WORDS_KEY 
9ff9			;			DMARK "STX" 
9ff9			;			CALLMONITOR 
9ff9			;		endif 
9ff9			; 
9ff9			;	FORTH_DSP_VALUEHL 
9ff9			; 
9ff9			;	ld (store_tmp1), hl    ; count 
9ff9			; 
9ff9			;	FORTH_DSP_POP 
9ff9			;.stkexec1: 
9ff9			;	ld hl, (store_tmp1)   ; count 
9ff9			;	ld a, 0 
9ff9			;	cp l 
9ff9			;	ret z 
9ff9			; 
9ff9			;	dec hl 
9ff9			;	ld (store_tmp1), hl    ; count 
9ff9			;	 
9ff9			;	FORTH_DSP_VALUEHL 
9ff9			;	push hl 
9ff9			;	 
9ff9			;		if DEBUG_FORTH_WORDS 
9ff9			;			DMARK "EXp" 
9ff9			;			CALLMONITOR 
9ff9			;		endif 
9ff9			;	FORTH_DSP_POP 
9ff9			; 
9ff9			;	call strlenz 
9ff9			;	inc hl   ; include zero term to copy 
9ff9			;	inc hl   ; include zero term to copy 
9ff9			;	inc hl   ; include zero term to copy 
9ff9			;	ld b,0 
9ff9			;	ld c,l 
9ff9			;	pop hl 
9ff9			;	ld de, execscratch 
9ff9			;		if DEBUG_FORTH_WORDS 
9ff9			;			DMARK "EX3" 
9ff9			;			CALLMONITOR 
9ff9			;		endif 
9ff9			;	ldir 
9ff9			; 
9ff9			; 
9ff9			;	ld hl, execscratch 
9ff9			; 
9ff9			;		if DEBUG_FORTH_WORDS 
9ff9			;			DMARK "EXP" 
9ff9			;			CALLMONITOR 
9ff9			;		endif 
9ff9			; 
9ff9			;	call forthparse 
9ff9			;	ld hl, execscratch 
9ff9			;		if DEBUG_FORTH_WORDS 
9ff9			;			DMARK "EXx" 
9ff9			;			CALLMONITOR 
9ff9			;		endif 
9ff9			;	call forthexec 
9ff9			; 
9ff9			;	jp .stkexec1 
9ff9			; 
9ff9			;	ret 
9ff9			 
9ff9			 
9ff9			.DUP: 
9ff9			CWHEAD .ZDUP OPCODE_DUP "DUP" 3 WORD_FLAG_CODE 
9ff9 17				db WORD_SYS_CORE+OPCODE_DUP             
9ffa 6f a0			dw .ZDUP            
9ffc 04				db 3 + 1 
9ffd .. 00			db "DUP",0              
a001				endm 
# End of macro CWHEAD
a001			; | DUP ( u -- u u )     Duplicate whatever item is on TOS | DONE 
a001			 
a001				if DEBUG_FORTH_WORDS_KEY 
a001					DMARK "DUP" 
a001 f5				push af  
a002 3a 16 a0			ld a, (.dmark)  
a005 32 65 ee			ld (debug_mark),a  
a008 3a 17 a0			ld a, (.dmark+1)  
a00b 32 66 ee			ld (debug_mark+1),a  
a00e 3a 18 a0			ld a, (.dmark+2)  
a011 32 67 ee			ld (debug_mark+2),a  
a014 18 03			jr .pastdmark  
a016 ..			.dmark: db "DUP"  
a019 f1			.pastdmark: pop af  
a01a			endm  
# End of macro DMARK
a01a					CALLMONITOR 
a01a cd 6f ee			call debug_vector  
a01d				endm  
# End of macro CALLMONITOR
a01d				endif 
a01d			 
a01d				FORTH_DSP 
a01d cd 50 9c			call macro_forth_dsp 
a020				endm 
# End of macro FORTH_DSP
a020			 
a020 7e				ld a, (HL) 
a021 fe 01			cp DS_TYPE_STR 
a023 20 25			jr nz, .dupinum 
a025			 
a025				; push another string 
a025			 
a025				FORTH_DSP_VALUEHL     		 
a025 cd 8a 9c			call macro_dsp_valuehl 
a028				endm 
# End of macro FORTH_DSP_VALUEHL
a028			 
a028			if DEBUG_FORTH_WORDS 
a028				DMARK "DUs" 
a028 f5				push af  
a029 3a 3d a0			ld a, (.dmark)  
a02c 32 65 ee			ld (debug_mark),a  
a02f 3a 3e a0			ld a, (.dmark+1)  
a032 32 66 ee			ld (debug_mark+1),a  
a035 3a 3f a0			ld a, (.dmark+2)  
a038 32 67 ee			ld (debug_mark+2),a  
a03b 18 03			jr .pastdmark  
a03d ..			.dmark: db "DUs"  
a040 f1			.pastdmark: pop af  
a041			endm  
# End of macro DMARK
a041				CALLMONITOR 
a041 cd 6f ee			call debug_vector  
a044				endm  
# End of macro CALLMONITOR
a044			endif 
a044 cd f3 9a			call forth_push_str 
a047			 
a047				NEXTW 
a047 c3 76 9e			jp macro_next 
a04a				endm 
# End of macro NEXTW
a04a			 
a04a			 
a04a			.dupinum: 
a04a				 
a04a			 
a04a			 
a04a				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a04a cd 8a 9c			call macro_dsp_valuehl 
a04d				endm 
# End of macro FORTH_DSP_VALUEHL
a04d			 
a04d			; TODO add floating point number detection 
a04d			 
a04d			if DEBUG_FORTH_WORDS 
a04d				DMARK "DUi" 
a04d f5				push af  
a04e 3a 62 a0			ld a, (.dmark)  
a051 32 65 ee			ld (debug_mark),a  
a054 3a 63 a0			ld a, (.dmark+1)  
a057 32 66 ee			ld (debug_mark+1),a  
a05a 3a 64 a0			ld a, (.dmark+2)  
a05d 32 67 ee			ld (debug_mark+2),a  
a060 18 03			jr .pastdmark  
a062 ..			.dmark: db "DUi"  
a065 f1			.pastdmark: pop af  
a066			endm  
# End of macro DMARK
a066				CALLMONITOR 
a066 cd 6f ee			call debug_vector  
a069				endm  
# End of macro CALLMONITOR
a069			endif 
a069			 
a069 cd 85 9a			call forth_push_numhl 
a06c				NEXTW 
a06c c3 76 9e			jp macro_next 
a06f				endm 
# End of macro NEXTW
a06f			.ZDUP: 
a06f			CWHEAD .LSHIFT OPCODE_ZDUP "?DUP" 4 WORD_FLAG_CODE 
a06f 99				db WORD_SYS_CORE+OPCODE_ZDUP             
a070 a7 a0			dw .LSHIFT            
a072 05				db 4 + 1 
a073 .. 00			db "?DUP",0              
a078				endm 
# End of macro CWHEAD
a078			; | ?DUP ( u -- u u )     Duplicate item on TOS if the item is non-zero (Only works for numerics) | DONE 
a078			 
a078				if DEBUG_FORTH_WORDS_KEY 
a078					DMARK "qDU" 
a078 f5				push af  
a079 3a 8d a0			ld a, (.dmark)  
a07c 32 65 ee			ld (debug_mark),a  
a07f 3a 8e a0			ld a, (.dmark+1)  
a082 32 66 ee			ld (debug_mark+1),a  
a085 3a 8f a0			ld a, (.dmark+2)  
a088 32 67 ee			ld (debug_mark+2),a  
a08b 18 03			jr .pastdmark  
a08d ..			.dmark: db "qDU"  
a090 f1			.pastdmark: pop af  
a091			endm  
# End of macro DMARK
a091					CALLMONITOR 
a091 cd 6f ee			call debug_vector  
a094				endm  
# End of macro CALLMONITOR
a094				endif 
a094				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a094 cd 8a 9c			call macro_dsp_valuehl 
a097				endm 
# End of macro FORTH_DSP_VALUEHL
a097			 
a097 e5				push hl 
a098			 
a098				; is it a zero? 
a098			 
a098 3e 00			ld a, 0 
a09a 84				add h 
a09b 85				add l 
a09c			 
a09c e1				pop hl 
a09d			 
a09d fe 00			cp 0 
a09f 28 03			jr z, .dup2orig 
a0a1			 
a0a1			 
a0a1 cd 85 9a			call forth_push_numhl 
a0a4			 
a0a4			 
a0a4			; TODO add floating point number detection 
a0a4			 
a0a4			.dup2orig: 
a0a4			 
a0a4				NEXTW 
a0a4 c3 76 9e			jp macro_next 
a0a7				endm 
# End of macro NEXTW
a0a7			.LSHIFT: 
a0a7			CWHEAD .RSHIFT OPCODE_ZDUP "LSHIFT" 6 WORD_FLAG_CODE 
a0a7 99				db WORD_SYS_CORE+OPCODE_ZDUP             
a0a8 db a0			dw .RSHIFT            
a0aa 07				db 6 + 1 
a0ab .. 00			db "LSHIFT",0              
a0b2				endm 
# End of macro CWHEAD
a0b2			; | LSHIFT ( w -- w )    16 bit left shift | DONE 
a0b2				if DEBUG_FORTH_WORDS_KEY 
a0b2					DMARK "LSH" 
a0b2 f5				push af  
a0b3 3a c7 a0			ld a, (.dmark)  
a0b6 32 65 ee			ld (debug_mark),a  
a0b9 3a c8 a0			ld a, (.dmark+1)  
a0bc 32 66 ee			ld (debug_mark+1),a  
a0bf 3a c9 a0			ld a, (.dmark+2)  
a0c2 32 67 ee			ld (debug_mark+2),a  
a0c5 18 03			jr .pastdmark  
a0c7 ..			.dmark: db "LSH"  
a0ca f1			.pastdmark: pop af  
a0cb			endm  
# End of macro DMARK
a0cb					CALLMONITOR 
a0cb cd 6f ee			call debug_vector  
a0ce				endm  
# End of macro CALLMONITOR
a0ce				endif 
a0ce				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a0ce cd 8a 9c			call macro_dsp_valuehl 
a0d1				endm 
# End of macro FORTH_DSP_VALUEHL
a0d1				FORTH_DSP_POP 
a0d1 cd 42 9d			call macro_forth_dsp_pop 
a0d4				endm 
# End of macro FORTH_DSP_POP
a0d4			 
a0d4 29				add hl, hl 
a0d5 cd 85 9a			call forth_push_numhl 
a0d8				NEXTW 
a0d8 c3 76 9e			jp macro_next 
a0db				endm 
# End of macro NEXTW
a0db			.RSHIFT: 
a0db			CWHEAD .SWAP OPCODE_ZDUP "RSHIFT" 6 WORD_FLAG_CODE 
a0db 99				db WORD_SYS_CORE+OPCODE_ZDUP             
a0dc 12 a1			dw .SWAP            
a0de 07				db 6 + 1 
a0df .. 00			db "RSHIFT",0              
a0e6				endm 
# End of macro CWHEAD
a0e6			; | RSHIFT ( w -- w )    16 bit right shift | DONE 
a0e6				if DEBUG_FORTH_WORDS_KEY 
a0e6					DMARK "RSH" 
a0e6 f5				push af  
a0e7 3a fb a0			ld a, (.dmark)  
a0ea 32 65 ee			ld (debug_mark),a  
a0ed 3a fc a0			ld a, (.dmark+1)  
a0f0 32 66 ee			ld (debug_mark+1),a  
a0f3 3a fd a0			ld a, (.dmark+2)  
a0f6 32 67 ee			ld (debug_mark+2),a  
a0f9 18 03			jr .pastdmark  
a0fb ..			.dmark: db "RSH"  
a0fe f1			.pastdmark: pop af  
a0ff			endm  
# End of macro DMARK
a0ff					CALLMONITOR 
a0ff cd 6f ee			call debug_vector  
a102				endm  
# End of macro CALLMONITOR
a102				endif 
a102				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a102 cd 8a 9c			call macro_dsp_valuehl 
a105				endm 
# End of macro FORTH_DSP_VALUEHL
a105				FORTH_DSP_POP 
a105 cd 42 9d			call macro_forth_dsp_pop 
a108				endm 
# End of macro FORTH_DSP_POP
a108 cb 3c			srl h 
a10a cb 1d			rr l 
a10c cd 85 9a			call forth_push_numhl 
a10f				NEXTW 
a10f c3 76 9e			jp macro_next 
a112				endm 
# End of macro NEXTW
a112			.SWAP: 
a112			CWHEAD .COLN OPCODE_SWAP "SWAP" 4 WORD_FLAG_CODE 
a112 18				db WORD_SYS_CORE+OPCODE_SWAP             
a113 66 a1			dw .COLN            
a115 05				db 4 + 1 
a116 .. 00			db "SWAP",0              
a11b				endm 
# End of macro CWHEAD
a11b			; | SWAP ( w1 w2 -- w2 w1 )    Swap top two items on TOS | DONE 
a11b				if DEBUG_FORTH_WORDS_KEY 
a11b					DMARK "SWP" 
a11b f5				push af  
a11c 3a 30 a1			ld a, (.dmark)  
a11f 32 65 ee			ld (debug_mark),a  
a122 3a 31 a1			ld a, (.dmark+1)  
a125 32 66 ee			ld (debug_mark+1),a  
a128 3a 32 a1			ld a, (.dmark+2)  
a12b 32 67 ee			ld (debug_mark+2),a  
a12e 18 03			jr .pastdmark  
a130 ..			.dmark: db "SWP"  
a133 f1			.pastdmark: pop af  
a134			endm  
# End of macro DMARK
a134					CALLMONITOR 
a134 cd 6f ee			call debug_vector  
a137				endm  
# End of macro CALLMONITOR
a137				endif 
a137			 
a137			; DONE Use os stack swap memory 
a137			 
a137				FORTH_DSP_PTR 0     ; TOS 
a137 2a e8 e9			ld hl,(cli_data_sp) 
a13a 11 00 00			ld de, 0 * 3 
a13d ed 52			sbc hl, de 
a13f				endm 
# End of macro FORTH_DSP_PTR
a13f cd c2 9d			call hltostack1 
a142			  
a142				FORTH_DSP_PTR 1     ; TOS 
a142 2a e8 e9			ld hl,(cli_data_sp) 
a145 11 03 00			ld de, 1 * 3 
a148 ed 52			sbc hl, de 
a14a				endm 
# End of macro FORTH_DSP_PTR
a14a cd c8 9d			call hltostack2 
a14d			 
a14d				FORTH_DSP_PTR 0     ; TOS 
a14d 2a e8 e9			ld hl,(cli_data_sp) 
a150 11 00 00			ld de, 0 * 3 
a153 ed 52			sbc hl, de 
a155				endm 
# End of macro FORTH_DSP_PTR
a155 cd e0 9d			call hlfromstack2 
a158			 
a158				FORTH_DSP_PTR 1     ; TOS 
a158 2a e8 e9			ld hl,(cli_data_sp) 
a15b 11 03 00			ld de, 1 * 3 
a15e ed 52			sbc hl, de 
a160				endm 
# End of macro FORTH_DSP_PTR
a160 cd da 9d			call hlfromstack1 
a163			;	FORTH_DSP_VALUEHL 
a163			;	push hl     ; w2 
a163			; 
a163			;	FORTH_DSP_POP 
a163			; 
a163			;	FORTH_DSP_VALUEHL 
a163			; 
a163			;	FORTH_DSP_POP 
a163			; 
a163			;	pop de     ; w2	, hl = w1 
a163			; 
a163			;	ex de, hl 
a163			;	push de 
a163			; 
a163			;	call forth_push_numhl 
a163			; 
a163			;	pop hl 
a163			; 
a163			;	call forth_push_numhl 
a163				 
a163			 
a163				NEXTW 
a163 c3 76 9e			jp macro_next 
a166				endm 
# End of macro NEXTW
a166			.COLN: 
a166			CWHEAD .SCOLN OPCODE_COLN ":" 1 WORD_FLAG_CODE 
a166 19				db WORD_SYS_CORE+OPCODE_COLN             
a167 f2 a2			dw .SCOLN            
a169 02				db 1 + 1 
a16a .. 00			db ":",0              
a16c				endm 
# End of macro CWHEAD
a16c			; | : ( -- )         Create new word | DONE 
a16c			 
a16c				if DEBUG_FORTH_WORDS_KEY 
a16c					DMARK "CLN" 
a16c f5				push af  
a16d 3a 81 a1			ld a, (.dmark)  
a170 32 65 ee			ld (debug_mark),a  
a173 3a 82 a1			ld a, (.dmark+1)  
a176 32 66 ee			ld (debug_mark+1),a  
a179 3a 83 a1			ld a, (.dmark+2)  
a17c 32 67 ee			ld (debug_mark+2),a  
a17f 18 03			jr .pastdmark  
a181 ..			.dmark: db "CLN"  
a184 f1			.pastdmark: pop af  
a185			endm  
# End of macro DMARK
a185					CALLMONITOR 
a185 cd 6f ee			call debug_vector  
a188				endm  
# End of macro CALLMONITOR
a188				endif 
a188			STACKFRAME OFF $8efe $989f 
a188				if DEBUG_STACK_IMB 
a188					if OFF 
a188						exx 
a188						ld de, $8efe 
a188						ld a, d 
a188						ld hl, curframe 
a188						call hexout 
a188						ld a, e 
a188						ld hl, curframe+2 
a188						call hexout 
a188						ld hl, $8efe 
a188						push hl 
a188						ld hl, $989f 
a188						push hl 
a188						exx 
a188					endif 
a188				endif 
a188			endm 
# End of macro STACKFRAME
a188			; get parser buffer length  of new word 
a188			 
a188			 
a188			 
a188				; move tok past this to start of name defintition 
a188				; TODO get word to define 
a188				; TODO Move past word token 
a188				; TODO get length of string up to the ';' 
a188			 
a188 2a bc e5		ld hl, (os_tok_ptr) 
a18b 23			inc hl 
a18c 23			inc hl 
a18d			 
a18d 3e 3b		ld a, ';' 
a18f cd 5b 90		call strlent 
a192			 
a192 7d			ld a,l 
a193 32 ab e2		ld (os_new_parse_len), a 
a196			 
a196			 
a196			if DEBUG_FORTH_UWORD 
a196 ed 5b bc e5	ld de, (os_tok_ptr) 
a19a					DMARK ":01" 
a19a f5				push af  
a19b 3a af a1			ld a, (.dmark)  
a19e 32 65 ee			ld (debug_mark),a  
a1a1 3a b0 a1			ld a, (.dmark+1)  
a1a4 32 66 ee			ld (debug_mark+1),a  
a1a7 3a b1 a1			ld a, (.dmark+2)  
a1aa 32 67 ee			ld (debug_mark+2),a  
a1ad 18 03			jr .pastdmark  
a1af ..			.dmark: db ":01"  
a1b2 f1			.pastdmark: pop af  
a1b3			endm  
# End of macro DMARK
a1b3			CALLMONITOR 
a1b3 cd 6f ee			call debug_vector  
a1b6				endm  
# End of macro CALLMONITOR
a1b6			endif 
a1b6			 
a1b6			; 
a1b6			;  new word memory layout: 
a1b6			;  
a1b6			;    : adg 6666 ;  
a1b6			; 
a1b6			;    db   1     ; user defined word  
a1b6 23			inc hl    
a1b7			;    dw   sysdict 
a1b7 23			inc hl 
a1b8 23			inc hl 
a1b9			;    db <word len>+1 (for null) 
a1b9 23			inc hl 
a1ba			;    db .... <word> 
a1ba			; 
a1ba			 
a1ba 23			inc hl    ; some extras for the word preamble before the above 
a1bb 23			inc hl 
a1bc 23			inc hl 
a1bd 23			inc hl 
a1be 23			inc hl 
a1bf 23			inc hl 
a1c0 23			inc hl  
a1c1 23			inc hl 
a1c2 23			inc hl 
a1c3 23			inc hl 
a1c4 23			inc hl 
a1c5 23			inc hl 
a1c6 23			inc hl 
a1c7 23			inc hl     ; TODO how many do we really need?     maybe only 6 
a1c8			;       exec word buffer 
a1c8			;	<ptr word>   
a1c8 23			inc hl 
a1c9 23			inc hl 
a1ca			;       <word list><null term> 7F final term 
a1ca			 
a1ca			 
a1ca			if DEBUG_FORTH_UWORD 
a1ca					DMARK ":02" 
a1ca f5				push af  
a1cb 3a df a1			ld a, (.dmark)  
a1ce 32 65 ee			ld (debug_mark),a  
a1d1 3a e0 a1			ld a, (.dmark+1)  
a1d4 32 66 ee			ld (debug_mark+1),a  
a1d7 3a e1 a1			ld a, (.dmark+2)  
a1da 32 67 ee			ld (debug_mark+2),a  
a1dd 18 03			jr .pastdmark  
a1df ..			.dmark: db ":02"  
a1e2 f1			.pastdmark: pop af  
a1e3			endm  
# End of macro DMARK
a1e3			CALLMONITOR 
a1e3 cd 6f ee			call debug_vector  
a1e6				endm  
# End of macro CALLMONITOR
a1e6			endif 
a1e6			 
a1e6			 
a1e6				; malloc the size 
a1e6			 
a1e6 cd c5 90			call malloc 
a1e9 22 ad e2			ld (os_new_malloc), hl     ; save malloc start 
a1ec			 
a1ec			;    db   1     ; user defined word  
a1ec 3e 01			ld a, WORD_SYS_UWORD  
a1ee 77				ld (hl), a 
a1ef			 
a1ef 23			inc hl    
a1f0			;    dw   sysdict 
a1f0 11 ba 9f		ld de, sysdict       ; continue on with the scan to the system dict 
a1f3 73			ld (hl), e 
a1f4 23			inc hl 
a1f5 72			ld (hl), d 
a1f6 23			inc hl 
a1f7			 
a1f7			 
a1f7			;    Setup dict word 
a1f7			 
a1f7 23			inc hl 
a1f8 22 a7 e2		ld (os_new_work_ptr), hl     ; save start of dict word  
a1fb			 
a1fb			; 1. get length of dict word 
a1fb			 
a1fb			 
a1fb 2a bc e5		ld hl, (os_tok_ptr) 
a1fe 23			inc hl 
a1ff 23			inc hl    ; position to start of dict word 
a200 3e 00		ld a, 0 
a202 cd 5b 90		call strlent 
a205			 
a205			 
a205 23			inc hl    ; to include null??? 
a206			 
a206			; write length of dict word 
a206			 
a206 ed 5b a7 e2	ld de, (os_new_work_ptr)   ; get dest for copy of word 
a20a 1b			dec de 
a20b eb			ex de, hl 
a20c 73			ld (hl), e 
a20d eb			ex de, hl 
a20e			 
a20e			 
a20e			 
a20e			; copy  
a20e 4d			ld c, l 
a20f 06 00		ld b, 0 
a211 ed 5b a7 e2	ld de, (os_new_work_ptr)   ; get dest for copy of word 
a215 2a bc e5		ld hl, (os_tok_ptr) 
a218 23			inc hl 
a219 23			inc hl    ; position to start of dict word 
a21a			 
a21a			;	ldir       ; copy word - HL now is where we need to be for copy of the line 
a21a			 
a21a			; TODO need to convert word to upper case 
a21a			 
a21a			ucasetok:	 
a21a 7e			ld a,(hl) 
a21b cd 47 90		call toUpper 
a21e 77			ld (hl),a 
a21f ed a0		ldi 
a221 f2 1a a2		jp p, ucasetok 
a224			 
a224			 
a224			 
a224			; de now points to start of where the word body code should be placed 
a224 ed 53 a7 e2	ld (os_new_work_ptr), de 
a228			; hl now points to the words to throw at forthexec which needs to be copied 
a228 22 a5 e2		ld (os_new_src_ptr), hl 
a22b			 
a22b			; TODO add 'call to forthexec' 
a22b			 
a22b			if DEBUG_FORTH_UWORD 
a22b c5			push bc 
a22c ed 4b ad e2	ld bc, (os_new_malloc) 
a230					DMARK ":0x" 
a230 f5				push af  
a231 3a 45 a2			ld a, (.dmark)  
a234 32 65 ee			ld (debug_mark),a  
a237 3a 46 a2			ld a, (.dmark+1)  
a23a 32 66 ee			ld (debug_mark+1),a  
a23d 3a 47 a2			ld a, (.dmark+2)  
a240 32 67 ee			ld (debug_mark+2),a  
a243 18 03			jr .pastdmark  
a245 ..			.dmark: db ":0x"  
a248 f1			.pastdmark: pop af  
a249			endm  
# End of macro DMARK
a249			CALLMONITOR 
a249 cd 6f ee			call debug_vector  
a24c				endm  
# End of macro CALLMONITOR
a24c c1			pop bc 
a24d			endif 
a24d			 
a24d			 
a24d			; create word preamble which should be: 
a24d			 
a24d			; TODO possibly push the current os_tok_ptr to rsp and the current rsp will be the start of the string and not current pc???? 
a24d			 
a24d			;    ld hl, <word code> 
a24d			;    jp user_exec 
a24d			;    <word code bytes> 
a24d			 
a24d			 
a24d			;	inc de     ; TODO ??? or are we already past the word's null 
a24d eb			ex de, hl 
a24e			 
a24e 36 21		ld (hl), 021h     ; TODO get bytes poke "ld hl, " 
a250			 
a250 23			inc hl 
a251 22 a1 e2		ld (os_new_exec_ptr),hl     ; save this location to poke with the address of the word buffer 
a254 23			inc hl 
a255			 
a255 23			inc hl 
a256 36 c3		ld (hl), 0c3h     ; TODO get bytes poke "jp xx  " 
a258			 
a258 01 38 ce		ld bc, user_exec 
a25b 23			inc hl 
a25c 71			ld (hl), c     ; poke address of user_exec 
a25d 23			inc hl 
a25e 70			ld (hl), b     
a25f			; 
a25f			;	inc hl 
a25f			;	ld (hl), 0cdh     ; TODO get bytes poke "call  " 
a25f			; 
a25f			; 
a25f			;	ld bc, macro_forth_rsp_next 
a25f			;	inc hl 
a25f			;	ld (hl), c     ; poke address of FORTH_RSP_NEXT 
a25f			;	inc hl 
a25f			;	ld (hl), b     
a25f			; 
a25f			;	inc hl 
a25f			;	ld (hl), 0cdh     ; TODO get bytes poke "call  " 
a25f			; 
a25f			; 
a25f			;	inc hl 
a25f			;	ld bc, forthexec 
a25f			;	ld (hl), c     ; poke address of forthexec 
a25f			;	inc hl 
a25f			;	ld (hl), b      
a25f			; 
a25f			;	inc hl 
a25f			;	ld (hl), 0c3h     ; TODO get bytes poke "jp  " 
a25f			; 
a25f			;	ld bc, user_dict_next 
a25f			;	inc hl 
a25f			;	ld (hl), c     ; poke address of forthexec 
a25f			;	inc hl 
a25f			;	ld (hl), b      
a25f			 
a25f			; hl is now where we need to copy the word byte data to save this 
a25f			 
a25f 23			inc hl 
a260 22 a3 e2		ld (os_new_exec), hl 
a263			 
a263			; copy definition 
a263			 
a263 eb			ex de, hl 
a264			;	inc de    ; TODO BUG It appears the exec of a uword requires pc to be set 
a264			;	inc de    ; skip the PC for this parse 
a264 3a ab e2		ld a, (os_new_parse_len) 
a267 4f			ld c, a 
a268 06 00		ld b, 0 
a26a ed b0		ldir		 ; copy defintion 
a26c			 
a26c			 
a26c			; poke the address of where the new word bytes live for forthexec 
a26c			 
a26c 2a a1 e2		ld hl, (os_new_exec_ptr)     ; TODO this isnt correct 
a26f			 
a26f ed 5b a3 e2	ld de, (os_new_exec)      
a273			 
a273 73			ld (hl), e 
a274 23			inc hl 
a275 72			ld (hl), d 
a276			 
a276				; TODO copy last user dict word next link to this word 
a276				; TODO update last user dict word to point to this word 
a276			; 
a276			; hl f923 de 812a ; bc 811a 
a276			 
a276			if DEBUG_FORTH_UWORD 
a276 c5			push bc 
a277 ed 4b ad e2	ld bc, (os_new_malloc) 
a27b					DMARK ":0A" 
a27b f5				push af  
a27c 3a 90 a2			ld a, (.dmark)  
a27f 32 65 ee			ld (debug_mark),a  
a282 3a 91 a2			ld a, (.dmark+1)  
a285 32 66 ee			ld (debug_mark+1),a  
a288 3a 92 a2			ld a, (.dmark+2)  
a28b 32 67 ee			ld (debug_mark+2),a  
a28e 18 03			jr .pastdmark  
a290 ..			.dmark: db ":0A"  
a293 f1			.pastdmark: pop af  
a294			endm  
# End of macro DMARK
a294			CALLMONITOR 
a294 cd 6f ee			call debug_vector  
a297				endm  
# End of macro CALLMONITOR
a297 c1			pop bc 
a298			endif 
a298			if DEBUG_FORTH_UWORD 
a298 c5			push bc 
a299 ed 4b ad e2	ld bc, (os_new_malloc) 
a29d 03			inc bc 
a29e 03			inc bc 
a29f 03			inc bc 
a2a0 03			inc bc 
a2a1 03			inc bc 
a2a2 03			inc bc 
a2a3 03			inc bc 
a2a4 03			inc bc 
a2a5			 
a2a5					DMARK ":0B" 
a2a5 f5				push af  
a2a6 3a ba a2			ld a, (.dmark)  
a2a9 32 65 ee			ld (debug_mark),a  
a2ac 3a bb a2			ld a, (.dmark+1)  
a2af 32 66 ee			ld (debug_mark+1),a  
a2b2 3a bc a2			ld a, (.dmark+2)  
a2b5 32 67 ee			ld (debug_mark+2),a  
a2b8 18 03			jr .pastdmark  
a2ba ..			.dmark: db ":0B"  
a2bd f1			.pastdmark: pop af  
a2be			endm  
# End of macro DMARK
a2be			CALLMONITOR 
a2be cd 6f ee			call debug_vector  
a2c1				endm  
# End of macro CALLMONITOR
a2c1 c1			pop bc 
a2c2			endif 
a2c2			 
a2c2			; update word dict linked list for new word 
a2c2			 
a2c2			 
a2c2 2a b8 e5		ld hl, (os_last_new_uword)		; get the start of the last added uword 
a2c5 23			inc hl     ; move to next work linked list ptr 
a2c6			 
a2c6 ed 5b ad e2	ld de, (os_new_malloc)		 ; new next word 
a2ca 73			ld (hl), e 
a2cb 23			inc hl 
a2cc 72			ld (hl), d 
a2cd			 
a2cd			if DEBUG_FORTH_UWORD 
a2cd ed 4b b8 e5	ld bc, (os_last_new_uword)		; get the last word so we can check it worked in debug 
a2d1			endif 
a2d1			 
a2d1 ed 53 b8 e5	ld (os_last_new_uword), de      ; update last new uword ptr 
a2d5			 
a2d5			 
a2d5			if DEBUG_FORTH_UWORD 
a2d5					DMARK ":0+" 
a2d5 f5				push af  
a2d6 3a ea a2			ld a, (.dmark)  
a2d9 32 65 ee			ld (debug_mark),a  
a2dc 3a eb a2			ld a, (.dmark+1)  
a2df 32 66 ee			ld (debug_mark+1),a  
a2e2 3a ec a2			ld a, (.dmark+2)  
a2e5 32 67 ee			ld (debug_mark+2),a  
a2e8 18 03			jr .pastdmark  
a2ea ..			.dmark: db ":0+"  
a2ed f1			.pastdmark: pop af  
a2ee			endm  
# End of macro DMARK
a2ee			CALLMONITOR 
a2ee cd 6f ee			call debug_vector  
a2f1				endm  
# End of macro CALLMONITOR
a2f1			endif 
a2f1			 
a2f1			STACKFRAMECHK OFF $8efe $989f 
a2f1				if DEBUG_STACK_IMB 
a2f1					if OFF 
a2f1						exx 
a2f1						ld hl, $989f 
a2f1						pop de   ; $989f 
a2f1						call cmp16 
a2f1						jr nz, .spnosame 
a2f1						ld hl, $8efe 
a2f1						pop de   ; $8efe 
a2f1						call cmp16 
a2f1						jr z, .spfrsame 
a2f1						.spnosame: call showsperror 
a2f1						.spfrsame: nop 
a2f1						exx 
a2f1					endif 
a2f1				endif 
a2f1			endm 
# End of macro STACKFRAMECHK
a2f1			 
a2f1 c9			ret    ; dont process any remaining parser tokens as they form new word 
a2f2			 
a2f2			 
a2f2			 
a2f2			 
a2f2			;		NEXT 
a2f2			.SCOLN: 
a2f2			;	CWHEAD .DROP 17 '\;' 1 WORD_FLAG_CODE 
a2f2 06			db OPCODE_SCOLN 
a2f3 3e a3		dw .DROP 
a2f5 02			db 2 
a2f6 .. 00		db ";",0           
a2f8			; | ; ( -- )     Terminate new word and return exec to previous exec level | DONE 
a2f8				if DEBUG_FORTH_WORDS_KEY 
a2f8					DMARK "SCN" 
a2f8 f5				push af  
a2f9 3a 0d a3			ld a, (.dmark)  
a2fc 32 65 ee			ld (debug_mark),a  
a2ff 3a 0e a3			ld a, (.dmark+1)  
a302 32 66 ee			ld (debug_mark+1),a  
a305 3a 0f a3			ld a, (.dmark+2)  
a308 32 67 ee			ld (debug_mark+2),a  
a30b 18 03			jr .pastdmark  
a30d ..			.dmark: db "SCN"  
a310 f1			.pastdmark: pop af  
a311			endm  
# End of macro DMARK
a311					CALLMONITOR 
a311 cd 6f ee			call debug_vector  
a314				endm  
# End of macro CALLMONITOR
a314				endif 
a314				FORTH_RSP_TOS 
a314 cd 43 9a			call macro_forth_rsp_tos 
a317				endm 
# End of macro FORTH_RSP_TOS
a317 e5				push hl 
a318				FORTH_RSP_POP 
a318 cd 4d 9a			call macro_forth_rsp_pop 
a31b				endm 
# End of macro FORTH_RSP_POP
a31b e1				pop hl 
a31c			;		ex de,hl 
a31c 22 bc e5			ld (os_tok_ptr),hl 
a31f			 
a31f			if DEBUG_FORTH_UWORD 
a31f					DMARK "SCL" 
a31f f5				push af  
a320 3a 34 a3			ld a, (.dmark)  
a323 32 65 ee			ld (debug_mark),a  
a326 3a 35 a3			ld a, (.dmark+1)  
a329 32 66 ee			ld (debug_mark+1),a  
a32c 3a 36 a3			ld a, (.dmark+2)  
a32f 32 67 ee			ld (debug_mark+2),a  
a332 18 03			jr .pastdmark  
a334 ..			.dmark: db "SCL"  
a337 f1			.pastdmark: pop af  
a338			endm  
# End of macro DMARK
a338			CALLMONITOR 
a338 cd 6f ee			call debug_vector  
a33b				endm  
# End of macro CALLMONITOR
a33b			endif 
a33b				NEXTW 
a33b c3 76 9e			jp macro_next 
a33e				endm 
# End of macro NEXTW
a33e			 
a33e			.DROP: 
a33e			CWHEAD .DUP2 OPCODE_DROP "DROP" 4 WORD_FLAG_CODE 
a33e 1b				db WORD_SYS_CORE+OPCODE_DROP             
a33f 69 a3			dw .DUP2            
a341 05				db 4 + 1 
a342 .. 00			db "DROP",0              
a347				endm 
# End of macro CWHEAD
a347			; | DROP ( w -- )   drop the TOS item   | DONE 
a347				if DEBUG_FORTH_WORDS_KEY 
a347					DMARK "DRP" 
a347 f5				push af  
a348 3a 5c a3			ld a, (.dmark)  
a34b 32 65 ee			ld (debug_mark),a  
a34e 3a 5d a3			ld a, (.dmark+1)  
a351 32 66 ee			ld (debug_mark+1),a  
a354 3a 5e a3			ld a, (.dmark+2)  
a357 32 67 ee			ld (debug_mark+2),a  
a35a 18 03			jr .pastdmark  
a35c ..			.dmark: db "DRP"  
a35f f1			.pastdmark: pop af  
a360			endm  
# End of macro DMARK
a360					CALLMONITOR 
a360 cd 6f ee			call debug_vector  
a363				endm  
# End of macro CALLMONITOR
a363				endif 
a363				FORTH_DSP_POP 
a363 cd 42 9d			call macro_forth_dsp_pop 
a366				endm 
# End of macro FORTH_DSP_POP
a366				NEXTW 
a366 c3 76 9e			jp macro_next 
a369				endm 
# End of macro NEXTW
a369			.DUP2: 
a369			CWHEAD .DROP2 OPCODE_DUP2 "2DUP" 4 WORD_FLAG_CODE 
a369 1c				db WORD_SYS_CORE+OPCODE_DUP2             
a36a ae a3			dw .DROP2            
a36c 05				db 4 + 1 
a36d .. 00			db "2DUP",0              
a372				endm 
# End of macro CWHEAD
a372			; | 2DUP ( w1 w2 -- w1 w2 w1 w2 ) Duplicate the top two items on TOS  (Only works for numerics) | DONE 
a372				if DEBUG_FORTH_WORDS_KEY 
a372					DMARK "2DU" 
a372 f5				push af  
a373 3a 87 a3			ld a, (.dmark)  
a376 32 65 ee			ld (debug_mark),a  
a379 3a 88 a3			ld a, (.dmark+1)  
a37c 32 66 ee			ld (debug_mark+1),a  
a37f 3a 89 a3			ld a, (.dmark+2)  
a382 32 67 ee			ld (debug_mark+2),a  
a385 18 03			jr .pastdmark  
a387 ..			.dmark: db "2DU"  
a38a f1			.pastdmark: pop af  
a38b			endm  
# End of macro DMARK
a38b					CALLMONITOR 
a38b cd 6f ee			call debug_vector  
a38e				endm  
# End of macro CALLMONITOR
a38e				endif 
a38e				FORTH_DSP_VALUEHL 
a38e cd 8a 9c			call macro_dsp_valuehl 
a391				endm 
# End of macro FORTH_DSP_VALUEHL
a391 e5				push hl      ; 2 
a392			 
a392				FORTH_DSP_POP 
a392 cd 42 9d			call macro_forth_dsp_pop 
a395				endm 
# End of macro FORTH_DSP_POP
a395				 
a395				FORTH_DSP_VALUEHL 
a395 cd 8a 9c			call macro_dsp_valuehl 
a398				endm 
# End of macro FORTH_DSP_VALUEHL
a398			;		push hl      ; 1 
a398			 
a398				FORTH_DSP_POP 
a398 cd 42 9d			call macro_forth_dsp_pop 
a39b				endm 
# End of macro FORTH_DSP_POP
a39b			 
a39b			;		pop hl       ; 1 
a39b d1				pop de       ; 2 
a39c			 
a39c cd 85 9a			call forth_push_numhl 
a39f eb				ex de, hl 
a3a0 cd 85 9a			call forth_push_numhl 
a3a3			 
a3a3				 
a3a3 eb				ex de, hl 
a3a4			 
a3a4 cd 85 9a			call forth_push_numhl 
a3a7 eb				ex de, hl 
a3a8 cd 85 9a			call forth_push_numhl 
a3ab			 
a3ab			 
a3ab				NEXTW 
a3ab c3 76 9e			jp macro_next 
a3ae				endm 
# End of macro NEXTW
a3ae			.DROP2: 
a3ae			CWHEAD .PICK OPCODE_DROP2 "2DROP" 5 WORD_FLAG_CODE 
a3ae 1d				db WORD_SYS_CORE+OPCODE_DROP2             
a3af dd a3			dw .PICK            
a3b1 06				db 5 + 1 
a3b2 .. 00			db "2DROP",0              
a3b8				endm 
# End of macro CWHEAD
a3b8			; | 2DROP ( w w -- )    Double drop | DONE 
a3b8				if DEBUG_FORTH_WORDS_KEY 
a3b8					DMARK "2DR" 
a3b8 f5				push af  
a3b9 3a cd a3			ld a, (.dmark)  
a3bc 32 65 ee			ld (debug_mark),a  
a3bf 3a ce a3			ld a, (.dmark+1)  
a3c2 32 66 ee			ld (debug_mark+1),a  
a3c5 3a cf a3			ld a, (.dmark+2)  
a3c8 32 67 ee			ld (debug_mark+2),a  
a3cb 18 03			jr .pastdmark  
a3cd ..			.dmark: db "2DR"  
a3d0 f1			.pastdmark: pop af  
a3d1			endm  
# End of macro DMARK
a3d1					CALLMONITOR 
a3d1 cd 6f ee			call debug_vector  
a3d4				endm  
# End of macro CALLMONITOR
a3d4				endif 
a3d4				FORTH_DSP_POP 
a3d4 cd 42 9d			call macro_forth_dsp_pop 
a3d7				endm 
# End of macro FORTH_DSP_POP
a3d7				FORTH_DSP_POP 
a3d7 cd 42 9d			call macro_forth_dsp_pop 
a3da				endm 
# End of macro FORTH_DSP_POP
a3da				NEXTW 
a3da c3 76 9e			jp macro_next 
a3dd				endm 
# End of macro NEXTW
a3dd			.PICK: 
a3dd			CWHEAD .SWAP2 99 "PICK" 4 WORD_FLAG_CODE 
a3dd 77				db WORD_SYS_CORE+99             
a3de 1c a4			dw .SWAP2            
a3e0 05				db 4 + 1 
a3e1 .. 00			db "PICK",0              
a3e6				endm 
# End of macro CWHEAD
a3e6			; | PICK ( ux ... u x -- ux ... u n )    Replace x on stack with the item from position x on stack  | TODO 
a3e6				if DEBUG_FORTH_WORDS_KEY 
a3e6					DMARK "PIK" 
a3e6 f5				push af  
a3e7 3a fb a3			ld a, (.dmark)  
a3ea 32 65 ee			ld (debug_mark),a  
a3ed 3a fc a3			ld a, (.dmark+1)  
a3f0 32 66 ee			ld (debug_mark+1),a  
a3f3 3a fd a3			ld a, (.dmark+2)  
a3f6 32 67 ee			ld (debug_mark+2),a  
a3f9 18 03			jr .pastdmark  
a3fb ..			.dmark: db "PIK"  
a3fe f1			.pastdmark: pop af  
a3ff			endm  
# End of macro DMARK
a3ff					CALLMONITOR 
a3ff cd 6f ee			call debug_vector  
a402				endm  
# End of macro CALLMONITOR
a402				endif 
a402			 
a402				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a402 cd 8a 9c			call macro_dsp_valuehl 
a405				endm 
# End of macro FORTH_DSP_VALUEHL
a405				 
a405				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a405 cd 42 9d			call macro_forth_dsp_pop 
a408				endm 
# End of macro FORTH_DSP_POP
a408			 
a408				; init from TOS 
a408 45				ld b, l 
a409 21 e8 e9			ld hl, cli_data_sp 
a40c			.pkl: 
a40c 2b				dec hl 
a40d 2b				dec hl 
a40e 2b				dec hl 
a40f			 
a40f 10 fb			djnz .pkl 
a411			 
a411				 
a411				; TODO do type check with correct push 
a411			 
a411 23				inc hl 
a412				;call loadwordinhl 
a412 5e				ld e, (hl) 
a413 23				inc hl 
a414 56				ld d, (hl) 
a415 eb				ex de,hl 
a416 cd 85 9a			call forth_push_numhl 
a419			 
a419				NEXTW 
a419 c3 76 9e			jp macro_next 
a41c				endm 
# End of macro NEXTW
a41c			.SWAP2: 
a41c			CWHEAD .AT OPCODE_SWAP2 "2SWAP" 5 WORD_FLAG_CODE 
a41c 1e				db WORD_SYS_CORE+OPCODE_SWAP2             
a41d 9d a4			dw .AT            
a41f 06				db 5 + 1 
a420 .. 00			db "2SWAP",0              
a426				endm 
# End of macro CWHEAD
a426			; | 2SWAP ( w1 w2 w3 w4 -- w3 w4 w1 w2 ) Swap top pair of items | TODO 
a426				if DEBUG_FORTH_WORDS_KEY 
a426					DMARK "2SW" 
a426 f5				push af  
a427 3a 3b a4			ld a, (.dmark)  
a42a 32 65 ee			ld (debug_mark),a  
a42d 3a 3c a4			ld a, (.dmark+1)  
a430 32 66 ee			ld (debug_mark+1),a  
a433 3a 3d a4			ld a, (.dmark+2)  
a436 32 67 ee			ld (debug_mark+2),a  
a439 18 03			jr .pastdmark  
a43b ..			.dmark: db "2SW"  
a43e f1			.pastdmark: pop af  
a43f			endm  
# End of macro DMARK
a43f					CALLMONITOR 
a43f cd 6f ee			call debug_vector  
a442				endm  
# End of macro CALLMONITOR
a442				endif 
a442			; TODO Use os stack swap memory 
a442			 
a442				FORTH_DSP_PTR 0     ; TOS    w4 
a442 2a e8 e9			ld hl,(cli_data_sp) 
a445 11 00 00			ld de, 0 * 3 
a448 ed 52			sbc hl, de 
a44a				endm 
# End of macro FORTH_DSP_PTR
a44a cd c2 9d			call hltostack1 
a44d			  
a44d				FORTH_DSP_PTR 1     ; TOS    w3 
a44d 2a e8 e9			ld hl,(cli_data_sp) 
a450 11 03 00			ld de, 1 * 3 
a453 ed 52			sbc hl, de 
a455				endm 
# End of macro FORTH_DSP_PTR
a455 cd c8 9d			call hltostack2 
a458			 
a458			 
a458			 
a458				FORTH_DSP_PTR 2     ; TOS    w2 
a458 2a e8 e9			ld hl,(cli_data_sp) 
a45b 11 06 00			ld de, 2 * 3 
a45e ed 52			sbc hl, de 
a460				endm 
# End of macro FORTH_DSP_PTR
a460 cd ce 9d			call hltostack3 
a463			 
a463				FORTH_DSP_PTR 3     ; TOS   w1 
a463 2a e8 e9			ld hl,(cli_data_sp) 
a466 11 09 00			ld de, 3 * 3 
a469 ed 52			sbc hl, de 
a46b				endm 
# End of macro FORTH_DSP_PTR
a46b cd d4 9d			call hltostack4 
a46e			 
a46e			 
a46e			 
a46e			 
a46e				FORTH_DSP_PTR 0     ; TOS 
a46e 2a e8 e9			ld hl,(cli_data_sp) 
a471 11 00 00			ld de, 0 * 3 
a474 ed 52			sbc hl, de 
a476				endm 
# End of macro FORTH_DSP_PTR
a476 cd e6 9d			call hlfromstack3 
a479			 
a479				FORTH_DSP_PTR 1     ; TOS 
a479 2a e8 e9			ld hl,(cli_data_sp) 
a47c 11 03 00			ld de, 1 * 3 
a47f ed 52			sbc hl, de 
a481				endm 
# End of macro FORTH_DSP_PTR
a481 cd ec 9d			call hlfromstack4 
a484			 
a484			 
a484			 
a484				FORTH_DSP_PTR 2     ; TOS 
a484 2a e8 e9			ld hl,(cli_data_sp) 
a487 11 06 00			ld de, 2 * 3 
a48a ed 52			sbc hl, de 
a48c				endm 
# End of macro FORTH_DSP_PTR
a48c cd da 9d			call hlfromstack1 
a48f			 
a48f				FORTH_DSP_PTR 3     ; TOS 
a48f 2a e8 e9			ld hl,(cli_data_sp) 
a492 11 09 00			ld de, 3 * 3 
a495 ed 52			sbc hl, de 
a497				endm 
# End of macro FORTH_DSP_PTR
a497 cd e0 9d			call hlfromstack2 
a49a			 
a49a				NEXTW 
a49a c3 76 9e			jp macro_next 
a49d				endm 
# End of macro NEXTW
a49d			.AT: 
a49d			CWHEAD .CAT OPCODE_AT "@" 1 WORD_FLAG_CODE 
a49d 1f				db WORD_SYS_CORE+OPCODE_AT             
a49e cf a4			dw .CAT            
a4a0 02				db 1 + 1 
a4a1 .. 00			db "@",0              
a4a3				endm 
# End of macro CWHEAD
a4a3			; | @ ( w -- ) Push onto TOS byte stored at address   | DONE 
a4a3			 
a4a3				if DEBUG_FORTH_WORDS_KEY 
a4a3					DMARK "AT." 
a4a3 f5				push af  
a4a4 3a b8 a4			ld a, (.dmark)  
a4a7 32 65 ee			ld (debug_mark),a  
a4aa 3a b9 a4			ld a, (.dmark+1)  
a4ad 32 66 ee			ld (debug_mark+1),a  
a4b0 3a ba a4			ld a, (.dmark+2)  
a4b3 32 67 ee			ld (debug_mark+2),a  
a4b6 18 03			jr .pastdmark  
a4b8 ..			.dmark: db "AT."  
a4bb f1			.pastdmark: pop af  
a4bc			endm  
# End of macro DMARK
a4bc					CALLMONITOR 
a4bc cd 6f ee			call debug_vector  
a4bf				endm  
# End of macro CALLMONITOR
a4bf				endif 
a4bf			.getbyteat:	 
a4bf				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a4bf cd 8a 9c			call macro_dsp_valuehl 
a4c2				endm 
# End of macro FORTH_DSP_VALUEHL
a4c2				 
a4c2			;		push hl 
a4c2			 
a4c2				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a4c2 cd 42 9d			call macro_forth_dsp_pop 
a4c5				endm 
# End of macro FORTH_DSP_POP
a4c5			 
a4c5			;		pop hl 
a4c5			 
a4c5 7e				ld a, (hl) 
a4c6			 
a4c6 6f				ld l, a 
a4c7 26 00			ld h, 0 
a4c9 cd 85 9a			call forth_push_numhl 
a4cc			 
a4cc				NEXTW 
a4cc c3 76 9e			jp macro_next 
a4cf				endm 
# End of macro NEXTW
a4cf			.CAT: 
a4cf			CWHEAD .BANG OPCODE_CAT "C@" 2 WORD_FLAG_CODE 
a4cf 20				db WORD_SYS_CORE+OPCODE_CAT             
a4d0 f8 a4			dw .BANG            
a4d2 03				db 2 + 1 
a4d3 .. 00			db "C@",0              
a4d6				endm 
# End of macro CWHEAD
a4d6			; | C@  ( w -- ) Push onto TOS byte stored at address   | DONE 
a4d6				if DEBUG_FORTH_WORDS_KEY 
a4d6					DMARK "CAA" 
a4d6 f5				push af  
a4d7 3a eb a4			ld a, (.dmark)  
a4da 32 65 ee			ld (debug_mark),a  
a4dd 3a ec a4			ld a, (.dmark+1)  
a4e0 32 66 ee			ld (debug_mark+1),a  
a4e3 3a ed a4			ld a, (.dmark+2)  
a4e6 32 67 ee			ld (debug_mark+2),a  
a4e9 18 03			jr .pastdmark  
a4eb ..			.dmark: db "CAA"  
a4ee f1			.pastdmark: pop af  
a4ef			endm  
# End of macro DMARK
a4ef					CALLMONITOR 
a4ef cd 6f ee			call debug_vector  
a4f2				endm  
# End of macro CALLMONITOR
a4f2				endif 
a4f2 c3 bf a4			jp .getbyteat 
a4f5				NEXTW 
a4f5 c3 76 9e			jp macro_next 
a4f8				endm 
# End of macro NEXTW
a4f8			.BANG: 
a4f8			CWHEAD .CBANG OPCODE_BANG "!" 1 WORD_FLAG_CODE 
a4f8 21				db WORD_SYS_CORE+OPCODE_BANG             
a4f9 2e a5			dw .CBANG            
a4fb 02				db 1 + 1 
a4fc .. 00			db "!",0              
a4fe				endm 
# End of macro CWHEAD
a4fe			; | ! ( x w -- ) Store x at address w      | DONE 
a4fe				if DEBUG_FORTH_WORDS_KEY 
a4fe					DMARK "BNG" 
a4fe f5				push af  
a4ff 3a 13 a5			ld a, (.dmark)  
a502 32 65 ee			ld (debug_mark),a  
a505 3a 14 a5			ld a, (.dmark+1)  
a508 32 66 ee			ld (debug_mark+1),a  
a50b 3a 15 a5			ld a, (.dmark+2)  
a50e 32 67 ee			ld (debug_mark+2),a  
a511 18 03			jr .pastdmark  
a513 ..			.dmark: db "BNG"  
a516 f1			.pastdmark: pop af  
a517			endm  
# End of macro DMARK
a517					CALLMONITOR 
a517 cd 6f ee			call debug_vector  
a51a				endm  
# End of macro CALLMONITOR
a51a				endif 
a51a			 
a51a			.storebyteat:		 
a51a				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a51a cd 8a 9c			call macro_dsp_valuehl 
a51d				endm 
# End of macro FORTH_DSP_VALUEHL
a51d				 
a51d e5				push hl 
a51e			 
a51e				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a51e cd 42 9d			call macro_forth_dsp_pop 
a521				endm 
# End of macro FORTH_DSP_POP
a521			 
a521				; get byte to poke 
a521			 
a521				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a521 cd 8a 9c			call macro_dsp_valuehl 
a524				endm 
# End of macro FORTH_DSP_VALUEHL
a524 e5				push hl 
a525			 
a525			 
a525				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a525 cd 42 9d			call macro_forth_dsp_pop 
a528				endm 
# End of macro FORTH_DSP_POP
a528			 
a528			 
a528 d1				pop de 
a529 e1				pop hl 
a52a			 
a52a 73				ld (hl),e 
a52b			 
a52b			 
a52b				NEXTW 
a52b c3 76 9e			jp macro_next 
a52e				endm 
# End of macro NEXTW
a52e			.CBANG: 
a52e			CWHEAD .SCALL OPCODE_CBANG "C!" 2 WORD_FLAG_CODE 
a52e 22				db WORD_SYS_CORE+OPCODE_CBANG             
a52f 57 a5			dw .SCALL            
a531 03				db 2 + 1 
a532 .. 00			db "C!",0              
a535				endm 
# End of macro CWHEAD
a535			; | C!  ( x w -- ) Store x at address w  | DONE 
a535				if DEBUG_FORTH_WORDS_KEY 
a535					DMARK "CBA" 
a535 f5				push af  
a536 3a 4a a5			ld a, (.dmark)  
a539 32 65 ee			ld (debug_mark),a  
a53c 3a 4b a5			ld a, (.dmark+1)  
a53f 32 66 ee			ld (debug_mark+1),a  
a542 3a 4c a5			ld a, (.dmark+2)  
a545 32 67 ee			ld (debug_mark+2),a  
a548 18 03			jr .pastdmark  
a54a ..			.dmark: db "CBA"  
a54d f1			.pastdmark: pop af  
a54e			endm  
# End of macro DMARK
a54e					CALLMONITOR 
a54e cd 6f ee			call debug_vector  
a551				endm  
# End of macro CALLMONITOR
a551				endif 
a551 c3 1a a5			jp .storebyteat 
a554				NEXTW 
a554 c3 76 9e			jp macro_next 
a557				endm 
# End of macro NEXTW
a557			.SCALL: 
a557			CWHEAD .DEPTH OPCODE_SCALL "CALL" 4 WORD_FLAG_CODE 
a557 23				db WORD_SYS_CORE+OPCODE_SCALL             
a558 8b a5			dw .DEPTH            
a55a 05				db 4 + 1 
a55b .. 00			db "CALL",0              
a560				endm 
# End of macro CWHEAD
a560			; | CALL ( w -- w  ) machine code call to address w  push the result of hl to stack | DONE 
a560				if DEBUG_FORTH_WORDS_KEY 
a560					DMARK "CLL" 
a560 f5				push af  
a561 3a 75 a5			ld a, (.dmark)  
a564 32 65 ee			ld (debug_mark),a  
a567 3a 76 a5			ld a, (.dmark+1)  
a56a 32 66 ee			ld (debug_mark+1),a  
a56d 3a 77 a5			ld a, (.dmark+2)  
a570 32 67 ee			ld (debug_mark+2),a  
a573 18 03			jr .pastdmark  
a575 ..			.dmark: db "CLL"  
a578 f1			.pastdmark: pop af  
a579			endm  
# End of macro DMARK
a579					CALLMONITOR 
a579 cd 6f ee			call debug_vector  
a57c				endm  
# End of macro CALLMONITOR
a57c				endif 
a57c			 
a57c				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a57c cd 8a 9c			call macro_dsp_valuehl 
a57f				endm 
# End of macro FORTH_DSP_VALUEHL
a57f			 
a57f			;		push hl 
a57f			 
a57f				; destroy value TOS 
a57f			 
a57f				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a57f cd 42 9d			call macro_forth_dsp_pop 
a582				endm 
# End of macro FORTH_DSP_POP
a582			 
a582					 
a582			;		pop hl 
a582			 
a582				; how to do a call with hl???? save SP? 
a582 cd 1a 9e			call forth_call_hl 
a585			 
a585			 
a585				; TODO push value back onto stack for another op etc 
a585			 
a585 cd 85 9a			call forth_push_numhl 
a588				NEXTW 
a588 c3 76 9e			jp macro_next 
a58b				endm 
# End of macro NEXTW
a58b			.DEPTH: 
a58b			CWHEAD .OVER OPCODE_DEPTH "DEPTH" 5 WORD_FLAG_CODE 
a58b 24				db WORD_SYS_CORE+OPCODE_DEPTH             
a58c c8 a5			dw .OVER            
a58e 06				db 5 + 1 
a58f .. 00			db "DEPTH",0              
a595				endm 
# End of macro CWHEAD
a595			; | DEPTH ( -- u ) Push count of stack | DONE 
a595				; take current TOS and remove from base value div by two to get count 
a595				if DEBUG_FORTH_WORDS_KEY 
a595					DMARK "DEP" 
a595 f5				push af  
a596 3a aa a5			ld a, (.dmark)  
a599 32 65 ee			ld (debug_mark),a  
a59c 3a ab a5			ld a, (.dmark+1)  
a59f 32 66 ee			ld (debug_mark+1),a  
a5a2 3a ac a5			ld a, (.dmark+2)  
a5a5 32 67 ee			ld (debug_mark+2),a  
a5a8 18 03			jr .pastdmark  
a5aa ..			.dmark: db "DEP"  
a5ad f1			.pastdmark: pop af  
a5ae			endm  
# End of macro DMARK
a5ae					CALLMONITOR 
a5ae cd 6f ee			call debug_vector  
a5b1				endm  
# End of macro CALLMONITOR
a5b1				endif 
a5b1			 
a5b1			 
a5b1 2a e8 e9		ld hl, (cli_data_sp) 
a5b4 11 22 e8		ld de, cli_data_stack 
a5b7 ed 52		sbc hl,de 
a5b9			 
a5b9			; div by size of stack item 
a5b9			 
a5b9 5d			ld e,l 
a5ba 0e 03		ld c, 3 
a5bc cd 7a 8c		call Div8 
a5bf			 
a5bf 6f			ld l,a 
a5c0 26 00		ld h,0 
a5c2			 
a5c2			;srl h 
a5c2			;rr l 
a5c2			 
a5c2 cd 85 9a			call forth_push_numhl 
a5c5				NEXTW 
a5c5 c3 76 9e			jp macro_next 
a5c8				endm 
# End of macro NEXTW
a5c8			.OVER: 
a5c8			CWHEAD .PAUSE 46 "OVER" 4 WORD_FLAG_CODE 
a5c8 42				db WORD_SYS_CORE+46             
a5c9 0f a6			dw .PAUSE            
a5cb 05				db 4 + 1 
a5cc .. 00			db "OVER",0              
a5d1				endm 
# End of macro CWHEAD
a5d1			; | OVER ( n1 n2 -- n1 n2 n1 )  Copy one below TOS onto TOS | TOFIX 
a5d1				if DEBUG_FORTH_WORDS_KEY 
a5d1					DMARK "OVR" 
a5d1 f5				push af  
a5d2 3a e6 a5			ld a, (.dmark)  
a5d5 32 65 ee			ld (debug_mark),a  
a5d8 3a e7 a5			ld a, (.dmark+1)  
a5db 32 66 ee			ld (debug_mark+1),a  
a5de 3a e8 a5			ld a, (.dmark+2)  
a5e1 32 67 ee			ld (debug_mark+2),a  
a5e4 18 03			jr .pastdmark  
a5e6 ..			.dmark: db "OVR"  
a5e9 f1			.pastdmark: pop af  
a5ea			endm  
# End of macro DMARK
a5ea					CALLMONITOR 
a5ea cd 6f ee			call debug_vector  
a5ed				endm  
# End of macro CALLMONITOR
a5ed				endif 
a5ed			 
a5ed			; TODO Use os stack swap memory 
a5ed			 
a5ed				; work out what type we are looking at 
a5ed			 
a5ed				FORTH_DSP_PTR 1 
a5ed 2a e8 e9			ld hl,(cli_data_sp) 
a5f0 11 03 00			ld de, 1 * 3 
a5f3 ed 52			sbc hl, de 
a5f5				endm 
# End of macro FORTH_DSP_PTR
a5f5			 
a5f5 7e				ld a, (hl) 
a5f6				 
a5f6 f5				push af 
a5f7				; whatever the type lets get the pointer or word 
a5f7 23				inc hl 
a5f8			;; 
a5f8			 
a5f8				; type check now to decide on how to push  
a5f8			 
a5f8 cd f8 9d			call loadwordinhl 
a5fb f1				pop af 
a5fc fe 01			cp DS_TYPE_STR 
a5fe 28 06			jr z, .ovstr 
a600			 
a600				; we have a numeric so load the word and push 
a600			;	ld e, (hl) 
a600			;	inc hl 
a600			;	ld d, (hl) 
a600			;	ex de, hl 
a600 cd 85 9a			call forth_push_numhl 
a603				NEXTW 
a603 c3 76 9e			jp macro_next 
a606				endm 
# End of macro NEXTW
a606			 
a606			.ovstr: 
a606				; ok, a string so get the pointer and push as a string 
a606			 
a606			;	call loadwordinhl 
a606 cd f3 9a			call forth_push_str 
a609				NEXTW 
a609 c3 76 9e			jp macro_next 
a60c				endm 
# End of macro NEXTW
a60c			 
a60c			;	FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a60c			;	push hl    ; n2 
a60c			;	FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a60c			; 
a60c			;	FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a60c			;	push hl    ; n1 
a60c			;	FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a60c			; 
a60c			;	pop de     ; n1 
a60c			;	pop hl     ; n2 
a60c			; 
a60c			;	push de 
a60c			;	push hl 
a60c			;	push de 
a60c			 
a60c				; push back  
a60c			 
a60c			;	pop hl 
a60c			;	call forth_push_numhl 
a60c			;	pop hl 
a60c			;	call forth_push_numhl 
a60c			;	pop hl 
a60c			;	call forth_push_numhl 
a60c				NEXTW 
a60c c3 76 9e			jp macro_next 
a60f				endm 
# End of macro NEXTW
a60f			 
a60f			.PAUSE: 
a60f			CWHEAD .PAUSES 47 "PAUSEMS" 7 WORD_FLAG_CODE 
a60f 43				db WORD_SYS_CORE+47             
a610 44 a6			dw .PAUSES            
a612 08				db 7 + 1 
a613 .. 00			db "PAUSEMS",0              
a61b				endm 
# End of macro CWHEAD
a61b			; | PAUSEMS ( n -- )  Pause for n millisconds | DONE 
a61b				if DEBUG_FORTH_WORDS_KEY 
a61b					DMARK "PMS" 
a61b f5				push af  
a61c 3a 30 a6			ld a, (.dmark)  
a61f 32 65 ee			ld (debug_mark),a  
a622 3a 31 a6			ld a, (.dmark+1)  
a625 32 66 ee			ld (debug_mark+1),a  
a628 3a 32 a6			ld a, (.dmark+2)  
a62b 32 67 ee			ld (debug_mark+2),a  
a62e 18 03			jr .pastdmark  
a630 ..			.dmark: db "PMS"  
a633 f1			.pastdmark: pop af  
a634			endm  
# End of macro DMARK
a634					CALLMONITOR 
a634 cd 6f ee			call debug_vector  
a637				endm  
# End of macro CALLMONITOR
a637				endif 
a637				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a637 cd 8a 9c			call macro_dsp_valuehl 
a63a				endm 
# End of macro FORTH_DSP_VALUEHL
a63a			;		push hl    ; n2 
a63a				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a63a cd 42 9d			call macro_forth_dsp_pop 
a63d				endm 
# End of macro FORTH_DSP_POP
a63d			;		pop hl 
a63d			 
a63d 7d				ld a, l 
a63e cd e5 89			call aDelayInMS 
a641			       NEXTW 
a641 c3 76 9e			jp macro_next 
a644				endm 
# End of macro NEXTW
a644			.PAUSES:  
a644			CWHEAD .ROT 48 "PAUSE" 5 WORD_FLAG_CODE 
a644 44				db WORD_SYS_CORE+48             
a645 b3 a6			dw .ROT            
a647 06				db 5 + 1 
a648 .. 00			db "PAUSE",0              
a64e				endm 
# End of macro CWHEAD
a64e			; | PAUSE ( n -- )  Pause for n seconds | DONE 
a64e				if DEBUG_FORTH_WORDS_KEY 
a64e					DMARK "PAU" 
a64e f5				push af  
a64f 3a 63 a6			ld a, (.dmark)  
a652 32 65 ee			ld (debug_mark),a  
a655 3a 64 a6			ld a, (.dmark+1)  
a658 32 66 ee			ld (debug_mark+1),a  
a65b 3a 65 a6			ld a, (.dmark+2)  
a65e 32 67 ee			ld (debug_mark+2),a  
a661 18 03			jr .pastdmark  
a663 ..			.dmark: db "PAU"  
a666 f1			.pastdmark: pop af  
a667			endm  
# End of macro DMARK
a667					CALLMONITOR 
a667 cd 6f ee			call debug_vector  
a66a				endm  
# End of macro CALLMONITOR
a66a				endif 
a66a				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a66a cd 8a 9c			call macro_dsp_valuehl 
a66d				endm 
# End of macro FORTH_DSP_VALUEHL
a66d			;		push hl    ; n2 
a66d				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a66d cd 42 9d			call macro_forth_dsp_pop 
a670				endm 
# End of macro FORTH_DSP_POP
a670			;		pop hl 
a670 45				ld b, l 
a671				if DEBUG_FORTH_WORDS 
a671					DMARK "PAU" 
a671 f5				push af  
a672 3a 86 a6			ld a, (.dmark)  
a675 32 65 ee			ld (debug_mark),a  
a678 3a 87 a6			ld a, (.dmark+1)  
a67b 32 66 ee			ld (debug_mark+1),a  
a67e 3a 88 a6			ld a, (.dmark+2)  
a681 32 67 ee			ld (debug_mark+2),a  
a684 18 03			jr .pastdmark  
a686 ..			.dmark: db "PAU"  
a689 f1			.pastdmark: pop af  
a68a			endm  
# End of macro DMARK
a68a					CALLMONITOR 
a68a cd 6f ee			call debug_vector  
a68d				endm  
# End of macro CALLMONITOR
a68d				endif 
a68d c5			.pauses1:	push bc 
a68e cd 00 8a			call delay1s 
a691 c1				pop bc 
a692				if DEBUG_FORTH_WORDS 
a692					DMARK "PA1" 
a692 f5				push af  
a693 3a a7 a6			ld a, (.dmark)  
a696 32 65 ee			ld (debug_mark),a  
a699 3a a8 a6			ld a, (.dmark+1)  
a69c 32 66 ee			ld (debug_mark+1),a  
a69f 3a a9 a6			ld a, (.dmark+2)  
a6a2 32 67 ee			ld (debug_mark+2),a  
a6a5 18 03			jr .pastdmark  
a6a7 ..			.dmark: db "PA1"  
a6aa f1			.pastdmark: pop af  
a6ab			endm  
# End of macro DMARK
a6ab					CALLMONITOR 
a6ab cd 6f ee			call debug_vector  
a6ae				endm  
# End of macro CALLMONITOR
a6ae				endif 
a6ae 10 dd			djnz .pauses1 
a6b0			 
a6b0			       NEXTW 
a6b0 c3 76 9e			jp macro_next 
a6b3				endm 
# End of macro NEXTW
a6b3			.ROT: 
a6b3			CWHEAD .UWORDS 49 "ROT" 3 WORD_FLAG_CODE 
a6b3 45				db WORD_SYS_CORE+49             
a6b4 1c a7			dw .UWORDS            
a6b6 04				db 3 + 1 
a6b7 .. 00			db "ROT",0              
a6bb				endm 
# End of macro CWHEAD
a6bb			; | ROT ( u1 u2 u3 -- u2 u3 u1 ) Rotate top three items on stack | TOFIX 
a6bb				if DEBUG_FORTH_WORDS_KEY 
a6bb					DMARK "ROT" 
a6bb f5				push af  
a6bc 3a d0 a6			ld a, (.dmark)  
a6bf 32 65 ee			ld (debug_mark),a  
a6c2 3a d1 a6			ld a, (.dmark+1)  
a6c5 32 66 ee			ld (debug_mark+1),a  
a6c8 3a d2 a6			ld a, (.dmark+2)  
a6cb 32 67 ee			ld (debug_mark+2),a  
a6ce 18 03			jr .pastdmark  
a6d0 ..			.dmark: db "ROT"  
a6d3 f1			.pastdmark: pop af  
a6d4			endm  
# End of macro DMARK
a6d4					CALLMONITOR 
a6d4 cd 6f ee			call debug_vector  
a6d7				endm  
# End of macro CALLMONITOR
a6d7				endif 
a6d7			 
a6d7			; DONE Use os stack swap memory 
a6d7			 
a6d7				FORTH_DSP_PTR 0     ; u3 
a6d7 2a e8 e9			ld hl,(cli_data_sp) 
a6da 11 00 00			ld de, 0 * 3 
a6dd ed 52			sbc hl, de 
a6df				endm 
# End of macro FORTH_DSP_PTR
a6df cd c2 9d			call hltostack1     
a6e2			  
a6e2				FORTH_DSP_PTR 1     ; u2 
a6e2 2a e8 e9			ld hl,(cli_data_sp) 
a6e5 11 03 00			ld de, 1 * 3 
a6e8 ed 52			sbc hl, de 
a6ea				endm 
# End of macro FORTH_DSP_PTR
a6ea cd c8 9d			call hltostack2      
a6ed			 
a6ed				FORTH_DSP_PTR 2     ; u1 
a6ed 2a e8 e9			ld hl,(cli_data_sp) 
a6f0 11 06 00			ld de, 2 * 3 
a6f3 ed 52			sbc hl, de 
a6f5				endm 
# End of macro FORTH_DSP_PTR
a6f5 cd ce 9d			call hltostack3 
a6f8			 
a6f8			 
a6f8				FORTH_DSP_PTR 0     ;  
a6f8 2a e8 e9			ld hl,(cli_data_sp) 
a6fb 11 00 00			ld de, 0 * 3 
a6fe ed 52			sbc hl, de 
a700				endm 
# End of macro FORTH_DSP_PTR
a700 cd e6 9d			call hlfromstack3 
a703			 
a703				FORTH_DSP_PTR 1     ; TOS 
a703 2a e8 e9			ld hl,(cli_data_sp) 
a706 11 03 00			ld de, 1 * 3 
a709 ed 52			sbc hl, de 
a70b				endm 
# End of macro FORTH_DSP_PTR
a70b cd da 9d			call hlfromstack1 
a70e			 
a70e				FORTH_DSP_PTR 2     ; TOS 
a70e 2a e8 e9			ld hl,(cli_data_sp) 
a711 11 06 00			ld de, 2 * 3 
a714 ed 52			sbc hl, de 
a716				endm 
# End of macro FORTH_DSP_PTR
a716 cd e0 9d			call hlfromstack2 
a719			 
a719			 
a719			;	FORTH_DSP_VALUEHL 
a719			;	push hl    ; u3  
a719			; 
a719			;	FORTH_DSP_POP 
a719			; 
a719			;	FORTH_DSP_VALUEHL 
a719			;	push hl     ; u2 
a719			; 
a719			;	FORTH_DSP_POP 
a719			; 
a719			;	FORTH_DSP_VALUEHL 
a719			;	push hl     ; u1 
a719			; 
a719			;	FORTH_DSP_POP 
a719			; 
a719			;	pop bc      ; u1 
a719			;	pop hl      ; u2 
a719			;	pop de      ; u3 
a719			; 
a719			; 
a719			;	push bc 
a719			;	push de 
a719			;	push hl 
a719			; 
a719			; 
a719			;	pop hl 
a719			;	call forth_push_numhl 
a719			; 
a719			;	pop hl 
a719			;	call forth_push_numhl 
a719			; 
a719			;	pop hl 
a719			;	call forth_push_numhl 
a719				 
a719			 
a719			 
a719			 
a719			 
a719			 
a719			       NEXTW 
a719 c3 76 9e			jp macro_next 
a71c				endm 
# End of macro NEXTW
a71c			 
a71c			.UWORDS: 
a71c			CWHEAD .BP 60 "UWORDS" 6 WORD_FLAG_CODE 
a71c 50				db WORD_SYS_CORE+60             
a71d de a7			dw .BP            
a71f 07				db 6 + 1 
a720 .. 00			db "UWORDS",0              
a727				endm 
# End of macro CWHEAD
a727			; | UWORDS (  -- s1 ... sn u )   List user word dict | DONE 
a727			; | | After use the TOS will have a count of the number of user words that have been pushed to stack. 
a727			; | | Following the count are the individual words. 
a727			; | | 
a727			; | | e.g. UWORDS 
a727			; | | BOX DIRLIST 2 
a727			; | |  
a727			; | | Can be used to save the words to storage via: 
a727			; | | UWORDS $01 DO $01 APPEND LOOP 
a727			if DEBUG_FORTH_WORDS_KEY 
a727				DMARK "UWR" 
a727 f5				push af  
a728 3a 3c a7			ld a, (.dmark)  
a72b 32 65 ee			ld (debug_mark),a  
a72e 3a 3d a7			ld a, (.dmark+1)  
a731 32 66 ee			ld (debug_mark+1),a  
a734 3a 3e a7			ld a, (.dmark+2)  
a737 32 67 ee			ld (debug_mark+2),a  
a73a 18 03			jr .pastdmark  
a73c ..			.dmark: db "UWR"  
a73f f1			.pastdmark: pop af  
a740			endm  
# End of macro DMARK
a740				CALLMONITOR 
a740 cd 6f ee			call debug_vector  
a743				endm  
# End of macro CALLMONITOR
a743			endif 
a743 21 5c e0			ld hl, baseram 
a746				;ld hl, baseusermem 
a746 01 00 00			ld bc, 0    ; start a counter 
a749			 
a749			; skip dict stub 
a749			 
a749 cd b3 9f			call forth_tok_next 
a74c			 
a74c			 
a74c			; while we have words to look for 
a74c			 
a74c 7e			.douscan:	ld a, (hl)      
a74d			if DEBUG_FORTH_WORDS 
a74d				DMARK "UWs" 
a74d f5				push af  
a74e 3a 62 a7			ld a, (.dmark)  
a751 32 65 ee			ld (debug_mark),a  
a754 3a 63 a7			ld a, (.dmark+1)  
a757 32 66 ee			ld (debug_mark+1),a  
a75a 3a 64 a7			ld a, (.dmark+2)  
a75d 32 67 ee			ld (debug_mark+2),a  
a760 18 03			jr .pastdmark  
a762 ..			.dmark: db "UWs"  
a765 f1			.pastdmark: pop af  
a766			endm  
# End of macro DMARK
a766				CALLMONITOR 
a766 cd 6f ee			call debug_vector  
a769				endm  
# End of macro CALLMONITOR
a769			endif 
a769 fe 00			cp WORD_SYS_END 
a76b 28 4d			jr z, .udone 
a76d fe 01			cp WORD_SYS_UWORD 
a76f 20 44			jr nz, .nuword 
a771			 
a771			if DEBUG_FORTH_WORDS 
a771				DMARK "UWu" 
a771 f5				push af  
a772 3a 86 a7			ld a, (.dmark)  
a775 32 65 ee			ld (debug_mark),a  
a778 3a 87 a7			ld a, (.dmark+1)  
a77b 32 66 ee			ld (debug_mark+1),a  
a77e 3a 88 a7			ld a, (.dmark+2)  
a781 32 67 ee			ld (debug_mark+2),a  
a784 18 03			jr .pastdmark  
a786 ..			.dmark: db "UWu"  
a789 f1			.pastdmark: pop af  
a78a			endm  
# End of macro DMARK
a78a				CALLMONITOR 
a78a cd 6f ee			call debug_vector  
a78d				endm  
# End of macro CALLMONITOR
a78d			endif 
a78d				; we have a uword so push its name to the stack 
a78d			 
a78d e5				push hl  ; save so we can move to next dict block 
a78e			 
a78e				; skip opcode 
a78e 23				inc hl  
a78f				; skip next ptr 
a78f 23				inc hl  
a790 23				inc hl 
a791				; skip len 
a791 23				inc hl 
a792			if DEBUG_FORTH_WORDS 
a792				DMARK "UWt" 
a792 f5				push af  
a793 3a a7 a7			ld a, (.dmark)  
a796 32 65 ee			ld (debug_mark),a  
a799 3a a8 a7			ld a, (.dmark+1)  
a79c 32 66 ee			ld (debug_mark+1),a  
a79f 3a a9 a7			ld a, (.dmark+2)  
a7a2 32 67 ee			ld (debug_mark+2),a  
a7a5 18 03			jr .pastdmark  
a7a7 ..			.dmark: db "UWt"  
a7aa f1			.pastdmark: pop af  
a7ab			endm  
# End of macro DMARK
a7ab				CALLMONITOR 
a7ab cd 6f ee			call debug_vector  
a7ae				endm  
# End of macro CALLMONITOR
a7ae			endif 
a7ae 03				inc bc 
a7af			 
a7af c5				push bc 
a7b0 cd f3 9a			call forth_push_str 
a7b3 c1				pop bc 
a7b4			 
a7b4 e1				pop hl 	 
a7b5			 
a7b5 cd b3 9f		.nuword:	call forth_tok_next 
a7b8 18 92			jr .douscan  
a7ba			 
a7ba			.udone:		 ; push count of uwords found 
a7ba c5				push bc 
a7bb e1				pop hl 
a7bc			 
a7bc			if DEBUG_FORTH_WORDS 
a7bc				DMARK "UWc" 
a7bc f5				push af  
a7bd 3a d1 a7			ld a, (.dmark)  
a7c0 32 65 ee			ld (debug_mark),a  
a7c3 3a d2 a7			ld a, (.dmark+1)  
a7c6 32 66 ee			ld (debug_mark+1),a  
a7c9 3a d3 a7			ld a, (.dmark+2)  
a7cc 32 67 ee			ld (debug_mark+2),a  
a7cf 18 03			jr .pastdmark  
a7d1 ..			.dmark: db "UWc"  
a7d4 f1			.pastdmark: pop af  
a7d5			endm  
# End of macro DMARK
a7d5				CALLMONITOR 
a7d5 cd 6f ee			call debug_vector  
a7d8				endm  
# End of macro CALLMONITOR
a7d8			endif 
a7d8 cd 85 9a			call forth_push_numhl 
a7db			 
a7db			 
a7db			       NEXTW 
a7db c3 76 9e			jp macro_next 
a7de				endm 
# End of macro NEXTW
a7de			 
a7de			.BP: 
a7de			CWHEAD .MONITOR 64 "BP" 2 WORD_FLAG_CODE 
a7de 54				db WORD_SYS_CORE+64             
a7df 18 a8			dw .MONITOR            
a7e1 03				db 2 + 1 
a7e2 .. 00			db "BP",0              
a7e5				endm 
# End of macro CWHEAD
a7e5			; | BP ( u1 -- ) Enable or disable break point monitoring | DONE 
a7e5			; | | $00 Will enable the break points within specific code paths 
a7e5			; | | $01 Will disable break points 
a7e5			; | |  
a7e5			; | | By default break points are off. Either the above can be used to enable them 
a7e5			; | | or if a key is held down during start up the spashscreen will appear to freeze 
a7e5			; | | and on release of the pressed key the CONFIG menu will be displayed where you 
a7e5			; | | can disable break points. Exiting will then continue boot process. 
a7e5				; get byte count 
a7e5				if DEBUG_FORTH_WORDS_KEY 
a7e5					DMARK "BP." 
a7e5 f5				push af  
a7e6 3a fa a7			ld a, (.dmark)  
a7e9 32 65 ee			ld (debug_mark),a  
a7ec 3a fb a7			ld a, (.dmark+1)  
a7ef 32 66 ee			ld (debug_mark+1),a  
a7f2 3a fc a7			ld a, (.dmark+2)  
a7f5 32 67 ee			ld (debug_mark+2),a  
a7f8 18 03			jr .pastdmark  
a7fa ..			.dmark: db "BP."  
a7fd f1			.pastdmark: pop af  
a7fe			endm  
# End of macro DMARK
a7fe					CALLMONITOR 
a7fe cd 6f ee			call debug_vector  
a801				endm  
# End of macro CALLMONITOR
a801				endif 
a801			 
a801				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a801 cd 8a 9c			call macro_dsp_valuehl 
a804				endm 
# End of macro FORTH_DSP_VALUEHL
a804			 
a804			;		push hl 
a804			 
a804				; destroy value TOS 
a804			 
a804				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a804 cd 42 9d			call macro_forth_dsp_pop 
a807				endm 
# End of macro FORTH_DSP_POP
a807			 
a807			;		pop hl 
a807			 
a807 3e 00			ld a,0 
a809 bd				cp l 
a80a 28 06			jr z, .bpset 
a80c			;		ld a, '*' 
a80c cd 00 94			call bp_off 
a80f				NEXTW 
a80f c3 76 9e			jp macro_next 
a812				endm 
# End of macro NEXTW
a812			 
a812			.bpset:	 
a812				;	ld (os_view_disable), a 
a812 cd f4 93			call bp_on 
a815			 
a815			 
a815				NEXTW 
a815 c3 76 9e			jp macro_next 
a818				endm 
# End of macro NEXTW
a818			 
a818			 
a818			.MONITOR: 
a818			CWHEAD .MALLOC 65 "MONITOR" 7 WORD_FLAG_CODE 
a818 55				db WORD_SYS_CORE+65             
a819 49 a8			dw .MALLOC            
a81b 08				db 7 + 1 
a81c .. 00			db "MONITOR",0              
a824				endm 
# End of macro CWHEAD
a824			; | MONITOR ( -- ) Display system breakpoint/monitor | DONE 
a824			; | | At start the current various registers will be displayed with contents. 
a824			; | | Top right corner will show the most recent debug marker seen. 
a824			; | | The bottom of the screen will also show the values of the data stack pointer (DSP) 
a824			; | | and the return stack pointer (RSP). 
a824			; | | Pressing: 
a824			; | |    1 - Initial screen 
a824			; | |    2 - Display a data dump of HL 
a824			; | |    3 - Display a data dump of DE 
a824			; | |    4 - Display a data dump of BC 
a824			; | |    5 - Display a data dump of HL 
a824			; | |    6 - Display a data dump of DSP 
a824			; | |    7 - Display a data dump of RSP 
a824			; | |    8 - Display a data dump of what is at DSP 
a824			; | |    9 - Display a data dump of what is at RSP 
a824			; | |    0 - Exit monitor and continue running. This will also enable break points 
a824			; | |    * - Disable break points 
a824			; | |    # - Enter traditional monitor mode 
a824			; | | 
a824			; | | Monitor Mode 
a824			; | | ------------ 
a824			; | | A prompt of '>' will be shown for various commands: 
a824			; | |    D xxxx - Display a data dump starting from hex address xxxx 
a824			; | |    C - Continue display a data dump from the last set address 
a824			; | |    M xxxx - Set start of memory edit at address xx 
a824			; | |    U xx - Poke the hex byte xx into the address set by M and increment the address to the next location 
a824			; | |    G xxxx - Exec code at specific address 
a824			; | |    Q - Return to previous 
a824				if DEBUG_FORTH_WORDS_KEY 
a824					DMARK "MON" 
a824 f5				push af  
a825 3a 39 a8			ld a, (.dmark)  
a828 32 65 ee			ld (debug_mark),a  
a82b 3a 3a a8			ld a, (.dmark+1)  
a82e 32 66 ee			ld (debug_mark+1),a  
a831 3a 3b a8			ld a, (.dmark+2)  
a834 32 67 ee			ld (debug_mark+2),a  
a837 18 03			jr .pastdmark  
a839 ..			.dmark: db "MON"  
a83c f1			.pastdmark: pop af  
a83d			endm  
# End of macro DMARK
a83d					CALLMONITOR 
a83d cd 6f ee			call debug_vector  
a840				endm  
# End of macro CALLMONITOR
a840				endif 
a840			;		ld a, 0 
a840			;		ld (os_view_disable), a 
a840 cd f4 93			call bp_on 
a843			 
a843				CALLMONITOR 
a843 cd 6f ee			call debug_vector  
a846				endm  
# End of macro CALLMONITOR
a846			 
a846			;	call monitor 
a846			 
a846				NEXTW 
a846 c3 76 9e			jp macro_next 
a849				endm 
# End of macro NEXTW
a849			 
a849			 
a849			.MALLOC: 
a849			CWHEAD .MALLOC2 66 "ALLOT" 5 WORD_FLAG_CODE 
a849 56				db WORD_SYS_CORE+66             
a84a 72 a8			dw .MALLOC2            
a84c 06				db 5 + 1 
a84d .. 00			db "ALLOT",0              
a853				endm 
# End of macro CWHEAD
a853			; | ALLOT ( u -- u ) Allocate u bytes of memory space and push the pointer TOS  | DONE 
a853				if DEBUG_FORTH_WORDS_KEY 
a853					DMARK "ALL" 
a853 f5				push af  
a854 3a 68 a8			ld a, (.dmark)  
a857 32 65 ee			ld (debug_mark),a  
a85a 3a 69 a8			ld a, (.dmark+1)  
a85d 32 66 ee			ld (debug_mark+1),a  
a860 3a 6a a8			ld a, (.dmark+2)  
a863 32 67 ee			ld (debug_mark+2),a  
a866 18 03			jr .pastdmark  
a868 ..			.dmark: db "ALL"  
a86b f1			.pastdmark: pop af  
a86c			endm  
# End of macro DMARK
a86c					CALLMONITOR 
a86c cd 6f ee			call debug_vector  
a86f				endm  
# End of macro CALLMONITOR
a86f				endif 
a86f c3 99 a8			jp .mallocc 
a872			.MALLOC2: 
a872			CWHEAD .FREE 66 "MALLOC" 6 WORD_FLAG_CODE 
a872 56				db WORD_SYS_CORE+66             
a873 b0 a8			dw .FREE            
a875 07				db 6 + 1 
a876 .. 00			db "MALLOC",0              
a87d				endm 
# End of macro CWHEAD
a87d			; | MALLOC ( u -- u ) Allocate u bytes of memory space and push the pointer TOS  | DONE 
a87d				; get byte count 
a87d				if DEBUG_FORTH_WORDS_KEY 
a87d					DMARK "MAL" 
a87d f5				push af  
a87e 3a 92 a8			ld a, (.dmark)  
a881 32 65 ee			ld (debug_mark),a  
a884 3a 93 a8			ld a, (.dmark+1)  
a887 32 66 ee			ld (debug_mark+1),a  
a88a 3a 94 a8			ld a, (.dmark+2)  
a88d 32 67 ee			ld (debug_mark+2),a  
a890 18 03			jr .pastdmark  
a892 ..			.dmark: db "MAL"  
a895 f1			.pastdmark: pop af  
a896			endm  
# End of macro DMARK
a896					CALLMONITOR 
a896 cd 6f ee			call debug_vector  
a899				endm  
# End of macro CALLMONITOR
a899				endif 
a899			.mallocc: 
a899				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a899 cd 8a 9c			call macro_dsp_valuehl 
a89c				endm 
# End of macro FORTH_DSP_VALUEHL
a89c			 
a89c			;		push hl 
a89c			 
a89c				; destroy value TOS 
a89c			 
a89c				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a89c cd 42 9d			call macro_forth_dsp_pop 
a89f				endm 
# End of macro FORTH_DSP_POP
a89f			 
a89f			;		pop hl 
a89f cd c5 90			call malloc 
a8a2			if DEBUG_FORTH_MALLOC_GUARD 
a8a2 f5				push af 
a8a3 cd 13 8d			call ishlzero 
a8a6			;		ld a, l 
a8a6			;		add h 
a8a6			;		cp 0 
a8a6 f1				pop af 
a8a7				 
a8a7 cc 0a cf			call z,malloc_error 
a8aa			endif 
a8aa			 
a8aa cd 85 9a			call forth_push_numhl 
a8ad				NEXTW 
a8ad c3 76 9e			jp macro_next 
a8b0				endm 
# End of macro NEXTW
a8b0			 
a8b0			.FREE: 
a8b0			CWHEAD .LIST 67 "FREE" 4 WORD_FLAG_CODE 
a8b0 57				db WORD_SYS_CORE+67             
a8b1 e1 a8			dw .LIST            
a8b3 05				db 4 + 1 
a8b4 .. 00			db "FREE",0              
a8b9				endm 
# End of macro CWHEAD
a8b9			; | FREE ( u --  ) Free memory block from malloc given u address  | DONE 
a8b9				if DEBUG_FORTH_WORDS_KEY 
a8b9					DMARK "FRE" 
a8b9 f5				push af  
a8ba 3a ce a8			ld a, (.dmark)  
a8bd 32 65 ee			ld (debug_mark),a  
a8c0 3a cf a8			ld a, (.dmark+1)  
a8c3 32 66 ee			ld (debug_mark+1),a  
a8c6 3a d0 a8			ld a, (.dmark+2)  
a8c9 32 67 ee			ld (debug_mark+2),a  
a8cc 18 03			jr .pastdmark  
a8ce ..			.dmark: db "FRE"  
a8d1 f1			.pastdmark: pop af  
a8d2			endm  
# End of macro DMARK
a8d2					CALLMONITOR 
a8d2 cd 6f ee			call debug_vector  
a8d5				endm  
# End of macro CALLMONITOR
a8d5				endif 
a8d5				; get address 
a8d5			 
a8d5				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a8d5 cd 8a 9c			call macro_dsp_valuehl 
a8d8				endm 
# End of macro FORTH_DSP_VALUEHL
a8d8			 
a8d8			;		push hl 
a8d8			 
a8d8				; destroy value TOS 
a8d8			 
a8d8				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a8d8 cd 42 9d			call macro_forth_dsp_pop 
a8db				endm 
# End of macro FORTH_DSP_POP
a8db			 
a8db			;		pop hl 
a8db			if FORTH_ENABLE_MALLOCFREE 
a8db cd 8f 91			call free 
a8de			endif 
a8de				NEXTW 
a8de c3 76 9e			jp macro_next 
a8e1				endm 
# End of macro NEXTW
a8e1			.LIST: 
a8e1			CWHEAD .FORGET 72 "LIST" 4 WORD_FLAG_CODE 
a8e1 5c				db WORD_SYS_CORE+72             
a8e2 dd aa			dw .FORGET            
a8e4 05				db 4 + 1 
a8e5 .. 00			db "LIST",0              
a8ea				endm 
# End of macro CWHEAD
a8ea			; | LIST ( uword -- u )    List the code to the word that is quoted (so as not to exec) on TOS | DONE 
a8ea			; | | The quoted word must be in upper case. 
a8ea			if DEBUG_FORTH_WORDS_KEY 
a8ea				DMARK "LST" 
a8ea f5				push af  
a8eb 3a ff a8			ld a, (.dmark)  
a8ee 32 65 ee			ld (debug_mark),a  
a8f1 3a 00 a9			ld a, (.dmark+1)  
a8f4 32 66 ee			ld (debug_mark+1),a  
a8f7 3a 01 a9			ld a, (.dmark+2)  
a8fa 32 67 ee			ld (debug_mark+2),a  
a8fd 18 03			jr .pastdmark  
a8ff ..			.dmark: db "LST"  
a902 f1			.pastdmark: pop af  
a903			endm  
# End of macro DMARK
a903				CALLMONITOR 
a903 cd 6f ee			call debug_vector  
a906				endm  
# End of macro CALLMONITOR
a906			endif 
a906			 
a906				FORTH_DSP_VALUEHL 
a906 cd 8a 9c			call macro_dsp_valuehl 
a909				endm 
# End of macro FORTH_DSP_VALUEHL
a909			 
a909 e5				push hl 
a90a				FORTH_DSP_POP 
a90a cd 42 9d			call macro_forth_dsp_pop 
a90d				endm 
# End of macro FORTH_DSP_POP
a90d c1				pop bc 
a90e			 
a90e			; Start format of scratch string 
a90e			 
a90e 21 bb e2			ld hl, scratch 
a911			 
a911 3e 3a			ld a, ':' 
a913 77				ld (hl),a 
a914 23				inc hl 
a915 3e 20			ld a, ' ' 
a917 77				ld (hl), a 
a918			 
a918				; Get ptr to the word we need to look up 
a918			 
a918			;		FORTH_DSP_VALUEHL 
a918				;v5 FORTH_DSP_VALUE 
a918			; TODO type check 
a918			;		inc hl    ; Skip type check  
a918			;		push hl 
a918			;		ex de, hl    ; put into DE 
a918			 
a918			 
a918 21 5c e0			ld hl, baseram 
a91b				;ld hl, baseusermem 
a91b			 
a91b e5			push hl   ; sacreifical push 
a91c			 
a91c			.ldouscanm: 
a91c e1			pop hl 
a91d			.ldouscan: 
a91d			if DEBUG_FORTH_WORDS 
a91d				DMARK "LSs" 
a91d f5				push af  
a91e 3a 32 a9			ld a, (.dmark)  
a921 32 65 ee			ld (debug_mark),a  
a924 3a 33 a9			ld a, (.dmark+1)  
a927 32 66 ee			ld (debug_mark+1),a  
a92a 3a 34 a9			ld a, (.dmark+2)  
a92d 32 67 ee			ld (debug_mark+2),a  
a930 18 03			jr .pastdmark  
a932 ..			.dmark: db "LSs"  
a935 f1			.pastdmark: pop af  
a936			endm  
# End of macro DMARK
a936				CALLMONITOR 
a936 cd 6f ee			call debug_vector  
a939				endm  
# End of macro CALLMONITOR
a939			endif 
a939			; skip dict stub 
a939 cd b3 9f			call forth_tok_next 
a93c			 
a93c			 
a93c			; while we have words to look for 
a93c			 
a93c 7e			ld a, (hl)      
a93d			if DEBUG_FORTH_WORDS 
a93d				DMARK "LSk" 
a93d f5				push af  
a93e 3a 52 a9			ld a, (.dmark)  
a941 32 65 ee			ld (debug_mark),a  
a944 3a 53 a9			ld a, (.dmark+1)  
a947 32 66 ee			ld (debug_mark+1),a  
a94a 3a 54 a9			ld a, (.dmark+2)  
a94d 32 67 ee			ld (debug_mark+2),a  
a950 18 03			jr .pastdmark  
a952 ..			.dmark: db "LSk"  
a955 f1			.pastdmark: pop af  
a956			endm  
# End of macro DMARK
a956				CALLMONITOR 
a956 cd 6f ee			call debug_vector  
a959				endm  
# End of macro CALLMONITOR
a959			endif 
a959				;cp WORD_SYS_END 
a959				;jp z, .lunotfound 
a959			 
a959					; if we hit non uwords then gone too far 
a959 fe 01				cp WORD_SYS_UWORD 
a95b c2 99 aa				jp nz, .lunotfound 
a95e			 
a95e				if DEBUG_FORTH_WORDS 
a95e					DMARK "LSu" 
a95e f5				push af  
a95f 3a 73 a9			ld a, (.dmark)  
a962 32 65 ee			ld (debug_mark),a  
a965 3a 74 a9			ld a, (.dmark+1)  
a968 32 66 ee			ld (debug_mark+1),a  
a96b 3a 75 a9			ld a, (.dmark+2)  
a96e 32 67 ee			ld (debug_mark+2),a  
a971 18 03			jr .pastdmark  
a973 ..			.dmark: db "LSu"  
a976 f1			.pastdmark: pop af  
a977			endm  
# End of macro DMARK
a977					CALLMONITOR 
a977 cd 6f ee			call debug_vector  
a97a				endm  
# End of macro CALLMONITOR
a97a				endif 
a97a			 
a97a					; found a uword but is it the one we want... 
a97a			 
a97a c5					push bc     ; uword to find is on bc 
a97b d1					pop de 
a97c			 
a97c e5					push hl  ; to save the ptr 
a97d			 
a97d					; skip opcode 
a97d 23					inc hl  
a97e					; skip next ptr 
a97e 23					inc hl  
a97f 23					inc hl 
a980					; skip len 
a980 23					inc hl 
a981			 
a981				if DEBUG_FORTH_WORDS 
a981					DMARK "LSc" 
a981 f5				push af  
a982 3a 96 a9			ld a, (.dmark)  
a985 32 65 ee			ld (debug_mark),a  
a988 3a 97 a9			ld a, (.dmark+1)  
a98b 32 66 ee			ld (debug_mark+1),a  
a98e 3a 98 a9			ld a, (.dmark+2)  
a991 32 67 ee			ld (debug_mark+2),a  
a994 18 03			jr .pastdmark  
a996 ..			.dmark: db "LSc"  
a999 f1			.pastdmark: pop af  
a99a			endm  
# End of macro DMARK
a99a					CALLMONITOR 
a99a cd 6f ee			call debug_vector  
a99d				endm  
# End of macro CALLMONITOR
a99d				endif 
a99d			; was exiting on the shorter of the words. swap and test is in favour of the longer word. 
a99d			; ie. If WOO is defined first and then WO. Couldnt list WO. 
a99d			; Nope that has gone the other way. It needs to be exact not on first zero 
a99d			;		call strcmp 
a99d c5					push bc 
a99e cd 95 90				call StrictStrCmp 
a9a1 c1					pop bc 
a9a2 c2 1c a9				jp nz, .ldouscanm 
a9a5				 
a9a5			 
a9a5			 
a9a5					; we have a uword so push its name to the stack 
a9a5			 
a9a5			;	   	push hl  ; save so we can move to next dict block 
a9a5 e1			pop hl 
a9a6			 
a9a6				if DEBUG_FORTH_WORDS 
a9a6					DMARK "LSm" 
a9a6 f5				push af  
a9a7 3a bb a9			ld a, (.dmark)  
a9aa 32 65 ee			ld (debug_mark),a  
a9ad 3a bc a9			ld a, (.dmark+1)  
a9b0 32 66 ee			ld (debug_mark+1),a  
a9b3 3a bd a9			ld a, (.dmark+2)  
a9b6 32 67 ee			ld (debug_mark+2),a  
a9b9 18 03			jr .pastdmark  
a9bb ..			.dmark: db "LSm"  
a9be f1			.pastdmark: pop af  
a9bf			endm  
# End of macro DMARK
a9bf					CALLMONITOR 
a9bf cd 6f ee			call debug_vector  
a9c2				endm  
# End of macro CALLMONITOR
a9c2				endif 
a9c2			 
a9c2					; skip opcode 
a9c2 23					inc hl  
a9c3					; skip next ptr 
a9c3 23					inc hl  
a9c4 23					inc hl 
a9c5					; skip len 
a9c5 7e					ld a, (hl)   ; save length to add 
a9c6				if DEBUG_FORTH_WORDS 
a9c6					DMARK "LS2" 
a9c6 f5				push af  
a9c7 3a db a9			ld a, (.dmark)  
a9ca 32 65 ee			ld (debug_mark),a  
a9cd 3a dc a9			ld a, (.dmark+1)  
a9d0 32 66 ee			ld (debug_mark+1),a  
a9d3 3a dd a9			ld a, (.dmark+2)  
a9d6 32 67 ee			ld (debug_mark+2),a  
a9d9 18 03			jr .pastdmark  
a9db ..			.dmark: db "LS2"  
a9de f1			.pastdmark: pop af  
a9df			endm  
# End of macro DMARK
a9df					CALLMONITOR 
a9df cd 6f ee			call debug_vector  
a9e2				endm  
# End of macro CALLMONITOR
a9e2				endif 
a9e2			 
a9e2					; save this location 
a9e2				 
a9e2 e5					push hl 
a9e3			 
a9e3 23					inc hl 
a9e4 11 bd e2				ld de, scratch+2 
a9e7 4f					ld c, a 
a9e8 06 00				ld b, 0 
a9ea			 
a9ea				if DEBUG_FORTH_WORDS 
a9ea					DMARK "LSn" 
a9ea f5				push af  
a9eb 3a ff a9			ld a, (.dmark)  
a9ee 32 65 ee			ld (debug_mark),a  
a9f1 3a 00 aa			ld a, (.dmark+1)  
a9f4 32 66 ee			ld (debug_mark+1),a  
a9f7 3a 01 aa			ld a, (.dmark+2)  
a9fa 32 67 ee			ld (debug_mark+2),a  
a9fd 18 03			jr .pastdmark  
a9ff ..			.dmark: db "LSn"  
aa02 f1			.pastdmark: pop af  
aa03			endm  
# End of macro DMARK
aa03					CALLMONITOR 
aa03 cd 6f ee			call debug_vector  
aa06				endm  
# End of macro CALLMONITOR
aa06				endif 
aa06			 
aa06					; copy uword name to scratch 
aa06			 
aa06			;		ldir 
aa06			.licplw:	; copy uword name to scratch converting to lower case as we go 
aa06 ed a0				ldi 
aa08 1b					dec de 
aa09 1a					ld a, (de) 
aa0a cd 68 8f				call to_lower 
aa0d 12					ld (de),a 
aa0e 13					inc de 
aa0f 3e 00				ld a, 0 
aa11 b9					cp c 
aa12 20 f2				jr nz, .licplw 
aa14			 
aa14			 
aa14			 
aa14 1b					dec de 
aa15 3e 20				ld a, ' '    ; change null to space 
aa17 12					ld (de), a 
aa18			 
aa18 13					inc de 
aa19			 
aa19 d5					push de 
aa1a c1					pop bc     ; move scratch pointer to end of word name and save it 
aa1b			 
aa1b e1					pop hl 
aa1c 7e					ld a, (hl) 
aa1d					;inc hl 
aa1d					; skip word string 
aa1d cd ea 8c				call addatohl 
aa20			 
aa20 23					inc hl 
aa21			 
aa21				if DEBUG_FORTH_WORDS 
aa21					DMARK "LS3" 
aa21 f5				push af  
aa22 3a 36 aa			ld a, (.dmark)  
aa25 32 65 ee			ld (debug_mark),a  
aa28 3a 37 aa			ld a, (.dmark+1)  
aa2b 32 66 ee			ld (debug_mark+1),a  
aa2e 3a 38 aa			ld a, (.dmark+2)  
aa31 32 67 ee			ld (debug_mark+2),a  
aa34 18 03			jr .pastdmark  
aa36 ..			.dmark: db "LS3"  
aa39 f1			.pastdmark: pop af  
aa3a			endm  
# End of macro DMARK
aa3a					CALLMONITOR 
aa3a cd 6f ee			call debug_vector  
aa3d				endm  
# End of macro CALLMONITOR
aa3d				endif 
aa3d					; should now be at the start of the machine code to setup the eval of the uword 
aa3d					; now locate the ptr to the string defintion 
aa3d			 
aa3d					; skip ld hl, 
aa3d					; then load the ptr 
aa3d			; TODO use get from hl ptr 
aa3d 23					inc hl 
aa3e 5e					ld e, (hl) 
aa3f 23					inc hl 
aa40 56					ld d, (hl) 
aa41 eb					ex de, hl 
aa42			 
aa42			 
aa42				if DEBUG_FORTH_WORDS 
aa42					DMARK "LSt" 
aa42 f5				push af  
aa43 3a 57 aa			ld a, (.dmark)  
aa46 32 65 ee			ld (debug_mark),a  
aa49 3a 58 aa			ld a, (.dmark+1)  
aa4c 32 66 ee			ld (debug_mark+1),a  
aa4f 3a 59 aa			ld a, (.dmark+2)  
aa52 32 67 ee			ld (debug_mark+2),a  
aa55 18 03			jr .pastdmark  
aa57 ..			.dmark: db "LSt"  
aa5a f1			.pastdmark: pop af  
aa5b			endm  
# End of macro DMARK
aa5b					CALLMONITOR 
aa5b cd 6f ee			call debug_vector  
aa5e				endm  
# End of macro CALLMONITOR
aa5e				endif 
aa5e			 
aa5e			; cant push right now due to tokenised strings  
aa5e			 
aa5e			; get the destination of where to copy this definition to. 
aa5e			 
aa5e c5					push bc 
aa5f d1					pop de 
aa60			 
aa60 7e			.listl:         ld a,(hl) 
aa61 fe 00				cp 0 
aa63 28 09				jr z, .lreplsp     ; replace zero with space 
aa65					;cp FORTH_END_BUFFER 
aa65 fe 3b				cp ';'    ; No end buffer flag but the ';' will be a good sign of the end of definition 
aa67 28 0a				jr z, .listdone    ; at end of uword defination to close of scratch and finish 
aa69				 
aa69					; just copy this char as is then 
aa69			 
aa69 12					ld (de), a 
aa6a			 
aa6a 23			.listnxt:	inc hl 
aa6b 13					inc de 
aa6c 18 f2				jr .listl 
aa6e			 
aa6e 3e 20		.lreplsp:	ld a,' ' 
aa70 12					ld (de), a 
aa71 18 f7				jr .listnxt 
aa73			 
aa73			; close up uword def 
aa73			 
aa73			.listdone: 
aa73 12					ld (de), a 
aa74 13					inc de 
aa75 3e 00				ld a, 0 
aa77 12					ld (de), a 
aa78			 
aa78			; now have def so clean up and push to stack 
aa78			 
aa78 21 bb e2				ld hl, scratch 
aa7b				if DEBUG_FORTH_WORDS 
aa7b					DMARK "Ltp" 
aa7b f5				push af  
aa7c 3a 90 aa			ld a, (.dmark)  
aa7f 32 65 ee			ld (debug_mark),a  
aa82 3a 91 aa			ld a, (.dmark+1)  
aa85 32 66 ee			ld (debug_mark+1),a  
aa88 3a 92 aa			ld a, (.dmark+2)  
aa8b 32 67 ee			ld (debug_mark+2),a  
aa8e 18 03			jr .pastdmark  
aa90 ..			.dmark: db "Ltp"  
aa93 f1			.pastdmark: pop af  
aa94			endm  
# End of macro DMARK
aa94					CALLMONITOR 
aa94 cd 6f ee			call debug_vector  
aa97				endm  
# End of macro CALLMONITOR
aa97				endif 
aa97			 
aa97 18 1f			jr .listpush 
aa99			 
aa99			;.lnuword:	pop hl 
aa99			;		call forth_tok_next 
aa99			;		jp .ldouscan  
aa99			 
aa99			.lunotfound:		  
aa99			 
aa99				if DEBUG_FORTH_WORDS 
aa99					DMARK "LSn" 
aa99 f5				push af  
aa9a 3a ae aa			ld a, (.dmark)  
aa9d 32 65 ee			ld (debug_mark),a  
aaa0 3a af aa			ld a, (.dmark+1)  
aaa3 32 66 ee			ld (debug_mark+1),a  
aaa6 3a b0 aa			ld a, (.dmark+2)  
aaa9 32 67 ee			ld (debug_mark+2),a  
aaac 18 03			jr .pastdmark  
aaae ..			.dmark: db "LSn"  
aab1 f1			.pastdmark: pop af  
aab2			endm  
# End of macro DMARK
aab2					CALLMONITOR 
aab2 cd 6f ee			call debug_vector  
aab5				endm  
# End of macro CALLMONITOR
aab5				endif 
aab5			 
aab5					 
aab5			;		FORTH_DSP_POP 
aab5			;		ld hl, .luno 
aab5			 
aab5					NEXTW			 
aab5 c3 76 9e			jp macro_next 
aab8				endm 
# End of macro NEXTW
aab8			 
aab8			.listpush: 
aab8				if DEBUG_FORTH_WORDS 
aab8					DMARK "LS>" 
aab8 f5				push af  
aab9 3a cd aa			ld a, (.dmark)  
aabc 32 65 ee			ld (debug_mark),a  
aabf 3a ce aa			ld a, (.dmark+1)  
aac2 32 66 ee			ld (debug_mark+1),a  
aac5 3a cf aa			ld a, (.dmark+2)  
aac8 32 67 ee			ld (debug_mark+2),a  
aacb 18 03			jr .pastdmark  
aacd ..			.dmark: db "LS>"  
aad0 f1			.pastdmark: pop af  
aad1			endm  
# End of macro DMARK
aad1					CALLMONITOR 
aad1 cd 6f ee			call debug_vector  
aad4				endm  
# End of macro CALLMONITOR
aad4				endif 
aad4 cd f3 9a				call forth_push_str 
aad7			 
aad7			 
aad7			 
aad7					NEXTW 
aad7 c3 76 9e			jp macro_next 
aada				endm 
# End of macro NEXTW
aada			 
aada			;.luno:    db "Word not found",0 
aada			 
aada			 
aada			 
aada			 
aada			 
aada			;		push hl   ; save pointer to start of uword def string 
aada			; 
aada			;; look for FORTH_EOL_LINE 
aada			;		ld a, FORTH_END_BUFFER 
aada			;		call strlent 
aada			; 
aada			;		inc hl		 ; space for coln def 
aada			;		inc hl 
aada			;		inc hl          ; space for terms 
aada			;		inc hl 
aada			; 
aada			;		ld a, 20   ; TODO get actual length 
aada			;		call addatohl    ; include a random amount of room for the uword name 
aada			; 
aada			;		 
aada			;	if DEBUG_FORTH_WORDS 
aada			;		DMARK "Lt1" 
aada			;		CALLMONITOR 
aada			;	endif 
aada			;		 
aada			; 
aada			;; malloc space for the string because we cant change it 
aada			; 
aada			;		call malloc 
aada			;	if DEBUG_FORTH_MALLOC_GUARD 
aada			;		push af 
aada			;		call ishlzero 
aada			;		pop af 
aada			;		 
aada			;		call z,malloc_error 
aada			;	endif 
aada			; 
aada			;	if DEBUG_FORTH_WORDS 
aada			;		DMARK "Lt2" 
aada			;		CALLMONITOR 
aada			;	endif 
aada			;		pop de 
aada			;		push hl    ; push the malloc to release later 
aada			;		push hl   ;  push back a copy for the later stack push 
aada			;		 
aada			;; copy the string swapping out the zero terms for spaces 
aada			; 
aada			;		; de has our source 
aada			;		; hl has our dest 
aada			; 
aada			;; add the coln def 
aada			; 
aada			;		ld a, ':' 
aada			;		ld (hl), a 
aada			;		inc hl 
aada			;		ld a, ' ' 
aada			;		ld (hl), a 
aada			;		inc hl 
aada			; 
aada			;; add the uname word 
aada			;		push de   ; save our string for now 
aada			;		ex de, hl 
aada			; 
aada			;		FORTH_DSP_VALUE 
aada			;		;v5 FORTH_DSP_VALUE 
aada			; 
aada			;		inc hl   ; skip type but we know by now this is OK 
aada			; 
aada			;.luword:	ld a,(hl) 
aada			;		cp 0 
aada			;		jr z, .luword2 
aada			;		ld (de), a 
aada			;		inc de 
aada			;		inc hl 
aada			;		jr .luword 
aada			; 
aada			;.luword2:	ld a, ' ' 
aada			;		ld (de), a 
aada			;;		inc hl 
aada			;;		inc de 
aada			;;		ld (de), a 
aada			;;		inc hl 
aada			;		inc de 
aada			; 
aada			;		ex de, hl 
aada			;		pop de 
aada			;		 
aada			;		 
aada			; 
aada			;; detoken that string and copy it 
aada			; 
aada			;	if DEBUG_FORTH_WORDS 
aada			;		DMARK "Lt2" 
aada			;		CALLMONITOR 
aada			;	endif 
aada			;.ldetok:	ld a, (de) 
aada			;		cp FORTH_END_BUFFER 
aada			;		jr z, .ldetokend 
aada			;		; swap out any zero term for space 
aada			;		cp 0 
aada			;		jr nz, .ldetoknext 
aada			;		ld a, ' ' 
aada			; 
aada			;	if DEBUG_FORTH_WORDS 
aada			;		DMARK "LtS" 
aada			;		CALLMONITOR 
aada			;	endif 
aada			;.ldetoknext:	ld (hl), a 
aada			;		inc de 
aada			;		inc hl 
aada			;		jr .ldetok 
aada			; 
aada			;.ldetokend:	ld a, 0    ; replace forth eol with string term for pushing 
aada			;		ld (hl), a  
aada			; 
aada			;; free that temp malloc 
aada			; 
aada			;		pop hl    
aada			; 
aada			;	if DEBUG_FORTH_WORDS 
aada			;		DMARK "Lt4" 
aada			;		CALLMONITOR 
aada			;	endif 
aada			;		call forth_apushstrhl 
aada			; 
aada			;		; get rid of temp malloc area 
aada			; 
aada			;		pop hl 
aada			;		call free 
aada			; 
aada			;		jr .ludone 
aada			; 
aada			;.lnuword:	pop hl 
aada			;		call forth_tok_next 
aada			;		jp .ldouscan  
aada			; 
aada			;.ludone:		 pop hl 
aada			; 
aada					NEXTW 
aada c3 76 9e			jp macro_next 
aadd				endm 
# End of macro NEXTW
aadd			 
aadd			.FORGET: 
aadd				CWHEAD .NOP 73 "FORGET" 6 WORD_FLAG_CODE 
aadd 5d				db WORD_SYS_CORE+73             
aade 56 ab			dw .NOP            
aae0 07				db 6 + 1 
aae1 .. 00			db "FORGET",0              
aae8				endm 
# End of macro CWHEAD
aae8			; | FORGET ( uword -- )    Forget the uword on TOS | DONE 
aae8			; | | Will flag the word's op code to be deleted as well as replace the first char of the word with '_'. Quoted uword name must be in caps. 
aae8			; | |  
aae8			; | | e.g. "MORE" forget 
aae8					if DEBUG_FORTH_WORDS_KEY 
aae8						DMARK "FRG" 
aae8 f5				push af  
aae9 3a fd aa			ld a, (.dmark)  
aaec 32 65 ee			ld (debug_mark),a  
aaef 3a fe aa			ld a, (.dmark+1)  
aaf2 32 66 ee			ld (debug_mark+1),a  
aaf5 3a ff aa			ld a, (.dmark+2)  
aaf8 32 67 ee			ld (debug_mark+2),a  
aafb 18 03			jr .pastdmark  
aafd ..			.dmark: db "FRG"  
ab00 f1			.pastdmark: pop af  
ab01			endm  
# End of macro DMARK
ab01						CALLMONITOR 
ab01 cd 6f ee			call debug_vector  
ab04				endm  
# End of macro CALLMONITOR
ab04					endif 
ab04			 
ab04				; find uword 
ab04			        ; update start of word with "_" 
ab04				; replace uword with deleted flag 
ab04			 
ab04			 
ab04			;	if DEBUG_FORTH_WORDS 
ab04			;		DMARK "FOG" 
ab04			;		CALLMONITOR 
ab04			;	endif 
ab04			 
ab04			 
ab04					; Get ptr to the word we need to look up 
ab04			 
ab04					FORTH_DSP_VALUEHL 
ab04 cd 8a 9c			call macro_dsp_valuehl 
ab07				endm 
# End of macro FORTH_DSP_VALUEHL
ab07					;v5 FORTH_DSP_VALUE 
ab07				; TODO type check 
ab07			;		inc hl    ; Skip type check  
ab07 e5					push hl 
ab08 c1					pop bc 
ab09			;		ex de, hl    ; put into DE 
ab09			 
ab09			 
ab09 21 5c e0				ld hl, baseram 
ab0c					;ld hl, baseusermem 
ab0c			 
ab0c				; skip dict stub 
ab0c			;	call forth_tok_next 
ab0c e5			push hl   ; sacreifical push 
ab0d			 
ab0d			.fldouscanm: 
ab0d e1				pop hl 
ab0e			.fldouscan: 
ab0e			;	if DEBUG_FORTH_WORDS 
ab0e			;		DMARK "LSs" 
ab0e			;		CALLMONITOR 
ab0e			;	endif 
ab0e				; skip dict stub 
ab0e cd b3 9f				call forth_tok_next 
ab11			 
ab11			 
ab11			; while we have words to look for 
ab11			 
ab11 7e				ld a, (hl)      
ab12			;	if DEBUG_FORTH_WORDS 
ab12			;		DMARK "LSk" 
ab12			;		CALLMONITOR 
ab12			;	endif 
ab12 fe 00				cp WORD_SYS_END 
ab14 ca 50 ab				jp z, .flunotfound 
ab17 fe 01				cp WORD_SYS_UWORD 
ab19 c2 0e ab				jp nz, .fldouscan 
ab1c			 
ab1c			;	if DEBUG_FORTH_WORDS 
ab1c			;		DMARK "LSu" 
ab1c			;		CALLMONITOR 
ab1c			;	endif 
ab1c			 
ab1c					; found a uword but is it the one we want... 
ab1c			 
ab1c c5					push bc     ; uword to find is on bc 
ab1d d1					pop de 
ab1e			 
ab1e e5					push hl  ; to save the ptr 
ab1f			 
ab1f					; skip opcode 
ab1f 23					inc hl  
ab20					; skip next ptr 
ab20 23					inc hl  
ab21 23					inc hl 
ab22					; skip len 
ab22 23					inc hl 
ab23			 
ab23			;	if DEBUG_FORTH_WORDS 
ab23			;		DMARK "LSc" 
ab23			;		CALLMONITOR 
ab23			;	endif 
ab23 cd 88 90				call strcmp 
ab26 c2 0d ab				jp nz, .fldouscanm 
ab29			; 
ab29			; 
ab29			;; while we have words to look for 
ab29			; 
ab29			;.fdouscan:	ld a, (hl)      
ab29			;	if DEBUG_FORTH_WORDS 
ab29			;		DMARK "LSs" 
ab29			;		CALLMONITOR 
ab29			;	endif 
ab29			;		cp WORD_SYS_END 
ab29			;		jp z, .fudone 
ab29			;		cp WORD_SYS_UWORD 
ab29			;		jp nz, .fnuword 
ab29			; 
ab29			;	if DEBUG_FORTH_WORDS 
ab29			;		DMARK "FGu" 
ab29			;		CALLMONITOR 
ab29			;	endif 
ab29			; 
ab29			;		; found a uword but is it the one we want... 
ab29			; 
ab29			; 
ab29			;	        pop de   ; get back the dsp name 
ab29			;		push de 
ab29			; 
ab29			;		push hl  ; to save the ptr 
ab29			; 
ab29			;		; skip opcode 
ab29			;		inc hl  
ab29			;		; skip next ptr 
ab29			;		inc hl  
ab29			;		inc hl 
ab29			;		; skip len 
ab29			;		inc hl 
ab29			; 
ab29			;	if DEBUG_FORTH_WORDS 
ab29			;		DMARK "FGc" 
ab29			;		CALLMONITOR 
ab29			;	endif 
ab29			;		call strcmp 
ab29			;		jp nz, .fnuword 
ab29			 
ab29			 
ab29 e1			pop hl 
ab2a			 
ab2a				 
ab2a				if DEBUG_FORTH_WORDS 
ab2a					DMARK "FGm" 
ab2a f5				push af  
ab2b 3a 3f ab			ld a, (.dmark)  
ab2e 32 65 ee			ld (debug_mark),a  
ab31 3a 40 ab			ld a, (.dmark+1)  
ab34 32 66 ee			ld (debug_mark+1),a  
ab37 3a 41 ab			ld a, (.dmark+2)  
ab3a 32 67 ee			ld (debug_mark+2),a  
ab3d 18 03			jr .pastdmark  
ab3f ..			.dmark: db "FGm"  
ab42 f1			.pastdmark: pop af  
ab43			endm  
# End of macro DMARK
ab43					CALLMONITOR 
ab43 cd 6f ee			call debug_vector  
ab46				endm  
# End of macro CALLMONITOR
ab46				endif 
ab46			 
ab46			 
ab46			 
ab46					; we have a uword so push its name to the stack 
ab46			 
ab46			;	   	push hl  ; save so we can move to next dict block 
ab46			;pop hl 
ab46			 
ab46					; update opcode to deleted 
ab46 3e 03				ld a, WORD_SYS_DELETED 
ab48 77					ld (hl), a 
ab49			 
ab49 23					inc hl  
ab4a					; skip next ptr 
ab4a 23					inc hl  
ab4b 23					inc hl 
ab4c					; skip len 
ab4c 23					inc hl 
ab4d			 
ab4d					; TODO change parser to skip deleted words but for now mark it out 
ab4d 3e 5f				ld a, "_" 
ab4f 77					ld  (hl),a 
ab50			 
ab50			;		jr .fudone 
ab50			; 
ab50			;.fnuword:	pop hl 
ab50			;		call forth_tok_next 
ab50			;		jp .fdouscan  
ab50			 
ab50			.flunotfound:		  
ab50			 
ab50			 
ab50					 
ab50					FORTH_DSP_POP 
ab50 cd 42 9d			call macro_forth_dsp_pop 
ab53				endm 
# End of macro FORTH_DSP_POP
ab53			;		ld hl, .luno 
ab53			;.fudone:		 pop hl 
ab53					NEXTW 
ab53 c3 76 9e			jp macro_next 
ab56				endm 
# End of macro NEXTW
ab56			.NOP: 
ab56				CWHEAD .COMO 77 "NOP" 3 WORD_FLAG_CODE 
ab56 61				db WORD_SYS_CORE+77             
ab57 7d ab			dw .COMO            
ab59 04				db 3 + 1 
ab5a .. 00			db "NOP",0              
ab5e				endm 
# End of macro CWHEAD
ab5e			; | NOP (  --  ) Do nothing | DONE 
ab5e					if DEBUG_FORTH_WORDS_KEY 
ab5e						DMARK "NOP" 
ab5e f5				push af  
ab5f 3a 73 ab			ld a, (.dmark)  
ab62 32 65 ee			ld (debug_mark),a  
ab65 3a 74 ab			ld a, (.dmark+1)  
ab68 32 66 ee			ld (debug_mark+1),a  
ab6b 3a 75 ab			ld a, (.dmark+2)  
ab6e 32 67 ee			ld (debug_mark+2),a  
ab71 18 03			jr .pastdmark  
ab73 ..			.dmark: db "NOP"  
ab76 f1			.pastdmark: pop af  
ab77			endm  
# End of macro DMARK
ab77						CALLMONITOR 
ab77 cd 6f ee			call debug_vector  
ab7a				endm  
# End of macro CALLMONITOR
ab7a					endif 
ab7a				       NEXTW 
ab7a c3 76 9e			jp macro_next 
ab7d				endm 
# End of macro NEXTW
ab7d			.COMO: 
ab7d				CWHEAD .COMC 90 "(" 1 WORD_FLAG_CODE 
ab7d 6e				db WORD_SYS_CORE+90             
ab7e cf ab			dw .COMC            
ab80 02				db 1 + 1 
ab81 .. 00			db "(",0              
ab83				endm 
# End of macro CWHEAD
ab83			; | ( ( -- )  Start of comment | DONE 
ab83			 
ab83			 
ab83 2a bc e5				ld hl, ( os_tok_ptr) 
ab86 11 ca ab			ld de, .closepar 
ab89					 
ab89					if DEBUG_FORTH_WORDS 
ab89						DMARK ").." 
ab89 f5				push af  
ab8a 3a 9e ab			ld a, (.dmark)  
ab8d 32 65 ee			ld (debug_mark),a  
ab90 3a 9f ab			ld a, (.dmark+1)  
ab93 32 66 ee			ld (debug_mark+1),a  
ab96 3a a0 ab			ld a, (.dmark+2)  
ab99 32 67 ee			ld (debug_mark+2),a  
ab9c 18 03			jr .pastdmark  
ab9e ..			.dmark: db ").."  
aba1 f1			.pastdmark: pop af  
aba2			endm  
# End of macro DMARK
aba2						CALLMONITOR 
aba2 cd 6f ee			call debug_vector  
aba5				endm  
# End of macro CALLMONITOR
aba5					endif 
aba5 cd 7d 9f			call findnexttok  
aba8			 
aba8					if DEBUG_FORTH_WORDS 
aba8						DMARK "IF5" 
aba8 f5				push af  
aba9 3a bd ab			ld a, (.dmark)  
abac 32 65 ee			ld (debug_mark),a  
abaf 3a be ab			ld a, (.dmark+1)  
abb2 32 66 ee			ld (debug_mark+1),a  
abb5 3a bf ab			ld a, (.dmark+2)  
abb8 32 67 ee			ld (debug_mark+2),a  
abbb 18 03			jr .pastdmark  
abbd ..			.dmark: db "IF5"  
abc0 f1			.pastdmark: pop af  
abc1			endm  
# End of macro DMARK
abc1						CALLMONITOR 
abc1 cd 6f ee			call debug_vector  
abc4				endm  
# End of macro CALLMONITOR
abc4					endif 
abc4				; replace below with ) exec using tok_ptr 
abc4 22 bc e5			ld (os_tok_ptr), hl 
abc7 c3 ff 9e			jp exec1 
abca			 
abca .. 00			.closepar:   db ")",0 
abcc			 
abcc				       NEXTW 
abcc c3 76 9e			jp macro_next 
abcf				endm 
# End of macro NEXTW
abcf			.COMC: 
abcf				CWHEAD .SCRATCH 91 ")" 1 WORD_FLAG_CODE 
abcf 6f				db WORD_SYS_CORE+91             
abd0 d8 ab			dw .SCRATCH            
abd2 02				db 1 + 1 
abd3 .. 00			db ")",0              
abd5				endm 
# End of macro CWHEAD
abd5			; | ) ( -- )  End of comment |  DONE  
abd5				       NEXTW 
abd5 c3 76 9e			jp macro_next 
abd8				endm 
# End of macro NEXTW
abd8			 
abd8			.SCRATCH: 
abd8				CWHEAD .INC 91 "SCRATCH" 7 WORD_FLAG_CODE 
abd8 6f				db WORD_SYS_CORE+91             
abd9 13 ac			dw .INC            
abdb 08				db 7 + 1 
abdc .. 00			db "SCRATCH",0              
abe4				endm 
# End of macro CWHEAD
abe4			; | SCRATCH ( u -- addr ) Pushes address of offset u to stack | DONE 
abe4			; | | The scratch area provides 32 word array. Can be used as single byte or as a word by passing the offset on stack. Pushes the resulting address to stack.  
abe4			; | | When used with the direct storage writing/malloc and the !@ or word versions it is possible to construct an expanded and flexible variable system 
abe4			; | |  
abe4			; | | e.g.    : score $00 scratch ; 
abe4			; | |  
abe4			; | | $00 score ! 
abe4			; | | $01 score +! 
abe4			; | |  
abe4			; | | e.g.   : varword $0a scratch ;  
abe4			; | | 
abe4			; | | $8000 varword ! 
abe4					if DEBUG_FORTH_WORDS_KEY 
abe4						DMARK "SCR" 
abe4 f5				push af  
abe5 3a f9 ab			ld a, (.dmark)  
abe8 32 65 ee			ld (debug_mark),a  
abeb 3a fa ab			ld a, (.dmark+1)  
abee 32 66 ee			ld (debug_mark+1),a  
abf1 3a fb ab			ld a, (.dmark+2)  
abf4 32 67 ee			ld (debug_mark+2),a  
abf7 18 03			jr .pastdmark  
abf9 ..			.dmark: db "SCR"  
abfc f1			.pastdmark: pop af  
abfd			endm  
# End of macro DMARK
abfd						CALLMONITOR 
abfd cd 6f ee			call debug_vector  
ac00				endm  
# End of macro CALLMONITOR
ac00					endif 
ac00			 
ac00					FORTH_DSP_VALUEHL 
ac00 cd 8a 9c			call macro_dsp_valuehl 
ac03				endm 
# End of macro FORTH_DSP_VALUEHL
ac03				 
ac03					FORTH_DSP_POP 
ac03 cd 42 9d			call macro_forth_dsp_pop 
ac06				endm 
# End of macro FORTH_DSP_POP
ac06			 
ac06 7d					ld a, l 
ac07 21 e0 e7				ld hl, os_var_array 
ac0a cd ea 8c				call addatohl 
ac0d			 
ac0d cd 85 9a				call forth_push_numhl 
ac10			 
ac10				       NEXTW 
ac10 c3 76 9e			jp macro_next 
ac13				endm 
# End of macro NEXTW
ac13			 
ac13			.INC: 
ac13				CWHEAD .DEC 91 "+!" 2 WORD_FLAG_CODE 
ac13 6f				db WORD_SYS_CORE+91             
ac14 69 ac			dw .DEC            
ac16 03				db 2 + 1 
ac17 .. 00			db "+!",0              
ac1a				endm 
# End of macro CWHEAD
ac1a			; | +! ( u a -- )  Increment byte at address a by the value u | DONE 
ac1a					if DEBUG_FORTH_WORDS_KEY 
ac1a						DMARK "+s_" 
ac1a f5				push af  
ac1b 3a 2f ac			ld a, (.dmark)  
ac1e 32 65 ee			ld (debug_mark),a  
ac21 3a 30 ac			ld a, (.dmark+1)  
ac24 32 66 ee			ld (debug_mark+1),a  
ac27 3a 31 ac			ld a, (.dmark+2)  
ac2a 32 67 ee			ld (debug_mark+2),a  
ac2d 18 03			jr .pastdmark  
ac2f ..			.dmark: db "+s_"  
ac32 f1			.pastdmark: pop af  
ac33			endm  
# End of macro DMARK
ac33						CALLMONITOR 
ac33 cd 6f ee			call debug_vector  
ac36				endm  
# End of macro CALLMONITOR
ac36					endif 
ac36			 
ac36					FORTH_DSP_VALUEHL 
ac36 cd 8a 9c			call macro_dsp_valuehl 
ac39				endm 
# End of macro FORTH_DSP_VALUEHL
ac39			 
ac39 e5					push hl   ; save address 
ac3a			 
ac3a					FORTH_DSP_POP 
ac3a cd 42 9d			call macro_forth_dsp_pop 
ac3d				endm 
# End of macro FORTH_DSP_POP
ac3d			 
ac3d					FORTH_DSP_VALUEHL 
ac3d cd 8a 9c			call macro_dsp_valuehl 
ac40				endm 
# End of macro FORTH_DSP_VALUEHL
ac40			 
ac40 e5					push hl 
ac41					FORTH_DSP_POP 
ac41 cd 42 9d			call macro_forth_dsp_pop 
ac44				endm 
# End of macro FORTH_DSP_POP
ac44 e1					pop hl 
ac45			 
ac45					; hl contains value to add to byte at a 
ac45				 
ac45 eb					ex de, hl 
ac46			 
ac46 e1					pop hl 
ac47			 
ac47					if DEBUG_FORTH_WORDS 
ac47						DMARK "INC" 
ac47 f5				push af  
ac48 3a 5c ac			ld a, (.dmark)  
ac4b 32 65 ee			ld (debug_mark),a  
ac4e 3a 5d ac			ld a, (.dmark+1)  
ac51 32 66 ee			ld (debug_mark+1),a  
ac54 3a 5e ac			ld a, (.dmark+2)  
ac57 32 67 ee			ld (debug_mark+2),a  
ac5a 18 03			jr .pastdmark  
ac5c ..			.dmark: db "INC"  
ac5f f1			.pastdmark: pop af  
ac60			endm  
# End of macro DMARK
ac60						CALLMONITOR 
ac60 cd 6f ee			call debug_vector  
ac63				endm  
# End of macro CALLMONITOR
ac63					endif 
ac63			 
ac63 7e					ld a,(hl) 
ac64 83					add e 
ac65 77					ld (hl),a 
ac66			 
ac66			 
ac66			 
ac66				       NEXTW 
ac66 c3 76 9e			jp macro_next 
ac69				endm 
# End of macro NEXTW
ac69			 
ac69			.DEC: 
ac69				CWHEAD .INC2 91 "-!" 2 WORD_FLAG_CODE 
ac69 6f				db WORD_SYS_CORE+91             
ac6a bd ac			dw .INC2            
ac6c 03				db 2 + 1 
ac6d .. 00			db "-!",0              
ac70				endm 
# End of macro CWHEAD
ac70			; | -! ( u a -- )  Decrement byte at address a by the value u | DONE 
ac70					if DEBUG_FORTH_WORDS_KEY 
ac70						DMARK "-s_" 
ac70 f5				push af  
ac71 3a 85 ac			ld a, (.dmark)  
ac74 32 65 ee			ld (debug_mark),a  
ac77 3a 86 ac			ld a, (.dmark+1)  
ac7a 32 66 ee			ld (debug_mark+1),a  
ac7d 3a 87 ac			ld a, (.dmark+2)  
ac80 32 67 ee			ld (debug_mark+2),a  
ac83 18 03			jr .pastdmark  
ac85 ..			.dmark: db "-s_"  
ac88 f1			.pastdmark: pop af  
ac89			endm  
# End of macro DMARK
ac89						CALLMONITOR 
ac89 cd 6f ee			call debug_vector  
ac8c				endm  
# End of macro CALLMONITOR
ac8c					endif 
ac8c			 
ac8c					FORTH_DSP_VALUEHL 
ac8c cd 8a 9c			call macro_dsp_valuehl 
ac8f				endm 
# End of macro FORTH_DSP_VALUEHL
ac8f			 
ac8f e5					push hl   ; save address 
ac90			 
ac90					FORTH_DSP_POP 
ac90 cd 42 9d			call macro_forth_dsp_pop 
ac93				endm 
# End of macro FORTH_DSP_POP
ac93			 
ac93					FORTH_DSP_VALUEHL 
ac93 cd 8a 9c			call macro_dsp_valuehl 
ac96				endm 
# End of macro FORTH_DSP_VALUEHL
ac96			 
ac96					; hl contains value to add to byte at a 
ac96				 
ac96 eb					ex de, hl 
ac97			 
ac97 e1					pop hl 
ac98			 
ac98					if DEBUG_FORTH_WORDS 
ac98						DMARK "DEC" 
ac98 f5				push af  
ac99 3a ad ac			ld a, (.dmark)  
ac9c 32 65 ee			ld (debug_mark),a  
ac9f 3a ae ac			ld a, (.dmark+1)  
aca2 32 66 ee			ld (debug_mark+1),a  
aca5 3a af ac			ld a, (.dmark+2)  
aca8 32 67 ee			ld (debug_mark+2),a  
acab 18 03			jr .pastdmark  
acad ..			.dmark: db "DEC"  
acb0 f1			.pastdmark: pop af  
acb1			endm  
# End of macro DMARK
acb1						CALLMONITOR 
acb1 cd 6f ee			call debug_vector  
acb4				endm  
# End of macro CALLMONITOR
acb4					endif 
acb4			 
acb4 7e					ld a,(hl) 
acb5 93					sub e 
acb6 77					ld (hl),a 
acb7			 
acb7			 
acb7					FORTH_DSP_POP 
acb7 cd 42 9d			call macro_forth_dsp_pop 
acba				endm 
# End of macro FORTH_DSP_POP
acba			 
acba				       NEXTW 
acba c3 76 9e			jp macro_next 
acbd				endm 
# End of macro NEXTW
acbd			 
acbd			.INC2: 
acbd				CWHEAD .DEC2 91 "+2!" 3 WORD_FLAG_CODE 
acbd 6f				db WORD_SYS_CORE+91             
acbe 6a ad			dw .DEC2            
acc0 04				db 3 + 1 
acc1 .. 00			db "+2!",0              
acc5				endm 
# End of macro CWHEAD
acc5			; | +2! ( u a -- )  Increment word at address a by the value u | DONE 
acc5			 
acc5					if DEBUG_FORTH_WORDS_KEY 
acc5						DMARK "+2s" 
acc5 f5				push af  
acc6 3a da ac			ld a, (.dmark)  
acc9 32 65 ee			ld (debug_mark),a  
accc 3a db ac			ld a, (.dmark+1)  
accf 32 66 ee			ld (debug_mark+1),a  
acd2 3a dc ac			ld a, (.dmark+2)  
acd5 32 67 ee			ld (debug_mark+2),a  
acd8 18 03			jr .pastdmark  
acda ..			.dmark: db "+2s"  
acdd f1			.pastdmark: pop af  
acde			endm  
# End of macro DMARK
acde						CALLMONITOR 
acde cd 6f ee			call debug_vector  
ace1				endm  
# End of macro CALLMONITOR
ace1					endif 
ace1			 
ace1					; Address 
ace1			 
ace1					FORTH_DSP_VALUEHL 
ace1 cd 8a 9c			call macro_dsp_valuehl 
ace4				endm 
# End of macro FORTH_DSP_VALUEHL
ace4			 
ace4 e5					push hl    ; save address 
ace5			 
ace5					; load content into de 
ace5			 
ace5 5e					ld e,(hl) 
ace6 23					inc hl 
ace7 56					ld d, (hl) 
ace8			 
ace8					if DEBUG_FORTH_WORDS 
ace8						DMARK "+2a" 
ace8 f5				push af  
ace9 3a fd ac			ld a, (.dmark)  
acec 32 65 ee			ld (debug_mark),a  
acef 3a fe ac			ld a, (.dmark+1)  
acf2 32 66 ee			ld (debug_mark+1),a  
acf5 3a ff ac			ld a, (.dmark+2)  
acf8 32 67 ee			ld (debug_mark+2),a  
acfb 18 03			jr .pastdmark  
acfd ..			.dmark: db "+2a"  
ad00 f1			.pastdmark: pop af  
ad01			endm  
# End of macro DMARK
ad01						CALLMONITOR 
ad01 cd 6f ee			call debug_vector  
ad04				endm  
# End of macro CALLMONITOR
ad04					endif 
ad04			 
ad04					FORTH_DSP_POP 
ad04 cd 42 9d			call macro_forth_dsp_pop 
ad07				endm 
# End of macro FORTH_DSP_POP
ad07			 
ad07					; Get value to add 
ad07			 
ad07					FORTH_DSP_VALUE 
ad07 cd 73 9c			call macro_forth_dsp_value 
ad0a				endm 
# End of macro FORTH_DSP_VALUE
ad0a			 
ad0a					if DEBUG_FORTH_WORDS 
ad0a						DMARK "+2v" 
ad0a f5				push af  
ad0b 3a 1f ad			ld a, (.dmark)  
ad0e 32 65 ee			ld (debug_mark),a  
ad11 3a 20 ad			ld a, (.dmark+1)  
ad14 32 66 ee			ld (debug_mark+1),a  
ad17 3a 21 ad			ld a, (.dmark+2)  
ad1a 32 67 ee			ld (debug_mark+2),a  
ad1d 18 03			jr .pastdmark  
ad1f ..			.dmark: db "+2v"  
ad22 f1			.pastdmark: pop af  
ad23			endm  
# End of macro DMARK
ad23						CALLMONITOR 
ad23 cd 6f ee			call debug_vector  
ad26				endm  
# End of macro CALLMONITOR
ad26					endif 
ad26			 
ad26 19					add hl, de 
ad27			 
ad27					if DEBUG_FORTH_WORDS 
ad27						DMARK "+2+" 
ad27 f5				push af  
ad28 3a 3c ad			ld a, (.dmark)  
ad2b 32 65 ee			ld (debug_mark),a  
ad2e 3a 3d ad			ld a, (.dmark+1)  
ad31 32 66 ee			ld (debug_mark+1),a  
ad34 3a 3e ad			ld a, (.dmark+2)  
ad37 32 67 ee			ld (debug_mark+2),a  
ad3a 18 03			jr .pastdmark  
ad3c ..			.dmark: db "+2+"  
ad3f f1			.pastdmark: pop af  
ad40			endm  
# End of macro DMARK
ad40						CALLMONITOR 
ad40 cd 6f ee			call debug_vector  
ad43				endm  
# End of macro CALLMONITOR
ad43					endif 
ad43			 
ad43					; move result to de 
ad43			 
ad43 eb					ex de, hl 
ad44			 
ad44					; Address 
ad44			 
ad44 e1					pop hl 
ad45			 
ad45					; save it back 
ad45			 
ad45 73					ld (hl), e 
ad46 23					inc hl 
ad47 72					ld (hl), d 
ad48			 
ad48					if DEBUG_FORTH_WORDS 
ad48						DMARK "+2e" 
ad48 f5				push af  
ad49 3a 5d ad			ld a, (.dmark)  
ad4c 32 65 ee			ld (debug_mark),a  
ad4f 3a 5e ad			ld a, (.dmark+1)  
ad52 32 66 ee			ld (debug_mark+1),a  
ad55 3a 5f ad			ld a, (.dmark+2)  
ad58 32 67 ee			ld (debug_mark+2),a  
ad5b 18 03			jr .pastdmark  
ad5d ..			.dmark: db "+2e"  
ad60 f1			.pastdmark: pop af  
ad61			endm  
# End of macro DMARK
ad61						CALLMONITOR 
ad61 cd 6f ee			call debug_vector  
ad64				endm  
# End of macro CALLMONITOR
ad64					endif 
ad64			 
ad64			 
ad64			 
ad64					FORTH_DSP_POP 
ad64 cd 42 9d			call macro_forth_dsp_pop 
ad67				endm 
# End of macro FORTH_DSP_POP
ad67			 
ad67			 
ad67				       NEXTW 
ad67 c3 76 9e			jp macro_next 
ad6a				endm 
# End of macro NEXTW
ad6a			 
ad6a			.DEC2: 
ad6a				CWHEAD .GET2 91 "-2!" 3 WORD_FLAG_CODE 
ad6a 6f				db WORD_SYS_CORE+91             
ad6b 19 ae			dw .GET2            
ad6d 04				db 3 + 1 
ad6e .. 00			db "-2!",0              
ad72				endm 
# End of macro CWHEAD
ad72			; | -2! ( u a -- )  Decrement word at address a by the value u | DONE 
ad72			 
ad72			 
ad72					if DEBUG_FORTH_WORDS_KEY 
ad72						DMARK "-2s" 
ad72 f5				push af  
ad73 3a 87 ad			ld a, (.dmark)  
ad76 32 65 ee			ld (debug_mark),a  
ad79 3a 88 ad			ld a, (.dmark+1)  
ad7c 32 66 ee			ld (debug_mark+1),a  
ad7f 3a 89 ad			ld a, (.dmark+2)  
ad82 32 67 ee			ld (debug_mark+2),a  
ad85 18 03			jr .pastdmark  
ad87 ..			.dmark: db "-2s"  
ad8a f1			.pastdmark: pop af  
ad8b			endm  
# End of macro DMARK
ad8b						CALLMONITOR 
ad8b cd 6f ee			call debug_vector  
ad8e				endm  
# End of macro CALLMONITOR
ad8e					endif 
ad8e			 
ad8e					; Address 
ad8e			 
ad8e					FORTH_DSP_VALUEHL 
ad8e cd 8a 9c			call macro_dsp_valuehl 
ad91				endm 
# End of macro FORTH_DSP_VALUEHL
ad91			 
ad91 e5					push hl    ; save address 
ad92			 
ad92					; load content into de 
ad92			 
ad92 5e					ld e,(hl) 
ad93 23					inc hl 
ad94 56					ld d, (hl) 
ad95			 
ad95					if DEBUG_FORTH_WORDS 
ad95						DMARK "-2a" 
ad95 f5				push af  
ad96 3a aa ad			ld a, (.dmark)  
ad99 32 65 ee			ld (debug_mark),a  
ad9c 3a ab ad			ld a, (.dmark+1)  
ad9f 32 66 ee			ld (debug_mark+1),a  
ada2 3a ac ad			ld a, (.dmark+2)  
ada5 32 67 ee			ld (debug_mark+2),a  
ada8 18 03			jr .pastdmark  
adaa ..			.dmark: db "-2a"  
adad f1			.pastdmark: pop af  
adae			endm  
# End of macro DMARK
adae						CALLMONITOR 
adae cd 6f ee			call debug_vector  
adb1				endm  
# End of macro CALLMONITOR
adb1					endif 
adb1			 
adb1					FORTH_DSP_POP 
adb1 cd 42 9d			call macro_forth_dsp_pop 
adb4				endm 
# End of macro FORTH_DSP_POP
adb4			 
adb4					; Get value to remove 
adb4			 
adb4					FORTH_DSP_VALUE 
adb4 cd 73 9c			call macro_forth_dsp_value 
adb7				endm 
# End of macro FORTH_DSP_VALUE
adb7			 
adb7					if DEBUG_FORTH_WORDS 
adb7						DMARK "-2v" 
adb7 f5				push af  
adb8 3a cc ad			ld a, (.dmark)  
adbb 32 65 ee			ld (debug_mark),a  
adbe 3a cd ad			ld a, (.dmark+1)  
adc1 32 66 ee			ld (debug_mark+1),a  
adc4 3a ce ad			ld a, (.dmark+2)  
adc7 32 67 ee			ld (debug_mark+2),a  
adca 18 03			jr .pastdmark  
adcc ..			.dmark: db "-2v"  
adcf f1			.pastdmark: pop af  
add0			endm  
# End of macro DMARK
add0						CALLMONITOR 
add0 cd 6f ee			call debug_vector  
add3				endm  
# End of macro CALLMONITOR
add3					endif 
add3			 
add3 eb					ex de, hl 
add4 ed 52				sbc hl, de 
add6			 
add6					if DEBUG_FORTH_WORDS 
add6						DMARK "-2d" 
add6 f5				push af  
add7 3a eb ad			ld a, (.dmark)  
adda 32 65 ee			ld (debug_mark),a  
addd 3a ec ad			ld a, (.dmark+1)  
ade0 32 66 ee			ld (debug_mark+1),a  
ade3 3a ed ad			ld a, (.dmark+2)  
ade6 32 67 ee			ld (debug_mark+2),a  
ade9 18 03			jr .pastdmark  
adeb ..			.dmark: db "-2d"  
adee f1			.pastdmark: pop af  
adef			endm  
# End of macro DMARK
adef						CALLMONITOR 
adef cd 6f ee			call debug_vector  
adf2				endm  
# End of macro CALLMONITOR
adf2					endif 
adf2			 
adf2					; move result to de 
adf2			 
adf2 eb					ex de, hl 
adf3			 
adf3					; Address 
adf3			 
adf3 e1					pop hl 
adf4			 
adf4					; save it back 
adf4			 
adf4 73					ld (hl), e 
adf5 23					inc hl 
adf6 72					ld (hl), d 
adf7			 
adf7					if DEBUG_FORTH_WORDS 
adf7						DMARK "-2e" 
adf7 f5				push af  
adf8 3a 0c ae			ld a, (.dmark)  
adfb 32 65 ee			ld (debug_mark),a  
adfe 3a 0d ae			ld a, (.dmark+1)  
ae01 32 66 ee			ld (debug_mark+1),a  
ae04 3a 0e ae			ld a, (.dmark+2)  
ae07 32 67 ee			ld (debug_mark+2),a  
ae0a 18 03			jr .pastdmark  
ae0c ..			.dmark: db "-2e"  
ae0f f1			.pastdmark: pop af  
ae10			endm  
# End of macro DMARK
ae10						CALLMONITOR 
ae10 cd 6f ee			call debug_vector  
ae13				endm  
# End of macro CALLMONITOR
ae13					endif 
ae13			 
ae13			 
ae13					FORTH_DSP_POP 
ae13 cd 42 9d			call macro_forth_dsp_pop 
ae16				endm 
# End of macro FORTH_DSP_POP
ae16			 
ae16			 
ae16			 
ae16				       NEXTW 
ae16 c3 76 9e			jp macro_next 
ae19				endm 
# End of macro NEXTW
ae19			.GET2: 
ae19				CWHEAD .BANG2 91 "2@" 2 WORD_FLAG_CODE 
ae19 6f				db WORD_SYS_CORE+91             
ae1a 4e ae			dw .BANG2            
ae1c 03				db 2 + 1 
ae1d .. 00			db "2@",0              
ae20				endm 
# End of macro CWHEAD
ae20			; | 2@ ( a -- u )  Push word at address a onto stack | DONE 
ae20					if DEBUG_FORTH_WORDS_KEY 
ae20						DMARK "2A_" 
ae20 f5				push af  
ae21 3a 35 ae			ld a, (.dmark)  
ae24 32 65 ee			ld (debug_mark),a  
ae27 3a 36 ae			ld a, (.dmark+1)  
ae2a 32 66 ee			ld (debug_mark+1),a  
ae2d 3a 37 ae			ld a, (.dmark+2)  
ae30 32 67 ee			ld (debug_mark+2),a  
ae33 18 03			jr .pastdmark  
ae35 ..			.dmark: db "2A_"  
ae38 f1			.pastdmark: pop af  
ae39			endm  
# End of macro DMARK
ae39						CALLMONITOR 
ae39 cd 6f ee			call debug_vector  
ae3c				endm  
# End of macro CALLMONITOR
ae3c					endif 
ae3c			 
ae3c					FORTH_DSP_VALUEHL 
ae3c cd 8a 9c			call macro_dsp_valuehl 
ae3f				endm 
# End of macro FORTH_DSP_VALUEHL
ae3f			 
ae3f e5					push hl   ; save address 
ae40			 
ae40					FORTH_DSP_POP 
ae40 cd 42 9d			call macro_forth_dsp_pop 
ae43				endm 
# End of macro FORTH_DSP_POP
ae43			 
ae43 e1					pop hl 
ae44			 
ae44 5e					ld e, (hl) 
ae45 23					inc hl 
ae46 56					ld d, (hl) 
ae47			 
ae47 eb					ex de, hl 
ae48			 
ae48 cd 85 9a				call forth_push_numhl 
ae4b			 
ae4b				       NEXTW 
ae4b c3 76 9e			jp macro_next 
ae4e				endm 
# End of macro NEXTW
ae4e			.BANG2: 
ae4e				CWHEAD .CONFIG 91 "2!" 2 WORD_FLAG_CODE 
ae4e 6f				db WORD_SYS_CORE+91             
ae4f 86 ae			dw .CONFIG            
ae51 03				db 2 + 1 
ae52 .. 00			db "2!",0              
ae55				endm 
# End of macro CWHEAD
ae55			; | 2! ( u a -- )  Store value u as a word at address a | DONE 
ae55					if DEBUG_FORTH_WORDS_KEY 
ae55						DMARK "2S_" 
ae55 f5				push af  
ae56 3a 6a ae			ld a, (.dmark)  
ae59 32 65 ee			ld (debug_mark),a  
ae5c 3a 6b ae			ld a, (.dmark+1)  
ae5f 32 66 ee			ld (debug_mark+1),a  
ae62 3a 6c ae			ld a, (.dmark+2)  
ae65 32 67 ee			ld (debug_mark+2),a  
ae68 18 03			jr .pastdmark  
ae6a ..			.dmark: db "2S_"  
ae6d f1			.pastdmark: pop af  
ae6e			endm  
# End of macro DMARK
ae6e						CALLMONITOR 
ae6e cd 6f ee			call debug_vector  
ae71				endm  
# End of macro CALLMONITOR
ae71					endif 
ae71			 
ae71					FORTH_DSP_VALUEHL 
ae71 cd 8a 9c			call macro_dsp_valuehl 
ae74				endm 
# End of macro FORTH_DSP_VALUEHL
ae74			 
ae74 e5					push hl   ; save address 
ae75			 
ae75			 
ae75					FORTH_DSP_POP 
ae75 cd 42 9d			call macro_forth_dsp_pop 
ae78				endm 
# End of macro FORTH_DSP_POP
ae78			 
ae78					 
ae78					FORTH_DSP_VALUEHL 
ae78 cd 8a 9c			call macro_dsp_valuehl 
ae7b				endm 
# End of macro FORTH_DSP_VALUEHL
ae7b			 
ae7b					FORTH_DSP_POP 
ae7b cd 42 9d			call macro_forth_dsp_pop 
ae7e				endm 
# End of macro FORTH_DSP_POP
ae7e			 
ae7e eb					ex de, hl    ; value now in de 
ae7f			 
ae7f e1					pop hl 
ae80			 
ae80 73					ld (hl), e 
ae81			 
ae81 23					inc hl 
ae82			 
ae82 72					ld (hl), d 
ae83			 
ae83			 
ae83				       NEXTW 
ae83 c3 76 9e			jp macro_next 
ae86				endm 
# End of macro NEXTW
ae86			.CONFIG: 
ae86				CWHEAD .ADTOS 91 "CONFIG" 6 WORD_FLAG_CODE 
ae86 6f				db WORD_SYS_CORE+91             
ae87 97 ae			dw .ADTOS            
ae89 07				db 6 + 1 
ae8a .. 00			db "CONFIG",0              
ae91				endm 
# End of macro CWHEAD
ae91			; | CONFIG ( -- )  Access the system configuration menu. Set boot from file, hardware diags, and more! | DONE 
ae91			 
ae91 cd 5e 92				call config 
ae94					NEXTW 
ae94 c3 76 9e			jp macro_next 
ae97				endm 
# End of macro NEXTW
ae97			 
ae97			.ADTOS: 
ae97				CWHEAD .SBTOS 91 "1+" 2 WORD_FLAG_CODE 
ae97 6f				db WORD_SYS_CORE+91             
ae98 ad ae			dw .SBTOS            
ae9a 03				db 2 + 1 
ae9b .. 00			db "1+",0              
ae9e				endm 
# End of macro CWHEAD
ae9e			; | 1+ ( u -- u )  Increment value on TOS | DONE 
ae9e			 
ae9e					FORTH_DSP_VALUEHL 
ae9e cd 8a 9c			call macro_dsp_valuehl 
aea1				endm 
# End of macro FORTH_DSP_VALUEHL
aea1 e5					push hl 
aea2			 
aea2					FORTH_DSP_POP 
aea2 cd 42 9d			call macro_forth_dsp_pop 
aea5				endm 
# End of macro FORTH_DSP_POP
aea5 e1					pop hl 
aea6			 
aea6 23					inc hl 
aea7 cd 85 9a				call forth_push_numhl 
aeaa					 
aeaa					NEXTW 
aeaa c3 76 9e			jp macro_next 
aead				endm 
# End of macro NEXTW
aead			.SBTOS: 
aead				CWHEAD .ADSTORE 91 "1-" 2 WORD_FLAG_CODE 
aead 6f				db WORD_SYS_CORE+91             
aeae c3 ae			dw .ADSTORE            
aeb0 03				db 2 + 1 
aeb1 .. 00			db "1-",0              
aeb4				endm 
# End of macro CWHEAD
aeb4			; | 1- ( u -- u )  Decrement value on TOS | DONE 
aeb4			 
aeb4					FORTH_DSP_VALUEHL 
aeb4 cd 8a 9c			call macro_dsp_valuehl 
aeb7				endm 
# End of macro FORTH_DSP_VALUEHL
aeb7 e5					push hl 
aeb8			 
aeb8					FORTH_DSP_POP 
aeb8 cd 42 9d			call macro_forth_dsp_pop 
aebb				endm 
# End of macro FORTH_DSP_POP
aebb e1					pop hl 
aebc			 
aebc 2b					dec hl 
aebd cd 85 9a				call forth_push_numhl 
aec0					 
aec0					NEXTW 
aec0 c3 76 9e			jp macro_next 
aec3				endm 
# End of macro NEXTW
aec3			.ADSTORE: 
aec3				CWHEAD .ADWSTORE 91 "1+!" 3 WORD_FLAG_CODE 
aec3 6f				db WORD_SYS_CORE+91             
aec4 d9 ae			dw .ADWSTORE            
aec6 04				db 3 + 1 
aec7 .. 00			db "1+!",0              
aecb				endm 
# End of macro CWHEAD
aecb			; | 1+! ( addr -- )  Increment byte at address addr | DONE 
aecb			 
aecb					FORTH_DSP_VALUEHL 
aecb cd 8a 9c			call macro_dsp_valuehl 
aece				endm 
# End of macro FORTH_DSP_VALUEHL
aece e5					push hl 
aecf			 
aecf					FORTH_DSP_POP 
aecf cd 42 9d			call macro_forth_dsp_pop 
aed2				endm 
# End of macro FORTH_DSP_POP
aed2 e1					pop hl 
aed3			 
aed3 7e					ld a, (hl) 
aed4 3c					inc a 
aed5 77					ld (hl), a 
aed6					 
aed6					NEXTW 
aed6 c3 76 9e			jp macro_next 
aed9				endm 
# End of macro NEXTW
aed9			.ADWSTORE: 
aed9				CWHEAD .SBSTORE 91 "1+2!" 4 WORD_FLAG_CODE 
aed9 6f				db WORD_SYS_CORE+91             
aeda f7 ae			dw .SBSTORE            
aedc 05				db 4 + 1 
aedd .. 00			db "1+2!",0              
aee2				endm 
# End of macro CWHEAD
aee2			; | 1+2! ( addr -- )  Increment word at address addr | DONE 
aee2			 
aee2					FORTH_DSP_VALUEHL 
aee2 cd 8a 9c			call macro_dsp_valuehl 
aee5				endm 
# End of macro FORTH_DSP_VALUEHL
aee5 e5					push hl 
aee6			 
aee6					FORTH_DSP_POP 
aee6 cd 42 9d			call macro_forth_dsp_pop 
aee9				endm 
# End of macro FORTH_DSP_POP
aee9 e1					pop hl 
aeea			 
aeea e5					push hl 
aeeb			 
aeeb cd f8 9d				call loadwordinhl 
aeee 23					inc hl 
aeef			 
aeef d1					pop de 
aef0 eb					ex de, hl 
aef1 73					ld (hl), e 
aef2 23					inc hl 
aef3 72					ld (hl), d 
aef4					 
aef4					NEXTW 
aef4 c3 76 9e			jp macro_next 
aef7				endm 
# End of macro NEXTW
aef7			.SBSTORE: 
aef7				CWHEAD .SBWSTORE 91 "1-!" 3 WORD_FLAG_CODE 
aef7 6f				db WORD_SYS_CORE+91             
aef8 0d af			dw .SBWSTORE            
aefa 04				db 3 + 1 
aefb .. 00			db "1-!",0              
aeff				endm 
# End of macro CWHEAD
aeff			; | 1-! ( addr -- )  Decrement byte at address addr | DONE 
aeff			 
aeff					FORTH_DSP_VALUEHL 
aeff cd 8a 9c			call macro_dsp_valuehl 
af02				endm 
# End of macro FORTH_DSP_VALUEHL
af02 e5					push hl 
af03			 
af03					FORTH_DSP_POP 
af03 cd 42 9d			call macro_forth_dsp_pop 
af06				endm 
# End of macro FORTH_DSP_POP
af06 e1					pop hl 
af07			 
af07 7e					ld a, (hl) 
af08 3d					dec a 
af09 77					ld (hl), a 
af0a					 
af0a					NEXTW 
af0a c3 76 9e			jp macro_next 
af0d				endm 
# End of macro NEXTW
af0d			.SBWSTORE: 
af0d				CWHEAD .ENDCORE 91 "1-2!" 4 WORD_FLAG_CODE 
af0d 6f				db WORD_SYS_CORE+91             
af0e 2b af			dw .ENDCORE            
af10 05				db 4 + 1 
af11 .. 00			db "1-2!",0              
af16				endm 
# End of macro CWHEAD
af16			; | 1-2! ( addr -- )  Decrement word at address addr | DONE 
af16			 
af16					FORTH_DSP_VALUEHL 
af16 cd 8a 9c			call macro_dsp_valuehl 
af19				endm 
# End of macro FORTH_DSP_VALUEHL
af19 e5					push hl 
af1a			 
af1a					FORTH_DSP_POP 
af1a cd 42 9d			call macro_forth_dsp_pop 
af1d				endm 
# End of macro FORTH_DSP_POP
af1d e1					pop hl 
af1e			 
af1e e5					push hl 
af1f			 
af1f cd f8 9d				call loadwordinhl 
af22 2b					dec hl 
af23			 
af23 d1					pop de 
af24 eb					ex de, hl 
af25 73					ld (hl), e 
af26 23					inc hl 
af27 72					ld (hl), d 
af28					 
af28					NEXTW 
af28 c3 76 9e			jp macro_next 
af2b				endm 
# End of macro NEXTW
af2b			.ENDCORE: 
af2b			 
af2b			; eof 
af2b			 
af2b			 
# End of file forth_words_core.asm
af2b			include "forth_words_flow.asm" 
af2b			 
af2b			; | ## Program Flow Words 
af2b			 
af2b			.IF: 
af2b				CWHEAD .THEN 10 "IF" 2 WORD_FLAG_CODE 
af2b 1e				db WORD_SYS_CORE+10             
af2c 20 b0			dw .THEN            
af2e 03				db 2 + 1 
af2f .. 00			db "IF",0              
af32				endm 
# End of macro CWHEAD
af32			; | IF ( w -- f ) If TOS is true exec code following up to THEN - Note: currently not supporting ELSE or nested IF | DONE 
af32			; 
af32					if DEBUG_FORTH_WORDS_KEY 
af32						DMARK "IF." 
af32 f5				push af  
af33 3a 47 af			ld a, (.dmark)  
af36 32 65 ee			ld (debug_mark),a  
af39 3a 48 af			ld a, (.dmark+1)  
af3c 32 66 ee			ld (debug_mark+1),a  
af3f 3a 49 af			ld a, (.dmark+2)  
af42 32 67 ee			ld (debug_mark+2),a  
af45 18 03			jr .pastdmark  
af47 ..			.dmark: db "IF."  
af4a f1			.pastdmark: pop af  
af4b			endm  
# End of macro DMARK
af4b						CALLMONITOR 
af4b cd 6f ee			call debug_vector  
af4e				endm  
# End of macro CALLMONITOR
af4e					endif 
af4e			; eval TOS 
af4e			 
af4e				FORTH_DSP_VALUEHL 
af4e cd 8a 9c			call macro_dsp_valuehl 
af51				endm 
# End of macro FORTH_DSP_VALUEHL
af51			 
af51			;	push hl 
af51				FORTH_DSP_POP 
af51 cd 42 9d			call macro_forth_dsp_pop 
af54				endm 
# End of macro FORTH_DSP_POP
af54			;	pop hl 
af54			 
af54					if DEBUG_FORTH_WORDS 
af54						DMARK "IF1" 
af54 f5				push af  
af55 3a 69 af			ld a, (.dmark)  
af58 32 65 ee			ld (debug_mark),a  
af5b 3a 6a af			ld a, (.dmark+1)  
af5e 32 66 ee			ld (debug_mark+1),a  
af61 3a 6b af			ld a, (.dmark+2)  
af64 32 67 ee			ld (debug_mark+2),a  
af67 18 03			jr .pastdmark  
af69 ..			.dmark: db "IF1"  
af6c f1			.pastdmark: pop af  
af6d			endm  
# End of macro DMARK
af6d						CALLMONITOR 
af6d cd 6f ee			call debug_vector  
af70				endm  
# End of macro CALLMONITOR
af70					endif 
af70 b7				or a        ; clear carry flag 
af71 11 00 00			ld de, 0 
af74 eb				ex de,hl 
af75 ed 52			sbc hl, de 
af77 c2 01 b0			jp nz, .iftrue 
af7a			 
af7a					if DEBUG_FORTH_WORDS 
af7a						DMARK "IF2" 
af7a f5				push af  
af7b 3a 8f af			ld a, (.dmark)  
af7e 32 65 ee			ld (debug_mark),a  
af81 3a 90 af			ld a, (.dmark+1)  
af84 32 66 ee			ld (debug_mark+1),a  
af87 3a 91 af			ld a, (.dmark+2)  
af8a 32 67 ee			ld (debug_mark+2),a  
af8d 18 03			jr .pastdmark  
af8f ..			.dmark: db "IF2"  
af92 f1			.pastdmark: pop af  
af93			endm  
# End of macro DMARK
af93						CALLMONITOR 
af93 cd 6f ee			call debug_vector  
af96				endm  
# End of macro CALLMONITOR
af96					endif 
af96			 
af96			; if not true then skip to THEN 
af96			 
af96				; TODO get tok_ptr 
af96				; TODO consume toks until we get to THEN 
af96			 
af96 2a bc e5			ld hl, (os_tok_ptr) 
af99					if DEBUG_FORTH_WORDS 
af99						DMARK "IF3" 
af99 f5				push af  
af9a 3a ae af			ld a, (.dmark)  
af9d 32 65 ee			ld (debug_mark),a  
afa0 3a af af			ld a, (.dmark+1)  
afa3 32 66 ee			ld (debug_mark+1),a  
afa6 3a b0 af			ld a, (.dmark+2)  
afa9 32 67 ee			ld (debug_mark+2),a  
afac 18 03			jr .pastdmark  
afae ..			.dmark: db "IF3"  
afb1 f1			.pastdmark: pop af  
afb2			endm  
# End of macro DMARK
afb2						CALLMONITOR 
afb2 cd 6f ee			call debug_vector  
afb5				endm  
# End of macro CALLMONITOR
afb5						 
afb5					endif 
afb5 11 fc af			ld de, .ifthen 
afb8					if DEBUG_FORTH_WORDS 
afb8						DMARK "IF4" 
afb8 f5				push af  
afb9 3a cd af			ld a, (.dmark)  
afbc 32 65 ee			ld (debug_mark),a  
afbf 3a ce af			ld a, (.dmark+1)  
afc2 32 66 ee			ld (debug_mark+1),a  
afc5 3a cf af			ld a, (.dmark+2)  
afc8 32 67 ee			ld (debug_mark+2),a  
afcb 18 03			jr .pastdmark  
afcd ..			.dmark: db "IF4"  
afd0 f1			.pastdmark: pop af  
afd1			endm  
# End of macro DMARK
afd1						CALLMONITOR 
afd1 cd 6f ee			call debug_vector  
afd4				endm  
# End of macro CALLMONITOR
afd4					endif 
afd4 cd 7d 9f			call findnexttok  
afd7			 
afd7					if DEBUG_FORTH_WORDS 
afd7						DMARK "IF5" 
afd7 f5				push af  
afd8 3a ec af			ld a, (.dmark)  
afdb 32 65 ee			ld (debug_mark),a  
afde 3a ed af			ld a, (.dmark+1)  
afe1 32 66 ee			ld (debug_mark+1),a  
afe4 3a ee af			ld a, (.dmark+2)  
afe7 32 67 ee			ld (debug_mark+2),a  
afea 18 03			jr .pastdmark  
afec ..			.dmark: db "IF5"  
afef f1			.pastdmark: pop af  
aff0			endm  
# End of macro DMARK
aff0						CALLMONITOR 
aff0 cd 6f ee			call debug_vector  
aff3				endm  
# End of macro CALLMONITOR
aff3					endif 
aff3				; TODO replace below with ; exec using tok_ptr 
aff3 22 bc e5			ld (os_tok_ptr), hl 
aff6 c3 ff 9e			jp exec1 
aff9				NEXTW 
aff9 c3 76 9e			jp macro_next 
affc				endm 
# End of macro NEXTW
affc			 
affc .. 00		.ifthen:  db "THEN",0 
b001			 
b001			.iftrue:		 
b001				; Exec next words normally 
b001			 
b001				; if true then exec following IF as normal 
b001					if DEBUG_FORTH_WORDS 
b001						DMARK "IFT" 
b001 f5				push af  
b002 3a 16 b0			ld a, (.dmark)  
b005 32 65 ee			ld (debug_mark),a  
b008 3a 17 b0			ld a, (.dmark+1)  
b00b 32 66 ee			ld (debug_mark+1),a  
b00e 3a 18 b0			ld a, (.dmark+2)  
b011 32 67 ee			ld (debug_mark+2),a  
b014 18 03			jr .pastdmark  
b016 ..			.dmark: db "IFT"  
b019 f1			.pastdmark: pop af  
b01a			endm  
# End of macro DMARK
b01a						CALLMONITOR 
b01a cd 6f ee			call debug_vector  
b01d				endm  
# End of macro CALLMONITOR
b01d					endif 
b01d			 
b01d					NEXTW 
b01d c3 76 9e			jp macro_next 
b020				endm 
# End of macro NEXTW
b020			.THEN: 
b020				CWHEAD .ELSE 11 "THEN" 4 WORD_FLAG_CODE 
b020 1f				db WORD_SYS_CORE+11             
b021 48 b0			dw .ELSE            
b023 05				db 4 + 1 
b024 .. 00			db "THEN",0              
b029				endm 
# End of macro CWHEAD
b029			; | THEN ( -- ) Does nothing. It is a marker for the end of an IF block | DONE 
b029					if DEBUG_FORTH_WORDS_KEY 
b029						DMARK "THN" 
b029 f5				push af  
b02a 3a 3e b0			ld a, (.dmark)  
b02d 32 65 ee			ld (debug_mark),a  
b030 3a 3f b0			ld a, (.dmark+1)  
b033 32 66 ee			ld (debug_mark+1),a  
b036 3a 40 b0			ld a, (.dmark+2)  
b039 32 67 ee			ld (debug_mark+2),a  
b03c 18 03			jr .pastdmark  
b03e ..			.dmark: db "THN"  
b041 f1			.pastdmark: pop af  
b042			endm  
# End of macro DMARK
b042						CALLMONITOR 
b042 cd 6f ee			call debug_vector  
b045				endm  
# End of macro CALLMONITOR
b045					endif 
b045					NEXTW 
b045 c3 76 9e			jp macro_next 
b048				endm 
# End of macro NEXTW
b048			.ELSE: 
b048				CWHEAD .DO 12 "ELSE" 2 WORD_FLAG_CODE 
b048 20				db WORD_SYS_CORE+12             
b049 70 b0			dw .DO            
b04b 03				db 2 + 1 
b04c .. 00			db "ELSE",0              
b051				endm 
# End of macro CWHEAD
b051			; | ELSE ( -- ) Not supported - does nothing | TODO 
b051			 
b051					if DEBUG_FORTH_WORDS_KEY 
b051						DMARK "ELS" 
b051 f5				push af  
b052 3a 66 b0			ld a, (.dmark)  
b055 32 65 ee			ld (debug_mark),a  
b058 3a 67 b0			ld a, (.dmark+1)  
b05b 32 66 ee			ld (debug_mark+1),a  
b05e 3a 68 b0			ld a, (.dmark+2)  
b061 32 67 ee			ld (debug_mark+2),a  
b064 18 03			jr .pastdmark  
b066 ..			.dmark: db "ELS"  
b069 f1			.pastdmark: pop af  
b06a			endm  
# End of macro DMARK
b06a						CALLMONITOR 
b06a cd 6f ee			call debug_vector  
b06d				endm  
# End of macro CALLMONITOR
b06d					endif 
b06d			 
b06d			 
b06d					NEXTW 
b06d c3 76 9e			jp macro_next 
b070				endm 
# End of macro NEXTW
b070			.DO: 
b070				CWHEAD .LOOP 13 "DO" 2 WORD_FLAG_CODE 
b070 21				db WORD_SYS_CORE+13             
b071 97 b1			dw .LOOP            
b073 03				db 2 + 1 
b074 .. 00			db "DO",0              
b077				endm 
# End of macro CWHEAD
b077			; | DO ( u1 u2 -- ) Loop starting at u2 with a limit of u1 | DONE 
b077			 
b077					if DEBUG_FORTH_WORDS_KEY 
b077						DMARK "DO." 
b077 f5				push af  
b078 3a 8c b0			ld a, (.dmark)  
b07b 32 65 ee			ld (debug_mark),a  
b07e 3a 8d b0			ld a, (.dmark+1)  
b081 32 66 ee			ld (debug_mark+1),a  
b084 3a 8e b0			ld a, (.dmark+2)  
b087 32 67 ee			ld (debug_mark+2),a  
b08a 18 03			jr .pastdmark  
b08c ..			.dmark: db "DO."  
b08f f1			.pastdmark: pop af  
b090			endm  
# End of macro DMARK
b090						CALLMONITOR 
b090 cd 6f ee			call debug_vector  
b093				endm  
# End of macro CALLMONITOR
b093					endif 
b093			;  push pc to rsp stack past the DO 
b093			 
b093 2a bc e5				ld hl, (os_tok_ptr) 
b096 23					inc hl   ; D 
b097 23					inc hl  ; O 
b098 23					inc hl   ; null 
b099					if DEBUG_FORTH_WORDS 
b099						DMARK "DO2" 
b099 f5				push af  
b09a 3a ae b0			ld a, (.dmark)  
b09d 32 65 ee			ld (debug_mark),a  
b0a0 3a af b0			ld a, (.dmark+1)  
b0a3 32 66 ee			ld (debug_mark+1),a  
b0a6 3a b0 b0			ld a, (.dmark+2)  
b0a9 32 67 ee			ld (debug_mark+2),a  
b0ac 18 03			jr .pastdmark  
b0ae ..			.dmark: db "DO2"  
b0b1 f1			.pastdmark: pop af  
b0b2			endm  
# End of macro DMARK
b0b2						CALLMONITOR 
b0b2 cd 6f ee			call debug_vector  
b0b5				endm  
# End of macro CALLMONITOR
b0b5					endif 
b0b5					FORTH_RSP_NEXT 
b0b5 cd 2c 9a			call macro_forth_rsp_next 
b0b8				endm 
# End of macro FORTH_RSP_NEXT
b0b8					if DEBUG_FORTH_WORDS 
b0b8						DMARK "DO3" 
b0b8 f5				push af  
b0b9 3a cd b0			ld a, (.dmark)  
b0bc 32 65 ee			ld (debug_mark),a  
b0bf 3a ce b0			ld a, (.dmark+1)  
b0c2 32 66 ee			ld (debug_mark+1),a  
b0c5 3a cf b0			ld a, (.dmark+2)  
b0c8 32 67 ee			ld (debug_mark+2),a  
b0cb 18 03			jr .pastdmark  
b0cd ..			.dmark: db "DO3"  
b0d0 f1			.pastdmark: pop af  
b0d1			endm  
# End of macro DMARK
b0d1						CALLMONITOR 
b0d1 cd 6f ee			call debug_vector  
b0d4				endm  
# End of macro CALLMONITOR
b0d4					endif 
b0d4			 
b0d4					;if DEBUG_FORTH_WORDS 
b0d4				;		push hl 
b0d4			;		endif  
b0d4			 
b0d4			; get counters from data stack 
b0d4			 
b0d4			 
b0d4					FORTH_DSP_VALUEHL 
b0d4 cd 8a 9c			call macro_dsp_valuehl 
b0d7				endm 
# End of macro FORTH_DSP_VALUEHL
b0d7 e5					push hl		 ; hl now has starting counter which needs to be tos 
b0d8			 
b0d8					if DEBUG_FORTH_WORDS 
b0d8						DMARK "DO4" 
b0d8 f5				push af  
b0d9 3a ed b0			ld a, (.dmark)  
b0dc 32 65 ee			ld (debug_mark),a  
b0df 3a ee b0			ld a, (.dmark+1)  
b0e2 32 66 ee			ld (debug_mark+1),a  
b0e5 3a ef b0			ld a, (.dmark+2)  
b0e8 32 67 ee			ld (debug_mark+2),a  
b0eb 18 03			jr .pastdmark  
b0ed ..			.dmark: db "DO4"  
b0f0 f1			.pastdmark: pop af  
b0f1			endm  
# End of macro DMARK
b0f1						CALLMONITOR 
b0f1 cd 6f ee			call debug_vector  
b0f4				endm  
# End of macro CALLMONITOR
b0f4					endif 
b0f4					FORTH_DSP_POP 
b0f4 cd 42 9d			call macro_forth_dsp_pop 
b0f7				endm 
# End of macro FORTH_DSP_POP
b0f7			 
b0f7					if DEBUG_FORTH_WORDS 
b0f7						DMARK "DO5" 
b0f7 f5				push af  
b0f8 3a 0c b1			ld a, (.dmark)  
b0fb 32 65 ee			ld (debug_mark),a  
b0fe 3a 0d b1			ld a, (.dmark+1)  
b101 32 66 ee			ld (debug_mark+1),a  
b104 3a 0e b1			ld a, (.dmark+2)  
b107 32 67 ee			ld (debug_mark+2),a  
b10a 18 03			jr .pastdmark  
b10c ..			.dmark: db "DO5"  
b10f f1			.pastdmark: pop af  
b110			endm  
# End of macro DMARK
b110						CALLMONITOR 
b110 cd 6f ee			call debug_vector  
b113				endm  
# End of macro CALLMONITOR
b113					endif 
b113			 
b113					FORTH_DSP_VALUEHL 
b113 cd 8a 9c			call macro_dsp_valuehl 
b116				endm 
# End of macro FORTH_DSP_VALUEHL
b116			;		push hl		 ; hl now has starting limit counter 
b116			 
b116					if DEBUG_FORTH_WORDS 
b116						DMARK "DO6" 
b116 f5				push af  
b117 3a 2b b1			ld a, (.dmark)  
b11a 32 65 ee			ld (debug_mark),a  
b11d 3a 2c b1			ld a, (.dmark+1)  
b120 32 66 ee			ld (debug_mark+1),a  
b123 3a 2d b1			ld a, (.dmark+2)  
b126 32 67 ee			ld (debug_mark+2),a  
b129 18 03			jr .pastdmark  
b12b ..			.dmark: db "DO6"  
b12e f1			.pastdmark: pop af  
b12f			endm  
# End of macro DMARK
b12f						CALLMONITOR 
b12f cd 6f ee			call debug_vector  
b132				endm  
# End of macro CALLMONITOR
b132					endif 
b132					FORTH_DSP_POP 
b132 cd 42 9d			call macro_forth_dsp_pop 
b135				endm 
# End of macro FORTH_DSP_POP
b135			 
b135			; put counters on the loop stack 
b135			 
b135			;		pop hl			 ; limit counter 
b135 d1					pop de			; start counter 
b136			 
b136					; push limit counter 
b136			 
b136					if DEBUG_FORTH_WORDS 
b136						DMARK "DO7" 
b136 f5				push af  
b137 3a 4b b1			ld a, (.dmark)  
b13a 32 65 ee			ld (debug_mark),a  
b13d 3a 4c b1			ld a, (.dmark+1)  
b140 32 66 ee			ld (debug_mark+1),a  
b143 3a 4d b1			ld a, (.dmark+2)  
b146 32 67 ee			ld (debug_mark+2),a  
b149 18 03			jr .pastdmark  
b14b ..			.dmark: db "DO7"  
b14e f1			.pastdmark: pop af  
b14f			endm  
# End of macro DMARK
b14f						CALLMONITOR 
b14f cd 6f ee			call debug_vector  
b152				endm  
# End of macro CALLMONITOR
b152					endif 
b152					FORTH_LOOP_NEXT 
b152 cd bb 9c			call macro_forth_loop_next 
b155				endm 
# End of macro FORTH_LOOP_NEXT
b155			 
b155					; push start counter 
b155			 
b155 eb					ex de, hl 
b156					if DEBUG_FORTH_WORDS 
b156						DMARK "DO7" 
b156 f5				push af  
b157 3a 6b b1			ld a, (.dmark)  
b15a 32 65 ee			ld (debug_mark),a  
b15d 3a 6c b1			ld a, (.dmark+1)  
b160 32 66 ee			ld (debug_mark+1),a  
b163 3a 6d b1			ld a, (.dmark+2)  
b166 32 67 ee			ld (debug_mark+2),a  
b169 18 03			jr .pastdmark  
b16b ..			.dmark: db "DO7"  
b16e f1			.pastdmark: pop af  
b16f			endm  
# End of macro DMARK
b16f						CALLMONITOR 
b16f cd 6f ee			call debug_vector  
b172				endm  
# End of macro CALLMONITOR
b172					endif 
b172					FORTH_LOOP_NEXT 
b172 cd bb 9c			call macro_forth_loop_next 
b175				endm 
# End of macro FORTH_LOOP_NEXT
b175			 
b175			 
b175					; init first round of I counter 
b175			 
b175 22 e0 e5				ld (os_current_i), hl 
b178			 
b178					if DEBUG_FORTH_WORDS 
b178						DMARK "DO8" 
b178 f5				push af  
b179 3a 8d b1			ld a, (.dmark)  
b17c 32 65 ee			ld (debug_mark),a  
b17f 3a 8e b1			ld a, (.dmark+1)  
b182 32 66 ee			ld (debug_mark+1),a  
b185 3a 8f b1			ld a, (.dmark+2)  
b188 32 67 ee			ld (debug_mark+2),a  
b18b 18 03			jr .pastdmark  
b18d ..			.dmark: db "DO8"  
b190 f1			.pastdmark: pop af  
b191			endm  
# End of macro DMARK
b191						CALLMONITOR 
b191 cd 6f ee			call debug_vector  
b194				endm  
# End of macro CALLMONITOR
b194					endif 
b194			 
b194					NEXTW 
b194 c3 76 9e			jp macro_next 
b197				endm 
# End of macro NEXTW
b197			.LOOP: 
b197				CWHEAD .I 14 "LOOP" 4 WORD_FLAG_CODE 
b197 22				db WORD_SYS_CORE+14             
b198 af b2			dw .I            
b19a 05				db 4 + 1 
b19b .. 00			db "LOOP",0              
b1a0				endm 
# End of macro CWHEAD
b1a0			; | LOOP ( -- ) Increment and test loop counter  | DONE 
b1a0			 
b1a0				; pop tos as current loop count to hl 
b1a0			 
b1a0				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
b1a0			 
b1a0				FORTH_LOOP_TOS 
b1a0 cd ee 9c			call macro_forth_loop_tos 
b1a3				endm 
# End of macro FORTH_LOOP_TOS
b1a3 e5				push hl 
b1a4			 
b1a4					if DEBUG_FORTH_WORDS_KEY 
b1a4						DMARK "LOP" 
b1a4 f5				push af  
b1a5 3a b9 b1			ld a, (.dmark)  
b1a8 32 65 ee			ld (debug_mark),a  
b1ab 3a ba b1			ld a, (.dmark+1)  
b1ae 32 66 ee			ld (debug_mark+1),a  
b1b1 3a bb b1			ld a, (.dmark+2)  
b1b4 32 67 ee			ld (debug_mark+2),a  
b1b7 18 03			jr .pastdmark  
b1b9 ..			.dmark: db "LOP"  
b1bc f1			.pastdmark: pop af  
b1bd			endm  
# End of macro DMARK
b1bd						CALLMONITOR 
b1bd cd 6f ee			call debug_vector  
b1c0				endm  
# End of macro CALLMONITOR
b1c0					endif 
b1c0				; next item on the stack is the limit. get it 
b1c0			 
b1c0			 
b1c0				FORTH_LOOP_POP 
b1c0 cd f8 9c			call macro_forth_loop_pop 
b1c3				endm 
# End of macro FORTH_LOOP_POP
b1c3			 
b1c3				FORTH_LOOP_TOS 
b1c3 cd ee 9c			call macro_forth_loop_tos 
b1c6				endm 
# End of macro FORTH_LOOP_TOS
b1c6			 
b1c6 d1				pop de		 ; de = i, hl = limit 
b1c7			 
b1c7					if DEBUG_FORTH_WORDS 
b1c7						DMARK "LP1" 
b1c7 f5				push af  
b1c8 3a dc b1			ld a, (.dmark)  
b1cb 32 65 ee			ld (debug_mark),a  
b1ce 3a dd b1			ld a, (.dmark+1)  
b1d1 32 66 ee			ld (debug_mark+1),a  
b1d4 3a de b1			ld a, (.dmark+2)  
b1d7 32 67 ee			ld (debug_mark+2),a  
b1da 18 03			jr .pastdmark  
b1dc ..			.dmark: db "LP1"  
b1df f1			.pastdmark: pop af  
b1e0			endm  
# End of macro DMARK
b1e0						CALLMONITOR 
b1e0 cd 6f ee			call debug_vector  
b1e3				endm  
# End of macro CALLMONITOR
b1e3					endif 
b1e3			 
b1e3				; go back to previous word 
b1e3			 
b1e3 d5				push de    ; save I for inc later 
b1e4			 
b1e4			 
b1e4				; get limit 
b1e4				;  is I at limit? 
b1e4			 
b1e4			 
b1e4					if DEBUG_FORTH_WORDS 
b1e4						DMARK "LP1" 
b1e4 f5				push af  
b1e5 3a f9 b1			ld a, (.dmark)  
b1e8 32 65 ee			ld (debug_mark),a  
b1eb 3a fa b1			ld a, (.dmark+1)  
b1ee 32 66 ee			ld (debug_mark+1),a  
b1f1 3a fb b1			ld a, (.dmark+2)  
b1f4 32 67 ee			ld (debug_mark+2),a  
b1f7 18 03			jr .pastdmark  
b1f9 ..			.dmark: db "LP1"  
b1fc f1			.pastdmark: pop af  
b1fd			endm  
# End of macro DMARK
b1fd						CALLMONITOR 
b1fd cd 6f ee			call debug_vector  
b200				endm  
# End of macro CALLMONITOR
b200					endif 
b200			 
b200 ed 52			sbc hl, de 
b202			 
b202			 
b202				;  if at limit pop both limit and current off stack do NEXT and get rid of saved DO 
b202			 
b202 20 26				jr nz, .loopnotdone 
b204			 
b204 e1				pop hl   ; get rid of saved I 
b205				FORTH_LOOP_POP     ; get rid of limit 
b205 cd f8 9c			call macro_forth_loop_pop 
b208				endm 
# End of macro FORTH_LOOP_POP
b208			 
b208				FORTH_RSP_POP     ; get rid of DO ptr 
b208 cd 4d 9a			call macro_forth_rsp_pop 
b20b				endm 
# End of macro FORTH_RSP_POP
b20b			 
b20b			if DEBUG_FORTH_WORDS 
b20b						DMARK "LP>" 
b20b f5				push af  
b20c 3a 20 b2			ld a, (.dmark)  
b20f 32 65 ee			ld (debug_mark),a  
b212 3a 21 b2			ld a, (.dmark+1)  
b215 32 66 ee			ld (debug_mark+1),a  
b218 3a 22 b2			ld a, (.dmark+2)  
b21b 32 67 ee			ld (debug_mark+2),a  
b21e 18 03			jr .pastdmark  
b220 ..			.dmark: db "LP>"  
b223 f1			.pastdmark: pop af  
b224			endm  
# End of macro DMARK
b224				CALLMONITOR 
b224 cd 6f ee			call debug_vector  
b227				endm  
# End of macro CALLMONITOR
b227			endif 
b227			 
b227					NEXTW 
b227 c3 76 9e			jp macro_next 
b22a				endm 
# End of macro NEXTW
b22a				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
b22a			 
b22a			.loopnotdone: 
b22a			 
b22a e1				pop hl    ; get I 
b22b 23				inc hl 
b22c			 
b22c			   	; save new I 
b22c			 
b22c			 
b22c					; set I counter 
b22c			 
b22c 22 e0 e5				ld (os_current_i), hl 
b22f			 
b22f					if DEBUG_FORTH_WORDS 
b22f						DMARK "LPN" 
b22f f5				push af  
b230 3a 44 b2			ld a, (.dmark)  
b233 32 65 ee			ld (debug_mark),a  
b236 3a 45 b2			ld a, (.dmark+1)  
b239 32 66 ee			ld (debug_mark+1),a  
b23c 3a 46 b2			ld a, (.dmark+2)  
b23f 32 67 ee			ld (debug_mark+2),a  
b242 18 03			jr .pastdmark  
b244 ..			.dmark: db "LPN"  
b247 f1			.pastdmark: pop af  
b248			endm  
# End of macro DMARK
b248					CALLMONITOR 
b248 cd 6f ee			call debug_vector  
b24b				endm  
# End of macro CALLMONITOR
b24b					endif 
b24b					 
b24b				FORTH_LOOP_NEXT 
b24b cd bb 9c			call macro_forth_loop_next 
b24e				endm 
# End of macro FORTH_LOOP_NEXT
b24e			 
b24e			 
b24e					if DEBUG_FORTH_WORDS 
b24e eb						ex de,hl 
b24f					endif 
b24f			 
b24f			;	; get DO ptr 
b24f			; 
b24f					if DEBUG_FORTH_WORDS 
b24f						DMARK "LP7" 
b24f f5				push af  
b250 3a 64 b2			ld a, (.dmark)  
b253 32 65 ee			ld (debug_mark),a  
b256 3a 65 b2			ld a, (.dmark+1)  
b259 32 66 ee			ld (debug_mark+1),a  
b25c 3a 66 b2			ld a, (.dmark+2)  
b25f 32 67 ee			ld (debug_mark+2),a  
b262 18 03			jr .pastdmark  
b264 ..			.dmark: db "LP7"  
b267 f1			.pastdmark: pop af  
b268			endm  
# End of macro DMARK
b268					CALLMONITOR 
b268 cd 6f ee			call debug_vector  
b26b				endm  
# End of macro CALLMONITOR
b26b					endif 
b26b				FORTH_RSP_TOS 
b26b cd 43 9a			call macro_forth_rsp_tos 
b26e				endm 
# End of macro FORTH_RSP_TOS
b26e			 
b26e					if DEBUG_FORTH_WORDS 
b26e						DMARK "LP8" 
b26e f5				push af  
b26f 3a 83 b2			ld a, (.dmark)  
b272 32 65 ee			ld (debug_mark),a  
b275 3a 84 b2			ld a, (.dmark+1)  
b278 32 66 ee			ld (debug_mark+1),a  
b27b 3a 85 b2			ld a, (.dmark+2)  
b27e 32 67 ee			ld (debug_mark+2),a  
b281 18 03			jr .pastdmark  
b283 ..			.dmark: db "LP8"  
b286 f1			.pastdmark: pop af  
b287			endm  
# End of macro DMARK
b287					CALLMONITOR 
b287 cd 6f ee			call debug_vector  
b28a				endm  
# End of macro CALLMONITOR
b28a					endif 
b28a				;push hl 
b28a			 
b28a				; not going to DO any more 
b28a				; get rid of the RSP pointer as DO will add it back in 
b28a				;FORTH_RSP_POP 
b28a				;pop hl 
b28a			 
b28a				;ld hl,(cli_ret_sp) 
b28a				;ld e, (hl) 
b28a				;inc hl 
b28a				;ld d, (hl) 
b28a				;ex de,hl 
b28a 22 bc e5			ld (os_tok_ptr), hl 
b28d					if DEBUG_FORTH_WORDS 
b28d						DMARK "LP<" 
b28d f5				push af  
b28e 3a a2 b2			ld a, (.dmark)  
b291 32 65 ee			ld (debug_mark),a  
b294 3a a3 b2			ld a, (.dmark+1)  
b297 32 66 ee			ld (debug_mark+1),a  
b29a 3a a4 b2			ld a, (.dmark+2)  
b29d 32 67 ee			ld (debug_mark+2),a  
b2a0 18 03			jr .pastdmark  
b2a2 ..			.dmark: db "LP<"  
b2a5 f1			.pastdmark: pop af  
b2a6			endm  
# End of macro DMARK
b2a6					CALLMONITOR 
b2a6 cd 6f ee			call debug_vector  
b2a9				endm  
# End of macro CALLMONITOR
b2a9				endif 
b2a9 c3 ff 9e			jp exec1 
b2ac			 
b2ac					 
b2ac			 
b2ac			 
b2ac					NEXTW 
b2ac c3 76 9e			jp macro_next 
b2af				endm 
# End of macro NEXTW
b2af			.I:  
b2af			 
b2af				CWHEAD .DLOOP 74 "I" 1 WORD_FLAG_CODE 
b2af 5e				db WORD_SYS_CORE+74             
b2b0 da b2			dw .DLOOP            
b2b2 02				db 1 + 1 
b2b3 .. 00			db "I",0              
b2b5				endm 
# End of macro CWHEAD
b2b5			; | I ( -- ) Current loop counter | DONE 
b2b5					if DEBUG_FORTH_WORDS_KEY 
b2b5						DMARK "I.." 
b2b5 f5				push af  
b2b6 3a ca b2			ld a, (.dmark)  
b2b9 32 65 ee			ld (debug_mark),a  
b2bc 3a cb b2			ld a, (.dmark+1)  
b2bf 32 66 ee			ld (debug_mark+1),a  
b2c2 3a cc b2			ld a, (.dmark+2)  
b2c5 32 67 ee			ld (debug_mark+2),a  
b2c8 18 03			jr .pastdmark  
b2ca ..			.dmark: db "I.."  
b2cd f1			.pastdmark: pop af  
b2ce			endm  
# End of macro DMARK
b2ce						CALLMONITOR 
b2ce cd 6f ee			call debug_vector  
b2d1				endm  
# End of macro CALLMONITOR
b2d1					endif 
b2d1			 
b2d1 2a e0 e5				ld hl,(os_current_i) 
b2d4 cd 85 9a				call forth_push_numhl 
b2d7			 
b2d7					NEXTW 
b2d7 c3 76 9e			jp macro_next 
b2da				endm 
# End of macro NEXTW
b2da			.DLOOP: 
b2da				CWHEAD .REPEAT 75 "-LOOP" 5 WORD_FLAG_CODE 
b2da 5f				db WORD_SYS_CORE+75             
b2db bb b3			dw .REPEAT            
b2dd 06				db 5 + 1 
b2de .. 00			db "-LOOP",0              
b2e4				endm 
# End of macro CWHEAD
b2e4			; | -LOOP ( -- ) Decrement and test loop counter  | DONE 
b2e4				; pop tos as current loop count to hl 
b2e4					if DEBUG_FORTH_WORDS_KEY 
b2e4						DMARK "-LP" 
b2e4 f5				push af  
b2e5 3a f9 b2			ld a, (.dmark)  
b2e8 32 65 ee			ld (debug_mark),a  
b2eb 3a fa b2			ld a, (.dmark+1)  
b2ee 32 66 ee			ld (debug_mark+1),a  
b2f1 3a fb b2			ld a, (.dmark+2)  
b2f4 32 67 ee			ld (debug_mark+2),a  
b2f7 18 03			jr .pastdmark  
b2f9 ..			.dmark: db "-LP"  
b2fc f1			.pastdmark: pop af  
b2fd			endm  
# End of macro DMARK
b2fd						CALLMONITOR 
b2fd cd 6f ee			call debug_vector  
b300				endm  
# End of macro CALLMONITOR
b300					endif 
b300			 
b300				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
b300			 
b300				FORTH_LOOP_TOS 
b300 cd ee 9c			call macro_forth_loop_tos 
b303				endm 
# End of macro FORTH_LOOP_TOS
b303 e5				push hl 
b304			 
b304					if DEBUG_FORTH_WORDS 
b304						DMARK "-LP" 
b304 f5				push af  
b305 3a 19 b3			ld a, (.dmark)  
b308 32 65 ee			ld (debug_mark),a  
b30b 3a 1a b3			ld a, (.dmark+1)  
b30e 32 66 ee			ld (debug_mark+1),a  
b311 3a 1b b3			ld a, (.dmark+2)  
b314 32 67 ee			ld (debug_mark+2),a  
b317 18 03			jr .pastdmark  
b319 ..			.dmark: db "-LP"  
b31c f1			.pastdmark: pop af  
b31d			endm  
# End of macro DMARK
b31d						CALLMONITOR 
b31d cd 6f ee			call debug_vector  
b320				endm  
# End of macro CALLMONITOR
b320					endif 
b320				; next item on the stack is the limit. get it 
b320			 
b320			 
b320				FORTH_LOOP_POP 
b320 cd f8 9c			call macro_forth_loop_pop 
b323				endm 
# End of macro FORTH_LOOP_POP
b323			 
b323				FORTH_LOOP_TOS 
b323 cd ee 9c			call macro_forth_loop_tos 
b326				endm 
# End of macro FORTH_LOOP_TOS
b326			 
b326 d1				pop de		 ; de = i, hl = limit 
b327			 
b327					if DEBUG_FORTH_WORDS 
b327						DMARK "-L1" 
b327 f5				push af  
b328 3a 3c b3			ld a, (.dmark)  
b32b 32 65 ee			ld (debug_mark),a  
b32e 3a 3d b3			ld a, (.dmark+1)  
b331 32 66 ee			ld (debug_mark+1),a  
b334 3a 3e b3			ld a, (.dmark+2)  
b337 32 67 ee			ld (debug_mark+2),a  
b33a 18 03			jr .pastdmark  
b33c ..			.dmark: db "-L1"  
b33f f1			.pastdmark: pop af  
b340			endm  
# End of macro DMARK
b340						CALLMONITOR 
b340 cd 6f ee			call debug_vector  
b343				endm  
# End of macro CALLMONITOR
b343					endif 
b343			 
b343				; go back to previous word 
b343			 
b343 d5				push de    ; save I for inc later 
b344			 
b344			 
b344				; get limit 
b344				;  is I at limit? 
b344			 
b344			 
b344					if DEBUG_FORTH_WORDS 
b344						DMARK "-L1" 
b344 f5				push af  
b345 3a 59 b3			ld a, (.dmark)  
b348 32 65 ee			ld (debug_mark),a  
b34b 3a 5a b3			ld a, (.dmark+1)  
b34e 32 66 ee			ld (debug_mark+1),a  
b351 3a 5b b3			ld a, (.dmark+2)  
b354 32 67 ee			ld (debug_mark+2),a  
b357 18 03			jr .pastdmark  
b359 ..			.dmark: db "-L1"  
b35c f1			.pastdmark: pop af  
b35d			endm  
# End of macro DMARK
b35d						CALLMONITOR 
b35d cd 6f ee			call debug_vector  
b360				endm  
# End of macro CALLMONITOR
b360					endif 
b360			 
b360 ed 52			sbc hl, de 
b362			 
b362			 
b362				;  if at limit pop both limit and current off stack do NEXT and get rid of saved DO 
b362			 
b362 20 26				jr nz, .mloopnotdone 
b364			 
b364 e1				pop hl   ; get rid of saved I 
b365				FORTH_LOOP_POP     ; get rid of limit 
b365 cd f8 9c			call macro_forth_loop_pop 
b368				endm 
# End of macro FORTH_LOOP_POP
b368			 
b368				FORTH_RSP_POP     ; get rid of DO ptr 
b368 cd 4d 9a			call macro_forth_rsp_pop 
b36b				endm 
# End of macro FORTH_RSP_POP
b36b			 
b36b			if DEBUG_FORTH_WORDS 
b36b						DMARK "-L>" 
b36b f5				push af  
b36c 3a 80 b3			ld a, (.dmark)  
b36f 32 65 ee			ld (debug_mark),a  
b372 3a 81 b3			ld a, (.dmark+1)  
b375 32 66 ee			ld (debug_mark+1),a  
b378 3a 82 b3			ld a, (.dmark+2)  
b37b 32 67 ee			ld (debug_mark+2),a  
b37e 18 03			jr .pastdmark  
b380 ..			.dmark: db "-L>"  
b383 f1			.pastdmark: pop af  
b384			endm  
# End of macro DMARK
b384				CALLMONITOR 
b384 cd 6f ee			call debug_vector  
b387				endm  
# End of macro CALLMONITOR
b387			endif 
b387			 
b387					NEXTW 
b387 c3 76 9e			jp macro_next 
b38a				endm 
# End of macro NEXTW
b38a				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
b38a			 
b38a			.mloopnotdone: 
b38a			 
b38a e1				pop hl    ; get I 
b38b 2b				dec hl 
b38c			 
b38c			   	; save new I 
b38c			 
b38c			 
b38c					; set I counter 
b38c			 
b38c 22 e0 e5				ld (os_current_i), hl 
b38f			 
b38f					 
b38f				FORTH_LOOP_NEXT 
b38f cd bb 9c			call macro_forth_loop_next 
b392				endm 
# End of macro FORTH_LOOP_NEXT
b392			 
b392			 
b392					if DEBUG_FORTH_WORDS 
b392 eb						ex de,hl 
b393					endif 
b393			 
b393			;	; get DO ptr 
b393			; 
b393				FORTH_RSP_TOS 
b393 cd 43 9a			call macro_forth_rsp_tos 
b396				endm 
# End of macro FORTH_RSP_TOS
b396			 
b396				;push hl 
b396			 
b396				; not going to DO any more 
b396				; get rid of the RSP pointer as DO will add it back in 
b396				;FORTH_RSP_POP 
b396				;pop hl 
b396			 
b396			 
b396 22 bc e5			ld (os_tok_ptr), hl 
b399					if DEBUG_FORTH_WORDS 
b399						DMARK "-L<" 
b399 f5				push af  
b39a 3a ae b3			ld a, (.dmark)  
b39d 32 65 ee			ld (debug_mark),a  
b3a0 3a af b3			ld a, (.dmark+1)  
b3a3 32 66 ee			ld (debug_mark+1),a  
b3a6 3a b0 b3			ld a, (.dmark+2)  
b3a9 32 67 ee			ld (debug_mark+2),a  
b3ac 18 03			jr .pastdmark  
b3ae ..			.dmark: db "-L<"  
b3b1 f1			.pastdmark: pop af  
b3b2			endm  
# End of macro DMARK
b3b2					CALLMONITOR 
b3b2 cd 6f ee			call debug_vector  
b3b5				endm  
# End of macro CALLMONITOR
b3b5				endif 
b3b5 c3 ff 9e			jp exec1 
b3b8			 
b3b8					 
b3b8			 
b3b8			 
b3b8			 
b3b8				NEXTW 
b3b8 c3 76 9e			jp macro_next 
b3bb				endm 
# End of macro NEXTW
b3bb			 
b3bb			 
b3bb			 
b3bb			 
b3bb			.REPEAT: 
b3bb				CWHEAD .UNTIL 93 "REPEAT" 5 WORD_FLAG_CODE 
b3bb 71				db WORD_SYS_CORE+93             
b3bc 0e b4			dw .UNTIL            
b3be 06				db 5 + 1 
b3bf .. 00			db "REPEAT",0              
b3c6				endm 
# End of macro CWHEAD
b3c6			; | REPEAT ( --  ) Start REPEAT...UNTIL loop  | DONE 
b3c6			;  push pc to rsp stack past the REPEAT 
b3c6					if DEBUG_FORTH_WORDS_KEY 
b3c6						DMARK "REP" 
b3c6 f5				push af  
b3c7 3a db b3			ld a, (.dmark)  
b3ca 32 65 ee			ld (debug_mark),a  
b3cd 3a dc b3			ld a, (.dmark+1)  
b3d0 32 66 ee			ld (debug_mark+1),a  
b3d3 3a dd b3			ld a, (.dmark+2)  
b3d6 32 67 ee			ld (debug_mark+2),a  
b3d9 18 03			jr .pastdmark  
b3db ..			.dmark: db "REP"  
b3de f1			.pastdmark: pop af  
b3df			endm  
# End of macro DMARK
b3df						CALLMONITOR 
b3df cd 6f ee			call debug_vector  
b3e2				endm  
# End of macro CALLMONITOR
b3e2					endif 
b3e2			 
b3e2 2a bc e5				ld hl, (os_tok_ptr) 
b3e5 23					inc hl   ; R 
b3e6 23					inc hl  ; E 
b3e7 23					inc hl   ; P 
b3e8 23					inc hl   ; E 
b3e9 23					inc hl   ; A 
b3ea 23					inc hl   ; T 
b3eb 23					inc hl   ; zero 
b3ec					FORTH_RSP_NEXT 
b3ec cd 2c 9a			call macro_forth_rsp_next 
b3ef				endm 
# End of macro FORTH_RSP_NEXT
b3ef			 
b3ef			 
b3ef					if DEBUG_FORTH_WORDS 
b3ef						DMARK "REP" 
b3ef f5				push af  
b3f0 3a 04 b4			ld a, (.dmark)  
b3f3 32 65 ee			ld (debug_mark),a  
b3f6 3a 05 b4			ld a, (.dmark+1)  
b3f9 32 66 ee			ld (debug_mark+1),a  
b3fc 3a 06 b4			ld a, (.dmark+2)  
b3ff 32 67 ee			ld (debug_mark+2),a  
b402 18 03			jr .pastdmark  
b404 ..			.dmark: db "REP"  
b407 f1			.pastdmark: pop af  
b408			endm  
# End of macro DMARK
b408						;pop bc    ; TODO BUG ?????? what is this for???? 
b408						CALLMONITOR 
b408 cd 6f ee			call debug_vector  
b40b				endm  
# End of macro CALLMONITOR
b40b					endif 
b40b			 
b40b					NEXTW 
b40b c3 76 9e			jp macro_next 
b40e				endm 
# End of macro NEXTW
b40e			;	       NEXTW 
b40e			 
b40e			.UNTIL: 
b40e				CWHEAD .ENDFLOW 94 "UNTIL" 5 WORD_FLAG_CODE 
b40e 72				db WORD_SYS_CORE+94             
b40f a5 b4			dw .ENDFLOW            
b411 06				db 5 + 1 
b412 .. 00			db "UNTIL",0              
b418				endm 
# End of macro CWHEAD
b418			; | UNTIL ( u -- ) Exit REPEAT...UNTIL loop if TOS is false  | DONE 
b418			 
b418				; pop tos as check 
b418			 
b418				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
b418			 
b418				FORTH_DSP_VALUEHL 
b418 cd 8a 9c			call macro_dsp_valuehl 
b41b				endm 
# End of macro FORTH_DSP_VALUEHL
b41b			 
b41b					if DEBUG_FORTH_WORDS_KEY 
b41b						DMARK "UNT" 
b41b f5				push af  
b41c 3a 30 b4			ld a, (.dmark)  
b41f 32 65 ee			ld (debug_mark),a  
b422 3a 31 b4			ld a, (.dmark+1)  
b425 32 66 ee			ld (debug_mark+1),a  
b428 3a 32 b4			ld a, (.dmark+2)  
b42b 32 67 ee			ld (debug_mark+2),a  
b42e 18 03			jr .pastdmark  
b430 ..			.dmark: db "UNT"  
b433 f1			.pastdmark: pop af  
b434			endm  
# End of macro DMARK
b434						CALLMONITOR 
b434 cd 6f ee			call debug_vector  
b437				endm  
# End of macro CALLMONITOR
b437					endif 
b437			 
b437			;	push hl 
b437				FORTH_DSP_POP 
b437 cd 42 9d			call macro_forth_dsp_pop 
b43a				endm 
# End of macro FORTH_DSP_POP
b43a			 
b43a			;	pop hl 
b43a			 
b43a				; test if true 
b43a			 
b43a cd 13 8d			call ishlzero 
b43d			;	ld a,l 
b43d			;	add h 
b43d			; 
b43d			;	cp 0 
b43d			 
b43d 20 3e			jr nz, .untilnotdone 
b43f			 
b43f					if DEBUG_FORTH_WORDS 
b43f						DMARK "UNf" 
b43f f5				push af  
b440 3a 54 b4			ld a, (.dmark)  
b443 32 65 ee			ld (debug_mark),a  
b446 3a 55 b4			ld a, (.dmark+1)  
b449 32 66 ee			ld (debug_mark+1),a  
b44c 3a 56 b4			ld a, (.dmark+2)  
b44f 32 67 ee			ld (debug_mark+2),a  
b452 18 03			jr .pastdmark  
b454 ..			.dmark: db "UNf"  
b457 f1			.pastdmark: pop af  
b458			endm  
# End of macro DMARK
b458						CALLMONITOR 
b458 cd 6f ee			call debug_vector  
b45b				endm  
# End of macro CALLMONITOR
b45b					endif 
b45b			 
b45b			 
b45b			 
b45b				FORTH_RSP_POP     ; get rid of DO ptr 
b45b cd 4d 9a			call macro_forth_rsp_pop 
b45e				endm 
# End of macro FORTH_RSP_POP
b45e			 
b45e			if DEBUG_FORTH_WORDS 
b45e						DMARK "UN>" 
b45e f5				push af  
b45f 3a 73 b4			ld a, (.dmark)  
b462 32 65 ee			ld (debug_mark),a  
b465 3a 74 b4			ld a, (.dmark+1)  
b468 32 66 ee			ld (debug_mark+1),a  
b46b 3a 75 b4			ld a, (.dmark+2)  
b46e 32 67 ee			ld (debug_mark+2),a  
b471 18 03			jr .pastdmark  
b473 ..			.dmark: db "UN>"  
b476 f1			.pastdmark: pop af  
b477			endm  
# End of macro DMARK
b477				CALLMONITOR 
b477 cd 6f ee			call debug_vector  
b47a				endm  
# End of macro CALLMONITOR
b47a			endif 
b47a			 
b47a					NEXTW 
b47a c3 76 9e			jp macro_next 
b47d				endm 
# End of macro NEXTW
b47d				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
b47d			 
b47d			.untilnotdone: 
b47d			 
b47d			 
b47d			;	; get DO ptr 
b47d			; 
b47d				FORTH_RSP_TOS 
b47d cd 43 9a			call macro_forth_rsp_tos 
b480				endm 
# End of macro FORTH_RSP_TOS
b480			 
b480				;push hl 
b480			 
b480				; not going to DO any more 
b480				; get rid of the RSP pointer as DO will add it back in 
b480				;FORTH_RSP_POP 
b480				;pop hl 
b480			 
b480			 
b480 22 bc e5			ld (os_tok_ptr), hl 
b483					if DEBUG_FORTH_WORDS 
b483						DMARK "UN<" 
b483 f5				push af  
b484 3a 98 b4			ld a, (.dmark)  
b487 32 65 ee			ld (debug_mark),a  
b48a 3a 99 b4			ld a, (.dmark+1)  
b48d 32 66 ee			ld (debug_mark+1),a  
b490 3a 9a b4			ld a, (.dmark+2)  
b493 32 67 ee			ld (debug_mark+2),a  
b496 18 03			jr .pastdmark  
b498 ..			.dmark: db "UN<"  
b49b f1			.pastdmark: pop af  
b49c			endm  
# End of macro DMARK
b49c					CALLMONITOR 
b49c cd 6f ee			call debug_vector  
b49f				endm  
# End of macro CALLMONITOR
b49f				endif 
b49f c3 ff 9e			jp exec1 
b4a2			 
b4a2					 
b4a2			 
b4a2			 
b4a2					NEXTW 
b4a2 c3 76 9e			jp macro_next 
b4a5				endm 
# End of macro NEXTW
b4a5			 
b4a5			 
b4a5			.ENDFLOW: 
b4a5			 
b4a5			; eof 
b4a5			 
# End of file forth_words_flow.asm
b4a5			; TODO something wrong with the first word of the next word group. no matter which group applies. On device, sc114 is fine. bad memory? 
b4a5			include "forth_words_logic.asm" 
b4a5			 
b4a5			; | ## Logic Words 
b4a5			 
b4a5			.NOT: 
b4a5				CWHEAD .IS 25 "NOT" 3 WORD_FLAG_CODE 
b4a5 2d				db WORD_SYS_CORE+25             
b4a6 ed b4			dw .IS            
b4a8 04				db 3 + 1 
b4a9 .. 00			db "NOT",0              
b4ad				endm 
# End of macro CWHEAD
b4ad			; | NOT ( u  -- u ) Inverse true/false on stack | DONE 
b4ad					if DEBUG_FORTH_WORDS_KEY 
b4ad						DMARK "NOT" 
b4ad f5				push af  
b4ae 3a c2 b4			ld a, (.dmark)  
b4b1 32 65 ee			ld (debug_mark),a  
b4b4 3a c3 b4			ld a, (.dmark+1)  
b4b7 32 66 ee			ld (debug_mark+1),a  
b4ba 3a c4 b4			ld a, (.dmark+2)  
b4bd 32 67 ee			ld (debug_mark+2),a  
b4c0 18 03			jr .pastdmark  
b4c2 ..			.dmark: db "NOT"  
b4c5 f1			.pastdmark: pop af  
b4c6			endm  
# End of macro DMARK
b4c6						CALLMONITOR 
b4c6 cd 6f ee			call debug_vector  
b4c9				endm  
# End of macro CALLMONITOR
b4c9					endif 
b4c9					FORTH_DSP 
b4c9 cd 50 9c			call macro_forth_dsp 
b4cc				endm 
# End of macro FORTH_DSP
b4cc 7e					ld a,(hl)	; get type of value on TOS 
b4cd fe 02				cp DS_TYPE_INUM  
b4cf 28 03				jr z, .noti 
b4d1					NEXTW 
b4d1 c3 76 9e			jp macro_next 
b4d4				endm 
# End of macro NEXTW
b4d4			.noti:          FORTH_DSP_VALUEHL 
b4d4 cd 8a 9c			call macro_dsp_valuehl 
b4d7				endm 
# End of macro FORTH_DSP_VALUEHL
b4d7			;		push hl 
b4d7					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b4d7 cd 42 9d			call macro_forth_dsp_pop 
b4da				endm 
# End of macro FORTH_DSP_POP
b4da			;		pop hl 
b4da 3e 00				ld a,0 
b4dc bd					cp l 
b4dd 28 04				jr z, .not2t 
b4df 2e 00				ld l, 0 
b4e1 18 02				jr .notip 
b4e3			 
b4e3 2e ff		.not2t:		ld l, 255 
b4e5			 
b4e5 26 00		.notip:		ld h, 0	 
b4e7			 
b4e7 cd 85 9a				call forth_push_numhl 
b4ea					NEXTW 
b4ea c3 76 9e			jp macro_next 
b4ed				endm 
# End of macro NEXTW
b4ed			 
b4ed			.IS: 
b4ed				CWHEAD .LZERO 25 "IS" 2 WORD_FLAG_CODE 
b4ed 2d				db WORD_SYS_CORE+25             
b4ee 13 b5			dw .LZERO            
b4f0 03				db 2 + 1 
b4f1 .. 00			db "IS",0              
b4f4				endm 
# End of macro CWHEAD
b4f4			; | IS ( s1 s2  -- f ) Push true if string s1 is the same as s2 | TODO 
b4f4					if DEBUG_FORTH_WORDS_KEY 
b4f4						DMARK "IS." 
b4f4 f5				push af  
b4f5 3a 09 b5			ld a, (.dmark)  
b4f8 32 65 ee			ld (debug_mark),a  
b4fb 3a 0a b5			ld a, (.dmark+1)  
b4fe 32 66 ee			ld (debug_mark+1),a  
b501 3a 0b b5			ld a, (.dmark+2)  
b504 32 67 ee			ld (debug_mark+2),a  
b507 18 03			jr .pastdmark  
b509 ..			.dmark: db "IS."  
b50c f1			.pastdmark: pop af  
b50d			endm  
# End of macro DMARK
b50d						CALLMONITOR 
b50d cd 6f ee			call debug_vector  
b510				endm  
# End of macro CALLMONITOR
b510					endif 
b510					NEXTW 
b510 c3 76 9e			jp macro_next 
b513				endm 
# End of macro NEXTW
b513			.LZERO: 
b513				CWHEAD .TZERO 25 "0<" 2 WORD_FLAG_CODE 
b513 2d				db WORD_SYS_CORE+25             
b514 1d b5			dw .TZERO            
b516 03				db 2 + 1 
b517 .. 00			db "0<",0              
b51a				endm 
# End of macro CWHEAD
b51a			; | 0< ( u -- f ) Push true if u is less than o | CANT DO UNTIL FLOAT 
b51a					NEXTW 
b51a c3 76 9e			jp macro_next 
b51d				endm 
# End of macro NEXTW
b51d			.TZERO: 
b51d				CWHEAD .LESS 26 "0=" 2 WORD_FLAG_CODE 
b51d 2e				db WORD_SYS_CORE+26             
b51e 64 b5			dw .LESS            
b520 03				db 2 + 1 
b521 .. 00			db "0=",0              
b524				endm 
# End of macro CWHEAD
b524			; | 0= ( u -- f ) Push true if u equals 0 | DONE 
b524				; TODO add floating point number detection 
b524					;v5 FORTH_DSP_VALUE 
b524					if DEBUG_FORTH_WORDS_KEY 
b524						DMARK "0=." 
b524 f5				push af  
b525 3a 39 b5			ld a, (.dmark)  
b528 32 65 ee			ld (debug_mark),a  
b52b 3a 3a b5			ld a, (.dmark+1)  
b52e 32 66 ee			ld (debug_mark+1),a  
b531 3a 3b b5			ld a, (.dmark+2)  
b534 32 67 ee			ld (debug_mark+2),a  
b537 18 03			jr .pastdmark  
b539 ..			.dmark: db "0=."  
b53c f1			.pastdmark: pop af  
b53d			endm  
# End of macro DMARK
b53d						CALLMONITOR 
b53d cd 6f ee			call debug_vector  
b540				endm  
# End of macro CALLMONITOR
b540					endif 
b540					FORTH_DSP 
b540 cd 50 9c			call macro_forth_dsp 
b543				endm 
# End of macro FORTH_DSP
b543 7e					ld a,(hl)	; get type of value on TOS 
b544 fe 02				cp DS_TYPE_INUM  
b546 28 00				jr z, .tz_inum 
b548			 
b548				if FORTH_ENABLE_FLOATMATH 
b548					jr .tz_done 
b548			 
b548				endif 
b548					 
b548			 
b548			.tz_inum: 
b548					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b548 cd 8a 9c			call macro_dsp_valuehl 
b54b				endm 
# End of macro FORTH_DSP_VALUEHL
b54b			 
b54b			;		push hl 
b54b			 
b54b					; destroy value TOS 
b54b			 
b54b					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b54b cd 42 9d			call macro_forth_dsp_pop 
b54e				endm 
# End of macro FORTH_DSP_POP
b54e			 
b54e			;		pop hl 
b54e			 
b54e 3e 00				ld a,0 
b550			 
b550 bd					cp l 
b551 20 08				jr nz, .tz_notzero 
b553			 
b553 bc					cp h 
b554			 
b554 20 05				jr nz, .tz_notzero 
b556			 
b556			 
b556 21 01 00				ld hl, FORTH_TRUE 
b559 18 03				jr .tz_done 
b55b			 
b55b 21 00 00		.tz_notzero:	ld hl, FORTH_FALSE 
b55e			 
b55e					; push value back onto stack for another op etc 
b55e			 
b55e			.tz_done: 
b55e cd 85 9a				call forth_push_numhl 
b561			 
b561					NEXTW 
b561 c3 76 9e			jp macro_next 
b564				endm 
# End of macro NEXTW
b564			.LESS: 
b564				CWHEAD .GT 27 "<" 1 WORD_FLAG_CODE 
b564 2f				db WORD_SYS_CORE+27             
b565 cd b5			dw .GT            
b567 02				db 1 + 1 
b568 .. 00			db "<",0              
b56a				endm 
# End of macro CWHEAD
b56a			; | < ( u1 u2 -- f ) True if u1 is less than u2 | DONE 
b56a				; TODO add floating point number detection 
b56a					if DEBUG_FORTH_WORDS_KEY 
b56a						DMARK "LES" 
b56a f5				push af  
b56b 3a 7f b5			ld a, (.dmark)  
b56e 32 65 ee			ld (debug_mark),a  
b571 3a 80 b5			ld a, (.dmark+1)  
b574 32 66 ee			ld (debug_mark+1),a  
b577 3a 81 b5			ld a, (.dmark+2)  
b57a 32 67 ee			ld (debug_mark+2),a  
b57d 18 03			jr .pastdmark  
b57f ..			.dmark: db "LES"  
b582 f1			.pastdmark: pop af  
b583			endm  
# End of macro DMARK
b583						CALLMONITOR 
b583 cd 6f ee			call debug_vector  
b586				endm  
# End of macro CALLMONITOR
b586					endif 
b586					FORTH_DSP 
b586 cd 50 9c			call macro_forth_dsp 
b589				endm 
# End of macro FORTH_DSP
b589					;v5 FORTH_DSP_VALUE 
b589 7e					ld a,(hl)	; get type of value on TOS 
b58a fe 02				cp DS_TYPE_INUM  
b58c 28 00				jr z, .less_inum 
b58e			 
b58e				if FORTH_ENABLE_FLOATMATH 
b58e					jr .less_done 
b58e			 
b58e				endif 
b58e					 
b58e			 
b58e			.less_inum: 
b58e					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b58e cd 8a 9c			call macro_dsp_valuehl 
b591				endm 
# End of macro FORTH_DSP_VALUEHL
b591			 
b591 e5					push hl  ; u2 
b592			 
b592					; destroy value TOS 
b592			 
b592					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b592 cd 42 9d			call macro_forth_dsp_pop 
b595				endm 
# End of macro FORTH_DSP_POP
b595			 
b595			 
b595					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b595 cd 8a 9c			call macro_dsp_valuehl 
b598				endm 
# End of macro FORTH_DSP_VALUEHL
b598			 
b598 e5					push hl    ; u1 
b599			 
b599					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b599 cd 42 9d			call macro_forth_dsp_pop 
b59c				endm 
# End of macro FORTH_DSP_POP
b59c			 
b59c			 
b59c b7			 or a      ;clear carry flag 
b59d 01 00 00		 ld bc, FORTH_FALSE 
b5a0 e1			  pop hl    ; u1 
b5a1 d1			  pop de    ; u2 
b5a2 ed 52		  sbc hl,de 
b5a4 30 03		  jr nc,.lscont   	;	if hl >= de, carry flag will be cleared 
b5a6			 
b5a6 01 01 00		 ld bc, FORTH_TRUE 
b5a9			.lscont:  
b5a9 c5					push bc 
b5aa e1					pop hl 
b5ab			 
b5ab					if DEBUG_FORTH_WORDS 
b5ab						DMARK "LT1" 
b5ab f5				push af  
b5ac 3a c0 b5			ld a, (.dmark)  
b5af 32 65 ee			ld (debug_mark),a  
b5b2 3a c1 b5			ld a, (.dmark+1)  
b5b5 32 66 ee			ld (debug_mark+1),a  
b5b8 3a c2 b5			ld a, (.dmark+2)  
b5bb 32 67 ee			ld (debug_mark+2),a  
b5be 18 03			jr .pastdmark  
b5c0 ..			.dmark: db "LT1"  
b5c3 f1			.pastdmark: pop af  
b5c4			endm  
# End of macro DMARK
b5c4						CALLMONITOR 
b5c4 cd 6f ee			call debug_vector  
b5c7				endm  
# End of macro CALLMONITOR
b5c7					endif 
b5c7 cd 85 9a				call forth_push_numhl 
b5ca			 
b5ca					NEXTW 
b5ca c3 76 9e			jp macro_next 
b5cd				endm 
# End of macro NEXTW
b5cd			.GT: 
b5cd				CWHEAD .EQUAL 28 ">" 1 WORD_FLAG_CODE 
b5cd 30				db WORD_SYS_CORE+28             
b5ce 36 b6			dw .EQUAL            
b5d0 02				db 1 + 1 
b5d1 .. 00			db ">",0              
b5d3				endm 
# End of macro CWHEAD
b5d3			; | > ( u1 u2 -- f ) True if u1 is greater than u2 | DONE 
b5d3				; TODO add floating point number detection 
b5d3					if DEBUG_FORTH_WORDS_KEY 
b5d3						DMARK "GRT" 
b5d3 f5				push af  
b5d4 3a e8 b5			ld a, (.dmark)  
b5d7 32 65 ee			ld (debug_mark),a  
b5da 3a e9 b5			ld a, (.dmark+1)  
b5dd 32 66 ee			ld (debug_mark+1),a  
b5e0 3a ea b5			ld a, (.dmark+2)  
b5e3 32 67 ee			ld (debug_mark+2),a  
b5e6 18 03			jr .pastdmark  
b5e8 ..			.dmark: db "GRT"  
b5eb f1			.pastdmark: pop af  
b5ec			endm  
# End of macro DMARK
b5ec						CALLMONITOR 
b5ec cd 6f ee			call debug_vector  
b5ef				endm  
# End of macro CALLMONITOR
b5ef					endif 
b5ef					FORTH_DSP 
b5ef cd 50 9c			call macro_forth_dsp 
b5f2				endm 
# End of macro FORTH_DSP
b5f2					;FORTH_DSP_VALUE 
b5f2 7e					ld a,(hl)	; get type of value on TOS 
b5f3 fe 02				cp DS_TYPE_INUM  
b5f5 28 00				jr z, .gt_inum 
b5f7			 
b5f7				if FORTH_ENABLE_FLOATMATH 
b5f7					jr .gt_done 
b5f7			 
b5f7				endif 
b5f7					 
b5f7			 
b5f7			.gt_inum: 
b5f7					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b5f7 cd 8a 9c			call macro_dsp_valuehl 
b5fa				endm 
# End of macro FORTH_DSP_VALUEHL
b5fa			 
b5fa e5					push hl  ; u2 
b5fb			 
b5fb					; destroy value TOS 
b5fb			 
b5fb					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b5fb cd 42 9d			call macro_forth_dsp_pop 
b5fe				endm 
# End of macro FORTH_DSP_POP
b5fe			 
b5fe			 
b5fe					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b5fe cd 8a 9c			call macro_dsp_valuehl 
b601				endm 
# End of macro FORTH_DSP_VALUEHL
b601			 
b601 e5					push hl    ; u1 
b602			 
b602					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b602 cd 42 9d			call macro_forth_dsp_pop 
b605				endm 
# End of macro FORTH_DSP_POP
b605			 
b605			 
b605 b7			 or a      ;clear carry flag 
b606 01 00 00		 ld bc, FORTH_FALSE 
b609 e1			  pop hl    ; u1 
b60a d1			  pop de    ; u2 
b60b ed 52		  sbc hl,de 
b60d 38 03		  jr c,.gtcont   	;	if hl >= de, carry flag will be cleared 
b60f			 
b60f 01 01 00		 ld bc, FORTH_TRUE 
b612			.gtcont:  
b612 c5					push bc 
b613 e1					pop hl 
b614			 
b614					if DEBUG_FORTH_WORDS 
b614						DMARK "GT1" 
b614 f5				push af  
b615 3a 29 b6			ld a, (.dmark)  
b618 32 65 ee			ld (debug_mark),a  
b61b 3a 2a b6			ld a, (.dmark+1)  
b61e 32 66 ee			ld (debug_mark+1),a  
b621 3a 2b b6			ld a, (.dmark+2)  
b624 32 67 ee			ld (debug_mark+2),a  
b627 18 03			jr .pastdmark  
b629 ..			.dmark: db "GT1"  
b62c f1			.pastdmark: pop af  
b62d			endm  
# End of macro DMARK
b62d						CALLMONITOR 
b62d cd 6f ee			call debug_vector  
b630				endm  
# End of macro CALLMONITOR
b630					endif 
b630 cd 85 9a				call forth_push_numhl 
b633			 
b633					NEXTW 
b633 c3 76 9e			jp macro_next 
b636				endm 
# End of macro NEXTW
b636			.EQUAL: 
b636				CWHEAD .ENDLOGIC 29 "=" 1 WORD_FLAG_CODE 
b636 31				db WORD_SYS_CORE+29             
b637 a1 b6			dw .ENDLOGIC            
b639 02				db 1 + 1 
b63a .. 00			db "=",0              
b63c				endm 
# End of macro CWHEAD
b63c			; | = ( u1 u2 -- f ) True if u1 equals u2 | DONE 
b63c				; TODO add floating point number detection 
b63c					if DEBUG_FORTH_WORDS_KEY 
b63c						DMARK "EQ." 
b63c f5				push af  
b63d 3a 51 b6			ld a, (.dmark)  
b640 32 65 ee			ld (debug_mark),a  
b643 3a 52 b6			ld a, (.dmark+1)  
b646 32 66 ee			ld (debug_mark+1),a  
b649 3a 53 b6			ld a, (.dmark+2)  
b64c 32 67 ee			ld (debug_mark+2),a  
b64f 18 03			jr .pastdmark  
b651 ..			.dmark: db "EQ."  
b654 f1			.pastdmark: pop af  
b655			endm  
# End of macro DMARK
b655						CALLMONITOR 
b655 cd 6f ee			call debug_vector  
b658				endm  
# End of macro CALLMONITOR
b658					endif 
b658					FORTH_DSP 
b658 cd 50 9c			call macro_forth_dsp 
b65b				endm 
# End of macro FORTH_DSP
b65b					;v5 FORTH_DSP_VALUE 
b65b 7e					ld a,(hl)	; get type of value on TOS 
b65c fe 02				cp DS_TYPE_INUM  
b65e 28 00				jr z, .eq_inum 
b660			 
b660				if FORTH_ENABLE_FLOATMATH 
b660					jr .eq_done 
b660			 
b660				endif 
b660					 
b660			 
b660			.eq_inum: 
b660					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b660 cd 8a 9c			call macro_dsp_valuehl 
b663				endm 
# End of macro FORTH_DSP_VALUEHL
b663			 
b663 e5					push hl 
b664			 
b664					; destroy value TOS 
b664			 
b664					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b664 cd 42 9d			call macro_forth_dsp_pop 
b667				endm 
# End of macro FORTH_DSP_POP
b667			 
b667			 
b667					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b667 cd 8a 9c			call macro_dsp_valuehl 
b66a				endm 
# End of macro FORTH_DSP_VALUEHL
b66a			 
b66a					; one value on hl get other one back 
b66a			 
b66a e5					push hl 
b66b			 
b66b					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b66b cd 42 9d			call macro_forth_dsp_pop 
b66e				endm 
# End of macro FORTH_DSP_POP
b66e			 
b66e 0e 00				ld c, FORTH_FALSE 
b670			 
b670 e1					pop hl 
b671 d1					pop de 
b672			 
b672 7b					ld a, e 
b673 bd					cp l 
b674			 
b674 20 06				jr nz, .eq_done 
b676			 
b676 7a					ld a, d 
b677 bc					cp h 
b678			 
b678 20 02				jr nz, .eq_done 
b67a			 
b67a 0e 01				ld c, FORTH_TRUE 
b67c					 
b67c			 
b67c			 
b67c			.eq_done: 
b67c			 
b67c					; TODO push value back onto stack for another op etc 
b67c			 
b67c 26 00				ld h, 0 
b67e 69					ld l, c 
b67f					if DEBUG_FORTH_WORDS 
b67f						DMARK "EQ1" 
b67f f5				push af  
b680 3a 94 b6			ld a, (.dmark)  
b683 32 65 ee			ld (debug_mark),a  
b686 3a 95 b6			ld a, (.dmark+1)  
b689 32 66 ee			ld (debug_mark+1),a  
b68c 3a 96 b6			ld a, (.dmark+2)  
b68f 32 67 ee			ld (debug_mark+2),a  
b692 18 03			jr .pastdmark  
b694 ..			.dmark: db "EQ1"  
b697 f1			.pastdmark: pop af  
b698			endm  
# End of macro DMARK
b698						CALLMONITOR 
b698 cd 6f ee			call debug_vector  
b69b				endm  
# End of macro CALLMONITOR
b69b					endif 
b69b cd 85 9a				call forth_push_numhl 
b69e			 
b69e					NEXTW 
b69e c3 76 9e			jp macro_next 
b6a1				endm 
# End of macro NEXTW
b6a1			 
b6a1			 
b6a1			.ENDLOGIC: 
b6a1			; eof 
b6a1			 
b6a1			 
# End of file forth_words_logic.asm
b6a1			include "forth_words_maths.asm" 
b6a1			 
b6a1			; | ## Maths Words 
b6a1			 
b6a1			.PLUS:	 
b6a1				CWHEAD .NEG 1 "+" 1 WORD_FLAG_CODE 
b6a1 15				db WORD_SYS_CORE+1             
b6a2 ff b6			dw .NEG            
b6a4 02				db 1 + 1 
b6a5 .. 00			db "+",0              
b6a7				endm 
# End of macro CWHEAD
b6a7			; | + ( u u -- u )    Add two numbers and push result   | INT DONE 
b6a7					if DEBUG_FORTH_WORDS_KEY 
b6a7						DMARK "PLU" 
b6a7 f5				push af  
b6a8 3a bc b6			ld a, (.dmark)  
b6ab 32 65 ee			ld (debug_mark),a  
b6ae 3a bd b6			ld a, (.dmark+1)  
b6b1 32 66 ee			ld (debug_mark+1),a  
b6b4 3a be b6			ld a, (.dmark+2)  
b6b7 32 67 ee			ld (debug_mark+2),a  
b6ba 18 03			jr .pastdmark  
b6bc ..			.dmark: db "PLU"  
b6bf f1			.pastdmark: pop af  
b6c0			endm  
# End of macro DMARK
b6c0						CALLMONITOR 
b6c0 cd 6f ee			call debug_vector  
b6c3				endm  
# End of macro CALLMONITOR
b6c3					endif 
b6c3					; add top two values and push back result 
b6c3			 
b6c3					;for v5 FORTH_DSP_VALUE 
b6c3					FORTH_DSP 
b6c3 cd 50 9c			call macro_forth_dsp 
b6c6				endm 
# End of macro FORTH_DSP
b6c6 7e					ld a,(hl)	; get type of value on TOS 
b6c7 fe 02				cp DS_TYPE_INUM  
b6c9 28 03				jr z, .dot_inum 
b6cb			 
b6cb					NEXTW 
b6cb c3 76 9e			jp macro_next 
b6ce				endm 
# End of macro NEXTW
b6ce			 
b6ce			; float maths 
b6ce			 
b6ce				if FORTH_ENABLE_FLOATMATH 
b6ce						inc hl      ; now at start of numeric as string 
b6ce			 
b6ce					if DEBUG_FORTH_MATHS 
b6ce						DMARK "ADD" 
b6ce				CALLMONITOR 
b6ce					endif 
b6ce			 
b6ce					;ld ix, hl 
b6ce					call CON 
b6ce			 
b6ce			 
b6ce					push hl 
b6ce					 
b6ce					 
b6ce			 
b6ce						FORTH_DSP_POP      ; TODO add stock underflow checks and throws  
b6ce			 
b6ce					; get next number 
b6ce			 
b6ce						FORTH_DSP_VALUE 
b6ce			 
b6ce						inc hl      ; now at start of numeric as string 
b6ce			 
b6ce					;ld ix, hl 
b6ce					call CON 
b6ce			 
b6ce					push hl 
b6ce			 
b6ce			 
b6ce						FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b6ce			 
b6ce						; TODO do add 
b6ce			 
b6ce						call IADD 
b6ce			 
b6ce						; TODO get result back as ascii 
b6ce			 
b6ce						; TODO push result  
b6ce			 
b6ce			 
b6ce			 
b6ce						jr .dot_done 
b6ce				endif 
b6ce			 
b6ce			.dot_inum: 
b6ce			 
b6ce			 
b6ce					if DEBUG_FORTH_DOT 
b6ce						DMARK "+IT" 
b6ce f5				push af  
b6cf 3a e3 b6			ld a, (.dmark)  
b6d2 32 65 ee			ld (debug_mark),a  
b6d5 3a e4 b6			ld a, (.dmark+1)  
b6d8 32 66 ee			ld (debug_mark+1),a  
b6db 3a e5 b6			ld a, (.dmark+2)  
b6de 32 67 ee			ld (debug_mark+2),a  
b6e1 18 03			jr .pastdmark  
b6e3 ..			.dmark: db "+IT"  
b6e6 f1			.pastdmark: pop af  
b6e7			endm  
# End of macro DMARK
b6e7				CALLMONITOR 
b6e7 cd 6f ee			call debug_vector  
b6ea				endm  
# End of macro CALLMONITOR
b6ea					endif 
b6ea			 
b6ea					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b6ea cd 8a 9c			call macro_dsp_valuehl 
b6ed				endm 
# End of macro FORTH_DSP_VALUEHL
b6ed			 
b6ed				; TODO add floating point number detection 
b6ed			 
b6ed e5					push hl 
b6ee			 
b6ee					; destroy value TOS 
b6ee			 
b6ee					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b6ee cd 42 9d			call macro_forth_dsp_pop 
b6f1				endm 
# End of macro FORTH_DSP_POP
b6f1			 
b6f1			 
b6f1					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b6f1 cd 8a 9c			call macro_dsp_valuehl 
b6f4				endm 
# End of macro FORTH_DSP_VALUEHL
b6f4			 
b6f4					; one value on hl get other one back 
b6f4			 
b6f4 d1					pop de 
b6f5			 
b6f5					; do the add 
b6f5			 
b6f5 19					add hl,de 
b6f6			 
b6f6					; save it 
b6f6			 
b6f6			;		push hl	 
b6f6			 
b6f6					; 
b6f6			 
b6f6					; destroy value TOS 
b6f6			 
b6f6					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b6f6 cd 42 9d			call macro_forth_dsp_pop 
b6f9				endm 
# End of macro FORTH_DSP_POP
b6f9			 
b6f9					; TODO push value back onto stack for another op etc 
b6f9			 
b6f9			;		pop hl 
b6f9			 
b6f9			.dot_done: 
b6f9 cd 85 9a				call forth_push_numhl 
b6fc			 
b6fc					NEXTW 
b6fc c3 76 9e			jp macro_next 
b6ff				endm 
# End of macro NEXTW
b6ff			.NEG: 
b6ff			 
b6ff				CWHEAD .DIV 3 "-" 1 WORD_FLAG_CODE 
b6ff 17				db WORD_SYS_CORE+3             
b700 42 b7			dw .DIV            
b702 02				db 1 + 1 
b703 .. 00			db "-",0              
b705				endm 
# End of macro CWHEAD
b705			; | - ( u1 u2 -- u )    Subtract u2 from u1 and push result  | INT DONE 
b705					if DEBUG_FORTH_WORDS_KEY 
b705						DMARK "SUB" 
b705 f5				push af  
b706 3a 1a b7			ld a, (.dmark)  
b709 32 65 ee			ld (debug_mark),a  
b70c 3a 1b b7			ld a, (.dmark+1)  
b70f 32 66 ee			ld (debug_mark+1),a  
b712 3a 1c b7			ld a, (.dmark+2)  
b715 32 67 ee			ld (debug_mark+2),a  
b718 18 03			jr .pastdmark  
b71a ..			.dmark: db "SUB"  
b71d f1			.pastdmark: pop af  
b71e			endm  
# End of macro DMARK
b71e						CALLMONITOR 
b71e cd 6f ee			call debug_vector  
b721				endm  
# End of macro CALLMONITOR
b721					endif 
b721			 
b721			 
b721				; TODO add floating point number detection 
b721					; v5 FORTH_DSP_VALUE 
b721					FORTH_DSP 
b721 cd 50 9c			call macro_forth_dsp 
b724				endm 
# End of macro FORTH_DSP
b724 7e					ld a,(hl)	; get type of value on TOS 
b725 fe 02				cp DS_TYPE_INUM  
b727 28 03				jr z, .neg_inum 
b729			 
b729					NEXTW 
b729 c3 76 9e			jp macro_next 
b72c				endm 
# End of macro NEXTW
b72c			 
b72c			; float maths 
b72c			 
b72c				if FORTH_ENABLE_FLOATMATH 
b72c					jr .neg_done 
b72c			 
b72c				endif 
b72c					 
b72c			 
b72c			.neg_inum: 
b72c					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b72c cd 8a 9c			call macro_dsp_valuehl 
b72f				endm 
# End of macro FORTH_DSP_VALUEHL
b72f			 
b72f e5					push hl 
b730			 
b730					; destroy value TOS 
b730			 
b730					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b730 cd 42 9d			call macro_forth_dsp_pop 
b733				endm 
# End of macro FORTH_DSP_POP
b733			 
b733			 
b733					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b733 cd 8a 9c			call macro_dsp_valuehl 
b736				endm 
# End of macro FORTH_DSP_VALUEHL
b736			 
b736					; one value on hl get other one back 
b736			 
b736 d1					pop de 
b737			 
b737					; do the sub 
b737			;		ex de, hl 
b737			 
b737 ed 52				sbc hl,de 
b739			 
b739					; save it 
b739			 
b739			;		push hl	 
b739			 
b739					; 
b739			 
b739					; destroy value TOS 
b739			 
b739					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b739 cd 42 9d			call macro_forth_dsp_pop 
b73c				endm 
# End of macro FORTH_DSP_POP
b73c			 
b73c					; TODO push value back onto stack for another op etc 
b73c			 
b73c			;		pop hl 
b73c			 
b73c cd 85 9a				call forth_push_numhl 
b73f			.neg_done: 
b73f			 
b73f					NEXTW 
b73f c3 76 9e			jp macro_next 
b742				endm 
# End of macro NEXTW
b742			.DIV: 
b742				CWHEAD .MUL 4 "/" 1 WORD_FLAG_CODE 
b742 18				db WORD_SYS_CORE+4             
b743 8f b7			dw .MUL            
b745 02				db 1 + 1 
b746 .. 00			db "/",0              
b748				endm 
# End of macro CWHEAD
b748			; | / ( u1 u2 -- result remainder )     Divide u1 by u2 and push result | INT DONE 
b748					if DEBUG_FORTH_WORDS_KEY 
b748						DMARK "DIV" 
b748 f5				push af  
b749 3a 5d b7			ld a, (.dmark)  
b74c 32 65 ee			ld (debug_mark),a  
b74f 3a 5e b7			ld a, (.dmark+1)  
b752 32 66 ee			ld (debug_mark+1),a  
b755 3a 5f b7			ld a, (.dmark+2)  
b758 32 67 ee			ld (debug_mark+2),a  
b75b 18 03			jr .pastdmark  
b75d ..			.dmark: db "DIV"  
b760 f1			.pastdmark: pop af  
b761			endm  
# End of macro DMARK
b761						CALLMONITOR 
b761 cd 6f ee			call debug_vector  
b764				endm  
# End of macro CALLMONITOR
b764					endif 
b764				; TODO add floating point number detection 
b764					; v5 FORTH_DSP_VALUE 
b764					FORTH_DSP 
b764 cd 50 9c			call macro_forth_dsp 
b767				endm 
# End of macro FORTH_DSP
b767 7e					ld a,(hl)	; get type of value on TOS 
b768 fe 02				cp DS_TYPE_INUM  
b76a 28 03				jr z, .div_inum 
b76c			 
b76c				if FORTH_ENABLE_FLOATMATH 
b76c					jr .div_done 
b76c			 
b76c				endif 
b76c					NEXTW 
b76c c3 76 9e			jp macro_next 
b76f				endm 
# End of macro NEXTW
b76f			.div_inum: 
b76f			 
b76f					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b76f cd 8a 9c			call macro_dsp_valuehl 
b772				endm 
# End of macro FORTH_DSP_VALUEHL
b772			 
b772 e5					push hl    ; to go to bc 
b773			 
b773					; destroy value TOS 
b773			 
b773					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b773 cd 42 9d			call macro_forth_dsp_pop 
b776				endm 
# End of macro FORTH_DSP_POP
b776			 
b776			 
b776					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b776 cd 8a 9c			call macro_dsp_valuehl 
b779				endm 
# End of macro FORTH_DSP_VALUEHL
b779			 
b779					; hl to go to de 
b779			 
b779 e5					push hl 
b77a			 
b77a c1					pop bc 
b77b d1					pop de		 
b77c			 
b77c			 
b77c					if DEBUG_FORTH_MATHS 
b77c						DMARK "DIV" 
b77c				CALLMONITOR 
b77c					endif 
b77c					; one value on hl but move to a get other one back 
b77c			 
b77c			        
b77c cd 47 8c			call Div16 
b77f			 
b77f			;	push af	 
b77f e5				push hl 
b780 c5				push bc 
b781			 
b781					if DEBUG_FORTH_MATHS 
b781						DMARK "DI1" 
b781				CALLMONITOR 
b781					endif 
b781			 
b781					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b781 cd 42 9d			call macro_forth_dsp_pop 
b784				endm 
# End of macro FORTH_DSP_POP
b784			 
b784			 
b784			 
b784 e1					pop hl    ; result 
b785			 
b785 cd 85 9a				call forth_push_numhl 
b788			 
b788 e1					pop hl    ; reminder 
b789			;		ld h,0 
b789			;		ld l,d 
b789			 
b789 cd 85 9a				call forth_push_numhl 
b78c			.div_done: 
b78c					NEXTW 
b78c c3 76 9e			jp macro_next 
b78f				endm 
# End of macro NEXTW
b78f			.MUL: 
b78f				CWHEAD .MIN 5 "*" 1 WORD_FLAG_CODE 
b78f 19				db WORD_SYS_CORE+5             
b790 d4 b7			dw .MIN            
b792 02				db 1 + 1 
b793 .. 00			db "*",0              
b795				endm 
# End of macro CWHEAD
b795			; | * ( u1 u2 -- u )     Multiply TOS and push result | INT DONE 
b795				; TODO add floating point number detection 
b795					if DEBUG_FORTH_WORDS_KEY 
b795						DMARK "MUL" 
b795 f5				push af  
b796 3a aa b7			ld a, (.dmark)  
b799 32 65 ee			ld (debug_mark),a  
b79c 3a ab b7			ld a, (.dmark+1)  
b79f 32 66 ee			ld (debug_mark+1),a  
b7a2 3a ac b7			ld a, (.dmark+2)  
b7a5 32 67 ee			ld (debug_mark+2),a  
b7a8 18 03			jr .pastdmark  
b7aa ..			.dmark: db "MUL"  
b7ad f1			.pastdmark: pop af  
b7ae			endm  
# End of macro DMARK
b7ae						CALLMONITOR 
b7ae cd 6f ee			call debug_vector  
b7b1				endm  
# End of macro CALLMONITOR
b7b1					endif 
b7b1					FORTH_DSP 
b7b1 cd 50 9c			call macro_forth_dsp 
b7b4				endm 
# End of macro FORTH_DSP
b7b4					; v5 FORTH_DSP_VALUE 
b7b4 7e					ld a,(hl)	; get type of value on TOS 
b7b5 fe 02				cp DS_TYPE_INUM  
b7b7 28 03				jr z, .mul_inum 
b7b9			 
b7b9				if FORTH_ENABLE_FLOATMATH 
b7b9					jr .mul_done 
b7b9			 
b7b9				endif 
b7b9			 
b7b9					NEXTW 
b7b9 c3 76 9e			jp macro_next 
b7bc				endm 
# End of macro NEXTW
b7bc			.mul_inum:	 
b7bc			 
b7bc					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b7bc cd 8a 9c			call macro_dsp_valuehl 
b7bf				endm 
# End of macro FORTH_DSP_VALUEHL
b7bf			 
b7bf e5					push hl 
b7c0			 
b7c0					; destroy value TOS 
b7c0			 
b7c0					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b7c0 cd 42 9d			call macro_forth_dsp_pop 
b7c3				endm 
# End of macro FORTH_DSP_POP
b7c3			 
b7c3			 
b7c3					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b7c3 cd 8a 9c			call macro_dsp_valuehl 
b7c6				endm 
# End of macro FORTH_DSP_VALUEHL
b7c6			 
b7c6					; one value on hl but move to a get other one back 
b7c6			 
b7c6 7d					ld a, l 
b7c7			 
b7c7 d1					pop de 
b7c8			 
b7c8					; do the mull 
b7c8			;		ex de, hl 
b7c8			 
b7c8 cd 6d 8c				call Mult16 
b7cb					; save it 
b7cb			 
b7cb			;		push hl	 
b7cb			 
b7cb					; 
b7cb			 
b7cb					; destroy value TOS 
b7cb			 
b7cb					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b7cb cd 42 9d			call macro_forth_dsp_pop 
b7ce				endm 
# End of macro FORTH_DSP_POP
b7ce			 
b7ce					; TODO push value back onto stack for another op etc 
b7ce			 
b7ce			;		pop hl 
b7ce			 
b7ce cd 85 9a				call forth_push_numhl 
b7d1			 
b7d1			.mul_done: 
b7d1					NEXTW 
b7d1 c3 76 9e			jp macro_next 
b7d4				endm 
# End of macro NEXTW
b7d4			 
b7d4			 
b7d4			 
b7d4			 
b7d4			.MIN: 
b7d4				CWHEAD .MAX 53 "MIN" 3 WORD_FLAG_CODE 
b7d4 49				db WORD_SYS_CORE+53             
b7d5 55 b8			dw .MAX            
b7d7 04				db 3 + 1 
b7d8 .. 00			db "MIN",0              
b7dc				endm 
# End of macro CWHEAD
b7dc			; | MIN (  u1 u2 -- u3 ) Whichever is the smallest value is pushed back onto the stack | DONE 
b7dc					if DEBUG_FORTH_WORDS_KEY 
b7dc						DMARK "MIN" 
b7dc f5				push af  
b7dd 3a f1 b7			ld a, (.dmark)  
b7e0 32 65 ee			ld (debug_mark),a  
b7e3 3a f2 b7			ld a, (.dmark+1)  
b7e6 32 66 ee			ld (debug_mark+1),a  
b7e9 3a f3 b7			ld a, (.dmark+2)  
b7ec 32 67 ee			ld (debug_mark+2),a  
b7ef 18 03			jr .pastdmark  
b7f1 ..			.dmark: db "MIN"  
b7f4 f1			.pastdmark: pop af  
b7f5			endm  
# End of macro DMARK
b7f5						CALLMONITOR 
b7f5 cd 6f ee			call debug_vector  
b7f8				endm  
# End of macro CALLMONITOR
b7f8					endif 
b7f8					; get u2 
b7f8			 
b7f8					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b7f8 cd 8a 9c			call macro_dsp_valuehl 
b7fb				endm 
# End of macro FORTH_DSP_VALUEHL
b7fb			 
b7fb e5					push hl   ; u2 
b7fc			 
b7fc					; destroy value TOS 
b7fc			 
b7fc					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b7fc cd 42 9d			call macro_forth_dsp_pop 
b7ff				endm 
# End of macro FORTH_DSP_POP
b7ff			 
b7ff					; get u1 
b7ff			 
b7ff					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b7ff cd 8a 9c			call macro_dsp_valuehl 
b802				endm 
# End of macro FORTH_DSP_VALUEHL
b802			 
b802 e5					push hl  ; u1 
b803			 
b803					; destroy value TOS 
b803			 
b803					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b803 cd 42 9d			call macro_forth_dsp_pop 
b806				endm 
# End of macro FORTH_DSP_POP
b806			 
b806 b7			 or a      ;clear carry flag 
b807 e1			  pop hl    ; u1 
b808 d1			  pop de    ; u2 
b809 e5				push hl   ; saved in case hl is lowest 
b80a ed 52		  sbc hl,de 
b80c 30 23		  jr nc,.mincont   	;	if hl >= de, carry flag will be cleared 
b80e			 
b80e e1				pop hl 
b80f					if DEBUG_FORTH_WORDS 
b80f						DMARK "MIN" 
b80f f5				push af  
b810 3a 24 b8			ld a, (.dmark)  
b813 32 65 ee			ld (debug_mark),a  
b816 3a 25 b8			ld a, (.dmark+1)  
b819 32 66 ee			ld (debug_mark+1),a  
b81c 3a 26 b8			ld a, (.dmark+2)  
b81f 32 67 ee			ld (debug_mark+2),a  
b822 18 03			jr .pastdmark  
b824 ..			.dmark: db "MIN"  
b827 f1			.pastdmark: pop af  
b828			endm  
# End of macro DMARK
b828						CALLMONITOR 
b828 cd 6f ee			call debug_vector  
b82b				endm  
# End of macro CALLMONITOR
b82b					endif 
b82b cd 85 9a				call forth_push_numhl 
b82e			 
b82e				       NEXTW 
b82e c3 76 9e			jp macro_next 
b831				endm 
# End of macro NEXTW
b831			 
b831			.mincont:  
b831 c1				pop bc   ; tidy up 
b832 eb				ex de , hl  
b833					if DEBUG_FORTH_WORDS 
b833						DMARK "MI1" 
b833 f5				push af  
b834 3a 48 b8			ld a, (.dmark)  
b837 32 65 ee			ld (debug_mark),a  
b83a 3a 49 b8			ld a, (.dmark+1)  
b83d 32 66 ee			ld (debug_mark+1),a  
b840 3a 4a b8			ld a, (.dmark+2)  
b843 32 67 ee			ld (debug_mark+2),a  
b846 18 03			jr .pastdmark  
b848 ..			.dmark: db "MI1"  
b84b f1			.pastdmark: pop af  
b84c			endm  
# End of macro DMARK
b84c						CALLMONITOR 
b84c cd 6f ee			call debug_vector  
b84f				endm  
# End of macro CALLMONITOR
b84f					endif 
b84f cd 85 9a				call forth_push_numhl 
b852			 
b852				       NEXTW 
b852 c3 76 9e			jp macro_next 
b855				endm 
# End of macro NEXTW
b855			.MAX: 
b855				CWHEAD .RND16 54 "MAX" 3 WORD_FLAG_CODE 
b855 4a				db WORD_SYS_CORE+54             
b856 d6 b8			dw .RND16            
b858 04				db 3 + 1 
b859 .. 00			db "MAX",0              
b85d				endm 
# End of macro CWHEAD
b85d			; | MAX (  u1 u2 -- u3 )  Whichever is the largest value is pushed back onto the stack | DONE 
b85d					if DEBUG_FORTH_WORDS_KEY 
b85d						DMARK "MAX" 
b85d f5				push af  
b85e 3a 72 b8			ld a, (.dmark)  
b861 32 65 ee			ld (debug_mark),a  
b864 3a 73 b8			ld a, (.dmark+1)  
b867 32 66 ee			ld (debug_mark+1),a  
b86a 3a 74 b8			ld a, (.dmark+2)  
b86d 32 67 ee			ld (debug_mark+2),a  
b870 18 03			jr .pastdmark  
b872 ..			.dmark: db "MAX"  
b875 f1			.pastdmark: pop af  
b876			endm  
# End of macro DMARK
b876						CALLMONITOR 
b876 cd 6f ee			call debug_vector  
b879				endm  
# End of macro CALLMONITOR
b879					endif 
b879					; get u2 
b879			 
b879					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b879 cd 8a 9c			call macro_dsp_valuehl 
b87c				endm 
# End of macro FORTH_DSP_VALUEHL
b87c			 
b87c e5					push hl   ; u2 
b87d			 
b87d					; destroy value TOS 
b87d			 
b87d					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b87d cd 42 9d			call macro_forth_dsp_pop 
b880				endm 
# End of macro FORTH_DSP_POP
b880			 
b880					; get u1 
b880			 
b880					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b880 cd 8a 9c			call macro_dsp_valuehl 
b883				endm 
# End of macro FORTH_DSP_VALUEHL
b883			 
b883 e5					push hl  ; u1 
b884			 
b884					; destroy value TOS 
b884			 
b884					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b884 cd 42 9d			call macro_forth_dsp_pop 
b887				endm 
# End of macro FORTH_DSP_POP
b887			 
b887 b7			 or a      ;clear carry flag 
b888 e1			  pop hl    ; u1 
b889 d1			  pop de    ; u2 
b88a e5				push hl   ; saved in case hl is lowest 
b88b ed 52		  sbc hl,de 
b88d 38 23		  jr c,.maxcont   	;	if hl <= de, carry flag will be cleared 
b88f			 
b88f e1				pop hl 
b890					if DEBUG_FORTH_WORDS 
b890						DMARK "MAX" 
b890 f5				push af  
b891 3a a5 b8			ld a, (.dmark)  
b894 32 65 ee			ld (debug_mark),a  
b897 3a a6 b8			ld a, (.dmark+1)  
b89a 32 66 ee			ld (debug_mark+1),a  
b89d 3a a7 b8			ld a, (.dmark+2)  
b8a0 32 67 ee			ld (debug_mark+2),a  
b8a3 18 03			jr .pastdmark  
b8a5 ..			.dmark: db "MAX"  
b8a8 f1			.pastdmark: pop af  
b8a9			endm  
# End of macro DMARK
b8a9						CALLMONITOR 
b8a9 cd 6f ee			call debug_vector  
b8ac				endm  
# End of macro CALLMONITOR
b8ac					endif 
b8ac cd 85 9a				call forth_push_numhl 
b8af			 
b8af				       NEXTW 
b8af c3 76 9e			jp macro_next 
b8b2				endm 
# End of macro NEXTW
b8b2			 
b8b2			.maxcont:  
b8b2 c1				pop bc   ; tidy up 
b8b3 eb				ex de , hl  
b8b4					if DEBUG_FORTH_WORDS 
b8b4						DMARK "MA1" 
b8b4 f5				push af  
b8b5 3a c9 b8			ld a, (.dmark)  
b8b8 32 65 ee			ld (debug_mark),a  
b8bb 3a ca b8			ld a, (.dmark+1)  
b8be 32 66 ee			ld (debug_mark+1),a  
b8c1 3a cb b8			ld a, (.dmark+2)  
b8c4 32 67 ee			ld (debug_mark+2),a  
b8c7 18 03			jr .pastdmark  
b8c9 ..			.dmark: db "MA1"  
b8cc f1			.pastdmark: pop af  
b8cd			endm  
# End of macro DMARK
b8cd						CALLMONITOR 
b8cd cd 6f ee			call debug_vector  
b8d0				endm  
# End of macro CALLMONITOR
b8d0					endif 
b8d0 cd 85 9a				call forth_push_numhl 
b8d3				       NEXTW 
b8d3 c3 76 9e			jp macro_next 
b8d6				endm 
# End of macro NEXTW
b8d6			 
b8d6			.RND16: 
b8d6				CWHEAD .RND8 58 "RND16" 5 WORD_FLAG_CODE 
b8d6 4e				db WORD_SYS_CORE+58             
b8d7 05 b9			dw .RND8            
b8d9 06				db 5 + 1 
b8da .. 00			db "RND16",0              
b8e0				endm 
# End of macro CWHEAD
b8e0			; | RND16 (  -- n ) Generate a random 16bit number and push to stack | DONE 
b8e0					if DEBUG_FORTH_WORDS_KEY 
b8e0						DMARK "R16" 
b8e0 f5				push af  
b8e1 3a f5 b8			ld a, (.dmark)  
b8e4 32 65 ee			ld (debug_mark),a  
b8e7 3a f6 b8			ld a, (.dmark+1)  
b8ea 32 66 ee			ld (debug_mark+1),a  
b8ed 3a f7 b8			ld a, (.dmark+2)  
b8f0 32 67 ee			ld (debug_mark+2),a  
b8f3 18 03			jr .pastdmark  
b8f5 ..			.dmark: db "R16"  
b8f8 f1			.pastdmark: pop af  
b8f9			endm  
# End of macro DMARK
b8f9						CALLMONITOR 
b8f9 cd 6f ee			call debug_vector  
b8fc				endm  
# End of macro CALLMONITOR
b8fc					endif 
b8fc cd 11 8c				call prng16  
b8ff cd 85 9a				call forth_push_numhl 
b902				       NEXTW 
b902 c3 76 9e			jp macro_next 
b905				endm 
# End of macro NEXTW
b905			.RND8: 
b905				CWHEAD .RND 76 "RND8" 4 WORD_FLAG_CODE 
b905 60				db WORD_SYS_CORE+76             
b906 3a b9			dw .RND            
b908 05				db 4 + 1 
b909 .. 00			db "RND8",0              
b90e				endm 
# End of macro CWHEAD
b90e			; | RND8 (  -- n ) Generate a random 8bit number and push to stack | DONE 
b90e					if DEBUG_FORTH_WORDS_KEY 
b90e						DMARK "RN8" 
b90e f5				push af  
b90f 3a 23 b9			ld a, (.dmark)  
b912 32 65 ee			ld (debug_mark),a  
b915 3a 24 b9			ld a, (.dmark+1)  
b918 32 66 ee			ld (debug_mark+1),a  
b91b 3a 25 b9			ld a, (.dmark+2)  
b91e 32 67 ee			ld (debug_mark+2),a  
b921 18 03			jr .pastdmark  
b923 ..			.dmark: db "RN8"  
b926 f1			.pastdmark: pop af  
b927			endm  
# End of macro DMARK
b927						CALLMONITOR 
b927 cd 6f ee			call debug_vector  
b92a				endm  
# End of macro CALLMONITOR
b92a					endif 
b92a 2a a3 eb				ld hl,(xrandc) 
b92d 23					inc hl 
b92e cd 2b 8c				call xrnd 
b931 6f					ld l,a	 
b932 26 00				ld h,0 
b934 cd 85 9a				call forth_push_numhl 
b937				       NEXTW 
b937 c3 76 9e			jp macro_next 
b93a				endm 
# End of macro NEXTW
b93a			.RND: 
b93a				CWHEAD .ENDMATHS 76 "RND" 3 WORD_FLAG_CODE 
b93a 60				db WORD_SYS_CORE+76             
b93b 40 ba			dw .ENDMATHS            
b93d 04				db 3 + 1 
b93e .. 00			db "RND",0              
b942				endm 
# End of macro CWHEAD
b942			; | RND ( u1 u2 -- u ) Generate a random number no lower than u1 and no higher than u2 and push to stack | DONE 
b942			 
b942					if DEBUG_FORTH_WORDS_KEY 
b942						DMARK "RND" 
b942 f5				push af  
b943 3a 57 b9			ld a, (.dmark)  
b946 32 65 ee			ld (debug_mark),a  
b949 3a 58 b9			ld a, (.dmark+1)  
b94c 32 66 ee			ld (debug_mark+1),a  
b94f 3a 59 b9			ld a, (.dmark+2)  
b952 32 67 ee			ld (debug_mark+2),a  
b955 18 03			jr .pastdmark  
b957 ..			.dmark: db "RND"  
b95a f1			.pastdmark: pop af  
b95b			endm  
# End of macro DMARK
b95b						CALLMONITOR 
b95b cd 6f ee			call debug_vector  
b95e				endm  
# End of macro CALLMONITOR
b95e					endif 
b95e					 
b95e					FORTH_DSP_VALUEHL    ; upper range 
b95e cd 8a 9c			call macro_dsp_valuehl 
b961				endm 
# End of macro FORTH_DSP_VALUEHL
b961			 
b961 22 a7 eb				ld (LFSRSeed), hl	 
b964			 
b964					if DEBUG_FORTH_WORDS 
b964						DMARK "RN1" 
b964 f5				push af  
b965 3a 79 b9			ld a, (.dmark)  
b968 32 65 ee			ld (debug_mark),a  
b96b 3a 7a b9			ld a, (.dmark+1)  
b96e 32 66 ee			ld (debug_mark+1),a  
b971 3a 7b b9			ld a, (.dmark+2)  
b974 32 67 ee			ld (debug_mark+2),a  
b977 18 03			jr .pastdmark  
b979 ..			.dmark: db "RN1"  
b97c f1			.pastdmark: pop af  
b97d			endm  
# End of macro DMARK
b97d						CALLMONITOR 
b97d cd 6f ee			call debug_vector  
b980				endm  
# End of macro CALLMONITOR
b980					endif 
b980					FORTH_DSP_POP 
b980 cd 42 9d			call macro_forth_dsp_pop 
b983				endm 
# End of macro FORTH_DSP_POP
b983			 
b983					FORTH_DSP_VALUEHL    ; low range 
b983 cd 8a 9c			call macro_dsp_valuehl 
b986				endm 
# End of macro FORTH_DSP_VALUEHL
b986			 
b986					if DEBUG_FORTH_WORDS 
b986						DMARK "RN2" 
b986 f5				push af  
b987 3a 9b b9			ld a, (.dmark)  
b98a 32 65 ee			ld (debug_mark),a  
b98d 3a 9c b9			ld a, (.dmark+1)  
b990 32 66 ee			ld (debug_mark+1),a  
b993 3a 9d b9			ld a, (.dmark+2)  
b996 32 67 ee			ld (debug_mark+2),a  
b999 18 03			jr .pastdmark  
b99b ..			.dmark: db "RN2"  
b99e f1			.pastdmark: pop af  
b99f			endm  
# End of macro DMARK
b99f						CALLMONITOR 
b99f cd 6f ee			call debug_vector  
b9a2				endm  
# End of macro CALLMONITOR
b9a2					endif 
b9a2 22 a9 eb				ld (LFSRSeed+2), hl 
b9a5			 
b9a5					FORTH_DSP_POP 
b9a5 cd 42 9d			call macro_forth_dsp_pop 
b9a8				endm 
# End of macro FORTH_DSP_POP
b9a8			 
b9a8 e5					push hl 
b9a9			 
b9a9 e1			.inrange:	pop hl 
b9aa cd 11 8c				call prng16  
b9ad					if DEBUG_FORTH_WORDS 
b9ad						DMARK "RN3" 
b9ad f5				push af  
b9ae 3a c2 b9			ld a, (.dmark)  
b9b1 32 65 ee			ld (debug_mark),a  
b9b4 3a c3 b9			ld a, (.dmark+1)  
b9b7 32 66 ee			ld (debug_mark+1),a  
b9ba 3a c4 b9			ld a, (.dmark+2)  
b9bd 32 67 ee			ld (debug_mark+2),a  
b9c0 18 03			jr .pastdmark  
b9c2 ..			.dmark: db "RN3"  
b9c5 f1			.pastdmark: pop af  
b9c6			endm  
# End of macro DMARK
b9c6						CALLMONITOR 
b9c6 cd 6f ee			call debug_vector  
b9c9				endm  
# End of macro CALLMONITOR
b9c9					endif 
b9c9					 
b9c9					; if the range is 8bit knock out the high byte 
b9c9			 
b9c9 ed 5b a7 eb			ld de, (LFSRSeed)     ; check high level 
b9cd			 
b9cd 3e 00				ld a, 0 
b9cf ba					cp d  
b9d0 20 1e				jr nz, .hirange 
b9d2 26 00				ld h, 0   ; knock it down to 8bit 
b9d4			 
b9d4					if DEBUG_FORTH_WORDS 
b9d4						DMARK "RNk" 
b9d4 f5				push af  
b9d5 3a e9 b9			ld a, (.dmark)  
b9d8 32 65 ee			ld (debug_mark),a  
b9db 3a ea b9			ld a, (.dmark+1)  
b9de 32 66 ee			ld (debug_mark+1),a  
b9e1 3a eb b9			ld a, (.dmark+2)  
b9e4 32 67 ee			ld (debug_mark+2),a  
b9e7 18 03			jr .pastdmark  
b9e9 ..			.dmark: db "RNk"  
b9ec f1			.pastdmark: pop af  
b9ed			endm  
# End of macro DMARK
b9ed						CALLMONITOR 
b9ed cd 6f ee			call debug_vector  
b9f0				endm  
# End of macro CALLMONITOR
b9f0					endif 
b9f0			.hirange:   
b9f0 e5					push hl  
b9f1 b7					or a  
b9f2 ed 52		                sbc hl, de 
b9f4			 
b9f4					;call cmp16 
b9f4			 
b9f4 30 b3				jr nc, .inrange      ; if hl >= de, carry flag is cleared 
b9f6 e1					pop hl 
b9f7 e5					push hl 
b9f8			 
b9f8					if DEBUG_FORTH_WORDS 
b9f8						DMARK "RN4" 
b9f8 f5				push af  
b9f9 3a 0d ba			ld a, (.dmark)  
b9fc 32 65 ee			ld (debug_mark),a  
b9ff 3a 0e ba			ld a, (.dmark+1)  
ba02 32 66 ee			ld (debug_mark+1),a  
ba05 3a 0f ba			ld a, (.dmark+2)  
ba08 32 67 ee			ld (debug_mark+2),a  
ba0b 18 03			jr .pastdmark  
ba0d ..			.dmark: db "RN4"  
ba10 f1			.pastdmark: pop af  
ba11			endm  
# End of macro DMARK
ba11						CALLMONITOR 
ba11 cd 6f ee			call debug_vector  
ba14				endm  
# End of macro CALLMONITOR
ba14					endif 
ba14 ed 5b a9 eb			ld de, (LFSRSeed+2)   ; check low range 
ba18					;call cmp16 
ba18				 
ba18 b7					or a  
ba19 ed 52		                sbc hl, de 
ba1b 38 8c				jr c, .inrange 
ba1d			 
ba1d e1					pop hl 
ba1e					 
ba1e					if DEBUG_FORTH_WORDS 
ba1e						DMARK "RNd" 
ba1e f5				push af  
ba1f 3a 33 ba			ld a, (.dmark)  
ba22 32 65 ee			ld (debug_mark),a  
ba25 3a 34 ba			ld a, (.dmark+1)  
ba28 32 66 ee			ld (debug_mark+1),a  
ba2b 3a 35 ba			ld a, (.dmark+2)  
ba2e 32 67 ee			ld (debug_mark+2),a  
ba31 18 03			jr .pastdmark  
ba33 ..			.dmark: db "RNd"  
ba36 f1			.pastdmark: pop af  
ba37			endm  
# End of macro DMARK
ba37						CALLMONITOR 
ba37 cd 6f ee			call debug_vector  
ba3a				endm  
# End of macro CALLMONITOR
ba3a					endif 
ba3a			 
ba3a			 
ba3a cd 85 9a				call forth_push_numhl 
ba3d				       NEXTW 
ba3d c3 76 9e			jp macro_next 
ba40				endm 
# End of macro NEXTW
ba40			 
ba40			.ENDMATHS: 
ba40			 
ba40			; eof 
ba40			 
# End of file forth_words_maths.asm
ba40			include "forth_words_display.asm" 
ba40			 
ba40			; | ## Display Words 
ba40			 
ba40			.ACT: 
ba40			 
ba40				CWHEAD .INFO 78 "ACTIVE" 6 WORD_FLAG_CODE 
ba40 62				db WORD_SYS_CORE+78             
ba41 8c ba			dw .INFO            
ba43 07				db 6 + 1 
ba44 .. 00			db "ACTIVE",0              
ba4b				endm 
# End of macro CWHEAD
ba4b			; | ACTIVE ( -- s ) Push the next char for an activity indicator to TOS | DONE 
ba4b			;  
ba4b			; | | To display a pulsing activity indicator in a processing loop do this... 
ba4b			; | | e.g. $ff $00 do active . ..... Your code ..... loop 
ba4b			 
ba4b					if DEBUG_FORTH_WORDS_KEY 
ba4b						DMARK "ACT" 
ba4b f5				push af  
ba4c 3a 60 ba			ld a, (.dmark)  
ba4f 32 65 ee			ld (debug_mark),a  
ba52 3a 61 ba			ld a, (.dmark+1)  
ba55 32 66 ee			ld (debug_mark+1),a  
ba58 3a 62 ba			ld a, (.dmark+2)  
ba5b 32 67 ee			ld (debug_mark+2),a  
ba5e 18 03			jr .pastdmark  
ba60 ..			.dmark: db "ACT"  
ba63 f1			.pastdmark: pop af  
ba64			endm  
# End of macro DMARK
ba64						CALLMONITOR 
ba64 cd 6f ee			call debug_vector  
ba67				endm  
# End of macro CALLMONITOR
ba67					endif 
ba67 cd 14 8a				call active 
ba6a					if DEBUG_FORTH_WORDS 
ba6a						DMARK "ACp" 
ba6a f5				push af  
ba6b 3a 7f ba			ld a, (.dmark)  
ba6e 32 65 ee			ld (debug_mark),a  
ba71 3a 80 ba			ld a, (.dmark+1)  
ba74 32 66 ee			ld (debug_mark+1),a  
ba77 3a 81 ba			ld a, (.dmark+2)  
ba7a 32 67 ee			ld (debug_mark+2),a  
ba7d 18 03			jr .pastdmark  
ba7f ..			.dmark: db "ACp"  
ba82 f1			.pastdmark: pop af  
ba83			endm  
# End of macro DMARK
ba83						CALLMONITOR 
ba83 cd 6f ee			call debug_vector  
ba86				endm  
# End of macro CALLMONITOR
ba86					endif 
ba86 cd f3 9a				call forth_push_str 
ba89			 
ba89					NEXTW 
ba89 c3 76 9e			jp macro_next 
ba8c				endm 
# End of macro NEXTW
ba8c			.INFO: 
ba8c			 
ba8c				CWHEAD .ATP 78 "INFO" 4 WORD_FLAG_CODE 
ba8c 62				db WORD_SYS_CORE+78             
ba8d a9 ba			dw .ATP            
ba8f 05				db 4 + 1 
ba90 .. 00			db "INFO",0              
ba95				endm 
# End of macro CWHEAD
ba95			; | INFO ( u1 u2 -- )  Use the top two strings on stack to fill in an info window over two lines. Causes a wait for key press to continue. | DONE 
ba95					FORTH_DSP_VALUEHL 
ba95 cd 8a 9c			call macro_dsp_valuehl 
ba98				endm 
# End of macro FORTH_DSP_VALUEHL
ba98			 
ba98					FORTH_DSP_POP 
ba98 cd 42 9d			call macro_forth_dsp_pop 
ba9b				endm 
# End of macro FORTH_DSP_POP
ba9b			 
ba9b e5					push hl 
ba9c			 
ba9c					FORTH_DSP_VALUEHL 
ba9c cd 8a 9c			call macro_dsp_valuehl 
ba9f				endm 
# End of macro FORTH_DSP_VALUEHL
ba9f			 
ba9f					FORTH_DSP_POP 
ba9f cd 42 9d			call macro_forth_dsp_pop 
baa2				endm 
# End of macro FORTH_DSP_POP
baa2			 
baa2 d1					pop de 
baa3			 
baa3 cd 4e 8a				call info_panel 
baa6			 
baa6			 
baa6					NEXTW 
baa6 c3 76 9e			jp macro_next 
baa9				endm 
# End of macro NEXTW
baa9			.ATP: 
baa9				CWHEAD .FB 78 "AT?" 3 WORD_FLAG_CODE 
baa9 62				db WORD_SYS_CORE+78             
baaa 20 bb			dw .FB            
baac 04				db 3 + 1 
baad .. 00			db "AT?",0              
bab1				endm 
# End of macro CWHEAD
bab1			; | AT? ( -- c r )  Push to stack the current position of the next print | TO TEST 
bab1					if DEBUG_FORTH_WORDS_KEY 
bab1						DMARK "AT?" 
bab1 f5				push af  
bab2 3a c6 ba			ld a, (.dmark)  
bab5 32 65 ee			ld (debug_mark),a  
bab8 3a c7 ba			ld a, (.dmark+1)  
babb 32 66 ee			ld (debug_mark+1),a  
babe 3a c8 ba			ld a, (.dmark+2)  
bac1 32 67 ee			ld (debug_mark+2),a  
bac4 18 03			jr .pastdmark  
bac6 ..			.dmark: db "AT?"  
bac9 f1			.pastdmark: pop af  
baca			endm  
# End of macro DMARK
baca						CALLMONITOR 
baca cd 6f ee			call debug_vector  
bacd				endm  
# End of macro CALLMONITOR
bacd					endif 
bacd 3a 58 ea				ld a, (f_cursor_ptr) 
bad0			 
bad0			if DEBUG_FORTH_WORDS 
bad0				DMARK "AT?" 
bad0 f5				push af  
bad1 3a e5 ba			ld a, (.dmark)  
bad4 32 65 ee			ld (debug_mark),a  
bad7 3a e6 ba			ld a, (.dmark+1)  
bada 32 66 ee			ld (debug_mark+1),a  
badd 3a e7 ba			ld a, (.dmark+2)  
bae0 32 67 ee			ld (debug_mark+2),a  
bae3 18 03			jr .pastdmark  
bae5 ..			.dmark: db "AT?"  
bae8 f1			.pastdmark: pop af  
bae9			endm  
# End of macro DMARK
bae9				CALLMONITOR 
bae9 cd 6f ee			call debug_vector  
baec				endm  
# End of macro CALLMONITOR
baec			endif	 
baec					; count the number of rows 
baec			 
baec 06 00				ld b, 0 
baee 4f			.atpr:		ld c, a    ; save in case we go below zero 
baef d6 28				sub display_cols 
baf1 f2 f7 ba				jp p, .atprunder 
baf4 04					inc b 
baf5 18 f7				jr .atpr 
baf7			.atprunder:	 
baf7			if DEBUG_FORTH_WORDS 
baf7				DMARK "A?2" 
baf7 f5				push af  
baf8 3a 0c bb			ld a, (.dmark)  
bafb 32 65 ee			ld (debug_mark),a  
bafe 3a 0d bb			ld a, (.dmark+1)  
bb01 32 66 ee			ld (debug_mark+1),a  
bb04 3a 0e bb			ld a, (.dmark+2)  
bb07 32 67 ee			ld (debug_mark+2),a  
bb0a 18 03			jr .pastdmark  
bb0c ..			.dmark: db "A?2"  
bb0f f1			.pastdmark: pop af  
bb10			endm  
# End of macro DMARK
bb10				CALLMONITOR 
bb10 cd 6f ee			call debug_vector  
bb13				endm  
# End of macro CALLMONITOR
bb13			endif	 
bb13 26 00				ld h, 0 
bb15 69					ld l, c 
bb16 cd 85 9a				call forth_push_numhl 
bb19 68					ld l, b  
bb1a cd 85 9a				call forth_push_numhl 
bb1d			 
bb1d			 
bb1d				NEXTW 
bb1d c3 76 9e			jp macro_next 
bb20				endm 
# End of macro NEXTW
bb20			 
bb20			.FB: 
bb20				CWHEAD .EMIT 7 "FB" 2 WORD_FLAG_CODE 
bb20 1b				db WORD_SYS_CORE+7             
bb21 6e bb			dw .EMIT            
bb23 03				db 2 + 1 
bb24 .. 00			db "FB",0              
bb27				endm 
# End of macro CWHEAD
bb27			; | FB ( u -- ) Select frame buffer ID u (1-3)  |  DONE 
bb27			; | | Default frame buffer is 1. System uses 0 which can't be selected for system messages etc. 
bb27			; | | Selecting the frame buffer wont display unless automatic display is setup (default). 
bb27			; | | If automatic display is off then updates will not be shown until DRAW is used. 
bb27					if DEBUG_FORTH_WORDS_KEY 
bb27						DMARK "FB." 
bb27 f5				push af  
bb28 3a 3c bb			ld a, (.dmark)  
bb2b 32 65 ee			ld (debug_mark),a  
bb2e 3a 3d bb			ld a, (.dmark+1)  
bb31 32 66 ee			ld (debug_mark+1),a  
bb34 3a 3e bb			ld a, (.dmark+2)  
bb37 32 67 ee			ld (debug_mark+2),a  
bb3a 18 03			jr .pastdmark  
bb3c ..			.dmark: db "FB."  
bb3f f1			.pastdmark: pop af  
bb40			endm  
# End of macro DMARK
bb40						CALLMONITOR 
bb40 cd 6f ee			call debug_vector  
bb43				endm  
# End of macro CALLMONITOR
bb43					endif 
bb43			 
bb43					FORTH_DSP_VALUEHL 
bb43 cd 8a 9c			call macro_dsp_valuehl 
bb46				endm 
# End of macro FORTH_DSP_VALUEHL
bb46			 
bb46 7d					ld a, l 
bb47 fe 01				cp 1 
bb49 20 05				jr nz, .fbn1 
bb4b 21 0a ed				ld hl, display_fb1 
bb4e 18 15				jr .fbset 
bb50 fe 02		.fbn1:		cp 2 
bb52 20 05				jr nz, .fbn2 
bb54 21 c8 eb				ld hl, display_fb2 
bb57 18 0c				jr .fbset 
bb59 fe 03		.fbn2:		cp 3 
bb5b 20 05				jr nz, .fbn3 
bb5d 21 69 ec				ld hl, display_fb3 
bb60 18 03				jr .fbset 
bb62			.fbn3:		 ; if invalid number select first 
bb62 21 0a ed				ld hl, display_fb1 
bb65 22 c6 eb		.fbset:		ld (display_fb_active), hl 
bb68			 
bb68					FORTH_DSP_POP 
bb68 cd 42 9d			call macro_forth_dsp_pop 
bb6b				endm 
# End of macro FORTH_DSP_POP
bb6b			 
bb6b					NEXTW 
bb6b c3 76 9e			jp macro_next 
bb6e				endm 
# End of macro NEXTW
bb6e			 
bb6e			 
bb6e			.EMIT: 
bb6e				CWHEAD .DOTH 7 "EMIT" 4 WORD_FLAG_CODE 
bb6e 1b				db WORD_SYS_CORE+7             
bb6f bf bb			dw .DOTH            
bb71 05				db 4 + 1 
bb72 .. 00			db "EMIT",0              
bb77				endm 
# End of macro CWHEAD
bb77			; |  EMIT ( u -- ) Display ascii character  TOS   | DONE 
bb77					; get value off TOS and display it 
bb77			 
bb77					if DEBUG_FORTH_WORDS_KEY 
bb77						DMARK "EMT" 
bb77 f5				push af  
bb78 3a 8c bb			ld a, (.dmark)  
bb7b 32 65 ee			ld (debug_mark),a  
bb7e 3a 8d bb			ld a, (.dmark+1)  
bb81 32 66 ee			ld (debug_mark+1),a  
bb84 3a 8e bb			ld a, (.dmark+2)  
bb87 32 67 ee			ld (debug_mark+2),a  
bb8a 18 03			jr .pastdmark  
bb8c ..			.dmark: db "EMT"  
bb8f f1			.pastdmark: pop af  
bb90			endm  
# End of macro DMARK
bb90						CALLMONITOR 
bb90 cd 6f ee			call debug_vector  
bb93				endm  
# End of macro CALLMONITOR
bb93					endif 
bb93			 
bb93					FORTH_DSP_VALUEHL 
bb93 cd 8a 9c			call macro_dsp_valuehl 
bb96				endm 
# End of macro FORTH_DSP_VALUEHL
bb96			 
bb96 7d					ld a,l 
bb97			 
bb97					; TODO write to display 
bb97			 
bb97 32 b9 e4				ld (os_input), a 
bb9a 3e 00				ld a, 0 
bb9c 32 ba e4				ld (os_input+1), a 
bb9f					 
bb9f 3a 58 ea				ld a, (f_cursor_ptr) 
bba2 11 b9 e4				ld de, os_input 
bba5 cd d0 8a				call str_at_display 
bba8			 
bba8			 
bba8 3a 36 ea				ld a,(cli_autodisplay) 
bbab fe 00				cp 0 
bbad 28 03				jr z, .enoupdate 
bbaf cd e0 8a						call update_display 
bbb2					.enoupdate: 
bbb2			 
bbb2 3a 58 ea				ld a, (f_cursor_ptr) 
bbb5 3c					inc a 
bbb6 32 58 ea				ld (f_cursor_ptr), a   ; save new pos 
bbb9			 
bbb9			 
bbb9					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bbb9 cd 42 9d			call macro_forth_dsp_pop 
bbbc				endm 
# End of macro FORTH_DSP_POP
bbbc			  
bbbc			 
bbbc					NEXTW 
bbbc c3 76 9e			jp macro_next 
bbbf				endm 
# End of macro NEXTW
bbbf			.DOTH: 
bbbf				CWHEAD .DOTF 8 ".-" 2 WORD_FLAG_CODE 
bbbf 1c				db WORD_SYS_CORE+8             
bbc0 ef bb			dw .DOTF            
bbc2 03				db 2 + 1 
bbc3 .. 00			db ".-",0              
bbc6				endm 
# End of macro CWHEAD
bbc6			        ; | .- ( u -- ) Display TOS replacing any dashes with spaces. Means you dont need to wrap strings in double quotes!   | DONE 
bbc6					; get value off TOS and display it 
bbc6					if DEBUG_FORTH_WORDS_KEY 
bbc6						DMARK "DTD" 
bbc6 f5				push af  
bbc7 3a db bb			ld a, (.dmark)  
bbca 32 65 ee			ld (debug_mark),a  
bbcd 3a dc bb			ld a, (.dmark+1)  
bbd0 32 66 ee			ld (debug_mark+1),a  
bbd3 3a dd bb			ld a, (.dmark+2)  
bbd6 32 67 ee			ld (debug_mark+2),a  
bbd9 18 03			jr .pastdmark  
bbdb ..			.dmark: db "DTD"  
bbde f1			.pastdmark: pop af  
bbdf			endm  
# End of macro DMARK
bbdf						CALLMONITOR 
bbdf cd 6f ee			call debug_vector  
bbe2				endm  
# End of macro CALLMONITOR
bbe2					endif 
bbe2 0e 01			ld c, 1	  ; flag for removal of '-' enabled 
bbe4 3e 00			ld a, 0 
bbe6 32 37 ea			ld (cli_mvdot), a 
bbe9 c3 46 bc			jp .dotgo 
bbec				NEXTW 
bbec c3 76 9e			jp macro_next 
bbef				endm 
# End of macro NEXTW
bbef			.DOTF: 
bbef				CWHEAD .DOT 8 ".>" 2 WORD_FLAG_CODE 
bbef 1c				db WORD_SYS_CORE+8             
bbf0 1d bc			dw .DOT            
bbf2 03				db 2 + 1 
bbf3 .. 00			db ".>",0              
bbf6				endm 
# End of macro CWHEAD
bbf6			        ; | .> ( u -- ) Display TOS and move the next display point with display  | DONE 
bbf6					; get value off TOS and display it 
bbf6			        ; TODO BUG adds extra spaces 
bbf6			        ; TODO BUG handle numerics? 
bbf6					if DEBUG_FORTH_WORDS_KEY 
bbf6						DMARK "DTC" 
bbf6 f5				push af  
bbf7 3a 0b bc			ld a, (.dmark)  
bbfa 32 65 ee			ld (debug_mark),a  
bbfd 3a 0c bc			ld a, (.dmark+1)  
bc00 32 66 ee			ld (debug_mark+1),a  
bc03 3a 0d bc			ld a, (.dmark+2)  
bc06 32 67 ee			ld (debug_mark+2),a  
bc09 18 03			jr .pastdmark  
bc0b ..			.dmark: db "DTC"  
bc0e f1			.pastdmark: pop af  
bc0f			endm  
# End of macro DMARK
bc0f						CALLMONITOR 
bc0f cd 6f ee			call debug_vector  
bc12				endm  
# End of macro CALLMONITOR
bc12					endif 
bc12 3e 01			ld a, 1 
bc14 32 37 ea			ld (cli_mvdot), a 
bc17 c3 46 bc			jp .dotgo 
bc1a				NEXTW 
bc1a c3 76 9e			jp macro_next 
bc1d				endm 
# End of macro NEXTW
bc1d			 
bc1d			.DOT: 
bc1d				CWHEAD .CLS 8 "." 1 WORD_FLAG_CODE 
bc1d 1c				db WORD_SYS_CORE+8             
bc1e f9 bd			dw .CLS            
bc20 02				db 1 + 1 
bc21 .. 00			db ".",0              
bc23				endm 
# End of macro CWHEAD
bc23			        ; | . ( u -- ) Display TOS. Does not move next print position. Use .> if you want that. | DONE 
bc23					; get value off TOS and display it 
bc23			 
bc23					if DEBUG_FORTH_WORDS_KEY 
bc23						DMARK "DOT" 
bc23 f5				push af  
bc24 3a 38 bc			ld a, (.dmark)  
bc27 32 65 ee			ld (debug_mark),a  
bc2a 3a 39 bc			ld a, (.dmark+1)  
bc2d 32 66 ee			ld (debug_mark+1),a  
bc30 3a 3a bc			ld a, (.dmark+2)  
bc33 32 67 ee			ld (debug_mark+2),a  
bc36 18 03			jr .pastdmark  
bc38 ..			.dmark: db "DOT"  
bc3b f1			.pastdmark: pop af  
bc3c			endm  
# End of macro DMARK
bc3c						CALLMONITOR 
bc3c cd 6f ee			call debug_vector  
bc3f				endm  
# End of macro CALLMONITOR
bc3f					endif 
bc3f 3e 00			ld a, 0 
bc41 32 37 ea			ld (cli_mvdot), a 
bc44 0e 00		ld c, 0	  ; flag for removal of '-' disabled 
bc46				 
bc46			 
bc46			.dotgo: 
bc46			 
bc46			; move up type to on stack for parserv5 
bc46					FORTH_DSP 
bc46 cd 50 9c			call macro_forth_dsp 
bc49				endm 
# End of macro FORTH_DSP
bc49				;FORTH_DSP_VALUE  
bc49			 
bc49			if DEBUG_FORTH_DOT 
bc49				DMARK "DOT" 
bc49 f5				push af  
bc4a 3a 5e bc			ld a, (.dmark)  
bc4d 32 65 ee			ld (debug_mark),a  
bc50 3a 5f bc			ld a, (.dmark+1)  
bc53 32 66 ee			ld (debug_mark+1),a  
bc56 3a 60 bc			ld a, (.dmark+2)  
bc59 32 67 ee			ld (debug_mark+2),a  
bc5c 18 03			jr .pastdmark  
bc5e ..			.dmark: db "DOT"  
bc61 f1			.pastdmark: pop af  
bc62			endm  
# End of macro DMARK
bc62				CALLMONITOR 
bc62 cd 6f ee			call debug_vector  
bc65				endm  
# End of macro CALLMONITOR
bc65			endif	 
bc65			;		.print: 
bc65			 
bc65 7e				ld a,(hl)  ; work out what type of value is on the TOS 
bc66 23				inc hl   ; position to the actual value 
bc67 fe 01			cp DS_TYPE_STR 
bc69 20 06			jr nz, .dotnum1  
bc6b			 
bc6b			; display string 
bc6b				FORTH_DSP_VALUE  
bc6b cd 73 9c			call macro_forth_dsp_value 
bc6e				endm 
# End of macro FORTH_DSP_VALUE
bc6e eb				ex de,hl 
bc6f 18 49			jr .dotwrite 
bc71			 
bc71			.dotnum1: 
bc71 fe 02			cp DS_TYPE_INUM 
bc73 20 44			jr nz, .dotflot 
bc75			 
bc75			 
bc75			; display number 
bc75			 
bc75			;	push hl 
bc75			;	call clear_display 
bc75			;	pop hl 
bc75			 
bc75 5e				ld e, (hl) 
bc76 23				inc hl 
bc77 56				ld d, (hl) 
bc78 21 bb e2			ld hl, scratch 
bc7b			if DEBUG_FORTH_DOT 
bc7b				DMARK "DT1" 
bc7b f5				push af  
bc7c 3a 90 bc			ld a, (.dmark)  
bc7f 32 65 ee			ld (debug_mark),a  
bc82 3a 91 bc			ld a, (.dmark+1)  
bc85 32 66 ee			ld (debug_mark+1),a  
bc88 3a 92 bc			ld a, (.dmark+2)  
bc8b 32 67 ee			ld (debug_mark+2),a  
bc8e 18 03			jr .pastdmark  
bc90 ..			.dmark: db "DT1"  
bc93 f1			.pastdmark: pop af  
bc94			endm  
# End of macro DMARK
bc94				CALLMONITOR 
bc94 cd 6f ee			call debug_vector  
bc97				endm  
# End of macro CALLMONITOR
bc97			endif	 
bc97			 
bc97 cd ff 8f			call uitoa_16 
bc9a eb				ex de,hl 
bc9b			 
bc9b			if DEBUG_FORTH_DOT 
bc9b				DMARK "DT2" 
bc9b f5				push af  
bc9c 3a b0 bc			ld a, (.dmark)  
bc9f 32 65 ee			ld (debug_mark),a  
bca2 3a b1 bc			ld a, (.dmark+1)  
bca5 32 66 ee			ld (debug_mark+1),a  
bca8 3a b2 bc			ld a, (.dmark+2)  
bcab 32 67 ee			ld (debug_mark+2),a  
bcae 18 03			jr .pastdmark  
bcb0 ..			.dmark: db "DT2"  
bcb3 f1			.pastdmark: pop af  
bcb4			endm  
# End of macro DMARK
bcb4				CALLMONITOR 
bcb4 cd 6f ee			call debug_vector  
bcb7				endm  
# End of macro CALLMONITOR
bcb7			endif	 
bcb7			 
bcb7			;	ld de, os_word_scratch 
bcb7 18 01			jr .dotwrite 
bcb9			 
bcb9 00			.dotflot:   nop 
bcba			; TODO print floating point number 
bcba			 
bcba			.dotwrite:		 
bcba			 
bcba					; if c is set then set all '-' to spaces 
bcba					; need to also take into account .>  
bcba			 
bcba 3e 01				ld a, 1 
bcbc b9					cp c 
bcbd 20 67				jr nz, .nodashswap 
bcbf			 
bcbf					; DE has the string to write, working with HL 
bcbf			 
bcbf 06 ff				ld b, 255 
bcc1 d5					push de 
bcc2 e1					pop hl 
bcc3			 
bcc3			if DEBUG_FORTH_DOT 
bcc3				DMARK "DT-" 
bcc3 f5				push af  
bcc4 3a d8 bc			ld a, (.dmark)  
bcc7 32 65 ee			ld (debug_mark),a  
bcca 3a d9 bc			ld a, (.dmark+1)  
bccd 32 66 ee			ld (debug_mark+1),a  
bcd0 3a da bc			ld a, (.dmark+2)  
bcd3 32 67 ee			ld (debug_mark+2),a  
bcd6 18 03			jr .pastdmark  
bcd8 ..			.dmark: db "DT-"  
bcdb f1			.pastdmark: pop af  
bcdc			endm  
# End of macro DMARK
bcdc				CALLMONITOR 
bcdc cd 6f ee			call debug_vector  
bcdf				endm  
# End of macro CALLMONITOR
bcdf			endif	 
bcdf 7e			.dashscan:	ld a, (hl) 
bce0 fe 00				cp 0 
bce2 28 42				jr z, .nodashswap 
bce4 fe 2d				cp '-' 
bce6 20 03				jr nz, .dashskip 
bce8 3e 20				ld a, ' ' 
bcea 77					ld (hl), a 
bceb 23			.dashskip:	inc hl 
bcec			if DEBUG_FORTH_DOT 
bcec				DMARK "D-2" 
bcec f5				push af  
bced 3a 01 bd			ld a, (.dmark)  
bcf0 32 65 ee			ld (debug_mark),a  
bcf3 3a 02 bd			ld a, (.dmark+1)  
bcf6 32 66 ee			ld (debug_mark+1),a  
bcf9 3a 03 bd			ld a, (.dmark+2)  
bcfc 32 67 ee			ld (debug_mark+2),a  
bcff 18 03			jr .pastdmark  
bd01 ..			.dmark: db "D-2"  
bd04 f1			.pastdmark: pop af  
bd05			endm  
# End of macro DMARK
bd05				CALLMONITOR 
bd05 cd 6f ee			call debug_vector  
bd08				endm  
# End of macro CALLMONITOR
bd08			endif	 
bd08 10 d5				djnz .dashscan 
bd0a			 
bd0a			if DEBUG_FORTH_DOT 
bd0a				DMARK "D-1" 
bd0a f5				push af  
bd0b 3a 1f bd			ld a, (.dmark)  
bd0e 32 65 ee			ld (debug_mark),a  
bd11 3a 20 bd			ld a, (.dmark+1)  
bd14 32 66 ee			ld (debug_mark+1),a  
bd17 3a 21 bd			ld a, (.dmark+2)  
bd1a 32 67 ee			ld (debug_mark+2),a  
bd1d 18 03			jr .pastdmark  
bd1f ..			.dmark: db "D-1"  
bd22 f1			.pastdmark: pop af  
bd23			endm  
# End of macro DMARK
bd23				CALLMONITOR 
bd23 cd 6f ee			call debug_vector  
bd26				endm  
# End of macro CALLMONITOR
bd26			endif	 
bd26			 
bd26			.nodashswap: 
bd26			 
bd26			if DEBUG_FORTH_DOT 
bd26				DMARK "D-o" 
bd26 f5				push af  
bd27 3a 3b bd			ld a, (.dmark)  
bd2a 32 65 ee			ld (debug_mark),a  
bd2d 3a 3c bd			ld a, (.dmark+1)  
bd30 32 66 ee			ld (debug_mark+1),a  
bd33 3a 3d bd			ld a, (.dmark+2)  
bd36 32 67 ee			ld (debug_mark+2),a  
bd39 18 03			jr .pastdmark  
bd3b ..			.dmark: db "D-o"  
bd3e f1			.pastdmark: pop af  
bd3f			endm  
# End of macro DMARK
bd3f				CALLMONITOR 
bd3f cd 6f ee			call debug_vector  
bd42				endm  
# End of macro CALLMONITOR
bd42			endif	 
bd42			 
bd42 d5					push de   ; save string start in case we need to advance print 
bd43			 
bd43 3a 58 ea				ld a, (f_cursor_ptr) 
bd46 cd d0 8a				call str_at_display 
bd49 3a 36 ea				ld a,(cli_autodisplay) 
bd4c fe 00				cp 0 
bd4e 28 03				jr z, .noupdate 
bd50 cd e0 8a						call update_display 
bd53					.noupdate: 
bd53			 
bd53			 
bd53					; see if we need to advance the print position 
bd53			 
bd53 e1					pop hl   ; get back string 
bd54			;		ex de,hl 
bd54			 
bd54 3a 37 ea				ld a, (cli_mvdot) 
bd57			if DEBUG_FORTH_DOT 
bd57			;		ld e,a 
bd57				DMARK "D>1" 
bd57 f5				push af  
bd58 3a 6c bd			ld a, (.dmark)  
bd5b 32 65 ee			ld (debug_mark),a  
bd5e 3a 6d bd			ld a, (.dmark+1)  
bd61 32 66 ee			ld (debug_mark+1),a  
bd64 3a 6e bd			ld a, (.dmark+2)  
bd67 32 67 ee			ld (debug_mark+2),a  
bd6a 18 03			jr .pastdmark  
bd6c ..			.dmark: db "D>1"  
bd6f f1			.pastdmark: pop af  
bd70			endm  
# End of macro DMARK
bd70				CALLMONITOR 
bd70 cd 6f ee			call debug_vector  
bd73				endm  
# End of macro CALLMONITOR
bd73			endif	 
bd73 fe 00				cp 0 
bd75 28 44				jr z, .noadv 
bd77					; yes, lets advance the print position 
bd77 3e 00				ld a, 0 
bd79 cd 5b 90				call strlent 
bd7c			if DEBUG_FORTH_DOT 
bd7c				DMARK "D-?" 
bd7c f5				push af  
bd7d 3a 91 bd			ld a, (.dmark)  
bd80 32 65 ee			ld (debug_mark),a  
bd83 3a 92 bd			ld a, (.dmark+1)  
bd86 32 66 ee			ld (debug_mark+1),a  
bd89 3a 93 bd			ld a, (.dmark+2)  
bd8c 32 67 ee			ld (debug_mark+2),a  
bd8f 18 03			jr .pastdmark  
bd91 ..			.dmark: db "D-?"  
bd94 f1			.pastdmark: pop af  
bd95			endm  
# End of macro DMARK
bd95				CALLMONITOR 
bd95 cd 6f ee			call debug_vector  
bd98				endm  
# End of macro CALLMONITOR
bd98			endif	 
bd98 3a 58 ea				ld a, (f_cursor_ptr) 
bd9b 85					add a,l 
bd9c					;call addatohl 
bd9c					;ld a, l 
bd9c 32 58 ea				ld (f_cursor_ptr), a   ; save new pos 
bd9f			 
bd9f			if DEBUG_FORTH_DOT 
bd9f				DMARK "D->" 
bd9f f5				push af  
bda0 3a b4 bd			ld a, (.dmark)  
bda3 32 65 ee			ld (debug_mark),a  
bda6 3a b5 bd			ld a, (.dmark+1)  
bda9 32 66 ee			ld (debug_mark+1),a  
bdac 3a b6 bd			ld a, (.dmark+2)  
bdaf 32 67 ee			ld (debug_mark+2),a  
bdb2 18 03			jr .pastdmark  
bdb4 ..			.dmark: db "D->"  
bdb7 f1			.pastdmark: pop af  
bdb8			endm  
# End of macro DMARK
bdb8				CALLMONITOR 
bdb8 cd 6f ee			call debug_vector  
bdbb				endm  
# End of macro CALLMONITOR
bdbb			endif	 
bdbb			 
bdbb			.noadv:	 
bdbb			 
bdbb					if DEBUG_FORTH_DOT_WAIT 
bdbb							call next_page_prompt 
bdbb					endif	 
bdbb			; TODO this pop off the stack causes a crash. i dont know why 
bdbb			 
bdbb			 
bdbb			if DEBUG_FORTH_DOT 
bdbb				DMARK "DTh" 
bdbb f5				push af  
bdbc 3a d0 bd			ld a, (.dmark)  
bdbf 32 65 ee			ld (debug_mark),a  
bdc2 3a d1 bd			ld a, (.dmark+1)  
bdc5 32 66 ee			ld (debug_mark+1),a  
bdc8 3a d2 bd			ld a, (.dmark+2)  
bdcb 32 67 ee			ld (debug_mark+2),a  
bdce 18 03			jr .pastdmark  
bdd0 ..			.dmark: db "DTh"  
bdd3 f1			.pastdmark: pop af  
bdd4			endm  
# End of macro DMARK
bdd4				CALLMONITOR 
bdd4 cd 6f ee			call debug_vector  
bdd7				endm  
# End of macro CALLMONITOR
bdd7			endif	 
bdd7			 
bdd7					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bdd7 cd 42 9d			call macro_forth_dsp_pop 
bdda				endm 
# End of macro FORTH_DSP_POP
bdda			 
bdda			if DEBUG_FORTH_DOT 
bdda				DMARK "DTi" 
bdda f5				push af  
bddb 3a ef bd			ld a, (.dmark)  
bdde 32 65 ee			ld (debug_mark),a  
bde1 3a f0 bd			ld a, (.dmark+1)  
bde4 32 66 ee			ld (debug_mark+1),a  
bde7 3a f1 bd			ld a, (.dmark+2)  
bdea 32 67 ee			ld (debug_mark+2),a  
bded 18 03			jr .pastdmark  
bdef ..			.dmark: db "DTi"  
bdf2 f1			.pastdmark: pop af  
bdf3			endm  
# End of macro DMARK
bdf3				CALLMONITOR 
bdf3 cd 6f ee			call debug_vector  
bdf6				endm  
# End of macro CALLMONITOR
bdf6			endif	 
bdf6			 
bdf6			 
bdf6					NEXTW 
bdf6 c3 76 9e			jp macro_next 
bdf9				endm 
# End of macro NEXTW
bdf9			 
bdf9			.CLS: 
bdf9				CWHEAD .DRAW 33 "CLS" 3 WORD_FLAG_CODE 
bdf9 35				db WORD_SYS_CORE+33             
bdfa 26 be			dw .DRAW            
bdfc 04				db 3 + 1 
bdfd .. 00			db "CLS",0              
be01				endm 
# End of macro CWHEAD
be01			; | CLS ( -- ) Clear current frame buffer and set next print position to top left corner  | DONE 
be01					if DEBUG_FORTH_WORDS_KEY 
be01						DMARK "CLS" 
be01 f5				push af  
be02 3a 16 be			ld a, (.dmark)  
be05 32 65 ee			ld (debug_mark),a  
be08 3a 17 be			ld a, (.dmark+1)  
be0b 32 66 ee			ld (debug_mark+1),a  
be0e 3a 18 be			ld a, (.dmark+2)  
be11 32 67 ee			ld (debug_mark+2),a  
be14 18 03			jr .pastdmark  
be16 ..			.dmark: db "CLS"  
be19 f1			.pastdmark: pop af  
be1a			endm  
# End of macro DMARK
be1a						CALLMONITOR 
be1a cd 6f ee			call debug_vector  
be1d				endm  
# End of macro CALLMONITOR
be1d					endif 
be1d cd bd 8a				call clear_display 
be20 c3 34 bf				jp .home		; and home cursor 
be23					NEXTW 
be23 c3 76 9e			jp macro_next 
be26				endm 
# End of macro NEXTW
be26			 
be26			.DRAW: 
be26				CWHEAD .DUMP 34 "DRAW" 4 WORD_FLAG_CODE 
be26 36				db WORD_SYS_CORE+34             
be27 51 be			dw .DUMP            
be29 05				db 4 + 1 
be2a .. 00			db "DRAW",0              
be2f				endm 
# End of macro CWHEAD
be2f			; | DRAW ( -- ) Draw contents of current frame buffer  | DONE 
be2f					if DEBUG_FORTH_WORDS_KEY 
be2f						DMARK "DRW" 
be2f f5				push af  
be30 3a 44 be			ld a, (.dmark)  
be33 32 65 ee			ld (debug_mark),a  
be36 3a 45 be			ld a, (.dmark+1)  
be39 32 66 ee			ld (debug_mark+1),a  
be3c 3a 46 be			ld a, (.dmark+2)  
be3f 32 67 ee			ld (debug_mark+2),a  
be42 18 03			jr .pastdmark  
be44 ..			.dmark: db "DRW"  
be47 f1			.pastdmark: pop af  
be48			endm  
# End of macro DMARK
be48						CALLMONITOR 
be48 cd 6f ee			call debug_vector  
be4b				endm  
# End of macro CALLMONITOR
be4b					endif 
be4b cd e0 8a				call update_display 
be4e					NEXTW 
be4e c3 76 9e			jp macro_next 
be51				endm 
# End of macro NEXTW
be51			 
be51			.DUMP: 
be51				CWHEAD .CDUMP 35 "DUMP" 4 WORD_FLAG_CODE 
be51 37				db WORD_SYS_CORE+35             
be52 89 be			dw .CDUMP            
be54 05				db 4 + 1 
be55 .. 00			db "DUMP",0              
be5a				endm 
# End of macro CWHEAD
be5a			; | DUMP ( x -- ) With address x display dump   | DONE 
be5a			; TODO pop address to use off of the stack 
be5a					if DEBUG_FORTH_WORDS_KEY 
be5a						DMARK "DUM" 
be5a f5				push af  
be5b 3a 6f be			ld a, (.dmark)  
be5e 32 65 ee			ld (debug_mark),a  
be61 3a 70 be			ld a, (.dmark+1)  
be64 32 66 ee			ld (debug_mark+1),a  
be67 3a 71 be			ld a, (.dmark+2)  
be6a 32 67 ee			ld (debug_mark+2),a  
be6d 18 03			jr .pastdmark  
be6f ..			.dmark: db "DUM"  
be72 f1			.pastdmark: pop af  
be73			endm  
# End of macro DMARK
be73						CALLMONITOR 
be73 cd 6f ee			call debug_vector  
be76				endm  
# End of macro CALLMONITOR
be76					endif 
be76 cd bd 8a				call clear_display 
be79			 
be79					; get address 
be79			 
be79					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
be79 cd 8a 9c			call macro_dsp_valuehl 
be7c				endm 
# End of macro FORTH_DSP_VALUEHL
be7c				 
be7c					; save it for cdump 
be7c			 
be7c 22 de e5				ld (os_cur_ptr),hl 
be7f			 
be7f					; destroy value TOS 
be7f			 
be7f					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
be7f cd 42 9d			call macro_forth_dsp_pop 
be82				endm 
# End of macro FORTH_DSP_POP
be82			 
be82 cd 05 99				call dumpcont	; skip old style of param parsing	 
be85 c9					ret			; TODO command causes end of remaining parsing so cant do: $0000 DUMP $8000 DUMP 
be86					NEXTW 
be86 c3 76 9e			jp macro_next 
be89				endm 
# End of macro NEXTW
be89			.CDUMP: 
be89				CWHEAD .DAT 36 "CDUMP" 5 WORD_FLAG_CODE 
be89 38				db WORD_SYS_CORE+36             
be8a b9 be			dw .DAT            
be8c 06				db 5 + 1 
be8d .. 00			db "CDUMP",0              
be93				endm 
# End of macro CWHEAD
be93			; | CDUMP ( -- ) Continue dump of memory from DUMP | DONE 
be93					if DEBUG_FORTH_WORDS_KEY 
be93						DMARK "CDP" 
be93 f5				push af  
be94 3a a8 be			ld a, (.dmark)  
be97 32 65 ee			ld (debug_mark),a  
be9a 3a a9 be			ld a, (.dmark+1)  
be9d 32 66 ee			ld (debug_mark+1),a  
bea0 3a aa be			ld a, (.dmark+2)  
bea3 32 67 ee			ld (debug_mark+2),a  
bea6 18 03			jr .pastdmark  
bea8 ..			.dmark: db "CDP"  
beab f1			.pastdmark: pop af  
beac			endm  
# End of macro DMARK
beac						CALLMONITOR 
beac cd 6f ee			call debug_vector  
beaf				endm  
# End of macro CALLMONITOR
beaf					endif 
beaf cd bd 8a				call clear_display 
beb2 cd 05 99				call dumpcont	 
beb5 c9					ret			; TODO command causes end of remaining parsing so cant do: $0000 DUMP CDUMP $8000 DUMP 
beb6					NEXTW 
beb6 c3 76 9e			jp macro_next 
beb9				endm 
# End of macro NEXTW
beb9			 
beb9			 
beb9			 
beb9			 
beb9			.DAT: 
beb9				CWHEAD .HOME 41 "AT" 2 WORD_FLAG_CODE 
beb9 3d				db WORD_SYS_CORE+41             
beba 0f bf			dw .HOME            
bebc 03				db 2 + 1 
bebd .. 00			db "AT",0              
bec0				endm 
# End of macro CWHEAD
bec0			; | AT ( u1 u2 -- ) Set next output via . or emit at row u2 col u1 | DONE 
bec0					if DEBUG_FORTH_WORDS_KEY 
bec0						DMARK "AT." 
bec0 f5				push af  
bec1 3a d5 be			ld a, (.dmark)  
bec4 32 65 ee			ld (debug_mark),a  
bec7 3a d6 be			ld a, (.dmark+1)  
beca 32 66 ee			ld (debug_mark+1),a  
becd 3a d7 be			ld a, (.dmark+2)  
bed0 32 67 ee			ld (debug_mark+2),a  
bed3 18 03			jr .pastdmark  
bed5 ..			.dmark: db "AT."  
bed8 f1			.pastdmark: pop af  
bed9			endm  
# End of macro DMARK
bed9						CALLMONITOR 
bed9 cd 6f ee			call debug_vector  
bedc				endm  
# End of macro CALLMONITOR
bedc					endif 
bedc					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
bedc cd 8a 9c			call macro_dsp_valuehl 
bedf				endm 
# End of macro FORTH_DSP_VALUEHL
bedf			 
bedf			 
bedf					; TODO save cursor row 
bedf 7d					ld a,l 
bee0 fe 02				cp 2 
bee2 20 04				jr nz, .crow3 
bee4 3e 28				ld a, display_row_2 
bee6 18 12				jr .ccol1 
bee8 fe 03		.crow3:		cp 3 
beea 20 04				jr nz, .crow4 
beec 3e 50				ld a, display_row_3 
beee 18 0a				jr .ccol1 
bef0 fe 04		.crow4:		cp 4 
bef2 20 04				jr nz, .crow1 
bef4 3e 78				ld a, display_row_4 
bef6 18 02				jr .ccol1 
bef8 3e 00		.crow1:		ld a,display_row_1 
befa f5			.ccol1:		push af			; got row offset 
befb 6f					ld l,a 
befc 26 00				ld h,0 
befe					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
befe cd 42 9d			call macro_forth_dsp_pop 
bf01				endm 
# End of macro FORTH_DSP_POP
bf01					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
bf01 cd 8a 9c			call macro_dsp_valuehl 
bf04				endm 
# End of macro FORTH_DSP_VALUEHL
bf04					; TODO save cursor col 
bf04 f1					pop af 
bf05 85					add l		; add col offset 
bf06 32 58 ea				ld (f_cursor_ptr), a 
bf09					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bf09 cd 42 9d			call macro_forth_dsp_pop 
bf0c				endm 
# End of macro FORTH_DSP_POP
bf0c			 
bf0c					; calculate  
bf0c			 
bf0c					NEXTW 
bf0c c3 76 9e			jp macro_next 
bf0f				endm 
# End of macro NEXTW
bf0f			 
bf0f			 
bf0f			.HOME: 
bf0f				CWHEAD .CR 45 "HOME" 4 WORD_FLAG_CODE 
bf0f 41				db WORD_SYS_CORE+45             
bf10 3c bf			dw .CR            
bf12 05				db 4 + 1 
bf13 .. 00			db "HOME",0              
bf18				endm 
# End of macro CWHEAD
bf18			; | HOME ( -- ) Reset the current cursor for output to home | DONE 
bf18					if DEBUG_FORTH_WORDS_KEY 
bf18						DMARK "HOM" 
bf18 f5				push af  
bf19 3a 2d bf			ld a, (.dmark)  
bf1c 32 65 ee			ld (debug_mark),a  
bf1f 3a 2e bf			ld a, (.dmark+1)  
bf22 32 66 ee			ld (debug_mark+1),a  
bf25 3a 2f bf			ld a, (.dmark+2)  
bf28 32 67 ee			ld (debug_mark+2),a  
bf2b 18 03			jr .pastdmark  
bf2d ..			.dmark: db "HOM"  
bf30 f1			.pastdmark: pop af  
bf31			endm  
# End of macro DMARK
bf31						CALLMONITOR 
bf31 cd 6f ee			call debug_vector  
bf34				endm  
# End of macro CALLMONITOR
bf34					endif 
bf34 3e 00		.home:		ld a, 0		; and home cursor 
bf36 32 58 ea				ld (f_cursor_ptr), a 
bf39					NEXTW 
bf39 c3 76 9e			jp macro_next 
bf3c				endm 
# End of macro NEXTW
bf3c			 
bf3c			 
bf3c			.CR: 
bf3c				CWHEAD .SPACE 50 "CR" 2 WORD_FLAG_CODE 
bf3c 46				db WORD_SYS_CORE+50             
bf3d 77 bf			dw .SPACE            
bf3f 03				db 2 + 1 
bf40 .. 00			db "CR",0              
bf43				endm 
# End of macro CWHEAD
bf43			; | CR (  -- s ) Push CR/LF pair onto the stack as a string  | DONE 
bf43					if DEBUG_FORTH_WORDS_KEY 
bf43						DMARK "CR." 
bf43 f5				push af  
bf44 3a 58 bf			ld a, (.dmark)  
bf47 32 65 ee			ld (debug_mark),a  
bf4a 3a 59 bf			ld a, (.dmark+1)  
bf4d 32 66 ee			ld (debug_mark+1),a  
bf50 3a 5a bf			ld a, (.dmark+2)  
bf53 32 67 ee			ld (debug_mark+2),a  
bf56 18 03			jr .pastdmark  
bf58 ..			.dmark: db "CR."  
bf5b f1			.pastdmark: pop af  
bf5c			endm  
# End of macro DMARK
bf5c						CALLMONITOR 
bf5c cd 6f ee			call debug_vector  
bf5f				endm  
# End of macro CALLMONITOR
bf5f					endif 
bf5f 3e 0d				ld a, 13 
bf61 32 bb e2				ld (scratch),a 
bf64 3e 0a				ld a, 10 
bf66 32 bc e2				ld (scratch+1),a 
bf69 3e 00				ld a, 0 
bf6b 32 bd e2				ld (scratch+2),a 
bf6e 21 bb e2				ld hl, scratch 
bf71 cd f3 9a				call forth_push_str 
bf74					 
bf74				       NEXTW 
bf74 c3 76 9e			jp macro_next 
bf77				endm 
# End of macro NEXTW
bf77			.SPACE: 
bf77				CWHEAD .SPACES 50 "BL" 2 WORD_FLAG_CODE 
bf77 46				db WORD_SYS_CORE+50             
bf78 ad bf			dw .SPACES            
bf7a 03				db 2 + 1 
bf7b .. 00			db "BL",0              
bf7e				endm 
# End of macro CWHEAD
bf7e			; | BL (  -- c ) Push the value of space onto the stack as a string  | DONE 
bf7e					if DEBUG_FORTH_WORDS_KEY 
bf7e						DMARK "BL." 
bf7e f5				push af  
bf7f 3a 93 bf			ld a, (.dmark)  
bf82 32 65 ee			ld (debug_mark),a  
bf85 3a 94 bf			ld a, (.dmark+1)  
bf88 32 66 ee			ld (debug_mark+1),a  
bf8b 3a 95 bf			ld a, (.dmark+2)  
bf8e 32 67 ee			ld (debug_mark+2),a  
bf91 18 03			jr .pastdmark  
bf93 ..			.dmark: db "BL."  
bf96 f1			.pastdmark: pop af  
bf97			endm  
# End of macro DMARK
bf97						CALLMONITOR 
bf97 cd 6f ee			call debug_vector  
bf9a				endm  
# End of macro CALLMONITOR
bf9a					endif 
bf9a 3e 20				ld a, " " 
bf9c 32 bb e2				ld (scratch),a 
bf9f 3e 00				ld a, 0 
bfa1 32 bc e2				ld (scratch+1),a 
bfa4 21 bb e2				ld hl, scratch 
bfa7 cd f3 9a				call forth_push_str 
bfaa					 
bfaa				       NEXTW 
bfaa c3 76 9e			jp macro_next 
bfad				endm 
# End of macro NEXTW
bfad			 
bfad			;.blstr: db " ", 0 
bfad			 
bfad			.SPACES: 
bfad				CWHEAD .SCROLL 51 "SPACES" 6 WORD_FLAG_CODE 
bfad 47				db WORD_SYS_CORE+51             
bfae 48 c0			dw .SCROLL            
bfb0 07				db 6 + 1 
bfb1 .. 00			db "SPACES",0              
bfb8				endm 
# End of macro CWHEAD
bfb8			; | SPACES ( u -- str ) A string of u spaces is pushed onto the stack | DONE 
bfb8					if DEBUG_FORTH_WORDS_KEY 
bfb8						DMARK "SPS" 
bfb8 f5				push af  
bfb9 3a cd bf			ld a, (.dmark)  
bfbc 32 65 ee			ld (debug_mark),a  
bfbf 3a ce bf			ld a, (.dmark+1)  
bfc2 32 66 ee			ld (debug_mark+1),a  
bfc5 3a cf bf			ld a, (.dmark+2)  
bfc8 32 67 ee			ld (debug_mark+2),a  
bfcb 18 03			jr .pastdmark  
bfcd ..			.dmark: db "SPS"  
bfd0 f1			.pastdmark: pop af  
bfd1			endm  
# End of macro DMARK
bfd1						CALLMONITOR 
bfd1 cd 6f ee			call debug_vector  
bfd4				endm  
# End of macro CALLMONITOR
bfd4					endif 
bfd4			 
bfd4			 
bfd4					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
bfd4 cd 8a 9c			call macro_dsp_valuehl 
bfd7				endm 
# End of macro FORTH_DSP_VALUEHL
bfd7			 
bfd7 e5					push hl    ; u 
bfd8					if DEBUG_FORTH_WORDS 
bfd8						DMARK "SPA" 
bfd8 f5				push af  
bfd9 3a ed bf			ld a, (.dmark)  
bfdc 32 65 ee			ld (debug_mark),a  
bfdf 3a ee bf			ld a, (.dmark+1)  
bfe2 32 66 ee			ld (debug_mark+1),a  
bfe5 3a ef bf			ld a, (.dmark+2)  
bfe8 32 67 ee			ld (debug_mark+2),a  
bfeb 18 03			jr .pastdmark  
bfed ..			.dmark: db "SPA"  
bff0 f1			.pastdmark: pop af  
bff1			endm  
# End of macro DMARK
bff1						CALLMONITOR 
bff1 cd 6f ee			call debug_vector  
bff4				endm  
# End of macro CALLMONITOR
bff4					endif 
bff4			 
bff4					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bff4 cd 42 9d			call macro_forth_dsp_pop 
bff7				endm 
# End of macro FORTH_DSP_POP
bff7 e1					pop hl 
bff8 0e 00				ld c, 0 
bffa 45					ld b, l 
bffb 21 bb e2				ld hl, scratch  
bffe			 
bffe					if DEBUG_FORTH_WORDS 
bffe						DMARK "SP2" 
bffe f5				push af  
bfff 3a 13 c0			ld a, (.dmark)  
c002 32 65 ee			ld (debug_mark),a  
c005 3a 14 c0			ld a, (.dmark+1)  
c008 32 66 ee			ld (debug_mark+1),a  
c00b 3a 15 c0			ld a, (.dmark+2)  
c00e 32 67 ee			ld (debug_mark+2),a  
c011 18 03			jr .pastdmark  
c013 ..			.dmark: db "SP2"  
c016 f1			.pastdmark: pop af  
c017			endm  
# End of macro DMARK
c017						CALLMONITOR 
c017 cd 6f ee			call debug_vector  
c01a				endm  
# End of macro CALLMONITOR
c01a					endif 
c01a 3e 20				ld a, ' ' 
c01c			.spaces1:	 
c01c 77					ld (hl),a 
c01d 23					inc hl 
c01e					 
c01e 10 fc				djnz .spaces1 
c020 3e 00				ld a,0 
c022 77					ld (hl),a 
c023 21 bb e2				ld hl, scratch 
c026					if DEBUG_FORTH_WORDS 
c026						DMARK "SP3" 
c026 f5				push af  
c027 3a 3b c0			ld a, (.dmark)  
c02a 32 65 ee			ld (debug_mark),a  
c02d 3a 3c c0			ld a, (.dmark+1)  
c030 32 66 ee			ld (debug_mark+1),a  
c033 3a 3d c0			ld a, (.dmark+2)  
c036 32 67 ee			ld (debug_mark+2),a  
c039 18 03			jr .pastdmark  
c03b ..			.dmark: db "SP3"  
c03e f1			.pastdmark: pop af  
c03f			endm  
# End of macro DMARK
c03f						CALLMONITOR 
c03f cd 6f ee			call debug_vector  
c042				endm  
# End of macro CALLMONITOR
c042					endif 
c042 cd f3 9a				call forth_push_str 
c045			 
c045				       NEXTW 
c045 c3 76 9e			jp macro_next 
c048				endm 
# End of macro NEXTW
c048			 
c048			 
c048			 
c048			.SCROLL: 
c048				CWHEAD .SCROLLD 63 "SCROLL" 6 WORD_FLAG_CODE 
c048 53				db WORD_SYS_CORE+63             
c049 75 c0			dw .SCROLLD            
c04b 07				db 6 + 1 
c04c .. 00			db "SCROLL",0              
c053				endm 
# End of macro CWHEAD
c053			; | SCROLL ( -- ) Scroll up one line - next write will update if required | DONE 
c053					if DEBUG_FORTH_WORDS_KEY 
c053						DMARK "SCR" 
c053 f5				push af  
c054 3a 68 c0			ld a, (.dmark)  
c057 32 65 ee			ld (debug_mark),a  
c05a 3a 69 c0			ld a, (.dmark+1)  
c05d 32 66 ee			ld (debug_mark+1),a  
c060 3a 6a c0			ld a, (.dmark+2)  
c063 32 67 ee			ld (debug_mark+2),a  
c066 18 03			jr .pastdmark  
c068 ..			.dmark: db "SCR"  
c06b f1			.pastdmark: pop af  
c06c			endm  
# End of macro DMARK
c06c						CALLMONITOR 
c06c cd 6f ee			call debug_vector  
c06f				endm  
# End of macro CALLMONITOR
c06f					endif 
c06f			 
c06f cd 7f 8a			call scroll_up 
c072			;	call update_display 
c072			 
c072					NEXTW 
c072 c3 76 9e			jp macro_next 
c075				endm 
# End of macro NEXTW
c075			 
c075			 
c075			 
c075			;		; get dir 
c075			; 
c075			;		FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
c075			; 
c075			;		push hl 
c075			; 
c075			;		; destroy value TOS 
c075			; 
c075			;		FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c075			; 
c075			;		; get count 
c075			; 
c075			;		FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
c075			; 
c075			;		push hl 
c075			; 
c075			;		; destroy value TOS 
c075			; 
c075			;		FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c075			; 
c075			;		; one value on hl get other one back 
c075			; 
c075			;		pop bc    ; count 
c075			; 
c075			;		pop de   ; dir 
c075			; 
c075			; 
c075			;		ld b, c 
c075			; 
c075			;.scrolldir:     push bc 
c075			;		push de 
c075			; 
c075			;		ld a, 0 
c075			;		cp e 
c075			;		jr z, .scrollup  
c075			;		call scroll_down 
c075			;		jr .scrollnext 
c075			;.scrollup:	call scroll_up 
c075			; 
c075			;		 
c075			;.scrollnext: 
c075			;		pop de 
c075			;		pop bc 
c075			;		djnz .scrolldir 
c075			; 
c075			; 
c075			; 
c075			; 
c075			; 
c075			;		NEXTW 
c075			 
c075			.SCROLLD: 
c075				CWHEAD .ATQ 63 "SCROLLD" 7 WORD_FLAG_CODE 
c075 53				db WORD_SYS_CORE+63             
c076 a3 c0			dw .ATQ            
c078 08				db 7 + 1 
c079 .. 00			db "SCROLLD",0              
c081				endm 
# End of macro CWHEAD
c081			; | SCROLLD ( -- ) Scroll down one line - next write will update if required | TO DO 
c081					if DEBUG_FORTH_WORDS_KEY 
c081						DMARK "SCD" 
c081 f5				push af  
c082 3a 96 c0			ld a, (.dmark)  
c085 32 65 ee			ld (debug_mark),a  
c088 3a 97 c0			ld a, (.dmark+1)  
c08b 32 66 ee			ld (debug_mark+1),a  
c08e 3a 98 c0			ld a, (.dmark+2)  
c091 32 67 ee			ld (debug_mark+2),a  
c094 18 03			jr .pastdmark  
c096 ..			.dmark: db "SCD"  
c099 f1			.pastdmark: pop af  
c09a			endm  
# End of macro DMARK
c09a						CALLMONITOR 
c09a cd 6f ee			call debug_vector  
c09d				endm  
# End of macro CALLMONITOR
c09d					endif 
c09d			 
c09d cd a3 8a			call scroll_down 
c0a0			;	call update_display 
c0a0			 
c0a0					NEXTW 
c0a0 c3 76 9e			jp macro_next 
c0a3				endm 
# End of macro NEXTW
c0a3			 
c0a3			 
c0a3			.ATQ: 
c0a3				CWHEAD .AUTODSP 78 "AT@" 3 WORD_FLAG_CODE 
c0a3 62				db WORD_SYS_CORE+78             
c0a4 01 c1			dw .AUTODSP            
c0a6 04				db 3 + 1 
c0a7 .. 00			db "AT@",0              
c0ab				endm 
# End of macro CWHEAD
c0ab			; | AT@ ( u1 u2 -- n ) Push to stack ASCII value at row u2 col u1 | DONE 
c0ab					if DEBUG_FORTH_WORDS_KEY 
c0ab						DMARK "ATA" 
c0ab f5				push af  
c0ac 3a c0 c0			ld a, (.dmark)  
c0af 32 65 ee			ld (debug_mark),a  
c0b2 3a c1 c0			ld a, (.dmark+1)  
c0b5 32 66 ee			ld (debug_mark+1),a  
c0b8 3a c2 c0			ld a, (.dmark+2)  
c0bb 32 67 ee			ld (debug_mark+2),a  
c0be 18 03			jr .pastdmark  
c0c0 ..			.dmark: db "ATA"  
c0c3 f1			.pastdmark: pop af  
c0c4			endm  
# End of macro DMARK
c0c4						CALLMONITOR 
c0c4 cd 6f ee			call debug_vector  
c0c7				endm  
# End of macro CALLMONITOR
c0c7					endif 
c0c7			 
c0c7			 
c0c7					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
c0c7 cd 8a 9c			call macro_dsp_valuehl 
c0ca				endm 
# End of macro FORTH_DSP_VALUEHL
c0ca			 
c0ca					; TODO save cursor row 
c0ca 7d					ld a,l 
c0cb fe 02				cp 2 
c0cd 20 04				jr nz, .crow3aq 
c0cf 3e 28				ld a, display_row_2 
c0d1 18 12				jr .ccol1aq 
c0d3 fe 03		.crow3aq:		cp 3 
c0d5 20 04				jr nz, .crow4aq 
c0d7 3e 50				ld a, display_row_3 
c0d9 18 0a				jr .ccol1aq 
c0db fe 04		.crow4aq:		cp 4 
c0dd 20 04				jr nz, .crow1aq 
c0df 3e 78				ld a, display_row_4 
c0e1 18 02				jr .ccol1aq 
c0e3 3e 00		.crow1aq:		ld a,display_row_1 
c0e5 f5			.ccol1aq:		push af			; got row offset 
c0e6 6f					ld l,a 
c0e7 26 00				ld h,0 
c0e9					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c0e9 cd 42 9d			call macro_forth_dsp_pop 
c0ec				endm 
# End of macro FORTH_DSP_POP
c0ec					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
c0ec cd 8a 9c			call macro_dsp_valuehl 
c0ef				endm 
# End of macro FORTH_DSP_VALUEHL
c0ef					; TODO save cursor col 
c0ef f1					pop af 
c0f0 85					add l		; add col offset 
c0f1			 
c0f1					; add current frame buffer address 
c0f1 2a c6 eb				ld hl, (display_fb_active) 
c0f4 cd ea 8c				call addatohl 
c0f7			 
c0f7			 
c0f7			 
c0f7			 
c0f7					; get char frame buffer location offset in hl 
c0f7			 
c0f7 7e					ld a,(hl) 
c0f8 26 00				ld h, 0 
c0fa 6f					ld l, a 
c0fb			 
c0fb cd 85 9a				call forth_push_numhl 
c0fe			 
c0fe			 
c0fe					NEXTW 
c0fe c3 76 9e			jp macro_next 
c101				endm 
# End of macro NEXTW
c101			 
c101			.AUTODSP: 
c101				CWHEAD .MENU 79 "ADSP" 4 WORD_FLAG_CODE 
c101 63				db WORD_SYS_CORE+79             
c102 17 c1			dw .MENU            
c104 05				db 4 + 1 
c105 .. 00			db "ADSP",0              
c10a				endm 
# End of macro CWHEAD
c10a			; | ADSP ( u1 --  ) Enable/Disable Auto screen updates (SLOW). | DONE 
c10a			; | | If off, use DRAW to refresh. Default is on. $0003 will enable direct screen writes (TODO)  
c10a			 
c10a					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
c10a cd 8a 9c			call macro_dsp_valuehl 
c10d				endm 
# End of macro FORTH_DSP_VALUEHL
c10d			 
c10d			;		push hl 
c10d			 
c10d					; destroy value TOS 
c10d			 
c10d					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c10d cd 42 9d			call macro_forth_dsp_pop 
c110				endm 
# End of macro FORTH_DSP_POP
c110			 
c110			;		pop hl 
c110			 
c110 7d					ld a,l 
c111 32 36 ea				ld (cli_autodisplay), a 
c114				       NEXTW 
c114 c3 76 9e			jp macro_next 
c117				endm 
# End of macro NEXTW
c117			 
c117			.MENU: 
c117				CWHEAD .ENDDISPLAY 92 "MENU" 4 WORD_FLAG_CODE 
c117 70				db WORD_SYS_CORE+92             
c118 c0 c1			dw .ENDDISPLAY            
c11a 05				db 4 + 1 
c11b .. 00			db "MENU",0              
c120				endm 
# End of macro CWHEAD
c120			; | MENU ( u1....ux n -- n ) Create a menu. n is the number of menu items on stack. Push number selection to TOS | DONE 
c120			 
c120			;		; get number of items on the stack 
c120			; 
c120				 
c120					FORTH_DSP_VALUEHL 
c120 cd 8a 9c			call macro_dsp_valuehl 
c123				endm 
# End of macro FORTH_DSP_VALUEHL
c123				 
c123					if DEBUG_FORTH_WORDS_KEY 
c123						DMARK "MNU" 
c123 f5				push af  
c124 3a 38 c1			ld a, (.dmark)  
c127 32 65 ee			ld (debug_mark),a  
c12a 3a 39 c1			ld a, (.dmark+1)  
c12d 32 66 ee			ld (debug_mark+1),a  
c130 3a 3a c1			ld a, (.dmark+2)  
c133 32 67 ee			ld (debug_mark+2),a  
c136 18 03			jr .pastdmark  
c138 ..			.dmark: db "MNU"  
c13b f1			.pastdmark: pop af  
c13c			endm  
# End of macro DMARK
c13c						CALLMONITOR 
c13c cd 6f ee			call debug_vector  
c13f				endm  
# End of macro CALLMONITOR
c13f					endif 
c13f			 
c13f 45					ld b, l	 
c140 05					dec b 
c141			 
c141					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c141 cd 42 9d			call macro_forth_dsp_pop 
c144				endm 
# End of macro FORTH_DSP_POP
c144			 
c144			 
c144					; go directly through the stack to pluck out the string pointers and build an array 
c144			 
c144			;		FORTH_DSP 
c144			 
c144					; hl contains top most stack item 
c144				 
c144 11 bb e2				ld de, scratch 
c147			 
c147			.mbuild: 
c147			 
c147					FORTH_DSP_VALUEHL 
c147 cd 8a 9c			call macro_dsp_valuehl 
c14a				endm 
# End of macro FORTH_DSP_VALUEHL
c14a			 
c14a					if DEBUG_FORTH_WORDS 
c14a						DMARK "MN3" 
c14a f5				push af  
c14b 3a 5f c1			ld a, (.dmark)  
c14e 32 65 ee			ld (debug_mark),a  
c151 3a 60 c1			ld a, (.dmark+1)  
c154 32 66 ee			ld (debug_mark+1),a  
c157 3a 61 c1			ld a, (.dmark+2)  
c15a 32 67 ee			ld (debug_mark+2),a  
c15d 18 03			jr .pastdmark  
c15f ..			.dmark: db "MN3"  
c162 f1			.pastdmark: pop af  
c163			endm  
# End of macro DMARK
c163						CALLMONITOR 
c163 cd 6f ee			call debug_vector  
c166				endm  
# End of macro CALLMONITOR
c166					endif 
c166 eb					ex de, hl 
c167 73					ld (hl), e 
c168 23					inc hl 
c169 72					ld (hl), d 
c16a 23					inc hl 
c16b eb					ex de, hl 
c16c			 
c16c					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c16c cd 42 9d			call macro_forth_dsp_pop 
c16f				endm 
# End of macro FORTH_DSP_POP
c16f			 
c16f 10 d6				djnz .mbuild 
c171			 
c171					; done add term 
c171			 
c171 eb					ex de, hl 
c172 36 00				ld (hl), 0 
c174 23					inc hl 
c175 36 00				ld (hl), 0 
c177			 
c177				 
c177					 
c177 21 bb e2				ld hl, scratch 
c17a			 
c17a					if DEBUG_FORTH_WORDS 
c17a						DMARK "MNx" 
c17a f5				push af  
c17b 3a 8f c1			ld a, (.dmark)  
c17e 32 65 ee			ld (debug_mark),a  
c181 3a 90 c1			ld a, (.dmark+1)  
c184 32 66 ee			ld (debug_mark+1),a  
c187 3a 91 c1			ld a, (.dmark+2)  
c18a 32 67 ee			ld (debug_mark+2),a  
c18d 18 03			jr .pastdmark  
c18f ..			.dmark: db "MNx"  
c192 f1			.pastdmark: pop af  
c193			endm  
# End of macro DMARK
c193						CALLMONITOR 
c193 cd 6f ee			call debug_vector  
c196				endm  
# End of macro CALLMONITOR
c196					endif 
c196			 
c196			 
c196			 
c196 3e 00				ld a, 0 
c198 cd ee 8a				call menu 
c19b			 
c19b			 
c19b 6f					ld l, a 
c19c 26 00				ld h, 0 
c19e			 
c19e					if DEBUG_FORTH_WORDS 
c19e						DMARK "MNr" 
c19e f5				push af  
c19f 3a b3 c1			ld a, (.dmark)  
c1a2 32 65 ee			ld (debug_mark),a  
c1a5 3a b4 c1			ld a, (.dmark+1)  
c1a8 32 66 ee			ld (debug_mark+1),a  
c1ab 3a b5 c1			ld a, (.dmark+2)  
c1ae 32 67 ee			ld (debug_mark+2),a  
c1b1 18 03			jr .pastdmark  
c1b3 ..			.dmark: db "MNr"  
c1b6 f1			.pastdmark: pop af  
c1b7			endm  
# End of macro DMARK
c1b7						CALLMONITOR 
c1b7 cd 6f ee			call debug_vector  
c1ba				endm  
# End of macro CALLMONITOR
c1ba					endif 
c1ba			 
c1ba cd 85 9a				call forth_push_numhl 
c1bd			 
c1bd			 
c1bd			 
c1bd			 
c1bd				       NEXTW 
c1bd c3 76 9e			jp macro_next 
c1c0				endm 
# End of macro NEXTW
c1c0			 
c1c0			 
c1c0			.ENDDISPLAY: 
c1c0			 
c1c0			; eof 
# End of file forth_words_display.asm
c1c0			include "forth_words_str.asm" 
c1c0			 
c1c0			; | ## String Words 
c1c0			 
c1c0			.SPLIT:   
c1c0			 
c1c0				CWHEAD .PTR 52 "SPLIT" 5 WORD_FLAG_CODE 
c1c0 48				db WORD_SYS_CORE+52             
c1c1 b5 c2			dw .PTR            
c1c3 06				db 5 + 1 
c1c4 .. 00			db "SPLIT",0              
c1ca				endm 
# End of macro CWHEAD
c1ca			; | SPLIT ( s d -- s s...sn c ) Using delimter d, add strings found in s to stack pushing item count c | DONE 
c1ca					if DEBUG_FORTH_WORDS_KEY 
c1ca						DMARK "SPT" 
c1ca f5				push af  
c1cb 3a df c1			ld a, (.dmark)  
c1ce 32 65 ee			ld (debug_mark),a  
c1d1 3a e0 c1			ld a, (.dmark+1)  
c1d4 32 66 ee			ld (debug_mark+1),a  
c1d7 3a e1 c1			ld a, (.dmark+2)  
c1da 32 67 ee			ld (debug_mark+2),a  
c1dd 18 03			jr .pastdmark  
c1df ..			.dmark: db "SPT"  
c1e2 f1			.pastdmark: pop af  
c1e3			endm  
# End of macro DMARK
c1e3						CALLMONITOR 
c1e3 cd 6f ee			call debug_vector  
c1e6				endm  
# End of macro CALLMONITOR
c1e6					endif 
c1e6			 
c1e6					; get delim 
c1e6					FORTH_DSP_VALUEHL 
c1e6 cd 8a 9c			call macro_dsp_valuehl 
c1e9				endm 
# End of macro FORTH_DSP_VALUEHL
c1e9			 
c1e9					FORTH_DSP_POP 
c1e9 cd 42 9d			call macro_forth_dsp_pop 
c1ec				endm 
# End of macro FORTH_DSP_POP
c1ec					 
c1ec			 
c1ec 45					ld b, l    ; move delim to b 
c1ed 0e 01				ld c, 1   ; count of poritions 
c1ef			 
c1ef c5					push bc 
c1f0			 
c1f0					if DEBUG_FORTH_WORDS 
c1f0						DMARK "SPa" 
c1f0 f5				push af  
c1f1 3a 05 c2			ld a, (.dmark)  
c1f4 32 65 ee			ld (debug_mark),a  
c1f7 3a 06 c2			ld a, (.dmark+1)  
c1fa 32 66 ee			ld (debug_mark+1),a  
c1fd 3a 07 c2			ld a, (.dmark+2)  
c200 32 67 ee			ld (debug_mark+2),a  
c203 18 03			jr .pastdmark  
c205 ..			.dmark: db "SPa"  
c208 f1			.pastdmark: pop af  
c209			endm  
# End of macro DMARK
c209						CALLMONITOR 
c209 cd 6f ee			call debug_vector  
c20c				endm  
# End of macro CALLMONITOR
c20c					endif 
c20c					; get pointer to string to chop up 
c20c					FORTH_DSP_VALUEHL 
c20c cd 8a 9c			call macro_dsp_valuehl 
c20f				endm 
# End of macro FORTH_DSP_VALUEHL
c20f			 
c20f			;		push hl 
c20f 11 bb e2				ld de, scratch 
c212			.spllop: 
c212 c1					pop bc 
c213 c5					push bc 
c214			;		pop hl 
c214					if DEBUG_FORTH_WORDS 
c214						DMARK "SPl" 
c214 f5				push af  
c215 3a 29 c2			ld a, (.dmark)  
c218 32 65 ee			ld (debug_mark),a  
c21b 3a 2a c2			ld a, (.dmark+1)  
c21e 32 66 ee			ld (debug_mark+1),a  
c221 3a 2b c2			ld a, (.dmark+2)  
c224 32 67 ee			ld (debug_mark+2),a  
c227 18 03			jr .pastdmark  
c229 ..			.dmark: db "SPl"  
c22c f1			.pastdmark: pop af  
c22d			endm  
# End of macro DMARK
c22d						CALLMONITOR 
c22d cd 6f ee			call debug_vector  
c230				endm  
# End of macro CALLMONITOR
c230					endif 
c230 7e					ld a, (hl) 
c231 b8					cp b 
c232 28 08				jr z, .splnxt 
c234 fe 00				cp 0 
c236 28 34				jr z, .splend 
c238 ed a0				ldi 
c23a 18 d6				jr .spllop 
c23c			 
c23c					; hit dlim 
c23c			 
c23c			.splnxt: 
c23c					if DEBUG_FORTH_WORDS 
c23c						DMARK "SPx" 
c23c f5				push af  
c23d 3a 51 c2			ld a, (.dmark)  
c240 32 65 ee			ld (debug_mark),a  
c243 3a 52 c2			ld a, (.dmark+1)  
c246 32 66 ee			ld (debug_mark+1),a  
c249 3a 53 c2			ld a, (.dmark+2)  
c24c 32 67 ee			ld (debug_mark+2),a  
c24f 18 03			jr .pastdmark  
c251 ..			.dmark: db "SPx"  
c254 f1			.pastdmark: pop af  
c255			endm  
# End of macro DMARK
c255						CALLMONITOR 
c255 cd 6f ee			call debug_vector  
c258				endm  
# End of macro CALLMONITOR
c258					endif 
c258 3e 00				ld a, 0 
c25a 12					ld (de), a 
c25b					;ex de, hl 
c25b e5					push hl 
c25c 21 bb e2				ld hl, scratch 
c25f cd f3 9a				call forth_push_str 
c262 e1					pop hl 
c263					;ex de, hl 
c263 23					inc hl 
c264 c1					pop bc 
c265 0c					inc c 
c266 c5					push bc 
c267 11 bb e2				ld de, scratch 
c26a 18 a6				jr .spllop 
c26c			 
c26c			.splend:		 
c26c					if DEBUG_FORTH_WORDS 
c26c						DMARK "SPe" 
c26c f5				push af  
c26d 3a 81 c2			ld a, (.dmark)  
c270 32 65 ee			ld (debug_mark),a  
c273 3a 82 c2			ld a, (.dmark+1)  
c276 32 66 ee			ld (debug_mark+1),a  
c279 3a 83 c2			ld a, (.dmark+2)  
c27c 32 67 ee			ld (debug_mark+2),a  
c27f 18 03			jr .pastdmark  
c281 ..			.dmark: db "SPe"  
c284 f1			.pastdmark: pop af  
c285			endm  
# End of macro DMARK
c285						CALLMONITOR 
c285 cd 6f ee			call debug_vector  
c288				endm  
# End of macro CALLMONITOR
c288					endif 
c288 12					ld (de), a 
c289 eb					ex de, hl 
c28a			;		push hl 
c28a 21 bb e2				ld hl, scratch 
c28d cd f3 9a				call forth_push_str 
c290					 
c290					if DEBUG_FORTH_WORDS 
c290						DMARK "SPc" 
c290 f5				push af  
c291 3a a5 c2			ld a, (.dmark)  
c294 32 65 ee			ld (debug_mark),a  
c297 3a a6 c2			ld a, (.dmark+1)  
c29a 32 66 ee			ld (debug_mark+1),a  
c29d 3a a7 c2			ld a, (.dmark+2)  
c2a0 32 67 ee			ld (debug_mark+2),a  
c2a3 18 03			jr .pastdmark  
c2a5 ..			.dmark: db "SPc"  
c2a8 f1			.pastdmark: pop af  
c2a9			endm  
# End of macro DMARK
c2a9						CALLMONITOR 
c2a9 cd 6f ee			call debug_vector  
c2ac				endm  
# End of macro CALLMONITOR
c2ac					endif 
c2ac			 
c2ac e1					pop hl    ; get counter from bc which has been push 
c2ad 26 00				ld h, 0 
c2af			;		ld l, c 
c2af cd 85 9a				call forth_push_numhl 
c2b2			 
c2b2			 
c2b2				NEXTW 
c2b2 c3 76 9e			jp macro_next 
c2b5				endm 
# End of macro NEXTW
c2b5			.PTR:   
c2b5			 
c2b5				CWHEAD .STYPE 52 "PTR" 3 WORD_FLAG_CODE 
c2b5 48				db WORD_SYS_CORE+52             
c2b6 e2 c2			dw .STYPE            
c2b8 04				db 3 + 1 
c2b9 .. 00			db "PTR",0              
c2bd				endm 
# End of macro CWHEAD
c2bd			; | PTR ( -- addr ) Low level push pointer to the value on TOS | DONE 
c2bd			; | | If a string will give the address of the string without dropping it. Handy for direct string access 
c2bd			; | | If a number can then use 2@ and 2! for direct value update without using stack words  
c2bd			 
c2bd					if DEBUG_FORTH_WORDS_KEY 
c2bd						DMARK "PTR" 
c2bd f5				push af  
c2be 3a d2 c2			ld a, (.dmark)  
c2c1 32 65 ee			ld (debug_mark),a  
c2c4 3a d3 c2			ld a, (.dmark+1)  
c2c7 32 66 ee			ld (debug_mark+1),a  
c2ca 3a d4 c2			ld a, (.dmark+2)  
c2cd 32 67 ee			ld (debug_mark+2),a  
c2d0 18 03			jr .pastdmark  
c2d2 ..			.dmark: db "PTR"  
c2d5 f1			.pastdmark: pop af  
c2d6			endm  
# End of macro DMARK
c2d6						CALLMONITOR 
c2d6 cd 6f ee			call debug_vector  
c2d9				endm  
# End of macro CALLMONITOR
c2d9					endif 
c2d9					FORTH_DSP_VALUEHL 
c2d9 cd 8a 9c			call macro_dsp_valuehl 
c2dc				endm 
# End of macro FORTH_DSP_VALUEHL
c2dc cd 85 9a				call forth_push_numhl 
c2df			 
c2df			 
c2df					NEXTW 
c2df c3 76 9e			jp macro_next 
c2e2				endm 
# End of macro NEXTW
c2e2			.STYPE: 
c2e2				CWHEAD .UPPER 52 "STYPE" 5 WORD_FLAG_CODE 
c2e2 48				db WORD_SYS_CORE+52             
c2e3 31 c3			dw .UPPER            
c2e5 06				db 5 + 1 
c2e6 .. 00			db "STYPE",0              
c2ec				endm 
# End of macro CWHEAD
c2ec			; | STYPE ( u -- u type ) Push type of value on TOS - 's' string, 'i' integer...   | DONE 
c2ec					if DEBUG_FORTH_WORDS_KEY 
c2ec						DMARK "STY" 
c2ec f5				push af  
c2ed 3a 01 c3			ld a, (.dmark)  
c2f0 32 65 ee			ld (debug_mark),a  
c2f3 3a 02 c3			ld a, (.dmark+1)  
c2f6 32 66 ee			ld (debug_mark+1),a  
c2f9 3a 03 c3			ld a, (.dmark+2)  
c2fc 32 67 ee			ld (debug_mark+2),a  
c2ff 18 03			jr .pastdmark  
c301 ..			.dmark: db "STY"  
c304 f1			.pastdmark: pop af  
c305			endm  
# End of macro DMARK
c305						CALLMONITOR 
c305 cd 6f ee			call debug_vector  
c308				endm  
# End of macro CALLMONITOR
c308					endif 
c308					FORTH_DSP 
c308 cd 50 9c			call macro_forth_dsp 
c30b				endm 
# End of macro FORTH_DSP
c30b					;v5 FORTH_DSP_VALUE 
c30b			 
c30b 7e					ld a, (hl) 
c30c			 
c30c f5					push af 
c30d			 
c30d			; Dont destroy TOS		FORTH_DSP_POP 
c30d			 
c30d f1					pop af 
c30e			 
c30e fe 01				cp DS_TYPE_STR 
c310 28 09				jr z, .typestr 
c312			 
c312 fe 02				cp DS_TYPE_INUM 
c314 28 0a				jr z, .typeinum 
c316			 
c316 21 2f c3				ld hl, .tna 
c319 18 0a				jr .tpush 
c31b			 
c31b 21 2b c3		.typestr:	ld hl, .tstr 
c31e 18 05				jr .tpush 
c320 21 2d c3		.typeinum:	ld hl, .tinum 
c323 18 00				jr .tpush 
c325			 
c325			.tpush: 
c325			 
c325 cd f3 9a				call forth_push_str 
c328			 
c328					NEXTW 
c328 c3 76 9e			jp macro_next 
c32b				endm 
# End of macro NEXTW
c32b .. 00		.tstr:	db "s",0 
c32d .. 00		.tinum:  db "i",0 
c32f .. 00		.tna:   db "?", 0 
c331			 
c331			 
c331			.UPPER: 
c331				CWHEAD .LOWER 52 "UPPER" 5 WORD_FLAG_CODE 
c331 48				db WORD_SYS_CORE+52             
c332 6c c3			dw .LOWER            
c334 06				db 5 + 1 
c335 .. 00			db "UPPER",0              
c33b				endm 
# End of macro CWHEAD
c33b			; | UPPER ( s -- s ) Upper case string s  | DONE 
c33b					if DEBUG_FORTH_WORDS_KEY 
c33b						DMARK "UPR" 
c33b f5				push af  
c33c 3a 50 c3			ld a, (.dmark)  
c33f 32 65 ee			ld (debug_mark),a  
c342 3a 51 c3			ld a, (.dmark+1)  
c345 32 66 ee			ld (debug_mark+1),a  
c348 3a 52 c3			ld a, (.dmark+2)  
c34b 32 67 ee			ld (debug_mark+2),a  
c34e 18 03			jr .pastdmark  
c350 ..			.dmark: db "UPR"  
c353 f1			.pastdmark: pop af  
c354			endm  
# End of macro DMARK
c354						CALLMONITOR 
c354 cd 6f ee			call debug_vector  
c357				endm  
# End of macro CALLMONITOR
c357					endif 
c357			 
c357					FORTH_DSP 
c357 cd 50 9c			call macro_forth_dsp 
c35a				endm 
# End of macro FORTH_DSP
c35a					 
c35a			; TODO check is string type 
c35a			 
c35a					FORTH_DSP_VALUEHL 
c35a cd 8a 9c			call macro_dsp_valuehl 
c35d				endm 
# End of macro FORTH_DSP_VALUEHL
c35d			; get pointer to string in hl 
c35d			 
c35d 7e			.toup:		ld a, (hl) 
c35e fe 00				cp 0 
c360 28 07				jr z, .toupdone 
c362			 
c362 cd 5f 8f				call to_upper 
c365			 
c365 77					ld (hl), a 
c366 23					inc hl 
c367 18 f4				jr .toup 
c369			 
c369					 
c369			 
c369			 
c369			; for each char convert to upper 
c369					 
c369			.toupdone: 
c369			 
c369			 
c369					NEXTW 
c369 c3 76 9e			jp macro_next 
c36c				endm 
# End of macro NEXTW
c36c			.LOWER: 
c36c				CWHEAD .TCASE 52 "LOWER" 5 WORD_FLAG_CODE 
c36c 48				db WORD_SYS_CORE+52             
c36d a7 c3			dw .TCASE            
c36f 06				db 5 + 1 
c370 .. 00			db "LOWER",0              
c376				endm 
# End of macro CWHEAD
c376			; | LOWER ( s -- s ) Lower case string s  | DONE 
c376					if DEBUG_FORTH_WORDS_KEY 
c376						DMARK "LWR" 
c376 f5				push af  
c377 3a 8b c3			ld a, (.dmark)  
c37a 32 65 ee			ld (debug_mark),a  
c37d 3a 8c c3			ld a, (.dmark+1)  
c380 32 66 ee			ld (debug_mark+1),a  
c383 3a 8d c3			ld a, (.dmark+2)  
c386 32 67 ee			ld (debug_mark+2),a  
c389 18 03			jr .pastdmark  
c38b ..			.dmark: db "LWR"  
c38e f1			.pastdmark: pop af  
c38f			endm  
# End of macro DMARK
c38f						CALLMONITOR 
c38f cd 6f ee			call debug_vector  
c392				endm  
# End of macro CALLMONITOR
c392					endif 
c392			 
c392					FORTH_DSP 
c392 cd 50 9c			call macro_forth_dsp 
c395				endm 
# End of macro FORTH_DSP
c395					 
c395			; TODO check is string type 
c395			 
c395					FORTH_DSP_VALUEHL 
c395 cd 8a 9c			call macro_dsp_valuehl 
c398				endm 
# End of macro FORTH_DSP_VALUEHL
c398			; get pointer to string in hl 
c398			 
c398 7e			.tolow:		ld a, (hl) 
c399 fe 00				cp 0 
c39b 28 07				jr z, .tolowdone 
c39d			 
c39d cd 68 8f				call to_lower 
c3a0			 
c3a0 77					ld (hl), a 
c3a1 23					inc hl 
c3a2 18 f4				jr .tolow 
c3a4			 
c3a4					 
c3a4			 
c3a4			 
c3a4			; for each char convert to low 
c3a4					 
c3a4			.tolowdone: 
c3a4					NEXTW 
c3a4 c3 76 9e			jp macro_next 
c3a7				endm 
# End of macro NEXTW
c3a7			.TCASE: 
c3a7				CWHEAD .SUBSTR 52 "TCASE" 5 WORD_FLAG_CODE 
c3a7 48				db WORD_SYS_CORE+52             
c3a8 dd c4			dw .SUBSTR            
c3aa 06				db 5 + 1 
c3ab .. 00			db "TCASE",0              
c3b1				endm 
# End of macro CWHEAD
c3b1			; | TCASE ( s -- s ) Title case string s  | DONE 
c3b1					if DEBUG_FORTH_WORDS_KEY 
c3b1						DMARK "TCS" 
c3b1 f5				push af  
c3b2 3a c6 c3			ld a, (.dmark)  
c3b5 32 65 ee			ld (debug_mark),a  
c3b8 3a c7 c3			ld a, (.dmark+1)  
c3bb 32 66 ee			ld (debug_mark+1),a  
c3be 3a c8 c3			ld a, (.dmark+2)  
c3c1 32 67 ee			ld (debug_mark+2),a  
c3c4 18 03			jr .pastdmark  
c3c6 ..			.dmark: db "TCS"  
c3c9 f1			.pastdmark: pop af  
c3ca			endm  
# End of macro DMARK
c3ca						CALLMONITOR 
c3ca cd 6f ee			call debug_vector  
c3cd				endm  
# End of macro CALLMONITOR
c3cd					endif 
c3cd			 
c3cd					FORTH_DSP 
c3cd cd 50 9c			call macro_forth_dsp 
c3d0				endm 
# End of macro FORTH_DSP
c3d0					 
c3d0			; TODO check is string type 
c3d0			 
c3d0					FORTH_DSP_VALUEHL 
c3d0 cd 8a 9c			call macro_dsp_valuehl 
c3d3				endm 
# End of macro FORTH_DSP_VALUEHL
c3d3			; get pointer to string in hl 
c3d3			 
c3d3					if DEBUG_FORTH_WORDS 
c3d3						DMARK "TC1" 
c3d3 f5				push af  
c3d4 3a e8 c3			ld a, (.dmark)  
c3d7 32 65 ee			ld (debug_mark),a  
c3da 3a e9 c3			ld a, (.dmark+1)  
c3dd 32 66 ee			ld (debug_mark+1),a  
c3e0 3a ea c3			ld a, (.dmark+2)  
c3e3 32 67 ee			ld (debug_mark+2),a  
c3e6 18 03			jr .pastdmark  
c3e8 ..			.dmark: db "TC1"  
c3eb f1			.pastdmark: pop af  
c3ec			endm  
# End of macro DMARK
c3ec						CALLMONITOR 
c3ec cd 6f ee			call debug_vector  
c3ef				endm  
# End of macro CALLMONITOR
c3ef					endif 
c3ef			 
c3ef					; first time in turn to upper case first char 
c3ef			 
c3ef 7e					ld a, (hl) 
c3f0 c3 7a c4				jp .totsiptou 
c3f3			 
c3f3			 
c3f3 7e			.tot:		ld a, (hl) 
c3f4 fe 00				cp 0 
c3f6 ca be c4				jp z, .totdone 
c3f9			 
c3f9					if DEBUG_FORTH_WORDS 
c3f9						DMARK "TC2" 
c3f9 f5				push af  
c3fa 3a 0e c4			ld a, (.dmark)  
c3fd 32 65 ee			ld (debug_mark),a  
c400 3a 0f c4			ld a, (.dmark+1)  
c403 32 66 ee			ld (debug_mark+1),a  
c406 3a 10 c4			ld a, (.dmark+2)  
c409 32 67 ee			ld (debug_mark+2),a  
c40c 18 03			jr .pastdmark  
c40e ..			.dmark: db "TC2"  
c411 f1			.pastdmark: pop af  
c412			endm  
# End of macro DMARK
c412						CALLMONITOR 
c412 cd 6f ee			call debug_vector  
c415				endm  
# End of macro CALLMONITOR
c415					endif 
c415					; check to see if current char is a space 
c415			 
c415 fe 20				cp ' ' 
c417 28 21				jr z, .totsp 
c419 cd 68 8f				call to_lower 
c41c					if DEBUG_FORTH_WORDS 
c41c						DMARK "TC3" 
c41c f5				push af  
c41d 3a 31 c4			ld a, (.dmark)  
c420 32 65 ee			ld (debug_mark),a  
c423 3a 32 c4			ld a, (.dmark+1)  
c426 32 66 ee			ld (debug_mark+1),a  
c429 3a 33 c4			ld a, (.dmark+2)  
c42c 32 67 ee			ld (debug_mark+2),a  
c42f 18 03			jr .pastdmark  
c431 ..			.dmark: db "TC3"  
c434 f1			.pastdmark: pop af  
c435			endm  
# End of macro DMARK
c435						CALLMONITOR 
c435 cd 6f ee			call debug_vector  
c438				endm  
# End of macro CALLMONITOR
c438					endif 
c438 18 63				jr .totnxt 
c43a			 
c43a			.totsp:         ; on a space, find next char which should be upper 
c43a			 
c43a					if DEBUG_FORTH_WORDS 
c43a						DMARK "TC4" 
c43a f5				push af  
c43b 3a 4f c4			ld a, (.dmark)  
c43e 32 65 ee			ld (debug_mark),a  
c441 3a 50 c4			ld a, (.dmark+1)  
c444 32 66 ee			ld (debug_mark+1),a  
c447 3a 51 c4			ld a, (.dmark+2)  
c44a 32 67 ee			ld (debug_mark+2),a  
c44d 18 03			jr .pastdmark  
c44f ..			.dmark: db "TC4"  
c452 f1			.pastdmark: pop af  
c453			endm  
# End of macro DMARK
c453						CALLMONITOR 
c453 cd 6f ee			call debug_vector  
c456				endm  
# End of macro CALLMONITOR
c456					endif 
c456					;; 
c456			 
c456 fe 20				cp ' ' 
c458 20 20				jr nz, .totsiptou 
c45a 23					inc hl 
c45b 7e					ld a, (hl) 
c45c					if DEBUG_FORTH_WORDS 
c45c						DMARK "TC5" 
c45c f5				push af  
c45d 3a 71 c4			ld a, (.dmark)  
c460 32 65 ee			ld (debug_mark),a  
c463 3a 72 c4			ld a, (.dmark+1)  
c466 32 66 ee			ld (debug_mark+1),a  
c469 3a 73 c4			ld a, (.dmark+2)  
c46c 32 67 ee			ld (debug_mark+2),a  
c46f 18 03			jr .pastdmark  
c471 ..			.dmark: db "TC5"  
c474 f1			.pastdmark: pop af  
c475			endm  
# End of macro DMARK
c475						CALLMONITOR 
c475 cd 6f ee			call debug_vector  
c478				endm  
# End of macro CALLMONITOR
c478					endif 
c478 18 c0				jr .totsp 
c47a fe 00		.totsiptou:    cp 0 
c47c 28 40				jr z, .totdone 
c47e					; not space and not zero term so upper case it 
c47e cd 5f 8f				call to_upper 
c481			 
c481					if DEBUG_FORTH_WORDS 
c481						DMARK "TC6" 
c481 f5				push af  
c482 3a 96 c4			ld a, (.dmark)  
c485 32 65 ee			ld (debug_mark),a  
c488 3a 97 c4			ld a, (.dmark+1)  
c48b 32 66 ee			ld (debug_mark+1),a  
c48e 3a 98 c4			ld a, (.dmark+2)  
c491 32 67 ee			ld (debug_mark+2),a  
c494 18 03			jr .pastdmark  
c496 ..			.dmark: db "TC6"  
c499 f1			.pastdmark: pop af  
c49a			endm  
# End of macro DMARK
c49a						CALLMONITOR 
c49a cd 6f ee			call debug_vector  
c49d				endm  
# End of macro CALLMONITOR
c49d					endif 
c49d			 
c49d			 
c49d			.totnxt: 
c49d			 
c49d 77					ld (hl), a 
c49e 23					inc hl 
c49f					if DEBUG_FORTH_WORDS 
c49f						DMARK "TC7" 
c49f f5				push af  
c4a0 3a b4 c4			ld a, (.dmark)  
c4a3 32 65 ee			ld (debug_mark),a  
c4a6 3a b5 c4			ld a, (.dmark+1)  
c4a9 32 66 ee			ld (debug_mark+1),a  
c4ac 3a b6 c4			ld a, (.dmark+2)  
c4af 32 67 ee			ld (debug_mark+2),a  
c4b2 18 03			jr .pastdmark  
c4b4 ..			.dmark: db "TC7"  
c4b7 f1			.pastdmark: pop af  
c4b8			endm  
# End of macro DMARK
c4b8						CALLMONITOR 
c4b8 cd 6f ee			call debug_vector  
c4bb				endm  
# End of macro CALLMONITOR
c4bb					endif 
c4bb c3 f3 c3				jp .tot 
c4be			 
c4be					 
c4be			 
c4be			 
c4be			; for each char convert to low 
c4be					 
c4be			.totdone: 
c4be					if DEBUG_FORTH_WORDS 
c4be						DMARK "TCd" 
c4be f5				push af  
c4bf 3a d3 c4			ld a, (.dmark)  
c4c2 32 65 ee			ld (debug_mark),a  
c4c5 3a d4 c4			ld a, (.dmark+1)  
c4c8 32 66 ee			ld (debug_mark+1),a  
c4cb 3a d5 c4			ld a, (.dmark+2)  
c4ce 32 67 ee			ld (debug_mark+2),a  
c4d1 18 03			jr .pastdmark  
c4d3 ..			.dmark: db "TCd"  
c4d6 f1			.pastdmark: pop af  
c4d7			endm  
# End of macro DMARK
c4d7						CALLMONITOR 
c4d7 cd 6f ee			call debug_vector  
c4da				endm  
# End of macro CALLMONITOR
c4da					endif 
c4da					NEXTW 
c4da c3 76 9e			jp macro_next 
c4dd				endm 
# End of macro NEXTW
c4dd			 
c4dd			.SUBSTR: 
c4dd				CWHEAD .LEFT 52 "SUBSTR" 6 WORD_FLAG_CODE 
c4dd 48				db WORD_SYS_CORE+52             
c4de 3b c5			dw .LEFT            
c4e0 07				db 6 + 1 
c4e1 .. 00			db "SUBSTR",0              
c4e8				endm 
# End of macro CWHEAD
c4e8			; | SUBSTR ( s u1 u2 -- s sb ) Push to TOS chars starting at position u1 and with length u2 from string s  | DONE 
c4e8			 
c4e8					if DEBUG_FORTH_WORDS_KEY 
c4e8						DMARK "SST" 
c4e8 f5				push af  
c4e9 3a fd c4			ld a, (.dmark)  
c4ec 32 65 ee			ld (debug_mark),a  
c4ef 3a fe c4			ld a, (.dmark+1)  
c4f2 32 66 ee			ld (debug_mark+1),a  
c4f5 3a ff c4			ld a, (.dmark+2)  
c4f8 32 67 ee			ld (debug_mark+2),a  
c4fb 18 03			jr .pastdmark  
c4fd ..			.dmark: db "SST"  
c500 f1			.pastdmark: pop af  
c501			endm  
# End of macro DMARK
c501						CALLMONITOR 
c501 cd 6f ee			call debug_vector  
c504				endm  
# End of macro CALLMONITOR
c504					endif 
c504			; TODO check string type 
c504					FORTH_DSP_VALUEHL 
c504 cd 8a 9c			call macro_dsp_valuehl 
c507				endm 
# End of macro FORTH_DSP_VALUEHL
c507			 
c507 e5					push hl      ; string length 
c508			 
c508					FORTH_DSP_POP 
c508 cd 42 9d			call macro_forth_dsp_pop 
c50b				endm 
# End of macro FORTH_DSP_POP
c50b			 
c50b					FORTH_DSP_VALUEHL 
c50b cd 8a 9c			call macro_dsp_valuehl 
c50e				endm 
# End of macro FORTH_DSP_VALUEHL
c50e			 
c50e e5					push hl     ; start char 
c50f			 
c50f					FORTH_DSP_POP 
c50f cd 42 9d			call macro_forth_dsp_pop 
c512				endm 
# End of macro FORTH_DSP_POP
c512			 
c512			 
c512					FORTH_DSP_VALUE 
c512 cd 73 9c			call macro_forth_dsp_value 
c515				endm 
# End of macro FORTH_DSP_VALUE
c515			 
c515 d1					pop de    ; get start post offset 
c516			 
c516 19					add hl, de    ; starting offset 
c517			 
c517 c1					pop bc 
c518 c5					push bc      ; grab size of string 
c519			 
c519 e5					push hl    ; save string start  
c51a			 
c51a 26 00				ld h, 0 
c51c 69					ld l, c 
c51d 23					inc hl 
c51e 23					inc hl 
c51f			 
c51f cd c5 90				call malloc 
c522				if DEBUG_FORTH_MALLOC_GUARD 
c522 cc 0a cf				call z,malloc_error 
c525				endif 
c525			 
c525 eb					ex de, hl      ; save malloc area for string copy 
c526 e1					pop hl    ; get back source 
c527 c1					pop bc    ; get length of string back 
c528			 
c528 d5					push de    ; save malloc area for after we push 
c529 ed b0				ldir     ; copy substr 
c52b			 
c52b			 
c52b eb					ex de, hl 
c52c 3e 00				ld a, 0 
c52e 77					ld (hl), a   ; term substr 
c52f			 
c52f					 
c52f e1					pop hl    ; get malloc so we can push it 
c530 e5					push hl   ; save so we can free it afterwards 
c531			 
c531 cd f3 9a				call forth_push_str 
c534			 
c534 e1					pop hl 
c535 cd 8f 91				call free 
c538			 
c538					 
c538					 
c538			 
c538			 
c538					NEXTW 
c538 c3 76 9e			jp macro_next 
c53b				endm 
# End of macro NEXTW
c53b			 
c53b			.LEFT: 
c53b				CWHEAD .RIGHT 52 "LEFT" 4 WORD_FLAG_CODE 
c53b 48				db WORD_SYS_CORE+52             
c53c 63 c5			dw .RIGHT            
c53e 05				db 4 + 1 
c53f .. 00			db "LEFT",0              
c544				endm 
# End of macro CWHEAD
c544			; | LEFT ( s u -- s sub ) Push to TOS string u long starting from left of s  | TODO 
c544					if DEBUG_FORTH_WORDS_KEY 
c544						DMARK "LEF" 
c544 f5				push af  
c545 3a 59 c5			ld a, (.dmark)  
c548 32 65 ee			ld (debug_mark),a  
c54b 3a 5a c5			ld a, (.dmark+1)  
c54e 32 66 ee			ld (debug_mark+1),a  
c551 3a 5b c5			ld a, (.dmark+2)  
c554 32 67 ee			ld (debug_mark+2),a  
c557 18 03			jr .pastdmark  
c559 ..			.dmark: db "LEF"  
c55c f1			.pastdmark: pop af  
c55d			endm  
# End of macro DMARK
c55d						CALLMONITOR 
c55d cd 6f ee			call debug_vector  
c560				endm  
# End of macro CALLMONITOR
c560					endif 
c560			 
c560					NEXTW 
c560 c3 76 9e			jp macro_next 
c563				endm 
# End of macro NEXTW
c563			.RIGHT: 
c563				CWHEAD .STR2NUM 52 "RIGHT" 5 WORD_FLAG_CODE 
c563 48				db WORD_SYS_CORE+52             
c564 8c c5			dw .STR2NUM            
c566 06				db 5 + 1 
c567 .. 00			db "RIGHT",0              
c56d				endm 
# End of macro CWHEAD
c56d			; | RIGHT ( s u -- s sub ) Push to TOS string u long starting from right of s  | TODO 
c56d					if DEBUG_FORTH_WORDS_KEY 
c56d						DMARK "RIG" 
c56d f5				push af  
c56e 3a 82 c5			ld a, (.dmark)  
c571 32 65 ee			ld (debug_mark),a  
c574 3a 83 c5			ld a, (.dmark+1)  
c577 32 66 ee			ld (debug_mark+1),a  
c57a 3a 84 c5			ld a, (.dmark+2)  
c57d 32 67 ee			ld (debug_mark+2),a  
c580 18 03			jr .pastdmark  
c582 ..			.dmark: db "RIG"  
c585 f1			.pastdmark: pop af  
c586			endm  
# End of macro DMARK
c586						CALLMONITOR 
c586 cd 6f ee			call debug_vector  
c589				endm  
# End of macro CALLMONITOR
c589					endif 
c589			 
c589					NEXTW 
c589 c3 76 9e			jp macro_next 
c58c				endm 
# End of macro NEXTW
c58c			 
c58c			 
c58c			.STR2NUM: 
c58c				CWHEAD .NUM2STR 52 "STR2NUM" 7 WORD_FLAG_CODE 
c58c 48				db WORD_SYS_CORE+52             
c58d 18 c6			dw .NUM2STR            
c58f 08				db 7 + 1 
c590 .. 00			db "STR2NUM",0              
c598				endm 
# End of macro CWHEAD
c598			; | STR2NUM ( s -- n ) Convert a string on TOS to number | DONE 
c598			 
c598			 
c598			; TODO STR type check to do 
c598					if DEBUG_FORTH_WORDS_KEY 
c598						DMARK "S2N" 
c598 f5				push af  
c599 3a ad c5			ld a, (.dmark)  
c59c 32 65 ee			ld (debug_mark),a  
c59f 3a ae c5			ld a, (.dmark+1)  
c5a2 32 66 ee			ld (debug_mark+1),a  
c5a5 3a af c5			ld a, (.dmark+2)  
c5a8 32 67 ee			ld (debug_mark+2),a  
c5ab 18 03			jr .pastdmark  
c5ad ..			.dmark: db "S2N"  
c5b0 f1			.pastdmark: pop af  
c5b1			endm  
# End of macro DMARK
c5b1						CALLMONITOR 
c5b1 cd 6f ee			call debug_vector  
c5b4				endm  
# End of macro CALLMONITOR
c5b4					endif 
c5b4			 
c5b4					;FORTH_DSP 
c5b4					FORTH_DSP_VALUE 
c5b4 cd 73 9c			call macro_forth_dsp_value 
c5b7				endm 
# End of macro FORTH_DSP_VALUE
c5b7					;inc hl 
c5b7			 
c5b7 eb					ex de, hl 
c5b8					if DEBUG_FORTH_WORDS 
c5b8						DMARK "S2a" 
c5b8 f5				push af  
c5b9 3a cd c5			ld a, (.dmark)  
c5bc 32 65 ee			ld (debug_mark),a  
c5bf 3a ce c5			ld a, (.dmark+1)  
c5c2 32 66 ee			ld (debug_mark+1),a  
c5c5 3a cf c5			ld a, (.dmark+2)  
c5c8 32 67 ee			ld (debug_mark+2),a  
c5cb 18 03			jr .pastdmark  
c5cd ..			.dmark: db "S2a"  
c5d0 f1			.pastdmark: pop af  
c5d1			endm  
# End of macro DMARK
c5d1						CALLMONITOR 
c5d1 cd 6f ee			call debug_vector  
c5d4				endm  
# End of macro CALLMONITOR
c5d4					endif 
c5d4 cd e7 8f				call string_to_uint16 
c5d7			 
c5d7					if DEBUG_FORTH_WORDS 
c5d7						DMARK "S2b" 
c5d7 f5				push af  
c5d8 3a ec c5			ld a, (.dmark)  
c5db 32 65 ee			ld (debug_mark),a  
c5de 3a ed c5			ld a, (.dmark+1)  
c5e1 32 66 ee			ld (debug_mark+1),a  
c5e4 3a ee c5			ld a, (.dmark+2)  
c5e7 32 67 ee			ld (debug_mark+2),a  
c5ea 18 03			jr .pastdmark  
c5ec ..			.dmark: db "S2b"  
c5ef f1			.pastdmark: pop af  
c5f0			endm  
# End of macro DMARK
c5f0						CALLMONITOR 
c5f0 cd 6f ee			call debug_vector  
c5f3				endm  
# End of macro CALLMONITOR
c5f3					endif 
c5f3			;		push hl 
c5f3					FORTH_DSP_POP 
c5f3 cd 42 9d			call macro_forth_dsp_pop 
c5f6				endm 
# End of macro FORTH_DSP_POP
c5f6			;		pop hl 
c5f6					 
c5f6					if DEBUG_FORTH_WORDS 
c5f6						DMARK "S2b" 
c5f6 f5				push af  
c5f7 3a 0b c6			ld a, (.dmark)  
c5fa 32 65 ee			ld (debug_mark),a  
c5fd 3a 0c c6			ld a, (.dmark+1)  
c600 32 66 ee			ld (debug_mark+1),a  
c603 3a 0d c6			ld a, (.dmark+2)  
c606 32 67 ee			ld (debug_mark+2),a  
c609 18 03			jr .pastdmark  
c60b ..			.dmark: db "S2b"  
c60e f1			.pastdmark: pop af  
c60f			endm  
# End of macro DMARK
c60f						CALLMONITOR 
c60f cd 6f ee			call debug_vector  
c612				endm  
# End of macro CALLMONITOR
c612					endif 
c612 cd 85 9a				call forth_push_numhl	 
c615			 
c615				 
c615				       NEXTW 
c615 c3 76 9e			jp macro_next 
c618				endm 
# End of macro NEXTW
c618			.NUM2STR: 
c618				CWHEAD .CONCAT 52 "NUM2STR" 7 WORD_FLAG_CODE 
c618 48				db WORD_SYS_CORE+52             
c619 aa c6			dw .CONCAT            
c61b 08				db 7 + 1 
c61c .. 00			db "NUM2STR",0              
c624				endm 
# End of macro CWHEAD
c624			; | NUM2STR ( n -- s ) Convert a number on TOS to zero padded string | DONE 
c624			 
c624			;		; malloc a string to target 
c624			;		ld hl, 10     ; TODO max string size should be fine 
c624			;		call malloc 
c624			;		push hl    ; save malloc location 
c624			; 
c624			; 
c624			;; TODO check int type 
c624					if DEBUG_FORTH_WORDS_KEY 
c624						DMARK "N2S" 
c624 f5				push af  
c625 3a 39 c6			ld a, (.dmark)  
c628 32 65 ee			ld (debug_mark),a  
c62b 3a 3a c6			ld a, (.dmark+1)  
c62e 32 66 ee			ld (debug_mark+1),a  
c631 3a 3b c6			ld a, (.dmark+2)  
c634 32 67 ee			ld (debug_mark+2),a  
c637 18 03			jr .pastdmark  
c639 ..			.dmark: db "N2S"  
c63c f1			.pastdmark: pop af  
c63d			endm  
# End of macro DMARK
c63d						CALLMONITOR 
c63d cd 6f ee			call debug_vector  
c640				endm  
# End of macro CALLMONITOR
c640					endif 
c640			 
c640					FORTH_DSP_VALUEHL 
c640 cd 8a 9c			call macro_dsp_valuehl 
c643				endm 
# End of macro FORTH_DSP_VALUEHL
c643			 
c643					if DEBUG_FORTH_WORDS 
c643						DMARK "NS1" 
c643 f5				push af  
c644 3a 58 c6			ld a, (.dmark)  
c647 32 65 ee			ld (debug_mark),a  
c64a 3a 59 c6			ld a, (.dmark+1)  
c64d 32 66 ee			ld (debug_mark+1),a  
c650 3a 5a c6			ld a, (.dmark+2)  
c653 32 67 ee			ld (debug_mark+2),a  
c656 18 03			jr .pastdmark  
c658 ..			.dmark: db "NS1"  
c65b f1			.pastdmark: pop af  
c65c			endm  
# End of macro DMARK
c65c						CALLMONITOR 
c65c cd 6f ee			call debug_vector  
c65f				endm  
# End of macro CALLMONITOR
c65f					endif 
c65f					FORTH_DSP_POP 
c65f cd 42 9d			call macro_forth_dsp_pop 
c662				endm 
# End of macro FORTH_DSP_POP
c662			 
c662 eb					ex de, hl 
c663 21 bb e2				ld hl, scratch 
c666					if DEBUG_FORTH_WORDS 
c666						DMARK "NS2" 
c666 f5				push af  
c667 3a 7b c6			ld a, (.dmark)  
c66a 32 65 ee			ld (debug_mark),a  
c66d 3a 7c c6			ld a, (.dmark+1)  
c670 32 66 ee			ld (debug_mark+1),a  
c673 3a 7d c6			ld a, (.dmark+2)  
c676 32 67 ee			ld (debug_mark+2),a  
c679 18 03			jr .pastdmark  
c67b ..			.dmark: db "NS2"  
c67e f1			.pastdmark: pop af  
c67f			endm  
# End of macro DMARK
c67f						CALLMONITOR 
c67f cd 6f ee			call debug_vector  
c682				endm  
# End of macro CALLMONITOR
c682					endif 
c682 cd ff 8f				call uitoa_16 
c685 21 bb e2				ld hl, scratch 
c688					if DEBUG_FORTH_WORDS 
c688						DMARK "NS3" 
c688 f5				push af  
c689 3a 9d c6			ld a, (.dmark)  
c68c 32 65 ee			ld (debug_mark),a  
c68f 3a 9e c6			ld a, (.dmark+1)  
c692 32 66 ee			ld (debug_mark+1),a  
c695 3a 9f c6			ld a, (.dmark+2)  
c698 32 67 ee			ld (debug_mark+2),a  
c69b 18 03			jr .pastdmark  
c69d ..			.dmark: db "NS3"  
c6a0 f1			.pastdmark: pop af  
c6a1			endm  
# End of macro DMARK
c6a1						CALLMONITOR 
c6a1 cd 6f ee			call debug_vector  
c6a4				endm  
# End of macro CALLMONITOR
c6a4					endif 
c6a4 cd f3 9a				call forth_push_str 
c6a7			;		ld a, l 
c6a7			;		call DispAToASCII   
c6a7			;;TODO need to chage above call to dump into string 
c6a7			; 
c6a7			; 
c6a7			 
c6a7				       NEXTW 
c6a7 c3 76 9e			jp macro_next 
c6aa				endm 
# End of macro NEXTW
c6aa			 
c6aa			.CONCAT: 
c6aa				CWHEAD .FIND 52 "CONCAT" 6 WORD_FLAG_CODE 
c6aa 48				db WORD_SYS_CORE+52             
c6ab 5d c7			dw .FIND            
c6ad 07				db 6 + 1 
c6ae .. 00			db "CONCAT",0              
c6b5				endm 
# End of macro CWHEAD
c6b5			; | CONCAT ( s1 s2 -- s3 ) A s1 + s2 is pushed onto the stack | DONE 
c6b5			 
c6b5			; TODO check string type 
c6b5			; TODO create macro to get pointer for next item on stack. Handy for lots of things 
c6b5			 
c6b5					if DEBUG_FORTH_WORDS_KEY 
c6b5						DMARK "CON" 
c6b5 f5				push af  
c6b6 3a ca c6			ld a, (.dmark)  
c6b9 32 65 ee			ld (debug_mark),a  
c6bc 3a cb c6			ld a, (.dmark+1)  
c6bf 32 66 ee			ld (debug_mark+1),a  
c6c2 3a cc c6			ld a, (.dmark+2)  
c6c5 32 67 ee			ld (debug_mark+2),a  
c6c8 18 03			jr .pastdmark  
c6ca ..			.dmark: db "CON"  
c6cd f1			.pastdmark: pop af  
c6ce			endm  
# End of macro DMARK
c6ce						CALLMONITOR 
c6ce cd 6f ee			call debug_vector  
c6d1				endm  
# End of macro CALLMONITOR
c6d1					endif 
c6d1			 
c6d1			 
c6d1					FORTH_DSP_VALUE 
c6d1 cd 73 9c			call macro_forth_dsp_value 
c6d4				endm 
# End of macro FORTH_DSP_VALUE
c6d4 e5					push hl   ; s2 
c6d5			 
c6d5					FORTH_DSP_POP 
c6d5 cd 42 9d			call macro_forth_dsp_pop 
c6d8				endm 
# End of macro FORTH_DSP_POP
c6d8			 
c6d8					FORTH_DSP_VALUE 
c6d8 cd 73 9c			call macro_forth_dsp_value 
c6db				endm 
# End of macro FORTH_DSP_VALUE
c6db			 
c6db e5					push hl   ; s1 
c6dc			 
c6dc					FORTH_DSP_POP 
c6dc cd 42 9d			call macro_forth_dsp_pop 
c6df				endm 
# End of macro FORTH_DSP_POP
c6df					 
c6df			 
c6df					; copy s1 
c6df			 
c6df				 
c6df					; save ptr 
c6df e1					pop hl  
c6e0 e5					push hl 
c6e1 3e 00				ld a, 0 
c6e3 cd 5b 90				call strlent 
c6e6					;inc hl    ; zer0 
c6e6 06 00				ld b, 0 
c6e8 4d					ld c, l 
c6e9 e1					pop hl		 
c6ea 11 bb e2				ld de, scratch	 
c6ed					if DEBUG_FORTH_WORDS 
c6ed						DMARK "CO1" 
c6ed f5				push af  
c6ee 3a 02 c7			ld a, (.dmark)  
c6f1 32 65 ee			ld (debug_mark),a  
c6f4 3a 03 c7			ld a, (.dmark+1)  
c6f7 32 66 ee			ld (debug_mark+1),a  
c6fa 3a 04 c7			ld a, (.dmark+2)  
c6fd 32 67 ee			ld (debug_mark+2),a  
c700 18 03			jr .pastdmark  
c702 ..			.dmark: db "CO1"  
c705 f1			.pastdmark: pop af  
c706			endm  
# End of macro DMARK
c706						CALLMONITOR 
c706 cd 6f ee			call debug_vector  
c709				endm  
# End of macro CALLMONITOR
c709					endif 
c709 ed b0				ldir 
c70b			 
c70b e1					pop hl 
c70c e5					push hl 
c70d d5					push de 
c70e			 
c70e			 
c70e 3e 00				ld a, 0 
c710 cd 5b 90				call strlent 
c713 23					inc hl    ; zer0 
c714 23					inc hl 
c715 06 00				ld b, 0 
c717 4d					ld c, l 
c718 d1					pop de 
c719 e1					pop hl		 
c71a					if DEBUG_FORTH_WORDS 
c71a						DMARK "CO2" 
c71a f5				push af  
c71b 3a 2f c7			ld a, (.dmark)  
c71e 32 65 ee			ld (debug_mark),a  
c721 3a 30 c7			ld a, (.dmark+1)  
c724 32 66 ee			ld (debug_mark+1),a  
c727 3a 31 c7			ld a, (.dmark+2)  
c72a 32 67 ee			ld (debug_mark+2),a  
c72d 18 03			jr .pastdmark  
c72f ..			.dmark: db "CO2"  
c732 f1			.pastdmark: pop af  
c733			endm  
# End of macro DMARK
c733						CALLMONITOR 
c733 cd 6f ee			call debug_vector  
c736				endm  
# End of macro CALLMONITOR
c736					endif 
c736 ed b0				ldir 
c738			 
c738			 
c738			 
c738 21 bb e2				ld hl, scratch 
c73b					if DEBUG_FORTH_WORDS 
c73b						DMARK "CO5" 
c73b f5				push af  
c73c 3a 50 c7			ld a, (.dmark)  
c73f 32 65 ee			ld (debug_mark),a  
c742 3a 51 c7			ld a, (.dmark+1)  
c745 32 66 ee			ld (debug_mark+1),a  
c748 3a 52 c7			ld a, (.dmark+2)  
c74b 32 67 ee			ld (debug_mark+2),a  
c74e 18 03			jr .pastdmark  
c750 ..			.dmark: db "CO5"  
c753 f1			.pastdmark: pop af  
c754			endm  
# End of macro DMARK
c754						CALLMONITOR 
c754 cd 6f ee			call debug_vector  
c757				endm  
# End of macro CALLMONITOR
c757					endif 
c757			 
c757 cd f3 9a				call forth_push_str 
c75a			 
c75a			 
c75a			 
c75a			 
c75a				       NEXTW 
c75a c3 76 9e			jp macro_next 
c75d				endm 
# End of macro NEXTW
c75d			 
c75d			 
c75d			.FIND: 
c75d				CWHEAD .LEN 55 "FIND" 4 WORD_FLAG_CODE 
c75d 4b				db WORD_SYS_CORE+55             
c75e 1b c8			dw .LEN            
c760 05				db 4 + 1 
c761 .. 00			db "FIND",0              
c766				endm 
# End of macro CWHEAD
c766			; | FIND ( s c -- s u ) Search the string s for the char c and push the position of the first occurance to TOS | DONE 
c766			 
c766					if DEBUG_FORTH_WORDS_KEY 
c766						DMARK "FND" 
c766 f5				push af  
c767 3a 7b c7			ld a, (.dmark)  
c76a 32 65 ee			ld (debug_mark),a  
c76d 3a 7c c7			ld a, (.dmark+1)  
c770 32 66 ee			ld (debug_mark+1),a  
c773 3a 7d c7			ld a, (.dmark+2)  
c776 32 67 ee			ld (debug_mark+2),a  
c779 18 03			jr .pastdmark  
c77b ..			.dmark: db "FND"  
c77e f1			.pastdmark: pop af  
c77f			endm  
# End of macro DMARK
c77f						CALLMONITOR 
c77f cd 6f ee			call debug_vector  
c782				endm  
# End of macro CALLMONITOR
c782					endif 
c782			 
c782			; TODO check string type 
c782					FORTH_DSP_VALUE 
c782 cd 73 9c			call macro_forth_dsp_value 
c785				endm 
# End of macro FORTH_DSP_VALUE
c785			 
c785 e5					push hl    
c786 7e					ld a,(hl)    ; char to find   
c787			; TODO change char to substr 
c787			 
c787 f5					push af 
c788					 
c788			 
c788			 
c788					if DEBUG_FORTH_WORDS 
c788						DMARK "FN1" 
c788 f5				push af  
c789 3a 9d c7			ld a, (.dmark)  
c78c 32 65 ee			ld (debug_mark),a  
c78f 3a 9e c7			ld a, (.dmark+1)  
c792 32 66 ee			ld (debug_mark+1),a  
c795 3a 9f c7			ld a, (.dmark+2)  
c798 32 67 ee			ld (debug_mark+2),a  
c79b 18 03			jr .pastdmark  
c79d ..			.dmark: db "FN1"  
c7a0 f1			.pastdmark: pop af  
c7a1			endm  
# End of macro DMARK
c7a1						CALLMONITOR 
c7a1 cd 6f ee			call debug_vector  
c7a4				endm  
# End of macro CALLMONITOR
c7a4					endif 
c7a4			 
c7a4					FORTH_DSP_POP 
c7a4 cd 42 9d			call macro_forth_dsp_pop 
c7a7				endm 
# End of macro FORTH_DSP_POP
c7a7			 
c7a7					; string to search 
c7a7			 
c7a7					FORTH_DSP_VALUE 
c7a7 cd 73 9c			call macro_forth_dsp_value 
c7aa				endm 
# End of macro FORTH_DSP_VALUE
c7aa			 
c7aa d1					pop de  ; d is char to find  
c7ab			 
c7ab					if DEBUG_FORTH_WORDS 
c7ab						DMARK "FN2" 
c7ab f5				push af  
c7ac 3a c0 c7			ld a, (.dmark)  
c7af 32 65 ee			ld (debug_mark),a  
c7b2 3a c1 c7			ld a, (.dmark+1)  
c7b5 32 66 ee			ld (debug_mark+1),a  
c7b8 3a c2 c7			ld a, (.dmark+2)  
c7bb 32 67 ee			ld (debug_mark+2),a  
c7be 18 03			jr .pastdmark  
c7c0 ..			.dmark: db "FN2"  
c7c3 f1			.pastdmark: pop af  
c7c4			endm  
# End of macro DMARK
c7c4						CALLMONITOR 
c7c4 cd 6f ee			call debug_vector  
c7c7				endm  
# End of macro CALLMONITOR
c7c7					endif 
c7c7					 
c7c7 01 00 00				ld bc, 0 
c7ca 7e			.findchar:      ld a,(hl) 
c7cb fe 00				cp 0   		 
c7cd 28 27				jr z, .finddone     
c7cf ba					cp d 
c7d0 28 20				jr z, .foundchar 
c7d2 03					inc bc 
c7d3 23					inc hl 
c7d4					if DEBUG_FORTH_WORDS 
c7d4						DMARK "FN3" 
c7d4 f5				push af  
c7d5 3a e9 c7			ld a, (.dmark)  
c7d8 32 65 ee			ld (debug_mark),a  
c7db 3a ea c7			ld a, (.dmark+1)  
c7de 32 66 ee			ld (debug_mark+1),a  
c7e1 3a eb c7			ld a, (.dmark+2)  
c7e4 32 67 ee			ld (debug_mark+2),a  
c7e7 18 03			jr .pastdmark  
c7e9 ..			.dmark: db "FN3"  
c7ec f1			.pastdmark: pop af  
c7ed			endm  
# End of macro DMARK
c7ed						CALLMONITOR 
c7ed cd 6f ee			call debug_vector  
c7f0				endm  
# End of macro CALLMONITOR
c7f0					endif 
c7f0 18 d8				jr .findchar 
c7f2			 
c7f2			 
c7f2 c5			.foundchar:	push bc 
c7f3 e1					pop hl 
c7f4 18 03				jr .findexit 
c7f6			 
c7f6			 
c7f6							 
c7f6			 
c7f6			.finddone:     ; got to end of string with no find 
c7f6 21 00 00				ld hl, 0 
c7f9			.findexit: 
c7f9			 
c7f9					if DEBUG_FORTH_WORDS 
c7f9						DMARK "FNd" 
c7f9 f5				push af  
c7fa 3a 0e c8			ld a, (.dmark)  
c7fd 32 65 ee			ld (debug_mark),a  
c800 3a 0f c8			ld a, (.dmark+1)  
c803 32 66 ee			ld (debug_mark+1),a  
c806 3a 10 c8			ld a, (.dmark+2)  
c809 32 67 ee			ld (debug_mark+2),a  
c80c 18 03			jr .pastdmark  
c80e ..			.dmark: db "FNd"  
c811 f1			.pastdmark: pop af  
c812			endm  
# End of macro DMARK
c812						CALLMONITOR 
c812 cd 6f ee			call debug_vector  
c815				endm  
# End of macro CALLMONITOR
c815					endif 
c815 cd 85 9a			call forth_push_numhl 
c818			 
c818				       NEXTW 
c818 c3 76 9e			jp macro_next 
c81b				endm 
# End of macro NEXTW
c81b			 
c81b			.LEN: 
c81b				CWHEAD .ASC 56 "COUNT" 5 WORD_FLAG_CODE 
c81b 4c				db WORD_SYS_CORE+56             
c81c 85 c8			dw .ASC            
c81e 06				db 5 + 1 
c81f .. 00			db "COUNT",0              
c825				endm 
# End of macro CWHEAD
c825			; | COUNT (  str -- str u1 ) Push the length of the string str on TOS as u1 | DONE 
c825			 
c825					if DEBUG_FORTH_WORDS_KEY 
c825						DMARK "CNT" 
c825 f5				push af  
c826 3a 3a c8			ld a, (.dmark)  
c829 32 65 ee			ld (debug_mark),a  
c82c 3a 3b c8			ld a, (.dmark+1)  
c82f 32 66 ee			ld (debug_mark+1),a  
c832 3a 3c c8			ld a, (.dmark+2)  
c835 32 67 ee			ld (debug_mark+2),a  
c838 18 03			jr .pastdmark  
c83a ..			.dmark: db "CNT"  
c83d f1			.pastdmark: pop af  
c83e			endm  
# End of macro DMARK
c83e						CALLMONITOR 
c83e cd 6f ee			call debug_vector  
c841				endm  
# End of macro CALLMONITOR
c841					endif 
c841			; TODO check string type 
c841					FORTH_DSP_VALUE 
c841 cd 73 9c			call macro_forth_dsp_value 
c844				endm 
# End of macro FORTH_DSP_VALUE
c844			 
c844			 
c844					if DEBUG_FORTH_WORDS 
c844						DMARK "CN?" 
c844 f5				push af  
c845 3a 59 c8			ld a, (.dmark)  
c848 32 65 ee			ld (debug_mark),a  
c84b 3a 5a c8			ld a, (.dmark+1)  
c84e 32 66 ee			ld (debug_mark+1),a  
c851 3a 5b c8			ld a, (.dmark+2)  
c854 32 67 ee			ld (debug_mark+2),a  
c857 18 03			jr .pastdmark  
c859 ..			.dmark: db "CN?"  
c85c f1			.pastdmark: pop af  
c85d			endm  
# End of macro DMARK
c85d						CALLMONITOR 
c85d cd 6f ee			call debug_vector  
c860				endm  
# End of macro CALLMONITOR
c860					endif 
c860 cd 50 90				call strlenz 
c863					if DEBUG_FORTH_WORDS 
c863						DMARK "CNl" 
c863 f5				push af  
c864 3a 78 c8			ld a, (.dmark)  
c867 32 65 ee			ld (debug_mark),a  
c86a 3a 79 c8			ld a, (.dmark+1)  
c86d 32 66 ee			ld (debug_mark+1),a  
c870 3a 7a c8			ld a, (.dmark+2)  
c873 32 67 ee			ld (debug_mark+2),a  
c876 18 03			jr .pastdmark  
c878 ..			.dmark: db "CNl"  
c87b f1			.pastdmark: pop af  
c87c			endm  
# End of macro DMARK
c87c						CALLMONITOR 
c87c cd 6f ee			call debug_vector  
c87f				endm  
# End of macro CALLMONITOR
c87f					endif 
c87f			 
c87f cd 85 9a				call forth_push_numhl 
c882			 
c882			 
c882			 
c882				       NEXTW 
c882 c3 76 9e			jp macro_next 
c885				endm 
# End of macro NEXTW
c885			.ASC: 
c885				CWHEAD .CHR 57 "ASC" 3 WORD_FLAG_CODE 
c885 4d				db WORD_SYS_CORE+57             
c886 f3 c8			dw .CHR            
c888 04				db 3 + 1 
c889 .. 00			db "ASC",0              
c88d				endm 
# End of macro CWHEAD
c88d			; | ASC ( u -- n ) Get the ASCII value of the first character of the string on TOS | DONE 
c88d					if DEBUG_FORTH_WORDS_KEY 
c88d						DMARK "ASC" 
c88d f5				push af  
c88e 3a a2 c8			ld a, (.dmark)  
c891 32 65 ee			ld (debug_mark),a  
c894 3a a3 c8			ld a, (.dmark+1)  
c897 32 66 ee			ld (debug_mark+1),a  
c89a 3a a4 c8			ld a, (.dmark+2)  
c89d 32 67 ee			ld (debug_mark+2),a  
c8a0 18 03			jr .pastdmark  
c8a2 ..			.dmark: db "ASC"  
c8a5 f1			.pastdmark: pop af  
c8a6			endm  
# End of macro DMARK
c8a6						CALLMONITOR 
c8a6 cd 6f ee			call debug_vector  
c8a9				endm  
# End of macro CALLMONITOR
c8a9					endif 
c8a9					FORTH_DSP_VALUE 
c8a9 cd 73 9c			call macro_forth_dsp_value 
c8ac				endm 
# End of macro FORTH_DSP_VALUE
c8ac					;v5 FORTH_DSP_VALUE 
c8ac			;		inc hl      ; now at start of numeric as string 
c8ac			 
c8ac e5					push hl 
c8ad			 
c8ad					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c8ad cd 42 9d			call macro_forth_dsp_pop 
c8b0				endm 
# End of macro FORTH_DSP_POP
c8b0			 
c8b0 e1					pop hl 
c8b1			 
c8b1					if DEBUG_FORTH_WORDS 
c8b1						DMARK "AS1" 
c8b1 f5				push af  
c8b2 3a c6 c8			ld a, (.dmark)  
c8b5 32 65 ee			ld (debug_mark),a  
c8b8 3a c7 c8			ld a, (.dmark+1)  
c8bb 32 66 ee			ld (debug_mark+1),a  
c8be 3a c8 c8			ld a, (.dmark+2)  
c8c1 32 67 ee			ld (debug_mark+2),a  
c8c4 18 03			jr .pastdmark  
c8c6 ..			.dmark: db "AS1"  
c8c9 f1			.pastdmark: pop af  
c8ca			endm  
# End of macro DMARK
c8ca						CALLMONITOR 
c8ca cd 6f ee			call debug_vector  
c8cd				endm  
# End of macro CALLMONITOR
c8cd					endif 
c8cd					; push the content of a onto the stack as a value 
c8cd			 
c8cd 7e					ld a,(hl)   ; get char 
c8ce 26 00				ld h,0 
c8d0 6f					ld l,a 
c8d1					if DEBUG_FORTH_WORDS 
c8d1						DMARK "AS2" 
c8d1 f5				push af  
c8d2 3a e6 c8			ld a, (.dmark)  
c8d5 32 65 ee			ld (debug_mark),a  
c8d8 3a e7 c8			ld a, (.dmark+1)  
c8db 32 66 ee			ld (debug_mark+1),a  
c8de 3a e8 c8			ld a, (.dmark+2)  
c8e1 32 67 ee			ld (debug_mark+2),a  
c8e4 18 03			jr .pastdmark  
c8e6 ..			.dmark: db "AS2"  
c8e9 f1			.pastdmark: pop af  
c8ea			endm  
# End of macro DMARK
c8ea						CALLMONITOR 
c8ea cd 6f ee			call debug_vector  
c8ed				endm  
# End of macro CALLMONITOR
c8ed					endif 
c8ed cd 85 9a				call forth_push_numhl 
c8f0			 
c8f0				       NEXTW 
c8f0 c3 76 9e			jp macro_next 
c8f3				endm 
# End of macro NEXTW
c8f3			 
c8f3			.CHR: 
c8f3				CWHEAD .ENDSTR 57 "CHR" 3 WORD_FLAG_CODE 
c8f3 4d				db WORD_SYS_CORE+57             
c8f4 2f c9			dw .ENDSTR            
c8f6 04				db 3 + 1 
c8f7 .. 00			db "CHR",0              
c8fb				endm 
# End of macro CWHEAD
c8fb			; | CHR ( u -- n ) The ASCII character value of u is turned into a string n on the stack | DONE 
c8fb					if DEBUG_FORTH_WORDS_KEY 
c8fb						DMARK "CHR" 
c8fb f5				push af  
c8fc 3a 10 c9			ld a, (.dmark)  
c8ff 32 65 ee			ld (debug_mark),a  
c902 3a 11 c9			ld a, (.dmark+1)  
c905 32 66 ee			ld (debug_mark+1),a  
c908 3a 12 c9			ld a, (.dmark+2)  
c90b 32 67 ee			ld (debug_mark+2),a  
c90e 18 03			jr .pastdmark  
c910 ..			.dmark: db "CHR"  
c913 f1			.pastdmark: pop af  
c914			endm  
# End of macro DMARK
c914						CALLMONITOR 
c914 cd 6f ee			call debug_vector  
c917				endm  
# End of macro CALLMONITOR
c917					endif 
c917					FORTH_DSP_VALUEHL 
c917 cd 8a 9c			call macro_dsp_valuehl 
c91a				endm 
# End of macro FORTH_DSP_VALUEHL
c91a			 
c91a					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c91a cd 42 9d			call macro_forth_dsp_pop 
c91d				endm 
# End of macro FORTH_DSP_POP
c91d			 
c91d					; save asci byte as a zero term string and push string 
c91d			 
c91d 7d					ld a,l 
c91e 32 bb e2				ld (scratch), a 
c921			 
c921 3e 00				ld a, 0 
c923 32 bc e2				ld (scratch+1), a 
c926			 
c926 21 bb e2				ld hl, scratch 
c929 cd f3 9a				call forth_push_str 
c92c			 
c92c			 
c92c				       NEXTW 
c92c c3 76 9e			jp macro_next 
c92f				endm 
# End of macro NEXTW
c92f			 
c92f			 
c92f			 
c92f			 
c92f			.ENDSTR: 
c92f			; eof 
c92f			 
# End of file forth_words_str.asm
c92f			include "forth_words_key.asm" 
c92f			 
c92f			; | ## Keyboard Words 
c92f			 
c92f			.KEY: 
c92f				CWHEAD .KEYDB 42 "KEY" 3 WORD_FLAG_CODE 
c92f 3e				db WORD_SYS_CORE+42             
c930 5f c9			dw .KEYDB            
c932 04				db 3 + 1 
c933 .. 00			db "KEY",0              
c937				endm 
# End of macro CWHEAD
c937			; | KEY ( -- u ) A non-blocking read of keypress | DONE 
c937			; | | The ASCII key (or key code) is pushed to stack. If no key is currently held down then push a 0 
c937			; | | Can use something like this to process: 
c937			; | | > repeat active . key ?dup if emit then #1 until  
c937			 
c937					if DEBUG_FORTH_WORDS_KEY 
c937						DMARK "KEY" 
c937 f5				push af  
c938 3a 4c c9			ld a, (.dmark)  
c93b 32 65 ee			ld (debug_mark),a  
c93e 3a 4d c9			ld a, (.dmark+1)  
c941 32 66 ee			ld (debug_mark+1),a  
c944 3a 4e c9			ld a, (.dmark+2)  
c947 32 67 ee			ld (debug_mark+2),a  
c94a 18 03			jr .pastdmark  
c94c ..			.dmark: db "KEY"  
c94f f1			.pastdmark: pop af  
c950			endm  
# End of macro DMARK
c950						CALLMONITOR 
c950 cd 6f ee			call debug_vector  
c953				endm  
# End of macro CALLMONITOR
c953					endif 
c953			; TODO currently waits 
c953 cd 4d e0				call cinndb 
c956					;call cin_wait 
c956 6f					ld l, a 
c957 26 00				ld h, 0 
c959 cd 85 9a				call forth_push_numhl 
c95c					NEXTW 
c95c c3 76 9e			jp macro_next 
c95f				endm 
# End of macro NEXTW
c95f			.KEYDB: 
c95f				CWHEAD .WAITK 42 "KEYDB" 5 WORD_FLAG_CODE 
c95f 3e				db WORD_SYS_CORE+42             
c960 91 c9			dw .WAITK            
c962 06				db 5 + 1 
c963 .. 00			db "KEYDB",0              
c969				endm 
# End of macro CWHEAD
c969			; | KEYDB ( -- u ) A non-blocking read of keypress with key release debounce | DONE 
c969			; | | The ASCII key (or key code) is pushed to stack. If no key is currently held down then push a 0 
c969			; | | Can use something like this to process: 
c969			; | | > repeat active . key ?dup if emit then #1 until  
c969			 
c969					if DEBUG_FORTH_WORDS_KEY 
c969						DMARK "KEB" 
c969 f5				push af  
c96a 3a 7e c9			ld a, (.dmark)  
c96d 32 65 ee			ld (debug_mark),a  
c970 3a 7f c9			ld a, (.dmark+1)  
c973 32 66 ee			ld (debug_mark+1),a  
c976 3a 80 c9			ld a, (.dmark+2)  
c979 32 67 ee			ld (debug_mark+2),a  
c97c 18 03			jr .pastdmark  
c97e ..			.dmark: db "KEB"  
c981 f1			.pastdmark: pop af  
c982			endm  
# End of macro DMARK
c982						CALLMONITOR 
c982 cd 6f ee			call debug_vector  
c985				endm  
# End of macro CALLMONITOR
c985					endif 
c985			; TODO currently waits 
c985 cd 4d e0				call cin 
c988					;call cin_wait 
c988 6f					ld l, a 
c989 26 00				ld h, 0 
c98b cd 85 9a				call forth_push_numhl 
c98e					NEXTW 
c98e c3 76 9e			jp macro_next 
c991				endm 
# End of macro NEXTW
c991			.WAITK: 
c991				CWHEAD .ACCEPT 43 "WAITK" 5 WORD_FLAG_CODE 
c991 3f				db WORD_SYS_CORE+43             
c992 c3 c9			dw .ACCEPT            
c994 06				db 5 + 1 
c995 .. 00			db "WAITK",0              
c99b				endm 
# End of macro CWHEAD
c99b			; | WAITK ( -- w ) Wait for keypress TOS is key press | DONE 
c99b					if DEBUG_FORTH_WORDS_KEY 
c99b						DMARK "WAI" 
c99b f5				push af  
c99c 3a b0 c9			ld a, (.dmark)  
c99f 32 65 ee			ld (debug_mark),a  
c9a2 3a b1 c9			ld a, (.dmark+1)  
c9a5 32 66 ee			ld (debug_mark+1),a  
c9a8 3a b2 c9			ld a, (.dmark+2)  
c9ab 32 67 ee			ld (debug_mark+2),a  
c9ae 18 03			jr .pastdmark  
c9b0 ..			.dmark: db "WAI"  
c9b3 f1			.pastdmark: pop af  
c9b4			endm  
# End of macro DMARK
c9b4						CALLMONITOR 
c9b4 cd 6f ee			call debug_vector  
c9b7				endm  
# End of macro CALLMONITOR
c9b7					endif 
c9b7 cd 47 e0				call cin_wait 
c9ba 6f					ld l, a 
c9bb 26 00				ld h, 0 
c9bd cd 85 9a				call forth_push_numhl 
c9c0					NEXTW 
c9c0 c3 76 9e			jp macro_next 
c9c3				endm 
# End of macro NEXTW
c9c3			.ACCEPT: 
c9c3				CWHEAD .EDIT 44 "ACCEPT" 6 WORD_FLAG_CODE 
c9c3 40				db WORD_SYS_CORE+44             
c9c4 21 ca			dw .EDIT            
c9c6 07				db 6 + 1 
c9c7 .. 00			db "ACCEPT",0              
c9ce				endm 
# End of macro CWHEAD
c9ce			; | ACCEPT ( -- w ) Prompt for text input and push pointer to string | DONE 
c9ce					; TODO crashes on push 
c9ce					if DEBUG_FORTH_WORDS_KEY 
c9ce						DMARK "ACC" 
c9ce f5				push af  
c9cf 3a e3 c9			ld a, (.dmark)  
c9d2 32 65 ee			ld (debug_mark),a  
c9d5 3a e4 c9			ld a, (.dmark+1)  
c9d8 32 66 ee			ld (debug_mark+1),a  
c9db 3a e5 c9			ld a, (.dmark+2)  
c9de 32 67 ee			ld (debug_mark+2),a  
c9e1 18 03			jr .pastdmark  
c9e3 ..			.dmark: db "ACC"  
c9e6 f1			.pastdmark: pop af  
c9e7			endm  
# End of macro DMARK
c9e7						CALLMONITOR 
c9e7 cd 6f ee			call debug_vector  
c9ea				endm  
# End of macro CALLMONITOR
c9ea					endif 
c9ea 21 b9 e4				ld hl, os_input 
c9ed 3e 00				ld a, 0 
c9ef 77					ld (hl),a 
c9f0 3a 58 ea				ld a,(f_cursor_ptr) 
c9f3 16 64				ld d, 100 
c9f5 0e 00				ld c, 0 
c9f7 1e 28				ld e, 40 
c9f9 cd 17 8d				call input_str 
c9fc					; TODO perhaps do a type check and wrap in quotes if not a number 
c9fc 21 b9 e4				ld hl, os_input 
c9ff					if DEBUG_FORTH_WORDS 
c9ff						DMARK "AC1" 
c9ff f5				push af  
ca00 3a 14 ca			ld a, (.dmark)  
ca03 32 65 ee			ld (debug_mark),a  
ca06 3a 15 ca			ld a, (.dmark+1)  
ca09 32 66 ee			ld (debug_mark+1),a  
ca0c 3a 16 ca			ld a, (.dmark+2)  
ca0f 32 67 ee			ld (debug_mark+2),a  
ca12 18 03			jr .pastdmark  
ca14 ..			.dmark: db "AC1"  
ca17 f1			.pastdmark: pop af  
ca18			endm  
# End of macro DMARK
ca18						CALLMONITOR 
ca18 cd 6f ee			call debug_vector  
ca1b				endm  
# End of macro CALLMONITOR
ca1b					endif 
ca1b cd f3 9a				call forth_push_str 
ca1e					NEXTW 
ca1e c3 76 9e			jp macro_next 
ca21				endm 
# End of macro NEXTW
ca21			 
ca21			.EDIT: 
ca21				CWHEAD .DEDIT 44 "EDIT" 4 WORD_FLAG_CODE 
ca21 40				db WORD_SYS_CORE+44             
ca22 c3 ca			dw .DEDIT            
ca24 05				db 4 + 1 
ca25 .. 00			db "EDIT",0              
ca2a				endm 
# End of macro CWHEAD
ca2a			; | EDIT ( u -- u ) Takes string on TOS and allows editing of it. Pushes it back once done. | DONE 
ca2a			 
ca2a					; TODO does not copy from stack 
ca2a					if DEBUG_FORTH_WORDS_KEY 
ca2a						DMARK "EDT" 
ca2a f5				push af  
ca2b 3a 3f ca			ld a, (.dmark)  
ca2e 32 65 ee			ld (debug_mark),a  
ca31 3a 40 ca			ld a, (.dmark+1)  
ca34 32 66 ee			ld (debug_mark+1),a  
ca37 3a 41 ca			ld a, (.dmark+2)  
ca3a 32 67 ee			ld (debug_mark+2),a  
ca3d 18 03			jr .pastdmark  
ca3f ..			.dmark: db "EDT"  
ca42 f1			.pastdmark: pop af  
ca43			endm  
# End of macro DMARK
ca43						CALLMONITOR 
ca43 cd 6f ee			call debug_vector  
ca46				endm  
# End of macro CALLMONITOR
ca46					endif 
ca46			 
ca46					;FORTH_DSP 
ca46					FORTH_DSP_VALUEHL 
ca46 cd 8a 9c			call macro_dsp_valuehl 
ca49				endm 
# End of macro FORTH_DSP_VALUEHL
ca49			;		inc hl    ; TODO do type check 
ca49			 
ca49			;		call get_word_hl 
ca49 e5					push hl 
ca4a					if DEBUG_FORTH_WORDS 
ca4a						DMARK "EDp" 
ca4a f5				push af  
ca4b 3a 5f ca			ld a, (.dmark)  
ca4e 32 65 ee			ld (debug_mark),a  
ca51 3a 60 ca			ld a, (.dmark+1)  
ca54 32 66 ee			ld (debug_mark+1),a  
ca57 3a 61 ca			ld a, (.dmark+2)  
ca5a 32 67 ee			ld (debug_mark+2),a  
ca5d 18 03			jr .pastdmark  
ca5f ..			.dmark: db "EDp"  
ca62 f1			.pastdmark: pop af  
ca63			endm  
# End of macro DMARK
ca63						CALLMONITOR 
ca63 cd 6f ee			call debug_vector  
ca66				endm  
# End of macro CALLMONITOR
ca66					endif 
ca66				;	ld a, 0 
ca66 cd 50 90				call strlenz 
ca69 23					inc hl 
ca6a			 
ca6a 06 00				ld b, 0 
ca6c 4d					ld c, l 
ca6d			 
ca6d e1					pop hl 
ca6e 11 b9 e4				ld de, os_input 
ca71					if DEBUG_FORTH_WORDS_KEY 
ca71						DMARK "EDc" 
ca71 f5				push af  
ca72 3a 86 ca			ld a, (.dmark)  
ca75 32 65 ee			ld (debug_mark),a  
ca78 3a 87 ca			ld a, (.dmark+1)  
ca7b 32 66 ee			ld (debug_mark+1),a  
ca7e 3a 88 ca			ld a, (.dmark+2)  
ca81 32 67 ee			ld (debug_mark+2),a  
ca84 18 03			jr .pastdmark  
ca86 ..			.dmark: db "EDc"  
ca89 f1			.pastdmark: pop af  
ca8a			endm  
# End of macro DMARK
ca8a						CALLMONITOR 
ca8a cd 6f ee			call debug_vector  
ca8d				endm  
# End of macro CALLMONITOR
ca8d					endif 
ca8d ed b0				ldir 
ca8f			 
ca8f			 
ca8f 21 b9 e4				ld hl, os_input 
ca92					;ld a, 0 
ca92					;ld (hl),a 
ca92 3a 58 ea				ld a,(f_cursor_ptr) 
ca95 16 64				ld d, 100 
ca97 0e 00				ld c, 0 
ca99 1e 28				ld e, 40 
ca9b cd 17 8d				call input_str 
ca9e					; TODO perhaps do a type check and wrap in quotes if not a number 
ca9e 21 b9 e4				ld hl, os_input 
caa1					if DEBUG_FORTH_WORDS 
caa1						DMARK "ED1" 
caa1 f5				push af  
caa2 3a b6 ca			ld a, (.dmark)  
caa5 32 65 ee			ld (debug_mark),a  
caa8 3a b7 ca			ld a, (.dmark+1)  
caab 32 66 ee			ld (debug_mark+1),a  
caae 3a b8 ca			ld a, (.dmark+2)  
cab1 32 67 ee			ld (debug_mark+2),a  
cab4 18 03			jr .pastdmark  
cab6 ..			.dmark: db "ED1"  
cab9 f1			.pastdmark: pop af  
caba			endm  
# End of macro DMARK
caba						CALLMONITOR 
caba cd 6f ee			call debug_vector  
cabd				endm  
# End of macro CALLMONITOR
cabd					endif 
cabd cd f3 9a				call forth_push_str 
cac0					NEXTW 
cac0 c3 76 9e			jp macro_next 
cac3				endm 
# End of macro NEXTW
cac3			 
cac3			.DEDIT: 
cac3				CWHEAD .ENDKEY 44 "DEDIT" 5 WORD_FLAG_CODE 
cac3 40				db WORD_SYS_CORE+44             
cac4 25 cb			dw .ENDKEY            
cac6 06				db 5 + 1 
cac7 .. 00			db "DEDIT",0              
cacd				endm 
# End of macro CWHEAD
cacd			; | DEDIT ( ptr --  ) Takes an address for direct editing in memory. | DONE 
cacd			 
cacd					; TODO does not copy from stack 
cacd					if DEBUG_FORTH_WORDS_KEY 
cacd						DMARK "DED" 
cacd f5				push af  
cace 3a e2 ca			ld a, (.dmark)  
cad1 32 65 ee			ld (debug_mark),a  
cad4 3a e3 ca			ld a, (.dmark+1)  
cad7 32 66 ee			ld (debug_mark+1),a  
cada 3a e4 ca			ld a, (.dmark+2)  
cadd 32 67 ee			ld (debug_mark+2),a  
cae0 18 03			jr .pastdmark  
cae2 ..			.dmark: db "DED"  
cae5 f1			.pastdmark: pop af  
cae6			endm  
# End of macro DMARK
cae6						CALLMONITOR 
cae6 cd 6f ee			call debug_vector  
cae9				endm  
# End of macro CALLMONITOR
cae9					endif 
cae9			 
cae9					;FORTH_DSP 
cae9					FORTH_DSP_VALUEHL 
cae9 cd 8a 9c			call macro_dsp_valuehl 
caec				endm 
# End of macro FORTH_DSP_VALUEHL
caec			;		inc hl    ; TODO do type check 
caec			 
caec			;		call get_word_hl 
caec e5					push hl 
caed e5					push hl 
caee					FORTH_DSP_POP 
caee cd 42 9d			call macro_forth_dsp_pop 
caf1				endm 
# End of macro FORTH_DSP_POP
caf1 e1					pop hl 
caf2					if DEBUG_FORTH_WORDS 
caf2						DMARK "EDp" 
caf2 f5				push af  
caf3 3a 07 cb			ld a, (.dmark)  
caf6 32 65 ee			ld (debug_mark),a  
caf9 3a 08 cb			ld a, (.dmark+1)  
cafc 32 66 ee			ld (debug_mark+1),a  
caff 3a 09 cb			ld a, (.dmark+2)  
cb02 32 67 ee			ld (debug_mark+2),a  
cb05 18 03			jr .pastdmark  
cb07 ..			.dmark: db "EDp"  
cb0a f1			.pastdmark: pop af  
cb0b			endm  
# End of macro DMARK
cb0b						CALLMONITOR 
cb0b cd 6f ee			call debug_vector  
cb0e				endm  
# End of macro CALLMONITOR
cb0e					endif 
cb0e				;	ld a, 0 
cb0e cd 50 90				call strlenz 
cb11 23					inc hl 
cb12			 
cb12 06 00				ld b, 0 
cb14 4d					ld c, l 
cb15			 
cb15 e1					pop hl 
cb16			 
cb16					;ld a, 0 
cb16					;ld (hl),a 
cb16 3a 58 ea				ld a,(f_cursor_ptr) 
cb19 16 64				ld d, 100 
cb1b 0e 00				ld c, 0 
cb1d 1e 28				ld e, 40 
cb1f cd 17 8d				call input_str 
cb22					; TODO perhaps do a type check and wrap in quotes if not a number 
cb22					NEXTW 
cb22 c3 76 9e			jp macro_next 
cb25				endm 
# End of macro NEXTW
cb25			 
cb25			 
cb25			.ENDKEY: 
cb25			; eof 
cb25			 
# End of file forth_words_key.asm
cb25			include "forth_words_const.asm" 
cb25			 
cb25			; | ## Constants (i.e. Useful memory addresses that can set or get features) 
cb25			 
cb25			 
cb25			.SPITIME: 
cb25				CWHEAD .VA 99 "SPITIME" 7 WORD_FLAG_CODE 
cb25 77				db WORD_SYS_CORE+99             
cb26 3a cb			dw .VA            
cb28 08				db 7 + 1 
cb29 .. 00			db "SPITIME",0              
cb31				endm 
# End of macro CWHEAD
cb31			; | SPITIME ( -- u1 )   Pushes address of the SPI pulse counter/delay to stack | DONE 
cb31			; 
cb31			; | | If using BANK devices then leave as is. 
cb31			; | | Only really useful for the CARTDEV where other devices may be far too slow. In particular 
cb31			; | | the multiplexing of the PicoSPINet addon which might not be running fast enough for all of the nodes 
cb31			 
cb31 21 5e ea				ld hl, spi_clktime  
cb34 cd 85 9a				call forth_push_numhl 
cb37			 
cb37					NEXTW 
cb37 c3 76 9e			jp macro_next 
cb3a				endm 
# End of macro NEXTW
cb3a			 
cb3a			 
cb3a			.VA: 
cb3a				CWHEAD .SYMBOL 99 "VA" 2 WORD_FLAG_CODE 
cb3a 77				db WORD_SYS_CORE+99             
cb3b 4a cb			dw .SYMBOL            
cb3d 03				db 2 + 1 
cb3e .. 00			db "VA",0              
cb41				endm 
# End of macro CWHEAD
cb41			; | VA ( -- u1 )   Pushes address of block of memory used for v1..5 | DONE 
cb41 21 22 ea				ld hl, cli_var_array 
cb44 cd 85 9a				call forth_push_numhl 
cb47			 
cb47					NEXTW 
cb47 c3 76 9e			jp macro_next 
cb4a				endm 
# End of macro NEXTW
cb4a			 
cb4a			.SYMBOL: 
cb4a				CWHEAD .ENDCONST 99 "SYMBOL" 6 WORD_FLAG_CODE 
cb4a 77				db WORD_SYS_CORE+99             
cb4b 54 cc			dw .ENDCONST            
cb4d 07				db 6 + 1 
cb4e .. 00			db "SYMBOL",0              
cb55				endm 
# End of macro CWHEAD
cb55			; | SYMBOL ( u1 -- )  Get the address of a system symbol from a look up table to TOS  | DONE 
cb55			; | 
cb55			; | | The value is the number reference and the final address is pushed to stack 
cb55			 
cb55			; | | ``` 
cb55			; | | dw sym_table 
cb55			; | | dw nmi_vector 
cb55			; | | dw cli_autodisplay 
cb55			; | | dw cli_data_sp 
cb55			; | | dw cli_data_stack 
cb55			; | | dw cli_loop_sp 
cb55			; | | dw cli_loop_stack 
cb55			; | | dw cli_var_array 
cb55			; | | dw cursor_col 
cb55			; | | dw cursor_ptr 
cb55			; | | ; 10 
cb55			; | | dw cursor_row 
cb55			; | | dw debug_mark 
cb55			; | | dw display_fb0 
cb55			; | | dw display_fb1 
cb55			; | | dw display_fb2 
cb55			; | | dw display_fb3 
cb55			; | | dw display_fb_active 
cb55			; | | dw execscratch 
cb55			; | | dw f_cursor_ptr 
cb55			; | | dw hardware_word 
cb55			; | | ;20 
cb55			; | | dw input_at_cursor 
cb55			; | | dw input_at_pos 
cb55			; | | dw input_cur_flash 
cb55			; | | dw input_cur_onoff 
cb55			; | | dw input_cursor 
cb55			; | | dw input_display_size 
cb55			; | | dw input_len 
cb55			; | | dw input_ptr 
cb55			; | | dw input_size 
cb55			; | | dw input_start 
cb55			; | | ; 30 
cb55			; | | dw input_str 
cb55			; | | dw input_under_cursor 
cb55			; | | dw os_cli_cmd 
cb55			; | | dw os_cur_ptr 
cb55			; | | dw os_current_i 
cb55			; | | dw os_input 
cb55			; | | dw os_last_cmd 
cb55			; | | dw os_last_new_uword 
cb55			; | | dw debug_vector 
cb55			; | | dw os_view_hl 
cb55			; | | ;40 
cb55			; | | dw os_word_scratch 
cb55			; | | dw portbctl 
cb55			; | | dw portbdata 
cb55			; | | dw spi_cartdev 
cb55			; | | dw spi_cartdev2 
cb55			; | | dw spi_clktime 
cb55			; | | dw spi_device 
cb55			; | | dw spi_device_id 
cb55			; | | dw spi_portbyte 
cb55			; | | dw stackstore 
cb55			; | | ; 50 
cb55			; | | if STORAGE_SE 
cb55			; | | dw storage_actl 
cb55			; | | dw storage_adata 
cb55			; | | else 
cb55			; | | dw 0 
cb55			; | | dw 0 
cb55			; | | endif 
cb55			; | | dw storage_append 
cb55			; | | if STORAGE_SE 
cb55			; | | dw storage_bctl 
cb55			; | | else 
cb55			; | | dw 0 
cb55			; | | endif 
cb55			; | | dw store_bank_active 
cb55			; | | dw store_filecache 
cb55			; | | dw store_longread 
cb55			; | | dw store_openaddr 
cb55			; | | dw store_openext 
cb55			; | | dw store_openmaxext 
cb55			; | | ; 60 
cb55			; | | dw store_page 
cb55			; | | dw store_readbuf 
cb55			; | | dw store_readcont 
cb55			; | | dw store_readptr 
cb55			; | | dw store_tmpext 
cb55			; | | dw store_tmpid 
cb55			; | | dw store_tmppageid 
cb55			; | | dw malloc 
cb55			; | | dw free 
cb55			; | | dw cin 
cb55			; | | ; 70 
cb55			; | | dw cin_wait 
cb55			; | | dw forth_push_numhl 
cb55			; | | dw forth_push_str 
cb55			; | | ``` 
cb55			 
cb55					if DEBUG_FORTH_WORDS_KEY 
cb55						DMARK "SYM" 
cb55 f5				push af  
cb56 3a 6a cb			ld a, (.dmark)  
cb59 32 65 ee			ld (debug_mark),a  
cb5c 3a 6b cb			ld a, (.dmark+1)  
cb5f 32 66 ee			ld (debug_mark+1),a  
cb62 3a 6c cb			ld a, (.dmark+2)  
cb65 32 67 ee			ld (debug_mark+2),a  
cb68 18 03			jr .pastdmark  
cb6a ..			.dmark: db "SYM"  
cb6d f1			.pastdmark: pop af  
cb6e			endm  
# End of macro DMARK
cb6e						CALLMONITOR 
cb6e cd 6f ee			call debug_vector  
cb71				endm  
# End of macro CALLMONITOR
cb71					endif 
cb71			 
cb71					FORTH_DSP_VALUEHL 
cb71 cd 8a 9c			call macro_dsp_valuehl 
cb74				endm 
# End of macro FORTH_DSP_VALUEHL
cb74			 
cb74 7d					ld a, l     
cb75			 
cb75			 
cb75					if DEBUG_FORTH_WORDS 
cb75						DMARK "SY1" 
cb75 f5				push af  
cb76 3a 8a cb			ld a, (.dmark)  
cb79 32 65 ee			ld (debug_mark),a  
cb7c 3a 8b cb			ld a, (.dmark+1)  
cb7f 32 66 ee			ld (debug_mark+1),a  
cb82 3a 8c cb			ld a, (.dmark+2)  
cb85 32 67 ee			ld (debug_mark+2),a  
cb88 18 03			jr .pastdmark  
cb8a ..			.dmark: db "SY1"  
cb8d f1			.pastdmark: pop af  
cb8e			endm  
# End of macro DMARK
cb8e						CALLMONITOR 
cb8e cd 6f ee			call debug_vector  
cb91				endm  
# End of macro CALLMONITOR
cb91					endif 
cb91					 
cb91 f5					push af	 
cb92					FORTH_DSP_POP 
cb92 cd 42 9d			call macro_forth_dsp_pop 
cb95				endm 
# End of macro FORTH_DSP_POP
cb95 f1					pop af 
cb96			 
cb96 cb 27				sla a  
cb98				 
cb98					 
cb98					if DEBUG_FORTH_WORDS 
cb98						DMARK "SY" 
cb98 f5				push af  
cb99 3a ad cb			ld a, (.dmark)  
cb9c 32 65 ee			ld (debug_mark),a  
cb9f 3a ae cb			ld a, (.dmark+1)  
cba2 32 66 ee			ld (debug_mark+1),a  
cba5 3a af cb			ld a, (.dmark+2)  
cba8 32 67 ee			ld (debug_mark+2),a  
cbab 18 02			jr .pastdmark  
cbad ..			.dmark: db "SY"  
cbaf f1			.pastdmark: pop af  
cbb0			endm  
# End of macro DMARK
cbb0						CALLMONITOR 
cbb0 cd 6f ee			call debug_vector  
cbb3				endm  
# End of macro CALLMONITOR
cbb3					endif 
cbb3			 
cbb3 21 c2 cb				ld hl, sym_table 
cbb6 cd ea 8c				call addatohl 
cbb9 cd f8 9d				call loadwordinhl 
cbbc cd 85 9a				call forth_push_numhl 
cbbf			 
cbbf			 
cbbf				       NEXTW 
cbbf c3 76 9e			jp macro_next 
cbc2				endm 
# End of macro NEXTW
cbc2			 
cbc2			sym_table: 
cbc2			 
cbc2			; 0 
cbc2 c2 cb		dw sym_table 
cbc4 72 ee		dw nmi_vector 
cbc6 36 ea		dw cli_autodisplay 
cbc8 e8 e9		dw cli_data_sp 
cbca 22 e8		dw cli_data_stack 
cbcc ea e9		dw cli_loop_sp 
cbce 24 e9		dw cli_loop_stack 
cbd0 22 ea		dw cli_var_array 
cbd2 bf eb		dw cursor_col 
cbd4 bd eb		dw cursor_ptr 
cbd6			; 10 
cbd6 be eb		dw cursor_row 
cbd8 65 ee		dw debug_mark 
cbda ab ed		dw display_fb0 
cbdc 0a ed		dw display_fb1 
cbde c8 eb		dw display_fb2 
cbe0 69 ec		dw display_fb3 
cbe2 c6 eb		dw display_fb_active 
cbe4 ba e3		dw execscratch 
cbe6 58 ea		dw f_cursor_ptr 
cbe8 75 ee		dw hardware_word 
cbea			;20 
cbea 5c ee		dw input_at_cursor 
cbec 5e ee		dw input_at_pos 
cbee 5a ee		dw input_cur_flash 
cbf0 59 ee		dw input_cur_onoff 
cbf2 4f ee		dw input_cursor 
cbf4 5f ee		dw input_display_size 
cbf6 54 ee		dw input_len 
cbf8 63 ee		dw input_ptr 
cbfa 60 ee		dw input_size 
cbfc 61 ee		dw input_start 
cbfe			; 30 
cbfe 17 8d		dw input_str 
cc00 5d ee		dw input_under_cursor 
cc02 e2 e5		dw os_cli_cmd 
cc04 de e5		dw os_cur_ptr 
cc06 e0 e5		dw os_current_i 
cc08 b9 e4		dw os_input 
cc0a e1 e6		dw os_last_cmd 
cc0c b8 e5		dw os_last_new_uword 
cc0e 6f ee		dw debug_vector 
cc10 9d e2		dw os_view_hl 
cc12			;40 
cc12 c0 e5		dw os_word_scratch 
cc14 c3 00		dw portbctl 
cc16 c1 00		dw portbdata 
cc18 5d ea		dw spi_cartdev 
cc1a 5c ea		dw spi_cartdev2 
cc1c 5e ea		dw spi_clktime 
cc1e 5a ea		dw spi_device 
cc20 59 ea		dw spi_device_id 
cc22 5b ea		dw spi_portbyte 
cc24 a1 eb		dw stackstore 
cc26			; 50 
cc26			if STORAGE_SE 
cc26			dw storage_actl 
cc26			dw storage_adata 
cc26			else 
cc26 00 00		dw 0 
cc28 00 00		dw 0 
cc2a			endif 
cc2a 77 88		dw storage_append 
cc2c			if STORAGE_SE 
cc2c			dw storage_bctl 
cc2c			else 
cc2c 00 00		dw 0 
cc2e			endif 
cc2e 8d eb		dw store_bank_active 
cc30 61 ea		dw store_filecache 
cc32 6f ea		dw store_longread 
cc34 65 ea		dw store_openaddr 
cc36 64 ea		dw store_openext 
cc38 63 ea		dw store_openmaxext 
cc3a			; 60 
cc3a 74 ea		dw store_page 
cc3c 70 ea		dw store_readbuf 
cc3e 67 ea		dw store_readcont 
cc40 72 ea		dw store_readptr 
cc42 67 ea		dw store_tmpext 
cc44 68 ea		dw store_tmpid 
cc46 5f ea		dw store_tmppageid 
cc48 c5 90		dw malloc 
cc4a 8f 91		dw free 
cc4c 4d e0		dw cin 
cc4e			; 70 
cc4e 47 e0		dw cin_wait 
cc50 85 9a		dw forth_push_numhl 
cc52 f3 9a		dw forth_push_str 
cc54			 
cc54			 
cc54			.ENDCONST: 
cc54			 
cc54			; eof 
cc54			 
cc54			 
# End of file forth_words_const.asm
cc54			 
cc54			if STORAGE_SE 
cc54			   	include "forth_words_storage.asm" 
cc54			endif 
cc54				include "forth_words_device.asm" 
cc54			; Device related words 
cc54			 
cc54			; | ## Device Words 
cc54			 
cc54			;if SOUND_ENABLE 
cc54			;.NOTE: 
cc54			;	CWHEAD .AFTERSOUND 31 "NOTE" 4 WORD_FLAG_CODE 
cc54			;; NOTE ( ud uf --  )  Plays a note of frequency uf for the duration of ud millseconds  TODO 
cc54			;		if DEBUG_FORTH_WORDS_KEY 
cc54			;			DMARK "NTE" 
cc54			;			CALLMONITOR 
cc54			;		endif 
cc54			; 
cc54			;	 
cc54			; 
cc54			;		NEXTW 
cc54			;.AFTERSOUND: 
cc54			;endif 
cc54			 
cc54			 
cc54			USE_GPIO: equ 0 
cc54			 
cc54			if USE_GPIO 
cc54			.GP1: 
cc54				CWHEAD .GP2 31 "IOIN" 4 WORD_FLAG_CODE 
cc54			;  IOIN ( u1 -- u )    Perform a GPIO read of pin u1 and push result   
cc54					NEXTW 
cc54			.GP2: 
cc54				CWHEAD .GP3 31 "IOOUT" 5 WORD_FLAG_CODE 
cc54			;  IOOUT ( u1 u2 --  )    Perform a GPIO write of pin u1 with pin set to 0 or 1 in u2   
cc54			 
cc54					NEXTW 
cc54			 
cc54			.GP3: 
cc54				CWHEAD .GP4 31 "IOBYTE" 5 WORD_FLAG_CODE 
cc54			;  IOBYTE ( u1 --  )    Perform a GPIO write of byte u1   
cc54			 
cc54					NEXTW 
cc54			 
cc54			.GP4: 
cc54				CWHEAD .SIN 31 "IOSET" 5 WORD_FLAG_CODE 
cc54			;  IOSET ( u1 --  )    Setup GPIO pins for I/O direction. Bit is set for write else read pin   
cc54			 
cc54					NEXTW 
cc54			.SIN: 
cc54			 
cc54			 
cc54			endif 
cc54			 
cc54			 
cc54				CWHEAD .SOUT 31 "IN" 2 WORD_FLAG_CODE 
cc54 33				db WORD_SYS_CORE+31             
cc55 89 cc			dw .SOUT            
cc57 03				db 2 + 1 
cc58 .. 00			db "IN",0              
cc5b				endm 
# End of macro CWHEAD
cc5b			; | IN ( u1 -- u )    Perform Z80 IN with u1 being the port number. Push result to TOS | TO TEST 
cc5b					if DEBUG_FORTH_WORDS_KEY 
cc5b						DMARK "IN." 
cc5b f5				push af  
cc5c 3a 70 cc			ld a, (.dmark)  
cc5f 32 65 ee			ld (debug_mark),a  
cc62 3a 71 cc			ld a, (.dmark+1)  
cc65 32 66 ee			ld (debug_mark+1),a  
cc68 3a 72 cc			ld a, (.dmark+2)  
cc6b 32 67 ee			ld (debug_mark+2),a  
cc6e 18 03			jr .pastdmark  
cc70 ..			.dmark: db "IN."  
cc73 f1			.pastdmark: pop af  
cc74			endm  
# End of macro DMARK
cc74						CALLMONITOR 
cc74 cd 6f ee			call debug_vector  
cc77				endm  
# End of macro CALLMONITOR
cc77					endif 
cc77					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
cc77 cd 8a 9c			call macro_dsp_valuehl 
cc7a				endm 
# End of macro FORTH_DSP_VALUEHL
cc7a			 
cc7a e5					push hl 
cc7b			 
cc7b					; destroy value TOS 
cc7b			 
cc7b					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
cc7b cd 42 9d			call macro_forth_dsp_pop 
cc7e				endm 
# End of macro FORTH_DSP_POP
cc7e			 
cc7e					; one value on hl get other one back 
cc7e			 
cc7e c1					pop bc 
cc7f			 
cc7f					; do the sub 
cc7f			;		ex de, hl 
cc7f			 
cc7f ed 68				in l,(c) 
cc81			 
cc81					; save it 
cc81			 
cc81 26 00				ld h,0 
cc83			 
cc83					; TODO push value back onto stack for another op etc 
cc83			 
cc83 cd 85 9a				call forth_push_numhl 
cc86					NEXTW 
cc86 c3 76 9e			jp macro_next 
cc89				endm 
# End of macro NEXTW
cc89			.SOUT: 
cc89				CWHEAD .SPIO 32 "OUT" 3 WORD_FLAG_CODE 
cc89 34				db WORD_SYS_CORE+32             
cc8a dc cc			dw .SPIO            
cc8c 04				db 3 + 1 
cc8d .. 00			db "OUT",0              
cc91				endm 
# End of macro CWHEAD
cc91			; | OUT ( u1 u2 -- ) Perform Z80 OUT to port u2 sending byte u1 | DONE 
cc91					if DEBUG_FORTH_WORDS_KEY 
cc91						DMARK "OUT" 
cc91 f5				push af  
cc92 3a a6 cc			ld a, (.dmark)  
cc95 32 65 ee			ld (debug_mark),a  
cc98 3a a7 cc			ld a, (.dmark+1)  
cc9b 32 66 ee			ld (debug_mark+1),a  
cc9e 3a a8 cc			ld a, (.dmark+2)  
cca1 32 67 ee			ld (debug_mark+2),a  
cca4 18 03			jr .pastdmark  
cca6 ..			.dmark: db "OUT"  
cca9 f1			.pastdmark: pop af  
ccaa			endm  
# End of macro DMARK
ccaa						CALLMONITOR 
ccaa cd 6f ee			call debug_vector  
ccad				endm  
# End of macro CALLMONITOR
ccad					endif 
ccad			 
ccad					; get port 
ccad			 
ccad					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
ccad cd 8a 9c			call macro_dsp_valuehl 
ccb0				endm 
# End of macro FORTH_DSP_VALUEHL
ccb0			 
ccb0 e5					push hl 
ccb1			 
ccb1					; destroy value TOS 
ccb1			 
ccb1					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
ccb1 cd 42 9d			call macro_forth_dsp_pop 
ccb4				endm 
# End of macro FORTH_DSP_POP
ccb4			 
ccb4					; get byte to send 
ccb4			 
ccb4					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
ccb4 cd 8a 9c			call macro_dsp_valuehl 
ccb7				endm 
# End of macro FORTH_DSP_VALUEHL
ccb7			 
ccb7			;		push hl 
ccb7			 
ccb7					; destroy value TOS 
ccb7			 
ccb7					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
ccb7 cd 42 9d			call macro_forth_dsp_pop 
ccba				endm 
# End of macro FORTH_DSP_POP
ccba			 
ccba					; one value on hl get other one back 
ccba			 
ccba			;		pop hl 
ccba			 
ccba c1					pop bc 
ccbb			 
ccbb					if DEBUG_FORTH_WORDS 
ccbb						DMARK "OUT" 
ccbb f5				push af  
ccbc 3a d0 cc			ld a, (.dmark)  
ccbf 32 65 ee			ld (debug_mark),a  
ccc2 3a d1 cc			ld a, (.dmark+1)  
ccc5 32 66 ee			ld (debug_mark+1),a  
ccc8 3a d2 cc			ld a, (.dmark+2)  
cccb 32 67 ee			ld (debug_mark+2),a  
ccce 18 03			jr .pastdmark  
ccd0 ..			.dmark: db "OUT"  
ccd3 f1			.pastdmark: pop af  
ccd4			endm  
# End of macro DMARK
ccd4						CALLMONITOR 
ccd4 cd 6f ee			call debug_vector  
ccd7				endm  
# End of macro CALLMONITOR
ccd7					endif 
ccd7			 
ccd7 ed 69				out (c), l 
ccd9			 
ccd9					NEXTW 
ccd9 c3 76 9e			jp macro_next 
ccdc				endm 
# End of macro NEXTW
ccdc			 
ccdc			 
ccdc			.SPIO: 
ccdc			 
ccdc			if STORAGE_SE 
ccdc				CWHEAD .SPICEH 61 "SPICEL" 6 WORD_FLAG_CODE 
ccdc			; | SPICEL ( -- ) Set SPI CE low for the currently selected device |  DONE 
ccdc			 
ccdc					call spi_ce_low 
ccdc			    NEXTW 
ccdc			 
ccdc			.SPICEH: 
ccdc				CWHEAD .SPIOb 61 "SPICEH" 6 WORD_FLAG_CODE 
ccdc			; | SPICEH ( -- ) Set SPI CE high for the currently selected device |  DONE 
ccdc			 
ccdc					call spi_ce_high 
ccdc			    NEXTW 
ccdc			 
ccdc			 
ccdc			.SPIOb: 
ccdc			 
ccdc				CWHEAD .SPII 61 "SPIO" 4 WORD_FLAG_CODE 
ccdc			; | SPIO ( u1 -- ) Send byte u1 to SPI  |  DONE 
ccdc			 
ccdc					if DEBUG_FORTH_WORDS_KEY 
ccdc						DMARK "SPo" 
ccdc						CALLMONITOR 
ccdc					endif 
ccdc					; get port 
ccdc			 
ccdc			 
ccdc					; get byte to send 
ccdc			 
ccdc					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
ccdc			 
ccdc			;		push hl    ; u1  
ccdc			 
ccdc					; destroy value TOS 
ccdc			 
ccdc					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
ccdc			 
ccdc					; one value on hl get other one back 
ccdc			 
ccdc			;		pop hl   ; u2 - addr 
ccdc			 
ccdc					; TODO Send SPI byte 
ccdc			 
ccdc			;		push hl 
ccdc			;		call spi_ce_low 
ccdc			;		pop hl 
ccdc					ld a, l 
ccdc					call spi_send_byte 
ccdc			;		call spi_ce_high 
ccdc			 
ccdc					NEXTW 
ccdc			 
ccdc			.SPII: 
ccdc				CWHEAD .SESEL 62 "SPII" 5 WORD_FLAG_CODE 
ccdc			; | SPII ( -- u1 ) Get a byte from SPI  | DONE 
ccdc					if DEBUG_FORTH_WORDS_KEY 
ccdc						DMARK "SPi" 
ccdc						CALLMONITOR 
ccdc					endif 
ccdc			 
ccdc					; TODO Get SPI byte 
ccdc			 
ccdc					call spi_read_byte 
ccdc			 
ccdc					if DEBUG_FORTH_WORDS 
ccdc						DMARK "Si2" 
ccdc						CALLMONITOR 
ccdc					endif 
ccdc					ld h, 0 
ccdc					ld l, a 
ccdc					if DEBUG_FORTH_WORDS 
ccdc						DMARK "Si3" 
ccdc						CALLMONITOR 
ccdc					endif 
ccdc					call forth_push_numhl 
ccdc			 
ccdc					NEXTW 
ccdc			 
ccdc			 
ccdc			 
ccdc			.SESEL: 
ccdc				CWHEAD .CARTDEV 82 "BANK" 4 WORD_FLAG_CODE 
ccdc			; | BANK ( u1 -- ) Select Serial EEPROM Bank Device at bank address u1 1-5 (disables CARTDEV). Set to zero to disable storage. | DONE 
ccdc					if DEBUG_FORTH_WORDS_KEY 
ccdc						DMARK "BNK" 
ccdc						CALLMONITOR 
ccdc					endif 
ccdc			 
ccdc					ld a, 255 
ccdc					ld (spi_cartdev), a 
ccdc			 
ccdc					; get bank 
ccdc			 
ccdc					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
ccdc			 
ccdc			;		push hl 
ccdc			 
ccdc					; destroy value TOS 
ccdc			 
ccdc					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
ccdc			 
ccdc					; one value on hl get other one back 
ccdc			 
ccdc			;		pop hl 
ccdc			 
ccdc			 
ccdc					ld c, SPI_CE_HIGH 
ccdc					ld b, '0'    ; human readable bank number 
ccdc			 
ccdc					ld a, l 
ccdc			 
ccdc					if DEBUG_FORTH_WORDS 
ccdc						DMARK "BNK" 
ccdc						CALLMONITOR 
ccdc					endif 
ccdc			 
ccdc					; active low 
ccdc			 
ccdc					cp 0 
ccdc					jr z, .bset 
ccdc					cp 1 
ccdc					jr nz, .b2 
ccdc					res 0, c 
ccdc					ld b, '1'    ; human readable bank number 
ccdc			.b2:		cp 2 
ccdc					jr nz, .b3 
ccdc					res 1, c 
ccdc					ld b, '2'    ; human readable bank number 
ccdc			.b3:		cp 3 
ccdc					jr nz, .b4 
ccdc					res 2, c 
ccdc					ld b, '3'    ; human readable bank number 
ccdc			.b4:		cp 4 
ccdc					jr nz, .b5 
ccdc					res 3, c 
ccdc					ld b, '4'    ; human readable bank number 
ccdc			.b5:		cp 5 
ccdc					jr nz, .bset 
ccdc					res 4, c 
ccdc					ld b, '5'    ; human readable bank number 
ccdc			 
ccdc			.bset: 
ccdc					ld a, c 
ccdc					ld (spi_device),a 
ccdc					ld a, b 
ccdc					ld (spi_device_id),a 
ccdc					if DEBUG_FORTH_WORDS 
ccdc						DMARK "BN2" 
ccdc						CALLMONITOR 
ccdc					endif 
ccdc			 
ccdc					; set default SPI clk pulse time as disabled for BANK use 
ccdc			 
ccdc					ld a, 0 
ccdc					ld (spi_clktime), a 
ccdc			 
ccdc					NEXTW 
ccdc			 
ccdc			.CARTDEV: 
ccdc				CWHEAD .ENDDEVICE 82 "CARTDEV" 7 WORD_FLAG_CODE 
ccdc			; | CARTDEV ( u1 -- ) Select cart device 1-8 (Disables BANK). Set to zero to disable devices. |  DONE 
ccdc					if DEBUG_FORTH_WORDS_KEY 
ccdc						DMARK "CDV" 
ccdc						CALLMONITOR 
ccdc					endif 
ccdc			 
ccdc					; disable se storage bank selection 
ccdc			 
ccdc					ld a, SPI_CE_HIGH		; ce high 
ccdc					ld (spi_device), a 
ccdc			 
ccdc					; get bank 
ccdc			 
ccdc					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
ccdc			 
ccdc			;		push hl 
ccdc			 
ccdc					; destroy value TOS 
ccdc			 
ccdc					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
ccdc			 
ccdc					; one value on hl get other one back 
ccdc			 
ccdc			;		pop hl 
ccdc			 
ccdc					; active low 
ccdc			 
ccdc					ld c, 255 
ccdc			 
ccdc					ld a, l 
ccdc					if DEBUG_FORTH_WORDS 
ccdc						DMARK "CDV" 
ccdc						CALLMONITOR 
ccdc					endif 
ccdc					cp 0 
ccdc					jr z, .cset 
ccdc					cp 1 
ccdc					jr nz, .c2 
ccdc					res 0, c 
ccdc			.c2:		cp 2 
ccdc					jr nz, .c3 
ccdc					res 1, c 
ccdc			.c3:		cp 3 
ccdc					jr nz, .c4 
ccdc					res 2, c 
ccdc			.c4:		cp 4 
ccdc					jr nz, .c5 
ccdc					res 3, c 
ccdc			.c5:		cp 5 
ccdc					jr nz, .c6 
ccdc					res 4, c 
ccdc			.c6:		cp 6 
ccdc					jr nz, .c7 
ccdc					res 5, c 
ccdc			.c7:		cp 7 
ccdc					jr nz, .c8 
ccdc					res 6, c 
ccdc			.c8:		cp 8 
ccdc					jr nz, .cset 
ccdc					res 7, c 
ccdc			.cset:		ld a, c 
ccdc					ld (spi_cartdev),a 
ccdc			 
ccdc					if DEBUG_FORTH_WORDS 
ccdc						DMARK "CD2" 
ccdc						CALLMONITOR 
ccdc					endif 
ccdc			 
ccdc					; set default SPI clk pulse time as 10ms for CARTDEV use 
ccdc			 
ccdc					ld a, $0a 
ccdc					ld (spi_clktime), a 
ccdc					NEXTW 
ccdc			endif 
ccdc			 
ccdc			.ENDDEVICE: 
ccdc			; eof 
ccdc			 
# End of file forth_words_device.asm
ccdc			 
ccdc			; var handler 
ccdc			 
ccdc			 
ccdc			.VARS: 
ccdc				CWHEAD .V0 99 "VAR" 3 WORD_FLAG_CODE 
ccdc 77				db WORD_SYS_CORE+99             
ccdd 8d cd			dw .V0            
ccdf 04				db 3 + 1 
cce0 .. 00			db "VAR",0              
cce4				endm 
# End of macro CWHEAD
cce4			;| VAR ( u1 -- )  Get the address of the variable referenced on TOS  | TO TEST 
cce4			;| 
cce4			;| The variable name should consist of a single letter. e.g. "a" 
cce4			;! If a full string is passed then only the first char is looked at 
cce4			;| Any other char could exceed bounds checks!  
cce4			 
cce4					if DEBUG_FORTH_WORDS_KEY 
cce4						DMARK "VAR" 
cce4 f5				push af  
cce5 3a f9 cc			ld a, (.dmark)  
cce8 32 65 ee			ld (debug_mark),a  
cceb 3a fa cc			ld a, (.dmark+1)  
ccee 32 66 ee			ld (debug_mark+1),a  
ccf1 3a fb cc			ld a, (.dmark+2)  
ccf4 32 67 ee			ld (debug_mark+2),a  
ccf7 18 03			jr .pastdmark  
ccf9 ..			.dmark: db "VAR"  
ccfc f1			.pastdmark: pop af  
ccfd			endm  
# End of macro DMARK
ccfd						CALLMONITOR 
ccfd cd 6f ee			call debug_vector  
cd00				endm  
# End of macro CALLMONITOR
cd00					endif 
cd00			 
cd00					FORTH_DSP_VALUEHL 
cd00 cd 8a 9c			call macro_dsp_valuehl 
cd03				endm 
# End of macro FORTH_DSP_VALUEHL
cd03			 
cd03 7e					ld a, (hl)    ; get first char on of the string 
cd04			 
cd04			 
cd04					if DEBUG_FORTH_WORDS 
cd04						DMARK "VR1" 
cd04 f5				push af  
cd05 3a 19 cd			ld a, (.dmark)  
cd08 32 65 ee			ld (debug_mark),a  
cd0b 3a 1a cd			ld a, (.dmark+1)  
cd0e 32 66 ee			ld (debug_mark+1),a  
cd11 3a 1b cd			ld a, (.dmark+2)  
cd14 32 67 ee			ld (debug_mark+2),a  
cd17 18 03			jr .pastdmark  
cd19 ..			.dmark: db "VR1"  
cd1c f1			.pastdmark: pop af  
cd1d			endm  
# End of macro DMARK
cd1d						CALLMONITOR 
cd1d cd 6f ee			call debug_vector  
cd20				endm  
# End of macro CALLMONITOR
cd20					endif 
cd20					 
cd20 f5					push af	 
cd21					FORTH_DSP_POP 
cd21 cd 42 9d			call macro_forth_dsp_pop 
cd24				endm 
# End of macro FORTH_DSP_POP
cd24 f1					pop af 
cd25			 
cd25					; convert to upper 
cd25			 
cd25 cd 5f 8f				call to_upper 
cd28					if DEBUG_FORTH_WORDS 
cd28						DMARK "Vaa" 
cd28 f5				push af  
cd29 3a 3d cd			ld a, (.dmark)  
cd2c 32 65 ee			ld (debug_mark),a  
cd2f 3a 3e cd			ld a, (.dmark+1)  
cd32 32 66 ee			ld (debug_mark+1),a  
cd35 3a 3f cd			ld a, (.dmark+2)  
cd38 32 67 ee			ld (debug_mark+2),a  
cd3b 18 03			jr .pastdmark  
cd3d ..			.dmark: db "Vaa"  
cd40 f1			.pastdmark: pop af  
cd41			endm  
# End of macro DMARK
cd41						CALLMONITOR 
cd41 cd 6f ee			call debug_vector  
cd44				endm  
# End of macro CALLMONITOR
cd44					endif 
cd44 06 41				ld b, 'A' 
cd46 90					sub b			; set offset 
cd47					if DEBUG_FORTH_WORDS 
cd47						DMARK "Vbb" 
cd47 f5				push af  
cd48 3a 5c cd			ld a, (.dmark)  
cd4b 32 65 ee			ld (debug_mark),a  
cd4e 3a 5d cd			ld a, (.dmark+1)  
cd51 32 66 ee			ld (debug_mark+1),a  
cd54 3a 5e cd			ld a, (.dmark+2)  
cd57 32 67 ee			ld (debug_mark+2),a  
cd5a 18 03			jr .pastdmark  
cd5c ..			.dmark: db "Vbb"  
cd5f f1			.pastdmark: pop af  
cd60			endm  
# End of macro DMARK
cd60						CALLMONITOR 
cd60 cd 6f ee			call debug_vector  
cd63				endm  
# End of macro CALLMONITOR
cd63					endif 
cd63 cb 27				sla a  
cd65				 
cd65					 
cd65					if DEBUG_FORTH_WORDS 
cd65						DMARK "VR2" 
cd65 f5				push af  
cd66 3a 7a cd			ld a, (.dmark)  
cd69 32 65 ee			ld (debug_mark),a  
cd6c 3a 7b cd			ld a, (.dmark+1)  
cd6f 32 66 ee			ld (debug_mark+1),a  
cd72 3a 7c cd			ld a, (.dmark+2)  
cd75 32 67 ee			ld (debug_mark+2),a  
cd78 18 03			jr .pastdmark  
cd7a ..			.dmark: db "VR2"  
cd7d f1			.pastdmark: pop af  
cd7e			endm  
# End of macro DMARK
cd7e						CALLMONITOR 
cd7e cd 6f ee			call debug_vector  
cd81				endm  
# End of macro CALLMONITOR
cd81					endif 
cd81			 
cd81 21 ee e9				ld hl, cli_var_array2 
cd84 cd ea 8c				call addatohl 
cd87 cd 85 9a				call forth_push_numhl 
cd8a			 
cd8a			 
cd8a				       NEXTW 
cd8a c3 76 9e			jp macro_next 
cd8d				endm 
# End of macro NEXTW
cd8d			.V0: 
cd8d				CWHEAD .V0Q 100 "V0!" 3 WORD_FLAG_CODE 
cd8d 78				db WORD_SYS_CORE+100             
cd8e a5 cd			dw .V0Q            
cd90 04				db 3 + 1 
cd91 .. 00			db "V0!",0              
cd95				endm 
# End of macro CWHEAD
cd95			;| V0! ( u1 -- )  Store value to v0  | DONE 
cd95			 
cd95					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
cd95 cd 8a 9c			call macro_dsp_valuehl 
cd98				endm 
# End of macro FORTH_DSP_VALUEHL
cd98			 
cd98 11 22 ea				ld de, cli_var_array 
cd9b			 
cd9b eb					ex de, hl 
cd9c 73					ld (hl), e 
cd9d 23					inc hl 
cd9e 72					ld (hl), d 
cd9f			 
cd9f					; destroy value TOS 
cd9f			 
cd9f					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
cd9f cd 42 9d			call macro_forth_dsp_pop 
cda2				endm 
# End of macro FORTH_DSP_POP
cda2			 
cda2				       NEXTW 
cda2 c3 76 9e			jp macro_next 
cda5				endm 
# End of macro NEXTW
cda5			.V0Q: 
cda5				CWHEAD .V1S 101 "V0@" 3 WORD_FLAG_CODE 
cda5 79				db WORD_SYS_CORE+101             
cda6 b6 cd			dw .V1S            
cda8 04				db 3 + 1 
cda9 .. 00			db "V0@",0              
cdad				endm 
# End of macro CWHEAD
cdad			;| V0@ ( --u )  Put value of v0 onto stack | DONE 
cdad 2a 22 ea				ld hl, (cli_var_array) 
cdb0 cd 85 9a				call forth_push_numhl 
cdb3			 
cdb3				       NEXTW 
cdb3 c3 76 9e			jp macro_next 
cdb6				endm 
# End of macro NEXTW
cdb6			.V1S: 
cdb6				CWHEAD .V1Q 102 "V1!" 3 WORD_FLAG_CODE 
cdb6 7a				db WORD_SYS_CORE+102             
cdb7 ce cd			dw .V1Q            
cdb9 04				db 3 + 1 
cdba .. 00			db "V1!",0              
cdbe				endm 
# End of macro CWHEAD
cdbe			;| V1! ( u1 -- )  Store value to v1 | DONE 
cdbe					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
cdbe cd 8a 9c			call macro_dsp_valuehl 
cdc1				endm 
# End of macro FORTH_DSP_VALUEHL
cdc1			 
cdc1 11 24 ea				ld de, cli_var_array+2 
cdc4				 
cdc4 eb					ex de, hl 
cdc5 73					ld (hl), e 
cdc6 23					inc hl 
cdc7 72					ld (hl), d 
cdc8			 
cdc8					; destroy value TOS 
cdc8			 
cdc8					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
cdc8 cd 42 9d			call macro_forth_dsp_pop 
cdcb				endm 
# End of macro FORTH_DSP_POP
cdcb				       NEXTW 
cdcb c3 76 9e			jp macro_next 
cdce				endm 
# End of macro NEXTW
cdce			.V1Q: 
cdce				CWHEAD .V2S 103 "V1@" 3 WORD_FLAG_CODE 
cdce 7b				db WORD_SYS_CORE+103             
cdcf df cd			dw .V2S            
cdd1 04				db 3 + 1 
cdd2 .. 00			db "V1@",0              
cdd6				endm 
# End of macro CWHEAD
cdd6			;| V1@ ( --u )  Put value of v1 onto stack | DONE 
cdd6 2a 24 ea				ld hl, (cli_var_array+2) 
cdd9 cd 85 9a				call forth_push_numhl 
cddc				       NEXTW 
cddc c3 76 9e			jp macro_next 
cddf				endm 
# End of macro NEXTW
cddf			.V2S: 
cddf				CWHEAD .V2Q 104 "V2!" 3 WORD_FLAG_CODE 
cddf 7c				db WORD_SYS_CORE+104             
cde0 f7 cd			dw .V2Q            
cde2 04				db 3 + 1 
cde3 .. 00			db "V2!",0              
cde7				endm 
# End of macro CWHEAD
cde7			;| V2! ( u1 -- )  Store value to v2 | DONE 
cde7					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
cde7 cd 8a 9c			call macro_dsp_valuehl 
cdea				endm 
# End of macro FORTH_DSP_VALUEHL
cdea			 
cdea 11 26 ea				ld de, cli_var_array+4 
cded				 
cded eb					ex de, hl 
cdee 73					ld (hl), e 
cdef 23					inc hl 
cdf0 72					ld (hl), d 
cdf1			 
cdf1					; destroy value TOS 
cdf1			 
cdf1					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
cdf1 cd 42 9d			call macro_forth_dsp_pop 
cdf4				endm 
# End of macro FORTH_DSP_POP
cdf4				       NEXTW 
cdf4 c3 76 9e			jp macro_next 
cdf7				endm 
# End of macro NEXTW
cdf7			.V2Q: 
cdf7				CWHEAD .V3S 105 "V2@" 3 WORD_FLAG_CODE 
cdf7 7d				db WORD_SYS_CORE+105             
cdf8 08 ce			dw .V3S            
cdfa 04				db 3 + 1 
cdfb .. 00			db "V2@",0              
cdff				endm 
# End of macro CWHEAD
cdff			;| V2@ ( --u )  Put value of v2 onto stack | DONE 
cdff 2a 26 ea				ld hl, (cli_var_array+4) 
ce02 cd 85 9a				call forth_push_numhl 
ce05				       NEXTW 
ce05 c3 76 9e			jp macro_next 
ce08				endm 
# End of macro NEXTW
ce08			.V3S: 
ce08				CWHEAD .V3Q 104 "V3!" 3 WORD_FLAG_CODE 
ce08 7c				db WORD_SYS_CORE+104             
ce09 20 ce			dw .V3Q            
ce0b 04				db 3 + 1 
ce0c .. 00			db "V3!",0              
ce10				endm 
# End of macro CWHEAD
ce10			;| V3! ( u1 -- )  Store value to v3 | DONE 
ce10					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
ce10 cd 8a 9c			call macro_dsp_valuehl 
ce13				endm 
# End of macro FORTH_DSP_VALUEHL
ce13			 
ce13 11 28 ea				ld de, cli_var_array+6 
ce16				 
ce16 eb					ex de, hl 
ce17 73					ld (hl), e 
ce18 23					inc hl 
ce19 72					ld (hl), d 
ce1a			 
ce1a					; destroy value TOS 
ce1a			 
ce1a					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
ce1a cd 42 9d			call macro_forth_dsp_pop 
ce1d				endm 
# End of macro FORTH_DSP_POP
ce1d				       NEXTW 
ce1d c3 76 9e			jp macro_next 
ce20				endm 
# End of macro NEXTW
ce20			.V3Q: 
ce20				CWHEAD .END 105 "V3@" 3 WORD_FLAG_CODE 
ce20 7d				db WORD_SYS_CORE+105             
ce21 31 ce			dw .END            
ce23 04				db 3 + 1 
ce24 .. 00			db "V3@",0              
ce28				endm 
# End of macro CWHEAD
ce28			;| V3@ ( --u )  Put value of v3 onto stack | DONE 
ce28 2a 28 ea				ld hl, (cli_var_array+6) 
ce2b cd 85 9a				call forth_push_numhl 
ce2e				       NEXTW 
ce2e c3 76 9e			jp macro_next 
ce31				endm 
# End of macro NEXTW
ce31			 
ce31			 
ce31			 
ce31			 
ce31			 
ce31			; end of dict marker 
ce31			 
ce31 00			.END:    db WORD_SYS_END 
ce32 00 00			dw 0 
ce34 00				db 0 
ce35			 
ce35			; use to jp here for user dict words to save on macro expansion  
ce35			 
ce35			user_dict_next: 
ce35				NEXTW 
ce35 c3 76 9e			jp macro_next 
ce38				endm 
# End of macro NEXTW
ce38			 
ce38			 
ce38			user_exec: 
ce38				;    ld hl, <word code> 
ce38				;    FORTH_RSP_NEXT - call macro_forth_rsp_next 
ce38				;    call forthexec 
ce38				;    jp user_dict_next   (NEXT) 
ce38			        ;    <word code bytes> 
ce38 eb				ex de, hl 
ce39 2a bc e5			ld hl,(os_tok_ptr) 
ce3c				 
ce3c				FORTH_RSP_NEXT 
ce3c cd 2c 9a			call macro_forth_rsp_next 
ce3f				endm 
# End of macro FORTH_RSP_NEXT
ce3f			 
ce3f			if DEBUG_FORTH_UWORD 
ce3f						DMARK "UEX" 
ce3f f5				push af  
ce40 3a 54 ce			ld a, (.dmark)  
ce43 32 65 ee			ld (debug_mark),a  
ce46 3a 55 ce			ld a, (.dmark+1)  
ce49 32 66 ee			ld (debug_mark+1),a  
ce4c 3a 56 ce			ld a, (.dmark+2)  
ce4f 32 67 ee			ld (debug_mark+2),a  
ce52 18 03			jr .pastdmark  
ce54 ..			.dmark: db "UEX"  
ce57 f1			.pastdmark: pop af  
ce58			endm  
# End of macro DMARK
ce58				CALLMONITOR 
ce58 cd 6f ee			call debug_vector  
ce5b				endm  
# End of macro CALLMONITOR
ce5b			endif 
ce5b			 
ce5b			 
ce5b			 
ce5b eb				ex de, hl 
ce5c 22 bc e5			ld (os_tok_ptr), hl 
ce5f				 
ce5f				; Don't use next - Skips the first word in uword. 
ce5f			 
ce5f c3 ff 9e			jp exec1 
ce62			;	NEXT 
ce62			 
ce62			 
ce62			; eof 
# End of file forth_wordsv4.asm
ce62			endif 
ce62			;;;;;;;;;;;;;; Debug code 
ce62			 
ce62			 
ce62			;if DEBUG_FORTH_PARSE 
ce62 .. 00		.nowordfound: db "No match",0 
ce6b .. 00		.compword:	db "Comparing word ",0 
ce7b .. 00		.nextwordat:	db "Next word at",0 
ce88 .. 00		.charmatch:	db "Char match",0 
ce93			;endif 
ce93			if DEBUG_FORTH_JP 
ce93			.foundword:	db "Word match. Exec..",0 
ce93			endif 
ce93			;if DEBUG_FORTH_PUSH 
ce93 .. 00		.enddict:	db "Dict end. Push.",0 
cea3 .. 00		.push_str:	db "Pushing string",0 
ceb2 .. 00		.push_num:	db "Pushing number",0 
cec1 .. 00		.data_sp:	db "SP:",0 
cec5 .. 00		.wordinhl:	db "Word in HL (2/0):",0 
ced7 .. 00		.wordinde:	db "Word in DE (3/0):",0 
cee9 .. 00		.wordinbc:	db "Word in BC (4/0):",0 
cefb			;endif 
cefb			;if DEBUG_FORTH_MALLOC 
cefb .. 00		.push_malloc:	db "Malloc address",0 
cf0a			;endif 
cf0a			 
cf0a			 
cf0a			 
cf0a			; display malloc address and current data stack pointer  
cf0a			 
cf0a			malloc_error: 
cf0a d5				push de 
cf0b f5				push af 
cf0c e5				push hl 
cf0d cd bd 8a			call clear_display 
cf10 11 30 cf			ld de, .mallocerr 
cf13 3e 00			ld a,0 
cf15			;	ld de,os_word_scratch 
cf15 cd d0 8a			call str_at_display 
cf18 3e 11			ld a, display_row_1+17 
cf1a 11 65 ee			ld de, debug_mark 
cf1d cd d0 8a			call str_at_display 
cf20 cd e0 8a			call update_display 
cf23				;call break_point_state 
cf23 cd 47 e0			call cin_wait 
cf26			 
cf26			;	ld a, ' ' 
cf26			;	ld (os_view_disable), a 
cf26 cd f4 93			call bp_on 
cf29 e1				pop hl 
cf2a f1				pop af 
cf2b d1				pop de	 
cf2c				CALLMONITOR 
cf2c cd 6f ee			call debug_vector  
cf2f				endm  
# End of macro CALLMONITOR
cf2f c9				ret 
cf30			 
cf30 .. 00		.mallocerr: 	db "Malloc Error",0 
cf3d			;if DEBUG_FORTH_PUSH 
cf3d			display_data_sp: 
cf3d f5				push af 
cf3e			 
cf3e				; see if disabled 
cf3e			 
cf3e			 
cf3e 3a 6f ee			ld a, (debug_vector) 
cf41 fe c9			cp $C9  ; RET 
cf43				;ld a, (os_view_disable) 
cf43				;cp '*' 
cf43 28 67			jr z, .skipdsp 
cf45			 
cf45 e5				push hl 
cf46 e5				push hl 
cf47 e5			push hl 
cf48 cd bd 8a			call clear_display 
cf4b e1			pop hl 
cf4c 7c				ld a,h 
cf4d 21 c0 e5			ld hl, os_word_scratch 
cf50 cd f3 8e			call hexout 
cf53 e1				pop hl 
cf54 7d				ld a,l 
cf55 21 c2 e5			ld hl, os_word_scratch+2 
cf58 cd f3 8e			call hexout 
cf5b 21 c4 e5			ld hl, os_word_scratch+4 
cf5e 3e 00			ld a,0 
cf60 77				ld (hl),a 
cf61 11 c0 e5			ld de,os_word_scratch 
cf64 3e 28				ld a, display_row_2 
cf66 cd d0 8a				call str_at_display 
cf69 11 c5 ce			ld de, .wordinhl 
cf6c 3e 00			ld a, display_row_1 
cf6e			 
cf6e cd d0 8a				call str_at_display 
cf71 11 65 ee			ld de, debug_mark 
cf74 3e 11			ld a, display_row_1+17 
cf76			 
cf76 cd d0 8a				call str_at_display 
cf79			 
cf79				; display current data stack pointer 
cf79 11 c1 ce			ld de,.data_sp 
cf7c 3e 30				ld a, display_row_2 + 8 
cf7e cd d0 8a				call str_at_display 
cf81			 
cf81 2a e8 e9			ld hl,(cli_data_sp) 
cf84 e5				push hl 
cf85 7c				ld a,h 
cf86 21 c0 e5			ld hl, os_word_scratch 
cf89 cd f3 8e			call hexout 
cf8c e1				pop hl 
cf8d 7d				ld a,l 
cf8e 21 c2 e5			ld hl, os_word_scratch+2 
cf91 cd f3 8e			call hexout 
cf94 21 c4 e5			ld hl, os_word_scratch+4 
cf97 3e 00			ld a,0 
cf99 77				ld (hl),a 
cf9a 11 c0 e5			ld de,os_word_scratch 
cf9d 3e 33				ld a, display_row_2 + 11 
cf9f cd d0 8a				call str_at_display 
cfa2			 
cfa2			 
cfa2 cd e0 8a			call update_display 
cfa5 cd 00 8a			call delay1s 
cfa8 cd 00 8a			call delay1s 
cfab e1				pop hl 
cfac			.skipdsp: 
cfac f1				pop af 
cfad c9				ret 
cfae			 
cfae			display_data_malloc: 
cfae			 
cfae f5				push af 
cfaf e5				push hl 
cfb0 e5				push hl 
cfb1 e5			push hl 
cfb2 cd bd 8a			call clear_display 
cfb5 e1			pop hl 
cfb6 7c				ld a,h 
cfb7 21 c0 e5			ld hl, os_word_scratch 
cfba cd f3 8e			call hexout 
cfbd e1				pop hl 
cfbe 7d				ld a,l 
cfbf 21 c2 e5			ld hl, os_word_scratch+2 
cfc2 cd f3 8e			call hexout 
cfc5 21 c4 e5			ld hl, os_word_scratch+4 
cfc8 3e 00			ld a,0 
cfca 77				ld (hl),a 
cfcb 11 c0 e5			ld de,os_word_scratch 
cfce 3e 28				ld a, display_row_2 
cfd0 cd d0 8a				call str_at_display 
cfd3 11 fb ce			ld de, .push_malloc 
cfd6 3e 00			ld a, display_row_1 
cfd8			 
cfd8 cd d0 8a				call str_at_display 
cfdb			 
cfdb				; display current data stack pointer 
cfdb 11 c1 ce			ld de,.data_sp 
cfde 3e 30				ld a, display_row_2 + 8 
cfe0 cd d0 8a				call str_at_display 
cfe3			 
cfe3 2a e8 e9			ld hl,(cli_data_sp) 
cfe6 e5				push hl 
cfe7 7c				ld a,h 
cfe8 21 c0 e5			ld hl, os_word_scratch 
cfeb cd f3 8e			call hexout 
cfee e1				pop hl 
cfef 7d				ld a,l 
cff0 21 c2 e5			ld hl, os_word_scratch+2 
cff3 cd f3 8e			call hexout 
cff6 21 c4 e5			ld hl, os_word_scratch+4 
cff9 3e 00			ld a,0 
cffb 77				ld (hl),a 
cffc 11 c0 e5			ld de,os_word_scratch 
cfff 3e 33				ld a, display_row_2 + 11 
d001 cd d0 8a				call str_at_display 
d004			 
d004 cd e0 8a			call update_display 
d007 cd 00 8a			call delay1s 
d00a cd 00 8a			call delay1s 
d00d e1				pop hl 
d00e f1				pop af 
d00f c9				ret 
d010			;endif 
d010			 
d010			include "forth_autostart.asm" 
d010			; list of commands to perform at system start up 
d010			 
d010			startcmds: 
d010			;	dw test11 
d010			;	dw test12 
d010			;	dw test13 
d010			;	dw test14 
d010			;	dw test15 
d010			;	dw test16 
d010			;	dw test17 
d010			;	dw ifthtest1 
d010			;	dw ifthtest2 
d010			;	dw ifthtest3 
d010			;	dw mmtest1 
d010			;	dw mmtest2 
d010			;	dw mmtest3 
d010			;	dw mmtest4 
d010			;	dw mmtest5 
d010			;	dw mmtest6 
d010			;	dw iftest1 
d010			;	dw iftest2 
d010			;	dw iftest3 
d010			;	dw looptest1 
d010			;	dw looptest2 
d010			;	dw test1 
d010			;	dw test2 
d010			;	dw test3 
d010			;	dw test4 
d010			;	dw game2r 
d010			;	dw game2b1 
d010			;	dw game2b2 
d010			 
d010				; start up words that are actually useful 
d010			 
d010			;    dw spi1 
d010			;    dw spi2 
d010			;    dw spi3 
d010			;    dw spi4 
d010			;    dw spi5 
d010			;    dw spi6 
d010			;    dw spi7 
d010			; 
d010			;    dw spi8 
d010			;    dw spi9 
d010			;    dw spi10 
d010			 
d010			; file editor 
d010			;	dw edit1 
d010			;	dw edit2 
d010			;	dw edit3 
d010			 
d010			;	dw longread 
d010 32 d4			dw clrstack 
d012 66 d4			dw type 
d014			;	dw stest 
d014 8b d4			dw strncpy 
d016 fb d5			dw list 
d018 ec d4			dw start1 
d01a fc d4			dw start2 
d01c			;	dw start3 
d01c			;	dw start3b 
d01c			;	dw start3c 
d01c			 
d01c				; (unit) testing words 
d01c			 
d01c			;	dw mtesta 
d01c			;	dw mtestb 
d01c			;	dw mtestc 
d01c			;	dw mtestd 
d01c			;	dw mteste 
d01c			 
d01c				; demo/game words 
d01c			 
d01c			;        dw game3w 
d01c			;        dw game3p 
d01c			;        dw game3sc 
d01c			;        dw game3vsi 
d01c			;        dw game3vs 
d01c				 
d01c			;	dw game2b 
d01c			;	dw game2bf 
d01c			;	dw game2mba 
d01c			;	dw game2mbas 
d01c			;	dw game2mb 
d01c			 
d01c 2c d8			dw game1 
d01e 3d d8			dw game1a 
d020 9f d8			dw game1b 
d022 d4 d8			dw game1c 
d024 0a d9			dw game1d 
d026 3b d9			dw game1s 
d028 4f d9			dw game1t 
d02a 64 d9			dw game1f 
d02c 98 d9			dw game1z 
d02e dc d9			dw game1zz 
d030			 
d030 65 d6			dw test5 
d032 9d d6			dw test6 
d034 d5 d6			dw test7 
d036 e9 d6			dw test8 
d038 15 d7			dw test9 
d03a 2b d7			dw test10 
d03c				 
d03c b3 da		        dw ssv5 
d03e 97 da		        dw ssv4 
d040 7b da		        dw ssv3 
d042 45 da		        dw ssv2 
d044 cc da		        dw ssv1 
d046 14 db		        dw ssv1cpm 
d048			;	dw keyup 
d048			;	dw keydown 
d048			;	dw keyleft 
d048			;	dw keyright 
d048			;	dw 	keyf1 
d048			;	dw keyf2 
d048			;	dw keyf3 
d048			;	dw keyf4 
d048			;	dw keyf5 
d048			;	dw keyf6 
d048			;	dw keyf7 
d048			;	dw keyf8 
d048			;	dw keyf9 
d048			;	dw keyf10 
d048			;	dw keyf11 
d048			;	dw keyf12 
d048			;	dw keytab 
d048			;	dw keycr 
d048			;	dw keyhome 
d048			;	dw keyend 
d048			;	dw keybs 
d048 00 00			db 0, 0	 
d04a			 
d04a			 
d04a			; File Editor 
d04a			 
d04a			; ( id - ) use 'e' to edit the displayed line 
d04a .. 00		edit1: db ": edc waitk $65 = if ede then ; ", 0 
d06b .. 00		edit2: db ": ede storepage ptr $02 + cls dedit filepage bupd ; ", 0 
d0a0			;edit2: db ": ede v1@ v0@ record drop storepage ptr $02 + cls dedit filepage bupd ; ", 0 
d0a0 .. 00		edit3: db ": ed dup v0! open $01 do i v0@ record cls . edc loop ; ",0 
d0d8			;edit3: db ": ed dup v0! open $01 do i v0@ record cls . i v1! edc loop ; ",0 
d0d8			 
d0d8			; SPI Net support words 
d0d8			 
d0d8			; v0! = node to send to 
d0d8			; ( str count - ) 
d0d8 .. 00		spi1:       db ": spitype spiceh $00 do dup i + @ v0@ spicel $10 spio spio spio spiceh $01 pause loop ; ",0 
d131			 
d131			; spiputc ( char node - ) 
d131 .. 00		spi2:       db ": spiputc spicel $10 spio spio ptr @ spio spiceh ; ",0 
d165			; spiputc ( u node - ) 
d165 .. 00		spi2b:       db ": spiputb spicel $10 spio spio spio spiceh ; ",0 
d193			 
d193			; spigetc ( - n ) 
d193 .. 00		spi4:       db ": spigetc spicel $11 spio spii spiceh ; ", 0 
d1bc			 
d1bc			; getnode ( - n ) 
d1bc .. 00		spi5:       db ": getnode spicel $18 spio spii nop spiceh ; ", 0 
d1e9			 
d1e9			; ( str node - )  
d1e9 .. 00		spi3:       db ": sendnode v0! count spiceh $00 do dup i + @ v0@ spicel $10 spio spio spio spiceh $01 pause loop ; ; ",0 
d24f			; store string ( str i - ) 
d24f			 
d24f			;spi3:       db ": storestrold spicel $03 spio spio ptr count clkstro spiceh ; ", 0 
d24f .. 00		spi6:       db ": storestr spicel $12 spio spio count $00 do dup i + @ spio $01 pause loop spiceh ; ", 0 
d2a4			 
d2a4			; get string ( addr i -  )    TO FIX 
d2a4			 
d2a4 .. 00		spi7:       db ": getstorestr spicel $13 spio spio \" \" repeat spii dup concat $00 = not until spiceh ; ", 0 
d2fc			 
d2fc			 
d2fc			; NETCHAT (TODO) 
d2fc			; Program to allow two nodes to chat with eachother 
d2fc			; 
d2fc			; v0 - target node 
d2fc			;  
d2fc			; accept input at 0,0 
d2fc			; if input is string send spitype to target node 
d2fc			; starting at row 2,0 , while spigetchr is not zero ->  
d2fc			; 
d2fc			; 
d2fc			; TODO add paging of get request 
d2fc			 
d2fc			; ( node - ) 
d2fc .. 00		spi8:		db ": netchatp $00 $00 at accept ;", 0 
d31b .. 00		spi9: 		db ": netchatr repeat spigetchr dup dup $00 = not if emit then $00 = not until $02 pause ; ",0 
d373 .. 00		spi10:		db ": netchat v0! repeat netchatp count dup $00 > if spitype $01 pause then cls $00 $03 at \">\" . netchatr true until nop ; ", 0 
d3eb			 
d3eb			 
d3eb			; Long read of currently open file 
d3eb .. 00		longread:   db ": lread read repeat readcont if read concat then readcont until nop ; ", 0 
d432			 
d432			; clear stack  
d432			 
d432 .. 00		clrstack:  db ": clrstk depth ?dup if $01 do drop loop then nop ; ", 0 
d466			 
d466			; type ( addr count - ) 
d466 .. 00		type:     db ": type $00 do dup i + @ emit loop ; ", 0 
d48b			 
d48b			; some direct memory words 
d48b			; strncpy ( len t f -- t ) 
d48b			 
d48b .. 00		strncpy:   db ": strncpy $00 scratch 2! $02 scratch 2! do $00 scratch 2@ i + @ $02 scratch 2@ i + ! loop nop  ;",0 
d4ec			 
d4ec .. 00		start1:     	db ": bpon $00 bp ;",0 
d4fc .. 00		start2:     	db ": bpoff $01 bp ;",0 
d50d .. 00		start3b:         db ": ls dir cls drop dup $00 > if $01 do $08 $04 at . $01 $04 at . $04 $04 at . $23 $04 at accept drop scroll loop then nop ;",0 
d588 .. 00		start3c:         db ": dirlist dir cls drop dup $00 > if $01 do \"/\" .> .> \"Ext:\" .> .> \"Id: \" .> .>  loop then nop ;",0 
d5e8			 
d5e8 .. 00		tuck:         db ": tuck swap over ;", 0 
d5fb			 
d5fb			; a handy word to list items on the stack 
d5fb			 
d5fb .. 00		list:            db ": more cls repeat scroll $01 $04 at depth . $0a $04 at .> $01 $01 at accept drop depth 0= not until nop ;",0 
d665			 
d665			 
d665			; test stack  
d665			; rnd8 stest 
d665			 
d665			;stest:   db ": stest cls  v0! v0@ $00 do rnd8 $01 $01 at i . $01 pause loop v0@ $00 do drop $12 $01 at depth . $01 pause loop nop ;",0  
d665			 
d665			; random malloc and free cycles 
d665			 
d665			;mtesta:      db ": mtesta $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . rnd8 dup $13 $01 at . malloc heap $1f $01 at . $1f $02 at . $01 pause free $01 until nop ;", 0 
d665			 
d665			; fixed malloc and free cycles 
d665			 
d665			;mtestb:      db ": mtestb $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 malloc heap $1f $01 at . $1f $02 at . $01 pause free $01 until nop ;", 0 
d665			 
d665			; fixed double string push and drop cycle  
d665			 
d665			;mtestc:      db ": mtestc $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 spaces $2f spaces  heap $1f $01 at . $1f $02 at . $01 pause drop drop $01 until nop ; ", 0 
d665			 
d665			; consistent fixed string push and drop cycle  
d665			 
d665			;mtestd:      db ": mtestd $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 spaces heap $1f $01 at . $1f $02 at . $01 pause drop $01 until nop ; ", 0 
d665			 
d665			;mteste:      db ": mteste $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . rnd8 dup spaces $0f $02 at . heap $1f $01 at . $1f $02 at . $01 pause drop $01 until nop ; ", 0 
d665			 
d665			;test1:		db ": aa 1 2 3 ;", 0 
d665			;test2:     	db "111 aa 888 999",0 
d665			;test3:     	db ": bb 77 ;",0 
d665			;test4:     	db "$02 $01 do i . loop bb",0 
d665			 
d665 .. 00		test5:     	db ": hline $13 $00 do i $01 at 1 . i $04 at 1 . loop nop ;",0 
d69d .. 00		test6:     	db ": vline $04 $01 do $00 i at 1 . $13 i at 1 . loop nop ;",0 
d6d5 .. 00		test7:     	db ": box hline vline ;",0 
d6e9 .. 00		test8:     	db ": world cls box $03 $03 at Hello-World! . ;",0 
d715 .. 00		test9:     	db ": sw $01 adsp world ;",0 
d72b .. 00		test10:     	db ": fw $00 adsp world draw $05 pause ;",0 
d750			;test11:     	db "hello create .",0 
d750			;test12:     	db "hello2 create .",0 
d750			 
d750			;mmtest1:     	db "cls $0001 $0008 MIN . $0002 pause",0 
d750			;mmtest2:     	db "cls $0101 $0008 MIN . $0002 pause",0 
d750			;mmtest3:     	db "cls $0001 $0008 MAX . $0002 pause",0 
d750			;mmtest4:     	db "cls $0101 $0008 MAX . $0002 pause",0 
d750			;mmtest5:     	db "cls $0001 $0001 MIN . $0002 pause",0 
d750			;mmtest6:     	db "cls $0001 $0001 MAX . $0002 pause",0 
d750			 
d750			;iftest1:     	db "$0001 IF cls .",0 
d750			;iftest2:     	db "$0000 IF cls .",0 
d750			;iftest3:     	db "$0002 $0003 - IF cls .",0 
d750			;looptest1:     	db "$0003 $0001 do i . loop 8",0 
d750			;looptest2:     	db "$0003 $0001 do i . $0001 pause loop 8",0 
d750			 
d750			;ifthtest1:     	db "$0001 IF is-true . $0005 pause THEN next-word . $0005 pause",0 
d750			;ifthtest2:     	db "$0000 IF is-true . $0005 pause THEN next-word . $0005 pause",0 
d750			;ifthtest3:     	db "$0002 $0003 - IF is-true . $0005 pause THEN next-word . $0005 pause",0 
d750			 
d750			 
d750 .. 00		sound1: db ": note spicel spio spiceh spicel ; ",0 
d774 .. 00		sound2: db ": slient $9f note $bf note $df note $ff note ; ", 0 
d7a4 .. 00		sound3: db ": sound $01 cartdev $00 spitime ! ; ",0 
d7c9 .. 00		sound4: db ": cha $00 ; ",0 
d7d6 .. 00		sound5: db ": chb $20 ; ",0 
d7e3 .. 00		sound6: db ": chc $40 ; ",0 
d7f0 .. 00		sound7: db ": chd $60 ; ",0 
d7fd .. 00		sound8: db ": cnote $80 + + note ; ", 0 
d815 .. 00		sound9: db ": cvol $90 + + note ; ", 0 
d82c			 
d82c			 
d82c			 
d82c			 
d82c			; a small guess the number game 
d82c			 
d82c .. 00		game1:          db ": gsn rnd8 v1! ;",0 
d83d .. 00		game1a:          db ": gs $00 $00 at Enter-a-number .- $00 $02 at between-1-and-255 .- $00 $03 at accept str2num v2! ;",0 
d89f			 
d89f .. 00		game1b:          db ": gcb v2@ v1@ < if $00 $00 at Too-low! .- $01 then ;",0 
d8d4 .. 00		game1c:          db ": gcc v2@ v1@ > if $00 $00 at Too-high! .- $01 then ;",0 
d90a .. 00		game1d:          db ": gcd v2@ v1@ = if $00 $00 at Yes! .- $00 then ;",0 
d93b .. 00		game1s:          db ": gck gcb gcc gcd ;",0 
d94f .. 00		game1t:          db ": sc v3@ $01 + v3! ;",0 
d964 .. 00		game1f:          db ": fsc v3@ cls $01 $01 at You-Took .- $02 $03 at . ;",0 
d998 .. 00		game1z:         db ": ga $00 v3! gsn repeat cls gs cls gck $02 pause sc until fsc nop ;",0 
d9dc			 
d9dc			; Using 'ga' save a high score across multiple runs using external storage 
d9dc			 
d9dc .. 00		game1zz:         db ": gas ga $01 bank $80 bread $01 $04 at Prev-Score .> storepage ptr $02 + dup 2@ . v3@ swap 2! $80 bupd ;",0 
da45			 
da45			 
da45			;game2r:          db ": m2r rnd8 v1! ;  ",0, 0, 0, FORTH_END_BUFFER 
da45			;game2b1:          db ": m2b1 $1f $00 do i v2@ at rnd8 $30 < if A . then loop nop ;  ",0, 0, 0, FORTH_END_BUFFER 
da45			;game2b2:          db ": m2b cls $04 $01 do i v2! m2b1 loop ;  ",0, 0, 0, FORTH_END_BUFFER 
da45			 
da45			; simple screen saver to test code memory reuse to destruction 
da45			 
da45 .. 00		ssv2:            db ": ssvchr $2a $2d rnd dup $2c = if drop $20 then nop ;",0 
da7b .. 00		ssv3:            db ": ssvposx $01 $27 rnd v0! ;",0 
da97 .. 00		ssv4:            db ": ssvposy $01 $05 rnd v1! ;",0 
dab3 .. 00		ssv5:            db ": ssvt ssvposx ssvposy ;",0 
dacc .. 00		ssv1:          db ": ssv cls repeat ssvposx ssvposy v0@ v1@ at ssvchr emit $01 until nop ;",0 
db14 .. 00		ssv1cpm:          db ": ssvcpm cls repeat ssvposx ssvposy v0@ v1@ at ssvchr emit $01 pausems $01 until nop ;",0 
db6b			;ssv1:          db ": ssv cls repeat ssvt v0@ v1@ at ssvchr emit $01 until nop ;",0 
db6b			;ssv1:          db ": ssv ssvposx ssvposy at ssvchr ;",0 
db6b			;ssv1:            db ": ssv repeat ssvpos rnd8 $10 if               $01 until nop ;",0 
db6b			;ssv2:            db ": ssvchr v0! v1! at? ;",0 
db6b			;ssv5:            db ": ssvt ssvposx ssvposy v0@ .> v1@ .> ;",0 
db6b			;ssv2:            db ": ssvchr $2a $2d rnd  ;",0 
db6b			 
db6b			 
db6b			 
db6b			; minesweeper/battleship finding game 
db6b			; draws a game board of random ship/mine positions 
db6b			; user enters coords to see if it hits on 
db6b			; game ends when all are hit 
db6b			; when hit or miss says how many may be in the area 
db6b			 
db6b			; setup the game board and then hide it 
db6b			;game2b:          db ": mbsetup $02 fb cls $04 $01 do i v2! $10 $01 do i v2@ at rnd8 $30 < if A . then loop loop $05 pause $01 fb ;",0 
db6b			;game2bf:         db ": mbsetupf cls $04 $01 do i v2! $10 $01 do i v2@ at \"+\" . loop loop nop ;",0 
db6b			;; prompt for where to target 
db6b			;game2mba:        db ": mbp $12 $04 at Turns .> v3@ . $12 $03 at Score .> v0@ . $12 $01 at Enter-X-__ .- $1a $01 at accept $12 $02 at Enter-Y-__ .- $1a $02 at accept nop ;", 0  
db6b			;game2mbas:        db ": mbsv str2num v2! str2num v1! nop ;", 0  
db6b			;; TODO see if the entered coords hits or misses pushes char hit of miss 
db6b			;game2mbht:      db ": mbckht nop ;",0 
db6b			;game2mbms:      db ": mbcms nop ;",0 
db6b			; TODO how many might be near by 
db6b			;game2mb:          db ": mb $00 v0! $00 v3! mbsetup mbsetupf repeat mbp mbsv $02 fb mbckht mbcms v1@ v2@ at@ $01 fb v1@ v2@ at emit $01 until nop ;",0 
db6b			 
db6b			; Game 3 
db6b			 
db6b			; Vert scroller ski game - avoid the trees! 
db6b			 
db6b			; v0 score (ie turns) 
db6b			; v1 player pos 
db6b			; v2 left wall 
db6b			; v3 right wall 
db6b			 
db6b			; Draw side walls randomly 
db6b			 
db6b			;game3w:   db ": vsw v2@ $04 at \"|\" . v3@ $04 at \"|\" . nop ;", 0 
db6b			 
db6b			; Draw player 
db6b			;game3p:   db ": vsp v1@ $01 at \"V\" . nop ; ", 0 
db6b			 
db6b			; TODO Get Key 
db6b			 
db6b			; TODO Move left right 
db6b			 
db6b			; scroll and move walls a bit 
db6b			 
db6b			;game3sc:  db ": vsscl v2@ $01 + v2! v3@ $01 - v3! scroll nop ;", 0 
db6b			 
db6b			; main game loop 
db6b			 
db6b			;game3vsi:    db ": vsi $00 v0! $01 v2! $12 v3! $06 v1! nop ;",0 
db6b			;game3vs:    db ": vs vsi repeat vsw vsp vsscl $05 pause scroll $01 until nop ;",0 
db6b			 
db6b			; key board defs 
db6b			 
db6b .. 00		keyup:       db ": keyup $05 ;",0 
db79 .. 00		keydown:       db ": keydown $0a ;",0 
db89 .. 00		keyleft:       db ": keyleft $0b ;",0 
db99 .. 00		keyright:       db ": keyright $0c ;",0 
dbaa .. 00		keyf1:       db ": keyf1 $10 ;",0 
dbb8 .. 00		keyf2:       db ": keyf2 $11 ;",0 
dbc6 .. 00		keyf3:       db ": keyf3 $12 ;",0 
dbd4 .. 00		keyf4:       db ": keyf4 $13 ;",0 
dbe2 .. 00		keyf5:       db ": keyf5 $14 ;",0 
dbf0 .. 00		keyf6:       db ": keyf6 $15 ;",0 
dbfe .. 00		keyf7:       db ": keyf7 $16 ;",0 
dc0c .. 00		keyf8:       db ": keyf8 $17 ;",0 
dc1a .. 00		keyf9:       db ": keyf9 $18 ;",0 
dc28 .. 00		keyf10:       db ": keyf10 $19 ;",0 
dc37 .. 00		keyf11:       db ": keyf11 $1a ;",0 
dc46 .. 00		keyf12:       db ": keyf12 $1b ;",0 
dc55			 
dc55 .. 00		keytab:       db ": keytab $09 ;",0 
dc64 .. 00		keycr:       db ": keycr $0d ;",0 
dc72 .. 00		keyhome:       db ": keyhome $0e ;",0 
dc82 .. 00		keyend:       db ": keyend $0f ;",0 
dc91 .. 00		keybs:       db ": keybs $08 ;",0 
dc9f			 
dc9f			   
dc9f			 
dc9f			 
dc9f			 
dc9f			; eof 
# End of file forth_autostart.asm
dc9f			 
dc9f			 
dc9f			 
dc9f			; stack over and underflow checks 
dc9f			 
dc9f			; init the words to detect the under/overflow 
dc9f			 
dc9f			chk_stk_init: 
dc9f				; a vague random number to check so we dont get any "lucky" hits 
dc9f 3e 2d			ld a, 45 
dca1 6f				ld l, a 
dca2 00				nop 
dca3 3e 17			ld a, 23 
dca5 67				ld h, a 
dca6			 
dca6 22 97 e2			ld (chk_word), hl     ; the word we need to check against 
dca9			 
dca9			;	ld (chk_stund), hl	; stack points.... 
dca9 22 00 ef			ld (chk_stovr), hl 
dcac 22 e6 e9			ld (chk_ret_und), hl 
dcaf 22 a4 e9			ld (chk_ret_ovr), hl 
dcb2 22 22 e9			ld (chk_loop_ovr), hl 
dcb5 22 20 e8			ld (chk_data_ovr), hl 
dcb8 c9				ret 
dcb9				 
dcb9			check_stacks: 
dcb9				; check all stack words 
dcb9			 
dcb9 e5				push hl 
dcba d5				push de 
dcbb			 
dcbb			;	ld de,(chk_word) 
dcbb			;	ld hl, (chk_stund)	; stack points.... 
dcbb			;	if DEBUG_STK_FAULT 
dcbb			;		DMARK "FAa" 
dcbb			;		CALLMONITOR 
dcbb			;	endif 
dcbb			;	call cmp16 
dcbb			;	jp z, .chk_faulta 
dcbb			; 
dcbb			;	ld de, sfaultsu 
dcbb			;	jp .chk_fault 
dcbb			 
dcbb 2a 00 ef		.chk_faulta: ld hl, (chk_stovr) 
dcbe ed 5b 97 e2		ld de,(chk_word) 
dcc2				if DEBUG_STK_FAULT 
dcc2					DMARK "FAb" 
dcc2					CALLMONITOR 
dcc2				endif 
dcc2 cd 08 8d			call cmp16 
dcc5 28 06			jr z, .chk_fault1 
dcc7 11 6b dd			ld de, sfaultso 
dcca c3 1c dd			jp .chk_fault 
dccd			.chk_fault1:  
dccd 2a e6 e9			ld hl, (chk_ret_und) 
dcd0 ed 5b 97 e2		ld de,(chk_word) 
dcd4				if DEBUG_STK_FAULT 
dcd4					DMARK "FAU" 
dcd4					CALLMONITOR 
dcd4				endif 
dcd4 cd 08 8d			call cmp16 
dcd7 ca e0 dc			jp z, .chk_fault2 
dcda 11 7b dd			ld de, sfaultru 
dcdd c3 1c dd			jp .chk_fault 
dce0			.chk_fault2:  
dce0 2a a4 e9			ld hl, (chk_ret_ovr) 
dce3 ed 5b 97 e2		ld de,(chk_word) 
dce7				if DEBUG_STK_FAULT 
dce7					DMARK "FA1" 
dce7					CALLMONITOR 
dce7				endif 
dce7 cd 08 8d			call cmp16 
dcea ca f3 dc			jp z, .chk_fault3 
dced 11 89 dd			ld de, sfaultro 
dcf0 c3 1c dd			jp .chk_fault 
dcf3			.chk_fault3:  
dcf3 2a 22 e9			ld hl, (chk_loop_ovr) 
dcf6 ed 5b 97 e2		ld de,(chk_word) 
dcfa				if DEBUG_STK_FAULT 
dcfa					DMARK "FA2" 
dcfa					CALLMONITOR 
dcfa				endif 
dcfa cd 08 8d			call cmp16 
dcfd ca 06 dd			jp z, .chk_fault4 
dd00 11 a3 dd			ld de, sfaultlo 
dd03 c3 1c dd			jp .chk_fault 
dd06			.chk_fault4:  
dd06 2a 20 e8			ld hl, (chk_data_ovr) 
dd09 ed 5b 97 e2		ld de,(chk_word) 
dd0d				if DEBUG_STK_FAULT 
dd0d					DMARK "FA3" 
dd0d					CALLMONITOR 
dd0d				endif 
dd0d cd 08 8d			call cmp16 
dd10 ca 19 dd			jp z, .chk_fault5 
dd13 11 bd dd			ld de, sfaultdo 
dd16 c3 1c dd			jp .chk_fault 
dd19			 
dd19			 
dd19			.chk_fault5:  
dd19 d1				pop de 
dd1a e1				pop hl 
dd1b			 
dd1b c9				ret 
dd1c			 
dd1c cd bd 8a		.chk_fault: 	call clear_display 
dd1f 3e 28				ld a, display_row_2 
dd21 cd d0 8a				call str_at_display 
dd24 11 4d dd				   ld de, .stackfault 
dd27 3e 00				ld a, display_row_1 
dd29 cd d0 8a				call str_at_display 
dd2c 11 65 ee				    ld de, debug_mark 
dd2f 3e 11				ld a, display_row_1+17 
dd31 cd d0 8a				call str_at_display 
dd34 cd e0 8a				call update_display 
dd37			 
dd37				; prompt before entering montior for investigating issue 
dd37			 
dd37 3e 78			ld a, display_row_4 
dd39 11 63 97			ld de, endprog 
dd3c			 
dd3c cd e0 8a			call update_display		 
dd3f			 
dd3f cd fd 99			call next_page_prompt 
dd42			 
dd42 d1				pop de 
dd43 e1				pop hl 
dd44 cd b7 97				call monitor 
dd47 cd 1c 9e				call forth_warmstart 
dd4a c3 b3 96				jp warmstart_afterauto 
dd4d					;jp 0 
dd4d					;halt 
dd4d			 
dd4d			 
dd4d			 
dd4d .. 00		.stackfault: 	db "Stack fault:",0 
dd5a			 
dd5a .. 00		sfaultsu: 	db	"Stack under flow",0 
dd6b .. 00		sfaultso: 	db	"Stack over flow",0 
dd7b .. 00		sfaultru:	db "RTS underflow",0 
dd89 .. 00		sfaultro:	db "RTS overflow/LS underflow", 0 
dda3 .. 00		sfaultlo:	db "LS overflow/DTS underflow", 0 
ddbd .. 00		sfaultdo:	db "DTS overflow", 0 
ddca			 
ddca			 
ddca			fault_dsp_under: 
ddca 11 dc dd			ld de, .dsp_under 
ddcd c3 92 de			jp .show_fault 
ddd0			 
ddd0			fault_rsp_under: 
ddd0 11 ea dd			ld de, .rsp_under 
ddd3 c3 92 de			jp .show_fault 
ddd6			fault_loop_under: 
ddd6 11 f8 dd			ld de, .loop_under 
ddd9 c3 92 de			jp .show_fault 
dddc			 
dddc .. 00		.dsp_under: db "DSP Underflow",0 
ddea .. 00		.rsp_under: db "RSP Underflow",0 
ddf8 .. 00		.loop_under: db "LOOP Underflow",0 
de07			 
de07			 
de07 d5			type_faultn: 	push de 
de08 e5					push hl 
de09 cd bd 8a				call clear_display 
de0c 11 36 de				   ld de, .typefaultn 
de0f 3e 00				ld a, display_row_1 
de11 cd d0 8a				call str_at_display 
de14 11 65 ee				    ld de, debug_mark 
de17 3e 11				ld a, display_row_1+17 
de19 cd d0 8a				call str_at_display 
de1c cd e0 8a				call update_display 
de1f			 
de1f				; prompt before entering montior for investigating issue 
de1f			 
de1f 3e 78			ld a, display_row_4 
de21 11 63 97			ld de, endprog 
de24			 
de24 cd e0 8a			call update_display		 
de27			 
de27 cd fd 99			call next_page_prompt 
de2a			 
de2a e5					push hl 
de2b d5					push de 
de2c cd b7 97				call monitor 
de2f cd 1c 9e				call forth_warmstart 
de32 c3 b3 96				jp warmstart_afterauto 
de35 76					halt 
de36			 
de36			 
de36 .. 00		.typefaultn: db "NUM Type Expected TOS!",0 
de4d			 
de4d d5			type_faults: 	push de 
de4e e5					push hl 
de4f cd bd 8a				call clear_display 
de52 11 7b de				   ld de, .typefaults 
de55 3e 00				ld a, display_row_1 
de57 cd d0 8a				call str_at_display 
de5a 11 65 ee				    ld de, debug_mark 
de5d 3e 11				ld a, display_row_1+17 
de5f cd d0 8a				call str_at_display 
de62 cd e0 8a				call update_display 
de65			 
de65				; prompt before entering montior for investigating issue 
de65			 
de65 3e 78			ld a, display_row_4 
de67 11 63 97			ld de, endprog 
de6a			 
de6a cd e0 8a			call update_display		 
de6d			 
de6d cd fd 99			call next_page_prompt 
de70			 
de70 e1					pop hl 
de71 d1					pop de 
de72 cd b7 97				call monitor 
de75 cd 1c 9e				call forth_warmstart 
de78 c3 b3 96				jp warmstart_afterauto 
de7b			 
de7b			 
de7b .. 00		.typefaults: db "STR Type Expected TOS!",0 
de92			 
de92			.show_fault: 	 
de92 d5					push de 
de93 cd bd 8a				call clear_display 
de96 d1					pop de 
de97 3e 00				ld a, display_row_1 
de99 cd d0 8a				call str_at_display 
de9c 11 65 ee				    ld de, debug_mark 
de9f 3e 11				ld a, display_row_1+17 
dea1 cd d0 8a				call str_at_display 
dea4 cd e0 8a				call update_display 
dea7			 
dea7				; prompt before entering montior for investigating issue 
dea7			 
dea7 3e 78			ld a, display_row_4 
dea9 11 63 97			ld de, endprog 
deac			 
deac cd e0 8a			call update_display		 
deaf			 
deaf cd fd 99			call next_page_prompt 
deb2			 
deb2 e1					pop hl 
deb3 d1					pop de 
deb4 cd b7 97				call monitor 
deb7			; do a dump to cli and not warmstart so we preserve all of the uwords.  
deb7			; TODO Make optional fault restart to cli or warm boot? 
deb7					;jp warmstart 
deb7 c3 f7 96				jp cli 
deba 76					halt 
debb			 
debb			 
debb			; handle the auto run of code from files in storage 
debb			 
debb			 
debb			include "forth_startup.asm" 
debb			; Which startup method to use? 
debb			; 
debb			; version 1 - allows for a single stored file to be selected to run at start up (if se storage is enabled) 
debb			; followed by loading of a list of scripts in eeprom 
debb			 
debb			; version 2 - if se storage is enabled then auto load all files which begin with a '*' else use loading 
debb			; from eeprom 
debb			 
debb			; Select with define in main stubs 
debb			 
debb			if STARTUP_V1 
debb				include "forth_startupv1.asm" 
debb			; Startup script loading version 1 
debb			 
debb			; If SE storage is available first stage is to use the selected file 
debb			; then go through the eeprom list 
debb			 
debb .. 00		sprompt1: db "Startup load...",0 
decb .. 00		sprompt2: db "Run? 1=No *=End #=All",0 
dee1			 
dee1			 
dee1			 
dee1			 
dee1			forth_startup: 
dee1 21 10 d0			ld hl, startcmds 
dee4 3e 00			ld a, 0 
dee6 32 e1 e6			ld (os_last_cmd), a    ; tmp var to skip prompts if doing all 
dee9			 
dee9 e5			.start1:	push hl 
deea cd bd 8a			call clear_display 
deed 11 bb de			ld de, sprompt1 
def0 3e 00		        ld a, display_row_1 
def2 cd d0 8a			call str_at_display 
def5 11 cb de			ld de, sprompt2 
def8 3e 28		        ld a, display_row_2 
defa cd d0 8a			call str_at_display 
defd e1				pop hl 
defe e5				push hl 
deff 5e				ld e,(hl) 
df00 23				inc hl 
df01 56				ld d,(hl) 
df02 3e 50		        ld a, display_row_3 
df04 cd d0 8a			call str_at_display 
df07 cd e0 8a			call update_display 
df0a			 
df0a			 
df0a 3a e1 e6			ld a, (os_last_cmd) 
df0d fe 00			cp 0 
df0f 28 05			jr z, .startprompt 
df11 cd f4 89			call delay250ms 
df14 18 24			jr .startdo 
df16				 
df16				 
df16			 
df16			.startprompt: 
df16			 
df16 3e 9f			ld a,display_row_4 + display_cols - 1 
df18 11 fb 99		        ld de, endprg 
df1b cd d0 8a			call str_at_display 
df1e cd e0 8a			call update_display 
df21 cd 00 8a			call delay1s 
df24 cd 47 e0			call cin_wait 
df27						 
df27 fe 2a			cp '*' 
df29 28 5e			jr z, .startupend1 
df2b fe 23			cp '#' 
df2d 20 07			jr nz, .startno 
df2f 3e 01			ld a, 1 
df31 32 e1 e6			ld (os_last_cmd),a 
df34 18 04			jr .startdo 
df36 fe 31		.startno:	cp '1' 
df38 28 3a			jr z,.startnxt  
df3a			 
df3a				; exec startup line 
df3a			.startdo:	 
df3a e1				pop hl 
df3b e5				push hl 
df3c				 
df3c 5e				ld e,(hl) 
df3d 23				inc hl 
df3e 56				ld d,(hl) 
df3f eb				ex de,hl 
df40			 
df40 e5				push hl 
df41			 
df41 3e 00			ld a, 0 
df43				;ld a, FORTH_END_BUFFER 
df43 cd 5b 90			call strlent 
df46 23				inc hl   ; include zero term to copy 
df47 06 00			ld b,0 
df49 4d				ld c,l 
df4a e1				pop hl 
df4b 11 bb e2			ld de, scratch 
df4e ed b0			ldir 
df50			 
df50			 
df50 21 bb e2			ld hl, scratch 
df53 cd c0 9e			call forthparse 
df56 cd fc 9e			call forthexec 
df59 cd 16 9e			call forthexec_cleanup 
df5c			 
df5c 3e 78			ld a, display_row_4 
df5e 11 63 97			ld de, endprog 
df61			 
df61 cd e0 8a			call update_display		 
df64			 
df64 3a e1 e6			ld a, (os_last_cmd) 
df67 fe 00			cp 0 
df69 20 09			jr nz, .startnxt 
df6b cd fd 99			call next_page_prompt 
df6e cd bd 8a		        call clear_display 
df71 cd e0 8a			call update_display		 
df74			 
df74				; move onto next startup line? 
df74			.startnxt: 
df74			 
df74 cd f4 89			call delay250ms 
df77 e1				pop hl 
df78			 
df78 23				inc hl 
df79 23				inc hl 
df7a			 
df7a e5				push hl 
df7b 5e				ld e, (hl) 
df7c 23				inc hl 
df7d 56				ld d, (hl) 
df7e e1				pop hl 
df7f				; TODO replace 0 test 
df7f			 
df7f eb				ex de, hl 
df80 cd 13 8d			call ishlzero 
df83			;	ld a,e 
df83			;	add d 
df83			;	cp 0    ; any left to do? 
df83 eb				ex de, hl 
df84 c2 e9 de			jp nz, .start1 
df87 18 01			jr .startupend 
df89			 
df89 e1			.startupend1: pop hl 
df8a			.startupend: 
df8a			 
df8a cd bd 8a			call clear_display 
df8d cd e0 8a			call update_display 
df90 c9				ret 
df91			if STORAGE_SE 
df91			 
df91			sprompt3: db "Loading from start-up file?:",0 
df91			sprompt4: db "(Y=Any key/N=No)",0 
df91			 
df91			 
df91			forth_autoload: 
df91			 
df91				; load block 0 of store 1 
df91				 
df91				ld a, $fe      ; bit 0 clear 
df91				ld (spi_device), a 
df91			 
df91				call storage_get_block_0 
df91			 
df91				ld a, (store_page+STORE_0_AUTOFILE) 
df91			 
df91				cp 0 
df91				ret z     ; auto start not enabled 
df91			 
df91				call clear_display 
df91			 
df91				; set bank 
df91			 
df91					ld a, (store_page+STORE_0_BANKRUN) 
df91					ld (spi_device), a 
df91			 
df91				; get file id to load from and get the file name to display 
df91			 
df91					ld a, (store_page+STORE_0_FILERUN) 
df91			 
df91					ld l, 0 
df91					ld h, a 
df91					ld de, store_page 
df91			 
df91					if DEBUG_FORTH_WORDS 
df91						DMARK "ASp" 
df91						CALLMONITOR 
df91					endif 
df91					call storage_read 
df91			 
df91					if DEBUG_FORTH_WORDS 
df91						DMARK "ASr" 
df91						CALLMONITOR 
df91					endif 
df91			 
df91					call ishlzero 
df91					ret z             ; file not found 
df91			 
df91					ld a, display_row_2 + 10 
df91					ld de, store_page+3 
df91					call str_at_display 
df91				 
df91			; 
df91			 
df91				ld a, display_row_1+5 
df91				ld de, sprompt3 
df91				call str_at_display 
df91				ld a, display_row_3+15 
df91				ld de, sprompt4 
df91				call str_at_display 
df91			 
df91				call update_display 
df91			 
df91				call cin_wait 
df91				cp 'n' 
df91				ret z 
df91				cp 'N' 
df91				ret z 
df91			 
df91				call delay1s 
df91			 
df91				ld a, (store_page+2) 
df91				ld (store_openmaxext), a    ; save count of ext 
df91				ld a, 1  
df91				ld (store_openext), a    ; save count of ext 
df91			 
df91			.autof:  
df91				ld l , a 
df91				 
df91				ld a, (store_page) 
df91				ld h, a	 
df91				ld de, store_page 
df91					if DEBUG_FORTH_WORDS 
df91						DMARK "ASl" 
df91						CALLMONITOR 
df91					endif 
df91					call storage_read 
df91				call ishlzero 
df91				ret z 
df91			;	jr z, .autoend 
df91			 
df91					if DEBUG_FORTH_WORDS 
df91						DMARK "ASc" 
df91						CALLMONITOR 
df91					endif 
df91				ld de, store_page+2 
df91				ld a, display_row_4 
df91				call str_at_display 
df91			 
df91				call update_display 
df91				call delay250ms 
df91			 
df91			 
df91			 
df91				ld hl, store_page+2 
df91				call forthparse 
df91				call forthexec 
df91				call forthexec_cleanup 
df91			 
df91				 
df91				ld a, (store_openext) 
df91				inc a 
df91				ld (store_openext), a    ; save count of ext 
df91			 
df91				jr .autof 
df91			;.autofdone: 
df91			; 
df91			;		if DEBUG_FORTH_WORDS 
df91			;			DMARK "ASx" 
df91			;			CALLMONITOR 
df91			;		endif 
df91			;;	call clear_display 
df91			;	ret 
df91			 
df91			 
df91			 
df91			endif 
# End of file forth_startupv1.asm
df91			endif 
df91			if STARTUP_V2 
df91				include "forth_startupv2.asm" 
df91			endif 
df91			 
# End of file forth_startup.asm
df91			 
df91			; eof 
# End of file forth_kernel.asm
df91			;include "nascombasic.asm" 
df91			 
df91			 
df91			; find out where the code ends if loaded into RAM (for SC114) 
df91			;endofcode:  
df91			;	nop 
df91			 
df91			 
df91			; jump to nmi vector 
df91			 
df91			init_nmi: 
df91 3e c9			ld a, $c9   ; RET 
df93 32 72 ee			ld (nmi_vector), a 
df96 c9				ret 
df97			nmi: 
df97 e5				push hl 
df98 d5				push de 
df99 c5				push bc 
df9a f5				push af 
df9b cd 72 ee			call nmi_vector 
df9e f5				push af 
df9f c5				push bc 
dfa0 d5				push de 
dfa1 e5				push hl 
dfa2 ed 4d			reti 
dfa4			 
dfa4			 
dfa4			; eof 
dfa4			 
# End of file main.asm
dfa4			;include "firmware_lcd_4x40.asm" 
dfa4			;;include "firmware_lcd_4x20.asm" 
dfa4			include "firmware_serial_display.asm" 
dfa4			 
dfa4			; Serial display interface for SC114 
dfa4			 
dfa4			 
dfa4			display_row_1: equ 0 
dfa4			display_row_2: equ display_row_1+display_cols 
dfa4			display_row_3: equ display_row_2 + display_cols 
dfa4			display_row_4: equ display_row_3 + display_cols 
dfa4			 
dfa4			kLCDWidth:  EQU display_cols             ;Width in characters 
dfa4			kLCD_Line1: EQU 0x00  
dfa4			kLCD_Line2: EQU kLCD_Line1+kLCDWidth 
dfa4			; E1 
dfa4			kLCD_Line3: EQU kLCD_Line2+kLCDWidth 
dfa4			kLCD_Line4: EQU kLCD_Line3+kLCDWidth  
dfa4			 
dfa4			lcd_init: 
dfa4				; no init as handled by the SCM bios 
dfa4 c9				ret 
dfa5			 
dfa5			 
dfa5			; low level functions for direct screen writes 
dfa5			 
dfa5			; output char at pos? 
dfa5			fLCD_Str: 
dfa5			        ;out (SC114_SIO_1_OUT),a 
dfa5 c5				push bc 
dfa6 0e 02			ld c, $02 
dfa8 f7				rst $30 
dfa9 c1				pop bc 
dfaa c9				ret 
dfab			 
dfab			; position the cursor on the screen using A as realtive point in screen buffer (i.e. A=(x+(width/y))) 
dfab			fLCD_Pos: 
dfab				; use ASCII escape to position 
dfab			        ;out (SC114_SIO_1_OUT),a 
dfab c5				push bc 
dfac 0e 02			ld c, $02 
dfae f7				rst $30 
dfaf c1				pop bc 
dfb0			 
dfb0 c9				ret 
dfb1			 
dfb1			; output char at pos 
dfb1			fLCD_Data: 
dfb1			      ;  out (SC114_SIO_1_OUT),a 
dfb1 c5				push bc 
dfb2 0e 02			ld c, $02 
dfb4 f7				rst $30 
dfb5 c1				pop bc 
dfb6			 
dfb6 c9				ret 
dfb7			 
dfb7			; ascii cls  
dfb7			 
dfb7 1b 5b 48 00	.cls:   db 27, '[', 'H', 0 
dfbb			 
dfbb			; write the frame buffer given in hl to hardware  
dfbb			write_display: 
dfbb			 
dfbb			API: equ 0 
dfbb			 
dfbb			if API 
dfbb				push bc 
dfbb				ld b, 4 
dfbb			 
dfbb			        ld (display_write_tmp), hl 	  
dfbb			 
dfbb				; clear and home cursor 
dfbb			 
dfbb				ld c, 6 
dfbb				ld de, .cls 
dfbb				rst $30 
dfbb			 
dfbb			 
dfbb			.writeln: 
dfbb			 
dfbb				ld de, (display_write_tmp) 
dfbb				ld c, 6 
dfbb				rst $30 
dfbb				ld c, 7 
dfbb				rst $30 
dfbb			 
dfbb				ld hl, (display_write_tmp) 
dfbb				ld de, display_cols 
dfbb				add hl,de 
dfbb				ld (display_write_tmp),hl 
dfbb			 
dfbb				djnz  .writeln 
dfbb			 
dfbb				pop bc 
dfbb			 
dfbb			 
dfbb				ret 
dfbb			endif 
dfbb e5				push hl 
dfbc c5				push bc 
dfbd d5				push de 
dfbe			 
dfbe			;	ld c, 2 
dfbe			;	;ld de, .cls 
dfbe			;	ld a, 27 
dfbe			;	rst $30 
dfbe			;	ld c, 2 
dfbe			;	;ld de, .cls 
dfbe			;	ld a, '[' 
dfbe			;	rst $30 
dfbe			; 
dfbe			;	ld c, 2 
dfbe			;	;ld de, .cls 
dfbe			;	ld a, 'H' 
dfbe			;	rst $30 
dfbe			; 
dfbe			 
dfbe 0e 02			ld c, 2 
dfc0				;ld de, .cls 
dfc0 3e 1b			ld a, 27 
dfc2 f7				rst $30 
dfc3			 
dfc3			 
dfc3 0e 02			ld c, 2 
dfc5				;ld de, .cls 
dfc5 3e 5b			ld a, '[' 
dfc7 f7				rst $30 
dfc8 0e 02			ld c, 2 
dfca				;ld de, .cls 
dfca 3e 32			ld a, '2' 
dfcc f7				rst $30 
dfcd 0e 02			ld c, 2 
dfcf				;ld de, .cls 
dfcf 3e 4a			ld a, 'J' 
dfd1 f7				rst $30 
dfd2 d1				pop de 
dfd3 c1				pop bc 
dfd4 e1				pop hl 
dfd5			 
dfd5			 
dfd5 22 c3 eb		        ld (display_write_tmp), hl 	  
dfd8 3e 00			ld a, kLCD_Line1 
dfda			        ;    CALL fLCD_Pos       ;Position cursor to location in A 
dfda 06 28			ld b, display_cols 
dfdc ed 5b c3 eb		ld de, (display_write_tmp) 
dfe0 cd 3e e0			call write_len_string 
dfe3				 
dfe3			 
dfe3 e5			push hl 
dfe4 d5			push de 
dfe5 c5			push bc 
dfe6 0e 07			ld c, 7 
dfe8 f7				rst $30 
dfe9 c1			pop bc 
dfea d1			pop de 
dfeb e1			pop hl 
dfec			 
dfec				 
dfec 2a c3 eb			ld hl, (display_write_tmp) 
dfef 11 28 00			ld de, display_cols 
dff2 19				add hl,de 
dff3 22 c3 eb			ld (display_write_tmp),hl 
dff6			 
dff6				 
dff6 3e 28			ld a, kLCD_Line2 
dff8			        ;    CALL fLCD_Pos       ;Position cursor to location in A 
dff8 06 28			ld b, display_cols 
dffa ed 5b c3 eb		ld de, (display_write_tmp) 
dffe cd 3e e0			call write_len_string 
e001				 
e001 2a c3 eb			ld hl, (display_write_tmp) 
e004 11 28 00			ld de, display_cols 
e007 19				add hl,de 
e008 22 c3 eb			ld (display_write_tmp),hl 
e00b			 
e00b e5			push hl 
e00c d5			push de 
e00d c5			push bc 
e00e 0e 07			ld c, 7 
e010 f7				rst $30 
e011 c1			pop bc 
e012 d1			pop de 
e013 e1			pop hl 
e014			 
e014				 
e014 3e 50			ld a, kLCD_Line3 
e016			         ;   CALL fLCD_Pos       ;Position cursor to location in A 
e016 06 28			ld b, display_cols 
e018 ed 5b c3 eb		ld de, (display_write_tmp) 
e01c cd 3e e0			call write_len_string 
e01f				 
e01f 2a c3 eb			ld hl, (display_write_tmp) 
e022 11 28 00			ld de, display_cols 
e025 19				add hl,de 
e026 22 c3 eb			ld (display_write_tmp),hl 
e029			 
e029 e5			push hl 
e02a d5			push de 
e02b c5			push bc 
e02c 0e 07			ld c, 7 
e02e f7				rst $30 
e02f c1			pop bc 
e030 d1			pop de 
e031 e1			pop hl 
e032			 
e032				 
e032 3e 78			ld a, kLCD_Line4 
e034			          ;  CALL fLCD_Pos       ;Position cursor to location in A 
e034 06 28			ld b, display_cols 
e036 ed 5b c3 eb		ld de, (display_write_tmp) 
e03a cd 3e e0			call write_len_string 
e03d c9					ret 
e03e			 
e03e			 
e03e				; write out a fixed length string given in b from de 
e03e			 
e03e 1a			write_len_string:   LD   A, (DE)        ;Get character from string 
e03f cd b1 df		            CALL fLCD_Data      ;Write character to display 
e042 13				inc de 
e043 10 f9			djnz write_len_string 
e045 c9				ret 
e046			 
e046			 
e046			; eof 
# End of file firmware_serial_display.asm
e046			;include "firmware_key_5x10.asm" 
e046			;;include "firmware_key_4x10.asm" 
e046			include "firmware_key_serial.asm" 
e046			; Serial keyboard interface for SC114 
e046			 
e046			key_init: 
e046				; no init as handled by the SCM bios 
e046 c9				ret 
e047			 
e047			 
e047			cin_wait: 
e047			;	ld a, 0 
e047			;	ret 
e047			 
e047				;in a,(SC114_SIO_1_IN) 
e047			        ; Use SCM API to get from whatever console device we are using 
e047 c5				push bc 
e048 0e 01			ld c, $01 
e04a f7				rst $30 
e04b c1				pop bc 
e04c c9				ret 
e04d			 
e04d			cinndb: 	 
e04d			cin: 
e04d			 
e04d			 
e04d c5				push bc 
e04e			 
e04e				; any key waiting to process? 
e04e 0e 03			ld c, $03 
e050 f7				rst $30 
e051 28 05			jr z, .cin_skip 
e053			 
e053				; yep, get it 
e053			 
e053 0e 01			ld c, $01 
e055 f7				rst $30 
e056 c1				pop bc 
e057 c9				ret 
e058			.cin_skip: 
e058 3e 00			ld a, 0 
e05a c1				pop bc 
e05b c9				ret 
e05c			 
e05c			 
e05c			 
e05c			 
# End of file firmware_key_serial.asm
e05c			endofcode:  
e05c			baseram:  
e05c 00				nop 
e05d			 
e05d			heap_start: equ baseram+15  ; Starting address of heap 
e05d			free_list:  equ baseram+10      ; Block struct for start of free list (MUST be 4 bytes) 
e05d			heap_size: equ  heap_end-heap_start      ; Number of bytes available in heap   TODO make all of user ram 
e05d			;VDU:  EQU     endofcode           ; BASIC Work space 
e05d			; eof 
e05d			 
# End of file os_mega_sc114.asm
e05d
