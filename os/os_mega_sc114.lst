# File debug_level2.asm
0000			 
0000			; DEBUG Level 2 - All useful debug on and memory courruption guards 
0000			 
0000			; Odd specific debug points for testing hardware dev 
0000			 
0000			;DEBUG_LEVEL0: equ 0 
0000			;DEBUG_LEVEL0: equ 0 
0000			;DEBUG_LEVEL2: equ 1 
0000			DEBUG_LEVEL: equ '2' 
0000			 
0000			DEBUG_SOUND: equ 0      
0000			DEBUG_STK_FAULT: equ 0 
0000			DEBUG_INPUT: equ 0     ; Debug input entry code 
0000			DEBUG_INPUTV2: equ 0     ; Debug input entry code 
0000			DEBUG_KEYCINWAIT: equ 0 
0000			DEBUG_KEYCIN: equ 0 
0000			DEBUG_KEY: equ 0 
0000			DEBUG_KEY_MATRIX: equ 0 
0000			DEBUG_STORECF: equ 0 
0000			DEBUG_STORESE: equ 1        ; TODO  w locks up, r returns.  
0000			DEBUG_SPI_HARD_CE0: equ 0    ; only handshake on CE0 on port A 
0000			DEBUG_SPI: equ 0    ; low level spi tests 
0000			 
0000			; Enable many break points 
0000			 
0000			DEBUG_FORTH_PARSE_EXEC: equ 0     ; 6 
0000			DEBUG_FORTH_PARSE_EXEC_SLOW: equ 0     ; 6 
0000			DEBUG_FORTH_PARSE_NEXTWORD: equ 0 
0000			DEBUG_FORTH_JP: equ 0    ; 4 
0000			DEBUG_FORTH_MALLOC: equ 0 
0000			DEBUG_FORTH_MALLOC_INT: equ 0 
0000			DEBUG_FORTH_DOT: equ 1 
0000			DEBUG_FORTH_DOT_WAIT: equ 0 
0000			DEBUG_FORTH_MATHS: equ 0 
0000			DEBUG_FORTH_TOK: equ 0    ; 4 
0000			DEBUG_FORTH_PARSE: equ 0    ; 3 
0000			DEBUG_FORTH: equ 0  ;2 
0000			DEBUG_FORTH_WORDS: equ 1   ; 1 
0000			DEBUG_FORTH_PUSH: equ 1   ; 1 
0000			DEBUG_FORTH_UWORD: equ 1   ; 1 
0000			 
0000			; Enable key point breakpoints 
0000			 
0000			DEBUG_FORTH_DOT_KEY: equ 0 
0000			DEBUG_FORTH_PARSE_KEY: equ 0   ; 5 
0000			DEBUG_FORTH_WORDS_KEY: equ 1   ; 1 
0000			 
0000			; Debug stack imbalances 
0000			 
0000			ON: equ 1 
0000			OFF: equ 0 
0000			 
0000			DEBUG_STACK_IMB: equ 0 
0000			STACK_IMB_STORE: equ 20 
0000			 
0000			; House keeping and protections 
0000			 
0000			DEBUG_FORTH_STACK_GUARD: equ 1    ; under/over flows 
0000			DEBUG_FORTH_MALLOC_GUARD: equ 1 
0000			DEBUG_FORTH_MALLOC_HIGH: equ 0     ; warn only if more than 255 chars being allocated. would be highly unusual! 
0000			FORTH_ENABLE_FREE: equ 0 
0000			FORTH_ENABLE_MALLOCFREE: equ 1 
0000			FORTH_ENABLE_DSPPOPFREE: equ 1    ; TODO BUG Seems to be OK in some situations but with SW it crashes straight away 
0000			FORTH_ENABLE_FLOATMATH: equ 0 
0000			; eof 
# End of file debug_level2.asm
# File os_mega_sc114.asm
0000			 
0000			; Hardware Platform 
0000			 
0000			BASE_SC114: equ 1 
0000			BASE_KEV: equ 0 
0000			BASE_CPM: equ 0 
0000			 
0000			ENABLE_BASIC: equ 0 
0000			 
0000			STARTUP_V1: equ 1 
0000			STARTUP_V2: equ 0 
0000			 
0000			tos:	equ 0f000h 
0000			; Using SCM API instead 
0000			;SC114_SIO_1_OUT: equ 81 
0000			;SC114_SIO_1_IN: equ 80 
0000			; 
0000			; 
0000			; CPU clock 
0000			; 
0000			CPU_CLOCK_4MHZ: equ 1 
0000			CPU_CLOCK_8MHZ: equ  0 
0000			CPU_CLOCK_10MHZ: equ  0 
0000			 
0000			; use microchip serial eeprom for storage 
0000			 
0000			STORAGE_SE: equ 0 
0000			SOUND_ENABLE: equ 0 
0000			 
0000			; the port where the PIO using the SC103 card is located 
0000			 
0000			SC103_PIO: equ 068h 
0000			 
0000			; Full OS but with the 5x10 fullsized keyboard 
0000			 
0000			display_rows: equ 4     
0000			;display_cols: equ 20 
0000			display_cols: equ 40 
0000			 
0000			key_rows: equ 5      
0000			key_cols: equ 10    
0000			 
0000			 
0000			include "main.asm" 
0000			; z80 homebrew opperating system 
0000			; 
0000			 
0000			STARTUP_ENABLE: equ 1 
0000			 
0000			 
0000			; bios jump points via rst 
0000			 
0000			if BASE_SC114 = 1  
0000			 
0000				org 8000h 
8000			endif 
8000			 
8000			if BASE_KEV = 1  
8000			 
8000				org 0h 
8000			endif 
8000			 
8000			if BASE_CPM = 1  
8000			 
8000				org 100h 
8000			endif 
8000 c3 71 96			jp coldstart     ; rst 0 - cold boot 
8003			 
8003			 
8003 ..			buildtime: db   "Build: " 
800a					include "romtimestamp.asm" 
800a ..			db '2025-09-05 21:42' 
# End of file romtimestamp.asm
801a 00				   db 0 
801b .. 32 00		debuglevel: db   "DL",DEBUG_LEVEL, 0 
801f			 
801f			 
801f			 
801f			;        nop  
801f			;        nop 
801f			;;	org 05h		; null out bdos call 
801f			; 
801f			;        nop  
801f			;        nop  
801f			;        nop 
801f			;;	org 08h 
801f			;;; 
801f			;;	jp cin		; rst 8 - char in 
801f			;;; 
801f			; 
801f			;        nop 
801f			;        nop 
801f			;        nop 
801f			;        nop 
801f			;        nop 
801f			;        nop 
801f			;        nop 
801f			;        nop 
801f			;	org 010h 
801f			;; 
801f			;	jp cout		; rest 010h  - char out 
801f			;; 
801f			;	org 01bh   
801f			; 
801f			;	;jp  		; rst 01bh   - write string to display 
801f			;	jp str_at_display 
801f			; 
801f			; 
801f			;	org 020h 
801f			; 
801f			;	; jp		 ; rst 020h - read char at screen location 
801f			; 
801f			;	org 028h 
801f			 
801f				; jp		 ; rst 028h  - storage i/o 
801f			 
801f			; 	org 030h 
801f			;	jp break_point_state 
801f			  
801f			; $30  
801f			; org 038h 
801f			; $38 
801f			 
801f			; TODO any more important entry points to add to jump table for easier coding use? 
801f			 
801f			if BASE_KEV = 1  
801f			 
801f				; need to be at $66 for nmi support 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255,0,255,0,255 
801f				db 0,255 
801f				jp nmi 
801f			endif 
801f			 
801f			include "firmware.asm" 
801f			  
801f			; main constants (used here and in firmware)  
801f			  
801f			; TODO have page 0 of storage as bios  
801f			  
801f			Device_A: equ 0h  
801f			Device_B: equ 040h          ; Sound  
801f			  
801f			if BASE_KEV  
801f			Device_C: equ 080h          ; Storage and ext cart devices  
801f			endif  
801f			  
801f			if BASE_SC114  
801f			Device_C: equ  SC103_PIO          ; Storage and ext cart devices  
801f			endif  
801f			  
801f			if BASE_CPM  
801f			; TODO fixup for CPM  
801f			Device_C: equ 080h          ; Storage and ext cart devices  
801f			endif  
801f			  
801f			Device_D: equ 0c0h             ; Keyboard and LCD  
801f			  
801f			; Odd specific debug points for testing hardware dev  
801f			  
801f			;if DEBUG_LEVEL0  
801f			;	include "debug_level0.asm"  
801f			;endif  
801f			;if DEBUG_LEVEL1  
801f			;	include "debug_level1.asm"  
801f			;endif  
801f			;if DEBUG_LEVEL2  
801f			;	include "debug_level2.asm"  
801f			;endif  
801f			  
801f			  
801f			CALLMONITOR: macro  
801f			;	call break_point_state  
801f			; now use the break point debug vector  
801f				call debug_vector  
801f				endm  
801f			  
801f			MALLOC_1: equ 1        ; from dk88   
801f			MALLOC_2: equ 0           ; broke  
801f			MALLOC_3: equ 0           ; really broke  
801f			MALLOC_4: equ 0              ; mine pretty basic reuse and max of 250 chars  
801f			  
801f			if BASE_KEV   
801f			;stacksize: equ 256  
801f			; each stack entry is three bytes (type + word)  
801f			stacksize: equ 3*150  
801f			  
801f			STACK_RET_SIZE: equ 64  
801f			STACK_LOOP_SIZE: equ 128  
801f			STACK_DATA_SIZE: equ 512  
801f			endif  
801f			if BASE_SC114  
801f			;tos:	equ 0f000h  
801f			stacksize: equ 256  
801f			STACK_RET_SIZE: equ 64  
801f			STACK_LOOP_SIZE: equ 128  
801f			STACK_DATA_SIZE: equ 256  
801f			endif  
801f			  
801f			if BASE_CPM  
801f			;tos:	equ 0f000h  
801f			stacksize: equ 256  
801f			STACK_RET_SIZE: equ 64  
801f			STACK_LOOP_SIZE: equ 128  
801f			STACK_DATA_SIZE: equ 256  
801f			endif  
801f			  
801f			;if STORAGE_SE == 0  
801f			STORE_BLOCK_PHY:   equ 64    ; physical block size on storage   64byte on 256k eeprom  
801f			STORE_DEVICE_MAXBLOCKS:  equ  255*2 ; how many blocks are there on this storage device  
801f			;endif  
801f			  
801f			; Block 0 at offset $3b is a flag to decide to offer auto start up - 0 = prompt 1-auto run no prompt 2 - dont run  
801f			  
801f			STORE_0_AUTORUN: equ $20  
801f			  
801f			; Block 0 at offset $20+ holds the file number to run at system startup after the display  
801f			  
801f			STORE_0_AUTOFILE: equ $21  
801f			STORE_0_BANKRUN: equ $23  
801f			STORE_0_FILERUN: equ $24  
801f			  
801f			; Block 0 offsets for settings  
801f			  
801f			; if set then skip prompt for start up and accept all  
801f			  
801f			STORE_0_QUICKSTART: equ $25  
801f			  
801f			; Blocks where directory table is held  
801f			  
801f			; Reducing the number of entries increases the max file size  
801f			  
801f			;STORE_DIR_START: equ 1  
801f			;STORE_DIR_END: equ 33  
801f			  
801f			; Blocks from where file data is stored  
801f			  
801f			;STORE_DATA_START: equ STORE_DIR_END + 1  
801f			  
801f			; Block indicators (<32 are data files)  
801f			  
801f			;STORE_BLOCK_CFG: equ $8f       ; config block  
801f			;STORE_BLOCK_DIRF: equ $8e       ; directory block free  
801f			;STORE_BLOCK_DIRU: equ $8d       ; directory block free  
801f			;STORE_BLOCK_FREE: equ $85       ; data block free  
801f			;STORE_BLOCK_AUTO: equ $89       ; auto start code  
801f			  
801f			  
801f			  
801f			; Directory entry flags  
801f			  
801f			;STORE_DIR_FREE: equ 0  
801f			;STORE_DIR_FILE:  equ 1  
801f			  
801f			; Structure offsets to directory entries  
801f			;STORE_DE_FLAG: equ 0  
801f			;STORE_DE_MAXEXT: equ 1  
801f			;STORE_DE_FILENAME: equ 2  
801f			  
801f			; Structure offsets to block 0  
801f			  
801f			;STORE_BK0_ISFOR: equ 1  
801f			;STORE_BK0_LABEL: equ 3  
801f			  
801f			; memory allocation   
801f			  
801f			chk_stund: equ tos+2           ; underflow check word  
801f			chk_stovr: equ chk_stund-stacksize -2; overflow check word  
801f			  
801f			; keyscan table needs rows x cols buffer  
801f			;key_rows: equ 5     ; TODO move out to mini and maxi + 1 null  
801f			;key_cols: equ 10    ; TODO move out to mini and maxi + 1 null  
801f			  
801f			keyscan_table_row1: equ chk_stovr -key_cols-1  
801f			keyscan_table_row2: equ keyscan_table_row1-key_cols-1  
801f			keyscan_table_row3: equ keyscan_table_row2-key_cols-1  
801f			keyscan_table_row4: equ keyscan_table_row3-key_cols-1  
801f			keyscan_table_row5: equ keyscan_table_row4-key_cols-1  
801f			keyscan_table: equ keyscan_table_row5-(key_cols*key_rows)-1  
801f			keyscan_scancol: equ keyscan_table-key_cols  
801f			;keyscan_table_len: equ key_rows*key_cols  
801f			;keybufptr: equ keyscan_table - 2  
801f			;keysymbol: equ keybufptr - 1  
801f			key_held: equ keyscan_scancol-1	; currently held  
801f			key_held_prev: equ key_held - 1   ; previously held (to detect bounce and cycle of key if required)  
801f			key_repeat_ct: equ key_held_prev - 4 ; timers (two words)  
801f			key_fa: equ key_repeat_ct -1 ;  
801f			key_fb: equ key_fa -1 ;  
801f			key_fc: equ key_fb -1 ;  
801f			key_fd: equ key_fc -1 ;  
801f			key_face_held: equ key_fd - 1   
801f			; flag for enabling/disabling various hardware diag loading via block 0 on bank 1  
801f			  
801f			hardware_config: equ key_face_held - 10  
801f			  
801f			; hardware config switches  
801f			; TODO add bitmasks on includes for hardware  
801f			; high byte for expansion ids  
801f			;     0000 0000  no card inserted  
801f			;     0000 0001  storage card inserted  
801f			;     0000 0010  spi sd card active  
801f			  
801f			;       
801f			; low byte:  
801f			;     0000 0001   4x4 keypad  
801f			;     0000 0010   full keyboard  
801f			;     0000 0011   spi/ext keyboard  
801f			;     0000 0100   20x4 lcd  
801f			;     0000 1000   40x4 lcd  
801f			;     0000 1100   spi/ext display  
801f			;     0001 0000   ide interface available  
801f			  
801f			hardware_word: equ hardware_config - 2  
801f			  
801f			; debug marker - optional display of debug point on the debug screens  
801f			  
801f			nmi_vector:  equ hardware_word - 3   ; vector to the nmi handler  
801f			debug_vector:  equ nmi_vector - 3   ; vector to the debug handler  
801f			  
801f			debug_umark: equ debug_vector - 6  ; current user mark  
801f			debug_mark: equ debug_umark - 4    ; internal word debug points  
801f			  
801f			; input_str vars  
801f			input_ptr:  equ debug_mark - 2    ; ptr to the current cursor position of string currently being edited  on entry starting   
801f			input_start:  equ input_ptr - 2    ; ptr to the start of string   
801f			input_size: equ input_start -1  ; number of chars  
801f			input_display_size: equ input_size -1  ; TODO number of chars that are displayable. if < input_size then scroll   
801f			input_at_pos: equ input_display_size - 1 ; frame buffer offset for start of input  
801f			input_under_cursor: equ input_at_pos - 1 ; char under the cursor so we can blink it  
801f			input_at_cursor: equ input_under_cursor - 1 ; offset of cursor to current start of string  
801f			input_cur_flash: equ input_at_cursor - 2 ;  timeout for cursor flash  
801f			input_cur_onoff: equ input_cur_flash - 1 ;  cursor blink on or off  
801f			input_len: equ input_cur_onoff - 5 ; length of current input  
801f			input_cursor: equ input_len - 5 ; offset of cursor to current start of string  
801f			  
801f			; cursor blink rate  
801f			CUR_BLINK_RATE: equ $09  
801f			;CUR_BLINK_RATE: equ 15  
801f			  
801f			key_actual_pressed: equ input_cursor - 1   
801f			key_symbol: equ key_actual_pressed - 1   
801f			key_shift: equ key_symbol - 1   
801f			  
801f			; Display allocation  
801f			  
801f			;display_rows: equ 4     ; move out to mini and mega files  
801f			;display_cols: equ 20  
801f			  
801f			display_fb_len: equ display_rows*display_cols  
801f			  
801f			; primary frame buffer     
801f			display_fb0: equ  key_shift-display_fb_len -1 ; -display_fb_len-1          ; cli input     TODO why is that doubling up?  
801f			; working frame buffers  
801f			display_fb1: equ  display_fb0-display_fb_len -1 ; -display_fb_len-1          ; default running program  
801f			display_fb3: equ  display_fb1-display_fb_len - 1  
801f			display_fb2: equ  display_fb3-display_fb_len - 1  
801f			;  
801f			; pointer to active frame buffer  
801f			display_fb_active: equ display_fb2 - 2  
801f			display_lcde1e2: equ display_fb_active - 1         ; 0=e1, 1=e2   For E1/E2 selection when using the lcd 4x40 display  
801f			display_write_tmp: equ display_lcde1e2 - 2  
801f			display_active:  equ display_write_tmp-3   ; current state of activity char (plus room to write string)  
801f			  
801f			;  
801f			  
801f			;; can load into de directory  
801f			cursor_col: equ display_active-1  
801f			cursor_row: equ cursor_col-1  
801f			cursor_ptr: equ cursor_row - 1     ;  actual offset into lcd memory for row and col combo  
801f			cursor_shape: equ cursor_ptr - 2   ; char used for the current cursor   
801f			  
801f			; maths vars  
801f			  
801f			LFSRSeed: equ cursor_shape -20   
801f			randData: equ LFSRSeed - 2  
801f			xrandc: equ randData - 2  
801f			stackstore: equ xrandc - 2  
801f			seed1: equ  stackstore -2   
801f			seed2: equ seed1 - 2  
801f			  
801f			; cf storage vars  
801f			  
801f			iErrorNum:  equ seed2-1         ;Error number  
801f			iErrorReg:  equ iErrorNum -1              ;Error register  
801f			iErrorVer:  equ iErrorReg - 1              ;Verify error flag  
801f			  
801f			store_bank_active: equ iErrorVer - (5 + 8 ) 		; TODO not used.  indicator of which storage banks are available to use 5 on board and 8 in cart  
801f			  
801f			STORE_BLOCK_LOG:  equ   280      ; TODO remove.... Logical block size     
801f			  
801f			store_page: equ store_bank_active-STORE_BLOCK_LOG-1            ; bigger than page size for eeprom so we can join multiple blocks if they are continuation records  
801f			;?????store_ffpage: equ store_page-STORE_BLOCK_LOG            ; page size for eeprom?????  
801f			store_readptr: equ store_page-2       ; tracks the file extent during storage_read of continuation blocks  
801f			store_readbuf: equ store_readptr-2       ; tracks the position for the buffer during storage_read of continuation blocks  
801f			store_longread: equ store_readbuf -1 ;   if zero then only read one block. If not zero then do a read for as long as required  
801f			store_tmp1: equ store_longread - 2      ; temp pointer holders during ops  
801f			store_tmp2: equ store_tmp1 - 2        ; temp pointer holders during ops  
801f			store_tmp3: equ store_tmp2 - 2        ; temp pointer holders during ops  
801f			store_tmpid: equ store_tmp3 - 1		; page temp id  
801f			store_tmpext: equ store_tmpid - 1		; file extent temp  
801f			store_readcont: equ store_tmpid - 1		; If current read results in an overflow buffer to next record flag it up  
801f			store_openaddr: equ store_readcont - 2		; file block address of current opened file for read  
801f			store_openext: equ store_openaddr - 1		; file extent of current opened file for read  
801f			store_openmaxext: equ store_openext - 1		; max extent of current opened file for read  
801f			store_filecache: equ store_openmaxext-2   ;  TODO (using just one for now)  file id + extent count cache * 5  
801f			store_tmppageid: equ store_filecache-2    ; phyical page id temp  
801f			;  
801f			; spi vars  
801f			  
801f			  
801f			spi_clktime: equ store_tmppageid - 1      ; holds the number of ms that happens between spi clock pulses  
801f			spi_cartdev: equ spi_clktime - 1      ; holds bit mask to send to portb (ext spi) devices  
801f			spi_cartdev2: equ spi_cartdev - 1      ; holds bit mask to send to portb's shift reg devices  
801f			spi_portbyte: equ spi_cartdev2 - 1      ; holds bit mask to send to spi bus   
801f			spi_device: equ spi_portbyte - 1    ; bit mask to send to porta (eeproms) devices  
801f			spi_device_id: equ spi_device - 1    ; human readable bank number  
801f			  
801f			;;;;; forth cli params  
801f			  
801f			; TODO use a different frame buffer for forth???  
801f			  
801f			f_cursor_ptr:  equ spi_device_id - 1  ; offset into frame buffer for any . or EMIT output  
801f			cli_buffer: equ f_cursor_ptr - 20     ; temp hold - maybe not needed  
801f			cli_origtoken: equ cli_buffer - 2     ; pointer to the text of token for this word being checked  
801f			cli_token: equ cli_origtoken - 2     ; pointer to the text of token for this word being checked  
801f			cli_execword: equ cli_token - 2      ; pointer to start of code for this word  
801f			cli_nextword: equ cli_execword - 2      ; pointer to start of next word in dict  
801f			cli_ptr: equ cli_nextword - 2           ; pointer to start of word to parse by forth kernel (working)  
801f			cli_origptr: equ cli_ptr - 2           ; pointer to start of word to parse which resets cli_ptr on each word test  
801f			  
801f			cli_mvdot: equ cli_origptr - 1 ;     ; true will move the cursor once something is displayed  
801f			cli_autodisplay: equ cli_mvdot - 1 ;     ; true will auto update the display (slow) otherwise need to use DRAW  
801f			cli_var_array: equ cli_autodisplay - ( 10 * 2 ) ; word or string pointer variables using V@0-V@9  
801f			cli_var_array2: equ cli_var_array - ( 26 * 2 ) ; word or string pointer variables using VAR word  
801f			cli_ret_sp: equ cli_var_array2 - 2    ; ret stack pointer  
801f			cli_loop_sp: equ cli_ret_sp - 2   ; data stack pointer  
801f			cli_data_sp: equ cli_loop_sp - 2   ; data stack pointer  
801f			  
801f			chk_ret_und: equ cli_data_sp-2           ; underflow check word  
801f			cli_ret_stack: equ chk_ret_und - STACK_RET_SIZE      ; TODO could I just use normal stack for this? - use linked list for looping  
801f			chk_ret_ovr: equ cli_ret_stack -2; overflow check word  
801f			cli_loop_stack: equ chk_ret_ovr - STACK_LOOP_SIZE      ; TODO could I just use normal stack for this? - use linked list for looping  
801f			chk_loop_ovr: equ cli_loop_stack -2; overflow check word  
801f			cli_data_stack: equ chk_loop_ovr - STACK_DATA_SIZE		 ;   
801f			chk_data_ovr: equ cli_data_stack -2; overflow check word  
801f			  
801f			os_var_array: equ chk_data_ovr - (32 * 2)      ;   32 word array for use using the SCRATCH word  
801f			  
801f			; os/forth token vars  
801f			  
801f			os_last_cmd: equ os_var_array-255  
801f			os_cli_cmd: equ os_last_cmd-255              ; cli command entry line  
801f			os_current_i: equ os_cli_cmd-2  
801f			os_cur_ptr: equ os_current_i-2  
801f			os_word_scratch: equ os_cur_ptr-30  
801f			os_tok_len: equ os_word_scratch - 2  
801f			os_tok_ptr: equ os_tok_len - 2               ; our current PC ptr  
801f			os_tok_malloc: equ os_tok_ptr - 2  
801f			os_last_new_uword: equ os_tok_malloc - 2    ; hold start of last user word added  
801f			os_input: equ os_last_new_uword-255    ; buffer for EDIT word  
801f			execscratch: equ os_input-255        ; exec cmd eval buffer  
801f			scratch: equ execscratch-255  
801f			  
801f			os_stack_1: equ scratch - 3       ; stack holding area 1  
801f			os_stack_2: equ os_stack_1 - 3       ; stack holding area 2  
801f			os_stack_3: equ os_stack_2 - 3       ; stack holding area 3  
801f			os_stack_4: equ os_stack_3 - 3       ; stack holding area 4  
801f			  
801f			  
801f			; temp locations for new word processing to save on adding more   
801f			  
801f			os_new_malloc: equ os_stack_4-2  
801f			os_new_parse_len: equ os_new_malloc - 2  
801f			os_new_word_len: equ os_new_parse_len - 2  
801f			os_new_work_ptr: equ os_new_word_len - 2  
801f			os_new_src_ptr: equ os_new_work_ptr - 2  
801f			os_new_exec: equ os_new_src_ptr - 2  
801f			os_new_exec_ptr: equ os_new_exec - 2  
801f			  
801f			; resume memory alloocations....  
801f			  
801f			;os_view_disable: equ os_new_exec_ptr - 1  
801f			os_view_af: equ os_new_exec_ptr - 2  
801f			os_view_hl: equ os_view_af -2  
801f			os_view_de: equ os_view_hl - 2  
801f			os_view_bc: equ os_view_de - 2  
801f			  
801f			; stack checksum word  
801f			if DEBUG_STACK_IMB  
801f				curframe: equ  os_view_de - 5  
801f				store_sp: equ curframe - (STACK_IMB_STORE*4)  
801f				chk_word: equ store_sp - 2		 ; this is the word to init and then check against to detect stack corruption. Held far away from all stacks  
801f			else  
801f				chk_word: equ os_view_bc - 2		 ; this is the word to init and then check against to detect stack corruption. Held far away from all stacks  
801f			endif  
801f			  
801f			; with data stack could see memory filled with junk. need some memory management   
801f			; malloc and free entry points added  
801f			  
801f			;free_list:  equ chk_word - 4     ; Block struct for start of free list (MUST be 4 bytes)  
801f			;heap_size: equ  (free_list-08100h)      ; Number of bytes available in heap   TODO make all of user ram  
801f			;;heap_start: equ free_list - heap_size  ; Starting address of heap  
801f			;heap_end: equ free_list-1  ; Starting address of heap  
801f			;heap_start: equ free_list - heap_size  ; Starting address of heap  
801f			  
801f			;heap_start: equ free_list - heap_size  ; Starting address of heap  
801f			heap_end: equ chk_word-1  ; Starting address of heap  
801f			  
801f			  
801f			;if BASE_KEV   
801f			;heap_start: equ 0800eh  ; Starting address of heap  
801f			;free_list:  equ 0800ah      ; Block struct for start of free list (MUST be 4 bytes)  
801f			;heap_size: equ  heap_end-heap_start      ; Number of bytes available in heap   TODO make all of user ram  
801f			;endif  
801f			  
801f			;if BASE_SC114  
801f			;heap_start: equ baseram+15  ; Starting address of heap  
801f			;free_list:  equ baseram+10      ; Block struct for start of free list (MUST be 4 bytes)  
801f			;endif  
801f			  
801f			  
801f			;;;;  
801f			  
801f			  
801f			; change below to point to last memory alloc above  
801f			topusermem:  equ   heap_start  
801f			  
801f			;if BASE_KEV   
801f			;baseusermem: equ 08000h  
801f			;endif  
801f			  
801f			;if BASE_SC114  
801f			;;aseusermem:     equ    12  
801f			;baseusermem:     equ    prompt  
801f			;;baseusermem:     equ    endofcode  
801f			;endif  
801f			  
801f			  
801f			; **********************************************************************  
801f			; **  Constants  
801f			; **********************************************************************  
801f			  
801f			; Constants used by this code module  
801f			kDataReg:   EQU Device_D           ;PIO port A data register  
801f			kContReg:   EQU Device_D+2           ;PIO port A control register  
801f			  
801f			  
801f			portbdata:  equ Device_D+1    ; port b data  
801f			portbctl:   equ Device_D+3    ; port b control  
801f			  
801f			  
801f			;KEY_SHIFT:   equ 5  
801f			;KEY_SYMBOLSHIFT:  equ 6  
801f			  
801f			KEY_SHIFTLOCK: equ 4  
801f			  
801f			  
801f			KEY_UP: equ 5  
801f			KEY_NEXTWORD: equ 6  
801f			KEY_PREVWORD: equ 7  
801f			KEY_BS: equ 8  
801f			KEY_TAB:  equ 9  
801f			KEY_DOWN: equ 10  
801f			KEY_LEFT: equ 11  
801f			KEY_RIGHT: equ 12  
801f			KEY_CR:   equ 13  
801f			KEY_HOME: equ 14  
801f			KEY_END: equ 15  
801f			  
801f			KEY_F1: equ 16  
801f			KEY_F2: equ 17  
801f			KEY_F3: equ 18  
801f			KEY_F4: equ 19  
801f			  
801f			KEY_F5: equ 20  
801f			KEY_F6: equ 21  
801f			KEY_F7: equ 22  
801f			KEY_F8: equ 23  
801f			  
801f			KEY_F9: equ 24  
801f			KEY_F10: equ 25  
801f			KEY_F11: equ 26  
801f			KEY_F12: equ 27  
801f			  
801f			;if DEBUG_KEY  
801f			;	KEY_MATRIX_NO_PRESS: equ '.'  
801f			;	KEY_SHIFT:   equ '.'  
801f			;	KEY_SYMBOLSHIFT:  equ '.'  
801f			;else  
801f				KEY_SHIFT:   equ '~'  
801f				KEY_SYMBOLSHIFT:  equ '~'  
801f				KEY_MATRIX_NO_PRESS: equ '~'  
801f			;endi  
801f			  
801f			  
801f			  
801f			  
801f			; Macro to make adding debug marks easier  
801f			  
801f			DMARK: macro str  
801f				push af  
801f				ld a, (.dmark)  
801f				ld (debug_mark),a  
801f				ld a, (.dmark+1)  
801f				ld (debug_mark+1),a  
801f				ld a, (.dmark+2)  
801f				ld (debug_mark+2),a  
801f				jr .pastdmark  
801f			.dmark: db str  
801f			.pastdmark: pop af  
801f			  
801f			endm  
801f			  
801f			  
801f			; macro to detect for stack imbalances  
801f			  
801f			include "stackimbal.asm"  
801f			; Macro and code to detect stock imbalances 
801f			 
801f			SPPUSH: equ 0 
801f			 
801f			; Add a stack frame which can be checked before return 
801f			 
801f			STACKFRAME: macro onoff frame1 frame2 
801f			 
801f				if DEBUG_STACK_IMB 
801f					if onoff 
801f						; save current SP 
801f						exx 
801f			 
801f						ld de, frame1 
801f						ld a, d 
801f						ld hl, curframe 
801f						call hexout 
801f						ld a, e 
801f						ld hl, curframe+2 
801f						call hexout 
801f			  
801f						ld hl, frame1 
801f						push hl 
801f						ld hl, frame2 
801f						push hl 
801f						exx 
801f					endif 
801f					 
801f				endif 
801f			endm 
801f			 
801f			STACKFRAMECHK: macro onoff frame1 frame2 
801f			 
801f					 
801f				if DEBUG_STACK_IMB 
801f					if onoff 
801f						exx 
801f						; check stack frame SP 
801f			 
801f						ld hl, frame2 
801f						pop de   ; frame2 
801f			 
801f						call cmp16 
801f						jr nz, .spnosame 
801f						 
801f			 
801f						ld hl, frame1 
801f						pop de   ; frame1 
801f			 
801f						call cmp16 
801f						jr z, .spfrsame 
801f			 
801f						.spnosame: call showsperror 
801f			 
801f						.spfrsame: nop 
801f			 
801f						exx 
801f					endif 
801f					 
801f				endif 
801f			 
801f			 
801f			endm 
801f			 
801f			 
801f			; for a sub routine, wrap SP collection and comparisons 
801f			 
801f			; Usage: 
801f			; 
801f			; SAVESP ON/OFF 0-STACK_IMB_STORE/4 
801f			; CHECKSP ON/OFF 0-STACK_IMB_STORE/4 
801f			 
801f			SAVESP: macro onoff storeword 
801f			 
801f				if DEBUG_STACK_IMB 
801f					if onoff 
801f						; save current SP 
801f			 
801f						ld (store_sp+(storeword*4)), sp 
801f			 
801f					endif 
801f					 
801f				endif 
801f			 
801f			endm 
801f			 
801f			CHECKSP: macro onoff storeword 
801f			 
801f				if DEBUG_STACK_IMB 
801f					if onoff 
801f			 
801f						; save SP after last save 
801f				 
801f						ld (store_sp+(storeword*4)+2), sp 
801f			 
801f						push hl 
801f						ld hl, store_sp+(storeword*4) 
801f						call check_stack_sp  
801f						pop hl 
801f			 
801f			 
801f					endif 
801f					 
801f				endif 
801f			 
801f			endm 
801f			 
801f			if DEBUG_STACK_IMB 
801f			 
801f			check_stack_sp: 
801f					push de 
801f			 
801f					ld e, (hl) 
801f					inc hl 
801f					ld d, (hl) 
801f					inc hl 
801f			 
801f					push de 
801f			 
801f			 
801f					ld e, (hl) 
801f					inc hl 
801f					ld d, (hl) 
801f					inc hl 
801f			 
801f					pop hl 
801f			 
801f			 
801f					; check to see if the same 
801f			 
801f					call cmp16 
801f					jr z, .spsame 
801f			 
801f					; not same 
801f			 
801f					call showsperror 
801f			.spsame: 
801f			 
801f					pop de 
801f			 
801f					ret 
801f			 
801f			.sperr:  db "Stack imbalance",0 
801f			 
801f			 
801f			showsperror: 
801f			 
801f			 
801f				push hl 
801f				push af 
801f				push de 
801f				call clear_display 
801f				ld de, .sperr 
801f				ld a,0 
801f			;	ld de,os_word_scratch 
801f				call str_at_display 
801f				ld a, display_row_1+17 
801f				ld de, debug_mark 
801f				call str_at_display 
801f				ld a, 0 
801f				ld (curframe+4),a 
801f				ld hl, curframe 
801f				ld de, os_word_scratch 
801f				ld a, display_row_4 
801f				call str_at_display 
801f				call update_display 
801f				;call break_point_state 
801f				call cin_wait 
801f			 
801f			;	ld a, ' ' 
801f			;	ld (os_view_disable), a 
801f				call bp_on 
801f				pop de	 
801f				pop af 
801f				pop hl 
801f				CALLMONITOR 
801f				ret 
801f			 
801f			endif 
801f			 
801f			 
801f			 
801f			; eof 
# End of file stackimbal.asm
801f			  
801f			;TODO macro to calc col and row offset into screen  
801f			  
801f			  
801f			  
801f			hardware_init:  
801f			  
801f				  
801f			  
801f					;ld a, 0  
801f					;ld (hardware_diag), a  
801f			  
801f					; clear all the buffers  
801f			  
801f 21 0a ed				ld hl, display_fb1  
8022 22 c6 eb				ld (display_fb_active), hl  
8025			  
8025 cd bd 8a				call clear_display  
8028			  
8028 21 c8 eb				ld hl, display_fb2  
802b 22 c6 eb				ld (display_fb_active), hl  
802e			  
802e cd bd 8a				call clear_display  
8031			  
8031					; init primary frame buffer area  
8031 21 ab ed				ld hl, display_fb0  
8034 22 c6 eb				ld (display_fb_active), hl  
8037			  
8037 cd bd 8a				call clear_display  
803a			  
803a			  
803a cd 39 df				call lcd_init		; lcd hardware first as some screen functions called during key_init e.g. cursor shapes  
803d			  
803d cd db df			call key_init  
8040 cd ad 80			call storage_init  
8043			  
8043				; setup malloc functions  
8043			  
8043				if MALLOC_1  
8043 cd a1 90				call  heap_init  
8046				endif  
8046				if MALLOC_4  
8046					call  heap_init  
8046				endif  
8046			  
8046				; init sound hardware if present  
8046			  
8046				if SOUND_ENABLE  
8046					call sound_init  
8046				endif  
8046			  
8046				; lcd test sequence  
8046					  
8046 cd e0 8a			call update_display  
8049 cd 00 8a			call delay1s  
804c 3e 2b			ld a,'+'  
804e cd c2 8a			call fill_display  
8051 cd e0 8a			call update_display  
8054 cd 00 8a			call delay1s  
8057 3e 2a			ld a,'*'  
8059 cd c2 8a			call fill_display  
805c cd e0 8a			call update_display  
805f cd 00 8a			call delay1s  
8062 3e 2d			ld a,'-'  
8064 cd c2 8a			call fill_display  
8067 cd e0 8a			call update_display  
806a cd 00 8a			call delay1s  
806d			  
806d			; boot splash screen  
806d			if display_cols == 20	  
806d			        ld a, display_row_1    
806d			else  
806d 3e 0a		        ld a, display_row_1 +10   
806f			endif  
806f 11 cf 95			ld de, prom_bootmsg  
8072 cd d0 8a			call str_at_display  
8075 cd e0 8a			call update_display  
8078			  
8078			  
8078 cd 00 8a			call delay1s  
807b cd 00 8a			call delay1s  
807e			if display_cols == 20	  
807e			            LD   A, display_row_3+2  
807e			else  
807e 3e 5c		            LD   A, display_row_3+12  
8080			endif  
8080 11 e4 95			ld de, prom_bootmsg1  
8083 cd d0 8a			call str_at_display  
8086			; display debug level  
8086 3e 78		            LD   A, display_row_4  
8088 11 1b 80			ld de, debuglevel  
808b cd d0 8a			call str_at_display  
808e			  
808e cd e0 8a			call update_display  
8091 cd 00 8a			call delay1s  
8094 cd 00 8a			call delay1s  
8097			  
8097			;	ld a, display_row_4+3  
8097			;	ld de, bootmsg2  
8097			;	call str_at_display  
8097			;	call update_display  
8097			;	call delay1s  
8097			;	call delay1s  
8097			  
8097			; debug mark setup  
8097			  
8097 3e 5f		ld a, '_'  
8099 32 65 ee		ld (debug_mark),a  
809c 32 66 ee		ld (debug_mark+1),a  
809f 32 67 ee		ld (debug_mark+2),a  
80a2 3e 00		ld a,0  
80a4 32 68 ee		ld (debug_mark+3),a  
80a7 32 69 ee		ld (debug_umark),a  
80aa			  
80aa c9					ret  
80ab			  
80ab			  
80ab			;bootmsg2:	db "Firmware v0.1",0  
80ab			  
80ab			; a 4x20 lcd  
80ab			; cout for display, low level positioning and writing functions (TODO) for hardware abstraction  
80ab			  
80ab			;if display_cols == 20  
80ab			;	include "firmware_lcd_4x20.asm"  
80ab			;endif  
80ab			  
80ab			;if display_cols == 40  
80ab			;	include "firmware_lcd_4x40.asm"  
80ab			;endif  
80ab			  
80ab			;  
80ab			; TODO use the low spare two pins on port a of display pio to bit bang a serial out video display to an esp  
80ab			; TODO abstract the bit bang video out interface for dual display  
80ab			; TODO wire video out to tx pin on rc2014 bus  
80ab			  
80ab			; must supply cin, and cin_wait for low level hardware abstraction   
80ab			; moved text_input entry points to here and leave the firmware hardware modules as abstraction layer  
80ab			; test scancode  
80ab			  
80ab			;;;;;  
80ab			;;;  
80ab			; Moved out to mini and maxi versions  
80ab			;  
80ab			; include "firmware_key_4x4.asm"  
80ab			; using existing 4 wire x 4 resistor array for input  
80ab			;include "firmware_key_4x10.asm"  
80ab			; need to mod the board for 5 rows due to resistor array  
80ab			;include "firmware_key_5x10.asm"  
80ab			  
80ab			; storage hardware interface  
80ab			  
80ab			; use microchip serial eeprom for storage  
80ab			  
80ab			  
80ab			if STORAGE_SE  
80ab				include "firmware_spi.asm"  
80ab				include "firmware_seeprom.asm"  
80ab			else  
80ab			   ; create some stubs for the labels  
80ab c9			se_readbyte: ret  
80ac c9			se_writebyte: ret  
80ad c9			storage_init: ret  
80ae			  
80ae			endif  
80ae			  
80ae			; use cf card for storage - throwing timeout errors. Hardware or software?????  
80ae			;include "firmware_cf.asm"  
80ae			  
80ae			; load up high level storage hardward abstractions  
80ae			include "firmware_storage.asm"  
80ae			 
80ae			; persisent storage hardware abstraction layer  
80ae			 
80ae			 
80ae			 
80ae			; Block 0 on storage is a config state 
80ae			 
80ae			 
80ae			 
80ae			; TODO add read phy block and write phy block functions 
80ae			; TODO add presence check (i.e. read write byte 0 of block 0 for eeprom) 
80ae			 
80ae			; Abstraction layer  
80ae			 
80ae			; Logocial block size is same size as physical size - using tape concept 
80ae			 
80ae			;STORE_BLOCK_PHY2LOG: equ (STORE_BLOCK_LOG/STORE_BLOCK_PHY)       ; How many physical blocks make up a logical block 
80ae			;STORE_BLOCK_MAX: equ (STORE_BLOCK_PHY*STORE_DEVICE_MAXBLOCKS)/255    ; Max number of logical blocks on the device 
80ae			 
80ae			 
80ae			 
80ae			; Filesystem layout (Logical layout) 
80ae			; 
80ae			; Block 0 - Bank config  
80ae			; 
80ae			;      Byte - 0 file id counter 
80ae			;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
80ae			;      Byte - 3-20 zero terminated bank label 
80ae			; 
80ae			; Block 1 > File storage 
80ae			; 
80ae			;      Byte 0 file id    - block 0 file details 
80ae			;      Byte 1 block id - block 0 is file  
80ae			;            Byte 2-15 - File name 
80ae			; 
80ae			;       - to end of block data 
80ae			; 
80ae			 
80ae			; Get ID for the file named in pointer held HL 
80ae			; Returns ID in HL = 255 if no file found 
80ae			 
80ae			storage_getid: 
80ae			 
80ae 22 6d ea			ld (store_tmp1), hl 
80b1			 
80b1				if DEBUG_STORESE 
80b1					DMARK "SGI" 
80b1 f5				push af  
80b2 3a c6 80			ld a, (.dmark)  
80b5 32 65 ee			ld (debug_mark),a  
80b8 3a c7 80			ld a, (.dmark+1)  
80bb 32 66 ee			ld (debug_mark+1),a  
80be 3a c8 80			ld a, (.dmark+2)  
80c1 32 67 ee			ld (debug_mark+2),a  
80c4 18 03			jr .pastdmark  
80c6 ..			.dmark: db "SGI"  
80c9 f1			.pastdmark: pop af  
80ca			endm  
# End of macro DMARK
80ca					CALLMONITOR 
80ca cd 6f ee			call debug_vector  
80cd				endm  
# End of macro CALLMONITOR
80cd				endif 
80cd				; get block 0 and set counter for number of files to scan 
80cd			 
80cd cd 38 82			call storage_get_block_0 
80d0			 
80d0 3a 74 ea			ld a, (store_page) 
80d3 47				ld b, a 
80d4			 
80d4				; get extent 0 of each file id 
80d4			 
80d4				if DEBUG_STORESE 
80d4					DMARK "SGc" 
80d4 f5				push af  
80d5 3a e9 80			ld a, (.dmark)  
80d8 32 65 ee			ld (debug_mark),a  
80db 3a ea 80			ld a, (.dmark+1)  
80de 32 66 ee			ld (debug_mark+1),a  
80e1 3a eb 80			ld a, (.dmark+2)  
80e4 32 67 ee			ld (debug_mark+2),a  
80e7 18 03			jr .pastdmark  
80e9 ..			.dmark: db "SGc"  
80ec f1			.pastdmark: pop af  
80ed			endm  
# End of macro DMARK
80ed					CALLMONITOR 
80ed cd 6f ee			call debug_vector  
80f0				endm  
# End of macro CALLMONITOR
80f0				endif 
80f0 60			.getloop:	ld h, b 
80f1 2e 00				ld l, 0 
80f3 c5					push bc 
80f4			 
80f4 11 74 ea				ld de, store_page 
80f7				if DEBUG_STORESE 
80f7					DMARK "SGr" 
80f7 f5				push af  
80f8 3a 0c 81			ld a, (.dmark)  
80fb 32 65 ee			ld (debug_mark),a  
80fe 3a 0d 81			ld a, (.dmark+1)  
8101 32 66 ee			ld (debug_mark+1),a  
8104 3a 0e 81			ld a, (.dmark+2)  
8107 32 67 ee			ld (debug_mark+2),a  
810a 18 03			jr .pastdmark  
810c ..			.dmark: db "SGr"  
810f f1			.pastdmark: pop af  
8110			endm  
# End of macro DMARK
8110					CALLMONITOR 
8110 cd 6f ee			call debug_vector  
8113				endm  
# End of macro CALLMONITOR
8113				endif 
8113 cd e0 86				call storage_read 
8116 cd 13 8d				call ishlzero 
8119 28 2d				jr z, .gap 
811b					 
811b					; have a file name read. Is it one we want. 
811b			 
811b 2a 6d ea				ld hl, (store_tmp1) 
811e 11 77 ea				ld de, store_page+3   ; file name 
8121			 
8121				if DEBUG_STORESE 
8121					DMARK "SGc" 
8121 f5				push af  
8122 3a 36 81			ld a, (.dmark)  
8125 32 65 ee			ld (debug_mark),a  
8128 3a 37 81			ld a, (.dmark+1)  
812b 32 66 ee			ld (debug_mark+1),a  
812e 3a 38 81			ld a, (.dmark+2)  
8131 32 67 ee			ld (debug_mark+2),a  
8134 18 03			jr .pastdmark  
8136 ..			.dmark: db "SGc"  
8139 f1			.pastdmark: pop af  
813a			endm  
# End of macro DMARK
813a					CALLMONITOR 
813a cd 6f ee			call debug_vector  
813d				endm  
# End of macro CALLMONITOR
813d				endif 
813d cd 88 90				call strcmp 
8140 20 06				jr nz, .gap   ; not this one 
8142			 
8142 c1				        pop bc 
8143			 
8143 26 00				ld h, 0 
8145 68					ld l, b 
8146 18 22				jr .getdone 
8148						 
8148			 
8148			 
8148			 
8148			.gap: 
8148				if DEBUG_STORESE 
8148					DMARK "SGg" 
8148 f5				push af  
8149 3a 5d 81			ld a, (.dmark)  
814c 32 65 ee			ld (debug_mark),a  
814f 3a 5e 81			ld a, (.dmark+1)  
8152 32 66 ee			ld (debug_mark+1),a  
8155 3a 5f 81			ld a, (.dmark+2)  
8158 32 67 ee			ld (debug_mark+2),a  
815b 18 03			jr .pastdmark  
815d ..			.dmark: db "SGg"  
8160 f1			.pastdmark: pop af  
8161			endm  
# End of macro DMARK
8161					CALLMONITOR 
8161 cd 6f ee			call debug_vector  
8164				endm  
# End of macro CALLMONITOR
8164				endif 
8164			 
8164 c1					pop bc 
8165 10 89				djnz .getloop 
8167 21 ff 00				ld hl, 255 
816a			.getdone: 
816a			 
816a				if DEBUG_STORESE 
816a					DMARK "SGe" 
816a f5				push af  
816b 3a 7f 81			ld a, (.dmark)  
816e 32 65 ee			ld (debug_mark),a  
8171 3a 80 81			ld a, (.dmark+1)  
8174 32 66 ee			ld (debug_mark+1),a  
8177 3a 81 81			ld a, (.dmark+2)  
817a 32 67 ee			ld (debug_mark+2),a  
817d 18 03			jr .pastdmark  
817f ..			.dmark: db "SGe"  
8182 f1			.pastdmark: pop af  
8183			endm  
# End of macro DMARK
8183					CALLMONITOR 
8183 cd 6f ee			call debug_vector  
8186				endm  
# End of macro CALLMONITOR
8186				endif 
8186			 
8186 c9				ret 
8187			 
8187			 
8187			 
8187			 
8187			 
8187			 
8187			 
8187			 
8187			; Read Block 
8187			; ---------- 
8187			; 
8187			; With current bank 
8187			;  
8187			; Get block number to read 
8187			; Load physical blocks starting at start block into buffer 
8187			 
8187			; de points to buffer to use 
8187			; hl holds logical block number  
8187			 
8187			storage_read_block: 
8187			 
8187				; TODO bank selection 
8187			 
8187				; for each of the physical blocks read it into the buffer 
8187 06 40			ld b, STORE_BLOCK_PHY 
8189			 
8189				if DEBUG_STORESE 
8189 d5					push de 
818a				endif 
818a				 
818a			.rl1:    
818a			 
818a				; read physical block at hl into de 
818a			        ; increment hl and de to next read position on exit 
818a			 
818a e5				push hl 
818b d5				push de	 
818c c5				push bc 
818d			;	if DEBUG_STORESE 
818d			;		push af 
818d			;		ld a, 'R' 
818d			;		ld (debug_mark),a 
818d			;		pop af 
818d			;		CALLMONITOR 
818d			;	endif 
818d cd ab 80			call se_readbyte 
8190			;	if DEBUG_STORESE 
8190			;		ld a,(spi_portbyte) 
8190			;		ld l, a 
8190			;		push af 
8190			;		ld a, '1' 
8190			;		ld (debug_mark),a 
8190			;		pop af 
8190			;		CALLMONITOR 
8190			;	endif 
8190 c1				pop bc 
8191 d1				pop de 
8192 e1				pop hl 
8193 12				ld (de),a 
8194 23				inc hl 
8195 13				inc de 
8196			 
8196			;	if DEBUG_STORESE 
8196			;		push af 
8196			;		ld a, 'r' 
8196			;		ld (debug_mark),a 
8196			;		pop af 
8196			;		CALLMONITOR 
8196			;	endif 
8196			 
8196 10 f2			djnz .rl1 
8198			 
8198				if DEBUG_STORESE 
8198					DMARK "SRB" 
8198 f5				push af  
8199 3a ad 81			ld a, (.dmark)  
819c 32 65 ee			ld (debug_mark),a  
819f 3a ae 81			ld a, (.dmark+1)  
81a2 32 66 ee			ld (debug_mark+1),a  
81a5 3a af 81			ld a, (.dmark+2)  
81a8 32 67 ee			ld (debug_mark+2),a  
81ab 18 03			jr .pastdmark  
81ad ..			.dmark: db "SRB"  
81b0 f1			.pastdmark: pop af  
81b1			endm  
# End of macro DMARK
81b1 d1					pop de 
81b2			; 
81b2			;		push af 
81b2			;		ld a, 'R' 
81b2			;		ld (debug_mark),a 
81b2			;		pop af 
81b2					CALLMONITOR 
81b2 cd 6f ee			call debug_vector  
81b5				endm  
# End of macro CALLMONITOR
81b5				endif 
81b5 c9				ret	 
81b6				 
81b6			 
81b6			; File Size 
81b6			; --------- 
81b6			; 
81b6			;   hl file id 
81b6			; 
81b6			;  returns in hl the number of blocks 
81b6			 
81b6			storage_file_size: 
81b6 5d				ld e, l 
81b7 16 00			ld d, 0 
81b9 21 40 00			ld hl, STORE_BLOCK_PHY 
81bc					if DEBUG_FORTH_WORDS 
81bc						DMARK "SIZ" 
81bc f5				push af  
81bd 3a d1 81			ld a, (.dmark)  
81c0 32 65 ee			ld (debug_mark),a  
81c3 3a d2 81			ld a, (.dmark+1)  
81c6 32 66 ee			ld (debug_mark+1),a  
81c9 3a d3 81			ld a, (.dmark+2)  
81cc 32 67 ee			ld (debug_mark+2),a  
81cf 18 03			jr .pastdmark  
81d1 ..			.dmark: db "SIZ"  
81d4 f1			.pastdmark: pop af  
81d5			endm  
# End of macro DMARK
81d5						CALLMONITOR 
81d5 cd 6f ee			call debug_vector  
81d8				endm  
# End of macro CALLMONITOR
81d8					endif 
81d8 cd ba 84			call storage_findnextid 
81db			 
81db cd 13 8d			call ishlzero 
81de			;	ld a, l 
81de			;	add h 
81de			;	cp 0 
81de c8				ret z			; block not found so EOF 
81df			 
81df 11 74 ea			ld de, store_page 
81e2 cd 87 81			call storage_read_block 
81e5			 
81e5 3a 76 ea			ld a, (store_page+2)	 ; get extent count 
81e8 6f				ld l, a 
81e9 26 00			ld h, 0 
81eb c9			 	ret 
81ec			 
81ec			 
81ec			; Write Block 
81ec			; ----------- 
81ec			; 
81ec			; With current bank 
81ec			;  
81ec			; Get block number to write 
81ec			; Write physical blocks starting at start block from buffer 
81ec			  
81ec			storage_write_block: 
81ec				; TODO bank selection 
81ec			 
81ec				; for each of the physical blocks read it into the buffer 
81ec 06 40			ld b, STORE_BLOCK_PHY 
81ee			 
81ee				if DEBUG_STORESE 
81ee					DMARK "SWB" 
81ee f5				push af  
81ef 3a 03 82			ld a, (.dmark)  
81f2 32 65 ee			ld (debug_mark),a  
81f5 3a 04 82			ld a, (.dmark+1)  
81f8 32 66 ee			ld (debug_mark+1),a  
81fb 3a 05 82			ld a, (.dmark+2)  
81fe 32 67 ee			ld (debug_mark+2),a  
8201 18 03			jr .pastdmark  
8203 ..			.dmark: db "SWB"  
8206 f1			.pastdmark: pop af  
8207			endm  
# End of macro DMARK
8207			 
8207					;push af 
8207					;ld a, 'W' 
8207					;ld (debug_mark),a 
8207					;pop af 
8207					CALLMONITOR 
8207 cd 6f ee			call debug_vector  
820a				endm  
# End of macro CALLMONITOR
820a				endif 
820a			 
820a			; might not be working 
820a			;	call se_writepage 
820a			 
820a			;	ret 
820a			; 
820a			 
820a			 
820a			 
820a			.wl1:    
820a			 
820a				; read physical block at hl into de 
820a			        ; increment hl and de to next read position on exit 
820a			 
820a e5				push hl 
820b d5				push de	 
820c c5				push bc 
820d 1a				ld a,(de) 
820e				;if DEBUG_STORESE 
820e			;		push af 
820e			;		ld a, 'W' 
820e			;		ld (debug_mark),a 
820e			;		pop af 
820e			;		CALLMONITOR 
820e			;	endif 
820e cd ac 80			call se_writebyte 
8211			;	call delay250ms 
8211 00				nop 
8212 00				nop 
8213 00				nop 
8214			;	if DEBUG_STORESE 
8214			;		push af 
8214			;		ld a, 'w' 
8214			;		ld (debug_mark),a 
8214			;		pop af 
8214			;		CALLMONITOR 
8214			;	endif 
8214 c1				pop bc 
8215 d1				pop de 
8216 e1				pop hl 
8217 23				inc hl 
8218 13				inc de 
8219			 
8219			 
8219 10 ef			djnz .wl1 
821b			 
821b				if DEBUG_STORESE 
821b					DMARK "SW2" 
821b f5				push af  
821c 3a 30 82			ld a, (.dmark)  
821f 32 65 ee			ld (debug_mark),a  
8222 3a 31 82			ld a, (.dmark+1)  
8225 32 66 ee			ld (debug_mark+1),a  
8228 3a 32 82			ld a, (.dmark+2)  
822b 32 67 ee			ld (debug_mark+2),a  
822e 18 03			jr .pastdmark  
8230 ..			.dmark: db "SW2"  
8233 f1			.pastdmark: pop af  
8234			endm  
# End of macro DMARK
8234			 
8234					;push af 
8234					;ld a, 'W' 
8234					;ld (debug_mark),a 
8234					;pop af 
8234					CALLMONITOR 
8234 cd 6f ee			call debug_vector  
8237				endm  
# End of macro CALLMONITOR
8237				endif 
8237 c9				ret	 
8238			 
8238			; Init bank 
8238			; --------- 
8238			; 
8238			; With current bank 
8238			; 
8238			; Setup block 0 config 
8238			;     Set 0 file id counter 
8238			;     Set formatted byte pattern 
8238			;     Zero out bank label 
8238			;      
8238			; For every logical block write 0-1 byte as null 
8238			 
8238			storage_get_block_0: 
8238			 
8238				; TODO check presence 
8238			 
8238				; get block 0 config 
8238			 
8238 21 00 00			ld hl, 0 
823b 11 74 ea			ld de, store_page 
823e cd 87 81			call storage_read_block 
8241			 
8241				if DEBUG_STORESE 
8241					DMARK "SB0" 
8241 f5				push af  
8242 3a 56 82			ld a, (.dmark)  
8245 32 65 ee			ld (debug_mark),a  
8248 3a 57 82			ld a, (.dmark+1)  
824b 32 66 ee			ld (debug_mark+1),a  
824e 3a 58 82			ld a, (.dmark+2)  
8251 32 67 ee			ld (debug_mark+2),a  
8254 18 03			jr .pastdmark  
8256 ..			.dmark: db "SB0"  
8259 f1			.pastdmark: pop af  
825a			endm  
# End of macro DMARK
825a 11 74 ea				ld de, store_page 
825d			;		push af 
825d			;		ld a, 'i' 
825d			;		ld (debug_mark),a 
825d			;		pop af 
825d					CALLMONITOR 
825d cd 6f ee			call debug_vector  
8260				endm  
# End of macro CALLMONITOR
8260				endif 
8260			 
8260				; is this area formatted? 
8260			 
8260			;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
8260 2a 75 ea			ld hl, (store_page+1) 
8263 3e 80			ld a,0x80 
8265 bd				cp l 
8266 20 22			jr nz, .ininotformatted 
8268				; do a double check 
8268 3e 27			ld a, 0x27 
826a bc				cp h 
826b 20 1d			jr nz, .ininotformatted 
826d			 
826d				; formatted then 
826d			 
826d				if DEBUG_STORESE 
826d					DMARK "SB1" 
826d f5				push af  
826e 3a 82 82			ld a, (.dmark)  
8271 32 65 ee			ld (debug_mark),a  
8274 3a 83 82			ld a, (.dmark+1)  
8277 32 66 ee			ld (debug_mark+1),a  
827a 3a 84 82			ld a, (.dmark+2)  
827d 32 67 ee			ld (debug_mark+2),a  
8280 18 03			jr .pastdmark  
8282 ..			.dmark: db "SB1"  
8285 f1			.pastdmark: pop af  
8286			endm  
# End of macro DMARK
8286					;push af 
8286					;ld a, 'I' 
8286					;ld (debug_mark),a 
8286					;pop af 
8286					CALLMONITOR 
8286 cd 6f ee			call debug_vector  
8289				endm  
# End of macro CALLMONITOR
8289				endif 
8289 c9				ret 
828a			 
828a			.ininotformatted: 
828a				; bank not formatted so poke various bits to make sure 
828a			 
828a				if DEBUG_STORESE 
828a					DMARK "SB2" 
828a f5				push af  
828b 3a 9f 82			ld a, (.dmark)  
828e 32 65 ee			ld (debug_mark),a  
8291 3a a0 82			ld a, (.dmark+1)  
8294 32 66 ee			ld (debug_mark+1),a  
8297 3a a1 82			ld a, (.dmark+2)  
829a 32 67 ee			ld (debug_mark+2),a  
829d 18 03			jr .pastdmark  
829f ..			.dmark: db "SB2"  
82a2 f1			.pastdmark: pop af  
82a3			endm  
# End of macro DMARK
82a3					;push af 
82a3					;ld a, 'f' 
82a3					;ld (debug_mark),a 
82a3					;pop af 
82a3					CALLMONITOR 
82a3 cd 6f ee			call debug_vector  
82a6				endm  
# End of macro CALLMONITOR
82a6				endif 
82a6			 
82a6 cd c3 89			call storage_clear_page 
82a9			 
82a9 21 74 ea			ld hl, store_page 
82ac 3e 00			ld a, 0 
82ae				 
82ae 77				ld (hl),a   ; reset file counter 
82af			 
82af 21 80 27			ld hl, 0x2780     ;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
82b2 22 75 ea		 	ld (store_page+1), hl	 
82b5			 
82b5				; set default label 
82b5			 
82b5 21 51 83			ld hl, .defaultbanklabl 
82b8 11 77 ea		 	ld de, store_page+3 
82bb 01 0f 00			ld bc, 15 
82be ed b0			ldir 
82c0			 
82c0				; Append the current bank id 
82c0 21 80 ea			ld hl, store_page+3+9 
82c3 3a 59 ea			ld a, (spi_device_id) 
82c6 77				ld (hl), a 
82c7			 
82c7				; save default page 0 
82c7			 
82c7 21 00 00			ld hl, 0 
82ca 11 74 ea			ld de, store_page 
82cd				if DEBUG_STORESE 
82cd					DMARK "SB3" 
82cd f5				push af  
82ce 3a e2 82			ld a, (.dmark)  
82d1 32 65 ee			ld (debug_mark),a  
82d4 3a e3 82			ld a, (.dmark+1)  
82d7 32 66 ee			ld (debug_mark+1),a  
82da 3a e4 82			ld a, (.dmark+2)  
82dd 32 67 ee			ld (debug_mark+2),a  
82e0 18 03			jr .pastdmark  
82e2 ..			.dmark: db "SB3"  
82e5 f1			.pastdmark: pop af  
82e6			endm  
# End of macro DMARK
82e6			;		push af 
82e6			;		ld a, 'F' 
82e6			;		ld (debug_mark),a 
82e6			;		pop af 
82e6					CALLMONITOR 
82e6 cd 6f ee			call debug_vector  
82e9				endm  
# End of macro CALLMONITOR
82e9				endif 
82e9 cd ec 81			call storage_write_block 
82ec				if DEBUG_STORESE 
82ec					DMARK "SB4" 
82ec f5				push af  
82ed 3a 01 83			ld a, (.dmark)  
82f0 32 65 ee			ld (debug_mark),a  
82f3 3a 02 83			ld a, (.dmark+1)  
82f6 32 66 ee			ld (debug_mark+1),a  
82f9 3a 03 83			ld a, (.dmark+2)  
82fc 32 67 ee			ld (debug_mark+2),a  
82ff 18 03			jr .pastdmark  
8301 ..			.dmark: db "SB4"  
8304 f1			.pastdmark: pop af  
8305			endm  
# End of macro DMARK
8305			;		push af 
8305			;		ld a, '>' 
8305			;		ld (debug_mark),a 
8305			;		pop af 
8305					CALLMONITOR 
8305 cd 6f ee			call debug_vector  
8308				endm  
# End of macro CALLMONITOR
8308				endif 
8308			 
8308 00				nop 
8309 00				nop 
830a 00				nop 
830b			 
830b				; now set 0 in every page to mark as a free block 
830b			 
830b 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
830d 21 40 00			ld hl, STORE_BLOCK_PHY 
8310			 
8310 3e 00		.setmark1:   	ld a,0 
8312 e5					push hl 
8313 c5					push bc 
8314 cd ac 80				call se_writebyte 
8317 3e 0a			ld a, 10 
8319 cd e5 89			call aDelayInMS 
831c 23				inc hl 
831d cd ac 80				call se_writebyte 
8320 3e 0a			ld a, 10 
8322 cd e5 89			call aDelayInMS 
8325 2b				dec hl 
8326 c1					pop bc 
8327 e1					pop hl 
8328 3e 40				ld a, STORE_BLOCK_PHY 
832a cd ea 8c				call addatohl 
832d 10 e1				djnz .setmark1 
832f			 
832f 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
8331 3e 00		.setmark2:   	ld a,0 
8333 e5					push hl 
8334 c5					push bc 
8335 cd ac 80				call se_writebyte 
8338 3e 0a			ld a, 10 
833a cd e5 89			call aDelayInMS 
833d 23				inc hl 
833e cd ac 80				call se_writebyte 
8341 3e 0a			ld a, 10 
8343 cd e5 89			call aDelayInMS 
8346 2b				dec hl 
8347 c1					pop bc 
8348 e1					pop hl 
8349 3e 40				ld a, STORE_BLOCK_PHY 
834b cd ea 8c				call addatohl 
834e 10 e1				djnz .setmark2 
8350			 
8350					 
8350			 
8350			 
8350 c9				ret 
8351			 
8351			 
8351			 
8351			 
8351 .. 00		.defaultbanklabl:   db "BankLabel_",0 
835c			 
835c			 
835c			 
835c			; Label Bank 
835c			; ---------- 
835c			; 
835c			; With current bank 
835c			; Read block 0 
835c			; Set label 
835c			; Write block 0 
835c			 
835c			; label str pointer in hl 
835c			 
835c			storage_label:     
835c			 
835c				if DEBUG_STORESE 
835c					DMARK "LBL" 
835c f5				push af  
835d 3a 71 83			ld a, (.dmark)  
8360 32 65 ee			ld (debug_mark),a  
8363 3a 72 83			ld a, (.dmark+1)  
8366 32 66 ee			ld (debug_mark+1),a  
8369 3a 73 83			ld a, (.dmark+2)  
836c 32 67 ee			ld (debug_mark+2),a  
836f 18 03			jr .pastdmark  
8371 ..			.dmark: db "LBL"  
8374 f1			.pastdmark: pop af  
8375			endm  
# End of macro DMARK
8375					CALLMONITOR 
8375 cd 6f ee			call debug_vector  
8378				endm  
# End of macro CALLMONITOR
8378				endif 
8378			 
8378 e5				push hl 
8379			 
8379 cd 38 82			call storage_get_block_0 
837c			 
837c				; set default label 
837c			 
837c e1				pop hl 
837d			 
837d 11 77 ea		 	ld de, store_page+3 
8380 01 0f 00			ld bc, 15 
8383				if DEBUG_STORESE 
8383					DMARK "LB3" 
8383 f5				push af  
8384 3a 98 83			ld a, (.dmark)  
8387 32 65 ee			ld (debug_mark),a  
838a 3a 99 83			ld a, (.dmark+1)  
838d 32 66 ee			ld (debug_mark+1),a  
8390 3a 9a 83			ld a, (.dmark+2)  
8393 32 67 ee			ld (debug_mark+2),a  
8396 18 03			jr .pastdmark  
8398 ..			.dmark: db "LB3"  
839b f1			.pastdmark: pop af  
839c			endm  
# End of macro DMARK
839c					CALLMONITOR 
839c cd 6f ee			call debug_vector  
839f				endm  
# End of macro CALLMONITOR
839f				endif 
839f ed b0			ldir 
83a1				; save default page 0 
83a1			 
83a1 21 00 00			ld hl, 0 
83a4 11 74 ea			ld de, store_page 
83a7				if DEBUG_STORESE 
83a7					DMARK "LBW" 
83a7 f5				push af  
83a8 3a bc 83			ld a, (.dmark)  
83ab 32 65 ee			ld (debug_mark),a  
83ae 3a bd 83			ld a, (.dmark+1)  
83b1 32 66 ee			ld (debug_mark+1),a  
83b4 3a be 83			ld a, (.dmark+2)  
83b7 32 67 ee			ld (debug_mark+2),a  
83ba 18 03			jr .pastdmark  
83bc ..			.dmark: db "LBW"  
83bf f1			.pastdmark: pop af  
83c0			endm  
# End of macro DMARK
83c0					CALLMONITOR 
83c0 cd 6f ee			call debug_vector  
83c3				endm  
# End of macro CALLMONITOR
83c3				endif 
83c3 cd ec 81			call storage_write_block 
83c6			 
83c6 c9				ret 
83c7			 
83c7			 
83c7			 
83c7			; Read Block 0 - Config 
83c7			; --------------------- 
83c7			; 
83c7			; With current bank 
83c7			; Call presence test 
83c7			;    If not present format/init bank  
83c7			; Read block 0  
83c7			;  
83c7			 
83c7			 
83c7			; Dir 
83c7			; --- 
83c7			; 
83c7			; With current bank 
83c7			; Load Block 0 Config 
83c7			; Get max file id number 
83c7			; For each logical block 
83c7			;    Read block read byte 2 
83c7			;      if first block of file 
83c7			;         Display file name 
83c7			;         Display type flags for file 
83c7			;        
83c7			 
83c7			; moving to words as this requires stack control 
83c7			 
83c7			 
83c7			; Delete File 
83c7			; ----------- 
83c7			; 
83c7			; With current bank 
83c7			; 
83c7			; Load Block 0 Config 
83c7			; Get max file id number 
83c7			; For each logical block 
83c7			;    Read block file id 
83c7			;      If first block of file and dont have file id 
83c7			;         if file to delete 
83c7			;         Save file id 
83c7			;         Null file id 
83c7			;         Write this block back 
83c7			;      If file id is one saved 
83c7			;         Null file id 
83c7			;         Write this block back 
83c7			 
83c7			 
83c7			.se_done: 
83c7 e1				pop hl 
83c8 c9				ret 
83c9			 
83c9			storage_erase: 
83c9			 
83c9				; hl contains the file id 
83c9			 
83c9 5d				ld e, l 
83ca 16 00			ld d, 0 
83cc 21 40 00			ld hl, STORE_BLOCK_PHY 
83cf					if DEBUG_FORTH_WORDS 
83cf						DMARK "ERA" 
83cf f5				push af  
83d0 3a e4 83			ld a, (.dmark)  
83d3 32 65 ee			ld (debug_mark),a  
83d6 3a e5 83			ld a, (.dmark+1)  
83d9 32 66 ee			ld (debug_mark+1),a  
83dc 3a e6 83			ld a, (.dmark+2)  
83df 32 67 ee			ld (debug_mark+2),a  
83e2 18 03			jr .pastdmark  
83e4 ..			.dmark: db "ERA"  
83e7 f1			.pastdmark: pop af  
83e8			endm  
# End of macro DMARK
83e8						CALLMONITOR 
83e8 cd 6f ee			call debug_vector  
83eb				endm  
# End of macro CALLMONITOR
83eb					endif 
83eb cd ba 84			call storage_findnextid 
83ee cd 13 8d			call ishlzero 
83f1 c8				ret z 
83f2			 
83f2 e5				push hl 
83f3			 
83f3				; TODO check file not found 
83f3			 
83f3 11 74 ea			ld de, store_page 
83f6 cd 87 81			call storage_read_block 
83f9			 
83f9 cd 13 8d			call ishlzero 
83fc ca c7 83			jp z,.se_done 
83ff			 
83ff					if DEBUG_FORTH_WORDS 
83ff						DMARK "ER1" 
83ff f5				push af  
8400 3a 14 84			ld a, (.dmark)  
8403 32 65 ee			ld (debug_mark),a  
8406 3a 15 84			ld a, (.dmark+1)  
8409 32 66 ee			ld (debug_mark+1),a  
840c 3a 16 84			ld a, (.dmark+2)  
840f 32 67 ee			ld (debug_mark+2),a  
8412 18 03			jr .pastdmark  
8414 ..			.dmark: db "ER1"  
8417 f1			.pastdmark: pop af  
8418			endm  
# End of macro DMARK
8418						CALLMONITOR 
8418 cd 6f ee			call debug_vector  
841b				endm  
# End of macro CALLMONITOR
841b					endif 
841b 3a 74 ea			ld a, (store_page)	; get file id 
841e 32 68 ea			ld (store_tmpid), a 
8421			 
8421 3a 76 ea			ld a, (store_page+2)    ; get count of extends 
8424 32 67 ea			ld (store_tmpext), a 
8427			 
8427				; wipe file header 
8427			 
8427 e1				pop hl 
8428 3e 00			ld a, 0 
842a 32 74 ea			ld (store_page), a 
842d 32 75 ea			ld (store_page+1),a 
8430 11 74 ea			ld de, store_page 
8433					if DEBUG_FORTH_WORDS 
8433						DMARK "ER2" 
8433 f5				push af  
8434 3a 48 84			ld a, (.dmark)  
8437 32 65 ee			ld (debug_mark),a  
843a 3a 49 84			ld a, (.dmark+1)  
843d 32 66 ee			ld (debug_mark+1),a  
8440 3a 4a 84			ld a, (.dmark+2)  
8443 32 67 ee			ld (debug_mark+2),a  
8446 18 03			jr .pastdmark  
8448 ..			.dmark: db "ER2"  
844b f1			.pastdmark: pop af  
844c			endm  
# End of macro DMARK
844c						CALLMONITOR 
844c cd 6f ee			call debug_vector  
844f				endm  
# End of macro CALLMONITOR
844f					endif 
844f cd ec 81			call storage_write_block 
8452			 
8452			 
8452				; wipe file extents 
8452			 
8452 3a 67 ea			ld a, (store_tmpext) 
8455 47				ld b, a 
8456			 
8456			.eraext:	  
8456 c5				push bc 
8457			 
8457 21 40 00			ld hl, STORE_BLOCK_PHY 
845a 3a 68 ea			ld a,(store_tmpid) 
845d 5f				ld e, a 
845e 50				ld d, b	 
845f					if DEBUG_FORTH_WORDS 
845f						DMARK "ER3" 
845f f5				push af  
8460 3a 74 84			ld a, (.dmark)  
8463 32 65 ee			ld (debug_mark),a  
8466 3a 75 84			ld a, (.dmark+1)  
8469 32 66 ee			ld (debug_mark+1),a  
846c 3a 76 84			ld a, (.dmark+2)  
846f 32 67 ee			ld (debug_mark+2),a  
8472 18 03			jr .pastdmark  
8474 ..			.dmark: db "ER3"  
8477 f1			.pastdmark: pop af  
8478			endm  
# End of macro DMARK
8478						CALLMONITOR 
8478 cd 6f ee			call debug_vector  
847b				endm  
# End of macro CALLMONITOR
847b					endif 
847b cd ba 84			call storage_findnextid 
847e cd 13 8d			call ishlzero 
8481 ca c7 83			jp z,.se_done 
8484			 
8484 e5				push hl 
8485 11 74 ea			ld de, store_page 
8488 cd 87 81			call storage_read_block 
848b			 
848b				; free block	 
848b			 
848b 3e 00			ld a, 0 
848d 32 74 ea			ld (store_page), a 
8490 32 75 ea			ld (store_page+1),a 
8493 11 74 ea			ld de, store_page 
8496 e1				pop hl 
8497					if DEBUG_FORTH_WORDS 
8497						DMARK "ER4" 
8497 f5				push af  
8498 3a ac 84			ld a, (.dmark)  
849b 32 65 ee			ld (debug_mark),a  
849e 3a ad 84			ld a, (.dmark+1)  
84a1 32 66 ee			ld (debug_mark+1),a  
84a4 3a ae 84			ld a, (.dmark+2)  
84a7 32 67 ee			ld (debug_mark+2),a  
84aa 18 03			jr .pastdmark  
84ac ..			.dmark: db "ER4"  
84af f1			.pastdmark: pop af  
84b0			endm  
# End of macro DMARK
84b0						CALLMONITOR 
84b0 cd 6f ee			call debug_vector  
84b3				endm  
# End of macro CALLMONITOR
84b3					endif 
84b3 cd ec 81			call storage_write_block 
84b6			 
84b6 c1				pop bc 
84b7 10 9d			djnz .eraext 
84b9			 
84b9 c9				ret 
84ba			 
84ba			 
84ba			; Find Free Block 
84ba			; --------------- 
84ba			; 
84ba			; With current bank 
84ba			;  
84ba			; From given starting logical block 
84ba			;    Read block  
84ba			;    If no file id 
84ba			;         Return block id 
84ba			 
84ba			 
84ba			; hl starting page number 
84ba			; hl contains free page number or zero if no pages free 
84ba			; e contains the file id to locate 
84ba			; d contains the block number 
84ba			 
84ba			; TODO change to find file id and use zero for free block 
84ba			 
84ba			storage_findnextid: 
84ba			 
84ba				; now locate first 0 page to mark as a free block 
84ba			 
84ba 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
84bc			;	ld hl, STORE_BLOCK_PHY 
84bc			 
84bc					if DEBUG_FORTH_WORDS 
84bc					DMARK "FNI" 
84bc f5				push af  
84bd 3a d1 84			ld a, (.dmark)  
84c0 32 65 ee			ld (debug_mark),a  
84c3 3a d2 84			ld a, (.dmark+1)  
84c6 32 66 ee			ld (debug_mark+1),a  
84c9 3a d3 84			ld a, (.dmark+2)  
84cc 32 67 ee			ld (debug_mark+2),a  
84cf 18 03			jr .pastdmark  
84d1 ..			.dmark: db "FNI"  
84d4 f1			.pastdmark: pop af  
84d5			endm  
# End of macro DMARK
84d5						CALLMONITOR 
84d5 cd 6f ee			call debug_vector  
84d8				endm  
# End of macro CALLMONITOR
84d8					endif 
84d8			.ff1:   	 
84d8 e5					push hl 
84d9 c5					push bc 
84da d5					push de 
84db cd ab 80				call se_readbyte 
84de 5f					ld e,a 
84df 23					inc hl 
84e0 cd ab 80				call se_readbyte 
84e3 57					ld d, a 
84e4 e1					pop hl 
84e5 e5					push hl 
84e6 cd 08 8d				call cmp16 
84e9 28 49				jr z, .fffound 
84eb			 
84eb d1					pop de 
84ec c1					pop bc 
84ed e1					pop hl 
84ee			 
84ee					; is found? 
84ee					;cp e 
84ee					;ret z 
84ee			 
84ee 3e 40				ld a, STORE_BLOCK_PHY 
84f0 cd ea 8c				call addatohl 
84f3 10 e3				djnz .ff1 
84f5			 
84f5 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
84f7			.ff2:   	 
84f7			 
84f7 e5					push hl 
84f8 c5					push bc 
84f9 d5					push de 
84fa cd ab 80				call se_readbyte 
84fd 5f					ld e,a 
84fe 23					inc hl 
84ff cd ab 80				call se_readbyte 
8502 57					ld d, a 
8503			 
8503 e1					pop hl 
8504 e5					push hl 
8505 cd 08 8d				call cmp16 
8508 28 2a				jr z, .fffound 
850a			 
850a d1					pop de 
850b c1					pop bc 
850c e1					pop hl 
850d					; is found? 
850d					;cp e 
850d					;ret z 
850d			 
850d 3e 40				ld a, STORE_BLOCK_PHY 
850f cd ea 8c				call addatohl 
8512 10 e3				djnz .ff2 
8514			 
8514			 
8514					if DEBUG_FORTH_WORDS 
8514					DMARK "FN-" 
8514 f5				push af  
8515 3a 29 85			ld a, (.dmark)  
8518 32 65 ee			ld (debug_mark),a  
851b 3a 2a 85			ld a, (.dmark+1)  
851e 32 66 ee			ld (debug_mark+1),a  
8521 3a 2b 85			ld a, (.dmark+2)  
8524 32 67 ee			ld (debug_mark+2),a  
8527 18 03			jr .pastdmark  
8529 ..			.dmark: db "FN-"  
852c f1			.pastdmark: pop af  
852d			endm  
# End of macro DMARK
852d					;	push af 
852d					;	ld a, 'n' 
852d					;	ld (debug_mark),a 
852d					;	pop af 
852d						CALLMONITOR 
852d cd 6f ee			call debug_vector  
8530				endm  
# End of macro CALLMONITOR
8530					endif 
8530				; no free marks! 
8530 21 00 00				ld hl, 0 
8533 c9				ret 
8534			.fffound: 
8534				 
8534			 
8534 d1					pop de 
8535 c1					pop bc 
8536 e1					pop hl 
8537					if DEBUG_FORTH_WORDS 
8537					DMARK "FNF" 
8537 f5				push af  
8538 3a 4c 85			ld a, (.dmark)  
853b 32 65 ee			ld (debug_mark),a  
853e 3a 4d 85			ld a, (.dmark+1)  
8541 32 66 ee			ld (debug_mark+1),a  
8544 3a 4e 85			ld a, (.dmark+2)  
8547 32 67 ee			ld (debug_mark+2),a  
854a 18 03			jr .pastdmark  
854c ..			.dmark: db "FNF"  
854f f1			.pastdmark: pop af  
8550			endm  
# End of macro DMARK
8550					;	push af 
8550					;	ld a, 'n' 
8550					;	ld (debug_mark),a 
8550					;	pop af 
8550						CALLMONITOR 
8550 cd 6f ee			call debug_vector  
8553				endm  
# End of macro CALLMONITOR
8553					endif 
8553 c9				ret 
8554			 
8554			 
8554			 
8554			; Free Space 
8554			; ---------- 
8554			; 
8554			; With current bank 
8554			; 
8554			; Set block count to zero 
8554			; Starting with first logical block 
8554			;      Find free block  
8554			;      If block id given, increment block count 
8554			; 
8554			;  
8554			 
8554			 
8554			; hl contains count of free blocks 
8554			 
8554			storage_freeblocks: 
8554			 
8554				; now locate first 0 page to mark as a free block 
8554			 
8554 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
8556 21 40 00			ld hl, STORE_BLOCK_PHY 
8559 11 00 00			ld de, 0 
855c			 
855c			.fb1:   	 
855c e5					push hl 
855d c5					push bc 
855e d5					push de 
855f cd ab 80				call se_readbyte 
8562 d1					pop de 
8563 c1					pop bc 
8564 e1					pop hl 
8565			 
8565					; is free? 
8565 fe 00				cp 0 
8567 20 01				jr nz, .ff1cont 
8569 13					inc de 
856a			 
856a			.ff1cont: 
856a			 
856a			 
856a 3e 40				ld a, STORE_BLOCK_PHY 
856c cd ea 8c				call addatohl 
856f 10 eb				djnz .fb1 
8571			 
8571 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
8573			.fb2:   	 
8573 e5					push hl 
8574 c5					push bc 
8575 d5					push de 
8576 cd ab 80				call se_readbyte 
8579 d1					pop de 
857a c1					pop bc 
857b e1					pop hl 
857c			 
857c					; is free? 
857c fe 00				cp 0 
857e 20 01				jr nz, .ff2cont 
8580 13					inc de 
8581			 
8581			.ff2cont: 
8581			 
8581 3e 40				ld a, STORE_BLOCK_PHY 
8583 cd ea 8c				call addatohl 
8586 10 eb				djnz .fb2 
8588			 
8588 eb				ex de, hl 
8589 c9				ret 
858a			 
858a			; Get File ID 
858a			; ----------- 
858a			; 
858a			; With current bank 
858a			;  
858a			; Load Block 0 Config 
858a			; Get max file id number 
858a			; For each logical block 
858a			;    Read block file id 
858a			;      If first block of file and dont have file id 
858a			;         if file get id and exit 
858a			 
858a			 
858a			 
858a			 
858a			; Create File 
858a			; ----------- 
858a			; 
858a			; With current bank  
858a			; Load Block 0 Config 
858a			; Get max file id number 
858a			; Increment file id number 
858a			; Save Config 
858a			; Find free block 
858a			; Set buffer with file name and file id 
858a			; Write buffer to free block  
858a			 
858a			 
858a			; hl point to file name 
858a			; hl returns file id 
858a			 
858a			; file format: 
858a			; byte 0 - file id 
858a			; byte 1 - extent number 
858a			; byte 2-> data 
858a			 
858a			; format for extent number 0: 
858a			; 
858a			; byte 0 - file id 
858a			; byte 1 - extent 0 
858a			; byte 2 - extent count 
858a			; byte 3 -> file name and meta data 
858a			 
858a			 
858a			storage_create: 
858a				if DEBUG_STORESE 
858a					DMARK "SCR" 
858a f5				push af  
858b 3a 9f 85			ld a, (.dmark)  
858e 32 65 ee			ld (debug_mark),a  
8591 3a a0 85			ld a, (.dmark+1)  
8594 32 66 ee			ld (debug_mark+1),a  
8597 3a a1 85			ld a, (.dmark+2)  
859a 32 67 ee			ld (debug_mark+2),a  
859d 18 03			jr .pastdmark  
859f ..			.dmark: db "SCR"  
85a2 f1			.pastdmark: pop af  
85a3			endm  
# End of macro DMARK
85a3					CALLMONITOR 
85a3 cd 6f ee			call debug_vector  
85a6				endm  
# End of macro CALLMONITOR
85a6				endif 
85a6			 
85a6 e5				push hl		; save file name pointer 
85a7			 
85a7 cd 38 82			call storage_get_block_0 
85aa			 
85aa 3a 74 ea			ld a,(store_page)	; get current file id 
85ad 3c				inc a 
85ae 32 74 ea			ld (store_page),a 
85b1				 
85b1 32 68 ea			ld (store_tmpid),a			; save id 
85b4			 
85b4 21 00 00			ld hl, 0 
85b7 11 74 ea			ld de, store_page 
85ba				if DEBUG_STORESE 
85ba					DMARK "SCw" 
85ba f5				push af  
85bb 3a cf 85			ld a, (.dmark)  
85be 32 65 ee			ld (debug_mark),a  
85c1 3a d0 85			ld a, (.dmark+1)  
85c4 32 66 ee			ld (debug_mark+1),a  
85c7 3a d1 85			ld a, (.dmark+2)  
85ca 32 67 ee			ld (debug_mark+2),a  
85cd 18 03			jr .pastdmark  
85cf ..			.dmark: db "SCw"  
85d2 f1			.pastdmark: pop af  
85d3			endm  
# End of macro DMARK
85d3					CALLMONITOR 
85d3 cd 6f ee			call debug_vector  
85d6				endm  
# End of macro CALLMONITOR
85d6				endif 
85d6 cd ec 81			call storage_write_block	 ; save update 
85d9			 
85d9				if DEBUG_STORESE 
85d9 11 74 ea				ld de, store_page 
85dc					DMARK "SCC" 
85dc f5				push af  
85dd 3a f1 85			ld a, (.dmark)  
85e0 32 65 ee			ld (debug_mark),a  
85e3 3a f2 85			ld a, (.dmark+1)  
85e6 32 66 ee			ld (debug_mark+1),a  
85e9 3a f3 85			ld a, (.dmark+2)  
85ec 32 67 ee			ld (debug_mark+2),a  
85ef 18 03			jr .pastdmark  
85f1 ..			.dmark: db "SCC"  
85f4 f1			.pastdmark: pop af  
85f5			endm  
# End of macro DMARK
85f5					CALLMONITOR 
85f5 cd 6f ee			call debug_vector  
85f8				endm  
# End of macro CALLMONITOR
85f8				endif 
85f8				;  
85f8				 
85f8 21 40 00			ld hl, STORE_BLOCK_PHY 
85fb 11 00 00			ld de, 0 
85fe cd ba 84			call storage_findnextid 
8601			 
8601 22 5f ea			ld (store_tmppageid), hl    ; save page to use  
8604			 
8604				; TODO detect 0 = no spare blocks 
8604			 
8604				; hl now contains the free page to use for the file header page 
8604			 
8604				if DEBUG_STORESE 
8604				DMARK "SCF" 
8604 f5				push af  
8605 3a 19 86			ld a, (.dmark)  
8608 32 65 ee			ld (debug_mark),a  
860b 3a 1a 86			ld a, (.dmark+1)  
860e 32 66 ee			ld (debug_mark+1),a  
8611 3a 1b 86			ld a, (.dmark+2)  
8614 32 67 ee			ld (debug_mark+2),a  
8617 18 03			jr .pastdmark  
8619 ..			.dmark: db "SCF"  
861c f1			.pastdmark: pop af  
861d			endm  
# End of macro DMARK
861d					CALLMONITOR 
861d cd 6f ee			call debug_vector  
8620				endm  
# End of macro CALLMONITOR
8620				endif 
8620			 
8620 22 5f ea			ld (store_tmppageid), hl 
8623				 
8623 3a 68 ea			ld a,(store_tmpid)    ; get file id 
8626			;	ld a, (store_filecache)			; save to cache 
8626			 
8626 32 74 ea			ld (store_page),a    ; set page id 
8629 3e 00			ld a, 0			 ; extent 0 is file header 
862b 32 75 ea			ld (store_page+1), a   ; set file extent 
862e			 
862e 32 76 ea			ld (store_page+2), a   ; extent count for the file 
8631			 
8631			;	inc hl 		; init block 0 of file 
8631			;	inc hl   		; skip file and extent id 
8631			 ;       ld a, 0 
8631			;	ld (hl),a 
8631			;	ld a, (store_filecache+1)  	; save to cache 
8631			 
8631			;	inc hl    ; file name 
8631				 
8631				 
8631 11 77 ea			ld de, store_page+3    ; get buffer for term string to use as file name 
8634				if DEBUG_STORESE 
8634					DMARK "SCc" 
8634 f5				push af  
8635 3a 49 86			ld a, (.dmark)  
8638 32 65 ee			ld (debug_mark),a  
863b 3a 4a 86			ld a, (.dmark+1)  
863e 32 66 ee			ld (debug_mark+1),a  
8641 3a 4b 86			ld a, (.dmark+2)  
8644 32 67 ee			ld (debug_mark+2),a  
8647 18 03			jr .pastdmark  
8649 ..			.dmark: db "SCc"  
864c f1			.pastdmark: pop af  
864d			endm  
# End of macro DMARK
864d					CALLMONITOR 
864d cd 6f ee			call debug_vector  
8650				endm  
# End of macro CALLMONITOR
8650				endif 
8650 e1				pop hl    ; get zero term string 
8651 e5				push hl 
8652 3e 00			ld a, 0 
8654 cd 5b 90			call strlent 
8657 23				inc hl   ; cover zero term 
8658 06 00			ld b,0 
865a 4d				ld c,l 
865b e1				pop hl 
865c				;ex de, hl 
865c				if DEBUG_STORESE 
865c					DMARK "SCa" 
865c f5				push af  
865d 3a 71 86			ld a, (.dmark)  
8660 32 65 ee			ld (debug_mark),a  
8663 3a 72 86			ld a, (.dmark+1)  
8666 32 66 ee			ld (debug_mark+1),a  
8669 3a 73 86			ld a, (.dmark+2)  
866c 32 67 ee			ld (debug_mark+2),a  
866f 18 03			jr .pastdmark  
8671 ..			.dmark: db "SCa"  
8674 f1			.pastdmark: pop af  
8675			endm  
# End of macro DMARK
8675					;push af 
8675					;ld a, 'a' 
8675					;ld (debug_mark),a 
8675					;pop af 
8675					CALLMONITOR 
8675 cd 6f ee			call debug_vector  
8678				endm  
# End of macro CALLMONITOR
8678				endif 
8678 ed b0			ldir    ; copy zero term string 
867a				if DEBUG_STORESE 
867a					DMARK "SCA" 
867a f5				push af  
867b 3a 8f 86			ld a, (.dmark)  
867e 32 65 ee			ld (debug_mark),a  
8681 3a 90 86			ld a, (.dmark+1)  
8684 32 66 ee			ld (debug_mark+1),a  
8687 3a 91 86			ld a, (.dmark+2)  
868a 32 67 ee			ld (debug_mark+2),a  
868d 18 03			jr .pastdmark  
868f ..			.dmark: db "SCA"  
8692 f1			.pastdmark: pop af  
8693			endm  
# End of macro DMARK
8693					CALLMONITOR 
8693 cd 6f ee			call debug_vector  
8696				endm  
# End of macro CALLMONITOR
8696				endif 
8696			 
8696				; write file header page 
8696			 
8696 2a 5f ea			ld hl,(store_tmppageid) 
8699 11 74 ea			ld de, store_page 
869c				if DEBUG_STORESE 
869c					DMARK "SCb" 
869c f5				push af  
869d 3a b1 86			ld a, (.dmark)  
86a0 32 65 ee			ld (debug_mark),a  
86a3 3a b2 86			ld a, (.dmark+1)  
86a6 32 66 ee			ld (debug_mark+1),a  
86a9 3a b3 86			ld a, (.dmark+2)  
86ac 32 67 ee			ld (debug_mark+2),a  
86af 18 03			jr .pastdmark  
86b1 ..			.dmark: db "SCb"  
86b4 f1			.pastdmark: pop af  
86b5			endm  
# End of macro DMARK
86b5					;push af 
86b5					;ld a, 'b' 
86b5					;ld (debug_mark),a 
86b5					;pop af 
86b5					CALLMONITOR 
86b5 cd 6f ee			call debug_vector  
86b8				endm  
# End of macro CALLMONITOR
86b8				endif 
86b8 cd ec 81			call storage_write_block 
86bb			 
86bb 3a 68 ea			ld a, (store_tmpid) 
86be 6f				ld l, a 
86bf 26 00			ld h,0 
86c1				if DEBUG_STORESE 
86c1					DMARK "SCz" 
86c1 f5				push af  
86c2 3a d6 86			ld a, (.dmark)  
86c5 32 65 ee			ld (debug_mark),a  
86c8 3a d7 86			ld a, (.dmark+1)  
86cb 32 66 ee			ld (debug_mark+1),a  
86ce 3a d8 86			ld a, (.dmark+2)  
86d1 32 67 ee			ld (debug_mark+2),a  
86d4 18 03			jr .pastdmark  
86d6 ..			.dmark: db "SCz"  
86d9 f1			.pastdmark: pop af  
86da			endm  
# End of macro DMARK
86da					CALLMONITOR 
86da cd 6f ee			call debug_vector  
86dd				endm  
# End of macro CALLMONITOR
86dd				endif 
86dd c9				ret 
86de				 
86de			 
86de			 
86de			; 
86de			; Read File 
86de			; 
86de			; h - file id to locate 
86de			; l - extent to locate 
86de			; de - pointer to string to read into 
86de			; 
86de			; returns hl is 0 if block not found ie end of file or pointer to start of data read 
86de			 
86de			.sr_fail: 
86de d1				pop de 
86df c9				ret 
86e0			 
86e0			storage_read: 
86e0			 
86e0			 
86e0 d5				push de 
86e1			 
86e1			; TODO BUG the above push is it popped before the RET Z? 
86e1			 
86e1			; TODO how to handle multiple part blocks 
86e1			 
86e1				; locate file extent to read 
86e1			 
86e1 5c				ld e, h 
86e2 55				ld d, l 
86e3			 
86e3			.srext: 
86e3 22 72 ea			ld (store_readptr), hl     ; save the current extent to load 
86e6 ed 53 70 ea		ld (store_readbuf), de     ; save the current buffer to load in to 
86ea			 
86ea 21 40 00			ld hl, STORE_BLOCK_PHY 
86ed				if DEBUG_STORESE 
86ed					DMARK "sre" 
86ed f5				push af  
86ee 3a 02 87			ld a, (.dmark)  
86f1 32 65 ee			ld (debug_mark),a  
86f4 3a 03 87			ld a, (.dmark+1)  
86f7 32 66 ee			ld (debug_mark+1),a  
86fa 3a 04 87			ld a, (.dmark+2)  
86fd 32 67 ee			ld (debug_mark+2),a  
8700 18 03			jr .pastdmark  
8702 ..			.dmark: db "sre"  
8705 f1			.pastdmark: pop af  
8706			endm  
# End of macro DMARK
8706					CALLMONITOR 
8706 cd 6f ee			call debug_vector  
8709				endm  
# End of macro CALLMONITOR
8709				endif 
8709 cd ba 84			call storage_findnextid 
870c			 
870c				if DEBUG_STORESE 
870c					DMARK "srf" 
870c f5				push af  
870d 3a 21 87			ld a, (.dmark)  
8710 32 65 ee			ld (debug_mark),a  
8713 3a 22 87			ld a, (.dmark+1)  
8716 32 66 ee			ld (debug_mark+1),a  
8719 3a 23 87			ld a, (.dmark+2)  
871c 32 67 ee			ld (debug_mark+2),a  
871f 18 03			jr .pastdmark  
8721 ..			.dmark: db "srf"  
8724 f1			.pastdmark: pop af  
8725			endm  
# End of macro DMARK
8725					CALLMONITOR 
8725 cd 6f ee			call debug_vector  
8728				endm  
# End of macro CALLMONITOR
8728				endif 
8728 cd 13 8d			call ishlzero 
872b			;	ld a, l 
872b			;	add h 
872b			;	cp 0 
872b 28 b1			jr z,.sr_fail			; block not found so EOF 
872d			 
872d				; save current address for use by higher level words etc 
872d			 
872d 22 65 ea			ld (store_openaddr),hl 
8730			 
8730			 
8730				; hl contains page number to load 
8730 d1				pop de   ; get storage 
8731 ed 53 70 ea		ld (store_readbuf), de     ; current buffer to load in to 
8735 d5				push de 
8736				if DEBUG_STORESE 
8736					DMARK "srg" 
8736 f5				push af  
8737 3a 4b 87			ld a, (.dmark)  
873a 32 65 ee			ld (debug_mark),a  
873d 3a 4c 87			ld a, (.dmark+1)  
8740 32 66 ee			ld (debug_mark+1),a  
8743 3a 4d 87			ld a, (.dmark+2)  
8746 32 67 ee			ld (debug_mark+2),a  
8749 18 03			jr .pastdmark  
874b ..			.dmark: db "srg"  
874e f1			.pastdmark: pop af  
874f			endm  
# End of macro DMARK
874f					CALLMONITOR 
874f cd 6f ee			call debug_vector  
8752				endm  
# End of macro CALLMONITOR
8752				endif 
8752 cd 87 81			call storage_read_block 
8755			 
8755				; if this a continuation read??? 
8755			 
8755 2a 70 ea			ld hl, (store_readbuf)     ; current buffer to load in to 
8758			 
8758 3e 3f			ld a, STORE_BLOCK_PHY-1 
875a cd ea 8c			call addatohl 
875d 7e				ld a,(hl) 
875e fe 00			cp 0 
8760 28 02			jr z, .markiscont 
8762 3e ff			ld a, 255 
8764			 
8764			.markiscont: 
8764 32 67 ea			ld (store_readcont), a 
8767			 
8767				if DEBUG_STORESE 
8767					DMARK "srC" 
8767 f5				push af  
8768 3a 7c 87			ld a, (.dmark)  
876b 32 65 ee			ld (debug_mark),a  
876e 3a 7d 87			ld a, (.dmark+1)  
8771 32 66 ee			ld (debug_mark+1),a  
8774 3a 7e 87			ld a, (.dmark+2)  
8777 32 67 ee			ld (debug_mark+2),a  
877a 18 03			jr .pastdmark  
877c ..			.dmark: db "srC"  
877f f1			.pastdmark: pop af  
8780			endm  
# End of macro DMARK
8780					CALLMONITOR 
8780 cd 6f ee			call debug_vector  
8783				endm  
# End of macro CALLMONITOR
8783				endif 
8783				; only short reads enabled 
8783			 
8783 3a 6f ea			ld a, (store_longread) 
8786 fe 00			cp 0 
8788 ca 55 88			jp z, .readdone 
878b			 
878b			; TODO if block has no zeros then need to read next block  
878b			; this code appears to be very buggy. Have added above a flag to disable/enable the following code for later debug 
878b			; check last byte of physical block. 
878b			; if not zero then the next block needs to be loaded 
878b			 
878b			 
878b 2a 70 ea			ld hl, (store_readbuf)     ; current buffer to load in to 
878e			 
878e 3e 3f			ld a, STORE_BLOCK_PHY-1 
8790 cd ea 8c			call addatohl 
8793				;dec hl 
8793 7e				ld a,(hl) 
8794				if DEBUG_STORESE 
8794					DMARK "sr?" 
8794 f5				push af  
8795 3a a9 87			ld a, (.dmark)  
8798 32 65 ee			ld (debug_mark),a  
879b 3a aa 87			ld a, (.dmark+1)  
879e 32 66 ee			ld (debug_mark+1),a  
87a1 3a ab 87			ld a, (.dmark+2)  
87a4 32 67 ee			ld (debug_mark+2),a  
87a7 18 03			jr .pastdmark  
87a9 ..			.dmark: db "sr?"  
87ac f1			.pastdmark: pop af  
87ad			endm  
# End of macro DMARK
87ad					CALLMONITOR 
87ad cd 6f ee			call debug_vector  
87b0				endm  
# End of macro CALLMONITOR
87b0				endif 
87b0 fe 00			cp 0 
87b2 ca 55 88			jp z, .readdone 
87b5			 
87b5				; last byte is not zero so there is more in the next extent. Load it on the end.	 
87b5			 
87b5 23				inc hl 
87b6			 
87b6 22 70 ea			ld (store_readbuf), hl     ; save the current buffer to load in to 
87b9			 
87b9 ed 5b 72 ea		ld de, (store_readptr)     ; save the current extent to load 
87bd			 
87bd eb				ex de, hl 
87be			 
87be				; next ext 
87be			 
87be 23				inc hl 
87bf 22 72 ea			ld  (store_readptr), hl     ; save the current extent to load 
87c2			 
87c2				if DEBUG_STORESE 
87c2					DMARK "sF2" 
87c2 f5				push af  
87c3 3a d7 87			ld a, (.dmark)  
87c6 32 65 ee			ld (debug_mark),a  
87c9 3a d8 87			ld a, (.dmark+1)  
87cc 32 66 ee			ld (debug_mark+1),a  
87cf 3a d9 87			ld a, (.dmark+2)  
87d2 32 67 ee			ld (debug_mark+2),a  
87d5 18 03			jr .pastdmark  
87d7 ..			.dmark: db "sF2"  
87da f1			.pastdmark: pop af  
87db			endm  
# End of macro DMARK
87db					CALLMONITOR 
87db cd 6f ee			call debug_vector  
87de				endm  
# End of macro CALLMONITOR
87de				endif 
87de			 
87de				; get and load block 
87de			 
87de cd ba 84			call storage_findnextid 
87e1			 
87e1				if DEBUG_STORESE 
87e1					DMARK "sf2" 
87e1 f5				push af  
87e2 3a f6 87			ld a, (.dmark)  
87e5 32 65 ee			ld (debug_mark),a  
87e8 3a f7 87			ld a, (.dmark+1)  
87eb 32 66 ee			ld (debug_mark+1),a  
87ee 3a f8 87			ld a, (.dmark+2)  
87f1 32 67 ee			ld (debug_mark+2),a  
87f4 18 03			jr .pastdmark  
87f6 ..			.dmark: db "sf2"  
87f9 f1			.pastdmark: pop af  
87fa			endm  
# End of macro DMARK
87fa					CALLMONITOR 
87fa cd 6f ee			call debug_vector  
87fd				endm  
# End of macro CALLMONITOR
87fd				endif 
87fd cd 13 8d			call ishlzero 
8800			;	ld a, l 
8800			;	add h 
8800			;	cp 0 
8800 ca de 86			jp z,.sr_fail			; block not found so EOF 
8803				 
8803				; save current address for use by higher level words etc 
8803			 
8803 22 65 ea			ld (store_openaddr),hl 
8806			 
8806 cd 87 81			call storage_read_block 
8809			 
8809				; on a continuation block, we now have the file id and ext in the middle of the block 
8809				; we need to pull everything back  
8809			 
8809 ed 5b 70 ea		ld de, (store_readbuf)     ; current buffer to nudge into 
880d 2a 70 ea			ld hl, (store_readbuf)     ; current buffer where data actually exists 
8810 23				inc hl 
8811 23				inc hl     ; skip id and ext 
8812 01 40 00			ld bc, STORE_BLOCK_PHY 
8815				if DEBUG_STORESE 
8815					DMARK "SR<" 
8815 f5				push af  
8816 3a 2a 88			ld a, (.dmark)  
8819 32 65 ee			ld (debug_mark),a  
881c 3a 2b 88			ld a, (.dmark+1)  
881f 32 66 ee			ld (debug_mark+1),a  
8822 3a 2c 88			ld a, (.dmark+2)  
8825 32 67 ee			ld (debug_mark+2),a  
8828 18 03			jr .pastdmark  
882a ..			.dmark: db "SR<"  
882d f1			.pastdmark: pop af  
882e			endm  
# End of macro DMARK
882e					CALLMONITOR 
882e cd 6f ee			call debug_vector  
8831				endm  
# End of macro CALLMONITOR
8831				endif 
8831 ed b0			ldir     ; copy data 
8833			 
8833				; move the pointer back and pretend we have a full buffer for next recheck 
8833			 
8833 1b				dec de 
8834 1b				dec de 
8835			 
8835			; TODO do pop below now short circuit loop????? 
8835 c1				pop bc     ; get rid of spare de on stack 
8836				if DEBUG_STORESE 
8836					DMARK "SR>" 
8836 f5				push af  
8837 3a 4b 88			ld a, (.dmark)  
883a 32 65 ee			ld (debug_mark),a  
883d 3a 4c 88			ld a, (.dmark+1)  
8840 32 66 ee			ld (debug_mark+1),a  
8843 3a 4d 88			ld a, (.dmark+2)  
8846 32 67 ee			ld (debug_mark+2),a  
8849 18 03			jr .pastdmark  
884b ..			.dmark: db "SR>"  
884e f1			.pastdmark: pop af  
884f			endm  
# End of macro DMARK
884f					CALLMONITOR 
884f cd 6f ee			call debug_vector  
8852				endm  
# End of macro CALLMONITOR
8852				endif 
8852 c3 e3 86			jp .srext 
8855			 
8855			 
8855			 
8855			 
8855			 
8855			.readdone:		 
8855 e1				pop hl 		 ; return start of data to show as not EOF 
8856 23				inc hl   ; past file id 
8857 23				inc hl   ; past ext 
8858				if DEBUG_STORESE 
8858					DMARK "SRe" 
8858 f5				push af  
8859 3a 6d 88			ld a, (.dmark)  
885c 32 65 ee			ld (debug_mark),a  
885f 3a 6e 88			ld a, (.dmark+1)  
8862 32 66 ee			ld (debug_mark+1),a  
8865 3a 6f 88			ld a, (.dmark+2)  
8868 32 67 ee			ld (debug_mark+2),a  
886b 18 03			jr .pastdmark  
886d ..			.dmark: db "SRe"  
8870 f1			.pastdmark: pop af  
8871			endm  
# End of macro DMARK
8871					CALLMONITOR 
8871 cd 6f ee			call debug_vector  
8874				endm  
# End of macro CALLMONITOR
8874				endif 
8874 c9					ret 
8875			 
8875			 
8875			 
8875			; 
8875			; Append File 
8875			; 
8875			; hl - file id to locate 
8875			; de - pointer to (multi block) string to write 
8875			 
8875			.sa_notfound: 
8875 d1				pop de 
8876 c9				ret 
8877			 
8877			 
8877			storage_append: 
8877				; hl -  file id to append to 
8877				; de - string to append 
8877			 
8877 d5				push de 
8878				 
8878				if DEBUG_STORESE 
8878					DMARK "AP1" 
8878 f5				push af  
8879 3a 8d 88			ld a, (.dmark)  
887c 32 65 ee			ld (debug_mark),a  
887f 3a 8e 88			ld a, (.dmark+1)  
8882 32 66 ee			ld (debug_mark+1),a  
8885 3a 8f 88			ld a, (.dmark+2)  
8888 32 67 ee			ld (debug_mark+2),a  
888b 18 03			jr .pastdmark  
888d ..			.dmark: db "AP1"  
8890 f1			.pastdmark: pop af  
8891			endm  
# End of macro DMARK
8891					CALLMONITOR 
8891 cd 6f ee			call debug_vector  
8894				endm  
# End of macro CALLMONITOR
8894				endif 
8894			 
8894 7d				ld a, l 
8895 32 68 ea			ld (store_tmpid), a 
8898			 
8898				; get file header  
8898			 
8898 16 00			ld d, 0			 ; file extent to locate - file name details at item 0 
889a 3a 68 ea			ld a, (store_tmpid) 
889d 5f				ld e, a 
889e			 
889e 21 40 00				ld hl, STORE_BLOCK_PHY 
88a1 cd ba 84				call storage_findnextid 
88a4			 
88a4 cd 13 8d			call ishlzero 
88a7 28 cc			jr z, .sa_notfound 
88a9			 
88a9 22 5f ea			ld (store_tmppageid), hl 
88ac			 
88ac				; TODO handle file id not found 
88ac			 
88ac				if DEBUG_STORESE 
88ac					DMARK "AP2" 
88ac f5				push af  
88ad 3a c1 88			ld a, (.dmark)  
88b0 32 65 ee			ld (debug_mark),a  
88b3 3a c2 88			ld a, (.dmark+1)  
88b6 32 66 ee			ld (debug_mark+1),a  
88b9 3a c3 88			ld a, (.dmark+2)  
88bc 32 67 ee			ld (debug_mark+2),a  
88bf 18 03			jr .pastdmark  
88c1 ..			.dmark: db "AP2"  
88c4 f1			.pastdmark: pop af  
88c5			endm  
# End of macro DMARK
88c5					CALLMONITOR 
88c5 cd 6f ee			call debug_vector  
88c8				endm  
# End of macro CALLMONITOR
88c8				endif 
88c8			 
88c8				; update file extent count 
88c8			 
88c8 11 74 ea			ld de, store_page 
88cb			 
88cb cd 87 81			call storage_read_block 
88ce			 
88ce				if DEBUG_STORESE 
88ce					DMARK "AP3" 
88ce f5				push af  
88cf 3a e3 88			ld a, (.dmark)  
88d2 32 65 ee			ld (debug_mark),a  
88d5 3a e4 88			ld a, (.dmark+1)  
88d8 32 66 ee			ld (debug_mark+1),a  
88db 3a e5 88			ld a, (.dmark+2)  
88de 32 67 ee			ld (debug_mark+2),a  
88e1 18 03			jr .pastdmark  
88e3 ..			.dmark: db "AP3"  
88e6 f1			.pastdmark: pop af  
88e7			endm  
# End of macro DMARK
88e7					CALLMONITOR 
88e7 cd 6f ee			call debug_vector  
88ea				endm  
# End of macro CALLMONITOR
88ea				endif 
88ea			;	ld (store_tmppageid), hl 
88ea			 
88ea 3a 76 ea			ld a, (store_page+2) 
88ed 3c				inc a 
88ee 32 76 ea			ld (store_page+2), a 
88f1 32 67 ea			ld (store_tmpext), a 
88f4				 
88f4				if DEBUG_STORESE 
88f4					DMARK "AP3" 
88f4 f5				push af  
88f5 3a 09 89			ld a, (.dmark)  
88f8 32 65 ee			ld (debug_mark),a  
88fb 3a 0a 89			ld a, (.dmark+1)  
88fe 32 66 ee			ld (debug_mark+1),a  
8901 3a 0b 89			ld a, (.dmark+2)  
8904 32 67 ee			ld (debug_mark+2),a  
8907 18 03			jr .pastdmark  
8909 ..			.dmark: db "AP3"  
890c f1			.pastdmark: pop af  
890d			endm  
# End of macro DMARK
890d					CALLMONITOR 
890d cd 6f ee			call debug_vector  
8910				endm  
# End of macro CALLMONITOR
8910				endif 
8910 2a 5f ea			ld hl, (store_tmppageid) 
8913 11 74 ea			ld de, store_page 
8916 cd ec 81			call storage_write_block 
8919			 
8919				; find free block 
8919			 
8919 11 00 00			ld de, 0			 ; file extent to locate 
891c			 
891c 21 40 00				ld hl, STORE_BLOCK_PHY 
891f cd ba 84				call storage_findnextid 
8922 cd 13 8d			call ishlzero 
8925 ca 75 88			jp z, .sa_notfound 
8928			 
8928					; TODO handle no space left 
8928					 
8928 22 5f ea				ld (store_tmppageid), hl 
892b			 
892b				if DEBUG_STORESE 
892b					DMARK "AP4" 
892b f5				push af  
892c 3a 40 89			ld a, (.dmark)  
892f 32 65 ee			ld (debug_mark),a  
8932 3a 41 89			ld a, (.dmark+1)  
8935 32 66 ee			ld (debug_mark+1),a  
8938 3a 42 89			ld a, (.dmark+2)  
893b 32 67 ee			ld (debug_mark+2),a  
893e 18 03			jr .pastdmark  
8940 ..			.dmark: db "AP4"  
8943 f1			.pastdmark: pop af  
8944			endm  
# End of macro DMARK
8944					CALLMONITOR 
8944 cd 6f ee			call debug_vector  
8947				endm  
# End of macro CALLMONITOR
8947				endif 
8947					; init the buffer with zeros so we can id if the buffer is full or not 
8947			 
8947 e5					push hl 
8948 c5					push bc 
8949			 
8949 21 74 ea				ld hl, store_page 
894c 06 40				ld b, STORE_BLOCK_PHY 
894e 3e 00				ld a, 0 
8950 77			.zeroblock:	ld (hl), a 
8951 23					inc hl 
8952 10 fc				djnz .zeroblock 
8954			 
8954 c1					pop bc 
8955 e1					pop hl 
8956			 
8956					; construct block 
8956			 
8956 3a 68 ea				ld a, (store_tmpid) 
8959 32 74 ea				ld (store_page), a   ; file id 
895c 3a 67 ea				ld a, (store_tmpext)   ; extent for this block 
895f 32 75 ea				ld (store_page+1), a 
8962			 
8962 e1					pop hl    ; get string to write 
8963 06 3e				ld b, STORE_BLOCK_PHY-2       ; exclude count of file id and extent 
8965 11 76 ea				ld de, store_page+2 
8968			 
8968				if DEBUG_STORESE 
8968					DMARK "AP5" 
8968 f5				push af  
8969 3a 7d 89			ld a, (.dmark)  
896c 32 65 ee			ld (debug_mark),a  
896f 3a 7e 89			ld a, (.dmark+1)  
8972 32 66 ee			ld (debug_mark+1),a  
8975 3a 7f 89			ld a, (.dmark+2)  
8978 32 67 ee			ld (debug_mark+2),a  
897b 18 03			jr .pastdmark  
897d ..			.dmark: db "AP5"  
8980 f1			.pastdmark: pop af  
8981			endm  
# End of macro DMARK
8981					CALLMONITOR 
8981 cd 6f ee			call debug_vector  
8984				endm  
# End of macro CALLMONITOR
8984				endif 
8984			 
8984			 
8984			 
8984					; fill buffer with data until end of string or full block 
8984			 
8984 7e			.appd:		ld a, (hl) 
8985 12					ld (de), a 
8986 fe 00				cp 0 
8988 28 04				jr z, .appdone 
898a 23					inc hl 
898b 13					inc de 
898c 10 f6				djnz .appd 
898e			 
898e e5			.appdone:	push hl		 	; save current source in case we need to go around again 
898f f5					push af   		; save last byte dumped 
8990			 
8990			 
8990 2a 5f ea			ld hl, (store_tmppageid) 
8993 11 74 ea			ld de, store_page 
8996				if DEBUG_STORESE 
8996					DMARK "AP6" 
8996 f5				push af  
8997 3a ab 89			ld a, (.dmark)  
899a 32 65 ee			ld (debug_mark),a  
899d 3a ac 89			ld a, (.dmark+1)  
89a0 32 66 ee			ld (debug_mark+1),a  
89a3 3a ad 89			ld a, (.dmark+2)  
89a6 32 67 ee			ld (debug_mark+2),a  
89a9 18 03			jr .pastdmark  
89ab ..			.dmark: db "AP6"  
89ae f1			.pastdmark: pop af  
89af			endm  
# End of macro DMARK
89af					CALLMONITOR 
89af cd 6f ee			call debug_vector  
89b2				endm  
# End of macro CALLMONITOR
89b2				endif 
89b2 cd ec 81				call storage_write_block 
89b5			 
89b5			 
89b5				; was that a full block of data written? 
89b5				; any more to write out? 
89b5			 
89b5				; if yes then set vars and jump to start of function again 
89b5			 
89b5 f1					pop af 
89b6 d1					pop de 
89b7			 
89b7 fe 00				cp 0		 ; no, string was fully written 
89b9 c8					ret z 
89ba			 
89ba					; setup vars for next cycle 
89ba			 
89ba 3a 68 ea				ld a, (store_tmpid) 
89bd 6f					ld l, a 
89be 26 00				ld h, 0 
89c0			 
89c0 c3 77 88			 	jp storage_append	 ; yes, need to write out some more 
89c3			 
89c3			 
89c3			 
89c3			 
89c3			 
89c3			 
89c3			 
89c3			if DEBUG_STORECF 
89c3			storageput:	 
89c3					ret 
89c3			storageread: 
89c3					ld hl, store_page 
89c3					ld b, 200 
89c3					ld a,0 
89c3			.src:		ld (hl),a 
89c3					inc hl 
89c3					djnz .src 
89c3					 
89c3			 
89c3					ld de, 0 
89c3					ld bc, 1 
89c3					ld hl, store_page 
89c3					call cfRead 
89c3			 
89c3				call cfGetError 
89c3				ld hl,scratch 
89c3				call hexout 
89c3				ld hl, scratch+2 
89c3				ld a, 0 
89c3				ld (hl),a 
89c3				ld de, scratch 
89c3				ld a,display_row_1 
89c3				call str_at_display 
89c3				call update_display 
89c3			 
89c3					ld hl, store_page 
89c3					ld (os_cur_ptr),hl 
89c3			 
89c3					ret 
89c3			endif 
89c3			 
89c3			 
89c3			; Clear out the main buffer store (used to remove junk before writing a new block) 
89c3			 
89c3			storage_clear_page: 
89c3 e5				push hl 
89c4 d5				push de 
89c5 c5				push bc 
89c6 21 74 ea			ld hl, store_page 
89c9 3e 00			ld a, 0 
89cb 77				ld (hl), a 
89cc			 
89cc 11 75 ea			ld de, store_page+1 
89cf 01 19 01			ld bc, STORE_BLOCK_LOG+1 
89d2			 
89d2 ed b0			ldir 
89d4				 
89d4 c1				pop bc 
89d5 d1				pop de 
89d6 e1				pop hl 
89d7 c9				ret 
89d8			 
89d8			; eof 
# End of file firmware_storage.asm
89d8			  
89d8			; support routines for above hardware abstraction layer  
89d8			  
89d8			include "firmware_general.asm"        ; general support functions  
89d8			 
89d8			; word look up 
89d8			 
89d8			; in 
89d8			; a is the index 
89d8			; hl is pointer start of array 
89d8			; 
89d8			; returns 
89d8			; hl to the word 
89d8			; 
89d8			 
89d8			table_lookup:  
89d8 d5					push de 
89d9 eb					ex de, hl 
89da			 
89da 6f					ld l, a 
89db 26 00				ld h, 0 
89dd 29					add hl, hl 
89de 19					add hl, de 
89df 7e					ld a, (hl) 
89e0 23					inc hl 
89e1 66					ld h,(hl) 
89e2 6f					ld l, a 
89e3			 
89e3 d1					pop de 
89e4 c9					ret 
89e5			 
89e5			; Delay loops 
89e5			 
89e5			 
89e5			 
89e5			aDelayInMS: 
89e5 c5				push bc 
89e6 47				ld b,a 
89e7			msdelay: 
89e7 c5				push bc 
89e8				 
89e8			 
89e8 01 41 00			ld bc,041h 
89eb cd 03 8a			call delayloop 
89ee c1				pop bc 
89ef 05				dec b 
89f0 20 f5			jr nz,msdelay 
89f2			 
89f2			;if CPU_CLOCK_8MHZ 
89f2			;msdelay8: 
89f2			;	push bc 
89f2			;	 
89f2			; 
89f2			;	ld bc,041h 
89f2			;	call delayloop 
89f2			;	pop bc 
89f2			;	dec b 
89f2			;	jr nz,msdelay8 
89f2			;endif 
89f2			 
89f2			 
89f2 c1				pop bc 
89f3 c9				ret 
89f4			 
89f4			 
89f4			delay250ms: 
89f4				;push de 
89f4 01 00 40			ld bc, 04000h 
89f7 c3 03 8a			jp delayloop 
89fa			delay500ms: 
89fa				;push de 
89fa 01 00 80			ld bc, 08000h 
89fd c3 03 8a			jp delayloop 
8a00			delay1s: 
8a00				;push bc 
8a00			   ; Clobbers A, d and e 
8a00 01 00 00		    ld      bc,0      ; # 0ffffh = approx 1s 
8a03			delayloop: 
8a03 c5			    push bc 
8a04			 
8a04			if BASE_CPM 
8a04				ld bc, CPM_DELAY_TUNE 
8a04			.cpmloop: 
8a04				push bc 
8a04			 
8a04			endif 
8a04			 
8a04			 
8a04			 
8a04			delayloopi: 
8a04			;	push bc 
8a04			;.dl: 
8a04 cb 47		    bit     0,a    	; 8 
8a06 cb 47		    bit     0,a    	; 8 
8a08 cb 47		    bit     0,a    	; 8 
8a0a e6 ff		    and     255  	; 7 
8a0c 0b			    dec     bc      	; 6 
8a0d 79			    ld      a,c     	; 4 
8a0e b0			    or      b     	; 4 
8a0f c2 04 8a		    jp      nz,delayloopi   	; 10, total = 55 states/iteration 
8a12			    ; 65536 iterations * 55 states = 3604480 states = 2.00248 seconds 
8a12				;pop de 
8a12			;pop bc 
8a12			 
8a12			if BASE_CPM 
8a12				pop bc 
8a12				 
8a12			    dec     bc      	; 6 
8a12			    ld      a,c     	; 4 
8a12			    or      b     	; 4 
8a12			    jp      nz,.cpmloop   	; 10, total = 55 states/iteration 
8a12				 
8a12			 
8a12			endif 
8a12			;if CPU_CLOCK_8MHZ 
8a12			;    pop bc 
8a12			;    push bc 
8a12			;.dl8: 
8a12			;    bit     0,a    	; 8 
8a12			;    bit     0,a    	; 8 
8a12			;    bit     0,a    	; 8 
8a12			;    and     255  	; 7 
8a12			;    dec     bc      	; 6 
8a12			;    ld      a,c     	; 4 
8a12			;    or      b     	; 4 
8a12			;    jp      nz,.dl8   	; 10, total = 55 states/iteration 
8a12			;endif 
8a12			 
8a12			;if CPU_CLOCK_10MHZ 
8a12			;    pop bc 
8a12			;    push bc 
8a12			;.dl8: 
8a12			;    bit     0,a    	; 8 
8a12			;    bit     0,a    	; 8 
8a12			;    bit     0,a    	; 8 
8a12			;    and     255  	; 7 
8a12			;    dec     bc      	; 6 
8a12			;    ld      a,c     	; 4 
8a12			;    or      b     	; 4 
8a12			;    jp      nz,.dl8   	; 10, total = 55 states/iteration 
8a12			;endif 
8a12 c1			    pop bc 
8a13			 
8a13 c9				ret 
8a14			 
8a14			 
8a14			 
8a14			; eof 
# End of file firmware_general.asm
8a14			include "firmware_display.asm"      ; frame buffer screen abstraction layer  
8a14			; display routines that use the physical hardware abstraction layer 
8a14			 
8a14			 
8a14			; Display an activity indicator 
8a14			; Each call returns the new char pointed to in hl 
8a14			 
8a14			active: 
8a14 3a c0 eb			ld a, (display_active) 
8a17 fe 06			cp 6 
8a19			 
8a19 20 02			jr nz, .sne 
8a1b				; gone past the last one reset sequence 
8a1b 3e ff			ld a, 255 
8a1d			 
8a1d			.sne:   
8a1d				; get the next char in seq 
8a1d 3c				inc a 
8a1e 32 c0 eb			ld (display_active), a 
8a21			 
8a21				; look up the string in the table 
8a21 21 38 8a			ld hl, actseq 
8a24 cb 27			sla a 
8a26 cd ea 8c			call addatohl 
8a29 cd f8 9d			call loadwordinhl 
8a2c			 
8a2c				; forth will write the to string when pushing so move from rom to ram 
8a2c			 
8a2c 11 c1 eb			ld de, display_active+1 
8a2f 01 02 00			ld bc, 2 
8a32 ed b0			ldir 
8a34			 
8a34 21 c1 eb			ld hl, display_active+1 
8a37 c9				ret 
8a38				 
8a38				 
8a38			 
8a38			 
8a38			;db "|/-\|-\" 
8a38			 
8a38			actseq: 
8a38			 
8a38 46 8a		dw spin0 
8a3a 48 8a		dw spin1 
8a3c 4a 8a		dw spin2 
8a3e 4c 8a		dw spin3 
8a40 4a 8a		dw spin2 
8a42 48 8a		dw spin1 
8a44 46 8a		dw spin0 
8a46			 
8a46 .. 00		spin0: db " ", 0 
8a48 .. 00		spin1: db "-", 0 
8a4a .. 00		spin2: db "+", 0 
8a4c .. 00		spin3: db "#", 0 
8a4e			 
8a4e			 
8a4e			; information window 
8a4e			 
8a4e			; pass hl with 1st string to display 
8a4e			; pass de with 2nd string to display 
8a4e			 
8a4e			info_panel: 
8a4e e5				push hl 
8a4f			 
8a4f 2a c6 eb			ld hl, (display_fb_active) 
8a52 e5				push hl    ; future de destination 
8a53 21 ab ed				ld hl, display_fb0 
8a56 22 c6 eb				ld (display_fb_active), hl 
8a59			 
8a59			;	call clear_display 
8a59			 
8a59				if BASE_CPM 
8a59				ld a, '.' 
8a59				else 
8a59 3e a5			ld a, 165 
8a5b				endif 
8a5b cd c2 8a			call fill_display 
8a5e			 
8a5e			 
8a5e 3e 55			ld a, display_row_3 + 5 
8a60 cd d0 8a			call str_at_display 
8a63			 
8a63 e1				pop hl 
8a64 d1				pop de 
8a65			 
8a65 e5				push hl 
8a66			 
8a66			 
8a66 3e 2d			ld a, display_row_2 + 5 
8a68 cd d0 8a			call str_at_display 
8a6b			 
8a6b			 
8a6b cd e0 8a			call update_display 
8a6e cd fd 99			call next_page_prompt 
8a71 cd bd 8a			call clear_display 
8a74			 
8a74				 
8a74 21 0a ed				ld hl, display_fb1 
8a77 22 c6 eb				ld (display_fb_active), hl 
8a7a cd e0 8a			call update_display 
8a7d			 
8a7d e1				pop hl 
8a7e			 
8a7e c9				ret 
8a7f			 
8a7f			 
8a7f			 
8a7f			 
8a7f			; TODO windowing? 
8a7f			 
8a7f			; TODO scroll line up 
8a7f			 
8a7f			scroll_up: 
8a7f			 
8a7f e5				push hl 
8a80 d5				push de 
8a81 c5				push bc 
8a82			 
8a82				; get frame buffer  
8a82			 
8a82 2a c6 eb			ld hl, (display_fb_active) 
8a85 e5				push hl    ; future de destination 
8a86			 
8a86 11 28 00			ld  de, display_cols 
8a89 19				add hl, de 
8a8a			 
8a8a d1				pop de 
8a8b			 
8a8b				;ex de, hl 
8a8b 01 9f 00			ld bc, display_fb_len -1  
8a8e			;if DEBUG_FORTH_WORDS 
8a8e			;	DMARK "SCL" 
8a8e			;	CALLMONITOR 
8a8e			;endif	 
8a8e ed b0			ldir 
8a90			 
8a90				; wipe bottom row 
8a90			 
8a90			 
8a90 2a c6 eb			ld hl, (display_fb_active) 
8a93 11 a0 00			ld de, display_cols*display_rows 
8a96 19				add hl, de 
8a97 06 28			ld b, display_cols 
8a99 3e 20			ld a, ' ' 
8a9b			.scwipe: 
8a9b 77				ld (hl), a 
8a9c 2b				dec hl 
8a9d 10 fc			djnz .scwipe 
8a9f			 
8a9f				;pop hl 
8a9f			 
8a9f c1				pop bc 
8aa0 d1				pop de 
8aa1 e1				pop hl 
8aa2			 
8aa2 c9				ret 
8aa3			 
8aa3			 
8aa3			;scroll_upo: 
8aa3			;	ld de, display_row_1 
8aa3			 ;	ld hl, display_row_2 
8aa3			;	ld bc, display_cols 
8aa3			;	ldir 
8aa3			;	ld de, display_row_2 
8aa3			 ;	ld hl, display_row_3 
8aa3			;	ld bc, display_cols 
8aa3			;	ldir 
8aa3			;	ld de, display_row_3 
8aa3			 ;	ld hl, display_row_4 
8aa3			;	ld bc, display_cols 
8aa3			;	ldir 
8aa3			 
8aa3			; TODO clear row 4 
8aa3			 
8aa3			;	ret 
8aa3			 
8aa3				 
8aa3			scroll_down: 
8aa3			 
8aa3 e5				push hl 
8aa4 d5				push de 
8aa5 c5				push bc 
8aa6			 
8aa6				; get frame buffer  
8aa6			 
8aa6 2a c6 eb			ld hl, (display_fb_active) 
8aa9			 
8aa9 11 9f 00			ld de, display_fb_len - 1 
8aac 19				add hl, de 
8aad			 
8aad e5			push hl    ; future de destination 
8aae			 
8aae 11 28 00			ld  de, display_cols 
8ab1 ed 52			sbc hl, de 
8ab3			 
8ab3			 
8ab3 d1				pop de 
8ab4			 
8ab4			;	ex de, hl 
8ab4 01 9f 00			ld bc, display_fb_len -1  
8ab7			 
8ab7			 
8ab7				 
8ab7			 
8ab7 ed b0			ldir 
8ab9			 
8ab9				; wipe bottom row 
8ab9			 
8ab9			 
8ab9			;	ld hl, (display_fb_active) 
8ab9			;;	ld de, display_cols*display_rows 
8ab9			;;	add hl, de 
8ab9			;	ld b, display_cols 
8ab9			;	ld a, ' ' 
8ab9			;.scwiped: 
8ab9			;	ld (hl), a 
8ab9			;	dec hl 
8ab9			;	djnz .scwiped 
8ab9			 
8ab9				;pop hl 
8ab9			 
8ab9 c1				pop bc 
8aba d1				pop de 
8abb e1				pop hl 
8abc			 
8abc c9				ret 
8abd			;scroll_down: 
8abd			;	ld de, display_row_4 
8abd			;	ld hl, display_row_3 
8abd			;	ld bc, display_cols 
8abd			;	ldir 
8abd			;	ld de, display_row_3 
8abd			; 	ld hl, display_row_2 
8abd			;	ld bc, display_cols 
8abd			;	ldir 
8abd			;	ld de, display_row_2 
8abd			;	ld hl, display_row_1 
8abd			;	ld bc, display_cols 
8abd			;	ldir 
8abd			;;; TODO clear row 1 
8abd			;	ret 
8abd			 
8abd			 
8abd			 
8abd			 
8abd			 
8abd			; clear active frame buffer 
8abd			 
8abd			clear_display: 
8abd 3e 20			ld a, ' ' 
8abf c3 c2 8a			jp fill_display 
8ac2			 
8ac2			; fill active frame buffer with a char in A 
8ac2			 
8ac2			fill_display: 
8ac2 06 a0			ld b,display_fb_len 
8ac4 2a c6 eb			ld hl, (display_fb_active) 
8ac7 77			.fd1:	ld (hl),a 
8ac8 23				inc hl 
8ac9 10 fc			djnz .fd1 
8acb 23				inc hl 
8acc 3e 00			ld a,0 
8ace 77				ld (hl),a 
8acf			 
8acf			 
8acf c9				ret 
8ad0			; Write string (DE) at pos (A) to active frame buffer 
8ad0			 
8ad0 2a c6 eb		str_at_display:    ld hl,(display_fb_active) 
8ad3 06 00					ld b,0 
8ad5 4f					ld c,a 
8ad6 09					add hl,bc 
8ad7 1a			.sad1: 		LD   A, (DE)        ;Get character from string 
8ad8 b7			            OR   A              ;Null terminator? 
8ad9 c8			            RET  Z              ;Yes, so finished 
8ada 77					ld (hl),a 
8adb 23				inc hl 
8adc 13			            INC  DE             ;Point to next character 
8add 18 f8		            JR   .sad1     ;Repeat 
8adf c9					ret 
8ae0			 
8ae0			; using current frame buffer write to physical display 
8ae0			 
8ae0			update_display: 
8ae0 e5				push hl 
8ae1 2a c6 eb			ld hl, (display_fb_active) 
8ae4 cd 50 df			call write_display 
8ae7 e1				pop hl 
8ae8 c9				ret 
8ae9			 
8ae9			; TODO scrolling 
8ae9			 
8ae9			 
8ae9			; move cursor right one char 
8ae9			cursor_right: 
8ae9			 
8ae9				; TODO shift right 
8ae9				; TODO if beyond max col 
8ae9				; TODO       cursor_next_line 
8ae9			 
8ae9 c9				ret 
8aea			 
8aea			 
8aea			cursor_next_line: 
8aea				; TODO first char 
8aea				; TODO line down 
8aea				; TODO if past last row 
8aea				; TODO    scroll up 
8aea			 
8aea c9				ret 
8aeb			 
8aeb			cursor_left: 
8aeb				; TODO shift left 
8aeb				; TODO if beyond left  
8aeb				; TODO     cursor prev line 
8aeb				 
8aeb c9				ret 
8aec			 
8aec			cursor_prev_line: 
8aec				; TODO last char 
8aec				; TODO line up 
8aec				; TODO if past first row 
8aec				; TODO   scroll down 
8aec			 
8aec c9				ret 
8aed			 
8aed			 
8aed			cout: 
8aed				; A - char 
8aed c9				ret 
8aee			 
8aee			 
8aee			; Display a menu and allow item selection (optional toggle items) 
8aee			; 
8aee			; format: 
8aee			; hl pointer to word array with zero term for items 
8aee			; e.g.    db item1 
8aee			;         db .... 
8aee			;         db 0 
8aee			; 
8aee			; a = starting menu item  
8aee			; 
8aee			; de = pointer item toggle array   (todo) 
8aee			; 
8aee			; returns item selected in a 1-... 
8aee			; returns 0 if back button pressed 
8aee			; 
8aee			; NOTE: Uses system frame buffer to display 
8aee			; 
8aee			; LEFT, Q = go back 
8aee			; RIGHT, SPACE, CR = select 
8aee			; UP, A - Up 
8aee			; DOWN, Z - Down 
8aee			 
8aee			 
8aee			 
8aee			 
8aee			 
8aee			menu: 
8aee			 
8aee					; keep array pointer 
8aee			 
8aee 22 6d ea				ld (store_tmp1), hl 
8af1 32 6b ea				ld (store_tmp2), a 
8af4			 
8af4					; check for key bounce 
8af4			 
8af4			if BASE_KEV 
8af4			 
8af4			.mbounce:	call cin 
8af4					cp 0 
8af4					jr nz, .mbounce 
8af4			endif 
8af4					; for ease use ex 
8af4			 
8af4					; use menu on fb0 so as not to disrupt user screens ie a menu popup 
8af4 21 ab ed				ld hl, display_fb0 
8af7 22 c6 eb				ld (display_fb_active), hl 
8afa			 
8afa cd bd 8a		.mloop:		call clear_display 
8afd cd e0 8a				call update_display 
8b00			 
8b00					; draw selection id '>' at 1 
8b00			 
8b00					; init start of list display 
8b00			 
8b00 3e 05				ld a, 5 
8b02 32 69 ea				ld (store_tmp3), a   ; display row count 
8b05 3a 6b ea				ld a,( store_tmp2) 
8b08 32 6c ea				ld (store_tmp2+1), a   ; display item count 
8b0b			 
8b0b					 
8b0b			.mitem:	 
8b0b			 
8b0b			 
8b0b 3a 6c ea				ld a,(store_tmp2+1) 
8b0e 6f					ld l, a 
8b0f 26 00				ld h, 0 
8b11 29					add hl, hl 
8b12 ed 5b 6d ea			ld de, (store_tmp1) 
8b16 19					add hl, de 
8b17 7e					ld a, (hl) 
8b18 23					inc hl 
8b19 66					ld h,(hl) 
8b1a 6f					ld l, a 
8b1b			 
8b1b cd 13 8d				call ishlzero 
8b1e 28 1a				jr z, .mdone 
8b20			 
8b20 eb					ex de, hl 
8b21 3a 69 ea				ld a, (store_tmp3) 
8b24 cd d0 8a				call str_at_display 
8b27					 
8b27			 
8b27					; next item 
8b27 3a 6c ea				ld a, (store_tmp2+1) 
8b2a 3c					inc a 
8b2b 32 6c ea				ld (store_tmp2+1), a   ; display item count 
8b2e			 
8b2e			 		; next row 
8b2e			 
8b2e 3a 69 ea				ld a, (store_tmp3) 
8b31 c6 28				add display_cols 
8b33 32 69 ea				ld (store_tmp3), a 
8b36			 
8b36					; at end of screen? 
8b36			 
8b36 fe 10				cp display_rows*4 
8b38 20 d1				jr nz, .mitem 
8b3a			 
8b3a			 
8b3a			.mdone: 
8b3a cd 13 8d				call ishlzero 
8b3d 28 08				jr z, .nodn 
8b3f			 
8b3f 3e 78				ld a, display_row_4 
8b41 11 c0 8b				ld de, .mdown 
8b44 cd d0 8a				call str_at_display 
8b47			 
8b47					; draw options to fill the screens with active item on line 1 
8b47					; if current option is 2 or more then display ^ in top 
8b47			 
8b47 3a 6b ea		.nodn:		ld a, (store_tmp2) 
8b4a fe 00				cp 0 
8b4c 28 08				jr z, .noup 
8b4e			 
8b4e 3e 00				ld a, 0 
8b50 11 be 8b				ld de, .mup 
8b53 cd d0 8a				call str_at_display 
8b56			 
8b56 3e 02		.noup:		ld a, 2 
8b58 11 bc 8b				ld de, .msel 
8b5b cd d0 8a				call str_at_display 
8b5e			 
8b5e					; if current option + 1 is not null then display V in bottom 
8b5e					; get key 
8b5e cd e0 8a				call update_display 
8b61			 
8b61			 
8b61					; handle key 
8b61			 
8b61 cd dc df				call cin_wait 
8b64			 
8b64 fe 05				cp KEY_UP 
8b66 28 2b				jr z, .mgoup 
8b68 fe 61				cp 'a' 
8b6a 28 27				jr z, .mgoup 
8b6c fe 0a				cp KEY_DOWN 
8b6e 28 32				jr z, .mgod 
8b70 fe 7a				cp 'z' 
8b72 28 2e				jr z, .mgod 
8b74 fe 20				cp ' ' 
8b76 28 34				jr z, .goend 
8b78 fe 0c				cp KEY_RIGHT 
8b7a 28 30				jr z, .goend 
8b7c fe 0d				cp KEY_CR 
8b7e 28 2c				jr z, .goend 
8b80 fe 71				cp 'q' 
8b82 28 0b				jr z, .goback 
8b84			 
8b84 fe 0b				cp KEY_LEFT 
8b86 28 07				jr z, .goback 
8b88 fe 08				cp KEY_BS 
8b8a 28 03				jr z, .goback 
8b8c c3 fa 8a				jp .mloop 
8b8f			 
8b8f			.goback: 
8b8f 3e 00			ld a, 0 
8b91 18 1d			jr .goend2 
8b93			 
8b93				; move up one 
8b93			.mgoup: 
8b93 3a 6b ea				ld a, (store_tmp2) 
8b96 fe 00				cp 0 
8b98 ca fa 8a				jp z, .mloop 
8b9b 3d					dec a 
8b9c 32 6b ea				ld (store_tmp2), a 
8b9f c3 fa 8a				jp .mloop 
8ba2			 
8ba2				; move down one 
8ba2			.mgod: 
8ba2 3a 6b ea				ld a, (store_tmp2) 
8ba5 3c					inc a 
8ba6 32 6b ea				ld (store_tmp2), a 
8ba9 c3 fa 8a				jp .mloop 
8bac			 
8bac			 
8bac			.goend: 
8bac					; get selected item number 
8bac			 
8bac 3a 6b ea				ld a, (store_tmp2) 
8baf 3c					inc a 
8bb0			 
8bb0			.goend2: 
8bb0 f5					push af 
8bb1			 
8bb1					; restore active fb 
8bb1					; TODO BUG assumes fb1 
8bb1			 
8bb1 21 0a ed				ld hl, display_fb1 
8bb4 22 c6 eb				ld (display_fb_active), hl 
8bb7			 
8bb7					; restore main regs 
8bb7			 
8bb7			 
8bb7 cd e0 8a				call update_display 
8bba			 
8bba f1					pop af 
8bbb			 
8bbb c9				ret 
8bbc			 
8bbc .. 00		.msel:   db ">",0 
8bbe .. 00		.mup:   db "^",0 
8bc0 .. 00		.mdown:   db "v",0 
8bc2			 
8bc2			 
8bc2			; eof 
8bc2			 
# End of file firmware_display.asm
8bc2			include "firmware_maths.asm"     ; any odd maths stuff   TODO removed until I fix up the rng code  
8bc2			; random number generators 
8bc2			 
8bc2			 
8bc2			; https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random 
8bc2			 
8bc2			 
8bc2			;-----> Generate a random number 
8bc2			; output a=answer 0<=a<=255 
8bc2			; all registers are preserved except: af 
8bc2			random: 
8bc2 e5			        push    hl 
8bc3 d5			        push    de 
8bc4 2a a5 eb		        ld      hl,(randData) 
8bc7 ed 5f		        ld      a,r 
8bc9 57			        ld      d,a 
8bca 5e			        ld      e,(hl) 
8bcb 19			        add     hl,de 
8bcc 85			        add     a,l 
8bcd ac			        xor     h 
8bce 22 a5 eb		        ld      (randData),hl 
8bd1 d1			        pop     de 
8bd2 e1			        pop     hl 
8bd3 c9			        ret 
8bd4			 
8bd4			 
8bd4			; randData here must be a 2 byte seed located in ram. While this is a fast generator, it's generally not considered very good in terms of randomness. 
8bd4			 
8bd4			 
8bd4			 
8bd4			;------LFSR------ 
8bd4			;James Montelongo 
8bd4			;optimized by Spencer Putt 
8bd4			;out: 
8bd4			; a = 8 bit random number 
8bd4			RandLFSR: 
8bd4 21 ab eb		        ld hl,LFSRSeed+4 
8bd7 5e			        ld e,(hl) 
8bd8 23			        inc hl 
8bd9 56			        ld d,(hl) 
8bda 23			        inc hl 
8bdb 4e			        ld c,(hl) 
8bdc 23			        inc hl 
8bdd 7e			        ld a,(hl) 
8bde 47			        ld b,a 
8bdf cb 13		        rl e  
8be1 cb 12			rl d 
8be3 cb 11		        rl c  
8be5 17				rla 
8be6 cb 13		        rl e  
8be8 cb 12			rl d 
8bea cb 11		        rl c  
8bec 17				rla 
8bed cb 13		        rl e  
8bef cb 12			rl d 
8bf1 cb 11		        rl c  
8bf3 17				rla 
8bf4 67			        ld h,a 
8bf5 cb 13		        rl e  
8bf7 cb 12			rl d 
8bf9 cb 11		        rl c  
8bfb 17				rla 
8bfc a8			        xor b 
8bfd cb 13		        rl e  
8bff cb 12			rl d 
8c01 ac			        xor h 
8c02 a9			        xor c 
8c03 aa			        xor d 
8c04 21 ad eb		        ld hl,LFSRSeed+6 
8c07 11 ae eb		        ld de,LFSRSeed+7 
8c0a 01 07 00		        ld bc,7 
8c0d ed b8		        lddr 
8c0f 12			        ld (de),a 
8c10 c9			        ret 
8c11			 
8c11			;While this may produces better numbers, it is slower, larger and requires a bigger seed than ionrandom. Assuming theres is a good seed to start, it should generate ~2^56 bytes before repeating. However if there is not a good seed(0 for example), then the numbers created will not be adequate. Unlike Ionrandom and its use of the r register, starting with the same seed the same numbers will be generated. With Ionrandom the code running may have an impact on the number generated. This means this method requires more initialization. 
8c11			 
8c11			;You can initialize with TI-OS's seeds, stored at seed1 and seed2, both are ti-floats but will serve the purpose.  
8c11			 
8c11			 
8c11			;This is a very fast, quality pseudo-random number generator. It combines a 16-bit Linear Feedback Shift Register and a 16-bit LCG. 
8c11			 
8c11			prng16: 
8c11			;Inputs: 
8c11			;   (seed1) contains a 16-bit seed value 
8c11			;   (seed2) contains a NON-ZERO 16-bit seed value 
8c11			;Outputs: 
8c11			;   HL is the result 
8c11			;   BC is the result of the LCG, so not that great of quality 
8c11			;   DE is preserved 
8c11			;Destroys: 
8c11			;   AF 
8c11			;cycle: 4,294,901,760 (almost 4.3 billion) 
8c11			;160cc 
8c11			;26 bytes 
8c11 2a 9f eb		    ld hl,(seed1) 
8c14 44			    ld b,h 
8c15 4d			    ld c,l 
8c16 29			    add hl,hl 
8c17 29			    add hl,hl 
8c18 2c			    inc l 
8c19 09			    add hl,bc 
8c1a 22 9f eb		    ld (seed1),hl 
8c1d 2a 9d eb		    ld hl,(seed2) 
8c20 29			    add hl,hl 
8c21 9f			    sbc a,a 
8c22 e6 2d		    and %00101101 
8c24 ad			    xor l 
8c25 6f			    ld l,a 
8c26 22 9d eb		    ld (seed2),hl 
8c29 09			    add hl,bc 
8c2a c9			    ret 
8c2b			 
8c2b			;On their own, LCGs and LFSRs don't produce great results and are generally very cyclical, but they are very fast to compute. The 16-bit LCG in the above example will bounce around and reach each number from 0 to 65535, but the lower bits are far more predictable than the upper bits. The LFSR mixes up the predictability of a given bit's state, but it hits every number except 0, meaning there is a slightly higher chance of any given bit in the result being a 1 instead of a 0. It turns out that by adding together the outputs of these two generators, we can lose the predictability of a bit's state, while ensuring it has a 50% chance of being 0 or 1. As well, since the periods, 65536 and 65535 are coprime, then the overall period of the generator is 65535*65536, which is over 4 billion.  
8c2b			 
8c2b			rand32: 
8c2b			;Inputs: 
8c2b			;   (seed1_0) holds the lower 16 bits of the first seed 
8c2b			;   (seed1_1) holds the upper 16 bits of the first seed 
8c2b			;   (seed2_0) holds the lower 16 bits of the second seed 
8c2b			;   (seed2_1) holds the upper 16 bits of the second seed 
8c2b			;   **NOTE: seed2 must be non-zero 
8c2b			;Outputs: 
8c2b			;   HL is the result 
8c2b			;   BC,DE can be used as lower quality values, but are not independent of HL. 
8c2b			;Destroys: 
8c2b			;   AF 
8c2b			;Tested and passes all CAcert tests 
8c2b			;Uses a very simple 32-bit LCG and 32-bit LFSR 
8c2b			;it has a period of 18,446,744,069,414,584,320 
8c2b			;roughly 18.4 quintillion. 
8c2b			;LFSR taps: 0,2,6,7  = 11000101 
8c2b			;291cc 
8c2b			;seed1_0=$+1 
8c2b			;    ld hl,12345 
8c2b			;seed1_1=$+1 
8c2b			;    ld de,6789 
8c2b			;    ld b,h 
8c2b			;    ld c,l 
8c2b			;    add hl,hl \ rl e \ rl d 
8c2b			;    add hl,hl \ rl e \ rl d 
8c2b			;    inc l 
8c2b			;    add hl,bc 
8c2b			;    ld (seed1_0),hl 
8c2b			;    ld hl,(seed1_1) 
8c2b			;    adc hl,de 
8c2b			;    ld (seed1_1),hl 
8c2b			;    ex de,hl 
8c2b			;seed2_0=$+1 
8c2b			;    ld hl,9876 
8c2b			;seed2_1=$+1 
8c2b			;    ld bc,54321 
8c2b			;    add hl,hl \ rl c \ rl b 
8c2b			;    ld (seed2_1),bc 
8c2b			;    sbc a,a 
8c2b			;    and %11000101 
8c2b			;    xor l 
8c2b			;    ld l,a 
8c2b			;    ld (seed2_0),hl 
8c2b			;    ex de,hl 
8c2b			;    add hl,bc 
8c2b			;    ret 
8c2b			; 
8c2b			 
8c2b			; 16-bit xorshift pseudorandom number generator by John Metcalf 
8c2b			; 20 bytes, 86 cycles (excluding ret) 
8c2b			 
8c2b			; returns   hl = pseudorandom number 
8c2b			; corrupts   a 
8c2b			 
8c2b			; generates 16-bit pseudorandom numbers with a period of 65535 
8c2b			; using the xorshift method: 
8c2b			 
8c2b			; hl ^= hl << 7 
8c2b			; hl ^= hl >> 9 
8c2b			; hl ^= hl << 8 
8c2b			 
8c2b			; some alternative shift triplets which also perform well are: 
8c2b			; 6, 7, 13; 7, 9, 13; 9, 7, 13. 
8c2b			 
8c2b			;  org 32768 
8c2b			 
8c2b			xrnd: 
8c2b 2a a3 eb		  ld hl,(xrandc)       ; seed must not be 0 
8c2e 3e 00		  ld a,0 
8c30 bd			  cp l 
8c31 20 02		  jr nz, .xrnd1 
8c33 2e 01		  ld l, 1 
8c35			.xrnd1: 
8c35			 
8c35 7c			  ld a,h 
8c36 1f			  rra 
8c37 7d			  ld a,l 
8c38 1f			  rra 
8c39 ac			  xor h 
8c3a 67			  ld h,a 
8c3b 7d			  ld a,l 
8c3c 1f			  rra 
8c3d 7c			  ld a,h 
8c3e 1f			  rra 
8c3f ad			  xor l 
8c40 6f			  ld l,a 
8c41 ac			  xor h 
8c42 67			  ld h,a 
8c43			 
8c43 22 a3 eb		  ld (xrandc),hl 
8c46			 
8c46 c9			  ret 
8c47			;  
8c47			 
8c47			 
8c47			;;;; int maths 
8c47			 
8c47			; https://map.grauw.nl/articles/mult_div_shifts.php 
8c47			; Divide 16-bit values (with 16-bit result) 
8c47			; In: Divide BC by divider DE 
8c47			; Out: BC = result, HL = rest 
8c47			; 
8c47			Div16: 
8c47 21 00 00		    ld hl,0 
8c4a 78			    ld a,b 
8c4b 06 08		    ld b,8 
8c4d			Div16_Loop1: 
8c4d 17			    rla 
8c4e ed 6a		    adc hl,hl 
8c50 ed 52		    sbc hl,de 
8c52 30 01		    jr nc,Div16_NoAdd1 
8c54 19			    add hl,de 
8c55			Div16_NoAdd1: 
8c55 10 f6		    djnz Div16_Loop1 
8c57 17			    rla 
8c58 2f			    cpl 
8c59 47			    ld b,a 
8c5a 79			    ld a,c 
8c5b 48			    ld c,b 
8c5c 06 08		    ld b,8 
8c5e			Div16_Loop2: 
8c5e 17			    rla 
8c5f ed 6a		    adc hl,hl 
8c61 ed 52		    sbc hl,de 
8c63 30 01		    jr nc,Div16_NoAdd2 
8c65 19			    add hl,de 
8c66			Div16_NoAdd2: 
8c66 10 f6		    djnz Div16_Loop2 
8c68 17			    rla 
8c69 2f			    cpl 
8c6a 41			    ld b,c 
8c6b 4f			    ld c,a 
8c6c c9			ret 
8c6d			 
8c6d			 
8c6d			;http://z80-heaven.wikidot.com/math 
8c6d			; 
8c6d			;Inputs: 
8c6d			;     DE and A are factors 
8c6d			;Outputs: 
8c6d			;     A is not changed 
8c6d			;     B is 0 
8c6d			;     C is not changed 
8c6d			;     DE is not changed 
8c6d			;     HL is the product 
8c6d			;Time: 
8c6d			;     342+6x 
8c6d			; 
8c6d			Mult16: 
8c6d			 
8c6d 06 08		     ld b,8          ;7           7 
8c6f 21 00 00		     ld hl,0         ;10         10 
8c72 29			       add hl,hl     ;11*8       88 
8c73 07			       rlca          ;4*8        32 
8c74 30 01		       jr nc,$+3     ;(12|18)*8  96+6x 
8c76 19			         add hl,de   ;--         -- 
8c77 10 f9		       djnz $-5      ;13*7+8     99 
8c79 c9			ret 
8c7a			 
8c7a			; 
8c7a			; Square root of 16-bit value 
8c7a			; In:  HL = value 
8c7a			; Out:  D = result (rounded down) 
8c7a			; 
8c7a			;Sqr16: 
8c7a			;    ld de,#0040 
8c7a			;    ld a,l 
8c7a			;    ld l,h 
8c7a			;    ld h,d 
8c7a			;    or a 
8c7a			;    ld b,8 
8c7a			;Sqr16_Loop: 
8c7a			;    sbc hl,de 
8c7a			;    jr nc,Sqr16_Skip 
8c7a			;    add hl,de 
8c7a			;Sqr16_Skip: 
8c7a			;    ccf 
8c7a			;    rl d 
8c7a			;    add a,a 
8c7a			;    adc hl,hl 
8c7a			;    add a,a 
8c7a			;    adc hl,hl 
8c7a			;    djnz Sqr16_Loop 
8c7a			;    ret 
8c7a			; 
8c7a			; 
8c7a			; Divide 8-bit values 
8c7a			; In: Divide E by divider C 
8c7a			; Out: A = result, B = rest 
8c7a			; 
8c7a			Div8: 
8c7a af			    xor a 
8c7b 06 08		    ld b,8 
8c7d			Div8_Loop: 
8c7d cb 13		    rl e 
8c7f 17			    rla 
8c80 91			    sub c 
8c81 30 01		    jr nc,Div8_NoAdd 
8c83 81			    add a,c 
8c84			Div8_NoAdd: 
8c84 10 f7		    djnz Div8_Loop 
8c86 47			    ld b,a 
8c87 7b			    ld a,e 
8c88 17			    rla 
8c89 2f			    cpl 
8c8a c9			    ret 
8c8b			 
8c8b			; 
8c8b			; Multiply 8-bit value with a 16-bit value (unrolled) 
8c8b			; In: Multiply A with DE 
8c8b			; Out: HL = result 
8c8b			; 
8c8b			Mult12U: 
8c8b 2e 00		    ld l,0 
8c8d 87			    add a,a 
8c8e 30 01		    jr nc,Mult12U_NoAdd0 
8c90 19			    add hl,de 
8c91			Mult12U_NoAdd0: 
8c91 29			    add hl,hl 
8c92 87			    add a,a 
8c93 30 01		    jr nc,Mult12U_NoAdd1 
8c95 19			    add hl,de 
8c96			Mult12U_NoAdd1: 
8c96 29			    add hl,hl 
8c97 87			    add a,a 
8c98 30 01		    jr nc,Mult12U_NoAdd2 
8c9a 19			    add hl,de 
8c9b			Mult12U_NoAdd2: 
8c9b 29			    add hl,hl 
8c9c 87			    add a,a 
8c9d 30 01		    jr nc,Mult12U_NoAdd3 
8c9f 19			    add hl,de 
8ca0			Mult12U_NoAdd3: 
8ca0 29			    add hl,hl 
8ca1 87			    add a,a 
8ca2 30 01		    jr nc,Mult12U_NoAdd4 
8ca4 19			    add hl,de 
8ca5			Mult12U_NoAdd4: 
8ca5 29			    add hl,hl 
8ca6 87			    add a,a 
8ca7 30 01		    jr nc,Mult12U_NoAdd5 
8ca9 19			    add hl,de 
8caa			Mult12U_NoAdd5: 
8caa 29			    add hl,hl 
8cab 87			    add a,a 
8cac 30 01		    jr nc,Mult12U_NoAdd6 
8cae 19			    add hl,de 
8caf			Mult12U_NoAdd6: 
8caf 29			    add hl,hl 
8cb0 87			    add a,a 
8cb1 d0			    ret nc 
8cb2 19			    add hl,de 
8cb3 c9			    ret 
8cb4			 
8cb4			; 
8cb4			; Multiply 8-bit value with a 16-bit value (right rotating) 
8cb4			; In: Multiply A with DE 
8cb4			;      Put lowest value in A for most efficient calculation 
8cb4			; Out: HL = result 
8cb4			; 
8cb4			Mult12R: 
8cb4 21 00 00		    ld hl,0 
8cb7			Mult12R_Loop: 
8cb7 cb 3f		    srl a 
8cb9 30 01		    jr nc,Mult12R_NoAdd 
8cbb 19			    add hl,de 
8cbc			Mult12R_NoAdd: 
8cbc cb 23		    sla e 
8cbe cb 12		    rl d 
8cc0 b7			    or a 
8cc1 c2 b7 8c		    jp nz,Mult12R_Loop 
8cc4 c9			    ret 
8cc5			 
8cc5			; 
8cc5			; Multiply 16-bit values (with 32-bit result) 
8cc5			; In: Multiply BC with DE 
8cc5			; Out: BCHL = result 
8cc5			; 
8cc5			Mult32: 
8cc5 79			    ld a,c 
8cc6 48			    ld c,b 
8cc7 21 00 00		    ld hl,0 
8cca 06 10		    ld b,16 
8ccc			Mult32_Loop: 
8ccc 29			    add hl,hl 
8ccd 17			    rla 
8cce cb 11		    rl c 
8cd0 30 07		    jr nc,Mult32_NoAdd 
8cd2 19			    add hl,de 
8cd3 ce 00		    adc a,0 
8cd5 d2 d9 8c		    jp nc,Mult32_NoAdd 
8cd8 0c			    inc c 
8cd9			Mult32_NoAdd: 
8cd9 10 f1		    djnz Mult32_Loop 
8cdb 41			    ld b,c 
8cdc 4f			    ld c,a 
8cdd c9			    ret 
8cde			 
8cde			 
8cde			 
8cde			; 
8cde			; Multiply 8-bit values 
8cde			; In:  Multiply H with E 
8cde			; Out: HL = result 
8cde			; 
8cde			Mult8: 
8cde 16 00		    ld d,0 
8ce0 6a			    ld l,d 
8ce1 06 08		    ld b,8 
8ce3			Mult8_Loop: 
8ce3 29			    add hl,hl 
8ce4 30 01		    jr nc,Mult8_NoAdd 
8ce6 19			    add hl,de 
8ce7			Mult8_NoAdd: 
8ce7 10 fa		    djnz Mult8_Loop 
8ce9 c9			    ret 
8cea			 
8cea			 
8cea			 
8cea			 
8cea			 
8cea			 
8cea			 
8cea			 
8cea			;;http://z80-heaven.wikidot.com/math 
8cea			;;This divides DE by BC, storing the result in DE, remainder in HL 
8cea			; 
8cea			;DE_Div_BC:          ;1281-2x, x is at most 16 
8cea			;     ld a,16        ;7 
8cea			;     ld hl,0        ;10 
8cea			;     jp $+5         ;10 
8cea			;.DivLoop: 
8cea			;       add hl,bc    ;-- 
8cea			;       dec a        ;64 
8cea			;       jr z,.DivLoopEnd        ;86 
8cea			; 
8cea			;       sla e        ;128 
8cea			;       rl d         ;128 
8cea			;       adc hl,hl    ;240 
8cea			;       sbc hl,bc    ;240 
8cea			;       jr nc,.DivLoop ;23|21 
8cea			;       inc e        ;-- 
8cea			;       jp .DivLoop+1 
8cea			; 
8cea			;.DivLoopEnd: 
8cea			 
8cea			;HL_Div_C: 
8cea			;Inputs: 
8cea			;     HL is the numerator 
8cea			;     C is the denominator 
8cea			;Outputs: 
8cea			;     A is the remainder 
8cea			;     B is 0 
8cea			;     C is not changed 
8cea			;     DE is not changed 
8cea			;     HL is the quotient 
8cea			; 
8cea			;       ld b,16 
8cea			;       xor a 
8cea			;         add hl,hl 
8cea			;         rla 
8cea			;         cp c 
8cea			;         jr c,$+4 
8cea			;           inc l 
8cea			;           sub c 
8cea			;         djnz $-7 
8cea			 
8cea			; https://plutiedev.com/z80-add-8bit-to-16bit 
8cea			 
8cea			addatohl: 
8cea 85			    add   a, l    ; A = A+L 
8ceb 6f			    ld    l, a    ; L = A+L 
8cec 8c			    adc   a, h    ; A = A+L+H+carry 
8ced 95			    sub   l       ; A = H+carry 
8cee 67			    ld    h, a    ; H = H+carry 
8cef c9			ret 
8cf0			 
8cf0			addatode: 
8cf0 83			    add   a, e    ; A = A+L 
8cf1 5f			    ld    e, a    ; L = A+L 
8cf2 8a			    adc   a, d    ; A = A+L+H+carry 
8cf3 93			    sub   e       ; A = H+carry 
8cf4 57			    ld    d, a    ; H = H+carry 
8cf5 c9			ret 
8cf6			 
8cf6			 
8cf6			addatobc: 
8cf6 81			    add   a, c    ; A = A+L 
8cf7 4f			    ld    c, a    ; L = A+L 
8cf8 88			    adc   a, b    ; A = A+L+H+carry 
8cf9 91			    sub   c       ; A = H+carry 
8cfa 47			    ld    b, a    ; H = H+carry 
8cfb c9			ret 
8cfc			 
8cfc			subafromhl: 
8cfc			   ; If A=0 do nothing 
8cfc			    ; Otherwise flip A's sign. Since 
8cfc			    ; the upper byte becomes -1, also 
8cfc			    ; substract 1 from H. 
8cfc ed 44		    neg 
8cfe ca 07 8d		    jp    z, Skip 
8d01 25			    dec   h 
8d02			     
8d02			    ; Now add the low byte as usual 
8d02			    ; Two's complement takes care of 
8d02			    ; ensuring the result is correct 
8d02 85			    add   a, l 
8d03 6f			    ld    l, a 
8d04 8c			    adc   a, h 
8d05 95			    sub   l 
8d06 67			    ld    h, a 
8d07			Skip: 
8d07 c9				ret 
8d08			 
8d08			 
8d08			; compare hl and de 
8d08			; returns:  
8d08			; if hl = de, z=1, s=0, c0=0 
8d08			; if hl > de, z=0, s=0, c=0 
8d08			; if hl < de, z=0, s=1, c=1 
8d08			cmp16:	 
8d08 b7				or a 
8d09 ed 52			sbc hl,de 
8d0b e0				ret po 
8d0c 7c				ld a,h 
8d0d 1f				rra 
8d0e ee 40			xor 01000000B 
8d10 37				scf 
8d11 8f				adc a,a 
8d12 c9				ret 
8d13			 
8d13			 
8d13			; test if hl contains zero   - A is destroyed 
8d13			 
8d13			ishlzero:    
8d13 b7				or a     ; reset flags 
8d14 7c				ld a, h 
8d15 b5				or l        	 
8d16			 
8d16 c9				ret 
8d17			 
8d17			 
8d17			 
8d17			 
8d17			if FORTH_ENABLE_FLOATMATH 
8d17			;include "float/bbcmath.z80" 
8d17			include "float/lpfpcalc.asm" 
8d17			endif 
8d17			 
8d17			 
8d17			; eof 
8d17			 
# End of file firmware_maths.asm
8d17			include "firmware_strings.asm"   ; string handling  
8d17			 
8d17			 
8d17			; TODO string len 
8d17			; input text string, end on cr with zero term 
8d17			; a offset into frame buffer to start prompt 
8d17			; d is max length 
8d17			; e is display size TODO 
8d17			; c is current cursor position 
8d17			; hl is ptr to where string will be stored and edited directly 
8d17			 
8d17			 
8d17			; TODO check limit of buffer for new inserts 
8d17			; TODO check insert does not push beyond buffer 
8d17			; TODO scroll in a limited display area 
8d17			; TODO scroll whole screen on page wrap 
8d17			 
8d17			 
8d17			; TODO use LCD cursor? 
8d17			 
8d17			EDIT_V1: equ 0 
8d17			EDIT_V2: equ 1 
8d17			 
8d17			 
8d17			 
8d17			if EDIT_V2 
8d17			input_str: 
8d17			 
8d17 32 5e ee			    	ld (input_at_pos),a      ; save display position to start 
8d1a			;		ld (input_at_cursor),a	; save draw pos of cursor relative to start 
8d1a 22 61 ee				ld (input_start), hl     ; save ptr to buffer 
8d1d			;		ld a, c 
8d1d			;		call addatohl 
8d1d			;		ld (input_ptr), hl     ; save ptr to point under the cursor 
8d1d 7a					ld a,d 
8d1e 32 60 ee			        ld (input_size), a       ; save length of input area 
8d21 79					ld a, c 
8d22 32 4f ee				ld (input_cursor),a      ; init cursor start position relative to start of string 
8d25 7b					ld a,e 
8d26 32 5f ee			        ld (input_display_size), a       ; save length of input area that is displayed TODO 
8d29			 
8d29			 
8d29					; add a trailing space to make screen refresh nicer 
8d29			 
8d29					;ld hl, (input_start) 
8d29					;push hl 
8d29					;ld a, 0 
8d29					;call strlent 
8d29					;ld a, l 
8d29					;pop hl 
8d29					;call addatohl 
8d29					;dec hl 
8d29					;ld a, ' ' 
8d29					;ld (hl), a 
8d29					;inc hl 
8d29					;ld (hl), a 
8d29					;inc hl 
8d29					;ld a, 0 
8d29					;ld (hl), a 
8d29			 
8d29			; TODO move out to cin as cursor shape is used by the 4x4 ??? 
8d29					; init cursor shape if not set by the cin routines 
8d29 21 bb eb				ld hl, cursor_shape 
8d2c			if BASE_KEV 
8d2c					ld a, 255 
8d2c			else 
8d2c 3e 23				ld a, '#' 
8d2e			endif 
8d2e 77					ld (hl), a 
8d2f 23					inc hl 
8d30 3e 00				ld a, 0 
8d32 77					ld (hl), a 
8d33			 
8d33 3e 09				ld a, CUR_BLINK_RATE 
8d35 32 5a ee				ld (input_cur_flash), a 
8d38 3e 01				ld a, 1 
8d3a 32 59 ee				ld (input_cur_onoff),a 
8d3d			.inmain:	 
8d3d			 
8d3d cd 65 8e				call input_disp_ref 
8d40			 
8d40					; save current length of string 
8d40			 
8d40 2a 61 ee				ld hl, (input_start) 
8d43 3e 00				ld a, 0 
8d45 cd 5b 90				call strlent 
8d48 7d					ld a,l 
8d49 32 54 ee				ld (input_len), a 
8d4c			 
8d4c					;call input_disp_oncur 
8d4c			 
8d4c					; display current state of input buffer 
8d4c			 
8d4c					; clean any backspace chars 
8d4c			 
8d4c 3e 20				ld a, " " 
8d4e 32 bb e2				ld (scratch),a 
8d51 3e 00				ld a, 0 
8d53 32 bc e2				ld (scratch+1),a 
8d56 3a 5e ee				ld a,(input_at_pos) 
8d59 85					add l 
8d5a 11 bb e2				ld de, scratch 
8d5d cd d0 8a				call str_at_display 
8d60			 
8d60					; pause 1ms 
8d60			 
8d60 3e 01				ld a, 1 
8d62 cd e5 89				call aDelayInMS 
8d65			 
8d65			; display cursor if visible on this cycle 
8d65			 
8d65					; dec flash counter 
8d65 3a 5a ee				ld a, (input_cur_flash) 
8d68 3d					dec a 
8d69 32 5a ee				ld (input_cur_flash), a 
8d6c fe 00				cp 0 
8d6e 20 0d				jr nz, .inochgstate 
8d70			 
8d70			 
8d70					; reset on change of state 
8d70 3e 09				ld a, CUR_BLINK_RATE 
8d72 32 5a ee				ld (input_cur_flash), a 
8d75			 
8d75					; change state 
8d75 3a 59 ee				ld a,(input_cur_onoff) 
8d78 ed 44				neg 
8d7a 32 59 ee				ld (input_cur_onoff),a 
8d7d			 
8d7d			 
8d7d			 
8d7d			 
8d7d					; TODO is cursor visible? 
8d7d					; TODO if so then over write the char at curspos pos with the cursor shape 
8d7d			 
8d7d								 
8d7d			 
8d7d			.inochgstate: 
8d7d 3a 59 ee				ld a,(input_cur_onoff) 
8d80 fe ff				cp 255 
8d82 28 0e				jr z, .skipcursor 
8d84 3a 5e ee				ld a, (input_at_pos) 
8d87 47					ld b, a 
8d88 3a 4f ee				ld a, (input_cursor) 
8d8b 80					add b 
8d8c 11 bb eb				ld de, cursor_shape 
8d8f					 
8d8f cd d0 8a				call str_at_display 
8d92			 
8d92			.skipcursor: 
8d92				if DEBUG_INPUTV2 
8d92			 
8d92					ld a,(input_at_pos) 
8d92					ld hl, LFSRSeed 
8d92					call hexout 
8d92					ld a, (input_cursor) 
8d92					ld hl, LFSRSeed+2 
8d92					call hexout 
8d92					ld a,(input_size) 
8d92					ld hl, LFSRSeed+4 
8d92					call hexout 
8d92			 
8d92					ld a,(input_cur_onoff) 
8d92					ld hl, LFSRSeed+6 
8d92					call hexout 
8d92			 
8d92					ld a,(input_cur_flash) 
8d92					ld hl, LFSRSeed+8 
8d92					call hexout 
8d92			 
8d92					ld a,(input_len) 
8d92					ld hl, LFSRSeed+10 
8d92					call hexout 
8d92					ld hl, LFSRSeed+12 
8d92					ld a, 0 
8d92					ld (hl),a 
8d92					ld a, display_row_4 
8d92					ld de, LFSRSeed 
8d92					call str_at_display 
8d92				endif 
8d92 cd e0 8a				call update_display 
8d95			 
8d95					; TODO keyboard processing 
8d95			 
8d95			if BASE_CPM 
8d95					call cin_wait 
8d95			else 
8d95 cd e2 df				call cin    ; _wait 
8d98			endif 
8d98 fe 00				cp 0 
8d9a ca 3d 8d				jp z, .inmain 
8d9d			 
8d9d fe 0b				cp KEY_LEFT    ; cursor left 
8d9f ca 57 8e				jp z, input_left 
8da2				 
8da2 fe 0c				cp KEY_RIGHT      ; cursor right 
8da4 ca 5e 8e				jp z, input_right 
8da7			 
8da7 fe 0d				cp KEY_CR 
8da9 c8					ret z 
8daa			 
8daa fe 08				cp KEY_BS 
8dac ca cc 8e				jp z, input_delchar 
8daf			 
8daf fe 06				cp KEY_NEXTWORD 
8db1 ca d8 8d				jp z, input_nxtword 
8db4			 
8db4 fe 07				cp KEY_PREVWORD 
8db6 ca ff 8d				jp z, input_prvword 
8db9			 
8db9 fe 0e				cp KEY_HOME    ; jump to start of line 
8dbb 20 08				jr nz, .ikh 
8dbd 3e 00				ld a, 0 
8dbf 32 4f ee				ld (input_cursor), a 
8dc2 ca 3d 8d				jp z, .inmain 
8dc5			.ikh: 
8dc5			 
8dc5 fe 0f				cp KEY_END     ; jump to end of line 
8dc7 20 09				jr nz, .ike 
8dc9 3a 54 ee				ld a, (input_len) 
8dcc 32 4f ee				ld (input_cursor),a 
8dcf ca 3d 8d				jp z, .inmain 
8dd2			.ike: 
8dd2 fe 05			        cp KEY_UP      ; recall last command 
8dd4 c8					ret z 
8dd5			;jr nz, .irec 
8dd5			; TODO next word 
8dd5			; TODO prev word 
8dd5			;  
8dd5			; 
8dd5			;	ld hl, scratch 
8dd5			;	ld de, os_last_cmd 
8dd5			;	call strcpy 
8dd5			;		jp  .inmain 
8dd5			.irec: 
8dd5			;		jr .instr1 
8dd5			 
8dd5			 
8dd5			 
8dd5					; if any keys not intercepted by above but are special keys like function keys then return them to the program 
8dd5			 
8dd5			; TODO return if any special keys are given 
8dd5			;		ld l, a 
8dd5			;		ld a, 28 ; KEY_F12   ; 27 
8dd5			;		sub l 
8dd5			;		ret m 
8dd5			;		ld a, l 
8dd5					; if no special key then insert as a char 
8dd5			 
8dd5 c3 9e 8e				jp input_inschr 
8dd8			 
8dd8				 
8dd8			input_nxtword: 
8dd8				; jump to start next word after the cursor 
8dd8			 
8dd8			.insknwn:	 
8dd8 cd 94 8e				call input_curptr	 
8ddb 7e					ld a,(hl)	 
8ddc fe 00				cp 0 
8dde ca 3d 8d				jp z, .inmain    ; end of string 
8de1			 
8de1			; if we are on a word, then move off of it 
8de1			 
8de1 fe 20				cp ' ' 
8de3 28 06				jr z, .inspace     ; we are on space so eat the space until we hit non-space 
8de5 21 4f ee				ld hl, input_cursor 
8de8 34					inc (hl) 
8de9 18 ed				jr .insknwn 
8deb			 
8deb			.inspace: 
8deb			 
8deb cd 94 8e				call input_curptr	 
8dee 7e					ld a,(hl)	 
8def fe 00				cp 0 
8df1 ca 3d 8d				jp z, .inmain    ; end of string 
8df4			 
8df4			; if we are on a word, then move off of it 
8df4			 
8df4 fe 20				cp ' ' 
8df6 c2 3d 8d				jp nz, .inmain     ; we are on non space so at next word 
8df9 21 4f ee				ld hl, input_cursor 
8dfc 34					inc (hl) 
8dfd 18 ec				jr .inspace 
8dff			 
8dff			 
8dff			 
8dff			 
8dff			input_prvword: 
8dff				; jump to the start of previous word before the cursor 
8dff			 
8dff			; where are we to start with currently? 
8dff			 
8dff cd 94 8e				call input_curptr	 
8e02 7e					ld a, (hl) 
8e03 fe 20				cp ' ' 
8e05 28 1d				jr z, .inspacep     ; we are on space so eat the space until we hit non-space 
8e07			 
8e07			 
8e07			 
8e07			.inskpwn:	 
8e07 3a 4f ee				ld a,(input_cursor) 
8e0a fe 00				cp 0 
8e0c ca 3d 8d				jp z, .inmain    ; start of string 
8e0f			 
8e0f			;if we are on a word, then move off of it 
8e0f			 
8e0f cd 94 8e				call input_curptr	 
8e12 7e					ld a, (hl) 
8e13 fe 20				cp ' ' 
8e15 28 06				jr z, .iwstart     ; we are on space so eat the space until we hit non-space 
8e17					;jp z, .inmain    ; start of string 
8e17 21 4f ee				ld hl, input_cursor 
8e1a 35					dec (hl) 
8e1b 18 ea				jr .inskpwn 
8e1d			.iwstart: 
8e1d 21 4f ee				ld hl, input_cursor 
8e20 34					inc (hl) 
8e21 c3 3d 8d				jp .inmain 
8e24					 
8e24			 
8e24			.inspacep: 
8e24			 
8e24					;jp .inmain    ; start of string 
8e24			 
8e24			 
8e24			 
8e24 3a 4f ee				ld a,(input_cursor) 
8e27 fe 00				cp 0 
8e29 ca 3d 8d				jp z, .inmain    ; start of string 
8e2c			 
8e2c			; if we are on a word, then move off of it 
8e2c			 
8e2c cd 94 8e				call input_curptr	 
8e2f 7e					ld a, (hl) 
8e30 fe 20				cp ' ' 
8e32 c2 3b 8e				jp nz, .incharp     ; we are on non space so at end of prev word 
8e35 21 4f ee				ld hl, input_cursor 
8e38 35					dec (hl) 
8e39 18 e9				jr .inspacep 
8e3b			 
8e3b			 
8e3b			.incharp:	 
8e3b					; eat the word to get to the start 
8e3b 3a 4f ee				ld a,(input_cursor) 
8e3e fe 00				cp 0 
8e40 ca 3d 8d				jp z, .inmain    ; start of string 
8e43			 
8e43			; if we are on a word, then move off of it 
8e43			 
8e43 cd 94 8e				call input_curptr	 
8e46 7e					ld a, (hl) 
8e47 fe 20				cp ' ' 
8e49 28 06				jr z, .ipwordst     ; we are on space so eat the space until we hit non-space 
8e4b 21 4f ee				ld hl, input_cursor 
8e4e 35					dec (hl) 
8e4f 18 ea				jr .incharp 
8e51			.ipwordst: 
8e51					; at space before the prev word so reposition over it 
8e51 21 4f ee				ld hl, input_cursor 
8e54 34					inc (hl) 
8e55 18 b0				jr .inskpwn 
8e57					 
8e57			 
8e57			 
8e57			input_left: 
8e57				; move cursor left 
8e57 21 4f ee			ld hl, input_cursor 
8e5a 35				dec (hl) 
8e5b			;	cp 0 
8e5b			;	jp z, .inmain    ; ignore left as at the start of the string 
8e5b c3 3d 8d			jp .inmain 
8e5e			 
8e5e			input_right: 
8e5e				; move cursor right 
8e5e				 
8e5e				;ld a, (input_size) 
8e5e				;ld b, a 
8e5e 21 4f ee			ld hl, input_cursor 
8e61 34				inc (hl) 
8e62				;dec b 
8e62				;cp 0 
8e62				;jp z, .inmain   ; ignore as at end of the string buffer 
8e62				;ld a, b 
8e62				;inc a 
8e62				;ld (input_cursor), a 
8e62 c3 3d 8d			jp .inmain 
8e65			 
8e65			 
8e65			 
8e65			input_disp_ref: 
8e65				; display the text from start of buffer (ie full refresh) 
8e65 3a 5e ee			ld a, (input_at_pos) 
8e68 2a 61 ee			ld hl,(input_start) 
8e6b eb				ex de, hl 
8e6c cd d0 8a			call str_at_display  
8e6f c9				ret 
8e70			input_disp_oncur: 
8e70				; display the text from cursor position to end of buffer 
8e70				; TODO position start of string at cursor position on screen 
8e70				; TODO draw from that point on 
8e70 3a 4f ee			ld a, (input_cursor) 
8e73 47				ld b, a 
8e74 3a 5e ee			ld a, (input_at_pos) 
8e77 80				add b 
8e78 48				ld c, b     ; save a 
8e79 78				ld a, b     ; inc string start for cursor 
8e7a 2a 61 ee			ld hl,(input_start) 
8e7d cd ea 8c			call addatohl 
8e80 eb				ex de, hl 
8e81 79				ld a, c 
8e82 cd d0 8a			call str_at_display  
8e85 c9				ret 
8e86			 
8e86			input_nxtw: 
8e86				; Find next word 
8e86 c9				ret 
8e87			 
8e87			input_prvw: 
8e87				; Find previous word 
8e87 c9				ret 
8e88			 
8e88			input_lenrem:   
8e88				; Calculate the length of string remaining from current cursor 
8e88				; position to end of buffer (exc null term) 
8e88				 
8e88 3a 4f ee			ld a, (input_cursor) 
8e8b 4f				ld c, a 
8e8c 3a 60 ee			ld a, (input_size) 
8e8f 91				sub c 
8e90 06 00			ld b, 0 
8e92 0d				dec c 
8e93 c9				ret	 
8e94			 
8e94			input_curptr: 
8e94				; calc address of the character under the cursor 
8e94				 
8e94 2a 61 ee			ld hl, (input_start) 
8e97 3a 4f ee			ld a, (input_cursor) 
8e9a cd ea 8c			call addatohl 
8e9d c9				ret 
8e9e			 
8e9e			input_inschr: 
8e9e				; Insert char at cursor position 
8e9e f5				push af   ; save char 
8e9f				;call input_lenrem    ; get bc length of remaining string 
8e9f			 
8e9f				 
8e9f cd 94 8e			call input_curptr 
8ea2			;	ld hl, (input_start) 
8ea2			;	ld a, (input_cursor) 
8ea2			;	call addatohl 
8ea2				;push hl   ; save to come back to 
8ea2			 
8ea2				; shift everything up one to end of buffer 
8ea2			 
8ea2				;push hl 
8ea2				;dec de 
8ea2				;inc de 
8ea2			;	ldir 
8ea2				 
8ea2				;pop hl 
8ea2			 
8ea2				; are we adding to the end of line? 
8ea2			 
8ea2 3a 4f ee			ld a, (input_cursor) 
8ea5 47				ld b, a 
8ea6 3a 54 ee			ld a, (input_len) 
8ea9 b8				cp b 
8eaa 20 09			jr nz, .insmid   ; no, insert in middle of text 
8eac			 
8eac				; tack on the end of the line 
8eac f1				pop af 
8ead 77				ld (hl), a   ; save new char 
8eae 23				inc hl 
8eaf 3e 00			ld a, 0 
8eb1 77				ld (hl), a 
8eb2 c3 5e 8e			jp input_right 
8eb5				 
8eb5			.insmid: 
8eb5				; hl has insertion point so move everything up one to allow for insertion 
8eb5				;call input_shiftright 
8eb5 f1				pop af 
8eb6			 
8eb6			.shufinsmid: 
8eb6 47				ld b, a     ; b contains new char, c prev char at this position  
8eb7 7e				ld a, (hl) 
8eb8			 
8eb8 fe 00			cp 0    ; at end of string need to then dump new char and add term 
8eba 28 07			jr z, .endinsmid 
8ebc 4f				ld c, a 
8ebd 78				ld a, b 
8ebe 77				ld (hl), a 
8ebf 23				inc hl 
8ec0 79				ld a, c 
8ec1 18 f3			jr .shufinsmid 
8ec3				 
8ec3			 
8ec3			 
8ec3			 
8ec3			.endinsmid: 
8ec3 78				ld a, b 
8ec4 77				ld (hl), a 
8ec5 23				inc hl 
8ec6 3e 00			ld a, 0 
8ec8 77				ld (hl), a 
8ec9			 
8ec9			 
8ec9			;	ld (hl), a   ; save new char 
8ec9			 
8ec9 c3 5e 8e			jp input_right 
8ecc			 
8ecc			;input_shiftright: 
8ecc			;	; shift text right at cursor, hl has shift start 
8ecc			;	push hl 
8ecc			;	push de 
8ecc			;	push bc 
8ecc			; 
8ecc			; 
8ecc			;	; move to end of string past zero term 
8ecc			;	ld hl,(input_start) 
8ecc			;	ld a, (input_len) 
8ecc			;	call addatohl 
8ecc			;	inc hl 
8ecc			;;	inc hl 
8ecc			;;	inc hl 
8ecc			;	ld a, 0 
8ecc			;	ld (hl), a 
8ecc			;;	dec hl 
8ecc			;	 
8ecc			;;	ld (hl), a 
8ecc			;;	dec hl 
8ecc			; 
8ecc			;	push hl 
8ecc			;	pop de 
8ecc			;	inc de 
8ecc			;	 
8ecc			; 
8ecc			;;	ld hl,(input_start) 
8ecc			;;	ld a, (input_cursor) 
8ecc			;;	call addatohl 
8ecc			; 
8ecc			; 
8ecc			;	; calc how many bytes from cursor pos to end of string we need to shift 
8ecc			;	call input_lenrem    ; get bc length of remaining string 
8ecc			;	;ld a, (input_cursor) 
8ecc			;	;ld c, a 
8ecc			;	ld a, (input_len) 
8ecc			;	cp 2 
8ecc			;	jr z, .iskipzero	 
8ecc			;	;sub c 
8ecc			;	;inc a 
8ecc			;	;ld c, a 
8ecc			;	;ld b, 0 
8ecc			;	inc c 
8ecc			;	inc c 
8ecc			;	; move data 
8ecc			;	lddr 
8ecc			;.iskipzero: 
8ecc			; 
8ecc			;	pop bc 
8ecc			;	pop de 
8ecc			;	pop hl 
8ecc			;	ret	 
8ecc			 
8ecc			input_delchar: 
8ecc				; Delete char at cursor position 
8ecc cd 88 8e			call input_lenrem    ; get bc length of remaining string 
8ecf 2a 61 ee			ld hl, (input_start) 
8ed2 3a 4f ee			ld a, (input_cursor) 
8ed5 cd ea 8c			call addatohl 
8ed8			 
8ed8 e5				push hl 
8ed9 d1				pop de 
8eda 1b				dec de 
8edb			 
8edb			.dl:	 
8edb ed a0			ldi  
8edd 7e				ld a, (hl) 
8ede fe 00			cp 0 
8ee0 28 02			jr z, .dldone 
8ee2 18 f7			jr .dl 
8ee4			.dldone: 
8ee4 ed a0			ldi 
8ee6			 
8ee6 c3 57 8e			jp input_left 
8ee9			 
8ee9			 
8ee9			endif 
8ee9			 
8ee9			 
8ee9			 
8ee9			if EDIT_V1 
8ee9			input_str: 
8ee9			 
8ee9				    	ld (input_at_pos),a      ; save display position to start 
8ee9					add c 
8ee9					ld (input_at_cursor),a	; save draw pos of cursor 
8ee9					ld (input_start), hl     ; save ptr to buffer 
8ee9					ld a, c 
8ee9					call addatohl 
8ee9					ld (input_ptr), hl     ; save ptr to point under the cursor 
8ee9					ld a,d 
8ee9				        ld (input_size), a       ; save length of input area 
8ee9					ld a, c 
8ee9					ld (input_cursor),a      ; init cursor start position  
8ee9					ld a,e 
8ee9				        ld (input_display_size), a       ; save length of input area that is displayed TODO 
8ee9					 
8ee9					 
8ee9			 
8ee9			;		ld a,(input_ptr) 
8ee9			;		ld (input_under_cursor),a 	; save what is under the cursor 
8ee9			 
8ee9			; TODO move out to cin as cursor shape is used by the 4x4 ??? 
8ee9					; init cursor shape if not set by the cin routines 
8ee9					ld hl, cursor_shape 
8ee9			if BASE_KEV 
8ee9					ld a, 255 
8ee9			else 
8ee9					ld a, '#' 
8ee9			endif 
8ee9					ld (hl), a 
8ee9					inc hl 
8ee9					ld a, 0 
8ee9					ld (hl), a 
8ee9			 
8ee9					ld a, CUR_BLINK_RATE 
8ee9					ld (input_cur_flash), a 
8ee9					ld a, 1 
8ee9					ld (input_cur_onoff),a 
8ee9			 
8ee9			;	if DEBUG_INPUT 
8ee9			;		push af 
8ee9			;		ld a, 'I' 
8ee9			;		ld (debug_mark),a 
8ee9			;		pop af 
8ee9			;		CALLMONITOR 
8ee9			;	endif 
8ee9			.is1:		; main entry loop 
8ee9			 
8ee9			 
8ee9			 
8ee9					; pause 1ms 
8ee9			 
8ee9					ld a, 1 
8ee9					call aDelayInMS 
8ee9			 
8ee9					; dec flash counter 
8ee9					ld a, (input_cur_flash) 
8ee9					dec a 
8ee9					ld (input_cur_flash), a 
8ee9					cp 0 
8ee9					jr nz, .nochgstate 
8ee9			 
8ee9			 
8ee9					; change state 
8ee9					ld a,(input_cur_onoff) 
8ee9					neg 
8ee9					ld (input_cur_onoff),a 
8ee9			 
8ee9			 
8ee9					; reset on change of state 
8ee9					ld a, CUR_BLINK_RATE 
8ee9					ld (input_cur_flash), a 
8ee9			 
8ee9			.nochgstate: 
8ee9					 
8ee9					 
8ee9			 
8ee9					; display cursor  
8ee9			 
8ee9			;		ld hl, (input_start) 
8ee9			;		ld a, (input_cursor) 
8ee9			;		call addatohl 
8ee9			 
8ee9					; get char under cursor and replace with cursor 
8ee9			ld hl, (input_ptr) 
8ee9			;		ld a, (hl) 
8ee9			;		ld (input_under_cursor),a 
8ee9			;		ld a, '_' 
8ee9			;		ld (hl), a 
8ee9			 
8ee9					; display string 
8ee9			 
8ee9					ld de, (input_start) 
8ee9					ld a, (input_at_pos) 
8ee9					call str_at_display 
8ee9			;	        call update_display 
8ee9			 
8ee9					; find place to put the cursor 
8ee9			;		add h 
8ee9			;		ld l, display_row_1 
8ee9			;		sub l 
8ee9			; (input_at_pos) 
8ee9					;ld c, a 
8ee9			;		ld a, (input_cursor) 
8ee9			;		ld l, (input_at_pos) 
8ee9			;		;ld b, h 
8ee9			;		add l 
8ee9			;		ld (input_at_cursor),a 
8ee9					;ld l,h 
8ee9			 
8ee9			;		ld h, 0 
8ee9			;		ld l,(input_at_pos) 
8ee9			;		ld a, (input_cursor) 
8ee9			;		call addatohl 
8ee9			;		ld a, 074H-19			; TODO BUG I dont know why offset is showing 74H 
8ee9			;		call subafromhl 
8ee9			;		ld a,l 
8ee9			;		ld (input_at_cursor), a 
8ee9			 
8ee9				if DEBUG_INPUT 
8ee9					ld a, (hardware_diag) 
8ee9					cp 0 
8ee9					jr z, .skip_input_diag 
8ee9			 
8ee9					ld a,(input_at_pos) 
8ee9					ld hl, LFSRSeed 
8ee9					call hexout 
8ee9					ld a, (input_cursor) 
8ee9					ld hl, LFSRSeed+2 
8ee9					call hexout 
8ee9					ld a,(input_at_cursor) 
8ee9					ld hl, LFSRSeed+4 
8ee9					call hexout 
8ee9			 
8ee9					ld a,(input_cur_onoff) 
8ee9					ld hl, LFSRSeed+6 
8ee9					call hexout 
8ee9			 
8ee9					ld a,(input_cur_flash) 
8ee9					ld hl, LFSRSeed+8 
8ee9					call hexout 
8ee9			 
8ee9					ld a,(input_len) 
8ee9					ld hl, LFSRSeed+10 
8ee9					call hexout 
8ee9					ld hl, LFSRSeed+12 
8ee9					ld a, 0 
8ee9					ld (hl),a 
8ee9					ld a, display_row_4 
8ee9					ld de, LFSRSeed 
8ee9					call str_at_display 
8ee9					.skip_input_diag: 
8ee9				endif 
8ee9			 
8ee9					; decide on if we are showing the cursor this time round 
8ee9			 
8ee9					ld a, (input_cur_onoff) 
8ee9					cp 255 
8ee9					jr z, .skipcur 
8ee9			 
8ee9			 
8ee9					ld a,(input_at_cursor) 
8ee9					ld de, cursor_shape 
8ee9					call str_at_display 
8ee9			 
8ee9					; save length of current input string 
8ee9					ld hl, (input_start) 
8ee9					ld a, 0 
8ee9					call strlent 
8ee9					ld a,l 
8ee9					ld (input_len),a 
8ee9			 
8ee9			.skipcur: 
8ee9			 
8ee9				        call update_display 
8ee9					 
8ee9			 
8ee9			 
8ee9					; wait 
8ee9				 
8ee9					; TODO loop without wait to flash the cursor and char under cursor	 
8ee9					call cin    ; _wait 
8ee9			 
8ee9					cp 0 
8ee9					jp z, .is1 
8ee9			 
8ee9					; get ptr to char to input into 
8ee9			 
8ee9					ld c,a 
8ee9					ld hl, (input_start) 
8ee9					ld a, (input_cursor) 
8ee9					call addatohl 
8ee9					ld (input_ptr), hl 
8ee9					ld a,c 
8ee9			 
8ee9					; replace char under cursor 
8ee9			 
8ee9			;		ld hl, (input_ptr) 
8ee9			;		ld a, (input_under_cursor) 	; get what is under the cursor 
8ee9			;		ld (hl), a 
8ee9			 
8ee9			;	if DEBUG_INPUT 
8ee9			;		push af 
8ee9			;		ld a, 'i' 
8ee9			;		ld (debug_mark),a 
8ee9			;		pop af 
8ee9			;		CALLMONITOR 
8ee9			;	endif 
8ee9					cp KEY_HOME 
8ee9					jr nz, .iske 
8ee9			 
8ee9					ld a, (input_at_pos) 
8ee9					ld (input_at_cursor),a 
8ee9					ld a, 0 
8ee9					ld (input_cursor), a 
8ee9					jp .is1 
8ee9					 
8ee9			.iske:		cp KEY_END 
8ee9					jr nz, .isknw 
8ee9					jp .is1 
8ee9			 
8ee9			.isknw:		cp KEY_NEXTWORD 
8ee9					jr nz, .iskpw 
8ee9			 
8ee9			.isknwm:	ld hl, (input_ptr) 
8ee9					ld a,(hl)	 
8ee9					cp 0 
8ee9					jp z, .is1    ; end of string 
8ee9					cp ' ' 
8ee9					jp z, .is1    ; end of word 
8ee9					inc hl 
8ee9					ld (input_ptr), hl 
8ee9					ld a, (input_at_cursor) 
8ee9					inc a 
8ee9					ld (input_at_cursor), a 
8ee9					jr .isknwm 
8ee9			 
8ee9			.iskpw:		cp KEY_PREVWORD 
8ee9					jr nz, .iskl 
8ee9			.iskpwm:	 
8ee9					ld hl, (input_ptr) 
8ee9					ld a,(hl)	 
8ee9					cp 0  
8ee9					jp z, .is1    ; end of string 
8ee9					cp ' ' 
8ee9					jp z, .is1    ; end of word 
8ee9					dec hl 
8ee9					ld (input_ptr), hl 
8ee9					ld a, (input_at_cursor) 
8ee9					dec a 
8ee9					ld (input_at_cursor), a 
8ee9					jr .iskpwm 
8ee9			 
8ee9			 
8ee9			.iskl:		cp KEY_LEFT 
8ee9					jr nz, .isk1 
8ee9			 
8ee9					ld a, (input_cursor) 
8ee9			 
8ee9					cp 0 
8ee9					jp z, .is1 		; at start of line to ignore  
8ee9			 
8ee9					dec  a 		; TODO check underflow 
8ee9					ld (input_cursor), a 
8ee9			 
8ee9					ld hl, (input_ptr) 
8ee9					dec hl 
8ee9					ld (input_ptr), hl 
8ee9					 
8ee9					ld a, (input_at_cursor) 
8ee9					dec a 
8ee9					ld (input_at_cursor), a 
8ee9			 
8ee9					ld a, 1		; show cursor moving 
8ee9					ld (input_cur_onoff),a 
8ee9					ld a, CUR_BLINK_RATE 
8ee9					ld (input_cur_flash), a 
8ee9			 
8ee9					jp .is1 
8ee9			 
8ee9			.isk1:		cp KEY_RIGHT 
8ee9					jr nz, .isk2 
8ee9			 
8ee9					ld a,(input_len)		; TODO BUG why cant i load e direct? 
8ee9					ld e,a 
8ee9					ld a, (input_cursor) 
8ee9					cp e 
8ee9					jp z, .is1		; at the end of string so dont go right 
8ee9			 
8ee9					inc  a 		; TODO check overflow 
8ee9					ld (input_cursor), a 
8ee9			 
8ee9					ld a, (input_at_cursor) 
8ee9					inc a 
8ee9					ld (input_at_cursor), a 
8ee9			 
8ee9					ld hl, (input_ptr) 
8ee9					inc hl 
8ee9					ld (input_ptr), hl 
8ee9			 
8ee9					ld a, 1		; show cursor moving 
8ee9					ld (input_cur_onoff),a 
8ee9					ld a, CUR_BLINK_RATE 
8ee9					ld (input_cur_flash), a 
8ee9			 
8ee9					jp .is1 
8ee9			 
8ee9			.isk2:		cp KEY_UP 
8ee9			 
8ee9					jr nz, .isk3 
8ee9			 
8ee9					; swap last command with the current on 
8ee9			 
8ee9					; move cursor to start of string 
8ee9					ld hl, (input_start) 
8ee9					ld (input_ptr), hl 
8ee9			 
8ee9					ld a, (input_at_pos) 
8ee9					ld (input_at_cursor), a 
8ee9			 
8ee9					ld a, 0 
8ee9					ld (input_cursor), a 
8ee9					 
8ee9					; swap input and last command buffers 
8ee9			 
8ee9					ld hl, os_cli_cmd 
8ee9					ld de, os_last_cmd 
8ee9					ld b, 255 
8ee9			.swap1:		ld a, (hl) 
8ee9					ld c,a 
8ee9					ld a, (de) 
8ee9					ld (hl), a 
8ee9					ld a,c 
8ee9					ld (de),a 
8ee9					inc hl 
8ee9					inc de 
8ee9					djnz .swap1 
8ee9			 
8ee9			 
8ee9			 
8ee9			 
8ee9			 
8ee9					jp .is1 
8ee9			 
8ee9			.isk3:		cp KEY_BS 
8ee9					jr nz, .isk4 
8ee9			 
8ee9					ld a, (input_cursor) 
8ee9			 
8ee9					cp 0 
8ee9					jp z, .is1 		; at start of line to ignore  
8ee9			 
8ee9					dec  a 		; TODO check underflow 
8ee9					ld (input_cursor), a 
8ee9			 
8ee9					; hl is source 
8ee9					; de needs to be source - 1 
8ee9			 
8ee9			;		ld a, 0 
8ee9			;		dec hl 
8ee9			;		ld (hl), a 
8ee9			 
8ee9					ld hl, (input_ptr) 
8ee9					dec hl 
8ee9					ld (input_ptr), hl 
8ee9			 
8ee9					; shift all data 
8ee9			 
8ee9					push hl 
8ee9					inc hl 
8ee9					pop de 
8ee9					ld a, (input_len)		; TODO BUG WAS ld c, (input... 
8ee9					ld c,a 
8ee9					ld b,0 
8ee9					ldir  
8ee9			 
8ee9			 
8ee9			 
8ee9			 
8ee9					ld a, (input_at_cursor) 
8ee9					dec a 
8ee9					ld (input_at_cursor), a 
8ee9			 
8ee9			 
8ee9					ld a, 1		; show cursor moving 
8ee9					ld (input_cur_onoff),a 
8ee9					ld a, CUR_BLINK_RATE 
8ee9					ld (input_cur_flash), a 
8ee9			 
8ee9					; remove char 
8ee9					ld a, (input_at_cursor) 
8ee9					inc a 
8ee9					ld de,.iblank 
8ee9					call str_at_display 
8ee9			 
8ee9					jp .is1 
8ee9			 
8ee9			.isk4:		cp KEY_CR 
8ee9					jr z, .endinput 
8ee9			 
8ee9					; else add the key press to the end 
8ee9			 
8ee9					ld c, a			; save key pressed 
8ee9			 
8ee9					ld a,(hl)		; get what is currently under char 
8ee9			 
8ee9					cp 0			; we are at the end of the string 
8ee9					jr nz, .onchar 
8ee9					 
8ee9					; add a char to the end of the string 
8ee9				 
8ee9					ld (hl),c 
8ee9					inc hl 
8ee9			;		ld a,' ' 
8ee9			;		ld (hl),a 
8ee9			;		inc hl 
8ee9					ld a,0 
8ee9					ld (hl),a 
8ee9					dec hl 
8ee9			 
8ee9					ld a, (input_cursor) 
8ee9					inc a				; TODO check max string length and scroll  
8ee9					ld (input_cursor), a		; inc cursor pos 
8ee9							 
8ee9					ld a, (input_at_cursor) 
8ee9					inc a 
8ee9					ld (input_at_cursor), a 
8ee9			 
8ee9					ld hl, (input_ptr) 
8ee9					inc hl 
8ee9					ld (input_ptr), hl 
8ee9			 
8ee9					ld hl, (input_ptr) 
8ee9					inc hl 
8ee9					ld (input_ptr), hl 
8ee9			;	if DEBUG_INPUT 
8ee9			;		push af 
8ee9			;		ld a, '+' 
8ee9			;		ld (debug_mark),a 
8ee9			;		pop af 
8ee9			;		CALLMONITOR 
8ee9			;	endif 
8ee9					ld a, 1		; show cursor moving 
8ee9					ld (input_cur_onoff),a 
8ee9					ld a, CUR_BLINK_RATE 
8ee9					ld (input_cur_flash), a 
8ee9					jp .is1 
8ee9					 
8ee9			 
8ee9			 
8ee9					; if on a char then insert 
8ee9			.onchar: 
8ee9			 
8ee9					; TODO over flow check: make sure insert does not blow out buffer 
8ee9			 
8ee9					; need to do some maths to use lddr 
8ee9			 
8ee9					push hl   ; save char pos 
8ee9					push bc 
8ee9			 
8ee9					ld hl, (input_start) 
8ee9					ld a, (input_len) 
8ee9					call addatohl  		; end of string 
8ee9					inc hl 
8ee9					inc hl		; past zero term 
8ee9					push hl 
8ee9					inc hl 
8ee9					push hl  
8ee9			 
8ee9								; start and end of lddr set, now how much to move? 
8ee9			 
8ee9							 
8ee9					ld a, (input_cursor)		; BUG TODO why cant i load directly into b??? 
8ee9					ld b,a 
8ee9					ld a,(input_len) 
8ee9					ld e,a 
8ee9					sub b 
8ee9					inc a		;?? 
8ee9					inc a		;?? 
8ee9					inc a		;?? 
8ee9			 
8ee9					ld b,0 
8ee9					ld c,a 
8ee9			 
8ee9				if DEBUG_INPUT 
8ee9					push af 
8ee9					ld a, 'i' 
8ee9					ld (debug_mark),a 
8ee9					pop af 
8ee9			;		CALLMONITOR 
8ee9				endif 
8ee9					pop de 
8ee9					pop hl 
8ee9				if DEBUG_INPUT 
8ee9					push af 
8ee9					ld a, 'I' 
8ee9					ld (debug_mark),a 
8ee9					pop af 
8ee9			;		CALLMONITOR 
8ee9				endif 
8ee9					lddr 
8ee9				 
8ee9			 
8ee9			 
8ee9					; TODO have a key for insert/overwrite mode???? 
8ee9					pop bc 
8ee9					pop hl 
8ee9					ld (hl), c		; otherwise overwrite current char 
8ee9					 
8ee9			 
8ee9			 
8ee9			 
8ee9					ld a, (input_cursor) 
8ee9					inc  a 		; TODO check overflow 
8ee9					ld (input_cursor), a 
8ee9			 
8ee9					ld a, (input_at_cursor) 
8ee9					inc a 
8ee9					ld (input_at_cursor), a 
8ee9			 
8ee9					jp .is1 
8ee9			 
8ee9			.endinput:	; TODO look for end of string 
8ee9			 
8ee9					; add trailing space for end of token 
8ee9			 
8ee9					ld hl, (input_start) 
8ee9					ld a,(input_len) 
8ee9					call addatohl 
8ee9					ld a, ' ' 
8ee9					ld (hl),a 
8ee9					; TODO eof of parse marker 
8ee9			 
8ee9					inc hl 
8ee9					ld a, 0 
8ee9					ld (hl),a 
8ee9			 
8ee9			 
8ee9					ret 
8ee9			 
8ee9			.iblank: db " ",0 
8ee9			 
8ee9			 
8ee9			input_str_prev:	ld (input_at_pos), a 
8ee9					ld (input_start), hl 
8ee9					ld a,1			; add cursor 
8ee9					ld (hl),a 
8ee9					inc hl 
8ee9					ld a,0 
8ee9					ld (hl),a 
8ee9					ld (input_ptr), hl 
8ee9					ld a,d 
8ee9					ld (input_size), a 
8ee9					ld a,0 
8ee9					ld (input_cursor),a 
8ee9			.instr1:	 
8ee9			 
8ee9					; TODO do block cursor 
8ee9					; TODO switch cursor depending on the modifer key 
8ee9			 
8ee9					; update cursor shape change on key hold 
8ee9			 
8ee9					ld hl, (input_ptr) 
8ee9					dec hl 
8ee9					ld a,(cursor_shape) 
8ee9					ld (hl), a 
8ee9			 
8ee9					; display entered text 
8ee9					ld a,(input_at_pos) 
8ee9			            	CALL fLCD_Pos       ;Position cursor to location in A 
8ee9			            	LD   de, (input_start) 
8ee9			            	CALL fLCD_Str       ;Display string pointed to by DE 
8ee9			 
8ee9					call cin 
8ee9					cp 0 
8ee9					jr z, .instr1 
8ee9			 
8ee9					; proecess keyboard controls first 
8ee9			 
8ee9					ld hl,(input_ptr) 
8ee9			 
8ee9					cp KEY_CR	 ; pressing enter ends input 
8ee9					jr z, .instrcr 
8ee9			 
8ee9					cp KEY_BS 	; back space 
8ee9					jr nz, .instr2 
8ee9					; process back space 
8ee9			 
8ee9					; TODO stop back space if at start of string 
8ee9					dec hl 
8ee9					dec hl ; to over write cursor 
8ee9					ld a,(cursor_shape) 
8ee9					;ld a,0 
8ee9					ld (hl),a 
8ee9					inc hl 
8ee9					ld a," " 
8ee9					ld (hl),a 
8ee9					ld (input_ptr),hl 
8ee9					 
8ee9			 
8ee9					jr .instr1 
8ee9			 
8ee9			.instr2:	cp KEY_LEFT    ; cursor left 
8ee9					jr nz, .instr3 
8ee9					dec hl 
8ee9					ld (input_ptr),hl 
8ee9					jr .instr1 
8ee9				 
8ee9			.instr3:	cp KEY_RIGHT      ; cursor right 
8ee9					jr nz, .instr4 
8ee9					inc hl 
8ee9					ld (input_ptr),hl 
8ee9					jr .instr1 
8ee9			 
8ee9			.instr4:	cp KEY_HOME    ; jump to start of line 
8ee9					jr nz, .instr5 
8ee9					dec hl 
8ee9					ld (input_ptr),hl 
8ee9					jr .instr1 
8ee9			 
8ee9			.instr5:	cp KEY_END     ; jump to end of line 
8ee9					jr nz, .instr6 
8ee9					dec hl 
8ee9					ld (input_ptr),hl 
8ee9					jr .instr1 
8ee9			.instr6:        cp KEY_UP      ; recall last command 
8ee9					jr nz, .instrnew 
8ee9			 
8ee9				ld hl, scratch 
8ee9				ld de, os_last_cmd 
8ee9				call strcpy 
8ee9					jr .instr1 
8ee9			 
8ee9			 
8ee9			.instrnew:	; no special key pressed to see if we have room to store it 
8ee9			 
8ee9					; TODO do string size test 
8ee9			 
8ee9					dec hl ; to over write cursor 
8ee9					ld (hl),a 
8ee9					inc hl 
8ee9					ld a,(cursor_shape) 
8ee9					ld (hl),a 
8ee9					inc hl 
8ee9					ld a,0 
8ee9					ld (hl),a 
8ee9			 
8ee9					ld (input_ptr),hl 
8ee9					 
8ee9					jr .instr1 
8ee9			.instrcr:	dec hl		; remove cursor 
8ee9					ld a,' '	; TODO add a trailing space for safety 
8ee9					ld (hl),a 
8ee9					inc hl 
8ee9					ld a,0 
8ee9					ld (hl),a 
8ee9			 
8ee9			 
8ee9					; if at end of line scroll up    
8ee9					; TODO detecting only end of line 4 for scroll up  
8ee9			 
8ee9					;ld   
8ee9			 
8ee9					ret 
8ee9			 
8ee9			 
8ee9			endif 
8ee9			; strcpy hl = dest, de source 
8ee9			 
8ee9 1a			strcpy:   LD   A, (DE)        ;Get character from string 
8eea b7			            OR   A              ;Null terminator? 
8eeb c8			            RET  Z              ;Yes, so finished 
8eec 1a					ld a,(de) 
8eed 77					ld (hl),a 
8eee 13			            INC  DE             ;Point to next character 
8eef 23					inc hl 
8ef0 18 f7		            JR   strcpy       ;Repeat 
8ef2 c9					ret 
8ef3			 
8ef3			 
8ef3			; TODO string_at  
8ef3			; pass string which starts with lcd offset address and then null term string 
8ef3			 
8ef3			; TODO string to dec 
8ef3			; TODO string to hex 
8ef3			; TODO byte to string hex 
8ef3			; TODO byte to string dec 
8ef3			 
8ef3			 
8ef3			 
8ef3			; from z80uartmonitor 
8ef3			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
8ef3			; OUTPUT VALUE OF A IN HEX ONE NYBBLE AT A TIME 
8ef3			; pass hl for where to put the text 
8ef3			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
8ef3 c5			hexout:	PUSH BC 
8ef4 f5					PUSH AF 
8ef5 47					LD B, A 
8ef6					; Upper nybble 
8ef6 cb 3f				SRL A 
8ef8 cb 3f				SRL A 
8efa cb 3f				SRL A 
8efc cb 3f				SRL A 
8efe cd 0e 8f				CALL tohex 
8f01 77					ld (hl),a 
8f02 23					inc hl	 
8f03					 
8f03					; Lower nybble 
8f03 78					LD A, B 
8f04 e6 0f				AND 0FH 
8f06 cd 0e 8f				CALL tohex 
8f09 77					ld (hl),a 
8f0a 23					inc hl	 
8f0b					 
8f0b f1					POP AF 
8f0c c1					POP BC 
8f0d c9					RET 
8f0e					 
8f0e			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
8f0e			; TRANSLATE value in lower A TO 2 HEX CHAR CODES FOR DISPLAY 
8f0e			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
8f0e			tohex: 
8f0e e5					PUSH HL 
8f0f d5					PUSH DE 
8f10 16 00				LD D, 0 
8f12 5f					LD E, A 
8f13 21 1b 8f				LD HL, .DATA 
8f16 19					ADD HL, DE 
8f17 7e					LD A, (HL) 
8f18 d1					POP DE 
8f19 e1					POP HL 
8f1a c9					RET 
8f1b			 
8f1b			.DATA: 
8f1b 30					DEFB	30h	; 0 
8f1c 31					DEFB	31h	; 1 
8f1d 32					DEFB	32h	; 2 
8f1e 33					DEFB	33h	; 3 
8f1f 34					DEFB	34h	; 4 
8f20 35					DEFB	35h	; 5 
8f21 36					DEFB	36h	; 6 
8f22 37					DEFB	37h	; 7 
8f23 38					DEFB	38h	; 8 
8f24 39					DEFB	39h	; 9 
8f25 41					DEFB	41h	; A 
8f26 42					DEFB	42h	; B 
8f27 43					DEFB	43h	; C 
8f28 44					DEFB	44h	; D 
8f29 45					DEFB	45h	; E 
8f2a 46					DEFB	46h	; F 
8f2b			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
8f2b			;; 	ASCII char code for 0-9,A-F in A to single hex digit 
8f2b			;;    subtract $30, if result > 9 then subtract $7 more 
8f2b			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
8f2b			atohex: 
8f2b d6 30				SUB $30 
8f2d fe 0a				CP 10 
8f2f f8					RET M		; If result negative it was 0-9 so we're done 
8f30 d6 07				SUB $7		; otherwise, subtract $7 more to get to $0A-$0F 
8f32 c9					RET		 
8f33			 
8f33			 
8f33			 
8f33			 
8f33			; Get 2 ASCII characters as hex byte from pointer in hl 
8f33			 
8f33			BYTERD: 
8f33 16 00			LD	D,00h		;Set up 
8f35 cd 3d 8f			CALL	HEXCON		;Get byte and convert to hex 
8f38 87				ADD	A,A		;First nibble so 
8f39 87				ADD	A,A		;multiply by 16 
8f3a 87				ADD	A,A		; 
8f3b 87				ADD	A,A		; 
8f3c 57				LD	D,A		;Save hi nibble in D 
8f3d			HEXCON: 
8f3d 7e				ld a, (hl)		;Get next chr 
8f3e 23				inc hl 
8f3f d6 30			SUB	030h		;Makes '0'-'9' equal 0-9 
8f41 fe 0a			CP	00Ah		;Is it 0-9 ? 
8f43 38 02			JR	C,NALPHA	;If so miss next bit 
8f45 d6 07			SUB	007h		;Else convert alpha 
8f47			NALPHA: 
8f47 b2				OR	D		;Add hi nibble back 
8f48 c9				RET			; 
8f49			 
8f49			 
8f49			; 
8f49			; Get a word (16 bit) in hexadecimal notation. The result is returned in HL. 
8f49			; Since the routines get_byte and therefore get_nibble are called, only valid 
8f49			; characters (0-9a-f) are accepted. 
8f49			; 
8f49			;get_word        push    af 
8f49			;                call    get_byte        ; Get the upper byte 
8f49			;                ld      h, a 
8f49			;                call    get_byte        ; Get the lower byte 
8f49			;                ld      l, a 
8f49			;                pop     af 
8f49			;                ret 
8f49			; 
8f49			; Get a byte in hexadecimal notation. The result is returned in A. Since 
8f49			; the routine get_nibble is used only valid characters are accepted - the  
8f49			; input routine only accepts characters 0-9a-f. 
8f49			; 
8f49 c5			get_byte:        push    bc              ; Save contents of B (and C) 
8f4a 7e					ld a,(hl) 
8f4b 23					inc hl 
8f4c cd 71 8f		                call    nibble2val      ; Get upper nibble 
8f4f cb 07		                rlc     a 
8f51 cb 07		                rlc     a 
8f53 cb 07		                rlc     a 
8f55 cb 07		                rlc     a 
8f57 47			                ld      b, a            ; Save upper four bits 
8f58 7e					ld a,(hl) 
8f59 cd 71 8f		                call    nibble2val      ; Get lower nibble 
8f5c b0			                or      b               ; Combine both nibbles 
8f5d c1			                pop     bc              ; Restore B (and C) 
8f5e c9			                ret 
8f5f			; 
8f5f			; Get a hexadecimal digit from the serial line. This routine blocks until 
8f5f			; a valid character (0-9a-f) has been entered. A valid digit will be echoed 
8f5f			; to the serial line interface. The lower 4 bits of A contain the value of  
8f5f			; that particular digit. 
8f5f			; 
8f5f			;get_nibble      ld a,(hl)           ; Read a character 
8f5f			;                call    to_upper        ; Convert to upper case 
8f5f			;                call    is_hex          ; Was it a hex digit? 
8f5f			;                jr      nc, get_nibble  ; No, get another character 
8f5f			 ;               call    nibble2val      ; Convert nibble to value 
8f5f			 ;               call    print_nibble 
8f5f			 ;               ret 
8f5f			; 
8f5f			; is_hex checks a character stored in A for being a valid hexadecimal digit. 
8f5f			; A valid hexadecimal digit is denoted by a set C flag. 
8f5f			; 
8f5f			;is_hex          cp      'F' + 1         ; Greater than 'F'? 
8f5f			;                ret     nc              ; Yes 
8f5f			;                cp      '0'             ; Less than '0'? 
8f5f			;                jr      nc, is_hex_1    ; No, continue 
8f5f			;                ccf                     ; Complement carry (i.e. clear it) 
8f5f			;                ret 
8f5f			;is_hex_1        cp      '9' + 1         ; Less or equal '9*? 
8f5f			;                ret     c               ; Yes 
8f5f			;                cp      'A'             ; Less than 'A'? 
8f5f			;                jr      nc, is_hex_2    ; No, continue 
8f5f			;                ccf                     ; Yes - clear carry and return 
8f5f			;                ret 
8f5f			;is_hex_2        scf                     ; Set carry 
8f5f			;                ret 
8f5f			; 
8f5f			; Convert a single character contained in A to upper case: 
8f5f			; 
8f5f fe 61		to_upper:        cp      'a'             ; Nothing to do if not lower case 
8f61 d8			                ret     c 
8f62 fe 7b		                cp      'z' + 1         ; > 'z'? 
8f64 d0			                ret     nc              ; Nothing to do, either 
8f65 e6 5f		                and     $5f             ; Convert to upper case 
8f67 c9			                ret 
8f68			 
8f68			 
8f68			to_lower: 
8f68			 
8f68			   ; if char is in [A-Z] make it lower case 
8f68			 
8f68			   ; enter : a = char 
8f68			   ; exit  : a = lower case char 
8f68			   ; uses  : af 
8f68			 
8f68 fe 41		   cp 'A' 
8f6a d8			   ret c 
8f6b			    
8f6b fe 5b		   cp 'Z'+1 
8f6d d0			   ret nc 
8f6e			    
8f6e f6 20		   or $20 
8f70 c9			   ret 
8f71			 
8f71			; 
8f71			; Expects a hexadecimal digit (upper case!) in A and returns the 
8f71			; corresponding value in A. 
8f71			; 
8f71 fe 3a		nibble2val:      cp      '9' + 1         ; Is it a digit (less or equal '9')? 
8f73 38 02		                jr      c, nibble2val_1 ; Yes 
8f75 d6 07		                sub     7               ; Adjust for A-F 
8f77 d6 30		nibble2val_1:    sub     '0'             ; Fold back to 0..15 
8f79 e6 0f		                and     $f              ; Only return lower 4 bits 
8f7b c9			                ret 
8f7c			; 
8f7c			; Print_nibble prints a single hex nibble which is contained in the lower  
8f7c			; four bits of A: 
8f7c			; 
8f7c			;print_nibble    push    af              ; We won't destroy the contents of A 
8f7c			;                and     $f              ; Just in case... 
8f7c			;                add     a, '0'             ; If we have a digit we are done here. 
8f7c			;                cp      '9' + 1         ; Is the result > 9? 
8f7c			;                jr      c, print_nibble_1 
8f7c			;                add     a, 'A' - '0' - $a  ; Take care of A-F 
8f7c			;print_nibble_1  call    putc            ; Print the nibble and 
8f7c			;                pop     af              ; restore the original value of A 
8f7c			;                ret 
8f7c			;; 
8f7c			;; Send a CR/LF pair: 
8f7c			; 
8f7c			;crlf            push    af 
8f7c			;                ld      a, cr 
8f7c			;                call    putc 
8f7c			;                ld      a, lf 
8f7c			;                call    putc 
8f7c			;                pop     af 
8f7c			;                ret 
8f7c			; 
8f7c			; Print_word prints the four hex digits of a word to the serial line. The  
8f7c			; word is expected to be in HL. 
8f7c			; 
8f7c			;print_word      push    hl 
8f7c			;                push    af 
8f7c			;                ld      a, h 
8f7c			;                call    print_byte 
8f7c			;                ld      a, l 
8f7c			;                call    print_byte 
8f7c			;                pop     af 
8f7c			;                pop     hl 
8f7c			;                ret 
8f7c			; 
8f7c			; Print_byte prints a single byte in hexadecimal notation to the serial line. 
8f7c			; The byte to be printed is expected to be in A. 
8f7c			; 
8f7c			;print_byte      push    af              ; Save the contents of the registers 
8f7c			;                push    bc 
8f7c			;                ld      b, a 
8f7c			;                rrca 
8f7c			;                rrca 
8f7c			;                rrca 
8f7c			;                rrca 
8f7c			;                call    print_nibble    ; Print high nibble 
8f7c			;                ld      a, b 
8f7c			;                call    print_nibble    ; Print low nibble 
8f7c			;                pop     bc              ; Restore original register contents 
8f7c			;                pop     af 
8f7c			;                ret 
8f7c			 
8f7c			 
8f7c			 
8f7c			 
8f7c			 
8f7c			fourehexhl:  
8f7c 7e				ld a,(hl) 
8f7d cd 2b 8f			call atohex 
8f80 cb 3f				SRL A 
8f82 cb 3f				SRL A 
8f84 cb 3f				SRL A 
8f86 cb 3f				SRL A 
8f88 47				ld b, a 
8f89 23				inc hl 
8f8a 7e				ld a,(hl) 
8f8b 23				inc hl 
8f8c cd 2b 8f			call atohex 
8f8f 80				add b 
8f90 57				ld d,a 
8f91 7e				ld a,(hl) 
8f92 cd 2b 8f			call atohex 
8f95 cb 3f				SRL A 
8f97 cb 3f				SRL A 
8f99 cb 3f				SRL A 
8f9b cb 3f				SRL A 
8f9d 47				ld b, a 
8f9e 23				inc hl 
8f9f 7e				ld a,(hl) 
8fa0 23				inc hl 
8fa1 cd 2b 8f			call atohex 
8fa4 80				add b 
8fa5 5f				ld e, a 
8fa6 d5				push de 
8fa7 e1				pop hl 
8fa8 c9				ret 
8fa9			 
8fa9			; pass hl. returns z set if the byte at hl is a digit 
8fa9			;isdigithl:  
8fa9			;	push bc 
8fa9			;	ld a,(hl) 
8fa9			;	cp ':' 
8fa9			;	jr nc, .isdf 		; > 
8fa9			;	cp '0' 
8fa9			;	jr c, .isdf		; < 
8fa9			; 
8fa9			;	; TODO find a better way to set z 
8fa9			; 
8fa9			;	ld b,a 
8fa9			;	cp b 
8fa9			;	pop bc 
8fa9			;	ret 
8fa9			; 
8fa9			;.isdf:	; not digit so clear z 
8fa9			; 
8fa9			;	; TODO find a better way to unset z 
8fa9			; 
8fa9			;	ld b,a 
8fa9			;	inc b 
8fa9			;	cp b 
8fa9			; 
8fa9			;	pop bc 
8fa9			;	ret 
8fa9				 
8fa9				 
8fa9			 
8fa9			 
8fa9			; pass hl as the four byte address to load 
8fa9			 
8fa9			get_word_hl:  
8fa9 e5				push hl 
8faa cd 49 8f			call get_byte 
8fad				 
8fad 47				ld b, a 
8fae			 
8fae e1				pop hl 
8faf 23				inc hl 
8fb0 23				inc hl 
8fb1			 
8fb1			; TODO not able to handle a-f  
8fb1 7e				ld a,(hl) 
8fb2			;	;cp ':' 
8fb2			;	cp 'g' 
8fb2			;	jr nc, .single_byte_hl 		; > 
8fb2			;	cp 'G' 
8fb2			;	jr nc, .single_byte_hl 		; > 
8fb2			;	cp '0' 
8fb2			;	jr c, .single_byte_hl		; < 
8fb2			 
8fb2				;call isdigithl 
8fb2 fe 00			cp 0 
8fb4 28 06			jr z, .single_byte_hl 
8fb6			 
8fb6			.getwhln:   ; hex word so get next byte 
8fb6			 
8fb6 cd 49 8f			call get_byte 
8fb9 6f				ld l, a 
8fba 60				ld h,b 
8fbb c9				ret 
8fbc 68			.single_byte_hl:   ld l,b 
8fbd 26 00				ld h,0 
8fbf c9					ret 
8fc0			 
8fc0			 
8fc0			 
8fc0			 
8fc0 21 60 97			ld hl,asc+1 
8fc3			;	ld a, (hl) 
8fc3			;	call nibble2val 
8fc3 cd 49 8f			call get_byte 
8fc6			 
8fc6			;	call fourehexhl 
8fc6 32 ef e2			ld (scratch+52),a 
8fc9				 
8fc9 21 ed e2			ld hl,scratch+50 
8fcc 22 de e5			ld (os_cur_ptr),hl 
8fcf			 
8fcf c9				ret 
8fd0			 
8fd0			 
8fd0			; from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Other:DispA 
8fd0			 
8fd0			; Decimal Unsigned Version 
8fd0			 
8fd0			;Number in a to decimal ASCII 
8fd0			;adapted from 16 bit found in z80 Bits to 8 bit by Galandros 
8fd0			;Example: display a=56 as "056" 
8fd0			;input: a = number 
8fd0			;Output: a=0,value of a in the screen 
8fd0			;destroys af,bc (don't know about hl and de) 
8fd0			DispAToASCII: 
8fd0 0e 9c			ld	c,-100 
8fd2 cd dc 8f			call	.Na1 
8fd5 0e f6			ld	c,-10 
8fd7 cd dc 8f			call	.Na1 
8fda 0e ff			ld	c,-1 
8fdc 06 2f		.Na1:	ld	b,'0'-1 
8fde 04			.Na2:	inc	b 
8fdf 81				add	a,c 
8fe0 38 fc			jr	c,.Na2 
8fe2 91				sub	c		;works as add 100/10/1 
8fe3 f5				push af		;safer than ld c,a 
8fe4 78				ld	a,b		;char is in b 
8fe5			;TODO	CALL	PUTCHAR	;plot a char. Replace with bcall(_PutC) or similar. 
8fe5 f1				pop af		;safer than ld a,c 
8fe6 c9				ret 
8fe7			 
8fe7			; Decimal Signed Version 
8fe7			 
8fe7			; DispA 
8fe7			; -------------------------------------------------------------- 
8fe7			; Converts a signed integer value to a zero-terminated ASCII 
8fe7			; string representative of that value (using radix 10). 
8fe7			; -------------------------------------------------------------- 
8fe7			; INPUTS: 
8fe7			;     HL     Value to convert (two's complement integer). 
8fe7			;     DE     Base address of string destination. (pointer). 
8fe7			; -------------------------------------------------------------- 
8fe7			; OUTPUTS: 
8fe7			;     None 
8fe7			; -------------------------------------------------------------- 
8fe7			; REGISTERS/MEMORY DESTROYED 
8fe7			; AF HL 
8fe7			; -------------------------------------------------------------- 
8fe7			 
8fe7			;DispHLToASCII: 
8fe7			;   push    de 
8fe7			;   push    bc 
8fe7			; 
8fe7			;; Detect sign of HL. 
8fe7			;    bit    7, h 
8fe7			;    jr     z, ._DoConvert 
8fe7			; 
8fe7			;; HL is negative. Output '-' to string and negate HL. 
8fe7			;    ld     a, '-' 
8fe7			;    ld     (de), a 
8fe7			;    inc    de 
8fe7			; 
8fe7			;; Negate HL (using two's complement) 
8fe7			;    xor    a 
8fe7			;    sub    l 
8fe7			;    ld     l, a 
8fe7			;    ld     a, 0     ; Note that XOR A or SUB A would disturb CF 
8fe7			;    sbc    a, h 
8fe7			;    ld     h, a 
8fe7			; 
8fe7			;; Convert HL to digit characters 
8fe7			;._DoConvert: 
8fe7			;    ld     b, 0     ; B will count character length of number 
8fe7			;-   ld     a, 10 
8fe7			;    syscall  .DivHLByA  ; HL = HL / A, A = remainder 
8fe7			;    push   af 
8fe7			;    inc    b 
8fe7			;    ld     a, h 
8fe7			;    or     l 
8fe7			;    jr     nz, - 
8fe7			; 
8fe7			;; Retrieve digits from stack 
8fe7			;-   pop    af 
8fe7			;    or     $30 
8fe7			;    ld     (de), a 
8fe7			;    inc    de 
8fe7			;    djnz   - 
8fe7			; 
8fe7			;; Terminate string with NULL 
8fe7			;    xor    a 
8fe7			;    ld     (de), a 
8fe7			; 
8fe7			;    pop    bc 
8fe7			;    pop    de 
8fe7			;    ret 
8fe7			 
8fe7			;Comments 
8fe7			; 
8fe7			;    This routine uses the common positive-integer radix conversion algorithm of repeatedly dividing a value by the desired radix (base case: the value is zero) and saving the remainders of each division. 
8fe7			;    As this algorithm gives the digits in reverse order, they are pushed onto the hardware stack so that subsequently popping them yields the correct order. 
8fe7			;    Note that the output string will not be fixed-width. 
8fe7			; 
8fe7			;Example Usage 
8fe7			; 
8fe7			;    ld    hl, -1004 
8fe7			;    ld    de, OP1 
8fe7			;    call  DispA 
8fe7			;    ld    hl, OP1 
8fe7			;    syscall  PutS 
8fe7			 
8fe7			 
8fe7			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/string_to_uint16.z80 
8fe7			 
8fe7			 
8fe7			;Converts an ASCII string to an unsigned 16-bit integer 
8fe7			;Quits when it reaches a non-decimal digit 
8fe7			 
8fe7			string_to_uint16: 
8fe7			atoui_16: 
8fe7			;Input: 
8fe7			;     DE points to the string 
8fe7			;Outputs: 
8fe7			;     HL is the result 
8fe7			;     A is the 8-bit value of the number 
8fe7			;     DE points to the byte after the number 
8fe7			;Destroys: 
8fe7			;     BC 
8fe7			;       if the string is non-empty, BC is HL/10 
8fe7			;Size:  24 bytes 
8fe7			;Speed: 42+d(104+{0,9}) 
8fe7			;       d is the number of digits in the number 
8fe7			;       max is 640 cycles for a 5 digit number 
8fe7			;Assuming no leading zeros: 
8fe7			;1 digit:  146cc 
8fe7			;2 digit:  250cc 
8fe7			;3 digit:  354cc or 363cc (avg: 354.126cc) 
8fe7			;4 digit:  458cc or 467cc (avg: 458.27cc) 
8fe7			;5 digit:  562cc or 571cc or 580cc (avg: 562.4104cc) 
8fe7			;avg: 544.81158447265625cc (544+13297/16384) 
8fe7			;=============================================================== 
8fe7 21 00 00		  ld hl,0 
8fea			.u16a: 
8fea 1a			  ld a,(de) 
8feb d6 30		  sub 30h 
8fed fe 0a		  cp 10 
8fef d0			  ret nc 
8ff0 13			  inc de 
8ff1 44			  ld b,h 
8ff2 4d			  ld c,l 
8ff3 29			  add hl,hl 
8ff4 29			  add hl,hl 
8ff5 09			  add hl,bc 
8ff6 29			  add hl,hl 
8ff7 85			  add a,l 
8ff8 6f			  ld l,a 
8ff9 30 ef		  jr nc,.u16a 
8ffb 24			  inc h 
8ffc c3 ea 8f		  jp .u16a 
8fff			 
8fff			 
8fff			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/string_to_uint16.z80 
8fff			 
8fff			;written by Zeda 
8fff			;Converts a 16-bit unsigned integer to an ASCII string. 
8fff			 
8fff			uitoa_16: 
8fff			;Input: 
8fff			;   DE is the number to convert 
8fff			;   HL points to where to write the ASCII string (up to 6 bytes needed). 
8fff			;Output: 
8fff			;   HL points to the null-terminated ASCII string 
8fff			;      NOTE: This isn't necessarily the same as the input HL. 
8fff d5			  push de 
9000 c5			  push bc 
9001 f5			  push af 
9002 eb			  ex de,hl 
9003			 
9003 01 f0 d8		  ld bc,-10000 
9006 3e 2f		  ld a,'0'-1 
9008 3c			  inc a 
9009 09			  add hl,bc  
900a 38 fc		   jr c,$-2 
900c 12			  ld (de),a 
900d 13			  inc de 
900e			 
900e 01 e8 03		  ld bc,1000 
9011 3e 3a		  ld a,'9'+1 
9013 3d			  dec a  
9014 09			  add hl,bc  
9015 30 fc		   jr nc,$-2 
9017 12			  ld (de),a 
9018 13			  inc de 
9019			 
9019 01 9c ff		  ld bc,-100 
901c 3e 2f		  ld a,'0'-1 
901e 3c			  inc a  
901f 09			  add hl,bc  
9020 38 fc		   jr c,$-2 
9022 12			  ld (de),a 
9023 13			  inc de 
9024			 
9024 7d			  ld a,l 
9025 26 3a		  ld h,'9'+1 
9027 25			  dec h  
9028 c6 0a		  add a,10  
902a 30 fb		   jr nc,$-3 
902c c6 30		  add a,'0' 
902e eb			  ex de,hl 
902f 72			  ld (hl),d 
9030 23			  inc hl 
9031 77			  ld (hl),a 
9032 23			  inc hl 
9033 36 00		  ld (hl),0 
9035			 
9035			;Now strip the leading zeros 
9035 0e fa		  ld c,-6 
9037 09			  add hl,bc 
9038 3e 30		  ld a,'0' 
903a 23			  inc hl  
903b be			  cp (hl)  
903c 28 fc		  jr z,$-2 
903e			 
903e			;Make sure that the string is non-empty! 
903e 7e			  ld a,(hl) 
903f b7			  or a 
9040 20 01		  jr nz,.atoub 
9042 2b			  dec hl 
9043			.atoub: 
9043			 
9043 f1			  pop af 
9044 c1			  pop bc 
9045 d1			  pop de 
9046 c9			  ret 
9047			 
9047			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/toUpper.z80 
9047			 
9047			toUpper: 
9047			;A is the char. 
9047			;If A is a lowercase letter, this sets it to the matching uppercase 
9047			;18cc or 30cc or 41cc 
9047			;avg: 26.75cc 
9047 fe 61		  cp 'a' 
9049 d8			  ret c 
904a fe 7b		  cp 'z'+1 
904c d0			  ret nc 
904d d6 20		  sub 'a'-'A' 
904f c9			  ret 
9050			 
9050			; https://tutorials.eeems.ca/ASMin28Days/lesson/day16.html#cmp 
9050			 
9050			; String Length 
9050			;With a length-prefixed string, finding the length is trivial. For a null-terminated string, the process is decidedly more involved. This is where CPIR comes in. 
9050			 
9050			; Get the length of the null-terminated string starting at $8000 hl 
9050			;    LD     HL, $8000 
9050			 
9050			strlenz: 
9050			 
9050 af			    XOR    A               ; Zero is the value we are looking for. 
9051 47			    LD     B, A             ; Since we haven't the slightest clue as to the  
9052 4f			    LD     C, A             ; actual size of the string, put 0 in BC to search 
9053			                           ; 65, 536 bytes (the entire addressable memory space). 
9053 ed b1		    CPIR                   ; Begin search for a byte equalling zero. 
9055			 
9055			; BC has been decremented so that it holds -length. Now need to synthesize a NEG BC. 
9055 67			    LD     H, A             ; Zero HL (basically set it to 65, 536) to get the 
9056 6f			    LD     L, A             ; number of bytes 
9057 ed 42		    SBC    HL, BC           ; Find the size. CPIR doesn't affect carry. 
9059 2b			    DEC    HL              ; Compensate for null. 
905a c9				ret 
905b			 
905b			; Get the length of the A terminated string starting at $8000 hl 
905b			;    LD     HL, $8000 
905b			 
905b			strlent: 
905b			 
905b			                  ; A is the value we are looking for. 
905b 06 00		    LD     B, 0             ; Since we haven't the slightest clue as to the  
905d 0e 00		    LD     C, 0             ; actual size of the string, put 0 in BC to search 
905f			                           ; 65, 536 bytes (the entire addressable memory space). 
905f ed b1		    CPIR                   ; Begin search for a byte equalling zero. 
9061			 
9061			; BC has been decremented so that it holds -length. Now need to synthesize a NEG BC. 
9061 26 00		    LD     H, 0             ; Zero HL (basically set it to 65, 536) to get the 
9063 2e 00		    LD     L, 0             ; number of bytes 
9065 ed 42		    SBC    HL, BC           ; Find the size. CPIR doesn't affect carry. 
9067 2b			    DEC    HL              ; Compensate for null. 
9068 c9				ret 
9069			 
9069			 
9069			;Comparing Strings 
9069			 
9069			;IN    HL     Address of string1. 
9069			;      DE     Address of string2. 
9069			 
9069			; doc given but wrong??? 
9069			;OUT   zero   Set if string1 = string2, reset if string1 != string2. 
9069			;      carry  Set if string1 > string2, reset if string1 <= string2. 
9069			; tested 
9069			;OUT   carry set  if string1 = string2, carry  reset if string1 != string2. 
9069			 
9069			strcmp_old: 
9069 e5			    PUSH   HL 
906a d5			    PUSH   DE 
906b			 
906b 1a			    LD     A, (DE)          ; Compare lengths to determine smaller string 
906c be			    CP     (HL)            ; (want to minimize work). 
906d 38 01		    JR     C, Str1IsBigger 
906f 7e			    LD     A, (HL) 
9070			 
9070			Str1IsBigger: 
9070 4f			    LD     C, A             ; Put length in BC 
9071 06 00		    LD     B, 0 
9073 13			    INC    DE              ; Increment pointers to meat of string. 
9074 23			    INC    HL 
9075			 
9075			CmpLoop: 
9075 1a			    LD     A, (DE)          ; Compare bytes. 
9076 ed a1		    CPI 
9078 20 09		    JR     NZ, NoMatch      ; If (HL) != (DE), abort. 
907a 13			    INC    DE              ; Update pointer. 
907b ea 75 90		    JP     PE, CmpLoop 
907e			 
907e d1			    POP    DE 
907f e1			    POP    HL 
9080 1a			    LD     A, (DE)          ; Check string lengths to see if really equal. 
9081 be			    CP     (HL) 
9082 c9			    RET 
9083			 
9083			NoMatch: 
9083 2b			    DEC    HL 
9084 be			    CP     (HL)            ; Compare again to affect carry. 
9085 d1			    POP    DE 
9086 e1			    POP    HL 
9087 c9			    RET 
9088			 
9088			;; test strmp 
9088			; 
9088			;ld de, .str1 
9088			;ld hl, .str2 
9088			;call strcmp 
9088			;jr z, .z1 
9088			;;this 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "NZ1" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			;.z1: 
9088			; 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "ZZ1" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			; 
9088			;ld de, .str1 
9088			;ld hl, .str1 
9088			;call strcmp 
9088			;jr z, .z2 
9088			;;this 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "NZ2" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			;.z2: 
9088			; 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "ZZ2" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			; 
9088			;ld de, .str1 
9088			;ld hl, .str2 
9088			;call strcmp 
9088			;jr c, .c1 
9088			; 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "Nc1" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			;.c1: 
9088			;;this 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "cc1" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			; 
9088			;ld de, .str1 
9088			;ld hl, .str1 
9088			;call strcmp 
9088			;jr c, .c2 
9088			;;this 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "Nc2" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			;.c2: 
9088			; 
9088			;	if DEBUG_FORTH_WORDS 
9088			;		DMARK "cc2" 
9088			;		CALLMONITOR 
9088			;	endif 
9088			;	NEXTW 
9088			;.str1:   db "string1",0 
9088			;.str2:   db "string2",0 
9088			 
9088			; only care about direct match or not 
9088			; hl and de strings 
9088			; zero set if the same 
9088			 
9088			strcmp: 
9088 1a				ld a, (de) 
9089 be				cp (hl) 
908a 28 02			jr z, .ssame 
908c b7				or a 
908d c9				ret 
908e			 
908e			.ssame:  
908e fe 00			cp 0 
9090 c8				ret z 
9091			 
9091 23				inc hl 
9092 13				inc de 
9093 18 f3			jr strcmp 
9095				 
9095				 
9095			 
9095			;Copyright (c) 2014, Luke Maurits 
9095			;All rights reserved. 
9095			; 
9095			;Redistribution and use in source and binary forms, with or without 
9095			;modification, are permitted provided that the following conditions are met: 
9095			; 
9095			;* Redistributions of source code must retain the above copyright notice, this 
9095			;  list of conditions and the following disclaimer. 
9095			; 
9095			;* Redistributions in binary form must reproduce the above copyright notice, 
9095			;  this list of conditions and the following disclaimer in the documentation 
9095			;  and/or other materials provided with the distribution. 
9095			; 
9095			;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
9095			;AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
9095			;IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
9095			;DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE 
9095			;FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
9095			;DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
9095			;SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
9095			;CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
9095			;OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
9095			;OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
9095			 
9095			; https://github.com/lmaurits/lm512/blob/master/string.z80 
9095			 
9095			StrictStrCmp: 
9095				; Load next chars of each string 
9095 1a				ld a, (de) 
9096 47				ld b, a 
9097 7e				ld a, (hl) 
9098				; Compare 
9098 b8				cp b 
9099				; Return non-zero if chars don't match 
9099 c0				ret nz 
909a				; Check for end of both strings 
909a fe 00			cp "\0" 
909c				; Return if strings have ended 
909c c8				ret z 
909d				; Otherwise, advance to next chars 
909d 23				inc hl 
909e 13				inc de 
909f 18 f4			jr StrictStrCmp 
90a1			 
90a1			;end 
90a1			; eof 
90a1			 
90a1			 
90a1			 
90a1			 
90a1			 
90a1			 
# End of file firmware_strings.asm
90a1			include "firmware_memory.asm"   ; malloc and free  
90a1			 
90a1			if DEBUG_FORTH_MALLOC_HIGH 
90a1			.mallocsize: db "Wants malloc >256",0 
90a1			.mallocasize: db "MALLOC gives >256",0 
90a1			.malloczero: db "MALLOC gives zero",0 
90a1			 
90a1			malloc_guard_zerolen: 
90a1				push hl 
90a1				push de 
90a1				push af 
90a1			 
90a1				ld de, 0 
90a1			        call cmp16 
90a1				jr nz, .lowalloz 
90a1			 
90a1				push hl 
90a1				push de 
90a1					ld hl, display_fb0 
90a1					ld (display_fb_active), hl 
90a1				call clear_display 
90a1				ld a, 0 
90a1				ld de, .malloczero 
90a1				call str_at_display 
90a1				call update_display 
90a1				call delay1s 
90a1				call delay1s 
90a1				call bp_on 
90a1			;	ld a, 0 
90a1			;	ld (os_view_disable), a 
90a1			 
90a1				pop de 
90a1				pop hl 
90a1			 
90a1				 
90a1			 
90a1				CALLMONITOR 
90a1			.lowalloz: 
90a1			 
90a1			 
90a1				pop af 
90a1				pop de 
90a1				pop hl 
90a1			ret 
90a1			 
90a1			malloc_guard_entry: 
90a1				push hl 
90a1				push de 
90a1				push af 
90a1			 
90a1			 	or a      ;clear carry flag 
90a1				push hl 
90a1				ld de, 255 
90a1				sbc hl, de 
90a1				jr c, .lowalloc 
90a1			 
90a1				push de 
90a1					ld hl, display_fb0 
90a1					ld (display_fb_active), hl 
90a1				call clear_display 
90a1				ld a, 0 
90a1				ld de, .mallocsize 
90a1				call str_at_display 
90a1				call update_display 
90a1				call delay1s 
90a1				call delay1s 
90a1			;	ld a, 0 
90a1			;	ld (os_view_disable), a 
90a1				call bp_on 
90a1			 
90a1				pop de 
90a1				pop hl 
90a1			 
90a1				 
90a1			 
90a1				CALLMONITOR 
90a1				jr .lowdone 
90a1			.lowalloc: 
90a1			 
90a1			 
90a1				pop hl 
90a1			.lowdone:	pop af 
90a1				pop de 
90a1				pop hl 
90a1			ret 
90a1			 
90a1			malloc_guard_exit: 
90a1				push hl 
90a1				push de 
90a1				push af 
90a1			 
90a1			 	or a      ;clear carry flag 
90a1				push hl 
90a1				ld de, 255 
90a1				sbc hl, de 
90a1				jr c, .lowallocx 
90a1			 
90a1				push de 
90a1					ld hl, display_fb0 
90a1					ld (display_fb_active), hl 
90a1				call clear_display 
90a1				ld a, 0 
90a1				ld de, .mallocasize 
90a1				call str_at_display 
90a1				call update_display 
90a1				call delay1s 
90a1				call delay1s 
90a1			;	ld a, 0 
90a1			;	ld (os_view_disable), a 
90a1				call bp_on 
90a1				pop de 
90a1				pop hl 
90a1			 
90a1				CALLMONITOR 
90a1				jr .lowdonex 
90a1			.lowallocx: 
90a1			 
90a1				pop hl 
90a1			.lowdonex:	pop af 
90a1				pop de 
90a1				pop hl 
90a1			ret 
90a1			endif 
90a1			 
90a1			if MALLOC_2 
90a1			; Z80 Malloc and Free Functions 
90a1			 
90a1			; Malloc Function: 
90a1			; Input: 
90a1			;   HL: Size of block to allocate 
90a1			; Output: 
90a1			;   HL: Pointer to allocated memory block (NULL if allocation fails) 
90a1			 
90a1			malloc: 
90a1				 
90a1			if DEBUG_FORTH_MALLOC_HIGH 
90a1			call malloc_guard_entry 
90a1			endif 
90a1			 
90a1			 
90a1			 
90a1			 
90a1					if DEBUG_FORTH_MALLOC 
90a1						DMARK "mal" 
90a1						CALLMONITOR 
90a1					endif 
90a1			    push af            ; Save AF register 
90a1			    ld a, l            ; Load low byte of size into A 
90a1			    or h               ; Check if size is zero 
90a1			    jp z, malloc_exit  ; If size is zero, exit with NULL pointer 
90a1			 
90a1			    ; Allocate memory 
90a1			    ld hl, (heap_start) ; Load start of heap into HL 
90a1					if DEBUG_FORTH_MALLOC 
90a1						DMARK "ma1" 
90a1						CALLMONITOR 
90a1					endif 
90a1			    call malloc_internal ; Call internal malloc function 
90a1			    pop af             ; Restore AF register 
90a1			if DEBUG_FORTH_MALLOC_HIGH 
90a1			call malloc_guard_exit 
90a1			call malloc_guard_zerolen 
90a1			endif 
90a1			    ret                ; Return 
90a1			 
90a1			; Free Function: 
90a1			; Input: 
90a1			;   HL: Pointer to memory block to free 
90a1			; Output: 
90a1			;   None 
90a1			 
90a1			free: 
90a1			    push af            ; Save AF register 
90a1			    ld a, l            ; Load low byte of pointer into A 
90a1			    or h               ; Check if pointer is NULL 
90a1			    jp z, free_exit    ; If pointer is NULL, exit 
90a1			 
90a1			    ; Free memory 
90a1			    ld hl, (heap_start) ; Load start of heap into HL 
90a1			    call free_internal  ; Call internal free function 
90a1			    pop af             ; Restore AF register 
90a1			    ret                ; Return 
90a1			 
90a1			; Internal Malloc Function: 
90a1			; Input: 
90a1			;   HL: Size of block to allocate 
90a1			; Output: 
90a1			;   HL: Pointer to allocated memory block (NULL if allocation fails) 
90a1			 
90a1			malloc_internal: 
90a1			    ld bc, 2           ; Number of bytes to allocate for management overhead 
90a1			    add hl, bc         ; Add management overhead to requested size 
90a1			    ex de, hl          ; Save total size in DE, and keep it in HL 
90a1					if DEBUG_FORTH_MALLOC 
90a1						DMARK "ma2" 
90a1						CALLMONITOR 
90a1					endif 
90a1			 
90a1			    ; Search for free memory block 
90a1			    ld de, (heap_end)  ; Load end of heap into DE 
90a1			    ld bc, 0           ; Initialize counter 
90a1			 
90a1					if DEBUG_FORTH_MALLOC 
90a1						DMARK "ma2" 
90a1						CALLMONITOR 
90a1					endif 
90a1			malloc_search_loop: 
90a1			    ; Check if current block is free 
90a1			    ld a, (hl)         ; Load current block's status (free or used) 
90a1			    cp 0               ; Compare with zero (free) 
90a1			    jr nz, malloc_skip_block_check  ; If not free, skip to the next block 
90a1			 
90a1			    ; Check if current block is large enough 
90a1			    ld a, (hl+1)       ; Load high byte of block size 
90a1			    cp l               ; Compare with low byte of requested size 
90a1			    jr nz, malloc_skip_block_check  ; If not large enough, skip to the next block 
90a1			 
90a1			    ld a, (hl+2)       ; Load low byte of block size 
90a1			    cp h               ; Compare with high byte of requested size 
90a1			    jr c, malloc_skip_block_check   ; If not large enough, skip to the next block 
90a1			 
90a1			    ; Mark block as used 
90a1			    ld (hl), 0xFF      ; Set status byte to indicate used block 
90a1			 
90a1			    ; Calculate remaining space in block 
90a1			    ld bc, 0           ; Clear BC 
90a1			    add hl, bc         ; Increment HL to point to start of data block 
90a1			    add hl, de         ; HL = HL + DE (total size) 
90a1			    ld bc, 1           ; Number of bytes to allocate for management overhead 
90a1			    add hl, bc         ; Add management overhead to start of data block 
90a1			 
90a1			    ; Save pointer to allocated block in HL 
90a1			if DEBUG_FORTH_MALLOC_HIGH 
90a1						DMARK "ma5" 
90a1			call malloc_guard_exit 
90a1			call malloc_guard_zerolen 
90a1			endif 
90a1			    ret 
90a1			 
90a1			malloc_skip_block_check: 
90a1			    ; Move to the next block 
90a1			    ld bc, 3           ; Size of management overhead 
90a1			    add hl, bc         ; Move to the next block 
90a1			    inc de             ; Increment counter 
90a1			 
90a1			    ; Check if we have reached the end of heap 
90a1			    ld a, e            ; Load low byte of heap end address 
90a1			    cp (hl)            ; Compare with low byte of current address 
90a1			    jr nz, malloc_search_loop  ; If not equal, continue searching 
90a1			    ld a, d            ; Load high byte of heap end address 
90a1			    cp 0               ; Check if it's zero (end of memory) 
90a1			    jr nz, malloc_search_loop  ; If not zero, continue searching 
90a1			 
90a1			    ; If we reached here, allocation failed 
90a1			    xor a              ; Set result to NULL 
90a1			if DEBUG_FORTH_MALLOC_HIGH 
90a1						DMARK "ma6" 
90a1			call malloc_guard_exit 
90a1			call malloc_guard_zerolen 
90a1			endif 
90a1			    ret 
90a1			malloc_exit: 
90a1			if DEBUG_FORTH_MALLOC_HIGH 
90a1						DMARK "ma7" 
90a1			call malloc_guard_exit 
90a1			call malloc_guard_zerolen 
90a1			endif 
90a1			    ret 
90a1			 
90a1			; Internal Free Function: 
90a1			; Input: 
90a1			;   HL: Pointer to memory block to free 
90a1			; Output: 
90a1			;   None 
90a1			 
90a1			free_internal: 
90a1			    ld de, (heap_start) ; Load start of heap into DE 
90a1			    ld bc, 0            ; Initialize counter 
90a1			 
90a1			free_search_loop: 
90a1			    ; Check if current block contains the pointer 
90a1			    ld a, l             ; Load low byte of pointer 
90a1			    cp (hl+1)           ; Compare with high byte of current block's address 
90a1			    jr nz, free_skip_block_check  ; If not equal, skip to the next block 
90a1			    ld a, h             ; Load high byte of pointer 
90a1			    cp (hl+2)           ; Compare with low byte of current block's address 
90a1			    jr nz, free_skip_block_check  ; If not equal, skip to the next block 
90a1			 
90a1			    ; Mark block as free 
90a1			    ld (hl), 0          ; Set status byte to indicate free block 
90a1			    ret                 ; Return 
90a1			 
90a1			free_skip_block_check: 
90a1			    ; Move to the next block 
90a1			    ld bc, 3            ; Size of management overhead 
90a1			    add hl, bc          ; Move to the next block 
90a1			    inc de              ; Increment counter 
90a1			 
90a1			    ; Check if we have reached the end of heap 
90a1			    ld a, e             ; Load low byte of heap end address 
90a1			    cp (hl)             ; Compare with low byte of current address 
90a1			    jr nz, free_search_loop  ; If not equal, continue searching 
90a1			    ld a, d             ; Load high byte of heap end address 
90a1			    cp 0                ; Check if it's zero (end of memory) 
90a1			    jr nz, free_search_loop  ; If not zero, continue searching 
90a1			 
90a1			    ; If we reached here, pointer is not found in heap 
90a1			    ret 
90a1			 
90a1			free_exit: 
90a1			    ret                 ; Return 
90a1			 
90a1			; Define heap start and end addresses 
90a1			;heap_start:    .dw 0xC000   ; Start of heap 
90a1			;heap_end:      .dw 0xE000   ; End of heap 
90a1			 
90a1			endif 
90a1			 
90a1			 
90a1			if MALLOC_1 
90a1			 
90a1			 
90a1			 
90a1			; from https://gist.github.com/tomstorey/947a8b084bad69391a4b2a1c5b6d69ca 
90a1			 
90a1			;moved to firmware.asm 
90a1			;heap_start        .equ  0x9000      ; Starting address of heap 
90a1			;heap_size         .equ  0x0100      ; Number of bytes available in heap 
90a1			 
90a1			;      .org 0 
90a1			;      jp    main 
90a1			 
90a1			 
90a1			;      .org  0x100 
90a1			;main: 
90a1			;      ld    HL, 0x8100 
90a1			;      ld    SP, HL 
90a1			; 
90a1			;      call  heap_init 
90a1			; 
90a1			;      ; Make some allocations 
90a1			;      ld    HL, 12 
90a1			;      call  malloc            ; Allocates 0x9004 
90a1			; 
90a1			;      ld    HL, 12 
90a1			;      call  malloc            ; Allocates 0x9014 
90a1			; 
90a1			;      ld    HL, 12 
90a1			;      call  malloc            ; Allocates 0x9024 
90a1			; 
90a1			;      ; Free some allocations 
90a1			;      ld    HL, 0x9014 
90a1			;      call  free 
90a1			; 
90a1			;      ld    HL, 0x9004 
90a1			;      call  free 
90a1			; 
90a1			;      ld    HL, 0x9024 
90a1			;      call  free 
90a1			; 
90a1			; 
90a1			;      halt 
90a1			 
90a1			 
90a1			;------------------------------------------------------------------------------ 
90a1			;     heap_init                                                               : 
90a1			;                                                                             : 
90a1			; Description                                                                 : 
90a1			;     Initialise the heap and make it ready for malloc and free operations.   : 
90a1			;                                                                             : 
90a1			;     The heap is maintained as a linked list, starting with an initial       : 
90a1			;     "dummy block" of zero size which is mainly used to hold a pointer to    : 
90a1			;     the first free block in the heap. Each block then points to the next    : 
90a1			;     free block within the heap, and the free list ends at the first block   : 
90a1			;     with a null pointer to the next free block.                             : 
90a1			;                                                                             : 
90a1			; Parameters                                                                  : 
90a1			;     Inputs are compile-time only. Two defines which specify the starting    : 
90a1			;     address of the heap and its size are required, along with a memory      : 
90a1			;     allocation of 4 consecutive bytes which is used for a dummy block which : 
90a1			;     principally stores a pointer to the first free block in the heap.       : 
90a1			;                                                                             : 
90a1			; Returns                                                                     : 
90a1			;     Nothing                                                                 : 
90a1			;------------------------------------------------------------------------------ 
90a1			heap_init: 
90a1 e5			      push  HL 
90a2			 
90a2			      ; Initialise free list struct 
90a2 21 00 e0		      ld    HL, heap_start 
90a5 22 fb df		      ld    (free_list), HL 
90a8 21 00 00		      ld    HL, 0 
90ab 22 fd df		      ld    (free_list+2), HL 
90ae			 
90ae			      ; Insert first free block at bottom of heap, consumes entire heap 
90ae 21 92 e2		      ld    HL, heap_start+heap_size-4 
90b1 22 00 e0		      ld    (heap_start), HL        ; Next block (end of free list) 
90b4 21 92 02		      ld    HL, heap_size-4 
90b7 22 02 e0		      ld    (heap_start+2), HL      ; Block size 
90ba			 
90ba			      ; Insert end of free list block at top of heap - two null words will 
90ba			      ; terminate the free list 
90ba 21 00 00		      ld    HL, 0 
90bd 22 94 e2		      ld    (heap_start+heap_size-2), HL 
90c0 22 92 e2		      ld    (heap_start+heap_size-4), HL 
90c3			 
90c3 e1			      pop   HL 
90c4			 
90c4 c9			      ret 
90c5			 
90c5			 
90c5			;------------------------------------------------------------------------------ 
90c5			;     malloc                                                                  : 
90c5			;                                                                             : 
90c5			; Description                                                                 : 
90c5			;     Allocates the wanted space from the heap and returns the address of the : 
90c5			;     first useable byte of the allocation.                                   : 
90c5			;                                                                             : 
90c5			;     Allocations can happen in one of two ways:                              : 
90c5			;                                                                             : 
90c5			;     1. A free block may be found which is the exact size wanted. In this    : 
90c5			;        case the block is removed from the free list and retuedn to the      : 
90c5			;        caller.                                                              : 
90c5			;     2. A free block may be found which is larger than the size wanted. In   : 
90c5			;        this case, the larger block is split into two. The first portion of  : 
90c5			;        this block will become the requested space by the malloc call and    : 
90c5			;        is returned to the caller. The second portion becomes a new free     : 
90c5			;        block, and the free list is adjusted to maintain continuity via this : 
90c5			;        newly created block.                                                 : 
90c5			;                                                                             : 
90c5			;     malloc does not set any initial value in the allocated space, the       : 
90c5			;     caller is required to do this as required.                              : 
90c5			;                                                                             : 
90c5			;     This implementation of malloc uses the stack exclusively, and is        : 
90c5			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
90c5			;     advisable to disable interrupts before calling malloc, and recommended  : 
90c5			;     to avoid the use of malloc inside ISRs in general.                      : 
90c5			;                                                                             : 
90c5			;     NOTE: heap_init must be called before malloc and free can be used.      : 
90c5			;                                                                             : 
90c5			; Parameters                                                                  : 
90c5			;     HL  Number of bytes wanted                                              : 
90c5			;                                                                             : 
90c5			; Returns                                                                     : 
90c5			;     HL  Address of the first useable byte of the allocation                 : 
90c5			;                                                                             : 
90c5			; Flags                                                                       : 
90c5			;     Z   Set if the allocation did not succeed, clear otherwise              : 
90c5			;                                                                             : 
90c5			; Stack frame                                                                 : 
90c5			;       |             |                                                       : 
90c5			;       +-------------+                                                       : 
90c5			;       |     BC      |                                                       : 
90c5			;       +-------------+                                                       : 
90c5			;       |     DE      |                                                       : 
90c5			;       +-------------+                                                       : 
90c5			;       |     IX      |                                                       : 
90c5			;       +-------------+                                                       : 
90c5			;       |  prev_free  |                                                       : 
90c5			;   +4  +-------------+                                                       : 
90c5			;       |  this_free  |                                                       : 
90c5			;   +2  +-------------+                                                       : 
90c5			;       |  next_free  |                                                       : 
90c5			;   +0  +-------------+                                                       : 
90c5			;       |             |                                                       : 
90c5			;                                                                             : 
90c5			;------------------------------------------------------------------------------ 
90c5			 
90c5			 
90c5			;malloc: 
90c5			; 
90c5			;	SAVESP ON 1 
90c5			; 
90c5			;	call malloc_code 
90c5			; 
90c5			;	CHECKSP ON 1 
90c5			;	ret 
90c5			 
90c5			 
90c5			malloc: 
90c5 c5			      push  BC 
90c6 d5			      push  DE 
90c7 dd e5		      push  IX 
90c9			if DEBUG_FORTH_MALLOC_HIGH 
90c9			call malloc_guard_entry 
90c9			endif 
90c9			 
90c9					if DEBUG_FORTH_MALLOC 
90c9						DMARK "mal" 
90c9						CALLMONITOR 
90c9					endif 
90c9 7c			      ld    A, H                    ; Exit if no space requested 
90ca b5			      or    L 
90cb ca 8a 91		      jp    Z, malloc_early_exit 
90ce			 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			; 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			;inc hl 
90ce			 
90ce			 
90ce			 
90ce			 
90ce					if DEBUG_FORTH_MALLOC 
90ce						DMARK "maA" 
90ce						CALLMONITOR 
90ce					endif 
90ce			      ; Set up stack frame 
90ce eb			      ex    DE, HL 
90cf 21 fa ff		      ld    HL, -6                  ; Reserve 6 bytes for stack frame 
90d2 39			      add   HL, SP 
90d3 f9			      ld    SP, HL 
90d4 dd 21 00 00	      ld    IX, 0                   ; Use IX as a frame pointer 
90d8 dd 39		      add   IX, SP 
90da			 
90da			      ; Setup initial state 
90da 21 04 00		      ld    HL, 4                   ; want must also include space used by block struct 
90dd 19			      add   HL, DE 
90de			 
90de 44			      ld    B, H                    ; Move want to BC 
90df 4d			      ld    C, L 
90e0			 
90e0 21 fb df		      ld    HL, free_list           ; Store prev_free ptr to stack 
90e3 dd 75 04		      ld    (IX+4), L 
90e6 dd 74 05		      ld    (IX+5), H 
90e9			 
90e9 5e			      ld    E, (HL)                 ; Store this_free ptr to stack 
90ea 23			      inc   HL 
90eb 56			      ld    D, (HL) 
90ec dd 73 02		      ld    (IX+2), E 
90ef dd 72 03		      ld    (IX+3), D 
90f2 eb			      ex    DE, HL                  ; this_free ptr into HL 
90f3			 
90f3					if DEBUG_FORTH_MALLOC 
90f3						DMARK "maB" 
90f3						CALLMONITOR 
90f3					endif 
90f3			      ; Loop through free block list to find some space 
90f3			malloc_find_space: 
90f3 5e			      ld    E, (HL)                 ; Load next_free ptr into DE 
90f4 23			      inc   HL 
90f5 56			      ld    D, (HL) 
90f6			 
90f6 7a			      ld    A, D                    ; Check for null next_free ptr - end of free list 
90f7 b3			      or    E 
90f8 ca 84 91		      jp    Z, malloc_no_space 
90fb			 
90fb dd 73 00		      ld    (IX+0), E               ; Store next_free ptr to stack 
90fe dd 72 01		      ld    (IX+1), D 
9101			 
9101			      ; Does this block have enough space to make the allocation? 
9101 23			      inc   HL                      ; Load free block size into DE 
9102 5e			      ld    E, (HL) 
9103 23			      inc   HL 
9104 56			      ld    D, (HL) 
9105			 
9105 eb			      ex    DE, HL                  ; Check size of block against want 
9106 b7			      or    A                       ; Ensure carry flag clear 
9107 ed 42		      sbc   HL, BC 
9109 e5			      push  HL                      ; Store the result for later (new block size) 
910a			 
910a ca 59 91		      jp   Z, malloc_alloc_fit     ; Z means block size matches want - can allocate 
910d 30 1b		      jr    NC, malloc_alloc_split  ; NC means block is bigger than want - can allocate 
910f			 
910f			      ; this_free block is not big enough, setup ptrs to test next free block 
910f e1			      pop   HL                      ; Discard previous result 
9110			 
9110 dd 6e 02		      ld    L, (IX+2)               ; Move this_free ptr into prev_free 
9113 dd 66 03		      ld    H, (IX+3) 
9116 dd 75 04		      ld    (IX+4), L 
9119 dd 74 05		      ld    (IX+5), H 
911c			 
911c dd 6e 00		      ld    L, (IX+0)               ; Move next_free ptr into this_free 
911f dd 66 01		      ld    H, (IX+1) 
9122 dd 75 02		      ld    (IX+2), L 
9125 dd 74 03		      ld    (IX+3), H 
9128			 
9128					if DEBUG_FORTH_MALLOC 
9128						DMARK "MA>" 
9128						CALLMONITOR 
9128					endif 
9128 18 c9		      jr    malloc_find_space 
912a			 
912a			      ; split a bigger block into two - requested size and remaining size 
912a			malloc_alloc_split: 
912a					if DEBUG_FORTH_MALLOC 
912a						DMARK "MAs" 
912a						CALLMONITOR 
912a					endif 
912a eb			      ex    DE, HL                  ; Calculate address of new free block 
912b 2b			      dec   HL 
912c 2b			      dec   HL 
912d 2b			      dec   HL 
912e 09			      add   HL, BC 
912f			 
912f			      ; Create a new block and point it at next_free 
912f dd 5e 00		      ld    E, (IX+0)               ; Load next_free ptr into DE 
9132 dd 56 01		      ld    D, (IX+1) 
9135			 
9135 73			      ld    (HL), E                 ; Store next_free ptr into new block 
9136 23			      inc   HL 
9137 72			      ld    (HL), D 
9138			 
9138 d1			      pop   DE                      ; Store size of new block into new block 
9139 23			      inc   HL 
913a 73			      ld    (HL), E 
913b 23			      inc   HL 
913c 72			      ld    (HL), D 
913d			 
913d			      ; Update this_free ptr to point to new block 
913d 2b			      dec   HL 
913e 2b			      dec   HL 
913f 2b			      dec   HL 
9140			 
9140 dd 5e 02		      ld    E, (IX+2)               ; Take a copy of current this_free ptr 
9143 dd 56 03		      ld    D, (IX+3) 
9146			 
9146 dd 75 02		      ld    (IX+2), L               ; Store new block addr as this_free ptr 
9149 dd 74 03		      ld    (IX+3), H 
914c			 
914c			      ; Modify this_free block to be allocation 
914c eb			      ex    DE, HL 
914d af			      xor   A                       ; Null the next block ptr of allocated block 
914e 77			      ld    (HL), A 
914f 23			      inc   HL 
9150 77			      ld    (HL), A 
9151			 
9151 23			      inc   HL                      ; Store want size into allocated block 
9152 71			      ld    (HL), C 
9153 23			      inc   HL 
9154 70			      ld    (HL), B 
9155 23			      inc   HL 
9156 e5			      push  HL                      ; Address of allocation to return 
9157			 
9157 18 19		      jr    malloc_update_links 
9159			 
9159			malloc_alloc_fit: 
9159 e1			      pop   HL                      ; Dont need new block size, want is exact fit 
915a			 
915a					if DEBUG_FORTH_MALLOC 
915a						DMARK "MAf" 
915a						CALLMONITOR 
915a					endif 
915a			      ; Modify this_free block to be allocation 
915a eb			      ex    DE, HL 
915b 2b			      dec   HL 
915c 2b			      dec   HL 
915d 2b			      dec   HL 
915e			 
915e af			      xor   A                       ; Null the next block ptr of allocated block 
915f 77			      ld    (HL), A 
9160 23			      inc   HL 
9161 77			      ld    (HL), A 
9162			 
9162 23			      inc   HL                      ; Store address of allocation to return 
9163 23			      inc   HL 
9164 23			      inc   HL 
9165 e5			      push  HL 
9166			 
9166			      ; Copy next_free ptr to this_free, remove allocated block from free list 
9166 dd 6e 00		      ld    L, (IX+0)               ; next_free to HL 
9169 dd 66 01		      ld    H, (IX+1) 
916c			 
916c dd 75 02		      ld    (IX+2), L               ; HL to this_free 
916f dd 74 03		      ld    (IX+3), H 
9172			 
9172			 
9172			malloc_update_links: 
9172			      ; Update prev_free ptr to point to this_free 
9172 dd 6e 04		      ld    L, (IX+4)               ; prev_free ptr to HL 
9175 dd 66 05		      ld    H, (IX+5) 
9178			 
9178 dd 5e 02		      ld    E, (IX+2)               ; this_free ptr to DE 
917b dd 56 03		      ld    D, (IX+3) 
917e			 
917e 73			      ld    (HL), E                 ; this_free ptr into prev_free 
917f 23			      inc   HL 
9180 72			      ld    (HL), D 
9181			 
9181					if DEBUG_FORTH_MALLOC 
9181						DMARK "Mul" 
9181						CALLMONITOR 
9181					endif 
9181			      ; Clear the Z flag to indicate successful allocation 
9181 7a			      ld    A, D 
9182 b3			      or    E 
9183			 
9183 d1			      pop   DE                      ; Address of allocation 
9184					if DEBUG_FORTH_MALLOC 
9184						DMARK "MAu" 
9184						CALLMONITOR 
9184					endif 
9184			 
9184			malloc_no_space: 
9184 21 06 00		      ld    HL, 6                   ; Clean up stack frame 
9187 39			      add   HL, SP 
9188 f9			      ld    SP, HL 
9189			 
9189 eb			      ex    DE, HL                  ; Alloc addr into HL for return 
918a					if DEBUG_FORTH_MALLOC 
918a						DMARK "MAN" 
918a						CALLMONITOR 
918a					endif 
918a			 
918a			malloc_early_exit: 
918a					if DEBUG_FORTH_MALLOC 
918a						DMARK "MAx" 
918a						CALLMONITOR 
918a					endif 
918a dd e1		      pop   IX 
918c d1			      pop   DE 
918d c1			      pop   BC 
918e			 
918e			if DEBUG_FORTH_MALLOC_HIGH 
918e			call malloc_guard_exit 
918e			call malloc_guard_zerolen 
918e			endif 
918e c9			      ret 
918f			 
918f			 
918f			;------------------------------------------------------------------------------ 
918f			;     free                                                                    : 
918f			;                                                                             : 
918f			; Description                                                                 : 
918f			;     Return the space pointed to by HL to the heap. HL must be an address as : 
918f			;     returned by malloc, otherwise the behaviour is undefined.               : 
918f			;                                                                             : 
918f			;     Where possible, directly adjacent free blocks will be merged together   : 
918f			;     into larger blocks to help ensure that the heap does not become         : 
918f			;     excessively fragmented.                                                 : 
918f			;                                                                             : 
918f			;     free does not clear or set any other value into the freed space, and    : 
918f			;     therefore its contents may be visible through subsequent malloc's. The  : 
918f			;     caller should clear the freed space as required.                        : 
918f			;                                                                             : 
918f			;     This implementation of free uses the stack exclusively, and is          : 
918f			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
918f			;     advisable to disable interrupts before calling free, and recommended    : 
918f			;     to avoid the use of free inside ISRs in general.                        : 
918f			;                                                                             : 
918f			;     NOTE: heap_init must be called before malloc and free can be used.      : 
918f			;                                                                             : 
918f			; Parameters                                                                  : 
918f			;     HL  Pointer to address of first byte of allocation to be freed          : 
918f			;                                                                             : 
918f			; Returns                                                                     : 
918f			;     Nothing                                                                 : 
918f			;                                                                             : 
918f			; Stack frame                                                                 : 
918f			;       |             |                                                       : 
918f			;       +-------------+                                                       : 
918f			;       |     BC      |                                                       : 
918f			;       +-------------+                                                       : 
918f			;       |     DE      |                                                       : 
918f			;       +-------------+                                                       : 
918f			;       |     IX      |                                                       : 
918f			;       +-------------+                                                       : 
918f			;       |  prev_free  |                                                       : 
918f			;   +2  +-------------+                                                       : 
918f			;       |  next_free  |                                                       : 
918f			;   +0  +-------------+                                                       : 
918f			;       |             |                                                       : 
918f			;                                                                             : 
918f			;------------------------------------------------------------------------------ 
918f			free: 
918f c5			      push  BC 
9190 d5			      push  DE 
9191 dd e5		      push  IX 
9193			 
9193 7c			      ld    A, H                    ; Exit if ptr is null 
9194 b5			      or    L 
9195 ca 59 92		      jp    Z, free_early_exit 
9198			 
9198			      ; Set up stack frame 
9198 eb			      ex    DE, HL 
9199 21 fc ff		      ld    HL, -4                  ; Reserve 4 bytes for stack frame 
919c 39			      add   HL, SP 
919d f9			      ld    SP, HL 
919e dd 21 00 00	      ld    IX, 0                   ; Use IX as a frame pointer 
91a2 dd 39		      add   IX, SP 
91a4			 
91a4			      ; The address in HL points to the start of the useable allocated space, 
91a4			      ; but the block struct starts 4 bytes before this. Sub 4 to get the 
91a4			      ; address of the block itself. 
91a4 eb			      ex    DE, HL 
91a5 11 fc ff		      ld    DE, -4 
91a8 19			      add   HL, DE 
91a9			 
91a9			      ; An allocated block must have a null next block pointer in it 
91a9 7e			      ld    A, (HL) 
91aa 23			      inc   HL 
91ab b6			      or    (HL) 
91ac c2 54 92		      jp    NZ, free_done 
91af			 
91af 2b			      dec   HL 
91b0			 
91b0 44			      ld    B, H                    ; Copy HL to BC 
91b1 4d			      ld    C, L 
91b2			 
91b2			      ; Loop through the free list to find the first block with an address 
91b2			      ; higher than the block being freed 
91b2 21 fb df		      ld    HL, free_list 
91b5			 
91b5			free_find_higher_block: 
91b5 5e			      ld    E, (HL)                 ; Load next ptr from free block 
91b6 23			      inc   HL 
91b7 56			      ld    D, (HL) 
91b8 2b			      dec   HL 
91b9			 
91b9 dd 73 00		      ld    (IX+0), E               ; Save ptr to next free block 
91bc dd 72 01		      ld    (IX+1), D 
91bf dd 75 02		      ld    (IX+2), L               ; Save ptr to prev free block 
91c2 dd 74 03		      ld    (IX+3), H 
91c5			 
91c5 78			      ld    A, B                    ; Check if DE is greater than BC 
91c6 ba			      cp    D                       ; Compare MSB first 
91c7 28 02		      jr    Z, $+4                  ; MSB the same, compare LSB 
91c9 30 04		      jr    NC, free_find_higher_block_skip 
91cb 79			      ld    A, C 
91cc bb			      cp    E                       ; Then compare LSB 
91cd 38 08		      jr    C, free_found_higher_block 
91cf			 
91cf			free_find_higher_block_skip: 
91cf 7a			      ld    A, D                    ; Reached the end of the free list? 
91d0 b3			      or    E 
91d1 ca 54 92		      jp    Z, free_done 
91d4			 
91d4 eb			      ex    DE, HL 
91d5			 
91d5 18 de		      jr    free_find_higher_block 
91d7			 
91d7			free_found_higher_block: 
91d7			      ; Insert freed block between prev and next free blocks 
91d7 71			      ld    (HL), C                 ; Point prev free block to freed block 
91d8 23			      inc   HL 
91d9 70			      ld    (HL), B 
91da			 
91da 60			      ld    H, B                    ; Point freed block at next free block 
91db 69			      ld    L, C 
91dc 73			      ld    (HL), E 
91dd 23			      inc   HL 
91de 72			      ld    (HL), D 
91df			 
91df			      ; Check if the freed block is adjacent to the next free block 
91df 23			      inc   HL                      ; Load size of freed block into HL 
91e0 5e			      ld    E, (HL) 
91e1 23			      inc   HL 
91e2 56			      ld    D, (HL) 
91e3 eb			      ex    DE, HL 
91e4			 
91e4 09			      add   HL, BC                  ; Add addr of freed block and its size 
91e5			 
91e5 dd 5e 00		      ld    E, (IX+0)               ; Load addr of next free block into DE 
91e8 dd 56 01		      ld    D, (IX+1) 
91eb			 
91eb b7			      or    A                       ; Clear the carry flag 
91ec ed 52		      sbc   HL, DE                  ; Subtract addrs to compare adjacency 
91ee 20 22		      jr    NZ, free_check_adjacent_to_prev 
91f0			 
91f0			      ; Freed block is adjacent to next, merge into one bigger block 
91f0 eb			      ex    DE, HL                  ; Load next ptr from next block into DE 
91f1 5e			      ld    E, (HL) 
91f2 23			      inc   HL 
91f3 56			      ld    D, (HL) 
91f4 e5			      push  HL                      ; Save ptr to next block for later 
91f5			 
91f5 60			      ld    H, B                    ; Store ptr from next block into freed block 
91f6 69			      ld    L, C 
91f7 73			      ld    (HL), E 
91f8 23			      inc   HL 
91f9 72			      ld    (HL), D 
91fa			 
91fa e1			      pop   HL                      ; Restore ptr to next block 
91fb 23			      inc   HL                      ; Load size of next block into DE 
91fc 5e			      ld    E, (HL) 
91fd 23			      inc   HL 
91fe 56			      ld    D, (HL) 
91ff d5			      push  DE                      ; Save next block size for later 
9200			 
9200 60			      ld    H, B                    ; Load size of freed block into HL 
9201 69			      ld    L, C 
9202 23			      inc   HL 
9203 23			      inc   HL 
9204 5e			      ld    E, (HL) 
9205 23			      inc   HL 
9206 56			      ld    D, (HL) 
9207 eb			      ex    DE, HL 
9208			 
9208 d1			      pop   DE                      ; Restore size of next block 
9209 19			      add   HL, DE                  ; Add sizes of both blocks 
920a eb			      ex    DE, HL 
920b			 
920b 60			      ld    H, B                    ; Store new bigger size into freed block 
920c 69			      ld    L, C 
920d 23			      inc   HL 
920e 23			      inc   HL 
920f 73			      ld    (HL), E 
9210 23			      inc   HL 
9211 72			      ld    (HL), D 
9212			 
9212			free_check_adjacent_to_prev: 
9212			      ; Check if the freed block is adjacent to the prev free block 
9212 dd 6e 02		      ld    L, (IX+2)               ; Prev free block ptr into HL 
9215 dd 66 03		      ld    H, (IX+3) 
9218			 
9218 23			      inc   HL                      ; Size of prev free block into DE 
9219 23			      inc   HL 
921a 5e			      ld    E, (HL) 
921b 23			      inc   HL 
921c 56			      ld    D, (HL) 
921d 2b			      dec   HL 
921e 2b			      dec   HL 
921f 2b			      dec   HL 
9220			 
9220 19			      add   HL, DE                  ; Add prev block addr and size 
9221			 
9221 b7			      or    A                       ; Clear the carry flag 
9222 ed 42		      sbc   HL, BC                  ; Subtract addrs to compare adjacency 
9224 20 2e		      jr    NZ, free_done 
9226			 
9226			      ; Freed block is adjacent to prev, merge into one bigger block 
9226 60			      ld    H, B                    ; Load next ptr from freed block into DE 
9227 69			      ld    L, C 
9228 5e			      ld    E, (HL) 
9229 23			      inc   HL 
922a 56			      ld    D, (HL) 
922b e5			      push  HL                      ; Save freed block ptr for later 
922c			 
922c dd 6e 02		      ld    L, (IX+2)               ; Store freed block ptr into prev block 
922f dd 66 03		      ld    H, (IX+3) 
9232 73			      ld    (HL), E 
9233 23			      inc   HL 
9234 72			      ld    (HL), D 
9235			 
9235 e1			      pop   HL                      ; Restore freed block ptr 
9236 23			      inc   HL                      ; Load size of freed block into DE 
9237 5e			      ld    E, (HL) 
9238 23			      inc   HL 
9239 56			      ld    D, (HL) 
923a d5			      push  DE                      ; Save freed block size for later 
923b			 
923b dd 6e 02		      ld    L, (IX+2)               ; Load size of prev block into DE 
923e dd 66 03		      ld    H, (IX+3) 
9241 23			      inc   HL 
9242 23			      inc   HL 
9243 5e			      ld    E, (HL) 
9244 23			      inc   HL 
9245 56			      ld    D, (HL) 
9246			 
9246 e1			      pop   HL                      ; Add sizes of both blocks 
9247 19			      add   HL, DE 
9248 eb			      ex    DE, HL 
9249			 
9249 dd 6e 02		      ld    L, (IX+2)               ; Store new bigger size into prev block 
924c dd 66 03		      ld    H, (IX+3) 
924f 23			      inc   HL 
9250 23			      inc   HL 
9251 73			      ld    (HL), E 
9252 23			      inc   HL 
9253 72			      ld    (HL), D 
9254			 
9254			free_done: 
9254 21 04 00		      ld    HL, 4                   ; Clean up stack frame 
9257 39			      add   HL, SP 
9258 f9			      ld    SP, HL 
9259			 
9259			free_early_exit: 
9259 dd e1		      pop   IX 
925b d1			      pop   DE 
925c c1			      pop   BC 
925d			 
925d c9			      ret 
925e			 
925e			; moved to firmware.asm 
925e			; 
925e			;free_list         .dw   0     ; Block struct for start of free list (MUST be 4 bytes) 
925e			;                  .dw   0 
925e			 
925e			 
925e			endif 
925e			 
925e			 
925e			if MALLOC_3 
925e			; https://gist.githubusercontent.com/tomstorey/947a8b084bad69391a4b2a1c5b6d69ca/raw/5a08fb30a480d98c0deb4a6afe2d48961cc8e9d9/z80_malloc.s 
925e			;heap_start        .equ  0x9000      ; Starting address of heap 
925e			;heap_size         .equ  0x0100      ; Number of bytes available in heap 
925e			; 
925e			 ;     .org 0 
925e			  ;    jp    main 
925e			; 
925e			; 
925e			 ;     .org  0x100 
925e			;main: 
925e			 ;     ld    HL, 0x8100 
925e			  ;    ld    SP, HL 
925e			; 
925e			;      call  heap_init 
925e			 
925e			      ; Make some allocations 
925e			;      ld    HL, 12 
925e			;      call  malloc            ; Allocates 0x9004 
925e			; 
925e			 ;     ld    HL, 12 
925e			;      call  malloc            ; Allocates 0x9014 
925e			 
925e			;      ld    HL, 12 
925e			;      call  malloc            ; Allocates 0x9024 
925e			 
925e			      ; Free some allocations 
925e			;      ld    HL, 0x9014 
925e			;      call  free 
925e			 
925e			;      ld    HL, 0x9004 
925e			;      call  free 
925e			; 
925e			;      ld    HL, 0x9024 
925e			;      call  free 
925e			 
925e			 
925e			 ;     halt 
925e			 
925e			 
925e			;------------------------------------------------------------------------------ 
925e			;     heap_init                                                               : 
925e			;                                                                             : 
925e			; Description                                                                 : 
925e			;     Initialise the heap and make it ready for malloc and free operations.   : 
925e			;                                                                             : 
925e			;     The heap is maintained as a linked list, starting with an initial       : 
925e			;     "dummy block" of zero size which is mainly used to hold a pointer to    : 
925e			;     the first free block in the heap. Each block then points to the next    : 
925e			;     free block within the heap, and the free list ends at the first block   : 
925e			;     with a null pointer to the next free block.                             : 
925e			;                                                                             : 
925e			; Parameters                                                                  : 
925e			;     Inputs are compile-time only. Two defines which specify the starting    : 
925e			;     address of the heap and its size are required, along with a memory      : 
925e			;     allocation of 4 consecutive bytes which is used for a dummy block which : 
925e			;     principally stores a pointer to the first free block in the heap.       : 
925e			;                                                                             : 
925e			; Returns                                                                     : 
925e			;     Nothing                                                                 : 
925e			;------------------------------------------------------------------------------ 
925e			heap_init: 
925e			      push  HL 
925e			 
925e			      ; Initialise free list struct 
925e			      ld    HL, heap_start 
925e			      ld    (free_list), HL 
925e			      ld    HL, 0 
925e			      ld    (free_list+2), HL 
925e			 
925e			      ; Insert first free block at bottom of heap, consumes entire heap 
925e			      ld    HL, heap_start+heap_size-4 
925e			      ld    (heap_start), HL        ; Next block (end of free list) 
925e			      ld    HL, heap_size-4 
925e			      ld    (heap_start+2), HL      ; Block size 
925e			 
925e			      ; Insert end of free list block at top of heap - two null words will 
925e			      ; terminate the free list 
925e			      ld    HL, 0 
925e			      ld    (heap_start+heap_size-2), HL 
925e			      ld    (heap_start+heap_size-4), HL 
925e			 
925e			      pop   HL 
925e			 
925e			      ret 
925e			 
925e			 
925e			;------------------------------------------------------------------------------ 
925e			;     malloc                                                                  : 
925e			;                                                                             : 
925e			; Description                                                                 : 
925e			;     Allocates the wanted space from the heap and returns the address of the : 
925e			;     first useable byte of the allocation.                                   : 
925e			;                                                                             : 
925e			;     Allocations can happen in one of two ways:                              : 
925e			;                                                                             : 
925e			;     1. A free block may be found which is the exact size wanted. In this    : 
925e			;        case the block is removed from the free list and retuedn to the      : 
925e			;        caller.                                                              : 
925e			;     2. A free block may be found which is larger than the size wanted. In   : 
925e			;        this case, the larger block is split into two. The first portion of  : 
925e			;        this block will become the requested space by the malloc call and    : 
925e			;        is returned to the caller. The second portion becomes a new free     : 
925e			;        block, and the free list is adjusted to maintain continuity via this : 
925e			;        newly created block.                                                 : 
925e			;                                                                             : 
925e			;     malloc does not set any initial value in the allocated space, the       : 
925e			;     caller is required to do this as required.                              : 
925e			;                                                                             : 
925e			;     This implementation of malloc uses the stack exclusively, and is        : 
925e			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
925e			;     advisable to disable interrupts before calling malloc, and recommended  : 
925e			;     to avoid the use of malloc inside ISRs in general.                      : 
925e			;                                                                             : 
925e			;     NOTE: heap_init must be called before malloc and free can be used.      : 
925e			;                                                                             : 
925e			; Parameters                                                                  : 
925e			;     HL  Number of bytes wanted                                              : 
925e			;                                                                             : 
925e			; Returns                                                                     : 
925e			;     HL  Address of the first useable byte of the allocation                 : 
925e			;                                                                             : 
925e			; Flags                                                                       : 
925e			;     Z   Set if the allocation did not succeed, clear otherwise              : 
925e			;                                                                             : 
925e			; Stack frame                                                                 : 
925e			;       |             |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |     BC      |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |     DE      |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |     IX      |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |  prev_free  |                                                       : 
925e			;   +4  +-------------+                                                       : 
925e			;       |  this_free  |                                                       : 
925e			;   +2  +-------------+                                                       : 
925e			;       |  next_free  |                                                       : 
925e			;   +0  +-------------+                                                       : 
925e			;       |             |                                                       : 
925e			;                                                                             : 
925e			;------------------------------------------------------------------------------ 
925e			malloc: 
925e			      push  BC 
925e			      push  DE 
925e			      push  IX 
925e			 
925e			      ld    A, H                    ; Exit if no space requested 
925e			      or    L 
925e			      jp    Z, malloc_early_exit 
925e			 
925e			      ; Set up stack frame 
925e			      ex    DE, HL 
925e			      ld    HL, -6                  ; Reserve 6 bytes for stack frame 
925e			      add   HL, SP 
925e			      ld    SP, HL 
925e			      ld    IX, 0                   ; Use IX as a frame pointer 
925e			      add   IX, SP 
925e			 
925e			      ; Setup initial state 
925e			      ld    HL, 4                   ; want must also include space used by block struct 
925e			      add   HL, DE 
925e			 
925e			      ld    B, H                    ; Move want to BC 
925e			      ld    C, L 
925e			 
925e			      ld    HL, free_list           ; Store prev_free ptr to stack 
925e			      ld    (IX+4), L 
925e			      ld    (IX+5), H 
925e			 
925e			      ld    E, (HL)                 ; Store this_free ptr to stack 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      ld    (IX+2), E 
925e			      ld    (IX+3), D 
925e			      ex    DE, HL                  ; this_free ptr into HL 
925e			 
925e			      ; Loop through free block list to find some space 
925e			malloc_find_space: 
925e			      ld    E, (HL)                 ; Load next_free ptr into DE 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			 
925e			      ld    A, D                    ; Check for null next_free ptr - end of free list 
925e			      or    E 
925e			      jp    Z, malloc_no_space 
925e			 
925e			      ld    (IX+0), E               ; Store next_free ptr to stack 
925e			      ld    (IX+1), D 
925e			 
925e			      ; Does this block have enough space to make the allocation? 
925e			      inc   HL                      ; Load free block size into DE 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			 
925e			      ex    DE, HL                  ; Check size of block against want 
925e			      or    A                       ; Ensure carry flag clear 
925e			      sbc   HL, BC 
925e			      push  HL                      ; Store the result for later (new block size) 
925e			 
925e			      jr    Z, malloc_alloc_fit     ; Z means block size matches want - can allocate 
925e			      jr    NC, malloc_alloc_split  ; NC means block is bigger than want - can allocate 
925e			 
925e			      ; this_free block is not big enough, setup ptrs to test next free block 
925e			      pop   HL                      ; Discard previous result 
925e			 
925e			      ld    L, (IX+2)               ; Move this_free ptr into prev_free 
925e			      ld    H, (IX+3) 
925e			      ld    (IX+4), L 
925e			      ld    (IX+5), H 
925e			 
925e			      ld    L, (IX+0)               ; Move next_free ptr into this_free 
925e			      ld    H, (IX+1) 
925e			      ld    (IX+2), L 
925e			      ld    (IX+3), H 
925e			 
925e			      jr    malloc_find_space 
925e			 
925e			      ; split a bigger block into two - requested size and remaining size 
925e			malloc_alloc_split: 
925e			      ex    DE, HL                  ; Calculate address of new free block 
925e			      dec   HL 
925e			      dec   HL 
925e			      dec   HL 
925e			      add   HL, BC 
925e			 
925e			      ; Create a new block and point it at next_free 
925e			      ld    E, (IX+0)               ; Load next_free ptr into DE 
925e			      ld    D, (IX+1) 
925e			 
925e			      ld    (HL), E                 ; Store next_free ptr into new block 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			      pop   DE                      ; Store size of new block into new block 
925e			      inc   HL 
925e			      ld    (HL), E 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			      ; Update this_free ptr to point to new block 
925e			      dec   HL 
925e			      dec   HL 
925e			      dec   HL 
925e			 
925e			      ld    E, (IX+2)               ; Take a copy of current this_free ptr 
925e			      ld    D, (IX+3) 
925e			 
925e			      ld    (IX+2), L               ; Store new block addr as this_free ptr 
925e			      ld    (IX+3), H 
925e			 
925e			      ; Modify this_free block to be allocation 
925e			      ex    DE, HL 
925e			      xor   A                       ; Null the next block ptr of allocated block 
925e			      ld    (HL), A 
925e			      inc   HL 
925e			      ld    (HL), A 
925e			 
925e			      inc   HL                      ; Store want size into allocated block 
925e			      ld    (HL), C 
925e			      inc   HL 
925e			      ld    (HL), B 
925e			      inc   HL 
925e			      push  HL                      ; Address of allocation to return 
925e			 
925e			      jr    malloc_update_links 
925e			 
925e			malloc_alloc_fit: 
925e			      pop   HL                      ; Dont need new block size, want is exact fit 
925e			 
925e			      ; Modify this_free block to be allocation 
925e			      ex    DE, HL 
925e			      dec   HL 
925e			      dec   HL 
925e			      dec   HL 
925e			 
925e			      xor   A                       ; Null the next block ptr of allocated block 
925e			      ld    (HL), A 
925e			      inc   HL 
925e			      ld    (HL), A 
925e			 
925e			      inc   HL                      ; Store address of allocation to return 
925e			      inc   HL 
925e			      inc   HL 
925e			      push  HL 
925e			 
925e			      ; Copy next_free ptr to this_free, remove allocated block from free list 
925e			      ld    L, (IX+0)               ; next_free to HL 
925e			      ld    H, (IX+1) 
925e			 
925e			      ld    (IX+2), L               ; HL to this_free 
925e			      ld    (IX+3), H 
925e			 
925e			 
925e			malloc_update_links: 
925e			      ; Update prev_free ptr to point to this_free 
925e			      ld    L, (IX+4)               ; prev_free ptr to HL 
925e			      ld    H, (IX+5) 
925e			 
925e			      ld    E, (IX+2)               ; this_free ptr to DE 
925e			      ld    D, (IX+3) 
925e			 
925e			      ld    (HL), E                 ; this_free ptr into prev_free 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			      ; Clear the Z flag to indicate successful allocation 
925e			      ld    A, D 
925e			      or    E 
925e			 
925e			      pop   DE                      ; Address of allocation 
925e			 
925e			malloc_no_space: 
925e			      ld    HL, 6                   ; Clean up stack frame 
925e			      add   HL, SP 
925e			      ld    SP, HL 
925e			 
925e			      ex    DE, HL                  ; Alloc addr into HL for return 
925e			 
925e			malloc_early_exit: 
925e			      pop   IX 
925e			      pop   DE 
925e			      pop   BC 
925e			 
925e			      ret 
925e			 
925e			 
925e			;------------------------------------------------------------------------------ 
925e			;     free                                                                    : 
925e			;                                                                             : 
925e			; Description                                                                 : 
925e			;     Return the space pointed to by HL to the heap. HL must be an address as : 
925e			;     returned by malloc, otherwise the behaviour is undefined.               : 
925e			;                                                                             : 
925e			;     Where possible, directly adjacent free blocks will be merged together   : 
925e			;     into larger blocks to help ensure that the heap does not become         : 
925e			;     excessively fragmented.                                                 : 
925e			;                                                                             : 
925e			;     free does not clear or set any other value into the freed space, and    : 
925e			;     therefore its contents may be visible through subsequent malloc's. The  : 
925e			;     caller should clear the freed space as required.                        : 
925e			;                                                                             : 
925e			;     This implementation of free uses the stack exclusively, and is          : 
925e			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
925e			;     advisable to disable interrupts before calling free, and recommended    : 
925e			;     to avoid the use of free inside ISRs in general.                        : 
925e			;                                                                             : 
925e			;     NOTE: heap_init must be called before malloc and free can be used.      : 
925e			;                                                                             : 
925e			; Parameters                                                                  : 
925e			;     HL  Pointer to address of first byte of allocation to be freed          : 
925e			;                                                                             : 
925e			; Returns                                                                     : 
925e			;     Nothing                                                                 : 
925e			;                                                                             : 
925e			; Stack frame                                                                 : 
925e			;       |             |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |     BC      |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |     DE      |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |     IX      |                                                       : 
925e			;       +-------------+                                                       : 
925e			;       |  prev_free  |                                                       : 
925e			;   +2  +-------------+                                                       : 
925e			;       |  next_free  |                                                       : 
925e			;   +0  +-------------+                                                       : 
925e			;       |             |                                                       : 
925e			;                                                                             : 
925e			;------------------------------------------------------------------------------ 
925e			free: 
925e			      push  BC 
925e			      push  DE 
925e			      push  IX 
925e			 
925e			      ld    A, H                    ; Exit if ptr is null 
925e			      or    L 
925e			      jp    Z, free_early_exit 
925e			 
925e			      ; Set up stack frame 
925e			      ex    DE, HL 
925e			      ld    HL, -4                  ; Reserve 4 bytes for stack frame 
925e			      add   HL, SP 
925e			      ld    SP, HL 
925e			      ld    IX, 0                   ; Use IX as a frame pointer 
925e			      add   IX, SP 
925e			 
925e			      ; The address in HL points to the start of the useable allocated space, 
925e			      ; but the block struct starts 4 bytes before this. Sub 4 to get the 
925e			      ; address of the block itself. 
925e			      ex    DE, HL 
925e			      ld    DE, -4 
925e			      add   HL, DE 
925e			 
925e			      ; An allocated block must have a null next block pointer in it 
925e			      ld    A, (HL) 
925e			      inc   HL 
925e			      or    (HL) 
925e			      jp    NZ, free_done 
925e			 
925e			      dec   HL 
925e			 
925e			      ld    B, H                    ; Copy HL to BC 
925e			      ld    C, L 
925e			 
925e			      ; Loop through the free list to find the first block with an address 
925e			      ; higher than the block being freed 
925e			      ld    HL, free_list 
925e			 
925e			free_find_higher_block: 
925e			      ld    E, (HL)                 ; Load next ptr from free block 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      dec   HL 
925e			 
925e			      ld    (IX+0), E               ; Save ptr to next free block 
925e			      ld    (IX+1), D 
925e			      ld    (IX+2), L               ; Save ptr to prev free block 
925e			      ld    (IX+3), H 
925e			 
925e			      ld    A, B                    ; Check if DE is greater than BC 
925e			      cp    D                       ; Compare MSB first 
925e			      jr    Z, $+4                  ; MSB the same, compare LSB 
925e			      jr    NC, free_find_higher_block_skip 
925e			      ld    A, C 
925e			      cp    E                       ; Then compare LSB 
925e			      jr    C, free_found_higher_block 
925e			 
925e			free_find_higher_block_skip: 
925e			      ld    A, D                    ; Reached the end of the free list? 
925e			      or    E 
925e			      jp    Z, free_done 
925e			 
925e			      ex    DE, HL 
925e			 
925e			      jr    free_find_higher_block 
925e			 
925e			free_found_higher_block: 
925e			      ; Insert freed block between prev and next free blocks 
925e			      ld    (HL), C                 ; Point prev free block to freed block 
925e			      inc   HL 
925e			      ld    (HL), B 
925e			 
925e			      ld    H, B                    ; Point freed block at next free block 
925e			      ld    L, C 
925e			      ld    (HL), E 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			      ; Check if the freed block is adjacent to the next free block 
925e			      inc   HL                      ; Load size of freed block into HL 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      ex    DE, HL 
925e			 
925e			      add   HL, BC                  ; Add addr of freed block and its size 
925e			 
925e			      ld    E, (IX+0)               ; Load addr of next free block into DE 
925e			      ld    D, (IX+1) 
925e			 
925e			      or    A                       ; Clear the carry flag 
925e			      sbc   HL, DE                  ; Subtract addrs to compare adjacency 
925e			      jr    NZ, free_check_adjacent_to_prev 
925e			 
925e			      ; Freed block is adjacent to next, merge into one bigger block 
925e			      ex    DE, HL                  ; Load next ptr from next block into DE 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      push  HL                      ; Save ptr to next block for later 
925e			 
925e			      ld    H, B                    ; Store ptr from next block into freed block 
925e			      ld    L, C 
925e			      ld    (HL), E 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			      pop   HL                      ; Restore ptr to next block 
925e			      inc   HL                      ; Load size of next block into DE 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      push  DE                      ; Save next block size for later 
925e			 
925e			      ld    H, B                    ; Load size of freed block into HL 
925e			      ld    L, C 
925e			      inc   HL 
925e			      inc   HL 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      ex    DE, HL 
925e			 
925e			      pop   DE                      ; Restore size of next block 
925e			      add   HL, DE                  ; Add sizes of both blocks 
925e			      ex    DE, HL 
925e			 
925e			      ld    H, B                    ; Store new bigger size into freed block 
925e			      ld    L, C 
925e			      inc   HL 
925e			      inc   HL 
925e			      ld    (HL), E 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			free_check_adjacent_to_prev: 
925e			      ; Check if the freed block is adjacent to the prev free block 
925e			      ld    L, (IX+2)               ; Prev free block ptr into HL 
925e			      ld    H, (IX+3) 
925e			 
925e			      inc   HL                      ; Size of prev free block into DE 
925e			      inc   HL 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      dec   HL 
925e			      dec   HL 
925e			      dec   HL 
925e			 
925e			      add   HL, DE                  ; Add prev block addr and size 
925e			 
925e			      or    A                       ; Clear the carry flag 
925e			      sbc   HL, BC                  ; Subtract addrs to compare adjacency 
925e			      jr    NZ, free_done 
925e			 
925e			      ; Freed block is adjacent to prev, merge into one bigger block 
925e			      ld    H, B                    ; Load next ptr from freed block into DE 
925e			      ld    L, C 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      push  HL                      ; Save freed block ptr for later 
925e			 
925e			      ld    L, (IX+2)               ; Store freed block ptr into prev block 
925e			      ld    H, (IX+3) 
925e			      ld    (HL), E 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			      pop   HL                      ; Restore freed block ptr 
925e			      inc   HL                      ; Load size of freed block into DE 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			      push  DE                      ; Save freed block size for later 
925e			 
925e			      ld    L, (IX+2)               ; Load size of prev block into DE 
925e			      ld    H, (IX+3) 
925e			      inc   HL 
925e			      inc   HL 
925e			      ld    E, (HL) 
925e			      inc   HL 
925e			      ld    D, (HL) 
925e			 
925e			      pop   HL                      ; Add sizes of both blocks 
925e			      add   HL, DE 
925e			      ex    DE, HL 
925e			 
925e			      ld    L, (IX+2)               ; Store new bigger size into prev block 
925e			      ld    H, (IX+3) 
925e			      inc   HL 
925e			      inc   HL 
925e			      ld    (HL), E 
925e			      inc   HL 
925e			      ld    (HL), D 
925e			 
925e			free_done: 
925e			      ld    HL, 4                   ; Clean up stack frame 
925e			      add   HL, SP 
925e			      ld    SP, HL 
925e			 
925e			free_early_exit: 
925e			      pop   IX 
925e			      pop   DE 
925e			      pop   BC 
925e			 
925e			      ret 
925e			 
925e			 
925e			;      .org 0x8000 
925e			; 
925e			;free_list         .dw   0     ; Block struct for start of free list (MUST be 4 bytes) 
925e			 ;                 .dw   0 
925e			 
925e			endif 
925e			 
925e			 
925e			if MALLOC_4 
925e			 
925e			; My memory allocation code. Very very simple.... 
925e			; allocate space under 250 chars 
925e			 
925e			heap_init: 
925e				; init start of heap as zero 
925e				;  
925e			 
925e				ld hl, heap_start 
925e				ld a, 0 
925e				ld (hl), a      ; empty block 
925e				inc hl 
925e				ld a, 0 
925e				ld (hl), a      ; length of block 
925e				; write end of list 
925e				inc hl 
925e				ld a,(hl) 
925e				inc hl 
925e				ld a,(hl) 
925e				 
925e			 
925e				; init some malloc vars 
925e			 
925e				ld hl, 0 
925e				ld (free_list), hl       ; store last malloc location 
925e			 
925e				ld hl, free_list+3      ; flag for 'free' being used and force a rescan for reuse of block  
925e				ld a, 0 
925e				ld (hl), a 
925e			 
925e			 
925e				ld hl, heap_start 
925e				;  
925e				  
925e				ret 
925e			 
925e			 
925e			;    free block marker 
925e			;    requested size  
925e			;    pointer to next block 
925e			;    .... 
925e			;    next block marker 
925e			 
925e			 
925e			; TODO add a flag that is reset on use of free. if flag is reset then start scan from start of heap otherwise use last location 
925e			; 
925e			 
925e			 
925e			malloc:  
925e				push de 
925e				push bc 
925e				push af 
925e			 
925e				; hl space required 
925e				 
925e				ld c, l    ; hold space   (TODO only a max of 255) 
925e			 
925e			;	inc c     ; TODO BUG need to fix memory leak on push str 
925e			;	inc c 
925e			;	inc c 
925e			;	inc c 
925e			;	inc c 
925e			;	inc c 
925e			;	inc c 
925e			 
925e			 
925e			 
925e				; start at heap if a free has been issued so we can reclaim it otherwise continue from last time 
925e			 
925e				ld a, (free_list+3) 
925e				cp 0 
925e				jr z, .contheap 
925e			 
925e				ld hl, (free_list)     ; get last alloc 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "mrs" 
925e						CALLMONITOR 
925e					endif 
925e				jr .startalloc 
925e			 
925e			.contheap: 
925e				ld hl, heap_start 
925e			 
925e			.startalloc: 
925e			 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "mym" 
925e						CALLMONITOR 
925e					endif 
925e			.findblock: 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "mmf" 
925e						CALLMONITOR 
925e					endif 
925e			 
925e				ld a,(hl)  
925e				; if byte is zero then clear to use 
925e			 
925e				cp 0 
925e				jr z, .foundemptyblock 
925e			 
925e				; if byte is not clear 
925e				;     then byte is offset to next block 
925e			 
925e				inc hl 
925e				ld a, (hl) ; get size 
925e			.nextblock:	inc hl 
925e					ld e, (hl) 
925e					inc hl 
925e					ld d, (hl) 
925e					ex de, hl 
925e			;	inc hl  ; move past the store space 
925e			;	inc hl  ; move past zero index  
925e			 
925e				; TODO detect no more space 
925e			 
925e				push hl 
925e				ld de, heap_end 
925e				call cmp16 
925e				pop hl 
925e				jr nc, .nospace 
925e			 
925e				jr .findblock 
925e			 
925e			.nospace: ld hl, 0 
925e				jp .exit 
925e			 
925e			 
925e			.foundemptyblock:	 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "mme" 
925e						CALLMONITOR 
925e					endif 
925e			 
925e			; TODO has block enough space if reusing??? 
925e			 
925e				;  
925e			 
925e			; see if this block has been previously used 
925e				inc hl 
925e				ld a, (hl) 
925e				dec hl 
925e				cp 0 
925e				jr z, .newblock 
925e			 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "meR" 
925e						CALLMONITOR 
925e					endif 
925e			 
925e			; no reusing previously allocated block 
925e			 
925e			; is it smaller than previously used? 
925e				 
925e				inc hl    ; move to size 
925e				ld a, c 
925e				sub (hl)        ; we want c < (hl) 
925e				dec hl    ; move back to marker 
925e			        jr z, .findblock 
925e			 
925e				; update with the new size which should be lower 
925e			 
925e			        ;inc  hl   ; negate next move. move back to size  
925e			 
925e			.newblock: 
925e				; need to be at marker here 
925e			 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "meN" 
925e						CALLMONITOR 
925e					endif 
925e			 
925e			 
925e				ld a, c 
925e			 
925e				ld (free_list+3), a	 ; flag resume from last malloc  
925e				ld (free_list), hl    ; save out last location 
925e			 
925e			 
925e				;inc a     ; space for length byte 
925e				ld (hl), a     ; save block in use marker 
925e			 
925e				inc hl   ; move to space marker 
925e				ld (hl), a    ; save new space 
925e			 
925e				inc hl   ; move to start of allocated area 
925e				 
925e			;	push hl     ; save where we are - 1  
925e			 
925e			;	inc hl  ; move past zero index  
925e				; skip space to set down new marker 
925e			 
925e				; provide some extra space for now 
925e			 
925e				inc a    ; actual is one fewer than bytes requested. correct if zero index is taken into account 
925e				inc a 
925e				inc a 
925e			 
925e				push hl   ; save where we are in the node block 
925e			 
925e				call addatohl 
925e			 
925e				; write linked list point 
925e			 
925e				pop de     ; get our node position 
925e				ex de, hl 
925e			 
925e				ld (hl), e 
925e				inc hl 
925e				ld (hl), d 
925e			 
925e				inc hl 
925e			 
925e				; now at start of allocated data so save pointer 
925e			 
925e				push hl 
925e			 
925e				; jump to position of next node and setup empty header in DE 
925e			 
925e				ex de, hl 
925e			 
925e			;	inc hl ; move past end of block 
925e			 
925e				ld a, 0 
925e				ld (hl), a   ; empty marker 
925e				inc hl 
925e				ld (hl), a   ; size 
925e				inc hl  
925e				ld (hl), a   ; ptr 
925e				inc hl 
925e				ld (hl), a   ; ptr 
925e			 
925e			 
925e				pop hl 
925e			 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "mmr" 
925e						CALLMONITOR 
925e					endif 
925e			 
925e			.exit: 
925e				pop af 
925e				pop bc 
925e				pop de  
925e				ret 
925e			 
925e			 
925e			 
925e			 
925e			free:  
925e				push hl 
925e				push af 
925e				; get address in hl 
925e			 
925e					if DEBUG_FORTH_MALLOC_INT 
925e						DMARK "fre" 
925e						CALLMONITOR 
925e					endif 
925e				; data is at hl - move to block count 
925e				dec hl 
925e				dec hl    ; get past pointer 
925e				dec hl 
925e			 
925e				ld a, (hl)    ; need this for a validation check 
925e			 
925e				dec hl    ; move to block marker 
925e			 
925e				; now check that the block count and block marker are the same  
925e			        ; this checks that we are on a malloc node and not random memory 
925e			        ; OK a faint chance this could be a problem but rare - famous last words! 
925e			 
925e				ld c, a 
925e				ld a, (hl)    
925e			 
925e				cp c 
925e				jr nz, .freeignore      ; not a valid malloc node in use so dont break anything 
925e			 
925e				; yes good chance we are on a malloc node 
925e			 
925e				ld a, 0      
925e				ld (hl), a   ; mark as free 
925e			 
925e				ld (free_list+3), a	 ; flag reuse of existing block on next malloc 
925e			 
925e			.freeignore:  
925e			 
925e				pop af 
925e				pop hl 
925e			 
925e				ret 
925e			 
925e			 
925e			 
925e			endif 
925e			 
925e			; eof 
# End of file firmware_memory.asm
925e			  
925e			; device C  
925e			; Now handled by SPI  
925e			;if SOUND_ENABLE  
925e			;	include "firmware_sound.asm"  
925e			;endif  
925e			  
925e			include "firmware_diags.asm"  
925e			; Hardware diags menu 
925e			 
925e			 
925e			config: 
925e			 
925e 3e 00			ld a, 0 
9260 21 84 92			ld hl, .configmn 
9263 cd ee 8a			call menu 
9266			 
9266 fe 00			cp 0 
9268 c8				ret z 
9269			 
9269			;	cp 1 
9269			;	call z, .savetostore 
9269			 
9269 fe 01			cp 1 
926b			if STARTUP_V1 
926b cc 9a 92			call z, .selautoload 
926e			endif 
926e			 
926e			if STARTUP_V2 
926e				call z, .enautoload 
926e			endif 
926e fe 02			cp 2 
9270 cc 90 92			call z, .disautoload 
9273			;	cp 3 
9273			;	call z, .selbank 
9273 fe 03			cp 3 
9275 cc b8 92			call z, .debug_tog 
9278 fe 04			cp 4 
927a cc 06 94			call z, .bpsgo 
927d fe 05			cp 5 
927f cc e1 92			call z, hardware_diags 
9282			if STARTUP_V2 
9282				cp 6 
9282				call z, create_startup 
9282			endif 
9282 18 da			jr config 
9284			 
9284			.configmn: 
9284			;	dw prom_c3 
9284 f4 95			dw prom_c2 
9286 09 96			dw prom_c2a 
9288			;	dw prom_c2b 
9288			;	dw prom_c4 
9288 28 96			dw prom_m4 
928a 43 96			dw prom_m4b 
928c 4b 96			dw prom_c1 
928e			if STARTUP_V2 
928e				dw prom_c9 
928e			endif 
928e 00 00			dw 0 
9290				 
9290			 
9290			if STARTUP_V2 
9290			.enautoload: 
9290				if STORAGE_SE 
9290				ld a, $fe      ; bit 0 clear 
9290				ld (spi_device), a 
9290			 
9290				call storage_get_block_0 
9290			 
9290				ld a, 1 
9290				ld (store_page+STORE_0_AUTOFILE), a 
9290			 
9290					ld hl, 0 
9290					ld de, store_page 
9290				call storage_write_block	 ; save update 
9290				else 
9290			 
9290				ld hl, prom_notav 
9290				ld de, prom_empty 
9290				call info_panel 
9290				endif 
9290			 
9290			 
9290				ret 
9290			endif 
9290			 
9290			.disautoload: 
9290				if STORAGE_SE 
9290				ld a, $fe      ; bit 0 clear 
9290				ld (spi_device), a 
9290			 
9290				call storage_get_block_0 
9290			 
9290				ld a, 0 
9290				ld (store_page+STORE_0_AUTOFILE), a 
9290			 
9290					ld hl, 0 
9290					ld de, store_page 
9290				call storage_write_block	 ; save update 
9290				else 
9290			 
9290 21 5a 96			ld hl, prom_notav 
9293 11 70 96			ld de, prom_empty 
9296 cd 4e 8a			call info_panel 
9299				endif 
9299			 
9299			 
9299 c9				ret 
929a			 
929a			if STARTUP_V1 
929a			 
929a			; Select auto start 
929a			 
929a			.selautoload: 
929a			 
929a				 
929a				if STORAGE_SE 
929a			 
929a					call config_dir 
929a				        ld hl, scratch 
929a					ld a, 0 
929a					call menu 
929a			 
929a					cp 0 
929a					ret z 
929a			 
929a					dec a 
929a			 
929a			 
929a					; locate menu option 
929a			 
929a					ld hl, scratch 
929a					call table_lookup 
929a			 
929a					if DEBUG_FORTH_WORDS 
929a						DMARK "ALl" 
929a						CALLMONITOR 
929a					endif 
929a					; with the pointer to the menu it, the byte following the zero term is the file id 
929a			 
929a					ld a, 0 
929a					ld bc, 50   ; max of bytes to look at 
929a					cpir  
929a			 
929a					if DEBUG_FORTH_WORDS 
929a						DMARK "ALb" 
929a						CALLMONITOR 
929a					endif 
929a					;inc hl 
929a			 
929a					ld a, (hl)   ; file id 
929a					 
929a				        ; save bank and file ids 
929a			 
929a					push af 
929a			 
929a			; TODO need to save to block 0 on bank 1	 
929a			 
929a					call storage_get_block_0 
929a			 
929a					if DEBUG_FORTH_WORDS 
929a						DMARK "AL0" 
929a						CALLMONITOR 
929a					endif 
929a					pop af 
929a			 
929a					ld (store_page+STORE_0_FILERUN),a 
929a					 
929a					; save bank id 
929a			 
929a					ld a,(spi_device) 
929a					ld (store_page+STORE_0_BANKRUN),a 
929a			 
929a					; enable auto run of store file 
929a			 
929a					ld a, 1 
929a					ld (store_page+STORE_0_AUTOFILE),a 
929a			 
929a					; save buffer 
929a			 
929a					ld hl, 0 
929a					ld de, store_page 
929a					if DEBUG_FORTH_WORDS 
929a						DMARK "ALw" 
929a						CALLMONITOR 
929a					endif 
929a				call storage_write_block	 ; save update 
929a			  
929a			 
929a			 
929a			 
929a					ld hl, scratch 
929a					call config_fdir 
929a			 
929a				else 
929a			 
929a 21 5a 96			ld hl, prom_notav 
929d 11 70 96			ld de, prom_empty 
92a0 cd 4e 8a			call info_panel 
92a3			 
92a3				endif 
92a3 c9				ret 
92a4			endif 
92a4			 
92a4			 
92a4			; Select storage bank 
92a4			 
92a4			.selbank: 
92a4			 
92a4			;	if STORAGE_SE 
92a4			;	else 
92a4			 
92a4 21 5a 96			ld hl, prom_notav 
92a7 11 70 96			ld de, prom_empty 
92aa cd 4e 8a			call info_panel 
92ad			;	endif 
92ad				 
92ad c9				ret 
92ae			 
92ae			if STORAGE_SE 
92ae			 
92ae			.config_ldir:   
92ae				; Load storage bank labels into menu array 
92ae			 
92ae				 
92ae			 
92ae			 
92ae				ret 
92ae			 
92ae			 
92ae			endif 
92ae			 
92ae			 
92ae			; Save user words to storage 
92ae			 
92ae			.savetostore: 
92ae			 
92ae			;	if STORAGE_SE 
92ae			; 
92ae			;		call config_dir 
92ae			;	        ld hl, scratch 
92ae			;		ld a, 0 
92ae			;		call menu 
92ae			;		 
92ae			;		ld hl, scratch 
92ae			;		call config_fdir 
92ae			; 
92ae			;	else 
92ae			 
92ae 21 5a 96			ld hl, prom_notav 
92b1 11 70 96			ld de, prom_empty 
92b4 cd 4e 8a			call info_panel 
92b7			 
92b7			;	endif 
92b7			 
92b7 c9				ret 
92b8			 
92b8			if STARTUP_V2 
92b8			 
92b8			create_startup: 
92b8			 
92b8				ld a, 0 
92b8				ld hl, .crstart 
92b8				call menu 
92b8			 
92b8				cp 0 
92b8				ret z 
92b8			 
92b8				cp 1 
92b8				call z, .genlsword 
92b8				cp 2 
92b8				call z, .genedword 
92b8			 
92b8				cp 3 
92b8				call z, .gendemword 
92b8			 
92b8				cp 4 
92b8				call z, .genutlword 
92b8				cp 5 
92b8				call z, .genspiword 
92b8				cp 6 
92b8				call z, .genkeyword 
92b8				cp 7 
92b8				call z, .gensoundword 
92b8				cp 8 
92b8				call z, .genhwword 
92b8				jr create_startup 
92b8			 
92b8			.genhwword: 
92b8				ld hl, crs_hw 
92b8				ld de, .hwworddef 
92b8				call .genfile 
92b8				ret 
92b8			.gensoundword: 
92b8				ld hl, crs_sound 
92b8				ld de, .soundworddef 
92b8				call .genfile 
92b8				ret 
92b8			.genlsword: 
92b8				ld hl, crs_s1 
92b8				ld de, .lsworddef 
92b8				call .genfile 
92b8				ret 
92b8			 
92b8			.genedword: 
92b8				ld de, .edworddef 
92b8				ld hl, crs_s2 
92b8				call .genfile 
92b8				ret 
92b8			 
92b8			.gendemword: 
92b8				ld de, .demoworddef 
92b8				ld hl, crs_s3 
92b8				call .genfile 
92b8				ret 
92b8			 
92b8			.genutlword: 
92b8				ld hl, crs_s4 
92b8				ld de, .utilwordef 
92b8				call .genfile 
92b8				ret 
92b8			.genspiword: 
92b8				ld hl, crs_s5 
92b8				ld de, .spiworddef 
92b8				call .genfile 
92b8				ret 
92b8			.genkeyword: 
92b8				ld hl, crs_s6 
92b8				ld de, .keyworddef 
92b8				call .genfile 
92b8				ret 
92b8			 
92b8			; hl - points to file name 
92b8			; de - points to strings to add to file 
92b8			 
92b8			.genfile: 
92b8				push hl 
92b8				push de 
92b8			 
92b8				call clear_display 
92b8				ld a, display_row_1 
92b8				ld de, .genfiletxt 
92b8				call str_at_display 
92b8				call update_display 
92b8			 
92b8				pop de 
92b8				pop hl 
92b8			 
92b8			 
92b8				push de 
92b8				call storage_create 
92b8				; id in hl 
92b8				pop de   ; table of strings to add 
92b8			 
92b8			.genloop: 
92b8			 
92b8				push hl ; save id for next time around 
92b8				push de ; save de for next time around 
92b8			 
92b8				ex de, hl 
92b8				call loadwordinhl 
92b8				ex de, hl 
92b8			 
92b8				; need hl to be the id 
92b8				; need de to be the string ptr 
92b8				 
92b8				call storage_append 
92b8			 
92b8				pop de 
92b8				pop hl 
92b8			 
92b8				inc de 
92b8				inc de 
92b8			 
92b8				ld a,(de) 
92b8				cp 0 
92b8				jr nz, .genloop 
92b8				inc de 
92b8				ld a, (de) 
92b8				dec de 
92b8				cp 0 
92b8				jr nz, .genloop	 
92b8			 
92b8				ret 
92b8			 
92b8			.genfiletxt:  db "Creating file...",0 
92b8			 
92b8			.hwworddef: 
92b8				dw test5 
92b8				dw test6 
92b8				dw test7 
92b8				dw test8 
92b8				dw test9 
92b8				dw test10 
92b8				dw 0 
92b8			 
92b8			.soundworddef: 
92b8				dw sound1 
92b8				dw sound2 
92b8				dw sound3 
92b8				dw sound4 
92b8				dw sound5 
92b8				dw sound6 
92b8				dw sound7 
92b8				dw sound8 
92b8				dw sound9 
92b8				dw 0 
92b8			 
92b8			.utilwordef: 
92b8				dw strncpy 
92b8				dw type 
92b8				dw tuck 
92b8				dw clrstack 
92b8				dw longread 
92b8				dw start1 
92b8				dw start2 
92b8			; duplicated 
92b8			;	dw start3b 
92b8			;	dw start3c 
92b8				dw list 
92b8				dw 0 
92b8			 
92b8			.lsworddef: 
92b8				dw start3b 
92b8				dw 0 
92b8			 
92b8			.edworddef: 
92b8				dw edit1 
92b8				dw edit2 
92b8				dw edit3 
92b8				dw 0 
92b8			 
92b8			.demoworddef: 
92b8				dw game1 
92b8				dw game1a 
92b8				dw game1b 
92b8				dw game1c 
92b8				dw game1d 
92b8				dw game1s 
92b8				dw game1t 
92b8				dw game1f 
92b8				dw game1z 
92b8				dw game1zz 
92b8				dw ssv2 
92b8				dw ssv3 
92b8				dw ssv4 
92b8				dw ssv5 
92b8				dw ssv1 
92b8				dw ssv1cpm	 
92b8			;	dw game2b 
92b8			;	dw game2bf 
92b8			;	dw game2mba 
92b8			;	dw game2mbas	 
92b8			;	dw game2mbht 
92b8			;	dw game2mbms 
92b8			;	dw game2mb 
92b8			;	dw game3w 
92b8			;	dw game3p 
92b8			;	dw game3sc 
92b8			;	dw game3vsi 
92b8			;	dw game3vs 
92b8				dw 0 
92b8			 
92b8			 
92b8			.spiworddef: 
92b8			 
92b8			    dw spi1 
92b8			    dw spi2 
92b8			    dw spi2b 
92b8			    dw spi3 
92b8			    dw spi4 
92b8			    dw spi5 
92b8			;    dw spi6 
92b8			;    dw spi7 
92b8			 
92b8			;    dw spi8 
92b8			;    dw spi9 
92b8			;    dw spi10 
92b8			    dw 0 
92b8			 
92b8			.keyworddef: 
92b8			 
92b8				dw keyup 
92b8				dw keydown 
92b8				dw keyleft 
92b8				dw keyright 
92b8				dw 	keyf1 
92b8				dw keyf2 
92b8				dw keyf3 
92b8				dw keyf4 
92b8				dw keyf5 
92b8				dw keyf6 
92b8				dw keyf7 
92b8				dw keyf8 
92b8				dw keyf9 
92b8				dw keyf10 
92b8				dw keyf11 
92b8				dw keyf12 
92b8				dw keytab 
92b8				dw keycr 
92b8				dw keyhome 
92b8				dw keyend 
92b8				dw keybs 
92b8				dw 0 
92b8			 
92b8			.crstart: 
92b8				dw crs_s1 
92b8				dw crs_s2 
92b8				dw crs_s3 
92b8				dw crs_s4 
92b8				dw crs_s5 
92b8				dw crs_s6 
92b8				dw crs_sound 
92b8				dw crs_hw 
92b8				dw 0 
92b8			 
92b8			endif 
92b8			 
92b8			 
92b8			if STORAGE_SE 
92b8			 
92b8			config_fdir: 
92b8				; using the scratch dir go through and release the memory allocated for each string 
92b8				 
92b8				ld hl, scratch 
92b8			.cfdir:	ld e,(hl) 
92b8				inc hl 
92b8				ld d,(hl) 
92b8				inc hl 
92b8			 
92b8				ex de, hl 
92b8				call ishlzero 
92b8				ret z     ; return on null pointer 
92b8				call free 
92b8				ex de, hl 
92b8				jr .cfdir 
92b8			 
92b8			 
92b8				ret 
92b8			 
92b8			 
92b8			config_dir: 
92b8			 
92b8				; for the config menus that need to build a directory of storage call this routine 
92b8				; it will construct a menu in scratch to pass to menu 
92b8			 
92b8				; open storage device 
92b8			 
92b8				; execute DIR to build a list of files and their ids into scratch in menu format 
92b8				; once the menu has finished then will need to call config_fdir to release the strings 
92b8				 
92b8				; c = number items 
92b8			 
92b8				 
92b8				call storage_get_block_0 
92b8			 
92b8				ld hl, store_page     ; get current id count 
92b8				ld b, (hl) 
92b8				ld c, 0    ; count of files   
92b8			 
92b8			 
92b8				ld hl, scratch 
92b8				ld (store_tmp2), hl    ; location to poke strings 
92b8			 
92b8				; check for empty drive 
92b8			 
92b8				ld a, 0 
92b8				cp b 
92b8				jp z, .dirdone 
92b8			 
92b8				 
92b8					if DEBUG_FORTH_WORDS 
92b8						DMARK "Cdc" 
92b8						CALLMONITOR 
92b8					endif 
92b8			 
92b8			 
92b8			.diritem:	 
92b8				push bc 
92b8				; for each of the current ids do a search for them and if found push to stack 
92b8			 
92b8					ld hl, STORE_BLOCK_PHY 
92b8					ld d, 0		 ; look for extent 0 of block id as this contains file name 
92b8					ld e,b 
92b8			 
92b8					call storage_findnextid 
92b8			 
92b8			 
92b8					; if found hl will be non zero 
92b8			 
92b8					call ishlzero 
92b8					jr z, .dirnotfound 
92b8			 
92b8					; increase count 
92b8			 
92b8					pop bc	 
92b8					inc c 
92b8					push bc 
92b8					 
92b8			 
92b8					; get file header and push the file name 
92b8			 
92b8					ld de, store_page 
92b8					call storage_read_block 
92b8			 
92b8					; push file id to stack 
92b8				 
92b8					ld a, (store_page) 
92b8					ld h, 0 
92b8					ld l, a 
92b8			 
92b8					;call forth_push_numhl 
92b8					; TODO store id 
92b8			 
92b8					push hl 
92b8			 
92b8					; push extent count to stack  
92b8				 
92b8					ld hl, store_page+3 
92b8			 
92b8					; get file name length 
92b8			 
92b8					call strlenz   
92b8			 
92b8					inc hl   ; cover zero term 
92b8					inc hl  ; stick the id at the end of the area 
92b8			 
92b8					push hl 
92b8					pop bc    ; move length to bc 
92b8			 
92b8					call malloc 
92b8			 
92b8					; TODO save malloc area to scratch 
92b8			 
92b8					ex de, hl 
92b8					ld hl, (store_tmp2) 
92b8					ld (hl), e 
92b8					inc hl 
92b8					ld (hl), d 
92b8					inc hl 
92b8					ld (store_tmp2), hl 
92b8			 
92b8					 
92b8			 
92b8					;pop hl   ; get source 
92b8			;		ex de, hl    ; swap aronund	 
92b8			 
92b8					ld hl, store_page+3 
92b8					if DEBUG_FORTH_WORDS 
92b8						DMARK "CFd" 
92b8						CALLMONITOR 
92b8					endif 
92b8					ldir 
92b8			 
92b8					; de is past string, move back one and store id 
92b8					 
92b8					dec de 
92b8			 
92b8					; store file id 
92b8			 
92b8					pop hl 
92b8					ex de,hl 
92b8					ld (hl), e 
92b8			 
92b8					if DEBUG_FORTH_WORDS 
92b8						DMARK "Cdi" 
92b8						CALLMONITOR 
92b8					endif 
92b8					 
92b8			.dirnotfound: 
92b8					pop bc     
92b8					djnz .diritem 
92b8				 
92b8			.dirdone:	 
92b8			 
92b8					ld a, 0 
92b8					ld hl, (store_tmp2) 
92b8					ld (hl), a 
92b8					inc hl 
92b8					ld (hl), a 
92b8					inc hl 
92b8					; push a count of the dir items found 
92b8			 
92b8			;		ld h, 0 
92b8			;		ld l, c 
92b8			 
92b8				ret 
92b8			 
92b8			endif 
92b8			 
92b8			 
92b8			; Settings 
92b8			; Run  
92b8			 
92b8			 
92b8			 
92b8			;hd_menu1:   db "Diags:  1: Key Matrix   5: Sound",0 
92b8			;;hd_menu2:   db "        2: Editor",0   
92b8			;hd_menu2:   db "        2: Editor       6: Menu",0   
92b8			;hd_menu3:   db "        3: Storage",0 
92b8			;hd_menu4:   db "0=quit  4: Debug",0 
92b8			;hd_don:     db "ON",0 
92b8			;hd_doff:     db "OFF",0 
92b8			; 
92b8			; 
92b8			; 
92b8			;hardware_diags_old:       
92b8			; 
92b8			;.diagmenu: 
92b8			;	call clear_display 
92b8			;	ld a, display_row_1 
92b8			;	ld de, hd_menu1 
92b8			;	call str_at_display 
92b8			; 
92b8			;	ld a, display_row_2 
92b8			;	ld de, hd_menu2 
92b8			;	call str_at_display 
92b8			; 
92b8			;	ld a, display_row_3 
92b8			;	ld de, hd_menu3 
92b8			;	call str_at_display 
92b8			; 
92b8			;	ld a,  display_row_4 
92b8			;	ld de, hd_menu4 
92b8			;	call str_at_display 
92b8			; 
92b8			;	; display debug state 
92b8			; 
92b8			;	ld de, hd_don 
92b8			;	ld a, (os_view_disable) 
92b8			;	cp 0 
92b8			;	jr z, .distog 
92b8			;	ld de, hd_doff 
92b8			;.distog: ld a, display_row_4+17 
92b8			;	call str_at_display 
92b8			; 
92b8			;	call update_display 
92b8			; 
92b8			;	call cin_wait 
92b8			; 
92b8			; 
92b8			; 
92b8			;	cp '4' 
92b8			;	jr nz, .diagn1 
92b8			; 
92b8			;	; debug toggle 
92b8			; 
92b8			;	ld a, (os_view_disable) 
92b8			;	ld b, '*' 
92b8			;	cp 0 
92b8			;	jr z, .debtog 
92b8			;	ld b, 0 
92b8			;.debtog:	 
92b8			;	ld a,b 
92b8			;	ld (os_view_disable),a 
92b8			; 
92b8			;.diagn1: cp '0' 
92b8			;	 ret z 
92b8			; 
92b8			;;	cp '1' 
92b8			;;       jp z, matrix	 
92b8			;;   TODO keyboard matrix test 
92b8			; 
92b8			;	cp '2' 
92b8			;	jp z, .diagedit 
92b8			; 
92b8			;;	cp '6' 
92b8			;;	jp z, .menutest 
92b8			;;if ENABLE_BASIC 
92b8			;;	cp '6' 
92b8			;;	jp z, basic 
92b8			;;endif 
92b8			 ; 
92b8			;	jp .diagmenu 
92b8			; 
92b8			; 
92b8			;	ret 
92b8			 
92b8			 
92b8			.debug_tog: 
92b8 21 02 93			ld hl, .menudebug 
92bb				 
92bb			;	ld a, (os_view_disable) 
92bb			;	cp '*' 
92bb 3a 6f ee			ld a,(debug_vector) 
92be fe c9			cp $C9   ; RET 
92c0 20 04			jr nz,.tdon  
92c2 3e 01			ld a, 1 
92c4 18 02			jr .tog1 
92c6 3e 00		.tdon: ld a, 0 
92c8			 
92c8			.tog1: 
92c8 cd ee 8a			call menu 
92cb fe 00			cp 0 
92cd c8				ret z 
92ce fe 01			cp 1    ; disable debug 
92d0 28 04			jr z, .dtog0 
92d2 3e 2a			ld a, '*' 
92d4 18 05			jr .dtogset 
92d6			.dtog0:  
92d6				;ld a, 0 
92d6 cd f4 93			call bp_on 
92d9 18 dd			jr .debug_tog 
92db			.dtogset:  
92db				; ld (os_view_disable), a 
92db cd 00 94			call bp_off 
92de c3 b8 92			jp .debug_tog 
92e1			 
92e1			 
92e1			hardware_diags:       
92e1			 
92e1			.diagm: 
92e1 21 f4 92			ld hl, .menuitems 
92e4 3e 00			ld a, 0 
92e6 cd ee 8a			call menu 
92e9			 
92e9 fe 00		         cp 0 
92eb c8				 ret z 
92ec			 
92ec fe 02			cp 2 
92ee ca 4d 93			jp z, .diagedit 
92f1			 
92f1			;	cp '6' 
92f1			;	jp z, .menutest 
92f1			;if ENABLE_BASIC 
92f1			;	cp '6' 
92f1			;	jp z, basic 
92f1			;endif 
92f1			  
92f1 c3 e1 92			jp .diagm 
92f4			 
92f4				 
92f4 08 93		.menuitems:   	dw .m1 
92f6 13 93				dw .m2 
92f8 1a 93				dw .m3 
92fa 22 93				dw .m5 
92fc 28 93				dw .m5a 
92fe 31 93				dw .m5b 
9300 00 00				dw 0 
9302			 
9302			.menudebug: 
9302 3a 93				dw .m6 
9304 43 93				dw .m7 
9306 00 00				dw 0 
9308			 
9308 .. 00		.m1:   db "Key Matrix",0 
9313 .. 00		.m2:   db "Editor",0 
931a .. 00		.m3:   db "Storage",0 
9322 .. 00		.m5:   db "Sound",0 
9328 .. 00		.m5a:  db "RAM Test",0 
9331 .. 00		.m5b:  db "LCD Test",0 
933a			 
933a .. 00		.m6:   db "Debug ON",0 
9343 .. 00		.m7:   db "Debug OFF",0 
934d			 
934d			; debug editor 
934d			 
934d			.diagedit: 
934d			 
934d 21 bb e2			ld hl, scratch 
9350			;	ld bc, 250 
9350			;	ldir 
9350				; TODO ldir is not working strcpy may not get all the terms on the input line???? 
9350 3e 00			ld a, 0 
9352 77				ld (hl), a 
9353 23				inc hl 
9354 77				ld (hl), a 
9355 23				inc hl 
9356 77				ld (hl), a 
9357			 
9357 cd bd 8a		        call clear_display 
935a cd e0 8a			call update_display 
935d				;ld a, 1 
935d				;ld (hardware_diag), a 
935d			.diloop: 
935d 3e 00			ld a, display_row_1 
935f 0e 00			ld c, 0 
9361 16 ff			ld d, 255    ; TODO fix input_str to actually take note of max string input length 
9363 1e 28			ld e, 40 
9365			 
9365 21 bb e2			ld hl, scratch	 
9368 cd 17 8d			call input_str 
936b			 
936b 3e 28			ld a, display_row_2 
936d 11 bb e2			ld de, scratch 
9370 cd d0 8a			call str_at_display 
9373 cd e0 8a			call update_display 
9376			 
9376 c3 5d 93			jp .diloop 
9379			 
9379			 
9379			; pass word in hl 
9379			; a has display location 
9379			display_word_at: 
9379 f5				push af 
937a e5				push hl 
937b 7c				ld a,h 
937c 21 c0 e5			ld hl, os_word_scratch 
937f cd f3 8e			call hexout 
9382 e1				pop hl 
9383 7d				ld a,l 
9384 21 c2 e5			ld hl, os_word_scratch+2 
9387 cd f3 8e			call hexout 
938a 21 c4 e5			ld hl, os_word_scratch+4 
938d 3e 00			ld a,0 
938f 77				ld (hl),a 
9390 11 c0 e5			ld de,os_word_scratch 
9393 f1				pop af 
9394 cd d0 8a				call str_at_display 
9397 c9				ret 
9398			 
9398			display_ptr_state: 
9398			 
9398				; to restore afterwards 
9398			 
9398 d5				push de 
9399 c5				push bc 
939a e5				push hl 
939b f5				push af 
939c			 
939c				; for use in here 
939c			 
939c			;	push bc 
939c			;	push de 
939c			;	push hl 
939c			;	push af 
939c			 
939c cd bd 8a			call clear_display 
939f			 
939f 11 77 95			ld de, .ptrstate 
93a2 3e 00			ld a, display_row_1 
93a4 cd d0 8a			call str_at_display 
93a7			 
93a7				; display debug step 
93a7			 
93a7			 
93a7 11 65 ee			ld de, debug_mark 
93aa 3e 26			ld a, display_row_1+display_cols-2 
93ac cd d0 8a			call str_at_display 
93af			 
93af				; display a 
93af 11 81 95			ld de, .ptrcliptr 
93b2 3e 28			ld a, display_row_2 
93b4 cd d0 8a			call str_at_display 
93b7			 
93b7 f1				pop af 
93b8 2a 3a ea			ld hl,(cli_ptr) 
93bb 3e 30			ld a, display_row_2+8 
93bd cd 79 93			call display_word_at 
93c0			 
93c0			 
93c0				; display hl 
93c0			 
93c0			 
93c0 11 89 95			ld de, .ptrclioptr 
93c3 3e 32			ld a, display_row_2+10 
93c5 cd d0 8a			call str_at_display 
93c8			; 
93c8			;	pop hl 
93c8 3e 35			ld a, display_row_2+13 
93ca 2a 38 ea			ld hl,(cli_origptr) 
93cd cd 79 93			call display_word_at 
93d0			; 
93d0			;	 
93d0			;	; display de 
93d0			 
93d0			;	ld de, .regstatede 
93d0			;	ld a, display_row_3 
93d0			;	call str_at_display 
93d0			 
93d0			;	pop de 
93d0			;	ld h,d 
93d0			;	ld l, e 
93d0			;	ld a, display_row_3+3 
93d0			;	call display_word_at 
93d0			 
93d0			 
93d0				; display bc 
93d0			 
93d0			;	ld de, .regstatebc 
93d0			;	ld a, display_row_3+10 
93d0			;	call str_at_display 
93d0			 
93d0			;	pop bc 
93d0			;	ld h,b 
93d0			;	ld l, c 
93d0			;	ld a, display_row_3+13 
93d0			;	call display_word_at 
93d0			 
93d0			 
93d0				; display dsp 
93d0			 
93d0			;	ld de, .regstatedsp 
93d0			;	ld a, display_row_4 
93d0			;	call str_at_display 
93d0			 
93d0				 
93d0			;	ld hl,(cli_data_sp) 
93d0			;	ld a, display_row_4+4 
93d0			;	call display_word_at 
93d0			 
93d0				; display rsp 
93d0			 
93d0 11 b8 95			ld de, .regstatersp 
93d3 3e 82			ld a, display_row_4+10 
93d5 cd d0 8a			call str_at_display 
93d8			 
93d8				 
93d8 2a ec e9			ld hl,(cli_ret_sp) 
93db 3e 86			ld a, display_row_4+14 
93dd cd 79 93			call display_word_at 
93e0			 
93e0 cd e0 8a			call update_display 
93e3			 
93e3 cd 00 8a			call delay1s 
93e6 cd 00 8a			call delay1s 
93e9 cd 00 8a			call delay1s 
93ec			 
93ec			 
93ec cd fd 99			call next_page_prompt 
93ef			 
93ef				; restore  
93ef			 
93ef f1				pop af 
93f0 e1				pop hl 
93f1 c1				pop bc 
93f2 d1				pop de 
93f3 c9				ret 
93f4			 
93f4			; Update the break point vector so that the user can hook a new routine 
93f4			 
93f4			bp_on: 
93f4 3e c3			ld a, $c3    ; JP 
93f6 32 6f ee			ld (debug_vector), a 
93f9 21 06 94			ld hl, break_point_state 
93fc 22 70 ee			ld (debug_vector+1), hl 
93ff c9				ret 
9400			 
9400			bp_off: 
9400 3e c9			ld a, $c9    ; RET 
9402 32 6f ee			ld (debug_vector), a 
9405 c9				ret 
9406			 
9406			 
9406			break_point_state: 
9406			;	push af 
9406			; 
9406			;	; see if disabled 
9406			; 
9406			;	ld a, (os_view_disable) 
9406			;	cp '*' 
9406			;	jr nz, .bpsgo 
9406			;	pop af 
9406			;	ret 
9406			 
9406			.bpsgo: 
9406			;	pop af 
9406 f5				push af 
9407 22 9d e2			ld (os_view_hl), hl 
940a ed 53 9b e2		ld (os_view_de), de 
940e ed 43 99 e2		ld (os_view_bc), bc 
9412 e5				push hl 
9413 6f				ld l, a 
9414 26 00			ld h, 0 
9416 22 9f e2			ld (os_view_af),hl 
9419			 
9419 21 ab ed				ld hl, display_fb0 
941c 22 c6 eb				ld (display_fb_active), hl 
941f e1				pop hl	 
9420			 
9420 3e 31			ld a, '1' 
9422 fe 2a		.bps1:  cp '*' 
9424 cc 00 94			call z, bp_off 
9427			;	jr nz, .bps1b 
9427			;	ld (os_view_disable),a 
9427 fe 31		.bps1b:  cp '1' 
9429 20 14			jr nz, .bps2 
942b			 
942b				; display reg 
942b			 
942b				 
942b			 
942b 3a 9f e2			ld a, (os_view_af) 
942e 2a 9d e2			ld hl, (os_view_hl) 
9431 ed 5b 9b e2		ld de, (os_view_de) 
9435 ed 4b 99 e2		ld bc, (os_view_bc) 
9439 cd d3 94			call display_reg_state 
943c c3 bf 94			jp .bpschk 
943f			 
943f fe 32		.bps2:  cp '2' 
9441 20 08			jr nz, .bps3 
9443				 
9443				; display hl 
9443 2a 9d e2			ld hl, (os_view_hl) 
9446 cd bd 95			call display_dump_at_hl 
9449			 
9449 18 74			jr .bpschk 
944b			 
944b fe 33		.bps3:  cp '3' 
944d 20 08			jr nz, .bps4 
944f			 
944f			        ; display de 
944f 2a 9b e2			ld hl, (os_view_de) 
9452 cd bd 95			call display_dump_at_hl 
9455			 
9455 18 68			jr .bpschk 
9457 fe 34		.bps4:  cp '4' 
9459 20 08			jr nz, .bps5 
945b			 
945b			        ; display bc 
945b 2a 99 e2			ld hl, (os_view_bc) 
945e cd bd 95			call display_dump_at_hl 
9461			 
9461 18 5c			jr .bpschk 
9463 fe 35		.bps5:  cp '5' 
9465 20 08		        jr nz, .bps7 
9467			 
9467				; display cur ptr 
9467 2a 3a ea			ld hl, (cli_ptr) 
946a cd bd 95			call display_dump_at_hl 
946d			 
946d 18 50			jr .bpschk 
946f fe 36		.bps7:  cp '6' 
9471 20 08			jr nz, .bps8b 
9473				 
9473				; display cur orig ptr 
9473 2a 38 ea			ld hl, (cli_origptr) 
9476 cd bd 95			call display_dump_at_hl 
9479 18 44			jr .bpschk 
947b fe 37		.bps8b:  cp '7' 
947d 20 08			jr nz, .bps9 
947f				 
947f				; display dsp 
947f 2a e8 e9			ld hl, (cli_data_sp) 
9482 cd bd 95			call display_dump_at_hl 
9485			 
9485 18 38			jr .bpschk 
9487 fe 39		.bps9:  cp '9' 
9489 20 05			jr nz, .bps8c 
948b				 
948b				; display SP 
948b			;	ld hl, sp 
948b cd bd 95			call display_dump_at_hl 
948e			 
948e 18 2f			jr .bpschk 
9490 fe 38		.bps8c:  cp '8' 
9492 20 08			jr nz, .bps8d 
9494				 
9494				; display rsp 
9494 2a ec e9			ld hl, (cli_ret_sp) 
9497 cd bd 95			call display_dump_at_hl 
949a			 
949a 18 23			jr .bpschk 
949c fe 23		.bps8d:  cp '#'     ; access monitor sub system 
949e 20 05			jr nz, .bps8 
94a0 cd b7 97			call monitor 
94a3			 
94a3 18 1a			jr .bpschk 
94a5 fe 30		.bps8:  cp '0' 
94a7 20 16			jr nz, .bpschk 
94a9			 
94a9 21 0a ed				ld hl, display_fb1 
94ac 22 c6 eb				ld (display_fb_active), hl 
94af cd e0 8a				call update_display 
94b2			 
94b2				;ld a, (os_view_af) 
94b2 2a 9d e2			ld hl, (os_view_hl) 
94b5 ed 5b 9b e2		ld de, (os_view_de) 
94b9 ed 4b 99 e2		ld bc, (os_view_bc) 
94bd f1				pop af 
94be c9				ret 
94bf			 
94bf			.bpschk:   
94bf cd 00 8a			call delay1s 
94c2 3e 9f		ld a,display_row_4 + display_cols - 1 
94c4 11 fb 99		        ld de, endprg 
94c7 cd d0 8a			call str_at_display 
94ca cd e0 8a			call update_display 
94cd cd dc df			call cin_wait 
94d0			 
94d0 c3 22 94			jp .bps1 
94d3			 
94d3			 
94d3			display_reg_state: 
94d3			 
94d3				; to restore afterwards 
94d3			 
94d3 d5				push de 
94d4 c5				push bc 
94d5 e5				push hl 
94d6 f5				push af 
94d7			 
94d7				; for use in here 
94d7			 
94d7 c5				push bc 
94d8 d5				push de 
94d9 e5				push hl 
94da f5				push af 
94db			 
94db cd bd 8a			call clear_display 
94de			 
94de 11 93 95			ld de, .regstate 
94e1 3e 00			ld a, display_row_1 
94e3 cd d0 8a			call str_at_display 
94e6			 
94e6				; display debug step 
94e6			 
94e6			 
94e6 11 65 ee			ld de, debug_mark 
94e9 3e 25			ld a, display_row_1+display_cols-3 
94eb cd d0 8a			call str_at_display 
94ee			 
94ee				; display a 
94ee 11 af 95			ld de, .regstatea 
94f1 3e 28			ld a, display_row_2 
94f3 cd d0 8a			call str_at_display 
94f6			 
94f6 e1				pop hl 
94f7			;	ld h,0 
94f7			;	ld l, a 
94f7 3e 2b			ld a, display_row_2+3 
94f9 cd 79 93			call display_word_at 
94fc			 
94fc			 
94fc				; display hl 
94fc			 
94fc			 
94fc 11 a3 95			ld de, .regstatehl 
94ff 3e 32			ld a, display_row_2+10 
9501 cd d0 8a			call str_at_display 
9504			 
9504 e1				pop hl 
9505 3e 35			ld a, display_row_2+13 
9507 cd 79 93			call display_word_at 
950a			 
950a				 
950a				; display de 
950a			 
950a 11 a7 95			ld de, .regstatede 
950d 3e 50			ld a, display_row_3 
950f cd d0 8a			call str_at_display 
9512			 
9512 e1				pop hl 
9513			;	ld h,d 
9513			;	ld l, e 
9513 3e 53			ld a, display_row_3+3 
9515 cd 79 93			call display_word_at 
9518			 
9518			 
9518				; display bc 
9518			 
9518 11 ab 95			ld de, .regstatebc 
951b 3e 5a			ld a, display_row_3+10 
951d cd d0 8a			call str_at_display 
9520			 
9520 e1				pop hl 
9521			;	ld h,b 
9521			;	ld l, c 
9521 3e 5d			ld a, display_row_3+13 
9523 cd 79 93			call display_word_at 
9526			 
9526			 
9526				; display dsp 
9526			 
9526 11 b3 95			ld de, .regstatedsp 
9529 3e 78			ld a, display_row_4 
952b cd d0 8a			call str_at_display 
952e			 
952e				 
952e 2a e8 e9			ld hl,(cli_data_sp) 
9531 3e 7c			ld a, display_row_4+4 
9533 cd 79 93			call display_word_at 
9536			 
9536				; display rsp 
9536			 
9536 11 b8 95			ld de, .regstatersp 
9539 3e 82			ld a, display_row_4+10 
953b cd d0 8a			call str_at_display 
953e			 
953e				 
953e 2a ec e9			ld hl,(cli_ret_sp) 
9541 3e 86			ld a, display_row_4+14 
9543 cd 79 93			call display_word_at 
9546			 
9546 cd e0 8a			call update_display 
9549			 
9549			;	call delay1s 
9549			;	call delay1s 
9549			;	call delay1s 
9549			 
9549			 
9549			;	call next_page_prompt 
9549			 
9549				; restore  
9549			 
9549 f1				pop af 
954a e1				pop hl 
954b c1				pop bc 
954c d1				pop de 
954d c9				ret 
954e			 
954e .. 00		.wordincurptr:  db "Word in cur_ptr (5)",0 
9562 .. 00		.wordincuroptr:  db "Word in cur_optr (6)",0 
9577 .. 00		.ptrstate:	db "Ptr State",0 
9581 .. 00		.ptrcliptr:     db "cli_ptr",0 
9589 .. 00		.ptrclioptr:     db "cli_o_ptr",0 
9593 .. 00		.regstate:	db "Reg State (1/0)",0 
95a3 .. 00		.regstatehl:	db "HL:",0 
95a7 .. 00		.regstatede:	db "DE:",0 
95ab .. 00		.regstatebc:	db "BC:",0 
95af .. 00		.regstatea:	db "A :",0 
95b3 .. 00		.regstatedsp:	db "DSP:",0 
95b8 .. 00		.regstatersp:	db "RSP:",0 
95bd			 
95bd			display_dump_at_hl: 
95bd e5				push hl 
95be d5				push de 
95bf c5				push bc 
95c0 f5				push af 
95c1			 
95c1 22 de e5			ld (os_cur_ptr),hl	 
95c4 cd bd 8a			call clear_display 
95c7 cd 05 99			call dumpcont 
95ca			;	call delay1s 
95ca			;	call next_page_prompt 
95ca			 
95ca			 
95ca f1				pop af 
95cb c1				pop bc 
95cc d1				pop de 
95cd e1				pop hl 
95ce c9				ret 
95cf			 
95cf			;if ENABLE_BASIC 
95cf			;	include "nascombasic.asm" 
95cf			;	basic: 
95cf			;	include "forth/FORTH.ASM" 
95cf			;endif 
95cf			 
95cf			; eof 
95cf			 
95cf			 
# End of file firmware_diags.asm
95cf			  
95cf			include "firmware_prompts.asm"  
95cf			; Prompts  
95cf			 
95cf			; boot messages 
95cf			 
95cf .. 00		prom_bootmsg:	db "z80-homebrew OS v1.7",0 
95e4 .. 00		prom_bootmsg1:	db "by Kevin Groves",0 
95f4			 
95f4			 
95f4			; config menus 
95f4			 
95f4			;prom_c3: db "Add Dictionary To File",0 
95f4			 
95f4			if STARTUP_V1 
95f4 .. 00		prom_c2: db "Select Autoload File",0 
9609 .. 00		prom_c2a: db "Disable Autoload File", 0 
961f			endif 
961f			 
961f			if STARTUP_V2 
961f			prom_c2: db "Enable Autoload Files",0 
961f			prom_c2a: db "Disable Autoload Files", 0 
961f			 
961f			crs_s1: db "*ls-word", 0 
961f			crs_s2: db "*ed-word", 0 
961f			crs_s3: db "*Demo-Games", 0 
961f			crs_s4: db "*Utils", 0 
961f			crs_s5: db "*SPI-Util", 0 
961f			crs_s6: db "*Key-Constants", 0 
961f			crs_sound: db "*Sound-Util", 0 
961f			crs_hw: db "*Hello-World",0 
961f			 
961f			 
961f			 
961f			endif 
961f			;prom_c2b: db "Select Storage Bank",0 
961f .. 00		prom_c4: db "Settings",0 
9628 .. 00		prom_m4:   db "Debug & Breakpoints On/Off",0 
9643 .. 00		prom_m4b:   db "Monitor",0 
964b .. 00		prom_c1: db "Hardware Diags",0 
965a			 
965a			 
965a			if STARTUP_V2 
965a			prom_c9: db "Create Startup Files",0 
965a			endif 
965a			 
965a .. 00		prom_notav:    db "Feature not available",0 
9670 .. 00		prom_empty:    db "",0 
9671			 
9671			; eof 
9671			 
# End of file firmware_prompts.asm
9671			  
9671			  
9671			; eof  
9671			  
# End of file firmware.asm
9671			 
9671			;; below moved from firmware.asm for strange zero calc of baseusermem label. Scope issue on multipass???? 
9671			;if BASE_KEV  
9671			;baseram: equ 08000h 
9671			;endif 
9671			 
9671			;if BASE_SC114 
9671			;baseram:     equ    endofcode 
9671			;endif 
9671			 
9671			 
9671			; Add NMI support. A rst 066h when r15z goes neg on clock side of resist. needs to do retn when exiting 
9671			 
9671			; start system 
9671			 
9671			coldstart: 
9671				; set sp 
9671				; di/ei 
9671			 
9671 f3				di 
9672 31 00 f0			ld sp, tos 
9675 cd 26 df			call init_nmi 
9678			;	ei 
9678			 
9678				; init spinner 
9678 3e 00			ld a,0 
967a 32 c0 eb			ld (display_active), a 
967d			 
967d				; disable breakpoint by default 
967d			 
967d				;ld a,'*' 
967d			;	ld a,' ' 
967d			;	ld (os_view_disable),a 
967d			 
967d				; set break point vector as new break point on or off 
967d cd 00 94			call bp_off 
9680			 
9680				; init hardware 
9680			 
9680				; init keyboard and screen hardware 
9680			 
9680 cd 1f 80			call hardware_init 
9683			 
9683			 
9683 cd 00 8a			call delay1s 
9686 3e 58			ld a, display_row_3+8 
9688 11 03 80			ld de, buildtime 
968b cd d0 8a			call str_at_display 
968e cd e0 8a			call update_display 
9691			 
9691 cd 00 8a			call delay1s 
9694 cd 00 8a			call delay1s 
9697 cd 00 8a			call delay1s 
969a			 
969a				; detect if any keys are held down to enable breakpoints at start up 
969a			 
969a cd e2 df			call cin  
969d fe 00			cp 0 
969f 28 03			jr z, .nokeys 
96a1			 
96a1				;call hardware_diags 
96a1 cd 5e 92			call config 
96a4			 
96a4			;	ld de, .bpen 
96a4			;	ld a, display_row_4 
96a4			;	call str_at_display 
96a4			;	call update_display 
96a4			; 
96a4			;	ld a,0 
96a4			;	ld (os_view_disable),a 
96a4			; 
96a4			;.bpwait: 
96a4			;	call cin 
96a4			;	cp 0 
96a4			;	jr z, .bpwait 
96a4			;	jr .nokeys 
96a4			; 
96a4			; 
96a4			;.bpen:  db "Break points enabled!",0 
96a4			 
96a4			 
96a4			 
96a4			 
96a4			 
96a4			 
96a4			.nokeys: 
96a4			 
96a4			 
96a4				 
96a4			 
96a4			;jp  testkey 
96a4			 
96a4			;call storage_get_block_0 
96a4			; 
96a4			;ld hl, 0 
96a4			;ld de, store_page 
96a4			;call storage_read_block 
96a4			 
96a4				 
96a4			;ld hl, 10 
96a4			;ld de, store_page 
96a4			;call storage_read_block 
96a4			 
96a4			 
96a4			 
96a4			 
96a4			 
96a4			;stop:	nop 
96a4			;	jp stop 
96a4			 
96a4			 
96a4			 
96a4			main: 
96a4 cd bd 8a			call clear_display 
96a7 cd e0 8a			call update_display 
96aa			 
96aa			 
96aa			 
96aa			;	call testlcd 
96aa			 
96aa			 
96aa			 
96aa cd 46 9e			call forth_init 
96ad			 
96ad			 
96ad			warmstart: 
96ad cd 1c 9e			call forth_warmstart 
96b0			 
96b0				; run startup word load 
96b0			        ; TODO prevent this running at warmstart after crash  
96b0			 
96b0				if STARTUP_ENABLE 
96b0			 
96b0					if STARTUP_V1 
96b0			 
96b0						if STORAGE_SE 
96b0							call forth_autoload 
96b0						endif 
96b0 cd 76 de					call forth_startup 
96b3					endif 
96b3			 
96b3					if STARTUP_V2 
96b3			 
96b3						if STORAGE_SE 
96b3							call forth_autoload 
96b3						else 
96b3							call forth_startup 
96b3						endif 
96b3			 
96b3			 
96b3					endif 
96b3			 
96b3				endif 
96b3			 
96b3			warmstart_afterauto: 
96b3			 
96b3				; show free memory after boot 
96b3 11 52 97			ld de, freeram 
96b6 3e 00			ld a, display_row_1 
96b8 cd d0 8a			call str_at_display 
96bb			 
96bb				; get current heap start after loading any uwords 
96bb			 
96bb				;ld de, (os_last_new_uword) 
96bb				;ex de, hl 
96bb			 
96bb			; Or use heap_size word???? 
96bb				;ld hl, heap_end 
96bb				;ld hl, heap_size 
96bb				;ld de, topusermem 
96bb				;ld de, heap_start 
96bb ed 5b fb df			ld de, (free_list )      
96bf 21 96 e2				ld hl, heap_end 
96c2 ed 52			sbc hl, de 
96c4				;push hl 
96c4				;ld a,h	         	 
96c4				;ld hl, os_word_scratch		; TODO do direct write to frame buffer instead and drop the str_at_display 
96c4				;call hexout 
96c4			   	;pop hl 
96c4			; 
96c4			;	ld a,l 
96c4			;	ld hl, os_word_scratch+2 
96c4			;	call hexout 
96c4			;	ld hl, os_word_scratch+4 
96c4			;	ld a, 0 
96c4			;	ld (hl),a 
96c4 eb				ex de, hl 
96c5 21 c0 e5			ld hl, os_word_scratch 
96c8 cd ff 8f			call uitoa_16 
96cb			 
96cb			 
96cb 11 c0 e5			ld de, os_word_scratch 
96ce 3e 0d			ld a, display_row_1 + 13 
96d0 cd d0 8a			call str_at_display 
96d3 cd e0 8a			call update_display 
96d6			 
96d6			 
96d6				;call demo 
96d6			 
96d6			 
96d6				; init scratch input area for cli commands 
96d6			 
96d6 21 e2 e5			ld hl, os_cli_cmd 
96d9 3e 00			ld a,0 
96db 77				ld (hl),a 
96dc 23				inc hl 
96dd 77				ld (hl),a 
96de			 
96de 3e 00			ld a,0 
96e0 32 e1 e6			ld (os_last_cmd),a	; current command in use to enable repeated use with an enter etc 
96e3			 
96e3 32 de e5			ld (os_cur_ptr),a	; ptr to whatever is needed for this command 
96e6 32 df e5			ld (os_cur_ptr+1),a	 
96e9			 
96e9 32 c0 e5			ld (os_word_scratch),a	; byte or word being used in parsing for this command 
96ec 32 c1 e5			ld (os_word_scratch+1),a	 
96ef				 
96ef			 
96ef				;ld a, kLCD_Line2        ; TODO prompt using direct screen line address. Correct this to frame buffer 
96ef 21 e2 e5			ld hl, os_cli_cmd 
96f2			 
96f2 3e 00			ld a, 0		 ; init cli input 
96f4 77				ld (hl), a 
96f5 3e 28			ld a, display_row_2        ; TODO prompt using direct screen line address. Correct this to frame buffer 
96f7			cli: 
96f7				; show cli prompt 
96f7				;push af 
96f7				;ld a, 0 
96f7				;ld de, prompt 
96f7				;call str_at_display 
96f7			 
96f7				;call update_display 
96f7				;pop af 
96f7				;inc a 
96f7				;ld a, kLCD_Line4+1	 ; TODO using direct screen line writes. Correct this to frame buffer 
96f7			 
96f7			.lastrecall: 
96f7			 
96f7 0e 00			ld c, 0 
96f9 16 ff			ld d, 255    ; TODO fix input_str to actually take note of max string input length 
96fb 1e 28			ld e, 40 
96fd			 
96fd 21 e2 e5			ld hl, os_cli_cmd 
9700			 
9700				STACKFRAME OFF $fefe $9f9f 
9700				if DEBUG_STACK_IMB 
9700					if OFF 
9700						exx 
9700						ld de, $fefe 
9700						ld a, d 
9700						ld hl, curframe 
9700						call hexout 
9700						ld a, e 
9700						ld hl, curframe+2 
9700						call hexout 
9700						ld hl, $fefe 
9700						push hl 
9700						ld hl, $9f9f 
9700						push hl 
9700						exx 
9700					endif 
9700				endif 
9700			endm 
# End of macro STACKFRAME
9700			 
9700 cd 17 8d			call input_str 
9703			 
9703				STACKFRAMECHK OFF $fefe $9f9f 
9703				if DEBUG_STACK_IMB 
9703					if OFF 
9703						exx 
9703						ld hl, $9f9f 
9703						pop de   ; $9f9f 
9703						call cmp16 
9703						jr nz, .spnosame 
9703						ld hl, $fefe 
9703						pop de   ; $fefe 
9703						call cmp16 
9703						jr z, .spfrsame 
9703						.spnosame: call showsperror 
9703						.spfrsame: nop 
9703						exx 
9703					endif 
9703				endif 
9703			endm 
# End of macro STACKFRAMECHK
9703			 
9703			 
9703				; check to see if last line recall has been requested 
9703			 
9703			if EDIT_V2 
9703 fe 05			cp KEY_UP 
9705 20 0f			jr nz, .noexecline 
9707			 
9707 11 e2 e5			ld de, os_cli_cmd 
970a 21 e1 e6			ld hl, os_last_cmd 
970d 01 ff 00			ld bc, 255 
9710 ed b0			ldir 
9712 3e 00			ld a, 0 
9714 18 e1			jr .lastrecall 
9716			endif 
9716			 
9716			.noexecline: 
9716				; no so exec the line		 
9716			 
9716				; copy input to last command 
9716			 
9716 21 e2 e5			ld hl, os_cli_cmd 
9719 11 e1 e6			ld de, os_last_cmd 
971c 01 ff 00			ld bc, 255 
971f ed b0			ldir 
9721			 
9721				; wipe current buffer 
9721			 
9721			;	ld a, 0 
9721			;	ld hl, os_cli_cmd 
9721			;	ld de, os_cli_cmd+1 
9721			;	ld bc, 254 
9721			;	ldir 
9721				; TODO ldir is not working strcpy may not get all the terms on the input line???? 
9721			;	call strcpy 
9721			;	ld a, 0 
9721			;	ld (hl), a 
9721			;	inc hl 
9721			;	ld (hl), a 
9721			;	inc hl 
9721			;	ld (hl), a 
9721			 
9721				; switch frame buffer to program  
9721			 
9721 21 0a ed				ld hl, display_fb1 
9724 22 c6 eb				ld (display_fb_active), hl 
9727			 
9727			;	nop 
9727				STACKFRAME ON $fbfe $8f9f 
9727				if DEBUG_STACK_IMB 
9727					if ON 
9727						exx 
9727						ld de, $fbfe 
9727						ld a, d 
9727						ld hl, curframe 
9727						call hexout 
9727						ld a, e 
9727						ld hl, curframe+2 
9727						call hexout 
9727						ld hl, $fbfe 
9727						push hl 
9727						ld hl, $8f9f 
9727						push hl 
9727						exx 
9727					endif 
9727				endif 
9727			endm 
# End of macro STACKFRAME
9727				; first time into the parser so pass over the current scratch pad 
9727 21 e2 e5			ld hl,os_cli_cmd 
972a				; tokenise the entered statement(s) in HL 
972a cd c0 9e			call forthparse 
972d			        ; exec forth statements in top of return stack 
972d cd fc 9e			call forthexec 
9730				;call forthexec_cleanup 
9730			;	call parsenext 
9730			 
9730				STACKFRAMECHK ON $fbfe $8f9f 
9730				if DEBUG_STACK_IMB 
9730					if ON 
9730						exx 
9730						ld hl, $8f9f 
9730						pop de   ; $8f9f 
9730						call cmp16 
9730						jr nz, .spnosame 
9730						ld hl, $fbfe 
9730						pop de   ; $fbfe 
9730						call cmp16 
9730						jr z, .spfrsame 
9730						.spnosame: call showsperror 
9730						.spfrsame: nop 
9730						exx 
9730					endif 
9730				endif 
9730			endm 
# End of macro STACKFRAMECHK
9730				; TODO on return from forth parsing should there be a prompt to return to system? but already in system. 
9730			 
9730 3e 78			ld a, display_row_4 
9732 11 63 97			ld de, endprog 
9735			 
9735 cd e0 8a			call update_display		 
9738			 
9738 cd fd 99			call next_page_prompt 
973b			 
973b				; switch frame buffer to cli 
973b			 
973b 21 ab ed				ld hl, display_fb0 
973e 22 c6 eb				ld (display_fb_active), hl 
9741			 
9741			 
9741 cd bd 8a		        call clear_display 
9744 cd e0 8a			call update_display		 
9747			 
9747 21 e2 e5			ld hl, os_cli_cmd 
974a			 
974a 3e 00			ld a, 0		 ; init cli input 
974c 77				ld (hl), a 
974d			 
974d				; TODO f_cursor_ptr should inc row (scroll if required) and set start of row for next input  
974d			 
974d				; now on last line 
974d			 
974d				; TODO scroll screen up 
974d			 
974d				; TODO instead just clear screen and place at top of screen 
974d			 
974d			;	ld a, 0 
974d			;	ld (f_cursor_ptr),a 
974d			 
974d				;call clear_display 
974d				;call update_display 
974d			 
974d				;ld a, kLCD_Line1        ; TODO prompt using direct screen line address. Correct this to frame buffer 
974d 3e 00			ld a, display_row_1        ; TODO prompt using direct screen line address. Correct this to frame buffer 
974f c3 f7 96			jp cli 
9752			 
9752 .. 00		freeram: db "Free bytes: ",0 
975f ..			asc: db "1A2F" 
9763 .. 00		endprog: db "End prog...",0 
976f			 
976f			testenter2:   
976f 21 ed e2			ld hl,scratch+50 
9772 22 de e5			ld (os_cur_ptr),hl 
9775 c3 f7 96			jp cli 
9778			 
9778			testenter:  
9778			 
9778 21 5f 97			ld hl,asc 
977b			;	ld a,(hl) 
977b			;	call nibble2val 
977b cd 49 8f			call get_byte 
977e			 
977e			 
977e			;	ld a,(hl) 
977e			;	call atohex 
977e			 
977e			;	call fourehexhl 
977e 32 ed e2			ld (scratch+50),a 
9781			 
9781			 
9781			 
9781 21 61 97			ld hl,asc+2 
9784			;	ld a, (hl) 
9784			;	call nibble2val 
9784 cd 49 8f			call get_byte 
9787			 
9787			;	call fourehexhl 
9787 32 ef e2			ld (scratch+52),a 
978a				 
978a 21 ed e2			ld hl,scratch+50 
978d 22 de e5			ld (os_cur_ptr),hl 
9790 c3 f7 96			jp cli 
9793			 
9793			enter:	 
9793 3a bf e2			ld a,(scratch+4) 
9796 fe 00			cp 0 
9798 28 0c			jr z, .entercont 
979a				; no, not a null term line so has an address to work out.... 
979a			 
979a 21 bd e2			ld hl,scratch+2 
979d cd a9 8f			call get_word_hl 
97a0			 
97a0 22 de e5			ld (os_cur_ptr),hl	 
97a3 c3 f7 96			jp cli 
97a6			 
97a6			 
97a6			.entercont:  
97a6			 
97a6 21 bd e2			ld hl, scratch+2 
97a9 cd 49 8f			call get_byte 
97ac			 
97ac 2a de e5		   	ld hl,(os_cur_ptr) 
97af 77					ld (hl),a 
97b0 23					inc hl 
97b1 22 de e5				ld (os_cur_ptr),hl 
97b4				 
97b4			; get byte  
97b4			 
97b4			 
97b4 c3 f7 96			jp cli 
97b7			 
97b7			 
97b7			; basic monitor support 
97b7			 
97b7			monitor: 
97b7				;  
97b7 cd bd 8a			call clear_display 
97ba 3e 00			ld a, 0 
97bc 11 10 98			ld de, .monprompt 
97bf cd d0 8a			call str_at_display 
97c2 cd e0 8a			call update_display 
97c5			 
97c5				; get a monitor command 
97c5			 
97c5 0e 00			ld c, 0     ; entry at top left 
97c7 16 64			ld d, 100   ; max buffer size 
97c9 1e 0f			ld e, 15    ; input scroll area 
97cb 3e 00			ld a, 0     ; init string 
97cd 21 b9 e4			ld hl, os_input 
97d0 77				ld (hl), a 
97d1 23				inc hl 
97d2 77				ld (hl), a 
97d3 21 b9 e4			ld hl, os_input 
97d6 3e 01			ld a, 1     ; init string 
97d8 cd 17 8d			call input_str 
97db			 
97db cd bd 8a		        call clear_display 
97de cd e0 8a			call update_display		 
97e1			 
97e1 3a b9 e4			ld a, (os_input) 
97e4 cd 47 90			call toUpper 
97e7 fe 48		        cp 'H' 
97e9 ca 84 98		        jp z, .monhelp 
97ec fe 44			cp 'D'		; dump 
97ee ca b7 98			jp z, .mondump	 
97f1 fe 43			cp 'C'		; dump 
97f3 ca d1 98			jp z, .moncdump	 
97f6 fe 4d			cp 'M'		; dump 
97f8 ca 12 98			jp z, .moneditstart 
97fb fe 55			cp 'U'		; dump 
97fd ca 1e 98			jp z, .monedit	 
9800 fe 47			cp 'G'		; dump 
9802 ca ad 98			jp z, .monjump 
9805 fe 42			cp 'B'		; forth breakpoint 
9807 cc 06 94			call z, break_point_state 
980a fe 51			cp 'Q'		; dump 
980c c8				ret z	 
980d			 
980d			 
980d				; TODO "S" to access symbol by name and not need the address 
980d				; TODO "F" to find a string in memory 
980d			 
980d c3 b7 97			jp monitor 
9810			 
9810 .. 00		.monprompt: db ">", 0 
9812			 
9812			.moneditstart: 
9812				; get starting address 
9812			 
9812 21 bb e4			ld hl,os_input+2 
9815 cd a9 8f			call get_word_hl 
9818			 
9818 22 de e5			ld (os_cur_ptr),hl	 
981b			 
981b c3 b7 97			jp monitor 
981e			 
981e			.monedit: 
981e				; get byte to load 
981e			 
981e 21 bb e4			ld hl,os_input+2 
9821 cd 49 8f			call get_byte 
9824			 
9824				; get address to update 
9824 2a de e5			ld hl, (os_cur_ptr) 
9827			 
9827				; update byte 
9827			 
9827 77				ld (hl), a 
9828			 
9828				; move to next address and save it 
9828			 
9828 23				inc hl 
9829 22 de e5			ld (os_cur_ptr),hl	 
982c			 
982c c3 b7 97			jp monitor 
982f			 
982f			 
982f .. 00		.monhelptext1: 	db "D-Dump, C-Cont Dump",0 
9843 .. 00		.monhelptext2:  db "M-Edit Start, U-Update Byte",0 
985f .. 00		.monhelptext3:  db "G-Call address, B-Breakpoints",0 
987d .. 00		.monhelptext4:  db "Q-Quit",0 
9884			        
9884			.monhelp: 
9884 3e 00			ld a, display_row_1 
9886 11 2f 98		        ld de, .monhelptext1 
9889			 
9889 cd d0 8a			call str_at_display 
988c 3e 28			ld a, display_row_2 
988e 11 43 98		        ld de, .monhelptext2 
9891					 
9891 cd d0 8a			call str_at_display 
9894 3e 50			ld a, display_row_3 
9896 11 5f 98		        ld de, .monhelptext3 
9899					 
9899 cd d0 8a			call str_at_display 
989c 3e 78			ld a, display_row_4 
989e 11 7d 98		        ld de, .monhelptext4 
98a1 cd d0 8a			call str_at_display 
98a4			 
98a4 cd e0 8a			call update_display		 
98a7			 
98a7 cd fd 99			call next_page_prompt 
98aa c3 b7 97			jp monitor 
98ad			 
98ad			.monjump:    
98ad 21 bb e4			ld hl,os_input+2 
98b0 cd a9 8f			call get_word_hl 
98b3			 
98b3 e9				jp (hl) 
98b4 c3 b7 97			jp monitor 
98b7			 
98b7			.mondump:    
98b7 21 bb e4			ld hl,os_input+2 
98ba cd a9 8f			call get_word_hl 
98bd			 
98bd 22 de e5			ld (os_cur_ptr),hl	 
98c0 cd 05 99			call dumpcont 
98c3 3e 78			ld a, display_row_4 
98c5 11 63 97			ld de, endprog 
98c8			 
98c8 cd e0 8a			call update_display		 
98cb			 
98cb cd fd 99			call next_page_prompt 
98ce c3 b7 97			jp monitor 
98d1			.moncdump: 
98d1 cd 05 99			call dumpcont 
98d4 3e 78			ld a, display_row_4 
98d6 11 63 97			ld de, endprog 
98d9			 
98d9 cd e0 8a			call update_display		 
98dc			 
98dc cd fd 99			call next_page_prompt 
98df c3 b7 97			jp monitor 
98e2			 
98e2			 
98e2			; TODO symbol access  
98e2			 
98e2			.symbols:     ;; A list of symbols that can be called up  
98e2 ab ed			dw display_fb0 
98e4 .. 00			db "fb0",0  
98e8 74 ea		     	dw store_page 
98ea .. 00			db "store_page",0 
98f5			 
98f5			 
98f5			dump:	; see if we are cotinuing on from the last command by not uncluding any address 
98f5			 
98f5 3a bc e2			ld a,(scratch+1) 
98f8 fe 00			cp 0 
98fa 28 09			jr z, dumpcont 
98fc			 
98fc				; no, not a null term line so has an address to work out.... 
98fc			 
98fc 21 bd e2			ld hl,scratch+2 
98ff cd a9 8f			call get_word_hl 
9902			 
9902 22 de e5			ld (os_cur_ptr),hl	 
9905			 
9905			 
9905			 
9905			dumpcont: 
9905			 
9905				; dump bytes at ptr 
9905			 
9905			 
9905 3e 00			ld a, display_row_1 
9907 2a c6 eb			ld hl, (display_fb_active) 
990a cd ea 8c			call addatohl 
990d cd 35 99			call .dumpbyterow 
9910			 
9910 3e 28			ld a, display_row_2 
9912 2a c6 eb			ld hl, (display_fb_active) 
9915 cd ea 8c			call addatohl 
9918 cd 35 99			call .dumpbyterow 
991b			 
991b			 
991b 3e 50			ld a, display_row_3 
991d 2a c6 eb			ld hl, (display_fb_active) 
9920 cd ea 8c			call addatohl 
9923 cd 35 99			call .dumpbyterow 
9926			 
9926 3e 78			ld a, display_row_4 
9928 2a c6 eb			ld hl, (display_fb_active) 
992b cd ea 8c			call addatohl 
992e cd 35 99			call .dumpbyterow 
9931			 
9931 cd e0 8a			call update_display 
9934			;		jp cli 
9934 c9				ret 
9935			 
9935			.dumpbyterow: 
9935			 
9935				;push af 
9935			 
9935 e5				push hl 
9936			 
9936				; calc where to poke the ascii 
9936			if display_cols == 20 
9936				ld a, 16 
9936			else 
9936 3e 1f			ld a, 31 
9938			endif 
9938			 
9938 cd ea 8c			call addatohl 
993b 22 c0 e5			ld (os_word_scratch),hl  		; save pos for later 
993e			 
993e			 
993e			; display decoding address 
993e 2a de e5		   	ld hl,(os_cur_ptr) 
9941			 
9941 7c				ld a,h 
9942 e1				pop hl 
9943 e5				push hl 
9944			;	ld hl, os_word_scratch		; TODO do direct write to frame buffer instead and drop the str_at_display 
9944 cd f3 8e			call hexout 
9947 2a de e5		   	ld hl,(os_cur_ptr) 
994a			 
994a 7d				ld a,l 
994b e1				pop hl 
994c 23				inc hl 
994d 23				inc hl 
994e e5				push hl 
994f			;	ld hl, os_word_scratch+2 
994f cd f3 8e			call hexout 
9952 e1				pop hl 
9953 23				inc hl 
9954 23				inc hl 
9955				;ld hl, os_word_scratch+4 
9955 3e 3a			ld a, ':' 
9957 77				ld (hl),a 
9958 23				inc hl 
9959				;ld a, 0 
9959				;ld (hl),a 
9959				;ld de, os_word_scratch 
9959				;pop af 
9959				;push af 
9959			;		ld a, display_row_2 
9959			;		call str_at_display 
9959			;		call update_display 
9959			 
9959			 
9959			;pop af 
9959			;	add 5 
9959			 
9959			if display_cols == 20 
9959				ld b, 4 
9959			else 
9959 06 08			ld b, 8 
995b			endif	 
995b			 
995b			.dumpbyte: 
995b c5				push bc 
995c e5				push hl 
995d			 
995d			 
995d 2a de e5		   	ld hl,(os_cur_ptr) 
9960 7e					ld a,(hl) 
9961			 
9961					; poke the ascii to display 
9961 2a c0 e5				ld hl,(os_word_scratch) 
9964 77					ld (hl),a 
9965 23					inc hl 
9966 22 c0 e5				ld (os_word_scratch),hl 
9969			 
9969					 
9969			 
9969			 
9969 e1					pop hl 
996a e5					push hl 
996b			 
996b cd f3 8e				call hexout 
996e			 
996e					 
996e 2a de e5		   	ld hl,(os_cur_ptr) 
9971 23				inc hl 
9972 22 de e5		   	ld (os_cur_ptr),hl 
9975			 
9975 e1					pop hl 
9976 23					inc hl 
9977 23					inc hl 
9978 23					inc hl 
9979			 
9979			 
9979			 
9979					;ld a,0 
9979					;ld (os_word_scratch+2),a 
9979					;pop af 
9979					;push af 
9979			 
9979					;ld de, os_word_scratch 
9979					;call str_at_display 
9979			;		call update_display 
9979			;		pop af 
9979 c1					pop bc 
997a c6 03				add 3 
997c 10 dd			djnz .dumpbyte 
997e			 
997e				 
997e			 
997e c9				ret 
997f			 
997f			jump:	 
997f			 
997f 21 bd e2			ld hl,scratch+2 
9982 cd a9 8f			call get_word_hl 
9985				;ld hl,(scratch+2) 
9985				;call fourehexhl 
9985			 
9985 22 de e5			ld (os_cur_ptr),hl	 
9988			 
9988 e9				jp (hl) 
9989			 
9989			 
9989			 
9989			; TODO implement a basic monitor mode to start with 
9989			 
9989			 
9989			 
9989			 
9989			 
9989			 
9989			 
9989			 
9989			 
9989			; testing and demo code during development 
9989			 
9989			 
9989 .. 00		str1: db "Enter some text...",0 
999c .. 00		clear: db "                    ",0 
99b1			 
99b1			demo: 
99b1			 
99b1			 
99b1			 
99b1			;	call update_display 
99b1			 
99b1				; init scratch input area for testing 
99b1 21 bb e2			ld hl, scratch	 
99b4 3e 00			ld a,0 
99b6 77				ld (hl),a 
99b7			 
99b7			 
99b7 3e 28		            LD   A, display_row_2 
99b9			;            CALL fLCD_Pos       ;Position cursor to location in A 
99b9 11 89 99		            LD   DE, str1 
99bc cd d0 8a			call str_at_display 
99bf			 
99bf			;            CALL fLCD_Str       ;Display string pointed to by DE 
99bf			cloop:	 
99bf 3e 50		            LD   A, display_row_3 
99c1			;            CALL fLCD_Pos       ;Position cursor to location in A 
99c1 11 9c 99		            LD   DE, clear 
99c4			 ;           CALL fLCD_Str       ;Display string pointed to by DE 
99c4 cd d0 8a				call str_at_display 
99c7 3e 78			ld a, display_row_4 
99c9 11 f9 99			ld de, prompt 
99cc			 
99cc cd d0 8a				call str_at_display 
99cf cd e0 8a			call update_display 
99d2			 
99d2 3e 79			ld a, kLCD_Line4+1	 ; TODO using direct screen line writes. Correct this to frame buffer 
99d4 16 0a			ld d, 10 
99d6 21 bb e2			ld hl, scratch	 
99d9 cd 17 8d			call input_str 
99dc			 
99dc			;	call clear_display 
99dc			;'	call update_display 
99dc			 
99dc 3e 00		            LD   A, display_row_1 
99de			;            CALL fLCD_Pos       ;Position cursor to location in A 
99de 11 9c 99		            LD   DE, clear 
99e1 cd d0 8a				call str_at_display 
99e4			;            CALL fLCD_Str       ;Display string pointed to by DE 
99e4 3e 00		            LD   A, display_row_1 
99e6			;            CALL fLCD_Pos       ;Position cursor to location in A 
99e6 11 bb e2		            LD   DE, scratch 
99e9			;            CALL fLCD_Str       ;Display string pointed to by DE 
99e9 cd d0 8a				call str_at_display 
99ec cd e0 8a			call update_display 
99ef			 
99ef 3e 00				ld a,0 
99f1 21 bb e2			ld hl, scratch 
99f4 77				ld (hl),a 
99f5			 
99f5 00				nop 
99f6 c3 bf 99			jp cloop 
99f9			 
99f9			 
99f9			 
99f9			; OS Prompt 
99f9			 
99f9 .. 00		prompt: db ">",0 
99fb .. 00		endprg: db "?",0 
99fd			 
99fd			 
99fd			; handy next page prompt 
99fd			next_page_prompt: 
99fd e5				push hl 
99fe d5				push de 
99ff f5				push af 
9a00 c5				push bc 
9a01			 
9a01 3e 9f			ld a,display_row_4 + display_cols - 1 
9a03 11 fb 99		        ld de, endprg 
9a06 cd d0 8a			call str_at_display 
9a09 cd e0 8a			call update_display 
9a0c cd dc df			call cin_wait 
9a0f c1				pop bc 
9a10 f1				pop af 
9a11 d1				pop de 
9a12 e1				pop hl 
9a13			 
9a13			 
9a13 c9				ret 
9a14			 
9a14			 
9a14			; forth parser 
9a14			 
9a14			; My forth kernel 
9a14			include "forth_kernel.asm" 
9a14			; 
9a14			; kernel to the forth OS 
9a14			 
9a14			DS_TYPE_STR: equ 1     ; string type 
9a14			DS_TYPE_INUM: equ 2     ; $ 16 bit unsigned int usually a hex address 
9a14			DS_TYPE_SNUM: equ 3     ; $ 16 bit signed int  
9a14			;DS_TYPE_FNUM: equ 3      ; 24/32 bit floating point  do string conversion instead of a new type 
9a14			 
9a14			FORTH_PARSEV1: equ 0 
9a14			FORTH_PARSEV2: equ 0 
9a14			FORTH_PARSEV3: equ 0 
9a14			FORTH_PARSEV4: equ 0 
9a14			FORTH_PARSEV5: equ 0 
9a14			FORTH_PARSEV6: equ 1 
9a14			 
9a14			;if FORTH_PARSEV5 
9a14			;	FORTH_END_BUFFER: equ 0 
9a14			;else 
9a14			FORTH_END_BUFFER: equ 127 
9a14			;endif 
9a14			 
9a14			FORTH_TRUE: equ 1 
9a14			FORTH_FALSE: equ 0 
9a14			 
9a14			if FORTH_PARSEV4 
9a14			include "forth_stackops.asm" 
9a14			endif 
9a14			 
9a14			if FORTH_PARSEV5 
9a14			include "forth_stackopsv5.asm" 
9a14			endif 
9a14			 
9a14			if FORTH_PARSEV6 
9a14			include "forth_stackopsv5.asm" 
9a14			 
9a14			; Stack operations for v5 parser on wards 
9a14			; * DATA stack 
9a14			; * LOOP stack 
9a14			; * RETURN stack 
9a14			 
9a14			 
9a14			 
9a14			FORTH_CHK_DSP_UNDER: macro 
9a14				push hl 
9a14				push de 
9a14				ld hl,(cli_data_sp) 
9a14				ld de, cli_data_stack 
9a14				call cmp16 
9a14				jp c, fault_dsp_under 
9a14				pop de 
9a14				pop hl 
9a14				endm 
9a14			 
9a14			 
9a14			FORTH_CHK_RSP_UNDER: macro 
9a14				push hl 
9a14				push de 
9a14				ld hl,(cli_ret_sp) 
9a14				ld de, cli_ret_stack 
9a14				call cmp16 
9a14				jp c, fault_rsp_under 
9a14				pop de 
9a14				pop hl 
9a14				endm 
9a14			 
9a14			FORTH_CHK_LOOP_UNDER: macro 
9a14				push hl 
9a14				push de 
9a14				ld hl,(cli_loop_sp) 
9a14				ld de, cli_loop_stack 
9a14				call cmp16 
9a14				jp c, fault_loop_under 
9a14				pop de 
9a14				pop hl 
9a14				endm 
9a14			 
9a14			FORTH_ERR_TOS_NOTSTR: macro 
9a14				; TOSO might need more for checks when used 
9a14				push af 
9a14				ld a,(hl) 
9a14				cp DS_TYPE_STR 
9a14				jp nz, type_faultn   
9a14				pop af 
9a14				endm 
9a14			 
9a14			FORTH_ERR_TOS_NOTNUM: macro 
9a14				push af 
9a14				ld a,(hl) 
9a14				cp DS_TYPE_INUM 
9a14				jp nz, type_faultn   
9a14				pop af 
9a14				endm 
9a14			 
9a14			 
9a14			; increase data stack pointer and save hl to it 
9a14				 
9a14			FORTH_DSP_NEXT: macro 
9a14				call macro_forth_dsp_next 
9a14				endm 
9a14			 
9a14			 
9a14			macro_forth_dsp_next: 
9a14				if DEBUG_FORTH_STACK_GUARD 
9a14 cd 4e dc				call check_stacks 
9a17				endif 
9a17 e5				push hl 
9a18 d5				push de 
9a19 eb				ex de,hl 
9a1a 2a e8 e9			ld hl,(cli_data_sp) 
9a1d 23				inc hl 
9a1e 23				inc hl 
9a1f			 
9a1f			; PARSEV5 
9a1f 23				inc hl 
9a20 22 e8 e9			ld (cli_data_sp),hl 
9a23 73				ld (hl), e 
9a24 23				inc hl 
9a25 72				ld (hl), d 
9a26 d1				pop de 
9a27 e1				pop hl 
9a28				if DEBUG_FORTH_STACK_GUARD 
9a28 cd 4e dc				call check_stacks 
9a2b				endif 
9a2b c9				ret 
9a2c			 
9a2c			 
9a2c			; increase ret stack pointer and save hl to it 
9a2c				 
9a2c			FORTH_RSP_NEXT: macro 
9a2c				call macro_forth_rsp_next 
9a2c				endm 
9a2c			 
9a2c			macro_forth_rsp_next: 
9a2c				if DEBUG_FORTH_STACK_GUARD 
9a2c cd 4e dc				call check_stacks 
9a2f				endif 
9a2f e5				push hl 
9a30 d5				push de 
9a31 eb				ex de,hl 
9a32 2a ec e9			ld hl,(cli_ret_sp) 
9a35 23				inc hl 
9a36 23				inc hl 
9a37 22 ec e9			ld (cli_ret_sp),hl 
9a3a 73				ld (hl), e 
9a3b 23				inc hl 
9a3c 72				ld (hl), d 
9a3d d1				pop de 
9a3e e1				pop hl 
9a3f				if DEBUG_FORTH_STACK_GUARD 
9a3f cd 4e dc				call check_stacks 
9a42				endif 
9a42 c9				ret 
9a43			 
9a43			; get current ret stack pointer and save to hl  
9a43				 
9a43			FORTH_RSP_TOS: macro 
9a43				call macro_forth_rsp_tos 
9a43				endm 
9a43			 
9a43			macro_forth_rsp_tos: 
9a43				;push de 
9a43 2a ec e9			ld hl,(cli_ret_sp) 
9a46 cd 7e 9a			call loadhlptrtohl 
9a49				;ld e, (hl) 
9a49				;inc hl 
9a49				;ld d, (hl) 
9a49				;ex de, hl 
9a49					if DEBUG_FORTH_WORDS 
9a49			;			DMARK "RST" 
9a49						CALLMONITOR 
9a49 cd 6f ee			call debug_vector  
9a4c				endm  
# End of macro CALLMONITOR
9a4c					endif 
9a4c				;pop de 
9a4c c9				ret 
9a4d			 
9a4d			; pop ret stack pointer 
9a4d				 
9a4d			FORTH_RSP_POP: macro 
9a4d				call macro_forth_rsp_pop 
9a4d				endm 
9a4d			 
9a4d			 
9a4d			macro_forth_rsp_pop: 
9a4d				if DEBUG_FORTH_STACK_GUARD 
9a4d			;		DMARK "RPP" 
9a4d cd 4e dc				call check_stacks 
9a50					FORTH_CHK_RSP_UNDER 
9a50 e5				push hl 
9a51 d5				push de 
9a52 2a ec e9			ld hl,(cli_ret_sp) 
9a55 11 a6 e9			ld de, cli_ret_stack 
9a58 cd 08 8d			call cmp16 
9a5b da 65 dd			jp c, fault_rsp_under 
9a5e d1				pop de 
9a5f e1				pop hl 
9a60				endm 
# End of macro FORTH_CHK_RSP_UNDER
9a60				endif 
9a60 e5				push hl 
9a61 2a ec e9			ld hl,(cli_ret_sp) 
9a64			 
9a64			 
9a64				if FORTH_ENABLE_FREE 
9a64			 
9a64					; get pointer 
9a64			 
9a64					push de 
9a64					push hl 
9a64			 
9a64					ld e, (hl) 
9a64					inc hl 
9a64					ld d, (hl) 
9a64			 
9a64					ex de, hl 
9a64					call free 
9a64			 
9a64					pop hl 
9a64					pop de 
9a64			 
9a64			 
9a64				endif 
9a64			 
9a64			 
9a64 2b				dec hl 
9a65 2b				dec hl 
9a66 22 ec e9			ld (cli_ret_sp), hl 
9a69				; do stack underflow checks 
9a69 e1				pop hl 
9a6a				if DEBUG_FORTH_STACK_GUARD 
9a6a cd 4e dc				call check_stacks 
9a6d					FORTH_CHK_RSP_UNDER 
9a6d e5				push hl 
9a6e d5				push de 
9a6f 2a ec e9			ld hl,(cli_ret_sp) 
9a72 11 a6 e9			ld de, cli_ret_stack 
9a75 cd 08 8d			call cmp16 
9a78 da 65 dd			jp c, fault_rsp_under 
9a7b d1				pop de 
9a7c e1				pop hl 
9a7d				endm 
# End of macro FORTH_CHK_RSP_UNDER
9a7d				endif 
9a7d c9				ret 
9a7e			 
9a7e			 
9a7e			 
9a7e			; routine to load word pointed to by hl into hl 
9a7e			 
9a7e			loadhlptrtohl: 
9a7e			 
9a7e d5				push de 
9a7f 5e				ld e, (hl) 
9a80 23				inc hl 
9a81 56				ld d, (hl) 
9a82 eb				ex de, hl 
9a83 d1				pop de 
9a84			 
9a84 c9				ret 
9a85			 
9a85			 
9a85			 
9a85			 
9a85			 
9a85			; push a number held in HL onto the data stack 
9a85			; entry point for pushing a value when already in hl used in function above 
9a85			 
9a85			forth_push_numhl: 
9a85			 
9a85 e5				push hl    ; save value to push 
9a86			 
9a86			if DEBUG_FORTH_PUSH 
9a86				; see if disabled 
9a86			 
9a86			 
9a86 f5				push af 
9a87 3a 6f ee			ld a,(debug_vector) 
9a8a fe c9			cp $c9   ; ret 
9a8c			;	ld a, (os_view_disable) 
9a8c			;	cp '*' 
9a8c 28 34			jr z, .pskip2 
9a8e e5				push hl 
9a8f e5			push hl 
9a90 cd bd 8a			call clear_display 
9a93 e1			pop hl 
9a94 7c				ld a,h 
9a95 21 c0 e5			ld hl, os_word_scratch 
9a98 cd f3 8e			call hexout 
9a9b e1				pop hl 
9a9c 7d				ld a,l 
9a9d 21 c2 e5			ld hl, os_word_scratch+2 
9aa0 cd f3 8e			call hexout 
9aa3			 
9aa3 21 c4 e5			ld hl, os_word_scratch+4 
9aa6 3e 00			ld a,0 
9aa8 77				ld (hl),a 
9aa9 11 c0 e5			ld de,os_word_scratch 
9aac 3e 28				ld a, display_row_2 
9aae cd d0 8a				call str_at_display 
9ab1 11 47 ce			ld de, .push_num 
9ab4 3e 00			ld a, display_row_1 
9ab6			 
9ab6 cd d0 8a				call str_at_display 
9ab9			 
9ab9			 
9ab9 cd e0 8a			call update_display 
9abc cd 00 8a			call delay1s 
9abf cd 00 8a			call delay1s 
9ac2			.pskip2:  
9ac2			 
9ac2 f1				pop af 
9ac3			endif	 
9ac3			 
9ac3			 
9ac3				FORTH_DSP_NEXT 
9ac3 cd 14 9a			call macro_forth_dsp_next 
9ac6				endm 
# End of macro FORTH_DSP_NEXT
9ac6			 
9ac6 2a e8 e9			ld hl, (cli_data_sp) 
9ac9			 
9ac9				; save item type 
9ac9 3e 02			ld a,  DS_TYPE_INUM 
9acb 77				ld (hl), a 
9acc 23				inc hl 
9acd			 
9acd				; get word off stack 
9acd d1				pop de 
9ace 7b				ld a,e 
9acf 77				ld (hl), a 
9ad0 23				inc hl 
9ad1 7a				ld a,d 
9ad2 77				ld (hl), a 
9ad3			 
9ad3			if DEBUG_FORTH_PUSH 
9ad3 2b				dec hl 
9ad4 2b				dec hl 
9ad5 2b				dec hl 
9ad6						DMARK "PH5" 
9ad6 f5				push af  
9ad7 3a eb 9a			ld a, (.dmark)  
9ada 32 65 ee			ld (debug_mark),a  
9add 3a ec 9a			ld a, (.dmark+1)  
9ae0 32 66 ee			ld (debug_mark+1),a  
9ae3 3a ed 9a			ld a, (.dmark+2)  
9ae6 32 67 ee			ld (debug_mark+2),a  
9ae9 18 03			jr .pastdmark  
9aeb ..			.dmark: db "PH5"  
9aee f1			.pastdmark: pop af  
9aef			endm  
# End of macro DMARK
9aef				CALLMONITOR 
9aef cd 6f ee			call debug_vector  
9af2				endm  
# End of macro CALLMONITOR
9af2			endif	 
9af2			 
9af2 c9				ret 
9af3			 
9af3			 
9af3			; Push a string to stack pointed to by hl 
9af3			 
9af3			forth_push_str: 
9af3			 
9af3			if DEBUG_FORTH_PUSH 
9af3						DMARK "PSQ" 
9af3 f5				push af  
9af4 3a 08 9b			ld a, (.dmark)  
9af7 32 65 ee			ld (debug_mark),a  
9afa 3a 09 9b			ld a, (.dmark+1)  
9afd 32 66 ee			ld (debug_mark+1),a  
9b00 3a 0a 9b			ld a, (.dmark+2)  
9b03 32 67 ee			ld (debug_mark+2),a  
9b06 18 03			jr .pastdmark  
9b08 ..			.dmark: db "PSQ"  
9b0b f1			.pastdmark: pop af  
9b0c			endm  
# End of macro DMARK
9b0c				CALLMONITOR 
9b0c cd 6f ee			call debug_vector  
9b0f				endm  
# End of macro CALLMONITOR
9b0f			endif	 
9b0f			 
9b0f			 
9b0f			    
9b0f e5				push hl 
9b10 e5				push hl 
9b11			 
9b11			;	ld a, 0   ; find end of string 
9b11 cd 50 90			call strlenz 
9b14			if DEBUG_FORTH_PUSH 
9b14						DMARK "PQ2" 
9b14 f5				push af  
9b15 3a 29 9b			ld a, (.dmark)  
9b18 32 65 ee			ld (debug_mark),a  
9b1b 3a 2a 9b			ld a, (.dmark+1)  
9b1e 32 66 ee			ld (debug_mark+1),a  
9b21 3a 2b 9b			ld a, (.dmark+2)  
9b24 32 67 ee			ld (debug_mark+2),a  
9b27 18 03			jr .pastdmark  
9b29 ..			.dmark: db "PQ2"  
9b2c f1			.pastdmark: pop af  
9b2d			endm  
# End of macro DMARK
9b2d				CALLMONITOR 
9b2d cd 6f ee			call debug_vector  
9b30				endm  
# End of macro CALLMONITOR
9b30			endif	 
9b30 eb				ex de, hl 
9b31 e1				pop hl   ; get ptr to start of string 
9b32			if DEBUG_FORTH_PUSH 
9b32						DMARK "PQ3" 
9b32 f5				push af  
9b33 3a 47 9b			ld a, (.dmark)  
9b36 32 65 ee			ld (debug_mark),a  
9b39 3a 48 9b			ld a, (.dmark+1)  
9b3c 32 66 ee			ld (debug_mark+1),a  
9b3f 3a 49 9b			ld a, (.dmark+2)  
9b42 32 67 ee			ld (debug_mark+2),a  
9b45 18 03			jr .pastdmark  
9b47 ..			.dmark: db "PQ3"  
9b4a f1			.pastdmark: pop af  
9b4b			endm  
# End of macro DMARK
9b4b				CALLMONITOR 
9b4b cd 6f ee			call debug_vector  
9b4e				endm  
# End of macro CALLMONITOR
9b4e			endif	 
9b4e 19				add hl,de 
9b4f			if DEBUG_FORTH_PUSH 
9b4f						DMARK "PQE" 
9b4f f5				push af  
9b50 3a 64 9b			ld a, (.dmark)  
9b53 32 65 ee			ld (debug_mark),a  
9b56 3a 65 9b			ld a, (.dmark+1)  
9b59 32 66 ee			ld (debug_mark+1),a  
9b5c 3a 66 9b			ld a, (.dmark+2)  
9b5f 32 67 ee			ld (debug_mark+2),a  
9b62 18 03			jr .pastdmark  
9b64 ..			.dmark: db "PQE"  
9b67 f1			.pastdmark: pop af  
9b68			endm  
# End of macro DMARK
9b68				CALLMONITOR 
9b68 cd 6f ee			call debug_vector  
9b6b				endm  
# End of macro CALLMONITOR
9b6b			endif	 
9b6b			 
9b6b 2b				dec hl    ; see if there is an optional trailing double quote 
9b6c 7e				ld a,(hl) 
9b6d fe 22			cp '"' 
9b6f 20 03			jr nz, .strnoq 
9b71 3e 00			ld a, 0      ; get rid of double quote 
9b73 77				ld (hl), a 
9b74 23			.strnoq: inc hl 
9b75			 
9b75 3e 00			ld a, 0 
9b77 77				ld (hl), a     ; add null term and get rid of trailing double quote 
9b78			 
9b78 13				inc de ; add one for the type string 
9b79 13				inc de ; add one for null term??? 
9b7a			 
9b7a				; tos is get string pointer again 
9b7a				; de contains space to allocate 
9b7a				 
9b7a d5				push de 
9b7b			 
9b7b eb				ex de, hl 
9b7c			 
9b7c				;push af 
9b7c			 
9b7c			if DEBUG_FORTH_PUSH 
9b7c						DMARK "PHm" 
9b7c f5				push af  
9b7d 3a 91 9b			ld a, (.dmark)  
9b80 32 65 ee			ld (debug_mark),a  
9b83 3a 92 9b			ld a, (.dmark+1)  
9b86 32 66 ee			ld (debug_mark+1),a  
9b89 3a 93 9b			ld a, (.dmark+2)  
9b8c 32 67 ee			ld (debug_mark+2),a  
9b8f 18 03			jr .pastdmark  
9b91 ..			.dmark: db "PHm"  
9b94 f1			.pastdmark: pop af  
9b95			endm  
# End of macro DMARK
9b95				CALLMONITOR 
9b95 cd 6f ee			call debug_vector  
9b98				endm  
# End of macro CALLMONITOR
9b98			endif	 
9b98 cd c5 90			call malloc	; on ret hl now contains allocated memory 
9b9b				if DEBUG_FORTH_MALLOC_GUARD 
9b9b cc 9f ce				call z,malloc_error 
9b9e				endif 
9b9e			 
9b9e				 
9b9e c1				pop bc    ; get length 
9b9f d1				pop de   ;  get string start    
9ba0			 
9ba0				; hl has destination from malloc 
9ba0			 
9ba0 eb				ex de, hl    ; prep for ldir 
9ba1			 
9ba1 d5				push de   ; save malloc area for DSP later 
9ba2				;push hl   ; save malloc area for DSP later 
9ba2			 
9ba2			if DEBUG_FORTH_PUSH 
9ba2						DMARK "PHc" 
9ba2 f5				push af  
9ba3 3a b7 9b			ld a, (.dmark)  
9ba6 32 65 ee			ld (debug_mark),a  
9ba9 3a b8 9b			ld a, (.dmark+1)  
9bac 32 66 ee			ld (debug_mark+1),a  
9baf 3a b9 9b			ld a, (.dmark+2)  
9bb2 32 67 ee			ld (debug_mark+2),a  
9bb5 18 03			jr .pastdmark  
9bb7 ..			.dmark: db "PHc"  
9bba f1			.pastdmark: pop af  
9bbb			endm  
# End of macro DMARK
9bbb				CALLMONITOR 
9bbb cd 6f ee			call debug_vector  
9bbe				endm  
# End of macro CALLMONITOR
9bbe			endif	 
9bbe			 
9bbe			 
9bbe ed b0			ldir 
9bc0			 
9bc0			 
9bc0				; push malloc to data stack     macro?????  
9bc0			 
9bc0				FORTH_DSP_NEXT 
9bc0 cd 14 9a			call macro_forth_dsp_next 
9bc3				endm 
# End of macro FORTH_DSP_NEXT
9bc3			 
9bc3				; save value and type 
9bc3			 
9bc3 2a e8 e9			ld hl, (cli_data_sp) 
9bc6			 
9bc6				; save item type 
9bc6 3e 01			ld a,  DS_TYPE_STR 
9bc8 77				ld (hl), a 
9bc9 23				inc hl 
9bca			 
9bca				; get malloc word off stack 
9bca d1				pop de 
9bcb 73				ld (hl), e 
9bcc 23				inc hl 
9bcd 72				ld (hl), d 
9bce			 
9bce			 
9bce			 
9bce			if DEBUG_FORTH_PUSH 
9bce 2a e8 e9			ld hl, (cli_data_sp) 
9bd1						DMARK "PHS" 
9bd1 f5				push af  
9bd2 3a e6 9b			ld a, (.dmark)  
9bd5 32 65 ee			ld (debug_mark),a  
9bd8 3a e7 9b			ld a, (.dmark+1)  
9bdb 32 66 ee			ld (debug_mark+1),a  
9bde 3a e8 9b			ld a, (.dmark+2)  
9be1 32 67 ee			ld (debug_mark+2),a  
9be4 18 03			jr .pastdmark  
9be6 ..			.dmark: db "PHS"  
9be9 f1			.pastdmark: pop af  
9bea			endm  
# End of macro DMARK
9bea				CALLMONITOR 
9bea cd 6f ee			call debug_vector  
9bed				endm  
# End of macro CALLMONITOR
9bed			;	ex de,hl 
9bed			endif	 
9bed				; in case of spaces, skip the ptr past the copied string 
9bed				;pop af 
9bed				;ld (cli_origptr),hl 
9bed			 
9bed c9				ret 
9bee			 
9bee			 
9bee			 
9bee			; TODO ascii push input onto stack given hl to start of input 
9bee			 
9bee			; identify type 
9bee			; if starts with a " then a string 
9bee			; otherwise it is a number 
9bee			;  
9bee			; if a string 
9bee			;     scan for ending " to get length of string to malloc for + 1 
9bee			;     malloc 
9bee			;     put pointer to string on stack first byte flags as string 
9bee			; 
9bee			; else a number 
9bee			;    look for number format identifier 
9bee			;    $xx hex 
9bee			;    %xxxxx bin 
9bee			;    xxxxx decimal 
9bee			;    convert number to 16bit word.  
9bee			;    malloc word + 1 with flag to identiy as num 
9bee			;    put pointer to number on stack 
9bee			;   
9bee			;  
9bee			  
9bee			forth_apush: 
9bee				; kernel push 
9bee			 
9bee			if DEBUG_FORTH_PUSH 
9bee						DMARK "PSH" 
9bee f5				push af  
9bef 3a 03 9c			ld a, (.dmark)  
9bf2 32 65 ee			ld (debug_mark),a  
9bf5 3a 04 9c			ld a, (.dmark+1)  
9bf8 32 66 ee			ld (debug_mark+1),a  
9bfb 3a 05 9c			ld a, (.dmark+2)  
9bfe 32 67 ee			ld (debug_mark+2),a  
9c01 18 03			jr .pastdmark  
9c03 ..			.dmark: db "PSH"  
9c06 f1			.pastdmark: pop af  
9c07			endm  
# End of macro DMARK
9c07				CALLMONITOR 
9c07 cd 6f ee			call debug_vector  
9c0a				endm  
# End of macro CALLMONITOR
9c0a			endif	 
9c0a				; identify input type 
9c0a			 
9c0a 7e				ld a,(hl) 
9c0b			 
9c0b fe 23			cp '#' 
9c0d ca 47 9c			jp z, .fapdec 
9c10			 
9c10			 
9c10 fe 22			cp '"' 
9c12 28 0a			jr z, .fapstr 
9c14 fe 24			cp '$' 
9c16 ca 3e 9c			jp z, .faphex 
9c19 fe 25			cp '%' 
9c1b ca 26 9c			jp z, .fapbin 
9c1e			;	cp 'b' 
9c1e			;	jp z, .fabin 
9c1e				; else decimal 
9c1e			 
9c1e				; TODO do decimal conversion 
9c1e				; decimal is stored as a 16bit word 
9c1e			 
9c1e				; by default everything is a string if type is not detected 
9c1e			.fapstr: ; 
9c1e fe 22			cp '"' 
9c20 20 01			jr nz, .strnoqu 
9c22 23				inc hl 
9c23			.strnoqu: 
9c23 c3 f3 9a			jp forth_push_str 
9c26			 
9c26			 
9c26			 
9c26			.fapbin:    ; push a binary string.  
9c26 11 00 00			ld de, 0   ; hold a 16bit value 
9c29			 
9c29 23			.fapbinshift:	inc hl  
9c2a 7e				ld a,(hl) 
9c2b fe 00			cp 0     ; done scanning  
9c2d 28 0b			jr z, .fapbdone  	; got it in HL so push  
9c2f			 
9c2f				; left shift de 
9c2f eb				ex de, hl	 
9c30 29				add hl, hl 
9c31			 
9c31				; is 1 
9c31 fe 31			cp '1' 
9c33 20 02			jr nz, .binzero 
9c35 cb 4d			bit 1, l 
9c37			.binzero: 
9c37 eb				ex de, hl	 ; save current de 
9c38 18 ef			jr .fapbinshift 
9c3a			 
9c3a			.fapbdone: 
9c3a eb				ex de, hl 
9c3b c3 85 9a			jp forth_push_numhl 
9c3e			 
9c3e			 
9c3e			.faphex:   ; hex is always stored as a 16bit word 
9c3e				; skip number prefix 
9c3e 23				inc hl 
9c3f				; turn ascii into number 
9c3f cd a9 8f			call get_word_hl	; ret 16bit word in hl 
9c42			 
9c42 c3 85 9a			jp forth_push_numhl 
9c45			 
9c45 00				 nop 
9c46			 
9c46			.fabin:   ; TODO bin conversion 
9c46			 
9c46			 
9c46 c9				ret 
9c47			.fapdec:	 
9c47				; string to dec conversion 
9c47 23				inc hl 
9c48 eb				ex de, hl 
9c49 cd e7 8f			call string_to_uint16 
9c4c c3 85 9a			jp forth_push_numhl 
9c4f c9				ret 
9c50				 
9c50			;atoui_16: 
9c50			 
9c50			; get either a string ptr or a 16bit word from the data stack 
9c50			 
9c50			FORTH_DSP: macro 
9c50				call macro_forth_dsp 
9c50				endm 
9c50			 
9c50			macro_forth_dsp: 
9c50				; data stack pointer points to current word on tos 
9c50			 
9c50 2a e8 e9			ld hl,(cli_data_sp) 
9c53			 
9c53				if DEBUG_FORTH_PUSH 
9c53						DMARK "DSP" 
9c53 f5				push af  
9c54 3a 68 9c			ld a, (.dmark)  
9c57 32 65 ee			ld (debug_mark),a  
9c5a 3a 69 9c			ld a, (.dmark+1)  
9c5d 32 66 ee			ld (debug_mark+1),a  
9c60 3a 6a 9c			ld a, (.dmark+2)  
9c63 32 67 ee			ld (debug_mark+2),a  
9c66 18 03			jr .pastdmark  
9c68 ..			.dmark: db "DSP"  
9c6b f1			.pastdmark: pop af  
9c6c			endm  
# End of macro DMARK
9c6c			 
9c6c cd d2 ce				call display_data_sp 
9c6f				;call break_point_state 
9c6f				;rst 030h 
9c6f				CALLMONITOR 
9c6f cd 6f ee			call debug_vector  
9c72				endm  
# End of macro CALLMONITOR
9c72				endif 
9c72			 
9c72 c9				ret 
9c73			 
9c73			; return hl to start of value on stack 
9c73			 
9c73			FORTH_DSP_VALUE: macro 
9c73				call macro_forth_dsp_value 
9c73				endm 
9c73			 
9c73			macro_forth_dsp_value: 
9c73			 
9c73				FORTH_DSP 
9c73 cd 50 9c			call macro_forth_dsp 
9c76				endm 
# End of macro FORTH_DSP
9c76			 
9c76 d5				push de 
9c77			 
9c77 23				inc hl ; skip type 
9c78			 
9c78 5e				ld e, (hl) 
9c79 23				inc hl 
9c7a 56				ld d, (hl) 
9c7b eb				ex de,hl  
9c7c			 
9c7c d1				pop de 
9c7d			 
9c7d c9				ret 
9c7e			 
9c7e			; return hl to start of value to second item on stack 
9c7e			 
9c7e			FORTH_DSP_VALUEM1: macro 
9c7e				call macro_forth_dsp_value_m1 
9c7e				endm 
9c7e			 
9c7e			macro_forth_dsp_value_m1: 
9c7e			 
9c7e				FORTH_DSP 
9c7e cd 50 9c			call macro_forth_dsp 
9c81				endm 
# End of macro FORTH_DSP
9c81			 
9c81 2b				dec hl 
9c82 2b				dec hl 
9c83			;	dec hl 
9c83			 
9c83 d5				push de 
9c84			 
9c84 5e				ld e, (hl) 
9c85 23				inc hl 
9c86 56				ld d, (hl) 
9c87 eb				ex de,hl  
9c88			 
9c88 d1				pop de 
9c89			 
9c89 c9				ret 
9c8a			 
9c8a				 
9c8a			 
9c8a			; whatever the current top os stack points to, we are now done with it so return memory to malloc 
9c8a			 
9c8a			FORTH_DSP_POP: macro 
9c8a				call macro_forth_dsp_pop 
9c8a				endm 
9c8a			 
9c8a			 
9c8a			; get the tos data type 
9c8a			 
9c8a			FORTH_DSP_TYPE:   macro 
9c8a			 
9c8a				;FORTH_DSP_VALUE 
9c8a				FORTH_DSP 
9c8a				 
9c8a				; hl points to value 
9c8a				; check type 
9c8a			 
9c8a				ld a,(hl) 
9c8a			 
9c8a				endm 
9c8a			 
9c8a			; load the tos value into hl 
9c8a			 
9c8a			 
9c8a			FORTH_DSP_VALUEHL:  macro 
9c8a				call macro_dsp_valuehl 
9c8a				endm 
9c8a			 
9c8a			 
9c8a			 
9c8a			macro_dsp_valuehl: 
9c8a				FORTH_DSP_VALUE 
9c8a cd 73 9c			call macro_forth_dsp_value 
9c8d				endm 
# End of macro FORTH_DSP_VALUE
9c8d			 
9c8d				;FORTH_ERR_TOS_NOTNUM 
9c8d			 
9c8d				;inc hl   ; skip type id 
9c8d			 
9c8d			;	push de 
9c8d			; 
9c8d			;	ld e, (hl) 
9c8d			;	inc hl 
9c8d			;	ld d, (hl) 
9c8d			;	ex de,hl  
9c8d			 
9c8d			;	pop de 
9c8d			 
9c8d				if DEBUG_FORTH_PUSH 
9c8d						DMARK "DVL" 
9c8d f5				push af  
9c8e 3a a2 9c			ld a, (.dmark)  
9c91 32 65 ee			ld (debug_mark),a  
9c94 3a a3 9c			ld a, (.dmark+1)  
9c97 32 66 ee			ld (debug_mark+1),a  
9c9a 3a a4 9c			ld a, (.dmark+2)  
9c9d 32 67 ee			ld (debug_mark+2),a  
9ca0 18 03			jr .pastdmark  
9ca2 ..			.dmark: db "DVL"  
9ca5 f1			.pastdmark: pop af  
9ca6			endm  
# End of macro DMARK
9ca6				CALLMONITOR 
9ca6 cd 6f ee			call debug_vector  
9ca9				endm  
# End of macro CALLMONITOR
9ca9				endif 
9ca9 c9				ret 
9caa			 
9caa			forth_apushstrhl:      
9caa				; push of string requires use of cli_origptr 
9caa				; bodge use 
9caa			 
9caa				; get current cli_origptr, save, update with temp pointer  
9caa ed 5b 38 ea		ld de, (cli_origptr) 
9cae 22 38 ea			ld (cli_origptr), hl 
9cb1 d5				push de 
9cb2 cd ee 9b			call forth_apush 
9cb5 d1				pop de 
9cb6 ed 53 38 ea		ld (cli_origptr), de 
9cba c9			        ret	 
9cbb			 
9cbb			 
9cbb			; increase loop stack pointer and save hl to it 
9cbb				 
9cbb			FORTH_LOOP_NEXT: macro 
9cbb				call macro_forth_loop_next 
9cbb				;nop 
9cbb				endm 
9cbb			 
9cbb			macro_forth_loop_next: 
9cbb				if DEBUG_FORTH_STACK_GUARD 
9cbb cd 4e dc				call check_stacks 
9cbe				endif 
9cbe e5				push hl 
9cbf d5				push de 
9cc0 eb				ex de,hl 
9cc1 2a ea e9			ld hl,(cli_loop_sp) 
9cc4 23				inc hl 
9cc5 23				inc hl 
9cc6					if DEBUG_FORTH_WORDS 
9cc6						DMARK "LNX" 
9cc6 f5				push af  
9cc7 3a db 9c			ld a, (.dmark)  
9cca 32 65 ee			ld (debug_mark),a  
9ccd 3a dc 9c			ld a, (.dmark+1)  
9cd0 32 66 ee			ld (debug_mark+1),a  
9cd3 3a dd 9c			ld a, (.dmark+2)  
9cd6 32 67 ee			ld (debug_mark+2),a  
9cd9 18 03			jr .pastdmark  
9cdb ..			.dmark: db "LNX"  
9cde f1			.pastdmark: pop af  
9cdf			endm  
# End of macro DMARK
9cdf						CALLMONITOR 
9cdf cd 6f ee			call debug_vector  
9ce2				endm  
# End of macro CALLMONITOR
9ce2					endif 
9ce2 22 ea e9			ld (cli_loop_sp),hl 
9ce5 73				ld (hl), e 
9ce6 23				inc hl 
9ce7 72				ld (hl), d 
9ce8 d1				pop de    ; been reversed so save a swap on restore 
9ce9 e1				pop hl 
9cea				if DEBUG_FORTH_STACK_GUARD 
9cea cd 4e dc				call check_stacks 
9ced				endif 
9ced c9				ret 
9cee			 
9cee			; get current ret stack pointer and save to hl  
9cee				 
9cee			FORTH_LOOP_TOS: macro 
9cee				call macro_forth_loop_tos 
9cee				endm 
9cee			 
9cee			macro_forth_loop_tos: 
9cee d5				push de 
9cef 2a ea e9			ld hl,(cli_loop_sp) 
9cf2 5e				ld e, (hl) 
9cf3 23				inc hl 
9cf4 56				ld d, (hl) 
9cf5 eb				ex de, hl 
9cf6 d1				pop de 
9cf7 c9				ret 
9cf8			 
9cf8			; pop loop stack pointer 
9cf8				 
9cf8			FORTH_LOOP_POP: macro 
9cf8				call macro_forth_loop_pop 
9cf8				endm 
9cf8			 
9cf8			 
9cf8			macro_forth_loop_pop: 
9cf8				if DEBUG_FORTH_STACK_GUARD 
9cf8					DMARK "LPP" 
9cf8 f5				push af  
9cf9 3a 0d 9d			ld a, (.dmark)  
9cfc 32 65 ee			ld (debug_mark),a  
9cff 3a 0e 9d			ld a, (.dmark+1)  
9d02 32 66 ee			ld (debug_mark+1),a  
9d05 3a 0f 9d			ld a, (.dmark+2)  
9d08 32 67 ee			ld (debug_mark+2),a  
9d0b 18 03			jr .pastdmark  
9d0d ..			.dmark: db "LPP"  
9d10 f1			.pastdmark: pop af  
9d11			endm  
# End of macro DMARK
9d11 cd 4e dc				call check_stacks 
9d14					FORTH_CHK_LOOP_UNDER 
9d14 e5				push hl 
9d15 d5				push de 
9d16 2a ea e9			ld hl,(cli_loop_sp) 
9d19 11 24 e9			ld de, cli_loop_stack 
9d1c cd 08 8d			call cmp16 
9d1f da 6b dd			jp c, fault_loop_under 
9d22 d1				pop de 
9d23 e1				pop hl 
9d24				endm 
# End of macro FORTH_CHK_LOOP_UNDER
9d24				endif 
9d24 e5				push hl 
9d25 2a ea e9			ld hl,(cli_loop_sp) 
9d28 2b				dec hl 
9d29 2b				dec hl 
9d2a 22 ea e9			ld (cli_loop_sp), hl 
9d2d				; TODO do stack underflow checks 
9d2d e1				pop hl 
9d2e				if DEBUG_FORTH_STACK_GUARD 
9d2e cd 4e dc				call check_stacks 
9d31					FORTH_CHK_LOOP_UNDER 
9d31 e5				push hl 
9d32 d5				push de 
9d33 2a ea e9			ld hl,(cli_loop_sp) 
9d36 11 24 e9			ld de, cli_loop_stack 
9d39 cd 08 8d			call cmp16 
9d3c da 6b dd			jp c, fault_loop_under 
9d3f d1				pop de 
9d40 e1				pop hl 
9d41				endm 
# End of macro FORTH_CHK_LOOP_UNDER
9d41				endif 
9d41 c9				ret 
9d42			 
9d42			macro_forth_dsp_pop: 
9d42			 
9d42 e5				push hl 
9d43			 
9d43				; release malloc data 
9d43			 
9d43				if DEBUG_FORTH_STACK_GUARD 
9d43 cd 4e dc				call check_stacks 
9d46					FORTH_CHK_DSP_UNDER 
9d46 e5				push hl 
9d47 d5				push de 
9d48 2a e8 e9			ld hl,(cli_data_sp) 
9d4b 11 22 e8			ld de, cli_data_stack 
9d4e cd 08 8d			call cmp16 
9d51 da 5f dd			jp c, fault_dsp_under 
9d54 d1				pop de 
9d55 e1				pop hl 
9d56				endm 
# End of macro FORTH_CHK_DSP_UNDER
9d56				endif 
9d56				;ld hl,(cli_data_sp) 
9d56			if DEBUG_FORTH_DOT 
9d56				DMARK "DPP" 
9d56 f5				push af  
9d57 3a 6b 9d			ld a, (.dmark)  
9d5a 32 65 ee			ld (debug_mark),a  
9d5d 3a 6c 9d			ld a, (.dmark+1)  
9d60 32 66 ee			ld (debug_mark+1),a  
9d63 3a 6d 9d			ld a, (.dmark+2)  
9d66 32 67 ee			ld (debug_mark+2),a  
9d69 18 03			jr .pastdmark  
9d6b ..			.dmark: db "DPP"  
9d6e f1			.pastdmark: pop af  
9d6f			endm  
# End of macro DMARK
9d6f				CALLMONITOR 
9d6f cd 6f ee			call debug_vector  
9d72				endm  
# End of macro CALLMONITOR
9d72			endif	 
9d72			 
9d72			 
9d72			if FORTH_ENABLE_DSPPOPFREE 
9d72			 
9d72				FORTH_DSP 
9d72 cd 50 9c			call macro_forth_dsp 
9d75				endm 
# End of macro FORTH_DSP
9d75			 
9d75 7e				ld a, (hl) 
9d76 fe 01			cp DS_TYPE_STR 
9d78 20 23			jr nz, .skippopfree 
9d7a			 
9d7a				FORTH_DSP_VALUEHL 
9d7a cd 8a 9c			call macro_dsp_valuehl 
9d7d				endm 
# End of macro FORTH_DSP_VALUEHL
9d7d 00				nop 
9d7e			if DEBUG_FORTH_DOT 
9d7e				DMARK "DPf" 
9d7e f5				push af  
9d7f 3a 93 9d			ld a, (.dmark)  
9d82 32 65 ee			ld (debug_mark),a  
9d85 3a 94 9d			ld a, (.dmark+1)  
9d88 32 66 ee			ld (debug_mark+1),a  
9d8b 3a 95 9d			ld a, (.dmark+2)  
9d8e 32 67 ee			ld (debug_mark+2),a  
9d91 18 03			jr .pastdmark  
9d93 ..			.dmark: db "DPf"  
9d96 f1			.pastdmark: pop af  
9d97			endm  
# End of macro DMARK
9d97				CALLMONITOR 
9d97 cd 6f ee			call debug_vector  
9d9a				endm  
# End of macro CALLMONITOR
9d9a			endif	 
9d9a cd 8f 91			call free 
9d9d			.skippopfree: 
9d9d				 
9d9d			 
9d9d			endif 
9d9d			 
9d9d			if DEBUG_FORTH_DOT_KEY 
9d9d				DMARK "DP2" 
9d9d				CALLMONITOR 
9d9d			endif	 
9d9d			 
9d9d				; move pointer down 
9d9d			 
9d9d 2a e8 e9			ld hl,(cli_data_sp) 
9da0 2b				dec hl 
9da1 2b				dec hl 
9da2			; PARSEV5 
9da2 2b				dec hl 
9da3 22 e8 e9			ld (cli_data_sp), hl 
9da6			 
9da6				if DEBUG_FORTH_STACK_GUARD 
9da6 cd 4e dc				call check_stacks 
9da9					FORTH_CHK_DSP_UNDER 
9da9 e5				push hl 
9daa d5				push de 
9dab 2a e8 e9			ld hl,(cli_data_sp) 
9dae 11 22 e8			ld de, cli_data_stack 
9db1 cd 08 8d			call cmp16 
9db4 da 5f dd			jp c, fault_dsp_under 
9db7 d1				pop de 
9db8 e1				pop hl 
9db9				endm 
# End of macro FORTH_CHK_DSP_UNDER
9db9				endif 
9db9			 
9db9 e1				pop hl 
9dba			 
9dba c9				ret 
9dbb			 
9dbb			getwordathl: 
9dbb				; hl points to an address 
9dbb				; load hl with the word at that address 
9dbb			 
9dbb d5				push de 
9dbc			 
9dbc 5e				ld e, (hl) 
9dbd 23				inc hl 
9dbe 56				ld d, (hl) 
9dbf eb				ex de, hl 
9dc0			 
9dc0 d1				pop de 
9dc1 c9				ret 
9dc2			 
9dc2			 
9dc2			; functions to manuplite stack pointers 
9dc2			 
9dc2			; generate fragment to set hl to be pointer to a stack item 
9dc2			 
9dc2			FORTH_DSP_PTR: macro  x 
9dc2				ld hl,(cli_data_sp) 
9dc2				ld de, x * 3 
9dc2				sbc hl, de 
9dc2				endm 
9dc2			 
9dc2			 
9dc2			 
9dc2			; copy point in hl to stack tmp storage slots 1-4 
9dc2			hltostack1: 
9dc2 11 b8 e2			ld de, os_stack_1  
9dc5 c3 f0 9d			jp hltostackmv 
9dc8			 
9dc8			hltostack2:  
9dc8 11 b5 e2			ld de, os_stack_2 
9dcb c3 f0 9d			jp hltostackmv 
9dce			 
9dce			hltostack3:  
9dce 11 b2 e2			ld de, os_stack_3 
9dd1 c3 f0 9d			jp hltostackmv 
9dd4			 
9dd4			hltostack4:  
9dd4 11 af e2			ld de, os_stack_4  
9dd7 c3 f0 9d			jp hltostackmv 
9dda			 
9dda			; copy to point in hl from stack tmp storage slots 1-4 
9dda			hlfromstack1: 
9dda 11 b8 e2			ld de, os_stack_1 
9ddd c3 ef 9d			jp hlfromsttackmv 
9de0			 
9de0			hlfromstack2:  
9de0 11 b5 e2			ld de, os_stack_2 
9de3 c3 ef 9d			jp hlfromsttackmv 
9de6			 
9de6			hlfromstack3:  
9de6 11 b2 e2			ld de, os_stack_3 
9de9 c3 ef 9d			jp hlfromsttackmv 
9dec			 
9dec			hlfromstack4:  
9dec 11 af e2			ld de, os_stack_4 
9def			 
9def			hlfromsttackmv: 
9def eb				ex de, hl 
9df0			 
9df0			hltostackmv: 
9df0			 
9df0				; do stack move 
9df0 c5				push bc 
9df1 01 03 00			ld bc, 3 
9df4 ed b0			ldir  
9df6 c1				pop bc	 
9df7 c9				ret 
9df8			 
9df8			; eof 
9df8			 
# End of file forth_stackopsv5.asm
9df8			endif 
9df8			loadwordinhl:	 
9df8			 
9df8 d5				push de 
9df9			 
9df9 5e				ld e, (hl) 
9dfa 23				inc hl 
9dfb 56				ld d, (hl) 
9dfc eb				ex de,hl  
9dfd			 
9dfd d1				pop de 
9dfe			 
9dfe c9				ret 
9dff			 
9dff			user_word_eol:  
9dff				; hl contains the pointer to where to create a linked list item from the end 
9dff				; of the user dict to continue on at the system word dict 
9dff				 
9dff				; poke the stub of the word list linked list to repoint to rom words 
9dff			 
9dff				; stub format 
9dff				; db   word id 
9dff				; dw    link to next word 
9dff			        ; db char length of token 
9dff				; db string + 0 term 
9dff				; db exec code....  
9dff			 
9dff 3e 00			ld a, WORD_SYS_ROOT     ; root word 
9e01 77				ld (hl), a		; word id 
9e02 23				inc hl 
9e03			 
9e03 11 ba 9f			ld de, sysdict 
9e06 73				ld (hl), e		; next word link ie system dict 
9e07 23				inc hl 
9e08 72				ld (hl), d		; next word link ie system dict 
9e09 23				inc hl	 
9e0a			 
9e0a			;	ld (hl), sysdict		; next word link ie system dict 
9e0a			;	inc hl 
9e0a			;	inc hl 
9e0a			 
9e0a			;	inc hl 
9e0a			;	inc hl 
9e0a			 
9e0a 3e 02			ld a, 2			; word length is 0 
9e0c 77				ld (hl), a	 
9e0d 23				inc hl 
9e0e			 
9e0e 3e 7e			ld a, '~'			; word length is 0 
9e10 77				ld (hl), a	 
9e11 23				inc hl 
9e12 3e 00			ld a, 0			; save empty word 
9e14 77				ld (hl), a 
9e15			 
9e15 c9				ret 
9e16			 
9e16				 
9e16			 
9e16			forthexec_cleanup: 
9e16				FORTH_RSP_POP 
9e16 cd 4d 9a			call macro_forth_rsp_pop 
9e19				endm 
# End of macro FORTH_RSP_POP
9e19 c9				ret 
9e1a			 
9e1a			forth_call_hl: 
9e1a				; taking hl 
9e1a e5				push hl 
9e1b c9				ret 
9e1c			 
9e1c			; this is called to reset Forth system but keep existing uwords etc 
9e1c			 
9e1c			forth_warmstart: 
9e1c				; setup stack over/under flow checks 
9e1c				if DEBUG_FORTH_STACK_GUARD 
9e1c cd 34 dc				call chk_stk_init 
9e1f				endif 
9e1f			 
9e1f				; init stack pointers  - * these stacks go upwards *  
9e1f 21 a6 e9			ld hl, cli_ret_stack 
9e22 22 ec e9			ld (cli_ret_sp), hl	 
9e25				; set bottom of stack 
9e25 3e 00			ld a,0 
9e27 77				ld (hl),a 
9e28 23				inc hl 
9e29 77				ld (hl),a 
9e2a			 
9e2a 21 22 e8			ld hl, cli_data_stack 
9e2d 22 e8 e9			ld (cli_data_sp), hl	 
9e30				; set bottom of stack 
9e30 3e 00			ld a,0 
9e32 77				ld (hl),a 
9e33 23				inc hl 
9e34 77				ld (hl),a 
9e35			 
9e35 21 24 e9			ld hl, cli_loop_stack 
9e38 22 ea e9			ld (cli_loop_sp), hl	 
9e3b				; set bottom of stack 
9e3b 3e 00			ld a,0 
9e3d 77				ld (hl),a 
9e3e 23				inc hl 
9e3f 77				ld (hl),a 
9e40			 
9e40				; init extent of current open file 
9e40			 
9e40 3e 00			ld a, 0 
9e42 32 64 ea			ld (store_openext), a 
9e45			 
9e45 c9				ret 
9e46			 
9e46			 
9e46			 
9e46			; Cold Start - this is called to setup the whole Forth system 
9e46			 
9e46			forth_init: 
9e46			 
9e46				; setup stack over/under flow checks 
9e46			 
9e46			;	if DEBUG_FORTH_STACK_GUARD 
9e46			;		call chk_stk_init 
9e46			;	endif 
9e46			 
9e46				; enable auto display updates (slow.....) 
9e46			 
9e46 3e 01			ld a, 1 
9e48 32 36 ea			ld (cli_autodisplay), a 
9e4b			 
9e4b				; if storage is in use disable long reads for now 
9e4b 3e 00			ld a, 0 
9e4d 32 6f ea			ld (store_longread), a 
9e50			 
9e50			 
9e50				; show start up screen 
9e50			 
9e50 cd bd 8a			call clear_display 
9e53			 
9e53 3e 00			ld a,0 
9e55 32 58 ea			ld (f_cursor_ptr), a 
9e58			 
9e58				; set start of word list in start of ram - for use when creating user words 
9e58			 
9e58 21 f1 df			ld hl, baseram 
9e5b 22 b8 e5			ld (os_last_new_uword), hl 
9e5e cd ff 9d			call user_word_eol 
9e61				 
9e61			;		call display_data_sp 
9e61			;		call next_page_prompt 
9e61			 
9e61			 
9e61			 
9e61			 
9e61 c9				ret 
9e62			 
9e62 .. 00		.bootforth: db " Forth Kernel Init ",0 
9e76			 
9e76			; TODO push to stack 
9e76			 
9e76			;  
9e76			 
9e76			if FORTH_PARSEV2 
9e76			 
9e76			 
9e76				include "forth_parserv2.asm" 
9e76			 
9e76			endif 
9e76			 
9e76			 
9e76			; parse cli version 1 
9e76			 
9e76			if FORTH_PARSEV1 
9e76			 
9e76			 
9e76			 
9e76			      include "forth_parserv1.asm" 
9e76			endif 
9e76				 
9e76			if FORTH_PARSEV3 
9e76			      include "forth_parserv3.asm" 
9e76				include "forth_wordsv3.asm" 
9e76			endif 
9e76			 
9e76			if FORTH_PARSEV4 
9e76			      include "forth_parserv4.asm" 
9e76				include "forth_wordsv4.asm" 
9e76			endif 
9e76			 
9e76			if FORTH_PARSEV5 
9e76			      include "forth_parserv5.asm" 
9e76				include "forth_wordsv4.asm" 
9e76			endif 
9e76			 
9e76			if FORTH_PARSEV6 
9e76			      include "forth_parserv6.asm" 
9e76			 
9e76			 
9e76			; A better parser without using malloc and string copies all over the place.  
9e76			; Exec in situ should be faster 
9e76			 
9e76			;WORD_SYS_LOWPRIM: equ 4    ; Offset for low level prim words opcode 
9e76			;WORD_SYS_BRANCH: equ 10    ; Offset for branching and loop words opcode 
9e76			WORD_SYS_UWORD: equ 1   ; Opcode for all user words 
9e76			WORD_SYS_DELETED: equ 3 ; Op code for a deleted UWORD 
9e76			WORD_SYS_ROOT: equ 0   ; Opcode for all user words 
9e76			WORD_SYS_END: equ 0   ; Opcode for all user words 
9e76			WORD_SYS_CORE: equ 20    ; Offset for dict core words opcode 
9e76			WORD_FLAG_CODE: equ 0	   ; opcodeflag to exec pure code for this word 
9e76			WORD_FLAG_JP: equ 1	   ; opcodeflag to list zero term jump table words 
9e76			 
9e76			; Core word preamble macro 
9e76			 
9e76			CWHEAD:   macro nxtword opcode lit len opflags 
9e76				db WORD_SYS_CORE+opcode             
9e76				; internal op code number 
9e76				dw nxtword            
9e76				; link to next dict word block 
9e76				db len + 1 
9e76				; literal length of dict word inc zero term 
9e76				db lit,0              
9e76				; literal dict word 
9e76			        ; TODO db opflags        
9e76				endm 
9e76			 
9e76			 
9e76			NEXTW: macro  
9e76				jp macro_next 
9e76				endm 
9e76			 
9e76			macro_next: 
9e76			if DEBUG_FORTH_PARSE_EXEC 
9e76				DMARK "NXT" 
9e76				CALLMONITOR 
9e76			endif	 
9e76			;	inc hl  ; skip token null term  
9e76 ed 4b 3a ea		ld bc,(cli_ptr)   ; move to next token to parse in the input stream 
9e7a ed 5b 38 ea		ld de,(cli_origptr)   ; move to next token to parse in the input stream 
9e7e 2a bc e5			ld hl,(os_tok_ptr)   ; move to next token to parse in the input stream 
9e81			if DEBUG_FORTH_PARSE_EXEC 
9e81				DMARK "}AA" 
9e81				CALLMONITOR 
9e81			endif	 
9e81 c3 70 9f			jp execnext 
9e84				;jp exec1 
9e84			       
9e84			 
9e84			 
9e84			; Another go at the parser to compile  
9e84			 
9e84			 
9e84			; TODO rework parser to change all of the string words to byte tokens 
9e84			; TODO do a search for  
9e84			 
9e84			; TODO first run normal parser to zero term sections 
9e84			; TODO for each word do a token look up to get the op code 
9e84			; TODO need some means to flag to the exec that this is a byte code form    
9e84			 
9e84			 
9e84			forthcompile: 
9e84			 
9e84			; 
9e84			; line parse: 
9e84			;       parse raw input buffer 
9e84			;       tokenise the words 
9e84			;       malloc new copy (for looping etc) 
9e84			;       copy to malloc + current pc in line to start of string and add line term 
9e84			;       save on new rsp 
9e84			; 
9e84			 
9e84			; hl to point to the line to tokenise 
9e84			 
9e84			;	push hl 
9e84 22 bc e5			ld (os_tok_ptr), hl  ; save ptr to string 
9e87			 
9e87			;	ld a,0		; string term on input 
9e87			;	call strlent 
9e87			 
9e87			;	ld (os_tok_len), hl	 ; save string length 
9e87			 
9e87			;if DEBUG_FORTH_TOK 
9e87			;	ex de,hl		 
9e87			;endif 
9e87			 
9e87			;	pop hl 		; get back string pointer 
9e87			 
9e87			if DEBUG_FORTH_TOK 
9e87						DMARK "TOc" 
9e87				CALLMONITOR 
9e87			endif 
9e87 7e			.cptoken2:    ld a,(hl) 
9e88 23				inc hl 
9e89 fe 7f			cp FORTH_END_BUFFER 
9e8b 28 29			jr z, .cptokendone2 
9e8d fe 00			cp 0 
9e8f 28 25			jr z, .cptokendone2 
9e91 fe 22			cp '"' 
9e93 28 0b			jr z, .cptokenstr2     ; will want to skip until end of string delim 
9e95 fe 20			cp ' ' 
9e97 20 ee			jr nz,  .cptoken2 
9e99			 
9e99			; TODO consume comments held between ( and ) 
9e99			 
9e99				; we have a space so change to zero term for dict match later 
9e99 2b				dec hl 
9e9a 3e 00			ld a,0 
9e9c 77				ld (hl), a 
9e9d 23				inc hl 
9e9e 18 e7			jr .cptoken2 
9ea0				 
9ea0			 
9ea0			.cptokenstr2: 
9ea0				; skip all white space until either eol (because forgot to term) or end double quote 
9ea0			        ;   if double quotes spotted ensure to skip any space sep until matched doble quote 
9ea0				;inc hl ; skip current double quote 
9ea0 7e				ld a,(hl) 
9ea1 23				inc hl 
9ea2 fe 22			cp '"' 
9ea4 28 e1			jr z, .cptoken2 
9ea6 fe 7f			cp FORTH_END_BUFFER 
9ea8 28 0c			jr z, .cptokendone2 
9eaa fe 00			cp 0 
9eac 28 08			jr z, .cptokendone2 
9eae fe 20			cp ' ' 
9eb0 28 02			jr z, .cptmp2 
9eb2 18 ec			jr .cptokenstr2 
9eb4			 
9eb4			.cptmp2:	; we have a space so change to zero term for dict match later 
9eb4				;dec hl 
9eb4				;ld a,"-"	; TODO remove this when working 
9eb4				;ld (hl), a 
9eb4				;inc hl 
9eb4 18 ea			jr .cptokenstr2 
9eb6			 
9eb6			.cptokendone2: 
9eb6				;inc hl 
9eb6 3e 7f			ld a, FORTH_END_BUFFER 
9eb8 77				ld (hl),a 
9eb9			;	inc hl 
9eb9			;	ld a, '!' 
9eb9			;	ld (hl),a 
9eb9			 
9eb9 2a bc e5			ld hl,(os_tok_ptr) 
9ebc			         
9ebc			if DEBUG_FORTH_TOK 
9ebc						DMARK "Tc1" 
9ebc				CALLMONITOR 
9ebc			endif 
9ebc			 
9ebc				; push exec string to top of return stack 
9ebc				FORTH_RSP_NEXT 
9ebc cd 2c 9a			call macro_forth_rsp_next 
9ebf				endm 
# End of macro FORTH_RSP_NEXT
9ebf c9				ret 
9ec0			 
9ec0			; Another go at the parser need to simplify the process 
9ec0			 
9ec0			forthparse: 
9ec0			 
9ec0			; 
9ec0			; line parse: 
9ec0			;       parse raw input buffer 
9ec0			;       tokenise the words 
9ec0			;       malloc new copy (for looping etc) 
9ec0			;       copy to malloc + current pc in line to start of string and add line term 
9ec0			;       save on new rsp 
9ec0			; 
9ec0			 
9ec0			; hl to point to the line to tokenise 
9ec0			 
9ec0			;	push hl 
9ec0 22 bc e5			ld (os_tok_ptr), hl  ; save ptr to string 
9ec3			 
9ec3			;	ld a,0		; string term on input 
9ec3			;	call strlent 
9ec3			 
9ec3			;	ld (os_tok_len), hl	 ; save string length 
9ec3			 
9ec3			;if DEBUG_FORTH_TOK 
9ec3			;	ex de,hl		 
9ec3			;endif 
9ec3			 
9ec3			;	pop hl 		; get back string pointer 
9ec3			 
9ec3			if DEBUG_FORTH_TOK 
9ec3						DMARK "TOK" 
9ec3				CALLMONITOR 
9ec3			endif 
9ec3 7e			.ptoken2:    ld a,(hl) 
9ec4 23				inc hl 
9ec5 fe 7f			cp FORTH_END_BUFFER 
9ec7 28 29			jr z, .ptokendone2 
9ec9 fe 00			cp 0 
9ecb 28 25			jr z, .ptokendone2 
9ecd fe 22			cp '"' 
9ecf 28 0b			jr z, .ptokenstr2     ; will want to skip until end of string delim 
9ed1 fe 20			cp ' ' 
9ed3 20 ee			jr nz,  .ptoken2 
9ed5			 
9ed5			; TODO consume comments held between ( and ) 
9ed5			 
9ed5				; we have a space so change to zero term for dict match later 
9ed5 2b				dec hl 
9ed6 3e 00			ld a,0 
9ed8 77				ld (hl), a 
9ed9 23				inc hl 
9eda 18 e7			jr .ptoken2 
9edc				 
9edc			 
9edc			.ptokenstr2: 
9edc				; skip all white space until either eol (because forgot to term) or end double quote 
9edc			        ;   if double quotes spotted ensure to skip any space sep until matched doble quote 
9edc				;inc hl ; skip current double quote 
9edc 7e				ld a,(hl) 
9edd 23				inc hl 
9ede fe 22			cp '"' 
9ee0 28 e1			jr z, .ptoken2 
9ee2 fe 7f			cp FORTH_END_BUFFER 
9ee4 28 0c			jr z, .ptokendone2 
9ee6 fe 00			cp 0 
9ee8 28 08			jr z, .ptokendone2 
9eea fe 20			cp ' ' 
9eec 28 02			jr z, .ptmp2 
9eee 18 ec			jr .ptokenstr2 
9ef0			 
9ef0			.ptmp2:	; we have a space so change to zero term for dict match later 
9ef0				;dec hl 
9ef0				;ld a,"-"	; TODO remove this when working 
9ef0				;ld (hl), a 
9ef0				;inc hl 
9ef0 18 ea			jr .ptokenstr2 
9ef2			 
9ef2			.ptokendone2: 
9ef2				;inc hl 
9ef2 3e 7f			ld a, FORTH_END_BUFFER 
9ef4 77				ld (hl),a 
9ef5			;	inc hl 
9ef5			;	ld a, '!' 
9ef5			;	ld (hl),a 
9ef5			 
9ef5 2a bc e5			ld hl,(os_tok_ptr) 
9ef8			         
9ef8			if DEBUG_FORTH_TOK 
9ef8						DMARK "TK1" 
9ef8				CALLMONITOR 
9ef8			endif 
9ef8			 
9ef8				; push exec string to top of return stack 
9ef8				FORTH_RSP_NEXT 
9ef8 cd 2c 9a			call macro_forth_rsp_next 
9efb				endm 
# End of macro FORTH_RSP_NEXT
9efb c9				ret 
9efc			 
9efc			; 
9efc			;	; malloc size + buffer pointer + if is loop flag 
9efc			;	ld hl,(os_tok_len) 		 ; get string length 
9efc			; 
9efc			;	ld a,l 
9efc			; 
9efc			;	cp 0			; we dont want to use a null string 
9efc			;	ret z 
9efc			; 
9efc			;;	add 3    ; prefix malloc with buffer for current word ptr 
9efc			; 
9efc			;	add 5     ; TODO when certain not over writing memory remove 
9efc			; 
9efc			;		 
9efc			; 
9efc			;if DEBUG_FORTH_TOK 
9efc			;			DMARK "TKE" 
9efc			;	CALLMONITOR 
9efc			;endif 
9efc			; 
9efc			;	ld l,a 
9efc			;	ld h,0 
9efc			;;	push hl   ; save required space for the copy later 
9efc			;	call malloc 
9efc			;if DEBUG_FORTH_TOK 
9efc			;			DMARK "TKM" 
9efc			;	CALLMONITOR 
9efc			;endif 
9efc			;	if DEBUG_FORTH_MALLOC_GUARD 
9efc			;		push af 
9efc			;		call ishlzero 
9efc			;;		ld a, l 
9efc			;;		add h 
9efc			;;		cp 0 
9efc			;		pop af 
9efc			;		 
9efc			;		call z,malloc_error 
9efc			;	endif 
9efc			;	ld (os_tok_malloc), hl	 ; save malloc ptr 
9efc			; 
9efc			; 
9efc			;if DEBUG_FORTH_TOK 
9efc			;			DMARK "TKR" 
9efc			;	CALLMONITOR 
9efc			;endif 
9efc			; 
9efc			;	FORTH_RSP_NEXT 
9efc			; 
9efc			;	;inc hl	 ; go past current buffer pointer 
9efc			;	;inc hl 
9efc			;	;inc hl   ; and past if loop flag 
9efc			;		; TODO Need to set flag  
9efc			; 
9efc			;	 
9efc			;	 
9efc			;	ex de,hl	; malloc is dest 
9efc			;	ld hl, (os_tok_len) 
9efc			;;	pop bc 
9efc			;	ld c, l                
9efc			;	ld b,0 
9efc			;	ld hl, (os_tok_ptr) 
9efc			; 
9efc			;if DEBUG_FORTH_TOK 
9efc			;			DMARK "TKT" 
9efc			;	CALLMONITOR 
9efc			;endif 
9efc			; 
9efc			;	; do str cpy 
9efc			; 
9efc			;	ldir      ; copy byte in hl to de 
9efc			; 
9efc			;	; set end of buffer to high bit on zero term and use that for end of buffer scan 
9efc			; 
9efc			;if DEBUG_FORTH_TOK 
9efc			; 
9efc			;			DMARK "TKY" 
9efc			;	CALLMONITOR 
9efc			;endif 
9efc			;	;ld a,0 
9efc			;	;ld a,FORTH_END_BUFFER 
9efc			;	ex de, hl 
9efc			;	;dec hl			 ; go back over the space delim at the end of word 
9efc			;	;ld (hl),a 
9efc			;	;inc hl                    ;  TODO double check this. Going past the end of string to make sure end of processing buffer is marked 
9efc			;	ld a,FORTH_END_BUFFER 
9efc			;	ld (hl),a 
9efc			;	inc hl 
9efc			;	ld a,FORTH_END_BUFFER 
9efc			;	ld (hl),a 
9efc			; 
9efc			;	; init the malloc area data 
9efc			;	; set pc for in current area 
9efc			;	;ld hl, (os_tok_malloc) 
9efc			;	;inc hl 
9efc			;	;inc hl 
9efc			;	;inc hl 
9efc			;	;ex de,hl 
9efc			;	;ld hl, (os_tok_malloc) 
9efc			;	;ld (hl),e 
9efc			;	;inc hl 
9efc			;	;ld (hl),d 
9efc			; 
9efc			; 
9efc			;	ld hl,(os_tok_malloc) 
9efc			;if DEBUG_FORTH_PARSE_KEY 
9efc			;			DMARK "TKU" 
9efc			;	CALLMONITOR 
9efc			;endif 
9efc			; 
9efc			;	ret 
9efc			 
9efc			forthexec: 
9efc			 
9efc			; line exec: 
9efc			; forth parser 
9efc			 
9efc			; 
9efc			;       get current exec line on rsp 
9efc			 
9efc				FORTH_RSP_TOS 
9efc cd 43 9a			call macro_forth_rsp_tos 
9eff				endm 
# End of macro FORTH_RSP_TOS
9eff			 
9eff			;       restore current pc - hl points to malloc of data 
9eff			 
9eff				;ld e, (hl) 
9eff				;inc hl 
9eff				;ld d, (hl) 
9eff				;ex de,hl 
9eff			 
9eff			 
9eff			exec1: 
9eff 22 bc e5			ld (os_tok_ptr), hl                 ; here move out of repeated saving in this tight loop 
9f02			 
9f02				; copy our PC to working vars  
9f02 22 3a ea			ld (cli_ptr), hl                    ; here 
9f05 22 38 ea			ld (cli_origptr), hl                ; here 
9f08			 
9f08 7e				ld a,(hl)                           ; here make hl be the ram ptr 
9f09 fe 7f			cp FORTH_END_BUFFER 
9f0b c8				ret z 
9f0c			 
9f0c				; skip any nulls 
9f0c			 
9f0c fe 00			cp 0 
9f0e 20 03			jr nz, .execword 
9f10 23				inc hl 
9f11 18 ec			jr exec1 
9f13			 
9f13			 
9f13			.execword: 
9f13			 
9f13			 
9f13			 
9f13			if DEBUG_FORTH_PARSE_EXEC 
9f13						DMARK "KYQ" 
9f13				CALLMONITOR 
9f13			endif 
9f13			;       while at start of word: 
9f13			; get start of dict (in user area first) 
9f13			 
9f13 21 f1 df		ld hl, baseram 
9f16			;ld hl, sysdict 
9f16 22 3c ea		ld (cli_nextword),hl                            ; here do we need to do this? 
9f19			;           match word at pc 
9f19			;           exec word 
9f19			;           or push to dsp 
9f19			;           forward to next token 
9f19			;           if line term pop rsp and exit 
9f19			;        
9f19			 
9f19			if DEBUG_FORTH_PARSE_EXEC 
9f19						DMARK "KYq" 
9f19				CALLMONITOR 
9f19			endif 
9f19			 
9f19			; 
9f19			; word comp 
9f19			;    get compiled byte and save it (need to decide if code is compiled or not for comparison) 
9f19			;    if byte is 0 then end parsing and report failed lookup (or could be something to add to stack etc) 
9f19			;    move to start of word  
9f19			;    compare word to cli_token 
9f19			 
9f19			.execpnword:	; HL at start of a word in the dictionary to check 
9f19			 
9f19 2a 3c ea			ld hl,(cli_nextword)                  ; here remove the need to store???? 
9f1c			 
9f1c cd b3 9f			call forth_tok_next 
9f1f			; tok next end here 
9f1f 22 3c ea			ld (cli_nextword), hl     ; save for next check if no match on this word 
9f22 eb				ex de, hl 
9f23			 
9f23			 
9f23				; save the pointer of the current token - 1 to check against 
9f23				 
9f23 22 40 ea			ld (cli_token), hl   
9f26				; TODO maybe remove below save if no debug 
9f26				; save token string ptr for any debug later 
9f26 23				inc hl  
9f27 22 42 ea			ld (cli_origtoken), hl 
9f2a 2b				dec hl 
9f2b				; save pointer to the start of the next dictionay word 
9f2b 7e				ld a,(hl)   ; get string length 
9f2c 47				ld b,a 
9f2d			.execpnwordinc:  
9f2d 23				inc hl 
9f2e 10 fd			djnz .execpnwordinc 
9f30 22 3e ea			ld (cli_execword), hl      ; save start of this words code 
9f33			 
9f33				; now check the word token against the string being parsed 
9f33			 
9f33 2a 40 ea			ld hl,(cli_token) 
9f36 23				inc hl     ; skip string length (use zero term instead to end) 
9f37				;ld (cli_token), hl 
9f37			 
9f37			.execpnchar:    ; compare char between token and string to parse 
9f37			 
9f37			 
9f37				;ld hl, (cli_token)     ; the dict word  
9f37 ed 5b 3a ea		ld de, (cli_ptr)     ; cli to parse 
9f3b			 
9f3b			 
9f3b			.execpncharl:    ; compare char between token and string to parse (loop) 
9f3b			 
9f3b 1a				ld a,(de) 
9f3c cd 47 90			call toUpper 		; make sure the input string matches case 
9f3f be				cp (hl) 
9f40			 
9f40 c2 59 9f			jp nz, .execpnskipword	 ; no match so move to next word 
9f43				 
9f43			;    if same 
9f43			;       scan for string terms 0 for token and 32 for input 
9f43 46				ld b,(hl) 
9f44 80				add b			 
9f45 23				inc hl 
9f46 13				inc de 
9f47 fe 00			cp 0			 ; add both chars together, if 32 then other must be 0 so at end of string we are parsing? 
9f49							; TODO need to make sure last word in zero term string is accounted for 
9f49 20 f0			jr nz, .execpncharl 		 ; not at end of strings yet 
9f4b			 
9f4b			 
9f4b				; at end of both strings so both are exact match 
9f4b			 
9f4b			;       skip ptr for next word 
9f4b			 
9f4b 2a 3a ea			ld hl,(cli_ptr) 	; at input string term 
9f4e 23				inc hl			 ; at next char 
9f4f 22 3a ea			ld (cli_ptr), hl     ; save for next round of the parser 
9f52 22 38 ea			ld (cli_origptr), hl     ; save for any restart of current string ie a number or string to push to data stack 
9f55				 
9f55				 
9f55			 
9f55			 
9f55			 
9f55			;       exec code block 
9f55			if DEBUG_FORTH_JP 
9f55				call clear_display 
9f55				call update_display 
9f55				call delay1s 
9f55				ld hl, (cli_execword)     ; save for next check if no match on this word 
9f55				ld a,h 
9f55				ld hl, os_word_scratch 
9f55				call hexout 
9f55				ld hl, (cli_execword)     ; save for next check if no match on this word 
9f55				ld a,l 
9f55				ld hl, os_word_scratch+2 
9f55				call hexout 
9f55				ld hl, os_word_scratch+4 
9f55				ld a,0 
9f55				ld (hl),a 
9f55				ld de,os_word_scratch 
9f55				call str_at_display 
9f55					ld a, display_row_2 
9f55					call str_at_display 
9f55				ld de, (cli_origtoken) 
9f55				ld a, display_row_1+10 
9f55					call str_at_display 
9f55			 
9f55				ld a,display_row_1 
9f55				ld de, .foundword 
9f55				ld a, display_row_3 
9f55				call str_at_display 
9f55				call update_display 
9f55				call delay1s 
9f55				call delay1s 
9f55				call delay1s 
9f55			endif 
9f55			 
9f55			if DEBUG_FORTH_PARSE_EXEC 
9f55						DMARK "KYj" 
9f55			endif 
9f55				; TODO save the word pointer in this exec 
9f55			 
9f55 2a 3e ea			ld hl,(cli_execword) 
9f58 e9				jp (hl) 
9f59			 
9f59			 
9f59			;    if not same 
9f59			;	scan for zero term 
9f59			;	get ptr for next word 
9f59			;	goto word comp 
9f59			 
9f59			.execpnskipword:	; get pointer to next word 
9f59 2a 3c ea			ld hl,(cli_nextword) 
9f5c			 
9f5c 7e				ld a,(hl) 
9f5d fe 00			cp WORD_SYS_END 
9f5f			;	cp 0 
9f5f 28 09			jr z, .execendofdict			 ; at end of words 
9f61			 
9f61			if DEBUG_FORTH_PARSE_EXEC 
9f61						DMARK "KY4" 
9f61			endif 
9f61			if DEBUG_FORTH_PARSE_EXEC 
9f61			 
9f61				; see if disabled 
9f61			 
9f61			;	ld a, (os_view_disable) 
9f61			;	cp '*' 
9f61				ld a,(debug_vector) 
9f61				cp $c9   ; RET 
9f61				jr z, .noskip 
9f61			 
9f61			 
9f61				ld de, .nowordfound 
9f61				ld a, display_row_3 
9f61				call str_at_display 
9f61				call update_display 
9f61				ld a, 100 
9f61				call aDelayInMS 
9f61				 
9f61				if DEBUG_FORTH_PARSE_EXEC_SLOW 
9f61					call delay250ms 
9f61				endif 
9f61			.noskip:  
9f61			 
9f61			endif	 
9f61			 
9f61 2a 38 ea			ld hl,(cli_origptr) 
9f64 22 3a ea			ld (cli_ptr),hl 
9f67			 
9f67			if DEBUG_FORTH_PARSE_EXEC 
9f67						DMARK "KY5" 
9f67			endif 
9f67 c3 19 9f			jp .execpnword			; else go to next word 
9f6a			 
9f6a			.execendofdict:  
9f6a			 
9f6a			if DEBUG_FORTH_PARSE_EXEC 
9f6a						DMARK "KYe" 
9f6a			endif 
9f6a			if DEBUG_FORTH_PARSE_EXEC 
9f6a				; see if disabled 
9f6a			 
9f6a			;	ld a, (os_view_disable) 
9f6a			;	cp '*' 
9f6a				ld a,(debug_vector) 
9f6a				cp $c9   ; ret 
9f6a				jr z, .ispskip 
9f6a			 
9f6a				call clear_display 
9f6a				call update_display 
9f6a				call delay1s 
9f6a				ld de, (cli_origptr) 
9f6a				ld a, display_row_1 
9f6a				call str_at_display 
9f6a				 
9f6a				ld de, .enddict 
9f6a				ld a, display_row_3 
9f6a				call str_at_display 
9f6a				call update_display 
9f6a				ld a, 100 
9f6a				call aDelayInMS 
9f6a				if DEBUG_FORTH_PARSE_EXEC_SLOW 
9f6a				call delay1s 
9f6a				call delay1s 
9f6a				call delay1s 
9f6a				endif 
9f6a			.ispskip:  
9f6a				 
9f6a			endif	 
9f6a			 
9f6a			 
9f6a			 
9f6a				; if the word is not a keyword then must be a literal so push it to stack 
9f6a			 
9f6a			; push token to stack to end of word 
9f6a			 
9f6a				STACKFRAME ON $1efe $2f9f 
9f6a				if DEBUG_STACK_IMB 
9f6a					if ON 
9f6a						exx 
9f6a						ld de, $1efe 
9f6a						ld a, d 
9f6a						ld hl, curframe 
9f6a						call hexout 
9f6a						ld a, e 
9f6a						ld hl, curframe+2 
9f6a						call hexout 
9f6a						ld hl, $1efe 
9f6a						push hl 
9f6a						ld hl, $2f9f 
9f6a						push hl 
9f6a						exx 
9f6a					endif 
9f6a				endif 
9f6a			endm 
# End of macro STACKFRAME
9f6a			 
9f6a 2a bc e5		ld hl,(os_tok_ptr) 
9f6d cd ee 9b		call forth_apush 
9f70			 
9f70				STACKFRAMECHK ON $1efe $2f9f 
9f70				if DEBUG_STACK_IMB 
9f70					if ON 
9f70						exx 
9f70						ld hl, $2f9f 
9f70						pop de   ; $2f9f 
9f70						call cmp16 
9f70						jr nz, .spnosame 
9f70						ld hl, $1efe 
9f70						pop de   ; $1efe 
9f70						call cmp16 
9f70						jr z, .spfrsame 
9f70						.spnosame: call showsperror 
9f70						.spfrsame: nop 
9f70						exx 
9f70					endif 
9f70				endif 
9f70			endm 
# End of macro STACKFRAMECHK
9f70			 
9f70			execnext: 
9f70			 
9f70			if DEBUG_FORTH_PARSE_EXEC 
9f70						DMARK "KY>" 
9f70			endif 
9f70			; move past token to next word 
9f70			 
9f70 2a bc e5		ld hl, (os_tok_ptr) 
9f73 3e 00		ld a, 0 
9f75 01 ff 00		ld bc, 255     ; input buffer size 
9f78 ed b1		cpir 
9f7a			 
9f7a			if DEBUG_FORTH_PARSE_EXEC 
9f7a						DMARK "KY!" 
9f7a				CALLMONITOR 
9f7a			endif	 
9f7a			; TODO this might place hl on the null, so will need to forward on??? 
9f7a			;inc hl   ; see if this gets onto the next item 
9f7a			 
9f7a			 
9f7a			; TODO pass a pointer to the buffer to push 
9f7a			; TODO call function to push 
9f7a			 
9f7a			; look for end of input 
9f7a			 
9f7a			;inc hl 
9f7a			;ld a,(hl) 
9f7a			;cp FORTH_END_BUFFER 
9f7a			;ret z 
9f7a			 
9f7a			 
9f7a c3 ff 9e		jp exec1 
9f7d			 
9f7d			 
9f7d			 
9f7d			 
9f7d			 
9f7d			 
9f7d			 
9f7d			 
9f7d			 
9f7d			findnexttok: 
9f7d			 
9f7d				; hl is pointer to move 
9f7d				; de is the token to locate 
9f7d			 
9f7d					if DEBUG_FORTH 
9f7d						DMARK "NTK" 
9f7d						CALLMONITOR 
9f7d					endif 
9f7d d5				push de 
9f7e			 
9f7e			.fnt1:	 
9f7e				; find first char of token to locate 
9f7e			 
9f7e 1a				ld a, (de) 
9f7f 4f				ld c,a 
9f80 7e				ld a,(hl) 
9f81 cd 47 90			call toUpper 
9f84					if DEBUG_FORTH 
9f84						DMARK "NT1" 
9f84						CALLMONITOR 
9f84					endif 
9f84 b9				cp c 
9f85			 
9f85 28 03			jr z, .fnt2cmpmorefirst	 
9f87			 
9f87				; first char not found move to next char 
9f87			 
9f87 23				inc hl 
9f88 18 f4			jr .fnt1 
9f8a			 
9f8a			.fnt2cmpmorefirst:	 
9f8a				; first char of token found.  
9f8a			 
9f8a e5				push hl     ; save start of token just in case it is the right one 
9f8b d9				exx 
9f8c e1				pop hl        ; save it to hl' 
9f8d d9				exx 
9f8e			 
9f8e			 
9f8e			.fnt2cmpmore:	 
9f8e				; compare the rest 
9f8e				 
9f8e 23				inc hl 
9f8f 13				inc de 
9f90				 
9f90 1a				ld a, (de) 
9f91 4f				ld c,a 
9f92 7e				ld a,(hl) 
9f93 cd 47 90			call toUpper 
9f96			 
9f96					if DEBUG_FORTH 
9f96						DMARK "NT2" 
9f96						CALLMONITOR 
9f96					endif 
9f96				; c has the token to find char 
9f96				; a has the mem to scan char 
9f96			 
9f96 b9				cp c 
9f97 28 04			jr z,.fntmatch1 
9f99			 
9f99				; they are not the same 
9f99			 
9f99					if DEBUG_FORTH 
9f99						DMARK "NT3" 
9f99						CALLMONITOR 
9f99					endif 
9f99 d1				pop de	; reset de token to look for 
9f9a d5				push de 
9f9b 18 e1			jr .fnt1 
9f9d				 
9f9d			.fntmatch1: 
9f9d			 
9f9d				; is the same char a null which means we might have a full hit? 
9f9d					if DEBUG_FORTH 
9f9d						DMARK "NT4" 
9f9d						CALLMONITOR 
9f9d					endif 
9f9d			 
9f9d fe 00			cp 0 
9f9f 28 0b			jr z, .fntmatchyes 
9fa1			 
9fa1				; are we at the end of the token to find? 
9fa1			 
9fa1					if DEBUG_FORTH 
9fa1						DMARK "NT5" 
9fa1						CALLMONITOR 
9fa1					endif 
9fa1 3e 00			ld a, 0 
9fa3 b9				cp c 
9fa4			 
9fa4 c2 8e 9f			jp nz, .fnt2cmpmore    ; no, so keep going to a direct hit 
9fa7			 
9fa7					if DEBUG_FORTH 
9fa7						DMARK "NT6" 
9fa7						CALLMONITOR 
9fa7					endif 
9fa7				; token to find is exhusted but no match to stream 
9fa7			 
9fa7				; restore tok pointer and continue on 
9fa7 d1				pop de 
9fa8 d5				push de 
9fa9 c3 7e 9f			jp .fnt1 
9fac			 
9fac			 
9fac			.fntmatchyes: 
9fac			 
9fac				; hl now contains the end of the found token 
9fac			 
9fac				; get rid of saved token pointer to find 
9fac			 
9fac d1				pop de 
9fad			 
9fad					if DEBUG_FORTH 
9fad						DMARK "NT9" 
9fad						CALLMONITOR 
9fad					endif 
9fad			 
9fad				; hl will be on the null term so forward on 
9fad			 
9fad				; get back the saved start of the token 
9fad			 
9fad d9				exx 
9fae e5				push hl     ; save start of token just in case it is the right one 
9faf d9				exx 
9fb0 e1				pop hl        ; save it to hl 
9fb1			 
9fb1 c9				ret 
9fb2			 
9fb2			 
9fb2			; LIST needs to find a specific token   
9fb2			; FORGET needs to find a spefici token 
9fb2			 
9fb2			; SAVE needs to find all tokens by flag 
9fb2			; WORDS just needs to scan through all  by flag 
9fb2			; UWORDS needs to scan through all by flag 
9fb2			 
9fb2			 
9fb2			; given hl as pointer to start of dict look up string 
9fb2			; return hl as pointer to start of word block 
9fb2			; or 0 if not found 
9fb2			 
9fb2			forth_find_tok: 
9fb2 c9				ret 
9fb3			 
9fb3			; given hl as pointer to dict structure 
9fb3			; move to the next dict block structure 
9fb3			 
9fb3			forth_tok_next: 
9fb3				; hl now points to the address of the next word pointer  
9fb3				; TODO skip compiled symbol for now 
9fb3			;	push de 
9fb3 23				inc hl 
9fb4 5e				ld e, (hl) 
9fb5 23				inc hl 
9fb6 56				ld d, (hl) 
9fb7 23				inc hl 
9fb8			 
9fb8 eb				ex de,hl 
9fb9			if DEBUG_FORTH_PARSE_NEXTWORD 
9fb9				push bc 
9fb9				ld bc, (cli_nextword) 
9fb9						DMARK "NXW" 
9fb9				CALLMONITOR 
9fb9				pop bc 
9fb9			endif 
9fb9			;	pop de	 
9fb9 c9				ret 
9fba			 
9fba			 
9fba			 
9fba			; eof 
# End of file forth_parserv6.asm
9fba				include "forth_wordsv4.asm" 
9fba			 
9fba			; the core word dictionary v4 
9fba			; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Notation.html#Notation 
9fba			 
9fba			; this is a linked list for each of the system words used 
9fba			; user defined words will follow the same format but will be in ram 
9fba			 
9fba			 
9fba			; 
9fba			; 
9fba			; define linked list: 
9fba			; 
9fba			; 1. compiled byte op code 
9fba			; 2. len of text word 
9fba			; 3. text word 
9fba			; 4. ptr to next dictionary word 
9fba			; 5. asm, calls etc for the word 
9fba			; 
9fba			;  if 1 == 0 then last word in dict  
9fba			;   
9fba			; set the start of dictionary scanning to be in ram and the last word point to the system dict 
9fba			;  
9fba			;  
9fba			; create basic standard set of words 
9fba			; 
9fba			;  
9fba			; + - / * DUP EMIT . SWAP IF..THEN..ELSE DO..LOOP  : ; DROP  
9fba			; 2DUP 2DROP 2SWAP  
9fba			; @ C@ - get byte  
9fba			; ! C! - store byte 
9fba			; 0< true if less than zero 
9fba			; 0= true if zero 
9fba			; < >  
9fba			; = true if same 
9fba			; variables 
9fba			 
9fba			 
9fba			; Hardware specific words I may need 
9fba			; 
9fba			; IN OUT  
9fba			; calls to key util functions 
9fba			; calls to hardward abstraction stuff 
9fba			; easy control of frame buffers and lcd i/o 
9fba			; keyboard  
9fba			 
9fba			 
9fba			;DICT: macro 
9fba			; op_code, len, word, next 
9fba			;    word: 
9fba			;    db op_code 
9fba			;    ds word zero term 
9fba			;    dw next 
9fba			;    endm 
9fba			 
9fba			 
9fba			 
9fba			 
9fba			; op code 1 is a flag for user define words which are to be handled differently 
9fba			 
9fba			 
9fba			; 
9fba			; 
9fba			;    TODO on entry to a word this should be the expected environment 
9fba			;    hl - tos value if number then held, if string this is the ptr 
9fba			;    de -  
9fba			 
9fba			 
9fba			; opcode ranges 
9fba			; 0 - end of word dict 
9fba			; 255 - user define words 
9fba			 
9fba			sysdict: 
9fba			include "forth_opcodes.asm" 
9fba			; op codes for forth keywords 
9fba			 
9fba			; Changing use of opcodes to flag is the word exists in compiled form or not.  
9fba			; This provides a means to compile uwords if required for higher performance 
9fba			; by avoiding the use of the keyword parser and just jumping directly to the code 
9fba			; Actually there is already a flag for if the code exists as binary thinking about it... 
9fba			 
9fba			 
9fba			 
9fba			 
9fba			 
9fba			; free to use code 0  
9fba				OPCODE_HEAP: equ  1 
9fba				OPCODE_EXEC: equ 2 
9fba				OPCODE_DUP: equ 3 
9fba				OPCODE_SWAP: equ 4 
9fba				OPCODE_COLN: equ 5 
9fba				OPCODE_SCOLN: equ 6 
9fba				OPCODE_DROP: equ 7 
9fba				OPCODE_DUP2: equ 8 
9fba				OPCODE_DROP2: equ 9 
9fba				OPCODE_SWAP2: equ 10 
9fba				OPCODE_AT: equ 11 
9fba				OPCODE_CAT: equ 12 
9fba				OPCODE_BANG: equ 13 
9fba				OPCODE_CBANG: equ 14 
9fba				OPCODE_SCALL: equ 15 
9fba				OPCODE_DEPTH: equ 16 
9fba				OPCODE_OVER: equ 17 
9fba				OPCODE_PAUSE: equ 18 
9fba				OPCODE_PAUSES: equ 19 
9fba				OPCODE_ROT: equ 20 
9fba			;free to reuse	OPCODE_WORDS: equ 21 
9fba			        OPCODE_NOT: equ 21 
9fba				OPCODE_UWORDS: equ 22 
9fba				OPCODE_BP: equ 23 
9fba				OPCODE_MONITOR: equ 24  
9fba				OPCODE_MALLOC: equ 25 
9fba				OPCODE_FREE: equ 26 
9fba				OPCODE_LIST: equ 27 
9fba				OPCODE_FORGET: equ 28 
9fba				OPCODE_NOP: equ 29 
9fba				OPCODE_COMO: equ 30 
9fba				OPCODE_COMC: equ 31 
9fba			;free to reuse	OPCODE_ENDCORE: equ 32 
9fba				OPCODE_AFTERSOUND: equ 33 
9fba				OPCODE_GP2: equ 34 
9fba				OPCODE_GP3: equ 35 
9fba				OPCODE_GP4: equ 36 
9fba				OPCODE_SIN: equ 37 
9fba				OPCODE_SOUT: equ 38 
9fba				OPCODE_SPIO: equ 39 
9fba				OPCODE_SPICEH: equ 40 
9fba				OPCODE_SPIOb: equ 41 
9fba				OPCODE_SPII: equ 42 
9fba				OPCODE_SESEL: equ 43 
9fba				OPCODE_CARTDEV: equ 44 
9fba			; free to reuse	OPCODE_ENDDEVICE: equ 45 
9fba				OPCODE_FB: equ 46 
9fba				OPCODE_EMIT: equ 47 
9fba				OPCODE_DOTH: equ 48 
9fba				OPCODE_DOTF: equ 49 
9fba				OPCODE_DOT: equ 50 
9fba				OPCODE_CLS: equ 51 
9fba				OPCODE_DRAW: equ 52 
9fba				OPCODE_DUMP: equ 53 
9fba				OPCODE_CDUMP: equ 54 
9fba				OPCODE_DAT: equ 55 
9fba				OPCODE_HOME: equ 56 
9fba				OPCODE_SPACE: equ 57 
9fba				OPCODE_SPACES: equ 58 
9fba				OPCODE_SCROLL: equ 59 
9fba				OPCODE_ATQ: equ 60 
9fba				OPCODE_AUTODSP: equ 61 
9fba				OPCODE_MENU: equ 62 
9fba			; free to reuse	OPCODE_ENDDISPLAY: equ 63  
9fba				OPCODE_THEN: equ 64 
9fba				OPCODE_ELSE: equ 65 
9fba				OPCODE_DO: equ 66 
9fba				OPCODE_LOOP: equ 67 
9fba				OPCODE_I: equ 68 
9fba				OPCODE_DLOOP: equ 69  
9fba				OPCODE_REPEAT: equ 70  
9fba				OPCODE_UNTIL: equ 71 
9fba				OPCODE_ENDFLOW: equ 72 
9fba				OPCODE_WAITK: equ 73 
9fba				OPCODE_ACCEPT: equ 74 
9fba				OPCODE_EDIT: equ 75 
9fba			;free to reuse	OPCODE_ENDKEY: equ 76 
9fba				OPCODE_LZERO: equ 77 
9fba				OPCODE_TZERO: equ 78 
9fba				OPCODE_LESS: equ 79 
9fba				OPCODE_GT: equ 80 
9fba				OPCODE_EQUAL: equ 81  
9fba			;free to reuse	OPCODE_ENDLOGIC: equ 82 
9fba				OPCODE_NEG: equ 83 
9fba				OPCODE_DIV: equ 84 
9fba				OPCODE_MUL: equ 85 
9fba				OPCODE_MIN: equ 86 
9fba				OPCODE_MAX: equ 87 
9fba				OPCODE_RND16: equ 88 
9fba				OPCODE_RND8: equ 89 
9fba				OPCODE_RND: equ 90 
9fba			;free to reuse	OPCODE_ENDMATHS: equ 91  
9fba				OPCODE_BYNAME: equ 92 
9fba				OPCODE_DIR: equ 93 
9fba				OPCODE_SAVE: equ 94 
9fba				OPCODE_LOAD: equ 95 
9fba				OPCODE_BSAVE: equ 96 
9fba				OPCODE_BLOAD: equ 97 
9fba				OPCODE_SEO: equ 98  
9fba				OPCODE_SEI: equ 99 
9fba				OPCODE_SFREE: equ 100 
9fba				OPCODE_SIZE: equ 101 
9fba				OPCODE_CREATE: equ 102 
9fba				OPCODE_APPEND: equ 103 
9fba				OPCODE_SDEL: equ 104 
9fba				OPCODE_OPEN: equ 105 
9fba				OPCODE_READ: equ 106 
9fba				OPCODE_EOF: equ 106 
9fba				OPCODE_FORMAT: equ 107 
9fba				OPCODE_LABEL: equ 108 
9fba				OPCODE_LABELS: equ 109 
9fba			;free to reuse	OPCODE_ENDSTORAGE: equ 110  
9fba				OPCODE_UPPER: equ 111 
9fba				OPCODE_LOWER: equ 112 
9fba				OPCODE_SUBSTR: equ 113 
9fba				OPCODE_LEFT: equ 114 
9fba				OPCODE_RIGHT: equ 115 
9fba				OPCODE_STR2NUM: equ 116 
9fba				OPCODE_NUM2STR: equ 117 
9fba				OPCODE_CONCAT: equ 118 
9fba				OPCODE_FIND: equ 119 
9fba				OPCODE_LEN: equ 120 
9fba				OPCODE_CHAR: equ 121 
9fba			; free to reuse	OPCODE_STRLEN: equ 122 
9fba			; free to reuse	OPCODE_ENDSTR: equ 123 
9fba				OPCODE_V0S: equ 124 
9fba				OPCODE_V0Q: equ 125 
9fba				OPCODE_V1S: equ 126 
9fba				OPCODE_V1Q: equ 127 
9fba				OPCODE_V2S: equ 128 
9fba				OPCODE_V2Q: equ 129 
9fba				OPCODE_V3S: equ 130 
9fba				OPCODE_V3Q: equ 131 
9fba			;free to reuse	OPCODE_END: equ 132 
9fba				OPCODE_ZDUP: equ 133 
9fba			 
9fba			; eof 
# End of file forth_opcodes.asm
9fba			 
9fba			include "forth_words_core.asm" 
9fba			 
9fba			; | ## Core Words 
9fba			 
9fba			;if MALLOC_4 
9fba			 
9fba			.HEAP: 
9fba			CWHEAD .EXEC OPCODE_HEAP "HEAP" 4 WORD_FLAG_CODE 
9fba 15				db WORD_SYS_CORE+OPCODE_HEAP             
9fbb f9 9f			dw .EXEC            
9fbd 05				db 4 + 1 
9fbe .. 00			db "HEAP",0              
9fc3				endm 
# End of macro CWHEAD
9fc3			; | HEAP ( -- u1 u2 )   Pushes u1 the current number of bytes in the heap and u2 the remaining bytes - Only present if using my MALLOC | DONE 
9fc3			; | | u1 - Current number of bytes in the heap 
9fc3			; | | u2 - Remaining bytes left on the heap 
9fc3			; | |  
9fc3			; | | The heap is used for storing user defined words as well as any values pushed to stack. 
9fc3			 
9fc3			 
9fc3				if DEBUG_FORTH_WORDS_KEY 
9fc3					DMARK "HEP" 
9fc3 f5				push af  
9fc4 3a d8 9f			ld a, (.dmark)  
9fc7 32 65 ee			ld (debug_mark),a  
9fca 3a d9 9f			ld a, (.dmark+1)  
9fcd 32 66 ee			ld (debug_mark+1),a  
9fd0 3a da 9f			ld a, (.dmark+2)  
9fd3 32 67 ee			ld (debug_mark+2),a  
9fd6 18 03			jr .pastdmark  
9fd8 ..			.dmark: db "HEP"  
9fdb f1			.pastdmark: pop af  
9fdc			endm  
# End of macro DMARK
9fdc					CALLMONITOR 
9fdc cd 6f ee			call debug_vector  
9fdf				endm  
# End of macro CALLMONITOR
9fdf				endif 
9fdf 2a fb df			ld hl, (free_list )      
9fe2 11 00 e0			ld de, heap_start 
9fe5			 
9fe5 ed 52			sbc hl, de  
9fe7			 
9fe7 cd 85 9a			call forth_push_numhl 
9fea			 
9fea			 
9fea ed 5b fb df		ld de, (free_list )      
9fee 21 96 e2			ld hl, heap_end 
9ff1			 
9ff1 ed 52			sbc hl, de 
9ff3			 
9ff3 cd 85 9a			call forth_push_numhl 
9ff6				 
9ff6			 
9ff6				 
9ff6			 
9ff6			 
9ff6			 
9ff6				NEXTW 
9ff6 c3 76 9e			jp macro_next 
9ff9				endm 
# End of macro NEXTW
9ff9			;endif 
9ff9			 
9ff9			.EXEC: 
9ff9			;	CWHEAD .STKEXEC OPCODE_EXEC "EXEC" 4 WORD_FLAG_CODE 
9ff9			;; > EXEC ( u -- )    Execs the string on TOS as a FORTH expression > CRASHES ON NEXTW 
9ff9			;; > > u - A qutoed string which can consist of any valid Forth expression excluding : defintions (use LOAD instead) 
9ff9			;; > > 
9ff9			;; > >   
9ff9			;	STACKFRAME OFF $5efe $5f9f 
9ff9			; 
9ff9			;		if DEBUG_FORTH_WORDS_KEY 
9ff9			;			DMARK "EXE" 
9ff9			;			CALLMONITOR 
9ff9			;		endif 
9ff9			; 
9ff9			;	FORTH_DSP_VALUEHL 
9ff9			; 
9ff9			;	FORTH_DSP_POP 
9ff9			; 
9ff9			;		if DEBUG_FORTH_WORDS 
9ff9			;			DMARK "EX1" 
9ff9			;			CALLMONITOR 
9ff9			;		endif 
9ff9			;;	ld e,(hl) 
9ff9			;;	inc hl 
9ff9			;;	ld d,(hl) 
9ff9			;;	ex de,hl 
9ff9			; 
9ff9			;;		if DEBUG_FORTH_WORDS 
9ff9			;;			DMARK "EX2" 
9ff9			;;			CALLMONITOR 
9ff9			;;		endif 
9ff9			;	push hl 
9ff9			; 
9ff9			;	;ld a, 0 
9ff9			;	;ld a, FORTH_END_BUFFER 
9ff9			;	call strlenz 
9ff9			;	inc hl   ; include zero term to copy 
9ff9			;	inc hl   ; include term 
9ff9			;	inc hl   ; include term 
9ff9			;	ld b,0 
9ff9			;	ld c,l 
9ff9			;	pop hl 
9ff9			;	ld de, execscratch 
9ff9			;		if DEBUG_FORTH_WORDS 
9ff9			;			DMARK "EX3" 
9ff9			;			CALLMONITOR 
9ff9			;		endif 
9ff9			;	ldir 
9ff9			; 
9ff9			; 
9ff9			;	ld hl, execscratch 
9ff9			; 
9ff9			;		if DEBUG_FORTH_WORDS 
9ff9			;			DMARK "EXe" 
9ff9			;			CALLMONITOR 
9ff9			;		endif 
9ff9			; 
9ff9			;	call forthparse 
9ff9			;	call forthexec 
9ff9			;;	call forthexec_cleanup 
9ff9			;;	call forthparse 
9ff9			;;	call forthexec 
9ff9			; 
9ff9			;	STACKFRAMECHK OFF $5efe $5f9f 
9ff9			; 
9ff9			;	; an immediate word so no need to process any more words 
9ff9			;	ret 
9ff9			;	NEXTW 
9ff9			 
9ff9			; dead code - old version  
9ff9			;	FORTH_RSP_NEXT 
9ff9			 
9ff9			;  
9ff9			;	ld bc,(cli_ptr)   ; move to next token to parse in the input stream 
9ff9			;	ld de,(cli_origptr)   ; move to next token to parse in the input stream 
9ff9			;	ld hl,(os_tok_ptr)   ; move to next token to parse in the input stream 
9ff9			;	push hl 
9ff9			;	push de 
9ff9			;	push bc 
9ff9			; 
9ff9			; 
9ff9			;		if DEBUG_FORTH_WORDS_KEY 
9ff9			;			DMARK "EXR" 
9ff9			;			CALLMONITOR 
9ff9			;		endif 
9ff9			; 
9ff9			; 
9ff9			; 
9ff9			;	;v5 FORTH_DSP_VALUE 
9ff9			;	FORTH_DSP_VALUEHL 
9ff9			; 
9ff9			;	; TODO do string type checks 
9ff9			; 
9ff9			;;v5	inc hl   ; skip type 
9ff9			; 
9ff9			;	push hl  ; source code  
9ff9			;		if DEBUG_FORTH_WORDS 
9ff9			;			DMARK "EX1" 
9ff9			;			CALLMONITOR 
9ff9			;		endif 
9ff9			;	ld a, 0 
9ff9			;	call strlent 
9ff9			; 
9ff9			;	inc hl 
9ff9			;	inc hl 
9ff9			;	inc hl 
9ff9			;	inc hl 
9ff9			; 
9ff9			;	push hl    ; size 
9ff9			; 
9ff9			;		if DEBUG_FORTH_WORDS 
9ff9			;			DMARK "EX2" 
9ff9			;			CALLMONITOR 
9ff9			;		endif 
9ff9			;	call malloc 
9ff9			; 
9ff9			;	ex de, hl    ; de now contains malloc area 
9ff9			;	pop bc   	; get byte count 
9ff9			;	pop hl      ; get string to copy 
9ff9			; 
9ff9			;	push de     ; save malloc for free later 
9ff9			; 
9ff9			;		if DEBUG_FORTH_WORDS 
9ff9			;			DMARK "EX3" 
9ff9			;			CALLMONITOR 
9ff9			;		endif 
9ff9			;	ldir       ; duplicate string 
9ff9			; 
9ff9			;	; at the end of the string so go back the three extra spaces and fill in with extra terms 
9ff9			;	 
9ff9			;	; TODO fix the parse would be better than this...  
9ff9			;	ex de, hl 
9ff9			;	dec hl 
9ff9			;	ld a, 0 
9ff9			;	ld (hl), a 
9ff9			;	dec hl 
9ff9			;	ld a, ' ' 
9ff9			;	ld (hl), a 
9ff9			;	dec hl 
9ff9			;	ld (hl), a 
9ff9			; 
9ff9			;	dec hl 
9ff9			;	ld (hl), a 
9ff9			; 
9ff9			; 
9ff9			;	FORTH_DSP_POP  
9ff9			; 
9ff9			;	pop hl     
9ff9			;	push hl    ; save malloc area 
9ff9			; 
9ff9			;		if DEBUG_FORTH_WORDS 
9ff9			;			DMARK "EX4" 
9ff9			;			CALLMONITOR 
9ff9			;		endif 
9ff9			; 
9ff9			;	call forthparse 
9ff9			;	call forthexec 
9ff9			;	 
9ff9			;	pop hl 
9ff9			;	if DEBUG_FORTH_WORDS 
9ff9			;		DMARK "EX5" 
9ff9			;		CALLMONITOR 
9ff9			;	endif 
9ff9			; 
9ff9			;	if FORTH_ENABLE_FREE 
9ff9			;	call free 
9ff9			;	endif 
9ff9			; 
9ff9			;	if DEBUG_FORTH_WORDS 
9ff9			;		DMARK "EX6" 
9ff9			;		CALLMONITOR 
9ff9			;	endif 
9ff9			; 
9ff9			;	pop bc 
9ff9			;	pop de 
9ff9			;	pop hl 
9ff9			;;	FORTH_RSP_POP	  
9ff9			;	ld (cli_ptr),bc   ; move to next token to parse in the input stream 
9ff9			;	ld (cli_origptr),de   ; move to next token to parse in the input stream 
9ff9			;	ld (os_tok_ptr),hl   ; move to next token to parse in the input stream 
9ff9			; 
9ff9			;	if DEBUG_FORTH_WORDS 
9ff9			;		DMARK "EX7" 
9ff9			;		CALLMONITOR 
9ff9			;	endif 
9ff9			;	NEXTW 
9ff9			 
9ff9			;.STKEXEC: 
9ff9			;	CWHEAD .ZDUP 43 "STKEXEC" 7 WORD_FLAG_CODE 
9ff9			;; > STKEXEC ( u .. u c -- ) Taking c count of strings off of the stack the strings are evaluated as code > TO TEST 
9ff9			; 
9ff9			; 
9ff9			;		if DEBUG_FORTH_WORDS_KEY 
9ff9			;			DMARK "STX" 
9ff9			;			CALLMONITOR 
9ff9			;		endif 
9ff9			; 
9ff9			;	FORTH_DSP_VALUEHL 
9ff9			; 
9ff9			;	ld (store_tmp1), hl    ; count 
9ff9			; 
9ff9			;	FORTH_DSP_POP 
9ff9			;.stkexec1: 
9ff9			;	ld hl, (store_tmp1)   ; count 
9ff9			;	ld a, 0 
9ff9			;	cp l 
9ff9			;	ret z 
9ff9			; 
9ff9			;	dec hl 
9ff9			;	ld (store_tmp1), hl    ; count 
9ff9			;	 
9ff9			;	FORTH_DSP_VALUEHL 
9ff9			;	push hl 
9ff9			;	 
9ff9			;		if DEBUG_FORTH_WORDS 
9ff9			;			DMARK "EXp" 
9ff9			;			CALLMONITOR 
9ff9			;		endif 
9ff9			;	FORTH_DSP_POP 
9ff9			; 
9ff9			;	call strlenz 
9ff9			;	inc hl   ; include zero term to copy 
9ff9			;	inc hl   ; include zero term to copy 
9ff9			;	inc hl   ; include zero term to copy 
9ff9			;	ld b,0 
9ff9			;	ld c,l 
9ff9			;	pop hl 
9ff9			;	ld de, execscratch 
9ff9			;		if DEBUG_FORTH_WORDS 
9ff9			;			DMARK "EX3" 
9ff9			;			CALLMONITOR 
9ff9			;		endif 
9ff9			;	ldir 
9ff9			; 
9ff9			; 
9ff9			;	ld hl, execscratch 
9ff9			; 
9ff9			;		if DEBUG_FORTH_WORDS 
9ff9			;			DMARK "EXP" 
9ff9			;			CALLMONITOR 
9ff9			;		endif 
9ff9			; 
9ff9			;	call forthparse 
9ff9			;	ld hl, execscratch 
9ff9			;		if DEBUG_FORTH_WORDS 
9ff9			;			DMARK "EXx" 
9ff9			;			CALLMONITOR 
9ff9			;		endif 
9ff9			;	call forthexec 
9ff9			; 
9ff9			;	jp .stkexec1 
9ff9			; 
9ff9			;	ret 
9ff9			 
9ff9			 
9ff9			.DUP: 
9ff9			CWHEAD .ZDUP OPCODE_DUP "DUP" 3 WORD_FLAG_CODE 
9ff9 17				db WORD_SYS_CORE+OPCODE_DUP             
9ffa 6f a0			dw .ZDUP            
9ffc 04				db 3 + 1 
9ffd .. 00			db "DUP",0              
a001				endm 
# End of macro CWHEAD
a001			; | DUP ( u -- u u )     Duplicate whatever item is on TOS | DONE 
a001			 
a001				if DEBUG_FORTH_WORDS_KEY 
a001					DMARK "DUP" 
a001 f5				push af  
a002 3a 16 a0			ld a, (.dmark)  
a005 32 65 ee			ld (debug_mark),a  
a008 3a 17 a0			ld a, (.dmark+1)  
a00b 32 66 ee			ld (debug_mark+1),a  
a00e 3a 18 a0			ld a, (.dmark+2)  
a011 32 67 ee			ld (debug_mark+2),a  
a014 18 03			jr .pastdmark  
a016 ..			.dmark: db "DUP"  
a019 f1			.pastdmark: pop af  
a01a			endm  
# End of macro DMARK
a01a					CALLMONITOR 
a01a cd 6f ee			call debug_vector  
a01d				endm  
# End of macro CALLMONITOR
a01d				endif 
a01d			 
a01d				FORTH_DSP 
a01d cd 50 9c			call macro_forth_dsp 
a020				endm 
# End of macro FORTH_DSP
a020			 
a020 7e				ld a, (HL) 
a021 fe 01			cp DS_TYPE_STR 
a023 20 25			jr nz, .dupinum 
a025			 
a025				; push another string 
a025			 
a025				FORTH_DSP_VALUEHL     		 
a025 cd 8a 9c			call macro_dsp_valuehl 
a028				endm 
# End of macro FORTH_DSP_VALUEHL
a028			 
a028			if DEBUG_FORTH_WORDS 
a028				DMARK "DUs" 
a028 f5				push af  
a029 3a 3d a0			ld a, (.dmark)  
a02c 32 65 ee			ld (debug_mark),a  
a02f 3a 3e a0			ld a, (.dmark+1)  
a032 32 66 ee			ld (debug_mark+1),a  
a035 3a 3f a0			ld a, (.dmark+2)  
a038 32 67 ee			ld (debug_mark+2),a  
a03b 18 03			jr .pastdmark  
a03d ..			.dmark: db "DUs"  
a040 f1			.pastdmark: pop af  
a041			endm  
# End of macro DMARK
a041				CALLMONITOR 
a041 cd 6f ee			call debug_vector  
a044				endm  
# End of macro CALLMONITOR
a044			endif 
a044 cd f3 9a			call forth_push_str 
a047			 
a047				NEXTW 
a047 c3 76 9e			jp macro_next 
a04a				endm 
# End of macro NEXTW
a04a			 
a04a			 
a04a			.dupinum: 
a04a				 
a04a			 
a04a			 
a04a				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a04a cd 8a 9c			call macro_dsp_valuehl 
a04d				endm 
# End of macro FORTH_DSP_VALUEHL
a04d			 
a04d			; TODO add floating point number detection 
a04d			 
a04d			if DEBUG_FORTH_WORDS 
a04d				DMARK "DUi" 
a04d f5				push af  
a04e 3a 62 a0			ld a, (.dmark)  
a051 32 65 ee			ld (debug_mark),a  
a054 3a 63 a0			ld a, (.dmark+1)  
a057 32 66 ee			ld (debug_mark+1),a  
a05a 3a 64 a0			ld a, (.dmark+2)  
a05d 32 67 ee			ld (debug_mark+2),a  
a060 18 03			jr .pastdmark  
a062 ..			.dmark: db "DUi"  
a065 f1			.pastdmark: pop af  
a066			endm  
# End of macro DMARK
a066				CALLMONITOR 
a066 cd 6f ee			call debug_vector  
a069				endm  
# End of macro CALLMONITOR
a069			endif 
a069			 
a069 cd 85 9a			call forth_push_numhl 
a06c				NEXTW 
a06c c3 76 9e			jp macro_next 
a06f				endm 
# End of macro NEXTW
a06f			.ZDUP: 
a06f			CWHEAD .SWAP OPCODE_ZDUP "?DUP" 4 WORD_FLAG_CODE 
a06f 99				db WORD_SYS_CORE+OPCODE_ZDUP             
a070 a7 a0			dw .SWAP            
a072 05				db 4 + 1 
a073 .. 00			db "?DUP",0              
a078				endm 
# End of macro CWHEAD
a078			; | ?DUP ( u -- u u )     Duplicate item on TOS if the item is non-zero (Only works for numerics) | DONE 
a078			 
a078				if DEBUG_FORTH_WORDS_KEY 
a078					DMARK "qDU" 
a078 f5				push af  
a079 3a 8d a0			ld a, (.dmark)  
a07c 32 65 ee			ld (debug_mark),a  
a07f 3a 8e a0			ld a, (.dmark+1)  
a082 32 66 ee			ld (debug_mark+1),a  
a085 3a 8f a0			ld a, (.dmark+2)  
a088 32 67 ee			ld (debug_mark+2),a  
a08b 18 03			jr .pastdmark  
a08d ..			.dmark: db "qDU"  
a090 f1			.pastdmark: pop af  
a091			endm  
# End of macro DMARK
a091					CALLMONITOR 
a091 cd 6f ee			call debug_vector  
a094				endm  
# End of macro CALLMONITOR
a094				endif 
a094				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a094 cd 8a 9c			call macro_dsp_valuehl 
a097				endm 
# End of macro FORTH_DSP_VALUEHL
a097			 
a097 e5				push hl 
a098			 
a098				; is it a zero? 
a098			 
a098 3e 00			ld a, 0 
a09a 84				add h 
a09b 85				add l 
a09c			 
a09c e1				pop hl 
a09d			 
a09d fe 00			cp 0 
a09f 28 03			jr z, .dup2orig 
a0a1			 
a0a1			 
a0a1 cd 85 9a			call forth_push_numhl 
a0a4			 
a0a4			 
a0a4			; TODO add floating point number detection 
a0a4			 
a0a4			.dup2orig: 
a0a4			 
a0a4				NEXTW 
a0a4 c3 76 9e			jp macro_next 
a0a7				endm 
# End of macro NEXTW
a0a7			.SWAP: 
a0a7			CWHEAD .COLN OPCODE_SWAP "SWAP" 4 WORD_FLAG_CODE 
a0a7 18				db WORD_SYS_CORE+OPCODE_SWAP             
a0a8 fb a0			dw .COLN            
a0aa 05				db 4 + 1 
a0ab .. 00			db "SWAP",0              
a0b0				endm 
# End of macro CWHEAD
a0b0			; | SWAP ( w1 w2 -- w2 w1 )    Swap top two items on TOS | DONE 
a0b0				if DEBUG_FORTH_WORDS_KEY 
a0b0					DMARK "SWP" 
a0b0 f5				push af  
a0b1 3a c5 a0			ld a, (.dmark)  
a0b4 32 65 ee			ld (debug_mark),a  
a0b7 3a c6 a0			ld a, (.dmark+1)  
a0ba 32 66 ee			ld (debug_mark+1),a  
a0bd 3a c7 a0			ld a, (.dmark+2)  
a0c0 32 67 ee			ld (debug_mark+2),a  
a0c3 18 03			jr .pastdmark  
a0c5 ..			.dmark: db "SWP"  
a0c8 f1			.pastdmark: pop af  
a0c9			endm  
# End of macro DMARK
a0c9					CALLMONITOR 
a0c9 cd 6f ee			call debug_vector  
a0cc				endm  
# End of macro CALLMONITOR
a0cc				endif 
a0cc			 
a0cc			; DONE Use os stack swap memory 
a0cc			 
a0cc				FORTH_DSP_PTR 0     ; TOS 
a0cc 2a e8 e9			ld hl,(cli_data_sp) 
a0cf 11 00 00			ld de, 0 * 3 
a0d2 ed 52			sbc hl, de 
a0d4				endm 
# End of macro FORTH_DSP_PTR
a0d4 cd c2 9d			call hltostack1 
a0d7			  
a0d7				FORTH_DSP_PTR 1     ; TOS 
a0d7 2a e8 e9			ld hl,(cli_data_sp) 
a0da 11 03 00			ld de, 1 * 3 
a0dd ed 52			sbc hl, de 
a0df				endm 
# End of macro FORTH_DSP_PTR
a0df cd c8 9d			call hltostack2 
a0e2			 
a0e2				FORTH_DSP_PTR 0     ; TOS 
a0e2 2a e8 e9			ld hl,(cli_data_sp) 
a0e5 11 00 00			ld de, 0 * 3 
a0e8 ed 52			sbc hl, de 
a0ea				endm 
# End of macro FORTH_DSP_PTR
a0ea cd e0 9d			call hlfromstack2 
a0ed			 
a0ed				FORTH_DSP_PTR 1     ; TOS 
a0ed 2a e8 e9			ld hl,(cli_data_sp) 
a0f0 11 03 00			ld de, 1 * 3 
a0f3 ed 52			sbc hl, de 
a0f5				endm 
# End of macro FORTH_DSP_PTR
a0f5 cd da 9d			call hlfromstack1 
a0f8			;	FORTH_DSP_VALUEHL 
a0f8			;	push hl     ; w2 
a0f8			; 
a0f8			;	FORTH_DSP_POP 
a0f8			; 
a0f8			;	FORTH_DSP_VALUEHL 
a0f8			; 
a0f8			;	FORTH_DSP_POP 
a0f8			; 
a0f8			;	pop de     ; w2	, hl = w1 
a0f8			; 
a0f8			;	ex de, hl 
a0f8			;	push de 
a0f8			; 
a0f8			;	call forth_push_numhl 
a0f8			; 
a0f8			;	pop hl 
a0f8			; 
a0f8			;	call forth_push_numhl 
a0f8				 
a0f8			 
a0f8				NEXTW 
a0f8 c3 76 9e			jp macro_next 
a0fb				endm 
# End of macro NEXTW
a0fb			.COLN: 
a0fb			CWHEAD .SCOLN OPCODE_COLN ":" 1 WORD_FLAG_CODE 
a0fb 19				db WORD_SYS_CORE+OPCODE_COLN             
a0fc 87 a2			dw .SCOLN            
a0fe 02				db 1 + 1 
a0ff .. 00			db ":",0              
a101				endm 
# End of macro CWHEAD
a101			; | : ( -- )         Create new word | DONE 
a101			 
a101				if DEBUG_FORTH_WORDS_KEY 
a101					DMARK "CLN" 
a101 f5				push af  
a102 3a 16 a1			ld a, (.dmark)  
a105 32 65 ee			ld (debug_mark),a  
a108 3a 17 a1			ld a, (.dmark+1)  
a10b 32 66 ee			ld (debug_mark+1),a  
a10e 3a 18 a1			ld a, (.dmark+2)  
a111 32 67 ee			ld (debug_mark+2),a  
a114 18 03			jr .pastdmark  
a116 ..			.dmark: db "CLN"  
a119 f1			.pastdmark: pop af  
a11a			endm  
# End of macro DMARK
a11a					CALLMONITOR 
a11a cd 6f ee			call debug_vector  
a11d				endm  
# End of macro CALLMONITOR
a11d				endif 
a11d			STACKFRAME OFF $8efe $989f 
a11d				if DEBUG_STACK_IMB 
a11d					if OFF 
a11d						exx 
a11d						ld de, $8efe 
a11d						ld a, d 
a11d						ld hl, curframe 
a11d						call hexout 
a11d						ld a, e 
a11d						ld hl, curframe+2 
a11d						call hexout 
a11d						ld hl, $8efe 
a11d						push hl 
a11d						ld hl, $989f 
a11d						push hl 
a11d						exx 
a11d					endif 
a11d				endif 
a11d			endm 
# End of macro STACKFRAME
a11d			; get parser buffer length  of new word 
a11d			 
a11d			 
a11d			 
a11d				; move tok past this to start of name defintition 
a11d				; TODO get word to define 
a11d				; TODO Move past word token 
a11d				; TODO get length of string up to the ';' 
a11d			 
a11d 2a bc e5		ld hl, (os_tok_ptr) 
a120 23			inc hl 
a121 23			inc hl 
a122			 
a122 3e 3b		ld a, ';' 
a124 cd 5b 90		call strlent 
a127			 
a127 7d			ld a,l 
a128 32 ab e2		ld (os_new_parse_len), a 
a12b			 
a12b			 
a12b			if DEBUG_FORTH_UWORD 
a12b ed 5b bc e5	ld de, (os_tok_ptr) 
a12f					DMARK ":01" 
a12f f5				push af  
a130 3a 44 a1			ld a, (.dmark)  
a133 32 65 ee			ld (debug_mark),a  
a136 3a 45 a1			ld a, (.dmark+1)  
a139 32 66 ee			ld (debug_mark+1),a  
a13c 3a 46 a1			ld a, (.dmark+2)  
a13f 32 67 ee			ld (debug_mark+2),a  
a142 18 03			jr .pastdmark  
a144 ..			.dmark: db ":01"  
a147 f1			.pastdmark: pop af  
a148			endm  
# End of macro DMARK
a148			CALLMONITOR 
a148 cd 6f ee			call debug_vector  
a14b				endm  
# End of macro CALLMONITOR
a14b			endif 
a14b			 
a14b			; 
a14b			;  new word memory layout: 
a14b			;  
a14b			;    : adg 6666 ;  
a14b			; 
a14b			;    db   1     ; user defined word  
a14b 23			inc hl    
a14c			;    dw   sysdict 
a14c 23			inc hl 
a14d 23			inc hl 
a14e			;    db <word len>+1 (for null) 
a14e 23			inc hl 
a14f			;    db .... <word> 
a14f			; 
a14f			 
a14f 23			inc hl    ; some extras for the word preamble before the above 
a150 23			inc hl 
a151 23			inc hl 
a152 23			inc hl 
a153 23			inc hl 
a154 23			inc hl 
a155 23			inc hl  
a156 23			inc hl 
a157 23			inc hl 
a158 23			inc hl 
a159 23			inc hl 
a15a 23			inc hl 
a15b 23			inc hl 
a15c 23			inc hl     ; TODO how many do we really need?     maybe only 6 
a15d			;       exec word buffer 
a15d			;	<ptr word>   
a15d 23			inc hl 
a15e 23			inc hl 
a15f			;       <word list><null term> 7F final term 
a15f			 
a15f			 
a15f			if DEBUG_FORTH_UWORD 
a15f					DMARK ":02" 
a15f f5				push af  
a160 3a 74 a1			ld a, (.dmark)  
a163 32 65 ee			ld (debug_mark),a  
a166 3a 75 a1			ld a, (.dmark+1)  
a169 32 66 ee			ld (debug_mark+1),a  
a16c 3a 76 a1			ld a, (.dmark+2)  
a16f 32 67 ee			ld (debug_mark+2),a  
a172 18 03			jr .pastdmark  
a174 ..			.dmark: db ":02"  
a177 f1			.pastdmark: pop af  
a178			endm  
# End of macro DMARK
a178			CALLMONITOR 
a178 cd 6f ee			call debug_vector  
a17b				endm  
# End of macro CALLMONITOR
a17b			endif 
a17b			 
a17b			 
a17b				; malloc the size 
a17b			 
a17b cd c5 90			call malloc 
a17e 22 ad e2			ld (os_new_malloc), hl     ; save malloc start 
a181			 
a181			;    db   1     ; user defined word  
a181 3e 01			ld a, WORD_SYS_UWORD  
a183 77				ld (hl), a 
a184			 
a184 23			inc hl    
a185			;    dw   sysdict 
a185 11 ba 9f		ld de, sysdict       ; continue on with the scan to the system dict 
a188 73			ld (hl), e 
a189 23			inc hl 
a18a 72			ld (hl), d 
a18b 23			inc hl 
a18c			 
a18c			 
a18c			;    Setup dict word 
a18c			 
a18c 23			inc hl 
a18d 22 a7 e2		ld (os_new_work_ptr), hl     ; save start of dict word  
a190			 
a190			; 1. get length of dict word 
a190			 
a190			 
a190 2a bc e5		ld hl, (os_tok_ptr) 
a193 23			inc hl 
a194 23			inc hl    ; position to start of dict word 
a195 3e 00		ld a, 0 
a197 cd 5b 90		call strlent 
a19a			 
a19a			 
a19a 23			inc hl    ; to include null??? 
a19b			 
a19b			; write length of dict word 
a19b			 
a19b ed 5b a7 e2	ld de, (os_new_work_ptr)   ; get dest for copy of word 
a19f 1b			dec de 
a1a0 eb			ex de, hl 
a1a1 73			ld (hl), e 
a1a2 eb			ex de, hl 
a1a3			 
a1a3			 
a1a3			 
a1a3			; copy  
a1a3 4d			ld c, l 
a1a4 06 00		ld b, 0 
a1a6 ed 5b a7 e2	ld de, (os_new_work_ptr)   ; get dest for copy of word 
a1aa 2a bc e5		ld hl, (os_tok_ptr) 
a1ad 23			inc hl 
a1ae 23			inc hl    ; position to start of dict word 
a1af			 
a1af			;	ldir       ; copy word - HL now is where we need to be for copy of the line 
a1af			 
a1af			; TODO need to convert word to upper case 
a1af			 
a1af			ucasetok:	 
a1af 7e			ld a,(hl) 
a1b0 cd 47 90		call toUpper 
a1b3 77			ld (hl),a 
a1b4 ed a0		ldi 
a1b6 f2 af a1		jp p, ucasetok 
a1b9			 
a1b9			 
a1b9			 
a1b9			; de now points to start of where the word body code should be placed 
a1b9 ed 53 a7 e2	ld (os_new_work_ptr), de 
a1bd			; hl now points to the words to throw at forthexec which needs to be copied 
a1bd 22 a5 e2		ld (os_new_src_ptr), hl 
a1c0			 
a1c0			; TODO add 'call to forthexec' 
a1c0			 
a1c0			if DEBUG_FORTH_UWORD 
a1c0 c5			push bc 
a1c1 ed 4b ad e2	ld bc, (os_new_malloc) 
a1c5					DMARK ":0x" 
a1c5 f5				push af  
a1c6 3a da a1			ld a, (.dmark)  
a1c9 32 65 ee			ld (debug_mark),a  
a1cc 3a db a1			ld a, (.dmark+1)  
a1cf 32 66 ee			ld (debug_mark+1),a  
a1d2 3a dc a1			ld a, (.dmark+2)  
a1d5 32 67 ee			ld (debug_mark+2),a  
a1d8 18 03			jr .pastdmark  
a1da ..			.dmark: db ":0x"  
a1dd f1			.pastdmark: pop af  
a1de			endm  
# End of macro DMARK
a1de			CALLMONITOR 
a1de cd 6f ee			call debug_vector  
a1e1				endm  
# End of macro CALLMONITOR
a1e1 c1			pop bc 
a1e2			endif 
a1e2			 
a1e2			 
a1e2			; create word preamble which should be: 
a1e2			 
a1e2			; TODO possibly push the current os_tok_ptr to rsp and the current rsp will be the start of the string and not current pc???? 
a1e2			 
a1e2			;    ld hl, <word code> 
a1e2			;    jp user_exec 
a1e2			;    <word code bytes> 
a1e2			 
a1e2			 
a1e2			;	inc de     ; TODO ??? or are we already past the word's null 
a1e2 eb			ex de, hl 
a1e3			 
a1e3 36 21		ld (hl), 021h     ; TODO get bytes poke "ld hl, " 
a1e5			 
a1e5 23			inc hl 
a1e6 22 a1 e2		ld (os_new_exec_ptr),hl     ; save this location to poke with the address of the word buffer 
a1e9 23			inc hl 
a1ea			 
a1ea 23			inc hl 
a1eb 36 c3		ld (hl), 0c3h     ; TODO get bytes poke "jp xx  " 
a1ed			 
a1ed 01 cd cd		ld bc, user_exec 
a1f0 23			inc hl 
a1f1 71			ld (hl), c     ; poke address of user_exec 
a1f2 23			inc hl 
a1f3 70			ld (hl), b     
a1f4			; 
a1f4			;	inc hl 
a1f4			;	ld (hl), 0cdh     ; TODO get bytes poke "call  " 
a1f4			; 
a1f4			; 
a1f4			;	ld bc, macro_forth_rsp_next 
a1f4			;	inc hl 
a1f4			;	ld (hl), c     ; poke address of FORTH_RSP_NEXT 
a1f4			;	inc hl 
a1f4			;	ld (hl), b     
a1f4			; 
a1f4			;	inc hl 
a1f4			;	ld (hl), 0cdh     ; TODO get bytes poke "call  " 
a1f4			; 
a1f4			; 
a1f4			;	inc hl 
a1f4			;	ld bc, forthexec 
a1f4			;	ld (hl), c     ; poke address of forthexec 
a1f4			;	inc hl 
a1f4			;	ld (hl), b      
a1f4			; 
a1f4			;	inc hl 
a1f4			;	ld (hl), 0c3h     ; TODO get bytes poke "jp  " 
a1f4			; 
a1f4			;	ld bc, user_dict_next 
a1f4			;	inc hl 
a1f4			;	ld (hl), c     ; poke address of forthexec 
a1f4			;	inc hl 
a1f4			;	ld (hl), b      
a1f4			 
a1f4			; hl is now where we need to copy the word byte data to save this 
a1f4			 
a1f4 23			inc hl 
a1f5 22 a3 e2		ld (os_new_exec), hl 
a1f8			 
a1f8			; copy definition 
a1f8			 
a1f8 eb			ex de, hl 
a1f9			;	inc de    ; TODO BUG It appears the exec of a uword requires pc to be set 
a1f9			;	inc de    ; skip the PC for this parse 
a1f9 3a ab e2		ld a, (os_new_parse_len) 
a1fc 4f			ld c, a 
a1fd 06 00		ld b, 0 
a1ff ed b0		ldir		 ; copy defintion 
a201			 
a201			 
a201			; poke the address of where the new word bytes live for forthexec 
a201			 
a201 2a a1 e2		ld hl, (os_new_exec_ptr)     ; TODO this isnt correct 
a204			 
a204 ed 5b a3 e2	ld de, (os_new_exec)      
a208			 
a208 73			ld (hl), e 
a209 23			inc hl 
a20a 72			ld (hl), d 
a20b			 
a20b				; TODO copy last user dict word next link to this word 
a20b				; TODO update last user dict word to point to this word 
a20b			; 
a20b			; hl f923 de 812a ; bc 811a 
a20b			 
a20b			if DEBUG_FORTH_UWORD 
a20b c5			push bc 
a20c ed 4b ad e2	ld bc, (os_new_malloc) 
a210					DMARK ":0A" 
a210 f5				push af  
a211 3a 25 a2			ld a, (.dmark)  
a214 32 65 ee			ld (debug_mark),a  
a217 3a 26 a2			ld a, (.dmark+1)  
a21a 32 66 ee			ld (debug_mark+1),a  
a21d 3a 27 a2			ld a, (.dmark+2)  
a220 32 67 ee			ld (debug_mark+2),a  
a223 18 03			jr .pastdmark  
a225 ..			.dmark: db ":0A"  
a228 f1			.pastdmark: pop af  
a229			endm  
# End of macro DMARK
a229			CALLMONITOR 
a229 cd 6f ee			call debug_vector  
a22c				endm  
# End of macro CALLMONITOR
a22c c1			pop bc 
a22d			endif 
a22d			if DEBUG_FORTH_UWORD 
a22d c5			push bc 
a22e ed 4b ad e2	ld bc, (os_new_malloc) 
a232 03			inc bc 
a233 03			inc bc 
a234 03			inc bc 
a235 03			inc bc 
a236 03			inc bc 
a237 03			inc bc 
a238 03			inc bc 
a239 03			inc bc 
a23a			 
a23a					DMARK ":0B" 
a23a f5				push af  
a23b 3a 4f a2			ld a, (.dmark)  
a23e 32 65 ee			ld (debug_mark),a  
a241 3a 50 a2			ld a, (.dmark+1)  
a244 32 66 ee			ld (debug_mark+1),a  
a247 3a 51 a2			ld a, (.dmark+2)  
a24a 32 67 ee			ld (debug_mark+2),a  
a24d 18 03			jr .pastdmark  
a24f ..			.dmark: db ":0B"  
a252 f1			.pastdmark: pop af  
a253			endm  
# End of macro DMARK
a253			CALLMONITOR 
a253 cd 6f ee			call debug_vector  
a256				endm  
# End of macro CALLMONITOR
a256 c1			pop bc 
a257			endif 
a257			 
a257			; update word dict linked list for new word 
a257			 
a257			 
a257 2a b8 e5		ld hl, (os_last_new_uword)		; get the start of the last added uword 
a25a 23			inc hl     ; move to next work linked list ptr 
a25b			 
a25b ed 5b ad e2	ld de, (os_new_malloc)		 ; new next word 
a25f 73			ld (hl), e 
a260 23			inc hl 
a261 72			ld (hl), d 
a262			 
a262			if DEBUG_FORTH_UWORD 
a262 ed 4b b8 e5	ld bc, (os_last_new_uword)		; get the last word so we can check it worked in debug 
a266			endif 
a266			 
a266 ed 53 b8 e5	ld (os_last_new_uword), de      ; update last new uword ptr 
a26a			 
a26a			 
a26a			if DEBUG_FORTH_UWORD 
a26a					DMARK ":0+" 
a26a f5				push af  
a26b 3a 7f a2			ld a, (.dmark)  
a26e 32 65 ee			ld (debug_mark),a  
a271 3a 80 a2			ld a, (.dmark+1)  
a274 32 66 ee			ld (debug_mark+1),a  
a277 3a 81 a2			ld a, (.dmark+2)  
a27a 32 67 ee			ld (debug_mark+2),a  
a27d 18 03			jr .pastdmark  
a27f ..			.dmark: db ":0+"  
a282 f1			.pastdmark: pop af  
a283			endm  
# End of macro DMARK
a283			CALLMONITOR 
a283 cd 6f ee			call debug_vector  
a286				endm  
# End of macro CALLMONITOR
a286			endif 
a286			 
a286			STACKFRAMECHK OFF $8efe $989f 
a286				if DEBUG_STACK_IMB 
a286					if OFF 
a286						exx 
a286						ld hl, $989f 
a286						pop de   ; $989f 
a286						call cmp16 
a286						jr nz, .spnosame 
a286						ld hl, $8efe 
a286						pop de   ; $8efe 
a286						call cmp16 
a286						jr z, .spfrsame 
a286						.spnosame: call showsperror 
a286						.spfrsame: nop 
a286						exx 
a286					endif 
a286				endif 
a286			endm 
# End of macro STACKFRAMECHK
a286			 
a286 c9			ret    ; dont process any remaining parser tokens as they form new word 
a287			 
a287			 
a287			 
a287			 
a287			;		NEXT 
a287			.SCOLN: 
a287			;	CWHEAD .DROP 17 '\;' 1 WORD_FLAG_CODE 
a287 06			db OPCODE_SCOLN 
a288 d3 a2		dw .DROP 
a28a 02			db 2 
a28b .. 00		db ";",0           
a28d			; | ; ( -- )     Terminate new word and return exec to previous exec level | DONE 
a28d				if DEBUG_FORTH_WORDS_KEY 
a28d					DMARK "SCN" 
a28d f5				push af  
a28e 3a a2 a2			ld a, (.dmark)  
a291 32 65 ee			ld (debug_mark),a  
a294 3a a3 a2			ld a, (.dmark+1)  
a297 32 66 ee			ld (debug_mark+1),a  
a29a 3a a4 a2			ld a, (.dmark+2)  
a29d 32 67 ee			ld (debug_mark+2),a  
a2a0 18 03			jr .pastdmark  
a2a2 ..			.dmark: db "SCN"  
a2a5 f1			.pastdmark: pop af  
a2a6			endm  
# End of macro DMARK
a2a6					CALLMONITOR 
a2a6 cd 6f ee			call debug_vector  
a2a9				endm  
# End of macro CALLMONITOR
a2a9				endif 
a2a9				FORTH_RSP_TOS 
a2a9 cd 43 9a			call macro_forth_rsp_tos 
a2ac				endm 
# End of macro FORTH_RSP_TOS
a2ac e5				push hl 
a2ad				FORTH_RSP_POP 
a2ad cd 4d 9a			call macro_forth_rsp_pop 
a2b0				endm 
# End of macro FORTH_RSP_POP
a2b0 e1				pop hl 
a2b1			;		ex de,hl 
a2b1 22 bc e5			ld (os_tok_ptr),hl 
a2b4			 
a2b4			if DEBUG_FORTH_UWORD 
a2b4					DMARK "SCL" 
a2b4 f5				push af  
a2b5 3a c9 a2			ld a, (.dmark)  
a2b8 32 65 ee			ld (debug_mark),a  
a2bb 3a ca a2			ld a, (.dmark+1)  
a2be 32 66 ee			ld (debug_mark+1),a  
a2c1 3a cb a2			ld a, (.dmark+2)  
a2c4 32 67 ee			ld (debug_mark+2),a  
a2c7 18 03			jr .pastdmark  
a2c9 ..			.dmark: db "SCL"  
a2cc f1			.pastdmark: pop af  
a2cd			endm  
# End of macro DMARK
a2cd			CALLMONITOR 
a2cd cd 6f ee			call debug_vector  
a2d0				endm  
# End of macro CALLMONITOR
a2d0			endif 
a2d0				NEXTW 
a2d0 c3 76 9e			jp macro_next 
a2d3				endm 
# End of macro NEXTW
a2d3			 
a2d3			.DROP: 
a2d3			CWHEAD .DUP2 OPCODE_DROP "DROP" 4 WORD_FLAG_CODE 
a2d3 1b				db WORD_SYS_CORE+OPCODE_DROP             
a2d4 fe a2			dw .DUP2            
a2d6 05				db 4 + 1 
a2d7 .. 00			db "DROP",0              
a2dc				endm 
# End of macro CWHEAD
a2dc			; | DROP ( w -- )   drop the TOS item   | DONE 
a2dc				if DEBUG_FORTH_WORDS_KEY 
a2dc					DMARK "DRP" 
a2dc f5				push af  
a2dd 3a f1 a2			ld a, (.dmark)  
a2e0 32 65 ee			ld (debug_mark),a  
a2e3 3a f2 a2			ld a, (.dmark+1)  
a2e6 32 66 ee			ld (debug_mark+1),a  
a2e9 3a f3 a2			ld a, (.dmark+2)  
a2ec 32 67 ee			ld (debug_mark+2),a  
a2ef 18 03			jr .pastdmark  
a2f1 ..			.dmark: db "DRP"  
a2f4 f1			.pastdmark: pop af  
a2f5			endm  
# End of macro DMARK
a2f5					CALLMONITOR 
a2f5 cd 6f ee			call debug_vector  
a2f8				endm  
# End of macro CALLMONITOR
a2f8				endif 
a2f8				FORTH_DSP_POP 
a2f8 cd 42 9d			call macro_forth_dsp_pop 
a2fb				endm 
# End of macro FORTH_DSP_POP
a2fb				NEXTW 
a2fb c3 76 9e			jp macro_next 
a2fe				endm 
# End of macro NEXTW
a2fe			.DUP2: 
a2fe			CWHEAD .DROP2 OPCODE_DUP2 "2DUP" 4 WORD_FLAG_CODE 
a2fe 1c				db WORD_SYS_CORE+OPCODE_DUP2             
a2ff 43 a3			dw .DROP2            
a301 05				db 4 + 1 
a302 .. 00			db "2DUP",0              
a307				endm 
# End of macro CWHEAD
a307			; | 2DUP ( w1 w2 -- w1 w2 w1 w2 ) Duplicate the top two items on TOS  (Only works for numerics) | DONE 
a307				if DEBUG_FORTH_WORDS_KEY 
a307					DMARK "2DU" 
a307 f5				push af  
a308 3a 1c a3			ld a, (.dmark)  
a30b 32 65 ee			ld (debug_mark),a  
a30e 3a 1d a3			ld a, (.dmark+1)  
a311 32 66 ee			ld (debug_mark+1),a  
a314 3a 1e a3			ld a, (.dmark+2)  
a317 32 67 ee			ld (debug_mark+2),a  
a31a 18 03			jr .pastdmark  
a31c ..			.dmark: db "2DU"  
a31f f1			.pastdmark: pop af  
a320			endm  
# End of macro DMARK
a320					CALLMONITOR 
a320 cd 6f ee			call debug_vector  
a323				endm  
# End of macro CALLMONITOR
a323				endif 
a323				FORTH_DSP_VALUEHL 
a323 cd 8a 9c			call macro_dsp_valuehl 
a326				endm 
# End of macro FORTH_DSP_VALUEHL
a326 e5				push hl      ; 2 
a327			 
a327				FORTH_DSP_POP 
a327 cd 42 9d			call macro_forth_dsp_pop 
a32a				endm 
# End of macro FORTH_DSP_POP
a32a				 
a32a				FORTH_DSP_VALUEHL 
a32a cd 8a 9c			call macro_dsp_valuehl 
a32d				endm 
# End of macro FORTH_DSP_VALUEHL
a32d			;		push hl      ; 1 
a32d			 
a32d				FORTH_DSP_POP 
a32d cd 42 9d			call macro_forth_dsp_pop 
a330				endm 
# End of macro FORTH_DSP_POP
a330			 
a330			;		pop hl       ; 1 
a330 d1				pop de       ; 2 
a331			 
a331 cd 85 9a			call forth_push_numhl 
a334 eb				ex de, hl 
a335 cd 85 9a			call forth_push_numhl 
a338			 
a338				 
a338 eb				ex de, hl 
a339			 
a339 cd 85 9a			call forth_push_numhl 
a33c eb				ex de, hl 
a33d cd 85 9a			call forth_push_numhl 
a340			 
a340			 
a340				NEXTW 
a340 c3 76 9e			jp macro_next 
a343				endm 
# End of macro NEXTW
a343			.DROP2: 
a343			CWHEAD .PICK OPCODE_DROP2 "2DROP" 5 WORD_FLAG_CODE 
a343 1d				db WORD_SYS_CORE+OPCODE_DROP2             
a344 72 a3			dw .PICK            
a346 06				db 5 + 1 
a347 .. 00			db "2DROP",0              
a34d				endm 
# End of macro CWHEAD
a34d			; | 2DROP ( w w -- )    Double drop | DONE 
a34d				if DEBUG_FORTH_WORDS_KEY 
a34d					DMARK "2DR" 
a34d f5				push af  
a34e 3a 62 a3			ld a, (.dmark)  
a351 32 65 ee			ld (debug_mark),a  
a354 3a 63 a3			ld a, (.dmark+1)  
a357 32 66 ee			ld (debug_mark+1),a  
a35a 3a 64 a3			ld a, (.dmark+2)  
a35d 32 67 ee			ld (debug_mark+2),a  
a360 18 03			jr .pastdmark  
a362 ..			.dmark: db "2DR"  
a365 f1			.pastdmark: pop af  
a366			endm  
# End of macro DMARK
a366					CALLMONITOR 
a366 cd 6f ee			call debug_vector  
a369				endm  
# End of macro CALLMONITOR
a369				endif 
a369				FORTH_DSP_POP 
a369 cd 42 9d			call macro_forth_dsp_pop 
a36c				endm 
# End of macro FORTH_DSP_POP
a36c				FORTH_DSP_POP 
a36c cd 42 9d			call macro_forth_dsp_pop 
a36f				endm 
# End of macro FORTH_DSP_POP
a36f				NEXTW 
a36f c3 76 9e			jp macro_next 
a372				endm 
# End of macro NEXTW
a372			.PICK: 
a372			CWHEAD .SWAP2 99 "PICK" 4 WORD_FLAG_CODE 
a372 77				db WORD_SYS_CORE+99             
a373 b1 a3			dw .SWAP2            
a375 05				db 4 + 1 
a376 .. 00			db "PICK",0              
a37b				endm 
# End of macro CWHEAD
a37b			; | PICK ( ux ... u x -- ux ... u n )    Replace x on stack with the item from position x on stack  | TODO 
a37b				if DEBUG_FORTH_WORDS_KEY 
a37b					DMARK "PIK" 
a37b f5				push af  
a37c 3a 90 a3			ld a, (.dmark)  
a37f 32 65 ee			ld (debug_mark),a  
a382 3a 91 a3			ld a, (.dmark+1)  
a385 32 66 ee			ld (debug_mark+1),a  
a388 3a 92 a3			ld a, (.dmark+2)  
a38b 32 67 ee			ld (debug_mark+2),a  
a38e 18 03			jr .pastdmark  
a390 ..			.dmark: db "PIK"  
a393 f1			.pastdmark: pop af  
a394			endm  
# End of macro DMARK
a394					CALLMONITOR 
a394 cd 6f ee			call debug_vector  
a397				endm  
# End of macro CALLMONITOR
a397				endif 
a397			 
a397				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a397 cd 8a 9c			call macro_dsp_valuehl 
a39a				endm 
# End of macro FORTH_DSP_VALUEHL
a39a				 
a39a				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a39a cd 42 9d			call macro_forth_dsp_pop 
a39d				endm 
# End of macro FORTH_DSP_POP
a39d			 
a39d				; init from TOS 
a39d 45				ld b, l 
a39e 21 e8 e9			ld hl, cli_data_sp 
a3a1			.pkl: 
a3a1 2b				dec hl 
a3a2 2b				dec hl 
a3a3 2b				dec hl 
a3a4			 
a3a4 10 fb			djnz .pkl 
a3a6			 
a3a6				 
a3a6				; TODO do type check with correct push 
a3a6			 
a3a6 23				inc hl 
a3a7				;call loadwordinhl 
a3a7 5e				ld e, (hl) 
a3a8 23				inc hl 
a3a9 56				ld d, (hl) 
a3aa eb				ex de,hl 
a3ab cd 85 9a			call forth_push_numhl 
a3ae			 
a3ae				NEXTW 
a3ae c3 76 9e			jp macro_next 
a3b1				endm 
# End of macro NEXTW
a3b1			.SWAP2: 
a3b1			CWHEAD .AT OPCODE_SWAP2 "2SWAP" 5 WORD_FLAG_CODE 
a3b1 1e				db WORD_SYS_CORE+OPCODE_SWAP2             
a3b2 32 a4			dw .AT            
a3b4 06				db 5 + 1 
a3b5 .. 00			db "2SWAP",0              
a3bb				endm 
# End of macro CWHEAD
a3bb			; | 2SWAP ( w1 w2 w3 w4 -- w3 w4 w1 w2 ) Swap top pair of items | TODO 
a3bb				if DEBUG_FORTH_WORDS_KEY 
a3bb					DMARK "2SW" 
a3bb f5				push af  
a3bc 3a d0 a3			ld a, (.dmark)  
a3bf 32 65 ee			ld (debug_mark),a  
a3c2 3a d1 a3			ld a, (.dmark+1)  
a3c5 32 66 ee			ld (debug_mark+1),a  
a3c8 3a d2 a3			ld a, (.dmark+2)  
a3cb 32 67 ee			ld (debug_mark+2),a  
a3ce 18 03			jr .pastdmark  
a3d0 ..			.dmark: db "2SW"  
a3d3 f1			.pastdmark: pop af  
a3d4			endm  
# End of macro DMARK
a3d4					CALLMONITOR 
a3d4 cd 6f ee			call debug_vector  
a3d7				endm  
# End of macro CALLMONITOR
a3d7				endif 
a3d7			; TODO Use os stack swap memory 
a3d7			 
a3d7				FORTH_DSP_PTR 0     ; TOS    w4 
a3d7 2a e8 e9			ld hl,(cli_data_sp) 
a3da 11 00 00			ld de, 0 * 3 
a3dd ed 52			sbc hl, de 
a3df				endm 
# End of macro FORTH_DSP_PTR
a3df cd c2 9d			call hltostack1 
a3e2			  
a3e2				FORTH_DSP_PTR 1     ; TOS    w3 
a3e2 2a e8 e9			ld hl,(cli_data_sp) 
a3e5 11 03 00			ld de, 1 * 3 
a3e8 ed 52			sbc hl, de 
a3ea				endm 
# End of macro FORTH_DSP_PTR
a3ea cd c8 9d			call hltostack2 
a3ed			 
a3ed			 
a3ed			 
a3ed				FORTH_DSP_PTR 2     ; TOS    w2 
a3ed 2a e8 e9			ld hl,(cli_data_sp) 
a3f0 11 06 00			ld de, 2 * 3 
a3f3 ed 52			sbc hl, de 
a3f5				endm 
# End of macro FORTH_DSP_PTR
a3f5 cd ce 9d			call hltostack3 
a3f8			 
a3f8				FORTH_DSP_PTR 3     ; TOS   w1 
a3f8 2a e8 e9			ld hl,(cli_data_sp) 
a3fb 11 09 00			ld de, 3 * 3 
a3fe ed 52			sbc hl, de 
a400				endm 
# End of macro FORTH_DSP_PTR
a400 cd d4 9d			call hltostack4 
a403			 
a403			 
a403			 
a403			 
a403				FORTH_DSP_PTR 0     ; TOS 
a403 2a e8 e9			ld hl,(cli_data_sp) 
a406 11 00 00			ld de, 0 * 3 
a409 ed 52			sbc hl, de 
a40b				endm 
# End of macro FORTH_DSP_PTR
a40b cd e6 9d			call hlfromstack3 
a40e			 
a40e				FORTH_DSP_PTR 1     ; TOS 
a40e 2a e8 e9			ld hl,(cli_data_sp) 
a411 11 03 00			ld de, 1 * 3 
a414 ed 52			sbc hl, de 
a416				endm 
# End of macro FORTH_DSP_PTR
a416 cd ec 9d			call hlfromstack4 
a419			 
a419			 
a419			 
a419				FORTH_DSP_PTR 2     ; TOS 
a419 2a e8 e9			ld hl,(cli_data_sp) 
a41c 11 06 00			ld de, 2 * 3 
a41f ed 52			sbc hl, de 
a421				endm 
# End of macro FORTH_DSP_PTR
a421 cd da 9d			call hlfromstack1 
a424			 
a424				FORTH_DSP_PTR 3     ; TOS 
a424 2a e8 e9			ld hl,(cli_data_sp) 
a427 11 09 00			ld de, 3 * 3 
a42a ed 52			sbc hl, de 
a42c				endm 
# End of macro FORTH_DSP_PTR
a42c cd e0 9d			call hlfromstack2 
a42f			 
a42f				NEXTW 
a42f c3 76 9e			jp macro_next 
a432				endm 
# End of macro NEXTW
a432			.AT: 
a432			CWHEAD .CAT OPCODE_AT "@" 1 WORD_FLAG_CODE 
a432 1f				db WORD_SYS_CORE+OPCODE_AT             
a433 64 a4			dw .CAT            
a435 02				db 1 + 1 
a436 .. 00			db "@",0              
a438				endm 
# End of macro CWHEAD
a438			; | @ ( w -- ) Push onto TOS byte stored at address   | DONE 
a438			 
a438				if DEBUG_FORTH_WORDS_KEY 
a438					DMARK "AT." 
a438 f5				push af  
a439 3a 4d a4			ld a, (.dmark)  
a43c 32 65 ee			ld (debug_mark),a  
a43f 3a 4e a4			ld a, (.dmark+1)  
a442 32 66 ee			ld (debug_mark+1),a  
a445 3a 4f a4			ld a, (.dmark+2)  
a448 32 67 ee			ld (debug_mark+2),a  
a44b 18 03			jr .pastdmark  
a44d ..			.dmark: db "AT."  
a450 f1			.pastdmark: pop af  
a451			endm  
# End of macro DMARK
a451					CALLMONITOR 
a451 cd 6f ee			call debug_vector  
a454				endm  
# End of macro CALLMONITOR
a454				endif 
a454			.getbyteat:	 
a454				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a454 cd 8a 9c			call macro_dsp_valuehl 
a457				endm 
# End of macro FORTH_DSP_VALUEHL
a457				 
a457			;		push hl 
a457			 
a457				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a457 cd 42 9d			call macro_forth_dsp_pop 
a45a				endm 
# End of macro FORTH_DSP_POP
a45a			 
a45a			;		pop hl 
a45a			 
a45a 7e				ld a, (hl) 
a45b			 
a45b 6f				ld l, a 
a45c 26 00			ld h, 0 
a45e cd 85 9a			call forth_push_numhl 
a461			 
a461				NEXTW 
a461 c3 76 9e			jp macro_next 
a464				endm 
# End of macro NEXTW
a464			.CAT: 
a464			CWHEAD .BANG OPCODE_CAT "C@" 2 WORD_FLAG_CODE 
a464 20				db WORD_SYS_CORE+OPCODE_CAT             
a465 8d a4			dw .BANG            
a467 03				db 2 + 1 
a468 .. 00			db "C@",0              
a46b				endm 
# End of macro CWHEAD
a46b			; | C@  ( w -- ) Push onto TOS byte stored at address   | DONE 
a46b				if DEBUG_FORTH_WORDS_KEY 
a46b					DMARK "CAA" 
a46b f5				push af  
a46c 3a 80 a4			ld a, (.dmark)  
a46f 32 65 ee			ld (debug_mark),a  
a472 3a 81 a4			ld a, (.dmark+1)  
a475 32 66 ee			ld (debug_mark+1),a  
a478 3a 82 a4			ld a, (.dmark+2)  
a47b 32 67 ee			ld (debug_mark+2),a  
a47e 18 03			jr .pastdmark  
a480 ..			.dmark: db "CAA"  
a483 f1			.pastdmark: pop af  
a484			endm  
# End of macro DMARK
a484					CALLMONITOR 
a484 cd 6f ee			call debug_vector  
a487				endm  
# End of macro CALLMONITOR
a487				endif 
a487 c3 54 a4			jp .getbyteat 
a48a				NEXTW 
a48a c3 76 9e			jp macro_next 
a48d				endm 
# End of macro NEXTW
a48d			.BANG: 
a48d			CWHEAD .CBANG OPCODE_BANG "!" 1 WORD_FLAG_CODE 
a48d 21				db WORD_SYS_CORE+OPCODE_BANG             
a48e c3 a4			dw .CBANG            
a490 02				db 1 + 1 
a491 .. 00			db "!",0              
a493				endm 
# End of macro CWHEAD
a493			; | ! ( x w -- ) Store x at address w      | DONE 
a493				if DEBUG_FORTH_WORDS_KEY 
a493					DMARK "BNG" 
a493 f5				push af  
a494 3a a8 a4			ld a, (.dmark)  
a497 32 65 ee			ld (debug_mark),a  
a49a 3a a9 a4			ld a, (.dmark+1)  
a49d 32 66 ee			ld (debug_mark+1),a  
a4a0 3a aa a4			ld a, (.dmark+2)  
a4a3 32 67 ee			ld (debug_mark+2),a  
a4a6 18 03			jr .pastdmark  
a4a8 ..			.dmark: db "BNG"  
a4ab f1			.pastdmark: pop af  
a4ac			endm  
# End of macro DMARK
a4ac					CALLMONITOR 
a4ac cd 6f ee			call debug_vector  
a4af				endm  
# End of macro CALLMONITOR
a4af				endif 
a4af			 
a4af			.storebyteat:		 
a4af				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a4af cd 8a 9c			call macro_dsp_valuehl 
a4b2				endm 
# End of macro FORTH_DSP_VALUEHL
a4b2				 
a4b2 e5				push hl 
a4b3			 
a4b3				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a4b3 cd 42 9d			call macro_forth_dsp_pop 
a4b6				endm 
# End of macro FORTH_DSP_POP
a4b6			 
a4b6				; get byte to poke 
a4b6			 
a4b6				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a4b6 cd 8a 9c			call macro_dsp_valuehl 
a4b9				endm 
# End of macro FORTH_DSP_VALUEHL
a4b9 e5				push hl 
a4ba			 
a4ba			 
a4ba				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a4ba cd 42 9d			call macro_forth_dsp_pop 
a4bd				endm 
# End of macro FORTH_DSP_POP
a4bd			 
a4bd			 
a4bd d1				pop de 
a4be e1				pop hl 
a4bf			 
a4bf 73				ld (hl),e 
a4c0			 
a4c0			 
a4c0				NEXTW 
a4c0 c3 76 9e			jp macro_next 
a4c3				endm 
# End of macro NEXTW
a4c3			.CBANG: 
a4c3			CWHEAD .SCALL OPCODE_CBANG "C!" 2 WORD_FLAG_CODE 
a4c3 22				db WORD_SYS_CORE+OPCODE_CBANG             
a4c4 ec a4			dw .SCALL            
a4c6 03				db 2 + 1 
a4c7 .. 00			db "C!",0              
a4ca				endm 
# End of macro CWHEAD
a4ca			; | C!  ( x w -- ) Store x at address w  | DONE 
a4ca				if DEBUG_FORTH_WORDS_KEY 
a4ca					DMARK "CBA" 
a4ca f5				push af  
a4cb 3a df a4			ld a, (.dmark)  
a4ce 32 65 ee			ld (debug_mark),a  
a4d1 3a e0 a4			ld a, (.dmark+1)  
a4d4 32 66 ee			ld (debug_mark+1),a  
a4d7 3a e1 a4			ld a, (.dmark+2)  
a4da 32 67 ee			ld (debug_mark+2),a  
a4dd 18 03			jr .pastdmark  
a4df ..			.dmark: db "CBA"  
a4e2 f1			.pastdmark: pop af  
a4e3			endm  
# End of macro DMARK
a4e3					CALLMONITOR 
a4e3 cd 6f ee			call debug_vector  
a4e6				endm  
# End of macro CALLMONITOR
a4e6				endif 
a4e6 c3 af a4			jp .storebyteat 
a4e9				NEXTW 
a4e9 c3 76 9e			jp macro_next 
a4ec				endm 
# End of macro NEXTW
a4ec			.SCALL: 
a4ec			CWHEAD .DEPTH OPCODE_SCALL "CALL" 4 WORD_FLAG_CODE 
a4ec 23				db WORD_SYS_CORE+OPCODE_SCALL             
a4ed 20 a5			dw .DEPTH            
a4ef 05				db 4 + 1 
a4f0 .. 00			db "CALL",0              
a4f5				endm 
# End of macro CWHEAD
a4f5			; | CALL ( w -- w  ) machine code call to address w  push the result of hl to stack | DONE 
a4f5				if DEBUG_FORTH_WORDS_KEY 
a4f5					DMARK "CLL" 
a4f5 f5				push af  
a4f6 3a 0a a5			ld a, (.dmark)  
a4f9 32 65 ee			ld (debug_mark),a  
a4fc 3a 0b a5			ld a, (.dmark+1)  
a4ff 32 66 ee			ld (debug_mark+1),a  
a502 3a 0c a5			ld a, (.dmark+2)  
a505 32 67 ee			ld (debug_mark+2),a  
a508 18 03			jr .pastdmark  
a50a ..			.dmark: db "CLL"  
a50d f1			.pastdmark: pop af  
a50e			endm  
# End of macro DMARK
a50e					CALLMONITOR 
a50e cd 6f ee			call debug_vector  
a511				endm  
# End of macro CALLMONITOR
a511				endif 
a511			 
a511				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a511 cd 8a 9c			call macro_dsp_valuehl 
a514				endm 
# End of macro FORTH_DSP_VALUEHL
a514			 
a514			;		push hl 
a514			 
a514				; destroy value TOS 
a514			 
a514				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a514 cd 42 9d			call macro_forth_dsp_pop 
a517				endm 
# End of macro FORTH_DSP_POP
a517			 
a517					 
a517			;		pop hl 
a517			 
a517				; how to do a call with hl???? save SP? 
a517 cd 1a 9e			call forth_call_hl 
a51a			 
a51a			 
a51a				; TODO push value back onto stack for another op etc 
a51a			 
a51a cd 85 9a			call forth_push_numhl 
a51d				NEXTW 
a51d c3 76 9e			jp macro_next 
a520				endm 
# End of macro NEXTW
a520			.DEPTH: 
a520			CWHEAD .OVER OPCODE_DEPTH "DEPTH" 5 WORD_FLAG_CODE 
a520 24				db WORD_SYS_CORE+OPCODE_DEPTH             
a521 5d a5			dw .OVER            
a523 06				db 5 + 1 
a524 .. 00			db "DEPTH",0              
a52a				endm 
# End of macro CWHEAD
a52a			; | DEPTH ( -- u ) Push count of stack | DONE 
a52a				; take current TOS and remove from base value div by two to get count 
a52a				if DEBUG_FORTH_WORDS_KEY 
a52a					DMARK "DEP" 
a52a f5				push af  
a52b 3a 3f a5			ld a, (.dmark)  
a52e 32 65 ee			ld (debug_mark),a  
a531 3a 40 a5			ld a, (.dmark+1)  
a534 32 66 ee			ld (debug_mark+1),a  
a537 3a 41 a5			ld a, (.dmark+2)  
a53a 32 67 ee			ld (debug_mark+2),a  
a53d 18 03			jr .pastdmark  
a53f ..			.dmark: db "DEP"  
a542 f1			.pastdmark: pop af  
a543			endm  
# End of macro DMARK
a543					CALLMONITOR 
a543 cd 6f ee			call debug_vector  
a546				endm  
# End of macro CALLMONITOR
a546				endif 
a546			 
a546			 
a546 2a e8 e9		ld hl, (cli_data_sp) 
a549 11 22 e8		ld de, cli_data_stack 
a54c ed 52		sbc hl,de 
a54e			 
a54e			; div by size of stack item 
a54e			 
a54e 5d			ld e,l 
a54f 0e 03		ld c, 3 
a551 cd 7a 8c		call Div8 
a554			 
a554 6f			ld l,a 
a555 26 00		ld h,0 
a557			 
a557			;srl h 
a557			;rr l 
a557			 
a557 cd 85 9a			call forth_push_numhl 
a55a				NEXTW 
a55a c3 76 9e			jp macro_next 
a55d				endm 
# End of macro NEXTW
a55d			.OVER: 
a55d			CWHEAD .PAUSE 46 "OVER" 4 WORD_FLAG_CODE 
a55d 42				db WORD_SYS_CORE+46             
a55e a4 a5			dw .PAUSE            
a560 05				db 4 + 1 
a561 .. 00			db "OVER",0              
a566				endm 
# End of macro CWHEAD
a566			; | OVER ( n1 n2 -- n1 n2 n1 )  Copy one below TOS onto TOS | TOFIX 
a566				if DEBUG_FORTH_WORDS_KEY 
a566					DMARK "OVR" 
a566 f5				push af  
a567 3a 7b a5			ld a, (.dmark)  
a56a 32 65 ee			ld (debug_mark),a  
a56d 3a 7c a5			ld a, (.dmark+1)  
a570 32 66 ee			ld (debug_mark+1),a  
a573 3a 7d a5			ld a, (.dmark+2)  
a576 32 67 ee			ld (debug_mark+2),a  
a579 18 03			jr .pastdmark  
a57b ..			.dmark: db "OVR"  
a57e f1			.pastdmark: pop af  
a57f			endm  
# End of macro DMARK
a57f					CALLMONITOR 
a57f cd 6f ee			call debug_vector  
a582				endm  
# End of macro CALLMONITOR
a582				endif 
a582			 
a582			; TODO Use os stack swap memory 
a582			 
a582				; work out what type we are looking at 
a582			 
a582				FORTH_DSP_PTR 1 
a582 2a e8 e9			ld hl,(cli_data_sp) 
a585 11 03 00			ld de, 1 * 3 
a588 ed 52			sbc hl, de 
a58a				endm 
# End of macro FORTH_DSP_PTR
a58a			 
a58a 7e				ld a, (hl) 
a58b				 
a58b f5				push af 
a58c				; whatever the type lets get the pointer or word 
a58c 23				inc hl 
a58d			;; 
a58d			 
a58d				; type check now to decide on how to push  
a58d			 
a58d cd f8 9d			call loadwordinhl 
a590 f1				pop af 
a591 fe 01			cp DS_TYPE_STR 
a593 28 06			jr z, .ovstr 
a595			 
a595				; we have a numeric so load the word and push 
a595			;	ld e, (hl) 
a595			;	inc hl 
a595			;	ld d, (hl) 
a595			;	ex de, hl 
a595 cd 85 9a			call forth_push_numhl 
a598				NEXTW 
a598 c3 76 9e			jp macro_next 
a59b				endm 
# End of macro NEXTW
a59b			 
a59b			.ovstr: 
a59b				; ok, a string so get the pointer and push as a string 
a59b			 
a59b			;	call loadwordinhl 
a59b cd f3 9a			call forth_push_str 
a59e				NEXTW 
a59e c3 76 9e			jp macro_next 
a5a1				endm 
# End of macro NEXTW
a5a1			 
a5a1			;	FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a5a1			;	push hl    ; n2 
a5a1			;	FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a5a1			; 
a5a1			;	FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a5a1			;	push hl    ; n1 
a5a1			;	FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a5a1			; 
a5a1			;	pop de     ; n1 
a5a1			;	pop hl     ; n2 
a5a1			; 
a5a1			;	push de 
a5a1			;	push hl 
a5a1			;	push de 
a5a1			 
a5a1				; push back  
a5a1			 
a5a1			;	pop hl 
a5a1			;	call forth_push_numhl 
a5a1			;	pop hl 
a5a1			;	call forth_push_numhl 
a5a1			;	pop hl 
a5a1			;	call forth_push_numhl 
a5a1				NEXTW 
a5a1 c3 76 9e			jp macro_next 
a5a4				endm 
# End of macro NEXTW
a5a4			 
a5a4			.PAUSE: 
a5a4			CWHEAD .PAUSES 47 "PAUSEMS" 7 WORD_FLAG_CODE 
a5a4 43				db WORD_SYS_CORE+47             
a5a5 d9 a5			dw .PAUSES            
a5a7 08				db 7 + 1 
a5a8 .. 00			db "PAUSEMS",0              
a5b0				endm 
# End of macro CWHEAD
a5b0			; | PAUSEMS ( n -- )  Pause for n millisconds | DONE 
a5b0				if DEBUG_FORTH_WORDS_KEY 
a5b0					DMARK "PMS" 
a5b0 f5				push af  
a5b1 3a c5 a5			ld a, (.dmark)  
a5b4 32 65 ee			ld (debug_mark),a  
a5b7 3a c6 a5			ld a, (.dmark+1)  
a5ba 32 66 ee			ld (debug_mark+1),a  
a5bd 3a c7 a5			ld a, (.dmark+2)  
a5c0 32 67 ee			ld (debug_mark+2),a  
a5c3 18 03			jr .pastdmark  
a5c5 ..			.dmark: db "PMS"  
a5c8 f1			.pastdmark: pop af  
a5c9			endm  
# End of macro DMARK
a5c9					CALLMONITOR 
a5c9 cd 6f ee			call debug_vector  
a5cc				endm  
# End of macro CALLMONITOR
a5cc				endif 
a5cc				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a5cc cd 8a 9c			call macro_dsp_valuehl 
a5cf				endm 
# End of macro FORTH_DSP_VALUEHL
a5cf			;		push hl    ; n2 
a5cf				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a5cf cd 42 9d			call macro_forth_dsp_pop 
a5d2				endm 
# End of macro FORTH_DSP_POP
a5d2			;		pop hl 
a5d2			 
a5d2 7d				ld a, l 
a5d3 cd e5 89			call aDelayInMS 
a5d6			       NEXTW 
a5d6 c3 76 9e			jp macro_next 
a5d9				endm 
# End of macro NEXTW
a5d9			.PAUSES:  
a5d9			CWHEAD .ROT 48 "PAUSE" 5 WORD_FLAG_CODE 
a5d9 44				db WORD_SYS_CORE+48             
a5da 48 a6			dw .ROT            
a5dc 06				db 5 + 1 
a5dd .. 00			db "PAUSE",0              
a5e3				endm 
# End of macro CWHEAD
a5e3			; | PAUSE ( n -- )  Pause for n seconds | DONE 
a5e3				if DEBUG_FORTH_WORDS_KEY 
a5e3					DMARK "PAU" 
a5e3 f5				push af  
a5e4 3a f8 a5			ld a, (.dmark)  
a5e7 32 65 ee			ld (debug_mark),a  
a5ea 3a f9 a5			ld a, (.dmark+1)  
a5ed 32 66 ee			ld (debug_mark+1),a  
a5f0 3a fa a5			ld a, (.dmark+2)  
a5f3 32 67 ee			ld (debug_mark+2),a  
a5f6 18 03			jr .pastdmark  
a5f8 ..			.dmark: db "PAU"  
a5fb f1			.pastdmark: pop af  
a5fc			endm  
# End of macro DMARK
a5fc					CALLMONITOR 
a5fc cd 6f ee			call debug_vector  
a5ff				endm  
# End of macro CALLMONITOR
a5ff				endif 
a5ff				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a5ff cd 8a 9c			call macro_dsp_valuehl 
a602				endm 
# End of macro FORTH_DSP_VALUEHL
a602			;		push hl    ; n2 
a602				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a602 cd 42 9d			call macro_forth_dsp_pop 
a605				endm 
# End of macro FORTH_DSP_POP
a605			;		pop hl 
a605 45				ld b, l 
a606				if DEBUG_FORTH_WORDS 
a606					DMARK "PAU" 
a606 f5				push af  
a607 3a 1b a6			ld a, (.dmark)  
a60a 32 65 ee			ld (debug_mark),a  
a60d 3a 1c a6			ld a, (.dmark+1)  
a610 32 66 ee			ld (debug_mark+1),a  
a613 3a 1d a6			ld a, (.dmark+2)  
a616 32 67 ee			ld (debug_mark+2),a  
a619 18 03			jr .pastdmark  
a61b ..			.dmark: db "PAU"  
a61e f1			.pastdmark: pop af  
a61f			endm  
# End of macro DMARK
a61f					CALLMONITOR 
a61f cd 6f ee			call debug_vector  
a622				endm  
# End of macro CALLMONITOR
a622				endif 
a622 c5			.pauses1:	push bc 
a623 cd 00 8a			call delay1s 
a626 c1				pop bc 
a627				if DEBUG_FORTH_WORDS 
a627					DMARK "PA1" 
a627 f5				push af  
a628 3a 3c a6			ld a, (.dmark)  
a62b 32 65 ee			ld (debug_mark),a  
a62e 3a 3d a6			ld a, (.dmark+1)  
a631 32 66 ee			ld (debug_mark+1),a  
a634 3a 3e a6			ld a, (.dmark+2)  
a637 32 67 ee			ld (debug_mark+2),a  
a63a 18 03			jr .pastdmark  
a63c ..			.dmark: db "PA1"  
a63f f1			.pastdmark: pop af  
a640			endm  
# End of macro DMARK
a640					CALLMONITOR 
a640 cd 6f ee			call debug_vector  
a643				endm  
# End of macro CALLMONITOR
a643				endif 
a643 10 dd			djnz .pauses1 
a645			 
a645			       NEXTW 
a645 c3 76 9e			jp macro_next 
a648				endm 
# End of macro NEXTW
a648			.ROT: 
a648			CWHEAD .UWORDS 49 "ROT" 3 WORD_FLAG_CODE 
a648 45				db WORD_SYS_CORE+49             
a649 b1 a6			dw .UWORDS            
a64b 04				db 3 + 1 
a64c .. 00			db "ROT",0              
a650				endm 
# End of macro CWHEAD
a650			; | ROT ( u1 u2 u3 -- u2 u3 u1 ) Rotate top three items on stack | TOFIX 
a650				if DEBUG_FORTH_WORDS_KEY 
a650					DMARK "ROT" 
a650 f5				push af  
a651 3a 65 a6			ld a, (.dmark)  
a654 32 65 ee			ld (debug_mark),a  
a657 3a 66 a6			ld a, (.dmark+1)  
a65a 32 66 ee			ld (debug_mark+1),a  
a65d 3a 67 a6			ld a, (.dmark+2)  
a660 32 67 ee			ld (debug_mark+2),a  
a663 18 03			jr .pastdmark  
a665 ..			.dmark: db "ROT"  
a668 f1			.pastdmark: pop af  
a669			endm  
# End of macro DMARK
a669					CALLMONITOR 
a669 cd 6f ee			call debug_vector  
a66c				endm  
# End of macro CALLMONITOR
a66c				endif 
a66c			 
a66c			; DONE Use os stack swap memory 
a66c			 
a66c				FORTH_DSP_PTR 0     ; u3 
a66c 2a e8 e9			ld hl,(cli_data_sp) 
a66f 11 00 00			ld de, 0 * 3 
a672 ed 52			sbc hl, de 
a674				endm 
# End of macro FORTH_DSP_PTR
a674 cd c2 9d			call hltostack1     
a677			  
a677				FORTH_DSP_PTR 1     ; u2 
a677 2a e8 e9			ld hl,(cli_data_sp) 
a67a 11 03 00			ld de, 1 * 3 
a67d ed 52			sbc hl, de 
a67f				endm 
# End of macro FORTH_DSP_PTR
a67f cd c8 9d			call hltostack2      
a682			 
a682				FORTH_DSP_PTR 2     ; u1 
a682 2a e8 e9			ld hl,(cli_data_sp) 
a685 11 06 00			ld de, 2 * 3 
a688 ed 52			sbc hl, de 
a68a				endm 
# End of macro FORTH_DSP_PTR
a68a cd ce 9d			call hltostack3 
a68d			 
a68d			 
a68d				FORTH_DSP_PTR 0     ;  
a68d 2a e8 e9			ld hl,(cli_data_sp) 
a690 11 00 00			ld de, 0 * 3 
a693 ed 52			sbc hl, de 
a695				endm 
# End of macro FORTH_DSP_PTR
a695 cd e6 9d			call hlfromstack3 
a698			 
a698				FORTH_DSP_PTR 1     ; TOS 
a698 2a e8 e9			ld hl,(cli_data_sp) 
a69b 11 03 00			ld de, 1 * 3 
a69e ed 52			sbc hl, de 
a6a0				endm 
# End of macro FORTH_DSP_PTR
a6a0 cd da 9d			call hlfromstack1 
a6a3			 
a6a3				FORTH_DSP_PTR 2     ; TOS 
a6a3 2a e8 e9			ld hl,(cli_data_sp) 
a6a6 11 06 00			ld de, 2 * 3 
a6a9 ed 52			sbc hl, de 
a6ab				endm 
# End of macro FORTH_DSP_PTR
a6ab cd e0 9d			call hlfromstack2 
a6ae			 
a6ae			 
a6ae			;	FORTH_DSP_VALUEHL 
a6ae			;	push hl    ; u3  
a6ae			; 
a6ae			;	FORTH_DSP_POP 
a6ae			; 
a6ae			;	FORTH_DSP_VALUEHL 
a6ae			;	push hl     ; u2 
a6ae			; 
a6ae			;	FORTH_DSP_POP 
a6ae			; 
a6ae			;	FORTH_DSP_VALUEHL 
a6ae			;	push hl     ; u1 
a6ae			; 
a6ae			;	FORTH_DSP_POP 
a6ae			; 
a6ae			;	pop bc      ; u1 
a6ae			;	pop hl      ; u2 
a6ae			;	pop de      ; u3 
a6ae			; 
a6ae			; 
a6ae			;	push bc 
a6ae			;	push de 
a6ae			;	push hl 
a6ae			; 
a6ae			; 
a6ae			;	pop hl 
a6ae			;	call forth_push_numhl 
a6ae			; 
a6ae			;	pop hl 
a6ae			;	call forth_push_numhl 
a6ae			; 
a6ae			;	pop hl 
a6ae			;	call forth_push_numhl 
a6ae				 
a6ae			 
a6ae			 
a6ae			 
a6ae			 
a6ae			 
a6ae			       NEXTW 
a6ae c3 76 9e			jp macro_next 
a6b1				endm 
# End of macro NEXTW
a6b1			 
a6b1			.UWORDS: 
a6b1			CWHEAD .BP 60 "UWORDS" 6 WORD_FLAG_CODE 
a6b1 50				db WORD_SYS_CORE+60             
a6b2 73 a7			dw .BP            
a6b4 07				db 6 + 1 
a6b5 .. 00			db "UWORDS",0              
a6bc				endm 
# End of macro CWHEAD
a6bc			; | UWORDS (  -- s1 ... sn u )   List user word dict | DONE 
a6bc			; | | After use the TOS will have a count of the number of user words that have been pushed to stack. 
a6bc			; | | Following the count are the individual words. 
a6bc			; | | 
a6bc			; | | e.g. UWORDS 
a6bc			; | | BOX DIRLIST 2 
a6bc			; | |  
a6bc			; | | Can be used to save the words to storage via: 
a6bc			; | | UWORDS $01 DO $01 APPEND LOOP 
a6bc			if DEBUG_FORTH_WORDS_KEY 
a6bc				DMARK "UWR" 
a6bc f5				push af  
a6bd 3a d1 a6			ld a, (.dmark)  
a6c0 32 65 ee			ld (debug_mark),a  
a6c3 3a d2 a6			ld a, (.dmark+1)  
a6c6 32 66 ee			ld (debug_mark+1),a  
a6c9 3a d3 a6			ld a, (.dmark+2)  
a6cc 32 67 ee			ld (debug_mark+2),a  
a6cf 18 03			jr .pastdmark  
a6d1 ..			.dmark: db "UWR"  
a6d4 f1			.pastdmark: pop af  
a6d5			endm  
# End of macro DMARK
a6d5				CALLMONITOR 
a6d5 cd 6f ee			call debug_vector  
a6d8				endm  
# End of macro CALLMONITOR
a6d8			endif 
a6d8 21 f1 df			ld hl, baseram 
a6db				;ld hl, baseusermem 
a6db 01 00 00			ld bc, 0    ; start a counter 
a6de			 
a6de			; skip dict stub 
a6de			 
a6de cd b3 9f			call forth_tok_next 
a6e1			 
a6e1			 
a6e1			; while we have words to look for 
a6e1			 
a6e1 7e			.douscan:	ld a, (hl)      
a6e2			if DEBUG_FORTH_WORDS 
a6e2				DMARK "UWs" 
a6e2 f5				push af  
a6e3 3a f7 a6			ld a, (.dmark)  
a6e6 32 65 ee			ld (debug_mark),a  
a6e9 3a f8 a6			ld a, (.dmark+1)  
a6ec 32 66 ee			ld (debug_mark+1),a  
a6ef 3a f9 a6			ld a, (.dmark+2)  
a6f2 32 67 ee			ld (debug_mark+2),a  
a6f5 18 03			jr .pastdmark  
a6f7 ..			.dmark: db "UWs"  
a6fa f1			.pastdmark: pop af  
a6fb			endm  
# End of macro DMARK
a6fb				CALLMONITOR 
a6fb cd 6f ee			call debug_vector  
a6fe				endm  
# End of macro CALLMONITOR
a6fe			endif 
a6fe fe 00			cp WORD_SYS_END 
a700 28 4d			jr z, .udone 
a702 fe 01			cp WORD_SYS_UWORD 
a704 20 44			jr nz, .nuword 
a706			 
a706			if DEBUG_FORTH_WORDS 
a706				DMARK "UWu" 
a706 f5				push af  
a707 3a 1b a7			ld a, (.dmark)  
a70a 32 65 ee			ld (debug_mark),a  
a70d 3a 1c a7			ld a, (.dmark+1)  
a710 32 66 ee			ld (debug_mark+1),a  
a713 3a 1d a7			ld a, (.dmark+2)  
a716 32 67 ee			ld (debug_mark+2),a  
a719 18 03			jr .pastdmark  
a71b ..			.dmark: db "UWu"  
a71e f1			.pastdmark: pop af  
a71f			endm  
# End of macro DMARK
a71f				CALLMONITOR 
a71f cd 6f ee			call debug_vector  
a722				endm  
# End of macro CALLMONITOR
a722			endif 
a722				; we have a uword so push its name to the stack 
a722			 
a722 e5				push hl  ; save so we can move to next dict block 
a723			 
a723				; skip opcode 
a723 23				inc hl  
a724				; skip next ptr 
a724 23				inc hl  
a725 23				inc hl 
a726				; skip len 
a726 23				inc hl 
a727			if DEBUG_FORTH_WORDS 
a727				DMARK "UWt" 
a727 f5				push af  
a728 3a 3c a7			ld a, (.dmark)  
a72b 32 65 ee			ld (debug_mark),a  
a72e 3a 3d a7			ld a, (.dmark+1)  
a731 32 66 ee			ld (debug_mark+1),a  
a734 3a 3e a7			ld a, (.dmark+2)  
a737 32 67 ee			ld (debug_mark+2),a  
a73a 18 03			jr .pastdmark  
a73c ..			.dmark: db "UWt"  
a73f f1			.pastdmark: pop af  
a740			endm  
# End of macro DMARK
a740				CALLMONITOR 
a740 cd 6f ee			call debug_vector  
a743				endm  
# End of macro CALLMONITOR
a743			endif 
a743 03				inc bc 
a744			 
a744 c5				push bc 
a745 cd f3 9a			call forth_push_str 
a748 c1				pop bc 
a749			 
a749 e1				pop hl 	 
a74a			 
a74a cd b3 9f		.nuword:	call forth_tok_next 
a74d 18 92			jr .douscan  
a74f			 
a74f			.udone:		 ; push count of uwords found 
a74f c5				push bc 
a750 e1				pop hl 
a751			 
a751			if DEBUG_FORTH_WORDS 
a751				DMARK "UWc" 
a751 f5				push af  
a752 3a 66 a7			ld a, (.dmark)  
a755 32 65 ee			ld (debug_mark),a  
a758 3a 67 a7			ld a, (.dmark+1)  
a75b 32 66 ee			ld (debug_mark+1),a  
a75e 3a 68 a7			ld a, (.dmark+2)  
a761 32 67 ee			ld (debug_mark+2),a  
a764 18 03			jr .pastdmark  
a766 ..			.dmark: db "UWc"  
a769 f1			.pastdmark: pop af  
a76a			endm  
# End of macro DMARK
a76a				CALLMONITOR 
a76a cd 6f ee			call debug_vector  
a76d				endm  
# End of macro CALLMONITOR
a76d			endif 
a76d cd 85 9a			call forth_push_numhl 
a770			 
a770			 
a770			       NEXTW 
a770 c3 76 9e			jp macro_next 
a773				endm 
# End of macro NEXTW
a773			 
a773			.BP: 
a773			CWHEAD .MONITOR 64 "BP" 2 WORD_FLAG_CODE 
a773 54				db WORD_SYS_CORE+64             
a774 ad a7			dw .MONITOR            
a776 03				db 2 + 1 
a777 .. 00			db "BP",0              
a77a				endm 
# End of macro CWHEAD
a77a			; | BP ( u1 -- ) Enable or disable break point monitoring | DONE 
a77a			; | | $00 Will enable the break points within specific code paths 
a77a			; | | $01 Will disable break points 
a77a			; | |  
a77a			; | | By default break points are off. Either the above can be used to enable them 
a77a			; | | or if a key is held down during start up the spashscreen will appear to freeze 
a77a			; | | and on release of the pressed key the CONFIG menu will be displayed where you 
a77a			; | | can disable break points. Exiting will then continue boot process. 
a77a				; get byte count 
a77a				if DEBUG_FORTH_WORDS_KEY 
a77a					DMARK "BP." 
a77a f5				push af  
a77b 3a 8f a7			ld a, (.dmark)  
a77e 32 65 ee			ld (debug_mark),a  
a781 3a 90 a7			ld a, (.dmark+1)  
a784 32 66 ee			ld (debug_mark+1),a  
a787 3a 91 a7			ld a, (.dmark+2)  
a78a 32 67 ee			ld (debug_mark+2),a  
a78d 18 03			jr .pastdmark  
a78f ..			.dmark: db "BP."  
a792 f1			.pastdmark: pop af  
a793			endm  
# End of macro DMARK
a793					CALLMONITOR 
a793 cd 6f ee			call debug_vector  
a796				endm  
# End of macro CALLMONITOR
a796				endif 
a796			 
a796				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a796 cd 8a 9c			call macro_dsp_valuehl 
a799				endm 
# End of macro FORTH_DSP_VALUEHL
a799			 
a799			;		push hl 
a799			 
a799				; destroy value TOS 
a799			 
a799				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a799 cd 42 9d			call macro_forth_dsp_pop 
a79c				endm 
# End of macro FORTH_DSP_POP
a79c			 
a79c			;		pop hl 
a79c			 
a79c 3e 00			ld a,0 
a79e bd				cp l 
a79f 28 06			jr z, .bpset 
a7a1			;		ld a, '*' 
a7a1 cd 00 94			call bp_off 
a7a4				NEXTW 
a7a4 c3 76 9e			jp macro_next 
a7a7				endm 
# End of macro NEXTW
a7a7			 
a7a7			.bpset:	 
a7a7				;	ld (os_view_disable), a 
a7a7 cd f4 93			call bp_on 
a7aa			 
a7aa			 
a7aa				NEXTW 
a7aa c3 76 9e			jp macro_next 
a7ad				endm 
# End of macro NEXTW
a7ad			 
a7ad			 
a7ad			.MONITOR: 
a7ad			CWHEAD .MALLOC 65 "MONITOR" 7 WORD_FLAG_CODE 
a7ad 55				db WORD_SYS_CORE+65             
a7ae de a7			dw .MALLOC            
a7b0 08				db 7 + 1 
a7b1 .. 00			db "MONITOR",0              
a7b9				endm 
# End of macro CWHEAD
a7b9			; | MONITOR ( -- ) Display system breakpoint/monitor | DONE 
a7b9			; | | At start the current various registers will be displayed with contents. 
a7b9			; | | Top right corner will show the most recent debug marker seen. 
a7b9			; | | The bottom of the screen will also show the values of the data stack pointer (DSP) 
a7b9			; | | and the return stack pointer (RSP). 
a7b9			; | | Pressing: 
a7b9			; | |    1 - Initial screen 
a7b9			; | |    2 - Display a data dump of HL 
a7b9			; | |    3 - Display a data dump of DE 
a7b9			; | |    4 - Display a data dump of BC 
a7b9			; | |    5 - Display a data dump of HL 
a7b9			; | |    6 - Display a data dump of DSP 
a7b9			; | |    7 - Display a data dump of RSP 
a7b9			; | |    8 - Display a data dump of what is at DSP 
a7b9			; | |    9 - Display a data dump of what is at RSP 
a7b9			; | |    0 - Exit monitor and continue running. This will also enable break points 
a7b9			; | |    * - Disable break points 
a7b9			; | |    # - Enter traditional monitor mode 
a7b9			; | | 
a7b9			; | | Monitor Mode 
a7b9			; | | ------------ 
a7b9			; | | A prompt of '>' will be shown for various commands: 
a7b9			; | |    D xxxx - Display a data dump starting from hex address xxxx 
a7b9			; | |    C - Continue display a data dump from the last set address 
a7b9			; | |    M xxxx - Set start of memory edit at address xx 
a7b9			; | |    U xx - Poke the hex byte xx into the address set by M and increment the address to the next location 
a7b9			; | |    G xxxx - Exec code at specific address 
a7b9			; | |    Q - Return to previous 
a7b9				if DEBUG_FORTH_WORDS_KEY 
a7b9					DMARK "MON" 
a7b9 f5				push af  
a7ba 3a ce a7			ld a, (.dmark)  
a7bd 32 65 ee			ld (debug_mark),a  
a7c0 3a cf a7			ld a, (.dmark+1)  
a7c3 32 66 ee			ld (debug_mark+1),a  
a7c6 3a d0 a7			ld a, (.dmark+2)  
a7c9 32 67 ee			ld (debug_mark+2),a  
a7cc 18 03			jr .pastdmark  
a7ce ..			.dmark: db "MON"  
a7d1 f1			.pastdmark: pop af  
a7d2			endm  
# End of macro DMARK
a7d2					CALLMONITOR 
a7d2 cd 6f ee			call debug_vector  
a7d5				endm  
# End of macro CALLMONITOR
a7d5				endif 
a7d5			;		ld a, 0 
a7d5			;		ld (os_view_disable), a 
a7d5 cd f4 93			call bp_on 
a7d8			 
a7d8				CALLMONITOR 
a7d8 cd 6f ee			call debug_vector  
a7db				endm  
# End of macro CALLMONITOR
a7db			 
a7db			;	call monitor 
a7db			 
a7db				NEXTW 
a7db c3 76 9e			jp macro_next 
a7de				endm 
# End of macro NEXTW
a7de			 
a7de			 
a7de			.MALLOC: 
a7de			CWHEAD .MALLOC2 66 "ALLOT" 5 WORD_FLAG_CODE 
a7de 56				db WORD_SYS_CORE+66             
a7df 07 a8			dw .MALLOC2            
a7e1 06				db 5 + 1 
a7e2 .. 00			db "ALLOT",0              
a7e8				endm 
# End of macro CWHEAD
a7e8			; | ALLOT ( u -- u ) Allocate u bytes of memory space and push the pointer TOS  | DONE 
a7e8				if DEBUG_FORTH_WORDS_KEY 
a7e8					DMARK "ALL" 
a7e8 f5				push af  
a7e9 3a fd a7			ld a, (.dmark)  
a7ec 32 65 ee			ld (debug_mark),a  
a7ef 3a fe a7			ld a, (.dmark+1)  
a7f2 32 66 ee			ld (debug_mark+1),a  
a7f5 3a ff a7			ld a, (.dmark+2)  
a7f8 32 67 ee			ld (debug_mark+2),a  
a7fb 18 03			jr .pastdmark  
a7fd ..			.dmark: db "ALL"  
a800 f1			.pastdmark: pop af  
a801			endm  
# End of macro DMARK
a801					CALLMONITOR 
a801 cd 6f ee			call debug_vector  
a804				endm  
# End of macro CALLMONITOR
a804				endif 
a804 c3 2e a8			jp .mallocc 
a807			.MALLOC2: 
a807			CWHEAD .FREE 66 "MALLOC" 6 WORD_FLAG_CODE 
a807 56				db WORD_SYS_CORE+66             
a808 45 a8			dw .FREE            
a80a 07				db 6 + 1 
a80b .. 00			db "MALLOC",0              
a812				endm 
# End of macro CWHEAD
a812			; | MALLOC ( u -- u ) Allocate u bytes of memory space and push the pointer TOS  | DONE 
a812				; get byte count 
a812				if DEBUG_FORTH_WORDS_KEY 
a812					DMARK "MAL" 
a812 f5				push af  
a813 3a 27 a8			ld a, (.dmark)  
a816 32 65 ee			ld (debug_mark),a  
a819 3a 28 a8			ld a, (.dmark+1)  
a81c 32 66 ee			ld (debug_mark+1),a  
a81f 3a 29 a8			ld a, (.dmark+2)  
a822 32 67 ee			ld (debug_mark+2),a  
a825 18 03			jr .pastdmark  
a827 ..			.dmark: db "MAL"  
a82a f1			.pastdmark: pop af  
a82b			endm  
# End of macro DMARK
a82b					CALLMONITOR 
a82b cd 6f ee			call debug_vector  
a82e				endm  
# End of macro CALLMONITOR
a82e				endif 
a82e			.mallocc: 
a82e				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a82e cd 8a 9c			call macro_dsp_valuehl 
a831				endm 
# End of macro FORTH_DSP_VALUEHL
a831			 
a831			;		push hl 
a831			 
a831				; destroy value TOS 
a831			 
a831				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a831 cd 42 9d			call macro_forth_dsp_pop 
a834				endm 
# End of macro FORTH_DSP_POP
a834			 
a834			;		pop hl 
a834 cd c5 90			call malloc 
a837			if DEBUG_FORTH_MALLOC_GUARD 
a837 f5				push af 
a838 cd 13 8d			call ishlzero 
a83b			;		ld a, l 
a83b			;		add h 
a83b			;		cp 0 
a83b f1				pop af 
a83c				 
a83c cc 9f ce			call z,malloc_error 
a83f			endif 
a83f			 
a83f cd 85 9a			call forth_push_numhl 
a842				NEXTW 
a842 c3 76 9e			jp macro_next 
a845				endm 
# End of macro NEXTW
a845			 
a845			.FREE: 
a845			CWHEAD .LIST 67 "FREE" 4 WORD_FLAG_CODE 
a845 57				db WORD_SYS_CORE+67             
a846 76 a8			dw .LIST            
a848 05				db 4 + 1 
a849 .. 00			db "FREE",0              
a84e				endm 
# End of macro CWHEAD
a84e			; | FREE ( u --  ) Free memory block from malloc given u address  | DONE 
a84e				if DEBUG_FORTH_WORDS_KEY 
a84e					DMARK "FRE" 
a84e f5				push af  
a84f 3a 63 a8			ld a, (.dmark)  
a852 32 65 ee			ld (debug_mark),a  
a855 3a 64 a8			ld a, (.dmark+1)  
a858 32 66 ee			ld (debug_mark+1),a  
a85b 3a 65 a8			ld a, (.dmark+2)  
a85e 32 67 ee			ld (debug_mark+2),a  
a861 18 03			jr .pastdmark  
a863 ..			.dmark: db "FRE"  
a866 f1			.pastdmark: pop af  
a867			endm  
# End of macro DMARK
a867					CALLMONITOR 
a867 cd 6f ee			call debug_vector  
a86a				endm  
# End of macro CALLMONITOR
a86a				endif 
a86a				; get address 
a86a			 
a86a				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
a86a cd 8a 9c			call macro_dsp_valuehl 
a86d				endm 
# End of macro FORTH_DSP_VALUEHL
a86d			 
a86d			;		push hl 
a86d			 
a86d				; destroy value TOS 
a86d			 
a86d				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
a86d cd 42 9d			call macro_forth_dsp_pop 
a870				endm 
# End of macro FORTH_DSP_POP
a870			 
a870			;		pop hl 
a870			if FORTH_ENABLE_MALLOCFREE 
a870 cd 8f 91			call free 
a873			endif 
a873				NEXTW 
a873 c3 76 9e			jp macro_next 
a876				endm 
# End of macro NEXTW
a876			.LIST: 
a876			CWHEAD .FORGET 72 "LIST" 4 WORD_FLAG_CODE 
a876 5c				db WORD_SYS_CORE+72             
a877 72 aa			dw .FORGET            
a879 05				db 4 + 1 
a87a .. 00			db "LIST",0              
a87f				endm 
# End of macro CWHEAD
a87f			; | LIST ( uword -- u )    List the code to the word that is quoted (so as not to exec) on TOS | DONE 
a87f			; | | The quoted word must be in upper case. 
a87f			if DEBUG_FORTH_WORDS_KEY 
a87f				DMARK "LST" 
a87f f5				push af  
a880 3a 94 a8			ld a, (.dmark)  
a883 32 65 ee			ld (debug_mark),a  
a886 3a 95 a8			ld a, (.dmark+1)  
a889 32 66 ee			ld (debug_mark+1),a  
a88c 3a 96 a8			ld a, (.dmark+2)  
a88f 32 67 ee			ld (debug_mark+2),a  
a892 18 03			jr .pastdmark  
a894 ..			.dmark: db "LST"  
a897 f1			.pastdmark: pop af  
a898			endm  
# End of macro DMARK
a898				CALLMONITOR 
a898 cd 6f ee			call debug_vector  
a89b				endm  
# End of macro CALLMONITOR
a89b			endif 
a89b			 
a89b				FORTH_DSP_VALUEHL 
a89b cd 8a 9c			call macro_dsp_valuehl 
a89e				endm 
# End of macro FORTH_DSP_VALUEHL
a89e			 
a89e e5				push hl 
a89f				FORTH_DSP_POP 
a89f cd 42 9d			call macro_forth_dsp_pop 
a8a2				endm 
# End of macro FORTH_DSP_POP
a8a2 c1				pop bc 
a8a3			 
a8a3			; Start format of scratch string 
a8a3			 
a8a3 21 bb e2			ld hl, scratch 
a8a6			 
a8a6 3e 3a			ld a, ':' 
a8a8 77				ld (hl),a 
a8a9 23				inc hl 
a8aa 3e 20			ld a, ' ' 
a8ac 77				ld (hl), a 
a8ad			 
a8ad				; Get ptr to the word we need to look up 
a8ad			 
a8ad			;		FORTH_DSP_VALUEHL 
a8ad				;v5 FORTH_DSP_VALUE 
a8ad			; TODO type check 
a8ad			;		inc hl    ; Skip type check  
a8ad			;		push hl 
a8ad			;		ex de, hl    ; put into DE 
a8ad			 
a8ad			 
a8ad 21 f1 df			ld hl, baseram 
a8b0				;ld hl, baseusermem 
a8b0			 
a8b0 e5			push hl   ; sacreifical push 
a8b1			 
a8b1			.ldouscanm: 
a8b1 e1			pop hl 
a8b2			.ldouscan: 
a8b2			if DEBUG_FORTH_WORDS 
a8b2				DMARK "LSs" 
a8b2 f5				push af  
a8b3 3a c7 a8			ld a, (.dmark)  
a8b6 32 65 ee			ld (debug_mark),a  
a8b9 3a c8 a8			ld a, (.dmark+1)  
a8bc 32 66 ee			ld (debug_mark+1),a  
a8bf 3a c9 a8			ld a, (.dmark+2)  
a8c2 32 67 ee			ld (debug_mark+2),a  
a8c5 18 03			jr .pastdmark  
a8c7 ..			.dmark: db "LSs"  
a8ca f1			.pastdmark: pop af  
a8cb			endm  
# End of macro DMARK
a8cb				CALLMONITOR 
a8cb cd 6f ee			call debug_vector  
a8ce				endm  
# End of macro CALLMONITOR
a8ce			endif 
a8ce			; skip dict stub 
a8ce cd b3 9f			call forth_tok_next 
a8d1			 
a8d1			 
a8d1			; while we have words to look for 
a8d1			 
a8d1 7e			ld a, (hl)      
a8d2			if DEBUG_FORTH_WORDS 
a8d2				DMARK "LSk" 
a8d2 f5				push af  
a8d3 3a e7 a8			ld a, (.dmark)  
a8d6 32 65 ee			ld (debug_mark),a  
a8d9 3a e8 a8			ld a, (.dmark+1)  
a8dc 32 66 ee			ld (debug_mark+1),a  
a8df 3a e9 a8			ld a, (.dmark+2)  
a8e2 32 67 ee			ld (debug_mark+2),a  
a8e5 18 03			jr .pastdmark  
a8e7 ..			.dmark: db "LSk"  
a8ea f1			.pastdmark: pop af  
a8eb			endm  
# End of macro DMARK
a8eb				CALLMONITOR 
a8eb cd 6f ee			call debug_vector  
a8ee				endm  
# End of macro CALLMONITOR
a8ee			endif 
a8ee				;cp WORD_SYS_END 
a8ee				;jp z, .lunotfound 
a8ee			 
a8ee					; if we hit non uwords then gone too far 
a8ee fe 01				cp WORD_SYS_UWORD 
a8f0 c2 2e aa				jp nz, .lunotfound 
a8f3			 
a8f3				if DEBUG_FORTH_WORDS 
a8f3					DMARK "LSu" 
a8f3 f5				push af  
a8f4 3a 08 a9			ld a, (.dmark)  
a8f7 32 65 ee			ld (debug_mark),a  
a8fa 3a 09 a9			ld a, (.dmark+1)  
a8fd 32 66 ee			ld (debug_mark+1),a  
a900 3a 0a a9			ld a, (.dmark+2)  
a903 32 67 ee			ld (debug_mark+2),a  
a906 18 03			jr .pastdmark  
a908 ..			.dmark: db "LSu"  
a90b f1			.pastdmark: pop af  
a90c			endm  
# End of macro DMARK
a90c					CALLMONITOR 
a90c cd 6f ee			call debug_vector  
a90f				endm  
# End of macro CALLMONITOR
a90f				endif 
a90f			 
a90f					; found a uword but is it the one we want... 
a90f			 
a90f c5					push bc     ; uword to find is on bc 
a910 d1					pop de 
a911			 
a911 e5					push hl  ; to save the ptr 
a912			 
a912					; skip opcode 
a912 23					inc hl  
a913					; skip next ptr 
a913 23					inc hl  
a914 23					inc hl 
a915					; skip len 
a915 23					inc hl 
a916			 
a916				if DEBUG_FORTH_WORDS 
a916					DMARK "LSc" 
a916 f5				push af  
a917 3a 2b a9			ld a, (.dmark)  
a91a 32 65 ee			ld (debug_mark),a  
a91d 3a 2c a9			ld a, (.dmark+1)  
a920 32 66 ee			ld (debug_mark+1),a  
a923 3a 2d a9			ld a, (.dmark+2)  
a926 32 67 ee			ld (debug_mark+2),a  
a929 18 03			jr .pastdmark  
a92b ..			.dmark: db "LSc"  
a92e f1			.pastdmark: pop af  
a92f			endm  
# End of macro DMARK
a92f					CALLMONITOR 
a92f cd 6f ee			call debug_vector  
a932				endm  
# End of macro CALLMONITOR
a932				endif 
a932			; was exiting on the shorter of the words. swap and test is in favour of the longer word. 
a932			; ie. If WOO is defined first and then WO. Couldnt list WO. 
a932			; Nope that has gone the other way. It needs to be exact not on first zero 
a932			;		call strcmp 
a932 c5					push bc 
a933 cd 95 90				call StrictStrCmp 
a936 c1					pop bc 
a937 c2 b1 a8				jp nz, .ldouscanm 
a93a				 
a93a			 
a93a			 
a93a					; we have a uword so push its name to the stack 
a93a			 
a93a			;	   	push hl  ; save so we can move to next dict block 
a93a e1			pop hl 
a93b			 
a93b				if DEBUG_FORTH_WORDS 
a93b					DMARK "LSm" 
a93b f5				push af  
a93c 3a 50 a9			ld a, (.dmark)  
a93f 32 65 ee			ld (debug_mark),a  
a942 3a 51 a9			ld a, (.dmark+1)  
a945 32 66 ee			ld (debug_mark+1),a  
a948 3a 52 a9			ld a, (.dmark+2)  
a94b 32 67 ee			ld (debug_mark+2),a  
a94e 18 03			jr .pastdmark  
a950 ..			.dmark: db "LSm"  
a953 f1			.pastdmark: pop af  
a954			endm  
# End of macro DMARK
a954					CALLMONITOR 
a954 cd 6f ee			call debug_vector  
a957				endm  
# End of macro CALLMONITOR
a957				endif 
a957			 
a957					; skip opcode 
a957 23					inc hl  
a958					; skip next ptr 
a958 23					inc hl  
a959 23					inc hl 
a95a					; skip len 
a95a 7e					ld a, (hl)   ; save length to add 
a95b				if DEBUG_FORTH_WORDS 
a95b					DMARK "LS2" 
a95b f5				push af  
a95c 3a 70 a9			ld a, (.dmark)  
a95f 32 65 ee			ld (debug_mark),a  
a962 3a 71 a9			ld a, (.dmark+1)  
a965 32 66 ee			ld (debug_mark+1),a  
a968 3a 72 a9			ld a, (.dmark+2)  
a96b 32 67 ee			ld (debug_mark+2),a  
a96e 18 03			jr .pastdmark  
a970 ..			.dmark: db "LS2"  
a973 f1			.pastdmark: pop af  
a974			endm  
# End of macro DMARK
a974					CALLMONITOR 
a974 cd 6f ee			call debug_vector  
a977				endm  
# End of macro CALLMONITOR
a977				endif 
a977			 
a977					; save this location 
a977				 
a977 e5					push hl 
a978			 
a978 23					inc hl 
a979 11 bd e2				ld de, scratch+2 
a97c 4f					ld c, a 
a97d 06 00				ld b, 0 
a97f			 
a97f				if DEBUG_FORTH_WORDS 
a97f					DMARK "LSn" 
a97f f5				push af  
a980 3a 94 a9			ld a, (.dmark)  
a983 32 65 ee			ld (debug_mark),a  
a986 3a 95 a9			ld a, (.dmark+1)  
a989 32 66 ee			ld (debug_mark+1),a  
a98c 3a 96 a9			ld a, (.dmark+2)  
a98f 32 67 ee			ld (debug_mark+2),a  
a992 18 03			jr .pastdmark  
a994 ..			.dmark: db "LSn"  
a997 f1			.pastdmark: pop af  
a998			endm  
# End of macro DMARK
a998					CALLMONITOR 
a998 cd 6f ee			call debug_vector  
a99b				endm  
# End of macro CALLMONITOR
a99b				endif 
a99b			 
a99b					; copy uword name to scratch 
a99b			 
a99b			;		ldir 
a99b			.licplw:	; copy uword name to scratch converting to lower case as we go 
a99b ed a0				ldi 
a99d 1b					dec de 
a99e 1a					ld a, (de) 
a99f cd 68 8f				call to_lower 
a9a2 12					ld (de),a 
a9a3 13					inc de 
a9a4 3e 00				ld a, 0 
a9a6 b9					cp c 
a9a7 20 f2				jr nz, .licplw 
a9a9			 
a9a9			 
a9a9			 
a9a9 1b					dec de 
a9aa 3e 20				ld a, ' '    ; change null to space 
a9ac 12					ld (de), a 
a9ad			 
a9ad 13					inc de 
a9ae			 
a9ae d5					push de 
a9af c1					pop bc     ; move scratch pointer to end of word name and save it 
a9b0			 
a9b0 e1					pop hl 
a9b1 7e					ld a, (hl) 
a9b2					;inc hl 
a9b2					; skip word string 
a9b2 cd ea 8c				call addatohl 
a9b5			 
a9b5 23					inc hl 
a9b6			 
a9b6				if DEBUG_FORTH_WORDS 
a9b6					DMARK "LS3" 
a9b6 f5				push af  
a9b7 3a cb a9			ld a, (.dmark)  
a9ba 32 65 ee			ld (debug_mark),a  
a9bd 3a cc a9			ld a, (.dmark+1)  
a9c0 32 66 ee			ld (debug_mark+1),a  
a9c3 3a cd a9			ld a, (.dmark+2)  
a9c6 32 67 ee			ld (debug_mark+2),a  
a9c9 18 03			jr .pastdmark  
a9cb ..			.dmark: db "LS3"  
a9ce f1			.pastdmark: pop af  
a9cf			endm  
# End of macro DMARK
a9cf					CALLMONITOR 
a9cf cd 6f ee			call debug_vector  
a9d2				endm  
# End of macro CALLMONITOR
a9d2				endif 
a9d2					; should now be at the start of the machine code to setup the eval of the uword 
a9d2					; now locate the ptr to the string defintion 
a9d2			 
a9d2					; skip ld hl, 
a9d2					; then load the ptr 
a9d2			; TODO use get from hl ptr 
a9d2 23					inc hl 
a9d3 5e					ld e, (hl) 
a9d4 23					inc hl 
a9d5 56					ld d, (hl) 
a9d6 eb					ex de, hl 
a9d7			 
a9d7			 
a9d7				if DEBUG_FORTH_WORDS 
a9d7					DMARK "LSt" 
a9d7 f5				push af  
a9d8 3a ec a9			ld a, (.dmark)  
a9db 32 65 ee			ld (debug_mark),a  
a9de 3a ed a9			ld a, (.dmark+1)  
a9e1 32 66 ee			ld (debug_mark+1),a  
a9e4 3a ee a9			ld a, (.dmark+2)  
a9e7 32 67 ee			ld (debug_mark+2),a  
a9ea 18 03			jr .pastdmark  
a9ec ..			.dmark: db "LSt"  
a9ef f1			.pastdmark: pop af  
a9f0			endm  
# End of macro DMARK
a9f0					CALLMONITOR 
a9f0 cd 6f ee			call debug_vector  
a9f3				endm  
# End of macro CALLMONITOR
a9f3				endif 
a9f3			 
a9f3			; cant push right now due to tokenised strings  
a9f3			 
a9f3			; get the destination of where to copy this definition to. 
a9f3			 
a9f3 c5					push bc 
a9f4 d1					pop de 
a9f5			 
a9f5 7e			.listl:         ld a,(hl) 
a9f6 fe 00				cp 0 
a9f8 28 09				jr z, .lreplsp     ; replace zero with space 
a9fa					;cp FORTH_END_BUFFER 
a9fa fe 3b				cp ';'    ; No end buffer flag but the ';' will be a good sign of the end of definition 
a9fc 28 0a				jr z, .listdone    ; at end of uword defination to close of scratch and finish 
a9fe				 
a9fe					; just copy this char as is then 
a9fe			 
a9fe 12					ld (de), a 
a9ff			 
a9ff 23			.listnxt:	inc hl 
aa00 13					inc de 
aa01 18 f2				jr .listl 
aa03			 
aa03 3e 20		.lreplsp:	ld a,' ' 
aa05 12					ld (de), a 
aa06 18 f7				jr .listnxt 
aa08			 
aa08			; close up uword def 
aa08			 
aa08			.listdone: 
aa08 12					ld (de), a 
aa09 13					inc de 
aa0a 3e 00				ld a, 0 
aa0c 12					ld (de), a 
aa0d			 
aa0d			; now have def so clean up and push to stack 
aa0d			 
aa0d 21 bb e2				ld hl, scratch 
aa10				if DEBUG_FORTH_WORDS 
aa10					DMARK "Ltp" 
aa10 f5				push af  
aa11 3a 25 aa			ld a, (.dmark)  
aa14 32 65 ee			ld (debug_mark),a  
aa17 3a 26 aa			ld a, (.dmark+1)  
aa1a 32 66 ee			ld (debug_mark+1),a  
aa1d 3a 27 aa			ld a, (.dmark+2)  
aa20 32 67 ee			ld (debug_mark+2),a  
aa23 18 03			jr .pastdmark  
aa25 ..			.dmark: db "Ltp"  
aa28 f1			.pastdmark: pop af  
aa29			endm  
# End of macro DMARK
aa29					CALLMONITOR 
aa29 cd 6f ee			call debug_vector  
aa2c				endm  
# End of macro CALLMONITOR
aa2c				endif 
aa2c			 
aa2c 18 1f			jr .listpush 
aa2e			 
aa2e			;.lnuword:	pop hl 
aa2e			;		call forth_tok_next 
aa2e			;		jp .ldouscan  
aa2e			 
aa2e			.lunotfound:		  
aa2e			 
aa2e				if DEBUG_FORTH_WORDS 
aa2e					DMARK "LSn" 
aa2e f5				push af  
aa2f 3a 43 aa			ld a, (.dmark)  
aa32 32 65 ee			ld (debug_mark),a  
aa35 3a 44 aa			ld a, (.dmark+1)  
aa38 32 66 ee			ld (debug_mark+1),a  
aa3b 3a 45 aa			ld a, (.dmark+2)  
aa3e 32 67 ee			ld (debug_mark+2),a  
aa41 18 03			jr .pastdmark  
aa43 ..			.dmark: db "LSn"  
aa46 f1			.pastdmark: pop af  
aa47			endm  
# End of macro DMARK
aa47					CALLMONITOR 
aa47 cd 6f ee			call debug_vector  
aa4a				endm  
# End of macro CALLMONITOR
aa4a				endif 
aa4a			 
aa4a					 
aa4a			;		FORTH_DSP_POP 
aa4a			;		ld hl, .luno 
aa4a			 
aa4a					NEXTW			 
aa4a c3 76 9e			jp macro_next 
aa4d				endm 
# End of macro NEXTW
aa4d			 
aa4d			.listpush: 
aa4d				if DEBUG_FORTH_WORDS 
aa4d					DMARK "LS>" 
aa4d f5				push af  
aa4e 3a 62 aa			ld a, (.dmark)  
aa51 32 65 ee			ld (debug_mark),a  
aa54 3a 63 aa			ld a, (.dmark+1)  
aa57 32 66 ee			ld (debug_mark+1),a  
aa5a 3a 64 aa			ld a, (.dmark+2)  
aa5d 32 67 ee			ld (debug_mark+2),a  
aa60 18 03			jr .pastdmark  
aa62 ..			.dmark: db "LS>"  
aa65 f1			.pastdmark: pop af  
aa66			endm  
# End of macro DMARK
aa66					CALLMONITOR 
aa66 cd 6f ee			call debug_vector  
aa69				endm  
# End of macro CALLMONITOR
aa69				endif 
aa69 cd f3 9a				call forth_push_str 
aa6c			 
aa6c			 
aa6c			 
aa6c					NEXTW 
aa6c c3 76 9e			jp macro_next 
aa6f				endm 
# End of macro NEXTW
aa6f			 
aa6f			;.luno:    db "Word not found",0 
aa6f			 
aa6f			 
aa6f			 
aa6f			 
aa6f			 
aa6f			;		push hl   ; save pointer to start of uword def string 
aa6f			; 
aa6f			;; look for FORTH_EOL_LINE 
aa6f			;		ld a, FORTH_END_BUFFER 
aa6f			;		call strlent 
aa6f			; 
aa6f			;		inc hl		 ; space for coln def 
aa6f			;		inc hl 
aa6f			;		inc hl          ; space for terms 
aa6f			;		inc hl 
aa6f			; 
aa6f			;		ld a, 20   ; TODO get actual length 
aa6f			;		call addatohl    ; include a random amount of room for the uword name 
aa6f			; 
aa6f			;		 
aa6f			;	if DEBUG_FORTH_WORDS 
aa6f			;		DMARK "Lt1" 
aa6f			;		CALLMONITOR 
aa6f			;	endif 
aa6f			;		 
aa6f			; 
aa6f			;; malloc space for the string because we cant change it 
aa6f			; 
aa6f			;		call malloc 
aa6f			;	if DEBUG_FORTH_MALLOC_GUARD 
aa6f			;		push af 
aa6f			;		call ishlzero 
aa6f			;		pop af 
aa6f			;		 
aa6f			;		call z,malloc_error 
aa6f			;	endif 
aa6f			; 
aa6f			;	if DEBUG_FORTH_WORDS 
aa6f			;		DMARK "Lt2" 
aa6f			;		CALLMONITOR 
aa6f			;	endif 
aa6f			;		pop de 
aa6f			;		push hl    ; push the malloc to release later 
aa6f			;		push hl   ;  push back a copy for the later stack push 
aa6f			;		 
aa6f			;; copy the string swapping out the zero terms for spaces 
aa6f			; 
aa6f			;		; de has our source 
aa6f			;		; hl has our dest 
aa6f			; 
aa6f			;; add the coln def 
aa6f			; 
aa6f			;		ld a, ':' 
aa6f			;		ld (hl), a 
aa6f			;		inc hl 
aa6f			;		ld a, ' ' 
aa6f			;		ld (hl), a 
aa6f			;		inc hl 
aa6f			; 
aa6f			;; add the uname word 
aa6f			;		push de   ; save our string for now 
aa6f			;		ex de, hl 
aa6f			; 
aa6f			;		FORTH_DSP_VALUE 
aa6f			;		;v5 FORTH_DSP_VALUE 
aa6f			; 
aa6f			;		inc hl   ; skip type but we know by now this is OK 
aa6f			; 
aa6f			;.luword:	ld a,(hl) 
aa6f			;		cp 0 
aa6f			;		jr z, .luword2 
aa6f			;		ld (de), a 
aa6f			;		inc de 
aa6f			;		inc hl 
aa6f			;		jr .luword 
aa6f			; 
aa6f			;.luword2:	ld a, ' ' 
aa6f			;		ld (de), a 
aa6f			;;		inc hl 
aa6f			;;		inc de 
aa6f			;;		ld (de), a 
aa6f			;;		inc hl 
aa6f			;		inc de 
aa6f			; 
aa6f			;		ex de, hl 
aa6f			;		pop de 
aa6f			;		 
aa6f			;		 
aa6f			; 
aa6f			;; detoken that string and copy it 
aa6f			; 
aa6f			;	if DEBUG_FORTH_WORDS 
aa6f			;		DMARK "Lt2" 
aa6f			;		CALLMONITOR 
aa6f			;	endif 
aa6f			;.ldetok:	ld a, (de) 
aa6f			;		cp FORTH_END_BUFFER 
aa6f			;		jr z, .ldetokend 
aa6f			;		; swap out any zero term for space 
aa6f			;		cp 0 
aa6f			;		jr nz, .ldetoknext 
aa6f			;		ld a, ' ' 
aa6f			; 
aa6f			;	if DEBUG_FORTH_WORDS 
aa6f			;		DMARK "LtS" 
aa6f			;		CALLMONITOR 
aa6f			;	endif 
aa6f			;.ldetoknext:	ld (hl), a 
aa6f			;		inc de 
aa6f			;		inc hl 
aa6f			;		jr .ldetok 
aa6f			; 
aa6f			;.ldetokend:	ld a, 0    ; replace forth eol with string term for pushing 
aa6f			;		ld (hl), a  
aa6f			; 
aa6f			;; free that temp malloc 
aa6f			; 
aa6f			;		pop hl    
aa6f			; 
aa6f			;	if DEBUG_FORTH_WORDS 
aa6f			;		DMARK "Lt4" 
aa6f			;		CALLMONITOR 
aa6f			;	endif 
aa6f			;		call forth_apushstrhl 
aa6f			; 
aa6f			;		; get rid of temp malloc area 
aa6f			; 
aa6f			;		pop hl 
aa6f			;		call free 
aa6f			; 
aa6f			;		jr .ludone 
aa6f			; 
aa6f			;.lnuword:	pop hl 
aa6f			;		call forth_tok_next 
aa6f			;		jp .ldouscan  
aa6f			; 
aa6f			;.ludone:		 pop hl 
aa6f			; 
aa6f					NEXTW 
aa6f c3 76 9e			jp macro_next 
aa72				endm 
# End of macro NEXTW
aa72			 
aa72			.FORGET: 
aa72				CWHEAD .NOP 73 "FORGET" 6 WORD_FLAG_CODE 
aa72 5d				db WORD_SYS_CORE+73             
aa73 eb aa			dw .NOP            
aa75 07				db 6 + 1 
aa76 .. 00			db "FORGET",0              
aa7d				endm 
# End of macro CWHEAD
aa7d			; | FORGET ( uword -- )    Forget the uword on TOS | DONE 
aa7d			; | | Will flag the word's op code to be deleted as well as replace the first char of the word with '_'. Quoted uword name must be in caps. 
aa7d			; | |  
aa7d			; | | e.g. "MORE" forget 
aa7d					if DEBUG_FORTH_WORDS_KEY 
aa7d						DMARK "FRG" 
aa7d f5				push af  
aa7e 3a 92 aa			ld a, (.dmark)  
aa81 32 65 ee			ld (debug_mark),a  
aa84 3a 93 aa			ld a, (.dmark+1)  
aa87 32 66 ee			ld (debug_mark+1),a  
aa8a 3a 94 aa			ld a, (.dmark+2)  
aa8d 32 67 ee			ld (debug_mark+2),a  
aa90 18 03			jr .pastdmark  
aa92 ..			.dmark: db "FRG"  
aa95 f1			.pastdmark: pop af  
aa96			endm  
# End of macro DMARK
aa96						CALLMONITOR 
aa96 cd 6f ee			call debug_vector  
aa99				endm  
# End of macro CALLMONITOR
aa99					endif 
aa99			 
aa99				; find uword 
aa99			        ; update start of word with "_" 
aa99				; replace uword with deleted flag 
aa99			 
aa99			 
aa99			;	if DEBUG_FORTH_WORDS 
aa99			;		DMARK "FOG" 
aa99			;		CALLMONITOR 
aa99			;	endif 
aa99			 
aa99			 
aa99					; Get ptr to the word we need to look up 
aa99			 
aa99					FORTH_DSP_VALUEHL 
aa99 cd 8a 9c			call macro_dsp_valuehl 
aa9c				endm 
# End of macro FORTH_DSP_VALUEHL
aa9c					;v5 FORTH_DSP_VALUE 
aa9c				; TODO type check 
aa9c			;		inc hl    ; Skip type check  
aa9c e5					push hl 
aa9d c1					pop bc 
aa9e			;		ex de, hl    ; put into DE 
aa9e			 
aa9e			 
aa9e 21 f1 df				ld hl, baseram 
aaa1					;ld hl, baseusermem 
aaa1			 
aaa1				; skip dict stub 
aaa1			;	call forth_tok_next 
aaa1 e5			push hl   ; sacreifical push 
aaa2			 
aaa2			.fldouscanm: 
aaa2 e1				pop hl 
aaa3			.fldouscan: 
aaa3			;	if DEBUG_FORTH_WORDS 
aaa3			;		DMARK "LSs" 
aaa3			;		CALLMONITOR 
aaa3			;	endif 
aaa3				; skip dict stub 
aaa3 cd b3 9f				call forth_tok_next 
aaa6			 
aaa6			 
aaa6			; while we have words to look for 
aaa6			 
aaa6 7e				ld a, (hl)      
aaa7			;	if DEBUG_FORTH_WORDS 
aaa7			;		DMARK "LSk" 
aaa7			;		CALLMONITOR 
aaa7			;	endif 
aaa7 fe 00				cp WORD_SYS_END 
aaa9 ca e5 aa				jp z, .flunotfound 
aaac fe 01				cp WORD_SYS_UWORD 
aaae c2 a3 aa				jp nz, .fldouscan 
aab1			 
aab1			;	if DEBUG_FORTH_WORDS 
aab1			;		DMARK "LSu" 
aab1			;		CALLMONITOR 
aab1			;	endif 
aab1			 
aab1					; found a uword but is it the one we want... 
aab1			 
aab1 c5					push bc     ; uword to find is on bc 
aab2 d1					pop de 
aab3			 
aab3 e5					push hl  ; to save the ptr 
aab4			 
aab4					; skip opcode 
aab4 23					inc hl  
aab5					; skip next ptr 
aab5 23					inc hl  
aab6 23					inc hl 
aab7					; skip len 
aab7 23					inc hl 
aab8			 
aab8			;	if DEBUG_FORTH_WORDS 
aab8			;		DMARK "LSc" 
aab8			;		CALLMONITOR 
aab8			;	endif 
aab8 cd 88 90				call strcmp 
aabb c2 a2 aa				jp nz, .fldouscanm 
aabe			; 
aabe			; 
aabe			;; while we have words to look for 
aabe			; 
aabe			;.fdouscan:	ld a, (hl)      
aabe			;	if DEBUG_FORTH_WORDS 
aabe			;		DMARK "LSs" 
aabe			;		CALLMONITOR 
aabe			;	endif 
aabe			;		cp WORD_SYS_END 
aabe			;		jp z, .fudone 
aabe			;		cp WORD_SYS_UWORD 
aabe			;		jp nz, .fnuword 
aabe			; 
aabe			;	if DEBUG_FORTH_WORDS 
aabe			;		DMARK "FGu" 
aabe			;		CALLMONITOR 
aabe			;	endif 
aabe			; 
aabe			;		; found a uword but is it the one we want... 
aabe			; 
aabe			; 
aabe			;	        pop de   ; get back the dsp name 
aabe			;		push de 
aabe			; 
aabe			;		push hl  ; to save the ptr 
aabe			; 
aabe			;		; skip opcode 
aabe			;		inc hl  
aabe			;		; skip next ptr 
aabe			;		inc hl  
aabe			;		inc hl 
aabe			;		; skip len 
aabe			;		inc hl 
aabe			; 
aabe			;	if DEBUG_FORTH_WORDS 
aabe			;		DMARK "FGc" 
aabe			;		CALLMONITOR 
aabe			;	endif 
aabe			;		call strcmp 
aabe			;		jp nz, .fnuword 
aabe			 
aabe			 
aabe e1			pop hl 
aabf			 
aabf				 
aabf				if DEBUG_FORTH_WORDS 
aabf					DMARK "FGm" 
aabf f5				push af  
aac0 3a d4 aa			ld a, (.dmark)  
aac3 32 65 ee			ld (debug_mark),a  
aac6 3a d5 aa			ld a, (.dmark+1)  
aac9 32 66 ee			ld (debug_mark+1),a  
aacc 3a d6 aa			ld a, (.dmark+2)  
aacf 32 67 ee			ld (debug_mark+2),a  
aad2 18 03			jr .pastdmark  
aad4 ..			.dmark: db "FGm"  
aad7 f1			.pastdmark: pop af  
aad8			endm  
# End of macro DMARK
aad8					CALLMONITOR 
aad8 cd 6f ee			call debug_vector  
aadb				endm  
# End of macro CALLMONITOR
aadb				endif 
aadb			 
aadb			 
aadb			 
aadb					; we have a uword so push its name to the stack 
aadb			 
aadb			;	   	push hl  ; save so we can move to next dict block 
aadb			;pop hl 
aadb			 
aadb					; update opcode to deleted 
aadb 3e 03				ld a, WORD_SYS_DELETED 
aadd 77					ld (hl), a 
aade			 
aade 23					inc hl  
aadf					; skip next ptr 
aadf 23					inc hl  
aae0 23					inc hl 
aae1					; skip len 
aae1 23					inc hl 
aae2			 
aae2					; TODO change parser to skip deleted words but for now mark it out 
aae2 3e 5f				ld a, "_" 
aae4 77					ld  (hl),a 
aae5			 
aae5			;		jr .fudone 
aae5			; 
aae5			;.fnuword:	pop hl 
aae5			;		call forth_tok_next 
aae5			;		jp .fdouscan  
aae5			 
aae5			.flunotfound:		  
aae5			 
aae5			 
aae5					 
aae5					FORTH_DSP_POP 
aae5 cd 42 9d			call macro_forth_dsp_pop 
aae8				endm 
# End of macro FORTH_DSP_POP
aae8			;		ld hl, .luno 
aae8			;.fudone:		 pop hl 
aae8					NEXTW 
aae8 c3 76 9e			jp macro_next 
aaeb				endm 
# End of macro NEXTW
aaeb			.NOP: 
aaeb				CWHEAD .COMO 77 "NOP" 3 WORD_FLAG_CODE 
aaeb 61				db WORD_SYS_CORE+77             
aaec 12 ab			dw .COMO            
aaee 04				db 3 + 1 
aaef .. 00			db "NOP",0              
aaf3				endm 
# End of macro CWHEAD
aaf3			; | NOP (  --  ) Do nothing | DONE 
aaf3					if DEBUG_FORTH_WORDS_KEY 
aaf3						DMARK "NOP" 
aaf3 f5				push af  
aaf4 3a 08 ab			ld a, (.dmark)  
aaf7 32 65 ee			ld (debug_mark),a  
aafa 3a 09 ab			ld a, (.dmark+1)  
aafd 32 66 ee			ld (debug_mark+1),a  
ab00 3a 0a ab			ld a, (.dmark+2)  
ab03 32 67 ee			ld (debug_mark+2),a  
ab06 18 03			jr .pastdmark  
ab08 ..			.dmark: db "NOP"  
ab0b f1			.pastdmark: pop af  
ab0c			endm  
# End of macro DMARK
ab0c						CALLMONITOR 
ab0c cd 6f ee			call debug_vector  
ab0f				endm  
# End of macro CALLMONITOR
ab0f					endif 
ab0f				       NEXTW 
ab0f c3 76 9e			jp macro_next 
ab12				endm 
# End of macro NEXTW
ab12			.COMO: 
ab12				CWHEAD .COMC 90 "(" 1 WORD_FLAG_CODE 
ab12 6e				db WORD_SYS_CORE+90             
ab13 64 ab			dw .COMC            
ab15 02				db 1 + 1 
ab16 .. 00			db "(",0              
ab18				endm 
# End of macro CWHEAD
ab18			; | ( ( -- )  Start of comment | DONE 
ab18			 
ab18			 
ab18 2a bc e5				ld hl, ( os_tok_ptr) 
ab1b 11 5f ab			ld de, .closepar 
ab1e					 
ab1e					if DEBUG_FORTH_WORDS 
ab1e						DMARK ").." 
ab1e f5				push af  
ab1f 3a 33 ab			ld a, (.dmark)  
ab22 32 65 ee			ld (debug_mark),a  
ab25 3a 34 ab			ld a, (.dmark+1)  
ab28 32 66 ee			ld (debug_mark+1),a  
ab2b 3a 35 ab			ld a, (.dmark+2)  
ab2e 32 67 ee			ld (debug_mark+2),a  
ab31 18 03			jr .pastdmark  
ab33 ..			.dmark: db ").."  
ab36 f1			.pastdmark: pop af  
ab37			endm  
# End of macro DMARK
ab37						CALLMONITOR 
ab37 cd 6f ee			call debug_vector  
ab3a				endm  
# End of macro CALLMONITOR
ab3a					endif 
ab3a cd 7d 9f			call findnexttok  
ab3d			 
ab3d					if DEBUG_FORTH_WORDS 
ab3d						DMARK "IF5" 
ab3d f5				push af  
ab3e 3a 52 ab			ld a, (.dmark)  
ab41 32 65 ee			ld (debug_mark),a  
ab44 3a 53 ab			ld a, (.dmark+1)  
ab47 32 66 ee			ld (debug_mark+1),a  
ab4a 3a 54 ab			ld a, (.dmark+2)  
ab4d 32 67 ee			ld (debug_mark+2),a  
ab50 18 03			jr .pastdmark  
ab52 ..			.dmark: db "IF5"  
ab55 f1			.pastdmark: pop af  
ab56			endm  
# End of macro DMARK
ab56						CALLMONITOR 
ab56 cd 6f ee			call debug_vector  
ab59				endm  
# End of macro CALLMONITOR
ab59					endif 
ab59				; replace below with ) exec using tok_ptr 
ab59 22 bc e5			ld (os_tok_ptr), hl 
ab5c c3 ff 9e			jp exec1 
ab5f			 
ab5f .. 00			.closepar:   db ")",0 
ab61			 
ab61				       NEXTW 
ab61 c3 76 9e			jp macro_next 
ab64				endm 
# End of macro NEXTW
ab64			.COMC: 
ab64				CWHEAD .SCRATCH 91 ")" 1 WORD_FLAG_CODE 
ab64 6f				db WORD_SYS_CORE+91             
ab65 6d ab			dw .SCRATCH            
ab67 02				db 1 + 1 
ab68 .. 00			db ")",0              
ab6a				endm 
# End of macro CWHEAD
ab6a			; | ) ( -- )  End of comment |  DONE  
ab6a				       NEXTW 
ab6a c3 76 9e			jp macro_next 
ab6d				endm 
# End of macro NEXTW
ab6d			 
ab6d			.SCRATCH: 
ab6d				CWHEAD .INC 91 "SCRATCH" 7 WORD_FLAG_CODE 
ab6d 6f				db WORD_SYS_CORE+91             
ab6e a8 ab			dw .INC            
ab70 08				db 7 + 1 
ab71 .. 00			db "SCRATCH",0              
ab79				endm 
# End of macro CWHEAD
ab79			; | SCRATCH ( u -- addr ) Pushes address of offset u to stack | DONE 
ab79			; | | The scratch area provides 32 word array. Can be used as single byte or as a word by passing the offset on stack. Pushes the resulting address to stack.  
ab79			; | | When used with the direct storage writing/malloc and the !@ or word versions it is possible to construct an expanded and flexible variable system 
ab79			; | |  
ab79			; | | e.g.    : score $00 scratch ; 
ab79			; | |  
ab79			; | | $00 score ! 
ab79			; | | $01 score +! 
ab79			; | |  
ab79			; | | e.g.   : varword $0a scratch ;  
ab79			; | | 
ab79			; | | $8000 varword ! 
ab79					if DEBUG_FORTH_WORDS_KEY 
ab79						DMARK "SCR" 
ab79 f5				push af  
ab7a 3a 8e ab			ld a, (.dmark)  
ab7d 32 65 ee			ld (debug_mark),a  
ab80 3a 8f ab			ld a, (.dmark+1)  
ab83 32 66 ee			ld (debug_mark+1),a  
ab86 3a 90 ab			ld a, (.dmark+2)  
ab89 32 67 ee			ld (debug_mark+2),a  
ab8c 18 03			jr .pastdmark  
ab8e ..			.dmark: db "SCR"  
ab91 f1			.pastdmark: pop af  
ab92			endm  
# End of macro DMARK
ab92						CALLMONITOR 
ab92 cd 6f ee			call debug_vector  
ab95				endm  
# End of macro CALLMONITOR
ab95					endif 
ab95			 
ab95					FORTH_DSP_VALUEHL 
ab95 cd 8a 9c			call macro_dsp_valuehl 
ab98				endm 
# End of macro FORTH_DSP_VALUEHL
ab98				 
ab98					FORTH_DSP_POP 
ab98 cd 42 9d			call macro_forth_dsp_pop 
ab9b				endm 
# End of macro FORTH_DSP_POP
ab9b			 
ab9b 7d					ld a, l 
ab9c 21 e0 e7				ld hl, os_var_array 
ab9f cd ea 8c				call addatohl 
aba2			 
aba2 cd 85 9a				call forth_push_numhl 
aba5			 
aba5				       NEXTW 
aba5 c3 76 9e			jp macro_next 
aba8				endm 
# End of macro NEXTW
aba8			 
aba8			.INC: 
aba8				CWHEAD .DEC 91 "+!" 2 WORD_FLAG_CODE 
aba8 6f				db WORD_SYS_CORE+91             
aba9 fe ab			dw .DEC            
abab 03				db 2 + 1 
abac .. 00			db "+!",0              
abaf				endm 
# End of macro CWHEAD
abaf			; | +! ( u a -- )  Increment byte at address a by the value u | DONE 
abaf					if DEBUG_FORTH_WORDS_KEY 
abaf						DMARK "+s_" 
abaf f5				push af  
abb0 3a c4 ab			ld a, (.dmark)  
abb3 32 65 ee			ld (debug_mark),a  
abb6 3a c5 ab			ld a, (.dmark+1)  
abb9 32 66 ee			ld (debug_mark+1),a  
abbc 3a c6 ab			ld a, (.dmark+2)  
abbf 32 67 ee			ld (debug_mark+2),a  
abc2 18 03			jr .pastdmark  
abc4 ..			.dmark: db "+s_"  
abc7 f1			.pastdmark: pop af  
abc8			endm  
# End of macro DMARK
abc8						CALLMONITOR 
abc8 cd 6f ee			call debug_vector  
abcb				endm  
# End of macro CALLMONITOR
abcb					endif 
abcb			 
abcb					FORTH_DSP_VALUEHL 
abcb cd 8a 9c			call macro_dsp_valuehl 
abce				endm 
# End of macro FORTH_DSP_VALUEHL
abce			 
abce e5					push hl   ; save address 
abcf			 
abcf					FORTH_DSP_POP 
abcf cd 42 9d			call macro_forth_dsp_pop 
abd2				endm 
# End of macro FORTH_DSP_POP
abd2			 
abd2					FORTH_DSP_VALUEHL 
abd2 cd 8a 9c			call macro_dsp_valuehl 
abd5				endm 
# End of macro FORTH_DSP_VALUEHL
abd5			 
abd5 e5					push hl 
abd6					FORTH_DSP_POP 
abd6 cd 42 9d			call macro_forth_dsp_pop 
abd9				endm 
# End of macro FORTH_DSP_POP
abd9 e1					pop hl 
abda			 
abda					; hl contains value to add to byte at a 
abda				 
abda eb					ex de, hl 
abdb			 
abdb e1					pop hl 
abdc			 
abdc					if DEBUG_FORTH_WORDS 
abdc						DMARK "INC" 
abdc f5				push af  
abdd 3a f1 ab			ld a, (.dmark)  
abe0 32 65 ee			ld (debug_mark),a  
abe3 3a f2 ab			ld a, (.dmark+1)  
abe6 32 66 ee			ld (debug_mark+1),a  
abe9 3a f3 ab			ld a, (.dmark+2)  
abec 32 67 ee			ld (debug_mark+2),a  
abef 18 03			jr .pastdmark  
abf1 ..			.dmark: db "INC"  
abf4 f1			.pastdmark: pop af  
abf5			endm  
# End of macro DMARK
abf5						CALLMONITOR 
abf5 cd 6f ee			call debug_vector  
abf8				endm  
# End of macro CALLMONITOR
abf8					endif 
abf8			 
abf8 7e					ld a,(hl) 
abf9 83					add e 
abfa 77					ld (hl),a 
abfb			 
abfb			 
abfb			 
abfb				       NEXTW 
abfb c3 76 9e			jp macro_next 
abfe				endm 
# End of macro NEXTW
abfe			 
abfe			.DEC: 
abfe				CWHEAD .INC2 91 "-!" 2 WORD_FLAG_CODE 
abfe 6f				db WORD_SYS_CORE+91             
abff 52 ac			dw .INC2            
ac01 03				db 2 + 1 
ac02 .. 00			db "-!",0              
ac05				endm 
# End of macro CWHEAD
ac05			; | -! ( u a -- )  Decrement byte at address a by the value u | DONE 
ac05					if DEBUG_FORTH_WORDS_KEY 
ac05						DMARK "-s_" 
ac05 f5				push af  
ac06 3a 1a ac			ld a, (.dmark)  
ac09 32 65 ee			ld (debug_mark),a  
ac0c 3a 1b ac			ld a, (.dmark+1)  
ac0f 32 66 ee			ld (debug_mark+1),a  
ac12 3a 1c ac			ld a, (.dmark+2)  
ac15 32 67 ee			ld (debug_mark+2),a  
ac18 18 03			jr .pastdmark  
ac1a ..			.dmark: db "-s_"  
ac1d f1			.pastdmark: pop af  
ac1e			endm  
# End of macro DMARK
ac1e						CALLMONITOR 
ac1e cd 6f ee			call debug_vector  
ac21				endm  
# End of macro CALLMONITOR
ac21					endif 
ac21			 
ac21					FORTH_DSP_VALUEHL 
ac21 cd 8a 9c			call macro_dsp_valuehl 
ac24				endm 
# End of macro FORTH_DSP_VALUEHL
ac24			 
ac24 e5					push hl   ; save address 
ac25			 
ac25					FORTH_DSP_POP 
ac25 cd 42 9d			call macro_forth_dsp_pop 
ac28				endm 
# End of macro FORTH_DSP_POP
ac28			 
ac28					FORTH_DSP_VALUEHL 
ac28 cd 8a 9c			call macro_dsp_valuehl 
ac2b				endm 
# End of macro FORTH_DSP_VALUEHL
ac2b			 
ac2b					; hl contains value to add to byte at a 
ac2b				 
ac2b eb					ex de, hl 
ac2c			 
ac2c e1					pop hl 
ac2d			 
ac2d					if DEBUG_FORTH_WORDS 
ac2d						DMARK "DEC" 
ac2d f5				push af  
ac2e 3a 42 ac			ld a, (.dmark)  
ac31 32 65 ee			ld (debug_mark),a  
ac34 3a 43 ac			ld a, (.dmark+1)  
ac37 32 66 ee			ld (debug_mark+1),a  
ac3a 3a 44 ac			ld a, (.dmark+2)  
ac3d 32 67 ee			ld (debug_mark+2),a  
ac40 18 03			jr .pastdmark  
ac42 ..			.dmark: db "DEC"  
ac45 f1			.pastdmark: pop af  
ac46			endm  
# End of macro DMARK
ac46						CALLMONITOR 
ac46 cd 6f ee			call debug_vector  
ac49				endm  
# End of macro CALLMONITOR
ac49					endif 
ac49			 
ac49 7e					ld a,(hl) 
ac4a 93					sub e 
ac4b 77					ld (hl),a 
ac4c			 
ac4c			 
ac4c					FORTH_DSP_POP 
ac4c cd 42 9d			call macro_forth_dsp_pop 
ac4f				endm 
# End of macro FORTH_DSP_POP
ac4f			 
ac4f				       NEXTW 
ac4f c3 76 9e			jp macro_next 
ac52				endm 
# End of macro NEXTW
ac52			 
ac52			.INC2: 
ac52				CWHEAD .DEC2 91 "+2!" 3 WORD_FLAG_CODE 
ac52 6f				db WORD_SYS_CORE+91             
ac53 ff ac			dw .DEC2            
ac55 04				db 3 + 1 
ac56 .. 00			db "+2!",0              
ac5a				endm 
# End of macro CWHEAD
ac5a			; | +2! ( u a -- )  Increment word at address a by the value u | DONE 
ac5a			 
ac5a					if DEBUG_FORTH_WORDS_KEY 
ac5a						DMARK "+2s" 
ac5a f5				push af  
ac5b 3a 6f ac			ld a, (.dmark)  
ac5e 32 65 ee			ld (debug_mark),a  
ac61 3a 70 ac			ld a, (.dmark+1)  
ac64 32 66 ee			ld (debug_mark+1),a  
ac67 3a 71 ac			ld a, (.dmark+2)  
ac6a 32 67 ee			ld (debug_mark+2),a  
ac6d 18 03			jr .pastdmark  
ac6f ..			.dmark: db "+2s"  
ac72 f1			.pastdmark: pop af  
ac73			endm  
# End of macro DMARK
ac73						CALLMONITOR 
ac73 cd 6f ee			call debug_vector  
ac76				endm  
# End of macro CALLMONITOR
ac76					endif 
ac76			 
ac76					; Address 
ac76			 
ac76					FORTH_DSP_VALUEHL 
ac76 cd 8a 9c			call macro_dsp_valuehl 
ac79				endm 
# End of macro FORTH_DSP_VALUEHL
ac79			 
ac79 e5					push hl    ; save address 
ac7a			 
ac7a					; load content into de 
ac7a			 
ac7a 5e					ld e,(hl) 
ac7b 23					inc hl 
ac7c 56					ld d, (hl) 
ac7d			 
ac7d					if DEBUG_FORTH_WORDS 
ac7d						DMARK "+2a" 
ac7d f5				push af  
ac7e 3a 92 ac			ld a, (.dmark)  
ac81 32 65 ee			ld (debug_mark),a  
ac84 3a 93 ac			ld a, (.dmark+1)  
ac87 32 66 ee			ld (debug_mark+1),a  
ac8a 3a 94 ac			ld a, (.dmark+2)  
ac8d 32 67 ee			ld (debug_mark+2),a  
ac90 18 03			jr .pastdmark  
ac92 ..			.dmark: db "+2a"  
ac95 f1			.pastdmark: pop af  
ac96			endm  
# End of macro DMARK
ac96						CALLMONITOR 
ac96 cd 6f ee			call debug_vector  
ac99				endm  
# End of macro CALLMONITOR
ac99					endif 
ac99			 
ac99					FORTH_DSP_POP 
ac99 cd 42 9d			call macro_forth_dsp_pop 
ac9c				endm 
# End of macro FORTH_DSP_POP
ac9c			 
ac9c					; Get value to add 
ac9c			 
ac9c					FORTH_DSP_VALUE 
ac9c cd 73 9c			call macro_forth_dsp_value 
ac9f				endm 
# End of macro FORTH_DSP_VALUE
ac9f			 
ac9f					if DEBUG_FORTH_WORDS 
ac9f						DMARK "+2v" 
ac9f f5				push af  
aca0 3a b4 ac			ld a, (.dmark)  
aca3 32 65 ee			ld (debug_mark),a  
aca6 3a b5 ac			ld a, (.dmark+1)  
aca9 32 66 ee			ld (debug_mark+1),a  
acac 3a b6 ac			ld a, (.dmark+2)  
acaf 32 67 ee			ld (debug_mark+2),a  
acb2 18 03			jr .pastdmark  
acb4 ..			.dmark: db "+2v"  
acb7 f1			.pastdmark: pop af  
acb8			endm  
# End of macro DMARK
acb8						CALLMONITOR 
acb8 cd 6f ee			call debug_vector  
acbb				endm  
# End of macro CALLMONITOR
acbb					endif 
acbb			 
acbb 19					add hl, de 
acbc			 
acbc					if DEBUG_FORTH_WORDS 
acbc						DMARK "+2+" 
acbc f5				push af  
acbd 3a d1 ac			ld a, (.dmark)  
acc0 32 65 ee			ld (debug_mark),a  
acc3 3a d2 ac			ld a, (.dmark+1)  
acc6 32 66 ee			ld (debug_mark+1),a  
acc9 3a d3 ac			ld a, (.dmark+2)  
accc 32 67 ee			ld (debug_mark+2),a  
accf 18 03			jr .pastdmark  
acd1 ..			.dmark: db "+2+"  
acd4 f1			.pastdmark: pop af  
acd5			endm  
# End of macro DMARK
acd5						CALLMONITOR 
acd5 cd 6f ee			call debug_vector  
acd8				endm  
# End of macro CALLMONITOR
acd8					endif 
acd8			 
acd8					; move result to de 
acd8			 
acd8 eb					ex de, hl 
acd9			 
acd9					; Address 
acd9			 
acd9 e1					pop hl 
acda			 
acda					; save it back 
acda			 
acda 73					ld (hl), e 
acdb 23					inc hl 
acdc 72					ld (hl), d 
acdd			 
acdd					if DEBUG_FORTH_WORDS 
acdd						DMARK "+2e" 
acdd f5				push af  
acde 3a f2 ac			ld a, (.dmark)  
ace1 32 65 ee			ld (debug_mark),a  
ace4 3a f3 ac			ld a, (.dmark+1)  
ace7 32 66 ee			ld (debug_mark+1),a  
acea 3a f4 ac			ld a, (.dmark+2)  
aced 32 67 ee			ld (debug_mark+2),a  
acf0 18 03			jr .pastdmark  
acf2 ..			.dmark: db "+2e"  
acf5 f1			.pastdmark: pop af  
acf6			endm  
# End of macro DMARK
acf6						CALLMONITOR 
acf6 cd 6f ee			call debug_vector  
acf9				endm  
# End of macro CALLMONITOR
acf9					endif 
acf9			 
acf9			 
acf9			 
acf9					FORTH_DSP_POP 
acf9 cd 42 9d			call macro_forth_dsp_pop 
acfc				endm 
# End of macro FORTH_DSP_POP
acfc			 
acfc			 
acfc				       NEXTW 
acfc c3 76 9e			jp macro_next 
acff				endm 
# End of macro NEXTW
acff			 
acff			.DEC2: 
acff				CWHEAD .GET2 91 "-2!" 3 WORD_FLAG_CODE 
acff 6f				db WORD_SYS_CORE+91             
ad00 ae ad			dw .GET2            
ad02 04				db 3 + 1 
ad03 .. 00			db "-2!",0              
ad07				endm 
# End of macro CWHEAD
ad07			; | -2! ( u a -- )  Decrement word at address a by the value u | DONE 
ad07			 
ad07			 
ad07					if DEBUG_FORTH_WORDS_KEY 
ad07						DMARK "-2s" 
ad07 f5				push af  
ad08 3a 1c ad			ld a, (.dmark)  
ad0b 32 65 ee			ld (debug_mark),a  
ad0e 3a 1d ad			ld a, (.dmark+1)  
ad11 32 66 ee			ld (debug_mark+1),a  
ad14 3a 1e ad			ld a, (.dmark+2)  
ad17 32 67 ee			ld (debug_mark+2),a  
ad1a 18 03			jr .pastdmark  
ad1c ..			.dmark: db "-2s"  
ad1f f1			.pastdmark: pop af  
ad20			endm  
# End of macro DMARK
ad20						CALLMONITOR 
ad20 cd 6f ee			call debug_vector  
ad23				endm  
# End of macro CALLMONITOR
ad23					endif 
ad23			 
ad23					; Address 
ad23			 
ad23					FORTH_DSP_VALUEHL 
ad23 cd 8a 9c			call macro_dsp_valuehl 
ad26				endm 
# End of macro FORTH_DSP_VALUEHL
ad26			 
ad26 e5					push hl    ; save address 
ad27			 
ad27					; load content into de 
ad27			 
ad27 5e					ld e,(hl) 
ad28 23					inc hl 
ad29 56					ld d, (hl) 
ad2a			 
ad2a					if DEBUG_FORTH_WORDS 
ad2a						DMARK "-2a" 
ad2a f5				push af  
ad2b 3a 3f ad			ld a, (.dmark)  
ad2e 32 65 ee			ld (debug_mark),a  
ad31 3a 40 ad			ld a, (.dmark+1)  
ad34 32 66 ee			ld (debug_mark+1),a  
ad37 3a 41 ad			ld a, (.dmark+2)  
ad3a 32 67 ee			ld (debug_mark+2),a  
ad3d 18 03			jr .pastdmark  
ad3f ..			.dmark: db "-2a"  
ad42 f1			.pastdmark: pop af  
ad43			endm  
# End of macro DMARK
ad43						CALLMONITOR 
ad43 cd 6f ee			call debug_vector  
ad46				endm  
# End of macro CALLMONITOR
ad46					endif 
ad46			 
ad46					FORTH_DSP_POP 
ad46 cd 42 9d			call macro_forth_dsp_pop 
ad49				endm 
# End of macro FORTH_DSP_POP
ad49			 
ad49					; Get value to remove 
ad49			 
ad49					FORTH_DSP_VALUE 
ad49 cd 73 9c			call macro_forth_dsp_value 
ad4c				endm 
# End of macro FORTH_DSP_VALUE
ad4c			 
ad4c					if DEBUG_FORTH_WORDS 
ad4c						DMARK "-2v" 
ad4c f5				push af  
ad4d 3a 61 ad			ld a, (.dmark)  
ad50 32 65 ee			ld (debug_mark),a  
ad53 3a 62 ad			ld a, (.dmark+1)  
ad56 32 66 ee			ld (debug_mark+1),a  
ad59 3a 63 ad			ld a, (.dmark+2)  
ad5c 32 67 ee			ld (debug_mark+2),a  
ad5f 18 03			jr .pastdmark  
ad61 ..			.dmark: db "-2v"  
ad64 f1			.pastdmark: pop af  
ad65			endm  
# End of macro DMARK
ad65						CALLMONITOR 
ad65 cd 6f ee			call debug_vector  
ad68				endm  
# End of macro CALLMONITOR
ad68					endif 
ad68			 
ad68 eb					ex de, hl 
ad69 ed 52				sbc hl, de 
ad6b			 
ad6b					if DEBUG_FORTH_WORDS 
ad6b						DMARK "-2d" 
ad6b f5				push af  
ad6c 3a 80 ad			ld a, (.dmark)  
ad6f 32 65 ee			ld (debug_mark),a  
ad72 3a 81 ad			ld a, (.dmark+1)  
ad75 32 66 ee			ld (debug_mark+1),a  
ad78 3a 82 ad			ld a, (.dmark+2)  
ad7b 32 67 ee			ld (debug_mark+2),a  
ad7e 18 03			jr .pastdmark  
ad80 ..			.dmark: db "-2d"  
ad83 f1			.pastdmark: pop af  
ad84			endm  
# End of macro DMARK
ad84						CALLMONITOR 
ad84 cd 6f ee			call debug_vector  
ad87				endm  
# End of macro CALLMONITOR
ad87					endif 
ad87			 
ad87					; move result to de 
ad87			 
ad87 eb					ex de, hl 
ad88			 
ad88					; Address 
ad88			 
ad88 e1					pop hl 
ad89			 
ad89					; save it back 
ad89			 
ad89 73					ld (hl), e 
ad8a 23					inc hl 
ad8b 72					ld (hl), d 
ad8c			 
ad8c					if DEBUG_FORTH_WORDS 
ad8c						DMARK "-2e" 
ad8c f5				push af  
ad8d 3a a1 ad			ld a, (.dmark)  
ad90 32 65 ee			ld (debug_mark),a  
ad93 3a a2 ad			ld a, (.dmark+1)  
ad96 32 66 ee			ld (debug_mark+1),a  
ad99 3a a3 ad			ld a, (.dmark+2)  
ad9c 32 67 ee			ld (debug_mark+2),a  
ad9f 18 03			jr .pastdmark  
ada1 ..			.dmark: db "-2e"  
ada4 f1			.pastdmark: pop af  
ada5			endm  
# End of macro DMARK
ada5						CALLMONITOR 
ada5 cd 6f ee			call debug_vector  
ada8				endm  
# End of macro CALLMONITOR
ada8					endif 
ada8			 
ada8			 
ada8					FORTH_DSP_POP 
ada8 cd 42 9d			call macro_forth_dsp_pop 
adab				endm 
# End of macro FORTH_DSP_POP
adab			 
adab			 
adab			 
adab				       NEXTW 
adab c3 76 9e			jp macro_next 
adae				endm 
# End of macro NEXTW
adae			.GET2: 
adae				CWHEAD .BANG2 91 "2@" 2 WORD_FLAG_CODE 
adae 6f				db WORD_SYS_CORE+91             
adaf e3 ad			dw .BANG2            
adb1 03				db 2 + 1 
adb2 .. 00			db "2@",0              
adb5				endm 
# End of macro CWHEAD
adb5			; | 2@ ( a -- u )  Push word at address a onto stack | DONE 
adb5					if DEBUG_FORTH_WORDS_KEY 
adb5						DMARK "2A_" 
adb5 f5				push af  
adb6 3a ca ad			ld a, (.dmark)  
adb9 32 65 ee			ld (debug_mark),a  
adbc 3a cb ad			ld a, (.dmark+1)  
adbf 32 66 ee			ld (debug_mark+1),a  
adc2 3a cc ad			ld a, (.dmark+2)  
adc5 32 67 ee			ld (debug_mark+2),a  
adc8 18 03			jr .pastdmark  
adca ..			.dmark: db "2A_"  
adcd f1			.pastdmark: pop af  
adce			endm  
# End of macro DMARK
adce						CALLMONITOR 
adce cd 6f ee			call debug_vector  
add1				endm  
# End of macro CALLMONITOR
add1					endif 
add1			 
add1					FORTH_DSP_VALUEHL 
add1 cd 8a 9c			call macro_dsp_valuehl 
add4				endm 
# End of macro FORTH_DSP_VALUEHL
add4			 
add4 e5					push hl   ; save address 
add5			 
add5					FORTH_DSP_POP 
add5 cd 42 9d			call macro_forth_dsp_pop 
add8				endm 
# End of macro FORTH_DSP_POP
add8			 
add8 e1					pop hl 
add9			 
add9 5e					ld e, (hl) 
adda 23					inc hl 
addb 56					ld d, (hl) 
addc			 
addc eb					ex de, hl 
addd			 
addd cd 85 9a				call forth_push_numhl 
ade0			 
ade0				       NEXTW 
ade0 c3 76 9e			jp macro_next 
ade3				endm 
# End of macro NEXTW
ade3			.BANG2: 
ade3				CWHEAD .CONFIG 91 "2!" 2 WORD_FLAG_CODE 
ade3 6f				db WORD_SYS_CORE+91             
ade4 1b ae			dw .CONFIG            
ade6 03				db 2 + 1 
ade7 .. 00			db "2!",0              
adea				endm 
# End of macro CWHEAD
adea			; | 2! ( u a -- )  Store value u as a word at address a | DONE 
adea					if DEBUG_FORTH_WORDS_KEY 
adea						DMARK "2S_" 
adea f5				push af  
adeb 3a ff ad			ld a, (.dmark)  
adee 32 65 ee			ld (debug_mark),a  
adf1 3a 00 ae			ld a, (.dmark+1)  
adf4 32 66 ee			ld (debug_mark+1),a  
adf7 3a 01 ae			ld a, (.dmark+2)  
adfa 32 67 ee			ld (debug_mark+2),a  
adfd 18 03			jr .pastdmark  
adff ..			.dmark: db "2S_"  
ae02 f1			.pastdmark: pop af  
ae03			endm  
# End of macro DMARK
ae03						CALLMONITOR 
ae03 cd 6f ee			call debug_vector  
ae06				endm  
# End of macro CALLMONITOR
ae06					endif 
ae06			 
ae06					FORTH_DSP_VALUEHL 
ae06 cd 8a 9c			call macro_dsp_valuehl 
ae09				endm 
# End of macro FORTH_DSP_VALUEHL
ae09			 
ae09 e5					push hl   ; save address 
ae0a			 
ae0a			 
ae0a					FORTH_DSP_POP 
ae0a cd 42 9d			call macro_forth_dsp_pop 
ae0d				endm 
# End of macro FORTH_DSP_POP
ae0d			 
ae0d					 
ae0d					FORTH_DSP_VALUEHL 
ae0d cd 8a 9c			call macro_dsp_valuehl 
ae10				endm 
# End of macro FORTH_DSP_VALUEHL
ae10			 
ae10					FORTH_DSP_POP 
ae10 cd 42 9d			call macro_forth_dsp_pop 
ae13				endm 
# End of macro FORTH_DSP_POP
ae13			 
ae13 eb					ex de, hl    ; value now in de 
ae14			 
ae14 e1					pop hl 
ae15			 
ae15 73					ld (hl), e 
ae16			 
ae16 23					inc hl 
ae17			 
ae17 72					ld (hl), d 
ae18			 
ae18			 
ae18				       NEXTW 
ae18 c3 76 9e			jp macro_next 
ae1b				endm 
# End of macro NEXTW
ae1b			.CONFIG: 
ae1b				CWHEAD .ADTOS 91 "CONFIG" 6 WORD_FLAG_CODE 
ae1b 6f				db WORD_SYS_CORE+91             
ae1c 2c ae			dw .ADTOS            
ae1e 07				db 6 + 1 
ae1f .. 00			db "CONFIG",0              
ae26				endm 
# End of macro CWHEAD
ae26			; | CONFIG ( -- )  Access the system configuration menu. Set boot from file, hardware diags, and more! | DONE 
ae26			 
ae26 cd 5e 92				call config 
ae29					NEXTW 
ae29 c3 76 9e			jp macro_next 
ae2c				endm 
# End of macro NEXTW
ae2c			 
ae2c			.ADTOS: 
ae2c				CWHEAD .SBTOS 91 "1+" 2 WORD_FLAG_CODE 
ae2c 6f				db WORD_SYS_CORE+91             
ae2d 42 ae			dw .SBTOS            
ae2f 03				db 2 + 1 
ae30 .. 00			db "1+",0              
ae33				endm 
# End of macro CWHEAD
ae33			; | 1+ ( u -- u )  Increment value on TOS | DONE 
ae33			 
ae33					FORTH_DSP_VALUEHL 
ae33 cd 8a 9c			call macro_dsp_valuehl 
ae36				endm 
# End of macro FORTH_DSP_VALUEHL
ae36 e5					push hl 
ae37			 
ae37					FORTH_DSP_POP 
ae37 cd 42 9d			call macro_forth_dsp_pop 
ae3a				endm 
# End of macro FORTH_DSP_POP
ae3a e1					pop hl 
ae3b			 
ae3b 23					inc hl 
ae3c cd 85 9a				call forth_push_numhl 
ae3f					 
ae3f					NEXTW 
ae3f c3 76 9e			jp macro_next 
ae42				endm 
# End of macro NEXTW
ae42			.SBTOS: 
ae42				CWHEAD .ADSTORE 91 "1-" 2 WORD_FLAG_CODE 
ae42 6f				db WORD_SYS_CORE+91             
ae43 58 ae			dw .ADSTORE            
ae45 03				db 2 + 1 
ae46 .. 00			db "1-",0              
ae49				endm 
# End of macro CWHEAD
ae49			; | 1- ( u -- u )  Decrement value on TOS | DONE 
ae49			 
ae49					FORTH_DSP_VALUEHL 
ae49 cd 8a 9c			call macro_dsp_valuehl 
ae4c				endm 
# End of macro FORTH_DSP_VALUEHL
ae4c e5					push hl 
ae4d			 
ae4d					FORTH_DSP_POP 
ae4d cd 42 9d			call macro_forth_dsp_pop 
ae50				endm 
# End of macro FORTH_DSP_POP
ae50 e1					pop hl 
ae51			 
ae51 2b					dec hl 
ae52 cd 85 9a				call forth_push_numhl 
ae55					 
ae55					NEXTW 
ae55 c3 76 9e			jp macro_next 
ae58				endm 
# End of macro NEXTW
ae58			.ADSTORE: 
ae58				CWHEAD .ADWSTORE 91 "1+!" 3 WORD_FLAG_CODE 
ae58 6f				db WORD_SYS_CORE+91             
ae59 6e ae			dw .ADWSTORE            
ae5b 04				db 3 + 1 
ae5c .. 00			db "1+!",0              
ae60				endm 
# End of macro CWHEAD
ae60			; | 1+! ( addr -- )  Increment byte at address addr | DONE 
ae60			 
ae60					FORTH_DSP_VALUEHL 
ae60 cd 8a 9c			call macro_dsp_valuehl 
ae63				endm 
# End of macro FORTH_DSP_VALUEHL
ae63 e5					push hl 
ae64			 
ae64					FORTH_DSP_POP 
ae64 cd 42 9d			call macro_forth_dsp_pop 
ae67				endm 
# End of macro FORTH_DSP_POP
ae67 e1					pop hl 
ae68			 
ae68 7e					ld a, (hl) 
ae69 3c					inc a 
ae6a 77					ld (hl), a 
ae6b					 
ae6b					NEXTW 
ae6b c3 76 9e			jp macro_next 
ae6e				endm 
# End of macro NEXTW
ae6e			.ADWSTORE: 
ae6e				CWHEAD .SBSTORE 91 "1+2!" 4 WORD_FLAG_CODE 
ae6e 6f				db WORD_SYS_CORE+91             
ae6f 8c ae			dw .SBSTORE            
ae71 05				db 4 + 1 
ae72 .. 00			db "1+2!",0              
ae77				endm 
# End of macro CWHEAD
ae77			; | 1+2! ( addr -- )  Increment word at address addr | DONE 
ae77			 
ae77					FORTH_DSP_VALUEHL 
ae77 cd 8a 9c			call macro_dsp_valuehl 
ae7a				endm 
# End of macro FORTH_DSP_VALUEHL
ae7a e5					push hl 
ae7b			 
ae7b					FORTH_DSP_POP 
ae7b cd 42 9d			call macro_forth_dsp_pop 
ae7e				endm 
# End of macro FORTH_DSP_POP
ae7e e1					pop hl 
ae7f			 
ae7f e5					push hl 
ae80			 
ae80 cd f8 9d				call loadwordinhl 
ae83 23					inc hl 
ae84			 
ae84 d1					pop de 
ae85 eb					ex de, hl 
ae86 73					ld (hl), e 
ae87 23					inc hl 
ae88 72					ld (hl), d 
ae89					 
ae89					NEXTW 
ae89 c3 76 9e			jp macro_next 
ae8c				endm 
# End of macro NEXTW
ae8c			.SBSTORE: 
ae8c				CWHEAD .SBWSTORE 91 "1-!" 3 WORD_FLAG_CODE 
ae8c 6f				db WORD_SYS_CORE+91             
ae8d a2 ae			dw .SBWSTORE            
ae8f 04				db 3 + 1 
ae90 .. 00			db "1-!",0              
ae94				endm 
# End of macro CWHEAD
ae94			; | 1-! ( addr -- )  Decrement byte at address addr | DONE 
ae94			 
ae94					FORTH_DSP_VALUEHL 
ae94 cd 8a 9c			call macro_dsp_valuehl 
ae97				endm 
# End of macro FORTH_DSP_VALUEHL
ae97 e5					push hl 
ae98			 
ae98					FORTH_DSP_POP 
ae98 cd 42 9d			call macro_forth_dsp_pop 
ae9b				endm 
# End of macro FORTH_DSP_POP
ae9b e1					pop hl 
ae9c			 
ae9c 7e					ld a, (hl) 
ae9d 3d					dec a 
ae9e 77					ld (hl), a 
ae9f					 
ae9f					NEXTW 
ae9f c3 76 9e			jp macro_next 
aea2				endm 
# End of macro NEXTW
aea2			.SBWSTORE: 
aea2				CWHEAD .ENDCORE 91 "1-2!" 4 WORD_FLAG_CODE 
aea2 6f				db WORD_SYS_CORE+91             
aea3 c0 ae			dw .ENDCORE            
aea5 05				db 4 + 1 
aea6 .. 00			db "1-2!",0              
aeab				endm 
# End of macro CWHEAD
aeab			; | 1-2! ( addr -- )  Decrement word at address addr | DONE 
aeab			 
aeab					FORTH_DSP_VALUEHL 
aeab cd 8a 9c			call macro_dsp_valuehl 
aeae				endm 
# End of macro FORTH_DSP_VALUEHL
aeae e5					push hl 
aeaf			 
aeaf					FORTH_DSP_POP 
aeaf cd 42 9d			call macro_forth_dsp_pop 
aeb2				endm 
# End of macro FORTH_DSP_POP
aeb2 e1					pop hl 
aeb3			 
aeb3 e5					push hl 
aeb4			 
aeb4 cd f8 9d				call loadwordinhl 
aeb7 2b					dec hl 
aeb8			 
aeb8 d1					pop de 
aeb9 eb					ex de, hl 
aeba 73					ld (hl), e 
aebb 23					inc hl 
aebc 72					ld (hl), d 
aebd					 
aebd					NEXTW 
aebd c3 76 9e			jp macro_next 
aec0				endm 
# End of macro NEXTW
aec0			.ENDCORE: 
aec0			 
aec0			; eof 
aec0			 
aec0			 
# End of file forth_words_core.asm
aec0			include "forth_words_flow.asm" 
aec0			 
aec0			; | ## Program Flow Words 
aec0			 
aec0			.IF: 
aec0				CWHEAD .THEN 10 "IF" 2 WORD_FLAG_CODE 
aec0 1e				db WORD_SYS_CORE+10             
aec1 b5 af			dw .THEN            
aec3 03				db 2 + 1 
aec4 .. 00			db "IF",0              
aec7				endm 
# End of macro CWHEAD
aec7			; | IF ( w -- f ) If TOS is true exec code following up to THEN - Note: currently not supporting ELSE or nested IF | DONE 
aec7			; 
aec7					if DEBUG_FORTH_WORDS_KEY 
aec7						DMARK "IF." 
aec7 f5				push af  
aec8 3a dc ae			ld a, (.dmark)  
aecb 32 65 ee			ld (debug_mark),a  
aece 3a dd ae			ld a, (.dmark+1)  
aed1 32 66 ee			ld (debug_mark+1),a  
aed4 3a de ae			ld a, (.dmark+2)  
aed7 32 67 ee			ld (debug_mark+2),a  
aeda 18 03			jr .pastdmark  
aedc ..			.dmark: db "IF."  
aedf f1			.pastdmark: pop af  
aee0			endm  
# End of macro DMARK
aee0						CALLMONITOR 
aee0 cd 6f ee			call debug_vector  
aee3				endm  
# End of macro CALLMONITOR
aee3					endif 
aee3			; eval TOS 
aee3			 
aee3				FORTH_DSP_VALUEHL 
aee3 cd 8a 9c			call macro_dsp_valuehl 
aee6				endm 
# End of macro FORTH_DSP_VALUEHL
aee6			 
aee6			;	push hl 
aee6				FORTH_DSP_POP 
aee6 cd 42 9d			call macro_forth_dsp_pop 
aee9				endm 
# End of macro FORTH_DSP_POP
aee9			;	pop hl 
aee9			 
aee9					if DEBUG_FORTH_WORDS 
aee9						DMARK "IF1" 
aee9 f5				push af  
aeea 3a fe ae			ld a, (.dmark)  
aeed 32 65 ee			ld (debug_mark),a  
aef0 3a ff ae			ld a, (.dmark+1)  
aef3 32 66 ee			ld (debug_mark+1),a  
aef6 3a 00 af			ld a, (.dmark+2)  
aef9 32 67 ee			ld (debug_mark+2),a  
aefc 18 03			jr .pastdmark  
aefe ..			.dmark: db "IF1"  
af01 f1			.pastdmark: pop af  
af02			endm  
# End of macro DMARK
af02						CALLMONITOR 
af02 cd 6f ee			call debug_vector  
af05				endm  
# End of macro CALLMONITOR
af05					endif 
af05 b7				or a        ; clear carry flag 
af06 11 00 00			ld de, 0 
af09 eb				ex de,hl 
af0a ed 52			sbc hl, de 
af0c c2 96 af			jp nz, .iftrue 
af0f			 
af0f					if DEBUG_FORTH_WORDS 
af0f						DMARK "IF2" 
af0f f5				push af  
af10 3a 24 af			ld a, (.dmark)  
af13 32 65 ee			ld (debug_mark),a  
af16 3a 25 af			ld a, (.dmark+1)  
af19 32 66 ee			ld (debug_mark+1),a  
af1c 3a 26 af			ld a, (.dmark+2)  
af1f 32 67 ee			ld (debug_mark+2),a  
af22 18 03			jr .pastdmark  
af24 ..			.dmark: db "IF2"  
af27 f1			.pastdmark: pop af  
af28			endm  
# End of macro DMARK
af28						CALLMONITOR 
af28 cd 6f ee			call debug_vector  
af2b				endm  
# End of macro CALLMONITOR
af2b					endif 
af2b			 
af2b			; if not true then skip to THEN 
af2b			 
af2b				; TODO get tok_ptr 
af2b				; TODO consume toks until we get to THEN 
af2b			 
af2b 2a bc e5			ld hl, (os_tok_ptr) 
af2e					if DEBUG_FORTH_WORDS 
af2e						DMARK "IF3" 
af2e f5				push af  
af2f 3a 43 af			ld a, (.dmark)  
af32 32 65 ee			ld (debug_mark),a  
af35 3a 44 af			ld a, (.dmark+1)  
af38 32 66 ee			ld (debug_mark+1),a  
af3b 3a 45 af			ld a, (.dmark+2)  
af3e 32 67 ee			ld (debug_mark+2),a  
af41 18 03			jr .pastdmark  
af43 ..			.dmark: db "IF3"  
af46 f1			.pastdmark: pop af  
af47			endm  
# End of macro DMARK
af47						CALLMONITOR 
af47 cd 6f ee			call debug_vector  
af4a				endm  
# End of macro CALLMONITOR
af4a						 
af4a					endif 
af4a 11 91 af			ld de, .ifthen 
af4d					if DEBUG_FORTH_WORDS 
af4d						DMARK "IF4" 
af4d f5				push af  
af4e 3a 62 af			ld a, (.dmark)  
af51 32 65 ee			ld (debug_mark),a  
af54 3a 63 af			ld a, (.dmark+1)  
af57 32 66 ee			ld (debug_mark+1),a  
af5a 3a 64 af			ld a, (.dmark+2)  
af5d 32 67 ee			ld (debug_mark+2),a  
af60 18 03			jr .pastdmark  
af62 ..			.dmark: db "IF4"  
af65 f1			.pastdmark: pop af  
af66			endm  
# End of macro DMARK
af66						CALLMONITOR 
af66 cd 6f ee			call debug_vector  
af69				endm  
# End of macro CALLMONITOR
af69					endif 
af69 cd 7d 9f			call findnexttok  
af6c			 
af6c					if DEBUG_FORTH_WORDS 
af6c						DMARK "IF5" 
af6c f5				push af  
af6d 3a 81 af			ld a, (.dmark)  
af70 32 65 ee			ld (debug_mark),a  
af73 3a 82 af			ld a, (.dmark+1)  
af76 32 66 ee			ld (debug_mark+1),a  
af79 3a 83 af			ld a, (.dmark+2)  
af7c 32 67 ee			ld (debug_mark+2),a  
af7f 18 03			jr .pastdmark  
af81 ..			.dmark: db "IF5"  
af84 f1			.pastdmark: pop af  
af85			endm  
# End of macro DMARK
af85						CALLMONITOR 
af85 cd 6f ee			call debug_vector  
af88				endm  
# End of macro CALLMONITOR
af88					endif 
af88				; TODO replace below with ; exec using tok_ptr 
af88 22 bc e5			ld (os_tok_ptr), hl 
af8b c3 ff 9e			jp exec1 
af8e				NEXTW 
af8e c3 76 9e			jp macro_next 
af91				endm 
# End of macro NEXTW
af91			 
af91 .. 00		.ifthen:  db "THEN",0 
af96			 
af96			.iftrue:		 
af96				; Exec next words normally 
af96			 
af96				; if true then exec following IF as normal 
af96					if DEBUG_FORTH_WORDS 
af96						DMARK "IFT" 
af96 f5				push af  
af97 3a ab af			ld a, (.dmark)  
af9a 32 65 ee			ld (debug_mark),a  
af9d 3a ac af			ld a, (.dmark+1)  
afa0 32 66 ee			ld (debug_mark+1),a  
afa3 3a ad af			ld a, (.dmark+2)  
afa6 32 67 ee			ld (debug_mark+2),a  
afa9 18 03			jr .pastdmark  
afab ..			.dmark: db "IFT"  
afae f1			.pastdmark: pop af  
afaf			endm  
# End of macro DMARK
afaf						CALLMONITOR 
afaf cd 6f ee			call debug_vector  
afb2				endm  
# End of macro CALLMONITOR
afb2					endif 
afb2			 
afb2					NEXTW 
afb2 c3 76 9e			jp macro_next 
afb5				endm 
# End of macro NEXTW
afb5			.THEN: 
afb5				CWHEAD .ELSE 11 "THEN" 4 WORD_FLAG_CODE 
afb5 1f				db WORD_SYS_CORE+11             
afb6 dd af			dw .ELSE            
afb8 05				db 4 + 1 
afb9 .. 00			db "THEN",0              
afbe				endm 
# End of macro CWHEAD
afbe			; | THEN ( -- ) Does nothing. It is a marker for the end of an IF block | DONE 
afbe					if DEBUG_FORTH_WORDS_KEY 
afbe						DMARK "THN" 
afbe f5				push af  
afbf 3a d3 af			ld a, (.dmark)  
afc2 32 65 ee			ld (debug_mark),a  
afc5 3a d4 af			ld a, (.dmark+1)  
afc8 32 66 ee			ld (debug_mark+1),a  
afcb 3a d5 af			ld a, (.dmark+2)  
afce 32 67 ee			ld (debug_mark+2),a  
afd1 18 03			jr .pastdmark  
afd3 ..			.dmark: db "THN"  
afd6 f1			.pastdmark: pop af  
afd7			endm  
# End of macro DMARK
afd7						CALLMONITOR 
afd7 cd 6f ee			call debug_vector  
afda				endm  
# End of macro CALLMONITOR
afda					endif 
afda					NEXTW 
afda c3 76 9e			jp macro_next 
afdd				endm 
# End of macro NEXTW
afdd			.ELSE: 
afdd				CWHEAD .DO 12 "ELSE" 2 WORD_FLAG_CODE 
afdd 20				db WORD_SYS_CORE+12             
afde 05 b0			dw .DO            
afe0 03				db 2 + 1 
afe1 .. 00			db "ELSE",0              
afe6				endm 
# End of macro CWHEAD
afe6			; | ELSE ( -- ) Not supported - does nothing | TODO 
afe6			 
afe6					if DEBUG_FORTH_WORDS_KEY 
afe6						DMARK "ELS" 
afe6 f5				push af  
afe7 3a fb af			ld a, (.dmark)  
afea 32 65 ee			ld (debug_mark),a  
afed 3a fc af			ld a, (.dmark+1)  
aff0 32 66 ee			ld (debug_mark+1),a  
aff3 3a fd af			ld a, (.dmark+2)  
aff6 32 67 ee			ld (debug_mark+2),a  
aff9 18 03			jr .pastdmark  
affb ..			.dmark: db "ELS"  
affe f1			.pastdmark: pop af  
afff			endm  
# End of macro DMARK
afff						CALLMONITOR 
afff cd 6f ee			call debug_vector  
b002				endm  
# End of macro CALLMONITOR
b002					endif 
b002			 
b002			 
b002					NEXTW 
b002 c3 76 9e			jp macro_next 
b005				endm 
# End of macro NEXTW
b005			.DO: 
b005				CWHEAD .LOOP 13 "DO" 2 WORD_FLAG_CODE 
b005 21				db WORD_SYS_CORE+13             
b006 2c b1			dw .LOOP            
b008 03				db 2 + 1 
b009 .. 00			db "DO",0              
b00c				endm 
# End of macro CWHEAD
b00c			; | DO ( u1 u2 -- ) Loop starting at u2 with a limit of u1 | DONE 
b00c			 
b00c					if DEBUG_FORTH_WORDS_KEY 
b00c						DMARK "DO." 
b00c f5				push af  
b00d 3a 21 b0			ld a, (.dmark)  
b010 32 65 ee			ld (debug_mark),a  
b013 3a 22 b0			ld a, (.dmark+1)  
b016 32 66 ee			ld (debug_mark+1),a  
b019 3a 23 b0			ld a, (.dmark+2)  
b01c 32 67 ee			ld (debug_mark+2),a  
b01f 18 03			jr .pastdmark  
b021 ..			.dmark: db "DO."  
b024 f1			.pastdmark: pop af  
b025			endm  
# End of macro DMARK
b025						CALLMONITOR 
b025 cd 6f ee			call debug_vector  
b028				endm  
# End of macro CALLMONITOR
b028					endif 
b028			;  push pc to rsp stack past the DO 
b028			 
b028 2a bc e5				ld hl, (os_tok_ptr) 
b02b 23					inc hl   ; D 
b02c 23					inc hl  ; O 
b02d 23					inc hl   ; null 
b02e					if DEBUG_FORTH_WORDS 
b02e						DMARK "DO2" 
b02e f5				push af  
b02f 3a 43 b0			ld a, (.dmark)  
b032 32 65 ee			ld (debug_mark),a  
b035 3a 44 b0			ld a, (.dmark+1)  
b038 32 66 ee			ld (debug_mark+1),a  
b03b 3a 45 b0			ld a, (.dmark+2)  
b03e 32 67 ee			ld (debug_mark+2),a  
b041 18 03			jr .pastdmark  
b043 ..			.dmark: db "DO2"  
b046 f1			.pastdmark: pop af  
b047			endm  
# End of macro DMARK
b047						CALLMONITOR 
b047 cd 6f ee			call debug_vector  
b04a				endm  
# End of macro CALLMONITOR
b04a					endif 
b04a					FORTH_RSP_NEXT 
b04a cd 2c 9a			call macro_forth_rsp_next 
b04d				endm 
# End of macro FORTH_RSP_NEXT
b04d					if DEBUG_FORTH_WORDS 
b04d						DMARK "DO3" 
b04d f5				push af  
b04e 3a 62 b0			ld a, (.dmark)  
b051 32 65 ee			ld (debug_mark),a  
b054 3a 63 b0			ld a, (.dmark+1)  
b057 32 66 ee			ld (debug_mark+1),a  
b05a 3a 64 b0			ld a, (.dmark+2)  
b05d 32 67 ee			ld (debug_mark+2),a  
b060 18 03			jr .pastdmark  
b062 ..			.dmark: db "DO3"  
b065 f1			.pastdmark: pop af  
b066			endm  
# End of macro DMARK
b066						CALLMONITOR 
b066 cd 6f ee			call debug_vector  
b069				endm  
# End of macro CALLMONITOR
b069					endif 
b069			 
b069					;if DEBUG_FORTH_WORDS 
b069				;		push hl 
b069			;		endif  
b069			 
b069			; get counters from data stack 
b069			 
b069			 
b069					FORTH_DSP_VALUEHL 
b069 cd 8a 9c			call macro_dsp_valuehl 
b06c				endm 
# End of macro FORTH_DSP_VALUEHL
b06c e5					push hl		 ; hl now has starting counter which needs to be tos 
b06d			 
b06d					if DEBUG_FORTH_WORDS 
b06d						DMARK "DO4" 
b06d f5				push af  
b06e 3a 82 b0			ld a, (.dmark)  
b071 32 65 ee			ld (debug_mark),a  
b074 3a 83 b0			ld a, (.dmark+1)  
b077 32 66 ee			ld (debug_mark+1),a  
b07a 3a 84 b0			ld a, (.dmark+2)  
b07d 32 67 ee			ld (debug_mark+2),a  
b080 18 03			jr .pastdmark  
b082 ..			.dmark: db "DO4"  
b085 f1			.pastdmark: pop af  
b086			endm  
# End of macro DMARK
b086						CALLMONITOR 
b086 cd 6f ee			call debug_vector  
b089				endm  
# End of macro CALLMONITOR
b089					endif 
b089					FORTH_DSP_POP 
b089 cd 42 9d			call macro_forth_dsp_pop 
b08c				endm 
# End of macro FORTH_DSP_POP
b08c			 
b08c					if DEBUG_FORTH_WORDS 
b08c						DMARK "DO5" 
b08c f5				push af  
b08d 3a a1 b0			ld a, (.dmark)  
b090 32 65 ee			ld (debug_mark),a  
b093 3a a2 b0			ld a, (.dmark+1)  
b096 32 66 ee			ld (debug_mark+1),a  
b099 3a a3 b0			ld a, (.dmark+2)  
b09c 32 67 ee			ld (debug_mark+2),a  
b09f 18 03			jr .pastdmark  
b0a1 ..			.dmark: db "DO5"  
b0a4 f1			.pastdmark: pop af  
b0a5			endm  
# End of macro DMARK
b0a5						CALLMONITOR 
b0a5 cd 6f ee			call debug_vector  
b0a8				endm  
# End of macro CALLMONITOR
b0a8					endif 
b0a8			 
b0a8					FORTH_DSP_VALUEHL 
b0a8 cd 8a 9c			call macro_dsp_valuehl 
b0ab				endm 
# End of macro FORTH_DSP_VALUEHL
b0ab			;		push hl		 ; hl now has starting limit counter 
b0ab			 
b0ab					if DEBUG_FORTH_WORDS 
b0ab						DMARK "DO6" 
b0ab f5				push af  
b0ac 3a c0 b0			ld a, (.dmark)  
b0af 32 65 ee			ld (debug_mark),a  
b0b2 3a c1 b0			ld a, (.dmark+1)  
b0b5 32 66 ee			ld (debug_mark+1),a  
b0b8 3a c2 b0			ld a, (.dmark+2)  
b0bb 32 67 ee			ld (debug_mark+2),a  
b0be 18 03			jr .pastdmark  
b0c0 ..			.dmark: db "DO6"  
b0c3 f1			.pastdmark: pop af  
b0c4			endm  
# End of macro DMARK
b0c4						CALLMONITOR 
b0c4 cd 6f ee			call debug_vector  
b0c7				endm  
# End of macro CALLMONITOR
b0c7					endif 
b0c7					FORTH_DSP_POP 
b0c7 cd 42 9d			call macro_forth_dsp_pop 
b0ca				endm 
# End of macro FORTH_DSP_POP
b0ca			 
b0ca			; put counters on the loop stack 
b0ca			 
b0ca			;		pop hl			 ; limit counter 
b0ca d1					pop de			; start counter 
b0cb			 
b0cb					; push limit counter 
b0cb			 
b0cb					if DEBUG_FORTH_WORDS 
b0cb						DMARK "DO7" 
b0cb f5				push af  
b0cc 3a e0 b0			ld a, (.dmark)  
b0cf 32 65 ee			ld (debug_mark),a  
b0d2 3a e1 b0			ld a, (.dmark+1)  
b0d5 32 66 ee			ld (debug_mark+1),a  
b0d8 3a e2 b0			ld a, (.dmark+2)  
b0db 32 67 ee			ld (debug_mark+2),a  
b0de 18 03			jr .pastdmark  
b0e0 ..			.dmark: db "DO7"  
b0e3 f1			.pastdmark: pop af  
b0e4			endm  
# End of macro DMARK
b0e4						CALLMONITOR 
b0e4 cd 6f ee			call debug_vector  
b0e7				endm  
# End of macro CALLMONITOR
b0e7					endif 
b0e7					FORTH_LOOP_NEXT 
b0e7 cd bb 9c			call macro_forth_loop_next 
b0ea				endm 
# End of macro FORTH_LOOP_NEXT
b0ea			 
b0ea					; push start counter 
b0ea			 
b0ea eb					ex de, hl 
b0eb					if DEBUG_FORTH_WORDS 
b0eb						DMARK "DO7" 
b0eb f5				push af  
b0ec 3a 00 b1			ld a, (.dmark)  
b0ef 32 65 ee			ld (debug_mark),a  
b0f2 3a 01 b1			ld a, (.dmark+1)  
b0f5 32 66 ee			ld (debug_mark+1),a  
b0f8 3a 02 b1			ld a, (.dmark+2)  
b0fb 32 67 ee			ld (debug_mark+2),a  
b0fe 18 03			jr .pastdmark  
b100 ..			.dmark: db "DO7"  
b103 f1			.pastdmark: pop af  
b104			endm  
# End of macro DMARK
b104						CALLMONITOR 
b104 cd 6f ee			call debug_vector  
b107				endm  
# End of macro CALLMONITOR
b107					endif 
b107					FORTH_LOOP_NEXT 
b107 cd bb 9c			call macro_forth_loop_next 
b10a				endm 
# End of macro FORTH_LOOP_NEXT
b10a			 
b10a			 
b10a					; init first round of I counter 
b10a			 
b10a 22 e0 e5				ld (os_current_i), hl 
b10d			 
b10d					if DEBUG_FORTH_WORDS 
b10d						DMARK "DO8" 
b10d f5				push af  
b10e 3a 22 b1			ld a, (.dmark)  
b111 32 65 ee			ld (debug_mark),a  
b114 3a 23 b1			ld a, (.dmark+1)  
b117 32 66 ee			ld (debug_mark+1),a  
b11a 3a 24 b1			ld a, (.dmark+2)  
b11d 32 67 ee			ld (debug_mark+2),a  
b120 18 03			jr .pastdmark  
b122 ..			.dmark: db "DO8"  
b125 f1			.pastdmark: pop af  
b126			endm  
# End of macro DMARK
b126						CALLMONITOR 
b126 cd 6f ee			call debug_vector  
b129				endm  
# End of macro CALLMONITOR
b129					endif 
b129			 
b129					NEXTW 
b129 c3 76 9e			jp macro_next 
b12c				endm 
# End of macro NEXTW
b12c			.LOOP: 
b12c				CWHEAD .I 14 "LOOP" 4 WORD_FLAG_CODE 
b12c 22				db WORD_SYS_CORE+14             
b12d 44 b2			dw .I            
b12f 05				db 4 + 1 
b130 .. 00			db "LOOP",0              
b135				endm 
# End of macro CWHEAD
b135			; | LOOP ( -- ) Increment and test loop counter  | DONE 
b135			 
b135				; pop tos as current loop count to hl 
b135			 
b135				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
b135			 
b135				FORTH_LOOP_TOS 
b135 cd ee 9c			call macro_forth_loop_tos 
b138				endm 
# End of macro FORTH_LOOP_TOS
b138 e5				push hl 
b139			 
b139					if DEBUG_FORTH_WORDS_KEY 
b139						DMARK "LOP" 
b139 f5				push af  
b13a 3a 4e b1			ld a, (.dmark)  
b13d 32 65 ee			ld (debug_mark),a  
b140 3a 4f b1			ld a, (.dmark+1)  
b143 32 66 ee			ld (debug_mark+1),a  
b146 3a 50 b1			ld a, (.dmark+2)  
b149 32 67 ee			ld (debug_mark+2),a  
b14c 18 03			jr .pastdmark  
b14e ..			.dmark: db "LOP"  
b151 f1			.pastdmark: pop af  
b152			endm  
# End of macro DMARK
b152						CALLMONITOR 
b152 cd 6f ee			call debug_vector  
b155				endm  
# End of macro CALLMONITOR
b155					endif 
b155				; next item on the stack is the limit. get it 
b155			 
b155			 
b155				FORTH_LOOP_POP 
b155 cd f8 9c			call macro_forth_loop_pop 
b158				endm 
# End of macro FORTH_LOOP_POP
b158			 
b158				FORTH_LOOP_TOS 
b158 cd ee 9c			call macro_forth_loop_tos 
b15b				endm 
# End of macro FORTH_LOOP_TOS
b15b			 
b15b d1				pop de		 ; de = i, hl = limit 
b15c			 
b15c					if DEBUG_FORTH_WORDS 
b15c						DMARK "LP1" 
b15c f5				push af  
b15d 3a 71 b1			ld a, (.dmark)  
b160 32 65 ee			ld (debug_mark),a  
b163 3a 72 b1			ld a, (.dmark+1)  
b166 32 66 ee			ld (debug_mark+1),a  
b169 3a 73 b1			ld a, (.dmark+2)  
b16c 32 67 ee			ld (debug_mark+2),a  
b16f 18 03			jr .pastdmark  
b171 ..			.dmark: db "LP1"  
b174 f1			.pastdmark: pop af  
b175			endm  
# End of macro DMARK
b175						CALLMONITOR 
b175 cd 6f ee			call debug_vector  
b178				endm  
# End of macro CALLMONITOR
b178					endif 
b178			 
b178				; go back to previous word 
b178			 
b178 d5				push de    ; save I for inc later 
b179			 
b179			 
b179				; get limit 
b179				;  is I at limit? 
b179			 
b179			 
b179					if DEBUG_FORTH_WORDS 
b179						DMARK "LP1" 
b179 f5				push af  
b17a 3a 8e b1			ld a, (.dmark)  
b17d 32 65 ee			ld (debug_mark),a  
b180 3a 8f b1			ld a, (.dmark+1)  
b183 32 66 ee			ld (debug_mark+1),a  
b186 3a 90 b1			ld a, (.dmark+2)  
b189 32 67 ee			ld (debug_mark+2),a  
b18c 18 03			jr .pastdmark  
b18e ..			.dmark: db "LP1"  
b191 f1			.pastdmark: pop af  
b192			endm  
# End of macro DMARK
b192						CALLMONITOR 
b192 cd 6f ee			call debug_vector  
b195				endm  
# End of macro CALLMONITOR
b195					endif 
b195			 
b195 ed 52			sbc hl, de 
b197			 
b197			 
b197				;  if at limit pop both limit and current off stack do NEXT and get rid of saved DO 
b197			 
b197 20 26				jr nz, .loopnotdone 
b199			 
b199 e1				pop hl   ; get rid of saved I 
b19a				FORTH_LOOP_POP     ; get rid of limit 
b19a cd f8 9c			call macro_forth_loop_pop 
b19d				endm 
# End of macro FORTH_LOOP_POP
b19d			 
b19d				FORTH_RSP_POP     ; get rid of DO ptr 
b19d cd 4d 9a			call macro_forth_rsp_pop 
b1a0				endm 
# End of macro FORTH_RSP_POP
b1a0			 
b1a0			if DEBUG_FORTH_WORDS 
b1a0						DMARK "LP>" 
b1a0 f5				push af  
b1a1 3a b5 b1			ld a, (.dmark)  
b1a4 32 65 ee			ld (debug_mark),a  
b1a7 3a b6 b1			ld a, (.dmark+1)  
b1aa 32 66 ee			ld (debug_mark+1),a  
b1ad 3a b7 b1			ld a, (.dmark+2)  
b1b0 32 67 ee			ld (debug_mark+2),a  
b1b3 18 03			jr .pastdmark  
b1b5 ..			.dmark: db "LP>"  
b1b8 f1			.pastdmark: pop af  
b1b9			endm  
# End of macro DMARK
b1b9				CALLMONITOR 
b1b9 cd 6f ee			call debug_vector  
b1bc				endm  
# End of macro CALLMONITOR
b1bc			endif 
b1bc			 
b1bc					NEXTW 
b1bc c3 76 9e			jp macro_next 
b1bf				endm 
# End of macro NEXTW
b1bf				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
b1bf			 
b1bf			.loopnotdone: 
b1bf			 
b1bf e1				pop hl    ; get I 
b1c0 23				inc hl 
b1c1			 
b1c1			   	; save new I 
b1c1			 
b1c1			 
b1c1					; set I counter 
b1c1			 
b1c1 22 e0 e5				ld (os_current_i), hl 
b1c4			 
b1c4					if DEBUG_FORTH_WORDS 
b1c4						DMARK "LPN" 
b1c4 f5				push af  
b1c5 3a d9 b1			ld a, (.dmark)  
b1c8 32 65 ee			ld (debug_mark),a  
b1cb 3a da b1			ld a, (.dmark+1)  
b1ce 32 66 ee			ld (debug_mark+1),a  
b1d1 3a db b1			ld a, (.dmark+2)  
b1d4 32 67 ee			ld (debug_mark+2),a  
b1d7 18 03			jr .pastdmark  
b1d9 ..			.dmark: db "LPN"  
b1dc f1			.pastdmark: pop af  
b1dd			endm  
# End of macro DMARK
b1dd					CALLMONITOR 
b1dd cd 6f ee			call debug_vector  
b1e0				endm  
# End of macro CALLMONITOR
b1e0					endif 
b1e0					 
b1e0				FORTH_LOOP_NEXT 
b1e0 cd bb 9c			call macro_forth_loop_next 
b1e3				endm 
# End of macro FORTH_LOOP_NEXT
b1e3			 
b1e3			 
b1e3					if DEBUG_FORTH_WORDS 
b1e3 eb						ex de,hl 
b1e4					endif 
b1e4			 
b1e4			;	; get DO ptr 
b1e4			; 
b1e4					if DEBUG_FORTH_WORDS 
b1e4						DMARK "LP7" 
b1e4 f5				push af  
b1e5 3a f9 b1			ld a, (.dmark)  
b1e8 32 65 ee			ld (debug_mark),a  
b1eb 3a fa b1			ld a, (.dmark+1)  
b1ee 32 66 ee			ld (debug_mark+1),a  
b1f1 3a fb b1			ld a, (.dmark+2)  
b1f4 32 67 ee			ld (debug_mark+2),a  
b1f7 18 03			jr .pastdmark  
b1f9 ..			.dmark: db "LP7"  
b1fc f1			.pastdmark: pop af  
b1fd			endm  
# End of macro DMARK
b1fd					CALLMONITOR 
b1fd cd 6f ee			call debug_vector  
b200				endm  
# End of macro CALLMONITOR
b200					endif 
b200				FORTH_RSP_TOS 
b200 cd 43 9a			call macro_forth_rsp_tos 
b203				endm 
# End of macro FORTH_RSP_TOS
b203			 
b203					if DEBUG_FORTH_WORDS 
b203						DMARK "LP8" 
b203 f5				push af  
b204 3a 18 b2			ld a, (.dmark)  
b207 32 65 ee			ld (debug_mark),a  
b20a 3a 19 b2			ld a, (.dmark+1)  
b20d 32 66 ee			ld (debug_mark+1),a  
b210 3a 1a b2			ld a, (.dmark+2)  
b213 32 67 ee			ld (debug_mark+2),a  
b216 18 03			jr .pastdmark  
b218 ..			.dmark: db "LP8"  
b21b f1			.pastdmark: pop af  
b21c			endm  
# End of macro DMARK
b21c					CALLMONITOR 
b21c cd 6f ee			call debug_vector  
b21f				endm  
# End of macro CALLMONITOR
b21f					endif 
b21f				;push hl 
b21f			 
b21f				; not going to DO any more 
b21f				; get rid of the RSP pointer as DO will add it back in 
b21f				;FORTH_RSP_POP 
b21f				;pop hl 
b21f			 
b21f				;ld hl,(cli_ret_sp) 
b21f				;ld e, (hl) 
b21f				;inc hl 
b21f				;ld d, (hl) 
b21f				;ex de,hl 
b21f 22 bc e5			ld (os_tok_ptr), hl 
b222					if DEBUG_FORTH_WORDS 
b222						DMARK "LP<" 
b222 f5				push af  
b223 3a 37 b2			ld a, (.dmark)  
b226 32 65 ee			ld (debug_mark),a  
b229 3a 38 b2			ld a, (.dmark+1)  
b22c 32 66 ee			ld (debug_mark+1),a  
b22f 3a 39 b2			ld a, (.dmark+2)  
b232 32 67 ee			ld (debug_mark+2),a  
b235 18 03			jr .pastdmark  
b237 ..			.dmark: db "LP<"  
b23a f1			.pastdmark: pop af  
b23b			endm  
# End of macro DMARK
b23b					CALLMONITOR 
b23b cd 6f ee			call debug_vector  
b23e				endm  
# End of macro CALLMONITOR
b23e				endif 
b23e c3 ff 9e			jp exec1 
b241			 
b241					 
b241			 
b241			 
b241					NEXTW 
b241 c3 76 9e			jp macro_next 
b244				endm 
# End of macro NEXTW
b244			.I:  
b244			 
b244				CWHEAD .DLOOP 74 "I" 1 WORD_FLAG_CODE 
b244 5e				db WORD_SYS_CORE+74             
b245 6f b2			dw .DLOOP            
b247 02				db 1 + 1 
b248 .. 00			db "I",0              
b24a				endm 
# End of macro CWHEAD
b24a			; | I ( -- ) Current loop counter | DONE 
b24a					if DEBUG_FORTH_WORDS_KEY 
b24a						DMARK "I.." 
b24a f5				push af  
b24b 3a 5f b2			ld a, (.dmark)  
b24e 32 65 ee			ld (debug_mark),a  
b251 3a 60 b2			ld a, (.dmark+1)  
b254 32 66 ee			ld (debug_mark+1),a  
b257 3a 61 b2			ld a, (.dmark+2)  
b25a 32 67 ee			ld (debug_mark+2),a  
b25d 18 03			jr .pastdmark  
b25f ..			.dmark: db "I.."  
b262 f1			.pastdmark: pop af  
b263			endm  
# End of macro DMARK
b263						CALLMONITOR 
b263 cd 6f ee			call debug_vector  
b266				endm  
# End of macro CALLMONITOR
b266					endif 
b266			 
b266 2a e0 e5				ld hl,(os_current_i) 
b269 cd 85 9a				call forth_push_numhl 
b26c			 
b26c					NEXTW 
b26c c3 76 9e			jp macro_next 
b26f				endm 
# End of macro NEXTW
b26f			.DLOOP: 
b26f				CWHEAD .REPEAT 75 "-LOOP" 5 WORD_FLAG_CODE 
b26f 5f				db WORD_SYS_CORE+75             
b270 50 b3			dw .REPEAT            
b272 06				db 5 + 1 
b273 .. 00			db "-LOOP",0              
b279				endm 
# End of macro CWHEAD
b279			; | -LOOP ( -- ) Decrement and test loop counter  | DONE 
b279				; pop tos as current loop count to hl 
b279					if DEBUG_FORTH_WORDS_KEY 
b279						DMARK "-LP" 
b279 f5				push af  
b27a 3a 8e b2			ld a, (.dmark)  
b27d 32 65 ee			ld (debug_mark),a  
b280 3a 8f b2			ld a, (.dmark+1)  
b283 32 66 ee			ld (debug_mark+1),a  
b286 3a 90 b2			ld a, (.dmark+2)  
b289 32 67 ee			ld (debug_mark+2),a  
b28c 18 03			jr .pastdmark  
b28e ..			.dmark: db "-LP"  
b291 f1			.pastdmark: pop af  
b292			endm  
# End of macro DMARK
b292						CALLMONITOR 
b292 cd 6f ee			call debug_vector  
b295				endm  
# End of macro CALLMONITOR
b295					endif 
b295			 
b295				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
b295			 
b295				FORTH_LOOP_TOS 
b295 cd ee 9c			call macro_forth_loop_tos 
b298				endm 
# End of macro FORTH_LOOP_TOS
b298 e5				push hl 
b299			 
b299					if DEBUG_FORTH_WORDS 
b299						DMARK "-LP" 
b299 f5				push af  
b29a 3a ae b2			ld a, (.dmark)  
b29d 32 65 ee			ld (debug_mark),a  
b2a0 3a af b2			ld a, (.dmark+1)  
b2a3 32 66 ee			ld (debug_mark+1),a  
b2a6 3a b0 b2			ld a, (.dmark+2)  
b2a9 32 67 ee			ld (debug_mark+2),a  
b2ac 18 03			jr .pastdmark  
b2ae ..			.dmark: db "-LP"  
b2b1 f1			.pastdmark: pop af  
b2b2			endm  
# End of macro DMARK
b2b2						CALLMONITOR 
b2b2 cd 6f ee			call debug_vector  
b2b5				endm  
# End of macro CALLMONITOR
b2b5					endif 
b2b5				; next item on the stack is the limit. get it 
b2b5			 
b2b5			 
b2b5				FORTH_LOOP_POP 
b2b5 cd f8 9c			call macro_forth_loop_pop 
b2b8				endm 
# End of macro FORTH_LOOP_POP
b2b8			 
b2b8				FORTH_LOOP_TOS 
b2b8 cd ee 9c			call macro_forth_loop_tos 
b2bb				endm 
# End of macro FORTH_LOOP_TOS
b2bb			 
b2bb d1				pop de		 ; de = i, hl = limit 
b2bc			 
b2bc					if DEBUG_FORTH_WORDS 
b2bc						DMARK "-L1" 
b2bc f5				push af  
b2bd 3a d1 b2			ld a, (.dmark)  
b2c0 32 65 ee			ld (debug_mark),a  
b2c3 3a d2 b2			ld a, (.dmark+1)  
b2c6 32 66 ee			ld (debug_mark+1),a  
b2c9 3a d3 b2			ld a, (.dmark+2)  
b2cc 32 67 ee			ld (debug_mark+2),a  
b2cf 18 03			jr .pastdmark  
b2d1 ..			.dmark: db "-L1"  
b2d4 f1			.pastdmark: pop af  
b2d5			endm  
# End of macro DMARK
b2d5						CALLMONITOR 
b2d5 cd 6f ee			call debug_vector  
b2d8				endm  
# End of macro CALLMONITOR
b2d8					endif 
b2d8			 
b2d8				; go back to previous word 
b2d8			 
b2d8 d5				push de    ; save I for inc later 
b2d9			 
b2d9			 
b2d9				; get limit 
b2d9				;  is I at limit? 
b2d9			 
b2d9			 
b2d9					if DEBUG_FORTH_WORDS 
b2d9						DMARK "-L1" 
b2d9 f5				push af  
b2da 3a ee b2			ld a, (.dmark)  
b2dd 32 65 ee			ld (debug_mark),a  
b2e0 3a ef b2			ld a, (.dmark+1)  
b2e3 32 66 ee			ld (debug_mark+1),a  
b2e6 3a f0 b2			ld a, (.dmark+2)  
b2e9 32 67 ee			ld (debug_mark+2),a  
b2ec 18 03			jr .pastdmark  
b2ee ..			.dmark: db "-L1"  
b2f1 f1			.pastdmark: pop af  
b2f2			endm  
# End of macro DMARK
b2f2						CALLMONITOR 
b2f2 cd 6f ee			call debug_vector  
b2f5				endm  
# End of macro CALLMONITOR
b2f5					endif 
b2f5			 
b2f5 ed 52			sbc hl, de 
b2f7			 
b2f7			 
b2f7				;  if at limit pop both limit and current off stack do NEXT and get rid of saved DO 
b2f7			 
b2f7 20 26				jr nz, .mloopnotdone 
b2f9			 
b2f9 e1				pop hl   ; get rid of saved I 
b2fa				FORTH_LOOP_POP     ; get rid of limit 
b2fa cd f8 9c			call macro_forth_loop_pop 
b2fd				endm 
# End of macro FORTH_LOOP_POP
b2fd			 
b2fd				FORTH_RSP_POP     ; get rid of DO ptr 
b2fd cd 4d 9a			call macro_forth_rsp_pop 
b300				endm 
# End of macro FORTH_RSP_POP
b300			 
b300			if DEBUG_FORTH_WORDS 
b300						DMARK "-L>" 
b300 f5				push af  
b301 3a 15 b3			ld a, (.dmark)  
b304 32 65 ee			ld (debug_mark),a  
b307 3a 16 b3			ld a, (.dmark+1)  
b30a 32 66 ee			ld (debug_mark+1),a  
b30d 3a 17 b3			ld a, (.dmark+2)  
b310 32 67 ee			ld (debug_mark+2),a  
b313 18 03			jr .pastdmark  
b315 ..			.dmark: db "-L>"  
b318 f1			.pastdmark: pop af  
b319			endm  
# End of macro DMARK
b319				CALLMONITOR 
b319 cd 6f ee			call debug_vector  
b31c				endm  
# End of macro CALLMONITOR
b31c			endif 
b31c			 
b31c					NEXTW 
b31c c3 76 9e			jp macro_next 
b31f				endm 
# End of macro NEXTW
b31f				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
b31f			 
b31f			.mloopnotdone: 
b31f			 
b31f e1				pop hl    ; get I 
b320 2b				dec hl 
b321			 
b321			   	; save new I 
b321			 
b321			 
b321					; set I counter 
b321			 
b321 22 e0 e5				ld (os_current_i), hl 
b324			 
b324					 
b324				FORTH_LOOP_NEXT 
b324 cd bb 9c			call macro_forth_loop_next 
b327				endm 
# End of macro FORTH_LOOP_NEXT
b327			 
b327			 
b327					if DEBUG_FORTH_WORDS 
b327 eb						ex de,hl 
b328					endif 
b328			 
b328			;	; get DO ptr 
b328			; 
b328				FORTH_RSP_TOS 
b328 cd 43 9a			call macro_forth_rsp_tos 
b32b				endm 
# End of macro FORTH_RSP_TOS
b32b			 
b32b				;push hl 
b32b			 
b32b				; not going to DO any more 
b32b				; get rid of the RSP pointer as DO will add it back in 
b32b				;FORTH_RSP_POP 
b32b				;pop hl 
b32b			 
b32b			 
b32b 22 bc e5			ld (os_tok_ptr), hl 
b32e					if DEBUG_FORTH_WORDS 
b32e						DMARK "-L<" 
b32e f5				push af  
b32f 3a 43 b3			ld a, (.dmark)  
b332 32 65 ee			ld (debug_mark),a  
b335 3a 44 b3			ld a, (.dmark+1)  
b338 32 66 ee			ld (debug_mark+1),a  
b33b 3a 45 b3			ld a, (.dmark+2)  
b33e 32 67 ee			ld (debug_mark+2),a  
b341 18 03			jr .pastdmark  
b343 ..			.dmark: db "-L<"  
b346 f1			.pastdmark: pop af  
b347			endm  
# End of macro DMARK
b347					CALLMONITOR 
b347 cd 6f ee			call debug_vector  
b34a				endm  
# End of macro CALLMONITOR
b34a				endif 
b34a c3 ff 9e			jp exec1 
b34d			 
b34d					 
b34d			 
b34d			 
b34d			 
b34d				NEXTW 
b34d c3 76 9e			jp macro_next 
b350				endm 
# End of macro NEXTW
b350			 
b350			 
b350			 
b350			 
b350			.REPEAT: 
b350				CWHEAD .UNTIL 93 "REPEAT" 5 WORD_FLAG_CODE 
b350 71				db WORD_SYS_CORE+93             
b351 a3 b3			dw .UNTIL            
b353 06				db 5 + 1 
b354 .. 00			db "REPEAT",0              
b35b				endm 
# End of macro CWHEAD
b35b			; | REPEAT ( --  ) Start REPEAT...UNTIL loop  | DONE 
b35b			;  push pc to rsp stack past the REPEAT 
b35b					if DEBUG_FORTH_WORDS_KEY 
b35b						DMARK "REP" 
b35b f5				push af  
b35c 3a 70 b3			ld a, (.dmark)  
b35f 32 65 ee			ld (debug_mark),a  
b362 3a 71 b3			ld a, (.dmark+1)  
b365 32 66 ee			ld (debug_mark+1),a  
b368 3a 72 b3			ld a, (.dmark+2)  
b36b 32 67 ee			ld (debug_mark+2),a  
b36e 18 03			jr .pastdmark  
b370 ..			.dmark: db "REP"  
b373 f1			.pastdmark: pop af  
b374			endm  
# End of macro DMARK
b374						CALLMONITOR 
b374 cd 6f ee			call debug_vector  
b377				endm  
# End of macro CALLMONITOR
b377					endif 
b377			 
b377 2a bc e5				ld hl, (os_tok_ptr) 
b37a 23					inc hl   ; R 
b37b 23					inc hl  ; E 
b37c 23					inc hl   ; P 
b37d 23					inc hl   ; E 
b37e 23					inc hl   ; A 
b37f 23					inc hl   ; T 
b380 23					inc hl   ; zero 
b381					FORTH_RSP_NEXT 
b381 cd 2c 9a			call macro_forth_rsp_next 
b384				endm 
# End of macro FORTH_RSP_NEXT
b384			 
b384			 
b384					if DEBUG_FORTH_WORDS 
b384						DMARK "REP" 
b384 f5				push af  
b385 3a 99 b3			ld a, (.dmark)  
b388 32 65 ee			ld (debug_mark),a  
b38b 3a 9a b3			ld a, (.dmark+1)  
b38e 32 66 ee			ld (debug_mark+1),a  
b391 3a 9b b3			ld a, (.dmark+2)  
b394 32 67 ee			ld (debug_mark+2),a  
b397 18 03			jr .pastdmark  
b399 ..			.dmark: db "REP"  
b39c f1			.pastdmark: pop af  
b39d			endm  
# End of macro DMARK
b39d						;pop bc    ; TODO BUG ?????? what is this for???? 
b39d						CALLMONITOR 
b39d cd 6f ee			call debug_vector  
b3a0				endm  
# End of macro CALLMONITOR
b3a0					endif 
b3a0			 
b3a0					NEXTW 
b3a0 c3 76 9e			jp macro_next 
b3a3				endm 
# End of macro NEXTW
b3a3			;	       NEXTW 
b3a3			 
b3a3			.UNTIL: 
b3a3				CWHEAD .ENDFLOW 94 "UNTIL" 5 WORD_FLAG_CODE 
b3a3 72				db WORD_SYS_CORE+94             
b3a4 3a b4			dw .ENDFLOW            
b3a6 06				db 5 + 1 
b3a7 .. 00			db "UNTIL",0              
b3ad				endm 
# End of macro CWHEAD
b3ad			; | UNTIL ( u -- ) Exit REPEAT...UNTIL loop if TOS is false  | DONE 
b3ad			 
b3ad				; pop tos as check 
b3ad			 
b3ad				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
b3ad			 
b3ad				FORTH_DSP_VALUEHL 
b3ad cd 8a 9c			call macro_dsp_valuehl 
b3b0				endm 
# End of macro FORTH_DSP_VALUEHL
b3b0			 
b3b0					if DEBUG_FORTH_WORDS_KEY 
b3b0						DMARK "UNT" 
b3b0 f5				push af  
b3b1 3a c5 b3			ld a, (.dmark)  
b3b4 32 65 ee			ld (debug_mark),a  
b3b7 3a c6 b3			ld a, (.dmark+1)  
b3ba 32 66 ee			ld (debug_mark+1),a  
b3bd 3a c7 b3			ld a, (.dmark+2)  
b3c0 32 67 ee			ld (debug_mark+2),a  
b3c3 18 03			jr .pastdmark  
b3c5 ..			.dmark: db "UNT"  
b3c8 f1			.pastdmark: pop af  
b3c9			endm  
# End of macro DMARK
b3c9						CALLMONITOR 
b3c9 cd 6f ee			call debug_vector  
b3cc				endm  
# End of macro CALLMONITOR
b3cc					endif 
b3cc			 
b3cc			;	push hl 
b3cc				FORTH_DSP_POP 
b3cc cd 42 9d			call macro_forth_dsp_pop 
b3cf				endm 
# End of macro FORTH_DSP_POP
b3cf			 
b3cf			;	pop hl 
b3cf			 
b3cf				; test if true 
b3cf			 
b3cf cd 13 8d			call ishlzero 
b3d2			;	ld a,l 
b3d2			;	add h 
b3d2			; 
b3d2			;	cp 0 
b3d2			 
b3d2 20 3e			jr nz, .untilnotdone 
b3d4			 
b3d4					if DEBUG_FORTH_WORDS 
b3d4						DMARK "UNf" 
b3d4 f5				push af  
b3d5 3a e9 b3			ld a, (.dmark)  
b3d8 32 65 ee			ld (debug_mark),a  
b3db 3a ea b3			ld a, (.dmark+1)  
b3de 32 66 ee			ld (debug_mark+1),a  
b3e1 3a eb b3			ld a, (.dmark+2)  
b3e4 32 67 ee			ld (debug_mark+2),a  
b3e7 18 03			jr .pastdmark  
b3e9 ..			.dmark: db "UNf"  
b3ec f1			.pastdmark: pop af  
b3ed			endm  
# End of macro DMARK
b3ed						CALLMONITOR 
b3ed cd 6f ee			call debug_vector  
b3f0				endm  
# End of macro CALLMONITOR
b3f0					endif 
b3f0			 
b3f0			 
b3f0			 
b3f0				FORTH_RSP_POP     ; get rid of DO ptr 
b3f0 cd 4d 9a			call macro_forth_rsp_pop 
b3f3				endm 
# End of macro FORTH_RSP_POP
b3f3			 
b3f3			if DEBUG_FORTH_WORDS 
b3f3						DMARK "UN>" 
b3f3 f5				push af  
b3f4 3a 08 b4			ld a, (.dmark)  
b3f7 32 65 ee			ld (debug_mark),a  
b3fa 3a 09 b4			ld a, (.dmark+1)  
b3fd 32 66 ee			ld (debug_mark+1),a  
b400 3a 0a b4			ld a, (.dmark+2)  
b403 32 67 ee			ld (debug_mark+2),a  
b406 18 03			jr .pastdmark  
b408 ..			.dmark: db "UN>"  
b40b f1			.pastdmark: pop af  
b40c			endm  
# End of macro DMARK
b40c				CALLMONITOR 
b40c cd 6f ee			call debug_vector  
b40f				endm  
# End of macro CALLMONITOR
b40f			endif 
b40f			 
b40f					NEXTW 
b40f c3 76 9e			jp macro_next 
b412				endm 
# End of macro NEXTW
b412				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
b412			 
b412			.untilnotdone: 
b412			 
b412			 
b412			;	; get DO ptr 
b412			; 
b412				FORTH_RSP_TOS 
b412 cd 43 9a			call macro_forth_rsp_tos 
b415				endm 
# End of macro FORTH_RSP_TOS
b415			 
b415				;push hl 
b415			 
b415				; not going to DO any more 
b415				; get rid of the RSP pointer as DO will add it back in 
b415				;FORTH_RSP_POP 
b415				;pop hl 
b415			 
b415			 
b415 22 bc e5			ld (os_tok_ptr), hl 
b418					if DEBUG_FORTH_WORDS 
b418						DMARK "UN<" 
b418 f5				push af  
b419 3a 2d b4			ld a, (.dmark)  
b41c 32 65 ee			ld (debug_mark),a  
b41f 3a 2e b4			ld a, (.dmark+1)  
b422 32 66 ee			ld (debug_mark+1),a  
b425 3a 2f b4			ld a, (.dmark+2)  
b428 32 67 ee			ld (debug_mark+2),a  
b42b 18 03			jr .pastdmark  
b42d ..			.dmark: db "UN<"  
b430 f1			.pastdmark: pop af  
b431			endm  
# End of macro DMARK
b431					CALLMONITOR 
b431 cd 6f ee			call debug_vector  
b434				endm  
# End of macro CALLMONITOR
b434				endif 
b434 c3 ff 9e			jp exec1 
b437			 
b437					 
b437			 
b437			 
b437					NEXTW 
b437 c3 76 9e			jp macro_next 
b43a				endm 
# End of macro NEXTW
b43a			 
b43a			 
b43a			.ENDFLOW: 
b43a			 
b43a			; eof 
b43a			 
# End of file forth_words_flow.asm
b43a			; TODO something wrong with the first word of the next word group. no matter which group applies. On device, sc114 is fine. bad memory? 
b43a			include "forth_words_logic.asm" 
b43a			 
b43a			; | ## Logic Words 
b43a			 
b43a			.NOT: 
b43a				CWHEAD .IS 25 "NOT" 3 WORD_FLAG_CODE 
b43a 2d				db WORD_SYS_CORE+25             
b43b 82 b4			dw .IS            
b43d 04				db 3 + 1 
b43e .. 00			db "NOT",0              
b442				endm 
# End of macro CWHEAD
b442			; | NOT ( u  -- u ) Inverse true/false on stack | DONE 
b442					if DEBUG_FORTH_WORDS_KEY 
b442						DMARK "NOT" 
b442 f5				push af  
b443 3a 57 b4			ld a, (.dmark)  
b446 32 65 ee			ld (debug_mark),a  
b449 3a 58 b4			ld a, (.dmark+1)  
b44c 32 66 ee			ld (debug_mark+1),a  
b44f 3a 59 b4			ld a, (.dmark+2)  
b452 32 67 ee			ld (debug_mark+2),a  
b455 18 03			jr .pastdmark  
b457 ..			.dmark: db "NOT"  
b45a f1			.pastdmark: pop af  
b45b			endm  
# End of macro DMARK
b45b						CALLMONITOR 
b45b cd 6f ee			call debug_vector  
b45e				endm  
# End of macro CALLMONITOR
b45e					endif 
b45e					FORTH_DSP 
b45e cd 50 9c			call macro_forth_dsp 
b461				endm 
# End of macro FORTH_DSP
b461 7e					ld a,(hl)	; get type of value on TOS 
b462 fe 02				cp DS_TYPE_INUM  
b464 28 03				jr z, .noti 
b466					NEXTW 
b466 c3 76 9e			jp macro_next 
b469				endm 
# End of macro NEXTW
b469			.noti:          FORTH_DSP_VALUEHL 
b469 cd 8a 9c			call macro_dsp_valuehl 
b46c				endm 
# End of macro FORTH_DSP_VALUEHL
b46c			;		push hl 
b46c					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b46c cd 42 9d			call macro_forth_dsp_pop 
b46f				endm 
# End of macro FORTH_DSP_POP
b46f			;		pop hl 
b46f 3e 00				ld a,0 
b471 bd					cp l 
b472 28 04				jr z, .not2t 
b474 2e 00				ld l, 0 
b476 18 02				jr .notip 
b478			 
b478 2e ff		.not2t:		ld l, 255 
b47a			 
b47a 26 00		.notip:		ld h, 0	 
b47c			 
b47c cd 85 9a				call forth_push_numhl 
b47f					NEXTW 
b47f c3 76 9e			jp macro_next 
b482				endm 
# End of macro NEXTW
b482			 
b482			.IS: 
b482				CWHEAD .LZERO 25 "IS" 2 WORD_FLAG_CODE 
b482 2d				db WORD_SYS_CORE+25             
b483 a8 b4			dw .LZERO            
b485 03				db 2 + 1 
b486 .. 00			db "IS",0              
b489				endm 
# End of macro CWHEAD
b489			; | IS ( s1 s2  -- f ) Push true if string s1 is the same as s2 | TODO 
b489					if DEBUG_FORTH_WORDS_KEY 
b489						DMARK "IS." 
b489 f5				push af  
b48a 3a 9e b4			ld a, (.dmark)  
b48d 32 65 ee			ld (debug_mark),a  
b490 3a 9f b4			ld a, (.dmark+1)  
b493 32 66 ee			ld (debug_mark+1),a  
b496 3a a0 b4			ld a, (.dmark+2)  
b499 32 67 ee			ld (debug_mark+2),a  
b49c 18 03			jr .pastdmark  
b49e ..			.dmark: db "IS."  
b4a1 f1			.pastdmark: pop af  
b4a2			endm  
# End of macro DMARK
b4a2						CALLMONITOR 
b4a2 cd 6f ee			call debug_vector  
b4a5				endm  
# End of macro CALLMONITOR
b4a5					endif 
b4a5					NEXTW 
b4a5 c3 76 9e			jp macro_next 
b4a8				endm 
# End of macro NEXTW
b4a8			.LZERO: 
b4a8				CWHEAD .TZERO 25 "0<" 2 WORD_FLAG_CODE 
b4a8 2d				db WORD_SYS_CORE+25             
b4a9 b2 b4			dw .TZERO            
b4ab 03				db 2 + 1 
b4ac .. 00			db "0<",0              
b4af				endm 
# End of macro CWHEAD
b4af			; | 0< ( u -- f ) Push true if u is less than o | CANT DO UNTIL FLOAT 
b4af					NEXTW 
b4af c3 76 9e			jp macro_next 
b4b2				endm 
# End of macro NEXTW
b4b2			.TZERO: 
b4b2				CWHEAD .LESS 26 "0=" 2 WORD_FLAG_CODE 
b4b2 2e				db WORD_SYS_CORE+26             
b4b3 f9 b4			dw .LESS            
b4b5 03				db 2 + 1 
b4b6 .. 00			db "0=",0              
b4b9				endm 
# End of macro CWHEAD
b4b9			; | 0= ( u -- f ) Push true if u equals 0 | DONE 
b4b9				; TODO add floating point number detection 
b4b9					;v5 FORTH_DSP_VALUE 
b4b9					if DEBUG_FORTH_WORDS_KEY 
b4b9						DMARK "0=." 
b4b9 f5				push af  
b4ba 3a ce b4			ld a, (.dmark)  
b4bd 32 65 ee			ld (debug_mark),a  
b4c0 3a cf b4			ld a, (.dmark+1)  
b4c3 32 66 ee			ld (debug_mark+1),a  
b4c6 3a d0 b4			ld a, (.dmark+2)  
b4c9 32 67 ee			ld (debug_mark+2),a  
b4cc 18 03			jr .pastdmark  
b4ce ..			.dmark: db "0=."  
b4d1 f1			.pastdmark: pop af  
b4d2			endm  
# End of macro DMARK
b4d2						CALLMONITOR 
b4d2 cd 6f ee			call debug_vector  
b4d5				endm  
# End of macro CALLMONITOR
b4d5					endif 
b4d5					FORTH_DSP 
b4d5 cd 50 9c			call macro_forth_dsp 
b4d8				endm 
# End of macro FORTH_DSP
b4d8 7e					ld a,(hl)	; get type of value on TOS 
b4d9 fe 02				cp DS_TYPE_INUM  
b4db 28 00				jr z, .tz_inum 
b4dd			 
b4dd				if FORTH_ENABLE_FLOATMATH 
b4dd					jr .tz_done 
b4dd			 
b4dd				endif 
b4dd					 
b4dd			 
b4dd			.tz_inum: 
b4dd					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b4dd cd 8a 9c			call macro_dsp_valuehl 
b4e0				endm 
# End of macro FORTH_DSP_VALUEHL
b4e0			 
b4e0			;		push hl 
b4e0			 
b4e0					; destroy value TOS 
b4e0			 
b4e0					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b4e0 cd 42 9d			call macro_forth_dsp_pop 
b4e3				endm 
# End of macro FORTH_DSP_POP
b4e3			 
b4e3			;		pop hl 
b4e3			 
b4e3 3e 00				ld a,0 
b4e5			 
b4e5 bd					cp l 
b4e6 20 08				jr nz, .tz_notzero 
b4e8			 
b4e8 bc					cp h 
b4e9			 
b4e9 20 05				jr nz, .tz_notzero 
b4eb			 
b4eb			 
b4eb 21 01 00				ld hl, FORTH_TRUE 
b4ee 18 03				jr .tz_done 
b4f0			 
b4f0 21 00 00		.tz_notzero:	ld hl, FORTH_FALSE 
b4f3			 
b4f3					; push value back onto stack for another op etc 
b4f3			 
b4f3			.tz_done: 
b4f3 cd 85 9a				call forth_push_numhl 
b4f6			 
b4f6					NEXTW 
b4f6 c3 76 9e			jp macro_next 
b4f9				endm 
# End of macro NEXTW
b4f9			.LESS: 
b4f9				CWHEAD .GT 27 "<" 1 WORD_FLAG_CODE 
b4f9 2f				db WORD_SYS_CORE+27             
b4fa 62 b5			dw .GT            
b4fc 02				db 1 + 1 
b4fd .. 00			db "<",0              
b4ff				endm 
# End of macro CWHEAD
b4ff			; | < ( u1 u2 -- f ) True if u1 is less than u2 | DONE 
b4ff				; TODO add floating point number detection 
b4ff					if DEBUG_FORTH_WORDS_KEY 
b4ff						DMARK "LES" 
b4ff f5				push af  
b500 3a 14 b5			ld a, (.dmark)  
b503 32 65 ee			ld (debug_mark),a  
b506 3a 15 b5			ld a, (.dmark+1)  
b509 32 66 ee			ld (debug_mark+1),a  
b50c 3a 16 b5			ld a, (.dmark+2)  
b50f 32 67 ee			ld (debug_mark+2),a  
b512 18 03			jr .pastdmark  
b514 ..			.dmark: db "LES"  
b517 f1			.pastdmark: pop af  
b518			endm  
# End of macro DMARK
b518						CALLMONITOR 
b518 cd 6f ee			call debug_vector  
b51b				endm  
# End of macro CALLMONITOR
b51b					endif 
b51b					FORTH_DSP 
b51b cd 50 9c			call macro_forth_dsp 
b51e				endm 
# End of macro FORTH_DSP
b51e					;v5 FORTH_DSP_VALUE 
b51e 7e					ld a,(hl)	; get type of value on TOS 
b51f fe 02				cp DS_TYPE_INUM  
b521 28 00				jr z, .less_inum 
b523			 
b523				if FORTH_ENABLE_FLOATMATH 
b523					jr .less_done 
b523			 
b523				endif 
b523					 
b523			 
b523			.less_inum: 
b523					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b523 cd 8a 9c			call macro_dsp_valuehl 
b526				endm 
# End of macro FORTH_DSP_VALUEHL
b526			 
b526 e5					push hl  ; u2 
b527			 
b527					; destroy value TOS 
b527			 
b527					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b527 cd 42 9d			call macro_forth_dsp_pop 
b52a				endm 
# End of macro FORTH_DSP_POP
b52a			 
b52a			 
b52a					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b52a cd 8a 9c			call macro_dsp_valuehl 
b52d				endm 
# End of macro FORTH_DSP_VALUEHL
b52d			 
b52d e5					push hl    ; u1 
b52e			 
b52e					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b52e cd 42 9d			call macro_forth_dsp_pop 
b531				endm 
# End of macro FORTH_DSP_POP
b531			 
b531			 
b531 b7			 or a      ;clear carry flag 
b532 01 00 00		 ld bc, FORTH_FALSE 
b535 e1			  pop hl    ; u1 
b536 d1			  pop de    ; u2 
b537 ed 52		  sbc hl,de 
b539 30 03		  jr nc,.lscont   	;	if hl >= de, carry flag will be cleared 
b53b			 
b53b 01 01 00		 ld bc, FORTH_TRUE 
b53e			.lscont:  
b53e c5					push bc 
b53f e1					pop hl 
b540			 
b540					if DEBUG_FORTH_WORDS 
b540						DMARK "LT1" 
b540 f5				push af  
b541 3a 55 b5			ld a, (.dmark)  
b544 32 65 ee			ld (debug_mark),a  
b547 3a 56 b5			ld a, (.dmark+1)  
b54a 32 66 ee			ld (debug_mark+1),a  
b54d 3a 57 b5			ld a, (.dmark+2)  
b550 32 67 ee			ld (debug_mark+2),a  
b553 18 03			jr .pastdmark  
b555 ..			.dmark: db "LT1"  
b558 f1			.pastdmark: pop af  
b559			endm  
# End of macro DMARK
b559						CALLMONITOR 
b559 cd 6f ee			call debug_vector  
b55c				endm  
# End of macro CALLMONITOR
b55c					endif 
b55c cd 85 9a				call forth_push_numhl 
b55f			 
b55f					NEXTW 
b55f c3 76 9e			jp macro_next 
b562				endm 
# End of macro NEXTW
b562			.GT: 
b562				CWHEAD .EQUAL 28 ">" 1 WORD_FLAG_CODE 
b562 30				db WORD_SYS_CORE+28             
b563 cb b5			dw .EQUAL            
b565 02				db 1 + 1 
b566 .. 00			db ">",0              
b568				endm 
# End of macro CWHEAD
b568			; | > ( u1 u2 -- f ) True if u1 is greater than u2 | DONE 
b568				; TODO add floating point number detection 
b568					if DEBUG_FORTH_WORDS_KEY 
b568						DMARK "GRT" 
b568 f5				push af  
b569 3a 7d b5			ld a, (.dmark)  
b56c 32 65 ee			ld (debug_mark),a  
b56f 3a 7e b5			ld a, (.dmark+1)  
b572 32 66 ee			ld (debug_mark+1),a  
b575 3a 7f b5			ld a, (.dmark+2)  
b578 32 67 ee			ld (debug_mark+2),a  
b57b 18 03			jr .pastdmark  
b57d ..			.dmark: db "GRT"  
b580 f1			.pastdmark: pop af  
b581			endm  
# End of macro DMARK
b581						CALLMONITOR 
b581 cd 6f ee			call debug_vector  
b584				endm  
# End of macro CALLMONITOR
b584					endif 
b584					FORTH_DSP 
b584 cd 50 9c			call macro_forth_dsp 
b587				endm 
# End of macro FORTH_DSP
b587					;FORTH_DSP_VALUE 
b587 7e					ld a,(hl)	; get type of value on TOS 
b588 fe 02				cp DS_TYPE_INUM  
b58a 28 00				jr z, .gt_inum 
b58c			 
b58c				if FORTH_ENABLE_FLOATMATH 
b58c					jr .gt_done 
b58c			 
b58c				endif 
b58c					 
b58c			 
b58c			.gt_inum: 
b58c					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b58c cd 8a 9c			call macro_dsp_valuehl 
b58f				endm 
# End of macro FORTH_DSP_VALUEHL
b58f			 
b58f e5					push hl  ; u2 
b590			 
b590					; destroy value TOS 
b590			 
b590					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b590 cd 42 9d			call macro_forth_dsp_pop 
b593				endm 
# End of macro FORTH_DSP_POP
b593			 
b593			 
b593					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b593 cd 8a 9c			call macro_dsp_valuehl 
b596				endm 
# End of macro FORTH_DSP_VALUEHL
b596			 
b596 e5					push hl    ; u1 
b597			 
b597					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b597 cd 42 9d			call macro_forth_dsp_pop 
b59a				endm 
# End of macro FORTH_DSP_POP
b59a			 
b59a			 
b59a b7			 or a      ;clear carry flag 
b59b 01 00 00		 ld bc, FORTH_FALSE 
b59e e1			  pop hl    ; u1 
b59f d1			  pop de    ; u2 
b5a0 ed 52		  sbc hl,de 
b5a2 38 03		  jr c,.gtcont   	;	if hl >= de, carry flag will be cleared 
b5a4			 
b5a4 01 01 00		 ld bc, FORTH_TRUE 
b5a7			.gtcont:  
b5a7 c5					push bc 
b5a8 e1					pop hl 
b5a9			 
b5a9					if DEBUG_FORTH_WORDS 
b5a9						DMARK "GT1" 
b5a9 f5				push af  
b5aa 3a be b5			ld a, (.dmark)  
b5ad 32 65 ee			ld (debug_mark),a  
b5b0 3a bf b5			ld a, (.dmark+1)  
b5b3 32 66 ee			ld (debug_mark+1),a  
b5b6 3a c0 b5			ld a, (.dmark+2)  
b5b9 32 67 ee			ld (debug_mark+2),a  
b5bc 18 03			jr .pastdmark  
b5be ..			.dmark: db "GT1"  
b5c1 f1			.pastdmark: pop af  
b5c2			endm  
# End of macro DMARK
b5c2						CALLMONITOR 
b5c2 cd 6f ee			call debug_vector  
b5c5				endm  
# End of macro CALLMONITOR
b5c5					endif 
b5c5 cd 85 9a				call forth_push_numhl 
b5c8			 
b5c8					NEXTW 
b5c8 c3 76 9e			jp macro_next 
b5cb				endm 
# End of macro NEXTW
b5cb			.EQUAL: 
b5cb				CWHEAD .ENDLOGIC 29 "=" 1 WORD_FLAG_CODE 
b5cb 31				db WORD_SYS_CORE+29             
b5cc 36 b6			dw .ENDLOGIC            
b5ce 02				db 1 + 1 
b5cf .. 00			db "=",0              
b5d1				endm 
# End of macro CWHEAD
b5d1			; | = ( u1 u2 -- f ) True if u1 equals u2 | DONE 
b5d1				; TODO add floating point number detection 
b5d1					if DEBUG_FORTH_WORDS_KEY 
b5d1						DMARK "EQ." 
b5d1 f5				push af  
b5d2 3a e6 b5			ld a, (.dmark)  
b5d5 32 65 ee			ld (debug_mark),a  
b5d8 3a e7 b5			ld a, (.dmark+1)  
b5db 32 66 ee			ld (debug_mark+1),a  
b5de 3a e8 b5			ld a, (.dmark+2)  
b5e1 32 67 ee			ld (debug_mark+2),a  
b5e4 18 03			jr .pastdmark  
b5e6 ..			.dmark: db "EQ."  
b5e9 f1			.pastdmark: pop af  
b5ea			endm  
# End of macro DMARK
b5ea						CALLMONITOR 
b5ea cd 6f ee			call debug_vector  
b5ed				endm  
# End of macro CALLMONITOR
b5ed					endif 
b5ed					FORTH_DSP 
b5ed cd 50 9c			call macro_forth_dsp 
b5f0				endm 
# End of macro FORTH_DSP
b5f0					;v5 FORTH_DSP_VALUE 
b5f0 7e					ld a,(hl)	; get type of value on TOS 
b5f1 fe 02				cp DS_TYPE_INUM  
b5f3 28 00				jr z, .eq_inum 
b5f5			 
b5f5				if FORTH_ENABLE_FLOATMATH 
b5f5					jr .eq_done 
b5f5			 
b5f5				endif 
b5f5					 
b5f5			 
b5f5			.eq_inum: 
b5f5					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b5f5 cd 8a 9c			call macro_dsp_valuehl 
b5f8				endm 
# End of macro FORTH_DSP_VALUEHL
b5f8			 
b5f8 e5					push hl 
b5f9			 
b5f9					; destroy value TOS 
b5f9			 
b5f9					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b5f9 cd 42 9d			call macro_forth_dsp_pop 
b5fc				endm 
# End of macro FORTH_DSP_POP
b5fc			 
b5fc			 
b5fc					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b5fc cd 8a 9c			call macro_dsp_valuehl 
b5ff				endm 
# End of macro FORTH_DSP_VALUEHL
b5ff			 
b5ff					; one value on hl get other one back 
b5ff			 
b5ff e5					push hl 
b600			 
b600					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b600 cd 42 9d			call macro_forth_dsp_pop 
b603				endm 
# End of macro FORTH_DSP_POP
b603			 
b603 0e 00				ld c, FORTH_FALSE 
b605			 
b605 e1					pop hl 
b606 d1					pop de 
b607			 
b607 7b					ld a, e 
b608 bd					cp l 
b609			 
b609 20 06				jr nz, .eq_done 
b60b			 
b60b 7a					ld a, d 
b60c bc					cp h 
b60d			 
b60d 20 02				jr nz, .eq_done 
b60f			 
b60f 0e 01				ld c, FORTH_TRUE 
b611					 
b611			 
b611			 
b611			.eq_done: 
b611			 
b611					; TODO push value back onto stack for another op etc 
b611			 
b611 26 00				ld h, 0 
b613 69					ld l, c 
b614					if DEBUG_FORTH_WORDS 
b614						DMARK "EQ1" 
b614 f5				push af  
b615 3a 29 b6			ld a, (.dmark)  
b618 32 65 ee			ld (debug_mark),a  
b61b 3a 2a b6			ld a, (.dmark+1)  
b61e 32 66 ee			ld (debug_mark+1),a  
b621 3a 2b b6			ld a, (.dmark+2)  
b624 32 67 ee			ld (debug_mark+2),a  
b627 18 03			jr .pastdmark  
b629 ..			.dmark: db "EQ1"  
b62c f1			.pastdmark: pop af  
b62d			endm  
# End of macro DMARK
b62d						CALLMONITOR 
b62d cd 6f ee			call debug_vector  
b630				endm  
# End of macro CALLMONITOR
b630					endif 
b630 cd 85 9a				call forth_push_numhl 
b633			 
b633					NEXTW 
b633 c3 76 9e			jp macro_next 
b636				endm 
# End of macro NEXTW
b636			 
b636			 
b636			.ENDLOGIC: 
b636			; eof 
b636			 
b636			 
# End of file forth_words_logic.asm
b636			include "forth_words_maths.asm" 
b636			 
b636			; | ## Maths Words 
b636			 
b636			.PLUS:	 
b636				CWHEAD .NEG 1 "+" 1 WORD_FLAG_CODE 
b636 15				db WORD_SYS_CORE+1             
b637 94 b6			dw .NEG            
b639 02				db 1 + 1 
b63a .. 00			db "+",0              
b63c				endm 
# End of macro CWHEAD
b63c			; | + ( u u -- u )    Add two numbers and push result   | INT DONE 
b63c					if DEBUG_FORTH_WORDS_KEY 
b63c						DMARK "PLU" 
b63c f5				push af  
b63d 3a 51 b6			ld a, (.dmark)  
b640 32 65 ee			ld (debug_mark),a  
b643 3a 52 b6			ld a, (.dmark+1)  
b646 32 66 ee			ld (debug_mark+1),a  
b649 3a 53 b6			ld a, (.dmark+2)  
b64c 32 67 ee			ld (debug_mark+2),a  
b64f 18 03			jr .pastdmark  
b651 ..			.dmark: db "PLU"  
b654 f1			.pastdmark: pop af  
b655			endm  
# End of macro DMARK
b655						CALLMONITOR 
b655 cd 6f ee			call debug_vector  
b658				endm  
# End of macro CALLMONITOR
b658					endif 
b658					; add top two values and push back result 
b658			 
b658					;for v5 FORTH_DSP_VALUE 
b658					FORTH_DSP 
b658 cd 50 9c			call macro_forth_dsp 
b65b				endm 
# End of macro FORTH_DSP
b65b 7e					ld a,(hl)	; get type of value on TOS 
b65c fe 02				cp DS_TYPE_INUM  
b65e 28 03				jr z, .dot_inum 
b660			 
b660					NEXTW 
b660 c3 76 9e			jp macro_next 
b663				endm 
# End of macro NEXTW
b663			 
b663			; float maths 
b663			 
b663				if FORTH_ENABLE_FLOATMATH 
b663						inc hl      ; now at start of numeric as string 
b663			 
b663					if DEBUG_FORTH_MATHS 
b663						DMARK "ADD" 
b663				CALLMONITOR 
b663					endif 
b663			 
b663					;ld ix, hl 
b663					call CON 
b663			 
b663			 
b663					push hl 
b663					 
b663					 
b663			 
b663						FORTH_DSP_POP      ; TODO add stock underflow checks and throws  
b663			 
b663					; get next number 
b663			 
b663						FORTH_DSP_VALUE 
b663			 
b663						inc hl      ; now at start of numeric as string 
b663			 
b663					;ld ix, hl 
b663					call CON 
b663			 
b663					push hl 
b663			 
b663			 
b663						FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b663			 
b663						; TODO do add 
b663			 
b663						call IADD 
b663			 
b663						; TODO get result back as ascii 
b663			 
b663						; TODO push result  
b663			 
b663			 
b663			 
b663						jr .dot_done 
b663				endif 
b663			 
b663			.dot_inum: 
b663			 
b663			 
b663					if DEBUG_FORTH_DOT 
b663						DMARK "+IT" 
b663 f5				push af  
b664 3a 78 b6			ld a, (.dmark)  
b667 32 65 ee			ld (debug_mark),a  
b66a 3a 79 b6			ld a, (.dmark+1)  
b66d 32 66 ee			ld (debug_mark+1),a  
b670 3a 7a b6			ld a, (.dmark+2)  
b673 32 67 ee			ld (debug_mark+2),a  
b676 18 03			jr .pastdmark  
b678 ..			.dmark: db "+IT"  
b67b f1			.pastdmark: pop af  
b67c			endm  
# End of macro DMARK
b67c				CALLMONITOR 
b67c cd 6f ee			call debug_vector  
b67f				endm  
# End of macro CALLMONITOR
b67f					endif 
b67f			 
b67f					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b67f cd 8a 9c			call macro_dsp_valuehl 
b682				endm 
# End of macro FORTH_DSP_VALUEHL
b682			 
b682				; TODO add floating point number detection 
b682			 
b682 e5					push hl 
b683			 
b683					; destroy value TOS 
b683			 
b683					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b683 cd 42 9d			call macro_forth_dsp_pop 
b686				endm 
# End of macro FORTH_DSP_POP
b686			 
b686			 
b686					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b686 cd 8a 9c			call macro_dsp_valuehl 
b689				endm 
# End of macro FORTH_DSP_VALUEHL
b689			 
b689					; one value on hl get other one back 
b689			 
b689 d1					pop de 
b68a			 
b68a					; do the add 
b68a			 
b68a 19					add hl,de 
b68b			 
b68b					; save it 
b68b			 
b68b			;		push hl	 
b68b			 
b68b					; 
b68b			 
b68b					; destroy value TOS 
b68b			 
b68b					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b68b cd 42 9d			call macro_forth_dsp_pop 
b68e				endm 
# End of macro FORTH_DSP_POP
b68e			 
b68e					; TODO push value back onto stack for another op etc 
b68e			 
b68e			;		pop hl 
b68e			 
b68e			.dot_done: 
b68e cd 85 9a				call forth_push_numhl 
b691			 
b691					NEXTW 
b691 c3 76 9e			jp macro_next 
b694				endm 
# End of macro NEXTW
b694			.NEG: 
b694			 
b694				CWHEAD .DIV 3 "-" 1 WORD_FLAG_CODE 
b694 17				db WORD_SYS_CORE+3             
b695 d7 b6			dw .DIV            
b697 02				db 1 + 1 
b698 .. 00			db "-",0              
b69a				endm 
# End of macro CWHEAD
b69a			; | - ( u1 u2 -- u )    Subtract u2 from u1 and push result  | INT DONE 
b69a					if DEBUG_FORTH_WORDS_KEY 
b69a						DMARK "SUB" 
b69a f5				push af  
b69b 3a af b6			ld a, (.dmark)  
b69e 32 65 ee			ld (debug_mark),a  
b6a1 3a b0 b6			ld a, (.dmark+1)  
b6a4 32 66 ee			ld (debug_mark+1),a  
b6a7 3a b1 b6			ld a, (.dmark+2)  
b6aa 32 67 ee			ld (debug_mark+2),a  
b6ad 18 03			jr .pastdmark  
b6af ..			.dmark: db "SUB"  
b6b2 f1			.pastdmark: pop af  
b6b3			endm  
# End of macro DMARK
b6b3						CALLMONITOR 
b6b3 cd 6f ee			call debug_vector  
b6b6				endm  
# End of macro CALLMONITOR
b6b6					endif 
b6b6			 
b6b6			 
b6b6				; TODO add floating point number detection 
b6b6					; v5 FORTH_DSP_VALUE 
b6b6					FORTH_DSP 
b6b6 cd 50 9c			call macro_forth_dsp 
b6b9				endm 
# End of macro FORTH_DSP
b6b9 7e					ld a,(hl)	; get type of value on TOS 
b6ba fe 02				cp DS_TYPE_INUM  
b6bc 28 03				jr z, .neg_inum 
b6be			 
b6be					NEXTW 
b6be c3 76 9e			jp macro_next 
b6c1				endm 
# End of macro NEXTW
b6c1			 
b6c1			; float maths 
b6c1			 
b6c1				if FORTH_ENABLE_FLOATMATH 
b6c1					jr .neg_done 
b6c1			 
b6c1				endif 
b6c1					 
b6c1			 
b6c1			.neg_inum: 
b6c1					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b6c1 cd 8a 9c			call macro_dsp_valuehl 
b6c4				endm 
# End of macro FORTH_DSP_VALUEHL
b6c4			 
b6c4 e5					push hl 
b6c5			 
b6c5					; destroy value TOS 
b6c5			 
b6c5					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b6c5 cd 42 9d			call macro_forth_dsp_pop 
b6c8				endm 
# End of macro FORTH_DSP_POP
b6c8			 
b6c8			 
b6c8					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b6c8 cd 8a 9c			call macro_dsp_valuehl 
b6cb				endm 
# End of macro FORTH_DSP_VALUEHL
b6cb			 
b6cb					; one value on hl get other one back 
b6cb			 
b6cb d1					pop de 
b6cc			 
b6cc					; do the sub 
b6cc			;		ex de, hl 
b6cc			 
b6cc ed 52				sbc hl,de 
b6ce			 
b6ce					; save it 
b6ce			 
b6ce			;		push hl	 
b6ce			 
b6ce					; 
b6ce			 
b6ce					; destroy value TOS 
b6ce			 
b6ce					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b6ce cd 42 9d			call macro_forth_dsp_pop 
b6d1				endm 
# End of macro FORTH_DSP_POP
b6d1			 
b6d1					; TODO push value back onto stack for another op etc 
b6d1			 
b6d1			;		pop hl 
b6d1			 
b6d1 cd 85 9a				call forth_push_numhl 
b6d4			.neg_done: 
b6d4			 
b6d4					NEXTW 
b6d4 c3 76 9e			jp macro_next 
b6d7				endm 
# End of macro NEXTW
b6d7			.DIV: 
b6d7				CWHEAD .MUL 4 "/" 1 WORD_FLAG_CODE 
b6d7 18				db WORD_SYS_CORE+4             
b6d8 24 b7			dw .MUL            
b6da 02				db 1 + 1 
b6db .. 00			db "/",0              
b6dd				endm 
# End of macro CWHEAD
b6dd			; | / ( u1 u2 -- result remainder )     Divide u1 by u2 and push result | INT DONE 
b6dd					if DEBUG_FORTH_WORDS_KEY 
b6dd						DMARK "DIV" 
b6dd f5				push af  
b6de 3a f2 b6			ld a, (.dmark)  
b6e1 32 65 ee			ld (debug_mark),a  
b6e4 3a f3 b6			ld a, (.dmark+1)  
b6e7 32 66 ee			ld (debug_mark+1),a  
b6ea 3a f4 b6			ld a, (.dmark+2)  
b6ed 32 67 ee			ld (debug_mark+2),a  
b6f0 18 03			jr .pastdmark  
b6f2 ..			.dmark: db "DIV"  
b6f5 f1			.pastdmark: pop af  
b6f6			endm  
# End of macro DMARK
b6f6						CALLMONITOR 
b6f6 cd 6f ee			call debug_vector  
b6f9				endm  
# End of macro CALLMONITOR
b6f9					endif 
b6f9				; TODO add floating point number detection 
b6f9					; v5 FORTH_DSP_VALUE 
b6f9					FORTH_DSP 
b6f9 cd 50 9c			call macro_forth_dsp 
b6fc				endm 
# End of macro FORTH_DSP
b6fc 7e					ld a,(hl)	; get type of value on TOS 
b6fd fe 02				cp DS_TYPE_INUM  
b6ff 28 03				jr z, .div_inum 
b701			 
b701				if FORTH_ENABLE_FLOATMATH 
b701					jr .div_done 
b701			 
b701				endif 
b701					NEXTW 
b701 c3 76 9e			jp macro_next 
b704				endm 
# End of macro NEXTW
b704			.div_inum: 
b704			 
b704					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b704 cd 8a 9c			call macro_dsp_valuehl 
b707				endm 
# End of macro FORTH_DSP_VALUEHL
b707			 
b707 e5					push hl    ; to go to bc 
b708			 
b708					; destroy value TOS 
b708			 
b708					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b708 cd 42 9d			call macro_forth_dsp_pop 
b70b				endm 
# End of macro FORTH_DSP_POP
b70b			 
b70b			 
b70b					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b70b cd 8a 9c			call macro_dsp_valuehl 
b70e				endm 
# End of macro FORTH_DSP_VALUEHL
b70e			 
b70e					; hl to go to de 
b70e			 
b70e e5					push hl 
b70f			 
b70f c1					pop bc 
b710 d1					pop de		 
b711			 
b711			 
b711					if DEBUG_FORTH_MATHS 
b711						DMARK "DIV" 
b711				CALLMONITOR 
b711					endif 
b711					; one value on hl but move to a get other one back 
b711			 
b711			        
b711 cd 47 8c			call Div16 
b714			 
b714			;	push af	 
b714 e5				push hl 
b715 c5				push bc 
b716			 
b716					if DEBUG_FORTH_MATHS 
b716						DMARK "DI1" 
b716				CALLMONITOR 
b716					endif 
b716			 
b716					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b716 cd 42 9d			call macro_forth_dsp_pop 
b719				endm 
# End of macro FORTH_DSP_POP
b719			 
b719			 
b719			 
b719 e1					pop hl    ; result 
b71a			 
b71a cd 85 9a				call forth_push_numhl 
b71d			 
b71d e1					pop hl    ; reminder 
b71e			;		ld h,0 
b71e			;		ld l,d 
b71e			 
b71e cd 85 9a				call forth_push_numhl 
b721			.div_done: 
b721					NEXTW 
b721 c3 76 9e			jp macro_next 
b724				endm 
# End of macro NEXTW
b724			.MUL: 
b724				CWHEAD .MIN 5 "*" 1 WORD_FLAG_CODE 
b724 19				db WORD_SYS_CORE+5             
b725 69 b7			dw .MIN            
b727 02				db 1 + 1 
b728 .. 00			db "*",0              
b72a				endm 
# End of macro CWHEAD
b72a			; | * ( u1 u2 -- u )     Multiply TOS and push result | INT DONE 
b72a				; TODO add floating point number detection 
b72a					if DEBUG_FORTH_WORDS_KEY 
b72a						DMARK "MUL" 
b72a f5				push af  
b72b 3a 3f b7			ld a, (.dmark)  
b72e 32 65 ee			ld (debug_mark),a  
b731 3a 40 b7			ld a, (.dmark+1)  
b734 32 66 ee			ld (debug_mark+1),a  
b737 3a 41 b7			ld a, (.dmark+2)  
b73a 32 67 ee			ld (debug_mark+2),a  
b73d 18 03			jr .pastdmark  
b73f ..			.dmark: db "MUL"  
b742 f1			.pastdmark: pop af  
b743			endm  
# End of macro DMARK
b743						CALLMONITOR 
b743 cd 6f ee			call debug_vector  
b746				endm  
# End of macro CALLMONITOR
b746					endif 
b746					FORTH_DSP 
b746 cd 50 9c			call macro_forth_dsp 
b749				endm 
# End of macro FORTH_DSP
b749					; v5 FORTH_DSP_VALUE 
b749 7e					ld a,(hl)	; get type of value on TOS 
b74a fe 02				cp DS_TYPE_INUM  
b74c 28 03				jr z, .mul_inum 
b74e			 
b74e				if FORTH_ENABLE_FLOATMATH 
b74e					jr .mul_done 
b74e			 
b74e				endif 
b74e			 
b74e					NEXTW 
b74e c3 76 9e			jp macro_next 
b751				endm 
# End of macro NEXTW
b751			.mul_inum:	 
b751			 
b751					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b751 cd 8a 9c			call macro_dsp_valuehl 
b754				endm 
# End of macro FORTH_DSP_VALUEHL
b754			 
b754 e5					push hl 
b755			 
b755					; destroy value TOS 
b755			 
b755					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b755 cd 42 9d			call macro_forth_dsp_pop 
b758				endm 
# End of macro FORTH_DSP_POP
b758			 
b758			 
b758					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b758 cd 8a 9c			call macro_dsp_valuehl 
b75b				endm 
# End of macro FORTH_DSP_VALUEHL
b75b			 
b75b					; one value on hl but move to a get other one back 
b75b			 
b75b 7d					ld a, l 
b75c			 
b75c d1					pop de 
b75d			 
b75d					; do the mull 
b75d			;		ex de, hl 
b75d			 
b75d cd 6d 8c				call Mult16 
b760					; save it 
b760			 
b760			;		push hl	 
b760			 
b760					; 
b760			 
b760					; destroy value TOS 
b760			 
b760					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b760 cd 42 9d			call macro_forth_dsp_pop 
b763				endm 
# End of macro FORTH_DSP_POP
b763			 
b763					; TODO push value back onto stack for another op etc 
b763			 
b763			;		pop hl 
b763			 
b763 cd 85 9a				call forth_push_numhl 
b766			 
b766			.mul_done: 
b766					NEXTW 
b766 c3 76 9e			jp macro_next 
b769				endm 
# End of macro NEXTW
b769			 
b769			 
b769			 
b769			 
b769			.MIN: 
b769				CWHEAD .MAX 53 "MIN" 3 WORD_FLAG_CODE 
b769 49				db WORD_SYS_CORE+53             
b76a ea b7			dw .MAX            
b76c 04				db 3 + 1 
b76d .. 00			db "MIN",0              
b771				endm 
# End of macro CWHEAD
b771			; | MIN (  u1 u2 -- u3 ) Whichever is the smallest value is pushed back onto the stack | DONE 
b771					if DEBUG_FORTH_WORDS_KEY 
b771						DMARK "MIN" 
b771 f5				push af  
b772 3a 86 b7			ld a, (.dmark)  
b775 32 65 ee			ld (debug_mark),a  
b778 3a 87 b7			ld a, (.dmark+1)  
b77b 32 66 ee			ld (debug_mark+1),a  
b77e 3a 88 b7			ld a, (.dmark+2)  
b781 32 67 ee			ld (debug_mark+2),a  
b784 18 03			jr .pastdmark  
b786 ..			.dmark: db "MIN"  
b789 f1			.pastdmark: pop af  
b78a			endm  
# End of macro DMARK
b78a						CALLMONITOR 
b78a cd 6f ee			call debug_vector  
b78d				endm  
# End of macro CALLMONITOR
b78d					endif 
b78d					; get u2 
b78d			 
b78d					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b78d cd 8a 9c			call macro_dsp_valuehl 
b790				endm 
# End of macro FORTH_DSP_VALUEHL
b790			 
b790 e5					push hl   ; u2 
b791			 
b791					; destroy value TOS 
b791			 
b791					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b791 cd 42 9d			call macro_forth_dsp_pop 
b794				endm 
# End of macro FORTH_DSP_POP
b794			 
b794					; get u1 
b794			 
b794					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b794 cd 8a 9c			call macro_dsp_valuehl 
b797				endm 
# End of macro FORTH_DSP_VALUEHL
b797			 
b797 e5					push hl  ; u1 
b798			 
b798					; destroy value TOS 
b798			 
b798					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b798 cd 42 9d			call macro_forth_dsp_pop 
b79b				endm 
# End of macro FORTH_DSP_POP
b79b			 
b79b b7			 or a      ;clear carry flag 
b79c e1			  pop hl    ; u1 
b79d d1			  pop de    ; u2 
b79e e5				push hl   ; saved in case hl is lowest 
b79f ed 52		  sbc hl,de 
b7a1 30 23		  jr nc,.mincont   	;	if hl >= de, carry flag will be cleared 
b7a3			 
b7a3 e1				pop hl 
b7a4					if DEBUG_FORTH_WORDS 
b7a4						DMARK "MIN" 
b7a4 f5				push af  
b7a5 3a b9 b7			ld a, (.dmark)  
b7a8 32 65 ee			ld (debug_mark),a  
b7ab 3a ba b7			ld a, (.dmark+1)  
b7ae 32 66 ee			ld (debug_mark+1),a  
b7b1 3a bb b7			ld a, (.dmark+2)  
b7b4 32 67 ee			ld (debug_mark+2),a  
b7b7 18 03			jr .pastdmark  
b7b9 ..			.dmark: db "MIN"  
b7bc f1			.pastdmark: pop af  
b7bd			endm  
# End of macro DMARK
b7bd						CALLMONITOR 
b7bd cd 6f ee			call debug_vector  
b7c0				endm  
# End of macro CALLMONITOR
b7c0					endif 
b7c0 cd 85 9a				call forth_push_numhl 
b7c3			 
b7c3				       NEXTW 
b7c3 c3 76 9e			jp macro_next 
b7c6				endm 
# End of macro NEXTW
b7c6			 
b7c6			.mincont:  
b7c6 c1				pop bc   ; tidy up 
b7c7 eb				ex de , hl  
b7c8					if DEBUG_FORTH_WORDS 
b7c8						DMARK "MI1" 
b7c8 f5				push af  
b7c9 3a dd b7			ld a, (.dmark)  
b7cc 32 65 ee			ld (debug_mark),a  
b7cf 3a de b7			ld a, (.dmark+1)  
b7d2 32 66 ee			ld (debug_mark+1),a  
b7d5 3a df b7			ld a, (.dmark+2)  
b7d8 32 67 ee			ld (debug_mark+2),a  
b7db 18 03			jr .pastdmark  
b7dd ..			.dmark: db "MI1"  
b7e0 f1			.pastdmark: pop af  
b7e1			endm  
# End of macro DMARK
b7e1						CALLMONITOR 
b7e1 cd 6f ee			call debug_vector  
b7e4				endm  
# End of macro CALLMONITOR
b7e4					endif 
b7e4 cd 85 9a				call forth_push_numhl 
b7e7			 
b7e7				       NEXTW 
b7e7 c3 76 9e			jp macro_next 
b7ea				endm 
# End of macro NEXTW
b7ea			.MAX: 
b7ea				CWHEAD .RND16 54 "MAX" 3 WORD_FLAG_CODE 
b7ea 4a				db WORD_SYS_CORE+54             
b7eb 6b b8			dw .RND16            
b7ed 04				db 3 + 1 
b7ee .. 00			db "MAX",0              
b7f2				endm 
# End of macro CWHEAD
b7f2			; | MAX (  u1 u2 -- u3 )  Whichever is the largest value is pushed back onto the stack | DONE 
b7f2					if DEBUG_FORTH_WORDS_KEY 
b7f2						DMARK "MAX" 
b7f2 f5				push af  
b7f3 3a 07 b8			ld a, (.dmark)  
b7f6 32 65 ee			ld (debug_mark),a  
b7f9 3a 08 b8			ld a, (.dmark+1)  
b7fc 32 66 ee			ld (debug_mark+1),a  
b7ff 3a 09 b8			ld a, (.dmark+2)  
b802 32 67 ee			ld (debug_mark+2),a  
b805 18 03			jr .pastdmark  
b807 ..			.dmark: db "MAX"  
b80a f1			.pastdmark: pop af  
b80b			endm  
# End of macro DMARK
b80b						CALLMONITOR 
b80b cd 6f ee			call debug_vector  
b80e				endm  
# End of macro CALLMONITOR
b80e					endif 
b80e					; get u2 
b80e			 
b80e					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b80e cd 8a 9c			call macro_dsp_valuehl 
b811				endm 
# End of macro FORTH_DSP_VALUEHL
b811			 
b811 e5					push hl   ; u2 
b812			 
b812					; destroy value TOS 
b812			 
b812					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b812 cd 42 9d			call macro_forth_dsp_pop 
b815				endm 
# End of macro FORTH_DSP_POP
b815			 
b815					; get u1 
b815			 
b815					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
b815 cd 8a 9c			call macro_dsp_valuehl 
b818				endm 
# End of macro FORTH_DSP_VALUEHL
b818			 
b818 e5					push hl  ; u1 
b819			 
b819					; destroy value TOS 
b819			 
b819					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
b819 cd 42 9d			call macro_forth_dsp_pop 
b81c				endm 
# End of macro FORTH_DSP_POP
b81c			 
b81c b7			 or a      ;clear carry flag 
b81d e1			  pop hl    ; u1 
b81e d1			  pop de    ; u2 
b81f e5				push hl   ; saved in case hl is lowest 
b820 ed 52		  sbc hl,de 
b822 38 23		  jr c,.maxcont   	;	if hl <= de, carry flag will be cleared 
b824			 
b824 e1				pop hl 
b825					if DEBUG_FORTH_WORDS 
b825						DMARK "MAX" 
b825 f5				push af  
b826 3a 3a b8			ld a, (.dmark)  
b829 32 65 ee			ld (debug_mark),a  
b82c 3a 3b b8			ld a, (.dmark+1)  
b82f 32 66 ee			ld (debug_mark+1),a  
b832 3a 3c b8			ld a, (.dmark+2)  
b835 32 67 ee			ld (debug_mark+2),a  
b838 18 03			jr .pastdmark  
b83a ..			.dmark: db "MAX"  
b83d f1			.pastdmark: pop af  
b83e			endm  
# End of macro DMARK
b83e						CALLMONITOR 
b83e cd 6f ee			call debug_vector  
b841				endm  
# End of macro CALLMONITOR
b841					endif 
b841 cd 85 9a				call forth_push_numhl 
b844			 
b844				       NEXTW 
b844 c3 76 9e			jp macro_next 
b847				endm 
# End of macro NEXTW
b847			 
b847			.maxcont:  
b847 c1				pop bc   ; tidy up 
b848 eb				ex de , hl  
b849					if DEBUG_FORTH_WORDS 
b849						DMARK "MA1" 
b849 f5				push af  
b84a 3a 5e b8			ld a, (.dmark)  
b84d 32 65 ee			ld (debug_mark),a  
b850 3a 5f b8			ld a, (.dmark+1)  
b853 32 66 ee			ld (debug_mark+1),a  
b856 3a 60 b8			ld a, (.dmark+2)  
b859 32 67 ee			ld (debug_mark+2),a  
b85c 18 03			jr .pastdmark  
b85e ..			.dmark: db "MA1"  
b861 f1			.pastdmark: pop af  
b862			endm  
# End of macro DMARK
b862						CALLMONITOR 
b862 cd 6f ee			call debug_vector  
b865				endm  
# End of macro CALLMONITOR
b865					endif 
b865 cd 85 9a				call forth_push_numhl 
b868				       NEXTW 
b868 c3 76 9e			jp macro_next 
b86b				endm 
# End of macro NEXTW
b86b			 
b86b			.RND16: 
b86b				CWHEAD .RND8 58 "RND16" 5 WORD_FLAG_CODE 
b86b 4e				db WORD_SYS_CORE+58             
b86c 9a b8			dw .RND8            
b86e 06				db 5 + 1 
b86f .. 00			db "RND16",0              
b875				endm 
# End of macro CWHEAD
b875			; | RND16 (  -- n ) Generate a random 16bit number and push to stack | DONE 
b875					if DEBUG_FORTH_WORDS_KEY 
b875						DMARK "R16" 
b875 f5				push af  
b876 3a 8a b8			ld a, (.dmark)  
b879 32 65 ee			ld (debug_mark),a  
b87c 3a 8b b8			ld a, (.dmark+1)  
b87f 32 66 ee			ld (debug_mark+1),a  
b882 3a 8c b8			ld a, (.dmark+2)  
b885 32 67 ee			ld (debug_mark+2),a  
b888 18 03			jr .pastdmark  
b88a ..			.dmark: db "R16"  
b88d f1			.pastdmark: pop af  
b88e			endm  
# End of macro DMARK
b88e						CALLMONITOR 
b88e cd 6f ee			call debug_vector  
b891				endm  
# End of macro CALLMONITOR
b891					endif 
b891 cd 11 8c				call prng16  
b894 cd 85 9a				call forth_push_numhl 
b897				       NEXTW 
b897 c3 76 9e			jp macro_next 
b89a				endm 
# End of macro NEXTW
b89a			.RND8: 
b89a				CWHEAD .RND 76 "RND8" 4 WORD_FLAG_CODE 
b89a 60				db WORD_SYS_CORE+76             
b89b cf b8			dw .RND            
b89d 05				db 4 + 1 
b89e .. 00			db "RND8",0              
b8a3				endm 
# End of macro CWHEAD
b8a3			; | RND8 (  -- n ) Generate a random 8bit number and push to stack | DONE 
b8a3					if DEBUG_FORTH_WORDS_KEY 
b8a3						DMARK "RN8" 
b8a3 f5				push af  
b8a4 3a b8 b8			ld a, (.dmark)  
b8a7 32 65 ee			ld (debug_mark),a  
b8aa 3a b9 b8			ld a, (.dmark+1)  
b8ad 32 66 ee			ld (debug_mark+1),a  
b8b0 3a ba b8			ld a, (.dmark+2)  
b8b3 32 67 ee			ld (debug_mark+2),a  
b8b6 18 03			jr .pastdmark  
b8b8 ..			.dmark: db "RN8"  
b8bb f1			.pastdmark: pop af  
b8bc			endm  
# End of macro DMARK
b8bc						CALLMONITOR 
b8bc cd 6f ee			call debug_vector  
b8bf				endm  
# End of macro CALLMONITOR
b8bf					endif 
b8bf 2a a3 eb				ld hl,(xrandc) 
b8c2 23					inc hl 
b8c3 cd 2b 8c				call xrnd 
b8c6 6f					ld l,a	 
b8c7 26 00				ld h,0 
b8c9 cd 85 9a				call forth_push_numhl 
b8cc				       NEXTW 
b8cc c3 76 9e			jp macro_next 
b8cf				endm 
# End of macro NEXTW
b8cf			.RND: 
b8cf				CWHEAD .ENDMATHS 76 "RND" 3 WORD_FLAG_CODE 
b8cf 60				db WORD_SYS_CORE+76             
b8d0 d5 b9			dw .ENDMATHS            
b8d2 04				db 3 + 1 
b8d3 .. 00			db "RND",0              
b8d7				endm 
# End of macro CWHEAD
b8d7			; | RND ( u1 u2 -- u ) Generate a random number no lower than u1 and no higher than u2 and push to stack | DONE 
b8d7			 
b8d7					if DEBUG_FORTH_WORDS_KEY 
b8d7						DMARK "RND" 
b8d7 f5				push af  
b8d8 3a ec b8			ld a, (.dmark)  
b8db 32 65 ee			ld (debug_mark),a  
b8de 3a ed b8			ld a, (.dmark+1)  
b8e1 32 66 ee			ld (debug_mark+1),a  
b8e4 3a ee b8			ld a, (.dmark+2)  
b8e7 32 67 ee			ld (debug_mark+2),a  
b8ea 18 03			jr .pastdmark  
b8ec ..			.dmark: db "RND"  
b8ef f1			.pastdmark: pop af  
b8f0			endm  
# End of macro DMARK
b8f0						CALLMONITOR 
b8f0 cd 6f ee			call debug_vector  
b8f3				endm  
# End of macro CALLMONITOR
b8f3					endif 
b8f3					 
b8f3					FORTH_DSP_VALUEHL    ; upper range 
b8f3 cd 8a 9c			call macro_dsp_valuehl 
b8f6				endm 
# End of macro FORTH_DSP_VALUEHL
b8f6			 
b8f6 22 a7 eb				ld (LFSRSeed), hl	 
b8f9			 
b8f9					if DEBUG_FORTH_WORDS 
b8f9						DMARK "RN1" 
b8f9 f5				push af  
b8fa 3a 0e b9			ld a, (.dmark)  
b8fd 32 65 ee			ld (debug_mark),a  
b900 3a 0f b9			ld a, (.dmark+1)  
b903 32 66 ee			ld (debug_mark+1),a  
b906 3a 10 b9			ld a, (.dmark+2)  
b909 32 67 ee			ld (debug_mark+2),a  
b90c 18 03			jr .pastdmark  
b90e ..			.dmark: db "RN1"  
b911 f1			.pastdmark: pop af  
b912			endm  
# End of macro DMARK
b912						CALLMONITOR 
b912 cd 6f ee			call debug_vector  
b915				endm  
# End of macro CALLMONITOR
b915					endif 
b915					FORTH_DSP_POP 
b915 cd 42 9d			call macro_forth_dsp_pop 
b918				endm 
# End of macro FORTH_DSP_POP
b918			 
b918					FORTH_DSP_VALUEHL    ; low range 
b918 cd 8a 9c			call macro_dsp_valuehl 
b91b				endm 
# End of macro FORTH_DSP_VALUEHL
b91b			 
b91b					if DEBUG_FORTH_WORDS 
b91b						DMARK "RN2" 
b91b f5				push af  
b91c 3a 30 b9			ld a, (.dmark)  
b91f 32 65 ee			ld (debug_mark),a  
b922 3a 31 b9			ld a, (.dmark+1)  
b925 32 66 ee			ld (debug_mark+1),a  
b928 3a 32 b9			ld a, (.dmark+2)  
b92b 32 67 ee			ld (debug_mark+2),a  
b92e 18 03			jr .pastdmark  
b930 ..			.dmark: db "RN2"  
b933 f1			.pastdmark: pop af  
b934			endm  
# End of macro DMARK
b934						CALLMONITOR 
b934 cd 6f ee			call debug_vector  
b937				endm  
# End of macro CALLMONITOR
b937					endif 
b937 22 a9 eb				ld (LFSRSeed+2), hl 
b93a			 
b93a					FORTH_DSP_POP 
b93a cd 42 9d			call macro_forth_dsp_pop 
b93d				endm 
# End of macro FORTH_DSP_POP
b93d			 
b93d e5					push hl 
b93e			 
b93e e1			.inrange:	pop hl 
b93f cd 11 8c				call prng16  
b942					if DEBUG_FORTH_WORDS 
b942						DMARK "RN3" 
b942 f5				push af  
b943 3a 57 b9			ld a, (.dmark)  
b946 32 65 ee			ld (debug_mark),a  
b949 3a 58 b9			ld a, (.dmark+1)  
b94c 32 66 ee			ld (debug_mark+1),a  
b94f 3a 59 b9			ld a, (.dmark+2)  
b952 32 67 ee			ld (debug_mark+2),a  
b955 18 03			jr .pastdmark  
b957 ..			.dmark: db "RN3"  
b95a f1			.pastdmark: pop af  
b95b			endm  
# End of macro DMARK
b95b						CALLMONITOR 
b95b cd 6f ee			call debug_vector  
b95e				endm  
# End of macro CALLMONITOR
b95e					endif 
b95e					 
b95e					; if the range is 8bit knock out the high byte 
b95e			 
b95e ed 5b a7 eb			ld de, (LFSRSeed)     ; check high level 
b962			 
b962 3e 00				ld a, 0 
b964 ba					cp d  
b965 20 1e				jr nz, .hirange 
b967 26 00				ld h, 0   ; knock it down to 8bit 
b969			 
b969					if DEBUG_FORTH_WORDS 
b969						DMARK "RNk" 
b969 f5				push af  
b96a 3a 7e b9			ld a, (.dmark)  
b96d 32 65 ee			ld (debug_mark),a  
b970 3a 7f b9			ld a, (.dmark+1)  
b973 32 66 ee			ld (debug_mark+1),a  
b976 3a 80 b9			ld a, (.dmark+2)  
b979 32 67 ee			ld (debug_mark+2),a  
b97c 18 03			jr .pastdmark  
b97e ..			.dmark: db "RNk"  
b981 f1			.pastdmark: pop af  
b982			endm  
# End of macro DMARK
b982						CALLMONITOR 
b982 cd 6f ee			call debug_vector  
b985				endm  
# End of macro CALLMONITOR
b985					endif 
b985			.hirange:   
b985 e5					push hl  
b986 b7					or a  
b987 ed 52		                sbc hl, de 
b989			 
b989					;call cmp16 
b989			 
b989 30 b3				jr nc, .inrange      ; if hl >= de, carry flag is cleared 
b98b e1					pop hl 
b98c e5					push hl 
b98d			 
b98d					if DEBUG_FORTH_WORDS 
b98d						DMARK "RN4" 
b98d f5				push af  
b98e 3a a2 b9			ld a, (.dmark)  
b991 32 65 ee			ld (debug_mark),a  
b994 3a a3 b9			ld a, (.dmark+1)  
b997 32 66 ee			ld (debug_mark+1),a  
b99a 3a a4 b9			ld a, (.dmark+2)  
b99d 32 67 ee			ld (debug_mark+2),a  
b9a0 18 03			jr .pastdmark  
b9a2 ..			.dmark: db "RN4"  
b9a5 f1			.pastdmark: pop af  
b9a6			endm  
# End of macro DMARK
b9a6						CALLMONITOR 
b9a6 cd 6f ee			call debug_vector  
b9a9				endm  
# End of macro CALLMONITOR
b9a9					endif 
b9a9 ed 5b a9 eb			ld de, (LFSRSeed+2)   ; check low range 
b9ad					;call cmp16 
b9ad				 
b9ad b7					or a  
b9ae ed 52		                sbc hl, de 
b9b0 38 8c				jr c, .inrange 
b9b2			 
b9b2 e1					pop hl 
b9b3					 
b9b3					if DEBUG_FORTH_WORDS 
b9b3						DMARK "RNd" 
b9b3 f5				push af  
b9b4 3a c8 b9			ld a, (.dmark)  
b9b7 32 65 ee			ld (debug_mark),a  
b9ba 3a c9 b9			ld a, (.dmark+1)  
b9bd 32 66 ee			ld (debug_mark+1),a  
b9c0 3a ca b9			ld a, (.dmark+2)  
b9c3 32 67 ee			ld (debug_mark+2),a  
b9c6 18 03			jr .pastdmark  
b9c8 ..			.dmark: db "RNd"  
b9cb f1			.pastdmark: pop af  
b9cc			endm  
# End of macro DMARK
b9cc						CALLMONITOR 
b9cc cd 6f ee			call debug_vector  
b9cf				endm  
# End of macro CALLMONITOR
b9cf					endif 
b9cf			 
b9cf			 
b9cf cd 85 9a				call forth_push_numhl 
b9d2				       NEXTW 
b9d2 c3 76 9e			jp macro_next 
b9d5				endm 
# End of macro NEXTW
b9d5			 
b9d5			.ENDMATHS: 
b9d5			 
b9d5			; eof 
b9d5			 
# End of file forth_words_maths.asm
b9d5			include "forth_words_display.asm" 
b9d5			 
b9d5			; | ## Display Words 
b9d5			 
b9d5			.ACT: 
b9d5			 
b9d5				CWHEAD .INFO 78 "ACTIVE" 6 WORD_FLAG_CODE 
b9d5 62				db WORD_SYS_CORE+78             
b9d6 21 ba			dw .INFO            
b9d8 07				db 6 + 1 
b9d9 .. 00			db "ACTIVE",0              
b9e0				endm 
# End of macro CWHEAD
b9e0			; | ACTIVE ( -- s ) Push the next char for an activity indicator to TOS | DONE 
b9e0			;  
b9e0			; | | To display a pulsing activity indicator in a processing loop do this... 
b9e0			; | | e.g. $ff $00 do active . ..... Your code ..... loop 
b9e0			 
b9e0					if DEBUG_FORTH_WORDS_KEY 
b9e0						DMARK "ACT" 
b9e0 f5				push af  
b9e1 3a f5 b9			ld a, (.dmark)  
b9e4 32 65 ee			ld (debug_mark),a  
b9e7 3a f6 b9			ld a, (.dmark+1)  
b9ea 32 66 ee			ld (debug_mark+1),a  
b9ed 3a f7 b9			ld a, (.dmark+2)  
b9f0 32 67 ee			ld (debug_mark+2),a  
b9f3 18 03			jr .pastdmark  
b9f5 ..			.dmark: db "ACT"  
b9f8 f1			.pastdmark: pop af  
b9f9			endm  
# End of macro DMARK
b9f9						CALLMONITOR 
b9f9 cd 6f ee			call debug_vector  
b9fc				endm  
# End of macro CALLMONITOR
b9fc					endif 
b9fc cd 14 8a				call active 
b9ff					if DEBUG_FORTH_WORDS 
b9ff						DMARK "ACp" 
b9ff f5				push af  
ba00 3a 14 ba			ld a, (.dmark)  
ba03 32 65 ee			ld (debug_mark),a  
ba06 3a 15 ba			ld a, (.dmark+1)  
ba09 32 66 ee			ld (debug_mark+1),a  
ba0c 3a 16 ba			ld a, (.dmark+2)  
ba0f 32 67 ee			ld (debug_mark+2),a  
ba12 18 03			jr .pastdmark  
ba14 ..			.dmark: db "ACp"  
ba17 f1			.pastdmark: pop af  
ba18			endm  
# End of macro DMARK
ba18						CALLMONITOR 
ba18 cd 6f ee			call debug_vector  
ba1b				endm  
# End of macro CALLMONITOR
ba1b					endif 
ba1b cd f3 9a				call forth_push_str 
ba1e			 
ba1e					NEXTW 
ba1e c3 76 9e			jp macro_next 
ba21				endm 
# End of macro NEXTW
ba21			.INFO: 
ba21			 
ba21				CWHEAD .ATP 78 "INFO" 4 WORD_FLAG_CODE 
ba21 62				db WORD_SYS_CORE+78             
ba22 3e ba			dw .ATP            
ba24 05				db 4 + 1 
ba25 .. 00			db "INFO",0              
ba2a				endm 
# End of macro CWHEAD
ba2a			; | INFO ( u1 u2 -- )  Use the top two strings on stack to fill in an info window over two lines. Causes a wait for key press to continue. | DONE 
ba2a					FORTH_DSP_VALUEHL 
ba2a cd 8a 9c			call macro_dsp_valuehl 
ba2d				endm 
# End of macro FORTH_DSP_VALUEHL
ba2d			 
ba2d					FORTH_DSP_POP 
ba2d cd 42 9d			call macro_forth_dsp_pop 
ba30				endm 
# End of macro FORTH_DSP_POP
ba30			 
ba30 e5					push hl 
ba31			 
ba31					FORTH_DSP_VALUEHL 
ba31 cd 8a 9c			call macro_dsp_valuehl 
ba34				endm 
# End of macro FORTH_DSP_VALUEHL
ba34			 
ba34					FORTH_DSP_POP 
ba34 cd 42 9d			call macro_forth_dsp_pop 
ba37				endm 
# End of macro FORTH_DSP_POP
ba37			 
ba37 d1					pop de 
ba38			 
ba38 cd 4e 8a				call info_panel 
ba3b			 
ba3b			 
ba3b					NEXTW 
ba3b c3 76 9e			jp macro_next 
ba3e				endm 
# End of macro NEXTW
ba3e			.ATP: 
ba3e				CWHEAD .FB 78 "AT?" 3 WORD_FLAG_CODE 
ba3e 62				db WORD_SYS_CORE+78             
ba3f b5 ba			dw .FB            
ba41 04				db 3 + 1 
ba42 .. 00			db "AT?",0              
ba46				endm 
# End of macro CWHEAD
ba46			; | AT? ( -- c r )  Push to stack the current position of the next print | TO TEST 
ba46					if DEBUG_FORTH_WORDS_KEY 
ba46						DMARK "AT?" 
ba46 f5				push af  
ba47 3a 5b ba			ld a, (.dmark)  
ba4a 32 65 ee			ld (debug_mark),a  
ba4d 3a 5c ba			ld a, (.dmark+1)  
ba50 32 66 ee			ld (debug_mark+1),a  
ba53 3a 5d ba			ld a, (.dmark+2)  
ba56 32 67 ee			ld (debug_mark+2),a  
ba59 18 03			jr .pastdmark  
ba5b ..			.dmark: db "AT?"  
ba5e f1			.pastdmark: pop af  
ba5f			endm  
# End of macro DMARK
ba5f						CALLMONITOR 
ba5f cd 6f ee			call debug_vector  
ba62				endm  
# End of macro CALLMONITOR
ba62					endif 
ba62 3a 58 ea				ld a, (f_cursor_ptr) 
ba65			 
ba65			if DEBUG_FORTH_WORDS 
ba65				DMARK "AT?" 
ba65 f5				push af  
ba66 3a 7a ba			ld a, (.dmark)  
ba69 32 65 ee			ld (debug_mark),a  
ba6c 3a 7b ba			ld a, (.dmark+1)  
ba6f 32 66 ee			ld (debug_mark+1),a  
ba72 3a 7c ba			ld a, (.dmark+2)  
ba75 32 67 ee			ld (debug_mark+2),a  
ba78 18 03			jr .pastdmark  
ba7a ..			.dmark: db "AT?"  
ba7d f1			.pastdmark: pop af  
ba7e			endm  
# End of macro DMARK
ba7e				CALLMONITOR 
ba7e cd 6f ee			call debug_vector  
ba81				endm  
# End of macro CALLMONITOR
ba81			endif	 
ba81					; count the number of rows 
ba81			 
ba81 06 00				ld b, 0 
ba83 4f			.atpr:		ld c, a    ; save in case we go below zero 
ba84 d6 28				sub display_cols 
ba86 f2 8c ba				jp p, .atprunder 
ba89 04					inc b 
ba8a 18 f7				jr .atpr 
ba8c			.atprunder:	 
ba8c			if DEBUG_FORTH_WORDS 
ba8c				DMARK "A?2" 
ba8c f5				push af  
ba8d 3a a1 ba			ld a, (.dmark)  
ba90 32 65 ee			ld (debug_mark),a  
ba93 3a a2 ba			ld a, (.dmark+1)  
ba96 32 66 ee			ld (debug_mark+1),a  
ba99 3a a3 ba			ld a, (.dmark+2)  
ba9c 32 67 ee			ld (debug_mark+2),a  
ba9f 18 03			jr .pastdmark  
baa1 ..			.dmark: db "A?2"  
baa4 f1			.pastdmark: pop af  
baa5			endm  
# End of macro DMARK
baa5				CALLMONITOR 
baa5 cd 6f ee			call debug_vector  
baa8				endm  
# End of macro CALLMONITOR
baa8			endif	 
baa8 26 00				ld h, 0 
baaa 69					ld l, c 
baab cd 85 9a				call forth_push_numhl 
baae 68					ld l, b  
baaf cd 85 9a				call forth_push_numhl 
bab2			 
bab2			 
bab2				NEXTW 
bab2 c3 76 9e			jp macro_next 
bab5				endm 
# End of macro NEXTW
bab5			 
bab5			.FB: 
bab5				CWHEAD .EMIT 7 "FB" 2 WORD_FLAG_CODE 
bab5 1b				db WORD_SYS_CORE+7             
bab6 03 bb			dw .EMIT            
bab8 03				db 2 + 1 
bab9 .. 00			db "FB",0              
babc				endm 
# End of macro CWHEAD
babc			; | FB ( u -- ) Select frame buffer ID u (1-3)  |  DONE 
babc			; | | Default frame buffer is 1. System uses 0 which can't be selected for system messages etc. 
babc			; | | Selecting the frame buffer wont display unless automatic display is setup (default). 
babc			; | | If automatic display is off then updates will not be shown until DRAW is used. 
babc					if DEBUG_FORTH_WORDS_KEY 
babc						DMARK "FB." 
babc f5				push af  
babd 3a d1 ba			ld a, (.dmark)  
bac0 32 65 ee			ld (debug_mark),a  
bac3 3a d2 ba			ld a, (.dmark+1)  
bac6 32 66 ee			ld (debug_mark+1),a  
bac9 3a d3 ba			ld a, (.dmark+2)  
bacc 32 67 ee			ld (debug_mark+2),a  
bacf 18 03			jr .pastdmark  
bad1 ..			.dmark: db "FB."  
bad4 f1			.pastdmark: pop af  
bad5			endm  
# End of macro DMARK
bad5						CALLMONITOR 
bad5 cd 6f ee			call debug_vector  
bad8				endm  
# End of macro CALLMONITOR
bad8					endif 
bad8			 
bad8					FORTH_DSP_VALUEHL 
bad8 cd 8a 9c			call macro_dsp_valuehl 
badb				endm 
# End of macro FORTH_DSP_VALUEHL
badb			 
badb 7d					ld a, l 
badc fe 01				cp 1 
bade 20 05				jr nz, .fbn1 
bae0 21 0a ed				ld hl, display_fb1 
bae3 18 15				jr .fbset 
bae5 fe 02		.fbn1:		cp 2 
bae7 20 05				jr nz, .fbn2 
bae9 21 c8 eb				ld hl, display_fb2 
baec 18 0c				jr .fbset 
baee fe 03		.fbn2:		cp 3 
baf0 20 05				jr nz, .fbn3 
baf2 21 69 ec				ld hl, display_fb3 
baf5 18 03				jr .fbset 
baf7			.fbn3:		 ; if invalid number select first 
baf7 21 0a ed				ld hl, display_fb1 
bafa 22 c6 eb		.fbset:		ld (display_fb_active), hl 
bafd			 
bafd					FORTH_DSP_POP 
bafd cd 42 9d			call macro_forth_dsp_pop 
bb00				endm 
# End of macro FORTH_DSP_POP
bb00			 
bb00					NEXTW 
bb00 c3 76 9e			jp macro_next 
bb03				endm 
# End of macro NEXTW
bb03			 
bb03			 
bb03			.EMIT: 
bb03				CWHEAD .DOTH 7 "EMIT" 4 WORD_FLAG_CODE 
bb03 1b				db WORD_SYS_CORE+7             
bb04 54 bb			dw .DOTH            
bb06 05				db 4 + 1 
bb07 .. 00			db "EMIT",0              
bb0c				endm 
# End of macro CWHEAD
bb0c			; |  EMIT ( u -- ) Display ascii character  TOS   | DONE 
bb0c					; get value off TOS and display it 
bb0c			 
bb0c					if DEBUG_FORTH_WORDS_KEY 
bb0c						DMARK "EMT" 
bb0c f5				push af  
bb0d 3a 21 bb			ld a, (.dmark)  
bb10 32 65 ee			ld (debug_mark),a  
bb13 3a 22 bb			ld a, (.dmark+1)  
bb16 32 66 ee			ld (debug_mark+1),a  
bb19 3a 23 bb			ld a, (.dmark+2)  
bb1c 32 67 ee			ld (debug_mark+2),a  
bb1f 18 03			jr .pastdmark  
bb21 ..			.dmark: db "EMT"  
bb24 f1			.pastdmark: pop af  
bb25			endm  
# End of macro DMARK
bb25						CALLMONITOR 
bb25 cd 6f ee			call debug_vector  
bb28				endm  
# End of macro CALLMONITOR
bb28					endif 
bb28			 
bb28					FORTH_DSP_VALUEHL 
bb28 cd 8a 9c			call macro_dsp_valuehl 
bb2b				endm 
# End of macro FORTH_DSP_VALUEHL
bb2b			 
bb2b 7d					ld a,l 
bb2c			 
bb2c					; TODO write to display 
bb2c			 
bb2c 32 b9 e4				ld (os_input), a 
bb2f 3e 00				ld a, 0 
bb31 32 ba e4				ld (os_input+1), a 
bb34					 
bb34 3a 58 ea				ld a, (f_cursor_ptr) 
bb37 11 b9 e4				ld de, os_input 
bb3a cd d0 8a				call str_at_display 
bb3d			 
bb3d			 
bb3d 3a 36 ea				ld a,(cli_autodisplay) 
bb40 fe 00				cp 0 
bb42 28 03				jr z, .enoupdate 
bb44 cd e0 8a						call update_display 
bb47					.enoupdate: 
bb47			 
bb47 3a 58 ea				ld a, (f_cursor_ptr) 
bb4a 3c					inc a 
bb4b 32 58 ea				ld (f_cursor_ptr), a   ; save new pos 
bb4e			 
bb4e			 
bb4e					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bb4e cd 42 9d			call macro_forth_dsp_pop 
bb51				endm 
# End of macro FORTH_DSP_POP
bb51			  
bb51			 
bb51					NEXTW 
bb51 c3 76 9e			jp macro_next 
bb54				endm 
# End of macro NEXTW
bb54			.DOTH: 
bb54				CWHEAD .DOTF 8 ".-" 2 WORD_FLAG_CODE 
bb54 1c				db WORD_SYS_CORE+8             
bb55 84 bb			dw .DOTF            
bb57 03				db 2 + 1 
bb58 .. 00			db ".-",0              
bb5b				endm 
# End of macro CWHEAD
bb5b			        ; | .- ( u -- ) Display TOS replacing any dashes with spaces. Means you dont need to wrap strings in double quotes!   | DONE 
bb5b					; get value off TOS and display it 
bb5b					if DEBUG_FORTH_WORDS_KEY 
bb5b						DMARK "DTD" 
bb5b f5				push af  
bb5c 3a 70 bb			ld a, (.dmark)  
bb5f 32 65 ee			ld (debug_mark),a  
bb62 3a 71 bb			ld a, (.dmark+1)  
bb65 32 66 ee			ld (debug_mark+1),a  
bb68 3a 72 bb			ld a, (.dmark+2)  
bb6b 32 67 ee			ld (debug_mark+2),a  
bb6e 18 03			jr .pastdmark  
bb70 ..			.dmark: db "DTD"  
bb73 f1			.pastdmark: pop af  
bb74			endm  
# End of macro DMARK
bb74						CALLMONITOR 
bb74 cd 6f ee			call debug_vector  
bb77				endm  
# End of macro CALLMONITOR
bb77					endif 
bb77 0e 01			ld c, 1	  ; flag for removal of '-' enabled 
bb79 3e 00			ld a, 0 
bb7b 32 37 ea			ld (cli_mvdot), a 
bb7e c3 db bb			jp .dotgo 
bb81				NEXTW 
bb81 c3 76 9e			jp macro_next 
bb84				endm 
# End of macro NEXTW
bb84			.DOTF: 
bb84				CWHEAD .DOT 8 ".>" 2 WORD_FLAG_CODE 
bb84 1c				db WORD_SYS_CORE+8             
bb85 b2 bb			dw .DOT            
bb87 03				db 2 + 1 
bb88 .. 00			db ".>",0              
bb8b				endm 
# End of macro CWHEAD
bb8b			        ; | .> ( u -- ) Display TOS and move the next display point with display  | DONE 
bb8b					; get value off TOS and display it 
bb8b			        ; TODO BUG adds extra spaces 
bb8b			        ; TODO BUG handle numerics? 
bb8b					if DEBUG_FORTH_WORDS_KEY 
bb8b						DMARK "DTC" 
bb8b f5				push af  
bb8c 3a a0 bb			ld a, (.dmark)  
bb8f 32 65 ee			ld (debug_mark),a  
bb92 3a a1 bb			ld a, (.dmark+1)  
bb95 32 66 ee			ld (debug_mark+1),a  
bb98 3a a2 bb			ld a, (.dmark+2)  
bb9b 32 67 ee			ld (debug_mark+2),a  
bb9e 18 03			jr .pastdmark  
bba0 ..			.dmark: db "DTC"  
bba3 f1			.pastdmark: pop af  
bba4			endm  
# End of macro DMARK
bba4						CALLMONITOR 
bba4 cd 6f ee			call debug_vector  
bba7				endm  
# End of macro CALLMONITOR
bba7					endif 
bba7 3e 01			ld a, 1 
bba9 32 37 ea			ld (cli_mvdot), a 
bbac c3 db bb			jp .dotgo 
bbaf				NEXTW 
bbaf c3 76 9e			jp macro_next 
bbb2				endm 
# End of macro NEXTW
bbb2			 
bbb2			.DOT: 
bbb2				CWHEAD .CLS 8 "." 1 WORD_FLAG_CODE 
bbb2 1c				db WORD_SYS_CORE+8             
bbb3 8e bd			dw .CLS            
bbb5 02				db 1 + 1 
bbb6 .. 00			db ".",0              
bbb8				endm 
# End of macro CWHEAD
bbb8			        ; | . ( u -- ) Display TOS. Does not move next print position. Use .> if you want that. | DONE 
bbb8					; get value off TOS and display it 
bbb8			 
bbb8					if DEBUG_FORTH_WORDS_KEY 
bbb8						DMARK "DOT" 
bbb8 f5				push af  
bbb9 3a cd bb			ld a, (.dmark)  
bbbc 32 65 ee			ld (debug_mark),a  
bbbf 3a ce bb			ld a, (.dmark+1)  
bbc2 32 66 ee			ld (debug_mark+1),a  
bbc5 3a cf bb			ld a, (.dmark+2)  
bbc8 32 67 ee			ld (debug_mark+2),a  
bbcb 18 03			jr .pastdmark  
bbcd ..			.dmark: db "DOT"  
bbd0 f1			.pastdmark: pop af  
bbd1			endm  
# End of macro DMARK
bbd1						CALLMONITOR 
bbd1 cd 6f ee			call debug_vector  
bbd4				endm  
# End of macro CALLMONITOR
bbd4					endif 
bbd4 3e 00			ld a, 0 
bbd6 32 37 ea			ld (cli_mvdot), a 
bbd9 0e 00		ld c, 0	  ; flag for removal of '-' disabled 
bbdb				 
bbdb			 
bbdb			.dotgo: 
bbdb			 
bbdb			; move up type to on stack for parserv5 
bbdb					FORTH_DSP 
bbdb cd 50 9c			call macro_forth_dsp 
bbde				endm 
# End of macro FORTH_DSP
bbde				;FORTH_DSP_VALUE  
bbde			 
bbde			if DEBUG_FORTH_DOT 
bbde				DMARK "DOT" 
bbde f5				push af  
bbdf 3a f3 bb			ld a, (.dmark)  
bbe2 32 65 ee			ld (debug_mark),a  
bbe5 3a f4 bb			ld a, (.dmark+1)  
bbe8 32 66 ee			ld (debug_mark+1),a  
bbeb 3a f5 bb			ld a, (.dmark+2)  
bbee 32 67 ee			ld (debug_mark+2),a  
bbf1 18 03			jr .pastdmark  
bbf3 ..			.dmark: db "DOT"  
bbf6 f1			.pastdmark: pop af  
bbf7			endm  
# End of macro DMARK
bbf7				CALLMONITOR 
bbf7 cd 6f ee			call debug_vector  
bbfa				endm  
# End of macro CALLMONITOR
bbfa			endif	 
bbfa			;		.print: 
bbfa			 
bbfa 7e				ld a,(hl)  ; work out what type of value is on the TOS 
bbfb 23				inc hl   ; position to the actual value 
bbfc fe 01			cp DS_TYPE_STR 
bbfe 20 06			jr nz, .dotnum1  
bc00			 
bc00			; display string 
bc00				FORTH_DSP_VALUE  
bc00 cd 73 9c			call macro_forth_dsp_value 
bc03				endm 
# End of macro FORTH_DSP_VALUE
bc03 eb				ex de,hl 
bc04 18 49			jr .dotwrite 
bc06			 
bc06			.dotnum1: 
bc06 fe 02			cp DS_TYPE_INUM 
bc08 20 44			jr nz, .dotflot 
bc0a			 
bc0a			 
bc0a			; display number 
bc0a			 
bc0a			;	push hl 
bc0a			;	call clear_display 
bc0a			;	pop hl 
bc0a			 
bc0a 5e				ld e, (hl) 
bc0b 23				inc hl 
bc0c 56				ld d, (hl) 
bc0d 21 bb e2			ld hl, scratch 
bc10			if DEBUG_FORTH_DOT 
bc10				DMARK "DT1" 
bc10 f5				push af  
bc11 3a 25 bc			ld a, (.dmark)  
bc14 32 65 ee			ld (debug_mark),a  
bc17 3a 26 bc			ld a, (.dmark+1)  
bc1a 32 66 ee			ld (debug_mark+1),a  
bc1d 3a 27 bc			ld a, (.dmark+2)  
bc20 32 67 ee			ld (debug_mark+2),a  
bc23 18 03			jr .pastdmark  
bc25 ..			.dmark: db "DT1"  
bc28 f1			.pastdmark: pop af  
bc29			endm  
# End of macro DMARK
bc29				CALLMONITOR 
bc29 cd 6f ee			call debug_vector  
bc2c				endm  
# End of macro CALLMONITOR
bc2c			endif	 
bc2c			 
bc2c cd ff 8f			call uitoa_16 
bc2f eb				ex de,hl 
bc30			 
bc30			if DEBUG_FORTH_DOT 
bc30				DMARK "DT2" 
bc30 f5				push af  
bc31 3a 45 bc			ld a, (.dmark)  
bc34 32 65 ee			ld (debug_mark),a  
bc37 3a 46 bc			ld a, (.dmark+1)  
bc3a 32 66 ee			ld (debug_mark+1),a  
bc3d 3a 47 bc			ld a, (.dmark+2)  
bc40 32 67 ee			ld (debug_mark+2),a  
bc43 18 03			jr .pastdmark  
bc45 ..			.dmark: db "DT2"  
bc48 f1			.pastdmark: pop af  
bc49			endm  
# End of macro DMARK
bc49				CALLMONITOR 
bc49 cd 6f ee			call debug_vector  
bc4c				endm  
# End of macro CALLMONITOR
bc4c			endif	 
bc4c			 
bc4c			;	ld de, os_word_scratch 
bc4c 18 01			jr .dotwrite 
bc4e			 
bc4e 00			.dotflot:   nop 
bc4f			; TODO print floating point number 
bc4f			 
bc4f			.dotwrite:		 
bc4f			 
bc4f					; if c is set then set all '-' to spaces 
bc4f					; need to also take into account .>  
bc4f			 
bc4f 3e 01				ld a, 1 
bc51 b9					cp c 
bc52 20 67				jr nz, .nodashswap 
bc54			 
bc54					; DE has the string to write, working with HL 
bc54			 
bc54 06 ff				ld b, 255 
bc56 d5					push de 
bc57 e1					pop hl 
bc58			 
bc58			if DEBUG_FORTH_DOT 
bc58				DMARK "DT-" 
bc58 f5				push af  
bc59 3a 6d bc			ld a, (.dmark)  
bc5c 32 65 ee			ld (debug_mark),a  
bc5f 3a 6e bc			ld a, (.dmark+1)  
bc62 32 66 ee			ld (debug_mark+1),a  
bc65 3a 6f bc			ld a, (.dmark+2)  
bc68 32 67 ee			ld (debug_mark+2),a  
bc6b 18 03			jr .pastdmark  
bc6d ..			.dmark: db "DT-"  
bc70 f1			.pastdmark: pop af  
bc71			endm  
# End of macro DMARK
bc71				CALLMONITOR 
bc71 cd 6f ee			call debug_vector  
bc74				endm  
# End of macro CALLMONITOR
bc74			endif	 
bc74 7e			.dashscan:	ld a, (hl) 
bc75 fe 00				cp 0 
bc77 28 42				jr z, .nodashswap 
bc79 fe 2d				cp '-' 
bc7b 20 03				jr nz, .dashskip 
bc7d 3e 20				ld a, ' ' 
bc7f 77					ld (hl), a 
bc80 23			.dashskip:	inc hl 
bc81			if DEBUG_FORTH_DOT 
bc81				DMARK "D-2" 
bc81 f5				push af  
bc82 3a 96 bc			ld a, (.dmark)  
bc85 32 65 ee			ld (debug_mark),a  
bc88 3a 97 bc			ld a, (.dmark+1)  
bc8b 32 66 ee			ld (debug_mark+1),a  
bc8e 3a 98 bc			ld a, (.dmark+2)  
bc91 32 67 ee			ld (debug_mark+2),a  
bc94 18 03			jr .pastdmark  
bc96 ..			.dmark: db "D-2"  
bc99 f1			.pastdmark: pop af  
bc9a			endm  
# End of macro DMARK
bc9a				CALLMONITOR 
bc9a cd 6f ee			call debug_vector  
bc9d				endm  
# End of macro CALLMONITOR
bc9d			endif	 
bc9d 10 d5				djnz .dashscan 
bc9f			 
bc9f			if DEBUG_FORTH_DOT 
bc9f				DMARK "D-1" 
bc9f f5				push af  
bca0 3a b4 bc			ld a, (.dmark)  
bca3 32 65 ee			ld (debug_mark),a  
bca6 3a b5 bc			ld a, (.dmark+1)  
bca9 32 66 ee			ld (debug_mark+1),a  
bcac 3a b6 bc			ld a, (.dmark+2)  
bcaf 32 67 ee			ld (debug_mark+2),a  
bcb2 18 03			jr .pastdmark  
bcb4 ..			.dmark: db "D-1"  
bcb7 f1			.pastdmark: pop af  
bcb8			endm  
# End of macro DMARK
bcb8				CALLMONITOR 
bcb8 cd 6f ee			call debug_vector  
bcbb				endm  
# End of macro CALLMONITOR
bcbb			endif	 
bcbb			 
bcbb			.nodashswap: 
bcbb			 
bcbb			if DEBUG_FORTH_DOT 
bcbb				DMARK "D-o" 
bcbb f5				push af  
bcbc 3a d0 bc			ld a, (.dmark)  
bcbf 32 65 ee			ld (debug_mark),a  
bcc2 3a d1 bc			ld a, (.dmark+1)  
bcc5 32 66 ee			ld (debug_mark+1),a  
bcc8 3a d2 bc			ld a, (.dmark+2)  
bccb 32 67 ee			ld (debug_mark+2),a  
bcce 18 03			jr .pastdmark  
bcd0 ..			.dmark: db "D-o"  
bcd3 f1			.pastdmark: pop af  
bcd4			endm  
# End of macro DMARK
bcd4				CALLMONITOR 
bcd4 cd 6f ee			call debug_vector  
bcd7				endm  
# End of macro CALLMONITOR
bcd7			endif	 
bcd7			 
bcd7 d5					push de   ; save string start in case we need to advance print 
bcd8			 
bcd8 3a 58 ea				ld a, (f_cursor_ptr) 
bcdb cd d0 8a				call str_at_display 
bcde 3a 36 ea				ld a,(cli_autodisplay) 
bce1 fe 00				cp 0 
bce3 28 03				jr z, .noupdate 
bce5 cd e0 8a						call update_display 
bce8					.noupdate: 
bce8			 
bce8			 
bce8					; see if we need to advance the print position 
bce8			 
bce8 e1					pop hl   ; get back string 
bce9			;		ex de,hl 
bce9			 
bce9 3a 37 ea				ld a, (cli_mvdot) 
bcec			if DEBUG_FORTH_DOT 
bcec			;		ld e,a 
bcec				DMARK "D>1" 
bcec f5				push af  
bced 3a 01 bd			ld a, (.dmark)  
bcf0 32 65 ee			ld (debug_mark),a  
bcf3 3a 02 bd			ld a, (.dmark+1)  
bcf6 32 66 ee			ld (debug_mark+1),a  
bcf9 3a 03 bd			ld a, (.dmark+2)  
bcfc 32 67 ee			ld (debug_mark+2),a  
bcff 18 03			jr .pastdmark  
bd01 ..			.dmark: db "D>1"  
bd04 f1			.pastdmark: pop af  
bd05			endm  
# End of macro DMARK
bd05				CALLMONITOR 
bd05 cd 6f ee			call debug_vector  
bd08				endm  
# End of macro CALLMONITOR
bd08			endif	 
bd08 fe 00				cp 0 
bd0a 28 44				jr z, .noadv 
bd0c					; yes, lets advance the print position 
bd0c 3e 00				ld a, 0 
bd0e cd 5b 90				call strlent 
bd11			if DEBUG_FORTH_DOT 
bd11				DMARK "D-?" 
bd11 f5				push af  
bd12 3a 26 bd			ld a, (.dmark)  
bd15 32 65 ee			ld (debug_mark),a  
bd18 3a 27 bd			ld a, (.dmark+1)  
bd1b 32 66 ee			ld (debug_mark+1),a  
bd1e 3a 28 bd			ld a, (.dmark+2)  
bd21 32 67 ee			ld (debug_mark+2),a  
bd24 18 03			jr .pastdmark  
bd26 ..			.dmark: db "D-?"  
bd29 f1			.pastdmark: pop af  
bd2a			endm  
# End of macro DMARK
bd2a				CALLMONITOR 
bd2a cd 6f ee			call debug_vector  
bd2d				endm  
# End of macro CALLMONITOR
bd2d			endif	 
bd2d 3a 58 ea				ld a, (f_cursor_ptr) 
bd30 85					add a,l 
bd31					;call addatohl 
bd31					;ld a, l 
bd31 32 58 ea				ld (f_cursor_ptr), a   ; save new pos 
bd34			 
bd34			if DEBUG_FORTH_DOT 
bd34				DMARK "D->" 
bd34 f5				push af  
bd35 3a 49 bd			ld a, (.dmark)  
bd38 32 65 ee			ld (debug_mark),a  
bd3b 3a 4a bd			ld a, (.dmark+1)  
bd3e 32 66 ee			ld (debug_mark+1),a  
bd41 3a 4b bd			ld a, (.dmark+2)  
bd44 32 67 ee			ld (debug_mark+2),a  
bd47 18 03			jr .pastdmark  
bd49 ..			.dmark: db "D->"  
bd4c f1			.pastdmark: pop af  
bd4d			endm  
# End of macro DMARK
bd4d				CALLMONITOR 
bd4d cd 6f ee			call debug_vector  
bd50				endm  
# End of macro CALLMONITOR
bd50			endif	 
bd50			 
bd50			.noadv:	 
bd50			 
bd50					if DEBUG_FORTH_DOT_WAIT 
bd50							call next_page_prompt 
bd50					endif	 
bd50			; TODO this pop off the stack causes a crash. i dont know why 
bd50			 
bd50			 
bd50			if DEBUG_FORTH_DOT 
bd50				DMARK "DTh" 
bd50 f5				push af  
bd51 3a 65 bd			ld a, (.dmark)  
bd54 32 65 ee			ld (debug_mark),a  
bd57 3a 66 bd			ld a, (.dmark+1)  
bd5a 32 66 ee			ld (debug_mark+1),a  
bd5d 3a 67 bd			ld a, (.dmark+2)  
bd60 32 67 ee			ld (debug_mark+2),a  
bd63 18 03			jr .pastdmark  
bd65 ..			.dmark: db "DTh"  
bd68 f1			.pastdmark: pop af  
bd69			endm  
# End of macro DMARK
bd69				CALLMONITOR 
bd69 cd 6f ee			call debug_vector  
bd6c				endm  
# End of macro CALLMONITOR
bd6c			endif	 
bd6c			 
bd6c					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bd6c cd 42 9d			call macro_forth_dsp_pop 
bd6f				endm 
# End of macro FORTH_DSP_POP
bd6f			 
bd6f			if DEBUG_FORTH_DOT 
bd6f				DMARK "DTi" 
bd6f f5				push af  
bd70 3a 84 bd			ld a, (.dmark)  
bd73 32 65 ee			ld (debug_mark),a  
bd76 3a 85 bd			ld a, (.dmark+1)  
bd79 32 66 ee			ld (debug_mark+1),a  
bd7c 3a 86 bd			ld a, (.dmark+2)  
bd7f 32 67 ee			ld (debug_mark+2),a  
bd82 18 03			jr .pastdmark  
bd84 ..			.dmark: db "DTi"  
bd87 f1			.pastdmark: pop af  
bd88			endm  
# End of macro DMARK
bd88				CALLMONITOR 
bd88 cd 6f ee			call debug_vector  
bd8b				endm  
# End of macro CALLMONITOR
bd8b			endif	 
bd8b			 
bd8b			 
bd8b					NEXTW 
bd8b c3 76 9e			jp macro_next 
bd8e				endm 
# End of macro NEXTW
bd8e			 
bd8e			.CLS: 
bd8e				CWHEAD .DRAW 33 "CLS" 3 WORD_FLAG_CODE 
bd8e 35				db WORD_SYS_CORE+33             
bd8f bb bd			dw .DRAW            
bd91 04				db 3 + 1 
bd92 .. 00			db "CLS",0              
bd96				endm 
# End of macro CWHEAD
bd96			; | CLS ( -- ) Clear current frame buffer and set next print position to top left corner  | DONE 
bd96					if DEBUG_FORTH_WORDS_KEY 
bd96						DMARK "CLS" 
bd96 f5				push af  
bd97 3a ab bd			ld a, (.dmark)  
bd9a 32 65 ee			ld (debug_mark),a  
bd9d 3a ac bd			ld a, (.dmark+1)  
bda0 32 66 ee			ld (debug_mark+1),a  
bda3 3a ad bd			ld a, (.dmark+2)  
bda6 32 67 ee			ld (debug_mark+2),a  
bda9 18 03			jr .pastdmark  
bdab ..			.dmark: db "CLS"  
bdae f1			.pastdmark: pop af  
bdaf			endm  
# End of macro DMARK
bdaf						CALLMONITOR 
bdaf cd 6f ee			call debug_vector  
bdb2				endm  
# End of macro CALLMONITOR
bdb2					endif 
bdb2 cd bd 8a				call clear_display 
bdb5 c3 c9 be				jp .home		; and home cursor 
bdb8					NEXTW 
bdb8 c3 76 9e			jp macro_next 
bdbb				endm 
# End of macro NEXTW
bdbb			 
bdbb			.DRAW: 
bdbb				CWHEAD .DUMP 34 "DRAW" 4 WORD_FLAG_CODE 
bdbb 36				db WORD_SYS_CORE+34             
bdbc e6 bd			dw .DUMP            
bdbe 05				db 4 + 1 
bdbf .. 00			db "DRAW",0              
bdc4				endm 
# End of macro CWHEAD
bdc4			; | DRAW ( -- ) Draw contents of current frame buffer  | DONE 
bdc4					if DEBUG_FORTH_WORDS_KEY 
bdc4						DMARK "DRW" 
bdc4 f5				push af  
bdc5 3a d9 bd			ld a, (.dmark)  
bdc8 32 65 ee			ld (debug_mark),a  
bdcb 3a da bd			ld a, (.dmark+1)  
bdce 32 66 ee			ld (debug_mark+1),a  
bdd1 3a db bd			ld a, (.dmark+2)  
bdd4 32 67 ee			ld (debug_mark+2),a  
bdd7 18 03			jr .pastdmark  
bdd9 ..			.dmark: db "DRW"  
bddc f1			.pastdmark: pop af  
bddd			endm  
# End of macro DMARK
bddd						CALLMONITOR 
bddd cd 6f ee			call debug_vector  
bde0				endm  
# End of macro CALLMONITOR
bde0					endif 
bde0 cd e0 8a				call update_display 
bde3					NEXTW 
bde3 c3 76 9e			jp macro_next 
bde6				endm 
# End of macro NEXTW
bde6			 
bde6			.DUMP: 
bde6				CWHEAD .CDUMP 35 "DUMP" 4 WORD_FLAG_CODE 
bde6 37				db WORD_SYS_CORE+35             
bde7 1e be			dw .CDUMP            
bde9 05				db 4 + 1 
bdea .. 00			db "DUMP",0              
bdef				endm 
# End of macro CWHEAD
bdef			; | DUMP ( x -- ) With address x display dump   | DONE 
bdef			; TODO pop address to use off of the stack 
bdef					if DEBUG_FORTH_WORDS_KEY 
bdef						DMARK "DUM" 
bdef f5				push af  
bdf0 3a 04 be			ld a, (.dmark)  
bdf3 32 65 ee			ld (debug_mark),a  
bdf6 3a 05 be			ld a, (.dmark+1)  
bdf9 32 66 ee			ld (debug_mark+1),a  
bdfc 3a 06 be			ld a, (.dmark+2)  
bdff 32 67 ee			ld (debug_mark+2),a  
be02 18 03			jr .pastdmark  
be04 ..			.dmark: db "DUM"  
be07 f1			.pastdmark: pop af  
be08			endm  
# End of macro DMARK
be08						CALLMONITOR 
be08 cd 6f ee			call debug_vector  
be0b				endm  
# End of macro CALLMONITOR
be0b					endif 
be0b cd bd 8a				call clear_display 
be0e			 
be0e					; get address 
be0e			 
be0e					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
be0e cd 8a 9c			call macro_dsp_valuehl 
be11				endm 
# End of macro FORTH_DSP_VALUEHL
be11				 
be11					; save it for cdump 
be11			 
be11 22 de e5				ld (os_cur_ptr),hl 
be14			 
be14					; destroy value TOS 
be14			 
be14					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
be14 cd 42 9d			call macro_forth_dsp_pop 
be17				endm 
# End of macro FORTH_DSP_POP
be17			 
be17 cd 05 99				call dumpcont	; skip old style of param parsing	 
be1a c9					ret			; TODO command causes end of remaining parsing so cant do: $0000 DUMP $8000 DUMP 
be1b					NEXTW 
be1b c3 76 9e			jp macro_next 
be1e				endm 
# End of macro NEXTW
be1e			.CDUMP: 
be1e				CWHEAD .DAT 36 "CDUMP" 5 WORD_FLAG_CODE 
be1e 38				db WORD_SYS_CORE+36             
be1f 4e be			dw .DAT            
be21 06				db 5 + 1 
be22 .. 00			db "CDUMP",0              
be28				endm 
# End of macro CWHEAD
be28			; | CDUMP ( -- ) Continue dump of memory from DUMP | DONE 
be28					if DEBUG_FORTH_WORDS_KEY 
be28						DMARK "CDP" 
be28 f5				push af  
be29 3a 3d be			ld a, (.dmark)  
be2c 32 65 ee			ld (debug_mark),a  
be2f 3a 3e be			ld a, (.dmark+1)  
be32 32 66 ee			ld (debug_mark+1),a  
be35 3a 3f be			ld a, (.dmark+2)  
be38 32 67 ee			ld (debug_mark+2),a  
be3b 18 03			jr .pastdmark  
be3d ..			.dmark: db "CDP"  
be40 f1			.pastdmark: pop af  
be41			endm  
# End of macro DMARK
be41						CALLMONITOR 
be41 cd 6f ee			call debug_vector  
be44				endm  
# End of macro CALLMONITOR
be44					endif 
be44 cd bd 8a				call clear_display 
be47 cd 05 99				call dumpcont	 
be4a c9					ret			; TODO command causes end of remaining parsing so cant do: $0000 DUMP CDUMP $8000 DUMP 
be4b					NEXTW 
be4b c3 76 9e			jp macro_next 
be4e				endm 
# End of macro NEXTW
be4e			 
be4e			 
be4e			 
be4e			 
be4e			.DAT: 
be4e				CWHEAD .HOME 41 "AT" 2 WORD_FLAG_CODE 
be4e 3d				db WORD_SYS_CORE+41             
be4f a4 be			dw .HOME            
be51 03				db 2 + 1 
be52 .. 00			db "AT",0              
be55				endm 
# End of macro CWHEAD
be55			; | AT ( u1 u2 -- ) Set next output via . or emit at row u2 col u1 | DONE 
be55					if DEBUG_FORTH_WORDS_KEY 
be55						DMARK "AT." 
be55 f5				push af  
be56 3a 6a be			ld a, (.dmark)  
be59 32 65 ee			ld (debug_mark),a  
be5c 3a 6b be			ld a, (.dmark+1)  
be5f 32 66 ee			ld (debug_mark+1),a  
be62 3a 6c be			ld a, (.dmark+2)  
be65 32 67 ee			ld (debug_mark+2),a  
be68 18 03			jr .pastdmark  
be6a ..			.dmark: db "AT."  
be6d f1			.pastdmark: pop af  
be6e			endm  
# End of macro DMARK
be6e						CALLMONITOR 
be6e cd 6f ee			call debug_vector  
be71				endm  
# End of macro CALLMONITOR
be71					endif 
be71					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
be71 cd 8a 9c			call macro_dsp_valuehl 
be74				endm 
# End of macro FORTH_DSP_VALUEHL
be74			 
be74			 
be74					; TODO save cursor row 
be74 7d					ld a,l 
be75 fe 02				cp 2 
be77 20 04				jr nz, .crow3 
be79 3e 28				ld a, display_row_2 
be7b 18 12				jr .ccol1 
be7d fe 03		.crow3:		cp 3 
be7f 20 04				jr nz, .crow4 
be81 3e 50				ld a, display_row_3 
be83 18 0a				jr .ccol1 
be85 fe 04		.crow4:		cp 4 
be87 20 04				jr nz, .crow1 
be89 3e 78				ld a, display_row_4 
be8b 18 02				jr .ccol1 
be8d 3e 00		.crow1:		ld a,display_row_1 
be8f f5			.ccol1:		push af			; got row offset 
be90 6f					ld l,a 
be91 26 00				ld h,0 
be93					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
be93 cd 42 9d			call macro_forth_dsp_pop 
be96				endm 
# End of macro FORTH_DSP_POP
be96					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
be96 cd 8a 9c			call macro_dsp_valuehl 
be99				endm 
# End of macro FORTH_DSP_VALUEHL
be99					; TODO save cursor col 
be99 f1					pop af 
be9a 85					add l		; add col offset 
be9b 32 58 ea				ld (f_cursor_ptr), a 
be9e					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
be9e cd 42 9d			call macro_forth_dsp_pop 
bea1				endm 
# End of macro FORTH_DSP_POP
bea1			 
bea1					; calculate  
bea1			 
bea1					NEXTW 
bea1 c3 76 9e			jp macro_next 
bea4				endm 
# End of macro NEXTW
bea4			 
bea4			 
bea4			.HOME: 
bea4				CWHEAD .CR 45 "HOME" 4 WORD_FLAG_CODE 
bea4 41				db WORD_SYS_CORE+45             
bea5 d1 be			dw .CR            
bea7 05				db 4 + 1 
bea8 .. 00			db "HOME",0              
bead				endm 
# End of macro CWHEAD
bead			; | HOME ( -- ) Reset the current cursor for output to home | DONE 
bead					if DEBUG_FORTH_WORDS_KEY 
bead						DMARK "HOM" 
bead f5				push af  
beae 3a c2 be			ld a, (.dmark)  
beb1 32 65 ee			ld (debug_mark),a  
beb4 3a c3 be			ld a, (.dmark+1)  
beb7 32 66 ee			ld (debug_mark+1),a  
beba 3a c4 be			ld a, (.dmark+2)  
bebd 32 67 ee			ld (debug_mark+2),a  
bec0 18 03			jr .pastdmark  
bec2 ..			.dmark: db "HOM"  
bec5 f1			.pastdmark: pop af  
bec6			endm  
# End of macro DMARK
bec6						CALLMONITOR 
bec6 cd 6f ee			call debug_vector  
bec9				endm  
# End of macro CALLMONITOR
bec9					endif 
bec9 3e 00		.home:		ld a, 0		; and home cursor 
becb 32 58 ea				ld (f_cursor_ptr), a 
bece					NEXTW 
bece c3 76 9e			jp macro_next 
bed1				endm 
# End of macro NEXTW
bed1			 
bed1			 
bed1			.CR: 
bed1				CWHEAD .SPACE 50 "CR" 2 WORD_FLAG_CODE 
bed1 46				db WORD_SYS_CORE+50             
bed2 0c bf			dw .SPACE            
bed4 03				db 2 + 1 
bed5 .. 00			db "CR",0              
bed8				endm 
# End of macro CWHEAD
bed8			; | CR (  -- s ) Push CR/LF pair onto the stack as a string  | DONE 
bed8					if DEBUG_FORTH_WORDS_KEY 
bed8						DMARK "CR." 
bed8 f5				push af  
bed9 3a ed be			ld a, (.dmark)  
bedc 32 65 ee			ld (debug_mark),a  
bedf 3a ee be			ld a, (.dmark+1)  
bee2 32 66 ee			ld (debug_mark+1),a  
bee5 3a ef be			ld a, (.dmark+2)  
bee8 32 67 ee			ld (debug_mark+2),a  
beeb 18 03			jr .pastdmark  
beed ..			.dmark: db "CR."  
bef0 f1			.pastdmark: pop af  
bef1			endm  
# End of macro DMARK
bef1						CALLMONITOR 
bef1 cd 6f ee			call debug_vector  
bef4				endm  
# End of macro CALLMONITOR
bef4					endif 
bef4 3e 0d				ld a, 13 
bef6 32 bb e2				ld (scratch),a 
bef9 3e 0a				ld a, 10 
befb 32 bc e2				ld (scratch+1),a 
befe 3e 00				ld a, 0 
bf00 32 bd e2				ld (scratch+2),a 
bf03 21 bb e2				ld hl, scratch 
bf06 cd f3 9a				call forth_push_str 
bf09					 
bf09				       NEXTW 
bf09 c3 76 9e			jp macro_next 
bf0c				endm 
# End of macro NEXTW
bf0c			.SPACE: 
bf0c				CWHEAD .SPACES 50 "BL" 2 WORD_FLAG_CODE 
bf0c 46				db WORD_SYS_CORE+50             
bf0d 42 bf			dw .SPACES            
bf0f 03				db 2 + 1 
bf10 .. 00			db "BL",0              
bf13				endm 
# End of macro CWHEAD
bf13			; | BL (  -- c ) Push the value of space onto the stack as a string  | DONE 
bf13					if DEBUG_FORTH_WORDS_KEY 
bf13						DMARK "BL." 
bf13 f5				push af  
bf14 3a 28 bf			ld a, (.dmark)  
bf17 32 65 ee			ld (debug_mark),a  
bf1a 3a 29 bf			ld a, (.dmark+1)  
bf1d 32 66 ee			ld (debug_mark+1),a  
bf20 3a 2a bf			ld a, (.dmark+2)  
bf23 32 67 ee			ld (debug_mark+2),a  
bf26 18 03			jr .pastdmark  
bf28 ..			.dmark: db "BL."  
bf2b f1			.pastdmark: pop af  
bf2c			endm  
# End of macro DMARK
bf2c						CALLMONITOR 
bf2c cd 6f ee			call debug_vector  
bf2f				endm  
# End of macro CALLMONITOR
bf2f					endif 
bf2f 3e 20				ld a, " " 
bf31 32 bb e2				ld (scratch),a 
bf34 3e 00				ld a, 0 
bf36 32 bc e2				ld (scratch+1),a 
bf39 21 bb e2				ld hl, scratch 
bf3c cd f3 9a				call forth_push_str 
bf3f					 
bf3f				       NEXTW 
bf3f c3 76 9e			jp macro_next 
bf42				endm 
# End of macro NEXTW
bf42			 
bf42			;.blstr: db " ", 0 
bf42			 
bf42			.SPACES: 
bf42				CWHEAD .SCROLL 51 "SPACES" 6 WORD_FLAG_CODE 
bf42 47				db WORD_SYS_CORE+51             
bf43 dd bf			dw .SCROLL            
bf45 07				db 6 + 1 
bf46 .. 00			db "SPACES",0              
bf4d				endm 
# End of macro CWHEAD
bf4d			; | SPACES ( u -- str ) A string of u spaces is pushed onto the stack | DONE 
bf4d					if DEBUG_FORTH_WORDS_KEY 
bf4d						DMARK "SPS" 
bf4d f5				push af  
bf4e 3a 62 bf			ld a, (.dmark)  
bf51 32 65 ee			ld (debug_mark),a  
bf54 3a 63 bf			ld a, (.dmark+1)  
bf57 32 66 ee			ld (debug_mark+1),a  
bf5a 3a 64 bf			ld a, (.dmark+2)  
bf5d 32 67 ee			ld (debug_mark+2),a  
bf60 18 03			jr .pastdmark  
bf62 ..			.dmark: db "SPS"  
bf65 f1			.pastdmark: pop af  
bf66			endm  
# End of macro DMARK
bf66						CALLMONITOR 
bf66 cd 6f ee			call debug_vector  
bf69				endm  
# End of macro CALLMONITOR
bf69					endif 
bf69			 
bf69			 
bf69					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
bf69 cd 8a 9c			call macro_dsp_valuehl 
bf6c				endm 
# End of macro FORTH_DSP_VALUEHL
bf6c			 
bf6c e5					push hl    ; u 
bf6d					if DEBUG_FORTH_WORDS 
bf6d						DMARK "SPA" 
bf6d f5				push af  
bf6e 3a 82 bf			ld a, (.dmark)  
bf71 32 65 ee			ld (debug_mark),a  
bf74 3a 83 bf			ld a, (.dmark+1)  
bf77 32 66 ee			ld (debug_mark+1),a  
bf7a 3a 84 bf			ld a, (.dmark+2)  
bf7d 32 67 ee			ld (debug_mark+2),a  
bf80 18 03			jr .pastdmark  
bf82 ..			.dmark: db "SPA"  
bf85 f1			.pastdmark: pop af  
bf86			endm  
# End of macro DMARK
bf86						CALLMONITOR 
bf86 cd 6f ee			call debug_vector  
bf89				endm  
# End of macro CALLMONITOR
bf89					endif 
bf89			 
bf89					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
bf89 cd 42 9d			call macro_forth_dsp_pop 
bf8c				endm 
# End of macro FORTH_DSP_POP
bf8c e1					pop hl 
bf8d 0e 00				ld c, 0 
bf8f 45					ld b, l 
bf90 21 bb e2				ld hl, scratch  
bf93			 
bf93					if DEBUG_FORTH_WORDS 
bf93						DMARK "SP2" 
bf93 f5				push af  
bf94 3a a8 bf			ld a, (.dmark)  
bf97 32 65 ee			ld (debug_mark),a  
bf9a 3a a9 bf			ld a, (.dmark+1)  
bf9d 32 66 ee			ld (debug_mark+1),a  
bfa0 3a aa bf			ld a, (.dmark+2)  
bfa3 32 67 ee			ld (debug_mark+2),a  
bfa6 18 03			jr .pastdmark  
bfa8 ..			.dmark: db "SP2"  
bfab f1			.pastdmark: pop af  
bfac			endm  
# End of macro DMARK
bfac						CALLMONITOR 
bfac cd 6f ee			call debug_vector  
bfaf				endm  
# End of macro CALLMONITOR
bfaf					endif 
bfaf 3e 20				ld a, ' ' 
bfb1			.spaces1:	 
bfb1 77					ld (hl),a 
bfb2 23					inc hl 
bfb3					 
bfb3 10 fc				djnz .spaces1 
bfb5 3e 00				ld a,0 
bfb7 77					ld (hl),a 
bfb8 21 bb e2				ld hl, scratch 
bfbb					if DEBUG_FORTH_WORDS 
bfbb						DMARK "SP3" 
bfbb f5				push af  
bfbc 3a d0 bf			ld a, (.dmark)  
bfbf 32 65 ee			ld (debug_mark),a  
bfc2 3a d1 bf			ld a, (.dmark+1)  
bfc5 32 66 ee			ld (debug_mark+1),a  
bfc8 3a d2 bf			ld a, (.dmark+2)  
bfcb 32 67 ee			ld (debug_mark+2),a  
bfce 18 03			jr .pastdmark  
bfd0 ..			.dmark: db "SP3"  
bfd3 f1			.pastdmark: pop af  
bfd4			endm  
# End of macro DMARK
bfd4						CALLMONITOR 
bfd4 cd 6f ee			call debug_vector  
bfd7				endm  
# End of macro CALLMONITOR
bfd7					endif 
bfd7 cd f3 9a				call forth_push_str 
bfda			 
bfda				       NEXTW 
bfda c3 76 9e			jp macro_next 
bfdd				endm 
# End of macro NEXTW
bfdd			 
bfdd			 
bfdd			 
bfdd			.SCROLL: 
bfdd				CWHEAD .SCROLLD 63 "SCROLL" 6 WORD_FLAG_CODE 
bfdd 53				db WORD_SYS_CORE+63             
bfde 0a c0			dw .SCROLLD            
bfe0 07				db 6 + 1 
bfe1 .. 00			db "SCROLL",0              
bfe8				endm 
# End of macro CWHEAD
bfe8			; | SCROLL ( -- ) Scroll up one line - next write will update if required | DONE 
bfe8					if DEBUG_FORTH_WORDS_KEY 
bfe8						DMARK "SCR" 
bfe8 f5				push af  
bfe9 3a fd bf			ld a, (.dmark)  
bfec 32 65 ee			ld (debug_mark),a  
bfef 3a fe bf			ld a, (.dmark+1)  
bff2 32 66 ee			ld (debug_mark+1),a  
bff5 3a ff bf			ld a, (.dmark+2)  
bff8 32 67 ee			ld (debug_mark+2),a  
bffb 18 03			jr .pastdmark  
bffd ..			.dmark: db "SCR"  
c000 f1			.pastdmark: pop af  
c001			endm  
# End of macro DMARK
c001						CALLMONITOR 
c001 cd 6f ee			call debug_vector  
c004				endm  
# End of macro CALLMONITOR
c004					endif 
c004			 
c004 cd 7f 8a			call scroll_up 
c007			;	call update_display 
c007			 
c007					NEXTW 
c007 c3 76 9e			jp macro_next 
c00a				endm 
# End of macro NEXTW
c00a			 
c00a			 
c00a			 
c00a			;		; get dir 
c00a			; 
c00a			;		FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
c00a			; 
c00a			;		push hl 
c00a			; 
c00a			;		; destroy value TOS 
c00a			; 
c00a			;		FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c00a			; 
c00a			;		; get count 
c00a			; 
c00a			;		FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
c00a			; 
c00a			;		push hl 
c00a			; 
c00a			;		; destroy value TOS 
c00a			; 
c00a			;		FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c00a			; 
c00a			;		; one value on hl get other one back 
c00a			; 
c00a			;		pop bc    ; count 
c00a			; 
c00a			;		pop de   ; dir 
c00a			; 
c00a			; 
c00a			;		ld b, c 
c00a			; 
c00a			;.scrolldir:     push bc 
c00a			;		push de 
c00a			; 
c00a			;		ld a, 0 
c00a			;		cp e 
c00a			;		jr z, .scrollup  
c00a			;		call scroll_down 
c00a			;		jr .scrollnext 
c00a			;.scrollup:	call scroll_up 
c00a			; 
c00a			;		 
c00a			;.scrollnext: 
c00a			;		pop de 
c00a			;		pop bc 
c00a			;		djnz .scrolldir 
c00a			; 
c00a			; 
c00a			; 
c00a			; 
c00a			; 
c00a			;		NEXTW 
c00a			 
c00a			.SCROLLD: 
c00a				CWHEAD .ATQ 63 "SCROLLD" 7 WORD_FLAG_CODE 
c00a 53				db WORD_SYS_CORE+63             
c00b 38 c0			dw .ATQ            
c00d 08				db 7 + 1 
c00e .. 00			db "SCROLLD",0              
c016				endm 
# End of macro CWHEAD
c016			; | SCROLLD ( -- ) Scroll down one line - next write will update if required | TO DO 
c016					if DEBUG_FORTH_WORDS_KEY 
c016						DMARK "SCD" 
c016 f5				push af  
c017 3a 2b c0			ld a, (.dmark)  
c01a 32 65 ee			ld (debug_mark),a  
c01d 3a 2c c0			ld a, (.dmark+1)  
c020 32 66 ee			ld (debug_mark+1),a  
c023 3a 2d c0			ld a, (.dmark+2)  
c026 32 67 ee			ld (debug_mark+2),a  
c029 18 03			jr .pastdmark  
c02b ..			.dmark: db "SCD"  
c02e f1			.pastdmark: pop af  
c02f			endm  
# End of macro DMARK
c02f						CALLMONITOR 
c02f cd 6f ee			call debug_vector  
c032				endm  
# End of macro CALLMONITOR
c032					endif 
c032			 
c032 cd a3 8a			call scroll_down 
c035			;	call update_display 
c035			 
c035					NEXTW 
c035 c3 76 9e			jp macro_next 
c038				endm 
# End of macro NEXTW
c038			 
c038			 
c038			.ATQ: 
c038				CWHEAD .AUTODSP 78 "AT@" 3 WORD_FLAG_CODE 
c038 62				db WORD_SYS_CORE+78             
c039 96 c0			dw .AUTODSP            
c03b 04				db 3 + 1 
c03c .. 00			db "AT@",0              
c040				endm 
# End of macro CWHEAD
c040			; | AT@ ( u1 u2 -- n ) Push to stack ASCII value at row u2 col u1 | DONE 
c040					if DEBUG_FORTH_WORDS_KEY 
c040						DMARK "ATA" 
c040 f5				push af  
c041 3a 55 c0			ld a, (.dmark)  
c044 32 65 ee			ld (debug_mark),a  
c047 3a 56 c0			ld a, (.dmark+1)  
c04a 32 66 ee			ld (debug_mark+1),a  
c04d 3a 57 c0			ld a, (.dmark+2)  
c050 32 67 ee			ld (debug_mark+2),a  
c053 18 03			jr .pastdmark  
c055 ..			.dmark: db "ATA"  
c058 f1			.pastdmark: pop af  
c059			endm  
# End of macro DMARK
c059						CALLMONITOR 
c059 cd 6f ee			call debug_vector  
c05c				endm  
# End of macro CALLMONITOR
c05c					endif 
c05c			 
c05c			 
c05c					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
c05c cd 8a 9c			call macro_dsp_valuehl 
c05f				endm 
# End of macro FORTH_DSP_VALUEHL
c05f			 
c05f					; TODO save cursor row 
c05f 7d					ld a,l 
c060 fe 02				cp 2 
c062 20 04				jr nz, .crow3aq 
c064 3e 28				ld a, display_row_2 
c066 18 12				jr .ccol1aq 
c068 fe 03		.crow3aq:		cp 3 
c06a 20 04				jr nz, .crow4aq 
c06c 3e 50				ld a, display_row_3 
c06e 18 0a				jr .ccol1aq 
c070 fe 04		.crow4aq:		cp 4 
c072 20 04				jr nz, .crow1aq 
c074 3e 78				ld a, display_row_4 
c076 18 02				jr .ccol1aq 
c078 3e 00		.crow1aq:		ld a,display_row_1 
c07a f5			.ccol1aq:		push af			; got row offset 
c07b 6f					ld l,a 
c07c 26 00				ld h,0 
c07e					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c07e cd 42 9d			call macro_forth_dsp_pop 
c081				endm 
# End of macro FORTH_DSP_POP
c081					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
c081 cd 8a 9c			call macro_dsp_valuehl 
c084				endm 
# End of macro FORTH_DSP_VALUEHL
c084					; TODO save cursor col 
c084 f1					pop af 
c085 85					add l		; add col offset 
c086			 
c086					; add current frame buffer address 
c086 2a c6 eb				ld hl, (display_fb_active) 
c089 cd ea 8c				call addatohl 
c08c			 
c08c			 
c08c			 
c08c			 
c08c					; get char frame buffer location offset in hl 
c08c			 
c08c 7e					ld a,(hl) 
c08d 26 00				ld h, 0 
c08f 6f					ld l, a 
c090			 
c090 cd 85 9a				call forth_push_numhl 
c093			 
c093			 
c093					NEXTW 
c093 c3 76 9e			jp macro_next 
c096				endm 
# End of macro NEXTW
c096			 
c096			.AUTODSP: 
c096				CWHEAD .MENU 79 "ADSP" 4 WORD_FLAG_CODE 
c096 63				db WORD_SYS_CORE+79             
c097 ac c0			dw .MENU            
c099 05				db 4 + 1 
c09a .. 00			db "ADSP",0              
c09f				endm 
# End of macro CWHEAD
c09f			; | ADSP ( u1 --  ) Enable/Disable Auto screen updates (SLOW). | DONE 
c09f			; | | If off, use DRAW to refresh. Default is on. $0003 will enable direct screen writes (TODO)  
c09f			 
c09f					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
c09f cd 8a 9c			call macro_dsp_valuehl 
c0a2				endm 
# End of macro FORTH_DSP_VALUEHL
c0a2			 
c0a2			;		push hl 
c0a2			 
c0a2					; destroy value TOS 
c0a2			 
c0a2					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c0a2 cd 42 9d			call macro_forth_dsp_pop 
c0a5				endm 
# End of macro FORTH_DSP_POP
c0a5			 
c0a5			;		pop hl 
c0a5			 
c0a5 7d					ld a,l 
c0a6 32 36 ea				ld (cli_autodisplay), a 
c0a9				       NEXTW 
c0a9 c3 76 9e			jp macro_next 
c0ac				endm 
# End of macro NEXTW
c0ac			 
c0ac			.MENU: 
c0ac				CWHEAD .ENDDISPLAY 92 "MENU" 4 WORD_FLAG_CODE 
c0ac 70				db WORD_SYS_CORE+92             
c0ad 55 c1			dw .ENDDISPLAY            
c0af 05				db 4 + 1 
c0b0 .. 00			db "MENU",0              
c0b5				endm 
# End of macro CWHEAD
c0b5			; | MENU ( u1....ux n -- n ) Create a menu. n is the number of menu items on stack. Push number selection to TOS | DONE 
c0b5			 
c0b5			;		; get number of items on the stack 
c0b5			; 
c0b5				 
c0b5					FORTH_DSP_VALUEHL 
c0b5 cd 8a 9c			call macro_dsp_valuehl 
c0b8				endm 
# End of macro FORTH_DSP_VALUEHL
c0b8				 
c0b8					if DEBUG_FORTH_WORDS_KEY 
c0b8						DMARK "MNU" 
c0b8 f5				push af  
c0b9 3a cd c0			ld a, (.dmark)  
c0bc 32 65 ee			ld (debug_mark),a  
c0bf 3a ce c0			ld a, (.dmark+1)  
c0c2 32 66 ee			ld (debug_mark+1),a  
c0c5 3a cf c0			ld a, (.dmark+2)  
c0c8 32 67 ee			ld (debug_mark+2),a  
c0cb 18 03			jr .pastdmark  
c0cd ..			.dmark: db "MNU"  
c0d0 f1			.pastdmark: pop af  
c0d1			endm  
# End of macro DMARK
c0d1						CALLMONITOR 
c0d1 cd 6f ee			call debug_vector  
c0d4				endm  
# End of macro CALLMONITOR
c0d4					endif 
c0d4			 
c0d4 45					ld b, l	 
c0d5 05					dec b 
c0d6			 
c0d6					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c0d6 cd 42 9d			call macro_forth_dsp_pop 
c0d9				endm 
# End of macro FORTH_DSP_POP
c0d9			 
c0d9			 
c0d9					; go directly through the stack to pluck out the string pointers and build an array 
c0d9			 
c0d9			;		FORTH_DSP 
c0d9			 
c0d9					; hl contains top most stack item 
c0d9				 
c0d9 11 bb e2				ld de, scratch 
c0dc			 
c0dc			.mbuild: 
c0dc			 
c0dc					FORTH_DSP_VALUEHL 
c0dc cd 8a 9c			call macro_dsp_valuehl 
c0df				endm 
# End of macro FORTH_DSP_VALUEHL
c0df			 
c0df					if DEBUG_FORTH_WORDS 
c0df						DMARK "MN3" 
c0df f5				push af  
c0e0 3a f4 c0			ld a, (.dmark)  
c0e3 32 65 ee			ld (debug_mark),a  
c0e6 3a f5 c0			ld a, (.dmark+1)  
c0e9 32 66 ee			ld (debug_mark+1),a  
c0ec 3a f6 c0			ld a, (.dmark+2)  
c0ef 32 67 ee			ld (debug_mark+2),a  
c0f2 18 03			jr .pastdmark  
c0f4 ..			.dmark: db "MN3"  
c0f7 f1			.pastdmark: pop af  
c0f8			endm  
# End of macro DMARK
c0f8						CALLMONITOR 
c0f8 cd 6f ee			call debug_vector  
c0fb				endm  
# End of macro CALLMONITOR
c0fb					endif 
c0fb eb					ex de, hl 
c0fc 73					ld (hl), e 
c0fd 23					inc hl 
c0fe 72					ld (hl), d 
c0ff 23					inc hl 
c100 eb					ex de, hl 
c101			 
c101					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c101 cd 42 9d			call macro_forth_dsp_pop 
c104				endm 
# End of macro FORTH_DSP_POP
c104			 
c104 10 d6				djnz .mbuild 
c106			 
c106					; done add term 
c106			 
c106 eb					ex de, hl 
c107 36 00				ld (hl), 0 
c109 23					inc hl 
c10a 36 00				ld (hl), 0 
c10c			 
c10c				 
c10c					 
c10c 21 bb e2				ld hl, scratch 
c10f			 
c10f					if DEBUG_FORTH_WORDS 
c10f						DMARK "MNx" 
c10f f5				push af  
c110 3a 24 c1			ld a, (.dmark)  
c113 32 65 ee			ld (debug_mark),a  
c116 3a 25 c1			ld a, (.dmark+1)  
c119 32 66 ee			ld (debug_mark+1),a  
c11c 3a 26 c1			ld a, (.dmark+2)  
c11f 32 67 ee			ld (debug_mark+2),a  
c122 18 03			jr .pastdmark  
c124 ..			.dmark: db "MNx"  
c127 f1			.pastdmark: pop af  
c128			endm  
# End of macro DMARK
c128						CALLMONITOR 
c128 cd 6f ee			call debug_vector  
c12b				endm  
# End of macro CALLMONITOR
c12b					endif 
c12b			 
c12b			 
c12b			 
c12b 3e 00				ld a, 0 
c12d cd ee 8a				call menu 
c130			 
c130			 
c130 6f					ld l, a 
c131 26 00				ld h, 0 
c133			 
c133					if DEBUG_FORTH_WORDS 
c133						DMARK "MNr" 
c133 f5				push af  
c134 3a 48 c1			ld a, (.dmark)  
c137 32 65 ee			ld (debug_mark),a  
c13a 3a 49 c1			ld a, (.dmark+1)  
c13d 32 66 ee			ld (debug_mark+1),a  
c140 3a 4a c1			ld a, (.dmark+2)  
c143 32 67 ee			ld (debug_mark+2),a  
c146 18 03			jr .pastdmark  
c148 ..			.dmark: db "MNr"  
c14b f1			.pastdmark: pop af  
c14c			endm  
# End of macro DMARK
c14c						CALLMONITOR 
c14c cd 6f ee			call debug_vector  
c14f				endm  
# End of macro CALLMONITOR
c14f					endif 
c14f			 
c14f cd 85 9a				call forth_push_numhl 
c152			 
c152			 
c152			 
c152			 
c152				       NEXTW 
c152 c3 76 9e			jp macro_next 
c155				endm 
# End of macro NEXTW
c155			 
c155			 
c155			.ENDDISPLAY: 
c155			 
c155			; eof 
# End of file forth_words_display.asm
c155			include "forth_words_str.asm" 
c155			 
c155			; | ## String Words 
c155			 
c155			.SPLIT:   
c155			 
c155				CWHEAD .PTR 52 "SPLIT" 5 WORD_FLAG_CODE 
c155 48				db WORD_SYS_CORE+52             
c156 4a c2			dw .PTR            
c158 06				db 5 + 1 
c159 .. 00			db "SPLIT",0              
c15f				endm 
# End of macro CWHEAD
c15f			; | SPLIT ( s d -- s s...sn c ) Using delimter d, add strings found in s to stack pushing item count c | DONE 
c15f					if DEBUG_FORTH_WORDS_KEY 
c15f						DMARK "SPT" 
c15f f5				push af  
c160 3a 74 c1			ld a, (.dmark)  
c163 32 65 ee			ld (debug_mark),a  
c166 3a 75 c1			ld a, (.dmark+1)  
c169 32 66 ee			ld (debug_mark+1),a  
c16c 3a 76 c1			ld a, (.dmark+2)  
c16f 32 67 ee			ld (debug_mark+2),a  
c172 18 03			jr .pastdmark  
c174 ..			.dmark: db "SPT"  
c177 f1			.pastdmark: pop af  
c178			endm  
# End of macro DMARK
c178						CALLMONITOR 
c178 cd 6f ee			call debug_vector  
c17b				endm  
# End of macro CALLMONITOR
c17b					endif 
c17b			 
c17b					; get delim 
c17b					FORTH_DSP_VALUEHL 
c17b cd 8a 9c			call macro_dsp_valuehl 
c17e				endm 
# End of macro FORTH_DSP_VALUEHL
c17e			 
c17e					FORTH_DSP_POP 
c17e cd 42 9d			call macro_forth_dsp_pop 
c181				endm 
# End of macro FORTH_DSP_POP
c181					 
c181			 
c181 45					ld b, l    ; move delim to b 
c182 0e 01				ld c, 1   ; count of poritions 
c184			 
c184 c5					push bc 
c185			 
c185					if DEBUG_FORTH_WORDS 
c185						DMARK "SPa" 
c185 f5				push af  
c186 3a 9a c1			ld a, (.dmark)  
c189 32 65 ee			ld (debug_mark),a  
c18c 3a 9b c1			ld a, (.dmark+1)  
c18f 32 66 ee			ld (debug_mark+1),a  
c192 3a 9c c1			ld a, (.dmark+2)  
c195 32 67 ee			ld (debug_mark+2),a  
c198 18 03			jr .pastdmark  
c19a ..			.dmark: db "SPa"  
c19d f1			.pastdmark: pop af  
c19e			endm  
# End of macro DMARK
c19e						CALLMONITOR 
c19e cd 6f ee			call debug_vector  
c1a1				endm  
# End of macro CALLMONITOR
c1a1					endif 
c1a1					; get pointer to string to chop up 
c1a1					FORTH_DSP_VALUEHL 
c1a1 cd 8a 9c			call macro_dsp_valuehl 
c1a4				endm 
# End of macro FORTH_DSP_VALUEHL
c1a4			 
c1a4			;		push hl 
c1a4 11 bb e2				ld de, scratch 
c1a7			.spllop: 
c1a7 c1					pop bc 
c1a8 c5					push bc 
c1a9			;		pop hl 
c1a9					if DEBUG_FORTH_WORDS 
c1a9						DMARK "SPl" 
c1a9 f5				push af  
c1aa 3a be c1			ld a, (.dmark)  
c1ad 32 65 ee			ld (debug_mark),a  
c1b0 3a bf c1			ld a, (.dmark+1)  
c1b3 32 66 ee			ld (debug_mark+1),a  
c1b6 3a c0 c1			ld a, (.dmark+2)  
c1b9 32 67 ee			ld (debug_mark+2),a  
c1bc 18 03			jr .pastdmark  
c1be ..			.dmark: db "SPl"  
c1c1 f1			.pastdmark: pop af  
c1c2			endm  
# End of macro DMARK
c1c2						CALLMONITOR 
c1c2 cd 6f ee			call debug_vector  
c1c5				endm  
# End of macro CALLMONITOR
c1c5					endif 
c1c5 7e					ld a, (hl) 
c1c6 b8					cp b 
c1c7 28 08				jr z, .splnxt 
c1c9 fe 00				cp 0 
c1cb 28 34				jr z, .splend 
c1cd ed a0				ldi 
c1cf 18 d6				jr .spllop 
c1d1			 
c1d1					; hit dlim 
c1d1			 
c1d1			.splnxt: 
c1d1					if DEBUG_FORTH_WORDS 
c1d1						DMARK "SPx" 
c1d1 f5				push af  
c1d2 3a e6 c1			ld a, (.dmark)  
c1d5 32 65 ee			ld (debug_mark),a  
c1d8 3a e7 c1			ld a, (.dmark+1)  
c1db 32 66 ee			ld (debug_mark+1),a  
c1de 3a e8 c1			ld a, (.dmark+2)  
c1e1 32 67 ee			ld (debug_mark+2),a  
c1e4 18 03			jr .pastdmark  
c1e6 ..			.dmark: db "SPx"  
c1e9 f1			.pastdmark: pop af  
c1ea			endm  
# End of macro DMARK
c1ea						CALLMONITOR 
c1ea cd 6f ee			call debug_vector  
c1ed				endm  
# End of macro CALLMONITOR
c1ed					endif 
c1ed 3e 00				ld a, 0 
c1ef 12					ld (de), a 
c1f0					;ex de, hl 
c1f0 e5					push hl 
c1f1 21 bb e2				ld hl, scratch 
c1f4 cd f3 9a				call forth_push_str 
c1f7 e1					pop hl 
c1f8					;ex de, hl 
c1f8 23					inc hl 
c1f9 c1					pop bc 
c1fa 0c					inc c 
c1fb c5					push bc 
c1fc 11 bb e2				ld de, scratch 
c1ff 18 a6				jr .spllop 
c201			 
c201			.splend:		 
c201					if DEBUG_FORTH_WORDS 
c201						DMARK "SPe" 
c201 f5				push af  
c202 3a 16 c2			ld a, (.dmark)  
c205 32 65 ee			ld (debug_mark),a  
c208 3a 17 c2			ld a, (.dmark+1)  
c20b 32 66 ee			ld (debug_mark+1),a  
c20e 3a 18 c2			ld a, (.dmark+2)  
c211 32 67 ee			ld (debug_mark+2),a  
c214 18 03			jr .pastdmark  
c216 ..			.dmark: db "SPe"  
c219 f1			.pastdmark: pop af  
c21a			endm  
# End of macro DMARK
c21a						CALLMONITOR 
c21a cd 6f ee			call debug_vector  
c21d				endm  
# End of macro CALLMONITOR
c21d					endif 
c21d 12					ld (de), a 
c21e eb					ex de, hl 
c21f			;		push hl 
c21f 21 bb e2				ld hl, scratch 
c222 cd f3 9a				call forth_push_str 
c225					 
c225					if DEBUG_FORTH_WORDS 
c225						DMARK "SPc" 
c225 f5				push af  
c226 3a 3a c2			ld a, (.dmark)  
c229 32 65 ee			ld (debug_mark),a  
c22c 3a 3b c2			ld a, (.dmark+1)  
c22f 32 66 ee			ld (debug_mark+1),a  
c232 3a 3c c2			ld a, (.dmark+2)  
c235 32 67 ee			ld (debug_mark+2),a  
c238 18 03			jr .pastdmark  
c23a ..			.dmark: db "SPc"  
c23d f1			.pastdmark: pop af  
c23e			endm  
# End of macro DMARK
c23e						CALLMONITOR 
c23e cd 6f ee			call debug_vector  
c241				endm  
# End of macro CALLMONITOR
c241					endif 
c241			 
c241 e1					pop hl    ; get counter from bc which has been push 
c242 26 00				ld h, 0 
c244			;		ld l, c 
c244 cd 85 9a				call forth_push_numhl 
c247			 
c247			 
c247				NEXTW 
c247 c3 76 9e			jp macro_next 
c24a				endm 
# End of macro NEXTW
c24a			.PTR:   
c24a			 
c24a				CWHEAD .STYPE 52 "PTR" 3 WORD_FLAG_CODE 
c24a 48				db WORD_SYS_CORE+52             
c24b 77 c2			dw .STYPE            
c24d 04				db 3 + 1 
c24e .. 00			db "PTR",0              
c252				endm 
# End of macro CWHEAD
c252			; | PTR ( -- addr ) Low level push pointer to the value on TOS | DONE 
c252			; | | If a string will give the address of the string without dropping it. Handy for direct string access 
c252			; | | If a number can then use 2@ and 2! for direct value update without using stack words  
c252			 
c252					if DEBUG_FORTH_WORDS_KEY 
c252						DMARK "PTR" 
c252 f5				push af  
c253 3a 67 c2			ld a, (.dmark)  
c256 32 65 ee			ld (debug_mark),a  
c259 3a 68 c2			ld a, (.dmark+1)  
c25c 32 66 ee			ld (debug_mark+1),a  
c25f 3a 69 c2			ld a, (.dmark+2)  
c262 32 67 ee			ld (debug_mark+2),a  
c265 18 03			jr .pastdmark  
c267 ..			.dmark: db "PTR"  
c26a f1			.pastdmark: pop af  
c26b			endm  
# End of macro DMARK
c26b						CALLMONITOR 
c26b cd 6f ee			call debug_vector  
c26e				endm  
# End of macro CALLMONITOR
c26e					endif 
c26e					FORTH_DSP_VALUEHL 
c26e cd 8a 9c			call macro_dsp_valuehl 
c271				endm 
# End of macro FORTH_DSP_VALUEHL
c271 cd 85 9a				call forth_push_numhl 
c274			 
c274			 
c274					NEXTW 
c274 c3 76 9e			jp macro_next 
c277				endm 
# End of macro NEXTW
c277			.STYPE: 
c277				CWHEAD .UPPER 52 "STYPE" 5 WORD_FLAG_CODE 
c277 48				db WORD_SYS_CORE+52             
c278 c6 c2			dw .UPPER            
c27a 06				db 5 + 1 
c27b .. 00			db "STYPE",0              
c281				endm 
# End of macro CWHEAD
c281			; | STYPE ( u -- u type ) Push type of value on TOS - 's' string, 'i' integer...   | DONE 
c281					if DEBUG_FORTH_WORDS_KEY 
c281						DMARK "STY" 
c281 f5				push af  
c282 3a 96 c2			ld a, (.dmark)  
c285 32 65 ee			ld (debug_mark),a  
c288 3a 97 c2			ld a, (.dmark+1)  
c28b 32 66 ee			ld (debug_mark+1),a  
c28e 3a 98 c2			ld a, (.dmark+2)  
c291 32 67 ee			ld (debug_mark+2),a  
c294 18 03			jr .pastdmark  
c296 ..			.dmark: db "STY"  
c299 f1			.pastdmark: pop af  
c29a			endm  
# End of macro DMARK
c29a						CALLMONITOR 
c29a cd 6f ee			call debug_vector  
c29d				endm  
# End of macro CALLMONITOR
c29d					endif 
c29d					FORTH_DSP 
c29d cd 50 9c			call macro_forth_dsp 
c2a0				endm 
# End of macro FORTH_DSP
c2a0					;v5 FORTH_DSP_VALUE 
c2a0			 
c2a0 7e					ld a, (hl) 
c2a1			 
c2a1 f5					push af 
c2a2			 
c2a2			; Dont destroy TOS		FORTH_DSP_POP 
c2a2			 
c2a2 f1					pop af 
c2a3			 
c2a3 fe 01				cp DS_TYPE_STR 
c2a5 28 09				jr z, .typestr 
c2a7			 
c2a7 fe 02				cp DS_TYPE_INUM 
c2a9 28 0a				jr z, .typeinum 
c2ab			 
c2ab 21 c4 c2				ld hl, .tna 
c2ae 18 0a				jr .tpush 
c2b0			 
c2b0 21 c0 c2		.typestr:	ld hl, .tstr 
c2b3 18 05				jr .tpush 
c2b5 21 c2 c2		.typeinum:	ld hl, .tinum 
c2b8 18 00				jr .tpush 
c2ba			 
c2ba			.tpush: 
c2ba			 
c2ba cd f3 9a				call forth_push_str 
c2bd			 
c2bd					NEXTW 
c2bd c3 76 9e			jp macro_next 
c2c0				endm 
# End of macro NEXTW
c2c0 .. 00		.tstr:	db "s",0 
c2c2 .. 00		.tinum:  db "i",0 
c2c4 .. 00		.tna:   db "?", 0 
c2c6			 
c2c6			 
c2c6			.UPPER: 
c2c6				CWHEAD .LOWER 52 "UPPER" 5 WORD_FLAG_CODE 
c2c6 48				db WORD_SYS_CORE+52             
c2c7 01 c3			dw .LOWER            
c2c9 06				db 5 + 1 
c2ca .. 00			db "UPPER",0              
c2d0				endm 
# End of macro CWHEAD
c2d0			; | UPPER ( s -- s ) Upper case string s  | DONE 
c2d0					if DEBUG_FORTH_WORDS_KEY 
c2d0						DMARK "UPR" 
c2d0 f5				push af  
c2d1 3a e5 c2			ld a, (.dmark)  
c2d4 32 65 ee			ld (debug_mark),a  
c2d7 3a e6 c2			ld a, (.dmark+1)  
c2da 32 66 ee			ld (debug_mark+1),a  
c2dd 3a e7 c2			ld a, (.dmark+2)  
c2e0 32 67 ee			ld (debug_mark+2),a  
c2e3 18 03			jr .pastdmark  
c2e5 ..			.dmark: db "UPR"  
c2e8 f1			.pastdmark: pop af  
c2e9			endm  
# End of macro DMARK
c2e9						CALLMONITOR 
c2e9 cd 6f ee			call debug_vector  
c2ec				endm  
# End of macro CALLMONITOR
c2ec					endif 
c2ec			 
c2ec					FORTH_DSP 
c2ec cd 50 9c			call macro_forth_dsp 
c2ef				endm 
# End of macro FORTH_DSP
c2ef					 
c2ef			; TODO check is string type 
c2ef			 
c2ef					FORTH_DSP_VALUEHL 
c2ef cd 8a 9c			call macro_dsp_valuehl 
c2f2				endm 
# End of macro FORTH_DSP_VALUEHL
c2f2			; get pointer to string in hl 
c2f2			 
c2f2 7e			.toup:		ld a, (hl) 
c2f3 fe 00				cp 0 
c2f5 28 07				jr z, .toupdone 
c2f7			 
c2f7 cd 5f 8f				call to_upper 
c2fa			 
c2fa 77					ld (hl), a 
c2fb 23					inc hl 
c2fc 18 f4				jr .toup 
c2fe			 
c2fe					 
c2fe			 
c2fe			 
c2fe			; for each char convert to upper 
c2fe					 
c2fe			.toupdone: 
c2fe			 
c2fe			 
c2fe					NEXTW 
c2fe c3 76 9e			jp macro_next 
c301				endm 
# End of macro NEXTW
c301			.LOWER: 
c301				CWHEAD .TCASE 52 "LOWER" 5 WORD_FLAG_CODE 
c301 48				db WORD_SYS_CORE+52             
c302 3c c3			dw .TCASE            
c304 06				db 5 + 1 
c305 .. 00			db "LOWER",0              
c30b				endm 
# End of macro CWHEAD
c30b			; | LOWER ( s -- s ) Lower case string s  | DONE 
c30b					if DEBUG_FORTH_WORDS_KEY 
c30b						DMARK "LWR" 
c30b f5				push af  
c30c 3a 20 c3			ld a, (.dmark)  
c30f 32 65 ee			ld (debug_mark),a  
c312 3a 21 c3			ld a, (.dmark+1)  
c315 32 66 ee			ld (debug_mark+1),a  
c318 3a 22 c3			ld a, (.dmark+2)  
c31b 32 67 ee			ld (debug_mark+2),a  
c31e 18 03			jr .pastdmark  
c320 ..			.dmark: db "LWR"  
c323 f1			.pastdmark: pop af  
c324			endm  
# End of macro DMARK
c324						CALLMONITOR 
c324 cd 6f ee			call debug_vector  
c327				endm  
# End of macro CALLMONITOR
c327					endif 
c327			 
c327					FORTH_DSP 
c327 cd 50 9c			call macro_forth_dsp 
c32a				endm 
# End of macro FORTH_DSP
c32a					 
c32a			; TODO check is string type 
c32a			 
c32a					FORTH_DSP_VALUEHL 
c32a cd 8a 9c			call macro_dsp_valuehl 
c32d				endm 
# End of macro FORTH_DSP_VALUEHL
c32d			; get pointer to string in hl 
c32d			 
c32d 7e			.tolow:		ld a, (hl) 
c32e fe 00				cp 0 
c330 28 07				jr z, .tolowdone 
c332			 
c332 cd 68 8f				call to_lower 
c335			 
c335 77					ld (hl), a 
c336 23					inc hl 
c337 18 f4				jr .tolow 
c339			 
c339					 
c339			 
c339			 
c339			; for each char convert to low 
c339					 
c339			.tolowdone: 
c339					NEXTW 
c339 c3 76 9e			jp macro_next 
c33c				endm 
# End of macro NEXTW
c33c			.TCASE: 
c33c				CWHEAD .SUBSTR 52 "TCASE" 5 WORD_FLAG_CODE 
c33c 48				db WORD_SYS_CORE+52             
c33d 72 c4			dw .SUBSTR            
c33f 06				db 5 + 1 
c340 .. 00			db "TCASE",0              
c346				endm 
# End of macro CWHEAD
c346			; | TCASE ( s -- s ) Title case string s  | DONE 
c346					if DEBUG_FORTH_WORDS_KEY 
c346						DMARK "TCS" 
c346 f5				push af  
c347 3a 5b c3			ld a, (.dmark)  
c34a 32 65 ee			ld (debug_mark),a  
c34d 3a 5c c3			ld a, (.dmark+1)  
c350 32 66 ee			ld (debug_mark+1),a  
c353 3a 5d c3			ld a, (.dmark+2)  
c356 32 67 ee			ld (debug_mark+2),a  
c359 18 03			jr .pastdmark  
c35b ..			.dmark: db "TCS"  
c35e f1			.pastdmark: pop af  
c35f			endm  
# End of macro DMARK
c35f						CALLMONITOR 
c35f cd 6f ee			call debug_vector  
c362				endm  
# End of macro CALLMONITOR
c362					endif 
c362			 
c362					FORTH_DSP 
c362 cd 50 9c			call macro_forth_dsp 
c365				endm 
# End of macro FORTH_DSP
c365					 
c365			; TODO check is string type 
c365			 
c365					FORTH_DSP_VALUEHL 
c365 cd 8a 9c			call macro_dsp_valuehl 
c368				endm 
# End of macro FORTH_DSP_VALUEHL
c368			; get pointer to string in hl 
c368			 
c368					if DEBUG_FORTH_WORDS 
c368						DMARK "TC1" 
c368 f5				push af  
c369 3a 7d c3			ld a, (.dmark)  
c36c 32 65 ee			ld (debug_mark),a  
c36f 3a 7e c3			ld a, (.dmark+1)  
c372 32 66 ee			ld (debug_mark+1),a  
c375 3a 7f c3			ld a, (.dmark+2)  
c378 32 67 ee			ld (debug_mark+2),a  
c37b 18 03			jr .pastdmark  
c37d ..			.dmark: db "TC1"  
c380 f1			.pastdmark: pop af  
c381			endm  
# End of macro DMARK
c381						CALLMONITOR 
c381 cd 6f ee			call debug_vector  
c384				endm  
# End of macro CALLMONITOR
c384					endif 
c384			 
c384					; first time in turn to upper case first char 
c384			 
c384 7e					ld a, (hl) 
c385 c3 0f c4				jp .totsiptou 
c388			 
c388			 
c388 7e			.tot:		ld a, (hl) 
c389 fe 00				cp 0 
c38b ca 53 c4				jp z, .totdone 
c38e			 
c38e					if DEBUG_FORTH_WORDS 
c38e						DMARK "TC2" 
c38e f5				push af  
c38f 3a a3 c3			ld a, (.dmark)  
c392 32 65 ee			ld (debug_mark),a  
c395 3a a4 c3			ld a, (.dmark+1)  
c398 32 66 ee			ld (debug_mark+1),a  
c39b 3a a5 c3			ld a, (.dmark+2)  
c39e 32 67 ee			ld (debug_mark+2),a  
c3a1 18 03			jr .pastdmark  
c3a3 ..			.dmark: db "TC2"  
c3a6 f1			.pastdmark: pop af  
c3a7			endm  
# End of macro DMARK
c3a7						CALLMONITOR 
c3a7 cd 6f ee			call debug_vector  
c3aa				endm  
# End of macro CALLMONITOR
c3aa					endif 
c3aa					; check to see if current char is a space 
c3aa			 
c3aa fe 20				cp ' ' 
c3ac 28 21				jr z, .totsp 
c3ae cd 68 8f				call to_lower 
c3b1					if DEBUG_FORTH_WORDS 
c3b1						DMARK "TC3" 
c3b1 f5				push af  
c3b2 3a c6 c3			ld a, (.dmark)  
c3b5 32 65 ee			ld (debug_mark),a  
c3b8 3a c7 c3			ld a, (.dmark+1)  
c3bb 32 66 ee			ld (debug_mark+1),a  
c3be 3a c8 c3			ld a, (.dmark+2)  
c3c1 32 67 ee			ld (debug_mark+2),a  
c3c4 18 03			jr .pastdmark  
c3c6 ..			.dmark: db "TC3"  
c3c9 f1			.pastdmark: pop af  
c3ca			endm  
# End of macro DMARK
c3ca						CALLMONITOR 
c3ca cd 6f ee			call debug_vector  
c3cd				endm  
# End of macro CALLMONITOR
c3cd					endif 
c3cd 18 63				jr .totnxt 
c3cf			 
c3cf			.totsp:         ; on a space, find next char which should be upper 
c3cf			 
c3cf					if DEBUG_FORTH_WORDS 
c3cf						DMARK "TC4" 
c3cf f5				push af  
c3d0 3a e4 c3			ld a, (.dmark)  
c3d3 32 65 ee			ld (debug_mark),a  
c3d6 3a e5 c3			ld a, (.dmark+1)  
c3d9 32 66 ee			ld (debug_mark+1),a  
c3dc 3a e6 c3			ld a, (.dmark+2)  
c3df 32 67 ee			ld (debug_mark+2),a  
c3e2 18 03			jr .pastdmark  
c3e4 ..			.dmark: db "TC4"  
c3e7 f1			.pastdmark: pop af  
c3e8			endm  
# End of macro DMARK
c3e8						CALLMONITOR 
c3e8 cd 6f ee			call debug_vector  
c3eb				endm  
# End of macro CALLMONITOR
c3eb					endif 
c3eb					;; 
c3eb			 
c3eb fe 20				cp ' ' 
c3ed 20 20				jr nz, .totsiptou 
c3ef 23					inc hl 
c3f0 7e					ld a, (hl) 
c3f1					if DEBUG_FORTH_WORDS 
c3f1						DMARK "TC5" 
c3f1 f5				push af  
c3f2 3a 06 c4			ld a, (.dmark)  
c3f5 32 65 ee			ld (debug_mark),a  
c3f8 3a 07 c4			ld a, (.dmark+1)  
c3fb 32 66 ee			ld (debug_mark+1),a  
c3fe 3a 08 c4			ld a, (.dmark+2)  
c401 32 67 ee			ld (debug_mark+2),a  
c404 18 03			jr .pastdmark  
c406 ..			.dmark: db "TC5"  
c409 f1			.pastdmark: pop af  
c40a			endm  
# End of macro DMARK
c40a						CALLMONITOR 
c40a cd 6f ee			call debug_vector  
c40d				endm  
# End of macro CALLMONITOR
c40d					endif 
c40d 18 c0				jr .totsp 
c40f fe 00		.totsiptou:    cp 0 
c411 28 40				jr z, .totdone 
c413					; not space and not zero term so upper case it 
c413 cd 5f 8f				call to_upper 
c416			 
c416					if DEBUG_FORTH_WORDS 
c416						DMARK "TC6" 
c416 f5				push af  
c417 3a 2b c4			ld a, (.dmark)  
c41a 32 65 ee			ld (debug_mark),a  
c41d 3a 2c c4			ld a, (.dmark+1)  
c420 32 66 ee			ld (debug_mark+1),a  
c423 3a 2d c4			ld a, (.dmark+2)  
c426 32 67 ee			ld (debug_mark+2),a  
c429 18 03			jr .pastdmark  
c42b ..			.dmark: db "TC6"  
c42e f1			.pastdmark: pop af  
c42f			endm  
# End of macro DMARK
c42f						CALLMONITOR 
c42f cd 6f ee			call debug_vector  
c432				endm  
# End of macro CALLMONITOR
c432					endif 
c432			 
c432			 
c432			.totnxt: 
c432			 
c432 77					ld (hl), a 
c433 23					inc hl 
c434					if DEBUG_FORTH_WORDS 
c434						DMARK "TC7" 
c434 f5				push af  
c435 3a 49 c4			ld a, (.dmark)  
c438 32 65 ee			ld (debug_mark),a  
c43b 3a 4a c4			ld a, (.dmark+1)  
c43e 32 66 ee			ld (debug_mark+1),a  
c441 3a 4b c4			ld a, (.dmark+2)  
c444 32 67 ee			ld (debug_mark+2),a  
c447 18 03			jr .pastdmark  
c449 ..			.dmark: db "TC7"  
c44c f1			.pastdmark: pop af  
c44d			endm  
# End of macro DMARK
c44d						CALLMONITOR 
c44d cd 6f ee			call debug_vector  
c450				endm  
# End of macro CALLMONITOR
c450					endif 
c450 c3 88 c3				jp .tot 
c453			 
c453					 
c453			 
c453			 
c453			; for each char convert to low 
c453					 
c453			.totdone: 
c453					if DEBUG_FORTH_WORDS 
c453						DMARK "TCd" 
c453 f5				push af  
c454 3a 68 c4			ld a, (.dmark)  
c457 32 65 ee			ld (debug_mark),a  
c45a 3a 69 c4			ld a, (.dmark+1)  
c45d 32 66 ee			ld (debug_mark+1),a  
c460 3a 6a c4			ld a, (.dmark+2)  
c463 32 67 ee			ld (debug_mark+2),a  
c466 18 03			jr .pastdmark  
c468 ..			.dmark: db "TCd"  
c46b f1			.pastdmark: pop af  
c46c			endm  
# End of macro DMARK
c46c						CALLMONITOR 
c46c cd 6f ee			call debug_vector  
c46f				endm  
# End of macro CALLMONITOR
c46f					endif 
c46f					NEXTW 
c46f c3 76 9e			jp macro_next 
c472				endm 
# End of macro NEXTW
c472			 
c472			.SUBSTR: 
c472				CWHEAD .LEFT 52 "SUBSTR" 6 WORD_FLAG_CODE 
c472 48				db WORD_SYS_CORE+52             
c473 d0 c4			dw .LEFT            
c475 07				db 6 + 1 
c476 .. 00			db "SUBSTR",0              
c47d				endm 
# End of macro CWHEAD
c47d			; | SUBSTR ( s u1 u2 -- s sb ) Push to TOS chars starting at position u1 and with length u2 from string s  | DONE 
c47d			 
c47d					if DEBUG_FORTH_WORDS_KEY 
c47d						DMARK "SST" 
c47d f5				push af  
c47e 3a 92 c4			ld a, (.dmark)  
c481 32 65 ee			ld (debug_mark),a  
c484 3a 93 c4			ld a, (.dmark+1)  
c487 32 66 ee			ld (debug_mark+1),a  
c48a 3a 94 c4			ld a, (.dmark+2)  
c48d 32 67 ee			ld (debug_mark+2),a  
c490 18 03			jr .pastdmark  
c492 ..			.dmark: db "SST"  
c495 f1			.pastdmark: pop af  
c496			endm  
# End of macro DMARK
c496						CALLMONITOR 
c496 cd 6f ee			call debug_vector  
c499				endm  
# End of macro CALLMONITOR
c499					endif 
c499			; TODO check string type 
c499					FORTH_DSP_VALUEHL 
c499 cd 8a 9c			call macro_dsp_valuehl 
c49c				endm 
# End of macro FORTH_DSP_VALUEHL
c49c			 
c49c e5					push hl      ; string length 
c49d			 
c49d					FORTH_DSP_POP 
c49d cd 42 9d			call macro_forth_dsp_pop 
c4a0				endm 
# End of macro FORTH_DSP_POP
c4a0			 
c4a0					FORTH_DSP_VALUEHL 
c4a0 cd 8a 9c			call macro_dsp_valuehl 
c4a3				endm 
# End of macro FORTH_DSP_VALUEHL
c4a3			 
c4a3 e5					push hl     ; start char 
c4a4			 
c4a4					FORTH_DSP_POP 
c4a4 cd 42 9d			call macro_forth_dsp_pop 
c4a7				endm 
# End of macro FORTH_DSP_POP
c4a7			 
c4a7			 
c4a7					FORTH_DSP_VALUE 
c4a7 cd 73 9c			call macro_forth_dsp_value 
c4aa				endm 
# End of macro FORTH_DSP_VALUE
c4aa			 
c4aa d1					pop de    ; get start post offset 
c4ab			 
c4ab 19					add hl, de    ; starting offset 
c4ac			 
c4ac c1					pop bc 
c4ad c5					push bc      ; grab size of string 
c4ae			 
c4ae e5					push hl    ; save string start  
c4af			 
c4af 26 00				ld h, 0 
c4b1 69					ld l, c 
c4b2 23					inc hl 
c4b3 23					inc hl 
c4b4			 
c4b4 cd c5 90				call malloc 
c4b7				if DEBUG_FORTH_MALLOC_GUARD 
c4b7 cc 9f ce				call z,malloc_error 
c4ba				endif 
c4ba			 
c4ba eb					ex de, hl      ; save malloc area for string copy 
c4bb e1					pop hl    ; get back source 
c4bc c1					pop bc    ; get length of string back 
c4bd			 
c4bd d5					push de    ; save malloc area for after we push 
c4be ed b0				ldir     ; copy substr 
c4c0			 
c4c0			 
c4c0 eb					ex de, hl 
c4c1 3e 00				ld a, 0 
c4c3 77					ld (hl), a   ; term substr 
c4c4			 
c4c4					 
c4c4 e1					pop hl    ; get malloc so we can push it 
c4c5 e5					push hl   ; save so we can free it afterwards 
c4c6			 
c4c6 cd f3 9a				call forth_push_str 
c4c9			 
c4c9 e1					pop hl 
c4ca cd 8f 91				call free 
c4cd			 
c4cd					 
c4cd					 
c4cd			 
c4cd			 
c4cd					NEXTW 
c4cd c3 76 9e			jp macro_next 
c4d0				endm 
# End of macro NEXTW
c4d0			 
c4d0			.LEFT: 
c4d0				CWHEAD .RIGHT 52 "LEFT" 4 WORD_FLAG_CODE 
c4d0 48				db WORD_SYS_CORE+52             
c4d1 f8 c4			dw .RIGHT            
c4d3 05				db 4 + 1 
c4d4 .. 00			db "LEFT",0              
c4d9				endm 
# End of macro CWHEAD
c4d9			; | LEFT ( s u -- s sub ) Push to TOS string u long starting from left of s  | TODO 
c4d9					if DEBUG_FORTH_WORDS_KEY 
c4d9						DMARK "LEF" 
c4d9 f5				push af  
c4da 3a ee c4			ld a, (.dmark)  
c4dd 32 65 ee			ld (debug_mark),a  
c4e0 3a ef c4			ld a, (.dmark+1)  
c4e3 32 66 ee			ld (debug_mark+1),a  
c4e6 3a f0 c4			ld a, (.dmark+2)  
c4e9 32 67 ee			ld (debug_mark+2),a  
c4ec 18 03			jr .pastdmark  
c4ee ..			.dmark: db "LEF"  
c4f1 f1			.pastdmark: pop af  
c4f2			endm  
# End of macro DMARK
c4f2						CALLMONITOR 
c4f2 cd 6f ee			call debug_vector  
c4f5				endm  
# End of macro CALLMONITOR
c4f5					endif 
c4f5			 
c4f5					NEXTW 
c4f5 c3 76 9e			jp macro_next 
c4f8				endm 
# End of macro NEXTW
c4f8			.RIGHT: 
c4f8				CWHEAD .STR2NUM 52 "RIGHT" 5 WORD_FLAG_CODE 
c4f8 48				db WORD_SYS_CORE+52             
c4f9 21 c5			dw .STR2NUM            
c4fb 06				db 5 + 1 
c4fc .. 00			db "RIGHT",0              
c502				endm 
# End of macro CWHEAD
c502			; | RIGHT ( s u -- s sub ) Push to TOS string u long starting from right of s  | TODO 
c502					if DEBUG_FORTH_WORDS_KEY 
c502						DMARK "RIG" 
c502 f5				push af  
c503 3a 17 c5			ld a, (.dmark)  
c506 32 65 ee			ld (debug_mark),a  
c509 3a 18 c5			ld a, (.dmark+1)  
c50c 32 66 ee			ld (debug_mark+1),a  
c50f 3a 19 c5			ld a, (.dmark+2)  
c512 32 67 ee			ld (debug_mark+2),a  
c515 18 03			jr .pastdmark  
c517 ..			.dmark: db "RIG"  
c51a f1			.pastdmark: pop af  
c51b			endm  
# End of macro DMARK
c51b						CALLMONITOR 
c51b cd 6f ee			call debug_vector  
c51e				endm  
# End of macro CALLMONITOR
c51e					endif 
c51e			 
c51e					NEXTW 
c51e c3 76 9e			jp macro_next 
c521				endm 
# End of macro NEXTW
c521			 
c521			 
c521			.STR2NUM: 
c521				CWHEAD .NUM2STR 52 "STR2NUM" 7 WORD_FLAG_CODE 
c521 48				db WORD_SYS_CORE+52             
c522 ad c5			dw .NUM2STR            
c524 08				db 7 + 1 
c525 .. 00			db "STR2NUM",0              
c52d				endm 
# End of macro CWHEAD
c52d			; | STR2NUM ( s -- n ) Convert a string on TOS to number | DONE 
c52d			 
c52d			 
c52d			; TODO STR type check to do 
c52d					if DEBUG_FORTH_WORDS_KEY 
c52d						DMARK "S2N" 
c52d f5				push af  
c52e 3a 42 c5			ld a, (.dmark)  
c531 32 65 ee			ld (debug_mark),a  
c534 3a 43 c5			ld a, (.dmark+1)  
c537 32 66 ee			ld (debug_mark+1),a  
c53a 3a 44 c5			ld a, (.dmark+2)  
c53d 32 67 ee			ld (debug_mark+2),a  
c540 18 03			jr .pastdmark  
c542 ..			.dmark: db "S2N"  
c545 f1			.pastdmark: pop af  
c546			endm  
# End of macro DMARK
c546						CALLMONITOR 
c546 cd 6f ee			call debug_vector  
c549				endm  
# End of macro CALLMONITOR
c549					endif 
c549			 
c549					;FORTH_DSP 
c549					FORTH_DSP_VALUE 
c549 cd 73 9c			call macro_forth_dsp_value 
c54c				endm 
# End of macro FORTH_DSP_VALUE
c54c					;inc hl 
c54c			 
c54c eb					ex de, hl 
c54d					if DEBUG_FORTH_WORDS 
c54d						DMARK "S2a" 
c54d f5				push af  
c54e 3a 62 c5			ld a, (.dmark)  
c551 32 65 ee			ld (debug_mark),a  
c554 3a 63 c5			ld a, (.dmark+1)  
c557 32 66 ee			ld (debug_mark+1),a  
c55a 3a 64 c5			ld a, (.dmark+2)  
c55d 32 67 ee			ld (debug_mark+2),a  
c560 18 03			jr .pastdmark  
c562 ..			.dmark: db "S2a"  
c565 f1			.pastdmark: pop af  
c566			endm  
# End of macro DMARK
c566						CALLMONITOR 
c566 cd 6f ee			call debug_vector  
c569				endm  
# End of macro CALLMONITOR
c569					endif 
c569 cd e7 8f				call string_to_uint16 
c56c			 
c56c					if DEBUG_FORTH_WORDS 
c56c						DMARK "S2b" 
c56c f5				push af  
c56d 3a 81 c5			ld a, (.dmark)  
c570 32 65 ee			ld (debug_mark),a  
c573 3a 82 c5			ld a, (.dmark+1)  
c576 32 66 ee			ld (debug_mark+1),a  
c579 3a 83 c5			ld a, (.dmark+2)  
c57c 32 67 ee			ld (debug_mark+2),a  
c57f 18 03			jr .pastdmark  
c581 ..			.dmark: db "S2b"  
c584 f1			.pastdmark: pop af  
c585			endm  
# End of macro DMARK
c585						CALLMONITOR 
c585 cd 6f ee			call debug_vector  
c588				endm  
# End of macro CALLMONITOR
c588					endif 
c588			;		push hl 
c588					FORTH_DSP_POP 
c588 cd 42 9d			call macro_forth_dsp_pop 
c58b				endm 
# End of macro FORTH_DSP_POP
c58b			;		pop hl 
c58b					 
c58b					if DEBUG_FORTH_WORDS 
c58b						DMARK "S2b" 
c58b f5				push af  
c58c 3a a0 c5			ld a, (.dmark)  
c58f 32 65 ee			ld (debug_mark),a  
c592 3a a1 c5			ld a, (.dmark+1)  
c595 32 66 ee			ld (debug_mark+1),a  
c598 3a a2 c5			ld a, (.dmark+2)  
c59b 32 67 ee			ld (debug_mark+2),a  
c59e 18 03			jr .pastdmark  
c5a0 ..			.dmark: db "S2b"  
c5a3 f1			.pastdmark: pop af  
c5a4			endm  
# End of macro DMARK
c5a4						CALLMONITOR 
c5a4 cd 6f ee			call debug_vector  
c5a7				endm  
# End of macro CALLMONITOR
c5a7					endif 
c5a7 cd 85 9a				call forth_push_numhl	 
c5aa			 
c5aa				 
c5aa				       NEXTW 
c5aa c3 76 9e			jp macro_next 
c5ad				endm 
# End of macro NEXTW
c5ad			.NUM2STR: 
c5ad				CWHEAD .CONCAT 52 "NUM2STR" 7 WORD_FLAG_CODE 
c5ad 48				db WORD_SYS_CORE+52             
c5ae 3f c6			dw .CONCAT            
c5b0 08				db 7 + 1 
c5b1 .. 00			db "NUM2STR",0              
c5b9				endm 
# End of macro CWHEAD
c5b9			; | NUM2STR ( n -- s ) Convert a number on TOS to zero padded string | DONE 
c5b9			 
c5b9			;		; malloc a string to target 
c5b9			;		ld hl, 10     ; TODO max string size should be fine 
c5b9			;		call malloc 
c5b9			;		push hl    ; save malloc location 
c5b9			; 
c5b9			; 
c5b9			;; TODO check int type 
c5b9					if DEBUG_FORTH_WORDS_KEY 
c5b9						DMARK "N2S" 
c5b9 f5				push af  
c5ba 3a ce c5			ld a, (.dmark)  
c5bd 32 65 ee			ld (debug_mark),a  
c5c0 3a cf c5			ld a, (.dmark+1)  
c5c3 32 66 ee			ld (debug_mark+1),a  
c5c6 3a d0 c5			ld a, (.dmark+2)  
c5c9 32 67 ee			ld (debug_mark+2),a  
c5cc 18 03			jr .pastdmark  
c5ce ..			.dmark: db "N2S"  
c5d1 f1			.pastdmark: pop af  
c5d2			endm  
# End of macro DMARK
c5d2						CALLMONITOR 
c5d2 cd 6f ee			call debug_vector  
c5d5				endm  
# End of macro CALLMONITOR
c5d5					endif 
c5d5			 
c5d5					FORTH_DSP_VALUEHL 
c5d5 cd 8a 9c			call macro_dsp_valuehl 
c5d8				endm 
# End of macro FORTH_DSP_VALUEHL
c5d8			 
c5d8					if DEBUG_FORTH_WORDS 
c5d8						DMARK "NS1" 
c5d8 f5				push af  
c5d9 3a ed c5			ld a, (.dmark)  
c5dc 32 65 ee			ld (debug_mark),a  
c5df 3a ee c5			ld a, (.dmark+1)  
c5e2 32 66 ee			ld (debug_mark+1),a  
c5e5 3a ef c5			ld a, (.dmark+2)  
c5e8 32 67 ee			ld (debug_mark+2),a  
c5eb 18 03			jr .pastdmark  
c5ed ..			.dmark: db "NS1"  
c5f0 f1			.pastdmark: pop af  
c5f1			endm  
# End of macro DMARK
c5f1						CALLMONITOR 
c5f1 cd 6f ee			call debug_vector  
c5f4				endm  
# End of macro CALLMONITOR
c5f4					endif 
c5f4					FORTH_DSP_POP 
c5f4 cd 42 9d			call macro_forth_dsp_pop 
c5f7				endm 
# End of macro FORTH_DSP_POP
c5f7			 
c5f7 eb					ex de, hl 
c5f8 21 bb e2				ld hl, scratch 
c5fb					if DEBUG_FORTH_WORDS 
c5fb						DMARK "NS2" 
c5fb f5				push af  
c5fc 3a 10 c6			ld a, (.dmark)  
c5ff 32 65 ee			ld (debug_mark),a  
c602 3a 11 c6			ld a, (.dmark+1)  
c605 32 66 ee			ld (debug_mark+1),a  
c608 3a 12 c6			ld a, (.dmark+2)  
c60b 32 67 ee			ld (debug_mark+2),a  
c60e 18 03			jr .pastdmark  
c610 ..			.dmark: db "NS2"  
c613 f1			.pastdmark: pop af  
c614			endm  
# End of macro DMARK
c614						CALLMONITOR 
c614 cd 6f ee			call debug_vector  
c617				endm  
# End of macro CALLMONITOR
c617					endif 
c617 cd ff 8f				call uitoa_16 
c61a 21 bb e2				ld hl, scratch 
c61d					if DEBUG_FORTH_WORDS 
c61d						DMARK "NS3" 
c61d f5				push af  
c61e 3a 32 c6			ld a, (.dmark)  
c621 32 65 ee			ld (debug_mark),a  
c624 3a 33 c6			ld a, (.dmark+1)  
c627 32 66 ee			ld (debug_mark+1),a  
c62a 3a 34 c6			ld a, (.dmark+2)  
c62d 32 67 ee			ld (debug_mark+2),a  
c630 18 03			jr .pastdmark  
c632 ..			.dmark: db "NS3"  
c635 f1			.pastdmark: pop af  
c636			endm  
# End of macro DMARK
c636						CALLMONITOR 
c636 cd 6f ee			call debug_vector  
c639				endm  
# End of macro CALLMONITOR
c639					endif 
c639 cd f3 9a				call forth_push_str 
c63c			;		ld a, l 
c63c			;		call DispAToASCII   
c63c			;;TODO need to chage above call to dump into string 
c63c			; 
c63c			; 
c63c			 
c63c				       NEXTW 
c63c c3 76 9e			jp macro_next 
c63f				endm 
# End of macro NEXTW
c63f			 
c63f			.CONCAT: 
c63f				CWHEAD .FIND 52 "CONCAT" 6 WORD_FLAG_CODE 
c63f 48				db WORD_SYS_CORE+52             
c640 f2 c6			dw .FIND            
c642 07				db 6 + 1 
c643 .. 00			db "CONCAT",0              
c64a				endm 
# End of macro CWHEAD
c64a			; | CONCAT ( s1 s2 -- s3 ) A s1 + s2 is pushed onto the stack | DONE 
c64a			 
c64a			; TODO check string type 
c64a			; TODO create macro to get pointer for next item on stack. Handy for lots of things 
c64a			 
c64a					if DEBUG_FORTH_WORDS_KEY 
c64a						DMARK "CON" 
c64a f5				push af  
c64b 3a 5f c6			ld a, (.dmark)  
c64e 32 65 ee			ld (debug_mark),a  
c651 3a 60 c6			ld a, (.dmark+1)  
c654 32 66 ee			ld (debug_mark+1),a  
c657 3a 61 c6			ld a, (.dmark+2)  
c65a 32 67 ee			ld (debug_mark+2),a  
c65d 18 03			jr .pastdmark  
c65f ..			.dmark: db "CON"  
c662 f1			.pastdmark: pop af  
c663			endm  
# End of macro DMARK
c663						CALLMONITOR 
c663 cd 6f ee			call debug_vector  
c666				endm  
# End of macro CALLMONITOR
c666					endif 
c666			 
c666			 
c666					FORTH_DSP_VALUE 
c666 cd 73 9c			call macro_forth_dsp_value 
c669				endm 
# End of macro FORTH_DSP_VALUE
c669 e5					push hl   ; s2 
c66a			 
c66a					FORTH_DSP_POP 
c66a cd 42 9d			call macro_forth_dsp_pop 
c66d				endm 
# End of macro FORTH_DSP_POP
c66d			 
c66d					FORTH_DSP_VALUE 
c66d cd 73 9c			call macro_forth_dsp_value 
c670				endm 
# End of macro FORTH_DSP_VALUE
c670			 
c670 e5					push hl   ; s1 
c671			 
c671					FORTH_DSP_POP 
c671 cd 42 9d			call macro_forth_dsp_pop 
c674				endm 
# End of macro FORTH_DSP_POP
c674					 
c674			 
c674					; copy s1 
c674			 
c674				 
c674					; save ptr 
c674 e1					pop hl  
c675 e5					push hl 
c676 3e 00				ld a, 0 
c678 cd 5b 90				call strlent 
c67b					;inc hl    ; zer0 
c67b 06 00				ld b, 0 
c67d 4d					ld c, l 
c67e e1					pop hl		 
c67f 11 bb e2				ld de, scratch	 
c682					if DEBUG_FORTH_WORDS 
c682						DMARK "CO1" 
c682 f5				push af  
c683 3a 97 c6			ld a, (.dmark)  
c686 32 65 ee			ld (debug_mark),a  
c689 3a 98 c6			ld a, (.dmark+1)  
c68c 32 66 ee			ld (debug_mark+1),a  
c68f 3a 99 c6			ld a, (.dmark+2)  
c692 32 67 ee			ld (debug_mark+2),a  
c695 18 03			jr .pastdmark  
c697 ..			.dmark: db "CO1"  
c69a f1			.pastdmark: pop af  
c69b			endm  
# End of macro DMARK
c69b						CALLMONITOR 
c69b cd 6f ee			call debug_vector  
c69e				endm  
# End of macro CALLMONITOR
c69e					endif 
c69e ed b0				ldir 
c6a0			 
c6a0 e1					pop hl 
c6a1 e5					push hl 
c6a2 d5					push de 
c6a3			 
c6a3			 
c6a3 3e 00				ld a, 0 
c6a5 cd 5b 90				call strlent 
c6a8 23					inc hl    ; zer0 
c6a9 23					inc hl 
c6aa 06 00				ld b, 0 
c6ac 4d					ld c, l 
c6ad d1					pop de 
c6ae e1					pop hl		 
c6af					if DEBUG_FORTH_WORDS 
c6af						DMARK "CO2" 
c6af f5				push af  
c6b0 3a c4 c6			ld a, (.dmark)  
c6b3 32 65 ee			ld (debug_mark),a  
c6b6 3a c5 c6			ld a, (.dmark+1)  
c6b9 32 66 ee			ld (debug_mark+1),a  
c6bc 3a c6 c6			ld a, (.dmark+2)  
c6bf 32 67 ee			ld (debug_mark+2),a  
c6c2 18 03			jr .pastdmark  
c6c4 ..			.dmark: db "CO2"  
c6c7 f1			.pastdmark: pop af  
c6c8			endm  
# End of macro DMARK
c6c8						CALLMONITOR 
c6c8 cd 6f ee			call debug_vector  
c6cb				endm  
# End of macro CALLMONITOR
c6cb					endif 
c6cb ed b0				ldir 
c6cd			 
c6cd			 
c6cd			 
c6cd 21 bb e2				ld hl, scratch 
c6d0					if DEBUG_FORTH_WORDS 
c6d0						DMARK "CO5" 
c6d0 f5				push af  
c6d1 3a e5 c6			ld a, (.dmark)  
c6d4 32 65 ee			ld (debug_mark),a  
c6d7 3a e6 c6			ld a, (.dmark+1)  
c6da 32 66 ee			ld (debug_mark+1),a  
c6dd 3a e7 c6			ld a, (.dmark+2)  
c6e0 32 67 ee			ld (debug_mark+2),a  
c6e3 18 03			jr .pastdmark  
c6e5 ..			.dmark: db "CO5"  
c6e8 f1			.pastdmark: pop af  
c6e9			endm  
# End of macro DMARK
c6e9						CALLMONITOR 
c6e9 cd 6f ee			call debug_vector  
c6ec				endm  
# End of macro CALLMONITOR
c6ec					endif 
c6ec			 
c6ec cd f3 9a				call forth_push_str 
c6ef			 
c6ef			 
c6ef			 
c6ef			 
c6ef				       NEXTW 
c6ef c3 76 9e			jp macro_next 
c6f2				endm 
# End of macro NEXTW
c6f2			 
c6f2			 
c6f2			.FIND: 
c6f2				CWHEAD .LEN 55 "FIND" 4 WORD_FLAG_CODE 
c6f2 4b				db WORD_SYS_CORE+55             
c6f3 b0 c7			dw .LEN            
c6f5 05				db 4 + 1 
c6f6 .. 00			db "FIND",0              
c6fb				endm 
# End of macro CWHEAD
c6fb			; | FIND ( s c -- s u ) Search the string s for the char c and push the position of the first occurance to TOS | DONE 
c6fb			 
c6fb					if DEBUG_FORTH_WORDS_KEY 
c6fb						DMARK "FND" 
c6fb f5				push af  
c6fc 3a 10 c7			ld a, (.dmark)  
c6ff 32 65 ee			ld (debug_mark),a  
c702 3a 11 c7			ld a, (.dmark+1)  
c705 32 66 ee			ld (debug_mark+1),a  
c708 3a 12 c7			ld a, (.dmark+2)  
c70b 32 67 ee			ld (debug_mark+2),a  
c70e 18 03			jr .pastdmark  
c710 ..			.dmark: db "FND"  
c713 f1			.pastdmark: pop af  
c714			endm  
# End of macro DMARK
c714						CALLMONITOR 
c714 cd 6f ee			call debug_vector  
c717				endm  
# End of macro CALLMONITOR
c717					endif 
c717			 
c717			; TODO check string type 
c717					FORTH_DSP_VALUE 
c717 cd 73 9c			call macro_forth_dsp_value 
c71a				endm 
# End of macro FORTH_DSP_VALUE
c71a			 
c71a e5					push hl    
c71b 7e					ld a,(hl)    ; char to find   
c71c			; TODO change char to substr 
c71c			 
c71c f5					push af 
c71d					 
c71d			 
c71d			 
c71d					if DEBUG_FORTH_WORDS 
c71d						DMARK "FN1" 
c71d f5				push af  
c71e 3a 32 c7			ld a, (.dmark)  
c721 32 65 ee			ld (debug_mark),a  
c724 3a 33 c7			ld a, (.dmark+1)  
c727 32 66 ee			ld (debug_mark+1),a  
c72a 3a 34 c7			ld a, (.dmark+2)  
c72d 32 67 ee			ld (debug_mark+2),a  
c730 18 03			jr .pastdmark  
c732 ..			.dmark: db "FN1"  
c735 f1			.pastdmark: pop af  
c736			endm  
# End of macro DMARK
c736						CALLMONITOR 
c736 cd 6f ee			call debug_vector  
c739				endm  
# End of macro CALLMONITOR
c739					endif 
c739			 
c739					FORTH_DSP_POP 
c739 cd 42 9d			call macro_forth_dsp_pop 
c73c				endm 
# End of macro FORTH_DSP_POP
c73c			 
c73c					; string to search 
c73c			 
c73c					FORTH_DSP_VALUE 
c73c cd 73 9c			call macro_forth_dsp_value 
c73f				endm 
# End of macro FORTH_DSP_VALUE
c73f			 
c73f d1					pop de  ; d is char to find  
c740			 
c740					if DEBUG_FORTH_WORDS 
c740						DMARK "FN2" 
c740 f5				push af  
c741 3a 55 c7			ld a, (.dmark)  
c744 32 65 ee			ld (debug_mark),a  
c747 3a 56 c7			ld a, (.dmark+1)  
c74a 32 66 ee			ld (debug_mark+1),a  
c74d 3a 57 c7			ld a, (.dmark+2)  
c750 32 67 ee			ld (debug_mark+2),a  
c753 18 03			jr .pastdmark  
c755 ..			.dmark: db "FN2"  
c758 f1			.pastdmark: pop af  
c759			endm  
# End of macro DMARK
c759						CALLMONITOR 
c759 cd 6f ee			call debug_vector  
c75c				endm  
# End of macro CALLMONITOR
c75c					endif 
c75c					 
c75c 01 00 00				ld bc, 0 
c75f 7e			.findchar:      ld a,(hl) 
c760 fe 00				cp 0   		 
c762 28 27				jr z, .finddone     
c764 ba					cp d 
c765 28 20				jr z, .foundchar 
c767 03					inc bc 
c768 23					inc hl 
c769					if DEBUG_FORTH_WORDS 
c769						DMARK "FN3" 
c769 f5				push af  
c76a 3a 7e c7			ld a, (.dmark)  
c76d 32 65 ee			ld (debug_mark),a  
c770 3a 7f c7			ld a, (.dmark+1)  
c773 32 66 ee			ld (debug_mark+1),a  
c776 3a 80 c7			ld a, (.dmark+2)  
c779 32 67 ee			ld (debug_mark+2),a  
c77c 18 03			jr .pastdmark  
c77e ..			.dmark: db "FN3"  
c781 f1			.pastdmark: pop af  
c782			endm  
# End of macro DMARK
c782						CALLMONITOR 
c782 cd 6f ee			call debug_vector  
c785				endm  
# End of macro CALLMONITOR
c785					endif 
c785 18 d8				jr .findchar 
c787			 
c787			 
c787 c5			.foundchar:	push bc 
c788 e1					pop hl 
c789 18 03				jr .findexit 
c78b			 
c78b			 
c78b							 
c78b			 
c78b			.finddone:     ; got to end of string with no find 
c78b 21 00 00				ld hl, 0 
c78e			.findexit: 
c78e			 
c78e					if DEBUG_FORTH_WORDS 
c78e						DMARK "FNd" 
c78e f5				push af  
c78f 3a a3 c7			ld a, (.dmark)  
c792 32 65 ee			ld (debug_mark),a  
c795 3a a4 c7			ld a, (.dmark+1)  
c798 32 66 ee			ld (debug_mark+1),a  
c79b 3a a5 c7			ld a, (.dmark+2)  
c79e 32 67 ee			ld (debug_mark+2),a  
c7a1 18 03			jr .pastdmark  
c7a3 ..			.dmark: db "FNd"  
c7a6 f1			.pastdmark: pop af  
c7a7			endm  
# End of macro DMARK
c7a7						CALLMONITOR 
c7a7 cd 6f ee			call debug_vector  
c7aa				endm  
# End of macro CALLMONITOR
c7aa					endif 
c7aa cd 85 9a			call forth_push_numhl 
c7ad			 
c7ad				       NEXTW 
c7ad c3 76 9e			jp macro_next 
c7b0				endm 
# End of macro NEXTW
c7b0			 
c7b0			.LEN: 
c7b0				CWHEAD .ASC 56 "COUNT" 5 WORD_FLAG_CODE 
c7b0 4c				db WORD_SYS_CORE+56             
c7b1 1a c8			dw .ASC            
c7b3 06				db 5 + 1 
c7b4 .. 00			db "COUNT",0              
c7ba				endm 
# End of macro CWHEAD
c7ba			; | COUNT (  str -- str u1 ) Push the length of the string str on TOS as u1 | DONE 
c7ba			 
c7ba					if DEBUG_FORTH_WORDS_KEY 
c7ba						DMARK "CNT" 
c7ba f5				push af  
c7bb 3a cf c7			ld a, (.dmark)  
c7be 32 65 ee			ld (debug_mark),a  
c7c1 3a d0 c7			ld a, (.dmark+1)  
c7c4 32 66 ee			ld (debug_mark+1),a  
c7c7 3a d1 c7			ld a, (.dmark+2)  
c7ca 32 67 ee			ld (debug_mark+2),a  
c7cd 18 03			jr .pastdmark  
c7cf ..			.dmark: db "CNT"  
c7d2 f1			.pastdmark: pop af  
c7d3			endm  
# End of macro DMARK
c7d3						CALLMONITOR 
c7d3 cd 6f ee			call debug_vector  
c7d6				endm  
# End of macro CALLMONITOR
c7d6					endif 
c7d6			; TODO check string type 
c7d6					FORTH_DSP_VALUE 
c7d6 cd 73 9c			call macro_forth_dsp_value 
c7d9				endm 
# End of macro FORTH_DSP_VALUE
c7d9			 
c7d9			 
c7d9					if DEBUG_FORTH_WORDS 
c7d9						DMARK "CN?" 
c7d9 f5				push af  
c7da 3a ee c7			ld a, (.dmark)  
c7dd 32 65 ee			ld (debug_mark),a  
c7e0 3a ef c7			ld a, (.dmark+1)  
c7e3 32 66 ee			ld (debug_mark+1),a  
c7e6 3a f0 c7			ld a, (.dmark+2)  
c7e9 32 67 ee			ld (debug_mark+2),a  
c7ec 18 03			jr .pastdmark  
c7ee ..			.dmark: db "CN?"  
c7f1 f1			.pastdmark: pop af  
c7f2			endm  
# End of macro DMARK
c7f2						CALLMONITOR 
c7f2 cd 6f ee			call debug_vector  
c7f5				endm  
# End of macro CALLMONITOR
c7f5					endif 
c7f5 cd 50 90				call strlenz 
c7f8					if DEBUG_FORTH_WORDS 
c7f8						DMARK "CNl" 
c7f8 f5				push af  
c7f9 3a 0d c8			ld a, (.dmark)  
c7fc 32 65 ee			ld (debug_mark),a  
c7ff 3a 0e c8			ld a, (.dmark+1)  
c802 32 66 ee			ld (debug_mark+1),a  
c805 3a 0f c8			ld a, (.dmark+2)  
c808 32 67 ee			ld (debug_mark+2),a  
c80b 18 03			jr .pastdmark  
c80d ..			.dmark: db "CNl"  
c810 f1			.pastdmark: pop af  
c811			endm  
# End of macro DMARK
c811						CALLMONITOR 
c811 cd 6f ee			call debug_vector  
c814				endm  
# End of macro CALLMONITOR
c814					endif 
c814			 
c814 cd 85 9a				call forth_push_numhl 
c817			 
c817			 
c817			 
c817				       NEXTW 
c817 c3 76 9e			jp macro_next 
c81a				endm 
# End of macro NEXTW
c81a			.ASC: 
c81a				CWHEAD .CHR 57 "ASC" 3 WORD_FLAG_CODE 
c81a 4d				db WORD_SYS_CORE+57             
c81b 88 c8			dw .CHR            
c81d 04				db 3 + 1 
c81e .. 00			db "ASC",0              
c822				endm 
# End of macro CWHEAD
c822			; | ASC ( u -- n ) Get the ASCII value of the first character of the string on TOS | DONE 
c822					if DEBUG_FORTH_WORDS_KEY 
c822						DMARK "ASC" 
c822 f5				push af  
c823 3a 37 c8			ld a, (.dmark)  
c826 32 65 ee			ld (debug_mark),a  
c829 3a 38 c8			ld a, (.dmark+1)  
c82c 32 66 ee			ld (debug_mark+1),a  
c82f 3a 39 c8			ld a, (.dmark+2)  
c832 32 67 ee			ld (debug_mark+2),a  
c835 18 03			jr .pastdmark  
c837 ..			.dmark: db "ASC"  
c83a f1			.pastdmark: pop af  
c83b			endm  
# End of macro DMARK
c83b						CALLMONITOR 
c83b cd 6f ee			call debug_vector  
c83e				endm  
# End of macro CALLMONITOR
c83e					endif 
c83e					FORTH_DSP_VALUE 
c83e cd 73 9c			call macro_forth_dsp_value 
c841				endm 
# End of macro FORTH_DSP_VALUE
c841					;v5 FORTH_DSP_VALUE 
c841			;		inc hl      ; now at start of numeric as string 
c841			 
c841 e5					push hl 
c842			 
c842					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c842 cd 42 9d			call macro_forth_dsp_pop 
c845				endm 
# End of macro FORTH_DSP_POP
c845			 
c845 e1					pop hl 
c846			 
c846					if DEBUG_FORTH_WORDS 
c846						DMARK "AS1" 
c846 f5				push af  
c847 3a 5b c8			ld a, (.dmark)  
c84a 32 65 ee			ld (debug_mark),a  
c84d 3a 5c c8			ld a, (.dmark+1)  
c850 32 66 ee			ld (debug_mark+1),a  
c853 3a 5d c8			ld a, (.dmark+2)  
c856 32 67 ee			ld (debug_mark+2),a  
c859 18 03			jr .pastdmark  
c85b ..			.dmark: db "AS1"  
c85e f1			.pastdmark: pop af  
c85f			endm  
# End of macro DMARK
c85f						CALLMONITOR 
c85f cd 6f ee			call debug_vector  
c862				endm  
# End of macro CALLMONITOR
c862					endif 
c862					; push the content of a onto the stack as a value 
c862			 
c862 7e					ld a,(hl)   ; get char 
c863 26 00				ld h,0 
c865 6f					ld l,a 
c866					if DEBUG_FORTH_WORDS 
c866						DMARK "AS2" 
c866 f5				push af  
c867 3a 7b c8			ld a, (.dmark)  
c86a 32 65 ee			ld (debug_mark),a  
c86d 3a 7c c8			ld a, (.dmark+1)  
c870 32 66 ee			ld (debug_mark+1),a  
c873 3a 7d c8			ld a, (.dmark+2)  
c876 32 67 ee			ld (debug_mark+2),a  
c879 18 03			jr .pastdmark  
c87b ..			.dmark: db "AS2"  
c87e f1			.pastdmark: pop af  
c87f			endm  
# End of macro DMARK
c87f						CALLMONITOR 
c87f cd 6f ee			call debug_vector  
c882				endm  
# End of macro CALLMONITOR
c882					endif 
c882 cd 85 9a				call forth_push_numhl 
c885			 
c885				       NEXTW 
c885 c3 76 9e			jp macro_next 
c888				endm 
# End of macro NEXTW
c888			 
c888			.CHR: 
c888				CWHEAD .ENDSTR 57 "CHR" 3 WORD_FLAG_CODE 
c888 4d				db WORD_SYS_CORE+57             
c889 c4 c8			dw .ENDSTR            
c88b 04				db 3 + 1 
c88c .. 00			db "CHR",0              
c890				endm 
# End of macro CWHEAD
c890			; | CHR ( u -- n ) The ASCII character value of u is turned into a string n on the stack | DONE 
c890					if DEBUG_FORTH_WORDS_KEY 
c890						DMARK "CHR" 
c890 f5				push af  
c891 3a a5 c8			ld a, (.dmark)  
c894 32 65 ee			ld (debug_mark),a  
c897 3a a6 c8			ld a, (.dmark+1)  
c89a 32 66 ee			ld (debug_mark+1),a  
c89d 3a a7 c8			ld a, (.dmark+2)  
c8a0 32 67 ee			ld (debug_mark+2),a  
c8a3 18 03			jr .pastdmark  
c8a5 ..			.dmark: db "CHR"  
c8a8 f1			.pastdmark: pop af  
c8a9			endm  
# End of macro DMARK
c8a9						CALLMONITOR 
c8a9 cd 6f ee			call debug_vector  
c8ac				endm  
# End of macro CALLMONITOR
c8ac					endif 
c8ac					FORTH_DSP_VALUEHL 
c8ac cd 8a 9c			call macro_dsp_valuehl 
c8af				endm 
# End of macro FORTH_DSP_VALUEHL
c8af			 
c8af					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
c8af cd 42 9d			call macro_forth_dsp_pop 
c8b2				endm 
# End of macro FORTH_DSP_POP
c8b2			 
c8b2					; save asci byte as a zero term string and push string 
c8b2			 
c8b2 7d					ld a,l 
c8b3 32 bb e2				ld (scratch), a 
c8b6			 
c8b6 3e 00				ld a, 0 
c8b8 32 bc e2				ld (scratch+1), a 
c8bb			 
c8bb 21 bb e2				ld hl, scratch 
c8be cd f3 9a				call forth_push_str 
c8c1			 
c8c1			 
c8c1				       NEXTW 
c8c1 c3 76 9e			jp macro_next 
c8c4				endm 
# End of macro NEXTW
c8c4			 
c8c4			 
c8c4			 
c8c4			 
c8c4			.ENDSTR: 
c8c4			; eof 
c8c4			 
# End of file forth_words_str.asm
c8c4			include "forth_words_key.asm" 
c8c4			 
c8c4			; | ## Keyboard Words 
c8c4			 
c8c4			.KEY: 
c8c4				CWHEAD .KEYDB 42 "KEY" 3 WORD_FLAG_CODE 
c8c4 3e				db WORD_SYS_CORE+42             
c8c5 f4 c8			dw .KEYDB            
c8c7 04				db 3 + 1 
c8c8 .. 00			db "KEY",0              
c8cc				endm 
# End of macro CWHEAD
c8cc			; | KEY ( -- u ) A non-blocking read of keypress | DONE 
c8cc			; | | The ASCII key (or key code) is pushed to stack. If no key is currently held down then push a 0 
c8cc			; | | Can use something like this to process: 
c8cc			; | | > repeat active . key ?dup if emit then #1 until  
c8cc			 
c8cc					if DEBUG_FORTH_WORDS_KEY 
c8cc						DMARK "KEY" 
c8cc f5				push af  
c8cd 3a e1 c8			ld a, (.dmark)  
c8d0 32 65 ee			ld (debug_mark),a  
c8d3 3a e2 c8			ld a, (.dmark+1)  
c8d6 32 66 ee			ld (debug_mark+1),a  
c8d9 3a e3 c8			ld a, (.dmark+2)  
c8dc 32 67 ee			ld (debug_mark+2),a  
c8df 18 03			jr .pastdmark  
c8e1 ..			.dmark: db "KEY"  
c8e4 f1			.pastdmark: pop af  
c8e5			endm  
# End of macro DMARK
c8e5						CALLMONITOR 
c8e5 cd 6f ee			call debug_vector  
c8e8				endm  
# End of macro CALLMONITOR
c8e8					endif 
c8e8			; TODO currently waits 
c8e8 cd e2 df				call cinndb 
c8eb					;call cin_wait 
c8eb 6f					ld l, a 
c8ec 26 00				ld h, 0 
c8ee cd 85 9a				call forth_push_numhl 
c8f1					NEXTW 
c8f1 c3 76 9e			jp macro_next 
c8f4				endm 
# End of macro NEXTW
c8f4			.KEYDB: 
c8f4				CWHEAD .WAITK 42 "KEYDB" 5 WORD_FLAG_CODE 
c8f4 3e				db WORD_SYS_CORE+42             
c8f5 26 c9			dw .WAITK            
c8f7 06				db 5 + 1 
c8f8 .. 00			db "KEYDB",0              
c8fe				endm 
# End of macro CWHEAD
c8fe			; | KEYDB ( -- u ) A non-blocking read of keypress with key release debounce | DONE 
c8fe			; | | The ASCII key (or key code) is pushed to stack. If no key is currently held down then push a 0 
c8fe			; | | Can use something like this to process: 
c8fe			; | | > repeat active . key ?dup if emit then #1 until  
c8fe			 
c8fe					if DEBUG_FORTH_WORDS_KEY 
c8fe						DMARK "KEB" 
c8fe f5				push af  
c8ff 3a 13 c9			ld a, (.dmark)  
c902 32 65 ee			ld (debug_mark),a  
c905 3a 14 c9			ld a, (.dmark+1)  
c908 32 66 ee			ld (debug_mark+1),a  
c90b 3a 15 c9			ld a, (.dmark+2)  
c90e 32 67 ee			ld (debug_mark+2),a  
c911 18 03			jr .pastdmark  
c913 ..			.dmark: db "KEB"  
c916 f1			.pastdmark: pop af  
c917			endm  
# End of macro DMARK
c917						CALLMONITOR 
c917 cd 6f ee			call debug_vector  
c91a				endm  
# End of macro CALLMONITOR
c91a					endif 
c91a			; TODO currently waits 
c91a cd e2 df				call cin 
c91d					;call cin_wait 
c91d 6f					ld l, a 
c91e 26 00				ld h, 0 
c920 cd 85 9a				call forth_push_numhl 
c923					NEXTW 
c923 c3 76 9e			jp macro_next 
c926				endm 
# End of macro NEXTW
c926			.WAITK: 
c926				CWHEAD .ACCEPT 43 "WAITK" 5 WORD_FLAG_CODE 
c926 3f				db WORD_SYS_CORE+43             
c927 58 c9			dw .ACCEPT            
c929 06				db 5 + 1 
c92a .. 00			db "WAITK",0              
c930				endm 
# End of macro CWHEAD
c930			; | WAITK ( -- w ) Wait for keypress TOS is key press | DONE 
c930					if DEBUG_FORTH_WORDS_KEY 
c930						DMARK "WAI" 
c930 f5				push af  
c931 3a 45 c9			ld a, (.dmark)  
c934 32 65 ee			ld (debug_mark),a  
c937 3a 46 c9			ld a, (.dmark+1)  
c93a 32 66 ee			ld (debug_mark+1),a  
c93d 3a 47 c9			ld a, (.dmark+2)  
c940 32 67 ee			ld (debug_mark+2),a  
c943 18 03			jr .pastdmark  
c945 ..			.dmark: db "WAI"  
c948 f1			.pastdmark: pop af  
c949			endm  
# End of macro DMARK
c949						CALLMONITOR 
c949 cd 6f ee			call debug_vector  
c94c				endm  
# End of macro CALLMONITOR
c94c					endif 
c94c cd dc df				call cin_wait 
c94f 6f					ld l, a 
c950 26 00				ld h, 0 
c952 cd 85 9a				call forth_push_numhl 
c955					NEXTW 
c955 c3 76 9e			jp macro_next 
c958				endm 
# End of macro NEXTW
c958			.ACCEPT: 
c958				CWHEAD .EDIT 44 "ACCEPT" 6 WORD_FLAG_CODE 
c958 40				db WORD_SYS_CORE+44             
c959 b6 c9			dw .EDIT            
c95b 07				db 6 + 1 
c95c .. 00			db "ACCEPT",0              
c963				endm 
# End of macro CWHEAD
c963			; | ACCEPT ( -- w ) Prompt for text input and push pointer to string | DONE 
c963					; TODO crashes on push 
c963					if DEBUG_FORTH_WORDS_KEY 
c963						DMARK "ACC" 
c963 f5				push af  
c964 3a 78 c9			ld a, (.dmark)  
c967 32 65 ee			ld (debug_mark),a  
c96a 3a 79 c9			ld a, (.dmark+1)  
c96d 32 66 ee			ld (debug_mark+1),a  
c970 3a 7a c9			ld a, (.dmark+2)  
c973 32 67 ee			ld (debug_mark+2),a  
c976 18 03			jr .pastdmark  
c978 ..			.dmark: db "ACC"  
c97b f1			.pastdmark: pop af  
c97c			endm  
# End of macro DMARK
c97c						CALLMONITOR 
c97c cd 6f ee			call debug_vector  
c97f				endm  
# End of macro CALLMONITOR
c97f					endif 
c97f 21 b9 e4				ld hl, os_input 
c982 3e 00				ld a, 0 
c984 77					ld (hl),a 
c985 3a 58 ea				ld a,(f_cursor_ptr) 
c988 16 64				ld d, 100 
c98a 0e 00				ld c, 0 
c98c 1e 28				ld e, 40 
c98e cd 17 8d				call input_str 
c991					; TODO perhaps do a type check and wrap in quotes if not a number 
c991 21 b9 e4				ld hl, os_input 
c994					if DEBUG_FORTH_WORDS 
c994						DMARK "AC1" 
c994 f5				push af  
c995 3a a9 c9			ld a, (.dmark)  
c998 32 65 ee			ld (debug_mark),a  
c99b 3a aa c9			ld a, (.dmark+1)  
c99e 32 66 ee			ld (debug_mark+1),a  
c9a1 3a ab c9			ld a, (.dmark+2)  
c9a4 32 67 ee			ld (debug_mark+2),a  
c9a7 18 03			jr .pastdmark  
c9a9 ..			.dmark: db "AC1"  
c9ac f1			.pastdmark: pop af  
c9ad			endm  
# End of macro DMARK
c9ad						CALLMONITOR 
c9ad cd 6f ee			call debug_vector  
c9b0				endm  
# End of macro CALLMONITOR
c9b0					endif 
c9b0 cd f3 9a				call forth_push_str 
c9b3					NEXTW 
c9b3 c3 76 9e			jp macro_next 
c9b6				endm 
# End of macro NEXTW
c9b6			 
c9b6			.EDIT: 
c9b6				CWHEAD .DEDIT 44 "EDIT" 4 WORD_FLAG_CODE 
c9b6 40				db WORD_SYS_CORE+44             
c9b7 58 ca			dw .DEDIT            
c9b9 05				db 4 + 1 
c9ba .. 00			db "EDIT",0              
c9bf				endm 
# End of macro CWHEAD
c9bf			; | EDIT ( u -- u ) Takes string on TOS and allows editing of it. Pushes it back once done. | DONE 
c9bf			 
c9bf					; TODO does not copy from stack 
c9bf					if DEBUG_FORTH_WORDS_KEY 
c9bf						DMARK "EDT" 
c9bf f5				push af  
c9c0 3a d4 c9			ld a, (.dmark)  
c9c3 32 65 ee			ld (debug_mark),a  
c9c6 3a d5 c9			ld a, (.dmark+1)  
c9c9 32 66 ee			ld (debug_mark+1),a  
c9cc 3a d6 c9			ld a, (.dmark+2)  
c9cf 32 67 ee			ld (debug_mark+2),a  
c9d2 18 03			jr .pastdmark  
c9d4 ..			.dmark: db "EDT"  
c9d7 f1			.pastdmark: pop af  
c9d8			endm  
# End of macro DMARK
c9d8						CALLMONITOR 
c9d8 cd 6f ee			call debug_vector  
c9db				endm  
# End of macro CALLMONITOR
c9db					endif 
c9db			 
c9db					;FORTH_DSP 
c9db					FORTH_DSP_VALUEHL 
c9db cd 8a 9c			call macro_dsp_valuehl 
c9de				endm 
# End of macro FORTH_DSP_VALUEHL
c9de			;		inc hl    ; TODO do type check 
c9de			 
c9de			;		call get_word_hl 
c9de e5					push hl 
c9df					if DEBUG_FORTH_WORDS 
c9df						DMARK "EDp" 
c9df f5				push af  
c9e0 3a f4 c9			ld a, (.dmark)  
c9e3 32 65 ee			ld (debug_mark),a  
c9e6 3a f5 c9			ld a, (.dmark+1)  
c9e9 32 66 ee			ld (debug_mark+1),a  
c9ec 3a f6 c9			ld a, (.dmark+2)  
c9ef 32 67 ee			ld (debug_mark+2),a  
c9f2 18 03			jr .pastdmark  
c9f4 ..			.dmark: db "EDp"  
c9f7 f1			.pastdmark: pop af  
c9f8			endm  
# End of macro DMARK
c9f8						CALLMONITOR 
c9f8 cd 6f ee			call debug_vector  
c9fb				endm  
# End of macro CALLMONITOR
c9fb					endif 
c9fb				;	ld a, 0 
c9fb cd 50 90				call strlenz 
c9fe 23					inc hl 
c9ff			 
c9ff 06 00				ld b, 0 
ca01 4d					ld c, l 
ca02			 
ca02 e1					pop hl 
ca03 11 b9 e4				ld de, os_input 
ca06					if DEBUG_FORTH_WORDS_KEY 
ca06						DMARK "EDc" 
ca06 f5				push af  
ca07 3a 1b ca			ld a, (.dmark)  
ca0a 32 65 ee			ld (debug_mark),a  
ca0d 3a 1c ca			ld a, (.dmark+1)  
ca10 32 66 ee			ld (debug_mark+1),a  
ca13 3a 1d ca			ld a, (.dmark+2)  
ca16 32 67 ee			ld (debug_mark+2),a  
ca19 18 03			jr .pastdmark  
ca1b ..			.dmark: db "EDc"  
ca1e f1			.pastdmark: pop af  
ca1f			endm  
# End of macro DMARK
ca1f						CALLMONITOR 
ca1f cd 6f ee			call debug_vector  
ca22				endm  
# End of macro CALLMONITOR
ca22					endif 
ca22 ed b0				ldir 
ca24			 
ca24			 
ca24 21 b9 e4				ld hl, os_input 
ca27					;ld a, 0 
ca27					;ld (hl),a 
ca27 3a 58 ea				ld a,(f_cursor_ptr) 
ca2a 16 64				ld d, 100 
ca2c 0e 00				ld c, 0 
ca2e 1e 28				ld e, 40 
ca30 cd 17 8d				call input_str 
ca33					; TODO perhaps do a type check and wrap in quotes if not a number 
ca33 21 b9 e4				ld hl, os_input 
ca36					if DEBUG_FORTH_WORDS 
ca36						DMARK "ED1" 
ca36 f5				push af  
ca37 3a 4b ca			ld a, (.dmark)  
ca3a 32 65 ee			ld (debug_mark),a  
ca3d 3a 4c ca			ld a, (.dmark+1)  
ca40 32 66 ee			ld (debug_mark+1),a  
ca43 3a 4d ca			ld a, (.dmark+2)  
ca46 32 67 ee			ld (debug_mark+2),a  
ca49 18 03			jr .pastdmark  
ca4b ..			.dmark: db "ED1"  
ca4e f1			.pastdmark: pop af  
ca4f			endm  
# End of macro DMARK
ca4f						CALLMONITOR 
ca4f cd 6f ee			call debug_vector  
ca52				endm  
# End of macro CALLMONITOR
ca52					endif 
ca52 cd f3 9a				call forth_push_str 
ca55					NEXTW 
ca55 c3 76 9e			jp macro_next 
ca58				endm 
# End of macro NEXTW
ca58			 
ca58			.DEDIT: 
ca58				CWHEAD .ENDKEY 44 "DEDIT" 5 WORD_FLAG_CODE 
ca58 40				db WORD_SYS_CORE+44             
ca59 ba ca			dw .ENDKEY            
ca5b 06				db 5 + 1 
ca5c .. 00			db "DEDIT",0              
ca62				endm 
# End of macro CWHEAD
ca62			; | DEDIT ( ptr --  ) Takes an address for direct editing in memory. | DONE 
ca62			 
ca62					; TODO does not copy from stack 
ca62					if DEBUG_FORTH_WORDS_KEY 
ca62						DMARK "DED" 
ca62 f5				push af  
ca63 3a 77 ca			ld a, (.dmark)  
ca66 32 65 ee			ld (debug_mark),a  
ca69 3a 78 ca			ld a, (.dmark+1)  
ca6c 32 66 ee			ld (debug_mark+1),a  
ca6f 3a 79 ca			ld a, (.dmark+2)  
ca72 32 67 ee			ld (debug_mark+2),a  
ca75 18 03			jr .pastdmark  
ca77 ..			.dmark: db "DED"  
ca7a f1			.pastdmark: pop af  
ca7b			endm  
# End of macro DMARK
ca7b						CALLMONITOR 
ca7b cd 6f ee			call debug_vector  
ca7e				endm  
# End of macro CALLMONITOR
ca7e					endif 
ca7e			 
ca7e					;FORTH_DSP 
ca7e					FORTH_DSP_VALUEHL 
ca7e cd 8a 9c			call macro_dsp_valuehl 
ca81				endm 
# End of macro FORTH_DSP_VALUEHL
ca81			;		inc hl    ; TODO do type check 
ca81			 
ca81			;		call get_word_hl 
ca81 e5					push hl 
ca82 e5					push hl 
ca83					FORTH_DSP_POP 
ca83 cd 42 9d			call macro_forth_dsp_pop 
ca86				endm 
# End of macro FORTH_DSP_POP
ca86 e1					pop hl 
ca87					if DEBUG_FORTH_WORDS 
ca87						DMARK "EDp" 
ca87 f5				push af  
ca88 3a 9c ca			ld a, (.dmark)  
ca8b 32 65 ee			ld (debug_mark),a  
ca8e 3a 9d ca			ld a, (.dmark+1)  
ca91 32 66 ee			ld (debug_mark+1),a  
ca94 3a 9e ca			ld a, (.dmark+2)  
ca97 32 67 ee			ld (debug_mark+2),a  
ca9a 18 03			jr .pastdmark  
ca9c ..			.dmark: db "EDp"  
ca9f f1			.pastdmark: pop af  
caa0			endm  
# End of macro DMARK
caa0						CALLMONITOR 
caa0 cd 6f ee			call debug_vector  
caa3				endm  
# End of macro CALLMONITOR
caa3					endif 
caa3				;	ld a, 0 
caa3 cd 50 90				call strlenz 
caa6 23					inc hl 
caa7			 
caa7 06 00				ld b, 0 
caa9 4d					ld c, l 
caaa			 
caaa e1					pop hl 
caab			 
caab					;ld a, 0 
caab					;ld (hl),a 
caab 3a 58 ea				ld a,(f_cursor_ptr) 
caae 16 64				ld d, 100 
cab0 0e 00				ld c, 0 
cab2 1e 28				ld e, 40 
cab4 cd 17 8d				call input_str 
cab7					; TODO perhaps do a type check and wrap in quotes if not a number 
cab7					NEXTW 
cab7 c3 76 9e			jp macro_next 
caba				endm 
# End of macro NEXTW
caba			 
caba			 
caba			.ENDKEY: 
caba			; eof 
caba			 
# End of file forth_words_key.asm
caba			include "forth_words_const.asm" 
caba			 
caba			; | ## Constants (i.e. Useful memory addresses that can set or get features) 
caba			 
caba			 
caba			.SPITIME: 
caba				CWHEAD .VA 99 "SPITIME" 7 WORD_FLAG_CODE 
caba 77				db WORD_SYS_CORE+99             
cabb cf ca			dw .VA            
cabd 08				db 7 + 1 
cabe .. 00			db "SPITIME",0              
cac6				endm 
# End of macro CWHEAD
cac6			; | SPITIME ( -- u1 )   Pushes address of the SPI pulse counter/delay to stack | DONE 
cac6			; 
cac6			; | | If using BANK devices then leave as is. 
cac6			; | | Only really useful for the CARTDEV where other devices may be far too slow. In particular 
cac6			; | | the multiplexing of the PicoSPINet addon which might not be running fast enough for all of the nodes 
cac6			 
cac6 21 5e ea				ld hl, spi_clktime  
cac9 cd 85 9a				call forth_push_numhl 
cacc			 
cacc					NEXTW 
cacc c3 76 9e			jp macro_next 
cacf				endm 
# End of macro NEXTW
cacf			 
cacf			 
cacf			.VA: 
cacf				CWHEAD .SYMBOL 99 "VA" 2 WORD_FLAG_CODE 
cacf 77				db WORD_SYS_CORE+99             
cad0 df ca			dw .SYMBOL            
cad2 03				db 2 + 1 
cad3 .. 00			db "VA",0              
cad6				endm 
# End of macro CWHEAD
cad6			; | VA ( -- u1 )   Pushes address of block of memory used for v1..5 | DONE 
cad6 21 22 ea				ld hl, cli_var_array 
cad9 cd 85 9a				call forth_push_numhl 
cadc			 
cadc					NEXTW 
cadc c3 76 9e			jp macro_next 
cadf				endm 
# End of macro NEXTW
cadf			 
cadf			.SYMBOL: 
cadf				CWHEAD .ENDCONST 99 "SYMBOL" 6 WORD_FLAG_CODE 
cadf 77				db WORD_SYS_CORE+99             
cae0 e9 cb			dw .ENDCONST            
cae2 07				db 6 + 1 
cae3 .. 00			db "SYMBOL",0              
caea				endm 
# End of macro CWHEAD
caea			; | SYMBOL ( u1 -- )  Get the address of a system symbol from a look up table to TOS  | DONE 
caea			; | 
caea			; | | The value is the number reference and the final address is pushed to stack 
caea			 
caea			; | | ``` 
caea			; | | dw sym_table 
caea			; | | dw nmi_vector 
caea			; | | dw cli_autodisplay 
caea			; | | dw cli_data_sp 
caea			; | | dw cli_data_stack 
caea			; | | dw cli_loop_sp 
caea			; | | dw cli_loop_stack 
caea			; | | dw cli_var_array 
caea			; | | dw cursor_col 
caea			; | | dw cursor_ptr 
caea			; | | ; 10 
caea			; | | dw cursor_row 
caea			; | | dw debug_mark 
caea			; | | dw display_fb0 
caea			; | | dw display_fb1 
caea			; | | dw display_fb2 
caea			; | | dw display_fb3 
caea			; | | dw display_fb_active 
caea			; | | dw execscratch 
caea			; | | dw f_cursor_ptr 
caea			; | | dw hardware_word 
caea			; | | ;20 
caea			; | | dw input_at_cursor 
caea			; | | dw input_at_pos 
caea			; | | dw input_cur_flash 
caea			; | | dw input_cur_onoff 
caea			; | | dw input_cursor 
caea			; | | dw input_display_size 
caea			; | | dw input_len 
caea			; | | dw input_ptr 
caea			; | | dw input_size 
caea			; | | dw input_start 
caea			; | | ; 30 
caea			; | | dw input_str 
caea			; | | dw input_under_cursor 
caea			; | | dw os_cli_cmd 
caea			; | | dw os_cur_ptr 
caea			; | | dw os_current_i 
caea			; | | dw os_input 
caea			; | | dw os_last_cmd 
caea			; | | dw os_last_new_uword 
caea			; | | dw debug_vector 
caea			; | | dw os_view_hl 
caea			; | | ;40 
caea			; | | dw os_word_scratch 
caea			; | | dw portbctl 
caea			; | | dw portbdata 
caea			; | | dw spi_cartdev 
caea			; | | dw spi_cartdev2 
caea			; | | dw spi_clktime 
caea			; | | dw spi_device 
caea			; | | dw spi_device_id 
caea			; | | dw spi_portbyte 
caea			; | | dw stackstore 
caea			; | | ; 50 
caea			; | | if STORAGE_SE 
caea			; | | dw storage_actl 
caea			; | | dw storage_adata 
caea			; | | else 
caea			; | | dw 0 
caea			; | | dw 0 
caea			; | | endif 
caea			; | | dw storage_append 
caea			; | | if STORAGE_SE 
caea			; | | dw storage_bctl 
caea			; | | else 
caea			; | | dw 0 
caea			; | | endif 
caea			; | | dw store_bank_active 
caea			; | | dw store_filecache 
caea			; | | dw store_longread 
caea			; | | dw store_openaddr 
caea			; | | dw store_openext 
caea			; | | dw store_openmaxext 
caea			; | | ; 60 
caea			; | | dw store_page 
caea			; | | dw store_readbuf 
caea			; | | dw store_readcont 
caea			; | | dw store_readptr 
caea			; | | dw store_tmpext 
caea			; | | dw store_tmpid 
caea			; | | dw store_tmppageid 
caea			; | | dw malloc 
caea			; | | dw free 
caea			; | | dw cin 
caea			; | | ; 70 
caea			; | | dw cin_wait 
caea			; | | dw forth_push_numhl 
caea			; | | dw forth_push_str 
caea			; | | ``` 
caea			 
caea					if DEBUG_FORTH_WORDS_KEY 
caea						DMARK "SYM" 
caea f5				push af  
caeb 3a ff ca			ld a, (.dmark)  
caee 32 65 ee			ld (debug_mark),a  
caf1 3a 00 cb			ld a, (.dmark+1)  
caf4 32 66 ee			ld (debug_mark+1),a  
caf7 3a 01 cb			ld a, (.dmark+2)  
cafa 32 67 ee			ld (debug_mark+2),a  
cafd 18 03			jr .pastdmark  
caff ..			.dmark: db "SYM"  
cb02 f1			.pastdmark: pop af  
cb03			endm  
# End of macro DMARK
cb03						CALLMONITOR 
cb03 cd 6f ee			call debug_vector  
cb06				endm  
# End of macro CALLMONITOR
cb06					endif 
cb06			 
cb06					FORTH_DSP_VALUEHL 
cb06 cd 8a 9c			call macro_dsp_valuehl 
cb09				endm 
# End of macro FORTH_DSP_VALUEHL
cb09			 
cb09 7d					ld a, l     
cb0a			 
cb0a			 
cb0a					if DEBUG_FORTH_WORDS 
cb0a						DMARK "SY1" 
cb0a f5				push af  
cb0b 3a 1f cb			ld a, (.dmark)  
cb0e 32 65 ee			ld (debug_mark),a  
cb11 3a 20 cb			ld a, (.dmark+1)  
cb14 32 66 ee			ld (debug_mark+1),a  
cb17 3a 21 cb			ld a, (.dmark+2)  
cb1a 32 67 ee			ld (debug_mark+2),a  
cb1d 18 03			jr .pastdmark  
cb1f ..			.dmark: db "SY1"  
cb22 f1			.pastdmark: pop af  
cb23			endm  
# End of macro DMARK
cb23						CALLMONITOR 
cb23 cd 6f ee			call debug_vector  
cb26				endm  
# End of macro CALLMONITOR
cb26					endif 
cb26					 
cb26 f5					push af	 
cb27					FORTH_DSP_POP 
cb27 cd 42 9d			call macro_forth_dsp_pop 
cb2a				endm 
# End of macro FORTH_DSP_POP
cb2a f1					pop af 
cb2b			 
cb2b cb 27				sla a  
cb2d				 
cb2d					 
cb2d					if DEBUG_FORTH_WORDS 
cb2d						DMARK "SY" 
cb2d f5				push af  
cb2e 3a 42 cb			ld a, (.dmark)  
cb31 32 65 ee			ld (debug_mark),a  
cb34 3a 43 cb			ld a, (.dmark+1)  
cb37 32 66 ee			ld (debug_mark+1),a  
cb3a 3a 44 cb			ld a, (.dmark+2)  
cb3d 32 67 ee			ld (debug_mark+2),a  
cb40 18 02			jr .pastdmark  
cb42 ..			.dmark: db "SY"  
cb44 f1			.pastdmark: pop af  
cb45			endm  
# End of macro DMARK
cb45						CALLMONITOR 
cb45 cd 6f ee			call debug_vector  
cb48				endm  
# End of macro CALLMONITOR
cb48					endif 
cb48			 
cb48 21 57 cb				ld hl, sym_table 
cb4b cd ea 8c				call addatohl 
cb4e cd f8 9d				call loadwordinhl 
cb51 cd 85 9a				call forth_push_numhl 
cb54			 
cb54			 
cb54				       NEXTW 
cb54 c3 76 9e			jp macro_next 
cb57				endm 
# End of macro NEXTW
cb57			 
cb57			sym_table: 
cb57			 
cb57			; 0 
cb57 57 cb		dw sym_table 
cb59 72 ee		dw nmi_vector 
cb5b 36 ea		dw cli_autodisplay 
cb5d e8 e9		dw cli_data_sp 
cb5f 22 e8		dw cli_data_stack 
cb61 ea e9		dw cli_loop_sp 
cb63 24 e9		dw cli_loop_stack 
cb65 22 ea		dw cli_var_array 
cb67 bf eb		dw cursor_col 
cb69 bd eb		dw cursor_ptr 
cb6b			; 10 
cb6b be eb		dw cursor_row 
cb6d 65 ee		dw debug_mark 
cb6f ab ed		dw display_fb0 
cb71 0a ed		dw display_fb1 
cb73 c8 eb		dw display_fb2 
cb75 69 ec		dw display_fb3 
cb77 c6 eb		dw display_fb_active 
cb79 ba e3		dw execscratch 
cb7b 58 ea		dw f_cursor_ptr 
cb7d 75 ee		dw hardware_word 
cb7f			;20 
cb7f 5c ee		dw input_at_cursor 
cb81 5e ee		dw input_at_pos 
cb83 5a ee		dw input_cur_flash 
cb85 59 ee		dw input_cur_onoff 
cb87 4f ee		dw input_cursor 
cb89 5f ee		dw input_display_size 
cb8b 54 ee		dw input_len 
cb8d 63 ee		dw input_ptr 
cb8f 60 ee		dw input_size 
cb91 61 ee		dw input_start 
cb93			; 30 
cb93 17 8d		dw input_str 
cb95 5d ee		dw input_under_cursor 
cb97 e2 e5		dw os_cli_cmd 
cb99 de e5		dw os_cur_ptr 
cb9b e0 e5		dw os_current_i 
cb9d b9 e4		dw os_input 
cb9f e1 e6		dw os_last_cmd 
cba1 b8 e5		dw os_last_new_uword 
cba3 6f ee		dw debug_vector 
cba5 9d e2		dw os_view_hl 
cba7			;40 
cba7 c0 e5		dw os_word_scratch 
cba9 c3 00		dw portbctl 
cbab c1 00		dw portbdata 
cbad 5d ea		dw spi_cartdev 
cbaf 5c ea		dw spi_cartdev2 
cbb1 5e ea		dw spi_clktime 
cbb3 5a ea		dw spi_device 
cbb5 59 ea		dw spi_device_id 
cbb7 5b ea		dw spi_portbyte 
cbb9 a1 eb		dw stackstore 
cbbb			; 50 
cbbb			if STORAGE_SE 
cbbb			dw storage_actl 
cbbb			dw storage_adata 
cbbb			else 
cbbb 00 00		dw 0 
cbbd 00 00		dw 0 
cbbf			endif 
cbbf 77 88		dw storage_append 
cbc1			if STORAGE_SE 
cbc1			dw storage_bctl 
cbc1			else 
cbc1 00 00		dw 0 
cbc3			endif 
cbc3 8d eb		dw store_bank_active 
cbc5 61 ea		dw store_filecache 
cbc7 6f ea		dw store_longread 
cbc9 65 ea		dw store_openaddr 
cbcb 64 ea		dw store_openext 
cbcd 63 ea		dw store_openmaxext 
cbcf			; 60 
cbcf 74 ea		dw store_page 
cbd1 70 ea		dw store_readbuf 
cbd3 67 ea		dw store_readcont 
cbd5 72 ea		dw store_readptr 
cbd7 67 ea		dw store_tmpext 
cbd9 68 ea		dw store_tmpid 
cbdb 5f ea		dw store_tmppageid 
cbdd c5 90		dw malloc 
cbdf 8f 91		dw free 
cbe1 e2 df		dw cin 
cbe3			; 70 
cbe3 dc df		dw cin_wait 
cbe5 85 9a		dw forth_push_numhl 
cbe7 f3 9a		dw forth_push_str 
cbe9			 
cbe9			 
cbe9			.ENDCONST: 
cbe9			 
cbe9			; eof 
cbe9			 
cbe9			 
# End of file forth_words_const.asm
cbe9			 
cbe9			if STORAGE_SE 
cbe9			   	include "forth_words_storage.asm" 
cbe9			endif 
cbe9				include "forth_words_device.asm" 
cbe9			; Device related words 
cbe9			 
cbe9			; | ## Device Words 
cbe9			 
cbe9			;if SOUND_ENABLE 
cbe9			;.NOTE: 
cbe9			;	CWHEAD .AFTERSOUND 31 "NOTE" 4 WORD_FLAG_CODE 
cbe9			;; NOTE ( ud uf --  )  Plays a note of frequency uf for the duration of ud millseconds  TODO 
cbe9			;		if DEBUG_FORTH_WORDS_KEY 
cbe9			;			DMARK "NTE" 
cbe9			;			CALLMONITOR 
cbe9			;		endif 
cbe9			; 
cbe9			;	 
cbe9			; 
cbe9			;		NEXTW 
cbe9			;.AFTERSOUND: 
cbe9			;endif 
cbe9			 
cbe9			 
cbe9			USE_GPIO: equ 0 
cbe9			 
cbe9			if USE_GPIO 
cbe9			.GP1: 
cbe9				CWHEAD .GP2 31 "IOIN" 4 WORD_FLAG_CODE 
cbe9			;  IOIN ( u1 -- u )    Perform a GPIO read of pin u1 and push result   
cbe9					NEXTW 
cbe9			.GP2: 
cbe9				CWHEAD .GP3 31 "IOOUT" 5 WORD_FLAG_CODE 
cbe9			;  IOOUT ( u1 u2 --  )    Perform a GPIO write of pin u1 with pin set to 0 or 1 in u2   
cbe9			 
cbe9					NEXTW 
cbe9			 
cbe9			.GP3: 
cbe9				CWHEAD .GP4 31 "IOBYTE" 5 WORD_FLAG_CODE 
cbe9			;  IOBYTE ( u1 --  )    Perform a GPIO write of byte u1   
cbe9			 
cbe9					NEXTW 
cbe9			 
cbe9			.GP4: 
cbe9				CWHEAD .SIN 31 "IOSET" 5 WORD_FLAG_CODE 
cbe9			;  IOSET ( u1 --  )    Setup GPIO pins for I/O direction. Bit is set for write else read pin   
cbe9			 
cbe9					NEXTW 
cbe9			.SIN: 
cbe9			 
cbe9			 
cbe9			endif 
cbe9			 
cbe9			 
cbe9				CWHEAD .SOUT 31 "IN" 2 WORD_FLAG_CODE 
cbe9 33				db WORD_SYS_CORE+31             
cbea 1e cc			dw .SOUT            
cbec 03				db 2 + 1 
cbed .. 00			db "IN",0              
cbf0				endm 
# End of macro CWHEAD
cbf0			; | IN ( u1 -- u )    Perform Z80 IN with u1 being the port number. Push result to TOS | TO TEST 
cbf0					if DEBUG_FORTH_WORDS_KEY 
cbf0						DMARK "IN." 
cbf0 f5				push af  
cbf1 3a 05 cc			ld a, (.dmark)  
cbf4 32 65 ee			ld (debug_mark),a  
cbf7 3a 06 cc			ld a, (.dmark+1)  
cbfa 32 66 ee			ld (debug_mark+1),a  
cbfd 3a 07 cc			ld a, (.dmark+2)  
cc00 32 67 ee			ld (debug_mark+2),a  
cc03 18 03			jr .pastdmark  
cc05 ..			.dmark: db "IN."  
cc08 f1			.pastdmark: pop af  
cc09			endm  
# End of macro DMARK
cc09						CALLMONITOR 
cc09 cd 6f ee			call debug_vector  
cc0c				endm  
# End of macro CALLMONITOR
cc0c					endif 
cc0c					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
cc0c cd 8a 9c			call macro_dsp_valuehl 
cc0f				endm 
# End of macro FORTH_DSP_VALUEHL
cc0f			 
cc0f e5					push hl 
cc10			 
cc10					; destroy value TOS 
cc10			 
cc10					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
cc10 cd 42 9d			call macro_forth_dsp_pop 
cc13				endm 
# End of macro FORTH_DSP_POP
cc13			 
cc13					; one value on hl get other one back 
cc13			 
cc13 c1					pop bc 
cc14			 
cc14					; do the sub 
cc14			;		ex de, hl 
cc14			 
cc14 ed 68				in l,(c) 
cc16			 
cc16					; save it 
cc16			 
cc16 26 00				ld h,0 
cc18			 
cc18					; TODO push value back onto stack for another op etc 
cc18			 
cc18 cd 85 9a				call forth_push_numhl 
cc1b					NEXTW 
cc1b c3 76 9e			jp macro_next 
cc1e				endm 
# End of macro NEXTW
cc1e			.SOUT: 
cc1e				CWHEAD .SPIO 32 "OUT" 3 WORD_FLAG_CODE 
cc1e 34				db WORD_SYS_CORE+32             
cc1f 71 cc			dw .SPIO            
cc21 04				db 3 + 1 
cc22 .. 00			db "OUT",0              
cc26				endm 
# End of macro CWHEAD
cc26			; | OUT ( u1 u2 -- ) Perform Z80 OUT to port u2 sending byte u1 | DONE 
cc26					if DEBUG_FORTH_WORDS_KEY 
cc26						DMARK "OUT" 
cc26 f5				push af  
cc27 3a 3b cc			ld a, (.dmark)  
cc2a 32 65 ee			ld (debug_mark),a  
cc2d 3a 3c cc			ld a, (.dmark+1)  
cc30 32 66 ee			ld (debug_mark+1),a  
cc33 3a 3d cc			ld a, (.dmark+2)  
cc36 32 67 ee			ld (debug_mark+2),a  
cc39 18 03			jr .pastdmark  
cc3b ..			.dmark: db "OUT"  
cc3e f1			.pastdmark: pop af  
cc3f			endm  
# End of macro DMARK
cc3f						CALLMONITOR 
cc3f cd 6f ee			call debug_vector  
cc42				endm  
# End of macro CALLMONITOR
cc42					endif 
cc42			 
cc42					; get port 
cc42			 
cc42					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
cc42 cd 8a 9c			call macro_dsp_valuehl 
cc45				endm 
# End of macro FORTH_DSP_VALUEHL
cc45			 
cc45 e5					push hl 
cc46			 
cc46					; destroy value TOS 
cc46			 
cc46					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
cc46 cd 42 9d			call macro_forth_dsp_pop 
cc49				endm 
# End of macro FORTH_DSP_POP
cc49			 
cc49					; get byte to send 
cc49			 
cc49					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
cc49 cd 8a 9c			call macro_dsp_valuehl 
cc4c				endm 
# End of macro FORTH_DSP_VALUEHL
cc4c			 
cc4c			;		push hl 
cc4c			 
cc4c					; destroy value TOS 
cc4c			 
cc4c					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
cc4c cd 42 9d			call macro_forth_dsp_pop 
cc4f				endm 
# End of macro FORTH_DSP_POP
cc4f			 
cc4f					; one value on hl get other one back 
cc4f			 
cc4f			;		pop hl 
cc4f			 
cc4f c1					pop bc 
cc50			 
cc50					if DEBUG_FORTH_WORDS 
cc50						DMARK "OUT" 
cc50 f5				push af  
cc51 3a 65 cc			ld a, (.dmark)  
cc54 32 65 ee			ld (debug_mark),a  
cc57 3a 66 cc			ld a, (.dmark+1)  
cc5a 32 66 ee			ld (debug_mark+1),a  
cc5d 3a 67 cc			ld a, (.dmark+2)  
cc60 32 67 ee			ld (debug_mark+2),a  
cc63 18 03			jr .pastdmark  
cc65 ..			.dmark: db "OUT"  
cc68 f1			.pastdmark: pop af  
cc69			endm  
# End of macro DMARK
cc69						CALLMONITOR 
cc69 cd 6f ee			call debug_vector  
cc6c				endm  
# End of macro CALLMONITOR
cc6c					endif 
cc6c			 
cc6c ed 69				out (c), l 
cc6e			 
cc6e					NEXTW 
cc6e c3 76 9e			jp macro_next 
cc71				endm 
# End of macro NEXTW
cc71			 
cc71			 
cc71			.SPIO: 
cc71			 
cc71			if STORAGE_SE 
cc71				CWHEAD .SPICEH 61 "SPICEL" 6 WORD_FLAG_CODE 
cc71			; | SPICEL ( -- ) Set SPI CE low for the currently selected device |  DONE 
cc71			 
cc71					call spi_ce_low 
cc71			    NEXTW 
cc71			 
cc71			.SPICEH: 
cc71				CWHEAD .SPIOb 61 "SPICEH" 6 WORD_FLAG_CODE 
cc71			; | SPICEH ( -- ) Set SPI CE high for the currently selected device |  DONE 
cc71			 
cc71					call spi_ce_high 
cc71			    NEXTW 
cc71			 
cc71			 
cc71			.SPIOb: 
cc71			 
cc71				CWHEAD .SPII 61 "SPIO" 4 WORD_FLAG_CODE 
cc71			; | SPIO ( u1 -- ) Send byte u1 to SPI  |  DONE 
cc71			 
cc71					if DEBUG_FORTH_WORDS_KEY 
cc71						DMARK "SPo" 
cc71						CALLMONITOR 
cc71					endif 
cc71					; get port 
cc71			 
cc71			 
cc71					; get byte to send 
cc71			 
cc71					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
cc71			 
cc71			;		push hl    ; u1  
cc71			 
cc71					; destroy value TOS 
cc71			 
cc71					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
cc71			 
cc71					; one value on hl get other one back 
cc71			 
cc71			;		pop hl   ; u2 - addr 
cc71			 
cc71					; TODO Send SPI byte 
cc71			 
cc71			;		push hl 
cc71			;		call spi_ce_low 
cc71			;		pop hl 
cc71					ld a, l 
cc71					call spi_send_byte 
cc71			;		call spi_ce_high 
cc71			 
cc71					NEXTW 
cc71			 
cc71			.SPII: 
cc71				CWHEAD .SESEL 62 "SPII" 5 WORD_FLAG_CODE 
cc71			; | SPII ( -- u1 ) Get a byte from SPI  | DONE 
cc71					if DEBUG_FORTH_WORDS_KEY 
cc71						DMARK "SPi" 
cc71						CALLMONITOR 
cc71					endif 
cc71			 
cc71					; TODO Get SPI byte 
cc71			 
cc71					call spi_read_byte 
cc71			 
cc71					if DEBUG_FORTH_WORDS 
cc71						DMARK "Si2" 
cc71						CALLMONITOR 
cc71					endif 
cc71					ld h, 0 
cc71					ld l, a 
cc71					if DEBUG_FORTH_WORDS 
cc71						DMARK "Si3" 
cc71						CALLMONITOR 
cc71					endif 
cc71					call forth_push_numhl 
cc71			 
cc71					NEXTW 
cc71			 
cc71			 
cc71			 
cc71			.SESEL: 
cc71				CWHEAD .CARTDEV 82 "BANK" 4 WORD_FLAG_CODE 
cc71			; | BANK ( u1 -- ) Select Serial EEPROM Bank Device at bank address u1 1-5 (disables CARTDEV). Set to zero to disable storage. | DONE 
cc71					if DEBUG_FORTH_WORDS_KEY 
cc71						DMARK "BNK" 
cc71						CALLMONITOR 
cc71					endif 
cc71			 
cc71					ld a, 255 
cc71					ld (spi_cartdev), a 
cc71			 
cc71					; get bank 
cc71			 
cc71					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
cc71			 
cc71			;		push hl 
cc71			 
cc71					; destroy value TOS 
cc71			 
cc71					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
cc71			 
cc71					; one value on hl get other one back 
cc71			 
cc71			;		pop hl 
cc71			 
cc71			 
cc71					ld c, SPI_CE_HIGH 
cc71					ld b, '0'    ; human readable bank number 
cc71			 
cc71					ld a, l 
cc71			 
cc71					if DEBUG_FORTH_WORDS 
cc71						DMARK "BNK" 
cc71						CALLMONITOR 
cc71					endif 
cc71			 
cc71					; active low 
cc71			 
cc71					cp 0 
cc71					jr z, .bset 
cc71					cp 1 
cc71					jr nz, .b2 
cc71					res 0, c 
cc71					ld b, '1'    ; human readable bank number 
cc71			.b2:		cp 2 
cc71					jr nz, .b3 
cc71					res 1, c 
cc71					ld b, '2'    ; human readable bank number 
cc71			.b3:		cp 3 
cc71					jr nz, .b4 
cc71					res 2, c 
cc71					ld b, '3'    ; human readable bank number 
cc71			.b4:		cp 4 
cc71					jr nz, .b5 
cc71					res 3, c 
cc71					ld b, '4'    ; human readable bank number 
cc71			.b5:		cp 5 
cc71					jr nz, .bset 
cc71					res 4, c 
cc71					ld b, '5'    ; human readable bank number 
cc71			 
cc71			.bset: 
cc71					ld a, c 
cc71					ld (spi_device),a 
cc71					ld a, b 
cc71					ld (spi_device_id),a 
cc71					if DEBUG_FORTH_WORDS 
cc71						DMARK "BN2" 
cc71						CALLMONITOR 
cc71					endif 
cc71			 
cc71					; set default SPI clk pulse time as disabled for BANK use 
cc71			 
cc71					ld a, 0 
cc71					ld (spi_clktime), a 
cc71			 
cc71					NEXTW 
cc71			 
cc71			.CARTDEV: 
cc71				CWHEAD .ENDDEVICE 82 "CARTDEV" 7 WORD_FLAG_CODE 
cc71			; | CARTDEV ( u1 -- ) Select cart device 1-8 (Disables BANK). Set to zero to disable devices. |  DONE 
cc71					if DEBUG_FORTH_WORDS_KEY 
cc71						DMARK "CDV" 
cc71						CALLMONITOR 
cc71					endif 
cc71			 
cc71					; disable se storage bank selection 
cc71			 
cc71					ld a, SPI_CE_HIGH		; ce high 
cc71					ld (spi_device), a 
cc71			 
cc71					; get bank 
cc71			 
cc71					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
cc71			 
cc71			;		push hl 
cc71			 
cc71					; destroy value TOS 
cc71			 
cc71					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
cc71			 
cc71					; one value on hl get other one back 
cc71			 
cc71			;		pop hl 
cc71			 
cc71					; active low 
cc71			 
cc71					ld c, 255 
cc71			 
cc71					ld a, l 
cc71					if DEBUG_FORTH_WORDS 
cc71						DMARK "CDV" 
cc71						CALLMONITOR 
cc71					endif 
cc71					cp 0 
cc71					jr z, .cset 
cc71					cp 1 
cc71					jr nz, .c2 
cc71					res 0, c 
cc71			.c2:		cp 2 
cc71					jr nz, .c3 
cc71					res 1, c 
cc71			.c3:		cp 3 
cc71					jr nz, .c4 
cc71					res 2, c 
cc71			.c4:		cp 4 
cc71					jr nz, .c5 
cc71					res 3, c 
cc71			.c5:		cp 5 
cc71					jr nz, .c6 
cc71					res 4, c 
cc71			.c6:		cp 6 
cc71					jr nz, .c7 
cc71					res 5, c 
cc71			.c7:		cp 7 
cc71					jr nz, .c8 
cc71					res 6, c 
cc71			.c8:		cp 8 
cc71					jr nz, .cset 
cc71					res 7, c 
cc71			.cset:		ld a, c 
cc71					ld (spi_cartdev),a 
cc71			 
cc71					if DEBUG_FORTH_WORDS 
cc71						DMARK "CD2" 
cc71						CALLMONITOR 
cc71					endif 
cc71			 
cc71					; set default SPI clk pulse time as 10ms for CARTDEV use 
cc71			 
cc71					ld a, $0a 
cc71					ld (spi_clktime), a 
cc71					NEXTW 
cc71			endif 
cc71			 
cc71			.ENDDEVICE: 
cc71			; eof 
cc71			 
# End of file forth_words_device.asm
cc71			 
cc71			; var handler 
cc71			 
cc71			 
cc71			.VARS: 
cc71				CWHEAD .V0 99 "VAR" 3 WORD_FLAG_CODE 
cc71 77				db WORD_SYS_CORE+99             
cc72 22 cd			dw .V0            
cc74 04				db 3 + 1 
cc75 .. 00			db "VAR",0              
cc79				endm 
# End of macro CWHEAD
cc79			;| VAR ( u1 -- )  Get the address of the variable referenced on TOS  | TO TEST 
cc79			;| 
cc79			;| The variable name should consist of a single letter. e.g. "a" 
cc79			;! If a full string is passed then only the first char is looked at 
cc79			;| Any other char could exceed bounds checks!  
cc79			 
cc79					if DEBUG_FORTH_WORDS_KEY 
cc79						DMARK "VAR" 
cc79 f5				push af  
cc7a 3a 8e cc			ld a, (.dmark)  
cc7d 32 65 ee			ld (debug_mark),a  
cc80 3a 8f cc			ld a, (.dmark+1)  
cc83 32 66 ee			ld (debug_mark+1),a  
cc86 3a 90 cc			ld a, (.dmark+2)  
cc89 32 67 ee			ld (debug_mark+2),a  
cc8c 18 03			jr .pastdmark  
cc8e ..			.dmark: db "VAR"  
cc91 f1			.pastdmark: pop af  
cc92			endm  
# End of macro DMARK
cc92						CALLMONITOR 
cc92 cd 6f ee			call debug_vector  
cc95				endm  
# End of macro CALLMONITOR
cc95					endif 
cc95			 
cc95					FORTH_DSP_VALUEHL 
cc95 cd 8a 9c			call macro_dsp_valuehl 
cc98				endm 
# End of macro FORTH_DSP_VALUEHL
cc98			 
cc98 7e					ld a, (hl)    ; get first char on of the string 
cc99			 
cc99			 
cc99					if DEBUG_FORTH_WORDS 
cc99						DMARK "VR1" 
cc99 f5				push af  
cc9a 3a ae cc			ld a, (.dmark)  
cc9d 32 65 ee			ld (debug_mark),a  
cca0 3a af cc			ld a, (.dmark+1)  
cca3 32 66 ee			ld (debug_mark+1),a  
cca6 3a b0 cc			ld a, (.dmark+2)  
cca9 32 67 ee			ld (debug_mark+2),a  
ccac 18 03			jr .pastdmark  
ccae ..			.dmark: db "VR1"  
ccb1 f1			.pastdmark: pop af  
ccb2			endm  
# End of macro DMARK
ccb2						CALLMONITOR 
ccb2 cd 6f ee			call debug_vector  
ccb5				endm  
# End of macro CALLMONITOR
ccb5					endif 
ccb5					 
ccb5 f5					push af	 
ccb6					FORTH_DSP_POP 
ccb6 cd 42 9d			call macro_forth_dsp_pop 
ccb9				endm 
# End of macro FORTH_DSP_POP
ccb9 f1					pop af 
ccba			 
ccba					; convert to upper 
ccba			 
ccba cd 5f 8f				call to_upper 
ccbd					if DEBUG_FORTH_WORDS 
ccbd						DMARK "Vaa" 
ccbd f5				push af  
ccbe 3a d2 cc			ld a, (.dmark)  
ccc1 32 65 ee			ld (debug_mark),a  
ccc4 3a d3 cc			ld a, (.dmark+1)  
ccc7 32 66 ee			ld (debug_mark+1),a  
ccca 3a d4 cc			ld a, (.dmark+2)  
cccd 32 67 ee			ld (debug_mark+2),a  
ccd0 18 03			jr .pastdmark  
ccd2 ..			.dmark: db "Vaa"  
ccd5 f1			.pastdmark: pop af  
ccd6			endm  
# End of macro DMARK
ccd6						CALLMONITOR 
ccd6 cd 6f ee			call debug_vector  
ccd9				endm  
# End of macro CALLMONITOR
ccd9					endif 
ccd9 06 41				ld b, 'A' 
ccdb 90					sub b			; set offset 
ccdc					if DEBUG_FORTH_WORDS 
ccdc						DMARK "Vbb" 
ccdc f5				push af  
ccdd 3a f1 cc			ld a, (.dmark)  
cce0 32 65 ee			ld (debug_mark),a  
cce3 3a f2 cc			ld a, (.dmark+1)  
cce6 32 66 ee			ld (debug_mark+1),a  
cce9 3a f3 cc			ld a, (.dmark+2)  
ccec 32 67 ee			ld (debug_mark+2),a  
ccef 18 03			jr .pastdmark  
ccf1 ..			.dmark: db "Vbb"  
ccf4 f1			.pastdmark: pop af  
ccf5			endm  
# End of macro DMARK
ccf5						CALLMONITOR 
ccf5 cd 6f ee			call debug_vector  
ccf8				endm  
# End of macro CALLMONITOR
ccf8					endif 
ccf8 cb 27				sla a  
ccfa				 
ccfa					 
ccfa					if DEBUG_FORTH_WORDS 
ccfa						DMARK "VR2" 
ccfa f5				push af  
ccfb 3a 0f cd			ld a, (.dmark)  
ccfe 32 65 ee			ld (debug_mark),a  
cd01 3a 10 cd			ld a, (.dmark+1)  
cd04 32 66 ee			ld (debug_mark+1),a  
cd07 3a 11 cd			ld a, (.dmark+2)  
cd0a 32 67 ee			ld (debug_mark+2),a  
cd0d 18 03			jr .pastdmark  
cd0f ..			.dmark: db "VR2"  
cd12 f1			.pastdmark: pop af  
cd13			endm  
# End of macro DMARK
cd13						CALLMONITOR 
cd13 cd 6f ee			call debug_vector  
cd16				endm  
# End of macro CALLMONITOR
cd16					endif 
cd16			 
cd16 21 ee e9				ld hl, cli_var_array2 
cd19 cd ea 8c				call addatohl 
cd1c cd 85 9a				call forth_push_numhl 
cd1f			 
cd1f			 
cd1f				       NEXTW 
cd1f c3 76 9e			jp macro_next 
cd22				endm 
# End of macro NEXTW
cd22			.V0: 
cd22				CWHEAD .V0Q 100 "V0!" 3 WORD_FLAG_CODE 
cd22 78				db WORD_SYS_CORE+100             
cd23 3a cd			dw .V0Q            
cd25 04				db 3 + 1 
cd26 .. 00			db "V0!",0              
cd2a				endm 
# End of macro CWHEAD
cd2a			;| V0! ( u1 -- )  Store value to v0  | DONE 
cd2a			 
cd2a					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
cd2a cd 8a 9c			call macro_dsp_valuehl 
cd2d				endm 
# End of macro FORTH_DSP_VALUEHL
cd2d			 
cd2d 11 22 ea				ld de, cli_var_array 
cd30			 
cd30 eb					ex de, hl 
cd31 73					ld (hl), e 
cd32 23					inc hl 
cd33 72					ld (hl), d 
cd34			 
cd34					; destroy value TOS 
cd34			 
cd34					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
cd34 cd 42 9d			call macro_forth_dsp_pop 
cd37				endm 
# End of macro FORTH_DSP_POP
cd37			 
cd37				       NEXTW 
cd37 c3 76 9e			jp macro_next 
cd3a				endm 
# End of macro NEXTW
cd3a			.V0Q: 
cd3a				CWHEAD .V1S 101 "V0@" 3 WORD_FLAG_CODE 
cd3a 79				db WORD_SYS_CORE+101             
cd3b 4b cd			dw .V1S            
cd3d 04				db 3 + 1 
cd3e .. 00			db "V0@",0              
cd42				endm 
# End of macro CWHEAD
cd42			;| V0@ ( --u )  Put value of v0 onto stack | DONE 
cd42 2a 22 ea				ld hl, (cli_var_array) 
cd45 cd 85 9a				call forth_push_numhl 
cd48			 
cd48				       NEXTW 
cd48 c3 76 9e			jp macro_next 
cd4b				endm 
# End of macro NEXTW
cd4b			.V1S: 
cd4b				CWHEAD .V1Q 102 "V1!" 3 WORD_FLAG_CODE 
cd4b 7a				db WORD_SYS_CORE+102             
cd4c 63 cd			dw .V1Q            
cd4e 04				db 3 + 1 
cd4f .. 00			db "V1!",0              
cd53				endm 
# End of macro CWHEAD
cd53			;| V1! ( u1 -- )  Store value to v1 | DONE 
cd53					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
cd53 cd 8a 9c			call macro_dsp_valuehl 
cd56				endm 
# End of macro FORTH_DSP_VALUEHL
cd56			 
cd56 11 24 ea				ld de, cli_var_array+2 
cd59				 
cd59 eb					ex de, hl 
cd5a 73					ld (hl), e 
cd5b 23					inc hl 
cd5c 72					ld (hl), d 
cd5d			 
cd5d					; destroy value TOS 
cd5d			 
cd5d					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
cd5d cd 42 9d			call macro_forth_dsp_pop 
cd60				endm 
# End of macro FORTH_DSP_POP
cd60				       NEXTW 
cd60 c3 76 9e			jp macro_next 
cd63				endm 
# End of macro NEXTW
cd63			.V1Q: 
cd63				CWHEAD .V2S 103 "V1@" 3 WORD_FLAG_CODE 
cd63 7b				db WORD_SYS_CORE+103             
cd64 74 cd			dw .V2S            
cd66 04				db 3 + 1 
cd67 .. 00			db "V1@",0              
cd6b				endm 
# End of macro CWHEAD
cd6b			;| V1@ ( --u )  Put value of v1 onto stack | DONE 
cd6b 2a 24 ea				ld hl, (cli_var_array+2) 
cd6e cd 85 9a				call forth_push_numhl 
cd71				       NEXTW 
cd71 c3 76 9e			jp macro_next 
cd74				endm 
# End of macro NEXTW
cd74			.V2S: 
cd74				CWHEAD .V2Q 104 "V2!" 3 WORD_FLAG_CODE 
cd74 7c				db WORD_SYS_CORE+104             
cd75 8c cd			dw .V2Q            
cd77 04				db 3 + 1 
cd78 .. 00			db "V2!",0              
cd7c				endm 
# End of macro CWHEAD
cd7c			;| V2! ( u1 -- )  Store value to v2 | DONE 
cd7c					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
cd7c cd 8a 9c			call macro_dsp_valuehl 
cd7f				endm 
# End of macro FORTH_DSP_VALUEHL
cd7f			 
cd7f 11 26 ea				ld de, cli_var_array+4 
cd82				 
cd82 eb					ex de, hl 
cd83 73					ld (hl), e 
cd84 23					inc hl 
cd85 72					ld (hl), d 
cd86			 
cd86					; destroy value TOS 
cd86			 
cd86					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
cd86 cd 42 9d			call macro_forth_dsp_pop 
cd89				endm 
# End of macro FORTH_DSP_POP
cd89				       NEXTW 
cd89 c3 76 9e			jp macro_next 
cd8c				endm 
# End of macro NEXTW
cd8c			.V2Q: 
cd8c				CWHEAD .V3S 105 "V2@" 3 WORD_FLAG_CODE 
cd8c 7d				db WORD_SYS_CORE+105             
cd8d 9d cd			dw .V3S            
cd8f 04				db 3 + 1 
cd90 .. 00			db "V2@",0              
cd94				endm 
# End of macro CWHEAD
cd94			;| V2@ ( --u )  Put value of v2 onto stack | DONE 
cd94 2a 26 ea				ld hl, (cli_var_array+4) 
cd97 cd 85 9a				call forth_push_numhl 
cd9a				       NEXTW 
cd9a c3 76 9e			jp macro_next 
cd9d				endm 
# End of macro NEXTW
cd9d			.V3S: 
cd9d				CWHEAD .V3Q 104 "V3!" 3 WORD_FLAG_CODE 
cd9d 7c				db WORD_SYS_CORE+104             
cd9e b5 cd			dw .V3Q            
cda0 04				db 3 + 1 
cda1 .. 00			db "V3!",0              
cda5				endm 
# End of macro CWHEAD
cda5			;| V3! ( u1 -- )  Store value to v3 | DONE 
cda5					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
cda5 cd 8a 9c			call macro_dsp_valuehl 
cda8				endm 
# End of macro FORTH_DSP_VALUEHL
cda8			 
cda8 11 28 ea				ld de, cli_var_array+6 
cdab				 
cdab eb					ex de, hl 
cdac 73					ld (hl), e 
cdad 23					inc hl 
cdae 72					ld (hl), d 
cdaf			 
cdaf					; destroy value TOS 
cdaf			 
cdaf					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
cdaf cd 42 9d			call macro_forth_dsp_pop 
cdb2				endm 
# End of macro FORTH_DSP_POP
cdb2				       NEXTW 
cdb2 c3 76 9e			jp macro_next 
cdb5				endm 
# End of macro NEXTW
cdb5			.V3Q: 
cdb5				CWHEAD .END 105 "V3@" 3 WORD_FLAG_CODE 
cdb5 7d				db WORD_SYS_CORE+105             
cdb6 c6 cd			dw .END            
cdb8 04				db 3 + 1 
cdb9 .. 00			db "V3@",0              
cdbd				endm 
# End of macro CWHEAD
cdbd			;| V3@ ( --u )  Put value of v3 onto stack | DONE 
cdbd 2a 28 ea				ld hl, (cli_var_array+6) 
cdc0 cd 85 9a				call forth_push_numhl 
cdc3				       NEXTW 
cdc3 c3 76 9e			jp macro_next 
cdc6				endm 
# End of macro NEXTW
cdc6			 
cdc6			 
cdc6			 
cdc6			 
cdc6			 
cdc6			; end of dict marker 
cdc6			 
cdc6 00			.END:    db WORD_SYS_END 
cdc7 00 00			dw 0 
cdc9 00				db 0 
cdca			 
cdca			; use to jp here for user dict words to save on macro expansion  
cdca			 
cdca			user_dict_next: 
cdca				NEXTW 
cdca c3 76 9e			jp macro_next 
cdcd				endm 
# End of macro NEXTW
cdcd			 
cdcd			 
cdcd			user_exec: 
cdcd				;    ld hl, <word code> 
cdcd				;    FORTH_RSP_NEXT - call macro_forth_rsp_next 
cdcd				;    call forthexec 
cdcd				;    jp user_dict_next   (NEXT) 
cdcd			        ;    <word code bytes> 
cdcd eb				ex de, hl 
cdce 2a bc e5			ld hl,(os_tok_ptr) 
cdd1				 
cdd1				FORTH_RSP_NEXT 
cdd1 cd 2c 9a			call macro_forth_rsp_next 
cdd4				endm 
# End of macro FORTH_RSP_NEXT
cdd4			 
cdd4			if DEBUG_FORTH_UWORD 
cdd4						DMARK "UEX" 
cdd4 f5				push af  
cdd5 3a e9 cd			ld a, (.dmark)  
cdd8 32 65 ee			ld (debug_mark),a  
cddb 3a ea cd			ld a, (.dmark+1)  
cdde 32 66 ee			ld (debug_mark+1),a  
cde1 3a eb cd			ld a, (.dmark+2)  
cde4 32 67 ee			ld (debug_mark+2),a  
cde7 18 03			jr .pastdmark  
cde9 ..			.dmark: db "UEX"  
cdec f1			.pastdmark: pop af  
cded			endm  
# End of macro DMARK
cded				CALLMONITOR 
cded cd 6f ee			call debug_vector  
cdf0				endm  
# End of macro CALLMONITOR
cdf0			endif 
cdf0			 
cdf0			 
cdf0			 
cdf0 eb				ex de, hl 
cdf1 22 bc e5			ld (os_tok_ptr), hl 
cdf4				 
cdf4				; Don't use next - Skips the first word in uword. 
cdf4			 
cdf4 c3 ff 9e			jp exec1 
cdf7			;	NEXT 
cdf7			 
cdf7			 
cdf7			; eof 
# End of file forth_wordsv4.asm
cdf7			endif 
cdf7			;;;;;;;;;;;;;; Debug code 
cdf7			 
cdf7			 
cdf7			;if DEBUG_FORTH_PARSE 
cdf7 .. 00		.nowordfound: db "No match",0 
ce00 .. 00		.compword:	db "Comparing word ",0 
ce10 .. 00		.nextwordat:	db "Next word at",0 
ce1d .. 00		.charmatch:	db "Char match",0 
ce28			;endif 
ce28			if DEBUG_FORTH_JP 
ce28			.foundword:	db "Word match. Exec..",0 
ce28			endif 
ce28			;if DEBUG_FORTH_PUSH 
ce28 .. 00		.enddict:	db "Dict end. Push.",0 
ce38 .. 00		.push_str:	db "Pushing string",0 
ce47 .. 00		.push_num:	db "Pushing number",0 
ce56 .. 00		.data_sp:	db "SP:",0 
ce5a .. 00		.wordinhl:	db "Word in HL (2/0):",0 
ce6c .. 00		.wordinde:	db "Word in DE (3/0):",0 
ce7e .. 00		.wordinbc:	db "Word in BC (4/0):",0 
ce90			;endif 
ce90			;if DEBUG_FORTH_MALLOC 
ce90 .. 00		.push_malloc:	db "Malloc address",0 
ce9f			;endif 
ce9f			 
ce9f			 
ce9f			 
ce9f			; display malloc address and current data stack pointer  
ce9f			 
ce9f			malloc_error: 
ce9f d5				push de 
cea0 f5				push af 
cea1 e5				push hl 
cea2 cd bd 8a			call clear_display 
cea5 11 c5 ce			ld de, .mallocerr 
cea8 3e 00			ld a,0 
ceaa			;	ld de,os_word_scratch 
ceaa cd d0 8a			call str_at_display 
cead 3e 11			ld a, display_row_1+17 
ceaf 11 65 ee			ld de, debug_mark 
ceb2 cd d0 8a			call str_at_display 
ceb5 cd e0 8a			call update_display 
ceb8				;call break_point_state 
ceb8 cd dc df			call cin_wait 
cebb			 
cebb			;	ld a, ' ' 
cebb			;	ld (os_view_disable), a 
cebb cd f4 93			call bp_on 
cebe e1				pop hl 
cebf f1				pop af 
cec0 d1				pop de	 
cec1				CALLMONITOR 
cec1 cd 6f ee			call debug_vector  
cec4				endm  
# End of macro CALLMONITOR
cec4 c9				ret 
cec5			 
cec5 .. 00		.mallocerr: 	db "Malloc Error",0 
ced2			;if DEBUG_FORTH_PUSH 
ced2			display_data_sp: 
ced2 f5				push af 
ced3			 
ced3				; see if disabled 
ced3			 
ced3			 
ced3 3a 6f ee			ld a, (debug_vector) 
ced6 fe c9			cp $C9  ; RET 
ced8				;ld a, (os_view_disable) 
ced8				;cp '*' 
ced8 28 67			jr z, .skipdsp 
ceda			 
ceda e5				push hl 
cedb e5				push hl 
cedc e5			push hl 
cedd cd bd 8a			call clear_display 
cee0 e1			pop hl 
cee1 7c				ld a,h 
cee2 21 c0 e5			ld hl, os_word_scratch 
cee5 cd f3 8e			call hexout 
cee8 e1				pop hl 
cee9 7d				ld a,l 
ceea 21 c2 e5			ld hl, os_word_scratch+2 
ceed cd f3 8e			call hexout 
cef0 21 c4 e5			ld hl, os_word_scratch+4 
cef3 3e 00			ld a,0 
cef5 77				ld (hl),a 
cef6 11 c0 e5			ld de,os_word_scratch 
cef9 3e 28				ld a, display_row_2 
cefb cd d0 8a				call str_at_display 
cefe 11 5a ce			ld de, .wordinhl 
cf01 3e 00			ld a, display_row_1 
cf03			 
cf03 cd d0 8a				call str_at_display 
cf06 11 65 ee			ld de, debug_mark 
cf09 3e 11			ld a, display_row_1+17 
cf0b			 
cf0b cd d0 8a				call str_at_display 
cf0e			 
cf0e				; display current data stack pointer 
cf0e 11 56 ce			ld de,.data_sp 
cf11 3e 30				ld a, display_row_2 + 8 
cf13 cd d0 8a				call str_at_display 
cf16			 
cf16 2a e8 e9			ld hl,(cli_data_sp) 
cf19 e5				push hl 
cf1a 7c				ld a,h 
cf1b 21 c0 e5			ld hl, os_word_scratch 
cf1e cd f3 8e			call hexout 
cf21 e1				pop hl 
cf22 7d				ld a,l 
cf23 21 c2 e5			ld hl, os_word_scratch+2 
cf26 cd f3 8e			call hexout 
cf29 21 c4 e5			ld hl, os_word_scratch+4 
cf2c 3e 00			ld a,0 
cf2e 77				ld (hl),a 
cf2f 11 c0 e5			ld de,os_word_scratch 
cf32 3e 33				ld a, display_row_2 + 11 
cf34 cd d0 8a				call str_at_display 
cf37			 
cf37			 
cf37 cd e0 8a			call update_display 
cf3a cd 00 8a			call delay1s 
cf3d cd 00 8a			call delay1s 
cf40 e1				pop hl 
cf41			.skipdsp: 
cf41 f1				pop af 
cf42 c9				ret 
cf43			 
cf43			display_data_malloc: 
cf43			 
cf43 f5				push af 
cf44 e5				push hl 
cf45 e5				push hl 
cf46 e5			push hl 
cf47 cd bd 8a			call clear_display 
cf4a e1			pop hl 
cf4b 7c				ld a,h 
cf4c 21 c0 e5			ld hl, os_word_scratch 
cf4f cd f3 8e			call hexout 
cf52 e1				pop hl 
cf53 7d				ld a,l 
cf54 21 c2 e5			ld hl, os_word_scratch+2 
cf57 cd f3 8e			call hexout 
cf5a 21 c4 e5			ld hl, os_word_scratch+4 
cf5d 3e 00			ld a,0 
cf5f 77				ld (hl),a 
cf60 11 c0 e5			ld de,os_word_scratch 
cf63 3e 28				ld a, display_row_2 
cf65 cd d0 8a				call str_at_display 
cf68 11 90 ce			ld de, .push_malloc 
cf6b 3e 00			ld a, display_row_1 
cf6d			 
cf6d cd d0 8a				call str_at_display 
cf70			 
cf70				; display current data stack pointer 
cf70 11 56 ce			ld de,.data_sp 
cf73 3e 30				ld a, display_row_2 + 8 
cf75 cd d0 8a				call str_at_display 
cf78			 
cf78 2a e8 e9			ld hl,(cli_data_sp) 
cf7b e5				push hl 
cf7c 7c				ld a,h 
cf7d 21 c0 e5			ld hl, os_word_scratch 
cf80 cd f3 8e			call hexout 
cf83 e1				pop hl 
cf84 7d				ld a,l 
cf85 21 c2 e5			ld hl, os_word_scratch+2 
cf88 cd f3 8e			call hexout 
cf8b 21 c4 e5			ld hl, os_word_scratch+4 
cf8e 3e 00			ld a,0 
cf90 77				ld (hl),a 
cf91 11 c0 e5			ld de,os_word_scratch 
cf94 3e 33				ld a, display_row_2 + 11 
cf96 cd d0 8a				call str_at_display 
cf99			 
cf99 cd e0 8a			call update_display 
cf9c cd 00 8a			call delay1s 
cf9f cd 00 8a			call delay1s 
cfa2 e1				pop hl 
cfa3 f1				pop af 
cfa4 c9				ret 
cfa5			;endif 
cfa5			 
cfa5			include "forth_autostart.asm" 
cfa5			; list of commands to perform at system start up 
cfa5			 
cfa5			startcmds: 
cfa5			;	dw test11 
cfa5			;	dw test12 
cfa5			;	dw test13 
cfa5			;	dw test14 
cfa5			;	dw test15 
cfa5			;	dw test16 
cfa5			;	dw test17 
cfa5			;	dw ifthtest1 
cfa5			;	dw ifthtest2 
cfa5			;	dw ifthtest3 
cfa5			;	dw mmtest1 
cfa5			;	dw mmtest2 
cfa5			;	dw mmtest3 
cfa5			;	dw mmtest4 
cfa5			;	dw mmtest5 
cfa5			;	dw mmtest6 
cfa5			;	dw iftest1 
cfa5			;	dw iftest2 
cfa5			;	dw iftest3 
cfa5			;	dw looptest1 
cfa5			;	dw looptest2 
cfa5			;	dw test1 
cfa5			;	dw test2 
cfa5			;	dw test3 
cfa5			;	dw test4 
cfa5			;	dw game2r 
cfa5			;	dw game2b1 
cfa5			;	dw game2b2 
cfa5			 
cfa5				; start up words that are actually useful 
cfa5			 
cfa5			;    dw spi1 
cfa5			;    dw spi2 
cfa5			;    dw spi3 
cfa5			;    dw spi4 
cfa5			;    dw spi5 
cfa5			;    dw spi6 
cfa5			;    dw spi7 
cfa5			; 
cfa5			;    dw spi8 
cfa5			;    dw spi9 
cfa5			;    dw spi10 
cfa5			 
cfa5			; file editor 
cfa5			;	dw edit1 
cfa5			;	dw edit2 
cfa5			;	dw edit3 
cfa5			 
cfa5			;	dw longread 
cfa5 c7 d3			dw clrstack 
cfa7 fb d3			dw type 
cfa9			;	dw stest 
cfa9 20 d4			dw strncpy 
cfab 90 d5			dw list 
cfad 81 d4			dw start1 
cfaf 91 d4			dw start2 
cfb1			;	dw start3 
cfb1			;	dw start3b 
cfb1			;	dw start3c 
cfb1			 
cfb1				; (unit) testing words 
cfb1			 
cfb1			;	dw mtesta 
cfb1			;	dw mtestb 
cfb1			;	dw mtestc 
cfb1			;	dw mtestd 
cfb1			;	dw mteste 
cfb1			 
cfb1				; demo/game words 
cfb1			 
cfb1			;        dw game3w 
cfb1			;        dw game3p 
cfb1			;        dw game3sc 
cfb1			;        dw game3vsi 
cfb1			;        dw game3vs 
cfb1				 
cfb1			;	dw game2b 
cfb1			;	dw game2bf 
cfb1			;	dw game2mba 
cfb1			;	dw game2mbas 
cfb1			;	dw game2mb 
cfb1			 
cfb1 c1 d7			dw game1 
cfb3 d2 d7			dw game1a 
cfb5 34 d8			dw game1b 
cfb7 69 d8			dw game1c 
cfb9 9f d8			dw game1d 
cfbb d0 d8			dw game1s 
cfbd e4 d8			dw game1t 
cfbf f9 d8			dw game1f 
cfc1 2d d9			dw game1z 
cfc3 71 d9			dw game1zz 
cfc5			 
cfc5 fa d5			dw test5 
cfc7 32 d6			dw test6 
cfc9 6a d6			dw test7 
cfcb 7e d6			dw test8 
cfcd aa d6			dw test9 
cfcf c0 d6			dw test10 
cfd1				 
cfd1 48 da		        dw ssv5 
cfd3 2c da		        dw ssv4 
cfd5 10 da		        dw ssv3 
cfd7 da d9		        dw ssv2 
cfd9 61 da		        dw ssv1 
cfdb a9 da		        dw ssv1cpm 
cfdd			;	dw keyup 
cfdd			;	dw keydown 
cfdd			;	dw keyleft 
cfdd			;	dw keyright 
cfdd			;	dw 	keyf1 
cfdd			;	dw keyf2 
cfdd			;	dw keyf3 
cfdd			;	dw keyf4 
cfdd			;	dw keyf5 
cfdd			;	dw keyf6 
cfdd			;	dw keyf7 
cfdd			;	dw keyf8 
cfdd			;	dw keyf9 
cfdd			;	dw keyf10 
cfdd			;	dw keyf11 
cfdd			;	dw keyf12 
cfdd			;	dw keytab 
cfdd			;	dw keycr 
cfdd			;	dw keyhome 
cfdd			;	dw keyend 
cfdd			;	dw keybs 
cfdd 00 00			db 0, 0	 
cfdf			 
cfdf			 
cfdf			; File Editor 
cfdf			 
cfdf			; ( id - ) use 'e' to edit the displayed line 
cfdf .. 00		edit1: db ": edc waitk $65 = if ede then ; ", 0 
d000 .. 00		edit2: db ": ede storepage ptr $02 + cls dedit filepage bupd ; ", 0 
d035			;edit2: db ": ede v1@ v0@ record drop storepage ptr $02 + cls dedit filepage bupd ; ", 0 
d035 .. 00		edit3: db ": ed dup v0! open $01 do i v0@ record cls . edc loop ; ",0 
d06d			;edit3: db ": ed dup v0! open $01 do i v0@ record cls . i v1! edc loop ; ",0 
d06d			 
d06d			; SPI Net support words 
d06d			 
d06d			; v0! = node to send to 
d06d			; ( str count - ) 
d06d .. 00		spi1:       db ": spitype spiceh $00 do dup i + @ v0@ spicel $10 spio spio spio spiceh $01 pause loop ; ",0 
d0c6			 
d0c6			; spiputc ( char node - ) 
d0c6 .. 00		spi2:       db ": spiputc spicel $10 spio spio ptr @ spio spiceh ; ",0 
d0fa			; spiputc ( u node - ) 
d0fa .. 00		spi2b:       db ": spiputb spicel $10 spio spio spio spiceh ; ",0 
d128			 
d128			; spigetc ( - n ) 
d128 .. 00		spi4:       db ": spigetc spicel $11 spio spii spiceh ; ", 0 
d151			 
d151			; getnode ( - n ) 
d151 .. 00		spi5:       db ": getnode spicel $18 spio spii nop spiceh ; ", 0 
d17e			 
d17e			; ( str node - )  
d17e .. 00		spi3:       db ": sendnode v0! count spiceh $00 do dup i + @ v0@ spicel $10 spio spio spio spiceh $01 pause loop ; ; ",0 
d1e4			; store string ( str i - ) 
d1e4			 
d1e4			;spi3:       db ": storestrold spicel $03 spio spio ptr count clkstro spiceh ; ", 0 
d1e4 .. 00		spi6:       db ": storestr spicel $12 spio spio count $00 do dup i + @ spio $01 pause loop spiceh ; ", 0 
d239			 
d239			; get string ( addr i -  )    TO FIX 
d239			 
d239 .. 00		spi7:       db ": getstorestr spicel $13 spio spio \" \" repeat spii dup concat $00 = not until spiceh ; ", 0 
d291			 
d291			 
d291			; NETCHAT (TODO) 
d291			; Program to allow two nodes to chat with eachother 
d291			; 
d291			; v0 - target node 
d291			;  
d291			; accept input at 0,0 
d291			; if input is string send spitype to target node 
d291			; starting at row 2,0 , while spigetchr is not zero ->  
d291			; 
d291			; 
d291			; TODO add paging of get request 
d291			 
d291			; ( node - ) 
d291 .. 00		spi8:		db ": netchatp $00 $00 at accept ;", 0 
d2b0 .. 00		spi9: 		db ": netchatr repeat spigetchr dup dup $00 = not if emit then $00 = not until $02 pause ; ",0 
d308 .. 00		spi10:		db ": netchat v0! repeat netchatp count dup $00 > if spitype $01 pause then cls $00 $03 at \">\" . netchatr true until nop ; ", 0 
d380			 
d380			 
d380			; Long read of currently open file 
d380 .. 00		longread:   db ": lread read repeat readcont if read concat then readcont until nop ; ", 0 
d3c7			 
d3c7			; clear stack  
d3c7			 
d3c7 .. 00		clrstack:  db ": clrstk depth ?dup if $01 do drop loop then nop ; ", 0 
d3fb			 
d3fb			; type ( addr count - ) 
d3fb .. 00		type:     db ": type $00 do dup i + @ emit loop ; ", 0 
d420			 
d420			; some direct memory words 
d420			; strncpy ( len t f -- t ) 
d420			 
d420 .. 00		strncpy:   db ": strncpy $00 scratch 2! $02 scratch 2! do $00 scratch 2@ i + @ $02 scratch 2@ i + ! loop nop  ;",0 
d481			 
d481 .. 00		start1:     	db ": bpon $00 bp ;",0 
d491 .. 00		start2:     	db ": bpoff $01 bp ;",0 
d4a2 .. 00		start3b:         db ": ls dir cls drop dup $00 > if $01 do $08 $04 at . $01 $04 at . $04 $04 at . $23 $04 at accept drop scroll loop then nop ;",0 
d51d .. 00		start3c:         db ": dirlist dir cls drop dup $00 > if $01 do \"/\" .> .> \"Ext:\" .> .> \"Id: \" .> .>  loop then nop ;",0 
d57d			 
d57d .. 00		tuck:         db ": tuck swap over ;", 0 
d590			 
d590			; a handy word to list items on the stack 
d590			 
d590 .. 00		list:            db ": more cls repeat scroll $01 $04 at depth . $0a $04 at .> $01 $01 at accept drop depth 0= not until nop ;",0 
d5fa			 
d5fa			 
d5fa			; test stack  
d5fa			; rnd8 stest 
d5fa			 
d5fa			;stest:   db ": stest cls  v0! v0@ $00 do rnd8 $01 $01 at i . $01 pause loop v0@ $00 do drop $12 $01 at depth . $01 pause loop nop ;",0  
d5fa			 
d5fa			; random malloc and free cycles 
d5fa			 
d5fa			;mtesta:      db ": mtesta $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . rnd8 dup $13 $01 at . malloc heap $1f $01 at . $1f $02 at . $01 pause free $01 until nop ;", 0 
d5fa			 
d5fa			; fixed malloc and free cycles 
d5fa			 
d5fa			;mtestb:      db ": mtestb $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 malloc heap $1f $01 at . $1f $02 at . $01 pause free $01 until nop ;", 0 
d5fa			 
d5fa			; fixed double string push and drop cycle  
d5fa			 
d5fa			;mtestc:      db ": mtestc $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 spaces $2f spaces  heap $1f $01 at . $1f $02 at . $01 pause drop drop $01 until nop ; ", 0 
d5fa			 
d5fa			; consistent fixed string push and drop cycle  
d5fa			 
d5fa			;mtestd:      db ": mtestd $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 spaces heap $1f $01 at . $1f $02 at . $01 pause drop $01 until nop ; ", 0 
d5fa			 
d5fa			;mteste:      db ": mteste $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . rnd8 dup spaces $0f $02 at . heap $1f $01 at . $1f $02 at . $01 pause drop $01 until nop ; ", 0 
d5fa			 
d5fa			;test1:		db ": aa 1 2 3 ;", 0 
d5fa			;test2:     	db "111 aa 888 999",0 
d5fa			;test3:     	db ": bb 77 ;",0 
d5fa			;test4:     	db "$02 $01 do i . loop bb",0 
d5fa			 
d5fa .. 00		test5:     	db ": hline $13 $00 do i $01 at 1 . i $04 at 1 . loop nop ;",0 
d632 .. 00		test6:     	db ": vline $04 $01 do $00 i at 1 . $13 i at 1 . loop nop ;",0 
d66a .. 00		test7:     	db ": box hline vline ;",0 
d67e .. 00		test8:     	db ": world cls box $03 $03 at Hello-World! . ;",0 
d6aa .. 00		test9:     	db ": sw $01 adsp world ;",0 
d6c0 .. 00		test10:     	db ": fw $00 adsp world draw $05 pause ;",0 
d6e5			;test11:     	db "hello create .",0 
d6e5			;test12:     	db "hello2 create .",0 
d6e5			 
d6e5			;mmtest1:     	db "cls $0001 $0008 MIN . $0002 pause",0 
d6e5			;mmtest2:     	db "cls $0101 $0008 MIN . $0002 pause",0 
d6e5			;mmtest3:     	db "cls $0001 $0008 MAX . $0002 pause",0 
d6e5			;mmtest4:     	db "cls $0101 $0008 MAX . $0002 pause",0 
d6e5			;mmtest5:     	db "cls $0001 $0001 MIN . $0002 pause",0 
d6e5			;mmtest6:     	db "cls $0001 $0001 MAX . $0002 pause",0 
d6e5			 
d6e5			;iftest1:     	db "$0001 IF cls .",0 
d6e5			;iftest2:     	db "$0000 IF cls .",0 
d6e5			;iftest3:     	db "$0002 $0003 - IF cls .",0 
d6e5			;looptest1:     	db "$0003 $0001 do i . loop 8",0 
d6e5			;looptest2:     	db "$0003 $0001 do i . $0001 pause loop 8",0 
d6e5			 
d6e5			;ifthtest1:     	db "$0001 IF is-true . $0005 pause THEN next-word . $0005 pause",0 
d6e5			;ifthtest2:     	db "$0000 IF is-true . $0005 pause THEN next-word . $0005 pause",0 
d6e5			;ifthtest3:     	db "$0002 $0003 - IF is-true . $0005 pause THEN next-word . $0005 pause",0 
d6e5			 
d6e5			 
d6e5 .. 00		sound1: db ": note spicel spio spiceh spicel ; ",0 
d709 .. 00		sound2: db ": slient $9f note $bf note $df note $ff note ; ", 0 
d739 .. 00		sound3: db ": sound $01 cartdev $00 spitime ! ; ",0 
d75e .. 00		sound4: db ": cha $00 ; ",0 
d76b .. 00		sound5: db ": chb $20 ; ",0 
d778 .. 00		sound6: db ": chc $40 ; ",0 
d785 .. 00		sound7: db ": chd $60 ; ",0 
d792 .. 00		sound8: db ": cnote $80 + + note ; ", 0 
d7aa .. 00		sound9: db ": cvol $90 + + note ; ", 0 
d7c1			 
d7c1			 
d7c1			 
d7c1			 
d7c1			; a small guess the number game 
d7c1			 
d7c1 .. 00		game1:          db ": gsn rnd8 v1! ;",0 
d7d2 .. 00		game1a:          db ": gs $00 $00 at Enter-a-number .- $00 $02 at between-1-and-255 .- $00 $03 at accept str2num v2! ;",0 
d834			 
d834 .. 00		game1b:          db ": gcb v2@ v1@ < if $00 $00 at Too-low! .- $01 then ;",0 
d869 .. 00		game1c:          db ": gcc v2@ v1@ > if $00 $00 at Too-high! .- $01 then ;",0 
d89f .. 00		game1d:          db ": gcd v2@ v1@ = if $00 $00 at Yes! .- $00 then ;",0 
d8d0 .. 00		game1s:          db ": gck gcb gcc gcd ;",0 
d8e4 .. 00		game1t:          db ": sc v3@ $01 + v3! ;",0 
d8f9 .. 00		game1f:          db ": fsc v3@ cls $01 $01 at You-Took .- $02 $03 at . ;",0 
d92d .. 00		game1z:         db ": ga $00 v3! gsn repeat cls gs cls gck $02 pause sc until fsc nop ;",0 
d971			 
d971			; Using 'ga' save a high score across multiple runs using external storage 
d971			 
d971 .. 00		game1zz:         db ": gas ga $01 bank $80 bread $01 $04 at Prev-Score .> storepage ptr $02 + dup 2@ . v3@ swap 2! $80 bupd ;",0 
d9da			 
d9da			 
d9da			;game2r:          db ": m2r rnd8 v1! ;  ",0, 0, 0, FORTH_END_BUFFER 
d9da			;game2b1:          db ": m2b1 $1f $00 do i v2@ at rnd8 $30 < if A . then loop nop ;  ",0, 0, 0, FORTH_END_BUFFER 
d9da			;game2b2:          db ": m2b cls $04 $01 do i v2! m2b1 loop ;  ",0, 0, 0, FORTH_END_BUFFER 
d9da			 
d9da			; simple screen saver to test code memory reuse to destruction 
d9da			 
d9da .. 00		ssv2:            db ": ssvchr $2a $2d rnd dup $2c = if drop $20 then nop ;",0 
da10 .. 00		ssv3:            db ": ssvposx $01 $27 rnd v0! ;",0 
da2c .. 00		ssv4:            db ": ssvposy $01 $05 rnd v1! ;",0 
da48 .. 00		ssv5:            db ": ssvt ssvposx ssvposy ;",0 
da61 .. 00		ssv1:          db ": ssv cls repeat ssvposx ssvposy v0@ v1@ at ssvchr emit $01 until nop ;",0 
daa9 .. 00		ssv1cpm:          db ": ssvcpm cls repeat ssvposx ssvposy v0@ v1@ at ssvchr emit $01 pausems $01 until nop ;",0 
db00			;ssv1:          db ": ssv cls repeat ssvt v0@ v1@ at ssvchr emit $01 until nop ;",0 
db00			;ssv1:          db ": ssv ssvposx ssvposy at ssvchr ;",0 
db00			;ssv1:            db ": ssv repeat ssvpos rnd8 $10 if               $01 until nop ;",0 
db00			;ssv2:            db ": ssvchr v0! v1! at? ;",0 
db00			;ssv5:            db ": ssvt ssvposx ssvposy v0@ .> v1@ .> ;",0 
db00			;ssv2:            db ": ssvchr $2a $2d rnd  ;",0 
db00			 
db00			 
db00			 
db00			; minesweeper/battleship finding game 
db00			; draws a game board of random ship/mine positions 
db00			; user enters coords to see if it hits on 
db00			; game ends when all are hit 
db00			; when hit or miss says how many may be in the area 
db00			 
db00			; setup the game board and then hide it 
db00			;game2b:          db ": mbsetup $02 fb cls $04 $01 do i v2! $10 $01 do i v2@ at rnd8 $30 < if A . then loop loop $05 pause $01 fb ;",0 
db00			;game2bf:         db ": mbsetupf cls $04 $01 do i v2! $10 $01 do i v2@ at \"+\" . loop loop nop ;",0 
db00			;; prompt for where to target 
db00			;game2mba:        db ": mbp $12 $04 at Turns .> v3@ . $12 $03 at Score .> v0@ . $12 $01 at Enter-X-__ .- $1a $01 at accept $12 $02 at Enter-Y-__ .- $1a $02 at accept nop ;", 0  
db00			;game2mbas:        db ": mbsv str2num v2! str2num v1! nop ;", 0  
db00			;; TODO see if the entered coords hits or misses pushes char hit of miss 
db00			;game2mbht:      db ": mbckht nop ;",0 
db00			;game2mbms:      db ": mbcms nop ;",0 
db00			; TODO how many might be near by 
db00			;game2mb:          db ": mb $00 v0! $00 v3! mbsetup mbsetupf repeat mbp mbsv $02 fb mbckht mbcms v1@ v2@ at@ $01 fb v1@ v2@ at emit $01 until nop ;",0 
db00			 
db00			; Game 3 
db00			 
db00			; Vert scroller ski game - avoid the trees! 
db00			 
db00			; v0 score (ie turns) 
db00			; v1 player pos 
db00			; v2 left wall 
db00			; v3 right wall 
db00			 
db00			; Draw side walls randomly 
db00			 
db00			;game3w:   db ": vsw v2@ $04 at \"|\" . v3@ $04 at \"|\" . nop ;", 0 
db00			 
db00			; Draw player 
db00			;game3p:   db ": vsp v1@ $01 at \"V\" . nop ; ", 0 
db00			 
db00			; TODO Get Key 
db00			 
db00			; TODO Move left right 
db00			 
db00			; scroll and move walls a bit 
db00			 
db00			;game3sc:  db ": vsscl v2@ $01 + v2! v3@ $01 - v3! scroll nop ;", 0 
db00			 
db00			; main game loop 
db00			 
db00			;game3vsi:    db ": vsi $00 v0! $01 v2! $12 v3! $06 v1! nop ;",0 
db00			;game3vs:    db ": vs vsi repeat vsw vsp vsscl $05 pause scroll $01 until nop ;",0 
db00			 
db00			; key board defs 
db00			 
db00 .. 00		keyup:       db ": keyup $05 ;",0 
db0e .. 00		keydown:       db ": keydown $0a ;",0 
db1e .. 00		keyleft:       db ": keyleft $0b ;",0 
db2e .. 00		keyright:       db ": keyright $0c ;",0 
db3f .. 00		keyf1:       db ": keyf1 $10 ;",0 
db4d .. 00		keyf2:       db ": keyf2 $11 ;",0 
db5b .. 00		keyf3:       db ": keyf3 $12 ;",0 
db69 .. 00		keyf4:       db ": keyf4 $13 ;",0 
db77 .. 00		keyf5:       db ": keyf5 $14 ;",0 
db85 .. 00		keyf6:       db ": keyf6 $15 ;",0 
db93 .. 00		keyf7:       db ": keyf7 $16 ;",0 
dba1 .. 00		keyf8:       db ": keyf8 $17 ;",0 
dbaf .. 00		keyf9:       db ": keyf9 $18 ;",0 
dbbd .. 00		keyf10:       db ": keyf10 $19 ;",0 
dbcc .. 00		keyf11:       db ": keyf11 $1a ;",0 
dbdb .. 00		keyf12:       db ": keyf12 $1b ;",0 
dbea			 
dbea .. 00		keytab:       db ": keytab $09 ;",0 
dbf9 .. 00		keycr:       db ": keycr $0d ;",0 
dc07 .. 00		keyhome:       db ": keyhome $0e ;",0 
dc17 .. 00		keyend:       db ": keyend $0f ;",0 
dc26 .. 00		keybs:       db ": keybs $08 ;",0 
dc34			 
dc34			   
dc34			 
dc34			 
dc34			 
dc34			; eof 
# End of file forth_autostart.asm
dc34			 
dc34			 
dc34			 
dc34			; stack over and underflow checks 
dc34			 
dc34			; init the words to detect the under/overflow 
dc34			 
dc34			chk_stk_init: 
dc34				; a vague random number to check so we dont get any "lucky" hits 
dc34 3e 2d			ld a, 45 
dc36 6f				ld l, a 
dc37 00				nop 
dc38 3e 17			ld a, 23 
dc3a 67				ld h, a 
dc3b			 
dc3b 22 97 e2			ld (chk_word), hl     ; the word we need to check against 
dc3e			 
dc3e			;	ld (chk_stund), hl	; stack points.... 
dc3e 22 00 ef			ld (chk_stovr), hl 
dc41 22 e6 e9			ld (chk_ret_und), hl 
dc44 22 a4 e9			ld (chk_ret_ovr), hl 
dc47 22 22 e9			ld (chk_loop_ovr), hl 
dc4a 22 20 e8			ld (chk_data_ovr), hl 
dc4d c9				ret 
dc4e				 
dc4e			check_stacks: 
dc4e				; check all stack words 
dc4e			 
dc4e e5				push hl 
dc4f d5				push de 
dc50			 
dc50			;	ld de,(chk_word) 
dc50			;	ld hl, (chk_stund)	; stack points.... 
dc50			;	if DEBUG_STK_FAULT 
dc50			;		DMARK "FAa" 
dc50			;		CALLMONITOR 
dc50			;	endif 
dc50			;	call cmp16 
dc50			;	jp z, .chk_faulta 
dc50			; 
dc50			;	ld de, sfaultsu 
dc50			;	jp .chk_fault 
dc50			 
dc50 2a 00 ef		.chk_faulta: ld hl, (chk_stovr) 
dc53 ed 5b 97 e2		ld de,(chk_word) 
dc57				if DEBUG_STK_FAULT 
dc57					DMARK "FAb" 
dc57					CALLMONITOR 
dc57				endif 
dc57 cd 08 8d			call cmp16 
dc5a 28 06			jr z, .chk_fault1 
dc5c 11 00 dd			ld de, sfaultso 
dc5f c3 b1 dc			jp .chk_fault 
dc62			.chk_fault1:  
dc62 2a e6 e9			ld hl, (chk_ret_und) 
dc65 ed 5b 97 e2		ld de,(chk_word) 
dc69				if DEBUG_STK_FAULT 
dc69					DMARK "FAU" 
dc69					CALLMONITOR 
dc69				endif 
dc69 cd 08 8d			call cmp16 
dc6c ca 75 dc			jp z, .chk_fault2 
dc6f 11 10 dd			ld de, sfaultru 
dc72 c3 b1 dc			jp .chk_fault 
dc75			.chk_fault2:  
dc75 2a a4 e9			ld hl, (chk_ret_ovr) 
dc78 ed 5b 97 e2		ld de,(chk_word) 
dc7c				if DEBUG_STK_FAULT 
dc7c					DMARK "FA1" 
dc7c					CALLMONITOR 
dc7c				endif 
dc7c cd 08 8d			call cmp16 
dc7f ca 88 dc			jp z, .chk_fault3 
dc82 11 1e dd			ld de, sfaultro 
dc85 c3 b1 dc			jp .chk_fault 
dc88			.chk_fault3:  
dc88 2a 22 e9			ld hl, (chk_loop_ovr) 
dc8b ed 5b 97 e2		ld de,(chk_word) 
dc8f				if DEBUG_STK_FAULT 
dc8f					DMARK "FA2" 
dc8f					CALLMONITOR 
dc8f				endif 
dc8f cd 08 8d			call cmp16 
dc92 ca 9b dc			jp z, .chk_fault4 
dc95 11 38 dd			ld de, sfaultlo 
dc98 c3 b1 dc			jp .chk_fault 
dc9b			.chk_fault4:  
dc9b 2a 20 e8			ld hl, (chk_data_ovr) 
dc9e ed 5b 97 e2		ld de,(chk_word) 
dca2				if DEBUG_STK_FAULT 
dca2					DMARK "FA3" 
dca2					CALLMONITOR 
dca2				endif 
dca2 cd 08 8d			call cmp16 
dca5 ca ae dc			jp z, .chk_fault5 
dca8 11 52 dd			ld de, sfaultdo 
dcab c3 b1 dc			jp .chk_fault 
dcae			 
dcae			 
dcae			.chk_fault5:  
dcae d1				pop de 
dcaf e1				pop hl 
dcb0			 
dcb0 c9				ret 
dcb1			 
dcb1 cd bd 8a		.chk_fault: 	call clear_display 
dcb4 3e 28				ld a, display_row_2 
dcb6 cd d0 8a				call str_at_display 
dcb9 11 e2 dc				   ld de, .stackfault 
dcbc 3e 00				ld a, display_row_1 
dcbe cd d0 8a				call str_at_display 
dcc1 11 65 ee				    ld de, debug_mark 
dcc4 3e 11				ld a, display_row_1+17 
dcc6 cd d0 8a				call str_at_display 
dcc9 cd e0 8a				call update_display 
dccc			 
dccc				; prompt before entering montior for investigating issue 
dccc			 
dccc 3e 78			ld a, display_row_4 
dcce 11 63 97			ld de, endprog 
dcd1			 
dcd1 cd e0 8a			call update_display		 
dcd4			 
dcd4 cd fd 99			call next_page_prompt 
dcd7			 
dcd7 d1				pop de 
dcd8 e1				pop hl 
dcd9 cd b7 97				call monitor 
dcdc cd 1c 9e				call forth_warmstart 
dcdf c3 b3 96				jp warmstart_afterauto 
dce2					;jp 0 
dce2					;halt 
dce2			 
dce2			 
dce2			 
dce2 .. 00		.stackfault: 	db "Stack fault:",0 
dcef			 
dcef .. 00		sfaultsu: 	db	"Stack under flow",0 
dd00 .. 00		sfaultso: 	db	"Stack over flow",0 
dd10 .. 00		sfaultru:	db "RTS underflow",0 
dd1e .. 00		sfaultro:	db "RTS overflow/LS underflow", 0 
dd38 .. 00		sfaultlo:	db "LS overflow/DTS underflow", 0 
dd52 .. 00		sfaultdo:	db "DTS overflow", 0 
dd5f			 
dd5f			 
dd5f			fault_dsp_under: 
dd5f 11 71 dd			ld de, .dsp_under 
dd62 c3 27 de			jp .show_fault 
dd65			 
dd65			fault_rsp_under: 
dd65 11 7f dd			ld de, .rsp_under 
dd68 c3 27 de			jp .show_fault 
dd6b			fault_loop_under: 
dd6b 11 8d dd			ld de, .loop_under 
dd6e c3 27 de			jp .show_fault 
dd71			 
dd71 .. 00		.dsp_under: db "DSP Underflow",0 
dd7f .. 00		.rsp_under: db "RSP Underflow",0 
dd8d .. 00		.loop_under: db "LOOP Underflow",0 
dd9c			 
dd9c			 
dd9c d5			type_faultn: 	push de 
dd9d e5					push hl 
dd9e cd bd 8a				call clear_display 
dda1 11 cb dd				   ld de, .typefaultn 
dda4 3e 00				ld a, display_row_1 
dda6 cd d0 8a				call str_at_display 
dda9 11 65 ee				    ld de, debug_mark 
ddac 3e 11				ld a, display_row_1+17 
ddae cd d0 8a				call str_at_display 
ddb1 cd e0 8a				call update_display 
ddb4			 
ddb4				; prompt before entering montior for investigating issue 
ddb4			 
ddb4 3e 78			ld a, display_row_4 
ddb6 11 63 97			ld de, endprog 
ddb9			 
ddb9 cd e0 8a			call update_display		 
ddbc			 
ddbc cd fd 99			call next_page_prompt 
ddbf			 
ddbf e5					push hl 
ddc0 d5					push de 
ddc1 cd b7 97				call monitor 
ddc4 cd 1c 9e				call forth_warmstart 
ddc7 c3 b3 96				jp warmstart_afterauto 
ddca 76					halt 
ddcb			 
ddcb			 
ddcb .. 00		.typefaultn: db "NUM Type Expected TOS!",0 
dde2			 
dde2 d5			type_faults: 	push de 
dde3 e5					push hl 
dde4 cd bd 8a				call clear_display 
dde7 11 10 de				   ld de, .typefaults 
ddea 3e 00				ld a, display_row_1 
ddec cd d0 8a				call str_at_display 
ddef 11 65 ee				    ld de, debug_mark 
ddf2 3e 11				ld a, display_row_1+17 
ddf4 cd d0 8a				call str_at_display 
ddf7 cd e0 8a				call update_display 
ddfa			 
ddfa				; prompt before entering montior for investigating issue 
ddfa			 
ddfa 3e 78			ld a, display_row_4 
ddfc 11 63 97			ld de, endprog 
ddff			 
ddff cd e0 8a			call update_display		 
de02			 
de02 cd fd 99			call next_page_prompt 
de05			 
de05 e1					pop hl 
de06 d1					pop de 
de07 cd b7 97				call monitor 
de0a cd 1c 9e				call forth_warmstart 
de0d c3 b3 96				jp warmstart_afterauto 
de10			 
de10			 
de10 .. 00		.typefaults: db "STR Type Expected TOS!",0 
de27			 
de27			.show_fault: 	 
de27 d5					push de 
de28 cd bd 8a				call clear_display 
de2b d1					pop de 
de2c 3e 00				ld a, display_row_1 
de2e cd d0 8a				call str_at_display 
de31 11 65 ee				    ld de, debug_mark 
de34 3e 11				ld a, display_row_1+17 
de36 cd d0 8a				call str_at_display 
de39 cd e0 8a				call update_display 
de3c			 
de3c				; prompt before entering montior for investigating issue 
de3c			 
de3c 3e 78			ld a, display_row_4 
de3e 11 63 97			ld de, endprog 
de41			 
de41 cd e0 8a			call update_display		 
de44			 
de44 cd fd 99			call next_page_prompt 
de47			 
de47 e1					pop hl 
de48 d1					pop de 
de49 cd b7 97				call monitor 
de4c			; do a dump to cli and not warmstart so we preserve all of the uwords.  
de4c			; TODO Make optional fault restart to cli or warm boot? 
de4c					;jp warmstart 
de4c c3 f7 96				jp cli 
de4f 76					halt 
de50			 
de50			 
de50			; handle the auto run of code from files in storage 
de50			 
de50			 
de50			include "forth_startup.asm" 
de50			; Which startup method to use? 
de50			; 
de50			; version 1 - allows for a single stored file to be selected to run at start up (if se storage is enabled) 
de50			; followed by loading of a list of scripts in eeprom 
de50			 
de50			; version 2 - if se storage is enabled then auto load all files which begin with a '*' else use loading 
de50			; from eeprom 
de50			 
de50			; Select with define in main stubs 
de50			 
de50			if STARTUP_V1 
de50				include "forth_startupv1.asm" 
de50			; Startup script loading version 1 
de50			 
de50			; If SE storage is available first stage is to use the selected file 
de50			; then go through the eeprom list 
de50			 
de50 .. 00		sprompt1: db "Startup load...",0 
de60 .. 00		sprompt2: db "Run? 1=No *=End #=All",0 
de76			 
de76			 
de76			 
de76			 
de76			forth_startup: 
de76 21 a5 cf			ld hl, startcmds 
de79 3e 00			ld a, 0 
de7b 32 e1 e6			ld (os_last_cmd), a    ; tmp var to skip prompts if doing all 
de7e			 
de7e e5			.start1:	push hl 
de7f cd bd 8a			call clear_display 
de82 11 50 de			ld de, sprompt1 
de85 3e 00		        ld a, display_row_1 
de87 cd d0 8a			call str_at_display 
de8a 11 60 de			ld de, sprompt2 
de8d 3e 28		        ld a, display_row_2 
de8f cd d0 8a			call str_at_display 
de92 e1				pop hl 
de93 e5				push hl 
de94 5e				ld e,(hl) 
de95 23				inc hl 
de96 56				ld d,(hl) 
de97 3e 50		        ld a, display_row_3 
de99 cd d0 8a			call str_at_display 
de9c cd e0 8a			call update_display 
de9f			 
de9f			 
de9f 3a e1 e6			ld a, (os_last_cmd) 
dea2 fe 00			cp 0 
dea4 28 05			jr z, .startprompt 
dea6 cd f4 89			call delay250ms 
dea9 18 24			jr .startdo 
deab				 
deab				 
deab			 
deab			.startprompt: 
deab			 
deab 3e 9f			ld a,display_row_4 + display_cols - 1 
dead 11 fb 99		        ld de, endprg 
deb0 cd d0 8a			call str_at_display 
deb3 cd e0 8a			call update_display 
deb6 cd 00 8a			call delay1s 
deb9 cd dc df			call cin_wait 
debc						 
debc fe 2a			cp '*' 
debe 28 5e			jr z, .startupend1 
dec0 fe 23			cp '#' 
dec2 20 07			jr nz, .startno 
dec4 3e 01			ld a, 1 
dec6 32 e1 e6			ld (os_last_cmd),a 
dec9 18 04			jr .startdo 
decb fe 31		.startno:	cp '1' 
decd 28 3a			jr z,.startnxt  
decf			 
decf				; exec startup line 
decf			.startdo:	 
decf e1				pop hl 
ded0 e5				push hl 
ded1				 
ded1 5e				ld e,(hl) 
ded2 23				inc hl 
ded3 56				ld d,(hl) 
ded4 eb				ex de,hl 
ded5			 
ded5 e5				push hl 
ded6			 
ded6 3e 00			ld a, 0 
ded8				;ld a, FORTH_END_BUFFER 
ded8 cd 5b 90			call strlent 
dedb 23				inc hl   ; include zero term to copy 
dedc 06 00			ld b,0 
dede 4d				ld c,l 
dedf e1				pop hl 
dee0 11 bb e2			ld de, scratch 
dee3 ed b0			ldir 
dee5			 
dee5			 
dee5 21 bb e2			ld hl, scratch 
dee8 cd c0 9e			call forthparse 
deeb cd fc 9e			call forthexec 
deee cd 16 9e			call forthexec_cleanup 
def1			 
def1 3e 78			ld a, display_row_4 
def3 11 63 97			ld de, endprog 
def6			 
def6 cd e0 8a			call update_display		 
def9			 
def9 3a e1 e6			ld a, (os_last_cmd) 
defc fe 00			cp 0 
defe 20 09			jr nz, .startnxt 
df00 cd fd 99			call next_page_prompt 
df03 cd bd 8a		        call clear_display 
df06 cd e0 8a			call update_display		 
df09			 
df09				; move onto next startup line? 
df09			.startnxt: 
df09			 
df09 cd f4 89			call delay250ms 
df0c e1				pop hl 
df0d			 
df0d 23				inc hl 
df0e 23				inc hl 
df0f			 
df0f e5				push hl 
df10 5e				ld e, (hl) 
df11 23				inc hl 
df12 56				ld d, (hl) 
df13 e1				pop hl 
df14				; TODO replace 0 test 
df14			 
df14 eb				ex de, hl 
df15 cd 13 8d			call ishlzero 
df18			;	ld a,e 
df18			;	add d 
df18			;	cp 0    ; any left to do? 
df18 eb				ex de, hl 
df19 c2 7e de			jp nz, .start1 
df1c 18 01			jr .startupend 
df1e			 
df1e e1			.startupend1: pop hl 
df1f			.startupend: 
df1f			 
df1f cd bd 8a			call clear_display 
df22 cd e0 8a			call update_display 
df25 c9				ret 
df26			if STORAGE_SE 
df26			 
df26			sprompt3: db "Loading from start-up file?:",0 
df26			sprompt4: db "(Y=Any key/N=No)",0 
df26			 
df26			 
df26			forth_autoload: 
df26			 
df26				; load block 0 of store 1 
df26				 
df26				ld a, $fe      ; bit 0 clear 
df26				ld (spi_device), a 
df26			 
df26				call storage_get_block_0 
df26			 
df26				ld a, (store_page+STORE_0_AUTOFILE) 
df26			 
df26				cp 0 
df26				ret z     ; auto start not enabled 
df26			 
df26				call clear_display 
df26			 
df26				; set bank 
df26			 
df26					ld a, (store_page+STORE_0_BANKRUN) 
df26					ld (spi_device), a 
df26			 
df26				; get file id to load from and get the file name to display 
df26			 
df26					ld a, (store_page+STORE_0_FILERUN) 
df26			 
df26					ld l, 0 
df26					ld h, a 
df26					ld de, store_page 
df26			 
df26					if DEBUG_FORTH_WORDS 
df26						DMARK "ASp" 
df26						CALLMONITOR 
df26					endif 
df26					call storage_read 
df26			 
df26					if DEBUG_FORTH_WORDS 
df26						DMARK "ASr" 
df26						CALLMONITOR 
df26					endif 
df26			 
df26					call ishlzero 
df26					ret z             ; file not found 
df26			 
df26					ld a, display_row_2 + 10 
df26					ld de, store_page+3 
df26					call str_at_display 
df26				 
df26			; 
df26			 
df26				ld a, display_row_1+5 
df26				ld de, sprompt3 
df26				call str_at_display 
df26				ld a, display_row_3+15 
df26				ld de, sprompt4 
df26				call str_at_display 
df26			 
df26				call update_display 
df26			 
df26				call cin_wait 
df26				cp 'n' 
df26				ret z 
df26				cp 'N' 
df26				ret z 
df26			 
df26				call delay1s 
df26			 
df26				ld a, (store_page+2) 
df26				ld (store_openmaxext), a    ; save count of ext 
df26				ld a, 1  
df26				ld (store_openext), a    ; save count of ext 
df26			 
df26			.autof:  
df26				ld l , a 
df26				 
df26				ld a, (store_page) 
df26				ld h, a	 
df26				ld de, store_page 
df26					if DEBUG_FORTH_WORDS 
df26						DMARK "ASl" 
df26						CALLMONITOR 
df26					endif 
df26					call storage_read 
df26				call ishlzero 
df26				ret z 
df26			;	jr z, .autoend 
df26			 
df26					if DEBUG_FORTH_WORDS 
df26						DMARK "ASc" 
df26						CALLMONITOR 
df26					endif 
df26				ld de, store_page+2 
df26				ld a, display_row_4 
df26				call str_at_display 
df26			 
df26				call update_display 
df26				call delay250ms 
df26			 
df26			 
df26			 
df26				ld hl, store_page+2 
df26				call forthparse 
df26				call forthexec 
df26				call forthexec_cleanup 
df26			 
df26				 
df26				ld a, (store_openext) 
df26				inc a 
df26				ld (store_openext), a    ; save count of ext 
df26			 
df26				jr .autof 
df26			;.autofdone: 
df26			; 
df26			;		if DEBUG_FORTH_WORDS 
df26			;			DMARK "ASx" 
df26			;			CALLMONITOR 
df26			;		endif 
df26			;;	call clear_display 
df26			;	ret 
df26			 
df26			 
df26			 
df26			endif 
# End of file forth_startupv1.asm
df26			endif 
df26			if STARTUP_V2 
df26				include "forth_startupv2.asm" 
df26			endif 
df26			 
# End of file forth_startup.asm
df26			 
df26			; eof 
# End of file forth_kernel.asm
df26			;include "nascombasic.asm" 
df26			 
df26			 
df26			; find out where the code ends if loaded into RAM (for SC114) 
df26			;endofcode:  
df26			;	nop 
df26			 
df26			 
df26			; jump to nmi vector 
df26			 
df26			init_nmi: 
df26 3e c9			ld a, $c9   ; RET 
df28 32 72 ee			ld (nmi_vector), a 
df2b c9				ret 
df2c			nmi: 
df2c e5				push hl 
df2d d5				push de 
df2e c5				push bc 
df2f f5				push af 
df30 cd 72 ee			call nmi_vector 
df33 f5				push af 
df34 c5				push bc 
df35 d5				push de 
df36 e5				push hl 
df37 ed 4d			reti 
df39			 
df39			 
df39			; eof 
df39			 
# End of file main.asm
df39			;include "firmware_lcd_4x40.asm" 
df39			;;include "firmware_lcd_4x20.asm" 
df39			include "firmware_serial_display.asm" 
df39			 
df39			; Serial display interface for SC114 
df39			 
df39			 
df39			display_row_1: equ 0 
df39			display_row_2: equ display_row_1+display_cols 
df39			display_row_3: equ display_row_2 + display_cols 
df39			display_row_4: equ display_row_3 + display_cols 
df39			 
df39			kLCDWidth:  EQU display_cols             ;Width in characters 
df39			kLCD_Line1: EQU 0x00  
df39			kLCD_Line2: EQU kLCD_Line1+kLCDWidth 
df39			; E1 
df39			kLCD_Line3: EQU kLCD_Line2+kLCDWidth 
df39			kLCD_Line4: EQU kLCD_Line3+kLCDWidth  
df39			 
df39			lcd_init: 
df39				; no init as handled by the SCM bios 
df39 c9				ret 
df3a			 
df3a			 
df3a			; low level functions for direct screen writes 
df3a			 
df3a			; output char at pos? 
df3a			fLCD_Str: 
df3a			        ;out (SC114_SIO_1_OUT),a 
df3a c5				push bc 
df3b 0e 02			ld c, $02 
df3d f7				rst $30 
df3e c1				pop bc 
df3f c9				ret 
df40			 
df40			; position the cursor on the screen using A as realtive point in screen buffer (i.e. A=(x+(width/y))) 
df40			fLCD_Pos: 
df40				; use ASCII escape to position 
df40			        ;out (SC114_SIO_1_OUT),a 
df40 c5				push bc 
df41 0e 02			ld c, $02 
df43 f7				rst $30 
df44 c1				pop bc 
df45			 
df45 c9				ret 
df46			 
df46			; output char at pos 
df46			fLCD_Data: 
df46			      ;  out (SC114_SIO_1_OUT),a 
df46 c5				push bc 
df47 0e 02			ld c, $02 
df49 f7				rst $30 
df4a c1				pop bc 
df4b			 
df4b c9				ret 
df4c			 
df4c			; ascii cls  
df4c			 
df4c 1b 5b 48 00	.cls:   db 27, '[', 'H', 0 
df50			 
df50			; write the frame buffer given in hl to hardware  
df50			write_display: 
df50			 
df50			API: equ 0 
df50			 
df50			if API 
df50				push bc 
df50				ld b, 4 
df50			 
df50			        ld (display_write_tmp), hl 	  
df50			 
df50				; clear and home cursor 
df50			 
df50				ld c, 6 
df50				ld de, .cls 
df50				rst $30 
df50			 
df50			 
df50			.writeln: 
df50			 
df50				ld de, (display_write_tmp) 
df50				ld c, 6 
df50				rst $30 
df50				ld c, 7 
df50				rst $30 
df50			 
df50				ld hl, (display_write_tmp) 
df50				ld de, display_cols 
df50				add hl,de 
df50				ld (display_write_tmp),hl 
df50			 
df50				djnz  .writeln 
df50			 
df50				pop bc 
df50			 
df50			 
df50				ret 
df50			endif 
df50 e5				push hl 
df51 c5				push bc 
df52 d5				push de 
df53			 
df53			;	ld c, 2 
df53			;	;ld de, .cls 
df53			;	ld a, 27 
df53			;	rst $30 
df53			;	ld c, 2 
df53			;	;ld de, .cls 
df53			;	ld a, '[' 
df53			;	rst $30 
df53			; 
df53			;	ld c, 2 
df53			;	;ld de, .cls 
df53			;	ld a, 'H' 
df53			;	rst $30 
df53			; 
df53			 
df53 0e 02			ld c, 2 
df55				;ld de, .cls 
df55 3e 1b			ld a, 27 
df57 f7				rst $30 
df58			 
df58			 
df58 0e 02			ld c, 2 
df5a				;ld de, .cls 
df5a 3e 5b			ld a, '[' 
df5c f7				rst $30 
df5d 0e 02			ld c, 2 
df5f				;ld de, .cls 
df5f 3e 32			ld a, '2' 
df61 f7				rst $30 
df62 0e 02			ld c, 2 
df64				;ld de, .cls 
df64 3e 4a			ld a, 'J' 
df66 f7				rst $30 
df67 d1				pop de 
df68 c1				pop bc 
df69 e1				pop hl 
df6a			 
df6a			 
df6a 22 c3 eb		        ld (display_write_tmp), hl 	  
df6d 3e 00			ld a, kLCD_Line1 
df6f			        ;    CALL fLCD_Pos       ;Position cursor to location in A 
df6f 06 28			ld b, display_cols 
df71 ed 5b c3 eb		ld de, (display_write_tmp) 
df75 cd d3 df			call write_len_string 
df78				 
df78			 
df78 e5			push hl 
df79 d5			push de 
df7a c5			push bc 
df7b 0e 07			ld c, 7 
df7d f7				rst $30 
df7e c1			pop bc 
df7f d1			pop de 
df80 e1			pop hl 
df81			 
df81				 
df81 2a c3 eb			ld hl, (display_write_tmp) 
df84 11 28 00			ld de, display_cols 
df87 19				add hl,de 
df88 22 c3 eb			ld (display_write_tmp),hl 
df8b			 
df8b				 
df8b 3e 28			ld a, kLCD_Line2 
df8d			        ;    CALL fLCD_Pos       ;Position cursor to location in A 
df8d 06 28			ld b, display_cols 
df8f ed 5b c3 eb		ld de, (display_write_tmp) 
df93 cd d3 df			call write_len_string 
df96				 
df96 2a c3 eb			ld hl, (display_write_tmp) 
df99 11 28 00			ld de, display_cols 
df9c 19				add hl,de 
df9d 22 c3 eb			ld (display_write_tmp),hl 
dfa0			 
dfa0 e5			push hl 
dfa1 d5			push de 
dfa2 c5			push bc 
dfa3 0e 07			ld c, 7 
dfa5 f7				rst $30 
dfa6 c1			pop bc 
dfa7 d1			pop de 
dfa8 e1			pop hl 
dfa9			 
dfa9				 
dfa9 3e 50			ld a, kLCD_Line3 
dfab			         ;   CALL fLCD_Pos       ;Position cursor to location in A 
dfab 06 28			ld b, display_cols 
dfad ed 5b c3 eb		ld de, (display_write_tmp) 
dfb1 cd d3 df			call write_len_string 
dfb4				 
dfb4 2a c3 eb			ld hl, (display_write_tmp) 
dfb7 11 28 00			ld de, display_cols 
dfba 19				add hl,de 
dfbb 22 c3 eb			ld (display_write_tmp),hl 
dfbe			 
dfbe e5			push hl 
dfbf d5			push de 
dfc0 c5			push bc 
dfc1 0e 07			ld c, 7 
dfc3 f7				rst $30 
dfc4 c1			pop bc 
dfc5 d1			pop de 
dfc6 e1			pop hl 
dfc7			 
dfc7				 
dfc7 3e 78			ld a, kLCD_Line4 
dfc9			          ;  CALL fLCD_Pos       ;Position cursor to location in A 
dfc9 06 28			ld b, display_cols 
dfcb ed 5b c3 eb		ld de, (display_write_tmp) 
dfcf cd d3 df			call write_len_string 
dfd2 c9					ret 
dfd3			 
dfd3			 
dfd3				; write out a fixed length string given in b from de 
dfd3			 
dfd3 1a			write_len_string:   LD   A, (DE)        ;Get character from string 
dfd4 cd 46 df		            CALL fLCD_Data      ;Write character to display 
dfd7 13				inc de 
dfd8 10 f9			djnz write_len_string 
dfda c9				ret 
dfdb			 
dfdb			 
dfdb			; eof 
# End of file firmware_serial_display.asm
dfdb			;include "firmware_key_5x10.asm" 
dfdb			;;include "firmware_key_4x10.asm" 
dfdb			include "firmware_key_serial.asm" 
dfdb			; Serial keyboard interface for SC114 
dfdb			 
dfdb			key_init: 
dfdb				; no init as handled by the SCM bios 
dfdb c9				ret 
dfdc			 
dfdc			 
dfdc			cin_wait: 
dfdc			;	ld a, 0 
dfdc			;	ret 
dfdc			 
dfdc				;in a,(SC114_SIO_1_IN) 
dfdc			        ; Use SCM API to get from whatever console device we are using 
dfdc c5				push bc 
dfdd 0e 01			ld c, $01 
dfdf f7				rst $30 
dfe0 c1				pop bc 
dfe1 c9				ret 
dfe2			 
dfe2			cinndb: 	 
dfe2			cin: 
dfe2			 
dfe2			 
dfe2 c5				push bc 
dfe3			 
dfe3				; any key waiting to process? 
dfe3 0e 03			ld c, $03 
dfe5 f7				rst $30 
dfe6 28 05			jr z, .cin_skip 
dfe8			 
dfe8				; yep, get it 
dfe8			 
dfe8 0e 01			ld c, $01 
dfea f7				rst $30 
dfeb c1				pop bc 
dfec c9				ret 
dfed			.cin_skip: 
dfed 3e 00			ld a, 0 
dfef c1				pop bc 
dff0 c9				ret 
dff1			 
dff1			 
dff1			 
dff1			 
# End of file firmware_key_serial.asm
dff1			endofcode:  
dff1			baseram:  
dff1 00				nop 
dff2			 
dff2			heap_start: equ baseram+15  ; Starting address of heap 
dff2			free_list:  equ baseram+10      ; Block struct for start of free list (MUST be 4 bytes) 
dff2			heap_size: equ  heap_end-heap_start      ; Number of bytes available in heap   TODO make all of user ram 
dff2			;VDU:  EQU     endofcode           ; BASIC Work space 
dff2			; eof 
dff2			 
# End of file os_mega_sc114.asm
dff2
