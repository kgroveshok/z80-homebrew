# File debug_level2.asm
0000			 
0000			; DEBUG Level 2 - All useful debug on and memory courruption guards 
0000			 
0000			; Odd specific debug points for testing hardware dev 
0000			 
0000			;DEBUG_LEVEL0: equ 0 
0000			;DEBUG_LEVEL0: equ 0 
0000			;DEBUG_LEVEL2: equ 1 
0000			DEBUG_LEVEL: equ '2' 
0000			 
0000			DEBUG_SOUND: equ 0      
0000			DEBUG_STK_FAULT: equ 0 
0000			DEBUG_INPUT: equ 0     ; Debug input entry code 
0000			DEBUG_INPUTV2: equ 0     ; Debug input entry code 
0000			DEBUG_KEYCINWAIT: equ 0 
0000			DEBUG_KEYCIN: equ 0 
0000			DEBUG_KEY: equ 0 
0000			DEBUG_KEY_MATRIX: equ 0 
0000			DEBUG_STORECF: equ 0 
0000			DEBUG_STORESE: equ 1        ; TODO  w locks up, r returns.  
0000			DEBUG_SPI_HARD_CE0: equ 0    ; only handshake on CE0 on port A 
0000			DEBUG_SPI: equ 0    ; low level spi tests 
0000			 
0000			; Enable many break points 
0000			 
0000			DEBUG_FORTH_PARSE_EXEC: equ 0     ; 6 
0000			DEBUG_FORTH_PARSE_EXEC_SLOW: equ 0     ; 6 
0000			DEBUG_FORTH_PARSE_NEXTWORD: equ 0 
0000			DEBUG_FORTH_JP: equ 0    ; 4 
0000			DEBUG_FORTH_MALLOC: equ 0 
0000			DEBUG_FORTH_MALLOC_INT: equ 0 
0000			DEBUG_FORTH_DOT: equ 1 
0000			DEBUG_FORTH_DOT_WAIT: equ 0 
0000			DEBUG_FORTH_MATHS: equ 0 
0000			DEBUG_FORTH_TOK: equ 0    ; 4 
0000			DEBUG_FORTH_PARSE: equ 0    ; 3 
0000			DEBUG_FORTH: equ 0  ;2 
0000			DEBUG_FORTH_WORDS: equ 1   ; 1 
0000			DEBUG_FORTH_PUSH: equ 1   ; 1 
0000			DEBUG_FORTH_UWORD: equ 1   ; 1 
0000			 
0000			; Enable key point breakpoints 
0000			 
0000			DEBUG_FORTH_DOT_KEY: equ 0 
0000			DEBUG_FORTH_PARSE_KEY: equ 0   ; 5 
0000			DEBUG_FORTH_WORDS_KEY: equ 1   ; 1 
0000			 
0000			; Debug stack imbalances 
0000			 
0000			ON: equ 1 
0000			OFF: equ 0 
0000			 
0000			DEBUG_STACK_IMB: equ 0 
0000			STACK_IMB_STORE: equ 20 
0000			 
0000			; House keeping and protections 
0000			 
0000			DEBUG_FORTH_STACK_GUARD: equ 1    ; under/over flows 
0000			DEBUG_FORTH_MALLOC_GUARD: equ 1 
0000			DEBUG_FORTH_MALLOC_HIGH: equ 0     ; warn only if more than 255 chars being allocated. would be highly unusual! 
0000			FORTH_ENABLE_FREE: equ 0 
0000			FORTH_ENABLE_MALLOCFREE: equ 1 
0000			FORTH_ENABLE_DSPPOPFREE: equ 1    ; TODO BUG Seems to be OK in some situations but with SW it crashes straight away 
0000			FORTH_ENABLE_FLOATMATH: equ 0 
0000			; eof 
# End of file debug_level2.asm
# File os_mega_cpm.asm
0000			 
0000			; Hardware Platform 
0000			 
0000			BASE_SC114: equ 0 
0000			BASE_KEV: equ 0 
0000			BASE_CPM: equ 1 
0000			 
0000			ENABLE_BASIC: equ 0 
0000			 
0000			STARTUP_V1: equ 1 
0000			STARTUP_V2: equ 0 
0000			 
0000			tos:	equ 0f000h 
0000			; Using SCM API instead 
0000			;SC114_SIO_1_OUT: equ 81 
0000			;SC114_SIO_1_IN: equ 80 
0000			; 
0000			; 
0000			; CPU clock 
0000			; 
0000			CPU_CLOCK_4MHZ: equ 1 
0000			CPU_CLOCK_8MHZ: equ  0 
0000			CPU_CLOCK_10MHZ: equ  0 
0000			 
0000			; Use this to tune the delay functions if your CPU is a bit quick. i.e. RunCPM on a PC 
0000			 
0000			CPM_DELAY_TUNE: equ 4000 
0000			 
0000			; use microchip serial eeprom for storage 
0000			 
0000			STORAGE_SE: equ 0 
0000			SOUND_ENABLE: equ 0 
0000			 
0000			; the port where the PIO using the SC103 card is located 
0000			 
0000			SC103_PIO: equ 068h 
0000			 
0000			; Full OS but with the 5x10 fullsized keyboard 
0000			 
0000			display_rows: equ 4     
0000			;display_cols: equ 20 
0000			display_cols: equ 40 
0000			 
0000			key_rows: equ 5      
0000			key_cols: equ 10    
0000			 
0000			 
0000			include "main.asm" 
0000			; z80 homebrew opperating system 
0000			; 
0000			 
0000			STARTUP_ENABLE: equ 1 
0000			 
0000			 
0000			; bios jump points via rst 
0000			 
0000			if BASE_SC114 = 1  
0000			 
0000				org 8000h 
0000			endif 
0000			 
0000			if BASE_KEV = 1  
0000			 
0000				org 0h 
0000			endif 
0000			 
0000			if BASE_CPM = 1  
0000			 
0000				org 100h 
0100			endif 
0100 c3 7c 17			jp coldstart     ; rst 0 - cold boot 
0103			 
0103			 
0103 ..			buildtime: db   "Build: " 
010a					include "romtimestamp.asm" 
010a ..			db '2025-09-05 21:49' 
# End of file romtimestamp.asm
011a 00				   db 0 
011b .. 32 00		debuglevel: db   "DL",DEBUG_LEVEL, 0 
011f			 
011f			 
011f			 
011f			;        nop  
011f			;        nop 
011f			;;	org 05h		; null out bdos call 
011f			; 
011f			;        nop  
011f			;        nop  
011f			;        nop 
011f			;;	org 08h 
011f			;;; 
011f			;;	jp cin		; rst 8 - char in 
011f			;;; 
011f			; 
011f			;        nop 
011f			;        nop 
011f			;        nop 
011f			;        nop 
011f			;        nop 
011f			;        nop 
011f			;        nop 
011f			;        nop 
011f			;	org 010h 
011f			;; 
011f			;	jp cout		; rest 010h  - char out 
011f			;; 
011f			;	org 01bh   
011f			; 
011f			;	;jp  		; rst 01bh   - write string to display 
011f			;	jp str_at_display 
011f			; 
011f			; 
011f			;	org 020h 
011f			; 
011f			;	; jp		 ; rst 020h - read char at screen location 
011f			; 
011f			;	org 028h 
011f			 
011f				; jp		 ; rst 028h  - storage i/o 
011f			 
011f			; 	org 030h 
011f			;	jp break_point_state 
011f			  
011f			; $30  
011f			; org 038h 
011f			; $38 
011f			 
011f			; TODO any more important entry points to add to jump table for easier coding use? 
011f			 
011f			if BASE_KEV = 1  
011f			 
011f				; need to be at $66 for nmi support 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255,0,255,0,255 
011f				db 0,255 
011f				jp nmi 
011f			endif 
011f			 
011f			include "firmware.asm" 
011f			  
011f			; main constants (used here and in firmware)  
011f			  
011f			; TODO have page 0 of storage as bios  
011f			  
011f			Device_A: equ 0h  
011f			Device_B: equ 040h          ; Sound  
011f			  
011f			if BASE_KEV  
011f			Device_C: equ 080h          ; Storage and ext cart devices  
011f			endif  
011f			  
011f			if BASE_SC114  
011f			Device_C: equ  SC103_PIO          ; Storage and ext cart devices  
011f			endif  
011f			  
011f			if BASE_CPM  
011f			; TODO fixup for CPM  
011f			Device_C: equ 080h          ; Storage and ext cart devices  
011f			endif  
011f			  
011f			Device_D: equ 0c0h             ; Keyboard and LCD  
011f			  
011f			; Odd specific debug points for testing hardware dev  
011f			  
011f			;if DEBUG_LEVEL0  
011f			;	include "debug_level0.asm"  
011f			;endif  
011f			;if DEBUG_LEVEL1  
011f			;	include "debug_level1.asm"  
011f			;endif  
011f			;if DEBUG_LEVEL2  
011f			;	include "debug_level2.asm"  
011f			;endif  
011f			  
011f			  
011f			CALLMONITOR: macro  
011f			;	call break_point_state  
011f			; now use the break point debug vector  
011f				call debug_vector  
011f				endm  
011f			  
011f			MALLOC_1: equ 1        ; from dk88   
011f			MALLOC_2: equ 0           ; broke  
011f			MALLOC_3: equ 0           ; really broke  
011f			MALLOC_4: equ 0              ; mine pretty basic reuse and max of 250 chars  
011f			  
011f			if BASE_KEV   
011f			;stacksize: equ 256  
011f			; each stack entry is three bytes (type + word)  
011f			stacksize: equ 3*150  
011f			  
011f			STACK_RET_SIZE: equ 64  
011f			STACK_LOOP_SIZE: equ 128  
011f			STACK_DATA_SIZE: equ 512  
011f			endif  
011f			if BASE_SC114  
011f			;tos:	equ 0f000h  
011f			stacksize: equ 256  
011f			STACK_RET_SIZE: equ 64  
011f			STACK_LOOP_SIZE: equ 128  
011f			STACK_DATA_SIZE: equ 256  
011f			endif  
011f			  
011f			if BASE_CPM  
011f			;tos:	equ 0f000h  
011f			stacksize: equ 256  
011f			STACK_RET_SIZE: equ 64  
011f			STACK_LOOP_SIZE: equ 128  
011f			STACK_DATA_SIZE: equ 256  
011f			endif  
011f			  
011f			;if STORAGE_SE == 0  
011f			STORE_BLOCK_PHY:   equ 64    ; physical block size on storage   64byte on 256k eeprom  
011f			STORE_DEVICE_MAXBLOCKS:  equ  255*2 ; how many blocks are there on this storage device  
011f			;endif  
011f			  
011f			; Block 0 at offset $3b is a flag to decide to offer auto start up - 0 = prompt 1-auto run no prompt 2 - dont run  
011f			  
011f			STORE_0_AUTORUN: equ $20  
011f			  
011f			; Block 0 at offset $20+ holds the file number to run at system startup after the display  
011f			  
011f			STORE_0_AUTOFILE: equ $21  
011f			STORE_0_BANKRUN: equ $23  
011f			STORE_0_FILERUN: equ $24  
011f			  
011f			; Block 0 offsets for settings  
011f			  
011f			; if set then skip prompt for start up and accept all  
011f			  
011f			STORE_0_QUICKSTART: equ $25  
011f			  
011f			; Blocks where directory table is held  
011f			  
011f			; Reducing the number of entries increases the max file size  
011f			  
011f			;STORE_DIR_START: equ 1  
011f			;STORE_DIR_END: equ 33  
011f			  
011f			; Blocks from where file data is stored  
011f			  
011f			;STORE_DATA_START: equ STORE_DIR_END + 1  
011f			  
011f			; Block indicators (<32 are data files)  
011f			  
011f			;STORE_BLOCK_CFG: equ $8f       ; config block  
011f			;STORE_BLOCK_DIRF: equ $8e       ; directory block free  
011f			;STORE_BLOCK_DIRU: equ $8d       ; directory block free  
011f			;STORE_BLOCK_FREE: equ $85       ; data block free  
011f			;STORE_BLOCK_AUTO: equ $89       ; auto start code  
011f			  
011f			  
011f			  
011f			; Directory entry flags  
011f			  
011f			;STORE_DIR_FREE: equ 0  
011f			;STORE_DIR_FILE:  equ 1  
011f			  
011f			; Structure offsets to directory entries  
011f			;STORE_DE_FLAG: equ 0  
011f			;STORE_DE_MAXEXT: equ 1  
011f			;STORE_DE_FILENAME: equ 2  
011f			  
011f			; Structure offsets to block 0  
011f			  
011f			;STORE_BK0_ISFOR: equ 1  
011f			;STORE_BK0_LABEL: equ 3  
011f			  
011f			; memory allocation   
011f			  
011f			chk_stund: equ tos+2           ; underflow check word  
011f			chk_stovr: equ chk_stund-stacksize -2; overflow check word  
011f			  
011f			; keyscan table needs rows x cols buffer  
011f			;key_rows: equ 5     ; TODO move out to mini and maxi + 1 null  
011f			;key_cols: equ 10    ; TODO move out to mini and maxi + 1 null  
011f			  
011f			keyscan_table_row1: equ chk_stovr -key_cols-1  
011f			keyscan_table_row2: equ keyscan_table_row1-key_cols-1  
011f			keyscan_table_row3: equ keyscan_table_row2-key_cols-1  
011f			keyscan_table_row4: equ keyscan_table_row3-key_cols-1  
011f			keyscan_table_row5: equ keyscan_table_row4-key_cols-1  
011f			keyscan_table: equ keyscan_table_row5-(key_cols*key_rows)-1  
011f			keyscan_scancol: equ keyscan_table-key_cols  
011f			;keyscan_table_len: equ key_rows*key_cols  
011f			;keybufptr: equ keyscan_table - 2  
011f			;keysymbol: equ keybufptr - 1  
011f			key_held: equ keyscan_scancol-1	; currently held  
011f			key_held_prev: equ key_held - 1   ; previously held (to detect bounce and cycle of key if required)  
011f			key_repeat_ct: equ key_held_prev - 4 ; timers (two words)  
011f			key_fa: equ key_repeat_ct -1 ;  
011f			key_fb: equ key_fa -1 ;  
011f			key_fc: equ key_fb -1 ;  
011f			key_fd: equ key_fc -1 ;  
011f			key_face_held: equ key_fd - 1   
011f			; flag for enabling/disabling various hardware diag loading via block 0 on bank 1  
011f			  
011f			hardware_config: equ key_face_held - 10  
011f			  
011f			; hardware config switches  
011f			; TODO add bitmasks on includes for hardware  
011f			; high byte for expansion ids  
011f			;     0000 0000  no card inserted  
011f			;     0000 0001  storage card inserted  
011f			;     0000 0010  spi sd card active  
011f			  
011f			;       
011f			; low byte:  
011f			;     0000 0001   4x4 keypad  
011f			;     0000 0010   full keyboard  
011f			;     0000 0011   spi/ext keyboard  
011f			;     0000 0100   20x4 lcd  
011f			;     0000 1000   40x4 lcd  
011f			;     0000 1100   spi/ext display  
011f			;     0001 0000   ide interface available  
011f			  
011f			hardware_word: equ hardware_config - 2  
011f			  
011f			; debug marker - optional display of debug point on the debug screens  
011f			  
011f			nmi_vector:  equ hardware_word - 3   ; vector to the nmi handler  
011f			debug_vector:  equ nmi_vector - 3   ; vector to the debug handler  
011f			  
011f			debug_umark: equ debug_vector - 6  ; current user mark  
011f			debug_mark: equ debug_umark - 4    ; internal word debug points  
011f			  
011f			; input_str vars  
011f			input_ptr:  equ debug_mark - 2    ; ptr to the current cursor position of string currently being edited  on entry starting   
011f			input_start:  equ input_ptr - 2    ; ptr to the start of string   
011f			input_size: equ input_start -1  ; number of chars  
011f			input_display_size: equ input_size -1  ; TODO number of chars that are displayable. if < input_size then scroll   
011f			input_at_pos: equ input_display_size - 1 ; frame buffer offset for start of input  
011f			input_under_cursor: equ input_at_pos - 1 ; char under the cursor so we can blink it  
011f			input_at_cursor: equ input_under_cursor - 1 ; offset of cursor to current start of string  
011f			input_cur_flash: equ input_at_cursor - 2 ;  timeout for cursor flash  
011f			input_cur_onoff: equ input_cur_flash - 1 ;  cursor blink on or off  
011f			input_len: equ input_cur_onoff - 5 ; length of current input  
011f			input_cursor: equ input_len - 5 ; offset of cursor to current start of string  
011f			  
011f			; cursor blink rate  
011f			CUR_BLINK_RATE: equ $09  
011f			;CUR_BLINK_RATE: equ 15  
011f			  
011f			key_actual_pressed: equ input_cursor - 1   
011f			key_symbol: equ key_actual_pressed - 1   
011f			key_shift: equ key_symbol - 1   
011f			  
011f			; Display allocation  
011f			  
011f			;display_rows: equ 4     ; move out to mini and mega files  
011f			;display_cols: equ 20  
011f			  
011f			display_fb_len: equ display_rows*display_cols  
011f			  
011f			; primary frame buffer     
011f			display_fb0: equ  key_shift-display_fb_len -1 ; -display_fb_len-1          ; cli input     TODO why is that doubling up?  
011f			; working frame buffers  
011f			display_fb1: equ  display_fb0-display_fb_len -1 ; -display_fb_len-1          ; default running program  
011f			display_fb3: equ  display_fb1-display_fb_len - 1  
011f			display_fb2: equ  display_fb3-display_fb_len - 1  
011f			;  
011f			; pointer to active frame buffer  
011f			display_fb_active: equ display_fb2 - 2  
011f			display_lcde1e2: equ display_fb_active - 1         ; 0=e1, 1=e2   For E1/E2 selection when using the lcd 4x40 display  
011f			display_write_tmp: equ display_lcde1e2 - 2  
011f			display_active:  equ display_write_tmp-3   ; current state of activity char (plus room to write string)  
011f			  
011f			;  
011f			  
011f			;; can load into de directory  
011f			cursor_col: equ display_active-1  
011f			cursor_row: equ cursor_col-1  
011f			cursor_ptr: equ cursor_row - 1     ;  actual offset into lcd memory for row and col combo  
011f			cursor_shape: equ cursor_ptr - 2   ; char used for the current cursor   
011f			  
011f			; maths vars  
011f			  
011f			LFSRSeed: equ cursor_shape -20   
011f			randData: equ LFSRSeed - 2  
011f			xrandc: equ randData - 2  
011f			stackstore: equ xrandc - 2  
011f			seed1: equ  stackstore -2   
011f			seed2: equ seed1 - 2  
011f			  
011f			; cf storage vars  
011f			  
011f			iErrorNum:  equ seed2-1         ;Error number  
011f			iErrorReg:  equ iErrorNum -1              ;Error register  
011f			iErrorVer:  equ iErrorReg - 1              ;Verify error flag  
011f			  
011f			store_bank_active: equ iErrorVer - (5 + 8 ) 		; TODO not used.  indicator of which storage banks are available to use 5 on board and 8 in cart  
011f			  
011f			STORE_BLOCK_LOG:  equ   280      ; TODO remove.... Logical block size     
011f			  
011f			store_page: equ store_bank_active-STORE_BLOCK_LOG-1            ; bigger than page size for eeprom so we can join multiple blocks if they are continuation records  
011f			;?????store_ffpage: equ store_page-STORE_BLOCK_LOG            ; page size for eeprom?????  
011f			store_readptr: equ store_page-2       ; tracks the file extent during storage_read of continuation blocks  
011f			store_readbuf: equ store_readptr-2       ; tracks the position for the buffer during storage_read of continuation blocks  
011f			store_longread: equ store_readbuf -1 ;   if zero then only read one block. If not zero then do a read for as long as required  
011f			store_tmp1: equ store_longread - 2      ; temp pointer holders during ops  
011f			store_tmp2: equ store_tmp1 - 2        ; temp pointer holders during ops  
011f			store_tmp3: equ store_tmp2 - 2        ; temp pointer holders during ops  
011f			store_tmpid: equ store_tmp3 - 1		; page temp id  
011f			store_tmpext: equ store_tmpid - 1		; file extent temp  
011f			store_readcont: equ store_tmpid - 1		; If current read results in an overflow buffer to next record flag it up  
011f			store_openaddr: equ store_readcont - 2		; file block address of current opened file for read  
011f			store_openext: equ store_openaddr - 1		; file extent of current opened file for read  
011f			store_openmaxext: equ store_openext - 1		; max extent of current opened file for read  
011f			store_filecache: equ store_openmaxext-2   ;  TODO (using just one for now)  file id + extent count cache * 5  
011f			store_tmppageid: equ store_filecache-2    ; phyical page id temp  
011f			;  
011f			; spi vars  
011f			  
011f			  
011f			spi_clktime: equ store_tmppageid - 1      ; holds the number of ms that happens between spi clock pulses  
011f			spi_cartdev: equ spi_clktime - 1      ; holds bit mask to send to portb (ext spi) devices  
011f			spi_cartdev2: equ spi_cartdev - 1      ; holds bit mask to send to portb's shift reg devices  
011f			spi_portbyte: equ spi_cartdev2 - 1      ; holds bit mask to send to spi bus   
011f			spi_device: equ spi_portbyte - 1    ; bit mask to send to porta (eeproms) devices  
011f			spi_device_id: equ spi_device - 1    ; human readable bank number  
011f			  
011f			;;;;; forth cli params  
011f			  
011f			; TODO use a different frame buffer for forth???  
011f			  
011f			f_cursor_ptr:  equ spi_device_id - 1  ; offset into frame buffer for any . or EMIT output  
011f			cli_buffer: equ f_cursor_ptr - 20     ; temp hold - maybe not needed  
011f			cli_origtoken: equ cli_buffer - 2     ; pointer to the text of token for this word being checked  
011f			cli_token: equ cli_origtoken - 2     ; pointer to the text of token for this word being checked  
011f			cli_execword: equ cli_token - 2      ; pointer to start of code for this word  
011f			cli_nextword: equ cli_execword - 2      ; pointer to start of next word in dict  
011f			cli_ptr: equ cli_nextword - 2           ; pointer to start of word to parse by forth kernel (working)  
011f			cli_origptr: equ cli_ptr - 2           ; pointer to start of word to parse which resets cli_ptr on each word test  
011f			  
011f			cli_mvdot: equ cli_origptr - 1 ;     ; true will move the cursor once something is displayed  
011f			cli_autodisplay: equ cli_mvdot - 1 ;     ; true will auto update the display (slow) otherwise need to use DRAW  
011f			cli_var_array: equ cli_autodisplay - ( 10 * 2 ) ; word or string pointer variables using V@0-V@9  
011f			cli_var_array2: equ cli_var_array - ( 26 * 2 ) ; word or string pointer variables using VAR word  
011f			cli_ret_sp: equ cli_var_array2 - 2    ; ret stack pointer  
011f			cli_loop_sp: equ cli_ret_sp - 2   ; data stack pointer  
011f			cli_data_sp: equ cli_loop_sp - 2   ; data stack pointer  
011f			  
011f			chk_ret_und: equ cli_data_sp-2           ; underflow check word  
011f			cli_ret_stack: equ chk_ret_und - STACK_RET_SIZE      ; TODO could I just use normal stack for this? - use linked list for looping  
011f			chk_ret_ovr: equ cli_ret_stack -2; overflow check word  
011f			cli_loop_stack: equ chk_ret_ovr - STACK_LOOP_SIZE      ; TODO could I just use normal stack for this? - use linked list for looping  
011f			chk_loop_ovr: equ cli_loop_stack -2; overflow check word  
011f			cli_data_stack: equ chk_loop_ovr - STACK_DATA_SIZE		 ;   
011f			chk_data_ovr: equ cli_data_stack -2; overflow check word  
011f			  
011f			os_var_array: equ chk_data_ovr - (32 * 2)      ;   32 word array for use using the SCRATCH word  
011f			  
011f			; os/forth token vars  
011f			  
011f			os_last_cmd: equ os_var_array-255  
011f			os_cli_cmd: equ os_last_cmd-255              ; cli command entry line  
011f			os_current_i: equ os_cli_cmd-2  
011f			os_cur_ptr: equ os_current_i-2  
011f			os_word_scratch: equ os_cur_ptr-30  
011f			os_tok_len: equ os_word_scratch - 2  
011f			os_tok_ptr: equ os_tok_len - 2               ; our current PC ptr  
011f			os_tok_malloc: equ os_tok_ptr - 2  
011f			os_last_new_uword: equ os_tok_malloc - 2    ; hold start of last user word added  
011f			os_input: equ os_last_new_uword-255    ; buffer for EDIT word  
011f			execscratch: equ os_input-255        ; exec cmd eval buffer  
011f			scratch: equ execscratch-255  
011f			  
011f			os_stack_1: equ scratch - 3       ; stack holding area 1  
011f			os_stack_2: equ os_stack_1 - 3       ; stack holding area 2  
011f			os_stack_3: equ os_stack_2 - 3       ; stack holding area 3  
011f			os_stack_4: equ os_stack_3 - 3       ; stack holding area 4  
011f			  
011f			  
011f			; temp locations for new word processing to save on adding more   
011f			  
011f			os_new_malloc: equ os_stack_4-2  
011f			os_new_parse_len: equ os_new_malloc - 2  
011f			os_new_word_len: equ os_new_parse_len - 2  
011f			os_new_work_ptr: equ os_new_word_len - 2  
011f			os_new_src_ptr: equ os_new_work_ptr - 2  
011f			os_new_exec: equ os_new_src_ptr - 2  
011f			os_new_exec_ptr: equ os_new_exec - 2  
011f			  
011f			; resume memory alloocations....  
011f			  
011f			;os_view_disable: equ os_new_exec_ptr - 1  
011f			os_view_af: equ os_new_exec_ptr - 2  
011f			os_view_hl: equ os_view_af -2  
011f			os_view_de: equ os_view_hl - 2  
011f			os_view_bc: equ os_view_de - 2  
011f			  
011f			; stack checksum word  
011f			if DEBUG_STACK_IMB  
011f				curframe: equ  os_view_de - 5  
011f				store_sp: equ curframe - (STACK_IMB_STORE*4)  
011f				chk_word: equ store_sp - 2		 ; this is the word to init and then check against to detect stack corruption. Held far away from all stacks  
011f			else  
011f				chk_word: equ os_view_bc - 2		 ; this is the word to init and then check against to detect stack corruption. Held far away from all stacks  
011f			endif  
011f			  
011f			; with data stack could see memory filled with junk. need some memory management   
011f			; malloc and free entry points added  
011f			  
011f			;free_list:  equ chk_word - 4     ; Block struct for start of free list (MUST be 4 bytes)  
011f			;heap_size: equ  (free_list-08100h)      ; Number of bytes available in heap   TODO make all of user ram  
011f			;;heap_start: equ free_list - heap_size  ; Starting address of heap  
011f			;heap_end: equ free_list-1  ; Starting address of heap  
011f			;heap_start: equ free_list - heap_size  ; Starting address of heap  
011f			  
011f			;heap_start: equ free_list - heap_size  ; Starting address of heap  
011f			heap_end: equ chk_word-1  ; Starting address of heap  
011f			  
011f			  
011f			;if BASE_KEV   
011f			;heap_start: equ 0800eh  ; Starting address of heap  
011f			;free_list:  equ 0800ah      ; Block struct for start of free list (MUST be 4 bytes)  
011f			;heap_size: equ  heap_end-heap_start      ; Number of bytes available in heap   TODO make all of user ram  
011f			;endif  
011f			  
011f			;if BASE_SC114  
011f			;heap_start: equ baseram+15  ; Starting address of heap  
011f			;free_list:  equ baseram+10      ; Block struct for start of free list (MUST be 4 bytes)  
011f			;endif  
011f			  
011f			  
011f			;;;;  
011f			  
011f			  
011f			; change below to point to last memory alloc above  
011f			topusermem:  equ   heap_start  
011f			  
011f			;if BASE_KEV   
011f			;baseusermem: equ 08000h  
011f			;endif  
011f			  
011f			;if BASE_SC114  
011f			;;aseusermem:     equ    12  
011f			;baseusermem:     equ    prompt  
011f			;;baseusermem:     equ    endofcode  
011f			;endif  
011f			  
011f			  
011f			; **********************************************************************  
011f			; **  Constants  
011f			; **********************************************************************  
011f			  
011f			; Constants used by this code module  
011f			kDataReg:   EQU Device_D           ;PIO port A data register  
011f			kContReg:   EQU Device_D+2           ;PIO port A control register  
011f			  
011f			  
011f			portbdata:  equ Device_D+1    ; port b data  
011f			portbctl:   equ Device_D+3    ; port b control  
011f			  
011f			  
011f			;KEY_SHIFT:   equ 5  
011f			;KEY_SYMBOLSHIFT:  equ 6  
011f			  
011f			KEY_SHIFTLOCK: equ 4  
011f			  
011f			  
011f			KEY_UP: equ 5  
011f			KEY_NEXTWORD: equ 6  
011f			KEY_PREVWORD: equ 7  
011f			KEY_BS: equ 8  
011f			KEY_TAB:  equ 9  
011f			KEY_DOWN: equ 10  
011f			KEY_LEFT: equ 11  
011f			KEY_RIGHT: equ 12  
011f			KEY_CR:   equ 13  
011f			KEY_HOME: equ 14  
011f			KEY_END: equ 15  
011f			  
011f			KEY_F1: equ 16  
011f			KEY_F2: equ 17  
011f			KEY_F3: equ 18  
011f			KEY_F4: equ 19  
011f			  
011f			KEY_F5: equ 20  
011f			KEY_F6: equ 21  
011f			KEY_F7: equ 22  
011f			KEY_F8: equ 23  
011f			  
011f			KEY_F9: equ 24  
011f			KEY_F10: equ 25  
011f			KEY_F11: equ 26  
011f			KEY_F12: equ 27  
011f			  
011f			;if DEBUG_KEY  
011f			;	KEY_MATRIX_NO_PRESS: equ '.'  
011f			;	KEY_SHIFT:   equ '.'  
011f			;	KEY_SYMBOLSHIFT:  equ '.'  
011f			;else  
011f				KEY_SHIFT:   equ '~'  
011f				KEY_SYMBOLSHIFT:  equ '~'  
011f				KEY_MATRIX_NO_PRESS: equ '~'  
011f			;endi  
011f			  
011f			  
011f			  
011f			  
011f			; Macro to make adding debug marks easier  
011f			  
011f			DMARK: macro str  
011f				push af  
011f				ld a, (.dmark)  
011f				ld (debug_mark),a  
011f				ld a, (.dmark+1)  
011f				ld (debug_mark+1),a  
011f				ld a, (.dmark+2)  
011f				ld (debug_mark+2),a  
011f				jr .pastdmark  
011f			.dmark: db str  
011f			.pastdmark: pop af  
011f			  
011f			endm  
011f			  
011f			  
011f			; macro to detect for stack imbalances  
011f			  
011f			include "stackimbal.asm"  
011f			; Macro and code to detect stock imbalances 
011f			 
011f			SPPUSH: equ 0 
011f			 
011f			; Add a stack frame which can be checked before return 
011f			 
011f			STACKFRAME: macro onoff frame1 frame2 
011f			 
011f				if DEBUG_STACK_IMB 
011f					if onoff 
011f						; save current SP 
011f						exx 
011f			 
011f						ld de, frame1 
011f						ld a, d 
011f						ld hl, curframe 
011f						call hexout 
011f						ld a, e 
011f						ld hl, curframe+2 
011f						call hexout 
011f			  
011f						ld hl, frame1 
011f						push hl 
011f						ld hl, frame2 
011f						push hl 
011f						exx 
011f					endif 
011f					 
011f				endif 
011f			endm 
011f			 
011f			STACKFRAMECHK: macro onoff frame1 frame2 
011f			 
011f					 
011f				if DEBUG_STACK_IMB 
011f					if onoff 
011f						exx 
011f						; check stack frame SP 
011f			 
011f						ld hl, frame2 
011f						pop de   ; frame2 
011f			 
011f						call cmp16 
011f						jr nz, .spnosame 
011f						 
011f			 
011f						ld hl, frame1 
011f						pop de   ; frame1 
011f			 
011f						call cmp16 
011f						jr z, .spfrsame 
011f			 
011f						.spnosame: call showsperror 
011f			 
011f						.spfrsame: nop 
011f			 
011f						exx 
011f					endif 
011f					 
011f				endif 
011f			 
011f			 
011f			endm 
011f			 
011f			 
011f			; for a sub routine, wrap SP collection and comparisons 
011f			 
011f			; Usage: 
011f			; 
011f			; SAVESP ON/OFF 0-STACK_IMB_STORE/4 
011f			; CHECKSP ON/OFF 0-STACK_IMB_STORE/4 
011f			 
011f			SAVESP: macro onoff storeword 
011f			 
011f				if DEBUG_STACK_IMB 
011f					if onoff 
011f						; save current SP 
011f			 
011f						ld (store_sp+(storeword*4)), sp 
011f			 
011f					endif 
011f					 
011f				endif 
011f			 
011f			endm 
011f			 
011f			CHECKSP: macro onoff storeword 
011f			 
011f				if DEBUG_STACK_IMB 
011f					if onoff 
011f			 
011f						; save SP after last save 
011f				 
011f						ld (store_sp+(storeword*4)+2), sp 
011f			 
011f						push hl 
011f						ld hl, store_sp+(storeword*4) 
011f						call check_stack_sp  
011f						pop hl 
011f			 
011f			 
011f					endif 
011f					 
011f				endif 
011f			 
011f			endm 
011f			 
011f			if DEBUG_STACK_IMB 
011f			 
011f			check_stack_sp: 
011f					push de 
011f			 
011f					ld e, (hl) 
011f					inc hl 
011f					ld d, (hl) 
011f					inc hl 
011f			 
011f					push de 
011f			 
011f			 
011f					ld e, (hl) 
011f					inc hl 
011f					ld d, (hl) 
011f					inc hl 
011f			 
011f					pop hl 
011f			 
011f			 
011f					; check to see if the same 
011f			 
011f					call cmp16 
011f					jr z, .spsame 
011f			 
011f					; not same 
011f			 
011f					call showsperror 
011f			.spsame: 
011f			 
011f					pop de 
011f			 
011f					ret 
011f			 
011f			.sperr:  db "Stack imbalance",0 
011f			 
011f			 
011f			showsperror: 
011f			 
011f			 
011f				push hl 
011f				push af 
011f				push de 
011f				call clear_display 
011f				ld de, .sperr 
011f				ld a,0 
011f			;	ld de,os_word_scratch 
011f				call str_at_display 
011f				ld a, display_row_1+17 
011f				ld de, debug_mark 
011f				call str_at_display 
011f				ld a, 0 
011f				ld (curframe+4),a 
011f				ld hl, curframe 
011f				ld de, os_word_scratch 
011f				ld a, display_row_4 
011f				call str_at_display 
011f				call update_display 
011f				;call break_point_state 
011f				call cin_wait 
011f			 
011f			;	ld a, ' ' 
011f			;	ld (os_view_disable), a 
011f				call bp_on 
011f				pop de	 
011f				pop af 
011f				pop hl 
011f				CALLMONITOR 
011f				ret 
011f			 
011f			endif 
011f			 
011f			 
011f			 
011f			; eof 
# End of file stackimbal.asm
011f			  
011f			;TODO macro to calc col and row offset into screen  
011f			  
011f			  
011f			  
011f			hardware_init:  
011f			  
011f				  
011f			  
011f					;ld a, 0  
011f					;ld (hardware_diag), a  
011f			  
011f					; clear all the buffers  
011f			  
011f 21 0a ed				ld hl, display_fb1  
0122 22 c6 eb				ld (display_fb_active), hl  
0125			  
0125 cd c8 0b				call clear_display  
0128			  
0128 21 c8 eb				ld hl, display_fb2  
012b 22 c6 eb				ld (display_fb_active), hl  
012e			  
012e cd c8 0b				call clear_display  
0131			  
0131					; init primary frame buffer area  
0131 21 ab ed				ld hl, display_fb0  
0134 22 c6 eb				ld (display_fb_active), hl  
0137			  
0137 cd c8 0b				call clear_display  
013a			  
013a			  
013a cd af 60				call lcd_init		; lcd hardware first as some screen functions called during key_init e.g. cursor shapes  
013d			  
013d cd 9d 61			call key_init  
0140 cd ad 01			call storage_init  
0143			  
0143				; setup malloc functions  
0143			  
0143				if MALLOC_1  
0143 cd ac 11				call  heap_init  
0146				endif  
0146				if MALLOC_4  
0146					call  heap_init  
0146				endif  
0146			  
0146				; init sound hardware if present  
0146			  
0146				if SOUND_ENABLE  
0146					call sound_init  
0146				endif  
0146			  
0146				; lcd test sequence  
0146					  
0146 cd eb 0b			call update_display  
0149 cd 00 0b			call delay1s  
014c 3e 2b			ld a,'+'  
014e cd cd 0b			call fill_display  
0151 cd eb 0b			call update_display  
0154 cd 00 0b			call delay1s  
0157 3e 2a			ld a,'*'  
0159 cd cd 0b			call fill_display  
015c cd eb 0b			call update_display  
015f cd 00 0b			call delay1s  
0162 3e 2d			ld a,'-'  
0164 cd cd 0b			call fill_display  
0167 cd eb 0b			call update_display  
016a cd 00 0b			call delay1s  
016d			  
016d			; boot splash screen  
016d			if display_cols == 20	  
016d			        ld a, display_row_1    
016d			else  
016d 3e 0a		        ld a, display_row_1 +10   
016f			endif  
016f 11 da 16			ld de, prom_bootmsg  
0172 cd db 0b			call str_at_display  
0175 cd eb 0b			call update_display  
0178			  
0178			  
0178 cd 00 0b			call delay1s  
017b cd 00 0b			call delay1s  
017e			if display_cols == 20	  
017e			            LD   A, display_row_3+2  
017e			else  
017e 3e 5c		            LD   A, display_row_3+12  
0180			endif  
0180 11 ef 16			ld de, prom_bootmsg1  
0183 cd db 0b			call str_at_display  
0186			; display debug level  
0186 3e 78		            LD   A, display_row_4  
0188 11 1b 01			ld de, debuglevel  
018b cd db 0b			call str_at_display  
018e			  
018e cd eb 0b			call update_display  
0191 cd 00 0b			call delay1s  
0194 cd 00 0b			call delay1s  
0197			  
0197			;	ld a, display_row_4+3  
0197			;	ld de, bootmsg2  
0197			;	call str_at_display  
0197			;	call update_display  
0197			;	call delay1s  
0197			;	call delay1s  
0197			  
0197			; debug mark setup  
0197			  
0197 3e 5f		ld a, '_'  
0199 32 65 ee		ld (debug_mark),a  
019c 32 66 ee		ld (debug_mark+1),a  
019f 32 67 ee		ld (debug_mark+2),a  
01a2 3e 00		ld a,0  
01a4 32 68 ee		ld (debug_mark+3),a  
01a7 32 69 ee		ld (debug_umark),a  
01aa			  
01aa c9					ret  
01ab			  
01ab			  
01ab			;bootmsg2:	db "Firmware v0.1",0  
01ab			  
01ab			; a 4x20 lcd  
01ab			; cout for display, low level positioning and writing functions (TODO) for hardware abstraction  
01ab			  
01ab			;if display_cols == 20  
01ab			;	include "firmware_lcd_4x20.asm"  
01ab			;endif  
01ab			  
01ab			;if display_cols == 40  
01ab			;	include "firmware_lcd_4x40.asm"  
01ab			;endif  
01ab			  
01ab			;  
01ab			; TODO use the low spare two pins on port a of display pio to bit bang a serial out video display to an esp  
01ab			; TODO abstract the bit bang video out interface for dual display  
01ab			; TODO wire video out to tx pin on rc2014 bus  
01ab			  
01ab			; must supply cin, and cin_wait for low level hardware abstraction   
01ab			; moved text_input entry points to here and leave the firmware hardware modules as abstraction layer  
01ab			; test scancode  
01ab			  
01ab			;;;;;  
01ab			;;;  
01ab			; Moved out to mini and maxi versions  
01ab			;  
01ab			; include "firmware_key_4x4.asm"  
01ab			; using existing 4 wire x 4 resistor array for input  
01ab			;include "firmware_key_4x10.asm"  
01ab			; need to mod the board for 5 rows due to resistor array  
01ab			;include "firmware_key_5x10.asm"  
01ab			  
01ab			; storage hardware interface  
01ab			  
01ab			; use microchip serial eeprom for storage  
01ab			  
01ab			  
01ab			if STORAGE_SE  
01ab				include "firmware_spi.asm"  
01ab				include "firmware_seeprom.asm"  
01ab			else  
01ab			   ; create some stubs for the labels  
01ab c9			se_readbyte: ret  
01ac c9			se_writebyte: ret  
01ad c9			storage_init: ret  
01ae			  
01ae			endif  
01ae			  
01ae			; use cf card for storage - throwing timeout errors. Hardware or software?????  
01ae			;include "firmware_cf.asm"  
01ae			  
01ae			; load up high level storage hardward abstractions  
01ae			include "firmware_storage.asm"  
01ae			 
01ae			; persisent storage hardware abstraction layer  
01ae			 
01ae			 
01ae			 
01ae			; Block 0 on storage is a config state 
01ae			 
01ae			 
01ae			 
01ae			; TODO add read phy block and write phy block functions 
01ae			; TODO add presence check (i.e. read write byte 0 of block 0 for eeprom) 
01ae			 
01ae			; Abstraction layer  
01ae			 
01ae			; Logocial block size is same size as physical size - using tape concept 
01ae			 
01ae			;STORE_BLOCK_PHY2LOG: equ (STORE_BLOCK_LOG/STORE_BLOCK_PHY)       ; How many physical blocks make up a logical block 
01ae			;STORE_BLOCK_MAX: equ (STORE_BLOCK_PHY*STORE_DEVICE_MAXBLOCKS)/255    ; Max number of logical blocks on the device 
01ae			 
01ae			 
01ae			 
01ae			; Filesystem layout (Logical layout) 
01ae			; 
01ae			; Block 0 - Bank config  
01ae			; 
01ae			;      Byte - 0 file id counter 
01ae			;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
01ae			;      Byte - 3-20 zero terminated bank label 
01ae			; 
01ae			; Block 1 > File storage 
01ae			; 
01ae			;      Byte 0 file id    - block 0 file details 
01ae			;      Byte 1 block id - block 0 is file  
01ae			;            Byte 2-15 - File name 
01ae			; 
01ae			;       - to end of block data 
01ae			; 
01ae			 
01ae			; Get ID for the file named in pointer held HL 
01ae			; Returns ID in HL = 255 if no file found 
01ae			 
01ae			storage_getid: 
01ae			 
01ae 22 6d ea			ld (store_tmp1), hl 
01b1			 
01b1				if DEBUG_STORESE 
01b1					DMARK "SGI" 
01b1 f5				push af  
01b2 3a c6 01			ld a, (.dmark)  
01b5 32 65 ee			ld (debug_mark),a  
01b8 3a c7 01			ld a, (.dmark+1)  
01bb 32 66 ee			ld (debug_mark+1),a  
01be 3a c8 01			ld a, (.dmark+2)  
01c1 32 67 ee			ld (debug_mark+2),a  
01c4 18 03			jr .pastdmark  
01c6 ..			.dmark: db "SGI"  
01c9 f1			.pastdmark: pop af  
01ca			endm  
# End of macro DMARK
01ca					CALLMONITOR 
01ca cd 6f ee			call debug_vector  
01cd				endm  
# End of macro CALLMONITOR
01cd				endif 
01cd				; get block 0 and set counter for number of files to scan 
01cd			 
01cd cd 38 03			call storage_get_block_0 
01d0			 
01d0 3a 74 ea			ld a, (store_page) 
01d3 47				ld b, a 
01d4			 
01d4				; get extent 0 of each file id 
01d4			 
01d4				if DEBUG_STORESE 
01d4					DMARK "SGc" 
01d4 f5				push af  
01d5 3a e9 01			ld a, (.dmark)  
01d8 32 65 ee			ld (debug_mark),a  
01db 3a ea 01			ld a, (.dmark+1)  
01de 32 66 ee			ld (debug_mark+1),a  
01e1 3a eb 01			ld a, (.dmark+2)  
01e4 32 67 ee			ld (debug_mark+2),a  
01e7 18 03			jr .pastdmark  
01e9 ..			.dmark: db "SGc"  
01ec f1			.pastdmark: pop af  
01ed			endm  
# End of macro DMARK
01ed					CALLMONITOR 
01ed cd 6f ee			call debug_vector  
01f0				endm  
# End of macro CALLMONITOR
01f0				endif 
01f0 60			.getloop:	ld h, b 
01f1 2e 00				ld l, 0 
01f3 c5					push bc 
01f4			 
01f4 11 74 ea				ld de, store_page 
01f7				if DEBUG_STORESE 
01f7					DMARK "SGr" 
01f7 f5				push af  
01f8 3a 0c 02			ld a, (.dmark)  
01fb 32 65 ee			ld (debug_mark),a  
01fe 3a 0d 02			ld a, (.dmark+1)  
0201 32 66 ee			ld (debug_mark+1),a  
0204 3a 0e 02			ld a, (.dmark+2)  
0207 32 67 ee			ld (debug_mark+2),a  
020a 18 03			jr .pastdmark  
020c ..			.dmark: db "SGr"  
020f f1			.pastdmark: pop af  
0210			endm  
# End of macro DMARK
0210					CALLMONITOR 
0210 cd 6f ee			call debug_vector  
0213				endm  
# End of macro CALLMONITOR
0213				endif 
0213 cd e0 07				call storage_read 
0216 cd 1e 0e				call ishlzero 
0219 28 2d				jr z, .gap 
021b					 
021b					; have a file name read. Is it one we want. 
021b			 
021b 2a 6d ea				ld hl, (store_tmp1) 
021e 11 77 ea				ld de, store_page+3   ; file name 
0221			 
0221				if DEBUG_STORESE 
0221					DMARK "SGc" 
0221 f5				push af  
0222 3a 36 02			ld a, (.dmark)  
0225 32 65 ee			ld (debug_mark),a  
0228 3a 37 02			ld a, (.dmark+1)  
022b 32 66 ee			ld (debug_mark+1),a  
022e 3a 38 02			ld a, (.dmark+2)  
0231 32 67 ee			ld (debug_mark+2),a  
0234 18 03			jr .pastdmark  
0236 ..			.dmark: db "SGc"  
0239 f1			.pastdmark: pop af  
023a			endm  
# End of macro DMARK
023a					CALLMONITOR 
023a cd 6f ee			call debug_vector  
023d				endm  
# End of macro CALLMONITOR
023d				endif 
023d cd 93 11				call strcmp 
0240 20 06				jr nz, .gap   ; not this one 
0242			 
0242 c1				        pop bc 
0243			 
0243 26 00				ld h, 0 
0245 68					ld l, b 
0246 18 22				jr .getdone 
0248						 
0248			 
0248			 
0248			 
0248			.gap: 
0248				if DEBUG_STORESE 
0248					DMARK "SGg" 
0248 f5				push af  
0249 3a 5d 02			ld a, (.dmark)  
024c 32 65 ee			ld (debug_mark),a  
024f 3a 5e 02			ld a, (.dmark+1)  
0252 32 66 ee			ld (debug_mark+1),a  
0255 3a 5f 02			ld a, (.dmark+2)  
0258 32 67 ee			ld (debug_mark+2),a  
025b 18 03			jr .pastdmark  
025d ..			.dmark: db "SGg"  
0260 f1			.pastdmark: pop af  
0261			endm  
# End of macro DMARK
0261					CALLMONITOR 
0261 cd 6f ee			call debug_vector  
0264				endm  
# End of macro CALLMONITOR
0264				endif 
0264			 
0264 c1					pop bc 
0265 10 89				djnz .getloop 
0267 21 ff 00				ld hl, 255 
026a			.getdone: 
026a			 
026a				if DEBUG_STORESE 
026a					DMARK "SGe" 
026a f5				push af  
026b 3a 7f 02			ld a, (.dmark)  
026e 32 65 ee			ld (debug_mark),a  
0271 3a 80 02			ld a, (.dmark+1)  
0274 32 66 ee			ld (debug_mark+1),a  
0277 3a 81 02			ld a, (.dmark+2)  
027a 32 67 ee			ld (debug_mark+2),a  
027d 18 03			jr .pastdmark  
027f ..			.dmark: db "SGe"  
0282 f1			.pastdmark: pop af  
0283			endm  
# End of macro DMARK
0283					CALLMONITOR 
0283 cd 6f ee			call debug_vector  
0286				endm  
# End of macro CALLMONITOR
0286				endif 
0286			 
0286 c9				ret 
0287			 
0287			 
0287			 
0287			 
0287			 
0287			 
0287			 
0287			 
0287			; Read Block 
0287			; ---------- 
0287			; 
0287			; With current bank 
0287			;  
0287			; Get block number to read 
0287			; Load physical blocks starting at start block into buffer 
0287			 
0287			; de points to buffer to use 
0287			; hl holds logical block number  
0287			 
0287			storage_read_block: 
0287			 
0287				; TODO bank selection 
0287			 
0287				; for each of the physical blocks read it into the buffer 
0287 06 40			ld b, STORE_BLOCK_PHY 
0289			 
0289				if DEBUG_STORESE 
0289 d5					push de 
028a				endif 
028a				 
028a			.rl1:    
028a			 
028a				; read physical block at hl into de 
028a			        ; increment hl and de to next read position on exit 
028a			 
028a e5				push hl 
028b d5				push de	 
028c c5				push bc 
028d			;	if DEBUG_STORESE 
028d			;		push af 
028d			;		ld a, 'R' 
028d			;		ld (debug_mark),a 
028d			;		pop af 
028d			;		CALLMONITOR 
028d			;	endif 
028d cd ab 01			call se_readbyte 
0290			;	if DEBUG_STORESE 
0290			;		ld a,(spi_portbyte) 
0290			;		ld l, a 
0290			;		push af 
0290			;		ld a, '1' 
0290			;		ld (debug_mark),a 
0290			;		pop af 
0290			;		CALLMONITOR 
0290			;	endif 
0290 c1				pop bc 
0291 d1				pop de 
0292 e1				pop hl 
0293 12				ld (de),a 
0294 23				inc hl 
0295 13				inc de 
0296			 
0296			;	if DEBUG_STORESE 
0296			;		push af 
0296			;		ld a, 'r' 
0296			;		ld (debug_mark),a 
0296			;		pop af 
0296			;		CALLMONITOR 
0296			;	endif 
0296			 
0296 10 f2			djnz .rl1 
0298			 
0298				if DEBUG_STORESE 
0298					DMARK "SRB" 
0298 f5				push af  
0299 3a ad 02			ld a, (.dmark)  
029c 32 65 ee			ld (debug_mark),a  
029f 3a ae 02			ld a, (.dmark+1)  
02a2 32 66 ee			ld (debug_mark+1),a  
02a5 3a af 02			ld a, (.dmark+2)  
02a8 32 67 ee			ld (debug_mark+2),a  
02ab 18 03			jr .pastdmark  
02ad ..			.dmark: db "SRB"  
02b0 f1			.pastdmark: pop af  
02b1			endm  
# End of macro DMARK
02b1 d1					pop de 
02b2			; 
02b2			;		push af 
02b2			;		ld a, 'R' 
02b2			;		ld (debug_mark),a 
02b2			;		pop af 
02b2					CALLMONITOR 
02b2 cd 6f ee			call debug_vector  
02b5				endm  
# End of macro CALLMONITOR
02b5				endif 
02b5 c9				ret	 
02b6				 
02b6			 
02b6			; File Size 
02b6			; --------- 
02b6			; 
02b6			;   hl file id 
02b6			; 
02b6			;  returns in hl the number of blocks 
02b6			 
02b6			storage_file_size: 
02b6 5d				ld e, l 
02b7 16 00			ld d, 0 
02b9 21 40 00			ld hl, STORE_BLOCK_PHY 
02bc					if DEBUG_FORTH_WORDS 
02bc						DMARK "SIZ" 
02bc f5				push af  
02bd 3a d1 02			ld a, (.dmark)  
02c0 32 65 ee			ld (debug_mark),a  
02c3 3a d2 02			ld a, (.dmark+1)  
02c6 32 66 ee			ld (debug_mark+1),a  
02c9 3a d3 02			ld a, (.dmark+2)  
02cc 32 67 ee			ld (debug_mark+2),a  
02cf 18 03			jr .pastdmark  
02d1 ..			.dmark: db "SIZ"  
02d4 f1			.pastdmark: pop af  
02d5			endm  
# End of macro DMARK
02d5						CALLMONITOR 
02d5 cd 6f ee			call debug_vector  
02d8				endm  
# End of macro CALLMONITOR
02d8					endif 
02d8 cd ba 05			call storage_findnextid 
02db			 
02db cd 1e 0e			call ishlzero 
02de			;	ld a, l 
02de			;	add h 
02de			;	cp 0 
02de c8				ret z			; block not found so EOF 
02df			 
02df 11 74 ea			ld de, store_page 
02e2 cd 87 02			call storage_read_block 
02e5			 
02e5 3a 76 ea			ld a, (store_page+2)	 ; get extent count 
02e8 6f				ld l, a 
02e9 26 00			ld h, 0 
02eb c9			 	ret 
02ec			 
02ec			 
02ec			; Write Block 
02ec			; ----------- 
02ec			; 
02ec			; With current bank 
02ec			;  
02ec			; Get block number to write 
02ec			; Write physical blocks starting at start block from buffer 
02ec			  
02ec			storage_write_block: 
02ec				; TODO bank selection 
02ec			 
02ec				; for each of the physical blocks read it into the buffer 
02ec 06 40			ld b, STORE_BLOCK_PHY 
02ee			 
02ee				if DEBUG_STORESE 
02ee					DMARK "SWB" 
02ee f5				push af  
02ef 3a 03 03			ld a, (.dmark)  
02f2 32 65 ee			ld (debug_mark),a  
02f5 3a 04 03			ld a, (.dmark+1)  
02f8 32 66 ee			ld (debug_mark+1),a  
02fb 3a 05 03			ld a, (.dmark+2)  
02fe 32 67 ee			ld (debug_mark+2),a  
0301 18 03			jr .pastdmark  
0303 ..			.dmark: db "SWB"  
0306 f1			.pastdmark: pop af  
0307			endm  
# End of macro DMARK
0307			 
0307					;push af 
0307					;ld a, 'W' 
0307					;ld (debug_mark),a 
0307					;pop af 
0307					CALLMONITOR 
0307 cd 6f ee			call debug_vector  
030a				endm  
# End of macro CALLMONITOR
030a				endif 
030a			 
030a			; might not be working 
030a			;	call se_writepage 
030a			 
030a			;	ret 
030a			; 
030a			 
030a			 
030a			 
030a			.wl1:    
030a			 
030a				; read physical block at hl into de 
030a			        ; increment hl and de to next read position on exit 
030a			 
030a e5				push hl 
030b d5				push de	 
030c c5				push bc 
030d 1a				ld a,(de) 
030e				;if DEBUG_STORESE 
030e			;		push af 
030e			;		ld a, 'W' 
030e			;		ld (debug_mark),a 
030e			;		pop af 
030e			;		CALLMONITOR 
030e			;	endif 
030e cd ac 01			call se_writebyte 
0311			;	call delay250ms 
0311 00				nop 
0312 00				nop 
0313 00				nop 
0314			;	if DEBUG_STORESE 
0314			;		push af 
0314			;		ld a, 'w' 
0314			;		ld (debug_mark),a 
0314			;		pop af 
0314			;		CALLMONITOR 
0314			;	endif 
0314 c1				pop bc 
0315 d1				pop de 
0316 e1				pop hl 
0317 23				inc hl 
0318 13				inc de 
0319			 
0319			 
0319 10 ef			djnz .wl1 
031b			 
031b				if DEBUG_STORESE 
031b					DMARK "SW2" 
031b f5				push af  
031c 3a 30 03			ld a, (.dmark)  
031f 32 65 ee			ld (debug_mark),a  
0322 3a 31 03			ld a, (.dmark+1)  
0325 32 66 ee			ld (debug_mark+1),a  
0328 3a 32 03			ld a, (.dmark+2)  
032b 32 67 ee			ld (debug_mark+2),a  
032e 18 03			jr .pastdmark  
0330 ..			.dmark: db "SW2"  
0333 f1			.pastdmark: pop af  
0334			endm  
# End of macro DMARK
0334			 
0334					;push af 
0334					;ld a, 'W' 
0334					;ld (debug_mark),a 
0334					;pop af 
0334					CALLMONITOR 
0334 cd 6f ee			call debug_vector  
0337				endm  
# End of macro CALLMONITOR
0337				endif 
0337 c9				ret	 
0338			 
0338			; Init bank 
0338			; --------- 
0338			; 
0338			; With current bank 
0338			; 
0338			; Setup block 0 config 
0338			;     Set 0 file id counter 
0338			;     Set formatted byte pattern 
0338			;     Zero out bank label 
0338			;      
0338			; For every logical block write 0-1 byte as null 
0338			 
0338			storage_get_block_0: 
0338			 
0338				; TODO check presence 
0338			 
0338				; get block 0 config 
0338			 
0338 21 00 00			ld hl, 0 
033b 11 74 ea			ld de, store_page 
033e cd 87 02			call storage_read_block 
0341			 
0341				if DEBUG_STORESE 
0341					DMARK "SB0" 
0341 f5				push af  
0342 3a 56 03			ld a, (.dmark)  
0345 32 65 ee			ld (debug_mark),a  
0348 3a 57 03			ld a, (.dmark+1)  
034b 32 66 ee			ld (debug_mark+1),a  
034e 3a 58 03			ld a, (.dmark+2)  
0351 32 67 ee			ld (debug_mark+2),a  
0354 18 03			jr .pastdmark  
0356 ..			.dmark: db "SB0"  
0359 f1			.pastdmark: pop af  
035a			endm  
# End of macro DMARK
035a 11 74 ea				ld de, store_page 
035d			;		push af 
035d			;		ld a, 'i' 
035d			;		ld (debug_mark),a 
035d			;		pop af 
035d					CALLMONITOR 
035d cd 6f ee			call debug_vector  
0360				endm  
# End of macro CALLMONITOR
0360				endif 
0360			 
0360				; is this area formatted? 
0360			 
0360			;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
0360 2a 75 ea			ld hl, (store_page+1) 
0363 3e 80			ld a,0x80 
0365 bd				cp l 
0366 20 22			jr nz, .ininotformatted 
0368				; do a double check 
0368 3e 27			ld a, 0x27 
036a bc				cp h 
036b 20 1d			jr nz, .ininotformatted 
036d			 
036d				; formatted then 
036d			 
036d				if DEBUG_STORESE 
036d					DMARK "SB1" 
036d f5				push af  
036e 3a 82 03			ld a, (.dmark)  
0371 32 65 ee			ld (debug_mark),a  
0374 3a 83 03			ld a, (.dmark+1)  
0377 32 66 ee			ld (debug_mark+1),a  
037a 3a 84 03			ld a, (.dmark+2)  
037d 32 67 ee			ld (debug_mark+2),a  
0380 18 03			jr .pastdmark  
0382 ..			.dmark: db "SB1"  
0385 f1			.pastdmark: pop af  
0386			endm  
# End of macro DMARK
0386					;push af 
0386					;ld a, 'I' 
0386					;ld (debug_mark),a 
0386					;pop af 
0386					CALLMONITOR 
0386 cd 6f ee			call debug_vector  
0389				endm  
# End of macro CALLMONITOR
0389				endif 
0389 c9				ret 
038a			 
038a			.ininotformatted: 
038a				; bank not formatted so poke various bits to make sure 
038a			 
038a				if DEBUG_STORESE 
038a					DMARK "SB2" 
038a f5				push af  
038b 3a 9f 03			ld a, (.dmark)  
038e 32 65 ee			ld (debug_mark),a  
0391 3a a0 03			ld a, (.dmark+1)  
0394 32 66 ee			ld (debug_mark+1),a  
0397 3a a1 03			ld a, (.dmark+2)  
039a 32 67 ee			ld (debug_mark+2),a  
039d 18 03			jr .pastdmark  
039f ..			.dmark: db "SB2"  
03a2 f1			.pastdmark: pop af  
03a3			endm  
# End of macro DMARK
03a3					;push af 
03a3					;ld a, 'f' 
03a3					;ld (debug_mark),a 
03a3					;pop af 
03a3					CALLMONITOR 
03a3 cd 6f ee			call debug_vector  
03a6				endm  
# End of macro CALLMONITOR
03a6				endif 
03a6			 
03a6 cd c3 0a			call storage_clear_page 
03a9			 
03a9 21 74 ea			ld hl, store_page 
03ac 3e 00			ld a, 0 
03ae				 
03ae 77				ld (hl),a   ; reset file counter 
03af			 
03af 21 80 27			ld hl, 0x2780     ;      Byte - 1-2 formated: Byte pattern: 0x80 x27 
03b2 22 75 ea		 	ld (store_page+1), hl	 
03b5			 
03b5				; set default label 
03b5			 
03b5 21 51 04			ld hl, .defaultbanklabl 
03b8 11 77 ea		 	ld de, store_page+3 
03bb 01 0f 00			ld bc, 15 
03be ed b0			ldir 
03c0			 
03c0				; Append the current bank id 
03c0 21 80 ea			ld hl, store_page+3+9 
03c3 3a 59 ea			ld a, (spi_device_id) 
03c6 77				ld (hl), a 
03c7			 
03c7				; save default page 0 
03c7			 
03c7 21 00 00			ld hl, 0 
03ca 11 74 ea			ld de, store_page 
03cd				if DEBUG_STORESE 
03cd					DMARK "SB3" 
03cd f5				push af  
03ce 3a e2 03			ld a, (.dmark)  
03d1 32 65 ee			ld (debug_mark),a  
03d4 3a e3 03			ld a, (.dmark+1)  
03d7 32 66 ee			ld (debug_mark+1),a  
03da 3a e4 03			ld a, (.dmark+2)  
03dd 32 67 ee			ld (debug_mark+2),a  
03e0 18 03			jr .pastdmark  
03e2 ..			.dmark: db "SB3"  
03e5 f1			.pastdmark: pop af  
03e6			endm  
# End of macro DMARK
03e6			;		push af 
03e6			;		ld a, 'F' 
03e6			;		ld (debug_mark),a 
03e6			;		pop af 
03e6					CALLMONITOR 
03e6 cd 6f ee			call debug_vector  
03e9				endm  
# End of macro CALLMONITOR
03e9				endif 
03e9 cd ec 02			call storage_write_block 
03ec				if DEBUG_STORESE 
03ec					DMARK "SB4" 
03ec f5				push af  
03ed 3a 01 04			ld a, (.dmark)  
03f0 32 65 ee			ld (debug_mark),a  
03f3 3a 02 04			ld a, (.dmark+1)  
03f6 32 66 ee			ld (debug_mark+1),a  
03f9 3a 03 04			ld a, (.dmark+2)  
03fc 32 67 ee			ld (debug_mark+2),a  
03ff 18 03			jr .pastdmark  
0401 ..			.dmark: db "SB4"  
0404 f1			.pastdmark: pop af  
0405			endm  
# End of macro DMARK
0405			;		push af 
0405			;		ld a, '>' 
0405			;		ld (debug_mark),a 
0405			;		pop af 
0405					CALLMONITOR 
0405 cd 6f ee			call debug_vector  
0408				endm  
# End of macro CALLMONITOR
0408				endif 
0408			 
0408 00				nop 
0409 00				nop 
040a 00				nop 
040b			 
040b				; now set 0 in every page to mark as a free block 
040b			 
040b 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
040d 21 40 00			ld hl, STORE_BLOCK_PHY 
0410			 
0410 3e 00		.setmark1:   	ld a,0 
0412 e5					push hl 
0413 c5					push bc 
0414 cd ac 01				call se_writebyte 
0417 3e 0a			ld a, 10 
0419 cd e5 0a			call aDelayInMS 
041c 23				inc hl 
041d cd ac 01				call se_writebyte 
0420 3e 0a			ld a, 10 
0422 cd e5 0a			call aDelayInMS 
0425 2b				dec hl 
0426 c1					pop bc 
0427 e1					pop hl 
0428 3e 40				ld a, STORE_BLOCK_PHY 
042a cd f5 0d				call addatohl 
042d 10 e1				djnz .setmark1 
042f			 
042f 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
0431 3e 00		.setmark2:   	ld a,0 
0433 e5					push hl 
0434 c5					push bc 
0435 cd ac 01				call se_writebyte 
0438 3e 0a			ld a, 10 
043a cd e5 0a			call aDelayInMS 
043d 23				inc hl 
043e cd ac 01				call se_writebyte 
0441 3e 0a			ld a, 10 
0443 cd e5 0a			call aDelayInMS 
0446 2b				dec hl 
0447 c1					pop bc 
0448 e1					pop hl 
0449 3e 40				ld a, STORE_BLOCK_PHY 
044b cd f5 0d				call addatohl 
044e 10 e1				djnz .setmark2 
0450			 
0450					 
0450			 
0450			 
0450 c9				ret 
0451			 
0451			 
0451			 
0451			 
0451 .. 00		.defaultbanklabl:   db "BankLabel_",0 
045c			 
045c			 
045c			 
045c			; Label Bank 
045c			; ---------- 
045c			; 
045c			; With current bank 
045c			; Read block 0 
045c			; Set label 
045c			; Write block 0 
045c			 
045c			; label str pointer in hl 
045c			 
045c			storage_label:     
045c			 
045c				if DEBUG_STORESE 
045c					DMARK "LBL" 
045c f5				push af  
045d 3a 71 04			ld a, (.dmark)  
0460 32 65 ee			ld (debug_mark),a  
0463 3a 72 04			ld a, (.dmark+1)  
0466 32 66 ee			ld (debug_mark+1),a  
0469 3a 73 04			ld a, (.dmark+2)  
046c 32 67 ee			ld (debug_mark+2),a  
046f 18 03			jr .pastdmark  
0471 ..			.dmark: db "LBL"  
0474 f1			.pastdmark: pop af  
0475			endm  
# End of macro DMARK
0475					CALLMONITOR 
0475 cd 6f ee			call debug_vector  
0478				endm  
# End of macro CALLMONITOR
0478				endif 
0478			 
0478 e5				push hl 
0479			 
0479 cd 38 03			call storage_get_block_0 
047c			 
047c				; set default label 
047c			 
047c e1				pop hl 
047d			 
047d 11 77 ea		 	ld de, store_page+3 
0480 01 0f 00			ld bc, 15 
0483				if DEBUG_STORESE 
0483					DMARK "LB3" 
0483 f5				push af  
0484 3a 98 04			ld a, (.dmark)  
0487 32 65 ee			ld (debug_mark),a  
048a 3a 99 04			ld a, (.dmark+1)  
048d 32 66 ee			ld (debug_mark+1),a  
0490 3a 9a 04			ld a, (.dmark+2)  
0493 32 67 ee			ld (debug_mark+2),a  
0496 18 03			jr .pastdmark  
0498 ..			.dmark: db "LB3"  
049b f1			.pastdmark: pop af  
049c			endm  
# End of macro DMARK
049c					CALLMONITOR 
049c cd 6f ee			call debug_vector  
049f				endm  
# End of macro CALLMONITOR
049f				endif 
049f ed b0			ldir 
04a1				; save default page 0 
04a1			 
04a1 21 00 00			ld hl, 0 
04a4 11 74 ea			ld de, store_page 
04a7				if DEBUG_STORESE 
04a7					DMARK "LBW" 
04a7 f5				push af  
04a8 3a bc 04			ld a, (.dmark)  
04ab 32 65 ee			ld (debug_mark),a  
04ae 3a bd 04			ld a, (.dmark+1)  
04b1 32 66 ee			ld (debug_mark+1),a  
04b4 3a be 04			ld a, (.dmark+2)  
04b7 32 67 ee			ld (debug_mark+2),a  
04ba 18 03			jr .pastdmark  
04bc ..			.dmark: db "LBW"  
04bf f1			.pastdmark: pop af  
04c0			endm  
# End of macro DMARK
04c0					CALLMONITOR 
04c0 cd 6f ee			call debug_vector  
04c3				endm  
# End of macro CALLMONITOR
04c3				endif 
04c3 cd ec 02			call storage_write_block 
04c6			 
04c6 c9				ret 
04c7			 
04c7			 
04c7			 
04c7			; Read Block 0 - Config 
04c7			; --------------------- 
04c7			; 
04c7			; With current bank 
04c7			; Call presence test 
04c7			;    If not present format/init bank  
04c7			; Read block 0  
04c7			;  
04c7			 
04c7			 
04c7			; Dir 
04c7			; --- 
04c7			; 
04c7			; With current bank 
04c7			; Load Block 0 Config 
04c7			; Get max file id number 
04c7			; For each logical block 
04c7			;    Read block read byte 2 
04c7			;      if first block of file 
04c7			;         Display file name 
04c7			;         Display type flags for file 
04c7			;        
04c7			 
04c7			; moving to words as this requires stack control 
04c7			 
04c7			 
04c7			; Delete File 
04c7			; ----------- 
04c7			; 
04c7			; With current bank 
04c7			; 
04c7			; Load Block 0 Config 
04c7			; Get max file id number 
04c7			; For each logical block 
04c7			;    Read block file id 
04c7			;      If first block of file and dont have file id 
04c7			;         if file to delete 
04c7			;         Save file id 
04c7			;         Null file id 
04c7			;         Write this block back 
04c7			;      If file id is one saved 
04c7			;         Null file id 
04c7			;         Write this block back 
04c7			 
04c7			 
04c7			.se_done: 
04c7 e1				pop hl 
04c8 c9				ret 
04c9			 
04c9			storage_erase: 
04c9			 
04c9				; hl contains the file id 
04c9			 
04c9 5d				ld e, l 
04ca 16 00			ld d, 0 
04cc 21 40 00			ld hl, STORE_BLOCK_PHY 
04cf					if DEBUG_FORTH_WORDS 
04cf						DMARK "ERA" 
04cf f5				push af  
04d0 3a e4 04			ld a, (.dmark)  
04d3 32 65 ee			ld (debug_mark),a  
04d6 3a e5 04			ld a, (.dmark+1)  
04d9 32 66 ee			ld (debug_mark+1),a  
04dc 3a e6 04			ld a, (.dmark+2)  
04df 32 67 ee			ld (debug_mark+2),a  
04e2 18 03			jr .pastdmark  
04e4 ..			.dmark: db "ERA"  
04e7 f1			.pastdmark: pop af  
04e8			endm  
# End of macro DMARK
04e8						CALLMONITOR 
04e8 cd 6f ee			call debug_vector  
04eb				endm  
# End of macro CALLMONITOR
04eb					endif 
04eb cd ba 05			call storage_findnextid 
04ee cd 1e 0e			call ishlzero 
04f1 c8				ret z 
04f2			 
04f2 e5				push hl 
04f3			 
04f3				; TODO check file not found 
04f3			 
04f3 11 74 ea			ld de, store_page 
04f6 cd 87 02			call storage_read_block 
04f9			 
04f9 cd 1e 0e			call ishlzero 
04fc ca c7 04			jp z,.se_done 
04ff			 
04ff					if DEBUG_FORTH_WORDS 
04ff						DMARK "ER1" 
04ff f5				push af  
0500 3a 14 05			ld a, (.dmark)  
0503 32 65 ee			ld (debug_mark),a  
0506 3a 15 05			ld a, (.dmark+1)  
0509 32 66 ee			ld (debug_mark+1),a  
050c 3a 16 05			ld a, (.dmark+2)  
050f 32 67 ee			ld (debug_mark+2),a  
0512 18 03			jr .pastdmark  
0514 ..			.dmark: db "ER1"  
0517 f1			.pastdmark: pop af  
0518			endm  
# End of macro DMARK
0518						CALLMONITOR 
0518 cd 6f ee			call debug_vector  
051b				endm  
# End of macro CALLMONITOR
051b					endif 
051b 3a 74 ea			ld a, (store_page)	; get file id 
051e 32 68 ea			ld (store_tmpid), a 
0521			 
0521 3a 76 ea			ld a, (store_page+2)    ; get count of extends 
0524 32 67 ea			ld (store_tmpext), a 
0527			 
0527				; wipe file header 
0527			 
0527 e1				pop hl 
0528 3e 00			ld a, 0 
052a 32 74 ea			ld (store_page), a 
052d 32 75 ea			ld (store_page+1),a 
0530 11 74 ea			ld de, store_page 
0533					if DEBUG_FORTH_WORDS 
0533						DMARK "ER2" 
0533 f5				push af  
0534 3a 48 05			ld a, (.dmark)  
0537 32 65 ee			ld (debug_mark),a  
053a 3a 49 05			ld a, (.dmark+1)  
053d 32 66 ee			ld (debug_mark+1),a  
0540 3a 4a 05			ld a, (.dmark+2)  
0543 32 67 ee			ld (debug_mark+2),a  
0546 18 03			jr .pastdmark  
0548 ..			.dmark: db "ER2"  
054b f1			.pastdmark: pop af  
054c			endm  
# End of macro DMARK
054c						CALLMONITOR 
054c cd 6f ee			call debug_vector  
054f				endm  
# End of macro CALLMONITOR
054f					endif 
054f cd ec 02			call storage_write_block 
0552			 
0552			 
0552				; wipe file extents 
0552			 
0552 3a 67 ea			ld a, (store_tmpext) 
0555 47				ld b, a 
0556			 
0556			.eraext:	  
0556 c5				push bc 
0557			 
0557 21 40 00			ld hl, STORE_BLOCK_PHY 
055a 3a 68 ea			ld a,(store_tmpid) 
055d 5f				ld e, a 
055e 50				ld d, b	 
055f					if DEBUG_FORTH_WORDS 
055f						DMARK "ER3" 
055f f5				push af  
0560 3a 74 05			ld a, (.dmark)  
0563 32 65 ee			ld (debug_mark),a  
0566 3a 75 05			ld a, (.dmark+1)  
0569 32 66 ee			ld (debug_mark+1),a  
056c 3a 76 05			ld a, (.dmark+2)  
056f 32 67 ee			ld (debug_mark+2),a  
0572 18 03			jr .pastdmark  
0574 ..			.dmark: db "ER3"  
0577 f1			.pastdmark: pop af  
0578			endm  
# End of macro DMARK
0578						CALLMONITOR 
0578 cd 6f ee			call debug_vector  
057b				endm  
# End of macro CALLMONITOR
057b					endif 
057b cd ba 05			call storage_findnextid 
057e cd 1e 0e			call ishlzero 
0581 ca c7 04			jp z,.se_done 
0584			 
0584 e5				push hl 
0585 11 74 ea			ld de, store_page 
0588 cd 87 02			call storage_read_block 
058b			 
058b				; free block	 
058b			 
058b 3e 00			ld a, 0 
058d 32 74 ea			ld (store_page), a 
0590 32 75 ea			ld (store_page+1),a 
0593 11 74 ea			ld de, store_page 
0596 e1				pop hl 
0597					if DEBUG_FORTH_WORDS 
0597						DMARK "ER4" 
0597 f5				push af  
0598 3a ac 05			ld a, (.dmark)  
059b 32 65 ee			ld (debug_mark),a  
059e 3a ad 05			ld a, (.dmark+1)  
05a1 32 66 ee			ld (debug_mark+1),a  
05a4 3a ae 05			ld a, (.dmark+2)  
05a7 32 67 ee			ld (debug_mark+2),a  
05aa 18 03			jr .pastdmark  
05ac ..			.dmark: db "ER4"  
05af f1			.pastdmark: pop af  
05b0			endm  
# End of macro DMARK
05b0						CALLMONITOR 
05b0 cd 6f ee			call debug_vector  
05b3				endm  
# End of macro CALLMONITOR
05b3					endif 
05b3 cd ec 02			call storage_write_block 
05b6			 
05b6 c1				pop bc 
05b7 10 9d			djnz .eraext 
05b9			 
05b9 c9				ret 
05ba			 
05ba			 
05ba			; Find Free Block 
05ba			; --------------- 
05ba			; 
05ba			; With current bank 
05ba			;  
05ba			; From given starting logical block 
05ba			;    Read block  
05ba			;    If no file id 
05ba			;         Return block id 
05ba			 
05ba			 
05ba			; hl starting page number 
05ba			; hl contains free page number or zero if no pages free 
05ba			; e contains the file id to locate 
05ba			; d contains the block number 
05ba			 
05ba			; TODO change to find file id and use zero for free block 
05ba			 
05ba			storage_findnextid: 
05ba			 
05ba				; now locate first 0 page to mark as a free block 
05ba			 
05ba 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
05bc			;	ld hl, STORE_BLOCK_PHY 
05bc			 
05bc					if DEBUG_FORTH_WORDS 
05bc					DMARK "FNI" 
05bc f5				push af  
05bd 3a d1 05			ld a, (.dmark)  
05c0 32 65 ee			ld (debug_mark),a  
05c3 3a d2 05			ld a, (.dmark+1)  
05c6 32 66 ee			ld (debug_mark+1),a  
05c9 3a d3 05			ld a, (.dmark+2)  
05cc 32 67 ee			ld (debug_mark+2),a  
05cf 18 03			jr .pastdmark  
05d1 ..			.dmark: db "FNI"  
05d4 f1			.pastdmark: pop af  
05d5			endm  
# End of macro DMARK
05d5						CALLMONITOR 
05d5 cd 6f ee			call debug_vector  
05d8				endm  
# End of macro CALLMONITOR
05d8					endif 
05d8			.ff1:   	 
05d8 e5					push hl 
05d9 c5					push bc 
05da d5					push de 
05db cd ab 01				call se_readbyte 
05de 5f					ld e,a 
05df 23					inc hl 
05e0 cd ab 01				call se_readbyte 
05e3 57					ld d, a 
05e4 e1					pop hl 
05e5 e5					push hl 
05e6 cd 13 0e				call cmp16 
05e9 28 49				jr z, .fffound 
05eb			 
05eb d1					pop de 
05ec c1					pop bc 
05ed e1					pop hl 
05ee			 
05ee					; is found? 
05ee					;cp e 
05ee					;ret z 
05ee			 
05ee 3e 40				ld a, STORE_BLOCK_PHY 
05f0 cd f5 0d				call addatohl 
05f3 10 e3				djnz .ff1 
05f5			 
05f5 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
05f7			.ff2:   	 
05f7			 
05f7 e5					push hl 
05f8 c5					push bc 
05f9 d5					push de 
05fa cd ab 01				call se_readbyte 
05fd 5f					ld e,a 
05fe 23					inc hl 
05ff cd ab 01				call se_readbyte 
0602 57					ld d, a 
0603			 
0603 e1					pop hl 
0604 e5					push hl 
0605 cd 13 0e				call cmp16 
0608 28 2a				jr z, .fffound 
060a			 
060a d1					pop de 
060b c1					pop bc 
060c e1					pop hl 
060d					; is found? 
060d					;cp e 
060d					;ret z 
060d			 
060d 3e 40				ld a, STORE_BLOCK_PHY 
060f cd f5 0d				call addatohl 
0612 10 e3				djnz .ff2 
0614			 
0614			 
0614					if DEBUG_FORTH_WORDS 
0614					DMARK "FN-" 
0614 f5				push af  
0615 3a 29 06			ld a, (.dmark)  
0618 32 65 ee			ld (debug_mark),a  
061b 3a 2a 06			ld a, (.dmark+1)  
061e 32 66 ee			ld (debug_mark+1),a  
0621 3a 2b 06			ld a, (.dmark+2)  
0624 32 67 ee			ld (debug_mark+2),a  
0627 18 03			jr .pastdmark  
0629 ..			.dmark: db "FN-"  
062c f1			.pastdmark: pop af  
062d			endm  
# End of macro DMARK
062d					;	push af 
062d					;	ld a, 'n' 
062d					;	ld (debug_mark),a 
062d					;	pop af 
062d						CALLMONITOR 
062d cd 6f ee			call debug_vector  
0630				endm  
# End of macro CALLMONITOR
0630					endif 
0630				; no free marks! 
0630 21 00 00				ld hl, 0 
0633 c9				ret 
0634			.fffound: 
0634				 
0634			 
0634 d1					pop de 
0635 c1					pop bc 
0636 e1					pop hl 
0637					if DEBUG_FORTH_WORDS 
0637					DMARK "FNF" 
0637 f5				push af  
0638 3a 4c 06			ld a, (.dmark)  
063b 32 65 ee			ld (debug_mark),a  
063e 3a 4d 06			ld a, (.dmark+1)  
0641 32 66 ee			ld (debug_mark+1),a  
0644 3a 4e 06			ld a, (.dmark+2)  
0647 32 67 ee			ld (debug_mark+2),a  
064a 18 03			jr .pastdmark  
064c ..			.dmark: db "FNF"  
064f f1			.pastdmark: pop af  
0650			endm  
# End of macro DMARK
0650					;	push af 
0650					;	ld a, 'n' 
0650					;	ld (debug_mark),a 
0650					;	pop af 
0650						CALLMONITOR 
0650 cd 6f ee			call debug_vector  
0653				endm  
# End of macro CALLMONITOR
0653					endif 
0653 c9				ret 
0654			 
0654			 
0654			 
0654			; Free Space 
0654			; ---------- 
0654			; 
0654			; With current bank 
0654			; 
0654			; Set block count to zero 
0654			; Starting with first logical block 
0654			;      Find free block  
0654			;      If block id given, increment block count 
0654			; 
0654			;  
0654			 
0654			 
0654			; hl contains count of free blocks 
0654			 
0654			storage_freeblocks: 
0654			 
0654				; now locate first 0 page to mark as a free block 
0654			 
0654 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
0656 21 40 00			ld hl, STORE_BLOCK_PHY 
0659 11 00 00			ld de, 0 
065c			 
065c			.fb1:   	 
065c e5					push hl 
065d c5					push bc 
065e d5					push de 
065f cd ab 01				call se_readbyte 
0662 d1					pop de 
0663 c1					pop bc 
0664 e1					pop hl 
0665			 
0665					; is free? 
0665 fe 00				cp 0 
0667 20 01				jr nz, .ff1cont 
0669 13					inc de 
066a			 
066a			.ff1cont: 
066a			 
066a			 
066a 3e 40				ld a, STORE_BLOCK_PHY 
066c cd f5 0d				call addatohl 
066f 10 eb				djnz .fb1 
0671			 
0671 06 ff			ld b, STORE_DEVICE_MAXBLOCKS/2 
0673			.fb2:   	 
0673 e5					push hl 
0674 c5					push bc 
0675 d5					push de 
0676 cd ab 01				call se_readbyte 
0679 d1					pop de 
067a c1					pop bc 
067b e1					pop hl 
067c			 
067c					; is free? 
067c fe 00				cp 0 
067e 20 01				jr nz, .ff2cont 
0680 13					inc de 
0681			 
0681			.ff2cont: 
0681			 
0681 3e 40				ld a, STORE_BLOCK_PHY 
0683 cd f5 0d				call addatohl 
0686 10 eb				djnz .fb2 
0688			 
0688 eb				ex de, hl 
0689 c9				ret 
068a			 
068a			; Get File ID 
068a			; ----------- 
068a			; 
068a			; With current bank 
068a			;  
068a			; Load Block 0 Config 
068a			; Get max file id number 
068a			; For each logical block 
068a			;    Read block file id 
068a			;      If first block of file and dont have file id 
068a			;         if file get id and exit 
068a			 
068a			 
068a			 
068a			 
068a			; Create File 
068a			; ----------- 
068a			; 
068a			; With current bank  
068a			; Load Block 0 Config 
068a			; Get max file id number 
068a			; Increment file id number 
068a			; Save Config 
068a			; Find free block 
068a			; Set buffer with file name and file id 
068a			; Write buffer to free block  
068a			 
068a			 
068a			; hl point to file name 
068a			; hl returns file id 
068a			 
068a			; file format: 
068a			; byte 0 - file id 
068a			; byte 1 - extent number 
068a			; byte 2-> data 
068a			 
068a			; format for extent number 0: 
068a			; 
068a			; byte 0 - file id 
068a			; byte 1 - extent 0 
068a			; byte 2 - extent count 
068a			; byte 3 -> file name and meta data 
068a			 
068a			 
068a			storage_create: 
068a				if DEBUG_STORESE 
068a					DMARK "SCR" 
068a f5				push af  
068b 3a 9f 06			ld a, (.dmark)  
068e 32 65 ee			ld (debug_mark),a  
0691 3a a0 06			ld a, (.dmark+1)  
0694 32 66 ee			ld (debug_mark+1),a  
0697 3a a1 06			ld a, (.dmark+2)  
069a 32 67 ee			ld (debug_mark+2),a  
069d 18 03			jr .pastdmark  
069f ..			.dmark: db "SCR"  
06a2 f1			.pastdmark: pop af  
06a3			endm  
# End of macro DMARK
06a3					CALLMONITOR 
06a3 cd 6f ee			call debug_vector  
06a6				endm  
# End of macro CALLMONITOR
06a6				endif 
06a6			 
06a6 e5				push hl		; save file name pointer 
06a7			 
06a7 cd 38 03			call storage_get_block_0 
06aa			 
06aa 3a 74 ea			ld a,(store_page)	; get current file id 
06ad 3c				inc a 
06ae 32 74 ea			ld (store_page),a 
06b1				 
06b1 32 68 ea			ld (store_tmpid),a			; save id 
06b4			 
06b4 21 00 00			ld hl, 0 
06b7 11 74 ea			ld de, store_page 
06ba				if DEBUG_STORESE 
06ba					DMARK "SCw" 
06ba f5				push af  
06bb 3a cf 06			ld a, (.dmark)  
06be 32 65 ee			ld (debug_mark),a  
06c1 3a d0 06			ld a, (.dmark+1)  
06c4 32 66 ee			ld (debug_mark+1),a  
06c7 3a d1 06			ld a, (.dmark+2)  
06ca 32 67 ee			ld (debug_mark+2),a  
06cd 18 03			jr .pastdmark  
06cf ..			.dmark: db "SCw"  
06d2 f1			.pastdmark: pop af  
06d3			endm  
# End of macro DMARK
06d3					CALLMONITOR 
06d3 cd 6f ee			call debug_vector  
06d6				endm  
# End of macro CALLMONITOR
06d6				endif 
06d6 cd ec 02			call storage_write_block	 ; save update 
06d9			 
06d9				if DEBUG_STORESE 
06d9 11 74 ea				ld de, store_page 
06dc					DMARK "SCC" 
06dc f5				push af  
06dd 3a f1 06			ld a, (.dmark)  
06e0 32 65 ee			ld (debug_mark),a  
06e3 3a f2 06			ld a, (.dmark+1)  
06e6 32 66 ee			ld (debug_mark+1),a  
06e9 3a f3 06			ld a, (.dmark+2)  
06ec 32 67 ee			ld (debug_mark+2),a  
06ef 18 03			jr .pastdmark  
06f1 ..			.dmark: db "SCC"  
06f4 f1			.pastdmark: pop af  
06f5			endm  
# End of macro DMARK
06f5					CALLMONITOR 
06f5 cd 6f ee			call debug_vector  
06f8				endm  
# End of macro CALLMONITOR
06f8				endif 
06f8				;  
06f8				 
06f8 21 40 00			ld hl, STORE_BLOCK_PHY 
06fb 11 00 00			ld de, 0 
06fe cd ba 05			call storage_findnextid 
0701			 
0701 22 5f ea			ld (store_tmppageid), hl    ; save page to use  
0704			 
0704				; TODO detect 0 = no spare blocks 
0704			 
0704				; hl now contains the free page to use for the file header page 
0704			 
0704				if DEBUG_STORESE 
0704				DMARK "SCF" 
0704 f5				push af  
0705 3a 19 07			ld a, (.dmark)  
0708 32 65 ee			ld (debug_mark),a  
070b 3a 1a 07			ld a, (.dmark+1)  
070e 32 66 ee			ld (debug_mark+1),a  
0711 3a 1b 07			ld a, (.dmark+2)  
0714 32 67 ee			ld (debug_mark+2),a  
0717 18 03			jr .pastdmark  
0719 ..			.dmark: db "SCF"  
071c f1			.pastdmark: pop af  
071d			endm  
# End of macro DMARK
071d					CALLMONITOR 
071d cd 6f ee			call debug_vector  
0720				endm  
# End of macro CALLMONITOR
0720				endif 
0720			 
0720 22 5f ea			ld (store_tmppageid), hl 
0723				 
0723 3a 68 ea			ld a,(store_tmpid)    ; get file id 
0726			;	ld a, (store_filecache)			; save to cache 
0726			 
0726 32 74 ea			ld (store_page),a    ; set page id 
0729 3e 00			ld a, 0			 ; extent 0 is file header 
072b 32 75 ea			ld (store_page+1), a   ; set file extent 
072e			 
072e 32 76 ea			ld (store_page+2), a   ; extent count for the file 
0731			 
0731			;	inc hl 		; init block 0 of file 
0731			;	inc hl   		; skip file and extent id 
0731			 ;       ld a, 0 
0731			;	ld (hl),a 
0731			;	ld a, (store_filecache+1)  	; save to cache 
0731			 
0731			;	inc hl    ; file name 
0731				 
0731				 
0731 11 77 ea			ld de, store_page+3    ; get buffer for term string to use as file name 
0734				if DEBUG_STORESE 
0734					DMARK "SCc" 
0734 f5				push af  
0735 3a 49 07			ld a, (.dmark)  
0738 32 65 ee			ld (debug_mark),a  
073b 3a 4a 07			ld a, (.dmark+1)  
073e 32 66 ee			ld (debug_mark+1),a  
0741 3a 4b 07			ld a, (.dmark+2)  
0744 32 67 ee			ld (debug_mark+2),a  
0747 18 03			jr .pastdmark  
0749 ..			.dmark: db "SCc"  
074c f1			.pastdmark: pop af  
074d			endm  
# End of macro DMARK
074d					CALLMONITOR 
074d cd 6f ee			call debug_vector  
0750				endm  
# End of macro CALLMONITOR
0750				endif 
0750 e1				pop hl    ; get zero term string 
0751 e5				push hl 
0752 3e 00			ld a, 0 
0754 cd 66 11			call strlent 
0757 23				inc hl   ; cover zero term 
0758 06 00			ld b,0 
075a 4d				ld c,l 
075b e1				pop hl 
075c				;ex de, hl 
075c				if DEBUG_STORESE 
075c					DMARK "SCa" 
075c f5				push af  
075d 3a 71 07			ld a, (.dmark)  
0760 32 65 ee			ld (debug_mark),a  
0763 3a 72 07			ld a, (.dmark+1)  
0766 32 66 ee			ld (debug_mark+1),a  
0769 3a 73 07			ld a, (.dmark+2)  
076c 32 67 ee			ld (debug_mark+2),a  
076f 18 03			jr .pastdmark  
0771 ..			.dmark: db "SCa"  
0774 f1			.pastdmark: pop af  
0775			endm  
# End of macro DMARK
0775					;push af 
0775					;ld a, 'a' 
0775					;ld (debug_mark),a 
0775					;pop af 
0775					CALLMONITOR 
0775 cd 6f ee			call debug_vector  
0778				endm  
# End of macro CALLMONITOR
0778				endif 
0778 ed b0			ldir    ; copy zero term string 
077a				if DEBUG_STORESE 
077a					DMARK "SCA" 
077a f5				push af  
077b 3a 8f 07			ld a, (.dmark)  
077e 32 65 ee			ld (debug_mark),a  
0781 3a 90 07			ld a, (.dmark+1)  
0784 32 66 ee			ld (debug_mark+1),a  
0787 3a 91 07			ld a, (.dmark+2)  
078a 32 67 ee			ld (debug_mark+2),a  
078d 18 03			jr .pastdmark  
078f ..			.dmark: db "SCA"  
0792 f1			.pastdmark: pop af  
0793			endm  
# End of macro DMARK
0793					CALLMONITOR 
0793 cd 6f ee			call debug_vector  
0796				endm  
# End of macro CALLMONITOR
0796				endif 
0796			 
0796				; write file header page 
0796			 
0796 2a 5f ea			ld hl,(store_tmppageid) 
0799 11 74 ea			ld de, store_page 
079c				if DEBUG_STORESE 
079c					DMARK "SCb" 
079c f5				push af  
079d 3a b1 07			ld a, (.dmark)  
07a0 32 65 ee			ld (debug_mark),a  
07a3 3a b2 07			ld a, (.dmark+1)  
07a6 32 66 ee			ld (debug_mark+1),a  
07a9 3a b3 07			ld a, (.dmark+2)  
07ac 32 67 ee			ld (debug_mark+2),a  
07af 18 03			jr .pastdmark  
07b1 ..			.dmark: db "SCb"  
07b4 f1			.pastdmark: pop af  
07b5			endm  
# End of macro DMARK
07b5					;push af 
07b5					;ld a, 'b' 
07b5					;ld (debug_mark),a 
07b5					;pop af 
07b5					CALLMONITOR 
07b5 cd 6f ee			call debug_vector  
07b8				endm  
# End of macro CALLMONITOR
07b8				endif 
07b8 cd ec 02			call storage_write_block 
07bb			 
07bb 3a 68 ea			ld a, (store_tmpid) 
07be 6f				ld l, a 
07bf 26 00			ld h,0 
07c1				if DEBUG_STORESE 
07c1					DMARK "SCz" 
07c1 f5				push af  
07c2 3a d6 07			ld a, (.dmark)  
07c5 32 65 ee			ld (debug_mark),a  
07c8 3a d7 07			ld a, (.dmark+1)  
07cb 32 66 ee			ld (debug_mark+1),a  
07ce 3a d8 07			ld a, (.dmark+2)  
07d1 32 67 ee			ld (debug_mark+2),a  
07d4 18 03			jr .pastdmark  
07d6 ..			.dmark: db "SCz"  
07d9 f1			.pastdmark: pop af  
07da			endm  
# End of macro DMARK
07da					CALLMONITOR 
07da cd 6f ee			call debug_vector  
07dd				endm  
# End of macro CALLMONITOR
07dd				endif 
07dd c9				ret 
07de				 
07de			 
07de			 
07de			; 
07de			; Read File 
07de			; 
07de			; h - file id to locate 
07de			; l - extent to locate 
07de			; de - pointer to string to read into 
07de			; 
07de			; returns hl is 0 if block not found ie end of file or pointer to start of data read 
07de			 
07de			.sr_fail: 
07de d1				pop de 
07df c9				ret 
07e0			 
07e0			storage_read: 
07e0			 
07e0			 
07e0 d5				push de 
07e1			 
07e1			; TODO BUG the above push is it popped before the RET Z? 
07e1			 
07e1			; TODO how to handle multiple part blocks 
07e1			 
07e1				; locate file extent to read 
07e1			 
07e1 5c				ld e, h 
07e2 55				ld d, l 
07e3			 
07e3			.srext: 
07e3 22 72 ea			ld (store_readptr), hl     ; save the current extent to load 
07e6 ed 53 70 ea		ld (store_readbuf), de     ; save the current buffer to load in to 
07ea			 
07ea 21 40 00			ld hl, STORE_BLOCK_PHY 
07ed				if DEBUG_STORESE 
07ed					DMARK "sre" 
07ed f5				push af  
07ee 3a 02 08			ld a, (.dmark)  
07f1 32 65 ee			ld (debug_mark),a  
07f4 3a 03 08			ld a, (.dmark+1)  
07f7 32 66 ee			ld (debug_mark+1),a  
07fa 3a 04 08			ld a, (.dmark+2)  
07fd 32 67 ee			ld (debug_mark+2),a  
0800 18 03			jr .pastdmark  
0802 ..			.dmark: db "sre"  
0805 f1			.pastdmark: pop af  
0806			endm  
# End of macro DMARK
0806					CALLMONITOR 
0806 cd 6f ee			call debug_vector  
0809				endm  
# End of macro CALLMONITOR
0809				endif 
0809 cd ba 05			call storage_findnextid 
080c			 
080c				if DEBUG_STORESE 
080c					DMARK "srf" 
080c f5				push af  
080d 3a 21 08			ld a, (.dmark)  
0810 32 65 ee			ld (debug_mark),a  
0813 3a 22 08			ld a, (.dmark+1)  
0816 32 66 ee			ld (debug_mark+1),a  
0819 3a 23 08			ld a, (.dmark+2)  
081c 32 67 ee			ld (debug_mark+2),a  
081f 18 03			jr .pastdmark  
0821 ..			.dmark: db "srf"  
0824 f1			.pastdmark: pop af  
0825			endm  
# End of macro DMARK
0825					CALLMONITOR 
0825 cd 6f ee			call debug_vector  
0828				endm  
# End of macro CALLMONITOR
0828				endif 
0828 cd 1e 0e			call ishlzero 
082b			;	ld a, l 
082b			;	add h 
082b			;	cp 0 
082b 28 b1			jr z,.sr_fail			; block not found so EOF 
082d			 
082d				; save current address for use by higher level words etc 
082d			 
082d 22 65 ea			ld (store_openaddr),hl 
0830			 
0830			 
0830				; hl contains page number to load 
0830 d1				pop de   ; get storage 
0831 ed 53 70 ea		ld (store_readbuf), de     ; current buffer to load in to 
0835 d5				push de 
0836				if DEBUG_STORESE 
0836					DMARK "srg" 
0836 f5				push af  
0837 3a 4b 08			ld a, (.dmark)  
083a 32 65 ee			ld (debug_mark),a  
083d 3a 4c 08			ld a, (.dmark+1)  
0840 32 66 ee			ld (debug_mark+1),a  
0843 3a 4d 08			ld a, (.dmark+2)  
0846 32 67 ee			ld (debug_mark+2),a  
0849 18 03			jr .pastdmark  
084b ..			.dmark: db "srg"  
084e f1			.pastdmark: pop af  
084f			endm  
# End of macro DMARK
084f					CALLMONITOR 
084f cd 6f ee			call debug_vector  
0852				endm  
# End of macro CALLMONITOR
0852				endif 
0852 cd 87 02			call storage_read_block 
0855			 
0855				; if this a continuation read??? 
0855			 
0855 2a 70 ea			ld hl, (store_readbuf)     ; current buffer to load in to 
0858			 
0858 3e 3f			ld a, STORE_BLOCK_PHY-1 
085a cd f5 0d			call addatohl 
085d 7e				ld a,(hl) 
085e fe 00			cp 0 
0860 28 02			jr z, .markiscont 
0862 3e ff			ld a, 255 
0864			 
0864			.markiscont: 
0864 32 67 ea			ld (store_readcont), a 
0867			 
0867				if DEBUG_STORESE 
0867					DMARK "srC" 
0867 f5				push af  
0868 3a 7c 08			ld a, (.dmark)  
086b 32 65 ee			ld (debug_mark),a  
086e 3a 7d 08			ld a, (.dmark+1)  
0871 32 66 ee			ld (debug_mark+1),a  
0874 3a 7e 08			ld a, (.dmark+2)  
0877 32 67 ee			ld (debug_mark+2),a  
087a 18 03			jr .pastdmark  
087c ..			.dmark: db "srC"  
087f f1			.pastdmark: pop af  
0880			endm  
# End of macro DMARK
0880					CALLMONITOR 
0880 cd 6f ee			call debug_vector  
0883				endm  
# End of macro CALLMONITOR
0883				endif 
0883				; only short reads enabled 
0883			 
0883 3a 6f ea			ld a, (store_longread) 
0886 fe 00			cp 0 
0888 ca 55 09			jp z, .readdone 
088b			 
088b			; TODO if block has no zeros then need to read next block  
088b			; this code appears to be very buggy. Have added above a flag to disable/enable the following code for later debug 
088b			; check last byte of physical block. 
088b			; if not zero then the next block needs to be loaded 
088b			 
088b			 
088b 2a 70 ea			ld hl, (store_readbuf)     ; current buffer to load in to 
088e			 
088e 3e 3f			ld a, STORE_BLOCK_PHY-1 
0890 cd f5 0d			call addatohl 
0893				;dec hl 
0893 7e				ld a,(hl) 
0894				if DEBUG_STORESE 
0894					DMARK "sr?" 
0894 f5				push af  
0895 3a a9 08			ld a, (.dmark)  
0898 32 65 ee			ld (debug_mark),a  
089b 3a aa 08			ld a, (.dmark+1)  
089e 32 66 ee			ld (debug_mark+1),a  
08a1 3a ab 08			ld a, (.dmark+2)  
08a4 32 67 ee			ld (debug_mark+2),a  
08a7 18 03			jr .pastdmark  
08a9 ..			.dmark: db "sr?"  
08ac f1			.pastdmark: pop af  
08ad			endm  
# End of macro DMARK
08ad					CALLMONITOR 
08ad cd 6f ee			call debug_vector  
08b0				endm  
# End of macro CALLMONITOR
08b0				endif 
08b0 fe 00			cp 0 
08b2 ca 55 09			jp z, .readdone 
08b5			 
08b5				; last byte is not zero so there is more in the next extent. Load it on the end.	 
08b5			 
08b5 23				inc hl 
08b6			 
08b6 22 70 ea			ld (store_readbuf), hl     ; save the current buffer to load in to 
08b9			 
08b9 ed 5b 72 ea		ld de, (store_readptr)     ; save the current extent to load 
08bd			 
08bd eb				ex de, hl 
08be			 
08be				; next ext 
08be			 
08be 23				inc hl 
08bf 22 72 ea			ld  (store_readptr), hl     ; save the current extent to load 
08c2			 
08c2				if DEBUG_STORESE 
08c2					DMARK "sF2" 
08c2 f5				push af  
08c3 3a d7 08			ld a, (.dmark)  
08c6 32 65 ee			ld (debug_mark),a  
08c9 3a d8 08			ld a, (.dmark+1)  
08cc 32 66 ee			ld (debug_mark+1),a  
08cf 3a d9 08			ld a, (.dmark+2)  
08d2 32 67 ee			ld (debug_mark+2),a  
08d5 18 03			jr .pastdmark  
08d7 ..			.dmark: db "sF2"  
08da f1			.pastdmark: pop af  
08db			endm  
# End of macro DMARK
08db					CALLMONITOR 
08db cd 6f ee			call debug_vector  
08de				endm  
# End of macro CALLMONITOR
08de				endif 
08de			 
08de				; get and load block 
08de			 
08de cd ba 05			call storage_findnextid 
08e1			 
08e1				if DEBUG_STORESE 
08e1					DMARK "sf2" 
08e1 f5				push af  
08e2 3a f6 08			ld a, (.dmark)  
08e5 32 65 ee			ld (debug_mark),a  
08e8 3a f7 08			ld a, (.dmark+1)  
08eb 32 66 ee			ld (debug_mark+1),a  
08ee 3a f8 08			ld a, (.dmark+2)  
08f1 32 67 ee			ld (debug_mark+2),a  
08f4 18 03			jr .pastdmark  
08f6 ..			.dmark: db "sf2"  
08f9 f1			.pastdmark: pop af  
08fa			endm  
# End of macro DMARK
08fa					CALLMONITOR 
08fa cd 6f ee			call debug_vector  
08fd				endm  
# End of macro CALLMONITOR
08fd				endif 
08fd cd 1e 0e			call ishlzero 
0900			;	ld a, l 
0900			;	add h 
0900			;	cp 0 
0900 ca de 07			jp z,.sr_fail			; block not found so EOF 
0903				 
0903				; save current address for use by higher level words etc 
0903			 
0903 22 65 ea			ld (store_openaddr),hl 
0906			 
0906 cd 87 02			call storage_read_block 
0909			 
0909				; on a continuation block, we now have the file id and ext in the middle of the block 
0909				; we need to pull everything back  
0909			 
0909 ed 5b 70 ea		ld de, (store_readbuf)     ; current buffer to nudge into 
090d 2a 70 ea			ld hl, (store_readbuf)     ; current buffer where data actually exists 
0910 23				inc hl 
0911 23				inc hl     ; skip id and ext 
0912 01 40 00			ld bc, STORE_BLOCK_PHY 
0915				if DEBUG_STORESE 
0915					DMARK "SR<" 
0915 f5				push af  
0916 3a 2a 09			ld a, (.dmark)  
0919 32 65 ee			ld (debug_mark),a  
091c 3a 2b 09			ld a, (.dmark+1)  
091f 32 66 ee			ld (debug_mark+1),a  
0922 3a 2c 09			ld a, (.dmark+2)  
0925 32 67 ee			ld (debug_mark+2),a  
0928 18 03			jr .pastdmark  
092a ..			.dmark: db "SR<"  
092d f1			.pastdmark: pop af  
092e			endm  
# End of macro DMARK
092e					CALLMONITOR 
092e cd 6f ee			call debug_vector  
0931				endm  
# End of macro CALLMONITOR
0931				endif 
0931 ed b0			ldir     ; copy data 
0933			 
0933				; move the pointer back and pretend we have a full buffer for next recheck 
0933			 
0933 1b				dec de 
0934 1b				dec de 
0935			 
0935			; TODO do pop below now short circuit loop????? 
0935 c1				pop bc     ; get rid of spare de on stack 
0936				if DEBUG_STORESE 
0936					DMARK "SR>" 
0936 f5				push af  
0937 3a 4b 09			ld a, (.dmark)  
093a 32 65 ee			ld (debug_mark),a  
093d 3a 4c 09			ld a, (.dmark+1)  
0940 32 66 ee			ld (debug_mark+1),a  
0943 3a 4d 09			ld a, (.dmark+2)  
0946 32 67 ee			ld (debug_mark+2),a  
0949 18 03			jr .pastdmark  
094b ..			.dmark: db "SR>"  
094e f1			.pastdmark: pop af  
094f			endm  
# End of macro DMARK
094f					CALLMONITOR 
094f cd 6f ee			call debug_vector  
0952				endm  
# End of macro CALLMONITOR
0952				endif 
0952 c3 e3 07			jp .srext 
0955			 
0955			 
0955			 
0955			 
0955			 
0955			.readdone:		 
0955 e1				pop hl 		 ; return start of data to show as not EOF 
0956 23				inc hl   ; past file id 
0957 23				inc hl   ; past ext 
0958				if DEBUG_STORESE 
0958					DMARK "SRe" 
0958 f5				push af  
0959 3a 6d 09			ld a, (.dmark)  
095c 32 65 ee			ld (debug_mark),a  
095f 3a 6e 09			ld a, (.dmark+1)  
0962 32 66 ee			ld (debug_mark+1),a  
0965 3a 6f 09			ld a, (.dmark+2)  
0968 32 67 ee			ld (debug_mark+2),a  
096b 18 03			jr .pastdmark  
096d ..			.dmark: db "SRe"  
0970 f1			.pastdmark: pop af  
0971			endm  
# End of macro DMARK
0971					CALLMONITOR 
0971 cd 6f ee			call debug_vector  
0974				endm  
# End of macro CALLMONITOR
0974				endif 
0974 c9					ret 
0975			 
0975			 
0975			 
0975			; 
0975			; Append File 
0975			; 
0975			; hl - file id to locate 
0975			; de - pointer to (multi block) string to write 
0975			 
0975			.sa_notfound: 
0975 d1				pop de 
0976 c9				ret 
0977			 
0977			 
0977			storage_append: 
0977				; hl -  file id to append to 
0977				; de - string to append 
0977			 
0977 d5				push de 
0978				 
0978				if DEBUG_STORESE 
0978					DMARK "AP1" 
0978 f5				push af  
0979 3a 8d 09			ld a, (.dmark)  
097c 32 65 ee			ld (debug_mark),a  
097f 3a 8e 09			ld a, (.dmark+1)  
0982 32 66 ee			ld (debug_mark+1),a  
0985 3a 8f 09			ld a, (.dmark+2)  
0988 32 67 ee			ld (debug_mark+2),a  
098b 18 03			jr .pastdmark  
098d ..			.dmark: db "AP1"  
0990 f1			.pastdmark: pop af  
0991			endm  
# End of macro DMARK
0991					CALLMONITOR 
0991 cd 6f ee			call debug_vector  
0994				endm  
# End of macro CALLMONITOR
0994				endif 
0994			 
0994 7d				ld a, l 
0995 32 68 ea			ld (store_tmpid), a 
0998			 
0998				; get file header  
0998			 
0998 16 00			ld d, 0			 ; file extent to locate - file name details at item 0 
099a 3a 68 ea			ld a, (store_tmpid) 
099d 5f				ld e, a 
099e			 
099e 21 40 00				ld hl, STORE_BLOCK_PHY 
09a1 cd ba 05				call storage_findnextid 
09a4			 
09a4 cd 1e 0e			call ishlzero 
09a7 28 cc			jr z, .sa_notfound 
09a9			 
09a9 22 5f ea			ld (store_tmppageid), hl 
09ac			 
09ac				; TODO handle file id not found 
09ac			 
09ac				if DEBUG_STORESE 
09ac					DMARK "AP2" 
09ac f5				push af  
09ad 3a c1 09			ld a, (.dmark)  
09b0 32 65 ee			ld (debug_mark),a  
09b3 3a c2 09			ld a, (.dmark+1)  
09b6 32 66 ee			ld (debug_mark+1),a  
09b9 3a c3 09			ld a, (.dmark+2)  
09bc 32 67 ee			ld (debug_mark+2),a  
09bf 18 03			jr .pastdmark  
09c1 ..			.dmark: db "AP2"  
09c4 f1			.pastdmark: pop af  
09c5			endm  
# End of macro DMARK
09c5					CALLMONITOR 
09c5 cd 6f ee			call debug_vector  
09c8				endm  
# End of macro CALLMONITOR
09c8				endif 
09c8			 
09c8				; update file extent count 
09c8			 
09c8 11 74 ea			ld de, store_page 
09cb			 
09cb cd 87 02			call storage_read_block 
09ce			 
09ce				if DEBUG_STORESE 
09ce					DMARK "AP3" 
09ce f5				push af  
09cf 3a e3 09			ld a, (.dmark)  
09d2 32 65 ee			ld (debug_mark),a  
09d5 3a e4 09			ld a, (.dmark+1)  
09d8 32 66 ee			ld (debug_mark+1),a  
09db 3a e5 09			ld a, (.dmark+2)  
09de 32 67 ee			ld (debug_mark+2),a  
09e1 18 03			jr .pastdmark  
09e3 ..			.dmark: db "AP3"  
09e6 f1			.pastdmark: pop af  
09e7			endm  
# End of macro DMARK
09e7					CALLMONITOR 
09e7 cd 6f ee			call debug_vector  
09ea				endm  
# End of macro CALLMONITOR
09ea				endif 
09ea			;	ld (store_tmppageid), hl 
09ea			 
09ea 3a 76 ea			ld a, (store_page+2) 
09ed 3c				inc a 
09ee 32 76 ea			ld (store_page+2), a 
09f1 32 67 ea			ld (store_tmpext), a 
09f4				 
09f4				if DEBUG_STORESE 
09f4					DMARK "AP3" 
09f4 f5				push af  
09f5 3a 09 0a			ld a, (.dmark)  
09f8 32 65 ee			ld (debug_mark),a  
09fb 3a 0a 0a			ld a, (.dmark+1)  
09fe 32 66 ee			ld (debug_mark+1),a  
0a01 3a 0b 0a			ld a, (.dmark+2)  
0a04 32 67 ee			ld (debug_mark+2),a  
0a07 18 03			jr .pastdmark  
0a09 ..			.dmark: db "AP3"  
0a0c f1			.pastdmark: pop af  
0a0d			endm  
# End of macro DMARK
0a0d					CALLMONITOR 
0a0d cd 6f ee			call debug_vector  
0a10				endm  
# End of macro CALLMONITOR
0a10				endif 
0a10 2a 5f ea			ld hl, (store_tmppageid) 
0a13 11 74 ea			ld de, store_page 
0a16 cd ec 02			call storage_write_block 
0a19			 
0a19				; find free block 
0a19			 
0a19 11 00 00			ld de, 0			 ; file extent to locate 
0a1c			 
0a1c 21 40 00				ld hl, STORE_BLOCK_PHY 
0a1f cd ba 05				call storage_findnextid 
0a22 cd 1e 0e			call ishlzero 
0a25 ca 75 09			jp z, .sa_notfound 
0a28			 
0a28					; TODO handle no space left 
0a28					 
0a28 22 5f ea				ld (store_tmppageid), hl 
0a2b			 
0a2b				if DEBUG_STORESE 
0a2b					DMARK "AP4" 
0a2b f5				push af  
0a2c 3a 40 0a			ld a, (.dmark)  
0a2f 32 65 ee			ld (debug_mark),a  
0a32 3a 41 0a			ld a, (.dmark+1)  
0a35 32 66 ee			ld (debug_mark+1),a  
0a38 3a 42 0a			ld a, (.dmark+2)  
0a3b 32 67 ee			ld (debug_mark+2),a  
0a3e 18 03			jr .pastdmark  
0a40 ..			.dmark: db "AP4"  
0a43 f1			.pastdmark: pop af  
0a44			endm  
# End of macro DMARK
0a44					CALLMONITOR 
0a44 cd 6f ee			call debug_vector  
0a47				endm  
# End of macro CALLMONITOR
0a47				endif 
0a47					; init the buffer with zeros so we can id if the buffer is full or not 
0a47			 
0a47 e5					push hl 
0a48 c5					push bc 
0a49			 
0a49 21 74 ea				ld hl, store_page 
0a4c 06 40				ld b, STORE_BLOCK_PHY 
0a4e 3e 00				ld a, 0 
0a50 77			.zeroblock:	ld (hl), a 
0a51 23					inc hl 
0a52 10 fc				djnz .zeroblock 
0a54			 
0a54 c1					pop bc 
0a55 e1					pop hl 
0a56			 
0a56					; construct block 
0a56			 
0a56 3a 68 ea				ld a, (store_tmpid) 
0a59 32 74 ea				ld (store_page), a   ; file id 
0a5c 3a 67 ea				ld a, (store_tmpext)   ; extent for this block 
0a5f 32 75 ea				ld (store_page+1), a 
0a62			 
0a62 e1					pop hl    ; get string to write 
0a63 06 3e				ld b, STORE_BLOCK_PHY-2       ; exclude count of file id and extent 
0a65 11 76 ea				ld de, store_page+2 
0a68			 
0a68				if DEBUG_STORESE 
0a68					DMARK "AP5" 
0a68 f5				push af  
0a69 3a 7d 0a			ld a, (.dmark)  
0a6c 32 65 ee			ld (debug_mark),a  
0a6f 3a 7e 0a			ld a, (.dmark+1)  
0a72 32 66 ee			ld (debug_mark+1),a  
0a75 3a 7f 0a			ld a, (.dmark+2)  
0a78 32 67 ee			ld (debug_mark+2),a  
0a7b 18 03			jr .pastdmark  
0a7d ..			.dmark: db "AP5"  
0a80 f1			.pastdmark: pop af  
0a81			endm  
# End of macro DMARK
0a81					CALLMONITOR 
0a81 cd 6f ee			call debug_vector  
0a84				endm  
# End of macro CALLMONITOR
0a84				endif 
0a84			 
0a84			 
0a84			 
0a84					; fill buffer with data until end of string or full block 
0a84			 
0a84 7e			.appd:		ld a, (hl) 
0a85 12					ld (de), a 
0a86 fe 00				cp 0 
0a88 28 04				jr z, .appdone 
0a8a 23					inc hl 
0a8b 13					inc de 
0a8c 10 f6				djnz .appd 
0a8e			 
0a8e e5			.appdone:	push hl		 	; save current source in case we need to go around again 
0a8f f5					push af   		; save last byte dumped 
0a90			 
0a90			 
0a90 2a 5f ea			ld hl, (store_tmppageid) 
0a93 11 74 ea			ld de, store_page 
0a96				if DEBUG_STORESE 
0a96					DMARK "AP6" 
0a96 f5				push af  
0a97 3a ab 0a			ld a, (.dmark)  
0a9a 32 65 ee			ld (debug_mark),a  
0a9d 3a ac 0a			ld a, (.dmark+1)  
0aa0 32 66 ee			ld (debug_mark+1),a  
0aa3 3a ad 0a			ld a, (.dmark+2)  
0aa6 32 67 ee			ld (debug_mark+2),a  
0aa9 18 03			jr .pastdmark  
0aab ..			.dmark: db "AP6"  
0aae f1			.pastdmark: pop af  
0aaf			endm  
# End of macro DMARK
0aaf					CALLMONITOR 
0aaf cd 6f ee			call debug_vector  
0ab2				endm  
# End of macro CALLMONITOR
0ab2				endif 
0ab2 cd ec 02				call storage_write_block 
0ab5			 
0ab5			 
0ab5				; was that a full block of data written? 
0ab5				; any more to write out? 
0ab5			 
0ab5				; if yes then set vars and jump to start of function again 
0ab5			 
0ab5 f1					pop af 
0ab6 d1					pop de 
0ab7			 
0ab7 fe 00				cp 0		 ; no, string was fully written 
0ab9 c8					ret z 
0aba			 
0aba					; setup vars for next cycle 
0aba			 
0aba 3a 68 ea				ld a, (store_tmpid) 
0abd 6f					ld l, a 
0abe 26 00				ld h, 0 
0ac0			 
0ac0 c3 77 09			 	jp storage_append	 ; yes, need to write out some more 
0ac3			 
0ac3			 
0ac3			 
0ac3			 
0ac3			 
0ac3			 
0ac3			 
0ac3			if DEBUG_STORECF 
0ac3			storageput:	 
0ac3					ret 
0ac3			storageread: 
0ac3					ld hl, store_page 
0ac3					ld b, 200 
0ac3					ld a,0 
0ac3			.src:		ld (hl),a 
0ac3					inc hl 
0ac3					djnz .src 
0ac3					 
0ac3			 
0ac3					ld de, 0 
0ac3					ld bc, 1 
0ac3					ld hl, store_page 
0ac3					call cfRead 
0ac3			 
0ac3				call cfGetError 
0ac3				ld hl,scratch 
0ac3				call hexout 
0ac3				ld hl, scratch+2 
0ac3				ld a, 0 
0ac3				ld (hl),a 
0ac3				ld de, scratch 
0ac3				ld a,display_row_1 
0ac3				call str_at_display 
0ac3				call update_display 
0ac3			 
0ac3					ld hl, store_page 
0ac3					ld (os_cur_ptr),hl 
0ac3			 
0ac3					ret 
0ac3			endif 
0ac3			 
0ac3			 
0ac3			; Clear out the main buffer store (used to remove junk before writing a new block) 
0ac3			 
0ac3			storage_clear_page: 
0ac3 e5				push hl 
0ac4 d5				push de 
0ac5 c5				push bc 
0ac6 21 74 ea			ld hl, store_page 
0ac9 3e 00			ld a, 0 
0acb 77				ld (hl), a 
0acc			 
0acc 11 75 ea			ld de, store_page+1 
0acf 01 19 01			ld bc, STORE_BLOCK_LOG+1 
0ad2			 
0ad2 ed b0			ldir 
0ad4				 
0ad4 c1				pop bc 
0ad5 d1				pop de 
0ad6 e1				pop hl 
0ad7 c9				ret 
0ad8			 
0ad8			; eof 
# End of file firmware_storage.asm
0ad8			  
0ad8			; support routines for above hardware abstraction layer  
0ad8			  
0ad8			include "firmware_general.asm"        ; general support functions  
0ad8			 
0ad8			; word look up 
0ad8			 
0ad8			; in 
0ad8			; a is the index 
0ad8			; hl is pointer start of array 
0ad8			; 
0ad8			; returns 
0ad8			; hl to the word 
0ad8			; 
0ad8			 
0ad8			table_lookup:  
0ad8 d5					push de 
0ad9 eb					ex de, hl 
0ada			 
0ada 6f					ld l, a 
0adb 26 00				ld h, 0 
0add 29					add hl, hl 
0ade 19					add hl, de 
0adf 7e					ld a, (hl) 
0ae0 23					inc hl 
0ae1 66					ld h,(hl) 
0ae2 6f					ld l, a 
0ae3			 
0ae3 d1					pop de 
0ae4 c9					ret 
0ae5			 
0ae5			; Delay loops 
0ae5			 
0ae5			 
0ae5			 
0ae5			aDelayInMS: 
0ae5 c5				push bc 
0ae6 47				ld b,a 
0ae7			msdelay: 
0ae7 c5				push bc 
0ae8				 
0ae8			 
0ae8 01 41 00			ld bc,041h 
0aeb cd 03 0b			call delayloop 
0aee c1				pop bc 
0aef 05				dec b 
0af0 20 f5			jr nz,msdelay 
0af2			 
0af2			;if CPU_CLOCK_8MHZ 
0af2			;msdelay8: 
0af2			;	push bc 
0af2			;	 
0af2			; 
0af2			;	ld bc,041h 
0af2			;	call delayloop 
0af2			;	pop bc 
0af2			;	dec b 
0af2			;	jr nz,msdelay8 
0af2			;endif 
0af2			 
0af2			 
0af2 c1				pop bc 
0af3 c9				ret 
0af4			 
0af4			 
0af4			delay250ms: 
0af4				;push de 
0af4 01 00 40			ld bc, 04000h 
0af7 c3 03 0b			jp delayloop 
0afa			delay500ms: 
0afa				;push de 
0afa 01 00 80			ld bc, 08000h 
0afd c3 03 0b			jp delayloop 
0b00			delay1s: 
0b00				;push bc 
0b00			   ; Clobbers A, d and e 
0b00 01 00 00		    ld      bc,0      ; # 0ffffh = approx 1s 
0b03			delayloop: 
0b03 c5			    push bc 
0b04			 
0b04			if BASE_CPM 
0b04 01 a0 0f			ld bc, CPM_DELAY_TUNE 
0b07			.cpmloop: 
0b07 c5				push bc 
0b08			 
0b08			endif 
0b08			 
0b08			 
0b08			 
0b08			delayloopi: 
0b08			;	push bc 
0b08			;.dl: 
0b08 cb 47		    bit     0,a    	; 8 
0b0a cb 47		    bit     0,a    	; 8 
0b0c cb 47		    bit     0,a    	; 8 
0b0e e6 ff		    and     255  	; 7 
0b10 0b			    dec     bc      	; 6 
0b11 79			    ld      a,c     	; 4 
0b12 b0			    or      b     	; 4 
0b13 c2 08 0b		    jp      nz,delayloopi   	; 10, total = 55 states/iteration 
0b16			    ; 65536 iterations * 55 states = 3604480 states = 2.00248 seconds 
0b16				;pop de 
0b16			;pop bc 
0b16			 
0b16			if BASE_CPM 
0b16 c1				pop bc 
0b17				 
0b17 0b			    dec     bc      	; 6 
0b18 79			    ld      a,c     	; 4 
0b19 b0			    or      b     	; 4 
0b1a c2 07 0b		    jp      nz,.cpmloop   	; 10, total = 55 states/iteration 
0b1d				 
0b1d			 
0b1d			endif 
0b1d			;if CPU_CLOCK_8MHZ 
0b1d			;    pop bc 
0b1d			;    push bc 
0b1d			;.dl8: 
0b1d			;    bit     0,a    	; 8 
0b1d			;    bit     0,a    	; 8 
0b1d			;    bit     0,a    	; 8 
0b1d			;    and     255  	; 7 
0b1d			;    dec     bc      	; 6 
0b1d			;    ld      a,c     	; 4 
0b1d			;    or      b     	; 4 
0b1d			;    jp      nz,.dl8   	; 10, total = 55 states/iteration 
0b1d			;endif 
0b1d			 
0b1d			;if CPU_CLOCK_10MHZ 
0b1d			;    pop bc 
0b1d			;    push bc 
0b1d			;.dl8: 
0b1d			;    bit     0,a    	; 8 
0b1d			;    bit     0,a    	; 8 
0b1d			;    bit     0,a    	; 8 
0b1d			;    and     255  	; 7 
0b1d			;    dec     bc      	; 6 
0b1d			;    ld      a,c     	; 4 
0b1d			;    or      b     	; 4 
0b1d			;    jp      nz,.dl8   	; 10, total = 55 states/iteration 
0b1d			;endif 
0b1d c1			    pop bc 
0b1e			 
0b1e c9				ret 
0b1f			 
0b1f			 
0b1f			 
0b1f			; eof 
# End of file firmware_general.asm
0b1f			include "firmware_display.asm"      ; frame buffer screen abstraction layer  
0b1f			; display routines that use the physical hardware abstraction layer 
0b1f			 
0b1f			 
0b1f			; Display an activity indicator 
0b1f			; Each call returns the new char pointed to in hl 
0b1f			 
0b1f			active: 
0b1f 3a c0 eb			ld a, (display_active) 
0b22 fe 06			cp 6 
0b24			 
0b24 20 02			jr nz, .sne 
0b26				; gone past the last one reset sequence 
0b26 3e ff			ld a, 255 
0b28			 
0b28			.sne:   
0b28				; get the next char in seq 
0b28 3c				inc a 
0b29 32 c0 eb			ld (display_active), a 
0b2c			 
0b2c				; look up the string in the table 
0b2c 21 43 0b			ld hl, actseq 
0b2f cb 27			sla a 
0b31 cd f5 0d			call addatohl 
0b34 cd 03 1f			call loadwordinhl 
0b37			 
0b37				; forth will write the to string when pushing so move from rom to ram 
0b37			 
0b37 11 c1 eb			ld de, display_active+1 
0b3a 01 02 00			ld bc, 2 
0b3d ed b0			ldir 
0b3f			 
0b3f 21 c1 eb			ld hl, display_active+1 
0b42 c9				ret 
0b43				 
0b43				 
0b43			 
0b43			 
0b43			;db "|/-\|-\" 
0b43			 
0b43			actseq: 
0b43			 
0b43 51 0b		dw spin0 
0b45 53 0b		dw spin1 
0b47 55 0b		dw spin2 
0b49 57 0b		dw spin3 
0b4b 55 0b		dw spin2 
0b4d 53 0b		dw spin1 
0b4f 51 0b		dw spin0 
0b51			 
0b51 .. 00		spin0: db " ", 0 
0b53 .. 00		spin1: db "-", 0 
0b55 .. 00		spin2: db "+", 0 
0b57 .. 00		spin3: db "#", 0 
0b59			 
0b59			 
0b59			; information window 
0b59			 
0b59			; pass hl with 1st string to display 
0b59			; pass de with 2nd string to display 
0b59			 
0b59			info_panel: 
0b59 e5				push hl 
0b5a			 
0b5a 2a c6 eb			ld hl, (display_fb_active) 
0b5d e5				push hl    ; future de destination 
0b5e 21 ab ed				ld hl, display_fb0 
0b61 22 c6 eb				ld (display_fb_active), hl 
0b64			 
0b64			;	call clear_display 
0b64			 
0b64				if BASE_CPM 
0b64 3e 2e			ld a, '.' 
0b66				else 
0b66				ld a, 165 
0b66				endif 
0b66 cd cd 0b			call fill_display 
0b69			 
0b69			 
0b69 3e 55			ld a, display_row_3 + 5 
0b6b cd db 0b			call str_at_display 
0b6e			 
0b6e e1				pop hl 
0b6f d1				pop de 
0b70			 
0b70 e5				push hl 
0b71			 
0b71			 
0b71 3e 2d			ld a, display_row_2 + 5 
0b73 cd db 0b			call str_at_display 
0b76			 
0b76			 
0b76 cd eb 0b			call update_display 
0b79 cd 08 1b			call next_page_prompt 
0b7c cd c8 0b			call clear_display 
0b7f			 
0b7f				 
0b7f 21 0a ed				ld hl, display_fb1 
0b82 22 c6 eb				ld (display_fb_active), hl 
0b85 cd eb 0b			call update_display 
0b88			 
0b88 e1				pop hl 
0b89			 
0b89 c9				ret 
0b8a			 
0b8a			 
0b8a			 
0b8a			 
0b8a			; TODO windowing? 
0b8a			 
0b8a			; TODO scroll line up 
0b8a			 
0b8a			scroll_up: 
0b8a			 
0b8a e5				push hl 
0b8b d5				push de 
0b8c c5				push bc 
0b8d			 
0b8d				; get frame buffer  
0b8d			 
0b8d 2a c6 eb			ld hl, (display_fb_active) 
0b90 e5				push hl    ; future de destination 
0b91			 
0b91 11 28 00			ld  de, display_cols 
0b94 19				add hl, de 
0b95			 
0b95 d1				pop de 
0b96			 
0b96				;ex de, hl 
0b96 01 9f 00			ld bc, display_fb_len -1  
0b99			;if DEBUG_FORTH_WORDS 
0b99			;	DMARK "SCL" 
0b99			;	CALLMONITOR 
0b99			;endif	 
0b99 ed b0			ldir 
0b9b			 
0b9b				; wipe bottom row 
0b9b			 
0b9b			 
0b9b 2a c6 eb			ld hl, (display_fb_active) 
0b9e 11 a0 00			ld de, display_cols*display_rows 
0ba1 19				add hl, de 
0ba2 06 28			ld b, display_cols 
0ba4 3e 20			ld a, ' ' 
0ba6			.scwipe: 
0ba6 77				ld (hl), a 
0ba7 2b				dec hl 
0ba8 10 fc			djnz .scwipe 
0baa			 
0baa				;pop hl 
0baa			 
0baa c1				pop bc 
0bab d1				pop de 
0bac e1				pop hl 
0bad			 
0bad c9				ret 
0bae			 
0bae			 
0bae			;scroll_upo: 
0bae			;	ld de, display_row_1 
0bae			 ;	ld hl, display_row_2 
0bae			;	ld bc, display_cols 
0bae			;	ldir 
0bae			;	ld de, display_row_2 
0bae			 ;	ld hl, display_row_3 
0bae			;	ld bc, display_cols 
0bae			;	ldir 
0bae			;	ld de, display_row_3 
0bae			 ;	ld hl, display_row_4 
0bae			;	ld bc, display_cols 
0bae			;	ldir 
0bae			 
0bae			; TODO clear row 4 
0bae			 
0bae			;	ret 
0bae			 
0bae				 
0bae			scroll_down: 
0bae			 
0bae e5				push hl 
0baf d5				push de 
0bb0 c5				push bc 
0bb1			 
0bb1				; get frame buffer  
0bb1			 
0bb1 2a c6 eb			ld hl, (display_fb_active) 
0bb4			 
0bb4 11 9f 00			ld de, display_fb_len - 1 
0bb7 19				add hl, de 
0bb8			 
0bb8 e5			push hl    ; future de destination 
0bb9			 
0bb9 11 28 00			ld  de, display_cols 
0bbc ed 52			sbc hl, de 
0bbe			 
0bbe			 
0bbe d1				pop de 
0bbf			 
0bbf			;	ex de, hl 
0bbf 01 9f 00			ld bc, display_fb_len -1  
0bc2			 
0bc2			 
0bc2				 
0bc2			 
0bc2 ed b0			ldir 
0bc4			 
0bc4				; wipe bottom row 
0bc4			 
0bc4			 
0bc4			;	ld hl, (display_fb_active) 
0bc4			;;	ld de, display_cols*display_rows 
0bc4			;;	add hl, de 
0bc4			;	ld b, display_cols 
0bc4			;	ld a, ' ' 
0bc4			;.scwiped: 
0bc4			;	ld (hl), a 
0bc4			;	dec hl 
0bc4			;	djnz .scwiped 
0bc4			 
0bc4				;pop hl 
0bc4			 
0bc4 c1				pop bc 
0bc5 d1				pop de 
0bc6 e1				pop hl 
0bc7			 
0bc7 c9				ret 
0bc8			;scroll_down: 
0bc8			;	ld de, display_row_4 
0bc8			;	ld hl, display_row_3 
0bc8			;	ld bc, display_cols 
0bc8			;	ldir 
0bc8			;	ld de, display_row_3 
0bc8			; 	ld hl, display_row_2 
0bc8			;	ld bc, display_cols 
0bc8			;	ldir 
0bc8			;	ld de, display_row_2 
0bc8			;	ld hl, display_row_1 
0bc8			;	ld bc, display_cols 
0bc8			;	ldir 
0bc8			;;; TODO clear row 1 
0bc8			;	ret 
0bc8			 
0bc8			 
0bc8			 
0bc8			 
0bc8			 
0bc8			; clear active frame buffer 
0bc8			 
0bc8			clear_display: 
0bc8 3e 20			ld a, ' ' 
0bca c3 cd 0b			jp fill_display 
0bcd			 
0bcd			; fill active frame buffer with a char in A 
0bcd			 
0bcd			fill_display: 
0bcd 06 a0			ld b,display_fb_len 
0bcf 2a c6 eb			ld hl, (display_fb_active) 
0bd2 77			.fd1:	ld (hl),a 
0bd3 23				inc hl 
0bd4 10 fc			djnz .fd1 
0bd6 23				inc hl 
0bd7 3e 00			ld a,0 
0bd9 77				ld (hl),a 
0bda			 
0bda			 
0bda c9				ret 
0bdb			; Write string (DE) at pos (A) to active frame buffer 
0bdb			 
0bdb 2a c6 eb		str_at_display:    ld hl,(display_fb_active) 
0bde 06 00					ld b,0 
0be0 4f					ld c,a 
0be1 09					add hl,bc 
0be2 1a			.sad1: 		LD   A, (DE)        ;Get character from string 
0be3 b7			            OR   A              ;Null terminator? 
0be4 c8			            RET  Z              ;Yes, so finished 
0be5 77					ld (hl),a 
0be6 23				inc hl 
0be7 13			            INC  DE             ;Point to next character 
0be8 18 f8		            JR   .sad1     ;Repeat 
0bea c9					ret 
0beb			 
0beb			; using current frame buffer write to physical display 
0beb			 
0beb			update_display: 
0beb e5				push hl 
0bec 2a c6 eb			ld hl, (display_fb_active) 
0bef cd ec 60			call write_display 
0bf2 e1				pop hl 
0bf3 c9				ret 
0bf4			 
0bf4			; TODO scrolling 
0bf4			 
0bf4			 
0bf4			; move cursor right one char 
0bf4			cursor_right: 
0bf4			 
0bf4				; TODO shift right 
0bf4				; TODO if beyond max col 
0bf4				; TODO       cursor_next_line 
0bf4			 
0bf4 c9				ret 
0bf5			 
0bf5			 
0bf5			cursor_next_line: 
0bf5				; TODO first char 
0bf5				; TODO line down 
0bf5				; TODO if past last row 
0bf5				; TODO    scroll up 
0bf5			 
0bf5 c9				ret 
0bf6			 
0bf6			cursor_left: 
0bf6				; TODO shift left 
0bf6				; TODO if beyond left  
0bf6				; TODO     cursor prev line 
0bf6				 
0bf6 c9				ret 
0bf7			 
0bf7			cursor_prev_line: 
0bf7				; TODO last char 
0bf7				; TODO line up 
0bf7				; TODO if past first row 
0bf7				; TODO   scroll down 
0bf7			 
0bf7 c9				ret 
0bf8			 
0bf8			 
0bf8			cout: 
0bf8				; A - char 
0bf8 c9				ret 
0bf9			 
0bf9			 
0bf9			; Display a menu and allow item selection (optional toggle items) 
0bf9			; 
0bf9			; format: 
0bf9			; hl pointer to word array with zero term for items 
0bf9			; e.g.    db item1 
0bf9			;         db .... 
0bf9			;         db 0 
0bf9			; 
0bf9			; a = starting menu item  
0bf9			; 
0bf9			; de = pointer item toggle array   (todo) 
0bf9			; 
0bf9			; returns item selected in a 1-... 
0bf9			; returns 0 if back button pressed 
0bf9			; 
0bf9			; NOTE: Uses system frame buffer to display 
0bf9			; 
0bf9			; LEFT, Q = go back 
0bf9			; RIGHT, SPACE, CR = select 
0bf9			; UP, A - Up 
0bf9			; DOWN, Z - Down 
0bf9			 
0bf9			 
0bf9			 
0bf9			 
0bf9			 
0bf9			menu: 
0bf9			 
0bf9					; keep array pointer 
0bf9			 
0bf9 22 6d ea				ld (store_tmp1), hl 
0bfc 32 6b ea				ld (store_tmp2), a 
0bff			 
0bff					; check for key bounce 
0bff			 
0bff			if BASE_KEV 
0bff			 
0bff			.mbounce:	call cin 
0bff					cp 0 
0bff					jr nz, .mbounce 
0bff			endif 
0bff					; for ease use ex 
0bff			 
0bff					; use menu on fb0 so as not to disrupt user screens ie a menu popup 
0bff 21 ab ed				ld hl, display_fb0 
0c02 22 c6 eb				ld (display_fb_active), hl 
0c05			 
0c05 cd c8 0b		.mloop:		call clear_display 
0c08 cd eb 0b				call update_display 
0c0b			 
0c0b					; draw selection id '>' at 1 
0c0b			 
0c0b					; init start of list display 
0c0b			 
0c0b 3e 05				ld a, 5 
0c0d 32 69 ea				ld (store_tmp3), a   ; display row count 
0c10 3a 6b ea				ld a,( store_tmp2) 
0c13 32 6c ea				ld (store_tmp2+1), a   ; display item count 
0c16			 
0c16					 
0c16			.mitem:	 
0c16			 
0c16			 
0c16 3a 6c ea				ld a,(store_tmp2+1) 
0c19 6f					ld l, a 
0c1a 26 00				ld h, 0 
0c1c 29					add hl, hl 
0c1d ed 5b 6d ea			ld de, (store_tmp1) 
0c21 19					add hl, de 
0c22 7e					ld a, (hl) 
0c23 23					inc hl 
0c24 66					ld h,(hl) 
0c25 6f					ld l, a 
0c26			 
0c26 cd 1e 0e				call ishlzero 
0c29 28 1a				jr z, .mdone 
0c2b			 
0c2b eb					ex de, hl 
0c2c 3a 69 ea				ld a, (store_tmp3) 
0c2f cd db 0b				call str_at_display 
0c32					 
0c32			 
0c32					; next item 
0c32 3a 6c ea				ld a, (store_tmp2+1) 
0c35 3c					inc a 
0c36 32 6c ea				ld (store_tmp2+1), a   ; display item count 
0c39			 
0c39			 		; next row 
0c39			 
0c39 3a 69 ea				ld a, (store_tmp3) 
0c3c c6 28				add display_cols 
0c3e 32 69 ea				ld (store_tmp3), a 
0c41			 
0c41					; at end of screen? 
0c41			 
0c41 fe 10				cp display_rows*4 
0c43 20 d1				jr nz, .mitem 
0c45			 
0c45			 
0c45			.mdone: 
0c45 cd 1e 0e				call ishlzero 
0c48 28 08				jr z, .nodn 
0c4a			 
0c4a 3e 78				ld a, display_row_4 
0c4c 11 cb 0c				ld de, .mdown 
0c4f cd db 0b				call str_at_display 
0c52			 
0c52					; draw options to fill the screens with active item on line 1 
0c52					; if current option is 2 or more then display ^ in top 
0c52			 
0c52 3a 6b ea		.nodn:		ld a, (store_tmp2) 
0c55 fe 00				cp 0 
0c57 28 08				jr z, .noup 
0c59			 
0c59 3e 00				ld a, 0 
0c5b 11 c9 0c				ld de, .mup 
0c5e cd db 0b				call str_at_display 
0c61			 
0c61 3e 02		.noup:		ld a, 2 
0c63 11 c7 0c				ld de, .msel 
0c66 cd db 0b				call str_at_display 
0c69			 
0c69					; if current option + 1 is not null then display V in bottom 
0c69					; get key 
0c69 cd eb 0b				call update_display 
0c6c			 
0c6c			 
0c6c					; handle key 
0c6c			 
0c6c cd 9e 61				call cin_wait 
0c6f			 
0c6f fe 05				cp KEY_UP 
0c71 28 2b				jr z, .mgoup 
0c73 fe 61				cp 'a' 
0c75 28 27				jr z, .mgoup 
0c77 fe 0a				cp KEY_DOWN 
0c79 28 32				jr z, .mgod 
0c7b fe 7a				cp 'z' 
0c7d 28 2e				jr z, .mgod 
0c7f fe 20				cp ' ' 
0c81 28 34				jr z, .goend 
0c83 fe 0c				cp KEY_RIGHT 
0c85 28 30				jr z, .goend 
0c87 fe 0d				cp KEY_CR 
0c89 28 2c				jr z, .goend 
0c8b fe 71				cp 'q' 
0c8d 28 0b				jr z, .goback 
0c8f			 
0c8f fe 0b				cp KEY_LEFT 
0c91 28 07				jr z, .goback 
0c93 fe 08				cp KEY_BS 
0c95 28 03				jr z, .goback 
0c97 c3 05 0c				jp .mloop 
0c9a			 
0c9a			.goback: 
0c9a 3e 00			ld a, 0 
0c9c 18 1d			jr .goend2 
0c9e			 
0c9e				; move up one 
0c9e			.mgoup: 
0c9e 3a 6b ea				ld a, (store_tmp2) 
0ca1 fe 00				cp 0 
0ca3 ca 05 0c				jp z, .mloop 
0ca6 3d					dec a 
0ca7 32 6b ea				ld (store_tmp2), a 
0caa c3 05 0c				jp .mloop 
0cad			 
0cad				; move down one 
0cad			.mgod: 
0cad 3a 6b ea				ld a, (store_tmp2) 
0cb0 3c					inc a 
0cb1 32 6b ea				ld (store_tmp2), a 
0cb4 c3 05 0c				jp .mloop 
0cb7			 
0cb7			 
0cb7			.goend: 
0cb7					; get selected item number 
0cb7			 
0cb7 3a 6b ea				ld a, (store_tmp2) 
0cba 3c					inc a 
0cbb			 
0cbb			.goend2: 
0cbb f5					push af 
0cbc			 
0cbc					; restore active fb 
0cbc					; TODO BUG assumes fb1 
0cbc			 
0cbc 21 0a ed				ld hl, display_fb1 
0cbf 22 c6 eb				ld (display_fb_active), hl 
0cc2			 
0cc2					; restore main regs 
0cc2			 
0cc2			 
0cc2 cd eb 0b				call update_display 
0cc5			 
0cc5 f1					pop af 
0cc6			 
0cc6 c9				ret 
0cc7			 
0cc7 .. 00		.msel:   db ">",0 
0cc9 .. 00		.mup:   db "^",0 
0ccb .. 00		.mdown:   db "v",0 
0ccd			 
0ccd			 
0ccd			; eof 
0ccd			 
# End of file firmware_display.asm
0ccd			include "firmware_maths.asm"     ; any odd maths stuff   TODO removed until I fix up the rng code  
0ccd			; random number generators 
0ccd			 
0ccd			 
0ccd			; https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random 
0ccd			 
0ccd			 
0ccd			;-----> Generate a random number 
0ccd			; output a=answer 0<=a<=255 
0ccd			; all registers are preserved except: af 
0ccd			random: 
0ccd e5			        push    hl 
0cce d5			        push    de 
0ccf 2a a5 eb		        ld      hl,(randData) 
0cd2 ed 5f		        ld      a,r 
0cd4 57			        ld      d,a 
0cd5 5e			        ld      e,(hl) 
0cd6 19			        add     hl,de 
0cd7 85			        add     a,l 
0cd8 ac			        xor     h 
0cd9 22 a5 eb		        ld      (randData),hl 
0cdc d1			        pop     de 
0cdd e1			        pop     hl 
0cde c9			        ret 
0cdf			 
0cdf			 
0cdf			; randData here must be a 2 byte seed located in ram. While this is a fast generator, it's generally not considered very good in terms of randomness. 
0cdf			 
0cdf			 
0cdf			 
0cdf			;------LFSR------ 
0cdf			;James Montelongo 
0cdf			;optimized by Spencer Putt 
0cdf			;out: 
0cdf			; a = 8 bit random number 
0cdf			RandLFSR: 
0cdf 21 ab eb		        ld hl,LFSRSeed+4 
0ce2 5e			        ld e,(hl) 
0ce3 23			        inc hl 
0ce4 56			        ld d,(hl) 
0ce5 23			        inc hl 
0ce6 4e			        ld c,(hl) 
0ce7 23			        inc hl 
0ce8 7e			        ld a,(hl) 
0ce9 47			        ld b,a 
0cea cb 13		        rl e  
0cec cb 12			rl d 
0cee cb 11		        rl c  
0cf0 17				rla 
0cf1 cb 13		        rl e  
0cf3 cb 12			rl d 
0cf5 cb 11		        rl c  
0cf7 17				rla 
0cf8 cb 13		        rl e  
0cfa cb 12			rl d 
0cfc cb 11		        rl c  
0cfe 17				rla 
0cff 67			        ld h,a 
0d00 cb 13		        rl e  
0d02 cb 12			rl d 
0d04 cb 11		        rl c  
0d06 17				rla 
0d07 a8			        xor b 
0d08 cb 13		        rl e  
0d0a cb 12			rl d 
0d0c ac			        xor h 
0d0d a9			        xor c 
0d0e aa			        xor d 
0d0f 21 ad eb		        ld hl,LFSRSeed+6 
0d12 11 ae eb		        ld de,LFSRSeed+7 
0d15 01 07 00		        ld bc,7 
0d18 ed b8		        lddr 
0d1a 12			        ld (de),a 
0d1b c9			        ret 
0d1c			 
0d1c			;While this may produces better numbers, it is slower, larger and requires a bigger seed than ionrandom. Assuming theres is a good seed to start, it should generate ~2^56 bytes before repeating. However if there is not a good seed(0 for example), then the numbers created will not be adequate. Unlike Ionrandom and its use of the r register, starting with the same seed the same numbers will be generated. With Ionrandom the code running may have an impact on the number generated. This means this method requires more initialization. 
0d1c			 
0d1c			;You can initialize with TI-OS's seeds, stored at seed1 and seed2, both are ti-floats but will serve the purpose.  
0d1c			 
0d1c			 
0d1c			;This is a very fast, quality pseudo-random number generator. It combines a 16-bit Linear Feedback Shift Register and a 16-bit LCG. 
0d1c			 
0d1c			prng16: 
0d1c			;Inputs: 
0d1c			;   (seed1) contains a 16-bit seed value 
0d1c			;   (seed2) contains a NON-ZERO 16-bit seed value 
0d1c			;Outputs: 
0d1c			;   HL is the result 
0d1c			;   BC is the result of the LCG, so not that great of quality 
0d1c			;   DE is preserved 
0d1c			;Destroys: 
0d1c			;   AF 
0d1c			;cycle: 4,294,901,760 (almost 4.3 billion) 
0d1c			;160cc 
0d1c			;26 bytes 
0d1c 2a 9f eb		    ld hl,(seed1) 
0d1f 44			    ld b,h 
0d20 4d			    ld c,l 
0d21 29			    add hl,hl 
0d22 29			    add hl,hl 
0d23 2c			    inc l 
0d24 09			    add hl,bc 
0d25 22 9f eb		    ld (seed1),hl 
0d28 2a 9d eb		    ld hl,(seed2) 
0d2b 29			    add hl,hl 
0d2c 9f			    sbc a,a 
0d2d e6 2d		    and %00101101 
0d2f ad			    xor l 
0d30 6f			    ld l,a 
0d31 22 9d eb		    ld (seed2),hl 
0d34 09			    add hl,bc 
0d35 c9			    ret 
0d36			 
0d36			;On their own, LCGs and LFSRs don't produce great results and are generally very cyclical, but they are very fast to compute. The 16-bit LCG in the above example will bounce around and reach each number from 0 to 65535, but the lower bits are far more predictable than the upper bits. The LFSR mixes up the predictability of a given bit's state, but it hits every number except 0, meaning there is a slightly higher chance of any given bit in the result being a 1 instead of a 0. It turns out that by adding together the outputs of these two generators, we can lose the predictability of a bit's state, while ensuring it has a 50% chance of being 0 or 1. As well, since the periods, 65536 and 65535 are coprime, then the overall period of the generator is 65535*65536, which is over 4 billion.  
0d36			 
0d36			rand32: 
0d36			;Inputs: 
0d36			;   (seed1_0) holds the lower 16 bits of the first seed 
0d36			;   (seed1_1) holds the upper 16 bits of the first seed 
0d36			;   (seed2_0) holds the lower 16 bits of the second seed 
0d36			;   (seed2_1) holds the upper 16 bits of the second seed 
0d36			;   **NOTE: seed2 must be non-zero 
0d36			;Outputs: 
0d36			;   HL is the result 
0d36			;   BC,DE can be used as lower quality values, but are not independent of HL. 
0d36			;Destroys: 
0d36			;   AF 
0d36			;Tested and passes all CAcert tests 
0d36			;Uses a very simple 32-bit LCG and 32-bit LFSR 
0d36			;it has a period of 18,446,744,069,414,584,320 
0d36			;roughly 18.4 quintillion. 
0d36			;LFSR taps: 0,2,6,7  = 11000101 
0d36			;291cc 
0d36			;seed1_0=$+1 
0d36			;    ld hl,12345 
0d36			;seed1_1=$+1 
0d36			;    ld de,6789 
0d36			;    ld b,h 
0d36			;    ld c,l 
0d36			;    add hl,hl \ rl e \ rl d 
0d36			;    add hl,hl \ rl e \ rl d 
0d36			;    inc l 
0d36			;    add hl,bc 
0d36			;    ld (seed1_0),hl 
0d36			;    ld hl,(seed1_1) 
0d36			;    adc hl,de 
0d36			;    ld (seed1_1),hl 
0d36			;    ex de,hl 
0d36			;seed2_0=$+1 
0d36			;    ld hl,9876 
0d36			;seed2_1=$+1 
0d36			;    ld bc,54321 
0d36			;    add hl,hl \ rl c \ rl b 
0d36			;    ld (seed2_1),bc 
0d36			;    sbc a,a 
0d36			;    and %11000101 
0d36			;    xor l 
0d36			;    ld l,a 
0d36			;    ld (seed2_0),hl 
0d36			;    ex de,hl 
0d36			;    add hl,bc 
0d36			;    ret 
0d36			; 
0d36			 
0d36			; 16-bit xorshift pseudorandom number generator by John Metcalf 
0d36			; 20 bytes, 86 cycles (excluding ret) 
0d36			 
0d36			; returns   hl = pseudorandom number 
0d36			; corrupts   a 
0d36			 
0d36			; generates 16-bit pseudorandom numbers with a period of 65535 
0d36			; using the xorshift method: 
0d36			 
0d36			; hl ^= hl << 7 
0d36			; hl ^= hl >> 9 
0d36			; hl ^= hl << 8 
0d36			 
0d36			; some alternative shift triplets which also perform well are: 
0d36			; 6, 7, 13; 7, 9, 13; 9, 7, 13. 
0d36			 
0d36			;  org 32768 
0d36			 
0d36			xrnd: 
0d36 2a a3 eb		  ld hl,(xrandc)       ; seed must not be 0 
0d39 3e 00		  ld a,0 
0d3b bd			  cp l 
0d3c 20 02		  jr nz, .xrnd1 
0d3e 2e 01		  ld l, 1 
0d40			.xrnd1: 
0d40			 
0d40 7c			  ld a,h 
0d41 1f			  rra 
0d42 7d			  ld a,l 
0d43 1f			  rra 
0d44 ac			  xor h 
0d45 67			  ld h,a 
0d46 7d			  ld a,l 
0d47 1f			  rra 
0d48 7c			  ld a,h 
0d49 1f			  rra 
0d4a ad			  xor l 
0d4b 6f			  ld l,a 
0d4c ac			  xor h 
0d4d 67			  ld h,a 
0d4e			 
0d4e 22 a3 eb		  ld (xrandc),hl 
0d51			 
0d51 c9			  ret 
0d52			;  
0d52			 
0d52			 
0d52			;;;; int maths 
0d52			 
0d52			; https://map.grauw.nl/articles/mult_div_shifts.php 
0d52			; Divide 16-bit values (with 16-bit result) 
0d52			; In: Divide BC by divider DE 
0d52			; Out: BC = result, HL = rest 
0d52			; 
0d52			Div16: 
0d52 21 00 00		    ld hl,0 
0d55 78			    ld a,b 
0d56 06 08		    ld b,8 
0d58			Div16_Loop1: 
0d58 17			    rla 
0d59 ed 6a		    adc hl,hl 
0d5b ed 52		    sbc hl,de 
0d5d 30 01		    jr nc,Div16_NoAdd1 
0d5f 19			    add hl,de 
0d60			Div16_NoAdd1: 
0d60 10 f6		    djnz Div16_Loop1 
0d62 17			    rla 
0d63 2f			    cpl 
0d64 47			    ld b,a 
0d65 79			    ld a,c 
0d66 48			    ld c,b 
0d67 06 08		    ld b,8 
0d69			Div16_Loop2: 
0d69 17			    rla 
0d6a ed 6a		    adc hl,hl 
0d6c ed 52		    sbc hl,de 
0d6e 30 01		    jr nc,Div16_NoAdd2 
0d70 19			    add hl,de 
0d71			Div16_NoAdd2: 
0d71 10 f6		    djnz Div16_Loop2 
0d73 17			    rla 
0d74 2f			    cpl 
0d75 41			    ld b,c 
0d76 4f			    ld c,a 
0d77 c9			ret 
0d78			 
0d78			 
0d78			;http://z80-heaven.wikidot.com/math 
0d78			; 
0d78			;Inputs: 
0d78			;     DE and A are factors 
0d78			;Outputs: 
0d78			;     A is not changed 
0d78			;     B is 0 
0d78			;     C is not changed 
0d78			;     DE is not changed 
0d78			;     HL is the product 
0d78			;Time: 
0d78			;     342+6x 
0d78			; 
0d78			Mult16: 
0d78			 
0d78 06 08		     ld b,8          ;7           7 
0d7a 21 00 00		     ld hl,0         ;10         10 
0d7d 29			       add hl,hl     ;11*8       88 
0d7e 07			       rlca          ;4*8        32 
0d7f 30 01		       jr nc,$+3     ;(12|18)*8  96+6x 
0d81 19			         add hl,de   ;--         -- 
0d82 10 f9		       djnz $-5      ;13*7+8     99 
0d84 c9			ret 
0d85			 
0d85			; 
0d85			; Square root of 16-bit value 
0d85			; In:  HL = value 
0d85			; Out:  D = result (rounded down) 
0d85			; 
0d85			;Sqr16: 
0d85			;    ld de,#0040 
0d85			;    ld a,l 
0d85			;    ld l,h 
0d85			;    ld h,d 
0d85			;    or a 
0d85			;    ld b,8 
0d85			;Sqr16_Loop: 
0d85			;    sbc hl,de 
0d85			;    jr nc,Sqr16_Skip 
0d85			;    add hl,de 
0d85			;Sqr16_Skip: 
0d85			;    ccf 
0d85			;    rl d 
0d85			;    add a,a 
0d85			;    adc hl,hl 
0d85			;    add a,a 
0d85			;    adc hl,hl 
0d85			;    djnz Sqr16_Loop 
0d85			;    ret 
0d85			; 
0d85			; 
0d85			; Divide 8-bit values 
0d85			; In: Divide E by divider C 
0d85			; Out: A = result, B = rest 
0d85			; 
0d85			Div8: 
0d85 af			    xor a 
0d86 06 08		    ld b,8 
0d88			Div8_Loop: 
0d88 cb 13		    rl e 
0d8a 17			    rla 
0d8b 91			    sub c 
0d8c 30 01		    jr nc,Div8_NoAdd 
0d8e 81			    add a,c 
0d8f			Div8_NoAdd: 
0d8f 10 f7		    djnz Div8_Loop 
0d91 47			    ld b,a 
0d92 7b			    ld a,e 
0d93 17			    rla 
0d94 2f			    cpl 
0d95 c9			    ret 
0d96			 
0d96			; 
0d96			; Multiply 8-bit value with a 16-bit value (unrolled) 
0d96			; In: Multiply A with DE 
0d96			; Out: HL = result 
0d96			; 
0d96			Mult12U: 
0d96 2e 00		    ld l,0 
0d98 87			    add a,a 
0d99 30 01		    jr nc,Mult12U_NoAdd0 
0d9b 19			    add hl,de 
0d9c			Mult12U_NoAdd0: 
0d9c 29			    add hl,hl 
0d9d 87			    add a,a 
0d9e 30 01		    jr nc,Mult12U_NoAdd1 
0da0 19			    add hl,de 
0da1			Mult12U_NoAdd1: 
0da1 29			    add hl,hl 
0da2 87			    add a,a 
0da3 30 01		    jr nc,Mult12U_NoAdd2 
0da5 19			    add hl,de 
0da6			Mult12U_NoAdd2: 
0da6 29			    add hl,hl 
0da7 87			    add a,a 
0da8 30 01		    jr nc,Mult12U_NoAdd3 
0daa 19			    add hl,de 
0dab			Mult12U_NoAdd3: 
0dab 29			    add hl,hl 
0dac 87			    add a,a 
0dad 30 01		    jr nc,Mult12U_NoAdd4 
0daf 19			    add hl,de 
0db0			Mult12U_NoAdd4: 
0db0 29			    add hl,hl 
0db1 87			    add a,a 
0db2 30 01		    jr nc,Mult12U_NoAdd5 
0db4 19			    add hl,de 
0db5			Mult12U_NoAdd5: 
0db5 29			    add hl,hl 
0db6 87			    add a,a 
0db7 30 01		    jr nc,Mult12U_NoAdd6 
0db9 19			    add hl,de 
0dba			Mult12U_NoAdd6: 
0dba 29			    add hl,hl 
0dbb 87			    add a,a 
0dbc d0			    ret nc 
0dbd 19			    add hl,de 
0dbe c9			    ret 
0dbf			 
0dbf			; 
0dbf			; Multiply 8-bit value with a 16-bit value (right rotating) 
0dbf			; In: Multiply A with DE 
0dbf			;      Put lowest value in A for most efficient calculation 
0dbf			; Out: HL = result 
0dbf			; 
0dbf			Mult12R: 
0dbf 21 00 00		    ld hl,0 
0dc2			Mult12R_Loop: 
0dc2 cb 3f		    srl a 
0dc4 30 01		    jr nc,Mult12R_NoAdd 
0dc6 19			    add hl,de 
0dc7			Mult12R_NoAdd: 
0dc7 cb 23		    sla e 
0dc9 cb 12		    rl d 
0dcb b7			    or a 
0dcc c2 c2 0d		    jp nz,Mult12R_Loop 
0dcf c9			    ret 
0dd0			 
0dd0			; 
0dd0			; Multiply 16-bit values (with 32-bit result) 
0dd0			; In: Multiply BC with DE 
0dd0			; Out: BCHL = result 
0dd0			; 
0dd0			Mult32: 
0dd0 79			    ld a,c 
0dd1 48			    ld c,b 
0dd2 21 00 00		    ld hl,0 
0dd5 06 10		    ld b,16 
0dd7			Mult32_Loop: 
0dd7 29			    add hl,hl 
0dd8 17			    rla 
0dd9 cb 11		    rl c 
0ddb 30 07		    jr nc,Mult32_NoAdd 
0ddd 19			    add hl,de 
0dde ce 00		    adc a,0 
0de0 d2 e4 0d		    jp nc,Mult32_NoAdd 
0de3 0c			    inc c 
0de4			Mult32_NoAdd: 
0de4 10 f1		    djnz Mult32_Loop 
0de6 41			    ld b,c 
0de7 4f			    ld c,a 
0de8 c9			    ret 
0de9			 
0de9			 
0de9			 
0de9			; 
0de9			; Multiply 8-bit values 
0de9			; In:  Multiply H with E 
0de9			; Out: HL = result 
0de9			; 
0de9			Mult8: 
0de9 16 00		    ld d,0 
0deb 6a			    ld l,d 
0dec 06 08		    ld b,8 
0dee			Mult8_Loop: 
0dee 29			    add hl,hl 
0def 30 01		    jr nc,Mult8_NoAdd 
0df1 19			    add hl,de 
0df2			Mult8_NoAdd: 
0df2 10 fa		    djnz Mult8_Loop 
0df4 c9			    ret 
0df5			 
0df5			 
0df5			 
0df5			 
0df5			 
0df5			 
0df5			 
0df5			 
0df5			;;http://z80-heaven.wikidot.com/math 
0df5			;;This divides DE by BC, storing the result in DE, remainder in HL 
0df5			; 
0df5			;DE_Div_BC:          ;1281-2x, x is at most 16 
0df5			;     ld a,16        ;7 
0df5			;     ld hl,0        ;10 
0df5			;     jp $+5         ;10 
0df5			;.DivLoop: 
0df5			;       add hl,bc    ;-- 
0df5			;       dec a        ;64 
0df5			;       jr z,.DivLoopEnd        ;86 
0df5			; 
0df5			;       sla e        ;128 
0df5			;       rl d         ;128 
0df5			;       adc hl,hl    ;240 
0df5			;       sbc hl,bc    ;240 
0df5			;       jr nc,.DivLoop ;23|21 
0df5			;       inc e        ;-- 
0df5			;       jp .DivLoop+1 
0df5			; 
0df5			;.DivLoopEnd: 
0df5			 
0df5			;HL_Div_C: 
0df5			;Inputs: 
0df5			;     HL is the numerator 
0df5			;     C is the denominator 
0df5			;Outputs: 
0df5			;     A is the remainder 
0df5			;     B is 0 
0df5			;     C is not changed 
0df5			;     DE is not changed 
0df5			;     HL is the quotient 
0df5			; 
0df5			;       ld b,16 
0df5			;       xor a 
0df5			;         add hl,hl 
0df5			;         rla 
0df5			;         cp c 
0df5			;         jr c,$+4 
0df5			;           inc l 
0df5			;           sub c 
0df5			;         djnz $-7 
0df5			 
0df5			; https://plutiedev.com/z80-add-8bit-to-16bit 
0df5			 
0df5			addatohl: 
0df5 85			    add   a, l    ; A = A+L 
0df6 6f			    ld    l, a    ; L = A+L 
0df7 8c			    adc   a, h    ; A = A+L+H+carry 
0df8 95			    sub   l       ; A = H+carry 
0df9 67			    ld    h, a    ; H = H+carry 
0dfa c9			ret 
0dfb			 
0dfb			addatode: 
0dfb 83			    add   a, e    ; A = A+L 
0dfc 5f			    ld    e, a    ; L = A+L 
0dfd 8a			    adc   a, d    ; A = A+L+H+carry 
0dfe 93			    sub   e       ; A = H+carry 
0dff 57			    ld    d, a    ; H = H+carry 
0e00 c9			ret 
0e01			 
0e01			 
0e01			addatobc: 
0e01 81			    add   a, c    ; A = A+L 
0e02 4f			    ld    c, a    ; L = A+L 
0e03 88			    adc   a, b    ; A = A+L+H+carry 
0e04 91			    sub   c       ; A = H+carry 
0e05 47			    ld    b, a    ; H = H+carry 
0e06 c9			ret 
0e07			 
0e07			subafromhl: 
0e07			   ; If A=0 do nothing 
0e07			    ; Otherwise flip A's sign. Since 
0e07			    ; the upper byte becomes -1, also 
0e07			    ; substract 1 from H. 
0e07 ed 44		    neg 
0e09 ca 12 0e		    jp    z, Skip 
0e0c 25			    dec   h 
0e0d			     
0e0d			    ; Now add the low byte as usual 
0e0d			    ; Two's complement takes care of 
0e0d			    ; ensuring the result is correct 
0e0d 85			    add   a, l 
0e0e 6f			    ld    l, a 
0e0f 8c			    adc   a, h 
0e10 95			    sub   l 
0e11 67			    ld    h, a 
0e12			Skip: 
0e12 c9				ret 
0e13			 
0e13			 
0e13			; compare hl and de 
0e13			; returns:  
0e13			; if hl = de, z=1, s=0, c0=0 
0e13			; if hl > de, z=0, s=0, c=0 
0e13			; if hl < de, z=0, s=1, c=1 
0e13			cmp16:	 
0e13 b7				or a 
0e14 ed 52			sbc hl,de 
0e16 e0				ret po 
0e17 7c				ld a,h 
0e18 1f				rra 
0e19 ee 40			xor 01000000B 
0e1b 37				scf 
0e1c 8f				adc a,a 
0e1d c9				ret 
0e1e			 
0e1e			 
0e1e			; test if hl contains zero   - A is destroyed 
0e1e			 
0e1e			ishlzero:    
0e1e b7				or a     ; reset flags 
0e1f 7c				ld a, h 
0e20 b5				or l        	 
0e21			 
0e21 c9				ret 
0e22			 
0e22			 
0e22			 
0e22			 
0e22			if FORTH_ENABLE_FLOATMATH 
0e22			;include "float/bbcmath.z80" 
0e22			include "float/lpfpcalc.asm" 
0e22			endif 
0e22			 
0e22			 
0e22			; eof 
0e22			 
# End of file firmware_maths.asm
0e22			include "firmware_strings.asm"   ; string handling  
0e22			 
0e22			 
0e22			; TODO string len 
0e22			; input text string, end on cr with zero term 
0e22			; a offset into frame buffer to start prompt 
0e22			; d is max length 
0e22			; e is display size TODO 
0e22			; c is current cursor position 
0e22			; hl is ptr to where string will be stored and edited directly 
0e22			 
0e22			 
0e22			; TODO check limit of buffer for new inserts 
0e22			; TODO check insert does not push beyond buffer 
0e22			; TODO scroll in a limited display area 
0e22			; TODO scroll whole screen on page wrap 
0e22			 
0e22			 
0e22			; TODO use LCD cursor? 
0e22			 
0e22			EDIT_V1: equ 0 
0e22			EDIT_V2: equ 1 
0e22			 
0e22			 
0e22			 
0e22			if EDIT_V2 
0e22			input_str: 
0e22			 
0e22 32 5e ee			    	ld (input_at_pos),a      ; save display position to start 
0e25			;		ld (input_at_cursor),a	; save draw pos of cursor relative to start 
0e25 22 61 ee				ld (input_start), hl     ; save ptr to buffer 
0e28			;		ld a, c 
0e28			;		call addatohl 
0e28			;		ld (input_ptr), hl     ; save ptr to point under the cursor 
0e28 7a					ld a,d 
0e29 32 60 ee			        ld (input_size), a       ; save length of input area 
0e2c 79					ld a, c 
0e2d 32 4f ee				ld (input_cursor),a      ; init cursor start position relative to start of string 
0e30 7b					ld a,e 
0e31 32 5f ee			        ld (input_display_size), a       ; save length of input area that is displayed TODO 
0e34			 
0e34			 
0e34					; add a trailing space to make screen refresh nicer 
0e34			 
0e34					;ld hl, (input_start) 
0e34					;push hl 
0e34					;ld a, 0 
0e34					;call strlent 
0e34					;ld a, l 
0e34					;pop hl 
0e34					;call addatohl 
0e34					;dec hl 
0e34					;ld a, ' ' 
0e34					;ld (hl), a 
0e34					;inc hl 
0e34					;ld (hl), a 
0e34					;inc hl 
0e34					;ld a, 0 
0e34					;ld (hl), a 
0e34			 
0e34			; TODO move out to cin as cursor shape is used by the 4x4 ??? 
0e34					; init cursor shape if not set by the cin routines 
0e34 21 bb eb				ld hl, cursor_shape 
0e37			if BASE_KEV 
0e37					ld a, 255 
0e37			else 
0e37 3e 23				ld a, '#' 
0e39			endif 
0e39 77					ld (hl), a 
0e3a 23					inc hl 
0e3b 3e 00				ld a, 0 
0e3d 77					ld (hl), a 
0e3e			 
0e3e 3e 09				ld a, CUR_BLINK_RATE 
0e40 32 5a ee				ld (input_cur_flash), a 
0e43 3e 01				ld a, 1 
0e45 32 59 ee				ld (input_cur_onoff),a 
0e48			.inmain:	 
0e48			 
0e48 cd 70 0f				call input_disp_ref 
0e4b			 
0e4b					; save current length of string 
0e4b			 
0e4b 2a 61 ee				ld hl, (input_start) 
0e4e 3e 00				ld a, 0 
0e50 cd 66 11				call strlent 
0e53 7d					ld a,l 
0e54 32 54 ee				ld (input_len), a 
0e57			 
0e57					;call input_disp_oncur 
0e57			 
0e57					; display current state of input buffer 
0e57			 
0e57					; clean any backspace chars 
0e57			 
0e57 3e 20				ld a, " " 
0e59 32 bb e2				ld (scratch),a 
0e5c 3e 00				ld a, 0 
0e5e 32 bc e2				ld (scratch+1),a 
0e61 3a 5e ee				ld a,(input_at_pos) 
0e64 85					add l 
0e65 11 bb e2				ld de, scratch 
0e68 cd db 0b				call str_at_display 
0e6b			 
0e6b					; pause 1ms 
0e6b			 
0e6b 3e 01				ld a, 1 
0e6d cd e5 0a				call aDelayInMS 
0e70			 
0e70			; display cursor if visible on this cycle 
0e70			 
0e70					; dec flash counter 
0e70 3a 5a ee				ld a, (input_cur_flash) 
0e73 3d					dec a 
0e74 32 5a ee				ld (input_cur_flash), a 
0e77 fe 00				cp 0 
0e79 20 0d				jr nz, .inochgstate 
0e7b			 
0e7b			 
0e7b					; reset on change of state 
0e7b 3e 09				ld a, CUR_BLINK_RATE 
0e7d 32 5a ee				ld (input_cur_flash), a 
0e80			 
0e80					; change state 
0e80 3a 59 ee				ld a,(input_cur_onoff) 
0e83 ed 44				neg 
0e85 32 59 ee				ld (input_cur_onoff),a 
0e88			 
0e88			 
0e88			 
0e88			 
0e88					; TODO is cursor visible? 
0e88					; TODO if so then over write the char at curspos pos with the cursor shape 
0e88			 
0e88								 
0e88			 
0e88			.inochgstate: 
0e88 3a 59 ee				ld a,(input_cur_onoff) 
0e8b fe ff				cp 255 
0e8d 28 0e				jr z, .skipcursor 
0e8f 3a 5e ee				ld a, (input_at_pos) 
0e92 47					ld b, a 
0e93 3a 4f ee				ld a, (input_cursor) 
0e96 80					add b 
0e97 11 bb eb				ld de, cursor_shape 
0e9a					 
0e9a cd db 0b				call str_at_display 
0e9d			 
0e9d			.skipcursor: 
0e9d				if DEBUG_INPUTV2 
0e9d			 
0e9d					ld a,(input_at_pos) 
0e9d					ld hl, LFSRSeed 
0e9d					call hexout 
0e9d					ld a, (input_cursor) 
0e9d					ld hl, LFSRSeed+2 
0e9d					call hexout 
0e9d					ld a,(input_size) 
0e9d					ld hl, LFSRSeed+4 
0e9d					call hexout 
0e9d			 
0e9d					ld a,(input_cur_onoff) 
0e9d					ld hl, LFSRSeed+6 
0e9d					call hexout 
0e9d			 
0e9d					ld a,(input_cur_flash) 
0e9d					ld hl, LFSRSeed+8 
0e9d					call hexout 
0e9d			 
0e9d					ld a,(input_len) 
0e9d					ld hl, LFSRSeed+10 
0e9d					call hexout 
0e9d					ld hl, LFSRSeed+12 
0e9d					ld a, 0 
0e9d					ld (hl),a 
0e9d					ld a, display_row_4 
0e9d					ld de, LFSRSeed 
0e9d					call str_at_display 
0e9d				endif 
0e9d cd eb 0b				call update_display 
0ea0			 
0ea0					; TODO keyboard processing 
0ea0			 
0ea0			if BASE_CPM 
0ea0 cd 9e 61				call cin_wait 
0ea3			else 
0ea3					call cin    ; _wait 
0ea3			endif 
0ea3 fe 00				cp 0 
0ea5 ca 48 0e				jp z, .inmain 
0ea8			 
0ea8 fe 0b				cp KEY_LEFT    ; cursor left 
0eaa ca 62 0f				jp z, input_left 
0ead				 
0ead fe 0c				cp KEY_RIGHT      ; cursor right 
0eaf ca 69 0f				jp z, input_right 
0eb2			 
0eb2 fe 0d				cp KEY_CR 
0eb4 c8					ret z 
0eb5			 
0eb5 fe 08				cp KEY_BS 
0eb7 ca d7 0f				jp z, input_delchar 
0eba			 
0eba fe 06				cp KEY_NEXTWORD 
0ebc ca e3 0e				jp z, input_nxtword 
0ebf			 
0ebf fe 07				cp KEY_PREVWORD 
0ec1 ca 0a 0f				jp z, input_prvword 
0ec4			 
0ec4 fe 0e				cp KEY_HOME    ; jump to start of line 
0ec6 20 08				jr nz, .ikh 
0ec8 3e 00				ld a, 0 
0eca 32 4f ee				ld (input_cursor), a 
0ecd ca 48 0e				jp z, .inmain 
0ed0			.ikh: 
0ed0			 
0ed0 fe 0f				cp KEY_END     ; jump to end of line 
0ed2 20 09				jr nz, .ike 
0ed4 3a 54 ee				ld a, (input_len) 
0ed7 32 4f ee				ld (input_cursor),a 
0eda ca 48 0e				jp z, .inmain 
0edd			.ike: 
0edd fe 05			        cp KEY_UP      ; recall last command 
0edf c8					ret z 
0ee0			;jr nz, .irec 
0ee0			; TODO next word 
0ee0			; TODO prev word 
0ee0			;  
0ee0			; 
0ee0			;	ld hl, scratch 
0ee0			;	ld de, os_last_cmd 
0ee0			;	call strcpy 
0ee0			;		jp  .inmain 
0ee0			.irec: 
0ee0			;		jr .instr1 
0ee0			 
0ee0			 
0ee0			 
0ee0					; if any keys not intercepted by above but are special keys like function keys then return them to the program 
0ee0			 
0ee0			; TODO return if any special keys are given 
0ee0			;		ld l, a 
0ee0			;		ld a, 28 ; KEY_F12   ; 27 
0ee0			;		sub l 
0ee0			;		ret m 
0ee0			;		ld a, l 
0ee0					; if no special key then insert as a char 
0ee0			 
0ee0 c3 a9 0f				jp input_inschr 
0ee3			 
0ee3				 
0ee3			input_nxtword: 
0ee3				; jump to start next word after the cursor 
0ee3			 
0ee3			.insknwn:	 
0ee3 cd 9f 0f				call input_curptr	 
0ee6 7e					ld a,(hl)	 
0ee7 fe 00				cp 0 
0ee9 ca 48 0e				jp z, .inmain    ; end of string 
0eec			 
0eec			; if we are on a word, then move off of it 
0eec			 
0eec fe 20				cp ' ' 
0eee 28 06				jr z, .inspace     ; we are on space so eat the space until we hit non-space 
0ef0 21 4f ee				ld hl, input_cursor 
0ef3 34					inc (hl) 
0ef4 18 ed				jr .insknwn 
0ef6			 
0ef6			.inspace: 
0ef6			 
0ef6 cd 9f 0f				call input_curptr	 
0ef9 7e					ld a,(hl)	 
0efa fe 00				cp 0 
0efc ca 48 0e				jp z, .inmain    ; end of string 
0eff			 
0eff			; if we are on a word, then move off of it 
0eff			 
0eff fe 20				cp ' ' 
0f01 c2 48 0e				jp nz, .inmain     ; we are on non space so at next word 
0f04 21 4f ee				ld hl, input_cursor 
0f07 34					inc (hl) 
0f08 18 ec				jr .inspace 
0f0a			 
0f0a			 
0f0a			 
0f0a			 
0f0a			input_prvword: 
0f0a				; jump to the start of previous word before the cursor 
0f0a			 
0f0a			; where are we to start with currently? 
0f0a			 
0f0a cd 9f 0f				call input_curptr	 
0f0d 7e					ld a, (hl) 
0f0e fe 20				cp ' ' 
0f10 28 1d				jr z, .inspacep     ; we are on space so eat the space until we hit non-space 
0f12			 
0f12			 
0f12			 
0f12			.inskpwn:	 
0f12 3a 4f ee				ld a,(input_cursor) 
0f15 fe 00				cp 0 
0f17 ca 48 0e				jp z, .inmain    ; start of string 
0f1a			 
0f1a			;if we are on a word, then move off of it 
0f1a			 
0f1a cd 9f 0f				call input_curptr	 
0f1d 7e					ld a, (hl) 
0f1e fe 20				cp ' ' 
0f20 28 06				jr z, .iwstart     ; we are on space so eat the space until we hit non-space 
0f22					;jp z, .inmain    ; start of string 
0f22 21 4f ee				ld hl, input_cursor 
0f25 35					dec (hl) 
0f26 18 ea				jr .inskpwn 
0f28			.iwstart: 
0f28 21 4f ee				ld hl, input_cursor 
0f2b 34					inc (hl) 
0f2c c3 48 0e				jp .inmain 
0f2f					 
0f2f			 
0f2f			.inspacep: 
0f2f			 
0f2f					;jp .inmain    ; start of string 
0f2f			 
0f2f			 
0f2f			 
0f2f 3a 4f ee				ld a,(input_cursor) 
0f32 fe 00				cp 0 
0f34 ca 48 0e				jp z, .inmain    ; start of string 
0f37			 
0f37			; if we are on a word, then move off of it 
0f37			 
0f37 cd 9f 0f				call input_curptr	 
0f3a 7e					ld a, (hl) 
0f3b fe 20				cp ' ' 
0f3d c2 46 0f				jp nz, .incharp     ; we are on non space so at end of prev word 
0f40 21 4f ee				ld hl, input_cursor 
0f43 35					dec (hl) 
0f44 18 e9				jr .inspacep 
0f46			 
0f46			 
0f46			.incharp:	 
0f46					; eat the word to get to the start 
0f46 3a 4f ee				ld a,(input_cursor) 
0f49 fe 00				cp 0 
0f4b ca 48 0e				jp z, .inmain    ; start of string 
0f4e			 
0f4e			; if we are on a word, then move off of it 
0f4e			 
0f4e cd 9f 0f				call input_curptr	 
0f51 7e					ld a, (hl) 
0f52 fe 20				cp ' ' 
0f54 28 06				jr z, .ipwordst     ; we are on space so eat the space until we hit non-space 
0f56 21 4f ee				ld hl, input_cursor 
0f59 35					dec (hl) 
0f5a 18 ea				jr .incharp 
0f5c			.ipwordst: 
0f5c					; at space before the prev word so reposition over it 
0f5c 21 4f ee				ld hl, input_cursor 
0f5f 34					inc (hl) 
0f60 18 b0				jr .inskpwn 
0f62					 
0f62			 
0f62			 
0f62			input_left: 
0f62				; move cursor left 
0f62 21 4f ee			ld hl, input_cursor 
0f65 35				dec (hl) 
0f66			;	cp 0 
0f66			;	jp z, .inmain    ; ignore left as at the start of the string 
0f66 c3 48 0e			jp .inmain 
0f69			 
0f69			input_right: 
0f69				; move cursor right 
0f69				 
0f69				;ld a, (input_size) 
0f69				;ld b, a 
0f69 21 4f ee			ld hl, input_cursor 
0f6c 34				inc (hl) 
0f6d				;dec b 
0f6d				;cp 0 
0f6d				;jp z, .inmain   ; ignore as at end of the string buffer 
0f6d				;ld a, b 
0f6d				;inc a 
0f6d				;ld (input_cursor), a 
0f6d c3 48 0e			jp .inmain 
0f70			 
0f70			 
0f70			 
0f70			input_disp_ref: 
0f70				; display the text from start of buffer (ie full refresh) 
0f70 3a 5e ee			ld a, (input_at_pos) 
0f73 2a 61 ee			ld hl,(input_start) 
0f76 eb				ex de, hl 
0f77 cd db 0b			call str_at_display  
0f7a c9				ret 
0f7b			input_disp_oncur: 
0f7b				; display the text from cursor position to end of buffer 
0f7b				; TODO position start of string at cursor position on screen 
0f7b				; TODO draw from that point on 
0f7b 3a 4f ee			ld a, (input_cursor) 
0f7e 47				ld b, a 
0f7f 3a 5e ee			ld a, (input_at_pos) 
0f82 80				add b 
0f83 48				ld c, b     ; save a 
0f84 78				ld a, b     ; inc string start for cursor 
0f85 2a 61 ee			ld hl,(input_start) 
0f88 cd f5 0d			call addatohl 
0f8b eb				ex de, hl 
0f8c 79				ld a, c 
0f8d cd db 0b			call str_at_display  
0f90 c9				ret 
0f91			 
0f91			input_nxtw: 
0f91				; Find next word 
0f91 c9				ret 
0f92			 
0f92			input_prvw: 
0f92				; Find previous word 
0f92 c9				ret 
0f93			 
0f93			input_lenrem:   
0f93				; Calculate the length of string remaining from current cursor 
0f93				; position to end of buffer (exc null term) 
0f93				 
0f93 3a 4f ee			ld a, (input_cursor) 
0f96 4f				ld c, a 
0f97 3a 60 ee			ld a, (input_size) 
0f9a 91				sub c 
0f9b 06 00			ld b, 0 
0f9d 0d				dec c 
0f9e c9				ret	 
0f9f			 
0f9f			input_curptr: 
0f9f				; calc address of the character under the cursor 
0f9f				 
0f9f 2a 61 ee			ld hl, (input_start) 
0fa2 3a 4f ee			ld a, (input_cursor) 
0fa5 cd f5 0d			call addatohl 
0fa8 c9				ret 
0fa9			 
0fa9			input_inschr: 
0fa9				; Insert char at cursor position 
0fa9 f5				push af   ; save char 
0faa				;call input_lenrem    ; get bc length of remaining string 
0faa			 
0faa				 
0faa cd 9f 0f			call input_curptr 
0fad			;	ld hl, (input_start) 
0fad			;	ld a, (input_cursor) 
0fad			;	call addatohl 
0fad				;push hl   ; save to come back to 
0fad			 
0fad				; shift everything up one to end of buffer 
0fad			 
0fad				;push hl 
0fad				;dec de 
0fad				;inc de 
0fad			;	ldir 
0fad				 
0fad				;pop hl 
0fad			 
0fad				; are we adding to the end of line? 
0fad			 
0fad 3a 4f ee			ld a, (input_cursor) 
0fb0 47				ld b, a 
0fb1 3a 54 ee			ld a, (input_len) 
0fb4 b8				cp b 
0fb5 20 09			jr nz, .insmid   ; no, insert in middle of text 
0fb7			 
0fb7				; tack on the end of the line 
0fb7 f1				pop af 
0fb8 77				ld (hl), a   ; save new char 
0fb9 23				inc hl 
0fba 3e 00			ld a, 0 
0fbc 77				ld (hl), a 
0fbd c3 69 0f			jp input_right 
0fc0				 
0fc0			.insmid: 
0fc0				; hl has insertion point so move everything up one to allow for insertion 
0fc0				;call input_shiftright 
0fc0 f1				pop af 
0fc1			 
0fc1			.shufinsmid: 
0fc1 47				ld b, a     ; b contains new char, c prev char at this position  
0fc2 7e				ld a, (hl) 
0fc3			 
0fc3 fe 00			cp 0    ; at end of string need to then dump new char and add term 
0fc5 28 07			jr z, .endinsmid 
0fc7 4f				ld c, a 
0fc8 78				ld a, b 
0fc9 77				ld (hl), a 
0fca 23				inc hl 
0fcb 79				ld a, c 
0fcc 18 f3			jr .shufinsmid 
0fce				 
0fce			 
0fce			 
0fce			 
0fce			.endinsmid: 
0fce 78				ld a, b 
0fcf 77				ld (hl), a 
0fd0 23				inc hl 
0fd1 3e 00			ld a, 0 
0fd3 77				ld (hl), a 
0fd4			 
0fd4			 
0fd4			;	ld (hl), a   ; save new char 
0fd4			 
0fd4 c3 69 0f			jp input_right 
0fd7			 
0fd7			;input_shiftright: 
0fd7			;	; shift text right at cursor, hl has shift start 
0fd7			;	push hl 
0fd7			;	push de 
0fd7			;	push bc 
0fd7			; 
0fd7			; 
0fd7			;	; move to end of string past zero term 
0fd7			;	ld hl,(input_start) 
0fd7			;	ld a, (input_len) 
0fd7			;	call addatohl 
0fd7			;	inc hl 
0fd7			;;	inc hl 
0fd7			;;	inc hl 
0fd7			;	ld a, 0 
0fd7			;	ld (hl), a 
0fd7			;;	dec hl 
0fd7			;	 
0fd7			;;	ld (hl), a 
0fd7			;;	dec hl 
0fd7			; 
0fd7			;	push hl 
0fd7			;	pop de 
0fd7			;	inc de 
0fd7			;	 
0fd7			; 
0fd7			;;	ld hl,(input_start) 
0fd7			;;	ld a, (input_cursor) 
0fd7			;;	call addatohl 
0fd7			; 
0fd7			; 
0fd7			;	; calc how many bytes from cursor pos to end of string we need to shift 
0fd7			;	call input_lenrem    ; get bc length of remaining string 
0fd7			;	;ld a, (input_cursor) 
0fd7			;	;ld c, a 
0fd7			;	ld a, (input_len) 
0fd7			;	cp 2 
0fd7			;	jr z, .iskipzero	 
0fd7			;	;sub c 
0fd7			;	;inc a 
0fd7			;	;ld c, a 
0fd7			;	;ld b, 0 
0fd7			;	inc c 
0fd7			;	inc c 
0fd7			;	; move data 
0fd7			;	lddr 
0fd7			;.iskipzero: 
0fd7			; 
0fd7			;	pop bc 
0fd7			;	pop de 
0fd7			;	pop hl 
0fd7			;	ret	 
0fd7			 
0fd7			input_delchar: 
0fd7				; Delete char at cursor position 
0fd7 cd 93 0f			call input_lenrem    ; get bc length of remaining string 
0fda 2a 61 ee			ld hl, (input_start) 
0fdd 3a 4f ee			ld a, (input_cursor) 
0fe0 cd f5 0d			call addatohl 
0fe3			 
0fe3 e5				push hl 
0fe4 d1				pop de 
0fe5 1b				dec de 
0fe6			 
0fe6			.dl:	 
0fe6 ed a0			ldi  
0fe8 7e				ld a, (hl) 
0fe9 fe 00			cp 0 
0feb 28 02			jr z, .dldone 
0fed 18 f7			jr .dl 
0fef			.dldone: 
0fef ed a0			ldi 
0ff1			 
0ff1 c3 62 0f			jp input_left 
0ff4			 
0ff4			 
0ff4			endif 
0ff4			 
0ff4			 
0ff4			 
0ff4			if EDIT_V1 
0ff4			input_str: 
0ff4			 
0ff4				    	ld (input_at_pos),a      ; save display position to start 
0ff4					add c 
0ff4					ld (input_at_cursor),a	; save draw pos of cursor 
0ff4					ld (input_start), hl     ; save ptr to buffer 
0ff4					ld a, c 
0ff4					call addatohl 
0ff4					ld (input_ptr), hl     ; save ptr to point under the cursor 
0ff4					ld a,d 
0ff4				        ld (input_size), a       ; save length of input area 
0ff4					ld a, c 
0ff4					ld (input_cursor),a      ; init cursor start position  
0ff4					ld a,e 
0ff4				        ld (input_display_size), a       ; save length of input area that is displayed TODO 
0ff4					 
0ff4					 
0ff4			 
0ff4			;		ld a,(input_ptr) 
0ff4			;		ld (input_under_cursor),a 	; save what is under the cursor 
0ff4			 
0ff4			; TODO move out to cin as cursor shape is used by the 4x4 ??? 
0ff4					; init cursor shape if not set by the cin routines 
0ff4					ld hl, cursor_shape 
0ff4			if BASE_KEV 
0ff4					ld a, 255 
0ff4			else 
0ff4					ld a, '#' 
0ff4			endif 
0ff4					ld (hl), a 
0ff4					inc hl 
0ff4					ld a, 0 
0ff4					ld (hl), a 
0ff4			 
0ff4					ld a, CUR_BLINK_RATE 
0ff4					ld (input_cur_flash), a 
0ff4					ld a, 1 
0ff4					ld (input_cur_onoff),a 
0ff4			 
0ff4			;	if DEBUG_INPUT 
0ff4			;		push af 
0ff4			;		ld a, 'I' 
0ff4			;		ld (debug_mark),a 
0ff4			;		pop af 
0ff4			;		CALLMONITOR 
0ff4			;	endif 
0ff4			.is1:		; main entry loop 
0ff4			 
0ff4			 
0ff4			 
0ff4					; pause 1ms 
0ff4			 
0ff4					ld a, 1 
0ff4					call aDelayInMS 
0ff4			 
0ff4					; dec flash counter 
0ff4					ld a, (input_cur_flash) 
0ff4					dec a 
0ff4					ld (input_cur_flash), a 
0ff4					cp 0 
0ff4					jr nz, .nochgstate 
0ff4			 
0ff4			 
0ff4					; change state 
0ff4					ld a,(input_cur_onoff) 
0ff4					neg 
0ff4					ld (input_cur_onoff),a 
0ff4			 
0ff4			 
0ff4					; reset on change of state 
0ff4					ld a, CUR_BLINK_RATE 
0ff4					ld (input_cur_flash), a 
0ff4			 
0ff4			.nochgstate: 
0ff4					 
0ff4					 
0ff4			 
0ff4					; display cursor  
0ff4			 
0ff4			;		ld hl, (input_start) 
0ff4			;		ld a, (input_cursor) 
0ff4			;		call addatohl 
0ff4			 
0ff4					; get char under cursor and replace with cursor 
0ff4			ld hl, (input_ptr) 
0ff4			;		ld a, (hl) 
0ff4			;		ld (input_under_cursor),a 
0ff4			;		ld a, '_' 
0ff4			;		ld (hl), a 
0ff4			 
0ff4					; display string 
0ff4			 
0ff4					ld de, (input_start) 
0ff4					ld a, (input_at_pos) 
0ff4					call str_at_display 
0ff4			;	        call update_display 
0ff4			 
0ff4					; find place to put the cursor 
0ff4			;		add h 
0ff4			;		ld l, display_row_1 
0ff4			;		sub l 
0ff4			; (input_at_pos) 
0ff4					;ld c, a 
0ff4			;		ld a, (input_cursor) 
0ff4			;		ld l, (input_at_pos) 
0ff4			;		;ld b, h 
0ff4			;		add l 
0ff4			;		ld (input_at_cursor),a 
0ff4					;ld l,h 
0ff4			 
0ff4			;		ld h, 0 
0ff4			;		ld l,(input_at_pos) 
0ff4			;		ld a, (input_cursor) 
0ff4			;		call addatohl 
0ff4			;		ld a, 074H-19			; TODO BUG I dont know why offset is showing 74H 
0ff4			;		call subafromhl 
0ff4			;		ld a,l 
0ff4			;		ld (input_at_cursor), a 
0ff4			 
0ff4				if DEBUG_INPUT 
0ff4					ld a, (hardware_diag) 
0ff4					cp 0 
0ff4					jr z, .skip_input_diag 
0ff4			 
0ff4					ld a,(input_at_pos) 
0ff4					ld hl, LFSRSeed 
0ff4					call hexout 
0ff4					ld a, (input_cursor) 
0ff4					ld hl, LFSRSeed+2 
0ff4					call hexout 
0ff4					ld a,(input_at_cursor) 
0ff4					ld hl, LFSRSeed+4 
0ff4					call hexout 
0ff4			 
0ff4					ld a,(input_cur_onoff) 
0ff4					ld hl, LFSRSeed+6 
0ff4					call hexout 
0ff4			 
0ff4					ld a,(input_cur_flash) 
0ff4					ld hl, LFSRSeed+8 
0ff4					call hexout 
0ff4			 
0ff4					ld a,(input_len) 
0ff4					ld hl, LFSRSeed+10 
0ff4					call hexout 
0ff4					ld hl, LFSRSeed+12 
0ff4					ld a, 0 
0ff4					ld (hl),a 
0ff4					ld a, display_row_4 
0ff4					ld de, LFSRSeed 
0ff4					call str_at_display 
0ff4					.skip_input_diag: 
0ff4				endif 
0ff4			 
0ff4					; decide on if we are showing the cursor this time round 
0ff4			 
0ff4					ld a, (input_cur_onoff) 
0ff4					cp 255 
0ff4					jr z, .skipcur 
0ff4			 
0ff4			 
0ff4					ld a,(input_at_cursor) 
0ff4					ld de, cursor_shape 
0ff4					call str_at_display 
0ff4			 
0ff4					; save length of current input string 
0ff4					ld hl, (input_start) 
0ff4					ld a, 0 
0ff4					call strlent 
0ff4					ld a,l 
0ff4					ld (input_len),a 
0ff4			 
0ff4			.skipcur: 
0ff4			 
0ff4				        call update_display 
0ff4					 
0ff4			 
0ff4			 
0ff4					; wait 
0ff4				 
0ff4					; TODO loop without wait to flash the cursor and char under cursor	 
0ff4					call cin    ; _wait 
0ff4			 
0ff4					cp 0 
0ff4					jp z, .is1 
0ff4			 
0ff4					; get ptr to char to input into 
0ff4			 
0ff4					ld c,a 
0ff4					ld hl, (input_start) 
0ff4					ld a, (input_cursor) 
0ff4					call addatohl 
0ff4					ld (input_ptr), hl 
0ff4					ld a,c 
0ff4			 
0ff4					; replace char under cursor 
0ff4			 
0ff4			;		ld hl, (input_ptr) 
0ff4			;		ld a, (input_under_cursor) 	; get what is under the cursor 
0ff4			;		ld (hl), a 
0ff4			 
0ff4			;	if DEBUG_INPUT 
0ff4			;		push af 
0ff4			;		ld a, 'i' 
0ff4			;		ld (debug_mark),a 
0ff4			;		pop af 
0ff4			;		CALLMONITOR 
0ff4			;	endif 
0ff4					cp KEY_HOME 
0ff4					jr nz, .iske 
0ff4			 
0ff4					ld a, (input_at_pos) 
0ff4					ld (input_at_cursor),a 
0ff4					ld a, 0 
0ff4					ld (input_cursor), a 
0ff4					jp .is1 
0ff4					 
0ff4			.iske:		cp KEY_END 
0ff4					jr nz, .isknw 
0ff4					jp .is1 
0ff4			 
0ff4			.isknw:		cp KEY_NEXTWORD 
0ff4					jr nz, .iskpw 
0ff4			 
0ff4			.isknwm:	ld hl, (input_ptr) 
0ff4					ld a,(hl)	 
0ff4					cp 0 
0ff4					jp z, .is1    ; end of string 
0ff4					cp ' ' 
0ff4					jp z, .is1    ; end of word 
0ff4					inc hl 
0ff4					ld (input_ptr), hl 
0ff4					ld a, (input_at_cursor) 
0ff4					inc a 
0ff4					ld (input_at_cursor), a 
0ff4					jr .isknwm 
0ff4			 
0ff4			.iskpw:		cp KEY_PREVWORD 
0ff4					jr nz, .iskl 
0ff4			.iskpwm:	 
0ff4					ld hl, (input_ptr) 
0ff4					ld a,(hl)	 
0ff4					cp 0  
0ff4					jp z, .is1    ; end of string 
0ff4					cp ' ' 
0ff4					jp z, .is1    ; end of word 
0ff4					dec hl 
0ff4					ld (input_ptr), hl 
0ff4					ld a, (input_at_cursor) 
0ff4					dec a 
0ff4					ld (input_at_cursor), a 
0ff4					jr .iskpwm 
0ff4			 
0ff4			 
0ff4			.iskl:		cp KEY_LEFT 
0ff4					jr nz, .isk1 
0ff4			 
0ff4					ld a, (input_cursor) 
0ff4			 
0ff4					cp 0 
0ff4					jp z, .is1 		; at start of line to ignore  
0ff4			 
0ff4					dec  a 		; TODO check underflow 
0ff4					ld (input_cursor), a 
0ff4			 
0ff4					ld hl, (input_ptr) 
0ff4					dec hl 
0ff4					ld (input_ptr), hl 
0ff4					 
0ff4					ld a, (input_at_cursor) 
0ff4					dec a 
0ff4					ld (input_at_cursor), a 
0ff4			 
0ff4					ld a, 1		; show cursor moving 
0ff4					ld (input_cur_onoff),a 
0ff4					ld a, CUR_BLINK_RATE 
0ff4					ld (input_cur_flash), a 
0ff4			 
0ff4					jp .is1 
0ff4			 
0ff4			.isk1:		cp KEY_RIGHT 
0ff4					jr nz, .isk2 
0ff4			 
0ff4					ld a,(input_len)		; TODO BUG why cant i load e direct? 
0ff4					ld e,a 
0ff4					ld a, (input_cursor) 
0ff4					cp e 
0ff4					jp z, .is1		; at the end of string so dont go right 
0ff4			 
0ff4					inc  a 		; TODO check overflow 
0ff4					ld (input_cursor), a 
0ff4			 
0ff4					ld a, (input_at_cursor) 
0ff4					inc a 
0ff4					ld (input_at_cursor), a 
0ff4			 
0ff4					ld hl, (input_ptr) 
0ff4					inc hl 
0ff4					ld (input_ptr), hl 
0ff4			 
0ff4					ld a, 1		; show cursor moving 
0ff4					ld (input_cur_onoff),a 
0ff4					ld a, CUR_BLINK_RATE 
0ff4					ld (input_cur_flash), a 
0ff4			 
0ff4					jp .is1 
0ff4			 
0ff4			.isk2:		cp KEY_UP 
0ff4			 
0ff4					jr nz, .isk3 
0ff4			 
0ff4					; swap last command with the current on 
0ff4			 
0ff4					; move cursor to start of string 
0ff4					ld hl, (input_start) 
0ff4					ld (input_ptr), hl 
0ff4			 
0ff4					ld a, (input_at_pos) 
0ff4					ld (input_at_cursor), a 
0ff4			 
0ff4					ld a, 0 
0ff4					ld (input_cursor), a 
0ff4					 
0ff4					; swap input and last command buffers 
0ff4			 
0ff4					ld hl, os_cli_cmd 
0ff4					ld de, os_last_cmd 
0ff4					ld b, 255 
0ff4			.swap1:		ld a, (hl) 
0ff4					ld c,a 
0ff4					ld a, (de) 
0ff4					ld (hl), a 
0ff4					ld a,c 
0ff4					ld (de),a 
0ff4					inc hl 
0ff4					inc de 
0ff4					djnz .swap1 
0ff4			 
0ff4			 
0ff4			 
0ff4			 
0ff4			 
0ff4					jp .is1 
0ff4			 
0ff4			.isk3:		cp KEY_BS 
0ff4					jr nz, .isk4 
0ff4			 
0ff4					ld a, (input_cursor) 
0ff4			 
0ff4					cp 0 
0ff4					jp z, .is1 		; at start of line to ignore  
0ff4			 
0ff4					dec  a 		; TODO check underflow 
0ff4					ld (input_cursor), a 
0ff4			 
0ff4					; hl is source 
0ff4					; de needs to be source - 1 
0ff4			 
0ff4			;		ld a, 0 
0ff4			;		dec hl 
0ff4			;		ld (hl), a 
0ff4			 
0ff4					ld hl, (input_ptr) 
0ff4					dec hl 
0ff4					ld (input_ptr), hl 
0ff4			 
0ff4					; shift all data 
0ff4			 
0ff4					push hl 
0ff4					inc hl 
0ff4					pop de 
0ff4					ld a, (input_len)		; TODO BUG WAS ld c, (input... 
0ff4					ld c,a 
0ff4					ld b,0 
0ff4					ldir  
0ff4			 
0ff4			 
0ff4			 
0ff4			 
0ff4					ld a, (input_at_cursor) 
0ff4					dec a 
0ff4					ld (input_at_cursor), a 
0ff4			 
0ff4			 
0ff4					ld a, 1		; show cursor moving 
0ff4					ld (input_cur_onoff),a 
0ff4					ld a, CUR_BLINK_RATE 
0ff4					ld (input_cur_flash), a 
0ff4			 
0ff4					; remove char 
0ff4					ld a, (input_at_cursor) 
0ff4					inc a 
0ff4					ld de,.iblank 
0ff4					call str_at_display 
0ff4			 
0ff4					jp .is1 
0ff4			 
0ff4			.isk4:		cp KEY_CR 
0ff4					jr z, .endinput 
0ff4			 
0ff4					; else add the key press to the end 
0ff4			 
0ff4					ld c, a			; save key pressed 
0ff4			 
0ff4					ld a,(hl)		; get what is currently under char 
0ff4			 
0ff4					cp 0			; we are at the end of the string 
0ff4					jr nz, .onchar 
0ff4					 
0ff4					; add a char to the end of the string 
0ff4				 
0ff4					ld (hl),c 
0ff4					inc hl 
0ff4			;		ld a,' ' 
0ff4			;		ld (hl),a 
0ff4			;		inc hl 
0ff4					ld a,0 
0ff4					ld (hl),a 
0ff4					dec hl 
0ff4			 
0ff4					ld a, (input_cursor) 
0ff4					inc a				; TODO check max string length and scroll  
0ff4					ld (input_cursor), a		; inc cursor pos 
0ff4							 
0ff4					ld a, (input_at_cursor) 
0ff4					inc a 
0ff4					ld (input_at_cursor), a 
0ff4			 
0ff4					ld hl, (input_ptr) 
0ff4					inc hl 
0ff4					ld (input_ptr), hl 
0ff4			 
0ff4					ld hl, (input_ptr) 
0ff4					inc hl 
0ff4					ld (input_ptr), hl 
0ff4			;	if DEBUG_INPUT 
0ff4			;		push af 
0ff4			;		ld a, '+' 
0ff4			;		ld (debug_mark),a 
0ff4			;		pop af 
0ff4			;		CALLMONITOR 
0ff4			;	endif 
0ff4					ld a, 1		; show cursor moving 
0ff4					ld (input_cur_onoff),a 
0ff4					ld a, CUR_BLINK_RATE 
0ff4					ld (input_cur_flash), a 
0ff4					jp .is1 
0ff4					 
0ff4			 
0ff4			 
0ff4					; if on a char then insert 
0ff4			.onchar: 
0ff4			 
0ff4					; TODO over flow check: make sure insert does not blow out buffer 
0ff4			 
0ff4					; need to do some maths to use lddr 
0ff4			 
0ff4					push hl   ; save char pos 
0ff4					push bc 
0ff4			 
0ff4					ld hl, (input_start) 
0ff4					ld a, (input_len) 
0ff4					call addatohl  		; end of string 
0ff4					inc hl 
0ff4					inc hl		; past zero term 
0ff4					push hl 
0ff4					inc hl 
0ff4					push hl  
0ff4			 
0ff4								; start and end of lddr set, now how much to move? 
0ff4			 
0ff4							 
0ff4					ld a, (input_cursor)		; BUG TODO why cant i load directly into b??? 
0ff4					ld b,a 
0ff4					ld a,(input_len) 
0ff4					ld e,a 
0ff4					sub b 
0ff4					inc a		;?? 
0ff4					inc a		;?? 
0ff4					inc a		;?? 
0ff4			 
0ff4					ld b,0 
0ff4					ld c,a 
0ff4			 
0ff4				if DEBUG_INPUT 
0ff4					push af 
0ff4					ld a, 'i' 
0ff4					ld (debug_mark),a 
0ff4					pop af 
0ff4			;		CALLMONITOR 
0ff4				endif 
0ff4					pop de 
0ff4					pop hl 
0ff4				if DEBUG_INPUT 
0ff4					push af 
0ff4					ld a, 'I' 
0ff4					ld (debug_mark),a 
0ff4					pop af 
0ff4			;		CALLMONITOR 
0ff4				endif 
0ff4					lddr 
0ff4				 
0ff4			 
0ff4			 
0ff4					; TODO have a key for insert/overwrite mode???? 
0ff4					pop bc 
0ff4					pop hl 
0ff4					ld (hl), c		; otherwise overwrite current char 
0ff4					 
0ff4			 
0ff4			 
0ff4			 
0ff4					ld a, (input_cursor) 
0ff4					inc  a 		; TODO check overflow 
0ff4					ld (input_cursor), a 
0ff4			 
0ff4					ld a, (input_at_cursor) 
0ff4					inc a 
0ff4					ld (input_at_cursor), a 
0ff4			 
0ff4					jp .is1 
0ff4			 
0ff4			.endinput:	; TODO look for end of string 
0ff4			 
0ff4					; add trailing space for end of token 
0ff4			 
0ff4					ld hl, (input_start) 
0ff4					ld a,(input_len) 
0ff4					call addatohl 
0ff4					ld a, ' ' 
0ff4					ld (hl),a 
0ff4					; TODO eof of parse marker 
0ff4			 
0ff4					inc hl 
0ff4					ld a, 0 
0ff4					ld (hl),a 
0ff4			 
0ff4			 
0ff4					ret 
0ff4			 
0ff4			.iblank: db " ",0 
0ff4			 
0ff4			 
0ff4			input_str_prev:	ld (input_at_pos), a 
0ff4					ld (input_start), hl 
0ff4					ld a,1			; add cursor 
0ff4					ld (hl),a 
0ff4					inc hl 
0ff4					ld a,0 
0ff4					ld (hl),a 
0ff4					ld (input_ptr), hl 
0ff4					ld a,d 
0ff4					ld (input_size), a 
0ff4					ld a,0 
0ff4					ld (input_cursor),a 
0ff4			.instr1:	 
0ff4			 
0ff4					; TODO do block cursor 
0ff4					; TODO switch cursor depending on the modifer key 
0ff4			 
0ff4					; update cursor shape change on key hold 
0ff4			 
0ff4					ld hl, (input_ptr) 
0ff4					dec hl 
0ff4					ld a,(cursor_shape) 
0ff4					ld (hl), a 
0ff4			 
0ff4					; display entered text 
0ff4					ld a,(input_at_pos) 
0ff4			            	CALL fLCD_Pos       ;Position cursor to location in A 
0ff4			            	LD   de, (input_start) 
0ff4			            	CALL fLCD_Str       ;Display string pointed to by DE 
0ff4			 
0ff4					call cin 
0ff4					cp 0 
0ff4					jr z, .instr1 
0ff4			 
0ff4					; proecess keyboard controls first 
0ff4			 
0ff4					ld hl,(input_ptr) 
0ff4			 
0ff4					cp KEY_CR	 ; pressing enter ends input 
0ff4					jr z, .instrcr 
0ff4			 
0ff4					cp KEY_BS 	; back space 
0ff4					jr nz, .instr2 
0ff4					; process back space 
0ff4			 
0ff4					; TODO stop back space if at start of string 
0ff4					dec hl 
0ff4					dec hl ; to over write cursor 
0ff4					ld a,(cursor_shape) 
0ff4					;ld a,0 
0ff4					ld (hl),a 
0ff4					inc hl 
0ff4					ld a," " 
0ff4					ld (hl),a 
0ff4					ld (input_ptr),hl 
0ff4					 
0ff4			 
0ff4					jr .instr1 
0ff4			 
0ff4			.instr2:	cp KEY_LEFT    ; cursor left 
0ff4					jr nz, .instr3 
0ff4					dec hl 
0ff4					ld (input_ptr),hl 
0ff4					jr .instr1 
0ff4				 
0ff4			.instr3:	cp KEY_RIGHT      ; cursor right 
0ff4					jr nz, .instr4 
0ff4					inc hl 
0ff4					ld (input_ptr),hl 
0ff4					jr .instr1 
0ff4			 
0ff4			.instr4:	cp KEY_HOME    ; jump to start of line 
0ff4					jr nz, .instr5 
0ff4					dec hl 
0ff4					ld (input_ptr),hl 
0ff4					jr .instr1 
0ff4			 
0ff4			.instr5:	cp KEY_END     ; jump to end of line 
0ff4					jr nz, .instr6 
0ff4					dec hl 
0ff4					ld (input_ptr),hl 
0ff4					jr .instr1 
0ff4			.instr6:        cp KEY_UP      ; recall last command 
0ff4					jr nz, .instrnew 
0ff4			 
0ff4				ld hl, scratch 
0ff4				ld de, os_last_cmd 
0ff4				call strcpy 
0ff4					jr .instr1 
0ff4			 
0ff4			 
0ff4			.instrnew:	; no special key pressed to see if we have room to store it 
0ff4			 
0ff4					; TODO do string size test 
0ff4			 
0ff4					dec hl ; to over write cursor 
0ff4					ld (hl),a 
0ff4					inc hl 
0ff4					ld a,(cursor_shape) 
0ff4					ld (hl),a 
0ff4					inc hl 
0ff4					ld a,0 
0ff4					ld (hl),a 
0ff4			 
0ff4					ld (input_ptr),hl 
0ff4					 
0ff4					jr .instr1 
0ff4			.instrcr:	dec hl		; remove cursor 
0ff4					ld a,' '	; TODO add a trailing space for safety 
0ff4					ld (hl),a 
0ff4					inc hl 
0ff4					ld a,0 
0ff4					ld (hl),a 
0ff4			 
0ff4			 
0ff4					; if at end of line scroll up    
0ff4					; TODO detecting only end of line 4 for scroll up  
0ff4			 
0ff4					;ld   
0ff4			 
0ff4					ret 
0ff4			 
0ff4			 
0ff4			endif 
0ff4			; strcpy hl = dest, de source 
0ff4			 
0ff4 1a			strcpy:   LD   A, (DE)        ;Get character from string 
0ff5 b7			            OR   A              ;Null terminator? 
0ff6 c8			            RET  Z              ;Yes, so finished 
0ff7 1a					ld a,(de) 
0ff8 77					ld (hl),a 
0ff9 13			            INC  DE             ;Point to next character 
0ffa 23					inc hl 
0ffb 18 f7		            JR   strcpy       ;Repeat 
0ffd c9					ret 
0ffe			 
0ffe			 
0ffe			; TODO string_at  
0ffe			; pass string which starts with lcd offset address and then null term string 
0ffe			 
0ffe			; TODO string to dec 
0ffe			; TODO string to hex 
0ffe			; TODO byte to string hex 
0ffe			; TODO byte to string dec 
0ffe			 
0ffe			 
0ffe			 
0ffe			; from z80uartmonitor 
0ffe			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
0ffe			; OUTPUT VALUE OF A IN HEX ONE NYBBLE AT A TIME 
0ffe			; pass hl for where to put the text 
0ffe			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
0ffe c5			hexout:	PUSH BC 
0fff f5					PUSH AF 
1000 47					LD B, A 
1001					; Upper nybble 
1001 cb 3f				SRL A 
1003 cb 3f				SRL A 
1005 cb 3f				SRL A 
1007 cb 3f				SRL A 
1009 cd 19 10				CALL tohex 
100c 77					ld (hl),a 
100d 23					inc hl	 
100e					 
100e					; Lower nybble 
100e 78					LD A, B 
100f e6 0f				AND 0FH 
1011 cd 19 10				CALL tohex 
1014 77					ld (hl),a 
1015 23					inc hl	 
1016					 
1016 f1					POP AF 
1017 c1					POP BC 
1018 c9					RET 
1019					 
1019			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
1019			; TRANSLATE value in lower A TO 2 HEX CHAR CODES FOR DISPLAY 
1019			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
1019			tohex: 
1019 e5					PUSH HL 
101a d5					PUSH DE 
101b 16 00				LD D, 0 
101d 5f					LD E, A 
101e 21 26 10				LD HL, .DATA 
1021 19					ADD HL, DE 
1022 7e					LD A, (HL) 
1023 d1					POP DE 
1024 e1					POP HL 
1025 c9					RET 
1026			 
1026			.DATA: 
1026 30					DEFB	30h	; 0 
1027 31					DEFB	31h	; 1 
1028 32					DEFB	32h	; 2 
1029 33					DEFB	33h	; 3 
102a 34					DEFB	34h	; 4 
102b 35					DEFB	35h	; 5 
102c 36					DEFB	36h	; 6 
102d 37					DEFB	37h	; 7 
102e 38					DEFB	38h	; 8 
102f 39					DEFB	39h	; 9 
1030 41					DEFB	41h	; A 
1031 42					DEFB	42h	; B 
1032 43					DEFB	43h	; C 
1033 44					DEFB	44h	; D 
1034 45					DEFB	45h	; E 
1035 46					DEFB	46h	; F 
1036			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
1036			;; 	ASCII char code for 0-9,A-F in A to single hex digit 
1036			;;    subtract $30, if result > 9 then subtract $7 more 
1036			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
1036			atohex: 
1036 d6 30				SUB $30 
1038 fe 0a				CP 10 
103a f8					RET M		; If result negative it was 0-9 so we're done 
103b d6 07				SUB $7		; otherwise, subtract $7 more to get to $0A-$0F 
103d c9					RET		 
103e			 
103e			 
103e			 
103e			 
103e			; Get 2 ASCII characters as hex byte from pointer in hl 
103e			 
103e			BYTERD: 
103e 16 00			LD	D,00h		;Set up 
1040 cd 48 10			CALL	HEXCON		;Get byte and convert to hex 
1043 87				ADD	A,A		;First nibble so 
1044 87				ADD	A,A		;multiply by 16 
1045 87				ADD	A,A		; 
1046 87				ADD	A,A		; 
1047 57				LD	D,A		;Save hi nibble in D 
1048			HEXCON: 
1048 7e				ld a, (hl)		;Get next chr 
1049 23				inc hl 
104a d6 30			SUB	030h		;Makes '0'-'9' equal 0-9 
104c fe 0a			CP	00Ah		;Is it 0-9 ? 
104e 38 02			JR	C,NALPHA	;If so miss next bit 
1050 d6 07			SUB	007h		;Else convert alpha 
1052			NALPHA: 
1052 b2				OR	D		;Add hi nibble back 
1053 c9				RET			; 
1054			 
1054			 
1054			; 
1054			; Get a word (16 bit) in hexadecimal notation. The result is returned in HL. 
1054			; Since the routines get_byte and therefore get_nibble are called, only valid 
1054			; characters (0-9a-f) are accepted. 
1054			; 
1054			;get_word        push    af 
1054			;                call    get_byte        ; Get the upper byte 
1054			;                ld      h, a 
1054			;                call    get_byte        ; Get the lower byte 
1054			;                ld      l, a 
1054			;                pop     af 
1054			;                ret 
1054			; 
1054			; Get a byte in hexadecimal notation. The result is returned in A. Since 
1054			; the routine get_nibble is used only valid characters are accepted - the  
1054			; input routine only accepts characters 0-9a-f. 
1054			; 
1054 c5			get_byte:        push    bc              ; Save contents of B (and C) 
1055 7e					ld a,(hl) 
1056 23					inc hl 
1057 cd 7c 10		                call    nibble2val      ; Get upper nibble 
105a cb 07		                rlc     a 
105c cb 07		                rlc     a 
105e cb 07		                rlc     a 
1060 cb 07		                rlc     a 
1062 47			                ld      b, a            ; Save upper four bits 
1063 7e					ld a,(hl) 
1064 cd 7c 10		                call    nibble2val      ; Get lower nibble 
1067 b0			                or      b               ; Combine both nibbles 
1068 c1			                pop     bc              ; Restore B (and C) 
1069 c9			                ret 
106a			; 
106a			; Get a hexadecimal digit from the serial line. This routine blocks until 
106a			; a valid character (0-9a-f) has been entered. A valid digit will be echoed 
106a			; to the serial line interface. The lower 4 bits of A contain the value of  
106a			; that particular digit. 
106a			; 
106a			;get_nibble      ld a,(hl)           ; Read a character 
106a			;                call    to_upper        ; Convert to upper case 
106a			;                call    is_hex          ; Was it a hex digit? 
106a			;                jr      nc, get_nibble  ; No, get another character 
106a			 ;               call    nibble2val      ; Convert nibble to value 
106a			 ;               call    print_nibble 
106a			 ;               ret 
106a			; 
106a			; is_hex checks a character stored in A for being a valid hexadecimal digit. 
106a			; A valid hexadecimal digit is denoted by a set C flag. 
106a			; 
106a			;is_hex          cp      'F' + 1         ; Greater than 'F'? 
106a			;                ret     nc              ; Yes 
106a			;                cp      '0'             ; Less than '0'? 
106a			;                jr      nc, is_hex_1    ; No, continue 
106a			;                ccf                     ; Complement carry (i.e. clear it) 
106a			;                ret 
106a			;is_hex_1        cp      '9' + 1         ; Less or equal '9*? 
106a			;                ret     c               ; Yes 
106a			;                cp      'A'             ; Less than 'A'? 
106a			;                jr      nc, is_hex_2    ; No, continue 
106a			;                ccf                     ; Yes - clear carry and return 
106a			;                ret 
106a			;is_hex_2        scf                     ; Set carry 
106a			;                ret 
106a			; 
106a			; Convert a single character contained in A to upper case: 
106a			; 
106a fe 61		to_upper:        cp      'a'             ; Nothing to do if not lower case 
106c d8			                ret     c 
106d fe 7b		                cp      'z' + 1         ; > 'z'? 
106f d0			                ret     nc              ; Nothing to do, either 
1070 e6 5f		                and     $5f             ; Convert to upper case 
1072 c9			                ret 
1073			 
1073			 
1073			to_lower: 
1073			 
1073			   ; if char is in [A-Z] make it lower case 
1073			 
1073			   ; enter : a = char 
1073			   ; exit  : a = lower case char 
1073			   ; uses  : af 
1073			 
1073 fe 41		   cp 'A' 
1075 d8			   ret c 
1076			    
1076 fe 5b		   cp 'Z'+1 
1078 d0			   ret nc 
1079			    
1079 f6 20		   or $20 
107b c9			   ret 
107c			 
107c			; 
107c			; Expects a hexadecimal digit (upper case!) in A and returns the 
107c			; corresponding value in A. 
107c			; 
107c fe 3a		nibble2val:      cp      '9' + 1         ; Is it a digit (less or equal '9')? 
107e 38 02		                jr      c, nibble2val_1 ; Yes 
1080 d6 07		                sub     7               ; Adjust for A-F 
1082 d6 30		nibble2val_1:    sub     '0'             ; Fold back to 0..15 
1084 e6 0f		                and     $f              ; Only return lower 4 bits 
1086 c9			                ret 
1087			; 
1087			; Print_nibble prints a single hex nibble which is contained in the lower  
1087			; four bits of A: 
1087			; 
1087			;print_nibble    push    af              ; We won't destroy the contents of A 
1087			;                and     $f              ; Just in case... 
1087			;                add     a, '0'             ; If we have a digit we are done here. 
1087			;                cp      '9' + 1         ; Is the result > 9? 
1087			;                jr      c, print_nibble_1 
1087			;                add     a, 'A' - '0' - $a  ; Take care of A-F 
1087			;print_nibble_1  call    putc            ; Print the nibble and 
1087			;                pop     af              ; restore the original value of A 
1087			;                ret 
1087			;; 
1087			;; Send a CR/LF pair: 
1087			; 
1087			;crlf            push    af 
1087			;                ld      a, cr 
1087			;                call    putc 
1087			;                ld      a, lf 
1087			;                call    putc 
1087			;                pop     af 
1087			;                ret 
1087			; 
1087			; Print_word prints the four hex digits of a word to the serial line. The  
1087			; word is expected to be in HL. 
1087			; 
1087			;print_word      push    hl 
1087			;                push    af 
1087			;                ld      a, h 
1087			;                call    print_byte 
1087			;                ld      a, l 
1087			;                call    print_byte 
1087			;                pop     af 
1087			;                pop     hl 
1087			;                ret 
1087			; 
1087			; Print_byte prints a single byte in hexadecimal notation to the serial line. 
1087			; The byte to be printed is expected to be in A. 
1087			; 
1087			;print_byte      push    af              ; Save the contents of the registers 
1087			;                push    bc 
1087			;                ld      b, a 
1087			;                rrca 
1087			;                rrca 
1087			;                rrca 
1087			;                rrca 
1087			;                call    print_nibble    ; Print high nibble 
1087			;                ld      a, b 
1087			;                call    print_nibble    ; Print low nibble 
1087			;                pop     bc              ; Restore original register contents 
1087			;                pop     af 
1087			;                ret 
1087			 
1087			 
1087			 
1087			 
1087			 
1087			fourehexhl:  
1087 7e				ld a,(hl) 
1088 cd 36 10			call atohex 
108b cb 3f				SRL A 
108d cb 3f				SRL A 
108f cb 3f				SRL A 
1091 cb 3f				SRL A 
1093 47				ld b, a 
1094 23				inc hl 
1095 7e				ld a,(hl) 
1096 23				inc hl 
1097 cd 36 10			call atohex 
109a 80				add b 
109b 57				ld d,a 
109c 7e				ld a,(hl) 
109d cd 36 10			call atohex 
10a0 cb 3f				SRL A 
10a2 cb 3f				SRL A 
10a4 cb 3f				SRL A 
10a6 cb 3f				SRL A 
10a8 47				ld b, a 
10a9 23				inc hl 
10aa 7e				ld a,(hl) 
10ab 23				inc hl 
10ac cd 36 10			call atohex 
10af 80				add b 
10b0 5f				ld e, a 
10b1 d5				push de 
10b2 e1				pop hl 
10b3 c9				ret 
10b4			 
10b4			; pass hl. returns z set if the byte at hl is a digit 
10b4			;isdigithl:  
10b4			;	push bc 
10b4			;	ld a,(hl) 
10b4			;	cp ':' 
10b4			;	jr nc, .isdf 		; > 
10b4			;	cp '0' 
10b4			;	jr c, .isdf		; < 
10b4			; 
10b4			;	; TODO find a better way to set z 
10b4			; 
10b4			;	ld b,a 
10b4			;	cp b 
10b4			;	pop bc 
10b4			;	ret 
10b4			; 
10b4			;.isdf:	; not digit so clear z 
10b4			; 
10b4			;	; TODO find a better way to unset z 
10b4			; 
10b4			;	ld b,a 
10b4			;	inc b 
10b4			;	cp b 
10b4			; 
10b4			;	pop bc 
10b4			;	ret 
10b4				 
10b4				 
10b4			 
10b4			 
10b4			; pass hl as the four byte address to load 
10b4			 
10b4			get_word_hl:  
10b4 e5				push hl 
10b5 cd 54 10			call get_byte 
10b8				 
10b8 47				ld b, a 
10b9			 
10b9 e1				pop hl 
10ba 23				inc hl 
10bb 23				inc hl 
10bc			 
10bc			; TODO not able to handle a-f  
10bc 7e				ld a,(hl) 
10bd			;	;cp ':' 
10bd			;	cp 'g' 
10bd			;	jr nc, .single_byte_hl 		; > 
10bd			;	cp 'G' 
10bd			;	jr nc, .single_byte_hl 		; > 
10bd			;	cp '0' 
10bd			;	jr c, .single_byte_hl		; < 
10bd			 
10bd				;call isdigithl 
10bd fe 00			cp 0 
10bf 28 06			jr z, .single_byte_hl 
10c1			 
10c1			.getwhln:   ; hex word so get next byte 
10c1			 
10c1 cd 54 10			call get_byte 
10c4 6f				ld l, a 
10c5 60				ld h,b 
10c6 c9				ret 
10c7 68			.single_byte_hl:   ld l,b 
10c8 26 00				ld h,0 
10ca c9					ret 
10cb			 
10cb			 
10cb			 
10cb			 
10cb 21 6b 18			ld hl,asc+1 
10ce			;	ld a, (hl) 
10ce			;	call nibble2val 
10ce cd 54 10			call get_byte 
10d1			 
10d1			;	call fourehexhl 
10d1 32 ef e2			ld (scratch+52),a 
10d4				 
10d4 21 ed e2			ld hl,scratch+50 
10d7 22 de e5			ld (os_cur_ptr),hl 
10da			 
10da c9				ret 
10db			 
10db			 
10db			; from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Other:DispA 
10db			 
10db			; Decimal Unsigned Version 
10db			 
10db			;Number in a to decimal ASCII 
10db			;adapted from 16 bit found in z80 Bits to 8 bit by Galandros 
10db			;Example: display a=56 as "056" 
10db			;input: a = number 
10db			;Output: a=0,value of a in the screen 
10db			;destroys af,bc (don't know about hl and de) 
10db			DispAToASCII: 
10db 0e 9c			ld	c,-100 
10dd cd e7 10			call	.Na1 
10e0 0e f6			ld	c,-10 
10e2 cd e7 10			call	.Na1 
10e5 0e ff			ld	c,-1 
10e7 06 2f		.Na1:	ld	b,'0'-1 
10e9 04			.Na2:	inc	b 
10ea 81				add	a,c 
10eb 38 fc			jr	c,.Na2 
10ed 91				sub	c		;works as add 100/10/1 
10ee f5				push af		;safer than ld c,a 
10ef 78				ld	a,b		;char is in b 
10f0			;TODO	CALL	PUTCHAR	;plot a char. Replace with bcall(_PutC) or similar. 
10f0 f1				pop af		;safer than ld a,c 
10f1 c9				ret 
10f2			 
10f2			; Decimal Signed Version 
10f2			 
10f2			; DispA 
10f2			; -------------------------------------------------------------- 
10f2			; Converts a signed integer value to a zero-terminated ASCII 
10f2			; string representative of that value (using radix 10). 
10f2			; -------------------------------------------------------------- 
10f2			; INPUTS: 
10f2			;     HL     Value to convert (two's complement integer). 
10f2			;     DE     Base address of string destination. (pointer). 
10f2			; -------------------------------------------------------------- 
10f2			; OUTPUTS: 
10f2			;     None 
10f2			; -------------------------------------------------------------- 
10f2			; REGISTERS/MEMORY DESTROYED 
10f2			; AF HL 
10f2			; -------------------------------------------------------------- 
10f2			 
10f2			;DispHLToASCII: 
10f2			;   push    de 
10f2			;   push    bc 
10f2			; 
10f2			;; Detect sign of HL. 
10f2			;    bit    7, h 
10f2			;    jr     z, ._DoConvert 
10f2			; 
10f2			;; HL is negative. Output '-' to string and negate HL. 
10f2			;    ld     a, '-' 
10f2			;    ld     (de), a 
10f2			;    inc    de 
10f2			; 
10f2			;; Negate HL (using two's complement) 
10f2			;    xor    a 
10f2			;    sub    l 
10f2			;    ld     l, a 
10f2			;    ld     a, 0     ; Note that XOR A or SUB A would disturb CF 
10f2			;    sbc    a, h 
10f2			;    ld     h, a 
10f2			; 
10f2			;; Convert HL to digit characters 
10f2			;._DoConvert: 
10f2			;    ld     b, 0     ; B will count character length of number 
10f2			;-   ld     a, 10 
10f2			;    syscall  .DivHLByA  ; HL = HL / A, A = remainder 
10f2			;    push   af 
10f2			;    inc    b 
10f2			;    ld     a, h 
10f2			;    or     l 
10f2			;    jr     nz, - 
10f2			; 
10f2			;; Retrieve digits from stack 
10f2			;-   pop    af 
10f2			;    or     $30 
10f2			;    ld     (de), a 
10f2			;    inc    de 
10f2			;    djnz   - 
10f2			; 
10f2			;; Terminate string with NULL 
10f2			;    xor    a 
10f2			;    ld     (de), a 
10f2			; 
10f2			;    pop    bc 
10f2			;    pop    de 
10f2			;    ret 
10f2			 
10f2			;Comments 
10f2			; 
10f2			;    This routine uses the common positive-integer radix conversion algorithm of repeatedly dividing a value by the desired radix (base case: the value is zero) and saving the remainders of each division. 
10f2			;    As this algorithm gives the digits in reverse order, they are pushed onto the hardware stack so that subsequently popping them yields the correct order. 
10f2			;    Note that the output string will not be fixed-width. 
10f2			; 
10f2			;Example Usage 
10f2			; 
10f2			;    ld    hl, -1004 
10f2			;    ld    de, OP1 
10f2			;    call  DispA 
10f2			;    ld    hl, OP1 
10f2			;    syscall  PutS 
10f2			 
10f2			 
10f2			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/string_to_uint16.z80 
10f2			 
10f2			 
10f2			;Converts an ASCII string to an unsigned 16-bit integer 
10f2			;Quits when it reaches a non-decimal digit 
10f2			 
10f2			string_to_uint16: 
10f2			atoui_16: 
10f2			;Input: 
10f2			;     DE points to the string 
10f2			;Outputs: 
10f2			;     HL is the result 
10f2			;     A is the 8-bit value of the number 
10f2			;     DE points to the byte after the number 
10f2			;Destroys: 
10f2			;     BC 
10f2			;       if the string is non-empty, BC is HL/10 
10f2			;Size:  24 bytes 
10f2			;Speed: 42+d(104+{0,9}) 
10f2			;       d is the number of digits in the number 
10f2			;       max is 640 cycles for a 5 digit number 
10f2			;Assuming no leading zeros: 
10f2			;1 digit:  146cc 
10f2			;2 digit:  250cc 
10f2			;3 digit:  354cc or 363cc (avg: 354.126cc) 
10f2			;4 digit:  458cc or 467cc (avg: 458.27cc) 
10f2			;5 digit:  562cc or 571cc or 580cc (avg: 562.4104cc) 
10f2			;avg: 544.81158447265625cc (544+13297/16384) 
10f2			;=============================================================== 
10f2 21 00 00		  ld hl,0 
10f5			.u16a: 
10f5 1a			  ld a,(de) 
10f6 d6 30		  sub 30h 
10f8 fe 0a		  cp 10 
10fa d0			  ret nc 
10fb 13			  inc de 
10fc 44			  ld b,h 
10fd 4d			  ld c,l 
10fe 29			  add hl,hl 
10ff 29			  add hl,hl 
1100 09			  add hl,bc 
1101 29			  add hl,hl 
1102 85			  add a,l 
1103 6f			  ld l,a 
1104 30 ef		  jr nc,.u16a 
1106 24			  inc h 
1107 c3 f5 10		  jp .u16a 
110a			 
110a			 
110a			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/string_to_uint16.z80 
110a			 
110a			;written by Zeda 
110a			;Converts a 16-bit unsigned integer to an ASCII string. 
110a			 
110a			uitoa_16: 
110a			;Input: 
110a			;   DE is the number to convert 
110a			;   HL points to where to write the ASCII string (up to 6 bytes needed). 
110a			;Output: 
110a			;   HL points to the null-terminated ASCII string 
110a			;      NOTE: This isn't necessarily the same as the input HL. 
110a d5			  push de 
110b c5			  push bc 
110c f5			  push af 
110d eb			  ex de,hl 
110e			 
110e 01 f0 d8		  ld bc,-10000 
1111 3e 2f		  ld a,'0'-1 
1113 3c			  inc a 
1114 09			  add hl,bc  
1115 38 fc		   jr c,$-2 
1117 12			  ld (de),a 
1118 13			  inc de 
1119			 
1119 01 e8 03		  ld bc,1000 
111c 3e 3a		  ld a,'9'+1 
111e 3d			  dec a  
111f 09			  add hl,bc  
1120 30 fc		   jr nc,$-2 
1122 12			  ld (de),a 
1123 13			  inc de 
1124			 
1124 01 9c ff		  ld bc,-100 
1127 3e 2f		  ld a,'0'-1 
1129 3c			  inc a  
112a 09			  add hl,bc  
112b 38 fc		   jr c,$-2 
112d 12			  ld (de),a 
112e 13			  inc de 
112f			 
112f 7d			  ld a,l 
1130 26 3a		  ld h,'9'+1 
1132 25			  dec h  
1133 c6 0a		  add a,10  
1135 30 fb		   jr nc,$-3 
1137 c6 30		  add a,'0' 
1139 eb			  ex de,hl 
113a 72			  ld (hl),d 
113b 23			  inc hl 
113c 77			  ld (hl),a 
113d 23			  inc hl 
113e 36 00		  ld (hl),0 
1140			 
1140			;Now strip the leading zeros 
1140 0e fa		  ld c,-6 
1142 09			  add hl,bc 
1143 3e 30		  ld a,'0' 
1145 23			  inc hl  
1146 be			  cp (hl)  
1147 28 fc		  jr z,$-2 
1149			 
1149			;Make sure that the string is non-empty! 
1149 7e			  ld a,(hl) 
114a b7			  or a 
114b 20 01		  jr nz,.atoub 
114d 2b			  dec hl 
114e			.atoub: 
114e			 
114e f1			  pop af 
114f c1			  pop bc 
1150 d1			  pop de 
1151 c9			  ret 
1152			 
1152			; from https://github.com/Zeda/Z80-Optimized-Routines/blob/master/conversion/toUpper.z80 
1152			 
1152			toUpper: 
1152			;A is the char. 
1152			;If A is a lowercase letter, this sets it to the matching uppercase 
1152			;18cc or 30cc or 41cc 
1152			;avg: 26.75cc 
1152 fe 61		  cp 'a' 
1154 d8			  ret c 
1155 fe 7b		  cp 'z'+1 
1157 d0			  ret nc 
1158 d6 20		  sub 'a'-'A' 
115a c9			  ret 
115b			 
115b			; https://tutorials.eeems.ca/ASMin28Days/lesson/day16.html#cmp 
115b			 
115b			; String Length 
115b			;With a length-prefixed string, finding the length is trivial. For a null-terminated string, the process is decidedly more involved. This is where CPIR comes in. 
115b			 
115b			; Get the length of the null-terminated string starting at $8000 hl 
115b			;    LD     HL, $8000 
115b			 
115b			strlenz: 
115b			 
115b af			    XOR    A               ; Zero is the value we are looking for. 
115c 47			    LD     B, A             ; Since we haven't the slightest clue as to the  
115d 4f			    LD     C, A             ; actual size of the string, put 0 in BC to search 
115e			                           ; 65, 536 bytes (the entire addressable memory space). 
115e ed b1		    CPIR                   ; Begin search for a byte equalling zero. 
1160			 
1160			; BC has been decremented so that it holds -length. Now need to synthesize a NEG BC. 
1160 67			    LD     H, A             ; Zero HL (basically set it to 65, 536) to get the 
1161 6f			    LD     L, A             ; number of bytes 
1162 ed 42		    SBC    HL, BC           ; Find the size. CPIR doesn't affect carry. 
1164 2b			    DEC    HL              ; Compensate for null. 
1165 c9				ret 
1166			 
1166			; Get the length of the A terminated string starting at $8000 hl 
1166			;    LD     HL, $8000 
1166			 
1166			strlent: 
1166			 
1166			                  ; A is the value we are looking for. 
1166 06 00		    LD     B, 0             ; Since we haven't the slightest clue as to the  
1168 0e 00		    LD     C, 0             ; actual size of the string, put 0 in BC to search 
116a			                           ; 65, 536 bytes (the entire addressable memory space). 
116a ed b1		    CPIR                   ; Begin search for a byte equalling zero. 
116c			 
116c			; BC has been decremented so that it holds -length. Now need to synthesize a NEG BC. 
116c 26 00		    LD     H, 0             ; Zero HL (basically set it to 65, 536) to get the 
116e 2e 00		    LD     L, 0             ; number of bytes 
1170 ed 42		    SBC    HL, BC           ; Find the size. CPIR doesn't affect carry. 
1172 2b			    DEC    HL              ; Compensate for null. 
1173 c9				ret 
1174			 
1174			 
1174			;Comparing Strings 
1174			 
1174			;IN    HL     Address of string1. 
1174			;      DE     Address of string2. 
1174			 
1174			; doc given but wrong??? 
1174			;OUT   zero   Set if string1 = string2, reset if string1 != string2. 
1174			;      carry  Set if string1 > string2, reset if string1 <= string2. 
1174			; tested 
1174			;OUT   carry set  if string1 = string2, carry  reset if string1 != string2. 
1174			 
1174			strcmp_old: 
1174 e5			    PUSH   HL 
1175 d5			    PUSH   DE 
1176			 
1176 1a			    LD     A, (DE)          ; Compare lengths to determine smaller string 
1177 be			    CP     (HL)            ; (want to minimize work). 
1178 38 01		    JR     C, Str1IsBigger 
117a 7e			    LD     A, (HL) 
117b			 
117b			Str1IsBigger: 
117b 4f			    LD     C, A             ; Put length in BC 
117c 06 00		    LD     B, 0 
117e 13			    INC    DE              ; Increment pointers to meat of string. 
117f 23			    INC    HL 
1180			 
1180			CmpLoop: 
1180 1a			    LD     A, (DE)          ; Compare bytes. 
1181 ed a1		    CPI 
1183 20 09		    JR     NZ, NoMatch      ; If (HL) != (DE), abort. 
1185 13			    INC    DE              ; Update pointer. 
1186 ea 80 11		    JP     PE, CmpLoop 
1189			 
1189 d1			    POP    DE 
118a e1			    POP    HL 
118b 1a			    LD     A, (DE)          ; Check string lengths to see if really equal. 
118c be			    CP     (HL) 
118d c9			    RET 
118e			 
118e			NoMatch: 
118e 2b			    DEC    HL 
118f be			    CP     (HL)            ; Compare again to affect carry. 
1190 d1			    POP    DE 
1191 e1			    POP    HL 
1192 c9			    RET 
1193			 
1193			;; test strmp 
1193			; 
1193			;ld de, .str1 
1193			;ld hl, .str2 
1193			;call strcmp 
1193			;jr z, .z1 
1193			;;this 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "NZ1" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			;.z1: 
1193			; 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "ZZ1" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			; 
1193			;ld de, .str1 
1193			;ld hl, .str1 
1193			;call strcmp 
1193			;jr z, .z2 
1193			;;this 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "NZ2" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			;.z2: 
1193			; 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "ZZ2" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			; 
1193			;ld de, .str1 
1193			;ld hl, .str2 
1193			;call strcmp 
1193			;jr c, .c1 
1193			; 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "Nc1" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			;.c1: 
1193			;;this 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "cc1" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			; 
1193			;ld de, .str1 
1193			;ld hl, .str1 
1193			;call strcmp 
1193			;jr c, .c2 
1193			;;this 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "Nc2" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			;.c2: 
1193			; 
1193			;	if DEBUG_FORTH_WORDS 
1193			;		DMARK "cc2" 
1193			;		CALLMONITOR 
1193			;	endif 
1193			;	NEXTW 
1193			;.str1:   db "string1",0 
1193			;.str2:   db "string2",0 
1193			 
1193			; only care about direct match or not 
1193			; hl and de strings 
1193			; zero set if the same 
1193			 
1193			strcmp: 
1193 1a				ld a, (de) 
1194 be				cp (hl) 
1195 28 02			jr z, .ssame 
1197 b7				or a 
1198 c9				ret 
1199			 
1199			.ssame:  
1199 fe 00			cp 0 
119b c8				ret z 
119c			 
119c 23				inc hl 
119d 13				inc de 
119e 18 f3			jr strcmp 
11a0				 
11a0				 
11a0			 
11a0			;Copyright (c) 2014, Luke Maurits 
11a0			;All rights reserved. 
11a0			; 
11a0			;Redistribution and use in source and binary forms, with or without 
11a0			;modification, are permitted provided that the following conditions are met: 
11a0			; 
11a0			;* Redistributions of source code must retain the above copyright notice, this 
11a0			;  list of conditions and the following disclaimer. 
11a0			; 
11a0			;* Redistributions in binary form must reproduce the above copyright notice, 
11a0			;  this list of conditions and the following disclaimer in the documentation 
11a0			;  and/or other materials provided with the distribution. 
11a0			; 
11a0			;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
11a0			;AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
11a0			;IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
11a0			;DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE 
11a0			;FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
11a0			;DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
11a0			;SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
11a0			;CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
11a0			;OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
11a0			;OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
11a0			 
11a0			; https://github.com/lmaurits/lm512/blob/master/string.z80 
11a0			 
11a0			StrictStrCmp: 
11a0				; Load next chars of each string 
11a0 1a				ld a, (de) 
11a1 47				ld b, a 
11a2 7e				ld a, (hl) 
11a3				; Compare 
11a3 b8				cp b 
11a4				; Return non-zero if chars don't match 
11a4 c0				ret nz 
11a5				; Check for end of both strings 
11a5 fe 00			cp "\0" 
11a7				; Return if strings have ended 
11a7 c8				ret z 
11a8				; Otherwise, advance to next chars 
11a8 23				inc hl 
11a9 13				inc de 
11aa 18 f4			jr StrictStrCmp 
11ac			 
11ac			;end 
11ac			; eof 
11ac			 
11ac			 
11ac			 
11ac			 
11ac			 
11ac			 
# End of file firmware_strings.asm
11ac			include "firmware_memory.asm"   ; malloc and free  
11ac			 
11ac			if DEBUG_FORTH_MALLOC_HIGH 
11ac			.mallocsize: db "Wants malloc >256",0 
11ac			.mallocasize: db "MALLOC gives >256",0 
11ac			.malloczero: db "MALLOC gives zero",0 
11ac			 
11ac			malloc_guard_zerolen: 
11ac				push hl 
11ac				push de 
11ac				push af 
11ac			 
11ac				ld de, 0 
11ac			        call cmp16 
11ac				jr nz, .lowalloz 
11ac			 
11ac				push hl 
11ac				push de 
11ac					ld hl, display_fb0 
11ac					ld (display_fb_active), hl 
11ac				call clear_display 
11ac				ld a, 0 
11ac				ld de, .malloczero 
11ac				call str_at_display 
11ac				call update_display 
11ac				call delay1s 
11ac				call delay1s 
11ac				call bp_on 
11ac			;	ld a, 0 
11ac			;	ld (os_view_disable), a 
11ac			 
11ac				pop de 
11ac				pop hl 
11ac			 
11ac				 
11ac			 
11ac				CALLMONITOR 
11ac			.lowalloz: 
11ac			 
11ac			 
11ac				pop af 
11ac				pop de 
11ac				pop hl 
11ac			ret 
11ac			 
11ac			malloc_guard_entry: 
11ac				push hl 
11ac				push de 
11ac				push af 
11ac			 
11ac			 	or a      ;clear carry flag 
11ac				push hl 
11ac				ld de, 255 
11ac				sbc hl, de 
11ac				jr c, .lowalloc 
11ac			 
11ac				push de 
11ac					ld hl, display_fb0 
11ac					ld (display_fb_active), hl 
11ac				call clear_display 
11ac				ld a, 0 
11ac				ld de, .mallocsize 
11ac				call str_at_display 
11ac				call update_display 
11ac				call delay1s 
11ac				call delay1s 
11ac			;	ld a, 0 
11ac			;	ld (os_view_disable), a 
11ac				call bp_on 
11ac			 
11ac				pop de 
11ac				pop hl 
11ac			 
11ac				 
11ac			 
11ac				CALLMONITOR 
11ac				jr .lowdone 
11ac			.lowalloc: 
11ac			 
11ac			 
11ac				pop hl 
11ac			.lowdone:	pop af 
11ac				pop de 
11ac				pop hl 
11ac			ret 
11ac			 
11ac			malloc_guard_exit: 
11ac				push hl 
11ac				push de 
11ac				push af 
11ac			 
11ac			 	or a      ;clear carry flag 
11ac				push hl 
11ac				ld de, 255 
11ac				sbc hl, de 
11ac				jr c, .lowallocx 
11ac			 
11ac				push de 
11ac					ld hl, display_fb0 
11ac					ld (display_fb_active), hl 
11ac				call clear_display 
11ac				ld a, 0 
11ac				ld de, .mallocasize 
11ac				call str_at_display 
11ac				call update_display 
11ac				call delay1s 
11ac				call delay1s 
11ac			;	ld a, 0 
11ac			;	ld (os_view_disable), a 
11ac				call bp_on 
11ac				pop de 
11ac				pop hl 
11ac			 
11ac				CALLMONITOR 
11ac				jr .lowdonex 
11ac			.lowallocx: 
11ac			 
11ac				pop hl 
11ac			.lowdonex:	pop af 
11ac				pop de 
11ac				pop hl 
11ac			ret 
11ac			endif 
11ac			 
11ac			if MALLOC_2 
11ac			; Z80 Malloc and Free Functions 
11ac			 
11ac			; Malloc Function: 
11ac			; Input: 
11ac			;   HL: Size of block to allocate 
11ac			; Output: 
11ac			;   HL: Pointer to allocated memory block (NULL if allocation fails) 
11ac			 
11ac			malloc: 
11ac				 
11ac			if DEBUG_FORTH_MALLOC_HIGH 
11ac			call malloc_guard_entry 
11ac			endif 
11ac			 
11ac			 
11ac			 
11ac			 
11ac					if DEBUG_FORTH_MALLOC 
11ac						DMARK "mal" 
11ac						CALLMONITOR 
11ac					endif 
11ac			    push af            ; Save AF register 
11ac			    ld a, l            ; Load low byte of size into A 
11ac			    or h               ; Check if size is zero 
11ac			    jp z, malloc_exit  ; If size is zero, exit with NULL pointer 
11ac			 
11ac			    ; Allocate memory 
11ac			    ld hl, (heap_start) ; Load start of heap into HL 
11ac					if DEBUG_FORTH_MALLOC 
11ac						DMARK "ma1" 
11ac						CALLMONITOR 
11ac					endif 
11ac			    call malloc_internal ; Call internal malloc function 
11ac			    pop af             ; Restore AF register 
11ac			if DEBUG_FORTH_MALLOC_HIGH 
11ac			call malloc_guard_exit 
11ac			call malloc_guard_zerolen 
11ac			endif 
11ac			    ret                ; Return 
11ac			 
11ac			; Free Function: 
11ac			; Input: 
11ac			;   HL: Pointer to memory block to free 
11ac			; Output: 
11ac			;   None 
11ac			 
11ac			free: 
11ac			    push af            ; Save AF register 
11ac			    ld a, l            ; Load low byte of pointer into A 
11ac			    or h               ; Check if pointer is NULL 
11ac			    jp z, free_exit    ; If pointer is NULL, exit 
11ac			 
11ac			    ; Free memory 
11ac			    ld hl, (heap_start) ; Load start of heap into HL 
11ac			    call free_internal  ; Call internal free function 
11ac			    pop af             ; Restore AF register 
11ac			    ret                ; Return 
11ac			 
11ac			; Internal Malloc Function: 
11ac			; Input: 
11ac			;   HL: Size of block to allocate 
11ac			; Output: 
11ac			;   HL: Pointer to allocated memory block (NULL if allocation fails) 
11ac			 
11ac			malloc_internal: 
11ac			    ld bc, 2           ; Number of bytes to allocate for management overhead 
11ac			    add hl, bc         ; Add management overhead to requested size 
11ac			    ex de, hl          ; Save total size in DE, and keep it in HL 
11ac					if DEBUG_FORTH_MALLOC 
11ac						DMARK "ma2" 
11ac						CALLMONITOR 
11ac					endif 
11ac			 
11ac			    ; Search for free memory block 
11ac			    ld de, (heap_end)  ; Load end of heap into DE 
11ac			    ld bc, 0           ; Initialize counter 
11ac			 
11ac					if DEBUG_FORTH_MALLOC 
11ac						DMARK "ma2" 
11ac						CALLMONITOR 
11ac					endif 
11ac			malloc_search_loop: 
11ac			    ; Check if current block is free 
11ac			    ld a, (hl)         ; Load current block's status (free or used) 
11ac			    cp 0               ; Compare with zero (free) 
11ac			    jr nz, malloc_skip_block_check  ; If not free, skip to the next block 
11ac			 
11ac			    ; Check if current block is large enough 
11ac			    ld a, (hl+1)       ; Load high byte of block size 
11ac			    cp l               ; Compare with low byte of requested size 
11ac			    jr nz, malloc_skip_block_check  ; If not large enough, skip to the next block 
11ac			 
11ac			    ld a, (hl+2)       ; Load low byte of block size 
11ac			    cp h               ; Compare with high byte of requested size 
11ac			    jr c, malloc_skip_block_check   ; If not large enough, skip to the next block 
11ac			 
11ac			    ; Mark block as used 
11ac			    ld (hl), 0xFF      ; Set status byte to indicate used block 
11ac			 
11ac			    ; Calculate remaining space in block 
11ac			    ld bc, 0           ; Clear BC 
11ac			    add hl, bc         ; Increment HL to point to start of data block 
11ac			    add hl, de         ; HL = HL + DE (total size) 
11ac			    ld bc, 1           ; Number of bytes to allocate for management overhead 
11ac			    add hl, bc         ; Add management overhead to start of data block 
11ac			 
11ac			    ; Save pointer to allocated block in HL 
11ac			if DEBUG_FORTH_MALLOC_HIGH 
11ac						DMARK "ma5" 
11ac			call malloc_guard_exit 
11ac			call malloc_guard_zerolen 
11ac			endif 
11ac			    ret 
11ac			 
11ac			malloc_skip_block_check: 
11ac			    ; Move to the next block 
11ac			    ld bc, 3           ; Size of management overhead 
11ac			    add hl, bc         ; Move to the next block 
11ac			    inc de             ; Increment counter 
11ac			 
11ac			    ; Check if we have reached the end of heap 
11ac			    ld a, e            ; Load low byte of heap end address 
11ac			    cp (hl)            ; Compare with low byte of current address 
11ac			    jr nz, malloc_search_loop  ; If not equal, continue searching 
11ac			    ld a, d            ; Load high byte of heap end address 
11ac			    cp 0               ; Check if it's zero (end of memory) 
11ac			    jr nz, malloc_search_loop  ; If not zero, continue searching 
11ac			 
11ac			    ; If we reached here, allocation failed 
11ac			    xor a              ; Set result to NULL 
11ac			if DEBUG_FORTH_MALLOC_HIGH 
11ac						DMARK "ma6" 
11ac			call malloc_guard_exit 
11ac			call malloc_guard_zerolen 
11ac			endif 
11ac			    ret 
11ac			malloc_exit: 
11ac			if DEBUG_FORTH_MALLOC_HIGH 
11ac						DMARK "ma7" 
11ac			call malloc_guard_exit 
11ac			call malloc_guard_zerolen 
11ac			endif 
11ac			    ret 
11ac			 
11ac			; Internal Free Function: 
11ac			; Input: 
11ac			;   HL: Pointer to memory block to free 
11ac			; Output: 
11ac			;   None 
11ac			 
11ac			free_internal: 
11ac			    ld de, (heap_start) ; Load start of heap into DE 
11ac			    ld bc, 0            ; Initialize counter 
11ac			 
11ac			free_search_loop: 
11ac			    ; Check if current block contains the pointer 
11ac			    ld a, l             ; Load low byte of pointer 
11ac			    cp (hl+1)           ; Compare with high byte of current block's address 
11ac			    jr nz, free_skip_block_check  ; If not equal, skip to the next block 
11ac			    ld a, h             ; Load high byte of pointer 
11ac			    cp (hl+2)           ; Compare with low byte of current block's address 
11ac			    jr nz, free_skip_block_check  ; If not equal, skip to the next block 
11ac			 
11ac			    ; Mark block as free 
11ac			    ld (hl), 0          ; Set status byte to indicate free block 
11ac			    ret                 ; Return 
11ac			 
11ac			free_skip_block_check: 
11ac			    ; Move to the next block 
11ac			    ld bc, 3            ; Size of management overhead 
11ac			    add hl, bc          ; Move to the next block 
11ac			    inc de              ; Increment counter 
11ac			 
11ac			    ; Check if we have reached the end of heap 
11ac			    ld a, e             ; Load low byte of heap end address 
11ac			    cp (hl)             ; Compare with low byte of current address 
11ac			    jr nz, free_search_loop  ; If not equal, continue searching 
11ac			    ld a, d             ; Load high byte of heap end address 
11ac			    cp 0                ; Check if it's zero (end of memory) 
11ac			    jr nz, free_search_loop  ; If not zero, continue searching 
11ac			 
11ac			    ; If we reached here, pointer is not found in heap 
11ac			    ret 
11ac			 
11ac			free_exit: 
11ac			    ret                 ; Return 
11ac			 
11ac			; Define heap start and end addresses 
11ac			;heap_start:    .dw 0xC000   ; Start of heap 
11ac			;heap_end:      .dw 0xE000   ; End of heap 
11ac			 
11ac			endif 
11ac			 
11ac			 
11ac			if MALLOC_1 
11ac			 
11ac			 
11ac			 
11ac			; from https://gist.github.com/tomstorey/947a8b084bad69391a4b2a1c5b6d69ca 
11ac			 
11ac			;moved to firmware.asm 
11ac			;heap_start        .equ  0x9000      ; Starting address of heap 
11ac			;heap_size         .equ  0x0100      ; Number of bytes available in heap 
11ac			 
11ac			;      .org 0 
11ac			;      jp    main 
11ac			 
11ac			 
11ac			;      .org  0x100 
11ac			;main: 
11ac			;      ld    HL, 0x8100 
11ac			;      ld    SP, HL 
11ac			; 
11ac			;      call  heap_init 
11ac			; 
11ac			;      ; Make some allocations 
11ac			;      ld    HL, 12 
11ac			;      call  malloc            ; Allocates 0x9004 
11ac			; 
11ac			;      ld    HL, 12 
11ac			;      call  malloc            ; Allocates 0x9014 
11ac			; 
11ac			;      ld    HL, 12 
11ac			;      call  malloc            ; Allocates 0x9024 
11ac			; 
11ac			;      ; Free some allocations 
11ac			;      ld    HL, 0x9014 
11ac			;      call  free 
11ac			; 
11ac			;      ld    HL, 0x9004 
11ac			;      call  free 
11ac			; 
11ac			;      ld    HL, 0x9024 
11ac			;      call  free 
11ac			; 
11ac			; 
11ac			;      halt 
11ac			 
11ac			 
11ac			;------------------------------------------------------------------------------ 
11ac			;     heap_init                                                               : 
11ac			;                                                                             : 
11ac			; Description                                                                 : 
11ac			;     Initialise the heap and make it ready for malloc and free operations.   : 
11ac			;                                                                             : 
11ac			;     The heap is maintained as a linked list, starting with an initial       : 
11ac			;     "dummy block" of zero size which is mainly used to hold a pointer to    : 
11ac			;     the first free block in the heap. Each block then points to the next    : 
11ac			;     free block within the heap, and the free list ends at the first block   : 
11ac			;     with a null pointer to the next free block.                             : 
11ac			;                                                                             : 
11ac			; Parameters                                                                  : 
11ac			;     Inputs are compile-time only. Two defines which specify the starting    : 
11ac			;     address of the heap and its size are required, along with a memory      : 
11ac			;     allocation of 4 consecutive bytes which is used for a dummy block which : 
11ac			;     principally stores a pointer to the first free block in the heap.       : 
11ac			;                                                                             : 
11ac			; Returns                                                                     : 
11ac			;     Nothing                                                                 : 
11ac			;------------------------------------------------------------------------------ 
11ac			heap_init: 
11ac e5			      push  HL 
11ad			 
11ad			      ; Initialise free list struct 
11ad 21 ce 61		      ld    HL, heap_start 
11b0 22 c9 61		      ld    (free_list), HL 
11b3 21 00 00		      ld    HL, 0 
11b6 22 cb 61		      ld    (free_list+2), HL 
11b9			 
11b9			      ; Insert first free block at bottom of heap, consumes entire heap 
11b9 21 92 e2		      ld    HL, heap_start+heap_size-4 
11bc 22 ce 61		      ld    (heap_start), HL        ; Next block (end of free list) 
11bf 21 c4 80		      ld    HL, heap_size-4 
11c2 22 d0 61		      ld    (heap_start+2), HL      ; Block size 
11c5			 
11c5			      ; Insert end of free list block at top of heap - two null words will 
11c5			      ; terminate the free list 
11c5 21 00 00		      ld    HL, 0 
11c8 22 94 e2		      ld    (heap_start+heap_size-2), HL 
11cb 22 92 e2		      ld    (heap_start+heap_size-4), HL 
11ce			 
11ce e1			      pop   HL 
11cf			 
11cf c9			      ret 
11d0			 
11d0			 
11d0			;------------------------------------------------------------------------------ 
11d0			;     malloc                                                                  : 
11d0			;                                                                             : 
11d0			; Description                                                                 : 
11d0			;     Allocates the wanted space from the heap and returns the address of the : 
11d0			;     first useable byte of the allocation.                                   : 
11d0			;                                                                             : 
11d0			;     Allocations can happen in one of two ways:                              : 
11d0			;                                                                             : 
11d0			;     1. A free block may be found which is the exact size wanted. In this    : 
11d0			;        case the block is removed from the free list and retuedn to the      : 
11d0			;        caller.                                                              : 
11d0			;     2. A free block may be found which is larger than the size wanted. In   : 
11d0			;        this case, the larger block is split into two. The first portion of  : 
11d0			;        this block will become the requested space by the malloc call and    : 
11d0			;        is returned to the caller. The second portion becomes a new free     : 
11d0			;        block, and the free list is adjusted to maintain continuity via this : 
11d0			;        newly created block.                                                 : 
11d0			;                                                                             : 
11d0			;     malloc does not set any initial value in the allocated space, the       : 
11d0			;     caller is required to do this as required.                              : 
11d0			;                                                                             : 
11d0			;     This implementation of malloc uses the stack exclusively, and is        : 
11d0			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
11d0			;     advisable to disable interrupts before calling malloc, and recommended  : 
11d0			;     to avoid the use of malloc inside ISRs in general.                      : 
11d0			;                                                                             : 
11d0			;     NOTE: heap_init must be called before malloc and free can be used.      : 
11d0			;                                                                             : 
11d0			; Parameters                                                                  : 
11d0			;     HL  Number of bytes wanted                                              : 
11d0			;                                                                             : 
11d0			; Returns                                                                     : 
11d0			;     HL  Address of the first useable byte of the allocation                 : 
11d0			;                                                                             : 
11d0			; Flags                                                                       : 
11d0			;     Z   Set if the allocation did not succeed, clear otherwise              : 
11d0			;                                                                             : 
11d0			; Stack frame                                                                 : 
11d0			;       |             |                                                       : 
11d0			;       +-------------+                                                       : 
11d0			;       |     BC      |                                                       : 
11d0			;       +-------------+                                                       : 
11d0			;       |     DE      |                                                       : 
11d0			;       +-------------+                                                       : 
11d0			;       |     IX      |                                                       : 
11d0			;       +-------------+                                                       : 
11d0			;       |  prev_free  |                                                       : 
11d0			;   +4  +-------------+                                                       : 
11d0			;       |  this_free  |                                                       : 
11d0			;   +2  +-------------+                                                       : 
11d0			;       |  next_free  |                                                       : 
11d0			;   +0  +-------------+                                                       : 
11d0			;       |             |                                                       : 
11d0			;                                                                             : 
11d0			;------------------------------------------------------------------------------ 
11d0			 
11d0			 
11d0			;malloc: 
11d0			; 
11d0			;	SAVESP ON 1 
11d0			; 
11d0			;	call malloc_code 
11d0			; 
11d0			;	CHECKSP ON 1 
11d0			;	ret 
11d0			 
11d0			 
11d0			malloc: 
11d0 c5			      push  BC 
11d1 d5			      push  DE 
11d2 dd e5		      push  IX 
11d4			if DEBUG_FORTH_MALLOC_HIGH 
11d4			call malloc_guard_entry 
11d4			endif 
11d4			 
11d4					if DEBUG_FORTH_MALLOC 
11d4						DMARK "mal" 
11d4						CALLMONITOR 
11d4					endif 
11d4 7c			      ld    A, H                    ; Exit if no space requested 
11d5 b5			      or    L 
11d6 ca 95 12		      jp    Z, malloc_early_exit 
11d9			 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			; 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			;inc hl 
11d9			 
11d9			 
11d9			 
11d9			 
11d9					if DEBUG_FORTH_MALLOC 
11d9						DMARK "maA" 
11d9						CALLMONITOR 
11d9					endif 
11d9			      ; Set up stack frame 
11d9 eb			      ex    DE, HL 
11da 21 fa ff		      ld    HL, -6                  ; Reserve 6 bytes for stack frame 
11dd 39			      add   HL, SP 
11de f9			      ld    SP, HL 
11df dd 21 00 00	      ld    IX, 0                   ; Use IX as a frame pointer 
11e3 dd 39		      add   IX, SP 
11e5			 
11e5			      ; Setup initial state 
11e5 21 04 00		      ld    HL, 4                   ; want must also include space used by block struct 
11e8 19			      add   HL, DE 
11e9			 
11e9 44			      ld    B, H                    ; Move want to BC 
11ea 4d			      ld    C, L 
11eb			 
11eb 21 c9 61		      ld    HL, free_list           ; Store prev_free ptr to stack 
11ee dd 75 04		      ld    (IX+4), L 
11f1 dd 74 05		      ld    (IX+5), H 
11f4			 
11f4 5e			      ld    E, (HL)                 ; Store this_free ptr to stack 
11f5 23			      inc   HL 
11f6 56			      ld    D, (HL) 
11f7 dd 73 02		      ld    (IX+2), E 
11fa dd 72 03		      ld    (IX+3), D 
11fd eb			      ex    DE, HL                  ; this_free ptr into HL 
11fe			 
11fe					if DEBUG_FORTH_MALLOC 
11fe						DMARK "maB" 
11fe						CALLMONITOR 
11fe					endif 
11fe			      ; Loop through free block list to find some space 
11fe			malloc_find_space: 
11fe 5e			      ld    E, (HL)                 ; Load next_free ptr into DE 
11ff 23			      inc   HL 
1200 56			      ld    D, (HL) 
1201			 
1201 7a			      ld    A, D                    ; Check for null next_free ptr - end of free list 
1202 b3			      or    E 
1203 ca 8f 12		      jp    Z, malloc_no_space 
1206			 
1206 dd 73 00		      ld    (IX+0), E               ; Store next_free ptr to stack 
1209 dd 72 01		      ld    (IX+1), D 
120c			 
120c			      ; Does this block have enough space to make the allocation? 
120c 23			      inc   HL                      ; Load free block size into DE 
120d 5e			      ld    E, (HL) 
120e 23			      inc   HL 
120f 56			      ld    D, (HL) 
1210			 
1210 eb			      ex    DE, HL                  ; Check size of block against want 
1211 b7			      or    A                       ; Ensure carry flag clear 
1212 ed 42		      sbc   HL, BC 
1214 e5			      push  HL                      ; Store the result for later (new block size) 
1215			 
1215 ca 64 12		      jp   Z, malloc_alloc_fit     ; Z means block size matches want - can allocate 
1218 30 1b		      jr    NC, malloc_alloc_split  ; NC means block is bigger than want - can allocate 
121a			 
121a			      ; this_free block is not big enough, setup ptrs to test next free block 
121a e1			      pop   HL                      ; Discard previous result 
121b			 
121b dd 6e 02		      ld    L, (IX+2)               ; Move this_free ptr into prev_free 
121e dd 66 03		      ld    H, (IX+3) 
1221 dd 75 04		      ld    (IX+4), L 
1224 dd 74 05		      ld    (IX+5), H 
1227			 
1227 dd 6e 00		      ld    L, (IX+0)               ; Move next_free ptr into this_free 
122a dd 66 01		      ld    H, (IX+1) 
122d dd 75 02		      ld    (IX+2), L 
1230 dd 74 03		      ld    (IX+3), H 
1233			 
1233					if DEBUG_FORTH_MALLOC 
1233						DMARK "MA>" 
1233						CALLMONITOR 
1233					endif 
1233 18 c9		      jr    malloc_find_space 
1235			 
1235			      ; split a bigger block into two - requested size and remaining size 
1235			malloc_alloc_split: 
1235					if DEBUG_FORTH_MALLOC 
1235						DMARK "MAs" 
1235						CALLMONITOR 
1235					endif 
1235 eb			      ex    DE, HL                  ; Calculate address of new free block 
1236 2b			      dec   HL 
1237 2b			      dec   HL 
1238 2b			      dec   HL 
1239 09			      add   HL, BC 
123a			 
123a			      ; Create a new block and point it at next_free 
123a dd 5e 00		      ld    E, (IX+0)               ; Load next_free ptr into DE 
123d dd 56 01		      ld    D, (IX+1) 
1240			 
1240 73			      ld    (HL), E                 ; Store next_free ptr into new block 
1241 23			      inc   HL 
1242 72			      ld    (HL), D 
1243			 
1243 d1			      pop   DE                      ; Store size of new block into new block 
1244 23			      inc   HL 
1245 73			      ld    (HL), E 
1246 23			      inc   HL 
1247 72			      ld    (HL), D 
1248			 
1248			      ; Update this_free ptr to point to new block 
1248 2b			      dec   HL 
1249 2b			      dec   HL 
124a 2b			      dec   HL 
124b			 
124b dd 5e 02		      ld    E, (IX+2)               ; Take a copy of current this_free ptr 
124e dd 56 03		      ld    D, (IX+3) 
1251			 
1251 dd 75 02		      ld    (IX+2), L               ; Store new block addr as this_free ptr 
1254 dd 74 03		      ld    (IX+3), H 
1257			 
1257			      ; Modify this_free block to be allocation 
1257 eb			      ex    DE, HL 
1258 af			      xor   A                       ; Null the next block ptr of allocated block 
1259 77			      ld    (HL), A 
125a 23			      inc   HL 
125b 77			      ld    (HL), A 
125c			 
125c 23			      inc   HL                      ; Store want size into allocated block 
125d 71			      ld    (HL), C 
125e 23			      inc   HL 
125f 70			      ld    (HL), B 
1260 23			      inc   HL 
1261 e5			      push  HL                      ; Address of allocation to return 
1262			 
1262 18 19		      jr    malloc_update_links 
1264			 
1264			malloc_alloc_fit: 
1264 e1			      pop   HL                      ; Dont need new block size, want is exact fit 
1265			 
1265					if DEBUG_FORTH_MALLOC 
1265						DMARK "MAf" 
1265						CALLMONITOR 
1265					endif 
1265			      ; Modify this_free block to be allocation 
1265 eb			      ex    DE, HL 
1266 2b			      dec   HL 
1267 2b			      dec   HL 
1268 2b			      dec   HL 
1269			 
1269 af			      xor   A                       ; Null the next block ptr of allocated block 
126a 77			      ld    (HL), A 
126b 23			      inc   HL 
126c 77			      ld    (HL), A 
126d			 
126d 23			      inc   HL                      ; Store address of allocation to return 
126e 23			      inc   HL 
126f 23			      inc   HL 
1270 e5			      push  HL 
1271			 
1271			      ; Copy next_free ptr to this_free, remove allocated block from free list 
1271 dd 6e 00		      ld    L, (IX+0)               ; next_free to HL 
1274 dd 66 01		      ld    H, (IX+1) 
1277			 
1277 dd 75 02		      ld    (IX+2), L               ; HL to this_free 
127a dd 74 03		      ld    (IX+3), H 
127d			 
127d			 
127d			malloc_update_links: 
127d			      ; Update prev_free ptr to point to this_free 
127d dd 6e 04		      ld    L, (IX+4)               ; prev_free ptr to HL 
1280 dd 66 05		      ld    H, (IX+5) 
1283			 
1283 dd 5e 02		      ld    E, (IX+2)               ; this_free ptr to DE 
1286 dd 56 03		      ld    D, (IX+3) 
1289			 
1289 73			      ld    (HL), E                 ; this_free ptr into prev_free 
128a 23			      inc   HL 
128b 72			      ld    (HL), D 
128c			 
128c					if DEBUG_FORTH_MALLOC 
128c						DMARK "Mul" 
128c						CALLMONITOR 
128c					endif 
128c			      ; Clear the Z flag to indicate successful allocation 
128c 7a			      ld    A, D 
128d b3			      or    E 
128e			 
128e d1			      pop   DE                      ; Address of allocation 
128f					if DEBUG_FORTH_MALLOC 
128f						DMARK "MAu" 
128f						CALLMONITOR 
128f					endif 
128f			 
128f			malloc_no_space: 
128f 21 06 00		      ld    HL, 6                   ; Clean up stack frame 
1292 39			      add   HL, SP 
1293 f9			      ld    SP, HL 
1294			 
1294 eb			      ex    DE, HL                  ; Alloc addr into HL for return 
1295					if DEBUG_FORTH_MALLOC 
1295						DMARK "MAN" 
1295						CALLMONITOR 
1295					endif 
1295			 
1295			malloc_early_exit: 
1295					if DEBUG_FORTH_MALLOC 
1295						DMARK "MAx" 
1295						CALLMONITOR 
1295					endif 
1295 dd e1		      pop   IX 
1297 d1			      pop   DE 
1298 c1			      pop   BC 
1299			 
1299			if DEBUG_FORTH_MALLOC_HIGH 
1299			call malloc_guard_exit 
1299			call malloc_guard_zerolen 
1299			endif 
1299 c9			      ret 
129a			 
129a			 
129a			;------------------------------------------------------------------------------ 
129a			;     free                                                                    : 
129a			;                                                                             : 
129a			; Description                                                                 : 
129a			;     Return the space pointed to by HL to the heap. HL must be an address as : 
129a			;     returned by malloc, otherwise the behaviour is undefined.               : 
129a			;                                                                             : 
129a			;     Where possible, directly adjacent free blocks will be merged together   : 
129a			;     into larger blocks to help ensure that the heap does not become         : 
129a			;     excessively fragmented.                                                 : 
129a			;                                                                             : 
129a			;     free does not clear or set any other value into the freed space, and    : 
129a			;     therefore its contents may be visible through subsequent malloc's. The  : 
129a			;     caller should clear the freed space as required.                        : 
129a			;                                                                             : 
129a			;     This implementation of free uses the stack exclusively, and is          : 
129a			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
129a			;     advisable to disable interrupts before calling free, and recommended    : 
129a			;     to avoid the use of free inside ISRs in general.                        : 
129a			;                                                                             : 
129a			;     NOTE: heap_init must be called before malloc and free can be used.      : 
129a			;                                                                             : 
129a			; Parameters                                                                  : 
129a			;     HL  Pointer to address of first byte of allocation to be freed          : 
129a			;                                                                             : 
129a			; Returns                                                                     : 
129a			;     Nothing                                                                 : 
129a			;                                                                             : 
129a			; Stack frame                                                                 : 
129a			;       |             |                                                       : 
129a			;       +-------------+                                                       : 
129a			;       |     BC      |                                                       : 
129a			;       +-------------+                                                       : 
129a			;       |     DE      |                                                       : 
129a			;       +-------------+                                                       : 
129a			;       |     IX      |                                                       : 
129a			;       +-------------+                                                       : 
129a			;       |  prev_free  |                                                       : 
129a			;   +2  +-------------+                                                       : 
129a			;       |  next_free  |                                                       : 
129a			;   +0  +-------------+                                                       : 
129a			;       |             |                                                       : 
129a			;                                                                             : 
129a			;------------------------------------------------------------------------------ 
129a			free: 
129a c5			      push  BC 
129b d5			      push  DE 
129c dd e5		      push  IX 
129e			 
129e 7c			      ld    A, H                    ; Exit if ptr is null 
129f b5			      or    L 
12a0 ca 64 13		      jp    Z, free_early_exit 
12a3			 
12a3			      ; Set up stack frame 
12a3 eb			      ex    DE, HL 
12a4 21 fc ff		      ld    HL, -4                  ; Reserve 4 bytes for stack frame 
12a7 39			      add   HL, SP 
12a8 f9			      ld    SP, HL 
12a9 dd 21 00 00	      ld    IX, 0                   ; Use IX as a frame pointer 
12ad dd 39		      add   IX, SP 
12af			 
12af			      ; The address in HL points to the start of the useable allocated space, 
12af			      ; but the block struct starts 4 bytes before this. Sub 4 to get the 
12af			      ; address of the block itself. 
12af eb			      ex    DE, HL 
12b0 11 fc ff		      ld    DE, -4 
12b3 19			      add   HL, DE 
12b4			 
12b4			      ; An allocated block must have a null next block pointer in it 
12b4 7e			      ld    A, (HL) 
12b5 23			      inc   HL 
12b6 b6			      or    (HL) 
12b7 c2 5f 13		      jp    NZ, free_done 
12ba			 
12ba 2b			      dec   HL 
12bb			 
12bb 44			      ld    B, H                    ; Copy HL to BC 
12bc 4d			      ld    C, L 
12bd			 
12bd			      ; Loop through the free list to find the first block with an address 
12bd			      ; higher than the block being freed 
12bd 21 c9 61		      ld    HL, free_list 
12c0			 
12c0			free_find_higher_block: 
12c0 5e			      ld    E, (HL)                 ; Load next ptr from free block 
12c1 23			      inc   HL 
12c2 56			      ld    D, (HL) 
12c3 2b			      dec   HL 
12c4			 
12c4 dd 73 00		      ld    (IX+0), E               ; Save ptr to next free block 
12c7 dd 72 01		      ld    (IX+1), D 
12ca dd 75 02		      ld    (IX+2), L               ; Save ptr to prev free block 
12cd dd 74 03		      ld    (IX+3), H 
12d0			 
12d0 78			      ld    A, B                    ; Check if DE is greater than BC 
12d1 ba			      cp    D                       ; Compare MSB first 
12d2 28 02		      jr    Z, $+4                  ; MSB the same, compare LSB 
12d4 30 04		      jr    NC, free_find_higher_block_skip 
12d6 79			      ld    A, C 
12d7 bb			      cp    E                       ; Then compare LSB 
12d8 38 08		      jr    C, free_found_higher_block 
12da			 
12da			free_find_higher_block_skip: 
12da 7a			      ld    A, D                    ; Reached the end of the free list? 
12db b3			      or    E 
12dc ca 5f 13		      jp    Z, free_done 
12df			 
12df eb			      ex    DE, HL 
12e0			 
12e0 18 de		      jr    free_find_higher_block 
12e2			 
12e2			free_found_higher_block: 
12e2			      ; Insert freed block between prev and next free blocks 
12e2 71			      ld    (HL), C                 ; Point prev free block to freed block 
12e3 23			      inc   HL 
12e4 70			      ld    (HL), B 
12e5			 
12e5 60			      ld    H, B                    ; Point freed block at next free block 
12e6 69			      ld    L, C 
12e7 73			      ld    (HL), E 
12e8 23			      inc   HL 
12e9 72			      ld    (HL), D 
12ea			 
12ea			      ; Check if the freed block is adjacent to the next free block 
12ea 23			      inc   HL                      ; Load size of freed block into HL 
12eb 5e			      ld    E, (HL) 
12ec 23			      inc   HL 
12ed 56			      ld    D, (HL) 
12ee eb			      ex    DE, HL 
12ef			 
12ef 09			      add   HL, BC                  ; Add addr of freed block and its size 
12f0			 
12f0 dd 5e 00		      ld    E, (IX+0)               ; Load addr of next free block into DE 
12f3 dd 56 01		      ld    D, (IX+1) 
12f6			 
12f6 b7			      or    A                       ; Clear the carry flag 
12f7 ed 52		      sbc   HL, DE                  ; Subtract addrs to compare adjacency 
12f9 20 22		      jr    NZ, free_check_adjacent_to_prev 
12fb			 
12fb			      ; Freed block is adjacent to next, merge into one bigger block 
12fb eb			      ex    DE, HL                  ; Load next ptr from next block into DE 
12fc 5e			      ld    E, (HL) 
12fd 23			      inc   HL 
12fe 56			      ld    D, (HL) 
12ff e5			      push  HL                      ; Save ptr to next block for later 
1300			 
1300 60			      ld    H, B                    ; Store ptr from next block into freed block 
1301 69			      ld    L, C 
1302 73			      ld    (HL), E 
1303 23			      inc   HL 
1304 72			      ld    (HL), D 
1305			 
1305 e1			      pop   HL                      ; Restore ptr to next block 
1306 23			      inc   HL                      ; Load size of next block into DE 
1307 5e			      ld    E, (HL) 
1308 23			      inc   HL 
1309 56			      ld    D, (HL) 
130a d5			      push  DE                      ; Save next block size for later 
130b			 
130b 60			      ld    H, B                    ; Load size of freed block into HL 
130c 69			      ld    L, C 
130d 23			      inc   HL 
130e 23			      inc   HL 
130f 5e			      ld    E, (HL) 
1310 23			      inc   HL 
1311 56			      ld    D, (HL) 
1312 eb			      ex    DE, HL 
1313			 
1313 d1			      pop   DE                      ; Restore size of next block 
1314 19			      add   HL, DE                  ; Add sizes of both blocks 
1315 eb			      ex    DE, HL 
1316			 
1316 60			      ld    H, B                    ; Store new bigger size into freed block 
1317 69			      ld    L, C 
1318 23			      inc   HL 
1319 23			      inc   HL 
131a 73			      ld    (HL), E 
131b 23			      inc   HL 
131c 72			      ld    (HL), D 
131d			 
131d			free_check_adjacent_to_prev: 
131d			      ; Check if the freed block is adjacent to the prev free block 
131d dd 6e 02		      ld    L, (IX+2)               ; Prev free block ptr into HL 
1320 dd 66 03		      ld    H, (IX+3) 
1323			 
1323 23			      inc   HL                      ; Size of prev free block into DE 
1324 23			      inc   HL 
1325 5e			      ld    E, (HL) 
1326 23			      inc   HL 
1327 56			      ld    D, (HL) 
1328 2b			      dec   HL 
1329 2b			      dec   HL 
132a 2b			      dec   HL 
132b			 
132b 19			      add   HL, DE                  ; Add prev block addr and size 
132c			 
132c b7			      or    A                       ; Clear the carry flag 
132d ed 42		      sbc   HL, BC                  ; Subtract addrs to compare adjacency 
132f 20 2e		      jr    NZ, free_done 
1331			 
1331			      ; Freed block is adjacent to prev, merge into one bigger block 
1331 60			      ld    H, B                    ; Load next ptr from freed block into DE 
1332 69			      ld    L, C 
1333 5e			      ld    E, (HL) 
1334 23			      inc   HL 
1335 56			      ld    D, (HL) 
1336 e5			      push  HL                      ; Save freed block ptr for later 
1337			 
1337 dd 6e 02		      ld    L, (IX+2)               ; Store freed block ptr into prev block 
133a dd 66 03		      ld    H, (IX+3) 
133d 73			      ld    (HL), E 
133e 23			      inc   HL 
133f 72			      ld    (HL), D 
1340			 
1340 e1			      pop   HL                      ; Restore freed block ptr 
1341 23			      inc   HL                      ; Load size of freed block into DE 
1342 5e			      ld    E, (HL) 
1343 23			      inc   HL 
1344 56			      ld    D, (HL) 
1345 d5			      push  DE                      ; Save freed block size for later 
1346			 
1346 dd 6e 02		      ld    L, (IX+2)               ; Load size of prev block into DE 
1349 dd 66 03		      ld    H, (IX+3) 
134c 23			      inc   HL 
134d 23			      inc   HL 
134e 5e			      ld    E, (HL) 
134f 23			      inc   HL 
1350 56			      ld    D, (HL) 
1351			 
1351 e1			      pop   HL                      ; Add sizes of both blocks 
1352 19			      add   HL, DE 
1353 eb			      ex    DE, HL 
1354			 
1354 dd 6e 02		      ld    L, (IX+2)               ; Store new bigger size into prev block 
1357 dd 66 03		      ld    H, (IX+3) 
135a 23			      inc   HL 
135b 23			      inc   HL 
135c 73			      ld    (HL), E 
135d 23			      inc   HL 
135e 72			      ld    (HL), D 
135f			 
135f			free_done: 
135f 21 04 00		      ld    HL, 4                   ; Clean up stack frame 
1362 39			      add   HL, SP 
1363 f9			      ld    SP, HL 
1364			 
1364			free_early_exit: 
1364 dd e1		      pop   IX 
1366 d1			      pop   DE 
1367 c1			      pop   BC 
1368			 
1368 c9			      ret 
1369			 
1369			; moved to firmware.asm 
1369			; 
1369			;free_list         .dw   0     ; Block struct for start of free list (MUST be 4 bytes) 
1369			;                  .dw   0 
1369			 
1369			 
1369			endif 
1369			 
1369			 
1369			if MALLOC_3 
1369			; https://gist.githubusercontent.com/tomstorey/947a8b084bad69391a4b2a1c5b6d69ca/raw/5a08fb30a480d98c0deb4a6afe2d48961cc8e9d9/z80_malloc.s 
1369			;heap_start        .equ  0x9000      ; Starting address of heap 
1369			;heap_size         .equ  0x0100      ; Number of bytes available in heap 
1369			; 
1369			 ;     .org 0 
1369			  ;    jp    main 
1369			; 
1369			; 
1369			 ;     .org  0x100 
1369			;main: 
1369			 ;     ld    HL, 0x8100 
1369			  ;    ld    SP, HL 
1369			; 
1369			;      call  heap_init 
1369			 
1369			      ; Make some allocations 
1369			;      ld    HL, 12 
1369			;      call  malloc            ; Allocates 0x9004 
1369			; 
1369			 ;     ld    HL, 12 
1369			;      call  malloc            ; Allocates 0x9014 
1369			 
1369			;      ld    HL, 12 
1369			;      call  malloc            ; Allocates 0x9024 
1369			 
1369			      ; Free some allocations 
1369			;      ld    HL, 0x9014 
1369			;      call  free 
1369			 
1369			;      ld    HL, 0x9004 
1369			;      call  free 
1369			; 
1369			;      ld    HL, 0x9024 
1369			;      call  free 
1369			 
1369			 
1369			 ;     halt 
1369			 
1369			 
1369			;------------------------------------------------------------------------------ 
1369			;     heap_init                                                               : 
1369			;                                                                             : 
1369			; Description                                                                 : 
1369			;     Initialise the heap and make it ready for malloc and free operations.   : 
1369			;                                                                             : 
1369			;     The heap is maintained as a linked list, starting with an initial       : 
1369			;     "dummy block" of zero size which is mainly used to hold a pointer to    : 
1369			;     the first free block in the heap. Each block then points to the next    : 
1369			;     free block within the heap, and the free list ends at the first block   : 
1369			;     with a null pointer to the next free block.                             : 
1369			;                                                                             : 
1369			; Parameters                                                                  : 
1369			;     Inputs are compile-time only. Two defines which specify the starting    : 
1369			;     address of the heap and its size are required, along with a memory      : 
1369			;     allocation of 4 consecutive bytes which is used for a dummy block which : 
1369			;     principally stores a pointer to the first free block in the heap.       : 
1369			;                                                                             : 
1369			; Returns                                                                     : 
1369			;     Nothing                                                                 : 
1369			;------------------------------------------------------------------------------ 
1369			heap_init: 
1369			      push  HL 
1369			 
1369			      ; Initialise free list struct 
1369			      ld    HL, heap_start 
1369			      ld    (free_list), HL 
1369			      ld    HL, 0 
1369			      ld    (free_list+2), HL 
1369			 
1369			      ; Insert first free block at bottom of heap, consumes entire heap 
1369			      ld    HL, heap_start+heap_size-4 
1369			      ld    (heap_start), HL        ; Next block (end of free list) 
1369			      ld    HL, heap_size-4 
1369			      ld    (heap_start+2), HL      ; Block size 
1369			 
1369			      ; Insert end of free list block at top of heap - two null words will 
1369			      ; terminate the free list 
1369			      ld    HL, 0 
1369			      ld    (heap_start+heap_size-2), HL 
1369			      ld    (heap_start+heap_size-4), HL 
1369			 
1369			      pop   HL 
1369			 
1369			      ret 
1369			 
1369			 
1369			;------------------------------------------------------------------------------ 
1369			;     malloc                                                                  : 
1369			;                                                                             : 
1369			; Description                                                                 : 
1369			;     Allocates the wanted space from the heap and returns the address of the : 
1369			;     first useable byte of the allocation.                                   : 
1369			;                                                                             : 
1369			;     Allocations can happen in one of two ways:                              : 
1369			;                                                                             : 
1369			;     1. A free block may be found which is the exact size wanted. In this    : 
1369			;        case the block is removed from the free list and retuedn to the      : 
1369			;        caller.                                                              : 
1369			;     2. A free block may be found which is larger than the size wanted. In   : 
1369			;        this case, the larger block is split into two. The first portion of  : 
1369			;        this block will become the requested space by the malloc call and    : 
1369			;        is returned to the caller. The second portion becomes a new free     : 
1369			;        block, and the free list is adjusted to maintain continuity via this : 
1369			;        newly created block.                                                 : 
1369			;                                                                             : 
1369			;     malloc does not set any initial value in the allocated space, the       : 
1369			;     caller is required to do this as required.                              : 
1369			;                                                                             : 
1369			;     This implementation of malloc uses the stack exclusively, and is        : 
1369			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
1369			;     advisable to disable interrupts before calling malloc, and recommended  : 
1369			;     to avoid the use of malloc inside ISRs in general.                      : 
1369			;                                                                             : 
1369			;     NOTE: heap_init must be called before malloc and free can be used.      : 
1369			;                                                                             : 
1369			; Parameters                                                                  : 
1369			;     HL  Number of bytes wanted                                              : 
1369			;                                                                             : 
1369			; Returns                                                                     : 
1369			;     HL  Address of the first useable byte of the allocation                 : 
1369			;                                                                             : 
1369			; Flags                                                                       : 
1369			;     Z   Set if the allocation did not succeed, clear otherwise              : 
1369			;                                                                             : 
1369			; Stack frame                                                                 : 
1369			;       |             |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |     BC      |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |     DE      |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |     IX      |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |  prev_free  |                                                       : 
1369			;   +4  +-------------+                                                       : 
1369			;       |  this_free  |                                                       : 
1369			;   +2  +-------------+                                                       : 
1369			;       |  next_free  |                                                       : 
1369			;   +0  +-------------+                                                       : 
1369			;       |             |                                                       : 
1369			;                                                                             : 
1369			;------------------------------------------------------------------------------ 
1369			malloc: 
1369			      push  BC 
1369			      push  DE 
1369			      push  IX 
1369			 
1369			      ld    A, H                    ; Exit if no space requested 
1369			      or    L 
1369			      jp    Z, malloc_early_exit 
1369			 
1369			      ; Set up stack frame 
1369			      ex    DE, HL 
1369			      ld    HL, -6                  ; Reserve 6 bytes for stack frame 
1369			      add   HL, SP 
1369			      ld    SP, HL 
1369			      ld    IX, 0                   ; Use IX as a frame pointer 
1369			      add   IX, SP 
1369			 
1369			      ; Setup initial state 
1369			      ld    HL, 4                   ; want must also include space used by block struct 
1369			      add   HL, DE 
1369			 
1369			      ld    B, H                    ; Move want to BC 
1369			      ld    C, L 
1369			 
1369			      ld    HL, free_list           ; Store prev_free ptr to stack 
1369			      ld    (IX+4), L 
1369			      ld    (IX+5), H 
1369			 
1369			      ld    E, (HL)                 ; Store this_free ptr to stack 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      ld    (IX+2), E 
1369			      ld    (IX+3), D 
1369			      ex    DE, HL                  ; this_free ptr into HL 
1369			 
1369			      ; Loop through free block list to find some space 
1369			malloc_find_space: 
1369			      ld    E, (HL)                 ; Load next_free ptr into DE 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			 
1369			      ld    A, D                    ; Check for null next_free ptr - end of free list 
1369			      or    E 
1369			      jp    Z, malloc_no_space 
1369			 
1369			      ld    (IX+0), E               ; Store next_free ptr to stack 
1369			      ld    (IX+1), D 
1369			 
1369			      ; Does this block have enough space to make the allocation? 
1369			      inc   HL                      ; Load free block size into DE 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			 
1369			      ex    DE, HL                  ; Check size of block against want 
1369			      or    A                       ; Ensure carry flag clear 
1369			      sbc   HL, BC 
1369			      push  HL                      ; Store the result for later (new block size) 
1369			 
1369			      jr    Z, malloc_alloc_fit     ; Z means block size matches want - can allocate 
1369			      jr    NC, malloc_alloc_split  ; NC means block is bigger than want - can allocate 
1369			 
1369			      ; this_free block is not big enough, setup ptrs to test next free block 
1369			      pop   HL                      ; Discard previous result 
1369			 
1369			      ld    L, (IX+2)               ; Move this_free ptr into prev_free 
1369			      ld    H, (IX+3) 
1369			      ld    (IX+4), L 
1369			      ld    (IX+5), H 
1369			 
1369			      ld    L, (IX+0)               ; Move next_free ptr into this_free 
1369			      ld    H, (IX+1) 
1369			      ld    (IX+2), L 
1369			      ld    (IX+3), H 
1369			 
1369			      jr    malloc_find_space 
1369			 
1369			      ; split a bigger block into two - requested size and remaining size 
1369			malloc_alloc_split: 
1369			      ex    DE, HL                  ; Calculate address of new free block 
1369			      dec   HL 
1369			      dec   HL 
1369			      dec   HL 
1369			      add   HL, BC 
1369			 
1369			      ; Create a new block and point it at next_free 
1369			      ld    E, (IX+0)               ; Load next_free ptr into DE 
1369			      ld    D, (IX+1) 
1369			 
1369			      ld    (HL), E                 ; Store next_free ptr into new block 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			      pop   DE                      ; Store size of new block into new block 
1369			      inc   HL 
1369			      ld    (HL), E 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			      ; Update this_free ptr to point to new block 
1369			      dec   HL 
1369			      dec   HL 
1369			      dec   HL 
1369			 
1369			      ld    E, (IX+2)               ; Take a copy of current this_free ptr 
1369			      ld    D, (IX+3) 
1369			 
1369			      ld    (IX+2), L               ; Store new block addr as this_free ptr 
1369			      ld    (IX+3), H 
1369			 
1369			      ; Modify this_free block to be allocation 
1369			      ex    DE, HL 
1369			      xor   A                       ; Null the next block ptr of allocated block 
1369			      ld    (HL), A 
1369			      inc   HL 
1369			      ld    (HL), A 
1369			 
1369			      inc   HL                      ; Store want size into allocated block 
1369			      ld    (HL), C 
1369			      inc   HL 
1369			      ld    (HL), B 
1369			      inc   HL 
1369			      push  HL                      ; Address of allocation to return 
1369			 
1369			      jr    malloc_update_links 
1369			 
1369			malloc_alloc_fit: 
1369			      pop   HL                      ; Dont need new block size, want is exact fit 
1369			 
1369			      ; Modify this_free block to be allocation 
1369			      ex    DE, HL 
1369			      dec   HL 
1369			      dec   HL 
1369			      dec   HL 
1369			 
1369			      xor   A                       ; Null the next block ptr of allocated block 
1369			      ld    (HL), A 
1369			      inc   HL 
1369			      ld    (HL), A 
1369			 
1369			      inc   HL                      ; Store address of allocation to return 
1369			      inc   HL 
1369			      inc   HL 
1369			      push  HL 
1369			 
1369			      ; Copy next_free ptr to this_free, remove allocated block from free list 
1369			      ld    L, (IX+0)               ; next_free to HL 
1369			      ld    H, (IX+1) 
1369			 
1369			      ld    (IX+2), L               ; HL to this_free 
1369			      ld    (IX+3), H 
1369			 
1369			 
1369			malloc_update_links: 
1369			      ; Update prev_free ptr to point to this_free 
1369			      ld    L, (IX+4)               ; prev_free ptr to HL 
1369			      ld    H, (IX+5) 
1369			 
1369			      ld    E, (IX+2)               ; this_free ptr to DE 
1369			      ld    D, (IX+3) 
1369			 
1369			      ld    (HL), E                 ; this_free ptr into prev_free 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			      ; Clear the Z flag to indicate successful allocation 
1369			      ld    A, D 
1369			      or    E 
1369			 
1369			      pop   DE                      ; Address of allocation 
1369			 
1369			malloc_no_space: 
1369			      ld    HL, 6                   ; Clean up stack frame 
1369			      add   HL, SP 
1369			      ld    SP, HL 
1369			 
1369			      ex    DE, HL                  ; Alloc addr into HL for return 
1369			 
1369			malloc_early_exit: 
1369			      pop   IX 
1369			      pop   DE 
1369			      pop   BC 
1369			 
1369			      ret 
1369			 
1369			 
1369			;------------------------------------------------------------------------------ 
1369			;     free                                                                    : 
1369			;                                                                             : 
1369			; Description                                                                 : 
1369			;     Return the space pointed to by HL to the heap. HL must be an address as : 
1369			;     returned by malloc, otherwise the behaviour is undefined.               : 
1369			;                                                                             : 
1369			;     Where possible, directly adjacent free blocks will be merged together   : 
1369			;     into larger blocks to help ensure that the heap does not become         : 
1369			;     excessively fragmented.                                                 : 
1369			;                                                                             : 
1369			;     free does not clear or set any other value into the freed space, and    : 
1369			;     therefore its contents may be visible through subsequent malloc's. The  : 
1369			;     caller should clear the freed space as required.                        : 
1369			;                                                                             : 
1369			;     This implementation of free uses the stack exclusively, and is          : 
1369			;     therefore re-entrant. But due to the Z80's lack of atomicity, it is     : 
1369			;     advisable to disable interrupts before calling free, and recommended    : 
1369			;     to avoid the use of free inside ISRs in general.                        : 
1369			;                                                                             : 
1369			;     NOTE: heap_init must be called before malloc and free can be used.      : 
1369			;                                                                             : 
1369			; Parameters                                                                  : 
1369			;     HL  Pointer to address of first byte of allocation to be freed          : 
1369			;                                                                             : 
1369			; Returns                                                                     : 
1369			;     Nothing                                                                 : 
1369			;                                                                             : 
1369			; Stack frame                                                                 : 
1369			;       |             |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |     BC      |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |     DE      |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |     IX      |                                                       : 
1369			;       +-------------+                                                       : 
1369			;       |  prev_free  |                                                       : 
1369			;   +2  +-------------+                                                       : 
1369			;       |  next_free  |                                                       : 
1369			;   +0  +-------------+                                                       : 
1369			;       |             |                                                       : 
1369			;                                                                             : 
1369			;------------------------------------------------------------------------------ 
1369			free: 
1369			      push  BC 
1369			      push  DE 
1369			      push  IX 
1369			 
1369			      ld    A, H                    ; Exit if ptr is null 
1369			      or    L 
1369			      jp    Z, free_early_exit 
1369			 
1369			      ; Set up stack frame 
1369			      ex    DE, HL 
1369			      ld    HL, -4                  ; Reserve 4 bytes for stack frame 
1369			      add   HL, SP 
1369			      ld    SP, HL 
1369			      ld    IX, 0                   ; Use IX as a frame pointer 
1369			      add   IX, SP 
1369			 
1369			      ; The address in HL points to the start of the useable allocated space, 
1369			      ; but the block struct starts 4 bytes before this. Sub 4 to get the 
1369			      ; address of the block itself. 
1369			      ex    DE, HL 
1369			      ld    DE, -4 
1369			      add   HL, DE 
1369			 
1369			      ; An allocated block must have a null next block pointer in it 
1369			      ld    A, (HL) 
1369			      inc   HL 
1369			      or    (HL) 
1369			      jp    NZ, free_done 
1369			 
1369			      dec   HL 
1369			 
1369			      ld    B, H                    ; Copy HL to BC 
1369			      ld    C, L 
1369			 
1369			      ; Loop through the free list to find the first block with an address 
1369			      ; higher than the block being freed 
1369			      ld    HL, free_list 
1369			 
1369			free_find_higher_block: 
1369			      ld    E, (HL)                 ; Load next ptr from free block 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      dec   HL 
1369			 
1369			      ld    (IX+0), E               ; Save ptr to next free block 
1369			      ld    (IX+1), D 
1369			      ld    (IX+2), L               ; Save ptr to prev free block 
1369			      ld    (IX+3), H 
1369			 
1369			      ld    A, B                    ; Check if DE is greater than BC 
1369			      cp    D                       ; Compare MSB first 
1369			      jr    Z, $+4                  ; MSB the same, compare LSB 
1369			      jr    NC, free_find_higher_block_skip 
1369			      ld    A, C 
1369			      cp    E                       ; Then compare LSB 
1369			      jr    C, free_found_higher_block 
1369			 
1369			free_find_higher_block_skip: 
1369			      ld    A, D                    ; Reached the end of the free list? 
1369			      or    E 
1369			      jp    Z, free_done 
1369			 
1369			      ex    DE, HL 
1369			 
1369			      jr    free_find_higher_block 
1369			 
1369			free_found_higher_block: 
1369			      ; Insert freed block between prev and next free blocks 
1369			      ld    (HL), C                 ; Point prev free block to freed block 
1369			      inc   HL 
1369			      ld    (HL), B 
1369			 
1369			      ld    H, B                    ; Point freed block at next free block 
1369			      ld    L, C 
1369			      ld    (HL), E 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			      ; Check if the freed block is adjacent to the next free block 
1369			      inc   HL                      ; Load size of freed block into HL 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      ex    DE, HL 
1369			 
1369			      add   HL, BC                  ; Add addr of freed block and its size 
1369			 
1369			      ld    E, (IX+0)               ; Load addr of next free block into DE 
1369			      ld    D, (IX+1) 
1369			 
1369			      or    A                       ; Clear the carry flag 
1369			      sbc   HL, DE                  ; Subtract addrs to compare adjacency 
1369			      jr    NZ, free_check_adjacent_to_prev 
1369			 
1369			      ; Freed block is adjacent to next, merge into one bigger block 
1369			      ex    DE, HL                  ; Load next ptr from next block into DE 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      push  HL                      ; Save ptr to next block for later 
1369			 
1369			      ld    H, B                    ; Store ptr from next block into freed block 
1369			      ld    L, C 
1369			      ld    (HL), E 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			      pop   HL                      ; Restore ptr to next block 
1369			      inc   HL                      ; Load size of next block into DE 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      push  DE                      ; Save next block size for later 
1369			 
1369			      ld    H, B                    ; Load size of freed block into HL 
1369			      ld    L, C 
1369			      inc   HL 
1369			      inc   HL 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      ex    DE, HL 
1369			 
1369			      pop   DE                      ; Restore size of next block 
1369			      add   HL, DE                  ; Add sizes of both blocks 
1369			      ex    DE, HL 
1369			 
1369			      ld    H, B                    ; Store new bigger size into freed block 
1369			      ld    L, C 
1369			      inc   HL 
1369			      inc   HL 
1369			      ld    (HL), E 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			free_check_adjacent_to_prev: 
1369			      ; Check if the freed block is adjacent to the prev free block 
1369			      ld    L, (IX+2)               ; Prev free block ptr into HL 
1369			      ld    H, (IX+3) 
1369			 
1369			      inc   HL                      ; Size of prev free block into DE 
1369			      inc   HL 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      dec   HL 
1369			      dec   HL 
1369			      dec   HL 
1369			 
1369			      add   HL, DE                  ; Add prev block addr and size 
1369			 
1369			      or    A                       ; Clear the carry flag 
1369			      sbc   HL, BC                  ; Subtract addrs to compare adjacency 
1369			      jr    NZ, free_done 
1369			 
1369			      ; Freed block is adjacent to prev, merge into one bigger block 
1369			      ld    H, B                    ; Load next ptr from freed block into DE 
1369			      ld    L, C 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      push  HL                      ; Save freed block ptr for later 
1369			 
1369			      ld    L, (IX+2)               ; Store freed block ptr into prev block 
1369			      ld    H, (IX+3) 
1369			      ld    (HL), E 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			      pop   HL                      ; Restore freed block ptr 
1369			      inc   HL                      ; Load size of freed block into DE 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			      push  DE                      ; Save freed block size for later 
1369			 
1369			      ld    L, (IX+2)               ; Load size of prev block into DE 
1369			      ld    H, (IX+3) 
1369			      inc   HL 
1369			      inc   HL 
1369			      ld    E, (HL) 
1369			      inc   HL 
1369			      ld    D, (HL) 
1369			 
1369			      pop   HL                      ; Add sizes of both blocks 
1369			      add   HL, DE 
1369			      ex    DE, HL 
1369			 
1369			      ld    L, (IX+2)               ; Store new bigger size into prev block 
1369			      ld    H, (IX+3) 
1369			      inc   HL 
1369			      inc   HL 
1369			      ld    (HL), E 
1369			      inc   HL 
1369			      ld    (HL), D 
1369			 
1369			free_done: 
1369			      ld    HL, 4                   ; Clean up stack frame 
1369			      add   HL, SP 
1369			      ld    SP, HL 
1369			 
1369			free_early_exit: 
1369			      pop   IX 
1369			      pop   DE 
1369			      pop   BC 
1369			 
1369			      ret 
1369			 
1369			 
1369			;      .org 0x8000 
1369			; 
1369			;free_list         .dw   0     ; Block struct for start of free list (MUST be 4 bytes) 
1369			 ;                 .dw   0 
1369			 
1369			endif 
1369			 
1369			 
1369			if MALLOC_4 
1369			 
1369			; My memory allocation code. Very very simple.... 
1369			; allocate space under 250 chars 
1369			 
1369			heap_init: 
1369				; init start of heap as zero 
1369				;  
1369			 
1369				ld hl, heap_start 
1369				ld a, 0 
1369				ld (hl), a      ; empty block 
1369				inc hl 
1369				ld a, 0 
1369				ld (hl), a      ; length of block 
1369				; write end of list 
1369				inc hl 
1369				ld a,(hl) 
1369				inc hl 
1369				ld a,(hl) 
1369				 
1369			 
1369				; init some malloc vars 
1369			 
1369				ld hl, 0 
1369				ld (free_list), hl       ; store last malloc location 
1369			 
1369				ld hl, free_list+3      ; flag for 'free' being used and force a rescan for reuse of block  
1369				ld a, 0 
1369				ld (hl), a 
1369			 
1369			 
1369				ld hl, heap_start 
1369				;  
1369				  
1369				ret 
1369			 
1369			 
1369			;    free block marker 
1369			;    requested size  
1369			;    pointer to next block 
1369			;    .... 
1369			;    next block marker 
1369			 
1369			 
1369			; TODO add a flag that is reset on use of free. if flag is reset then start scan from start of heap otherwise use last location 
1369			; 
1369			 
1369			 
1369			malloc:  
1369				push de 
1369				push bc 
1369				push af 
1369			 
1369				; hl space required 
1369				 
1369				ld c, l    ; hold space   (TODO only a max of 255) 
1369			 
1369			;	inc c     ; TODO BUG need to fix memory leak on push str 
1369			;	inc c 
1369			;	inc c 
1369			;	inc c 
1369			;	inc c 
1369			;	inc c 
1369			;	inc c 
1369			 
1369			 
1369			 
1369				; start at heap if a free has been issued so we can reclaim it otherwise continue from last time 
1369			 
1369				ld a, (free_list+3) 
1369				cp 0 
1369				jr z, .contheap 
1369			 
1369				ld hl, (free_list)     ; get last alloc 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "mrs" 
1369						CALLMONITOR 
1369					endif 
1369				jr .startalloc 
1369			 
1369			.contheap: 
1369				ld hl, heap_start 
1369			 
1369			.startalloc: 
1369			 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "mym" 
1369						CALLMONITOR 
1369					endif 
1369			.findblock: 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "mmf" 
1369						CALLMONITOR 
1369					endif 
1369			 
1369				ld a,(hl)  
1369				; if byte is zero then clear to use 
1369			 
1369				cp 0 
1369				jr z, .foundemptyblock 
1369			 
1369				; if byte is not clear 
1369				;     then byte is offset to next block 
1369			 
1369				inc hl 
1369				ld a, (hl) ; get size 
1369			.nextblock:	inc hl 
1369					ld e, (hl) 
1369					inc hl 
1369					ld d, (hl) 
1369					ex de, hl 
1369			;	inc hl  ; move past the store space 
1369			;	inc hl  ; move past zero index  
1369			 
1369				; TODO detect no more space 
1369			 
1369				push hl 
1369				ld de, heap_end 
1369				call cmp16 
1369				pop hl 
1369				jr nc, .nospace 
1369			 
1369				jr .findblock 
1369			 
1369			.nospace: ld hl, 0 
1369				jp .exit 
1369			 
1369			 
1369			.foundemptyblock:	 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "mme" 
1369						CALLMONITOR 
1369					endif 
1369			 
1369			; TODO has block enough space if reusing??? 
1369			 
1369				;  
1369			 
1369			; see if this block has been previously used 
1369				inc hl 
1369				ld a, (hl) 
1369				dec hl 
1369				cp 0 
1369				jr z, .newblock 
1369			 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "meR" 
1369						CALLMONITOR 
1369					endif 
1369			 
1369			; no reusing previously allocated block 
1369			 
1369			; is it smaller than previously used? 
1369				 
1369				inc hl    ; move to size 
1369				ld a, c 
1369				sub (hl)        ; we want c < (hl) 
1369				dec hl    ; move back to marker 
1369			        jr z, .findblock 
1369			 
1369				; update with the new size which should be lower 
1369			 
1369			        ;inc  hl   ; negate next move. move back to size  
1369			 
1369			.newblock: 
1369				; need to be at marker here 
1369			 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "meN" 
1369						CALLMONITOR 
1369					endif 
1369			 
1369			 
1369				ld a, c 
1369			 
1369				ld (free_list+3), a	 ; flag resume from last malloc  
1369				ld (free_list), hl    ; save out last location 
1369			 
1369			 
1369				;inc a     ; space for length byte 
1369				ld (hl), a     ; save block in use marker 
1369			 
1369				inc hl   ; move to space marker 
1369				ld (hl), a    ; save new space 
1369			 
1369				inc hl   ; move to start of allocated area 
1369				 
1369			;	push hl     ; save where we are - 1  
1369			 
1369			;	inc hl  ; move past zero index  
1369				; skip space to set down new marker 
1369			 
1369				; provide some extra space for now 
1369			 
1369				inc a    ; actual is one fewer than bytes requested. correct if zero index is taken into account 
1369				inc a 
1369				inc a 
1369			 
1369				push hl   ; save where we are in the node block 
1369			 
1369				call addatohl 
1369			 
1369				; write linked list point 
1369			 
1369				pop de     ; get our node position 
1369				ex de, hl 
1369			 
1369				ld (hl), e 
1369				inc hl 
1369				ld (hl), d 
1369			 
1369				inc hl 
1369			 
1369				; now at start of allocated data so save pointer 
1369			 
1369				push hl 
1369			 
1369				; jump to position of next node and setup empty header in DE 
1369			 
1369				ex de, hl 
1369			 
1369			;	inc hl ; move past end of block 
1369			 
1369				ld a, 0 
1369				ld (hl), a   ; empty marker 
1369				inc hl 
1369				ld (hl), a   ; size 
1369				inc hl  
1369				ld (hl), a   ; ptr 
1369				inc hl 
1369				ld (hl), a   ; ptr 
1369			 
1369			 
1369				pop hl 
1369			 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "mmr" 
1369						CALLMONITOR 
1369					endif 
1369			 
1369			.exit: 
1369				pop af 
1369				pop bc 
1369				pop de  
1369				ret 
1369			 
1369			 
1369			 
1369			 
1369			free:  
1369				push hl 
1369				push af 
1369				; get address in hl 
1369			 
1369					if DEBUG_FORTH_MALLOC_INT 
1369						DMARK "fre" 
1369						CALLMONITOR 
1369					endif 
1369				; data is at hl - move to block count 
1369				dec hl 
1369				dec hl    ; get past pointer 
1369				dec hl 
1369			 
1369				ld a, (hl)    ; need this for a validation check 
1369			 
1369				dec hl    ; move to block marker 
1369			 
1369				; now check that the block count and block marker are the same  
1369			        ; this checks that we are on a malloc node and not random memory 
1369			        ; OK a faint chance this could be a problem but rare - famous last words! 
1369			 
1369				ld c, a 
1369				ld a, (hl)    
1369			 
1369				cp c 
1369				jr nz, .freeignore      ; not a valid malloc node in use so dont break anything 
1369			 
1369				; yes good chance we are on a malloc node 
1369			 
1369				ld a, 0      
1369				ld (hl), a   ; mark as free 
1369			 
1369				ld (free_list+3), a	 ; flag reuse of existing block on next malloc 
1369			 
1369			.freeignore:  
1369			 
1369				pop af 
1369				pop hl 
1369			 
1369				ret 
1369			 
1369			 
1369			 
1369			endif 
1369			 
1369			; eof 
# End of file firmware_memory.asm
1369			  
1369			; device C  
1369			; Now handled by SPI  
1369			;if SOUND_ENABLE  
1369			;	include "firmware_sound.asm"  
1369			;endif  
1369			  
1369			include "firmware_diags.asm"  
1369			; Hardware diags menu 
1369			 
1369			 
1369			config: 
1369			 
1369 3e 00			ld a, 0 
136b 21 8f 13			ld hl, .configmn 
136e cd f9 0b			call menu 
1371			 
1371 fe 00			cp 0 
1373 c8				ret z 
1374			 
1374			;	cp 1 
1374			;	call z, .savetostore 
1374			 
1374 fe 01			cp 1 
1376			if STARTUP_V1 
1376 cc a5 13			call z, .selautoload 
1379			endif 
1379			 
1379			if STARTUP_V2 
1379				call z, .enautoload 
1379			endif 
1379 fe 02			cp 2 
137b cc 9b 13			call z, .disautoload 
137e			;	cp 3 
137e			;	call z, .selbank 
137e fe 03			cp 3 
1380 cc c3 13			call z, .debug_tog 
1383 fe 04			cp 4 
1385 cc 11 15			call z, .bpsgo 
1388 fe 05			cp 5 
138a cc ec 13			call z, hardware_diags 
138d			if STARTUP_V2 
138d				cp 6 
138d				call z, create_startup 
138d			endif 
138d 18 da			jr config 
138f			 
138f			.configmn: 
138f			;	dw prom_c3 
138f ff 16			dw prom_c2 
1391 14 17			dw prom_c2a 
1393			;	dw prom_c2b 
1393			;	dw prom_c4 
1393 33 17			dw prom_m4 
1395 4e 17			dw prom_m4b 
1397 56 17			dw prom_c1 
1399			if STARTUP_V2 
1399				dw prom_c9 
1399			endif 
1399 00 00			dw 0 
139b				 
139b			 
139b			if STARTUP_V2 
139b			.enautoload: 
139b				if STORAGE_SE 
139b				ld a, $fe      ; bit 0 clear 
139b				ld (spi_device), a 
139b			 
139b				call storage_get_block_0 
139b			 
139b				ld a, 1 
139b				ld (store_page+STORE_0_AUTOFILE), a 
139b			 
139b					ld hl, 0 
139b					ld de, store_page 
139b				call storage_write_block	 ; save update 
139b				else 
139b			 
139b				ld hl, prom_notav 
139b				ld de, prom_empty 
139b				call info_panel 
139b				endif 
139b			 
139b			 
139b				ret 
139b			endif 
139b			 
139b			.disautoload: 
139b				if STORAGE_SE 
139b				ld a, $fe      ; bit 0 clear 
139b				ld (spi_device), a 
139b			 
139b				call storage_get_block_0 
139b			 
139b				ld a, 0 
139b				ld (store_page+STORE_0_AUTOFILE), a 
139b			 
139b					ld hl, 0 
139b					ld de, store_page 
139b				call storage_write_block	 ; save update 
139b				else 
139b			 
139b 21 65 17			ld hl, prom_notav 
139e 11 7b 17			ld de, prom_empty 
13a1 cd 59 0b			call info_panel 
13a4				endif 
13a4			 
13a4			 
13a4 c9				ret 
13a5			 
13a5			if STARTUP_V1 
13a5			 
13a5			; Select auto start 
13a5			 
13a5			.selautoload: 
13a5			 
13a5				 
13a5				if STORAGE_SE 
13a5			 
13a5					call config_dir 
13a5				        ld hl, scratch 
13a5					ld a, 0 
13a5					call menu 
13a5			 
13a5					cp 0 
13a5					ret z 
13a5			 
13a5					dec a 
13a5			 
13a5			 
13a5					; locate menu option 
13a5			 
13a5					ld hl, scratch 
13a5					call table_lookup 
13a5			 
13a5					if DEBUG_FORTH_WORDS 
13a5						DMARK "ALl" 
13a5						CALLMONITOR 
13a5					endif 
13a5					; with the pointer to the menu it, the byte following the zero term is the file id 
13a5			 
13a5					ld a, 0 
13a5					ld bc, 50   ; max of bytes to look at 
13a5					cpir  
13a5			 
13a5					if DEBUG_FORTH_WORDS 
13a5						DMARK "ALb" 
13a5						CALLMONITOR 
13a5					endif 
13a5					;inc hl 
13a5			 
13a5					ld a, (hl)   ; file id 
13a5					 
13a5				        ; save bank and file ids 
13a5			 
13a5					push af 
13a5			 
13a5			; TODO need to save to block 0 on bank 1	 
13a5			 
13a5					call storage_get_block_0 
13a5			 
13a5					if DEBUG_FORTH_WORDS 
13a5						DMARK "AL0" 
13a5						CALLMONITOR 
13a5					endif 
13a5					pop af 
13a5			 
13a5					ld (store_page+STORE_0_FILERUN),a 
13a5					 
13a5					; save bank id 
13a5			 
13a5					ld a,(spi_device) 
13a5					ld (store_page+STORE_0_BANKRUN),a 
13a5			 
13a5					; enable auto run of store file 
13a5			 
13a5					ld a, 1 
13a5					ld (store_page+STORE_0_AUTOFILE),a 
13a5			 
13a5					; save buffer 
13a5			 
13a5					ld hl, 0 
13a5					ld de, store_page 
13a5					if DEBUG_FORTH_WORDS 
13a5						DMARK "ALw" 
13a5						CALLMONITOR 
13a5					endif 
13a5				call storage_write_block	 ; save update 
13a5			  
13a5			 
13a5			 
13a5			 
13a5					ld hl, scratch 
13a5					call config_fdir 
13a5			 
13a5				else 
13a5			 
13a5 21 65 17			ld hl, prom_notav 
13a8 11 7b 17			ld de, prom_empty 
13ab cd 59 0b			call info_panel 
13ae			 
13ae				endif 
13ae c9				ret 
13af			endif 
13af			 
13af			 
13af			; Select storage bank 
13af			 
13af			.selbank: 
13af			 
13af			;	if STORAGE_SE 
13af			;	else 
13af			 
13af 21 65 17			ld hl, prom_notav 
13b2 11 7b 17			ld de, prom_empty 
13b5 cd 59 0b			call info_panel 
13b8			;	endif 
13b8				 
13b8 c9				ret 
13b9			 
13b9			if STORAGE_SE 
13b9			 
13b9			.config_ldir:   
13b9				; Load storage bank labels into menu array 
13b9			 
13b9				 
13b9			 
13b9			 
13b9				ret 
13b9			 
13b9			 
13b9			endif 
13b9			 
13b9			 
13b9			; Save user words to storage 
13b9			 
13b9			.savetostore: 
13b9			 
13b9			;	if STORAGE_SE 
13b9			; 
13b9			;		call config_dir 
13b9			;	        ld hl, scratch 
13b9			;		ld a, 0 
13b9			;		call menu 
13b9			;		 
13b9			;		ld hl, scratch 
13b9			;		call config_fdir 
13b9			; 
13b9			;	else 
13b9			 
13b9 21 65 17			ld hl, prom_notav 
13bc 11 7b 17			ld de, prom_empty 
13bf cd 59 0b			call info_panel 
13c2			 
13c2			;	endif 
13c2			 
13c2 c9				ret 
13c3			 
13c3			if STARTUP_V2 
13c3			 
13c3			create_startup: 
13c3			 
13c3				ld a, 0 
13c3				ld hl, .crstart 
13c3				call menu 
13c3			 
13c3				cp 0 
13c3				ret z 
13c3			 
13c3				cp 1 
13c3				call z, .genlsword 
13c3				cp 2 
13c3				call z, .genedword 
13c3			 
13c3				cp 3 
13c3				call z, .gendemword 
13c3			 
13c3				cp 4 
13c3				call z, .genutlword 
13c3				cp 5 
13c3				call z, .genspiword 
13c3				cp 6 
13c3				call z, .genkeyword 
13c3				cp 7 
13c3				call z, .gensoundword 
13c3				cp 8 
13c3				call z, .genhwword 
13c3				jr create_startup 
13c3			 
13c3			.genhwword: 
13c3				ld hl, crs_hw 
13c3				ld de, .hwworddef 
13c3				call .genfile 
13c3				ret 
13c3			.gensoundword: 
13c3				ld hl, crs_sound 
13c3				ld de, .soundworddef 
13c3				call .genfile 
13c3				ret 
13c3			.genlsword: 
13c3				ld hl, crs_s1 
13c3				ld de, .lsworddef 
13c3				call .genfile 
13c3				ret 
13c3			 
13c3			.genedword: 
13c3				ld de, .edworddef 
13c3				ld hl, crs_s2 
13c3				call .genfile 
13c3				ret 
13c3			 
13c3			.gendemword: 
13c3				ld de, .demoworddef 
13c3				ld hl, crs_s3 
13c3				call .genfile 
13c3				ret 
13c3			 
13c3			.genutlword: 
13c3				ld hl, crs_s4 
13c3				ld de, .utilwordef 
13c3				call .genfile 
13c3				ret 
13c3			.genspiword: 
13c3				ld hl, crs_s5 
13c3				ld de, .spiworddef 
13c3				call .genfile 
13c3				ret 
13c3			.genkeyword: 
13c3				ld hl, crs_s6 
13c3				ld de, .keyworddef 
13c3				call .genfile 
13c3				ret 
13c3			 
13c3			; hl - points to file name 
13c3			; de - points to strings to add to file 
13c3			 
13c3			.genfile: 
13c3				push hl 
13c3				push de 
13c3			 
13c3				call clear_display 
13c3				ld a, display_row_1 
13c3				ld de, .genfiletxt 
13c3				call str_at_display 
13c3				call update_display 
13c3			 
13c3				pop de 
13c3				pop hl 
13c3			 
13c3			 
13c3				push de 
13c3				call storage_create 
13c3				; id in hl 
13c3				pop de   ; table of strings to add 
13c3			 
13c3			.genloop: 
13c3			 
13c3				push hl ; save id for next time around 
13c3				push de ; save de for next time around 
13c3			 
13c3				ex de, hl 
13c3				call loadwordinhl 
13c3				ex de, hl 
13c3			 
13c3				; need hl to be the id 
13c3				; need de to be the string ptr 
13c3				 
13c3				call storage_append 
13c3			 
13c3				pop de 
13c3				pop hl 
13c3			 
13c3				inc de 
13c3				inc de 
13c3			 
13c3				ld a,(de) 
13c3				cp 0 
13c3				jr nz, .genloop 
13c3				inc de 
13c3				ld a, (de) 
13c3				dec de 
13c3				cp 0 
13c3				jr nz, .genloop	 
13c3			 
13c3				ret 
13c3			 
13c3			.genfiletxt:  db "Creating file...",0 
13c3			 
13c3			.hwworddef: 
13c3				dw test5 
13c3				dw test6 
13c3				dw test7 
13c3				dw test8 
13c3				dw test9 
13c3				dw test10 
13c3				dw 0 
13c3			 
13c3			.soundworddef: 
13c3				dw sound1 
13c3				dw sound2 
13c3				dw sound3 
13c3				dw sound4 
13c3				dw sound5 
13c3				dw sound6 
13c3				dw sound7 
13c3				dw sound8 
13c3				dw sound9 
13c3				dw 0 
13c3			 
13c3			.utilwordef: 
13c3				dw strncpy 
13c3				dw type 
13c3				dw tuck 
13c3				dw clrstack 
13c3				dw longread 
13c3				dw start1 
13c3				dw start2 
13c3			; duplicated 
13c3			;	dw start3b 
13c3			;	dw start3c 
13c3				dw list 
13c3				dw 0 
13c3			 
13c3			.lsworddef: 
13c3				dw start3b 
13c3				dw 0 
13c3			 
13c3			.edworddef: 
13c3				dw edit1 
13c3				dw edit2 
13c3				dw edit3 
13c3				dw 0 
13c3			 
13c3			.demoworddef: 
13c3				dw game1 
13c3				dw game1a 
13c3				dw game1b 
13c3				dw game1c 
13c3				dw game1d 
13c3				dw game1s 
13c3				dw game1t 
13c3				dw game1f 
13c3				dw game1z 
13c3				dw game1zz 
13c3				dw ssv2 
13c3				dw ssv3 
13c3				dw ssv4 
13c3				dw ssv5 
13c3				dw ssv1 
13c3				dw ssv1cpm	 
13c3			;	dw game2b 
13c3			;	dw game2bf 
13c3			;	dw game2mba 
13c3			;	dw game2mbas	 
13c3			;	dw game2mbht 
13c3			;	dw game2mbms 
13c3			;	dw game2mb 
13c3			;	dw game3w 
13c3			;	dw game3p 
13c3			;	dw game3sc 
13c3			;	dw game3vsi 
13c3			;	dw game3vs 
13c3				dw 0 
13c3			 
13c3			 
13c3			.spiworddef: 
13c3			 
13c3			    dw spi1 
13c3			    dw spi2 
13c3			    dw spi2b 
13c3			    dw spi3 
13c3			    dw spi4 
13c3			    dw spi5 
13c3			;    dw spi6 
13c3			;    dw spi7 
13c3			 
13c3			;    dw spi8 
13c3			;    dw spi9 
13c3			;    dw spi10 
13c3			    dw 0 
13c3			 
13c3			.keyworddef: 
13c3			 
13c3				dw keyup 
13c3				dw keydown 
13c3				dw keyleft 
13c3				dw keyright 
13c3				dw 	keyf1 
13c3				dw keyf2 
13c3				dw keyf3 
13c3				dw keyf4 
13c3				dw keyf5 
13c3				dw keyf6 
13c3				dw keyf7 
13c3				dw keyf8 
13c3				dw keyf9 
13c3				dw keyf10 
13c3				dw keyf11 
13c3				dw keyf12 
13c3				dw keytab 
13c3				dw keycr 
13c3				dw keyhome 
13c3				dw keyend 
13c3				dw keybs 
13c3				dw 0 
13c3			 
13c3			.crstart: 
13c3				dw crs_s1 
13c3				dw crs_s2 
13c3				dw crs_s3 
13c3				dw crs_s4 
13c3				dw crs_s5 
13c3				dw crs_s6 
13c3				dw crs_sound 
13c3				dw crs_hw 
13c3				dw 0 
13c3			 
13c3			endif 
13c3			 
13c3			 
13c3			if STORAGE_SE 
13c3			 
13c3			config_fdir: 
13c3				; using the scratch dir go through and release the memory allocated for each string 
13c3				 
13c3				ld hl, scratch 
13c3			.cfdir:	ld e,(hl) 
13c3				inc hl 
13c3				ld d,(hl) 
13c3				inc hl 
13c3			 
13c3				ex de, hl 
13c3				call ishlzero 
13c3				ret z     ; return on null pointer 
13c3				call free 
13c3				ex de, hl 
13c3				jr .cfdir 
13c3			 
13c3			 
13c3				ret 
13c3			 
13c3			 
13c3			config_dir: 
13c3			 
13c3				; for the config menus that need to build a directory of storage call this routine 
13c3				; it will construct a menu in scratch to pass to menu 
13c3			 
13c3				; open storage device 
13c3			 
13c3				; execute DIR to build a list of files and their ids into scratch in menu format 
13c3				; once the menu has finished then will need to call config_fdir to release the strings 
13c3				 
13c3				; c = number items 
13c3			 
13c3				 
13c3				call storage_get_block_0 
13c3			 
13c3				ld hl, store_page     ; get current id count 
13c3				ld b, (hl) 
13c3				ld c, 0    ; count of files   
13c3			 
13c3			 
13c3				ld hl, scratch 
13c3				ld (store_tmp2), hl    ; location to poke strings 
13c3			 
13c3				; check for empty drive 
13c3			 
13c3				ld a, 0 
13c3				cp b 
13c3				jp z, .dirdone 
13c3			 
13c3				 
13c3					if DEBUG_FORTH_WORDS 
13c3						DMARK "Cdc" 
13c3						CALLMONITOR 
13c3					endif 
13c3			 
13c3			 
13c3			.diritem:	 
13c3				push bc 
13c3				; for each of the current ids do a search for them and if found push to stack 
13c3			 
13c3					ld hl, STORE_BLOCK_PHY 
13c3					ld d, 0		 ; look for extent 0 of block id as this contains file name 
13c3					ld e,b 
13c3			 
13c3					call storage_findnextid 
13c3			 
13c3			 
13c3					; if found hl will be non zero 
13c3			 
13c3					call ishlzero 
13c3					jr z, .dirnotfound 
13c3			 
13c3					; increase count 
13c3			 
13c3					pop bc	 
13c3					inc c 
13c3					push bc 
13c3					 
13c3			 
13c3					; get file header and push the file name 
13c3			 
13c3					ld de, store_page 
13c3					call storage_read_block 
13c3			 
13c3					; push file id to stack 
13c3				 
13c3					ld a, (store_page) 
13c3					ld h, 0 
13c3					ld l, a 
13c3			 
13c3					;call forth_push_numhl 
13c3					; TODO store id 
13c3			 
13c3					push hl 
13c3			 
13c3					; push extent count to stack  
13c3				 
13c3					ld hl, store_page+3 
13c3			 
13c3					; get file name length 
13c3			 
13c3					call strlenz   
13c3			 
13c3					inc hl   ; cover zero term 
13c3					inc hl  ; stick the id at the end of the area 
13c3			 
13c3					push hl 
13c3					pop bc    ; move length to bc 
13c3			 
13c3					call malloc 
13c3			 
13c3					; TODO save malloc area to scratch 
13c3			 
13c3					ex de, hl 
13c3					ld hl, (store_tmp2) 
13c3					ld (hl), e 
13c3					inc hl 
13c3					ld (hl), d 
13c3					inc hl 
13c3					ld (store_tmp2), hl 
13c3			 
13c3					 
13c3			 
13c3					;pop hl   ; get source 
13c3			;		ex de, hl    ; swap aronund	 
13c3			 
13c3					ld hl, store_page+3 
13c3					if DEBUG_FORTH_WORDS 
13c3						DMARK "CFd" 
13c3						CALLMONITOR 
13c3					endif 
13c3					ldir 
13c3			 
13c3					; de is past string, move back one and store id 
13c3					 
13c3					dec de 
13c3			 
13c3					; store file id 
13c3			 
13c3					pop hl 
13c3					ex de,hl 
13c3					ld (hl), e 
13c3			 
13c3					if DEBUG_FORTH_WORDS 
13c3						DMARK "Cdi" 
13c3						CALLMONITOR 
13c3					endif 
13c3					 
13c3			.dirnotfound: 
13c3					pop bc     
13c3					djnz .diritem 
13c3				 
13c3			.dirdone:	 
13c3			 
13c3					ld a, 0 
13c3					ld hl, (store_tmp2) 
13c3					ld (hl), a 
13c3					inc hl 
13c3					ld (hl), a 
13c3					inc hl 
13c3					; push a count of the dir items found 
13c3			 
13c3			;		ld h, 0 
13c3			;		ld l, c 
13c3			 
13c3				ret 
13c3			 
13c3			endif 
13c3			 
13c3			 
13c3			; Settings 
13c3			; Run  
13c3			 
13c3			 
13c3			 
13c3			;hd_menu1:   db "Diags:  1: Key Matrix   5: Sound",0 
13c3			;;hd_menu2:   db "        2: Editor",0   
13c3			;hd_menu2:   db "        2: Editor       6: Menu",0   
13c3			;hd_menu3:   db "        3: Storage",0 
13c3			;hd_menu4:   db "0=quit  4: Debug",0 
13c3			;hd_don:     db "ON",0 
13c3			;hd_doff:     db "OFF",0 
13c3			; 
13c3			; 
13c3			; 
13c3			;hardware_diags_old:       
13c3			; 
13c3			;.diagmenu: 
13c3			;	call clear_display 
13c3			;	ld a, display_row_1 
13c3			;	ld de, hd_menu1 
13c3			;	call str_at_display 
13c3			; 
13c3			;	ld a, display_row_2 
13c3			;	ld de, hd_menu2 
13c3			;	call str_at_display 
13c3			; 
13c3			;	ld a, display_row_3 
13c3			;	ld de, hd_menu3 
13c3			;	call str_at_display 
13c3			; 
13c3			;	ld a,  display_row_4 
13c3			;	ld de, hd_menu4 
13c3			;	call str_at_display 
13c3			; 
13c3			;	; display debug state 
13c3			; 
13c3			;	ld de, hd_don 
13c3			;	ld a, (os_view_disable) 
13c3			;	cp 0 
13c3			;	jr z, .distog 
13c3			;	ld de, hd_doff 
13c3			;.distog: ld a, display_row_4+17 
13c3			;	call str_at_display 
13c3			; 
13c3			;	call update_display 
13c3			; 
13c3			;	call cin_wait 
13c3			; 
13c3			; 
13c3			; 
13c3			;	cp '4' 
13c3			;	jr nz, .diagn1 
13c3			; 
13c3			;	; debug toggle 
13c3			; 
13c3			;	ld a, (os_view_disable) 
13c3			;	ld b, '*' 
13c3			;	cp 0 
13c3			;	jr z, .debtog 
13c3			;	ld b, 0 
13c3			;.debtog:	 
13c3			;	ld a,b 
13c3			;	ld (os_view_disable),a 
13c3			; 
13c3			;.diagn1: cp '0' 
13c3			;	 ret z 
13c3			; 
13c3			;;	cp '1' 
13c3			;;       jp z, matrix	 
13c3			;;   TODO keyboard matrix test 
13c3			; 
13c3			;	cp '2' 
13c3			;	jp z, .diagedit 
13c3			; 
13c3			;;	cp '6' 
13c3			;;	jp z, .menutest 
13c3			;;if ENABLE_BASIC 
13c3			;;	cp '6' 
13c3			;;	jp z, basic 
13c3			;;endif 
13c3			 ; 
13c3			;	jp .diagmenu 
13c3			; 
13c3			; 
13c3			;	ret 
13c3			 
13c3			 
13c3			.debug_tog: 
13c3 21 0d 14			ld hl, .menudebug 
13c6				 
13c6			;	ld a, (os_view_disable) 
13c6			;	cp '*' 
13c6 3a 6f ee			ld a,(debug_vector) 
13c9 fe c9			cp $C9   ; RET 
13cb 20 04			jr nz,.tdon  
13cd 3e 01			ld a, 1 
13cf 18 02			jr .tog1 
13d1 3e 00		.tdon: ld a, 0 
13d3			 
13d3			.tog1: 
13d3 cd f9 0b			call menu 
13d6 fe 00			cp 0 
13d8 c8				ret z 
13d9 fe 01			cp 1    ; disable debug 
13db 28 04			jr z, .dtog0 
13dd 3e 2a			ld a, '*' 
13df 18 05			jr .dtogset 
13e1			.dtog0:  
13e1				;ld a, 0 
13e1 cd ff 14			call bp_on 
13e4 18 dd			jr .debug_tog 
13e6			.dtogset:  
13e6				; ld (os_view_disable), a 
13e6 cd 0b 15			call bp_off 
13e9 c3 c3 13			jp .debug_tog 
13ec			 
13ec			 
13ec			hardware_diags:       
13ec			 
13ec			.diagm: 
13ec 21 ff 13			ld hl, .menuitems 
13ef 3e 00			ld a, 0 
13f1 cd f9 0b			call menu 
13f4			 
13f4 fe 00		         cp 0 
13f6 c8				 ret z 
13f7			 
13f7 fe 02			cp 2 
13f9 ca 58 14			jp z, .diagedit 
13fc			 
13fc			;	cp '6' 
13fc			;	jp z, .menutest 
13fc			;if ENABLE_BASIC 
13fc			;	cp '6' 
13fc			;	jp z, basic 
13fc			;endif 
13fc			  
13fc c3 ec 13			jp .diagm 
13ff			 
13ff				 
13ff 13 14		.menuitems:   	dw .m1 
1401 1e 14				dw .m2 
1403 25 14				dw .m3 
1405 2d 14				dw .m5 
1407 33 14				dw .m5a 
1409 3c 14				dw .m5b 
140b 00 00				dw 0 
140d			 
140d			.menudebug: 
140d 45 14				dw .m6 
140f 4e 14				dw .m7 
1411 00 00				dw 0 
1413			 
1413 .. 00		.m1:   db "Key Matrix",0 
141e .. 00		.m2:   db "Editor",0 
1425 .. 00		.m3:   db "Storage",0 
142d .. 00		.m5:   db "Sound",0 
1433 .. 00		.m5a:  db "RAM Test",0 
143c .. 00		.m5b:  db "LCD Test",0 
1445			 
1445 .. 00		.m6:   db "Debug ON",0 
144e .. 00		.m7:   db "Debug OFF",0 
1458			 
1458			; debug editor 
1458			 
1458			.diagedit: 
1458			 
1458 21 bb e2			ld hl, scratch 
145b			;	ld bc, 250 
145b			;	ldir 
145b				; TODO ldir is not working strcpy may not get all the terms on the input line???? 
145b 3e 00			ld a, 0 
145d 77				ld (hl), a 
145e 23				inc hl 
145f 77				ld (hl), a 
1460 23				inc hl 
1461 77				ld (hl), a 
1462			 
1462 cd c8 0b		        call clear_display 
1465 cd eb 0b			call update_display 
1468				;ld a, 1 
1468				;ld (hardware_diag), a 
1468			.diloop: 
1468 3e 00			ld a, display_row_1 
146a 0e 00			ld c, 0 
146c 16 ff			ld d, 255    ; TODO fix input_str to actually take note of max string input length 
146e 1e 28			ld e, 40 
1470			 
1470 21 bb e2			ld hl, scratch	 
1473 cd 22 0e			call input_str 
1476			 
1476 3e 28			ld a, display_row_2 
1478 11 bb e2			ld de, scratch 
147b cd db 0b			call str_at_display 
147e cd eb 0b			call update_display 
1481			 
1481 c3 68 14			jp .diloop 
1484			 
1484			 
1484			; pass word in hl 
1484			; a has display location 
1484			display_word_at: 
1484 f5				push af 
1485 e5				push hl 
1486 7c				ld a,h 
1487 21 c0 e5			ld hl, os_word_scratch 
148a cd fe 0f			call hexout 
148d e1				pop hl 
148e 7d				ld a,l 
148f 21 c2 e5			ld hl, os_word_scratch+2 
1492 cd fe 0f			call hexout 
1495 21 c4 e5			ld hl, os_word_scratch+4 
1498 3e 00			ld a,0 
149a 77				ld (hl),a 
149b 11 c0 e5			ld de,os_word_scratch 
149e f1				pop af 
149f cd db 0b				call str_at_display 
14a2 c9				ret 
14a3			 
14a3			display_ptr_state: 
14a3			 
14a3				; to restore afterwards 
14a3			 
14a3 d5				push de 
14a4 c5				push bc 
14a5 e5				push hl 
14a6 f5				push af 
14a7			 
14a7				; for use in here 
14a7			 
14a7			;	push bc 
14a7			;	push de 
14a7			;	push hl 
14a7			;	push af 
14a7			 
14a7 cd c8 0b			call clear_display 
14aa			 
14aa 11 82 16			ld de, .ptrstate 
14ad 3e 00			ld a, display_row_1 
14af cd db 0b			call str_at_display 
14b2			 
14b2				; display debug step 
14b2			 
14b2			 
14b2 11 65 ee			ld de, debug_mark 
14b5 3e 26			ld a, display_row_1+display_cols-2 
14b7 cd db 0b			call str_at_display 
14ba			 
14ba				; display a 
14ba 11 8c 16			ld de, .ptrcliptr 
14bd 3e 28			ld a, display_row_2 
14bf cd db 0b			call str_at_display 
14c2			 
14c2 f1				pop af 
14c3 2a 3a ea			ld hl,(cli_ptr) 
14c6 3e 30			ld a, display_row_2+8 
14c8 cd 84 14			call display_word_at 
14cb			 
14cb			 
14cb				; display hl 
14cb			 
14cb			 
14cb 11 94 16			ld de, .ptrclioptr 
14ce 3e 32			ld a, display_row_2+10 
14d0 cd db 0b			call str_at_display 
14d3			; 
14d3			;	pop hl 
14d3 3e 35			ld a, display_row_2+13 
14d5 2a 38 ea			ld hl,(cli_origptr) 
14d8 cd 84 14			call display_word_at 
14db			; 
14db			;	 
14db			;	; display de 
14db			 
14db			;	ld de, .regstatede 
14db			;	ld a, display_row_3 
14db			;	call str_at_display 
14db			 
14db			;	pop de 
14db			;	ld h,d 
14db			;	ld l, e 
14db			;	ld a, display_row_3+3 
14db			;	call display_word_at 
14db			 
14db			 
14db				; display bc 
14db			 
14db			;	ld de, .regstatebc 
14db			;	ld a, display_row_3+10 
14db			;	call str_at_display 
14db			 
14db			;	pop bc 
14db			;	ld h,b 
14db			;	ld l, c 
14db			;	ld a, display_row_3+13 
14db			;	call display_word_at 
14db			 
14db			 
14db				; display dsp 
14db			 
14db			;	ld de, .regstatedsp 
14db			;	ld a, display_row_4 
14db			;	call str_at_display 
14db			 
14db				 
14db			;	ld hl,(cli_data_sp) 
14db			;	ld a, display_row_4+4 
14db			;	call display_word_at 
14db			 
14db				; display rsp 
14db			 
14db 11 c3 16			ld de, .regstatersp 
14de 3e 82			ld a, display_row_4+10 
14e0 cd db 0b			call str_at_display 
14e3			 
14e3				 
14e3 2a ec e9			ld hl,(cli_ret_sp) 
14e6 3e 86			ld a, display_row_4+14 
14e8 cd 84 14			call display_word_at 
14eb			 
14eb cd eb 0b			call update_display 
14ee			 
14ee cd 00 0b			call delay1s 
14f1 cd 00 0b			call delay1s 
14f4 cd 00 0b			call delay1s 
14f7			 
14f7			 
14f7 cd 08 1b			call next_page_prompt 
14fa			 
14fa				; restore  
14fa			 
14fa f1				pop af 
14fb e1				pop hl 
14fc c1				pop bc 
14fd d1				pop de 
14fe c9				ret 
14ff			 
14ff			; Update the break point vector so that the user can hook a new routine 
14ff			 
14ff			bp_on: 
14ff 3e c3			ld a, $c3    ; JP 
1501 32 6f ee			ld (debug_vector), a 
1504 21 11 15			ld hl, break_point_state 
1507 22 70 ee			ld (debug_vector+1), hl 
150a c9				ret 
150b			 
150b			bp_off: 
150b 3e c9			ld a, $c9    ; RET 
150d 32 6f ee			ld (debug_vector), a 
1510 c9				ret 
1511			 
1511			 
1511			break_point_state: 
1511			;	push af 
1511			; 
1511			;	; see if disabled 
1511			; 
1511			;	ld a, (os_view_disable) 
1511			;	cp '*' 
1511			;	jr nz, .bpsgo 
1511			;	pop af 
1511			;	ret 
1511			 
1511			.bpsgo: 
1511			;	pop af 
1511 f5				push af 
1512 22 9d e2			ld (os_view_hl), hl 
1515 ed 53 9b e2		ld (os_view_de), de 
1519 ed 43 99 e2		ld (os_view_bc), bc 
151d e5				push hl 
151e 6f				ld l, a 
151f 26 00			ld h, 0 
1521 22 9f e2			ld (os_view_af),hl 
1524			 
1524 21 ab ed				ld hl, display_fb0 
1527 22 c6 eb				ld (display_fb_active), hl 
152a e1				pop hl	 
152b			 
152b 3e 31			ld a, '1' 
152d fe 2a		.bps1:  cp '*' 
152f cc 0b 15			call z, bp_off 
1532			;	jr nz, .bps1b 
1532			;	ld (os_view_disable),a 
1532 fe 31		.bps1b:  cp '1' 
1534 20 14			jr nz, .bps2 
1536			 
1536				; display reg 
1536			 
1536				 
1536			 
1536 3a 9f e2			ld a, (os_view_af) 
1539 2a 9d e2			ld hl, (os_view_hl) 
153c ed 5b 9b e2		ld de, (os_view_de) 
1540 ed 4b 99 e2		ld bc, (os_view_bc) 
1544 cd de 15			call display_reg_state 
1547 c3 ca 15			jp .bpschk 
154a			 
154a fe 32		.bps2:  cp '2' 
154c 20 08			jr nz, .bps3 
154e				 
154e				; display hl 
154e 2a 9d e2			ld hl, (os_view_hl) 
1551 cd c8 16			call display_dump_at_hl 
1554			 
1554 18 74			jr .bpschk 
1556			 
1556 fe 33		.bps3:  cp '3' 
1558 20 08			jr nz, .bps4 
155a			 
155a			        ; display de 
155a 2a 9b e2			ld hl, (os_view_de) 
155d cd c8 16			call display_dump_at_hl 
1560			 
1560 18 68			jr .bpschk 
1562 fe 34		.bps4:  cp '4' 
1564 20 08			jr nz, .bps5 
1566			 
1566			        ; display bc 
1566 2a 99 e2			ld hl, (os_view_bc) 
1569 cd c8 16			call display_dump_at_hl 
156c			 
156c 18 5c			jr .bpschk 
156e fe 35		.bps5:  cp '5' 
1570 20 08		        jr nz, .bps7 
1572			 
1572				; display cur ptr 
1572 2a 3a ea			ld hl, (cli_ptr) 
1575 cd c8 16			call display_dump_at_hl 
1578			 
1578 18 50			jr .bpschk 
157a fe 36		.bps7:  cp '6' 
157c 20 08			jr nz, .bps8b 
157e				 
157e				; display cur orig ptr 
157e 2a 38 ea			ld hl, (cli_origptr) 
1581 cd c8 16			call display_dump_at_hl 
1584 18 44			jr .bpschk 
1586 fe 37		.bps8b:  cp '7' 
1588 20 08			jr nz, .bps9 
158a				 
158a				; display dsp 
158a 2a e8 e9			ld hl, (cli_data_sp) 
158d cd c8 16			call display_dump_at_hl 
1590			 
1590 18 38			jr .bpschk 
1592 fe 39		.bps9:  cp '9' 
1594 20 05			jr nz, .bps8c 
1596				 
1596				; display SP 
1596			;	ld hl, sp 
1596 cd c8 16			call display_dump_at_hl 
1599			 
1599 18 2f			jr .bpschk 
159b fe 38		.bps8c:  cp '8' 
159d 20 08			jr nz, .bps8d 
159f				 
159f				; display rsp 
159f 2a ec e9			ld hl, (cli_ret_sp) 
15a2 cd c8 16			call display_dump_at_hl 
15a5			 
15a5 18 23			jr .bpschk 
15a7 fe 23		.bps8d:  cp '#'     ; access monitor sub system 
15a9 20 05			jr nz, .bps8 
15ab cd c2 18			call monitor 
15ae			 
15ae 18 1a			jr .bpschk 
15b0 fe 30		.bps8:  cp '0' 
15b2 20 16			jr nz, .bpschk 
15b4			 
15b4 21 0a ed				ld hl, display_fb1 
15b7 22 c6 eb				ld (display_fb_active), hl 
15ba cd eb 0b				call update_display 
15bd			 
15bd				;ld a, (os_view_af) 
15bd 2a 9d e2			ld hl, (os_view_hl) 
15c0 ed 5b 9b e2		ld de, (os_view_de) 
15c4 ed 4b 99 e2		ld bc, (os_view_bc) 
15c8 f1				pop af 
15c9 c9				ret 
15ca			 
15ca			.bpschk:   
15ca cd 00 0b			call delay1s 
15cd 3e 9f		ld a,display_row_4 + display_cols - 1 
15cf 11 06 1b		        ld de, endprg 
15d2 cd db 0b			call str_at_display 
15d5 cd eb 0b			call update_display 
15d8 cd 9e 61			call cin_wait 
15db			 
15db c3 2d 15			jp .bps1 
15de			 
15de			 
15de			display_reg_state: 
15de			 
15de				; to restore afterwards 
15de			 
15de d5				push de 
15df c5				push bc 
15e0 e5				push hl 
15e1 f5				push af 
15e2			 
15e2				; for use in here 
15e2			 
15e2 c5				push bc 
15e3 d5				push de 
15e4 e5				push hl 
15e5 f5				push af 
15e6			 
15e6 cd c8 0b			call clear_display 
15e9			 
15e9 11 9e 16			ld de, .regstate 
15ec 3e 00			ld a, display_row_1 
15ee cd db 0b			call str_at_display 
15f1			 
15f1				; display debug step 
15f1			 
15f1			 
15f1 11 65 ee			ld de, debug_mark 
15f4 3e 25			ld a, display_row_1+display_cols-3 
15f6 cd db 0b			call str_at_display 
15f9			 
15f9				; display a 
15f9 11 ba 16			ld de, .regstatea 
15fc 3e 28			ld a, display_row_2 
15fe cd db 0b			call str_at_display 
1601			 
1601 e1				pop hl 
1602			;	ld h,0 
1602			;	ld l, a 
1602 3e 2b			ld a, display_row_2+3 
1604 cd 84 14			call display_word_at 
1607			 
1607			 
1607				; display hl 
1607			 
1607			 
1607 11 ae 16			ld de, .regstatehl 
160a 3e 32			ld a, display_row_2+10 
160c cd db 0b			call str_at_display 
160f			 
160f e1				pop hl 
1610 3e 35			ld a, display_row_2+13 
1612 cd 84 14			call display_word_at 
1615			 
1615				 
1615				; display de 
1615			 
1615 11 b2 16			ld de, .regstatede 
1618 3e 50			ld a, display_row_3 
161a cd db 0b			call str_at_display 
161d			 
161d e1				pop hl 
161e			;	ld h,d 
161e			;	ld l, e 
161e 3e 53			ld a, display_row_3+3 
1620 cd 84 14			call display_word_at 
1623			 
1623			 
1623				; display bc 
1623			 
1623 11 b6 16			ld de, .regstatebc 
1626 3e 5a			ld a, display_row_3+10 
1628 cd db 0b			call str_at_display 
162b			 
162b e1				pop hl 
162c			;	ld h,b 
162c			;	ld l, c 
162c 3e 5d			ld a, display_row_3+13 
162e cd 84 14			call display_word_at 
1631			 
1631			 
1631				; display dsp 
1631			 
1631 11 be 16			ld de, .regstatedsp 
1634 3e 78			ld a, display_row_4 
1636 cd db 0b			call str_at_display 
1639			 
1639				 
1639 2a e8 e9			ld hl,(cli_data_sp) 
163c 3e 7c			ld a, display_row_4+4 
163e cd 84 14			call display_word_at 
1641			 
1641				; display rsp 
1641			 
1641 11 c3 16			ld de, .regstatersp 
1644 3e 82			ld a, display_row_4+10 
1646 cd db 0b			call str_at_display 
1649			 
1649				 
1649 2a ec e9			ld hl,(cli_ret_sp) 
164c 3e 86			ld a, display_row_4+14 
164e cd 84 14			call display_word_at 
1651			 
1651 cd eb 0b			call update_display 
1654			 
1654			;	call delay1s 
1654			;	call delay1s 
1654			;	call delay1s 
1654			 
1654			 
1654			;	call next_page_prompt 
1654			 
1654				; restore  
1654			 
1654 f1				pop af 
1655 e1				pop hl 
1656 c1				pop bc 
1657 d1				pop de 
1658 c9				ret 
1659			 
1659 .. 00		.wordincurptr:  db "Word in cur_ptr (5)",0 
166d .. 00		.wordincuroptr:  db "Word in cur_optr (6)",0 
1682 .. 00		.ptrstate:	db "Ptr State",0 
168c .. 00		.ptrcliptr:     db "cli_ptr",0 
1694 .. 00		.ptrclioptr:     db "cli_o_ptr",0 
169e .. 00		.regstate:	db "Reg State (1/0)",0 
16ae .. 00		.regstatehl:	db "HL:",0 
16b2 .. 00		.regstatede:	db "DE:",0 
16b6 .. 00		.regstatebc:	db "BC:",0 
16ba .. 00		.regstatea:	db "A :",0 
16be .. 00		.regstatedsp:	db "DSP:",0 
16c3 .. 00		.regstatersp:	db "RSP:",0 
16c8			 
16c8			display_dump_at_hl: 
16c8 e5				push hl 
16c9 d5				push de 
16ca c5				push bc 
16cb f5				push af 
16cc			 
16cc 22 de e5			ld (os_cur_ptr),hl	 
16cf cd c8 0b			call clear_display 
16d2 cd 10 1a			call dumpcont 
16d5			;	call delay1s 
16d5			;	call next_page_prompt 
16d5			 
16d5			 
16d5 f1				pop af 
16d6 c1				pop bc 
16d7 d1				pop de 
16d8 e1				pop hl 
16d9 c9				ret 
16da			 
16da			;if ENABLE_BASIC 
16da			;	include "nascombasic.asm" 
16da			;	basic: 
16da			;	include "forth/FORTH.ASM" 
16da			;endif 
16da			 
16da			; eof 
16da			 
16da			 
# End of file firmware_diags.asm
16da			  
16da			include "firmware_prompts.asm"  
16da			; Prompts  
16da			 
16da			; boot messages 
16da			 
16da .. 00		prom_bootmsg:	db "z80-homebrew OS v1.7",0 
16ef .. 00		prom_bootmsg1:	db "by Kevin Groves",0 
16ff			 
16ff			 
16ff			; config menus 
16ff			 
16ff			;prom_c3: db "Add Dictionary To File",0 
16ff			 
16ff			if STARTUP_V1 
16ff .. 00		prom_c2: db "Select Autoload File",0 
1714 .. 00		prom_c2a: db "Disable Autoload File", 0 
172a			endif 
172a			 
172a			if STARTUP_V2 
172a			prom_c2: db "Enable Autoload Files",0 
172a			prom_c2a: db "Disable Autoload Files", 0 
172a			 
172a			crs_s1: db "*ls-word", 0 
172a			crs_s2: db "*ed-word", 0 
172a			crs_s3: db "*Demo-Games", 0 
172a			crs_s4: db "*Utils", 0 
172a			crs_s5: db "*SPI-Util", 0 
172a			crs_s6: db "*Key-Constants", 0 
172a			crs_sound: db "*Sound-Util", 0 
172a			crs_hw: db "*Hello-World",0 
172a			 
172a			 
172a			 
172a			endif 
172a			;prom_c2b: db "Select Storage Bank",0 
172a .. 00		prom_c4: db "Settings",0 
1733 .. 00		prom_m4:   db "Debug & Breakpoints On/Off",0 
174e .. 00		prom_m4b:   db "Monitor",0 
1756 .. 00		prom_c1: db "Hardware Diags",0 
1765			 
1765			 
1765			if STARTUP_V2 
1765			prom_c9: db "Create Startup Files",0 
1765			endif 
1765			 
1765 .. 00		prom_notav:    db "Feature not available",0 
177b .. 00		prom_empty:    db "",0 
177c			 
177c			; eof 
177c			 
# End of file firmware_prompts.asm
177c			  
177c			  
177c			; eof  
177c			  
# End of file firmware.asm
177c			 
177c			;; below moved from firmware.asm for strange zero calc of baseusermem label. Scope issue on multipass???? 
177c			;if BASE_KEV  
177c			;baseram: equ 08000h 
177c			;endif 
177c			 
177c			;if BASE_SC114 
177c			;baseram:     equ    endofcode 
177c			;endif 
177c			 
177c			 
177c			; Add NMI support. A rst 066h when r15z goes neg on clock side of resist. needs to do retn when exiting 
177c			 
177c			; start system 
177c			 
177c			coldstart: 
177c				; set sp 
177c				; di/ei 
177c			 
177c f3				di 
177d 31 00 f0			ld sp, tos 
1780 cd 9c 60			call init_nmi 
1783			;	ei 
1783			 
1783				; init spinner 
1783 3e 00			ld a,0 
1785 32 c0 eb			ld (display_active), a 
1788			 
1788				; disable breakpoint by default 
1788			 
1788				;ld a,'*' 
1788			;	ld a,' ' 
1788			;	ld (os_view_disable),a 
1788			 
1788				; set break point vector as new break point on or off 
1788 cd 0b 15			call bp_off 
178b			 
178b				; init hardware 
178b			 
178b				; init keyboard and screen hardware 
178b			 
178b cd 1f 01			call hardware_init 
178e			 
178e			 
178e cd 00 0b			call delay1s 
1791 3e 58			ld a, display_row_3+8 
1793 11 03 01			ld de, buildtime 
1796 cd db 0b			call str_at_display 
1799 cd eb 0b			call update_display 
179c			 
179c cd 00 0b			call delay1s 
179f cd 00 0b			call delay1s 
17a2 cd 00 0b			call delay1s 
17a5			 
17a5				; detect if any keys are held down to enable breakpoints at start up 
17a5			 
17a5 cd a6 61			call cin  
17a8 fe 00			cp 0 
17aa 28 03			jr z, .nokeys 
17ac			 
17ac				;call hardware_diags 
17ac cd 69 13			call config 
17af			 
17af			;	ld de, .bpen 
17af			;	ld a, display_row_4 
17af			;	call str_at_display 
17af			;	call update_display 
17af			; 
17af			;	ld a,0 
17af			;	ld (os_view_disable),a 
17af			; 
17af			;.bpwait: 
17af			;	call cin 
17af			;	cp 0 
17af			;	jr z, .bpwait 
17af			;	jr .nokeys 
17af			; 
17af			; 
17af			;.bpen:  db "Break points enabled!",0 
17af			 
17af			 
17af			 
17af			 
17af			 
17af			 
17af			.nokeys: 
17af			 
17af			 
17af				 
17af			 
17af			;jp  testkey 
17af			 
17af			;call storage_get_block_0 
17af			; 
17af			;ld hl, 0 
17af			;ld de, store_page 
17af			;call storage_read_block 
17af			 
17af				 
17af			;ld hl, 10 
17af			;ld de, store_page 
17af			;call storage_read_block 
17af			 
17af			 
17af			 
17af			 
17af			 
17af			;stop:	nop 
17af			;	jp stop 
17af			 
17af			 
17af			 
17af			main: 
17af cd c8 0b			call clear_display 
17b2 cd eb 0b			call update_display 
17b5			 
17b5			 
17b5			 
17b5			;	call testlcd 
17b5			 
17b5			 
17b5			 
17b5 cd 51 1f			call forth_init 
17b8			 
17b8			 
17b8			warmstart: 
17b8 cd 27 1f			call forth_warmstart 
17bb			 
17bb				; run startup word load 
17bb			        ; TODO prevent this running at warmstart after crash  
17bb			 
17bb				if STARTUP_ENABLE 
17bb			 
17bb					if STARTUP_V1 
17bb			 
17bb						if STORAGE_SE 
17bb							call forth_autoload 
17bb						endif 
17bb cd ec 5f					call forth_startup 
17be					endif 
17be			 
17be					if STARTUP_V2 
17be			 
17be						if STORAGE_SE 
17be							call forth_autoload 
17be						else 
17be							call forth_startup 
17be						endif 
17be			 
17be			 
17be					endif 
17be			 
17be				endif 
17be			 
17be			warmstart_afterauto: 
17be			 
17be				; show free memory after boot 
17be 11 5d 18			ld de, freeram 
17c1 3e 00			ld a, display_row_1 
17c3 cd db 0b			call str_at_display 
17c6			 
17c6				; get current heap start after loading any uwords 
17c6			 
17c6				;ld de, (os_last_new_uword) 
17c6				;ex de, hl 
17c6			 
17c6			; Or use heap_size word???? 
17c6				;ld hl, heap_end 
17c6				;ld hl, heap_size 
17c6				;ld de, topusermem 
17c6				;ld de, heap_start 
17c6 ed 5b c9 61			ld de, (free_list )      
17ca 21 96 e2				ld hl, heap_end 
17cd ed 52			sbc hl, de 
17cf				;push hl 
17cf				;ld a,h	         	 
17cf				;ld hl, os_word_scratch		; TODO do direct write to frame buffer instead and drop the str_at_display 
17cf				;call hexout 
17cf			   	;pop hl 
17cf			; 
17cf			;	ld a,l 
17cf			;	ld hl, os_word_scratch+2 
17cf			;	call hexout 
17cf			;	ld hl, os_word_scratch+4 
17cf			;	ld a, 0 
17cf			;	ld (hl),a 
17cf eb				ex de, hl 
17d0 21 c0 e5			ld hl, os_word_scratch 
17d3 cd 0a 11			call uitoa_16 
17d6			 
17d6			 
17d6 11 c0 e5			ld de, os_word_scratch 
17d9 3e 0d			ld a, display_row_1 + 13 
17db cd db 0b			call str_at_display 
17de cd eb 0b			call update_display 
17e1			 
17e1			 
17e1				;call demo 
17e1			 
17e1			 
17e1				; init scratch input area for cli commands 
17e1			 
17e1 21 e2 e5			ld hl, os_cli_cmd 
17e4 3e 00			ld a,0 
17e6 77				ld (hl),a 
17e7 23				inc hl 
17e8 77				ld (hl),a 
17e9			 
17e9 3e 00			ld a,0 
17eb 32 e1 e6			ld (os_last_cmd),a	; current command in use to enable repeated use with an enter etc 
17ee			 
17ee 32 de e5			ld (os_cur_ptr),a	; ptr to whatever is needed for this command 
17f1 32 df e5			ld (os_cur_ptr+1),a	 
17f4			 
17f4 32 c0 e5			ld (os_word_scratch),a	; byte or word being used in parsing for this command 
17f7 32 c1 e5			ld (os_word_scratch+1),a	 
17fa				 
17fa			 
17fa				;ld a, kLCD_Line2        ; TODO prompt using direct screen line address. Correct this to frame buffer 
17fa 21 e2 e5			ld hl, os_cli_cmd 
17fd			 
17fd 3e 00			ld a, 0		 ; init cli input 
17ff 77				ld (hl), a 
1800 3e 28			ld a, display_row_2        ; TODO prompt using direct screen line address. Correct this to frame buffer 
1802			cli: 
1802				; show cli prompt 
1802				;push af 
1802				;ld a, 0 
1802				;ld de, prompt 
1802				;call str_at_display 
1802			 
1802				;call update_display 
1802				;pop af 
1802				;inc a 
1802				;ld a, kLCD_Line4+1	 ; TODO using direct screen line writes. Correct this to frame buffer 
1802			 
1802			.lastrecall: 
1802			 
1802 0e 00			ld c, 0 
1804 16 ff			ld d, 255    ; TODO fix input_str to actually take note of max string input length 
1806 1e 28			ld e, 40 
1808			 
1808 21 e2 e5			ld hl, os_cli_cmd 
180b			 
180b				STACKFRAME OFF $fefe $9f9f 
180b				if DEBUG_STACK_IMB 
180b					if OFF 
180b						exx 
180b						ld de, $fefe 
180b						ld a, d 
180b						ld hl, curframe 
180b						call hexout 
180b						ld a, e 
180b						ld hl, curframe+2 
180b						call hexout 
180b						ld hl, $fefe 
180b						push hl 
180b						ld hl, $9f9f 
180b						push hl 
180b						exx 
180b					endif 
180b				endif 
180b			endm 
# End of macro STACKFRAME
180b			 
180b cd 22 0e			call input_str 
180e			 
180e				STACKFRAMECHK OFF $fefe $9f9f 
180e				if DEBUG_STACK_IMB 
180e					if OFF 
180e						exx 
180e						ld hl, $9f9f 
180e						pop de   ; $9f9f 
180e						call cmp16 
180e						jr nz, .spnosame 
180e						ld hl, $fefe 
180e						pop de   ; $fefe 
180e						call cmp16 
180e						jr z, .spfrsame 
180e						.spnosame: call showsperror 
180e						.spfrsame: nop 
180e						exx 
180e					endif 
180e				endif 
180e			endm 
# End of macro STACKFRAMECHK
180e			 
180e			 
180e				; check to see if last line recall has been requested 
180e			 
180e			if EDIT_V2 
180e fe 05			cp KEY_UP 
1810 20 0f			jr nz, .noexecline 
1812			 
1812 11 e2 e5			ld de, os_cli_cmd 
1815 21 e1 e6			ld hl, os_last_cmd 
1818 01 ff 00			ld bc, 255 
181b ed b0			ldir 
181d 3e 00			ld a, 0 
181f 18 e1			jr .lastrecall 
1821			endif 
1821			 
1821			.noexecline: 
1821				; no so exec the line		 
1821			 
1821				; copy input to last command 
1821			 
1821 21 e2 e5			ld hl, os_cli_cmd 
1824 11 e1 e6			ld de, os_last_cmd 
1827 01 ff 00			ld bc, 255 
182a ed b0			ldir 
182c			 
182c				; wipe current buffer 
182c			 
182c			;	ld a, 0 
182c			;	ld hl, os_cli_cmd 
182c			;	ld de, os_cli_cmd+1 
182c			;	ld bc, 254 
182c			;	ldir 
182c				; TODO ldir is not working strcpy may not get all the terms on the input line???? 
182c			;	call strcpy 
182c			;	ld a, 0 
182c			;	ld (hl), a 
182c			;	inc hl 
182c			;	ld (hl), a 
182c			;	inc hl 
182c			;	ld (hl), a 
182c			 
182c				; switch frame buffer to program  
182c			 
182c 21 0a ed				ld hl, display_fb1 
182f 22 c6 eb				ld (display_fb_active), hl 
1832			 
1832			;	nop 
1832				STACKFRAME ON $fbfe $8f9f 
1832				if DEBUG_STACK_IMB 
1832					if ON 
1832						exx 
1832						ld de, $fbfe 
1832						ld a, d 
1832						ld hl, curframe 
1832						call hexout 
1832						ld a, e 
1832						ld hl, curframe+2 
1832						call hexout 
1832						ld hl, $fbfe 
1832						push hl 
1832						ld hl, $8f9f 
1832						push hl 
1832						exx 
1832					endif 
1832				endif 
1832			endm 
# End of macro STACKFRAME
1832				; first time into the parser so pass over the current scratch pad 
1832 21 e2 e5			ld hl,os_cli_cmd 
1835				; tokenise the entered statement(s) in HL 
1835 cd cb 1f			call forthparse 
1838			        ; exec forth statements in top of return stack 
1838 cd 07 20			call forthexec 
183b				;call forthexec_cleanup 
183b			;	call parsenext 
183b			 
183b				STACKFRAMECHK ON $fbfe $8f9f 
183b				if DEBUG_STACK_IMB 
183b					if ON 
183b						exx 
183b						ld hl, $8f9f 
183b						pop de   ; $8f9f 
183b						call cmp16 
183b						jr nz, .spnosame 
183b						ld hl, $fbfe 
183b						pop de   ; $fbfe 
183b						call cmp16 
183b						jr z, .spfrsame 
183b						.spnosame: call showsperror 
183b						.spfrsame: nop 
183b						exx 
183b					endif 
183b				endif 
183b			endm 
# End of macro STACKFRAMECHK
183b				; TODO on return from forth parsing should there be a prompt to return to system? but already in system. 
183b			 
183b 3e 78			ld a, display_row_4 
183d 11 6e 18			ld de, endprog 
1840			 
1840 cd eb 0b			call update_display		 
1843			 
1843 cd 08 1b			call next_page_prompt 
1846			 
1846				; switch frame buffer to cli 
1846			 
1846 21 ab ed				ld hl, display_fb0 
1849 22 c6 eb				ld (display_fb_active), hl 
184c			 
184c			 
184c cd c8 0b		        call clear_display 
184f cd eb 0b			call update_display		 
1852			 
1852 21 e2 e5			ld hl, os_cli_cmd 
1855			 
1855 3e 00			ld a, 0		 ; init cli input 
1857 77				ld (hl), a 
1858			 
1858				; TODO f_cursor_ptr should inc row (scroll if required) and set start of row for next input  
1858			 
1858				; now on last line 
1858			 
1858				; TODO scroll screen up 
1858			 
1858				; TODO instead just clear screen and place at top of screen 
1858			 
1858			;	ld a, 0 
1858			;	ld (f_cursor_ptr),a 
1858			 
1858				;call clear_display 
1858				;call update_display 
1858			 
1858				;ld a, kLCD_Line1        ; TODO prompt using direct screen line address. Correct this to frame buffer 
1858 3e 00			ld a, display_row_1        ; TODO prompt using direct screen line address. Correct this to frame buffer 
185a c3 02 18			jp cli 
185d			 
185d .. 00		freeram: db "Free bytes: ",0 
186a ..			asc: db "1A2F" 
186e .. 00		endprog: db "End prog...",0 
187a			 
187a			testenter2:   
187a 21 ed e2			ld hl,scratch+50 
187d 22 de e5			ld (os_cur_ptr),hl 
1880 c3 02 18			jp cli 
1883			 
1883			testenter:  
1883			 
1883 21 6a 18			ld hl,asc 
1886			;	ld a,(hl) 
1886			;	call nibble2val 
1886 cd 54 10			call get_byte 
1889			 
1889			 
1889			;	ld a,(hl) 
1889			;	call atohex 
1889			 
1889			;	call fourehexhl 
1889 32 ed e2			ld (scratch+50),a 
188c			 
188c			 
188c			 
188c 21 6c 18			ld hl,asc+2 
188f			;	ld a, (hl) 
188f			;	call nibble2val 
188f cd 54 10			call get_byte 
1892			 
1892			;	call fourehexhl 
1892 32 ef e2			ld (scratch+52),a 
1895				 
1895 21 ed e2			ld hl,scratch+50 
1898 22 de e5			ld (os_cur_ptr),hl 
189b c3 02 18			jp cli 
189e			 
189e			enter:	 
189e 3a bf e2			ld a,(scratch+4) 
18a1 fe 00			cp 0 
18a3 28 0c			jr z, .entercont 
18a5				; no, not a null term line so has an address to work out.... 
18a5			 
18a5 21 bd e2			ld hl,scratch+2 
18a8 cd b4 10			call get_word_hl 
18ab			 
18ab 22 de e5			ld (os_cur_ptr),hl	 
18ae c3 02 18			jp cli 
18b1			 
18b1			 
18b1			.entercont:  
18b1			 
18b1 21 bd e2			ld hl, scratch+2 
18b4 cd 54 10			call get_byte 
18b7			 
18b7 2a de e5		   	ld hl,(os_cur_ptr) 
18ba 77					ld (hl),a 
18bb 23					inc hl 
18bc 22 de e5				ld (os_cur_ptr),hl 
18bf				 
18bf			; get byte  
18bf			 
18bf			 
18bf c3 02 18			jp cli 
18c2			 
18c2			 
18c2			; basic monitor support 
18c2			 
18c2			monitor: 
18c2				;  
18c2 cd c8 0b			call clear_display 
18c5 3e 00			ld a, 0 
18c7 11 1b 19			ld de, .monprompt 
18ca cd db 0b			call str_at_display 
18cd cd eb 0b			call update_display 
18d0			 
18d0				; get a monitor command 
18d0			 
18d0 0e 00			ld c, 0     ; entry at top left 
18d2 16 64			ld d, 100   ; max buffer size 
18d4 1e 0f			ld e, 15    ; input scroll area 
18d6 3e 00			ld a, 0     ; init string 
18d8 21 b9 e4			ld hl, os_input 
18db 77				ld (hl), a 
18dc 23				inc hl 
18dd 77				ld (hl), a 
18de 21 b9 e4			ld hl, os_input 
18e1 3e 01			ld a, 1     ; init string 
18e3 cd 22 0e			call input_str 
18e6			 
18e6 cd c8 0b		        call clear_display 
18e9 cd eb 0b			call update_display		 
18ec			 
18ec 3a b9 e4			ld a, (os_input) 
18ef cd 52 11			call toUpper 
18f2 fe 48		        cp 'H' 
18f4 ca 8f 19		        jp z, .monhelp 
18f7 fe 44			cp 'D'		; dump 
18f9 ca c2 19			jp z, .mondump	 
18fc fe 43			cp 'C'		; dump 
18fe ca dc 19			jp z, .moncdump	 
1901 fe 4d			cp 'M'		; dump 
1903 ca 1d 19			jp z, .moneditstart 
1906 fe 55			cp 'U'		; dump 
1908 ca 29 19			jp z, .monedit	 
190b fe 47			cp 'G'		; dump 
190d ca b8 19			jp z, .monjump 
1910 fe 42			cp 'B'		; forth breakpoint 
1912 cc 11 15			call z, break_point_state 
1915 fe 51			cp 'Q'		; dump 
1917 c8				ret z	 
1918			 
1918			 
1918				; TODO "S" to access symbol by name and not need the address 
1918				; TODO "F" to find a string in memory 
1918			 
1918 c3 c2 18			jp monitor 
191b			 
191b .. 00		.monprompt: db ">", 0 
191d			 
191d			.moneditstart: 
191d				; get starting address 
191d			 
191d 21 bb e4			ld hl,os_input+2 
1920 cd b4 10			call get_word_hl 
1923			 
1923 22 de e5			ld (os_cur_ptr),hl	 
1926			 
1926 c3 c2 18			jp monitor 
1929			 
1929			.monedit: 
1929				; get byte to load 
1929			 
1929 21 bb e4			ld hl,os_input+2 
192c cd 54 10			call get_byte 
192f			 
192f				; get address to update 
192f 2a de e5			ld hl, (os_cur_ptr) 
1932			 
1932				; update byte 
1932			 
1932 77				ld (hl), a 
1933			 
1933				; move to next address and save it 
1933			 
1933 23				inc hl 
1934 22 de e5			ld (os_cur_ptr),hl	 
1937			 
1937 c3 c2 18			jp monitor 
193a			 
193a			 
193a .. 00		.monhelptext1: 	db "D-Dump, C-Cont Dump",0 
194e .. 00		.monhelptext2:  db "M-Edit Start, U-Update Byte",0 
196a .. 00		.monhelptext3:  db "G-Call address, B-Breakpoints",0 
1988 .. 00		.monhelptext4:  db "Q-Quit",0 
198f			        
198f			.monhelp: 
198f 3e 00			ld a, display_row_1 
1991 11 3a 19		        ld de, .monhelptext1 
1994			 
1994 cd db 0b			call str_at_display 
1997 3e 28			ld a, display_row_2 
1999 11 4e 19		        ld de, .monhelptext2 
199c					 
199c cd db 0b			call str_at_display 
199f 3e 50			ld a, display_row_3 
19a1 11 6a 19		        ld de, .monhelptext3 
19a4					 
19a4 cd db 0b			call str_at_display 
19a7 3e 78			ld a, display_row_4 
19a9 11 88 19		        ld de, .monhelptext4 
19ac cd db 0b			call str_at_display 
19af			 
19af cd eb 0b			call update_display		 
19b2			 
19b2 cd 08 1b			call next_page_prompt 
19b5 c3 c2 18			jp monitor 
19b8			 
19b8			.monjump:    
19b8 21 bb e4			ld hl,os_input+2 
19bb cd b4 10			call get_word_hl 
19be			 
19be e9				jp (hl) 
19bf c3 c2 18			jp monitor 
19c2			 
19c2			.mondump:    
19c2 21 bb e4			ld hl,os_input+2 
19c5 cd b4 10			call get_word_hl 
19c8			 
19c8 22 de e5			ld (os_cur_ptr),hl	 
19cb cd 10 1a			call dumpcont 
19ce 3e 78			ld a, display_row_4 
19d0 11 6e 18			ld de, endprog 
19d3			 
19d3 cd eb 0b			call update_display		 
19d6			 
19d6 cd 08 1b			call next_page_prompt 
19d9 c3 c2 18			jp monitor 
19dc			.moncdump: 
19dc cd 10 1a			call dumpcont 
19df 3e 78			ld a, display_row_4 
19e1 11 6e 18			ld de, endprog 
19e4			 
19e4 cd eb 0b			call update_display		 
19e7			 
19e7 cd 08 1b			call next_page_prompt 
19ea c3 c2 18			jp monitor 
19ed			 
19ed			 
19ed			; TODO symbol access  
19ed			 
19ed			.symbols:     ;; A list of symbols that can be called up  
19ed ab ed			dw display_fb0 
19ef .. 00			db "fb0",0  
19f3 74 ea		     	dw store_page 
19f5 .. 00			db "store_page",0 
1a00			 
1a00			 
1a00			dump:	; see if we are cotinuing on from the last command by not uncluding any address 
1a00			 
1a00 3a bc e2			ld a,(scratch+1) 
1a03 fe 00			cp 0 
1a05 28 09			jr z, dumpcont 
1a07			 
1a07				; no, not a null term line so has an address to work out.... 
1a07			 
1a07 21 bd e2			ld hl,scratch+2 
1a0a cd b4 10			call get_word_hl 
1a0d			 
1a0d 22 de e5			ld (os_cur_ptr),hl	 
1a10			 
1a10			 
1a10			 
1a10			dumpcont: 
1a10			 
1a10				; dump bytes at ptr 
1a10			 
1a10			 
1a10 3e 00			ld a, display_row_1 
1a12 2a c6 eb			ld hl, (display_fb_active) 
1a15 cd f5 0d			call addatohl 
1a18 cd 40 1a			call .dumpbyterow 
1a1b			 
1a1b 3e 28			ld a, display_row_2 
1a1d 2a c6 eb			ld hl, (display_fb_active) 
1a20 cd f5 0d			call addatohl 
1a23 cd 40 1a			call .dumpbyterow 
1a26			 
1a26			 
1a26 3e 50			ld a, display_row_3 
1a28 2a c6 eb			ld hl, (display_fb_active) 
1a2b cd f5 0d			call addatohl 
1a2e cd 40 1a			call .dumpbyterow 
1a31			 
1a31 3e 78			ld a, display_row_4 
1a33 2a c6 eb			ld hl, (display_fb_active) 
1a36 cd f5 0d			call addatohl 
1a39 cd 40 1a			call .dumpbyterow 
1a3c			 
1a3c cd eb 0b			call update_display 
1a3f			;		jp cli 
1a3f c9				ret 
1a40			 
1a40			.dumpbyterow: 
1a40			 
1a40				;push af 
1a40			 
1a40 e5				push hl 
1a41			 
1a41				; calc where to poke the ascii 
1a41			if display_cols == 20 
1a41				ld a, 16 
1a41			else 
1a41 3e 1f			ld a, 31 
1a43			endif 
1a43			 
1a43 cd f5 0d			call addatohl 
1a46 22 c0 e5			ld (os_word_scratch),hl  		; save pos for later 
1a49			 
1a49			 
1a49			; display decoding address 
1a49 2a de e5		   	ld hl,(os_cur_ptr) 
1a4c			 
1a4c 7c				ld a,h 
1a4d e1				pop hl 
1a4e e5				push hl 
1a4f			;	ld hl, os_word_scratch		; TODO do direct write to frame buffer instead and drop the str_at_display 
1a4f cd fe 0f			call hexout 
1a52 2a de e5		   	ld hl,(os_cur_ptr) 
1a55			 
1a55 7d				ld a,l 
1a56 e1				pop hl 
1a57 23				inc hl 
1a58 23				inc hl 
1a59 e5				push hl 
1a5a			;	ld hl, os_word_scratch+2 
1a5a cd fe 0f			call hexout 
1a5d e1				pop hl 
1a5e 23				inc hl 
1a5f 23				inc hl 
1a60				;ld hl, os_word_scratch+4 
1a60 3e 3a			ld a, ':' 
1a62 77				ld (hl),a 
1a63 23				inc hl 
1a64				;ld a, 0 
1a64				;ld (hl),a 
1a64				;ld de, os_word_scratch 
1a64				;pop af 
1a64				;push af 
1a64			;		ld a, display_row_2 
1a64			;		call str_at_display 
1a64			;		call update_display 
1a64			 
1a64			 
1a64			;pop af 
1a64			;	add 5 
1a64			 
1a64			if display_cols == 20 
1a64				ld b, 4 
1a64			else 
1a64 06 08			ld b, 8 
1a66			endif	 
1a66			 
1a66			.dumpbyte: 
1a66 c5				push bc 
1a67 e5				push hl 
1a68			 
1a68			 
1a68 2a de e5		   	ld hl,(os_cur_ptr) 
1a6b 7e					ld a,(hl) 
1a6c			 
1a6c					; poke the ascii to display 
1a6c 2a c0 e5				ld hl,(os_word_scratch) 
1a6f 77					ld (hl),a 
1a70 23					inc hl 
1a71 22 c0 e5				ld (os_word_scratch),hl 
1a74			 
1a74					 
1a74			 
1a74			 
1a74 e1					pop hl 
1a75 e5					push hl 
1a76			 
1a76 cd fe 0f				call hexout 
1a79			 
1a79					 
1a79 2a de e5		   	ld hl,(os_cur_ptr) 
1a7c 23				inc hl 
1a7d 22 de e5		   	ld (os_cur_ptr),hl 
1a80			 
1a80 e1					pop hl 
1a81 23					inc hl 
1a82 23					inc hl 
1a83 23					inc hl 
1a84			 
1a84			 
1a84			 
1a84					;ld a,0 
1a84					;ld (os_word_scratch+2),a 
1a84					;pop af 
1a84					;push af 
1a84			 
1a84					;ld de, os_word_scratch 
1a84					;call str_at_display 
1a84			;		call update_display 
1a84			;		pop af 
1a84 c1					pop bc 
1a85 c6 03				add 3 
1a87 10 dd			djnz .dumpbyte 
1a89			 
1a89				 
1a89			 
1a89 c9				ret 
1a8a			 
1a8a			jump:	 
1a8a			 
1a8a 21 bd e2			ld hl,scratch+2 
1a8d cd b4 10			call get_word_hl 
1a90				;ld hl,(scratch+2) 
1a90				;call fourehexhl 
1a90			 
1a90 22 de e5			ld (os_cur_ptr),hl	 
1a93			 
1a93 e9				jp (hl) 
1a94			 
1a94			 
1a94			 
1a94			; TODO implement a basic monitor mode to start with 
1a94			 
1a94			 
1a94			 
1a94			 
1a94			 
1a94			 
1a94			 
1a94			 
1a94			 
1a94			; testing and demo code during development 
1a94			 
1a94			 
1a94 .. 00		str1: db "Enter some text...",0 
1aa7 .. 00		clear: db "                    ",0 
1abc			 
1abc			demo: 
1abc			 
1abc			 
1abc			 
1abc			;	call update_display 
1abc			 
1abc				; init scratch input area for testing 
1abc 21 bb e2			ld hl, scratch	 
1abf 3e 00			ld a,0 
1ac1 77				ld (hl),a 
1ac2			 
1ac2			 
1ac2 3e 28		            LD   A, display_row_2 
1ac4			;            CALL fLCD_Pos       ;Position cursor to location in A 
1ac4 11 94 1a		            LD   DE, str1 
1ac7 cd db 0b			call str_at_display 
1aca			 
1aca			;            CALL fLCD_Str       ;Display string pointed to by DE 
1aca			cloop:	 
1aca 3e 50		            LD   A, display_row_3 
1acc			;            CALL fLCD_Pos       ;Position cursor to location in A 
1acc 11 a7 1a		            LD   DE, clear 
1acf			 ;           CALL fLCD_Str       ;Display string pointed to by DE 
1acf cd db 0b				call str_at_display 
1ad2 3e 78			ld a, display_row_4 
1ad4 11 04 1b			ld de, prompt 
1ad7			 
1ad7 cd db 0b				call str_at_display 
1ada cd eb 0b			call update_display 
1add			 
1add 3e 79			ld a, kLCD_Line4+1	 ; TODO using direct screen line writes. Correct this to frame buffer 
1adf 16 0a			ld d, 10 
1ae1 21 bb e2			ld hl, scratch	 
1ae4 cd 22 0e			call input_str 
1ae7			 
1ae7			;	call clear_display 
1ae7			;'	call update_display 
1ae7			 
1ae7 3e 00		            LD   A, display_row_1 
1ae9			;            CALL fLCD_Pos       ;Position cursor to location in A 
1ae9 11 a7 1a		            LD   DE, clear 
1aec cd db 0b				call str_at_display 
1aef			;            CALL fLCD_Str       ;Display string pointed to by DE 
1aef 3e 00		            LD   A, display_row_1 
1af1			;            CALL fLCD_Pos       ;Position cursor to location in A 
1af1 11 bb e2		            LD   DE, scratch 
1af4			;            CALL fLCD_Str       ;Display string pointed to by DE 
1af4 cd db 0b				call str_at_display 
1af7 cd eb 0b			call update_display 
1afa			 
1afa 3e 00				ld a,0 
1afc 21 bb e2			ld hl, scratch 
1aff 77				ld (hl),a 
1b00			 
1b00 00				nop 
1b01 c3 ca 1a			jp cloop 
1b04			 
1b04			 
1b04			 
1b04			; OS Prompt 
1b04			 
1b04 .. 00		prompt: db ">",0 
1b06 .. 00		endprg: db "?",0 
1b08			 
1b08			 
1b08			; handy next page prompt 
1b08			next_page_prompt: 
1b08 e5				push hl 
1b09 d5				push de 
1b0a f5				push af 
1b0b c5				push bc 
1b0c			 
1b0c 3e 9f			ld a,display_row_4 + display_cols - 1 
1b0e 11 06 1b		        ld de, endprg 
1b11 cd db 0b			call str_at_display 
1b14 cd eb 0b			call update_display 
1b17 cd 9e 61			call cin_wait 
1b1a c1				pop bc 
1b1b f1				pop af 
1b1c d1				pop de 
1b1d e1				pop hl 
1b1e			 
1b1e			 
1b1e c9				ret 
1b1f			 
1b1f			 
1b1f			; forth parser 
1b1f			 
1b1f			; My forth kernel 
1b1f			include "forth_kernel.asm" 
1b1f			; 
1b1f			; kernel to the forth OS 
1b1f			 
1b1f			DS_TYPE_STR: equ 1     ; string type 
1b1f			DS_TYPE_INUM: equ 2     ; $ 16 bit unsigned int usually a hex address 
1b1f			DS_TYPE_SNUM: equ 3     ; $ 16 bit signed int  
1b1f			;DS_TYPE_FNUM: equ 3      ; 24/32 bit floating point  do string conversion instead of a new type 
1b1f			 
1b1f			FORTH_PARSEV1: equ 0 
1b1f			FORTH_PARSEV2: equ 0 
1b1f			FORTH_PARSEV3: equ 0 
1b1f			FORTH_PARSEV4: equ 0 
1b1f			FORTH_PARSEV5: equ 0 
1b1f			FORTH_PARSEV6: equ 1 
1b1f			 
1b1f			;if FORTH_PARSEV5 
1b1f			;	FORTH_END_BUFFER: equ 0 
1b1f			;else 
1b1f			FORTH_END_BUFFER: equ 127 
1b1f			;endif 
1b1f			 
1b1f			FORTH_TRUE: equ 1 
1b1f			FORTH_FALSE: equ 0 
1b1f			 
1b1f			if FORTH_PARSEV4 
1b1f			include "forth_stackops.asm" 
1b1f			endif 
1b1f			 
1b1f			if FORTH_PARSEV5 
1b1f			include "forth_stackopsv5.asm" 
1b1f			endif 
1b1f			 
1b1f			if FORTH_PARSEV6 
1b1f			include "forth_stackopsv5.asm" 
1b1f			 
1b1f			; Stack operations for v5 parser on wards 
1b1f			; * DATA stack 
1b1f			; * LOOP stack 
1b1f			; * RETURN stack 
1b1f			 
1b1f			 
1b1f			 
1b1f			FORTH_CHK_DSP_UNDER: macro 
1b1f				push hl 
1b1f				push de 
1b1f				ld hl,(cli_data_sp) 
1b1f				ld de, cli_data_stack 
1b1f				call cmp16 
1b1f				jp c, fault_dsp_under 
1b1f				pop de 
1b1f				pop hl 
1b1f				endm 
1b1f			 
1b1f			 
1b1f			FORTH_CHK_RSP_UNDER: macro 
1b1f				push hl 
1b1f				push de 
1b1f				ld hl,(cli_ret_sp) 
1b1f				ld de, cli_ret_stack 
1b1f				call cmp16 
1b1f				jp c, fault_rsp_under 
1b1f				pop de 
1b1f				pop hl 
1b1f				endm 
1b1f			 
1b1f			FORTH_CHK_LOOP_UNDER: macro 
1b1f				push hl 
1b1f				push de 
1b1f				ld hl,(cli_loop_sp) 
1b1f				ld de, cli_loop_stack 
1b1f				call cmp16 
1b1f				jp c, fault_loop_under 
1b1f				pop de 
1b1f				pop hl 
1b1f				endm 
1b1f			 
1b1f			FORTH_ERR_TOS_NOTSTR: macro 
1b1f				; TOSO might need more for checks when used 
1b1f				push af 
1b1f				ld a,(hl) 
1b1f				cp DS_TYPE_STR 
1b1f				jp nz, type_faultn   
1b1f				pop af 
1b1f				endm 
1b1f			 
1b1f			FORTH_ERR_TOS_NOTNUM: macro 
1b1f				push af 
1b1f				ld a,(hl) 
1b1f				cp DS_TYPE_INUM 
1b1f				jp nz, type_faultn   
1b1f				pop af 
1b1f				endm 
1b1f			 
1b1f			 
1b1f			; increase data stack pointer and save hl to it 
1b1f				 
1b1f			FORTH_DSP_NEXT: macro 
1b1f				call macro_forth_dsp_next 
1b1f				endm 
1b1f			 
1b1f			 
1b1f			macro_forth_dsp_next: 
1b1f				if DEBUG_FORTH_STACK_GUARD 
1b1f cd c4 5d				call check_stacks 
1b22				endif 
1b22 e5				push hl 
1b23 d5				push de 
1b24 eb				ex de,hl 
1b25 2a e8 e9			ld hl,(cli_data_sp) 
1b28 23				inc hl 
1b29 23				inc hl 
1b2a			 
1b2a			; PARSEV5 
1b2a 23				inc hl 
1b2b 22 e8 e9			ld (cli_data_sp),hl 
1b2e 73				ld (hl), e 
1b2f 23				inc hl 
1b30 72				ld (hl), d 
1b31 d1				pop de 
1b32 e1				pop hl 
1b33				if DEBUG_FORTH_STACK_GUARD 
1b33 cd c4 5d				call check_stacks 
1b36				endif 
1b36 c9				ret 
1b37			 
1b37			 
1b37			; increase ret stack pointer and save hl to it 
1b37				 
1b37			FORTH_RSP_NEXT: macro 
1b37				call macro_forth_rsp_next 
1b37				endm 
1b37			 
1b37			macro_forth_rsp_next: 
1b37				if DEBUG_FORTH_STACK_GUARD 
1b37 cd c4 5d				call check_stacks 
1b3a				endif 
1b3a e5				push hl 
1b3b d5				push de 
1b3c eb				ex de,hl 
1b3d 2a ec e9			ld hl,(cli_ret_sp) 
1b40 23				inc hl 
1b41 23				inc hl 
1b42 22 ec e9			ld (cli_ret_sp),hl 
1b45 73				ld (hl), e 
1b46 23				inc hl 
1b47 72				ld (hl), d 
1b48 d1				pop de 
1b49 e1				pop hl 
1b4a				if DEBUG_FORTH_STACK_GUARD 
1b4a cd c4 5d				call check_stacks 
1b4d				endif 
1b4d c9				ret 
1b4e			 
1b4e			; get current ret stack pointer and save to hl  
1b4e				 
1b4e			FORTH_RSP_TOS: macro 
1b4e				call macro_forth_rsp_tos 
1b4e				endm 
1b4e			 
1b4e			macro_forth_rsp_tos: 
1b4e				;push de 
1b4e 2a ec e9			ld hl,(cli_ret_sp) 
1b51 cd 89 1b			call loadhlptrtohl 
1b54				;ld e, (hl) 
1b54				;inc hl 
1b54				;ld d, (hl) 
1b54				;ex de, hl 
1b54					if DEBUG_FORTH_WORDS 
1b54			;			DMARK "RST" 
1b54						CALLMONITOR 
1b54 cd 6f ee			call debug_vector  
1b57				endm  
# End of macro CALLMONITOR
1b57					endif 
1b57				;pop de 
1b57 c9				ret 
1b58			 
1b58			; pop ret stack pointer 
1b58				 
1b58			FORTH_RSP_POP: macro 
1b58				call macro_forth_rsp_pop 
1b58				endm 
1b58			 
1b58			 
1b58			macro_forth_rsp_pop: 
1b58				if DEBUG_FORTH_STACK_GUARD 
1b58			;		DMARK "RPP" 
1b58 cd c4 5d				call check_stacks 
1b5b					FORTH_CHK_RSP_UNDER 
1b5b e5				push hl 
1b5c d5				push de 
1b5d 2a ec e9			ld hl,(cli_ret_sp) 
1b60 11 a6 e9			ld de, cli_ret_stack 
1b63 cd 13 0e			call cmp16 
1b66 da db 5e			jp c, fault_rsp_under 
1b69 d1				pop de 
1b6a e1				pop hl 
1b6b				endm 
# End of macro FORTH_CHK_RSP_UNDER
1b6b				endif 
1b6b e5				push hl 
1b6c 2a ec e9			ld hl,(cli_ret_sp) 
1b6f			 
1b6f			 
1b6f				if FORTH_ENABLE_FREE 
1b6f			 
1b6f					; get pointer 
1b6f			 
1b6f					push de 
1b6f					push hl 
1b6f			 
1b6f					ld e, (hl) 
1b6f					inc hl 
1b6f					ld d, (hl) 
1b6f			 
1b6f					ex de, hl 
1b6f					call free 
1b6f			 
1b6f					pop hl 
1b6f					pop de 
1b6f			 
1b6f			 
1b6f				endif 
1b6f			 
1b6f			 
1b6f 2b				dec hl 
1b70 2b				dec hl 
1b71 22 ec e9			ld (cli_ret_sp), hl 
1b74				; do stack underflow checks 
1b74 e1				pop hl 
1b75				if DEBUG_FORTH_STACK_GUARD 
1b75 cd c4 5d				call check_stacks 
1b78					FORTH_CHK_RSP_UNDER 
1b78 e5				push hl 
1b79 d5				push de 
1b7a 2a ec e9			ld hl,(cli_ret_sp) 
1b7d 11 a6 e9			ld de, cli_ret_stack 
1b80 cd 13 0e			call cmp16 
1b83 da db 5e			jp c, fault_rsp_under 
1b86 d1				pop de 
1b87 e1				pop hl 
1b88				endm 
# End of macro FORTH_CHK_RSP_UNDER
1b88				endif 
1b88 c9				ret 
1b89			 
1b89			 
1b89			 
1b89			; routine to load word pointed to by hl into hl 
1b89			 
1b89			loadhlptrtohl: 
1b89			 
1b89 d5				push de 
1b8a 5e				ld e, (hl) 
1b8b 23				inc hl 
1b8c 56				ld d, (hl) 
1b8d eb				ex de, hl 
1b8e d1				pop de 
1b8f			 
1b8f c9				ret 
1b90			 
1b90			 
1b90			 
1b90			 
1b90			 
1b90			; push a number held in HL onto the data stack 
1b90			; entry point for pushing a value when already in hl used in function above 
1b90			 
1b90			forth_push_numhl: 
1b90			 
1b90 e5				push hl    ; save value to push 
1b91			 
1b91			if DEBUG_FORTH_PUSH 
1b91				; see if disabled 
1b91			 
1b91			 
1b91 f5				push af 
1b92 3a 6f ee			ld a,(debug_vector) 
1b95 fe c9			cp $c9   ; ret 
1b97			;	ld a, (os_view_disable) 
1b97			;	cp '*' 
1b97 28 34			jr z, .pskip2 
1b99 e5				push hl 
1b9a e5			push hl 
1b9b cd c8 0b			call clear_display 
1b9e e1			pop hl 
1b9f 7c				ld a,h 
1ba0 21 c0 e5			ld hl, os_word_scratch 
1ba3 cd fe 0f			call hexout 
1ba6 e1				pop hl 
1ba7 7d				ld a,l 
1ba8 21 c2 e5			ld hl, os_word_scratch+2 
1bab cd fe 0f			call hexout 
1bae			 
1bae 21 c4 e5			ld hl, os_word_scratch+4 
1bb1 3e 00			ld a,0 
1bb3 77				ld (hl),a 
1bb4 11 c0 e5			ld de,os_word_scratch 
1bb7 3e 28				ld a, display_row_2 
1bb9 cd db 0b				call str_at_display 
1bbc 11 bd 4f			ld de, .push_num 
1bbf 3e 00			ld a, display_row_1 
1bc1			 
1bc1 cd db 0b				call str_at_display 
1bc4			 
1bc4			 
1bc4 cd eb 0b			call update_display 
1bc7 cd 00 0b			call delay1s 
1bca cd 00 0b			call delay1s 
1bcd			.pskip2:  
1bcd			 
1bcd f1				pop af 
1bce			endif	 
1bce			 
1bce			 
1bce				FORTH_DSP_NEXT 
1bce cd 1f 1b			call macro_forth_dsp_next 
1bd1				endm 
# End of macro FORTH_DSP_NEXT
1bd1			 
1bd1 2a e8 e9			ld hl, (cli_data_sp) 
1bd4			 
1bd4				; save item type 
1bd4 3e 02			ld a,  DS_TYPE_INUM 
1bd6 77				ld (hl), a 
1bd7 23				inc hl 
1bd8			 
1bd8				; get word off stack 
1bd8 d1				pop de 
1bd9 7b				ld a,e 
1bda 77				ld (hl), a 
1bdb 23				inc hl 
1bdc 7a				ld a,d 
1bdd 77				ld (hl), a 
1bde			 
1bde			if DEBUG_FORTH_PUSH 
1bde 2b				dec hl 
1bdf 2b				dec hl 
1be0 2b				dec hl 
1be1						DMARK "PH5" 
1be1 f5				push af  
1be2 3a f6 1b			ld a, (.dmark)  
1be5 32 65 ee			ld (debug_mark),a  
1be8 3a f7 1b			ld a, (.dmark+1)  
1beb 32 66 ee			ld (debug_mark+1),a  
1bee 3a f8 1b			ld a, (.dmark+2)  
1bf1 32 67 ee			ld (debug_mark+2),a  
1bf4 18 03			jr .pastdmark  
1bf6 ..			.dmark: db "PH5"  
1bf9 f1			.pastdmark: pop af  
1bfa			endm  
# End of macro DMARK
1bfa				CALLMONITOR 
1bfa cd 6f ee			call debug_vector  
1bfd				endm  
# End of macro CALLMONITOR
1bfd			endif	 
1bfd			 
1bfd c9				ret 
1bfe			 
1bfe			 
1bfe			; Push a string to stack pointed to by hl 
1bfe			 
1bfe			forth_push_str: 
1bfe			 
1bfe			if DEBUG_FORTH_PUSH 
1bfe						DMARK "PSQ" 
1bfe f5				push af  
1bff 3a 13 1c			ld a, (.dmark)  
1c02 32 65 ee			ld (debug_mark),a  
1c05 3a 14 1c			ld a, (.dmark+1)  
1c08 32 66 ee			ld (debug_mark+1),a  
1c0b 3a 15 1c			ld a, (.dmark+2)  
1c0e 32 67 ee			ld (debug_mark+2),a  
1c11 18 03			jr .pastdmark  
1c13 ..			.dmark: db "PSQ"  
1c16 f1			.pastdmark: pop af  
1c17			endm  
# End of macro DMARK
1c17				CALLMONITOR 
1c17 cd 6f ee			call debug_vector  
1c1a				endm  
# End of macro CALLMONITOR
1c1a			endif	 
1c1a			 
1c1a			 
1c1a			    
1c1a e5				push hl 
1c1b e5				push hl 
1c1c			 
1c1c			;	ld a, 0   ; find end of string 
1c1c cd 5b 11			call strlenz 
1c1f			if DEBUG_FORTH_PUSH 
1c1f						DMARK "PQ2" 
1c1f f5				push af  
1c20 3a 34 1c			ld a, (.dmark)  
1c23 32 65 ee			ld (debug_mark),a  
1c26 3a 35 1c			ld a, (.dmark+1)  
1c29 32 66 ee			ld (debug_mark+1),a  
1c2c 3a 36 1c			ld a, (.dmark+2)  
1c2f 32 67 ee			ld (debug_mark+2),a  
1c32 18 03			jr .pastdmark  
1c34 ..			.dmark: db "PQ2"  
1c37 f1			.pastdmark: pop af  
1c38			endm  
# End of macro DMARK
1c38				CALLMONITOR 
1c38 cd 6f ee			call debug_vector  
1c3b				endm  
# End of macro CALLMONITOR
1c3b			endif	 
1c3b eb				ex de, hl 
1c3c e1				pop hl   ; get ptr to start of string 
1c3d			if DEBUG_FORTH_PUSH 
1c3d						DMARK "PQ3" 
1c3d f5				push af  
1c3e 3a 52 1c			ld a, (.dmark)  
1c41 32 65 ee			ld (debug_mark),a  
1c44 3a 53 1c			ld a, (.dmark+1)  
1c47 32 66 ee			ld (debug_mark+1),a  
1c4a 3a 54 1c			ld a, (.dmark+2)  
1c4d 32 67 ee			ld (debug_mark+2),a  
1c50 18 03			jr .pastdmark  
1c52 ..			.dmark: db "PQ3"  
1c55 f1			.pastdmark: pop af  
1c56			endm  
# End of macro DMARK
1c56				CALLMONITOR 
1c56 cd 6f ee			call debug_vector  
1c59				endm  
# End of macro CALLMONITOR
1c59			endif	 
1c59 19				add hl,de 
1c5a			if DEBUG_FORTH_PUSH 
1c5a						DMARK "PQE" 
1c5a f5				push af  
1c5b 3a 6f 1c			ld a, (.dmark)  
1c5e 32 65 ee			ld (debug_mark),a  
1c61 3a 70 1c			ld a, (.dmark+1)  
1c64 32 66 ee			ld (debug_mark+1),a  
1c67 3a 71 1c			ld a, (.dmark+2)  
1c6a 32 67 ee			ld (debug_mark+2),a  
1c6d 18 03			jr .pastdmark  
1c6f ..			.dmark: db "PQE"  
1c72 f1			.pastdmark: pop af  
1c73			endm  
# End of macro DMARK
1c73				CALLMONITOR 
1c73 cd 6f ee			call debug_vector  
1c76				endm  
# End of macro CALLMONITOR
1c76			endif	 
1c76			 
1c76 2b				dec hl    ; see if there is an optional trailing double quote 
1c77 7e				ld a,(hl) 
1c78 fe 22			cp '"' 
1c7a 20 03			jr nz, .strnoq 
1c7c 3e 00			ld a, 0      ; get rid of double quote 
1c7e 77				ld (hl), a 
1c7f 23			.strnoq: inc hl 
1c80			 
1c80 3e 00			ld a, 0 
1c82 77				ld (hl), a     ; add null term and get rid of trailing double quote 
1c83			 
1c83 13				inc de ; add one for the type string 
1c84 13				inc de ; add one for null term??? 
1c85			 
1c85				; tos is get string pointer again 
1c85				; de contains space to allocate 
1c85				 
1c85 d5				push de 
1c86			 
1c86 eb				ex de, hl 
1c87			 
1c87				;push af 
1c87			 
1c87			if DEBUG_FORTH_PUSH 
1c87						DMARK "PHm" 
1c87 f5				push af  
1c88 3a 9c 1c			ld a, (.dmark)  
1c8b 32 65 ee			ld (debug_mark),a  
1c8e 3a 9d 1c			ld a, (.dmark+1)  
1c91 32 66 ee			ld (debug_mark+1),a  
1c94 3a 9e 1c			ld a, (.dmark+2)  
1c97 32 67 ee			ld (debug_mark+2),a  
1c9a 18 03			jr .pastdmark  
1c9c ..			.dmark: db "PHm"  
1c9f f1			.pastdmark: pop af  
1ca0			endm  
# End of macro DMARK
1ca0				CALLMONITOR 
1ca0 cd 6f ee			call debug_vector  
1ca3				endm  
# End of macro CALLMONITOR
1ca3			endif	 
1ca3 cd d0 11			call malloc	; on ret hl now contains allocated memory 
1ca6				if DEBUG_FORTH_MALLOC_GUARD 
1ca6 cc 15 50				call z,malloc_error 
1ca9				endif 
1ca9			 
1ca9				 
1ca9 c1				pop bc    ; get length 
1caa d1				pop de   ;  get string start    
1cab			 
1cab				; hl has destination from malloc 
1cab			 
1cab eb				ex de, hl    ; prep for ldir 
1cac			 
1cac d5				push de   ; save malloc area for DSP later 
1cad				;push hl   ; save malloc area for DSP later 
1cad			 
1cad			if DEBUG_FORTH_PUSH 
1cad						DMARK "PHc" 
1cad f5				push af  
1cae 3a c2 1c			ld a, (.dmark)  
1cb1 32 65 ee			ld (debug_mark),a  
1cb4 3a c3 1c			ld a, (.dmark+1)  
1cb7 32 66 ee			ld (debug_mark+1),a  
1cba 3a c4 1c			ld a, (.dmark+2)  
1cbd 32 67 ee			ld (debug_mark+2),a  
1cc0 18 03			jr .pastdmark  
1cc2 ..			.dmark: db "PHc"  
1cc5 f1			.pastdmark: pop af  
1cc6			endm  
# End of macro DMARK
1cc6				CALLMONITOR 
1cc6 cd 6f ee			call debug_vector  
1cc9				endm  
# End of macro CALLMONITOR
1cc9			endif	 
1cc9			 
1cc9			 
1cc9 ed b0			ldir 
1ccb			 
1ccb			 
1ccb				; push malloc to data stack     macro?????  
1ccb			 
1ccb				FORTH_DSP_NEXT 
1ccb cd 1f 1b			call macro_forth_dsp_next 
1cce				endm 
# End of macro FORTH_DSP_NEXT
1cce			 
1cce				; save value and type 
1cce			 
1cce 2a e8 e9			ld hl, (cli_data_sp) 
1cd1			 
1cd1				; save item type 
1cd1 3e 01			ld a,  DS_TYPE_STR 
1cd3 77				ld (hl), a 
1cd4 23				inc hl 
1cd5			 
1cd5				; get malloc word off stack 
1cd5 d1				pop de 
1cd6 73				ld (hl), e 
1cd7 23				inc hl 
1cd8 72				ld (hl), d 
1cd9			 
1cd9			 
1cd9			 
1cd9			if DEBUG_FORTH_PUSH 
1cd9 2a e8 e9			ld hl, (cli_data_sp) 
1cdc						DMARK "PHS" 
1cdc f5				push af  
1cdd 3a f1 1c			ld a, (.dmark)  
1ce0 32 65 ee			ld (debug_mark),a  
1ce3 3a f2 1c			ld a, (.dmark+1)  
1ce6 32 66 ee			ld (debug_mark+1),a  
1ce9 3a f3 1c			ld a, (.dmark+2)  
1cec 32 67 ee			ld (debug_mark+2),a  
1cef 18 03			jr .pastdmark  
1cf1 ..			.dmark: db "PHS"  
1cf4 f1			.pastdmark: pop af  
1cf5			endm  
# End of macro DMARK
1cf5				CALLMONITOR 
1cf5 cd 6f ee			call debug_vector  
1cf8				endm  
# End of macro CALLMONITOR
1cf8			;	ex de,hl 
1cf8			endif	 
1cf8				; in case of spaces, skip the ptr past the copied string 
1cf8				;pop af 
1cf8				;ld (cli_origptr),hl 
1cf8			 
1cf8 c9				ret 
1cf9			 
1cf9			 
1cf9			 
1cf9			; TODO ascii push input onto stack given hl to start of input 
1cf9			 
1cf9			; identify type 
1cf9			; if starts with a " then a string 
1cf9			; otherwise it is a number 
1cf9			;  
1cf9			; if a string 
1cf9			;     scan for ending " to get length of string to malloc for + 1 
1cf9			;     malloc 
1cf9			;     put pointer to string on stack first byte flags as string 
1cf9			; 
1cf9			; else a number 
1cf9			;    look for number format identifier 
1cf9			;    $xx hex 
1cf9			;    %xxxxx bin 
1cf9			;    xxxxx decimal 
1cf9			;    convert number to 16bit word.  
1cf9			;    malloc word + 1 with flag to identiy as num 
1cf9			;    put pointer to number on stack 
1cf9			;   
1cf9			;  
1cf9			  
1cf9			forth_apush: 
1cf9				; kernel push 
1cf9			 
1cf9			if DEBUG_FORTH_PUSH 
1cf9						DMARK "PSH" 
1cf9 f5				push af  
1cfa 3a 0e 1d			ld a, (.dmark)  
1cfd 32 65 ee			ld (debug_mark),a  
1d00 3a 0f 1d			ld a, (.dmark+1)  
1d03 32 66 ee			ld (debug_mark+1),a  
1d06 3a 10 1d			ld a, (.dmark+2)  
1d09 32 67 ee			ld (debug_mark+2),a  
1d0c 18 03			jr .pastdmark  
1d0e ..			.dmark: db "PSH"  
1d11 f1			.pastdmark: pop af  
1d12			endm  
# End of macro DMARK
1d12				CALLMONITOR 
1d12 cd 6f ee			call debug_vector  
1d15				endm  
# End of macro CALLMONITOR
1d15			endif	 
1d15				; identify input type 
1d15			 
1d15 7e				ld a,(hl) 
1d16			 
1d16 fe 23			cp '#' 
1d18 ca 52 1d			jp z, .fapdec 
1d1b			 
1d1b			 
1d1b fe 22			cp '"' 
1d1d 28 0a			jr z, .fapstr 
1d1f fe 24			cp '$' 
1d21 ca 49 1d			jp z, .faphex 
1d24 fe 25			cp '%' 
1d26 ca 31 1d			jp z, .fapbin 
1d29			;	cp 'b' 
1d29			;	jp z, .fabin 
1d29				; else decimal 
1d29			 
1d29				; TODO do decimal conversion 
1d29				; decimal is stored as a 16bit word 
1d29			 
1d29				; by default everything is a string if type is not detected 
1d29			.fapstr: ; 
1d29 fe 22			cp '"' 
1d2b 20 01			jr nz, .strnoqu 
1d2d 23				inc hl 
1d2e			.strnoqu: 
1d2e c3 fe 1b			jp forth_push_str 
1d31			 
1d31			 
1d31			 
1d31			.fapbin:    ; push a binary string.  
1d31 11 00 00			ld de, 0   ; hold a 16bit value 
1d34			 
1d34 23			.fapbinshift:	inc hl  
1d35 7e				ld a,(hl) 
1d36 fe 00			cp 0     ; done scanning  
1d38 28 0b			jr z, .fapbdone  	; got it in HL so push  
1d3a			 
1d3a				; left shift de 
1d3a eb				ex de, hl	 
1d3b 29				add hl, hl 
1d3c			 
1d3c				; is 1 
1d3c fe 31			cp '1' 
1d3e 20 02			jr nz, .binzero 
1d40 cb 4d			bit 1, l 
1d42			.binzero: 
1d42 eb				ex de, hl	 ; save current de 
1d43 18 ef			jr .fapbinshift 
1d45			 
1d45			.fapbdone: 
1d45 eb				ex de, hl 
1d46 c3 90 1b			jp forth_push_numhl 
1d49			 
1d49			 
1d49			.faphex:   ; hex is always stored as a 16bit word 
1d49				; skip number prefix 
1d49 23				inc hl 
1d4a				; turn ascii into number 
1d4a cd b4 10			call get_word_hl	; ret 16bit word in hl 
1d4d			 
1d4d c3 90 1b			jp forth_push_numhl 
1d50			 
1d50 00				 nop 
1d51			 
1d51			.fabin:   ; TODO bin conversion 
1d51			 
1d51			 
1d51 c9				ret 
1d52			.fapdec:	 
1d52				; string to dec conversion 
1d52 23				inc hl 
1d53 eb				ex de, hl 
1d54 cd f2 10			call string_to_uint16 
1d57 c3 90 1b			jp forth_push_numhl 
1d5a c9				ret 
1d5b				 
1d5b			;atoui_16: 
1d5b			 
1d5b			; get either a string ptr or a 16bit word from the data stack 
1d5b			 
1d5b			FORTH_DSP: macro 
1d5b				call macro_forth_dsp 
1d5b				endm 
1d5b			 
1d5b			macro_forth_dsp: 
1d5b				; data stack pointer points to current word on tos 
1d5b			 
1d5b 2a e8 e9			ld hl,(cli_data_sp) 
1d5e			 
1d5e				if DEBUG_FORTH_PUSH 
1d5e						DMARK "DSP" 
1d5e f5				push af  
1d5f 3a 73 1d			ld a, (.dmark)  
1d62 32 65 ee			ld (debug_mark),a  
1d65 3a 74 1d			ld a, (.dmark+1)  
1d68 32 66 ee			ld (debug_mark+1),a  
1d6b 3a 75 1d			ld a, (.dmark+2)  
1d6e 32 67 ee			ld (debug_mark+2),a  
1d71 18 03			jr .pastdmark  
1d73 ..			.dmark: db "DSP"  
1d76 f1			.pastdmark: pop af  
1d77			endm  
# End of macro DMARK
1d77			 
1d77 cd 48 50				call display_data_sp 
1d7a				;call break_point_state 
1d7a				;rst 030h 
1d7a				CALLMONITOR 
1d7a cd 6f ee			call debug_vector  
1d7d				endm  
# End of macro CALLMONITOR
1d7d				endif 
1d7d			 
1d7d c9				ret 
1d7e			 
1d7e			; return hl to start of value on stack 
1d7e			 
1d7e			FORTH_DSP_VALUE: macro 
1d7e				call macro_forth_dsp_value 
1d7e				endm 
1d7e			 
1d7e			macro_forth_dsp_value: 
1d7e			 
1d7e				FORTH_DSP 
1d7e cd 5b 1d			call macro_forth_dsp 
1d81				endm 
# End of macro FORTH_DSP
1d81			 
1d81 d5				push de 
1d82			 
1d82 23				inc hl ; skip type 
1d83			 
1d83 5e				ld e, (hl) 
1d84 23				inc hl 
1d85 56				ld d, (hl) 
1d86 eb				ex de,hl  
1d87			 
1d87 d1				pop de 
1d88			 
1d88 c9				ret 
1d89			 
1d89			; return hl to start of value to second item on stack 
1d89			 
1d89			FORTH_DSP_VALUEM1: macro 
1d89				call macro_forth_dsp_value_m1 
1d89				endm 
1d89			 
1d89			macro_forth_dsp_value_m1: 
1d89			 
1d89				FORTH_DSP 
1d89 cd 5b 1d			call macro_forth_dsp 
1d8c				endm 
# End of macro FORTH_DSP
1d8c			 
1d8c 2b				dec hl 
1d8d 2b				dec hl 
1d8e			;	dec hl 
1d8e			 
1d8e d5				push de 
1d8f			 
1d8f 5e				ld e, (hl) 
1d90 23				inc hl 
1d91 56				ld d, (hl) 
1d92 eb				ex de,hl  
1d93			 
1d93 d1				pop de 
1d94			 
1d94 c9				ret 
1d95			 
1d95				 
1d95			 
1d95			; whatever the current top os stack points to, we are now done with it so return memory to malloc 
1d95			 
1d95			FORTH_DSP_POP: macro 
1d95				call macro_forth_dsp_pop 
1d95				endm 
1d95			 
1d95			 
1d95			; get the tos data type 
1d95			 
1d95			FORTH_DSP_TYPE:   macro 
1d95			 
1d95				;FORTH_DSP_VALUE 
1d95				FORTH_DSP 
1d95				 
1d95				; hl points to value 
1d95				; check type 
1d95			 
1d95				ld a,(hl) 
1d95			 
1d95				endm 
1d95			 
1d95			; load the tos value into hl 
1d95			 
1d95			 
1d95			FORTH_DSP_VALUEHL:  macro 
1d95				call macro_dsp_valuehl 
1d95				endm 
1d95			 
1d95			 
1d95			 
1d95			macro_dsp_valuehl: 
1d95				FORTH_DSP_VALUE 
1d95 cd 7e 1d			call macro_forth_dsp_value 
1d98				endm 
# End of macro FORTH_DSP_VALUE
1d98			 
1d98				;FORTH_ERR_TOS_NOTNUM 
1d98			 
1d98				;inc hl   ; skip type id 
1d98			 
1d98			;	push de 
1d98			; 
1d98			;	ld e, (hl) 
1d98			;	inc hl 
1d98			;	ld d, (hl) 
1d98			;	ex de,hl  
1d98			 
1d98			;	pop de 
1d98			 
1d98				if DEBUG_FORTH_PUSH 
1d98						DMARK "DVL" 
1d98 f5				push af  
1d99 3a ad 1d			ld a, (.dmark)  
1d9c 32 65 ee			ld (debug_mark),a  
1d9f 3a ae 1d			ld a, (.dmark+1)  
1da2 32 66 ee			ld (debug_mark+1),a  
1da5 3a af 1d			ld a, (.dmark+2)  
1da8 32 67 ee			ld (debug_mark+2),a  
1dab 18 03			jr .pastdmark  
1dad ..			.dmark: db "DVL"  
1db0 f1			.pastdmark: pop af  
1db1			endm  
# End of macro DMARK
1db1				CALLMONITOR 
1db1 cd 6f ee			call debug_vector  
1db4				endm  
# End of macro CALLMONITOR
1db4				endif 
1db4 c9				ret 
1db5			 
1db5			forth_apushstrhl:      
1db5				; push of string requires use of cli_origptr 
1db5				; bodge use 
1db5			 
1db5				; get current cli_origptr, save, update with temp pointer  
1db5 ed 5b 38 ea		ld de, (cli_origptr) 
1db9 22 38 ea			ld (cli_origptr), hl 
1dbc d5				push de 
1dbd cd f9 1c			call forth_apush 
1dc0 d1				pop de 
1dc1 ed 53 38 ea		ld (cli_origptr), de 
1dc5 c9			        ret	 
1dc6			 
1dc6			 
1dc6			; increase loop stack pointer and save hl to it 
1dc6				 
1dc6			FORTH_LOOP_NEXT: macro 
1dc6				call macro_forth_loop_next 
1dc6				;nop 
1dc6				endm 
1dc6			 
1dc6			macro_forth_loop_next: 
1dc6				if DEBUG_FORTH_STACK_GUARD 
1dc6 cd c4 5d				call check_stacks 
1dc9				endif 
1dc9 e5				push hl 
1dca d5				push de 
1dcb eb				ex de,hl 
1dcc 2a ea e9			ld hl,(cli_loop_sp) 
1dcf 23				inc hl 
1dd0 23				inc hl 
1dd1					if DEBUG_FORTH_WORDS 
1dd1						DMARK "LNX" 
1dd1 f5				push af  
1dd2 3a e6 1d			ld a, (.dmark)  
1dd5 32 65 ee			ld (debug_mark),a  
1dd8 3a e7 1d			ld a, (.dmark+1)  
1ddb 32 66 ee			ld (debug_mark+1),a  
1dde 3a e8 1d			ld a, (.dmark+2)  
1de1 32 67 ee			ld (debug_mark+2),a  
1de4 18 03			jr .pastdmark  
1de6 ..			.dmark: db "LNX"  
1de9 f1			.pastdmark: pop af  
1dea			endm  
# End of macro DMARK
1dea						CALLMONITOR 
1dea cd 6f ee			call debug_vector  
1ded				endm  
# End of macro CALLMONITOR
1ded					endif 
1ded 22 ea e9			ld (cli_loop_sp),hl 
1df0 73				ld (hl), e 
1df1 23				inc hl 
1df2 72				ld (hl), d 
1df3 d1				pop de    ; been reversed so save a swap on restore 
1df4 e1				pop hl 
1df5				if DEBUG_FORTH_STACK_GUARD 
1df5 cd c4 5d				call check_stacks 
1df8				endif 
1df8 c9				ret 
1df9			 
1df9			; get current ret stack pointer and save to hl  
1df9				 
1df9			FORTH_LOOP_TOS: macro 
1df9				call macro_forth_loop_tos 
1df9				endm 
1df9			 
1df9			macro_forth_loop_tos: 
1df9 d5				push de 
1dfa 2a ea e9			ld hl,(cli_loop_sp) 
1dfd 5e				ld e, (hl) 
1dfe 23				inc hl 
1dff 56				ld d, (hl) 
1e00 eb				ex de, hl 
1e01 d1				pop de 
1e02 c9				ret 
1e03			 
1e03			; pop loop stack pointer 
1e03				 
1e03			FORTH_LOOP_POP: macro 
1e03				call macro_forth_loop_pop 
1e03				endm 
1e03			 
1e03			 
1e03			macro_forth_loop_pop: 
1e03				if DEBUG_FORTH_STACK_GUARD 
1e03					DMARK "LPP" 
1e03 f5				push af  
1e04 3a 18 1e			ld a, (.dmark)  
1e07 32 65 ee			ld (debug_mark),a  
1e0a 3a 19 1e			ld a, (.dmark+1)  
1e0d 32 66 ee			ld (debug_mark+1),a  
1e10 3a 1a 1e			ld a, (.dmark+2)  
1e13 32 67 ee			ld (debug_mark+2),a  
1e16 18 03			jr .pastdmark  
1e18 ..			.dmark: db "LPP"  
1e1b f1			.pastdmark: pop af  
1e1c			endm  
# End of macro DMARK
1e1c cd c4 5d				call check_stacks 
1e1f					FORTH_CHK_LOOP_UNDER 
1e1f e5				push hl 
1e20 d5				push de 
1e21 2a ea e9			ld hl,(cli_loop_sp) 
1e24 11 24 e9			ld de, cli_loop_stack 
1e27 cd 13 0e			call cmp16 
1e2a da e1 5e			jp c, fault_loop_under 
1e2d d1				pop de 
1e2e e1				pop hl 
1e2f				endm 
# End of macro FORTH_CHK_LOOP_UNDER
1e2f				endif 
1e2f e5				push hl 
1e30 2a ea e9			ld hl,(cli_loop_sp) 
1e33 2b				dec hl 
1e34 2b				dec hl 
1e35 22 ea e9			ld (cli_loop_sp), hl 
1e38				; TODO do stack underflow checks 
1e38 e1				pop hl 
1e39				if DEBUG_FORTH_STACK_GUARD 
1e39 cd c4 5d				call check_stacks 
1e3c					FORTH_CHK_LOOP_UNDER 
1e3c e5				push hl 
1e3d d5				push de 
1e3e 2a ea e9			ld hl,(cli_loop_sp) 
1e41 11 24 e9			ld de, cli_loop_stack 
1e44 cd 13 0e			call cmp16 
1e47 da e1 5e			jp c, fault_loop_under 
1e4a d1				pop de 
1e4b e1				pop hl 
1e4c				endm 
# End of macro FORTH_CHK_LOOP_UNDER
1e4c				endif 
1e4c c9				ret 
1e4d			 
1e4d			macro_forth_dsp_pop: 
1e4d			 
1e4d e5				push hl 
1e4e			 
1e4e				; release malloc data 
1e4e			 
1e4e				if DEBUG_FORTH_STACK_GUARD 
1e4e cd c4 5d				call check_stacks 
1e51					FORTH_CHK_DSP_UNDER 
1e51 e5				push hl 
1e52 d5				push de 
1e53 2a e8 e9			ld hl,(cli_data_sp) 
1e56 11 22 e8			ld de, cli_data_stack 
1e59 cd 13 0e			call cmp16 
1e5c da d5 5e			jp c, fault_dsp_under 
1e5f d1				pop de 
1e60 e1				pop hl 
1e61				endm 
# End of macro FORTH_CHK_DSP_UNDER
1e61				endif 
1e61				;ld hl,(cli_data_sp) 
1e61			if DEBUG_FORTH_DOT 
1e61				DMARK "DPP" 
1e61 f5				push af  
1e62 3a 76 1e			ld a, (.dmark)  
1e65 32 65 ee			ld (debug_mark),a  
1e68 3a 77 1e			ld a, (.dmark+1)  
1e6b 32 66 ee			ld (debug_mark+1),a  
1e6e 3a 78 1e			ld a, (.dmark+2)  
1e71 32 67 ee			ld (debug_mark+2),a  
1e74 18 03			jr .pastdmark  
1e76 ..			.dmark: db "DPP"  
1e79 f1			.pastdmark: pop af  
1e7a			endm  
# End of macro DMARK
1e7a				CALLMONITOR 
1e7a cd 6f ee			call debug_vector  
1e7d				endm  
# End of macro CALLMONITOR
1e7d			endif	 
1e7d			 
1e7d			 
1e7d			if FORTH_ENABLE_DSPPOPFREE 
1e7d			 
1e7d				FORTH_DSP 
1e7d cd 5b 1d			call macro_forth_dsp 
1e80				endm 
# End of macro FORTH_DSP
1e80			 
1e80 7e				ld a, (hl) 
1e81 fe 01			cp DS_TYPE_STR 
1e83 20 23			jr nz, .skippopfree 
1e85			 
1e85				FORTH_DSP_VALUEHL 
1e85 cd 95 1d			call macro_dsp_valuehl 
1e88				endm 
# End of macro FORTH_DSP_VALUEHL
1e88 00				nop 
1e89			if DEBUG_FORTH_DOT 
1e89				DMARK "DPf" 
1e89 f5				push af  
1e8a 3a 9e 1e			ld a, (.dmark)  
1e8d 32 65 ee			ld (debug_mark),a  
1e90 3a 9f 1e			ld a, (.dmark+1)  
1e93 32 66 ee			ld (debug_mark+1),a  
1e96 3a a0 1e			ld a, (.dmark+2)  
1e99 32 67 ee			ld (debug_mark+2),a  
1e9c 18 03			jr .pastdmark  
1e9e ..			.dmark: db "DPf"  
1ea1 f1			.pastdmark: pop af  
1ea2			endm  
# End of macro DMARK
1ea2				CALLMONITOR 
1ea2 cd 6f ee			call debug_vector  
1ea5				endm  
# End of macro CALLMONITOR
1ea5			endif	 
1ea5 cd 9a 12			call free 
1ea8			.skippopfree: 
1ea8				 
1ea8			 
1ea8			endif 
1ea8			 
1ea8			if DEBUG_FORTH_DOT_KEY 
1ea8				DMARK "DP2" 
1ea8				CALLMONITOR 
1ea8			endif	 
1ea8			 
1ea8				; move pointer down 
1ea8			 
1ea8 2a e8 e9			ld hl,(cli_data_sp) 
1eab 2b				dec hl 
1eac 2b				dec hl 
1ead			; PARSEV5 
1ead 2b				dec hl 
1eae 22 e8 e9			ld (cli_data_sp), hl 
1eb1			 
1eb1				if DEBUG_FORTH_STACK_GUARD 
1eb1 cd c4 5d				call check_stacks 
1eb4					FORTH_CHK_DSP_UNDER 
1eb4 e5				push hl 
1eb5 d5				push de 
1eb6 2a e8 e9			ld hl,(cli_data_sp) 
1eb9 11 22 e8			ld de, cli_data_stack 
1ebc cd 13 0e			call cmp16 
1ebf da d5 5e			jp c, fault_dsp_under 
1ec2 d1				pop de 
1ec3 e1				pop hl 
1ec4				endm 
# End of macro FORTH_CHK_DSP_UNDER
1ec4				endif 
1ec4			 
1ec4 e1				pop hl 
1ec5			 
1ec5 c9				ret 
1ec6			 
1ec6			getwordathl: 
1ec6				; hl points to an address 
1ec6				; load hl with the word at that address 
1ec6			 
1ec6 d5				push de 
1ec7			 
1ec7 5e				ld e, (hl) 
1ec8 23				inc hl 
1ec9 56				ld d, (hl) 
1eca eb				ex de, hl 
1ecb			 
1ecb d1				pop de 
1ecc c9				ret 
1ecd			 
1ecd			 
1ecd			; functions to manuplite stack pointers 
1ecd			 
1ecd			; generate fragment to set hl to be pointer to a stack item 
1ecd			 
1ecd			FORTH_DSP_PTR: macro  x 
1ecd				ld hl,(cli_data_sp) 
1ecd				ld de, x * 3 
1ecd				sbc hl, de 
1ecd				endm 
1ecd			 
1ecd			 
1ecd			 
1ecd			; copy point in hl to stack tmp storage slots 1-4 
1ecd			hltostack1: 
1ecd 11 b8 e2			ld de, os_stack_1  
1ed0 c3 fb 1e			jp hltostackmv 
1ed3			 
1ed3			hltostack2:  
1ed3 11 b5 e2			ld de, os_stack_2 
1ed6 c3 fb 1e			jp hltostackmv 
1ed9			 
1ed9			hltostack3:  
1ed9 11 b2 e2			ld de, os_stack_3 
1edc c3 fb 1e			jp hltostackmv 
1edf			 
1edf			hltostack4:  
1edf 11 af e2			ld de, os_stack_4  
1ee2 c3 fb 1e			jp hltostackmv 
1ee5			 
1ee5			; copy to point in hl from stack tmp storage slots 1-4 
1ee5			hlfromstack1: 
1ee5 11 b8 e2			ld de, os_stack_1 
1ee8 c3 fa 1e			jp hlfromsttackmv 
1eeb			 
1eeb			hlfromstack2:  
1eeb 11 b5 e2			ld de, os_stack_2 
1eee c3 fa 1e			jp hlfromsttackmv 
1ef1			 
1ef1			hlfromstack3:  
1ef1 11 b2 e2			ld de, os_stack_3 
1ef4 c3 fa 1e			jp hlfromsttackmv 
1ef7			 
1ef7			hlfromstack4:  
1ef7 11 af e2			ld de, os_stack_4 
1efa			 
1efa			hlfromsttackmv: 
1efa eb				ex de, hl 
1efb			 
1efb			hltostackmv: 
1efb			 
1efb				; do stack move 
1efb c5				push bc 
1efc 01 03 00			ld bc, 3 
1eff ed b0			ldir  
1f01 c1				pop bc	 
1f02 c9				ret 
1f03			 
1f03			; eof 
1f03			 
# End of file forth_stackopsv5.asm
1f03			endif 
1f03			loadwordinhl:	 
1f03			 
1f03 d5				push de 
1f04			 
1f04 5e				ld e, (hl) 
1f05 23				inc hl 
1f06 56				ld d, (hl) 
1f07 eb				ex de,hl  
1f08			 
1f08 d1				pop de 
1f09			 
1f09 c9				ret 
1f0a			 
1f0a			user_word_eol:  
1f0a				; hl contains the pointer to where to create a linked list item from the end 
1f0a				; of the user dict to continue on at the system word dict 
1f0a				 
1f0a				; poke the stub of the word list linked list to repoint to rom words 
1f0a			 
1f0a				; stub format 
1f0a				; db   word id 
1f0a				; dw    link to next word 
1f0a			        ; db char length of token 
1f0a				; db string + 0 term 
1f0a				; db exec code....  
1f0a			 
1f0a 3e 00			ld a, WORD_SYS_ROOT     ; root word 
1f0c 77				ld (hl), a		; word id 
1f0d 23				inc hl 
1f0e			 
1f0e 11 c5 20			ld de, sysdict 
1f11 73				ld (hl), e		; next word link ie system dict 
1f12 23				inc hl 
1f13 72				ld (hl), d		; next word link ie system dict 
1f14 23				inc hl	 
1f15			 
1f15			;	ld (hl), sysdict		; next word link ie system dict 
1f15			;	inc hl 
1f15			;	inc hl 
1f15			 
1f15			;	inc hl 
1f15			;	inc hl 
1f15			 
1f15 3e 02			ld a, 2			; word length is 0 
1f17 77				ld (hl), a	 
1f18 23				inc hl 
1f19			 
1f19 3e 7e			ld a, '~'			; word length is 0 
1f1b 77				ld (hl), a	 
1f1c 23				inc hl 
1f1d 3e 00			ld a, 0			; save empty word 
1f1f 77				ld (hl), a 
1f20			 
1f20 c9				ret 
1f21			 
1f21				 
1f21			 
1f21			forthexec_cleanup: 
1f21				FORTH_RSP_POP 
1f21 cd 58 1b			call macro_forth_rsp_pop 
1f24				endm 
# End of macro FORTH_RSP_POP
1f24 c9				ret 
1f25			 
1f25			forth_call_hl: 
1f25				; taking hl 
1f25 e5				push hl 
1f26 c9				ret 
1f27			 
1f27			; this is called to reset Forth system but keep existing uwords etc 
1f27			 
1f27			forth_warmstart: 
1f27				; setup stack over/under flow checks 
1f27				if DEBUG_FORTH_STACK_GUARD 
1f27 cd aa 5d				call chk_stk_init 
1f2a				endif 
1f2a			 
1f2a				; init stack pointers  - * these stacks go upwards *  
1f2a 21 a6 e9			ld hl, cli_ret_stack 
1f2d 22 ec e9			ld (cli_ret_sp), hl	 
1f30				; set bottom of stack 
1f30 3e 00			ld a,0 
1f32 77				ld (hl),a 
1f33 23				inc hl 
1f34 77				ld (hl),a 
1f35			 
1f35 21 22 e8			ld hl, cli_data_stack 
1f38 22 e8 e9			ld (cli_data_sp), hl	 
1f3b				; set bottom of stack 
1f3b 3e 00			ld a,0 
1f3d 77				ld (hl),a 
1f3e 23				inc hl 
1f3f 77				ld (hl),a 
1f40			 
1f40 21 24 e9			ld hl, cli_loop_stack 
1f43 22 ea e9			ld (cli_loop_sp), hl	 
1f46				; set bottom of stack 
1f46 3e 00			ld a,0 
1f48 77				ld (hl),a 
1f49 23				inc hl 
1f4a 77				ld (hl),a 
1f4b			 
1f4b				; init extent of current open file 
1f4b			 
1f4b 3e 00			ld a, 0 
1f4d 32 64 ea			ld (store_openext), a 
1f50			 
1f50 c9				ret 
1f51			 
1f51			 
1f51			 
1f51			; Cold Start - this is called to setup the whole Forth system 
1f51			 
1f51			forth_init: 
1f51			 
1f51				; setup stack over/under flow checks 
1f51			 
1f51			;	if DEBUG_FORTH_STACK_GUARD 
1f51			;		call chk_stk_init 
1f51			;	endif 
1f51			 
1f51				; enable auto display updates (slow.....) 
1f51			 
1f51 3e 01			ld a, 1 
1f53 32 36 ea			ld (cli_autodisplay), a 
1f56			 
1f56				; if storage is in use disable long reads for now 
1f56 3e 00			ld a, 0 
1f58 32 6f ea			ld (store_longread), a 
1f5b			 
1f5b			 
1f5b				; show start up screen 
1f5b			 
1f5b cd c8 0b			call clear_display 
1f5e			 
1f5e 3e 00			ld a,0 
1f60 32 58 ea			ld (f_cursor_ptr), a 
1f63			 
1f63				; set start of word list in start of ram - for use when creating user words 
1f63			 
1f63 21 bf 61			ld hl, baseram 
1f66 22 b8 e5			ld (os_last_new_uword), hl 
1f69 cd 0a 1f			call user_word_eol 
1f6c				 
1f6c			;		call display_data_sp 
1f6c			;		call next_page_prompt 
1f6c			 
1f6c			 
1f6c			 
1f6c			 
1f6c c9				ret 
1f6d			 
1f6d .. 00		.bootforth: db " Forth Kernel Init ",0 
1f81			 
1f81			; TODO push to stack 
1f81			 
1f81			;  
1f81			 
1f81			if FORTH_PARSEV2 
1f81			 
1f81			 
1f81				include "forth_parserv2.asm" 
1f81			 
1f81			endif 
1f81			 
1f81			 
1f81			; parse cli version 1 
1f81			 
1f81			if FORTH_PARSEV1 
1f81			 
1f81			 
1f81			 
1f81			      include "forth_parserv1.asm" 
1f81			endif 
1f81				 
1f81			if FORTH_PARSEV3 
1f81			      include "forth_parserv3.asm" 
1f81				include "forth_wordsv3.asm" 
1f81			endif 
1f81			 
1f81			if FORTH_PARSEV4 
1f81			      include "forth_parserv4.asm" 
1f81				include "forth_wordsv4.asm" 
1f81			endif 
1f81			 
1f81			if FORTH_PARSEV5 
1f81			      include "forth_parserv5.asm" 
1f81				include "forth_wordsv4.asm" 
1f81			endif 
1f81			 
1f81			if FORTH_PARSEV6 
1f81			      include "forth_parserv6.asm" 
1f81			 
1f81			 
1f81			; A better parser without using malloc and string copies all over the place.  
1f81			; Exec in situ should be faster 
1f81			 
1f81			;WORD_SYS_LOWPRIM: equ 4    ; Offset for low level prim words opcode 
1f81			;WORD_SYS_BRANCH: equ 10    ; Offset for branching and loop words opcode 
1f81			WORD_SYS_UWORD: equ 1   ; Opcode for all user words 
1f81			WORD_SYS_DELETED: equ 3 ; Op code for a deleted UWORD 
1f81			WORD_SYS_ROOT: equ 0   ; Opcode for all user words 
1f81			WORD_SYS_END: equ 0   ; Opcode for all user words 
1f81			WORD_SYS_CORE: equ 20    ; Offset for dict core words opcode 
1f81			WORD_FLAG_CODE: equ 0	   ; opcodeflag to exec pure code for this word 
1f81			WORD_FLAG_JP: equ 1	   ; opcodeflag to list zero term jump table words 
1f81			 
1f81			; Core word preamble macro 
1f81			 
1f81			CWHEAD:   macro nxtword opcode lit len opflags 
1f81				db WORD_SYS_CORE+opcode             
1f81				; internal op code number 
1f81				dw nxtword            
1f81				; link to next dict word block 
1f81				db len + 1 
1f81				; literal length of dict word inc zero term 
1f81				db lit,0              
1f81				; literal dict word 
1f81			        ; TODO db opflags        
1f81				endm 
1f81			 
1f81			 
1f81			NEXTW: macro  
1f81				jp macro_next 
1f81				endm 
1f81			 
1f81			macro_next: 
1f81			if DEBUG_FORTH_PARSE_EXEC 
1f81				DMARK "NXT" 
1f81				CALLMONITOR 
1f81			endif	 
1f81			;	inc hl  ; skip token null term  
1f81 ed 4b 3a ea		ld bc,(cli_ptr)   ; move to next token to parse in the input stream 
1f85 ed 5b 38 ea		ld de,(cli_origptr)   ; move to next token to parse in the input stream 
1f89 2a bc e5			ld hl,(os_tok_ptr)   ; move to next token to parse in the input stream 
1f8c			if DEBUG_FORTH_PARSE_EXEC 
1f8c				DMARK "}AA" 
1f8c				CALLMONITOR 
1f8c			endif	 
1f8c c3 7b 20			jp execnext 
1f8f				;jp exec1 
1f8f			       
1f8f			 
1f8f			 
1f8f			; Another go at the parser to compile  
1f8f			 
1f8f			 
1f8f			; TODO rework parser to change all of the string words to byte tokens 
1f8f			; TODO do a search for  
1f8f			 
1f8f			; TODO first run normal parser to zero term sections 
1f8f			; TODO for each word do a token look up to get the op code 
1f8f			; TODO need some means to flag to the exec that this is a byte code form    
1f8f			 
1f8f			 
1f8f			forthcompile: 
1f8f			 
1f8f			; 
1f8f			; line parse: 
1f8f			;       parse raw input buffer 
1f8f			;       tokenise the words 
1f8f			;       malloc new copy (for looping etc) 
1f8f			;       copy to malloc + current pc in line to start of string and add line term 
1f8f			;       save on new rsp 
1f8f			; 
1f8f			 
1f8f			; hl to point to the line to tokenise 
1f8f			 
1f8f			;	push hl 
1f8f 22 bc e5			ld (os_tok_ptr), hl  ; save ptr to string 
1f92			 
1f92			;	ld a,0		; string term on input 
1f92			;	call strlent 
1f92			 
1f92			;	ld (os_tok_len), hl	 ; save string length 
1f92			 
1f92			;if DEBUG_FORTH_TOK 
1f92			;	ex de,hl		 
1f92			;endif 
1f92			 
1f92			;	pop hl 		; get back string pointer 
1f92			 
1f92			if DEBUG_FORTH_TOK 
1f92						DMARK "TOc" 
1f92				CALLMONITOR 
1f92			endif 
1f92 7e			.cptoken2:    ld a,(hl) 
1f93 23				inc hl 
1f94 fe 7f			cp FORTH_END_BUFFER 
1f96 28 29			jr z, .cptokendone2 
1f98 fe 00			cp 0 
1f9a 28 25			jr z, .cptokendone2 
1f9c fe 22			cp '"' 
1f9e 28 0b			jr z, .cptokenstr2     ; will want to skip until end of string delim 
1fa0 fe 20			cp ' ' 
1fa2 20 ee			jr nz,  .cptoken2 
1fa4			 
1fa4			; TODO consume comments held between ( and ) 
1fa4			 
1fa4				; we have a space so change to zero term for dict match later 
1fa4 2b				dec hl 
1fa5 3e 00			ld a,0 
1fa7 77				ld (hl), a 
1fa8 23				inc hl 
1fa9 18 e7			jr .cptoken2 
1fab				 
1fab			 
1fab			.cptokenstr2: 
1fab				; skip all white space until either eol (because forgot to term) or end double quote 
1fab			        ;   if double quotes spotted ensure to skip any space sep until matched doble quote 
1fab				;inc hl ; skip current double quote 
1fab 7e				ld a,(hl) 
1fac 23				inc hl 
1fad fe 22			cp '"' 
1faf 28 e1			jr z, .cptoken2 
1fb1 fe 7f			cp FORTH_END_BUFFER 
1fb3 28 0c			jr z, .cptokendone2 
1fb5 fe 00			cp 0 
1fb7 28 08			jr z, .cptokendone2 
1fb9 fe 20			cp ' ' 
1fbb 28 02			jr z, .cptmp2 
1fbd 18 ec			jr .cptokenstr2 
1fbf			 
1fbf			.cptmp2:	; we have a space so change to zero term for dict match later 
1fbf				;dec hl 
1fbf				;ld a,"-"	; TODO remove this when working 
1fbf				;ld (hl), a 
1fbf				;inc hl 
1fbf 18 ea			jr .cptokenstr2 
1fc1			 
1fc1			.cptokendone2: 
1fc1				;inc hl 
1fc1 3e 7f			ld a, FORTH_END_BUFFER 
1fc3 77				ld (hl),a 
1fc4			;	inc hl 
1fc4			;	ld a, '!' 
1fc4			;	ld (hl),a 
1fc4			 
1fc4 2a bc e5			ld hl,(os_tok_ptr) 
1fc7			         
1fc7			if DEBUG_FORTH_TOK 
1fc7						DMARK "Tc1" 
1fc7				CALLMONITOR 
1fc7			endif 
1fc7			 
1fc7				; push exec string to top of return stack 
1fc7				FORTH_RSP_NEXT 
1fc7 cd 37 1b			call macro_forth_rsp_next 
1fca				endm 
# End of macro FORTH_RSP_NEXT
1fca c9				ret 
1fcb			 
1fcb			; Another go at the parser need to simplify the process 
1fcb			 
1fcb			forthparse: 
1fcb			 
1fcb			; 
1fcb			; line parse: 
1fcb			;       parse raw input buffer 
1fcb			;       tokenise the words 
1fcb			;       malloc new copy (for looping etc) 
1fcb			;       copy to malloc + current pc in line to start of string and add line term 
1fcb			;       save on new rsp 
1fcb			; 
1fcb			 
1fcb			; hl to point to the line to tokenise 
1fcb			 
1fcb			;	push hl 
1fcb 22 bc e5			ld (os_tok_ptr), hl  ; save ptr to string 
1fce			 
1fce			;	ld a,0		; string term on input 
1fce			;	call strlent 
1fce			 
1fce			;	ld (os_tok_len), hl	 ; save string length 
1fce			 
1fce			;if DEBUG_FORTH_TOK 
1fce			;	ex de,hl		 
1fce			;endif 
1fce			 
1fce			;	pop hl 		; get back string pointer 
1fce			 
1fce			if DEBUG_FORTH_TOK 
1fce						DMARK "TOK" 
1fce				CALLMONITOR 
1fce			endif 
1fce 7e			.ptoken2:    ld a,(hl) 
1fcf 23				inc hl 
1fd0 fe 7f			cp FORTH_END_BUFFER 
1fd2 28 29			jr z, .ptokendone2 
1fd4 fe 00			cp 0 
1fd6 28 25			jr z, .ptokendone2 
1fd8 fe 22			cp '"' 
1fda 28 0b			jr z, .ptokenstr2     ; will want to skip until end of string delim 
1fdc fe 20			cp ' ' 
1fde 20 ee			jr nz,  .ptoken2 
1fe0			 
1fe0			; TODO consume comments held between ( and ) 
1fe0			 
1fe0				; we have a space so change to zero term for dict match later 
1fe0 2b				dec hl 
1fe1 3e 00			ld a,0 
1fe3 77				ld (hl), a 
1fe4 23				inc hl 
1fe5 18 e7			jr .ptoken2 
1fe7				 
1fe7			 
1fe7			.ptokenstr2: 
1fe7				; skip all white space until either eol (because forgot to term) or end double quote 
1fe7			        ;   if double quotes spotted ensure to skip any space sep until matched doble quote 
1fe7				;inc hl ; skip current double quote 
1fe7 7e				ld a,(hl) 
1fe8 23				inc hl 
1fe9 fe 22			cp '"' 
1feb 28 e1			jr z, .ptoken2 
1fed fe 7f			cp FORTH_END_BUFFER 
1fef 28 0c			jr z, .ptokendone2 
1ff1 fe 00			cp 0 
1ff3 28 08			jr z, .ptokendone2 
1ff5 fe 20			cp ' ' 
1ff7 28 02			jr z, .ptmp2 
1ff9 18 ec			jr .ptokenstr2 
1ffb			 
1ffb			.ptmp2:	; we have a space so change to zero term for dict match later 
1ffb				;dec hl 
1ffb				;ld a,"-"	; TODO remove this when working 
1ffb				;ld (hl), a 
1ffb				;inc hl 
1ffb 18 ea			jr .ptokenstr2 
1ffd			 
1ffd			.ptokendone2: 
1ffd				;inc hl 
1ffd 3e 7f			ld a, FORTH_END_BUFFER 
1fff 77				ld (hl),a 
2000			;	inc hl 
2000			;	ld a, '!' 
2000			;	ld (hl),a 
2000			 
2000 2a bc e5			ld hl,(os_tok_ptr) 
2003			         
2003			if DEBUG_FORTH_TOK 
2003						DMARK "TK1" 
2003				CALLMONITOR 
2003			endif 
2003			 
2003				; push exec string to top of return stack 
2003				FORTH_RSP_NEXT 
2003 cd 37 1b			call macro_forth_rsp_next 
2006				endm 
# End of macro FORTH_RSP_NEXT
2006 c9				ret 
2007			 
2007			; 
2007			;	; malloc size + buffer pointer + if is loop flag 
2007			;	ld hl,(os_tok_len) 		 ; get string length 
2007			; 
2007			;	ld a,l 
2007			; 
2007			;	cp 0			; we dont want to use a null string 
2007			;	ret z 
2007			; 
2007			;;	add 3    ; prefix malloc with buffer for current word ptr 
2007			; 
2007			;	add 5     ; TODO when certain not over writing memory remove 
2007			; 
2007			;		 
2007			; 
2007			;if DEBUG_FORTH_TOK 
2007			;			DMARK "TKE" 
2007			;	CALLMONITOR 
2007			;endif 
2007			; 
2007			;	ld l,a 
2007			;	ld h,0 
2007			;;	push hl   ; save required space for the copy later 
2007			;	call malloc 
2007			;if DEBUG_FORTH_TOK 
2007			;			DMARK "TKM" 
2007			;	CALLMONITOR 
2007			;endif 
2007			;	if DEBUG_FORTH_MALLOC_GUARD 
2007			;		push af 
2007			;		call ishlzero 
2007			;;		ld a, l 
2007			;;		add h 
2007			;;		cp 0 
2007			;		pop af 
2007			;		 
2007			;		call z,malloc_error 
2007			;	endif 
2007			;	ld (os_tok_malloc), hl	 ; save malloc ptr 
2007			; 
2007			; 
2007			;if DEBUG_FORTH_TOK 
2007			;			DMARK "TKR" 
2007			;	CALLMONITOR 
2007			;endif 
2007			; 
2007			;	FORTH_RSP_NEXT 
2007			; 
2007			;	;inc hl	 ; go past current buffer pointer 
2007			;	;inc hl 
2007			;	;inc hl   ; and past if loop flag 
2007			;		; TODO Need to set flag  
2007			; 
2007			;	 
2007			;	 
2007			;	ex de,hl	; malloc is dest 
2007			;	ld hl, (os_tok_len) 
2007			;;	pop bc 
2007			;	ld c, l                
2007			;	ld b,0 
2007			;	ld hl, (os_tok_ptr) 
2007			; 
2007			;if DEBUG_FORTH_TOK 
2007			;			DMARK "TKT" 
2007			;	CALLMONITOR 
2007			;endif 
2007			; 
2007			;	; do str cpy 
2007			; 
2007			;	ldir      ; copy byte in hl to de 
2007			; 
2007			;	; set end of buffer to high bit on zero term and use that for end of buffer scan 
2007			; 
2007			;if DEBUG_FORTH_TOK 
2007			; 
2007			;			DMARK "TKY" 
2007			;	CALLMONITOR 
2007			;endif 
2007			;	;ld a,0 
2007			;	;ld a,FORTH_END_BUFFER 
2007			;	ex de, hl 
2007			;	;dec hl			 ; go back over the space delim at the end of word 
2007			;	;ld (hl),a 
2007			;	;inc hl                    ;  TODO double check this. Going past the end of string to make sure end of processing buffer is marked 
2007			;	ld a,FORTH_END_BUFFER 
2007			;	ld (hl),a 
2007			;	inc hl 
2007			;	ld a,FORTH_END_BUFFER 
2007			;	ld (hl),a 
2007			; 
2007			;	; init the malloc area data 
2007			;	; set pc for in current area 
2007			;	;ld hl, (os_tok_malloc) 
2007			;	;inc hl 
2007			;	;inc hl 
2007			;	;inc hl 
2007			;	;ex de,hl 
2007			;	;ld hl, (os_tok_malloc) 
2007			;	;ld (hl),e 
2007			;	;inc hl 
2007			;	;ld (hl),d 
2007			; 
2007			; 
2007			;	ld hl,(os_tok_malloc) 
2007			;if DEBUG_FORTH_PARSE_KEY 
2007			;			DMARK "TKU" 
2007			;	CALLMONITOR 
2007			;endif 
2007			; 
2007			;	ret 
2007			 
2007			forthexec: 
2007			 
2007			; line exec: 
2007			; forth parser 
2007			 
2007			; 
2007			;       get current exec line on rsp 
2007			 
2007				FORTH_RSP_TOS 
2007 cd 4e 1b			call macro_forth_rsp_tos 
200a				endm 
# End of macro FORTH_RSP_TOS
200a			 
200a			;       restore current pc - hl points to malloc of data 
200a			 
200a				;ld e, (hl) 
200a				;inc hl 
200a				;ld d, (hl) 
200a				;ex de,hl 
200a			 
200a			 
200a			exec1: 
200a 22 bc e5			ld (os_tok_ptr), hl                 ; here move out of repeated saving in this tight loop 
200d			 
200d				; copy our PC to working vars  
200d 22 3a ea			ld (cli_ptr), hl                    ; here 
2010 22 38 ea			ld (cli_origptr), hl                ; here 
2013			 
2013 7e				ld a,(hl)                           ; here make hl be the ram ptr 
2014 fe 7f			cp FORTH_END_BUFFER 
2016 c8				ret z 
2017			 
2017				; skip any nulls 
2017			 
2017 fe 00			cp 0 
2019 20 03			jr nz, .execword 
201b 23				inc hl 
201c 18 ec			jr exec1 
201e			 
201e			 
201e			.execword: 
201e			 
201e			 
201e			 
201e			if DEBUG_FORTH_PARSE_EXEC 
201e						DMARK "KYQ" 
201e				CALLMONITOR 
201e			endif 
201e			;       while at start of word: 
201e			; get start of dict (in user area first) 
201e			 
201e 21 bf 61		ld hl, baseram 
2021			;ld hl, sysdict 
2021 22 3c ea		ld (cli_nextword),hl                            ; here do we need to do this? 
2024			;           match word at pc 
2024			;           exec word 
2024			;           or push to dsp 
2024			;           forward to next token 
2024			;           if line term pop rsp and exit 
2024			;        
2024			 
2024			if DEBUG_FORTH_PARSE_EXEC 
2024						DMARK "KYq" 
2024				CALLMONITOR 
2024			endif 
2024			 
2024			; 
2024			; word comp 
2024			;    get compiled byte and save it (need to decide if code is compiled or not for comparison) 
2024			;    if byte is 0 then end parsing and report failed lookup (or could be something to add to stack etc) 
2024			;    move to start of word  
2024			;    compare word to cli_token 
2024			 
2024			.execpnword:	; HL at start of a word in the dictionary to check 
2024			 
2024 2a 3c ea			ld hl,(cli_nextword)                  ; here remove the need to store???? 
2027			 
2027 cd be 20			call forth_tok_next 
202a			; tok next end here 
202a 22 3c ea			ld (cli_nextword), hl     ; save for next check if no match on this word 
202d eb				ex de, hl 
202e			 
202e			 
202e				; save the pointer of the current token - 1 to check against 
202e				 
202e 22 40 ea			ld (cli_token), hl   
2031				; TODO maybe remove below save if no debug 
2031				; save token string ptr for any debug later 
2031 23				inc hl  
2032 22 42 ea			ld (cli_origtoken), hl 
2035 2b				dec hl 
2036				; save pointer to the start of the next dictionay word 
2036 7e				ld a,(hl)   ; get string length 
2037 47				ld b,a 
2038			.execpnwordinc:  
2038 23				inc hl 
2039 10 fd			djnz .execpnwordinc 
203b 22 3e ea			ld (cli_execword), hl      ; save start of this words code 
203e			 
203e				; now check the word token against the string being parsed 
203e			 
203e 2a 40 ea			ld hl,(cli_token) 
2041 23				inc hl     ; skip string length (use zero term instead to end) 
2042				;ld (cli_token), hl 
2042			 
2042			.execpnchar:    ; compare char between token and string to parse 
2042			 
2042			 
2042				;ld hl, (cli_token)     ; the dict word  
2042 ed 5b 3a ea		ld de, (cli_ptr)     ; cli to parse 
2046			 
2046			 
2046			.execpncharl:    ; compare char between token and string to parse (loop) 
2046			 
2046 1a				ld a,(de) 
2047 cd 52 11			call toUpper 		; make sure the input string matches case 
204a be				cp (hl) 
204b			 
204b c2 64 20			jp nz, .execpnskipword	 ; no match so move to next word 
204e				 
204e			;    if same 
204e			;       scan for string terms 0 for token and 32 for input 
204e 46				ld b,(hl) 
204f 80				add b			 
2050 23				inc hl 
2051 13				inc de 
2052 fe 00			cp 0			 ; add both chars together, if 32 then other must be 0 so at end of string we are parsing? 
2054							; TODO need to make sure last word in zero term string is accounted for 
2054 20 f0			jr nz, .execpncharl 		 ; not at end of strings yet 
2056			 
2056			 
2056				; at end of both strings so both are exact match 
2056			 
2056			;       skip ptr for next word 
2056			 
2056 2a 3a ea			ld hl,(cli_ptr) 	; at input string term 
2059 23				inc hl			 ; at next char 
205a 22 3a ea			ld (cli_ptr), hl     ; save for next round of the parser 
205d 22 38 ea			ld (cli_origptr), hl     ; save for any restart of current string ie a number or string to push to data stack 
2060				 
2060				 
2060			 
2060			 
2060			 
2060			;       exec code block 
2060			if DEBUG_FORTH_JP 
2060				call clear_display 
2060				call update_display 
2060				call delay1s 
2060				ld hl, (cli_execword)     ; save for next check if no match on this word 
2060				ld a,h 
2060				ld hl, os_word_scratch 
2060				call hexout 
2060				ld hl, (cli_execword)     ; save for next check if no match on this word 
2060				ld a,l 
2060				ld hl, os_word_scratch+2 
2060				call hexout 
2060				ld hl, os_word_scratch+4 
2060				ld a,0 
2060				ld (hl),a 
2060				ld de,os_word_scratch 
2060				call str_at_display 
2060					ld a, display_row_2 
2060					call str_at_display 
2060				ld de, (cli_origtoken) 
2060				ld a, display_row_1+10 
2060					call str_at_display 
2060			 
2060				ld a,display_row_1 
2060				ld de, .foundword 
2060				ld a, display_row_3 
2060				call str_at_display 
2060				call update_display 
2060				call delay1s 
2060				call delay1s 
2060				call delay1s 
2060			endif 
2060			 
2060			if DEBUG_FORTH_PARSE_EXEC 
2060						DMARK "KYj" 
2060			endif 
2060				; TODO save the word pointer in this exec 
2060			 
2060 2a 3e ea			ld hl,(cli_execword) 
2063 e9				jp (hl) 
2064			 
2064			 
2064			;    if not same 
2064			;	scan for zero term 
2064			;	get ptr for next word 
2064			;	goto word comp 
2064			 
2064			.execpnskipword:	; get pointer to next word 
2064 2a 3c ea			ld hl,(cli_nextword) 
2067			 
2067 7e				ld a,(hl) 
2068 fe 00			cp WORD_SYS_END 
206a			;	cp 0 
206a 28 09			jr z, .execendofdict			 ; at end of words 
206c			 
206c			if DEBUG_FORTH_PARSE_EXEC 
206c						DMARK "KY4" 
206c			endif 
206c			if DEBUG_FORTH_PARSE_EXEC 
206c			 
206c				; see if disabled 
206c			 
206c			;	ld a, (os_view_disable) 
206c			;	cp '*' 
206c				ld a,(debug_vector) 
206c				cp $c9   ; RET 
206c				jr z, .noskip 
206c			 
206c			 
206c				ld de, .nowordfound 
206c				ld a, display_row_3 
206c				call str_at_display 
206c				call update_display 
206c				ld a, 100 
206c				call aDelayInMS 
206c				 
206c				if DEBUG_FORTH_PARSE_EXEC_SLOW 
206c					call delay250ms 
206c				endif 
206c			.noskip:  
206c			 
206c			endif	 
206c			 
206c 2a 38 ea			ld hl,(cli_origptr) 
206f 22 3a ea			ld (cli_ptr),hl 
2072			 
2072			if DEBUG_FORTH_PARSE_EXEC 
2072						DMARK "KY5" 
2072			endif 
2072 c3 24 20			jp .execpnword			; else go to next word 
2075			 
2075			.execendofdict:  
2075			 
2075			if DEBUG_FORTH_PARSE_EXEC 
2075						DMARK "KYe" 
2075			endif 
2075			if DEBUG_FORTH_PARSE_EXEC 
2075				; see if disabled 
2075			 
2075			;	ld a, (os_view_disable) 
2075			;	cp '*' 
2075				ld a,(debug_vector) 
2075				cp $c9   ; ret 
2075				jr z, .ispskip 
2075			 
2075				call clear_display 
2075				call update_display 
2075				call delay1s 
2075				ld de, (cli_origptr) 
2075				ld a, display_row_1 
2075				call str_at_display 
2075				 
2075				ld de, .enddict 
2075				ld a, display_row_3 
2075				call str_at_display 
2075				call update_display 
2075				ld a, 100 
2075				call aDelayInMS 
2075				if DEBUG_FORTH_PARSE_EXEC_SLOW 
2075				call delay1s 
2075				call delay1s 
2075				call delay1s 
2075				endif 
2075			.ispskip:  
2075				 
2075			endif	 
2075			 
2075			 
2075			 
2075				; if the word is not a keyword then must be a literal so push it to stack 
2075			 
2075			; push token to stack to end of word 
2075			 
2075				STACKFRAME ON $1efe $2f9f 
2075				if DEBUG_STACK_IMB 
2075					if ON 
2075						exx 
2075						ld de, $1efe 
2075						ld a, d 
2075						ld hl, curframe 
2075						call hexout 
2075						ld a, e 
2075						ld hl, curframe+2 
2075						call hexout 
2075						ld hl, $1efe 
2075						push hl 
2075						ld hl, $2f9f 
2075						push hl 
2075						exx 
2075					endif 
2075				endif 
2075			endm 
# End of macro STACKFRAME
2075			 
2075 2a bc e5		ld hl,(os_tok_ptr) 
2078 cd f9 1c		call forth_apush 
207b			 
207b				STACKFRAMECHK ON $1efe $2f9f 
207b				if DEBUG_STACK_IMB 
207b					if ON 
207b						exx 
207b						ld hl, $2f9f 
207b						pop de   ; $2f9f 
207b						call cmp16 
207b						jr nz, .spnosame 
207b						ld hl, $1efe 
207b						pop de   ; $1efe 
207b						call cmp16 
207b						jr z, .spfrsame 
207b						.spnosame: call showsperror 
207b						.spfrsame: nop 
207b						exx 
207b					endif 
207b				endif 
207b			endm 
# End of macro STACKFRAMECHK
207b			 
207b			execnext: 
207b			 
207b			if DEBUG_FORTH_PARSE_EXEC 
207b						DMARK "KY>" 
207b			endif 
207b			; move past token to next word 
207b			 
207b 2a bc e5		ld hl, (os_tok_ptr) 
207e 3e 00		ld a, 0 
2080 01 ff 00		ld bc, 255     ; input buffer size 
2083 ed b1		cpir 
2085			 
2085			if DEBUG_FORTH_PARSE_EXEC 
2085						DMARK "KY!" 
2085				CALLMONITOR 
2085			endif	 
2085			; TODO this might place hl on the null, so will need to forward on??? 
2085			;inc hl   ; see if this gets onto the next item 
2085			 
2085			 
2085			; TODO pass a pointer to the buffer to push 
2085			; TODO call function to push 
2085			 
2085			; look for end of input 
2085			 
2085			;inc hl 
2085			;ld a,(hl) 
2085			;cp FORTH_END_BUFFER 
2085			;ret z 
2085			 
2085			 
2085 c3 0a 20		jp exec1 
2088			 
2088			 
2088			 
2088			 
2088			 
2088			 
2088			 
2088			 
2088			 
2088			findnexttok: 
2088			 
2088				; hl is pointer to move 
2088				; de is the token to locate 
2088			 
2088					if DEBUG_FORTH 
2088						DMARK "NTK" 
2088						CALLMONITOR 
2088					endif 
2088 d5				push de 
2089			 
2089			.fnt1:	 
2089				; find first char of token to locate 
2089			 
2089 1a				ld a, (de) 
208a 4f				ld c,a 
208b 7e				ld a,(hl) 
208c cd 52 11			call toUpper 
208f					if DEBUG_FORTH 
208f						DMARK "NT1" 
208f						CALLMONITOR 
208f					endif 
208f b9				cp c 
2090			 
2090 28 03			jr z, .fnt2cmpmorefirst	 
2092			 
2092				; first char not found move to next char 
2092			 
2092 23				inc hl 
2093 18 f4			jr .fnt1 
2095			 
2095			.fnt2cmpmorefirst:	 
2095				; first char of token found.  
2095			 
2095 e5				push hl     ; save start of token just in case it is the right one 
2096 d9				exx 
2097 e1				pop hl        ; save it to hl' 
2098 d9				exx 
2099			 
2099			 
2099			.fnt2cmpmore:	 
2099				; compare the rest 
2099				 
2099 23				inc hl 
209a 13				inc de 
209b				 
209b 1a				ld a, (de) 
209c 4f				ld c,a 
209d 7e				ld a,(hl) 
209e cd 52 11			call toUpper 
20a1			 
20a1					if DEBUG_FORTH 
20a1						DMARK "NT2" 
20a1						CALLMONITOR 
20a1					endif 
20a1				; c has the token to find char 
20a1				; a has the mem to scan char 
20a1			 
20a1 b9				cp c 
20a2 28 04			jr z,.fntmatch1 
20a4			 
20a4				; they are not the same 
20a4			 
20a4					if DEBUG_FORTH 
20a4						DMARK "NT3" 
20a4						CALLMONITOR 
20a4					endif 
20a4 d1				pop de	; reset de token to look for 
20a5 d5				push de 
20a6 18 e1			jr .fnt1 
20a8				 
20a8			.fntmatch1: 
20a8			 
20a8				; is the same char a null which means we might have a full hit? 
20a8					if DEBUG_FORTH 
20a8						DMARK "NT4" 
20a8						CALLMONITOR 
20a8					endif 
20a8			 
20a8 fe 00			cp 0 
20aa 28 0b			jr z, .fntmatchyes 
20ac			 
20ac				; are we at the end of the token to find? 
20ac			 
20ac					if DEBUG_FORTH 
20ac						DMARK "NT5" 
20ac						CALLMONITOR 
20ac					endif 
20ac 3e 00			ld a, 0 
20ae b9				cp c 
20af			 
20af c2 99 20			jp nz, .fnt2cmpmore    ; no, so keep going to a direct hit 
20b2			 
20b2					if DEBUG_FORTH 
20b2						DMARK "NT6" 
20b2						CALLMONITOR 
20b2					endif 
20b2				; token to find is exhusted but no match to stream 
20b2			 
20b2				; restore tok pointer and continue on 
20b2 d1				pop de 
20b3 d5				push de 
20b4 c3 89 20			jp .fnt1 
20b7			 
20b7			 
20b7			.fntmatchyes: 
20b7			 
20b7				; hl now contains the end of the found token 
20b7			 
20b7				; get rid of saved token pointer to find 
20b7			 
20b7 d1				pop de 
20b8			 
20b8					if DEBUG_FORTH 
20b8						DMARK "NT9" 
20b8						CALLMONITOR 
20b8					endif 
20b8			 
20b8				; hl will be on the null term so forward on 
20b8			 
20b8				; get back the saved start of the token 
20b8			 
20b8 d9				exx 
20b9 e5				push hl     ; save start of token just in case it is the right one 
20ba d9				exx 
20bb e1				pop hl        ; save it to hl 
20bc			 
20bc c9				ret 
20bd			 
20bd			 
20bd			; LIST needs to find a specific token   
20bd			; FORGET needs to find a spefici token 
20bd			 
20bd			; SAVE needs to find all tokens by flag 
20bd			; WORDS just needs to scan through all  by flag 
20bd			; UWORDS needs to scan through all by flag 
20bd			 
20bd			 
20bd			; given hl as pointer to start of dict look up string 
20bd			; return hl as pointer to start of word block 
20bd			; or 0 if not found 
20bd			 
20bd			forth_find_tok: 
20bd c9				ret 
20be			 
20be			; given hl as pointer to dict structure 
20be			; move to the next dict block structure 
20be			 
20be			forth_tok_next: 
20be				; hl now points to the address of the next word pointer  
20be				; TODO skip compiled symbol for now 
20be			;	push de 
20be 23				inc hl 
20bf 5e				ld e, (hl) 
20c0 23				inc hl 
20c1 56				ld d, (hl) 
20c2 23				inc hl 
20c3			 
20c3 eb				ex de,hl 
20c4			if DEBUG_FORTH_PARSE_NEXTWORD 
20c4				push bc 
20c4				ld bc, (cli_nextword) 
20c4						DMARK "NXW" 
20c4				CALLMONITOR 
20c4				pop bc 
20c4			endif 
20c4			;	pop de	 
20c4 c9				ret 
20c5			 
20c5			 
20c5			 
20c5			; eof 
# End of file forth_parserv6.asm
20c5				include "forth_wordsv4.asm" 
20c5			 
20c5			; the core word dictionary v4 
20c5			; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Notation.html#Notation 
20c5			 
20c5			; this is a linked list for each of the system words used 
20c5			; user defined words will follow the same format but will be in ram 
20c5			 
20c5			 
20c5			; 
20c5			; 
20c5			; define linked list: 
20c5			; 
20c5			; 1. compiled byte op code 
20c5			; 2. len of text word 
20c5			; 3. text word 
20c5			; 4. ptr to next dictionary word 
20c5			; 5. asm, calls etc for the word 
20c5			; 
20c5			;  if 1 == 0 then last word in dict  
20c5			;   
20c5			; set the start of dictionary scanning to be in ram and the last word point to the system dict 
20c5			;  
20c5			;  
20c5			; create basic standard set of words 
20c5			; 
20c5			;  
20c5			; + - / * DUP EMIT . SWAP IF..THEN..ELSE DO..LOOP  : ; DROP  
20c5			; 2DUP 2DROP 2SWAP  
20c5			; @ C@ - get byte  
20c5			; ! C! - store byte 
20c5			; 0< true if less than zero 
20c5			; 0= true if zero 
20c5			; < >  
20c5			; = true if same 
20c5			; variables 
20c5			 
20c5			 
20c5			; Hardware specific words I may need 
20c5			; 
20c5			; IN OUT  
20c5			; calls to key util functions 
20c5			; calls to hardward abstraction stuff 
20c5			; easy control of frame buffers and lcd i/o 
20c5			; keyboard  
20c5			 
20c5			 
20c5			;DICT: macro 
20c5			; op_code, len, word, next 
20c5			;    word: 
20c5			;    db op_code 
20c5			;    ds word zero term 
20c5			;    dw next 
20c5			;    endm 
20c5			 
20c5			 
20c5			 
20c5			 
20c5			; op code 1 is a flag for user define words which are to be handled differently 
20c5			 
20c5			 
20c5			; 
20c5			; 
20c5			;    TODO on entry to a word this should be the expected environment 
20c5			;    hl - tos value if number then held, if string this is the ptr 
20c5			;    de -  
20c5			 
20c5			 
20c5			; opcode ranges 
20c5			; 0 - end of word dict 
20c5			; 255 - user define words 
20c5			 
20c5			sysdict: 
20c5			include "forth_opcodes.asm" 
20c5			; op codes for forth keywords 
20c5			 
20c5			; Changing use of opcodes to flag is the word exists in compiled form or not.  
20c5			; This provides a means to compile uwords if required for higher performance 
20c5			; by avoiding the use of the keyword parser and just jumping directly to the code 
20c5			; Actually there is already a flag for if the code exists as binary thinking about it... 
20c5			 
20c5			 
20c5			 
20c5			 
20c5			 
20c5			; free to use code 0  
20c5				OPCODE_HEAP: equ  1 
20c5				OPCODE_EXEC: equ 2 
20c5				OPCODE_DUP: equ 3 
20c5				OPCODE_SWAP: equ 4 
20c5				OPCODE_COLN: equ 5 
20c5				OPCODE_SCOLN: equ 6 
20c5				OPCODE_DROP: equ 7 
20c5				OPCODE_DUP2: equ 8 
20c5				OPCODE_DROP2: equ 9 
20c5				OPCODE_SWAP2: equ 10 
20c5				OPCODE_AT: equ 11 
20c5				OPCODE_CAT: equ 12 
20c5				OPCODE_BANG: equ 13 
20c5				OPCODE_CBANG: equ 14 
20c5				OPCODE_SCALL: equ 15 
20c5				OPCODE_DEPTH: equ 16 
20c5				OPCODE_OVER: equ 17 
20c5				OPCODE_PAUSE: equ 18 
20c5				OPCODE_PAUSES: equ 19 
20c5				OPCODE_ROT: equ 20 
20c5			;free to reuse	OPCODE_WORDS: equ 21 
20c5			        OPCODE_NOT: equ 21 
20c5				OPCODE_UWORDS: equ 22 
20c5				OPCODE_BP: equ 23 
20c5				OPCODE_MONITOR: equ 24  
20c5				OPCODE_MALLOC: equ 25 
20c5				OPCODE_FREE: equ 26 
20c5				OPCODE_LIST: equ 27 
20c5				OPCODE_FORGET: equ 28 
20c5				OPCODE_NOP: equ 29 
20c5				OPCODE_COMO: equ 30 
20c5				OPCODE_COMC: equ 31 
20c5			;free to reuse	OPCODE_ENDCORE: equ 32 
20c5				OPCODE_AFTERSOUND: equ 33 
20c5				OPCODE_GP2: equ 34 
20c5				OPCODE_GP3: equ 35 
20c5				OPCODE_GP4: equ 36 
20c5				OPCODE_SIN: equ 37 
20c5				OPCODE_SOUT: equ 38 
20c5				OPCODE_SPIO: equ 39 
20c5				OPCODE_SPICEH: equ 40 
20c5				OPCODE_SPIOb: equ 41 
20c5				OPCODE_SPII: equ 42 
20c5				OPCODE_SESEL: equ 43 
20c5				OPCODE_CARTDEV: equ 44 
20c5			; free to reuse	OPCODE_ENDDEVICE: equ 45 
20c5				OPCODE_FB: equ 46 
20c5				OPCODE_EMIT: equ 47 
20c5				OPCODE_DOTH: equ 48 
20c5				OPCODE_DOTF: equ 49 
20c5				OPCODE_DOT: equ 50 
20c5				OPCODE_CLS: equ 51 
20c5				OPCODE_DRAW: equ 52 
20c5				OPCODE_DUMP: equ 53 
20c5				OPCODE_CDUMP: equ 54 
20c5				OPCODE_DAT: equ 55 
20c5				OPCODE_HOME: equ 56 
20c5				OPCODE_SPACE: equ 57 
20c5				OPCODE_SPACES: equ 58 
20c5				OPCODE_SCROLL: equ 59 
20c5				OPCODE_ATQ: equ 60 
20c5				OPCODE_AUTODSP: equ 61 
20c5				OPCODE_MENU: equ 62 
20c5			; free to reuse	OPCODE_ENDDISPLAY: equ 63  
20c5				OPCODE_THEN: equ 64 
20c5				OPCODE_ELSE: equ 65 
20c5				OPCODE_DO: equ 66 
20c5				OPCODE_LOOP: equ 67 
20c5				OPCODE_I: equ 68 
20c5				OPCODE_DLOOP: equ 69  
20c5				OPCODE_REPEAT: equ 70  
20c5				OPCODE_UNTIL: equ 71 
20c5				OPCODE_ENDFLOW: equ 72 
20c5				OPCODE_WAITK: equ 73 
20c5				OPCODE_ACCEPT: equ 74 
20c5				OPCODE_EDIT: equ 75 
20c5			;free to reuse	OPCODE_ENDKEY: equ 76 
20c5				OPCODE_LZERO: equ 77 
20c5				OPCODE_TZERO: equ 78 
20c5				OPCODE_LESS: equ 79 
20c5				OPCODE_GT: equ 80 
20c5				OPCODE_EQUAL: equ 81  
20c5			;free to reuse	OPCODE_ENDLOGIC: equ 82 
20c5				OPCODE_NEG: equ 83 
20c5				OPCODE_DIV: equ 84 
20c5				OPCODE_MUL: equ 85 
20c5				OPCODE_MIN: equ 86 
20c5				OPCODE_MAX: equ 87 
20c5				OPCODE_RND16: equ 88 
20c5				OPCODE_RND8: equ 89 
20c5				OPCODE_RND: equ 90 
20c5			;free to reuse	OPCODE_ENDMATHS: equ 91  
20c5				OPCODE_BYNAME: equ 92 
20c5				OPCODE_DIR: equ 93 
20c5				OPCODE_SAVE: equ 94 
20c5				OPCODE_LOAD: equ 95 
20c5				OPCODE_BSAVE: equ 96 
20c5				OPCODE_BLOAD: equ 97 
20c5				OPCODE_SEO: equ 98  
20c5				OPCODE_SEI: equ 99 
20c5				OPCODE_SFREE: equ 100 
20c5				OPCODE_SIZE: equ 101 
20c5				OPCODE_CREATE: equ 102 
20c5				OPCODE_APPEND: equ 103 
20c5				OPCODE_SDEL: equ 104 
20c5				OPCODE_OPEN: equ 105 
20c5				OPCODE_READ: equ 106 
20c5				OPCODE_EOF: equ 106 
20c5				OPCODE_FORMAT: equ 107 
20c5				OPCODE_LABEL: equ 108 
20c5				OPCODE_LABELS: equ 109 
20c5			;free to reuse	OPCODE_ENDSTORAGE: equ 110  
20c5				OPCODE_UPPER: equ 111 
20c5				OPCODE_LOWER: equ 112 
20c5				OPCODE_SUBSTR: equ 113 
20c5				OPCODE_LEFT: equ 114 
20c5				OPCODE_RIGHT: equ 115 
20c5				OPCODE_STR2NUM: equ 116 
20c5				OPCODE_NUM2STR: equ 117 
20c5				OPCODE_CONCAT: equ 118 
20c5				OPCODE_FIND: equ 119 
20c5				OPCODE_LEN: equ 120 
20c5				OPCODE_CHAR: equ 121 
20c5			; free to reuse	OPCODE_STRLEN: equ 122 
20c5			; free to reuse	OPCODE_ENDSTR: equ 123 
20c5				OPCODE_V0S: equ 124 
20c5				OPCODE_V0Q: equ 125 
20c5				OPCODE_V1S: equ 126 
20c5				OPCODE_V1Q: equ 127 
20c5				OPCODE_V2S: equ 128 
20c5				OPCODE_V2Q: equ 129 
20c5				OPCODE_V3S: equ 130 
20c5				OPCODE_V3Q: equ 131 
20c5			;free to reuse	OPCODE_END: equ 132 
20c5				OPCODE_ZDUP: equ 133 
20c5			 
20c5			; eof 
# End of file forth_opcodes.asm
20c5			 
20c5			include "forth_words_core.asm" 
20c5			 
20c5			; | ## Core Words 
20c5			 
20c5			;if MALLOC_4 
20c5			 
20c5			.HEAP: 
20c5			CWHEAD .EXEC OPCODE_HEAP "HEAP" 4 WORD_FLAG_CODE 
20c5 15				db WORD_SYS_CORE+OPCODE_HEAP             
20c6 04 21			dw .EXEC            
20c8 05				db 4 + 1 
20c9 .. 00			db "HEAP",0              
20ce				endm 
# End of macro CWHEAD
20ce			; | HEAP ( -- u1 u2 )   Pushes u1 the current number of bytes in the heap and u2 the remaining bytes - Only present if using my MALLOC | DONE 
20ce			; | | u1 - Current number of bytes in the heap 
20ce			; | | u2 - Remaining bytes left on the heap 
20ce			; | |  
20ce			; | | The heap is used for storing user defined words as well as any values pushed to stack. 
20ce			 
20ce			 
20ce				if DEBUG_FORTH_WORDS_KEY 
20ce					DMARK "HEP" 
20ce f5				push af  
20cf 3a e3 20			ld a, (.dmark)  
20d2 32 65 ee			ld (debug_mark),a  
20d5 3a e4 20			ld a, (.dmark+1)  
20d8 32 66 ee			ld (debug_mark+1),a  
20db 3a e5 20			ld a, (.dmark+2)  
20de 32 67 ee			ld (debug_mark+2),a  
20e1 18 03			jr .pastdmark  
20e3 ..			.dmark: db "HEP"  
20e6 f1			.pastdmark: pop af  
20e7			endm  
# End of macro DMARK
20e7					CALLMONITOR 
20e7 cd 6f ee			call debug_vector  
20ea				endm  
# End of macro CALLMONITOR
20ea				endif 
20ea 2a c9 61			ld hl, (free_list )      
20ed 11 ce 61			ld de, heap_start 
20f0			 
20f0 ed 52			sbc hl, de  
20f2			 
20f2 cd 90 1b			call forth_push_numhl 
20f5			 
20f5			 
20f5 ed 5b c9 61		ld de, (free_list )      
20f9 21 96 e2			ld hl, heap_end 
20fc			 
20fc ed 52			sbc hl, de 
20fe			 
20fe cd 90 1b			call forth_push_numhl 
2101				 
2101			 
2101				 
2101			 
2101			 
2101			 
2101				NEXTW 
2101 c3 81 1f			jp macro_next 
2104				endm 
# End of macro NEXTW
2104			;endif 
2104			 
2104			.EXEC: 
2104			;	CWHEAD .STKEXEC OPCODE_EXEC "EXEC" 4 WORD_FLAG_CODE 
2104			;; > EXEC ( u -- )    Execs the string on TOS as a FORTH expression > CRASHES ON NEXTW 
2104			;; > > u - A qutoed string which can consist of any valid Forth expression excluding : defintions (use LOAD instead) 
2104			;; > > 
2104			;; > >   
2104			;	STACKFRAME OFF $5efe $5f9f 
2104			; 
2104			;		if DEBUG_FORTH_WORDS_KEY 
2104			;			DMARK "EXE" 
2104			;			CALLMONITOR 
2104			;		endif 
2104			; 
2104			;	FORTH_DSP_VALUEHL 
2104			; 
2104			;	FORTH_DSP_POP 
2104			; 
2104			;		if DEBUG_FORTH_WORDS 
2104			;			DMARK "EX1" 
2104			;			CALLMONITOR 
2104			;		endif 
2104			;;	ld e,(hl) 
2104			;;	inc hl 
2104			;;	ld d,(hl) 
2104			;;	ex de,hl 
2104			; 
2104			;;		if DEBUG_FORTH_WORDS 
2104			;;			DMARK "EX2" 
2104			;;			CALLMONITOR 
2104			;;		endif 
2104			;	push hl 
2104			; 
2104			;	;ld a, 0 
2104			;	;ld a, FORTH_END_BUFFER 
2104			;	call strlenz 
2104			;	inc hl   ; include zero term to copy 
2104			;	inc hl   ; include term 
2104			;	inc hl   ; include term 
2104			;	ld b,0 
2104			;	ld c,l 
2104			;	pop hl 
2104			;	ld de, execscratch 
2104			;		if DEBUG_FORTH_WORDS 
2104			;			DMARK "EX3" 
2104			;			CALLMONITOR 
2104			;		endif 
2104			;	ldir 
2104			; 
2104			; 
2104			;	ld hl, execscratch 
2104			; 
2104			;		if DEBUG_FORTH_WORDS 
2104			;			DMARK "EXe" 
2104			;			CALLMONITOR 
2104			;		endif 
2104			; 
2104			;	call forthparse 
2104			;	call forthexec 
2104			;;	call forthexec_cleanup 
2104			;;	call forthparse 
2104			;;	call forthexec 
2104			; 
2104			;	STACKFRAMECHK OFF $5efe $5f9f 
2104			; 
2104			;	; an immediate word so no need to process any more words 
2104			;	ret 
2104			;	NEXTW 
2104			 
2104			; dead code - old version  
2104			;	FORTH_RSP_NEXT 
2104			 
2104			;  
2104			;	ld bc,(cli_ptr)   ; move to next token to parse in the input stream 
2104			;	ld de,(cli_origptr)   ; move to next token to parse in the input stream 
2104			;	ld hl,(os_tok_ptr)   ; move to next token to parse in the input stream 
2104			;	push hl 
2104			;	push de 
2104			;	push bc 
2104			; 
2104			; 
2104			;		if DEBUG_FORTH_WORDS_KEY 
2104			;			DMARK "EXR" 
2104			;			CALLMONITOR 
2104			;		endif 
2104			; 
2104			; 
2104			; 
2104			;	;v5 FORTH_DSP_VALUE 
2104			;	FORTH_DSP_VALUEHL 
2104			; 
2104			;	; TODO do string type checks 
2104			; 
2104			;;v5	inc hl   ; skip type 
2104			; 
2104			;	push hl  ; source code  
2104			;		if DEBUG_FORTH_WORDS 
2104			;			DMARK "EX1" 
2104			;			CALLMONITOR 
2104			;		endif 
2104			;	ld a, 0 
2104			;	call strlent 
2104			; 
2104			;	inc hl 
2104			;	inc hl 
2104			;	inc hl 
2104			;	inc hl 
2104			; 
2104			;	push hl    ; size 
2104			; 
2104			;		if DEBUG_FORTH_WORDS 
2104			;			DMARK "EX2" 
2104			;			CALLMONITOR 
2104			;		endif 
2104			;	call malloc 
2104			; 
2104			;	ex de, hl    ; de now contains malloc area 
2104			;	pop bc   	; get byte count 
2104			;	pop hl      ; get string to copy 
2104			; 
2104			;	push de     ; save malloc for free later 
2104			; 
2104			;		if DEBUG_FORTH_WORDS 
2104			;			DMARK "EX3" 
2104			;			CALLMONITOR 
2104			;		endif 
2104			;	ldir       ; duplicate string 
2104			; 
2104			;	; at the end of the string so go back the three extra spaces and fill in with extra terms 
2104			;	 
2104			;	; TODO fix the parse would be better than this...  
2104			;	ex de, hl 
2104			;	dec hl 
2104			;	ld a, 0 
2104			;	ld (hl), a 
2104			;	dec hl 
2104			;	ld a, ' ' 
2104			;	ld (hl), a 
2104			;	dec hl 
2104			;	ld (hl), a 
2104			; 
2104			;	dec hl 
2104			;	ld (hl), a 
2104			; 
2104			; 
2104			;	FORTH_DSP_POP  
2104			; 
2104			;	pop hl     
2104			;	push hl    ; save malloc area 
2104			; 
2104			;		if DEBUG_FORTH_WORDS 
2104			;			DMARK "EX4" 
2104			;			CALLMONITOR 
2104			;		endif 
2104			; 
2104			;	call forthparse 
2104			;	call forthexec 
2104			;	 
2104			;	pop hl 
2104			;	if DEBUG_FORTH_WORDS 
2104			;		DMARK "EX5" 
2104			;		CALLMONITOR 
2104			;	endif 
2104			; 
2104			;	if FORTH_ENABLE_FREE 
2104			;	call free 
2104			;	endif 
2104			; 
2104			;	if DEBUG_FORTH_WORDS 
2104			;		DMARK "EX6" 
2104			;		CALLMONITOR 
2104			;	endif 
2104			; 
2104			;	pop bc 
2104			;	pop de 
2104			;	pop hl 
2104			;;	FORTH_RSP_POP	  
2104			;	ld (cli_ptr),bc   ; move to next token to parse in the input stream 
2104			;	ld (cli_origptr),de   ; move to next token to parse in the input stream 
2104			;	ld (os_tok_ptr),hl   ; move to next token to parse in the input stream 
2104			; 
2104			;	if DEBUG_FORTH_WORDS 
2104			;		DMARK "EX7" 
2104			;		CALLMONITOR 
2104			;	endif 
2104			;	NEXTW 
2104			 
2104			;.STKEXEC: 
2104			;	CWHEAD .ZDUP 43 "STKEXEC" 7 WORD_FLAG_CODE 
2104			;; > STKEXEC ( u .. u c -- ) Taking c count of strings off of the stack the strings are evaluated as code > TO TEST 
2104			; 
2104			; 
2104			;		if DEBUG_FORTH_WORDS_KEY 
2104			;			DMARK "STX" 
2104			;			CALLMONITOR 
2104			;		endif 
2104			; 
2104			;	FORTH_DSP_VALUEHL 
2104			; 
2104			;	ld (store_tmp1), hl    ; count 
2104			; 
2104			;	FORTH_DSP_POP 
2104			;.stkexec1: 
2104			;	ld hl, (store_tmp1)   ; count 
2104			;	ld a, 0 
2104			;	cp l 
2104			;	ret z 
2104			; 
2104			;	dec hl 
2104			;	ld (store_tmp1), hl    ; count 
2104			;	 
2104			;	FORTH_DSP_VALUEHL 
2104			;	push hl 
2104			;	 
2104			;		if DEBUG_FORTH_WORDS 
2104			;			DMARK "EXp" 
2104			;			CALLMONITOR 
2104			;		endif 
2104			;	FORTH_DSP_POP 
2104			; 
2104			;	call strlenz 
2104			;	inc hl   ; include zero term to copy 
2104			;	inc hl   ; include zero term to copy 
2104			;	inc hl   ; include zero term to copy 
2104			;	ld b,0 
2104			;	ld c,l 
2104			;	pop hl 
2104			;	ld de, execscratch 
2104			;		if DEBUG_FORTH_WORDS 
2104			;			DMARK "EX3" 
2104			;			CALLMONITOR 
2104			;		endif 
2104			;	ldir 
2104			; 
2104			; 
2104			;	ld hl, execscratch 
2104			; 
2104			;		if DEBUG_FORTH_WORDS 
2104			;			DMARK "EXP" 
2104			;			CALLMONITOR 
2104			;		endif 
2104			; 
2104			;	call forthparse 
2104			;	ld hl, execscratch 
2104			;		if DEBUG_FORTH_WORDS 
2104			;			DMARK "EXx" 
2104			;			CALLMONITOR 
2104			;		endif 
2104			;	call forthexec 
2104			; 
2104			;	jp .stkexec1 
2104			; 
2104			;	ret 
2104			 
2104			 
2104			.DUP: 
2104			CWHEAD .ZDUP OPCODE_DUP "DUP" 3 WORD_FLAG_CODE 
2104 17				db WORD_SYS_CORE+OPCODE_DUP             
2105 7a 21			dw .ZDUP            
2107 04				db 3 + 1 
2108 .. 00			db "DUP",0              
210c				endm 
# End of macro CWHEAD
210c			; | DUP ( u -- u u )     Duplicate whatever item is on TOS | DONE 
210c			 
210c				if DEBUG_FORTH_WORDS_KEY 
210c					DMARK "DUP" 
210c f5				push af  
210d 3a 21 21			ld a, (.dmark)  
2110 32 65 ee			ld (debug_mark),a  
2113 3a 22 21			ld a, (.dmark+1)  
2116 32 66 ee			ld (debug_mark+1),a  
2119 3a 23 21			ld a, (.dmark+2)  
211c 32 67 ee			ld (debug_mark+2),a  
211f 18 03			jr .pastdmark  
2121 ..			.dmark: db "DUP"  
2124 f1			.pastdmark: pop af  
2125			endm  
# End of macro DMARK
2125					CALLMONITOR 
2125 cd 6f ee			call debug_vector  
2128				endm  
# End of macro CALLMONITOR
2128				endif 
2128			 
2128				FORTH_DSP 
2128 cd 5b 1d			call macro_forth_dsp 
212b				endm 
# End of macro FORTH_DSP
212b			 
212b 7e				ld a, (HL) 
212c fe 01			cp DS_TYPE_STR 
212e 20 25			jr nz, .dupinum 
2130			 
2130				; push another string 
2130			 
2130				FORTH_DSP_VALUEHL     		 
2130 cd 95 1d			call macro_dsp_valuehl 
2133				endm 
# End of macro FORTH_DSP_VALUEHL
2133			 
2133			if DEBUG_FORTH_WORDS 
2133				DMARK "DUs" 
2133 f5				push af  
2134 3a 48 21			ld a, (.dmark)  
2137 32 65 ee			ld (debug_mark),a  
213a 3a 49 21			ld a, (.dmark+1)  
213d 32 66 ee			ld (debug_mark+1),a  
2140 3a 4a 21			ld a, (.dmark+2)  
2143 32 67 ee			ld (debug_mark+2),a  
2146 18 03			jr .pastdmark  
2148 ..			.dmark: db "DUs"  
214b f1			.pastdmark: pop af  
214c			endm  
# End of macro DMARK
214c				CALLMONITOR 
214c cd 6f ee			call debug_vector  
214f				endm  
# End of macro CALLMONITOR
214f			endif 
214f cd fe 1b			call forth_push_str 
2152			 
2152				NEXTW 
2152 c3 81 1f			jp macro_next 
2155				endm 
# End of macro NEXTW
2155			 
2155			 
2155			.dupinum: 
2155				 
2155			 
2155			 
2155				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2155 cd 95 1d			call macro_dsp_valuehl 
2158				endm 
# End of macro FORTH_DSP_VALUEHL
2158			 
2158			; TODO add floating point number detection 
2158			 
2158			if DEBUG_FORTH_WORDS 
2158				DMARK "DUi" 
2158 f5				push af  
2159 3a 6d 21			ld a, (.dmark)  
215c 32 65 ee			ld (debug_mark),a  
215f 3a 6e 21			ld a, (.dmark+1)  
2162 32 66 ee			ld (debug_mark+1),a  
2165 3a 6f 21			ld a, (.dmark+2)  
2168 32 67 ee			ld (debug_mark+2),a  
216b 18 03			jr .pastdmark  
216d ..			.dmark: db "DUi"  
2170 f1			.pastdmark: pop af  
2171			endm  
# End of macro DMARK
2171				CALLMONITOR 
2171 cd 6f ee			call debug_vector  
2174				endm  
# End of macro CALLMONITOR
2174			endif 
2174			 
2174 cd 90 1b			call forth_push_numhl 
2177				NEXTW 
2177 c3 81 1f			jp macro_next 
217a				endm 
# End of macro NEXTW
217a			.ZDUP: 
217a			CWHEAD .LSHIFT OPCODE_ZDUP "?DUP" 4 WORD_FLAG_CODE 
217a 99				db WORD_SYS_CORE+OPCODE_ZDUP             
217b b2 21			dw .LSHIFT            
217d 05				db 4 + 1 
217e .. 00			db "?DUP",0              
2183				endm 
# End of macro CWHEAD
2183			; | ?DUP ( u -- u u )     Duplicate item on TOS if the item is non-zero (Only works for numerics) | DONE 
2183			 
2183				if DEBUG_FORTH_WORDS_KEY 
2183					DMARK "qDU" 
2183 f5				push af  
2184 3a 98 21			ld a, (.dmark)  
2187 32 65 ee			ld (debug_mark),a  
218a 3a 99 21			ld a, (.dmark+1)  
218d 32 66 ee			ld (debug_mark+1),a  
2190 3a 9a 21			ld a, (.dmark+2)  
2193 32 67 ee			ld (debug_mark+2),a  
2196 18 03			jr .pastdmark  
2198 ..			.dmark: db "qDU"  
219b f1			.pastdmark: pop af  
219c			endm  
# End of macro DMARK
219c					CALLMONITOR 
219c cd 6f ee			call debug_vector  
219f				endm  
# End of macro CALLMONITOR
219f				endif 
219f				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
219f cd 95 1d			call macro_dsp_valuehl 
21a2				endm 
# End of macro FORTH_DSP_VALUEHL
21a2			 
21a2 e5				push hl 
21a3			 
21a3				; is it a zero? 
21a3			 
21a3 3e 00			ld a, 0 
21a5 84				add h 
21a6 85				add l 
21a7			 
21a7 e1				pop hl 
21a8			 
21a8 fe 00			cp 0 
21aa 28 03			jr z, .dup2orig 
21ac			 
21ac			 
21ac cd 90 1b			call forth_push_numhl 
21af			 
21af			 
21af			; TODO add floating point number detection 
21af			 
21af			.dup2orig: 
21af			 
21af				NEXTW 
21af c3 81 1f			jp macro_next 
21b2				endm 
# End of macro NEXTW
21b2			.LSHIFT: 
21b2			CWHEAD .RSHIFT OPCODE_ZDUP "LSHIFT" 6 WORD_FLAG_CODE 
21b2 99				db WORD_SYS_CORE+OPCODE_ZDUP             
21b3 e6 21			dw .RSHIFT            
21b5 07				db 6 + 1 
21b6 .. 00			db "LSHIFT",0              
21bd				endm 
# End of macro CWHEAD
21bd			; | LSHIFT ( w -- w )    16 bit left shift | DONE 
21bd				if DEBUG_FORTH_WORDS_KEY 
21bd					DMARK "LSH" 
21bd f5				push af  
21be 3a d2 21			ld a, (.dmark)  
21c1 32 65 ee			ld (debug_mark),a  
21c4 3a d3 21			ld a, (.dmark+1)  
21c7 32 66 ee			ld (debug_mark+1),a  
21ca 3a d4 21			ld a, (.dmark+2)  
21cd 32 67 ee			ld (debug_mark+2),a  
21d0 18 03			jr .pastdmark  
21d2 ..			.dmark: db "LSH"  
21d5 f1			.pastdmark: pop af  
21d6			endm  
# End of macro DMARK
21d6					CALLMONITOR 
21d6 cd 6f ee			call debug_vector  
21d9				endm  
# End of macro CALLMONITOR
21d9				endif 
21d9				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
21d9 cd 95 1d			call macro_dsp_valuehl 
21dc				endm 
# End of macro FORTH_DSP_VALUEHL
21dc				FORTH_DSP_POP 
21dc cd 4d 1e			call macro_forth_dsp_pop 
21df				endm 
# End of macro FORTH_DSP_POP
21df			 
21df 29				add hl, hl 
21e0 cd 90 1b			call forth_push_numhl 
21e3				NEXTW 
21e3 c3 81 1f			jp macro_next 
21e6				endm 
# End of macro NEXTW
21e6			.RSHIFT: 
21e6			CWHEAD .SWAP OPCODE_ZDUP "RSHIFT" 6 WORD_FLAG_CODE 
21e6 99				db WORD_SYS_CORE+OPCODE_ZDUP             
21e7 1d 22			dw .SWAP            
21e9 07				db 6 + 1 
21ea .. 00			db "RSHIFT",0              
21f1				endm 
# End of macro CWHEAD
21f1			; | RSHIFT ( w -- w )    16 bit right shift | DONE 
21f1				if DEBUG_FORTH_WORDS_KEY 
21f1					DMARK "RSH" 
21f1 f5				push af  
21f2 3a 06 22			ld a, (.dmark)  
21f5 32 65 ee			ld (debug_mark),a  
21f8 3a 07 22			ld a, (.dmark+1)  
21fb 32 66 ee			ld (debug_mark+1),a  
21fe 3a 08 22			ld a, (.dmark+2)  
2201 32 67 ee			ld (debug_mark+2),a  
2204 18 03			jr .pastdmark  
2206 ..			.dmark: db "RSH"  
2209 f1			.pastdmark: pop af  
220a			endm  
# End of macro DMARK
220a					CALLMONITOR 
220a cd 6f ee			call debug_vector  
220d				endm  
# End of macro CALLMONITOR
220d				endif 
220d				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
220d cd 95 1d			call macro_dsp_valuehl 
2210				endm 
# End of macro FORTH_DSP_VALUEHL
2210				FORTH_DSP_POP 
2210 cd 4d 1e			call macro_forth_dsp_pop 
2213				endm 
# End of macro FORTH_DSP_POP
2213 cb 3c			srl h 
2215 cb 1d			rr l 
2217 cd 90 1b			call forth_push_numhl 
221a				NEXTW 
221a c3 81 1f			jp macro_next 
221d				endm 
# End of macro NEXTW
221d			.SWAP: 
221d			CWHEAD .COLN OPCODE_SWAP "SWAP" 4 WORD_FLAG_CODE 
221d 18				db WORD_SYS_CORE+OPCODE_SWAP             
221e 71 22			dw .COLN            
2220 05				db 4 + 1 
2221 .. 00			db "SWAP",0              
2226				endm 
# End of macro CWHEAD
2226			; | SWAP ( w1 w2 -- w2 w1 )    Swap top two items on TOS | DONE 
2226				if DEBUG_FORTH_WORDS_KEY 
2226					DMARK "SWP" 
2226 f5				push af  
2227 3a 3b 22			ld a, (.dmark)  
222a 32 65 ee			ld (debug_mark),a  
222d 3a 3c 22			ld a, (.dmark+1)  
2230 32 66 ee			ld (debug_mark+1),a  
2233 3a 3d 22			ld a, (.dmark+2)  
2236 32 67 ee			ld (debug_mark+2),a  
2239 18 03			jr .pastdmark  
223b ..			.dmark: db "SWP"  
223e f1			.pastdmark: pop af  
223f			endm  
# End of macro DMARK
223f					CALLMONITOR 
223f cd 6f ee			call debug_vector  
2242				endm  
# End of macro CALLMONITOR
2242				endif 
2242			 
2242			; DONE Use os stack swap memory 
2242			 
2242				FORTH_DSP_PTR 0     ; TOS 
2242 2a e8 e9			ld hl,(cli_data_sp) 
2245 11 00 00			ld de, 0 * 3 
2248 ed 52			sbc hl, de 
224a				endm 
# End of macro FORTH_DSP_PTR
224a cd cd 1e			call hltostack1 
224d			  
224d				FORTH_DSP_PTR 1     ; TOS 
224d 2a e8 e9			ld hl,(cli_data_sp) 
2250 11 03 00			ld de, 1 * 3 
2253 ed 52			sbc hl, de 
2255				endm 
# End of macro FORTH_DSP_PTR
2255 cd d3 1e			call hltostack2 
2258			 
2258				FORTH_DSP_PTR 0     ; TOS 
2258 2a e8 e9			ld hl,(cli_data_sp) 
225b 11 00 00			ld de, 0 * 3 
225e ed 52			sbc hl, de 
2260				endm 
# End of macro FORTH_DSP_PTR
2260 cd eb 1e			call hlfromstack2 
2263			 
2263				FORTH_DSP_PTR 1     ; TOS 
2263 2a e8 e9			ld hl,(cli_data_sp) 
2266 11 03 00			ld de, 1 * 3 
2269 ed 52			sbc hl, de 
226b				endm 
# End of macro FORTH_DSP_PTR
226b cd e5 1e			call hlfromstack1 
226e			;	FORTH_DSP_VALUEHL 
226e			;	push hl     ; w2 
226e			; 
226e			;	FORTH_DSP_POP 
226e			; 
226e			;	FORTH_DSP_VALUEHL 
226e			; 
226e			;	FORTH_DSP_POP 
226e			; 
226e			;	pop de     ; w2	, hl = w1 
226e			; 
226e			;	ex de, hl 
226e			;	push de 
226e			; 
226e			;	call forth_push_numhl 
226e			; 
226e			;	pop hl 
226e			; 
226e			;	call forth_push_numhl 
226e				 
226e			 
226e				NEXTW 
226e c3 81 1f			jp macro_next 
2271				endm 
# End of macro NEXTW
2271			.COLN: 
2271			CWHEAD .SCOLN OPCODE_COLN ":" 1 WORD_FLAG_CODE 
2271 19				db WORD_SYS_CORE+OPCODE_COLN             
2272 fd 23			dw .SCOLN            
2274 02				db 1 + 1 
2275 .. 00			db ":",0              
2277				endm 
# End of macro CWHEAD
2277			; | : ( -- )         Create new word | DONE 
2277			 
2277				if DEBUG_FORTH_WORDS_KEY 
2277					DMARK "CLN" 
2277 f5				push af  
2278 3a 8c 22			ld a, (.dmark)  
227b 32 65 ee			ld (debug_mark),a  
227e 3a 8d 22			ld a, (.dmark+1)  
2281 32 66 ee			ld (debug_mark+1),a  
2284 3a 8e 22			ld a, (.dmark+2)  
2287 32 67 ee			ld (debug_mark+2),a  
228a 18 03			jr .pastdmark  
228c ..			.dmark: db "CLN"  
228f f1			.pastdmark: pop af  
2290			endm  
# End of macro DMARK
2290					CALLMONITOR 
2290 cd 6f ee			call debug_vector  
2293				endm  
# End of macro CALLMONITOR
2293				endif 
2293			STACKFRAME OFF $8efe $989f 
2293				if DEBUG_STACK_IMB 
2293					if OFF 
2293						exx 
2293						ld de, $8efe 
2293						ld a, d 
2293						ld hl, curframe 
2293						call hexout 
2293						ld a, e 
2293						ld hl, curframe+2 
2293						call hexout 
2293						ld hl, $8efe 
2293						push hl 
2293						ld hl, $989f 
2293						push hl 
2293						exx 
2293					endif 
2293				endif 
2293			endm 
# End of macro STACKFRAME
2293			; get parser buffer length  of new word 
2293			 
2293			 
2293			 
2293				; move tok past this to start of name defintition 
2293				; TODO get word to define 
2293				; TODO Move past word token 
2293				; TODO get length of string up to the ';' 
2293			 
2293 2a bc e5		ld hl, (os_tok_ptr) 
2296 23			inc hl 
2297 23			inc hl 
2298			 
2298 3e 3b		ld a, ';' 
229a cd 66 11		call strlent 
229d			 
229d 7d			ld a,l 
229e 32 ab e2		ld (os_new_parse_len), a 
22a1			 
22a1			 
22a1			if DEBUG_FORTH_UWORD 
22a1 ed 5b bc e5	ld de, (os_tok_ptr) 
22a5					DMARK ":01" 
22a5 f5				push af  
22a6 3a ba 22			ld a, (.dmark)  
22a9 32 65 ee			ld (debug_mark),a  
22ac 3a bb 22			ld a, (.dmark+1)  
22af 32 66 ee			ld (debug_mark+1),a  
22b2 3a bc 22			ld a, (.dmark+2)  
22b5 32 67 ee			ld (debug_mark+2),a  
22b8 18 03			jr .pastdmark  
22ba ..			.dmark: db ":01"  
22bd f1			.pastdmark: pop af  
22be			endm  
# End of macro DMARK
22be			CALLMONITOR 
22be cd 6f ee			call debug_vector  
22c1				endm  
# End of macro CALLMONITOR
22c1			endif 
22c1			 
22c1			; 
22c1			;  new word memory layout: 
22c1			;  
22c1			;    : adg 6666 ;  
22c1			; 
22c1			;    db   1     ; user defined word  
22c1 23			inc hl    
22c2			;    dw   sysdict 
22c2 23			inc hl 
22c3 23			inc hl 
22c4			;    db <word len>+1 (for null) 
22c4 23			inc hl 
22c5			;    db .... <word> 
22c5			; 
22c5			 
22c5 23			inc hl    ; some extras for the word preamble before the above 
22c6 23			inc hl 
22c7 23			inc hl 
22c8 23			inc hl 
22c9 23			inc hl 
22ca 23			inc hl 
22cb 23			inc hl  
22cc 23			inc hl 
22cd 23			inc hl 
22ce 23			inc hl 
22cf 23			inc hl 
22d0 23			inc hl 
22d1 23			inc hl 
22d2 23			inc hl     ; TODO how many do we really need?     maybe only 6 
22d3			;       exec word buffer 
22d3			;	<ptr word>   
22d3 23			inc hl 
22d4 23			inc hl 
22d5			;       <word list><null term> 7F final term 
22d5			 
22d5			 
22d5			if DEBUG_FORTH_UWORD 
22d5					DMARK ":02" 
22d5 f5				push af  
22d6 3a ea 22			ld a, (.dmark)  
22d9 32 65 ee			ld (debug_mark),a  
22dc 3a eb 22			ld a, (.dmark+1)  
22df 32 66 ee			ld (debug_mark+1),a  
22e2 3a ec 22			ld a, (.dmark+2)  
22e5 32 67 ee			ld (debug_mark+2),a  
22e8 18 03			jr .pastdmark  
22ea ..			.dmark: db ":02"  
22ed f1			.pastdmark: pop af  
22ee			endm  
# End of macro DMARK
22ee			CALLMONITOR 
22ee cd 6f ee			call debug_vector  
22f1				endm  
# End of macro CALLMONITOR
22f1			endif 
22f1			 
22f1			 
22f1				; malloc the size 
22f1			 
22f1 cd d0 11			call malloc 
22f4 22 ad e2			ld (os_new_malloc), hl     ; save malloc start 
22f7			 
22f7			;    db   1     ; user defined word  
22f7 3e 01			ld a, WORD_SYS_UWORD  
22f9 77				ld (hl), a 
22fa			 
22fa 23			inc hl    
22fb			;    dw   sysdict 
22fb 11 c5 20		ld de, sysdict       ; continue on with the scan to the system dict 
22fe 73			ld (hl), e 
22ff 23			inc hl 
2300 72			ld (hl), d 
2301 23			inc hl 
2302			 
2302			 
2302			;    Setup dict word 
2302			 
2302 23			inc hl 
2303 22 a7 e2		ld (os_new_work_ptr), hl     ; save start of dict word  
2306			 
2306			; 1. get length of dict word 
2306			 
2306			 
2306 2a bc e5		ld hl, (os_tok_ptr) 
2309 23			inc hl 
230a 23			inc hl    ; position to start of dict word 
230b 3e 00		ld a, 0 
230d cd 66 11		call strlent 
2310			 
2310			 
2310 23			inc hl    ; to include null??? 
2311			 
2311			; write length of dict word 
2311			 
2311 ed 5b a7 e2	ld de, (os_new_work_ptr)   ; get dest for copy of word 
2315 1b			dec de 
2316 eb			ex de, hl 
2317 73			ld (hl), e 
2318 eb			ex de, hl 
2319			 
2319			 
2319			 
2319			; copy  
2319 4d			ld c, l 
231a 06 00		ld b, 0 
231c ed 5b a7 e2	ld de, (os_new_work_ptr)   ; get dest for copy of word 
2320 2a bc e5		ld hl, (os_tok_ptr) 
2323 23			inc hl 
2324 23			inc hl    ; position to start of dict word 
2325			 
2325			;	ldir       ; copy word - HL now is where we need to be for copy of the line 
2325			 
2325			; TODO need to convert word to upper case 
2325			 
2325			ucasetok:	 
2325 7e			ld a,(hl) 
2326 cd 52 11		call toUpper 
2329 77			ld (hl),a 
232a ed a0		ldi 
232c f2 25 23		jp p, ucasetok 
232f			 
232f			 
232f			 
232f			; de now points to start of where the word body code should be placed 
232f ed 53 a7 e2	ld (os_new_work_ptr), de 
2333			; hl now points to the words to throw at forthexec which needs to be copied 
2333 22 a5 e2		ld (os_new_src_ptr), hl 
2336			 
2336			; TODO add 'call to forthexec' 
2336			 
2336			if DEBUG_FORTH_UWORD 
2336 c5			push bc 
2337 ed 4b ad e2	ld bc, (os_new_malloc) 
233b					DMARK ":0x" 
233b f5				push af  
233c 3a 50 23			ld a, (.dmark)  
233f 32 65 ee			ld (debug_mark),a  
2342 3a 51 23			ld a, (.dmark+1)  
2345 32 66 ee			ld (debug_mark+1),a  
2348 3a 52 23			ld a, (.dmark+2)  
234b 32 67 ee			ld (debug_mark+2),a  
234e 18 03			jr .pastdmark  
2350 ..			.dmark: db ":0x"  
2353 f1			.pastdmark: pop af  
2354			endm  
# End of macro DMARK
2354			CALLMONITOR 
2354 cd 6f ee			call debug_vector  
2357				endm  
# End of macro CALLMONITOR
2357 c1			pop bc 
2358			endif 
2358			 
2358			 
2358			; create word preamble which should be: 
2358			 
2358			; TODO possibly push the current os_tok_ptr to rsp and the current rsp will be the start of the string and not current pc???? 
2358			 
2358			;    ld hl, <word code> 
2358			;    jp user_exec 
2358			;    <word code bytes> 
2358			 
2358			 
2358			;	inc de     ; TODO ??? or are we already past the word's null 
2358 eb			ex de, hl 
2359			 
2359 36 21		ld (hl), 021h     ; TODO get bytes poke "ld hl, " 
235b			 
235b 23			inc hl 
235c 22 a1 e2		ld (os_new_exec_ptr),hl     ; save this location to poke with the address of the word buffer 
235f 23			inc hl 
2360			 
2360 23			inc hl 
2361 36 c3		ld (hl), 0c3h     ; TODO get bytes poke "jp xx  " 
2363			 
2363 01 43 4f		ld bc, user_exec 
2366 23			inc hl 
2367 71			ld (hl), c     ; poke address of user_exec 
2368 23			inc hl 
2369 70			ld (hl), b     
236a			; 
236a			;	inc hl 
236a			;	ld (hl), 0cdh     ; TODO get bytes poke "call  " 
236a			; 
236a			; 
236a			;	ld bc, macro_forth_rsp_next 
236a			;	inc hl 
236a			;	ld (hl), c     ; poke address of FORTH_RSP_NEXT 
236a			;	inc hl 
236a			;	ld (hl), b     
236a			; 
236a			;	inc hl 
236a			;	ld (hl), 0cdh     ; TODO get bytes poke "call  " 
236a			; 
236a			; 
236a			;	inc hl 
236a			;	ld bc, forthexec 
236a			;	ld (hl), c     ; poke address of forthexec 
236a			;	inc hl 
236a			;	ld (hl), b      
236a			; 
236a			;	inc hl 
236a			;	ld (hl), 0c3h     ; TODO get bytes poke "jp  " 
236a			; 
236a			;	ld bc, user_dict_next 
236a			;	inc hl 
236a			;	ld (hl), c     ; poke address of forthexec 
236a			;	inc hl 
236a			;	ld (hl), b      
236a			 
236a			; hl is now where we need to copy the word byte data to save this 
236a			 
236a 23			inc hl 
236b 22 a3 e2		ld (os_new_exec), hl 
236e			 
236e			; copy definition 
236e			 
236e eb			ex de, hl 
236f			;	inc de    ; TODO BUG It appears the exec of a uword requires pc to be set 
236f			;	inc de    ; skip the PC for this parse 
236f 3a ab e2		ld a, (os_new_parse_len) 
2372 4f			ld c, a 
2373 06 00		ld b, 0 
2375 ed b0		ldir		 ; copy defintion 
2377			 
2377			 
2377			; poke the address of where the new word bytes live for forthexec 
2377			 
2377 2a a1 e2		ld hl, (os_new_exec_ptr)     ; TODO this isnt correct 
237a			 
237a ed 5b a3 e2	ld de, (os_new_exec)      
237e			 
237e 73			ld (hl), e 
237f 23			inc hl 
2380 72			ld (hl), d 
2381			 
2381				; TODO copy last user dict word next link to this word 
2381				; TODO update last user dict word to point to this word 
2381			; 
2381			; hl f923 de 812a ; bc 811a 
2381			 
2381			if DEBUG_FORTH_UWORD 
2381 c5			push bc 
2382 ed 4b ad e2	ld bc, (os_new_malloc) 
2386					DMARK ":0A" 
2386 f5				push af  
2387 3a 9b 23			ld a, (.dmark)  
238a 32 65 ee			ld (debug_mark),a  
238d 3a 9c 23			ld a, (.dmark+1)  
2390 32 66 ee			ld (debug_mark+1),a  
2393 3a 9d 23			ld a, (.dmark+2)  
2396 32 67 ee			ld (debug_mark+2),a  
2399 18 03			jr .pastdmark  
239b ..			.dmark: db ":0A"  
239e f1			.pastdmark: pop af  
239f			endm  
# End of macro DMARK
239f			CALLMONITOR 
239f cd 6f ee			call debug_vector  
23a2				endm  
# End of macro CALLMONITOR
23a2 c1			pop bc 
23a3			endif 
23a3			if DEBUG_FORTH_UWORD 
23a3 c5			push bc 
23a4 ed 4b ad e2	ld bc, (os_new_malloc) 
23a8 03			inc bc 
23a9 03			inc bc 
23aa 03			inc bc 
23ab 03			inc bc 
23ac 03			inc bc 
23ad 03			inc bc 
23ae 03			inc bc 
23af 03			inc bc 
23b0			 
23b0					DMARK ":0B" 
23b0 f5				push af  
23b1 3a c5 23			ld a, (.dmark)  
23b4 32 65 ee			ld (debug_mark),a  
23b7 3a c6 23			ld a, (.dmark+1)  
23ba 32 66 ee			ld (debug_mark+1),a  
23bd 3a c7 23			ld a, (.dmark+2)  
23c0 32 67 ee			ld (debug_mark+2),a  
23c3 18 03			jr .pastdmark  
23c5 ..			.dmark: db ":0B"  
23c8 f1			.pastdmark: pop af  
23c9			endm  
# End of macro DMARK
23c9			CALLMONITOR 
23c9 cd 6f ee			call debug_vector  
23cc				endm  
# End of macro CALLMONITOR
23cc c1			pop bc 
23cd			endif 
23cd			 
23cd			; update word dict linked list for new word 
23cd			 
23cd			 
23cd 2a b8 e5		ld hl, (os_last_new_uword)		; get the start of the last added uword 
23d0 23			inc hl     ; move to next work linked list ptr 
23d1			 
23d1 ed 5b ad e2	ld de, (os_new_malloc)		 ; new next word 
23d5 73			ld (hl), e 
23d6 23			inc hl 
23d7 72			ld (hl), d 
23d8			 
23d8			if DEBUG_FORTH_UWORD 
23d8 ed 4b b8 e5	ld bc, (os_last_new_uword)		; get the last word so we can check it worked in debug 
23dc			endif 
23dc			 
23dc ed 53 b8 e5	ld (os_last_new_uword), de      ; update last new uword ptr 
23e0			 
23e0			 
23e0			if DEBUG_FORTH_UWORD 
23e0					DMARK ":0+" 
23e0 f5				push af  
23e1 3a f5 23			ld a, (.dmark)  
23e4 32 65 ee			ld (debug_mark),a  
23e7 3a f6 23			ld a, (.dmark+1)  
23ea 32 66 ee			ld (debug_mark+1),a  
23ed 3a f7 23			ld a, (.dmark+2)  
23f0 32 67 ee			ld (debug_mark+2),a  
23f3 18 03			jr .pastdmark  
23f5 ..			.dmark: db ":0+"  
23f8 f1			.pastdmark: pop af  
23f9			endm  
# End of macro DMARK
23f9			CALLMONITOR 
23f9 cd 6f ee			call debug_vector  
23fc				endm  
# End of macro CALLMONITOR
23fc			endif 
23fc			 
23fc			STACKFRAMECHK OFF $8efe $989f 
23fc				if DEBUG_STACK_IMB 
23fc					if OFF 
23fc						exx 
23fc						ld hl, $989f 
23fc						pop de   ; $989f 
23fc						call cmp16 
23fc						jr nz, .spnosame 
23fc						ld hl, $8efe 
23fc						pop de   ; $8efe 
23fc						call cmp16 
23fc						jr z, .spfrsame 
23fc						.spnosame: call showsperror 
23fc						.spfrsame: nop 
23fc						exx 
23fc					endif 
23fc				endif 
23fc			endm 
# End of macro STACKFRAMECHK
23fc			 
23fc c9			ret    ; dont process any remaining parser tokens as they form new word 
23fd			 
23fd			 
23fd			 
23fd			 
23fd			;		NEXT 
23fd			.SCOLN: 
23fd			;	CWHEAD .DROP 17 '\;' 1 WORD_FLAG_CODE 
23fd 06			db OPCODE_SCOLN 
23fe 49 24		dw .DROP 
2400 02			db 2 
2401 .. 00		db ";",0           
2403			; | ; ( -- )     Terminate new word and return exec to previous exec level | DONE 
2403				if DEBUG_FORTH_WORDS_KEY 
2403					DMARK "SCN" 
2403 f5				push af  
2404 3a 18 24			ld a, (.dmark)  
2407 32 65 ee			ld (debug_mark),a  
240a 3a 19 24			ld a, (.dmark+1)  
240d 32 66 ee			ld (debug_mark+1),a  
2410 3a 1a 24			ld a, (.dmark+2)  
2413 32 67 ee			ld (debug_mark+2),a  
2416 18 03			jr .pastdmark  
2418 ..			.dmark: db "SCN"  
241b f1			.pastdmark: pop af  
241c			endm  
# End of macro DMARK
241c					CALLMONITOR 
241c cd 6f ee			call debug_vector  
241f				endm  
# End of macro CALLMONITOR
241f				endif 
241f				FORTH_RSP_TOS 
241f cd 4e 1b			call macro_forth_rsp_tos 
2422				endm 
# End of macro FORTH_RSP_TOS
2422 e5				push hl 
2423				FORTH_RSP_POP 
2423 cd 58 1b			call macro_forth_rsp_pop 
2426				endm 
# End of macro FORTH_RSP_POP
2426 e1				pop hl 
2427			;		ex de,hl 
2427 22 bc e5			ld (os_tok_ptr),hl 
242a			 
242a			if DEBUG_FORTH_UWORD 
242a					DMARK "SCL" 
242a f5				push af  
242b 3a 3f 24			ld a, (.dmark)  
242e 32 65 ee			ld (debug_mark),a  
2431 3a 40 24			ld a, (.dmark+1)  
2434 32 66 ee			ld (debug_mark+1),a  
2437 3a 41 24			ld a, (.dmark+2)  
243a 32 67 ee			ld (debug_mark+2),a  
243d 18 03			jr .pastdmark  
243f ..			.dmark: db "SCL"  
2442 f1			.pastdmark: pop af  
2443			endm  
# End of macro DMARK
2443			CALLMONITOR 
2443 cd 6f ee			call debug_vector  
2446				endm  
# End of macro CALLMONITOR
2446			endif 
2446				NEXTW 
2446 c3 81 1f			jp macro_next 
2449				endm 
# End of macro NEXTW
2449			 
2449			.DROP: 
2449			CWHEAD .DUP2 OPCODE_DROP "DROP" 4 WORD_FLAG_CODE 
2449 1b				db WORD_SYS_CORE+OPCODE_DROP             
244a 74 24			dw .DUP2            
244c 05				db 4 + 1 
244d .. 00			db "DROP",0              
2452				endm 
# End of macro CWHEAD
2452			; | DROP ( w -- )   drop the TOS item   | DONE 
2452				if DEBUG_FORTH_WORDS_KEY 
2452					DMARK "DRP" 
2452 f5				push af  
2453 3a 67 24			ld a, (.dmark)  
2456 32 65 ee			ld (debug_mark),a  
2459 3a 68 24			ld a, (.dmark+1)  
245c 32 66 ee			ld (debug_mark+1),a  
245f 3a 69 24			ld a, (.dmark+2)  
2462 32 67 ee			ld (debug_mark+2),a  
2465 18 03			jr .pastdmark  
2467 ..			.dmark: db "DRP"  
246a f1			.pastdmark: pop af  
246b			endm  
# End of macro DMARK
246b					CALLMONITOR 
246b cd 6f ee			call debug_vector  
246e				endm  
# End of macro CALLMONITOR
246e				endif 
246e				FORTH_DSP_POP 
246e cd 4d 1e			call macro_forth_dsp_pop 
2471				endm 
# End of macro FORTH_DSP_POP
2471				NEXTW 
2471 c3 81 1f			jp macro_next 
2474				endm 
# End of macro NEXTW
2474			.DUP2: 
2474			CWHEAD .DROP2 OPCODE_DUP2 "2DUP" 4 WORD_FLAG_CODE 
2474 1c				db WORD_SYS_CORE+OPCODE_DUP2             
2475 b9 24			dw .DROP2            
2477 05				db 4 + 1 
2478 .. 00			db "2DUP",0              
247d				endm 
# End of macro CWHEAD
247d			; | 2DUP ( w1 w2 -- w1 w2 w1 w2 ) Duplicate the top two items on TOS  (Only works for numerics) | DONE 
247d				if DEBUG_FORTH_WORDS_KEY 
247d					DMARK "2DU" 
247d f5				push af  
247e 3a 92 24			ld a, (.dmark)  
2481 32 65 ee			ld (debug_mark),a  
2484 3a 93 24			ld a, (.dmark+1)  
2487 32 66 ee			ld (debug_mark+1),a  
248a 3a 94 24			ld a, (.dmark+2)  
248d 32 67 ee			ld (debug_mark+2),a  
2490 18 03			jr .pastdmark  
2492 ..			.dmark: db "2DU"  
2495 f1			.pastdmark: pop af  
2496			endm  
# End of macro DMARK
2496					CALLMONITOR 
2496 cd 6f ee			call debug_vector  
2499				endm  
# End of macro CALLMONITOR
2499				endif 
2499				FORTH_DSP_VALUEHL 
2499 cd 95 1d			call macro_dsp_valuehl 
249c				endm 
# End of macro FORTH_DSP_VALUEHL
249c e5				push hl      ; 2 
249d			 
249d				FORTH_DSP_POP 
249d cd 4d 1e			call macro_forth_dsp_pop 
24a0				endm 
# End of macro FORTH_DSP_POP
24a0				 
24a0				FORTH_DSP_VALUEHL 
24a0 cd 95 1d			call macro_dsp_valuehl 
24a3				endm 
# End of macro FORTH_DSP_VALUEHL
24a3			;		push hl      ; 1 
24a3			 
24a3				FORTH_DSP_POP 
24a3 cd 4d 1e			call macro_forth_dsp_pop 
24a6				endm 
# End of macro FORTH_DSP_POP
24a6			 
24a6			;		pop hl       ; 1 
24a6 d1				pop de       ; 2 
24a7			 
24a7 cd 90 1b			call forth_push_numhl 
24aa eb				ex de, hl 
24ab cd 90 1b			call forth_push_numhl 
24ae			 
24ae				 
24ae eb				ex de, hl 
24af			 
24af cd 90 1b			call forth_push_numhl 
24b2 eb				ex de, hl 
24b3 cd 90 1b			call forth_push_numhl 
24b6			 
24b6			 
24b6				NEXTW 
24b6 c3 81 1f			jp macro_next 
24b9				endm 
# End of macro NEXTW
24b9			.DROP2: 
24b9			CWHEAD .PICK OPCODE_DROP2 "2DROP" 5 WORD_FLAG_CODE 
24b9 1d				db WORD_SYS_CORE+OPCODE_DROP2             
24ba e8 24			dw .PICK            
24bc 06				db 5 + 1 
24bd .. 00			db "2DROP",0              
24c3				endm 
# End of macro CWHEAD
24c3			; | 2DROP ( w w -- )    Double drop | DONE 
24c3				if DEBUG_FORTH_WORDS_KEY 
24c3					DMARK "2DR" 
24c3 f5				push af  
24c4 3a d8 24			ld a, (.dmark)  
24c7 32 65 ee			ld (debug_mark),a  
24ca 3a d9 24			ld a, (.dmark+1)  
24cd 32 66 ee			ld (debug_mark+1),a  
24d0 3a da 24			ld a, (.dmark+2)  
24d3 32 67 ee			ld (debug_mark+2),a  
24d6 18 03			jr .pastdmark  
24d8 ..			.dmark: db "2DR"  
24db f1			.pastdmark: pop af  
24dc			endm  
# End of macro DMARK
24dc					CALLMONITOR 
24dc cd 6f ee			call debug_vector  
24df				endm  
# End of macro CALLMONITOR
24df				endif 
24df				FORTH_DSP_POP 
24df cd 4d 1e			call macro_forth_dsp_pop 
24e2				endm 
# End of macro FORTH_DSP_POP
24e2				FORTH_DSP_POP 
24e2 cd 4d 1e			call macro_forth_dsp_pop 
24e5				endm 
# End of macro FORTH_DSP_POP
24e5				NEXTW 
24e5 c3 81 1f			jp macro_next 
24e8				endm 
# End of macro NEXTW
24e8			.PICK: 
24e8			CWHEAD .SWAP2 99 "PICK" 4 WORD_FLAG_CODE 
24e8 77				db WORD_SYS_CORE+99             
24e9 27 25			dw .SWAP2            
24eb 05				db 4 + 1 
24ec .. 00			db "PICK",0              
24f1				endm 
# End of macro CWHEAD
24f1			; | PICK ( ux ... u x -- ux ... u n )    Replace x on stack with the item from position x on stack  | TODO 
24f1				if DEBUG_FORTH_WORDS_KEY 
24f1					DMARK "PIK" 
24f1 f5				push af  
24f2 3a 06 25			ld a, (.dmark)  
24f5 32 65 ee			ld (debug_mark),a  
24f8 3a 07 25			ld a, (.dmark+1)  
24fb 32 66 ee			ld (debug_mark+1),a  
24fe 3a 08 25			ld a, (.dmark+2)  
2501 32 67 ee			ld (debug_mark+2),a  
2504 18 03			jr .pastdmark  
2506 ..			.dmark: db "PIK"  
2509 f1			.pastdmark: pop af  
250a			endm  
# End of macro DMARK
250a					CALLMONITOR 
250a cd 6f ee			call debug_vector  
250d				endm  
# End of macro CALLMONITOR
250d				endif 
250d			 
250d				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
250d cd 95 1d			call macro_dsp_valuehl 
2510				endm 
# End of macro FORTH_DSP_VALUEHL
2510				 
2510				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2510 cd 4d 1e			call macro_forth_dsp_pop 
2513				endm 
# End of macro FORTH_DSP_POP
2513			 
2513				; init from TOS 
2513 45				ld b, l 
2514 21 e8 e9			ld hl, cli_data_sp 
2517			.pkl: 
2517 2b				dec hl 
2518 2b				dec hl 
2519 2b				dec hl 
251a			 
251a 10 fb			djnz .pkl 
251c			 
251c				 
251c				; TODO do type check with correct push 
251c			 
251c 23				inc hl 
251d				;call loadwordinhl 
251d 5e				ld e, (hl) 
251e 23				inc hl 
251f 56				ld d, (hl) 
2520 eb				ex de,hl 
2521 cd 90 1b			call forth_push_numhl 
2524			 
2524				NEXTW 
2524 c3 81 1f			jp macro_next 
2527				endm 
# End of macro NEXTW
2527			.SWAP2: 
2527			CWHEAD .AT OPCODE_SWAP2 "2SWAP" 5 WORD_FLAG_CODE 
2527 1e				db WORD_SYS_CORE+OPCODE_SWAP2             
2528 a8 25			dw .AT            
252a 06				db 5 + 1 
252b .. 00			db "2SWAP",0              
2531				endm 
# End of macro CWHEAD
2531			; | 2SWAP ( w1 w2 w3 w4 -- w3 w4 w1 w2 ) Swap top pair of items | TODO 
2531				if DEBUG_FORTH_WORDS_KEY 
2531					DMARK "2SW" 
2531 f5				push af  
2532 3a 46 25			ld a, (.dmark)  
2535 32 65 ee			ld (debug_mark),a  
2538 3a 47 25			ld a, (.dmark+1)  
253b 32 66 ee			ld (debug_mark+1),a  
253e 3a 48 25			ld a, (.dmark+2)  
2541 32 67 ee			ld (debug_mark+2),a  
2544 18 03			jr .pastdmark  
2546 ..			.dmark: db "2SW"  
2549 f1			.pastdmark: pop af  
254a			endm  
# End of macro DMARK
254a					CALLMONITOR 
254a cd 6f ee			call debug_vector  
254d				endm  
# End of macro CALLMONITOR
254d				endif 
254d			; TODO Use os stack swap memory 
254d			 
254d				FORTH_DSP_PTR 0     ; TOS    w4 
254d 2a e8 e9			ld hl,(cli_data_sp) 
2550 11 00 00			ld de, 0 * 3 
2553 ed 52			sbc hl, de 
2555				endm 
# End of macro FORTH_DSP_PTR
2555 cd cd 1e			call hltostack1 
2558			  
2558				FORTH_DSP_PTR 1     ; TOS    w3 
2558 2a e8 e9			ld hl,(cli_data_sp) 
255b 11 03 00			ld de, 1 * 3 
255e ed 52			sbc hl, de 
2560				endm 
# End of macro FORTH_DSP_PTR
2560 cd d3 1e			call hltostack2 
2563			 
2563			 
2563			 
2563				FORTH_DSP_PTR 2     ; TOS    w2 
2563 2a e8 e9			ld hl,(cli_data_sp) 
2566 11 06 00			ld de, 2 * 3 
2569 ed 52			sbc hl, de 
256b				endm 
# End of macro FORTH_DSP_PTR
256b cd d9 1e			call hltostack3 
256e			 
256e				FORTH_DSP_PTR 3     ; TOS   w1 
256e 2a e8 e9			ld hl,(cli_data_sp) 
2571 11 09 00			ld de, 3 * 3 
2574 ed 52			sbc hl, de 
2576				endm 
# End of macro FORTH_DSP_PTR
2576 cd df 1e			call hltostack4 
2579			 
2579			 
2579			 
2579			 
2579				FORTH_DSP_PTR 0     ; TOS 
2579 2a e8 e9			ld hl,(cli_data_sp) 
257c 11 00 00			ld de, 0 * 3 
257f ed 52			sbc hl, de 
2581				endm 
# End of macro FORTH_DSP_PTR
2581 cd f1 1e			call hlfromstack3 
2584			 
2584				FORTH_DSP_PTR 1     ; TOS 
2584 2a e8 e9			ld hl,(cli_data_sp) 
2587 11 03 00			ld de, 1 * 3 
258a ed 52			sbc hl, de 
258c				endm 
# End of macro FORTH_DSP_PTR
258c cd f7 1e			call hlfromstack4 
258f			 
258f			 
258f			 
258f				FORTH_DSP_PTR 2     ; TOS 
258f 2a e8 e9			ld hl,(cli_data_sp) 
2592 11 06 00			ld de, 2 * 3 
2595 ed 52			sbc hl, de 
2597				endm 
# End of macro FORTH_DSP_PTR
2597 cd e5 1e			call hlfromstack1 
259a			 
259a				FORTH_DSP_PTR 3     ; TOS 
259a 2a e8 e9			ld hl,(cli_data_sp) 
259d 11 09 00			ld de, 3 * 3 
25a0 ed 52			sbc hl, de 
25a2				endm 
# End of macro FORTH_DSP_PTR
25a2 cd eb 1e			call hlfromstack2 
25a5			 
25a5				NEXTW 
25a5 c3 81 1f			jp macro_next 
25a8				endm 
# End of macro NEXTW
25a8			.AT: 
25a8			CWHEAD .CAT OPCODE_AT "@" 1 WORD_FLAG_CODE 
25a8 1f				db WORD_SYS_CORE+OPCODE_AT             
25a9 da 25			dw .CAT            
25ab 02				db 1 + 1 
25ac .. 00			db "@",0              
25ae				endm 
# End of macro CWHEAD
25ae			; | @ ( w -- ) Push onto TOS byte stored at address   | DONE 
25ae			 
25ae				if DEBUG_FORTH_WORDS_KEY 
25ae					DMARK "AT." 
25ae f5				push af  
25af 3a c3 25			ld a, (.dmark)  
25b2 32 65 ee			ld (debug_mark),a  
25b5 3a c4 25			ld a, (.dmark+1)  
25b8 32 66 ee			ld (debug_mark+1),a  
25bb 3a c5 25			ld a, (.dmark+2)  
25be 32 67 ee			ld (debug_mark+2),a  
25c1 18 03			jr .pastdmark  
25c3 ..			.dmark: db "AT."  
25c6 f1			.pastdmark: pop af  
25c7			endm  
# End of macro DMARK
25c7					CALLMONITOR 
25c7 cd 6f ee			call debug_vector  
25ca				endm  
# End of macro CALLMONITOR
25ca				endif 
25ca			.getbyteat:	 
25ca				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
25ca cd 95 1d			call macro_dsp_valuehl 
25cd				endm 
# End of macro FORTH_DSP_VALUEHL
25cd				 
25cd			;		push hl 
25cd			 
25cd				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
25cd cd 4d 1e			call macro_forth_dsp_pop 
25d0				endm 
# End of macro FORTH_DSP_POP
25d0			 
25d0			;		pop hl 
25d0			 
25d0 7e				ld a, (hl) 
25d1			 
25d1 6f				ld l, a 
25d2 26 00			ld h, 0 
25d4 cd 90 1b			call forth_push_numhl 
25d7			 
25d7				NEXTW 
25d7 c3 81 1f			jp macro_next 
25da				endm 
# End of macro NEXTW
25da			.CAT: 
25da			CWHEAD .BANG OPCODE_CAT "C@" 2 WORD_FLAG_CODE 
25da 20				db WORD_SYS_CORE+OPCODE_CAT             
25db 03 26			dw .BANG            
25dd 03				db 2 + 1 
25de .. 00			db "C@",0              
25e1				endm 
# End of macro CWHEAD
25e1			; | C@  ( w -- ) Push onto TOS byte stored at address   | DONE 
25e1				if DEBUG_FORTH_WORDS_KEY 
25e1					DMARK "CAA" 
25e1 f5				push af  
25e2 3a f6 25			ld a, (.dmark)  
25e5 32 65 ee			ld (debug_mark),a  
25e8 3a f7 25			ld a, (.dmark+1)  
25eb 32 66 ee			ld (debug_mark+1),a  
25ee 3a f8 25			ld a, (.dmark+2)  
25f1 32 67 ee			ld (debug_mark+2),a  
25f4 18 03			jr .pastdmark  
25f6 ..			.dmark: db "CAA"  
25f9 f1			.pastdmark: pop af  
25fa			endm  
# End of macro DMARK
25fa					CALLMONITOR 
25fa cd 6f ee			call debug_vector  
25fd				endm  
# End of macro CALLMONITOR
25fd				endif 
25fd c3 ca 25			jp .getbyteat 
2600				NEXTW 
2600 c3 81 1f			jp macro_next 
2603				endm 
# End of macro NEXTW
2603			.BANG: 
2603			CWHEAD .CBANG OPCODE_BANG "!" 1 WORD_FLAG_CODE 
2603 21				db WORD_SYS_CORE+OPCODE_BANG             
2604 39 26			dw .CBANG            
2606 02				db 1 + 1 
2607 .. 00			db "!",0              
2609				endm 
# End of macro CWHEAD
2609			; | ! ( x w -- ) Store x at address w      | DONE 
2609				if DEBUG_FORTH_WORDS_KEY 
2609					DMARK "BNG" 
2609 f5				push af  
260a 3a 1e 26			ld a, (.dmark)  
260d 32 65 ee			ld (debug_mark),a  
2610 3a 1f 26			ld a, (.dmark+1)  
2613 32 66 ee			ld (debug_mark+1),a  
2616 3a 20 26			ld a, (.dmark+2)  
2619 32 67 ee			ld (debug_mark+2),a  
261c 18 03			jr .pastdmark  
261e ..			.dmark: db "BNG"  
2621 f1			.pastdmark: pop af  
2622			endm  
# End of macro DMARK
2622					CALLMONITOR 
2622 cd 6f ee			call debug_vector  
2625				endm  
# End of macro CALLMONITOR
2625				endif 
2625			 
2625			.storebyteat:		 
2625				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2625 cd 95 1d			call macro_dsp_valuehl 
2628				endm 
# End of macro FORTH_DSP_VALUEHL
2628				 
2628 e5				push hl 
2629			 
2629				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2629 cd 4d 1e			call macro_forth_dsp_pop 
262c				endm 
# End of macro FORTH_DSP_POP
262c			 
262c				; get byte to poke 
262c			 
262c				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
262c cd 95 1d			call macro_dsp_valuehl 
262f				endm 
# End of macro FORTH_DSP_VALUEHL
262f e5				push hl 
2630			 
2630			 
2630				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2630 cd 4d 1e			call macro_forth_dsp_pop 
2633				endm 
# End of macro FORTH_DSP_POP
2633			 
2633			 
2633 d1				pop de 
2634 e1				pop hl 
2635			 
2635 73				ld (hl),e 
2636			 
2636			 
2636				NEXTW 
2636 c3 81 1f			jp macro_next 
2639				endm 
# End of macro NEXTW
2639			.CBANG: 
2639			CWHEAD .SCALL OPCODE_CBANG "C!" 2 WORD_FLAG_CODE 
2639 22				db WORD_SYS_CORE+OPCODE_CBANG             
263a 62 26			dw .SCALL            
263c 03				db 2 + 1 
263d .. 00			db "C!",0              
2640				endm 
# End of macro CWHEAD
2640			; | C!  ( x w -- ) Store x at address w  | DONE 
2640				if DEBUG_FORTH_WORDS_KEY 
2640					DMARK "CBA" 
2640 f5				push af  
2641 3a 55 26			ld a, (.dmark)  
2644 32 65 ee			ld (debug_mark),a  
2647 3a 56 26			ld a, (.dmark+1)  
264a 32 66 ee			ld (debug_mark+1),a  
264d 3a 57 26			ld a, (.dmark+2)  
2650 32 67 ee			ld (debug_mark+2),a  
2653 18 03			jr .pastdmark  
2655 ..			.dmark: db "CBA"  
2658 f1			.pastdmark: pop af  
2659			endm  
# End of macro DMARK
2659					CALLMONITOR 
2659 cd 6f ee			call debug_vector  
265c				endm  
# End of macro CALLMONITOR
265c				endif 
265c c3 25 26			jp .storebyteat 
265f				NEXTW 
265f c3 81 1f			jp macro_next 
2662				endm 
# End of macro NEXTW
2662			.SCALL: 
2662			CWHEAD .DEPTH OPCODE_SCALL "CALL" 4 WORD_FLAG_CODE 
2662 23				db WORD_SYS_CORE+OPCODE_SCALL             
2663 96 26			dw .DEPTH            
2665 05				db 4 + 1 
2666 .. 00			db "CALL",0              
266b				endm 
# End of macro CWHEAD
266b			; | CALL ( w -- w  ) machine code call to address w  push the result of hl to stack | DONE 
266b				if DEBUG_FORTH_WORDS_KEY 
266b					DMARK "CLL" 
266b f5				push af  
266c 3a 80 26			ld a, (.dmark)  
266f 32 65 ee			ld (debug_mark),a  
2672 3a 81 26			ld a, (.dmark+1)  
2675 32 66 ee			ld (debug_mark+1),a  
2678 3a 82 26			ld a, (.dmark+2)  
267b 32 67 ee			ld (debug_mark+2),a  
267e 18 03			jr .pastdmark  
2680 ..			.dmark: db "CLL"  
2683 f1			.pastdmark: pop af  
2684			endm  
# End of macro DMARK
2684					CALLMONITOR 
2684 cd 6f ee			call debug_vector  
2687				endm  
# End of macro CALLMONITOR
2687				endif 
2687			 
2687				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2687 cd 95 1d			call macro_dsp_valuehl 
268a				endm 
# End of macro FORTH_DSP_VALUEHL
268a			 
268a			;		push hl 
268a			 
268a				; destroy value TOS 
268a			 
268a				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
268a cd 4d 1e			call macro_forth_dsp_pop 
268d				endm 
# End of macro FORTH_DSP_POP
268d			 
268d					 
268d			;		pop hl 
268d			 
268d				; how to do a call with hl???? save SP? 
268d cd 25 1f			call forth_call_hl 
2690			 
2690			 
2690				; TODO push value back onto stack for another op etc 
2690			 
2690 cd 90 1b			call forth_push_numhl 
2693				NEXTW 
2693 c3 81 1f			jp macro_next 
2696				endm 
# End of macro NEXTW
2696			.DEPTH: 
2696			CWHEAD .OVER OPCODE_DEPTH "DEPTH" 5 WORD_FLAG_CODE 
2696 24				db WORD_SYS_CORE+OPCODE_DEPTH             
2697 d3 26			dw .OVER            
2699 06				db 5 + 1 
269a .. 00			db "DEPTH",0              
26a0				endm 
# End of macro CWHEAD
26a0			; | DEPTH ( -- u ) Push count of stack | DONE 
26a0				; take current TOS and remove from base value div by two to get count 
26a0				if DEBUG_FORTH_WORDS_KEY 
26a0					DMARK "DEP" 
26a0 f5				push af  
26a1 3a b5 26			ld a, (.dmark)  
26a4 32 65 ee			ld (debug_mark),a  
26a7 3a b6 26			ld a, (.dmark+1)  
26aa 32 66 ee			ld (debug_mark+1),a  
26ad 3a b7 26			ld a, (.dmark+2)  
26b0 32 67 ee			ld (debug_mark+2),a  
26b3 18 03			jr .pastdmark  
26b5 ..			.dmark: db "DEP"  
26b8 f1			.pastdmark: pop af  
26b9			endm  
# End of macro DMARK
26b9					CALLMONITOR 
26b9 cd 6f ee			call debug_vector  
26bc				endm  
# End of macro CALLMONITOR
26bc				endif 
26bc			 
26bc			 
26bc 2a e8 e9		ld hl, (cli_data_sp) 
26bf 11 22 e8		ld de, cli_data_stack 
26c2 ed 52		sbc hl,de 
26c4			 
26c4			; div by size of stack item 
26c4			 
26c4 5d			ld e,l 
26c5 0e 03		ld c, 3 
26c7 cd 85 0d		call Div8 
26ca			 
26ca 6f			ld l,a 
26cb 26 00		ld h,0 
26cd			 
26cd			;srl h 
26cd			;rr l 
26cd			 
26cd cd 90 1b			call forth_push_numhl 
26d0				NEXTW 
26d0 c3 81 1f			jp macro_next 
26d3				endm 
# End of macro NEXTW
26d3			.OVER: 
26d3			CWHEAD .PAUSE 46 "OVER" 4 WORD_FLAG_CODE 
26d3 42				db WORD_SYS_CORE+46             
26d4 1a 27			dw .PAUSE            
26d6 05				db 4 + 1 
26d7 .. 00			db "OVER",0              
26dc				endm 
# End of macro CWHEAD
26dc			; | OVER ( n1 n2 -- n1 n2 n1 )  Copy one below TOS onto TOS | TOFIX 
26dc				if DEBUG_FORTH_WORDS_KEY 
26dc					DMARK "OVR" 
26dc f5				push af  
26dd 3a f1 26			ld a, (.dmark)  
26e0 32 65 ee			ld (debug_mark),a  
26e3 3a f2 26			ld a, (.dmark+1)  
26e6 32 66 ee			ld (debug_mark+1),a  
26e9 3a f3 26			ld a, (.dmark+2)  
26ec 32 67 ee			ld (debug_mark+2),a  
26ef 18 03			jr .pastdmark  
26f1 ..			.dmark: db "OVR"  
26f4 f1			.pastdmark: pop af  
26f5			endm  
# End of macro DMARK
26f5					CALLMONITOR 
26f5 cd 6f ee			call debug_vector  
26f8				endm  
# End of macro CALLMONITOR
26f8				endif 
26f8			 
26f8			; TODO Use os stack swap memory 
26f8			 
26f8				; work out what type we are looking at 
26f8			 
26f8				FORTH_DSP_PTR 1 
26f8 2a e8 e9			ld hl,(cli_data_sp) 
26fb 11 03 00			ld de, 1 * 3 
26fe ed 52			sbc hl, de 
2700				endm 
# End of macro FORTH_DSP_PTR
2700			 
2700 7e				ld a, (hl) 
2701				 
2701 f5				push af 
2702				; whatever the type lets get the pointer or word 
2702 23				inc hl 
2703			;; 
2703			 
2703				; type check now to decide on how to push  
2703			 
2703 cd 03 1f			call loadwordinhl 
2706 f1				pop af 
2707 fe 01			cp DS_TYPE_STR 
2709 28 06			jr z, .ovstr 
270b			 
270b				; we have a numeric so load the word and push 
270b			;	ld e, (hl) 
270b			;	inc hl 
270b			;	ld d, (hl) 
270b			;	ex de, hl 
270b cd 90 1b			call forth_push_numhl 
270e				NEXTW 
270e c3 81 1f			jp macro_next 
2711				endm 
# End of macro NEXTW
2711			 
2711			.ovstr: 
2711				; ok, a string so get the pointer and push as a string 
2711			 
2711			;	call loadwordinhl 
2711 cd fe 1b			call forth_push_str 
2714				NEXTW 
2714 c3 81 1f			jp macro_next 
2717				endm 
# End of macro NEXTW
2717			 
2717			;	FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2717			;	push hl    ; n2 
2717			;	FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2717			; 
2717			;	FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2717			;	push hl    ; n1 
2717			;	FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2717			; 
2717			;	pop de     ; n1 
2717			;	pop hl     ; n2 
2717			; 
2717			;	push de 
2717			;	push hl 
2717			;	push de 
2717			 
2717				; push back  
2717			 
2717			;	pop hl 
2717			;	call forth_push_numhl 
2717			;	pop hl 
2717			;	call forth_push_numhl 
2717			;	pop hl 
2717			;	call forth_push_numhl 
2717				NEXTW 
2717 c3 81 1f			jp macro_next 
271a				endm 
# End of macro NEXTW
271a			 
271a			.PAUSE: 
271a			CWHEAD .PAUSES 47 "PAUSEMS" 7 WORD_FLAG_CODE 
271a 43				db WORD_SYS_CORE+47             
271b 4f 27			dw .PAUSES            
271d 08				db 7 + 1 
271e .. 00			db "PAUSEMS",0              
2726				endm 
# End of macro CWHEAD
2726			; | PAUSEMS ( n -- )  Pause for n millisconds | DONE 
2726				if DEBUG_FORTH_WORDS_KEY 
2726					DMARK "PMS" 
2726 f5				push af  
2727 3a 3b 27			ld a, (.dmark)  
272a 32 65 ee			ld (debug_mark),a  
272d 3a 3c 27			ld a, (.dmark+1)  
2730 32 66 ee			ld (debug_mark+1),a  
2733 3a 3d 27			ld a, (.dmark+2)  
2736 32 67 ee			ld (debug_mark+2),a  
2739 18 03			jr .pastdmark  
273b ..			.dmark: db "PMS"  
273e f1			.pastdmark: pop af  
273f			endm  
# End of macro DMARK
273f					CALLMONITOR 
273f cd 6f ee			call debug_vector  
2742				endm  
# End of macro CALLMONITOR
2742				endif 
2742				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2742 cd 95 1d			call macro_dsp_valuehl 
2745				endm 
# End of macro FORTH_DSP_VALUEHL
2745			;		push hl    ; n2 
2745				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2745 cd 4d 1e			call macro_forth_dsp_pop 
2748				endm 
# End of macro FORTH_DSP_POP
2748			;		pop hl 
2748			 
2748 7d				ld a, l 
2749 cd e5 0a			call aDelayInMS 
274c			       NEXTW 
274c c3 81 1f			jp macro_next 
274f				endm 
# End of macro NEXTW
274f			.PAUSES:  
274f			CWHEAD .ROT 48 "PAUSE" 5 WORD_FLAG_CODE 
274f 44				db WORD_SYS_CORE+48             
2750 be 27			dw .ROT            
2752 06				db 5 + 1 
2753 .. 00			db "PAUSE",0              
2759				endm 
# End of macro CWHEAD
2759			; | PAUSE ( n -- )  Pause for n seconds | DONE 
2759				if DEBUG_FORTH_WORDS_KEY 
2759					DMARK "PAU" 
2759 f5				push af  
275a 3a 6e 27			ld a, (.dmark)  
275d 32 65 ee			ld (debug_mark),a  
2760 3a 6f 27			ld a, (.dmark+1)  
2763 32 66 ee			ld (debug_mark+1),a  
2766 3a 70 27			ld a, (.dmark+2)  
2769 32 67 ee			ld (debug_mark+2),a  
276c 18 03			jr .pastdmark  
276e ..			.dmark: db "PAU"  
2771 f1			.pastdmark: pop af  
2772			endm  
# End of macro DMARK
2772					CALLMONITOR 
2772 cd 6f ee			call debug_vector  
2775				endm  
# End of macro CALLMONITOR
2775				endif 
2775				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
2775 cd 95 1d			call macro_dsp_valuehl 
2778				endm 
# End of macro FORTH_DSP_VALUEHL
2778			;		push hl    ; n2 
2778				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
2778 cd 4d 1e			call macro_forth_dsp_pop 
277b				endm 
# End of macro FORTH_DSP_POP
277b			;		pop hl 
277b 45				ld b, l 
277c				if DEBUG_FORTH_WORDS 
277c					DMARK "PAU" 
277c f5				push af  
277d 3a 91 27			ld a, (.dmark)  
2780 32 65 ee			ld (debug_mark),a  
2783 3a 92 27			ld a, (.dmark+1)  
2786 32 66 ee			ld (debug_mark+1),a  
2789 3a 93 27			ld a, (.dmark+2)  
278c 32 67 ee			ld (debug_mark+2),a  
278f 18 03			jr .pastdmark  
2791 ..			.dmark: db "PAU"  
2794 f1			.pastdmark: pop af  
2795			endm  
# End of macro DMARK
2795					CALLMONITOR 
2795 cd 6f ee			call debug_vector  
2798				endm  
# End of macro CALLMONITOR
2798				endif 
2798 c5			.pauses1:	push bc 
2799 cd 00 0b			call delay1s 
279c c1				pop bc 
279d				if DEBUG_FORTH_WORDS 
279d					DMARK "PA1" 
279d f5				push af  
279e 3a b2 27			ld a, (.dmark)  
27a1 32 65 ee			ld (debug_mark),a  
27a4 3a b3 27			ld a, (.dmark+1)  
27a7 32 66 ee			ld (debug_mark+1),a  
27aa 3a b4 27			ld a, (.dmark+2)  
27ad 32 67 ee			ld (debug_mark+2),a  
27b0 18 03			jr .pastdmark  
27b2 ..			.dmark: db "PA1"  
27b5 f1			.pastdmark: pop af  
27b6			endm  
# End of macro DMARK
27b6					CALLMONITOR 
27b6 cd 6f ee			call debug_vector  
27b9				endm  
# End of macro CALLMONITOR
27b9				endif 
27b9 10 dd			djnz .pauses1 
27bb			 
27bb			       NEXTW 
27bb c3 81 1f			jp macro_next 
27be				endm 
# End of macro NEXTW
27be			.ROT: 
27be			CWHEAD .UWORDS 49 "ROT" 3 WORD_FLAG_CODE 
27be 45				db WORD_SYS_CORE+49             
27bf 27 28			dw .UWORDS            
27c1 04				db 3 + 1 
27c2 .. 00			db "ROT",0              
27c6				endm 
# End of macro CWHEAD
27c6			; | ROT ( u1 u2 u3 -- u2 u3 u1 ) Rotate top three items on stack | TOFIX 
27c6				if DEBUG_FORTH_WORDS_KEY 
27c6					DMARK "ROT" 
27c6 f5				push af  
27c7 3a db 27			ld a, (.dmark)  
27ca 32 65 ee			ld (debug_mark),a  
27cd 3a dc 27			ld a, (.dmark+1)  
27d0 32 66 ee			ld (debug_mark+1),a  
27d3 3a dd 27			ld a, (.dmark+2)  
27d6 32 67 ee			ld (debug_mark+2),a  
27d9 18 03			jr .pastdmark  
27db ..			.dmark: db "ROT"  
27de f1			.pastdmark: pop af  
27df			endm  
# End of macro DMARK
27df					CALLMONITOR 
27df cd 6f ee			call debug_vector  
27e2				endm  
# End of macro CALLMONITOR
27e2				endif 
27e2			 
27e2			; DONE Use os stack swap memory 
27e2			 
27e2				FORTH_DSP_PTR 0     ; u3 
27e2 2a e8 e9			ld hl,(cli_data_sp) 
27e5 11 00 00			ld de, 0 * 3 
27e8 ed 52			sbc hl, de 
27ea				endm 
# End of macro FORTH_DSP_PTR
27ea cd cd 1e			call hltostack1     
27ed			  
27ed				FORTH_DSP_PTR 1     ; u2 
27ed 2a e8 e9			ld hl,(cli_data_sp) 
27f0 11 03 00			ld de, 1 * 3 
27f3 ed 52			sbc hl, de 
27f5				endm 
# End of macro FORTH_DSP_PTR
27f5 cd d3 1e			call hltostack2      
27f8			 
27f8				FORTH_DSP_PTR 2     ; u1 
27f8 2a e8 e9			ld hl,(cli_data_sp) 
27fb 11 06 00			ld de, 2 * 3 
27fe ed 52			sbc hl, de 
2800				endm 
# End of macro FORTH_DSP_PTR
2800 cd d9 1e			call hltostack3 
2803			 
2803			 
2803				FORTH_DSP_PTR 0     ;  
2803 2a e8 e9			ld hl,(cli_data_sp) 
2806 11 00 00			ld de, 0 * 3 
2809 ed 52			sbc hl, de 
280b				endm 
# End of macro FORTH_DSP_PTR
280b cd f1 1e			call hlfromstack3 
280e			 
280e				FORTH_DSP_PTR 1     ; TOS 
280e 2a e8 e9			ld hl,(cli_data_sp) 
2811 11 03 00			ld de, 1 * 3 
2814 ed 52			sbc hl, de 
2816				endm 
# End of macro FORTH_DSP_PTR
2816 cd e5 1e			call hlfromstack1 
2819			 
2819				FORTH_DSP_PTR 2     ; TOS 
2819 2a e8 e9			ld hl,(cli_data_sp) 
281c 11 06 00			ld de, 2 * 3 
281f ed 52			sbc hl, de 
2821				endm 
# End of macro FORTH_DSP_PTR
2821 cd eb 1e			call hlfromstack2 
2824			 
2824			 
2824			;	FORTH_DSP_VALUEHL 
2824			;	push hl    ; u3  
2824			; 
2824			;	FORTH_DSP_POP 
2824			; 
2824			;	FORTH_DSP_VALUEHL 
2824			;	push hl     ; u2 
2824			; 
2824			;	FORTH_DSP_POP 
2824			; 
2824			;	FORTH_DSP_VALUEHL 
2824			;	push hl     ; u1 
2824			; 
2824			;	FORTH_DSP_POP 
2824			; 
2824			;	pop bc      ; u1 
2824			;	pop hl      ; u2 
2824			;	pop de      ; u3 
2824			; 
2824			; 
2824			;	push bc 
2824			;	push de 
2824			;	push hl 
2824			; 
2824			; 
2824			;	pop hl 
2824			;	call forth_push_numhl 
2824			; 
2824			;	pop hl 
2824			;	call forth_push_numhl 
2824			; 
2824			;	pop hl 
2824			;	call forth_push_numhl 
2824				 
2824			 
2824			 
2824			 
2824			 
2824			 
2824			       NEXTW 
2824 c3 81 1f			jp macro_next 
2827				endm 
# End of macro NEXTW
2827			 
2827			.UWORDS: 
2827			CWHEAD .BP 60 "UWORDS" 6 WORD_FLAG_CODE 
2827 50				db WORD_SYS_CORE+60             
2828 e9 28			dw .BP            
282a 07				db 6 + 1 
282b .. 00			db "UWORDS",0              
2832				endm 
# End of macro CWHEAD
2832			; | UWORDS (  -- s1 ... sn u )   List user word dict | DONE 
2832			; | | After use the TOS will have a count of the number of user words that have been pushed to stack. 
2832			; | | Following the count are the individual words. 
2832			; | | 
2832			; | | e.g. UWORDS 
2832			; | | BOX DIRLIST 2 
2832			; | |  
2832			; | | Can be used to save the words to storage via: 
2832			; | | UWORDS $01 DO $01 APPEND LOOP 
2832			if DEBUG_FORTH_WORDS_KEY 
2832				DMARK "UWR" 
2832 f5				push af  
2833 3a 47 28			ld a, (.dmark)  
2836 32 65 ee			ld (debug_mark),a  
2839 3a 48 28			ld a, (.dmark+1)  
283c 32 66 ee			ld (debug_mark+1),a  
283f 3a 49 28			ld a, (.dmark+2)  
2842 32 67 ee			ld (debug_mark+2),a  
2845 18 03			jr .pastdmark  
2847 ..			.dmark: db "UWR"  
284a f1			.pastdmark: pop af  
284b			endm  
# End of macro DMARK
284b				CALLMONITOR 
284b cd 6f ee			call debug_vector  
284e				endm  
# End of macro CALLMONITOR
284e			endif 
284e 21 bf 61			ld hl, baseram 
2851				;ld hl, baseusermem 
2851 01 00 00			ld bc, 0    ; start a counter 
2854			 
2854			; skip dict stub 
2854			 
2854 cd be 20			call forth_tok_next 
2857			 
2857			 
2857			; while we have words to look for 
2857			 
2857 7e			.douscan:	ld a, (hl)      
2858			if DEBUG_FORTH_WORDS 
2858				DMARK "UWs" 
2858 f5				push af  
2859 3a 6d 28			ld a, (.dmark)  
285c 32 65 ee			ld (debug_mark),a  
285f 3a 6e 28			ld a, (.dmark+1)  
2862 32 66 ee			ld (debug_mark+1),a  
2865 3a 6f 28			ld a, (.dmark+2)  
2868 32 67 ee			ld (debug_mark+2),a  
286b 18 03			jr .pastdmark  
286d ..			.dmark: db "UWs"  
2870 f1			.pastdmark: pop af  
2871			endm  
# End of macro DMARK
2871				CALLMONITOR 
2871 cd 6f ee			call debug_vector  
2874				endm  
# End of macro CALLMONITOR
2874			endif 
2874 fe 00			cp WORD_SYS_END 
2876 28 4d			jr z, .udone 
2878 fe 01			cp WORD_SYS_UWORD 
287a 20 44			jr nz, .nuword 
287c			 
287c			if DEBUG_FORTH_WORDS 
287c				DMARK "UWu" 
287c f5				push af  
287d 3a 91 28			ld a, (.dmark)  
2880 32 65 ee			ld (debug_mark),a  
2883 3a 92 28			ld a, (.dmark+1)  
2886 32 66 ee			ld (debug_mark+1),a  
2889 3a 93 28			ld a, (.dmark+2)  
288c 32 67 ee			ld (debug_mark+2),a  
288f 18 03			jr .pastdmark  
2891 ..			.dmark: db "UWu"  
2894 f1			.pastdmark: pop af  
2895			endm  
# End of macro DMARK
2895				CALLMONITOR 
2895 cd 6f ee			call debug_vector  
2898				endm  
# End of macro CALLMONITOR
2898			endif 
2898				; we have a uword so push its name to the stack 
2898			 
2898 e5				push hl  ; save so we can move to next dict block 
2899			 
2899				; skip opcode 
2899 23				inc hl  
289a				; skip next ptr 
289a 23				inc hl  
289b 23				inc hl 
289c				; skip len 
289c 23				inc hl 
289d			if DEBUG_FORTH_WORDS 
289d				DMARK "UWt" 
289d f5				push af  
289e 3a b2 28			ld a, (.dmark)  
28a1 32 65 ee			ld (debug_mark),a  
28a4 3a b3 28			ld a, (.dmark+1)  
28a7 32 66 ee			ld (debug_mark+1),a  
28aa 3a b4 28			ld a, (.dmark+2)  
28ad 32 67 ee			ld (debug_mark+2),a  
28b0 18 03			jr .pastdmark  
28b2 ..			.dmark: db "UWt"  
28b5 f1			.pastdmark: pop af  
28b6			endm  
# End of macro DMARK
28b6				CALLMONITOR 
28b6 cd 6f ee			call debug_vector  
28b9				endm  
# End of macro CALLMONITOR
28b9			endif 
28b9 03				inc bc 
28ba			 
28ba c5				push bc 
28bb cd fe 1b			call forth_push_str 
28be c1				pop bc 
28bf			 
28bf e1				pop hl 	 
28c0			 
28c0 cd be 20		.nuword:	call forth_tok_next 
28c3 18 92			jr .douscan  
28c5			 
28c5			.udone:		 ; push count of uwords found 
28c5 c5				push bc 
28c6 e1				pop hl 
28c7			 
28c7			if DEBUG_FORTH_WORDS 
28c7				DMARK "UWc" 
28c7 f5				push af  
28c8 3a dc 28			ld a, (.dmark)  
28cb 32 65 ee			ld (debug_mark),a  
28ce 3a dd 28			ld a, (.dmark+1)  
28d1 32 66 ee			ld (debug_mark+1),a  
28d4 3a de 28			ld a, (.dmark+2)  
28d7 32 67 ee			ld (debug_mark+2),a  
28da 18 03			jr .pastdmark  
28dc ..			.dmark: db "UWc"  
28df f1			.pastdmark: pop af  
28e0			endm  
# End of macro DMARK
28e0				CALLMONITOR 
28e0 cd 6f ee			call debug_vector  
28e3				endm  
# End of macro CALLMONITOR
28e3			endif 
28e3 cd 90 1b			call forth_push_numhl 
28e6			 
28e6			 
28e6			       NEXTW 
28e6 c3 81 1f			jp macro_next 
28e9				endm 
# End of macro NEXTW
28e9			 
28e9			.BP: 
28e9			CWHEAD .MONITOR 64 "BP" 2 WORD_FLAG_CODE 
28e9 54				db WORD_SYS_CORE+64             
28ea 23 29			dw .MONITOR            
28ec 03				db 2 + 1 
28ed .. 00			db "BP",0              
28f0				endm 
# End of macro CWHEAD
28f0			; | BP ( u1 -- ) Enable or disable break point monitoring | DONE 
28f0			; | | $00 Will enable the break points within specific code paths 
28f0			; | | $01 Will disable break points 
28f0			; | |  
28f0			; | | By default break points are off. Either the above can be used to enable them 
28f0			; | | or if a key is held down during start up the spashscreen will appear to freeze 
28f0			; | | and on release of the pressed key the CONFIG menu will be displayed where you 
28f0			; | | can disable break points. Exiting will then continue boot process. 
28f0				; get byte count 
28f0				if DEBUG_FORTH_WORDS_KEY 
28f0					DMARK "BP." 
28f0 f5				push af  
28f1 3a 05 29			ld a, (.dmark)  
28f4 32 65 ee			ld (debug_mark),a  
28f7 3a 06 29			ld a, (.dmark+1)  
28fa 32 66 ee			ld (debug_mark+1),a  
28fd 3a 07 29			ld a, (.dmark+2)  
2900 32 67 ee			ld (debug_mark+2),a  
2903 18 03			jr .pastdmark  
2905 ..			.dmark: db "BP."  
2908 f1			.pastdmark: pop af  
2909			endm  
# End of macro DMARK
2909					CALLMONITOR 
2909 cd 6f ee			call debug_vector  
290c				endm  
# End of macro CALLMONITOR
290c				endif 
290c			 
290c				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
290c cd 95 1d			call macro_dsp_valuehl 
290f				endm 
# End of macro FORTH_DSP_VALUEHL
290f			 
290f			;		push hl 
290f			 
290f				; destroy value TOS 
290f			 
290f				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
290f cd 4d 1e			call macro_forth_dsp_pop 
2912				endm 
# End of macro FORTH_DSP_POP
2912			 
2912			;		pop hl 
2912			 
2912 3e 00			ld a,0 
2914 bd				cp l 
2915 28 06			jr z, .bpset 
2917			;		ld a, '*' 
2917 cd 0b 15			call bp_off 
291a				NEXTW 
291a c3 81 1f			jp macro_next 
291d				endm 
# End of macro NEXTW
291d			 
291d			.bpset:	 
291d				;	ld (os_view_disable), a 
291d cd ff 14			call bp_on 
2920			 
2920			 
2920				NEXTW 
2920 c3 81 1f			jp macro_next 
2923				endm 
# End of macro NEXTW
2923			 
2923			 
2923			.MONITOR: 
2923			CWHEAD .MALLOC 65 "MONITOR" 7 WORD_FLAG_CODE 
2923 55				db WORD_SYS_CORE+65             
2924 54 29			dw .MALLOC            
2926 08				db 7 + 1 
2927 .. 00			db "MONITOR",0              
292f				endm 
# End of macro CWHEAD
292f			; | MONITOR ( -- ) Display system breakpoint/monitor | DONE 
292f			; | | At start the current various registers will be displayed with contents. 
292f			; | | Top right corner will show the most recent debug marker seen. 
292f			; | | The bottom of the screen will also show the values of the data stack pointer (DSP) 
292f			; | | and the return stack pointer (RSP). 
292f			; | | Pressing: 
292f			; | |    1 - Initial screen 
292f			; | |    2 - Display a data dump of HL 
292f			; | |    3 - Display a data dump of DE 
292f			; | |    4 - Display a data dump of BC 
292f			; | |    5 - Display a data dump of HL 
292f			; | |    6 - Display a data dump of DSP 
292f			; | |    7 - Display a data dump of RSP 
292f			; | |    8 - Display a data dump of what is at DSP 
292f			; | |    9 - Display a data dump of what is at RSP 
292f			; | |    0 - Exit monitor and continue running. This will also enable break points 
292f			; | |    * - Disable break points 
292f			; | |    # - Enter traditional monitor mode 
292f			; | | 
292f			; | | Monitor Mode 
292f			; | | ------------ 
292f			; | | A prompt of '>' will be shown for various commands: 
292f			; | |    D xxxx - Display a data dump starting from hex address xxxx 
292f			; | |    C - Continue display a data dump from the last set address 
292f			; | |    M xxxx - Set start of memory edit at address xx 
292f			; | |    U xx - Poke the hex byte xx into the address set by M and increment the address to the next location 
292f			; | |    G xxxx - Exec code at specific address 
292f			; | |    Q - Return to previous 
292f				if DEBUG_FORTH_WORDS_KEY 
292f					DMARK "MON" 
292f f5				push af  
2930 3a 44 29			ld a, (.dmark)  
2933 32 65 ee			ld (debug_mark),a  
2936 3a 45 29			ld a, (.dmark+1)  
2939 32 66 ee			ld (debug_mark+1),a  
293c 3a 46 29			ld a, (.dmark+2)  
293f 32 67 ee			ld (debug_mark+2),a  
2942 18 03			jr .pastdmark  
2944 ..			.dmark: db "MON"  
2947 f1			.pastdmark: pop af  
2948			endm  
# End of macro DMARK
2948					CALLMONITOR 
2948 cd 6f ee			call debug_vector  
294b				endm  
# End of macro CALLMONITOR
294b				endif 
294b			;		ld a, 0 
294b			;		ld (os_view_disable), a 
294b cd ff 14			call bp_on 
294e			 
294e				CALLMONITOR 
294e cd 6f ee			call debug_vector  
2951				endm  
# End of macro CALLMONITOR
2951			 
2951			;	call monitor 
2951			 
2951				NEXTW 
2951 c3 81 1f			jp macro_next 
2954				endm 
# End of macro NEXTW
2954			 
2954			 
2954			.MALLOC: 
2954			CWHEAD .MALLOC2 66 "ALLOT" 5 WORD_FLAG_CODE 
2954 56				db WORD_SYS_CORE+66             
2955 7d 29			dw .MALLOC2            
2957 06				db 5 + 1 
2958 .. 00			db "ALLOT",0              
295e				endm 
# End of macro CWHEAD
295e			; | ALLOT ( u -- u ) Allocate u bytes of memory space and push the pointer TOS  | DONE 
295e				if DEBUG_FORTH_WORDS_KEY 
295e					DMARK "ALL" 
295e f5				push af  
295f 3a 73 29			ld a, (.dmark)  
2962 32 65 ee			ld (debug_mark),a  
2965 3a 74 29			ld a, (.dmark+1)  
2968 32 66 ee			ld (debug_mark+1),a  
296b 3a 75 29			ld a, (.dmark+2)  
296e 32 67 ee			ld (debug_mark+2),a  
2971 18 03			jr .pastdmark  
2973 ..			.dmark: db "ALL"  
2976 f1			.pastdmark: pop af  
2977			endm  
# End of macro DMARK
2977					CALLMONITOR 
2977 cd 6f ee			call debug_vector  
297a				endm  
# End of macro CALLMONITOR
297a				endif 
297a c3 a4 29			jp .mallocc 
297d			.MALLOC2: 
297d			CWHEAD .FREE 66 "MALLOC" 6 WORD_FLAG_CODE 
297d 56				db WORD_SYS_CORE+66             
297e bb 29			dw .FREE            
2980 07				db 6 + 1 
2981 .. 00			db "MALLOC",0              
2988				endm 
# End of macro CWHEAD
2988			; | MALLOC ( u -- u ) Allocate u bytes of memory space and push the pointer TOS  | DONE 
2988				; get byte count 
2988				if DEBUG_FORTH_WORDS_KEY 
2988					DMARK "MAL" 
2988 f5				push af  
2989 3a 9d 29			ld a, (.dmark)  
298c 32 65 ee			ld (debug_mark),a  
298f 3a 9e 29			ld a, (.dmark+1)  
2992 32 66 ee			ld (debug_mark+1),a  
2995 3a 9f 29			ld a, (.dmark+2)  
2998 32 67 ee			ld (debug_mark+2),a  
299b 18 03			jr .pastdmark  
299d ..			.dmark: db "MAL"  
29a0 f1			.pastdmark: pop af  
29a1			endm  
# End of macro DMARK
29a1					CALLMONITOR 
29a1 cd 6f ee			call debug_vector  
29a4				endm  
# End of macro CALLMONITOR
29a4				endif 
29a4			.mallocc: 
29a4				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
29a4 cd 95 1d			call macro_dsp_valuehl 
29a7				endm 
# End of macro FORTH_DSP_VALUEHL
29a7			 
29a7			;		push hl 
29a7			 
29a7				; destroy value TOS 
29a7			 
29a7				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
29a7 cd 4d 1e			call macro_forth_dsp_pop 
29aa				endm 
# End of macro FORTH_DSP_POP
29aa			 
29aa			;		pop hl 
29aa cd d0 11			call malloc 
29ad			if DEBUG_FORTH_MALLOC_GUARD 
29ad f5				push af 
29ae cd 1e 0e			call ishlzero 
29b1			;		ld a, l 
29b1			;		add h 
29b1			;		cp 0 
29b1 f1				pop af 
29b2				 
29b2 cc 15 50			call z,malloc_error 
29b5			endif 
29b5			 
29b5 cd 90 1b			call forth_push_numhl 
29b8				NEXTW 
29b8 c3 81 1f			jp macro_next 
29bb				endm 
# End of macro NEXTW
29bb			 
29bb			.FREE: 
29bb			CWHEAD .LIST 67 "FREE" 4 WORD_FLAG_CODE 
29bb 57				db WORD_SYS_CORE+67             
29bc ec 29			dw .LIST            
29be 05				db 4 + 1 
29bf .. 00			db "FREE",0              
29c4				endm 
# End of macro CWHEAD
29c4			; | FREE ( u --  ) Free memory block from malloc given u address  | DONE 
29c4				if DEBUG_FORTH_WORDS_KEY 
29c4					DMARK "FRE" 
29c4 f5				push af  
29c5 3a d9 29			ld a, (.dmark)  
29c8 32 65 ee			ld (debug_mark),a  
29cb 3a da 29			ld a, (.dmark+1)  
29ce 32 66 ee			ld (debug_mark+1),a  
29d1 3a db 29			ld a, (.dmark+2)  
29d4 32 67 ee			ld (debug_mark+2),a  
29d7 18 03			jr .pastdmark  
29d9 ..			.dmark: db "FRE"  
29dc f1			.pastdmark: pop af  
29dd			endm  
# End of macro DMARK
29dd					CALLMONITOR 
29dd cd 6f ee			call debug_vector  
29e0				endm  
# End of macro CALLMONITOR
29e0				endif 
29e0				; get address 
29e0			 
29e0				FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
29e0 cd 95 1d			call macro_dsp_valuehl 
29e3				endm 
# End of macro FORTH_DSP_VALUEHL
29e3			 
29e3			;		push hl 
29e3			 
29e3				; destroy value TOS 
29e3			 
29e3				FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
29e3 cd 4d 1e			call macro_forth_dsp_pop 
29e6				endm 
# End of macro FORTH_DSP_POP
29e6			 
29e6			;		pop hl 
29e6			if FORTH_ENABLE_MALLOCFREE 
29e6 cd 9a 12			call free 
29e9			endif 
29e9				NEXTW 
29e9 c3 81 1f			jp macro_next 
29ec				endm 
# End of macro NEXTW
29ec			.LIST: 
29ec			CWHEAD .FORGET 72 "LIST" 4 WORD_FLAG_CODE 
29ec 5c				db WORD_SYS_CORE+72             
29ed e8 2b			dw .FORGET            
29ef 05				db 4 + 1 
29f0 .. 00			db "LIST",0              
29f5				endm 
# End of macro CWHEAD
29f5			; | LIST ( uword -- u )    List the code to the word that is quoted (so as not to exec) on TOS | DONE 
29f5			; | | The quoted word must be in upper case. 
29f5			if DEBUG_FORTH_WORDS_KEY 
29f5				DMARK "LST" 
29f5 f5				push af  
29f6 3a 0a 2a			ld a, (.dmark)  
29f9 32 65 ee			ld (debug_mark),a  
29fc 3a 0b 2a			ld a, (.dmark+1)  
29ff 32 66 ee			ld (debug_mark+1),a  
2a02 3a 0c 2a			ld a, (.dmark+2)  
2a05 32 67 ee			ld (debug_mark+2),a  
2a08 18 03			jr .pastdmark  
2a0a ..			.dmark: db "LST"  
2a0d f1			.pastdmark: pop af  
2a0e			endm  
# End of macro DMARK
2a0e				CALLMONITOR 
2a0e cd 6f ee			call debug_vector  
2a11				endm  
# End of macro CALLMONITOR
2a11			endif 
2a11			 
2a11				FORTH_DSP_VALUEHL 
2a11 cd 95 1d			call macro_dsp_valuehl 
2a14				endm 
# End of macro FORTH_DSP_VALUEHL
2a14			 
2a14 e5				push hl 
2a15				FORTH_DSP_POP 
2a15 cd 4d 1e			call macro_forth_dsp_pop 
2a18				endm 
# End of macro FORTH_DSP_POP
2a18 c1				pop bc 
2a19			 
2a19			; Start format of scratch string 
2a19			 
2a19 21 bb e2			ld hl, scratch 
2a1c			 
2a1c 3e 3a			ld a, ':' 
2a1e 77				ld (hl),a 
2a1f 23				inc hl 
2a20 3e 20			ld a, ' ' 
2a22 77				ld (hl), a 
2a23			 
2a23				; Get ptr to the word we need to look up 
2a23			 
2a23			;		FORTH_DSP_VALUEHL 
2a23				;v5 FORTH_DSP_VALUE 
2a23			; TODO type check 
2a23			;		inc hl    ; Skip type check  
2a23			;		push hl 
2a23			;		ex de, hl    ; put into DE 
2a23			 
2a23			 
2a23 21 bf 61			ld hl, baseram 
2a26				;ld hl, baseusermem 
2a26			 
2a26 e5			push hl   ; sacreifical push 
2a27			 
2a27			.ldouscanm: 
2a27 e1			pop hl 
2a28			.ldouscan: 
2a28			if DEBUG_FORTH_WORDS 
2a28				DMARK "LSs" 
2a28 f5				push af  
2a29 3a 3d 2a			ld a, (.dmark)  
2a2c 32 65 ee			ld (debug_mark),a  
2a2f 3a 3e 2a			ld a, (.dmark+1)  
2a32 32 66 ee			ld (debug_mark+1),a  
2a35 3a 3f 2a			ld a, (.dmark+2)  
2a38 32 67 ee			ld (debug_mark+2),a  
2a3b 18 03			jr .pastdmark  
2a3d ..			.dmark: db "LSs"  
2a40 f1			.pastdmark: pop af  
2a41			endm  
# End of macro DMARK
2a41				CALLMONITOR 
2a41 cd 6f ee			call debug_vector  
2a44				endm  
# End of macro CALLMONITOR
2a44			endif 
2a44			; skip dict stub 
2a44 cd be 20			call forth_tok_next 
2a47			 
2a47			 
2a47			; while we have words to look for 
2a47			 
2a47 7e			ld a, (hl)      
2a48			if DEBUG_FORTH_WORDS 
2a48				DMARK "LSk" 
2a48 f5				push af  
2a49 3a 5d 2a			ld a, (.dmark)  
2a4c 32 65 ee			ld (debug_mark),a  
2a4f 3a 5e 2a			ld a, (.dmark+1)  
2a52 32 66 ee			ld (debug_mark+1),a  
2a55 3a 5f 2a			ld a, (.dmark+2)  
2a58 32 67 ee			ld (debug_mark+2),a  
2a5b 18 03			jr .pastdmark  
2a5d ..			.dmark: db "LSk"  
2a60 f1			.pastdmark: pop af  
2a61			endm  
# End of macro DMARK
2a61				CALLMONITOR 
2a61 cd 6f ee			call debug_vector  
2a64				endm  
# End of macro CALLMONITOR
2a64			endif 
2a64				;cp WORD_SYS_END 
2a64				;jp z, .lunotfound 
2a64			 
2a64					; if we hit non uwords then gone too far 
2a64 fe 01				cp WORD_SYS_UWORD 
2a66 c2 a4 2b				jp nz, .lunotfound 
2a69			 
2a69				if DEBUG_FORTH_WORDS 
2a69					DMARK "LSu" 
2a69 f5				push af  
2a6a 3a 7e 2a			ld a, (.dmark)  
2a6d 32 65 ee			ld (debug_mark),a  
2a70 3a 7f 2a			ld a, (.dmark+1)  
2a73 32 66 ee			ld (debug_mark+1),a  
2a76 3a 80 2a			ld a, (.dmark+2)  
2a79 32 67 ee			ld (debug_mark+2),a  
2a7c 18 03			jr .pastdmark  
2a7e ..			.dmark: db "LSu"  
2a81 f1			.pastdmark: pop af  
2a82			endm  
# End of macro DMARK
2a82					CALLMONITOR 
2a82 cd 6f ee			call debug_vector  
2a85				endm  
# End of macro CALLMONITOR
2a85				endif 
2a85			 
2a85					; found a uword but is it the one we want... 
2a85			 
2a85 c5					push bc     ; uword to find is on bc 
2a86 d1					pop de 
2a87			 
2a87 e5					push hl  ; to save the ptr 
2a88			 
2a88					; skip opcode 
2a88 23					inc hl  
2a89					; skip next ptr 
2a89 23					inc hl  
2a8a 23					inc hl 
2a8b					; skip len 
2a8b 23					inc hl 
2a8c			 
2a8c				if DEBUG_FORTH_WORDS 
2a8c					DMARK "LSc" 
2a8c f5				push af  
2a8d 3a a1 2a			ld a, (.dmark)  
2a90 32 65 ee			ld (debug_mark),a  
2a93 3a a2 2a			ld a, (.dmark+1)  
2a96 32 66 ee			ld (debug_mark+1),a  
2a99 3a a3 2a			ld a, (.dmark+2)  
2a9c 32 67 ee			ld (debug_mark+2),a  
2a9f 18 03			jr .pastdmark  
2aa1 ..			.dmark: db "LSc"  
2aa4 f1			.pastdmark: pop af  
2aa5			endm  
# End of macro DMARK
2aa5					CALLMONITOR 
2aa5 cd 6f ee			call debug_vector  
2aa8				endm  
# End of macro CALLMONITOR
2aa8				endif 
2aa8			; was exiting on the shorter of the words. swap and test is in favour of the longer word. 
2aa8			; ie. If WOO is defined first and then WO. Couldnt list WO. 
2aa8			; Nope that has gone the other way. It needs to be exact not on first zero 
2aa8			;		call strcmp 
2aa8 c5					push bc 
2aa9 cd a0 11				call StrictStrCmp 
2aac c1					pop bc 
2aad c2 27 2a				jp nz, .ldouscanm 
2ab0				 
2ab0			 
2ab0			 
2ab0					; we have a uword so push its name to the stack 
2ab0			 
2ab0			;	   	push hl  ; save so we can move to next dict block 
2ab0 e1			pop hl 
2ab1			 
2ab1				if DEBUG_FORTH_WORDS 
2ab1					DMARK "LSm" 
2ab1 f5				push af  
2ab2 3a c6 2a			ld a, (.dmark)  
2ab5 32 65 ee			ld (debug_mark),a  
2ab8 3a c7 2a			ld a, (.dmark+1)  
2abb 32 66 ee			ld (debug_mark+1),a  
2abe 3a c8 2a			ld a, (.dmark+2)  
2ac1 32 67 ee			ld (debug_mark+2),a  
2ac4 18 03			jr .pastdmark  
2ac6 ..			.dmark: db "LSm"  
2ac9 f1			.pastdmark: pop af  
2aca			endm  
# End of macro DMARK
2aca					CALLMONITOR 
2aca cd 6f ee			call debug_vector  
2acd				endm  
# End of macro CALLMONITOR
2acd				endif 
2acd			 
2acd					; skip opcode 
2acd 23					inc hl  
2ace					; skip next ptr 
2ace 23					inc hl  
2acf 23					inc hl 
2ad0					; skip len 
2ad0 7e					ld a, (hl)   ; save length to add 
2ad1				if DEBUG_FORTH_WORDS 
2ad1					DMARK "LS2" 
2ad1 f5				push af  
2ad2 3a e6 2a			ld a, (.dmark)  
2ad5 32 65 ee			ld (debug_mark),a  
2ad8 3a e7 2a			ld a, (.dmark+1)  
2adb 32 66 ee			ld (debug_mark+1),a  
2ade 3a e8 2a			ld a, (.dmark+2)  
2ae1 32 67 ee			ld (debug_mark+2),a  
2ae4 18 03			jr .pastdmark  
2ae6 ..			.dmark: db "LS2"  
2ae9 f1			.pastdmark: pop af  
2aea			endm  
# End of macro DMARK
2aea					CALLMONITOR 
2aea cd 6f ee			call debug_vector  
2aed				endm  
# End of macro CALLMONITOR
2aed				endif 
2aed			 
2aed					; save this location 
2aed				 
2aed e5					push hl 
2aee			 
2aee 23					inc hl 
2aef 11 bd e2				ld de, scratch+2 
2af2 4f					ld c, a 
2af3 06 00				ld b, 0 
2af5			 
2af5				if DEBUG_FORTH_WORDS 
2af5					DMARK "LSn" 
2af5 f5				push af  
2af6 3a 0a 2b			ld a, (.dmark)  
2af9 32 65 ee			ld (debug_mark),a  
2afc 3a 0b 2b			ld a, (.dmark+1)  
2aff 32 66 ee			ld (debug_mark+1),a  
2b02 3a 0c 2b			ld a, (.dmark+2)  
2b05 32 67 ee			ld (debug_mark+2),a  
2b08 18 03			jr .pastdmark  
2b0a ..			.dmark: db "LSn"  
2b0d f1			.pastdmark: pop af  
2b0e			endm  
# End of macro DMARK
2b0e					CALLMONITOR 
2b0e cd 6f ee			call debug_vector  
2b11				endm  
# End of macro CALLMONITOR
2b11				endif 
2b11			 
2b11					; copy uword name to scratch 
2b11			 
2b11			;		ldir 
2b11			.licplw:	; copy uword name to scratch converting to lower case as we go 
2b11 ed a0				ldi 
2b13 1b					dec de 
2b14 1a					ld a, (de) 
2b15 cd 73 10				call to_lower 
2b18 12					ld (de),a 
2b19 13					inc de 
2b1a 3e 00				ld a, 0 
2b1c b9					cp c 
2b1d 20 f2				jr nz, .licplw 
2b1f			 
2b1f			 
2b1f			 
2b1f 1b					dec de 
2b20 3e 20				ld a, ' '    ; change null to space 
2b22 12					ld (de), a 
2b23			 
2b23 13					inc de 
2b24			 
2b24 d5					push de 
2b25 c1					pop bc     ; move scratch pointer to end of word name and save it 
2b26			 
2b26 e1					pop hl 
2b27 7e					ld a, (hl) 
2b28					;inc hl 
2b28					; skip word string 
2b28 cd f5 0d				call addatohl 
2b2b			 
2b2b 23					inc hl 
2b2c			 
2b2c				if DEBUG_FORTH_WORDS 
2b2c					DMARK "LS3" 
2b2c f5				push af  
2b2d 3a 41 2b			ld a, (.dmark)  
2b30 32 65 ee			ld (debug_mark),a  
2b33 3a 42 2b			ld a, (.dmark+1)  
2b36 32 66 ee			ld (debug_mark+1),a  
2b39 3a 43 2b			ld a, (.dmark+2)  
2b3c 32 67 ee			ld (debug_mark+2),a  
2b3f 18 03			jr .pastdmark  
2b41 ..			.dmark: db "LS3"  
2b44 f1			.pastdmark: pop af  
2b45			endm  
# End of macro DMARK
2b45					CALLMONITOR 
2b45 cd 6f ee			call debug_vector  
2b48				endm  
# End of macro CALLMONITOR
2b48				endif 
2b48					; should now be at the start of the machine code to setup the eval of the uword 
2b48					; now locate the ptr to the string defintion 
2b48			 
2b48					; skip ld hl, 
2b48					; then load the ptr 
2b48			; TODO use get from hl ptr 
2b48 23					inc hl 
2b49 5e					ld e, (hl) 
2b4a 23					inc hl 
2b4b 56					ld d, (hl) 
2b4c eb					ex de, hl 
2b4d			 
2b4d			 
2b4d				if DEBUG_FORTH_WORDS 
2b4d					DMARK "LSt" 
2b4d f5				push af  
2b4e 3a 62 2b			ld a, (.dmark)  
2b51 32 65 ee			ld (debug_mark),a  
2b54 3a 63 2b			ld a, (.dmark+1)  
2b57 32 66 ee			ld (debug_mark+1),a  
2b5a 3a 64 2b			ld a, (.dmark+2)  
2b5d 32 67 ee			ld (debug_mark+2),a  
2b60 18 03			jr .pastdmark  
2b62 ..			.dmark: db "LSt"  
2b65 f1			.pastdmark: pop af  
2b66			endm  
# End of macro DMARK
2b66					CALLMONITOR 
2b66 cd 6f ee			call debug_vector  
2b69				endm  
# End of macro CALLMONITOR
2b69				endif 
2b69			 
2b69			; cant push right now due to tokenised strings  
2b69			 
2b69			; get the destination of where to copy this definition to. 
2b69			 
2b69 c5					push bc 
2b6a d1					pop de 
2b6b			 
2b6b 7e			.listl:         ld a,(hl) 
2b6c fe 00				cp 0 
2b6e 28 09				jr z, .lreplsp     ; replace zero with space 
2b70					;cp FORTH_END_BUFFER 
2b70 fe 3b				cp ';'    ; No end buffer flag but the ';' will be a good sign of the end of definition 
2b72 28 0a				jr z, .listdone    ; at end of uword defination to close of scratch and finish 
2b74				 
2b74					; just copy this char as is then 
2b74			 
2b74 12					ld (de), a 
2b75			 
2b75 23			.listnxt:	inc hl 
2b76 13					inc de 
2b77 18 f2				jr .listl 
2b79			 
2b79 3e 20		.lreplsp:	ld a,' ' 
2b7b 12					ld (de), a 
2b7c 18 f7				jr .listnxt 
2b7e			 
2b7e			; close up uword def 
2b7e			 
2b7e			.listdone: 
2b7e 12					ld (de), a 
2b7f 13					inc de 
2b80 3e 00				ld a, 0 
2b82 12					ld (de), a 
2b83			 
2b83			; now have def so clean up and push to stack 
2b83			 
2b83 21 bb e2				ld hl, scratch 
2b86				if DEBUG_FORTH_WORDS 
2b86					DMARK "Ltp" 
2b86 f5				push af  
2b87 3a 9b 2b			ld a, (.dmark)  
2b8a 32 65 ee			ld (debug_mark),a  
2b8d 3a 9c 2b			ld a, (.dmark+1)  
2b90 32 66 ee			ld (debug_mark+1),a  
2b93 3a 9d 2b			ld a, (.dmark+2)  
2b96 32 67 ee			ld (debug_mark+2),a  
2b99 18 03			jr .pastdmark  
2b9b ..			.dmark: db "Ltp"  
2b9e f1			.pastdmark: pop af  
2b9f			endm  
# End of macro DMARK
2b9f					CALLMONITOR 
2b9f cd 6f ee			call debug_vector  
2ba2				endm  
# End of macro CALLMONITOR
2ba2				endif 
2ba2			 
2ba2 18 1f			jr .listpush 
2ba4			 
2ba4			;.lnuword:	pop hl 
2ba4			;		call forth_tok_next 
2ba4			;		jp .ldouscan  
2ba4			 
2ba4			.lunotfound:		  
2ba4			 
2ba4				if DEBUG_FORTH_WORDS 
2ba4					DMARK "LSn" 
2ba4 f5				push af  
2ba5 3a b9 2b			ld a, (.dmark)  
2ba8 32 65 ee			ld (debug_mark),a  
2bab 3a ba 2b			ld a, (.dmark+1)  
2bae 32 66 ee			ld (debug_mark+1),a  
2bb1 3a bb 2b			ld a, (.dmark+2)  
2bb4 32 67 ee			ld (debug_mark+2),a  
2bb7 18 03			jr .pastdmark  
2bb9 ..			.dmark: db "LSn"  
2bbc f1			.pastdmark: pop af  
2bbd			endm  
# End of macro DMARK
2bbd					CALLMONITOR 
2bbd cd 6f ee			call debug_vector  
2bc0				endm  
# End of macro CALLMONITOR
2bc0				endif 
2bc0			 
2bc0					 
2bc0			;		FORTH_DSP_POP 
2bc0			;		ld hl, .luno 
2bc0			 
2bc0					NEXTW			 
2bc0 c3 81 1f			jp macro_next 
2bc3				endm 
# End of macro NEXTW
2bc3			 
2bc3			.listpush: 
2bc3				if DEBUG_FORTH_WORDS 
2bc3					DMARK "LS>" 
2bc3 f5				push af  
2bc4 3a d8 2b			ld a, (.dmark)  
2bc7 32 65 ee			ld (debug_mark),a  
2bca 3a d9 2b			ld a, (.dmark+1)  
2bcd 32 66 ee			ld (debug_mark+1),a  
2bd0 3a da 2b			ld a, (.dmark+2)  
2bd3 32 67 ee			ld (debug_mark+2),a  
2bd6 18 03			jr .pastdmark  
2bd8 ..			.dmark: db "LS>"  
2bdb f1			.pastdmark: pop af  
2bdc			endm  
# End of macro DMARK
2bdc					CALLMONITOR 
2bdc cd 6f ee			call debug_vector  
2bdf				endm  
# End of macro CALLMONITOR
2bdf				endif 
2bdf cd fe 1b				call forth_push_str 
2be2			 
2be2			 
2be2			 
2be2					NEXTW 
2be2 c3 81 1f			jp macro_next 
2be5				endm 
# End of macro NEXTW
2be5			 
2be5			;.luno:    db "Word not found",0 
2be5			 
2be5			 
2be5			 
2be5			 
2be5			 
2be5			;		push hl   ; save pointer to start of uword def string 
2be5			; 
2be5			;; look for FORTH_EOL_LINE 
2be5			;		ld a, FORTH_END_BUFFER 
2be5			;		call strlent 
2be5			; 
2be5			;		inc hl		 ; space for coln def 
2be5			;		inc hl 
2be5			;		inc hl          ; space for terms 
2be5			;		inc hl 
2be5			; 
2be5			;		ld a, 20   ; TODO get actual length 
2be5			;		call addatohl    ; include a random amount of room for the uword name 
2be5			; 
2be5			;		 
2be5			;	if DEBUG_FORTH_WORDS 
2be5			;		DMARK "Lt1" 
2be5			;		CALLMONITOR 
2be5			;	endif 
2be5			;		 
2be5			; 
2be5			;; malloc space for the string because we cant change it 
2be5			; 
2be5			;		call malloc 
2be5			;	if DEBUG_FORTH_MALLOC_GUARD 
2be5			;		push af 
2be5			;		call ishlzero 
2be5			;		pop af 
2be5			;		 
2be5			;		call z,malloc_error 
2be5			;	endif 
2be5			; 
2be5			;	if DEBUG_FORTH_WORDS 
2be5			;		DMARK "Lt2" 
2be5			;		CALLMONITOR 
2be5			;	endif 
2be5			;		pop de 
2be5			;		push hl    ; push the malloc to release later 
2be5			;		push hl   ;  push back a copy for the later stack push 
2be5			;		 
2be5			;; copy the string swapping out the zero terms for spaces 
2be5			; 
2be5			;		; de has our source 
2be5			;		; hl has our dest 
2be5			; 
2be5			;; add the coln def 
2be5			; 
2be5			;		ld a, ':' 
2be5			;		ld (hl), a 
2be5			;		inc hl 
2be5			;		ld a, ' ' 
2be5			;		ld (hl), a 
2be5			;		inc hl 
2be5			; 
2be5			;; add the uname word 
2be5			;		push de   ; save our string for now 
2be5			;		ex de, hl 
2be5			; 
2be5			;		FORTH_DSP_VALUE 
2be5			;		;v5 FORTH_DSP_VALUE 
2be5			; 
2be5			;		inc hl   ; skip type but we know by now this is OK 
2be5			; 
2be5			;.luword:	ld a,(hl) 
2be5			;		cp 0 
2be5			;		jr z, .luword2 
2be5			;		ld (de), a 
2be5			;		inc de 
2be5			;		inc hl 
2be5			;		jr .luword 
2be5			; 
2be5			;.luword2:	ld a, ' ' 
2be5			;		ld (de), a 
2be5			;;		inc hl 
2be5			;;		inc de 
2be5			;;		ld (de), a 
2be5			;;		inc hl 
2be5			;		inc de 
2be5			; 
2be5			;		ex de, hl 
2be5			;		pop de 
2be5			;		 
2be5			;		 
2be5			; 
2be5			;; detoken that string and copy it 
2be5			; 
2be5			;	if DEBUG_FORTH_WORDS 
2be5			;		DMARK "Lt2" 
2be5			;		CALLMONITOR 
2be5			;	endif 
2be5			;.ldetok:	ld a, (de) 
2be5			;		cp FORTH_END_BUFFER 
2be5			;		jr z, .ldetokend 
2be5			;		; swap out any zero term for space 
2be5			;		cp 0 
2be5			;		jr nz, .ldetoknext 
2be5			;		ld a, ' ' 
2be5			; 
2be5			;	if DEBUG_FORTH_WORDS 
2be5			;		DMARK "LtS" 
2be5			;		CALLMONITOR 
2be5			;	endif 
2be5			;.ldetoknext:	ld (hl), a 
2be5			;		inc de 
2be5			;		inc hl 
2be5			;		jr .ldetok 
2be5			; 
2be5			;.ldetokend:	ld a, 0    ; replace forth eol with string term for pushing 
2be5			;		ld (hl), a  
2be5			; 
2be5			;; free that temp malloc 
2be5			; 
2be5			;		pop hl    
2be5			; 
2be5			;	if DEBUG_FORTH_WORDS 
2be5			;		DMARK "Lt4" 
2be5			;		CALLMONITOR 
2be5			;	endif 
2be5			;		call forth_apushstrhl 
2be5			; 
2be5			;		; get rid of temp malloc area 
2be5			; 
2be5			;		pop hl 
2be5			;		call free 
2be5			; 
2be5			;		jr .ludone 
2be5			; 
2be5			;.lnuword:	pop hl 
2be5			;		call forth_tok_next 
2be5			;		jp .ldouscan  
2be5			; 
2be5			;.ludone:		 pop hl 
2be5			; 
2be5					NEXTW 
2be5 c3 81 1f			jp macro_next 
2be8				endm 
# End of macro NEXTW
2be8			 
2be8			.FORGET: 
2be8				CWHEAD .NOP 73 "FORGET" 6 WORD_FLAG_CODE 
2be8 5d				db WORD_SYS_CORE+73             
2be9 61 2c			dw .NOP            
2beb 07				db 6 + 1 
2bec .. 00			db "FORGET",0              
2bf3				endm 
# End of macro CWHEAD
2bf3			; | FORGET ( uword -- )    Forget the uword on TOS | DONE 
2bf3			; | | Will flag the word's op code to be deleted as well as replace the first char of the word with '_'. Quoted uword name must be in caps. 
2bf3			; | |  
2bf3			; | | e.g. "MORE" forget 
2bf3					if DEBUG_FORTH_WORDS_KEY 
2bf3						DMARK "FRG" 
2bf3 f5				push af  
2bf4 3a 08 2c			ld a, (.dmark)  
2bf7 32 65 ee			ld (debug_mark),a  
2bfa 3a 09 2c			ld a, (.dmark+1)  
2bfd 32 66 ee			ld (debug_mark+1),a  
2c00 3a 0a 2c			ld a, (.dmark+2)  
2c03 32 67 ee			ld (debug_mark+2),a  
2c06 18 03			jr .pastdmark  
2c08 ..			.dmark: db "FRG"  
2c0b f1			.pastdmark: pop af  
2c0c			endm  
# End of macro DMARK
2c0c						CALLMONITOR 
2c0c cd 6f ee			call debug_vector  
2c0f				endm  
# End of macro CALLMONITOR
2c0f					endif 
2c0f			 
2c0f				; find uword 
2c0f			        ; update start of word with "_" 
2c0f				; replace uword with deleted flag 
2c0f			 
2c0f			 
2c0f			;	if DEBUG_FORTH_WORDS 
2c0f			;		DMARK "FOG" 
2c0f			;		CALLMONITOR 
2c0f			;	endif 
2c0f			 
2c0f			 
2c0f					; Get ptr to the word we need to look up 
2c0f			 
2c0f					FORTH_DSP_VALUEHL 
2c0f cd 95 1d			call macro_dsp_valuehl 
2c12				endm 
# End of macro FORTH_DSP_VALUEHL
2c12					;v5 FORTH_DSP_VALUE 
2c12				; TODO type check 
2c12			;		inc hl    ; Skip type check  
2c12 e5					push hl 
2c13 c1					pop bc 
2c14			;		ex de, hl    ; put into DE 
2c14			 
2c14			 
2c14 21 bf 61				ld hl, baseram 
2c17					;ld hl, baseusermem 
2c17			 
2c17				; skip dict stub 
2c17			;	call forth_tok_next 
2c17 e5			push hl   ; sacreifical push 
2c18			 
2c18			.fldouscanm: 
2c18 e1				pop hl 
2c19			.fldouscan: 
2c19			;	if DEBUG_FORTH_WORDS 
2c19			;		DMARK "LSs" 
2c19			;		CALLMONITOR 
2c19			;	endif 
2c19				; skip dict stub 
2c19 cd be 20				call forth_tok_next 
2c1c			 
2c1c			 
2c1c			; while we have words to look for 
2c1c			 
2c1c 7e				ld a, (hl)      
2c1d			;	if DEBUG_FORTH_WORDS 
2c1d			;		DMARK "LSk" 
2c1d			;		CALLMONITOR 
2c1d			;	endif 
2c1d fe 00				cp WORD_SYS_END 
2c1f ca 5b 2c				jp z, .flunotfound 
2c22 fe 01				cp WORD_SYS_UWORD 
2c24 c2 19 2c				jp nz, .fldouscan 
2c27			 
2c27			;	if DEBUG_FORTH_WORDS 
2c27			;		DMARK "LSu" 
2c27			;		CALLMONITOR 
2c27			;	endif 
2c27			 
2c27					; found a uword but is it the one we want... 
2c27			 
2c27 c5					push bc     ; uword to find is on bc 
2c28 d1					pop de 
2c29			 
2c29 e5					push hl  ; to save the ptr 
2c2a			 
2c2a					; skip opcode 
2c2a 23					inc hl  
2c2b					; skip next ptr 
2c2b 23					inc hl  
2c2c 23					inc hl 
2c2d					; skip len 
2c2d 23					inc hl 
2c2e			 
2c2e			;	if DEBUG_FORTH_WORDS 
2c2e			;		DMARK "LSc" 
2c2e			;		CALLMONITOR 
2c2e			;	endif 
2c2e cd 93 11				call strcmp 
2c31 c2 18 2c				jp nz, .fldouscanm 
2c34			; 
2c34			; 
2c34			;; while we have words to look for 
2c34			; 
2c34			;.fdouscan:	ld a, (hl)      
2c34			;	if DEBUG_FORTH_WORDS 
2c34			;		DMARK "LSs" 
2c34			;		CALLMONITOR 
2c34			;	endif 
2c34			;		cp WORD_SYS_END 
2c34			;		jp z, .fudone 
2c34			;		cp WORD_SYS_UWORD 
2c34			;		jp nz, .fnuword 
2c34			; 
2c34			;	if DEBUG_FORTH_WORDS 
2c34			;		DMARK "FGu" 
2c34			;		CALLMONITOR 
2c34			;	endif 
2c34			; 
2c34			;		; found a uword but is it the one we want... 
2c34			; 
2c34			; 
2c34			;	        pop de   ; get back the dsp name 
2c34			;		push de 
2c34			; 
2c34			;		push hl  ; to save the ptr 
2c34			; 
2c34			;		; skip opcode 
2c34			;		inc hl  
2c34			;		; skip next ptr 
2c34			;		inc hl  
2c34			;		inc hl 
2c34			;		; skip len 
2c34			;		inc hl 
2c34			; 
2c34			;	if DEBUG_FORTH_WORDS 
2c34			;		DMARK "FGc" 
2c34			;		CALLMONITOR 
2c34			;	endif 
2c34			;		call strcmp 
2c34			;		jp nz, .fnuword 
2c34			 
2c34			 
2c34 e1			pop hl 
2c35			 
2c35				 
2c35				if DEBUG_FORTH_WORDS 
2c35					DMARK "FGm" 
2c35 f5				push af  
2c36 3a 4a 2c			ld a, (.dmark)  
2c39 32 65 ee			ld (debug_mark),a  
2c3c 3a 4b 2c			ld a, (.dmark+1)  
2c3f 32 66 ee			ld (debug_mark+1),a  
2c42 3a 4c 2c			ld a, (.dmark+2)  
2c45 32 67 ee			ld (debug_mark+2),a  
2c48 18 03			jr .pastdmark  
2c4a ..			.dmark: db "FGm"  
2c4d f1			.pastdmark: pop af  
2c4e			endm  
# End of macro DMARK
2c4e					CALLMONITOR 
2c4e cd 6f ee			call debug_vector  
2c51				endm  
# End of macro CALLMONITOR
2c51				endif 
2c51			 
2c51			 
2c51			 
2c51					; we have a uword so push its name to the stack 
2c51			 
2c51			;	   	push hl  ; save so we can move to next dict block 
2c51			;pop hl 
2c51			 
2c51					; update opcode to deleted 
2c51 3e 03				ld a, WORD_SYS_DELETED 
2c53 77					ld (hl), a 
2c54			 
2c54 23					inc hl  
2c55					; skip next ptr 
2c55 23					inc hl  
2c56 23					inc hl 
2c57					; skip len 
2c57 23					inc hl 
2c58			 
2c58					; TODO change parser to skip deleted words but for now mark it out 
2c58 3e 5f				ld a, "_" 
2c5a 77					ld  (hl),a 
2c5b			 
2c5b			;		jr .fudone 
2c5b			; 
2c5b			;.fnuword:	pop hl 
2c5b			;		call forth_tok_next 
2c5b			;		jp .fdouscan  
2c5b			 
2c5b			.flunotfound:		  
2c5b			 
2c5b			 
2c5b					 
2c5b					FORTH_DSP_POP 
2c5b cd 4d 1e			call macro_forth_dsp_pop 
2c5e				endm 
# End of macro FORTH_DSP_POP
2c5e			;		ld hl, .luno 
2c5e			;.fudone:		 pop hl 
2c5e					NEXTW 
2c5e c3 81 1f			jp macro_next 
2c61				endm 
# End of macro NEXTW
2c61			.NOP: 
2c61				CWHEAD .COMO 77 "NOP" 3 WORD_FLAG_CODE 
2c61 61				db WORD_SYS_CORE+77             
2c62 88 2c			dw .COMO            
2c64 04				db 3 + 1 
2c65 .. 00			db "NOP",0              
2c69				endm 
# End of macro CWHEAD
2c69			; | NOP (  --  ) Do nothing | DONE 
2c69					if DEBUG_FORTH_WORDS_KEY 
2c69						DMARK "NOP" 
2c69 f5				push af  
2c6a 3a 7e 2c			ld a, (.dmark)  
2c6d 32 65 ee			ld (debug_mark),a  
2c70 3a 7f 2c			ld a, (.dmark+1)  
2c73 32 66 ee			ld (debug_mark+1),a  
2c76 3a 80 2c			ld a, (.dmark+2)  
2c79 32 67 ee			ld (debug_mark+2),a  
2c7c 18 03			jr .pastdmark  
2c7e ..			.dmark: db "NOP"  
2c81 f1			.pastdmark: pop af  
2c82			endm  
# End of macro DMARK
2c82						CALLMONITOR 
2c82 cd 6f ee			call debug_vector  
2c85				endm  
# End of macro CALLMONITOR
2c85					endif 
2c85				       NEXTW 
2c85 c3 81 1f			jp macro_next 
2c88				endm 
# End of macro NEXTW
2c88			.COMO: 
2c88				CWHEAD .COMC 90 "(" 1 WORD_FLAG_CODE 
2c88 6e				db WORD_SYS_CORE+90             
2c89 da 2c			dw .COMC            
2c8b 02				db 1 + 1 
2c8c .. 00			db "(",0              
2c8e				endm 
# End of macro CWHEAD
2c8e			; | ( ( -- )  Start of comment | DONE 
2c8e			 
2c8e			 
2c8e 2a bc e5				ld hl, ( os_tok_ptr) 
2c91 11 d5 2c			ld de, .closepar 
2c94					 
2c94					if DEBUG_FORTH_WORDS 
2c94						DMARK ").." 
2c94 f5				push af  
2c95 3a a9 2c			ld a, (.dmark)  
2c98 32 65 ee			ld (debug_mark),a  
2c9b 3a aa 2c			ld a, (.dmark+1)  
2c9e 32 66 ee			ld (debug_mark+1),a  
2ca1 3a ab 2c			ld a, (.dmark+2)  
2ca4 32 67 ee			ld (debug_mark+2),a  
2ca7 18 03			jr .pastdmark  
2ca9 ..			.dmark: db ").."  
2cac f1			.pastdmark: pop af  
2cad			endm  
# End of macro DMARK
2cad						CALLMONITOR 
2cad cd 6f ee			call debug_vector  
2cb0				endm  
# End of macro CALLMONITOR
2cb0					endif 
2cb0 cd 88 20			call findnexttok  
2cb3			 
2cb3					if DEBUG_FORTH_WORDS 
2cb3						DMARK "IF5" 
2cb3 f5				push af  
2cb4 3a c8 2c			ld a, (.dmark)  
2cb7 32 65 ee			ld (debug_mark),a  
2cba 3a c9 2c			ld a, (.dmark+1)  
2cbd 32 66 ee			ld (debug_mark+1),a  
2cc0 3a ca 2c			ld a, (.dmark+2)  
2cc3 32 67 ee			ld (debug_mark+2),a  
2cc6 18 03			jr .pastdmark  
2cc8 ..			.dmark: db "IF5"  
2ccb f1			.pastdmark: pop af  
2ccc			endm  
# End of macro DMARK
2ccc						CALLMONITOR 
2ccc cd 6f ee			call debug_vector  
2ccf				endm  
# End of macro CALLMONITOR
2ccf					endif 
2ccf				; replace below with ) exec using tok_ptr 
2ccf 22 bc e5			ld (os_tok_ptr), hl 
2cd2 c3 0a 20			jp exec1 
2cd5			 
2cd5 .. 00			.closepar:   db ")",0 
2cd7			 
2cd7				       NEXTW 
2cd7 c3 81 1f			jp macro_next 
2cda				endm 
# End of macro NEXTW
2cda			.COMC: 
2cda				CWHEAD .SCRATCH 91 ")" 1 WORD_FLAG_CODE 
2cda 6f				db WORD_SYS_CORE+91             
2cdb e3 2c			dw .SCRATCH            
2cdd 02				db 1 + 1 
2cde .. 00			db ")",0              
2ce0				endm 
# End of macro CWHEAD
2ce0			; | ) ( -- )  End of comment |  DONE  
2ce0				       NEXTW 
2ce0 c3 81 1f			jp macro_next 
2ce3				endm 
# End of macro NEXTW
2ce3			 
2ce3			.SCRATCH: 
2ce3				CWHEAD .INC 91 "SCRATCH" 7 WORD_FLAG_CODE 
2ce3 6f				db WORD_SYS_CORE+91             
2ce4 1e 2d			dw .INC            
2ce6 08				db 7 + 1 
2ce7 .. 00			db "SCRATCH",0              
2cef				endm 
# End of macro CWHEAD
2cef			; | SCRATCH ( u -- addr ) Pushes address of offset u to stack | DONE 
2cef			; | | The scratch area provides 32 word array. Can be used as single byte or as a word by passing the offset on stack. Pushes the resulting address to stack.  
2cef			; | | When used with the direct storage writing/malloc and the !@ or word versions it is possible to construct an expanded and flexible variable system 
2cef			; | |  
2cef			; | | e.g.    : score $00 scratch ; 
2cef			; | |  
2cef			; | | $00 score ! 
2cef			; | | $01 score +! 
2cef			; | |  
2cef			; | | e.g.   : varword $0a scratch ;  
2cef			; | | 
2cef			; | | $8000 varword ! 
2cef					if DEBUG_FORTH_WORDS_KEY 
2cef						DMARK "SCR" 
2cef f5				push af  
2cf0 3a 04 2d			ld a, (.dmark)  
2cf3 32 65 ee			ld (debug_mark),a  
2cf6 3a 05 2d			ld a, (.dmark+1)  
2cf9 32 66 ee			ld (debug_mark+1),a  
2cfc 3a 06 2d			ld a, (.dmark+2)  
2cff 32 67 ee			ld (debug_mark+2),a  
2d02 18 03			jr .pastdmark  
2d04 ..			.dmark: db "SCR"  
2d07 f1			.pastdmark: pop af  
2d08			endm  
# End of macro DMARK
2d08						CALLMONITOR 
2d08 cd 6f ee			call debug_vector  
2d0b				endm  
# End of macro CALLMONITOR
2d0b					endif 
2d0b			 
2d0b					FORTH_DSP_VALUEHL 
2d0b cd 95 1d			call macro_dsp_valuehl 
2d0e				endm 
# End of macro FORTH_DSP_VALUEHL
2d0e				 
2d0e					FORTH_DSP_POP 
2d0e cd 4d 1e			call macro_forth_dsp_pop 
2d11				endm 
# End of macro FORTH_DSP_POP
2d11			 
2d11 7d					ld a, l 
2d12 21 e0 e7				ld hl, os_var_array 
2d15 cd f5 0d				call addatohl 
2d18			 
2d18 cd 90 1b				call forth_push_numhl 
2d1b			 
2d1b				       NEXTW 
2d1b c3 81 1f			jp macro_next 
2d1e				endm 
# End of macro NEXTW
2d1e			 
2d1e			.INC: 
2d1e				CWHEAD .DEC 91 "+!" 2 WORD_FLAG_CODE 
2d1e 6f				db WORD_SYS_CORE+91             
2d1f 74 2d			dw .DEC            
2d21 03				db 2 + 1 
2d22 .. 00			db "+!",0              
2d25				endm 
# End of macro CWHEAD
2d25			; | +! ( u a -- )  Increment byte at address a by the value u | DONE 
2d25					if DEBUG_FORTH_WORDS_KEY 
2d25						DMARK "+s_" 
2d25 f5				push af  
2d26 3a 3a 2d			ld a, (.dmark)  
2d29 32 65 ee			ld (debug_mark),a  
2d2c 3a 3b 2d			ld a, (.dmark+1)  
2d2f 32 66 ee			ld (debug_mark+1),a  
2d32 3a 3c 2d			ld a, (.dmark+2)  
2d35 32 67 ee			ld (debug_mark+2),a  
2d38 18 03			jr .pastdmark  
2d3a ..			.dmark: db "+s_"  
2d3d f1			.pastdmark: pop af  
2d3e			endm  
# End of macro DMARK
2d3e						CALLMONITOR 
2d3e cd 6f ee			call debug_vector  
2d41				endm  
# End of macro CALLMONITOR
2d41					endif 
2d41			 
2d41					FORTH_DSP_VALUEHL 
2d41 cd 95 1d			call macro_dsp_valuehl 
2d44				endm 
# End of macro FORTH_DSP_VALUEHL
2d44			 
2d44 e5					push hl   ; save address 
2d45			 
2d45					FORTH_DSP_POP 
2d45 cd 4d 1e			call macro_forth_dsp_pop 
2d48				endm 
# End of macro FORTH_DSP_POP
2d48			 
2d48					FORTH_DSP_VALUEHL 
2d48 cd 95 1d			call macro_dsp_valuehl 
2d4b				endm 
# End of macro FORTH_DSP_VALUEHL
2d4b			 
2d4b e5					push hl 
2d4c					FORTH_DSP_POP 
2d4c cd 4d 1e			call macro_forth_dsp_pop 
2d4f				endm 
# End of macro FORTH_DSP_POP
2d4f e1					pop hl 
2d50			 
2d50					; hl contains value to add to byte at a 
2d50				 
2d50 eb					ex de, hl 
2d51			 
2d51 e1					pop hl 
2d52			 
2d52					if DEBUG_FORTH_WORDS 
2d52						DMARK "INC" 
2d52 f5				push af  
2d53 3a 67 2d			ld a, (.dmark)  
2d56 32 65 ee			ld (debug_mark),a  
2d59 3a 68 2d			ld a, (.dmark+1)  
2d5c 32 66 ee			ld (debug_mark+1),a  
2d5f 3a 69 2d			ld a, (.dmark+2)  
2d62 32 67 ee			ld (debug_mark+2),a  
2d65 18 03			jr .pastdmark  
2d67 ..			.dmark: db "INC"  
2d6a f1			.pastdmark: pop af  
2d6b			endm  
# End of macro DMARK
2d6b						CALLMONITOR 
2d6b cd 6f ee			call debug_vector  
2d6e				endm  
# End of macro CALLMONITOR
2d6e					endif 
2d6e			 
2d6e 7e					ld a,(hl) 
2d6f 83					add e 
2d70 77					ld (hl),a 
2d71			 
2d71			 
2d71			 
2d71				       NEXTW 
2d71 c3 81 1f			jp macro_next 
2d74				endm 
# End of macro NEXTW
2d74			 
2d74			.DEC: 
2d74				CWHEAD .INC2 91 "-!" 2 WORD_FLAG_CODE 
2d74 6f				db WORD_SYS_CORE+91             
2d75 c8 2d			dw .INC2            
2d77 03				db 2 + 1 
2d78 .. 00			db "-!",0              
2d7b				endm 
# End of macro CWHEAD
2d7b			; | -! ( u a -- )  Decrement byte at address a by the value u | DONE 
2d7b					if DEBUG_FORTH_WORDS_KEY 
2d7b						DMARK "-s_" 
2d7b f5				push af  
2d7c 3a 90 2d			ld a, (.dmark)  
2d7f 32 65 ee			ld (debug_mark),a  
2d82 3a 91 2d			ld a, (.dmark+1)  
2d85 32 66 ee			ld (debug_mark+1),a  
2d88 3a 92 2d			ld a, (.dmark+2)  
2d8b 32 67 ee			ld (debug_mark+2),a  
2d8e 18 03			jr .pastdmark  
2d90 ..			.dmark: db "-s_"  
2d93 f1			.pastdmark: pop af  
2d94			endm  
# End of macro DMARK
2d94						CALLMONITOR 
2d94 cd 6f ee			call debug_vector  
2d97				endm  
# End of macro CALLMONITOR
2d97					endif 
2d97			 
2d97					FORTH_DSP_VALUEHL 
2d97 cd 95 1d			call macro_dsp_valuehl 
2d9a				endm 
# End of macro FORTH_DSP_VALUEHL
2d9a			 
2d9a e5					push hl   ; save address 
2d9b			 
2d9b					FORTH_DSP_POP 
2d9b cd 4d 1e			call macro_forth_dsp_pop 
2d9e				endm 
# End of macro FORTH_DSP_POP
2d9e			 
2d9e					FORTH_DSP_VALUEHL 
2d9e cd 95 1d			call macro_dsp_valuehl 
2da1				endm 
# End of macro FORTH_DSP_VALUEHL
2da1			 
2da1					; hl contains value to add to byte at a 
2da1				 
2da1 eb					ex de, hl 
2da2			 
2da2 e1					pop hl 
2da3			 
2da3					if DEBUG_FORTH_WORDS 
2da3						DMARK "DEC" 
2da3 f5				push af  
2da4 3a b8 2d			ld a, (.dmark)  
2da7 32 65 ee			ld (debug_mark),a  
2daa 3a b9 2d			ld a, (.dmark+1)  
2dad 32 66 ee			ld (debug_mark+1),a  
2db0 3a ba 2d			ld a, (.dmark+2)  
2db3 32 67 ee			ld (debug_mark+2),a  
2db6 18 03			jr .pastdmark  
2db8 ..			.dmark: db "DEC"  
2dbb f1			.pastdmark: pop af  
2dbc			endm  
# End of macro DMARK
2dbc						CALLMONITOR 
2dbc cd 6f ee			call debug_vector  
2dbf				endm  
# End of macro CALLMONITOR
2dbf					endif 
2dbf			 
2dbf 7e					ld a,(hl) 
2dc0 93					sub e 
2dc1 77					ld (hl),a 
2dc2			 
2dc2			 
2dc2					FORTH_DSP_POP 
2dc2 cd 4d 1e			call macro_forth_dsp_pop 
2dc5				endm 
# End of macro FORTH_DSP_POP
2dc5			 
2dc5				       NEXTW 
2dc5 c3 81 1f			jp macro_next 
2dc8				endm 
# End of macro NEXTW
2dc8			 
2dc8			.INC2: 
2dc8				CWHEAD .DEC2 91 "+2!" 3 WORD_FLAG_CODE 
2dc8 6f				db WORD_SYS_CORE+91             
2dc9 75 2e			dw .DEC2            
2dcb 04				db 3 + 1 
2dcc .. 00			db "+2!",0              
2dd0				endm 
# End of macro CWHEAD
2dd0			; | +2! ( u a -- )  Increment word at address a by the value u | DONE 
2dd0			 
2dd0					if DEBUG_FORTH_WORDS_KEY 
2dd0						DMARK "+2s" 
2dd0 f5				push af  
2dd1 3a e5 2d			ld a, (.dmark)  
2dd4 32 65 ee			ld (debug_mark),a  
2dd7 3a e6 2d			ld a, (.dmark+1)  
2dda 32 66 ee			ld (debug_mark+1),a  
2ddd 3a e7 2d			ld a, (.dmark+2)  
2de0 32 67 ee			ld (debug_mark+2),a  
2de3 18 03			jr .pastdmark  
2de5 ..			.dmark: db "+2s"  
2de8 f1			.pastdmark: pop af  
2de9			endm  
# End of macro DMARK
2de9						CALLMONITOR 
2de9 cd 6f ee			call debug_vector  
2dec				endm  
# End of macro CALLMONITOR
2dec					endif 
2dec			 
2dec					; Address 
2dec			 
2dec					FORTH_DSP_VALUEHL 
2dec cd 95 1d			call macro_dsp_valuehl 
2def				endm 
# End of macro FORTH_DSP_VALUEHL
2def			 
2def e5					push hl    ; save address 
2df0			 
2df0					; load content into de 
2df0			 
2df0 5e					ld e,(hl) 
2df1 23					inc hl 
2df2 56					ld d, (hl) 
2df3			 
2df3					if DEBUG_FORTH_WORDS 
2df3						DMARK "+2a" 
2df3 f5				push af  
2df4 3a 08 2e			ld a, (.dmark)  
2df7 32 65 ee			ld (debug_mark),a  
2dfa 3a 09 2e			ld a, (.dmark+1)  
2dfd 32 66 ee			ld (debug_mark+1),a  
2e00 3a 0a 2e			ld a, (.dmark+2)  
2e03 32 67 ee			ld (debug_mark+2),a  
2e06 18 03			jr .pastdmark  
2e08 ..			.dmark: db "+2a"  
2e0b f1			.pastdmark: pop af  
2e0c			endm  
# End of macro DMARK
2e0c						CALLMONITOR 
2e0c cd 6f ee			call debug_vector  
2e0f				endm  
# End of macro CALLMONITOR
2e0f					endif 
2e0f			 
2e0f					FORTH_DSP_POP 
2e0f cd 4d 1e			call macro_forth_dsp_pop 
2e12				endm 
# End of macro FORTH_DSP_POP
2e12			 
2e12					; Get value to add 
2e12			 
2e12					FORTH_DSP_VALUE 
2e12 cd 7e 1d			call macro_forth_dsp_value 
2e15				endm 
# End of macro FORTH_DSP_VALUE
2e15			 
2e15					if DEBUG_FORTH_WORDS 
2e15						DMARK "+2v" 
2e15 f5				push af  
2e16 3a 2a 2e			ld a, (.dmark)  
2e19 32 65 ee			ld (debug_mark),a  
2e1c 3a 2b 2e			ld a, (.dmark+1)  
2e1f 32 66 ee			ld (debug_mark+1),a  
2e22 3a 2c 2e			ld a, (.dmark+2)  
2e25 32 67 ee			ld (debug_mark+2),a  
2e28 18 03			jr .pastdmark  
2e2a ..			.dmark: db "+2v"  
2e2d f1			.pastdmark: pop af  
2e2e			endm  
# End of macro DMARK
2e2e						CALLMONITOR 
2e2e cd 6f ee			call debug_vector  
2e31				endm  
# End of macro CALLMONITOR
2e31					endif 
2e31			 
2e31 19					add hl, de 
2e32			 
2e32					if DEBUG_FORTH_WORDS 
2e32						DMARK "+2+" 
2e32 f5				push af  
2e33 3a 47 2e			ld a, (.dmark)  
2e36 32 65 ee			ld (debug_mark),a  
2e39 3a 48 2e			ld a, (.dmark+1)  
2e3c 32 66 ee			ld (debug_mark+1),a  
2e3f 3a 49 2e			ld a, (.dmark+2)  
2e42 32 67 ee			ld (debug_mark+2),a  
2e45 18 03			jr .pastdmark  
2e47 ..			.dmark: db "+2+"  
2e4a f1			.pastdmark: pop af  
2e4b			endm  
# End of macro DMARK
2e4b						CALLMONITOR 
2e4b cd 6f ee			call debug_vector  
2e4e				endm  
# End of macro CALLMONITOR
2e4e					endif 
2e4e			 
2e4e					; move result to de 
2e4e			 
2e4e eb					ex de, hl 
2e4f			 
2e4f					; Address 
2e4f			 
2e4f e1					pop hl 
2e50			 
2e50					; save it back 
2e50			 
2e50 73					ld (hl), e 
2e51 23					inc hl 
2e52 72					ld (hl), d 
2e53			 
2e53					if DEBUG_FORTH_WORDS 
2e53						DMARK "+2e" 
2e53 f5				push af  
2e54 3a 68 2e			ld a, (.dmark)  
2e57 32 65 ee			ld (debug_mark),a  
2e5a 3a 69 2e			ld a, (.dmark+1)  
2e5d 32 66 ee			ld (debug_mark+1),a  
2e60 3a 6a 2e			ld a, (.dmark+2)  
2e63 32 67 ee			ld (debug_mark+2),a  
2e66 18 03			jr .pastdmark  
2e68 ..			.dmark: db "+2e"  
2e6b f1			.pastdmark: pop af  
2e6c			endm  
# End of macro DMARK
2e6c						CALLMONITOR 
2e6c cd 6f ee			call debug_vector  
2e6f				endm  
# End of macro CALLMONITOR
2e6f					endif 
2e6f			 
2e6f			 
2e6f			 
2e6f					FORTH_DSP_POP 
2e6f cd 4d 1e			call macro_forth_dsp_pop 
2e72				endm 
# End of macro FORTH_DSP_POP
2e72			 
2e72			 
2e72				       NEXTW 
2e72 c3 81 1f			jp macro_next 
2e75				endm 
# End of macro NEXTW
2e75			 
2e75			.DEC2: 
2e75				CWHEAD .GET2 91 "-2!" 3 WORD_FLAG_CODE 
2e75 6f				db WORD_SYS_CORE+91             
2e76 24 2f			dw .GET2            
2e78 04				db 3 + 1 
2e79 .. 00			db "-2!",0              
2e7d				endm 
# End of macro CWHEAD
2e7d			; | -2! ( u a -- )  Decrement word at address a by the value u | DONE 
2e7d			 
2e7d			 
2e7d					if DEBUG_FORTH_WORDS_KEY 
2e7d						DMARK "-2s" 
2e7d f5				push af  
2e7e 3a 92 2e			ld a, (.dmark)  
2e81 32 65 ee			ld (debug_mark),a  
2e84 3a 93 2e			ld a, (.dmark+1)  
2e87 32 66 ee			ld (debug_mark+1),a  
2e8a 3a 94 2e			ld a, (.dmark+2)  
2e8d 32 67 ee			ld (debug_mark+2),a  
2e90 18 03			jr .pastdmark  
2e92 ..			.dmark: db "-2s"  
2e95 f1			.pastdmark: pop af  
2e96			endm  
# End of macro DMARK
2e96						CALLMONITOR 
2e96 cd 6f ee			call debug_vector  
2e99				endm  
# End of macro CALLMONITOR
2e99					endif 
2e99			 
2e99					; Address 
2e99			 
2e99					FORTH_DSP_VALUEHL 
2e99 cd 95 1d			call macro_dsp_valuehl 
2e9c				endm 
# End of macro FORTH_DSP_VALUEHL
2e9c			 
2e9c e5					push hl    ; save address 
2e9d			 
2e9d					; load content into de 
2e9d			 
2e9d 5e					ld e,(hl) 
2e9e 23					inc hl 
2e9f 56					ld d, (hl) 
2ea0			 
2ea0					if DEBUG_FORTH_WORDS 
2ea0						DMARK "-2a" 
2ea0 f5				push af  
2ea1 3a b5 2e			ld a, (.dmark)  
2ea4 32 65 ee			ld (debug_mark),a  
2ea7 3a b6 2e			ld a, (.dmark+1)  
2eaa 32 66 ee			ld (debug_mark+1),a  
2ead 3a b7 2e			ld a, (.dmark+2)  
2eb0 32 67 ee			ld (debug_mark+2),a  
2eb3 18 03			jr .pastdmark  
2eb5 ..			.dmark: db "-2a"  
2eb8 f1			.pastdmark: pop af  
2eb9			endm  
# End of macro DMARK
2eb9						CALLMONITOR 
2eb9 cd 6f ee			call debug_vector  
2ebc				endm  
# End of macro CALLMONITOR
2ebc					endif 
2ebc			 
2ebc					FORTH_DSP_POP 
2ebc cd 4d 1e			call macro_forth_dsp_pop 
2ebf				endm 
# End of macro FORTH_DSP_POP
2ebf			 
2ebf					; Get value to remove 
2ebf			 
2ebf					FORTH_DSP_VALUE 
2ebf cd 7e 1d			call macro_forth_dsp_value 
2ec2				endm 
# End of macro FORTH_DSP_VALUE
2ec2			 
2ec2					if DEBUG_FORTH_WORDS 
2ec2						DMARK "-2v" 
2ec2 f5				push af  
2ec3 3a d7 2e			ld a, (.dmark)  
2ec6 32 65 ee			ld (debug_mark),a  
2ec9 3a d8 2e			ld a, (.dmark+1)  
2ecc 32 66 ee			ld (debug_mark+1),a  
2ecf 3a d9 2e			ld a, (.dmark+2)  
2ed2 32 67 ee			ld (debug_mark+2),a  
2ed5 18 03			jr .pastdmark  
2ed7 ..			.dmark: db "-2v"  
2eda f1			.pastdmark: pop af  
2edb			endm  
# End of macro DMARK
2edb						CALLMONITOR 
2edb cd 6f ee			call debug_vector  
2ede				endm  
# End of macro CALLMONITOR
2ede					endif 
2ede			 
2ede eb					ex de, hl 
2edf ed 52				sbc hl, de 
2ee1			 
2ee1					if DEBUG_FORTH_WORDS 
2ee1						DMARK "-2d" 
2ee1 f5				push af  
2ee2 3a f6 2e			ld a, (.dmark)  
2ee5 32 65 ee			ld (debug_mark),a  
2ee8 3a f7 2e			ld a, (.dmark+1)  
2eeb 32 66 ee			ld (debug_mark+1),a  
2eee 3a f8 2e			ld a, (.dmark+2)  
2ef1 32 67 ee			ld (debug_mark+2),a  
2ef4 18 03			jr .pastdmark  
2ef6 ..			.dmark: db "-2d"  
2ef9 f1			.pastdmark: pop af  
2efa			endm  
# End of macro DMARK
2efa						CALLMONITOR 
2efa cd 6f ee			call debug_vector  
2efd				endm  
# End of macro CALLMONITOR
2efd					endif 
2efd			 
2efd					; move result to de 
2efd			 
2efd eb					ex de, hl 
2efe			 
2efe					; Address 
2efe			 
2efe e1					pop hl 
2eff			 
2eff					; save it back 
2eff			 
2eff 73					ld (hl), e 
2f00 23					inc hl 
2f01 72					ld (hl), d 
2f02			 
2f02					if DEBUG_FORTH_WORDS 
2f02						DMARK "-2e" 
2f02 f5				push af  
2f03 3a 17 2f			ld a, (.dmark)  
2f06 32 65 ee			ld (debug_mark),a  
2f09 3a 18 2f			ld a, (.dmark+1)  
2f0c 32 66 ee			ld (debug_mark+1),a  
2f0f 3a 19 2f			ld a, (.dmark+2)  
2f12 32 67 ee			ld (debug_mark+2),a  
2f15 18 03			jr .pastdmark  
2f17 ..			.dmark: db "-2e"  
2f1a f1			.pastdmark: pop af  
2f1b			endm  
# End of macro DMARK
2f1b						CALLMONITOR 
2f1b cd 6f ee			call debug_vector  
2f1e				endm  
# End of macro CALLMONITOR
2f1e					endif 
2f1e			 
2f1e			 
2f1e					FORTH_DSP_POP 
2f1e cd 4d 1e			call macro_forth_dsp_pop 
2f21				endm 
# End of macro FORTH_DSP_POP
2f21			 
2f21			 
2f21			 
2f21				       NEXTW 
2f21 c3 81 1f			jp macro_next 
2f24				endm 
# End of macro NEXTW
2f24			.GET2: 
2f24				CWHEAD .BANG2 91 "2@" 2 WORD_FLAG_CODE 
2f24 6f				db WORD_SYS_CORE+91             
2f25 59 2f			dw .BANG2            
2f27 03				db 2 + 1 
2f28 .. 00			db "2@",0              
2f2b				endm 
# End of macro CWHEAD
2f2b			; | 2@ ( a -- u )  Push word at address a onto stack | DONE 
2f2b					if DEBUG_FORTH_WORDS_KEY 
2f2b						DMARK "2A_" 
2f2b f5				push af  
2f2c 3a 40 2f			ld a, (.dmark)  
2f2f 32 65 ee			ld (debug_mark),a  
2f32 3a 41 2f			ld a, (.dmark+1)  
2f35 32 66 ee			ld (debug_mark+1),a  
2f38 3a 42 2f			ld a, (.dmark+2)  
2f3b 32 67 ee			ld (debug_mark+2),a  
2f3e 18 03			jr .pastdmark  
2f40 ..			.dmark: db "2A_"  
2f43 f1			.pastdmark: pop af  
2f44			endm  
# End of macro DMARK
2f44						CALLMONITOR 
2f44 cd 6f ee			call debug_vector  
2f47				endm  
# End of macro CALLMONITOR
2f47					endif 
2f47			 
2f47					FORTH_DSP_VALUEHL 
2f47 cd 95 1d			call macro_dsp_valuehl 
2f4a				endm 
# End of macro FORTH_DSP_VALUEHL
2f4a			 
2f4a e5					push hl   ; save address 
2f4b			 
2f4b					FORTH_DSP_POP 
2f4b cd 4d 1e			call macro_forth_dsp_pop 
2f4e				endm 
# End of macro FORTH_DSP_POP
2f4e			 
2f4e e1					pop hl 
2f4f			 
2f4f 5e					ld e, (hl) 
2f50 23					inc hl 
2f51 56					ld d, (hl) 
2f52			 
2f52 eb					ex de, hl 
2f53			 
2f53 cd 90 1b				call forth_push_numhl 
2f56			 
2f56				       NEXTW 
2f56 c3 81 1f			jp macro_next 
2f59				endm 
# End of macro NEXTW
2f59			.BANG2: 
2f59				CWHEAD .CONFIG 91 "2!" 2 WORD_FLAG_CODE 
2f59 6f				db WORD_SYS_CORE+91             
2f5a 91 2f			dw .CONFIG            
2f5c 03				db 2 + 1 
2f5d .. 00			db "2!",0              
2f60				endm 
# End of macro CWHEAD
2f60			; | 2! ( u a -- )  Store value u as a word at address a | DONE 
2f60					if DEBUG_FORTH_WORDS_KEY 
2f60						DMARK "2S_" 
2f60 f5				push af  
2f61 3a 75 2f			ld a, (.dmark)  
2f64 32 65 ee			ld (debug_mark),a  
2f67 3a 76 2f			ld a, (.dmark+1)  
2f6a 32 66 ee			ld (debug_mark+1),a  
2f6d 3a 77 2f			ld a, (.dmark+2)  
2f70 32 67 ee			ld (debug_mark+2),a  
2f73 18 03			jr .pastdmark  
2f75 ..			.dmark: db "2S_"  
2f78 f1			.pastdmark: pop af  
2f79			endm  
# End of macro DMARK
2f79						CALLMONITOR 
2f79 cd 6f ee			call debug_vector  
2f7c				endm  
# End of macro CALLMONITOR
2f7c					endif 
2f7c			 
2f7c					FORTH_DSP_VALUEHL 
2f7c cd 95 1d			call macro_dsp_valuehl 
2f7f				endm 
# End of macro FORTH_DSP_VALUEHL
2f7f			 
2f7f e5					push hl   ; save address 
2f80			 
2f80			 
2f80					FORTH_DSP_POP 
2f80 cd 4d 1e			call macro_forth_dsp_pop 
2f83				endm 
# End of macro FORTH_DSP_POP
2f83			 
2f83					 
2f83					FORTH_DSP_VALUEHL 
2f83 cd 95 1d			call macro_dsp_valuehl 
2f86				endm 
# End of macro FORTH_DSP_VALUEHL
2f86			 
2f86					FORTH_DSP_POP 
2f86 cd 4d 1e			call macro_forth_dsp_pop 
2f89				endm 
# End of macro FORTH_DSP_POP
2f89			 
2f89 eb					ex de, hl    ; value now in de 
2f8a			 
2f8a e1					pop hl 
2f8b			 
2f8b 73					ld (hl), e 
2f8c			 
2f8c 23					inc hl 
2f8d			 
2f8d 72					ld (hl), d 
2f8e			 
2f8e			 
2f8e				       NEXTW 
2f8e c3 81 1f			jp macro_next 
2f91				endm 
# End of macro NEXTW
2f91			.CONFIG: 
2f91				CWHEAD .ADTOS 91 "CONFIG" 6 WORD_FLAG_CODE 
2f91 6f				db WORD_SYS_CORE+91             
2f92 a2 2f			dw .ADTOS            
2f94 07				db 6 + 1 
2f95 .. 00			db "CONFIG",0              
2f9c				endm 
# End of macro CWHEAD
2f9c			; | CONFIG ( -- )  Access the system configuration menu. Set boot from file, hardware diags, and more! | DONE 
2f9c			 
2f9c cd 69 13				call config 
2f9f					NEXTW 
2f9f c3 81 1f			jp macro_next 
2fa2				endm 
# End of macro NEXTW
2fa2			 
2fa2			.ADTOS: 
2fa2				CWHEAD .SBTOS 91 "1+" 2 WORD_FLAG_CODE 
2fa2 6f				db WORD_SYS_CORE+91             
2fa3 b8 2f			dw .SBTOS            
2fa5 03				db 2 + 1 
2fa6 .. 00			db "1+",0              
2fa9				endm 
# End of macro CWHEAD
2fa9			; | 1+ ( u -- u )  Increment value on TOS | DONE 
2fa9			 
2fa9					FORTH_DSP_VALUEHL 
2fa9 cd 95 1d			call macro_dsp_valuehl 
2fac				endm 
# End of macro FORTH_DSP_VALUEHL
2fac e5					push hl 
2fad			 
2fad					FORTH_DSP_POP 
2fad cd 4d 1e			call macro_forth_dsp_pop 
2fb0				endm 
# End of macro FORTH_DSP_POP
2fb0 e1					pop hl 
2fb1			 
2fb1 23					inc hl 
2fb2 cd 90 1b				call forth_push_numhl 
2fb5					 
2fb5					NEXTW 
2fb5 c3 81 1f			jp macro_next 
2fb8				endm 
# End of macro NEXTW
2fb8			.SBTOS: 
2fb8				CWHEAD .ADSTORE 91 "1-" 2 WORD_FLAG_CODE 
2fb8 6f				db WORD_SYS_CORE+91             
2fb9 ce 2f			dw .ADSTORE            
2fbb 03				db 2 + 1 
2fbc .. 00			db "1-",0              
2fbf				endm 
# End of macro CWHEAD
2fbf			; | 1- ( u -- u )  Decrement value on TOS | DONE 
2fbf			 
2fbf					FORTH_DSP_VALUEHL 
2fbf cd 95 1d			call macro_dsp_valuehl 
2fc2				endm 
# End of macro FORTH_DSP_VALUEHL
2fc2 e5					push hl 
2fc3			 
2fc3					FORTH_DSP_POP 
2fc3 cd 4d 1e			call macro_forth_dsp_pop 
2fc6				endm 
# End of macro FORTH_DSP_POP
2fc6 e1					pop hl 
2fc7			 
2fc7 2b					dec hl 
2fc8 cd 90 1b				call forth_push_numhl 
2fcb					 
2fcb					NEXTW 
2fcb c3 81 1f			jp macro_next 
2fce				endm 
# End of macro NEXTW
2fce			.ADSTORE: 
2fce				CWHEAD .ADWSTORE 91 "1+!" 3 WORD_FLAG_CODE 
2fce 6f				db WORD_SYS_CORE+91             
2fcf e4 2f			dw .ADWSTORE            
2fd1 04				db 3 + 1 
2fd2 .. 00			db "1+!",0              
2fd6				endm 
# End of macro CWHEAD
2fd6			; | 1+! ( addr -- )  Increment byte at address addr | DONE 
2fd6			 
2fd6					FORTH_DSP_VALUEHL 
2fd6 cd 95 1d			call macro_dsp_valuehl 
2fd9				endm 
# End of macro FORTH_DSP_VALUEHL
2fd9 e5					push hl 
2fda			 
2fda					FORTH_DSP_POP 
2fda cd 4d 1e			call macro_forth_dsp_pop 
2fdd				endm 
# End of macro FORTH_DSP_POP
2fdd e1					pop hl 
2fde			 
2fde 7e					ld a, (hl) 
2fdf 3c					inc a 
2fe0 77					ld (hl), a 
2fe1					 
2fe1					NEXTW 
2fe1 c3 81 1f			jp macro_next 
2fe4				endm 
# End of macro NEXTW
2fe4			.ADWSTORE: 
2fe4				CWHEAD .SBSTORE 91 "1+2!" 4 WORD_FLAG_CODE 
2fe4 6f				db WORD_SYS_CORE+91             
2fe5 02 30			dw .SBSTORE            
2fe7 05				db 4 + 1 
2fe8 .. 00			db "1+2!",0              
2fed				endm 
# End of macro CWHEAD
2fed			; | 1+2! ( addr -- )  Increment word at address addr | DONE 
2fed			 
2fed					FORTH_DSP_VALUEHL 
2fed cd 95 1d			call macro_dsp_valuehl 
2ff0				endm 
# End of macro FORTH_DSP_VALUEHL
2ff0 e5					push hl 
2ff1			 
2ff1					FORTH_DSP_POP 
2ff1 cd 4d 1e			call macro_forth_dsp_pop 
2ff4				endm 
# End of macro FORTH_DSP_POP
2ff4 e1					pop hl 
2ff5			 
2ff5 e5					push hl 
2ff6			 
2ff6 cd 03 1f				call loadwordinhl 
2ff9 23					inc hl 
2ffa			 
2ffa d1					pop de 
2ffb eb					ex de, hl 
2ffc 73					ld (hl), e 
2ffd 23					inc hl 
2ffe 72					ld (hl), d 
2fff					 
2fff					NEXTW 
2fff c3 81 1f			jp macro_next 
3002				endm 
# End of macro NEXTW
3002			.SBSTORE: 
3002				CWHEAD .SBWSTORE 91 "1-!" 3 WORD_FLAG_CODE 
3002 6f				db WORD_SYS_CORE+91             
3003 18 30			dw .SBWSTORE            
3005 04				db 3 + 1 
3006 .. 00			db "1-!",0              
300a				endm 
# End of macro CWHEAD
300a			; | 1-! ( addr -- )  Decrement byte at address addr | DONE 
300a			 
300a					FORTH_DSP_VALUEHL 
300a cd 95 1d			call macro_dsp_valuehl 
300d				endm 
# End of macro FORTH_DSP_VALUEHL
300d e5					push hl 
300e			 
300e					FORTH_DSP_POP 
300e cd 4d 1e			call macro_forth_dsp_pop 
3011				endm 
# End of macro FORTH_DSP_POP
3011 e1					pop hl 
3012			 
3012 7e					ld a, (hl) 
3013 3d					dec a 
3014 77					ld (hl), a 
3015					 
3015					NEXTW 
3015 c3 81 1f			jp macro_next 
3018				endm 
# End of macro NEXTW
3018			.SBWSTORE: 
3018				CWHEAD .ENDCORE 91 "1-2!" 4 WORD_FLAG_CODE 
3018 6f				db WORD_SYS_CORE+91             
3019 36 30			dw .ENDCORE            
301b 05				db 4 + 1 
301c .. 00			db "1-2!",0              
3021				endm 
# End of macro CWHEAD
3021			; | 1-2! ( addr -- )  Decrement word at address addr | DONE 
3021			 
3021					FORTH_DSP_VALUEHL 
3021 cd 95 1d			call macro_dsp_valuehl 
3024				endm 
# End of macro FORTH_DSP_VALUEHL
3024 e5					push hl 
3025			 
3025					FORTH_DSP_POP 
3025 cd 4d 1e			call macro_forth_dsp_pop 
3028				endm 
# End of macro FORTH_DSP_POP
3028 e1					pop hl 
3029			 
3029 e5					push hl 
302a			 
302a cd 03 1f				call loadwordinhl 
302d 2b					dec hl 
302e			 
302e d1					pop de 
302f eb					ex de, hl 
3030 73					ld (hl), e 
3031 23					inc hl 
3032 72					ld (hl), d 
3033					 
3033					NEXTW 
3033 c3 81 1f			jp macro_next 
3036				endm 
# End of macro NEXTW
3036			.ENDCORE: 
3036			 
3036			; eof 
3036			 
3036			 
# End of file forth_words_core.asm
3036			include "forth_words_flow.asm" 
3036			 
3036			; | ## Program Flow Words 
3036			 
3036			.IF: 
3036				CWHEAD .THEN 10 "IF" 2 WORD_FLAG_CODE 
3036 1e				db WORD_SYS_CORE+10             
3037 2b 31			dw .THEN            
3039 03				db 2 + 1 
303a .. 00			db "IF",0              
303d				endm 
# End of macro CWHEAD
303d			; | IF ( w -- f ) If TOS is true exec code following up to THEN - Note: currently not supporting ELSE or nested IF | DONE 
303d			; 
303d					if DEBUG_FORTH_WORDS_KEY 
303d						DMARK "IF." 
303d f5				push af  
303e 3a 52 30			ld a, (.dmark)  
3041 32 65 ee			ld (debug_mark),a  
3044 3a 53 30			ld a, (.dmark+1)  
3047 32 66 ee			ld (debug_mark+1),a  
304a 3a 54 30			ld a, (.dmark+2)  
304d 32 67 ee			ld (debug_mark+2),a  
3050 18 03			jr .pastdmark  
3052 ..			.dmark: db "IF."  
3055 f1			.pastdmark: pop af  
3056			endm  
# End of macro DMARK
3056						CALLMONITOR 
3056 cd 6f ee			call debug_vector  
3059				endm  
# End of macro CALLMONITOR
3059					endif 
3059			; eval TOS 
3059			 
3059				FORTH_DSP_VALUEHL 
3059 cd 95 1d			call macro_dsp_valuehl 
305c				endm 
# End of macro FORTH_DSP_VALUEHL
305c			 
305c			;	push hl 
305c				FORTH_DSP_POP 
305c cd 4d 1e			call macro_forth_dsp_pop 
305f				endm 
# End of macro FORTH_DSP_POP
305f			;	pop hl 
305f			 
305f					if DEBUG_FORTH_WORDS 
305f						DMARK "IF1" 
305f f5				push af  
3060 3a 74 30			ld a, (.dmark)  
3063 32 65 ee			ld (debug_mark),a  
3066 3a 75 30			ld a, (.dmark+1)  
3069 32 66 ee			ld (debug_mark+1),a  
306c 3a 76 30			ld a, (.dmark+2)  
306f 32 67 ee			ld (debug_mark+2),a  
3072 18 03			jr .pastdmark  
3074 ..			.dmark: db "IF1"  
3077 f1			.pastdmark: pop af  
3078			endm  
# End of macro DMARK
3078						CALLMONITOR 
3078 cd 6f ee			call debug_vector  
307b				endm  
# End of macro CALLMONITOR
307b					endif 
307b b7				or a        ; clear carry flag 
307c 11 00 00			ld de, 0 
307f eb				ex de,hl 
3080 ed 52			sbc hl, de 
3082 c2 0c 31			jp nz, .iftrue 
3085			 
3085					if DEBUG_FORTH_WORDS 
3085						DMARK "IF2" 
3085 f5				push af  
3086 3a 9a 30			ld a, (.dmark)  
3089 32 65 ee			ld (debug_mark),a  
308c 3a 9b 30			ld a, (.dmark+1)  
308f 32 66 ee			ld (debug_mark+1),a  
3092 3a 9c 30			ld a, (.dmark+2)  
3095 32 67 ee			ld (debug_mark+2),a  
3098 18 03			jr .pastdmark  
309a ..			.dmark: db "IF2"  
309d f1			.pastdmark: pop af  
309e			endm  
# End of macro DMARK
309e						CALLMONITOR 
309e cd 6f ee			call debug_vector  
30a1				endm  
# End of macro CALLMONITOR
30a1					endif 
30a1			 
30a1			; if not true then skip to THEN 
30a1			 
30a1				; TODO get tok_ptr 
30a1				; TODO consume toks until we get to THEN 
30a1			 
30a1 2a bc e5			ld hl, (os_tok_ptr) 
30a4					if DEBUG_FORTH_WORDS 
30a4						DMARK "IF3" 
30a4 f5				push af  
30a5 3a b9 30			ld a, (.dmark)  
30a8 32 65 ee			ld (debug_mark),a  
30ab 3a ba 30			ld a, (.dmark+1)  
30ae 32 66 ee			ld (debug_mark+1),a  
30b1 3a bb 30			ld a, (.dmark+2)  
30b4 32 67 ee			ld (debug_mark+2),a  
30b7 18 03			jr .pastdmark  
30b9 ..			.dmark: db "IF3"  
30bc f1			.pastdmark: pop af  
30bd			endm  
# End of macro DMARK
30bd						CALLMONITOR 
30bd cd 6f ee			call debug_vector  
30c0				endm  
# End of macro CALLMONITOR
30c0						 
30c0					endif 
30c0 11 07 31			ld de, .ifthen 
30c3					if DEBUG_FORTH_WORDS 
30c3						DMARK "IF4" 
30c3 f5				push af  
30c4 3a d8 30			ld a, (.dmark)  
30c7 32 65 ee			ld (debug_mark),a  
30ca 3a d9 30			ld a, (.dmark+1)  
30cd 32 66 ee			ld (debug_mark+1),a  
30d0 3a da 30			ld a, (.dmark+2)  
30d3 32 67 ee			ld (debug_mark+2),a  
30d6 18 03			jr .pastdmark  
30d8 ..			.dmark: db "IF4"  
30db f1			.pastdmark: pop af  
30dc			endm  
# End of macro DMARK
30dc						CALLMONITOR 
30dc cd 6f ee			call debug_vector  
30df				endm  
# End of macro CALLMONITOR
30df					endif 
30df cd 88 20			call findnexttok  
30e2			 
30e2					if DEBUG_FORTH_WORDS 
30e2						DMARK "IF5" 
30e2 f5				push af  
30e3 3a f7 30			ld a, (.dmark)  
30e6 32 65 ee			ld (debug_mark),a  
30e9 3a f8 30			ld a, (.dmark+1)  
30ec 32 66 ee			ld (debug_mark+1),a  
30ef 3a f9 30			ld a, (.dmark+2)  
30f2 32 67 ee			ld (debug_mark+2),a  
30f5 18 03			jr .pastdmark  
30f7 ..			.dmark: db "IF5"  
30fa f1			.pastdmark: pop af  
30fb			endm  
# End of macro DMARK
30fb						CALLMONITOR 
30fb cd 6f ee			call debug_vector  
30fe				endm  
# End of macro CALLMONITOR
30fe					endif 
30fe				; TODO replace below with ; exec using tok_ptr 
30fe 22 bc e5			ld (os_tok_ptr), hl 
3101 c3 0a 20			jp exec1 
3104				NEXTW 
3104 c3 81 1f			jp macro_next 
3107				endm 
# End of macro NEXTW
3107			 
3107 .. 00		.ifthen:  db "THEN",0 
310c			 
310c			.iftrue:		 
310c				; Exec next words normally 
310c			 
310c				; if true then exec following IF as normal 
310c					if DEBUG_FORTH_WORDS 
310c						DMARK "IFT" 
310c f5				push af  
310d 3a 21 31			ld a, (.dmark)  
3110 32 65 ee			ld (debug_mark),a  
3113 3a 22 31			ld a, (.dmark+1)  
3116 32 66 ee			ld (debug_mark+1),a  
3119 3a 23 31			ld a, (.dmark+2)  
311c 32 67 ee			ld (debug_mark+2),a  
311f 18 03			jr .pastdmark  
3121 ..			.dmark: db "IFT"  
3124 f1			.pastdmark: pop af  
3125			endm  
# End of macro DMARK
3125						CALLMONITOR 
3125 cd 6f ee			call debug_vector  
3128				endm  
# End of macro CALLMONITOR
3128					endif 
3128			 
3128					NEXTW 
3128 c3 81 1f			jp macro_next 
312b				endm 
# End of macro NEXTW
312b			.THEN: 
312b				CWHEAD .ELSE 11 "THEN" 4 WORD_FLAG_CODE 
312b 1f				db WORD_SYS_CORE+11             
312c 53 31			dw .ELSE            
312e 05				db 4 + 1 
312f .. 00			db "THEN",0              
3134				endm 
# End of macro CWHEAD
3134			; | THEN ( -- ) Does nothing. It is a marker for the end of an IF block | DONE 
3134					if DEBUG_FORTH_WORDS_KEY 
3134						DMARK "THN" 
3134 f5				push af  
3135 3a 49 31			ld a, (.dmark)  
3138 32 65 ee			ld (debug_mark),a  
313b 3a 4a 31			ld a, (.dmark+1)  
313e 32 66 ee			ld (debug_mark+1),a  
3141 3a 4b 31			ld a, (.dmark+2)  
3144 32 67 ee			ld (debug_mark+2),a  
3147 18 03			jr .pastdmark  
3149 ..			.dmark: db "THN"  
314c f1			.pastdmark: pop af  
314d			endm  
# End of macro DMARK
314d						CALLMONITOR 
314d cd 6f ee			call debug_vector  
3150				endm  
# End of macro CALLMONITOR
3150					endif 
3150					NEXTW 
3150 c3 81 1f			jp macro_next 
3153				endm 
# End of macro NEXTW
3153			.ELSE: 
3153				CWHEAD .DO 12 "ELSE" 2 WORD_FLAG_CODE 
3153 20				db WORD_SYS_CORE+12             
3154 7b 31			dw .DO            
3156 03				db 2 + 1 
3157 .. 00			db "ELSE",0              
315c				endm 
# End of macro CWHEAD
315c			; | ELSE ( -- ) Not supported - does nothing | TODO 
315c			 
315c					if DEBUG_FORTH_WORDS_KEY 
315c						DMARK "ELS" 
315c f5				push af  
315d 3a 71 31			ld a, (.dmark)  
3160 32 65 ee			ld (debug_mark),a  
3163 3a 72 31			ld a, (.dmark+1)  
3166 32 66 ee			ld (debug_mark+1),a  
3169 3a 73 31			ld a, (.dmark+2)  
316c 32 67 ee			ld (debug_mark+2),a  
316f 18 03			jr .pastdmark  
3171 ..			.dmark: db "ELS"  
3174 f1			.pastdmark: pop af  
3175			endm  
# End of macro DMARK
3175						CALLMONITOR 
3175 cd 6f ee			call debug_vector  
3178				endm  
# End of macro CALLMONITOR
3178					endif 
3178			 
3178			 
3178					NEXTW 
3178 c3 81 1f			jp macro_next 
317b				endm 
# End of macro NEXTW
317b			.DO: 
317b				CWHEAD .LOOP 13 "DO" 2 WORD_FLAG_CODE 
317b 21				db WORD_SYS_CORE+13             
317c a2 32			dw .LOOP            
317e 03				db 2 + 1 
317f .. 00			db "DO",0              
3182				endm 
# End of macro CWHEAD
3182			; | DO ( u1 u2 -- ) Loop starting at u2 with a limit of u1 | DONE 
3182			 
3182					if DEBUG_FORTH_WORDS_KEY 
3182						DMARK "DO." 
3182 f5				push af  
3183 3a 97 31			ld a, (.dmark)  
3186 32 65 ee			ld (debug_mark),a  
3189 3a 98 31			ld a, (.dmark+1)  
318c 32 66 ee			ld (debug_mark+1),a  
318f 3a 99 31			ld a, (.dmark+2)  
3192 32 67 ee			ld (debug_mark+2),a  
3195 18 03			jr .pastdmark  
3197 ..			.dmark: db "DO."  
319a f1			.pastdmark: pop af  
319b			endm  
# End of macro DMARK
319b						CALLMONITOR 
319b cd 6f ee			call debug_vector  
319e				endm  
# End of macro CALLMONITOR
319e					endif 
319e			;  push pc to rsp stack past the DO 
319e			 
319e 2a bc e5				ld hl, (os_tok_ptr) 
31a1 23					inc hl   ; D 
31a2 23					inc hl  ; O 
31a3 23					inc hl   ; null 
31a4					if DEBUG_FORTH_WORDS 
31a4						DMARK "DO2" 
31a4 f5				push af  
31a5 3a b9 31			ld a, (.dmark)  
31a8 32 65 ee			ld (debug_mark),a  
31ab 3a ba 31			ld a, (.dmark+1)  
31ae 32 66 ee			ld (debug_mark+1),a  
31b1 3a bb 31			ld a, (.dmark+2)  
31b4 32 67 ee			ld (debug_mark+2),a  
31b7 18 03			jr .pastdmark  
31b9 ..			.dmark: db "DO2"  
31bc f1			.pastdmark: pop af  
31bd			endm  
# End of macro DMARK
31bd						CALLMONITOR 
31bd cd 6f ee			call debug_vector  
31c0				endm  
# End of macro CALLMONITOR
31c0					endif 
31c0					FORTH_RSP_NEXT 
31c0 cd 37 1b			call macro_forth_rsp_next 
31c3				endm 
# End of macro FORTH_RSP_NEXT
31c3					if DEBUG_FORTH_WORDS 
31c3						DMARK "DO3" 
31c3 f5				push af  
31c4 3a d8 31			ld a, (.dmark)  
31c7 32 65 ee			ld (debug_mark),a  
31ca 3a d9 31			ld a, (.dmark+1)  
31cd 32 66 ee			ld (debug_mark+1),a  
31d0 3a da 31			ld a, (.dmark+2)  
31d3 32 67 ee			ld (debug_mark+2),a  
31d6 18 03			jr .pastdmark  
31d8 ..			.dmark: db "DO3"  
31db f1			.pastdmark: pop af  
31dc			endm  
# End of macro DMARK
31dc						CALLMONITOR 
31dc cd 6f ee			call debug_vector  
31df				endm  
# End of macro CALLMONITOR
31df					endif 
31df			 
31df					;if DEBUG_FORTH_WORDS 
31df				;		push hl 
31df			;		endif  
31df			 
31df			; get counters from data stack 
31df			 
31df			 
31df					FORTH_DSP_VALUEHL 
31df cd 95 1d			call macro_dsp_valuehl 
31e2				endm 
# End of macro FORTH_DSP_VALUEHL
31e2 e5					push hl		 ; hl now has starting counter which needs to be tos 
31e3			 
31e3					if DEBUG_FORTH_WORDS 
31e3						DMARK "DO4" 
31e3 f5				push af  
31e4 3a f8 31			ld a, (.dmark)  
31e7 32 65 ee			ld (debug_mark),a  
31ea 3a f9 31			ld a, (.dmark+1)  
31ed 32 66 ee			ld (debug_mark+1),a  
31f0 3a fa 31			ld a, (.dmark+2)  
31f3 32 67 ee			ld (debug_mark+2),a  
31f6 18 03			jr .pastdmark  
31f8 ..			.dmark: db "DO4"  
31fb f1			.pastdmark: pop af  
31fc			endm  
# End of macro DMARK
31fc						CALLMONITOR 
31fc cd 6f ee			call debug_vector  
31ff				endm  
# End of macro CALLMONITOR
31ff					endif 
31ff					FORTH_DSP_POP 
31ff cd 4d 1e			call macro_forth_dsp_pop 
3202				endm 
# End of macro FORTH_DSP_POP
3202			 
3202					if DEBUG_FORTH_WORDS 
3202						DMARK "DO5" 
3202 f5				push af  
3203 3a 17 32			ld a, (.dmark)  
3206 32 65 ee			ld (debug_mark),a  
3209 3a 18 32			ld a, (.dmark+1)  
320c 32 66 ee			ld (debug_mark+1),a  
320f 3a 19 32			ld a, (.dmark+2)  
3212 32 67 ee			ld (debug_mark+2),a  
3215 18 03			jr .pastdmark  
3217 ..			.dmark: db "DO5"  
321a f1			.pastdmark: pop af  
321b			endm  
# End of macro DMARK
321b						CALLMONITOR 
321b cd 6f ee			call debug_vector  
321e				endm  
# End of macro CALLMONITOR
321e					endif 
321e			 
321e					FORTH_DSP_VALUEHL 
321e cd 95 1d			call macro_dsp_valuehl 
3221				endm 
# End of macro FORTH_DSP_VALUEHL
3221			;		push hl		 ; hl now has starting limit counter 
3221			 
3221					if DEBUG_FORTH_WORDS 
3221						DMARK "DO6" 
3221 f5				push af  
3222 3a 36 32			ld a, (.dmark)  
3225 32 65 ee			ld (debug_mark),a  
3228 3a 37 32			ld a, (.dmark+1)  
322b 32 66 ee			ld (debug_mark+1),a  
322e 3a 38 32			ld a, (.dmark+2)  
3231 32 67 ee			ld (debug_mark+2),a  
3234 18 03			jr .pastdmark  
3236 ..			.dmark: db "DO6"  
3239 f1			.pastdmark: pop af  
323a			endm  
# End of macro DMARK
323a						CALLMONITOR 
323a cd 6f ee			call debug_vector  
323d				endm  
# End of macro CALLMONITOR
323d					endif 
323d					FORTH_DSP_POP 
323d cd 4d 1e			call macro_forth_dsp_pop 
3240				endm 
# End of macro FORTH_DSP_POP
3240			 
3240			; put counters on the loop stack 
3240			 
3240			;		pop hl			 ; limit counter 
3240 d1					pop de			; start counter 
3241			 
3241					; push limit counter 
3241			 
3241					if DEBUG_FORTH_WORDS 
3241						DMARK "DO7" 
3241 f5				push af  
3242 3a 56 32			ld a, (.dmark)  
3245 32 65 ee			ld (debug_mark),a  
3248 3a 57 32			ld a, (.dmark+1)  
324b 32 66 ee			ld (debug_mark+1),a  
324e 3a 58 32			ld a, (.dmark+2)  
3251 32 67 ee			ld (debug_mark+2),a  
3254 18 03			jr .pastdmark  
3256 ..			.dmark: db "DO7"  
3259 f1			.pastdmark: pop af  
325a			endm  
# End of macro DMARK
325a						CALLMONITOR 
325a cd 6f ee			call debug_vector  
325d				endm  
# End of macro CALLMONITOR
325d					endif 
325d					FORTH_LOOP_NEXT 
325d cd c6 1d			call macro_forth_loop_next 
3260				endm 
# End of macro FORTH_LOOP_NEXT
3260			 
3260					; push start counter 
3260			 
3260 eb					ex de, hl 
3261					if DEBUG_FORTH_WORDS 
3261						DMARK "DO7" 
3261 f5				push af  
3262 3a 76 32			ld a, (.dmark)  
3265 32 65 ee			ld (debug_mark),a  
3268 3a 77 32			ld a, (.dmark+1)  
326b 32 66 ee			ld (debug_mark+1),a  
326e 3a 78 32			ld a, (.dmark+2)  
3271 32 67 ee			ld (debug_mark+2),a  
3274 18 03			jr .pastdmark  
3276 ..			.dmark: db "DO7"  
3279 f1			.pastdmark: pop af  
327a			endm  
# End of macro DMARK
327a						CALLMONITOR 
327a cd 6f ee			call debug_vector  
327d				endm  
# End of macro CALLMONITOR
327d					endif 
327d					FORTH_LOOP_NEXT 
327d cd c6 1d			call macro_forth_loop_next 
3280				endm 
# End of macro FORTH_LOOP_NEXT
3280			 
3280			 
3280					; init first round of I counter 
3280			 
3280 22 e0 e5				ld (os_current_i), hl 
3283			 
3283					if DEBUG_FORTH_WORDS 
3283						DMARK "DO8" 
3283 f5				push af  
3284 3a 98 32			ld a, (.dmark)  
3287 32 65 ee			ld (debug_mark),a  
328a 3a 99 32			ld a, (.dmark+1)  
328d 32 66 ee			ld (debug_mark+1),a  
3290 3a 9a 32			ld a, (.dmark+2)  
3293 32 67 ee			ld (debug_mark+2),a  
3296 18 03			jr .pastdmark  
3298 ..			.dmark: db "DO8"  
329b f1			.pastdmark: pop af  
329c			endm  
# End of macro DMARK
329c						CALLMONITOR 
329c cd 6f ee			call debug_vector  
329f				endm  
# End of macro CALLMONITOR
329f					endif 
329f			 
329f					NEXTW 
329f c3 81 1f			jp macro_next 
32a2				endm 
# End of macro NEXTW
32a2			.LOOP: 
32a2				CWHEAD .I 14 "LOOP" 4 WORD_FLAG_CODE 
32a2 22				db WORD_SYS_CORE+14             
32a3 ba 33			dw .I            
32a5 05				db 4 + 1 
32a6 .. 00			db "LOOP",0              
32ab				endm 
# End of macro CWHEAD
32ab			; | LOOP ( -- ) Increment and test loop counter  | DONE 
32ab			 
32ab				; pop tos as current loop count to hl 
32ab			 
32ab				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
32ab			 
32ab				FORTH_LOOP_TOS 
32ab cd f9 1d			call macro_forth_loop_tos 
32ae				endm 
# End of macro FORTH_LOOP_TOS
32ae e5				push hl 
32af			 
32af					if DEBUG_FORTH_WORDS_KEY 
32af						DMARK "LOP" 
32af f5				push af  
32b0 3a c4 32			ld a, (.dmark)  
32b3 32 65 ee			ld (debug_mark),a  
32b6 3a c5 32			ld a, (.dmark+1)  
32b9 32 66 ee			ld (debug_mark+1),a  
32bc 3a c6 32			ld a, (.dmark+2)  
32bf 32 67 ee			ld (debug_mark+2),a  
32c2 18 03			jr .pastdmark  
32c4 ..			.dmark: db "LOP"  
32c7 f1			.pastdmark: pop af  
32c8			endm  
# End of macro DMARK
32c8						CALLMONITOR 
32c8 cd 6f ee			call debug_vector  
32cb				endm  
# End of macro CALLMONITOR
32cb					endif 
32cb				; next item on the stack is the limit. get it 
32cb			 
32cb			 
32cb				FORTH_LOOP_POP 
32cb cd 03 1e			call macro_forth_loop_pop 
32ce				endm 
# End of macro FORTH_LOOP_POP
32ce			 
32ce				FORTH_LOOP_TOS 
32ce cd f9 1d			call macro_forth_loop_tos 
32d1				endm 
# End of macro FORTH_LOOP_TOS
32d1			 
32d1 d1				pop de		 ; de = i, hl = limit 
32d2			 
32d2					if DEBUG_FORTH_WORDS 
32d2						DMARK "LP1" 
32d2 f5				push af  
32d3 3a e7 32			ld a, (.dmark)  
32d6 32 65 ee			ld (debug_mark),a  
32d9 3a e8 32			ld a, (.dmark+1)  
32dc 32 66 ee			ld (debug_mark+1),a  
32df 3a e9 32			ld a, (.dmark+2)  
32e2 32 67 ee			ld (debug_mark+2),a  
32e5 18 03			jr .pastdmark  
32e7 ..			.dmark: db "LP1"  
32ea f1			.pastdmark: pop af  
32eb			endm  
# End of macro DMARK
32eb						CALLMONITOR 
32eb cd 6f ee			call debug_vector  
32ee				endm  
# End of macro CALLMONITOR
32ee					endif 
32ee			 
32ee				; go back to previous word 
32ee			 
32ee d5				push de    ; save I for inc later 
32ef			 
32ef			 
32ef				; get limit 
32ef				;  is I at limit? 
32ef			 
32ef			 
32ef					if DEBUG_FORTH_WORDS 
32ef						DMARK "LP1" 
32ef f5				push af  
32f0 3a 04 33			ld a, (.dmark)  
32f3 32 65 ee			ld (debug_mark),a  
32f6 3a 05 33			ld a, (.dmark+1)  
32f9 32 66 ee			ld (debug_mark+1),a  
32fc 3a 06 33			ld a, (.dmark+2)  
32ff 32 67 ee			ld (debug_mark+2),a  
3302 18 03			jr .pastdmark  
3304 ..			.dmark: db "LP1"  
3307 f1			.pastdmark: pop af  
3308			endm  
# End of macro DMARK
3308						CALLMONITOR 
3308 cd 6f ee			call debug_vector  
330b				endm  
# End of macro CALLMONITOR
330b					endif 
330b			 
330b ed 52			sbc hl, de 
330d			 
330d			 
330d				;  if at limit pop both limit and current off stack do NEXT and get rid of saved DO 
330d			 
330d 20 26				jr nz, .loopnotdone 
330f			 
330f e1				pop hl   ; get rid of saved I 
3310				FORTH_LOOP_POP     ; get rid of limit 
3310 cd 03 1e			call macro_forth_loop_pop 
3313				endm 
# End of macro FORTH_LOOP_POP
3313			 
3313				FORTH_RSP_POP     ; get rid of DO ptr 
3313 cd 58 1b			call macro_forth_rsp_pop 
3316				endm 
# End of macro FORTH_RSP_POP
3316			 
3316			if DEBUG_FORTH_WORDS 
3316						DMARK "LP>" 
3316 f5				push af  
3317 3a 2b 33			ld a, (.dmark)  
331a 32 65 ee			ld (debug_mark),a  
331d 3a 2c 33			ld a, (.dmark+1)  
3320 32 66 ee			ld (debug_mark+1),a  
3323 3a 2d 33			ld a, (.dmark+2)  
3326 32 67 ee			ld (debug_mark+2),a  
3329 18 03			jr .pastdmark  
332b ..			.dmark: db "LP>"  
332e f1			.pastdmark: pop af  
332f			endm  
# End of macro DMARK
332f				CALLMONITOR 
332f cd 6f ee			call debug_vector  
3332				endm  
# End of macro CALLMONITOR
3332			endif 
3332			 
3332					NEXTW 
3332 c3 81 1f			jp macro_next 
3335				endm 
# End of macro NEXTW
3335				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
3335			 
3335			.loopnotdone: 
3335			 
3335 e1				pop hl    ; get I 
3336 23				inc hl 
3337			 
3337			   	; save new I 
3337			 
3337			 
3337					; set I counter 
3337			 
3337 22 e0 e5				ld (os_current_i), hl 
333a			 
333a					if DEBUG_FORTH_WORDS 
333a						DMARK "LPN" 
333a f5				push af  
333b 3a 4f 33			ld a, (.dmark)  
333e 32 65 ee			ld (debug_mark),a  
3341 3a 50 33			ld a, (.dmark+1)  
3344 32 66 ee			ld (debug_mark+1),a  
3347 3a 51 33			ld a, (.dmark+2)  
334a 32 67 ee			ld (debug_mark+2),a  
334d 18 03			jr .pastdmark  
334f ..			.dmark: db "LPN"  
3352 f1			.pastdmark: pop af  
3353			endm  
# End of macro DMARK
3353					CALLMONITOR 
3353 cd 6f ee			call debug_vector  
3356				endm  
# End of macro CALLMONITOR
3356					endif 
3356					 
3356				FORTH_LOOP_NEXT 
3356 cd c6 1d			call macro_forth_loop_next 
3359				endm 
# End of macro FORTH_LOOP_NEXT
3359			 
3359			 
3359					if DEBUG_FORTH_WORDS 
3359 eb						ex de,hl 
335a					endif 
335a			 
335a			;	; get DO ptr 
335a			; 
335a					if DEBUG_FORTH_WORDS 
335a						DMARK "LP7" 
335a f5				push af  
335b 3a 6f 33			ld a, (.dmark)  
335e 32 65 ee			ld (debug_mark),a  
3361 3a 70 33			ld a, (.dmark+1)  
3364 32 66 ee			ld (debug_mark+1),a  
3367 3a 71 33			ld a, (.dmark+2)  
336a 32 67 ee			ld (debug_mark+2),a  
336d 18 03			jr .pastdmark  
336f ..			.dmark: db "LP7"  
3372 f1			.pastdmark: pop af  
3373			endm  
# End of macro DMARK
3373					CALLMONITOR 
3373 cd 6f ee			call debug_vector  
3376				endm  
# End of macro CALLMONITOR
3376					endif 
3376				FORTH_RSP_TOS 
3376 cd 4e 1b			call macro_forth_rsp_tos 
3379				endm 
# End of macro FORTH_RSP_TOS
3379			 
3379					if DEBUG_FORTH_WORDS 
3379						DMARK "LP8" 
3379 f5				push af  
337a 3a 8e 33			ld a, (.dmark)  
337d 32 65 ee			ld (debug_mark),a  
3380 3a 8f 33			ld a, (.dmark+1)  
3383 32 66 ee			ld (debug_mark+1),a  
3386 3a 90 33			ld a, (.dmark+2)  
3389 32 67 ee			ld (debug_mark+2),a  
338c 18 03			jr .pastdmark  
338e ..			.dmark: db "LP8"  
3391 f1			.pastdmark: pop af  
3392			endm  
# End of macro DMARK
3392					CALLMONITOR 
3392 cd 6f ee			call debug_vector  
3395				endm  
# End of macro CALLMONITOR
3395					endif 
3395				;push hl 
3395			 
3395				; not going to DO any more 
3395				; get rid of the RSP pointer as DO will add it back in 
3395				;FORTH_RSP_POP 
3395				;pop hl 
3395			 
3395				;ld hl,(cli_ret_sp) 
3395				;ld e, (hl) 
3395				;inc hl 
3395				;ld d, (hl) 
3395				;ex de,hl 
3395 22 bc e5			ld (os_tok_ptr), hl 
3398					if DEBUG_FORTH_WORDS 
3398						DMARK "LP<" 
3398 f5				push af  
3399 3a ad 33			ld a, (.dmark)  
339c 32 65 ee			ld (debug_mark),a  
339f 3a ae 33			ld a, (.dmark+1)  
33a2 32 66 ee			ld (debug_mark+1),a  
33a5 3a af 33			ld a, (.dmark+2)  
33a8 32 67 ee			ld (debug_mark+2),a  
33ab 18 03			jr .pastdmark  
33ad ..			.dmark: db "LP<"  
33b0 f1			.pastdmark: pop af  
33b1			endm  
# End of macro DMARK
33b1					CALLMONITOR 
33b1 cd 6f ee			call debug_vector  
33b4				endm  
# End of macro CALLMONITOR
33b4				endif 
33b4 c3 0a 20			jp exec1 
33b7			 
33b7					 
33b7			 
33b7			 
33b7					NEXTW 
33b7 c3 81 1f			jp macro_next 
33ba				endm 
# End of macro NEXTW
33ba			.I:  
33ba			 
33ba				CWHEAD .DLOOP 74 "I" 1 WORD_FLAG_CODE 
33ba 5e				db WORD_SYS_CORE+74             
33bb e5 33			dw .DLOOP            
33bd 02				db 1 + 1 
33be .. 00			db "I",0              
33c0				endm 
# End of macro CWHEAD
33c0			; | I ( -- ) Current loop counter | DONE 
33c0					if DEBUG_FORTH_WORDS_KEY 
33c0						DMARK "I.." 
33c0 f5				push af  
33c1 3a d5 33			ld a, (.dmark)  
33c4 32 65 ee			ld (debug_mark),a  
33c7 3a d6 33			ld a, (.dmark+1)  
33ca 32 66 ee			ld (debug_mark+1),a  
33cd 3a d7 33			ld a, (.dmark+2)  
33d0 32 67 ee			ld (debug_mark+2),a  
33d3 18 03			jr .pastdmark  
33d5 ..			.dmark: db "I.."  
33d8 f1			.pastdmark: pop af  
33d9			endm  
# End of macro DMARK
33d9						CALLMONITOR 
33d9 cd 6f ee			call debug_vector  
33dc				endm  
# End of macro CALLMONITOR
33dc					endif 
33dc			 
33dc 2a e0 e5				ld hl,(os_current_i) 
33df cd 90 1b				call forth_push_numhl 
33e2			 
33e2					NEXTW 
33e2 c3 81 1f			jp macro_next 
33e5				endm 
# End of macro NEXTW
33e5			.DLOOP: 
33e5				CWHEAD .REPEAT 75 "-LOOP" 5 WORD_FLAG_CODE 
33e5 5f				db WORD_SYS_CORE+75             
33e6 c6 34			dw .REPEAT            
33e8 06				db 5 + 1 
33e9 .. 00			db "-LOOP",0              
33ef				endm 
# End of macro CWHEAD
33ef			; | -LOOP ( -- ) Decrement and test loop counter  | DONE 
33ef				; pop tos as current loop count to hl 
33ef					if DEBUG_FORTH_WORDS_KEY 
33ef						DMARK "-LP" 
33ef f5				push af  
33f0 3a 04 34			ld a, (.dmark)  
33f3 32 65 ee			ld (debug_mark),a  
33f6 3a 05 34			ld a, (.dmark+1)  
33f9 32 66 ee			ld (debug_mark+1),a  
33fc 3a 06 34			ld a, (.dmark+2)  
33ff 32 67 ee			ld (debug_mark+2),a  
3402 18 03			jr .pastdmark  
3404 ..			.dmark: db "-LP"  
3407 f1			.pastdmark: pop af  
3408			endm  
# End of macro DMARK
3408						CALLMONITOR 
3408 cd 6f ee			call debug_vector  
340b				endm  
# End of macro CALLMONITOR
340b					endif 
340b			 
340b				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
340b			 
340b				FORTH_LOOP_TOS 
340b cd f9 1d			call macro_forth_loop_tos 
340e				endm 
# End of macro FORTH_LOOP_TOS
340e e5				push hl 
340f			 
340f					if DEBUG_FORTH_WORDS 
340f						DMARK "-LP" 
340f f5				push af  
3410 3a 24 34			ld a, (.dmark)  
3413 32 65 ee			ld (debug_mark),a  
3416 3a 25 34			ld a, (.dmark+1)  
3419 32 66 ee			ld (debug_mark+1),a  
341c 3a 26 34			ld a, (.dmark+2)  
341f 32 67 ee			ld (debug_mark+2),a  
3422 18 03			jr .pastdmark  
3424 ..			.dmark: db "-LP"  
3427 f1			.pastdmark: pop af  
3428			endm  
# End of macro DMARK
3428						CALLMONITOR 
3428 cd 6f ee			call debug_vector  
342b				endm  
# End of macro CALLMONITOR
342b					endif 
342b				; next item on the stack is the limit. get it 
342b			 
342b			 
342b				FORTH_LOOP_POP 
342b cd 03 1e			call macro_forth_loop_pop 
342e				endm 
# End of macro FORTH_LOOP_POP
342e			 
342e				FORTH_LOOP_TOS 
342e cd f9 1d			call macro_forth_loop_tos 
3431				endm 
# End of macro FORTH_LOOP_TOS
3431			 
3431 d1				pop de		 ; de = i, hl = limit 
3432			 
3432					if DEBUG_FORTH_WORDS 
3432						DMARK "-L1" 
3432 f5				push af  
3433 3a 47 34			ld a, (.dmark)  
3436 32 65 ee			ld (debug_mark),a  
3439 3a 48 34			ld a, (.dmark+1)  
343c 32 66 ee			ld (debug_mark+1),a  
343f 3a 49 34			ld a, (.dmark+2)  
3442 32 67 ee			ld (debug_mark+2),a  
3445 18 03			jr .pastdmark  
3447 ..			.dmark: db "-L1"  
344a f1			.pastdmark: pop af  
344b			endm  
# End of macro DMARK
344b						CALLMONITOR 
344b cd 6f ee			call debug_vector  
344e				endm  
# End of macro CALLMONITOR
344e					endif 
344e			 
344e				; go back to previous word 
344e			 
344e d5				push de    ; save I for inc later 
344f			 
344f			 
344f				; get limit 
344f				;  is I at limit? 
344f			 
344f			 
344f					if DEBUG_FORTH_WORDS 
344f						DMARK "-L1" 
344f f5				push af  
3450 3a 64 34			ld a, (.dmark)  
3453 32 65 ee			ld (debug_mark),a  
3456 3a 65 34			ld a, (.dmark+1)  
3459 32 66 ee			ld (debug_mark+1),a  
345c 3a 66 34			ld a, (.dmark+2)  
345f 32 67 ee			ld (debug_mark+2),a  
3462 18 03			jr .pastdmark  
3464 ..			.dmark: db "-L1"  
3467 f1			.pastdmark: pop af  
3468			endm  
# End of macro DMARK
3468						CALLMONITOR 
3468 cd 6f ee			call debug_vector  
346b				endm  
# End of macro CALLMONITOR
346b					endif 
346b			 
346b ed 52			sbc hl, de 
346d			 
346d			 
346d				;  if at limit pop both limit and current off stack do NEXT and get rid of saved DO 
346d			 
346d 20 26				jr nz, .mloopnotdone 
346f			 
346f e1				pop hl   ; get rid of saved I 
3470				FORTH_LOOP_POP     ; get rid of limit 
3470 cd 03 1e			call macro_forth_loop_pop 
3473				endm 
# End of macro FORTH_LOOP_POP
3473			 
3473				FORTH_RSP_POP     ; get rid of DO ptr 
3473 cd 58 1b			call macro_forth_rsp_pop 
3476				endm 
# End of macro FORTH_RSP_POP
3476			 
3476			if DEBUG_FORTH_WORDS 
3476						DMARK "-L>" 
3476 f5				push af  
3477 3a 8b 34			ld a, (.dmark)  
347a 32 65 ee			ld (debug_mark),a  
347d 3a 8c 34			ld a, (.dmark+1)  
3480 32 66 ee			ld (debug_mark+1),a  
3483 3a 8d 34			ld a, (.dmark+2)  
3486 32 67 ee			ld (debug_mark+2),a  
3489 18 03			jr .pastdmark  
348b ..			.dmark: db "-L>"  
348e f1			.pastdmark: pop af  
348f			endm  
# End of macro DMARK
348f				CALLMONITOR 
348f cd 6f ee			call debug_vector  
3492				endm  
# End of macro CALLMONITOR
3492			endif 
3492			 
3492					NEXTW 
3492 c3 81 1f			jp macro_next 
3495				endm 
# End of macro NEXTW
3495				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
3495			 
3495			.mloopnotdone: 
3495			 
3495 e1				pop hl    ; get I 
3496 2b				dec hl 
3497			 
3497			   	; save new I 
3497			 
3497			 
3497					; set I counter 
3497			 
3497 22 e0 e5				ld (os_current_i), hl 
349a			 
349a					 
349a				FORTH_LOOP_NEXT 
349a cd c6 1d			call macro_forth_loop_next 
349d				endm 
# End of macro FORTH_LOOP_NEXT
349d			 
349d			 
349d					if DEBUG_FORTH_WORDS 
349d eb						ex de,hl 
349e					endif 
349e			 
349e			;	; get DO ptr 
349e			; 
349e				FORTH_RSP_TOS 
349e cd 4e 1b			call macro_forth_rsp_tos 
34a1				endm 
# End of macro FORTH_RSP_TOS
34a1			 
34a1				;push hl 
34a1			 
34a1				; not going to DO any more 
34a1				; get rid of the RSP pointer as DO will add it back in 
34a1				;FORTH_RSP_POP 
34a1				;pop hl 
34a1			 
34a1			 
34a1 22 bc e5			ld (os_tok_ptr), hl 
34a4					if DEBUG_FORTH_WORDS 
34a4						DMARK "-L<" 
34a4 f5				push af  
34a5 3a b9 34			ld a, (.dmark)  
34a8 32 65 ee			ld (debug_mark),a  
34ab 3a ba 34			ld a, (.dmark+1)  
34ae 32 66 ee			ld (debug_mark+1),a  
34b1 3a bb 34			ld a, (.dmark+2)  
34b4 32 67 ee			ld (debug_mark+2),a  
34b7 18 03			jr .pastdmark  
34b9 ..			.dmark: db "-L<"  
34bc f1			.pastdmark: pop af  
34bd			endm  
# End of macro DMARK
34bd					CALLMONITOR 
34bd cd 6f ee			call debug_vector  
34c0				endm  
# End of macro CALLMONITOR
34c0				endif 
34c0 c3 0a 20			jp exec1 
34c3			 
34c3					 
34c3			 
34c3			 
34c3			 
34c3				NEXTW 
34c3 c3 81 1f			jp macro_next 
34c6				endm 
# End of macro NEXTW
34c6			 
34c6			 
34c6			 
34c6			 
34c6			.REPEAT: 
34c6				CWHEAD .UNTIL 93 "REPEAT" 5 WORD_FLAG_CODE 
34c6 71				db WORD_SYS_CORE+93             
34c7 19 35			dw .UNTIL            
34c9 06				db 5 + 1 
34ca .. 00			db "REPEAT",0              
34d1				endm 
# End of macro CWHEAD
34d1			; | REPEAT ( --  ) Start REPEAT...UNTIL loop  | DONE 
34d1			;  push pc to rsp stack past the REPEAT 
34d1					if DEBUG_FORTH_WORDS_KEY 
34d1						DMARK "REP" 
34d1 f5				push af  
34d2 3a e6 34			ld a, (.dmark)  
34d5 32 65 ee			ld (debug_mark),a  
34d8 3a e7 34			ld a, (.dmark+1)  
34db 32 66 ee			ld (debug_mark+1),a  
34de 3a e8 34			ld a, (.dmark+2)  
34e1 32 67 ee			ld (debug_mark+2),a  
34e4 18 03			jr .pastdmark  
34e6 ..			.dmark: db "REP"  
34e9 f1			.pastdmark: pop af  
34ea			endm  
# End of macro DMARK
34ea						CALLMONITOR 
34ea cd 6f ee			call debug_vector  
34ed				endm  
# End of macro CALLMONITOR
34ed					endif 
34ed			 
34ed 2a bc e5				ld hl, (os_tok_ptr) 
34f0 23					inc hl   ; R 
34f1 23					inc hl  ; E 
34f2 23					inc hl   ; P 
34f3 23					inc hl   ; E 
34f4 23					inc hl   ; A 
34f5 23					inc hl   ; T 
34f6 23					inc hl   ; zero 
34f7					FORTH_RSP_NEXT 
34f7 cd 37 1b			call macro_forth_rsp_next 
34fa				endm 
# End of macro FORTH_RSP_NEXT
34fa			 
34fa			 
34fa					if DEBUG_FORTH_WORDS 
34fa						DMARK "REP" 
34fa f5				push af  
34fb 3a 0f 35			ld a, (.dmark)  
34fe 32 65 ee			ld (debug_mark),a  
3501 3a 10 35			ld a, (.dmark+1)  
3504 32 66 ee			ld (debug_mark+1),a  
3507 3a 11 35			ld a, (.dmark+2)  
350a 32 67 ee			ld (debug_mark+2),a  
350d 18 03			jr .pastdmark  
350f ..			.dmark: db "REP"  
3512 f1			.pastdmark: pop af  
3513			endm  
# End of macro DMARK
3513						;pop bc    ; TODO BUG ?????? what is this for???? 
3513						CALLMONITOR 
3513 cd 6f ee			call debug_vector  
3516				endm  
# End of macro CALLMONITOR
3516					endif 
3516			 
3516					NEXTW 
3516 c3 81 1f			jp macro_next 
3519				endm 
# End of macro NEXTW
3519			;	       NEXTW 
3519			 
3519			.UNTIL: 
3519				CWHEAD .ENDFLOW 94 "UNTIL" 5 WORD_FLAG_CODE 
3519 72				db WORD_SYS_CORE+94             
351a b0 35			dw .ENDFLOW            
351c 06				db 5 + 1 
351d .. 00			db "UNTIL",0              
3523				endm 
# End of macro CWHEAD
3523			; | UNTIL ( u -- ) Exit REPEAT...UNTIL loop if TOS is false  | DONE 
3523			 
3523				; pop tos as check 
3523			 
3523				; if new tos (loop limit) is not same as hl, inc hl, push hl to tos, pop rsp and set pc to it 
3523			 
3523				FORTH_DSP_VALUEHL 
3523 cd 95 1d			call macro_dsp_valuehl 
3526				endm 
# End of macro FORTH_DSP_VALUEHL
3526			 
3526					if DEBUG_FORTH_WORDS_KEY 
3526						DMARK "UNT" 
3526 f5				push af  
3527 3a 3b 35			ld a, (.dmark)  
352a 32 65 ee			ld (debug_mark),a  
352d 3a 3c 35			ld a, (.dmark+1)  
3530 32 66 ee			ld (debug_mark+1),a  
3533 3a 3d 35			ld a, (.dmark+2)  
3536 32 67 ee			ld (debug_mark+2),a  
3539 18 03			jr .pastdmark  
353b ..			.dmark: db "UNT"  
353e f1			.pastdmark: pop af  
353f			endm  
# End of macro DMARK
353f						CALLMONITOR 
353f cd 6f ee			call debug_vector  
3542				endm  
# End of macro CALLMONITOR
3542					endif 
3542			 
3542			;	push hl 
3542				FORTH_DSP_POP 
3542 cd 4d 1e			call macro_forth_dsp_pop 
3545				endm 
# End of macro FORTH_DSP_POP
3545			 
3545			;	pop hl 
3545			 
3545				; test if true 
3545			 
3545 cd 1e 0e			call ishlzero 
3548			;	ld a,l 
3548			;	add h 
3548			; 
3548			;	cp 0 
3548			 
3548 20 3e			jr nz, .untilnotdone 
354a			 
354a					if DEBUG_FORTH_WORDS 
354a						DMARK "UNf" 
354a f5				push af  
354b 3a 5f 35			ld a, (.dmark)  
354e 32 65 ee			ld (debug_mark),a  
3551 3a 60 35			ld a, (.dmark+1)  
3554 32 66 ee			ld (debug_mark+1),a  
3557 3a 61 35			ld a, (.dmark+2)  
355a 32 67 ee			ld (debug_mark+2),a  
355d 18 03			jr .pastdmark  
355f ..			.dmark: db "UNf"  
3562 f1			.pastdmark: pop af  
3563			endm  
# End of macro DMARK
3563						CALLMONITOR 
3563 cd 6f ee			call debug_vector  
3566				endm  
# End of macro CALLMONITOR
3566					endif 
3566			 
3566			 
3566			 
3566				FORTH_RSP_POP     ; get rid of DO ptr 
3566 cd 58 1b			call macro_forth_rsp_pop 
3569				endm 
# End of macro FORTH_RSP_POP
3569			 
3569			if DEBUG_FORTH_WORDS 
3569						DMARK "UN>" 
3569 f5				push af  
356a 3a 7e 35			ld a, (.dmark)  
356d 32 65 ee			ld (debug_mark),a  
3570 3a 7f 35			ld a, (.dmark+1)  
3573 32 66 ee			ld (debug_mark+1),a  
3576 3a 80 35			ld a, (.dmark+2)  
3579 32 67 ee			ld (debug_mark+2),a  
357c 18 03			jr .pastdmark  
357e ..			.dmark: db "UN>"  
3581 f1			.pastdmark: pop af  
3582			endm  
# End of macro DMARK
3582				CALLMONITOR 
3582 cd 6f ee			call debug_vector  
3585				endm  
# End of macro CALLMONITOR
3585			endif 
3585			 
3585					NEXTW 
3585 c3 81 1f			jp macro_next 
3588				endm 
# End of macro NEXTW
3588				; if not at limit. Inc I and update TOS get RTS off stack and reset parser 
3588			 
3588			.untilnotdone: 
3588			 
3588			 
3588			;	; get DO ptr 
3588			; 
3588				FORTH_RSP_TOS 
3588 cd 4e 1b			call macro_forth_rsp_tos 
358b				endm 
# End of macro FORTH_RSP_TOS
358b			 
358b				;push hl 
358b			 
358b				; not going to DO any more 
358b				; get rid of the RSP pointer as DO will add it back in 
358b				;FORTH_RSP_POP 
358b				;pop hl 
358b			 
358b			 
358b 22 bc e5			ld (os_tok_ptr), hl 
358e					if DEBUG_FORTH_WORDS 
358e						DMARK "UN<" 
358e f5				push af  
358f 3a a3 35			ld a, (.dmark)  
3592 32 65 ee			ld (debug_mark),a  
3595 3a a4 35			ld a, (.dmark+1)  
3598 32 66 ee			ld (debug_mark+1),a  
359b 3a a5 35			ld a, (.dmark+2)  
359e 32 67 ee			ld (debug_mark+2),a  
35a1 18 03			jr .pastdmark  
35a3 ..			.dmark: db "UN<"  
35a6 f1			.pastdmark: pop af  
35a7			endm  
# End of macro DMARK
35a7					CALLMONITOR 
35a7 cd 6f ee			call debug_vector  
35aa				endm  
# End of macro CALLMONITOR
35aa				endif 
35aa c3 0a 20			jp exec1 
35ad			 
35ad					 
35ad			 
35ad			 
35ad					NEXTW 
35ad c3 81 1f			jp macro_next 
35b0				endm 
# End of macro NEXTW
35b0			 
35b0			 
35b0			.ENDFLOW: 
35b0			 
35b0			; eof 
35b0			 
# End of file forth_words_flow.asm
35b0			; TODO something wrong with the first word of the next word group. no matter which group applies. On device, sc114 is fine. bad memory? 
35b0			include "forth_words_logic.asm" 
35b0			 
35b0			; | ## Logic Words 
35b0			 
35b0			.NOT: 
35b0				CWHEAD .IS 25 "NOT" 3 WORD_FLAG_CODE 
35b0 2d				db WORD_SYS_CORE+25             
35b1 f8 35			dw .IS            
35b3 04				db 3 + 1 
35b4 .. 00			db "NOT",0              
35b8				endm 
# End of macro CWHEAD
35b8			; | NOT ( u  -- u ) Inverse true/false on stack | DONE 
35b8					if DEBUG_FORTH_WORDS_KEY 
35b8						DMARK "NOT" 
35b8 f5				push af  
35b9 3a cd 35			ld a, (.dmark)  
35bc 32 65 ee			ld (debug_mark),a  
35bf 3a ce 35			ld a, (.dmark+1)  
35c2 32 66 ee			ld (debug_mark+1),a  
35c5 3a cf 35			ld a, (.dmark+2)  
35c8 32 67 ee			ld (debug_mark+2),a  
35cb 18 03			jr .pastdmark  
35cd ..			.dmark: db "NOT"  
35d0 f1			.pastdmark: pop af  
35d1			endm  
# End of macro DMARK
35d1						CALLMONITOR 
35d1 cd 6f ee			call debug_vector  
35d4				endm  
# End of macro CALLMONITOR
35d4					endif 
35d4					FORTH_DSP 
35d4 cd 5b 1d			call macro_forth_dsp 
35d7				endm 
# End of macro FORTH_DSP
35d7 7e					ld a,(hl)	; get type of value on TOS 
35d8 fe 02				cp DS_TYPE_INUM  
35da 28 03				jr z, .noti 
35dc					NEXTW 
35dc c3 81 1f			jp macro_next 
35df				endm 
# End of macro NEXTW
35df			.noti:          FORTH_DSP_VALUEHL 
35df cd 95 1d			call macro_dsp_valuehl 
35e2				endm 
# End of macro FORTH_DSP_VALUEHL
35e2			;		push hl 
35e2					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
35e2 cd 4d 1e			call macro_forth_dsp_pop 
35e5				endm 
# End of macro FORTH_DSP_POP
35e5			;		pop hl 
35e5 3e 00				ld a,0 
35e7 bd					cp l 
35e8 28 04				jr z, .not2t 
35ea 2e 00				ld l, 0 
35ec 18 02				jr .notip 
35ee			 
35ee 2e ff		.not2t:		ld l, 255 
35f0			 
35f0 26 00		.notip:		ld h, 0	 
35f2			 
35f2 cd 90 1b				call forth_push_numhl 
35f5					NEXTW 
35f5 c3 81 1f			jp macro_next 
35f8				endm 
# End of macro NEXTW
35f8			 
35f8			.IS: 
35f8				CWHEAD .LZERO 25 "IS" 2 WORD_FLAG_CODE 
35f8 2d				db WORD_SYS_CORE+25             
35f9 1e 36			dw .LZERO            
35fb 03				db 2 + 1 
35fc .. 00			db "IS",0              
35ff				endm 
# End of macro CWHEAD
35ff			; | IS ( s1 s2  -- f ) Push true if string s1 is the same as s2 | TODO 
35ff					if DEBUG_FORTH_WORDS_KEY 
35ff						DMARK "IS." 
35ff f5				push af  
3600 3a 14 36			ld a, (.dmark)  
3603 32 65 ee			ld (debug_mark),a  
3606 3a 15 36			ld a, (.dmark+1)  
3609 32 66 ee			ld (debug_mark+1),a  
360c 3a 16 36			ld a, (.dmark+2)  
360f 32 67 ee			ld (debug_mark+2),a  
3612 18 03			jr .pastdmark  
3614 ..			.dmark: db "IS."  
3617 f1			.pastdmark: pop af  
3618			endm  
# End of macro DMARK
3618						CALLMONITOR 
3618 cd 6f ee			call debug_vector  
361b				endm  
# End of macro CALLMONITOR
361b					endif 
361b					NEXTW 
361b c3 81 1f			jp macro_next 
361e				endm 
# End of macro NEXTW
361e			.LZERO: 
361e				CWHEAD .TZERO 25 "0<" 2 WORD_FLAG_CODE 
361e 2d				db WORD_SYS_CORE+25             
361f 28 36			dw .TZERO            
3621 03				db 2 + 1 
3622 .. 00			db "0<",0              
3625				endm 
# End of macro CWHEAD
3625			; | 0< ( u -- f ) Push true if u is less than o | CANT DO UNTIL FLOAT 
3625					NEXTW 
3625 c3 81 1f			jp macro_next 
3628				endm 
# End of macro NEXTW
3628			.TZERO: 
3628				CWHEAD .LESS 26 "0=" 2 WORD_FLAG_CODE 
3628 2e				db WORD_SYS_CORE+26             
3629 6f 36			dw .LESS            
362b 03				db 2 + 1 
362c .. 00			db "0=",0              
362f				endm 
# End of macro CWHEAD
362f			; | 0= ( u -- f ) Push true if u equals 0 | DONE 
362f				; TODO add floating point number detection 
362f					;v5 FORTH_DSP_VALUE 
362f					if DEBUG_FORTH_WORDS_KEY 
362f						DMARK "0=." 
362f f5				push af  
3630 3a 44 36			ld a, (.dmark)  
3633 32 65 ee			ld (debug_mark),a  
3636 3a 45 36			ld a, (.dmark+1)  
3639 32 66 ee			ld (debug_mark+1),a  
363c 3a 46 36			ld a, (.dmark+2)  
363f 32 67 ee			ld (debug_mark+2),a  
3642 18 03			jr .pastdmark  
3644 ..			.dmark: db "0=."  
3647 f1			.pastdmark: pop af  
3648			endm  
# End of macro DMARK
3648						CALLMONITOR 
3648 cd 6f ee			call debug_vector  
364b				endm  
# End of macro CALLMONITOR
364b					endif 
364b					FORTH_DSP 
364b cd 5b 1d			call macro_forth_dsp 
364e				endm 
# End of macro FORTH_DSP
364e 7e					ld a,(hl)	; get type of value on TOS 
364f fe 02				cp DS_TYPE_INUM  
3651 28 00				jr z, .tz_inum 
3653			 
3653				if FORTH_ENABLE_FLOATMATH 
3653					jr .tz_done 
3653			 
3653				endif 
3653					 
3653			 
3653			.tz_inum: 
3653					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3653 cd 95 1d			call macro_dsp_valuehl 
3656				endm 
# End of macro FORTH_DSP_VALUEHL
3656			 
3656			;		push hl 
3656			 
3656					; destroy value TOS 
3656			 
3656					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3656 cd 4d 1e			call macro_forth_dsp_pop 
3659				endm 
# End of macro FORTH_DSP_POP
3659			 
3659			;		pop hl 
3659			 
3659 3e 00				ld a,0 
365b			 
365b bd					cp l 
365c 20 08				jr nz, .tz_notzero 
365e			 
365e bc					cp h 
365f			 
365f 20 05				jr nz, .tz_notzero 
3661			 
3661			 
3661 21 01 00				ld hl, FORTH_TRUE 
3664 18 03				jr .tz_done 
3666			 
3666 21 00 00		.tz_notzero:	ld hl, FORTH_FALSE 
3669			 
3669					; push value back onto stack for another op etc 
3669			 
3669			.tz_done: 
3669 cd 90 1b				call forth_push_numhl 
366c			 
366c					NEXTW 
366c c3 81 1f			jp macro_next 
366f				endm 
# End of macro NEXTW
366f			.LESS: 
366f				CWHEAD .GT 27 "<" 1 WORD_FLAG_CODE 
366f 2f				db WORD_SYS_CORE+27             
3670 d8 36			dw .GT            
3672 02				db 1 + 1 
3673 .. 00			db "<",0              
3675				endm 
# End of macro CWHEAD
3675			; | < ( u1 u2 -- f ) True if u1 is less than u2 | DONE 
3675				; TODO add floating point number detection 
3675					if DEBUG_FORTH_WORDS_KEY 
3675						DMARK "LES" 
3675 f5				push af  
3676 3a 8a 36			ld a, (.dmark)  
3679 32 65 ee			ld (debug_mark),a  
367c 3a 8b 36			ld a, (.dmark+1)  
367f 32 66 ee			ld (debug_mark+1),a  
3682 3a 8c 36			ld a, (.dmark+2)  
3685 32 67 ee			ld (debug_mark+2),a  
3688 18 03			jr .pastdmark  
368a ..			.dmark: db "LES"  
368d f1			.pastdmark: pop af  
368e			endm  
# End of macro DMARK
368e						CALLMONITOR 
368e cd 6f ee			call debug_vector  
3691				endm  
# End of macro CALLMONITOR
3691					endif 
3691					FORTH_DSP 
3691 cd 5b 1d			call macro_forth_dsp 
3694				endm 
# End of macro FORTH_DSP
3694					;v5 FORTH_DSP_VALUE 
3694 7e					ld a,(hl)	; get type of value on TOS 
3695 fe 02				cp DS_TYPE_INUM  
3697 28 00				jr z, .less_inum 
3699			 
3699				if FORTH_ENABLE_FLOATMATH 
3699					jr .less_done 
3699			 
3699				endif 
3699					 
3699			 
3699			.less_inum: 
3699					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3699 cd 95 1d			call macro_dsp_valuehl 
369c				endm 
# End of macro FORTH_DSP_VALUEHL
369c			 
369c e5					push hl  ; u2 
369d			 
369d					; destroy value TOS 
369d			 
369d					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
369d cd 4d 1e			call macro_forth_dsp_pop 
36a0				endm 
# End of macro FORTH_DSP_POP
36a0			 
36a0			 
36a0					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
36a0 cd 95 1d			call macro_dsp_valuehl 
36a3				endm 
# End of macro FORTH_DSP_VALUEHL
36a3			 
36a3 e5					push hl    ; u1 
36a4			 
36a4					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
36a4 cd 4d 1e			call macro_forth_dsp_pop 
36a7				endm 
# End of macro FORTH_DSP_POP
36a7			 
36a7			 
36a7 b7			 or a      ;clear carry flag 
36a8 01 00 00		 ld bc, FORTH_FALSE 
36ab e1			  pop hl    ; u1 
36ac d1			  pop de    ; u2 
36ad ed 52		  sbc hl,de 
36af 30 03		  jr nc,.lscont   	;	if hl >= de, carry flag will be cleared 
36b1			 
36b1 01 01 00		 ld bc, FORTH_TRUE 
36b4			.lscont:  
36b4 c5					push bc 
36b5 e1					pop hl 
36b6			 
36b6					if DEBUG_FORTH_WORDS 
36b6						DMARK "LT1" 
36b6 f5				push af  
36b7 3a cb 36			ld a, (.dmark)  
36ba 32 65 ee			ld (debug_mark),a  
36bd 3a cc 36			ld a, (.dmark+1)  
36c0 32 66 ee			ld (debug_mark+1),a  
36c3 3a cd 36			ld a, (.dmark+2)  
36c6 32 67 ee			ld (debug_mark+2),a  
36c9 18 03			jr .pastdmark  
36cb ..			.dmark: db "LT1"  
36ce f1			.pastdmark: pop af  
36cf			endm  
# End of macro DMARK
36cf						CALLMONITOR 
36cf cd 6f ee			call debug_vector  
36d2				endm  
# End of macro CALLMONITOR
36d2					endif 
36d2 cd 90 1b				call forth_push_numhl 
36d5			 
36d5					NEXTW 
36d5 c3 81 1f			jp macro_next 
36d8				endm 
# End of macro NEXTW
36d8			.GT: 
36d8				CWHEAD .EQUAL 28 ">" 1 WORD_FLAG_CODE 
36d8 30				db WORD_SYS_CORE+28             
36d9 41 37			dw .EQUAL            
36db 02				db 1 + 1 
36dc .. 00			db ">",0              
36de				endm 
# End of macro CWHEAD
36de			; | > ( u1 u2 -- f ) True if u1 is greater than u2 | DONE 
36de				; TODO add floating point number detection 
36de					if DEBUG_FORTH_WORDS_KEY 
36de						DMARK "GRT" 
36de f5				push af  
36df 3a f3 36			ld a, (.dmark)  
36e2 32 65 ee			ld (debug_mark),a  
36e5 3a f4 36			ld a, (.dmark+1)  
36e8 32 66 ee			ld (debug_mark+1),a  
36eb 3a f5 36			ld a, (.dmark+2)  
36ee 32 67 ee			ld (debug_mark+2),a  
36f1 18 03			jr .pastdmark  
36f3 ..			.dmark: db "GRT"  
36f6 f1			.pastdmark: pop af  
36f7			endm  
# End of macro DMARK
36f7						CALLMONITOR 
36f7 cd 6f ee			call debug_vector  
36fa				endm  
# End of macro CALLMONITOR
36fa					endif 
36fa					FORTH_DSP 
36fa cd 5b 1d			call macro_forth_dsp 
36fd				endm 
# End of macro FORTH_DSP
36fd					;FORTH_DSP_VALUE 
36fd 7e					ld a,(hl)	; get type of value on TOS 
36fe fe 02				cp DS_TYPE_INUM  
3700 28 00				jr z, .gt_inum 
3702			 
3702				if FORTH_ENABLE_FLOATMATH 
3702					jr .gt_done 
3702			 
3702				endif 
3702					 
3702			 
3702			.gt_inum: 
3702					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3702 cd 95 1d			call macro_dsp_valuehl 
3705				endm 
# End of macro FORTH_DSP_VALUEHL
3705			 
3705 e5					push hl  ; u2 
3706			 
3706					; destroy value TOS 
3706			 
3706					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3706 cd 4d 1e			call macro_forth_dsp_pop 
3709				endm 
# End of macro FORTH_DSP_POP
3709			 
3709			 
3709					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3709 cd 95 1d			call macro_dsp_valuehl 
370c				endm 
# End of macro FORTH_DSP_VALUEHL
370c			 
370c e5					push hl    ; u1 
370d			 
370d					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
370d cd 4d 1e			call macro_forth_dsp_pop 
3710				endm 
# End of macro FORTH_DSP_POP
3710			 
3710			 
3710 b7			 or a      ;clear carry flag 
3711 01 00 00		 ld bc, FORTH_FALSE 
3714 e1			  pop hl    ; u1 
3715 d1			  pop de    ; u2 
3716 ed 52		  sbc hl,de 
3718 38 03		  jr c,.gtcont   	;	if hl >= de, carry flag will be cleared 
371a			 
371a 01 01 00		 ld bc, FORTH_TRUE 
371d			.gtcont:  
371d c5					push bc 
371e e1					pop hl 
371f			 
371f					if DEBUG_FORTH_WORDS 
371f						DMARK "GT1" 
371f f5				push af  
3720 3a 34 37			ld a, (.dmark)  
3723 32 65 ee			ld (debug_mark),a  
3726 3a 35 37			ld a, (.dmark+1)  
3729 32 66 ee			ld (debug_mark+1),a  
372c 3a 36 37			ld a, (.dmark+2)  
372f 32 67 ee			ld (debug_mark+2),a  
3732 18 03			jr .pastdmark  
3734 ..			.dmark: db "GT1"  
3737 f1			.pastdmark: pop af  
3738			endm  
# End of macro DMARK
3738						CALLMONITOR 
3738 cd 6f ee			call debug_vector  
373b				endm  
# End of macro CALLMONITOR
373b					endif 
373b cd 90 1b				call forth_push_numhl 
373e			 
373e					NEXTW 
373e c3 81 1f			jp macro_next 
3741				endm 
# End of macro NEXTW
3741			.EQUAL: 
3741				CWHEAD .ENDLOGIC 29 "=" 1 WORD_FLAG_CODE 
3741 31				db WORD_SYS_CORE+29             
3742 ac 37			dw .ENDLOGIC            
3744 02				db 1 + 1 
3745 .. 00			db "=",0              
3747				endm 
# End of macro CWHEAD
3747			; | = ( u1 u2 -- f ) True if u1 equals u2 | DONE 
3747				; TODO add floating point number detection 
3747					if DEBUG_FORTH_WORDS_KEY 
3747						DMARK "EQ." 
3747 f5				push af  
3748 3a 5c 37			ld a, (.dmark)  
374b 32 65 ee			ld (debug_mark),a  
374e 3a 5d 37			ld a, (.dmark+1)  
3751 32 66 ee			ld (debug_mark+1),a  
3754 3a 5e 37			ld a, (.dmark+2)  
3757 32 67 ee			ld (debug_mark+2),a  
375a 18 03			jr .pastdmark  
375c ..			.dmark: db "EQ."  
375f f1			.pastdmark: pop af  
3760			endm  
# End of macro DMARK
3760						CALLMONITOR 
3760 cd 6f ee			call debug_vector  
3763				endm  
# End of macro CALLMONITOR
3763					endif 
3763					FORTH_DSP 
3763 cd 5b 1d			call macro_forth_dsp 
3766				endm 
# End of macro FORTH_DSP
3766					;v5 FORTH_DSP_VALUE 
3766 7e					ld a,(hl)	; get type of value on TOS 
3767 fe 02				cp DS_TYPE_INUM  
3769 28 00				jr z, .eq_inum 
376b			 
376b				if FORTH_ENABLE_FLOATMATH 
376b					jr .eq_done 
376b			 
376b				endif 
376b					 
376b			 
376b			.eq_inum: 
376b					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
376b cd 95 1d			call macro_dsp_valuehl 
376e				endm 
# End of macro FORTH_DSP_VALUEHL
376e			 
376e e5					push hl 
376f			 
376f					; destroy value TOS 
376f			 
376f					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
376f cd 4d 1e			call macro_forth_dsp_pop 
3772				endm 
# End of macro FORTH_DSP_POP
3772			 
3772			 
3772					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3772 cd 95 1d			call macro_dsp_valuehl 
3775				endm 
# End of macro FORTH_DSP_VALUEHL
3775			 
3775					; one value on hl get other one back 
3775			 
3775 e5					push hl 
3776			 
3776					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3776 cd 4d 1e			call macro_forth_dsp_pop 
3779				endm 
# End of macro FORTH_DSP_POP
3779			 
3779 0e 00				ld c, FORTH_FALSE 
377b			 
377b e1					pop hl 
377c d1					pop de 
377d			 
377d 7b					ld a, e 
377e bd					cp l 
377f			 
377f 20 06				jr nz, .eq_done 
3781			 
3781 7a					ld a, d 
3782 bc					cp h 
3783			 
3783 20 02				jr nz, .eq_done 
3785			 
3785 0e 01				ld c, FORTH_TRUE 
3787					 
3787			 
3787			 
3787			.eq_done: 
3787			 
3787					; TODO push value back onto stack for another op etc 
3787			 
3787 26 00				ld h, 0 
3789 69					ld l, c 
378a					if DEBUG_FORTH_WORDS 
378a						DMARK "EQ1" 
378a f5				push af  
378b 3a 9f 37			ld a, (.dmark)  
378e 32 65 ee			ld (debug_mark),a  
3791 3a a0 37			ld a, (.dmark+1)  
3794 32 66 ee			ld (debug_mark+1),a  
3797 3a a1 37			ld a, (.dmark+2)  
379a 32 67 ee			ld (debug_mark+2),a  
379d 18 03			jr .pastdmark  
379f ..			.dmark: db "EQ1"  
37a2 f1			.pastdmark: pop af  
37a3			endm  
# End of macro DMARK
37a3						CALLMONITOR 
37a3 cd 6f ee			call debug_vector  
37a6				endm  
# End of macro CALLMONITOR
37a6					endif 
37a6 cd 90 1b				call forth_push_numhl 
37a9			 
37a9					NEXTW 
37a9 c3 81 1f			jp macro_next 
37ac				endm 
# End of macro NEXTW
37ac			 
37ac			 
37ac			.ENDLOGIC: 
37ac			; eof 
37ac			 
37ac			 
# End of file forth_words_logic.asm
37ac			include "forth_words_maths.asm" 
37ac			 
37ac			; | ## Maths Words 
37ac			 
37ac			.PLUS:	 
37ac				CWHEAD .NEG 1 "+" 1 WORD_FLAG_CODE 
37ac 15				db WORD_SYS_CORE+1             
37ad 0a 38			dw .NEG            
37af 02				db 1 + 1 
37b0 .. 00			db "+",0              
37b2				endm 
# End of macro CWHEAD
37b2			; | + ( u u -- u )    Add two numbers and push result   | INT DONE 
37b2					if DEBUG_FORTH_WORDS_KEY 
37b2						DMARK "PLU" 
37b2 f5				push af  
37b3 3a c7 37			ld a, (.dmark)  
37b6 32 65 ee			ld (debug_mark),a  
37b9 3a c8 37			ld a, (.dmark+1)  
37bc 32 66 ee			ld (debug_mark+1),a  
37bf 3a c9 37			ld a, (.dmark+2)  
37c2 32 67 ee			ld (debug_mark+2),a  
37c5 18 03			jr .pastdmark  
37c7 ..			.dmark: db "PLU"  
37ca f1			.pastdmark: pop af  
37cb			endm  
# End of macro DMARK
37cb						CALLMONITOR 
37cb cd 6f ee			call debug_vector  
37ce				endm  
# End of macro CALLMONITOR
37ce					endif 
37ce					; add top two values and push back result 
37ce			 
37ce					;for v5 FORTH_DSP_VALUE 
37ce					FORTH_DSP 
37ce cd 5b 1d			call macro_forth_dsp 
37d1				endm 
# End of macro FORTH_DSP
37d1 7e					ld a,(hl)	; get type of value on TOS 
37d2 fe 02				cp DS_TYPE_INUM  
37d4 28 03				jr z, .dot_inum 
37d6			 
37d6					NEXTW 
37d6 c3 81 1f			jp macro_next 
37d9				endm 
# End of macro NEXTW
37d9			 
37d9			; float maths 
37d9			 
37d9				if FORTH_ENABLE_FLOATMATH 
37d9						inc hl      ; now at start of numeric as string 
37d9			 
37d9					if DEBUG_FORTH_MATHS 
37d9						DMARK "ADD" 
37d9				CALLMONITOR 
37d9					endif 
37d9			 
37d9					;ld ix, hl 
37d9					call CON 
37d9			 
37d9			 
37d9					push hl 
37d9					 
37d9					 
37d9			 
37d9						FORTH_DSP_POP      ; TODO add stock underflow checks and throws  
37d9			 
37d9					; get next number 
37d9			 
37d9						FORTH_DSP_VALUE 
37d9			 
37d9						inc hl      ; now at start of numeric as string 
37d9			 
37d9					;ld ix, hl 
37d9					call CON 
37d9			 
37d9					push hl 
37d9			 
37d9			 
37d9						FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
37d9			 
37d9						; TODO do add 
37d9			 
37d9						call IADD 
37d9			 
37d9						; TODO get result back as ascii 
37d9			 
37d9						; TODO push result  
37d9			 
37d9			 
37d9			 
37d9						jr .dot_done 
37d9				endif 
37d9			 
37d9			.dot_inum: 
37d9			 
37d9			 
37d9					if DEBUG_FORTH_DOT 
37d9						DMARK "+IT" 
37d9 f5				push af  
37da 3a ee 37			ld a, (.dmark)  
37dd 32 65 ee			ld (debug_mark),a  
37e0 3a ef 37			ld a, (.dmark+1)  
37e3 32 66 ee			ld (debug_mark+1),a  
37e6 3a f0 37			ld a, (.dmark+2)  
37e9 32 67 ee			ld (debug_mark+2),a  
37ec 18 03			jr .pastdmark  
37ee ..			.dmark: db "+IT"  
37f1 f1			.pastdmark: pop af  
37f2			endm  
# End of macro DMARK
37f2				CALLMONITOR 
37f2 cd 6f ee			call debug_vector  
37f5				endm  
# End of macro CALLMONITOR
37f5					endif 
37f5			 
37f5					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
37f5 cd 95 1d			call macro_dsp_valuehl 
37f8				endm 
# End of macro FORTH_DSP_VALUEHL
37f8			 
37f8				; TODO add floating point number detection 
37f8			 
37f8 e5					push hl 
37f9			 
37f9					; destroy value TOS 
37f9			 
37f9					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
37f9 cd 4d 1e			call macro_forth_dsp_pop 
37fc				endm 
# End of macro FORTH_DSP_POP
37fc			 
37fc			 
37fc					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
37fc cd 95 1d			call macro_dsp_valuehl 
37ff				endm 
# End of macro FORTH_DSP_VALUEHL
37ff			 
37ff					; one value on hl get other one back 
37ff			 
37ff d1					pop de 
3800			 
3800					; do the add 
3800			 
3800 19					add hl,de 
3801			 
3801					; save it 
3801			 
3801			;		push hl	 
3801			 
3801					; 
3801			 
3801					; destroy value TOS 
3801			 
3801					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3801 cd 4d 1e			call macro_forth_dsp_pop 
3804				endm 
# End of macro FORTH_DSP_POP
3804			 
3804					; TODO push value back onto stack for another op etc 
3804			 
3804			;		pop hl 
3804			 
3804			.dot_done: 
3804 cd 90 1b				call forth_push_numhl 
3807			 
3807					NEXTW 
3807 c3 81 1f			jp macro_next 
380a				endm 
# End of macro NEXTW
380a			.NEG: 
380a			 
380a				CWHEAD .DIV 3 "-" 1 WORD_FLAG_CODE 
380a 17				db WORD_SYS_CORE+3             
380b 4d 38			dw .DIV            
380d 02				db 1 + 1 
380e .. 00			db "-",0              
3810				endm 
# End of macro CWHEAD
3810			; | - ( u1 u2 -- u )    Subtract u2 from u1 and push result  | INT DONE 
3810					if DEBUG_FORTH_WORDS_KEY 
3810						DMARK "SUB" 
3810 f5				push af  
3811 3a 25 38			ld a, (.dmark)  
3814 32 65 ee			ld (debug_mark),a  
3817 3a 26 38			ld a, (.dmark+1)  
381a 32 66 ee			ld (debug_mark+1),a  
381d 3a 27 38			ld a, (.dmark+2)  
3820 32 67 ee			ld (debug_mark+2),a  
3823 18 03			jr .pastdmark  
3825 ..			.dmark: db "SUB"  
3828 f1			.pastdmark: pop af  
3829			endm  
# End of macro DMARK
3829						CALLMONITOR 
3829 cd 6f ee			call debug_vector  
382c				endm  
# End of macro CALLMONITOR
382c					endif 
382c			 
382c			 
382c				; TODO add floating point number detection 
382c					; v5 FORTH_DSP_VALUE 
382c					FORTH_DSP 
382c cd 5b 1d			call macro_forth_dsp 
382f				endm 
# End of macro FORTH_DSP
382f 7e					ld a,(hl)	; get type of value on TOS 
3830 fe 02				cp DS_TYPE_INUM  
3832 28 03				jr z, .neg_inum 
3834			 
3834					NEXTW 
3834 c3 81 1f			jp macro_next 
3837				endm 
# End of macro NEXTW
3837			 
3837			; float maths 
3837			 
3837				if FORTH_ENABLE_FLOATMATH 
3837					jr .neg_done 
3837			 
3837				endif 
3837					 
3837			 
3837			.neg_inum: 
3837					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3837 cd 95 1d			call macro_dsp_valuehl 
383a				endm 
# End of macro FORTH_DSP_VALUEHL
383a			 
383a e5					push hl 
383b			 
383b					; destroy value TOS 
383b			 
383b					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
383b cd 4d 1e			call macro_forth_dsp_pop 
383e				endm 
# End of macro FORTH_DSP_POP
383e			 
383e			 
383e					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
383e cd 95 1d			call macro_dsp_valuehl 
3841				endm 
# End of macro FORTH_DSP_VALUEHL
3841			 
3841					; one value on hl get other one back 
3841			 
3841 d1					pop de 
3842			 
3842					; do the sub 
3842			;		ex de, hl 
3842			 
3842 ed 52				sbc hl,de 
3844			 
3844					; save it 
3844			 
3844			;		push hl	 
3844			 
3844					; 
3844			 
3844					; destroy value TOS 
3844			 
3844					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3844 cd 4d 1e			call macro_forth_dsp_pop 
3847				endm 
# End of macro FORTH_DSP_POP
3847			 
3847					; TODO push value back onto stack for another op etc 
3847			 
3847			;		pop hl 
3847			 
3847 cd 90 1b				call forth_push_numhl 
384a			.neg_done: 
384a			 
384a					NEXTW 
384a c3 81 1f			jp macro_next 
384d				endm 
# End of macro NEXTW
384d			.DIV: 
384d				CWHEAD .MUL 4 "/" 1 WORD_FLAG_CODE 
384d 18				db WORD_SYS_CORE+4             
384e 9a 38			dw .MUL            
3850 02				db 1 + 1 
3851 .. 00			db "/",0              
3853				endm 
# End of macro CWHEAD
3853			; | / ( u1 u2 -- result remainder )     Divide u1 by u2 and push result | INT DONE 
3853					if DEBUG_FORTH_WORDS_KEY 
3853						DMARK "DIV" 
3853 f5				push af  
3854 3a 68 38			ld a, (.dmark)  
3857 32 65 ee			ld (debug_mark),a  
385a 3a 69 38			ld a, (.dmark+1)  
385d 32 66 ee			ld (debug_mark+1),a  
3860 3a 6a 38			ld a, (.dmark+2)  
3863 32 67 ee			ld (debug_mark+2),a  
3866 18 03			jr .pastdmark  
3868 ..			.dmark: db "DIV"  
386b f1			.pastdmark: pop af  
386c			endm  
# End of macro DMARK
386c						CALLMONITOR 
386c cd 6f ee			call debug_vector  
386f				endm  
# End of macro CALLMONITOR
386f					endif 
386f				; TODO add floating point number detection 
386f					; v5 FORTH_DSP_VALUE 
386f					FORTH_DSP 
386f cd 5b 1d			call macro_forth_dsp 
3872				endm 
# End of macro FORTH_DSP
3872 7e					ld a,(hl)	; get type of value on TOS 
3873 fe 02				cp DS_TYPE_INUM  
3875 28 03				jr z, .div_inum 
3877			 
3877				if FORTH_ENABLE_FLOATMATH 
3877					jr .div_done 
3877			 
3877				endif 
3877					NEXTW 
3877 c3 81 1f			jp macro_next 
387a				endm 
# End of macro NEXTW
387a			.div_inum: 
387a			 
387a					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
387a cd 95 1d			call macro_dsp_valuehl 
387d				endm 
# End of macro FORTH_DSP_VALUEHL
387d			 
387d e5					push hl    ; to go to bc 
387e			 
387e					; destroy value TOS 
387e			 
387e					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
387e cd 4d 1e			call macro_forth_dsp_pop 
3881				endm 
# End of macro FORTH_DSP_POP
3881			 
3881			 
3881					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3881 cd 95 1d			call macro_dsp_valuehl 
3884				endm 
# End of macro FORTH_DSP_VALUEHL
3884			 
3884					; hl to go to de 
3884			 
3884 e5					push hl 
3885			 
3885 c1					pop bc 
3886 d1					pop de		 
3887			 
3887			 
3887					if DEBUG_FORTH_MATHS 
3887						DMARK "DIV" 
3887				CALLMONITOR 
3887					endif 
3887					; one value on hl but move to a get other one back 
3887			 
3887			        
3887 cd 52 0d			call Div16 
388a			 
388a			;	push af	 
388a e5				push hl 
388b c5				push bc 
388c			 
388c					if DEBUG_FORTH_MATHS 
388c						DMARK "DI1" 
388c				CALLMONITOR 
388c					endif 
388c			 
388c					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
388c cd 4d 1e			call macro_forth_dsp_pop 
388f				endm 
# End of macro FORTH_DSP_POP
388f			 
388f			 
388f			 
388f e1					pop hl    ; result 
3890			 
3890 cd 90 1b				call forth_push_numhl 
3893			 
3893 e1					pop hl    ; reminder 
3894			;		ld h,0 
3894			;		ld l,d 
3894			 
3894 cd 90 1b				call forth_push_numhl 
3897			.div_done: 
3897					NEXTW 
3897 c3 81 1f			jp macro_next 
389a				endm 
# End of macro NEXTW
389a			.MUL: 
389a				CWHEAD .MIN 5 "*" 1 WORD_FLAG_CODE 
389a 19				db WORD_SYS_CORE+5             
389b df 38			dw .MIN            
389d 02				db 1 + 1 
389e .. 00			db "*",0              
38a0				endm 
# End of macro CWHEAD
38a0			; | * ( u1 u2 -- u )     Multiply TOS and push result | INT DONE 
38a0				; TODO add floating point number detection 
38a0					if DEBUG_FORTH_WORDS_KEY 
38a0						DMARK "MUL" 
38a0 f5				push af  
38a1 3a b5 38			ld a, (.dmark)  
38a4 32 65 ee			ld (debug_mark),a  
38a7 3a b6 38			ld a, (.dmark+1)  
38aa 32 66 ee			ld (debug_mark+1),a  
38ad 3a b7 38			ld a, (.dmark+2)  
38b0 32 67 ee			ld (debug_mark+2),a  
38b3 18 03			jr .pastdmark  
38b5 ..			.dmark: db "MUL"  
38b8 f1			.pastdmark: pop af  
38b9			endm  
# End of macro DMARK
38b9						CALLMONITOR 
38b9 cd 6f ee			call debug_vector  
38bc				endm  
# End of macro CALLMONITOR
38bc					endif 
38bc					FORTH_DSP 
38bc cd 5b 1d			call macro_forth_dsp 
38bf				endm 
# End of macro FORTH_DSP
38bf					; v5 FORTH_DSP_VALUE 
38bf 7e					ld a,(hl)	; get type of value on TOS 
38c0 fe 02				cp DS_TYPE_INUM  
38c2 28 03				jr z, .mul_inum 
38c4			 
38c4				if FORTH_ENABLE_FLOATMATH 
38c4					jr .mul_done 
38c4			 
38c4				endif 
38c4			 
38c4					NEXTW 
38c4 c3 81 1f			jp macro_next 
38c7				endm 
# End of macro NEXTW
38c7			.mul_inum:	 
38c7			 
38c7					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
38c7 cd 95 1d			call macro_dsp_valuehl 
38ca				endm 
# End of macro FORTH_DSP_VALUEHL
38ca			 
38ca e5					push hl 
38cb			 
38cb					; destroy value TOS 
38cb			 
38cb					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
38cb cd 4d 1e			call macro_forth_dsp_pop 
38ce				endm 
# End of macro FORTH_DSP_POP
38ce			 
38ce			 
38ce					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
38ce cd 95 1d			call macro_dsp_valuehl 
38d1				endm 
# End of macro FORTH_DSP_VALUEHL
38d1			 
38d1					; one value on hl but move to a get other one back 
38d1			 
38d1 7d					ld a, l 
38d2			 
38d2 d1					pop de 
38d3			 
38d3					; do the mull 
38d3			;		ex de, hl 
38d3			 
38d3 cd 78 0d				call Mult16 
38d6					; save it 
38d6			 
38d6			;		push hl	 
38d6			 
38d6					; 
38d6			 
38d6					; destroy value TOS 
38d6			 
38d6					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
38d6 cd 4d 1e			call macro_forth_dsp_pop 
38d9				endm 
# End of macro FORTH_DSP_POP
38d9			 
38d9					; TODO push value back onto stack for another op etc 
38d9			 
38d9			;		pop hl 
38d9			 
38d9 cd 90 1b				call forth_push_numhl 
38dc			 
38dc			.mul_done: 
38dc					NEXTW 
38dc c3 81 1f			jp macro_next 
38df				endm 
# End of macro NEXTW
38df			 
38df			 
38df			 
38df			 
38df			.MIN: 
38df				CWHEAD .MAX 53 "MIN" 3 WORD_FLAG_CODE 
38df 49				db WORD_SYS_CORE+53             
38e0 60 39			dw .MAX            
38e2 04				db 3 + 1 
38e3 .. 00			db "MIN",0              
38e7				endm 
# End of macro CWHEAD
38e7			; | MIN (  u1 u2 -- u3 ) Whichever is the smallest value is pushed back onto the stack | DONE 
38e7					if DEBUG_FORTH_WORDS_KEY 
38e7						DMARK "MIN" 
38e7 f5				push af  
38e8 3a fc 38			ld a, (.dmark)  
38eb 32 65 ee			ld (debug_mark),a  
38ee 3a fd 38			ld a, (.dmark+1)  
38f1 32 66 ee			ld (debug_mark+1),a  
38f4 3a fe 38			ld a, (.dmark+2)  
38f7 32 67 ee			ld (debug_mark+2),a  
38fa 18 03			jr .pastdmark  
38fc ..			.dmark: db "MIN"  
38ff f1			.pastdmark: pop af  
3900			endm  
# End of macro DMARK
3900						CALLMONITOR 
3900 cd 6f ee			call debug_vector  
3903				endm  
# End of macro CALLMONITOR
3903					endif 
3903					; get u2 
3903			 
3903					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3903 cd 95 1d			call macro_dsp_valuehl 
3906				endm 
# End of macro FORTH_DSP_VALUEHL
3906			 
3906 e5					push hl   ; u2 
3907			 
3907					; destroy value TOS 
3907			 
3907					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3907 cd 4d 1e			call macro_forth_dsp_pop 
390a				endm 
# End of macro FORTH_DSP_POP
390a			 
390a					; get u1 
390a			 
390a					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
390a cd 95 1d			call macro_dsp_valuehl 
390d				endm 
# End of macro FORTH_DSP_VALUEHL
390d			 
390d e5					push hl  ; u1 
390e			 
390e					; destroy value TOS 
390e			 
390e					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
390e cd 4d 1e			call macro_forth_dsp_pop 
3911				endm 
# End of macro FORTH_DSP_POP
3911			 
3911 b7			 or a      ;clear carry flag 
3912 e1			  pop hl    ; u1 
3913 d1			  pop de    ; u2 
3914 e5				push hl   ; saved in case hl is lowest 
3915 ed 52		  sbc hl,de 
3917 30 23		  jr nc,.mincont   	;	if hl >= de, carry flag will be cleared 
3919			 
3919 e1				pop hl 
391a					if DEBUG_FORTH_WORDS 
391a						DMARK "MIN" 
391a f5				push af  
391b 3a 2f 39			ld a, (.dmark)  
391e 32 65 ee			ld (debug_mark),a  
3921 3a 30 39			ld a, (.dmark+1)  
3924 32 66 ee			ld (debug_mark+1),a  
3927 3a 31 39			ld a, (.dmark+2)  
392a 32 67 ee			ld (debug_mark+2),a  
392d 18 03			jr .pastdmark  
392f ..			.dmark: db "MIN"  
3932 f1			.pastdmark: pop af  
3933			endm  
# End of macro DMARK
3933						CALLMONITOR 
3933 cd 6f ee			call debug_vector  
3936				endm  
# End of macro CALLMONITOR
3936					endif 
3936 cd 90 1b				call forth_push_numhl 
3939			 
3939				       NEXTW 
3939 c3 81 1f			jp macro_next 
393c				endm 
# End of macro NEXTW
393c			 
393c			.mincont:  
393c c1				pop bc   ; tidy up 
393d eb				ex de , hl  
393e					if DEBUG_FORTH_WORDS 
393e						DMARK "MI1" 
393e f5				push af  
393f 3a 53 39			ld a, (.dmark)  
3942 32 65 ee			ld (debug_mark),a  
3945 3a 54 39			ld a, (.dmark+1)  
3948 32 66 ee			ld (debug_mark+1),a  
394b 3a 55 39			ld a, (.dmark+2)  
394e 32 67 ee			ld (debug_mark+2),a  
3951 18 03			jr .pastdmark  
3953 ..			.dmark: db "MI1"  
3956 f1			.pastdmark: pop af  
3957			endm  
# End of macro DMARK
3957						CALLMONITOR 
3957 cd 6f ee			call debug_vector  
395a				endm  
# End of macro CALLMONITOR
395a					endif 
395a cd 90 1b				call forth_push_numhl 
395d			 
395d				       NEXTW 
395d c3 81 1f			jp macro_next 
3960				endm 
# End of macro NEXTW
3960			.MAX: 
3960				CWHEAD .RND16 54 "MAX" 3 WORD_FLAG_CODE 
3960 4a				db WORD_SYS_CORE+54             
3961 e1 39			dw .RND16            
3963 04				db 3 + 1 
3964 .. 00			db "MAX",0              
3968				endm 
# End of macro CWHEAD
3968			; | MAX (  u1 u2 -- u3 )  Whichever is the largest value is pushed back onto the stack | DONE 
3968					if DEBUG_FORTH_WORDS_KEY 
3968						DMARK "MAX" 
3968 f5				push af  
3969 3a 7d 39			ld a, (.dmark)  
396c 32 65 ee			ld (debug_mark),a  
396f 3a 7e 39			ld a, (.dmark+1)  
3972 32 66 ee			ld (debug_mark+1),a  
3975 3a 7f 39			ld a, (.dmark+2)  
3978 32 67 ee			ld (debug_mark+2),a  
397b 18 03			jr .pastdmark  
397d ..			.dmark: db "MAX"  
3980 f1			.pastdmark: pop af  
3981			endm  
# End of macro DMARK
3981						CALLMONITOR 
3981 cd 6f ee			call debug_vector  
3984				endm  
# End of macro CALLMONITOR
3984					endif 
3984					; get u2 
3984			 
3984					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3984 cd 95 1d			call macro_dsp_valuehl 
3987				endm 
# End of macro FORTH_DSP_VALUEHL
3987			 
3987 e5					push hl   ; u2 
3988			 
3988					; destroy value TOS 
3988			 
3988					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3988 cd 4d 1e			call macro_forth_dsp_pop 
398b				endm 
# End of macro FORTH_DSP_POP
398b			 
398b					; get u1 
398b			 
398b					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
398b cd 95 1d			call macro_dsp_valuehl 
398e				endm 
# End of macro FORTH_DSP_VALUEHL
398e			 
398e e5					push hl  ; u1 
398f			 
398f					; destroy value TOS 
398f			 
398f					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
398f cd 4d 1e			call macro_forth_dsp_pop 
3992				endm 
# End of macro FORTH_DSP_POP
3992			 
3992 b7			 or a      ;clear carry flag 
3993 e1			  pop hl    ; u1 
3994 d1			  pop de    ; u2 
3995 e5				push hl   ; saved in case hl is lowest 
3996 ed 52		  sbc hl,de 
3998 38 23		  jr c,.maxcont   	;	if hl <= de, carry flag will be cleared 
399a			 
399a e1				pop hl 
399b					if DEBUG_FORTH_WORDS 
399b						DMARK "MAX" 
399b f5				push af  
399c 3a b0 39			ld a, (.dmark)  
399f 32 65 ee			ld (debug_mark),a  
39a2 3a b1 39			ld a, (.dmark+1)  
39a5 32 66 ee			ld (debug_mark+1),a  
39a8 3a b2 39			ld a, (.dmark+2)  
39ab 32 67 ee			ld (debug_mark+2),a  
39ae 18 03			jr .pastdmark  
39b0 ..			.dmark: db "MAX"  
39b3 f1			.pastdmark: pop af  
39b4			endm  
# End of macro DMARK
39b4						CALLMONITOR 
39b4 cd 6f ee			call debug_vector  
39b7				endm  
# End of macro CALLMONITOR
39b7					endif 
39b7 cd 90 1b				call forth_push_numhl 
39ba			 
39ba				       NEXTW 
39ba c3 81 1f			jp macro_next 
39bd				endm 
# End of macro NEXTW
39bd			 
39bd			.maxcont:  
39bd c1				pop bc   ; tidy up 
39be eb				ex de , hl  
39bf					if DEBUG_FORTH_WORDS 
39bf						DMARK "MA1" 
39bf f5				push af  
39c0 3a d4 39			ld a, (.dmark)  
39c3 32 65 ee			ld (debug_mark),a  
39c6 3a d5 39			ld a, (.dmark+1)  
39c9 32 66 ee			ld (debug_mark+1),a  
39cc 3a d6 39			ld a, (.dmark+2)  
39cf 32 67 ee			ld (debug_mark+2),a  
39d2 18 03			jr .pastdmark  
39d4 ..			.dmark: db "MA1"  
39d7 f1			.pastdmark: pop af  
39d8			endm  
# End of macro DMARK
39d8						CALLMONITOR 
39d8 cd 6f ee			call debug_vector  
39db				endm  
# End of macro CALLMONITOR
39db					endif 
39db cd 90 1b				call forth_push_numhl 
39de				       NEXTW 
39de c3 81 1f			jp macro_next 
39e1				endm 
# End of macro NEXTW
39e1			 
39e1			.RND16: 
39e1				CWHEAD .RND8 58 "RND16" 5 WORD_FLAG_CODE 
39e1 4e				db WORD_SYS_CORE+58             
39e2 10 3a			dw .RND8            
39e4 06				db 5 + 1 
39e5 .. 00			db "RND16",0              
39eb				endm 
# End of macro CWHEAD
39eb			; | RND16 (  -- n ) Generate a random 16bit number and push to stack | DONE 
39eb					if DEBUG_FORTH_WORDS_KEY 
39eb						DMARK "R16" 
39eb f5				push af  
39ec 3a 00 3a			ld a, (.dmark)  
39ef 32 65 ee			ld (debug_mark),a  
39f2 3a 01 3a			ld a, (.dmark+1)  
39f5 32 66 ee			ld (debug_mark+1),a  
39f8 3a 02 3a			ld a, (.dmark+2)  
39fb 32 67 ee			ld (debug_mark+2),a  
39fe 18 03			jr .pastdmark  
3a00 ..			.dmark: db "R16"  
3a03 f1			.pastdmark: pop af  
3a04			endm  
# End of macro DMARK
3a04						CALLMONITOR 
3a04 cd 6f ee			call debug_vector  
3a07				endm  
# End of macro CALLMONITOR
3a07					endif 
3a07 cd 1c 0d				call prng16  
3a0a cd 90 1b				call forth_push_numhl 
3a0d				       NEXTW 
3a0d c3 81 1f			jp macro_next 
3a10				endm 
# End of macro NEXTW
3a10			.RND8: 
3a10				CWHEAD .RND 76 "RND8" 4 WORD_FLAG_CODE 
3a10 60				db WORD_SYS_CORE+76             
3a11 45 3a			dw .RND            
3a13 05				db 4 + 1 
3a14 .. 00			db "RND8",0              
3a19				endm 
# End of macro CWHEAD
3a19			; | RND8 (  -- n ) Generate a random 8bit number and push to stack | DONE 
3a19					if DEBUG_FORTH_WORDS_KEY 
3a19						DMARK "RN8" 
3a19 f5				push af  
3a1a 3a 2e 3a			ld a, (.dmark)  
3a1d 32 65 ee			ld (debug_mark),a  
3a20 3a 2f 3a			ld a, (.dmark+1)  
3a23 32 66 ee			ld (debug_mark+1),a  
3a26 3a 30 3a			ld a, (.dmark+2)  
3a29 32 67 ee			ld (debug_mark+2),a  
3a2c 18 03			jr .pastdmark  
3a2e ..			.dmark: db "RN8"  
3a31 f1			.pastdmark: pop af  
3a32			endm  
# End of macro DMARK
3a32						CALLMONITOR 
3a32 cd 6f ee			call debug_vector  
3a35				endm  
# End of macro CALLMONITOR
3a35					endif 
3a35 2a a3 eb				ld hl,(xrandc) 
3a38 23					inc hl 
3a39 cd 36 0d				call xrnd 
3a3c 6f					ld l,a	 
3a3d 26 00				ld h,0 
3a3f cd 90 1b				call forth_push_numhl 
3a42				       NEXTW 
3a42 c3 81 1f			jp macro_next 
3a45				endm 
# End of macro NEXTW
3a45			.RND: 
3a45				CWHEAD .ENDMATHS 76 "RND" 3 WORD_FLAG_CODE 
3a45 60				db WORD_SYS_CORE+76             
3a46 4b 3b			dw .ENDMATHS            
3a48 04				db 3 + 1 
3a49 .. 00			db "RND",0              
3a4d				endm 
# End of macro CWHEAD
3a4d			; | RND ( u1 u2 -- u ) Generate a random number no lower than u1 and no higher than u2 and push to stack | DONE 
3a4d			 
3a4d					if DEBUG_FORTH_WORDS_KEY 
3a4d						DMARK "RND" 
3a4d f5				push af  
3a4e 3a 62 3a			ld a, (.dmark)  
3a51 32 65 ee			ld (debug_mark),a  
3a54 3a 63 3a			ld a, (.dmark+1)  
3a57 32 66 ee			ld (debug_mark+1),a  
3a5a 3a 64 3a			ld a, (.dmark+2)  
3a5d 32 67 ee			ld (debug_mark+2),a  
3a60 18 03			jr .pastdmark  
3a62 ..			.dmark: db "RND"  
3a65 f1			.pastdmark: pop af  
3a66			endm  
# End of macro DMARK
3a66						CALLMONITOR 
3a66 cd 6f ee			call debug_vector  
3a69				endm  
# End of macro CALLMONITOR
3a69					endif 
3a69					 
3a69					FORTH_DSP_VALUEHL    ; upper range 
3a69 cd 95 1d			call macro_dsp_valuehl 
3a6c				endm 
# End of macro FORTH_DSP_VALUEHL
3a6c			 
3a6c 22 a7 eb				ld (LFSRSeed), hl	 
3a6f			 
3a6f					if DEBUG_FORTH_WORDS 
3a6f						DMARK "RN1" 
3a6f f5				push af  
3a70 3a 84 3a			ld a, (.dmark)  
3a73 32 65 ee			ld (debug_mark),a  
3a76 3a 85 3a			ld a, (.dmark+1)  
3a79 32 66 ee			ld (debug_mark+1),a  
3a7c 3a 86 3a			ld a, (.dmark+2)  
3a7f 32 67 ee			ld (debug_mark+2),a  
3a82 18 03			jr .pastdmark  
3a84 ..			.dmark: db "RN1"  
3a87 f1			.pastdmark: pop af  
3a88			endm  
# End of macro DMARK
3a88						CALLMONITOR 
3a88 cd 6f ee			call debug_vector  
3a8b				endm  
# End of macro CALLMONITOR
3a8b					endif 
3a8b					FORTH_DSP_POP 
3a8b cd 4d 1e			call macro_forth_dsp_pop 
3a8e				endm 
# End of macro FORTH_DSP_POP
3a8e			 
3a8e					FORTH_DSP_VALUEHL    ; low range 
3a8e cd 95 1d			call macro_dsp_valuehl 
3a91				endm 
# End of macro FORTH_DSP_VALUEHL
3a91			 
3a91					if DEBUG_FORTH_WORDS 
3a91						DMARK "RN2" 
3a91 f5				push af  
3a92 3a a6 3a			ld a, (.dmark)  
3a95 32 65 ee			ld (debug_mark),a  
3a98 3a a7 3a			ld a, (.dmark+1)  
3a9b 32 66 ee			ld (debug_mark+1),a  
3a9e 3a a8 3a			ld a, (.dmark+2)  
3aa1 32 67 ee			ld (debug_mark+2),a  
3aa4 18 03			jr .pastdmark  
3aa6 ..			.dmark: db "RN2"  
3aa9 f1			.pastdmark: pop af  
3aaa			endm  
# End of macro DMARK
3aaa						CALLMONITOR 
3aaa cd 6f ee			call debug_vector  
3aad				endm  
# End of macro CALLMONITOR
3aad					endif 
3aad 22 a9 eb				ld (LFSRSeed+2), hl 
3ab0			 
3ab0					FORTH_DSP_POP 
3ab0 cd 4d 1e			call macro_forth_dsp_pop 
3ab3				endm 
# End of macro FORTH_DSP_POP
3ab3			 
3ab3 e5					push hl 
3ab4			 
3ab4 e1			.inrange:	pop hl 
3ab5 cd 1c 0d				call prng16  
3ab8					if DEBUG_FORTH_WORDS 
3ab8						DMARK "RN3" 
3ab8 f5				push af  
3ab9 3a cd 3a			ld a, (.dmark)  
3abc 32 65 ee			ld (debug_mark),a  
3abf 3a ce 3a			ld a, (.dmark+1)  
3ac2 32 66 ee			ld (debug_mark+1),a  
3ac5 3a cf 3a			ld a, (.dmark+2)  
3ac8 32 67 ee			ld (debug_mark+2),a  
3acb 18 03			jr .pastdmark  
3acd ..			.dmark: db "RN3"  
3ad0 f1			.pastdmark: pop af  
3ad1			endm  
# End of macro DMARK
3ad1						CALLMONITOR 
3ad1 cd 6f ee			call debug_vector  
3ad4				endm  
# End of macro CALLMONITOR
3ad4					endif 
3ad4					 
3ad4					; if the range is 8bit knock out the high byte 
3ad4			 
3ad4 ed 5b a7 eb			ld de, (LFSRSeed)     ; check high level 
3ad8			 
3ad8 3e 00				ld a, 0 
3ada ba					cp d  
3adb 20 1e				jr nz, .hirange 
3add 26 00				ld h, 0   ; knock it down to 8bit 
3adf			 
3adf					if DEBUG_FORTH_WORDS 
3adf						DMARK "RNk" 
3adf f5				push af  
3ae0 3a f4 3a			ld a, (.dmark)  
3ae3 32 65 ee			ld (debug_mark),a  
3ae6 3a f5 3a			ld a, (.dmark+1)  
3ae9 32 66 ee			ld (debug_mark+1),a  
3aec 3a f6 3a			ld a, (.dmark+2)  
3aef 32 67 ee			ld (debug_mark+2),a  
3af2 18 03			jr .pastdmark  
3af4 ..			.dmark: db "RNk"  
3af7 f1			.pastdmark: pop af  
3af8			endm  
# End of macro DMARK
3af8						CALLMONITOR 
3af8 cd 6f ee			call debug_vector  
3afb				endm  
# End of macro CALLMONITOR
3afb					endif 
3afb			.hirange:   
3afb e5					push hl  
3afc b7					or a  
3afd ed 52		                sbc hl, de 
3aff			 
3aff					;call cmp16 
3aff			 
3aff 30 b3				jr nc, .inrange      ; if hl >= de, carry flag is cleared 
3b01 e1					pop hl 
3b02 e5					push hl 
3b03			 
3b03					if DEBUG_FORTH_WORDS 
3b03						DMARK "RN4" 
3b03 f5				push af  
3b04 3a 18 3b			ld a, (.dmark)  
3b07 32 65 ee			ld (debug_mark),a  
3b0a 3a 19 3b			ld a, (.dmark+1)  
3b0d 32 66 ee			ld (debug_mark+1),a  
3b10 3a 1a 3b			ld a, (.dmark+2)  
3b13 32 67 ee			ld (debug_mark+2),a  
3b16 18 03			jr .pastdmark  
3b18 ..			.dmark: db "RN4"  
3b1b f1			.pastdmark: pop af  
3b1c			endm  
# End of macro DMARK
3b1c						CALLMONITOR 
3b1c cd 6f ee			call debug_vector  
3b1f				endm  
# End of macro CALLMONITOR
3b1f					endif 
3b1f ed 5b a9 eb			ld de, (LFSRSeed+2)   ; check low range 
3b23					;call cmp16 
3b23				 
3b23 b7					or a  
3b24 ed 52		                sbc hl, de 
3b26 38 8c				jr c, .inrange 
3b28			 
3b28 e1					pop hl 
3b29					 
3b29					if DEBUG_FORTH_WORDS 
3b29						DMARK "RNd" 
3b29 f5				push af  
3b2a 3a 3e 3b			ld a, (.dmark)  
3b2d 32 65 ee			ld (debug_mark),a  
3b30 3a 3f 3b			ld a, (.dmark+1)  
3b33 32 66 ee			ld (debug_mark+1),a  
3b36 3a 40 3b			ld a, (.dmark+2)  
3b39 32 67 ee			ld (debug_mark+2),a  
3b3c 18 03			jr .pastdmark  
3b3e ..			.dmark: db "RNd"  
3b41 f1			.pastdmark: pop af  
3b42			endm  
# End of macro DMARK
3b42						CALLMONITOR 
3b42 cd 6f ee			call debug_vector  
3b45				endm  
# End of macro CALLMONITOR
3b45					endif 
3b45			 
3b45			 
3b45 cd 90 1b				call forth_push_numhl 
3b48				       NEXTW 
3b48 c3 81 1f			jp macro_next 
3b4b				endm 
# End of macro NEXTW
3b4b			 
3b4b			.ENDMATHS: 
3b4b			 
3b4b			; eof 
3b4b			 
# End of file forth_words_maths.asm
3b4b			include "forth_words_display.asm" 
3b4b			 
3b4b			; | ## Display Words 
3b4b			 
3b4b			.ACT: 
3b4b			 
3b4b				CWHEAD .INFO 78 "ACTIVE" 6 WORD_FLAG_CODE 
3b4b 62				db WORD_SYS_CORE+78             
3b4c 97 3b			dw .INFO            
3b4e 07				db 6 + 1 
3b4f .. 00			db "ACTIVE",0              
3b56				endm 
# End of macro CWHEAD
3b56			; | ACTIVE ( -- s ) Push the next char for an activity indicator to TOS | DONE 
3b56			;  
3b56			; | | To display a pulsing activity indicator in a processing loop do this... 
3b56			; | | e.g. $ff $00 do active . ..... Your code ..... loop 
3b56			 
3b56					if DEBUG_FORTH_WORDS_KEY 
3b56						DMARK "ACT" 
3b56 f5				push af  
3b57 3a 6b 3b			ld a, (.dmark)  
3b5a 32 65 ee			ld (debug_mark),a  
3b5d 3a 6c 3b			ld a, (.dmark+1)  
3b60 32 66 ee			ld (debug_mark+1),a  
3b63 3a 6d 3b			ld a, (.dmark+2)  
3b66 32 67 ee			ld (debug_mark+2),a  
3b69 18 03			jr .pastdmark  
3b6b ..			.dmark: db "ACT"  
3b6e f1			.pastdmark: pop af  
3b6f			endm  
# End of macro DMARK
3b6f						CALLMONITOR 
3b6f cd 6f ee			call debug_vector  
3b72				endm  
# End of macro CALLMONITOR
3b72					endif 
3b72 cd 1f 0b				call active 
3b75					if DEBUG_FORTH_WORDS 
3b75						DMARK "ACp" 
3b75 f5				push af  
3b76 3a 8a 3b			ld a, (.dmark)  
3b79 32 65 ee			ld (debug_mark),a  
3b7c 3a 8b 3b			ld a, (.dmark+1)  
3b7f 32 66 ee			ld (debug_mark+1),a  
3b82 3a 8c 3b			ld a, (.dmark+2)  
3b85 32 67 ee			ld (debug_mark+2),a  
3b88 18 03			jr .pastdmark  
3b8a ..			.dmark: db "ACp"  
3b8d f1			.pastdmark: pop af  
3b8e			endm  
# End of macro DMARK
3b8e						CALLMONITOR 
3b8e cd 6f ee			call debug_vector  
3b91				endm  
# End of macro CALLMONITOR
3b91					endif 
3b91 cd fe 1b				call forth_push_str 
3b94			 
3b94					NEXTW 
3b94 c3 81 1f			jp macro_next 
3b97				endm 
# End of macro NEXTW
3b97			.INFO: 
3b97			 
3b97				CWHEAD .ATP 78 "INFO" 4 WORD_FLAG_CODE 
3b97 62				db WORD_SYS_CORE+78             
3b98 b4 3b			dw .ATP            
3b9a 05				db 4 + 1 
3b9b .. 00			db "INFO",0              
3ba0				endm 
# End of macro CWHEAD
3ba0			; | INFO ( u1 u2 -- )  Use the top two strings on stack to fill in an info window over two lines. Causes a wait for key press to continue. | DONE 
3ba0					FORTH_DSP_VALUEHL 
3ba0 cd 95 1d			call macro_dsp_valuehl 
3ba3				endm 
# End of macro FORTH_DSP_VALUEHL
3ba3			 
3ba3					FORTH_DSP_POP 
3ba3 cd 4d 1e			call macro_forth_dsp_pop 
3ba6				endm 
# End of macro FORTH_DSP_POP
3ba6			 
3ba6 e5					push hl 
3ba7			 
3ba7					FORTH_DSP_VALUEHL 
3ba7 cd 95 1d			call macro_dsp_valuehl 
3baa				endm 
# End of macro FORTH_DSP_VALUEHL
3baa			 
3baa					FORTH_DSP_POP 
3baa cd 4d 1e			call macro_forth_dsp_pop 
3bad				endm 
# End of macro FORTH_DSP_POP
3bad			 
3bad d1					pop de 
3bae			 
3bae cd 59 0b				call info_panel 
3bb1			 
3bb1			 
3bb1					NEXTW 
3bb1 c3 81 1f			jp macro_next 
3bb4				endm 
# End of macro NEXTW
3bb4			.ATP: 
3bb4				CWHEAD .FB 78 "AT?" 3 WORD_FLAG_CODE 
3bb4 62				db WORD_SYS_CORE+78             
3bb5 2b 3c			dw .FB            
3bb7 04				db 3 + 1 
3bb8 .. 00			db "AT?",0              
3bbc				endm 
# End of macro CWHEAD
3bbc			; | AT? ( -- c r )  Push to stack the current position of the next print | TO TEST 
3bbc					if DEBUG_FORTH_WORDS_KEY 
3bbc						DMARK "AT?" 
3bbc f5				push af  
3bbd 3a d1 3b			ld a, (.dmark)  
3bc0 32 65 ee			ld (debug_mark),a  
3bc3 3a d2 3b			ld a, (.dmark+1)  
3bc6 32 66 ee			ld (debug_mark+1),a  
3bc9 3a d3 3b			ld a, (.dmark+2)  
3bcc 32 67 ee			ld (debug_mark+2),a  
3bcf 18 03			jr .pastdmark  
3bd1 ..			.dmark: db "AT?"  
3bd4 f1			.pastdmark: pop af  
3bd5			endm  
# End of macro DMARK
3bd5						CALLMONITOR 
3bd5 cd 6f ee			call debug_vector  
3bd8				endm  
# End of macro CALLMONITOR
3bd8					endif 
3bd8 3a 58 ea				ld a, (f_cursor_ptr) 
3bdb			 
3bdb			if DEBUG_FORTH_WORDS 
3bdb				DMARK "AT?" 
3bdb f5				push af  
3bdc 3a f0 3b			ld a, (.dmark)  
3bdf 32 65 ee			ld (debug_mark),a  
3be2 3a f1 3b			ld a, (.dmark+1)  
3be5 32 66 ee			ld (debug_mark+1),a  
3be8 3a f2 3b			ld a, (.dmark+2)  
3beb 32 67 ee			ld (debug_mark+2),a  
3bee 18 03			jr .pastdmark  
3bf0 ..			.dmark: db "AT?"  
3bf3 f1			.pastdmark: pop af  
3bf4			endm  
# End of macro DMARK
3bf4				CALLMONITOR 
3bf4 cd 6f ee			call debug_vector  
3bf7				endm  
# End of macro CALLMONITOR
3bf7			endif	 
3bf7					; count the number of rows 
3bf7			 
3bf7 06 00				ld b, 0 
3bf9 4f			.atpr:		ld c, a    ; save in case we go below zero 
3bfa d6 28				sub display_cols 
3bfc f2 02 3c				jp p, .atprunder 
3bff 04					inc b 
3c00 18 f7				jr .atpr 
3c02			.atprunder:	 
3c02			if DEBUG_FORTH_WORDS 
3c02				DMARK "A?2" 
3c02 f5				push af  
3c03 3a 17 3c			ld a, (.dmark)  
3c06 32 65 ee			ld (debug_mark),a  
3c09 3a 18 3c			ld a, (.dmark+1)  
3c0c 32 66 ee			ld (debug_mark+1),a  
3c0f 3a 19 3c			ld a, (.dmark+2)  
3c12 32 67 ee			ld (debug_mark+2),a  
3c15 18 03			jr .pastdmark  
3c17 ..			.dmark: db "A?2"  
3c1a f1			.pastdmark: pop af  
3c1b			endm  
# End of macro DMARK
3c1b				CALLMONITOR 
3c1b cd 6f ee			call debug_vector  
3c1e				endm  
# End of macro CALLMONITOR
3c1e			endif	 
3c1e 26 00				ld h, 0 
3c20 69					ld l, c 
3c21 cd 90 1b				call forth_push_numhl 
3c24 68					ld l, b  
3c25 cd 90 1b				call forth_push_numhl 
3c28			 
3c28			 
3c28				NEXTW 
3c28 c3 81 1f			jp macro_next 
3c2b				endm 
# End of macro NEXTW
3c2b			 
3c2b			.FB: 
3c2b				CWHEAD .EMIT 7 "FB" 2 WORD_FLAG_CODE 
3c2b 1b				db WORD_SYS_CORE+7             
3c2c 79 3c			dw .EMIT            
3c2e 03				db 2 + 1 
3c2f .. 00			db "FB",0              
3c32				endm 
# End of macro CWHEAD
3c32			; | FB ( u -- ) Select frame buffer ID u (1-3)  |  DONE 
3c32			; | | Default frame buffer is 1. System uses 0 which can't be selected for system messages etc. 
3c32			; | | Selecting the frame buffer wont display unless automatic display is setup (default). 
3c32			; | | If automatic display is off then updates will not be shown until DRAW is used. 
3c32					if DEBUG_FORTH_WORDS_KEY 
3c32						DMARK "FB." 
3c32 f5				push af  
3c33 3a 47 3c			ld a, (.dmark)  
3c36 32 65 ee			ld (debug_mark),a  
3c39 3a 48 3c			ld a, (.dmark+1)  
3c3c 32 66 ee			ld (debug_mark+1),a  
3c3f 3a 49 3c			ld a, (.dmark+2)  
3c42 32 67 ee			ld (debug_mark+2),a  
3c45 18 03			jr .pastdmark  
3c47 ..			.dmark: db "FB."  
3c4a f1			.pastdmark: pop af  
3c4b			endm  
# End of macro DMARK
3c4b						CALLMONITOR 
3c4b cd 6f ee			call debug_vector  
3c4e				endm  
# End of macro CALLMONITOR
3c4e					endif 
3c4e			 
3c4e					FORTH_DSP_VALUEHL 
3c4e cd 95 1d			call macro_dsp_valuehl 
3c51				endm 
# End of macro FORTH_DSP_VALUEHL
3c51			 
3c51 7d					ld a, l 
3c52 fe 01				cp 1 
3c54 20 05				jr nz, .fbn1 
3c56 21 0a ed				ld hl, display_fb1 
3c59 18 15				jr .fbset 
3c5b fe 02		.fbn1:		cp 2 
3c5d 20 05				jr nz, .fbn2 
3c5f 21 c8 eb				ld hl, display_fb2 
3c62 18 0c				jr .fbset 
3c64 fe 03		.fbn2:		cp 3 
3c66 20 05				jr nz, .fbn3 
3c68 21 69 ec				ld hl, display_fb3 
3c6b 18 03				jr .fbset 
3c6d			.fbn3:		 ; if invalid number select first 
3c6d 21 0a ed				ld hl, display_fb1 
3c70 22 c6 eb		.fbset:		ld (display_fb_active), hl 
3c73			 
3c73					FORTH_DSP_POP 
3c73 cd 4d 1e			call macro_forth_dsp_pop 
3c76				endm 
# End of macro FORTH_DSP_POP
3c76			 
3c76					NEXTW 
3c76 c3 81 1f			jp macro_next 
3c79				endm 
# End of macro NEXTW
3c79			 
3c79			 
3c79			.EMIT: 
3c79				CWHEAD .DOTH 7 "EMIT" 4 WORD_FLAG_CODE 
3c79 1b				db WORD_SYS_CORE+7             
3c7a ca 3c			dw .DOTH            
3c7c 05				db 4 + 1 
3c7d .. 00			db "EMIT",0              
3c82				endm 
# End of macro CWHEAD
3c82			; |  EMIT ( u -- ) Display ascii character  TOS   | DONE 
3c82					; get value off TOS and display it 
3c82			 
3c82					if DEBUG_FORTH_WORDS_KEY 
3c82						DMARK "EMT" 
3c82 f5				push af  
3c83 3a 97 3c			ld a, (.dmark)  
3c86 32 65 ee			ld (debug_mark),a  
3c89 3a 98 3c			ld a, (.dmark+1)  
3c8c 32 66 ee			ld (debug_mark+1),a  
3c8f 3a 99 3c			ld a, (.dmark+2)  
3c92 32 67 ee			ld (debug_mark+2),a  
3c95 18 03			jr .pastdmark  
3c97 ..			.dmark: db "EMT"  
3c9a f1			.pastdmark: pop af  
3c9b			endm  
# End of macro DMARK
3c9b						CALLMONITOR 
3c9b cd 6f ee			call debug_vector  
3c9e				endm  
# End of macro CALLMONITOR
3c9e					endif 
3c9e			 
3c9e					FORTH_DSP_VALUEHL 
3c9e cd 95 1d			call macro_dsp_valuehl 
3ca1				endm 
# End of macro FORTH_DSP_VALUEHL
3ca1			 
3ca1 7d					ld a,l 
3ca2			 
3ca2					; TODO write to display 
3ca2			 
3ca2 32 b9 e4				ld (os_input), a 
3ca5 3e 00				ld a, 0 
3ca7 32 ba e4				ld (os_input+1), a 
3caa					 
3caa 3a 58 ea				ld a, (f_cursor_ptr) 
3cad 11 b9 e4				ld de, os_input 
3cb0 cd db 0b				call str_at_display 
3cb3			 
3cb3			 
3cb3 3a 36 ea				ld a,(cli_autodisplay) 
3cb6 fe 00				cp 0 
3cb8 28 03				jr z, .enoupdate 
3cba cd eb 0b						call update_display 
3cbd					.enoupdate: 
3cbd			 
3cbd 3a 58 ea				ld a, (f_cursor_ptr) 
3cc0 3c					inc a 
3cc1 32 58 ea				ld (f_cursor_ptr), a   ; save new pos 
3cc4			 
3cc4			 
3cc4					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3cc4 cd 4d 1e			call macro_forth_dsp_pop 
3cc7				endm 
# End of macro FORTH_DSP_POP
3cc7			  
3cc7			 
3cc7					NEXTW 
3cc7 c3 81 1f			jp macro_next 
3cca				endm 
# End of macro NEXTW
3cca			.DOTH: 
3cca				CWHEAD .DOTF 8 ".-" 2 WORD_FLAG_CODE 
3cca 1c				db WORD_SYS_CORE+8             
3ccb fa 3c			dw .DOTF            
3ccd 03				db 2 + 1 
3cce .. 00			db ".-",0              
3cd1				endm 
# End of macro CWHEAD
3cd1			        ; | .- ( u -- ) Display TOS replacing any dashes with spaces. Means you dont need to wrap strings in double quotes!   | DONE 
3cd1					; get value off TOS and display it 
3cd1					if DEBUG_FORTH_WORDS_KEY 
3cd1						DMARK "DTD" 
3cd1 f5				push af  
3cd2 3a e6 3c			ld a, (.dmark)  
3cd5 32 65 ee			ld (debug_mark),a  
3cd8 3a e7 3c			ld a, (.dmark+1)  
3cdb 32 66 ee			ld (debug_mark+1),a  
3cde 3a e8 3c			ld a, (.dmark+2)  
3ce1 32 67 ee			ld (debug_mark+2),a  
3ce4 18 03			jr .pastdmark  
3ce6 ..			.dmark: db "DTD"  
3ce9 f1			.pastdmark: pop af  
3cea			endm  
# End of macro DMARK
3cea						CALLMONITOR 
3cea cd 6f ee			call debug_vector  
3ced				endm  
# End of macro CALLMONITOR
3ced					endif 
3ced 0e 01			ld c, 1	  ; flag for removal of '-' enabled 
3cef 3e 00			ld a, 0 
3cf1 32 37 ea			ld (cli_mvdot), a 
3cf4 c3 51 3d			jp .dotgo 
3cf7				NEXTW 
3cf7 c3 81 1f			jp macro_next 
3cfa				endm 
# End of macro NEXTW
3cfa			.DOTF: 
3cfa				CWHEAD .DOT 8 ".>" 2 WORD_FLAG_CODE 
3cfa 1c				db WORD_SYS_CORE+8             
3cfb 28 3d			dw .DOT            
3cfd 03				db 2 + 1 
3cfe .. 00			db ".>",0              
3d01				endm 
# End of macro CWHEAD
3d01			        ; | .> ( u -- ) Display TOS and move the next display point with display  | DONE 
3d01					; get value off TOS and display it 
3d01			        ; TODO BUG adds extra spaces 
3d01			        ; TODO BUG handle numerics? 
3d01					if DEBUG_FORTH_WORDS_KEY 
3d01						DMARK "DTC" 
3d01 f5				push af  
3d02 3a 16 3d			ld a, (.dmark)  
3d05 32 65 ee			ld (debug_mark),a  
3d08 3a 17 3d			ld a, (.dmark+1)  
3d0b 32 66 ee			ld (debug_mark+1),a  
3d0e 3a 18 3d			ld a, (.dmark+2)  
3d11 32 67 ee			ld (debug_mark+2),a  
3d14 18 03			jr .pastdmark  
3d16 ..			.dmark: db "DTC"  
3d19 f1			.pastdmark: pop af  
3d1a			endm  
# End of macro DMARK
3d1a						CALLMONITOR 
3d1a cd 6f ee			call debug_vector  
3d1d				endm  
# End of macro CALLMONITOR
3d1d					endif 
3d1d 3e 01			ld a, 1 
3d1f 32 37 ea			ld (cli_mvdot), a 
3d22 c3 51 3d			jp .dotgo 
3d25				NEXTW 
3d25 c3 81 1f			jp macro_next 
3d28				endm 
# End of macro NEXTW
3d28			 
3d28			.DOT: 
3d28				CWHEAD .CLS 8 "." 1 WORD_FLAG_CODE 
3d28 1c				db WORD_SYS_CORE+8             
3d29 04 3f			dw .CLS            
3d2b 02				db 1 + 1 
3d2c .. 00			db ".",0              
3d2e				endm 
# End of macro CWHEAD
3d2e			        ; | . ( u -- ) Display TOS. Does not move next print position. Use .> if you want that. | DONE 
3d2e					; get value off TOS and display it 
3d2e			 
3d2e					if DEBUG_FORTH_WORDS_KEY 
3d2e						DMARK "DOT" 
3d2e f5				push af  
3d2f 3a 43 3d			ld a, (.dmark)  
3d32 32 65 ee			ld (debug_mark),a  
3d35 3a 44 3d			ld a, (.dmark+1)  
3d38 32 66 ee			ld (debug_mark+1),a  
3d3b 3a 45 3d			ld a, (.dmark+2)  
3d3e 32 67 ee			ld (debug_mark+2),a  
3d41 18 03			jr .pastdmark  
3d43 ..			.dmark: db "DOT"  
3d46 f1			.pastdmark: pop af  
3d47			endm  
# End of macro DMARK
3d47						CALLMONITOR 
3d47 cd 6f ee			call debug_vector  
3d4a				endm  
# End of macro CALLMONITOR
3d4a					endif 
3d4a 3e 00			ld a, 0 
3d4c 32 37 ea			ld (cli_mvdot), a 
3d4f 0e 00		ld c, 0	  ; flag for removal of '-' disabled 
3d51				 
3d51			 
3d51			.dotgo: 
3d51			 
3d51			; move up type to on stack for parserv5 
3d51					FORTH_DSP 
3d51 cd 5b 1d			call macro_forth_dsp 
3d54				endm 
# End of macro FORTH_DSP
3d54				;FORTH_DSP_VALUE  
3d54			 
3d54			if DEBUG_FORTH_DOT 
3d54				DMARK "DOT" 
3d54 f5				push af  
3d55 3a 69 3d			ld a, (.dmark)  
3d58 32 65 ee			ld (debug_mark),a  
3d5b 3a 6a 3d			ld a, (.dmark+1)  
3d5e 32 66 ee			ld (debug_mark+1),a  
3d61 3a 6b 3d			ld a, (.dmark+2)  
3d64 32 67 ee			ld (debug_mark+2),a  
3d67 18 03			jr .pastdmark  
3d69 ..			.dmark: db "DOT"  
3d6c f1			.pastdmark: pop af  
3d6d			endm  
# End of macro DMARK
3d6d				CALLMONITOR 
3d6d cd 6f ee			call debug_vector  
3d70				endm  
# End of macro CALLMONITOR
3d70			endif	 
3d70			;		.print: 
3d70			 
3d70 7e				ld a,(hl)  ; work out what type of value is on the TOS 
3d71 23				inc hl   ; position to the actual value 
3d72 fe 01			cp DS_TYPE_STR 
3d74 20 06			jr nz, .dotnum1  
3d76			 
3d76			; display string 
3d76				FORTH_DSP_VALUE  
3d76 cd 7e 1d			call macro_forth_dsp_value 
3d79				endm 
# End of macro FORTH_DSP_VALUE
3d79 eb				ex de,hl 
3d7a 18 49			jr .dotwrite 
3d7c			 
3d7c			.dotnum1: 
3d7c fe 02			cp DS_TYPE_INUM 
3d7e 20 44			jr nz, .dotflot 
3d80			 
3d80			 
3d80			; display number 
3d80			 
3d80			;	push hl 
3d80			;	call clear_display 
3d80			;	pop hl 
3d80			 
3d80 5e				ld e, (hl) 
3d81 23				inc hl 
3d82 56				ld d, (hl) 
3d83 21 bb e2			ld hl, scratch 
3d86			if DEBUG_FORTH_DOT 
3d86				DMARK "DT1" 
3d86 f5				push af  
3d87 3a 9b 3d			ld a, (.dmark)  
3d8a 32 65 ee			ld (debug_mark),a  
3d8d 3a 9c 3d			ld a, (.dmark+1)  
3d90 32 66 ee			ld (debug_mark+1),a  
3d93 3a 9d 3d			ld a, (.dmark+2)  
3d96 32 67 ee			ld (debug_mark+2),a  
3d99 18 03			jr .pastdmark  
3d9b ..			.dmark: db "DT1"  
3d9e f1			.pastdmark: pop af  
3d9f			endm  
# End of macro DMARK
3d9f				CALLMONITOR 
3d9f cd 6f ee			call debug_vector  
3da2				endm  
# End of macro CALLMONITOR
3da2			endif	 
3da2			 
3da2 cd 0a 11			call uitoa_16 
3da5 eb				ex de,hl 
3da6			 
3da6			if DEBUG_FORTH_DOT 
3da6				DMARK "DT2" 
3da6 f5				push af  
3da7 3a bb 3d			ld a, (.dmark)  
3daa 32 65 ee			ld (debug_mark),a  
3dad 3a bc 3d			ld a, (.dmark+1)  
3db0 32 66 ee			ld (debug_mark+1),a  
3db3 3a bd 3d			ld a, (.dmark+2)  
3db6 32 67 ee			ld (debug_mark+2),a  
3db9 18 03			jr .pastdmark  
3dbb ..			.dmark: db "DT2"  
3dbe f1			.pastdmark: pop af  
3dbf			endm  
# End of macro DMARK
3dbf				CALLMONITOR 
3dbf cd 6f ee			call debug_vector  
3dc2				endm  
# End of macro CALLMONITOR
3dc2			endif	 
3dc2			 
3dc2			;	ld de, os_word_scratch 
3dc2 18 01			jr .dotwrite 
3dc4			 
3dc4 00			.dotflot:   nop 
3dc5			; TODO print floating point number 
3dc5			 
3dc5			.dotwrite:		 
3dc5			 
3dc5					; if c is set then set all '-' to spaces 
3dc5					; need to also take into account .>  
3dc5			 
3dc5 3e 01				ld a, 1 
3dc7 b9					cp c 
3dc8 20 67				jr nz, .nodashswap 
3dca			 
3dca					; DE has the string to write, working with HL 
3dca			 
3dca 06 ff				ld b, 255 
3dcc d5					push de 
3dcd e1					pop hl 
3dce			 
3dce			if DEBUG_FORTH_DOT 
3dce				DMARK "DT-" 
3dce f5				push af  
3dcf 3a e3 3d			ld a, (.dmark)  
3dd2 32 65 ee			ld (debug_mark),a  
3dd5 3a e4 3d			ld a, (.dmark+1)  
3dd8 32 66 ee			ld (debug_mark+1),a  
3ddb 3a e5 3d			ld a, (.dmark+2)  
3dde 32 67 ee			ld (debug_mark+2),a  
3de1 18 03			jr .pastdmark  
3de3 ..			.dmark: db "DT-"  
3de6 f1			.pastdmark: pop af  
3de7			endm  
# End of macro DMARK
3de7				CALLMONITOR 
3de7 cd 6f ee			call debug_vector  
3dea				endm  
# End of macro CALLMONITOR
3dea			endif	 
3dea 7e			.dashscan:	ld a, (hl) 
3deb fe 00				cp 0 
3ded 28 42				jr z, .nodashswap 
3def fe 2d				cp '-' 
3df1 20 03				jr nz, .dashskip 
3df3 3e 20				ld a, ' ' 
3df5 77					ld (hl), a 
3df6 23			.dashskip:	inc hl 
3df7			if DEBUG_FORTH_DOT 
3df7				DMARK "D-2" 
3df7 f5				push af  
3df8 3a 0c 3e			ld a, (.dmark)  
3dfb 32 65 ee			ld (debug_mark),a  
3dfe 3a 0d 3e			ld a, (.dmark+1)  
3e01 32 66 ee			ld (debug_mark+1),a  
3e04 3a 0e 3e			ld a, (.dmark+2)  
3e07 32 67 ee			ld (debug_mark+2),a  
3e0a 18 03			jr .pastdmark  
3e0c ..			.dmark: db "D-2"  
3e0f f1			.pastdmark: pop af  
3e10			endm  
# End of macro DMARK
3e10				CALLMONITOR 
3e10 cd 6f ee			call debug_vector  
3e13				endm  
# End of macro CALLMONITOR
3e13			endif	 
3e13 10 d5				djnz .dashscan 
3e15			 
3e15			if DEBUG_FORTH_DOT 
3e15				DMARK "D-1" 
3e15 f5				push af  
3e16 3a 2a 3e			ld a, (.dmark)  
3e19 32 65 ee			ld (debug_mark),a  
3e1c 3a 2b 3e			ld a, (.dmark+1)  
3e1f 32 66 ee			ld (debug_mark+1),a  
3e22 3a 2c 3e			ld a, (.dmark+2)  
3e25 32 67 ee			ld (debug_mark+2),a  
3e28 18 03			jr .pastdmark  
3e2a ..			.dmark: db "D-1"  
3e2d f1			.pastdmark: pop af  
3e2e			endm  
# End of macro DMARK
3e2e				CALLMONITOR 
3e2e cd 6f ee			call debug_vector  
3e31				endm  
# End of macro CALLMONITOR
3e31			endif	 
3e31			 
3e31			.nodashswap: 
3e31			 
3e31			if DEBUG_FORTH_DOT 
3e31				DMARK "D-o" 
3e31 f5				push af  
3e32 3a 46 3e			ld a, (.dmark)  
3e35 32 65 ee			ld (debug_mark),a  
3e38 3a 47 3e			ld a, (.dmark+1)  
3e3b 32 66 ee			ld (debug_mark+1),a  
3e3e 3a 48 3e			ld a, (.dmark+2)  
3e41 32 67 ee			ld (debug_mark+2),a  
3e44 18 03			jr .pastdmark  
3e46 ..			.dmark: db "D-o"  
3e49 f1			.pastdmark: pop af  
3e4a			endm  
# End of macro DMARK
3e4a				CALLMONITOR 
3e4a cd 6f ee			call debug_vector  
3e4d				endm  
# End of macro CALLMONITOR
3e4d			endif	 
3e4d			 
3e4d d5					push de   ; save string start in case we need to advance print 
3e4e			 
3e4e 3a 58 ea				ld a, (f_cursor_ptr) 
3e51 cd db 0b				call str_at_display 
3e54 3a 36 ea				ld a,(cli_autodisplay) 
3e57 fe 00				cp 0 
3e59 28 03				jr z, .noupdate 
3e5b cd eb 0b						call update_display 
3e5e					.noupdate: 
3e5e			 
3e5e			 
3e5e					; see if we need to advance the print position 
3e5e			 
3e5e e1					pop hl   ; get back string 
3e5f			;		ex de,hl 
3e5f			 
3e5f 3a 37 ea				ld a, (cli_mvdot) 
3e62			if DEBUG_FORTH_DOT 
3e62			;		ld e,a 
3e62				DMARK "D>1" 
3e62 f5				push af  
3e63 3a 77 3e			ld a, (.dmark)  
3e66 32 65 ee			ld (debug_mark),a  
3e69 3a 78 3e			ld a, (.dmark+1)  
3e6c 32 66 ee			ld (debug_mark+1),a  
3e6f 3a 79 3e			ld a, (.dmark+2)  
3e72 32 67 ee			ld (debug_mark+2),a  
3e75 18 03			jr .pastdmark  
3e77 ..			.dmark: db "D>1"  
3e7a f1			.pastdmark: pop af  
3e7b			endm  
# End of macro DMARK
3e7b				CALLMONITOR 
3e7b cd 6f ee			call debug_vector  
3e7e				endm  
# End of macro CALLMONITOR
3e7e			endif	 
3e7e fe 00				cp 0 
3e80 28 44				jr z, .noadv 
3e82					; yes, lets advance the print position 
3e82 3e 00				ld a, 0 
3e84 cd 66 11				call strlent 
3e87			if DEBUG_FORTH_DOT 
3e87				DMARK "D-?" 
3e87 f5				push af  
3e88 3a 9c 3e			ld a, (.dmark)  
3e8b 32 65 ee			ld (debug_mark),a  
3e8e 3a 9d 3e			ld a, (.dmark+1)  
3e91 32 66 ee			ld (debug_mark+1),a  
3e94 3a 9e 3e			ld a, (.dmark+2)  
3e97 32 67 ee			ld (debug_mark+2),a  
3e9a 18 03			jr .pastdmark  
3e9c ..			.dmark: db "D-?"  
3e9f f1			.pastdmark: pop af  
3ea0			endm  
# End of macro DMARK
3ea0				CALLMONITOR 
3ea0 cd 6f ee			call debug_vector  
3ea3				endm  
# End of macro CALLMONITOR
3ea3			endif	 
3ea3 3a 58 ea				ld a, (f_cursor_ptr) 
3ea6 85					add a,l 
3ea7					;call addatohl 
3ea7					;ld a, l 
3ea7 32 58 ea				ld (f_cursor_ptr), a   ; save new pos 
3eaa			 
3eaa			if DEBUG_FORTH_DOT 
3eaa				DMARK "D->" 
3eaa f5				push af  
3eab 3a bf 3e			ld a, (.dmark)  
3eae 32 65 ee			ld (debug_mark),a  
3eb1 3a c0 3e			ld a, (.dmark+1)  
3eb4 32 66 ee			ld (debug_mark+1),a  
3eb7 3a c1 3e			ld a, (.dmark+2)  
3eba 32 67 ee			ld (debug_mark+2),a  
3ebd 18 03			jr .pastdmark  
3ebf ..			.dmark: db "D->"  
3ec2 f1			.pastdmark: pop af  
3ec3			endm  
# End of macro DMARK
3ec3				CALLMONITOR 
3ec3 cd 6f ee			call debug_vector  
3ec6				endm  
# End of macro CALLMONITOR
3ec6			endif	 
3ec6			 
3ec6			.noadv:	 
3ec6			 
3ec6					if DEBUG_FORTH_DOT_WAIT 
3ec6							call next_page_prompt 
3ec6					endif	 
3ec6			; TODO this pop off the stack causes a crash. i dont know why 
3ec6			 
3ec6			 
3ec6			if DEBUG_FORTH_DOT 
3ec6				DMARK "DTh" 
3ec6 f5				push af  
3ec7 3a db 3e			ld a, (.dmark)  
3eca 32 65 ee			ld (debug_mark),a  
3ecd 3a dc 3e			ld a, (.dmark+1)  
3ed0 32 66 ee			ld (debug_mark+1),a  
3ed3 3a dd 3e			ld a, (.dmark+2)  
3ed6 32 67 ee			ld (debug_mark+2),a  
3ed9 18 03			jr .pastdmark  
3edb ..			.dmark: db "DTh"  
3ede f1			.pastdmark: pop af  
3edf			endm  
# End of macro DMARK
3edf				CALLMONITOR 
3edf cd 6f ee			call debug_vector  
3ee2				endm  
# End of macro CALLMONITOR
3ee2			endif	 
3ee2			 
3ee2					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3ee2 cd 4d 1e			call macro_forth_dsp_pop 
3ee5				endm 
# End of macro FORTH_DSP_POP
3ee5			 
3ee5			if DEBUG_FORTH_DOT 
3ee5				DMARK "DTi" 
3ee5 f5				push af  
3ee6 3a fa 3e			ld a, (.dmark)  
3ee9 32 65 ee			ld (debug_mark),a  
3eec 3a fb 3e			ld a, (.dmark+1)  
3eef 32 66 ee			ld (debug_mark+1),a  
3ef2 3a fc 3e			ld a, (.dmark+2)  
3ef5 32 67 ee			ld (debug_mark+2),a  
3ef8 18 03			jr .pastdmark  
3efa ..			.dmark: db "DTi"  
3efd f1			.pastdmark: pop af  
3efe			endm  
# End of macro DMARK
3efe				CALLMONITOR 
3efe cd 6f ee			call debug_vector  
3f01				endm  
# End of macro CALLMONITOR
3f01			endif	 
3f01			 
3f01			 
3f01					NEXTW 
3f01 c3 81 1f			jp macro_next 
3f04				endm 
# End of macro NEXTW
3f04			 
3f04			.CLS: 
3f04				CWHEAD .DRAW 33 "CLS" 3 WORD_FLAG_CODE 
3f04 35				db WORD_SYS_CORE+33             
3f05 31 3f			dw .DRAW            
3f07 04				db 3 + 1 
3f08 .. 00			db "CLS",0              
3f0c				endm 
# End of macro CWHEAD
3f0c			; | CLS ( -- ) Clear current frame buffer and set next print position to top left corner  | DONE 
3f0c					if DEBUG_FORTH_WORDS_KEY 
3f0c						DMARK "CLS" 
3f0c f5				push af  
3f0d 3a 21 3f			ld a, (.dmark)  
3f10 32 65 ee			ld (debug_mark),a  
3f13 3a 22 3f			ld a, (.dmark+1)  
3f16 32 66 ee			ld (debug_mark+1),a  
3f19 3a 23 3f			ld a, (.dmark+2)  
3f1c 32 67 ee			ld (debug_mark+2),a  
3f1f 18 03			jr .pastdmark  
3f21 ..			.dmark: db "CLS"  
3f24 f1			.pastdmark: pop af  
3f25			endm  
# End of macro DMARK
3f25						CALLMONITOR 
3f25 cd 6f ee			call debug_vector  
3f28				endm  
# End of macro CALLMONITOR
3f28					endif 
3f28 cd c8 0b				call clear_display 
3f2b c3 3f 40				jp .home		; and home cursor 
3f2e					NEXTW 
3f2e c3 81 1f			jp macro_next 
3f31				endm 
# End of macro NEXTW
3f31			 
3f31			.DRAW: 
3f31				CWHEAD .DUMP 34 "DRAW" 4 WORD_FLAG_CODE 
3f31 36				db WORD_SYS_CORE+34             
3f32 5c 3f			dw .DUMP            
3f34 05				db 4 + 1 
3f35 .. 00			db "DRAW",0              
3f3a				endm 
# End of macro CWHEAD
3f3a			; | DRAW ( -- ) Draw contents of current frame buffer  | DONE 
3f3a					if DEBUG_FORTH_WORDS_KEY 
3f3a						DMARK "DRW" 
3f3a f5				push af  
3f3b 3a 4f 3f			ld a, (.dmark)  
3f3e 32 65 ee			ld (debug_mark),a  
3f41 3a 50 3f			ld a, (.dmark+1)  
3f44 32 66 ee			ld (debug_mark+1),a  
3f47 3a 51 3f			ld a, (.dmark+2)  
3f4a 32 67 ee			ld (debug_mark+2),a  
3f4d 18 03			jr .pastdmark  
3f4f ..			.dmark: db "DRW"  
3f52 f1			.pastdmark: pop af  
3f53			endm  
# End of macro DMARK
3f53						CALLMONITOR 
3f53 cd 6f ee			call debug_vector  
3f56				endm  
# End of macro CALLMONITOR
3f56					endif 
3f56 cd eb 0b				call update_display 
3f59					NEXTW 
3f59 c3 81 1f			jp macro_next 
3f5c				endm 
# End of macro NEXTW
3f5c			 
3f5c			.DUMP: 
3f5c				CWHEAD .CDUMP 35 "DUMP" 4 WORD_FLAG_CODE 
3f5c 37				db WORD_SYS_CORE+35             
3f5d 94 3f			dw .CDUMP            
3f5f 05				db 4 + 1 
3f60 .. 00			db "DUMP",0              
3f65				endm 
# End of macro CWHEAD
3f65			; | DUMP ( x -- ) With address x display dump   | DONE 
3f65			; TODO pop address to use off of the stack 
3f65					if DEBUG_FORTH_WORDS_KEY 
3f65						DMARK "DUM" 
3f65 f5				push af  
3f66 3a 7a 3f			ld a, (.dmark)  
3f69 32 65 ee			ld (debug_mark),a  
3f6c 3a 7b 3f			ld a, (.dmark+1)  
3f6f 32 66 ee			ld (debug_mark+1),a  
3f72 3a 7c 3f			ld a, (.dmark+2)  
3f75 32 67 ee			ld (debug_mark+2),a  
3f78 18 03			jr .pastdmark  
3f7a ..			.dmark: db "DUM"  
3f7d f1			.pastdmark: pop af  
3f7e			endm  
# End of macro DMARK
3f7e						CALLMONITOR 
3f7e cd 6f ee			call debug_vector  
3f81				endm  
# End of macro CALLMONITOR
3f81					endif 
3f81 cd c8 0b				call clear_display 
3f84			 
3f84					; get address 
3f84			 
3f84					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3f84 cd 95 1d			call macro_dsp_valuehl 
3f87				endm 
# End of macro FORTH_DSP_VALUEHL
3f87				 
3f87					; save it for cdump 
3f87			 
3f87 22 de e5				ld (os_cur_ptr),hl 
3f8a			 
3f8a					; destroy value TOS 
3f8a			 
3f8a					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
3f8a cd 4d 1e			call macro_forth_dsp_pop 
3f8d				endm 
# End of macro FORTH_DSP_POP
3f8d			 
3f8d cd 10 1a				call dumpcont	; skip old style of param parsing	 
3f90 c9					ret			; TODO command causes end of remaining parsing so cant do: $0000 DUMP $8000 DUMP 
3f91					NEXTW 
3f91 c3 81 1f			jp macro_next 
3f94				endm 
# End of macro NEXTW
3f94			.CDUMP: 
3f94				CWHEAD .DAT 36 "CDUMP" 5 WORD_FLAG_CODE 
3f94 38				db WORD_SYS_CORE+36             
3f95 c4 3f			dw .DAT            
3f97 06				db 5 + 1 
3f98 .. 00			db "CDUMP",0              
3f9e				endm 
# End of macro CWHEAD
3f9e			; | CDUMP ( -- ) Continue dump of memory from DUMP | DONE 
3f9e					if DEBUG_FORTH_WORDS_KEY 
3f9e						DMARK "CDP" 
3f9e f5				push af  
3f9f 3a b3 3f			ld a, (.dmark)  
3fa2 32 65 ee			ld (debug_mark),a  
3fa5 3a b4 3f			ld a, (.dmark+1)  
3fa8 32 66 ee			ld (debug_mark+1),a  
3fab 3a b5 3f			ld a, (.dmark+2)  
3fae 32 67 ee			ld (debug_mark+2),a  
3fb1 18 03			jr .pastdmark  
3fb3 ..			.dmark: db "CDP"  
3fb6 f1			.pastdmark: pop af  
3fb7			endm  
# End of macro DMARK
3fb7						CALLMONITOR 
3fb7 cd 6f ee			call debug_vector  
3fba				endm  
# End of macro CALLMONITOR
3fba					endif 
3fba cd c8 0b				call clear_display 
3fbd cd 10 1a				call dumpcont	 
3fc0 c9					ret			; TODO command causes end of remaining parsing so cant do: $0000 DUMP CDUMP $8000 DUMP 
3fc1					NEXTW 
3fc1 c3 81 1f			jp macro_next 
3fc4				endm 
# End of macro NEXTW
3fc4			 
3fc4			 
3fc4			 
3fc4			 
3fc4			.DAT: 
3fc4				CWHEAD .HOME 41 "AT" 2 WORD_FLAG_CODE 
3fc4 3d				db WORD_SYS_CORE+41             
3fc5 1a 40			dw .HOME            
3fc7 03				db 2 + 1 
3fc8 .. 00			db "AT",0              
3fcb				endm 
# End of macro CWHEAD
3fcb			; | AT ( u1 u2 -- ) Set next output via . or emit at row u2 col u1 | DONE 
3fcb					if DEBUG_FORTH_WORDS_KEY 
3fcb						DMARK "AT." 
3fcb f5				push af  
3fcc 3a e0 3f			ld a, (.dmark)  
3fcf 32 65 ee			ld (debug_mark),a  
3fd2 3a e1 3f			ld a, (.dmark+1)  
3fd5 32 66 ee			ld (debug_mark+1),a  
3fd8 3a e2 3f			ld a, (.dmark+2)  
3fdb 32 67 ee			ld (debug_mark+2),a  
3fde 18 03			jr .pastdmark  
3fe0 ..			.dmark: db "AT."  
3fe3 f1			.pastdmark: pop af  
3fe4			endm  
# End of macro DMARK
3fe4						CALLMONITOR 
3fe4 cd 6f ee			call debug_vector  
3fe7				endm  
# End of macro CALLMONITOR
3fe7					endif 
3fe7					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
3fe7 cd 95 1d			call macro_dsp_valuehl 
3fea				endm 
# End of macro FORTH_DSP_VALUEHL
3fea			 
3fea			 
3fea					; TODO save cursor row 
3fea 7d					ld a,l 
3feb fe 02				cp 2 
3fed 20 04				jr nz, .crow3 
3fef 3e 28				ld a, display_row_2 
3ff1 18 12				jr .ccol1 
3ff3 fe 03		.crow3:		cp 3 
3ff5 20 04				jr nz, .crow4 
3ff7 3e 50				ld a, display_row_3 
3ff9 18 0a				jr .ccol1 
3ffb fe 04		.crow4:		cp 4 
3ffd 20 04				jr nz, .crow1 
3fff 3e 78				ld a, display_row_4 
4001 18 02				jr .ccol1 
4003 3e 00		.crow1:		ld a,display_row_1 
4005 f5			.ccol1:		push af			; got row offset 
4006 6f					ld l,a 
4007 26 00				ld h,0 
4009					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4009 cd 4d 1e			call macro_forth_dsp_pop 
400c				endm 
# End of macro FORTH_DSP_POP
400c					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
400c cd 95 1d			call macro_dsp_valuehl 
400f				endm 
# End of macro FORTH_DSP_VALUEHL
400f					; TODO save cursor col 
400f f1					pop af 
4010 85					add l		; add col offset 
4011 32 58 ea				ld (f_cursor_ptr), a 
4014					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4014 cd 4d 1e			call macro_forth_dsp_pop 
4017				endm 
# End of macro FORTH_DSP_POP
4017			 
4017					; calculate  
4017			 
4017					NEXTW 
4017 c3 81 1f			jp macro_next 
401a				endm 
# End of macro NEXTW
401a			 
401a			 
401a			.HOME: 
401a				CWHEAD .CR 45 "HOME" 4 WORD_FLAG_CODE 
401a 41				db WORD_SYS_CORE+45             
401b 47 40			dw .CR            
401d 05				db 4 + 1 
401e .. 00			db "HOME",0              
4023				endm 
# End of macro CWHEAD
4023			; | HOME ( -- ) Reset the current cursor for output to home | DONE 
4023					if DEBUG_FORTH_WORDS_KEY 
4023						DMARK "HOM" 
4023 f5				push af  
4024 3a 38 40			ld a, (.dmark)  
4027 32 65 ee			ld (debug_mark),a  
402a 3a 39 40			ld a, (.dmark+1)  
402d 32 66 ee			ld (debug_mark+1),a  
4030 3a 3a 40			ld a, (.dmark+2)  
4033 32 67 ee			ld (debug_mark+2),a  
4036 18 03			jr .pastdmark  
4038 ..			.dmark: db "HOM"  
403b f1			.pastdmark: pop af  
403c			endm  
# End of macro DMARK
403c						CALLMONITOR 
403c cd 6f ee			call debug_vector  
403f				endm  
# End of macro CALLMONITOR
403f					endif 
403f 3e 00		.home:		ld a, 0		; and home cursor 
4041 32 58 ea				ld (f_cursor_ptr), a 
4044					NEXTW 
4044 c3 81 1f			jp macro_next 
4047				endm 
# End of macro NEXTW
4047			 
4047			 
4047			.CR: 
4047				CWHEAD .SPACE 50 "CR" 2 WORD_FLAG_CODE 
4047 46				db WORD_SYS_CORE+50             
4048 82 40			dw .SPACE            
404a 03				db 2 + 1 
404b .. 00			db "CR",0              
404e				endm 
# End of macro CWHEAD
404e			; | CR (  -- s ) Push CR/LF pair onto the stack as a string  | DONE 
404e					if DEBUG_FORTH_WORDS_KEY 
404e						DMARK "CR." 
404e f5				push af  
404f 3a 63 40			ld a, (.dmark)  
4052 32 65 ee			ld (debug_mark),a  
4055 3a 64 40			ld a, (.dmark+1)  
4058 32 66 ee			ld (debug_mark+1),a  
405b 3a 65 40			ld a, (.dmark+2)  
405e 32 67 ee			ld (debug_mark+2),a  
4061 18 03			jr .pastdmark  
4063 ..			.dmark: db "CR."  
4066 f1			.pastdmark: pop af  
4067			endm  
# End of macro DMARK
4067						CALLMONITOR 
4067 cd 6f ee			call debug_vector  
406a				endm  
# End of macro CALLMONITOR
406a					endif 
406a 3e 0d				ld a, 13 
406c 32 bb e2				ld (scratch),a 
406f 3e 0a				ld a, 10 
4071 32 bc e2				ld (scratch+1),a 
4074 3e 00				ld a, 0 
4076 32 bd e2				ld (scratch+2),a 
4079 21 bb e2				ld hl, scratch 
407c cd fe 1b				call forth_push_str 
407f					 
407f				       NEXTW 
407f c3 81 1f			jp macro_next 
4082				endm 
# End of macro NEXTW
4082			.SPACE: 
4082				CWHEAD .SPACES 50 "BL" 2 WORD_FLAG_CODE 
4082 46				db WORD_SYS_CORE+50             
4083 b8 40			dw .SPACES            
4085 03				db 2 + 1 
4086 .. 00			db "BL",0              
4089				endm 
# End of macro CWHEAD
4089			; | BL (  -- c ) Push the value of space onto the stack as a string  | DONE 
4089					if DEBUG_FORTH_WORDS_KEY 
4089						DMARK "BL." 
4089 f5				push af  
408a 3a 9e 40			ld a, (.dmark)  
408d 32 65 ee			ld (debug_mark),a  
4090 3a 9f 40			ld a, (.dmark+1)  
4093 32 66 ee			ld (debug_mark+1),a  
4096 3a a0 40			ld a, (.dmark+2)  
4099 32 67 ee			ld (debug_mark+2),a  
409c 18 03			jr .pastdmark  
409e ..			.dmark: db "BL."  
40a1 f1			.pastdmark: pop af  
40a2			endm  
# End of macro DMARK
40a2						CALLMONITOR 
40a2 cd 6f ee			call debug_vector  
40a5				endm  
# End of macro CALLMONITOR
40a5					endif 
40a5 3e 20				ld a, " " 
40a7 32 bb e2				ld (scratch),a 
40aa 3e 00				ld a, 0 
40ac 32 bc e2				ld (scratch+1),a 
40af 21 bb e2				ld hl, scratch 
40b2 cd fe 1b				call forth_push_str 
40b5					 
40b5				       NEXTW 
40b5 c3 81 1f			jp macro_next 
40b8				endm 
# End of macro NEXTW
40b8			 
40b8			;.blstr: db " ", 0 
40b8			 
40b8			.SPACES: 
40b8				CWHEAD .SCROLL 51 "SPACES" 6 WORD_FLAG_CODE 
40b8 47				db WORD_SYS_CORE+51             
40b9 53 41			dw .SCROLL            
40bb 07				db 6 + 1 
40bc .. 00			db "SPACES",0              
40c3				endm 
# End of macro CWHEAD
40c3			; | SPACES ( u -- str ) A string of u spaces is pushed onto the stack | DONE 
40c3					if DEBUG_FORTH_WORDS_KEY 
40c3						DMARK "SPS" 
40c3 f5				push af  
40c4 3a d8 40			ld a, (.dmark)  
40c7 32 65 ee			ld (debug_mark),a  
40ca 3a d9 40			ld a, (.dmark+1)  
40cd 32 66 ee			ld (debug_mark+1),a  
40d0 3a da 40			ld a, (.dmark+2)  
40d3 32 67 ee			ld (debug_mark+2),a  
40d6 18 03			jr .pastdmark  
40d8 ..			.dmark: db "SPS"  
40db f1			.pastdmark: pop af  
40dc			endm  
# End of macro DMARK
40dc						CALLMONITOR 
40dc cd 6f ee			call debug_vector  
40df				endm  
# End of macro CALLMONITOR
40df					endif 
40df			 
40df			 
40df					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
40df cd 95 1d			call macro_dsp_valuehl 
40e2				endm 
# End of macro FORTH_DSP_VALUEHL
40e2			 
40e2 e5					push hl    ; u 
40e3					if DEBUG_FORTH_WORDS 
40e3						DMARK "SPA" 
40e3 f5				push af  
40e4 3a f8 40			ld a, (.dmark)  
40e7 32 65 ee			ld (debug_mark),a  
40ea 3a f9 40			ld a, (.dmark+1)  
40ed 32 66 ee			ld (debug_mark+1),a  
40f0 3a fa 40			ld a, (.dmark+2)  
40f3 32 67 ee			ld (debug_mark+2),a  
40f6 18 03			jr .pastdmark  
40f8 ..			.dmark: db "SPA"  
40fb f1			.pastdmark: pop af  
40fc			endm  
# End of macro DMARK
40fc						CALLMONITOR 
40fc cd 6f ee			call debug_vector  
40ff				endm  
# End of macro CALLMONITOR
40ff					endif 
40ff			 
40ff					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
40ff cd 4d 1e			call macro_forth_dsp_pop 
4102				endm 
# End of macro FORTH_DSP_POP
4102 e1					pop hl 
4103 0e 00				ld c, 0 
4105 45					ld b, l 
4106 21 bb e2				ld hl, scratch  
4109			 
4109					if DEBUG_FORTH_WORDS 
4109						DMARK "SP2" 
4109 f5				push af  
410a 3a 1e 41			ld a, (.dmark)  
410d 32 65 ee			ld (debug_mark),a  
4110 3a 1f 41			ld a, (.dmark+1)  
4113 32 66 ee			ld (debug_mark+1),a  
4116 3a 20 41			ld a, (.dmark+2)  
4119 32 67 ee			ld (debug_mark+2),a  
411c 18 03			jr .pastdmark  
411e ..			.dmark: db "SP2"  
4121 f1			.pastdmark: pop af  
4122			endm  
# End of macro DMARK
4122						CALLMONITOR 
4122 cd 6f ee			call debug_vector  
4125				endm  
# End of macro CALLMONITOR
4125					endif 
4125 3e 20				ld a, ' ' 
4127			.spaces1:	 
4127 77					ld (hl),a 
4128 23					inc hl 
4129					 
4129 10 fc				djnz .spaces1 
412b 3e 00				ld a,0 
412d 77					ld (hl),a 
412e 21 bb e2				ld hl, scratch 
4131					if DEBUG_FORTH_WORDS 
4131						DMARK "SP3" 
4131 f5				push af  
4132 3a 46 41			ld a, (.dmark)  
4135 32 65 ee			ld (debug_mark),a  
4138 3a 47 41			ld a, (.dmark+1)  
413b 32 66 ee			ld (debug_mark+1),a  
413e 3a 48 41			ld a, (.dmark+2)  
4141 32 67 ee			ld (debug_mark+2),a  
4144 18 03			jr .pastdmark  
4146 ..			.dmark: db "SP3"  
4149 f1			.pastdmark: pop af  
414a			endm  
# End of macro DMARK
414a						CALLMONITOR 
414a cd 6f ee			call debug_vector  
414d				endm  
# End of macro CALLMONITOR
414d					endif 
414d cd fe 1b				call forth_push_str 
4150			 
4150				       NEXTW 
4150 c3 81 1f			jp macro_next 
4153				endm 
# End of macro NEXTW
4153			 
4153			 
4153			 
4153			.SCROLL: 
4153				CWHEAD .SCROLLD 63 "SCROLL" 6 WORD_FLAG_CODE 
4153 53				db WORD_SYS_CORE+63             
4154 80 41			dw .SCROLLD            
4156 07				db 6 + 1 
4157 .. 00			db "SCROLL",0              
415e				endm 
# End of macro CWHEAD
415e			; | SCROLL ( -- ) Scroll up one line - next write will update if required | DONE 
415e					if DEBUG_FORTH_WORDS_KEY 
415e						DMARK "SCR" 
415e f5				push af  
415f 3a 73 41			ld a, (.dmark)  
4162 32 65 ee			ld (debug_mark),a  
4165 3a 74 41			ld a, (.dmark+1)  
4168 32 66 ee			ld (debug_mark+1),a  
416b 3a 75 41			ld a, (.dmark+2)  
416e 32 67 ee			ld (debug_mark+2),a  
4171 18 03			jr .pastdmark  
4173 ..			.dmark: db "SCR"  
4176 f1			.pastdmark: pop af  
4177			endm  
# End of macro DMARK
4177						CALLMONITOR 
4177 cd 6f ee			call debug_vector  
417a				endm  
# End of macro CALLMONITOR
417a					endif 
417a			 
417a cd 8a 0b			call scroll_up 
417d			;	call update_display 
417d			 
417d					NEXTW 
417d c3 81 1f			jp macro_next 
4180				endm 
# End of macro NEXTW
4180			 
4180			 
4180			 
4180			;		; get dir 
4180			; 
4180			;		FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4180			; 
4180			;		push hl 
4180			; 
4180			;		; destroy value TOS 
4180			; 
4180			;		FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4180			; 
4180			;		; get count 
4180			; 
4180			;		FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4180			; 
4180			;		push hl 
4180			; 
4180			;		; destroy value TOS 
4180			; 
4180			;		FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4180			; 
4180			;		; one value on hl get other one back 
4180			; 
4180			;		pop bc    ; count 
4180			; 
4180			;		pop de   ; dir 
4180			; 
4180			; 
4180			;		ld b, c 
4180			; 
4180			;.scrolldir:     push bc 
4180			;		push de 
4180			; 
4180			;		ld a, 0 
4180			;		cp e 
4180			;		jr z, .scrollup  
4180			;		call scroll_down 
4180			;		jr .scrollnext 
4180			;.scrollup:	call scroll_up 
4180			; 
4180			;		 
4180			;.scrollnext: 
4180			;		pop de 
4180			;		pop bc 
4180			;		djnz .scrolldir 
4180			; 
4180			; 
4180			; 
4180			; 
4180			; 
4180			;		NEXTW 
4180			 
4180			.SCROLLD: 
4180				CWHEAD .ATQ 63 "SCROLLD" 7 WORD_FLAG_CODE 
4180 53				db WORD_SYS_CORE+63             
4181 ae 41			dw .ATQ            
4183 08				db 7 + 1 
4184 .. 00			db "SCROLLD",0              
418c				endm 
# End of macro CWHEAD
418c			; | SCROLLD ( -- ) Scroll down one line - next write will update if required | TO DO 
418c					if DEBUG_FORTH_WORDS_KEY 
418c						DMARK "SCD" 
418c f5				push af  
418d 3a a1 41			ld a, (.dmark)  
4190 32 65 ee			ld (debug_mark),a  
4193 3a a2 41			ld a, (.dmark+1)  
4196 32 66 ee			ld (debug_mark+1),a  
4199 3a a3 41			ld a, (.dmark+2)  
419c 32 67 ee			ld (debug_mark+2),a  
419f 18 03			jr .pastdmark  
41a1 ..			.dmark: db "SCD"  
41a4 f1			.pastdmark: pop af  
41a5			endm  
# End of macro DMARK
41a5						CALLMONITOR 
41a5 cd 6f ee			call debug_vector  
41a8				endm  
# End of macro CALLMONITOR
41a8					endif 
41a8			 
41a8 cd ae 0b			call scroll_down 
41ab			;	call update_display 
41ab			 
41ab					NEXTW 
41ab c3 81 1f			jp macro_next 
41ae				endm 
# End of macro NEXTW
41ae			 
41ae			 
41ae			.ATQ: 
41ae				CWHEAD .AUTODSP 78 "AT@" 3 WORD_FLAG_CODE 
41ae 62				db WORD_SYS_CORE+78             
41af 0c 42			dw .AUTODSP            
41b1 04				db 3 + 1 
41b2 .. 00			db "AT@",0              
41b6				endm 
# End of macro CWHEAD
41b6			; | AT@ ( u1 u2 -- n ) Push to stack ASCII value at row u2 col u1 | DONE 
41b6					if DEBUG_FORTH_WORDS_KEY 
41b6						DMARK "ATA" 
41b6 f5				push af  
41b7 3a cb 41			ld a, (.dmark)  
41ba 32 65 ee			ld (debug_mark),a  
41bd 3a cc 41			ld a, (.dmark+1)  
41c0 32 66 ee			ld (debug_mark+1),a  
41c3 3a cd 41			ld a, (.dmark+2)  
41c6 32 67 ee			ld (debug_mark+2),a  
41c9 18 03			jr .pastdmark  
41cb ..			.dmark: db "ATA"  
41ce f1			.pastdmark: pop af  
41cf			endm  
# End of macro DMARK
41cf						CALLMONITOR 
41cf cd 6f ee			call debug_vector  
41d2				endm  
# End of macro CALLMONITOR
41d2					endif 
41d2			 
41d2			 
41d2					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
41d2 cd 95 1d			call macro_dsp_valuehl 
41d5				endm 
# End of macro FORTH_DSP_VALUEHL
41d5			 
41d5					; TODO save cursor row 
41d5 7d					ld a,l 
41d6 fe 02				cp 2 
41d8 20 04				jr nz, .crow3aq 
41da 3e 28				ld a, display_row_2 
41dc 18 12				jr .ccol1aq 
41de fe 03		.crow3aq:		cp 3 
41e0 20 04				jr nz, .crow4aq 
41e2 3e 50				ld a, display_row_3 
41e4 18 0a				jr .ccol1aq 
41e6 fe 04		.crow4aq:		cp 4 
41e8 20 04				jr nz, .crow1aq 
41ea 3e 78				ld a, display_row_4 
41ec 18 02				jr .ccol1aq 
41ee 3e 00		.crow1aq:		ld a,display_row_1 
41f0 f5			.ccol1aq:		push af			; got row offset 
41f1 6f					ld l,a 
41f2 26 00				ld h,0 
41f4					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
41f4 cd 4d 1e			call macro_forth_dsp_pop 
41f7				endm 
# End of macro FORTH_DSP_POP
41f7					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
41f7 cd 95 1d			call macro_dsp_valuehl 
41fa				endm 
# End of macro FORTH_DSP_VALUEHL
41fa					; TODO save cursor col 
41fa f1					pop af 
41fb 85					add l		; add col offset 
41fc			 
41fc					; add current frame buffer address 
41fc 2a c6 eb				ld hl, (display_fb_active) 
41ff cd f5 0d				call addatohl 
4202			 
4202			 
4202			 
4202			 
4202					; get char frame buffer location offset in hl 
4202			 
4202 7e					ld a,(hl) 
4203 26 00				ld h, 0 
4205 6f					ld l, a 
4206			 
4206 cd 90 1b				call forth_push_numhl 
4209			 
4209			 
4209					NEXTW 
4209 c3 81 1f			jp macro_next 
420c				endm 
# End of macro NEXTW
420c			 
420c			.AUTODSP: 
420c				CWHEAD .MENU 79 "ADSP" 4 WORD_FLAG_CODE 
420c 63				db WORD_SYS_CORE+79             
420d 22 42			dw .MENU            
420f 05				db 4 + 1 
4210 .. 00			db "ADSP",0              
4215				endm 
# End of macro CWHEAD
4215			; | ADSP ( u1 --  ) Enable/Disable Auto screen updates (SLOW). | DONE 
4215			; | | If off, use DRAW to refresh. Default is on. $0003 will enable direct screen writes (TODO)  
4215			 
4215					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4215 cd 95 1d			call macro_dsp_valuehl 
4218				endm 
# End of macro FORTH_DSP_VALUEHL
4218			 
4218			;		push hl 
4218			 
4218					; destroy value TOS 
4218			 
4218					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4218 cd 4d 1e			call macro_forth_dsp_pop 
421b				endm 
# End of macro FORTH_DSP_POP
421b			 
421b			;		pop hl 
421b			 
421b 7d					ld a,l 
421c 32 36 ea				ld (cli_autodisplay), a 
421f				       NEXTW 
421f c3 81 1f			jp macro_next 
4222				endm 
# End of macro NEXTW
4222			 
4222			.MENU: 
4222				CWHEAD .ENDDISPLAY 92 "MENU" 4 WORD_FLAG_CODE 
4222 70				db WORD_SYS_CORE+92             
4223 cb 42			dw .ENDDISPLAY            
4225 05				db 4 + 1 
4226 .. 00			db "MENU",0              
422b				endm 
# End of macro CWHEAD
422b			; | MENU ( u1....ux n -- n ) Create a menu. n is the number of menu items on stack. Push number selection to TOS | DONE 
422b			 
422b			;		; get number of items on the stack 
422b			; 
422b				 
422b					FORTH_DSP_VALUEHL 
422b cd 95 1d			call macro_dsp_valuehl 
422e				endm 
# End of macro FORTH_DSP_VALUEHL
422e				 
422e					if DEBUG_FORTH_WORDS_KEY 
422e						DMARK "MNU" 
422e f5				push af  
422f 3a 43 42			ld a, (.dmark)  
4232 32 65 ee			ld (debug_mark),a  
4235 3a 44 42			ld a, (.dmark+1)  
4238 32 66 ee			ld (debug_mark+1),a  
423b 3a 45 42			ld a, (.dmark+2)  
423e 32 67 ee			ld (debug_mark+2),a  
4241 18 03			jr .pastdmark  
4243 ..			.dmark: db "MNU"  
4246 f1			.pastdmark: pop af  
4247			endm  
# End of macro DMARK
4247						CALLMONITOR 
4247 cd 6f ee			call debug_vector  
424a				endm  
# End of macro CALLMONITOR
424a					endif 
424a			 
424a 45					ld b, l	 
424b 05					dec b 
424c			 
424c					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
424c cd 4d 1e			call macro_forth_dsp_pop 
424f				endm 
# End of macro FORTH_DSP_POP
424f			 
424f			 
424f					; go directly through the stack to pluck out the string pointers and build an array 
424f			 
424f			;		FORTH_DSP 
424f			 
424f					; hl contains top most stack item 
424f				 
424f 11 bb e2				ld de, scratch 
4252			 
4252			.mbuild: 
4252			 
4252					FORTH_DSP_VALUEHL 
4252 cd 95 1d			call macro_dsp_valuehl 
4255				endm 
# End of macro FORTH_DSP_VALUEHL
4255			 
4255					if DEBUG_FORTH_WORDS 
4255						DMARK "MN3" 
4255 f5				push af  
4256 3a 6a 42			ld a, (.dmark)  
4259 32 65 ee			ld (debug_mark),a  
425c 3a 6b 42			ld a, (.dmark+1)  
425f 32 66 ee			ld (debug_mark+1),a  
4262 3a 6c 42			ld a, (.dmark+2)  
4265 32 67 ee			ld (debug_mark+2),a  
4268 18 03			jr .pastdmark  
426a ..			.dmark: db "MN3"  
426d f1			.pastdmark: pop af  
426e			endm  
# End of macro DMARK
426e						CALLMONITOR 
426e cd 6f ee			call debug_vector  
4271				endm  
# End of macro CALLMONITOR
4271					endif 
4271 eb					ex de, hl 
4272 73					ld (hl), e 
4273 23					inc hl 
4274 72					ld (hl), d 
4275 23					inc hl 
4276 eb					ex de, hl 
4277			 
4277					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4277 cd 4d 1e			call macro_forth_dsp_pop 
427a				endm 
# End of macro FORTH_DSP_POP
427a			 
427a 10 d6				djnz .mbuild 
427c			 
427c					; done add term 
427c			 
427c eb					ex de, hl 
427d 36 00				ld (hl), 0 
427f 23					inc hl 
4280 36 00				ld (hl), 0 
4282			 
4282				 
4282					 
4282 21 bb e2				ld hl, scratch 
4285			 
4285					if DEBUG_FORTH_WORDS 
4285						DMARK "MNx" 
4285 f5				push af  
4286 3a 9a 42			ld a, (.dmark)  
4289 32 65 ee			ld (debug_mark),a  
428c 3a 9b 42			ld a, (.dmark+1)  
428f 32 66 ee			ld (debug_mark+1),a  
4292 3a 9c 42			ld a, (.dmark+2)  
4295 32 67 ee			ld (debug_mark+2),a  
4298 18 03			jr .pastdmark  
429a ..			.dmark: db "MNx"  
429d f1			.pastdmark: pop af  
429e			endm  
# End of macro DMARK
429e						CALLMONITOR 
429e cd 6f ee			call debug_vector  
42a1				endm  
# End of macro CALLMONITOR
42a1					endif 
42a1			 
42a1			 
42a1			 
42a1 3e 00				ld a, 0 
42a3 cd f9 0b				call menu 
42a6			 
42a6			 
42a6 6f					ld l, a 
42a7 26 00				ld h, 0 
42a9			 
42a9					if DEBUG_FORTH_WORDS 
42a9						DMARK "MNr" 
42a9 f5				push af  
42aa 3a be 42			ld a, (.dmark)  
42ad 32 65 ee			ld (debug_mark),a  
42b0 3a bf 42			ld a, (.dmark+1)  
42b3 32 66 ee			ld (debug_mark+1),a  
42b6 3a c0 42			ld a, (.dmark+2)  
42b9 32 67 ee			ld (debug_mark+2),a  
42bc 18 03			jr .pastdmark  
42be ..			.dmark: db "MNr"  
42c1 f1			.pastdmark: pop af  
42c2			endm  
# End of macro DMARK
42c2						CALLMONITOR 
42c2 cd 6f ee			call debug_vector  
42c5				endm  
# End of macro CALLMONITOR
42c5					endif 
42c5			 
42c5 cd 90 1b				call forth_push_numhl 
42c8			 
42c8			 
42c8			 
42c8			 
42c8				       NEXTW 
42c8 c3 81 1f			jp macro_next 
42cb				endm 
# End of macro NEXTW
42cb			 
42cb			 
42cb			.ENDDISPLAY: 
42cb			 
42cb			; eof 
# End of file forth_words_display.asm
42cb			include "forth_words_str.asm" 
42cb			 
42cb			; | ## String Words 
42cb			 
42cb			.SPLIT:   
42cb			 
42cb				CWHEAD .PTR 52 "SPLIT" 5 WORD_FLAG_CODE 
42cb 48				db WORD_SYS_CORE+52             
42cc c0 43			dw .PTR            
42ce 06				db 5 + 1 
42cf .. 00			db "SPLIT",0              
42d5				endm 
# End of macro CWHEAD
42d5			; | SPLIT ( s d -- s s...sn c ) Using delimter d, add strings found in s to stack pushing item count c | DONE 
42d5					if DEBUG_FORTH_WORDS_KEY 
42d5						DMARK "SPT" 
42d5 f5				push af  
42d6 3a ea 42			ld a, (.dmark)  
42d9 32 65 ee			ld (debug_mark),a  
42dc 3a eb 42			ld a, (.dmark+1)  
42df 32 66 ee			ld (debug_mark+1),a  
42e2 3a ec 42			ld a, (.dmark+2)  
42e5 32 67 ee			ld (debug_mark+2),a  
42e8 18 03			jr .pastdmark  
42ea ..			.dmark: db "SPT"  
42ed f1			.pastdmark: pop af  
42ee			endm  
# End of macro DMARK
42ee						CALLMONITOR 
42ee cd 6f ee			call debug_vector  
42f1				endm  
# End of macro CALLMONITOR
42f1					endif 
42f1			 
42f1					; get delim 
42f1					FORTH_DSP_VALUEHL 
42f1 cd 95 1d			call macro_dsp_valuehl 
42f4				endm 
# End of macro FORTH_DSP_VALUEHL
42f4			 
42f4					FORTH_DSP_POP 
42f4 cd 4d 1e			call macro_forth_dsp_pop 
42f7				endm 
# End of macro FORTH_DSP_POP
42f7					 
42f7			 
42f7 45					ld b, l    ; move delim to b 
42f8 0e 01				ld c, 1   ; count of poritions 
42fa			 
42fa c5					push bc 
42fb			 
42fb					if DEBUG_FORTH_WORDS 
42fb						DMARK "SPa" 
42fb f5				push af  
42fc 3a 10 43			ld a, (.dmark)  
42ff 32 65 ee			ld (debug_mark),a  
4302 3a 11 43			ld a, (.dmark+1)  
4305 32 66 ee			ld (debug_mark+1),a  
4308 3a 12 43			ld a, (.dmark+2)  
430b 32 67 ee			ld (debug_mark+2),a  
430e 18 03			jr .pastdmark  
4310 ..			.dmark: db "SPa"  
4313 f1			.pastdmark: pop af  
4314			endm  
# End of macro DMARK
4314						CALLMONITOR 
4314 cd 6f ee			call debug_vector  
4317				endm  
# End of macro CALLMONITOR
4317					endif 
4317					; get pointer to string to chop up 
4317					FORTH_DSP_VALUEHL 
4317 cd 95 1d			call macro_dsp_valuehl 
431a				endm 
# End of macro FORTH_DSP_VALUEHL
431a			 
431a			;		push hl 
431a 11 bb e2				ld de, scratch 
431d			.spllop: 
431d c1					pop bc 
431e c5					push bc 
431f			;		pop hl 
431f					if DEBUG_FORTH_WORDS 
431f						DMARK "SPl" 
431f f5				push af  
4320 3a 34 43			ld a, (.dmark)  
4323 32 65 ee			ld (debug_mark),a  
4326 3a 35 43			ld a, (.dmark+1)  
4329 32 66 ee			ld (debug_mark+1),a  
432c 3a 36 43			ld a, (.dmark+2)  
432f 32 67 ee			ld (debug_mark+2),a  
4332 18 03			jr .pastdmark  
4334 ..			.dmark: db "SPl"  
4337 f1			.pastdmark: pop af  
4338			endm  
# End of macro DMARK
4338						CALLMONITOR 
4338 cd 6f ee			call debug_vector  
433b				endm  
# End of macro CALLMONITOR
433b					endif 
433b 7e					ld a, (hl) 
433c b8					cp b 
433d 28 08				jr z, .splnxt 
433f fe 00				cp 0 
4341 28 34				jr z, .splend 
4343 ed a0				ldi 
4345 18 d6				jr .spllop 
4347			 
4347					; hit dlim 
4347			 
4347			.splnxt: 
4347					if DEBUG_FORTH_WORDS 
4347						DMARK "SPx" 
4347 f5				push af  
4348 3a 5c 43			ld a, (.dmark)  
434b 32 65 ee			ld (debug_mark),a  
434e 3a 5d 43			ld a, (.dmark+1)  
4351 32 66 ee			ld (debug_mark+1),a  
4354 3a 5e 43			ld a, (.dmark+2)  
4357 32 67 ee			ld (debug_mark+2),a  
435a 18 03			jr .pastdmark  
435c ..			.dmark: db "SPx"  
435f f1			.pastdmark: pop af  
4360			endm  
# End of macro DMARK
4360						CALLMONITOR 
4360 cd 6f ee			call debug_vector  
4363				endm  
# End of macro CALLMONITOR
4363					endif 
4363 3e 00				ld a, 0 
4365 12					ld (de), a 
4366					;ex de, hl 
4366 e5					push hl 
4367 21 bb e2				ld hl, scratch 
436a cd fe 1b				call forth_push_str 
436d e1					pop hl 
436e					;ex de, hl 
436e 23					inc hl 
436f c1					pop bc 
4370 0c					inc c 
4371 c5					push bc 
4372 11 bb e2				ld de, scratch 
4375 18 a6				jr .spllop 
4377			 
4377			.splend:		 
4377					if DEBUG_FORTH_WORDS 
4377						DMARK "SPe" 
4377 f5				push af  
4378 3a 8c 43			ld a, (.dmark)  
437b 32 65 ee			ld (debug_mark),a  
437e 3a 8d 43			ld a, (.dmark+1)  
4381 32 66 ee			ld (debug_mark+1),a  
4384 3a 8e 43			ld a, (.dmark+2)  
4387 32 67 ee			ld (debug_mark+2),a  
438a 18 03			jr .pastdmark  
438c ..			.dmark: db "SPe"  
438f f1			.pastdmark: pop af  
4390			endm  
# End of macro DMARK
4390						CALLMONITOR 
4390 cd 6f ee			call debug_vector  
4393				endm  
# End of macro CALLMONITOR
4393					endif 
4393 12					ld (de), a 
4394 eb					ex de, hl 
4395			;		push hl 
4395 21 bb e2				ld hl, scratch 
4398 cd fe 1b				call forth_push_str 
439b					 
439b					if DEBUG_FORTH_WORDS 
439b						DMARK "SPc" 
439b f5				push af  
439c 3a b0 43			ld a, (.dmark)  
439f 32 65 ee			ld (debug_mark),a  
43a2 3a b1 43			ld a, (.dmark+1)  
43a5 32 66 ee			ld (debug_mark+1),a  
43a8 3a b2 43			ld a, (.dmark+2)  
43ab 32 67 ee			ld (debug_mark+2),a  
43ae 18 03			jr .pastdmark  
43b0 ..			.dmark: db "SPc"  
43b3 f1			.pastdmark: pop af  
43b4			endm  
# End of macro DMARK
43b4						CALLMONITOR 
43b4 cd 6f ee			call debug_vector  
43b7				endm  
# End of macro CALLMONITOR
43b7					endif 
43b7			 
43b7 e1					pop hl    ; get counter from bc which has been push 
43b8 26 00				ld h, 0 
43ba			;		ld l, c 
43ba cd 90 1b				call forth_push_numhl 
43bd			 
43bd			 
43bd				NEXTW 
43bd c3 81 1f			jp macro_next 
43c0				endm 
# End of macro NEXTW
43c0			.PTR:   
43c0			 
43c0				CWHEAD .STYPE 52 "PTR" 3 WORD_FLAG_CODE 
43c0 48				db WORD_SYS_CORE+52             
43c1 ed 43			dw .STYPE            
43c3 04				db 3 + 1 
43c4 .. 00			db "PTR",0              
43c8				endm 
# End of macro CWHEAD
43c8			; | PTR ( -- addr ) Low level push pointer to the value on TOS | DONE 
43c8			; | | If a string will give the address of the string without dropping it. Handy for direct string access 
43c8			; | | If a number can then use 2@ and 2! for direct value update without using stack words  
43c8			 
43c8					if DEBUG_FORTH_WORDS_KEY 
43c8						DMARK "PTR" 
43c8 f5				push af  
43c9 3a dd 43			ld a, (.dmark)  
43cc 32 65 ee			ld (debug_mark),a  
43cf 3a de 43			ld a, (.dmark+1)  
43d2 32 66 ee			ld (debug_mark+1),a  
43d5 3a df 43			ld a, (.dmark+2)  
43d8 32 67 ee			ld (debug_mark+2),a  
43db 18 03			jr .pastdmark  
43dd ..			.dmark: db "PTR"  
43e0 f1			.pastdmark: pop af  
43e1			endm  
# End of macro DMARK
43e1						CALLMONITOR 
43e1 cd 6f ee			call debug_vector  
43e4				endm  
# End of macro CALLMONITOR
43e4					endif 
43e4					FORTH_DSP_VALUEHL 
43e4 cd 95 1d			call macro_dsp_valuehl 
43e7				endm 
# End of macro FORTH_DSP_VALUEHL
43e7 cd 90 1b				call forth_push_numhl 
43ea			 
43ea			 
43ea					NEXTW 
43ea c3 81 1f			jp macro_next 
43ed				endm 
# End of macro NEXTW
43ed			.STYPE: 
43ed				CWHEAD .UPPER 52 "STYPE" 5 WORD_FLAG_CODE 
43ed 48				db WORD_SYS_CORE+52             
43ee 3c 44			dw .UPPER            
43f0 06				db 5 + 1 
43f1 .. 00			db "STYPE",0              
43f7				endm 
# End of macro CWHEAD
43f7			; | STYPE ( u -- u type ) Push type of value on TOS - 's' string, 'i' integer...   | DONE 
43f7					if DEBUG_FORTH_WORDS_KEY 
43f7						DMARK "STY" 
43f7 f5				push af  
43f8 3a 0c 44			ld a, (.dmark)  
43fb 32 65 ee			ld (debug_mark),a  
43fe 3a 0d 44			ld a, (.dmark+1)  
4401 32 66 ee			ld (debug_mark+1),a  
4404 3a 0e 44			ld a, (.dmark+2)  
4407 32 67 ee			ld (debug_mark+2),a  
440a 18 03			jr .pastdmark  
440c ..			.dmark: db "STY"  
440f f1			.pastdmark: pop af  
4410			endm  
# End of macro DMARK
4410						CALLMONITOR 
4410 cd 6f ee			call debug_vector  
4413				endm  
# End of macro CALLMONITOR
4413					endif 
4413					FORTH_DSP 
4413 cd 5b 1d			call macro_forth_dsp 
4416				endm 
# End of macro FORTH_DSP
4416					;v5 FORTH_DSP_VALUE 
4416			 
4416 7e					ld a, (hl) 
4417			 
4417 f5					push af 
4418			 
4418			; Dont destroy TOS		FORTH_DSP_POP 
4418			 
4418 f1					pop af 
4419			 
4419 fe 01				cp DS_TYPE_STR 
441b 28 09				jr z, .typestr 
441d			 
441d fe 02				cp DS_TYPE_INUM 
441f 28 0a				jr z, .typeinum 
4421			 
4421 21 3a 44				ld hl, .tna 
4424 18 0a				jr .tpush 
4426			 
4426 21 36 44		.typestr:	ld hl, .tstr 
4429 18 05				jr .tpush 
442b 21 38 44		.typeinum:	ld hl, .tinum 
442e 18 00				jr .tpush 
4430			 
4430			.tpush: 
4430			 
4430 cd fe 1b				call forth_push_str 
4433			 
4433					NEXTW 
4433 c3 81 1f			jp macro_next 
4436				endm 
# End of macro NEXTW
4436 .. 00		.tstr:	db "s",0 
4438 .. 00		.tinum:  db "i",0 
443a .. 00		.tna:   db "?", 0 
443c			 
443c			 
443c			.UPPER: 
443c				CWHEAD .LOWER 52 "UPPER" 5 WORD_FLAG_CODE 
443c 48				db WORD_SYS_CORE+52             
443d 77 44			dw .LOWER            
443f 06				db 5 + 1 
4440 .. 00			db "UPPER",0              
4446				endm 
# End of macro CWHEAD
4446			; | UPPER ( s -- s ) Upper case string s  | DONE 
4446					if DEBUG_FORTH_WORDS_KEY 
4446						DMARK "UPR" 
4446 f5				push af  
4447 3a 5b 44			ld a, (.dmark)  
444a 32 65 ee			ld (debug_mark),a  
444d 3a 5c 44			ld a, (.dmark+1)  
4450 32 66 ee			ld (debug_mark+1),a  
4453 3a 5d 44			ld a, (.dmark+2)  
4456 32 67 ee			ld (debug_mark+2),a  
4459 18 03			jr .pastdmark  
445b ..			.dmark: db "UPR"  
445e f1			.pastdmark: pop af  
445f			endm  
# End of macro DMARK
445f						CALLMONITOR 
445f cd 6f ee			call debug_vector  
4462				endm  
# End of macro CALLMONITOR
4462					endif 
4462			 
4462					FORTH_DSP 
4462 cd 5b 1d			call macro_forth_dsp 
4465				endm 
# End of macro FORTH_DSP
4465					 
4465			; TODO check is string type 
4465			 
4465					FORTH_DSP_VALUEHL 
4465 cd 95 1d			call macro_dsp_valuehl 
4468				endm 
# End of macro FORTH_DSP_VALUEHL
4468			; get pointer to string in hl 
4468			 
4468 7e			.toup:		ld a, (hl) 
4469 fe 00				cp 0 
446b 28 07				jr z, .toupdone 
446d			 
446d cd 6a 10				call to_upper 
4470			 
4470 77					ld (hl), a 
4471 23					inc hl 
4472 18 f4				jr .toup 
4474			 
4474					 
4474			 
4474			 
4474			; for each char convert to upper 
4474					 
4474			.toupdone: 
4474			 
4474			 
4474					NEXTW 
4474 c3 81 1f			jp macro_next 
4477				endm 
# End of macro NEXTW
4477			.LOWER: 
4477				CWHEAD .TCASE 52 "LOWER" 5 WORD_FLAG_CODE 
4477 48				db WORD_SYS_CORE+52             
4478 b2 44			dw .TCASE            
447a 06				db 5 + 1 
447b .. 00			db "LOWER",0              
4481				endm 
# End of macro CWHEAD
4481			; | LOWER ( s -- s ) Lower case string s  | DONE 
4481					if DEBUG_FORTH_WORDS_KEY 
4481						DMARK "LWR" 
4481 f5				push af  
4482 3a 96 44			ld a, (.dmark)  
4485 32 65 ee			ld (debug_mark),a  
4488 3a 97 44			ld a, (.dmark+1)  
448b 32 66 ee			ld (debug_mark+1),a  
448e 3a 98 44			ld a, (.dmark+2)  
4491 32 67 ee			ld (debug_mark+2),a  
4494 18 03			jr .pastdmark  
4496 ..			.dmark: db "LWR"  
4499 f1			.pastdmark: pop af  
449a			endm  
# End of macro DMARK
449a						CALLMONITOR 
449a cd 6f ee			call debug_vector  
449d				endm  
# End of macro CALLMONITOR
449d					endif 
449d			 
449d					FORTH_DSP 
449d cd 5b 1d			call macro_forth_dsp 
44a0				endm 
# End of macro FORTH_DSP
44a0					 
44a0			; TODO check is string type 
44a0			 
44a0					FORTH_DSP_VALUEHL 
44a0 cd 95 1d			call macro_dsp_valuehl 
44a3				endm 
# End of macro FORTH_DSP_VALUEHL
44a3			; get pointer to string in hl 
44a3			 
44a3 7e			.tolow:		ld a, (hl) 
44a4 fe 00				cp 0 
44a6 28 07				jr z, .tolowdone 
44a8			 
44a8 cd 73 10				call to_lower 
44ab			 
44ab 77					ld (hl), a 
44ac 23					inc hl 
44ad 18 f4				jr .tolow 
44af			 
44af					 
44af			 
44af			 
44af			; for each char convert to low 
44af					 
44af			.tolowdone: 
44af					NEXTW 
44af c3 81 1f			jp macro_next 
44b2				endm 
# End of macro NEXTW
44b2			.TCASE: 
44b2				CWHEAD .SUBSTR 52 "TCASE" 5 WORD_FLAG_CODE 
44b2 48				db WORD_SYS_CORE+52             
44b3 e8 45			dw .SUBSTR            
44b5 06				db 5 + 1 
44b6 .. 00			db "TCASE",0              
44bc				endm 
# End of macro CWHEAD
44bc			; | TCASE ( s -- s ) Title case string s  | DONE 
44bc					if DEBUG_FORTH_WORDS_KEY 
44bc						DMARK "TCS" 
44bc f5				push af  
44bd 3a d1 44			ld a, (.dmark)  
44c0 32 65 ee			ld (debug_mark),a  
44c3 3a d2 44			ld a, (.dmark+1)  
44c6 32 66 ee			ld (debug_mark+1),a  
44c9 3a d3 44			ld a, (.dmark+2)  
44cc 32 67 ee			ld (debug_mark+2),a  
44cf 18 03			jr .pastdmark  
44d1 ..			.dmark: db "TCS"  
44d4 f1			.pastdmark: pop af  
44d5			endm  
# End of macro DMARK
44d5						CALLMONITOR 
44d5 cd 6f ee			call debug_vector  
44d8				endm  
# End of macro CALLMONITOR
44d8					endif 
44d8			 
44d8					FORTH_DSP 
44d8 cd 5b 1d			call macro_forth_dsp 
44db				endm 
# End of macro FORTH_DSP
44db					 
44db			; TODO check is string type 
44db			 
44db					FORTH_DSP_VALUEHL 
44db cd 95 1d			call macro_dsp_valuehl 
44de				endm 
# End of macro FORTH_DSP_VALUEHL
44de			; get pointer to string in hl 
44de			 
44de					if DEBUG_FORTH_WORDS 
44de						DMARK "TC1" 
44de f5				push af  
44df 3a f3 44			ld a, (.dmark)  
44e2 32 65 ee			ld (debug_mark),a  
44e5 3a f4 44			ld a, (.dmark+1)  
44e8 32 66 ee			ld (debug_mark+1),a  
44eb 3a f5 44			ld a, (.dmark+2)  
44ee 32 67 ee			ld (debug_mark+2),a  
44f1 18 03			jr .pastdmark  
44f3 ..			.dmark: db "TC1"  
44f6 f1			.pastdmark: pop af  
44f7			endm  
# End of macro DMARK
44f7						CALLMONITOR 
44f7 cd 6f ee			call debug_vector  
44fa				endm  
# End of macro CALLMONITOR
44fa					endif 
44fa			 
44fa					; first time in turn to upper case first char 
44fa			 
44fa 7e					ld a, (hl) 
44fb c3 85 45				jp .totsiptou 
44fe			 
44fe			 
44fe 7e			.tot:		ld a, (hl) 
44ff fe 00				cp 0 
4501 ca c9 45				jp z, .totdone 
4504			 
4504					if DEBUG_FORTH_WORDS 
4504						DMARK "TC2" 
4504 f5				push af  
4505 3a 19 45			ld a, (.dmark)  
4508 32 65 ee			ld (debug_mark),a  
450b 3a 1a 45			ld a, (.dmark+1)  
450e 32 66 ee			ld (debug_mark+1),a  
4511 3a 1b 45			ld a, (.dmark+2)  
4514 32 67 ee			ld (debug_mark+2),a  
4517 18 03			jr .pastdmark  
4519 ..			.dmark: db "TC2"  
451c f1			.pastdmark: pop af  
451d			endm  
# End of macro DMARK
451d						CALLMONITOR 
451d cd 6f ee			call debug_vector  
4520				endm  
# End of macro CALLMONITOR
4520					endif 
4520					; check to see if current char is a space 
4520			 
4520 fe 20				cp ' ' 
4522 28 21				jr z, .totsp 
4524 cd 73 10				call to_lower 
4527					if DEBUG_FORTH_WORDS 
4527						DMARK "TC3" 
4527 f5				push af  
4528 3a 3c 45			ld a, (.dmark)  
452b 32 65 ee			ld (debug_mark),a  
452e 3a 3d 45			ld a, (.dmark+1)  
4531 32 66 ee			ld (debug_mark+1),a  
4534 3a 3e 45			ld a, (.dmark+2)  
4537 32 67 ee			ld (debug_mark+2),a  
453a 18 03			jr .pastdmark  
453c ..			.dmark: db "TC3"  
453f f1			.pastdmark: pop af  
4540			endm  
# End of macro DMARK
4540						CALLMONITOR 
4540 cd 6f ee			call debug_vector  
4543				endm  
# End of macro CALLMONITOR
4543					endif 
4543 18 63				jr .totnxt 
4545			 
4545			.totsp:         ; on a space, find next char which should be upper 
4545			 
4545					if DEBUG_FORTH_WORDS 
4545						DMARK "TC4" 
4545 f5				push af  
4546 3a 5a 45			ld a, (.dmark)  
4549 32 65 ee			ld (debug_mark),a  
454c 3a 5b 45			ld a, (.dmark+1)  
454f 32 66 ee			ld (debug_mark+1),a  
4552 3a 5c 45			ld a, (.dmark+2)  
4555 32 67 ee			ld (debug_mark+2),a  
4558 18 03			jr .pastdmark  
455a ..			.dmark: db "TC4"  
455d f1			.pastdmark: pop af  
455e			endm  
# End of macro DMARK
455e						CALLMONITOR 
455e cd 6f ee			call debug_vector  
4561				endm  
# End of macro CALLMONITOR
4561					endif 
4561					;; 
4561			 
4561 fe 20				cp ' ' 
4563 20 20				jr nz, .totsiptou 
4565 23					inc hl 
4566 7e					ld a, (hl) 
4567					if DEBUG_FORTH_WORDS 
4567						DMARK "TC5" 
4567 f5				push af  
4568 3a 7c 45			ld a, (.dmark)  
456b 32 65 ee			ld (debug_mark),a  
456e 3a 7d 45			ld a, (.dmark+1)  
4571 32 66 ee			ld (debug_mark+1),a  
4574 3a 7e 45			ld a, (.dmark+2)  
4577 32 67 ee			ld (debug_mark+2),a  
457a 18 03			jr .pastdmark  
457c ..			.dmark: db "TC5"  
457f f1			.pastdmark: pop af  
4580			endm  
# End of macro DMARK
4580						CALLMONITOR 
4580 cd 6f ee			call debug_vector  
4583				endm  
# End of macro CALLMONITOR
4583					endif 
4583 18 c0				jr .totsp 
4585 fe 00		.totsiptou:    cp 0 
4587 28 40				jr z, .totdone 
4589					; not space and not zero term so upper case it 
4589 cd 6a 10				call to_upper 
458c			 
458c					if DEBUG_FORTH_WORDS 
458c						DMARK "TC6" 
458c f5				push af  
458d 3a a1 45			ld a, (.dmark)  
4590 32 65 ee			ld (debug_mark),a  
4593 3a a2 45			ld a, (.dmark+1)  
4596 32 66 ee			ld (debug_mark+1),a  
4599 3a a3 45			ld a, (.dmark+2)  
459c 32 67 ee			ld (debug_mark+2),a  
459f 18 03			jr .pastdmark  
45a1 ..			.dmark: db "TC6"  
45a4 f1			.pastdmark: pop af  
45a5			endm  
# End of macro DMARK
45a5						CALLMONITOR 
45a5 cd 6f ee			call debug_vector  
45a8				endm  
# End of macro CALLMONITOR
45a8					endif 
45a8			 
45a8			 
45a8			.totnxt: 
45a8			 
45a8 77					ld (hl), a 
45a9 23					inc hl 
45aa					if DEBUG_FORTH_WORDS 
45aa						DMARK "TC7" 
45aa f5				push af  
45ab 3a bf 45			ld a, (.dmark)  
45ae 32 65 ee			ld (debug_mark),a  
45b1 3a c0 45			ld a, (.dmark+1)  
45b4 32 66 ee			ld (debug_mark+1),a  
45b7 3a c1 45			ld a, (.dmark+2)  
45ba 32 67 ee			ld (debug_mark+2),a  
45bd 18 03			jr .pastdmark  
45bf ..			.dmark: db "TC7"  
45c2 f1			.pastdmark: pop af  
45c3			endm  
# End of macro DMARK
45c3						CALLMONITOR 
45c3 cd 6f ee			call debug_vector  
45c6				endm  
# End of macro CALLMONITOR
45c6					endif 
45c6 c3 fe 44				jp .tot 
45c9			 
45c9					 
45c9			 
45c9			 
45c9			; for each char convert to low 
45c9					 
45c9			.totdone: 
45c9					if DEBUG_FORTH_WORDS 
45c9						DMARK "TCd" 
45c9 f5				push af  
45ca 3a de 45			ld a, (.dmark)  
45cd 32 65 ee			ld (debug_mark),a  
45d0 3a df 45			ld a, (.dmark+1)  
45d3 32 66 ee			ld (debug_mark+1),a  
45d6 3a e0 45			ld a, (.dmark+2)  
45d9 32 67 ee			ld (debug_mark+2),a  
45dc 18 03			jr .pastdmark  
45de ..			.dmark: db "TCd"  
45e1 f1			.pastdmark: pop af  
45e2			endm  
# End of macro DMARK
45e2						CALLMONITOR 
45e2 cd 6f ee			call debug_vector  
45e5				endm  
# End of macro CALLMONITOR
45e5					endif 
45e5					NEXTW 
45e5 c3 81 1f			jp macro_next 
45e8				endm 
# End of macro NEXTW
45e8			 
45e8			.SUBSTR: 
45e8				CWHEAD .LEFT 52 "SUBSTR" 6 WORD_FLAG_CODE 
45e8 48				db WORD_SYS_CORE+52             
45e9 46 46			dw .LEFT            
45eb 07				db 6 + 1 
45ec .. 00			db "SUBSTR",0              
45f3				endm 
# End of macro CWHEAD
45f3			; | SUBSTR ( s u1 u2 -- s sb ) Push to TOS chars starting at position u1 and with length u2 from string s  | DONE 
45f3			 
45f3					if DEBUG_FORTH_WORDS_KEY 
45f3						DMARK "SST" 
45f3 f5				push af  
45f4 3a 08 46			ld a, (.dmark)  
45f7 32 65 ee			ld (debug_mark),a  
45fa 3a 09 46			ld a, (.dmark+1)  
45fd 32 66 ee			ld (debug_mark+1),a  
4600 3a 0a 46			ld a, (.dmark+2)  
4603 32 67 ee			ld (debug_mark+2),a  
4606 18 03			jr .pastdmark  
4608 ..			.dmark: db "SST"  
460b f1			.pastdmark: pop af  
460c			endm  
# End of macro DMARK
460c						CALLMONITOR 
460c cd 6f ee			call debug_vector  
460f				endm  
# End of macro CALLMONITOR
460f					endif 
460f			; TODO check string type 
460f					FORTH_DSP_VALUEHL 
460f cd 95 1d			call macro_dsp_valuehl 
4612				endm 
# End of macro FORTH_DSP_VALUEHL
4612			 
4612 e5					push hl      ; string length 
4613			 
4613					FORTH_DSP_POP 
4613 cd 4d 1e			call macro_forth_dsp_pop 
4616				endm 
# End of macro FORTH_DSP_POP
4616			 
4616					FORTH_DSP_VALUEHL 
4616 cd 95 1d			call macro_dsp_valuehl 
4619				endm 
# End of macro FORTH_DSP_VALUEHL
4619			 
4619 e5					push hl     ; start char 
461a			 
461a					FORTH_DSP_POP 
461a cd 4d 1e			call macro_forth_dsp_pop 
461d				endm 
# End of macro FORTH_DSP_POP
461d			 
461d			 
461d					FORTH_DSP_VALUE 
461d cd 7e 1d			call macro_forth_dsp_value 
4620				endm 
# End of macro FORTH_DSP_VALUE
4620			 
4620 d1					pop de    ; get start post offset 
4621			 
4621 19					add hl, de    ; starting offset 
4622			 
4622 c1					pop bc 
4623 c5					push bc      ; grab size of string 
4624			 
4624 e5					push hl    ; save string start  
4625			 
4625 26 00				ld h, 0 
4627 69					ld l, c 
4628 23					inc hl 
4629 23					inc hl 
462a			 
462a cd d0 11				call malloc 
462d				if DEBUG_FORTH_MALLOC_GUARD 
462d cc 15 50				call z,malloc_error 
4630				endif 
4630			 
4630 eb					ex de, hl      ; save malloc area for string copy 
4631 e1					pop hl    ; get back source 
4632 c1					pop bc    ; get length of string back 
4633			 
4633 d5					push de    ; save malloc area for after we push 
4634 ed b0				ldir     ; copy substr 
4636			 
4636			 
4636 eb					ex de, hl 
4637 3e 00				ld a, 0 
4639 77					ld (hl), a   ; term substr 
463a			 
463a					 
463a e1					pop hl    ; get malloc so we can push it 
463b e5					push hl   ; save so we can free it afterwards 
463c			 
463c cd fe 1b				call forth_push_str 
463f			 
463f e1					pop hl 
4640 cd 9a 12				call free 
4643			 
4643					 
4643					 
4643			 
4643			 
4643					NEXTW 
4643 c3 81 1f			jp macro_next 
4646				endm 
# End of macro NEXTW
4646			 
4646			.LEFT: 
4646				CWHEAD .RIGHT 52 "LEFT" 4 WORD_FLAG_CODE 
4646 48				db WORD_SYS_CORE+52             
4647 6e 46			dw .RIGHT            
4649 05				db 4 + 1 
464a .. 00			db "LEFT",0              
464f				endm 
# End of macro CWHEAD
464f			; | LEFT ( s u -- s sub ) Push to TOS string u long starting from left of s  | TODO 
464f					if DEBUG_FORTH_WORDS_KEY 
464f						DMARK "LEF" 
464f f5				push af  
4650 3a 64 46			ld a, (.dmark)  
4653 32 65 ee			ld (debug_mark),a  
4656 3a 65 46			ld a, (.dmark+1)  
4659 32 66 ee			ld (debug_mark+1),a  
465c 3a 66 46			ld a, (.dmark+2)  
465f 32 67 ee			ld (debug_mark+2),a  
4662 18 03			jr .pastdmark  
4664 ..			.dmark: db "LEF"  
4667 f1			.pastdmark: pop af  
4668			endm  
# End of macro DMARK
4668						CALLMONITOR 
4668 cd 6f ee			call debug_vector  
466b				endm  
# End of macro CALLMONITOR
466b					endif 
466b			 
466b					NEXTW 
466b c3 81 1f			jp macro_next 
466e				endm 
# End of macro NEXTW
466e			.RIGHT: 
466e				CWHEAD .STR2NUM 52 "RIGHT" 5 WORD_FLAG_CODE 
466e 48				db WORD_SYS_CORE+52             
466f 97 46			dw .STR2NUM            
4671 06				db 5 + 1 
4672 .. 00			db "RIGHT",0              
4678				endm 
# End of macro CWHEAD
4678			; | RIGHT ( s u -- s sub ) Push to TOS string u long starting from right of s  | TODO 
4678					if DEBUG_FORTH_WORDS_KEY 
4678						DMARK "RIG" 
4678 f5				push af  
4679 3a 8d 46			ld a, (.dmark)  
467c 32 65 ee			ld (debug_mark),a  
467f 3a 8e 46			ld a, (.dmark+1)  
4682 32 66 ee			ld (debug_mark+1),a  
4685 3a 8f 46			ld a, (.dmark+2)  
4688 32 67 ee			ld (debug_mark+2),a  
468b 18 03			jr .pastdmark  
468d ..			.dmark: db "RIG"  
4690 f1			.pastdmark: pop af  
4691			endm  
# End of macro DMARK
4691						CALLMONITOR 
4691 cd 6f ee			call debug_vector  
4694				endm  
# End of macro CALLMONITOR
4694					endif 
4694			 
4694					NEXTW 
4694 c3 81 1f			jp macro_next 
4697				endm 
# End of macro NEXTW
4697			 
4697			 
4697			.STR2NUM: 
4697				CWHEAD .NUM2STR 52 "STR2NUM" 7 WORD_FLAG_CODE 
4697 48				db WORD_SYS_CORE+52             
4698 23 47			dw .NUM2STR            
469a 08				db 7 + 1 
469b .. 00			db "STR2NUM",0              
46a3				endm 
# End of macro CWHEAD
46a3			; | STR2NUM ( s -- n ) Convert a string on TOS to number | DONE 
46a3			 
46a3			 
46a3			; TODO STR type check to do 
46a3					if DEBUG_FORTH_WORDS_KEY 
46a3						DMARK "S2N" 
46a3 f5				push af  
46a4 3a b8 46			ld a, (.dmark)  
46a7 32 65 ee			ld (debug_mark),a  
46aa 3a b9 46			ld a, (.dmark+1)  
46ad 32 66 ee			ld (debug_mark+1),a  
46b0 3a ba 46			ld a, (.dmark+2)  
46b3 32 67 ee			ld (debug_mark+2),a  
46b6 18 03			jr .pastdmark  
46b8 ..			.dmark: db "S2N"  
46bb f1			.pastdmark: pop af  
46bc			endm  
# End of macro DMARK
46bc						CALLMONITOR 
46bc cd 6f ee			call debug_vector  
46bf				endm  
# End of macro CALLMONITOR
46bf					endif 
46bf			 
46bf					;FORTH_DSP 
46bf					FORTH_DSP_VALUE 
46bf cd 7e 1d			call macro_forth_dsp_value 
46c2				endm 
# End of macro FORTH_DSP_VALUE
46c2					;inc hl 
46c2			 
46c2 eb					ex de, hl 
46c3					if DEBUG_FORTH_WORDS 
46c3						DMARK "S2a" 
46c3 f5				push af  
46c4 3a d8 46			ld a, (.dmark)  
46c7 32 65 ee			ld (debug_mark),a  
46ca 3a d9 46			ld a, (.dmark+1)  
46cd 32 66 ee			ld (debug_mark+1),a  
46d0 3a da 46			ld a, (.dmark+2)  
46d3 32 67 ee			ld (debug_mark+2),a  
46d6 18 03			jr .pastdmark  
46d8 ..			.dmark: db "S2a"  
46db f1			.pastdmark: pop af  
46dc			endm  
# End of macro DMARK
46dc						CALLMONITOR 
46dc cd 6f ee			call debug_vector  
46df				endm  
# End of macro CALLMONITOR
46df					endif 
46df cd f2 10				call string_to_uint16 
46e2			 
46e2					if DEBUG_FORTH_WORDS 
46e2						DMARK "S2b" 
46e2 f5				push af  
46e3 3a f7 46			ld a, (.dmark)  
46e6 32 65 ee			ld (debug_mark),a  
46e9 3a f8 46			ld a, (.dmark+1)  
46ec 32 66 ee			ld (debug_mark+1),a  
46ef 3a f9 46			ld a, (.dmark+2)  
46f2 32 67 ee			ld (debug_mark+2),a  
46f5 18 03			jr .pastdmark  
46f7 ..			.dmark: db "S2b"  
46fa f1			.pastdmark: pop af  
46fb			endm  
# End of macro DMARK
46fb						CALLMONITOR 
46fb cd 6f ee			call debug_vector  
46fe				endm  
# End of macro CALLMONITOR
46fe					endif 
46fe			;		push hl 
46fe					FORTH_DSP_POP 
46fe cd 4d 1e			call macro_forth_dsp_pop 
4701				endm 
# End of macro FORTH_DSP_POP
4701			;		pop hl 
4701					 
4701					if DEBUG_FORTH_WORDS 
4701						DMARK "S2b" 
4701 f5				push af  
4702 3a 16 47			ld a, (.dmark)  
4705 32 65 ee			ld (debug_mark),a  
4708 3a 17 47			ld a, (.dmark+1)  
470b 32 66 ee			ld (debug_mark+1),a  
470e 3a 18 47			ld a, (.dmark+2)  
4711 32 67 ee			ld (debug_mark+2),a  
4714 18 03			jr .pastdmark  
4716 ..			.dmark: db "S2b"  
4719 f1			.pastdmark: pop af  
471a			endm  
# End of macro DMARK
471a						CALLMONITOR 
471a cd 6f ee			call debug_vector  
471d				endm  
# End of macro CALLMONITOR
471d					endif 
471d cd 90 1b				call forth_push_numhl	 
4720			 
4720				 
4720				       NEXTW 
4720 c3 81 1f			jp macro_next 
4723				endm 
# End of macro NEXTW
4723			.NUM2STR: 
4723				CWHEAD .CONCAT 52 "NUM2STR" 7 WORD_FLAG_CODE 
4723 48				db WORD_SYS_CORE+52             
4724 b5 47			dw .CONCAT            
4726 08				db 7 + 1 
4727 .. 00			db "NUM2STR",0              
472f				endm 
# End of macro CWHEAD
472f			; | NUM2STR ( n -- s ) Convert a number on TOS to zero padded string | DONE 
472f			 
472f			;		; malloc a string to target 
472f			;		ld hl, 10     ; TODO max string size should be fine 
472f			;		call malloc 
472f			;		push hl    ; save malloc location 
472f			; 
472f			; 
472f			;; TODO check int type 
472f					if DEBUG_FORTH_WORDS_KEY 
472f						DMARK "N2S" 
472f f5				push af  
4730 3a 44 47			ld a, (.dmark)  
4733 32 65 ee			ld (debug_mark),a  
4736 3a 45 47			ld a, (.dmark+1)  
4739 32 66 ee			ld (debug_mark+1),a  
473c 3a 46 47			ld a, (.dmark+2)  
473f 32 67 ee			ld (debug_mark+2),a  
4742 18 03			jr .pastdmark  
4744 ..			.dmark: db "N2S"  
4747 f1			.pastdmark: pop af  
4748			endm  
# End of macro DMARK
4748						CALLMONITOR 
4748 cd 6f ee			call debug_vector  
474b				endm  
# End of macro CALLMONITOR
474b					endif 
474b			 
474b					FORTH_DSP_VALUEHL 
474b cd 95 1d			call macro_dsp_valuehl 
474e				endm 
# End of macro FORTH_DSP_VALUEHL
474e			 
474e					if DEBUG_FORTH_WORDS 
474e						DMARK "NS1" 
474e f5				push af  
474f 3a 63 47			ld a, (.dmark)  
4752 32 65 ee			ld (debug_mark),a  
4755 3a 64 47			ld a, (.dmark+1)  
4758 32 66 ee			ld (debug_mark+1),a  
475b 3a 65 47			ld a, (.dmark+2)  
475e 32 67 ee			ld (debug_mark+2),a  
4761 18 03			jr .pastdmark  
4763 ..			.dmark: db "NS1"  
4766 f1			.pastdmark: pop af  
4767			endm  
# End of macro DMARK
4767						CALLMONITOR 
4767 cd 6f ee			call debug_vector  
476a				endm  
# End of macro CALLMONITOR
476a					endif 
476a					FORTH_DSP_POP 
476a cd 4d 1e			call macro_forth_dsp_pop 
476d				endm 
# End of macro FORTH_DSP_POP
476d			 
476d eb					ex de, hl 
476e 21 bb e2				ld hl, scratch 
4771					if DEBUG_FORTH_WORDS 
4771						DMARK "NS2" 
4771 f5				push af  
4772 3a 86 47			ld a, (.dmark)  
4775 32 65 ee			ld (debug_mark),a  
4778 3a 87 47			ld a, (.dmark+1)  
477b 32 66 ee			ld (debug_mark+1),a  
477e 3a 88 47			ld a, (.dmark+2)  
4781 32 67 ee			ld (debug_mark+2),a  
4784 18 03			jr .pastdmark  
4786 ..			.dmark: db "NS2"  
4789 f1			.pastdmark: pop af  
478a			endm  
# End of macro DMARK
478a						CALLMONITOR 
478a cd 6f ee			call debug_vector  
478d				endm  
# End of macro CALLMONITOR
478d					endif 
478d cd 0a 11				call uitoa_16 
4790 21 bb e2				ld hl, scratch 
4793					if DEBUG_FORTH_WORDS 
4793						DMARK "NS3" 
4793 f5				push af  
4794 3a a8 47			ld a, (.dmark)  
4797 32 65 ee			ld (debug_mark),a  
479a 3a a9 47			ld a, (.dmark+1)  
479d 32 66 ee			ld (debug_mark+1),a  
47a0 3a aa 47			ld a, (.dmark+2)  
47a3 32 67 ee			ld (debug_mark+2),a  
47a6 18 03			jr .pastdmark  
47a8 ..			.dmark: db "NS3"  
47ab f1			.pastdmark: pop af  
47ac			endm  
# End of macro DMARK
47ac						CALLMONITOR 
47ac cd 6f ee			call debug_vector  
47af				endm  
# End of macro CALLMONITOR
47af					endif 
47af cd fe 1b				call forth_push_str 
47b2			;		ld a, l 
47b2			;		call DispAToASCII   
47b2			;;TODO need to chage above call to dump into string 
47b2			; 
47b2			; 
47b2			 
47b2				       NEXTW 
47b2 c3 81 1f			jp macro_next 
47b5				endm 
# End of macro NEXTW
47b5			 
47b5			.CONCAT: 
47b5				CWHEAD .FIND 52 "CONCAT" 6 WORD_FLAG_CODE 
47b5 48				db WORD_SYS_CORE+52             
47b6 68 48			dw .FIND            
47b8 07				db 6 + 1 
47b9 .. 00			db "CONCAT",0              
47c0				endm 
# End of macro CWHEAD
47c0			; | CONCAT ( s1 s2 -- s3 ) A s1 + s2 is pushed onto the stack | DONE 
47c0			 
47c0			; TODO check string type 
47c0			; TODO create macro to get pointer for next item on stack. Handy for lots of things 
47c0			 
47c0					if DEBUG_FORTH_WORDS_KEY 
47c0						DMARK "CON" 
47c0 f5				push af  
47c1 3a d5 47			ld a, (.dmark)  
47c4 32 65 ee			ld (debug_mark),a  
47c7 3a d6 47			ld a, (.dmark+1)  
47ca 32 66 ee			ld (debug_mark+1),a  
47cd 3a d7 47			ld a, (.dmark+2)  
47d0 32 67 ee			ld (debug_mark+2),a  
47d3 18 03			jr .pastdmark  
47d5 ..			.dmark: db "CON"  
47d8 f1			.pastdmark: pop af  
47d9			endm  
# End of macro DMARK
47d9						CALLMONITOR 
47d9 cd 6f ee			call debug_vector  
47dc				endm  
# End of macro CALLMONITOR
47dc					endif 
47dc			 
47dc			 
47dc					FORTH_DSP_VALUE 
47dc cd 7e 1d			call macro_forth_dsp_value 
47df				endm 
# End of macro FORTH_DSP_VALUE
47df e5					push hl   ; s2 
47e0			 
47e0					FORTH_DSP_POP 
47e0 cd 4d 1e			call macro_forth_dsp_pop 
47e3				endm 
# End of macro FORTH_DSP_POP
47e3			 
47e3					FORTH_DSP_VALUE 
47e3 cd 7e 1d			call macro_forth_dsp_value 
47e6				endm 
# End of macro FORTH_DSP_VALUE
47e6			 
47e6 e5					push hl   ; s1 
47e7			 
47e7					FORTH_DSP_POP 
47e7 cd 4d 1e			call macro_forth_dsp_pop 
47ea				endm 
# End of macro FORTH_DSP_POP
47ea					 
47ea			 
47ea					; copy s1 
47ea			 
47ea				 
47ea					; save ptr 
47ea e1					pop hl  
47eb e5					push hl 
47ec 3e 00				ld a, 0 
47ee cd 66 11				call strlent 
47f1					;inc hl    ; zer0 
47f1 06 00				ld b, 0 
47f3 4d					ld c, l 
47f4 e1					pop hl		 
47f5 11 bb e2				ld de, scratch	 
47f8					if DEBUG_FORTH_WORDS 
47f8						DMARK "CO1" 
47f8 f5				push af  
47f9 3a 0d 48			ld a, (.dmark)  
47fc 32 65 ee			ld (debug_mark),a  
47ff 3a 0e 48			ld a, (.dmark+1)  
4802 32 66 ee			ld (debug_mark+1),a  
4805 3a 0f 48			ld a, (.dmark+2)  
4808 32 67 ee			ld (debug_mark+2),a  
480b 18 03			jr .pastdmark  
480d ..			.dmark: db "CO1"  
4810 f1			.pastdmark: pop af  
4811			endm  
# End of macro DMARK
4811						CALLMONITOR 
4811 cd 6f ee			call debug_vector  
4814				endm  
# End of macro CALLMONITOR
4814					endif 
4814 ed b0				ldir 
4816			 
4816 e1					pop hl 
4817 e5					push hl 
4818 d5					push de 
4819			 
4819			 
4819 3e 00				ld a, 0 
481b cd 66 11				call strlent 
481e 23					inc hl    ; zer0 
481f 23					inc hl 
4820 06 00				ld b, 0 
4822 4d					ld c, l 
4823 d1					pop de 
4824 e1					pop hl		 
4825					if DEBUG_FORTH_WORDS 
4825						DMARK "CO2" 
4825 f5				push af  
4826 3a 3a 48			ld a, (.dmark)  
4829 32 65 ee			ld (debug_mark),a  
482c 3a 3b 48			ld a, (.dmark+1)  
482f 32 66 ee			ld (debug_mark+1),a  
4832 3a 3c 48			ld a, (.dmark+2)  
4835 32 67 ee			ld (debug_mark+2),a  
4838 18 03			jr .pastdmark  
483a ..			.dmark: db "CO2"  
483d f1			.pastdmark: pop af  
483e			endm  
# End of macro DMARK
483e						CALLMONITOR 
483e cd 6f ee			call debug_vector  
4841				endm  
# End of macro CALLMONITOR
4841					endif 
4841 ed b0				ldir 
4843			 
4843			 
4843			 
4843 21 bb e2				ld hl, scratch 
4846					if DEBUG_FORTH_WORDS 
4846						DMARK "CO5" 
4846 f5				push af  
4847 3a 5b 48			ld a, (.dmark)  
484a 32 65 ee			ld (debug_mark),a  
484d 3a 5c 48			ld a, (.dmark+1)  
4850 32 66 ee			ld (debug_mark+1),a  
4853 3a 5d 48			ld a, (.dmark+2)  
4856 32 67 ee			ld (debug_mark+2),a  
4859 18 03			jr .pastdmark  
485b ..			.dmark: db "CO5"  
485e f1			.pastdmark: pop af  
485f			endm  
# End of macro DMARK
485f						CALLMONITOR 
485f cd 6f ee			call debug_vector  
4862				endm  
# End of macro CALLMONITOR
4862					endif 
4862			 
4862 cd fe 1b				call forth_push_str 
4865			 
4865			 
4865			 
4865			 
4865				       NEXTW 
4865 c3 81 1f			jp macro_next 
4868				endm 
# End of macro NEXTW
4868			 
4868			 
4868			.FIND: 
4868				CWHEAD .LEN 55 "FIND" 4 WORD_FLAG_CODE 
4868 4b				db WORD_SYS_CORE+55             
4869 26 49			dw .LEN            
486b 05				db 4 + 1 
486c .. 00			db "FIND",0              
4871				endm 
# End of macro CWHEAD
4871			; | FIND ( s c -- s u ) Search the string s for the char c and push the position of the first occurance to TOS | DONE 
4871			 
4871					if DEBUG_FORTH_WORDS_KEY 
4871						DMARK "FND" 
4871 f5				push af  
4872 3a 86 48			ld a, (.dmark)  
4875 32 65 ee			ld (debug_mark),a  
4878 3a 87 48			ld a, (.dmark+1)  
487b 32 66 ee			ld (debug_mark+1),a  
487e 3a 88 48			ld a, (.dmark+2)  
4881 32 67 ee			ld (debug_mark+2),a  
4884 18 03			jr .pastdmark  
4886 ..			.dmark: db "FND"  
4889 f1			.pastdmark: pop af  
488a			endm  
# End of macro DMARK
488a						CALLMONITOR 
488a cd 6f ee			call debug_vector  
488d				endm  
# End of macro CALLMONITOR
488d					endif 
488d			 
488d			; TODO check string type 
488d					FORTH_DSP_VALUE 
488d cd 7e 1d			call macro_forth_dsp_value 
4890				endm 
# End of macro FORTH_DSP_VALUE
4890			 
4890 e5					push hl    
4891 7e					ld a,(hl)    ; char to find   
4892			; TODO change char to substr 
4892			 
4892 f5					push af 
4893					 
4893			 
4893			 
4893					if DEBUG_FORTH_WORDS 
4893						DMARK "FN1" 
4893 f5				push af  
4894 3a a8 48			ld a, (.dmark)  
4897 32 65 ee			ld (debug_mark),a  
489a 3a a9 48			ld a, (.dmark+1)  
489d 32 66 ee			ld (debug_mark+1),a  
48a0 3a aa 48			ld a, (.dmark+2)  
48a3 32 67 ee			ld (debug_mark+2),a  
48a6 18 03			jr .pastdmark  
48a8 ..			.dmark: db "FN1"  
48ab f1			.pastdmark: pop af  
48ac			endm  
# End of macro DMARK
48ac						CALLMONITOR 
48ac cd 6f ee			call debug_vector  
48af				endm  
# End of macro CALLMONITOR
48af					endif 
48af			 
48af					FORTH_DSP_POP 
48af cd 4d 1e			call macro_forth_dsp_pop 
48b2				endm 
# End of macro FORTH_DSP_POP
48b2			 
48b2					; string to search 
48b2			 
48b2					FORTH_DSP_VALUE 
48b2 cd 7e 1d			call macro_forth_dsp_value 
48b5				endm 
# End of macro FORTH_DSP_VALUE
48b5			 
48b5 d1					pop de  ; d is char to find  
48b6			 
48b6					if DEBUG_FORTH_WORDS 
48b6						DMARK "FN2" 
48b6 f5				push af  
48b7 3a cb 48			ld a, (.dmark)  
48ba 32 65 ee			ld (debug_mark),a  
48bd 3a cc 48			ld a, (.dmark+1)  
48c0 32 66 ee			ld (debug_mark+1),a  
48c3 3a cd 48			ld a, (.dmark+2)  
48c6 32 67 ee			ld (debug_mark+2),a  
48c9 18 03			jr .pastdmark  
48cb ..			.dmark: db "FN2"  
48ce f1			.pastdmark: pop af  
48cf			endm  
# End of macro DMARK
48cf						CALLMONITOR 
48cf cd 6f ee			call debug_vector  
48d2				endm  
# End of macro CALLMONITOR
48d2					endif 
48d2					 
48d2 01 00 00				ld bc, 0 
48d5 7e			.findchar:      ld a,(hl) 
48d6 fe 00				cp 0   		 
48d8 28 27				jr z, .finddone     
48da ba					cp d 
48db 28 20				jr z, .foundchar 
48dd 03					inc bc 
48de 23					inc hl 
48df					if DEBUG_FORTH_WORDS 
48df						DMARK "FN3" 
48df f5				push af  
48e0 3a f4 48			ld a, (.dmark)  
48e3 32 65 ee			ld (debug_mark),a  
48e6 3a f5 48			ld a, (.dmark+1)  
48e9 32 66 ee			ld (debug_mark+1),a  
48ec 3a f6 48			ld a, (.dmark+2)  
48ef 32 67 ee			ld (debug_mark+2),a  
48f2 18 03			jr .pastdmark  
48f4 ..			.dmark: db "FN3"  
48f7 f1			.pastdmark: pop af  
48f8			endm  
# End of macro DMARK
48f8						CALLMONITOR 
48f8 cd 6f ee			call debug_vector  
48fb				endm  
# End of macro CALLMONITOR
48fb					endif 
48fb 18 d8				jr .findchar 
48fd			 
48fd			 
48fd c5			.foundchar:	push bc 
48fe e1					pop hl 
48ff 18 03				jr .findexit 
4901			 
4901			 
4901							 
4901			 
4901			.finddone:     ; got to end of string with no find 
4901 21 00 00				ld hl, 0 
4904			.findexit: 
4904			 
4904					if DEBUG_FORTH_WORDS 
4904						DMARK "FNd" 
4904 f5				push af  
4905 3a 19 49			ld a, (.dmark)  
4908 32 65 ee			ld (debug_mark),a  
490b 3a 1a 49			ld a, (.dmark+1)  
490e 32 66 ee			ld (debug_mark+1),a  
4911 3a 1b 49			ld a, (.dmark+2)  
4914 32 67 ee			ld (debug_mark+2),a  
4917 18 03			jr .pastdmark  
4919 ..			.dmark: db "FNd"  
491c f1			.pastdmark: pop af  
491d			endm  
# End of macro DMARK
491d						CALLMONITOR 
491d cd 6f ee			call debug_vector  
4920				endm  
# End of macro CALLMONITOR
4920					endif 
4920 cd 90 1b			call forth_push_numhl 
4923			 
4923				       NEXTW 
4923 c3 81 1f			jp macro_next 
4926				endm 
# End of macro NEXTW
4926			 
4926			.LEN: 
4926				CWHEAD .ASC 56 "COUNT" 5 WORD_FLAG_CODE 
4926 4c				db WORD_SYS_CORE+56             
4927 90 49			dw .ASC            
4929 06				db 5 + 1 
492a .. 00			db "COUNT",0              
4930				endm 
# End of macro CWHEAD
4930			; | COUNT (  str -- str u1 ) Push the length of the string str on TOS as u1 | DONE 
4930			 
4930					if DEBUG_FORTH_WORDS_KEY 
4930						DMARK "CNT" 
4930 f5				push af  
4931 3a 45 49			ld a, (.dmark)  
4934 32 65 ee			ld (debug_mark),a  
4937 3a 46 49			ld a, (.dmark+1)  
493a 32 66 ee			ld (debug_mark+1),a  
493d 3a 47 49			ld a, (.dmark+2)  
4940 32 67 ee			ld (debug_mark+2),a  
4943 18 03			jr .pastdmark  
4945 ..			.dmark: db "CNT"  
4948 f1			.pastdmark: pop af  
4949			endm  
# End of macro DMARK
4949						CALLMONITOR 
4949 cd 6f ee			call debug_vector  
494c				endm  
# End of macro CALLMONITOR
494c					endif 
494c			; TODO check string type 
494c					FORTH_DSP_VALUE 
494c cd 7e 1d			call macro_forth_dsp_value 
494f				endm 
# End of macro FORTH_DSP_VALUE
494f			 
494f			 
494f					if DEBUG_FORTH_WORDS 
494f						DMARK "CN?" 
494f f5				push af  
4950 3a 64 49			ld a, (.dmark)  
4953 32 65 ee			ld (debug_mark),a  
4956 3a 65 49			ld a, (.dmark+1)  
4959 32 66 ee			ld (debug_mark+1),a  
495c 3a 66 49			ld a, (.dmark+2)  
495f 32 67 ee			ld (debug_mark+2),a  
4962 18 03			jr .pastdmark  
4964 ..			.dmark: db "CN?"  
4967 f1			.pastdmark: pop af  
4968			endm  
# End of macro DMARK
4968						CALLMONITOR 
4968 cd 6f ee			call debug_vector  
496b				endm  
# End of macro CALLMONITOR
496b					endif 
496b cd 5b 11				call strlenz 
496e					if DEBUG_FORTH_WORDS 
496e						DMARK "CNl" 
496e f5				push af  
496f 3a 83 49			ld a, (.dmark)  
4972 32 65 ee			ld (debug_mark),a  
4975 3a 84 49			ld a, (.dmark+1)  
4978 32 66 ee			ld (debug_mark+1),a  
497b 3a 85 49			ld a, (.dmark+2)  
497e 32 67 ee			ld (debug_mark+2),a  
4981 18 03			jr .pastdmark  
4983 ..			.dmark: db "CNl"  
4986 f1			.pastdmark: pop af  
4987			endm  
# End of macro DMARK
4987						CALLMONITOR 
4987 cd 6f ee			call debug_vector  
498a				endm  
# End of macro CALLMONITOR
498a					endif 
498a			 
498a cd 90 1b				call forth_push_numhl 
498d			 
498d			 
498d			 
498d				       NEXTW 
498d c3 81 1f			jp macro_next 
4990				endm 
# End of macro NEXTW
4990			.ASC: 
4990				CWHEAD .CHR 57 "ASC" 3 WORD_FLAG_CODE 
4990 4d				db WORD_SYS_CORE+57             
4991 fe 49			dw .CHR            
4993 04				db 3 + 1 
4994 .. 00			db "ASC",0              
4998				endm 
# End of macro CWHEAD
4998			; | ASC ( u -- n ) Get the ASCII value of the first character of the string on TOS | DONE 
4998					if DEBUG_FORTH_WORDS_KEY 
4998						DMARK "ASC" 
4998 f5				push af  
4999 3a ad 49			ld a, (.dmark)  
499c 32 65 ee			ld (debug_mark),a  
499f 3a ae 49			ld a, (.dmark+1)  
49a2 32 66 ee			ld (debug_mark+1),a  
49a5 3a af 49			ld a, (.dmark+2)  
49a8 32 67 ee			ld (debug_mark+2),a  
49ab 18 03			jr .pastdmark  
49ad ..			.dmark: db "ASC"  
49b0 f1			.pastdmark: pop af  
49b1			endm  
# End of macro DMARK
49b1						CALLMONITOR 
49b1 cd 6f ee			call debug_vector  
49b4				endm  
# End of macro CALLMONITOR
49b4					endif 
49b4					FORTH_DSP_VALUE 
49b4 cd 7e 1d			call macro_forth_dsp_value 
49b7				endm 
# End of macro FORTH_DSP_VALUE
49b7					;v5 FORTH_DSP_VALUE 
49b7			;		inc hl      ; now at start of numeric as string 
49b7			 
49b7 e5					push hl 
49b8			 
49b8					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
49b8 cd 4d 1e			call macro_forth_dsp_pop 
49bb				endm 
# End of macro FORTH_DSP_POP
49bb			 
49bb e1					pop hl 
49bc			 
49bc					if DEBUG_FORTH_WORDS 
49bc						DMARK "AS1" 
49bc f5				push af  
49bd 3a d1 49			ld a, (.dmark)  
49c0 32 65 ee			ld (debug_mark),a  
49c3 3a d2 49			ld a, (.dmark+1)  
49c6 32 66 ee			ld (debug_mark+1),a  
49c9 3a d3 49			ld a, (.dmark+2)  
49cc 32 67 ee			ld (debug_mark+2),a  
49cf 18 03			jr .pastdmark  
49d1 ..			.dmark: db "AS1"  
49d4 f1			.pastdmark: pop af  
49d5			endm  
# End of macro DMARK
49d5						CALLMONITOR 
49d5 cd 6f ee			call debug_vector  
49d8				endm  
# End of macro CALLMONITOR
49d8					endif 
49d8					; push the content of a onto the stack as a value 
49d8			 
49d8 7e					ld a,(hl)   ; get char 
49d9 26 00				ld h,0 
49db 6f					ld l,a 
49dc					if DEBUG_FORTH_WORDS 
49dc						DMARK "AS2" 
49dc f5				push af  
49dd 3a f1 49			ld a, (.dmark)  
49e0 32 65 ee			ld (debug_mark),a  
49e3 3a f2 49			ld a, (.dmark+1)  
49e6 32 66 ee			ld (debug_mark+1),a  
49e9 3a f3 49			ld a, (.dmark+2)  
49ec 32 67 ee			ld (debug_mark+2),a  
49ef 18 03			jr .pastdmark  
49f1 ..			.dmark: db "AS2"  
49f4 f1			.pastdmark: pop af  
49f5			endm  
# End of macro DMARK
49f5						CALLMONITOR 
49f5 cd 6f ee			call debug_vector  
49f8				endm  
# End of macro CALLMONITOR
49f8					endif 
49f8 cd 90 1b				call forth_push_numhl 
49fb			 
49fb				       NEXTW 
49fb c3 81 1f			jp macro_next 
49fe				endm 
# End of macro NEXTW
49fe			 
49fe			.CHR: 
49fe				CWHEAD .ENDSTR 57 "CHR" 3 WORD_FLAG_CODE 
49fe 4d				db WORD_SYS_CORE+57             
49ff 3a 4a			dw .ENDSTR            
4a01 04				db 3 + 1 
4a02 .. 00			db "CHR",0              
4a06				endm 
# End of macro CWHEAD
4a06			; | CHR ( u -- n ) The ASCII character value of u is turned into a string n on the stack | DONE 
4a06					if DEBUG_FORTH_WORDS_KEY 
4a06						DMARK "CHR" 
4a06 f5				push af  
4a07 3a 1b 4a			ld a, (.dmark)  
4a0a 32 65 ee			ld (debug_mark),a  
4a0d 3a 1c 4a			ld a, (.dmark+1)  
4a10 32 66 ee			ld (debug_mark+1),a  
4a13 3a 1d 4a			ld a, (.dmark+2)  
4a16 32 67 ee			ld (debug_mark+2),a  
4a19 18 03			jr .pastdmark  
4a1b ..			.dmark: db "CHR"  
4a1e f1			.pastdmark: pop af  
4a1f			endm  
# End of macro DMARK
4a1f						CALLMONITOR 
4a1f cd 6f ee			call debug_vector  
4a22				endm  
# End of macro CALLMONITOR
4a22					endif 
4a22					FORTH_DSP_VALUEHL 
4a22 cd 95 1d			call macro_dsp_valuehl 
4a25				endm 
# End of macro FORTH_DSP_VALUEHL
4a25			 
4a25					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4a25 cd 4d 1e			call macro_forth_dsp_pop 
4a28				endm 
# End of macro FORTH_DSP_POP
4a28			 
4a28					; save asci byte as a zero term string and push string 
4a28			 
4a28 7d					ld a,l 
4a29 32 bb e2				ld (scratch), a 
4a2c			 
4a2c 3e 00				ld a, 0 
4a2e 32 bc e2				ld (scratch+1), a 
4a31			 
4a31 21 bb e2				ld hl, scratch 
4a34 cd fe 1b				call forth_push_str 
4a37			 
4a37			 
4a37				       NEXTW 
4a37 c3 81 1f			jp macro_next 
4a3a				endm 
# End of macro NEXTW
4a3a			 
4a3a			 
4a3a			 
4a3a			 
4a3a			.ENDSTR: 
4a3a			; eof 
4a3a			 
# End of file forth_words_str.asm
4a3a			include "forth_words_key.asm" 
4a3a			 
4a3a			; | ## Keyboard Words 
4a3a			 
4a3a			.KEY: 
4a3a				CWHEAD .KEYDB 42 "KEY" 3 WORD_FLAG_CODE 
4a3a 3e				db WORD_SYS_CORE+42             
4a3b 6a 4a			dw .KEYDB            
4a3d 04				db 3 + 1 
4a3e .. 00			db "KEY",0              
4a42				endm 
# End of macro CWHEAD
4a42			; | KEY ( -- u ) A non-blocking read of keypress | DONE 
4a42			; | | The ASCII key (or key code) is pushed to stack. If no key is currently held down then push a 0 
4a42			; | | Can use something like this to process: 
4a42			; | | > repeat active . key ?dup if emit then #1 until  
4a42			 
4a42					if DEBUG_FORTH_WORDS_KEY 
4a42						DMARK "KEY" 
4a42 f5				push af  
4a43 3a 57 4a			ld a, (.dmark)  
4a46 32 65 ee			ld (debug_mark),a  
4a49 3a 58 4a			ld a, (.dmark+1)  
4a4c 32 66 ee			ld (debug_mark+1),a  
4a4f 3a 59 4a			ld a, (.dmark+2)  
4a52 32 67 ee			ld (debug_mark+2),a  
4a55 18 03			jr .pastdmark  
4a57 ..			.dmark: db "KEY"  
4a5a f1			.pastdmark: pop af  
4a5b			endm  
# End of macro DMARK
4a5b						CALLMONITOR 
4a5b cd 6f ee			call debug_vector  
4a5e				endm  
# End of macro CALLMONITOR
4a5e					endif 
4a5e			; TODO currently waits 
4a5e cd a6 61				call cinndb 
4a61					;call cin_wait 
4a61 6f					ld l, a 
4a62 26 00				ld h, 0 
4a64 cd 90 1b				call forth_push_numhl 
4a67					NEXTW 
4a67 c3 81 1f			jp macro_next 
4a6a				endm 
# End of macro NEXTW
4a6a			.KEYDB: 
4a6a				CWHEAD .WAITK 42 "KEYDB" 5 WORD_FLAG_CODE 
4a6a 3e				db WORD_SYS_CORE+42             
4a6b 9c 4a			dw .WAITK            
4a6d 06				db 5 + 1 
4a6e .. 00			db "KEYDB",0              
4a74				endm 
# End of macro CWHEAD
4a74			; | KEYDB ( -- u ) A non-blocking read of keypress with key release debounce | DONE 
4a74			; | | The ASCII key (or key code) is pushed to stack. If no key is currently held down then push a 0 
4a74			; | | Can use something like this to process: 
4a74			; | | > repeat active . key ?dup if emit then #1 until  
4a74			 
4a74					if DEBUG_FORTH_WORDS_KEY 
4a74						DMARK "KEB" 
4a74 f5				push af  
4a75 3a 89 4a			ld a, (.dmark)  
4a78 32 65 ee			ld (debug_mark),a  
4a7b 3a 8a 4a			ld a, (.dmark+1)  
4a7e 32 66 ee			ld (debug_mark+1),a  
4a81 3a 8b 4a			ld a, (.dmark+2)  
4a84 32 67 ee			ld (debug_mark+2),a  
4a87 18 03			jr .pastdmark  
4a89 ..			.dmark: db "KEB"  
4a8c f1			.pastdmark: pop af  
4a8d			endm  
# End of macro DMARK
4a8d						CALLMONITOR 
4a8d cd 6f ee			call debug_vector  
4a90				endm  
# End of macro CALLMONITOR
4a90					endif 
4a90			; TODO currently waits 
4a90 cd a6 61				call cin 
4a93					;call cin_wait 
4a93 6f					ld l, a 
4a94 26 00				ld h, 0 
4a96 cd 90 1b				call forth_push_numhl 
4a99					NEXTW 
4a99 c3 81 1f			jp macro_next 
4a9c				endm 
# End of macro NEXTW
4a9c			.WAITK: 
4a9c				CWHEAD .ACCEPT 43 "WAITK" 5 WORD_FLAG_CODE 
4a9c 3f				db WORD_SYS_CORE+43             
4a9d ce 4a			dw .ACCEPT            
4a9f 06				db 5 + 1 
4aa0 .. 00			db "WAITK",0              
4aa6				endm 
# End of macro CWHEAD
4aa6			; | WAITK ( -- w ) Wait for keypress TOS is key press | DONE 
4aa6					if DEBUG_FORTH_WORDS_KEY 
4aa6						DMARK "WAI" 
4aa6 f5				push af  
4aa7 3a bb 4a			ld a, (.dmark)  
4aaa 32 65 ee			ld (debug_mark),a  
4aad 3a bc 4a			ld a, (.dmark+1)  
4ab0 32 66 ee			ld (debug_mark+1),a  
4ab3 3a bd 4a			ld a, (.dmark+2)  
4ab6 32 67 ee			ld (debug_mark+2),a  
4ab9 18 03			jr .pastdmark  
4abb ..			.dmark: db "WAI"  
4abe f1			.pastdmark: pop af  
4abf			endm  
# End of macro DMARK
4abf						CALLMONITOR 
4abf cd 6f ee			call debug_vector  
4ac2				endm  
# End of macro CALLMONITOR
4ac2					endif 
4ac2 cd 9e 61				call cin_wait 
4ac5 6f					ld l, a 
4ac6 26 00				ld h, 0 
4ac8 cd 90 1b				call forth_push_numhl 
4acb					NEXTW 
4acb c3 81 1f			jp macro_next 
4ace				endm 
# End of macro NEXTW
4ace			.ACCEPT: 
4ace				CWHEAD .EDIT 44 "ACCEPT" 6 WORD_FLAG_CODE 
4ace 40				db WORD_SYS_CORE+44             
4acf 2c 4b			dw .EDIT            
4ad1 07				db 6 + 1 
4ad2 .. 00			db "ACCEPT",0              
4ad9				endm 
# End of macro CWHEAD
4ad9			; | ACCEPT ( -- w ) Prompt for text input and push pointer to string | DONE 
4ad9					; TODO crashes on push 
4ad9					if DEBUG_FORTH_WORDS_KEY 
4ad9						DMARK "ACC" 
4ad9 f5				push af  
4ada 3a ee 4a			ld a, (.dmark)  
4add 32 65 ee			ld (debug_mark),a  
4ae0 3a ef 4a			ld a, (.dmark+1)  
4ae3 32 66 ee			ld (debug_mark+1),a  
4ae6 3a f0 4a			ld a, (.dmark+2)  
4ae9 32 67 ee			ld (debug_mark+2),a  
4aec 18 03			jr .pastdmark  
4aee ..			.dmark: db "ACC"  
4af1 f1			.pastdmark: pop af  
4af2			endm  
# End of macro DMARK
4af2						CALLMONITOR 
4af2 cd 6f ee			call debug_vector  
4af5				endm  
# End of macro CALLMONITOR
4af5					endif 
4af5 21 b9 e4				ld hl, os_input 
4af8 3e 00				ld a, 0 
4afa 77					ld (hl),a 
4afb 3a 58 ea				ld a,(f_cursor_ptr) 
4afe 16 64				ld d, 100 
4b00 0e 00				ld c, 0 
4b02 1e 28				ld e, 40 
4b04 cd 22 0e				call input_str 
4b07					; TODO perhaps do a type check and wrap in quotes if not a number 
4b07 21 b9 e4				ld hl, os_input 
4b0a					if DEBUG_FORTH_WORDS 
4b0a						DMARK "AC1" 
4b0a f5				push af  
4b0b 3a 1f 4b			ld a, (.dmark)  
4b0e 32 65 ee			ld (debug_mark),a  
4b11 3a 20 4b			ld a, (.dmark+1)  
4b14 32 66 ee			ld (debug_mark+1),a  
4b17 3a 21 4b			ld a, (.dmark+2)  
4b1a 32 67 ee			ld (debug_mark+2),a  
4b1d 18 03			jr .pastdmark  
4b1f ..			.dmark: db "AC1"  
4b22 f1			.pastdmark: pop af  
4b23			endm  
# End of macro DMARK
4b23						CALLMONITOR 
4b23 cd 6f ee			call debug_vector  
4b26				endm  
# End of macro CALLMONITOR
4b26					endif 
4b26 cd fe 1b				call forth_push_str 
4b29					NEXTW 
4b29 c3 81 1f			jp macro_next 
4b2c				endm 
# End of macro NEXTW
4b2c			 
4b2c			.EDIT: 
4b2c				CWHEAD .DEDIT 44 "EDIT" 4 WORD_FLAG_CODE 
4b2c 40				db WORD_SYS_CORE+44             
4b2d ce 4b			dw .DEDIT            
4b2f 05				db 4 + 1 
4b30 .. 00			db "EDIT",0              
4b35				endm 
# End of macro CWHEAD
4b35			; | EDIT ( u -- u ) Takes string on TOS and allows editing of it. Pushes it back once done. | DONE 
4b35			 
4b35					; TODO does not copy from stack 
4b35					if DEBUG_FORTH_WORDS_KEY 
4b35						DMARK "EDT" 
4b35 f5				push af  
4b36 3a 4a 4b			ld a, (.dmark)  
4b39 32 65 ee			ld (debug_mark),a  
4b3c 3a 4b 4b			ld a, (.dmark+1)  
4b3f 32 66 ee			ld (debug_mark+1),a  
4b42 3a 4c 4b			ld a, (.dmark+2)  
4b45 32 67 ee			ld (debug_mark+2),a  
4b48 18 03			jr .pastdmark  
4b4a ..			.dmark: db "EDT"  
4b4d f1			.pastdmark: pop af  
4b4e			endm  
# End of macro DMARK
4b4e						CALLMONITOR 
4b4e cd 6f ee			call debug_vector  
4b51				endm  
# End of macro CALLMONITOR
4b51					endif 
4b51			 
4b51					;FORTH_DSP 
4b51					FORTH_DSP_VALUEHL 
4b51 cd 95 1d			call macro_dsp_valuehl 
4b54				endm 
# End of macro FORTH_DSP_VALUEHL
4b54			;		inc hl    ; TODO do type check 
4b54			 
4b54			;		call get_word_hl 
4b54 e5					push hl 
4b55					if DEBUG_FORTH_WORDS 
4b55						DMARK "EDp" 
4b55 f5				push af  
4b56 3a 6a 4b			ld a, (.dmark)  
4b59 32 65 ee			ld (debug_mark),a  
4b5c 3a 6b 4b			ld a, (.dmark+1)  
4b5f 32 66 ee			ld (debug_mark+1),a  
4b62 3a 6c 4b			ld a, (.dmark+2)  
4b65 32 67 ee			ld (debug_mark+2),a  
4b68 18 03			jr .pastdmark  
4b6a ..			.dmark: db "EDp"  
4b6d f1			.pastdmark: pop af  
4b6e			endm  
# End of macro DMARK
4b6e						CALLMONITOR 
4b6e cd 6f ee			call debug_vector  
4b71				endm  
# End of macro CALLMONITOR
4b71					endif 
4b71				;	ld a, 0 
4b71 cd 5b 11				call strlenz 
4b74 23					inc hl 
4b75			 
4b75 06 00				ld b, 0 
4b77 4d					ld c, l 
4b78			 
4b78 e1					pop hl 
4b79 11 b9 e4				ld de, os_input 
4b7c					if DEBUG_FORTH_WORDS_KEY 
4b7c						DMARK "EDc" 
4b7c f5				push af  
4b7d 3a 91 4b			ld a, (.dmark)  
4b80 32 65 ee			ld (debug_mark),a  
4b83 3a 92 4b			ld a, (.dmark+1)  
4b86 32 66 ee			ld (debug_mark+1),a  
4b89 3a 93 4b			ld a, (.dmark+2)  
4b8c 32 67 ee			ld (debug_mark+2),a  
4b8f 18 03			jr .pastdmark  
4b91 ..			.dmark: db "EDc"  
4b94 f1			.pastdmark: pop af  
4b95			endm  
# End of macro DMARK
4b95						CALLMONITOR 
4b95 cd 6f ee			call debug_vector  
4b98				endm  
# End of macro CALLMONITOR
4b98					endif 
4b98 ed b0				ldir 
4b9a			 
4b9a			 
4b9a 21 b9 e4				ld hl, os_input 
4b9d					;ld a, 0 
4b9d					;ld (hl),a 
4b9d 3a 58 ea				ld a,(f_cursor_ptr) 
4ba0 16 64				ld d, 100 
4ba2 0e 00				ld c, 0 
4ba4 1e 28				ld e, 40 
4ba6 cd 22 0e				call input_str 
4ba9					; TODO perhaps do a type check and wrap in quotes if not a number 
4ba9 21 b9 e4				ld hl, os_input 
4bac					if DEBUG_FORTH_WORDS 
4bac						DMARK "ED1" 
4bac f5				push af  
4bad 3a c1 4b			ld a, (.dmark)  
4bb0 32 65 ee			ld (debug_mark),a  
4bb3 3a c2 4b			ld a, (.dmark+1)  
4bb6 32 66 ee			ld (debug_mark+1),a  
4bb9 3a c3 4b			ld a, (.dmark+2)  
4bbc 32 67 ee			ld (debug_mark+2),a  
4bbf 18 03			jr .pastdmark  
4bc1 ..			.dmark: db "ED1"  
4bc4 f1			.pastdmark: pop af  
4bc5			endm  
# End of macro DMARK
4bc5						CALLMONITOR 
4bc5 cd 6f ee			call debug_vector  
4bc8				endm  
# End of macro CALLMONITOR
4bc8					endif 
4bc8 cd fe 1b				call forth_push_str 
4bcb					NEXTW 
4bcb c3 81 1f			jp macro_next 
4bce				endm 
# End of macro NEXTW
4bce			 
4bce			.DEDIT: 
4bce				CWHEAD .ENDKEY 44 "DEDIT" 5 WORD_FLAG_CODE 
4bce 40				db WORD_SYS_CORE+44             
4bcf 30 4c			dw .ENDKEY            
4bd1 06				db 5 + 1 
4bd2 .. 00			db "DEDIT",0              
4bd8				endm 
# End of macro CWHEAD
4bd8			; | DEDIT ( ptr --  ) Takes an address for direct editing in memory. | DONE 
4bd8			 
4bd8					; TODO does not copy from stack 
4bd8					if DEBUG_FORTH_WORDS_KEY 
4bd8						DMARK "DED" 
4bd8 f5				push af  
4bd9 3a ed 4b			ld a, (.dmark)  
4bdc 32 65 ee			ld (debug_mark),a  
4bdf 3a ee 4b			ld a, (.dmark+1)  
4be2 32 66 ee			ld (debug_mark+1),a  
4be5 3a ef 4b			ld a, (.dmark+2)  
4be8 32 67 ee			ld (debug_mark+2),a  
4beb 18 03			jr .pastdmark  
4bed ..			.dmark: db "DED"  
4bf0 f1			.pastdmark: pop af  
4bf1			endm  
# End of macro DMARK
4bf1						CALLMONITOR 
4bf1 cd 6f ee			call debug_vector  
4bf4				endm  
# End of macro CALLMONITOR
4bf4					endif 
4bf4			 
4bf4					;FORTH_DSP 
4bf4					FORTH_DSP_VALUEHL 
4bf4 cd 95 1d			call macro_dsp_valuehl 
4bf7				endm 
# End of macro FORTH_DSP_VALUEHL
4bf7			;		inc hl    ; TODO do type check 
4bf7			 
4bf7			;		call get_word_hl 
4bf7 e5					push hl 
4bf8 e5					push hl 
4bf9					FORTH_DSP_POP 
4bf9 cd 4d 1e			call macro_forth_dsp_pop 
4bfc				endm 
# End of macro FORTH_DSP_POP
4bfc e1					pop hl 
4bfd					if DEBUG_FORTH_WORDS 
4bfd						DMARK "EDp" 
4bfd f5				push af  
4bfe 3a 12 4c			ld a, (.dmark)  
4c01 32 65 ee			ld (debug_mark),a  
4c04 3a 13 4c			ld a, (.dmark+1)  
4c07 32 66 ee			ld (debug_mark+1),a  
4c0a 3a 14 4c			ld a, (.dmark+2)  
4c0d 32 67 ee			ld (debug_mark+2),a  
4c10 18 03			jr .pastdmark  
4c12 ..			.dmark: db "EDp"  
4c15 f1			.pastdmark: pop af  
4c16			endm  
# End of macro DMARK
4c16						CALLMONITOR 
4c16 cd 6f ee			call debug_vector  
4c19				endm  
# End of macro CALLMONITOR
4c19					endif 
4c19				;	ld a, 0 
4c19 cd 5b 11				call strlenz 
4c1c 23					inc hl 
4c1d			 
4c1d 06 00				ld b, 0 
4c1f 4d					ld c, l 
4c20			 
4c20 e1					pop hl 
4c21			 
4c21					;ld a, 0 
4c21					;ld (hl),a 
4c21 3a 58 ea				ld a,(f_cursor_ptr) 
4c24 16 64				ld d, 100 
4c26 0e 00				ld c, 0 
4c28 1e 28				ld e, 40 
4c2a cd 22 0e				call input_str 
4c2d					; TODO perhaps do a type check and wrap in quotes if not a number 
4c2d					NEXTW 
4c2d c3 81 1f			jp macro_next 
4c30				endm 
# End of macro NEXTW
4c30			 
4c30			 
4c30			.ENDKEY: 
4c30			; eof 
4c30			 
# End of file forth_words_key.asm
4c30			include "forth_words_const.asm" 
4c30			 
4c30			; | ## Constants (i.e. Useful memory addresses that can set or get features) 
4c30			 
4c30			 
4c30			.SPITIME: 
4c30				CWHEAD .VA 99 "SPITIME" 7 WORD_FLAG_CODE 
4c30 77				db WORD_SYS_CORE+99             
4c31 45 4c			dw .VA            
4c33 08				db 7 + 1 
4c34 .. 00			db "SPITIME",0              
4c3c				endm 
# End of macro CWHEAD
4c3c			; | SPITIME ( -- u1 )   Pushes address of the SPI pulse counter/delay to stack | DONE 
4c3c			; 
4c3c			; | | If using BANK devices then leave as is. 
4c3c			; | | Only really useful for the CARTDEV where other devices may be far too slow. In particular 
4c3c			; | | the multiplexing of the PicoSPINet addon which might not be running fast enough for all of the nodes 
4c3c			 
4c3c 21 5e ea				ld hl, spi_clktime  
4c3f cd 90 1b				call forth_push_numhl 
4c42			 
4c42					NEXTW 
4c42 c3 81 1f			jp macro_next 
4c45				endm 
# End of macro NEXTW
4c45			 
4c45			 
4c45			.VA: 
4c45				CWHEAD .SYMBOL 99 "VA" 2 WORD_FLAG_CODE 
4c45 77				db WORD_SYS_CORE+99             
4c46 55 4c			dw .SYMBOL            
4c48 03				db 2 + 1 
4c49 .. 00			db "VA",0              
4c4c				endm 
# End of macro CWHEAD
4c4c			; | VA ( -- u1 )   Pushes address of block of memory used for v1..5 | DONE 
4c4c 21 22 ea				ld hl, cli_var_array 
4c4f cd 90 1b				call forth_push_numhl 
4c52			 
4c52					NEXTW 
4c52 c3 81 1f			jp macro_next 
4c55				endm 
# End of macro NEXTW
4c55			 
4c55			.SYMBOL: 
4c55				CWHEAD .ENDCONST 99 "SYMBOL" 6 WORD_FLAG_CODE 
4c55 77				db WORD_SYS_CORE+99             
4c56 5f 4d			dw .ENDCONST            
4c58 07				db 6 + 1 
4c59 .. 00			db "SYMBOL",0              
4c60				endm 
# End of macro CWHEAD
4c60			; | SYMBOL ( u1 -- )  Get the address of a system symbol from a look up table to TOS  | DONE 
4c60			; | 
4c60			; | | The value is the number reference and the final address is pushed to stack 
4c60			 
4c60			; | | ``` 
4c60			; | | dw sym_table 
4c60			; | | dw nmi_vector 
4c60			; | | dw cli_autodisplay 
4c60			; | | dw cli_data_sp 
4c60			; | | dw cli_data_stack 
4c60			; | | dw cli_loop_sp 
4c60			; | | dw cli_loop_stack 
4c60			; | | dw cli_var_array 
4c60			; | | dw cursor_col 
4c60			; | | dw cursor_ptr 
4c60			; | | ; 10 
4c60			; | | dw cursor_row 
4c60			; | | dw debug_mark 
4c60			; | | dw display_fb0 
4c60			; | | dw display_fb1 
4c60			; | | dw display_fb2 
4c60			; | | dw display_fb3 
4c60			; | | dw display_fb_active 
4c60			; | | dw execscratch 
4c60			; | | dw f_cursor_ptr 
4c60			; | | dw hardware_word 
4c60			; | | ;20 
4c60			; | | dw input_at_cursor 
4c60			; | | dw input_at_pos 
4c60			; | | dw input_cur_flash 
4c60			; | | dw input_cur_onoff 
4c60			; | | dw input_cursor 
4c60			; | | dw input_display_size 
4c60			; | | dw input_len 
4c60			; | | dw input_ptr 
4c60			; | | dw input_size 
4c60			; | | dw input_start 
4c60			; | | ; 30 
4c60			; | | dw input_str 
4c60			; | | dw input_under_cursor 
4c60			; | | dw os_cli_cmd 
4c60			; | | dw os_cur_ptr 
4c60			; | | dw os_current_i 
4c60			; | | dw os_input 
4c60			; | | dw os_last_cmd 
4c60			; | | dw os_last_new_uword 
4c60			; | | dw debug_vector 
4c60			; | | dw os_view_hl 
4c60			; | | ;40 
4c60			; | | dw os_word_scratch 
4c60			; | | dw portbctl 
4c60			; | | dw portbdata 
4c60			; | | dw spi_cartdev 
4c60			; | | dw spi_cartdev2 
4c60			; | | dw spi_clktime 
4c60			; | | dw spi_device 
4c60			; | | dw spi_device_id 
4c60			; | | dw spi_portbyte 
4c60			; | | dw stackstore 
4c60			; | | ; 50 
4c60			; | | if STORAGE_SE 
4c60			; | | dw storage_actl 
4c60			; | | dw storage_adata 
4c60			; | | else 
4c60			; | | dw 0 
4c60			; | | dw 0 
4c60			; | | endif 
4c60			; | | dw storage_append 
4c60			; | | if STORAGE_SE 
4c60			; | | dw storage_bctl 
4c60			; | | else 
4c60			; | | dw 0 
4c60			; | | endif 
4c60			; | | dw store_bank_active 
4c60			; | | dw store_filecache 
4c60			; | | dw store_longread 
4c60			; | | dw store_openaddr 
4c60			; | | dw store_openext 
4c60			; | | dw store_openmaxext 
4c60			; | | ; 60 
4c60			; | | dw store_page 
4c60			; | | dw store_readbuf 
4c60			; | | dw store_readcont 
4c60			; | | dw store_readptr 
4c60			; | | dw store_tmpext 
4c60			; | | dw store_tmpid 
4c60			; | | dw store_tmppageid 
4c60			; | | dw malloc 
4c60			; | | dw free 
4c60			; | | dw cin 
4c60			; | | ; 70 
4c60			; | | dw cin_wait 
4c60			; | | dw forth_push_numhl 
4c60			; | | dw forth_push_str 
4c60			; | | ``` 
4c60			 
4c60					if DEBUG_FORTH_WORDS_KEY 
4c60						DMARK "SYM" 
4c60 f5				push af  
4c61 3a 75 4c			ld a, (.dmark)  
4c64 32 65 ee			ld (debug_mark),a  
4c67 3a 76 4c			ld a, (.dmark+1)  
4c6a 32 66 ee			ld (debug_mark+1),a  
4c6d 3a 77 4c			ld a, (.dmark+2)  
4c70 32 67 ee			ld (debug_mark+2),a  
4c73 18 03			jr .pastdmark  
4c75 ..			.dmark: db "SYM"  
4c78 f1			.pastdmark: pop af  
4c79			endm  
# End of macro DMARK
4c79						CALLMONITOR 
4c79 cd 6f ee			call debug_vector  
4c7c				endm  
# End of macro CALLMONITOR
4c7c					endif 
4c7c			 
4c7c					FORTH_DSP_VALUEHL 
4c7c cd 95 1d			call macro_dsp_valuehl 
4c7f				endm 
# End of macro FORTH_DSP_VALUEHL
4c7f			 
4c7f 7d					ld a, l     
4c80			 
4c80			 
4c80					if DEBUG_FORTH_WORDS 
4c80						DMARK "SY1" 
4c80 f5				push af  
4c81 3a 95 4c			ld a, (.dmark)  
4c84 32 65 ee			ld (debug_mark),a  
4c87 3a 96 4c			ld a, (.dmark+1)  
4c8a 32 66 ee			ld (debug_mark+1),a  
4c8d 3a 97 4c			ld a, (.dmark+2)  
4c90 32 67 ee			ld (debug_mark+2),a  
4c93 18 03			jr .pastdmark  
4c95 ..			.dmark: db "SY1"  
4c98 f1			.pastdmark: pop af  
4c99			endm  
# End of macro DMARK
4c99						CALLMONITOR 
4c99 cd 6f ee			call debug_vector  
4c9c				endm  
# End of macro CALLMONITOR
4c9c					endif 
4c9c					 
4c9c f5					push af	 
4c9d					FORTH_DSP_POP 
4c9d cd 4d 1e			call macro_forth_dsp_pop 
4ca0				endm 
# End of macro FORTH_DSP_POP
4ca0 f1					pop af 
4ca1			 
4ca1 cb 27				sla a  
4ca3				 
4ca3					 
4ca3					if DEBUG_FORTH_WORDS 
4ca3						DMARK "SY" 
4ca3 f5				push af  
4ca4 3a b8 4c			ld a, (.dmark)  
4ca7 32 65 ee			ld (debug_mark),a  
4caa 3a b9 4c			ld a, (.dmark+1)  
4cad 32 66 ee			ld (debug_mark+1),a  
4cb0 3a ba 4c			ld a, (.dmark+2)  
4cb3 32 67 ee			ld (debug_mark+2),a  
4cb6 18 02			jr .pastdmark  
4cb8 ..			.dmark: db "SY"  
4cba f1			.pastdmark: pop af  
4cbb			endm  
# End of macro DMARK
4cbb						CALLMONITOR 
4cbb cd 6f ee			call debug_vector  
4cbe				endm  
# End of macro CALLMONITOR
4cbe					endif 
4cbe			 
4cbe 21 cd 4c				ld hl, sym_table 
4cc1 cd f5 0d				call addatohl 
4cc4 cd 03 1f				call loadwordinhl 
4cc7 cd 90 1b				call forth_push_numhl 
4cca			 
4cca			 
4cca				       NEXTW 
4cca c3 81 1f			jp macro_next 
4ccd				endm 
# End of macro NEXTW
4ccd			 
4ccd			sym_table: 
4ccd			 
4ccd			; 0 
4ccd cd 4c		dw sym_table 
4ccf 72 ee		dw nmi_vector 
4cd1 36 ea		dw cli_autodisplay 
4cd3 e8 e9		dw cli_data_sp 
4cd5 22 e8		dw cli_data_stack 
4cd7 ea e9		dw cli_loop_sp 
4cd9 24 e9		dw cli_loop_stack 
4cdb 22 ea		dw cli_var_array 
4cdd bf eb		dw cursor_col 
4cdf bd eb		dw cursor_ptr 
4ce1			; 10 
4ce1 be eb		dw cursor_row 
4ce3 65 ee		dw debug_mark 
4ce5 ab ed		dw display_fb0 
4ce7 0a ed		dw display_fb1 
4ce9 c8 eb		dw display_fb2 
4ceb 69 ec		dw display_fb3 
4ced c6 eb		dw display_fb_active 
4cef ba e3		dw execscratch 
4cf1 58 ea		dw f_cursor_ptr 
4cf3 75 ee		dw hardware_word 
4cf5			;20 
4cf5 5c ee		dw input_at_cursor 
4cf7 5e ee		dw input_at_pos 
4cf9 5a ee		dw input_cur_flash 
4cfb 59 ee		dw input_cur_onoff 
4cfd 4f ee		dw input_cursor 
4cff 5f ee		dw input_display_size 
4d01 54 ee		dw input_len 
4d03 63 ee		dw input_ptr 
4d05 60 ee		dw input_size 
4d07 61 ee		dw input_start 
4d09			; 30 
4d09 22 0e		dw input_str 
4d0b 5d ee		dw input_under_cursor 
4d0d e2 e5		dw os_cli_cmd 
4d0f de e5		dw os_cur_ptr 
4d11 e0 e5		dw os_current_i 
4d13 b9 e4		dw os_input 
4d15 e1 e6		dw os_last_cmd 
4d17 b8 e5		dw os_last_new_uword 
4d19 6f ee		dw debug_vector 
4d1b 9d e2		dw os_view_hl 
4d1d			;40 
4d1d c0 e5		dw os_word_scratch 
4d1f c3 00		dw portbctl 
4d21 c1 00		dw portbdata 
4d23 5d ea		dw spi_cartdev 
4d25 5c ea		dw spi_cartdev2 
4d27 5e ea		dw spi_clktime 
4d29 5a ea		dw spi_device 
4d2b 59 ea		dw spi_device_id 
4d2d 5b ea		dw spi_portbyte 
4d2f a1 eb		dw stackstore 
4d31			; 50 
4d31			if STORAGE_SE 
4d31			dw storage_actl 
4d31			dw storage_adata 
4d31			else 
4d31 00 00		dw 0 
4d33 00 00		dw 0 
4d35			endif 
4d35 77 09		dw storage_append 
4d37			if STORAGE_SE 
4d37			dw storage_bctl 
4d37			else 
4d37 00 00		dw 0 
4d39			endif 
4d39 8d eb		dw store_bank_active 
4d3b 61 ea		dw store_filecache 
4d3d 6f ea		dw store_longread 
4d3f 65 ea		dw store_openaddr 
4d41 64 ea		dw store_openext 
4d43 63 ea		dw store_openmaxext 
4d45			; 60 
4d45 74 ea		dw store_page 
4d47 70 ea		dw store_readbuf 
4d49 67 ea		dw store_readcont 
4d4b 72 ea		dw store_readptr 
4d4d 67 ea		dw store_tmpext 
4d4f 68 ea		dw store_tmpid 
4d51 5f ea		dw store_tmppageid 
4d53 d0 11		dw malloc 
4d55 9a 12		dw free 
4d57 a6 61		dw cin 
4d59			; 70 
4d59 9e 61		dw cin_wait 
4d5b 90 1b		dw forth_push_numhl 
4d5d fe 1b		dw forth_push_str 
4d5f			 
4d5f			 
4d5f			.ENDCONST: 
4d5f			 
4d5f			; eof 
4d5f			 
4d5f			 
# End of file forth_words_const.asm
4d5f			 
4d5f			if STORAGE_SE 
4d5f			   	include "forth_words_storage.asm" 
4d5f			endif 
4d5f				include "forth_words_device.asm" 
4d5f			; Device related words 
4d5f			 
4d5f			; | ## Device Words 
4d5f			 
4d5f			;if SOUND_ENABLE 
4d5f			;.NOTE: 
4d5f			;	CWHEAD .AFTERSOUND 31 "NOTE" 4 WORD_FLAG_CODE 
4d5f			;; NOTE ( ud uf --  )  Plays a note of frequency uf for the duration of ud millseconds  TODO 
4d5f			;		if DEBUG_FORTH_WORDS_KEY 
4d5f			;			DMARK "NTE" 
4d5f			;			CALLMONITOR 
4d5f			;		endif 
4d5f			; 
4d5f			;	 
4d5f			; 
4d5f			;		NEXTW 
4d5f			;.AFTERSOUND: 
4d5f			;endif 
4d5f			 
4d5f			 
4d5f			USE_GPIO: equ 0 
4d5f			 
4d5f			if USE_GPIO 
4d5f			.GP1: 
4d5f				CWHEAD .GP2 31 "IOIN" 4 WORD_FLAG_CODE 
4d5f			;  IOIN ( u1 -- u )    Perform a GPIO read of pin u1 and push result   
4d5f					NEXTW 
4d5f			.GP2: 
4d5f				CWHEAD .GP3 31 "IOOUT" 5 WORD_FLAG_CODE 
4d5f			;  IOOUT ( u1 u2 --  )    Perform a GPIO write of pin u1 with pin set to 0 or 1 in u2   
4d5f			 
4d5f					NEXTW 
4d5f			 
4d5f			.GP3: 
4d5f				CWHEAD .GP4 31 "IOBYTE" 5 WORD_FLAG_CODE 
4d5f			;  IOBYTE ( u1 --  )    Perform a GPIO write of byte u1   
4d5f			 
4d5f					NEXTW 
4d5f			 
4d5f			.GP4: 
4d5f				CWHEAD .SIN 31 "IOSET" 5 WORD_FLAG_CODE 
4d5f			;  IOSET ( u1 --  )    Setup GPIO pins for I/O direction. Bit is set for write else read pin   
4d5f			 
4d5f					NEXTW 
4d5f			.SIN: 
4d5f			 
4d5f			 
4d5f			endif 
4d5f			 
4d5f			 
4d5f				CWHEAD .SOUT 31 "IN" 2 WORD_FLAG_CODE 
4d5f 33				db WORD_SYS_CORE+31             
4d60 94 4d			dw .SOUT            
4d62 03				db 2 + 1 
4d63 .. 00			db "IN",0              
4d66				endm 
# End of macro CWHEAD
4d66			; | IN ( u1 -- u )    Perform Z80 IN with u1 being the port number. Push result to TOS | TO TEST 
4d66					if DEBUG_FORTH_WORDS_KEY 
4d66						DMARK "IN." 
4d66 f5				push af  
4d67 3a 7b 4d			ld a, (.dmark)  
4d6a 32 65 ee			ld (debug_mark),a  
4d6d 3a 7c 4d			ld a, (.dmark+1)  
4d70 32 66 ee			ld (debug_mark+1),a  
4d73 3a 7d 4d			ld a, (.dmark+2)  
4d76 32 67 ee			ld (debug_mark+2),a  
4d79 18 03			jr .pastdmark  
4d7b ..			.dmark: db "IN."  
4d7e f1			.pastdmark: pop af  
4d7f			endm  
# End of macro DMARK
4d7f						CALLMONITOR 
4d7f cd 6f ee			call debug_vector  
4d82				endm  
# End of macro CALLMONITOR
4d82					endif 
4d82					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4d82 cd 95 1d			call macro_dsp_valuehl 
4d85				endm 
# End of macro FORTH_DSP_VALUEHL
4d85			 
4d85 e5					push hl 
4d86			 
4d86					; destroy value TOS 
4d86			 
4d86					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4d86 cd 4d 1e			call macro_forth_dsp_pop 
4d89				endm 
# End of macro FORTH_DSP_POP
4d89			 
4d89					; one value on hl get other one back 
4d89			 
4d89 c1					pop bc 
4d8a			 
4d8a					; do the sub 
4d8a			;		ex de, hl 
4d8a			 
4d8a ed 68				in l,(c) 
4d8c			 
4d8c					; save it 
4d8c			 
4d8c 26 00				ld h,0 
4d8e			 
4d8e					; TODO push value back onto stack for another op etc 
4d8e			 
4d8e cd 90 1b				call forth_push_numhl 
4d91					NEXTW 
4d91 c3 81 1f			jp macro_next 
4d94				endm 
# End of macro NEXTW
4d94			.SOUT: 
4d94				CWHEAD .SPIO 32 "OUT" 3 WORD_FLAG_CODE 
4d94 34				db WORD_SYS_CORE+32             
4d95 e7 4d			dw .SPIO            
4d97 04				db 3 + 1 
4d98 .. 00			db "OUT",0              
4d9c				endm 
# End of macro CWHEAD
4d9c			; | OUT ( u1 u2 -- ) Perform Z80 OUT to port u2 sending byte u1 | DONE 
4d9c					if DEBUG_FORTH_WORDS_KEY 
4d9c						DMARK "OUT" 
4d9c f5				push af  
4d9d 3a b1 4d			ld a, (.dmark)  
4da0 32 65 ee			ld (debug_mark),a  
4da3 3a b2 4d			ld a, (.dmark+1)  
4da6 32 66 ee			ld (debug_mark+1),a  
4da9 3a b3 4d			ld a, (.dmark+2)  
4dac 32 67 ee			ld (debug_mark+2),a  
4daf 18 03			jr .pastdmark  
4db1 ..			.dmark: db "OUT"  
4db4 f1			.pastdmark: pop af  
4db5			endm  
# End of macro DMARK
4db5						CALLMONITOR 
4db5 cd 6f ee			call debug_vector  
4db8				endm  
# End of macro CALLMONITOR
4db8					endif 
4db8			 
4db8					; get port 
4db8			 
4db8					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4db8 cd 95 1d			call macro_dsp_valuehl 
4dbb				endm 
# End of macro FORTH_DSP_VALUEHL
4dbb			 
4dbb e5					push hl 
4dbc			 
4dbc					; destroy value TOS 
4dbc			 
4dbc					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4dbc cd 4d 1e			call macro_forth_dsp_pop 
4dbf				endm 
# End of macro FORTH_DSP_POP
4dbf			 
4dbf					; get byte to send 
4dbf			 
4dbf					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4dbf cd 95 1d			call macro_dsp_valuehl 
4dc2				endm 
# End of macro FORTH_DSP_VALUEHL
4dc2			 
4dc2			;		push hl 
4dc2			 
4dc2					; destroy value TOS 
4dc2			 
4dc2					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4dc2 cd 4d 1e			call macro_forth_dsp_pop 
4dc5				endm 
# End of macro FORTH_DSP_POP
4dc5			 
4dc5					; one value on hl get other one back 
4dc5			 
4dc5			;		pop hl 
4dc5			 
4dc5 c1					pop bc 
4dc6			 
4dc6					if DEBUG_FORTH_WORDS 
4dc6						DMARK "OUT" 
4dc6 f5				push af  
4dc7 3a db 4d			ld a, (.dmark)  
4dca 32 65 ee			ld (debug_mark),a  
4dcd 3a dc 4d			ld a, (.dmark+1)  
4dd0 32 66 ee			ld (debug_mark+1),a  
4dd3 3a dd 4d			ld a, (.dmark+2)  
4dd6 32 67 ee			ld (debug_mark+2),a  
4dd9 18 03			jr .pastdmark  
4ddb ..			.dmark: db "OUT"  
4dde f1			.pastdmark: pop af  
4ddf			endm  
# End of macro DMARK
4ddf						CALLMONITOR 
4ddf cd 6f ee			call debug_vector  
4de2				endm  
# End of macro CALLMONITOR
4de2					endif 
4de2			 
4de2 ed 69				out (c), l 
4de4			 
4de4					NEXTW 
4de4 c3 81 1f			jp macro_next 
4de7				endm 
# End of macro NEXTW
4de7			 
4de7			 
4de7			.SPIO: 
4de7			 
4de7			if STORAGE_SE 
4de7				CWHEAD .SPICEH 61 "SPICEL" 6 WORD_FLAG_CODE 
4de7			; | SPICEL ( -- ) Set SPI CE low for the currently selected device |  DONE 
4de7			 
4de7					call spi_ce_low 
4de7			    NEXTW 
4de7			 
4de7			.SPICEH: 
4de7				CWHEAD .SPIOb 61 "SPICEH" 6 WORD_FLAG_CODE 
4de7			; | SPICEH ( -- ) Set SPI CE high for the currently selected device |  DONE 
4de7			 
4de7					call spi_ce_high 
4de7			    NEXTW 
4de7			 
4de7			 
4de7			.SPIOb: 
4de7			 
4de7				CWHEAD .SPII 61 "SPIO" 4 WORD_FLAG_CODE 
4de7			; | SPIO ( u1 -- ) Send byte u1 to SPI  |  DONE 
4de7			 
4de7					if DEBUG_FORTH_WORDS_KEY 
4de7						DMARK "SPo" 
4de7						CALLMONITOR 
4de7					endif 
4de7					; get port 
4de7			 
4de7			 
4de7					; get byte to send 
4de7			 
4de7					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4de7			 
4de7			;		push hl    ; u1  
4de7			 
4de7					; destroy value TOS 
4de7			 
4de7					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4de7			 
4de7					; one value on hl get other one back 
4de7			 
4de7			;		pop hl   ; u2 - addr 
4de7			 
4de7					; TODO Send SPI byte 
4de7			 
4de7			;		push hl 
4de7			;		call spi_ce_low 
4de7			;		pop hl 
4de7					ld a, l 
4de7					call spi_send_byte 
4de7			;		call spi_ce_high 
4de7			 
4de7					NEXTW 
4de7			 
4de7			.SPII: 
4de7				CWHEAD .SESEL 62 "SPII" 5 WORD_FLAG_CODE 
4de7			; | SPII ( -- u1 ) Get a byte from SPI  | DONE 
4de7					if DEBUG_FORTH_WORDS_KEY 
4de7						DMARK "SPi" 
4de7						CALLMONITOR 
4de7					endif 
4de7			 
4de7					; TODO Get SPI byte 
4de7			 
4de7					call spi_read_byte 
4de7			 
4de7					if DEBUG_FORTH_WORDS 
4de7						DMARK "Si2" 
4de7						CALLMONITOR 
4de7					endif 
4de7					ld h, 0 
4de7					ld l, a 
4de7					if DEBUG_FORTH_WORDS 
4de7						DMARK "Si3" 
4de7						CALLMONITOR 
4de7					endif 
4de7					call forth_push_numhl 
4de7			 
4de7					NEXTW 
4de7			 
4de7			 
4de7			 
4de7			.SESEL: 
4de7				CWHEAD .CARTDEV 82 "BANK" 4 WORD_FLAG_CODE 
4de7			; | BANK ( u1 -- ) Select Serial EEPROM Bank Device at bank address u1 1-5 (disables CARTDEV). Set to zero to disable storage. | DONE 
4de7					if DEBUG_FORTH_WORDS_KEY 
4de7						DMARK "BNK" 
4de7						CALLMONITOR 
4de7					endif 
4de7			 
4de7					ld a, 255 
4de7					ld (spi_cartdev), a 
4de7			 
4de7					; get bank 
4de7			 
4de7					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4de7			 
4de7			;		push hl 
4de7			 
4de7					; destroy value TOS 
4de7			 
4de7					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4de7			 
4de7					; one value on hl get other one back 
4de7			 
4de7			;		pop hl 
4de7			 
4de7			 
4de7					ld c, SPI_CE_HIGH 
4de7					ld b, '0'    ; human readable bank number 
4de7			 
4de7					ld a, l 
4de7			 
4de7					if DEBUG_FORTH_WORDS 
4de7						DMARK "BNK" 
4de7						CALLMONITOR 
4de7					endif 
4de7			 
4de7					; active low 
4de7			 
4de7					cp 0 
4de7					jr z, .bset 
4de7					cp 1 
4de7					jr nz, .b2 
4de7					res 0, c 
4de7					ld b, '1'    ; human readable bank number 
4de7			.b2:		cp 2 
4de7					jr nz, .b3 
4de7					res 1, c 
4de7					ld b, '2'    ; human readable bank number 
4de7			.b3:		cp 3 
4de7					jr nz, .b4 
4de7					res 2, c 
4de7					ld b, '3'    ; human readable bank number 
4de7			.b4:		cp 4 
4de7					jr nz, .b5 
4de7					res 3, c 
4de7					ld b, '4'    ; human readable bank number 
4de7			.b5:		cp 5 
4de7					jr nz, .bset 
4de7					res 4, c 
4de7					ld b, '5'    ; human readable bank number 
4de7			 
4de7			.bset: 
4de7					ld a, c 
4de7					ld (spi_device),a 
4de7					ld a, b 
4de7					ld (spi_device_id),a 
4de7					if DEBUG_FORTH_WORDS 
4de7						DMARK "BN2" 
4de7						CALLMONITOR 
4de7					endif 
4de7			 
4de7					; set default SPI clk pulse time as disabled for BANK use 
4de7			 
4de7					ld a, 0 
4de7					ld (spi_clktime), a 
4de7			 
4de7					NEXTW 
4de7			 
4de7			.CARTDEV: 
4de7				CWHEAD .ENDDEVICE 82 "CARTDEV" 7 WORD_FLAG_CODE 
4de7			; | CARTDEV ( u1 -- ) Select cart device 1-8 (Disables BANK). Set to zero to disable devices. |  DONE 
4de7					if DEBUG_FORTH_WORDS_KEY 
4de7						DMARK "CDV" 
4de7						CALLMONITOR 
4de7					endif 
4de7			 
4de7					; disable se storage bank selection 
4de7			 
4de7					ld a, SPI_CE_HIGH		; ce high 
4de7					ld (spi_device), a 
4de7			 
4de7					; get bank 
4de7			 
4de7					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4de7			 
4de7			;		push hl 
4de7			 
4de7					; destroy value TOS 
4de7			 
4de7					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4de7			 
4de7					; one value on hl get other one back 
4de7			 
4de7			;		pop hl 
4de7			 
4de7					; active low 
4de7			 
4de7					ld c, 255 
4de7			 
4de7					ld a, l 
4de7					if DEBUG_FORTH_WORDS 
4de7						DMARK "CDV" 
4de7						CALLMONITOR 
4de7					endif 
4de7					cp 0 
4de7					jr z, .cset 
4de7					cp 1 
4de7					jr nz, .c2 
4de7					res 0, c 
4de7			.c2:		cp 2 
4de7					jr nz, .c3 
4de7					res 1, c 
4de7			.c3:		cp 3 
4de7					jr nz, .c4 
4de7					res 2, c 
4de7			.c4:		cp 4 
4de7					jr nz, .c5 
4de7					res 3, c 
4de7			.c5:		cp 5 
4de7					jr nz, .c6 
4de7					res 4, c 
4de7			.c6:		cp 6 
4de7					jr nz, .c7 
4de7					res 5, c 
4de7			.c7:		cp 7 
4de7					jr nz, .c8 
4de7					res 6, c 
4de7			.c8:		cp 8 
4de7					jr nz, .cset 
4de7					res 7, c 
4de7			.cset:		ld a, c 
4de7					ld (spi_cartdev),a 
4de7			 
4de7					if DEBUG_FORTH_WORDS 
4de7						DMARK "CD2" 
4de7						CALLMONITOR 
4de7					endif 
4de7			 
4de7					; set default SPI clk pulse time as 10ms for CARTDEV use 
4de7			 
4de7					ld a, $0a 
4de7					ld (spi_clktime), a 
4de7					NEXTW 
4de7			endif 
4de7			 
4de7			.ENDDEVICE: 
4de7			; eof 
4de7			 
# End of file forth_words_device.asm
4de7			 
4de7			; var handler 
4de7			 
4de7			 
4de7			.VARS: 
4de7				CWHEAD .V0 99 "VAR" 3 WORD_FLAG_CODE 
4de7 77				db WORD_SYS_CORE+99             
4de8 98 4e			dw .V0            
4dea 04				db 3 + 1 
4deb .. 00			db "VAR",0              
4def				endm 
# End of macro CWHEAD
4def			;| VAR ( u1 -- )  Get the address of the variable referenced on TOS  | TO TEST 
4def			;| 
4def			;| The variable name should consist of a single letter. e.g. "a" 
4def			;! If a full string is passed then only the first char is looked at 
4def			;| Any other char could exceed bounds checks!  
4def			 
4def					if DEBUG_FORTH_WORDS_KEY 
4def						DMARK "VAR" 
4def f5				push af  
4df0 3a 04 4e			ld a, (.dmark)  
4df3 32 65 ee			ld (debug_mark),a  
4df6 3a 05 4e			ld a, (.dmark+1)  
4df9 32 66 ee			ld (debug_mark+1),a  
4dfc 3a 06 4e			ld a, (.dmark+2)  
4dff 32 67 ee			ld (debug_mark+2),a  
4e02 18 03			jr .pastdmark  
4e04 ..			.dmark: db "VAR"  
4e07 f1			.pastdmark: pop af  
4e08			endm  
# End of macro DMARK
4e08						CALLMONITOR 
4e08 cd 6f ee			call debug_vector  
4e0b				endm  
# End of macro CALLMONITOR
4e0b					endif 
4e0b			 
4e0b					FORTH_DSP_VALUEHL 
4e0b cd 95 1d			call macro_dsp_valuehl 
4e0e				endm 
# End of macro FORTH_DSP_VALUEHL
4e0e			 
4e0e 7e					ld a, (hl)    ; get first char on of the string 
4e0f			 
4e0f			 
4e0f					if DEBUG_FORTH_WORDS 
4e0f						DMARK "VR1" 
4e0f f5				push af  
4e10 3a 24 4e			ld a, (.dmark)  
4e13 32 65 ee			ld (debug_mark),a  
4e16 3a 25 4e			ld a, (.dmark+1)  
4e19 32 66 ee			ld (debug_mark+1),a  
4e1c 3a 26 4e			ld a, (.dmark+2)  
4e1f 32 67 ee			ld (debug_mark+2),a  
4e22 18 03			jr .pastdmark  
4e24 ..			.dmark: db "VR1"  
4e27 f1			.pastdmark: pop af  
4e28			endm  
# End of macro DMARK
4e28						CALLMONITOR 
4e28 cd 6f ee			call debug_vector  
4e2b				endm  
# End of macro CALLMONITOR
4e2b					endif 
4e2b					 
4e2b f5					push af	 
4e2c					FORTH_DSP_POP 
4e2c cd 4d 1e			call macro_forth_dsp_pop 
4e2f				endm 
# End of macro FORTH_DSP_POP
4e2f f1					pop af 
4e30			 
4e30					; convert to upper 
4e30			 
4e30 cd 6a 10				call to_upper 
4e33					if DEBUG_FORTH_WORDS 
4e33						DMARK "Vaa" 
4e33 f5				push af  
4e34 3a 48 4e			ld a, (.dmark)  
4e37 32 65 ee			ld (debug_mark),a  
4e3a 3a 49 4e			ld a, (.dmark+1)  
4e3d 32 66 ee			ld (debug_mark+1),a  
4e40 3a 4a 4e			ld a, (.dmark+2)  
4e43 32 67 ee			ld (debug_mark+2),a  
4e46 18 03			jr .pastdmark  
4e48 ..			.dmark: db "Vaa"  
4e4b f1			.pastdmark: pop af  
4e4c			endm  
# End of macro DMARK
4e4c						CALLMONITOR 
4e4c cd 6f ee			call debug_vector  
4e4f				endm  
# End of macro CALLMONITOR
4e4f					endif 
4e4f 06 41				ld b, 'A' 
4e51 90					sub b			; set offset 
4e52					if DEBUG_FORTH_WORDS 
4e52						DMARK "Vbb" 
4e52 f5				push af  
4e53 3a 67 4e			ld a, (.dmark)  
4e56 32 65 ee			ld (debug_mark),a  
4e59 3a 68 4e			ld a, (.dmark+1)  
4e5c 32 66 ee			ld (debug_mark+1),a  
4e5f 3a 69 4e			ld a, (.dmark+2)  
4e62 32 67 ee			ld (debug_mark+2),a  
4e65 18 03			jr .pastdmark  
4e67 ..			.dmark: db "Vbb"  
4e6a f1			.pastdmark: pop af  
4e6b			endm  
# End of macro DMARK
4e6b						CALLMONITOR 
4e6b cd 6f ee			call debug_vector  
4e6e				endm  
# End of macro CALLMONITOR
4e6e					endif 
4e6e cb 27				sla a  
4e70				 
4e70					 
4e70					if DEBUG_FORTH_WORDS 
4e70						DMARK "VR2" 
4e70 f5				push af  
4e71 3a 85 4e			ld a, (.dmark)  
4e74 32 65 ee			ld (debug_mark),a  
4e77 3a 86 4e			ld a, (.dmark+1)  
4e7a 32 66 ee			ld (debug_mark+1),a  
4e7d 3a 87 4e			ld a, (.dmark+2)  
4e80 32 67 ee			ld (debug_mark+2),a  
4e83 18 03			jr .pastdmark  
4e85 ..			.dmark: db "VR2"  
4e88 f1			.pastdmark: pop af  
4e89			endm  
# End of macro DMARK
4e89						CALLMONITOR 
4e89 cd 6f ee			call debug_vector  
4e8c				endm  
# End of macro CALLMONITOR
4e8c					endif 
4e8c			 
4e8c 21 ee e9				ld hl, cli_var_array2 
4e8f cd f5 0d				call addatohl 
4e92 cd 90 1b				call forth_push_numhl 
4e95			 
4e95			 
4e95				       NEXTW 
4e95 c3 81 1f			jp macro_next 
4e98				endm 
# End of macro NEXTW
4e98			.V0: 
4e98				CWHEAD .V0Q 100 "V0!" 3 WORD_FLAG_CODE 
4e98 78				db WORD_SYS_CORE+100             
4e99 b0 4e			dw .V0Q            
4e9b 04				db 3 + 1 
4e9c .. 00			db "V0!",0              
4ea0				endm 
# End of macro CWHEAD
4ea0			;| V0! ( u1 -- )  Store value to v0  | DONE 
4ea0			 
4ea0					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4ea0 cd 95 1d			call macro_dsp_valuehl 
4ea3				endm 
# End of macro FORTH_DSP_VALUEHL
4ea3			 
4ea3 11 22 ea				ld de, cli_var_array 
4ea6			 
4ea6 eb					ex de, hl 
4ea7 73					ld (hl), e 
4ea8 23					inc hl 
4ea9 72					ld (hl), d 
4eaa			 
4eaa					; destroy value TOS 
4eaa			 
4eaa					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4eaa cd 4d 1e			call macro_forth_dsp_pop 
4ead				endm 
# End of macro FORTH_DSP_POP
4ead			 
4ead				       NEXTW 
4ead c3 81 1f			jp macro_next 
4eb0				endm 
# End of macro NEXTW
4eb0			.V0Q: 
4eb0				CWHEAD .V1S 101 "V0@" 3 WORD_FLAG_CODE 
4eb0 79				db WORD_SYS_CORE+101             
4eb1 c1 4e			dw .V1S            
4eb3 04				db 3 + 1 
4eb4 .. 00			db "V0@",0              
4eb8				endm 
# End of macro CWHEAD
4eb8			;| V0@ ( --u )  Put value of v0 onto stack | DONE 
4eb8 2a 22 ea				ld hl, (cli_var_array) 
4ebb cd 90 1b				call forth_push_numhl 
4ebe			 
4ebe				       NEXTW 
4ebe c3 81 1f			jp macro_next 
4ec1				endm 
# End of macro NEXTW
4ec1			.V1S: 
4ec1				CWHEAD .V1Q 102 "V1!" 3 WORD_FLAG_CODE 
4ec1 7a				db WORD_SYS_CORE+102             
4ec2 d9 4e			dw .V1Q            
4ec4 04				db 3 + 1 
4ec5 .. 00			db "V1!",0              
4ec9				endm 
# End of macro CWHEAD
4ec9			;| V1! ( u1 -- )  Store value to v1 | DONE 
4ec9					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4ec9 cd 95 1d			call macro_dsp_valuehl 
4ecc				endm 
# End of macro FORTH_DSP_VALUEHL
4ecc			 
4ecc 11 24 ea				ld de, cli_var_array+2 
4ecf				 
4ecf eb					ex de, hl 
4ed0 73					ld (hl), e 
4ed1 23					inc hl 
4ed2 72					ld (hl), d 
4ed3			 
4ed3					; destroy value TOS 
4ed3			 
4ed3					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4ed3 cd 4d 1e			call macro_forth_dsp_pop 
4ed6				endm 
# End of macro FORTH_DSP_POP
4ed6				       NEXTW 
4ed6 c3 81 1f			jp macro_next 
4ed9				endm 
# End of macro NEXTW
4ed9			.V1Q: 
4ed9				CWHEAD .V2S 103 "V1@" 3 WORD_FLAG_CODE 
4ed9 7b				db WORD_SYS_CORE+103             
4eda ea 4e			dw .V2S            
4edc 04				db 3 + 1 
4edd .. 00			db "V1@",0              
4ee1				endm 
# End of macro CWHEAD
4ee1			;| V1@ ( --u )  Put value of v1 onto stack | DONE 
4ee1 2a 24 ea				ld hl, (cli_var_array+2) 
4ee4 cd 90 1b				call forth_push_numhl 
4ee7				       NEXTW 
4ee7 c3 81 1f			jp macro_next 
4eea				endm 
# End of macro NEXTW
4eea			.V2S: 
4eea				CWHEAD .V2Q 104 "V2!" 3 WORD_FLAG_CODE 
4eea 7c				db WORD_SYS_CORE+104             
4eeb 02 4f			dw .V2Q            
4eed 04				db 3 + 1 
4eee .. 00			db "V2!",0              
4ef2				endm 
# End of macro CWHEAD
4ef2			;| V2! ( u1 -- )  Store value to v2 | DONE 
4ef2					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4ef2 cd 95 1d			call macro_dsp_valuehl 
4ef5				endm 
# End of macro FORTH_DSP_VALUEHL
4ef5			 
4ef5 11 26 ea				ld de, cli_var_array+4 
4ef8				 
4ef8 eb					ex de, hl 
4ef9 73					ld (hl), e 
4efa 23					inc hl 
4efb 72					ld (hl), d 
4efc			 
4efc					; destroy value TOS 
4efc			 
4efc					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4efc cd 4d 1e			call macro_forth_dsp_pop 
4eff				endm 
# End of macro FORTH_DSP_POP
4eff				       NEXTW 
4eff c3 81 1f			jp macro_next 
4f02				endm 
# End of macro NEXTW
4f02			.V2Q: 
4f02				CWHEAD .V3S 105 "V2@" 3 WORD_FLAG_CODE 
4f02 7d				db WORD_SYS_CORE+105             
4f03 13 4f			dw .V3S            
4f05 04				db 3 + 1 
4f06 .. 00			db "V2@",0              
4f0a				endm 
# End of macro CWHEAD
4f0a			;| V2@ ( --u )  Put value of v2 onto stack | DONE 
4f0a 2a 26 ea				ld hl, (cli_var_array+4) 
4f0d cd 90 1b				call forth_push_numhl 
4f10				       NEXTW 
4f10 c3 81 1f			jp macro_next 
4f13				endm 
# End of macro NEXTW
4f13			.V3S: 
4f13				CWHEAD .V3Q 104 "V3!" 3 WORD_FLAG_CODE 
4f13 7c				db WORD_SYS_CORE+104             
4f14 2b 4f			dw .V3Q            
4f16 04				db 3 + 1 
4f17 .. 00			db "V3!",0              
4f1b				endm 
# End of macro CWHEAD
4f1b			;| V3! ( u1 -- )  Store value to v3 | DONE 
4f1b					FORTH_DSP_VALUEHL     			; TODO skip type check and assume number.... lol 
4f1b cd 95 1d			call macro_dsp_valuehl 
4f1e				endm 
# End of macro FORTH_DSP_VALUEHL
4f1e			 
4f1e 11 28 ea				ld de, cli_var_array+6 
4f21				 
4f21 eb					ex de, hl 
4f22 73					ld (hl), e 
4f23 23					inc hl 
4f24 72					ld (hl), d 
4f25			 
4f25					; destroy value TOS 
4f25			 
4f25					FORTH_DSP_POP  ; TODO add stock underflow checks and throws  
4f25 cd 4d 1e			call macro_forth_dsp_pop 
4f28				endm 
# End of macro FORTH_DSP_POP
4f28				       NEXTW 
4f28 c3 81 1f			jp macro_next 
4f2b				endm 
# End of macro NEXTW
4f2b			.V3Q: 
4f2b				CWHEAD .END 105 "V3@" 3 WORD_FLAG_CODE 
4f2b 7d				db WORD_SYS_CORE+105             
4f2c 3c 4f			dw .END            
4f2e 04				db 3 + 1 
4f2f .. 00			db "V3@",0              
4f33				endm 
# End of macro CWHEAD
4f33			;| V3@ ( --u )  Put value of v3 onto stack | DONE 
4f33 2a 28 ea				ld hl, (cli_var_array+6) 
4f36 cd 90 1b				call forth_push_numhl 
4f39				       NEXTW 
4f39 c3 81 1f			jp macro_next 
4f3c				endm 
# End of macro NEXTW
4f3c			 
4f3c			 
4f3c			 
4f3c			 
4f3c			 
4f3c			; end of dict marker 
4f3c			 
4f3c 00			.END:    db WORD_SYS_END 
4f3d 00 00			dw 0 
4f3f 00				db 0 
4f40			 
4f40			; use to jp here for user dict words to save on macro expansion  
4f40			 
4f40			user_dict_next: 
4f40				NEXTW 
4f40 c3 81 1f			jp macro_next 
4f43				endm 
# End of macro NEXTW
4f43			 
4f43			 
4f43			user_exec: 
4f43				;    ld hl, <word code> 
4f43				;    FORTH_RSP_NEXT - call macro_forth_rsp_next 
4f43				;    call forthexec 
4f43				;    jp user_dict_next   (NEXT) 
4f43			        ;    <word code bytes> 
4f43 eb				ex de, hl 
4f44 2a bc e5			ld hl,(os_tok_ptr) 
4f47				 
4f47				FORTH_RSP_NEXT 
4f47 cd 37 1b			call macro_forth_rsp_next 
4f4a				endm 
# End of macro FORTH_RSP_NEXT
4f4a			 
4f4a			if DEBUG_FORTH_UWORD 
4f4a						DMARK "UEX" 
4f4a f5				push af  
4f4b 3a 5f 4f			ld a, (.dmark)  
4f4e 32 65 ee			ld (debug_mark),a  
4f51 3a 60 4f			ld a, (.dmark+1)  
4f54 32 66 ee			ld (debug_mark+1),a  
4f57 3a 61 4f			ld a, (.dmark+2)  
4f5a 32 67 ee			ld (debug_mark+2),a  
4f5d 18 03			jr .pastdmark  
4f5f ..			.dmark: db "UEX"  
4f62 f1			.pastdmark: pop af  
4f63			endm  
# End of macro DMARK
4f63				CALLMONITOR 
4f63 cd 6f ee			call debug_vector  
4f66				endm  
# End of macro CALLMONITOR
4f66			endif 
4f66			 
4f66			 
4f66			 
4f66 eb				ex de, hl 
4f67 22 bc e5			ld (os_tok_ptr), hl 
4f6a				 
4f6a				; Don't use next - Skips the first word in uword. 
4f6a			 
4f6a c3 0a 20			jp exec1 
4f6d			;	NEXT 
4f6d			 
4f6d			 
4f6d			; eof 
# End of file forth_wordsv4.asm
4f6d			endif 
4f6d			;;;;;;;;;;;;;; Debug code 
4f6d			 
4f6d			 
4f6d			;if DEBUG_FORTH_PARSE 
4f6d .. 00		.nowordfound: db "No match",0 
4f76 .. 00		.compword:	db "Comparing word ",0 
4f86 .. 00		.nextwordat:	db "Next word at",0 
4f93 .. 00		.charmatch:	db "Char match",0 
4f9e			;endif 
4f9e			if DEBUG_FORTH_JP 
4f9e			.foundword:	db "Word match. Exec..",0 
4f9e			endif 
4f9e			;if DEBUG_FORTH_PUSH 
4f9e .. 00		.enddict:	db "Dict end. Push.",0 
4fae .. 00		.push_str:	db "Pushing string",0 
4fbd .. 00		.push_num:	db "Pushing number",0 
4fcc .. 00		.data_sp:	db "SP:",0 
4fd0 .. 00		.wordinhl:	db "Word in HL (2/0):",0 
4fe2 .. 00		.wordinde:	db "Word in DE (3/0):",0 
4ff4 .. 00		.wordinbc:	db "Word in BC (4/0):",0 
5006			;endif 
5006			;if DEBUG_FORTH_MALLOC 
5006 .. 00		.push_malloc:	db "Malloc address",0 
5015			;endif 
5015			 
5015			 
5015			 
5015			; display malloc address and current data stack pointer  
5015			 
5015			malloc_error: 
5015 d5				push de 
5016 f5				push af 
5017 e5				push hl 
5018 cd c8 0b			call clear_display 
501b 11 3b 50			ld de, .mallocerr 
501e 3e 00			ld a,0 
5020			;	ld de,os_word_scratch 
5020 cd db 0b			call str_at_display 
5023 3e 11			ld a, display_row_1+17 
5025 11 65 ee			ld de, debug_mark 
5028 cd db 0b			call str_at_display 
502b cd eb 0b			call update_display 
502e				;call break_point_state 
502e cd 9e 61			call cin_wait 
5031			 
5031			;	ld a, ' ' 
5031			;	ld (os_view_disable), a 
5031 cd ff 14			call bp_on 
5034 e1				pop hl 
5035 f1				pop af 
5036 d1				pop de	 
5037				CALLMONITOR 
5037 cd 6f ee			call debug_vector  
503a				endm  
# End of macro CALLMONITOR
503a c9				ret 
503b			 
503b .. 00		.mallocerr: 	db "Malloc Error",0 
5048			;if DEBUG_FORTH_PUSH 
5048			display_data_sp: 
5048 f5				push af 
5049			 
5049				; see if disabled 
5049			 
5049			 
5049 3a 6f ee			ld a, (debug_vector) 
504c fe c9			cp $C9  ; RET 
504e				;ld a, (os_view_disable) 
504e				;cp '*' 
504e 28 67			jr z, .skipdsp 
5050			 
5050 e5				push hl 
5051 e5				push hl 
5052 e5			push hl 
5053 cd c8 0b			call clear_display 
5056 e1			pop hl 
5057 7c				ld a,h 
5058 21 c0 e5			ld hl, os_word_scratch 
505b cd fe 0f			call hexout 
505e e1				pop hl 
505f 7d				ld a,l 
5060 21 c2 e5			ld hl, os_word_scratch+2 
5063 cd fe 0f			call hexout 
5066 21 c4 e5			ld hl, os_word_scratch+4 
5069 3e 00			ld a,0 
506b 77				ld (hl),a 
506c 11 c0 e5			ld de,os_word_scratch 
506f 3e 28				ld a, display_row_2 
5071 cd db 0b				call str_at_display 
5074 11 d0 4f			ld de, .wordinhl 
5077 3e 00			ld a, display_row_1 
5079			 
5079 cd db 0b				call str_at_display 
507c 11 65 ee			ld de, debug_mark 
507f 3e 11			ld a, display_row_1+17 
5081			 
5081 cd db 0b				call str_at_display 
5084			 
5084				; display current data stack pointer 
5084 11 cc 4f			ld de,.data_sp 
5087 3e 30				ld a, display_row_2 + 8 
5089 cd db 0b				call str_at_display 
508c			 
508c 2a e8 e9			ld hl,(cli_data_sp) 
508f e5				push hl 
5090 7c				ld a,h 
5091 21 c0 e5			ld hl, os_word_scratch 
5094 cd fe 0f			call hexout 
5097 e1				pop hl 
5098 7d				ld a,l 
5099 21 c2 e5			ld hl, os_word_scratch+2 
509c cd fe 0f			call hexout 
509f 21 c4 e5			ld hl, os_word_scratch+4 
50a2 3e 00			ld a,0 
50a4 77				ld (hl),a 
50a5 11 c0 e5			ld de,os_word_scratch 
50a8 3e 33				ld a, display_row_2 + 11 
50aa cd db 0b				call str_at_display 
50ad			 
50ad			 
50ad cd eb 0b			call update_display 
50b0 cd 00 0b			call delay1s 
50b3 cd 00 0b			call delay1s 
50b6 e1				pop hl 
50b7			.skipdsp: 
50b7 f1				pop af 
50b8 c9				ret 
50b9			 
50b9			display_data_malloc: 
50b9			 
50b9 f5				push af 
50ba e5				push hl 
50bb e5				push hl 
50bc e5			push hl 
50bd cd c8 0b			call clear_display 
50c0 e1			pop hl 
50c1 7c				ld a,h 
50c2 21 c0 e5			ld hl, os_word_scratch 
50c5 cd fe 0f			call hexout 
50c8 e1				pop hl 
50c9 7d				ld a,l 
50ca 21 c2 e5			ld hl, os_word_scratch+2 
50cd cd fe 0f			call hexout 
50d0 21 c4 e5			ld hl, os_word_scratch+4 
50d3 3e 00			ld a,0 
50d5 77				ld (hl),a 
50d6 11 c0 e5			ld de,os_word_scratch 
50d9 3e 28				ld a, display_row_2 
50db cd db 0b				call str_at_display 
50de 11 06 50			ld de, .push_malloc 
50e1 3e 00			ld a, display_row_1 
50e3			 
50e3 cd db 0b				call str_at_display 
50e6			 
50e6				; display current data stack pointer 
50e6 11 cc 4f			ld de,.data_sp 
50e9 3e 30				ld a, display_row_2 + 8 
50eb cd db 0b				call str_at_display 
50ee			 
50ee 2a e8 e9			ld hl,(cli_data_sp) 
50f1 e5				push hl 
50f2 7c				ld a,h 
50f3 21 c0 e5			ld hl, os_word_scratch 
50f6 cd fe 0f			call hexout 
50f9 e1				pop hl 
50fa 7d				ld a,l 
50fb 21 c2 e5			ld hl, os_word_scratch+2 
50fe cd fe 0f			call hexout 
5101 21 c4 e5			ld hl, os_word_scratch+4 
5104 3e 00			ld a,0 
5106 77				ld (hl),a 
5107 11 c0 e5			ld de,os_word_scratch 
510a 3e 33				ld a, display_row_2 + 11 
510c cd db 0b				call str_at_display 
510f			 
510f cd eb 0b			call update_display 
5112 cd 00 0b			call delay1s 
5115 cd 00 0b			call delay1s 
5118 e1				pop hl 
5119 f1				pop af 
511a c9				ret 
511b			;endif 
511b			 
511b			include "forth_autostart.asm" 
511b			; list of commands to perform at system start up 
511b			 
511b			startcmds: 
511b			;	dw test11 
511b			;	dw test12 
511b			;	dw test13 
511b			;	dw test14 
511b			;	dw test15 
511b			;	dw test16 
511b			;	dw test17 
511b			;	dw ifthtest1 
511b			;	dw ifthtest2 
511b			;	dw ifthtest3 
511b			;	dw mmtest1 
511b			;	dw mmtest2 
511b			;	dw mmtest3 
511b			;	dw mmtest4 
511b			;	dw mmtest5 
511b			;	dw mmtest6 
511b			;	dw iftest1 
511b			;	dw iftest2 
511b			;	dw iftest3 
511b			;	dw looptest1 
511b			;	dw looptest2 
511b			;	dw test1 
511b			;	dw test2 
511b			;	dw test3 
511b			;	dw test4 
511b			;	dw game2r 
511b			;	dw game2b1 
511b			;	dw game2b2 
511b			 
511b				; start up words that are actually useful 
511b			 
511b			;    dw spi1 
511b			;    dw spi2 
511b			;    dw spi3 
511b			;    dw spi4 
511b			;    dw spi5 
511b			;    dw spi6 
511b			;    dw spi7 
511b			; 
511b			;    dw spi8 
511b			;    dw spi9 
511b			;    dw spi10 
511b			 
511b			; file editor 
511b			;	dw edit1 
511b			;	dw edit2 
511b			;	dw edit3 
511b			 
511b			;	dw longread 
511b 3d 55			dw clrstack 
511d 71 55			dw type 
511f			;	dw stest 
511f 96 55			dw strncpy 
5121 06 57			dw list 
5123 f7 55			dw start1 
5125 07 56			dw start2 
5127			;	dw start3 
5127			;	dw start3b 
5127			;	dw start3c 
5127			 
5127				; (unit) testing words 
5127			 
5127			;	dw mtesta 
5127			;	dw mtestb 
5127			;	dw mtestc 
5127			;	dw mtestd 
5127			;	dw mteste 
5127			 
5127				; demo/game words 
5127			 
5127			;        dw game3w 
5127			;        dw game3p 
5127			;        dw game3sc 
5127			;        dw game3vsi 
5127			;        dw game3vs 
5127				 
5127			;	dw game2b 
5127			;	dw game2bf 
5127			;	dw game2mba 
5127			;	dw game2mbas 
5127			;	dw game2mb 
5127			 
5127 37 59			dw game1 
5129 48 59			dw game1a 
512b aa 59			dw game1b 
512d df 59			dw game1c 
512f 15 5a			dw game1d 
5131 46 5a			dw game1s 
5133 5a 5a			dw game1t 
5135 6f 5a			dw game1f 
5137 a3 5a			dw game1z 
5139 e7 5a			dw game1zz 
513b			 
513b 70 57			dw test5 
513d a8 57			dw test6 
513f e0 57			dw test7 
5141 f4 57			dw test8 
5143 20 58			dw test9 
5145 36 58			dw test10 
5147				 
5147 be 5b		        dw ssv5 
5149 a2 5b		        dw ssv4 
514b 86 5b		        dw ssv3 
514d 50 5b		        dw ssv2 
514f d7 5b		        dw ssv1 
5151 1f 5c		        dw ssv1cpm 
5153			;	dw keyup 
5153			;	dw keydown 
5153			;	dw keyleft 
5153			;	dw keyright 
5153			;	dw 	keyf1 
5153			;	dw keyf2 
5153			;	dw keyf3 
5153			;	dw keyf4 
5153			;	dw keyf5 
5153			;	dw keyf6 
5153			;	dw keyf7 
5153			;	dw keyf8 
5153			;	dw keyf9 
5153			;	dw keyf10 
5153			;	dw keyf11 
5153			;	dw keyf12 
5153			;	dw keytab 
5153			;	dw keycr 
5153			;	dw keyhome 
5153			;	dw keyend 
5153			;	dw keybs 
5153 00 00			db 0, 0	 
5155			 
5155			 
5155			; File Editor 
5155			 
5155			; ( id - ) use 'e' to edit the displayed line 
5155 .. 00		edit1: db ": edc waitk $65 = if ede then ; ", 0 
5176 .. 00		edit2: db ": ede storepage ptr $02 + cls dedit filepage bupd ; ", 0 
51ab			;edit2: db ": ede v1@ v0@ record drop storepage ptr $02 + cls dedit filepage bupd ; ", 0 
51ab .. 00		edit3: db ": ed dup v0! open $01 do i v0@ record cls . edc loop ; ",0 
51e3			;edit3: db ": ed dup v0! open $01 do i v0@ record cls . i v1! edc loop ; ",0 
51e3			 
51e3			; SPI Net support words 
51e3			 
51e3			; v0! = node to send to 
51e3			; ( str count - ) 
51e3 .. 00		spi1:       db ": spitype spiceh $00 do dup i + @ v0@ spicel $10 spio spio spio spiceh $01 pause loop ; ",0 
523c			 
523c			; spiputc ( char node - ) 
523c .. 00		spi2:       db ": spiputc spicel $10 spio spio ptr @ spio spiceh ; ",0 
5270			; spiputc ( u node - ) 
5270 .. 00		spi2b:       db ": spiputb spicel $10 spio spio spio spiceh ; ",0 
529e			 
529e			; spigetc ( - n ) 
529e .. 00		spi4:       db ": spigetc spicel $11 spio spii spiceh ; ", 0 
52c7			 
52c7			; getnode ( - n ) 
52c7 .. 00		spi5:       db ": getnode spicel $18 spio spii nop spiceh ; ", 0 
52f4			 
52f4			; ( str node - )  
52f4 .. 00		spi3:       db ": sendnode v0! count spiceh $00 do dup i + @ v0@ spicel $10 spio spio spio spiceh $01 pause loop ; ; ",0 
535a			; store string ( str i - ) 
535a			 
535a			;spi3:       db ": storestrold spicel $03 spio spio ptr count clkstro spiceh ; ", 0 
535a .. 00		spi6:       db ": storestr spicel $12 spio spio count $00 do dup i + @ spio $01 pause loop spiceh ; ", 0 
53af			 
53af			; get string ( addr i -  )    TO FIX 
53af			 
53af .. 00		spi7:       db ": getstorestr spicel $13 spio spio \" \" repeat spii dup concat $00 = not until spiceh ; ", 0 
5407			 
5407			 
5407			; NETCHAT (TODO) 
5407			; Program to allow two nodes to chat with eachother 
5407			; 
5407			; v0 - target node 
5407			;  
5407			; accept input at 0,0 
5407			; if input is string send spitype to target node 
5407			; starting at row 2,0 , while spigetchr is not zero ->  
5407			; 
5407			; 
5407			; TODO add paging of get request 
5407			 
5407			; ( node - ) 
5407 .. 00		spi8:		db ": netchatp $00 $00 at accept ;", 0 
5426 .. 00		spi9: 		db ": netchatr repeat spigetchr dup dup $00 = not if emit then $00 = not until $02 pause ; ",0 
547e .. 00		spi10:		db ": netchat v0! repeat netchatp count dup $00 > if spitype $01 pause then cls $00 $03 at \">\" . netchatr true until nop ; ", 0 
54f6			 
54f6			 
54f6			; Long read of currently open file 
54f6 .. 00		longread:   db ": lread read repeat readcont if read concat then readcont until nop ; ", 0 
553d			 
553d			; clear stack  
553d			 
553d .. 00		clrstack:  db ": clrstk depth ?dup if $01 do drop loop then nop ; ", 0 
5571			 
5571			; type ( addr count - ) 
5571 .. 00		type:     db ": type $00 do dup i + @ emit loop ; ", 0 
5596			 
5596			; some direct memory words 
5596			; strncpy ( len t f -- t ) 
5596			 
5596 .. 00		strncpy:   db ": strncpy $00 scratch 2! $02 scratch 2! do $00 scratch 2@ i + @ $02 scratch 2@ i + ! loop nop  ;",0 
55f7			 
55f7 .. 00		start1:     	db ": bpon $00 bp ;",0 
5607 .. 00		start2:     	db ": bpoff $01 bp ;",0 
5618 .. 00		start3b:         db ": ls dir cls drop dup $00 > if $01 do $08 $04 at . $01 $04 at . $04 $04 at . $23 $04 at accept drop scroll loop then nop ;",0 
5693 .. 00		start3c:         db ": dirlist dir cls drop dup $00 > if $01 do \"/\" .> .> \"Ext:\" .> .> \"Id: \" .> .>  loop then nop ;",0 
56f3			 
56f3 .. 00		tuck:         db ": tuck swap over ;", 0 
5706			 
5706			; a handy word to list items on the stack 
5706			 
5706 .. 00		list:            db ": more cls repeat scroll $01 $04 at depth . $0a $04 at .> $01 $01 at accept drop depth 0= not until nop ;",0 
5770			 
5770			 
5770			; test stack  
5770			; rnd8 stest 
5770			 
5770			;stest:   db ": stest cls  v0! v0@ $00 do rnd8 $01 $01 at i . $01 pause loop v0@ $00 do drop $12 $01 at depth . $01 pause loop nop ;",0  
5770			 
5770			; random malloc and free cycles 
5770			 
5770			;mtesta:      db ": mtesta $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . rnd8 dup $13 $01 at . malloc heap $1f $01 at . $1f $02 at . $01 pause free $01 until nop ;", 0 
5770			 
5770			; fixed malloc and free cycles 
5770			 
5770			;mtestb:      db ": mtestb $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 malloc heap $1f $01 at . $1f $02 at . $01 pause free $01 until nop ;", 0 
5770			 
5770			; fixed double string push and drop cycle  
5770			 
5770			;mtestc:      db ": mtestc $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 spaces $2f spaces  heap $1f $01 at . $1f $02 at . $01 pause drop drop $01 until nop ; ", 0 
5770			 
5770			; consistent fixed string push and drop cycle  
5770			 
5770			;mtestd:      db ": mtestd $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . $80 spaces heap $1f $01 at . $1f $02 at . $01 pause drop $01 until nop ; ", 0 
5770			 
5770			;mteste:      db ": mteste $01 v0! repeat heap cls $01 $01 at v0@ . v0@ $01 + v0! $08 $01 at . $08 $02 at . rnd8 dup spaces $0f $02 at . heap $1f $01 at . $1f $02 at . $01 pause drop $01 until nop ; ", 0 
5770			 
5770			;test1:		db ": aa 1 2 3 ;", 0 
5770			;test2:     	db "111 aa 888 999",0 
5770			;test3:     	db ": bb 77 ;",0 
5770			;test4:     	db "$02 $01 do i . loop bb",0 
5770			 
5770 .. 00		test5:     	db ": hline $13 $00 do i $01 at 1 . i $04 at 1 . loop nop ;",0 
57a8 .. 00		test6:     	db ": vline $04 $01 do $00 i at 1 . $13 i at 1 . loop nop ;",0 
57e0 .. 00		test7:     	db ": box hline vline ;",0 
57f4 .. 00		test8:     	db ": world cls box $03 $03 at Hello-World! . ;",0 
5820 .. 00		test9:     	db ": sw $01 adsp world ;",0 
5836 .. 00		test10:     	db ": fw $00 adsp world draw $05 pause ;",0 
585b			;test11:     	db "hello create .",0 
585b			;test12:     	db "hello2 create .",0 
585b			 
585b			;mmtest1:     	db "cls $0001 $0008 MIN . $0002 pause",0 
585b			;mmtest2:     	db "cls $0101 $0008 MIN . $0002 pause",0 
585b			;mmtest3:     	db "cls $0001 $0008 MAX . $0002 pause",0 
585b			;mmtest4:     	db "cls $0101 $0008 MAX . $0002 pause",0 
585b			;mmtest5:     	db "cls $0001 $0001 MIN . $0002 pause",0 
585b			;mmtest6:     	db "cls $0001 $0001 MAX . $0002 pause",0 
585b			 
585b			;iftest1:     	db "$0001 IF cls .",0 
585b			;iftest2:     	db "$0000 IF cls .",0 
585b			;iftest3:     	db "$0002 $0003 - IF cls .",0 
585b			;looptest1:     	db "$0003 $0001 do i . loop 8",0 
585b			;looptest2:     	db "$0003 $0001 do i . $0001 pause loop 8",0 
585b			 
585b			;ifthtest1:     	db "$0001 IF is-true . $0005 pause THEN next-word . $0005 pause",0 
585b			;ifthtest2:     	db "$0000 IF is-true . $0005 pause THEN next-word . $0005 pause",0 
585b			;ifthtest3:     	db "$0002 $0003 - IF is-true . $0005 pause THEN next-word . $0005 pause",0 
585b			 
585b			 
585b .. 00		sound1: db ": note spicel spio spiceh spicel ; ",0 
587f .. 00		sound2: db ": slient $9f note $bf note $df note $ff note ; ", 0 
58af .. 00		sound3: db ": sound $01 cartdev $00 spitime ! ; ",0 
58d4 .. 00		sound4: db ": cha $00 ; ",0 
58e1 .. 00		sound5: db ": chb $20 ; ",0 
58ee .. 00		sound6: db ": chc $40 ; ",0 
58fb .. 00		sound7: db ": chd $60 ; ",0 
5908 .. 00		sound8: db ": cnote $80 + + note ; ", 0 
5920 .. 00		sound9: db ": cvol $90 + + note ; ", 0 
5937			 
5937			 
5937			 
5937			 
5937			; a small guess the number game 
5937			 
5937 .. 00		game1:          db ": gsn rnd8 v1! ;",0 
5948 .. 00		game1a:          db ": gs $00 $00 at Enter-a-number .- $00 $02 at between-1-and-255 .- $00 $03 at accept str2num v2! ;",0 
59aa			 
59aa .. 00		game1b:          db ": gcb v2@ v1@ < if $00 $00 at Too-low! .- $01 then ;",0 
59df .. 00		game1c:          db ": gcc v2@ v1@ > if $00 $00 at Too-high! .- $01 then ;",0 
5a15 .. 00		game1d:          db ": gcd v2@ v1@ = if $00 $00 at Yes! .- $00 then ;",0 
5a46 .. 00		game1s:          db ": gck gcb gcc gcd ;",0 
5a5a .. 00		game1t:          db ": sc v3@ $01 + v3! ;",0 
5a6f .. 00		game1f:          db ": fsc v3@ cls $01 $01 at You-Took .- $02 $03 at . ;",0 
5aa3 .. 00		game1z:         db ": ga $00 v3! gsn repeat cls gs cls gck $02 pause sc until fsc nop ;",0 
5ae7			 
5ae7			; Using 'ga' save a high score across multiple runs using external storage 
5ae7			 
5ae7 .. 00		game1zz:         db ": gas ga $01 bank $80 bread $01 $04 at Prev-Score .> storepage ptr $02 + dup 2@ . v3@ swap 2! $80 bupd ;",0 
5b50			 
5b50			 
5b50			;game2r:          db ": m2r rnd8 v1! ;  ",0, 0, 0, FORTH_END_BUFFER 
5b50			;game2b1:          db ": m2b1 $1f $00 do i v2@ at rnd8 $30 < if A . then loop nop ;  ",0, 0, 0, FORTH_END_BUFFER 
5b50			;game2b2:          db ": m2b cls $04 $01 do i v2! m2b1 loop ;  ",0, 0, 0, FORTH_END_BUFFER 
5b50			 
5b50			; simple screen saver to test code memory reuse to destruction 
5b50			 
5b50 .. 00		ssv2:            db ": ssvchr $2a $2d rnd dup $2c = if drop $20 then nop ;",0 
5b86 .. 00		ssv3:            db ": ssvposx $01 $27 rnd v0! ;",0 
5ba2 .. 00		ssv4:            db ": ssvposy $01 $05 rnd v1! ;",0 
5bbe .. 00		ssv5:            db ": ssvt ssvposx ssvposy ;",0 
5bd7 .. 00		ssv1:          db ": ssv cls repeat ssvposx ssvposy v0@ v1@ at ssvchr emit $01 until nop ;",0 
5c1f .. 00		ssv1cpm:          db ": ssvcpm cls repeat ssvposx ssvposy v0@ v1@ at ssvchr emit $01 pausems $01 until nop ;",0 
5c76			;ssv1:          db ": ssv cls repeat ssvt v0@ v1@ at ssvchr emit $01 until nop ;",0 
5c76			;ssv1:          db ": ssv ssvposx ssvposy at ssvchr ;",0 
5c76			;ssv1:            db ": ssv repeat ssvpos rnd8 $10 if               $01 until nop ;",0 
5c76			;ssv2:            db ": ssvchr v0! v1! at? ;",0 
5c76			;ssv5:            db ": ssvt ssvposx ssvposy v0@ .> v1@ .> ;",0 
5c76			;ssv2:            db ": ssvchr $2a $2d rnd  ;",0 
5c76			 
5c76			 
5c76			 
5c76			; minesweeper/battleship finding game 
5c76			; draws a game board of random ship/mine positions 
5c76			; user enters coords to see if it hits on 
5c76			; game ends when all are hit 
5c76			; when hit or miss says how many may be in the area 
5c76			 
5c76			; setup the game board and then hide it 
5c76			;game2b:          db ": mbsetup $02 fb cls $04 $01 do i v2! $10 $01 do i v2@ at rnd8 $30 < if A . then loop loop $05 pause $01 fb ;",0 
5c76			;game2bf:         db ": mbsetupf cls $04 $01 do i v2! $10 $01 do i v2@ at \"+\" . loop loop nop ;",0 
5c76			;; prompt for where to target 
5c76			;game2mba:        db ": mbp $12 $04 at Turns .> v3@ . $12 $03 at Score .> v0@ . $12 $01 at Enter-X-__ .- $1a $01 at accept $12 $02 at Enter-Y-__ .- $1a $02 at accept nop ;", 0  
5c76			;game2mbas:        db ": mbsv str2num v2! str2num v1! nop ;", 0  
5c76			;; TODO see if the entered coords hits or misses pushes char hit of miss 
5c76			;game2mbht:      db ": mbckht nop ;",0 
5c76			;game2mbms:      db ": mbcms nop ;",0 
5c76			; TODO how many might be near by 
5c76			;game2mb:          db ": mb $00 v0! $00 v3! mbsetup mbsetupf repeat mbp mbsv $02 fb mbckht mbcms v1@ v2@ at@ $01 fb v1@ v2@ at emit $01 until nop ;",0 
5c76			 
5c76			; Game 3 
5c76			 
5c76			; Vert scroller ski game - avoid the trees! 
5c76			 
5c76			; v0 score (ie turns) 
5c76			; v1 player pos 
5c76			; v2 left wall 
5c76			; v3 right wall 
5c76			 
5c76			; Draw side walls randomly 
5c76			 
5c76			;game3w:   db ": vsw v2@ $04 at \"|\" . v3@ $04 at \"|\" . nop ;", 0 
5c76			 
5c76			; Draw player 
5c76			;game3p:   db ": vsp v1@ $01 at \"V\" . nop ; ", 0 
5c76			 
5c76			; TODO Get Key 
5c76			 
5c76			; TODO Move left right 
5c76			 
5c76			; scroll and move walls a bit 
5c76			 
5c76			;game3sc:  db ": vsscl v2@ $01 + v2! v3@ $01 - v3! scroll nop ;", 0 
5c76			 
5c76			; main game loop 
5c76			 
5c76			;game3vsi:    db ": vsi $00 v0! $01 v2! $12 v3! $06 v1! nop ;",0 
5c76			;game3vs:    db ": vs vsi repeat vsw vsp vsscl $05 pause scroll $01 until nop ;",0 
5c76			 
5c76			; key board defs 
5c76			 
5c76 .. 00		keyup:       db ": keyup $05 ;",0 
5c84 .. 00		keydown:       db ": keydown $0a ;",0 
5c94 .. 00		keyleft:       db ": keyleft $0b ;",0 
5ca4 .. 00		keyright:       db ": keyright $0c ;",0 
5cb5 .. 00		keyf1:       db ": keyf1 $10 ;",0 
5cc3 .. 00		keyf2:       db ": keyf2 $11 ;",0 
5cd1 .. 00		keyf3:       db ": keyf3 $12 ;",0 
5cdf .. 00		keyf4:       db ": keyf4 $13 ;",0 
5ced .. 00		keyf5:       db ": keyf5 $14 ;",0 
5cfb .. 00		keyf6:       db ": keyf6 $15 ;",0 
5d09 .. 00		keyf7:       db ": keyf7 $16 ;",0 
5d17 .. 00		keyf8:       db ": keyf8 $17 ;",0 
5d25 .. 00		keyf9:       db ": keyf9 $18 ;",0 
5d33 .. 00		keyf10:       db ": keyf10 $19 ;",0 
5d42 .. 00		keyf11:       db ": keyf11 $1a ;",0 
5d51 .. 00		keyf12:       db ": keyf12 $1b ;",0 
5d60			 
5d60 .. 00		keytab:       db ": keytab $09 ;",0 
5d6f .. 00		keycr:       db ": keycr $0d ;",0 
5d7d .. 00		keyhome:       db ": keyhome $0e ;",0 
5d8d .. 00		keyend:       db ": keyend $0f ;",0 
5d9c .. 00		keybs:       db ": keybs $08 ;",0 
5daa			 
5daa			   
5daa			 
5daa			 
5daa			 
5daa			; eof 
# End of file forth_autostart.asm
5daa			 
5daa			 
5daa			 
5daa			; stack over and underflow checks 
5daa			 
5daa			; init the words to detect the under/overflow 
5daa			 
5daa			chk_stk_init: 
5daa				; a vague random number to check so we dont get any "lucky" hits 
5daa 3e 2d			ld a, 45 
5dac 6f				ld l, a 
5dad 00				nop 
5dae 3e 17			ld a, 23 
5db0 67				ld h, a 
5db1			 
5db1 22 97 e2			ld (chk_word), hl     ; the word we need to check against 
5db4			 
5db4			;	ld (chk_stund), hl	; stack points.... 
5db4 22 00 ef			ld (chk_stovr), hl 
5db7 22 e6 e9			ld (chk_ret_und), hl 
5dba 22 a4 e9			ld (chk_ret_ovr), hl 
5dbd 22 22 e9			ld (chk_loop_ovr), hl 
5dc0 22 20 e8			ld (chk_data_ovr), hl 
5dc3 c9				ret 
5dc4				 
5dc4			check_stacks: 
5dc4				; check all stack words 
5dc4			 
5dc4 e5				push hl 
5dc5 d5				push de 
5dc6			 
5dc6			;	ld de,(chk_word) 
5dc6			;	ld hl, (chk_stund)	; stack points.... 
5dc6			;	if DEBUG_STK_FAULT 
5dc6			;		DMARK "FAa" 
5dc6			;		CALLMONITOR 
5dc6			;	endif 
5dc6			;	call cmp16 
5dc6			;	jp z, .chk_faulta 
5dc6			; 
5dc6			;	ld de, sfaultsu 
5dc6			;	jp .chk_fault 
5dc6			 
5dc6 2a 00 ef		.chk_faulta: ld hl, (chk_stovr) 
5dc9 ed 5b 97 e2		ld de,(chk_word) 
5dcd				if DEBUG_STK_FAULT 
5dcd					DMARK "FAb" 
5dcd					CALLMONITOR 
5dcd				endif 
5dcd cd 13 0e			call cmp16 
5dd0 28 06			jr z, .chk_fault1 
5dd2 11 76 5e			ld de, sfaultso 
5dd5 c3 27 5e			jp .chk_fault 
5dd8			.chk_fault1:  
5dd8 2a e6 e9			ld hl, (chk_ret_und) 
5ddb ed 5b 97 e2		ld de,(chk_word) 
5ddf				if DEBUG_STK_FAULT 
5ddf					DMARK "FAU" 
5ddf					CALLMONITOR 
5ddf				endif 
5ddf cd 13 0e			call cmp16 
5de2 ca eb 5d			jp z, .chk_fault2 
5de5 11 86 5e			ld de, sfaultru 
5de8 c3 27 5e			jp .chk_fault 
5deb			.chk_fault2:  
5deb 2a a4 e9			ld hl, (chk_ret_ovr) 
5dee ed 5b 97 e2		ld de,(chk_word) 
5df2				if DEBUG_STK_FAULT 
5df2					DMARK "FA1" 
5df2					CALLMONITOR 
5df2				endif 
5df2 cd 13 0e			call cmp16 
5df5 ca fe 5d			jp z, .chk_fault3 
5df8 11 94 5e			ld de, sfaultro 
5dfb c3 27 5e			jp .chk_fault 
5dfe			.chk_fault3:  
5dfe 2a 22 e9			ld hl, (chk_loop_ovr) 
5e01 ed 5b 97 e2		ld de,(chk_word) 
5e05				if DEBUG_STK_FAULT 
5e05					DMARK "FA2" 
5e05					CALLMONITOR 
5e05				endif 
5e05 cd 13 0e			call cmp16 
5e08 ca 11 5e			jp z, .chk_fault4 
5e0b 11 ae 5e			ld de, sfaultlo 
5e0e c3 27 5e			jp .chk_fault 
5e11			.chk_fault4:  
5e11 2a 20 e8			ld hl, (chk_data_ovr) 
5e14 ed 5b 97 e2		ld de,(chk_word) 
5e18				if DEBUG_STK_FAULT 
5e18					DMARK "FA3" 
5e18					CALLMONITOR 
5e18				endif 
5e18 cd 13 0e			call cmp16 
5e1b ca 24 5e			jp z, .chk_fault5 
5e1e 11 c8 5e			ld de, sfaultdo 
5e21 c3 27 5e			jp .chk_fault 
5e24			 
5e24			 
5e24			.chk_fault5:  
5e24 d1				pop de 
5e25 e1				pop hl 
5e26			 
5e26 c9				ret 
5e27			 
5e27 cd c8 0b		.chk_fault: 	call clear_display 
5e2a 3e 28				ld a, display_row_2 
5e2c cd db 0b				call str_at_display 
5e2f 11 58 5e				   ld de, .stackfault 
5e32 3e 00				ld a, display_row_1 
5e34 cd db 0b				call str_at_display 
5e37 11 65 ee				    ld de, debug_mark 
5e3a 3e 11				ld a, display_row_1+17 
5e3c cd db 0b				call str_at_display 
5e3f cd eb 0b				call update_display 
5e42			 
5e42				; prompt before entering montior for investigating issue 
5e42			 
5e42 3e 78			ld a, display_row_4 
5e44 11 6e 18			ld de, endprog 
5e47			 
5e47 cd eb 0b			call update_display		 
5e4a			 
5e4a cd 08 1b			call next_page_prompt 
5e4d			 
5e4d d1				pop de 
5e4e e1				pop hl 
5e4f cd c2 18				call monitor 
5e52 cd 27 1f				call forth_warmstart 
5e55 c3 be 17				jp warmstart_afterauto 
5e58					;jp 0 
5e58					;halt 
5e58			 
5e58			 
5e58			 
5e58 .. 00		.stackfault: 	db "Stack fault:",0 
5e65			 
5e65 .. 00		sfaultsu: 	db	"Stack under flow",0 
5e76 .. 00		sfaultso: 	db	"Stack over flow",0 
5e86 .. 00		sfaultru:	db "RTS underflow",0 
5e94 .. 00		sfaultro:	db "RTS overflow/LS underflow", 0 
5eae .. 00		sfaultlo:	db "LS overflow/DTS underflow", 0 
5ec8 .. 00		sfaultdo:	db "DTS overflow", 0 
5ed5			 
5ed5			 
5ed5			fault_dsp_under: 
5ed5 11 e7 5e			ld de, .dsp_under 
5ed8 c3 9d 5f			jp .show_fault 
5edb			 
5edb			fault_rsp_under: 
5edb 11 f5 5e			ld de, .rsp_under 
5ede c3 9d 5f			jp .show_fault 
5ee1			fault_loop_under: 
5ee1 11 03 5f			ld de, .loop_under 
5ee4 c3 9d 5f			jp .show_fault 
5ee7			 
5ee7 .. 00		.dsp_under: db "DSP Underflow",0 
5ef5 .. 00		.rsp_under: db "RSP Underflow",0 
5f03 .. 00		.loop_under: db "LOOP Underflow",0 
5f12			 
5f12			 
5f12 d5			type_faultn: 	push de 
5f13 e5					push hl 
5f14 cd c8 0b				call clear_display 
5f17 11 41 5f				   ld de, .typefaultn 
5f1a 3e 00				ld a, display_row_1 
5f1c cd db 0b				call str_at_display 
5f1f 11 65 ee				    ld de, debug_mark 
5f22 3e 11				ld a, display_row_1+17 
5f24 cd db 0b				call str_at_display 
5f27 cd eb 0b				call update_display 
5f2a			 
5f2a				; prompt before entering montior for investigating issue 
5f2a			 
5f2a 3e 78			ld a, display_row_4 
5f2c 11 6e 18			ld de, endprog 
5f2f			 
5f2f cd eb 0b			call update_display		 
5f32			 
5f32 cd 08 1b			call next_page_prompt 
5f35			 
5f35 e5					push hl 
5f36 d5					push de 
5f37 cd c2 18				call monitor 
5f3a cd 27 1f				call forth_warmstart 
5f3d c3 be 17				jp warmstart_afterauto 
5f40 76					halt 
5f41			 
5f41			 
5f41 .. 00		.typefaultn: db "NUM Type Expected TOS!",0 
5f58			 
5f58 d5			type_faults: 	push de 
5f59 e5					push hl 
5f5a cd c8 0b				call clear_display 
5f5d 11 86 5f				   ld de, .typefaults 
5f60 3e 00				ld a, display_row_1 
5f62 cd db 0b				call str_at_display 
5f65 11 65 ee				    ld de, debug_mark 
5f68 3e 11				ld a, display_row_1+17 
5f6a cd db 0b				call str_at_display 
5f6d cd eb 0b				call update_display 
5f70			 
5f70				; prompt before entering montior for investigating issue 
5f70			 
5f70 3e 78			ld a, display_row_4 
5f72 11 6e 18			ld de, endprog 
5f75			 
5f75 cd eb 0b			call update_display		 
5f78			 
5f78 cd 08 1b			call next_page_prompt 
5f7b			 
5f7b e1					pop hl 
5f7c d1					pop de 
5f7d cd c2 18				call monitor 
5f80 cd 27 1f				call forth_warmstart 
5f83 c3 be 17				jp warmstart_afterauto 
5f86			 
5f86			 
5f86 .. 00		.typefaults: db "STR Type Expected TOS!",0 
5f9d			 
5f9d			.show_fault: 	 
5f9d d5					push de 
5f9e cd c8 0b				call clear_display 
5fa1 d1					pop de 
5fa2 3e 00				ld a, display_row_1 
5fa4 cd db 0b				call str_at_display 
5fa7 11 65 ee				    ld de, debug_mark 
5faa 3e 11				ld a, display_row_1+17 
5fac cd db 0b				call str_at_display 
5faf cd eb 0b				call update_display 
5fb2			 
5fb2				; prompt before entering montior for investigating issue 
5fb2			 
5fb2 3e 78			ld a, display_row_4 
5fb4 11 6e 18			ld de, endprog 
5fb7			 
5fb7 cd eb 0b			call update_display		 
5fba			 
5fba cd 08 1b			call next_page_prompt 
5fbd			 
5fbd e1					pop hl 
5fbe d1					pop de 
5fbf cd c2 18				call monitor 
5fc2			; do a dump to cli and not warmstart so we preserve all of the uwords.  
5fc2			; TODO Make optional fault restart to cli or warm boot? 
5fc2					;jp warmstart 
5fc2 c3 02 18				jp cli 
5fc5 76					halt 
5fc6			 
5fc6			 
5fc6			; handle the auto run of code from files in storage 
5fc6			 
5fc6			 
5fc6			include "forth_startup.asm" 
5fc6			; Which startup method to use? 
5fc6			; 
5fc6			; version 1 - allows for a single stored file to be selected to run at start up (if se storage is enabled) 
5fc6			; followed by loading of a list of scripts in eeprom 
5fc6			 
5fc6			; version 2 - if se storage is enabled then auto load all files which begin with a '*' else use loading 
5fc6			; from eeprom 
5fc6			 
5fc6			; Select with define in main stubs 
5fc6			 
5fc6			if STARTUP_V1 
5fc6				include "forth_startupv1.asm" 
5fc6			; Startup script loading version 1 
5fc6			 
5fc6			; If SE storage is available first stage is to use the selected file 
5fc6			; then go through the eeprom list 
5fc6			 
5fc6 .. 00		sprompt1: db "Startup load...",0 
5fd6 .. 00		sprompt2: db "Run? 1=No *=End #=All",0 
5fec			 
5fec			 
5fec			 
5fec			 
5fec			forth_startup: 
5fec 21 1b 51			ld hl, startcmds 
5fef 3e 00			ld a, 0 
5ff1 32 e1 e6			ld (os_last_cmd), a    ; tmp var to skip prompts if doing all 
5ff4			 
5ff4 e5			.start1:	push hl 
5ff5 cd c8 0b			call clear_display 
5ff8 11 c6 5f			ld de, sprompt1 
5ffb 3e 00		        ld a, display_row_1 
5ffd cd db 0b			call str_at_display 
6000 11 d6 5f			ld de, sprompt2 
6003 3e 28		        ld a, display_row_2 
6005 cd db 0b			call str_at_display 
6008 e1				pop hl 
6009 e5				push hl 
600a 5e				ld e,(hl) 
600b 23				inc hl 
600c 56				ld d,(hl) 
600d 3e 50		        ld a, display_row_3 
600f cd db 0b			call str_at_display 
6012 cd eb 0b			call update_display 
6015			 
6015			 
6015 3a e1 e6			ld a, (os_last_cmd) 
6018 fe 00			cp 0 
601a 28 05			jr z, .startprompt 
601c cd f4 0a			call delay250ms 
601f 18 24			jr .startdo 
6021				 
6021				 
6021			 
6021			.startprompt: 
6021			 
6021 3e 9f			ld a,display_row_4 + display_cols - 1 
6023 11 06 1b		        ld de, endprg 
6026 cd db 0b			call str_at_display 
6029 cd eb 0b			call update_display 
602c cd 00 0b			call delay1s 
602f cd 9e 61			call cin_wait 
6032						 
6032 fe 2a			cp '*' 
6034 28 5e			jr z, .startupend1 
6036 fe 23			cp '#' 
6038 20 07			jr nz, .startno 
603a 3e 01			ld a, 1 
603c 32 e1 e6			ld (os_last_cmd),a 
603f 18 04			jr .startdo 
6041 fe 31		.startno:	cp '1' 
6043 28 3a			jr z,.startnxt  
6045			 
6045				; exec startup line 
6045			.startdo:	 
6045 e1				pop hl 
6046 e5				push hl 
6047				 
6047 5e				ld e,(hl) 
6048 23				inc hl 
6049 56				ld d,(hl) 
604a eb				ex de,hl 
604b			 
604b e5				push hl 
604c			 
604c 3e 00			ld a, 0 
604e				;ld a, FORTH_END_BUFFER 
604e cd 66 11			call strlent 
6051 23				inc hl   ; include zero term to copy 
6052 06 00			ld b,0 
6054 4d				ld c,l 
6055 e1				pop hl 
6056 11 bb e2			ld de, scratch 
6059 ed b0			ldir 
605b			 
605b			 
605b 21 bb e2			ld hl, scratch 
605e cd cb 1f			call forthparse 
6061 cd 07 20			call forthexec 
6064 cd 21 1f			call forthexec_cleanup 
6067			 
6067 3e 78			ld a, display_row_4 
6069 11 6e 18			ld de, endprog 
606c			 
606c cd eb 0b			call update_display		 
606f			 
606f 3a e1 e6			ld a, (os_last_cmd) 
6072 fe 00			cp 0 
6074 20 09			jr nz, .startnxt 
6076 cd 08 1b			call next_page_prompt 
6079 cd c8 0b		        call clear_display 
607c cd eb 0b			call update_display		 
607f			 
607f				; move onto next startup line? 
607f			.startnxt: 
607f			 
607f cd f4 0a			call delay250ms 
6082 e1				pop hl 
6083			 
6083 23				inc hl 
6084 23				inc hl 
6085			 
6085 e5				push hl 
6086 5e				ld e, (hl) 
6087 23				inc hl 
6088 56				ld d, (hl) 
6089 e1				pop hl 
608a				; TODO replace 0 test 
608a			 
608a eb				ex de, hl 
608b cd 1e 0e			call ishlzero 
608e			;	ld a,e 
608e			;	add d 
608e			;	cp 0    ; any left to do? 
608e eb				ex de, hl 
608f c2 f4 5f			jp nz, .start1 
6092 18 01			jr .startupend 
6094			 
6094 e1			.startupend1: pop hl 
6095			.startupend: 
6095			 
6095 cd c8 0b			call clear_display 
6098 cd eb 0b			call update_display 
609b c9				ret 
609c			if STORAGE_SE 
609c			 
609c			sprompt3: db "Loading from start-up file?:",0 
609c			sprompt4: db "(Y=Any key/N=No)",0 
609c			 
609c			 
609c			forth_autoload: 
609c			 
609c				; load block 0 of store 1 
609c				 
609c				ld a, $fe      ; bit 0 clear 
609c				ld (spi_device), a 
609c			 
609c				call storage_get_block_0 
609c			 
609c				ld a, (store_page+STORE_0_AUTOFILE) 
609c			 
609c				cp 0 
609c				ret z     ; auto start not enabled 
609c			 
609c				call clear_display 
609c			 
609c				; set bank 
609c			 
609c					ld a, (store_page+STORE_0_BANKRUN) 
609c					ld (spi_device), a 
609c			 
609c				; get file id to load from and get the file name to display 
609c			 
609c					ld a, (store_page+STORE_0_FILERUN) 
609c			 
609c					ld l, 0 
609c					ld h, a 
609c					ld de, store_page 
609c			 
609c					if DEBUG_FORTH_WORDS 
609c						DMARK "ASp" 
609c						CALLMONITOR 
609c					endif 
609c					call storage_read 
609c			 
609c					if DEBUG_FORTH_WORDS 
609c						DMARK "ASr" 
609c						CALLMONITOR 
609c					endif 
609c			 
609c					call ishlzero 
609c					ret z             ; file not found 
609c			 
609c					ld a, display_row_2 + 10 
609c					ld de, store_page+3 
609c					call str_at_display 
609c				 
609c			; 
609c			 
609c				ld a, display_row_1+5 
609c				ld de, sprompt3 
609c				call str_at_display 
609c				ld a, display_row_3+15 
609c				ld de, sprompt4 
609c				call str_at_display 
609c			 
609c				call update_display 
609c			 
609c				call cin_wait 
609c				cp 'n' 
609c				ret z 
609c				cp 'N' 
609c				ret z 
609c			 
609c				call delay1s 
609c			 
609c				ld a, (store_page+2) 
609c				ld (store_openmaxext), a    ; save count of ext 
609c				ld a, 1  
609c				ld (store_openext), a    ; save count of ext 
609c			 
609c			.autof:  
609c				ld l , a 
609c				 
609c				ld a, (store_page) 
609c				ld h, a	 
609c				ld de, store_page 
609c					if DEBUG_FORTH_WORDS 
609c						DMARK "ASl" 
609c						CALLMONITOR 
609c					endif 
609c					call storage_read 
609c				call ishlzero 
609c				ret z 
609c			;	jr z, .autoend 
609c			 
609c					if DEBUG_FORTH_WORDS 
609c						DMARK "ASc" 
609c						CALLMONITOR 
609c					endif 
609c				ld de, store_page+2 
609c				ld a, display_row_4 
609c				call str_at_display 
609c			 
609c				call update_display 
609c				call delay250ms 
609c			 
609c			 
609c			 
609c				ld hl, store_page+2 
609c				call forthparse 
609c				call forthexec 
609c				call forthexec_cleanup 
609c			 
609c				 
609c				ld a, (store_openext) 
609c				inc a 
609c				ld (store_openext), a    ; save count of ext 
609c			 
609c				jr .autof 
609c			;.autofdone: 
609c			; 
609c			;		if DEBUG_FORTH_WORDS 
609c			;			DMARK "ASx" 
609c			;			CALLMONITOR 
609c			;		endif 
609c			;;	call clear_display 
609c			;	ret 
609c			 
609c			 
609c			 
609c			endif 
# End of file forth_startupv1.asm
609c			endif 
609c			if STARTUP_V2 
609c				include "forth_startupv2.asm" 
609c			endif 
609c			 
# End of file forth_startup.asm
609c			 
609c			; eof 
# End of file forth_kernel.asm
609c			;include "nascombasic.asm" 
609c			 
609c			 
609c			; find out where the code ends if loaded into RAM (for SC114) 
609c			;endofcode:  
609c			;	nop 
609c			 
609c			 
609c			; jump to nmi vector 
609c			 
609c			init_nmi: 
609c 3e c9			ld a, $c9   ; RET 
609e 32 72 ee			ld (nmi_vector), a 
60a1 c9				ret 
60a2			nmi: 
60a2 e5				push hl 
60a3 d5				push de 
60a4 c5				push bc 
60a5 f5				push af 
60a6 cd 72 ee			call nmi_vector 
60a9 f5				push af 
60aa c5				push bc 
60ab d5				push de 
60ac e5				push hl 
60ad ed 4d			reti 
60af			 
60af			 
60af			; eof 
60af			 
# End of file main.asm
60af			;include "firmware_lcd_4x40.asm" 
60af			;;include "firmware_lcd_4x20.asm" 
60af			include "firmware_cpm_display.asm" 
60af			 
60af			; Serial display interface for SC114 
60af			 
60af			 
60af			display_row_1: equ 0 
60af			display_row_2: equ display_row_1+display_cols 
60af			display_row_3: equ display_row_2 + display_cols 
60af			display_row_4: equ display_row_3 + display_cols 
60af			 
60af			kLCDWidth:  EQU display_cols             ;Width in characters 
60af			kLCD_Line1: EQU 0x00  
60af			kLCD_Line2: EQU kLCD_Line1+kLCDWidth 
60af			; E1 
60af			kLCD_Line3: EQU kLCD_Line2+kLCDWidth 
60af			kLCD_Line4: EQU kLCD_Line3+kLCDWidth  
60af			 
60af			lcd_init: 
60af				; no init as handled by the SCM bios 
60af c9				ret 
60b0			 
60b0			 
60b0			; low level functions for direct screen writes 
60b0			 
60b0			; output char at pos? 
60b0			fLCD_Str: 
60b0			        ;out (SC114_SIO_1_OUT),a 
60b0 c5				push bc 
60b1 d5				push de 
60b2 5f				ld e, a 
60b3			; TODO Replace with CP/M BIOS call 
60b3 0e 02			ld c, $02 
60b5 cd 05 00			call 5 
60b8 d1				pop de 
60b9 c1				pop bc 
60ba c9				ret 
60bb			 
60bb			; position the cursor on the screen using A as realtive point in screen buffer (i.e. A=(x+(width/y))) 
60bb			fLCD_Pos: 
60bb				; use ASCII escape to position 
60bb			        ;out (SC114_SIO_1_OUT),a 
60bb c5				push bc 
60bc d5				push de 
60bd 5f				ld e, a 
60be 0e 02			ld c, $02 
60c0			; TODO Replace with CP/M BIOS call 
60c0 cd 05 00			call 5 
60c3 d1				pop de 
60c4 c1				pop bc 
60c5			 
60c5 c9				ret 
60c6			 
60c6			; output char at pos 
60c6			fLCD_Data: 
60c6			      ;  out (SC114_SIO_1_OUT),a 
60c6 c5				push bc 
60c7 d5				push de 
60c8 0e 02			ld c, $02 
60ca 5f				ld e, a 
60cb			; TODO Replace with CP/M BIOS call 
60cb cd 05 00			call 5 
60ce d1				pop de 
60cf c1				pop bc 
60d0			 
60d0 c9				ret 
60d1			 
60d1			; ascii cls  
60d1			 
60d1 1b 5b 48 24	.cls:   db 27, '[', 'H', "$" 
60d5			 
60d5 0d 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a ..	.clscpm: db 13, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,10,10,10,10,10,"$" 
60ec			;.clscpm: db 3, $3c,"$" 
60ec			 
60ec			; write the frame buffer given in hl to hardware  
60ec			write_display: 
60ec			 
60ec			API: equ 0 
60ec			 
60ec			if API 
60ec				push bc 
60ec				ld b, 4 
60ec			 
60ec			        ld (display_write_tmp), hl 	  
60ec			 
60ec				; clear and home cursor 
60ec			 
60ec				ld c, 9 
60ec				ld de, .cls 
60ec			; TODO Replace with CP/M BIOS call 
60ec				call 5 
60ec			 
60ec			 
60ec			.writeln: 
60ec			 
60ec				ld de, (display_write_tmp) 
60ec				ld c, 6 
60ec			; TODO Replace with CP/M BIOS call 
60ec				rst $30 
60ec				ld c, 7 
60ec				rst $30 
60ec			 
60ec				ld hl, (display_write_tmp) 
60ec				ld de, display_cols 
60ec				add hl,de 
60ec				ld (display_write_tmp),hl 
60ec			 
60ec				djnz  .writeln 
60ec			 
60ec				pop bc 
60ec			 
60ec			 
60ec				ret 
60ec			endif 
60ec e5				push hl 
60ed c5				push bc 
60ee d5				push de 
60ef			 
60ef			;	ld c, 2 
60ef			;	;ld de, .cls 
60ef			;	ld a, 27 
60ef			;	rst $30 
60ef			;	ld c, 2 
60ef			;	;ld de, .cls 
60ef			;	ld a, '[' 
60ef			;	rst $30 
60ef			; 
60ef			;	ld c, 2 
60ef			;	;ld de, .cls 
60ef			;	ld a, 'H' 
60ef			;	rst $30 
60ef			; 
60ef			 
60ef			 
60ef			; lots of CR/LF 
60ef			;	ld c, 9 
60ef			;	ld de, .clscpm 
60ef			;	call 5 
60ef			 
60ef			; xterm cls 
60ef 0e 02			ld c, 2 
60f1 1e 1b			ld e, 27 
60f3 cd 05 00			call 5 
60f6			; cls causes too much flicker 
60f6			;	ld c, 2 
60f6			;	ld e, 'c' 
60f6			;	call 5 
60f6			 
60f6			; use xterm home instead 
60f6 0e 02			ld c, 2 
60f8 1e 5b			ld e, '[' 
60fa cd 05 00			call 5 
60fd 0e 02			ld c, 2 
60ff 1e 48			ld e, 'H' 
6101 cd 05 00			call 5 
6104			LLL: equ 0 
6104			 
6104			if LLL 
6104			 
6104				ld c, 2 
6104				;ld de, .cls 
6104				ld e, 27 
6104			; TODO Replace with CP/M BIOS call 
6104				call 5 
6104			 
6104			 
6104				ld c, 2 
6104				;ld de, .cls 
6104				ld e, '[' 
6104			; TODO Replace with CP/M BIOS call 
6104				call 5 
6104				ld c, 2 
6104				;ld de, .cls 
6104				ld e, '2' 
6104			; TODO Replace with CP/M BIOS call 
6104				call 5 
6104				ld c, 2 
6104				;ld de, .cls 
6104				ld e, 'J' 
6104			; TODO Replace with CP/M BIOS call 
6104				call 5 
6104			 
6104			endif 
6104			 
6104 d1				pop de 
6105 c1				pop bc 
6106 e1				pop hl 
6107			 
6107			 
6107 22 c3 eb		        ld (display_write_tmp), hl 	  
610a 3e 00			ld a, kLCD_Line1 
610c			        ;    CALL fLCD_Pos       ;Position cursor to location in A 
610c 06 28			ld b, display_cols 
610e ed 5b c3 eb		ld de, (display_write_tmp) 
6112 cd 95 61			call write_len_string 
6115				 
6115			 
6115 e5			push hl 
6116 d5			push de 
6117 c5			push bc 
6118 0e 02			ld c, 2 
611a 1e 0a			ld e, 10 
611c cd 05 00			call 5 
611f 0e 02			ld c, 2 
6121 1e 0d			ld e, 13 
6123 cd 05 00			call 5 
6126			; TODO Replace with CP/M BIOS call 
6126				;rst $30 
6126 c1			pop bc 
6127 d1			pop de 
6128 e1			pop hl 
6129			 
6129				 
6129 2a c3 eb			ld hl, (display_write_tmp) 
612c 11 28 00			ld de, display_cols 
612f 19				add hl,de 
6130 22 c3 eb			ld (display_write_tmp),hl 
6133			 
6133				 
6133 3e 28			ld a, kLCD_Line2 
6135			        ;    CALL fLCD_Pos       ;Position cursor to location in A 
6135 06 28			ld b, display_cols 
6137 ed 5b c3 eb		ld de, (display_write_tmp) 
613b cd 95 61			call write_len_string 
613e				 
613e 2a c3 eb			ld hl, (display_write_tmp) 
6141 11 28 00			ld de, display_cols 
6144 19				add hl,de 
6145 22 c3 eb			ld (display_write_tmp),hl 
6148			 
6148 e5			push hl 
6149 d5			push de 
614a c5			push bc 
614b 0e 07			ld c, 7 
614d			; TODO Replace with CP/M BIOS call 
614d				;rst $30 
614d 0e 02			ld c, 2 
614f 1e 0a			ld e, 10 
6151 cd 05 00			call 5 
6154 0e 02			ld c, 2 
6156 1e 0d			ld e, 13 
6158 cd 05 00			call 5 
615b c1			pop bc 
615c d1			pop de 
615d e1			pop hl 
615e			 
615e				 
615e 3e 50			ld a, kLCD_Line3 
6160			         ;   CALL fLCD_Pos       ;Position cursor to location in A 
6160 06 28			ld b, display_cols 
6162 ed 5b c3 eb		ld de, (display_write_tmp) 
6166 cd 95 61			call write_len_string 
6169				 
6169 2a c3 eb			ld hl, (display_write_tmp) 
616c 11 28 00			ld de, display_cols 
616f 19				add hl,de 
6170 22 c3 eb			ld (display_write_tmp),hl 
6173			 
6173 e5			push hl 
6174 d5			push de 
6175 c5			push bc 
6176 0e 07			ld c, 7 
6178			; TODO Replace with CP/M BIOS call 
6178				;rst $30 
6178 0e 02			ld c, 2 
617a 1e 0a			ld e, 10 
617c cd 05 00			call 5 
617f 0e 02			ld c, 2 
6181 1e 0d			ld e, 13 
6183 cd 05 00			call 5 
6186 c1			pop bc 
6187 d1			pop de 
6188 e1			pop hl 
6189			 
6189				 
6189 3e 78			ld a, kLCD_Line4 
618b			          ;  CALL fLCD_Pos       ;Position cursor to location in A 
618b 06 28			ld b, display_cols 
618d ed 5b c3 eb		ld de, (display_write_tmp) 
6191 cd 95 61			call write_len_string 
6194 c9					ret 
6195			 
6195			 
6195				; write out a fixed length string given in b from de 
6195			 
6195 1a			write_len_string:   LD   A, (DE)        ;Get character from string 
6196 cd c6 60		            CALL fLCD_Data      ;Write character to display 
6199 13				inc de 
619a 10 f9			djnz write_len_string 
619c c9				ret 
619d			 
619d			 
619d			; eof 
# End of file firmware_cpm_display.asm
619d			;include "firmware_key_5x10.asm" 
619d			;;include "firmware_key_4x10.asm" 
619d			include "firmware_key_cpm.asm" 
619d			; Serial keyboard interface for SC114 
619d			 
619d			 
619d			key_init: 
619d				; no init as handled by the SCM bios 
619d c9				ret 
619e			 
619e			 
619e			cin_wait: 
619e			;	ld a, 0 
619e			;	ret 
619e			 
619e				;in a,(SC114_SIO_1_IN) 
619e			        ; Use SCM API to get from whatever console device we are using 
619e			 
619e			; TODO Replace with CP/M BIOS call 
619e c5				push bc 
619f 0e 01			ld c, $01 
61a1 cd 05 00			call 5 
61a4 c1				pop bc 
61a5 c9				ret 
61a6			 
61a6			cinndb:  
61a6			cin: 
61a6			 
61a6			 
61a6 c5				push bc 
61a7			 
61a7				; any key waiting to process? 
61a7			; TODO Replace with CP/M BIOS call 
61a7 0e 06			ld c, $06 
61a9 cd 05 00			call 5 
61ac 28 0d			jr z, .cin_skip 
61ae			 
61ae				; yep, get it 
61ae			 
61ae 0e 01			ld c, $01 
61b0			; TODO Replace with CP/M BIOS call 
61b0 cd 05 00			call 5 
61b3			 
61b3 fe 7f			cp $7f     ; back space 
61b5 20 02			jr nz, .skipbs 
61b7 3e 08			ld a, KEY_BS 
61b9			.skipbs: 
61b9			 
61b9 c1				pop bc 
61ba c9				ret 
61bb			.cin_skip: 
61bb 3e 00			ld a, 0 
61bd c1				pop bc 
61be c9				ret 
61bf			 
61bf			 
61bf			 
61bf			 
# End of file firmware_key_cpm.asm
61bf			endofcode:  
61bf			baseram:  
61bf 00				nop 
61c0			 
61c0			heap_start: equ baseram+15  ; Starting address of heap 
61c0			free_list:  equ baseram+10      ; Block struct for start of free list (MUST be 4 bytes) 
61c0			heap_size: equ  heap_end-heap_start      ; Number of bytes available in heap   TODO make all of user ram 
61c0			;VDU:  EQU     endofcode           ; BASIC Work space 
61c0			; eof 
61c0			 
# End of file os_mega_cpm.asm
61c0
